
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:

 float MapFloat(float value, float fromLow, float fromHigh, float toLow, float toHigh) {
    return (value - fromLow) * (toHigh - toLow) / (fromHigh - fromLow) + toLow; 
  }

  int FlowCalc(int dpvalue, int tabela_calib[TAMANHO_TABELAS]){
   0:	200044a0 	.word	0x200044a0
   4:	00005b5d 	.word	0x00005b5d
   8:	000128fb 	.word	0x000128fb
    if(abs(dpvalue) < tabela_calib[1]){
   c:	00005b15 	.word	0x00005b15
  10:	00005b15 	.word	0x00005b15
  14:	00005b15 	.word	0x00005b15
      if(dpvalue <= 0){
  18:	00005b15 	.word	0x00005b15
	...
        return (MapFloat(abs(dpvalue), 0, tabela_calib[1], tabflow[0], tabflow[1])*100);
      }
      return (MapFloat(abs(dpvalue), 0, tabela_calib[1], tabflow[0], tabflow[1])*(-1)*100);
  2c:	00005259 	.word	0x00005259
  30:	00005b15 	.word	0x00005b15
  34:	00000000 	.word	0x00000000
  38:	00005201 	.word	0x00005201
  3c:	00013a6b 	.word	0x00013a6b

00000040 <_irq_vector_table>:
  40:	00005345 00005345 00005345 00005345     ES..ES..ES..ES..
  50:	00005345 00005345 00005345 00005345     ES..ES..ES..ES..
  60:	00005345 00005345 00005345 00005345     ES..ES..ES..ES..
        return (MapFloat(abs(dpvalue), 0, tabela_calib[1], tabflow[0], tabflow[1])*100);
  70:	00005345 00005345 00005345 00005345     ES..ES..ES..ES..
  80:	00005345 00005345 00005345 00005345     ES..ES..ES..ES..
  90:	00005345 00005345 00005345 00005345     ES..ES..ES..ES..
  a0:	00005345 00005345 00005345 00005345     ES..ES..ES..ES..
    }
    for(int i = 1; i < TAMANHO_TABELAS; i++){
      if(tabela_calib[i] <= abs(dpvalue) && abs(dpvalue) < tabela_calib[i+1]){
        if(dpvalue <= 0){
          return (MapFloat(abs(dpvalue), tabela_calib[i], tabela_calib[i+1], tabflow[i], tabflow[i+1])*100);
  b0:	00005345 00005345 00005345 00005345     ES..ES..ES..ES..
  c0:	00005345 00005345 00005345 00005345     ES..ES..ES..ES..
  d0:	00005345 00005345 00005345 00005345     ES..ES..ES..ES..
  e0:	00005345 00005345 00005345 00005345     ES..ES..ES..ES..
  f0:	00005345 00005345 00005345 00005345     ES..ES..ES..ES..

Disassembly of section text:

00000100 <__aeabi_drsub>:
    for(int i = 1; i < TAMANHO_TABELAS; i++){
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
      if(tabela_calib[i] <= abs(dpvalue) && abs(dpvalue) < tabela_calib[i+1]){
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
        if(dpvalue <= 0){
     132:	f000 80e2 	beq.w	2fa <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0xfa>
        }
        return (MapFloat(abs(dpvalue), tabela_calib[i], tabela_calib[i+1], tabflow[i], tabflow[i+1])*(-1)*100);
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_IDLE_STACK_SIZE+0x3c>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     188:	d002      	beq.n	190 <CONFIG_IDLE_STACK_SIZE+0x50>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    for(int i = 1; i < TAMANHO_TABELAS; i++){
     190:	ea94 0f05 	teq	r4, r5
      }
    }
    return -1;
     194:	f000 80a7 	beq.w	2e6 <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0xe6>
  }
     198:	f1a4 0401 	sub.w	r4, r4, #1
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <CONFIG_IDLE_STACK_SIZE+0x9c>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
     1c2:	f10e 0e20 	add.w	lr, lr, #32
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0x30>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0x18>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <__data_size+0x27>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0x18>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0x7a>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0x76>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0x90>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0xde>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0xc6>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <__data_size+0x35>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1e>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <__data_size+0x17>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0x44>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0x44>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0x44>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16c>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c8>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf4>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x152>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x136>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x156>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x196>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1b2>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_ISR_STACK_SIZE+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__aeabi_ddiv+0x114>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__aeabi_ddiv+0x11e>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
     89a:	e712      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>

0000089c <__gedf2>:
     89c:	f04f 3cff 	mov.w	ip, #4294967295
     8a0:	e006      	b.n	8b0 <__cmpdf2+0x4>
     8a2:	bf00      	nop

000008a4 <__ledf2>:
     8a4:	f04f 0c01 	mov.w	ip, #1
     8a8:	e002      	b.n	8b0 <__cmpdf2+0x4>
     8aa:	bf00      	nop

000008ac <__cmpdf2>:
     8ac:	f04f 0c01 	mov.w	ip, #1
     8b0:	f84d cd04 	str.w	ip, [sp, #-4]!
     8b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     8b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     8bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     8c0:	bf18      	it	ne
     8c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     8c6:	d01b      	beq.n	900 <__cmpdf2+0x54>
     8c8:	b001      	add	sp, #4
     8ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     8ce:	bf0c      	ite	eq
     8d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     8d4:	ea91 0f03 	teqne	r1, r3
     8d8:	bf02      	ittt	eq
     8da:	ea90 0f02 	teqeq	r0, r2
     8de:	2000      	moveq	r0, #0
     8e0:	4770      	bxeq	lr
     8e2:	f110 0f00 	cmn.w	r0, #0
     8e6:	ea91 0f03 	teq	r1, r3
     8ea:	bf58      	it	pl
     8ec:	4299      	cmppl	r1, r3
     8ee:	bf08      	it	eq
     8f0:	4290      	cmpeq	r0, r2
     8f2:	bf2c      	ite	cs
     8f4:	17d8      	asrcs	r0, r3, #31
     8f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     8fa:	f040 0001 	orr.w	r0, r0, #1
     8fe:	4770      	bx	lr
     900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     908:	d102      	bne.n	910 <__cmpdf2+0x64>
     90a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     90e:	d107      	bne.n	920 <__cmpdf2+0x74>
     910:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     918:	d1d6      	bne.n	8c8 <__cmpdf2+0x1c>
     91a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     91e:	d0d3      	beq.n	8c8 <__cmpdf2+0x1c>
     920:	f85d 0b04 	ldr.w	r0, [sp], #4
     924:	4770      	bx	lr
     926:	bf00      	nop

00000928 <__aeabi_cdrcmple>:
     928:	4684      	mov	ip, r0
     92a:	4610      	mov	r0, r2
     92c:	4662      	mov	r2, ip
     92e:	468c      	mov	ip, r1
     930:	4619      	mov	r1, r3
     932:	4663      	mov	r3, ip
     934:	e000      	b.n	938 <__aeabi_cdcmpeq>
     936:	bf00      	nop

00000938 <__aeabi_cdcmpeq>:
     938:	b501      	push	{r0, lr}
     93a:	f7ff ffb7 	bl	8ac <__cmpdf2>
     93e:	2800      	cmp	r0, #0
     940:	bf48      	it	mi
     942:	f110 0f00 	cmnmi.w	r0, #0
     946:	bd01      	pop	{r0, pc}

00000948 <__aeabi_dcmpeq>:
     948:	f84d ed08 	str.w	lr, [sp, #-8]!
     94c:	f7ff fff4 	bl	938 <__aeabi_cdcmpeq>
     950:	bf0c      	ite	eq
     952:	2001      	moveq	r0, #1
     954:	2000      	movne	r0, #0
     956:	f85d fb08 	ldr.w	pc, [sp], #8
     95a:	bf00      	nop

0000095c <__aeabi_dcmplt>:
     95c:	f84d ed08 	str.w	lr, [sp, #-8]!
     960:	f7ff ffea 	bl	938 <__aeabi_cdcmpeq>
     964:	bf34      	ite	cc
     966:	2001      	movcc	r0, #1
     968:	2000      	movcs	r0, #0
     96a:	f85d fb08 	ldr.w	pc, [sp], #8
     96e:	bf00      	nop

00000970 <__aeabi_dcmple>:
     970:	f84d ed08 	str.w	lr, [sp, #-8]!
     974:	f7ff ffe0 	bl	938 <__aeabi_cdcmpeq>
     978:	bf94      	ite	ls
     97a:	2001      	movls	r0, #1
     97c:	2000      	movhi	r0, #0
     97e:	f85d fb08 	ldr.w	pc, [sp], #8
     982:	bf00      	nop

00000984 <__aeabi_dcmpge>:
     984:	f84d ed08 	str.w	lr, [sp, #-8]!
     988:	f7ff ffce 	bl	928 <__aeabi_cdrcmple>
     98c:	bf94      	ite	ls
     98e:	2001      	movls	r0, #1
     990:	2000      	movhi	r0, #0
     992:	f85d fb08 	ldr.w	pc, [sp], #8
     996:	bf00      	nop

00000998 <__aeabi_dcmpgt>:
     998:	f84d ed08 	str.w	lr, [sp, #-8]!
     99c:	f7ff ffc4 	bl	928 <__aeabi_cdrcmple>
     9a0:	bf34      	ite	cc
     9a2:	2001      	movcc	r0, #1
     9a4:	2000      	movcs	r0, #0
     9a6:	f85d fb08 	ldr.w	pc, [sp], #8
     9aa:	bf00      	nop

000009ac <__aeabi_d2f>:
     9ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
     9b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     9b4:	bf24      	itt	cs
     9b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     9ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     9be:	d90d      	bls.n	9dc <__aeabi_d2f+0x30>
     9c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     9c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     9c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     9cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     9d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     9d4:	bf08      	it	eq
     9d6:	f020 0001 	biceq.w	r0, r0, #1
     9da:	4770      	bx	lr
     9dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     9e0:	d121      	bne.n	a26 <__aeabi_d2f+0x7a>
     9e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     9e6:	bfbc      	itt	lt
     9e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     9ec:	4770      	bxlt	lr
     9ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     9f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
     9f6:	f1c2 0218 	rsb	r2, r2, #24
     9fa:	f1c2 0c20 	rsb	ip, r2, #32
     9fe:	fa10 f30c 	lsls.w	r3, r0, ip
     a02:	fa20 f002 	lsr.w	r0, r0, r2
     a06:	bf18      	it	ne
     a08:	f040 0001 	orrne.w	r0, r0, #1
     a0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     a14:	fa03 fc0c 	lsl.w	ip, r3, ip
     a18:	ea40 000c 	orr.w	r0, r0, ip
     a1c:	fa23 f302 	lsr.w	r3, r3, r2
     a20:	ea4f 0343 	mov.w	r3, r3, lsl #1
     a24:	e7cc      	b.n	9c0 <__aeabi_d2f+0x14>
     a26:	ea7f 5362 	mvns.w	r3, r2, asr #21
     a2a:	d107      	bne.n	a3c <__aeabi_d2f+0x90>
     a2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     a30:	bf1e      	ittt	ne
     a32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     a36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     a3a:	4770      	bxne	lr
     a3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     a40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     a44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     a48:	4770      	bx	lr
     a4a:	bf00      	nop

00000a4c <__aeabi_fmul>:
     a4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
     a50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     a54:	bf1e      	ittt	ne
     a56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     a5a:	ea92 0f0c 	teqne	r2, ip
     a5e:	ea93 0f0c 	teqne	r3, ip
     a62:	d06f      	beq.n	b44 <__aeabi_fmul+0xf8>
     a64:	441a      	add	r2, r3
     a66:	ea80 0c01 	eor.w	ip, r0, r1
     a6a:	0240      	lsls	r0, r0, #9
     a6c:	bf18      	it	ne
     a6e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     a72:	d01e      	beq.n	ab2 <__aeabi_fmul+0x66>
     a74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     a78:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     a7c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     a80:	fba0 3101 	umull	r3, r1, r0, r1
     a84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     a88:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     a8c:	bf3e      	ittt	cc
     a8e:	0049      	lslcc	r1, r1, #1
     a90:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     a94:	005b      	lslcc	r3, r3, #1
     a96:	ea40 0001 	orr.w	r0, r0, r1
     a9a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     a9e:	2afd      	cmp	r2, #253	; 0xfd
     aa0:	d81d      	bhi.n	ade <__aeabi_fmul+0x92>
     aa2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     aa6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     aaa:	bf08      	it	eq
     aac:	f020 0001 	biceq.w	r0, r0, #1
     ab0:	4770      	bx	lr
     ab2:	f090 0f00 	teq	r0, #0
     ab6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     aba:	bf08      	it	eq
     abc:	0249      	lsleq	r1, r1, #9
     abe:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     ac2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     ac6:	3a7f      	subs	r2, #127	; 0x7f
     ac8:	bfc2      	ittt	gt
     aca:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     ace:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     ad2:	4770      	bxgt	lr
     ad4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     ad8:	f04f 0300 	mov.w	r3, #0
     adc:	3a01      	subs	r2, #1
     ade:	dc5d      	bgt.n	b9c <__aeabi_fmul+0x150>
     ae0:	f112 0f19 	cmn.w	r2, #25
     ae4:	bfdc      	itt	le
     ae6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     aea:	4770      	bxle	lr
     aec:	f1c2 0200 	rsb	r2, r2, #0
     af0:	0041      	lsls	r1, r0, #1
     af2:	fa21 f102 	lsr.w	r1, r1, r2
     af6:	f1c2 0220 	rsb	r2, r2, #32
     afa:	fa00 fc02 	lsl.w	ip, r0, r2
     afe:	ea5f 0031 	movs.w	r0, r1, rrx
     b02:	f140 0000 	adc.w	r0, r0, #0
     b06:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     b0a:	bf08      	it	eq
     b0c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     b10:	4770      	bx	lr
     b12:	f092 0f00 	teq	r2, #0
     b16:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     b1a:	bf02      	ittt	eq
     b1c:	0040      	lsleq	r0, r0, #1
     b1e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     b22:	3a01      	subeq	r2, #1
     b24:	d0f9      	beq.n	b1a <__aeabi_fmul+0xce>
     b26:	ea40 000c 	orr.w	r0, r0, ip
     b2a:	f093 0f00 	teq	r3, #0
     b2e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     b32:	bf02      	ittt	eq
     b34:	0049      	lsleq	r1, r1, #1
     b36:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     b3a:	3b01      	subeq	r3, #1
     b3c:	d0f9      	beq.n	b32 <__aeabi_fmul+0xe6>
     b3e:	ea41 010c 	orr.w	r1, r1, ip
     b42:	e78f      	b.n	a64 <__aeabi_fmul+0x18>
     b44:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     b48:	ea92 0f0c 	teq	r2, ip
     b4c:	bf18      	it	ne
     b4e:	ea93 0f0c 	teqne	r3, ip
     b52:	d00a      	beq.n	b6a <__aeabi_fmul+0x11e>
     b54:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     b58:	bf18      	it	ne
     b5a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     b5e:	d1d8      	bne.n	b12 <__aeabi_fmul+0xc6>
     b60:	ea80 0001 	eor.w	r0, r0, r1
     b64:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     b68:	4770      	bx	lr
     b6a:	f090 0f00 	teq	r0, #0
     b6e:	bf17      	itett	ne
     b70:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     b74:	4608      	moveq	r0, r1
     b76:	f091 0f00 	teqne	r1, #0
     b7a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     b7e:	d014      	beq.n	baa <__aeabi_fmul+0x15e>
     b80:	ea92 0f0c 	teq	r2, ip
     b84:	d101      	bne.n	b8a <__aeabi_fmul+0x13e>
     b86:	0242      	lsls	r2, r0, #9
     b88:	d10f      	bne.n	baa <__aeabi_fmul+0x15e>
     b8a:	ea93 0f0c 	teq	r3, ip
     b8e:	d103      	bne.n	b98 <__aeabi_fmul+0x14c>
     b90:	024b      	lsls	r3, r1, #9
     b92:	bf18      	it	ne
     b94:	4608      	movne	r0, r1
     b96:	d108      	bne.n	baa <__aeabi_fmul+0x15e>
     b98:	ea80 0001 	eor.w	r0, r0, r1
     b9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     ba0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     ba4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     ba8:	4770      	bx	lr
     baa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     bae:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     bb2:	4770      	bx	lr

00000bb4 <__aeabi_fdiv>:
     bb4:	f04f 0cff 	mov.w	ip, #255	; 0xff
     bb8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     bbc:	bf1e      	ittt	ne
     bbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     bc2:	ea92 0f0c 	teqne	r2, ip
     bc6:	ea93 0f0c 	teqne	r3, ip
     bca:	d069      	beq.n	ca0 <__aeabi_fdiv+0xec>
     bcc:	eba2 0203 	sub.w	r2, r2, r3
     bd0:	ea80 0c01 	eor.w	ip, r0, r1
     bd4:	0249      	lsls	r1, r1, #9
     bd6:	ea4f 2040 	mov.w	r0, r0, lsl #9
     bda:	d037      	beq.n	c4c <__aeabi_fdiv+0x98>
     bdc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     be0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     be4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     be8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     bec:	428b      	cmp	r3, r1
     bee:	bf38      	it	cc
     bf0:	005b      	lslcc	r3, r3, #1
     bf2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     bf6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     bfa:	428b      	cmp	r3, r1
     bfc:	bf24      	itt	cs
     bfe:	1a5b      	subcs	r3, r3, r1
     c00:	ea40 000c 	orrcs.w	r0, r0, ip
     c04:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     c08:	bf24      	itt	cs
     c0a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     c0e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     c12:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     c16:	bf24      	itt	cs
     c18:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     c1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     c20:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     c24:	bf24      	itt	cs
     c26:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     c2a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     c2e:	011b      	lsls	r3, r3, #4
     c30:	bf18      	it	ne
     c32:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     c36:	d1e0      	bne.n	bfa <__aeabi_fdiv+0x46>
     c38:	2afd      	cmp	r2, #253	; 0xfd
     c3a:	f63f af50 	bhi.w	ade <__aeabi_fmul+0x92>
     c3e:	428b      	cmp	r3, r1
     c40:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     c44:	bf08      	it	eq
     c46:	f020 0001 	biceq.w	r0, r0, #1
     c4a:	4770      	bx	lr
     c4c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     c50:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     c54:	327f      	adds	r2, #127	; 0x7f
     c56:	bfc2      	ittt	gt
     c58:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     c5c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     c60:	4770      	bxgt	lr
     c62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     c66:	f04f 0300 	mov.w	r3, #0
     c6a:	3a01      	subs	r2, #1
     c6c:	e737      	b.n	ade <__aeabi_fmul+0x92>
     c6e:	f092 0f00 	teq	r2, #0
     c72:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     c76:	bf02      	ittt	eq
     c78:	0040      	lsleq	r0, r0, #1
     c7a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     c7e:	3a01      	subeq	r2, #1
     c80:	d0f9      	beq.n	c76 <__aeabi_fdiv+0xc2>
     c82:	ea40 000c 	orr.w	r0, r0, ip
     c86:	f093 0f00 	teq	r3, #0
     c8a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     c8e:	bf02      	ittt	eq
     c90:	0049      	lsleq	r1, r1, #1
     c92:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     c96:	3b01      	subeq	r3, #1
     c98:	d0f9      	beq.n	c8e <__aeabi_fdiv+0xda>
     c9a:	ea41 010c 	orr.w	r1, r1, ip
     c9e:	e795      	b.n	bcc <__aeabi_fdiv+0x18>
     ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     ca4:	ea92 0f0c 	teq	r2, ip
     ca8:	d108      	bne.n	cbc <__aeabi_fdiv+0x108>
     caa:	0242      	lsls	r2, r0, #9
     cac:	f47f af7d 	bne.w	baa <__aeabi_fmul+0x15e>
     cb0:	ea93 0f0c 	teq	r3, ip
     cb4:	f47f af70 	bne.w	b98 <__aeabi_fmul+0x14c>
     cb8:	4608      	mov	r0, r1
     cba:	e776      	b.n	baa <__aeabi_fmul+0x15e>
     cbc:	ea93 0f0c 	teq	r3, ip
     cc0:	d104      	bne.n	ccc <__aeabi_fdiv+0x118>
     cc2:	024b      	lsls	r3, r1, #9
     cc4:	f43f af4c 	beq.w	b60 <__aeabi_fmul+0x114>
     cc8:	4608      	mov	r0, r1
     cca:	e76e      	b.n	baa <__aeabi_fmul+0x15e>
     ccc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     cd0:	bf18      	it	ne
     cd2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     cd6:	d1ca      	bne.n	c6e <__aeabi_fdiv+0xba>
     cd8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     cdc:	f47f af5c 	bne.w	b98 <__aeabi_fmul+0x14c>
     ce0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     ce4:	f47f af3c 	bne.w	b60 <__aeabi_fmul+0x114>
     ce8:	e75f      	b.n	baa <__aeabi_fmul+0x15e>
     cea:	bf00      	nop

00000cec <__aeabi_f2iz>:
     cec:	ea4f 0240 	mov.w	r2, r0, lsl #1
     cf0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     cf4:	d30f      	bcc.n	d16 <__aeabi_f2iz+0x2a>
     cf6:	f04f 039e 	mov.w	r3, #158	; 0x9e
     cfa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     cfe:	d90d      	bls.n	d1c <__aeabi_f2iz+0x30>
     d00:	ea4f 2300 	mov.w	r3, r0, lsl #8
     d04:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     d08:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     d0c:	fa23 f002 	lsr.w	r0, r3, r2
     d10:	bf18      	it	ne
     d12:	4240      	negne	r0, r0
     d14:	4770      	bx	lr
     d16:	f04f 0000 	mov.w	r0, #0
     d1a:	4770      	bx	lr
     d1c:	f112 0f61 	cmn.w	r2, #97	; 0x61
     d20:	d101      	bne.n	d26 <__aeabi_f2iz+0x3a>
     d22:	0242      	lsls	r2, r0, #9
     d24:	d105      	bne.n	d32 <__aeabi_f2iz+0x46>
     d26:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
     d2a:	bf08      	it	eq
     d2c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     d30:	4770      	bx	lr
     d32:	f04f 0000 	mov.w	r0, #0
     d36:	4770      	bx	lr

00000d38 <__aeabi_uldivmod>:
     d38:	b953      	cbnz	r3, d50 <__aeabi_uldivmod+0x18>
     d3a:	b94a      	cbnz	r2, d50 <__aeabi_uldivmod+0x18>
     d3c:	2900      	cmp	r1, #0
     d3e:	bf08      	it	eq
     d40:	2800      	cmpeq	r0, #0
     d42:	bf1c      	itt	ne
     d44:	f04f 31ff 	movne.w	r1, #4294967295
     d48:	f04f 30ff 	movne.w	r0, #4294967295
     d4c:	f000 b980 	b.w	1050 <__aeabi_idiv0>
     d50:	f1ad 0c08 	sub.w	ip, sp, #8
     d54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     d58:	f000 f81a 	bl	d90 <__udivmoddi4>
     d5c:	f8dd e004 	ldr.w	lr, [sp, #4]
     d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     d64:	b004      	add	sp, #16
     d66:	4770      	bx	lr

00000d68 <__popcountsi2>:
     d68:	0843      	lsrs	r3, r0, #1
     d6a:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     d6e:	1ac0      	subs	r0, r0, r3
     d70:	0883      	lsrs	r3, r0, #2
     d72:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     d76:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     d7a:	4418      	add	r0, r3
     d7c:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     d80:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     d84:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     d88:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     d8c:	0e00      	lsrs	r0, r0, #24
     d8e:	4770      	bx	lr

00000d90 <__udivmoddi4>:
     d90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     d94:	9e08      	ldr	r6, [sp, #32]
     d96:	460d      	mov	r5, r1
     d98:	4604      	mov	r4, r0
     d9a:	468e      	mov	lr, r1
     d9c:	2b00      	cmp	r3, #0
     d9e:	f040 8082 	bne.w	ea6 <__udivmoddi4+0x116>
     da2:	428a      	cmp	r2, r1
     da4:	4617      	mov	r7, r2
     da6:	d946      	bls.n	e36 <__udivmoddi4+0xa6>
     da8:	fab2 f282 	clz	r2, r2
     dac:	b14a      	cbz	r2, dc2 <__udivmoddi4+0x32>
     dae:	f1c2 0120 	rsb	r1, r2, #32
     db2:	fa05 f302 	lsl.w	r3, r5, r2
     db6:	fa20 f101 	lsr.w	r1, r0, r1
     dba:	4097      	lsls	r7, r2
     dbc:	ea41 0e03 	orr.w	lr, r1, r3
     dc0:	4094      	lsls	r4, r2
     dc2:	ea4f 4817 	mov.w	r8, r7, lsr #16
     dc6:	0c23      	lsrs	r3, r4, #16
     dc8:	fbbe fcf8 	udiv	ip, lr, r8
     dcc:	b2b9      	uxth	r1, r7
     dce:	fb08 ee1c 	mls	lr, r8, ip, lr
     dd2:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     dd6:	fb0c f001 	mul.w	r0, ip, r1
     dda:	4298      	cmp	r0, r3
     ddc:	d90a      	bls.n	df4 <__udivmoddi4+0x64>
     dde:	18fb      	adds	r3, r7, r3
     de0:	f10c 35ff 	add.w	r5, ip, #4294967295
     de4:	f080 8116 	bcs.w	1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>
     de8:	4298      	cmp	r0, r3
     dea:	f240 8113 	bls.w	1014 <CONFIG_FPROTECT_BLOCK_SIZE+0x14>
     dee:	f1ac 0c02 	sub.w	ip, ip, #2
     df2:	443b      	add	r3, r7
     df4:	1a1b      	subs	r3, r3, r0
     df6:	b2a4      	uxth	r4, r4
     df8:	fbb3 f0f8 	udiv	r0, r3, r8
     dfc:	fb08 3310 	mls	r3, r8, r0, r3
     e00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     e04:	fb00 f101 	mul.w	r1, r0, r1
     e08:	42a1      	cmp	r1, r4
     e0a:	d909      	bls.n	e20 <__udivmoddi4+0x90>
     e0c:	193c      	adds	r4, r7, r4
     e0e:	f100 33ff 	add.w	r3, r0, #4294967295
     e12:	f080 8101 	bcs.w	1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
     e16:	42a1      	cmp	r1, r4
     e18:	f240 80fe 	bls.w	1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
     e1c:	3802      	subs	r0, #2
     e1e:	443c      	add	r4, r7
     e20:	1a64      	subs	r4, r4, r1
     e22:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     e26:	2100      	movs	r1, #0
     e28:	b11e      	cbz	r6, e32 <__udivmoddi4+0xa2>
     e2a:	40d4      	lsrs	r4, r2
     e2c:	2300      	movs	r3, #0
     e2e:	e9c6 4300 	strd	r4, r3, [r6]
     e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     e36:	b902      	cbnz	r2, e3a <__udivmoddi4+0xaa>
     e38:	deff      	udf	#255	; 0xff
     e3a:	fab2 f282 	clz	r2, r2
     e3e:	2a00      	cmp	r2, #0
     e40:	d14f      	bne.n	ee2 <__udivmoddi4+0x152>
     e42:	1bcb      	subs	r3, r1, r7
     e44:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     e48:	fa1f f887 	uxth.w	r8, r7
     e4c:	2101      	movs	r1, #1
     e4e:	fbb3 fcfe 	udiv	ip, r3, lr
     e52:	0c25      	lsrs	r5, r4, #16
     e54:	fb0e 331c 	mls	r3, lr, ip, r3
     e58:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     e5c:	fb08 f30c 	mul.w	r3, r8, ip
     e60:	42ab      	cmp	r3, r5
     e62:	d907      	bls.n	e74 <__udivmoddi4+0xe4>
     e64:	197d      	adds	r5, r7, r5
     e66:	f10c 30ff 	add.w	r0, ip, #4294967295
     e6a:	d202      	bcs.n	e72 <__udivmoddi4+0xe2>
     e6c:	42ab      	cmp	r3, r5
     e6e:	f200 80e7 	bhi.w	1040 <CONFIG_FPROTECT_BLOCK_SIZE+0x40>
     e72:	4684      	mov	ip, r0
     e74:	1aed      	subs	r5, r5, r3
     e76:	b2a3      	uxth	r3, r4
     e78:	fbb5 f0fe 	udiv	r0, r5, lr
     e7c:	fb0e 5510 	mls	r5, lr, r0, r5
     e80:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     e84:	fb08 f800 	mul.w	r8, r8, r0
     e88:	45a0      	cmp	r8, r4
     e8a:	d907      	bls.n	e9c <__udivmoddi4+0x10c>
     e8c:	193c      	adds	r4, r7, r4
     e8e:	f100 33ff 	add.w	r3, r0, #4294967295
     e92:	d202      	bcs.n	e9a <__udivmoddi4+0x10a>
     e94:	45a0      	cmp	r8, r4
     e96:	f200 80d7 	bhi.w	1048 <CONFIG_FPROTECT_BLOCK_SIZE+0x48>
     e9a:	4618      	mov	r0, r3
     e9c:	eba4 0408 	sub.w	r4, r4, r8
     ea0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     ea4:	e7c0      	b.n	e28 <__udivmoddi4+0x98>
     ea6:	428b      	cmp	r3, r1
     ea8:	d908      	bls.n	ebc <__udivmoddi4+0x12c>
     eaa:	2e00      	cmp	r6, #0
     eac:	f000 80af 	beq.w	100e <CONFIG_FPROTECT_BLOCK_SIZE+0xe>
     eb0:	2100      	movs	r1, #0
     eb2:	e9c6 0500 	strd	r0, r5, [r6]
     eb6:	4608      	mov	r0, r1
     eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     ebc:	fab3 f183 	clz	r1, r3
     ec0:	2900      	cmp	r1, #0
     ec2:	d14b      	bne.n	f5c <__udivmoddi4+0x1cc>
     ec4:	42ab      	cmp	r3, r5
     ec6:	d302      	bcc.n	ece <__udivmoddi4+0x13e>
     ec8:	4282      	cmp	r2, r0
     eca:	f200 80b7 	bhi.w	103c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>
     ece:	1a84      	subs	r4, r0, r2
     ed0:	eb65 0303 	sbc.w	r3, r5, r3
     ed4:	2001      	movs	r0, #1
     ed6:	469e      	mov	lr, r3
     ed8:	2e00      	cmp	r6, #0
     eda:	d0aa      	beq.n	e32 <__udivmoddi4+0xa2>
     edc:	e9c6 4e00 	strd	r4, lr, [r6]
     ee0:	e7a7      	b.n	e32 <__udivmoddi4+0xa2>
     ee2:	f1c2 0c20 	rsb	ip, r2, #32
     ee6:	fa01 f302 	lsl.w	r3, r1, r2
     eea:	4097      	lsls	r7, r2
     eec:	fa20 f00c 	lsr.w	r0, r0, ip
     ef0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     ef4:	fa21 fc0c 	lsr.w	ip, r1, ip
     ef8:	4318      	orrs	r0, r3
     efa:	fbbc f1fe 	udiv	r1, ip, lr
     efe:	0c05      	lsrs	r5, r0, #16
     f00:	fb0e cc11 	mls	ip, lr, r1, ip
     f04:	fa1f f887 	uxth.w	r8, r7
     f08:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     f0c:	fb01 f308 	mul.w	r3, r1, r8
     f10:	42ab      	cmp	r3, r5
     f12:	fa04 f402 	lsl.w	r4, r4, r2
     f16:	d909      	bls.n	f2c <__udivmoddi4+0x19c>
     f18:	197d      	adds	r5, r7, r5
     f1a:	f101 3cff 	add.w	ip, r1, #4294967295
     f1e:	f080 808b 	bcs.w	1038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>
     f22:	42ab      	cmp	r3, r5
     f24:	f240 8088 	bls.w	1038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>
     f28:	3902      	subs	r1, #2
     f2a:	443d      	add	r5, r7
     f2c:	1aeb      	subs	r3, r5, r3
     f2e:	b285      	uxth	r5, r0
     f30:	fbb3 f0fe 	udiv	r0, r3, lr
     f34:	fb0e 3310 	mls	r3, lr, r0, r3
     f38:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     f3c:	fb00 f308 	mul.w	r3, r0, r8
     f40:	42ab      	cmp	r3, r5
     f42:	d907      	bls.n	f54 <__udivmoddi4+0x1c4>
     f44:	197d      	adds	r5, r7, r5
     f46:	f100 3cff 	add.w	ip, r0, #4294967295
     f4a:	d271      	bcs.n	1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
     f4c:	42ab      	cmp	r3, r5
     f4e:	d96f      	bls.n	1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
     f50:	3802      	subs	r0, #2
     f52:	443d      	add	r5, r7
     f54:	1aeb      	subs	r3, r5, r3
     f56:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     f5a:	e778      	b.n	e4e <__udivmoddi4+0xbe>
     f5c:	f1c1 0c20 	rsb	ip, r1, #32
     f60:	408b      	lsls	r3, r1
     f62:	fa22 f70c 	lsr.w	r7, r2, ip
     f66:	431f      	orrs	r7, r3
     f68:	fa20 f40c 	lsr.w	r4, r0, ip
     f6c:	fa05 f301 	lsl.w	r3, r5, r1
     f70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     f74:	fa25 f50c 	lsr.w	r5, r5, ip
     f78:	431c      	orrs	r4, r3
     f7a:	0c23      	lsrs	r3, r4, #16
     f7c:	fbb5 f9fe 	udiv	r9, r5, lr
     f80:	fa1f f887 	uxth.w	r8, r7
     f84:	fb0e 5519 	mls	r5, lr, r9, r5
     f88:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     f8c:	fb09 fa08 	mul.w	sl, r9, r8
     f90:	45aa      	cmp	sl, r5
     f92:	fa02 f201 	lsl.w	r2, r2, r1
     f96:	fa00 f301 	lsl.w	r3, r0, r1
     f9a:	d908      	bls.n	fae <__udivmoddi4+0x21e>
     f9c:	197d      	adds	r5, r7, r5
     f9e:	f109 30ff 	add.w	r0, r9, #4294967295
     fa2:	d247      	bcs.n	1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
     fa4:	45aa      	cmp	sl, r5
     fa6:	d945      	bls.n	1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
     fa8:	f1a9 0902 	sub.w	r9, r9, #2
     fac:	443d      	add	r5, r7
     fae:	eba5 050a 	sub.w	r5, r5, sl
     fb2:	b2a4      	uxth	r4, r4
     fb4:	fbb5 f0fe 	udiv	r0, r5, lr
     fb8:	fb0e 5510 	mls	r5, lr, r0, r5
     fbc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     fc0:	fb00 f808 	mul.w	r8, r0, r8
     fc4:	45a0      	cmp	r8, r4
     fc6:	d907      	bls.n	fd8 <__udivmoddi4+0x248>
     fc8:	193c      	adds	r4, r7, r4
     fca:	f100 35ff 	add.w	r5, r0, #4294967295
     fce:	d22d      	bcs.n	102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>
     fd0:	45a0      	cmp	r8, r4
     fd2:	d92b      	bls.n	102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>
     fd4:	3802      	subs	r0, #2
     fd6:	443c      	add	r4, r7
     fd8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     fdc:	eba4 0408 	sub.w	r4, r4, r8
     fe0:	fba0 8902 	umull	r8, r9, r0, r2
     fe4:	454c      	cmp	r4, r9
     fe6:	46c6      	mov	lr, r8
     fe8:	464d      	mov	r5, r9
     fea:	d319      	bcc.n	1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>
     fec:	d016      	beq.n	101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
     fee:	b15e      	cbz	r6, 1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
     ff0:	ebb3 020e 	subs.w	r2, r3, lr
     ff4:	eb64 0405 	sbc.w	r4, r4, r5
     ff8:	fa04 fc0c 	lsl.w	ip, r4, ip
     ffc:	40ca      	lsrs	r2, r1
     ffe:	ea4c 0202 	orr.w	r2, ip, r2
    1002:	40cc      	lsrs	r4, r1
    1004:	e9c6 2400 	strd	r2, r4, [r6]
    1008:	2100      	movs	r1, #0
    100a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    100e:	4631      	mov	r1, r6
    1010:	4630      	mov	r0, r6
    1012:	e70e      	b.n	e32 <__udivmoddi4+0xa2>
    1014:	46ac      	mov	ip, r5
    1016:	e6ed      	b.n	df4 <__udivmoddi4+0x64>
    1018:	4618      	mov	r0, r3
    101a:	e701      	b.n	e20 <__udivmoddi4+0x90>
    101c:	4543      	cmp	r3, r8
    101e:	d2e6      	bcs.n	fee <__udivmoddi4+0x25e>
    1020:	ebb8 0e02 	subs.w	lr, r8, r2
    1024:	eb69 0507 	sbc.w	r5, r9, r7
    1028:	3801      	subs	r0, #1
    102a:	e7e0      	b.n	fee <__udivmoddi4+0x25e>
    102c:	4628      	mov	r0, r5
    102e:	e7d3      	b.n	fd8 <__udivmoddi4+0x248>
    1030:	4660      	mov	r0, ip
    1032:	e78f      	b.n	f54 <__udivmoddi4+0x1c4>
    1034:	4681      	mov	r9, r0
    1036:	e7ba      	b.n	fae <__udivmoddi4+0x21e>
    1038:	4661      	mov	r1, ip
    103a:	e777      	b.n	f2c <__udivmoddi4+0x19c>
    103c:	4608      	mov	r0, r1
    103e:	e74b      	b.n	ed8 <__udivmoddi4+0x148>
    1040:	f1ac 0c02 	sub.w	ip, ip, #2
    1044:	443d      	add	r5, r7
    1046:	e715      	b.n	e74 <__udivmoddi4+0xe4>
    1048:	3802      	subs	r0, #2
    104a:	443c      	add	r4, r7
    104c:	e726      	b.n	e9c <__udivmoddi4+0x10c>
    104e:	bf00      	nop

00001050 <__aeabi_idiv0>:
    1050:	4770      	bx	lr
    1052:	bf00      	nop
    1054:	0000      	movs	r0, r0
	...

00001058 <CMD3>:
	memcpy(bufferACK,MSG,sizeof(MSG));
}


// Zerar os transdutores
void CMD3(char *data){
    1058:	b5f0      	push	{r4, r5, r6, r7, lr}
    105a:	b085      	sub	sp, #20
        char MSG[] = {ACK, data[1], data[2],0,0};
    105c:	2306      	movs	r3, #6
    105e:	f88d 3008 	strb.w	r3, [sp, #8]
    1062:	7843      	ldrb	r3, [r0, #1]
    1064:	f88d 3009 	strb.w	r3, [sp, #9]
    1068:	7883      	ldrb	r3, [r0, #2]
    106a:	f88d 300a 	strb.w	r3, [sp, #10]
    106e:	2300      	movs	r3, #0
    1070:	f88d 300b 	strb.w	r3, [sp, #11]
    1074:	f88d 300c 	strb.w	r3, [sp, #12]
		// char MSG[] = {ACK, data[1], data[2],0,0,0,0};
        // uint8_t bufferLPS[3]={0};
		uint8_t bufferSDP[3]={0};
    1078:	4a51      	ldr	r2, [pc, #324]	; (11c0 <CMD3+0x168>)
    107a:	8812      	ldrh	r2, [r2, #0]
    107c:	f8ad 2004 	strh.w	r2, [sp, #4]
    1080:	f88d 3006 	strb.w	r3, [sp, #6]
		uint8_t bufferHSC[2]={0};
    1084:	f8ad 3000 	strh.w	r3, [sp]
		signed short calc_press;

		tabela_HSC[0]=0;
    1088:	2300      	movs	r3, #0
    108a:	4a4e      	ldr	r2, [pc, #312]	; (11c4 <CMD3+0x16c>)
    108c:	6013      	str	r3, [r2, #0]
		tabela_SDP[0]=0;
    108e:	4a4e      	ldr	r2, [pc, #312]	; (11c8 <CMD3+0x170>)
    1090:	6013      	str	r3, [r2, #0]
		offset_LPS[0]=0;
    1092:	4a4e      	ldr	r2, [pc, #312]	; (11cc <CMD3+0x174>)
    1094:	6013      	str	r3, [r2, #0]

		int k = 0;

        if(data[2] == 0x12){
    1096:	7883      	ldrb	r3, [r0, #2]
    1098:	2b12      	cmp	r3, #18
    109a:	d001      	beq.n	10a0 <CMD3+0x48>

			SendMsg(MSG,5);
			lenBufferACK = sizeof(MSG);
			memcpy(bufferACK,MSG,sizeof(MSG));
        }
}
    109c:	b005      	add	sp, #20
    109e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            for(k = 0;k<32;k++){
    10a0:	2500      	movs	r5, #0
    10a2:	2d1f      	cmp	r5, #31
    10a4:	dc60      	bgt.n	1168 <CMD3+0x110>
                ReadSensorI2C(bufferSDP, ADDRESS_SDP31 ,3);
    10a6:	2203      	movs	r2, #3
    10a8:	2121      	movs	r1, #33	; 0x21
    10aa:	a801      	add	r0, sp, #4
    10ac:	f000 f9dc 	bl	1468 <ReadSensorI2C>
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke1(*(uintptr_t *)&us, K_SYSCALL_K_USLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_usleep(us);
    10b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    10b4:	f00f f93a 	bl	1032c <z_impl_k_usleep>
				calc_press = ((bufferSDP[0]<<8 | bufferSDP[1]));
    10b8:	f89d 4004 	ldrb.w	r4, [sp, #4]
    10bc:	0224      	lsls	r4, r4, #8
    10be:	b224      	sxth	r4, r4
    10c0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    10c4:	431c      	orrs	r4, r3
               	tabela_SDP[0]  += calc_press/((escalaBufferSDP) * 100.0);
    10c6:	4b42      	ldr	r3, [pc, #264]	; (11d0 <CMD3+0x178>)
    10c8:	6818      	ldr	r0, [r3, #0]
    10ca:	f7ff f96b 	bl	3a4 <__aeabi_i2d>
    10ce:	2200      	movs	r2, #0
    10d0:	4b40      	ldr	r3, [pc, #256]	; (11d4 <CMD3+0x17c>)
    10d2:	f7ff f9d1 	bl	478 <__aeabi_dmul>
    10d6:	4606      	mov	r6, r0
    10d8:	460f      	mov	r7, r1
    10da:	4620      	mov	r0, r4
    10dc:	f7ff f962 	bl	3a4 <__aeabi_i2d>
    10e0:	4632      	mov	r2, r6
    10e2:	463b      	mov	r3, r7
    10e4:	f7ff faf2 	bl	6cc <__aeabi_ddiv>
    10e8:	4606      	mov	r6, r0
    10ea:	460f      	mov	r7, r1
    10ec:	4c36      	ldr	r4, [pc, #216]	; (11c8 <CMD3+0x170>)
    10ee:	6820      	ldr	r0, [r4, #0]
    10f0:	f7ff f96a 	bl	3c8 <__aeabi_f2d>
    10f4:	4632      	mov	r2, r6
    10f6:	463b      	mov	r3, r7
    10f8:	f7ff f808 	bl	10c <__adddf3>
    10fc:	f7ff fc56 	bl	9ac <__aeabi_d2f>
    1100:	6020      	str	r0, [r4, #0]
            	ReadSensorI2C(bufferHSC, ADDRESS_HSC ,2);
    1102:	2202      	movs	r2, #2
    1104:	2178      	movs	r1, #120	; 0x78
    1106:	4668      	mov	r0, sp
    1108:	f000 f9ae 	bl	1468 <ReadSensorI2C>
    110c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1110:	f00f f90c 	bl	1032c <z_impl_k_usleep>
                tabela_HSC[0] += ((((bufferHSC[0] & 0x3F)<<8 | bufferHSC[1])-0x0666)*(12.4541-(-12.4541))/(0x3999-0x0666) -12.4541);
    1114:	f89d 0000 	ldrb.w	r0, [sp]
    1118:	0200      	lsls	r0, r0, #8
    111a:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    111e:	f89d 3001 	ldrb.w	r3, [sp, #1]
    1122:	4318      	orrs	r0, r3
    1124:	f2a0 6066 	subw	r0, r0, #1638	; 0x666
    1128:	f7ff f93c 	bl	3a4 <__aeabi_i2d>
    112c:	a31e      	add	r3, pc, #120	; (adr r3, 11a8 <CMD3+0x150>)
    112e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1132:	f7ff f9a1 	bl	478 <__aeabi_dmul>
    1136:	a31e      	add	r3, pc, #120	; (adr r3, 11b0 <CMD3+0x158>)
    1138:	e9d3 2300 	ldrd	r2, r3, [r3]
    113c:	f7ff fac6 	bl	6cc <__aeabi_ddiv>
    1140:	a31d      	add	r3, pc, #116	; (adr r3, 11b8 <CMD3+0x160>)
    1142:	e9d3 2300 	ldrd	r2, r3, [r3]
    1146:	f7fe ffdf 	bl	108 <__aeabi_dsub>
    114a:	4606      	mov	r6, r0
    114c:	460f      	mov	r7, r1
    114e:	4c1d      	ldr	r4, [pc, #116]	; (11c4 <CMD3+0x16c>)
    1150:	6820      	ldr	r0, [r4, #0]
    1152:	f7ff f939 	bl	3c8 <__aeabi_f2d>
    1156:	4632      	mov	r2, r6
    1158:	463b      	mov	r3, r7
    115a:	f7fe ffd7 	bl	10c <__adddf3>
    115e:	f7ff fc25 	bl	9ac <__aeabi_d2f>
    1162:	6020      	str	r0, [r4, #0]
            for(k = 0;k<32;k++){
    1164:	3501      	adds	r5, #1
    1166:	e79c      	b.n	10a2 <CMD3+0x4a>
			tabela_SDP[0]=tabela_SDP[0]/32.0;
    1168:	4c17      	ldr	r4, [pc, #92]	; (11c8 <CMD3+0x170>)
    116a:	f04f 5174 	mov.w	r1, #1023410176	; 0x3d000000
    116e:	6820      	ldr	r0, [r4, #0]
    1170:	f7ff fc6c 	bl	a4c <__aeabi_fmul>
    1174:	6020      	str	r0, [r4, #0]
			Savedata(2);
    1176:	2002      	movs	r0, #2
    1178:	f000 fbf4 	bl	1964 <Savedata>
			tabela_HSC[0]=tabela_HSC[0]/32.0;
    117c:	4c11      	ldr	r4, [pc, #68]	; (11c4 <CMD3+0x16c>)
    117e:	f04f 5174 	mov.w	r1, #1023410176	; 0x3d000000
    1182:	6820      	ldr	r0, [r4, #0]
    1184:	f7ff fc62 	bl	a4c <__aeabi_fmul>
    1188:	6020      	str	r0, [r4, #0]
			Savedata(1);
    118a:	2001      	movs	r0, #1
    118c:	f000 fbea 	bl	1964 <Savedata>
			SendMsg(MSG,5);
    1190:	2105      	movs	r1, #5
    1192:	a802      	add	r0, sp, #8
    1194:	f000 fa22 	bl	15dc <SendMsg>
			lenBufferACK = sizeof(MSG);
    1198:	2205      	movs	r2, #5
    119a:	4b0f      	ldr	r3, [pc, #60]	; (11d8 <CMD3+0x180>)
    119c:	701a      	strb	r2, [r3, #0]
			memcpy(bufferACK,MSG,sizeof(MSG));
    119e:	a902      	add	r1, sp, #8
    11a0:	480e      	ldr	r0, [pc, #56]	; (11dc <CMD3+0x184>)
    11a2:	f011 fc8d 	bl	12ac0 <memcpy>
}
    11a6:	e779      	b.n	109c <CMD3+0x44>
    11a8:	cb923a2a 	.word	0xcb923a2a
    11ac:	4038e87f 	.word	0x4038e87f
    11b0:	00000000 	.word	0x00000000
    11b4:	40c99980 	.word	0x40c99980
    11b8:	cb923a2a 	.word	0xcb923a2a
    11bc:	4028e87f 	.word	0x4028e87f
    11c0:	00015fc0 	.word	0x00015fc0
    11c4:	200014bc 	.word	0x200014bc
    11c8:	20001568 	.word	0x20001568
    11cc:	20001410 	.word	0x20001410
    11d0:	20000004 	.word	0x20000004
    11d4:	40590000 	.word	0x40590000
    11d8:	20002f74 	.word	0x20002f74
    11dc:	20000a20 	.word	0x20000a20

000011e0 <CMD4>:


void CMD4(char *data){
    11e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    11e4:	b085      	sub	sp, #20
    11e6:	4606      	mov	r6, r0
    char MSG[] = {ACK, data[1], data[2],0,0};
    11e8:	2306      	movs	r3, #6
    11ea:	f88d 3008 	strb.w	r3, [sp, #8]
    11ee:	7843      	ldrb	r3, [r0, #1]
    11f0:	f88d 3009 	strb.w	r3, [sp, #9]
    11f4:	7882      	ldrb	r2, [r0, #2]
    11f6:	f88d 200a 	strb.w	r2, [sp, #10]
    11fa:	2500      	movs	r5, #0
    11fc:	f88d 500b 	strb.w	r5, [sp, #11]
    1200:	f88d 500c 	strb.w	r5, [sp, #12]
	//  char MSG[] = {ACK, data[1], data[2],0,0,0,0};
	uint8_t bufferSDP[3]={0};
    1204:	4b7e      	ldr	r3, [pc, #504]	; (1400 <CMD4+0x220>)
    1206:	881b      	ldrh	r3, [r3, #0]
    1208:	f8ad 3004 	strh.w	r3, [sp, #4]
    120c:	f88d 5006 	strb.w	r5, [sp, #6]
	uint8_t bufferHSC[2]={0};
    1210:	f8ad 5000 	strh.w	r5, [sp]
	signed short calc_press;

	tabela_HSC[data[2]]=0;
    1214:	2300      	movs	r3, #0
    1216:	497b      	ldr	r1, [pc, #492]	; (1404 <CMD4+0x224>)
    1218:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	tabela_SDP[data[2]]=0;
    121c:	7881      	ldrb	r1, [r0, #2]
    121e:	4a7a      	ldr	r2, [pc, #488]	; (1408 <CMD4+0x228>)
    1220:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	int k = 0;
	
	char aux3[4];
	char aux2[4];
	for(k = 0;k<32;k++){
    1224:	2d1f      	cmp	r5, #31
    1226:	dc66      	bgt.n	12f6 <CMD4+0x116>
		ReadSensorI2C(bufferSDP, ADDRESS_SDP31 ,3);
    1228:	2203      	movs	r2, #3
    122a:	2121      	movs	r1, #33	; 0x21
    122c:	a801      	add	r0, sp, #4
    122e:	f000 f91b 	bl	1468 <ReadSensorI2C>
    1232:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1236:	f00f f879 	bl	1032c <z_impl_k_usleep>
		k_usleep(500);
		calc_press = ((bufferSDP[0]<<8 | bufferSDP[1]));
    123a:	f89d 4004 	ldrb.w	r4, [sp, #4]
    123e:	0224      	lsls	r4, r4, #8
    1240:	b224      	sxth	r4, r4
    1242:	f89d 3005 	ldrb.w	r3, [sp, #5]
    1246:	431c      	orrs	r4, r3
		tabela_SDP[data[2]]  += calc_press/((escalaBufferSDP) * 100.0);
    1248:	78b7      	ldrb	r7, [r6, #2]
    124a:	4b70      	ldr	r3, [pc, #448]	; (140c <CMD4+0x22c>)
    124c:	6818      	ldr	r0, [r3, #0]
    124e:	f7ff f8a9 	bl	3a4 <__aeabi_i2d>
    1252:	2200      	movs	r2, #0
    1254:	4b6e      	ldr	r3, [pc, #440]	; (1410 <CMD4+0x230>)
    1256:	f7ff f90f 	bl	478 <__aeabi_dmul>
    125a:	4680      	mov	r8, r0
    125c:	4689      	mov	r9, r1
    125e:	4620      	mov	r0, r4
    1260:	f7ff f8a0 	bl	3a4 <__aeabi_i2d>
    1264:	4642      	mov	r2, r8
    1266:	464b      	mov	r3, r9
    1268:	f7ff fa30 	bl	6cc <__aeabi_ddiv>
    126c:	4680      	mov	r8, r0
    126e:	4689      	mov	r9, r1
    1270:	4c65      	ldr	r4, [pc, #404]	; (1408 <CMD4+0x228>)
    1272:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
    1276:	f7ff f8a7 	bl	3c8 <__aeabi_f2d>
    127a:	4642      	mov	r2, r8
    127c:	464b      	mov	r3, r9
    127e:	f7fe ff45 	bl	10c <__adddf3>
    1282:	f7ff fb93 	bl	9ac <__aeabi_d2f>
    1286:	f844 0027 	str.w	r0, [r4, r7, lsl #2]

		ReadSensorI2C(bufferHSC, ADDRESS_HSC ,2);
    128a:	2202      	movs	r2, #2
    128c:	2178      	movs	r1, #120	; 0x78
    128e:	4668      	mov	r0, sp
    1290:	f000 f8ea 	bl	1468 <ReadSensorI2C>
    1294:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1298:	f00f f848 	bl	1032c <z_impl_k_usleep>
		k_usleep(500);
		tabela_HSC[data[2]] += ((((bufferHSC[0] & 0x3F)<<8 | bufferHSC[1])-0x0666)*(12.4541-(-12.4541))/(0x3999-0x0666) -12.4541);
    129c:	78b4      	ldrb	r4, [r6, #2]
    129e:	f89d 0000 	ldrb.w	r0, [sp]
    12a2:	0200      	lsls	r0, r0, #8
    12a4:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    12a8:	f89d 3001 	ldrb.w	r3, [sp, #1]
    12ac:	4318      	orrs	r0, r3
    12ae:	f2a0 6066 	subw	r0, r0, #1638	; 0x666
    12b2:	f7ff f877 	bl	3a4 <__aeabi_i2d>
    12b6:	a34c      	add	r3, pc, #304	; (adr r3, 13e8 <CMD4+0x208>)
    12b8:	e9d3 2300 	ldrd	r2, r3, [r3]
    12bc:	f7ff f8dc 	bl	478 <__aeabi_dmul>
    12c0:	a34b      	add	r3, pc, #300	; (adr r3, 13f0 <CMD4+0x210>)
    12c2:	e9d3 2300 	ldrd	r2, r3, [r3]
    12c6:	f7ff fa01 	bl	6cc <__aeabi_ddiv>
    12ca:	a34b      	add	r3, pc, #300	; (adr r3, 13f8 <CMD4+0x218>)
    12cc:	e9d3 2300 	ldrd	r2, r3, [r3]
    12d0:	f7fe ff1a 	bl	108 <__aeabi_dsub>
    12d4:	4680      	mov	r8, r0
    12d6:	4689      	mov	r9, r1
    12d8:	4f4a      	ldr	r7, [pc, #296]	; (1404 <CMD4+0x224>)
    12da:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
    12de:	f7ff f873 	bl	3c8 <__aeabi_f2d>
    12e2:	4642      	mov	r2, r8
    12e4:	464b      	mov	r3, r9
    12e6:	f7fe ff11 	bl	10c <__adddf3>
    12ea:	f7ff fb5f 	bl	9ac <__aeabi_d2f>
    12ee:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
	for(k = 0;k<32;k++){
    12f2:	3501      	adds	r5, #1
    12f4:	e796      	b.n	1224 <CMD4+0x44>
	}

	tabela_SDP[data[2]]=abs((tabela_SDP[data[2]]/32.0)-tabela_SDP[0]);
    12f6:	78b7      	ldrb	r7, [r6, #2]
    12f8:	f8df 810c 	ldr.w	r8, [pc, #268]	; 1408 <CMD4+0x228>
    12fc:	f858 0027 	ldr.w	r0, [r8, r7, lsl #2]
    1300:	f7ff f862 	bl	3c8 <__aeabi_f2d>
    1304:	2200      	movs	r2, #0
    1306:	4b43      	ldr	r3, [pc, #268]	; (1414 <CMD4+0x234>)
    1308:	f7ff f8b6 	bl	478 <__aeabi_dmul>
    130c:	4604      	mov	r4, r0
    130e:	460d      	mov	r5, r1
    1310:	f8d8 0000 	ldr.w	r0, [r8]
    1314:	f7ff f858 	bl	3c8 <__aeabi_f2d>
    1318:	4602      	mov	r2, r0
    131a:	460b      	mov	r3, r1
    131c:	4620      	mov	r0, r4
    131e:	4629      	mov	r1, r5
    1320:	f7fe fef2 	bl	108 <__aeabi_dsub>
    1324:	4605      	mov	r5, r0
    1326:	460c      	mov	r4, r1
    1328:	2200      	movs	r2, #0
    132a:	2300      	movs	r3, #0
    132c:	4628      	mov	r0, r5
    132e:	4621      	mov	r1, r4
    1330:	f7ff fb32 	bl	998 <__aeabi_dcmpgt>
    1334:	2800      	cmp	r0, #0
    1336:	d04e      	beq.n	13d6 <CMD4+0x1f6>
    1338:	4628      	mov	r0, r5
    133a:	4621      	mov	r1, r4
    133c:	f7ff fb36 	bl	9ac <__aeabi_d2f>
    1340:	4b31      	ldr	r3, [pc, #196]	; (1408 <CMD4+0x228>)
    1342:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
	Savedata(2);
    1346:	2002      	movs	r0, #2
    1348:	f000 fb0c 	bl	1964 <Savedata>

	tabela_HSC[data[2]]=abs((tabela_HSC[data[2]]/32.0) - tabela_HSC[0]);
    134c:	78b7      	ldrb	r7, [r6, #2]
    134e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 1404 <CMD4+0x224>
    1352:	f858 0027 	ldr.w	r0, [r8, r7, lsl #2]
    1356:	f7ff f837 	bl	3c8 <__aeabi_f2d>
    135a:	2200      	movs	r2, #0
    135c:	4b2d      	ldr	r3, [pc, #180]	; (1414 <CMD4+0x234>)
    135e:	f7ff f88b 	bl	478 <__aeabi_dmul>
    1362:	4604      	mov	r4, r0
    1364:	460d      	mov	r5, r1
    1366:	f8d8 0000 	ldr.w	r0, [r8]
    136a:	f7ff f82d 	bl	3c8 <__aeabi_f2d>
    136e:	4602      	mov	r2, r0
    1370:	460b      	mov	r3, r1
    1372:	4620      	mov	r0, r4
    1374:	4629      	mov	r1, r5
    1376:	f7fe fec7 	bl	108 <__aeabi_dsub>
    137a:	4605      	mov	r5, r0
    137c:	460c      	mov	r4, r1
    137e:	2200      	movs	r2, #0
    1380:	2300      	movs	r3, #0
    1382:	4628      	mov	r0, r5
    1384:	4621      	mov	r1, r4
    1386:	f7ff fb07 	bl	998 <__aeabi_dcmpgt>
    138a:	b338      	cbz	r0, 13dc <CMD4+0x1fc>
    138c:	4628      	mov	r0, r5
    138e:	4621      	mov	r1, r4
    1390:	f7ff fb0c 	bl	9ac <__aeabi_d2f>
    1394:	4c1b      	ldr	r4, [pc, #108]	; (1404 <CMD4+0x224>)
    1396:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
	Savedata(1);
    139a:	2001      	movs	r0, #1
    139c:	f000 fae2 	bl	1964 <Savedata>
	//BEGIN::AREA RESERVADA PARA DEBUGAR PROTOCOLO, MANTER COMENTADO!

	//END::AREA RESERVADA


	int aux = (tabela_HSC[data[2]]*1000)/1;
    13a0:	78b3      	ldrb	r3, [r6, #2]
    13a2:	491d      	ldr	r1, [pc, #116]	; (1418 <CMD4+0x238>)
    13a4:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
    13a8:	f7ff fb50 	bl	a4c <__aeabi_fmul>
    13ac:	f7ff fc9e 	bl	cec <__aeabi_f2iz>
	MSG[3]= aux>>8;
    13b0:	1203      	asrs	r3, r0, #8
    13b2:	f88d 300b 	strb.w	r3, [sp, #11]
	MSG[4]= aux & 0x00FF;
    13b6:	f88d 000c 	strb.w	r0, [sp, #12]

	SendMsg(MSG,5);
    13ba:	2105      	movs	r1, #5
    13bc:	a802      	add	r0, sp, #8
    13be:	f000 f90d 	bl	15dc <SendMsg>
	lenBufferACK = sizeof(MSG);
    13c2:	2205      	movs	r2, #5
    13c4:	4b15      	ldr	r3, [pc, #84]	; (141c <CMD4+0x23c>)
    13c6:	701a      	strb	r2, [r3, #0]
	memcpy(bufferACK,MSG,sizeof(MSG));
    13c8:	a902      	add	r1, sp, #8
    13ca:	4815      	ldr	r0, [pc, #84]	; (1420 <CMD4+0x240>)
    13cc:	f011 fb78 	bl	12ac0 <memcpy>
}
    13d0:	b005      	add	sp, #20
    13d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	tabela_SDP[data[2]]=abs((tabela_SDP[data[2]]/32.0)-tabela_SDP[0]);
    13d6:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
    13da:	e7ad      	b.n	1338 <CMD4+0x158>
	tabela_HSC[data[2]]=abs((tabela_HSC[data[2]]/32.0) - tabela_HSC[0]);
    13dc:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
    13e0:	e7d4      	b.n	138c <CMD4+0x1ac>
    13e2:	bf00      	nop
    13e4:	f3af 8000 	nop.w
    13e8:	cb923a2a 	.word	0xcb923a2a
    13ec:	4038e87f 	.word	0x4038e87f
    13f0:	00000000 	.word	0x00000000
    13f4:	40c99980 	.word	0x40c99980
    13f8:	cb923a2a 	.word	0xcb923a2a
    13fc:	4028e87f 	.word	0x4028e87f
    1400:	00015fc0 	.word	0x00015fc0
    1404:	200014bc 	.word	0x200014bc
    1408:	20001568 	.word	0x20001568
    140c:	20000004 	.word	0x20000004
    1410:	40590000 	.word	0x40590000
    1414:	3fa00000 	.word	0x3fa00000
    1418:	447a0000 	.word	0x447a0000
    141c:	20002f74 	.word	0x20002f74
    1420:	20000a20 	.word	0x20000a20

00001424 <main>:
 */

#include <zephyr.h>
#include  "protocol-usb.h"
void main(void)
{
    1424:	b508      	push	{r3, lr}
	ConfigureUSB();
    1426:	f000 f877 	bl	1518 <ConfigureUSB>
	ConfigureLFS();
    142a:	f000 fa21 	bl	1870 <ConfigureLFS>
	ConfigureSDP();
    142e:	f000 f843 	bl	14b8 <ConfigureSDP>
	// uint8_t lFSCV[4];
	// memcpy(lFSCV,&escalaBufferSDP,4); 
	// SendMsg(lFSCV,4);
	// uint8_t lFSCV[4];
	// uint8_t lFSCVI[4];
	Readdata(1);
    1432:	2001      	movs	r0, #1
    1434:	f000 fae0 	bl	19f8 <Readdata>
	Readdata(2);
    1438:	2002      	movs	r0, #2
    143a:	f000 fadd 	bl	19f8 <Readdata>
    143e:	e006      	b.n	144e <main+0x2a>
		// for (int i = 0;i<4;i++)lFSCVI[i]=lFSCV[3-i];
		// SendMsg(lFSCVI,4);
	
	while(1){
		if(uart_irq_rx_ready(uart_dev)){
			ReadMsg();
    1440:	f000 f9b8 	bl	17b4 <ReadMsg>
	return z_impl_k_sleep(timeout);
    1444:	f640 40cd 	movw	r0, #3277	; 0xccd
    1448:	2100      	movs	r1, #0
    144a:	f00e ff43 	bl	102d4 <z_impl_k_sleep>
		if(uart_irq_rx_ready(uart_dev)){
    144e:	4b05      	ldr	r3, [pc, #20]	; (1464 <main+0x40>)
    1450:	6818      	ldr	r0, [r3, #0]
 * @retval -ENOTSUP if API is not enabled.
 */
static inline int uart_irq_rx_ready(const struct device *dev)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    1452:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if (api->irq_rx_ready == NULL) {
    1454:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1456:	2b00      	cmp	r3, #0
    1458:	d0f2      	beq.n	1440 <main+0x1c>
		return -ENOSYS;
	}
	return api->irq_rx_ready(dev);
    145a:	4798      	blx	r3
    145c:	2800      	cmp	r0, #0
    145e:	d0f1      	beq.n	1444 <main+0x20>
    1460:	e7ee      	b.n	1440 <main+0x1c>
    1462:	bf00      	nop
    1464:	20000ec0 	.word	0x20000ec0

00001468 <ReadSensorI2C>:
static int ReadSensorI2C( uint8_t *buf, uint16_t addr, uint8_t len){
    1468:	b510      	push	{r4, lr}
    146a:	b084      	sub	sp, #16
    146c:	4604      	mov	r4, r0
    146e:	460b      	mov	r3, r1
    return i2c_read(i2c_dev ,buf ,len ,addr);
    1470:	4906      	ldr	r1, [pc, #24]	; (148c <ReadSensorI2C+0x24>)
    1472:	6808      	ldr	r0, [r1, #0]
static inline int i2c_read(const struct device *dev, uint8_t *buf,
			   uint32_t num_bytes, uint16_t addr)
{
	struct i2c_msg msg;

	msg.buf = buf;
    1474:	9401      	str	r4, [sp, #4]
	msg.len = num_bytes;
    1476:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
    1478:	2203      	movs	r2, #3
    147a:	f88d 200c 	strb.w	r2, [sp, #12]
	const struct i2c_driver_api *api =
    147e:	6882      	ldr	r2, [r0, #8]
	return api->transfer(dev, msgs, num_msgs, addr);
    1480:	6854      	ldr	r4, [r2, #4]
    1482:	2201      	movs	r2, #1
    1484:	a901      	add	r1, sp, #4
    1486:	47a0      	blx	r4
}
    1488:	b004      	add	sp, #16
    148a:	bd10      	pop	{r4, pc}
    148c:	20000000 	.word	0x20000000

00001490 <WriteSensorI2C>:
static int WriteSensorI2C( uint8_t *buf, uint16_t addr, uint8_t len){
    1490:	b510      	push	{r4, lr}
    1492:	b084      	sub	sp, #16
    1494:	4604      	mov	r4, r0
    1496:	460b      	mov	r3, r1
    return i2c_write(i2c_dev ,buf ,len ,addr);
    1498:	4906      	ldr	r1, [pc, #24]	; (14b4 <WriteSensorI2C+0x24>)
    149a:	6808      	ldr	r0, [r1, #0]
	msg.buf = (uint8_t *)buf;
    149c:	9401      	str	r4, [sp, #4]
	msg.len = num_bytes;
    149e:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    14a0:	2202      	movs	r2, #2
    14a2:	f88d 200c 	strb.w	r2, [sp, #12]
	const struct i2c_driver_api *api =
    14a6:	6882      	ldr	r2, [r0, #8]
	return api->transfer(dev, msgs, num_msgs, addr);
    14a8:	6854      	ldr	r4, [r2, #4]
    14aa:	2201      	movs	r2, #1
    14ac:	a901      	add	r1, sp, #4
    14ae:	47a0      	blx	r4
}
    14b0:	b004      	add	sp, #16
    14b2:	bd10      	pop	{r4, pc}
    14b4:	20000000 	.word	0x20000000

000014b8 <ConfigureSDP>:
void ConfigureSDP(){
    14b8:	b500      	push	{lr}
    14ba:	b085      	sub	sp, #20
	    char temp[9] = {0};
    14bc:	2300      	movs	r3, #0
    14be:	9301      	str	r3, [sp, #4]
    14c0:	9302      	str	r3, [sp, #8]
    14c2:	f88d 300c 	strb.w	r3, [sp, #12]
		char buf[2]={0x36,0x1e};
    14c6:	f641 6336 	movw	r3, #7734	; 0x1e36
    14ca:	f8ad 3000 	strh.w	r3, [sp]
		WriteSensorI2C(buf,ADDRESS_SDP31,2);
    14ce:	2202      	movs	r2, #2
    14d0:	2121      	movs	r1, #33	; 0x21
    14d2:	4668      	mov	r0, sp
    14d4:	f7ff ffdc 	bl	1490 <WriteSensorI2C>
    14d8:	f44f 7024 	mov.w	r0, #656	; 0x290
    14dc:	2100      	movs	r1, #0
    14de:	f00e fef9 	bl	102d4 <z_impl_k_sleep>
		ReadSensorI2C(temp,ADDRESS_SDP31,9);
    14e2:	2209      	movs	r2, #9
    14e4:	2121      	movs	r1, #33	; 0x21
    14e6:	a801      	add	r0, sp, #4
    14e8:	f7ff ffbe 	bl	1468 <ReadSensorI2C>
	return z_impl_k_usleep(us);
    14ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    14f0:	f00e ff1c 	bl	1032c <z_impl_k_usleep>
        escalaBufferSDP = temp[6] << 8 | temp[7];
    14f4:	f89d 200a 	ldrb.w	r2, [sp, #10]
    14f8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    14fc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1500:	4a04      	ldr	r2, [pc, #16]	; (1514 <ConfigureSDP+0x5c>)
    1502:	6013      	str	r3, [r2, #0]
    1504:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1508:	f00e ff10 	bl	1032c <z_impl_k_usleep>
}
    150c:	b005      	add	sp, #20
    150e:	f85d fb04 	ldr.w	pc, [sp], #4
    1512:	bf00      	nop
    1514:	20000004 	.word	0x20000004

00001518 <ConfigureUSB>:
void ConfigureUSB(){
    1518:	b510      	push	{r4, lr}
    151a:	b082      	sub	sp, #8
	uart_dev = dev;
    151c:	482a      	ldr	r0, [pc, #168]	; (15c8 <ConfigureUSB+0xb0>)
    151e:	4b2b      	ldr	r3, [pc, #172]	; (15cc <ConfigureUSB+0xb4>)
    1520:	6018      	str	r0, [r3, #0]
	uint32_t baudrate, dtr = 0U;
    1522:	2300      	movs	r3, #0
    1524:	9300      	str	r3, [sp, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    1526:	f013 fe82 	bl	1522e <z_device_ready>
    152a:	b118      	cbz	r0, 1534 <ConfigureUSB+0x1c>
	ret = usb_enable(NULL);
    152c:	2000      	movs	r0, #0
    152e:	f002 fc9d 	bl	3e6c <usb_enable>
	if (ret != 0) {
    1532:	b108      	cbz	r0, 1538 <ConfigureUSB+0x20>
}
    1534:	b002      	add	sp, #8
    1536:	bd10      	pop	{r4, pc}
				 uint32_t size,
				 void *data)
{
	__ASSERT(size < RING_BUFFER_MAX_SIZE, RING_BUFFER_SIZE_ASSERT_MSG);

	memset(buf, 0, sizeof(struct ring_buf));
    1538:	4c25      	ldr	r4, [pc, #148]	; (15d0 <ConfigureUSB+0xb8>)
    153a:	221c      	movs	r2, #28
    153c:	2100      	movs	r1, #0
    153e:	4620      	mov	r0, r4
    1540:	f011 fae2 	bl	12b08 <memset>
	buf->size = size;
    1544:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1548:	6123      	str	r3, [r4, #16]
	buf->buf.buf32 = (uint32_t *)data;
    154a:	4b22      	ldr	r3, [pc, #136]	; (15d4 <ConfigureUSB+0xbc>)
    154c:	6163      	str	r3, [r4, #20]
	if (is_power_of_two(size)) {
		buf->mask = size - 1U;
    154e:	f240 33ff 	movw	r3, #1023	; 0x3ff
    1552:	61a3      	str	r3, [r4, #24]

static inline int z_impl_uart_line_ctrl_get(const struct device *dev,
					    uint32_t ctrl, uint32_t *val)
{
#ifdef CONFIG_UART_LINE_CTRL
	const struct uart_driver_api *api =
    1554:	4b1c      	ldr	r3, [pc, #112]	; (15c8 <ConfigureUSB+0xb0>)
    1556:	689b      	ldr	r3, [r3, #8]
		(const struct uart_driver_api *)dev->api;

	if (api->line_ctrl_get == NULL) {
    1558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    155a:	b11b      	cbz	r3, 1564 <ConfigureUSB+0x4c>
		return -ENOSYS;
	}
	return api->line_ctrl_get(dev, ctrl, val);
    155c:	466a      	mov	r2, sp
    155e:	2104      	movs	r1, #4
    1560:	4819      	ldr	r0, [pc, #100]	; (15c8 <ConfigureUSB+0xb0>)
    1562:	4798      	blx	r3
		if (dtr) {
    1564:	9b00      	ldr	r3, [sp, #0]
    1566:	b92b      	cbnz	r3, 1574 <ConfigureUSB+0x5c>
	return z_impl_k_sleep(timeout);
    1568:	f640 40cd 	movw	r0, #3277	; 0xccd
    156c:	2100      	movs	r1, #0
    156e:	f00e feb1 	bl	102d4 <z_impl_k_sleep>
		uart_line_ctrl_get(dev, UART_LINE_CTRL_DTR, &dtr);
    1572:	e7ef      	b.n	1554 <ConfigureUSB+0x3c>
	const struct uart_driver_api *api =
    1574:	4b14      	ldr	r3, [pc, #80]	; (15c8 <ConfigureUSB+0xb0>)
    1576:	689b      	ldr	r3, [r3, #8]
	if (api->line_ctrl_set == NULL) {
    1578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    157a:	b11b      	cbz	r3, 1584 <ConfigureUSB+0x6c>
	return api->line_ctrl_set(dev, ctrl, val);
    157c:	2201      	movs	r2, #1
    157e:	2108      	movs	r1, #8
    1580:	4811      	ldr	r0, [pc, #68]	; (15c8 <ConfigureUSB+0xb0>)
    1582:	4798      	blx	r3
	const struct uart_driver_api *api =
    1584:	4b10      	ldr	r3, [pc, #64]	; (15c8 <ConfigureUSB+0xb0>)
    1586:	689b      	ldr	r3, [r3, #8]
	if (api->line_ctrl_set == NULL) {
    1588:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    158a:	b11b      	cbz	r3, 1594 <ConfigureUSB+0x7c>
	return api->line_ctrl_set(dev, ctrl, val);
    158c:	2201      	movs	r2, #1
    158e:	2110      	movs	r1, #16
    1590:	480d      	ldr	r0, [pc, #52]	; (15c8 <ConfigureUSB+0xb0>)
    1592:	4798      	blx	r3
		arch_syscall_invoke1(*(uintptr_t *)&usec_to_wait, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
    1594:	4810      	ldr	r0, [pc, #64]	; (15d8 <ConfigureUSB+0xc0>)
    1596:	f014 fa87 	bl	15aa8 <z_impl_k_busy_wait>
	const struct uart_driver_api *api =
    159a:	4b0b      	ldr	r3, [pc, #44]	; (15c8 <ConfigureUSB+0xb0>)
    159c:	689b      	ldr	r3, [r3, #8]
	if (api->line_ctrl_get == NULL) {
    159e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    15a0:	b11b      	cbz	r3, 15aa <ConfigureUSB+0x92>
	return api->line_ctrl_get(dev, ctrl, val);
    15a2:	aa01      	add	r2, sp, #4
    15a4:	2101      	movs	r1, #1
    15a6:	4808      	ldr	r0, [pc, #32]	; (15c8 <ConfigureUSB+0xb0>)
    15a8:	4798      	blx	r3
	const struct uart_driver_api *api =
    15aa:	4b07      	ldr	r3, [pc, #28]	; (15c8 <ConfigureUSB+0xb0>)
    15ac:	689b      	ldr	r3, [r3, #8]
	if (api->irq_rx_enable != NULL) {
    15ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    15b0:	b10b      	cbz	r3, 15b6 <ConfigureUSB+0x9e>
		api->irq_rx_enable(dev);
    15b2:	4805      	ldr	r0, [pc, #20]	; (15c8 <ConfigureUSB+0xb0>)
    15b4:	4798      	blx	r3
	const struct uart_driver_api *api =
    15b6:	4b04      	ldr	r3, [pc, #16]	; (15c8 <ConfigureUSB+0xb0>)
    15b8:	689b      	ldr	r3, [r3, #8]
	if (api->irq_tx_enable != NULL) {
    15ba:	69db      	ldr	r3, [r3, #28]
    15bc:	2b00      	cmp	r3, #0
    15be:	d0b9      	beq.n	1534 <ConfigureUSB+0x1c>
		api->irq_tx_enable(dev);
    15c0:	4801      	ldr	r0, [pc, #4]	; (15c8 <ConfigureUSB+0xb0>)
    15c2:	4798      	blx	r3
    15c4:	e7b6      	b.n	1534 <ConfigureUSB+0x1c>
    15c6:	bf00      	nop
    15c8:	00015c68 	.word	0x00015c68
    15cc:	20000ec0 	.word	0x20000ec0
    15d0:	20000ea4 	.word	0x20000ea4
    15d4:	20000aa4 	.word	0x20000aa4
    15d8:	000f4240 	.word	0x000f4240

000015dc <SendMsg>:
void SendMsg(char*msg1,int len){
    15dc:	b510      	push	{r4, lr}
    15de:	b0a2      	sub	sp, #136	; 0x88
    15e0:	460c      	mov	r4, r1
	  EncapsulationMsgs(msg1,msg3,len);
    15e2:	460a      	mov	r2, r1
    15e4:	4669      	mov	r1, sp
    15e6:	f00f fb9b 	bl	10d20 <EncapsulationMsgs>
	  uart_fifo_fill(uart_dev, msg3, len + 4);
    15ea:	4b05      	ldr	r3, [pc, #20]	; (1600 <SendMsg+0x24>)
    15ec:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    15ee:	6883      	ldr	r3, [r0, #8]
	if (api->fifo_fill == NULL) {
    15f0:	695b      	ldr	r3, [r3, #20]
    15f2:	b113      	cbz	r3, 15fa <SendMsg+0x1e>
    15f4:	1d22      	adds	r2, r4, #4
	return api->fifo_fill(dev, tx_data, size);
    15f6:	4669      	mov	r1, sp
    15f8:	4798      	blx	r3
}
    15fa:	b022      	add	sp, #136	; 0x88
    15fc:	bd10      	pop	{r4, pc}
    15fe:	bf00      	nop
    1600:	20000ec0 	.word	0x20000ec0

00001604 <CMD1>:
void CMD1(char *data){
    1604:	b500      	push	{lr}
    1606:	b083      	sub	sp, #12
	char MSG[] = {ACK,data[1],data[2]};
    1608:	2306      	movs	r3, #6
    160a:	f88d 3004 	strb.w	r3, [sp, #4]
    160e:	7843      	ldrb	r3, [r0, #1]
    1610:	f88d 3005 	strb.w	r3, [sp, #5]
    1614:	7883      	ldrb	r3, [r0, #2]
    1616:	f88d 3006 	strb.w	r3, [sp, #6]
	SendMsg(MSG,3);
    161a:	2103      	movs	r1, #3
    161c:	a801      	add	r0, sp, #4
    161e:	f7ff ffdd 	bl	15dc <SendMsg>
    lenBufferACK = sizeof(MSG);
    1622:	2203      	movs	r2, #3
    1624:	4b04      	ldr	r3, [pc, #16]	; (1638 <CMD1+0x34>)
    1626:	701a      	strb	r2, [r3, #0]
	memcpy(bufferACK,MSG,sizeof(MSG));
    1628:	a901      	add	r1, sp, #4
    162a:	4804      	ldr	r0, [pc, #16]	; (163c <CMD1+0x38>)
    162c:	f011 fa48 	bl	12ac0 <memcpy>
}
    1630:	b003      	add	sp, #12
    1632:	f85d fb04 	ldr.w	pc, [sp], #4
    1636:	bf00      	nop
    1638:	20002f74 	.word	0x20002f74
    163c:	20000a20 	.word	0x20000a20

00001640 <CMD2>:
void CMD2(char *data){
    1640:	b500      	push	{lr}
    1642:	b083      	sub	sp, #12
	char MSG[] = {ACK,data[1],data[2]};
    1644:	2306      	movs	r3, #6
    1646:	f88d 3004 	strb.w	r3, [sp, #4]
    164a:	7843      	ldrb	r3, [r0, #1]
    164c:	f88d 3005 	strb.w	r3, [sp, #5]
    1650:	7883      	ldrb	r3, [r0, #2]
    1652:	f88d 3006 	strb.w	r3, [sp, #6]
	SendMsg(MSG,3);
    1656:	2103      	movs	r1, #3
    1658:	a801      	add	r0, sp, #4
    165a:	f7ff ffbf 	bl	15dc <SendMsg>
    lenBufferACK = sizeof(MSG);
    165e:	2203      	movs	r2, #3
    1660:	4b04      	ldr	r3, [pc, #16]	; (1674 <CMD2+0x34>)
    1662:	701a      	strb	r2, [r3, #0]
	memcpy(bufferACK,MSG,sizeof(MSG));
    1664:	a901      	add	r1, sp, #4
    1666:	4804      	ldr	r0, [pc, #16]	; (1678 <CMD2+0x38>)
    1668:	f011 fa2a 	bl	12ac0 <memcpy>
}
    166c:	b003      	add	sp, #12
    166e:	f85d fb04 	ldr.w	pc, [sp], #4
    1672:	bf00      	nop
    1674:	20002f74 	.word	0x20002f74
    1678:	20000a20 	.word	0x20000a20

0000167c <CMD5>:

void CMD5(char *data){
    167c:	b530      	push	{r4, r5, lr}
    167e:	b0a1      	sub	sp, #132	; 0x84
    1680:	4605      	mov	r5, r0
	char MSG[128] ={0};
    1682:	2400      	movs	r4, #0
    1684:	9400      	str	r4, [sp, #0]
    1686:	227c      	movs	r2, #124	; 0x7c
    1688:	4621      	mov	r1, r4
    168a:	a801      	add	r0, sp, #4
    168c:	f011 fa3c 	bl	12b08 <memset>
	MSG[0] = ACK;
    1690:	2306      	movs	r3, #6
    1692:	f88d 3000 	strb.w	r3, [sp]
	MSG[1] = data[1];
    1696:	786b      	ldrb	r3, [r5, #1]
    1698:	f88d 3001 	strb.w	r3, [sp, #1]
	int aux = 0;
	
	for(int i=0;i<43;i++){
    169c:	e013      	b.n	16c6 <CMD5+0x4a>
		MSG[i*3+2] = tabflow[i];
		if(i < 29){
			aux = (tabela_SDP[i]*1000)/1;
		}else{
			aux = (tabela_HSC[i]*1000)/1;
    169e:	491b      	ldr	r1, [pc, #108]	; (170c <CMD5+0x90>)
    16a0:	4b1b      	ldr	r3, [pc, #108]	; (1710 <CMD5+0x94>)
    16a2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    16a6:	f7ff f9d1 	bl	a4c <__aeabi_fmul>
    16aa:	f7ff fb1f 	bl	cec <__aeabi_f2iz>
		}
		MSG[i*3+3] = aux>>8;
    16ae:	1202      	asrs	r2, r0, #8
    16b0:	3401      	adds	r4, #1
    16b2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    16b6:	a920      	add	r1, sp, #128	; 0x80
    16b8:	440b      	add	r3, r1
    16ba:	f803 2c80 	strb.w	r2, [r3, #-128]
		MSG[i*3+4] = aux & 0x00FF;
    16be:	3504      	adds	r5, #4
    16c0:	440d      	add	r5, r1
    16c2:	f805 0c80 	strb.w	r0, [r5, #-128]
	for(int i=0;i<43;i++){
    16c6:	2c2a      	cmp	r4, #42	; 0x2a
    16c8:	dc13      	bgt.n	16f2 <CMD5+0x76>
		MSG[i*3+2] = tabflow[i];
    16ca:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    16ce:	1cab      	adds	r3, r5, #2
    16d0:	4a10      	ldr	r2, [pc, #64]	; (1714 <CMD5+0x98>)
    16d2:	5d12      	ldrb	r2, [r2, r4]
    16d4:	a920      	add	r1, sp, #128	; 0x80
    16d6:	440b      	add	r3, r1
    16d8:	f803 2c80 	strb.w	r2, [r3, #-128]
		if(i < 29){
    16dc:	2c1c      	cmp	r4, #28
    16de:	dcde      	bgt.n	169e <CMD5+0x22>
			aux = (tabela_SDP[i]*1000)/1;
    16e0:	490a      	ldr	r1, [pc, #40]	; (170c <CMD5+0x90>)
    16e2:	4b0d      	ldr	r3, [pc, #52]	; (1718 <CMD5+0x9c>)
    16e4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    16e8:	f7ff f9b0 	bl	a4c <__aeabi_fmul>
    16ec:	f7ff fafe 	bl	cec <__aeabi_f2iz>
    16f0:	e7dd      	b.n	16ae <CMD5+0x32>
	}

	SendMsg(MSG,128);
    16f2:	2180      	movs	r1, #128	; 0x80
    16f4:	4668      	mov	r0, sp
    16f6:	f7ff ff71 	bl	15dc <SendMsg>
    lenBufferACK = sizeof(MSG);
    16fa:	2280      	movs	r2, #128	; 0x80
    16fc:	4b07      	ldr	r3, [pc, #28]	; (171c <CMD5+0xa0>)
    16fe:	701a      	strb	r2, [r3, #0]
	memcpy(bufferACK,MSG,sizeof(MSG));
    1700:	4669      	mov	r1, sp
    1702:	4807      	ldr	r0, [pc, #28]	; (1720 <CMD5+0xa4>)
    1704:	f011 f9dc 	bl	12ac0 <memcpy>
    1708:	b021      	add	sp, #132	; 0x84
    170a:	bd30      	pop	{r4, r5, pc}
    170c:	447a0000 	.word	0x447a0000
    1710:	200014bc 	.word	0x200014bc
    1714:	20000008 	.word	0x20000008
    1718:	20001568 	.word	0x20001568
    171c:	20002f74 	.word	0x20002f74
    1720:	20000a20 	.word	0x20000a20

00001724 <ProceduresMsg>:
void ProceduresMsg(char *data) {
    1724:	b510      	push	{r4, lr}
    1726:	b082      	sub	sp, #8
	char NAKMSG[] = { 0x15, data[1], data[1] };
    1728:	2315      	movs	r3, #21
    172a:	f88d 3004 	strb.w	r3, [sp, #4]
    172e:	7843      	ldrb	r3, [r0, #1]
    1730:	f88d 3005 	strb.w	r3, [sp, #5]
    1734:	461a      	mov	r2, r3
    1736:	f88d 3006 	strb.w	r3, [sp, #6]
	switch (data[0]) {
    173a:	7803      	ldrb	r3, [r0, #0]
    173c:	2b20      	cmp	r3, #32
    173e:	d019      	beq.n	1774 <ProceduresMsg+0x50>
    1740:	d80a      	bhi.n	1758 <ProceduresMsg+0x34>
    1742:	2b06      	cmp	r3, #6
    1744:	d021      	beq.n	178a <ProceduresMsg+0x66>
    1746:	2b15      	cmp	r3, #21
    1748:	d124      	bne.n	1794 <ProceduresMsg+0x70>
		if (lenBufferACK != 0)
    174a:	4b16      	ldr	r3, [pc, #88]	; (17a4 <ProceduresMsg+0x80>)
    174c:	781b      	ldrb	r3, [r3, #0]
    174e:	b1fb      	cbz	r3, 1790 <ProceduresMsg+0x6c>
			ProceduresMsg(bufferACK);
    1750:	4815      	ldr	r0, [pc, #84]	; (17a8 <ProceduresMsg+0x84>)
    1752:	f7ff ffe7 	bl	1724 <ProceduresMsg>
    1756:	e01b      	b.n	1790 <ProceduresMsg+0x6c>
	switch (data[0]) {
    1758:	2b40      	cmp	r3, #64	; 0x40
    175a:	d11b      	bne.n	1794 <ProceduresMsg+0x70>
		if (lenBufferACK != 0)
    175c:	4b11      	ldr	r3, [pc, #68]	; (17a4 <ProceduresMsg+0x80>)
    175e:	7819      	ldrb	r1, [r3, #0]
    1760:	b1b1      	cbz	r1, 1790 <ProceduresMsg+0x6c>
			SendMsg(bufferACK,lenBufferACK);
    1762:	4811      	ldr	r0, [pc, #68]	; (17a8 <ProceduresMsg+0x84>)
    1764:	f7ff ff3a 	bl	15dc <SendMsg>
    1768:	e012      	b.n	1790 <ProceduresMsg+0x6c>
				FUNC[f](data);
    176a:	4b10      	ldr	r3, [pc, #64]	; (17ac <ProceduresMsg+0x88>)
    176c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    1770:	4798      	blx	r3
				break;
    1772:	e00d      	b.n	1790 <ProceduresMsg+0x6c>
	switch (data[0]) {
    1774:	2300      	movs	r3, #0
		for (uint8_t f = 0; f < 6; f++) {
    1776:	2b05      	cmp	r3, #5
    1778:	d80a      	bhi.n	1790 <ProceduresMsg+0x6c>
			if (data[1] == idCMD[f]) {
    177a:	461c      	mov	r4, r3
    177c:	490c      	ldr	r1, [pc, #48]	; (17b0 <ProceduresMsg+0x8c>)
    177e:	5cc9      	ldrb	r1, [r1, r3]
    1780:	428a      	cmp	r2, r1
    1782:	d0f2      	beq.n	176a <ProceduresMsg+0x46>
		for (uint8_t f = 0; f < 6; f++) {
    1784:	3301      	adds	r3, #1
    1786:	b2db      	uxtb	r3, r3
    1788:	e7f5      	b.n	1776 <ProceduresMsg+0x52>
		lenBufferACK = 0;
    178a:	4b06      	ldr	r3, [pc, #24]	; (17a4 <ProceduresMsg+0x80>)
    178c:	2200      	movs	r2, #0
    178e:	701a      	strb	r2, [r3, #0]
}
    1790:	b002      	add	sp, #8
    1792:	bd10      	pop	{r4, pc}
		SendMsg(NAKMSG, 3);
    1794:	2103      	movs	r1, #3
    1796:	a801      	add	r0, sp, #4
    1798:	f7ff ff20 	bl	15dc <SendMsg>
		lenBufferACK = 0;
    179c:	4b01      	ldr	r3, [pc, #4]	; (17a4 <ProceduresMsg+0x80>)
    179e:	2200      	movs	r2, #0
    17a0:	701a      	strb	r2, [r3, #0]
}
    17a2:	e7f5      	b.n	1790 <ProceduresMsg+0x6c>
    17a4:	20002f74 	.word	0x20002f74
    17a8:	20000a20 	.word	0x20000a20
    17ac:	00015ff8 	.word	0x00015ff8
    17b0:	00016010 	.word	0x00016010

000017b4 <ReadMsg>:
void ReadMsg(){
    17b4:	b530      	push	{r4, r5, lr}
    17b6:	b097      	sub	sp, #92	; 0x5c
	size_t len = MIN(ring_buf_space_get(&ringbuf),
    17b8:	482a      	ldr	r0, [pc, #168]	; (1864 <ReadMsg+0xb0>)
    17ba:	f010 f91a 	bl	119f2 <ring_buf_space_get>
    17be:	283f      	cmp	r0, #63	; 0x3f
    17c0:	d90e      	bls.n	17e0 <ReadMsg+0x2c>
    17c2:	2240      	movs	r2, #64	; 0x40
	rb_len = uart_fifo_read(uart_dev, buffer, len);
    17c4:	4b28      	ldr	r3, [pc, #160]	; (1868 <ReadMsg+0xb4>)
    17c6:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    17c8:	6883      	ldr	r3, [r0, #8]
	if (api->fifo_read == NULL) {
    17ca:	699b      	ldr	r3, [r3, #24]
    17cc:	b16b      	cbz	r3, 17ea <ReadMsg+0x36>
	return api->fifo_read(dev, rx_data, size);
    17ce:	a906      	add	r1, sp, #24
    17d0:	4798      	blx	r3
    17d2:	4604      	mov	r4, r0
	if(buffer[0]== 0x7E && buffer[rb_len-1] == 0xFF && rb_len >6){
    17d4:	f89d 3018 	ldrb.w	r3, [sp, #24]
    17d8:	2b7e      	cmp	r3, #126	; 0x7e
    17da:	d009      	beq.n	17f0 <ReadMsg+0x3c>
}
    17dc:	b017      	add	sp, #92	; 0x5c
    17de:	bd30      	pop	{r4, r5, pc}
	size_t len = MIN(ring_buf_space_get(&ringbuf),
    17e0:	4820      	ldr	r0, [pc, #128]	; (1864 <ReadMsg+0xb0>)
    17e2:	f010 f906 	bl	119f2 <ring_buf_space_get>
    17e6:	4602      	mov	r2, r0
    17e8:	e7ec      	b.n	17c4 <ReadMsg+0x10>
		return -ENOSYS;
    17ea:	f06f 0457 	mvn.w	r4, #87	; 0x57
    17ee:	e7f1      	b.n	17d4 <ReadMsg+0x20>
	if(buffer[0]== 0x7E && buffer[rb_len-1] == 0xFF && rb_len >6){
    17f0:	1e63      	subs	r3, r4, #1
    17f2:	aa16      	add	r2, sp, #88	; 0x58
    17f4:	4413      	add	r3, r2
    17f6:	f813 3c40 	ldrb.w	r3, [r3, #-64]
    17fa:	2bff      	cmp	r3, #255	; 0xff
    17fc:	d1ee      	bne.n	17dc <ReadMsg+0x28>
    17fe:	2c06      	cmp	r4, #6
    1800:	ddec      	ble.n	17dc <ReadMsg+0x28>
		memcpy(commandAPayload,&buffer[1],rb_len -4);
    1802:	1f25      	subs	r5, r4, #4
    1804:	462a      	mov	r2, r5
    1806:	f10d 0119 	add.w	r1, sp, #25
    180a:	a802      	add	r0, sp, #8
    180c:	f011 f958 	bl	12ac0 <memcpy>
		memcpy(crc,&buffer[rb_len-3],2);
    1810:	1ee1      	subs	r1, r4, #3
    1812:	2202      	movs	r2, #2
    1814:	ab06      	add	r3, sp, #24
    1816:	4419      	add	r1, r3
    1818:	a801      	add	r0, sp, #4
    181a:	f011 f951 	bl	12ac0 <memcpy>
		if( crc16calc(commandAPayload,rb_len -4 ) == (crc[0]<<8 | crc[1])){
    181e:	4629      	mov	r1, r5
    1820:	a802      	add	r0, sp, #8
    1822:	f00f fa5f 	bl	10ce4 <crc16calc>
    1826:	f89d 2004 	ldrb.w	r2, [sp, #4]
    182a:	f89d 3005 	ldrb.w	r3, [sp, #5]
    182e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1832:	4298      	cmp	r0, r3
    1834:	d011      	beq.n	185a <ReadMsg+0xa6>
			char NAKMSG[] = {NACK,commandAPayload[1],0x0A};
    1836:	2315      	movs	r3, #21
    1838:	f88d 3000 	strb.w	r3, [sp]
    183c:	f89d 3009 	ldrb.w	r3, [sp, #9]
    1840:	f88d 3001 	strb.w	r3, [sp, #1]
    1844:	230a      	movs	r3, #10
    1846:	f88d 3002 	strb.w	r3, [sp, #2]
			SendMsg(NAKMSG,3);
    184a:	2103      	movs	r1, #3
    184c:	4668      	mov	r0, sp
    184e:	f7ff fec5 	bl	15dc <SendMsg>
			lenBufferACK = 0;
    1852:	4b06      	ldr	r3, [pc, #24]	; (186c <ReadMsg+0xb8>)
    1854:	2200      	movs	r2, #0
    1856:	701a      	strb	r2, [r3, #0]
}
    1858:	e7c0      	b.n	17dc <ReadMsg+0x28>
			ProceduresMsg(commandAPayload);
    185a:	a802      	add	r0, sp, #8
    185c:	f7ff ff62 	bl	1724 <ProceduresMsg>
    1860:	e7bc      	b.n	17dc <ReadMsg+0x28>
    1862:	bf00      	nop
    1864:	20000ea4 	.word	0x20000ea4
    1868:	20000ec0 	.word	0x20000ec0
    186c:	20002f74 	.word	0x20002f74

00001870 <ConfigureLFS>:
float tabela_SDP[43]={0}; 
float tabela_FIO2[2]={0};
float offset_LPS[1] = {0};

void ConfigureLFS(void)
{
    1870:	b570      	push	{r4, r5, r6, lr}
    1872:	b086      	sub	sp, #24
		&FS_FSTAB_ENTRY(PARTITION_NODE)
#else
		&lfs_storage_mnt
#endif
		;
	unsigned int id = (uintptr_t)mp->storage_dev;
    1874:	4c2b      	ldr	r4, [pc, #172]	; (1924 <ConfigureLFS+0xb4>)
    1876:	6965      	ldr	r5, [r4, #20]

	struct fs_statvfs sbuf;
	const struct flash_area *pfa;
	int rc;

	snprintf(fnameLPS, sizeof(fnameLPS), "%s/offsetLPS", mp->mnt_point);
    1878:	68e3      	ldr	r3, [r4, #12]
    187a:	4a2b      	ldr	r2, [pc, #172]	; (1928 <ConfigureLFS+0xb8>)
    187c:	21ff      	movs	r1, #255	; 0xff
    187e:	482b      	ldr	r0, [pc, #172]	; (192c <ConfigureLFS+0xbc>)
    1880:	f004 faf2 	bl	5e68 <snprintf>
	snprintf(fnameHSC, sizeof(fnameHSC), "%s/tableHSC", mp->mnt_point);
    1884:	68e3      	ldr	r3, [r4, #12]
    1886:	4a2a      	ldr	r2, [pc, #168]	; (1930 <ConfigureLFS+0xc0>)
    1888:	21ff      	movs	r1, #255	; 0xff
    188a:	482a      	ldr	r0, [pc, #168]	; (1934 <ConfigureLFS+0xc4>)
    188c:	f004 faec 	bl	5e68 <snprintf>
	snprintf(fnameSDP, sizeof(fnameSDP), "%s/tableSDP", mp->mnt_point);
    1890:	68e3      	ldr	r3, [r4, #12]
    1892:	4a29      	ldr	r2, [pc, #164]	; (1938 <ConfigureLFS+0xc8>)
    1894:	21ff      	movs	r1, #255	; 0xff
    1896:	4829      	ldr	r0, [pc, #164]	; (193c <ConfigureLFS+0xcc>)
    1898:	f004 fae6 	bl	5e68 <snprintf>
	snprintf(fnameFIO2, sizeof(fnameFIO2), "%s/tableFIO2", mp->mnt_point);
    189c:	68e3      	ldr	r3, [r4, #12]
    189e:	4a28      	ldr	r2, [pc, #160]	; (1940 <ConfigureLFS+0xd0>)
    18a0:	21ff      	movs	r1, #255	; 0xff
    18a2:	4828      	ldr	r0, [pc, #160]	; (1944 <ConfigureLFS+0xd4>)
    18a4:	f004 fae0 	bl	5e68 <snprintf>

	rc = flash_area_open(id, &pfa);
    18a8:	a901      	add	r1, sp, #4
    18aa:	b2e8      	uxtb	r0, r5
    18ac:	f003 fa2e 	bl	4d0c <flash_area_open>
	if (rc < 0)return;
    18b0:	2800      	cmp	r0, #0
    18b2:	db34      	blt.n	191e <ConfigureLFS+0xae>
	/* Optional wipe flash contents */
	if (IS_ENABLED(CONFIG_APP_WIPE_STORAGE)) {
		rc = flash_area_erase(pfa, 0, pfa->fa_size);
	}

	flash_area_close(pfa);
    18b4:	9801      	ldr	r0, [sp, #4]
    18b6:	f010 ff7b 	bl	127b0 <flash_area_close>

	/* Do not mount if auto-mount has been enabled */
#if !DT_NODE_EXISTS(PARTITION_NODE) ||						\
	!(FSTAB_ENTRY_DT_MOUNT_FLAGS(PARTITION_NODE) & FS_MOUNT_FLAG_AUTOMOUNT)
	rc = fs_mount(mp);
    18ba:	4620      	mov	r0, r4
    18bc:	f004 fd90 	bl	63e0 <fs_mount>
	if (rc < 0) {
    18c0:	2800      	cmp	r0, #0
    18c2:	db2c      	blt.n	191e <ConfigureLFS+0xae>
	// printk("%s mount: %d\n", mp->mnt_point, rc);
#else
	// printk("%s automounted\n", mp->mnt_point);
#endif

	rc = fs_statvfs(mp->mnt_point, &sbuf);
    18c4:	a902      	add	r1, sp, #8
    18c6:	68e0      	ldr	r0, [r4, #12]
    18c8:	f004 fd2a 	bl	6320 <fs_statvfs>
	fREF = mp;
    18cc:	4b1e      	ldr	r3, [pc, #120]	; (1948 <ConfigureLFS+0xd8>)
    18ce:	601c      	str	r4, [r3, #0]
 * @param zfp Pointer to file object
 *
 */
static inline void fs_file_t_init(struct fs_file_t *zfp)
{
	*zfp = (struct fs_file_t){ 0 };
    18d0:	4b1e      	ldr	r3, [pc, #120]	; (194c <ConfigureLFS+0xdc>)
    18d2:	2400      	movs	r4, #0
    18d4:	601c      	str	r4, [r3, #0]
    18d6:	605c      	str	r4, [r3, #4]
    18d8:	609c      	str	r4, [r3, #8]

	fs_file_t_init(&fLPS);

	flagfiles[0] = fs_stat(fnameLPS, &dirent);
    18da:	4e1d      	ldr	r6, [pc, #116]	; (1950 <ConfigureLFS+0xe0>)
    18dc:	4631      	mov	r1, r6
    18de:	4813      	ldr	r0, [pc, #76]	; (192c <ConfigureLFS+0xbc>)
    18e0:	f004 fcb6 	bl	6250 <fs_stat>
    18e4:	4d1b      	ldr	r5, [pc, #108]	; (1954 <ConfigureLFS+0xe4>)
    18e6:	6028      	str	r0, [r5, #0]
    18e8:	4b1b      	ldr	r3, [pc, #108]	; (1958 <ConfigureLFS+0xe8>)
    18ea:	601c      	str	r4, [r3, #0]
    18ec:	605c      	str	r4, [r3, #4]
    18ee:	609c      	str	r4, [r3, #8]

	fs_file_t_init(&fHSC);

	flagfiles[1] = fs_stat(fnameHSC, &dirent);
    18f0:	4631      	mov	r1, r6
    18f2:	4810      	ldr	r0, [pc, #64]	; (1934 <ConfigureLFS+0xc4>)
    18f4:	f004 fcac 	bl	6250 <fs_stat>
    18f8:	6068      	str	r0, [r5, #4]
    18fa:	4b18      	ldr	r3, [pc, #96]	; (195c <ConfigureLFS+0xec>)
    18fc:	601c      	str	r4, [r3, #0]
    18fe:	605c      	str	r4, [r3, #4]
    1900:	609c      	str	r4, [r3, #8]
	
	fs_file_t_init(&fSDP);

	flagfiles[2] = fs_stat(fnameSDP, &dirent);
    1902:	4631      	mov	r1, r6
    1904:	480d      	ldr	r0, [pc, #52]	; (193c <ConfigureLFS+0xcc>)
    1906:	f004 fca3 	bl	6250 <fs_stat>
    190a:	60a8      	str	r0, [r5, #8]
    190c:	4b14      	ldr	r3, [pc, #80]	; (1960 <ConfigureLFS+0xf0>)
    190e:	601c      	str	r4, [r3, #0]
    1910:	605c      	str	r4, [r3, #4]
    1912:	609c      	str	r4, [r3, #8]
	
	
	fs_file_t_init(&fFIO2);

	flagfiles[3] = fs_stat(fnameFIO2, &dirent);
    1914:	4631      	mov	r1, r6
    1916:	480b      	ldr	r0, [pc, #44]	; (1944 <ConfigureLFS+0xd4>)
    1918:	f004 fc9a 	bl	6250 <fs_stat>
    191c:	60e8      	str	r0, [r5, #12]

}
    191e:	b006      	add	sp, #24
    1920:	bd70      	pop	{r4, r5, r6, pc}
    1922:	bf00      	nop
    1924:	20000034 	.word	0x20000034
    1928:	00016018 	.word	0x00016018
    192c:	20001210 	.word	0x20001210
    1930:	00016028 	.word	0x00016028
    1934:	20001110 	.word	0x20001110
    1938:	00016034 	.word	0x00016034
    193c:	20001310 	.word	0x20001310
    1940:	00016040 	.word	0x00016040
    1944:	20001010 	.word	0x20001010
    1948:	20000ff0 	.word	0x20000ff0
    194c:	20000fe4 	.word	0x20000fe4
    1950:	20000ec4 	.word	0x20000ec4
    1954:	20001000 	.word	0x20001000
    1958:	20000fd8 	.word	0x20000fd8
    195c:	20000ff4 	.word	0x20000ff4
    1960:	20000fcc 	.word	0x20000fcc

00001964 <Savedata>:

void Savedata(int tipo){
    1964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *fname;
	int len = 0;
	float *data;
	int rc;
	
	switch(tipo){
    1966:	2803      	cmp	r0, #3
    1968:	d82d      	bhi.n	19c6 <Savedata+0x62>
    196a:	e8df f000 	tbb	[pc, r0]
    196e:	1602      	.short	0x1602
    1970:	110c      	.short	0x110c
			fname = fnameHSC;
			len = 43;
			data = tabela_HSC;
			break;
		case 2:
			file = &fSDP;
    1972:	4f15      	ldr	r7, [pc, #84]	; (19c8 <Savedata+0x64>)
    1974:	2601      	movs	r6, #1
    1976:	4915      	ldr	r1, [pc, #84]	; (19cc <Savedata+0x68>)
    1978:	4d15      	ldr	r5, [pc, #84]	; (19d0 <Savedata+0x6c>)
			data = tabela_FIO2;
			break;
		default:
			return;
	}
	rc = fs_open(file, fname, FS_O_CREATE | FS_O_RDWR);
    197a:	2213      	movs	r2, #19
    197c:	4628      	mov	r0, r5
    197e:	f004 fb3f 	bl	6000 <fs_open>
	for(int i=0;i<len;i++){
    1982:	2400      	movs	r4, #0
    1984:	e015      	b.n	19b2 <Savedata+0x4e>
			data = tabela_SDP;
    1986:	4f13      	ldr	r7, [pc, #76]	; (19d4 <Savedata+0x70>)
			len = 43;
    1988:	262b      	movs	r6, #43	; 0x2b
			fname = fnameSDP;
    198a:	4913      	ldr	r1, [pc, #76]	; (19d8 <Savedata+0x74>)
			file = &fSDP;
    198c:	4d13      	ldr	r5, [pc, #76]	; (19dc <Savedata+0x78>)
			break;
    198e:	e7f4      	b.n	197a <Savedata+0x16>
			data = tabela_FIO2;
    1990:	4f13      	ldr	r7, [pc, #76]	; (19e0 <Savedata+0x7c>)
			len = 2;
    1992:	2602      	movs	r6, #2
			fname = fnameFIO2;
    1994:	4913      	ldr	r1, [pc, #76]	; (19e4 <Savedata+0x80>)
			file = &fFIO2;
    1996:	4d14      	ldr	r5, [pc, #80]	; (19e8 <Savedata+0x84>)
			break;
    1998:	e7ef      	b.n	197a <Savedata+0x16>
			data = tabela_HSC;
    199a:	4f14      	ldr	r7, [pc, #80]	; (19ec <Savedata+0x88>)
			len = 43;
    199c:	262b      	movs	r6, #43	; 0x2b
			fname = fnameHSC;
    199e:	4914      	ldr	r1, [pc, #80]	; (19f0 <Savedata+0x8c>)
			file = &fHSC;
    19a0:	4d14      	ldr	r5, [pc, #80]	; (19f4 <Savedata+0x90>)
    19a2:	e7ea      	b.n	197a <Savedata+0x16>
			rc = fs_write(file, &data[i], sizeof(float));
    19a4:	2204      	movs	r2, #4
    19a6:	eb07 0184 	add.w	r1, r7, r4, lsl #2
    19aa:	4628      	mov	r0, r5
    19ac:	f004 fbfc 	bl	61a8 <fs_write>
	for(int i=0;i<len;i++){
    19b0:	3401      	adds	r4, #1
    19b2:	42a6      	cmp	r6, r4
    19b4:	dcf6      	bgt.n	19a4 <Savedata+0x40>
		}
	rc = fs_seek(file, 0, FS_SEEK_SET);
    19b6:	2200      	movs	r2, #0
    19b8:	4611      	mov	r1, r2
    19ba:	4628      	mov	r0, r5
    19bc:	f004 fc1e 	bl	61fc <fs_seek>
	rc = fs_close(file);
    19c0:	4628      	mov	r0, r5
    19c2:	f004 fb9b 	bl	60fc <fs_close>


}	
    19c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    19c8:	20001410 	.word	0x20001410
    19cc:	20001210 	.word	0x20001210
    19d0:	20000fe4 	.word	0x20000fe4
    19d4:	20001568 	.word	0x20001568
    19d8:	20001310 	.word	0x20001310
    19dc:	20000ff4 	.word	0x20000ff4
    19e0:	200014b4 	.word	0x200014b4
    19e4:	20001010 	.word	0x20001010
    19e8:	20000fcc 	.word	0x20000fcc
    19ec:	200014bc 	.word	0x200014bc
    19f0:	20001110 	.word	0x20001110
    19f4:	20000fd8 	.word	0x20000fd8

000019f8 <Readdata>:

void Readdata(int tipo){
    19f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct fs_file_t *file;
	char *fname;
	int len = 0;
	float *data;
	int rc;
	switch(tipo){
    19fa:	2803      	cmp	r0, #3
    19fc:	d831      	bhi.n	1a62 <Readdata+0x6a>
    19fe:	e8df f000 	tbb	[pc, r0]
    1a02:	1802      	.short	0x1802
    1a04:	130e      	.short	0x130e
			fname = fnameHSC;
			len = 43;
			data = tabela_HSC;
			break;
		case 2:
			file = &fSDP;
    1a06:	4f1c      	ldr	r7, [pc, #112]	; (1a78 <Readdata+0x80>)
    1a08:	2601      	movs	r6, #1
    1a0a:	491c      	ldr	r1, [pc, #112]	; (1a7c <Readdata+0x84>)
    1a0c:	4d1c      	ldr	r5, [pc, #112]	; (1a80 <Readdata+0x88>)
			break;
		default:
			return;
	}

	rc = fs_open(file, fname, FS_O_CREATE | FS_O_RDWR);
    1a0e:	2213      	movs	r2, #19
    1a10:	4628      	mov	r0, r5
    1a12:	f004 faf5 	bl	6000 <fs_open>

	if (rc >= 0) {
    1a16:	2800      	cmp	r0, #0
    1a18:	db10      	blt.n	1a3c <Readdata+0x44>
		for(int i=0;i<len;i++){
    1a1a:	2400      	movs	r4, #0
    1a1c:	e017      	b.n	1a4e <Readdata+0x56>
			data = tabela_SDP;
    1a1e:	4f19      	ldr	r7, [pc, #100]	; (1a84 <Readdata+0x8c>)
			len = 43;
    1a20:	262b      	movs	r6, #43	; 0x2b
			fname = fnameSDP;
    1a22:	4919      	ldr	r1, [pc, #100]	; (1a88 <Readdata+0x90>)
			file = &fSDP;
    1a24:	4d19      	ldr	r5, [pc, #100]	; (1a8c <Readdata+0x94>)
			break;
    1a26:	e7f2      	b.n	1a0e <Readdata+0x16>
			data = tabela_FIO2;
    1a28:	4f19      	ldr	r7, [pc, #100]	; (1a90 <Readdata+0x98>)
			len = 2;
    1a2a:	2602      	movs	r6, #2
			fname = fnameFIO2;
    1a2c:	4919      	ldr	r1, [pc, #100]	; (1a94 <Readdata+0x9c>)
			file = &fFIO2;
    1a2e:	4d1a      	ldr	r5, [pc, #104]	; (1a98 <Readdata+0xa0>)
			break;
    1a30:	e7ed      	b.n	1a0e <Readdata+0x16>
			data = tabela_HSC;
    1a32:	4f1a      	ldr	r7, [pc, #104]	; (1a9c <Readdata+0xa4>)
			len = 43;
    1a34:	262b      	movs	r6, #43	; 0x2b
			fname = fnameHSC;
    1a36:	491a      	ldr	r1, [pc, #104]	; (1aa0 <Readdata+0xa8>)
			file = &fHSC;
    1a38:	4d1a      	ldr	r5, [pc, #104]	; (1aa4 <Readdata+0xac>)
    1a3a:	e7e8      	b.n	1a0e <Readdata+0x16>
			rc = fs_read(file, &data[i], sizeof(float));
		}
	}else{
		for(int i=0;i<len;i++){
    1a3c:	2400      	movs	r4, #0
    1a3e:	e018      	b.n	1a72 <Readdata+0x7a>
			rc = fs_read(file, &data[i], sizeof(float));
    1a40:	2204      	movs	r2, #4
    1a42:	eb07 0184 	add.w	r1, r7, r4, lsl #2
    1a46:	4628      	mov	r0, r5
    1a48:	f004 fb84 	bl	6154 <fs_read>
		for(int i=0;i<len;i++){
    1a4c:	3401      	adds	r4, #1
    1a4e:	42a6      	cmp	r6, r4
    1a50:	dcf6      	bgt.n	1a40 <Readdata+0x48>
			rc = fs_write(file, &data[i], sizeof(float));
		}
	}
	
	rc = fs_seek(file, 0, FS_SEEK_SET);
    1a52:	2200      	movs	r2, #0
    1a54:	4611      	mov	r1, r2
    1a56:	4628      	mov	r0, r5
    1a58:	f004 fbd0 	bl	61fc <fs_seek>
	rc = fs_close(file);
    1a5c:	4628      	mov	r0, r5
    1a5e:	f004 fb4d 	bl	60fc <fs_close>

}
    1a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			rc = fs_write(file, &data[i], sizeof(float));
    1a64:	2204      	movs	r2, #4
    1a66:	eb07 0184 	add.w	r1, r7, r4, lsl #2
    1a6a:	4628      	mov	r0, r5
    1a6c:	f004 fb9c 	bl	61a8 <fs_write>
		for(int i=0;i<len;i++){
    1a70:	3401      	adds	r4, #1
    1a72:	42a6      	cmp	r6, r4
    1a74:	dcf6      	bgt.n	1a64 <Readdata+0x6c>
    1a76:	e7ec      	b.n	1a52 <Readdata+0x5a>
    1a78:	20001410 	.word	0x20001410
    1a7c:	20001210 	.word	0x20001210
    1a80:	20000fe4 	.word	0x20000fe4
    1a84:	20001568 	.word	0x20001568
    1a88:	20001310 	.word	0x20001310
    1a8c:	20000ff4 	.word	0x20000ff4
    1a90:	200014b4 	.word	0x200014b4
    1a94:	20001010 	.word	0x20001010
    1a98:	20000fcc 	.word	0x20000fcc
    1a9c:	200014bc 	.word	0x200014bc
    1aa0:	20001110 	.word	0x20001110
    1aa4:	20000fd8 	.word	0x20000fd8

00001aa8 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    1aa8:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
    1aaa:	680b      	ldr	r3, [r1, #0]
    1aac:	3301      	adds	r3, #1
    1aae:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    1ab0:	4b01      	ldr	r3, [pc, #4]	; (1ab8 <char_out+0x10>)
    1ab2:	681b      	ldr	r3, [r3, #0]
    1ab4:	4798      	blx	r3
}
    1ab6:	bd08      	pop	{r3, pc}
    1ab8:	20000158 	.word	0x20000158

00001abc <__printk_hook_install>:
	_char_out = fn;
    1abc:	4b01      	ldr	r3, [pc, #4]	; (1ac4 <__printk_hook_install+0x8>)
    1abe:	6018      	str	r0, [r3, #0]
}
    1ac0:	4770      	bx	lr
    1ac2:	bf00      	nop
    1ac4:	20000158 	.word	0x20000158

00001ac8 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    1ac8:	b500      	push	{lr}
    1aca:	b083      	sub	sp, #12
    1acc:	4602      	mov	r2, r0
    1ace:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    1ad0:	2100      	movs	r1, #0
    1ad2:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    1ad4:	a901      	add	r1, sp, #4
    1ad6:	4803      	ldr	r0, [pc, #12]	; (1ae4 <vprintk+0x1c>)
    1ad8:	f000 f8c8 	bl	1c6c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    1adc:	b003      	add	sp, #12
    1ade:	f85d fb04 	ldr.w	pc, [sp], #4
    1ae2:	bf00      	nop
    1ae4:	00001aa9 	.word	0x00001aa9

00001ae8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    1ae8:	b510      	push	{r4, lr}
    1aea:	b084      	sub	sp, #16
    1aec:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    1aee:	9001      	str	r0, [sp, #4]
    1af0:	9102      	str	r1, [sp, #8]
    1af2:	2100      	movs	r1, #0
    1af4:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
    1af6:	a901      	add	r1, sp, #4
    1af8:	4805      	ldr	r0, [pc, #20]	; (1b10 <vsnprintk+0x28>)
    1afa:	f000 f8b7 	bl	1c6c <cbvprintf>

	if (ctx.count < ctx.max) {
    1afe:	9b03      	ldr	r3, [sp, #12]
    1b00:	9a02      	ldr	r2, [sp, #8]
    1b02:	4293      	cmp	r3, r2
    1b04:	da01      	bge.n	1b0a <vsnprintk+0x22>
		str[ctx.count] = '\0';
    1b06:	2200      	movs	r2, #0
    1b08:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    1b0a:	9803      	ldr	r0, [sp, #12]
    1b0c:	b004      	add	sp, #16
    1b0e:	bd10      	pop	{r4, pc}
    1b10:	00010d9d 	.word	0x00010d9d

00001b14 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1b14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1b18:	b083      	sub	sp, #12
    1b1a:	4604      	mov	r4, r0
    1b1c:	4608      	mov	r0, r1
    1b1e:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1b20:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1b22:	f013 0f08 	tst.w	r3, #8
    1b26:	d105      	bne.n	1b34 <process_event+0x20>
    1b28:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    1b2c:	2300      	movs	r3, #0
    1b2e:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    1b30:	9301      	str	r3, [sp, #4]
}
    1b32:	e069      	b.n	1c08 <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
    1b34:	2901      	cmp	r1, #1
    1b36:	d009      	beq.n	1b4c <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    1b38:	f043 0320 	orr.w	r3, r3, #32
    1b3c:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1b3e:	f385 8811 	msr	BASEPRI, r5
    1b42:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    1b46:	b003      	add	sp, #12
    1b48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1b4c:	f043 0310 	orr.w	r3, r3, #16
    1b50:	8323      	strh	r3, [r4, #24]
    1b52:	e7f4      	b.n	1b3e <process_event+0x2a>
			evt = process_recheck(mgr);
    1b54:	4620      	mov	r0, r4
    1b56:	f00f f97c 	bl	10e52 <process_recheck>
    1b5a:	e057      	b.n	1c0c <process_event+0xf8>
			res = mgr->last_res;
    1b5c:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
    1b60:	464a      	mov	r2, r9
    1b62:	4669      	mov	r1, sp
    1b64:	4620      	mov	r0, r4
    1b66:	f00f f98d 	bl	10e84 <process_complete>
		onoff_transition_fn transit = NULL;
    1b6a:	2700      	movs	r7, #0
    1b6c:	e05a      	b.n	1c24 <process_event+0x110>
			transit = mgr->transitions->start;
    1b6e:	6923      	ldr	r3, [r4, #16]
    1b70:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
    1b72:	2106      	movs	r1, #6
    1b74:	4620      	mov	r0, r4
    1b76:	f00f f945 	bl	10e04 <set_state>
		res = 0;
    1b7a:	f04f 0900 	mov.w	r9, #0
    1b7e:	e051      	b.n	1c24 <process_event+0x110>
			transit = mgr->transitions->stop;
    1b80:	6923      	ldr	r3, [r4, #16]
    1b82:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
    1b84:	2104      	movs	r1, #4
    1b86:	4620      	mov	r0, r4
    1b88:	f00f f93c 	bl	10e04 <set_state>
		res = 0;
    1b8c:	f04f 0900 	mov.w	r9, #0
    1b90:	e048      	b.n	1c24 <process_event+0x110>
			transit = mgr->transitions->reset;
    1b92:	6923      	ldr	r3, [r4, #16]
    1b94:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
    1b96:	2105      	movs	r1, #5
    1b98:	4620      	mov	r0, r4
    1b9a:	f00f f933 	bl	10e04 <set_state>
		res = 0;
    1b9e:	f04f 0900 	mov.w	r9, #0
    1ba2:	e03f      	b.n	1c24 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
    1ba4:	2200      	movs	r2, #0
    1ba6:	e046      	b.n	1c36 <process_event+0x122>
    1ba8:	2200      	movs	r2, #0
    1baa:	e044      	b.n	1c36 <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1bac:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    1bb0:	8323      	strh	r3, [r4, #24]
    1bb2:	f385 8811 	msr	BASEPRI, r5
    1bb6:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    1bba:	2900      	cmp	r1, #0
    1bbc:	d144      	bne.n	1c48 <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1bbe:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    1bc0:	b12b      	cbz	r3, 1bce <process_event+0xba>
				notify_all(mgr, &clients, state, res);
    1bc2:	464b      	mov	r3, r9
    1bc4:	4642      	mov	r2, r8
    1bc6:	4669      	mov	r1, sp
    1bc8:	4620      	mov	r0, r4
    1bca:	f00f f9d1 	bl	10f70 <notify_all>
			if (transit != NULL) {
    1bce:	b117      	cbz	r7, 1bd6 <process_event+0xc2>
				transit(mgr, transition_complete);
    1bd0:	4925      	ldr	r1, [pc, #148]	; (1c68 <process_event+0x154>)
    1bd2:	4620      	mov	r0, r4
    1bd4:	47b8      	blx	r7
	__asm__ volatile(
    1bd6:	f04f 0320 	mov.w	r3, #32
    1bda:	f3ef 8511 	mrs	r5, BASEPRI
    1bde:	f383 8812 	msr	BASEPRI_MAX, r3
    1be2:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1be6:	8b23      	ldrh	r3, [r4, #24]
    1be8:	f023 0308 	bic.w	r3, r3, #8
    1bec:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1bee:	8b23      	ldrh	r3, [r4, #24]
    1bf0:	f013 0f10 	tst.w	r3, #16
    1bf4:	d02e      	beq.n	1c54 <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1bf6:	f023 0310 	bic.w	r3, r3, #16
    1bfa:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    1bfc:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    1bfe:	8b26      	ldrh	r6, [r4, #24]
    1c00:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
    1c04:	2800      	cmp	r0, #0
    1c06:	d09a      	beq.n	1b3e <process_event+0x2a>
		if (evt == EVT_RECHECK) {
    1c08:	2802      	cmp	r0, #2
    1c0a:	d0a3      	beq.n	1b54 <process_event+0x40>
		if (evt == EVT_NOP) {
    1c0c:	2800      	cmp	r0, #0
    1c0e:	d096      	beq.n	1b3e <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
    1c10:	2801      	cmp	r0, #1
    1c12:	d0a3      	beq.n	1b5c <process_event+0x48>
		} else if (evt == EVT_START) {
    1c14:	2803      	cmp	r0, #3
    1c16:	d0aa      	beq.n	1b6e <process_event+0x5a>
		} else if (evt == EVT_STOP) {
    1c18:	2804      	cmp	r0, #4
    1c1a:	d0b1      	beq.n	1b80 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
    1c1c:	2805      	cmp	r0, #5
    1c1e:	d0b8      	beq.n	1b92 <process_event+0x7e>
		onoff_transition_fn transit = NULL;
    1c20:	2700      	movs	r7, #0
		res = 0;
    1c22:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1c24:	8b23      	ldrh	r3, [r4, #24]
    1c26:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1c2a:	45b0      	cmp	r8, r6
    1c2c:	d0ba      	beq.n	1ba4 <process_event+0x90>
    1c2e:	68a2      	ldr	r2, [r4, #8]
    1c30:	2a00      	cmp	r2, #0
    1c32:	d0b9      	beq.n	1ba8 <process_event+0x94>
    1c34:	2201      	movs	r2, #1
		if (do_monitors
    1c36:	4611      	mov	r1, r2
    1c38:	2a00      	cmp	r2, #0
    1c3a:	d1b7      	bne.n	1bac <process_event+0x98>
    1c3c:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    1c3e:	2a00      	cmp	r2, #0
    1c40:	d1b4      	bne.n	1bac <process_event+0x98>
		    || (transit != NULL)) {
    1c42:	2f00      	cmp	r7, #0
    1c44:	d1b2      	bne.n	1bac <process_event+0x98>
    1c46:	e7d2      	b.n	1bee <process_event+0xda>
				notify_monitors(mgr, state, res);
    1c48:	464a      	mov	r2, r9
    1c4a:	4641      	mov	r1, r8
    1c4c:	4620      	mov	r0, r4
    1c4e:	f00f f8e1 	bl	10e14 <notify_monitors>
    1c52:	e7b4      	b.n	1bbe <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1c54:	f013 0f20 	tst.w	r3, #32
    1c58:	d004      	beq.n	1c64 <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1c5a:	f023 0320 	bic.w	r3, r3, #32
    1c5e:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
    1c60:	2002      	movs	r0, #2
    1c62:	e7cc      	b.n	1bfe <process_event+0xea>
		evt = EVT_NOP;
    1c64:	2000      	movs	r0, #0
    1c66:	e7ca      	b.n	1bfe <process_event+0xea>
    1c68:	00010f9f 	.word	0x00010f9f

00001c6c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    1c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c70:	b093      	sub	sp, #76	; 0x4c
    1c72:	4606      	mov	r6, r0
    1c74:	460d      	mov	r5, r1
    1c76:	4692      	mov	sl, r2
    1c78:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1c7a:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1c7c:	f89a 0000 	ldrb.w	r0, [sl]
    1c80:	2800      	cmp	r0, #0
    1c82:	f000 84d6 	beq.w	2632 <cbvprintf+0x9c6>
		if (*fp != '%') {
    1c86:	2825      	cmp	r0, #37	; 0x25
    1c88:	d008      	beq.n	1c9c <cbvprintf+0x30>
			OUTC(*fp++);
    1c8a:	f10a 0a01 	add.w	sl, sl, #1
    1c8e:	4629      	mov	r1, r5
    1c90:	47b0      	blx	r6
    1c92:	2800      	cmp	r0, #0
    1c94:	f2c0 84ce 	blt.w	2634 <cbvprintf+0x9c8>
    1c98:	3401      	adds	r4, #1
			continue;
    1c9a:	e7ef      	b.n	1c7c <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    1c9c:	2300      	movs	r3, #0
    1c9e:	9306      	str	r3, [sp, #24]
    1ca0:	9307      	str	r3, [sp, #28]
    1ca2:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
    1ca4:	9308      	str	r3, [sp, #32]
    1ca6:	9309      	str	r3, [sp, #36]	; 0x24
    1ca8:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
    1caa:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
    1cae:	f89a 3001 	ldrb.w	r3, [sl, #1]
    1cb2:	2b25      	cmp	r3, #37	; 0x25
    1cb4:	d001      	beq.n	1cba <cbvprintf+0x4e>
	bool loop = true;
    1cb6:	2701      	movs	r7, #1
    1cb8:	e02c      	b.n	1d14 <cbvprintf+0xa8>
		conv->specifier = *sp++;
    1cba:	f10a 0802 	add.w	r8, sl, #2
    1cbe:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
    1cc2:	e1a8      	b.n	2016 <cbvprintf+0x3aa>
			conv->flag_dash = true;
    1cc4:	f89d 3020 	ldrb.w	r3, [sp, #32]
    1cc8:	f043 0304 	orr.w	r3, r3, #4
    1ccc:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
    1cd0:	b1ff      	cbz	r7, 1d12 <cbvprintf+0xa6>
			++sp;
    1cd2:	f108 0801 	add.w	r8, r8, #1
    1cd6:	e01c      	b.n	1d12 <cbvprintf+0xa6>
			conv->flag_plus = true;
    1cd8:	f89d 3020 	ldrb.w	r3, [sp, #32]
    1cdc:	f043 0308 	orr.w	r3, r3, #8
    1ce0:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    1ce4:	e7f4      	b.n	1cd0 <cbvprintf+0x64>
			conv->flag_space = true;
    1ce6:	f89d 3020 	ldrb.w	r3, [sp, #32]
    1cea:	f043 0310 	orr.w	r3, r3, #16
    1cee:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    1cf2:	e7ed      	b.n	1cd0 <cbvprintf+0x64>
			conv->flag_hash = true;
    1cf4:	f89d 3020 	ldrb.w	r3, [sp, #32]
    1cf8:	f043 0320 	orr.w	r3, r3, #32
    1cfc:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    1d00:	e7e6      	b.n	1cd0 <cbvprintf+0x64>
			conv->flag_zero = true;
    1d02:	f89d 3020 	ldrb.w	r3, [sp, #32]
    1d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1d0a:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    1d0e:	e7df      	b.n	1cd0 <cbvprintf+0x64>
		switch (*sp) {
    1d10:	2700      	movs	r7, #0
	} while (loop);
    1d12:	b34f      	cbz	r7, 1d68 <cbvprintf+0xfc>
		switch (*sp) {
    1d14:	f898 3000 	ldrb.w	r3, [r8]
    1d18:	3b20      	subs	r3, #32
    1d1a:	2b10      	cmp	r3, #16
    1d1c:	d8f8      	bhi.n	1d10 <cbvprintf+0xa4>
    1d1e:	a201      	add	r2, pc, #4	; (adr r2, 1d24 <cbvprintf+0xb8>)
    1d20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    1d24:	00001ce7 	.word	0x00001ce7
    1d28:	00001d11 	.word	0x00001d11
    1d2c:	00001d11 	.word	0x00001d11
    1d30:	00001cf5 	.word	0x00001cf5
    1d34:	00001d11 	.word	0x00001d11
    1d38:	00001d11 	.word	0x00001d11
    1d3c:	00001d11 	.word	0x00001d11
    1d40:	00001d11 	.word	0x00001d11
    1d44:	00001d11 	.word	0x00001d11
    1d48:	00001d11 	.word	0x00001d11
    1d4c:	00001d11 	.word	0x00001d11
    1d50:	00001cd9 	.word	0x00001cd9
    1d54:	00001d11 	.word	0x00001d11
    1d58:	00001cc5 	.word	0x00001cc5
    1d5c:	00001d11 	.word	0x00001d11
    1d60:	00001d11 	.word	0x00001d11
    1d64:	00001d03 	.word	0x00001d03
	if (conv->flag_zero && conv->flag_dash) {
    1d68:	f89d 3020 	ldrb.w	r3, [sp, #32]
    1d6c:	f003 0344 	and.w	r3, r3, #68	; 0x44
    1d70:	2b44      	cmp	r3, #68	; 0x44
    1d72:	d06d      	beq.n	1e50 <cbvprintf+0x1e4>
	sp = extract_width(conv, sp);
    1d74:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
    1d78:	f89d 3020 	ldrb.w	r3, [sp, #32]
    1d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1d80:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
    1d84:	f898 3000 	ldrb.w	r3, [r8]
    1d88:	2b2a      	cmp	r3, #42	; 0x2a
    1d8a:	d068      	beq.n	1e5e <cbvprintf+0x1f2>
	size_t width = extract_decimal(&sp);
    1d8c:	a805      	add	r0, sp, #20
    1d8e:	f00f fd63 	bl	11858 <extract_decimal>
	if (sp != wp) {
    1d92:	9b05      	ldr	r3, [sp, #20]
    1d94:	4598      	cmp	r8, r3
    1d96:	d012      	beq.n	1dbe <cbvprintf+0x152>
		conv->width_present = true;
    1d98:	f89d 3020 	ldrb.w	r3, [sp, #32]
    1d9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1da0:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
    1da4:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
    1da6:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    1daa:	2800      	cmp	r0, #0
    1dac:	db60      	blt.n	1e70 <cbvprintf+0x204>
    1dae:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    1db0:	4313      	orrs	r3, r2
    1db2:	f89d 2020 	ldrb.w	r2, [sp, #32]
    1db6:	f363 0241 	bfi	r2, r3, #1, #1
    1dba:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
    1dbe:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
    1dc0:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
    1dc2:	781b      	ldrb	r3, [r3, #0]
    1dc4:	2b2e      	cmp	r3, #46	; 0x2e
    1dc6:	bf14      	ite	ne
    1dc8:	2300      	movne	r3, #0
    1dca:	2301      	moveq	r3, #1
    1dcc:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    1dd0:	f363 0241 	bfi	r2, r3, #1, #1
    1dd4:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
    1dd8:	2b00      	cmp	r3, #0
    1dda:	d04b      	beq.n	1e74 <cbvprintf+0x208>
	++sp;
    1ddc:	9b05      	ldr	r3, [sp, #20]
    1dde:	1c5a      	adds	r2, r3, #1
    1de0:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
    1de2:	785b      	ldrb	r3, [r3, #1]
    1de4:	2b2a      	cmp	r3, #42	; 0x2a
    1de6:	d048      	beq.n	1e7a <cbvprintf+0x20e>
	size_t prec = extract_decimal(&sp);
    1de8:	a805      	add	r0, sp, #20
    1dea:	f00f fd35 	bl	11858 <extract_decimal>
	conv->prec_value = prec;
    1dee:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
    1df0:	f89d 3020 	ldrb.w	r3, [sp, #32]
    1df4:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    1df8:	2800      	cmp	r0, #0
    1dfa:	db47      	blt.n	1e8c <cbvprintf+0x220>
    1dfc:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    1dfe:	4313      	orrs	r3, r2
    1e00:	f89d 2020 	ldrb.w	r2, [sp, #32]
    1e04:	f363 0241 	bfi	r2, r3, #1, #1
    1e08:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
    1e0c:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
    1e10:	f898 3000 	ldrb.w	r3, [r8]
    1e14:	3b4c      	subs	r3, #76	; 0x4c
    1e16:	2b2e      	cmp	r3, #46	; 0x2e
    1e18:	f200 80dc 	bhi.w	1fd4 <cbvprintf+0x368>
    1e1c:	e8df f003 	tbb	[pc, r3]
    1e20:	dadadaca 	.word	0xdadadaca
    1e24:	dadadada 	.word	0xdadadada
    1e28:	dadadada 	.word	0xdadadada
    1e2c:	dadadada 	.word	0xdadadada
    1e30:	dadadada 	.word	0xdadadada
    1e34:	dadadada 	.word	0xdadadada
    1e38:	dadadada 	.word	0xdadadada
    1e3c:	da6ada38 	.word	0xda6ada38
    1e40:	dadada51 	.word	0xdadada51
    1e44:	dadadada 	.word	0xdadadada
    1e48:	dadadac0 	.word	0xdadadac0
    1e4c:	dada      	.short	0xdada
    1e4e:	b6          	.byte	0xb6
    1e4f:	00          	.byte	0x00
		conv->flag_zero = false;
    1e50:	f89d 3020 	ldrb.w	r3, [sp, #32]
    1e54:	f36f 1386 	bfc	r3, #6, #1
    1e58:	f88d 3020 	strb.w	r3, [sp, #32]
    1e5c:	e78a      	b.n	1d74 <cbvprintf+0x108>
		conv->width_star = true;
    1e5e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    1e62:	f043 0301 	orr.w	r3, r3, #1
    1e66:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
    1e6a:	4643      	mov	r3, r8
    1e6c:	3301      	adds	r3, #1
    1e6e:	e7a7      	b.n	1dc0 <cbvprintf+0x154>
				      || (width != (size_t)conv->width_value));
    1e70:	2201      	movs	r2, #1
    1e72:	e79d      	b.n	1db0 <cbvprintf+0x144>
		return sp;
    1e74:	f8dd 8014 	ldr.w	r8, [sp, #20]
    1e78:	e7ca      	b.n	1e10 <cbvprintf+0x1a4>
		conv->prec_star = true;
    1e7a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    1e7e:	f043 0304 	orr.w	r3, r3, #4
    1e82:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
    1e86:	f102 0801 	add.w	r8, r2, #1
    1e8a:	e7c1      	b.n	1e10 <cbvprintf+0x1a4>
			      || (prec != (size_t)conv->prec_value));
    1e8c:	2201      	movs	r2, #1
    1e8e:	e7b6      	b.n	1dfe <cbvprintf+0x192>
		if (*++sp == 'h') {
    1e90:	f108 0201 	add.w	r2, r8, #1
    1e94:	f898 3001 	ldrb.w	r3, [r8, #1]
    1e98:	2b68      	cmp	r3, #104	; 0x68
    1e9a:	d008      	beq.n	1eae <cbvprintf+0x242>
			conv->length_mod = LENGTH_H;
    1e9c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    1ea0:	2102      	movs	r1, #2
    1ea2:	f361 03c6 	bfi	r3, r1, #3, #4
    1ea6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
    1eaa:	4690      	mov	r8, r2
    1eac:	e02b      	b.n	1f06 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_HH;
    1eae:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    1eb2:	2201      	movs	r2, #1
    1eb4:	f362 03c6 	bfi	r3, r2, #3, #4
    1eb8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
    1ebc:	f108 0802 	add.w	r8, r8, #2
    1ec0:	e021      	b.n	1f06 <cbvprintf+0x29a>
		if (*++sp == 'l') {
    1ec2:	f108 0201 	add.w	r2, r8, #1
    1ec6:	f898 3001 	ldrb.w	r3, [r8, #1]
    1eca:	2b6c      	cmp	r3, #108	; 0x6c
    1ecc:	d008      	beq.n	1ee0 <cbvprintf+0x274>
			conv->length_mod = LENGTH_L;
    1ece:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    1ed2:	2103      	movs	r1, #3
    1ed4:	f361 03c6 	bfi	r3, r1, #3, #4
    1ed8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
    1edc:	4690      	mov	r8, r2
    1ede:	e012      	b.n	1f06 <cbvprintf+0x29a>
			conv->length_mod = LENGTH_LL;
    1ee0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    1ee4:	2204      	movs	r2, #4
    1ee6:	f362 03c6 	bfi	r3, r2, #3, #4
    1eea:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
    1eee:	f108 0802 	add.w	r8, r8, #2
    1ef2:	e008      	b.n	1f06 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_J;
    1ef4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    1ef8:	2205      	movs	r2, #5
    1efa:	f362 03c6 	bfi	r3, r2, #3, #4
    1efe:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    1f02:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
    1f06:	f818 3b01 	ldrb.w	r3, [r8], #1
    1f0a:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
    1f0e:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    1f12:	2a37      	cmp	r2, #55	; 0x37
    1f14:	f200 8150 	bhi.w	21b8 <cbvprintf+0x54c>
    1f18:	e8df f012 	tbh	[pc, r2, lsl #1]
    1f1c:	014e0126 	.word	0x014e0126
    1f20:	014e014e 	.word	0x014e014e
    1f24:	01260126 	.word	0x01260126
    1f28:	014e0126 	.word	0x014e0126
    1f2c:	014e014e 	.word	0x014e014e
    1f30:	014e014e 	.word	0x014e014e
    1f34:	014e014e 	.word	0x014e014e
    1f38:	014e014e 	.word	0x014e014e
    1f3c:	014e014e 	.word	0x014e014e
    1f40:	014e014e 	.word	0x014e014e
    1f44:	014e014e 	.word	0x014e014e
    1f48:	0113014e 	.word	0x0113014e
    1f4c:	014e014e 	.word	0x014e014e
    1f50:	014e014e 	.word	0x014e014e
    1f54:	014e014e 	.word	0x014e014e
    1f58:	014e014e 	.word	0x014e014e
    1f5c:	014e0126 	.word	0x014e0126
    1f60:	00630113 	.word	0x00630113
    1f64:	01260126 	.word	0x01260126
    1f68:	014e0126 	.word	0x014e0126
    1f6c:	014e0063 	.word	0x014e0063
    1f70:	014e014e 	.word	0x014e014e
    1f74:	012f014e 	.word	0x012f014e
    1f78:	013f0113 	.word	0x013f0113
    1f7c:	014e014e 	.word	0x014e014e
    1f80:	014e013f 	.word	0x014e013f
    1f84:	014e0113 	.word	0x014e0113
    1f88:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
    1f8c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    1f90:	2206      	movs	r2, #6
    1f92:	f362 03c6 	bfi	r3, r2, #3, #4
    1f96:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    1f9a:	f108 0801 	add.w	r8, r8, #1
		break;
    1f9e:	e7b2      	b.n	1f06 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_T;
    1fa0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    1fa4:	2207      	movs	r2, #7
    1fa6:	f362 03c6 	bfi	r3, r2, #3, #4
    1faa:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    1fae:	f108 0801 	add.w	r8, r8, #1
		break;
    1fb2:	e7a8      	b.n	1f06 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_UPPER_L;
    1fb4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    1fb8:	2208      	movs	r2, #8
    1fba:	f362 03c6 	bfi	r3, r2, #3, #4
    1fbe:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    1fc2:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
    1fc6:	f89d 3020 	ldrb.w	r3, [sp, #32]
    1fca:	f043 0302 	orr.w	r3, r3, #2
    1fce:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
    1fd2:	e798      	b.n	1f06 <cbvprintf+0x29a>
		conv->length_mod = LENGTH_NONE;
    1fd4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    1fd8:	f36f 03c6 	bfc	r3, #3, #4
    1fdc:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
    1fe0:	e791      	b.n	1f06 <cbvprintf+0x29a>
		conv->specifier_cat = SPECIFIER_SINT;
    1fe2:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    1fe6:	2101      	movs	r1, #1
    1fe8:	f361 0202 	bfi	r2, r1, #0, #3
    1fec:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
    1ff0:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    1ff4:	f002 0278 	and.w	r2, r2, #120	; 0x78
    1ff8:	2a40      	cmp	r2, #64	; 0x40
    1ffa:	f000 80aa 	beq.w	2152 <cbvprintf+0x4e6>
		if (conv->specifier == 'c') {
    1ffe:	2b63      	cmp	r3, #99	; 0x63
    2000:	f000 80ae 	beq.w	2160 <cbvprintf+0x4f4>
	conv->unsupported |= unsupported;
    2004:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2008:	f3c3 0240 	ubfx	r2, r3, #1, #1
    200c:	4317      	orrs	r7, r2
    200e:	f367 0341 	bfi	r3, r7, #1, #1
    2012:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    2016:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    201a:	f013 0f01 	tst.w	r3, #1
    201e:	f000 80da 	beq.w	21d6 <cbvprintf+0x56a>
			width = va_arg(ap, int);
    2022:	9b03      	ldr	r3, [sp, #12]
    2024:	1d1a      	adds	r2, r3, #4
    2026:	9203      	str	r2, [sp, #12]
    2028:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    202a:	2f00      	cmp	r7, #0
    202c:	f2c0 80cb 	blt.w	21c6 <cbvprintf+0x55a>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    2030:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2034:	f013 0f04 	tst.w	r3, #4
    2038:	f000 80df 	beq.w	21fa <cbvprintf+0x58e>
			int arg = va_arg(ap, int);
    203c:	9b03      	ldr	r3, [sp, #12]
    203e:	1d1a      	adds	r2, r3, #4
    2040:	9203      	str	r2, [sp, #12]
    2042:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
    2046:	f1bb 0f00 	cmp.w	fp, #0
    204a:	f2c0 80cd 	blt.w	21e8 <cbvprintf+0x57c>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    204e:	2300      	movs	r3, #0
    2050:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
    2052:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    2054:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    2058:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    205c:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
    2060:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    2064:	2b01      	cmp	r3, #1
    2066:	f000 80d1 	beq.w	220c <cbvprintf+0x5a0>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    206a:	2b02      	cmp	r3, #2
    206c:	f000 8116 	beq.w	229c <cbvprintf+0x630>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    2070:	2b04      	cmp	r3, #4
    2072:	f000 8167 	beq.w	2344 <cbvprintf+0x6d8>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    2076:	2b03      	cmp	r3, #3
    2078:	f000 817e 	beq.w	2378 <cbvprintf+0x70c>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    207c:	f89d 9020 	ldrb.w	r9, [sp, #32]
    2080:	f019 0303 	ands.w	r3, r9, #3
    2084:	9302      	str	r3, [sp, #8]
    2086:	f040 817d 	bne.w	2384 <cbvprintf+0x718>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    208a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    208e:	3b25      	subs	r3, #37	; 0x25
    2090:	2b53      	cmp	r3, #83	; 0x53
    2092:	f200 8233 	bhi.w	24fc <cbvprintf+0x890>
    2096:	e8df f013 	tbh	[pc, r3, lsl #1]
    209a:	0181      	.short	0x0181
    209c:	02310231 	.word	0x02310231
    20a0:	02310231 	.word	0x02310231
    20a4:	02310231 	.word	0x02310231
    20a8:	02310231 	.word	0x02310231
    20ac:	02310231 	.word	0x02310231
    20b0:	02310231 	.word	0x02310231
    20b4:	02310231 	.word	0x02310231
    20b8:	02310231 	.word	0x02310231
    20bc:	02310231 	.word	0x02310231
    20c0:	02310231 	.word	0x02310231
    20c4:	02310231 	.word	0x02310231
    20c8:	02310231 	.word	0x02310231
    20cc:	02310231 	.word	0x02310231
    20d0:	02310231 	.word	0x02310231
    20d4:	02310231 	.word	0x02310231
    20d8:	02310231 	.word	0x02310231
    20dc:	02310231 	.word	0x02310231
    20e0:	02310231 	.word	0x02310231
    20e4:	02310231 	.word	0x02310231
    20e8:	02310231 	.word	0x02310231
    20ec:	02310231 	.word	0x02310231
    20f0:	02310231 	.word	0x02310231
    20f4:	02310231 	.word	0x02310231
    20f8:	02310231 	.word	0x02310231
    20fc:	02310231 	.word	0x02310231
    2100:	023101c7 	.word	0x023101c7
    2104:	02310231 	.word	0x02310231
    2108:	02310231 	.word	0x02310231
    210c:	02310231 	.word	0x02310231
    2110:	02310231 	.word	0x02310231
    2114:	01a10231 	.word	0x01a10231
    2118:	023101ab 	.word	0x023101ab
    211c:	02310231 	.word	0x02310231
    2120:	01ab0231 	.word	0x01ab0231
    2124:	02310231 	.word	0x02310231
    2128:	02310231 	.word	0x02310231
    212c:	01c70208 	.word	0x01c70208
    2130:	023101ea 	.word	0x023101ea
    2134:	018f0231 	.word	0x018f0231
    2138:	01c70231 	.word	0x01c70231
    213c:	02310231 	.word	0x02310231
    2140:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
    2142:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    2146:	2102      	movs	r1, #2
    2148:	f361 0202 	bfi	r2, r1, #0, #3
    214c:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
    2150:	e74e      	b.n	1ff0 <cbvprintf+0x384>
			conv->invalid = true;
    2152:	f89d 1020 	ldrb.w	r1, [sp, #32]
    2156:	f041 0101 	orr.w	r1, r1, #1
    215a:	f88d 1020 	strb.w	r1, [sp, #32]
    215e:	e74e      	b.n	1ffe <cbvprintf+0x392>
			unsupported = (conv->length_mod != LENGTH_NONE);
    2160:	1e17      	subs	r7, r2, #0
    2162:	bf18      	it	ne
    2164:	2701      	movne	r7, #1
    2166:	e74d      	b.n	2004 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_FP;
    2168:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    216c:	2204      	movs	r2, #4
    216e:	f362 0302 	bfi	r3, r2, #0, #3
    2172:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
    2176:	2701      	movs	r7, #1
			break;
    2178:	e744      	b.n	2004 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
    217a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    217e:	2203      	movs	r2, #3
    2180:	f362 0302 	bfi	r3, r2, #0, #3
    2184:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
    2188:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    218c:	f003 0378 	and.w	r3, r3, #120	; 0x78
    2190:	2b40      	cmp	r3, #64	; 0x40
    2192:	f47f af37 	bne.w	2004 <cbvprintf+0x398>
			unsupported = true;
    2196:	2701      	movs	r7, #1
    2198:	e734      	b.n	2004 <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
    219a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    219e:	2203      	movs	r2, #3
    21a0:	f362 0302 	bfi	r3, r2, #0, #3
    21a4:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
    21a8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    21ac:	f013 0f78 	tst.w	r3, #120	; 0x78
    21b0:	f43f af28 	beq.w	2004 <cbvprintf+0x398>
			unsupported = true;
    21b4:	2701      	movs	r7, #1
    21b6:	e725      	b.n	2004 <cbvprintf+0x398>
		conv->invalid = true;
    21b8:	f89d 3020 	ldrb.w	r3, [sp, #32]
    21bc:	f043 0301 	orr.w	r3, r3, #1
    21c0:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
    21c4:	e71e      	b.n	2004 <cbvprintf+0x398>
				conv->flag_dash = true;
    21c6:	f89d 3020 	ldrb.w	r3, [sp, #32]
    21ca:	f043 0304 	orr.w	r3, r3, #4
    21ce:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
    21d2:	427f      	negs	r7, r7
    21d4:	e72c      	b.n	2030 <cbvprintf+0x3c4>
		} else if (conv->width_present) {
    21d6:	f99d 3020 	ldrsb.w	r3, [sp, #32]
    21da:	2b00      	cmp	r3, #0
    21dc:	db02      	blt.n	21e4 <cbvprintf+0x578>
		int width = -1;
    21de:	f04f 37ff 	mov.w	r7, #4294967295
    21e2:	e725      	b.n	2030 <cbvprintf+0x3c4>
			width = conv->width_value;
    21e4:	9f09      	ldr	r7, [sp, #36]	; 0x24
    21e6:	e723      	b.n	2030 <cbvprintf+0x3c4>
				conv->prec_present = false;
    21e8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    21ec:	f36f 0341 	bfc	r3, #1, #1
    21f0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
    21f4:	f04f 3bff 	mov.w	fp, #4294967295
    21f8:	e729      	b.n	204e <cbvprintf+0x3e2>
		} else if (conv->prec_present) {
    21fa:	f013 0f02 	tst.w	r3, #2
    21fe:	d002      	beq.n	2206 <cbvprintf+0x59a>
			precision = conv->prec_value;
    2200:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    2204:	e723      	b.n	204e <cbvprintf+0x3e2>
		int precision = -1;
    2206:	f04f 3bff 	mov.w	fp, #4294967295
    220a:	e720      	b.n	204e <cbvprintf+0x3e2>
			switch (length_mod) {
    220c:	1ecb      	subs	r3, r1, #3
    220e:	2b04      	cmp	r3, #4
    2210:	d804      	bhi.n	221c <cbvprintf+0x5b0>
    2212:	e8df f003 	tbb	[pc, r3]
    2216:	1d0b      	.short	0x1d0b
    2218:	3529      	.short	0x3529
    221a:	35          	.byte	0x35
    221b:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    221c:	9b03      	ldr	r3, [sp, #12]
    221e:	1d1a      	adds	r2, r3, #4
    2220:	9203      	str	r2, [sp, #12]
    2222:	681a      	ldr	r2, [r3, #0]
    2224:	17d3      	asrs	r3, r2, #31
    2226:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    222a:	e006      	b.n	223a <cbvprintf+0x5ce>
					value->sint = va_arg(ap, long);
    222c:	9b03      	ldr	r3, [sp, #12]
    222e:	1d1a      	adds	r2, r3, #4
    2230:	9203      	str	r2, [sp, #12]
    2232:	681a      	ldr	r2, [r3, #0]
    2234:	17d3      	asrs	r3, r2, #31
    2236:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    223a:	2901      	cmp	r1, #1
    223c:	d028      	beq.n	2290 <cbvprintf+0x624>
			} else if (length_mod == LENGTH_H) {
    223e:	2902      	cmp	r1, #2
    2240:	f47f af1c 	bne.w	207c <cbvprintf+0x410>
				value->sint = (short)value->sint;
    2244:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    2248:	17d3      	asrs	r3, r2, #31
    224a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    224e:	e715      	b.n	207c <cbvprintf+0x410>
					(sint_value_type)va_arg(ap, long long);
    2250:	9b03      	ldr	r3, [sp, #12]
    2252:	3307      	adds	r3, #7
    2254:	f023 0307 	bic.w	r3, r3, #7
    2258:	f103 0208 	add.w	r2, r3, #8
    225c:	9203      	str	r2, [sp, #12]
    225e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    2262:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    2266:	e7e8      	b.n	223a <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, intmax_t);
    2268:	9b03      	ldr	r3, [sp, #12]
    226a:	3307      	adds	r3, #7
    226c:	f023 0307 	bic.w	r3, r3, #7
    2270:	f103 0208 	add.w	r2, r3, #8
    2274:	9203      	str	r2, [sp, #12]
    2276:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    227a:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    227e:	e7dc      	b.n	223a <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    2280:	9b03      	ldr	r3, [sp, #12]
    2282:	1d1a      	adds	r2, r3, #4
    2284:	9203      	str	r2, [sp, #12]
    2286:	681a      	ldr	r2, [r3, #0]
    2288:	17d3      	asrs	r3, r2, #31
				value->sint =
    228a:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    228e:	e7d4      	b.n	223a <cbvprintf+0x5ce>
				value->sint = (char)value->sint;
    2290:	f89d 3018 	ldrb.w	r3, [sp, #24]
    2294:	9306      	str	r3, [sp, #24]
    2296:	2300      	movs	r3, #0
    2298:	9307      	str	r3, [sp, #28]
    229a:	e6ef      	b.n	207c <cbvprintf+0x410>
			switch (length_mod) {
    229c:	1ecb      	subs	r3, r1, #3
    229e:	2b04      	cmp	r3, #4
    22a0:	d804      	bhi.n	22ac <cbvprintf+0x640>
    22a2:	e8df f003 	tbb	[pc, r3]
    22a6:	1f0b      	.short	0x1f0b
    22a8:	4135      	.short	0x4135
    22aa:	41          	.byte	0x41
    22ab:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    22ac:	9b03      	ldr	r3, [sp, #12]
    22ae:	1d1a      	adds	r2, r3, #4
    22b0:	9203      	str	r2, [sp, #12]
    22b2:	681b      	ldr	r3, [r3, #0]
    22b4:	9306      	str	r3, [sp, #24]
    22b6:	2300      	movs	r3, #0
    22b8:	9307      	str	r3, [sp, #28]
				break;
    22ba:	e01e      	b.n	22fa <cbvprintf+0x68e>
				    && (conv->specifier == 'c')) {
    22bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
    22c0:	2b63      	cmp	r3, #99	; 0x63
    22c2:	d007      	beq.n	22d4 <cbvprintf+0x668>
					value->uint = va_arg(ap, unsigned long);
    22c4:	9b03      	ldr	r3, [sp, #12]
    22c6:	1d1a      	adds	r2, r3, #4
    22c8:	9203      	str	r2, [sp, #12]
    22ca:	681b      	ldr	r3, [r3, #0]
    22cc:	9306      	str	r3, [sp, #24]
    22ce:	2300      	movs	r3, #0
    22d0:	9307      	str	r3, [sp, #28]
    22d2:	e012      	b.n	22fa <cbvprintf+0x68e>
					value->uint = (wchar_t)va_arg(ap,
    22d4:	9b03      	ldr	r3, [sp, #12]
    22d6:	1d1a      	adds	r2, r3, #4
    22d8:	9203      	str	r2, [sp, #12]
    22da:	681b      	ldr	r3, [r3, #0]
    22dc:	9306      	str	r3, [sp, #24]
    22de:	2300      	movs	r3, #0
    22e0:	9307      	str	r3, [sp, #28]
    22e2:	e00a      	b.n	22fa <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap,
    22e4:	9b03      	ldr	r3, [sp, #12]
    22e6:	3307      	adds	r3, #7
    22e8:	f023 0307 	bic.w	r3, r3, #7
    22ec:	f103 0208 	add.w	r2, r3, #8
    22f0:	9203      	str	r2, [sp, #12]
    22f2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    22f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    22fa:	2901      	cmp	r1, #1
    22fc:	d01c      	beq.n	2338 <cbvprintf+0x6cc>
			} else if (length_mod == LENGTH_H) {
    22fe:	2902      	cmp	r1, #2
    2300:	f47f aebc 	bne.w	207c <cbvprintf+0x410>
				value->uint = (unsigned short)value->uint;
    2304:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    2308:	9306      	str	r3, [sp, #24]
    230a:	2300      	movs	r3, #0
    230c:	9307      	str	r3, [sp, #28]
    230e:	e6b5      	b.n	207c <cbvprintf+0x410>
					(uint_value_type)va_arg(ap,
    2310:	9b03      	ldr	r3, [sp, #12]
    2312:	3307      	adds	r3, #7
    2314:	f023 0307 	bic.w	r3, r3, #7
    2318:	f103 0208 	add.w	r2, r3, #8
    231c:	9203      	str	r2, [sp, #12]
    231e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    2322:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    2326:	e7e8      	b.n	22fa <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap, size_t);
    2328:	9b03      	ldr	r3, [sp, #12]
    232a:	1d1a      	adds	r2, r3, #4
    232c:	9203      	str	r2, [sp, #12]
    232e:	681b      	ldr	r3, [r3, #0]
				value->uint =
    2330:	9306      	str	r3, [sp, #24]
    2332:	2300      	movs	r3, #0
    2334:	9307      	str	r3, [sp, #28]
				break;
    2336:	e7e0      	b.n	22fa <cbvprintf+0x68e>
				value->uint = (unsigned char)value->uint;
    2338:	f89d 3018 	ldrb.w	r3, [sp, #24]
    233c:	9306      	str	r3, [sp, #24]
    233e:	2300      	movs	r3, #0
    2340:	9307      	str	r3, [sp, #28]
    2342:	e69b      	b.n	207c <cbvprintf+0x410>
			if (length_mod == LENGTH_UPPER_L) {
    2344:	2908      	cmp	r1, #8
    2346:	d00b      	beq.n	2360 <cbvprintf+0x6f4>
				value->dbl = va_arg(ap, double);
    2348:	9b03      	ldr	r3, [sp, #12]
    234a:	3307      	adds	r3, #7
    234c:	f023 0307 	bic.w	r3, r3, #7
    2350:	f103 0208 	add.w	r2, r3, #8
    2354:	9203      	str	r2, [sp, #12]
    2356:	e9d3 2300 	ldrd	r2, r3, [r3]
    235a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    235e:	e68d      	b.n	207c <cbvprintf+0x410>
				value->ldbl = va_arg(ap, long double);
    2360:	9b03      	ldr	r3, [sp, #12]
    2362:	3307      	adds	r3, #7
    2364:	f023 0307 	bic.w	r3, r3, #7
    2368:	f103 0208 	add.w	r2, r3, #8
    236c:	9203      	str	r2, [sp, #12]
    236e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2372:	e9cd 2306 	strd	r2, r3, [sp, #24]
    2376:	e681      	b.n	207c <cbvprintf+0x410>
			value->ptr = va_arg(ap, void *);
    2378:	9b03      	ldr	r3, [sp, #12]
    237a:	1d1a      	adds	r2, r3, #4
    237c:	9203      	str	r2, [sp, #12]
    237e:	681b      	ldr	r3, [r3, #0]
    2380:	9306      	str	r3, [sp, #24]
    2382:	e67b      	b.n	207c <cbvprintf+0x410>
			OUTS(sp, fp);
    2384:	4643      	mov	r3, r8
    2386:	4652      	mov	r2, sl
    2388:	4629      	mov	r1, r5
    238a:	4630      	mov	r0, r6
    238c:	f00f fae1 	bl	11952 <outs>
    2390:	2800      	cmp	r0, #0
    2392:	f2c0 814f 	blt.w	2634 <cbvprintf+0x9c8>
    2396:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    2398:	46c2      	mov	sl, r8
			continue;
    239a:	e46f      	b.n	1c7c <cbvprintf+0x10>
		case '%':
			OUTC('%');
    239c:	4629      	mov	r1, r5
    239e:	2025      	movs	r0, #37	; 0x25
    23a0:	47b0      	blx	r6
    23a2:	2800      	cmp	r0, #0
    23a4:	f2c0 8146 	blt.w	2634 <cbvprintf+0x9c8>
    23a8:	3401      	adds	r4, #1
		char sign = 0;
    23aa:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    23ae:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    23b2:	f04f 0a00 	mov.w	sl, #0
			break;
    23b6:	e0a7      	b.n	2508 <cbvprintf+0x89c>
		case 's': {
			bps = (const char *)value->ptr;
    23b8:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
    23bc:	f1bb 0f00 	cmp.w	fp, #0
    23c0:	db08      	blt.n	23d4 <cbvprintf+0x768>
				len = strnlen(bps, precision);
    23c2:	4659      	mov	r1, fp
    23c4:	4650      	mov	r0, sl
    23c6:	f010 fb35 	bl	12a34 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    23ca:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
    23ce:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
    23d2:	e099      	b.n	2508 <cbvprintf+0x89c>
				len = strlen(bps);
    23d4:	4650      	mov	r0, sl
    23d6:	f010 fb25 	bl	12a24 <strlen>
    23da:	e7f6      	b.n	23ca <cbvprintf+0x75e>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    23dc:	9b06      	ldr	r3, [sp, #24]
    23de:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
    23e2:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
    23e6:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
    23ea:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
    23ee:	e08b      	b.n	2508 <cbvprintf+0x89c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    23f0:	f019 0f08 	tst.w	r9, #8
    23f4:	d105      	bne.n	2402 <cbvprintf+0x796>
				sign = '+';
			} else if (conv->flag_space) {
    23f6:	f019 0910 	ands.w	r9, r9, #16
    23fa:	d004      	beq.n	2406 <cbvprintf+0x79a>
				sign = ' ';
    23fc:	f04f 0920 	mov.w	r9, #32
    2400:	e001      	b.n	2406 <cbvprintf+0x79a>
				sign = '+';
    2402:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    2406:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
    240a:	2a00      	cmp	r2, #0
    240c:	f173 0100 	sbcs.w	r1, r3, #0
    2410:	db02      	blt.n	2418 <cbvprintf+0x7ac>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    2412:	e9cd 2306 	strd	r2, r3, [sp, #24]
    2416:	e009      	b.n	242c <cbvprintf+0x7c0>
				value->uint = (uint_value_type)-sint;
    2418:	4252      	negs	r2, r2
    241a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    241e:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
    2422:	f04f 092d 	mov.w	r9, #45	; 0x2d
    2426:	e001      	b.n	242c <cbvprintf+0x7c0>
		switch (conv->specifier) {
    2428:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    242c:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    2430:	9300      	str	r3, [sp, #0]
    2432:	ab0c      	add	r3, sp, #48	; 0x30
    2434:	aa08      	add	r2, sp, #32
    2436:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    243a:	f00f fa20 	bl	1187e <encode_uint>
    243e:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    2440:	f1bb 0f00 	cmp.w	fp, #0
    2444:	f2c0 8090 	blt.w	2568 <cbvprintf+0x8fc>
				size_t len = bpe - bps;
    2448:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    244c:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    2450:	f89d 2020 	ldrb.w	r2, [sp, #32]
    2454:	f36f 1286 	bfc	r2, #6, #1
    2458:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    245c:	459b      	cmp	fp, r3
    245e:	f240 8086 	bls.w	256e <cbvprintf+0x902>
					conv->pad0_value = precision - (int)len;
    2462:	ebab 0303 	sub.w	r3, fp, r3
    2466:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
    2468:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    246c:	e04c      	b.n	2508 <cbvprintf+0x89c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    246e:	9806      	ldr	r0, [sp, #24]
    2470:	b930      	cbnz	r0, 2480 <cbvprintf+0x814>
		char sign = 0;
    2472:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    2476:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 263c <cbvprintf+0x9d0>
			bps = "(nil)";
    247a:	f1ab 0a05 	sub.w	sl, fp, #5
    247e:	e043      	b.n	2508 <cbvprintf+0x89c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2480:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    2484:	9300      	str	r3, [sp, #0]
    2486:	ab0c      	add	r3, sp, #48	; 0x30
    2488:	aa08      	add	r2, sp, #32
    248a:	2100      	movs	r1, #0
    248c:	f00f f9f7 	bl	1187e <encode_uint>
    2490:	4682      	mov	sl, r0
				conv->altform_0c = true;
    2492:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    2496:	f043 0310 	orr.w	r3, r3, #16
    249a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
    249e:	2378      	movs	r3, #120	; 0x78
    24a0:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
    24a4:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
    24a8:	e7ca      	b.n	2440 <cbvprintf+0x7d4>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    24aa:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
    24ac:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    24b0:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    24b4:	2b07      	cmp	r3, #7
    24b6:	d806      	bhi.n	24c6 <cbvprintf+0x85a>
    24b8:	e8df f003 	tbb	[pc, r3]
    24bc:	100e0c04 	.word	0x100e0c04
    24c0:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
    24c4:	6014      	str	r4, [r2, #0]
		char sign = 0;
    24c6:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    24ca:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    24ce:	f04f 0a00 	mov.w	sl, #0
}
    24d2:	e019      	b.n	2508 <cbvprintf+0x89c>
		*(signed char *)dp = (signed char)count;
    24d4:	7014      	strb	r4, [r2, #0]
		break;
    24d6:	e7f6      	b.n	24c6 <cbvprintf+0x85a>
		*(short *)dp = (short)count;
    24d8:	8014      	strh	r4, [r2, #0]
		break;
    24da:	e7f4      	b.n	24c6 <cbvprintf+0x85a>
		*(long *)dp = (long)count;
    24dc:	6014      	str	r4, [r2, #0]
		break;
    24de:	e7f2      	b.n	24c6 <cbvprintf+0x85a>
		*(long long *)dp = (long long)count;
    24e0:	4620      	mov	r0, r4
    24e2:	17e1      	asrs	r1, r4, #31
    24e4:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    24e8:	e7ed      	b.n	24c6 <cbvprintf+0x85a>
		*(intmax_t *)dp = (intmax_t)count;
    24ea:	4620      	mov	r0, r4
    24ec:	17e1      	asrs	r1, r4, #31
    24ee:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    24f2:	e7e8      	b.n	24c6 <cbvprintf+0x85a>
		*(size_t *)dp = (size_t)count;
    24f4:	6014      	str	r4, [r2, #0]
		break;
    24f6:	e7e6      	b.n	24c6 <cbvprintf+0x85a>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    24f8:	6014      	str	r4, [r2, #0]
		break;
    24fa:	e7e4      	b.n	24c6 <cbvprintf+0x85a>
		switch (conv->specifier) {
    24fc:	f8dd 9008 	ldr.w	r9, [sp, #8]
    2500:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    2504:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    2508:	f1ba 0f00 	cmp.w	sl, #0
    250c:	f000 808e 	beq.w	262c <cbvprintf+0x9c0>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    2510:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
    2514:	f1b9 0f00 	cmp.w	r9, #0
    2518:	d000      	beq.n	251c <cbvprintf+0x8b0>
			nj_len += 1U;
    251a:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
    251c:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
    2520:	f011 0f10 	tst.w	r1, #16
    2524:	d026      	beq.n	2574 <cbvprintf+0x908>
			nj_len += 2U;
    2526:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    2528:	9b09      	ldr	r3, [sp, #36]	; 0x24
    252a:	4413      	add	r3, r2
		if (conv->pad_fp) {
    252c:	f011 0f40 	tst.w	r1, #64	; 0x40
    2530:	d001      	beq.n	2536 <cbvprintf+0x8ca>
			nj_len += conv->pad0_pre_exp;
    2532:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2534:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    2536:	2f00      	cmp	r7, #0
    2538:	dd32      	ble.n	25a0 <cbvprintf+0x934>
			width -= (int)nj_len;
    253a:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    253c:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2540:	f013 0f04 	tst.w	r3, #4
    2544:	d12c      	bne.n	25a0 <cbvprintf+0x934>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    2546:	f013 0f40 	tst.w	r3, #64	; 0x40
    254a:	d018      	beq.n	257e <cbvprintf+0x912>
					if (sign != 0) {
    254c:	f1b9 0f00 	cmp.w	r9, #0
    2550:	d018      	beq.n	2584 <cbvprintf+0x918>
						OUTC(sign);
    2552:	4629      	mov	r1, r5
    2554:	4648      	mov	r0, r9
    2556:	47b0      	blx	r6
    2558:	2800      	cmp	r0, #0
    255a:	db6b      	blt.n	2634 <cbvprintf+0x9c8>
    255c:	3401      	adds	r4, #1
						sign = 0;
    255e:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
    2562:	2330      	movs	r3, #48	; 0x30
    2564:	9302      	str	r3, [sp, #8]
    2566:	e00f      	b.n	2588 <cbvprintf+0x91c>
		const char *bpe = buf + sizeof(buf);
    2568:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    256c:	e7cc      	b.n	2508 <cbvprintf+0x89c>
    256e:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    2572:	e7c9      	b.n	2508 <cbvprintf+0x89c>
		} else if (conv->altform_0) {
    2574:	f011 0f08 	tst.w	r1, #8
    2578:	d0d6      	beq.n	2528 <cbvprintf+0x8bc>
			nj_len += 1U;
    257a:	3201      	adds	r2, #1
    257c:	e7d4      	b.n	2528 <cbvprintf+0x8bc>
				char pad = ' ';
    257e:	2320      	movs	r3, #32
    2580:	9302      	str	r3, [sp, #8]
    2582:	e001      	b.n	2588 <cbvprintf+0x91c>
					pad = '0';
    2584:	2330      	movs	r3, #48	; 0x30
    2586:	9302      	str	r3, [sp, #8]
    2588:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    258a:	1e5f      	subs	r7, r3, #1
    258c:	2b00      	cmp	r3, #0
    258e:	dd07      	ble.n	25a0 <cbvprintf+0x934>
					OUTC(pad);
    2590:	4629      	mov	r1, r5
    2592:	9802      	ldr	r0, [sp, #8]
    2594:	47b0      	blx	r6
    2596:	2800      	cmp	r0, #0
    2598:	db4c      	blt.n	2634 <cbvprintf+0x9c8>
    259a:	3401      	adds	r4, #1
				while (width-- > 0) {
    259c:	463b      	mov	r3, r7
    259e:	e7f4      	b.n	258a <cbvprintf+0x91e>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    25a0:	f1b9 0f00 	cmp.w	r9, #0
    25a4:	d005      	beq.n	25b2 <cbvprintf+0x946>
			OUTC(sign);
    25a6:	4629      	mov	r1, r5
    25a8:	4648      	mov	r0, r9
    25aa:	47b0      	blx	r6
    25ac:	2800      	cmp	r0, #0
    25ae:	db41      	blt.n	2634 <cbvprintf+0x9c8>
    25b0:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    25b2:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    25b6:	f3c3 1200 	ubfx	r2, r3, #4, #1
    25ba:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    25be:	4313      	orrs	r3, r2
    25c0:	d005      	beq.n	25ce <cbvprintf+0x962>
				OUTC('0');
    25c2:	4629      	mov	r1, r5
    25c4:	2030      	movs	r0, #48	; 0x30
    25c6:	47b0      	blx	r6
    25c8:	2800      	cmp	r0, #0
    25ca:	db33      	blt.n	2634 <cbvprintf+0x9c8>
    25cc:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    25ce:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    25d2:	f013 0f10 	tst.w	r3, #16
    25d6:	d006      	beq.n	25e6 <cbvprintf+0x97a>
				OUTC(conv->specifier);
    25d8:	4629      	mov	r1, r5
    25da:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    25de:	47b0      	blx	r6
    25e0:	2800      	cmp	r0, #0
    25e2:	db27      	blt.n	2634 <cbvprintf+0x9c8>
    25e4:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    25e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
    25e8:	f103 39ff 	add.w	r9, r3, #4294967295
    25ec:	2b00      	cmp	r3, #0
    25ee:	dd07      	ble.n	2600 <cbvprintf+0x994>
				OUTC('0');
    25f0:	4629      	mov	r1, r5
    25f2:	2030      	movs	r0, #48	; 0x30
    25f4:	47b0      	blx	r6
    25f6:	2800      	cmp	r0, #0
    25f8:	db1c      	blt.n	2634 <cbvprintf+0x9c8>
    25fa:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    25fc:	464b      	mov	r3, r9
    25fe:	e7f3      	b.n	25e8 <cbvprintf+0x97c>
			}

			OUTS(bps, bpe);
    2600:	465b      	mov	r3, fp
    2602:	4652      	mov	r2, sl
    2604:	4629      	mov	r1, r5
    2606:	4630      	mov	r0, r6
    2608:	f00f f9a3 	bl	11952 <outs>
    260c:	2800      	cmp	r0, #0
    260e:	db11      	blt.n	2634 <cbvprintf+0x9c8>
    2610:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    2612:	2f00      	cmp	r7, #0
    2614:	dd07      	ble.n	2626 <cbvprintf+0x9ba>
			OUTC(' ');
    2616:	4629      	mov	r1, r5
    2618:	2020      	movs	r0, #32
    261a:	47b0      	blx	r6
    261c:	2800      	cmp	r0, #0
    261e:	db09      	blt.n	2634 <cbvprintf+0x9c8>
    2620:	3401      	adds	r4, #1
			--width;
    2622:	3f01      	subs	r7, #1
    2624:	e7f5      	b.n	2612 <cbvprintf+0x9a6>
		fp = extract_conversion(conv, sp);
    2626:	46c2      	mov	sl, r8
    2628:	f7ff bb28 	b.w	1c7c <cbvprintf+0x10>
    262c:	46c2      	mov	sl, r8
    262e:	f7ff bb25 	b.w	1c7c <cbvprintf+0x10>
		}
	}

	return count;
    2632:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    2634:	b013      	add	sp, #76	; 0x4c
    2636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    263a:	bf00      	nop
    263c:	0001605d 	.word	0x0001605d

00002640 <is_rodata>:
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    2640:	4b05      	ldr	r3, [pc, #20]	; (2658 <is_rodata+0x18>)
    2642:	4298      	cmp	r0, r3
    2644:	d304      	bcc.n	2650 <is_rodata+0x10>
    2646:	4b05      	ldr	r3, [pc, #20]	; (265c <is_rodata+0x1c>)
    2648:	4298      	cmp	r0, r3
    264a:	d303      	bcc.n	2654 <is_rodata+0x14>
    264c:	2000      	movs	r0, #0
    264e:	4770      	bx	lr
    2650:	2000      	movs	r0, #0
    2652:	4770      	bx	lr
    2654:	2001      	movs	r0, #1
		((const char *)addr < (const char *)RO_END));
}
    2656:	4770      	bx	lr
    2658:	00015bb8 	.word	0x00015bb8
    265c:	000178a8 	.word	0x000178a8

00002660 <thread_set>:
		}
	}
}

static void thread_set(k_tid_t process_tid)
{
    2660:	b508      	push	{r3, lr}
	proc_tid = process_tid;
    2662:	4b06      	ldr	r3, [pc, #24]	; (267c <thread_set+0x1c>)
    2664:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    2666:	b118      	cbz	r0, 2670 <thread_set+0x10>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    2668:	4b05      	ldr	r3, [pc, #20]	; (2680 <thread_set+0x20>)
    266a:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
    266c:	2b09      	cmp	r3, #9
    266e:	dc00      	bgt.n	2672 <thread_set+0x12>
		k_sem_give(&log_process_thread_sem);
	}
}
    2670:	bd08      	pop	{r3, pc}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    2672:	4804      	ldr	r0, [pc, #16]	; (2684 <thread_set+0x24>)
    2674:	f00d f8f0 	bl	f858 <z_impl_k_sem_give>
}
    2678:	e7fa      	b.n	2670 <thread_set+0x10>
    267a:	bf00      	nop
    267c:	20001644 	.word	0x20001644
    2680:	20001614 	.word	0x20001614
    2684:	2000043c 	.word	0x2000043c

00002688 <log_process_thread_timer_expiry_fn>:
{
	return mpsc_pbuf_is_pending(&log_buffer);
}

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
    2688:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
    268a:	4802      	ldr	r0, [pc, #8]	; (2694 <log_process_thread_timer_expiry_fn+0xc>)
    268c:	f00d f8e4 	bl	f858 <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
    2690:	bd08      	pop	{r3, pc}
    2692:	bf00      	nop
    2694:	2000043c 	.word	0x2000043c

00002698 <next_pending>:
{
    2698:	b508      	push	{r3, lr}
	return (log_list_head_peek(&list) != NULL);
    269a:	4803      	ldr	r0, [pc, #12]	; (26a8 <next_pending+0x10>)
    269c:	f00f fa86 	bl	11bac <log_list_head_peek>
}
    26a0:	3800      	subs	r0, #0
    26a2:	bf18      	it	ne
    26a4:	2001      	movne	r0, #1
    26a6:	bd08      	pop	{r3, pc}
    26a8:	20001620 	.word	0x20001620

000026ac <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    26ac:	b530      	push	{r4, r5, lr}
    26ae:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    26b0:	2200      	movs	r2, #0
    26b2:	490f      	ldr	r1, [pc, #60]	; (26f0 <enable_logger+0x44>)
    26b4:	480f      	ldr	r0, [pc, #60]	; (26f4 <enable_logger+0x48>)
    26b6:	f013 fa2d 	bl	15b14 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    26ba:	4d0f      	ldr	r5, [pc, #60]	; (26f8 <enable_logger+0x4c>)
    26bc:	2200      	movs	r2, #0
    26be:	2300      	movs	r3, #0
    26c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    26c4:	2400      	movs	r4, #0
    26c6:	9404      	str	r4, [sp, #16]
    26c8:	230e      	movs	r3, #14
    26ca:	9303      	str	r3, [sp, #12]
    26cc:	9402      	str	r4, [sp, #8]
    26ce:	9401      	str	r4, [sp, #4]
    26d0:	9400      	str	r4, [sp, #0]
    26d2:	4b0a      	ldr	r3, [pc, #40]	; (26fc <enable_logger+0x50>)
    26d4:	f44f 7240 	mov.w	r2, #768	; 0x300
    26d8:	4909      	ldr	r1, [pc, #36]	; (2700 <enable_logger+0x54>)
    26da:	4628      	mov	r0, r5
    26dc:	f012 feb2 	bl	15444 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    26e0:	4908      	ldr	r1, [pc, #32]	; (2704 <enable_logger+0x58>)
    26e2:	4628      	mov	r0, r5
    26e4:	f00c feca 	bl	f47c <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    26e8:	4620      	mov	r0, r4
    26ea:	b009      	add	sp, #36	; 0x24
    26ec:	bd30      	pop	{r4, r5, pc}
    26ee:	bf00      	nop
    26f0:	00002689 	.word	0x00002689
    26f4:	20000540 	.word	0x20000540
    26f8:	20000578 	.word	0x20000578
    26fc:	00002d99 	.word	0x00002d99
    2700:	20003140 	.word	0x20003140
    2704:	00016060 	.word	0x00016060

00002708 <log_core_init>:
{
    2708:	b508      	push	{r3, lr}
	panic_mode = false;
    270a:	2300      	movs	r3, #0
    270c:	4a0b      	ldr	r2, [pc, #44]	; (273c <log_core_init+0x34>)
    270e:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    2710:	4a0b      	ldr	r2, [pc, #44]	; (2740 <log_core_init+0x38>)
    2712:	6013      	str	r3, [r2, #0]
		timestamp_func = default_get_timestamp;
    2714:	4b0b      	ldr	r3, [pc, #44]	; (2744 <log_core_init+0x3c>)
    2716:	4a0c      	ldr	r2, [pc, #48]	; (2748 <log_core_init+0x40>)
    2718:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    271a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    271e:	f000 fdbb 	bl	3298 <log_output_timestamp_freq_set>
		log_msg_pool_init();
    2722:	f000 fb9f 	bl	2e64 <log_msg_pool_init>
		log_list_init(&list);
    2726:	4809      	ldr	r0, [pc, #36]	; (274c <log_core_init+0x44>)
    2728:	f00f fa32 	bl	11b90 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    272c:	2304      	movs	r3, #4
    272e:	2228      	movs	r2, #40	; 0x28
    2730:	4907      	ldr	r1, [pc, #28]	; (2750 <log_core_init+0x48>)
    2732:	4808      	ldr	r0, [pc, #32]	; (2754 <log_core_init+0x4c>)
    2734:	f012 fe23 	bl	1537e <k_mem_slab_init>
}
    2738:	bd08      	pop	{r3, pc}
    273a:	bf00      	nop
    273c:	20002f76 	.word	0x20002f76
    2740:	20001618 	.word	0x20001618
    2744:	2000015c 	.word	0x2000015c
    2748:	00011bc5 	.word	0x00011bc5
    274c:	20001620 	.word	0x20001620
    2750:	200057c0 	.word	0x200057c0
    2754:	20001628 	.word	0x20001628

00002758 <log_init>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    2758:	4b18      	ldr	r3, [pc, #96]	; (27bc <log_init+0x64>)
    275a:	f3bf 8f5b 	dmb	ish
    275e:	e853 2f00 	ldrex	r2, [r3]
    2762:	1c51      	adds	r1, r2, #1
    2764:	e843 1000 	strex	r0, r1, [r3]
    2768:	2800      	cmp	r0, #0
    276a:	d1f8      	bne.n	275e <log_init+0x6>
    276c:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    2770:	bb1a      	cbnz	r2, 27ba <log_init+0x62>
{
    2772:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < log_backend_count_get(); i++) {
    2774:	2400      	movs	r4, #0
    2776:	e009      	b.n	278c <log_init+0x34>
					   backend->cb->ctx,
    2778:	4b11      	ldr	r3, [pc, #68]	; (27c0 <log_init+0x68>)
    277a:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    277e:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
    2780:	2204      	movs	r2, #4
    2782:	6819      	ldr	r1, [r3, #0]
    2784:	4628      	mov	r0, r5
    2786:	f000 fb4b 	bl	2e20 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    278a:	3401      	adds	r4, #1
    278c:	4b0d      	ldr	r3, [pc, #52]	; (27c4 <log_init+0x6c>)
    278e:	4a0c      	ldr	r2, [pc, #48]	; (27c0 <log_init+0x68>)
    2790:	1a9b      	subs	r3, r3, r2
    2792:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    2796:	da0f      	bge.n	27b8 <log_init+0x60>
		const struct log_backend *backend = log_backend_get(i);
    2798:	4626      	mov	r6, r4
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
    279a:	4d09      	ldr	r5, [pc, #36]	; (27c0 <log_init+0x68>)
    279c:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
    27a0:	7b2b      	ldrb	r3, [r5, #12]
    27a2:	2b00      	cmp	r3, #0
    27a4:	d0f1      	beq.n	278a <log_init+0x32>
			if (backend->api->init != NULL) {
    27a6:	0123      	lsls	r3, r4, #4
    27a8:	4a05      	ldr	r2, [pc, #20]	; (27c0 <log_init+0x68>)
    27aa:	58d3      	ldr	r3, [r2, r3]
    27ac:	699b      	ldr	r3, [r3, #24]
    27ae:	2b00      	cmp	r3, #0
    27b0:	d0e2      	beq.n	2778 <log_init+0x20>
				backend->api->init(backend);
    27b2:	4628      	mov	r0, r5
    27b4:	4798      	blx	r3
    27b6:	e7df      	b.n	2778 <log_init+0x20>
}
    27b8:	bd70      	pop	{r4, r5, r6, pc}
    27ba:	4770      	bx	lr
    27bc:	2000161c 	.word	0x2000161c
    27c0:	00015f30 	.word	0x00015f30
    27c4:	00015f50 	.word	0x00015f50

000027c8 <get_msg>:
{
    27c8:	b510      	push	{r4, lr}
    27ca:	f04f 0320 	mov.w	r3, #32
    27ce:	f3ef 8411 	mrs	r4, BASEPRI
    27d2:	f383 8812 	msr	BASEPRI_MAX, r3
    27d6:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
    27da:	4804      	ldr	r0, [pc, #16]	; (27ec <get_msg+0x24>)
    27dc:	f00f f9e8 	bl	11bb0 <log_list_head_get>
	__asm__ volatile(
    27e0:	f384 8811 	msr	BASEPRI, r4
    27e4:	f3bf 8f6f 	isb	sy
}
    27e8:	bd10      	pop	{r4, pc}
    27ea:	bf00      	nop
    27ec:	20001620 	.word	0x20001620

000027f0 <z_log_notify_backend_enabled>:
{
    27f0:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    27f2:	4b05      	ldr	r3, [pc, #20]	; (2808 <z_log_notify_backend_enabled+0x18>)
    27f4:	781b      	ldrb	r3, [r3, #0]
    27f6:	b11b      	cbz	r3, 2800 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
    27f8:	4b03      	ldr	r3, [pc, #12]	; (2808 <z_log_notify_backend_enabled+0x18>)
    27fa:	2201      	movs	r2, #1
    27fc:	701a      	strb	r2, [r3, #0]
}
    27fe:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
    2800:	4802      	ldr	r0, [pc, #8]	; (280c <z_log_notify_backend_enabled+0x1c>)
    2802:	f00d f829 	bl	f858 <z_impl_k_sem_give>
}
    2806:	e7f7      	b.n	27f8 <z_log_notify_backend_enabled+0x8>
    2808:	20002f75 	.word	0x20002f75
    280c:	2000043c 	.word	0x2000043c

00002810 <z_log_dropped>:
    2810:	4b0c      	ldr	r3, [pc, #48]	; (2844 <z_log_dropped+0x34>)
    2812:	f3bf 8f5b 	dmb	ish
    2816:	e853 2f00 	ldrex	r2, [r3]
    281a:	3201      	adds	r2, #1
    281c:	e843 2100 	strex	r1, r2, [r3]
    2820:	2900      	cmp	r1, #0
    2822:	d1f8      	bne.n	2816 <z_log_dropped+0x6>
    2824:	f3bf 8f5b 	dmb	ish
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2828:	4b07      	ldr	r3, [pc, #28]	; (2848 <z_log_dropped+0x38>)
    282a:	f3bf 8f5b 	dmb	ish
    282e:	e853 2f00 	ldrex	r2, [r3]
    2832:	3a01      	subs	r2, #1
    2834:	e843 2100 	strex	r1, r2, [r3]
    2838:	2900      	cmp	r1, #0
    283a:	d1f8      	bne.n	282e <z_log_dropped+0x1e>
    283c:	f3bf 8f5b 	dmb	ish
}
    2840:	4770      	bx	lr
    2842:	bf00      	nop
    2844:	20001618 	.word	0x20001618
    2848:	20001614 	.word	0x20001614

0000284c <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    284c:	4b06      	ldr	r3, [pc, #24]	; (2868 <z_log_dropped_read_and_clear+0x1c>)
}
    284e:	2000      	movs	r0, #0
    2850:	4602      	mov	r2, r0
    2852:	f3bf 8f5b 	dmb	ish
    2856:	e853 0f00 	ldrex	r0, [r3]
    285a:	e843 2100 	strex	r1, r2, [r3]
    285e:	2900      	cmp	r1, #0
    2860:	d1f9      	bne.n	2856 <z_log_dropped_read_and_clear+0xa>
    2862:	f3bf 8f5b 	dmb	ish
    2866:	4770      	bx	lr
    2868:	20001618 	.word	0x20001618

0000286c <dropped_notify>:
{
    286c:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    286e:	f7ff ffed 	bl	284c <z_log_dropped_read_and_clear>
    2872:	4605      	mov	r5, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
    2874:	2400      	movs	r4, #0
    2876:	e000      	b.n	287a <dropped_notify+0xe>
    2878:	3401      	adds	r4, #1
    287a:	4b0b      	ldr	r3, [pc, #44]	; (28a8 <dropped_notify+0x3c>)
    287c:	4a0b      	ldr	r2, [pc, #44]	; (28ac <dropped_notify+0x40>)
    287e:	1a9b      	subs	r3, r3, r2
    2880:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    2884:	da0f      	bge.n	28a6 <dropped_notify+0x3a>
    2886:	4809      	ldr	r0, [pc, #36]	; (28ac <dropped_notify+0x40>)
    2888:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    288c:	6843      	ldr	r3, [r0, #4]
    288e:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    2890:	2b00      	cmp	r3, #0
    2892:	d0f1      	beq.n	2878 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
    2894:	0123      	lsls	r3, r4, #4
    2896:	4a05      	ldr	r2, [pc, #20]	; (28ac <dropped_notify+0x40>)
    2898:	58d3      	ldr	r3, [r2, r3]
    289a:	691b      	ldr	r3, [r3, #16]
    289c:	2b00      	cmp	r3, #0
    289e:	d0eb      	beq.n	2878 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
    28a0:	4629      	mov	r1, r5
    28a2:	4798      	blx	r3
    28a4:	e7e8      	b.n	2878 <dropped_notify+0xc>
}
    28a6:	bd38      	pop	{r3, r4, r5, pc}
    28a8:	00015f50 	.word	0x00015f50
    28ac:	00015f30 	.word	0x00015f30

000028b0 <z_log_dropped_pending>:
	return dropped_cnt > 0;
    28b0:	4b03      	ldr	r3, [pc, #12]	; (28c0 <z_log_dropped_pending+0x10>)
    28b2:	6818      	ldr	r0, [r3, #0]
}
    28b4:	2800      	cmp	r0, #0
    28b6:	bfd4      	ite	le
    28b8:	2000      	movle	r0, #0
    28ba:	2001      	movgt	r0, #1
    28bc:	4770      	bx	lr
    28be:	bf00      	nop
    28c0:	20001618 	.word	0x20001618

000028c4 <z_log_strdup>:
{
    28c4:	b510      	push	{r4, lr}
    28c6:	b082      	sub	sp, #8
    28c8:	4604      	mov	r4, r0
	    is_rodata(str) || k_is_user_context()) {
    28ca:	f7ff feb9 	bl	2640 <is_rodata>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    28ce:	bb10      	cbnz	r0, 2916 <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    28d0:	2200      	movs	r2, #0
    28d2:	2300      	movs	r3, #0
    28d4:	a901      	add	r1, sp, #4
    28d6:	4811      	ldr	r0, [pc, #68]	; (291c <z_log_strdup+0x58>)
    28d8:	f00c fd7a 	bl	f3d0 <k_mem_slab_alloc>
	if (err != 0) {
    28dc:	b108      	cbz	r0, 28e2 <z_log_strdup+0x1e>
		return (char *)log_strdup_fail_msg;
    28de:	4c10      	ldr	r4, [pc, #64]	; (2920 <z_log_strdup+0x5c>)
    28e0:	e019      	b.n	2916 <z_log_strdup+0x52>
	(void)atomic_set(&dup->refcount, 1);
    28e2:	9b01      	ldr	r3, [sp, #4]
    28e4:	2201      	movs	r2, #1
    28e6:	f3bf 8f5b 	dmb	ish
    28ea:	e853 1f00 	ldrex	r1, [r3]
    28ee:	e843 2000 	strex	r0, r2, [r3]
    28f2:	2800      	cmp	r0, #0
    28f4:	d1f9      	bne.n	28ea <z_log_strdup+0x26>
    28f6:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    28fa:	221f      	movs	r2, #31
    28fc:	4621      	mov	r1, r4
    28fe:	9801      	ldr	r0, [sp, #4]
    2900:	3004      	adds	r0, #4
    2902:	f010 f869 	bl	129d8 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    2906:	9c01      	ldr	r4, [sp, #4]
    2908:	237e      	movs	r3, #126	; 0x7e
    290a:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    290e:	2300      	movs	r3, #0
    2910:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	return dup->buf;
    2914:	3404      	adds	r4, #4
}
    2916:	4620      	mov	r0, r4
    2918:	b002      	add	sp, #8
    291a:	bd10      	pop	{r4, pc}
    291c:	20001628 	.word	0x20001628
    2920:	00016068 	.word	0x00016068

00002924 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    2924:	b138      	cbz	r0, 2936 <log_is_strdup+0x12>
    2926:	4a07      	ldr	r2, [pc, #28]	; (2944 <log_is_strdup+0x20>)
    2928:	4290      	cmp	r0, r2
    292a:	d306      	bcc.n	293a <log_is_strdup+0x16>
    292c:	32a0      	adds	r2, #160	; 0xa0
    292e:	4290      	cmp	r0, r2
    2930:	d305      	bcc.n	293e <log_is_strdup+0x1a>
    2932:	2000      	movs	r0, #0
    2934:	4770      	bx	lr
    2936:	2000      	movs	r0, #0
    2938:	4770      	bx	lr
    293a:	2000      	movs	r0, #0
    293c:	4770      	bx	lr
    293e:	2001      	movs	r0, #1
}
    2940:	4770      	bx	lr
    2942:	bf00      	nop
    2944:	200057c0 	.word	0x200057c0

00002948 <detect_missed_strdup>:
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    2948:	7a03      	ldrb	r3, [r0, #8]
	if (!log_msg_is_std(msg)) {
    294a:	f013 0f01 	tst.w	r3, #1
    294e:	d000      	beq.n	2952 <detect_missed_strdup+0xa>
    2950:	4770      	bx	lr
{
    2952:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2956:	b083      	sub	sp, #12
    2958:	4606      	mov	r6, r0
	msg_str = log_msg_str_get(msg);
    295a:	f00f fa14 	bl	11d86 <log_msg_str_get>
    295e:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    2960:	4630      	mov	r0, r6
    2962:	f00f f9fb 	bl	11d5c <log_msg_nargs_get>
    2966:	4601      	mov	r1, r0
    2968:	4638      	mov	r0, r7
    296a:	f00f f92f 	bl	11bcc <z_log_get_s_mask>
    296e:	4605      	mov	r5, r0
	while (mask) {
    2970:	e004      	b.n	297c <detect_missed_strdup+0x34>
		mask &= ~BIT(idx);
    2972:	2301      	movs	r3, #1
    2974:	fa03 f404 	lsl.w	r4, r3, r4
    2978:	ea25 0504 	bic.w	r5, r5, r4
	while (mask) {
    297c:	b36d      	cbz	r5, 29da <detect_missed_strdup+0x92>
		idx = 31 - __builtin_clz(mask);
    297e:	fab5 f485 	clz	r4, r5
    2982:	f1c4 041f 	rsb	r4, r4, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    2986:	4621      	mov	r1, r4
    2988:	4630      	mov	r0, r6
    298a:	f00f f9ea 	bl	11d62 <log_msg_arg_get>
    298e:	4681      	mov	r9, r0
		if (!is_rodata(str) && !log_is_strdup(str) &&
    2990:	f7ff fe56 	bl	2640 <is_rodata>
    2994:	2800      	cmp	r0, #0
    2996:	d1ec      	bne.n	2972 <detect_missed_strdup+0x2a>
    2998:	4648      	mov	r0, r9
    299a:	f7ff ffc3 	bl	2924 <log_is_strdup>
    299e:	2800      	cmp	r0, #0
    29a0:	d1e7      	bne.n	2972 <detect_missed_strdup+0x2a>
    29a2:	4b0f      	ldr	r3, [pc, #60]	; (29e0 <detect_missed_strdup+0x98>)
    29a4:	4599      	cmp	r9, r3
    29a6:	d0e4      	beq.n	2972 <detect_missed_strdup+0x2a>
	return msg->hdr.ids.source_id;
    29a8:	8971      	ldrh	r1, [r6, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
    29aa:	f3c1 1189 	ubfx	r1, r1, #6, #10
    29ae:	f000 fa27 	bl	2e00 <log_source_name_get>
    29b2:	4602      	mov	r2, r0
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    29b4:	4b0b      	ldr	r3, [pc, #44]	; (29e4 <detect_missed_strdup+0x9c>)
    29b6:	490c      	ldr	r1, [pc, #48]	; (29e8 <detect_missed_strdup+0xa0>)
    29b8:	1a5b      	subs	r3, r3, r1
    29ba:	08db      	lsrs	r3, r3, #3
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    29bc:	2101      	movs	r1, #1
    29be:	f361 0802 	bfi	r8, r1, #0, #3
    29c2:	f36f 08c5 	bfc	r8, #3, #3
    29c6:	f363 188f 	bfi	r8, r3, #6, #10
    29ca:	f8ad 8000 	strh.w	r8, [sp]
    29ce:	463b      	mov	r3, r7
    29d0:	4621      	mov	r1, r4
    29d2:	4806      	ldr	r0, [pc, #24]	; (29ec <detect_missed_strdup+0xa4>)
    29d4:	f000 f8b2 	bl	2b3c <log_3>
    29d8:	e7cb      	b.n	2972 <detect_missed_strdup+0x2a>
}
    29da:	b003      	add	sp, #12
    29dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    29e0:	00016068 	.word	0x00016068
    29e4:	00015ed8 	.word	0x00015ed8
    29e8:	00015ea8 	.word	0x00015ea8
    29ec:	00016084 	.word	0x00016084

000029f0 <msg_process>:
{
    29f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    29f2:	4606      	mov	r6, r0
	if (!bypass) {
    29f4:	bb19      	cbnz	r1, 2a3e <msg_process+0x4e>
		    !panic_mode) {
    29f6:	4b14      	ldr	r3, [pc, #80]	; (2a48 <msg_process+0x58>)
    29f8:	781b      	ldrb	r3, [r3, #0]
		if (!IS_ENABLED(CONFIG_LOG2) &&
    29fa:	b10b      	cbz	r3, 2a00 <msg_process+0x10>
{
    29fc:	2400      	movs	r4, #0
    29fe:	e003      	b.n	2a08 <msg_process+0x18>
			detect_missed_strdup(msg.msg);
    2a00:	f7ff ffa2 	bl	2948 <detect_missed_strdup>
    2a04:	e7fa      	b.n	29fc <msg_process+0xc>
		for (int i = 0; i < log_backend_count_get(); i++) {
    2a06:	3401      	adds	r4, #1
    2a08:	4b10      	ldr	r3, [pc, #64]	; (2a4c <msg_process+0x5c>)
    2a0a:	4a11      	ldr	r2, [pc, #68]	; (2a50 <msg_process+0x60>)
    2a0c:	1a9b      	subs	r3, r3, r2
    2a0e:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    2a12:	da14      	bge.n	2a3e <msg_process+0x4e>
	return &__log_backends_start[idx];
    2a14:	4d0e      	ldr	r5, [pc, #56]	; (2a50 <msg_process+0x60>)
    2a16:	eb05 1504 	add.w	r5, r5, r4, lsl #4
	return backend->cb->active;
    2a1a:	686b      	ldr	r3, [r5, #4]
    2a1c:	795b      	ldrb	r3, [r3, #5]
			if (log_backend_is_active(backend) &&
    2a1e:	2b00      	cmp	r3, #0
    2a20:	d0f1      	beq.n	2a06 <msg_process+0x16>
			    msg_filter_check(backend, msg)) {
    2a22:	4631      	mov	r1, r6
    2a24:	4628      	mov	r0, r5
    2a26:	f00f f8cb 	bl	11bc0 <msg_filter_check>
			if (log_backend_is_active(backend) &&
    2a2a:	2800      	cmp	r0, #0
    2a2c:	d0eb      	beq.n	2a06 <msg_process+0x16>
	backend->api->put(backend, msg);
    2a2e:	0127      	lsls	r7, r4, #4
    2a30:	4b07      	ldr	r3, [pc, #28]	; (2a50 <msg_process+0x60>)
    2a32:	59db      	ldr	r3, [r3, r7]
    2a34:	685b      	ldr	r3, [r3, #4]
    2a36:	4631      	mov	r1, r6
    2a38:	4628      	mov	r0, r5
    2a3a:	4798      	blx	r3
}
    2a3c:	e7e3      	b.n	2a06 <msg_process+0x16>
			log_msg_put(msg.msg);
    2a3e:	4630      	mov	r0, r6
    2a40:	f00f f9a3 	bl	11d8a <log_msg_put>
}
    2a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a46:	bf00      	nop
    2a48:	20002f76 	.word	0x20002f76
    2a4c:	00015f50 	.word	0x00015f50
    2a50:	00015f30 	.word	0x00015f30

00002a54 <z_impl_log_process>:
{
    2a54:	b510      	push	{r4, lr}
    2a56:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    2a58:	4b10      	ldr	r3, [pc, #64]	; (2a9c <z_impl_log_process+0x48>)
    2a5a:	781b      	ldrb	r3, [r3, #0]
    2a5c:	b903      	cbnz	r3, 2a60 <z_impl_log_process+0xc>
    2a5e:	b1c8      	cbz	r0, 2a94 <z_impl_log_process+0x40>
	msg = get_msg();
    2a60:	f7ff feb2 	bl	27c8 <get_msg>
	if (msg.msg) {
    2a64:	4602      	mov	r2, r0
    2a66:	b178      	cbz	r0, 2a88 <z_impl_log_process+0x34>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2a68:	4b0d      	ldr	r3, [pc, #52]	; (2aa0 <z_impl_log_process+0x4c>)
    2a6a:	f3bf 8f5b 	dmb	ish
    2a6e:	e853 1f00 	ldrex	r1, [r3]
    2a72:	3901      	subs	r1, #1
    2a74:	e843 1000 	strex	r0, r1, [r3]
    2a78:	2800      	cmp	r0, #0
    2a7a:	d1f8      	bne.n	2a6e <z_impl_log_process+0x1a>
    2a7c:	f3bf 8f5b 	dmb	ish
		msg_process(msg, bypass);
    2a80:	4621      	mov	r1, r4
    2a82:	4610      	mov	r0, r2
    2a84:	f7ff ffb4 	bl	29f0 <msg_process>
	if (!bypass && z_log_dropped_pending()) {
    2a88:	b914      	cbnz	r4, 2a90 <z_impl_log_process+0x3c>
    2a8a:	f7ff ff11 	bl	28b0 <z_log_dropped_pending>
    2a8e:	b910      	cbnz	r0, 2a96 <z_impl_log_process+0x42>
	return next_pending();
    2a90:	f7ff fe02 	bl	2698 <next_pending>
}
    2a94:	bd10      	pop	{r4, pc}
		dropped_notify();
    2a96:	f7ff fee9 	bl	286c <dropped_notify>
    2a9a:	e7f9      	b.n	2a90 <z_impl_log_process+0x3c>
    2a9c:	20002f75 	.word	0x20002f75
    2aa0:	20001614 	.word	0x20001614

00002aa4 <z_log_msg_post_finalize>:
{
    2aa4:	b510      	push	{r4, lr}
    2aa6:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    2aa8:	4b1f      	ldr	r3, [pc, #124]	; (2b28 <z_log_msg_post_finalize+0x84>)
    2aaa:	f3bf 8f5b 	dmb	ish
    2aae:	e853 2f00 	ldrex	r2, [r3]
    2ab2:	3201      	adds	r2, #1
    2ab4:	e843 2100 	strex	r1, r2, [r3]
    2ab8:	2900      	cmp	r1, #0
    2aba:	d1f8      	bne.n	2aae <z_log_msg_post_finalize+0xa>
    2abc:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    2ac0:	4b1a      	ldr	r3, [pc, #104]	; (2b2c <z_log_msg_post_finalize+0x88>)
    2ac2:	781b      	ldrb	r3, [r3, #0]
    2ac4:	b963      	cbnz	r3, 2ae0 <z_log_msg_post_finalize+0x3c>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    2ac6:	4b1a      	ldr	r3, [pc, #104]	; (2b30 <z_log_msg_post_finalize+0x8c>)
    2ac8:	681b      	ldr	r3, [r3, #0]
    2aca:	b11b      	cbz	r3, 2ad4 <z_log_msg_post_finalize+0x30>
    2acc:	4a16      	ldr	r2, [pc, #88]	; (2b28 <z_log_msg_post_finalize+0x84>)
    2ace:	6812      	ldr	r2, [r2, #0]
    2ad0:	2a01      	cmp	r2, #1
    2ad2:	d015      	beq.n	2b00 <z_log_msg_post_finalize+0x5c>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    2ad4:	4a14      	ldr	r2, [pc, #80]	; (2b28 <z_log_msg_post_finalize+0x84>)
    2ad6:	6812      	ldr	r2, [r2, #0]
    2ad8:	2a0a      	cmp	r2, #10
    2ada:	d01c      	beq.n	2b16 <z_log_msg_post_finalize+0x72>
}
    2adc:	b002      	add	sp, #8
    2ade:	bd10      	pop	{r4, pc}
	__asm__ volatile(
    2ae0:	f04f 0320 	mov.w	r3, #32
    2ae4:	f3ef 8411 	mrs	r4, BASEPRI
    2ae8:	f383 8812 	msr	BASEPRI_MAX, r3
    2aec:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    2af0:	2000      	movs	r0, #0
    2af2:	f7ff ffaf 	bl	2a54 <z_impl_log_process>
	__asm__ volatile(
    2af6:	f384 8811 	msr	BASEPRI, r4
    2afa:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2afe:	e7ed      	b.n	2adc <z_log_msg_post_finalize+0x38>
	z_impl_k_timer_start(timer, duration, period);
    2b00:	2200      	movs	r2, #0
    2b02:	2300      	movs	r3, #0
    2b04:	e9cd 2300 	strd	r2, r3, [sp]
    2b08:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2b0c:	2300      	movs	r3, #0
    2b0e:	4809      	ldr	r0, [pc, #36]	; (2b34 <z_log_msg_post_finalize+0x90>)
    2b10:	f00d fe5a 	bl	107c8 <z_impl_k_timer_start>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    2b14:	e7e2      	b.n	2adc <z_log_msg_post_finalize+0x38>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    2b16:	2b00      	cmp	r3, #0
    2b18:	d0e0      	beq.n	2adc <z_log_msg_post_finalize+0x38>
	z_impl_k_timer_stop(timer);
    2b1a:	4806      	ldr	r0, [pc, #24]	; (2b34 <z_log_msg_post_finalize+0x90>)
    2b1c:	f013 f806 	bl	15b2c <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    2b20:	4805      	ldr	r0, [pc, #20]	; (2b38 <z_log_msg_post_finalize+0x94>)
    2b22:	f00c fe99 	bl	f858 <z_impl_k_sem_give>
}
    2b26:	e7d9      	b.n	2adc <z_log_msg_post_finalize+0x38>
    2b28:	20001614 	.word	0x20001614
    2b2c:	20002f76 	.word	0x20002f76
    2b30:	20001644 	.word	0x20001644
    2b34:	20000540 	.word	0x20000540
    2b38:	2000043c 	.word	0x2000043c

00002b3c <log_3>:
{
    2b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2b40:	4680      	mov	r8, r0
    2b42:	460f      	mov	r7, r1
    2b44:	4616      	mov	r6, r2
    2b46:	461d      	mov	r5, r3
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    2b48:	f000 f9b0 	bl	2eac <log_msg_chunk_alloc>

	if (msg != NULL) {
    2b4c:	4604      	mov	r4, r0
    2b4e:	b140      	cbz	r0, 2b62 <log_3+0x26>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
    2b50:	2301      	movs	r3, #1
    2b52:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    2b54:	2200      	movs	r2, #0
    2b56:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    2b58:	f04f 0300 	mov.w	r3, #0
    2b5c:	f362 0300 	bfi	r3, r2, #0, #1
    2b60:	7203      	strb	r3, [r0, #8]
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
    2b62:	b14c      	cbz	r4, 2b78 <log_3+0x3c>
		msg->str = str;
    2b64:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = 3U;
    2b68:	7a63      	ldrb	r3, [r4, #9]
    2b6a:	2203      	movs	r2, #3
    2b6c:	f362 1307 	bfi	r3, r2, #4, #4
    2b70:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    2b72:	6167      	str	r7, [r4, #20]
		msg->payload.single.args[1] = arg2;
    2b74:	61a6      	str	r6, [r4, #24]
		msg->payload.single.args[2] = arg3;
    2b76:	61e5      	str	r5, [r4, #28]
		if (msg == NULL) {
    2b78:	b1c4      	cbz	r4, 2bac <log_3+0x70>
	msg->hdr.ids = src_level;
    2b7a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    2b7e:	8163      	strh	r3, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    2b80:	4b0b      	ldr	r3, [pc, #44]	; (2bb0 <log_3+0x74>)
    2b82:	681b      	ldr	r3, [r3, #0]
    2b84:	4798      	blx	r3
    2b86:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    2b88:	f04f 0320 	mov.w	r3, #32
    2b8c:	f3ef 8511 	mrs	r5, BASEPRI
    2b90:	f383 8812 	msr	BASEPRI_MAX, r3
    2b94:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    2b98:	4621      	mov	r1, r4
    2b9a:	4806      	ldr	r0, [pc, #24]	; (2bb4 <log_3+0x78>)
    2b9c:	f00e fffc 	bl	11b98 <log_list_add_tail>
	__asm__ volatile(
    2ba0:	f385 8811 	msr	BASEPRI, r5
    2ba4:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    2ba8:	f7ff ff7c 	bl	2aa4 <z_log_msg_post_finalize>
}
    2bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2bb0:	2000015c 	.word	0x2000015c
    2bb4:	20001620 	.word	0x20001620

00002bb8 <log_1>:
{
    2bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2bba:	4606      	mov	r6, r0
    2bbc:	460d      	mov	r5, r1
    2bbe:	4617      	mov	r7, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    2bc0:	f000 f974 	bl	2eac <log_msg_chunk_alloc>
	if (msg != NULL) {
    2bc4:	4604      	mov	r4, r0
    2bc6:	b140      	cbz	r0, 2bda <log_1+0x22>
		msg->hdr.ref_cnt = 1;
    2bc8:	2301      	movs	r3, #1
    2bca:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    2bcc:	2100      	movs	r1, #0
    2bce:	8101      	strh	r1, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    2bd0:	f04f 0300 	mov.w	r3, #0
    2bd4:	f361 0300 	bfi	r3, r1, #0, #1
    2bd8:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
    2bda:	b134      	cbz	r4, 2bea <log_1+0x32>
		msg->str = str;
    2bdc:	6126      	str	r6, [r4, #16]
		msg->hdr.params.std.nargs = 1U;
    2bde:	7a63      	ldrb	r3, [r4, #9]
    2be0:	2201      	movs	r2, #1
    2be2:	f362 1307 	bfi	r3, r2, #4, #4
    2be6:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    2be8:	6165      	str	r5, [r4, #20]
		if (msg == NULL) {
    2bea:	b1b4      	cbz	r4, 2c1a <log_1+0x62>
	msg->hdr.ids = src_level;
    2bec:	8167      	strh	r7, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    2bee:	4b0b      	ldr	r3, [pc, #44]	; (2c1c <log_1+0x64>)
    2bf0:	681b      	ldr	r3, [r3, #0]
    2bf2:	4798      	blx	r3
    2bf4:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    2bf6:	f04f 0320 	mov.w	r3, #32
    2bfa:	f3ef 8511 	mrs	r5, BASEPRI
    2bfe:	f383 8812 	msr	BASEPRI_MAX, r3
    2c02:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    2c06:	4621      	mov	r1, r4
    2c08:	4805      	ldr	r0, [pc, #20]	; (2c20 <log_1+0x68>)
    2c0a:	f00e ffc5 	bl	11b98 <log_list_add_tail>
	__asm__ volatile(
    2c0e:	f385 8811 	msr	BASEPRI, r5
    2c12:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    2c16:	f7ff ff45 	bl	2aa4 <z_log_msg_post_finalize>
}
    2c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2c1c:	2000015c 	.word	0x2000015c
    2c20:	20001620 	.word	0x20001620

00002c24 <log_2>:
{
    2c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2c28:	4607      	mov	r7, r0
    2c2a:	460e      	mov	r6, r1
    2c2c:	4615      	mov	r5, r2
    2c2e:	4698      	mov	r8, r3
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    2c30:	f000 f93c 	bl	2eac <log_msg_chunk_alloc>
	if (msg != NULL) {
    2c34:	4604      	mov	r4, r0
    2c36:	b140      	cbz	r0, 2c4a <log_2+0x26>
		msg->hdr.ref_cnt = 1;
    2c38:	2301      	movs	r3, #1
    2c3a:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    2c3c:	2200      	movs	r2, #0
    2c3e:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    2c40:	f04f 0300 	mov.w	r3, #0
    2c44:	f362 0300 	bfi	r3, r2, #0, #1
    2c48:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
    2c4a:	b13c      	cbz	r4, 2c5c <log_2+0x38>
		msg->str = str;
    2c4c:	6127      	str	r7, [r4, #16]
		msg->hdr.params.std.nargs = 2U;
    2c4e:	7a63      	ldrb	r3, [r4, #9]
    2c50:	2202      	movs	r2, #2
    2c52:	f362 1307 	bfi	r3, r2, #4, #4
    2c56:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    2c58:	6166      	str	r6, [r4, #20]
		msg->payload.single.args[1] = arg2;
    2c5a:	61a5      	str	r5, [r4, #24]
		if (msg == NULL) {
    2c5c:	b1bc      	cbz	r4, 2c8e <log_2+0x6a>
	msg->hdr.ids = src_level;
    2c5e:	f8a4 800a 	strh.w	r8, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    2c62:	4b0c      	ldr	r3, [pc, #48]	; (2c94 <log_2+0x70>)
    2c64:	681b      	ldr	r3, [r3, #0]
    2c66:	4798      	blx	r3
    2c68:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    2c6a:	f04f 0320 	mov.w	r3, #32
    2c6e:	f3ef 8511 	mrs	r5, BASEPRI
    2c72:	f383 8812 	msr	BASEPRI_MAX, r3
    2c76:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    2c7a:	4621      	mov	r1, r4
    2c7c:	4806      	ldr	r0, [pc, #24]	; (2c98 <log_2+0x74>)
    2c7e:	f00e ff8b 	bl	11b98 <log_list_add_tail>
	__asm__ volatile(
    2c82:	f385 8811 	msr	BASEPRI, r5
    2c86:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    2c8a:	f7ff ff0b 	bl	2aa4 <z_log_msg_post_finalize>
}
    2c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2c92:	bf00      	nop
    2c94:	2000015c 	.word	0x2000015c
    2c98:	20001620 	.word	0x20001620

00002c9c <log_n>:
{
    2c9c:	b538      	push	{r3, r4, r5, lr}
    2c9e:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
    2ca0:	f00f f8b7 	bl	11e12 <log_msg_create_n>
		if (msg == NULL) {
    2ca4:	b1b8      	cbz	r0, 2cd6 <log_n+0x3a>
    2ca6:	4605      	mov	r5, r0
	msg->hdr.ids = src_level;
    2ca8:	8144      	strh	r4, [r0, #10]
	msg->hdr.timestamp = timestamp_func();
    2caa:	4b0b      	ldr	r3, [pc, #44]	; (2cd8 <log_n+0x3c>)
    2cac:	681b      	ldr	r3, [r3, #0]
    2cae:	4798      	blx	r3
    2cb0:	60e8      	str	r0, [r5, #12]
	__asm__ volatile(
    2cb2:	f04f 0320 	mov.w	r3, #32
    2cb6:	f3ef 8411 	mrs	r4, BASEPRI
    2cba:	f383 8812 	msr	BASEPRI_MAX, r3
    2cbe:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    2cc2:	4629      	mov	r1, r5
    2cc4:	4805      	ldr	r0, [pc, #20]	; (2cdc <log_n+0x40>)
    2cc6:	f00e ff67 	bl	11b98 <log_list_add_tail>
	__asm__ volatile(
    2cca:	f384 8811 	msr	BASEPRI, r4
    2cce:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    2cd2:	f7ff fee7 	bl	2aa4 <z_log_msg_post_finalize>
}
    2cd6:	bd38      	pop	{r3, r4, r5, pc}
    2cd8:	2000015c 	.word	0x2000015c
    2cdc:	20001620 	.word	0x20001620

00002ce0 <log_0>:
{
    2ce0:	b570      	push	{r4, r5, r6, lr}
    2ce2:	4605      	mov	r5, r0
    2ce4:	460e      	mov	r6, r1
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    2ce6:	f000 f8e1 	bl	2eac <log_msg_chunk_alloc>
	if (msg != NULL) {
    2cea:	4604      	mov	r4, r0
    2cec:	b140      	cbz	r0, 2d00 <log_0+0x20>
		msg->hdr.ref_cnt = 1;
    2cee:	2301      	movs	r3, #1
    2cf0:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    2cf2:	2200      	movs	r2, #0
    2cf4:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    2cf6:	f04f 0300 	mov.w	r3, #0
    2cfa:	f362 0300 	bfi	r3, r2, #0, #1
    2cfe:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
    2d00:	b104      	cbz	r4, 2d04 <log_0+0x24>
		msg->str = str;
    2d02:	6125      	str	r5, [r4, #16]
		if (msg == NULL) {
    2d04:	b1b4      	cbz	r4, 2d34 <log_0+0x54>
	msg->hdr.ids = src_level;
    2d06:	8166      	strh	r6, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    2d08:	4b0b      	ldr	r3, [pc, #44]	; (2d38 <log_0+0x58>)
    2d0a:	681b      	ldr	r3, [r3, #0]
    2d0c:	4798      	blx	r3
    2d0e:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    2d10:	f04f 0320 	mov.w	r3, #32
    2d14:	f3ef 8511 	mrs	r5, BASEPRI
    2d18:	f383 8812 	msr	BASEPRI_MAX, r3
    2d1c:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    2d20:	4621      	mov	r1, r4
    2d22:	4806      	ldr	r0, [pc, #24]	; (2d3c <log_0+0x5c>)
    2d24:	f00e ff38 	bl	11b98 <log_list_add_tail>
	__asm__ volatile(
    2d28:	f385 8811 	msr	BASEPRI, r5
    2d2c:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    2d30:	f7ff feb8 	bl	2aa4 <z_log_msg_post_finalize>
}
    2d34:	bd70      	pop	{r4, r5, r6, pc}
    2d36:	bf00      	nop
    2d38:	2000015c 	.word	0x2000015c
    2d3c:	20001620 	.word	0x20001620

00002d40 <z_impl_log_panic>:
	if (panic_mode) {
    2d40:	4b12      	ldr	r3, [pc, #72]	; (2d8c <z_impl_log_panic+0x4c>)
    2d42:	781b      	ldrb	r3, [r3, #0]
    2d44:	b103      	cbz	r3, 2d48 <z_impl_log_panic+0x8>
    2d46:	4770      	bx	lr
{
    2d48:	b510      	push	{r4, lr}
	log_init();
    2d4a:	f7ff fd05 	bl	2758 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    2d4e:	2400      	movs	r4, #0
    2d50:	e000      	b.n	2d54 <z_impl_log_panic+0x14>
    2d52:	3401      	adds	r4, #1
    2d54:	4b0e      	ldr	r3, [pc, #56]	; (2d90 <z_impl_log_panic+0x50>)
    2d56:	4a0f      	ldr	r2, [pc, #60]	; (2d94 <z_impl_log_panic+0x54>)
    2d58:	1a9b      	subs	r3, r3, r2
    2d5a:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    2d5e:	da0c      	bge.n	2d7a <z_impl_log_panic+0x3a>
	return &__log_backends_start[idx];
    2d60:	480c      	ldr	r0, [pc, #48]	; (2d94 <z_impl_log_panic+0x54>)
    2d62:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
    2d66:	6843      	ldr	r3, [r0, #4]
    2d68:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    2d6a:	2b00      	cmp	r3, #0
    2d6c:	d0f1      	beq.n	2d52 <z_impl_log_panic+0x12>
	backend->api->panic(backend);
    2d6e:	0123      	lsls	r3, r4, #4
    2d70:	4a08      	ldr	r2, [pc, #32]	; (2d94 <z_impl_log_panic+0x54>)
    2d72:	58d3      	ldr	r3, [r2, r3]
    2d74:	695b      	ldr	r3, [r3, #20]
    2d76:	4798      	blx	r3
}
    2d78:	e7eb      	b.n	2d52 <z_impl_log_panic+0x12>
    2d7a:	2000      	movs	r0, #0
    2d7c:	f7ff fe6a 	bl	2a54 <z_impl_log_process>
		while (log_process(false) == true) {
    2d80:	2800      	cmp	r0, #0
    2d82:	d1fa      	bne.n	2d7a <z_impl_log_panic+0x3a>
	panic_mode = true;
    2d84:	4b01      	ldr	r3, [pc, #4]	; (2d8c <z_impl_log_panic+0x4c>)
    2d86:	2201      	movs	r2, #1
    2d88:	701a      	strb	r2, [r3, #0]
}
    2d8a:	bd10      	pop	{r4, pc}
    2d8c:	20002f76 	.word	0x20002f76
    2d90:	00015f50 	.word	0x00015f50
    2d94:	00015f30 	.word	0x00015f30

00002d98 <log_process_thread_func>:
{
    2d98:	b508      	push	{r3, lr}
	log_init();
    2d9a:	f7ff fcdd 	bl	2758 <log_init>
	return z_impl_z_current_get();
    2d9e:	f00d faf9 	bl	10394 <z_impl_z_current_get>
	thread_set(k_current_get());
    2da2:	f7ff fc5d 	bl	2660 <thread_set>
    2da6:	e006      	b.n	2db6 <log_process_thread_func+0x1e>
	return z_impl_k_sem_take(sem, timeout);
    2da8:	f04f 32ff 	mov.w	r2, #4294967295
    2dac:	f04f 33ff 	mov.w	r3, #4294967295
    2db0:	4804      	ldr	r0, [pc, #16]	; (2dc4 <log_process_thread_func+0x2c>)
    2db2:	f00c fd75 	bl	f8a0 <z_impl_k_sem_take>
    2db6:	2000      	movs	r0, #0
    2db8:	f7ff fe4c 	bl	2a54 <z_impl_log_process>
		if (log_process(false) == false) {
    2dbc:	2800      	cmp	r0, #0
    2dbe:	d1fa      	bne.n	2db6 <log_process_thread_func+0x1e>
    2dc0:	e7f2      	b.n	2da8 <log_process_thread_func+0x10>
    2dc2:	bf00      	nop
    2dc4:	2000043c 	.word	0x2000043c

00002dc8 <log_free>:
{
    2dc8:	b500      	push	{lr}
    2dca:	b083      	sub	sp, #12
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    2dcc:	3804      	subs	r0, #4
    2dce:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2dd0:	f3bf 8f5b 	dmb	ish
    2dd4:	e850 3f00 	ldrex	r3, [r0]
    2dd8:	1e5a      	subs	r2, r3, #1
    2dda:	e840 2100 	strex	r1, r2, [r0]
    2dde:	2900      	cmp	r1, #0
    2de0:	d1f8      	bne.n	2dd4 <log_free+0xc>
    2de2:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    2de6:	2b01      	cmp	r3, #1
    2de8:	d002      	beq.n	2df0 <log_free+0x28>
}
    2dea:	b003      	add	sp, #12
    2dec:	f85d fb04 	ldr.w	pc, [sp], #4
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    2df0:	a901      	add	r1, sp, #4
    2df2:	4802      	ldr	r0, [pc, #8]	; (2dfc <log_free+0x34>)
    2df4:	f012 fad1 	bl	1539a <k_mem_slab_free>
}
    2df8:	e7f7      	b.n	2dea <log_free+0x22>
    2dfa:	bf00      	nop
    2dfc:	20001628 	.word	0x20001628

00002e00 <log_source_name_get>:
	return log_sources_count();
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    2e00:	4b05      	ldr	r3, [pc, #20]	; (2e18 <log_source_name_get+0x18>)
    2e02:	4a06      	ldr	r2, [pc, #24]	; (2e1c <log_source_name_get+0x1c>)
    2e04:	1a9b      	subs	r3, r3, r2
    2e06:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    2e0a:	d202      	bcs.n	2e12 <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
    2e0c:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    2e10:	4770      	bx	lr
    2e12:	2000      	movs	r0, #0
}
    2e14:	4770      	bx	lr
    2e16:	bf00      	nop
    2e18:	00015f30 	.word	0x00015f30
    2e1c:	00015ea8 	.word	0x00015ea8

00002e20 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    2e20:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    2e22:	4b07      	ldr	r3, [pc, #28]	; (2e40 <log_backend_enable+0x20>)
    2e24:	1ac3      	subs	r3, r0, r3
    2e26:	111b      	asrs	r3, r3, #4
    2e28:	3301      	adds	r3, #1
	backend->cb->id = id;
    2e2a:	6842      	ldr	r2, [r0, #4]
    2e2c:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
    2e2e:	6843      	ldr	r3, [r0, #4]
    2e30:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    2e32:	6843      	ldr	r3, [r0, #4]
    2e34:	2201      	movs	r2, #1
    2e36:	715a      	strb	r2, [r3, #5]

	log_backend_id_set(backend, id);
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    2e38:	f7ff fcda 	bl	27f0 <z_log_notify_backend_enabled>
}
    2e3c:	bd08      	pop	{r3, pc}
    2e3e:	bf00      	nop
    2e40:	00015f30 	.word	0x00015f30

00002e44 <cont_free>:
{
	atomic_inc(&msg->hdr.ref_cnt);
}

static void cont_free(struct log_msg_cont *cont)
{
    2e44:	b510      	push	{r4, lr}
    2e46:	b082      	sub	sp, #8
    2e48:	9001      	str	r0, [sp, #4]
	struct log_msg_cont *next;

	while (cont != NULL) {
    2e4a:	9b01      	ldr	r3, [sp, #4]
    2e4c:	b133      	cbz	r3, 2e5c <cont_free+0x18>
		next = cont->next;
    2e4e:	681c      	ldr	r4, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    2e50:	a901      	add	r1, sp, #4
    2e52:	4803      	ldr	r0, [pc, #12]	; (2e60 <cont_free+0x1c>)
    2e54:	f012 faa1 	bl	1539a <k_mem_slab_free>
		cont = next;
    2e58:	9401      	str	r4, [sp, #4]
    2e5a:	e7f6      	b.n	2e4a <cont_free+0x6>
	}
}
    2e5c:	b002      	add	sp, #8
    2e5e:	bd10      	pop	{r4, pc}
    2e60:	20001648 	.word	0x20001648

00002e64 <log_msg_pool_init>:
{
    2e64:	b508      	push	{r3, lr}
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    2e66:	2320      	movs	r3, #32
    2e68:	461a      	mov	r2, r3
    2e6a:	4902      	ldr	r1, [pc, #8]	; (2e74 <log_msg_pool_init+0x10>)
    2e6c:	4802      	ldr	r0, [pc, #8]	; (2e78 <log_msg_pool_init+0x14>)
    2e6e:	f012 fa86 	bl	1537e <k_mem_slab_init>
}
    2e72:	bd08      	pop	{r3, pc}
    2e74:	20005860 	.word	0x20005860
    2e78:	20001648 	.word	0x20001648

00002e7c <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    2e7c:	b510      	push	{r4, lr}
    2e7e:	b082      	sub	sp, #8
	union log_msg_chunk *msg = NULL;
    2e80:	2300      	movs	r3, #0
    2e82:	9301      	str	r3, [sp, #4]
    2e84:	2001      	movs	r0, #1
    2e86:	f7ff fde5 	bl	2a54 <z_impl_log_process>
    2e8a:	4604      	mov	r4, r0
	int err;

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
    2e8c:	f7ff fcc0 	bl	2810 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    2e90:	2200      	movs	r2, #0
    2e92:	2300      	movs	r3, #0
    2e94:	a901      	add	r1, sp, #4
    2e96:	4804      	ldr	r0, [pc, #16]	; (2ea8 <log_msg_no_space_handle+0x2c>)
    2e98:	f00c fa9a 	bl	f3d0 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    2e9c:	b108      	cbz	r0, 2ea2 <log_msg_no_space_handle+0x26>
    2e9e:	2c00      	cmp	r4, #0
    2ea0:	d1f0      	bne.n	2e84 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
    2ea2:	9801      	ldr	r0, [sp, #4]
    2ea4:	b002      	add	sp, #8
    2ea6:	bd10      	pop	{r4, pc}
    2ea8:	20001648 	.word	0x20001648

00002eac <log_msg_chunk_alloc>:
{
    2eac:	b500      	push	{lr}
    2eae:	b083      	sub	sp, #12
	union log_msg_chunk *msg = NULL;
    2eb0:	2300      	movs	r3, #0
    2eb2:	9301      	str	r3, [sp, #4]
		   block_on_alloc()
    2eb4:	f00e feab 	bl	11c0e <block_on_alloc>
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    2eb8:	b150      	cbz	r0, 2ed0 <log_msg_chunk_alloc+0x24>
    2eba:	2200      	movs	r2, #0
    2ebc:	2300      	movs	r3, #0
    2ebe:	a901      	add	r1, sp, #4
    2ec0:	4807      	ldr	r0, [pc, #28]	; (2ee0 <log_msg_chunk_alloc+0x34>)
    2ec2:	f00c fa85 	bl	f3d0 <k_mem_slab_alloc>
	if (err != 0) {
    2ec6:	b930      	cbnz	r0, 2ed6 <log_msg_chunk_alloc+0x2a>
}
    2ec8:	9801      	ldr	r0, [sp, #4]
    2eca:	b003      	add	sp, #12
    2ecc:	f85d fb04 	ldr.w	pc, [sp], #4
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    2ed0:	2200      	movs	r2, #0
    2ed2:	2300      	movs	r3, #0
    2ed4:	e7f3      	b.n	2ebe <log_msg_chunk_alloc+0x12>
		msg = log_msg_no_space_handle();
    2ed6:	f7ff ffd1 	bl	2e7c <log_msg_no_space_handle>
    2eda:	9001      	str	r0, [sp, #4]
    2edc:	e7f4      	b.n	2ec8 <log_msg_chunk_alloc+0x1c>
    2ede:	bf00      	nop
    2ee0:	20001648 	.word	0x20001648

00002ee4 <msg_free>:
{
    2ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ee6:	b083      	sub	sp, #12
    2ee8:	9001      	str	r0, [sp, #4]
	uint32_t nargs = log_msg_nargs_get(msg);
    2eea:	4604      	mov	r4, r0
    2eec:	f00e ff36 	bl	11d5c <log_msg_nargs_get>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    2ef0:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg) && nargs) {
    2ef2:	f013 0f01 	tst.w	r3, #1
    2ef6:	d101      	bne.n	2efc <msg_free+0x18>
    2ef8:	4606      	mov	r6, r0
    2efa:	bb50      	cbnz	r0, 2f52 <msg_free+0x6e>
	if (msg->hdr.params.generic.ext == 1) {
    2efc:	9b01      	ldr	r3, [sp, #4]
    2efe:	7a1a      	ldrb	r2, [r3, #8]
    2f00:	f012 0f02 	tst.w	r2, #2
    2f04:	d128      	bne.n	2f58 <msg_free+0x74>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    2f06:	a901      	add	r1, sp, #4
    2f08:	4815      	ldr	r0, [pc, #84]	; (2f60 <msg_free+0x7c>)
    2f0a:	f012 fa46 	bl	1539a <k_mem_slab_free>
}
    2f0e:	b003      	add	sp, #12
    2f10:	bdf0      	pop	{r4, r5, r6, r7, pc}
					smask = z_log_get_s_mask(
    2f12:	9801      	ldr	r0, [sp, #4]
    2f14:	f00e ff37 	bl	11d86 <log_msg_str_get>
    2f18:	4631      	mov	r1, r6
    2f1a:	f00e fe57 	bl	11bcc <z_log_get_s_mask>
					if (smask == 0U) {
    2f1e:	4607      	mov	r7, r0
    2f20:	b988      	cbnz	r0, 2f46 <msg_free+0x62>
    2f22:	e7eb      	b.n	2efc <msg_free+0x18>
					log_free(buf);
    2f24:	4628      	mov	r0, r5
    2f26:	f7ff ff4f 	bl	2dc8 <log_free>
		for (i = 0U; i < nargs; i++) {
    2f2a:	3401      	adds	r4, #1
    2f2c:	42b4      	cmp	r4, r6
    2f2e:	d2e5      	bcs.n	2efc <msg_free+0x18>
			void *buf = (void *)log_msg_arg_get(msg, i);
    2f30:	4621      	mov	r1, r4
    2f32:	9801      	ldr	r0, [sp, #4]
    2f34:	f00e ff15 	bl	11d62 <log_msg_arg_get>
    2f38:	4605      	mov	r5, r0
			if (log_is_strdup(buf)) {
    2f3a:	f7ff fcf3 	bl	2924 <log_is_strdup>
    2f3e:	2800      	cmp	r0, #0
    2f40:	d0f3      	beq.n	2f2a <msg_free+0x46>
				if (smask == 0U) {
    2f42:	2f00      	cmp	r7, #0
    2f44:	d0e5      	beq.n	2f12 <msg_free+0x2e>
				if (smask & BIT(i)) {
    2f46:	fa27 f304 	lsr.w	r3, r7, r4
    2f4a:	f013 0f01 	tst.w	r3, #1
    2f4e:	d0ec      	beq.n	2f2a <msg_free+0x46>
    2f50:	e7e8      	b.n	2f24 <msg_free+0x40>
		uint32_t smask = 0U;
    2f52:	2700      	movs	r7, #0
		for (i = 0U; i < nargs; i++) {
    2f54:	463c      	mov	r4, r7
    2f56:	e7e9      	b.n	2f2c <msg_free+0x48>
		cont_free(msg->payload.ext.next);
    2f58:	6958      	ldr	r0, [r3, #20]
    2f5a:	f7ff ff73 	bl	2e44 <cont_free>
    2f5e:	e7d2      	b.n	2f06 <msg_free+0x22>
    2f60:	20001648 	.word	0x20001648

00002f64 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    2f64:	b40e      	push	{r1, r2, r3}
    2f66:	b500      	push	{lr}
    2f68:	b082      	sub	sp, #8
    2f6a:	4601      	mov	r1, r0
    2f6c:	ab03      	add	r3, sp, #12
    2f6e:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    2f72:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    2f74:	4803      	ldr	r0, [pc, #12]	; (2f84 <print_formatted+0x20>)
    2f76:	f7fe fe79 	bl	1c6c <cbvprintf>
	va_end(args);

	return length;
}
    2f7a:	b002      	add	sp, #8
    2f7c:	f85d eb04 	ldr.w	lr, [sp], #4
    2f80:	b003      	add	sp, #12
    2f82:	4770      	bx	lr
    2f84:	000121b3 	.word	0x000121b3

00002f88 <timestamp_print>:
	output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, uint32_t timestamp)
{
    2f88:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f8a:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
    2f8c:	f011 0f44 	tst.w	r1, #68	; 0x44
    2f90:	d005      	beq.n	2f9e <timestamp_print+0x16>
		length = print_formatted(output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
    2f92:	4b1a      	ldr	r3, [pc, #104]	; (2ffc <CONFIG_USB_DEVICE_VID+0x19>)
    2f94:	681c      	ldr	r4, [r3, #0]
    2f96:	b934      	cbnz	r4, 2fa6 <timestamp_print+0x1e>
			length = print_formatted(output,
						 "[%02u:%02u:%02u.%03u,%03u] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
    2f98:	2000      	movs	r0, #0
	}

	return length;
}
    2f9a:	b005      	add	sp, #20
    2f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
    2f9e:	4918      	ldr	r1, [pc, #96]	; (3000 <CONFIG_USB_DEVICE_VID+0x1d>)
    2fa0:	f7ff ffe0 	bl	2f64 <print_formatted>
    2fa4:	e7f9      	b.n	2f9a <timestamp_print+0x12>
		timestamp /= timestamp_div;
    2fa6:	4b17      	ldr	r3, [pc, #92]	; (3004 <CONFIG_USB_DEVICE_VID+0x21>)
    2fa8:	6819      	ldr	r1, [r3, #0]
    2faa:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    2fae:	fbb1 f5f4 	udiv	r5, r1, r4
		hours = seconds / 3600U;
    2fb2:	4a15      	ldr	r2, [pc, #84]	; (3008 <CONFIG_USB_DEVICE_VID+0x25>)
    2fb4:	fba2 3205 	umull	r3, r2, r2, r5
    2fb8:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    2fba:	f44f 6661 	mov.w	r6, #3600	; 0xe10
    2fbe:	fb06 5612 	mls	r6, r6, r2, r5
		mins = seconds / 60U;
    2fc2:	4b12      	ldr	r3, [pc, #72]	; (300c <CONFIG_USB_DEVICE_VID+0x29>)
    2fc4:	fba3 7306 	umull	r7, r3, r3, r6
    2fc8:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    2fca:	fb04 1115 	mls	r1, r4, r5, r1
		ms = (remainder * 1000U) / freq;
    2fce:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    2fd2:	fb05 f101 	mul.w	r1, r5, r1
    2fd6:	fbb1 f7f4 	udiv	r7, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2fda:	fb07 1114 	mls	r1, r7, r4, r1
    2fde:	fb05 f101 	mul.w	r1, r5, r1
    2fe2:	fbb1 f4f4 	udiv	r4, r1, r4
			length = print_formatted(output,
    2fe6:	9402      	str	r4, [sp, #8]
    2fe8:	9701      	str	r7, [sp, #4]
    2fea:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    2fee:	eba6 0181 	sub.w	r1, r6, r1, lsl #2
    2ff2:	9100      	str	r1, [sp, #0]
    2ff4:	4906      	ldr	r1, [pc, #24]	; (3010 <CONFIG_USB_DEVICE_VID+0x2d>)
    2ff6:	f7ff ffb5 	bl	2f64 <print_formatted>
    2ffa:	e7ce      	b.n	2f9a <timestamp_print+0x12>
    2ffc:	20001664 	.word	0x20001664
    3000:	000160c8 	.word	0x000160c8
    3004:	20001668 	.word	0x20001668
    3008:	91a2b3c5 	.word	0x91a2b3c5
    300c:	88888889 	.word	0x88888889
    3010:	000160d4 	.word	0x000160d4

00003014 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    3014:	b161      	cbz	r1, 3030 <color_print+0x1c>
{
    3016:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    3018:	b12a      	cbz	r2, 3026 <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    301a:	4a06      	ldr	r2, [pc, #24]	; (3034 <color_print+0x20>)
    301c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3020:	b912      	cbnz	r2, 3028 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    3022:	4a05      	ldr	r2, [pc, #20]	; (3038 <color_print+0x24>)
    3024:	e000      	b.n	3028 <color_print+0x14>
    3026:	4a04      	ldr	r2, [pc, #16]	; (3038 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
    3028:	4904      	ldr	r1, [pc, #16]	; (303c <color_print+0x28>)
    302a:	f7ff ff9b 	bl	2f64 <print_formatted>
	}
}
    302e:	bd08      	pop	{r3, pc}
    3030:	4770      	bx	lr
    3032:	bf00      	nop
    3034:	00016144 	.word	0x00016144
    3038:	000160f0 	.word	0x000160f0
    303c:	00016e5c 	.word	0x00016e5c

00003040 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    3040:	f011 0f10 	tst.w	r1, #16
    3044:	d10b      	bne.n	305e <newline_print+0x1e>
{
    3046:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    3048:	f011 0f20 	tst.w	r1, #32
    304c:	d003      	beq.n	3056 <newline_print+0x16>
		print_formatted(ctx, "\n");
    304e:	4904      	ldr	r1, [pc, #16]	; (3060 <newline_print+0x20>)
    3050:	f7ff ff88 	bl	2f64 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
    3054:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    3056:	4903      	ldr	r1, [pc, #12]	; (3064 <newline_print+0x24>)
    3058:	f7ff ff84 	bl	2f64 <print_formatted>
    305c:	e7fa      	b.n	3054 <newline_print+0x14>
    305e:	4770      	bx	lr
    3060:	00016bc0 	.word	0x00016bc0
    3064:	00017884 	.word	0x00017884

00003068 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    3068:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    306c:	4605      	mov	r5, r0
    306e:	460f      	mov	r7, r1
    3070:	4616      	mov	r6, r2
    3072:	4698      	mov	r8, r3
	newline_print(output, flags);
    3074:	9906      	ldr	r1, [sp, #24]
    3076:	f7ff ffe3 	bl	3040 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
    307a:	2400      	movs	r4, #0
    307c:	4544      	cmp	r4, r8
    307e:	da05      	bge.n	308c <hexdump_line_print+0x24>
		print_formatted(output, " ");
    3080:	4923      	ldr	r1, [pc, #140]	; (3110 <hexdump_line_print+0xa8>)
    3082:	4628      	mov	r0, r5
    3084:	f7ff ff6e 	bl	2f64 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    3088:	3401      	adds	r4, #1
    308a:	e7f7      	b.n	307c <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    308c:	2400      	movs	r4, #0
    308e:	e009      	b.n	30a4 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    3090:	491f      	ldr	r1, [pc, #124]	; (3110 <hexdump_line_print+0xa8>)
    3092:	4628      	mov	r0, r5
    3094:	f7ff ff66 	bl	2f64 <print_formatted>
    3098:	e00b      	b.n	30b2 <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    309a:	491e      	ldr	r1, [pc, #120]	; (3114 <hexdump_line_print+0xac>)
    309c:	4628      	mov	r0, r5
    309e:	f7ff ff61 	bl	2f64 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    30a2:	3401      	adds	r4, #1
    30a4:	2c0f      	cmp	r4, #15
    30a6:	dc0c      	bgt.n	30c2 <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    30a8:	2c00      	cmp	r4, #0
    30aa:	dd02      	ble.n	30b2 <hexdump_line_print+0x4a>
    30ac:	f014 0f07 	tst.w	r4, #7
    30b0:	d0ee      	beq.n	3090 <hexdump_line_print+0x28>
		if (i < length) {
    30b2:	42b4      	cmp	r4, r6
    30b4:	d2f1      	bcs.n	309a <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
    30b6:	5d3a      	ldrb	r2, [r7, r4]
    30b8:	4917      	ldr	r1, [pc, #92]	; (3118 <hexdump_line_print+0xb0>)
    30ba:	4628      	mov	r0, r5
    30bc:	f7ff ff52 	bl	2f64 <print_formatted>
    30c0:	e7ef      	b.n	30a2 <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
    30c2:	4916      	ldr	r1, [pc, #88]	; (311c <hexdump_line_print+0xb4>)
    30c4:	4628      	mov	r0, r5
    30c6:	f7ff ff4d 	bl	2f64 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    30ca:	2400      	movs	r4, #0
    30cc:	e009      	b.n	30e2 <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    30ce:	4910      	ldr	r1, [pc, #64]	; (3110 <hexdump_line_print+0xa8>)
    30d0:	4628      	mov	r0, r5
    30d2:	f7ff ff47 	bl	2f64 <print_formatted>
    30d6:	e00b      	b.n	30f0 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
    30d8:	4911      	ldr	r1, [pc, #68]	; (3120 <hexdump_line_print+0xb8>)
    30da:	4628      	mov	r0, r5
    30dc:	f7ff ff42 	bl	2f64 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    30e0:	3401      	adds	r4, #1
    30e2:	2c0f      	cmp	r4, #15
    30e4:	dc12      	bgt.n	310c <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
    30e6:	2c00      	cmp	r4, #0
    30e8:	dd02      	ble.n	30f0 <hexdump_line_print+0x88>
    30ea:	f014 0f07 	tst.w	r4, #7
    30ee:	d0ee      	beq.n	30ce <hexdump_line_print+0x66>
		if (i < length) {
    30f0:	42b4      	cmp	r4, r6
    30f2:	d206      	bcs.n	3102 <hexdump_line_print+0x9a>
			char c = (char)data[i];
    30f4:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    30f6:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
    30fa:	2b5e      	cmp	r3, #94	; 0x5e
    30fc:	d9ec      	bls.n	30d8 <hexdump_line_print+0x70>
    30fe:	222e      	movs	r2, #46	; 0x2e
    3100:	e7ea      	b.n	30d8 <hexdump_line_print+0x70>
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    3102:	4903      	ldr	r1, [pc, #12]	; (3110 <hexdump_line_print+0xa8>)
    3104:	4628      	mov	r0, r5
    3106:	f7ff ff2d 	bl	2f64 <print_formatted>
    310a:	e7e9      	b.n	30e0 <hexdump_line_print+0x78>
		}
	}
}
    310c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3110:	0001611c 	.word	0x0001611c
    3114:	00016100 	.word	0x00016100
    3118:	000160f8 	.word	0x000160f8
    311c:	00016104 	.word	0x00016104
    3120:	00016108 	.word	0x00016108

00003124 <ids_print>:
{
    3124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3128:	4680      	mov	r8, r0
    312a:	4616      	mov	r6, r2
    312c:	461d      	mov	r5, r3
    312e:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
    3132:	b959      	cbnz	r1, 314c <ids_print+0x28>
	int total = 0;
    3134:	2400      	movs	r4, #0
	if (source_id >= 0) {
    3136:	2f00      	cmp	r7, #0
    3138:	db1c      	blt.n	3174 <ids_print+0x50>
		total += print_formatted(output,
    313a:	b186      	cbz	r6, 315e <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    313c:	2301      	movs	r3, #1
    313e:	9a07      	ldr	r2, [sp, #28]
    3140:	4093      	lsls	r3, r2
				(func_on &&
    3142:	f013 0f10 	tst.w	r3, #16
    3146:	d118      	bne.n	317a <ids_print+0x56>
		total += print_formatted(output,
    3148:	4e0d      	ldr	r6, [pc, #52]	; (3180 <ids_print+0x5c>)
    314a:	e009      	b.n	3160 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
    314c:	4b0d      	ldr	r3, [pc, #52]	; (3184 <ids_print+0x60>)
    314e:	9a07      	ldr	r2, [sp, #28]
    3150:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3154:	490c      	ldr	r1, [pc, #48]	; (3188 <ids_print+0x64>)
    3156:	f7ff ff05 	bl	2f64 <print_formatted>
    315a:	4604      	mov	r4, r0
    315c:	e7eb      	b.n	3136 <ids_print+0x12>
		total += print_formatted(output,
    315e:	4e08      	ldr	r6, [pc, #32]	; (3180 <ids_print+0x5c>)
    3160:	4639      	mov	r1, r7
    3162:	4628      	mov	r0, r5
    3164:	f7ff fe4c 	bl	2e00 <log_source_name_get>
    3168:	4602      	mov	r2, r0
    316a:	4631      	mov	r1, r6
    316c:	4640      	mov	r0, r8
    316e:	f7ff fef9 	bl	2f64 <print_formatted>
    3172:	4404      	add	r4, r0
}
    3174:	4620      	mov	r0, r4
    3176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
    317a:	4e04      	ldr	r6, [pc, #16]	; (318c <ids_print+0x68>)
    317c:	e7f0      	b.n	3160 <ids_print+0x3c>
    317e:	bf00      	nop
    3180:	0001610c 	.word	0x0001610c
    3184:	00016180 	.word	0x00016180
    3188:	00016118 	.word	0x00016118
    318c:	00016114 	.word	0x00016114

00003190 <hexdump_print>:

static void hexdump_print(struct log_msg *msg,
			  const struct log_output *output,
			  int prefix_offset, uint32_t flags)
{
    3190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3194:	b089      	sub	sp, #36	; 0x24
    3196:	4607      	mov	r7, r0
    3198:	460e      	mov	r6, r1
    319a:	4691      	mov	r9, r2
    319c:	4698      	mov	r8, r3
	uint32_t offset = 0U;
	uint8_t buf[HEXDUMP_BYTES_IN_LINE];
	size_t length;

	print_formatted(output, "%s", log_msg_str_get(msg));
    319e:	f00e fdf2 	bl	11d86 <log_msg_str_get>
    31a2:	4602      	mov	r2, r0
    31a4:	490e      	ldr	r1, [pc, #56]	; (31e0 <hexdump_print+0x50>)
    31a6:	4630      	mov	r0, r6
    31a8:	f7ff fedc 	bl	2f64 <print_formatted>
	uint32_t offset = 0U;
    31ac:	2400      	movs	r4, #0

	do {
		length = sizeof(buf);
    31ae:	2510      	movs	r5, #16
    31b0:	9503      	str	r5, [sp, #12]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    31b2:	4623      	mov	r3, r4
    31b4:	aa03      	add	r2, sp, #12
    31b6:	eb0d 0105 	add.w	r1, sp, r5
    31ba:	4638      	mov	r0, r7
    31bc:	f00e fe3d 	bl	11e3a <log_msg_hexdump_data_get>

		if (length) {
    31c0:	9a03      	ldr	r2, [sp, #12]
    31c2:	b152      	cbz	r2, 31da <hexdump_print+0x4a>
			hexdump_line_print(output, buf, length,
    31c4:	f8cd 8000 	str.w	r8, [sp]
    31c8:	464b      	mov	r3, r9
    31ca:	eb0d 0105 	add.w	r1, sp, r5
    31ce:	4630      	mov	r0, r6
    31d0:	f7ff ff4a 	bl	3068 <hexdump_line_print>
					   prefix_offset, flags);
			offset += length;
    31d4:	9d03      	ldr	r5, [sp, #12]
    31d6:	442c      	add	r4, r5
		length = sizeof(buf);
    31d8:	e7e9      	b.n	31ae <hexdump_print+0x1e>
		} else {
			break;
		}
	} while (true);
}
    31da:	b009      	add	sp, #36	; 0x24
    31dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    31e0:	00016e5c 	.word	0x00016e5c

000031e4 <raw_string_print>:
}


static void raw_string_print(struct log_msg *msg,
			     const struct log_output *output)
{
    31e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    31e6:	b083      	sub	sp, #12
    31e8:	4606      	mov	r6, r0
    31ea:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(output->size);

	size_t offset = 0;
	size_t length;
	bool eol = false;
    31ec:	2700      	movs	r7, #0
	size_t offset = 0;
    31ee:	463d      	mov	r5, r7
    31f0:	e00d      	b.n	320e <raw_string_print+0x2a>
		/* Sting is stored in a hexdump message. */
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
		output->control_block->offset = length;

		if (length != 0) {
			eol = (output->buf[length - 1] == '\n');
    31f2:	68a2      	ldr	r2, [r4, #8]
    31f4:	4413      	add	r3, r2
    31f6:	f813 7c01 	ldrb.w	r7, [r3, #-1]
    31fa:	2f0a      	cmp	r7, #10
    31fc:	bf14      	ite	ne
    31fe:	2700      	movne	r7, #0
    3200:	2701      	moveq	r7, #1
		}

		log_output_flush(output);
    3202:	4620      	mov	r0, r4
    3204:	f00e ffc8 	bl	12198 <log_output_flush>
		offset += length;
    3208:	9b01      	ldr	r3, [sp, #4]
    320a:	441d      	add	r5, r3
	} while (length > 0);
    320c:	b173      	cbz	r3, 322c <raw_string_print+0x48>
		length = output->size;
    320e:	68e3      	ldr	r3, [r4, #12]
    3210:	9301      	str	r3, [sp, #4]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
    3212:	462b      	mov	r3, r5
    3214:	aa01      	add	r2, sp, #4
    3216:	68a1      	ldr	r1, [r4, #8]
    3218:	4630      	mov	r0, r6
    321a:	f00e fe0e 	bl	11e3a <log_msg_hexdump_data_get>
		output->control_block->offset = length;
    321e:	6863      	ldr	r3, [r4, #4]
    3220:	9a01      	ldr	r2, [sp, #4]
    3222:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    3224:	9b01      	ldr	r3, [sp, #4]
    3226:	2b00      	cmp	r3, #0
    3228:	d0eb      	beq.n	3202 <raw_string_print+0x1e>
    322a:	e7e2      	b.n	31f2 <raw_string_print+0xe>

	if (eol) {
    322c:	b90f      	cbnz	r7, 3232 <raw_string_print+0x4e>
		print_formatted(output, "\r");
	}
}
    322e:	b003      	add	sp, #12
    3230:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(output, "\r");
    3232:	4902      	ldr	r1, [pc, #8]	; (323c <raw_string_print+0x58>)
    3234:	4620      	mov	r0, r4
    3236:	f7ff fe95 	bl	2f64 <print_formatted>
}
    323a:	e7f8      	b.n	322e <raw_string_print+0x4a>
    323c:	00016120 	.word	0x00016120

00003240 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    3240:	b570      	push	{r4, r5, r6, lr}
    3242:	b082      	sub	sp, #8
    3244:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
    3246:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    3248:	f242 730f 	movw	r3, #9999	; 0x270f
    324c:	428b      	cmp	r3, r1
    324e:	bf28      	it	cs
    3250:	460b      	movcs	r3, r1
    3252:	4a0e      	ldr	r2, [pc, #56]	; (328c <log_output_dropped_process+0x4c>)
    3254:	2105      	movs	r1, #5
    3256:	4668      	mov	r0, sp
    3258:	f00d fdc6 	bl	10de8 <snprintk>
    325c:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
    325e:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    3260:	685b      	ldr	r3, [r3, #4]
    3262:	220b      	movs	r2, #11
    3264:	490a      	ldr	r1, [pc, #40]	; (3290 <log_output_dropped_process+0x50>)
    3266:	4628      	mov	r0, r5
    3268:	f00e fdef 	bl	11e4a <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
    326c:	6863      	ldr	r3, [r4, #4]
    326e:	685b      	ldr	r3, [r3, #4]
    3270:	4632      	mov	r2, r6
    3272:	4669      	mov	r1, sp
    3274:	4628      	mov	r0, r5
    3276:	f00e fde8 	bl	11e4a <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
    327a:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    327c:	685b      	ldr	r3, [r3, #4]
    327e:	221b      	movs	r2, #27
    3280:	4904      	ldr	r1, [pc, #16]	; (3294 <log_output_dropped_process+0x54>)
    3282:	4628      	mov	r0, r5
    3284:	f00e fde1 	bl	11e4a <buffer_write>
}
    3288:	b002      	add	sp, #8
    328a:	bd70      	pop	{r4, r5, r6, pc}
    328c:	000170ac 	.word	0x000170ac
    3290:	00016174 	.word	0x00016174
    3294:	00016158 	.word	0x00016158

00003298 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    3298:	4b07      	ldr	r3, [pc, #28]	; (32b8 <log_output_timestamp_freq_set+0x20>)
    329a:	2201      	movs	r2, #1
    329c:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    329e:	4b07      	ldr	r3, [pc, #28]	; (32bc <log_output_timestamp_freq_set+0x24>)
    32a0:	4298      	cmp	r0, r3
    32a2:	d905      	bls.n	32b0 <log_output_timestamp_freq_set+0x18>
		frequency /= 2U;
    32a4:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    32a6:	4a04      	ldr	r2, [pc, #16]	; (32b8 <log_output_timestamp_freq_set+0x20>)
    32a8:	6813      	ldr	r3, [r2, #0]
    32aa:	005b      	lsls	r3, r3, #1
    32ac:	6013      	str	r3, [r2, #0]
    32ae:	e7f6      	b.n	329e <log_output_timestamp_freq_set+0x6>
	}

	freq = frequency;
    32b0:	4b03      	ldr	r3, [pc, #12]	; (32c0 <log_output_timestamp_freq_set+0x28>)
    32b2:	6018      	str	r0, [r3, #0]
}
    32b4:	4770      	bx	lr
    32b6:	bf00      	nop
    32b8:	20001668 	.word	0x20001668
    32bc:	000f4240 	.word	0x000f4240
    32c0:	20001664 	.word	0x20001664

000032c4 <char_out>:
static const char LOG_HEX_SEP[10] = "##ZLOGV1##";

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    32c4:	b570      	push	{r4, r5, r6, lr}
    32c6:	4606      	mov	r6, r0
    32c8:	460d      	mov	r5, r1
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
    32ca:	2400      	movs	r4, #0
    32cc:	42ac      	cmp	r4, r5
    32ce:	d207      	bcs.n	32e0 <char_out+0x1c>
		/* lower 8-bit */
		x = data[i] & 0x0FU;
		(void)hex2char(x, &c);
		uart_poll_out(uart_dev, c);
#else
		uart_poll_out(uart_dev, data[i]);
    32d0:	4b04      	ldr	r3, [pc, #16]	; (32e4 <char_out+0x20>)
    32d2:	6818      	ldr	r0, [r3, #0]
    32d4:	5d31      	ldrb	r1, [r6, r4]
	const struct uart_driver_api *api =
    32d6:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    32d8:	685b      	ldr	r3, [r3, #4]
    32da:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
    32dc:	3401      	adds	r4, #1
    32de:	e7f5      	b.n	32cc <char_out+0x8>
#endif
	}

	return length;
}
    32e0:	4628      	mov	r0, r5
    32e2:	bd70      	pop	{r4, r5, r6, pc}
    32e4:	20001680 	.word	0x20001680

000032e8 <log_backend_uart_init>:
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    32e8:	4b01      	ldr	r3, [pc, #4]	; (32f0 <log_backend_uart_init+0x8>)
    32ea:	4a02      	ldr	r2, [pc, #8]	; (32f4 <log_backend_uart_init+0xc>)
    32ec:	601a      	str	r2, [r3, #0]
		 */
		for (int i = 0; i < sizeof(LOG_HEX_SEP); i++) {
			uart_poll_out(uart_dev, LOG_HEX_SEP[i]);
		}
	}
}
    32ee:	4770      	bx	lr
    32f0:	20001680 	.word	0x20001680
    32f4:	00015c98 	.word	0x00015c98

000032f8 <panic>:

static void panic(struct log_backend const *const backend)
{
    32f8:	b508      	push	{r3, lr}
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    32fa:	4802      	ldr	r0, [pc, #8]	; (3304 <panic+0xc>)
    32fc:	f00e ff4c 	bl	12198 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
    3300:	bd08      	pop	{r3, pc}
    3302:	bf00      	nop
    3304:	000161c4 	.word	0x000161c4

00003308 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
    3308:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    330a:	4802      	ldr	r0, [pc, #8]	; (3314 <dropped+0xc>)
    330c:	f7ff ff98 	bl	3240 <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
    3310:	bd08      	pop	{r3, pc}
    3312:	bf00      	nop
    3314:	000161c4 	.word	0x000161c4

00003318 <put>:
{
    3318:	b510      	push	{r4, lr}
    331a:	460c      	mov	r4, r1
	log_msg_get(msg);
    331c:	4608      	mov	r0, r1
    331e:	f00e fd10 	bl	11d42 <log_msg_get>
	log_output_msg_process(output, msg, flags);
    3322:	220f      	movs	r2, #15
    3324:	4621      	mov	r1, r4
    3326:	4803      	ldr	r0, [pc, #12]	; (3334 <put+0x1c>)
    3328:	f00e ff5f 	bl	121ea <log_output_msg_process>
	log_msg_put(msg);
    332c:	4620      	mov	r0, r4
    332e:	f00e fd2c 	bl	11d8a <log_msg_put>
}
    3332:	bd10      	pop	{r4, pc}
    3334:	000161c4 	.word	0x000161c4

00003338 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    3338:	4b01      	ldr	r3, [pc, #4]	; (3340 <log_backend_rtt_init+0x8>)
    333a:	2201      	movs	r2, #1
    333c:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    333e:	4770      	bx	lr
    3340:	20002f78 	.word	0x20002f78

00003344 <on_failed_write>:
{
    3344:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
    3346:	b918      	cbnz	r0, 3350 <on_failed_write+0xc>
		host_present = false;
    3348:	4b08      	ldr	r3, [pc, #32]	; (336c <on_failed_write+0x28>)
    334a:	2200      	movs	r2, #0
    334c:	701a      	strb	r2, [r3, #0]
}
    334e:	bd08      	pop	{r3, pc}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    3350:	4b07      	ldr	r3, [pc, #28]	; (3370 <on_failed_write+0x2c>)
    3352:	781b      	ldrb	r3, [r3, #0]
	} else if (is_sync_mode()) {
    3354:	b123      	cbz	r3, 3360 <on_failed_write+0x1c>
	z_impl_k_busy_wait(usec_to_wait);
    3356:	f241 3088 	movw	r0, #5000	; 0x1388
    335a:	f012 fba5 	bl	15aa8 <z_impl_k_busy_wait>
}
    335e:	e7f6      	b.n	334e <on_failed_write+0xa>
	return z_impl_k_sleep(timeout);
    3360:	20a4      	movs	r0, #164	; 0xa4
    3362:	2100      	movs	r1, #0
    3364:	f00c ffb6 	bl	102d4 <z_impl_k_sleep>
}
    3368:	e7f1      	b.n	334e <on_failed_write+0xa>
    336a:	bf00      	nop
    336c:	20002f78 	.word	0x20002f78
    3370:	20002f79 	.word	0x20002f79

00003374 <on_write>:
{
    3374:	b538      	push	{r3, r4, r5, lr}
    3376:	4604      	mov	r4, r0
	host_present = true;
    3378:	4b0a      	ldr	r3, [pc, #40]	; (33a4 <on_write+0x30>)
    337a:	2201      	movs	r2, #1
    337c:	701a      	strb	r2, [r3, #0]
	return panic_mode;
    337e:	4b0a      	ldr	r3, [pc, #40]	; (33a8 <on_write+0x34>)
    3380:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
    3382:	b903      	cbnz	r3, 3386 <on_write+0x12>
}
    3384:	bd38      	pop	{r3, r4, r5, pc}
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    3386:	2000      	movs	r0, #0
    3388:	f00b fdd0 	bl	ef2c <SEGGER_RTT_HasDataUp>
    338c:	2800      	cmp	r0, #0
    338e:	d0f9      	beq.n	3384 <on_write+0x10>
    3390:	4b04      	ldr	r3, [pc, #16]	; (33a4 <on_write+0x30>)
    3392:	781b      	ldrb	r3, [r3, #0]
    3394:	2b00      	cmp	r3, #0
    3396:	d0f5      	beq.n	3384 <on_write+0x10>
			on_failed_write(retry_cnt--);
    3398:	1e65      	subs	r5, r4, #1
    339a:	4620      	mov	r0, r4
    339c:	f7ff ffd2 	bl	3344 <on_failed_write>
    33a0:	462c      	mov	r4, r5
    33a2:	e7f0      	b.n	3386 <on_write+0x12>
    33a4:	20002f78 	.word	0x20002f78
    33a8:	20002f79 	.word	0x20002f79

000033ac <data_out_block_mode>:
{
    33ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    33b0:	4606      	mov	r6, r0
    33b2:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    33b4:	2704      	movs	r7, #4
    33b6:	e00d      	b.n	33d4 <data_out_block_mode+0x28>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    33b8:	462a      	mov	r2, r5
    33ba:	4631      	mov	r1, r6
    33bc:	2000      	movs	r0, #0
    33be:	f00b fd51 	bl	ee64 <SEGGER_RTT_WriteSkipNoLock>
    33c2:	4604      	mov	r4, r0
    33c4:	e01c      	b.n	3400 <data_out_block_mode+0x54>
			on_write(retry_cnt);
    33c6:	4638      	mov	r0, r7
    33c8:	f7ff ffd4 	bl	3374 <on_write>
	} while ((ret == 0) && host_present);
    33cc:	bb1c      	cbnz	r4, 3416 <data_out_block_mode+0x6a>
    33ce:	4b16      	ldr	r3, [pc, #88]	; (3428 <data_out_block_mode+0x7c>)
    33d0:	781b      	ldrb	r3, [r3, #0]
    33d2:	b303      	cbz	r3, 3416 <data_out_block_mode+0x6a>
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    33d4:	4b15      	ldr	r3, [pc, #84]	; (342c <data_out_block_mode+0x80>)
    33d6:	781b      	ldrb	r3, [r3, #0]
		if (!is_sync_mode()) {
    33d8:	2b00      	cmp	r3, #0
    33da:	d1ed      	bne.n	33b8 <data_out_block_mode+0xc>
	return z_impl_k_mutex_lock(mutex, timeout);
    33dc:	f8df 8050 	ldr.w	r8, [pc, #80]	; 3430 <data_out_block_mode+0x84>
    33e0:	f04f 32ff 	mov.w	r2, #4294967295
    33e4:	f04f 33ff 	mov.w	r3, #4294967295
    33e8:	4640      	mov	r0, r8
    33ea:	f00c f92b 	bl	f644 <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    33ee:	462a      	mov	r2, r5
    33f0:	4631      	mov	r1, r6
    33f2:	2000      	movs	r0, #0
    33f4:	f00b fd36 	bl	ee64 <SEGGER_RTT_WriteSkipNoLock>
    33f8:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    33fa:	4640      	mov	r0, r8
    33fc:	f00c f9ac 	bl	f758 <z_impl_k_mutex_unlock>
		if (ret) {
    3400:	2c00      	cmp	r4, #0
    3402:	d1e0      	bne.n	33c6 <data_out_block_mode+0x1a>
		} else if (host_present) {
    3404:	4b08      	ldr	r3, [pc, #32]	; (3428 <data_out_block_mode+0x7c>)
    3406:	781b      	ldrb	r3, [r3, #0]
    3408:	2b00      	cmp	r3, #0
    340a:	d0df      	beq.n	33cc <data_out_block_mode+0x20>
			retry_cnt--;
    340c:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
    340e:	4638      	mov	r0, r7
    3410:	f7ff ff98 	bl	3344 <on_failed_write>
    3414:	e7da      	b.n	33cc <data_out_block_mode+0x20>
	return ((ret == 0) && host_present) ? 0 : length;
    3416:	b914      	cbnz	r4, 341e <data_out_block_mode+0x72>
    3418:	4b03      	ldr	r3, [pc, #12]	; (3428 <data_out_block_mode+0x7c>)
    341a:	781b      	ldrb	r3, [r3, #0]
    341c:	b903      	cbnz	r3, 3420 <data_out_block_mode+0x74>
    341e:	462c      	mov	r4, r5
}
    3420:	4620      	mov	r0, r4
    3422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3426:	bf00      	nop
    3428:	20002f78 	.word	0x20002f78
    342c:	20002f79 	.word	0x20002f79
    3430:	20000400 	.word	0x20000400

00003434 <panic>:

static void panic(struct log_backend const *const backend)
{
    3434:	b508      	push	{r3, lr}
	panic_mode = true;
    3436:	4b03      	ldr	r3, [pc, #12]	; (3444 <panic+0x10>)
    3438:	2201      	movs	r2, #1
    343a:	701a      	strb	r2, [r3, #0]
	log_output_flush(output);
    343c:	4802      	ldr	r0, [pc, #8]	; (3448 <panic+0x14>)
    343e:	f00e feab 	bl	12198 <log_output_flush>
	log_backend_std_panic(&log_output_rtt);
}
    3442:	bd08      	pop	{r3, pc}
    3444:	20002f79 	.word	0x20002f79
    3448:	00016200 	.word	0x00016200

0000344c <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
    344c:	b508      	push	{r3, lr}
	log_output_dropped_process(output, cnt);
    344e:	4802      	ldr	r0, [pc, #8]	; (3458 <dropped+0xc>)
    3450:	f7ff fef6 	bl	3240 <log_output_dropped_process>
	ARG_UNUSED(backend);

	log_backend_std_dropped(&log_output_rtt, cnt);
}
    3454:	bd08      	pop	{r3, pc}
    3456:	bf00      	nop
    3458:	00016200 	.word	0x00016200

0000345c <put>:
{
    345c:	b510      	push	{r4, lr}
    345e:	460c      	mov	r4, r1
	log_msg_get(msg);
    3460:	4608      	mov	r0, r1
    3462:	f00e fc6e 	bl	11d42 <log_msg_get>
	log_output_msg_process(output, msg, flags);
    3466:	220f      	movs	r2, #15
    3468:	4621      	mov	r1, r4
    346a:	4803      	ldr	r0, [pc, #12]	; (3478 <put+0x1c>)
    346c:	f00e febd 	bl	121ea <log_output_msg_process>
	log_msg_put(msg);
    3470:	4620      	mov	r0, r4
    3472:	f00e fc8a 	bl	11d8a <log_msg_put>
}
    3476:	bd10      	pop	{r4, pc}
    3478:	00016200 	.word	0x00016200

0000347c <usb_set_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
}

static bool usb_set_alt_setting(uint8_t iface, uint8_t alt_setting)
{
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    347c:	2807      	cmp	r0, #7
    347e:	d901      	bls.n	3484 <usb_set_alt_setting+0x8>
		usb_dev.alt_setting[iface] = alt_setting;
		return true;
	}

	return false;
    3480:	2000      	movs	r0, #0
}
    3482:	4770      	bx	lr
		usb_dev.alt_setting[iface] = alt_setting;
    3484:	4b02      	ldr	r3, [pc, #8]	; (3490 <usb_set_alt_setting+0x14>)
    3486:	4418      	add	r0, r3
    3488:	f880 10bb 	strb.w	r1, [r0, #187]	; 0xbb
		return true;
    348c:	2001      	movs	r0, #1
    348e:	4770      	bx	lr
    3490:	200016a8 	.word	0x200016a8

00003494 <usb_get_alt_setting>:

static uint8_t usb_get_alt_setting(uint8_t iface)
{
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    3494:	2807      	cmp	r0, #7
    3496:	d901      	bls.n	349c <usb_get_alt_setting+0x8>
		return usb_dev.alt_setting[iface];
	}

	return 0;
    3498:	2000      	movs	r0, #0
}
    349a:	4770      	bx	lr
		return usb_dev.alt_setting[iface];
    349c:	4b02      	ldr	r3, [pc, #8]	; (34a8 <usb_get_alt_setting+0x14>)
    349e:	4418      	add	r0, r3
    34a0:	f890 00bb 	ldrb.w	r0, [r0, #187]	; 0xbb
    34a4:	4770      	bx	lr
    34a6:	bf00      	nop
    34a8:	200016a8 	.word	0x200016a8

000034ac <usb_handle_request>:
 *
 * @return true if the request was handles successfully
 */
static bool usb_handle_request(struct usb_setup_packet *setup,
			       int32_t *len, uint8_t **data)
{
    34ac:	b510      	push	{r4, lr}
	uint32_t type = setup->RequestType.type;
    34ae:	7803      	ldrb	r3, [r0, #0]
    34b0:	f3c3 1341 	ubfx	r3, r3, #5, #2
	if (type >= MAX_NUM_REQ_HANDLERS) {
		LOG_DBG("Error Incorrect iType %d", type);
		return false;
	}

	handler = usb_dev.req_handlers[type];
    34b4:	330a      	adds	r3, #10
    34b6:	4c06      	ldr	r4, [pc, #24]	; (34d0 <usb_handle_request+0x24>)
    34b8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
	if (handler == NULL) {
    34bc:	b123      	cbz	r3, 34c8 <usb_handle_request+0x1c>
		LOG_DBG("No handler for reqtype %d", type);
		return false;
	}

	if ((*handler)(setup, len, data) < 0) {
    34be:	4798      	blx	r3
    34c0:	2800      	cmp	r0, #0
    34c2:	db03      	blt.n	34cc <usb_handle_request+0x20>
		LOG_DBG("Handler Error %d", type);
		usb_print_setup(setup);
		return false;
	}

	return true;
    34c4:	2001      	movs	r0, #1
}
    34c6:	bd10      	pop	{r4, pc}
		return false;
    34c8:	2000      	movs	r0, #0
    34ca:	e7fc      	b.n	34c6 <usb_handle_request+0x1a>
		return false;
    34cc:	2000      	movs	r0, #0
    34ce:	e7fa      	b.n	34c6 <usb_handle_request+0x1a>
    34d0:	200016a8 	.word	0x200016a8

000034d4 <usb_register_request_handler>:
 * @return N/A
 */
static void usb_register_request_handler(int32_t type,
					 usb_request_handler handler)
{
	usb_dev.req_handlers[type] = handler;
    34d4:	300a      	adds	r0, #10
    34d6:	4b02      	ldr	r3, [pc, #8]	; (34e0 <usb_register_request_handler+0xc>)
    34d8:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    34dc:	4770      	bx	lr
    34de:	bf00      	nop
    34e0:	200016a8 	.word	0x200016a8

000034e4 <usb_register_descriptors>:
 *
 * @param [in] usb_descriptors The descriptor byte array
 */
static void usb_register_descriptors(const uint8_t *usb_descriptors)
{
	usb_dev.descriptors = usb_descriptors;
    34e4:	4b01      	ldr	r3, [pc, #4]	; (34ec <usb_register_descriptors+0x8>)
    34e6:	6258      	str	r0, [r3, #36]	; 0x24
}
    34e8:	4770      	bx	lr
    34ea:	bf00      	nop
    34ec:	200016a8 	.word	0x200016a8

000034f0 <usb_get_descriptor>:
 *
 * @return true if the descriptor was found, false otherwise
 */
static bool usb_get_descriptor(struct usb_setup_packet *setup,
			       int32_t *len, uint8_t **data)
{
    34f0:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t *p = NULL;
	uint32_t cur_index = 0U;
	bool found = false;

	LOG_DBG("Get Descriptor request");
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    34f2:	8847      	ldrh	r7, [r0, #2]
    34f4:	0a3d      	lsrs	r5, r7, #8

	/*
	 * Invalid types of descriptors,
	 * see USB Spec. Revision 2.0, 9.4.3 Get Descriptor
	 */
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    34f6:	1f2b      	subs	r3, r5, #4
    34f8:	b2db      	uxtb	r3, r3
    34fa:	2b01      	cmp	r3, #1
    34fc:	d91e      	bls.n	353c <usb_get_descriptor+0x4c>
    34fe:	b2ff      	uxtb	r7, r7
    3500:	2d07      	cmp	r5, #7
    3502:	d81e      	bhi.n	3542 <usb_get_descriptor+0x52>
	    (type > USB_DESC_OTHER_SPEED)) {
		return false;
	}

	p = (uint8_t *)usb_dev.descriptors;
    3504:	4b10      	ldr	r3, [pc, #64]	; (3548 <usb_get_descriptor+0x58>)
    3506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	cur_index = 0U;
    3508:	2600      	movs	r6, #0

	while (p[DESC_bLength] != 0U) {
    350a:	e000      	b.n	350e <usb_get_descriptor+0x1e>
				break;
			}
			cur_index++;
		}
		/* skip to next descriptor */
		p += p[DESC_bLength];
    350c:	4403      	add	r3, r0
	while (p[DESC_bLength] != 0U) {
    350e:	7818      	ldrb	r0, [r3, #0]
    3510:	b138      	cbz	r0, 3522 <usb_get_descriptor+0x32>
		if (p[DESC_bDescriptorType] == type) {
    3512:	785c      	ldrb	r4, [r3, #1]
    3514:	42ac      	cmp	r4, r5
    3516:	d1f9      	bne.n	350c <usb_get_descriptor+0x1c>
			if (cur_index == index) {
    3518:	42b7      	cmp	r7, r6
    351a:	d001      	beq.n	3520 <usb_get_descriptor+0x30>
			cur_index++;
    351c:	3601      	adds	r6, #1
    351e:	e7f5      	b.n	350c <usb_get_descriptor+0x1c>
				found = true;
    3520:	2001      	movs	r0, #1
	}

	if (found) {
    3522:	b160      	cbz	r0, 353e <usb_get_descriptor+0x4e>
		/* set data pointer */
		*data = p;
    3524:	6013      	str	r3, [r2, #0]
		/* get length from structure */
		if (type == USB_DESC_CONFIGURATION) {
    3526:	2d02      	cmp	r5, #2
    3528:	d002      	beq.n	3530 <usb_get_descriptor+0x40>
			 */
			*len = (p[CONF_DESC_wTotalLength]) |
			    (p[CONF_DESC_wTotalLength + 1] << 8);
		} else {
			/* normally length is at offset 0 */
			*len = p[DESC_bLength];
    352a:	781b      	ldrb	r3, [r3, #0]
    352c:	600b      	str	r3, [r1, #0]
    352e:	e006      	b.n	353e <usb_get_descriptor+0x4e>
			*len = (p[CONF_DESC_wTotalLength]) |
    3530:	789a      	ldrb	r2, [r3, #2]
			    (p[CONF_DESC_wTotalLength + 1] << 8);
    3532:	78db      	ldrb	r3, [r3, #3]
			*len = (p[CONF_DESC_wTotalLength]) |
    3534:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    3538:	600b      	str	r3, [r1, #0]
    353a:	e000      	b.n	353e <usb_get_descriptor+0x4e>
		return false;
    353c:	2000      	movs	r0, #0
	} else {
		/* nothing found */
		LOG_DBG("Desc %x not found!", setup->wValue);
	}
	return found;
}
    353e:	bcf0      	pop	{r4, r5, r6, r7}
    3540:	4770      	bx	lr
		return false;
    3542:	2000      	movs	r0, #0
    3544:	e7fb      	b.n	353e <usb_get_descriptor+0x4e>
    3546:	bf00      	nop
    3548:	200016a8 	.word	0x200016a8

0000354c <usb_get_interface>:
	return ret;
}

static bool usb_get_interface(struct usb_setup_packet *setup,
			      int32_t *len, uint8_t **data_buf)
{
    354c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    354e:	4684      	mov	ip, r0
    3550:	460e      	mov	r6, r1
	const uint8_t *p = usb_dev.descriptors;
    3552:	4b0c      	ldr	r3, [pc, #48]	; (3584 <usb_get_interface+0x38>)
    3554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	uint8_t *data = *data_buf;
    3556:	6817      	ldr	r7, [r2, #0]
	uint8_t cur_iface;

	while (p[DESC_bLength] != 0U) {
    3558:	e000      	b.n	355c <usb_get_interface+0x10>
				return true;
			}
		}

		/* skip to next descriptor */
		p += p[DESC_bLength];
    355a:	4413      	add	r3, r2
	while (p[DESC_bLength] != 0U) {
    355c:	781a      	ldrb	r2, [r3, #0]
    355e:	b172      	cbz	r2, 357e <usb_get_interface+0x32>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    3560:	785c      	ldrb	r4, [r3, #1]
    3562:	2c04      	cmp	r4, #4
    3564:	d1f9      	bne.n	355a <usb_get_interface+0xe>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    3566:	7898      	ldrb	r0, [r3, #2]
			if (cur_iface == setup->wIndex) {
    3568:	b285      	uxth	r5, r0
    356a:	f8bc 4004 	ldrh.w	r4, [ip, #4]
    356e:	42a5      	cmp	r5, r4
    3570:	d1f3      	bne.n	355a <usb_get_interface+0xe>
				data[0] = usb_get_alt_setting(cur_iface);
    3572:	f7ff ff8f 	bl	3494 <usb_get_alt_setting>
    3576:	7038      	strb	r0, [r7, #0]
				*len = 1;
    3578:	2001      	movs	r0, #1
    357a:	6030      	str	r0, [r6, #0]
				return true;
    357c:	e000      	b.n	3580 <usb_get_interface+0x34>
	}

	return false;
    357e:	2000      	movs	r0, #0
}
    3580:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3582:	bf00      	nop
    3584:	200016a8 	.word	0x200016a8

00003588 <is_device_configured>:
 *
 * @return true if Configured, false otherwise.
 */
static bool is_device_configured(void)
{
	return (usb_dev.configuration != 0);
    3588:	4b03      	ldr	r3, [pc, #12]	; (3598 <is_device_configured+0x10>)
    358a:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
}
    358e:	3800      	subs	r0, #0
    3590:	bf18      	it	ne
    3592:	2001      	movne	r0, #1
    3594:	4770      	bx	lr
    3596:	bf00      	nop
    3598:	200016a8 	.word	0x200016a8

0000359c <is_interface_valid>:
 *
 * @return true if interface exists - valid
 */
static bool is_interface_valid(uint8_t interface)
{
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    359c:	4b07      	ldr	r3, [pc, #28]	; (35bc <is_interface_valid+0x20>)
    359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	const struct usb_cfg_descriptor *cfg_descr;

	/* Search through descriptor for matching interface */
	while (p[DESC_bLength] != 0U) {
    35a0:	e000      	b.n	35a4 <is_interface_valid+0x8>
			cfg_descr = (const struct usb_cfg_descriptor *)p;
			if (interface < cfg_descr->bNumInterfaces) {
				return true;
			}
		}
		p += p[DESC_bLength];
    35a2:	4413      	add	r3, r2
	while (p[DESC_bLength] != 0U) {
    35a4:	781a      	ldrb	r2, [r3, #0]
    35a6:	b13a      	cbz	r2, 35b8 <is_interface_valid+0x1c>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    35a8:	7859      	ldrb	r1, [r3, #1]
    35aa:	2902      	cmp	r1, #2
    35ac:	d1f9      	bne.n	35a2 <is_interface_valid+0x6>
			if (interface < cfg_descr->bNumInterfaces) {
    35ae:	7919      	ldrb	r1, [r3, #4]
    35b0:	4281      	cmp	r1, r0
    35b2:	d9f6      	bls.n	35a2 <is_interface_valid+0x6>
				return true;
    35b4:	2001      	movs	r0, #1
	}

	return false;
}
    35b6:	4770      	bx	lr
	return false;
    35b8:	2000      	movs	r0, #0
    35ba:	4770      	bx	lr
    35bc:	200016a8 	.word	0x200016a8

000035c0 <is_ep_valid>:
 * either Control Endpoint or one used by the device.
 *
 * @return true if endpoint exists - valid
 */
static bool is_ep_valid(uint8_t ep)
{
    35c0:	b470      	push	{r4, r5, r6}
	size_t size = (__usb_data_end - __usb_data_start);
    35c2:	4b16      	ldr	r3, [pc, #88]	; (361c <is_ep_valid+0x5c>)
    35c4:	4a16      	ldr	r2, [pc, #88]	; (3620 <is_ep_valid+0x60>)
    35c6:	1a9b      	subs	r3, r3, r2
    35c8:	109b      	asrs	r3, r3, #2
    35ca:	4e16      	ldr	r6, [pc, #88]	; (3624 <is_ep_valid+0x64>)
    35cc:	fb06 f603 	mul.w	r6, r6, r3
	const struct usb_ep_cfg_data *ep_data;
	const struct usb_cfg_data *cfg;

	/* Check if its Endpoint 0 */
	if (USB_EP_GET_IDX(ep) == 0) {
    35d0:	f030 0380 	bics.w	r3, r0, #128	; 0x80
    35d4:	d01d      	beq.n	3612 <is_ep_valid+0x52>
		return true;
	}

	for (size_t i = 0; i < size; i++) {
    35d6:	2400      	movs	r4, #0
    35d8:	42b4      	cmp	r4, r6
    35da:	d218      	bcs.n	360e <is_ep_valid+0x4e>
		cfg = &__usb_data_start[i];
		ep_data = cfg->endpoint;
    35dc:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    35e0:	4b0f      	ldr	r3, [pc, #60]	; (3620 <is_ep_valid+0x60>)
    35e2:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    35e6:	6a15      	ldr	r5, [r2, #32]

		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
    35e8:	2300      	movs	r3, #0
    35ea:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    35ee:	490c      	ldr	r1, [pc, #48]	; (3620 <is_ep_valid+0x60>)
    35f0:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    35f4:	7f12      	ldrb	r2, [r2, #28]
    35f6:	429a      	cmp	r2, r3
    35f8:	d907      	bls.n	360a <is_ep_valid+0x4a>
			if (ep_data[n].ep_addr == ep) {
    35fa:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    35fe:	7912      	ldrb	r2, [r2, #4]
    3600:	4282      	cmp	r2, r0
    3602:	d008      	beq.n	3616 <is_ep_valid+0x56>
		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
    3604:	3301      	adds	r3, #1
    3606:	b2db      	uxtb	r3, r3
    3608:	e7ef      	b.n	35ea <is_ep_valid+0x2a>
	for (size_t i = 0; i < size; i++) {
    360a:	3401      	adds	r4, #1
    360c:	e7e4      	b.n	35d8 <is_ep_valid+0x18>
				return true;
			}
		}
	}

	return false;
    360e:	2000      	movs	r0, #0
    3610:	e002      	b.n	3618 <is_ep_valid+0x58>
		return true;
    3612:	2001      	movs	r0, #1
    3614:	e000      	b.n	3618 <is_ep_valid+0x58>
				return true;
    3616:	2001      	movs	r0, #1
}
    3618:	bc70      	pop	{r4, r5, r6}
    361a:	4770      	bx	lr
    361c:	20000540 	.word	0x20000540
    3620:	2000051c 	.word	0x2000051c
    3624:	38e38e39 	.word	0x38e38e39

00003628 <usb_register_custom_req_handler>:
 *
 * @param [in] handler Callback function pointer
 */
static void usb_register_custom_req_handler(usb_request_handler handler)
{
	usb_dev.custom_req_handler = handler;
    3628:	4b01      	ldr	r3, [pc, #4]	; (3630 <usb_register_custom_req_handler+0x8>)
    362a:	6198      	str	r0, [r3, #24]
}
    362c:	4770      	bx	lr
    362e:	bf00      	nop
    3630:	200016a8 	.word	0x200016a8

00003634 <usb_register_status_callback>:
 *
 * @param [in] cb Callback function pointer
 */
static void usb_register_status_callback(usb_dc_status_callback cb)
{
	usb_dev.status_callback = cb;
    3634:	4b01      	ldr	r3, [pc, #4]	; (363c <usb_register_status_callback+0x8>)
    3636:	61d8      	str	r0, [r3, #28]
}
    3638:	4770      	bx	lr
    363a:	bf00      	nop
    363c:	200016a8 	.word	0x200016a8

00003640 <foreach_ep>:

static int foreach_ep(int (* endpoint_callback)(const struct usb_ep_cfg_data *))
{
    3640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3644:	4606      	mov	r6, r0
	size_t size = (__usb_data_end - __usb_data_start);
    3646:	4b14      	ldr	r3, [pc, #80]	; (3698 <foreach_ep+0x58>)
    3648:	4a14      	ldr	r2, [pc, #80]	; (369c <foreach_ep+0x5c>)
    364a:	eba3 0802 	sub.w	r8, r3, r2
    364e:	ea4f 03a8 	mov.w	r3, r8, asr #2
    3652:	4a13      	ldr	r2, [pc, #76]	; (36a0 <foreach_ep+0x60>)
    3654:	fb02 f803 	mul.w	r8, r2, r3

	for (size_t i = 0; i < size; i++) {
    3658:	2500      	movs	r5, #0
    365a:	4545      	cmp	r5, r8
    365c:	d218      	bcs.n	3690 <foreach_ep+0x50>
		struct usb_cfg_data *cfg = &__usb_data_start[i];
		struct usb_ep_cfg_data *ep_data = cfg->endpoint;
    365e:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    3662:	4a0e      	ldr	r2, [pc, #56]	; (369c <foreach_ep+0x5c>)
    3664:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3668:	6a1f      	ldr	r7, [r3, #32]

		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
    366a:	2400      	movs	r4, #0
    366c:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    3670:	4a0a      	ldr	r2, [pc, #40]	; (369c <foreach_ep+0x5c>)
    3672:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3676:	7f1b      	ldrb	r3, [r3, #28]
    3678:	42a3      	cmp	r3, r4
    367a:	d907      	bls.n	368c <foreach_ep+0x4c>
			int ret;

			ret = endpoint_callback(&ep_data[n]);
    367c:	eb07 00c4 	add.w	r0, r7, r4, lsl #3
    3680:	47b0      	blx	r6
			if (ret < 0) {
    3682:	2800      	cmp	r0, #0
    3684:	db05      	blt.n	3692 <foreach_ep+0x52>
		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
    3686:	3401      	adds	r4, #1
    3688:	b2e4      	uxtb	r4, r4
    368a:	e7ef      	b.n	366c <foreach_ep+0x2c>
	for (size_t i = 0; i < size; i++) {
    368c:	3501      	adds	r5, #1
    368e:	e7e4      	b.n	365a <foreach_ep+0x1a>
				return ret;
			}
		}
	}

	return 0;
    3690:	2000      	movs	r0, #0
}
    3692:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3696:	bf00      	nop
    3698:	20000540 	.word	0x20000540
    369c:	2000051c 	.word	0x2000051c
    36a0:	38e38e39 	.word	0x38e38e39

000036a4 <class_handler>:
 * usb_enable() is no longer needed.
 */

static int class_handler(struct usb_setup_packet *pSetup,
			 int32_t *len, uint8_t **data)
{
    36a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	size_t size = (__usb_data_end - __usb_data_start);
    36a6:	4f13      	ldr	r7, [pc, #76]	; (36f4 <class_handler+0x50>)
    36a8:	4b13      	ldr	r3, [pc, #76]	; (36f8 <class_handler+0x54>)
    36aa:	1aff      	subs	r7, r7, r3
    36ac:	10bb      	asrs	r3, r7, #2
    36ae:	4f13      	ldr	r7, [pc, #76]	; (36fc <class_handler+0x58>)
    36b0:	fb07 f703 	mul.w	r7, r7, r3
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	for (size_t i = 0; i < size; i++) {
    36b4:	2300      	movs	r3, #0
    36b6:	e000      	b.n	36ba <class_handler+0x16>
    36b8:	3301      	adds	r3, #1
    36ba:	42bb      	cmp	r3, r7
    36bc:	d216      	bcs.n	36ec <class_handler+0x48>
		iface = &(__usb_data_start[i].interface);
		if_descr = __usb_data_start[i].interface_descriptor;
    36be:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
    36c2:	4d0d      	ldr	r5, [pc, #52]	; (36f8 <class_handler+0x54>)
    36c4:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    36c8:	6866      	ldr	r6, [r4, #4]
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    36ca:	4c0d      	ldr	r4, [pc, #52]	; (3700 <class_handler+0x5c>)
    36cc:	6a64      	ldr	r4, [r4, #36]	; 0x24
    36ce:	42a6      	cmp	r6, r4
    36d0:	d3f2      	bcc.n	36b8 <class_handler+0x14>
			continue;
		}

		if (iface->class_handler &&
    36d2:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
    36d6:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    36da:	6924      	ldr	r4, [r4, #16]
    36dc:	2c00      	cmp	r4, #0
    36de:	d0eb      	beq.n	36b8 <class_handler+0x14>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    36e0:	78b6      	ldrb	r6, [r6, #2]
    36e2:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
    36e4:	42ae      	cmp	r6, r5
    36e6:	d1e7      	bne.n	36b8 <class_handler+0x14>
			return iface->class_handler(pSetup, len, data);
    36e8:	47a0      	blx	r4
    36ea:	e001      	b.n	36f0 <class_handler+0x4c>
		}
	}

	return -ENOTSUP;
    36ec:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    36f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    36f2:	bf00      	nop
    36f4:	20000540 	.word	0x20000540
    36f8:	2000051c 	.word	0x2000051c
    36fc:	38e38e39 	.word	0x38e38e39
    3700:	200016a8 	.word	0x200016a8

00003704 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    3704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3708:	4607      	mov	r7, r0
    370a:	4688      	mov	r8, r1
    370c:	4691      	mov	r9, r2
	size_t size = (__usb_data_end - __usb_data_start);
    370e:	4e19      	ldr	r6, [pc, #100]	; (3774 <custom_handler+0x70>)
    3710:	4b19      	ldr	r3, [pc, #100]	; (3778 <custom_handler+0x74>)
    3712:	1af6      	subs	r6, r6, r3
    3714:	10b3      	asrs	r3, r6, #2
    3716:	4e19      	ldr	r6, [pc, #100]	; (377c <custom_handler+0x78>)
    3718:	fb06 f603 	mul.w	r6, r6, r3
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	for (size_t i = 0; i < size; i++) {
    371c:	2400      	movs	r4, #0
    371e:	e005      	b.n	372c <custom_handler+0x28>
		if (iface->custom_handler == NULL) {
			continue;
		}

		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
			return iface->custom_handler(pSetup, len, data);
    3720:	464a      	mov	r2, r9
    3722:	4641      	mov	r1, r8
    3724:	4638      	mov	r0, r7
    3726:	47a8      	blx	r5
    3728:	e021      	b.n	376e <custom_handler+0x6a>
	for (size_t i = 0; i < size; i++) {
    372a:	3401      	adds	r4, #1
    372c:	42a6      	cmp	r6, r4
    372e:	d91c      	bls.n	376a <custom_handler+0x66>
		if_descr = __usb_data_start[i].interface_descriptor;
    3730:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    3734:	4d10      	ldr	r5, [pc, #64]	; (3778 <custom_handler+0x74>)
    3736:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    373a:	685b      	ldr	r3, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    373c:	4a10      	ldr	r2, [pc, #64]	; (3780 <custom_handler+0x7c>)
    373e:	6a52      	ldr	r2, [r2, #36]	; 0x24
    3740:	4293      	cmp	r3, r2
    3742:	d3f2      	bcc.n	372a <custom_handler+0x26>
		if (iface->custom_handler == NULL) {
    3744:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    3748:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    374c:	6995      	ldr	r5, [r2, #24]
    374e:	2d00      	cmp	r5, #0
    3750:	d0eb      	beq.n	372a <custom_handler+0x26>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    3752:	7899      	ldrb	r1, [r3, #2]
    3754:	793a      	ldrb	r2, [r7, #4]
    3756:	4291      	cmp	r1, r2
    3758:	d0e2      	beq.n	3720 <custom_handler+0x1c>
			 * the first interface, but the request may be for
			 * subsequent ones, so forward each request to audio.
			 * The class does not actively engage in request
			 * handling and therefore we can ignore return value.
			 */
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    375a:	795b      	ldrb	r3, [r3, #5]
    375c:	2b01      	cmp	r3, #1
    375e:	d1e4      	bne.n	372a <custom_handler+0x26>
				(void)iface->custom_handler(pSetup, len, data);
    3760:	464a      	mov	r2, r9
    3762:	4641      	mov	r1, r8
    3764:	4638      	mov	r0, r7
    3766:	47a8      	blx	r5
    3768:	e7df      	b.n	372a <custom_handler+0x26>
			}
		}
	}

	return -ENOTSUP;
    376a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    376e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3772:	bf00      	nop
    3774:	20000540 	.word	0x20000540
    3778:	2000051c 	.word	0x2000051c
    377c:	38e38e39 	.word	0x38e38e39
    3780:	200016a8 	.word	0x200016a8

00003784 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    3784:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3788:	4681      	mov	r9, r0
    378a:	4688      	mov	r8, r1
    378c:	4617      	mov	r7, r2
	size_t size = (__usb_data_end - __usb_data_start);
    378e:	4e10      	ldr	r6, [pc, #64]	; (37d0 <vendor_handler+0x4c>)
    3790:	4b10      	ldr	r3, [pc, #64]	; (37d4 <vendor_handler+0x50>)
    3792:	1af6      	subs	r6, r6, r3
    3794:	10b3      	asrs	r3, r6, #2
    3796:	4e10      	ldr	r6, [pc, #64]	; (37d8 <vendor_handler+0x54>)
    3798:	fb06 f603 	mul.w	r6, r6, r3
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	for (size_t i = 0; i < size; i++) {
    379c:	2400      	movs	r4, #0
    379e:	e000      	b.n	37a2 <vendor_handler+0x1e>
    37a0:	3401      	adds	r4, #1
    37a2:	42a6      	cmp	r6, r4
    37a4:	d90f      	bls.n	37c6 <vendor_handler+0x42>
		iface = &(__usb_data_start[i].interface);
		if (iface->vendor_handler) {
    37a6:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    37aa:	4d0a      	ldr	r5, [pc, #40]	; (37d4 <vendor_handler+0x50>)
    37ac:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    37b0:	695b      	ldr	r3, [r3, #20]
    37b2:	2b00      	cmp	r3, #0
    37b4:	d0f4      	beq.n	37a0 <vendor_handler+0x1c>
			if (!iface->vendor_handler(pSetup, len, data)) {
    37b6:	463a      	mov	r2, r7
    37b8:	4641      	mov	r1, r8
    37ba:	4648      	mov	r0, r9
    37bc:	4798      	blx	r3
    37be:	4603      	mov	r3, r0
    37c0:	2800      	cmp	r0, #0
    37c2:	d1ed      	bne.n	37a0 <vendor_handler+0x1c>
    37c4:	e001      	b.n	37ca <vendor_handler+0x46>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    37c6:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    37ca:	4618      	mov	r0, r3
    37cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    37d0:	20000540 	.word	0x20000540
    37d4:	2000051c 	.word	0x2000051c
    37d8:	38e38e39 	.word	0x38e38e39

000037dc <usb_halt_endpoint_req>:
{
    37dc:	b570      	push	{r4, r5, r6, lr}
    37de:	b082      	sub	sp, #8
    37e0:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    37e2:	7904      	ldrb	r4, [r0, #4]
    37e4:	f88d 4007 	strb.w	r4, [sp, #7]
	if (!is_ep_valid(ep)) {
    37e8:	4620      	mov	r0, r4
    37ea:	f7ff fee9 	bl	35c0 <is_ep_valid>
    37ee:	4606      	mov	r6, r0
    37f0:	b130      	cbz	r0, 3800 <usb_halt_endpoint_req+0x24>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    37f2:	f034 0380 	bics.w	r3, r4, #128	; 0x80
    37f6:	d006      	beq.n	3806 <usb_halt_endpoint_req+0x2a>
    37f8:	f7ff fec6 	bl	3588 <is_device_configured>
    37fc:	b918      	cbnz	r0, 3806 <usb_halt_endpoint_req+0x2a>
	return false;
    37fe:	4606      	mov	r6, r0
}
    3800:	4630      	mov	r0, r6
    3802:	b002      	add	sp, #8
    3804:	bd70      	pop	{r4, r5, r6, pc}
		if (halt) {
    3806:	b15d      	cbz	r5, 3820 <usb_halt_endpoint_req+0x44>
			usb_dc_ep_set_stall(ep);
    3808:	4620      	mov	r0, r4
    380a:	f004 fa35 	bl	7c78 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    380e:	4b0a      	ldr	r3, [pc, #40]	; (3838 <usb_halt_endpoint_req+0x5c>)
    3810:	69db      	ldr	r3, [r3, #28]
    3812:	2b00      	cmp	r3, #0
    3814:	d0f4      	beq.n	3800 <usb_halt_endpoint_req+0x24>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    3816:	f10d 0107 	add.w	r1, sp, #7
    381a:	2008      	movs	r0, #8
    381c:	4798      	blx	r3
    381e:	e7ef      	b.n	3800 <usb_halt_endpoint_req+0x24>
			usb_dc_ep_clear_stall(ep);
    3820:	4620      	mov	r0, r4
    3822:	f004 fa6f 	bl	7d04 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    3826:	4b04      	ldr	r3, [pc, #16]	; (3838 <usb_halt_endpoint_req+0x5c>)
    3828:	69db      	ldr	r3, [r3, #28]
    382a:	2b00      	cmp	r3, #0
    382c:	d0e8      	beq.n	3800 <usb_halt_endpoint_req+0x24>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    382e:	f10d 0107 	add.w	r1, sp, #7
    3832:	2009      	movs	r0, #9
    3834:	4798      	blx	r3
		return true;
    3836:	e7e3      	b.n	3800 <usb_halt_endpoint_req+0x24>
    3838:	200016a8 	.word	0x200016a8

0000383c <set_endpoint>:
{
    383c:	b500      	push	{lr}
    383e:	b083      	sub	sp, #12
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    3840:	7883      	ldrb	r3, [r0, #2]
    3842:	f88d 3000 	strb.w	r3, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    3846:	8883      	ldrh	r3, [r0, #4]
    3848:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    384c:	78c3      	ldrb	r3, [r0, #3]
    384e:	f003 0303 	and.w	r3, r3, #3
    3852:	f88d 3004 	strb.w	r3, [sp, #4]
	ret = usb_dc_ep_configure(&ep_cfg);
    3856:	4668      	mov	r0, sp
    3858:	f004 f9d0 	bl	7bfc <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    385c:	f110 0f78 	cmn.w	r0, #120	; 0x78
    3860:	d000      	beq.n	3864 <set_endpoint+0x28>
	} else if (ret) {
    3862:	b970      	cbnz	r0, 3882 <set_endpoint+0x46>
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    3864:	f89d 0000 	ldrb.w	r0, [sp]
    3868:	f004 fa96 	bl	7d98 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    386c:	f110 0f78 	cmn.w	r0, #120	; 0x78
    3870:	d000      	beq.n	3874 <set_endpoint+0x38>
	} else if (ret) {
    3872:	b9d0      	cbnz	r0, 38aa <set_endpoint+0x6e>
	usb_dev.configured = true;
    3874:	2001      	movs	r0, #1
    3876:	4b17      	ldr	r3, [pc, #92]	; (38d4 <set_endpoint+0x98>)
    3878:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
}
    387c:	b003      	add	sp, #12
    387e:	f85d fb04 	ldr.w	pc, [sp], #4
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    3882:	4b15      	ldr	r3, [pc, #84]	; (38d8 <set_endpoint+0x9c>)
    3884:	4a15      	ldr	r2, [pc, #84]	; (38dc <set_endpoint+0xa0>)
    3886:	1a9b      	subs	r3, r3, r2
    3888:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
    388a:	f04f 0200 	mov.w	r2, #0
    388e:	2101      	movs	r1, #1
    3890:	f361 0202 	bfi	r2, r1, #0, #3
    3894:	f36f 02c5 	bfc	r2, #3, #3
    3898:	f363 128f 	bfi	r2, r3, #6, #10
    389c:	f89d 1000 	ldrb.w	r1, [sp]
    38a0:	480f      	ldr	r0, [pc, #60]	; (38e0 <set_endpoint+0xa4>)
    38a2:	f7ff f989 	bl	2bb8 <log_1>
		return false;
    38a6:	2000      	movs	r0, #0
    38a8:	e7e8      	b.n	387c <set_endpoint+0x40>
    38aa:	4b0b      	ldr	r3, [pc, #44]	; (38d8 <set_endpoint+0x9c>)
    38ac:	4a0b      	ldr	r2, [pc, #44]	; (38dc <set_endpoint+0xa0>)
    38ae:	1a9b      	subs	r3, r3, r2
    38b0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    38b2:	f04f 0200 	mov.w	r2, #0
    38b6:	2101      	movs	r1, #1
    38b8:	f361 0202 	bfi	r2, r1, #0, #3
    38bc:	f36f 02c5 	bfc	r2, #3, #3
    38c0:	f363 128f 	bfi	r2, r3, #6, #10
    38c4:	f89d 1000 	ldrb.w	r1, [sp]
    38c8:	4806      	ldr	r0, [pc, #24]	; (38e4 <set_endpoint+0xa8>)
    38ca:	f7ff f975 	bl	2bb8 <log_1>
		return false;
    38ce:	2000      	movs	r0, #0
    38d0:	e7d4      	b.n	387c <set_endpoint+0x40>
    38d2:	bf00      	nop
    38d4:	200016a8 	.word	0x200016a8
    38d8:	00015f18 	.word	0x00015f18
    38dc:	00015ea8 	.word	0x00015ea8
    38e0:	00016210 	.word	0x00016210
    38e4:	00016234 	.word	0x00016234

000038e8 <usb_reset_alt_setting>:
{
    38e8:	b508      	push	{r3, lr}
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    38ea:	2208      	movs	r2, #8
    38ec:	2100      	movs	r1, #0
    38ee:	4802      	ldr	r0, [pc, #8]	; (38f8 <usb_reset_alt_setting+0x10>)
    38f0:	f00f f90a 	bl	12b08 <memset>
}
    38f4:	bd08      	pop	{r3, pc}
    38f6:	bf00      	nop
    38f8:	20001763 	.word	0x20001763

000038fc <usb_set_configuration>:
{
    38fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3900:	4605      	mov	r5, r0
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    3902:	4b23      	ldr	r3, [pc, #140]	; (3990 <usb_set_configuration+0x94>)
    3904:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	if (setup->wValue == 0U) {
    3906:	8843      	ldrh	r3, [r0, #2]
    3908:	b11b      	cbz	r3, 3912 <usb_set_configuration+0x16>
	bool found = false;
    390a:	2700      	movs	r7, #0
	uint8_t cur_config = 0xFF;
    390c:	26ff      	movs	r6, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    390e:	46b0      	mov	r8, r6
    3910:	e010      	b.n	3934 <usb_set_configuration+0x38>
		usb_reset_alt_setting();
    3912:	f7ff ffe9 	bl	38e8 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    3916:	886a      	ldrh	r2, [r5, #2]
    3918:	4b1d      	ldr	r3, [pc, #116]	; (3990 <usb_set_configuration+0x94>)
    391a:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		if (usb_dev.status_callback) {
    391e:	69db      	ldr	r3, [r3, #28]
    3920:	b113      	cbz	r3, 3928 <usb_set_configuration+0x2c>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    3922:	491c      	ldr	r1, [pc, #112]	; (3994 <usb_set_configuration+0x98>)
    3924:	2003      	movs	r0, #3
    3926:	4798      	blx	r3
		return true;
    3928:	2701      	movs	r7, #1
    392a:	e020      	b.n	396e <usb_set_configuration+0x72>
			cur_alt_setting =
    392c:	f894 8003 	ldrb.w	r8, [r4, #3]
		p += p[DESC_bLength];
    3930:	7823      	ldrb	r3, [r4, #0]
    3932:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
    3934:	7823      	ldrb	r3, [r4, #0]
    3936:	b1cb      	cbz	r3, 396c <usb_set_configuration+0x70>
		switch (p[DESC_bDescriptorType]) {
    3938:	7863      	ldrb	r3, [r4, #1]
    393a:	2b04      	cmp	r3, #4
    393c:	d0f6      	beq.n	392c <usb_set_configuration+0x30>
    393e:	2b05      	cmp	r3, #5
    3940:	d008      	beq.n	3954 <usb_set_configuration+0x58>
    3942:	2b02      	cmp	r3, #2
    3944:	d1f4      	bne.n	3930 <usb_set_configuration+0x34>
			cur_config = p[CONF_DESC_bConfigurationValue];
    3946:	7966      	ldrb	r6, [r4, #5]
			if (cur_config == setup->wValue) {
    3948:	b2b2      	uxth	r2, r6
    394a:	886b      	ldrh	r3, [r5, #2]
    394c:	429a      	cmp	r2, r3
    394e:	d1ef      	bne.n	3930 <usb_set_configuration+0x34>
				found = true;
    3950:	2701      	movs	r7, #1
    3952:	e7ed      	b.n	3930 <usb_set_configuration+0x34>
			if ((cur_config != setup->wValue) ||
    3954:	b2b3      	uxth	r3, r6
    3956:	886a      	ldrh	r2, [r5, #2]
    3958:	4293      	cmp	r3, r2
    395a:	d1e9      	bne.n	3930 <usb_set_configuration+0x34>
    395c:	f1b8 0f00 	cmp.w	r8, #0
    3960:	d1e6      	bne.n	3930 <usb_set_configuration+0x34>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    3962:	4620      	mov	r0, r4
    3964:	f7ff ff6a 	bl	383c <set_endpoint>
    3968:	4607      	mov	r7, r0
			break;
    396a:	e7e1      	b.n	3930 <usb_set_configuration+0x34>
	if (found) {
    396c:	b917      	cbnz	r7, 3974 <usb_set_configuration+0x78>
}
    396e:	4638      	mov	r0, r7
    3970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		usb_reset_alt_setting();
    3974:	f7ff ffb8 	bl	38e8 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    3978:	886a      	ldrh	r2, [r5, #2]
    397a:	4b05      	ldr	r3, [pc, #20]	; (3990 <usb_set_configuration+0x94>)
    397c:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		if (usb_dev.status_callback) {
    3980:	69db      	ldr	r3, [r3, #28]
    3982:	2b00      	cmp	r3, #0
    3984:	d0f3      	beq.n	396e <usb_set_configuration+0x72>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    3986:	4903      	ldr	r1, [pc, #12]	; (3994 <usb_set_configuration+0x98>)
    3988:	2003      	movs	r0, #3
    398a:	4798      	blx	r3
    398c:	e7ef      	b.n	396e <usb_set_configuration+0x72>
    398e:	bf00      	nop
    3990:	200016a8 	.word	0x200016a8
    3994:	20001762 	.word	0x20001762

00003998 <usb_handle_std_device_req>:
{
    3998:	b510      	push	{r4, lr}
	uint8_t *data = *data_buf;
    399a:	6814      	ldr	r4, [r2, #0]
	if (usb_reqtype_is_to_host(setup)) {
    399c:	f990 3000 	ldrsb.w	r3, [r0]
    39a0:	2b00      	cmp	r3, #0
    39a2:	db06      	blt.n	39b2 <usb_handle_std_device_req+0x1a>
		switch (setup->bRequest) {
    39a4:	7843      	ldrb	r3, [r0, #1]
    39a6:	2b05      	cmp	r3, #5
    39a8:	d018      	beq.n	39dc <usb_handle_std_device_req+0x44>
    39aa:	2b09      	cmp	r3, #9
    39ac:	d01d      	beq.n	39ea <usb_handle_std_device_req+0x52>
    39ae:	2000      	movs	r0, #0
}
    39b0:	bd10      	pop	{r4, pc}
		switch (setup->bRequest) {
    39b2:	7843      	ldrb	r3, [r0, #1]
    39b4:	2b06      	cmp	r3, #6
    39b6:	d007      	beq.n	39c8 <usb_handle_std_device_req+0x30>
    39b8:	2b08      	cmp	r3, #8
    39ba:	d008      	beq.n	39ce <usb_handle_std_device_req+0x36>
    39bc:	b10b      	cbz	r3, 39c2 <usb_handle_std_device_req+0x2a>
    39be:	2000      	movs	r0, #0
    39c0:	e7f6      	b.n	39b0 <usb_handle_std_device_req+0x18>
			return usb_get_status(setup, len, data_buf);
    39c2:	f00e fc51 	bl	12268 <usb_get_status>
    39c6:	e7f3      	b.n	39b0 <usb_handle_std_device_req+0x18>
			return usb_get_descriptor(setup, len, data_buf);
    39c8:	f7ff fd92 	bl	34f0 <usb_get_descriptor>
    39cc:	e7f0      	b.n	39b0 <usb_handle_std_device_req+0x18>
			data[0] = usb_dev.configuration;
    39ce:	4b08      	ldr	r3, [pc, #32]	; (39f0 <usb_handle_std_device_req+0x58>)
    39d0:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
    39d4:	7023      	strb	r3, [r4, #0]
			*len = 1;
    39d6:	2001      	movs	r0, #1
    39d8:	6008      	str	r0, [r1, #0]
			return true;
    39da:	e7e9      	b.n	39b0 <usb_handle_std_device_req+0x18>
			return !usb_dc_set_address(setup->wValue);
    39dc:	7880      	ldrb	r0, [r0, #2]
    39de:	f004 f8b7 	bl	7b50 <usb_dc_set_address>
    39e2:	fab0 f080 	clz	r0, r0
    39e6:	0940      	lsrs	r0, r0, #5
    39e8:	e7e2      	b.n	39b0 <usb_handle_std_device_req+0x18>
			return usb_set_configuration(setup);
    39ea:	f7ff ff87 	bl	38fc <usb_set_configuration>
    39ee:	e7df      	b.n	39b0 <usb_handle_std_device_req+0x18>
    39f0:	200016a8 	.word	0x200016a8

000039f4 <reset_endpoint>:
{
    39f4:	b510      	push	{r4, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    39f6:	7884      	ldrb	r4, [r0, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    39f8:	4620      	mov	r0, r4
    39fa:	f000 fdcb 	bl	4594 <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
    39fe:	4620      	mov	r0, r4
    3a00:	f004 f9f8 	bl	7df4 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    3a04:	f110 0f78 	cmn.w	r0, #120	; 0x78
    3a08:	d015      	beq.n	3a36 <reset_endpoint+0x42>
	} else if (ret) {
    3a0a:	b908      	cbnz	r0, 3a10 <reset_endpoint+0x1c>
	return true;
    3a0c:	2001      	movs	r0, #1
}
    3a0e:	bd10      	pop	{r4, pc}
    3a10:	4b0a      	ldr	r3, [pc, #40]	; (3a3c <reset_endpoint+0x48>)
    3a12:	4a0b      	ldr	r2, [pc, #44]	; (3a40 <reset_endpoint+0x4c>)
    3a14:	1a9b      	subs	r3, r3, r2
    3a16:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_cfg.ep_addr);
    3a18:	f04f 0200 	mov.w	r2, #0
    3a1c:	2101      	movs	r1, #1
    3a1e:	f361 0202 	bfi	r2, r1, #0, #3
    3a22:	f36f 02c5 	bfc	r2, #3, #3
    3a26:	f363 128f 	bfi	r2, r3, #6, #10
    3a2a:	4621      	mov	r1, r4
    3a2c:	4805      	ldr	r0, [pc, #20]	; (3a44 <reset_endpoint+0x50>)
    3a2e:	f7ff f8c3 	bl	2bb8 <log_1>
		return false;
    3a32:	2000      	movs	r0, #0
    3a34:	e7eb      	b.n	3a0e <reset_endpoint+0x1a>
	return true;
    3a36:	2001      	movs	r0, #1
    3a38:	e7e9      	b.n	3a0e <reset_endpoint+0x1a>
    3a3a:	bf00      	nop
    3a3c:	00015f18 	.word	0x00015f18
    3a40:	00015ea8 	.word	0x00015ea8
    3a44:	00016258 	.word	0x00016258

00003a48 <usb_set_interface>:
{
    3a48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3a4c:	4606      	mov	r6, r0
	const uint8_t *p = usb_dev.descriptors;
    3a4e:	4b1b      	ldr	r3, [pc, #108]	; (3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>)
    3a50:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	bool ret = false;
    3a52:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
    3a54:	25ff      	movs	r5, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    3a56:	46a8      	mov	r8, r5
	const uint8_t *if_desc = NULL;
    3a58:	46b9      	mov	r9, r7
    3a5a:	e008      	b.n	3a6e <usb_set_interface+0x26>
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    3a5c:	f894 8003 	ldrb.w	r8, [r4, #3]
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    3a60:	78a5      	ldrb	r5, [r4, #2]
			if (cur_iface == setup->wIndex &&
    3a62:	b2ab      	uxth	r3, r5
    3a64:	88b0      	ldrh	r0, [r6, #4]
    3a66:	4283      	cmp	r3, r0
    3a68:	d013      	beq.n	3a92 <usb_set_interface+0x4a>
		p += p[DESC_bLength];
    3a6a:	7823      	ldrb	r3, [r4, #0]
    3a6c:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
    3a6e:	7823      	ldrb	r3, [r4, #0]
    3a70:	b1db      	cbz	r3, 3aaa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12>
		switch (p[DESC_bDescriptorType]) {
    3a72:	7863      	ldrb	r3, [r4, #1]
    3a74:	2b04      	cmp	r3, #4
    3a76:	d0f1      	beq.n	3a5c <usb_set_interface+0x14>
    3a78:	2b05      	cmp	r3, #5
    3a7a:	d1f6      	bne.n	3a6a <usb_set_interface+0x22>
			if (cur_iface == setup->wIndex) {
    3a7c:	b2ab      	uxth	r3, r5
    3a7e:	88b2      	ldrh	r2, [r6, #4]
    3a80:	4293      	cmp	r3, r2
    3a82:	d1f2      	bne.n	3a6a <usb_set_interface+0x22>
				ret = usb_eps_reconfigure(ep, cur_alt_setting,
    3a84:	78b2      	ldrb	r2, [r6, #2]
    3a86:	4641      	mov	r1, r8
    3a88:	4620      	mov	r0, r4
    3a8a:	f00e fbf7 	bl	1227c <usb_eps_reconfigure>
    3a8e:	4607      	mov	r7, r0
    3a90:	e7eb      	b.n	3a6a <usb_set_interface+0x22>
			    cur_alt_setting == setup->wValue) {
    3a92:	fa1f f388 	uxth.w	r3, r8
    3a96:	8871      	ldrh	r1, [r6, #2]
			if (cur_iface == setup->wIndex &&
    3a98:	428b      	cmp	r3, r1
    3a9a:	d1e6      	bne.n	3a6a <usb_set_interface+0x22>
				ret = usb_set_alt_setting(setup->wIndex,
    3a9c:	b2c9      	uxtb	r1, r1
    3a9e:	b2c0      	uxtb	r0, r0
    3aa0:	f7ff fcec 	bl	347c <usb_set_alt_setting>
    3aa4:	4607      	mov	r7, r0
				if_desc = (void *)p;
    3aa6:	46a1      	mov	r9, r4
    3aa8:	e7df      	b.n	3a6a <usb_set_interface+0x22>
	if (usb_dev.status_callback) {
    3aaa:	4b04      	ldr	r3, [pc, #16]	; (3abc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x24>)
    3aac:	69db      	ldr	r3, [r3, #28]
    3aae:	b113      	cbz	r3, 3ab6 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x1e>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    3ab0:	4649      	mov	r1, r9
    3ab2:	2007      	movs	r0, #7
    3ab4:	4798      	blx	r3
}
    3ab6:	4638      	mov	r0, r7
    3ab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3abc:	200016a8 	.word	0x200016a8

00003ac0 <usb_handle_standard_request>:
{
    3ac0:	b570      	push	{r4, r5, r6, lr}
    3ac2:	4604      	mov	r4, r0
    3ac4:	460d      	mov	r5, r1
    3ac6:	4616      	mov	r6, r2
	if (usb_dev.custom_req_handler &&
    3ac8:	4b18      	ldr	r3, [pc, #96]	; (3b2c <usb_handle_standard_request+0x6c>)
    3aca:	699b      	ldr	r3, [r3, #24]
    3acc:	b10b      	cbz	r3, 3ad2 <usb_handle_standard_request+0x12>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    3ace:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    3ad0:	b148      	cbz	r0, 3ae6 <usb_handle_standard_request+0x26>
	switch (setup->RequestType.recipient) {
    3ad2:	7823      	ldrb	r3, [r4, #0]
    3ad4:	f003 031f 	and.w	r3, r3, #31
    3ad8:	2b01      	cmp	r3, #1
    3ada:	d00d      	beq.n	3af8 <usb_handle_standard_request+0x38>
    3adc:	2b02      	cmp	r3, #2
    3ade:	d013      	beq.n	3b08 <usb_handle_standard_request+0x48>
    3ae0:	b113      	cbz	r3, 3ae8 <usb_handle_standard_request+0x28>
    3ae2:	f06f 0015 	mvn.w	r0, #21
}
    3ae6:	bd70      	pop	{r4, r5, r6, pc}
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    3ae8:	4632      	mov	r2, r6
    3aea:	4629      	mov	r1, r5
    3aec:	4620      	mov	r0, r4
    3aee:	f7ff ff53 	bl	3998 <usb_handle_std_device_req>
    3af2:	b188      	cbz	r0, 3b18 <usb_handle_standard_request+0x58>
	int rc = 0;
    3af4:	2000      	movs	r0, #0
    3af6:	e7f6      	b.n	3ae6 <usb_handle_standard_request+0x26>
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    3af8:	4632      	mov	r2, r6
    3afa:	4629      	mov	r1, r5
    3afc:	4620      	mov	r0, r4
    3afe:	f00e fbc6 	bl	1228e <usb_handle_std_interface_req>
    3b02:	b160      	cbz	r0, 3b1e <usb_handle_standard_request+0x5e>
	int rc = 0;
    3b04:	2000      	movs	r0, #0
    3b06:	e7ee      	b.n	3ae6 <usb_handle_standard_request+0x26>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    3b08:	4632      	mov	r2, r6
    3b0a:	4629      	mov	r1, r5
    3b0c:	4620      	mov	r0, r4
    3b0e:	f00e fc0b 	bl	12328 <usb_handle_std_endpoint_req>
    3b12:	b138      	cbz	r0, 3b24 <usb_handle_standard_request+0x64>
	int rc = 0;
    3b14:	2000      	movs	r0, #0
    3b16:	e7e6      	b.n	3ae6 <usb_handle_standard_request+0x26>
			rc = -EINVAL;
    3b18:	f06f 0015 	mvn.w	r0, #21
    3b1c:	e7e3      	b.n	3ae6 <usb_handle_standard_request+0x26>
			rc = -EINVAL;
    3b1e:	f06f 0015 	mvn.w	r0, #21
    3b22:	e7e0      	b.n	3ae6 <usb_handle_standard_request+0x26>
			rc = -EINVAL;
    3b24:	f06f 0015 	mvn.w	r0, #21
    3b28:	e7dd      	b.n	3ae6 <usb_handle_standard_request+0x26>
    3b2a:	bf00      	nop
    3b2c:	200016a8 	.word	0x200016a8

00003b30 <composite_setup_ep_cb>:

static int composite_setup_ep_cb(void)
{
    3b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	size_t size = (__usb_data_end - __usb_data_start);
    3b32:	4f15      	ldr	r7, [pc, #84]	; (3b88 <composite_setup_ep_cb+0x58>)
    3b34:	4b15      	ldr	r3, [pc, #84]	; (3b8c <composite_setup_ep_cb+0x5c>)
    3b36:	1aff      	subs	r7, r7, r3
    3b38:	10bb      	asrs	r3, r7, #2
    3b3a:	4f15      	ldr	r7, [pc, #84]	; (3b90 <composite_setup_ep_cb+0x60>)
    3b3c:	fb07 f703 	mul.w	r7, r7, r3
	struct usb_ep_cfg_data *ep_data;

	for (size_t i = 0; i < size; i++) {
    3b40:	2500      	movs	r5, #0
    3b42:	42af      	cmp	r7, r5
    3b44:	d91b      	bls.n	3b7e <composite_setup_ep_cb+0x4e>
		ep_data = __usb_data_start[i].endpoint;
    3b46:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    3b4a:	4a10      	ldr	r2, [pc, #64]	; (3b8c <composite_setup_ep_cb+0x5c>)
    3b4c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3b50:	6a1e      	ldr	r6, [r3, #32]
		for (uint8_t n = 0; n < __usb_data_start[i].num_endpoints; n++) {
    3b52:	2400      	movs	r4, #0
    3b54:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    3b58:	4a0c      	ldr	r2, [pc, #48]	; (3b8c <composite_setup_ep_cb+0x5c>)
    3b5a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3b5e:	7f1b      	ldrb	r3, [r3, #28]
    3b60:	429c      	cmp	r4, r3
    3b62:	d20a      	bcs.n	3b7a <composite_setup_ep_cb+0x4a>
			LOG_DBG("set cb, ep: 0x%x", ep_data[n].ep_addr);
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    3b64:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
    3b68:	f856 1034 	ldr.w	r1, [r6, r4, lsl #3]
    3b6c:	7918      	ldrb	r0, [r3, #4]
    3b6e:	f004 fb5d 	bl	822c <usb_dc_ep_set_callback>
    3b72:	b930      	cbnz	r0, 3b82 <composite_setup_ep_cb+0x52>
		for (uint8_t n = 0; n < __usb_data_start[i].num_endpoints; n++) {
    3b74:	3401      	adds	r4, #1
    3b76:	b2e4      	uxtb	r4, r4
    3b78:	e7ec      	b.n	3b54 <composite_setup_ep_cb+0x24>
	for (size_t i = 0; i < size; i++) {
    3b7a:	3501      	adds	r5, #1
    3b7c:	e7e1      	b.n	3b42 <composite_setup_ep_cb+0x12>
				return -1;
			}
		}
	}

	return 0;
    3b7e:	2000      	movs	r0, #0
    3b80:	e001      	b.n	3b86 <composite_setup_ep_cb+0x56>
				return -1;
    3b82:	f04f 30ff 	mov.w	r0, #4294967295
}
    3b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3b88:	20000540 	.word	0x20000540
    3b8c:	2000051c 	.word	0x2000051c
    3b90:	38e38e39 	.word	0x38e38e39

00003b94 <forward_status_cb>:
{
    3b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3b96:	4606      	mov	r6, r0
    3b98:	460f      	mov	r7, r1
	size_t size = (__usb_data_end - __usb_data_start);
    3b9a:	4d1c      	ldr	r5, [pc, #112]	; (3c0c <forward_status_cb+0x78>)
    3b9c:	4b1c      	ldr	r3, [pc, #112]	; (3c10 <forward_status_cb+0x7c>)
    3b9e:	1aed      	subs	r5, r5, r3
    3ba0:	10ab      	asrs	r3, r5, #2
    3ba2:	4d1c      	ldr	r5, [pc, #112]	; (3c14 <forward_status_cb+0x80>)
    3ba4:	fb05 f503 	mul.w	r5, r5, r3
	if (status == USB_DC_DISCONNECTED) {
    3ba8:	2804      	cmp	r0, #4
    3baa:	d005      	beq.n	3bb8 <forward_status_cb+0x24>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND) {
    3bac:	1f33      	subs	r3, r6, #4
    3bae:	b2db      	uxtb	r3, r3
    3bb0:	2b01      	cmp	r3, #1
    3bb2:	d904      	bls.n	3bbe <forward_status_cb+0x2a>
{
    3bb4:	2400      	movs	r4, #0
    3bb6:	e014      	b.n	3be2 <forward_status_cb+0x4e>
		usb_reset_alt_setting();
    3bb8:	f7ff fe96 	bl	38e8 <usb_reset_alt_setting>
    3bbc:	e7f6      	b.n	3bac <forward_status_cb+0x18>
		if (usb_dev.configured) {
    3bbe:	4b16      	ldr	r3, [pc, #88]	; (3c18 <forward_status_cb+0x84>)
    3bc0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
    3bc4:	2b00      	cmp	r3, #0
    3bc6:	d0f5      	beq.n	3bb4 <forward_status_cb+0x20>
			usb_cancel_transfers();
    3bc8:	f000 fd04 	bl	45d4 <usb_cancel_transfers>
			if (status == USB_DC_DISCONNECTED) {
    3bcc:	2e04      	cmp	r6, #4
    3bce:	d1f1      	bne.n	3bb4 <forward_status_cb+0x20>
				foreach_ep(disable_interface_ep);
    3bd0:	4812      	ldr	r0, [pc, #72]	; (3c1c <forward_status_cb+0x88>)
    3bd2:	f7ff fd35 	bl	3640 <foreach_ep>
				usb_dev.configured = false;
    3bd6:	4b10      	ldr	r3, [pc, #64]	; (3c18 <forward_status_cb+0x84>)
    3bd8:	2200      	movs	r2, #0
    3bda:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
    3bde:	e7e9      	b.n	3bb4 <forward_status_cb+0x20>
	for (size_t i = 0; i < size; i++) {
    3be0:	3401      	adds	r4, #1
    3be2:	42ac      	cmp	r4, r5
    3be4:	d20b      	bcs.n	3bfe <forward_status_cb+0x6a>
		struct usb_cfg_data *cfg = &__usb_data_start[i];
    3be6:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
    3bea:	4b09      	ldr	r3, [pc, #36]	; (3c10 <forward_status_cb+0x7c>)
    3bec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
		if (cfg->cb_usb_status) {
    3bf0:	68c3      	ldr	r3, [r0, #12]
    3bf2:	2b00      	cmp	r3, #0
    3bf4:	d0f4      	beq.n	3be0 <forward_status_cb+0x4c>
			cfg->cb_usb_status(cfg, status, param);
    3bf6:	463a      	mov	r2, r7
    3bf8:	4631      	mov	r1, r6
    3bfa:	4798      	blx	r3
    3bfc:	e7f0      	b.n	3be0 <forward_status_cb+0x4c>
	if (usb_dev.user_status_callback) {
    3bfe:	4b06      	ldr	r3, [pc, #24]	; (3c18 <forward_status_cb+0x84>)
    3c00:	6a1b      	ldr	r3, [r3, #32]
    3c02:	b113      	cbz	r3, 3c0a <forward_status_cb+0x76>
		usb_dev.user_status_callback(status, param);
    3c04:	4639      	mov	r1, r7
    3c06:	4630      	mov	r0, r6
    3c08:	4798      	blx	r3
}
    3c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c0c:	20000540 	.word	0x20000540
    3c10:	2000051c 	.word	0x2000051c
    3c14:	38e38e39 	.word	0x38e38e39
    3c18:	200016a8 	.word	0x200016a8
    3c1c:	000122e9 	.word	0x000122e9

00003c20 <usb_data_to_host>:
{
    3c20:	b510      	push	{r4, lr}
    3c22:	b082      	sub	sp, #8
	if (usb_dev.zlp_flag == false) {
    3c24:	4b13      	ldr	r3, [pc, #76]	; (3c74 <usb_data_to_host+0x54>)
    3c26:	7d1b      	ldrb	r3, [r3, #20]
    3c28:	b9cb      	cbnz	r3, 3c5e <usb_data_to_host+0x3e>
		uint32_t chunk = usb_dev.data_buf_residue;
    3c2a:	4c12      	ldr	r4, [pc, #72]	; (3c74 <usb_data_to_host+0x54>)
    3c2c:	68e2      	ldr	r2, [r4, #12]
    3c2e:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    3c30:	ab01      	add	r3, sp, #4
    3c32:	68a1      	ldr	r1, [r4, #8]
    3c34:	2080      	movs	r0, #128	; 0x80
    3c36:	f00e fb9a 	bl	1236e <usb_write>
		usb_dev.data_buf += chunk;
    3c3a:	9901      	ldr	r1, [sp, #4]
    3c3c:	68a2      	ldr	r2, [r4, #8]
    3c3e:	440a      	add	r2, r1
    3c40:	60a2      	str	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    3c42:	68e3      	ldr	r3, [r4, #12]
    3c44:	1a5b      	subs	r3, r3, r1
    3c46:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue &&
    3c48:	b98b      	cbnz	r3, 3c6e <usb_data_to_host+0x4e>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    3c4a:	88e2      	ldrh	r2, [r4, #6]
    3c4c:	6923      	ldr	r3, [r4, #16]
		if (!usb_dev.data_buf_residue &&
    3c4e:	429a      	cmp	r2, r3
    3c50:	dd0d      	ble.n	3c6e <usb_data_to_host+0x4e>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
    3c52:	f013 0f3f 	tst.w	r3, #63	; 0x3f
    3c56:	d10a      	bne.n	3c6e <usb_data_to_host+0x4e>
				usb_dev.zlp_flag = true;
    3c58:	2201      	movs	r2, #1
    3c5a:	7522      	strb	r2, [r4, #20]
    3c5c:	e007      	b.n	3c6e <usb_data_to_host+0x4e>
		usb_dev.zlp_flag = false;
    3c5e:	2100      	movs	r1, #0
    3c60:	4b04      	ldr	r3, [pc, #16]	; (3c74 <usb_data_to_host+0x54>)
    3c62:	7519      	strb	r1, [r3, #20]
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    3c64:	460b      	mov	r3, r1
    3c66:	460a      	mov	r2, r1
    3c68:	2080      	movs	r0, #128	; 0x80
    3c6a:	f004 f8ed 	bl	7e48 <usb_dc_ep_write>
}
    3c6e:	b002      	add	sp, #8
    3c70:	bd10      	pop	{r4, pc}
    3c72:	bf00      	nop
    3c74:	200016a8 	.word	0x200016a8

00003c78 <usb_handle_control_transfer>:
{
    3c78:	b510      	push	{r4, lr}
    3c7a:	b084      	sub	sp, #16
	uint32_t chunk = 0U;
    3c7c:	2300      	movs	r3, #0
    3c7e:	9303      	str	r3, [sp, #12]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    3c80:	4604      	mov	r4, r0
    3c82:	b900      	cbnz	r0, 3c86 <usb_handle_control_transfer+0xe>
    3c84:	b331      	cbz	r1, 3cd4 <usb_handle_control_transfer+0x5c>
	} else if (ep == USB_CONTROL_EP_OUT) {
    3c86:	2c00      	cmp	r4, #0
    3c88:	f040 8094 	bne.w	3db4 <usb_handle_control_transfer+0x13c>
		if (usb_dev.data_buf_residue <= 0) {
    3c8c:	4b50      	ldr	r3, [pc, #320]	; (3dd0 <usb_handle_control_transfer+0x158>)
    3c8e:	68da      	ldr	r2, [r3, #12]
    3c90:	2a00      	cmp	r2, #0
    3c92:	dd77      	ble.n	3d84 <usb_handle_control_transfer+0x10c>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    3c94:	ab03      	add	r3, sp, #12
    3c96:	494e      	ldr	r1, [pc, #312]	; (3dd0 <usb_handle_control_transfer+0x158>)
    3c98:	6889      	ldr	r1, [r1, #8]
    3c9a:	2000      	movs	r0, #0
    3c9c:	f00f fabb 	bl	13216 <usb_dc_ep_read>
    3ca0:	2800      	cmp	r0, #0
    3ca2:	db7c      	blt.n	3d9e <usb_handle_control_transfer+0x126>
		usb_dev.data_buf += chunk;
    3ca4:	9803      	ldr	r0, [sp, #12]
    3ca6:	4a4a      	ldr	r2, [pc, #296]	; (3dd0 <usb_handle_control_transfer+0x158>)
    3ca8:	6891      	ldr	r1, [r2, #8]
    3caa:	4401      	add	r1, r0
    3cac:	6091      	str	r1, [r2, #8]
		usb_dev.data_buf_residue -= chunk;
    3cae:	68d3      	ldr	r3, [r2, #12]
    3cb0:	1a1b      	subs	r3, r3, r0
    3cb2:	60d3      	str	r3, [r2, #12]
		if (usb_dev.data_buf_residue == 0) {
    3cb4:	2b00      	cmp	r3, #0
    3cb6:	d17f      	bne.n	3db8 <usb_handle_control_transfer+0x140>
			usb_dev.data_buf = usb_dev.req_data;
    3cb8:	4610      	mov	r0, r2
    3cba:	f102 0338 	add.w	r3, r2, #56	; 0x38
    3cbe:	f842 3f08 	str.w	r3, [r2, #8]!
			if (!usb_handle_request(setup,
    3cc2:	f100 0110 	add.w	r1, r0, #16
    3cc6:	f7ff fbf1 	bl	34ac <usb_handle_request>
    3cca:	2800      	cmp	r0, #0
    3ccc:	d06e      	beq.n	3dac <usb_handle_control_transfer+0x134>
			usb_data_to_host();
    3cce:	f7ff ffa7 	bl	3c20 <usb_data_to_host>
    3cd2:	e071      	b.n	3db8 <usb_handle_control_transfer+0x140>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    3cd4:	2208      	movs	r2, #8
    3cd6:	a901      	add	r1, sp, #4
    3cd8:	f00f fa9d 	bl	13216 <usb_dc_ep_read>
    3cdc:	2800      	cmp	r0, #0
    3cde:	db2e      	blt.n	3d3e <usb_handle_control_transfer+0xc6>
		setup->bmRequestType = setup_raw.bmRequestType;
    3ce0:	f89d 0004 	ldrb.w	r0, [sp, #4]
    3ce4:	4b3a      	ldr	r3, [pc, #232]	; (3dd0 <usb_handle_control_transfer+0x158>)
    3ce6:	7018      	strb	r0, [r3, #0]
		setup->bRequest = setup_raw.bRequest;
    3ce8:	f89d 2005 	ldrb.w	r2, [sp, #5]
    3cec:	705a      	strb	r2, [r3, #1]
		setup->wValue = sys_le16_to_cpu(setup_raw.wValue);
    3cee:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    3cf2:	805a      	strh	r2, [r3, #2]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    3cf4:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    3cf8:	809a      	strh	r2, [r3, #4]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    3cfa:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    3cfe:	80d9      	strh	r1, [r3, #6]
		usb_dev.data_buf = usb_dev.req_data;
    3d00:	f103 0238 	add.w	r2, r3, #56	; 0x38
    3d04:	609a      	str	r2, [r3, #8]
		usb_dev.zlp_flag = false;
    3d06:	2200      	movs	r2, #0
    3d08:	751a      	strb	r2, [r3, #20]
		usb_dev.data_buf_len = 0;
    3d0a:	611a      	str	r2, [r3, #16]
		usb_dev.data_buf_residue = 0;
    3d0c:	60da      	str	r2, [r3, #12]
		if (usb_reqtype_is_to_device(setup)) {
    3d0e:	f010 0f80 	tst.w	r0, #128	; 0x80
    3d12:	d102      	bne.n	3d1a <usb_handle_control_transfer+0xa2>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    3d14:	2980      	cmp	r1, #128	; 0x80
    3d16:	d816      	bhi.n	3d46 <usb_handle_control_transfer+0xce>
			if (setup->wLength) {
    3d18:	bb61      	cbnz	r1, 3d74 <usb_handle_control_transfer+0xfc>
		if (!usb_handle_request(setup,
    3d1a:	482d      	ldr	r0, [pc, #180]	; (3dd0 <usb_handle_control_transfer+0x158>)
    3d1c:	f100 0208 	add.w	r2, r0, #8
    3d20:	f100 0110 	add.w	r1, r0, #16
    3d24:	f7ff fbc2 	bl	34ac <usb_handle_request>
    3d28:	b340      	cbz	r0, 3d7c <usb_handle_control_transfer+0x104>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    3d2a:	4b29      	ldr	r3, [pc, #164]	; (3dd0 <usb_handle_control_transfer+0x158>)
    3d2c:	88da      	ldrh	r2, [r3, #6]
    3d2e:	6919      	ldr	r1, [r3, #16]
    3d30:	428a      	cmp	r2, r1
    3d32:	bfa8      	it	ge
    3d34:	460a      	movge	r2, r1
    3d36:	60da      	str	r2, [r3, #12]
		usb_data_to_host();
    3d38:	f7ff ff72 	bl	3c20 <usb_data_to_host>
    3d3c:	e03c      	b.n	3db8 <usb_handle_control_transfer+0x140>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    3d3e:	2080      	movs	r0, #128	; 0x80
    3d40:	f003 ff9a 	bl	7c78 <usb_dc_ep_set_stall>
			return;
    3d44:	e038      	b.n	3db8 <usb_handle_control_transfer+0x140>
    3d46:	4b23      	ldr	r3, [pc, #140]	; (3dd4 <usb_handle_control_transfer+0x15c>)
    3d48:	4a23      	ldr	r2, [pc, #140]	; (3dd8 <usb_handle_control_transfer+0x160>)
    3d4a:	1a9b      	subs	r3, r3, r2
    3d4c:	08db      	lsrs	r3, r3, #3
				LOG_ERR("Request buffer too small");
    3d4e:	f04f 0100 	mov.w	r1, #0
    3d52:	2201      	movs	r2, #1
    3d54:	f362 0102 	bfi	r1, r2, #0, #3
    3d58:	f36f 01c5 	bfc	r1, #3, #3
    3d5c:	f363 118f 	bfi	r1, r3, #6, #10
    3d60:	481e      	ldr	r0, [pc, #120]	; (3ddc <usb_handle_control_transfer+0x164>)
    3d62:	f7fe ffbd 	bl	2ce0 <log_0>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    3d66:	2080      	movs	r0, #128	; 0x80
    3d68:	f003 ff86 	bl	7c78 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    3d6c:	2000      	movs	r0, #0
    3d6e:	f003 ff83 	bl	7c78 <usb_dc_ep_set_stall>
				return;
    3d72:	e021      	b.n	3db8 <usb_handle_control_transfer+0x140>
				usb_dev.data_buf_len = setup->wLength;
    3d74:	4b16      	ldr	r3, [pc, #88]	; (3dd0 <usb_handle_control_transfer+0x158>)
    3d76:	6119      	str	r1, [r3, #16]
				usb_dev.data_buf_residue = setup->wLength;
    3d78:	60d9      	str	r1, [r3, #12]
				return;
    3d7a:	e01d      	b.n	3db8 <usb_handle_control_transfer+0x140>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    3d7c:	2080      	movs	r0, #128	; 0x80
    3d7e:	f003 ff7b 	bl	7c78 <usb_dc_ep_set_stall>
			return;
    3d82:	e019      	b.n	3db8 <usb_handle_control_transfer+0x140>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    3d84:	ab03      	add	r3, sp, #12
    3d86:	2200      	movs	r2, #0
    3d88:	4911      	ldr	r1, [pc, #68]	; (3dd0 <usb_handle_control_transfer+0x158>)
    3d8a:	6889      	ldr	r1, [r1, #8]
    3d8c:	4610      	mov	r0, r2
    3d8e:	f00f fa42 	bl	13216 <usb_dc_ep_read>
    3d92:	2800      	cmp	r0, #0
    3d94:	da10      	bge.n	3db8 <usb_handle_control_transfer+0x140>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    3d96:	2080      	movs	r0, #128	; 0x80
    3d98:	f003 ff6e 	bl	7c78 <usb_dc_ep_set_stall>
			return;
    3d9c:	e00c      	b.n	3db8 <usb_handle_control_transfer+0x140>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    3d9e:	2080      	movs	r0, #128	; 0x80
    3da0:	f003 ff6a 	bl	7c78 <usb_dc_ep_set_stall>
			usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    3da4:	2000      	movs	r0, #0
    3da6:	f003 ff67 	bl	7c78 <usb_dc_ep_set_stall>
			return;
    3daa:	e005      	b.n	3db8 <usb_handle_control_transfer+0x140>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    3dac:	2080      	movs	r0, #128	; 0x80
    3dae:	f003 ff63 	bl	7c78 <usb_dc_ep_set_stall>
				return;
    3db2:	e001      	b.n	3db8 <usb_handle_control_transfer+0x140>
	} else if (ep == USB_CONTROL_EP_IN) {
    3db4:	2c80      	cmp	r4, #128	; 0x80
    3db6:	d001      	beq.n	3dbc <usb_handle_control_transfer+0x144>
}
    3db8:	b004      	add	sp, #16
    3dba:	bd10      	pop	{r4, pc}
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    3dbc:	4b04      	ldr	r3, [pc, #16]	; (3dd0 <usb_handle_control_transfer+0x158>)
    3dbe:	68db      	ldr	r3, [r3, #12]
    3dc0:	b91b      	cbnz	r3, 3dca <usb_handle_control_transfer+0x152>
    3dc2:	4b03      	ldr	r3, [pc, #12]	; (3dd0 <usb_handle_control_transfer+0x158>)
    3dc4:	7d1b      	ldrb	r3, [r3, #20]
    3dc6:	2b00      	cmp	r3, #0
    3dc8:	d0f6      	beq.n	3db8 <usb_handle_control_transfer+0x140>
			usb_data_to_host();
    3dca:	f7ff ff29 	bl	3c20 <usb_data_to_host>
		__ASSERT_NO_MSG(false);
    3dce:	e7f3      	b.n	3db8 <usb_handle_control_transfer+0x140>
    3dd0:	200016a8 	.word	0x200016a8
    3dd4:	00015f18 	.word	0x00015f18
    3dd8:	00015ea8 	.word	0x00015ea8
    3ddc:	0001627c 	.word	0x0001627c

00003de0 <usb_set_config>:

int usb_set_config(const uint8_t *device_descriptor)
{
    3de0:	b508      	push	{r3, lr}
	/* register descriptors */
	usb_register_descriptors(device_descriptor);
    3de2:	f7ff fb7f 	bl	34e4 <usb_register_descriptors>

	/* register standard request handler */
	usb_register_request_handler(USB_REQTYPE_TYPE_STANDARD,
    3de6:	4908      	ldr	r1, [pc, #32]	; (3e08 <usb_set_config+0x28>)
    3de8:	2000      	movs	r0, #0
    3dea:	f7ff fb73 	bl	34d4 <usb_register_request_handler>
				     usb_handle_standard_request);

	/* register class request handlers for each interface*/
	usb_register_request_handler(USB_REQTYPE_TYPE_CLASS, class_handler);
    3dee:	4907      	ldr	r1, [pc, #28]	; (3e0c <usb_set_config+0x2c>)
    3df0:	2001      	movs	r0, #1
    3df2:	f7ff fb6f 	bl	34d4 <usb_register_request_handler>

	/* register vendor request handler */
	usb_register_request_handler(USB_REQTYPE_TYPE_VENDOR, vendor_handler);
    3df6:	4906      	ldr	r1, [pc, #24]	; (3e10 <usb_set_config+0x30>)
    3df8:	2002      	movs	r0, #2
    3dfa:	f7ff fb6b 	bl	34d4 <usb_register_request_handler>

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);
    3dfe:	4805      	ldr	r0, [pc, #20]	; (3e14 <usb_set_config+0x34>)
    3e00:	f7ff fc12 	bl	3628 <usb_register_custom_req_handler>

	return 0;
}
    3e04:	2000      	movs	r0, #0
    3e06:	bd08      	pop	{r3, pc}
    3e08:	00003ac1 	.word	0x00003ac1
    3e0c:	000036a5 	.word	0x000036a5
    3e10:	00003785 	.word	0x00003785
    3e14:	00003705 	.word	0x00003705

00003e18 <usb_device_init>:
/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(const struct device *dev)
{
    3e18:	b508      	push	{r3, lr}
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
    3e1a:	4b10      	ldr	r3, [pc, #64]	; (3e5c <usb_device_init+0x44>)
    3e1c:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
    3e20:	b10b      	cbz	r3, 3e26 <usb_device_init+0xe>
		return 0;
    3e22:	2000      	movs	r0, #0
	}

	usb_set_config(device_descriptor);

	return 0;
}
    3e24:	bd08      	pop	{r3, pc}
	device_descriptor = usb_get_device_descriptor();
    3e26:	f000 f9d7 	bl	41d8 <usb_get_device_descriptor>
	if (!device_descriptor) {
    3e2a:	b118      	cbz	r0, 3e34 <usb_device_init+0x1c>
	usb_set_config(device_descriptor);
    3e2c:	f7ff ffd8 	bl	3de0 <usb_set_config>
	return 0;
    3e30:	2000      	movs	r0, #0
    3e32:	e7f7      	b.n	3e24 <usb_device_init+0xc>
    3e34:	4b0a      	ldr	r3, [pc, #40]	; (3e60 <usb_device_init+0x48>)
    3e36:	4a0b      	ldr	r2, [pc, #44]	; (3e64 <usb_device_init+0x4c>)
    3e38:	1a9b      	subs	r3, r3, r2
    3e3a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to configure USB device stack");
    3e3c:	f04f 0100 	mov.w	r1, #0
    3e40:	2201      	movs	r2, #1
    3e42:	f362 0102 	bfi	r1, r2, #0, #3
    3e46:	f36f 01c5 	bfc	r1, #3, #3
    3e4a:	f363 118f 	bfi	r1, r3, #6, #10
    3e4e:	4806      	ldr	r0, [pc, #24]	; (3e68 <usb_device_init+0x50>)
    3e50:	f7fe ff46 	bl	2ce0 <log_0>
		return -1;
    3e54:	f04f 30ff 	mov.w	r0, #4294967295
    3e58:	e7e4      	b.n	3e24 <usb_device_init+0xc>
    3e5a:	bf00      	nop
    3e5c:	200016a8 	.word	0x200016a8
    3e60:	00015f18 	.word	0x00015f18
    3e64:	00015ea8 	.word	0x00015ea8
    3e68:	00016298 	.word	0x00016298

00003e6c <usb_enable>:
{
    3e6c:	b530      	push	{r4, r5, lr}
    3e6e:	b083      	sub	sp, #12
    3e70:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
    3e72:	f04f 32ff 	mov.w	r2, #4294967295
    3e76:	f04f 33ff 	mov.w	r3, #4294967295
    3e7a:	482d      	ldr	r0, [pc, #180]	; (3f30 <usb_enable+0xc4>)
    3e7c:	f00b fbe2 	bl	f644 <z_impl_k_mutex_lock>
	if (usb_dev.enabled == true) {
    3e80:	4b2c      	ldr	r3, [pc, #176]	; (3f34 <usb_enable+0xc8>)
    3e82:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
    3e86:	2b00      	cmp	r3, #0
    3e88:	d14a      	bne.n	3f20 <usb_enable+0xb4>
	ret = usb_vbus_set(true);
    3e8a:	2001      	movs	r0, #1
    3e8c:	f00e f9f4 	bl	12278 <usb_vbus_set>
	if (ret < 0) {
    3e90:	1e04      	subs	r4, r0, #0
    3e92:	db46      	blt.n	3f22 <usb_enable+0xb6>
	usb_dev.user_status_callback = status_cb;
    3e94:	4b27      	ldr	r3, [pc, #156]	; (3f34 <usb_enable+0xc8>)
    3e96:	621d      	str	r5, [r3, #32]
	usb_register_status_callback(forward_status_cb);
    3e98:	4c27      	ldr	r4, [pc, #156]	; (3f38 <usb_enable+0xcc>)
    3e9a:	4620      	mov	r0, r4
    3e9c:	f7ff fbca 	bl	3634 <usb_register_status_callback>
	usb_dc_set_status_callback(forward_status_cb);
    3ea0:	4620      	mov	r0, r4
    3ea2:	f004 f9d7 	bl	8254 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    3ea6:	f003 fe0b 	bl	7ac0 <usb_dc_attach>
	if (ret < 0) {
    3eaa:	1e04      	subs	r4, r0, #0
    3eac:	db39      	blt.n	3f22 <usb_enable+0xb6>
	ret = usb_transfer_init();
    3eae:	f000 fbbd 	bl	462c <usb_transfer_init>
	if (ret < 0) {
    3eb2:	1e04      	subs	r4, r0, #0
    3eb4:	db35      	blt.n	3f22 <usb_enable+0xb6>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    3eb6:	2340      	movs	r3, #64	; 0x40
    3eb8:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    3ebc:	2300      	movs	r3, #0
    3ebe:	f88d 3004 	strb.w	r3, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    3ec2:	f88d 3000 	strb.w	r3, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    3ec6:	4668      	mov	r0, sp
    3ec8:	f003 fe98 	bl	7bfc <usb_dc_ep_configure>
	if (ret < 0) {
    3ecc:	1e04      	subs	r4, r0, #0
    3ece:	db28      	blt.n	3f22 <usb_enable+0xb6>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    3ed0:	2380      	movs	r3, #128	; 0x80
    3ed2:	f88d 3000 	strb.w	r3, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    3ed6:	4668      	mov	r0, sp
    3ed8:	f003 fe90 	bl	7bfc <usb_dc_ep_configure>
	if (ret < 0) {
    3edc:	1e04      	subs	r4, r0, #0
    3ede:	db20      	blt.n	3f22 <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    3ee0:	4916      	ldr	r1, [pc, #88]	; (3f3c <usb_enable+0xd0>)
    3ee2:	2000      	movs	r0, #0
    3ee4:	f004 f9a2 	bl	822c <usb_dc_ep_set_callback>
	if (ret < 0) {
    3ee8:	1e04      	subs	r4, r0, #0
    3eea:	db1a      	blt.n	3f22 <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    3eec:	4913      	ldr	r1, [pc, #76]	; (3f3c <usb_enable+0xd0>)
    3eee:	2080      	movs	r0, #128	; 0x80
    3ef0:	f004 f99c 	bl	822c <usb_dc_ep_set_callback>
	if (ret < 0) {
    3ef4:	1e04      	subs	r4, r0, #0
    3ef6:	db14      	blt.n	3f22 <usb_enable+0xb6>
	ret = composite_setup_ep_cb();
    3ef8:	f7ff fe1a 	bl	3b30 <composite_setup_ep_cb>
	if (ret < 0) {
    3efc:	1e04      	subs	r4, r0, #0
    3efe:	db10      	blt.n	3f22 <usb_enable+0xb6>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    3f00:	2000      	movs	r0, #0
    3f02:	f003 ff49 	bl	7d98 <usb_dc_ep_enable>
	if (ret < 0) {
    3f06:	1e04      	subs	r4, r0, #0
    3f08:	db0b      	blt.n	3f22 <usb_enable+0xb6>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    3f0a:	2080      	movs	r0, #128	; 0x80
    3f0c:	f003 ff44 	bl	7d98 <usb_dc_ep_enable>
	if (ret < 0) {
    3f10:	1e04      	subs	r4, r0, #0
    3f12:	db06      	blt.n	3f22 <usb_enable+0xb6>
	usb_dev.enabled = true;
    3f14:	4b07      	ldr	r3, [pc, #28]	; (3f34 <usb_enable+0xc8>)
    3f16:	2201      	movs	r2, #1
    3f18:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	ret = 0;
    3f1c:	2400      	movs	r4, #0
    3f1e:	e000      	b.n	3f22 <usb_enable+0xb6>
		ret = 0;
    3f20:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
    3f22:	4803      	ldr	r0, [pc, #12]	; (3f30 <usb_enable+0xc4>)
    3f24:	f00b fc18 	bl	f758 <z_impl_k_mutex_unlock>
}
    3f28:	4620      	mov	r0, r4
    3f2a:	b003      	add	sp, #12
    3f2c:	bd30      	pop	{r4, r5, pc}
    3f2e:	bf00      	nop
    3f30:	20000428 	.word	0x20000428
    3f34:	200016a8 	.word	0x200016a8
    3f38:	00003b95 	.word	0x00003b95
    3f3c:	00003c79 	.word	0x00003c79

00003f40 <usb_get_cfg_data>:
 * The interface descriptor of a USB function must be assigned to the
 * usb_cfg_data so that usb_ep_cfg_data and matching endpoint descriptor
 * can be found.
 */
static struct usb_cfg_data *usb_get_cfg_data(struct usb_if_descriptor *iface)
{
    3f40:	b410      	push	{r4}
	size_t length = (__usb_data_end - __usb_data_start);
    3f42:	4c0e      	ldr	r4, [pc, #56]	; (3f7c <usb_get_cfg_data+0x3c>)
    3f44:	4b0e      	ldr	r3, [pc, #56]	; (3f80 <usb_get_cfg_data+0x40>)
    3f46:	1ae4      	subs	r4, r4, r3
    3f48:	10a3      	asrs	r3, r4, #2
    3f4a:	4c0e      	ldr	r4, [pc, #56]	; (3f84 <usb_get_cfg_data+0x44>)
    3f4c:	fb04 f403 	mul.w	r4, r4, r3

	for (size_t i = 0; i < length; i++) {
    3f50:	2300      	movs	r3, #0
    3f52:	42a3      	cmp	r3, r4
    3f54:	d20e      	bcs.n	3f74 <usb_get_cfg_data+0x34>
		if (__usb_data_start[i].interface_descriptor == iface) {
    3f56:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
    3f5a:	4909      	ldr	r1, [pc, #36]	; (3f80 <usb_get_cfg_data+0x40>)
    3f5c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3f60:	6852      	ldr	r2, [r2, #4]
    3f62:	4282      	cmp	r2, r0
    3f64:	d001      	beq.n	3f6a <usb_get_cfg_data+0x2a>
	for (size_t i = 0; i < length; i++) {
    3f66:	3301      	adds	r3, #1
    3f68:	e7f3      	b.n	3f52 <usb_get_cfg_data+0x12>
			return &__usb_data_start[i];
    3f6a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    3f6e:	eb01 0083 	add.w	r0, r1, r3, lsl #2
    3f72:	e000      	b.n	3f76 <usb_get_cfg_data+0x36>
		}
	}

	return NULL;
    3f74:	2000      	movs	r0, #0
}
    3f76:	bc10      	pop	{r4}
    3f78:	4770      	bx	lr
    3f7a:	bf00      	nop
    3f7c:	20000540 	.word	0x20000540
    3f80:	2000051c 	.word	0x2000051c
    3f84:	38e38e39 	.word	0x38e38e39

00003f88 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    3f88:	b530      	push	{r4, r5, lr}
    3f8a:	b08b      	sub	sp, #44	; 0x2c
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    3f8c:	ac01      	add	r4, sp, #4
    3f8e:	4d1b      	ldr	r5, [pc, #108]	; (3ffc <usb_update_sn_string_descriptor+0x74>)
    3f90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3f92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3f94:	682b      	ldr	r3, [r5, #0]
    3f96:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    3f98:	2210      	movs	r2, #16
    3f9a:	2100      	movs	r1, #0
    3f9c:	a806      	add	r0, sp, #24
    3f9e:	f00e fdb3 	bl	12b08 <memset>
	memset(sn, 0, sizeof(sn));
    3fa2:	2212      	movs	r2, #18
    3fa4:	2100      	movs	r1, #0
    3fa6:	4816      	ldr	r0, [pc, #88]	; (4000 <usb_update_sn_string_descriptor+0x78>)
    3fa8:	f00e fdae 	bl	12b08 <memset>
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    3fac:	2110      	movs	r1, #16
    3fae:	a806      	add	r0, sp, #24
    3fb0:	f00f fa7c 	bl	134ac <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    3fb4:	2800      	cmp	r0, #0
    3fb6:	dd1d      	ble.n	3ff4 <usb_update_sn_string_descriptor+0x6c>
		skip = MAX(0, hwlen - usblen);
    3fb8:	3808      	subs	r0, #8
    3fba:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    3fbe:	2200      	movs	r2, #0
    3fc0:	e016      	b.n	3ff0 <usb_update_sn_string_descriptor+0x68>
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    3fc2:	18a3      	adds	r3, r4, r2
    3fc4:	a90a      	add	r1, sp, #40	; 0x28
    3fc6:	440b      	add	r3, r1
    3fc8:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    3fcc:	0051      	lsls	r1, r2, #1
    3fce:	a80a      	add	r0, sp, #40	; 0x28
    3fd0:	eb00 1013 	add.w	r0, r0, r3, lsr #4
    3fd4:	f810 5c24 	ldrb.w	r5, [r0, #-36]
    3fd8:	4809      	ldr	r0, [pc, #36]	; (4000 <usb_update_sn_string_descriptor+0x78>)
    3fda:	f800 5012 	strb.w	r5, [r0, r2, lsl #1]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    3fde:	f003 030f 	and.w	r3, r3, #15
    3fe2:	3101      	adds	r1, #1
    3fe4:	ad0a      	add	r5, sp, #40	; 0x28
    3fe6:	442b      	add	r3, r5
    3fe8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
    3fec:	5443      	strb	r3, [r0, r1]
		for (int i = 0; i < usblen; i++) {
    3fee:	3201      	adds	r2, #1
    3ff0:	2a07      	cmp	r2, #7
    3ff2:	dde6      	ble.n	3fc2 <usb_update_sn_string_descriptor+0x3a>
		}
	}

	return sn;
}
    3ff4:	4802      	ldr	r0, [pc, #8]	; (4000 <usb_update_sn_string_descriptor+0x78>)
    3ff6:	b00b      	add	sp, #44	; 0x2c
    3ff8:	bd30      	pop	{r4, r5, pc}
    3ffa:	bf00      	nop
    3ffc:	000162cc 	.word	0x000162cc
    4000:	2000176c 	.word	0x2000176c

00004004 <usb_fix_ascii_sn_string_descriptor>:

static void usb_fix_ascii_sn_string_descriptor(struct usb_sn_descriptor *sn)
{
    4004:	b570      	push	{r4, r5, r6, lr}
    4006:	4604      	mov	r4, r0
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    4008:	f7ff ffbe 	bl	3f88 <usb_update_sn_string_descriptor>
	int runtime_sn_len, default_sn_len;

	if (!runtime_sn) {
    400c:	b120      	cbz	r0, 4018 <usb_fix_ascii_sn_string_descriptor+0x14>
    400e:	4605      	mov	r5, r0
		return;
	}

	runtime_sn_len = strlen(runtime_sn);
    4010:	f00e fd08 	bl	12a24 <strlen>
	if (!runtime_sn_len) {
    4014:	4606      	mov	r6, r0
    4016:	b900      	cbnz	r0, 401a <usb_fix_ascii_sn_string_descriptor+0x16>
			"length as CONFIG_USB_DEVICE_SN");
		return;
	}

	memcpy(sn->bString, runtime_sn, runtime_sn_len);
}
    4018:	bd70      	pop	{r4, r5, r6, pc}
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    401a:	480e      	ldr	r0, [pc, #56]	; (4054 <usb_fix_ascii_sn_string_descriptor+0x50>)
    401c:	f00e fd02 	bl	12a24 <strlen>
	if (runtime_sn_len != default_sn_len) {
    4020:	4286      	cmp	r6, r0
    4022:	d010      	beq.n	4046 <usb_fix_ascii_sn_string_descriptor+0x42>
    4024:	4b0c      	ldr	r3, [pc, #48]	; (4058 <usb_fix_ascii_sn_string_descriptor+0x54>)
    4026:	4a0d      	ldr	r2, [pc, #52]	; (405c <usb_fix_ascii_sn_string_descriptor+0x58>)
    4028:	1a9b      	subs	r3, r3, r2
    402a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("the new SN descriptor doesn't have the same "
    402c:	f04f 0100 	mov.w	r1, #0
    4030:	2201      	movs	r2, #1
    4032:	f362 0102 	bfi	r1, r2, #0, #3
    4036:	f36f 01c5 	bfc	r1, #3, #3
    403a:	f363 118f 	bfi	r1, r3, #6, #10
    403e:	4808      	ldr	r0, [pc, #32]	; (4060 <usb_fix_ascii_sn_string_descriptor+0x5c>)
    4040:	f7fe fe4e 	bl	2ce0 <log_0>
		return;
    4044:	e7e8      	b.n	4018 <usb_fix_ascii_sn_string_descriptor+0x14>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    4046:	4632      	mov	r2, r6
    4048:	4629      	mov	r1, r5
    404a:	1ca0      	adds	r0, r4, #2
    404c:	f00e fd38 	bl	12ac0 <memcpy>
    4050:	e7e2      	b.n	4018 <usb_fix_ascii_sn_string_descriptor+0x14>
    4052:	bf00      	nop
    4054:	000162cc 	.word	0x000162cc
    4058:	00015f10 	.word	0x00015f10
    405c:	00015ea8 	.word	0x00015ea8
    4060:	000162e0 	.word	0x000162e0

00004064 <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
    4064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4068:	b082      	sub	sp, #8
    406a:	4604      	mov	r4, r0
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	uint8_t numof_ifaces = 0U;
	uint8_t str_descr_idx = 0U;
	uint32_t requested_ep = BIT(16) | BIT(0);
    406c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    4070:	9301      	str	r3, [sp, #4]
	uint8_t str_descr_idx = 0U;
    4072:	2500      	movs	r5, #0
	uint8_t numof_ifaces = 0U;
    4074:	462f      	mov	r7, r5
	struct usb_cfg_data *cfg_data = NULL;
    4076:	46a8      	mov	r8, r5
	struct usb_cfg_descriptor *cfg_descr = NULL;
    4078:	462e      	mov	r6, r5

	while (head->bLength != 0U) {
    407a:	e062      	b.n	4142 <usb_fix_descriptor+0xde>
			LOG_DBG("Association descriptor %p", head);
			break;
		case USB_DESC_INTERFACE:
			if_descr = (struct usb_if_descriptor *)head;
			LOG_DBG("Interface descriptor %p", head);
			if (if_descr->bAlternateSetting) {
    407c:	78e3      	ldrb	r3, [r4, #3]
    407e:	2b00      	cmp	r3, #0
    4080:	d15d      	bne.n	413e <usb_fix_descriptor+0xda>
				LOG_DBG("Skip alternate interface");
				break;
			}

			if (if_descr->bInterfaceNumber == 0U) {
    4082:	78a3      	ldrb	r3, [r4, #2]
    4084:	b94b      	cbnz	r3, 409a <usb_fix_descriptor+0x36>
				cfg_data = usb_get_cfg_data(if_descr);
    4086:	4620      	mov	r0, r4
    4088:	f7ff ff5a 	bl	3f40 <usb_get_cfg_data>
				if (!cfg_data) {
    408c:	4680      	mov	r8, r0
    408e:	b138      	cbz	r0, 40a0 <usb_fix_descriptor+0x3c>
					LOG_ERR("There is no usb_cfg_data "
						"for %p", head);
					return -1;
				}

				if (cfg_data->interface_config) {
    4090:	6883      	ldr	r3, [r0, #8]
    4092:	b113      	cbz	r3, 409a <usb_fix_descriptor+0x36>
					cfg_data->interface_config(head,
    4094:	4639      	mov	r1, r7
    4096:	4620      	mov	r0, r4
    4098:	4798      	blx	r3
							numof_ifaces);
				}
			}

			numof_ifaces++;
    409a:	3701      	adds	r7, #1
    409c:	b2ff      	uxtb	r7, r7
			break;
    409e:	e04e      	b.n	413e <usb_fix_descriptor+0xda>
    40a0:	4b46      	ldr	r3, [pc, #280]	; (41bc <usb_fix_descriptor+0x158>)
    40a2:	4a47      	ldr	r2, [pc, #284]	; (41c0 <usb_fix_descriptor+0x15c>)
    40a4:	1a9b      	subs	r3, r3, r2
    40a6:	08db      	lsrs	r3, r3, #3
					LOG_ERR("There is no usb_cfg_data "
    40a8:	f04f 0200 	mov.w	r2, #0
    40ac:	2101      	movs	r1, #1
    40ae:	f361 0202 	bfi	r2, r1, #0, #3
    40b2:	f36f 02c5 	bfc	r2, #3, #3
    40b6:	f363 128f 	bfi	r2, r3, #6, #10
    40ba:	4621      	mov	r1, r4
    40bc:	4841      	ldr	r0, [pc, #260]	; (41c4 <usb_fix_descriptor+0x160>)
    40be:	f7fe fd7b 	bl	2bb8 <log_1>
					return -1;
    40c2:	f04f 30ff 	mov.w	r0, #4294967295
    40c6:	e073      	b.n	41b0 <usb_fix_descriptor+0x14c>
		case USB_DESC_ENDPOINT:
			if (!cfg_data) {
    40c8:	f1b8 0f00 	cmp.w	r8, #0
    40cc:	d018      	beq.n	4100 <usb_fix_descriptor+0x9c>
				return -1;
			}

			LOG_DBG("Endpoint descriptor %p", head);
			ep_descr = (struct usb_ep_descriptor *)head;
			if (usb_validate_ep_cfg_data(ep_descr,
    40ce:	aa01      	add	r2, sp, #4
    40d0:	4641      	mov	r1, r8
    40d2:	4620      	mov	r0, r4
    40d4:	f00e f97e 	bl	123d4 <usb_validate_ep_cfg_data>
    40d8:	b388      	cbz	r0, 413e <usb_fix_descriptor+0xda>
    40da:	4b38      	ldr	r3, [pc, #224]	; (41bc <usb_fix_descriptor+0x158>)
    40dc:	4a38      	ldr	r2, [pc, #224]	; (41c0 <usb_fix_descriptor+0x15c>)
    40de:	1a9b      	subs	r3, r3, r2
    40e0:	08db      	lsrs	r3, r3, #3
						     cfg_data,
						     &requested_ep)) {
				LOG_ERR("Failed to validate endpoints");
    40e2:	f04f 0100 	mov.w	r1, #0
    40e6:	2201      	movs	r2, #1
    40e8:	f362 0102 	bfi	r1, r2, #0, #3
    40ec:	f36f 01c5 	bfc	r1, #3, #3
    40f0:	f363 118f 	bfi	r1, r3, #6, #10
    40f4:	4834      	ldr	r0, [pc, #208]	; (41c8 <usb_fix_descriptor+0x164>)
    40f6:	f7fe fdf3 	bl	2ce0 <log_0>
				return -1;
    40fa:	f04f 30ff 	mov.w	r0, #4294967295
    40fe:	e057      	b.n	41b0 <usb_fix_descriptor+0x14c>
    4100:	4b2e      	ldr	r3, [pc, #184]	; (41bc <usb_fix_descriptor+0x158>)
    4102:	4a2f      	ldr	r2, [pc, #188]	; (41c0 <usb_fix_descriptor+0x15c>)
    4104:	1a9b      	subs	r3, r3, r2
    4106:	08db      	lsrs	r3, r3, #3
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
    4108:	f04f 0100 	mov.w	r1, #0
    410c:	2201      	movs	r2, #1
    410e:	f362 0102 	bfi	r1, r2, #0, #3
    4112:	f36f 01c5 	bfc	r1, #3, #3
    4116:	f363 118f 	bfi	r1, r3, #6, #10
    411a:	482c      	ldr	r0, [pc, #176]	; (41cc <usb_fix_descriptor+0x168>)
    411c:	f7fe fde0 	bl	2ce0 <log_0>
				return -1;
    4120:	f04f 30ff 	mov.w	r0, #4294967295
    4124:	e044      	b.n	41b0 <usb_fix_descriptor+0x14c>
		case 0:
		case USB_DESC_STRING:
			/*
			 * Copy runtime SN string descriptor first, if has
			 */
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    4126:	2d03      	cmp	r5, #3
    4128:	d020      	beq.n	416c <usb_fix_descriptor+0x108>
			}
			/*
			 * Skip language descriptor but correct
			 * wTotalLength and bNumInterfaces once.
			 */
			if (str_descr_idx) {
    412a:	bb1d      	cbnz	r5, 4174 <usb_fix_descriptor+0x110>
				ascii7_to_utf16le(head);
			} else {
				if (!cfg_descr) {
    412c:	b336      	cbz	r6, 417c <usb_fix_descriptor+0x118>
					return -1;
				}

				LOG_DBG("Now the wTotalLength is %zd",
					(uint8_t *)head - (uint8_t *)cfg_descr);
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    412e:	1ba3      	subs	r3, r4, r6
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    4130:	70b3      	strb	r3, [r6, #2]
	dst[1] = val >> 8;
    4132:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4136:	70f3      	strb	r3, [r6, #3]
					     (uint8_t *)&cfg_descr->wTotalLength);
				cfg_descr->bNumInterfaces = numof_ifaces;
    4138:	7137      	strb	r7, [r6, #4]
			}

			str_descr_idx += 1U;
    413a:	3501      	adds	r5, #1
    413c:	b2ed      	uxtb	r5, r5
		default:
			break;
		}

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    413e:	7823      	ldrb	r3, [r4, #0]
    4140:	441c      	add	r4, r3
	while (head->bLength != 0U) {
    4142:	7823      	ldrb	r3, [r4, #0]
    4144:	b37b      	cbz	r3, 41a6 <usb_fix_descriptor+0x142>
		switch (head->bDescriptorType) {
    4146:	7863      	ldrb	r3, [r4, #1]
    4148:	2b05      	cmp	r3, #5
    414a:	d8f8      	bhi.n	413e <usb_fix_descriptor+0xda>
    414c:	a201      	add	r2, pc, #4	; (adr r2, 4154 <usb_fix_descriptor+0xf0>)
    414e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4152:	bf00      	nop
    4154:	00004127 	.word	0x00004127
    4158:	0000413f 	.word	0x0000413f
    415c:	000041a3 	.word	0x000041a3
    4160:	00004127 	.word	0x00004127
    4164:	0000407d 	.word	0x0000407d
    4168:	000040c9 	.word	0x000040c9
				usb_fix_ascii_sn_string_descriptor(sn);
    416c:	4620      	mov	r0, r4
    416e:	f7ff ff49 	bl	4004 <usb_fix_ascii_sn_string_descriptor>
    4172:	e7da      	b.n	412a <usb_fix_descriptor+0xc6>
				ascii7_to_utf16le(head);
    4174:	4620      	mov	r0, r4
    4176:	f00e f919 	bl	123ac <ascii7_to_utf16le>
    417a:	e7de      	b.n	413a <usb_fix_descriptor+0xd6>
    417c:	4b0f      	ldr	r3, [pc, #60]	; (41bc <usb_fix_descriptor+0x158>)
    417e:	4a10      	ldr	r2, [pc, #64]	; (41c0 <usb_fix_descriptor+0x15c>)
    4180:	1a9b      	subs	r3, r3, r2
    4182:	08db      	lsrs	r3, r3, #3
					LOG_ERR("Incomplete device descriptor");
    4184:	f04f 0100 	mov.w	r1, #0
    4188:	2201      	movs	r2, #1
    418a:	f362 0102 	bfi	r1, r2, #0, #3
    418e:	f36f 01c5 	bfc	r1, #3, #3
    4192:	f363 118f 	bfi	r1, r3, #6, #10
    4196:	480e      	ldr	r0, [pc, #56]	; (41d0 <usb_fix_descriptor+0x16c>)
    4198:	f7fe fda2 	bl	2ce0 <log_0>
					return -1;
    419c:	f04f 30ff 	mov.w	r0, #4294967295
    41a0:	e006      	b.n	41b0 <usb_fix_descriptor+0x14c>
			cfg_descr = (struct usb_cfg_descriptor *)head;
    41a2:	4626      	mov	r6, r4
    41a4:	e7cb      	b.n	413e <usb_fix_descriptor+0xda>
	}

	if ((head + 1) != __usb_descriptor_end) {
    41a6:	1ca0      	adds	r0, r4, #2
    41a8:	4b0a      	ldr	r3, [pc, #40]	; (41d4 <usb_fix_descriptor+0x170>)
    41aa:	4298      	cmp	r0, r3
    41ac:	d103      	bne.n	41b6 <usb_fix_descriptor+0x152>
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
	}

	return 0;
    41ae:	2000      	movs	r0, #0
}
    41b0:	b002      	add	sp, #8
    41b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return usb_fix_descriptor(head + 1);
    41b6:	f7ff ff55 	bl	4064 <usb_fix_descriptor>
    41ba:	e7f9      	b.n	41b0 <usb_fix_descriptor+0x14c>
    41bc:	00015f10 	.word	0x00015f10
    41c0:	00015ea8 	.word	0x00015ea8
    41c4:	0001632c 	.word	0x0001632c
    41c8:	00016390 	.word	0x00016390
    41cc:	0001634c 	.word	0x0001634c
    41d0:	000163b0 	.word	0x000163b0
    41d4:	2000051b 	.word	0x2000051b

000041d8 <usb_get_device_descriptor>:


uint8_t *usb_get_device_descriptor(void)
{
    41d8:	b508      	push	{r3, lr}
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
    41da:	480c      	ldr	r0, [pc, #48]	; (420c <usb_get_device_descriptor+0x34>)
    41dc:	f7ff ff42 	bl	4064 <usb_fix_descriptor>
    41e0:	b908      	cbnz	r0, 41e6 <usb_get_device_descriptor+0xe>
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
    41e2:	480a      	ldr	r0, [pc, #40]	; (420c <usb_get_device_descriptor+0x34>)
}
    41e4:	bd08      	pop	{r3, pc}
    41e6:	4b0a      	ldr	r3, [pc, #40]	; (4210 <usb_get_device_descriptor+0x38>)
    41e8:	4a0a      	ldr	r2, [pc, #40]	; (4214 <usb_get_device_descriptor+0x3c>)
    41ea:	1a9b      	subs	r3, r3, r2
    41ec:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to fixup USB descriptor");
    41ee:	f04f 0100 	mov.w	r1, #0
    41f2:	2201      	movs	r2, #1
    41f4:	f362 0102 	bfi	r1, r2, #0, #3
    41f8:	f36f 01c5 	bfc	r1, #3, #3
    41fc:	f363 118f 	bfi	r1, r3, #6, #10
    4200:	4805      	ldr	r0, [pc, #20]	; (4218 <usb_get_device_descriptor+0x40>)
    4202:	f7fe fd6d 	bl	2ce0 <log_0>
		return NULL;
    4206:	2000      	movs	r0, #0
    4208:	e7ec      	b.n	41e4 <usb_get_device_descriptor+0xc>
    420a:	bf00      	nop
    420c:	2000045c 	.word	0x2000045c
    4210:	00015f10 	.word	0x00015f10
    4214:	00015ea8 	.word	0x00015ea8
    4218:	000163d0 	.word	0x000163d0

0000421c <usb_ep_get_transfer>:
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    421c:	2300      	movs	r3, #0
    421e:	e000      	b.n	4222 <usb_ep_get_transfer+0x6>
    4220:	3301      	adds	r3, #1
    4222:	2b03      	cmp	r3, #3
    4224:	dc0c      	bgt.n	4240 <usb_ep_get_transfer+0x24>
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    4226:	019a      	lsls	r2, r3, #6
    4228:	4906      	ldr	r1, [pc, #24]	; (4244 <usb_ep_get_transfer+0x28>)
    422a:	5c8a      	ldrb	r2, [r1, r2]
    422c:	4282      	cmp	r2, r0
    422e:	d1f7      	bne.n	4220 <usb_ep_get_transfer+0x4>
    4230:	eb01 1283 	add.w	r2, r1, r3, lsl #6
    4234:	6852      	ldr	r2, [r2, #4]
    4236:	2a00      	cmp	r2, #0
    4238:	d0f2      	beq.n	4220 <usb_ep_get_transfer+0x4>
			return &ut_data[i];
    423a:	eb01 1083 	add.w	r0, r1, r3, lsl #6
    423e:	4770      	bx	lr
		}
	}

	return NULL;
    4240:	2000      	movs	r0, #0
}
    4242:	4770      	bx	lr
    4244:	20001780 	.word	0x20001780

00004248 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    4248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    424c:	b082      	sub	sp, #8
    424e:	4604      	mov	r4, r0
	int ret = 0;
	uint32_t bytes;
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;
    4250:	f810 5c2c 	ldrb.w	r5, [r0, #-44]

	if (trans->status != -EBUSY) {
    4254:	f850 3c28 	ldr.w	r3, [r0, #-40]
    4258:	f113 0f10 	cmn.w	r3, #16
    425c:	d10c      	bne.n	4278 <usb_transfer_work+0x30>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    425e:	6903      	ldr	r3, [r0, #16]
    4260:	f013 0f02 	tst.w	r3, #2
    4264:	d062      	beq.n	432c <usb_transfer_work+0xe4>
		if (!trans->bsize) {
    4266:	f850 2c20 	ldr.w	r2, [r0, #-32]
    426a:	bb82      	cbnz	r2, 42ce <usb_transfer_work+0x86>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    426c:	f013 0f04 	tst.w	r3, #4
    4270:	d026      	beq.n	42c0 <usb_transfer_work+0x78>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
			}
			trans->status = 0;
    4272:	2300      	movs	r3, #0
    4274:	f844 3c28 	str.w	r3, [r4, #-40]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    4278:	f854 3c28 	ldr.w	r3, [r4, #-40]
    427c:	f113 0f10 	cmn.w	r3, #16
    4280:	d01b      	beq.n	42ba <usb_transfer_work+0x72>
    4282:	f854 6c18 	ldr.w	r6, [r4, #-24]
    4286:	b1c6      	cbz	r6, 42ba <usb_transfer_work+0x72>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    4288:	f854 7c1c 	ldr.w	r7, [r4, #-28]
		void *priv = trans->priv;
    428c:	f854 8c14 	ldr.w	r8, [r4, #-20]

		if (k_is_in_isr()) {
    4290:	f011 f8c1 	bl	15416 <k_is_in_isr>
    4294:	2800      	cmp	r0, #0
    4296:	f040 808f 	bne.w	43b8 <usb_transfer_work+0x170>
		}

		LOG_DBG("Transfer done, ep 0x%02x, status %d, size %zu",
			trans->ep, trans->status, trans->tsize);

		trans->cb = NULL;
    429a:	2300      	movs	r3, #0
    429c:	f844 3c18 	str.w	r3, [r4, #-24]
		k_sem_give(&trans->sem);
    42a0:	f1a4 0010 	sub.w	r0, r4, #16
	z_impl_k_sem_give(sem);
    42a4:	f00b fad8 	bl	f858 <z_impl_k_sem_give>

		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
    42a8:	f854 3c28 	ldr.w	r3, [r4, #-40]
    42ac:	f113 0f8c 	cmn.w	r3, #140	; 0x8c
    42b0:	d003      	beq.n	42ba <usb_transfer_work+0x72>
			cb(ep, tsize, priv);
    42b2:	4642      	mov	r2, r8
    42b4:	4639      	mov	r1, r7
    42b6:	4628      	mov	r0, r5
    42b8:	47b0      	blx	r6
		}
	}
}
    42ba:	b002      	add	sp, #8
    42bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_write(ep, NULL, 0, NULL);
    42c0:	2300      	movs	r3, #0
    42c2:	461a      	mov	r2, r3
    42c4:	4619      	mov	r1, r3
    42c6:	4628      	mov	r0, r5
    42c8:	f00e f851 	bl	1236e <usb_write>
    42cc:	e7d1      	b.n	4272 <usb_transfer_work+0x2a>
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    42ce:	ab01      	add	r3, sp, #4
    42d0:	f850 1c24 	ldr.w	r1, [r0, #-36]
    42d4:	4628      	mov	r0, r5
    42d6:	f00e f84a 	bl	1236e <usb_write>
		if (ret) {
    42da:	4601      	mov	r1, r0
    42dc:	b980      	cbnz	r0, 4300 <usb_transfer_work+0xb8>
		trans->buffer += bytes;
    42de:	f854 3c24 	ldr.w	r3, [r4, #-36]
    42e2:	9a01      	ldr	r2, [sp, #4]
    42e4:	4413      	add	r3, r2
    42e6:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    42ea:	f854 3c20 	ldr.w	r3, [r4, #-32]
    42ee:	1a9b      	subs	r3, r3, r2
    42f0:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    42f4:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    42f8:	4413      	add	r3, r2
    42fa:	f844 3c1c 	str.w	r3, [r4, #-28]
    42fe:	e7bb      	b.n	4278 <usb_transfer_work+0x30>
    4300:	4a30      	ldr	r2, [pc, #192]	; (43c4 <usb_transfer_work+0x17c>)
    4302:	4b31      	ldr	r3, [pc, #196]	; (43c8 <usb_transfer_work+0x180>)
    4304:	1ad2      	subs	r2, r2, r3
    4306:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    4308:	f04f 0300 	mov.w	r3, #0
    430c:	2001      	movs	r0, #1
    430e:	f360 0302 	bfi	r3, r0, #0, #3
    4312:	f36f 03c5 	bfc	r3, #3, #3
    4316:	f362 138f 	bfi	r3, r2, #6, #10
    431a:	462a      	mov	r2, r5
    431c:	482b      	ldr	r0, [pc, #172]	; (43cc <usb_transfer_work+0x184>)
    431e:	f7fe fc81 	bl	2c24 <log_2>
			trans->status = -EINVAL;
    4322:	f06f 0315 	mvn.w	r3, #21
    4326:	f844 3c28 	str.w	r3, [r4, #-40]
			goto done;
    432a:	e7a5      	b.n	4278 <usb_transfer_work+0x30>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    432c:	ab01      	add	r3, sp, #4
    432e:	f850 2c20 	ldr.w	r2, [r0, #-32]
    4332:	f850 1c24 	ldr.w	r1, [r0, #-36]
    4336:	4628      	mov	r0, r5
    4338:	f003 fe36 	bl	7fa8 <usb_dc_ep_read_wait>
		if (ret) {
    433c:	4601      	mov	r1, r0
    433e:	b9a0      	cbnz	r0, 436a <usb_transfer_work+0x122>
		trans->buffer += bytes;
    4340:	f854 3c24 	ldr.w	r3, [r4, #-36]
    4344:	9e01      	ldr	r6, [sp, #4]
    4346:	4433      	add	r3, r6
    4348:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    434c:	f854 3c20 	ldr.w	r3, [r4, #-32]
    4350:	1b9b      	subs	r3, r3, r6
    4352:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    4356:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    435a:	4433      	add	r3, r6
    435c:	f844 3c1c 	str.w	r3, [r4, #-28]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    4360:	b9ce      	cbnz	r6, 4396 <usb_transfer_work+0x14e>
			trans->status = 0;
    4362:	2300      	movs	r3, #0
    4364:	f844 3c28 	str.w	r3, [r4, #-40]
			goto done;
    4368:	e786      	b.n	4278 <usb_transfer_work+0x30>
    436a:	4a16      	ldr	r2, [pc, #88]	; (43c4 <usb_transfer_work+0x17c>)
    436c:	4b16      	ldr	r3, [pc, #88]	; (43c8 <usb_transfer_work+0x180>)
    436e:	1ad2      	subs	r2, r2, r3
    4370:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    4372:	f04f 0300 	mov.w	r3, #0
    4376:	2001      	movs	r0, #1
    4378:	f360 0302 	bfi	r3, r0, #0, #3
    437c:	f36f 03c5 	bfc	r3, #3, #3
    4380:	f362 138f 	bfi	r3, r2, #6, #10
    4384:	462a      	mov	r2, r5
    4386:	4811      	ldr	r0, [pc, #68]	; (43cc <usb_transfer_work+0x184>)
    4388:	f7fe fc4c 	bl	2c24 <log_2>
			trans->status = -EINVAL;
    438c:	f06f 0315 	mvn.w	r3, #21
    4390:	f844 3c28 	str.w	r3, [r4, #-40]
			goto done;
    4394:	e770      	b.n	4278 <usb_transfer_work+0x30>
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    4396:	4628      	mov	r0, r5
    4398:	f003 ff62 	bl	8260 <usb_dc_ep_mps>
    439c:	fbb6 f3f0 	udiv	r3, r6, r0
    43a0:	fb00 6013 	mls	r0, r0, r3, r6
    43a4:	2800      	cmp	r0, #0
    43a6:	d1dc      	bne.n	4362 <usb_transfer_work+0x11a>
    43a8:	f854 3c20 	ldr.w	r3, [r4, #-32]
    43ac:	2b00      	cmp	r3, #0
    43ae:	d0d8      	beq.n	4362 <usb_transfer_work+0x11a>
		usb_dc_ep_read_continue(ep);
    43b0:	4628      	mov	r0, r5
    43b2:	f003 fe73 	bl	809c <usb_dc_ep_read_continue>
    43b6:	e75f      	b.n	4278 <usb_transfer_work+0x30>
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    43b8:	4621      	mov	r1, r4
    43ba:	4805      	ldr	r0, [pc, #20]	; (43d0 <usb_transfer_work+0x188>)
    43bc:	f011 f931 	bl	15622 <k_work_submit_to_queue>
			return;
    43c0:	e77b      	b.n	42ba <usb_transfer_work+0x72>
    43c2:	bf00      	nop
    43c4:	00015f28 	.word	0x00015f28
    43c8:	00015ea8 	.word	0x00015ea8
    43cc:	00016400 	.word	0x00016400
    43d0:	20000628 	.word	0x20000628

000043d4 <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
    43d4:	b570      	push	{r4, r5, r6, lr}
    43d6:	b082      	sub	sp, #8
    43d8:	4606      	mov	r6, r0
    43da:	460c      	mov	r4, r1
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    43dc:	f7ff ff1e 	bl	421c <usb_ep_get_transfer>

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    43e0:	1e63      	subs	r3, r4, #1
    43e2:	b2db      	uxtb	r3, r3
    43e4:	2b01      	cmp	r3, #1
    43e6:	d80a      	bhi.n	43fe <usb_transfer_ep_callback+0x2a>
    43e8:	4605      	mov	r5, r0
		return;
	}

	if (!trans) {
    43ea:	b150      	cbz	r0, 4402 <usb_transfer_ep_callback+0x2e>
			LOG_ERR("RX data lost, no transfer");
		}
		return;
	}

	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    43ec:	f011 f813 	bl	15416 <k_is_in_isr>
    43f0:	b108      	cbz	r0, 43f6 <usb_transfer_ep_callback+0x22>
    43f2:	2c01      	cmp	r4, #1
    43f4:	d122      	bne.n	443c <usb_transfer_ep_callback+0x68>
		/* If we are not in IRQ context, no need to defer work */
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
    43f6:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    43fa:	f7ff ff25 	bl	4248 <usb_transfer_work>
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
    43fe:	b002      	add	sp, #8
    4400:	bd70      	pop	{r4, r5, r6, pc}
		if (status == USB_DC_EP_DATA_OUT) {
    4402:	2c01      	cmp	r4, #1
    4404:	d1fb      	bne.n	43fe <usb_transfer_ep_callback+0x2a>
				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
    4406:	ab01      	add	r3, sp, #4
    4408:	2201      	movs	r2, #1
    440a:	f10d 0103 	add.w	r1, sp, #3
    440e:	4630      	mov	r0, r6
    4410:	f003 fdca 	bl	7fa8 <usb_dc_ep_read_wait>
			} while (bytes);
    4414:	9b01      	ldr	r3, [sp, #4]
    4416:	2b00      	cmp	r3, #0
    4418:	d1f5      	bne.n	4406 <usb_transfer_ep_callback+0x32>
    441a:	4b0b      	ldr	r3, [pc, #44]	; (4448 <usb_transfer_ep_callback+0x74>)
    441c:	4a0b      	ldr	r2, [pc, #44]	; (444c <usb_transfer_ep_callback+0x78>)
    441e:	1a9b      	subs	r3, r3, r2
    4420:	08db      	lsrs	r3, r3, #3
			LOG_ERR("RX data lost, no transfer");
    4422:	f04f 0100 	mov.w	r1, #0
    4426:	2201      	movs	r2, #1
    4428:	f362 0102 	bfi	r1, r2, #0, #3
    442c:	f36f 01c5 	bfc	r1, #3, #3
    4430:	f363 118f 	bfi	r1, r3, #6, #10
    4434:	4806      	ldr	r0, [pc, #24]	; (4450 <usb_transfer_ep_callback+0x7c>)
    4436:	f7fe fc53 	bl	2ce0 <log_0>
		return;
    443a:	e7e0      	b.n	43fe <usb_transfer_ep_callback+0x2a>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    443c:	f105 012c 	add.w	r1, r5, #44	; 0x2c
    4440:	4804      	ldr	r0, [pc, #16]	; (4454 <usb_transfer_ep_callback+0x80>)
    4442:	f011 f8ee 	bl	15622 <k_work_submit_to_queue>
    4446:	e7da      	b.n	43fe <usb_transfer_ep_callback+0x2a>
    4448:	00015f28 	.word	0x00015f28
    444c:	00015ea8 	.word	0x00015ea8
    4450:	00016420 	.word	0x00016420
    4454:	20000628 	.word	0x20000628

00004458 <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
    4458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    445c:	4605      	mov	r5, r0
    445e:	4688      	mov	r8, r1
    4460:	4617      	mov	r7, r2
    4462:	461e      	mov	r6, r3
	struct usb_transfer_data *trans = NULL;
	int i, key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
    4464:	f00e f860 	bl	12528 <usb_transfer_is_busy>
    4468:	2800      	cmp	r0, #0
    446a:	f040 8083 	bne.w	4574 <usb_transfer+0x11c>
	__asm__ volatile(
    446e:	f04f 0320 	mov.w	r3, #32
    4472:	f3ef 8911 	mrs	r9, BASEPRI
    4476:	f383 8812 	msr	BASEPRI_MAX, r3
    447a:	f3bf 8f6f 	isb	sy
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    447e:	2400      	movs	r4, #0
    4480:	2c03      	cmp	r4, #3
    4482:	dc10      	bgt.n	44a6 <usb_transfer+0x4e>
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
    4484:	01a0      	lsls	r0, r4, #6
    4486:	f100 0318 	add.w	r3, r0, #24
    448a:	483c      	ldr	r0, [pc, #240]	; (457c <usb_transfer+0x124>)
    448c:	4418      	add	r0, r3
    448e:	3004      	adds	r0, #4
	return z_impl_k_sem_take(sem, timeout);
    4490:	2200      	movs	r2, #0
    4492:	2300      	movs	r3, #0
    4494:	f00b fa04 	bl	f8a0 <z_impl_k_sem_take>
    4498:	b108      	cbz	r0, 449e <usb_transfer+0x46>
	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    449a:	3401      	adds	r4, #1
    449c:	e7f0      	b.n	4480 <usb_transfer+0x28>
			trans = &ut_data[i];
    449e:	4837      	ldr	r0, [pc, #220]	; (457c <usb_transfer+0x124>)
    44a0:	eb00 1484 	add.w	r4, r0, r4, lsl #6
			break;
    44a4:	e000      	b.n	44a8 <usb_transfer+0x50>
	struct usb_transfer_data *trans = NULL;
    44a6:	2400      	movs	r4, #0
		}
	}

	if (!trans) {
    44a8:	b344      	cbz	r4, 44fc <usb_transfer+0xa4>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
    44aa:	f8d4 a004 	ldr.w	sl, [r4, #4]
    44ae:	f11a 0f10 	cmn.w	sl, #16
    44b2:	d036      	beq.n	4522 <usb_transfer+0xca>
		ret = -EBUSY;
		goto done;
	}

	/* Configure new transfer */
	trans->ep = ep;
    44b4:	7025      	strb	r5, [r4, #0]
	trans->buffer = data;
    44b6:	f8c4 8008 	str.w	r8, [r4, #8]
	trans->bsize = dlen;
    44ba:	60e7      	str	r7, [r4, #12]
	trans->tsize = 0;
    44bc:	2300      	movs	r3, #0
    44be:	6123      	str	r3, [r4, #16]
	trans->cb = cb;
    44c0:	9b08      	ldr	r3, [sp, #32]
    44c2:	6163      	str	r3, [r4, #20]
	trans->flags = flags;
    44c4:	63e6      	str	r6, [r4, #60]	; 0x3c
	trans->priv = cb_data;
    44c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    44c8:	61a3      	str	r3, [r4, #24]
	trans->status = -EBUSY;
    44ca:	f06f 030f 	mvn.w	r3, #15
    44ce:	6063      	str	r3, [r4, #4]

	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    44d0:	4628      	mov	r0, r5
    44d2:	f003 fec5 	bl	8260 <usb_dc_ep_mps>
    44d6:	2800      	cmp	r0, #0
    44d8:	d139      	bne.n	454e <usb_transfer+0xf6>
		/* no need to send ZLP since last packet will be a short one */
		trans->flags |= USB_TRANS_NO_ZLP;
	}

	if (flags & USB_TRANS_WRITE) {
    44da:	f016 0f02 	tst.w	r6, #2
    44de:	d044      	beq.n	456a <usb_transfer+0x112>
		/* start writing first chunk */
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    44e0:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    44e4:	4826      	ldr	r0, [pc, #152]	; (4580 <usb_transfer+0x128>)
    44e6:	f011 f89c 	bl	15622 <k_work_submit_to_queue>
	int i, key, ret = 0;
    44ea:	f04f 0a00 	mov.w	sl, #0
	__asm__ volatile(
    44ee:	f389 8811 	msr	BASEPRI, r9
    44f2:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
    44f6:	4650      	mov	r0, sl
    44f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    44fc:	4b21      	ldr	r3, [pc, #132]	; (4584 <usb_transfer+0x12c>)
    44fe:	4a22      	ldr	r2, [pc, #136]	; (4588 <usb_transfer+0x130>)
    4500:	1a9b      	subs	r3, r3, r2
    4502:	08db      	lsrs	r3, r3, #3
		LOG_ERR("No transfer slot available");
    4504:	f04f 0100 	mov.w	r1, #0
    4508:	2201      	movs	r2, #1
    450a:	f362 0102 	bfi	r1, r2, #0, #3
    450e:	f36f 01c5 	bfc	r1, #3, #3
    4512:	f363 118f 	bfi	r1, r3, #6, #10
    4516:	481d      	ldr	r0, [pc, #116]	; (458c <usb_transfer+0x134>)
    4518:	f7fe fbe2 	bl	2ce0 <log_0>
		ret = -ENOMEM;
    451c:	f06f 0a0b 	mvn.w	sl, #11
		goto done;
    4520:	e7e5      	b.n	44ee <usb_transfer+0x96>
    4522:	4b18      	ldr	r3, [pc, #96]	; (4584 <usb_transfer+0x12c>)
    4524:	4a18      	ldr	r2, [pc, #96]	; (4588 <usb_transfer+0x130>)
    4526:	1a9b      	subs	r3, r3, r2
    4528:	08db      	lsrs	r3, r3, #3
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
    452a:	f04f 0200 	mov.w	r2, #0
    452e:	2101      	movs	r1, #1
    4530:	f361 0202 	bfi	r2, r1, #0, #3
    4534:	f36f 02c5 	bfc	r2, #3, #3
    4538:	f363 128f 	bfi	r2, r3, #6, #10
    453c:	4629      	mov	r1, r5
    453e:	4814      	ldr	r0, [pc, #80]	; (4590 <usb_transfer+0x138>)
    4540:	f7fe fb3a 	bl	2bb8 <log_1>
		k_sem_give(&trans->sem);
    4544:	f104 001c 	add.w	r0, r4, #28
	z_impl_k_sem_give(sem);
    4548:	f00b f986 	bl	f858 <z_impl_k_sem_give>
		goto done;
    454c:	e7cf      	b.n	44ee <usb_transfer+0x96>
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    454e:	4628      	mov	r0, r5
    4550:	f003 fe86 	bl	8260 <usb_dc_ep_mps>
    4554:	fbb7 f3f0 	udiv	r3, r7, r0
    4558:	fb00 7013 	mls	r0, r0, r3, r7
    455c:	2800      	cmp	r0, #0
    455e:	d0bc      	beq.n	44da <usb_transfer+0x82>
		trans->flags |= USB_TRANS_NO_ZLP;
    4560:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4562:	f043 0304 	orr.w	r3, r3, #4
    4566:	63e3      	str	r3, [r4, #60]	; 0x3c
    4568:	e7b7      	b.n	44da <usb_transfer+0x82>
		ret = usb_dc_ep_read_continue(ep);
    456a:	4628      	mov	r0, r5
    456c:	f003 fd96 	bl	809c <usb_dc_ep_read_continue>
    4570:	4682      	mov	sl, r0
    4572:	e7bc      	b.n	44ee <usb_transfer+0x96>
		return -EBUSY;
    4574:	f06f 0a0f 	mvn.w	sl, #15
    4578:	e7bd      	b.n	44f6 <usb_transfer+0x9e>
    457a:	bf00      	nop
    457c:	20001780 	.word	0x20001780
    4580:	20000628 	.word	0x20000628
    4584:	00015f28 	.word	0x00015f28
    4588:	00015ea8 	.word	0x00015ea8
    458c:	0001643c 	.word	0x0001643c
    4590:	00016458 	.word	0x00016458

00004594 <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
    4594:	b510      	push	{r4, lr}
	__asm__ volatile(
    4596:	f04f 0320 	mov.w	r3, #32
    459a:	f3ef 8411 	mrs	r4, BASEPRI
    459e:	f383 8812 	msr	BASEPRI_MAX, r3
    45a2:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    45a6:	f7ff fe39 	bl	421c <usb_ep_get_transfer>
	if (!trans) {
    45aa:	b120      	cbz	r0, 45b6 <usb_cancel_transfer+0x22>
    45ac:	4601      	mov	r1, r0
		goto done;
	}

	if (trans->status != -EBUSY) {
    45ae:	6843      	ldr	r3, [r0, #4]
    45b0:	f113 0f10 	cmn.w	r3, #16
    45b4:	d004      	beq.n	45c0 <usb_cancel_transfer+0x2c>
	__asm__ volatile(
    45b6:	f384 8811 	msr	BASEPRI, r4
    45ba:	f3bf 8f6f 	isb	sy
	trans->status = -ECANCELED;
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);

done:
	irq_unlock(key);
}
    45be:	bd10      	pop	{r4, pc}
	trans->status = -ECANCELED;
    45c0:	f06f 038b 	mvn.w	r3, #139	; 0x8b
    45c4:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    45c6:	312c      	adds	r1, #44	; 0x2c
    45c8:	4801      	ldr	r0, [pc, #4]	; (45d0 <usb_cancel_transfer+0x3c>)
    45ca:	f011 f82a 	bl	15622 <k_work_submit_to_queue>
    45ce:	e7f2      	b.n	45b6 <usb_cancel_transfer+0x22>
    45d0:	20000628 	.word	0x20000628

000045d4 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    45d4:	b538      	push	{r3, r4, r5, lr}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    45d6:	2400      	movs	r4, #0
    45d8:	e011      	b.n	45fe <usb_cancel_transfers+0x2a>
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
			trans->status = -ECANCELED;
    45da:	4b12      	ldr	r3, [pc, #72]	; (4624 <usb_cancel_transfers+0x50>)
    45dc:	01a1      	lsls	r1, r4, #6
    45de:	eb03 1284 	add.w	r2, r3, r4, lsl #6
    45e2:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    45e6:	6050      	str	r0, [r2, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    45e8:	3128      	adds	r1, #40	; 0x28
    45ea:	4419      	add	r1, r3
    45ec:	3104      	adds	r1, #4
    45ee:	480e      	ldr	r0, [pc, #56]	; (4628 <usb_cancel_transfers+0x54>)
    45f0:	f011 f817 	bl	15622 <k_work_submit_to_queue>
    45f4:	f385 8811 	msr	BASEPRI, r5
    45f8:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    45fc:	3401      	adds	r4, #1
    45fe:	2c03      	cmp	r4, #3
    4600:	dc0f      	bgt.n	4622 <usb_cancel_transfers+0x4e>
	__asm__ volatile(
    4602:	f04f 0320 	mov.w	r3, #32
    4606:	f3ef 8511 	mrs	r5, BASEPRI
    460a:	f383 8812 	msr	BASEPRI_MAX, r3
    460e:	f3bf 8f6f 	isb	sy
		if (trans->status == -EBUSY) {
    4612:	4b04      	ldr	r3, [pc, #16]	; (4624 <usb_cancel_transfers+0x50>)
    4614:	eb03 1384 	add.w	r3, r3, r4, lsl #6
    4618:	685b      	ldr	r3, [r3, #4]
    461a:	f113 0f10 	cmn.w	r3, #16
    461e:	d1e9      	bne.n	45f4 <usb_cancel_transfers+0x20>
    4620:	e7db      	b.n	45da <usb_cancel_transfers+0x6>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    4622:	bd38      	pop	{r3, r4, r5, pc}
    4624:	20001780 	.word	0x20001780
    4628:	20000628 	.word	0x20000628

0000462c <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    462c:	b570      	push	{r4, r5, r6, lr}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    462e:	2600      	movs	r6, #0
    4630:	e011      	b.n	4656 <usb_transfer_init+0x2a>
		k_work_init(&ut_data[i].work, usb_transfer_work);
    4632:	4c0b      	ldr	r4, [pc, #44]	; (4660 <usb_transfer_init+0x34>)
    4634:	01b5      	lsls	r5, r6, #6
    4636:	f105 0028 	add.w	r0, r5, #40	; 0x28
    463a:	4420      	add	r0, r4
    463c:	4909      	ldr	r1, [pc, #36]	; (4664 <usb_transfer_init+0x38>)
    463e:	3004      	adds	r0, #4
    4640:	f010 ffe9 	bl	15616 <k_work_init>
		k_sem_init(&ut_data[i].sem, 1, 1);
    4644:	f105 0018 	add.w	r0, r5, #24
    4648:	4420      	add	r0, r4
    464a:	3004      	adds	r0, #4
	return z_impl_k_sem_init(sem, initial_count, limit);
    464c:	2201      	movs	r2, #1
    464e:	4611      	mov	r1, r2
    4650:	f010 ffd2 	bl	155f8 <z_impl_k_sem_init>
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    4654:	3601      	adds	r6, #1
    4656:	2e03      	cmp	r6, #3
    4658:	ddeb      	ble.n	4632 <usb_transfer_init+0x6>
	}

	return 0;
}
    465a:	2000      	movs	r0, #0
    465c:	bd70      	pop	{r4, r5, r6, pc}
    465e:	bf00      	nop
    4660:	20001780 	.word	0x20001780
    4664:	00004249 	.word	0x00004249

00004668 <cdc_acm_class_handle_req>:
 *
 * @return  0 on success, negative errno code on fail.
 */
int cdc_acm_class_handle_req(struct usb_setup_packet *setup,
			     int32_t *len, uint8_t **data)
{
    4668:	b570      	push	{r4, r5, r6, lr}
    466a:	4604      	mov	r4, r0
    466c:	460e      	mov	r6, r1
    466e:	4615      	mov	r5, r2
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;
	uint32_t rate;
	uint32_t new_rate;

	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    4670:	7901      	ldrb	r1, [r0, #4]
    4672:	481e      	ldr	r0, [pc, #120]	; (46ec <cdc_acm_class_handle_req+0x84>)
    4674:	f00d ff24 	bl	124c0 <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
    4678:	b158      	cbz	r0, 4692 <cdc_acm_class_handle_req+0x2a>
		return -ENODEV;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	if (usb_reqtype_is_to_device(setup)) {
    467a:	f994 2000 	ldrsb.w	r2, [r4]
    467e:	2a00      	cmp	r2, #0
    4680:	db27      	blt.n	46d2 <cdc_acm_class_handle_req+0x6a>
		switch (setup->bRequest) {
    4682:	7862      	ldrb	r2, [r4, #1]
    4684:	2a20      	cmp	r2, #32
    4686:	d018      	beq.n	46ba <cdc_acm_class_handle_req+0x52>
    4688:	2a22      	cmp	r2, #34	; 0x22
    468a:	d01d      	beq.n	46c8 <cdc_acm_class_handle_req+0x60>
    468c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4690:	e028      	b.n	46e4 <cdc_acm_class_handle_req+0x7c>
    4692:	4b17      	ldr	r3, [pc, #92]	; (46f0 <cdc_acm_class_handle_req+0x88>)
    4694:	4a17      	ldr	r2, [pc, #92]	; (46f4 <cdc_acm_class_handle_req+0x8c>)
    4696:	1a9b      	subs	r3, r3, r2
    4698:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Device data not found for interface %u",
    469a:	f04f 0200 	mov.w	r2, #0
    469e:	2102      	movs	r1, #2
    46a0:	f361 0202 	bfi	r2, r1, #0, #3
    46a4:	f36f 02c5 	bfc	r2, #3, #3
    46a8:	f363 128f 	bfi	r2, r3, #6, #10
    46ac:	88a1      	ldrh	r1, [r4, #4]
    46ae:	4812      	ldr	r0, [pc, #72]	; (46f8 <cdc_acm_class_handle_req+0x90>)
    46b0:	f7fe fa82 	bl	2bb8 <log_1>
		return -ENODEV;
    46b4:	f06f 0012 	mvn.w	r0, #18
    46b8:	e014      	b.n	46e4 <cdc_acm_class_handle_req+0x7c>
		case SET_LINE_CODING:
			rate = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
			memcpy(&dev_data->line_coding, *data,
    46ba:	2207      	movs	r2, #7
    46bc:	6829      	ldr	r1, [r5, #0]
    46be:	380c      	subs	r0, #12
    46c0:	f00e f9fe 	bl	12ac0 <memcpy>
#if defined(CONFIG_CDC_ACM_DTE_RATE_CALLBACK_SUPPORT)
			if (rate != new_rate && dev_data->rate_cb != NULL) {
				dev_data->rate_cb(common->dev, new_rate);
			}
#endif
			return 0;
    46c4:	2000      	movs	r0, #0
    46c6:	e00d      	b.n	46e4 <cdc_acm_class_handle_req+0x7c>

		case SET_CONTROL_LINE_STATE:
			dev_data->line_state = (uint8_t)setup->wValue;
    46c8:	78a2      	ldrb	r2, [r4, #2]
    46ca:	f800 2c05 	strb.w	r2, [r0, #-5]
			LOG_DBG("CDC_SET_CONTROL_LINE_STATE 0x%x",
				dev_data->line_state);
			return 0;
    46ce:	2000      	movs	r0, #0
    46d0:	e008      	b.n	46e4 <cdc_acm_class_handle_req+0x7c>

		default:
			break;
		}
	} else {
		if (setup->bRequest == GET_LINE_CODING) {
    46d2:	7862      	ldrb	r2, [r4, #1]
    46d4:	2a21      	cmp	r2, #33	; 0x21
    46d6:	d106      	bne.n	46e6 <cdc_acm_class_handle_req+0x7e>
			*data = (uint8_t *)(&dev_data->line_coding);
    46d8:	f1a0 030c 	sub.w	r3, r0, #12
    46dc:	602b      	str	r3, [r5, #0]
			*len = sizeof(dev_data->line_coding);
    46de:	2307      	movs	r3, #7
    46e0:	6033      	str	r3, [r6, #0]
			LOG_DBG("CDC_GET_LINE_CODING %d %d %d %d",
				sys_le32_to_cpu(dev_data->line_coding.dwDTERate),
				dev_data->line_coding.bCharFormat,
				dev_data->line_coding.bParityType,
				dev_data->line_coding.bDataBits);
			return 0;
    46e2:	2000      	movs	r0, #0
	}

	LOG_DBG("CDC ACM bmRequestType 0x%02x bRequest 0x%02x unsupported",
		setup->bmRequestType, setup->bRequest);
	return -ENOTSUP;
}
    46e4:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOTSUP;
    46e6:	f06f 0085 	mvn.w	r0, #133	; 0x85
    46ea:	e7fb      	b.n	46e4 <cdc_acm_class_handle_req+0x7c>
    46ec:	20001880 	.word	0x20001880
    46f0:	00015f08 	.word	0x00015f08
    46f4:	00015ea8 	.word	0x00015ea8
    46f8:	00016494 	.word	0x00016494

000046fc <cdc_acm_int_in>:
 * @param ep_status Endpoint status code.
 *
 * @return  N/A.
 */
static void cdc_acm_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
    46fc:	b510      	push	{r4, lr}
    46fe:	4604      	mov	r4, r0
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    4700:	4601      	mov	r1, r0
    4702:	480d      	ldr	r0, [pc, #52]	; (4738 <cdc_acm_int_in+0x3c>)
    4704:	f00d fef0 	bl	124e8 <usb_get_dev_data_by_ep>
	if (common == NULL) {
    4708:	b118      	cbz	r0, 4712 <cdc_acm_int_in+0x16>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
    470a:	2201      	movs	r2, #1
    470c:	f800 2c03 	strb.w	r2, [r0, #-3]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
    4710:	bd10      	pop	{r4, pc}
    4712:	4b0a      	ldr	r3, [pc, #40]	; (473c <cdc_acm_int_in+0x40>)
    4714:	4a0a      	ldr	r2, [pc, #40]	; (4740 <cdc_acm_int_in+0x44>)
    4716:	1a9b      	subs	r3, r3, r2
    4718:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Device data not found for endpoint %u", ep);
    471a:	f04f 0200 	mov.w	r2, #0
    471e:	2102      	movs	r1, #2
    4720:	f361 0202 	bfi	r2, r1, #0, #3
    4724:	f36f 02c5 	bfc	r2, #3, #3
    4728:	f363 128f 	bfi	r2, r3, #6, #10
    472c:	4621      	mov	r1, r4
    472e:	4805      	ldr	r0, [pc, #20]	; (4744 <cdc_acm_int_in+0x48>)
    4730:	f7fe fa42 	bl	2bb8 <log_1>
		return;
    4734:	e7ec      	b.n	4710 <cdc_acm_int_in+0x14>
    4736:	bf00      	nop
    4738:	20001880 	.word	0x20001880
    473c:	00015f08 	.word	0x00015f08
    4740:	00015ea8 	.word	0x00015ea8
    4744:	000164bc 	.word	0x000164bc

00004748 <cdc_acm_irq_rx_enable>:
 * @param dev CDC ACM device struct.
 *
 * @return N/A
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
    4748:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    474a:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
    474c:	2301      	movs	r3, #1
    474e:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b

	if (dev_data->cb && dev_data->rx_ready) {
    4752:	680b      	ldr	r3, [r1, #0]
    4754:	b113      	cbz	r3, 475c <cdc_acm_irq_rx_enable+0x14>
    4756:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
    475a:	b903      	cbnz	r3, 475e <cdc_acm_irq_rx_enable+0x16>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
	}
}
    475c:	bd08      	pop	{r3, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    475e:	3108      	adds	r1, #8
    4760:	4801      	ldr	r0, [pc, #4]	; (4768 <cdc_acm_irq_rx_enable+0x20>)
    4762:	f010 ff5e 	bl	15622 <k_work_submit_to_queue>
}
    4766:	e7f9      	b.n	475c <cdc_acm_irq_rx_enable+0x14>
    4768:	20000628 	.word	0x20000628

0000476c <cdc_acm_irq_tx_enable>:
{
    476c:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    476e:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
    4770:	2301      	movs	r3, #1
    4772:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
	if (dev_data->cb && dev_data->tx_ready) {
    4776:	680b      	ldr	r3, [r1, #0]
    4778:	b113      	cbz	r3, 4780 <cdc_acm_irq_tx_enable+0x14>
    477a:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    477e:	b903      	cbnz	r3, 4782 <cdc_acm_irq_tx_enable+0x16>
}
    4780:	bd08      	pop	{r3, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    4782:	3108      	adds	r1, #8
    4784:	4801      	ldr	r0, [pc, #4]	; (478c <cdc_acm_irq_tx_enable+0x20>)
    4786:	f010 ff4c 	bl	15622 <k_work_submit_to_queue>
}
    478a:	e7f9      	b.n	4780 <cdc_acm_irq_tx_enable+0x14>
    478c:	20000628 	.word	0x20000628

00004790 <cdc_acm_reset_port>:
{
    4790:	b510      	push	{r4, lr}
    4792:	4603      	mov	r3, r0
	dev_data->configured = false;
    4794:	2400      	movs	r4, #0
    4796:	f880 407e 	strb.w	r4, [r0, #126]	; 0x7e
	dev_data->suspended = false;
    479a:	f880 407f 	strb.w	r4, [r0, #127]	; 0x7f
	dev_data->rx_ready = false;
    479e:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
	dev_data->tx_ready = false;
    47a2:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
	dev_data->line_coding = (struct cdc_acm_line_coding)
    47a6:	4a0a      	ldr	r2, [pc, #40]	; (47d0 <cdc_acm_reset_port+0x40>)
    47a8:	e892 0003 	ldmia.w	r2, {r0, r1}
    47ac:	6758      	str	r0, [r3, #116]	; 0x74
    47ae:	f8a3 1078 	strh.w	r1, [r3, #120]	; 0x78
    47b2:	0c09      	lsrs	r1, r1, #16
    47b4:	f883 107a 	strb.w	r1, [r3, #122]	; 0x7a
	dev_data->serial_state = 0;
    47b8:	f883 407c 	strb.w	r4, [r3, #124]	; 0x7c
	dev_data->line_state = 0;
    47bc:	f883 407b 	strb.w	r4, [r3, #123]	; 0x7b
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    47c0:	2240      	movs	r2, #64	; 0x40
    47c2:	4621      	mov	r1, r4
    47c4:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    47c8:	f00e f99e 	bl	12b08 <memset>
}
    47cc:	bd10      	pop	{r4, pc}
    47ce:	bf00      	nop
    47d0:	00015fc4 	.word	0x00015fc4

000047d4 <cdc_acm_fifo_fill>:
{
    47d4:	b570      	push	{r4, r5, r6, lr}
    47d6:	4614      	mov	r4, r2
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    47d8:	6906      	ldr	r6, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
    47da:	f896 307e 	ldrb.w	r3, [r6, #126]	; 0x7e
    47de:	b113      	cbz	r3, 47e6 <cdc_acm_fifo_fill+0x12>
    47e0:	f896 307f 	ldrb.w	r3, [r6, #127]	; 0x7f
    47e4:	b193      	cbz	r3, 480c <cdc_acm_fifo_fill+0x38>
    47e6:	4b1a      	ldr	r3, [pc, #104]	; (4850 <cdc_acm_fifo_fill+0x7c>)
    47e8:	4a1a      	ldr	r2, [pc, #104]	; (4854 <cdc_acm_fifo_fill+0x80>)
    47ea:	1a9b      	subs	r3, r3, r2
    47ec:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Device not configured or suspended, drop %d bytes",
    47ee:	f04f 0200 	mov.w	r2, #0
    47f2:	2102      	movs	r1, #2
    47f4:	f361 0202 	bfi	r2, r1, #0, #3
    47f8:	f36f 02c5 	bfc	r2, #3, #3
    47fc:	f363 128f 	bfi	r2, r3, #6, #10
    4800:	4621      	mov	r1, r4
    4802:	4815      	ldr	r0, [pc, #84]	; (4858 <cdc_acm_fifo_fill+0x84>)
    4804:	f7fe f9d8 	bl	2bb8 <log_1>
		return 0;
    4808:	2000      	movs	r0, #0
}
    480a:	bd70      	pop	{r4, r5, r6, pc}
	dev_data->tx_ready = false;
    480c:	2300      	movs	r3, #0
    480e:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    4812:	6f30      	ldr	r0, [r6, #112]	; 0x70
    4814:	f00d f92e 	bl	11a74 <ring_buf_put>
    4818:	4605      	mov	r5, r0
	if (wrote < len) {
    481a:	4284      	cmp	r4, r0
    481c:	d806      	bhi.n	482c <cdc_acm_fifo_fill+0x58>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    481e:	f106 0118 	add.w	r1, r6, #24
    4822:	480e      	ldr	r0, [pc, #56]	; (485c <cdc_acm_fifo_fill+0x88>)
    4824:	f010 fefd 	bl	15622 <k_work_submit_to_queue>
	return wrote;
    4828:	4628      	mov	r0, r5
    482a:	e7ee      	b.n	480a <cdc_acm_fifo_fill+0x36>
    482c:	4b08      	ldr	r3, [pc, #32]	; (4850 <cdc_acm_fifo_fill+0x7c>)
    482e:	4a09      	ldr	r2, [pc, #36]	; (4854 <cdc_acm_fifo_fill+0x80>)
    4830:	1a9b      	subs	r3, r3, r2
    4832:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Ring buffer full, drop %zd bytes", len - wrote);
    4834:	f04f 0200 	mov.w	r2, #0
    4838:	2102      	movs	r1, #2
    483a:	f361 0202 	bfi	r2, r1, #0, #3
    483e:	f36f 02c5 	bfc	r2, #3, #3
    4842:	f363 128f 	bfi	r2, r3, #6, #10
    4846:	1a21      	subs	r1, r4, r0
    4848:	4805      	ldr	r0, [pc, #20]	; (4860 <cdc_acm_fifo_fill+0x8c>)
    484a:	f7fe f9b5 	bl	2bb8 <log_1>
    484e:	e7e6      	b.n	481e <cdc_acm_fifo_fill+0x4a>
    4850:	00015f08 	.word	0x00015f08
    4854:	00015ea8 	.word	0x00015ea8
    4858:	000164e4 	.word	0x000164e4
    485c:	20000628 	.word	0x20000628
    4860:	00016518 	.word	0x00016518

00004864 <cdc_acm_read_cb>:
{
    4864:	b570      	push	{r4, r5, r6, lr}
    4866:	b082      	sub	sp, #8
    4868:	4606      	mov	r6, r0
    486a:	4614      	mov	r4, r2
	if (size <= 0) {
    486c:	1e0d      	subs	r5, r1, #0
    486e:	dd0f      	ble.n	4890 <cdc_acm_read_cb+0x2c>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    4870:	462a      	mov	r2, r5
    4872:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    4876:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    4878:	f00d f8fc 	bl	11a74 <ring_buf_put>
	if (wrote < size) {
    487c:	4285      	cmp	r5, r0
    487e:	d813      	bhi.n	48a8 <cdc_acm_read_cb+0x44>
	dev_data->rx_ready = true;
    4880:	2301      	movs	r3, #1
    4882:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	if (dev_data->cb && dev_data->rx_irq_ena) {
    4886:	6823      	ldr	r3, [r4, #0]
    4888:	b113      	cbz	r3, 4890 <cdc_acm_read_cb+0x2c>
    488a:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    488e:	b9eb      	cbnz	r3, 48cc <cdc_acm_read_cb+0x68>
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
    4890:	9401      	str	r4, [sp, #4]
    4892:	4b11      	ldr	r3, [pc, #68]	; (48d8 <cdc_acm_read_cb+0x74>)
    4894:	9300      	str	r3, [sp, #0]
    4896:	2301      	movs	r3, #1
    4898:	2240      	movs	r2, #64	; 0x40
    489a:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    489e:	4630      	mov	r0, r6
    48a0:	f7ff fdda 	bl	4458 <usb_transfer>
}
    48a4:	b002      	add	sp, #8
    48a6:	bd70      	pop	{r4, r5, r6, pc}
    48a8:	4b0c      	ldr	r3, [pc, #48]	; (48dc <cdc_acm_read_cb+0x78>)
    48aa:	4a0d      	ldr	r2, [pc, #52]	; (48e0 <cdc_acm_read_cb+0x7c>)
    48ac:	1a9b      	subs	r3, r3, r2
    48ae:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Ring buffer full, drop %zd bytes", size - wrote);
    48b0:	f04f 0200 	mov.w	r2, #0
    48b4:	2101      	movs	r1, #1
    48b6:	f361 0202 	bfi	r2, r1, #0, #3
    48ba:	f36f 02c5 	bfc	r2, #3, #3
    48be:	f363 128f 	bfi	r2, r3, #6, #10
    48c2:	1a29      	subs	r1, r5, r0
    48c4:	4807      	ldr	r0, [pc, #28]	; (48e4 <cdc_acm_read_cb+0x80>)
    48c6:	f7fe f977 	bl	2bb8 <log_1>
    48ca:	e7d9      	b.n	4880 <cdc_acm_read_cb+0x1c>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    48cc:	f104 0108 	add.w	r1, r4, #8
    48d0:	4805      	ldr	r0, [pc, #20]	; (48e8 <cdc_acm_read_cb+0x84>)
    48d2:	f010 fea6 	bl	15622 <k_work_submit_to_queue>
    48d6:	e7db      	b.n	4890 <cdc_acm_read_cb+0x2c>
    48d8:	00004865 	.word	0x00004865
    48dc:	00015f08 	.word	0x00015f08
    48e0:	00015ea8 	.word	0x00015ea8
    48e4:	00016518 	.word	0x00016518
    48e8:	20000628 	.word	0x20000628

000048ec <cdc_acm_do_cb>:
{
    48ec:	b538      	push	{r3, r4, r5, lr}
    48ee:	4604      	mov	r4, r0
	const struct device *dev = dev_data->common.dev;
    48f0:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
	struct usb_cfg_data *cfg = (void *)dev->config;
    48f4:	685d      	ldr	r5, [r3, #4]
	switch (status) {
    48f6:	3901      	subs	r1, #1
    48f8:	2905      	cmp	r1, #5
    48fa:	d806      	bhi.n	490a <cdc_acm_do_cb+0x1e>
    48fc:	e8df f001 	tbb	[pc, r1]
    4900:	37060503 	.word	0x37060503
    4904:	5f4b      	.short	0x5f4b
		cdc_acm_reset_port(dev_data);
    4906:	f7ff ff43 	bl	4790 <cdc_acm_reset_port>
}
    490a:	bd38      	pop	{r3, r4, r5, pc}
    490c:	4b45      	ldr	r3, [pc, #276]	; (4a24 <cdc_acm_do_cb+0x138>)
    490e:	4a46      	ldr	r2, [pc, #280]	; (4a28 <cdc_acm_do_cb+0x13c>)
    4910:	1a9b      	subs	r3, r3, r2
    4912:	08db      	lsrs	r3, r3, #3
		LOG_INF("Device configured");
    4914:	f04f 0100 	mov.w	r1, #0
    4918:	2203      	movs	r2, #3
    491a:	f362 0102 	bfi	r1, r2, #0, #3
    491e:	f36f 01c5 	bfc	r1, #3, #3
    4922:	f363 118f 	bfi	r1, r3, #6, #10
    4926:	4841      	ldr	r0, [pc, #260]	; (4a2c <cdc_acm_do_cb+0x140>)
    4928:	f7fe f9da 	bl	2ce0 <log_0>
		if (!dev_data->configured) {
    492c:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    4930:	b19b      	cbz	r3, 495a <cdc_acm_do_cb+0x6e>
		if (!dev_data->tx_ready) {
    4932:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    4936:	2b00      	cmp	r3, #0
    4938:	d1e7      	bne.n	490a <cdc_acm_do_cb+0x1e>
			dev_data->tx_ready = true;
    493a:	2301      	movs	r3, #1
    493c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
    4940:	6823      	ldr	r3, [r4, #0]
    4942:	2b00      	cmp	r3, #0
    4944:	d0e1      	beq.n	490a <cdc_acm_do_cb+0x1e>
    4946:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    494a:	2b00      	cmp	r3, #0
    494c:	d0dd      	beq.n	490a <cdc_acm_do_cb+0x1e>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    494e:	f104 0108 	add.w	r1, r4, #8
    4952:	4837      	ldr	r0, [pc, #220]	; (4a30 <cdc_acm_do_cb+0x144>)
    4954:	f010 fe65 	bl	15622 <k_work_submit_to_queue>
    4958:	e7d7      	b.n	490a <cdc_acm_do_cb+0x1e>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
    495a:	6a2b      	ldr	r3, [r5, #32]
    495c:	4622      	mov	r2, r4
    495e:	2100      	movs	r1, #0
    4960:	7b18      	ldrb	r0, [r3, #12]
    4962:	f7ff ff7f 	bl	4864 <cdc_acm_read_cb>
			dev_data->configured = true;
    4966:	2301      	movs	r3, #1
    4968:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
    496c:	e7e1      	b.n	4932 <cdc_acm_do_cb+0x46>
    496e:	4b2d      	ldr	r3, [pc, #180]	; (4a24 <cdc_acm_do_cb+0x138>)
    4970:	4a2d      	ldr	r2, [pc, #180]	; (4a28 <cdc_acm_do_cb+0x13c>)
    4972:	1a9b      	subs	r3, r3, r2
    4974:	08db      	lsrs	r3, r3, #3
		LOG_INF("Device disconnected");
    4976:	f04f 0100 	mov.w	r1, #0
    497a:	2203      	movs	r2, #3
    497c:	f362 0102 	bfi	r1, r2, #0, #3
    4980:	f36f 01c5 	bfc	r1, #3, #3
    4984:	f363 118f 	bfi	r1, r3, #6, #10
    4988:	482a      	ldr	r0, [pc, #168]	; (4a34 <cdc_acm_do_cb+0x148>)
    498a:	f7fe f9a9 	bl	2ce0 <log_0>
		cdc_acm_reset_port(dev_data);
    498e:	4620      	mov	r0, r4
    4990:	f7ff fefe 	bl	4790 <cdc_acm_reset_port>
		break;
    4994:	e7b9      	b.n	490a <cdc_acm_do_cb+0x1e>
    4996:	4b23      	ldr	r3, [pc, #140]	; (4a24 <cdc_acm_do_cb+0x138>)
    4998:	4a23      	ldr	r2, [pc, #140]	; (4a28 <cdc_acm_do_cb+0x13c>)
    499a:	1a9b      	subs	r3, r3, r2
    499c:	08db      	lsrs	r3, r3, #3
		LOG_INF("Device suspended");
    499e:	f04f 0100 	mov.w	r1, #0
    49a2:	2203      	movs	r2, #3
    49a4:	f362 0102 	bfi	r1, r2, #0, #3
    49a8:	f36f 01c5 	bfc	r1, #3, #3
    49ac:	f363 118f 	bfi	r1, r3, #6, #10
    49b0:	4821      	ldr	r0, [pc, #132]	; (4a38 <cdc_acm_do_cb+0x14c>)
    49b2:	f7fe f995 	bl	2ce0 <log_0>
		dev_data->suspended = true;
    49b6:	2301      	movs	r3, #1
    49b8:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
		break;
    49bc:	e7a5      	b.n	490a <cdc_acm_do_cb+0x1e>
    49be:	4b19      	ldr	r3, [pc, #100]	; (4a24 <cdc_acm_do_cb+0x138>)
    49c0:	4a19      	ldr	r2, [pc, #100]	; (4a28 <cdc_acm_do_cb+0x13c>)
    49c2:	1a9b      	subs	r3, r3, r2
    49c4:	08db      	lsrs	r3, r3, #3
		LOG_INF("Device resumed");
    49c6:	f04f 0100 	mov.w	r1, #0
    49ca:	2203      	movs	r2, #3
    49cc:	f362 0102 	bfi	r1, r2, #0, #3
    49d0:	f36f 01c5 	bfc	r1, #3, #3
    49d4:	f363 118f 	bfi	r1, r3, #6, #10
    49d8:	4818      	ldr	r0, [pc, #96]	; (4a3c <cdc_acm_do_cb+0x150>)
    49da:	f7fe f981 	bl	2ce0 <log_0>
		if (dev_data->suspended) {
    49de:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
    49e2:	2b00      	cmp	r3, #0
    49e4:	d091      	beq.n	490a <cdc_acm_do_cb+0x1e>
    49e6:	4b0f      	ldr	r3, [pc, #60]	; (4a24 <cdc_acm_do_cb+0x138>)
    49e8:	4a0f      	ldr	r2, [pc, #60]	; (4a28 <cdc_acm_do_cb+0x13c>)
    49ea:	1a9b      	subs	r3, r3, r2
    49ec:	08db      	lsrs	r3, r3, #3
			LOG_INF("from suspend");
    49ee:	f04f 0100 	mov.w	r1, #0
    49f2:	2203      	movs	r2, #3
    49f4:	f362 0102 	bfi	r1, r2, #0, #3
    49f8:	f36f 01c5 	bfc	r1, #3, #3
    49fc:	f363 118f 	bfi	r1, r3, #6, #10
    4a00:	480f      	ldr	r0, [pc, #60]	; (4a40 <cdc_acm_do_cb+0x154>)
    4a02:	f7fe f96d 	bl	2ce0 <log_0>
			dev_data->suspended = false;
    4a06:	2300      	movs	r3, #0
    4a08:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
			if (dev_data->configured) {
    4a0c:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    4a10:	2b00      	cmp	r3, #0
    4a12:	f43f af7a 	beq.w	490a <cdc_acm_do_cb+0x1e>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    4a16:	6a2b      	ldr	r3, [r5, #32]
    4a18:	4622      	mov	r2, r4
    4a1a:	2100      	movs	r1, #0
    4a1c:	7b18      	ldrb	r0, [r3, #12]
    4a1e:	f7ff ff21 	bl	4864 <cdc_acm_read_cb>
}
    4a22:	e772      	b.n	490a <cdc_acm_do_cb+0x1e>
    4a24:	00015f08 	.word	0x00015f08
    4a28:	00015ea8 	.word	0x00015ea8
    4a2c:	0001653c 	.word	0x0001653c
    4a30:	20000628 	.word	0x20000628
    4a34:	00016550 	.word	0x00016550
    4a38:	00016564 	.word	0x00016564
    4a3c:	00016578 	.word	0x00016578
    4a40:	00016588 	.word	0x00016588

00004a44 <cdc_acm_dev_status_cb>:
{
    4a44:	b570      	push	{r4, r5, r6, lr}
    4a46:	4604      	mov	r4, r0
    4a48:	460d      	mov	r5, r1
    4a4a:	4616      	mov	r6, r2
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
    4a4c:	4601      	mov	r1, r0
    4a4e:	480e      	ldr	r0, [pc, #56]	; (4a88 <cdc_acm_dev_status_cb+0x44>)
    4a50:	f00d fd24 	bl	1249c <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    4a54:	b128      	cbz	r0, 4a62 <cdc_acm_dev_status_cb+0x1e>
	cdc_acm_do_cb(dev_data, status, param);
    4a56:	4632      	mov	r2, r6
    4a58:	4629      	mov	r1, r5
    4a5a:	3880      	subs	r0, #128	; 0x80
    4a5c:	f7ff ff46 	bl	48ec <cdc_acm_do_cb>
}
    4a60:	bd70      	pop	{r4, r5, r6, pc}
    4a62:	4b0a      	ldr	r3, [pc, #40]	; (4a8c <cdc_acm_dev_status_cb+0x48>)
    4a64:	4a0a      	ldr	r2, [pc, #40]	; (4a90 <cdc_acm_dev_status_cb+0x4c>)
    4a66:	1a9b      	subs	r3, r3, r2
    4a68:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Device data not found for cfg %p", cfg);
    4a6a:	f04f 0200 	mov.w	r2, #0
    4a6e:	2102      	movs	r1, #2
    4a70:	f361 0202 	bfi	r2, r1, #0, #3
    4a74:	f36f 02c5 	bfc	r2, #3, #3
    4a78:	f363 128f 	bfi	r2, r3, #6, #10
    4a7c:	4621      	mov	r1, r4
    4a7e:	4805      	ldr	r0, [pc, #20]	; (4a94 <cdc_acm_dev_status_cb+0x50>)
    4a80:	f7fe f89a 	bl	2bb8 <log_1>
		return;
    4a84:	e7ec      	b.n	4a60 <cdc_acm_dev_status_cb+0x1c>
    4a86:	bf00      	nop
    4a88:	20001880 	.word	0x20001880
    4a8c:	00015f08 	.word	0x00015f08
    4a90:	00015ea8 	.word	0x00015ea8
    4a94:	00016598 	.word	0x00016598

00004a98 <cdc_acm_send_notification>:
 *
 * @return  N/A.
 */
static int cdc_acm_send_notification(const struct device *dev,
				     uint16_t serial_state)
{
    4a98:	b530      	push	{r4, r5, lr}
    4a9a:	b085      	sub	sp, #20
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    4a9c:	6905      	ldr	r5, [r0, #16]
	struct usb_cfg_data * const cfg = (void *)dev->config;
    4a9e:	6843      	ldr	r3, [r0, #4]
	struct cdc_acm_notification notification;
	uint32_t cnt = 0U;

	notification.bmRequestType = 0xA1;
    4aa0:	22a1      	movs	r2, #161	; 0xa1
    4aa2:	f88d 2004 	strb.w	r2, [sp, #4]
	notification.bNotificationType = 0x20;
    4aa6:	2220      	movs	r2, #32
    4aa8:	f88d 2005 	strb.w	r2, [sp, #5]
	notification.wValue = 0U;
    4aac:	2400      	movs	r4, #0
    4aae:	f8ad 4006 	strh.w	r4, [sp, #6]
	notification.wIndex = 0U;
    4ab2:	f8ad 4008 	strh.w	r4, [sp, #8]
	notification.wLength = sys_cpu_to_le16(sizeof(serial_state));
    4ab6:	2202      	movs	r2, #2
    4ab8:	f8ad 200a 	strh.w	r2, [sp, #10]
	notification.data = sys_cpu_to_le16(serial_state);
    4abc:	f8ad 100c 	strh.w	r1, [sp, #12]

	dev_data->notification_sent = 0U;
    4ac0:	f885 407d 	strb.w	r4, [r5, #125]	; 0x7d

	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    4ac4:	6a18      	ldr	r0, [r3, #32]
    4ac6:	4623      	mov	r3, r4
    4ac8:	220a      	movs	r2, #10
    4aca:	a901      	add	r1, sp, #4
    4acc:	7900      	ldrb	r0, [r0, #4]
    4ace:	f00d fc4e 	bl	1236e <usb_write>
		  (const uint8_t *)&notification, sizeof(notification), NULL);

	/* Wait for notification to be sent */
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    4ad2:	f895 307d 	ldrb.w	r3, [r5, #125]	; 0x7d
    4ad6:	b94b      	cbnz	r3, 4aec <cdc_acm_send_notification+0x54>
	z_impl_k_busy_wait(usec_to_wait);
    4ad8:	2001      	movs	r0, #1
    4ada:	f010 ffe5 	bl	15aa8 <z_impl_k_busy_wait>
		k_busy_wait(1);

		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
    4ade:	3401      	adds	r4, #1
    4ae0:	4b04      	ldr	r3, [pc, #16]	; (4af4 <cdc_acm_send_notification+0x5c>)
    4ae2:	429c      	cmp	r4, r3
    4ae4:	d9f5      	bls.n	4ad2 <cdc_acm_send_notification+0x3a>
			LOG_DBG("CDC ACM notification timeout!");
			return -EIO;
    4ae6:	f06f 0004 	mvn.w	r0, #4
    4aea:	e000      	b.n	4aee <cdc_acm_send_notification+0x56>
		}
	}

	return 0;
    4aec:	2000      	movs	r0, #0
}
    4aee:	b005      	add	sp, #20
    4af0:	bd30      	pop	{r4, r5, pc}
    4af2:	bf00      	nop
    4af4:	000186a0 	.word	0x000186a0

00004af8 <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
    4af8:	b510      	push	{r4, lr}
    4afa:	b082      	sub	sp, #8
    4afc:	f88d 1007 	strb.w	r1, [sp, #7]
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    4b00:	6904      	ldr	r4, [r0, #16]

	if (!dev_data->configured || dev_data->suspended) {
    4b02:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    4b06:	b113      	cbz	r3, 4b0e <cdc_acm_poll_out+0x16>
    4b08:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
    4b0c:	b18b      	cbz	r3, 4b32 <cdc_acm_poll_out+0x3a>
    4b0e:	4b28      	ldr	r3, [pc, #160]	; (4bb0 <cdc_acm_poll_out+0xb8>)
    4b10:	4a28      	ldr	r2, [pc, #160]	; (4bb4 <cdc_acm_poll_out+0xbc>)
    4b12:	1a9b      	subs	r3, r3, r2
    4b14:	08db      	lsrs	r3, r3, #3
		LOG_INF("USB device not ready, drop data");
    4b16:	f04f 0100 	mov.w	r1, #0
    4b1a:	2203      	movs	r2, #3
    4b1c:	f362 0102 	bfi	r1, r2, #0, #3
    4b20:	f36f 01c5 	bfc	r1, #3, #3
    4b24:	f363 118f 	bfi	r1, r3, #6, #10
    4b28:	4823      	ldr	r0, [pc, #140]	; (4bb8 <cdc_acm_poll_out+0xc0>)
    4b2a:	f7fe f8d9 	bl	2ce0 <log_0>
			return;
		}
	}

	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
}
    4b2e:	b002      	add	sp, #8
    4b30:	bd10      	pop	{r4, pc}
	dev_data->tx_ready = false;
    4b32:	2300      	movs	r3, #0
    4b34:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    4b38:	2201      	movs	r2, #1
    4b3a:	f10d 0107 	add.w	r1, sp, #7
    4b3e:	6f20      	ldr	r0, [r4, #112]	; 0x70
    4b40:	f00c ff98 	bl	11a74 <ring_buf_put>
    4b44:	b9e0      	cbnz	r0, 4b80 <cdc_acm_poll_out+0x88>
    4b46:	4b1a      	ldr	r3, [pc, #104]	; (4bb0 <cdc_acm_poll_out+0xb8>)
    4b48:	4a1a      	ldr	r2, [pc, #104]	; (4bb4 <cdc_acm_poll_out+0xbc>)
    4b4a:	1a9b      	subs	r3, r3, r2
    4b4c:	08db      	lsrs	r3, r3, #3
		LOG_INF("Ring buffer full, drain buffer");
    4b4e:	f04f 0100 	mov.w	r1, #0
    4b52:	2203      	movs	r2, #3
    4b54:	f362 0102 	bfi	r1, r2, #0, #3
    4b58:	f36f 01c5 	bfc	r1, #3, #3
    4b5c:	f363 118f 	bfi	r1, r3, #6, #10
    4b60:	4816      	ldr	r0, [pc, #88]	; (4bbc <cdc_acm_poll_out+0xc4>)
    4b62:	f7fe f8bd 	bl	2ce0 <log_0>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    4b66:	2201      	movs	r2, #1
    4b68:	2100      	movs	r1, #0
    4b6a:	6f20      	ldr	r0, [r4, #112]	; 0x70
    4b6c:	f00c ffec 	bl	11b48 <ring_buf_get>
    4b70:	b160      	cbz	r0, 4b8c <cdc_acm_poll_out+0x94>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    4b72:	2201      	movs	r2, #1
    4b74:	f10d 0107 	add.w	r1, sp, #7
    4b78:	6f20      	ldr	r0, [r4, #112]	; 0x70
    4b7a:	f00c ff7b 	bl	11a74 <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    4b7e:	b128      	cbz	r0, 4b8c <cdc_acm_poll_out+0x94>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    4b80:	f104 0118 	add.w	r1, r4, #24
    4b84:	480e      	ldr	r0, [pc, #56]	; (4bc0 <cdc_acm_poll_out+0xc8>)
    4b86:	f010 fd4c 	bl	15622 <k_work_submit_to_queue>
    4b8a:	e7d0      	b.n	4b2e <cdc_acm_poll_out+0x36>
    4b8c:	4b08      	ldr	r3, [pc, #32]	; (4bb0 <cdc_acm_poll_out+0xb8>)
    4b8e:	4a09      	ldr	r2, [pc, #36]	; (4bb4 <cdc_acm_poll_out+0xbc>)
    4b90:	1a9b      	subs	r3, r3, r2
    4b92:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Failed to drain buffer");
    4b94:	f04f 0100 	mov.w	r1, #0
    4b98:	2201      	movs	r2, #1
    4b9a:	f362 0102 	bfi	r1, r2, #0, #3
    4b9e:	f36f 01c5 	bfc	r1, #3, #3
    4ba2:	f363 118f 	bfi	r1, r3, #6, #10
    4ba6:	4807      	ldr	r0, [pc, #28]	; (4bc4 <cdc_acm_poll_out+0xcc>)
    4ba8:	f7fe f89a 	bl	2ce0 <log_0>
			return;
    4bac:	e7bf      	b.n	4b2e <cdc_acm_poll_out+0x36>
    4bae:	bf00      	nop
    4bb0:	00015f08 	.word	0x00015f08
    4bb4:	00015ea8 	.word	0x00015ea8
    4bb8:	000165bc 	.word	0x000165bc
    4bbc:	000165dc 	.word	0x000165dc
    4bc0:	20000628 	.word	0x20000628
    4bc4:	000165fc 	.word	0x000165fc

00004bc8 <cdc_acm_write_cb>:
{
    4bc8:	b510      	push	{r4, lr}
    4bca:	4614      	mov	r4, r2
	dev_data->tx_ready = true;
    4bcc:	2301      	movs	r3, #1
    4bce:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	if (dev_data->cb && dev_data->tx_irq_ena) {
    4bd2:	6813      	ldr	r3, [r2, #0]
    4bd4:	b113      	cbz	r3, 4bdc <cdc_acm_write_cb+0x14>
    4bd6:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
    4bda:	b923      	cbnz	r3, 4be6 <cdc_acm_write_cb+0x1e>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
    4bdc:	6f20      	ldr	r0, [r4, #112]	; 0x70
    4bde:	f00c fee5 	bl	119ac <ring_buf_is_empty>
    4be2:	b130      	cbz	r0, 4bf2 <cdc_acm_write_cb+0x2a>
}
    4be4:	bd10      	pop	{r4, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    4be6:	f102 0108 	add.w	r1, r2, #8
    4bea:	4805      	ldr	r0, [pc, #20]	; (4c00 <cdc_acm_write_cb+0x38>)
    4bec:	f010 fd19 	bl	15622 <k_work_submit_to_queue>
    4bf0:	e7f4      	b.n	4bdc <cdc_acm_write_cb+0x14>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    4bf2:	f104 0118 	add.w	r1, r4, #24
    4bf6:	4802      	ldr	r0, [pc, #8]	; (4c00 <cdc_acm_write_cb+0x38>)
    4bf8:	f010 fd13 	bl	15622 <k_work_submit_to_queue>
    4bfc:	e7f2      	b.n	4be4 <cdc_acm_write_cb+0x1c>
    4bfe:	bf00      	nop
    4c00:	20000628 	.word	0x20000628

00004c04 <cdc_acm_init>:
{
    4c04:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    4c06:	6904      	ldr	r4, [r0, #16]
	dev_data->common.dev = dev;
    4c08:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
    4c0c:	f104 0384 	add.w	r3, r4, #132	; 0x84
	parent->next = child;
    4c10:	2200      	movs	r2, #0
    4c12:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    4c16:	4a0b      	ldr	r2, [pc, #44]	; (4c44 <cdc_acm_init+0x40>)
    4c18:	6852      	ldr	r2, [r2, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    4c1a:	b172      	cbz	r2, 4c3a <cdc_acm_init+0x36>
	parent->next = child;
    4c1c:	6013      	str	r3, [r2, #0]
	list->tail = node;
    4c1e:	4a09      	ldr	r2, [pc, #36]	; (4c44 <cdc_acm_init+0x40>)
    4c20:	6053      	str	r3, [r2, #4]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
    4c22:	4909      	ldr	r1, [pc, #36]	; (4c48 <cdc_acm_init+0x44>)
    4c24:	f104 0008 	add.w	r0, r4, #8
    4c28:	f010 fcf5 	bl	15616 <k_work_init>
	k_work_init(&dev_data->tx_work, tx_work_handler);
    4c2c:	4907      	ldr	r1, [pc, #28]	; (4c4c <cdc_acm_init+0x48>)
    4c2e:	f104 0018 	add.w	r0, r4, #24
    4c32:	f010 fcf0 	bl	15616 <k_work_init>
}
    4c36:	2000      	movs	r0, #0
    4c38:	bd10      	pop	{r4, pc}
    4c3a:	4a02      	ldr	r2, [pc, #8]	; (4c44 <cdc_acm_init+0x40>)
    4c3c:	6053      	str	r3, [r2, #4]
	list->head = node;
    4c3e:	6013      	str	r3, [r2, #0]
}
    4c40:	e7ef      	b.n	4c22 <cdc_acm_init+0x1e>
    4c42:	bf00      	nop
    4c44:	20001880 	.word	0x20001880
    4c48:	00012559 	.word	0x00012559
    4c4c:	00004c51 	.word	0x00004c51

00004c50 <tx_work_handler>:
{
    4c50:	b5f0      	push	{r4, r5, r6, r7, lr}
    4c52:	b085      	sub	sp, #20
    4c54:	4604      	mov	r4, r0
	struct cdc_acm_dev_data_t *dev_data =
    4c56:	f1a0 0718 	sub.w	r7, r0, #24
	const struct device *dev = dev_data->common.dev;
    4c5a:	6e83      	ldr	r3, [r0, #104]	; 0x68
	struct usb_cfg_data *cfg = (void *)dev->config;
    4c5c:	685b      	ldr	r3, [r3, #4]
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    4c5e:	6a1b      	ldr	r3, [r3, #32]
    4c60:	7d1d      	ldrb	r5, [r3, #20]
	if (usb_transfer_is_busy(ep)) {
    4c62:	4628      	mov	r0, r5
    4c64:	f00d fc60 	bl	12528 <usb_transfer_is_busy>
    4c68:	b108      	cbz	r0, 4c6e <tx_work_handler+0x1e>
}
    4c6a:	b005      	add	sp, #20
    4c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
    4c6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4c72:	a903      	add	r1, sp, #12
    4c74:	6da0      	ldr	r0, [r4, #88]	; 0x58
    4c76:	f00c ff1d 	bl	11ab4 <ring_buf_get_claim>
	if (!len) {
    4c7a:	4606      	mov	r6, r0
    4c7c:	2800      	cmp	r0, #0
    4c7e:	d0f4      	beq.n	4c6a <tx_work_handler+0x1a>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
    4c80:	f010 0f3f 	tst.w	r0, #63	; 0x3f
    4c84:	d100      	bne.n	4c88 <tx_work_handler+0x38>
		len -= 1;
    4c86:	1e46      	subs	r6, r0, #1
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    4c88:	9701      	str	r7, [sp, #4]
    4c8a:	4b06      	ldr	r3, [pc, #24]	; (4ca4 <tx_work_handler+0x54>)
    4c8c:	9300      	str	r3, [sp, #0]
    4c8e:	2302      	movs	r3, #2
    4c90:	4632      	mov	r2, r6
    4c92:	9903      	ldr	r1, [sp, #12]
    4c94:	4628      	mov	r0, r5
    4c96:	f7ff fbdf 	bl	4458 <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
    4c9a:	4631      	mov	r1, r6
    4c9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    4c9e:	f00c ff35 	bl	11b0c <ring_buf_get_finish>
    4ca2:	e7e2      	b.n	4c6a <tx_work_handler+0x1a>
    4ca4:	00004bc9 	.word	0x00004bc9

00004ca8 <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(const struct device *dev)
{
    4ca8:	b530      	push	{r4, r5, lr}
    4caa:	b083      	sub	sp, #12
	ARG_UNUSED(dev);

	k_work_queue_start(&z_usb_work_q,
    4cac:	4d08      	ldr	r5, [pc, #32]	; (4cd0 <z_usb_work_q_init+0x28>)
    4cae:	2400      	movs	r4, #0
    4cb0:	9400      	str	r4, [sp, #0]
    4cb2:	f04f 33ff 	mov.w	r3, #4294967295
    4cb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4cba:	4906      	ldr	r1, [pc, #24]	; (4cd4 <z_usb_work_q_init+0x2c>)
    4cbc:	4628      	mov	r0, r5
    4cbe:	f00a ff39 	bl	fb34 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    4cc2:	4905      	ldr	r1, [pc, #20]	; (4cd8 <z_usb_work_q_init+0x30>)
    4cc4:	4628      	mov	r0, r5
    4cc6:	f00a fbd9 	bl	f47c <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
    4cca:	4620      	mov	r0, r4
    4ccc:	b003      	add	sp, #12
    4cce:	bd30      	pop	{r4, r5, pc}
    4cd0:	20000628 	.word	0x20000628
    4cd4:	20003460 	.word	0x20003460
    4cd8:	00016680 	.word	0x00016680

00004cdc <get_flash_area_from_id>:

extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
    4cdc:	b410      	push	{r4}
    4cde:	4604      	mov	r4, r0
	for (int i = 0; i < flash_map_entries; i++) {
    4ce0:	2300      	movs	r3, #0
    4ce2:	4a08      	ldr	r2, [pc, #32]	; (4d04 <get_flash_area_from_id+0x28>)
    4ce4:	6812      	ldr	r2, [r2, #0]
    4ce6:	429a      	cmp	r2, r3
    4ce8:	dd09      	ble.n	4cfe <get_flash_area_from_id+0x22>
		if (flash_map[i].fa_id == idx) {
    4cea:	011a      	lsls	r2, r3, #4
    4cec:	4906      	ldr	r1, [pc, #24]	; (4d08 <get_flash_area_from_id+0x2c>)
    4cee:	6809      	ldr	r1, [r1, #0]
    4cf0:	eb01 1003 	add.w	r0, r1, r3, lsl #4
    4cf4:	5c8a      	ldrb	r2, [r1, r2]
    4cf6:	42a2      	cmp	r2, r4
    4cf8:	d002      	beq.n	4d00 <get_flash_area_from_id+0x24>
	for (int i = 0; i < flash_map_entries; i++) {
    4cfa:	3301      	adds	r3, #1
    4cfc:	e7f1      	b.n	4ce2 <get_flash_area_from_id+0x6>
			return &flash_map[i];
		}
	}

	return NULL;
    4cfe:	2000      	movs	r0, #0
}
    4d00:	bc10      	pop	{r4}
    4d02:	4770      	bx	lr
    4d04:	000166f0 	.word	0x000166f0
    4d08:	20000238 	.word	0x20000238

00004d0c <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    4d0c:	4b08      	ldr	r3, [pc, #32]	; (4d30 <flash_area_open+0x24>)
    4d0e:	681b      	ldr	r3, [r3, #0]
    4d10:	b13b      	cbz	r3, 4d22 <flash_area_open+0x16>
{
    4d12:	b510      	push	{r4, lr}
    4d14:	460c      	mov	r4, r1
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    4d16:	f7ff ffe1 	bl	4cdc <get_flash_area_from_id>
	if (area == NULL) {
    4d1a:	b128      	cbz	r0, 4d28 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    4d1c:	6020      	str	r0, [r4, #0]
	return 0;
    4d1e:	2000      	movs	r0, #0
}
    4d20:	bd10      	pop	{r4, pc}
		return -EACCES;
    4d22:	f06f 000c 	mvn.w	r0, #12
}
    4d26:	4770      	bx	lr
		return -ENOENT;
    4d28:	f06f 0001 	mvn.w	r0, #1
    4d2c:	e7f8      	b.n	4d20 <flash_area_open+0x14>
    4d2e:	bf00      	nop
    4d30:	20000238 	.word	0x20000238

00004d34 <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    4d34:	4b1b      	ldr	r3, [pc, #108]	; (4da4 <pm_system_resume+0x70>)
    4d36:	681b      	ldr	r3, [r3, #0]
    4d38:	2b00      	cmp	r3, #0
    4d3a:	d132      	bne.n	4da2 <pm_system_resume+0x6e>
{
    4d3c:	b530      	push	{r4, r5, lr}
    4d3e:	b085      	sub	sp, #20
		post_ops_done = 1;
    4d40:	4b18      	ldr	r3, [pc, #96]	; (4da4 <pm_system_resume+0x70>)
    4d42:	2201      	movs	r2, #1
    4d44:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
    4d46:	4b18      	ldr	r3, [pc, #96]	; (4da8 <pm_system_resume+0x74>)
    4d48:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    4d4c:	ab04      	add	r3, sp, #16
    4d4e:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    4d52:	4b16      	ldr	r3, [pc, #88]	; (4dac <pm_system_resume+0x78>)
    4d54:	b163      	cbz	r3, 4d70 <pm_system_resume+0x3c>
		pm_power_state_exit_post_ops(info);
    4d56:	f00d ff33 	bl	12bc0 <pm_power_state_exit_post_ops>
    4d5a:	f04f 0320 	mov.w	r3, #32
    4d5e:	f3ef 8511 	mrs	r5, BASEPRI
    4d62:	f383 8812 	msr	BASEPRI_MAX, r3
    4d66:	f3bf 8f6f 	isb	sy
	return list->head;
    4d6a:	4b11      	ldr	r3, [pc, #68]	; (4db0 <pm_system_resume+0x7c>)
    4d6c:	681c      	ldr	r4, [r3, #0]
    4d6e:	e00a      	b.n	4d86 <pm_system_resume+0x52>
	__asm__ volatile(
    4d70:	2300      	movs	r3, #0
    4d72:	f383 8811 	msr	BASEPRI, r3
    4d76:	f3bf 8f6f 	isb	sy
}
    4d7a:	e7ee      	b.n	4d5a <pm_system_resume+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    4d7c:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    4d7e:	b10c      	cbz	r4, 4d84 <pm_system_resume+0x50>
	return node->next;
    4d80:	6823      	ldr	r3, [r4, #0]
    4d82:	b143      	cbz	r3, 4d96 <pm_system_resume+0x62>
{
    4d84:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    4d86:	b134      	cbz	r4, 4d96 <pm_system_resume+0x62>
			callback = notifier->state_exit;
    4d88:	68a3      	ldr	r3, [r4, #8]
		if (callback) {
    4d8a:	2b00      	cmp	r3, #0
    4d8c:	d0f6      	beq.n	4d7c <pm_system_resume+0x48>
			callback(z_power_state.state);
    4d8e:	4a06      	ldr	r2, [pc, #24]	; (4da8 <pm_system_resume+0x74>)
    4d90:	7810      	ldrb	r0, [r2, #0]
    4d92:	4798      	blx	r3
    4d94:	e7f2      	b.n	4d7c <pm_system_resume+0x48>
	__asm__ volatile(
    4d96:	f385 8811 	msr	BASEPRI, r5
    4d9a:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
	}
}
    4d9e:	b005      	add	sp, #20
    4da0:	bd30      	pop	{r4, r5, pc}
    4da2:	4770      	bx	lr
    4da4:	2000023c 	.word	0x2000023c
    4da8:	20001890 	.word	0x20001890
    4dac:	00012bc1 	.word	0x00012bc1
    4db0:	20001888 	.word	0x20001888

00004db4 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    4db4:	b570      	push	{r4, r5, r6, lr}
    4db6:	b088      	sub	sp, #32
    4db8:	4606      	mov	r6, r0
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
    4dba:	4c2a      	ldr	r4, [pc, #168]	; (4e64 <pm_system_suspend+0xb0>)
    4dbc:	466d      	mov	r5, sp
    4dbe:	4601      	mov	r1, r0
    4dc0:	4628      	mov	r0, r5
    4dc2:	f00d fd7c 	bl	128be <pm_policy_next_state>
    4dc6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    4dca:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    4dce:	7820      	ldrb	r0, [r4, #0]
    4dd0:	2800      	cmp	r0, #0
    4dd2:	d045      	beq.n	4e60 <pm_system_suspend+0xac>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
    4dd4:	4b24      	ldr	r3, [pc, #144]	; (4e68 <pm_system_suspend+0xb4>)
    4dd6:	2200      	movs	r2, #0
    4dd8:	601a      	str	r2, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    4dda:	f1b6 3fff 	cmp.w	r6, #4294967295
    4dde:	d10c      	bne.n	4dfa <pm_system_suspend+0x46>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    4de0:	f00a ff64 	bl	fcac <k_sched_lock>
	__asm__ volatile(
    4de4:	f04f 0320 	mov.w	r3, #32
    4de8:	f3ef 8511 	mrs	r5, BASEPRI
    4dec:	f383 8812 	msr	BASEPRI_MAX, r3
    4df0:	f3bf 8f6f 	isb	sy
	return list->head;
    4df4:	4b1d      	ldr	r3, [pc, #116]	; (4e6c <pm_system_suspend+0xb8>)
    4df6:	681c      	ldr	r4, [r3, #0]
    4df8:	e016      	b.n	4e28 <pm_system_suspend+0x74>
		     k_us_to_ticks_ceil32(z_power_state.exit_latency_us), true);
    4dfa:	68a3      	ldr	r3, [r4, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    4dfc:	0c59      	lsrs	r1, r3, #17
    4dfe:	03d8      	lsls	r0, r3, #15
    4e00:	4c1b      	ldr	r4, [pc, #108]	; (4e70 <pm_system_suspend+0xbc>)
    4e02:	4a1c      	ldr	r2, [pc, #112]	; (4e74 <pm_system_suspend+0xc0>)
    4e04:	2300      	movs	r3, #0
    4e06:	1900      	adds	r0, r0, r4
    4e08:	f04f 0400 	mov.w	r4, #0
    4e0c:	eb44 0101 	adc.w	r1, r4, r1
    4e10:	f7fb ff92 	bl	d38 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    4e14:	2101      	movs	r1, #1
    4e16:	1a30      	subs	r0, r6, r0
    4e18:	f010 fe17 	bl	15a4a <z_set_timeout_expiry>
    4e1c:	e7e0      	b.n	4de0 <pm_system_suspend+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    4e1e:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    4e20:	b10c      	cbz	r4, 4e26 <pm_system_suspend+0x72>
	return node->next;
    4e22:	6823      	ldr	r3, [r4, #0]
    4e24:	b143      	cbz	r3, 4e38 <pm_system_suspend+0x84>
{
    4e26:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    4e28:	b134      	cbz	r4, 4e38 <pm_system_suspend+0x84>
			callback = notifier->state_entry;
    4e2a:	6863      	ldr	r3, [r4, #4]
		if (callback) {
    4e2c:	2b00      	cmp	r3, #0
    4e2e:	d0f6      	beq.n	4e1e <pm_system_suspend+0x6a>
			callback(z_power_state.state);
    4e30:	4a0c      	ldr	r2, [pc, #48]	; (4e64 <pm_system_suspend+0xb0>)
    4e32:	7810      	ldrb	r0, [r2, #0]
    4e34:	4798      	blx	r3
    4e36:	e7f2      	b.n	4e1e <pm_system_suspend+0x6a>
	__asm__ volatile(
    4e38:	f385 8811 	msr	BASEPRI, r5
    4e3c:	f3bf 8f6f 	isb	sy
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
	pm_state_set(z_power_state);
    4e40:	4b08      	ldr	r3, [pc, #32]	; (4e64 <pm_system_suspend+0xb0>)
    4e42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    4e46:	ab08      	add	r3, sp, #32
    4e48:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    4e4c:	4b0a      	ldr	r3, [pc, #40]	; (4e78 <pm_system_suspend+0xc4>)
    4e4e:	b10b      	cbz	r3, 4e54 <pm_system_suspend+0xa0>
		pm_power_state_set(info);
    4e50:	f00d fea3 	bl	12b9a <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    4e54:	f7ff ff6e 	bl	4d34 <pm_system_resume>
	k_sched_unlock();
    4e58:	f00b f926 	bl	100a8 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
    4e5c:	4b01      	ldr	r3, [pc, #4]	; (4e64 <pm_system_suspend+0xb0>)
    4e5e:	7818      	ldrb	r0, [r3, #0]
}
    4e60:	b008      	add	sp, #32
    4e62:	bd70      	pop	{r4, r5, r6, pc}
    4e64:	20001890 	.word	0x20001890
    4e68:	2000023c 	.word	0x2000023c
    4e6c:	20001888 	.word	0x20001888
    4e70:	000f423f 	.word	0x000f423f
    4e74:	000f4240 	.word	0x000f4240
    4e78:	00012b9b 	.word	0x00012b9b

00004e7c <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    4e7c:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    4e7e:	4802      	ldr	r0, [pc, #8]	; (4e88 <nrf_cc3xx_platform_abort_init+0xc>)
    4e80:	f00b fd9e 	bl	109c0 <nrf_cc3xx_platform_set_abort>
}
    4e84:	bd08      	pop	{r3, pc}
    4e86:	bf00      	nop
    4e88:	000166fc 	.word	0x000166fc

00004e8c <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    4e8c:	b1d0      	cbz	r0, 4ec4 <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    4e8e:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    4e90:	6842      	ldr	r2, [r0, #4]
    4e92:	2a04      	cmp	r2, #4
    4e94:	d005      	beq.n	4ea2 <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    4e96:	b1d2      	cbz	r2, 4ece <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    4e98:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    4e9a:	f00a fc5d 	bl	f758 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    4e9e:	2000      	movs	r0, #0
    }
}
    4ea0:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    4ea2:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4ea4:	2200      	movs	r2, #0
    4ea6:	f3bf 8f5b 	dmb	ish
    4eaa:	e853 1f00 	ldrex	r1, [r3]
    4eae:	2901      	cmp	r1, #1
    4eb0:	d103      	bne.n	4eba <mutex_unlock_platform+0x2e>
    4eb2:	e843 2000 	strex	r0, r2, [r3]
    4eb6:	2800      	cmp	r0, #0
    4eb8:	d1f7      	bne.n	4eaa <mutex_unlock_platform+0x1e>
    4eba:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    4ebe:	d104      	bne.n	4eca <mutex_unlock_platform+0x3e>
    4ec0:	4610      	mov	r0, r2
    4ec2:	e7ed      	b.n	4ea0 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    4ec4:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    4ec8:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    4eca:	4802      	ldr	r0, [pc, #8]	; (4ed4 <mutex_unlock_platform+0x48>)
    4ecc:	e7e8      	b.n	4ea0 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    4ece:	4802      	ldr	r0, [pc, #8]	; (4ed8 <mutex_unlock_platform+0x4c>)
    4ed0:	e7e6      	b.n	4ea0 <mutex_unlock_platform+0x14>
    4ed2:	bf00      	nop
    4ed4:	ffff8fe9 	.word	0xffff8fe9
    4ed8:	ffff8fea 	.word	0xffff8fea

00004edc <mutex_lock_platform>:
    if(mutex == NULL) {
    4edc:	b320      	cbz	r0, 4f28 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    4ede:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    4ee0:	6842      	ldr	r2, [r0, #4]
    4ee2:	2a04      	cmp	r2, #4
    4ee4:	d002      	beq.n	4eec <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    4ee6:	b992      	cbnz	r2, 4f0e <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    4ee8:	4811      	ldr	r0, [pc, #68]	; (4f30 <mutex_lock_platform+0x54>)
    4eea:	e00f      	b.n	4f0c <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    4eec:	6803      	ldr	r3, [r0, #0]
    4eee:	2201      	movs	r2, #1
    4ef0:	f3bf 8f5b 	dmb	ish
    4ef4:	e853 1f00 	ldrex	r1, [r3]
    4ef8:	2900      	cmp	r1, #0
    4efa:	d103      	bne.n	4f04 <mutex_lock_platform+0x28>
    4efc:	e843 2000 	strex	r0, r2, [r3]
    4f00:	2800      	cmp	r0, #0
    4f02:	d1f7      	bne.n	4ef4 <mutex_lock_platform+0x18>
    4f04:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    4f08:	d10c      	bne.n	4f24 <mutex_lock_platform+0x48>
    4f0a:	2000      	movs	r0, #0
}
    4f0c:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
    4f0e:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    4f10:	f04f 32ff 	mov.w	r2, #4294967295
    4f14:	f04f 33ff 	mov.w	r3, #4294967295
    4f18:	f00a fb94 	bl	f644 <z_impl_k_mutex_lock>
        if (ret == 0) {
    4f1c:	2800      	cmp	r0, #0
    4f1e:	d0f5      	beq.n	4f0c <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    4f20:	4804      	ldr	r0, [pc, #16]	; (4f34 <mutex_lock_platform+0x58>)
    4f22:	e7f3      	b.n	4f0c <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    4f24:	4803      	ldr	r0, [pc, #12]	; (4f34 <mutex_lock_platform+0x58>)
    4f26:	e7f1      	b.n	4f0c <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    4f28:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    4f2c:	4770      	bx	lr
    4f2e:	bf00      	nop
    4f30:	ffff8fea 	.word	0xffff8fea
    4f34:	ffff8fe9 	.word	0xffff8fe9

00004f38 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    4f38:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    4f3a:	4604      	mov	r4, r0
    4f3c:	b188      	cbz	r0, 4f62 <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    4f3e:	6863      	ldr	r3, [r4, #4]
    4f40:	2b04      	cmp	r3, #4
    4f42:	d00d      	beq.n	4f60 <mutex_free_platform+0x28>
    4f44:	2b08      	cmp	r3, #8
    4f46:	d00b      	beq.n	4f60 <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    4f48:	b153      	cbz	r3, 4f60 <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    4f4a:	f013 0f02 	tst.w	r3, #2
    4f4e:	d00d      	beq.n	4f6c <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    4f50:	4621      	mov	r1, r4
    4f52:	4809      	ldr	r0, [pc, #36]	; (4f78 <mutex_free_platform+0x40>)
    4f54:	f010 fa21 	bl	1539a <k_mem_slab_free>
        mutex->mutex = NULL;
    4f58:	2300      	movs	r3, #0
    4f5a:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    4f5c:	2300      	movs	r3, #0
    4f5e:	6063      	str	r3, [r4, #4]
}
    4f60:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    4f62:	4b06      	ldr	r3, [pc, #24]	; (4f7c <mutex_free_platform+0x44>)
    4f64:	685b      	ldr	r3, [r3, #4]
    4f66:	4806      	ldr	r0, [pc, #24]	; (4f80 <mutex_free_platform+0x48>)
    4f68:	4798      	blx	r3
    4f6a:	e7e8      	b.n	4f3e <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    4f6c:	2214      	movs	r2, #20
    4f6e:	2100      	movs	r1, #0
    4f70:	6820      	ldr	r0, [r4, #0]
    4f72:	f00d fdc9 	bl	12b08 <memset>
    4f76:	e7f1      	b.n	4f5c <mutex_free_platform+0x24>
    4f78:	2000189c 	.word	0x2000189c
    4f7c:	200002c4 	.word	0x200002c4
    4f80:	00016704 	.word	0x00016704

00004f84 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    4f84:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    4f86:	4604      	mov	r4, r0
    4f88:	b178      	cbz	r0, 4faa <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    4f8a:	6863      	ldr	r3, [r4, #4]
    4f8c:	2b04      	cmp	r3, #4
    4f8e:	d00b      	beq.n	4fa8 <mutex_init_platform+0x24>
    4f90:	2b08      	cmp	r3, #8
    4f92:	d009      	beq.n	4fa8 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    4f94:	b90b      	cbnz	r3, 4f9a <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    4f96:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    4f98:	b163      	cbz	r3, 4fb4 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    4f9a:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    4f9c:	f010 fa9c 	bl	154d8 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    4fa0:	6863      	ldr	r3, [r4, #4]
    4fa2:	f043 0301 	orr.w	r3, r3, #1
    4fa6:	6063      	str	r3, [r4, #4]
}
    4fa8:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    4faa:	4b0f      	ldr	r3, [pc, #60]	; (4fe8 <mutex_init_platform+0x64>)
    4fac:	685b      	ldr	r3, [r3, #4]
    4fae:	480f      	ldr	r0, [pc, #60]	; (4fec <mutex_init_platform+0x68>)
    4fb0:	4798      	blx	r3
    4fb2:	e7ea      	b.n	4f8a <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    4fb4:	f04f 32ff 	mov.w	r2, #4294967295
    4fb8:	f04f 33ff 	mov.w	r3, #4294967295
    4fbc:	4621      	mov	r1, r4
    4fbe:	480c      	ldr	r0, [pc, #48]	; (4ff0 <mutex_init_platform+0x6c>)
    4fc0:	f00a fa06 	bl	f3d0 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    4fc4:	b908      	cbnz	r0, 4fca <mutex_init_platform+0x46>
    4fc6:	6823      	ldr	r3, [r4, #0]
    4fc8:	b91b      	cbnz	r3, 4fd2 <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    4fca:	4b07      	ldr	r3, [pc, #28]	; (4fe8 <mutex_init_platform+0x64>)
    4fcc:	685b      	ldr	r3, [r3, #4]
    4fce:	4809      	ldr	r0, [pc, #36]	; (4ff4 <mutex_init_platform+0x70>)
    4fd0:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    4fd2:	2214      	movs	r2, #20
    4fd4:	2100      	movs	r1, #0
    4fd6:	6820      	ldr	r0, [r4, #0]
    4fd8:	f00d fd96 	bl	12b08 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    4fdc:	6863      	ldr	r3, [r4, #4]
    4fde:	f043 0302 	orr.w	r3, r3, #2
    4fe2:	6063      	str	r3, [r4, #4]
    4fe4:	e7d9      	b.n	4f9a <mutex_init_platform+0x16>
    4fe6:	bf00      	nop
    4fe8:	200002c4 	.word	0x200002c4
    4fec:	00016704 	.word	0x00016704
    4ff0:	2000189c 	.word	0x2000189c
    4ff4:	0001672c 	.word	0x0001672c

00004ff8 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    4ff8:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    4ffa:	2340      	movs	r3, #64	; 0x40
    4ffc:	2214      	movs	r2, #20
    4ffe:	4904      	ldr	r1, [pc, #16]	; (5010 <nrf_cc3xx_platform_mutex_init+0x18>)
    5000:	4804      	ldr	r0, [pc, #16]	; (5014 <nrf_cc3xx_platform_mutex_init+0x1c>)
    5002:	f010 f9bc 	bl	1537e <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    5006:	4904      	ldr	r1, [pc, #16]	; (5018 <nrf_cc3xx_platform_mutex_init+0x20>)
    5008:	4804      	ldr	r0, [pc, #16]	; (501c <nrf_cc3xx_platform_mutex_init+0x24>)
    500a:	f00b fd3b 	bl	10a84 <nrf_cc3xx_platform_set_mutexes>
}
    500e:	bd08      	pop	{r3, pc}
    5010:	200018b8 	.word	0x200018b8
    5014:	2000189c 	.word	0x2000189c
    5018:	0001676c 	.word	0x0001676c
    501c:	0001675c 	.word	0x0001675c

00005020 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    5020:	4901      	ldr	r1, [pc, #4]	; (5028 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    5022:	2210      	movs	r2, #16
	str	r2, [r1]
    5024:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    5026:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    5028:	e000ed10 	.word	0xe000ed10

0000502c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    502c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    502e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    5030:	f380 8811 	msr	BASEPRI, r0
	isb
    5034:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    5038:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    503c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    503e:	b662      	cpsie	i
	isb
    5040:	f3bf 8f6f 	isb	sy

	bx	lr
    5044:	4770      	bx	lr
    5046:	bf00      	nop

00005048 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    5048:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    504a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    504c:	f381 8811 	msr	BASEPRI, r1

	wfe
    5050:	bf20      	wfe

	msr	BASEPRI, r0
    5052:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    5056:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    5058:	4770      	bx	lr
    505a:	bf00      	nop

0000505c <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    505c:	b570      	push	{r4, r5, r6, lr}
    505e:	b082      	sub	sp, #8
    5060:	4604      	mov	r4, r0
    5062:	4d1f      	ldr	r5, [pc, #124]	; (50e0 <esf_dump+0x84>)
    5064:	4b1f      	ldr	r3, [pc, #124]	; (50e4 <esf_dump+0x88>)
    5066:	1aed      	subs	r5, r5, r3
    5068:	08ed      	lsrs	r5, r5, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    506a:	2601      	movs	r6, #1
    506c:	f04f 0300 	mov.w	r3, #0
    5070:	f366 0302 	bfi	r3, r6, #0, #3
    5074:	f36f 03c5 	bfc	r3, #3, #3
    5078:	f365 138f 	bfi	r3, r5, #6, #10
    507c:	f8ad 3000 	strh.w	r3, [sp]
    5080:	6883      	ldr	r3, [r0, #8]
    5082:	6842      	ldr	r2, [r0, #4]
    5084:	6801      	ldr	r1, [r0, #0]
    5086:	4818      	ldr	r0, [pc, #96]	; (50e8 <esf_dump+0x8c>)
    5088:	f7fd fd58 	bl	2b3c <log_3>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    508c:	f04f 0300 	mov.w	r3, #0
    5090:	f366 0302 	bfi	r3, r6, #0, #3
    5094:	f36f 03c5 	bfc	r3, #3, #3
    5098:	f365 138f 	bfi	r3, r5, #6, #10
    509c:	f8ad 3000 	strh.w	r3, [sp]
    50a0:	6963      	ldr	r3, [r4, #20]
    50a2:	6922      	ldr	r2, [r4, #16]
    50a4:	68e1      	ldr	r1, [r4, #12]
    50a6:	4811      	ldr	r0, [pc, #68]	; (50ec <esf_dump+0x90>)
    50a8:	f7fd fd48 	bl	2b3c <log_3>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    50ac:	f04f 0200 	mov.w	r2, #0
    50b0:	f366 0202 	bfi	r2, r6, #0, #3
    50b4:	f36f 02c5 	bfc	r2, #3, #3
    50b8:	f365 128f 	bfi	r2, r5, #6, #10
    50bc:	69e1      	ldr	r1, [r4, #28]
    50be:	480c      	ldr	r0, [pc, #48]	; (50f0 <esf_dump+0x94>)
    50c0:	f7fd fd7a 	bl	2bb8 <log_1>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    50c4:	f04f 0200 	mov.w	r2, #0
    50c8:	f366 0202 	bfi	r2, r6, #0, #3
    50cc:	f36f 02c5 	bfc	r2, #3, #3
    50d0:	f365 128f 	bfi	r2, r5, #6, #10
    50d4:	69a1      	ldr	r1, [r4, #24]
    50d6:	4807      	ldr	r0, [pc, #28]	; (50f4 <esf_dump+0x98>)
    50d8:	f7fd fd6e 	bl	2bb8 <log_1>
		esf->basic.pc);
}
    50dc:	b002      	add	sp, #8
    50de:	bd70      	pop	{r4, r5, r6, pc}
    50e0:	00015ee8 	.word	0x00015ee8
    50e4:	00015ea8 	.word	0x00015ea8
    50e8:	00016780 	.word	0x00016780
    50ec:	000167b0 	.word	0x000167b0
    50f0:	000167e0 	.word	0x000167e0
    50f4:	000167f0 	.word	0x000167f0

000050f8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    50f8:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    50fa:	2b00      	cmp	r3, #0
    50fc:	db08      	blt.n	5110 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    50fe:	f000 001f 	and.w	r0, r0, #31
    5102:	095b      	lsrs	r3, r3, #5
    5104:	2201      	movs	r2, #1
    5106:	fa02 f000 	lsl.w	r0, r2, r0
    510a:	4a02      	ldr	r2, [pc, #8]	; (5114 <arch_irq_enable+0x1c>)
    510c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    5110:	4770      	bx	lr
    5112:	bf00      	nop
    5114:	e000e100 	.word	0xe000e100

00005118 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    5118:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    511a:	2b00      	cmp	r3, #0
    511c:	db0d      	blt.n	513a <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    511e:	f000 001f 	and.w	r0, r0, #31
    5122:	095b      	lsrs	r3, r3, #5
    5124:	2201      	movs	r2, #1
    5126:	fa02 f000 	lsl.w	r0, r2, r0
    512a:	3320      	adds	r3, #32
    512c:	4a03      	ldr	r2, [pc, #12]	; (513c <arch_irq_disable+0x24>)
    512e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    5132:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5136:	f3bf 8f6f 	isb	sy
}
    513a:	4770      	bx	lr
    513c:	e000e100 	.word	0xe000e100

00005140 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    5140:	0942      	lsrs	r2, r0, #5
    5142:	4b05      	ldr	r3, [pc, #20]	; (5158 <arch_irq_is_enabled+0x18>)
    5144:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    5148:	f000 001f 	and.w	r0, r0, #31
    514c:	2301      	movs	r3, #1
    514e:	fa03 f000 	lsl.w	r0, r3, r0
}
    5152:	4010      	ands	r0, r2
    5154:	4770      	bx	lr
    5156:	bf00      	nop
    5158:	e000e100 	.word	0xe000e100

0000515c <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    515c:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    515e:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    5160:	2b00      	cmp	r3, #0
    5162:	db08      	blt.n	5176 <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5164:	0149      	lsls	r1, r1, #5
    5166:	b2c9      	uxtb	r1, r1
    5168:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    516c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    5170:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    5174:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5176:	f000 000f 	and.w	r0, r0, #15
    517a:	0149      	lsls	r1, r1, #5
    517c:	b2c9      	uxtb	r1, r1
    517e:	4b01      	ldr	r3, [pc, #4]	; (5184 <z_arm_irq_priority_set+0x28>)
    5180:	5419      	strb	r1, [r3, r0]
}
    5182:	4770      	bx	lr
    5184:	e000ed14 	.word	0xe000ed14

00005188 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    5188:	bf30      	wfi
    b z_SysNmiOnReset
    518a:	f7ff bffd 	b.w	5188 <z_SysNmiOnReset>
    518e:	bf00      	nop

00005190 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    5190:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    5192:	4b0b      	ldr	r3, [pc, #44]	; (51c0 <z_arm_prep_c+0x30>)
    5194:	4a0b      	ldr	r2, [pc, #44]	; (51c4 <z_arm_prep_c+0x34>)
    5196:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    519a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    519c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    51a0:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    51a4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    51a8:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    51ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    51b0:	f00a f89a 	bl	f2e8 <z_bss_zero>
	z_data_copy();
    51b4:	f00b f93e 	bl	10434 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    51b8:	f000 fcb6 	bl	5b28 <z_arm_interrupt_init>
	z_cstart();
    51bc:	f00a f8a0 	bl	f300 <z_cstart>
    51c0:	e000ed00 	.word	0xe000ed00
    51c4:	00000000 	.word	0x00000000

000051c8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    51c8:	4a0a      	ldr	r2, [pc, #40]	; (51f4 <arch_swap+0x2c>)
    51ca:	6893      	ldr	r3, [r2, #8]
    51cc:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    51d0:	4909      	ldr	r1, [pc, #36]	; (51f8 <arch_swap+0x30>)
    51d2:	6809      	ldr	r1, [r1, #0]
    51d4:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    51d8:	4908      	ldr	r1, [pc, #32]	; (51fc <arch_swap+0x34>)
    51da:	684b      	ldr	r3, [r1, #4]
    51dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    51e0:	604b      	str	r3, [r1, #4]
    51e2:	2300      	movs	r3, #0
    51e4:	f383 8811 	msr	BASEPRI, r3
    51e8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    51ec:	6893      	ldr	r3, [r2, #8]
}
    51ee:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    51f2:	4770      	bx	lr
    51f4:	20002f18 	.word	0x20002f18
    51f8:	000176e8 	.word	0x000176e8
    51fc:	e000ed00 	.word	0xe000ed00

00005200 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    5200:	4913      	ldr	r1, [pc, #76]	; (5250 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    5202:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    5204:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    5208:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    520a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    520e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    5212:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    5214:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    5218:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    521c:	4f0d      	ldr	r7, [pc, #52]	; (5254 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    521e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    5222:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    5224:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    5226:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    5228:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    522c:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    522e:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    5232:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    5236:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    5238:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    523a:	f000 fd17 	bl	5c6c <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    523e:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    5242:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    5246:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    524a:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    524e:	4770      	bx	lr
    ldr r1, =_kernel
    5250:	20002f18 	.word	0x20002f18
    ldr v4, =_SCS_ICSR
    5254:	e000ed04 	.word	0xe000ed04

00005258 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    5258:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    525c:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    525e:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    5262:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    5266:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    5268:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    526c:	2902      	cmp	r1, #2
    beq _oops
    526e:	d0ff      	beq.n	5270 <_oops>

00005270 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    5270:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    5272:	f00d fb36 	bl	128e2 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    5276:	bd01      	pop	{r0, pc}

00005278 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    5278:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    527a:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    527e:	490d      	ldr	r1, [pc, #52]	; (52b4 <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    5280:	f021 0101 	bic.w	r1, r1, #1
    5284:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    5288:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    528c:	9b01      	ldr	r3, [sp, #4]
    528e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    5292:	9b02      	ldr	r3, [sp, #8]
    5294:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    5298:	9b03      	ldr	r3, [sp, #12]
    529a:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    529e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    52a2:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    52a6:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    52a8:	2300      	movs	r3, #0
    52aa:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    52ae:	bc10      	pop	{r4}
    52b0:	4770      	bx	lr
    52b2:	bf00      	nop
    52b4:	0001116b 	.word	0x0001116b

000052b8 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    52b8:	4b16      	ldr	r3, [pc, #88]	; (5314 <z_check_thread_stack_fail+0x5c>)
    52ba:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    52bc:	b1da      	cbz	r2, 52f6 <z_check_thread_stack_fail+0x3e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    52be:	f110 0f16 	cmn.w	r0, #22
    52c2:	d01a      	beq.n	52fa <z_check_thread_stack_fail+0x42>
{
    52c4:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    52c6:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    52ca:	f1a3 0420 	sub.w	r4, r3, #32
    52ce:	4284      	cmp	r4, r0
    52d0:	d805      	bhi.n	52de <z_check_thread_stack_fail+0x26>
    52d2:	4283      	cmp	r3, r0
    52d4:	d908      	bls.n	52e8 <z_check_thread_stack_fail+0x30>
    52d6:	428b      	cmp	r3, r1
    52d8:	d808      	bhi.n	52ec <z_check_thread_stack_fail+0x34>
    52da:	2100      	movs	r1, #0
    52dc:	e000      	b.n	52e0 <z_check_thread_stack_fail+0x28>
    52de:	2100      	movs	r1, #0
    52e0:	b931      	cbnz	r1, 52f0 <z_check_thread_stack_fail+0x38>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    52e2:	2000      	movs	r0, #0
}
    52e4:	bc10      	pop	{r4}
    52e6:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    52e8:	2100      	movs	r1, #0
    52ea:	e7f9      	b.n	52e0 <z_check_thread_stack_fail+0x28>
    52ec:	2101      	movs	r1, #1
    52ee:	e7f7      	b.n	52e0 <z_check_thread_stack_fail+0x28>
		return thread->stack_info.start;
    52f0:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    52f4:	e7f6      	b.n	52e4 <z_check_thread_stack_fail+0x2c>
		return 0;
    52f6:	2000      	movs	r0, #0
    52f8:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    52fa:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    52fe:	428b      	cmp	r3, r1
    5300:	bf94      	ite	ls
    5302:	2100      	movls	r1, #0
    5304:	2101      	movhi	r1, #1
    5306:	b909      	cbnz	r1, 530c <z_check_thread_stack_fail+0x54>
	return 0;
    5308:	2000      	movs	r0, #0
}
    530a:	4770      	bx	lr
		return thread->stack_info.start;
    530c:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    5310:	4770      	bx	lr
    5312:	bf00      	nop
    5314:	20002f18 	.word	0x20002f18

00005318 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    5318:	b508      	push	{r3, lr}
    531a:	460d      	mov	r5, r1
    531c:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    531e:	4b08      	ldr	r3, [pc, #32]	; (5340 <arch_switch_to_main_thread+0x28>)
    5320:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    5322:	f000 fca3 	bl	5c6c <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    5326:	4620      	mov	r0, r4
    5328:	f385 8809 	msr	PSP, r5
    532c:	2100      	movs	r1, #0
    532e:	b663      	cpsie	if
    5330:	f381 8811 	msr	BASEPRI, r1
    5334:	f3bf 8f6f 	isb	sy
    5338:	2200      	movs	r2, #0
    533a:	2300      	movs	r3, #0
    533c:	f00b ff15 	bl	1116a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    5340:	20002f18 	.word	0x20002f18

00005344 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    5344:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    5346:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    5348:	4a0b      	ldr	r2, [pc, #44]	; (5378 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    534a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    534c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    534e:	bf1e      	ittt	ne
	movne	r1, #0
    5350:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    5352:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    5354:	f010 f898 	blne	15488 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    5358:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    535a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    535e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    5362:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    5366:	4905      	ldr	r1, [pc, #20]	; (537c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    5368:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    536a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    536c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    536e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    5372:	4903      	ldr	r1, [pc, #12]	; (5380 <_isr_wrapper+0x3c>)
	bx r1
    5374:	4708      	bx	r1
    5376:	0000      	.short	0x0000
	ldr r2, =_kernel
    5378:	20002f18 	.word	0x20002f18
	ldr r1, =_sw_isr_table
    537c:	00015d28 	.word	0x00015d28
	ldr r1, =z_arm_int_exit
    5380:	00005385 	.word	0x00005385

00005384 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    5384:	4b04      	ldr	r3, [pc, #16]	; (5398 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    5386:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    5388:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    538a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    538c:	d003      	beq.n	5396 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    538e:	4903      	ldr	r1, [pc, #12]	; (539c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    5390:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    5394:	600a      	str	r2, [r1, #0]

00005396 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    5396:	4770      	bx	lr
	ldr r3, =_kernel
    5398:	20002f18 	.word	0x20002f18
	ldr r1, =_SCS_ICSR
    539c:	e000ed04 	.word	0xe000ed04

000053a0 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
    53a0:	b508      	push	{r3, lr}
    53a2:	4b4e      	ldr	r3, [pc, #312]	; (54dc <usage_fault+0x13c>)
    53a4:	4a4e      	ldr	r2, [pc, #312]	; (54e0 <usage_fault+0x140>)
    53a6:	1a9b      	subs	r3, r3, r2
    53a8:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    53aa:	f04f 0100 	mov.w	r1, #0
    53ae:	2201      	movs	r2, #1
    53b0:	f362 0102 	bfi	r1, r2, #0, #3
    53b4:	f36f 01c5 	bfc	r1, #3, #3
    53b8:	f363 118f 	bfi	r1, r3, #6, #10
    53bc:	4849      	ldr	r0, [pc, #292]	; (54e4 <usage_fault+0x144>)
    53be:	f7fd fc8f 	bl	2ce0 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    53c2:	4b49      	ldr	r3, [pc, #292]	; (54e8 <usage_fault+0x148>)
    53c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    53c6:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    53ca:	d121      	bne.n	5410 <usage_fault+0x70>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    53cc:	4b46      	ldr	r3, [pc, #280]	; (54e8 <usage_fault+0x148>)
    53ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    53d0:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    53d4:	d12d      	bne.n	5432 <usage_fault+0x92>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    53d6:	4b44      	ldr	r3, [pc, #272]	; (54e8 <usage_fault+0x148>)
    53d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    53da:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    53de:	d139      	bne.n	5454 <usage_fault+0xb4>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    53e0:	4b41      	ldr	r3, [pc, #260]	; (54e8 <usage_fault+0x148>)
    53e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    53e4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    53e8:	d145      	bne.n	5476 <usage_fault+0xd6>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    53ea:	4b3f      	ldr	r3, [pc, #252]	; (54e8 <usage_fault+0x148>)
    53ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    53ee:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    53f2:	d151      	bne.n	5498 <usage_fault+0xf8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    53f4:	4b3c      	ldr	r3, [pc, #240]	; (54e8 <usage_fault+0x148>)
    53f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    53f8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    53fc:	d15d      	bne.n	54ba <usage_fault+0x11a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    53fe:	4a3a      	ldr	r2, [pc, #232]	; (54e8 <usage_fault+0x148>)
    5400:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5402:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    5406:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    540a:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    540c:	2000      	movs	r0, #0
    540e:	bd08      	pop	{r3, pc}
    5410:	4b32      	ldr	r3, [pc, #200]	; (54dc <usage_fault+0x13c>)
    5412:	4a33      	ldr	r2, [pc, #204]	; (54e0 <usage_fault+0x140>)
    5414:	1a9b      	subs	r3, r3, r2
    5416:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Division by zero");
    5418:	f04f 0100 	mov.w	r1, #0
    541c:	2201      	movs	r2, #1
    541e:	f362 0102 	bfi	r1, r2, #0, #3
    5422:	f36f 01c5 	bfc	r1, #3, #3
    5426:	f363 118f 	bfi	r1, r3, #6, #10
    542a:	4830      	ldr	r0, [pc, #192]	; (54ec <usage_fault+0x14c>)
    542c:	f7fd fc58 	bl	2ce0 <log_0>
    5430:	e7cc      	b.n	53cc <usage_fault+0x2c>
    5432:	4b2a      	ldr	r3, [pc, #168]	; (54dc <usage_fault+0x13c>)
    5434:	4a2a      	ldr	r2, [pc, #168]	; (54e0 <usage_fault+0x140>)
    5436:	1a9b      	subs	r3, r3, r2
    5438:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unaligned memory access");
    543a:	f04f 0100 	mov.w	r1, #0
    543e:	2201      	movs	r2, #1
    5440:	f362 0102 	bfi	r1, r2, #0, #3
    5444:	f36f 01c5 	bfc	r1, #3, #3
    5448:	f363 118f 	bfi	r1, r3, #6, #10
    544c:	4828      	ldr	r0, [pc, #160]	; (54f0 <usage_fault+0x150>)
    544e:	f7fd fc47 	bl	2ce0 <log_0>
    5452:	e7c0      	b.n	53d6 <usage_fault+0x36>
    5454:	4b21      	ldr	r3, [pc, #132]	; (54dc <usage_fault+0x13c>)
    5456:	4a22      	ldr	r2, [pc, #136]	; (54e0 <usage_fault+0x140>)
    5458:	1a9b      	subs	r3, r3, r2
    545a:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  No coprocessor instructions");
    545c:	f04f 0100 	mov.w	r1, #0
    5460:	2201      	movs	r2, #1
    5462:	f362 0102 	bfi	r1, r2, #0, #3
    5466:	f36f 01c5 	bfc	r1, #3, #3
    546a:	f363 118f 	bfi	r1, r3, #6, #10
    546e:	4821      	ldr	r0, [pc, #132]	; (54f4 <usage_fault+0x154>)
    5470:	f7fd fc36 	bl	2ce0 <log_0>
    5474:	e7b4      	b.n	53e0 <usage_fault+0x40>
    5476:	4b19      	ldr	r3, [pc, #100]	; (54dc <usage_fault+0x13c>)
    5478:	4a19      	ldr	r2, [pc, #100]	; (54e0 <usage_fault+0x140>)
    547a:	1a9b      	subs	r3, r3, r2
    547c:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    547e:	f04f 0100 	mov.w	r1, #0
    5482:	2201      	movs	r2, #1
    5484:	f362 0102 	bfi	r1, r2, #0, #3
    5488:	f36f 01c5 	bfc	r1, #3, #3
    548c:	f363 118f 	bfi	r1, r3, #6, #10
    5490:	4819      	ldr	r0, [pc, #100]	; (54f8 <usage_fault+0x158>)
    5492:	f7fd fc25 	bl	2ce0 <log_0>
    5496:	e7a8      	b.n	53ea <usage_fault+0x4a>
    5498:	4b10      	ldr	r3, [pc, #64]	; (54dc <usage_fault+0x13c>)
    549a:	4a11      	ldr	r2, [pc, #68]	; (54e0 <usage_fault+0x140>)
    549c:	1a9b      	subs	r3, r3, r2
    549e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal use of the EPSR");
    54a0:	f04f 0100 	mov.w	r1, #0
    54a4:	2201      	movs	r2, #1
    54a6:	f362 0102 	bfi	r1, r2, #0, #3
    54aa:	f36f 01c5 	bfc	r1, #3, #3
    54ae:	f363 118f 	bfi	r1, r3, #6, #10
    54b2:	4812      	ldr	r0, [pc, #72]	; (54fc <usage_fault+0x15c>)
    54b4:	f7fd fc14 	bl	2ce0 <log_0>
    54b8:	e79c      	b.n	53f4 <usage_fault+0x54>
    54ba:	4b08      	ldr	r3, [pc, #32]	; (54dc <usage_fault+0x13c>)
    54bc:	4a08      	ldr	r2, [pc, #32]	; (54e0 <usage_fault+0x140>)
    54be:	1a9b      	subs	r3, r3, r2
    54c0:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    54c2:	f04f 0100 	mov.w	r1, #0
    54c6:	2201      	movs	r2, #1
    54c8:	f362 0102 	bfi	r1, r2, #0, #3
    54cc:	f36f 01c5 	bfc	r1, #3, #3
    54d0:	f363 118f 	bfi	r1, r3, #6, #10
    54d4:	480a      	ldr	r0, [pc, #40]	; (5500 <usage_fault+0x160>)
    54d6:	f7fd fc03 	bl	2ce0 <log_0>
    54da:	e790      	b.n	53fe <usage_fault+0x5e>
    54dc:	00015ee8 	.word	0x00015ee8
    54e0:	00015ea8 	.word	0x00015ea8
    54e4:	00016820 	.word	0x00016820
    54e8:	e000ed00 	.word	0xe000ed00
    54ec:	00016838 	.word	0x00016838
    54f0:	0001684c 	.word	0x0001684c
    54f4:	00016868 	.word	0x00016868
    54f8:	00016888 	.word	0x00016888
    54fc:	000168b0 	.word	0x000168b0
    5500:	000168cc 	.word	0x000168cc

00005504 <debug_monitor>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
    5504:	b508      	push	{r3, lr}
	*recoverable = false;
    5506:	2200      	movs	r2, #0
    5508:	700a      	strb	r2, [r1, #0]
    550a:	4b08      	ldr	r3, [pc, #32]	; (552c <debug_monitor+0x28>)
    550c:	4908      	ldr	r1, [pc, #32]	; (5530 <debug_monitor+0x2c>)
    550e:	1a5b      	subs	r3, r3, r1
    5510:	08db      	lsrs	r3, r3, #3

	PR_FAULT_INFO(
    5512:	f04f 0100 	mov.w	r1, #0
    5516:	2001      	movs	r0, #1
    5518:	f360 0102 	bfi	r1, r0, #0, #3
    551c:	f362 01c5 	bfi	r1, r2, #3, #3
    5520:	f363 118f 	bfi	r1, r3, #6, #10
    5524:	4803      	ldr	r0, [pc, #12]	; (5534 <debug_monitor+0x30>)
    5526:	f7fd fbdb 	bl	2ce0 <log_0>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
    552a:	bd08      	pop	{r3, pc}
    552c:	00015ee8 	.word	0x00015ee8
    5530:	00015ea8 	.word	0x00015ea8
    5534:	000168f8 	.word	0x000168f8

00005538 <bus_fault>:
{
    5538:	b570      	push	{r4, r5, r6, lr}
    553a:	4605      	mov	r5, r0
    553c:	460e      	mov	r6, r1
    553e:	4614      	mov	r4, r2
    5540:	4b5e      	ldr	r3, [pc, #376]	; (56bc <bus_fault+0x184>)
    5542:	4a5f      	ldr	r2, [pc, #380]	; (56c0 <bus_fault+0x188>)
    5544:	1a9b      	subs	r3, r3, r2
    5546:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    5548:	f04f 0100 	mov.w	r1, #0
    554c:	2201      	movs	r2, #1
    554e:	f362 0102 	bfi	r1, r2, #0, #3
    5552:	f36f 01c5 	bfc	r1, #3, #3
    5556:	f363 118f 	bfi	r1, r3, #6, #10
    555a:	485a      	ldr	r0, [pc, #360]	; (56c4 <bus_fault+0x18c>)
    555c:	f7fd fbc0 	bl	2ce0 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    5560:	4b59      	ldr	r3, [pc, #356]	; (56c8 <bus_fault+0x190>)
    5562:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5564:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    5568:	d124      	bne.n	55b4 <bus_fault+0x7c>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    556a:	4b57      	ldr	r3, [pc, #348]	; (56c8 <bus_fault+0x190>)
    556c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    556e:	f413 6f00 	tst.w	r3, #2048	; 0x800
    5572:	d130      	bne.n	55d6 <bus_fault+0x9e>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    5574:	4b54      	ldr	r3, [pc, #336]	; (56c8 <bus_fault+0x190>)
    5576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5578:	f413 7f00 	tst.w	r3, #512	; 0x200
    557c:	d13c      	bne.n	55f8 <bus_fault+0xc0>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    557e:	4b52      	ldr	r3, [pc, #328]	; (56c8 <bus_fault+0x190>)
    5580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5582:	f413 6f80 	tst.w	r3, #1024	; 0x400
    5586:	d165      	bne.n	5654 <bus_fault+0x11c>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    5588:	4b4f      	ldr	r3, [pc, #316]	; (56c8 <bus_fault+0x190>)
    558a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    558c:	f413 7f80 	tst.w	r3, #256	; 0x100
    5590:	d171      	bne.n	5676 <bus_fault+0x13e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    5592:	4b4d      	ldr	r3, [pc, #308]	; (56c8 <bus_fault+0x190>)
    5594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5596:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    559a:	d17d      	bne.n	5698 <bus_fault+0x160>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    559c:	4a4a      	ldr	r2, [pc, #296]	; (56c8 <bus_fault+0x190>)
    559e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    55a0:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    55a4:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    55a6:	2101      	movs	r1, #1
    55a8:	4628      	mov	r0, r5
    55aa:	f00d f9ac 	bl	12906 <memory_fault_recoverable>
    55ae:	7020      	strb	r0, [r4, #0]
}
    55b0:	2000      	movs	r0, #0
    55b2:	bd70      	pop	{r4, r5, r6, pc}
    55b4:	4b41      	ldr	r3, [pc, #260]	; (56bc <bus_fault+0x184>)
    55b6:	4a42      	ldr	r2, [pc, #264]	; (56c0 <bus_fault+0x188>)
    55b8:	1a9b      	subs	r3, r3, r2
    55ba:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error");
    55bc:	f04f 0100 	mov.w	r1, #0
    55c0:	2201      	movs	r2, #1
    55c2:	f362 0102 	bfi	r1, r2, #0, #3
    55c6:	f36f 01c5 	bfc	r1, #3, #3
    55ca:	f363 118f 	bfi	r1, r3, #6, #10
    55ce:	483f      	ldr	r0, [pc, #252]	; (56cc <bus_fault+0x194>)
    55d0:	f7fd fb86 	bl	2ce0 <log_0>
    55d4:	e7c9      	b.n	556a <bus_fault+0x32>
    55d6:	4b39      	ldr	r3, [pc, #228]	; (56bc <bus_fault+0x184>)
    55d8:	4a39      	ldr	r2, [pc, #228]	; (56c0 <bus_fault+0x188>)
    55da:	1a9b      	subs	r3, r3, r2
    55dc:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
    55de:	f04f 0100 	mov.w	r1, #0
    55e2:	2201      	movs	r2, #1
    55e4:	f362 0102 	bfi	r1, r2, #0, #3
    55e8:	f36f 01c5 	bfc	r1, #3, #3
    55ec:	f363 118f 	bfi	r1, r3, #6, #10
    55f0:	4837      	ldr	r0, [pc, #220]	; (56d0 <bus_fault+0x198>)
    55f2:	f7fd fb75 	bl	2ce0 <log_0>
    55f6:	e7bd      	b.n	5574 <bus_fault+0x3c>
    55f8:	4b30      	ldr	r3, [pc, #192]	; (56bc <bus_fault+0x184>)
    55fa:	4a31      	ldr	r2, [pc, #196]	; (56c0 <bus_fault+0x188>)
    55fc:	1a9b      	subs	r3, r3, r2
    55fe:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Precise data bus error");
    5600:	f04f 0100 	mov.w	r1, #0
    5604:	2201      	movs	r2, #1
    5606:	f362 0102 	bfi	r1, r2, #0, #3
    560a:	f36f 01c5 	bfc	r1, #3, #3
    560e:	f363 118f 	bfi	r1, r3, #6, #10
    5612:	4830      	ldr	r0, [pc, #192]	; (56d4 <bus_fault+0x19c>)
    5614:	f7fd fb64 	bl	2ce0 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    5618:	4b2b      	ldr	r3, [pc, #172]	; (56c8 <bus_fault+0x190>)
    561a:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    561c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    561e:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    5622:	d0ac      	beq.n	557e <bus_fault+0x46>
    5624:	4b25      	ldr	r3, [pc, #148]	; (56bc <bus_fault+0x184>)
    5626:	4a26      	ldr	r2, [pc, #152]	; (56c0 <bus_fault+0x188>)
    5628:	1a9b      	subs	r3, r3, r2
    562a:	08db      	lsrs	r3, r3, #3
			PR_EXC("  BFAR Address: 0x%x", bfar);
    562c:	f04f 0200 	mov.w	r2, #0
    5630:	2001      	movs	r0, #1
    5632:	f360 0202 	bfi	r2, r0, #0, #3
    5636:	f36f 02c5 	bfc	r2, #3, #3
    563a:	f363 128f 	bfi	r2, r3, #6, #10
    563e:	4826      	ldr	r0, [pc, #152]	; (56d8 <bus_fault+0x1a0>)
    5640:	f7fd faba 	bl	2bb8 <log_1>
			if (from_hard_fault != 0) {
    5644:	2e00      	cmp	r6, #0
    5646:	d09a      	beq.n	557e <bus_fault+0x46>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    5648:	4a1f      	ldr	r2, [pc, #124]	; (56c8 <bus_fault+0x190>)
    564a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    564c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    5650:	6293      	str	r3, [r2, #40]	; 0x28
    5652:	e794      	b.n	557e <bus_fault+0x46>
    5654:	4b19      	ldr	r3, [pc, #100]	; (56bc <bus_fault+0x184>)
    5656:	4a1a      	ldr	r2, [pc, #104]	; (56c0 <bus_fault+0x188>)
    5658:	1a9b      	subs	r3, r3, r2
    565a:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Imprecise data bus error");
    565c:	f04f 0100 	mov.w	r1, #0
    5660:	2201      	movs	r2, #1
    5662:	f362 0102 	bfi	r1, r2, #0, #3
    5666:	f36f 01c5 	bfc	r1, #3, #3
    566a:	f363 118f 	bfi	r1, r3, #6, #10
    566e:	481b      	ldr	r0, [pc, #108]	; (56dc <bus_fault+0x1a4>)
    5670:	f7fd fb36 	bl	2ce0 <log_0>
    5674:	e788      	b.n	5588 <bus_fault+0x50>
    5676:	4b11      	ldr	r3, [pc, #68]	; (56bc <bus_fault+0x184>)
    5678:	4a11      	ldr	r2, [pc, #68]	; (56c0 <bus_fault+0x188>)
    567a:	1a9b      	subs	r3, r3, r2
    567c:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction bus error");
    567e:	f04f 0100 	mov.w	r1, #0
    5682:	2201      	movs	r2, #1
    5684:	f362 0102 	bfi	r1, r2, #0, #3
    5688:	f36f 01c5 	bfc	r1, #3, #3
    568c:	f363 118f 	bfi	r1, r3, #6, #10
    5690:	4813      	ldr	r0, [pc, #76]	; (56e0 <bus_fault+0x1a8>)
    5692:	f7fd fb25 	bl	2ce0 <log_0>
    5696:	e781      	b.n	559c <bus_fault+0x64>
    5698:	4b08      	ldr	r3, [pc, #32]	; (56bc <bus_fault+0x184>)
    569a:	4a09      	ldr	r2, [pc, #36]	; (56c0 <bus_fault+0x188>)
    569c:	1a9b      	subs	r3, r3, r2
    569e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    56a0:	f04f 0100 	mov.w	r1, #0
    56a4:	2201      	movs	r2, #1
    56a6:	f362 0102 	bfi	r1, r2, #0, #3
    56aa:	f36f 01c5 	bfc	r1, #3, #3
    56ae:	f363 118f 	bfi	r1, r3, #6, #10
    56b2:	480c      	ldr	r0, [pc, #48]	; (56e4 <bus_fault+0x1ac>)
    56b4:	f7fd fb14 	bl	2ce0 <log_0>
    56b8:	e770      	b.n	559c <bus_fault+0x64>
    56ba:	bf00      	nop
    56bc:	00015ee8 	.word	0x00015ee8
    56c0:	00015ea8 	.word	0x00015ea8
    56c4:	0001691c 	.word	0x0001691c
    56c8:	e000ed00 	.word	0xe000ed00
    56cc:	00016934 	.word	0x00016934
    56d0:	00016948 	.word	0x00016948
    56d4:	0001695c 	.word	0x0001695c
    56d8:	00016978 	.word	0x00016978
    56dc:	00016990 	.word	0x00016990
    56e0:	000169ac 	.word	0x000169ac
    56e4:	000169c4 	.word	0x000169c4

000056e8 <mem_manage_fault>:
{
    56e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    56ea:	4605      	mov	r5, r0
    56ec:	460c      	mov	r4, r1
    56ee:	4616      	mov	r6, r2
    56f0:	4b64      	ldr	r3, [pc, #400]	; (5884 <mem_manage_fault+0x19c>)
    56f2:	4a65      	ldr	r2, [pc, #404]	; (5888 <mem_manage_fault+0x1a0>)
    56f4:	1a9b      	subs	r3, r3, r2
    56f6:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    56f8:	f04f 0100 	mov.w	r1, #0
    56fc:	2201      	movs	r2, #1
    56fe:	f362 0102 	bfi	r1, r2, #0, #3
    5702:	f36f 01c5 	bfc	r1, #3, #3
    5706:	f363 118f 	bfi	r1, r3, #6, #10
    570a:	4860      	ldr	r0, [pc, #384]	; (588c <mem_manage_fault+0x1a4>)
    570c:	f7fd fae8 	bl	2ce0 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    5710:	4b5f      	ldr	r3, [pc, #380]	; (5890 <mem_manage_fault+0x1a8>)
    5712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5714:	f013 0f10 	tst.w	r3, #16
    5718:	d132      	bne.n	5780 <mem_manage_fault+0x98>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    571a:	4b5d      	ldr	r3, [pc, #372]	; (5890 <mem_manage_fault+0x1a8>)
    571c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    571e:	f013 0f08 	tst.w	r3, #8
    5722:	d13e      	bne.n	57a2 <mem_manage_fault+0xba>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    5724:	4b5a      	ldr	r3, [pc, #360]	; (5890 <mem_manage_fault+0x1a8>)
    5726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5728:	f013 0f02 	tst.w	r3, #2
    572c:	d14a      	bne.n	57c4 <mem_manage_fault+0xdc>
	uint32_t mmfar = -EINVAL;
    572e:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    5732:	4b57      	ldr	r3, [pc, #348]	; (5890 <mem_manage_fault+0x1a8>)
    5734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5736:	f013 0f01 	tst.w	r3, #1
    573a:	d175      	bne.n	5828 <mem_manage_fault+0x140>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    573c:	4b54      	ldr	r3, [pc, #336]	; (5890 <mem_manage_fault+0x1a8>)
    573e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5740:	f013 0f20 	tst.w	r3, #32
    5744:	f040 8081 	bne.w	584a <mem_manage_fault+0x162>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    5748:	4b51      	ldr	r3, [pc, #324]	; (5890 <mem_manage_fault+0x1a8>)
    574a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    574c:	f013 0f10 	tst.w	r3, #16
    5750:	d104      	bne.n	575c <mem_manage_fault+0x74>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    5752:	4b4f      	ldr	r3, [pc, #316]	; (5890 <mem_manage_fault+0x1a8>)
    5754:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    5756:	f014 0402 	ands.w	r4, r4, #2
    575a:	d005      	beq.n	5768 <mem_manage_fault+0x80>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    575c:	4b4c      	ldr	r3, [pc, #304]	; (5890 <mem_manage_fault+0x1a8>)
    575e:	685c      	ldr	r4, [r3, #4]
    5760:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    5764:	f040 8082 	bne.w	586c <mem_manage_fault+0x184>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    5768:	4a49      	ldr	r2, [pc, #292]	; (5890 <mem_manage_fault+0x1a8>)
    576a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    576c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    5770:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    5772:	2101      	movs	r1, #1
    5774:	4628      	mov	r0, r5
    5776:	f00d f8c6 	bl	12906 <memory_fault_recoverable>
    577a:	7030      	strb	r0, [r6, #0]
}
    577c:	4620      	mov	r0, r4
    577e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5780:	4b40      	ldr	r3, [pc, #256]	; (5884 <mem_manage_fault+0x19c>)
    5782:	4a41      	ldr	r2, [pc, #260]	; (5888 <mem_manage_fault+0x1a0>)
    5784:	1a9b      	subs	r3, r3, r2
    5786:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error (context area might be"
    5788:	f04f 0100 	mov.w	r1, #0
    578c:	2201      	movs	r2, #1
    578e:	f362 0102 	bfi	r1, r2, #0, #3
    5792:	f36f 01c5 	bfc	r1, #3, #3
    5796:	f363 118f 	bfi	r1, r3, #6, #10
    579a:	483e      	ldr	r0, [pc, #248]	; (5894 <mem_manage_fault+0x1ac>)
    579c:	f7fd faa0 	bl	2ce0 <log_0>
    57a0:	e7bb      	b.n	571a <mem_manage_fault+0x32>
    57a2:	4b38      	ldr	r3, [pc, #224]	; (5884 <mem_manage_fault+0x19c>)
    57a4:	4a38      	ldr	r2, [pc, #224]	; (5888 <mem_manage_fault+0x1a0>)
    57a6:	1a9b      	subs	r3, r3, r2
    57a8:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
    57aa:	f04f 0100 	mov.w	r1, #0
    57ae:	2201      	movs	r2, #1
    57b0:	f362 0102 	bfi	r1, r2, #0, #3
    57b4:	f36f 01c5 	bfc	r1, #3, #3
    57b8:	f363 118f 	bfi	r1, r3, #6, #10
    57bc:	4836      	ldr	r0, [pc, #216]	; (5898 <mem_manage_fault+0x1b0>)
    57be:	f7fd fa8f 	bl	2ce0 <log_0>
    57c2:	e7af      	b.n	5724 <mem_manage_fault+0x3c>
    57c4:	4b2f      	ldr	r3, [pc, #188]	; (5884 <mem_manage_fault+0x19c>)
    57c6:	4a30      	ldr	r2, [pc, #192]	; (5888 <mem_manage_fault+0x1a0>)
    57c8:	1a9b      	subs	r3, r3, r2
    57ca:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Data Access Violation");
    57cc:	f04f 0100 	mov.w	r1, #0
    57d0:	2201      	movs	r2, #1
    57d2:	f362 0102 	bfi	r1, r2, #0, #3
    57d6:	f36f 01c5 	bfc	r1, #3, #3
    57da:	f363 118f 	bfi	r1, r3, #6, #10
    57de:	482f      	ldr	r0, [pc, #188]	; (589c <mem_manage_fault+0x1b4>)
    57e0:	f7fd fa7e 	bl	2ce0 <log_0>
		uint32_t temp = SCB->MMFAR;
    57e4:	4b2a      	ldr	r3, [pc, #168]	; (5890 <mem_manage_fault+0x1a8>)
    57e6:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    57e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    57ea:	f013 0f80 	tst.w	r3, #128	; 0x80
    57ee:	d102      	bne.n	57f6 <mem_manage_fault+0x10e>
	uint32_t mmfar = -EINVAL;
    57f0:	f06f 0715 	mvn.w	r7, #21
    57f4:	e79d      	b.n	5732 <mem_manage_fault+0x4a>
    57f6:	4b23      	ldr	r3, [pc, #140]	; (5884 <mem_manage_fault+0x19c>)
    57f8:	4a23      	ldr	r2, [pc, #140]	; (5888 <mem_manage_fault+0x1a0>)
    57fa:	1a9b      	subs	r3, r3, r2
    57fc:	08db      	lsrs	r3, r3, #3
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    57fe:	f04f 0200 	mov.w	r2, #0
    5802:	2101      	movs	r1, #1
    5804:	f361 0202 	bfi	r2, r1, #0, #3
    5808:	f36f 02c5 	bfc	r2, #3, #3
    580c:	f363 128f 	bfi	r2, r3, #6, #10
    5810:	4639      	mov	r1, r7
    5812:	4823      	ldr	r0, [pc, #140]	; (58a0 <mem_manage_fault+0x1b8>)
    5814:	f7fd f9d0 	bl	2bb8 <log_1>
			if (from_hard_fault != 0) {
    5818:	2c00      	cmp	r4, #0
    581a:	d08a      	beq.n	5732 <mem_manage_fault+0x4a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    581c:	4a1c      	ldr	r2, [pc, #112]	; (5890 <mem_manage_fault+0x1a8>)
    581e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5820:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    5824:	6293      	str	r3, [r2, #40]	; 0x28
    5826:	e784      	b.n	5732 <mem_manage_fault+0x4a>
    5828:	4b16      	ldr	r3, [pc, #88]	; (5884 <mem_manage_fault+0x19c>)
    582a:	4a17      	ldr	r2, [pc, #92]	; (5888 <mem_manage_fault+0x1a0>)
    582c:	1a9b      	subs	r3, r3, r2
    582e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction Access Violation");
    5830:	f04f 0100 	mov.w	r1, #0
    5834:	2201      	movs	r2, #1
    5836:	f362 0102 	bfi	r1, r2, #0, #3
    583a:	f36f 01c5 	bfc	r1, #3, #3
    583e:	f363 118f 	bfi	r1, r3, #6, #10
    5842:	4818      	ldr	r0, [pc, #96]	; (58a4 <mem_manage_fault+0x1bc>)
    5844:	f7fd fa4c 	bl	2ce0 <log_0>
    5848:	e778      	b.n	573c <mem_manage_fault+0x54>
    584a:	4b0e      	ldr	r3, [pc, #56]	; (5884 <mem_manage_fault+0x19c>)
    584c:	4a0e      	ldr	r2, [pc, #56]	; (5888 <mem_manage_fault+0x1a0>)
    584e:	1a9b      	subs	r3, r3, r2
    5850:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO(
    5852:	f04f 0100 	mov.w	r1, #0
    5856:	2201      	movs	r2, #1
    5858:	f362 0102 	bfi	r1, r2, #0, #3
    585c:	f36f 01c5 	bfc	r1, #3, #3
    5860:	f363 118f 	bfi	r1, r3, #6, #10
    5864:	4810      	ldr	r0, [pc, #64]	; (58a8 <mem_manage_fault+0x1c0>)
    5866:	f7fd fa3b 	bl	2ce0 <log_0>
    586a:	e76d      	b.n	5748 <mem_manage_fault+0x60>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    586c:	4629      	mov	r1, r5
    586e:	4638      	mov	r0, r7
    5870:	f7ff fd22 	bl	52b8 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    5874:	4604      	mov	r4, r0
    5876:	2800      	cmp	r0, #0
    5878:	f43f af76 	beq.w	5768 <mem_manage_fault+0x80>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    587c:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    5880:	2402      	movs	r4, #2
    5882:	e771      	b.n	5768 <mem_manage_fault+0x80>
    5884:	00015ee8 	.word	0x00015ee8
    5888:	00015ea8 	.word	0x00015ea8
    588c:	000169f4 	.word	0x000169f4
    5890:	e000ed00 	.word	0xe000ed00
    5894:	00016a0c 	.word	0x00016a0c
    5898:	00016948 	.word	0x00016948
    589c:	00016a40 	.word	0x00016a40
    58a0:	00016a58 	.word	0x00016a58
    58a4:	00016a70 	.word	0x00016a70
    58a8:	000169c4 	.word	0x000169c4

000058ac <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    58ac:	b570      	push	{r4, r5, r6, lr}
    58ae:	4605      	mov	r5, r0
    58b0:	460c      	mov	r4, r1
    58b2:	4b47      	ldr	r3, [pc, #284]	; (59d0 <hard_fault+0x124>)
    58b4:	4a47      	ldr	r2, [pc, #284]	; (59d4 <hard_fault+0x128>)
    58b6:	1a9b      	subs	r3, r3, r2
    58b8:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** HARD FAULT *****");
    58ba:	f04f 0100 	mov.w	r1, #0
    58be:	2201      	movs	r2, #1
    58c0:	f362 0102 	bfi	r1, r2, #0, #3
    58c4:	f36f 01c5 	bfc	r1, #3, #3
    58c8:	f363 118f 	bfi	r1, r3, #6, #10
    58cc:	4842      	ldr	r0, [pc, #264]	; (59d8 <hard_fault+0x12c>)
    58ce:	f7fd fa07 	bl	2ce0 <log_0>
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    58d2:	2300      	movs	r3, #0
    58d4:	7023      	strb	r3, [r4, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    58d6:	4b41      	ldr	r3, [pc, #260]	; (59dc <hard_fault+0x130>)
    58d8:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    58da:	f016 0602 	ands.w	r6, r6, #2
    58de:	d109      	bne.n	58f4 <hard_fault+0x48>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    58e0:	4b3e      	ldr	r3, [pc, #248]	; (59dc <hard_fault+0x130>)
    58e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    58e4:	2b00      	cmp	r3, #0
    58e6:	db17      	blt.n	5918 <hard_fault+0x6c>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    58e8:	4b3c      	ldr	r3, [pc, #240]	; (59dc <hard_fault+0x130>)
    58ea:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    58ec:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    58f0:	d124      	bne.n	593c <hard_fault+0x90>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    58f2:	bd70      	pop	{r4, r5, r6, pc}
    58f4:	4b36      	ldr	r3, [pc, #216]	; (59d0 <hard_fault+0x124>)
    58f6:	4a37      	ldr	r2, [pc, #220]	; (59d4 <hard_fault+0x128>)
    58f8:	1a9b      	subs	r3, r3, r2
    58fa:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Bus fault on vector table read");
    58fc:	f04f 0100 	mov.w	r1, #0
    5900:	2201      	movs	r2, #1
    5902:	f362 0102 	bfi	r1, r2, #0, #3
    5906:	f36f 01c5 	bfc	r1, #3, #3
    590a:	f363 118f 	bfi	r1, r3, #6, #10
    590e:	4834      	ldr	r0, [pc, #208]	; (59e0 <hard_fault+0x134>)
    5910:	f7fd f9e6 	bl	2ce0 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    5914:	2000      	movs	r0, #0
    5916:	e7ec      	b.n	58f2 <hard_fault+0x46>
    5918:	4b2d      	ldr	r3, [pc, #180]	; (59d0 <hard_fault+0x124>)
    591a:	4a2e      	ldr	r2, [pc, #184]	; (59d4 <hard_fault+0x128>)
    591c:	1a9b      	subs	r3, r3, r2
    591e:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Debug event");
    5920:	f04f 0100 	mov.w	r1, #0
    5924:	2201      	movs	r2, #1
    5926:	f362 0102 	bfi	r1, r2, #0, #3
    592a:	f36f 01c5 	bfc	r1, #3, #3
    592e:	f363 118f 	bfi	r1, r3, #6, #10
    5932:	482c      	ldr	r0, [pc, #176]	; (59e4 <hard_fault+0x138>)
    5934:	f7fd f9d4 	bl	2ce0 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    5938:	4630      	mov	r0, r6
    593a:	e7da      	b.n	58f2 <hard_fault+0x46>
    593c:	4b24      	ldr	r3, [pc, #144]	; (59d0 <hard_fault+0x124>)
    593e:	4a25      	ldr	r2, [pc, #148]	; (59d4 <hard_fault+0x128>)
    5940:	1a9b      	subs	r3, r3, r2
    5942:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Fault escalation (see below)");
    5944:	f04f 0100 	mov.w	r1, #0
    5948:	2201      	movs	r2, #1
    594a:	f362 0102 	bfi	r1, r2, #0, #3
    594e:	f36f 01c5 	bfc	r1, #3, #3
    5952:	f363 118f 	bfi	r1, r3, #6, #10
    5956:	4824      	ldr	r0, [pc, #144]	; (59e8 <hard_fault+0x13c>)
    5958:	f7fd f9c2 	bl	2ce0 <log_0>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    595c:	69ab      	ldr	r3, [r5, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    595e:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    5962:	f64d 7302 	movw	r3, #57090	; 0xdf02
    5966:	429a      	cmp	r2, r3
    5968:	d00e      	beq.n	5988 <hard_fault+0xdc>
		} else if (SCB_MMFSR != 0) {
    596a:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    596e:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    5972:	781b      	ldrb	r3, [r3, #0]
    5974:	b9db      	cbnz	r3, 59ae <hard_fault+0x102>
		} else if (SCB_BFSR != 0) {
    5976:	4b1d      	ldr	r3, [pc, #116]	; (59ec <hard_fault+0x140>)
    5978:	781b      	ldrb	r3, [r3, #0]
    597a:	b9f3      	cbnz	r3, 59ba <hard_fault+0x10e>
		} else if (SCB_UFSR != 0) {
    597c:	4b1c      	ldr	r3, [pc, #112]	; (59f0 <hard_fault+0x144>)
    597e:	881b      	ldrh	r3, [r3, #0]
    5980:	b29b      	uxth	r3, r3
    5982:	bb03      	cbnz	r3, 59c6 <hard_fault+0x11a>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    5984:	4630      	mov	r0, r6
	return reason;
    5986:	e7b4      	b.n	58f2 <hard_fault+0x46>
    5988:	4b11      	ldr	r3, [pc, #68]	; (59d0 <hard_fault+0x124>)
    598a:	4a12      	ldr	r2, [pc, #72]	; (59d4 <hard_fault+0x128>)
    598c:	1a9b      	subs	r3, r3, r2
    598e:	08db      	lsrs	r3, r3, #3
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    5990:	f04f 0200 	mov.w	r2, #0
    5994:	2101      	movs	r1, #1
    5996:	f361 0202 	bfi	r2, r1, #0, #3
    599a:	f36f 02c5 	bfc	r2, #3, #3
    599e:	f363 128f 	bfi	r2, r3, #6, #10
    59a2:	6829      	ldr	r1, [r5, #0]
    59a4:	4813      	ldr	r0, [pc, #76]	; (59f4 <hard_fault+0x148>)
    59a6:	f7fd f907 	bl	2bb8 <log_1>
			reason = esf->basic.r0;
    59aa:	6828      	ldr	r0, [r5, #0]
    59ac:	e7a1      	b.n	58f2 <hard_fault+0x46>
			reason = mem_manage_fault(esf, 1, recoverable);
    59ae:	4622      	mov	r2, r4
    59b0:	2101      	movs	r1, #1
    59b2:	4628      	mov	r0, r5
    59b4:	f7ff fe98 	bl	56e8 <mem_manage_fault>
    59b8:	e79b      	b.n	58f2 <hard_fault+0x46>
			reason = bus_fault(esf, 1, recoverable);
    59ba:	4622      	mov	r2, r4
    59bc:	2101      	movs	r1, #1
    59be:	4628      	mov	r0, r5
    59c0:	f7ff fdba 	bl	5538 <bus_fault>
    59c4:	e795      	b.n	58f2 <hard_fault+0x46>
			reason = usage_fault(esf);
    59c6:	4628      	mov	r0, r5
    59c8:	f7ff fcea 	bl	53a0 <usage_fault>
    59cc:	e791      	b.n	58f2 <hard_fault+0x46>
    59ce:	bf00      	nop
    59d0:	00015ee8 	.word	0x00015ee8
    59d4:	00015ea8 	.word	0x00015ea8
    59d8:	00016a90 	.word	0x00016a90
    59dc:	e000ed00 	.word	0xe000ed00
    59e0:	00016aa8 	.word	0x00016aa8
    59e4:	00016acc 	.word	0x00016acc
    59e8:	00016adc 	.word	0x00016adc
    59ec:	e000ed29 	.word	0xe000ed29
    59f0:	e000ed2a 	.word	0xe000ed2a
    59f4:	00016afc 	.word	0x00016afc

000059f8 <reserved_exception>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
    59f8:	b508      	push	{r3, lr}
    59fa:	460a      	mov	r2, r1
    59fc:	480b      	ldr	r0, [pc, #44]	; (5a2c <reserved_exception+0x34>)
    59fe:	4b0c      	ldr	r3, [pc, #48]	; (5a30 <reserved_exception+0x38>)
    5a00:	1ac0      	subs	r0, r0, r3
    5a02:	08c0      	lsrs	r0, r0, #3
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
    5a04:	f04f 0300 	mov.w	r3, #0
    5a08:	2101      	movs	r1, #1
    5a0a:	f361 0302 	bfi	r3, r1, #0, #3
    5a0e:	f36f 03c5 	bfc	r3, #3, #3
    5a12:	f360 138f 	bfi	r3, r0, #6, #10
    5a16:	2a0f      	cmp	r2, #15
    5a18:	dc05      	bgt.n	5a26 <reserved_exception+0x2e>
    5a1a:	4906      	ldr	r1, [pc, #24]	; (5a34 <reserved_exception+0x3c>)
    5a1c:	3a10      	subs	r2, #16
    5a1e:	4806      	ldr	r0, [pc, #24]	; (5a38 <reserved_exception+0x40>)
    5a20:	f7fd f900 	bl	2c24 <log_2>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
    5a24:	bd08      	pop	{r3, pc}
	PR_FAULT_INFO("***** %s %d) *****",
    5a26:	4905      	ldr	r1, [pc, #20]	; (5a3c <reserved_exception+0x44>)
    5a28:	e7f8      	b.n	5a1c <reserved_exception+0x24>
    5a2a:	bf00      	nop
    5a2c:	00015ee8 	.word	0x00015ee8
    5a30:	00015ea8 	.word	0x00015ea8
    5a34:	00016b18 	.word	0x00016b18
    5a38:	00016b4c 	.word	0x00016b4c
    5a3c:	00016b30 	.word	0x00016b30

00005a40 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    5a40:	b570      	push	{r4, r5, r6, lr}
    5a42:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    5a44:	4b2b      	ldr	r3, [pc, #172]	; (5af4 <z_arm_fault+0xb4>)
    5a46:	685d      	ldr	r5, [r3, #4]
    5a48:	f3c5 0508 	ubfx	r5, r5, #0, #9
    5a4c:	2300      	movs	r3, #0
    5a4e:	f383 8811 	msr	BASEPRI, r3
    5a52:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    5a56:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    5a5a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    5a5e:	d12a      	bne.n	5ab6 <z_arm_fault+0x76>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    5a60:	f002 030c 	and.w	r3, r2, #12
    5a64:	2b08      	cmp	r3, #8
    5a66:	d010      	beq.n	5a8a <z_arm_fault+0x4a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    5a68:	f012 0f08 	tst.w	r2, #8
    5a6c:	d020      	beq.n	5ab0 <z_arm_fault+0x70>
			ptr_esf =  (z_arch_esf_t *)psp;
    5a6e:	460c      	mov	r4, r1
	*nested_exc = false;
    5a70:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    5a72:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    5a76:	4629      	mov	r1, r5
    5a78:	4620      	mov	r0, r4
    5a7a:	f00c ff46 	bl	1290a <fault_handle>
    5a7e:	4605      	mov	r5, r0
	if (recoverable) {
    5a80:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    5a84:	b1d3      	cbz	r3, 5abc <z_arm_fault+0x7c>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    5a86:	b00a      	add	sp, #40	; 0x28
    5a88:	bd70      	pop	{r4, r5, r6, pc}
    5a8a:	4b1b      	ldr	r3, [pc, #108]	; (5af8 <z_arm_fault+0xb8>)
    5a8c:	4a1b      	ldr	r2, [pc, #108]	; (5afc <z_arm_fault+0xbc>)
    5a8e:	1a9b      	subs	r3, r3, r2
    5a90:	08db      	lsrs	r3, r3, #3
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    5a92:	f04f 0100 	mov.w	r1, #0
    5a96:	2201      	movs	r2, #1
    5a98:	f362 0102 	bfi	r1, r2, #0, #3
    5a9c:	f36f 01c5 	bfc	r1, #3, #3
    5aa0:	f363 118f 	bfi	r1, r3, #6, #10
    5aa4:	4816      	ldr	r0, [pc, #88]	; (5b00 <z_arm_fault+0xc0>)
    5aa6:	f7fd f91b 	bl	2ce0 <log_0>
	*nested_exc = false;
    5aaa:	2600      	movs	r6, #0
		return NULL;
    5aac:	4634      	mov	r4, r6
    5aae:	e7e0      	b.n	5a72 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    5ab0:	4604      	mov	r4, r0
			*nested_exc = true;
    5ab2:	2601      	movs	r6, #1
    5ab4:	e7dd      	b.n	5a72 <z_arm_fault+0x32>
	*nested_exc = false;
    5ab6:	2600      	movs	r6, #0
		return NULL;
    5ab8:	4634      	mov	r4, r6
    5aba:	e7da      	b.n	5a72 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    5abc:	2220      	movs	r2, #32
    5abe:	4621      	mov	r1, r4
    5ac0:	a801      	add	r0, sp, #4
    5ac2:	f00c fffd 	bl	12ac0 <memcpy>
	if (nested_exc) {
    5ac6:	b14e      	cbz	r6, 5adc <z_arm_fault+0x9c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    5ac8:	9b08      	ldr	r3, [sp, #32]
    5aca:	f3c3 0208 	ubfx	r2, r3, #0, #9
    5ace:	b95a      	cbnz	r2, 5ae8 <z_arm_fault+0xa8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    5ad0:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    5ad4:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    5ad8:	9308      	str	r3, [sp, #32]
    5ada:	e005      	b.n	5ae8 <z_arm_fault+0xa8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    5adc:	9b08      	ldr	r3, [sp, #32]
    5ade:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    5ae2:	f023 0301 	bic.w	r3, r3, #1
    5ae6:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    5ae8:	a901      	add	r1, sp, #4
    5aea:	4628      	mov	r0, r5
    5aec:	f00c feed 	bl	128ca <z_arm_fatal_error>
    5af0:	e7c9      	b.n	5a86 <z_arm_fault+0x46>
    5af2:	bf00      	nop
    5af4:	e000ed00 	.word	0xe000ed00
    5af8:	00015ee8 	.word	0x00015ee8
    5afc:	00015ea8 	.word	0x00015ea8
    5b00:	00016b60 	.word	0x00016b60

00005b04 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    5b04:	4a02      	ldr	r2, [pc, #8]	; (5b10 <z_arm_fault_init+0xc>)
    5b06:	6953      	ldr	r3, [r2, #20]
    5b08:	f043 0310 	orr.w	r3, r3, #16
    5b0c:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    5b0e:	4770      	bx	lr
    5b10:	e000ed00 	.word	0xe000ed00

00005b14 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    5b14:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    5b18:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    5b1c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    5b1e:	4672      	mov	r2, lr
	bl z_arm_fault
    5b20:	f7ff ff8e 	bl	5a40 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    5b24:	bd01      	pop	{r0, pc}
    5b26:	bf00      	nop

00005b28 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    5b28:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    5b2a:	e006      	b.n	5b3a <z_arm_interrupt_init+0x12>
    5b2c:	f002 010f 	and.w	r1, r2, #15
    5b30:	4b09      	ldr	r3, [pc, #36]	; (5b58 <z_arm_interrupt_init+0x30>)
    5b32:	440b      	add	r3, r1
    5b34:	2120      	movs	r1, #32
    5b36:	7619      	strb	r1, [r3, #24]
    5b38:	3201      	adds	r2, #1
    5b3a:	2a2f      	cmp	r2, #47	; 0x2f
    5b3c:	dc0a      	bgt.n	5b54 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    5b3e:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    5b40:	2b00      	cmp	r3, #0
    5b42:	dbf3      	blt.n	5b2c <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5b44:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    5b48:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    5b4c:	2120      	movs	r1, #32
    5b4e:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    5b52:	e7f1      	b.n	5b38 <z_arm_interrupt_init+0x10>
	}
}
    5b54:	4770      	bx	lr
    5b56:	bf00      	nop
    5b58:	e000ecfc 	.word	0xe000ecfc

00005b5c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    5b5c:	2000      	movs	r0, #0
    msr CONTROL, r0
    5b5e:	f380 8814 	msr	CONTROL, r0
    isb
    5b62:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    5b66:	f010 f821 	bl	15bac <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    5b6a:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    5b6c:	490d      	ldr	r1, [pc, #52]	; (5ba4 <__start+0x48>)
    str r0, [r1]
    5b6e:	6008      	str	r0, [r1, #0]
    dsb
    5b70:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    5b74:	480c      	ldr	r0, [pc, #48]	; (5ba8 <__start+0x4c>)
    msr msp, r0
    5b76:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    5b7a:	f000 f829 	bl	5bd0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    5b7e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    5b80:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    5b84:	4809      	ldr	r0, [pc, #36]	; (5bac <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    5b86:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    5b8a:	1840      	adds	r0, r0, r1
    msr PSP, r0
    5b8c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    5b90:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    5b94:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    5b96:	4308      	orrs	r0, r1
    msr CONTROL, r0
    5b98:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    5b9c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    5ba0:	f7ff faf6 	bl	5190 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    5ba4:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    5ba8:	200044a0 	.word	0x200044a0
    ldr r0, =z_interrupt_stacks
    5bac:	20004620 	.word	0x20004620

00005bb0 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    5bb0:	4b06      	ldr	r3, [pc, #24]	; (5bcc <z_arm_clear_arm_mpu_config+0x1c>)
    5bb2:	6818      	ldr	r0, [r3, #0]
	int num_regions =
    5bb4:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    5bb8:	2300      	movs	r3, #0
    5bba:	4283      	cmp	r3, r0
    5bbc:	da05      	bge.n	5bca <z_arm_clear_arm_mpu_config+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    5bbe:	4a03      	ldr	r2, [pc, #12]	; (5bcc <z_arm_clear_arm_mpu_config+0x1c>)
    5bc0:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    5bc2:	2100      	movs	r1, #0
    5bc4:	6111      	str	r1, [r2, #16]
    5bc6:	3301      	adds	r3, #1
    5bc8:	e7f7      	b.n	5bba <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
    5bca:	4770      	bx	lr
    5bcc:	e000ed90 	.word	0xe000ed90

00005bd0 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    5bd0:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    5bd2:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    5bd4:	2400      	movs	r4, #0
    5bd6:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    5bda:	f7ff ffe9 	bl	5bb0 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    5bde:	4623      	mov	r3, r4
    5be0:	e008      	b.n	5bf4 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    5be2:	f103 0120 	add.w	r1, r3, #32
    5be6:	4a0e      	ldr	r2, [pc, #56]	; (5c20 <z_arm_init_arch_hw_at_boot+0x50>)
    5be8:	f04f 30ff 	mov.w	r0, #4294967295
    5bec:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    5bf0:	3301      	adds	r3, #1
    5bf2:	b2db      	uxtb	r3, r3
    5bf4:	2b07      	cmp	r3, #7
    5bf6:	d9f4      	bls.n	5be2 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    5bf8:	2300      	movs	r3, #0
    5bfa:	e008      	b.n	5c0e <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    5bfc:	f103 0160 	add.w	r1, r3, #96	; 0x60
    5c00:	4a07      	ldr	r2, [pc, #28]	; (5c20 <z_arm_init_arch_hw_at_boot+0x50>)
    5c02:	f04f 30ff 	mov.w	r0, #4294967295
    5c06:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    5c0a:	3301      	adds	r3, #1
    5c0c:	b2db      	uxtb	r3, r3
    5c0e:	2b07      	cmp	r3, #7
    5c10:	d9f4      	bls.n	5bfc <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    5c12:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    5c14:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5c18:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    5c1c:	bd10      	pop	{r4, pc}
    5c1e:	bf00      	nop
    5c20:	e000e100 	.word	0xe000e100

00005c24 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    5c24:	b508      	push	{r3, lr}
	if (_current == thread) {
    5c26:	4b08      	ldr	r3, [pc, #32]	; (5c48 <z_impl_k_thread_abort+0x24>)
    5c28:	689b      	ldr	r3, [r3, #8]
    5c2a:	4283      	cmp	r3, r0
    5c2c:	d002      	beq.n	5c34 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
    5c2e:	f00a fbc7 	bl	103c0 <z_thread_abort>
}
    5c32:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5c34:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    5c38:	2b00      	cmp	r3, #0
    5c3a:	d0f8      	beq.n	5c2e <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    5c3c:	4a03      	ldr	r2, [pc, #12]	; (5c4c <z_impl_k_thread_abort+0x28>)
    5c3e:	6853      	ldr	r3, [r2, #4]
    5c40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    5c44:	6053      	str	r3, [r2, #4]
    5c46:	e7f2      	b.n	5c2e <z_impl_k_thread_abort+0xa>
    5c48:	20002f18 	.word	0x20002f18
    5c4c:	e000ed00 	.word	0xe000ed00

00005c50 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    5c50:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    5c52:	4b03      	ldr	r3, [pc, #12]	; (5c60 <z_arm_configure_static_mpu_regions+0x10>)
    5c54:	4a03      	ldr	r2, [pc, #12]	; (5c64 <z_arm_configure_static_mpu_regions+0x14>)
    5c56:	2101      	movs	r1, #1
    5c58:	4803      	ldr	r0, [pc, #12]	; (5c68 <z_arm_configure_static_mpu_regions+0x18>)
    5c5a:	f00c feab 	bl	129b4 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    5c5e:	bd08      	pop	{r3, pc}
    5c60:	20040000 	.word	0x20040000
    5c64:	20000000 	.word	0x20000000
    5c68:	00016b90 	.word	0x00016b90

00005c6c <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    5c6c:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    5c6e:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    5c72:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    5c74:	4804      	ldr	r0, [pc, #16]	; (5c88 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    5c76:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    5c78:	2320      	movs	r3, #32
    5c7a:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    5c7c:	4b03      	ldr	r3, [pc, #12]	; (5c8c <z_arm_configure_dynamic_mpu_regions+0x20>)
    5c7e:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    5c80:	2101      	movs	r1, #1
    5c82:	f00c fe9b 	bl	129bc <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    5c86:	bd08      	pop	{r3, pc}
    5c88:	20001db8 	.word	0x20001db8
    5c8c:	150b0000 	.word	0x150b0000

00005c90 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    5c90:	4a06      	ldr	r2, [pc, #24]	; (5cac <region_init+0x1c>)
    5c92:	6090      	str	r0, [r2, #8]

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    5c94:	680b      	ldr	r3, [r1, #0]
    5c96:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    5c9a:	4303      	orrs	r3, r0
    5c9c:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    5ca0:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    5ca2:	688b      	ldr	r3, [r1, #8]
    5ca4:	f043 0301 	orr.w	r3, r3, #1
    5ca8:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    5caa:	4770      	bx	lr
    5cac:	e000ed90 	.word	0xe000ed90

00005cb0 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    5cb0:	b510      	push	{r4, lr}
    5cb2:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    5cb4:	2807      	cmp	r0, #7
    5cb6:	d803      	bhi.n	5cc0 <region_allocate_and_init+0x10>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    5cb8:	f7ff ffea 	bl	5c90 <region_init>

	return index;
    5cbc:	4620      	mov	r0, r4
}
    5cbe:	bd10      	pop	{r4, pc}
    5cc0:	4b09      	ldr	r3, [pc, #36]	; (5ce8 <region_allocate_and_init+0x38>)
    5cc2:	4a0a      	ldr	r2, [pc, #40]	; (5cec <region_allocate_and_init+0x3c>)
    5cc4:	1a9b      	subs	r3, r3, r2
    5cc6:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    5cc8:	f04f 0200 	mov.w	r2, #0
    5ccc:	2101      	movs	r1, #1
    5cce:	f361 0202 	bfi	r2, r1, #0, #3
    5cd2:	f36f 02c5 	bfc	r2, #3, #3
    5cd6:	f363 128f 	bfi	r2, r3, #6, #10
    5cda:	4601      	mov	r1, r0
    5cdc:	4804      	ldr	r0, [pc, #16]	; (5cf0 <region_allocate_and_init+0x40>)
    5cde:	f7fc ff6b 	bl	2bb8 <log_1>
		return -EINVAL;
    5ce2:	f06f 0015 	mvn.w	r0, #21
    5ce6:	e7ea      	b.n	5cbe <region_allocate_and_init+0xe>
    5ce8:	00015ee0 	.word	0x00015ee0
    5cec:	00015ea8 	.word	0x00015ea8
    5cf0:	00016b9c 	.word	0x00016b9c

00005cf4 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    5cf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5cf8:	4680      	mov	r8, r0
    5cfa:	460f      	mov	r7, r1
    5cfc:	469a      	mov	sl, r3
	int i;
	int reg_index = start_reg_index;
    5cfe:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
    5d00:	2400      	movs	r4, #0
    5d02:	e009      	b.n	5d18 <mpu_configure_regions+0x24>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    5d04:	4629      	mov	r1, r5
    5d06:	b2f0      	uxtb	r0, r6
    5d08:	f00c fe35 	bl	12976 <mpu_configure_region>
    5d0c:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
    5d0e:	f110 0f16 	cmn.w	r0, #22
    5d12:	d025      	beq.n	5d60 <mpu_configure_regions+0x6c>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    5d14:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    5d16:	3401      	adds	r4, #1
    5d18:	42bc      	cmp	r4, r7
    5d1a:	da21      	bge.n	5d60 <mpu_configure_regions+0x6c>
		if (regions[i].size == 0U) {
    5d1c:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    5d20:	eb08 0585 	add.w	r5, r8, r5, lsl #2
    5d24:	686a      	ldr	r2, [r5, #4]
    5d26:	2a00      	cmp	r2, #0
    5d28:	d0f5      	beq.n	5d16 <mpu_configure_regions+0x22>
		if (do_sanity_check &&
    5d2a:	f1ba 0f00 	cmp.w	sl, #0
    5d2e:	d0e9      	beq.n	5d04 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
    5d30:	4628      	mov	r0, r5
    5d32:	f00c fe0f 	bl	12954 <mpu_partition_is_valid>
		if (do_sanity_check &&
    5d36:	2800      	cmp	r0, #0
    5d38:	d1e4      	bne.n	5d04 <mpu_configure_regions+0x10>
    5d3a:	4b0b      	ldr	r3, [pc, #44]	; (5d68 <mpu_configure_regions+0x74>)
    5d3c:	4a0b      	ldr	r2, [pc, #44]	; (5d6c <mpu_configure_regions+0x78>)
    5d3e:	1a9b      	subs	r3, r3, r2
    5d40:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Partition %u: sanity check failed.", i);
    5d42:	f04f 0200 	mov.w	r2, #0
    5d46:	2101      	movs	r1, #1
    5d48:	f361 0202 	bfi	r2, r1, #0, #3
    5d4c:	f36f 02c5 	bfc	r2, #3, #3
    5d50:	f363 128f 	bfi	r2, r3, #6, #10
    5d54:	4621      	mov	r1, r4
    5d56:	4806      	ldr	r0, [pc, #24]	; (5d70 <mpu_configure_regions+0x7c>)
    5d58:	f7fc ff2e 	bl	2bb8 <log_1>
			return -EINVAL;
    5d5c:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
    5d60:	4630      	mov	r0, r6
    5d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5d66:	bf00      	nop
    5d68:	00015ee0 	.word	0x00015ee0
    5d6c:	00015ea8 	.word	0x00015ea8
    5d70:	00016bc4 	.word	0x00016bc4

00005d74 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    5d74:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    5d76:	4c03      	ldr	r4, [pc, #12]	; (5d84 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    5d78:	2301      	movs	r3, #1
    5d7a:	7822      	ldrb	r2, [r4, #0]
    5d7c:	f7ff ffba 	bl	5cf4 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    5d80:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    5d82:	bd10      	pop	{r4, pc}
    5d84:	20002f7a 	.word	0x20002f7a

00005d88 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    5d88:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    5d8a:	2300      	movs	r3, #0
    5d8c:	4a08      	ldr	r2, [pc, #32]	; (5db0 <mpu_configure_dynamic_mpu_regions+0x28>)
    5d8e:	7812      	ldrb	r2, [r2, #0]
    5d90:	f7ff ffb0 	bl	5cf4 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    5d94:	f110 0f16 	cmn.w	r0, #22
    5d98:	d008      	beq.n	5dac <mpu_configure_dynamic_mpu_regions+0x24>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    5d9a:	4603      	mov	r3, r0
    5d9c:	2b07      	cmp	r3, #7
    5d9e:	dc05      	bgt.n	5dac <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    5da0:	4a04      	ldr	r2, [pc, #16]	; (5db4 <mpu_configure_dynamic_mpu_regions+0x2c>)
    5da2:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    5da4:	2100      	movs	r1, #0
    5da6:	6111      	str	r1, [r2, #16]
    5da8:	3301      	adds	r3, #1
    5daa:	e7f7      	b.n	5d9c <mpu_configure_dynamic_mpu_regions+0x14>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    5dac:	bd08      	pop	{r3, pc}
    5dae:	bf00      	nop
    5db0:	20002f7a 	.word	0x20002f7a
    5db4:	e000ed90 	.word	0xe000ed90

00005db8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    5db8:	4b03      	ldr	r3, [pc, #12]	; (5dc8 <arm_core_mpu_enable+0x10>)
    5dba:	2205      	movs	r2, #5
    5dbc:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    5dbe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5dc2:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    5dc6:	4770      	bx	lr
    5dc8:	e000ed90 	.word	0xe000ed90

00005dcc <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    5dcc:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    5dd0:	4b01      	ldr	r3, [pc, #4]	; (5dd8 <arm_core_mpu_disable+0xc>)
    5dd2:	2200      	movs	r2, #0
    5dd4:	605a      	str	r2, [r3, #4]
}
    5dd6:	4770      	bx	lr
    5dd8:	e000ed90 	.word	0xe000ed90

00005ddc <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    5ddc:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    5dde:	4b0e      	ldr	r3, [pc, #56]	; (5e18 <z_arm_mpu_init+0x3c>)
    5de0:	681d      	ldr	r5, [r3, #0]
    5de2:	2d08      	cmp	r5, #8
    5de4:	d815      	bhi.n	5e12 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    5de6:	f7ff fff1 	bl	5dcc <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    5dea:	2400      	movs	r4, #0
    5dec:	42a5      	cmp	r5, r4
    5dee:	d90a      	bls.n	5e06 <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    5df0:	4b09      	ldr	r3, [pc, #36]	; (5e18 <z_arm_mpu_init+0x3c>)
    5df2:	6859      	ldr	r1, [r3, #4]
    5df4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    5df8:	0093      	lsls	r3, r2, #2
    5dfa:	4419      	add	r1, r3
    5dfc:	4620      	mov	r0, r4
    5dfe:	f7ff ff47 	bl	5c90 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    5e02:	3401      	adds	r4, #1
    5e04:	e7f2      	b.n	5dec <z_arm_mpu_init+0x10>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    5e06:	4b05      	ldr	r3, [pc, #20]	; (5e1c <z_arm_mpu_init+0x40>)
    5e08:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    5e0a:	f7ff ffd5 	bl	5db8 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    5e0e:	2000      	movs	r0, #0
}
    5e10:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    5e12:	f04f 30ff 	mov.w	r0, #4294967295
    5e16:	e7fb      	b.n	5e10 <z_arm_mpu_init+0x34>
    5e18:	00016c24 	.word	0x00016c24
    5e1c:	20002f7a 	.word	0x20002f7a

00005e20 <malloc>:
}

SYS_INIT(malloc_prepare, APPLICATION, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT);
#else /* No malloc arena */
void *malloc(size_t size)
{
    5e20:	b508      	push	{r3, lr}
    5e22:	4b0b      	ldr	r3, [pc, #44]	; (5e50 <malloc+0x30>)
    5e24:	4a0b      	ldr	r2, [pc, #44]	; (5e54 <malloc+0x34>)
    5e26:	1a9b      	subs	r3, r3, r2
    5e28:	08db      	lsrs	r3, r3, #3
	ARG_UNUSED(size);

	LOG_ERR("CONFIG_MINIMAL_LIBC_MALLOC_ARENA_SIZE is 0");
    5e2a:	f04f 0100 	mov.w	r1, #0
    5e2e:	2201      	movs	r2, #1
    5e30:	f362 0102 	bfi	r1, r2, #0, #3
    5e34:	f36f 01c5 	bfc	r1, #3, #3
    5e38:	f363 118f 	bfi	r1, r3, #6, #10
    5e3c:	4806      	ldr	r0, [pc, #24]	; (5e58 <malloc+0x38>)
    5e3e:	f7fc ff4f 	bl	2ce0 <log_0>
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    5e42:	f009 f8e9 	bl	f018 <z_impl_z_errno>
	errno = ENOMEM;
    5e46:	230c      	movs	r3, #12
    5e48:	6003      	str	r3, [r0, #0]

	return NULL;
}
    5e4a:	2000      	movs	r0, #0
    5e4c:	bd08      	pop	{r3, pc}
    5e4e:	bf00      	nop
    5e50:	00015ee8 	.word	0x00015ee8
    5e54:	00015ea8 	.word	0x00015ea8
    5e58:	00016be8 	.word	0x00016be8

00005e5c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    5e5c:	4b01      	ldr	r3, [pc, #4]	; (5e64 <__stdout_hook_install+0x8>)
    5e5e:	6018      	str	r0, [r3, #0]
}
    5e60:	4770      	bx	lr
    5e62:	bf00      	nop
    5e64:	20000260 	.word	0x20000260

00005e68 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT str, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
    5e68:	b40c      	push	{r2, r3}
    5e6a:	b500      	push	{lr}
    5e6c:	b085      	sub	sp, #20

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    5e6e:	460b      	mov	r3, r1
    5e70:	b909      	cbnz	r1, 5e76 <snprintf+0xe>
		str = &dummy; /* write final NUL to dummy, can't change *s */
    5e72:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = str;
    5e76:	9001      	str	r0, [sp, #4]
	p.len = (int) len;
    5e78:	9302      	str	r3, [sp, #8]

	va_start(vargs, format);
    5e7a:	ab07      	add	r3, sp, #28
    5e7c:	9303      	str	r3, [sp, #12]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    5e7e:	9a06      	ldr	r2, [sp, #24]
    5e80:	a901      	add	r1, sp, #4
    5e82:	4805      	ldr	r0, [pc, #20]	; (5e98 <snprintf+0x30>)
    5e84:	f7fb fef2 	bl	1c6c <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
    5e88:	9b01      	ldr	r3, [sp, #4]
    5e8a:	2200      	movs	r2, #0
    5e8c:	701a      	strb	r2, [r3, #0]
	return r;
}
    5e8e:	b005      	add	sp, #20
    5e90:	f85d eb04 	ldr.w	lr, [sp], #4
    5e94:	b002      	add	sp, #8
    5e96:	4770      	bx	lr
    5e98:	00012b81 	.word	0x00012b81

00005e9c <nordicsemi_nrf52_init>:
	__asm__ volatile(
    5e9c:	f04f 0320 	mov.w	r3, #32
    5ea0:	f3ef 8211 	mrs	r2, BASEPRI
    5ea4:	f383 8812 	msr	BASEPRI_MAX, r3
    5ea8:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    5eac:	2301      	movs	r3, #1
    5eae:	4906      	ldr	r1, [pc, #24]	; (5ec8 <nordicsemi_nrf52_init+0x2c>)
    5eb0:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    5eb4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    5eb8:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    5ebc:	f382 8811 	msr	BASEPRI, r2
    5ec0:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    5ec4:	2000      	movs	r0, #0
    5ec6:	4770      	bx	lr
    5ec8:	4001e000 	.word	0x4001e000

00005ecc <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    5ecc:	b130      	cbz	r0, 5edc <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    5ece:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    5ed0:	0180      	lsls	r0, r0, #6
    5ed2:	4b03      	ldr	r3, [pc, #12]	; (5ee0 <arch_busy_wait+0x14>)
    5ed4:	f043 0301 	orr.w	r3, r3, #1
    5ed8:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    5eda:	bd08      	pop	{r3, pc}
    5edc:	4770      	bx	lr
    5ede:	bf00      	nop
    5ee0:	00015ff0 	.word	0x00015ff0

00005ee4 <registry_add>:
static int registry_add(int type,
			const struct fs_file_system_t *fstp)
{
	int rv = -ENOSPC;

	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
    5ee4:	2300      	movs	r3, #0
    5ee6:	2b01      	cmp	r3, #1
    5ee8:	d80e      	bhi.n	5f08 <registry_add+0x24>
		struct registry_entry *ep = &registry[i];

		if (ep->fstp == NULL) {
    5eea:	4a09      	ldr	r2, [pc, #36]	; (5f10 <registry_add+0x2c>)
    5eec:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    5ef0:	6852      	ldr	r2, [r2, #4]
    5ef2:	b10a      	cbz	r2, 5ef8 <registry_add+0x14>
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
    5ef4:	3301      	adds	r3, #1
    5ef6:	e7f6      	b.n	5ee6 <registry_add+0x2>
			ep->type = type;
    5ef8:	4a05      	ldr	r2, [pc, #20]	; (5f10 <registry_add+0x2c>)
    5efa:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
			ep->fstp = fstp;
    5efe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    5f02:	6059      	str	r1, [r3, #4]
			rv = 0;
    5f04:	2000      	movs	r0, #0
			break;
    5f06:	4770      	bx	lr
	int rv = -ENOSPC;
    5f08:	f06f 001b 	mvn.w	r0, #27
		}
	}

	return rv;
}
    5f0c:	4770      	bx	lr
    5f0e:	bf00      	nop
    5f10:	20001de0 	.word	0x20001de0

00005f14 <registry_find>:

static struct registry_entry *registry_find(int type)
{
    5f14:	4601      	mov	r1, r0
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
    5f16:	2300      	movs	r3, #0
    5f18:	e000      	b.n	5f1c <registry_find+0x8>
    5f1a:	3301      	adds	r3, #1
    5f1c:	2b01      	cmp	r3, #1
    5f1e:	d80b      	bhi.n	5f38 <registry_find+0x24>
		struct registry_entry *ep = &registry[i];
    5f20:	4806      	ldr	r0, [pc, #24]	; (5f3c <registry_find+0x28>)
    5f22:	eb00 00c3 	add.w	r0, r0, r3, lsl #3

		if ((ep->fstp != NULL) && (ep->type == type)) {
    5f26:	6842      	ldr	r2, [r0, #4]
    5f28:	2a00      	cmp	r2, #0
    5f2a:	d0f6      	beq.n	5f1a <registry_find+0x6>
    5f2c:	4a03      	ldr	r2, [pc, #12]	; (5f3c <registry_find+0x28>)
    5f2e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    5f32:	428a      	cmp	r2, r1
    5f34:	d1f1      	bne.n	5f1a <registry_find+0x6>
    5f36:	e000      	b.n	5f3a <registry_find+0x26>
			return ep;
		}
	}
	return NULL;
    5f38:	2000      	movs	r0, #0
}
    5f3a:	4770      	bx	lr
    5f3c:	20001de0 	.word	0x20001de0

00005f40 <fs_get_mnt_point>:
	return (ep != NULL) ? ep->fstp : NULL;
}

static int fs_get_mnt_point(struct fs_mount_t **mnt_pntp,
			    const char *name, size_t *match_len)
{
    5f40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5f44:	4683      	mov	fp, r0
    5f46:	460f      	mov	r7, r1
    5f48:	4692      	mov	sl, r2
	struct fs_mount_t *mnt_p = NULL, *itr;
	size_t longest_match = 0;
	size_t len, name_len = strlen(name);
    5f4a:	4608      	mov	r0, r1
    5f4c:	f00c fd6a 	bl	12a24 <strlen>
    5f50:	4680      	mov	r8, r0
	return z_impl_k_mutex_lock(mutex, timeout);
    5f52:	f04f 32ff 	mov.w	r2, #4294967295
    5f56:	f04f 33ff 	mov.w	r3, #4294967295
    5f5a:	4820      	ldr	r0, [pc, #128]	; (5fdc <fs_get_mnt_point+0x9c>)
    5f5c:	f009 fb72 	bl	f644 <z_impl_k_mutex_lock>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    5f60:	4b1f      	ldr	r3, [pc, #124]	; (5fe0 <fs_get_mnt_point+0xa0>)
    5f62:	681c      	ldr	r4, [r3, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5f64:	429c      	cmp	r4, r3
    5f66:	d01d      	beq.n	5fa4 <fs_get_mnt_point+0x64>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    5f68:	2600      	movs	r6, #0
    5f6a:	46b1      	mov	r9, r6
    5f6c:	e00c      	b.n	5f88 <fs_get_mnt_point+0x48>
		if ((len > 1) && (name[len] != '/') && (name[len] != '\0')) {
			continue;
		}

		/* Check for mount point match */
		if (strncmp(name, itr->mnt_point, len) == 0) {
    5f6e:	462a      	mov	r2, r5
    5f70:	68e1      	ldr	r1, [r4, #12]
    5f72:	4638      	mov	r0, r7
    5f74:	f00c fd72 	bl	12a5c <strncmp>
    5f78:	b908      	cbnz	r0, 5f7e <fs_get_mnt_point+0x3e>
			mnt_p = itr;
			longest_match = len;
    5f7a:	462e      	mov	r6, r5
			mnt_p = itr;
    5f7c:	46a1      	mov	r9, r4
    5f7e:	4b18      	ldr	r3, [pc, #96]	; (5fe0 <fs_get_mnt_point+0xa0>)
    5f80:	685b      	ldr	r3, [r3, #4]
    5f82:	429c      	cmp	r4, r3
    5f84:	d010      	beq.n	5fa8 <fs_get_mnt_point+0x68>
    5f86:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
    5f88:	b184      	cbz	r4, 5fac <fs_get_mnt_point+0x6c>
		len = itr->mountp_len;
    5f8a:	69a5      	ldr	r5, [r4, #24]
		if ((len < longest_match) || (len > name_len)) {
    5f8c:	42ae      	cmp	r6, r5
    5f8e:	d8f6      	bhi.n	5f7e <fs_get_mnt_point+0x3e>
    5f90:	45a8      	cmp	r8, r5
    5f92:	d3f4      	bcc.n	5f7e <fs_get_mnt_point+0x3e>
		if ((len > 1) && (name[len] != '/') && (name[len] != '\0')) {
    5f94:	2d01      	cmp	r5, #1
    5f96:	d9ea      	bls.n	5f6e <fs_get_mnt_point+0x2e>
    5f98:	5d7b      	ldrb	r3, [r7, r5]
    5f9a:	2b2f      	cmp	r3, #47	; 0x2f
    5f9c:	d0e7      	beq.n	5f6e <fs_get_mnt_point+0x2e>
    5f9e:	2b00      	cmp	r3, #0
    5fa0:	d0e5      	beq.n	5f6e <fs_get_mnt_point+0x2e>
    5fa2:	e7ec      	b.n	5f7e <fs_get_mnt_point+0x3e>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5fa4:	2400      	movs	r4, #0
    5fa6:	e7df      	b.n	5f68 <fs_get_mnt_point+0x28>
	return (node == list->tail) ? NULL : node->next;
    5fa8:	2400      	movs	r4, #0
    5faa:	e7ed      	b.n	5f88 <fs_get_mnt_point+0x48>
	return z_impl_k_mutex_unlock(mutex);
    5fac:	480b      	ldr	r0, [pc, #44]	; (5fdc <fs_get_mnt_point+0x9c>)
    5fae:	f009 fbd3 	bl	f758 <z_impl_k_mutex_unlock>
		}
	}
	k_mutex_unlock(&mutex);

	if (mnt_p == NULL) {
    5fb2:	f1b9 0f00 	cmp.w	r9, #0
    5fb6:	d00b      	beq.n	5fd0 <fs_get_mnt_point+0x90>
		return -ENOENT;
	}

	*mnt_pntp = mnt_p;
    5fb8:	f8cb 9000 	str.w	r9, [fp]
	if (match_len)
    5fbc:	f1ba 0f00 	cmp.w	sl, #0
    5fc0:	d009      	beq.n	5fd6 <fs_get_mnt_point+0x96>
		*match_len = mnt_p->mountp_len;
    5fc2:	f8d9 3018 	ldr.w	r3, [r9, #24]
    5fc6:	f8ca 3000 	str.w	r3, [sl]

	return 0;
    5fca:	2000      	movs	r0, #0
}
    5fcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOENT;
    5fd0:	f06f 0001 	mvn.w	r0, #1
    5fd4:	e7fa      	b.n	5fcc <fs_get_mnt_point+0x8c>
	return 0;
    5fd6:	2000      	movs	r0, #0
    5fd8:	e7f8      	b.n	5fcc <fs_get_mnt_point+0x8c>
    5fda:	bf00      	nop
    5fdc:	20001dcc 	.word	0x20001dcc
    5fe0:	20001dc4 	.word	0x20001dc4

00005fe4 <fs_init>:
	LOG_DBG("fs unregister %d: %d", type, rc);
	return rc;
}

static int fs_init(const struct device *dev)
{
    5fe4:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
    5fe6:	4804      	ldr	r0, [pc, #16]	; (5ff8 <fs_init+0x14>)
    5fe8:	f00f fa76 	bl	154d8 <z_impl_k_mutex_init>
	list->head = (sys_dnode_t *)list;
    5fec:	4b03      	ldr	r3, [pc, #12]	; (5ffc <fs_init+0x18>)
    5fee:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    5ff0:	605b      	str	r3, [r3, #4]
	k_mutex_init(&mutex);
	sys_dlist_init(&fs_mnt_list);
	return 0;
}
    5ff2:	2000      	movs	r0, #0
    5ff4:	bd08      	pop	{r3, pc}
    5ff6:	bf00      	nop
    5ff8:	20001dcc 	.word	0x20001dcc
    5ffc:	20001dc4 	.word	0x20001dc4

00006000 <fs_open>:
{
    6000:	b5f0      	push	{r4, r5, r6, r7, lr}
    6002:	b083      	sub	sp, #12
    6004:	4605      	mov	r5, r0
	zfp->flags = flags;
    6006:	7202      	strb	r2, [r0, #8]
	if ((file_name == NULL) ||
    6008:	b361      	cbz	r1, 6064 <fs_open+0x64>
    600a:	4616      	mov	r6, r2
    600c:	460f      	mov	r7, r1
			(strlen(file_name) <= 1) || (file_name[0] != '/')) {
    600e:	4608      	mov	r0, r1
    6010:	f00c fd08 	bl	12a24 <strlen>
	if ((file_name == NULL) ||
    6014:	2801      	cmp	r0, #1
    6016:	d925      	bls.n	6064 <fs_open+0x64>
			(strlen(file_name) <= 1) || (file_name[0] != '/')) {
    6018:	783b      	ldrb	r3, [r7, #0]
    601a:	2b2f      	cmp	r3, #47	; 0x2f
    601c:	d122      	bne.n	6064 <fs_open+0x64>
	if (zfp->mp != NULL) {
    601e:	686b      	ldr	r3, [r5, #4]
    6020:	2b00      	cmp	r3, #0
    6022:	d157      	bne.n	60d4 <fs_open+0xd4>
	rc = fs_get_mnt_point(&mp, file_name, NULL);
    6024:	2200      	movs	r2, #0
    6026:	4639      	mov	r1, r7
    6028:	a801      	add	r0, sp, #4
    602a:	f7ff ff89 	bl	5f40 <fs_get_mnt_point>
	if (rc < 0) {
    602e:	1e04      	subs	r4, r0, #0
    6030:	db2b      	blt.n	608a <fs_open+0x8a>
	if (((mp->flags & FS_MOUNT_FLAG_READ_ONLY) != 0) &&
    6032:	9b01      	ldr	r3, [sp, #4]
    6034:	f893 2020 	ldrb.w	r2, [r3, #32]
    6038:	f012 0f02 	tst.w	r2, #2
    603c:	d002      	beq.n	6044 <fs_open+0x44>
    603e:	f016 0f12 	tst.w	r6, #18
    6042:	d14a      	bne.n	60da <fs_open+0xda>
	CHECKIF(mp->fs->open == NULL) {
    6044:	69da      	ldr	r2, [r3, #28]
    6046:	6812      	ldr	r2, [r2, #0]
    6048:	2a00      	cmp	r2, #0
    604a:	d049      	beq.n	60e0 <fs_open+0xe0>
	zfp->mp = mp;
    604c:	606b      	str	r3, [r5, #4]
	rc = mp->fs->open(zfp, file_name, flags);
    604e:	69db      	ldr	r3, [r3, #28]
    6050:	681b      	ldr	r3, [r3, #0]
    6052:	4632      	mov	r2, r6
    6054:	4639      	mov	r1, r7
    6056:	4628      	mov	r0, r5
    6058:	4798      	blx	r3
	if (rc < 0) {
    605a:	1e04      	subs	r4, r0, #0
    605c:	db26      	blt.n	60ac <fs_open+0xac>
}
    605e:	4620      	mov	r0, r4
    6060:	b003      	add	sp, #12
    6062:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6064:	4b20      	ldr	r3, [pc, #128]	; (60e8 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xe8>)
    6066:	4a21      	ldr	r2, [pc, #132]	; (60ec <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xec>)
    6068:	1a9b      	subs	r3, r3, r2
    606a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("invalid file name!!");
    606c:	f04f 0100 	mov.w	r1, #0
    6070:	2201      	movs	r2, #1
    6072:	f362 0102 	bfi	r1, r2, #0, #3
    6076:	f36f 01c5 	bfc	r1, #3, #3
    607a:	f363 118f 	bfi	r1, r3, #6, #10
    607e:	481c      	ldr	r0, [pc, #112]	; (60f0 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xf0>)
    6080:	f7fc fe2e 	bl	2ce0 <log_0>
		return -EINVAL;
    6084:	f06f 0415 	mvn.w	r4, #21
    6088:	e7e9      	b.n	605e <fs_open+0x5e>
    608a:	4b17      	ldr	r3, [pc, #92]	; (60e8 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xe8>)
    608c:	4a17      	ldr	r2, [pc, #92]	; (60ec <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xec>)
    608e:	1a9b      	subs	r3, r3, r2
    6090:	08db      	lsrs	r3, r3, #3
		LOG_ERR("mount point not found!!");
    6092:	f04f 0100 	mov.w	r1, #0
    6096:	2201      	movs	r2, #1
    6098:	f362 0102 	bfi	r1, r2, #0, #3
    609c:	f36f 01c5 	bfc	r1, #3, #3
    60a0:	f363 118f 	bfi	r1, r3, #6, #10
    60a4:	4813      	ldr	r0, [pc, #76]	; (60f4 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xf4>)
    60a6:	f7fc fe1b 	bl	2ce0 <log_0>
		return rc;
    60aa:	e7d8      	b.n	605e <fs_open+0x5e>
    60ac:	4b0e      	ldr	r3, [pc, #56]	; (60e8 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xe8>)
    60ae:	4a0f      	ldr	r2, [pc, #60]	; (60ec <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xec>)
    60b0:	1a9b      	subs	r3, r3, r2
    60b2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("file open error (%d)", rc);
    60b4:	f04f 0200 	mov.w	r2, #0
    60b8:	2101      	movs	r1, #1
    60ba:	f361 0202 	bfi	r2, r1, #0, #3
    60be:	f36f 02c5 	bfc	r2, #3, #3
    60c2:	f363 128f 	bfi	r2, r3, #6, #10
    60c6:	4621      	mov	r1, r4
    60c8:	480b      	ldr	r0, [pc, #44]	; (60f8 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xf8>)
    60ca:	f7fc fd75 	bl	2bb8 <log_1>
		zfp->mp = NULL;
    60ce:	2300      	movs	r3, #0
    60d0:	606b      	str	r3, [r5, #4]
		return rc;
    60d2:	e7c4      	b.n	605e <fs_open+0x5e>
		return -EBUSY;
    60d4:	f06f 040f 	mvn.w	r4, #15
    60d8:	e7c1      	b.n	605e <fs_open+0x5e>
		return -EROFS;
    60da:	f06f 041d 	mvn.w	r4, #29
    60de:	e7be      	b.n	605e <fs_open+0x5e>
		return -ENOTSUP;
    60e0:	f06f 0485 	mvn.w	r4, #133	; 0x85
    60e4:	e7bb      	b.n	605e <fs_open+0x5e>
    60e6:	bf00      	nop
    60e8:	00015eb8 	.word	0x00015eb8
    60ec:	00015ea8 	.word	0x00015ea8
    60f0:	00016c48 	.word	0x00016c48
    60f4:	00016c5c 	.word	0x00016c5c
    60f8:	00016c74 	.word	0x00016c74

000060fc <fs_close>:
{
    60fc:	b538      	push	{r3, r4, r5, lr}
	if (zfp->mp == NULL) {
    60fe:	6843      	ldr	r3, [r0, #4]
    6100:	b1e3      	cbz	r3, 613c <fs_close+0x40>
    6102:	4604      	mov	r4, r0
	CHECKIF(zfp->mp->fs->close == NULL) {
    6104:	69db      	ldr	r3, [r3, #28]
    6106:	69db      	ldr	r3, [r3, #28]
    6108:	b1d3      	cbz	r3, 6140 <fs_close+0x44>
	rc = zfp->mp->fs->close(zfp);
    610a:	4798      	blx	r3
	if (rc < 0) {
    610c:	1e05      	subs	r5, r0, #0
    610e:	db03      	blt.n	6118 <fs_close+0x1c>
	zfp->mp = NULL;
    6110:	2300      	movs	r3, #0
    6112:	6063      	str	r3, [r4, #4]
}
    6114:	4628      	mov	r0, r5
    6116:	bd38      	pop	{r3, r4, r5, pc}
    6118:	4b0b      	ldr	r3, [pc, #44]	; (6148 <fs_close+0x4c>)
    611a:	4a0c      	ldr	r2, [pc, #48]	; (614c <fs_close+0x50>)
    611c:	1a9b      	subs	r3, r3, r2
    611e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("file close error (%d)", rc);
    6120:	f04f 0200 	mov.w	r2, #0
    6124:	2101      	movs	r1, #1
    6126:	f361 0202 	bfi	r2, r1, #0, #3
    612a:	f36f 02c5 	bfc	r2, #3, #3
    612e:	f363 128f 	bfi	r2, r3, #6, #10
    6132:	4629      	mov	r1, r5
    6134:	4806      	ldr	r0, [pc, #24]	; (6150 <fs_close+0x54>)
    6136:	f7fc fd3f 	bl	2bb8 <log_1>
		return rc;
    613a:	e7eb      	b.n	6114 <fs_close+0x18>
		return 0;
    613c:	2500      	movs	r5, #0
    613e:	e7e9      	b.n	6114 <fs_close+0x18>
		return -ENOTSUP;
    6140:	f06f 0585 	mvn.w	r5, #133	; 0x85
    6144:	e7e6      	b.n	6114 <fs_close+0x18>
    6146:	bf00      	nop
    6148:	00015eb8 	.word	0x00015eb8
    614c:	00015ea8 	.word	0x00015ea8
    6150:	00016c8c 	.word	0x00016c8c

00006154 <fs_read>:
{
    6154:	b510      	push	{r4, lr}
	if (zfp->mp == NULL) {
    6156:	6843      	ldr	r3, [r0, #4]
    6158:	b1cb      	cbz	r3, 618e <fs_read+0x3a>
	CHECKIF(zfp->mp->fs->read == NULL) {
    615a:	69db      	ldr	r3, [r3, #28]
    615c:	685b      	ldr	r3, [r3, #4]
    615e:	b1cb      	cbz	r3, 6194 <fs_read+0x40>
	rc = zfp->mp->fs->read(zfp, ptr, size);
    6160:	4798      	blx	r3
	if (rc < 0) {
    6162:	1e04      	subs	r4, r0, #0
    6164:	db01      	blt.n	616a <fs_read+0x16>
}
    6166:	4620      	mov	r0, r4
    6168:	bd10      	pop	{r4, pc}
    616a:	4b0c      	ldr	r3, [pc, #48]	; (619c <fs_read+0x48>)
    616c:	4a0c      	ldr	r2, [pc, #48]	; (61a0 <fs_read+0x4c>)
    616e:	1a9b      	subs	r3, r3, r2
    6170:	08db      	lsrs	r3, r3, #3
		LOG_ERR("file read error (%d)", rc);
    6172:	f04f 0200 	mov.w	r2, #0
    6176:	2101      	movs	r1, #1
    6178:	f361 0202 	bfi	r2, r1, #0, #3
    617c:	f36f 02c5 	bfc	r2, #3, #3
    6180:	f363 128f 	bfi	r2, r3, #6, #10
    6184:	4621      	mov	r1, r4
    6186:	4807      	ldr	r0, [pc, #28]	; (61a4 <fs_read+0x50>)
    6188:	f7fc fd16 	bl	2bb8 <log_1>
    618c:	e7eb      	b.n	6166 <fs_read+0x12>
		return -EBADF;
    618e:	f06f 0408 	mvn.w	r4, #8
    6192:	e7e8      	b.n	6166 <fs_read+0x12>
		return -ENOTSUP;
    6194:	f06f 0485 	mvn.w	r4, #133	; 0x85
    6198:	e7e5      	b.n	6166 <fs_read+0x12>
    619a:	bf00      	nop
    619c:	00015eb8 	.word	0x00015eb8
    61a0:	00015ea8 	.word	0x00015ea8
    61a4:	00016ca4 	.word	0x00016ca4

000061a8 <fs_write>:
{
    61a8:	b510      	push	{r4, lr}
	if (zfp->mp == NULL) {
    61aa:	6843      	ldr	r3, [r0, #4]
    61ac:	b1cb      	cbz	r3, 61e2 <fs_write+0x3a>
	CHECKIF(zfp->mp->fs->write == NULL) {
    61ae:	69db      	ldr	r3, [r3, #28]
    61b0:	689b      	ldr	r3, [r3, #8]
    61b2:	b1cb      	cbz	r3, 61e8 <fs_write+0x40>
	rc = zfp->mp->fs->write(zfp, ptr, size);
    61b4:	4798      	blx	r3
	if (rc < 0) {
    61b6:	1e04      	subs	r4, r0, #0
    61b8:	db01      	blt.n	61be <fs_write+0x16>
}
    61ba:	4620      	mov	r0, r4
    61bc:	bd10      	pop	{r4, pc}
    61be:	4b0c      	ldr	r3, [pc, #48]	; (61f0 <fs_write+0x48>)
    61c0:	4a0c      	ldr	r2, [pc, #48]	; (61f4 <fs_write+0x4c>)
    61c2:	1a9b      	subs	r3, r3, r2
    61c4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("file write error (%d)", rc);
    61c6:	f04f 0200 	mov.w	r2, #0
    61ca:	2101      	movs	r1, #1
    61cc:	f361 0202 	bfi	r2, r1, #0, #3
    61d0:	f36f 02c5 	bfc	r2, #3, #3
    61d4:	f363 128f 	bfi	r2, r3, #6, #10
    61d8:	4621      	mov	r1, r4
    61da:	4807      	ldr	r0, [pc, #28]	; (61f8 <fs_write+0x50>)
    61dc:	f7fc fcec 	bl	2bb8 <log_1>
    61e0:	e7eb      	b.n	61ba <fs_write+0x12>
		return -EBADF;
    61e2:	f06f 0408 	mvn.w	r4, #8
    61e6:	e7e8      	b.n	61ba <fs_write+0x12>
		return -ENOTSUP;
    61e8:	f06f 0485 	mvn.w	r4, #133	; 0x85
    61ec:	e7e5      	b.n	61ba <fs_write+0x12>
    61ee:	bf00      	nop
    61f0:	00015eb8 	.word	0x00015eb8
    61f4:	00015ea8 	.word	0x00015ea8
    61f8:	00016cbc 	.word	0x00016cbc

000061fc <fs_seek>:
{
    61fc:	b510      	push	{r4, lr}
	if (zfp->mp == NULL) {
    61fe:	6843      	ldr	r3, [r0, #4]
    6200:	b1cb      	cbz	r3, 6236 <fs_seek+0x3a>
	CHECKIF(zfp->mp->fs->lseek == NULL) {
    6202:	69db      	ldr	r3, [r3, #28]
    6204:	68db      	ldr	r3, [r3, #12]
    6206:	b1cb      	cbz	r3, 623c <fs_seek+0x40>
	rc = zfp->mp->fs->lseek(zfp, offset, whence);
    6208:	4798      	blx	r3
	if (rc < 0) {
    620a:	1e04      	subs	r4, r0, #0
    620c:	db01      	blt.n	6212 <fs_seek+0x16>
}
    620e:	4620      	mov	r0, r4
    6210:	bd10      	pop	{r4, pc}
    6212:	4b0c      	ldr	r3, [pc, #48]	; (6244 <fs_seek+0x48>)
    6214:	4a0c      	ldr	r2, [pc, #48]	; (6248 <fs_seek+0x4c>)
    6216:	1a9b      	subs	r3, r3, r2
    6218:	08db      	lsrs	r3, r3, #3
		LOG_ERR("file seek error (%d)", rc);
    621a:	f04f 0200 	mov.w	r2, #0
    621e:	2101      	movs	r1, #1
    6220:	f361 0202 	bfi	r2, r1, #0, #3
    6224:	f36f 02c5 	bfc	r2, #3, #3
    6228:	f363 128f 	bfi	r2, r3, #6, #10
    622c:	4621      	mov	r1, r4
    622e:	4807      	ldr	r0, [pc, #28]	; (624c <fs_seek+0x50>)
    6230:	f7fc fcc2 	bl	2bb8 <log_1>
    6234:	e7eb      	b.n	620e <fs_seek+0x12>
		return -EBADF;
    6236:	f06f 0408 	mvn.w	r4, #8
    623a:	e7e8      	b.n	620e <fs_seek+0x12>
		return -ENOTSUP;
    623c:	f06f 0485 	mvn.w	r4, #133	; 0x85
    6240:	e7e5      	b.n	620e <fs_seek+0x12>
    6242:	bf00      	nop
    6244:	00015eb8 	.word	0x00015eb8
    6248:	00015ea8 	.word	0x00015ea8
    624c:	00016cd4 	.word	0x00016cd4

00006250 <fs_stat>:
{
    6250:	b570      	push	{r4, r5, r6, lr}
    6252:	b082      	sub	sp, #8
	if ((abs_path == NULL) ||
    6254:	b300      	cbz	r0, 6298 <fs_stat+0x48>
    6256:	460e      	mov	r6, r1
    6258:	4605      	mov	r5, r0
			(strlen(abs_path) <= 1) || (abs_path[0] != '/')) {
    625a:	f00c fbe3 	bl	12a24 <strlen>
	if ((abs_path == NULL) ||
    625e:	2801      	cmp	r0, #1
    6260:	d91a      	bls.n	6298 <fs_stat+0x48>
			(strlen(abs_path) <= 1) || (abs_path[0] != '/')) {
    6262:	782b      	ldrb	r3, [r5, #0]
    6264:	2b2f      	cmp	r3, #47	; 0x2f
    6266:	d117      	bne.n	6298 <fs_stat+0x48>
	rc = fs_get_mnt_point(&mp, abs_path, NULL);
    6268:	2200      	movs	r2, #0
    626a:	4629      	mov	r1, r5
    626c:	a801      	add	r0, sp, #4
    626e:	f7ff fe67 	bl	5f40 <fs_get_mnt_point>
	if (rc < 0) {
    6272:	1e04      	subs	r4, r0, #0
    6274:	db23      	blt.n	62be <fs_stat+0x6e>
	CHECKIF(mp->fs->stat == NULL) {
    6276:	9801      	ldr	r0, [sp, #4]
    6278:	69c3      	ldr	r3, [r0, #28]
    627a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    627c:	2b00      	cmp	r3, #0
    627e:	d041      	beq.n	6304 <fs_stat+0xb4>
	rc = mp->fs->stat(mp, abs_path, entry);
    6280:	4632      	mov	r2, r6
    6282:	4629      	mov	r1, r5
    6284:	4798      	blx	r3
    6286:	4604      	mov	r4, r0
	if (rc == -ENOENT) {
    6288:	f110 0f02 	cmn.w	r0, #2
    628c:	d001      	beq.n	6292 <fs_stat+0x42>
	} else if (rc < 0) {
    628e:	2800      	cmp	r0, #0
    6290:	db26      	blt.n	62e0 <fs_stat+0x90>
}
    6292:	4620      	mov	r0, r4
    6294:	b002      	add	sp, #8
    6296:	bd70      	pop	{r4, r5, r6, pc}
    6298:	4b1c      	ldr	r3, [pc, #112]	; (630c <fs_stat+0xbc>)
    629a:	4a1d      	ldr	r2, [pc, #116]	; (6310 <fs_stat+0xc0>)
    629c:	1a9b      	subs	r3, r3, r2
    629e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("invalid file name!!");
    62a0:	f04f 0100 	mov.w	r1, #0
    62a4:	2201      	movs	r2, #1
    62a6:	f362 0102 	bfi	r1, r2, #0, #3
    62aa:	f36f 01c5 	bfc	r1, #3, #3
    62ae:	f363 118f 	bfi	r1, r3, #6, #10
    62b2:	4818      	ldr	r0, [pc, #96]	; (6314 <fs_stat+0xc4>)
    62b4:	f7fc fd14 	bl	2ce0 <log_0>
		return -EINVAL;
    62b8:	f06f 0415 	mvn.w	r4, #21
    62bc:	e7e9      	b.n	6292 <fs_stat+0x42>
    62be:	4b13      	ldr	r3, [pc, #76]	; (630c <fs_stat+0xbc>)
    62c0:	4a13      	ldr	r2, [pc, #76]	; (6310 <fs_stat+0xc0>)
    62c2:	1a9b      	subs	r3, r3, r2
    62c4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("mount point not found!!");
    62c6:	f04f 0100 	mov.w	r1, #0
    62ca:	2201      	movs	r2, #1
    62cc:	f362 0102 	bfi	r1, r2, #0, #3
    62d0:	f36f 01c5 	bfc	r1, #3, #3
    62d4:	f363 118f 	bfi	r1, r3, #6, #10
    62d8:	480f      	ldr	r0, [pc, #60]	; (6318 <fs_stat+0xc8>)
    62da:	f7fc fd01 	bl	2ce0 <log_0>
		return rc;
    62de:	e7d8      	b.n	6292 <fs_stat+0x42>
    62e0:	4b0a      	ldr	r3, [pc, #40]	; (630c <fs_stat+0xbc>)
    62e2:	4a0b      	ldr	r2, [pc, #44]	; (6310 <fs_stat+0xc0>)
    62e4:	1a9b      	subs	r3, r3, r2
    62e6:	08db      	lsrs	r3, r3, #3
		LOG_ERR("failed get file or dir stat (%d)", rc);
    62e8:	f04f 0200 	mov.w	r2, #0
    62ec:	2101      	movs	r1, #1
    62ee:	f361 0202 	bfi	r2, r1, #0, #3
    62f2:	f36f 02c5 	bfc	r2, #3, #3
    62f6:	f363 128f 	bfi	r2, r3, #6, #10
    62fa:	4601      	mov	r1, r0
    62fc:	4807      	ldr	r0, [pc, #28]	; (631c <fs_stat+0xcc>)
    62fe:	f7fc fc5b 	bl	2bb8 <log_1>
    6302:	e7c6      	b.n	6292 <fs_stat+0x42>
		return -ENOTSUP;
    6304:	f06f 0485 	mvn.w	r4, #133	; 0x85
    6308:	e7c3      	b.n	6292 <fs_stat+0x42>
    630a:	bf00      	nop
    630c:	00015eb8 	.word	0x00015eb8
    6310:	00015ea8 	.word	0x00015ea8
    6314:	00016c48 	.word	0x00016c48
    6318:	00016c5c 	.word	0x00016c5c
    631c:	00016cec 	.word	0x00016cec

00006320 <fs_statvfs>:
{
    6320:	b570      	push	{r4, r5, r6, lr}
    6322:	b082      	sub	sp, #8
	if ((abs_path == NULL) ||
    6324:	b1d8      	cbz	r0, 635e <fs_statvfs+0x3e>
    6326:	460e      	mov	r6, r1
    6328:	4605      	mov	r5, r0
			(strlen(abs_path) <= 1) || (abs_path[0] != '/')) {
    632a:	f00c fb7b 	bl	12a24 <strlen>
	if ((abs_path == NULL) ||
    632e:	2801      	cmp	r0, #1
    6330:	d915      	bls.n	635e <fs_statvfs+0x3e>
			(strlen(abs_path) <= 1) || (abs_path[0] != '/')) {
    6332:	782b      	ldrb	r3, [r5, #0]
    6334:	2b2f      	cmp	r3, #47	; 0x2f
    6336:	d112      	bne.n	635e <fs_statvfs+0x3e>
	rc = fs_get_mnt_point(&mp, abs_path, NULL);
    6338:	2200      	movs	r2, #0
    633a:	4629      	mov	r1, r5
    633c:	a801      	add	r0, sp, #4
    633e:	f7ff fdff 	bl	5f40 <fs_get_mnt_point>
	if (rc < 0) {
    6342:	1e04      	subs	r4, r0, #0
    6344:	db1e      	blt.n	6384 <fs_statvfs+0x64>
	if (mp->fs->statvfs != NULL) {
    6346:	9801      	ldr	r0, [sp, #4]
    6348:	69c3      	ldr	r3, [r0, #28]
    634a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    634c:	b123      	cbz	r3, 6358 <fs_statvfs+0x38>
		rc = mp->fs->statvfs(mp, abs_path, stat);
    634e:	4632      	mov	r2, r6
    6350:	4629      	mov	r1, r5
    6352:	4798      	blx	r3
		if (rc < 0) {
    6354:	1e04      	subs	r4, r0, #0
    6356:	db26      	blt.n	63a6 <fs_statvfs+0x86>
}
    6358:	4620      	mov	r0, r4
    635a:	b002      	add	sp, #8
    635c:	bd70      	pop	{r4, r5, r6, pc}
    635e:	4b1b      	ldr	r3, [pc, #108]	; (63cc <fs_statvfs+0xac>)
    6360:	4a1b      	ldr	r2, [pc, #108]	; (63d0 <fs_statvfs+0xb0>)
    6362:	1a9b      	subs	r3, r3, r2
    6364:	08db      	lsrs	r3, r3, #3
		LOG_ERR("invalid file name!!");
    6366:	f04f 0100 	mov.w	r1, #0
    636a:	2201      	movs	r2, #1
    636c:	f362 0102 	bfi	r1, r2, #0, #3
    6370:	f36f 01c5 	bfc	r1, #3, #3
    6374:	f363 118f 	bfi	r1, r3, #6, #10
    6378:	4816      	ldr	r0, [pc, #88]	; (63d4 <fs_statvfs+0xb4>)
    637a:	f7fc fcb1 	bl	2ce0 <log_0>
		return -EINVAL;
    637e:	f06f 0415 	mvn.w	r4, #21
    6382:	e7e9      	b.n	6358 <fs_statvfs+0x38>
    6384:	4b11      	ldr	r3, [pc, #68]	; (63cc <fs_statvfs+0xac>)
    6386:	4a12      	ldr	r2, [pc, #72]	; (63d0 <fs_statvfs+0xb0>)
    6388:	1a9b      	subs	r3, r3, r2
    638a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("mount point not found!!");
    638c:	f04f 0100 	mov.w	r1, #0
    6390:	2201      	movs	r2, #1
    6392:	f362 0102 	bfi	r1, r2, #0, #3
    6396:	f36f 01c5 	bfc	r1, #3, #3
    639a:	f363 118f 	bfi	r1, r3, #6, #10
    639e:	480e      	ldr	r0, [pc, #56]	; (63d8 <fs_statvfs+0xb8>)
    63a0:	f7fc fc9e 	bl	2ce0 <log_0>
		return rc;
    63a4:	e7d8      	b.n	6358 <fs_statvfs+0x38>
    63a6:	4b09      	ldr	r3, [pc, #36]	; (63cc <fs_statvfs+0xac>)
    63a8:	4a09      	ldr	r2, [pc, #36]	; (63d0 <fs_statvfs+0xb0>)
    63aa:	1a9b      	subs	r3, r3, r2
    63ac:	08db      	lsrs	r3, r3, #3
			LOG_ERR("failed get file or dir stat (%d)", rc);
    63ae:	f04f 0200 	mov.w	r2, #0
    63b2:	2101      	movs	r1, #1
    63b4:	f361 0202 	bfi	r2, r1, #0, #3
    63b8:	f36f 02c5 	bfc	r2, #3, #3
    63bc:	f363 128f 	bfi	r2, r3, #6, #10
    63c0:	4621      	mov	r1, r4
    63c2:	4806      	ldr	r0, [pc, #24]	; (63dc <fs_statvfs+0xbc>)
    63c4:	f7fc fbf8 	bl	2bb8 <log_1>
    63c8:	e7c6      	b.n	6358 <fs_statvfs+0x38>
    63ca:	bf00      	nop
    63cc:	00015eb8 	.word	0x00015eb8
    63d0:	00015ea8 	.word	0x00015ea8
    63d4:	00016c48 	.word	0x00016c48
    63d8:	00016c5c 	.word	0x00016c5c
    63dc:	00016cec 	.word	0x00016cec

000063e0 <fs_mount>:
{
    63e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((mp == NULL) || (mp->mnt_point == NULL)) {
    63e2:	b1c0      	cbz	r0, 6416 <fs_mount+0x36>
    63e4:	4606      	mov	r6, r0
    63e6:	68c0      	ldr	r0, [r0, #12]
    63e8:	b1a8      	cbz	r0, 6416 <fs_mount+0x36>
	len = strlen(mp->mnt_point);
    63ea:	f00c fb1b 	bl	12a24 <strlen>
    63ee:	4605      	mov	r5, r0
	if ((len <= 1) || (mp->mnt_point[0] != '/')) {
    63f0:	2801      	cmp	r0, #1
    63f2:	d923      	bls.n	643c <fs_mount+0x5c>
    63f4:	68f3      	ldr	r3, [r6, #12]
    63f6:	781b      	ldrb	r3, [r3, #0]
    63f8:	2b2f      	cmp	r3, #47	; 0x2f
    63fa:	d11f      	bne.n	643c <fs_mount+0x5c>
	return z_impl_k_mutex_lock(mutex, timeout);
    63fc:	f04f 32ff 	mov.w	r2, #4294967295
    6400:	f04f 33ff 	mov.w	r3, #4294967295
    6404:	485e      	ldr	r0, [pc, #376]	; (6580 <fs_mount+0x1a0>)
    6406:	f009 f91d 	bl	f644 <z_impl_k_mutex_lock>
	return list->head == list;
    640a:	4b5e      	ldr	r3, [pc, #376]	; (6584 <fs_mount+0x1a4>)
    640c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    640e:	429c      	cmp	r4, r3
    6410:	d12c      	bne.n	646c <fs_mount+0x8c>
    6412:	2400      	movs	r4, #0
    6414:	e02a      	b.n	646c <fs_mount+0x8c>
    6416:	4b5c      	ldr	r3, [pc, #368]	; (6588 <fs_mount+0x1a8>)
    6418:	4a5c      	ldr	r2, [pc, #368]	; (658c <fs_mount+0x1ac>)
    641a:	1a9b      	subs	r3, r3, r2
    641c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("mount point not initialized!!");
    641e:	f04f 0100 	mov.w	r1, #0
    6422:	2201      	movs	r2, #1
    6424:	f362 0102 	bfi	r1, r2, #0, #3
    6428:	f36f 01c5 	bfc	r1, #3, #3
    642c:	f363 118f 	bfi	r1, r3, #6, #10
    6430:	4857      	ldr	r0, [pc, #348]	; (6590 <fs_mount+0x1b0>)
    6432:	f7fc fc55 	bl	2ce0 <log_0>
		return -EINVAL;
    6436:	f06f 0415 	mvn.w	r4, #21
    643a:	e050      	b.n	64de <fs_mount+0xfe>
    643c:	4b52      	ldr	r3, [pc, #328]	; (6588 <fs_mount+0x1a8>)
    643e:	4a53      	ldr	r2, [pc, #332]	; (658c <fs_mount+0x1ac>)
    6440:	1a9b      	subs	r3, r3, r2
    6442:	08db      	lsrs	r3, r3, #3
		LOG_ERR("invalid mount point!!");
    6444:	f04f 0100 	mov.w	r1, #0
    6448:	2201      	movs	r2, #1
    644a:	f362 0102 	bfi	r1, r2, #0, #3
    644e:	f36f 01c5 	bfc	r1, #3, #3
    6452:	f363 118f 	bfi	r1, r3, #6, #10
    6456:	484f      	ldr	r0, [pc, #316]	; (6594 <fs_mount+0x1b4>)
    6458:	f7fc fc42 	bl	2ce0 <log_0>
		return -EINVAL;
    645c:	f06f 0415 	mvn.w	r4, #21
    6460:	e03d      	b.n	64de <fs_mount+0xfe>
	return (node == list->tail) ? NULL : node->next;
    6462:	4b48      	ldr	r3, [pc, #288]	; (6584 <fs_mount+0x1a4>)
    6464:	685b      	ldr	r3, [r3, #4]
    6466:	42a3      	cmp	r3, r4
    6468:	d01e      	beq.n	64a8 <fs_mount+0xc8>
    646a:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
    646c:	b1e4      	cbz	r4, 64a8 <fs_mount+0xc8>
		if (len != itr->mountp_len) {
    646e:	69a3      	ldr	r3, [r4, #24]
    6470:	42ab      	cmp	r3, r5
    6472:	d1f6      	bne.n	6462 <fs_mount+0x82>
		if (strncmp(mp->mnt_point, itr->mnt_point, len) == 0) {
    6474:	462a      	mov	r2, r5
    6476:	68e1      	ldr	r1, [r4, #12]
    6478:	68f0      	ldr	r0, [r6, #12]
    647a:	f00c faef 	bl	12a5c <strncmp>
    647e:	2800      	cmp	r0, #0
    6480:	d1ef      	bne.n	6462 <fs_mount+0x82>
    6482:	4b41      	ldr	r3, [pc, #260]	; (6588 <fs_mount+0x1a8>)
    6484:	4a41      	ldr	r2, [pc, #260]	; (658c <fs_mount+0x1ac>)
    6486:	1a9b      	subs	r3, r3, r2
    6488:	08db      	lsrs	r3, r3, #3
			LOG_ERR("mount point already exists!!");
    648a:	f04f 0100 	mov.w	r1, #0
    648e:	2201      	movs	r2, #1
    6490:	f362 0102 	bfi	r1, r2, #0, #3
    6494:	f36f 01c5 	bfc	r1, #3, #3
    6498:	f363 118f 	bfi	r1, r3, #6, #10
    649c:	483e      	ldr	r0, [pc, #248]	; (6598 <fs_mount+0x1b8>)
    649e:	f7fc fc1f 	bl	2ce0 <log_0>
			rc = -EBUSY;
    64a2:	f06f 040f 	mvn.w	r4, #15
			goto mount_err;
    64a6:	e017      	b.n	64d8 <fs_mount+0xf8>
	fs = fs_type_get(mp->type);
    64a8:	68b4      	ldr	r4, [r6, #8]
    64aa:	4620      	mov	r0, r4
    64ac:	f00c fb93 	bl	12bd6 <fs_type_get>
	if (fs == NULL) {
    64b0:	4607      	mov	r7, r0
    64b2:	b1b0      	cbz	r0, 64e2 <fs_mount+0x102>
	CHECKIF(fs->mount == NULL) {
    64b4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    64b6:	b33b      	cbz	r3, 6508 <fs_mount+0x128>
	if (fs->unmount == NULL) {
    64b8:	6b03      	ldr	r3, [r0, #48]	; 0x30
    64ba:	2b00      	cmp	r3, #0
    64bc:	d038      	beq.n	6530 <fs_mount+0x150>
	rc = fs->mount(mp);
    64be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    64c0:	4630      	mov	r0, r6
    64c2:	4798      	blx	r3
	if (rc < 0) {
    64c4:	1e04      	subs	r4, r0, #0
    64c6:	db49      	blt.n	655c <fs_mount+0x17c>
	mp->mountp_len = len;
    64c8:	61b5      	str	r5, [r6, #24]
	mp->fs = fs;
    64ca:	61f7      	str	r7, [r6, #28]
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
    64cc:	4b2d      	ldr	r3, [pc, #180]	; (6584 <fs_mount+0x1a4>)
    64ce:	685a      	ldr	r2, [r3, #4]

	node->next = list;
    64d0:	6033      	str	r3, [r6, #0]
	node->prev = tail;
    64d2:	6072      	str	r2, [r6, #4]

	tail->next = node;
    64d4:	6016      	str	r6, [r2, #0]
	list->tail = node;
    64d6:	605e      	str	r6, [r3, #4]
	return z_impl_k_mutex_unlock(mutex);
    64d8:	4829      	ldr	r0, [pc, #164]	; (6580 <fs_mount+0x1a0>)
    64da:	f009 f93d 	bl	f758 <z_impl_k_mutex_unlock>
}
    64de:	4620      	mov	r0, r4
    64e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    64e2:	4b29      	ldr	r3, [pc, #164]	; (6588 <fs_mount+0x1a8>)
    64e4:	4a29      	ldr	r2, [pc, #164]	; (658c <fs_mount+0x1ac>)
    64e6:	1a9b      	subs	r3, r3, r2
    64e8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("requested file system type not registered!!");
    64ea:	f04f 0100 	mov.w	r1, #0
    64ee:	2201      	movs	r2, #1
    64f0:	f362 0102 	bfi	r1, r2, #0, #3
    64f4:	f36f 01c5 	bfc	r1, #3, #3
    64f8:	f363 118f 	bfi	r1, r3, #6, #10
    64fc:	4827      	ldr	r0, [pc, #156]	; (659c <fs_mount+0x1bc>)
    64fe:	f7fc fbef 	bl	2ce0 <log_0>
		rc = -ENOENT;
    6502:	f06f 0401 	mvn.w	r4, #1
		goto mount_err;
    6506:	e7e7      	b.n	64d8 <fs_mount+0xf8>
    6508:	4b1f      	ldr	r3, [pc, #124]	; (6588 <fs_mount+0x1a8>)
    650a:	4a20      	ldr	r2, [pc, #128]	; (658c <fs_mount+0x1ac>)
    650c:	1a9b      	subs	r3, r3, r2
    650e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("fs type %d does not support mounting", mp->type);
    6510:	f04f 0200 	mov.w	r2, #0
    6514:	2101      	movs	r1, #1
    6516:	f361 0202 	bfi	r2, r1, #0, #3
    651a:	f36f 02c5 	bfc	r2, #3, #3
    651e:	f363 128f 	bfi	r2, r3, #6, #10
    6522:	4621      	mov	r1, r4
    6524:	481e      	ldr	r0, [pc, #120]	; (65a0 <fs_mount+0x1c0>)
    6526:	f7fc fb47 	bl	2bb8 <log_1>
		rc = -ENOTSUP;
    652a:	f06f 0485 	mvn.w	r4, #133	; 0x85
		goto mount_err;
    652e:	e7d3      	b.n	64d8 <fs_mount+0xf8>
    6530:	4b15      	ldr	r3, [pc, #84]	; (6588 <fs_mount+0x1a8>)
    6532:	4a16      	ldr	r2, [pc, #88]	; (658c <fs_mount+0x1ac>)
    6534:	1a9b      	subs	r3, r3, r2
    6536:	08db      	lsrs	r3, r3, #3
		LOG_WRN("mount path %s is not unmountable",
    6538:	f04f 0400 	mov.w	r4, #0
    653c:	2202      	movs	r2, #2
    653e:	f362 0402 	bfi	r4, r2, #0, #3
    6542:	f36f 04c5 	bfc	r4, #3, #3
    6546:	f363 148f 	bfi	r4, r3, #6, #10
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
    654a:	68f0      	ldr	r0, [r6, #12]
    654c:	f7fc f9ba 	bl	28c4 <z_log_strdup>
    6550:	4601      	mov	r1, r0
    6552:	4622      	mov	r2, r4
    6554:	4813      	ldr	r0, [pc, #76]	; (65a4 <fs_mount+0x1c4>)
    6556:	f7fc fb2f 	bl	2bb8 <log_1>
    655a:	e7b0      	b.n	64be <fs_mount+0xde>
    655c:	4b0a      	ldr	r3, [pc, #40]	; (6588 <fs_mount+0x1a8>)
    655e:	4a0b      	ldr	r2, [pc, #44]	; (658c <fs_mount+0x1ac>)
    6560:	1a9b      	subs	r3, r3, r2
    6562:	08db      	lsrs	r3, r3, #3
		LOG_ERR("fs mount error (%d)", rc);
    6564:	f04f 0200 	mov.w	r2, #0
    6568:	2101      	movs	r1, #1
    656a:	f361 0202 	bfi	r2, r1, #0, #3
    656e:	f36f 02c5 	bfc	r2, #3, #3
    6572:	f363 128f 	bfi	r2, r3, #6, #10
    6576:	4621      	mov	r1, r4
    6578:	480b      	ldr	r0, [pc, #44]	; (65a8 <fs_mount+0x1c8>)
    657a:	f7fc fb1d 	bl	2bb8 <log_1>
		goto mount_err;
    657e:	e7ab      	b.n	64d8 <fs_mount+0xf8>
    6580:	20001dcc 	.word	0x20001dcc
    6584:	20001dc4 	.word	0x20001dc4
    6588:	00015eb8 	.word	0x00015eb8
    658c:	00015ea8 	.word	0x00015ea8
    6590:	00016d10 	.word	0x00016d10
    6594:	00016d30 	.word	0x00016d30
    6598:	00016d48 	.word	0x00016d48
    659c:	00016d68 	.word	0x00016d68
    65a0:	00016d94 	.word	0x00016d94
    65a4:	00016dbc 	.word	0x00016dbc
    65a8:	00016de0 	.word	0x00016de0

000065ac <fs_register>:
{
    65ac:	b538      	push	{r3, r4, r5, lr}
    65ae:	4604      	mov	r4, r0
    65b0:	460d      	mov	r5, r1
	return z_impl_k_mutex_lock(mutex, timeout);
    65b2:	f04f 32ff 	mov.w	r2, #4294967295
    65b6:	f04f 33ff 	mov.w	r3, #4294967295
    65ba:	480a      	ldr	r0, [pc, #40]	; (65e4 <fs_register+0x38>)
    65bc:	f009 f842 	bl	f644 <z_impl_k_mutex_lock>
	if (fs_type_get(type) != NULL) {
    65c0:	4620      	mov	r0, r4
    65c2:	f00c fb08 	bl	12bd6 <fs_type_get>
    65c6:	b948      	cbnz	r0, 65dc <fs_register+0x30>
		rc = registry_add(type, fs);
    65c8:	4629      	mov	r1, r5
    65ca:	4620      	mov	r0, r4
    65cc:	f7ff fc8a 	bl	5ee4 <registry_add>
    65d0:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    65d2:	4804      	ldr	r0, [pc, #16]	; (65e4 <fs_register+0x38>)
    65d4:	f009 f8c0 	bl	f758 <z_impl_k_mutex_unlock>
}
    65d8:	4620      	mov	r0, r4
    65da:	bd38      	pop	{r3, r4, r5, pc}
		rc = -EALREADY;
    65dc:	f06f 0477 	mvn.w	r4, #119	; 0x77
    65e0:	e7f7      	b.n	65d2 <fs_register+0x26>
    65e2:	bf00      	nop
    65e4:	20001dcc 	.word	0x20001dcc

000065e8 <fs_impl_strip_prefix>:
const char *fs_impl_strip_prefix(const char *path,
				 const struct fs_mount_t *mp)
{
	static const char *const root = "/";

	if ((path == NULL) || (mp == NULL)) {
    65e8:	4603      	mov	r3, r0
    65ea:	b128      	cbz	r0, 65f8 <fs_impl_strip_prefix+0x10>
    65ec:	b129      	cbz	r1, 65fa <fs_impl_strip_prefix+0x12>
		return path;
	}

	path += mp->mountp_len;
    65ee:	698a      	ldr	r2, [r1, #24]
    65f0:	4410      	add	r0, r2
	return *path ? path : root;
    65f2:	5c9b      	ldrb	r3, [r3, r2]
    65f4:	b113      	cbz	r3, 65fc <fs_impl_strip_prefix+0x14>
    65f6:	4770      	bx	lr
    65f8:	4770      	bx	lr
    65fa:	4770      	bx	lr
    65fc:	4800      	ldr	r0, [pc, #0]	; (6600 <fs_impl_strip_prefix+0x18>)
}
    65fe:	4770      	bx	lr
    6600:	00016df8 	.word	0x00016df8

00006604 <littlefs_init>:
		}
	}
}

static int littlefs_init(const struct device *dev)
{
    6604:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);
	static struct fs_mount_t *partitions[] = {
		DT_INST_FOREACH_STATUS_OKAY(REFERENCE_MOUNT)
	};

	int rc = fs_register(FS_LITTLEFS, &littlefs_fs);
    6606:	4902      	ldr	r1, [pc, #8]	; (6610 <littlefs_init+0xc>)
    6608:	2001      	movs	r0, #1
    660a:	f7ff ffcf 	bl	65ac <fs_register>
			mount_init(*mpi++);
		}
	}

	return rc;
}
    660e:	bd08      	pop	{r3, pc}
    6610:	00016f68 	.word	0x00016f68

00006614 <get_block_size>:
{
    6614:	b500      	push	{lr}
    6616:	b083      	sub	sp, #12
	struct get_page_ctx ctx = {
    6618:	9000      	str	r0, [sp, #0]
    661a:	2300      	movs	r3, #0
    661c:	9301      	str	r3, [sp, #4]
	const struct device *dev = flash_area_get_device(fa);
    661e:	f00c f949 	bl	128b4 <flash_area_get_device>
	flash_page_foreach(dev, get_page_cb, &ctx);
    6622:	466a      	mov	r2, sp
    6624:	4903      	ldr	r1, [pc, #12]	; (6634 <get_block_size+0x20>)
    6626:	f00c ffc8 	bl	135ba <flash_page_foreach>
}
    662a:	9801      	ldr	r0, [sp, #4]
    662c:	b003      	add	sp, #12
    662e:	f85d fb04 	ldr.w	pc, [sp], #4
    6632:	bf00      	nop
    6634:	00012ce5 	.word	0x00012ce5

00006638 <littlefs_mount>:
{
    6638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    663c:	b08d      	sub	sp, #52	; 0x34
    663e:	4605      	mov	r5, r0
	struct fs_littlefs *fs = mountp->fs_data;
    6640:	6904      	ldr	r4, [r0, #16]
	unsigned int area_id = (uintptr_t)mountp->storage_dev;
    6642:	6947      	ldr	r7, [r0, #20]
    6644:	4bc3      	ldr	r3, [pc, #780]	; (6954 <littlefs_mount+0x31c>)
    6646:	4ac4      	ldr	r2, [pc, #784]	; (6958 <littlefs_mount+0x320>)
    6648:	1a9b      	subs	r3, r3, r2
    664a:	08db      	lsrs	r3, r3, #3
	LOG_INF("LittleFS version %u.%u, disk version %u.%u",
    664c:	f04f 0c00 	mov.w	ip, #0
    6650:	2203      	movs	r2, #3
    6652:	f362 0c02 	bfi	ip, r2, #0, #3
    6656:	f36f 0cc5 	bfc	ip, #3, #3
    665a:	f363 1c8f 	bfi	ip, r3, #6, #10
    665e:	4bbf      	ldr	r3, [pc, #764]	; (695c <littlefs_mount+0x324>)
    6660:	ae07      	add	r6, sp, #28
    6662:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6664:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    6668:	4663      	mov	r3, ip
    666a:	2204      	movs	r2, #4
    666c:	4631      	mov	r1, r6
    666e:	48bc      	ldr	r0, [pc, #752]	; (6960 <littlefs_mount+0x328>)
    6670:	f7fc fb14 	bl	2c9c <log_n>
	if (fs->area) {
    6674:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    6678:	2b00      	cmp	r3, #0
    667a:	f040 8167 	bne.w	694c <littlefs_mount+0x314>
	k_mutex_init(&fs->mutex);
    667e:	f104 06ec 	add.w	r6, r4, #236	; 0xec
	return z_impl_k_mutex_init(mutex);
    6682:	4630      	mov	r0, r6
    6684:	f00e ff28 	bl	154d8 <z_impl_k_mutex_init>
	return z_impl_k_mutex_lock(mutex, timeout);
    6688:	f04f 32ff 	mov.w	r2, #4294967295
    668c:	f04f 33ff 	mov.w	r3, #4294967295
    6690:	4630      	mov	r0, r6
    6692:	f008 ffd7 	bl	f644 <z_impl_k_mutex_lock>
	ret = flash_area_open(area_id, &fs->area);
    6696:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    669a:	b2f8      	uxtb	r0, r7
    669c:	f7fe fb36 	bl	4d0c <flash_area_open>
	if ((ret < 0) || (fs->area == NULL)) {
    66a0:	2800      	cmp	r0, #0
    66a2:	db26      	blt.n	66f2 <littlefs_mount+0xba>
    66a4:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
    66a8:	b318      	cbz	r0, 66f2 <littlefs_mount+0xba>
	dev = flash_area_get_device(fs->area);
    66aa:	f00c f903 	bl	128b4 <flash_area_get_device>
	if (dev == NULL) {
    66ae:	9004      	str	r0, [sp, #16]
    66b0:	2800      	cmp	r0, #0
    66b2:	d03b      	beq.n	672c <littlefs_mount+0xf4>
	lfs_size_t read_size = lcp->read_size;
    66b4:	f8d4 9014 	ldr.w	r9, [r4, #20]
	if (read_size == 0) {
    66b8:	f1b9 0f00 	cmp.w	r9, #0
    66bc:	d101      	bne.n	66c2 <littlefs_mount+0x8a>
		read_size = CONFIG_FS_LITTLEFS_READ_SIZE;
    66be:	f04f 0910 	mov.w	r9, #16
	lfs_size_t prog_size = lcp->prog_size;
    66c2:	f8d4 8018 	ldr.w	r8, [r4, #24]
	if (prog_size == 0) {
    66c6:	f1b8 0f00 	cmp.w	r8, #0
    66ca:	d101      	bne.n	66d0 <littlefs_mount+0x98>
		prog_size = CONFIG_FS_LITTLEFS_PROG_SIZE;
    66cc:	f04f 0810 	mov.w	r8, #16
	lfs_size_t block_size = lcp->block_size;
    66d0:	69e7      	ldr	r7, [r4, #28]
	if (block_size == 0) {
    66d2:	2f00      	cmp	r7, #0
    66d4:	d044      	beq.n	6760 <littlefs_mount+0x128>
	if (block_size == 0) {
    66d6:	2f00      	cmp	r7, #0
    66d8:	f000 8135 	beq.w	6946 <littlefs_mount+0x30e>
	int32_t block_cycles = lcp->block_cycles;
    66dc:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
	if (block_cycles == 0) {
    66e0:	f1bb 0f00 	cmp.w	fp, #0
    66e4:	d042      	beq.n	676c <littlefs_mount+0x134>
	if (block_cycles <= 0) {
    66e6:	f1bb 0f00 	cmp.w	fp, #0
    66ea:	dc41      	bgt.n	6770 <littlefs_mount+0x138>
		block_cycles = -1;
    66ec:	f04f 3bff 	mov.w	fp, #4294967295
    66f0:	e03e      	b.n	6770 <littlefs_mount+0x138>
    66f2:	4b98      	ldr	r3, [pc, #608]	; (6954 <littlefs_mount+0x31c>)
    66f4:	4a98      	ldr	r2, [pc, #608]	; (6958 <littlefs_mount+0x320>)
    66f6:	1a9b      	subs	r3, r3, r2
    66f8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("can't open flash area %d", area_id);
    66fa:	f04f 0200 	mov.w	r2, #0
    66fe:	2101      	movs	r1, #1
    6700:	f361 0202 	bfi	r2, r1, #0, #3
    6704:	f36f 02c5 	bfc	r2, #3, #3
    6708:	f363 128f 	bfi	r2, r3, #6, #10
    670c:	4639      	mov	r1, r7
    670e:	4895      	ldr	r0, [pc, #596]	; (6964 <littlefs_mount+0x32c>)
    6710:	f7fc fa52 	bl	2bb8 <log_1>
		ret = -ENODEV;
    6714:	f06f 0712 	mvn.w	r7, #18
		fs->area = NULL;
    6718:	2300      	movs	r3, #0
    671a:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
	return z_impl_k_mutex_unlock(mutex);
    671e:	4630      	mov	r0, r6
    6720:	f009 f81a 	bl	f758 <z_impl_k_mutex_unlock>
}
    6724:	4638      	mov	r0, r7
    6726:	b00d      	add	sp, #52	; 0x34
    6728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    672c:	4b89      	ldr	r3, [pc, #548]	; (6954 <littlefs_mount+0x31c>)
    672e:	4a8a      	ldr	r2, [pc, #552]	; (6958 <littlefs_mount+0x320>)
    6730:	1a9b      	subs	r3, r3, r2
    6732:	08db      	lsrs	r3, r3, #3
		LOG_ERR("can't get flash device: %s", log_strdup(fs->area->fa_dev_name));
    6734:	f04f 0500 	mov.w	r5, #0
    6738:	2201      	movs	r2, #1
    673a:	f362 0502 	bfi	r5, r2, #0, #3
    673e:	f36f 05c5 	bfc	r5, #3, #3
    6742:	f363 158f 	bfi	r5, r3, #6, #10
    6746:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    674a:	68d8      	ldr	r0, [r3, #12]
    674c:	f7fc f8ba 	bl	28c4 <z_log_strdup>
    6750:	4601      	mov	r1, r0
    6752:	462a      	mov	r2, r5
    6754:	4884      	ldr	r0, [pc, #528]	; (6968 <littlefs_mount+0x330>)
    6756:	f7fc fa2f 	bl	2bb8 <log_1>
		ret = -ENODEV;
    675a:	f06f 0712 	mvn.w	r7, #18
    675e:	e7db      	b.n	6718 <littlefs_mount+0xe0>
		block_size = get_block_size(fs->area);
    6760:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
    6764:	f7ff ff56 	bl	6614 <get_block_size>
    6768:	4607      	mov	r7, r0
    676a:	e7b4      	b.n	66d6 <littlefs_mount+0x9e>
		block_cycles = CONFIG_FS_LITTLEFS_BLOCK_CYCLES;
    676c:	f44f 7b00 	mov.w	fp, #512	; 0x200
	lfs_size_t cache_size = lcp->cache_size;
    6770:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6772:	9302      	str	r3, [sp, #8]
	if (cache_size == 0) {
    6774:	b90b      	cbnz	r3, 677a <littlefs_mount+0x142>
		cache_size = CONFIG_FS_LITTLEFS_CACHE_SIZE;
    6776:	2340      	movs	r3, #64	; 0x40
    6778:	9302      	str	r3, [sp, #8]
	lfs_size_t lookahead_size = lcp->lookahead_size;
    677a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    677c:	9301      	str	r3, [sp, #4]
	if (lookahead_size == 0) {
    677e:	b90b      	cbnz	r3, 6784 <littlefs_mount+0x14c>
		lookahead_size = CONFIG_FS_LITTLEFS_LOOKAHEAD_SIZE;
    6780:	2320      	movs	r3, #32
    6782:	9301      	str	r3, [sp, #4]
	lfs_size_t block_count = fs->area->fa_size / block_size;
    6784:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    6788:	689b      	ldr	r3, [r3, #8]
    678a:	fbb3 f3f7 	udiv	r3, r3, r7
    678e:	9303      	str	r3, [sp, #12]
    6790:	4b70      	ldr	r3, [pc, #448]	; (6954 <littlefs_mount+0x31c>)
    6792:	4a71      	ldr	r2, [pc, #452]	; (6958 <littlefs_mount+0x320>)
    6794:	1a9b      	subs	r3, r3, r2
    6796:	08da      	lsrs	r2, r3, #3
	LOG_INF("FS at %s:0x%x is %u 0x%x-byte blocks with %u cycle",
    6798:	f04f 0a00 	mov.w	sl, #0
    679c:	2103      	movs	r1, #3
    679e:	f361 0a02 	bfi	sl, r1, #0, #3
    67a2:	f36f 0ac5 	bfc	sl, #3, #3
    67a6:	9205      	str	r2, [sp, #20]
    67a8:	f362 1a8f 	bfi	sl, r2, #6, #10
    67ac:	9804      	ldr	r0, [sp, #16]
    67ae:	6800      	ldr	r0, [r0, #0]
    67b0:	f7fc f888 	bl	28c4 <z_log_strdup>
    67b4:	9007      	str	r0, [sp, #28]
    67b6:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    67ba:	685b      	ldr	r3, [r3, #4]
    67bc:	9308      	str	r3, [sp, #32]
    67be:	9b03      	ldr	r3, [sp, #12]
    67c0:	9309      	str	r3, [sp, #36]	; 0x24
    67c2:	970a      	str	r7, [sp, #40]	; 0x28
    67c4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    67c8:	4653      	mov	r3, sl
    67ca:	2205      	movs	r2, #5
    67cc:	f10d 0c1c 	add.w	ip, sp, #28
    67d0:	4661      	mov	r1, ip
    67d2:	4866      	ldr	r0, [pc, #408]	; (696c <littlefs_mount+0x334>)
    67d4:	f7fc fa62 	bl	2c9c <log_n>
	LOG_INF("sizes: rd %u ; pr %u ; ca %u ; la %u",
    67d8:	f04f 0300 	mov.w	r3, #0
    67dc:	2003      	movs	r0, #3
    67de:	f360 0302 	bfi	r3, r0, #0, #3
    67e2:	f36f 03c5 	bfc	r3, #3, #3
    67e6:	9905      	ldr	r1, [sp, #20]
    67e8:	f361 138f 	bfi	r3, r1, #6, #10
    67ec:	f8cd 901c 	str.w	r9, [sp, #28]
    67f0:	f8cd 8020 	str.w	r8, [sp, #32]
    67f4:	9a02      	ldr	r2, [sp, #8]
    67f6:	9209      	str	r2, [sp, #36]	; 0x24
    67f8:	9901      	ldr	r1, [sp, #4]
    67fa:	910a      	str	r1, [sp, #40]	; 0x28
    67fc:	2204      	movs	r2, #4
    67fe:	a807      	add	r0, sp, #28
    6800:	4601      	mov	r1, r0
    6802:	485b      	ldr	r0, [pc, #364]	; (6970 <littlefs_mount+0x338>)
    6804:	f7fc fa4a 	bl	2c9c <log_n>
	lcp->context = (void *)fs->area;
    6808:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    680c:	6023      	str	r3, [r4, #0]
	lcp->read = lfs_api_read;
    680e:	4b59      	ldr	r3, [pc, #356]	; (6974 <littlefs_mount+0x33c>)
    6810:	6063      	str	r3, [r4, #4]
	lcp->prog = lfs_api_prog;
    6812:	4b59      	ldr	r3, [pc, #356]	; (6978 <littlefs_mount+0x340>)
    6814:	60a3      	str	r3, [r4, #8]
	lcp->erase = lfs_api_erase;
    6816:	4b59      	ldr	r3, [pc, #356]	; (697c <littlefs_mount+0x344>)
    6818:	60e3      	str	r3, [r4, #12]
	lcp->sync = lfs_api_sync;
    681a:	4b59      	ldr	r3, [pc, #356]	; (6980 <littlefs_mount+0x348>)
    681c:	6123      	str	r3, [r4, #16]
	lcp->read_size = read_size;
    681e:	f8c4 9014 	str.w	r9, [r4, #20]
	lcp->prog_size = prog_size;
    6822:	f8c4 8018 	str.w	r8, [r4, #24]
	lcp->block_size = block_size;
    6826:	61e7      	str	r7, [r4, #28]
	lcp->block_count = block_count;
    6828:	9b03      	ldr	r3, [sp, #12]
    682a:	6223      	str	r3, [r4, #32]
	lcp->block_cycles = block_cycles;
    682c:	f8c4 b024 	str.w	fp, [r4, #36]	; 0x24
	lcp->cache_size = cache_size;
    6830:	9a02      	ldr	r2, [sp, #8]
    6832:	62a2      	str	r2, [r4, #40]	; 0x28
	lcp->lookahead_size = lookahead_size;
    6834:	9901      	ldr	r1, [sp, #4]
    6836:	62e1      	str	r1, [r4, #44]	; 0x2c
	ret = lfs_mount(&fs->lfs, &fs->cfg);
    6838:	f104 0870 	add.w	r8, r4, #112	; 0x70
    683c:	4621      	mov	r1, r4
    683e:	4640      	mov	r0, r8
    6840:	f006 fce8 	bl	d214 <lfs_mount>
	if (ret < 0 &&
    6844:	1e07      	subs	r7, r0, #0
    6846:	da04      	bge.n	6852 <littlefs_mount+0x21a>
	    (mountp->flags & FS_MOUNT_FLAG_NO_FORMAT) == 0) {
    6848:	f895 3020 	ldrb.w	r3, [r5, #32]
	if (ret < 0 &&
    684c:	f013 0f01 	tst.w	r3, #1
    6850:	d018      	beq.n	6884 <littlefs_mount+0x24c>
    6852:	4b40      	ldr	r3, [pc, #256]	; (6954 <littlefs_mount+0x31c>)
    6854:	4a40      	ldr	r2, [pc, #256]	; (6958 <littlefs_mount+0x320>)
    6856:	1a9b      	subs	r3, r3, r2
    6858:	08db      	lsrs	r3, r3, #3
	LOG_INF("%s mounted", log_strdup(mountp->mnt_point));
    685a:	f04f 0800 	mov.w	r8, #0
    685e:	2203      	movs	r2, #3
    6860:	f362 0802 	bfi	r8, r2, #0, #3
    6864:	f36f 08c5 	bfc	r8, #3, #3
    6868:	f363 188f 	bfi	r8, r3, #6, #10
    686c:	68e8      	ldr	r0, [r5, #12]
    686e:	f7fc f829 	bl	28c4 <z_log_strdup>
    6872:	4601      	mov	r1, r0
    6874:	4642      	mov	r2, r8
    6876:	4843      	ldr	r0, [pc, #268]	; (6984 <littlefs_mount+0x34c>)
    6878:	f7fc f99e 	bl	2bb8 <log_1>
	if (ret < 0) {
    687c:	2f00      	cmp	r7, #0
    687e:	f6bf af4e 	bge.w	671e <littlefs_mount+0xe6>
    6882:	e749      	b.n	6718 <littlefs_mount+0xe0>
    6884:	4b33      	ldr	r3, [pc, #204]	; (6954 <littlefs_mount+0x31c>)
    6886:	4a34      	ldr	r2, [pc, #208]	; (6958 <littlefs_mount+0x320>)
    6888:	1a9b      	subs	r3, r3, r2
    688a:	08db      	lsrs	r3, r3, #3
		LOG_WRN("can't mount (LFS %d); formatting", ret);
    688c:	f04f 0200 	mov.w	r2, #0
    6890:	2102      	movs	r1, #2
    6892:	f361 0202 	bfi	r2, r1, #0, #3
    6896:	f36f 02c5 	bfc	r2, #3, #3
    689a:	f363 128f 	bfi	r2, r3, #6, #10
    689e:	4639      	mov	r1, r7
    68a0:	4839      	ldr	r0, [pc, #228]	; (6988 <littlefs_mount+0x350>)
    68a2:	f7fc f989 	bl	2bb8 <log_1>
		if ((mountp->flags & FS_MOUNT_FLAG_READ_ONLY) == 0) {
    68a6:	f895 3020 	ldrb.w	r3, [r5, #32]
    68aa:	f013 0f02 	tst.w	r3, #2
    68ae:	d137      	bne.n	6920 <littlefs_mount+0x2e8>
			ret = lfs_format(&fs->lfs, &fs->cfg);
    68b0:	4621      	mov	r1, r4
    68b2:	4640      	mov	r0, r8
    68b4:	f008 fa20 	bl	ecf8 <lfs_format>
			if (ret < 0) {
    68b8:	1e07      	subs	r7, r0, #0
    68ba:	db1b      	blt.n	68f4 <littlefs_mount+0x2bc>
		ret = lfs_mount(&fs->lfs, &fs->cfg);
    68bc:	4621      	mov	r1, r4
    68be:	4640      	mov	r0, r8
    68c0:	f006 fca8 	bl	d214 <lfs_mount>
		if (ret < 0) {
    68c4:	1e07      	subs	r7, r0, #0
    68c6:	dac4      	bge.n	6852 <littlefs_mount+0x21a>
    68c8:	4b22      	ldr	r3, [pc, #136]	; (6954 <littlefs_mount+0x31c>)
    68ca:	4a23      	ldr	r2, [pc, #140]	; (6958 <littlefs_mount+0x320>)
    68cc:	1a9b      	subs	r3, r3, r2
    68ce:	08db      	lsrs	r3, r3, #3
			LOG_ERR("remount after format failed (LFS %d)", ret);
    68d0:	f04f 0200 	mov.w	r2, #0
    68d4:	2101      	movs	r1, #1
    68d6:	f361 0202 	bfi	r2, r1, #0, #3
    68da:	f36f 02c5 	bfc	r2, #3, #3
    68de:	f363 128f 	bfi	r2, r3, #6, #10
    68e2:	4639      	mov	r1, r7
    68e4:	4829      	ldr	r0, [pc, #164]	; (698c <littlefs_mount+0x354>)
    68e6:	f7fc f967 	bl	2bb8 <log_1>
			ret = lfs_to_errno(ret);
    68ea:	4638      	mov	r0, r7
    68ec:	f00c f97b 	bl	12be6 <lfs_to_errno>
    68f0:	4607      	mov	r7, r0
			goto out;
    68f2:	e7c3      	b.n	687c <littlefs_mount+0x244>
    68f4:	4b17      	ldr	r3, [pc, #92]	; (6954 <littlefs_mount+0x31c>)
    68f6:	4a18      	ldr	r2, [pc, #96]	; (6958 <littlefs_mount+0x320>)
    68f8:	1a9b      	subs	r3, r3, r2
    68fa:	08db      	lsrs	r3, r3, #3
				LOG_ERR("format failed (LFS %d)", ret);
    68fc:	f04f 0200 	mov.w	r2, #0
    6900:	2101      	movs	r1, #1
    6902:	f361 0202 	bfi	r2, r1, #0, #3
    6906:	f36f 02c5 	bfc	r2, #3, #3
    690a:	f363 128f 	bfi	r2, r3, #6, #10
    690e:	4639      	mov	r1, r7
    6910:	481f      	ldr	r0, [pc, #124]	; (6990 <littlefs_mount+0x358>)
    6912:	f7fc f951 	bl	2bb8 <log_1>
				ret = lfs_to_errno(ret);
    6916:	4638      	mov	r0, r7
    6918:	f00c f965 	bl	12be6 <lfs_to_errno>
    691c:	4607      	mov	r7, r0
				goto out;
    691e:	e7ad      	b.n	687c <littlefs_mount+0x244>
    6920:	4b0c      	ldr	r3, [pc, #48]	; (6954 <littlefs_mount+0x31c>)
    6922:	4a0d      	ldr	r2, [pc, #52]	; (6958 <littlefs_mount+0x320>)
    6924:	1a9b      	subs	r3, r3, r2
    6926:	08db      	lsrs	r3, r3, #3
			LOG_ERR("can not format read-only system");
    6928:	f04f 0100 	mov.w	r1, #0
    692c:	2201      	movs	r2, #1
    692e:	f362 0102 	bfi	r1, r2, #0, #3
    6932:	f36f 01c5 	bfc	r1, #3, #3
    6936:	f363 118f 	bfi	r1, r3, #6, #10
    693a:	4816      	ldr	r0, [pc, #88]	; (6994 <littlefs_mount+0x35c>)
    693c:	f7fc f9d0 	bl	2ce0 <log_0>
			ret = -EROFS;
    6940:	f06f 071d 	mvn.w	r7, #29
    6944:	e6e8      	b.n	6718 <littlefs_mount+0xe0>
		ret = -EINVAL;
    6946:	f06f 0715 	mvn.w	r7, #21
    694a:	e6e5      	b.n	6718 <littlefs_mount+0xe0>
		return -EBUSY;
    694c:	f06f 070f 	mvn.w	r7, #15
    6950:	e6e8      	b.n	6724 <littlefs_mount+0xec>
    6952:	bf00      	nop
    6954:	00015ed0 	.word	0x00015ed0
    6958:	00015ea8 	.word	0x00015ea8
    695c:	00015fcc 	.word	0x00015fcc
    6960:	00016dfc 	.word	0x00016dfc
    6964:	00016e28 	.word	0x00016e28
    6968:	00016e44 	.word	0x00016e44
    696c:	00016e60 	.word	0x00016e60
    6970:	00016e94 	.word	0x00016e94
    6974:	00012d75 	.word	0x00012d75
    6978:	00012d5b 	.word	0x00012d5b
    697c:	00012d47 	.word	0x00012d47
    6980:	00012cc5 	.word	0x00012cc5
    6984:	00016f40 	.word	0x00016f40
    6988:	00016ebc 	.word	0x00016ebc
    698c:	00016f18 	.word	0x00016f18
    6990:	00016ee0 	.word	0x00016ee0
    6994:	00016ef8 	.word	0x00016ef8

00006998 <release_file_data>:
{
    6998:	b510      	push	{r4, lr}
    699a:	4604      	mov	r4, r0
	struct lfs_file_data *fdp = fp->filep;
    699c:	6803      	ldr	r3, [r0, #0]
	if (fdp->config.buffer) {
    699e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    69a0:	b11a      	cbz	r2, 69aa <release_file_data+0x12>
	k_heap_free(&file_cache_heap, buf);
    69a2:	6e19      	ldr	r1, [r3, #96]	; 0x60
    69a4:	4804      	ldr	r0, [pc, #16]	; (69b8 <release_file_data+0x20>)
    69a6:	f00e fcb6 	bl	15316 <k_heap_free>
	k_mem_slab_free(&file_data_pool, &fp->filep);
    69aa:	4621      	mov	r1, r4
    69ac:	4803      	ldr	r0, [pc, #12]	; (69bc <release_file_data+0x24>)
    69ae:	f00e fcf4 	bl	1539a <k_mem_slab_free>
	fp->filep = NULL;
    69b2:	2300      	movs	r3, #0
    69b4:	6023      	str	r3, [r4, #0]
}
    69b6:	bd10      	pop	{r4, pc}
    69b8:	200003b0 	.word	0x200003b0
    69bc:	20000364 	.word	0x20000364

000069c0 <littlefs_closedir>:
{
    69c0:	b570      	push	{r4, r5, r6, lr}
    69c2:	4604      	mov	r4, r0
	struct fs_littlefs *fs = dp->mp->fs_data;
    69c4:	6843      	ldr	r3, [r0, #4]
    69c6:	691d      	ldr	r5, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
    69c8:	f105 06ec 	add.w	r6, r5, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
    69cc:	f04f 32ff 	mov.w	r2, #4294967295
    69d0:	f04f 33ff 	mov.w	r3, #4294967295
    69d4:	4630      	mov	r0, r6
    69d6:	f008 fe35 	bl	f644 <z_impl_k_mutex_lock>
	int ret = lfs_dir_close(&fs->lfs, dp->dirp);
    69da:	6821      	ldr	r1, [r4, #0]
    69dc:	f105 0070 	add.w	r0, r5, #112	; 0x70
    69e0:	f00e f8a2 	bl	14b28 <lfs_dir_close>
    69e4:	4605      	mov	r5, r0
	return z_impl_k_mutex_unlock(mutex);
    69e6:	4630      	mov	r0, r6
    69e8:	f008 feb6 	bl	f758 <z_impl_k_mutex_unlock>
	k_mem_slab_free(&lfs_dir_pool, &dp->dirp);
    69ec:	4621      	mov	r1, r4
    69ee:	4803      	ldr	r0, [pc, #12]	; (69fc <littlefs_closedir+0x3c>)
    69f0:	f00e fcd3 	bl	1539a <k_mem_slab_free>
	return lfs_to_errno(ret);
    69f4:	4628      	mov	r0, r5
    69f6:	f00c f8f6 	bl	12be6 <lfs_to_errno>
}
    69fa:	bd70      	pop	{r4, r5, r6, pc}
    69fc:	20000380 	.word	0x20000380

00006a00 <littlefs_unmount>:
{
    6a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a02:	4605      	mov	r5, r0
	struct fs_littlefs *fs = mountp->fs_data;
    6a04:	6904      	ldr	r4, [r0, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
    6a06:	f104 07ec 	add.w	r7, r4, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
    6a0a:	f04f 32ff 	mov.w	r2, #4294967295
    6a0e:	f04f 33ff 	mov.w	r3, #4294967295
    6a12:	4638      	mov	r0, r7
    6a14:	f008 fe16 	bl	f644 <z_impl_k_mutex_lock>
	lfs_unmount(&fs->lfs);
    6a18:	f104 0070 	add.w	r0, r4, #112	; 0x70
    6a1c:	f00e f8b2 	bl	14b84 <lfs_unmount>
	flash_area_close(fs->area);
    6a20:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
    6a24:	f00b fec4 	bl	127b0 <flash_area_close>
	fs->area = NULL;
    6a28:	2600      	movs	r6, #0
    6a2a:	f8c4 60e8 	str.w	r6, [r4, #232]	; 0xe8
	return z_impl_k_mutex_unlock(mutex);
    6a2e:	4638      	mov	r0, r7
    6a30:	f008 fe92 	bl	f758 <z_impl_k_mutex_unlock>
    6a34:	4b0b      	ldr	r3, [pc, #44]	; (6a64 <littlefs_unmount+0x64>)
    6a36:	4a0c      	ldr	r2, [pc, #48]	; (6a68 <littlefs_unmount+0x68>)
    6a38:	1a9b      	subs	r3, r3, r2
    6a3a:	08db      	lsrs	r3, r3, #3
	LOG_INF("%s unmounted", log_strdup(mountp->mnt_point));
    6a3c:	f04f 0400 	mov.w	r4, #0
    6a40:	2203      	movs	r2, #3
    6a42:	f362 0402 	bfi	r4, r2, #0, #3
    6a46:	f366 04c5 	bfi	r4, r6, #3, #3
    6a4a:	f363 148f 	bfi	r4, r3, #6, #10
    6a4e:	68e8      	ldr	r0, [r5, #12]
    6a50:	f7fb ff38 	bl	28c4 <z_log_strdup>
    6a54:	4601      	mov	r1, r0
    6a56:	4622      	mov	r2, r4
    6a58:	4804      	ldr	r0, [pc, #16]	; (6a6c <littlefs_unmount+0x6c>)
    6a5a:	f7fc f8ad 	bl	2bb8 <log_1>
}
    6a5e:	4630      	mov	r0, r6
    6a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6a62:	bf00      	nop
    6a64:	00015ed0 	.word	0x00015ed0
    6a68:	00015ea8 	.word	0x00015ea8
    6a6c:	00016f4c 	.word	0x00016f4c

00006a70 <littlefs_opendir>:
{
    6a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a72:	4604      	mov	r4, r0
    6a74:	460d      	mov	r5, r1
	struct fs_littlefs *fs = dp->mp->fs_data;
    6a76:	6843      	ldr	r3, [r0, #4]
    6a78:	691e      	ldr	r6, [r3, #16]
	if (k_mem_slab_alloc(&lfs_dir_pool, &dp->dirp, K_NO_WAIT) != 0) {
    6a7a:	2200      	movs	r2, #0
    6a7c:	2300      	movs	r3, #0
    6a7e:	4601      	mov	r1, r0
    6a80:	4817      	ldr	r0, [pc, #92]	; (6ae0 <littlefs_opendir+0x70>)
    6a82:	f008 fca5 	bl	f3d0 <k_mem_slab_alloc>
    6a86:	bb10      	cbnz	r0, 6ace <littlefs_opendir+0x5e>
	memset(dp->dirp, 0, sizeof(struct lfs_dir));
    6a88:	2234      	movs	r2, #52	; 0x34
    6a8a:	2100      	movs	r1, #0
    6a8c:	6820      	ldr	r0, [r4, #0]
    6a8e:	f00c f83b 	bl	12b08 <memset>
	path = fs_impl_strip_prefix(path, dp->mp);
    6a92:	6861      	ldr	r1, [r4, #4]
    6a94:	4628      	mov	r0, r5
    6a96:	f7ff fda7 	bl	65e8 <fs_impl_strip_prefix>
    6a9a:	4605      	mov	r5, r0
	k_mutex_lock(&fs->mutex, K_FOREVER);
    6a9c:	f106 07ec 	add.w	r7, r6, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
    6aa0:	f04f 32ff 	mov.w	r2, #4294967295
    6aa4:	f04f 33ff 	mov.w	r3, #4294967295
    6aa8:	4638      	mov	r0, r7
    6aaa:	f008 fdcb 	bl	f644 <z_impl_k_mutex_lock>
	int ret = lfs_dir_open(&fs->lfs, dp->dirp, path);
    6aae:	462a      	mov	r2, r5
    6ab0:	6821      	ldr	r1, [r4, #0]
    6ab2:	f106 0070 	add.w	r0, r6, #112	; 0x70
    6ab6:	f006 fb11 	bl	d0dc <lfs_dir_open>
    6aba:	4605      	mov	r5, r0
	return z_impl_k_mutex_unlock(mutex);
    6abc:	4638      	mov	r0, r7
    6abe:	f008 fe4b 	bl	f758 <z_impl_k_mutex_unlock>
	if (ret < 0) {
    6ac2:	2d00      	cmp	r5, #0
    6ac4:	db06      	blt.n	6ad4 <littlefs_opendir+0x64>
	return lfs_to_errno(ret);
    6ac6:	4628      	mov	r0, r5
    6ac8:	f00c f88d 	bl	12be6 <lfs_to_errno>
}
    6acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOMEM;
    6ace:	f06f 000b 	mvn.w	r0, #11
    6ad2:	e7fb      	b.n	6acc <littlefs_opendir+0x5c>
		k_mem_slab_free(&lfs_dir_pool, &dp->dirp);
    6ad4:	4621      	mov	r1, r4
    6ad6:	4802      	ldr	r0, [pc, #8]	; (6ae0 <littlefs_opendir+0x70>)
    6ad8:	f00e fc5f 	bl	1539a <k_mem_slab_free>
    6adc:	e7f3      	b.n	6ac6 <littlefs_opendir+0x56>
    6ade:	bf00      	nop
    6ae0:	20000380 	.word	0x20000380

00006ae4 <littlefs_open>:
{
    6ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6ae8:	b082      	sub	sp, #8
    6aea:	4604      	mov	r4, r0
    6aec:	460e      	mov	r6, r1
	struct fs_littlefs *fs = fp->mp->fs_data;
    6aee:	6843      	ldr	r3, [r0, #4]
    6af0:	691f      	ldr	r7, [r3, #16]
	int flags = lfs_flags_from_zephyr(zflags);
    6af2:	4610      	mov	r0, r2
    6af4:	f00c f8e8 	bl	12cc8 <lfs_flags_from_zephyr>
    6af8:	4605      	mov	r5, r0
	int ret = k_mem_slab_alloc(&file_data_pool, &fp->filep, K_NO_WAIT);
    6afa:	2200      	movs	r2, #0
    6afc:	2300      	movs	r3, #0
    6afe:	4621      	mov	r1, r4
    6b00:	4822      	ldr	r0, [pc, #136]	; (6b8c <littlefs_open+0xa8>)
    6b02:	f008 fc65 	bl	f3d0 <k_mem_slab_alloc>
	if (ret != 0) {
    6b06:	4603      	mov	r3, r0
    6b08:	b118      	cbz	r0, 6b12 <littlefs_open+0x2e>
}
    6b0a:	4618      	mov	r0, r3
    6b0c:	b002      	add	sp, #8
    6b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct lfs_file_data *fdp = fp->filep;
    6b12:	f8d4 8000 	ldr.w	r8, [r4]
	memset(fdp, 0, sizeof(*fdp));
    6b16:	2264      	movs	r2, #100	; 0x64
    6b18:	2100      	movs	r1, #0
    6b1a:	4640      	mov	r0, r8
    6b1c:	f00b fff4 	bl	12b08 <memset>
	fdp->cache_block = fc_allocate(lfs->cfg->cache_size);
    6b20:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
	ret = k_heap_alloc(&file_cache_heap, size, K_NO_WAIT);
    6b24:	2200      	movs	r2, #0
    6b26:	2300      	movs	r3, #0
    6b28:	6a89      	ldr	r1, [r1, #40]	; 0x28
    6b2a:	4819      	ldr	r0, [pc, #100]	; (6b90 <littlefs_open+0xac>)
    6b2c:	f00e fbe8 	bl	15300 <k_heap_alloc>
	fdp->cache_block = fc_allocate(lfs->cfg->cache_size);
    6b30:	f8c8 0060 	str.w	r0, [r8, #96]	; 0x60
	if (fdp->cache_block == NULL) {
    6b34:	b300      	cbz	r0, 6b78 <littlefs_open+0x94>
	fdp->config.buffer = fdp->cache_block;
    6b36:	46c1      	mov	r9, r8
    6b38:	f849 0f54 	str.w	r0, [r9, #84]!
	path = fs_impl_strip_prefix(path, fp->mp);
    6b3c:	6861      	ldr	r1, [r4, #4]
    6b3e:	4630      	mov	r0, r6
    6b40:	f7ff fd52 	bl	65e8 <fs_impl_strip_prefix>
    6b44:	4682      	mov	sl, r0
	k_mutex_lock(&fs->mutex, K_FOREVER);
    6b46:	f107 06ec 	add.w	r6, r7, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
    6b4a:	f04f 32ff 	mov.w	r2, #4294967295
    6b4e:	f04f 33ff 	mov.w	r3, #4294967295
    6b52:	4630      	mov	r0, r6
    6b54:	f008 fd76 	bl	f644 <z_impl_k_mutex_lock>
	ret = lfs_file_opencfg(&fs->lfs, &fdp->file,
    6b58:	f8cd 9000 	str.w	r9, [sp]
    6b5c:	462b      	mov	r3, r5
    6b5e:	4652      	mov	r2, sl
    6b60:	4641      	mov	r1, r8
    6b62:	f107 0070 	add.w	r0, r7, #112	; 0x70
    6b66:	f007 fddb 	bl	e720 <lfs_file_opencfg>
    6b6a:	4605      	mov	r5, r0
	return z_impl_k_mutex_unlock(mutex);
    6b6c:	4630      	mov	r0, r6
    6b6e:	f008 fdf3 	bl	f758 <z_impl_k_mutex_unlock>
	if (ret < 0) {
    6b72:	2d00      	cmp	r5, #0
    6b74:	da05      	bge.n	6b82 <littlefs_open+0x9e>
    6b76:	e001      	b.n	6b7c <littlefs_open+0x98>
		ret = -ENOMEM;
    6b78:	f06f 050b 	mvn.w	r5, #11
		release_file_data(fp);
    6b7c:	4620      	mov	r0, r4
    6b7e:	f7ff ff0b 	bl	6998 <release_file_data>
	return lfs_to_errno(ret);
    6b82:	4628      	mov	r0, r5
    6b84:	f00c f82f 	bl	12be6 <lfs_to_errno>
    6b88:	4603      	mov	r3, r0
    6b8a:	e7be      	b.n	6b0a <littlefs_open+0x26>
    6b8c:	20000364 	.word	0x20000364
    6b90:	200003b0 	.word	0x200003b0

00006b94 <endpoint_ctx>:
	return (uint8_t)ep;
}

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);
    6b94:	f000 037f 	and.w	r3, r0, #127	; 0x7f

	if (NRF_USBD_EPIN_CHECK(ep)) {
    6b98:	b242      	sxtb	r2, r0
    6b9a:	2a00      	cmp	r2, #0
    6b9c:	db12      	blt.n	6bc4 <endpoint_ctx+0x30>
			if (ep_num >= CFG_EPIN_CNT) {
				return false;
			}
		}
	} else {
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    6b9e:	2b08      	cmp	r3, #8
    6ba0:	d002      	beq.n	6ba8 <endpoint_ctx+0x14>
			if (CFG_EP_ISOOUT_CNT == 0) {
				return false;
			}
		} else {
			if (ep_num >= CFG_EPOUT_CNT) {
    6ba2:	f010 0f78 	tst.w	r0, #120	; 0x78
    6ba6:	d11d      	bne.n	6be4 <endpoint_ctx+0x50>
	if (!ep_is_valid(ep)) {
		return NULL;
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);
    6ba8:	f000 030f 	and.w	r3, r0, #15

	if (NRF_USBD_EPIN_CHECK(ep)) {
    6bac:	2a00      	cmp	r2, #0
    6bae:	db10      	blt.n	6bd2 <endpoint_ctx+0x3e>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    6bb0:	f010 0f08 	tst.w	r0, #8
    6bb4:	d11a      	bne.n	6bec <endpoint_ctx+0x58>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
					    CFG_EP_ISOIN_CNT +
    6bb6:	3309      	adds	r3, #9
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    6bb8:	015b      	lsls	r3, r3, #5
    6bba:	3348      	adds	r3, #72	; 0x48
    6bbc:	480c      	ldr	r0, [pc, #48]	; (6bf0 <endpoint_ctx+0x5c>)
    6bbe:	4403      	add	r3, r0
    6bc0:	1d18      	adds	r0, r3, #4
    6bc2:	4770      	bx	lr
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    6bc4:	2b08      	cmp	r3, #8
    6bc6:	d0ef      	beq.n	6ba8 <endpoint_ctx+0x14>
			if (ep_num >= CFG_EPIN_CNT) {
    6bc8:	f010 0f78 	tst.w	r0, #120	; 0x78
    6bcc:	d0ec      	beq.n	6ba8 <endpoint_ctx+0x14>
		return NULL;
    6bce:	2000      	movs	r0, #0
    6bd0:	4770      	bx	lr
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    6bd2:	f010 0f08 	tst.w	r0, #8
    6bd6:	d107      	bne.n	6be8 <endpoint_ctx+0x54>
			return &ctx->ep_ctx[ep_num];
    6bd8:	015b      	lsls	r3, r3, #5
    6bda:	3348      	adds	r3, #72	; 0x48
    6bdc:	4804      	ldr	r0, [pc, #16]	; (6bf0 <endpoint_ctx+0x5c>)
    6bde:	4403      	add	r3, r0
    6be0:	1d18      	adds	r0, r3, #4
    6be2:	4770      	bx	lr
		return NULL;
    6be4:	2000      	movs	r0, #0
    6be6:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    6be8:	4802      	ldr	r0, [pc, #8]	; (6bf4 <endpoint_ctx+0x60>)
    6bea:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    6bec:	4802      	ldr	r0, [pc, #8]	; (6bf8 <endpoint_ctx+0x64>)
					    ep_num];
		}
	}

	return NULL;
}
    6bee:	4770      	bx	lr
    6bf0:	200023f0 	.word	0x200023f0
    6bf4:	2000253c 	.word	0x2000253c
    6bf8:	2000265c 	.word	0x2000265c

00006bfc <eps_ctx_init>:
 * Endpoint buffers are allocated during the first call of this function.
 * This function may also be called again on every USB reset event
 * to reinitialize the state of all endpoints.
 */
static int eps_ctx_init(void)
{
    6bfc:	b510      	push	{r4, lr}
	struct nrf_usbd_ep_ctx *ep_ctx;
	uint32_t i;

	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    6bfe:	2400      	movs	r4, #0
    6c00:	e005      	b.n	6c0e <eps_ctx_init+0x12>
		ep_ctx = in_endpoint_ctx(i);
    6c02:	b2e0      	uxtb	r0, r4
    6c04:	f00c fa77 	bl	130f6 <in_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);
		ep_ctx_reset(ep_ctx);
    6c08:	f00c fa7f 	bl	1310a <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    6c0c:	3401      	adds	r4, #1
    6c0e:	2c07      	cmp	r4, #7
    6c10:	d9f7      	bls.n	6c02 <eps_ctx_init+0x6>
	}

	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    6c12:	2400      	movs	r4, #0
    6c14:	e006      	b.n	6c24 <eps_ctx_init+0x28>
		ep_ctx = out_endpoint_ctx(i);
		__ASSERT_NO_MSG(ep_ctx);

		if (!ep_ctx->buf.block.data) {
			ep_ctx->buf.block.data = ep_out_bufs[i];
    6c16:	4b10      	ldr	r3, [pc, #64]	; (6c58 <eps_ctx_init+0x5c>)
    6c18:	eb03 1384 	add.w	r3, r3, r4, lsl #6
    6c1c:	6103      	str	r3, [r0, #16]
		}

		ep_ctx_reset(ep_ctx);
    6c1e:	f00c fa74 	bl	1310a <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    6c22:	3401      	adds	r4, #1
    6c24:	2c07      	cmp	r4, #7
    6c26:	d806      	bhi.n	6c36 <eps_ctx_init+0x3a>
		ep_ctx = out_endpoint_ctx(i);
    6c28:	b2e0      	uxtb	r0, r4
    6c2a:	f00c fa6a 	bl	13102 <out_endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    6c2e:	6903      	ldr	r3, [r0, #16]
    6c30:	2b00      	cmp	r3, #0
    6c32:	d1f4      	bne.n	6c1e <eps_ctx_init+0x22>
    6c34:	e7ef      	b.n	6c16 <eps_ctx_init+0x1a>
	}

	if (CFG_EP_ISOIN_CNT) {
		ep_ctx = in_endpoint_ctx(NRF_USBD_EPIN(8));
    6c36:	2088      	movs	r0, #136	; 0x88
    6c38:	f00c fa5d 	bl	130f6 <in_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);
		ep_ctx_reset(ep_ctx);
    6c3c:	f00c fa65 	bl	1310a <ep_ctx_reset>
	}

	if (CFG_EP_ISOOUT_CNT) {
		BUILD_ASSERT(CFG_EP_ISOOUT_CNT <= 1);

		ep_ctx = out_endpoint_ctx(NRF_USBD_EPOUT(8));
    6c40:	2008      	movs	r0, #8
    6c42:	f00c fa5e 	bl	13102 <out_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);

		if (!ep_ctx->buf.block.data) {
    6c46:	6903      	ldr	r3, [r0, #16]
    6c48:	b11b      	cbz	r3, 6c52 <eps_ctx_init+0x56>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
		}

		ep_ctx_reset(ep_ctx);
    6c4a:	f00c fa5e 	bl	1310a <ep_ctx_reset>
	}

	return 0;
}
    6c4e:	2000      	movs	r0, #0
    6c50:	bd10      	pop	{r4, pc}
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
    6c52:	4b02      	ldr	r3, [pc, #8]	; (6c5c <eps_ctx_init+0x60>)
    6c54:	6103      	str	r3, [r0, #16]
    6c56:	e7f8      	b.n	6c4a <eps_ctx_init+0x4e>
    6c58:	200021f0 	.word	0x200021f0
    6c5c:	20001df0 	.word	0x20001df0

00006c60 <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
    6c60:	b510      	push	{r4, lr}
    6c62:	b082      	sub	sp, #8
	};

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
    6c64:	480b      	ldr	r0, [pc, #44]	; (6c94 <usb_init+0x34>)
    6c66:	f003 f9f1 	bl	a04c <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);
    6c6a:	480b      	ldr	r0, [pc, #44]	; (6c98 <usb_init+0x38>)
    6c6c:	f003 fa32 	bl	a0d4 <nrfx_power_usbevt_init>

	k_work_queue_start(&usbd_work_queue,
    6c70:	2400      	movs	r4, #0
    6c72:	9400      	str	r4, [sp, #0]
    6c74:	f04f 33ff 	mov.w	r3, #4294967295
    6c78:	f44f 6280 	mov.w	r2, #1024	; 0x400
    6c7c:	4907      	ldr	r1, [pc, #28]	; (6c9c <usb_init+0x3c>)
    6c7e:	4808      	ldr	r0, [pc, #32]	; (6ca0 <usb_init+0x40>)
    6c80:	f008 ff58 	bl	fb34 <k_work_queue_start>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_work_init(&ctx->usb_work, usbd_work_handler);
    6c84:	4907      	ldr	r1, [pc, #28]	; (6ca4 <usb_init+0x44>)
    6c86:	4808      	ldr	r0, [pc, #32]	; (6ca8 <usb_init+0x48>)
    6c88:	f00e fcc5 	bl	15616 <k_work_init>

	return 0;
}
    6c8c:	4620      	mov	r0, r4
    6c8e:	b002      	add	sp, #8
    6c90:	bd10      	pop	{r4, pc}
    6c92:	bf00      	nop
    6c94:	000171d0 	.word	0x000171d0
    6c98:	000171d4 	.word	0x000171d4
    6c9c:	20003880 	.word	0x20003880
    6ca0:	200006f8 	.word	0x200006f8
    6ca4:	00006f21 	.word	0x00006f21
    6ca8:	20002418 	.word	0x20002418

00006cac <submit_dc_power_event>:
{
    6cac:	b530      	push	{r4, r5, lr}
    6cae:	b083      	sub	sp, #12
    6cb0:	4605      	mov	r5, r0
	if (k_mem_slab_alloc(&fifo_elem_slab,
    6cb2:	2200      	movs	r2, #0
    6cb4:	2300      	movs	r3, #0
    6cb6:	a901      	add	r1, sp, #4
    6cb8:	482e      	ldr	r0, [pc, #184]	; (6d74 <submit_dc_power_event+0xc8>)
    6cba:	f008 fb89 	bl	f3d0 <k_mem_slab_alloc>
    6cbe:	b980      	cbnz	r0, 6ce2 <submit_dc_power_event+0x36>
	ev = (struct usbd_event *)block.data;
    6cc0:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    6cc2:	6064      	str	r4, [r4, #4]
	if (!ev) {
    6cc4:	b15c      	cbz	r4, 6cde <submit_dc_power_event+0x32>
	ev->evt_type = USBD_EVT_POWER;
    6cc6:	2300      	movs	r3, #0
    6cc8:	7423      	strb	r3, [r4, #16]
	ev->evt.pwr_evt.state = state;
    6cca:	7225      	strb	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    6ccc:	4621      	mov	r1, r4
    6cce:	482a      	ldr	r0, [pc, #168]	; (6d78 <submit_dc_power_event+0xcc>)
    6cd0:	f00e fc86 	bl	155e0 <k_queue_append>
	if (usbd_ctx.attached) {
    6cd4:	4b29      	ldr	r3, [pc, #164]	; (6d7c <submit_dc_power_event+0xd0>)
    6cd6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    6cda:	2b00      	cmp	r3, #0
    6cdc:	d144      	bne.n	6d68 <submit_dc_power_event+0xbc>
}
    6cde:	b003      	add	sp, #12
    6ce0:	bd30      	pop	{r4, r5, pc}
    6ce2:	4b27      	ldr	r3, [pc, #156]	; (6d80 <submit_dc_power_event+0xd4>)
    6ce4:	4a27      	ldr	r2, [pc, #156]	; (6d84 <submit_dc_power_event+0xd8>)
    6ce6:	1a9b      	subs	r3, r3, r2
    6ce8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    6cea:	f04f 0100 	mov.w	r1, #0
    6cee:	2201      	movs	r2, #1
    6cf0:	f362 0102 	bfi	r1, r2, #0, #3
    6cf4:	f36f 01c5 	bfc	r1, #3, #3
    6cf8:	f363 118f 	bfi	r1, r3, #6, #10
    6cfc:	4822      	ldr	r0, [pc, #136]	; (6d88 <submit_dc_power_event+0xdc>)
    6cfe:	f7fb ffef 	bl	2ce0 <log_0>
static inline void usbd_evt_flush(void)
    6d02:	e004      	b.n	6d0e <submit_dc_power_event+0x62>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    6d04:	1d01      	adds	r1, r0, #4
    6d06:	481b      	ldr	r0, [pc, #108]	; (6d74 <submit_dc_power_event+0xc8>)
    6d08:	f00e fb47 	bl	1539a <k_mem_slab_free>
	} while (ev != NULL);
    6d0c:	b144      	cbz	r4, 6d20 <submit_dc_power_event+0x74>
	return z_impl_k_queue_get(queue, timeout);
    6d0e:	2200      	movs	r2, #0
    6d10:	2300      	movs	r3, #0
    6d12:	4819      	ldr	r0, [pc, #100]	; (6d78 <submit_dc_power_event+0xcc>)
    6d14:	f008 fd64 	bl	f7e0 <z_impl_k_queue_get>
		if (ev) {
    6d18:	4604      	mov	r4, r0
    6d1a:	2800      	cmp	r0, #0
    6d1c:	d1f2      	bne.n	6d04 <submit_dc_power_event+0x58>
    6d1e:	e7f5      	b.n	6d0c <submit_dc_power_event+0x60>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    6d20:	2200      	movs	r2, #0
    6d22:	2300      	movs	r3, #0
    6d24:	a901      	add	r1, sp, #4
    6d26:	4813      	ldr	r0, [pc, #76]	; (6d74 <submit_dc_power_event+0xc8>)
    6d28:	f008 fb52 	bl	f3d0 <k_mem_slab_alloc>
    6d2c:	b180      	cbz	r0, 6d50 <submit_dc_power_event+0xa4>
    6d2e:	4b14      	ldr	r3, [pc, #80]	; (6d80 <submit_dc_power_event+0xd4>)
    6d30:	4a14      	ldr	r2, [pc, #80]	; (6d84 <submit_dc_power_event+0xd8>)
    6d32:	1a9b      	subs	r3, r3, r2
    6d34:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    6d36:	f04f 0100 	mov.w	r1, #0
    6d3a:	2201      	movs	r2, #1
    6d3c:	f362 0102 	bfi	r1, r2, #0, #3
    6d40:	f36f 01c5 	bfc	r1, #3, #3
    6d44:	f363 118f 	bfi	r1, r3, #6, #10
    6d48:	4810      	ldr	r0, [pc, #64]	; (6d8c <submit_dc_power_event+0xe0>)
    6d4a:	f7fb ffc9 	bl	2ce0 <log_0>
			return NULL;
    6d4e:	e7b9      	b.n	6cc4 <submit_dc_power_event+0x18>
		ev = (struct usbd_event *)block.data;
    6d50:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    6d52:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    6d54:	2304      	movs	r3, #4
    6d56:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    6d58:	4807      	ldr	r0, [pc, #28]	; (6d78 <submit_dc_power_event+0xcc>)
    6d5a:	f00e fc41 	bl	155e0 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    6d5e:	490c      	ldr	r1, [pc, #48]	; (6d90 <submit_dc_power_event+0xe4>)
    6d60:	480c      	ldr	r0, [pc, #48]	; (6d94 <submit_dc_power_event+0xe8>)
    6d62:	f00e fc5e 	bl	15622 <k_work_submit_to_queue>
		return NULL;
    6d66:	e7ad      	b.n	6cc4 <submit_dc_power_event+0x18>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    6d68:	4909      	ldr	r1, [pc, #36]	; (6d90 <submit_dc_power_event+0xe4>)
    6d6a:	480a      	ldr	r0, [pc, #40]	; (6d94 <submit_dc_power_event+0xe8>)
    6d6c:	f00e fc59 	bl	15622 <k_work_submit_to_queue>
}
    6d70:	e7b5      	b.n	6cde <submit_dc_power_event+0x32>
    6d72:	bf00      	nop
    6d74:	20000348 	.word	0x20000348
    6d78:	2000044c 	.word	0x2000044c
    6d7c:	200023f0 	.word	0x200023f0
    6d80:	00015f20 	.word	0x00015f20
    6d84:	00015ea8 	.word	0x00015ea8
    6d88:	00016fb0 	.word	0x00016fb0
    6d8c:	00016fd0 	.word	0x00016fd0
    6d90:	20002418 	.word	0x20002418
    6d94:	200006f8 	.word	0x200006f8

00006d98 <usb_dc_power_event_handler>:
{
    6d98:	b508      	push	{r3, lr}
	switch (event) {
    6d9a:	2801      	cmp	r0, #1
    6d9c:	d014      	beq.n	6dc8 <usb_dc_power_event_handler+0x30>
    6d9e:	2802      	cmp	r0, #2
    6da0:	d015      	beq.n	6dce <usb_dc_power_event_handler+0x36>
    6da2:	b198      	cbz	r0, 6dcc <usb_dc_power_event_handler+0x34>
    6da4:	4b0b      	ldr	r3, [pc, #44]	; (6dd4 <usb_dc_power_event_handler+0x3c>)
    6da6:	4a0c      	ldr	r2, [pc, #48]	; (6dd8 <usb_dc_power_event_handler+0x40>)
    6da8:	1a9b      	subs	r3, r3, r2
    6daa:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unknown USB power event %d", event);
    6dac:	f04f 0200 	mov.w	r2, #0
    6db0:	2101      	movs	r1, #1
    6db2:	f361 0202 	bfi	r2, r1, #0, #3
    6db6:	f36f 02c5 	bfc	r2, #3, #3
    6dba:	f363 128f 	bfi	r2, r3, #6, #10
    6dbe:	4601      	mov	r1, r0
    6dc0:	4806      	ldr	r0, [pc, #24]	; (6ddc <usb_dc_power_event_handler+0x44>)
    6dc2:	f7fb fef9 	bl	2bb8 <log_1>
    6dc6:	e004      	b.n	6dd2 <usb_dc_power_event_handler+0x3a>
		new_state = USBD_DETACHED;
    6dc8:	2000      	movs	r0, #0
    6dca:	e000      	b.n	6dce <usb_dc_power_event_handler+0x36>
	switch (event) {
    6dcc:	2001      	movs	r0, #1
	submit_dc_power_event(new_state);
    6dce:	f7ff ff6d 	bl	6cac <submit_dc_power_event>
}
    6dd2:	bd08      	pop	{r3, pc}
    6dd4:	00015f20 	.word	0x00015f20
    6dd8:	00015ea8 	.word	0x00015ea8
    6ddc:	00016fec 	.word	0x00016fec

00006de0 <usbd_sof_trigger_iso_read>:
{
    6de0:	b530      	push	{r4, r5, lr}
    6de2:	b083      	sub	sp, #12
	ep_ctx = endpoint_ctx(NRFX_USBD_EPOUT8);
    6de4:	2008      	movs	r0, #8
    6de6:	f7ff fed5 	bl	6b94 <endpoint_ctx>
	if (!ep_ctx) {
    6dea:	b120      	cbz	r0, 6df6 <usbd_sof_trigger_iso_read+0x16>
    6dec:	4605      	mov	r5, r0
	if (ep_ctx->cfg.en) {
    6dee:	7a03      	ldrb	r3, [r0, #8]
    6df0:	b993      	cbnz	r3, 6e18 <usbd_sof_trigger_iso_read+0x38>
}
    6df2:	b003      	add	sp, #12
    6df4:	bd30      	pop	{r4, r5, pc}
    6df6:	4b40      	ldr	r3, [pc, #256]	; (6ef8 <usbd_sof_trigger_iso_read+0x118>)
    6df8:	4a40      	ldr	r2, [pc, #256]	; (6efc <usbd_sof_trigger_iso_read+0x11c>)
    6dfa:	1a9b      	subs	r3, r3, r2
    6dfc:	08db      	lsrs	r3, r3, #3
		LOG_ERR("There is no ISO ep");
    6dfe:	f04f 0100 	mov.w	r1, #0
    6e02:	2201      	movs	r2, #1
    6e04:	f362 0102 	bfi	r1, r2, #0, #3
    6e08:	f36f 01c5 	bfc	r1, #3, #3
    6e0c:	f363 118f 	bfi	r1, r3, #6, #10
    6e10:	483b      	ldr	r0, [pc, #236]	; (6f00 <usbd_sof_trigger_iso_read+0x120>)
    6e12:	f7fb ff65 	bl	2ce0 <log_0>
		return;
    6e16:	e7ec      	b.n	6df2 <usbd_sof_trigger_iso_read+0x12>
		ep_ctx->read_pending = true;
    6e18:	2301      	movs	r3, #1
    6e1a:	7743      	strb	r3, [r0, #29]
		ep_ctx->read_complete = true;
    6e1c:	7703      	strb	r3, [r0, #28]
	if (k_mem_slab_alloc(&fifo_elem_slab,
    6e1e:	2200      	movs	r2, #0
    6e20:	2300      	movs	r3, #0
    6e22:	a901      	add	r1, sp, #4
    6e24:	4837      	ldr	r0, [pc, #220]	; (6f04 <usbd_sof_trigger_iso_read+0x124>)
    6e26:	f008 fad3 	bl	f3d0 <k_mem_slab_alloc>
    6e2a:	b980      	cbnz	r0, 6e4e <usbd_sof_trigger_iso_read+0x6e>
	ev = (struct usbd_event *)block.data;
    6e2c:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    6e2e:	6064      	str	r4, [r4, #4]
		if (!ev) {
    6e30:	2c00      	cmp	r4, #0
    6e32:	d04f      	beq.n	6ed4 <usbd_sof_trigger_iso_read+0xf4>
		ev->evt_type = USBD_EVT_EP;
    6e34:	2301      	movs	r3, #1
    6e36:	7423      	strb	r3, [r4, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    6e38:	7323      	strb	r3, [r4, #12]
		ev->evt.ep_evt.ep = ep_ctx;
    6e3a:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    6e3c:	4621      	mov	r1, r4
    6e3e:	4832      	ldr	r0, [pc, #200]	; (6f08 <usbd_sof_trigger_iso_read+0x128>)
    6e40:	f00e fbce 	bl	155e0 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    6e44:	4931      	ldr	r1, [pc, #196]	; (6f0c <usbd_sof_trigger_iso_read+0x12c>)
    6e46:	4832      	ldr	r0, [pc, #200]	; (6f10 <usbd_sof_trigger_iso_read+0x130>)
    6e48:	f00e fbeb 	bl	15622 <k_work_submit_to_queue>
}
    6e4c:	e7d1      	b.n	6df2 <usbd_sof_trigger_iso_read+0x12>
    6e4e:	4b2a      	ldr	r3, [pc, #168]	; (6ef8 <usbd_sof_trigger_iso_read+0x118>)
    6e50:	4a2a      	ldr	r2, [pc, #168]	; (6efc <usbd_sof_trigger_iso_read+0x11c>)
    6e52:	1a9b      	subs	r3, r3, r2
    6e54:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    6e56:	f04f 0100 	mov.w	r1, #0
    6e5a:	2201      	movs	r2, #1
    6e5c:	f362 0102 	bfi	r1, r2, #0, #3
    6e60:	f36f 01c5 	bfc	r1, #3, #3
    6e64:	f363 118f 	bfi	r1, r3, #6, #10
    6e68:	482a      	ldr	r0, [pc, #168]	; (6f14 <usbd_sof_trigger_iso_read+0x134>)
    6e6a:	f7fb ff39 	bl	2ce0 <log_0>
static inline void usbd_evt_flush(void)
    6e6e:	e000      	b.n	6e72 <usbd_sof_trigger_iso_read+0x92>
	} while (ev != NULL);
    6e70:	b164      	cbz	r4, 6e8c <usbd_sof_trigger_iso_read+0xac>
    6e72:	2200      	movs	r2, #0
    6e74:	2300      	movs	r3, #0
    6e76:	4824      	ldr	r0, [pc, #144]	; (6f08 <usbd_sof_trigger_iso_read+0x128>)
    6e78:	f008 fcb2 	bl	f7e0 <z_impl_k_queue_get>
		if (ev) {
    6e7c:	4604      	mov	r4, r0
    6e7e:	2800      	cmp	r0, #0
    6e80:	d0f6      	beq.n	6e70 <usbd_sof_trigger_iso_read+0x90>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    6e82:	1d01      	adds	r1, r0, #4
    6e84:	481f      	ldr	r0, [pc, #124]	; (6f04 <usbd_sof_trigger_iso_read+0x124>)
    6e86:	f00e fa88 	bl	1539a <k_mem_slab_free>
}
    6e8a:	e7f1      	b.n	6e70 <usbd_sof_trigger_iso_read+0x90>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    6e8c:	2200      	movs	r2, #0
    6e8e:	2300      	movs	r3, #0
    6e90:	a901      	add	r1, sp, #4
    6e92:	481c      	ldr	r0, [pc, #112]	; (6f04 <usbd_sof_trigger_iso_read+0x124>)
    6e94:	f008 fa9c 	bl	f3d0 <k_mem_slab_alloc>
    6e98:	b180      	cbz	r0, 6ebc <usbd_sof_trigger_iso_read+0xdc>
    6e9a:	4b17      	ldr	r3, [pc, #92]	; (6ef8 <usbd_sof_trigger_iso_read+0x118>)
    6e9c:	4a17      	ldr	r2, [pc, #92]	; (6efc <usbd_sof_trigger_iso_read+0x11c>)
    6e9e:	1a9b      	subs	r3, r3, r2
    6ea0:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    6ea2:	f04f 0100 	mov.w	r1, #0
    6ea6:	2201      	movs	r2, #1
    6ea8:	f362 0102 	bfi	r1, r2, #0, #3
    6eac:	f36f 01c5 	bfc	r1, #3, #3
    6eb0:	f363 118f 	bfi	r1, r3, #6, #10
    6eb4:	4818      	ldr	r0, [pc, #96]	; (6f18 <usbd_sof_trigger_iso_read+0x138>)
    6eb6:	f7fb ff13 	bl	2ce0 <log_0>
			return NULL;
    6eba:	e7b9      	b.n	6e30 <usbd_sof_trigger_iso_read+0x50>
		ev = (struct usbd_event *)block.data;
    6ebc:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    6ebe:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    6ec0:	2304      	movs	r3, #4
    6ec2:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    6ec4:	4810      	ldr	r0, [pc, #64]	; (6f08 <usbd_sof_trigger_iso_read+0x128>)
    6ec6:	f00e fb8b 	bl	155e0 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    6eca:	4910      	ldr	r1, [pc, #64]	; (6f0c <usbd_sof_trigger_iso_read+0x12c>)
    6ecc:	4810      	ldr	r0, [pc, #64]	; (6f10 <usbd_sof_trigger_iso_read+0x130>)
    6ece:	f00e fba8 	bl	15622 <k_work_submit_to_queue>
		return NULL;
    6ed2:	e7ad      	b.n	6e30 <usbd_sof_trigger_iso_read+0x50>
    6ed4:	4b08      	ldr	r3, [pc, #32]	; (6ef8 <usbd_sof_trigger_iso_read+0x118>)
    6ed6:	4a09      	ldr	r2, [pc, #36]	; (6efc <usbd_sof_trigger_iso_read+0x11c>)
    6ed8:	1a9b      	subs	r3, r3, r2
    6eda:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Failed to alloc evt");
    6edc:	f04f 0100 	mov.w	r1, #0
    6ee0:	2201      	movs	r2, #1
    6ee2:	f362 0102 	bfi	r1, r2, #0, #3
    6ee6:	f36f 01c5 	bfc	r1, #3, #3
    6eea:	f363 118f 	bfi	r1, r3, #6, #10
    6eee:	480b      	ldr	r0, [pc, #44]	; (6f1c <usbd_sof_trigger_iso_read+0x13c>)
    6ef0:	f7fb fef6 	bl	2ce0 <log_0>
			return;
    6ef4:	e77d      	b.n	6df2 <usbd_sof_trigger_iso_read+0x12>
    6ef6:	bf00      	nop
    6ef8:	00015f20 	.word	0x00015f20
    6efc:	00015ea8 	.word	0x00015ea8
    6f00:	00017008 	.word	0x00017008
    6f04:	20000348 	.word	0x20000348
    6f08:	2000044c 	.word	0x2000044c
    6f0c:	20002418 	.word	0x20002418
    6f10:	200006f8 	.word	0x200006f8
    6f14:	00016fb0 	.word	0x00016fb0
    6f18:	00016fd0 	.word	0x00016fd0
    6f1c:	0001701c 	.word	0x0001701c

00006f20 <usbd_work_handler>:
{
    6f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6f24:	b085      	sub	sp, #20
    6f26:	4605      	mov	r5, r0
	while ((ev = usbd_evt_get()) != NULL) {
    6f28:	e18f      	b.n	724a <usbd_work_handler+0x32a>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    6f2a:	1d21      	adds	r1, r4, #4
    6f2c:	48b5      	ldr	r0, [pc, #724]	; (7204 <usbd_work_handler+0x2e4>)
    6f2e:	f00e fa34 	bl	1539a <k_mem_slab_free>
			continue;
    6f32:	e18a      	b.n	724a <usbd_work_handler+0x32a>
			if (!ctx->attached) {
    6f34:	f815 3c04 	ldrb.w	r3, [r5, #-4]
    6f38:	b14b      	cbz	r3, 6f4e <usbd_work_handler+0x2e>
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    6f3a:	f8d4 a008 	ldr.w	sl, [r4, #8]
	switch (ep_evt->evt_type) {
    6f3e:	7b23      	ldrb	r3, [r4, #12]
    6f40:	2b03      	cmp	r3, #3
    6f42:	f200 817e 	bhi.w	7242 <usbd_work_handler+0x322>
    6f46:	e8df f003 	tbb	[pc, r3]
    6f4a:	6114      	.short	0x6114
    6f4c:	a49d      	.short	0xa49d
    6f4e:	4bae      	ldr	r3, [pc, #696]	; (7208 <usbd_work_handler+0x2e8>)
    6f50:	4aae      	ldr	r2, [pc, #696]	; (720c <usbd_work_handler+0x2ec>)
    6f52:	1a9b      	subs	r3, r3, r2
    6f54:	08db      	lsrs	r3, r3, #3
				LOG_ERR("not attached, EP 0x%02x event dropped",
    6f56:	2201      	movs	r2, #1
    6f58:	f362 0702 	bfi	r7, r2, #0, #3
    6f5c:	f36f 07c5 	bfc	r7, #3, #3
    6f60:	f363 178f 	bfi	r7, r3, #6, #10
    6f64:	68a3      	ldr	r3, [r4, #8]
    6f66:	463a      	mov	r2, r7
    6f68:	7a59      	ldrb	r1, [r3, #9]
    6f6a:	48a9      	ldr	r0, [pc, #676]	; (7210 <usbd_work_handler+0x2f0>)
    6f6c:	f7fb fe24 	bl	2bb8 <log_1>
    6f70:	e7e3      	b.n	6f3a <usbd_work_handler+0x1a>
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    6f72:	f8da b014 	ldr.w	fp, [sl, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
    6f76:	2208      	movs	r2, #8
    6f78:	2100      	movs	r1, #0
    6f7a:	4658      	mov	r0, fp
    6f7c:	f00b fdc4 	bl	12b08 <memset>
    return ret;
}

NRF_STATIC_INLINE uint8_t nrf_usbd_setup_bmrequesttype_get(NRF_USBD_Type const * p_reg)
{
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    6f80:	4ba4      	ldr	r3, [pc, #656]	; (7214 <usbd_work_handler+0x2f4>)
    6f82:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
	usbd_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    6f86:	f88b 2000 	strb.w	r2, [fp]
}

NRF_STATIC_INLINE uint8_t nrf_usbd_setup_brequest_get(NRF_USBD_Type const * p_reg)
{
    return (uint8_t)(p_reg->BREQUEST);
    6f8a:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
	usbd_setup->bRequest = nrf_usbd_setup_brequest_get(NRF_USBD);
    6f8e:	f88b 2001 	strb.w	r2, [fp, #1]
}

NRF_STATIC_INLINE uint16_t nrf_usbd_setup_wvalue_get(NRF_USBD_Type const * p_reg)
{
    const uint16_t val = p_reg->WVALUEL;
    6f92:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    6f96:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    6f98:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    6f9c:	0209      	lsls	r1, r1, #8
    6f9e:	b289      	uxth	r1, r1
    6fa0:	430a      	orrs	r2, r1
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
    6fa2:	f8ab 2002 	strh.w	r2, [fp, #2]
}

NRF_STATIC_INLINE uint16_t nrf_usbd_setup_windex_get(NRF_USBD_Type const * p_reg)
{
    const uint16_t val = p_reg->WINDEXL;
    6fa6:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    6faa:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    6fac:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    6fb0:	0209      	lsls	r1, r1, #8
    6fb2:	b289      	uxth	r1, r1
    6fb4:	430a      	orrs	r2, r1
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
    6fb6:	f8ab 2004 	strh.w	r2, [fp, #4]
}

NRF_STATIC_INLINE uint16_t nrf_usbd_setup_wlength_get(NRF_USBD_Type const * p_reg)
{
    const uint16_t val = p_reg->WLENGTHL;
    6fba:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    6fbe:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    6fc0:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    6fc4:	021b      	lsls	r3, r3, #8
    6fc6:	b29b      	uxth	r3, r3
    6fc8:	4313      	orrs	r3, r2
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
    6fca:	f8ab 3006 	strh.w	r3, [fp, #6]
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    6fce:	2208      	movs	r2, #8
    6fd0:	f8ca 200c 	str.w	r2, [sl, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    6fd4:	4659      	mov	r1, fp
    6fd6:	4890      	ldr	r0, [pc, #576]	; (7218 <usbd_work_handler+0x2f8>)
    6fd8:	f00b fd72 	bl	12ac0 <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    6fdc:	f8da 3000 	ldr.w	r3, [sl]
    6fe0:	2100      	movs	r1, #0
    6fe2:	f89a 0009 	ldrb.w	r0, [sl, #9]
    6fe6:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
    6fe8:	f99b 3000 	ldrsb.w	r3, [fp]
    6fec:	2b00      	cmp	r3, #0
    6fee:	db02      	blt.n	6ff6 <usbd_work_handler+0xd6>
    6ff0:	f8bb 3006 	ldrh.w	r3, [fp, #6]
    6ff4:	b923      	cbnz	r3, 7000 <usbd_work_handler+0xe0>
		ctx->ctrl_read_len = 0U;
    6ff6:	4b89      	ldr	r3, [pc, #548]	; (721c <usbd_work_handler+0x2fc>)
    6ff8:	2200      	movs	r2, #0
    6ffa:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
}
    6ffe:	e120      	b.n	7242 <usbd_work_handler+0x322>
		ctx->ctrl_read_len = usbd_setup->wLength;
    7000:	4a86      	ldr	r2, [pc, #536]	; (721c <usbd_work_handler+0x2fc>)
    7002:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
    7006:	f004 fd25 	bl	ba54 <nrfx_usbd_setup_data_clear>
    700a:	e11a      	b.n	7242 <usbd_work_handler+0x322>
	if (!ep_ctx->read_pending) {
    700c:	f89a 301d 	ldrb.w	r3, [sl, #29]
    7010:	2b00      	cmp	r3, #0
    7012:	f000 8116 	beq.w	7242 <usbd_work_handler+0x322>
	if (!ep_ctx->read_complete) {
    7016:	f89a 301c 	ldrb.w	r3, [sl, #28]
    701a:	2b00      	cmp	r3, #0
    701c:	f000 8111 	beq.w	7242 <usbd_work_handler+0x322>
	ep_ctx->read_pending = false;
    7020:	f04f 0b00 	mov.w	fp, #0
    7024:	f88a b01d 	strb.w	fp, [sl, #29]
	ep_ctx->read_complete = false;
    7028:	f88a b01c 	strb.w	fp, [sl, #28]
	return z_impl_k_mutex_lock(mutex, timeout);
    702c:	f04f 32ff 	mov.w	r2, #4294967295
    7030:	f04f 33ff 	mov.w	r3, #4294967295
    7034:	487a      	ldr	r0, [pc, #488]	; (7220 <usbd_work_handler+0x300>)
    7036:	f008 fb05 	bl	f644 <z_impl_k_mutex_lock>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    703a:	f8da 3014 	ldr.w	r3, [sl, #20]
    703e:	9301      	str	r3, [sp, #4]
    7040:	f8da 3004 	ldr.w	r3, [sl, #4]
    7044:	9302      	str	r3, [sp, #8]
    7046:	f8cd b00c 	str.w	fp, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    704a:	a901      	add	r1, sp, #4
    704c:	f89a 0009 	ldrb.w	r0, [sl, #9]
    7050:	f004 f8b4 	bl	b1bc <nrfx_usbd_ep_transfer>
    7054:	4601      	mov	r1, r0
	if (err != NRFX_SUCCESS) {
    7056:	4b73      	ldr	r3, [pc, #460]	; (7224 <usbd_work_handler+0x304>)
    7058:	4298      	cmp	r0, r3
    705a:	d103      	bne.n	7064 <usbd_work_handler+0x144>
	return z_impl_k_mutex_unlock(mutex);
    705c:	4870      	ldr	r0, [pc, #448]	; (7220 <usbd_work_handler+0x300>)
    705e:	f008 fb7b 	bl	f758 <z_impl_k_mutex_unlock>
    7062:	e0ee      	b.n	7242 <usbd_work_handler+0x322>
    7064:	4b68      	ldr	r3, [pc, #416]	; (7208 <usbd_work_handler+0x2e8>)
    7066:	4a69      	ldr	r2, [pc, #420]	; (720c <usbd_work_handler+0x2ec>)
    7068:	1a9b      	subs	r3, r3, r2
    706a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("nRF USBD transfer error (OUT): 0x%02x", err);
    706c:	2201      	movs	r2, #1
    706e:	f362 0802 	bfi	r8, r2, #0, #3
    7072:	f36f 08c5 	bfc	r8, #3, #3
    7076:	f363 188f 	bfi	r8, r3, #6, #10
    707a:	4642      	mov	r2, r8
    707c:	486a      	ldr	r0, [pc, #424]	; (7228 <usbd_work_handler+0x308>)
    707e:	f7fb fd9b 	bl	2bb8 <log_1>
    7082:	e7eb      	b.n	705c <usbd_work_handler+0x13c>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    7084:	f8da 3000 	ldr.w	r3, [sl]
    7088:	2101      	movs	r1, #1
    708a:	f89a 0009 	ldrb.w	r0, [sl, #9]
    708e:	4798      	blx	r3
		break;
    7090:	e0d7      	b.n	7242 <usbd_work_handler+0x322>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    7092:	f89a 300a 	ldrb.w	r3, [sl, #10]
    7096:	b913      	cbnz	r3, 709e <usbd_work_handler+0x17e>
		    !ep_ctx->trans_zlp) {
    7098:	f89a 301f 	ldrb.w	r3, [sl, #31]
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    709c:	b133      	cbz	r3, 70ac <usbd_work_handler+0x18c>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    709e:	f8da 3000 	ldr.w	r3, [sl]
    70a2:	2102      	movs	r1, #2
    70a4:	f89a 0009 	ldrb.w	r0, [sl, #9]
    70a8:	4798      	blx	r3
}
    70aa:	e0ca      	b.n	7242 <usbd_work_handler+0x322>
	return z_impl_k_mutex_lock(mutex, timeout);
    70ac:	f8df b170 	ldr.w	fp, [pc, #368]	; 7220 <usbd_work_handler+0x300>
    70b0:	f04f 32ff 	mov.w	r2, #4294967295
    70b4:	f04f 33ff 	mov.w	r3, #4294967295
    70b8:	4658      	mov	r0, fp
    70ba:	f008 fac3 	bl	f644 <z_impl_k_mutex_lock>
			nrfx_usbd_setup_clear();
    70be:	f004 fd1b 	bl	baf8 <nrfx_usbd_setup_clear>
	return z_impl_k_mutex_unlock(mutex);
    70c2:	4658      	mov	r0, fp
    70c4:	f008 fb48 	bl	f758 <z_impl_k_mutex_unlock>
    70c8:	e7e9      	b.n	709e <usbd_work_handler+0x17e>
	switch (pwr_evt->state) {
    70ca:	7a23      	ldrb	r3, [r4, #8]
    70cc:	2b04      	cmp	r3, #4
    70ce:	f200 80b8 	bhi.w	7242 <usbd_work_handler+0x322>
    70d2:	e8df f003 	tbb	[pc, r3]
    70d6:	0322      	.short	0x0322
    70d8:	350e      	.short	0x350e
    70da:	44          	.byte	0x44
    70db:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
    70dc:	f003 fffc 	bl	b0d8 <nrfx_usbd_is_enabled>
    70e0:	2800      	cmp	r0, #0
    70e2:	f040 80ae 	bne.w	7242 <usbd_work_handler+0x322>
			nrfx_usbd_enable();
    70e6:	f003 ff41 	bl	af6c <nrfx_usbd_enable>
			err = hfxo_start(ctx);
    70ea:	484c      	ldr	r0, [pc, #304]	; (721c <usbd_work_handler+0x2fc>)
    70ec:	f00c f874 	bl	131d8 <hfxo_start>
    70f0:	e0a7      	b.n	7242 <usbd_work_handler+0x322>
		usbd_enable_endpoints(ctx);
    70f2:	f8df a128 	ldr.w	sl, [pc, #296]	; 721c <usbd_work_handler+0x2fc>
    70f6:	4650      	mov	r0, sl
    70f8:	f00c f83c 	bl	13174 <usbd_enable_endpoints>
		nrfx_usbd_start(true);
    70fc:	2001      	movs	r0, #1
    70fe:	f003 ffcf 	bl	b0a0 <nrfx_usbd_start>
		ctx->ready = true;
    7102:	2301      	movs	r3, #1
    7104:	f88a 3025 	strb.w	r3, [sl, #37]	; 0x25
		if (ctx->status_cb) {
    7108:	f8da 3000 	ldr.w	r3, [sl]
    710c:	2b00      	cmp	r3, #0
    710e:	f000 8098 	beq.w	7242 <usbd_work_handler+0x322>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    7112:	2100      	movs	r1, #0
    7114:	2002      	movs	r0, #2
    7116:	4798      	blx	r3
    7118:	e093      	b.n	7242 <usbd_work_handler+0x322>
		ctx->ready = false;
    711a:	f8df a100 	ldr.w	sl, [pc, #256]	; 721c <usbd_work_handler+0x2fc>
    711e:	2300      	movs	r3, #0
    7120:	f88a 3025 	strb.w	r3, [sl, #37]	; 0x25
		nrfx_usbd_disable();
    7124:	f004 ff9e 	bl	c064 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
    7128:	4650      	mov	r0, sl
    712a:	f00c f802 	bl	13132 <hfxo_stop>
		if (ctx->status_cb) {
    712e:	f8da 3000 	ldr.w	r3, [sl]
    7132:	2b00      	cmp	r3, #0
    7134:	f000 8085 	beq.w	7242 <usbd_work_handler+0x322>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    7138:	2100      	movs	r1, #0
    713a:	2004      	movs	r0, #4
    713c:	4798      	blx	r3
    713e:	e080      	b.n	7242 <usbd_work_handler+0x322>
	return get_usbd_ctx()->ready;
    7140:	4b36      	ldr	r3, [pc, #216]	; (721c <usbd_work_handler+0x2fc>)
    7142:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		if (dev_ready()) {
    7146:	2b00      	cmp	r3, #0
    7148:	d07b      	beq.n	7242 <usbd_work_handler+0x322>
			nrfx_usbd_suspend();
    714a:	f004 ffad 	bl	c0a8 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    714e:	4b33      	ldr	r3, [pc, #204]	; (721c <usbd_work_handler+0x2fc>)
    7150:	681b      	ldr	r3, [r3, #0]
    7152:	2b00      	cmp	r3, #0
    7154:	d075      	beq.n	7242 <usbd_work_handler+0x322>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    7156:	2100      	movs	r1, #0
    7158:	2005      	movs	r0, #5
    715a:	4798      	blx	r3
    715c:	e071      	b.n	7242 <usbd_work_handler+0x322>
		if (ctx->status_cb && dev_ready()) {
    715e:	4b2f      	ldr	r3, [pc, #188]	; (721c <usbd_work_handler+0x2fc>)
    7160:	681b      	ldr	r3, [r3, #0]
    7162:	2b00      	cmp	r3, #0
    7164:	d06d      	beq.n	7242 <usbd_work_handler+0x322>
	return get_usbd_ctx()->ready;
    7166:	4a2d      	ldr	r2, [pc, #180]	; (721c <usbd_work_handler+0x2fc>)
    7168:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
		if (ctx->status_cb && dev_ready()) {
    716c:	2a00      	cmp	r2, #0
    716e:	d068      	beq.n	7242 <usbd_work_handler+0x322>
			ctx->status_cb(USB_DC_RESUME, NULL);
    7170:	2100      	movs	r1, #0
    7172:	2006      	movs	r0, #6
    7174:	4798      	blx	r3
}
    7176:	e064      	b.n	7242 <usbd_work_handler+0x322>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    7178:	f105 0a10 	add.w	sl, r5, #16
	return z_impl_k_mutex_lock(mutex, timeout);
    717c:	f04f 32ff 	mov.w	r2, #4294967295
    7180:	f04f 33ff 	mov.w	r3, #4294967295
    7184:	4650      	mov	r0, sl
    7186:	f008 fa5d 	bl	f644 <z_impl_k_mutex_lock>
			eps_ctx_init();
    718a:	f7ff fd37 	bl	6bfc <eps_ctx_init>
	return z_impl_k_mutex_unlock(mutex);
    718e:	4650      	mov	r0, sl
    7190:	f008 fae2 	bl	f758 <z_impl_k_mutex_unlock>
			if (ctx->status_cb) {
    7194:	f855 3c28 	ldr.w	r3, [r5, #-40]
    7198:	2b00      	cmp	r3, #0
    719a:	d052      	beq.n	7242 <usbd_work_handler+0x322>
				ctx->status_cb(USB_DC_RESET, NULL);
    719c:	2100      	movs	r1, #0
    719e:	2001      	movs	r0, #1
    71a0:	4798      	blx	r3
    71a2:	e04e      	b.n	7242 <usbd_work_handler+0x322>
			usbd_sof_trigger_iso_read();
    71a4:	f7ff fe1c 	bl	6de0 <usbd_sof_trigger_iso_read>
			if (ctx->status_cb) {
    71a8:	f855 3c28 	ldr.w	r3, [r5, #-40]
    71ac:	2b00      	cmp	r3, #0
    71ae:	d048      	beq.n	7242 <usbd_work_handler+0x322>
				ctx->status_cb(USB_DC_SOF, NULL);
    71b0:	2100      	movs	r1, #0
    71b2:	200a      	movs	r0, #10
    71b4:	4798      	blx	r3
    71b6:	e044      	b.n	7242 <usbd_work_handler+0x322>
    71b8:	4b13      	ldr	r3, [pc, #76]	; (7208 <usbd_work_handler+0x2e8>)
    71ba:	4a14      	ldr	r2, [pc, #80]	; (720c <usbd_work_handler+0x2ec>)
    71bc:	1a9b      	subs	r3, r3, r2
    71be:	08db      	lsrs	r3, r3, #3
				LOG_ERR("USBD event queue full!");
    71c0:	2201      	movs	r2, #1
    71c2:	f362 0602 	bfi	r6, r2, #0, #3
    71c6:	f36f 06c5 	bfc	r6, #3, #3
    71ca:	f363 168f 	bfi	r6, r3, #6, #10
    71ce:	4631      	mov	r1, r6
    71d0:	4816      	ldr	r0, [pc, #88]	; (722c <usbd_work_handler+0x30c>)
    71d2:	f7fb fd85 	bl	2ce0 <log_0>
	nrfx_power_usbevt_disable();
    71d6:	f00c fd1c 	bl	13c12 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
    71da:	f004 ff43 	bl	c064 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    71de:	f003 febb 	bl	af58 <nrfx_usbd_uninit>
static inline void usbd_evt_flush(void)
    71e2:	e006      	b.n	71f2 <usbd_work_handler+0x2d2>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    71e4:	1d01      	adds	r1, r0, #4
    71e6:	4807      	ldr	r0, [pc, #28]	; (7204 <usbd_work_handler+0x2e4>)
    71e8:	f00e f8d7 	bl	1539a <k_mem_slab_free>
	} while (ev != NULL);
    71ec:	f1ba 0f00 	cmp.w	sl, #0
    71f0:	d020      	beq.n	7234 <usbd_work_handler+0x314>
	return z_impl_k_queue_get(queue, timeout);
    71f2:	2200      	movs	r2, #0
    71f4:	2300      	movs	r3, #0
    71f6:	480e      	ldr	r0, [pc, #56]	; (7230 <usbd_work_handler+0x310>)
    71f8:	f008 faf2 	bl	f7e0 <z_impl_k_queue_get>
		if (ev) {
    71fc:	4682      	mov	sl, r0
    71fe:	2800      	cmp	r0, #0
    7200:	d1f0      	bne.n	71e4 <usbd_work_handler+0x2c4>
    7202:	e7f3      	b.n	71ec <usbd_work_handler+0x2cc>
    7204:	20000348 	.word	0x20000348
    7208:	00015f20 	.word	0x00015f20
    720c:	00015ea8 	.word	0x00015ea8
    7210:	00017030 	.word	0x00017030
    7214:	40027000 	.word	0x40027000
    7218:	200023f4 	.word	0x200023f4
    721c:	200023f0 	.word	0x200023f0
    7220:	20002428 	.word	0x20002428
    7224:	0bad0000 	.word	0x0bad0000
    7228:	00017058 	.word	0x00017058
    722c:	00017080 	.word	0x00017080
    7230:	2000044c 	.word	0x2000044c
	ret = eps_ctx_init();
    7234:	f7ff fce2 	bl	6bfc <eps_ctx_init>
	nrfx_power_usbevt_enable();
    7238:	f00c fce4 	bl	13c04 <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    723c:	481c      	ldr	r0, [pc, #112]	; (72b0 <usbd_work_handler+0x390>)
    723e:	f003 ff65 	bl	b10c <nrfx_usbd_init>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    7242:	1d21      	adds	r1, r4, #4
    7244:	481b      	ldr	r0, [pc, #108]	; (72b4 <usbd_work_handler+0x394>)
    7246:	f00e f8a8 	bl	1539a <k_mem_slab_free>
    724a:	2200      	movs	r2, #0
    724c:	2300      	movs	r3, #0
    724e:	481a      	ldr	r0, [pc, #104]	; (72b8 <usbd_work_handler+0x398>)
    7250:	f008 fac6 	bl	f7e0 <z_impl_k_queue_get>
	while ((ev = usbd_evt_get()) != NULL) {
    7254:	4604      	mov	r4, r0
    7256:	b338      	cbz	r0, 72a8 <usbd_work_handler+0x388>
	return get_usbd_ctx()->ready;
    7258:	4b18      	ldr	r3, [pc, #96]	; (72bc <usbd_work_handler+0x39c>)
    725a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    725e:	b91b      	cbnz	r3, 7268 <usbd_work_handler+0x348>
    7260:	7c23      	ldrb	r3, [r4, #16]
    7262:	2b00      	cmp	r3, #0
    7264:	f47f ae61 	bne.w	6f2a <usbd_work_handler+0xa>
		switch (ev->evt_type) {
    7268:	7c21      	ldrb	r1, [r4, #16]
    726a:	2904      	cmp	r1, #4
    726c:	d80c      	bhi.n	7288 <usbd_work_handler+0x368>
    726e:	a301      	add	r3, pc, #4	; (adr r3, 7274 <usbd_work_handler+0x354>)
    7270:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    7274:	000070cb 	.word	0x000070cb
    7278:	00006f35 	.word	0x00006f35
    727c:	00007179 	.word	0x00007179
    7280:	000071a5 	.word	0x000071a5
    7284:	000071b9 	.word	0x000071b9
    7288:	4b0d      	ldr	r3, [pc, #52]	; (72c0 <usbd_work_handler+0x3a0>)
    728a:	4a0e      	ldr	r2, [pc, #56]	; (72c4 <usbd_work_handler+0x3a4>)
    728c:	1a9b      	subs	r3, r3, r2
    728e:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    7290:	2201      	movs	r2, #1
    7292:	f362 0902 	bfi	r9, r2, #0, #3
    7296:	f36f 09c5 	bfc	r9, #3, #3
    729a:	f363 198f 	bfi	r9, r3, #6, #10
    729e:	464a      	mov	r2, r9
    72a0:	4809      	ldr	r0, [pc, #36]	; (72c8 <usbd_work_handler+0x3a8>)
    72a2:	f7fb fc89 	bl	2bb8 <log_1>
    72a6:	e7cc      	b.n	7242 <usbd_work_handler+0x322>
}
    72a8:	b005      	add	sp, #20
    72aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    72ae:	bf00      	nop
    72b0:	00007929 	.word	0x00007929
    72b4:	20000348 	.word	0x20000348
    72b8:	2000044c 	.word	0x2000044c
    72bc:	200023f0 	.word	0x200023f0
    72c0:	00015f20 	.word	0x00015f20
    72c4:	00015ea8 	.word	0x00015ea8
    72c8:	00017098 	.word	0x00017098

000072cc <usbd_event_transfer_ctrl>:
{
    72cc:	b570      	push	{r4, r5, r6, lr}
    72ce:	b082      	sub	sp, #8
    72d0:	4604      	mov	r4, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
    72d2:	7886      	ldrb	r6, [r0, #2]
    72d4:	4630      	mov	r0, r6
    72d6:	f7ff fc5d 	bl	6b94 <endpoint_ctx>
    72da:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    72dc:	f016 0f80 	tst.w	r6, #128	; 0x80
    72e0:	d122      	bne.n	7328 <usbd_event_transfer_ctrl+0x5c>
		switch (p_event->data.eptransfer.status) {
    72e2:	78e1      	ldrb	r1, [r4, #3]
    72e4:	2900      	cmp	r1, #0
    72e6:	f000 80d8 	beq.w	749a <usbd_event_transfer_ctrl+0x1ce>
    72ea:	2901      	cmp	r1, #1
    72ec:	f040 815c 	bne.w	75a8 <usbd_event_transfer_ctrl+0x2dc>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    72f0:	2200      	movs	r2, #0
    72f2:	2300      	movs	r3, #0
    72f4:	a901      	add	r1, sp, #4
    72f6:	48b6      	ldr	r0, [pc, #728]	; (75d0 <usbd_event_transfer_ctrl+0x304>)
    72f8:	f008 f86a 	bl	f3d0 <k_mem_slab_alloc>
    72fc:	2800      	cmp	r0, #0
    72fe:	f040 8089 	bne.w	7414 <usbd_event_transfer_ctrl+0x148>
	ev = (struct usbd_event *)block.data;
    7302:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    7304:	6064      	str	r4, [r4, #4]
			if (!ev) {
    7306:	2c00      	cmp	r4, #0
    7308:	f000 815f 	beq.w	75ca <usbd_event_transfer_ctrl+0x2fe>
			ep_ctx->read_pending = true;
    730c:	2301      	movs	r3, #1
    730e:	776b      	strb	r3, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    7310:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    7312:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    7314:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    7316:	4621      	mov	r1, r4
    7318:	48ae      	ldr	r0, [pc, #696]	; (75d4 <usbd_event_transfer_ctrl+0x308>)
    731a:	f00e f961 	bl	155e0 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    731e:	49ae      	ldr	r1, [pc, #696]	; (75d8 <usbd_event_transfer_ctrl+0x30c>)
    7320:	48ae      	ldr	r0, [pc, #696]	; (75dc <usbd_event_transfer_ctrl+0x310>)
    7322:	f00e f97e 	bl	15622 <k_work_submit_to_queue>
}
    7326:	e150      	b.n	75ca <usbd_event_transfer_ctrl+0x2fe>
		switch (p_event->data.eptransfer.status) {
    7328:	78e1      	ldrb	r1, [r4, #3]
    732a:	b1a1      	cbz	r1, 7356 <usbd_event_transfer_ctrl+0x8a>
    732c:	2903      	cmp	r1, #3
    732e:	f000 814c 	beq.w	75ca <usbd_event_transfer_ctrl+0x2fe>
    7332:	4aab      	ldr	r2, [pc, #684]	; (75e0 <usbd_event_transfer_ctrl+0x314>)
    7334:	4bab      	ldr	r3, [pc, #684]	; (75e4 <usbd_event_transfer_ctrl+0x318>)
    7336:	1ad2      	subs	r2, r2, r3
    7338:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    733a:	f04f 0300 	mov.w	r3, #0
    733e:	2001      	movs	r0, #1
    7340:	f360 0302 	bfi	r3, r0, #0, #3
    7344:	f36f 03c5 	bfc	r3, #3, #3
    7348:	f362 138f 	bfi	r3, r2, #6, #10
    734c:	4632      	mov	r2, r6
    734e:	48a6      	ldr	r0, [pc, #664]	; (75e8 <usbd_event_transfer_ctrl+0x31c>)
    7350:	f7fb fc68 	bl	2c24 <log_2>
    7354:	e139      	b.n	75ca <usbd_event_transfer_ctrl+0x2fe>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    7356:	2200      	movs	r2, #0
    7358:	2300      	movs	r3, #0
    735a:	a901      	add	r1, sp, #4
    735c:	489c      	ldr	r0, [pc, #624]	; (75d0 <usbd_event_transfer_ctrl+0x304>)
    735e:	f008 f837 	bl	f3d0 <k_mem_slab_alloc>
    7362:	b9a0      	cbnz	r0, 738e <usbd_event_transfer_ctrl+0xc2>
	ev = (struct usbd_event *)block.data;
    7364:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    7366:	6064      	str	r4, [r4, #4]
			if (!ev) {
    7368:	2c00      	cmp	r4, #0
    736a:	f000 812e 	beq.w	75ca <usbd_event_transfer_ctrl+0x2fe>
			ep_ctx->write_in_progress = false;
    736e:	2300      	movs	r3, #0
    7370:	77ab      	strb	r3, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    7372:	2301      	movs	r3, #1
    7374:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    7376:	2303      	movs	r3, #3
    7378:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    737a:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    737c:	4621      	mov	r1, r4
    737e:	4895      	ldr	r0, [pc, #596]	; (75d4 <usbd_event_transfer_ctrl+0x308>)
    7380:	f00e f92e 	bl	155e0 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    7384:	4994      	ldr	r1, [pc, #592]	; (75d8 <usbd_event_transfer_ctrl+0x30c>)
    7386:	4895      	ldr	r0, [pc, #596]	; (75dc <usbd_event_transfer_ctrl+0x310>)
    7388:	f00e f94b 	bl	15622 <k_work_submit_to_queue>
}
    738c:	e11d      	b.n	75ca <usbd_event_transfer_ctrl+0x2fe>
    738e:	4b94      	ldr	r3, [pc, #592]	; (75e0 <usbd_event_transfer_ctrl+0x314>)
    7390:	4a94      	ldr	r2, [pc, #592]	; (75e4 <usbd_event_transfer_ctrl+0x318>)
    7392:	1a9b      	subs	r3, r3, r2
    7394:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    7396:	f04f 0100 	mov.w	r1, #0
    739a:	2201      	movs	r2, #1
    739c:	f362 0102 	bfi	r1, r2, #0, #3
    73a0:	f36f 01c5 	bfc	r1, #3, #3
    73a4:	f363 118f 	bfi	r1, r3, #6, #10
    73a8:	4890      	ldr	r0, [pc, #576]	; (75ec <usbd_event_transfer_ctrl+0x320>)
    73aa:	f7fb fc99 	bl	2ce0 <log_0>
static inline void usbd_evt_flush(void)
    73ae:	e000      	b.n	73b2 <usbd_event_transfer_ctrl+0xe6>
	} while (ev != NULL);
    73b0:	b164      	cbz	r4, 73cc <usbd_event_transfer_ctrl+0x100>
    73b2:	2200      	movs	r2, #0
    73b4:	2300      	movs	r3, #0
    73b6:	4887      	ldr	r0, [pc, #540]	; (75d4 <usbd_event_transfer_ctrl+0x308>)
    73b8:	f008 fa12 	bl	f7e0 <z_impl_k_queue_get>
		if (ev) {
    73bc:	4604      	mov	r4, r0
    73be:	2800      	cmp	r0, #0
    73c0:	d0f6      	beq.n	73b0 <usbd_event_transfer_ctrl+0xe4>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    73c2:	1d01      	adds	r1, r0, #4
    73c4:	4882      	ldr	r0, [pc, #520]	; (75d0 <usbd_event_transfer_ctrl+0x304>)
    73c6:	f00d ffe8 	bl	1539a <k_mem_slab_free>
}
    73ca:	e7f1      	b.n	73b0 <usbd_event_transfer_ctrl+0xe4>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    73cc:	2200      	movs	r2, #0
    73ce:	2300      	movs	r3, #0
    73d0:	a901      	add	r1, sp, #4
    73d2:	487f      	ldr	r0, [pc, #508]	; (75d0 <usbd_event_transfer_ctrl+0x304>)
    73d4:	f007 fffc 	bl	f3d0 <k_mem_slab_alloc>
    73d8:	b180      	cbz	r0, 73fc <usbd_event_transfer_ctrl+0x130>
    73da:	4b81      	ldr	r3, [pc, #516]	; (75e0 <usbd_event_transfer_ctrl+0x314>)
    73dc:	4a81      	ldr	r2, [pc, #516]	; (75e4 <usbd_event_transfer_ctrl+0x318>)
    73de:	1a9b      	subs	r3, r3, r2
    73e0:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    73e2:	f04f 0100 	mov.w	r1, #0
    73e6:	2201      	movs	r2, #1
    73e8:	f362 0102 	bfi	r1, r2, #0, #3
    73ec:	f36f 01c5 	bfc	r1, #3, #3
    73f0:	f363 118f 	bfi	r1, r3, #6, #10
    73f4:	487e      	ldr	r0, [pc, #504]	; (75f0 <usbd_event_transfer_ctrl+0x324>)
    73f6:	f7fb fc73 	bl	2ce0 <log_0>
			return NULL;
    73fa:	e7b5      	b.n	7368 <usbd_event_transfer_ctrl+0x9c>
		ev = (struct usbd_event *)block.data;
    73fc:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    73fe:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    7400:	2304      	movs	r3, #4
    7402:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    7404:	4873      	ldr	r0, [pc, #460]	; (75d4 <usbd_event_transfer_ctrl+0x308>)
    7406:	f00e f8eb 	bl	155e0 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    740a:	4973      	ldr	r1, [pc, #460]	; (75d8 <usbd_event_transfer_ctrl+0x30c>)
    740c:	4873      	ldr	r0, [pc, #460]	; (75dc <usbd_event_transfer_ctrl+0x310>)
    740e:	f00e f908 	bl	15622 <k_work_submit_to_queue>
		return NULL;
    7412:	e7a9      	b.n	7368 <usbd_event_transfer_ctrl+0x9c>
    7414:	4b72      	ldr	r3, [pc, #456]	; (75e0 <usbd_event_transfer_ctrl+0x314>)
    7416:	4a73      	ldr	r2, [pc, #460]	; (75e4 <usbd_event_transfer_ctrl+0x318>)
    7418:	1a9b      	subs	r3, r3, r2
    741a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    741c:	f04f 0100 	mov.w	r1, #0
    7420:	2201      	movs	r2, #1
    7422:	f362 0102 	bfi	r1, r2, #0, #3
    7426:	f36f 01c5 	bfc	r1, #3, #3
    742a:	f363 118f 	bfi	r1, r3, #6, #10
    742e:	486f      	ldr	r0, [pc, #444]	; (75ec <usbd_event_transfer_ctrl+0x320>)
    7430:	f7fb fc56 	bl	2ce0 <log_0>
static inline void usbd_evt_flush(void)
    7434:	e004      	b.n	7440 <usbd_event_transfer_ctrl+0x174>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    7436:	1d01      	adds	r1, r0, #4
    7438:	4865      	ldr	r0, [pc, #404]	; (75d0 <usbd_event_transfer_ctrl+0x304>)
    743a:	f00d ffae 	bl	1539a <k_mem_slab_free>
	} while (ev != NULL);
    743e:	b144      	cbz	r4, 7452 <usbd_event_transfer_ctrl+0x186>
    7440:	2200      	movs	r2, #0
    7442:	2300      	movs	r3, #0
    7444:	4863      	ldr	r0, [pc, #396]	; (75d4 <usbd_event_transfer_ctrl+0x308>)
    7446:	f008 f9cb 	bl	f7e0 <z_impl_k_queue_get>
		if (ev) {
    744a:	4604      	mov	r4, r0
    744c:	2800      	cmp	r0, #0
    744e:	d1f2      	bne.n	7436 <usbd_event_transfer_ctrl+0x16a>
    7450:	e7f5      	b.n	743e <usbd_event_transfer_ctrl+0x172>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    7452:	2200      	movs	r2, #0
    7454:	2300      	movs	r3, #0
    7456:	a901      	add	r1, sp, #4
    7458:	485d      	ldr	r0, [pc, #372]	; (75d0 <usbd_event_transfer_ctrl+0x304>)
    745a:	f007 ffb9 	bl	f3d0 <k_mem_slab_alloc>
    745e:	b180      	cbz	r0, 7482 <usbd_event_transfer_ctrl+0x1b6>
    7460:	4b5f      	ldr	r3, [pc, #380]	; (75e0 <usbd_event_transfer_ctrl+0x314>)
    7462:	4a60      	ldr	r2, [pc, #384]	; (75e4 <usbd_event_transfer_ctrl+0x318>)
    7464:	1a9b      	subs	r3, r3, r2
    7466:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    7468:	f04f 0100 	mov.w	r1, #0
    746c:	2201      	movs	r2, #1
    746e:	f362 0102 	bfi	r1, r2, #0, #3
    7472:	f36f 01c5 	bfc	r1, #3, #3
    7476:	f363 118f 	bfi	r1, r3, #6, #10
    747a:	485d      	ldr	r0, [pc, #372]	; (75f0 <usbd_event_transfer_ctrl+0x324>)
    747c:	f7fb fc30 	bl	2ce0 <log_0>
			return NULL;
    7480:	e741      	b.n	7306 <usbd_event_transfer_ctrl+0x3a>
		ev = (struct usbd_event *)block.data;
    7482:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    7484:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    7486:	2304      	movs	r3, #4
    7488:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    748a:	4852      	ldr	r0, [pc, #328]	; (75d4 <usbd_event_transfer_ctrl+0x308>)
    748c:	f00e f8a8 	bl	155e0 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    7490:	4951      	ldr	r1, [pc, #324]	; (75d8 <usbd_event_transfer_ctrl+0x30c>)
    7492:	4852      	ldr	r0, [pc, #328]	; (75dc <usbd_event_transfer_ctrl+0x310>)
    7494:	f00e f8c5 	bl	15622 <k_work_submit_to_queue>
		return NULL;
    7498:	e735      	b.n	7306 <usbd_event_transfer_ctrl+0x3a>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    749a:	2200      	movs	r2, #0
    749c:	2300      	movs	r3, #0
    749e:	a901      	add	r1, sp, #4
    74a0:	484b      	ldr	r0, [pc, #300]	; (75d0 <usbd_event_transfer_ctrl+0x304>)
    74a2:	f007 ff95 	bl	f3d0 <k_mem_slab_alloc>
    74a6:	bb20      	cbnz	r0, 74f2 <usbd_event_transfer_ctrl+0x226>
	ev = (struct usbd_event *)block.data;
    74a8:	9e01      	ldr	r6, [sp, #4]
	ev->block = block;
    74aa:	6076      	str	r6, [r6, #4]
			if (!ev) {
    74ac:	2e00      	cmp	r6, #0
    74ae:	f000 808c 	beq.w	75ca <usbd_event_transfer_ctrl+0x2fe>
			ev->evt_type = USBD_EVT_EP;
    74b2:	2301      	movs	r3, #1
    74b4:	7433      	strb	r3, [r6, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    74b6:	2302      	movs	r3, #2
    74b8:	7333      	strb	r3, [r6, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    74ba:	60b5      	str	r5, [r6, #8]
			err_code = nrfx_usbd_ep_status_get(
    74bc:	f105 010c 	add.w	r1, r5, #12
    74c0:	78a0      	ldrb	r0, [r4, #2]
    74c2:	f003 ff11 	bl	b2e8 <nrfx_usbd_ep_status_get>
			if (err_code != NRFX_USBD_EP_OK) {
    74c6:	4601      	mov	r1, r0
    74c8:	2800      	cmp	r0, #0
    74ca:	d155      	bne.n	7578 <usbd_event_transfer_ctrl+0x2ac>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    74cc:	4b49      	ldr	r3, [pc, #292]	; (75f4 <usbd_event_transfer_ctrl+0x328>)
    74ce:	f8b3 328c 	ldrh.w	r3, [r3, #652]	; 0x28c
    74d2:	68ea      	ldr	r2, [r5, #12]
    74d4:	4293      	cmp	r3, r2
    74d6:	d860      	bhi.n	759a <usbd_event_transfer_ctrl+0x2ce>
				ctx->ctrl_read_len = 0U;
    74d8:	4b46      	ldr	r3, [pc, #280]	; (75f4 <usbd_event_transfer_ctrl+0x328>)
    74da:	2200      	movs	r2, #0
    74dc:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
	k_fifo_put(&usbd_evt_fifo, ev);
    74e0:	4631      	mov	r1, r6
    74e2:	483c      	ldr	r0, [pc, #240]	; (75d4 <usbd_event_transfer_ctrl+0x308>)
    74e4:	f00e f87c 	bl	155e0 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    74e8:	493b      	ldr	r1, [pc, #236]	; (75d8 <usbd_event_transfer_ctrl+0x30c>)
    74ea:	483c      	ldr	r0, [pc, #240]	; (75dc <usbd_event_transfer_ctrl+0x310>)
    74ec:	f00e f899 	bl	15622 <k_work_submit_to_queue>
}
    74f0:	e06b      	b.n	75ca <usbd_event_transfer_ctrl+0x2fe>
    74f2:	4b3b      	ldr	r3, [pc, #236]	; (75e0 <usbd_event_transfer_ctrl+0x314>)
    74f4:	4a3b      	ldr	r2, [pc, #236]	; (75e4 <usbd_event_transfer_ctrl+0x318>)
    74f6:	1a9b      	subs	r3, r3, r2
    74f8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    74fa:	f04f 0100 	mov.w	r1, #0
    74fe:	2201      	movs	r2, #1
    7500:	f362 0102 	bfi	r1, r2, #0, #3
    7504:	f36f 01c5 	bfc	r1, #3, #3
    7508:	f363 118f 	bfi	r1, r3, #6, #10
    750c:	4837      	ldr	r0, [pc, #220]	; (75ec <usbd_event_transfer_ctrl+0x320>)
    750e:	f7fb fbe7 	bl	2ce0 <log_0>
static inline void usbd_evt_flush(void)
    7512:	e004      	b.n	751e <usbd_event_transfer_ctrl+0x252>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    7514:	1d01      	adds	r1, r0, #4
    7516:	482e      	ldr	r0, [pc, #184]	; (75d0 <usbd_event_transfer_ctrl+0x304>)
    7518:	f00d ff3f 	bl	1539a <k_mem_slab_free>
	} while (ev != NULL);
    751c:	b146      	cbz	r6, 7530 <usbd_event_transfer_ctrl+0x264>
    751e:	2200      	movs	r2, #0
    7520:	2300      	movs	r3, #0
    7522:	482c      	ldr	r0, [pc, #176]	; (75d4 <usbd_event_transfer_ctrl+0x308>)
    7524:	f008 f95c 	bl	f7e0 <z_impl_k_queue_get>
		if (ev) {
    7528:	4606      	mov	r6, r0
    752a:	2800      	cmp	r0, #0
    752c:	d1f2      	bne.n	7514 <usbd_event_transfer_ctrl+0x248>
    752e:	e7f5      	b.n	751c <usbd_event_transfer_ctrl+0x250>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    7530:	2200      	movs	r2, #0
    7532:	2300      	movs	r3, #0
    7534:	a901      	add	r1, sp, #4
    7536:	4826      	ldr	r0, [pc, #152]	; (75d0 <usbd_event_transfer_ctrl+0x304>)
    7538:	f007 ff4a 	bl	f3d0 <k_mem_slab_alloc>
    753c:	b180      	cbz	r0, 7560 <usbd_event_transfer_ctrl+0x294>
    753e:	4b28      	ldr	r3, [pc, #160]	; (75e0 <usbd_event_transfer_ctrl+0x314>)
    7540:	4a28      	ldr	r2, [pc, #160]	; (75e4 <usbd_event_transfer_ctrl+0x318>)
    7542:	1a9b      	subs	r3, r3, r2
    7544:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    7546:	f04f 0100 	mov.w	r1, #0
    754a:	2201      	movs	r2, #1
    754c:	f362 0102 	bfi	r1, r2, #0, #3
    7550:	f36f 01c5 	bfc	r1, #3, #3
    7554:	f363 118f 	bfi	r1, r3, #6, #10
    7558:	4825      	ldr	r0, [pc, #148]	; (75f0 <usbd_event_transfer_ctrl+0x324>)
    755a:	f7fb fbc1 	bl	2ce0 <log_0>
			return NULL;
    755e:	e7a5      	b.n	74ac <usbd_event_transfer_ctrl+0x1e0>
		ev = (struct usbd_event *)block.data;
    7560:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    7562:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    7564:	2304      	movs	r3, #4
    7566:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    7568:	481a      	ldr	r0, [pc, #104]	; (75d4 <usbd_event_transfer_ctrl+0x308>)
    756a:	f00e f839 	bl	155e0 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    756e:	491a      	ldr	r1, [pc, #104]	; (75d8 <usbd_event_transfer_ctrl+0x30c>)
    7570:	481a      	ldr	r0, [pc, #104]	; (75dc <usbd_event_transfer_ctrl+0x310>)
    7572:	f00e f856 	bl	15622 <k_work_submit_to_queue>
		return NULL;
    7576:	e799      	b.n	74ac <usbd_event_transfer_ctrl+0x1e0>
    7578:	4b19      	ldr	r3, [pc, #100]	; (75e0 <usbd_event_transfer_ctrl+0x314>)
    757a:	4a1a      	ldr	r2, [pc, #104]	; (75e4 <usbd_event_transfer_ctrl+0x318>)
    757c:	1a9b      	subs	r3, r3, r2
    757e:	08db      	lsrs	r3, r3, #3
				LOG_ERR("_ep_status_get failed! Code: %d",
    7580:	f04f 0200 	mov.w	r2, #0
    7584:	2001      	movs	r0, #1
    7586:	f360 0202 	bfi	r2, r0, #0, #3
    758a:	f36f 02c5 	bfc	r2, #3, #3
    758e:	f363 128f 	bfi	r2, r3, #6, #10
    7592:	4819      	ldr	r0, [pc, #100]	; (75f8 <usbd_event_transfer_ctrl+0x32c>)
    7594:	f7fb fb10 	bl	2bb8 <log_1>
    7598:	e798      	b.n	74cc <usbd_event_transfer_ctrl+0x200>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    759a:	1a9b      	subs	r3, r3, r2
    759c:	4a15      	ldr	r2, [pc, #84]	; (75f4 <usbd_event_transfer_ctrl+0x328>)
    759e:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
    75a2:	f004 fa57 	bl	ba54 <nrfx_usbd_setup_data_clear>
    75a6:	e79b      	b.n	74e0 <usbd_event_transfer_ctrl+0x214>
    75a8:	4a0d      	ldr	r2, [pc, #52]	; (75e0 <usbd_event_transfer_ctrl+0x314>)
    75aa:	4b0e      	ldr	r3, [pc, #56]	; (75e4 <usbd_event_transfer_ctrl+0x318>)
    75ac:	1ad2      	subs	r2, r2, r3
    75ae:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    75b0:	f04f 0300 	mov.w	r3, #0
    75b4:	2001      	movs	r0, #1
    75b6:	f360 0302 	bfi	r3, r0, #0, #3
    75ba:	f36f 03c5 	bfc	r3, #3, #3
    75be:	f362 138f 	bfi	r3, r2, #6, #10
    75c2:	4632      	mov	r2, r6
    75c4:	4808      	ldr	r0, [pc, #32]	; (75e8 <usbd_event_transfer_ctrl+0x31c>)
    75c6:	f7fb fb2d 	bl	2c24 <log_2>
}
    75ca:	b002      	add	sp, #8
    75cc:	bd70      	pop	{r4, r5, r6, pc}
    75ce:	bf00      	nop
    75d0:	20000348 	.word	0x20000348
    75d4:	2000044c 	.word	0x2000044c
    75d8:	20002418 	.word	0x20002418
    75dc:	200006f8 	.word	0x200006f8
    75e0:	00015f20 	.word	0x00015f20
    75e4:	00015ea8 	.word	0x00015ea8
    75e8:	000170b0 	.word	0x000170b0
    75ec:	00016fb0 	.word	0x00016fb0
    75f0:	00016fd0 	.word	0x00016fd0
    75f4:	200023f0 	.word	0x200023f0
    75f8:	000170dc 	.word	0x000170dc

000075fc <usbd_event_transfer_data>:
{
    75fc:	b570      	push	{r4, r5, r6, lr}
    75fe:	b082      	sub	sp, #8
    7600:	4604      	mov	r4, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
    7602:	7886      	ldrb	r6, [r0, #2]
    7604:	4630      	mov	r0, r6
    7606:	f7ff fac5 	bl	6b94 <endpoint_ctx>
    760a:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    760c:	f016 0f80 	tst.w	r6, #128	; 0x80
    7610:	d122      	bne.n	7658 <usbd_event_transfer_data+0x5c>
		switch (p_event->data.eptransfer.status) {
    7612:	78e1      	ldrb	r1, [r4, #3]
    7614:	2900      	cmp	r1, #0
    7616:	f000 80d8 	beq.w	77ca <usbd_event_transfer_data+0x1ce>
    761a:	2901      	cmp	r1, #1
    761c:	f040 815d 	bne.w	78da <usbd_event_transfer_data+0x2de>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    7620:	2200      	movs	r2, #0
    7622:	2300      	movs	r3, #0
    7624:	a901      	add	r1, sp, #4
    7626:	48b6      	ldr	r0, [pc, #728]	; (7900 <usbd_event_transfer_data+0x304>)
    7628:	f007 fed2 	bl	f3d0 <k_mem_slab_alloc>
    762c:	2800      	cmp	r0, #0
    762e:	f040 8089 	bne.w	7744 <usbd_event_transfer_data+0x148>
	ev = (struct usbd_event *)block.data;
    7632:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    7634:	6064      	str	r4, [r4, #4]
			if (!ev) {
    7636:	2c00      	cmp	r4, #0
    7638:	f000 8160 	beq.w	78fc <usbd_event_transfer_data+0x300>
			ep_ctx->read_pending = true;
    763c:	2301      	movs	r3, #1
    763e:	776b      	strb	r3, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    7640:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    7642:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    7644:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    7646:	4621      	mov	r1, r4
    7648:	48ae      	ldr	r0, [pc, #696]	; (7904 <usbd_event_transfer_data+0x308>)
    764a:	f00d ffc9 	bl	155e0 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    764e:	49ae      	ldr	r1, [pc, #696]	; (7908 <usbd_event_transfer_data+0x30c>)
    7650:	48ae      	ldr	r0, [pc, #696]	; (790c <usbd_event_transfer_data+0x310>)
    7652:	f00d ffe6 	bl	15622 <k_work_submit_to_queue>
}
    7656:	e151      	b.n	78fc <usbd_event_transfer_data+0x300>
		switch (p_event->data.eptransfer.status) {
    7658:	78e1      	ldrb	r1, [r4, #3]
    765a:	b1a1      	cbz	r1, 7686 <usbd_event_transfer_data+0x8a>
    765c:	2903      	cmp	r1, #3
    765e:	f000 814d 	beq.w	78fc <usbd_event_transfer_data+0x300>
    7662:	4aab      	ldr	r2, [pc, #684]	; (7910 <usbd_event_transfer_data+0x314>)
    7664:	4bab      	ldr	r3, [pc, #684]	; (7914 <usbd_event_transfer_data+0x318>)
    7666:	1ad2      	subs	r2, r2, r3
    7668:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    766a:	f04f 0300 	mov.w	r3, #0
    766e:	2001      	movs	r0, #1
    7670:	f360 0302 	bfi	r3, r0, #0, #3
    7674:	f36f 03c5 	bfc	r3, #3, #3
    7678:	f362 138f 	bfi	r3, r2, #6, #10
    767c:	4632      	mov	r2, r6
    767e:	48a6      	ldr	r0, [pc, #664]	; (7918 <usbd_event_transfer_data+0x31c>)
    7680:	f7fb fad0 	bl	2c24 <log_2>
    7684:	e13a      	b.n	78fc <usbd_event_transfer_data+0x300>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    7686:	2200      	movs	r2, #0
    7688:	2300      	movs	r3, #0
    768a:	a901      	add	r1, sp, #4
    768c:	489c      	ldr	r0, [pc, #624]	; (7900 <usbd_event_transfer_data+0x304>)
    768e:	f007 fe9f 	bl	f3d0 <k_mem_slab_alloc>
    7692:	b9a0      	cbnz	r0, 76be <usbd_event_transfer_data+0xc2>
	ev = (struct usbd_event *)block.data;
    7694:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    7696:	6064      	str	r4, [r4, #4]
			if (!ev) {
    7698:	2c00      	cmp	r4, #0
    769a:	f000 812f 	beq.w	78fc <usbd_event_transfer_data+0x300>
			ep_ctx->write_in_progress = false;
    769e:	2300      	movs	r3, #0
    76a0:	77ab      	strb	r3, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    76a2:	2301      	movs	r3, #1
    76a4:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    76a6:	2303      	movs	r3, #3
    76a8:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    76aa:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    76ac:	4621      	mov	r1, r4
    76ae:	4895      	ldr	r0, [pc, #596]	; (7904 <usbd_event_transfer_data+0x308>)
    76b0:	f00d ff96 	bl	155e0 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    76b4:	4994      	ldr	r1, [pc, #592]	; (7908 <usbd_event_transfer_data+0x30c>)
    76b6:	4895      	ldr	r0, [pc, #596]	; (790c <usbd_event_transfer_data+0x310>)
    76b8:	f00d ffb3 	bl	15622 <k_work_submit_to_queue>
}
    76bc:	e11e      	b.n	78fc <usbd_event_transfer_data+0x300>
    76be:	4b94      	ldr	r3, [pc, #592]	; (7910 <usbd_event_transfer_data+0x314>)
    76c0:	4a94      	ldr	r2, [pc, #592]	; (7914 <usbd_event_transfer_data+0x318>)
    76c2:	1a9b      	subs	r3, r3, r2
    76c4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    76c6:	f04f 0100 	mov.w	r1, #0
    76ca:	2201      	movs	r2, #1
    76cc:	f362 0102 	bfi	r1, r2, #0, #3
    76d0:	f36f 01c5 	bfc	r1, #3, #3
    76d4:	f363 118f 	bfi	r1, r3, #6, #10
    76d8:	4890      	ldr	r0, [pc, #576]	; (791c <usbd_event_transfer_data+0x320>)
    76da:	f7fb fb01 	bl	2ce0 <log_0>
static inline void usbd_evt_flush(void)
    76de:	e000      	b.n	76e2 <usbd_event_transfer_data+0xe6>
	} while (ev != NULL);
    76e0:	b164      	cbz	r4, 76fc <usbd_event_transfer_data+0x100>
    76e2:	2200      	movs	r2, #0
    76e4:	2300      	movs	r3, #0
    76e6:	4887      	ldr	r0, [pc, #540]	; (7904 <usbd_event_transfer_data+0x308>)
    76e8:	f008 f87a 	bl	f7e0 <z_impl_k_queue_get>
		if (ev) {
    76ec:	4604      	mov	r4, r0
    76ee:	2800      	cmp	r0, #0
    76f0:	d0f6      	beq.n	76e0 <usbd_event_transfer_data+0xe4>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    76f2:	1d01      	adds	r1, r0, #4
    76f4:	4882      	ldr	r0, [pc, #520]	; (7900 <usbd_event_transfer_data+0x304>)
    76f6:	f00d fe50 	bl	1539a <k_mem_slab_free>
}
    76fa:	e7f1      	b.n	76e0 <usbd_event_transfer_data+0xe4>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    76fc:	2200      	movs	r2, #0
    76fe:	2300      	movs	r3, #0
    7700:	a901      	add	r1, sp, #4
    7702:	487f      	ldr	r0, [pc, #508]	; (7900 <usbd_event_transfer_data+0x304>)
    7704:	f007 fe64 	bl	f3d0 <k_mem_slab_alloc>
    7708:	b180      	cbz	r0, 772c <usbd_event_transfer_data+0x130>
    770a:	4b81      	ldr	r3, [pc, #516]	; (7910 <usbd_event_transfer_data+0x314>)
    770c:	4a81      	ldr	r2, [pc, #516]	; (7914 <usbd_event_transfer_data+0x318>)
    770e:	1a9b      	subs	r3, r3, r2
    7710:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    7712:	f04f 0100 	mov.w	r1, #0
    7716:	2201      	movs	r2, #1
    7718:	f362 0102 	bfi	r1, r2, #0, #3
    771c:	f36f 01c5 	bfc	r1, #3, #3
    7720:	f363 118f 	bfi	r1, r3, #6, #10
    7724:	487e      	ldr	r0, [pc, #504]	; (7920 <usbd_event_transfer_data+0x324>)
    7726:	f7fb fadb 	bl	2ce0 <log_0>
			return NULL;
    772a:	e7b5      	b.n	7698 <usbd_event_transfer_data+0x9c>
		ev = (struct usbd_event *)block.data;
    772c:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    772e:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    7730:	2304      	movs	r3, #4
    7732:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    7734:	4873      	ldr	r0, [pc, #460]	; (7904 <usbd_event_transfer_data+0x308>)
    7736:	f00d ff53 	bl	155e0 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    773a:	4973      	ldr	r1, [pc, #460]	; (7908 <usbd_event_transfer_data+0x30c>)
    773c:	4873      	ldr	r0, [pc, #460]	; (790c <usbd_event_transfer_data+0x310>)
    773e:	f00d ff70 	bl	15622 <k_work_submit_to_queue>
		return NULL;
    7742:	e7a9      	b.n	7698 <usbd_event_transfer_data+0x9c>
    7744:	4b72      	ldr	r3, [pc, #456]	; (7910 <usbd_event_transfer_data+0x314>)
    7746:	4a73      	ldr	r2, [pc, #460]	; (7914 <usbd_event_transfer_data+0x318>)
    7748:	1a9b      	subs	r3, r3, r2
    774a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    774c:	f04f 0100 	mov.w	r1, #0
    7750:	2201      	movs	r2, #1
    7752:	f362 0102 	bfi	r1, r2, #0, #3
    7756:	f36f 01c5 	bfc	r1, #3, #3
    775a:	f363 118f 	bfi	r1, r3, #6, #10
    775e:	486f      	ldr	r0, [pc, #444]	; (791c <usbd_event_transfer_data+0x320>)
    7760:	f7fb fabe 	bl	2ce0 <log_0>
static inline void usbd_evt_flush(void)
    7764:	e004      	b.n	7770 <usbd_event_transfer_data+0x174>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    7766:	1d01      	adds	r1, r0, #4
    7768:	4865      	ldr	r0, [pc, #404]	; (7900 <usbd_event_transfer_data+0x304>)
    776a:	f00d fe16 	bl	1539a <k_mem_slab_free>
	} while (ev != NULL);
    776e:	b144      	cbz	r4, 7782 <usbd_event_transfer_data+0x186>
    7770:	2200      	movs	r2, #0
    7772:	2300      	movs	r3, #0
    7774:	4863      	ldr	r0, [pc, #396]	; (7904 <usbd_event_transfer_data+0x308>)
    7776:	f008 f833 	bl	f7e0 <z_impl_k_queue_get>
		if (ev) {
    777a:	4604      	mov	r4, r0
    777c:	2800      	cmp	r0, #0
    777e:	d1f2      	bne.n	7766 <usbd_event_transfer_data+0x16a>
    7780:	e7f5      	b.n	776e <usbd_event_transfer_data+0x172>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    7782:	2200      	movs	r2, #0
    7784:	2300      	movs	r3, #0
    7786:	a901      	add	r1, sp, #4
    7788:	485d      	ldr	r0, [pc, #372]	; (7900 <usbd_event_transfer_data+0x304>)
    778a:	f007 fe21 	bl	f3d0 <k_mem_slab_alloc>
    778e:	b180      	cbz	r0, 77b2 <usbd_event_transfer_data+0x1b6>
    7790:	4b5f      	ldr	r3, [pc, #380]	; (7910 <usbd_event_transfer_data+0x314>)
    7792:	4a60      	ldr	r2, [pc, #384]	; (7914 <usbd_event_transfer_data+0x318>)
    7794:	1a9b      	subs	r3, r3, r2
    7796:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    7798:	f04f 0100 	mov.w	r1, #0
    779c:	2201      	movs	r2, #1
    779e:	f362 0102 	bfi	r1, r2, #0, #3
    77a2:	f36f 01c5 	bfc	r1, #3, #3
    77a6:	f363 118f 	bfi	r1, r3, #6, #10
    77aa:	485d      	ldr	r0, [pc, #372]	; (7920 <usbd_event_transfer_data+0x324>)
    77ac:	f7fb fa98 	bl	2ce0 <log_0>
			return NULL;
    77b0:	e741      	b.n	7636 <usbd_event_transfer_data+0x3a>
		ev = (struct usbd_event *)block.data;
    77b2:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    77b4:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    77b6:	2304      	movs	r3, #4
    77b8:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    77ba:	4852      	ldr	r0, [pc, #328]	; (7904 <usbd_event_transfer_data+0x308>)
    77bc:	f00d ff10 	bl	155e0 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    77c0:	4951      	ldr	r1, [pc, #324]	; (7908 <usbd_event_transfer_data+0x30c>)
    77c2:	4852      	ldr	r0, [pc, #328]	; (790c <usbd_event_transfer_data+0x310>)
    77c4:	f00d ff2d 	bl	15622 <k_work_submit_to_queue>
		return NULL;
    77c8:	e735      	b.n	7636 <usbd_event_transfer_data+0x3a>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    77ca:	2200      	movs	r2, #0
    77cc:	2300      	movs	r3, #0
    77ce:	a901      	add	r1, sp, #4
    77d0:	484b      	ldr	r0, [pc, #300]	; (7900 <usbd_event_transfer_data+0x304>)
    77d2:	f007 fdfd 	bl	f3d0 <k_mem_slab_alloc>
    77d6:	b9f0      	cbnz	r0, 7816 <usbd_event_transfer_data+0x21a>
	ev = (struct usbd_event *)block.data;
    77d8:	9e01      	ldr	r6, [sp, #4]
	ev->block = block;
    77da:	6076      	str	r6, [r6, #4]
			if (!ev) {
    77dc:	2e00      	cmp	r6, #0
    77de:	f000 808d 	beq.w	78fc <usbd_event_transfer_data+0x300>
				p_event->data.eptransfer.ep);
    77e2:	78a3      	ldrb	r3, [r4, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    77e4:	f994 2002 	ldrsb.w	r2, [r4, #2]
    77e8:	2a00      	cmp	r2, #0
    77ea:	db57      	blt.n	789c <usbd_event_transfer_data+0x2a0>
            ret = p_reg->EPIN[epnr].AMOUNT;
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    77ec:	f013 0f08 	tst.w	r3, #8
    77f0:	d067      	beq.n	78c2 <usbd_event_transfer_data+0x2c6>
        {
            ret = p_reg->ISOOUT.AMOUNT;
    77f2:	4b4c      	ldr	r3, [pc, #304]	; (7924 <usbd_event_transfer_data+0x328>)
    77f4:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
    77f8:	60eb      	str	r3, [r5, #12]
			ev->evt_type = USBD_EVT_EP;
    77fa:	2301      	movs	r3, #1
    77fc:	7433      	strb	r3, [r6, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    77fe:	2302      	movs	r3, #2
    7800:	7333      	strb	r3, [r6, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    7802:	60b5      	str	r5, [r6, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    7804:	4631      	mov	r1, r6
    7806:	483f      	ldr	r0, [pc, #252]	; (7904 <usbd_event_transfer_data+0x308>)
    7808:	f00d feea 	bl	155e0 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    780c:	493e      	ldr	r1, [pc, #248]	; (7908 <usbd_event_transfer_data+0x30c>)
    780e:	483f      	ldr	r0, [pc, #252]	; (790c <usbd_event_transfer_data+0x310>)
    7810:	f00d ff07 	bl	15622 <k_work_submit_to_queue>
}
    7814:	e072      	b.n	78fc <usbd_event_transfer_data+0x300>
    7816:	4b3e      	ldr	r3, [pc, #248]	; (7910 <usbd_event_transfer_data+0x314>)
    7818:	4a3e      	ldr	r2, [pc, #248]	; (7914 <usbd_event_transfer_data+0x318>)
    781a:	1a9b      	subs	r3, r3, r2
    781c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    781e:	f04f 0100 	mov.w	r1, #0
    7822:	2201      	movs	r2, #1
    7824:	f362 0102 	bfi	r1, r2, #0, #3
    7828:	f36f 01c5 	bfc	r1, #3, #3
    782c:	f363 118f 	bfi	r1, r3, #6, #10
    7830:	483a      	ldr	r0, [pc, #232]	; (791c <usbd_event_transfer_data+0x320>)
    7832:	f7fb fa55 	bl	2ce0 <log_0>
static inline void usbd_evt_flush(void)
    7836:	e004      	b.n	7842 <usbd_event_transfer_data+0x246>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    7838:	1d01      	adds	r1, r0, #4
    783a:	4831      	ldr	r0, [pc, #196]	; (7900 <usbd_event_transfer_data+0x304>)
    783c:	f00d fdad 	bl	1539a <k_mem_slab_free>
	} while (ev != NULL);
    7840:	b146      	cbz	r6, 7854 <usbd_event_transfer_data+0x258>
    7842:	2200      	movs	r2, #0
    7844:	2300      	movs	r3, #0
    7846:	482f      	ldr	r0, [pc, #188]	; (7904 <usbd_event_transfer_data+0x308>)
    7848:	f007 ffca 	bl	f7e0 <z_impl_k_queue_get>
		if (ev) {
    784c:	4606      	mov	r6, r0
    784e:	2800      	cmp	r0, #0
    7850:	d1f2      	bne.n	7838 <usbd_event_transfer_data+0x23c>
    7852:	e7f5      	b.n	7840 <usbd_event_transfer_data+0x244>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    7854:	2200      	movs	r2, #0
    7856:	2300      	movs	r3, #0
    7858:	a901      	add	r1, sp, #4
    785a:	4829      	ldr	r0, [pc, #164]	; (7900 <usbd_event_transfer_data+0x304>)
    785c:	f007 fdb8 	bl	f3d0 <k_mem_slab_alloc>
    7860:	b180      	cbz	r0, 7884 <usbd_event_transfer_data+0x288>
    7862:	4b2b      	ldr	r3, [pc, #172]	; (7910 <usbd_event_transfer_data+0x314>)
    7864:	4a2b      	ldr	r2, [pc, #172]	; (7914 <usbd_event_transfer_data+0x318>)
    7866:	1a9b      	subs	r3, r3, r2
    7868:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    786a:	f04f 0100 	mov.w	r1, #0
    786e:	2201      	movs	r2, #1
    7870:	f362 0102 	bfi	r1, r2, #0, #3
    7874:	f36f 01c5 	bfc	r1, #3, #3
    7878:	f363 118f 	bfi	r1, r3, #6, #10
    787c:	4828      	ldr	r0, [pc, #160]	; (7920 <usbd_event_transfer_data+0x324>)
    787e:	f7fb fa2f 	bl	2ce0 <log_0>
			return NULL;
    7882:	e7ab      	b.n	77dc <usbd_event_transfer_data+0x1e0>
		ev = (struct usbd_event *)block.data;
    7884:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    7886:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    7888:	2304      	movs	r3, #4
    788a:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    788c:	481d      	ldr	r0, [pc, #116]	; (7904 <usbd_event_transfer_data+0x308>)
    788e:	f00d fea7 	bl	155e0 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    7892:	491d      	ldr	r1, [pc, #116]	; (7908 <usbd_event_transfer_data+0x30c>)
    7894:	481d      	ldr	r0, [pc, #116]	; (790c <usbd_event_transfer_data+0x310>)
    7896:	f00d fec4 	bl	15622 <k_work_submit_to_queue>
		return NULL;
    789a:	e79f      	b.n	77dc <usbd_event_transfer_data+0x1e0>
        if (NRF_USBD_EPISO_CHECK(ep))
    789c:	f013 0f08 	tst.w	r3, #8
    78a0:	d003      	beq.n	78aa <usbd_event_transfer_data+0x2ae>
            ret = p_reg->ISOIN.AMOUNT;
    78a2:	4b20      	ldr	r3, [pc, #128]	; (7924 <usbd_event_transfer_data+0x328>)
    78a4:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
    78a8:	e7a6      	b.n	77f8 <usbd_event_transfer_data+0x1fc>
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    78aa:	f003 030f 	and.w	r3, r3, #15
            ret = p_reg->EPIN[epnr].AMOUNT;
    78ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    78b2:	009b      	lsls	r3, r3, #2
    78b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    78b8:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    78bc:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    78c0:	e79a      	b.n	77f8 <usbd_event_transfer_data+0x1fc>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    78c2:	f003 030f 	and.w	r3, r3, #15
            ret = p_reg->EPOUT[epnr].AMOUNT;
    78c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    78ca:	009b      	lsls	r3, r3, #2
    78cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    78d0:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    78d4:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    78d8:	e78e      	b.n	77f8 <usbd_event_transfer_data+0x1fc>
    78da:	4a0d      	ldr	r2, [pc, #52]	; (7910 <usbd_event_transfer_data+0x314>)
    78dc:	4b0d      	ldr	r3, [pc, #52]	; (7914 <usbd_event_transfer_data+0x318>)
    78de:	1ad2      	subs	r2, r2, r3
    78e0:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    78e2:	f04f 0300 	mov.w	r3, #0
    78e6:	2001      	movs	r0, #1
    78e8:	f360 0302 	bfi	r3, r0, #0, #3
    78ec:	f36f 03c5 	bfc	r3, #3, #3
    78f0:	f362 138f 	bfi	r3, r2, #6, #10
    78f4:	4632      	mov	r2, r6
    78f6:	4808      	ldr	r0, [pc, #32]	; (7918 <usbd_event_transfer_data+0x31c>)
    78f8:	f7fb f994 	bl	2c24 <log_2>
}
    78fc:	b002      	add	sp, #8
    78fe:	bd70      	pop	{r4, r5, r6, pc}
    7900:	20000348 	.word	0x20000348
    7904:	2000044c 	.word	0x2000044c
    7908:	20002418 	.word	0x20002418
    790c:	200006f8 	.word	0x200006f8
    7910:	00015f20 	.word	0x00015f20
    7914:	00015ea8 	.word	0x00015ea8
    7918:	000170b0 	.word	0x000170b0
    791c:	00016fb0 	.word	0x00016fb0
    7920:	00016fd0 	.word	0x00016fd0
    7924:	40027000 	.word	0x40027000

00007928 <usbd_event_handler>:
{
    7928:	b510      	push	{r4, lr}
    792a:	b088      	sub	sp, #32
	struct usbd_event evt = {0};
    792c:	2300      	movs	r3, #0
    792e:	9303      	str	r3, [sp, #12]
    7930:	9304      	str	r3, [sp, #16]
    7932:	9305      	str	r3, [sp, #20]
    7934:	9306      	str	r3, [sp, #24]
    7936:	9307      	str	r3, [sp, #28]
	switch (p_event->type) {
    7938:	7803      	ldrb	r3, [r0, #0]
    793a:	3b01      	subs	r3, #1
    793c:	2b05      	cmp	r3, #5
    793e:	d826      	bhi.n	798e <usbd_event_handler+0x66>
    7940:	e8df f003 	tbb	[pc, r3]
    7944:	2e270335 	.word	0x2e270335
    7948:	3953      	.short	0x3953
		evt.evt_type = USBD_EVT_POWER;
    794a:	2300      	movs	r3, #0
    794c:	f88d 301c 	strb.w	r3, [sp, #28]
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    7950:	2303      	movs	r3, #3
    7952:	f88d 3014 	strb.w	r3, [sp, #20]
	if (k_mem_slab_alloc(&fifo_elem_slab,
    7956:	2200      	movs	r2, #0
    7958:	2300      	movs	r3, #0
    795a:	a901      	add	r1, sp, #4
    795c:	4850      	ldr	r0, [pc, #320]	; (7aa0 <usbd_event_handler+0x178>)
    795e:	f007 fd37 	bl	f3d0 <k_mem_slab_alloc>
    7962:	2800      	cmp	r0, #0
    7964:	d159      	bne.n	7a1a <usbd_event_handler+0xf2>
	ev = (struct usbd_event *)block.data;
    7966:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    7968:	6064      	str	r4, [r4, #4]
		if (!ev) {
    796a:	b184      	cbz	r4, 798e <usbd_event_handler+0x66>
		ev->evt_type = evt.evt_type;
    796c:	f89d 301c 	ldrb.w	r3, [sp, #28]
    7970:	7423      	strb	r3, [r4, #16]
		ev->evt = evt.evt;
    7972:	f104 0308 	add.w	r3, r4, #8
    7976:	9906      	ldr	r1, [sp, #24]
    7978:	9805      	ldr	r0, [sp, #20]
    797a:	e883 0003 	stmia.w	r3, {r0, r1}
	k_fifo_put(&usbd_evt_fifo, ev);
    797e:	4621      	mov	r1, r4
    7980:	4848      	ldr	r0, [pc, #288]	; (7aa4 <usbd_event_handler+0x17c>)
    7982:	f00d fe2d 	bl	155e0 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    7986:	4948      	ldr	r1, [pc, #288]	; (7aa8 <usbd_event_handler+0x180>)
    7988:	4848      	ldr	r0, [pc, #288]	; (7aac <usbd_event_handler+0x184>)
    798a:	f00d fe4a 	bl	15622 <k_work_submit_to_queue>
}
    798e:	b008      	add	sp, #32
    7990:	bd10      	pop	{r4, pc}
		evt.evt_type = USBD_EVT_POWER;
    7992:	2300      	movs	r3, #0
    7994:	f88d 301c 	strb.w	r3, [sp, #28]
		evt.evt.pwr_evt.state = USBD_RESUMED;
    7998:	2304      	movs	r3, #4
    799a:	f88d 3014 	strb.w	r3, [sp, #20]
	if (put_evt) {
    799e:	e7da      	b.n	7956 <usbd_event_handler+0x2e>
		evt.evt_type = USBD_EVT_POWER;
    79a0:	2300      	movs	r3, #0
    79a2:	f88d 301c 	strb.w	r3, [sp, #28]
		evt.evt.pwr_evt.state = USBD_RESUMED;
    79a6:	2304      	movs	r3, #4
    79a8:	f88d 3014 	strb.w	r3, [sp, #20]
	if (put_evt) {
    79ac:	e7d3      	b.n	7956 <usbd_event_handler+0x2e>
		evt.evt_type = USBD_EVT_RESET;
    79ae:	2302      	movs	r3, #2
    79b0:	f88d 301c 	strb.w	r3, [sp, #28]
	if (put_evt) {
    79b4:	e7cf      	b.n	7956 <usbd_event_handler+0x2e>
    79b6:	4604      	mov	r4, r0
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    79b8:	7880      	ldrb	r0, [r0, #2]
    79ba:	f7ff f8eb 	bl	6b94 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    79be:	7a83      	ldrb	r3, [r0, #10]
    79c0:	2b01      	cmp	r3, #1
    79c2:	d00e      	beq.n	79e2 <usbd_event_handler+0xba>
    79c4:	d805      	bhi.n	79d2 <usbd_event_handler+0xaa>
    79c6:	2b00      	cmp	r3, #0
    79c8:	d1e1      	bne.n	798e <usbd_event_handler+0x66>
			usbd_event_transfer_ctrl(p_event);
    79ca:	4620      	mov	r0, r4
    79cc:	f7ff fc7e 	bl	72cc <usbd_event_transfer_ctrl>
	if (put_evt) {
    79d0:	e7dd      	b.n	798e <usbd_event_handler+0x66>
    79d2:	3b02      	subs	r3, #2
    79d4:	b2db      	uxtb	r3, r3
    79d6:	2b01      	cmp	r3, #1
    79d8:	d8d9      	bhi.n	798e <usbd_event_handler+0x66>
			usbd_event_transfer_data(p_event);
    79da:	4620      	mov	r0, r4
    79dc:	f7ff fe0e 	bl	75fc <usbd_event_transfer_data>
	if (put_evt) {
    79e0:	e7d5      	b.n	798e <usbd_event_handler+0x66>
			usbd_event_transfer_data(p_event);
    79e2:	4620      	mov	r0, r4
    79e4:	f7ff fe0a 	bl	75fc <usbd_event_transfer_data>
	if (put_evt) {
    79e8:	e7d1      	b.n	798e <usbd_event_handler+0x66>
		nrfx_usbd_setup_get(&drv_setup);
    79ea:	a801      	add	r0, sp, #4
    79ec:	f004 f806 	bl	b9fc <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
    79f0:	f89d 3005 	ldrb.w	r3, [sp, #5]
    79f4:	2b05      	cmp	r3, #5
    79f6:	d00a      	beq.n	7a0e <usbd_event_handler+0xe6>
				endpoint_ctx(NRF_USBD_EPOUT(0));
    79f8:	2000      	movs	r0, #0
    79fa:	f7ff f8cb 	bl	6b94 <endpoint_ctx>
			evt.evt_type = USBD_EVT_EP;
    79fe:	2301      	movs	r3, #1
    7a00:	f88d 301c 	strb.w	r3, [sp, #28]
			evt.evt.ep_evt.ep = ep_ctx;
    7a04:	9005      	str	r0, [sp, #20]
			evt.evt.ep_evt.evt_type = EP_EVT_SETUP_RECV;
    7a06:	2300      	movs	r3, #0
    7a08:	f88d 3018 	strb.w	r3, [sp, #24]
	if (put_evt) {
    7a0c:	e7a3      	b.n	7956 <usbd_event_handler+0x2e>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
    7a0e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    7a12:	f013 0f60 	tst.w	r3, #96	; 0x60
    7a16:	d0ba      	beq.n	798e <usbd_event_handler+0x66>
    7a18:	e7ee      	b.n	79f8 <usbd_event_handler+0xd0>
    7a1a:	4b25      	ldr	r3, [pc, #148]	; (7ab0 <usbd_event_handler+0x188>)
    7a1c:	4a25      	ldr	r2, [pc, #148]	; (7ab4 <usbd_event_handler+0x18c>)
    7a1e:	1a9b      	subs	r3, r3, r2
    7a20:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    7a22:	f04f 0100 	mov.w	r1, #0
    7a26:	2201      	movs	r2, #1
    7a28:	f362 0102 	bfi	r1, r2, #0, #3
    7a2c:	f36f 01c5 	bfc	r1, #3, #3
    7a30:	f363 118f 	bfi	r1, r3, #6, #10
    7a34:	4820      	ldr	r0, [pc, #128]	; (7ab8 <usbd_event_handler+0x190>)
    7a36:	f7fb f953 	bl	2ce0 <log_0>
static inline void usbd_evt_flush(void)
    7a3a:	e004      	b.n	7a46 <usbd_event_handler+0x11e>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    7a3c:	1d01      	adds	r1, r0, #4
    7a3e:	4818      	ldr	r0, [pc, #96]	; (7aa0 <usbd_event_handler+0x178>)
    7a40:	f00d fcab 	bl	1539a <k_mem_slab_free>
	} while (ev != NULL);
    7a44:	b144      	cbz	r4, 7a58 <usbd_event_handler+0x130>
    7a46:	2200      	movs	r2, #0
    7a48:	2300      	movs	r3, #0
    7a4a:	4816      	ldr	r0, [pc, #88]	; (7aa4 <usbd_event_handler+0x17c>)
    7a4c:	f007 fec8 	bl	f7e0 <z_impl_k_queue_get>
		if (ev) {
    7a50:	4604      	mov	r4, r0
    7a52:	2800      	cmp	r0, #0
    7a54:	d1f2      	bne.n	7a3c <usbd_event_handler+0x114>
    7a56:	e7f5      	b.n	7a44 <usbd_event_handler+0x11c>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    7a58:	2200      	movs	r2, #0
    7a5a:	2300      	movs	r3, #0
    7a5c:	a901      	add	r1, sp, #4
    7a5e:	4810      	ldr	r0, [pc, #64]	; (7aa0 <usbd_event_handler+0x178>)
    7a60:	f007 fcb6 	bl	f3d0 <k_mem_slab_alloc>
    7a64:	b180      	cbz	r0, 7a88 <usbd_event_handler+0x160>
    7a66:	4b12      	ldr	r3, [pc, #72]	; (7ab0 <usbd_event_handler+0x188>)
    7a68:	4a12      	ldr	r2, [pc, #72]	; (7ab4 <usbd_event_handler+0x18c>)
    7a6a:	1a9b      	subs	r3, r3, r2
    7a6c:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    7a6e:	f04f 0100 	mov.w	r1, #0
    7a72:	2201      	movs	r2, #1
    7a74:	f362 0102 	bfi	r1, r2, #0, #3
    7a78:	f36f 01c5 	bfc	r1, #3, #3
    7a7c:	f363 118f 	bfi	r1, r3, #6, #10
    7a80:	480e      	ldr	r0, [pc, #56]	; (7abc <usbd_event_handler+0x194>)
    7a82:	f7fb f92d 	bl	2ce0 <log_0>
			return NULL;
    7a86:	e770      	b.n	796a <usbd_event_handler+0x42>
		ev = (struct usbd_event *)block.data;
    7a88:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    7a8a:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    7a8c:	2304      	movs	r3, #4
    7a8e:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    7a90:	4804      	ldr	r0, [pc, #16]	; (7aa4 <usbd_event_handler+0x17c>)
    7a92:	f00d fda5 	bl	155e0 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    7a96:	4904      	ldr	r1, [pc, #16]	; (7aa8 <usbd_event_handler+0x180>)
    7a98:	4804      	ldr	r0, [pc, #16]	; (7aac <usbd_event_handler+0x184>)
    7a9a:	f00d fdc2 	bl	15622 <k_work_submit_to_queue>
		return NULL;
    7a9e:	e764      	b.n	796a <usbd_event_handler+0x42>
    7aa0:	20000348 	.word	0x20000348
    7aa4:	2000044c 	.word	0x2000044c
    7aa8:	20002418 	.word	0x20002418
    7aac:	200006f8 	.word	0x200006f8
    7ab0:	00015f20 	.word	0x00015f20
    7ab4:	00015ea8 	.word	0x00015ea8
    7ab8:	00016fb0 	.word	0x00016fb0
    7abc:	00016fd0 	.word	0x00016fd0

00007ac0 <usb_dc_attach>:
{
    7ac0:	b510      	push	{r4, lr}
	if (ctx->attached) {
    7ac2:	4b1d      	ldr	r3, [pc, #116]	; (7b38 <usb_dc_attach+0x78>)
    7ac4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    7ac8:	b113      	cbz	r3, 7ad0 <usb_dc_attach+0x10>
		return 0;
    7aca:	2400      	movs	r4, #0
}
    7acc:	4620      	mov	r0, r4
    7ace:	bd10      	pop	{r4, pc}
	return z_impl_k_mutex_init(mutex);
    7ad0:	4c19      	ldr	r4, [pc, #100]	; (7b38 <usb_dc_attach+0x78>)
    7ad2:	f104 0038 	add.w	r0, r4, #56	; 0x38
    7ad6:	f00d fcff 	bl	154d8 <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
    7ada:	2000      	movs	r0, #0
    7adc:	f000 fd36 	bl	854c <z_nrf_clock_control_get_onoff>
	ctx->hfxo_mgr =
    7ae0:	61e0      	str	r0, [r4, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    7ae2:	2200      	movs	r2, #0
    7ae4:	2101      	movs	r1, #1
    7ae6:	2027      	movs	r0, #39	; 0x27
    7ae8:	f7fd fb38 	bl	515c <z_arm_irq_priority_set>
	err = nrfx_usbd_init(usbd_event_handler);
    7aec:	4813      	ldr	r0, [pc, #76]	; (7b3c <usb_dc_attach+0x7c>)
    7aee:	f003 fb0d 	bl	b10c <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
    7af2:	4b13      	ldr	r3, [pc, #76]	; (7b40 <usb_dc_attach+0x80>)
    7af4:	4298      	cmp	r0, r3
    7af6:	d11b      	bne.n	7b30 <usb_dc_attach+0x70>
	nrfx_power_usbevt_enable();
    7af8:	f00c f884 	bl	13c04 <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
    7afc:	f7ff f87e 	bl	6bfc <eps_ctx_init>
	if (ret == 0) {
    7b00:	4604      	mov	r4, r0
    7b02:	b918      	cbnz	r0, 7b0c <usb_dc_attach+0x4c>
		ctx->attached = true;
    7b04:	4b0c      	ldr	r3, [pc, #48]	; (7b38 <usb_dc_attach+0x78>)
    7b06:	2201      	movs	r2, #1
    7b08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
    7b0c:	4b0d      	ldr	r3, [pc, #52]	; (7b44 <usb_dc_attach+0x84>)
    7b0e:	681b      	ldr	r3, [r3, #0]
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
    7b10:	b11b      	cbz	r3, 7b1a <usb_dc_attach+0x5a>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    7b12:	490d      	ldr	r1, [pc, #52]	; (7b48 <usb_dc_attach+0x88>)
    7b14:	480d      	ldr	r0, [pc, #52]	; (7b4c <usb_dc_attach+0x8c>)
    7b16:	f00d fd84 	bl	15622 <k_work_submit_to_queue>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
    7b1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7b1e:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
    7b22:	f013 0f01 	tst.w	r3, #1
    7b26:	d0d1      	beq.n	7acc <usb_dc_attach+0xc>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
    7b28:	2000      	movs	r0, #0
    7b2a:	f7ff f935 	bl	6d98 <usb_dc_power_event_handler>
    7b2e:	e7cd      	b.n	7acc <usb_dc_attach+0xc>
		return -EIO;
    7b30:	f06f 0404 	mvn.w	r4, #4
    7b34:	e7ca      	b.n	7acc <usb_dc_attach+0xc>
    7b36:	bf00      	nop
    7b38:	200023f0 	.word	0x200023f0
    7b3c:	00007929 	.word	0x00007929
    7b40:	0bad0000 	.word	0x0bad0000
    7b44:	2000044c 	.word	0x2000044c
    7b48:	20002418 	.word	0x20002418
    7b4c:	200006f8 	.word	0x200006f8

00007b50 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
    7b50:	4b07      	ldr	r3, [pc, #28]	; (7b70 <usb_dc_set_address+0x20>)
    7b52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    7b56:	b12b      	cbz	r3, 7b64 <usb_dc_set_address+0x14>
	return get_usbd_ctx()->ready;
    7b58:	4b05      	ldr	r3, [pc, #20]	; (7b70 <usb_dc_set_address+0x20>)
    7b5a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    7b5e:	b123      	cbz	r3, 7b6a <usb_dc_set_address+0x1a>
	return 0;
    7b60:	2000      	movs	r0, #0
    7b62:	4770      	bx	lr
		return -ENODEV;
    7b64:	f06f 0012 	mvn.w	r0, #18
    7b68:	4770      	bx	lr
    7b6a:	f06f 0012 	mvn.w	r0, #18
}
    7b6e:	4770      	bx	lr
    7b70:	200023f0 	.word	0x200023f0

00007b74 <usb_dc_ep_check_cap>:
{
    7b74:	b508      	push	{r3, lr}
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    7b76:	7801      	ldrb	r1, [r0, #0]
    7b78:	f001 020f 	and.w	r2, r1, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    7b7c:	7903      	ldrb	r3, [r0, #4]
    7b7e:	b903      	cbnz	r3, 7b82 <usb_dc_ep_check_cap+0xe>
    7b80:	b92a      	cbnz	r2, 7b8e <usb_dc_ep_check_cap+0x1a>
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    7b82:	2a08      	cmp	r2, #8
    7b84:	d816      	bhi.n	7bb4 <usb_dc_ep_check_cap+0x40>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    7b86:	2b01      	cmp	r3, #1
    7b88:	d027      	beq.n	7bda <usb_dc_ep_check_cap+0x66>
	return 0;
    7b8a:	2000      	movs	r0, #0
}
    7b8c:	bd08      	pop	{r3, pc}
    7b8e:	4b17      	ldr	r3, [pc, #92]	; (7bec <usb_dc_ep_check_cap+0x78>)
    7b90:	4a17      	ldr	r2, [pc, #92]	; (7bf0 <usb_dc_ep_check_cap+0x7c>)
    7b92:	1a9b      	subs	r3, r3, r2
    7b94:	08db      	lsrs	r3, r3, #3
		LOG_ERR("invalid endpoint configuration");
    7b96:	f04f 0100 	mov.w	r1, #0
    7b9a:	2201      	movs	r2, #1
    7b9c:	f362 0102 	bfi	r1, r2, #0, #3
    7ba0:	f36f 01c5 	bfc	r1, #3, #3
    7ba4:	f363 118f 	bfi	r1, r3, #6, #10
    7ba8:	4812      	ldr	r0, [pc, #72]	; (7bf4 <usb_dc_ep_check_cap+0x80>)
    7baa:	f7fb f899 	bl	2ce0 <log_0>
		return -1;
    7bae:	f04f 30ff 	mov.w	r0, #4294967295
    7bb2:	e7eb      	b.n	7b8c <usb_dc_ep_check_cap+0x18>
    7bb4:	4b0d      	ldr	r3, [pc, #52]	; (7bec <usb_dc_ep_check_cap+0x78>)
    7bb6:	4a0e      	ldr	r2, [pc, #56]	; (7bf0 <usb_dc_ep_check_cap+0x7c>)
    7bb8:	1a9b      	subs	r3, r3, r2
    7bba:	08db      	lsrs	r3, r3, #3
		LOG_ERR("invalid endpoint index/address");
    7bbc:	f04f 0100 	mov.w	r1, #0
    7bc0:	2201      	movs	r2, #1
    7bc2:	f362 0102 	bfi	r1, r2, #0, #3
    7bc6:	f36f 01c5 	bfc	r1, #3, #3
    7bca:	f363 118f 	bfi	r1, r3, #6, #10
    7bce:	480a      	ldr	r0, [pc, #40]	; (7bf8 <usb_dc_ep_check_cap+0x84>)
    7bd0:	f7fb f886 	bl	2ce0 <log_0>
		return -1;
    7bd4:	f04f 30ff 	mov.w	r0, #4294967295
    7bd8:	e7d8      	b.n	7b8c <usb_dc_ep_check_cap+0x18>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    7bda:	f011 0f08 	tst.w	r1, #8
    7bde:	d001      	beq.n	7be4 <usb_dc_ep_check_cap+0x70>
	return 0;
    7be0:	2000      	movs	r0, #0
    7be2:	e7d3      	b.n	7b8c <usb_dc_ep_check_cap+0x18>
		return -1;
    7be4:	f04f 30ff 	mov.w	r0, #4294967295
    7be8:	e7d0      	b.n	7b8c <usb_dc_ep_check_cap+0x18>
    7bea:	bf00      	nop
    7bec:	00015f20 	.word	0x00015f20
    7bf0:	00015ea8 	.word	0x00015ea8
    7bf4:	000170fc 	.word	0x000170fc
    7bf8:	0001711c 	.word	0x0001711c

00007bfc <usb_dc_ep_configure>:
{
    7bfc:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    7bfe:	4b1a      	ldr	r3, [pc, #104]	; (7c68 <usb_dc_ep_configure+0x6c>)
    7c00:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
    7c04:	b353      	cbz	r3, 7c5c <usb_dc_ep_configure+0x60>
    7c06:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    7c08:	7805      	ldrb	r5, [r0, #0]
    7c0a:	4628      	mov	r0, r5
    7c0c:	f7fe ffc2 	bl	6b94 <endpoint_ctx>
	if (!ep_ctx) {
    7c10:	b338      	cbz	r0, 7c62 <usb_dc_ep_configure+0x66>
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    7c12:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    7c14:	7922      	ldrb	r2, [r4, #4]
    7c16:	7282      	strb	r2, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    7c18:	8862      	ldrh	r2, [r4, #2]
    7c1a:	6042      	str	r2, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    7c1c:	7820      	ldrb	r0, [r4, #0]
    7c1e:	f010 0f08 	tst.w	r0, #8
    7c22:	d103      	bne.n	7c2c <usb_dc_ep_configure+0x30>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    7c24:	8863      	ldrh	r3, [r4, #2]
    7c26:	1e5a      	subs	r2, r3, #1
    7c28:	4213      	tst	r3, r2
    7c2a:	d104      	bne.n	7c36 <usb_dc_ep_configure+0x3a>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    7c2c:	8861      	ldrh	r1, [r4, #2]
    7c2e:	f003 fa5d 	bl	b0ec <nrfx_usbd_ep_max_packet_size_set>
	return 0;
    7c32:	2000      	movs	r0, #0
}
    7c34:	bd38      	pop	{r3, r4, r5, pc}
    7c36:	4b0d      	ldr	r3, [pc, #52]	; (7c6c <usb_dc_ep_configure+0x70>)
    7c38:	4a0d      	ldr	r2, [pc, #52]	; (7c70 <usb_dc_ep_configure+0x74>)
    7c3a:	1a9b      	subs	r3, r3, r2
    7c3c:	08db      	lsrs	r3, r3, #3
			LOG_ERR("EP max packet size must be a power of 2");
    7c3e:	f04f 0100 	mov.w	r1, #0
    7c42:	2201      	movs	r2, #1
    7c44:	f362 0102 	bfi	r1, r2, #0, #3
    7c48:	f36f 01c5 	bfc	r1, #3, #3
    7c4c:	f363 118f 	bfi	r1, r3, #6, #10
    7c50:	4808      	ldr	r0, [pc, #32]	; (7c74 <usb_dc_ep_configure+0x78>)
    7c52:	f7fb f845 	bl	2ce0 <log_0>
			return -EINVAL;
    7c56:	f06f 0015 	mvn.w	r0, #21
    7c5a:	e7eb      	b.n	7c34 <usb_dc_ep_configure+0x38>
		return -ENODEV;
    7c5c:	f06f 0012 	mvn.w	r0, #18
    7c60:	e7e8      	b.n	7c34 <usb_dc_ep_configure+0x38>
		return -EINVAL;
    7c62:	f06f 0015 	mvn.w	r0, #21
    7c66:	e7e5      	b.n	7c34 <usb_dc_ep_configure+0x38>
    7c68:	200023f0 	.word	0x200023f0
    7c6c:	00015f20 	.word	0x00015f20
    7c70:	00015ea8 	.word	0x00015ea8
    7c74:	0001713c 	.word	0x0001713c

00007c78 <usb_dc_ep_set_stall>:
{
    7c78:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    7c7a:	4b1e      	ldr	r3, [pc, #120]	; (7cf4 <usb_dc_ep_set_stall+0x7c>)
    7c7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    7c80:	b37b      	cbz	r3, 7ce2 <usb_dc_ep_set_stall+0x6a>
    7c82:	4604      	mov	r4, r0
	return get_usbd_ctx()->ready;
    7c84:	4b1b      	ldr	r3, [pc, #108]	; (7cf4 <usb_dc_ep_set_stall+0x7c>)
    7c86:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    7c8a:	b36b      	cbz	r3, 7ce8 <usb_dc_ep_set_stall+0x70>
	ep_ctx = endpoint_ctx(ep);
    7c8c:	f7fe ff82 	bl	6b94 <endpoint_ctx>
	if (!ep_ctx) {
    7c90:	4605      	mov	r5, r0
    7c92:	b360      	cbz	r0, 7cee <usb_dc_ep_set_stall+0x76>
	switch (ep_ctx->cfg.type) {
    7c94:	7a83      	ldrb	r3, [r0, #10]
    7c96:	2b01      	cmp	r3, #1
    7c98:	d010      	beq.n	7cbc <usb_dc_ep_set_stall+0x44>
    7c9a:	d807      	bhi.n	7cac <usb_dc_ep_set_stall+0x34>
    7c9c:	b90b      	cbnz	r3, 7ca2 <usb_dc_ep_set_stall+0x2a>
		nrfx_usbd_setup_stall();
    7c9e:	f003 ff33 	bl	bb08 <nrfx_usbd_setup_stall>
	ep_ctx->buf.len = 0U;
    7ca2:	2000      	movs	r0, #0
    7ca4:	60e8      	str	r0, [r5, #12]
	ep_ctx->buf.curr = ep_ctx->buf.data;
    7ca6:	696b      	ldr	r3, [r5, #20]
    7ca8:	61ab      	str	r3, [r5, #24]
}
    7caa:	bd38      	pop	{r3, r4, r5, pc}
	switch (ep_ctx->cfg.type) {
    7cac:	3b02      	subs	r3, #2
    7cae:	b2db      	uxtb	r3, r3
    7cb0:	2b01      	cmp	r3, #1
    7cb2:	d8f6      	bhi.n	7ca2 <usb_dc_ep_set_stall+0x2a>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    7cb4:	4620      	mov	r0, r4
    7cb6:	f003 fe6d 	bl	b994 <nrfx_usbd_ep_stall>
		break;
    7cba:	e7f2      	b.n	7ca2 <usb_dc_ep_set_stall+0x2a>
    7cbc:	4b0e      	ldr	r3, [pc, #56]	; (7cf8 <usb_dc_ep_set_stall+0x80>)
    7cbe:	4a0f      	ldr	r2, [pc, #60]	; (7cfc <usb_dc_ep_set_stall+0x84>)
    7cc0:	1a9b      	subs	r3, r3, r2
    7cc2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("STALL unsupported on ISO endpoint");
    7cc4:	f04f 0100 	mov.w	r1, #0
    7cc8:	2201      	movs	r2, #1
    7cca:	f362 0102 	bfi	r1, r2, #0, #3
    7cce:	f36f 01c5 	bfc	r1, #3, #3
    7cd2:	f363 118f 	bfi	r1, r3, #6, #10
    7cd6:	480a      	ldr	r0, [pc, #40]	; (7d00 <usb_dc_ep_set_stall+0x88>)
    7cd8:	f7fb f802 	bl	2ce0 <log_0>
		return -EINVAL;
    7cdc:	f06f 0015 	mvn.w	r0, #21
    7ce0:	e7e3      	b.n	7caa <usb_dc_ep_set_stall+0x32>
		return -ENODEV;
    7ce2:	f06f 0012 	mvn.w	r0, #18
    7ce6:	e7e0      	b.n	7caa <usb_dc_ep_set_stall+0x32>
    7ce8:	f06f 0012 	mvn.w	r0, #18
    7cec:	e7dd      	b.n	7caa <usb_dc_ep_set_stall+0x32>
		return -EINVAL;
    7cee:	f06f 0015 	mvn.w	r0, #21
    7cf2:	e7da      	b.n	7caa <usb_dc_ep_set_stall+0x32>
    7cf4:	200023f0 	.word	0x200023f0
    7cf8:	00015f20 	.word	0x00015f20
    7cfc:	00015ea8 	.word	0x00015ea8
    7d00:	00017164 	.word	0x00017164

00007d04 <usb_dc_ep_clear_stall>:
	return get_usbd_ctx()->attached;
    7d04:	4b11      	ldr	r3, [pc, #68]	; (7d4c <usb_dc_ep_clear_stall+0x48>)
    7d06:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    7d0a:	b19b      	cbz	r3, 7d34 <usb_dc_ep_clear_stall+0x30>
{
    7d0c:	b510      	push	{r4, lr}
    7d0e:	4604      	mov	r4, r0
	return get_usbd_ctx()->ready;
    7d10:	4b0e      	ldr	r3, [pc, #56]	; (7d4c <usb_dc_ep_clear_stall+0x48>)
    7d12:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    7d16:	b183      	cbz	r3, 7d3a <usb_dc_ep_clear_stall+0x36>
	ep_ctx = endpoint_ctx(ep);
    7d18:	f7fe ff3c 	bl	6b94 <endpoint_ctx>
	if (!ep_ctx) {
    7d1c:	b180      	cbz	r0, 7d40 <usb_dc_ep_clear_stall+0x3c>
	if (NRF_USBD_EPISO_CHECK(ep)) {
    7d1e:	f014 0f08 	tst.w	r4, #8
    7d22:	d110      	bne.n	7d46 <usb_dc_ep_clear_stall+0x42>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    7d24:	4620      	mov	r0, r4
    7d26:	f003 fe5d 	bl	b9e4 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    7d2a:	4620      	mov	r0, r4
    7d2c:	f004 f8a4 	bl	be78 <nrfx_usbd_ep_stall_clear>
	return 0;
    7d30:	2000      	movs	r0, #0
}
    7d32:	bd10      	pop	{r4, pc}
		return -ENODEV;
    7d34:	f06f 0012 	mvn.w	r0, #18
}
    7d38:	4770      	bx	lr
		return -ENODEV;
    7d3a:	f06f 0012 	mvn.w	r0, #18
    7d3e:	e7f8      	b.n	7d32 <usb_dc_ep_clear_stall+0x2e>
		return -EINVAL;
    7d40:	f06f 0015 	mvn.w	r0, #21
    7d44:	e7f5      	b.n	7d32 <usb_dc_ep_clear_stall+0x2e>
		return -EINVAL;
    7d46:	f06f 0015 	mvn.w	r0, #21
    7d4a:	e7f2      	b.n	7d32 <usb_dc_ep_clear_stall+0x2e>
    7d4c:	200023f0 	.word	0x200023f0

00007d50 <usb_dc_ep_is_stalled>:
{
    7d50:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    7d52:	4b10      	ldr	r3, [pc, #64]	; (7d94 <usb_dc_ep_is_stalled+0x44>)
    7d54:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    7d58:	b17b      	cbz	r3, 7d7a <usb_dc_ep_is_stalled+0x2a>
    7d5a:	4604      	mov	r4, r0
    7d5c:	460d      	mov	r5, r1
	return get_usbd_ctx()->ready;
    7d5e:	4b0d      	ldr	r3, [pc, #52]	; (7d94 <usb_dc_ep_is_stalled+0x44>)
    7d60:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    7d64:	b163      	cbz	r3, 7d80 <usb_dc_ep_is_stalled+0x30>
	ep_ctx = endpoint_ctx(ep);
    7d66:	f7fe ff15 	bl	6b94 <endpoint_ctx>
	if (!ep_ctx) {
    7d6a:	b160      	cbz	r0, 7d86 <usb_dc_ep_is_stalled+0x36>
	if (!stalled) {
    7d6c:	b175      	cbz	r5, 7d8c <usb_dc_ep_is_stalled+0x3c>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    7d6e:	4620      	mov	r0, r4
    7d70:	f003 fe18 	bl	b9a4 <nrfx_usbd_ep_stall_check>
    7d74:	7028      	strb	r0, [r5, #0]
	return 0;
    7d76:	2000      	movs	r0, #0
}
    7d78:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    7d7a:	f06f 0012 	mvn.w	r0, #18
    7d7e:	e7fb      	b.n	7d78 <usb_dc_ep_is_stalled+0x28>
    7d80:	f06f 0012 	mvn.w	r0, #18
    7d84:	e7f8      	b.n	7d78 <usb_dc_ep_is_stalled+0x28>
		return -EINVAL;
    7d86:	f06f 0015 	mvn.w	r0, #21
    7d8a:	e7f5      	b.n	7d78 <usb_dc_ep_is_stalled+0x28>
		return -EINVAL;
    7d8c:	f06f 0015 	mvn.w	r0, #21
    7d90:	e7f2      	b.n	7d78 <usb_dc_ep_is_stalled+0x28>
    7d92:	bf00      	nop
    7d94:	200023f0 	.word	0x200023f0

00007d98 <usb_dc_ep_enable>:
{
    7d98:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    7d9a:	4b15      	ldr	r3, [pc, #84]	; (7df0 <usb_dc_ep_enable+0x58>)
    7d9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
    7da0:	b1eb      	cbz	r3, 7dde <usb_dc_ep_enable+0x46>
    7da2:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep);
    7da4:	f7fe fef6 	bl	6b94 <endpoint_ctx>
	if (!ep_ctx) {
    7da8:	4605      	mov	r5, r0
    7daa:	b1d8      	cbz	r0, 7de4 <usb_dc_ep_enable+0x4c>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
    7dac:	f014 0f08 	tst.w	r4, #8
    7db0:	d009      	beq.n	7dc6 <usb_dc_ep_enable+0x2e>
	if (ep_ctx->cfg.en) {
    7db2:	7a2b      	ldrb	r3, [r5, #8]
    7db4:	b9cb      	cbnz	r3, 7dea <usb_dc_ep_enable+0x52>
	ep_ctx->cfg.en = true;
    7db6:	2301      	movs	r3, #1
    7db8:	722b      	strb	r3, [r5, #8]
	return get_usbd_ctx()->ready;
    7dba:	4b0d      	ldr	r3, [pc, #52]	; (7df0 <usb_dc_ep_enable+0x58>)
    7dbc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (dev_ready()) {
    7dc0:	b943      	cbnz	r3, 7dd4 <usb_dc_ep_enable+0x3c>
	return 0;
    7dc2:	2000      	movs	r0, #0
}
    7dc4:	bd38      	pop	{r3, r4, r5, pc}
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    7dc6:	4620      	mov	r0, r4
    7dc8:	f003 fe0c 	bl	b9e4 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    7dcc:	4620      	mov	r0, r4
    7dce:	f004 f853 	bl	be78 <nrfx_usbd_ep_stall_clear>
    7dd2:	e7ee      	b.n	7db2 <usb_dc_ep_enable+0x1a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    7dd4:	4620      	mov	r0, r4
    7dd6:	f003 fff5 	bl	bdc4 <nrfx_usbd_ep_enable>
	return 0;
    7dda:	2000      	movs	r0, #0
    7ddc:	e7f2      	b.n	7dc4 <usb_dc_ep_enable+0x2c>
		return -ENODEV;
    7dde:	f06f 0012 	mvn.w	r0, #18
    7de2:	e7ef      	b.n	7dc4 <usb_dc_ep_enable+0x2c>
		return -EINVAL;
    7de4:	f06f 0015 	mvn.w	r0, #21
    7de8:	e7ec      	b.n	7dc4 <usb_dc_ep_enable+0x2c>
		return -EALREADY;
    7dea:	f06f 0077 	mvn.w	r0, #119	; 0x77
    7dee:	e7e9      	b.n	7dc4 <usb_dc_ep_enable+0x2c>
    7df0:	200023f0 	.word	0x200023f0

00007df4 <usb_dc_ep_disable>:
{
    7df4:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    7df6:	4b13      	ldr	r3, [pc, #76]	; (7e44 <usb_dc_ep_disable+0x50>)
    7df8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    7dfc:	b1ab      	cbz	r3, 7e2a <usb_dc_ep_disable+0x36>
    7dfe:	4604      	mov	r4, r0
	return get_usbd_ctx()->ready;
    7e00:	4b10      	ldr	r3, [pc, #64]	; (7e44 <usb_dc_ep_disable+0x50>)
    7e02:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    7e06:	b19b      	cbz	r3, 7e30 <usb_dc_ep_disable+0x3c>
	ep_ctx = endpoint_ctx(ep);
    7e08:	f7fe fec4 	bl	6b94 <endpoint_ctx>
	if (!ep_ctx) {
    7e0c:	4605      	mov	r5, r0
    7e0e:	b190      	cbz	r0, 7e36 <usb_dc_ep_disable+0x42>
	if (!ep_ctx->cfg.en) {
    7e10:	7a03      	ldrb	r3, [r0, #8]
    7e12:	b19b      	cbz	r3, 7e3c <usb_dc_ep_disable+0x48>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    7e14:	4620      	mov	r0, r4
    7e16:	f004 fa09 	bl	c22c <nrfx_usbd_ep_disable>
	ep_ctx->write_in_progress = false;
    7e1a:	2400      	movs	r4, #0
    7e1c:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
    7e1e:	4628      	mov	r0, r5
    7e20:	f00b f973 	bl	1310a <ep_ctx_reset>
	ep_ctx->cfg.en = false;
    7e24:	722c      	strb	r4, [r5, #8]
	return 0;
    7e26:	4620      	mov	r0, r4
}
    7e28:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    7e2a:	f06f 0012 	mvn.w	r0, #18
    7e2e:	e7fb      	b.n	7e28 <usb_dc_ep_disable+0x34>
    7e30:	f06f 0012 	mvn.w	r0, #18
    7e34:	e7f8      	b.n	7e28 <usb_dc_ep_disable+0x34>
		return -EINVAL;
    7e36:	f06f 0015 	mvn.w	r0, #21
    7e3a:	e7f5      	b.n	7e28 <usb_dc_ep_disable+0x34>
		return -EALREADY;
    7e3c:	f06f 0077 	mvn.w	r0, #119	; 0x77
    7e40:	e7f2      	b.n	7e28 <usb_dc_ep_disable+0x34>
    7e42:	bf00      	nop
    7e44:	200023f0 	.word	0x200023f0

00007e48 <usb_dc_ep_write>:
{
    7e48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e4c:	b084      	sub	sp, #16
    7e4e:	461f      	mov	r7, r3
	return get_usbd_ctx()->attached;
    7e50:	4b4e      	ldr	r3, [pc, #312]	; (7f8c <usb_dc_ep_write+0x144>)
    7e52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    7e56:	2b00      	cmp	r3, #0
    7e58:	f000 808c 	beq.w	7f74 <usb_dc_ep_write+0x12c>
    7e5c:	4604      	mov	r4, r0
    7e5e:	4688      	mov	r8, r1
    7e60:	4616      	mov	r6, r2
	return get_usbd_ctx()->ready;
    7e62:	4b4a      	ldr	r3, [pc, #296]	; (7f8c <usb_dc_ep_write+0x144>)
    7e64:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    7e68:	2b00      	cmp	r3, #0
    7e6a:	f000 8086 	beq.w	7f7a <usb_dc_ep_write+0x132>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
    7e6e:	f010 0f80 	tst.w	r0, #128	; 0x80
    7e72:	f000 8085 	beq.w	7f80 <usb_dc_ep_write+0x138>
	ep_ctx = endpoint_ctx(ep);
    7e76:	f7fe fe8d 	bl	6b94 <endpoint_ctx>
	if (!ep_ctx) {
    7e7a:	4605      	mov	r5, r0
    7e7c:	2800      	cmp	r0, #0
    7e7e:	f000 8082 	beq.w	7f86 <usb_dc_ep_write+0x13e>
	if (!ep_ctx->cfg.en) {
    7e82:	7a03      	ldrb	r3, [r0, #8]
    7e84:	2b00      	cmp	r3, #0
    7e86:	d04e      	beq.n	7f26 <usb_dc_ep_write+0xde>
	return z_impl_k_mutex_lock(mutex, timeout);
    7e88:	f04f 32ff 	mov.w	r2, #4294967295
    7e8c:	f04f 33ff 	mov.w	r3, #4294967295
    7e90:	483f      	ldr	r0, [pc, #252]	; (7f90 <usb_dc_ep_write+0x148>)
    7e92:	f007 fbd7 	bl	f644 <z_impl_k_mutex_lock>
	if (ep_ctx->write_in_progress) {
    7e96:	7fab      	ldrb	r3, [r5, #30]
    7e98:	2b00      	cmp	r3, #0
    7e9a:	d158      	bne.n	7f4e <usb_dc_ep_write+0x106>
	if (!data_len && ep_ctx->trans_zlp) {
    7e9c:	b91e      	cbnz	r6, 7ea6 <usb_dc_ep_write+0x5e>
    7e9e:	7feb      	ldrb	r3, [r5, #31]
    7ea0:	b10b      	cbz	r3, 7ea6 <usb_dc_ep_write+0x5e>
		ep_ctx->trans_zlp = false;
    7ea2:	2300      	movs	r3, #0
    7ea4:	77eb      	strb	r3, [r5, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    7ea6:	7aab      	ldrb	r3, [r5, #10]
    7ea8:	b963      	cbnz	r3, 7ec4 <usb_dc_ep_write+0x7c>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    7eaa:	b15e      	cbz	r6, 7ec4 <usb_dc_ep_write+0x7c>
    7eac:	4a37      	ldr	r2, [pc, #220]	; (7f8c <usb_dc_ep_write+0x144>)
    7eae:	8952      	ldrh	r2, [r2, #10]
    7eb0:	42b2      	cmp	r2, r6
    7eb2:	d907      	bls.n	7ec4 <usb_dc_ep_write+0x7c>
		    !(data_len % ep_ctx->cfg.max_sz)) {
    7eb4:	6869      	ldr	r1, [r5, #4]
    7eb6:	fbb6 f2f1 	udiv	r2, r6, r1
    7eba:	fb01 6212 	mls	r2, r1, r2, r6
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    7ebe:	b90a      	cbnz	r2, 7ec4 <usb_dc_ep_write+0x7c>
			ep_ctx->trans_zlp = true;
    7ec0:	2201      	movs	r2, #1
    7ec2:	77ea      	strb	r2, [r5, #31]
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
    7ec4:	b91b      	cbnz	r3, 7ece <usb_dc_ep_write+0x86>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    7ec6:	f003 fe27 	bl	bb18 <nrfx_usbd_last_setup_dir_get>
    7eca:	42a0      	cmp	r0, r4
    7ecc:	d145      	bne.n	7f5a <usb_dc_ep_write+0x112>
	ep_ctx->write_in_progress = true;
    7ece:	2301      	movs	r3, #1
    7ed0:	77ab      	strb	r3, [r5, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    7ed2:	f8cd 8004 	str.w	r8, [sp, #4]
    7ed6:	9602      	str	r6, [sp, #8]
    7ed8:	2300      	movs	r3, #0
    7eda:	9303      	str	r3, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    7edc:	a901      	add	r1, sp, #4
    7ede:	4620      	mov	r0, r4
    7ee0:	f003 f96c 	bl	b1bc <nrfx_usbd_ep_transfer>
    7ee4:	4601      	mov	r1, r0
	if (err != NRFX_SUCCESS) {
    7ee6:	4b2b      	ldr	r3, [pc, #172]	; (7f94 <usb_dc_ep_write+0x14c>)
    7ee8:	4298      	cmp	r0, r3
    7eea:	d03d      	beq.n	7f68 <usb_dc_ep_write+0x120>
		ep_ctx->write_in_progress = false;
    7eec:	2300      	movs	r3, #0
    7eee:	77ab      	strb	r3, [r5, #30]
		if (ret_bytes) {
    7ef0:	b107      	cbz	r7, 7ef4 <usb_dc_ep_write+0xac>
			*ret_bytes = 0;
    7ef2:	603b      	str	r3, [r7, #0]
    7ef4:	4b28      	ldr	r3, [pc, #160]	; (7f98 <usb_dc_ep_write+0x150>)
    7ef6:	4a29      	ldr	r2, [pc, #164]	; (7f9c <usb_dc_ep_write+0x154>)
    7ef8:	1a9b      	subs	r3, r3, r2
    7efa:	08db      	lsrs	r3, r3, #3
		LOG_ERR("nRF USBD write error: %d", (uint32_t)err);
    7efc:	f04f 0200 	mov.w	r2, #0
    7f00:	2001      	movs	r0, #1
    7f02:	f360 0202 	bfi	r2, r0, #0, #3
    7f06:	f36f 02c5 	bfc	r2, #3, #3
    7f0a:	f363 128f 	bfi	r2, r3, #6, #10
    7f0e:	4824      	ldr	r0, [pc, #144]	; (7fa0 <usb_dc_ep_write+0x158>)
    7f10:	f7fa fe52 	bl	2bb8 <log_1>
		result = -EIO;
    7f14:	f06f 0404 	mvn.w	r4, #4
	return z_impl_k_mutex_unlock(mutex);
    7f18:	481d      	ldr	r0, [pc, #116]	; (7f90 <usb_dc_ep_write+0x148>)
    7f1a:	f007 fc1d 	bl	f758 <z_impl_k_mutex_unlock>
}
    7f1e:	4620      	mov	r0, r4
    7f20:	b004      	add	sp, #16
    7f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7f26:	4b1c      	ldr	r3, [pc, #112]	; (7f98 <usb_dc_ep_write+0x150>)
    7f28:	4a1c      	ldr	r2, [pc, #112]	; (7f9c <usb_dc_ep_write+0x154>)
    7f2a:	1a9b      	subs	r3, r3, r2
    7f2c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    7f2e:	f04f 0200 	mov.w	r2, #0
    7f32:	2101      	movs	r1, #1
    7f34:	f361 0202 	bfi	r2, r1, #0, #3
    7f38:	f36f 02c5 	bfc	r2, #3, #3
    7f3c:	f363 128f 	bfi	r2, r3, #6, #10
    7f40:	4621      	mov	r1, r4
    7f42:	4818      	ldr	r0, [pc, #96]	; (7fa4 <usb_dc_ep_write+0x15c>)
    7f44:	f7fa fe38 	bl	2bb8 <log_1>
		return -EINVAL;
    7f48:	f06f 0415 	mvn.w	r4, #21
    7f4c:	e7e7      	b.n	7f1e <usb_dc_ep_write+0xd6>
    7f4e:	4810      	ldr	r0, [pc, #64]	; (7f90 <usb_dc_ep_write+0x148>)
    7f50:	f007 fc02 	bl	f758 <z_impl_k_mutex_unlock>
		return -EAGAIN;
    7f54:	f06f 040a 	mvn.w	r4, #10
    7f58:	e7e1      	b.n	7f1e <usb_dc_ep_write+0xd6>
		nrfx_usbd_setup_clear();
    7f5a:	f003 fdcd 	bl	baf8 <nrfx_usbd_setup_clear>
    7f5e:	480c      	ldr	r0, [pc, #48]	; (7f90 <usb_dc_ep_write+0x148>)
    7f60:	f007 fbfa 	bl	f758 <z_impl_k_mutex_unlock>
		return 0;
    7f64:	2400      	movs	r4, #0
    7f66:	e7da      	b.n	7f1e <usb_dc_ep_write+0xd6>
		if (ret_bytes) {
    7f68:	b117      	cbz	r7, 7f70 <usb_dc_ep_write+0x128>
			*ret_bytes = data_len;
    7f6a:	603e      	str	r6, [r7, #0]
	int result = 0;
    7f6c:	2400      	movs	r4, #0
    7f6e:	e7d3      	b.n	7f18 <usb_dc_ep_write+0xd0>
    7f70:	2400      	movs	r4, #0
    7f72:	e7d1      	b.n	7f18 <usb_dc_ep_write+0xd0>
		return -ENODEV;
    7f74:	f06f 0412 	mvn.w	r4, #18
    7f78:	e7d1      	b.n	7f1e <usb_dc_ep_write+0xd6>
    7f7a:	f06f 0412 	mvn.w	r4, #18
    7f7e:	e7ce      	b.n	7f1e <usb_dc_ep_write+0xd6>
		return -EINVAL;
    7f80:	f06f 0415 	mvn.w	r4, #21
    7f84:	e7cb      	b.n	7f1e <usb_dc_ep_write+0xd6>
		return -EINVAL;
    7f86:	f06f 0415 	mvn.w	r4, #21
    7f8a:	e7c8      	b.n	7f1e <usb_dc_ep_write+0xd6>
    7f8c:	200023f0 	.word	0x200023f0
    7f90:	20002428 	.word	0x20002428
    7f94:	0bad0000 	.word	0x0bad0000
    7f98:	00015f20 	.word	0x00015f20
    7f9c:	00015ea8 	.word	0x00015ea8
    7fa0:	000171a8 	.word	0x000171a8
    7fa4:	00017188 	.word	0x00017188

00007fa8 <usb_dc_ep_read_wait>:
{
    7fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7fac:	4698      	mov	r8, r3
	return get_usbd_ctx()->attached;
    7fae:	4b36      	ldr	r3, [pc, #216]	; (8088 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88>)
    7fb0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    7fb4:	2b00      	cmp	r3, #0
    7fb6:	d05b      	beq.n	8070 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70>
    7fb8:	4606      	mov	r6, r0
    7fba:	460d      	mov	r5, r1
    7fbc:	4617      	mov	r7, r2
	return get_usbd_ctx()->ready;
    7fbe:	4b32      	ldr	r3, [pc, #200]	; (8088 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x88>)
    7fc0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    7fc4:	2b00      	cmp	r3, #0
    7fc6:	d056      	beq.n	8076 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x76>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    7fc8:	f010 0f80 	tst.w	r0, #128	; 0x80
    7fcc:	d156      	bne.n	807c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7c>
	if (!data && max_data_len) {
    7fce:	b351      	cbz	r1, 8026 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26>
	ep_ctx = endpoint_ctx(ep);
    7fd0:	4630      	mov	r0, r6
    7fd2:	f7fe fddf 	bl	6b94 <endpoint_ctx>
	if (!ep_ctx) {
    7fd6:	4604      	mov	r4, r0
    7fd8:	2800      	cmp	r0, #0
    7fda:	d052      	beq.n	8082 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x82>
	if (!ep_ctx->cfg.en) {
    7fdc:	7a03      	ldrb	r3, [r0, #8]
    7fde:	b33b      	cbz	r3, 8030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>
	return z_impl_k_mutex_lock(mutex, timeout);
    7fe0:	f04f 32ff 	mov.w	r2, #4294967295
    7fe4:	f04f 33ff 	mov.w	r3, #4294967295
    7fe8:	4828      	ldr	r0, [pc, #160]	; (808c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c>)
    7fea:	f007 fb2b 	bl	f644 <z_impl_k_mutex_lock>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
    7fee:	68e3      	ldr	r3, [r4, #12]
    7ff0:	463e      	mov	r6, r7
    7ff2:	429f      	cmp	r7, r3
    7ff4:	bf28      	it	cs
    7ff6:	461e      	movcs	r6, r3
	if (!data && !max_data_len) {
    7ff8:	b375      	cbz	r5, 8058 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58>
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
    7ffa:	4632      	mov	r2, r6
    7ffc:	69a1      	ldr	r1, [r4, #24]
    7ffe:	4628      	mov	r0, r5
    8000:	f00a fd5e 	bl	12ac0 <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
    8004:	69a3      	ldr	r3, [r4, #24]
    8006:	4433      	add	r3, r6
    8008:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
    800a:	68e3      	ldr	r3, [r4, #12]
    800c:	1b9b      	subs	r3, r3, r6
    800e:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
    8010:	f1b8 0f00 	cmp.w	r8, #0
    8014:	d001      	beq.n	801a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a>
		*read_bytes = bytes_to_copy;
    8016:	f8c8 6000 	str.w	r6, [r8]
	return z_impl_k_mutex_unlock(mutex);
    801a:	481c      	ldr	r0, [pc, #112]	; (808c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c>)
    801c:	f007 fb9c 	bl	f758 <z_impl_k_mutex_unlock>
	return 0;
    8020:	2000      	movs	r0, #0
}
    8022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!data && max_data_len) {
    8026:	2a00      	cmp	r2, #0
    8028:	d0d2      	beq.n	7fd0 <usb_dc_ep_read_wait+0x28>
		return -EINVAL;
    802a:	f06f 0015 	mvn.w	r0, #21
    802e:	e7f8      	b.n	8022 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22>
    8030:	4b17      	ldr	r3, [pc, #92]	; (8090 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x90>)
    8032:	4a18      	ldr	r2, [pc, #96]	; (8094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>)
    8034:	1a9b      	subs	r3, r3, r2
    8036:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    8038:	f04f 0200 	mov.w	r2, #0
    803c:	2101      	movs	r1, #1
    803e:	f361 0202 	bfi	r2, r1, #0, #3
    8042:	f36f 02c5 	bfc	r2, #3, #3
    8046:	f363 128f 	bfi	r2, r3, #6, #10
    804a:	4631      	mov	r1, r6
    804c:	4812      	ldr	r0, [pc, #72]	; (8098 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x98>)
    804e:	f7fa fdb3 	bl	2bb8 <log_1>
		return -EINVAL;
    8052:	f06f 0015 	mvn.w	r0, #21
    8056:	e7e4      	b.n	8022 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22>
	if (!data && !max_data_len) {
    8058:	2f00      	cmp	r7, #0
    805a:	d1ce      	bne.n	7ffa <usb_dc_ep_read_wait+0x52>
		if (read_bytes) {
    805c:	f1b8 0f00 	cmp.w	r8, #0
    8060:	d001      	beq.n	8066 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x66>
			*read_bytes = ep_ctx->buf.len;
    8062:	f8c8 3000 	str.w	r3, [r8]
    8066:	4809      	ldr	r0, [pc, #36]	; (808c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8c>)
    8068:	f007 fb76 	bl	f758 <z_impl_k_mutex_unlock>
		return 0;
    806c:	2000      	movs	r0, #0
    806e:	e7d8      	b.n	8022 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22>
		return -ENODEV;
    8070:	f06f 0012 	mvn.w	r0, #18
    8074:	e7d5      	b.n	8022 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22>
    8076:	f06f 0012 	mvn.w	r0, #18
    807a:	e7d2      	b.n	8022 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22>
		return -EINVAL;
    807c:	f06f 0015 	mvn.w	r0, #21
    8080:	e7cf      	b.n	8022 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22>
		return -EINVAL;
    8082:	f06f 0015 	mvn.w	r0, #21
    8086:	e7cc      	b.n	8022 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22>
    8088:	200023f0 	.word	0x200023f0
    808c:	20002428 	.word	0x20002428
    8090:	00015f20 	.word	0x00015f20
    8094:	00015ea8 	.word	0x00015ea8
    8098:	00017188 	.word	0x00017188

0000809c <usb_dc_ep_read_continue>:
	return get_usbd_ctx()->attached;
    809c:	4b58      	ldr	r3, [pc, #352]	; (8200 <usb_dc_ep_read_continue+0x164>)
    809e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    80a2:	2b00      	cmp	r3, #0
    80a4:	f000 809f 	beq.w	81e6 <usb_dc_ep_read_continue+0x14a>
{
    80a8:	b530      	push	{r4, r5, lr}
    80aa:	b083      	sub	sp, #12
    80ac:	4605      	mov	r5, r0
	return get_usbd_ctx()->ready;
    80ae:	4b54      	ldr	r3, [pc, #336]	; (8200 <usb_dc_ep_read_continue+0x164>)
    80b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    80b4:	2b00      	cmp	r3, #0
    80b6:	f000 8099 	beq.w	81ec <usb_dc_ep_read_continue+0x150>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    80ba:	f010 0f80 	tst.w	r0, #128	; 0x80
    80be:	f040 8098 	bne.w	81f2 <usb_dc_ep_read_continue+0x156>
	ep_ctx = endpoint_ctx(ep);
    80c2:	f7fe fd67 	bl	6b94 <endpoint_ctx>
	if (!ep_ctx) {
    80c6:	4604      	mov	r4, r0
    80c8:	2800      	cmp	r0, #0
    80ca:	f000 8095 	beq.w	81f8 <usb_dc_ep_read_continue+0x15c>
	if (!ep_ctx->cfg.en) {
    80ce:	7a03      	ldrb	r3, [r0, #8]
    80d0:	b1a3      	cbz	r3, 80fc <usb_dc_ep_read_continue+0x60>
	return z_impl_k_mutex_lock(mutex, timeout);
    80d2:	f04f 32ff 	mov.w	r2, #4294967295
    80d6:	f04f 33ff 	mov.w	r3, #4294967295
    80da:	484a      	ldr	r0, [pc, #296]	; (8204 <usb_dc_ep_read_continue+0x168>)
    80dc:	f007 fab2 	bl	f644 <z_impl_k_mutex_lock>
	if (!ep_ctx->buf.len) {
    80e0:	68e3      	ldr	r3, [r4, #12]
    80e2:	b92b      	cbnz	r3, 80f0 <usb_dc_ep_read_continue+0x54>
		ep_ctx->buf.curr = ep_ctx->buf.data;
    80e4:	6963      	ldr	r3, [r4, #20]
    80e6:	61a3      	str	r3, [r4, #24]
		ep_ctx->read_complete = true;
    80e8:	2301      	movs	r3, #1
    80ea:	7723      	strb	r3, [r4, #28]
		if (ep_ctx->read_pending) {
    80ec:	7f63      	ldrb	r3, [r4, #29]
    80ee:	b9cb      	cbnz	r3, 8124 <usb_dc_ep_read_continue+0x88>
	return z_impl_k_mutex_unlock(mutex);
    80f0:	4844      	ldr	r0, [pc, #272]	; (8204 <usb_dc_ep_read_continue+0x168>)
    80f2:	f007 fb31 	bl	f758 <z_impl_k_mutex_unlock>
	return 0;
    80f6:	2000      	movs	r0, #0
}
    80f8:	b003      	add	sp, #12
    80fa:	bd30      	pop	{r4, r5, pc}
    80fc:	4b42      	ldr	r3, [pc, #264]	; (8208 <usb_dc_ep_read_continue+0x16c>)
    80fe:	4a43      	ldr	r2, [pc, #268]	; (820c <usb_dc_ep_read_continue+0x170>)
    8100:	1a9b      	subs	r3, r3, r2
    8102:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    8104:	f04f 0200 	mov.w	r2, #0
    8108:	2101      	movs	r1, #1
    810a:	f361 0202 	bfi	r2, r1, #0, #3
    810e:	f36f 02c5 	bfc	r2, #3, #3
    8112:	f363 128f 	bfi	r2, r3, #6, #10
    8116:	4629      	mov	r1, r5
    8118:	483d      	ldr	r0, [pc, #244]	; (8210 <usb_dc_ep_read_continue+0x174>)
    811a:	f7fa fd4d 	bl	2bb8 <log_1>
		return -EINVAL;
    811e:	f06f 0015 	mvn.w	r0, #21
    8122:	e7e9      	b.n	80f8 <usb_dc_ep_read_continue+0x5c>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    8124:	2200      	movs	r2, #0
    8126:	2300      	movs	r3, #0
    8128:	a901      	add	r1, sp, #4
    812a:	483a      	ldr	r0, [pc, #232]	; (8214 <usb_dc_ep_read_continue+0x178>)
    812c:	f007 f950 	bl	f3d0 <k_mem_slab_alloc>
    8130:	b980      	cbnz	r0, 8154 <usb_dc_ep_read_continue+0xb8>
	ev = (struct usbd_event *)block.data;
    8132:	9d01      	ldr	r5, [sp, #4]
	ev->block = block;
    8134:	606d      	str	r5, [r5, #4]
			if (!ev) {
    8136:	2d00      	cmp	r5, #0
    8138:	d04f      	beq.n	81da <usb_dc_ep_read_continue+0x13e>
			ev->evt_type = USBD_EVT_EP;
    813a:	2301      	movs	r3, #1
    813c:	742b      	strb	r3, [r5, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    813e:	60ac      	str	r4, [r5, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    8140:	732b      	strb	r3, [r5, #12]
	k_fifo_put(&usbd_evt_fifo, ev);
    8142:	4629      	mov	r1, r5
    8144:	4834      	ldr	r0, [pc, #208]	; (8218 <usb_dc_ep_read_continue+0x17c>)
    8146:	f00d fa4b 	bl	155e0 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    814a:	4934      	ldr	r1, [pc, #208]	; (821c <usb_dc_ep_read_continue+0x180>)
    814c:	4834      	ldr	r0, [pc, #208]	; (8220 <usb_dc_ep_read_continue+0x184>)
    814e:	f00d fa68 	bl	15622 <k_work_submit_to_queue>
}
    8152:	e7cd      	b.n	80f0 <usb_dc_ep_read_continue+0x54>
    8154:	4b2c      	ldr	r3, [pc, #176]	; (8208 <usb_dc_ep_read_continue+0x16c>)
    8156:	4a2d      	ldr	r2, [pc, #180]	; (820c <usb_dc_ep_read_continue+0x170>)
    8158:	1a9b      	subs	r3, r3, r2
    815a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    815c:	f04f 0100 	mov.w	r1, #0
    8160:	2201      	movs	r2, #1
    8162:	f362 0102 	bfi	r1, r2, #0, #3
    8166:	f36f 01c5 	bfc	r1, #3, #3
    816a:	f363 118f 	bfi	r1, r3, #6, #10
    816e:	482d      	ldr	r0, [pc, #180]	; (8224 <usb_dc_ep_read_continue+0x188>)
    8170:	f7fa fdb6 	bl	2ce0 <log_0>
static inline void usbd_evt_flush(void)
    8174:	e004      	b.n	8180 <usb_dc_ep_read_continue+0xe4>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    8176:	1d01      	adds	r1, r0, #4
    8178:	4826      	ldr	r0, [pc, #152]	; (8214 <usb_dc_ep_read_continue+0x178>)
    817a:	f00d f90e 	bl	1539a <k_mem_slab_free>
	} while (ev != NULL);
    817e:	b145      	cbz	r5, 8192 <usb_dc_ep_read_continue+0xf6>
	return z_impl_k_queue_get(queue, timeout);
    8180:	2200      	movs	r2, #0
    8182:	2300      	movs	r3, #0
    8184:	4824      	ldr	r0, [pc, #144]	; (8218 <usb_dc_ep_read_continue+0x17c>)
    8186:	f007 fb2b 	bl	f7e0 <z_impl_k_queue_get>
		if (ev) {
    818a:	4605      	mov	r5, r0
    818c:	2800      	cmp	r0, #0
    818e:	d1f2      	bne.n	8176 <usb_dc_ep_read_continue+0xda>
    8190:	e7f5      	b.n	817e <usb_dc_ep_read_continue+0xe2>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    8192:	2200      	movs	r2, #0
    8194:	2300      	movs	r3, #0
    8196:	a901      	add	r1, sp, #4
    8198:	481e      	ldr	r0, [pc, #120]	; (8214 <usb_dc_ep_read_continue+0x178>)
    819a:	f007 f919 	bl	f3d0 <k_mem_slab_alloc>
    819e:	b180      	cbz	r0, 81c2 <usb_dc_ep_read_continue+0x126>
    81a0:	4b19      	ldr	r3, [pc, #100]	; (8208 <usb_dc_ep_read_continue+0x16c>)
    81a2:	4a1a      	ldr	r2, [pc, #104]	; (820c <usb_dc_ep_read_continue+0x170>)
    81a4:	1a9b      	subs	r3, r3, r2
    81a6:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    81a8:	f04f 0100 	mov.w	r1, #0
    81ac:	2201      	movs	r2, #1
    81ae:	f362 0102 	bfi	r1, r2, #0, #3
    81b2:	f36f 01c5 	bfc	r1, #3, #3
    81b6:	f363 118f 	bfi	r1, r3, #6, #10
    81ba:	481b      	ldr	r0, [pc, #108]	; (8228 <usb_dc_ep_read_continue+0x18c>)
    81bc:	f7fa fd90 	bl	2ce0 <log_0>
			return NULL;
    81c0:	e7b9      	b.n	8136 <usb_dc_ep_read_continue+0x9a>
		ev = (struct usbd_event *)block.data;
    81c2:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    81c4:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    81c6:	2304      	movs	r3, #4
    81c8:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    81ca:	4813      	ldr	r0, [pc, #76]	; (8218 <usb_dc_ep_read_continue+0x17c>)
    81cc:	f00d fa08 	bl	155e0 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    81d0:	4912      	ldr	r1, [pc, #72]	; (821c <usb_dc_ep_read_continue+0x180>)
    81d2:	4813      	ldr	r0, [pc, #76]	; (8220 <usb_dc_ep_read_continue+0x184>)
    81d4:	f00d fa25 	bl	15622 <k_work_submit_to_queue>
		return NULL;
    81d8:	e7ad      	b.n	8136 <usb_dc_ep_read_continue+0x9a>
	return z_impl_k_mutex_unlock(mutex);
    81da:	480a      	ldr	r0, [pc, #40]	; (8204 <usb_dc_ep_read_continue+0x168>)
    81dc:	f007 fabc 	bl	f758 <z_impl_k_mutex_unlock>
				return -ENOMEM;
    81e0:	f06f 000b 	mvn.w	r0, #11
    81e4:	e788      	b.n	80f8 <usb_dc_ep_read_continue+0x5c>
		return -ENODEV;
    81e6:	f06f 0012 	mvn.w	r0, #18
}
    81ea:	4770      	bx	lr
		return -ENODEV;
    81ec:	f06f 0012 	mvn.w	r0, #18
    81f0:	e782      	b.n	80f8 <usb_dc_ep_read_continue+0x5c>
		return -EINVAL;
    81f2:	f06f 0015 	mvn.w	r0, #21
    81f6:	e77f      	b.n	80f8 <usb_dc_ep_read_continue+0x5c>
		return -EINVAL;
    81f8:	f06f 0015 	mvn.w	r0, #21
    81fc:	e77c      	b.n	80f8 <usb_dc_ep_read_continue+0x5c>
    81fe:	bf00      	nop
    8200:	200023f0 	.word	0x200023f0
    8204:	20002428 	.word	0x20002428
    8208:	00015f20 	.word	0x00015f20
    820c:	00015ea8 	.word	0x00015ea8
    8210:	00017188 	.word	0x00017188
    8214:	20000348 	.word	0x20000348
    8218:	2000044c 	.word	0x2000044c
    821c:	20002418 	.word	0x20002418
    8220:	200006f8 	.word	0x200006f8
    8224:	00016fb0 	.word	0x00016fb0
    8228:	00016fd0 	.word	0x00016fd0

0000822c <usb_dc_ep_set_callback>:
	return get_usbd_ctx()->attached;
    822c:	4b08      	ldr	r3, [pc, #32]	; (8250 <usb_dc_ep_set_callback+0x24>)
    822e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
    8232:	b13b      	cbz	r3, 8244 <usb_dc_ep_set_callback+0x18>
{
    8234:	b510      	push	{r4, lr}
    8236:	460c      	mov	r4, r1
	ep_ctx = endpoint_ctx(ep);
    8238:	f7fe fcac 	bl	6b94 <endpoint_ctx>
	if (!ep_ctx) {
    823c:	b128      	cbz	r0, 824a <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
    823e:	6004      	str	r4, [r0, #0]
	return 0;
    8240:	2000      	movs	r0, #0
}
    8242:	bd10      	pop	{r4, pc}
		return -ENODEV;
    8244:	f06f 0012 	mvn.w	r0, #18
}
    8248:	4770      	bx	lr
		return -EINVAL;
    824a:	f06f 0015 	mvn.w	r0, #21
    824e:	e7f8      	b.n	8242 <usb_dc_ep_set_callback+0x16>
    8250:	200023f0 	.word	0x200023f0

00008254 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
    8254:	4b01      	ldr	r3, [pc, #4]	; (825c <usb_dc_set_status_callback+0x8>)
    8256:	6018      	str	r0, [r3, #0]
}
    8258:	4770      	bx	lr
    825a:	bf00      	nop
    825c:	200023f0 	.word	0x200023f0

00008260 <usb_dc_ep_mps>:
{
    8260:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    8262:	4b07      	ldr	r3, [pc, #28]	; (8280 <usb_dc_ep_mps+0x20>)
    8264:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
    8268:	b123      	cbz	r3, 8274 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
    826a:	f7fe fc93 	bl	6b94 <endpoint_ctx>
	if (!ep_ctx) {
    826e:	b120      	cbz	r0, 827a <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
    8270:	6840      	ldr	r0, [r0, #4]
}
    8272:	bd08      	pop	{r3, pc}
		return -ENODEV;
    8274:	f06f 0012 	mvn.w	r0, #18
    8278:	e7fb      	b.n	8272 <usb_dc_ep_mps+0x12>
		return -EINVAL;
    827a:	f06f 0015 	mvn.w	r0, #21
    827e:	e7f8      	b.n	8272 <usb_dc_ep_mps+0x12>
    8280:	200023f0 	.word	0x200023f0

00008284 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    8284:	4800      	ldr	r0, [pc, #0]	; (8288 <get_hf_flags+0x4>)
    8286:	4770      	bx	lr
    8288:	200026d0 	.word	0x200026d0

0000828c <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    828c:	4b03      	ldr	r3, [pc, #12]	; (829c <get_subsys+0x10>)
    828e:	1ac0      	subs	r0, r0, r3
    8290:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    8292:	4b03      	ldr	r3, [pc, #12]	; (82a0 <get_subsys+0x14>)
    8294:	fb03 f000 	mul.w	r0, r3, r0
    8298:	4770      	bx	lr
    829a:	bf00      	nop
    829c:	20002690 	.word	0x20002690
    82a0:	b6db6db7 	.word	0xb6db6db7

000082a4 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    82a4:	b538      	push	{r3, r4, r5, lr}
    82a6:	4605      	mov	r5, r0
    82a8:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    82aa:	f7ff ffef 	bl	828c <get_subsys>
    82ae:	4601      	mov	r1, r0
    82b0:	2240      	movs	r2, #64	; 0x40
    82b2:	4803      	ldr	r0, [pc, #12]	; (82c0 <onoff_stop+0x1c>)
    82b4:	f00b f837 	bl	13326 <stop>
    82b8:	4601      	mov	r1, r0
	notify(mgr, res);
    82ba:	4628      	mov	r0, r5
    82bc:	47a0      	blx	r4
}
    82be:	bd38      	pop	{r3, r4, r5, pc}
    82c0:	00015c80 	.word	0x00015c80

000082c4 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    82c4:	b530      	push	{r4, r5, lr}
    82c6:	b083      	sub	sp, #12
    82c8:	4605      	mov	r5, r0
    82ca:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    82cc:	f7ff ffde 	bl	828c <get_subsys>
    82d0:	4601      	mov	r1, r0
    82d2:	2340      	movs	r3, #64	; 0x40
    82d4:	9300      	str	r3, [sp, #0]
    82d6:	4623      	mov	r3, r4
    82d8:	4a05      	ldr	r2, [pc, #20]	; (82f0 <onoff_start+0x2c>)
    82da:	4806      	ldr	r0, [pc, #24]	; (82f4 <onoff_start+0x30>)
    82dc:	f00b f83d 	bl	1335a <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    82e0:	1e01      	subs	r1, r0, #0
    82e2:	db01      	blt.n	82e8 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    82e4:	b003      	add	sp, #12
    82e6:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    82e8:	4628      	mov	r0, r5
    82ea:	47a0      	blx	r4
}
    82ec:	e7fa      	b.n	82e4 <onoff_start+0x20>
    82ee:	bf00      	nop
    82f0:	000133a3 	.word	0x000133a3
    82f4:	00015c80 	.word	0x00015c80

000082f8 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    82f8:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    82fa:	b110      	cbz	r0, 8302 <clock_event_handler+0xa>
    82fc:	2801      	cmp	r0, #1
    82fe:	d00d      	beq.n	831c <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    8300:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    8302:	2100      	movs	r1, #0
    8304:	4808      	ldr	r0, [pc, #32]	; (8328 <clock_event_handler+0x30>)
    8306:	f00a ff95 	bl	13234 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    830a:	6883      	ldr	r3, [r0, #8]
    830c:	f013 0f07 	tst.w	r3, #7
    8310:	d1f6      	bne.n	8300 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    8312:	2100      	movs	r1, #0
    8314:	4804      	ldr	r0, [pc, #16]	; (8328 <clock_event_handler+0x30>)
    8316:	f00a fff4 	bl	13302 <clkstarted_handle>
    831a:	e7f1      	b.n	8300 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    831c:	2101      	movs	r1, #1
    831e:	4802      	ldr	r0, [pc, #8]	; (8328 <clock_event_handler+0x30>)
    8320:	f00a ffef 	bl	13302 <clkstarted_handle>
}
    8324:	e7ec      	b.n	8300 <clock_event_handler+0x8>
    8326:	bf00      	nop
    8328:	00015c80 	.word	0x00015c80

0000832c <generic_hfclk_start>:
{
    832c:	b510      	push	{r4, lr}
	__asm__ volatile(
    832e:	f04f 0320 	mov.w	r3, #32
    8332:	f3ef 8411 	mrs	r4, BASEPRI
    8336:	f383 8812 	msr	BASEPRI_MAX, r3
    833a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    833e:	4a13      	ldr	r2, [pc, #76]	; (838c <generic_hfclk_start+0x60>)
    8340:	6813      	ldr	r3, [r2, #0]
    8342:	f043 0302 	orr.w	r3, r3, #2
    8346:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    8348:	f013 0f01 	tst.w	r3, #1
    834c:	d108      	bne.n	8360 <generic_hfclk_start+0x34>
	bool already_started = false;
    834e:	2300      	movs	r3, #0
	__asm__ volatile(
    8350:	f384 8811 	msr	BASEPRI, r4
    8354:	f3bf 8f6f 	isb	sy
	if (already_started) {
    8358:	b99b      	cbnz	r3, 8382 <generic_hfclk_start+0x56>
	hfclk_start();
    835a:	f00b f82a 	bl	133b2 <hfclk_start>
}
    835e:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    8360:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8364:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    8368:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    836c:	f012 0f01 	tst.w	r2, #1
    8370:	d101      	bne.n	8376 <generic_hfclk_start+0x4a>
	bool already_started = false;
    8372:	2300      	movs	r3, #0
    8374:	e7ec      	b.n	8350 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    8376:	f7ff ff85 	bl	8284 <get_hf_flags>
    837a:	f00a ffaf 	bl	132dc <set_on_state>
			already_started = true;
    837e:	2301      	movs	r3, #1
    8380:	e7e6      	b.n	8350 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    8382:	2100      	movs	r1, #0
    8384:	4802      	ldr	r0, [pc, #8]	; (8390 <generic_hfclk_start+0x64>)
    8386:	f00a ffbc 	bl	13302 <clkstarted_handle>
		return;
    838a:	e7e8      	b.n	835e <generic_hfclk_start+0x32>
    838c:	200026e0 	.word	0x200026e0
    8390:	00015c80 	.word	0x00015c80

00008394 <generic_hfclk_stop>:
{
    8394:	b508      	push	{r3, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8396:	4b0a      	ldr	r3, [pc, #40]	; (83c0 <generic_hfclk_stop+0x2c>)
    8398:	f3bf 8f5b 	dmb	ish
    839c:	e853 2f00 	ldrex	r2, [r3]
    83a0:	f022 0102 	bic.w	r1, r2, #2
    83a4:	e843 1000 	strex	r0, r1, [r3]
    83a8:	2800      	cmp	r0, #0
    83aa:	d1f7      	bne.n	839c <generic_hfclk_stop+0x8>
    83ac:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    83b0:	f012 0f01 	tst.w	r2, #1
    83b4:	d000      	beq.n	83b8 <generic_hfclk_stop+0x24>
}
    83b6:	bd08      	pop	{r3, pc}
	hfclk_stop();
    83b8:	f00b f805 	bl	133c6 <hfclk_stop>
    83bc:	e7fb      	b.n	83b6 <generic_hfclk_stop+0x22>
    83be:	bf00      	nop
    83c0:	200026e0 	.word	0x200026e0

000083c4 <api_blocking_start>:
{
    83c4:	b500      	push	{lr}
    83c6:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    83c8:	f8cd d000 	str.w	sp, [sp]
    83cc:	f8cd d004 	str.w	sp, [sp, #4]
    83d0:	2300      	movs	r3, #0
    83d2:	9302      	str	r3, [sp, #8]
    83d4:	2301      	movs	r3, #1
    83d6:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    83d8:	466b      	mov	r3, sp
    83da:	4a07      	ldr	r2, [pc, #28]	; (83f8 <api_blocking_start+0x34>)
    83dc:	f00a ffd9 	bl	13392 <api_start>
	if (err < 0) {
    83e0:	2800      	cmp	r0, #0
    83e2:	db05      	blt.n	83f0 <api_blocking_start+0x2c>
	return z_impl_k_sem_take(sem, timeout);
    83e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    83e8:	2300      	movs	r3, #0
    83ea:	4668      	mov	r0, sp
    83ec:	f007 fa58 	bl	f8a0 <z_impl_k_sem_take>
}
    83f0:	b005      	add	sp, #20
    83f2:	f85d fb04 	ldr.w	pc, [sp], #4
    83f6:	bf00      	nop
    83f8:	000133db 	.word	0x000133db

000083fc <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    83fc:	b570      	push	{r4, r5, r6, lr}
    83fe:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    8400:	2200      	movs	r2, #0
    8402:	2101      	movs	r1, #1
    8404:	4610      	mov	r0, r2
    8406:	f7fc fea9 	bl	515c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    840a:	2000      	movs	r0, #0
    840c:	f7fc fe74 	bl	50f8 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    8410:	4811      	ldr	r0, [pc, #68]	; (8458 <clk_init+0x5c>)
    8412:	f001 fc2f 	bl	9c74 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    8416:	4b11      	ldr	r3, [pc, #68]	; (845c <clk_init+0x60>)
    8418:	4298      	cmp	r0, r3
    841a:	d11a      	bne.n	8452 <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    841c:	f001 fc3e 	bl	9c9c <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    8420:	2400      	movs	r4, #0
    8422:	e003      	b.n	842c <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    8424:	2301      	movs	r3, #1
    8426:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    8428:	441c      	add	r4, r3
    842a:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
    842c:	2c01      	cmp	r4, #1
    842e:	d80e      	bhi.n	844e <clk_init+0x52>
						get_sub_data(dev, i);
    8430:	4621      	mov	r1, r4
    8432:	4630      	mov	r0, r6
    8434:	f00a fefe 	bl	13234 <get_sub_data>
    8438:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
    843a:	4621      	mov	r1, r4
    843c:	4630      	mov	r0, r6
    843e:	f00a ff06 	bl	1324e <get_onoff_manager>
    8442:	4907      	ldr	r1, [pc, #28]	; (8460 <clk_init+0x64>)
    8444:	f008 fdb9 	bl	10fba <onoff_manager_init>
		if (err < 0) {
    8448:	2800      	cmp	r0, #0
    844a:	daeb      	bge.n	8424 <clk_init+0x28>
    844c:	e000      	b.n	8450 <clk_init+0x54>
	}

	return 0;
    844e:	2000      	movs	r0, #0
}
    8450:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    8452:	f06f 0004 	mvn.w	r0, #4
    8456:	e7fb      	b.n	8450 <clk_init+0x54>
    8458:	000082f9 	.word	0x000082f9
    845c:	0bad0000 	.word	0x0bad0000
    8460:	0001722c 	.word	0x0001722c

00008464 <lfclk_spinwait>:
{
    8464:	b570      	push	{r4, r5, r6, lr}
    8466:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    8468:	2801      	cmp	r0, #1
    846a:	d107      	bne.n	847c <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    846c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8470:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    8474:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    8478:	2b01      	cmp	r3, #1
    847a:	d058      	beq.n	852e <lfclk_spinwait+0xca>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    847c:	f00c ffcb 	bl	15416 <k_is_in_isr>
    8480:	b928      	cbnz	r0, 848e <lfclk_spinwait+0x2a>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    8482:	4b2e      	ldr	r3, [pc, #184]	; (853c <lfclk_spinwait+0xd8>)
    8484:	781b      	ldrb	r3, [r3, #0]
    8486:	2b00      	cmp	r3, #0
    8488:	d041      	beq.n	850e <lfclk_spinwait+0xaa>
    848a:	2300      	movs	r3, #0
    848c:	e000      	b.n	8490 <lfclk_spinwait+0x2c>
    848e:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    8490:	461c      	mov	r4, r3
    8492:	2b00      	cmp	r3, #0
    8494:	d03d      	beq.n	8512 <lfclk_spinwait+0xae>
	__asm__ volatile(
    8496:	f04f 0320 	mov.w	r3, #32
    849a:	f3ef 8611 	mrs	r6, BASEPRI
    849e:	f383 8812 	msr	BASEPRI_MAX, r3
    84a2:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    84a6:	b924      	cbnz	r4, 84b2 <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    84a8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    84ac:	2202      	movs	r2, #2
    84ae:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    84b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    84b6:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    84ba:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    84be:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    84c2:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    84c6:	d12b      	bne.n	8520 <lfclk_spinwait+0xbc>
    return false;
    84c8:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    84ca:	b11a      	cbz	r2, 84d4 <lfclk_spinwait+0x70>
    84cc:	2b01      	cmp	r3, #1
    84ce:	d029      	beq.n	8524 <lfclk_spinwait+0xc0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    84d0:	2d01      	cmp	r5, #1
    84d2:	d027      	beq.n	8524 <lfclk_spinwait+0xc0>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    84d4:	b1fc      	cbz	r4, 8516 <lfclk_spinwait+0xb2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    84d6:	4630      	mov	r0, r6
    84d8:	f7fc fdb6 	bl	5048 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    84dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    84e0:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    84e4:	2b00      	cmp	r3, #0
    84e6:	d1e4      	bne.n	84b2 <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    84e8:	4b15      	ldr	r3, [pc, #84]	; (8540 <lfclk_spinwait+0xdc>)
    84ea:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    84ec:	2b00      	cmp	r3, #0
    84ee:	d0e0      	beq.n	84b2 <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    84f0:	4b13      	ldr	r3, [pc, #76]	; (8540 <lfclk_spinwait+0xdc>)
    84f2:	2200      	movs	r2, #0
    84f4:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    84f6:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    84f8:	2301      	movs	r3, #1
    84fa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    84fe:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8502:	4a10      	ldr	r2, [pc, #64]	; (8544 <lfclk_spinwait+0xe0>)
    8504:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8508:	4a0f      	ldr	r2, [pc, #60]	; (8548 <lfclk_spinwait+0xe4>)
    850a:	6013      	str	r3, [r2, #0]
}
    850c:	e7d1      	b.n	84b2 <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    850e:	2301      	movs	r3, #1
    8510:	e7be      	b.n	8490 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    8512:	2600      	movs	r6, #0
    8514:	e7c7      	b.n	84a6 <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    8516:	2021      	movs	r0, #33	; 0x21
    8518:	2100      	movs	r1, #0
    851a:	f007 fedb 	bl	102d4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    851e:	e7dd      	b.n	84dc <lfclk_spinwait+0x78>
                return true;
    8520:	2201      	movs	r2, #1
    8522:	e7d2      	b.n	84ca <lfclk_spinwait+0x66>
	if (isr_mode) {
    8524:	b124      	cbz	r4, 8530 <lfclk_spinwait+0xcc>
	__asm__ volatile(
    8526:	f386 8811 	msr	BASEPRI, r6
    852a:	f3bf 8f6f 	isb	sy
}
    852e:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    8530:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8534:	2202      	movs	r2, #2
    8536:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    853a:	e7f8      	b.n	852e <lfclk_spinwait+0xca>
    853c:	20002f83 	.word	0x20002f83
    8540:	40000104 	.word	0x40000104
    8544:	e000e100 	.word	0xe000e100
    8548:	40000008 	.word	0x40000008

0000854c <z_nrf_clock_control_get_onoff>:
{
    854c:	b508      	push	{r3, lr}
	return get_onoff_manager(CLOCK_DEVICE,
    854e:	b2c1      	uxtb	r1, r0
    8550:	4801      	ldr	r0, [pc, #4]	; (8558 <z_nrf_clock_control_get_onoff+0xc>)
    8552:	f00a fe7c 	bl	1324e <get_onoff_manager>
}
    8556:	bd08      	pop	{r3, pc}
    8558:	00015c80 	.word	0x00015c80

0000855c <z_nrf_clock_control_lf_on>:
{
    855c:	b510      	push	{r4, lr}
    855e:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8560:	4b10      	ldr	r3, [pc, #64]	; (85a4 <z_nrf_clock_control_lf_on+0x48>)
    8562:	2101      	movs	r1, #1
    8564:	f3bf 8f5b 	dmb	ish
    8568:	e853 2f00 	ldrex	r2, [r3]
    856c:	e843 1000 	strex	r0, r1, [r3]
    8570:	2800      	cmp	r0, #0
    8572:	d1f9      	bne.n	8568 <z_nrf_clock_control_lf_on+0xc>
    8574:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    8578:	b11a      	cbz	r2, 8582 <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
    857a:	1e63      	subs	r3, r4, #1
    857c:	2b01      	cmp	r3, #1
    857e:	d90c      	bls.n	859a <z_nrf_clock_control_lf_on+0x3e>
}
    8580:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    8582:	4809      	ldr	r0, [pc, #36]	; (85a8 <z_nrf_clock_control_lf_on+0x4c>)
    8584:	f00a fe63 	bl	1324e <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    8588:	4908      	ldr	r1, [pc, #32]	; (85ac <z_nrf_clock_control_lf_on+0x50>)
    858a:	2300      	movs	r3, #0
    858c:	604b      	str	r3, [r1, #4]
    858e:	60cb      	str	r3, [r1, #12]
    8590:	2301      	movs	r3, #1
    8592:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    8594:	f008 fd2d 	bl	10ff2 <onoff_request>
    8598:	e7ef      	b.n	857a <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
    859a:	4620      	mov	r0, r4
    859c:	f7ff ff62 	bl	8464 <lfclk_spinwait>
		break;
    85a0:	e7ee      	b.n	8580 <z_nrf_clock_control_lf_on+0x24>
    85a2:	bf00      	nop
    85a4:	200026e4 	.word	0x200026e4
    85a8:	00015c80 	.word	0x00015c80
    85ac:	20002680 	.word	0x20002680

000085b0 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    85b0:	b510      	push	{r4, lr}
    85b2:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    85b4:	280a      	cmp	r0, #10
    85b6:	d007      	beq.n	85c8 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    85b8:	4b07      	ldr	r3, [pc, #28]	; (85d8 <console_out+0x28>)
    85ba:	6818      	ldr	r0, [r3, #0]
    85bc:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    85be:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    85c0:	685b      	ldr	r3, [r3, #4]
    85c2:	4798      	blx	r3

	return c;
}
    85c4:	4620      	mov	r0, r4
    85c6:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    85c8:	4b03      	ldr	r3, [pc, #12]	; (85d8 <console_out+0x28>)
    85ca:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    85cc:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    85ce:	685b      	ldr	r3, [r3, #4]
    85d0:	210d      	movs	r1, #13
    85d2:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    85d4:	e7f0      	b.n	85b8 <console_out+0x8>
    85d6:	bf00      	nop
    85d8:	200026e8 	.word	0x200026e8

000085dc <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
    85dc:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    85de:	4c04      	ldr	r4, [pc, #16]	; (85f0 <uart_console_hook_install+0x14>)
    85e0:	4620      	mov	r0, r4
    85e2:	f7fd fc3b 	bl	5e5c <__stdout_hook_install>
	__printk_hook_install(console_out);
    85e6:	4620      	mov	r0, r4
    85e8:	f7f9 fa68 	bl	1abc <__printk_hook_install>
}
    85ec:	bd10      	pop	{r4, pc}
    85ee:	bf00      	nop
    85f0:	000085b1 	.word	0x000085b1

000085f4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    85f4:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    85f6:	4806      	ldr	r0, [pc, #24]	; (8610 <uart_console_init+0x1c>)
    85f8:	4b06      	ldr	r3, [pc, #24]	; (8614 <uart_console_init+0x20>)
    85fa:	6018      	str	r0, [r3, #0]
    85fc:	f00c fe17 	bl	1522e <z_device_ready>
    8600:	b118      	cbz	r0, 860a <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
    8602:	f7ff ffeb 	bl	85dc <uart_console_hook_install>

	return 0;
    8606:	2000      	movs	r0, #0
}
    8608:	bd08      	pop	{r3, pc}
		return -ENODEV;
    860a:	f06f 0012 	mvn.w	r0, #18
    860e:	e7fb      	b.n	8608 <uart_console_init+0x14>
    8610:	00015c98 	.word	0x00015c98
    8614:	200026e8 	.word	0x200026e8

00008618 <gpio_nrfx_config>:
	return res;
}

static int gpio_nrfx_config(const struct device *port,
			    gpio_pin_t pin, gpio_flags_t flags)
{
    8618:	b4f0      	push	{r4, r5, r6, r7}
	return port->config;
    861a:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    861c:	685f      	ldr	r7, [r3, #4]
	nrf_gpio_pin_pull_t pull;
	nrf_gpio_pin_drive_t drive;
	nrf_gpio_pin_dir_t dir;
	nrf_gpio_pin_input_t input;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    861e:	4b37      	ldr	r3, [pc, #220]	; (86fc <gpio_nrfx_config+0xe4>)
    8620:	4013      	ands	r3, r2
    8622:	4c37      	ldr	r4, [pc, #220]	; (8700 <gpio_nrfx_config+0xe8>)
    8624:	42a3      	cmp	r3, r4
    8626:	d027      	beq.n	8678 <gpio_nrfx_config+0x60>
    8628:	d812      	bhi.n	8650 <gpio_nrfx_config+0x38>
    862a:	2b06      	cmp	r3, #6
    862c:	d026      	beq.n	867c <gpio_nrfx_config+0x64>
    862e:	d904      	bls.n	863a <gpio_nrfx_config+0x22>
    8630:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    8634:	d109      	bne.n	864a <gpio_nrfx_config+0x32>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		drive = NRF_GPIO_PIN_H0S1;
    8636:	2401      	movs	r4, #1
    8638:	e016      	b.n	8668 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    863a:	b30b      	cbz	r3, 8680 <gpio_nrfx_config+0x68>
    863c:	2b02      	cmp	r3, #2
    863e:	d101      	bne.n	8644 <gpio_nrfx_config+0x2c>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		drive = NRF_GPIO_PIN_D0S1;
    8640:	2404      	movs	r4, #4
    8642:	e011      	b.n	8668 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    8644:	f06f 0015 	mvn.w	r0, #21
    8648:	e046      	b.n	86d8 <gpio_nrfx_config+0xc0>
    864a:	f06f 0015 	mvn.w	r0, #21
    864e:	e043      	b.n	86d8 <gpio_nrfx_config+0xc0>
    8650:	4c2c      	ldr	r4, [pc, #176]	; (8704 <gpio_nrfx_config+0xec>)
    8652:	42a3      	cmp	r3, r4
    8654:	d016      	beq.n	8684 <gpio_nrfx_config+0x6c>
    8656:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    865a:	d101      	bne.n	8660 <gpio_nrfx_config+0x48>
		drive = NRF_GPIO_PIN_H0H1;
    865c:	2403      	movs	r4, #3
    865e:	e003      	b.n	8668 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    8660:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    8664:	d146      	bne.n	86f4 <gpio_nrfx_config+0xdc>
		drive = NRF_GPIO_PIN_S0H1;
    8666:	2402      	movs	r4, #2

	default:
		return -EINVAL;
	}

	if ((flags & GPIO_PULL_UP) != 0) {
    8668:	f012 0f10 	tst.w	r2, #16
    866c:	d10c      	bne.n	8688 <gpio_nrfx_config+0x70>
		pull = NRF_GPIO_PIN_PULLUP;
	} else if ((flags & GPIO_PULL_DOWN) != 0) {
    866e:	f012 0f20 	tst.w	r2, #32
    8672:	d033      	beq.n	86dc <gpio_nrfx_config+0xc4>
		pull = NRF_GPIO_PIN_PULLDOWN;
    8674:	2501      	movs	r5, #1
    8676:	e008      	b.n	868a <gpio_nrfx_config+0x72>
		drive = NRF_GPIO_PIN_H0D1;
    8678:	2407      	movs	r4, #7
    867a:	e7f5      	b.n	8668 <gpio_nrfx_config+0x50>
		drive = NRF_GPIO_PIN_S0D1;
    867c:	2406      	movs	r4, #6
    867e:	e7f3      	b.n	8668 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    8680:	2400      	movs	r4, #0
    8682:	e7f1      	b.n	8668 <gpio_nrfx_config+0x50>
		drive = NRF_GPIO_PIN_D0H1;
    8684:	2405      	movs	r4, #5
    8686:	e7ef      	b.n	8668 <gpio_nrfx_config+0x50>
		pull = NRF_GPIO_PIN_PULLUP;
    8688:	2503      	movs	r5, #3
	} else {
		pull = NRF_GPIO_PIN_NOPULL;
	}

	dir = ((flags & GPIO_OUTPUT) != 0)
    868a:	f3c2 2340 	ubfx	r3, r2, #9, #1
	      ? NRF_GPIO_PIN_DIR_OUTPUT
	      : NRF_GPIO_PIN_DIR_INPUT;

	input = ((flags & GPIO_INPUT) != 0)
		? NRF_GPIO_PIN_INPUT_CONNECT
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    868e:	f412 7f80 	tst.w	r2, #256	; 0x100
    8692:	bf0c      	ite	eq
    8694:	2601      	moveq	r6, #1
    8696:	2600      	movne	r6, #0

	if ((flags & GPIO_OUTPUT) != 0) {
    8698:	f412 7f00 	tst.w	r2, #512	; 0x200
    869c:	d006      	beq.n	86ac <gpio_nrfx_config+0x94>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    869e:	f412 6f00 	tst.w	r2, #2048	; 0x800
    86a2:	d01d      	beq.n	86e0 <gpio_nrfx_config+0xc8>
			nrf_gpio_port_out_set(reg, BIT(pin));
    86a4:	2201      	movs	r2, #1
    86a6:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    86a8:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
	return port->config;
    86ac:	6842      	ldr	r2, [r0, #4]
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
			nrf_gpio_port_out_clear(reg, BIT(pin));
		}
	}

	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
    86ae:	7a12      	ldrb	r2, [r2, #8]
    86b0:	f001 011f 	and.w	r1, r1, #31
    86b4:	ea41 1242 	orr.w	r2, r1, r2, lsl #5
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    86b8:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    86ba:	2a01      	cmp	r2, #1
    86bc:	d018      	beq.n	86f0 <gpio_nrfx_config+0xd8>
        case 0: return NRF_P0;
    86be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    86c2:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    86c6:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    86ca:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    86ce:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
    86d2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		     dir, input, pull, drive, NRF_GPIO_PIN_NOSENSE);

	return 0;
    86d6:	2000      	movs	r0, #0
}
    86d8:	bcf0      	pop	{r4, r5, r6, r7}
    86da:	4770      	bx	lr
		pull = NRF_GPIO_PIN_NOPULL;
    86dc:	2500      	movs	r5, #0
    86de:	e7d4      	b.n	868a <gpio_nrfx_config+0x72>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    86e0:	f412 6f80 	tst.w	r2, #1024	; 0x400
    86e4:	d0e2      	beq.n	86ac <gpio_nrfx_config+0x94>
			nrf_gpio_port_out_clear(reg, BIT(pin));
    86e6:	2201      	movs	r2, #1
    86e8:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    86ea:	f8c7 250c 	str.w	r2, [r7, #1292]	; 0x50c
}
    86ee:	e7dd      	b.n	86ac <gpio_nrfx_config+0x94>
        case 1: return NRF_P1;
    86f0:	4a05      	ldr	r2, [pc, #20]	; (8708 <gpio_nrfx_config+0xf0>)
    86f2:	e7e6      	b.n	86c2 <gpio_nrfx_config+0xaa>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    86f4:	f06f 0015 	mvn.w	r0, #21
    86f8:	e7ee      	b.n	86d8 <gpio_nrfx_config+0xc0>
    86fa:	bf00      	nop
    86fc:	00f00006 	.word	0x00f00006
    8700:	00100006 	.word	0x00100006
    8704:	00400002 	.word	0x00400002
    8708:	50000300 	.word	0x50000300

0000870c <cfg_level_pins>:
	 */
	return out;
}

static void cfg_level_pins(const struct device *port)
{
    870c:	b4f0      	push	{r4, r5, r6, r7}
	return port->data;
    870e:	6905      	ldr	r5, [r0, #16]
	return port->config;
    8710:	6846      	ldr	r6, [r0, #4]
	uint32_t out = data->pin_int_en;
    8712:	68e9      	ldr	r1, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    8714:	696a      	ldr	r2, [r5, #20]
    8716:	69ab      	ldr	r3, [r5, #24]
    8718:	4313      	orrs	r3, r2
    871a:	ea21 0103 	bic.w	r1, r1, r3
	const struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;
    871e:	2301      	movs	r3, #1
	uint32_t pin = 0U;
    8720:	2000      	movs	r0, #0
	uint32_t level_pins = get_level_pins(port);

	/* Configure sense detection on all pins that use it. */
	while (level_pins) {
    8722:	e011      	b.n	8748 <cfg_level_pins+0x3c>
		return NRF_GPIO_PIN_SENSE_HIGH;
    8724:	f04f 0c02 	mov.w	ip, #2
    8728:	e01d      	b.n	8766 <cfg_level_pins+0x5a>
    872a:	4f14      	ldr	r7, [pc, #80]	; (877c <cfg_level_pins+0x70>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    872c:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    8730:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
    8734:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    8738:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
    873c:	f847 2024 	str.w	r2, [r7, r4, lsl #2]
		if (level_pins & bit) {
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
			uint32_t sense = sense_for_pin(data, pin);

			nrf_gpio_cfg_sense_set(abs_pin, sense);
			level_pins &= ~bit;
    8740:	ea21 0103 	bic.w	r1, r1, r3
		}
		++pin;
    8744:	3001      	adds	r0, #1
		bit <<= 1;
    8746:	005b      	lsls	r3, r3, #1
	while (level_pins) {
    8748:	b1a9      	cbz	r1, 8776 <cfg_level_pins+0x6a>
		if (level_pins & bit) {
    874a:	420b      	tst	r3, r1
    874c:	d0fa      	beq.n	8744 <cfg_level_pins+0x38>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    874e:	7a34      	ldrb	r4, [r6, #8]
    8750:	f000 021f 	and.w	r2, r0, #31
    8754:	ea42 1244 	orr.w	r2, r2, r4, lsl #5
	if ((BIT(pin) & data->int_active_level) != 0U) {
    8758:	692c      	ldr	r4, [r5, #16]
    875a:	40c4      	lsrs	r4, r0
    875c:	f014 0f01 	tst.w	r4, #1
    8760:	d1e0      	bne.n	8724 <cfg_level_pins+0x18>
	return NRF_GPIO_PIN_SENSE_LOW;
    8762:	f04f 0c03 	mov.w	ip, #3
    *p_pin = pin_number & 0x1F;
    8766:	f002 041f 	and.w	r4, r2, #31
    return pin_number >> 5;
    876a:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    876c:	2a01      	cmp	r2, #1
    876e:	d0dc      	beq.n	872a <cfg_level_pins+0x1e>
        case 0: return NRF_P0;
    8770:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    8774:	e7da      	b.n	872c <cfg_level_pins+0x20>
	}
}
    8776:	bcf0      	pop	{r4, r5, r6, r7}
    8778:	4770      	bx	lr
    877a:	bf00      	nop
    877c:	50000300 	.word	0x50000300

00008780 <check_level_trigger_pins>:
 *
 * @return Bitmask where 1 marks pin as trigger source.
 */
static uint32_t check_level_trigger_pins(const struct device *port,
					 uint32_t *sense_levels)
{
    8780:	b5f0      	push	{r4, r5, r6, r7, lr}
    8782:	468c      	mov	ip, r1
	return port->data;
    8784:	6903      	ldr	r3, [r0, #16]
	return port->config;
    8786:	6841      	ldr	r1, [r0, #4]
	uint32_t out = data->pin_int_en;
    8788:	68df      	ldr	r7, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    878a:	695a      	ldr	r2, [r3, #20]
    878c:	6998      	ldr	r0, [r3, #24]
    878e:	4302      	orrs	r2, r0
    8790:	ea27 0702 	bic.w	r7, r7, r2
	struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t level_pins = get_level_pins(port);
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
    8794:	684a      	ldr	r2, [r1, #4]
    return p_reg->IN;
    8796:	f8d2 2510 	ldr.w	r2, [r2, #1296]	; 0x510

	/* Extract which pins have logic level same as interrupt trigger level.
	 */
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    879a:	6918      	ldr	r0, [r3, #16]
    879c:	4050      	eors	r0, r2

	/* Discard pins that aren't configured for level. */
	uint32_t out = pin_states & level_pins;
    879e:	ea27 0000 	bic.w	r0, r7, r0
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;

	uint32_t port_latch = 0;

	uint32_t check_pins = level_pins;
    87a2:	463c      	mov	r4, r7
	uint32_t bit = 1U << pin;
    87a4:	2301      	movs	r3, #1
	uint32_t pin = 0U;
    87a6:	2500      	movs	r5, #0
#if IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE)
	/* Read LATCH, which will tell us which pin has changed its state. */
	port_latch = cfg->port->LATCH;
#endif

	while (check_pins) {
    87a8:	e015      	b.n	87d6 <check_level_trigger_pins+0x56>
        case 1: return NRF_P1;
    87aa:	f8df e074 	ldr.w	lr, [pc, #116]	; 8820 <check_level_trigger_pins+0xa0>
    87ae:	e025      	b.n	87fc <check_level_trigger_pins+0x7c>
    *p_pin = pin_number & 0x1F;
    87b0:	f002 061f 	and.w	r6, r2, #31
    return pin_number >> 5;
    87b4:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    87b6:	2a01      	cmp	r2, #1
    87b8:	d02e      	beq.n	8818 <check_level_trigger_pins+0x98>
        case 0: return NRF_P0;
    87ba:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    87be:	f506 72e0 	add.w	r2, r6, #448	; 0x1c0
    87c2:	f85e 6022 	ldr.w	r6, [lr, r2, lsl #2]
    87c6:	f426 3640 	bic.w	r6, r6, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    87ca:	f84e 6022 	str.w	r6, [lr, r2, lsl #2]
					*sense_levels |= bit;
				}
			}

			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
			check_pins &= ~bit;
    87ce:	ea24 0403 	bic.w	r4, r4, r3
		}
		++pin;
    87d2:	3501      	adds	r5, #1
		bit <<= 1;
    87d4:	005b      	lsls	r3, r3, #1
	while (check_pins) {
    87d6:	b314      	cbz	r4, 881e <check_level_trigger_pins+0x9e>
		if (check_pins & bit) {
    87d8:	4223      	tst	r3, r4
    87da:	d0fa      	beq.n	87d2 <check_level_trigger_pins+0x52>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    87dc:	7a0e      	ldrb	r6, [r1, #8]
    87de:	f005 021f 	and.w	r2, r5, #31
    87e2:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
			if (!(level_pins & bit)) {
    87e6:	423b      	tst	r3, r7
    87e8:	d1e2      	bne.n	87b0 <check_level_trigger_pins+0x30>
    *p_pin = pin_number & 0x1F;
    87ea:	f002 061f 	and.w	r6, r2, #31
    return pin_number >> 5;
    87ee:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    87f2:	f1be 0f01 	cmp.w	lr, #1
    87f6:	d0d8      	beq.n	87aa <check_level_trigger_pins+0x2a>
        case 0: return NRF_P0;
    87f8:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    87fc:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    8800:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    8804:	f3c6 4601 	ubfx	r6, r6, #16, #2
				if (high) {
    8808:	2e02      	cmp	r6, #2
    880a:	d1d1      	bne.n	87b0 <check_level_trigger_pins+0x30>
					*sense_levels |= bit;
    880c:	f8dc 6000 	ldr.w	r6, [ip]
    8810:	431e      	orrs	r6, r3
    8812:	f8cc 6000 	str.w	r6, [ip]
    8816:	e7cb      	b.n	87b0 <check_level_trigger_pins+0x30>
        case 1: return NRF_P1;
    8818:	f8df e004 	ldr.w	lr, [pc, #4]	; 8820 <check_level_trigger_pins+0xa0>
    881c:	e7cf      	b.n	87be <check_level_trigger_pins+0x3e>
	 */
	cfg->port->LATCH = port_latch;
#endif

	return out;
}
    881e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8820:	50000300 	.word	0x50000300

00008824 <gpiote_pin_cleanup>:
{
    8824:	b510      	push	{r4, lr}
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    8826:	4b14      	ldr	r3, [pc, #80]	; (8878 <gpiote_pin_cleanup+0x54>)
    8828:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    882c:	b2e4      	uxtb	r4, r4
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    882e:	2300      	movs	r3, #0
    8830:	e000      	b.n	8834 <gpiote_pin_cleanup+0x10>
    8832:	3301      	adds	r3, #1
    8834:	2b07      	cmp	r3, #7
    8836:	d81d      	bhi.n	8874 <gpiote_pin_cleanup+0x50>
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    8838:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    883c:	490e      	ldr	r1, [pc, #56]	; (8878 <gpiote_pin_cleanup+0x54>)
    883e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    8842:	f3c2 2205 	ubfx	r2, r2, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    8846:	4290      	cmp	r0, r2
    8848:	d1f3      	bne.n	8832 <gpiote_pin_cleanup+0xe>
		    && (intenset & BIT(i))) {
    884a:	fa24 f203 	lsr.w	r2, r4, r3
    884e:	f012 0f01 	tst.w	r2, #1
    8852:	d0ee      	beq.n	8832 <gpiote_pin_cleanup+0xe>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    8854:	460a      	mov	r2, r1
    8856:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    885a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    885e:	f021 0101 	bic.w	r1, r1, #1
    8862:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    8866:	2101      	movs	r1, #1
    8868:	4099      	lsls	r1, r3
    p_reg->INTENCLR = mask;
    886a:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    886e:	b2d8      	uxtb	r0, r3
    8870:	f001 fb46 	bl	9f00 <nrfx_gpiote_channel_free>
}
    8874:	bd10      	pop	{r4, pc}
    8876:	bf00      	nop
    8878:	40006000 	.word	0x40006000

0000887c <gpiote_channel_alloc>:
{
    887c:	b570      	push	{r4, r5, r6, lr}
    887e:	b082      	sub	sp, #8
    8880:	4604      	mov	r4, r0
    8882:	460d      	mov	r5, r1
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    8884:	f10d 0007 	add.w	r0, sp, #7
    8888:	f001 fb56 	bl	9f38 <nrfx_gpiote_channel_alloc>
    888c:	4b1c      	ldr	r3, [pc, #112]	; (8900 <gpiote_channel_alloc+0x84>)
    888e:	4298      	cmp	r0, r3
    8890:	d132      	bne.n	88f8 <gpiote_channel_alloc+0x7c>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    8892:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8896:	f103 0240 	add.w	r2, r3, #64	; 0x40
    889a:	0092      	lsls	r2, r2, #2
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    889c:	4e19      	ldr	r6, [pc, #100]	; (8904 <gpiote_channel_alloc+0x88>)
    889e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    88a2:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    88a6:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    88aa:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    88ae:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    88b2:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    88b6:	0224      	lsls	r4, r4, #8
    88b8:	f404 547c 	and.w	r4, r4, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    88bc:	042d      	lsls	r5, r5, #16
    88be:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    88c2:	432c      	orrs	r4, r5
    88c4:	430c      	orrs	r4, r1
    88c6:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
    return ((uint32_t)p_reg + event);
    88ca:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    88ce:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    88d2:	2000      	movs	r0, #0
    88d4:	6018      	str	r0, [r3, #0]
    88d6:	681b      	ldr	r3, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
    88d8:	f89d 1007 	ldrb.w	r1, [sp, #7]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    88dc:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    88e0:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
    88e4:	f042 0201 	orr.w	r2, r2, #1
    88e8:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    88ec:	2301      	movs	r3, #1
    88ee:	408b      	lsls	r3, r1
    p_reg->INTENSET = mask;
    88f0:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
}
    88f4:	b002      	add	sp, #8
    88f6:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    88f8:	f06f 0012 	mvn.w	r0, #18
    88fc:	e7fa      	b.n	88f4 <gpiote_channel_alloc+0x78>
    88fe:	bf00      	nop
    8900:	0bad0000 	.word	0x0bad0000
    8904:	40006000 	.word	0x40006000

00008908 <gpiote_pin_int_cfg>:
{
    8908:	b570      	push	{r4, r5, r6, lr}
    890a:	460d      	mov	r5, r1
	return port->data;
    890c:	6906      	ldr	r6, [r0, #16]
	return port->config;
    890e:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    8910:	7a1b      	ldrb	r3, [r3, #8]
    8912:	f001 041f 	and.w	r4, r1, #31
    8916:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	gpiote_pin_cleanup(abs_pin);
    891a:	4620      	mov	r0, r4
    891c:	f7ff ff82 	bl	8824 <gpiote_pin_cleanup>
    *p_pin = pin_number & 0x1F;
    8920:	f004 001f 	and.w	r0, r4, #31
    return pin_number >> 5;
    8924:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8926:	2b01      	cmp	r3, #1
    8928:	d020      	beq.n	896c <gpiote_pin_int_cfg+0x64>
        case 0: return NRF_P0;
    892a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    892e:	f500 71e0 	add.w	r1, r0, #448	; 0x1c0
    8932:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    8936:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    893a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	if (data->pin_int_en & BIT(pin)) {
    893e:	68f3      	ldr	r3, [r6, #12]
    8940:	40eb      	lsrs	r3, r5
    8942:	f013 0f01 	tst.w	r3, #1
    8946:	d02f      	beq.n	89a8 <gpiote_pin_int_cfg+0xa0>
		if (data->trig_edge & BIT(pin)) {
    8948:	6973      	ldr	r3, [r6, #20]
    894a:	40eb      	lsrs	r3, r5
    894c:	f013 0f01 	tst.w	r3, #1
    8950:	d015      	beq.n	897e <gpiote_pin_int_cfg+0x76>
				if (data->double_edge & BIT(pin)) {
    8952:	69b3      	ldr	r3, [r6, #24]
    8954:	40eb      	lsrs	r3, r5
    8956:	f013 0f01 	tst.w	r3, #1
    895a:	d109      	bne.n	8970 <gpiote_pin_int_cfg+0x68>
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    895c:	6931      	ldr	r1, [r6, #16]
    895e:	fa21 f505 	lsr.w	r5, r1, r5
    8962:	f015 0f01 	tst.w	r5, #1
    8966:	d008      	beq.n	897a <gpiote_pin_int_cfg+0x72>
					pol = NRF_GPIOTE_POLARITY_LOTOHI;
    8968:	2101      	movs	r1, #1
    896a:	e002      	b.n	8972 <gpiote_pin_int_cfg+0x6a>
        case 1: return NRF_P1;
    896c:	4a0f      	ldr	r2, [pc, #60]	; (89ac <gpiote_pin_int_cfg+0xa4>)
    896e:	e7de      	b.n	892e <gpiote_pin_int_cfg+0x26>
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
    8970:	2103      	movs	r1, #3
				res = gpiote_channel_alloc(abs_pin, pol);
    8972:	4620      	mov	r0, r4
    8974:	f7ff ff82 	bl	887c <gpiote_channel_alloc>
    8978:	e017      	b.n	89aa <gpiote_pin_int_cfg+0xa2>
					pol = NRF_GPIOTE_POLARITY_HITOLO;
    897a:	2102      	movs	r1, #2
    897c:	e7f9      	b.n	8972 <gpiote_pin_int_cfg+0x6a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    897e:	6931      	ldr	r1, [r6, #16]
    8980:	fa21 f505 	lsr.w	r5, r1, r5
    8984:	f015 0f01 	tst.w	r5, #1
    8988:	d10c      	bne.n	89a4 <gpiote_pin_int_cfg+0x9c>
	return NRF_GPIO_PIN_SENSE_LOW;
    898a:	2103      	movs	r1, #3
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    898c:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    8990:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    8994:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    8998:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    899c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	int res = 0;
    89a0:	2000      	movs	r0, #0
}
    89a2:	e002      	b.n	89aa <gpiote_pin_int_cfg+0xa2>
		return NRF_GPIO_PIN_SENSE_HIGH;
    89a4:	2102      	movs	r1, #2
    89a6:	e7f1      	b.n	898c <gpiote_pin_int_cfg+0x84>
	int res = 0;
    89a8:	2000      	movs	r0, #0
}
    89aa:	bd70      	pop	{r4, r5, r6, pc}
    89ac:	50000300 	.word	0x50000300

000089b0 <gpio_nrfx_pin_interrupt_configure>:
{
    89b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return port->data;
    89b2:	6904      	ldr	r4, [r0, #16]
	return port->config;
    89b4:	6845      	ldr	r5, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    89b6:	7a2e      	ldrb	r6, [r5, #8]
    89b8:	f001 051f 	and.w	r5, r1, #31
    89bc:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    89c0:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    89c4:	d025      	beq.n	8a12 <gpio_nrfx_pin_interrupt_configure+0x62>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    89c6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    89ca:	d035      	beq.n	8a38 <gpio_nrfx_pin_interrupt_configure+0x88>
    89cc:	68e5      	ldr	r5, [r4, #12]
    89ce:	2601      	movs	r6, #1
    89d0:	408e      	lsls	r6, r1
    89d2:	4335      	orrs	r5, r6
    89d4:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    89d6:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    89da:	d033      	beq.n	8a44 <gpio_nrfx_pin_interrupt_configure+0x94>
    89dc:	6962      	ldr	r2, [r4, #20]
    89de:	2501      	movs	r5, #1
    89e0:	408d      	lsls	r5, r1
    89e2:	ea22 0205 	bic.w	r2, r2, r5
    89e6:	6162      	str	r2, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    89e8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    89ec:	d02f      	beq.n	8a4e <gpio_nrfx_pin_interrupt_configure+0x9e>
    89ee:	69a2      	ldr	r2, [r4, #24]
    89f0:	2501      	movs	r5, #1
    89f2:	408d      	lsls	r5, r1
    89f4:	ea22 0205 	bic.w	r2, r2, r5
    89f8:	61a2      	str	r2, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    89fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    89fe:	d02b      	beq.n	8a58 <gpio_nrfx_pin_interrupt_configure+0xa8>
    8a00:	6923      	ldr	r3, [r4, #16]
    8a02:	2201      	movs	r2, #1
    8a04:	408a      	lsls	r2, r1
    8a06:	ea23 0302 	bic.w	r3, r3, r2
    8a0a:	6123      	str	r3, [r4, #16]
	return gpiote_pin_int_cfg(port, pin);
    8a0c:	f7ff ff7c 	bl	8908 <gpiote_pin_int_cfg>
}
    8a10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *p_pin = pin_number & 0x1F;
    8a12:	f005 061f 	and.w	r6, r5, #31
    return pin_number >> 5;
    8a16:	096d      	lsrs	r5, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8a18:	2d01      	cmp	r5, #1
    8a1a:	d00b      	beq.n	8a34 <gpio_nrfx_pin_interrupt_configure+0x84>
        case 0: return NRF_P0;
    8a1c:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    8a20:	f506 75e0 	add.w	r5, r6, #448	; 0x1c0
    8a24:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    8a28:	f015 0f01 	tst.w	r5, #1
    8a2c:	d0cb      	beq.n	89c6 <gpio_nrfx_pin_interrupt_configure+0x16>
		return -ENOTSUP;
    8a2e:	f06f 0085 	mvn.w	r0, #133	; 0x85
    8a32:	e7ed      	b.n	8a10 <gpio_nrfx_pin_interrupt_configure+0x60>
        case 1: return NRF_P1;
    8a34:	4f0b      	ldr	r7, [pc, #44]	; (8a64 <gpio_nrfx_pin_interrupt_configure+0xb4>)
    8a36:	e7f3      	b.n	8a20 <gpio_nrfx_pin_interrupt_configure+0x70>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    8a38:	68e5      	ldr	r5, [r4, #12]
    8a3a:	2601      	movs	r6, #1
    8a3c:	408e      	lsls	r6, r1
    8a3e:	ea25 0506 	bic.w	r5, r5, r6
    8a42:	e7c7      	b.n	89d4 <gpio_nrfx_pin_interrupt_configure+0x24>
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    8a44:	6962      	ldr	r2, [r4, #20]
    8a46:	2501      	movs	r5, #1
    8a48:	408d      	lsls	r5, r1
    8a4a:	432a      	orrs	r2, r5
    8a4c:	e7cb      	b.n	89e6 <gpio_nrfx_pin_interrupt_configure+0x36>
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    8a4e:	69a2      	ldr	r2, [r4, #24]
    8a50:	2501      	movs	r5, #1
    8a52:	408d      	lsls	r5, r1
    8a54:	432a      	orrs	r2, r5
    8a56:	e7cf      	b.n	89f8 <gpio_nrfx_pin_interrupt_configure+0x48>
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    8a58:	6923      	ldr	r3, [r4, #16]
    8a5a:	2201      	movs	r2, #1
    8a5c:	408a      	lsls	r2, r1
    8a5e:	4313      	orrs	r3, r2
    8a60:	e7d3      	b.n	8a0a <gpio_nrfx_pin_interrupt_configure+0x5a>
    8a62:	bf00      	nop
    8a64:	50000300 	.word	0x50000300

00008a68 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    8a68:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    8a6a:	4b0b      	ldr	r3, [pc, #44]	; (8a98 <gpio_nrfx_init+0x30>)
    8a6c:	781b      	ldrb	r3, [r3, #0]
    8a6e:	b10b      	cbz	r3, 8a74 <gpio_nrfx_init+0xc>
		irq_enable(DT_IRQN(GPIOTE_NODE));
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    8a70:	2000      	movs	r0, #0
    8a72:	bd08      	pop	{r3, pc}
		gpio_initialized = true;
    8a74:	4b08      	ldr	r3, [pc, #32]	; (8a98 <gpio_nrfx_init+0x30>)
    8a76:	2201      	movs	r2, #1
    8a78:	701a      	strb	r2, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    8a7a:	2200      	movs	r2, #0
    8a7c:	2105      	movs	r1, #5
    8a7e:	2006      	movs	r0, #6
    8a80:	f7fc fb6c 	bl	515c <z_arm_irq_priority_set>
		irq_enable(DT_IRQN(GPIOTE_NODE));
    8a84:	2006      	movs	r0, #6
    8a86:	f7fc fb37 	bl	50f8 <arch_irq_enable>
    8a8a:	4b04      	ldr	r3, [pc, #16]	; (8a9c <gpio_nrfx_init+0x34>)
    8a8c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    8a90:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    8a94:	e7ec      	b.n	8a70 <gpio_nrfx_init+0x8>
    8a96:	bf00      	nop
    8a98:	20002f7b 	.word	0x20002f7b
    8a9c:	40006000 	.word	0x40006000

00008aa0 <gpiote_event_handler>:
{
    8aa0:	b570      	push	{r4, r5, r6, lr}
    8aa2:	b084      	sub	sp, #16
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    8aa4:	2300      	movs	r3, #0
    8aa6:	9302      	str	r3, [sp, #8]
    8aa8:	9303      	str	r3, [sp, #12]
	uint32_t sense_levels[GPIO_COUNT] = {0};
    8aaa:	9300      	str	r3, [sp, #0]
    8aac:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8aae:	4b46      	ldr	r3, [pc, #280]	; (8bc8 <gpiote_event_handler+0x128>)
    8ab0:	681c      	ldr	r4, [r3, #0]
	if (port_event) {
    8ab2:	b90c      	cbnz	r4, 8ab8 <gpiote_event_handler+0x18>
{
    8ab4:	2100      	movs	r1, #0
    8ab6:	e011      	b.n	8adc <gpiote_event_handler+0x3c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
    8ab8:	4d44      	ldr	r5, [pc, #272]	; (8bcc <gpiote_event_handler+0x12c>)
    8aba:	4669      	mov	r1, sp
    8abc:	4628      	mov	r0, r5
    8abe:	f7ff fe5f 	bl	8780 <check_level_trigger_pins>
		fired_triggers[0] =
    8ac2:	9002      	str	r0, [sp, #8]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
    8ac4:	a901      	add	r1, sp, #4
    8ac6:	f105 0018 	add.w	r0, r5, #24
    8aca:	f7ff fe59 	bl	8780 <check_level_trigger_pins>
		fired_triggers[1] =
    8ace:	9003      	str	r0, [sp, #12]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    8ad0:	4b3d      	ldr	r3, [pc, #244]	; (8bc8 <gpiote_event_handler+0x128>)
    8ad2:	2200      	movs	r2, #0
    8ad4:	601a      	str	r2, [r3, #0]
    8ad6:	681b      	ldr	r3, [r3, #0]
}
    8ad8:	e7ec      	b.n	8ab4 <gpiote_event_handler+0x14>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    8ada:	3101      	adds	r1, #1
    8adc:	2907      	cmp	r1, #7
    8ade:	d82d      	bhi.n	8b3c <gpiote_event_handler+0x9c>
		nrf_gpiote_event_t evt =
    8ae0:	f101 0340 	add.w	r3, r1, #64	; 0x40
    8ae4:	009b      	lsls	r3, r3, #2
    8ae6:	b29a      	uxth	r2, r3
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    8ae8:	2301      	movs	r3, #1
    8aea:	408b      	lsls	r3, r1
    return p_reg->INTENSET & mask;
    8aec:	4838      	ldr	r0, [pc, #224]	; (8bd0 <gpiote_event_handler+0x130>)
    8aee:	f8d0 0304 	ldr.w	r0, [r0, #772]	; 0x304
    8af2:	4203      	tst	r3, r0
    8af4:	d0f1      	beq.n	8ada <gpiote_event_handler+0x3a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8af6:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    8afa:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    8afe:	681b      	ldr	r3, [r3, #0]
    8b00:	2b00      	cmp	r3, #0
    8b02:	d0ea      	beq.n	8ada <gpiote_event_handler+0x3a>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    8b04:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    8b08:	4831      	ldr	r0, [pc, #196]	; (8bd0 <gpiote_event_handler+0x130>)
    8b0a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    8b0e:	f3c0 3340 	ubfx	r3, r0, #13, #1
    8b12:	f3c0 2004 	ubfx	r0, r0, #8, #5
    8b16:	2501      	movs	r5, #1
    8b18:	fa05 f000 	lsl.w	r0, r5, r0
    8b1c:	ad04      	add	r5, sp, #16
    8b1e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    8b22:	f853 5c08 	ldr.w	r5, [r3, #-8]
    8b26:	4305      	orrs	r5, r0
    8b28:	f843 5c08 	str.w	r5, [r3, #-8]
    return ((uint32_t)p_reg + event);
    8b2c:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    8b30:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    8b34:	2200      	movs	r2, #0
    8b36:	601a      	str	r2, [r3, #0]
    8b38:	681b      	ldr	r3, [r3, #0]
}
    8b3a:	e7ce      	b.n	8ada <gpiote_event_handler+0x3a>
	if (fired_triggers[0]) {
    8b3c:	9e02      	ldr	r6, [sp, #8]
    8b3e:	b92e      	cbnz	r6, 8b4c <gpiote_event_handler+0xac>
	if (fired_triggers[1]) {
    8b40:	9e03      	ldr	r6, [sp, #12]
    8b42:	b9ee      	cbnz	r6, 8b80 <gpiote_event_handler+0xe0>
	if (port_event) {
    8b44:	2c00      	cmp	r4, #0
    8b46:	d135      	bne.n	8bb4 <gpiote_event_handler+0x114>
}
    8b48:	b004      	add	sp, #16
    8b4a:	bd70      	pop	{r4, r5, r6, pc}
	return list->head;
    8b4c:	4b21      	ldr	r3, [pc, #132]	; (8bd4 <gpiote_event_handler+0x134>)
    8b4e:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    8b50:	b119      	cbz	r1, 8b5a <gpiote_event_handler+0xba>
    8b52:	460d      	mov	r5, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    8b54:	b149      	cbz	r1, 8b6a <gpiote_event_handler+0xca>
	return node->next;
    8b56:	680d      	ldr	r5, [r1, #0]
    8b58:	e007      	b.n	8b6a <gpiote_event_handler+0xca>
    8b5a:	460d      	mov	r5, r1
    8b5c:	e005      	b.n	8b6a <gpiote_event_handler+0xca>
    8b5e:	b16d      	cbz	r5, 8b7c <gpiote_event_handler+0xdc>
    8b60:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    8b62:	b105      	cbz	r5, 8b66 <gpiote_event_handler+0xc6>
	return node->next;
    8b64:	682b      	ldr	r3, [r5, #0]
    8b66:	4629      	mov	r1, r5
    8b68:	461d      	mov	r5, r3
    8b6a:	2900      	cmp	r1, #0
    8b6c:	d0e8      	beq.n	8b40 <gpiote_event_handler+0xa0>
		if (cb->pin_mask & pins) {
    8b6e:	688a      	ldr	r2, [r1, #8]
    8b70:	4032      	ands	r2, r6
    8b72:	d0f4      	beq.n	8b5e <gpiote_event_handler+0xbe>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    8b74:	684b      	ldr	r3, [r1, #4]
    8b76:	4815      	ldr	r0, [pc, #84]	; (8bcc <gpiote_event_handler+0x12c>)
    8b78:	4798      	blx	r3
    8b7a:	e7f0      	b.n	8b5e <gpiote_event_handler+0xbe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    8b7c:	462b      	mov	r3, r5
    8b7e:	e7f2      	b.n	8b66 <gpiote_event_handler+0xc6>
	return list->head;
    8b80:	4b15      	ldr	r3, [pc, #84]	; (8bd8 <gpiote_event_handler+0x138>)
    8b82:	6859      	ldr	r1, [r3, #4]
    8b84:	b119      	cbz	r1, 8b8e <gpiote_event_handler+0xee>
    8b86:	460d      	mov	r5, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    8b88:	b149      	cbz	r1, 8b9e <gpiote_event_handler+0xfe>
	return node->next;
    8b8a:	680d      	ldr	r5, [r1, #0]
    8b8c:	e007      	b.n	8b9e <gpiote_event_handler+0xfe>
    8b8e:	460d      	mov	r5, r1
    8b90:	e005      	b.n	8b9e <gpiote_event_handler+0xfe>
    8b92:	b16d      	cbz	r5, 8bb0 <gpiote_event_handler+0x110>
    8b94:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    8b96:	b105      	cbz	r5, 8b9a <gpiote_event_handler+0xfa>
	return node->next;
    8b98:	682b      	ldr	r3, [r5, #0]
    8b9a:	4629      	mov	r1, r5
    8b9c:	461d      	mov	r5, r3
    8b9e:	2900      	cmp	r1, #0
    8ba0:	d0d0      	beq.n	8b44 <gpiote_event_handler+0xa4>
		if (cb->pin_mask & pins) {
    8ba2:	688a      	ldr	r2, [r1, #8]
    8ba4:	4032      	ands	r2, r6
    8ba6:	d0f4      	beq.n	8b92 <gpiote_event_handler+0xf2>
			cb->handler(port, cb, cb->pin_mask & pins);
    8ba8:	684b      	ldr	r3, [r1, #4]
    8baa:	480c      	ldr	r0, [pc, #48]	; (8bdc <gpiote_event_handler+0x13c>)
    8bac:	4798      	blx	r3
    8bae:	e7f0      	b.n	8b92 <gpiote_event_handler+0xf2>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    8bb0:	462b      	mov	r3, r5
    8bb2:	e7f2      	b.n	8b9a <gpiote_event_handler+0xfa>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
    8bb4:	4c05      	ldr	r4, [pc, #20]	; (8bcc <gpiote_event_handler+0x12c>)
    8bb6:	4620      	mov	r0, r4
    8bb8:	f7ff fda8 	bl	870c <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
    8bbc:	f104 0018 	add.w	r0, r4, #24
    8bc0:	f7ff fda4 	bl	870c <cfg_level_pins>
}
    8bc4:	e7c0      	b.n	8b48 <gpiote_event_handler+0xa8>
    8bc6:	bf00      	nop
    8bc8:	4000617c 	.word	0x4000617c
    8bcc:	00015cc8 	.word	0x00015cc8
    8bd0:	40006000 	.word	0x40006000
    8bd4:	200026ec 	.word	0x200026ec
    8bd8:	20002708 	.word	0x20002708
    8bdc:	00015ce0 	.word	0x00015ce0

00008be0 <i2c_nrfx_twi_transfer>:
}

static int i2c_nrfx_twi_transfer(const struct device *dev,
				 struct i2c_msg *msgs,
				 uint8_t num_msgs, uint16_t addr)
{
    8be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8be4:	b086      	sub	sp, #24
    8be6:	4607      	mov	r7, r0
    8be8:	4688      	mov	r8, r1
    8bea:	4691      	mov	r9, r2
    8bec:	469a      	mov	sl, r3
	return dev->data;
    8bee:	6900      	ldr	r0, [r0, #16]
	return z_impl_k_sem_take(sem, timeout);
    8bf0:	f04f 32ff 	mov.w	r2, #4294967295
    8bf4:	f04f 33ff 	mov.w	r3, #4294967295
    8bf8:	f006 fe52 	bl	f8a0 <z_impl_k_sem_take>
    8bfc:	6938      	ldr	r0, [r7, #16]
	int ret = 0;

	k_sem_take(&(get_dev_data(dev)->transfer_sync), K_FOREVER);

	/* Dummy take on completion_sync sem to be sure that it is empty */
	k_sem_take(&(get_dev_data(dev)->completion_sync), K_NO_WAIT);
    8bfe:	3010      	adds	r0, #16
    8c00:	2200      	movs	r2, #0
    8c02:	2300      	movs	r3, #0
    8c04:	f006 fe4c 	bl	f8a0 <z_impl_k_sem_take>

	nrfx_twi_enable(&get_dev_config(dev)->twi);
    8c08:	6878      	ldr	r0, [r7, #4]
    8c0a:	f001 fcc7 	bl	a59c <nrfx_twi_enable>

	for (size_t i = 0; i < num_msgs; i++) {
    8c0e:	2400      	movs	r4, #0
	int ret = 0;
    8c10:	4625      	mov	r5, r4
	for (size_t i = 0; i < num_msgs; i++) {
    8c12:	e01b      	b.n	8c4c <i2c_nrfx_twi_transfer+0x6c>
			/* - otherwise, just finish the transfer without
			 *   generating the STOP condition, unless the current
			 *   message is an RX request, for which such feature
			 *   is not supported
			 */
			} else if (msgs[i].flags & I2C_MSG_READ) {
    8c14:	f013 0f01 	tst.w	r3, #1
    8c18:	f040 808b 	bne.w	8d32 <i2c_nrfx_twi_transfer+0x152>
				ret = -ENOTSUP;
				break;
			} else {
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
    8c1c:	2220      	movs	r2, #32
			}
		}

		res = nrfx_twi_xfer(&get_dev_config(dev)->twi,
    8c1e:	a901      	add	r1, sp, #4
    8c20:	6878      	ldr	r0, [r7, #4]
    8c22:	f001 fceb 	bl	a5fc <nrfx_twi_xfer>
				    &cur_xfer,
				    xfer_flags);
		if (res != NRFX_SUCCESS) {
    8c26:	4b44      	ldr	r3, [pc, #272]	; (8d38 <i2c_nrfx_twi_transfer+0x158>)
    8c28:	4298      	cmp	r0, r3
    8c2a:	d13d      	bne.n	8ca8 <i2c_nrfx_twi_transfer+0xc8>
	return dev->data;
    8c2c:	6938      	ldr	r0, [r7, #16]
				ret = -EIO;
				break;
			}
		}

		ret = k_sem_take(&(get_dev_data(dev)->completion_sync),
    8c2e:	3010      	adds	r0, #16
    8c30:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    8c34:	2300      	movs	r3, #0
    8c36:	f006 fe33 	bl	f8a0 <z_impl_k_sem_take>
				 I2C_TRANSFER_TIMEOUT_MSEC);
		if (ret != 0) {
    8c3a:	4605      	mov	r5, r0
    8c3c:	2800      	cmp	r0, #0
    8c3e:	d13c      	bne.n	8cba <i2c_nrfx_twi_transfer+0xda>
	return dev->data;
    8c40:	693b      	ldr	r3, [r7, #16]
					     get_dev_config(dev)->config.sda);
			ret = -EIO;
			break;
		}

		res = get_dev_data(dev)->res;
    8c42:	6a19      	ldr	r1, [r3, #32]
		if (res != NRFX_SUCCESS) {
    8c44:	4b3c      	ldr	r3, [pc, #240]	; (8d38 <i2c_nrfx_twi_transfer+0x158>)
    8c46:	4299      	cmp	r1, r3
    8c48:	d153      	bne.n	8cf2 <i2c_nrfx_twi_transfer+0x112>
	for (size_t i = 0; i < num_msgs; i++) {
    8c4a:	3401      	adds	r4, #1
    8c4c:	454c      	cmp	r4, r9
    8c4e:	d266      	bcs.n	8d1e <i2c_nrfx_twi_transfer+0x13e>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    8c50:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    8c54:	eb08 0582 	add.w	r5, r8, r2, lsl #2
    8c58:	7a2b      	ldrb	r3, [r5, #8]
    8c5a:	f013 0f08 	tst.w	r3, #8
    8c5e:	d15c      	bne.n	8d1a <i2c_nrfx_twi_transfer+0x13a>
		nrfx_twi_xfer_desc_t cur_xfer = {
    8c60:	2600      	movs	r6, #0
    8c62:	9601      	str	r6, [sp, #4]
    8c64:	9603      	str	r6, [sp, #12]
    8c66:	9605      	str	r6, [sp, #20]
			.type		= (msgs[i].flags & I2C_MSG_READ) ?
    8c68:	7a2b      	ldrb	r3, [r5, #8]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
    8c6a:	f003 0101 	and.w	r1, r3, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
    8c6e:	f88d 1004 	strb.w	r1, [sp, #4]
    8c72:	f88d a005 	strb.w	sl, [sp, #5]
			.primary_length = msgs[i].len,
    8c76:	6869      	ldr	r1, [r5, #4]
		nrfx_twi_xfer_desc_t cur_xfer = {
    8c78:	9102      	str	r1, [sp, #8]
			.p_primary_buf  = msgs[i].buf,
    8c7a:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
		nrfx_twi_xfer_desc_t cur_xfer = {
    8c7e:	9204      	str	r2, [sp, #16]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    8c80:	f013 0f02 	tst.w	r3, #2
    8c84:	d10e      	bne.n	8ca4 <i2c_nrfx_twi_transfer+0xc4>
			if ((i < (num_msgs - 1)) &&
    8c86:	f109 32ff 	add.w	r2, r9, #4294967295
    8c8a:	42a2      	cmp	r2, r4
    8c8c:	d9c2      	bls.n	8c14 <i2c_nrfx_twi_transfer+0x34>
			    !(msgs[i + 1].flags & I2C_MSG_RESTART)) {
    8c8e:	1c62      	adds	r2, r4, #1
    8c90:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    8c94:	eb08 0282 	add.w	r2, r8, r2, lsl #2
    8c98:	7a12      	ldrb	r2, [r2, #8]
			if ((i < (num_msgs - 1)) &&
    8c9a:	f012 0f04 	tst.w	r2, #4
    8c9e:	d1b9      	bne.n	8c14 <i2c_nrfx_twi_transfer+0x34>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
    8ca0:	2240      	movs	r2, #64	; 0x40
    8ca2:	e7bc      	b.n	8c1e <i2c_nrfx_twi_transfer+0x3e>
		uint32_t xfer_flags = 0;
    8ca4:	2200      	movs	r2, #0
    8ca6:	e7ba      	b.n	8c1e <i2c_nrfx_twi_transfer+0x3e>
			if (res == NRFX_ERROR_BUSY) {
    8ca8:	330b      	adds	r3, #11
    8caa:	4298      	cmp	r0, r3
    8cac:	d002      	beq.n	8cb4 <i2c_nrfx_twi_transfer+0xd4>
				ret = -EIO;
    8cae:	f06f 0504 	mvn.w	r5, #4
    8cb2:	e034      	b.n	8d1e <i2c_nrfx_twi_transfer+0x13e>
				ret = -EBUSY;
    8cb4:	f06f 050f 	mvn.w	r5, #15
    8cb8:	e031      	b.n	8d1e <i2c_nrfx_twi_transfer+0x13e>
    8cba:	4b20      	ldr	r3, [pc, #128]	; (8d3c <i2c_nrfx_twi_transfer+0x15c>)
    8cbc:	4a20      	ldr	r2, [pc, #128]	; (8d40 <i2c_nrfx_twi_transfer+0x160>)
    8cbe:	1a9b      	subs	r3, r3, r2
    8cc0:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Error on I2C line occurred for message %d", i);
    8cc2:	f04f 0200 	mov.w	r2, #0
    8cc6:	2101      	movs	r1, #1
    8cc8:	f361 0202 	bfi	r2, r1, #0, #3
    8ccc:	f36f 02c5 	bfc	r2, #3, #3
    8cd0:	f363 128f 	bfi	r2, r3, #6, #10
    8cd4:	4621      	mov	r1, r4
    8cd6:	481b      	ldr	r0, [pc, #108]	; (8d44 <i2c_nrfx_twi_transfer+0x164>)
    8cd8:	f7f9 ff6e 	bl	2bb8 <log_1>
			nrfx_twi_disable(&get_dev_config(dev)->twi);
    8cdc:	6878      	ldr	r0, [r7, #4]
    8cde:	f001 fc6d 	bl	a5bc <nrfx_twi_disable>
	return dev->config;
    8ce2:	687b      	ldr	r3, [r7, #4]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    8ce4:	68d9      	ldr	r1, [r3, #12]
    8ce6:	6898      	ldr	r0, [r3, #8]
    8ce8:	f003 fb58 	bl	c39c <nrfx_twi_twim_bus_recover>
			ret = -EIO;
    8cec:	f06f 0504 	mvn.w	r5, #4
			break;
    8cf0:	e015      	b.n	8d1e <i2c_nrfx_twi_transfer+0x13e>
    8cf2:	4a12      	ldr	r2, [pc, #72]	; (8d3c <i2c_nrfx_twi_transfer+0x15c>)
    8cf4:	4b12      	ldr	r3, [pc, #72]	; (8d40 <i2c_nrfx_twi_transfer+0x160>)
    8cf6:	1ad2      	subs	r2, r2, r3
    8cf8:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
    8cfa:	f04f 0300 	mov.w	r3, #0
    8cfe:	2001      	movs	r0, #1
    8d00:	f360 0302 	bfi	r3, r0, #0, #3
    8d04:	f36f 03c5 	bfc	r3, #3, #3
    8d08:	f362 138f 	bfi	r3, r2, #6, #10
    8d0c:	4622      	mov	r2, r4
    8d0e:	480e      	ldr	r0, [pc, #56]	; (8d48 <i2c_nrfx_twi_transfer+0x168>)
    8d10:	f7f9 ff88 	bl	2c24 <log_2>
			ret = -EIO;
    8d14:	f06f 0504 	mvn.w	r5, #4
			break;
    8d18:	e001      	b.n	8d1e <i2c_nrfx_twi_transfer+0x13e>
			ret = -ENOTSUP;
    8d1a:	f06f 0585 	mvn.w	r5, #133	; 0x85
		}
	}

	nrfx_twi_disable(&get_dev_config(dev)->twi);
    8d1e:	6878      	ldr	r0, [r7, #4]
    8d20:	f001 fc4c 	bl	a5bc <nrfx_twi_disable>
	return dev->data;
    8d24:	6938      	ldr	r0, [r7, #16]
	z_impl_k_sem_give(sem);
    8d26:	f006 fd97 	bl	f858 <z_impl_k_sem_give>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));

	return ret;
}
    8d2a:	4628      	mov	r0, r5
    8d2c:	b006      	add	sp, #24
    8d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				ret = -ENOTSUP;
    8d32:	f06f 0585 	mvn.w	r5, #133	; 0x85
    8d36:	e7f2      	b.n	8d1e <i2c_nrfx_twi_transfer+0x13e>
    8d38:	0bad0000 	.word	0x0bad0000
    8d3c:	00015ec8 	.word	0x00015ec8
    8d40:	00015ea8 	.word	0x00015ea8
    8d44:	00017288 	.word	0x00017288
    8d48:	000172b4 	.word	0x000172b4

00008d4c <event_handler>:

static void event_handler(nrfx_twi_evt_t const *p_event, void *p_context)
{
    8d4c:	b508      	push	{r3, lr}
	struct i2c_nrfx_twi_data *dev_data = p_context;

	switch (p_event->type) {
    8d4e:	7803      	ldrb	r3, [r0, #0]
    8d50:	2b01      	cmp	r3, #1
    8d52:	d00c      	beq.n	8d6e <event_handler+0x22>
    8d54:	2b02      	cmp	r3, #2
    8d56:	d00d      	beq.n	8d74 <event_handler+0x28>
    8d58:	b113      	cbz	r3, 8d60 <event_handler+0x14>
		break;
	case NRFX_TWI_EVT_DATA_NACK:
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
		break;
	default:
		dev_data->res = NRFX_ERROR_INTERNAL;
    8d5a:	4b08      	ldr	r3, [pc, #32]	; (8d7c <event_handler+0x30>)
    8d5c:	620b      	str	r3, [r1, #32]
		break;
    8d5e:	e001      	b.n	8d64 <event_handler+0x18>
		dev_data->res = NRFX_SUCCESS;
    8d60:	4b07      	ldr	r3, [pc, #28]	; (8d80 <event_handler+0x34>)
    8d62:	620b      	str	r3, [r1, #32]
	}

	k_sem_give(&dev_data->completion_sync);
    8d64:	f101 0010 	add.w	r0, r1, #16
    8d68:	f006 fd76 	bl	f858 <z_impl_k_sem_give>
}
    8d6c:	bd08      	pop	{r3, pc}
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    8d6e:	4b05      	ldr	r3, [pc, #20]	; (8d84 <event_handler+0x38>)
    8d70:	620b      	str	r3, [r1, #32]
		break;
    8d72:	e7f7      	b.n	8d64 <event_handler+0x18>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    8d74:	4b04      	ldr	r3, [pc, #16]	; (8d88 <event_handler+0x3c>)
    8d76:	620b      	str	r3, [r1, #32]
		break;
    8d78:	e7f4      	b.n	8d64 <event_handler+0x18>
    8d7a:	bf00      	nop
    8d7c:	0bad0001 	.word	0x0bad0001
    8d80:	0bad0000 	.word	0x0bad0000
    8d84:	0bae0001 	.word	0x0bae0001
    8d88:	0bae0002 	.word	0x0bae0002

00008d8c <i2c_nrfx_twi_configure>:
	return dev->config;
    8d8c:	6842      	ldr	r2, [r0, #4]
static int i2c_nrfx_twi_configure(const struct device *dev,
				  uint32_t dev_config)
{
	nrfx_twi_t const *inst = &(get_dev_config(dev)->twi);

	if (I2C_ADDR_10_BITS & dev_config) {
    8d8e:	f011 0f01 	tst.w	r1, #1
    8d92:	d128      	bne.n	8de6 <i2c_nrfx_twi_configure+0x5a>
{
    8d94:	b508      	push	{r3, lr}
		return -EINVAL;
	}

	switch (I2C_SPEED_GET(dev_config)) {
    8d96:	f3c1 0342 	ubfx	r3, r1, #1, #3
    8d9a:	2b01      	cmp	r3, #1
    8d9c:	d014      	beq.n	8dc8 <i2c_nrfx_twi_configure+0x3c>
    8d9e:	2b02      	cmp	r3, #2
    8da0:	d01b      	beq.n	8dda <i2c_nrfx_twi_configure+0x4e>
    8da2:	4b12      	ldr	r3, [pc, #72]	; (8dec <i2c_nrfx_twi_configure+0x60>)
    8da4:	4a12      	ldr	r2, [pc, #72]	; (8df0 <i2c_nrfx_twi_configure+0x64>)
    8da6:	1a9b      	subs	r3, r3, r2
    8da8:	08db      	lsrs	r3, r3, #3
		break;
	case I2C_SPEED_FAST:
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
		break;
	default:
		LOG_ERR("unsupported speed");
    8daa:	f04f 0100 	mov.w	r1, #0
    8dae:	2201      	movs	r2, #1
    8db0:	f362 0102 	bfi	r1, r2, #0, #3
    8db4:	f36f 01c5 	bfc	r1, #3, #3
    8db8:	f363 118f 	bfi	r1, r3, #6, #10
    8dbc:	480d      	ldr	r0, [pc, #52]	; (8df4 <i2c_nrfx_twi_configure+0x68>)
    8dbe:	f7f9 ff8f 	bl	2ce0 <log_0>
		return -EINVAL;
    8dc2:	f06f 0015 	mvn.w	r0, #21
    8dc6:	e007      	b.n	8dd8 <i2c_nrfx_twi_configure+0x4c>
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
    8dc8:	6813      	ldr	r3, [r2, #0]
}

NRF_STATIC_INLINE void nrf_twi_frequency_set(NRF_TWI_Type *      p_reg,
                                             nrf_twi_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
    8dca:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    8dce:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return dev->data;
    8dd2:	6903      	ldr	r3, [r0, #16]
	}
	get_dev_data(dev)->dev_config = dev_config;
    8dd4:	6259      	str	r1, [r3, #36]	; 0x24

	return 0;
    8dd6:	2000      	movs	r0, #0
}
    8dd8:	bd08      	pop	{r3, pc}
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
    8dda:	6813      	ldr	r3, [r2, #0]
    8ddc:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
    8de0:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
}
    8de4:	e7f5      	b.n	8dd2 <i2c_nrfx_twi_configure+0x46>
		return -EINVAL;
    8de6:	f06f 0015 	mvn.w	r0, #21
}
    8dea:	4770      	bx	lr
    8dec:	00015ec8 	.word	0x00015ec8
    8df0:	00015ea8 	.word	0x00015ea8
    8df4:	000172dc 	.word	0x000172dc

00008df8 <init_twi>:
	.configure = i2c_nrfx_twi_configure,
	.transfer  = i2c_nrfx_twi_transfer,
};

static int init_twi(const struct device *dev)
{
    8df8:	b510      	push	{r4, lr}
    8dfa:	4604      	mov	r4, r0
	return dev->config;
    8dfc:	6840      	ldr	r0, [r0, #4]
	struct i2c_nrfx_twi_data *dev_data = get_dev_data(dev);
	nrfx_err_t result = nrfx_twi_init(&get_dev_config(dev)->twi,
    8dfe:	6923      	ldr	r3, [r4, #16]
    8e00:	4a0e      	ldr	r2, [pc, #56]	; (8e3c <init_twi+0x44>)
    8e02:	f100 0108 	add.w	r1, r0, #8
    8e06:	f001 fb67 	bl	a4d8 <nrfx_twi_init>
					  &get_dev_config(dev)->config,
					  event_handler, dev_data);
	if (result != NRFX_SUCCESS) {
    8e0a:	4b0d      	ldr	r3, [pc, #52]	; (8e40 <init_twi+0x48>)
    8e0c:	4298      	cmp	r0, r3
    8e0e:	d101      	bne.n	8e14 <init_twi+0x1c>
		LOG_ERR("Failed to initialize device: %s",
			    dev->name);
		return -EBUSY;
	}

	return 0;
    8e10:	2000      	movs	r0, #0
}
    8e12:	bd10      	pop	{r4, pc}
    8e14:	4b0b      	ldr	r3, [pc, #44]	; (8e44 <init_twi+0x4c>)
    8e16:	4a0c      	ldr	r2, [pc, #48]	; (8e48 <init_twi+0x50>)
    8e18:	1a9b      	subs	r3, r3, r2
    8e1a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to initialize device: %s",
    8e1c:	f04f 0200 	mov.w	r2, #0
    8e20:	2101      	movs	r1, #1
    8e22:	f361 0202 	bfi	r2, r1, #0, #3
    8e26:	f36f 02c5 	bfc	r2, #3, #3
    8e2a:	f363 128f 	bfi	r2, r3, #6, #10
    8e2e:	6821      	ldr	r1, [r4, #0]
    8e30:	4806      	ldr	r0, [pc, #24]	; (8e4c <init_twi+0x54>)
    8e32:	f7f9 fec1 	bl	2bb8 <log_1>
		return -EBUSY;
    8e36:	f06f 000f 	mvn.w	r0, #15
    8e3a:	e7ea      	b.n	8e12 <init_twi+0x1a>
    8e3c:	00008d4d 	.word	0x00008d4d
    8e40:	0bad0000 	.word	0x0bad0000
    8e44:	00015ec8 	.word	0x00015ec8
    8e48:	00015ea8 	.word	0x00015ea8
    8e4c:	000172f0 	.word	0x000172f0

00008e50 <nrf52_errata_242>:
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8e50:	4b03      	ldr	r3, [pc, #12]	; (8e60 <nrf52_errata_242+0x10>)
    8e52:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    8e54:	2b08      	cmp	r3, #8
    8e56:	d001      	beq.n	8e5c <nrf52_errata_242+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    8e58:	2000      	movs	r0, #0
    8e5a:	4770      	bx	lr
                        return true;
    8e5c:	2001      	movs	r0, #1
    #endif
}
    8e5e:	4770      	bx	lr
    8e60:	10000130 	.word	0x10000130

00008e64 <nvmc_wait_ready>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    8e64:	4b03      	ldr	r3, [pc, #12]	; (8e74 <nvmc_wait_ready+0x10>)
    8e66:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
#endif /* CONFIG_SOC_FLASH_NRF_UICR */
}

static void nvmc_wait_ready(void)
{
	while (!nrfx_nvmc_write_done_check()) {
    8e6a:	f013 0f01 	tst.w	r3, #1
    8e6e:	d0f9      	beq.n	8e64 <nvmc_wait_ready>
	}
}
    8e70:	4770      	bx	lr
    8e72:	bf00      	nop
    8e74:	4001e000 	.word	0x4001e000

00008e78 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    8e78:	4b02      	ldr	r3, [pc, #8]	; (8e84 <flash_nrf_pages_layout+0xc>)
    8e7a:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    8e7c:	2301      	movs	r3, #1
    8e7e:	6013      	str	r3, [r2, #0]
}
    8e80:	4770      	bx	lr
    8e82:	bf00      	nop
    8e84:	20002724 	.word	0x20002724

00008e88 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    8e88:	4800      	ldr	r0, [pc, #0]	; (8e8c <flash_nrf_get_parameters+0x4>)
    8e8a:	4770      	bx	lr
    8e8c:	000173d8 	.word	0x000173d8

00008e90 <suspend_pofwarn>:
 * Do not attempt to write or erase if EVENTS_POFWARN is already asserted.
 */
static bool pofcon_enabled;

static int suspend_pofwarn(void)
{
    8e90:	b508      	push	{r3, lr}
	if (!nrf52_errata_242()) {
    8e92:	f7ff ffdd 	bl	8e50 <nrf52_errata_242>
    8e96:	b328      	cbz	r0, 8ee4 <suspend_pofwarn+0x54>
    uint32_t pofcon = p_reg->POFCON;
    8e98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8e9c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
            == POWER_POFCON_POF_Enabled;
    8ea0:	f013 0201 	ands.w	r2, r3, #1
    8ea4:	b2d2      	uxtb	r2, r2
	bool enabled;
	nrf_power_pof_thr_t pof_thr;

	pof_thr = nrf_power_pofcon_get(NRF_POWER, &enabled);

	if (enabled) {
    8ea6:	d01f      	beq.n	8ee8 <suspend_pofwarn+0x58>
    uint32_t pofcon = p_reg->POFCON;
    8ea8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    8eac:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
    8eb0:	f021 011f 	bic.w	r1, r1, #31
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
    8eb4:	f003 031e 	and.w	r3, r3, #30
    pofcon |=
    8eb8:	4319      	orrs	r1, r3
    p_reg->POFCON = pofcon;
    8eba:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8ebe:	490b      	ldr	r1, [pc, #44]	; (8eec <suspend_pofwarn+0x5c>)
    8ec0:	6809      	ldr	r1, [r1, #0]
		nrf_power_pofcon_set(NRF_POWER, false, pof_thr);

		/* This check need to be reworked once POFWARN event will be
		 * served by zephyr.
		 */
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
    8ec2:	b919      	cbnz	r1, 8ecc <suspend_pofwarn+0x3c>
			nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
			return -ECANCELED;
		}

		pofcon_enabled = enabled;
    8ec4:	4b0a      	ldr	r3, [pc, #40]	; (8ef0 <suspend_pofwarn+0x60>)
    8ec6:	701a      	strb	r2, [r3, #0]
	}

	return 0;
    8ec8:	2000      	movs	r0, #0
    8eca:	e00c      	b.n	8ee6 <suspend_pofwarn+0x56>
    uint32_t pofcon = p_reg->POFCON;
    8ecc:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
    8ed0:	f022 021f 	bic.w	r2, r2, #31
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
    8ed4:	f043 0301 	orr.w	r3, r3, #1
    pofcon |=
    8ed8:	4313      	orrs	r3, r2
    p_reg->POFCON = pofcon;
    8eda:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
			return -ECANCELED;
    8ede:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    8ee2:	e000      	b.n	8ee6 <suspend_pofwarn+0x56>
		return 0;
    8ee4:	2000      	movs	r0, #0
}
    8ee6:	bd08      	pop	{r3, pc}
	return 0;
    8ee8:	2000      	movs	r0, #0
    8eea:	e7fc      	b.n	8ee6 <suspend_pofwarn+0x56>
    8eec:	40000108 	.word	0x40000108
    8ef0:	20002f7c 	.word	0x20002f7c

00008ef4 <restore_pofwarn>:

static void restore_pofwarn(void)
{
	nrf_power_pof_thr_t pof_thr;

	if (pofcon_enabled) {
    8ef4:	4b0a      	ldr	r3, [pc, #40]	; (8f20 <restore_pofwarn+0x2c>)
    8ef6:	781b      	ldrb	r3, [r3, #0]
    8ef8:	b18b      	cbz	r3, 8f1e <restore_pofwarn+0x2a>
    uint32_t pofcon = p_reg->POFCON;
    8efa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    8efe:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
    8f02:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
    8f06:	f023 031f 	bic.w	r3, r3, #31
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
    8f0a:	f002 021e 	and.w	r2, r2, #30
    8f0e:	f042 0201 	orr.w	r2, r2, #1
    pofcon |=
    8f12:	4313      	orrs	r3, r2
    p_reg->POFCON = pofcon;
    8f14:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
    8f18:	4b01      	ldr	r3, [pc, #4]	; (8f20 <restore_pofwarn+0x2c>)
    8f1a:	2200      	movs	r2, #0
    8f1c:	701a      	strb	r2, [r3, #0]
	}
}
    8f1e:	4770      	bx	lr
    8f20:	20002f7c 	.word	0x20002f7c

00008f24 <flash_nrf_erase>:
{
    8f24:	b570      	push	{r4, r5, r6, lr}
    8f26:	460c      	mov	r4, r1
    8f28:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    8f2a:	f00a fe63 	bl	13bf4 <nrfx_nvmc_flash_page_size_get>
    8f2e:	4606      	mov	r6, r0
	size_t flash_size = nrfx_nvmc_flash_size_get();
    8f30:	f00a fe5c 	bl	13bec <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
    8f34:	42a0      	cmp	r0, r4
    8f36:	d914      	bls.n	8f62 <flash_nrf_erase+0x3e>
    8f38:	2c00      	cmp	r4, #0
    8f3a:	db12      	blt.n	8f62 <flash_nrf_erase+0x3e>
	    addr < 0 ||
    8f3c:	42a8      	cmp	r0, r5
    8f3e:	d310      	bcc.n	8f62 <flash_nrf_erase+0x3e>
	    (addr) + len > flash_size) {
    8f40:	1963      	adds	r3, r4, r5
	    len > flash_size ||
    8f42:	4283      	cmp	r3, r0
    8f44:	d80d      	bhi.n	8f62 <flash_nrf_erase+0x3e>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    8f46:	fbb4 f3f6 	udiv	r3, r4, r6
    8f4a:	fb06 4313 	mls	r3, r6, r3, r4
    8f4e:	b9f3      	cbnz	r3, 8f8e <flash_nrf_erase+0x6a>
    8f50:	fbb5 f3f6 	udiv	r3, r5, r6
    8f54:	fb06 5313 	mls	r3, r6, r3, r5
    8f58:	b9cb      	cbnz	r3, 8f8e <flash_nrf_erase+0x6a>
		if (!n_pages) {
    8f5a:	42b5      	cmp	r5, r6
    8f5c:	d22c      	bcs.n	8fb8 <flash_nrf_erase+0x94>
			return 0;
    8f5e:	2400      	movs	r4, #0
    8f60:	e013      	b.n	8f8a <flash_nrf_erase+0x66>
    8f62:	4a1e      	ldr	r2, [pc, #120]	; (8fdc <flash_nrf_erase+0xb8>)
    8f64:	4b1e      	ldr	r3, [pc, #120]	; (8fe0 <flash_nrf_erase+0xbc>)
    8f66:	1ad2      	subs	r2, r2, r3
    8f68:	08d2      	lsrs	r2, r2, #3
		LOG_ERR("invalid address: 0x%08lx:%zu",
    8f6a:	f04f 0300 	mov.w	r3, #0
    8f6e:	2101      	movs	r1, #1
    8f70:	f361 0302 	bfi	r3, r1, #0, #3
    8f74:	f36f 03c5 	bfc	r3, #3, #3
    8f78:	f362 138f 	bfi	r3, r2, #6, #10
    8f7c:	462a      	mov	r2, r5
    8f7e:	4621      	mov	r1, r4
    8f80:	4818      	ldr	r0, [pc, #96]	; (8fe4 <flash_nrf_erase+0xc0>)
    8f82:	f7f9 fe4f 	bl	2c24 <log_2>
		return -EINVAL;
    8f86:	f06f 0415 	mvn.w	r4, #21
}
    8f8a:	4620      	mov	r0, r4
    8f8c:	bd70      	pop	{r4, r5, r6, pc}
    8f8e:	4a13      	ldr	r2, [pc, #76]	; (8fdc <flash_nrf_erase+0xb8>)
    8f90:	4b13      	ldr	r3, [pc, #76]	; (8fe0 <flash_nrf_erase+0xbc>)
    8f92:	1ad2      	subs	r2, r2, r3
    8f94:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("unaligned address: 0x%08lx:%zu",
    8f96:	f04f 0300 	mov.w	r3, #0
    8f9a:	2101      	movs	r1, #1
    8f9c:	f361 0302 	bfi	r3, r1, #0, #3
    8fa0:	f36f 03c5 	bfc	r3, #3, #3
    8fa4:	f362 138f 	bfi	r3, r2, #6, #10
    8fa8:	462a      	mov	r2, r5
    8faa:	4621      	mov	r1, r4
    8fac:	480e      	ldr	r0, [pc, #56]	; (8fe8 <flash_nrf_erase+0xc4>)
    8fae:	f7f9 fe39 	bl	2c24 <log_2>
			return -EINVAL;
    8fb2:	f06f 0415 	mvn.w	r4, #21
    8fb6:	e7e8      	b.n	8f8a <flash_nrf_erase+0x66>
	return z_impl_k_sem_take(sem, timeout);
    8fb8:	4e0c      	ldr	r6, [pc, #48]	; (8fec <flash_nrf_erase+0xc8>)
    8fba:	f04f 32ff 	mov.w	r2, #4294967295
    8fbe:	f04f 33ff 	mov.w	r3, #4294967295
    8fc2:	4630      	mov	r0, r6
    8fc4:	f006 fc6c 	bl	f8a0 <z_impl_k_sem_take>
		ret = erase(addr, size);
    8fc8:	4629      	mov	r1, r5
    8fca:	4620      	mov	r0, r4
    8fcc:	f00a fac3 	bl	13556 <erase>
    8fd0:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
    8fd2:	4630      	mov	r0, r6
    8fd4:	f006 fc40 	bl	f858 <z_impl_k_sem_give>
	return ret;
    8fd8:	e7d7      	b.n	8f8a <flash_nrf_erase+0x66>
    8fda:	bf00      	nop
    8fdc:	00015eb0 	.word	0x00015eb0
    8fe0:	00015ea8 	.word	0x00015ea8
    8fe4:	00017354 	.word	0x00017354
    8fe8:	00017374 	.word	0x00017374
    8fec:	2000272c 	.word	0x2000272c

00008ff0 <flash_nrf_write>:
{
    8ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8ff2:	460c      	mov	r4, r1
    8ff4:	4616      	mov	r6, r2
    8ff6:	461d      	mov	r5, r3
	size_t flash_size = nrfx_nvmc_flash_size_get();
    8ff8:	f00a fdf8 	bl	13bec <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
    8ffc:	42a0      	cmp	r0, r4
    8ffe:	d90f      	bls.n	9020 <flash_nrf_write+0x30>
    9000:	2c00      	cmp	r4, #0
    9002:	db0d      	blt.n	9020 <flash_nrf_write+0x30>
	    addr < 0 ||
    9004:	42a8      	cmp	r0, r5
    9006:	d30b      	bcc.n	9020 <flash_nrf_write+0x30>
	    (addr) + len > flash_size) {
    9008:	1963      	adds	r3, r4, r5
	    len > flash_size ||
    900a:	4298      	cmp	r0, r3
    900c:	d308      	bcc.n	9020 <flash_nrf_write+0x30>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    900e:	f014 0f03 	tst.w	r4, #3
    9012:	d11b      	bne.n	904c <flash_nrf_write+0x5c>
    9014:	f015 0f03 	tst.w	r5, #3
    9018:	d118      	bne.n	904c <flash_nrf_write+0x5c>
	if (!len) {
    901a:	bb65      	cbnz	r5, 9076 <flash_nrf_write+0x86>
		return 0;
    901c:	2400      	movs	r4, #0
    901e:	e013      	b.n	9048 <flash_nrf_write+0x58>
    9020:	4a1e      	ldr	r2, [pc, #120]	; (909c <flash_nrf_write+0xac>)
    9022:	4b1f      	ldr	r3, [pc, #124]	; (90a0 <flash_nrf_write+0xb0>)
    9024:	1ad2      	subs	r2, r2, r3
    9026:	08d2      	lsrs	r2, r2, #3
		LOG_ERR("invalid address: 0x%08lx:%zu",
    9028:	f04f 0300 	mov.w	r3, #0
    902c:	2101      	movs	r1, #1
    902e:	f361 0302 	bfi	r3, r1, #0, #3
    9032:	f36f 03c5 	bfc	r3, #3, #3
    9036:	f362 138f 	bfi	r3, r2, #6, #10
    903a:	462a      	mov	r2, r5
    903c:	4621      	mov	r1, r4
    903e:	4819      	ldr	r0, [pc, #100]	; (90a4 <flash_nrf_write+0xb4>)
    9040:	f7f9 fdf0 	bl	2c24 <log_2>
		return -EINVAL;
    9044:	f06f 0415 	mvn.w	r4, #21
}
    9048:	4620      	mov	r0, r4
    904a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    904c:	4a13      	ldr	r2, [pc, #76]	; (909c <flash_nrf_write+0xac>)
    904e:	4b14      	ldr	r3, [pc, #80]	; (90a0 <flash_nrf_write+0xb0>)
    9050:	1ad2      	subs	r2, r2, r3
    9052:	08d2      	lsrs	r2, r2, #3
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    9054:	f04f 0300 	mov.w	r3, #0
    9058:	2101      	movs	r1, #1
    905a:	f361 0302 	bfi	r3, r1, #0, #3
    905e:	f36f 03c5 	bfc	r3, #3, #3
    9062:	f362 138f 	bfi	r3, r2, #6, #10
    9066:	462a      	mov	r2, r5
    9068:	4621      	mov	r1, r4
    906a:	480f      	ldr	r0, [pc, #60]	; (90a8 <flash_nrf_write+0xb8>)
    906c:	f7f9 fdda 	bl	2c24 <log_2>
		return -EINVAL;
    9070:	f06f 0415 	mvn.w	r4, #21
    9074:	e7e8      	b.n	9048 <flash_nrf_write+0x58>
	return z_impl_k_sem_take(sem, timeout);
    9076:	4f0d      	ldr	r7, [pc, #52]	; (90ac <flash_nrf_write+0xbc>)
    9078:	f04f 32ff 	mov.w	r2, #4294967295
    907c:	f04f 33ff 	mov.w	r3, #4294967295
    9080:	4638      	mov	r0, r7
    9082:	f006 fc0d 	bl	f8a0 <z_impl_k_sem_take>
		ret = write(addr, data, len);
    9086:	462a      	mov	r2, r5
    9088:	4631      	mov	r1, r6
    908a:	4620      	mov	r0, r4
    908c:	f00a fa8a 	bl	135a4 <write>
    9090:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
    9092:	4638      	mov	r0, r7
    9094:	f006 fbe0 	bl	f858 <z_impl_k_sem_give>
	return ret;
    9098:	e7d6      	b.n	9048 <flash_nrf_write+0x58>
    909a:	bf00      	nop
    909c:	00015eb0 	.word	0x00015eb0
    90a0:	00015ea8 	.word	0x00015ea8
    90a4:	00017354 	.word	0x00017354
    90a8:	00017394 	.word	0x00017394
    90ac:	2000272c 	.word	0x2000272c

000090b0 <flash_nrf_read>:
{
    90b0:	b570      	push	{r4, r5, r6, lr}
    90b2:	460c      	mov	r4, r1
    90b4:	4616      	mov	r6, r2
    90b6:	461d      	mov	r5, r3
	size_t flash_size = nrfx_nvmc_flash_size_get();
    90b8:	f00a fd98 	bl	13bec <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
    90bc:	4284      	cmp	r4, r0
    90be:	d209      	bcs.n	90d4 <flash_nrf_read+0x24>
    90c0:	2c00      	cmp	r4, #0
    90c2:	db07      	blt.n	90d4 <flash_nrf_read+0x24>
	    addr < 0 ||
    90c4:	42a8      	cmp	r0, r5
    90c6:	d305      	bcc.n	90d4 <flash_nrf_read+0x24>
	    (addr) + len > flash_size) {
    90c8:	1963      	adds	r3, r4, r5
	    len > flash_size ||
    90ca:	4283      	cmp	r3, r0
    90cc:	d802      	bhi.n	90d4 <flash_nrf_read+0x24>
	if (!len) {
    90ce:	b9b5      	cbnz	r5, 90fe <flash_nrf_read+0x4e>
		return 0;
    90d0:	2000      	movs	r0, #0
    90d2:	e013      	b.n	90fc <flash_nrf_read+0x4c>
    90d4:	4a0d      	ldr	r2, [pc, #52]	; (910c <flash_nrf_read+0x5c>)
    90d6:	4b0e      	ldr	r3, [pc, #56]	; (9110 <flash_nrf_read+0x60>)
    90d8:	1ad2      	subs	r2, r2, r3
    90da:	08d2      	lsrs	r2, r2, #3
		LOG_ERR("invalid address: 0x%08lx:%zu",
    90dc:	f04f 0300 	mov.w	r3, #0
    90e0:	2101      	movs	r1, #1
    90e2:	f361 0302 	bfi	r3, r1, #0, #3
    90e6:	f36f 03c5 	bfc	r3, #3, #3
    90ea:	f362 138f 	bfi	r3, r2, #6, #10
    90ee:	462a      	mov	r2, r5
    90f0:	4621      	mov	r1, r4
    90f2:	4808      	ldr	r0, [pc, #32]	; (9114 <flash_nrf_read+0x64>)
    90f4:	f7f9 fd96 	bl	2c24 <log_2>
		return -EINVAL;
    90f8:	f06f 0015 	mvn.w	r0, #21
}
    90fc:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(data, (void *)addr, len);
    90fe:	462a      	mov	r2, r5
    9100:	4621      	mov	r1, r4
    9102:	4630      	mov	r0, r6
    9104:	f009 fcdc 	bl	12ac0 <memcpy>
	return 0;
    9108:	2000      	movs	r0, #0
    910a:	e7f7      	b.n	90fc <flash_nrf_read+0x4c>
    910c:	00015eb0 	.word	0x00015eb0
    9110:	00015ea8 	.word	0x00015ea8
    9114:	00017354 	.word	0x00017354

00009118 <nrf_flash_init>:
{
    9118:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    911a:	2201      	movs	r2, #1
    911c:	4611      	mov	r1, r2
    911e:	4806      	ldr	r0, [pc, #24]	; (9138 <nrf_flash_init+0x20>)
    9120:	f00c fa6a 	bl	155f8 <z_impl_k_sem_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    9124:	f00a fd6a 	bl	13bfc <nrfx_nvmc_flash_page_count_get>
    9128:	4c04      	ldr	r4, [pc, #16]	; (913c <nrf_flash_init+0x24>)
    912a:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    912c:	f00a fd62 	bl	13bf4 <nrfx_nvmc_flash_page_size_get>
    9130:	6060      	str	r0, [r4, #4]
}
    9132:	2000      	movs	r0, #0
    9134:	bd10      	pop	{r4, pc}
    9136:	bf00      	nop
    9138:	2000272c 	.word	0x2000272c
    913c:	20002724 	.word	0x20002724

00009140 <baudrate_set>:
	return dev->data;
}

static inline const struct uarte_nrfx_config *get_dev_config(const struct device *dev)
{
	return dev->config;
    9140:	6843      	ldr	r3, [r0, #4]

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = get_dev_config(dev);

	return config->uarte_regs;
    9142:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    9144:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    9148:	d06f      	beq.n	922a <baudrate_set+0xea>
    914a:	d83a      	bhi.n	91c2 <baudrate_set+0x82>
    914c:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    9150:	d06e      	beq.n	9230 <baudrate_set+0xf0>
    9152:	d90a      	bls.n	916a <baudrate_set+0x2a>
    9154:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    9158:	d075      	beq.n	9246 <baudrate_set+0x106>
    915a:	d924      	bls.n	91a6 <baudrate_set+0x66>
    915c:	f647 2312 	movw	r3, #31250	; 0x7a12
    9160:	4299      	cmp	r1, r3
    9162:	d12b      	bne.n	91bc <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    9164:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    9168:	e013      	b.n	9192 <baudrate_set+0x52>
	switch (baudrate) {
    916a:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    916e:	d061      	beq.n	9234 <baudrate_set+0xf4>
    9170:	d907      	bls.n	9182 <baudrate_set+0x42>
    9172:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    9176:	d063      	beq.n	9240 <baudrate_set+0x100>
    9178:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    917c:	d110      	bne.n	91a0 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    917e:	4b3c      	ldr	r3, [pc, #240]	; (9270 <baudrate_set+0x130>)
    9180:	e007      	b.n	9192 <baudrate_set+0x52>
	switch (baudrate) {
    9182:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    9186:	d058      	beq.n	923a <baudrate_set+0xfa>
    9188:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    918c:	d105      	bne.n	919a <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    918e:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    9192:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    9196:	2000      	movs	r0, #0
    9198:	4770      	bx	lr
	switch (baudrate) {
    919a:	f06f 0015 	mvn.w	r0, #21
    919e:	4770      	bx	lr
    91a0:	f06f 0015 	mvn.w	r0, #21
    91a4:	4770      	bx	lr
    91a6:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    91aa:	d04e      	beq.n	924a <baudrate_set+0x10a>
    91ac:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    91b0:	d101      	bne.n	91b6 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    91b2:	4b30      	ldr	r3, [pc, #192]	; (9274 <baudrate_set+0x134>)
    91b4:	e7ed      	b.n	9192 <baudrate_set+0x52>
	switch (baudrate) {
    91b6:	f06f 0015 	mvn.w	r0, #21
    91ba:	4770      	bx	lr
    91bc:	f06f 0015 	mvn.w	r0, #21
    91c0:	4770      	bx	lr
    91c2:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    91c6:	d042      	beq.n	924e <baudrate_set+0x10e>
    91c8:	d909      	bls.n	91de <baudrate_set+0x9e>
    91ca:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    91ce:	d046      	beq.n	925e <baudrate_set+0x11e>
    91d0:	d91f      	bls.n	9212 <baudrate_set+0xd2>
    91d2:	4b29      	ldr	r3, [pc, #164]	; (9278 <baudrate_set+0x138>)
    91d4:	4299      	cmp	r1, r3
    91d6:	d148      	bne.n	926a <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    91d8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    91dc:	e7d9      	b.n	9192 <baudrate_set+0x52>
	switch (baudrate) {
    91de:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    91e2:	d037      	beq.n	9254 <baudrate_set+0x114>
    91e4:	d905      	bls.n	91f2 <baudrate_set+0xb2>
    91e6:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    91ea:	d10f      	bne.n	920c <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    91ec:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    91f0:	e7cf      	b.n	9192 <baudrate_set+0x52>
	switch (baudrate) {
    91f2:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    91f6:	4299      	cmp	r1, r3
    91f8:	d02e      	beq.n	9258 <baudrate_set+0x118>
    91fa:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    91fe:	d102      	bne.n	9206 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    9200:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    9204:	e7c5      	b.n	9192 <baudrate_set+0x52>
	switch (baudrate) {
    9206:	f06f 0015 	mvn.w	r0, #21
    920a:	4770      	bx	lr
    920c:	f06f 0015 	mvn.w	r0, #21
    9210:	4770      	bx	lr
    9212:	4b1a      	ldr	r3, [pc, #104]	; (927c <baudrate_set+0x13c>)
    9214:	4299      	cmp	r1, r3
    9216:	d025      	beq.n	9264 <baudrate_set+0x124>
    9218:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    921c:	d102      	bne.n	9224 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    921e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    9222:	e7b6      	b.n	9192 <baudrate_set+0x52>
	switch (baudrate) {
    9224:	f06f 0015 	mvn.w	r0, #21
    9228:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    922a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    922e:	e7b0      	b.n	9192 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    9230:	4b13      	ldr	r3, [pc, #76]	; (9280 <baudrate_set+0x140>)
    9232:	e7ae      	b.n	9192 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    9234:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    9238:	e7ab      	b.n	9192 <baudrate_set+0x52>
	switch (baudrate) {
    923a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    923e:	e7a8      	b.n	9192 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    9240:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    9244:	e7a5      	b.n	9192 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    9246:	4b0f      	ldr	r3, [pc, #60]	; (9284 <baudrate_set+0x144>)
    9248:	e7a3      	b.n	9192 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    924a:	4b0f      	ldr	r3, [pc, #60]	; (9288 <baudrate_set+0x148>)
    924c:	e7a1      	b.n	9192 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    924e:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    9252:	e79e      	b.n	9192 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    9254:	4b0d      	ldr	r3, [pc, #52]	; (928c <baudrate_set+0x14c>)
    9256:	e79c      	b.n	9192 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    9258:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    925c:	e799      	b.n	9192 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    925e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    9262:	e796      	b.n	9192 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    9264:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    9268:	e793      	b.n	9192 <baudrate_set+0x52>
	switch (baudrate) {
    926a:	f06f 0015 	mvn.w	r0, #21
}
    926e:	4770      	bx	lr
    9270:	0013b000 	.word	0x0013b000
    9274:	004ea000 	.word	0x004ea000
    9278:	000f4240 	.word	0x000f4240
    927c:	0003d090 	.word	0x0003d090
    9280:	00275000 	.word	0x00275000
    9284:	0075c000 	.word	0x0075c000
    9288:	003af000 	.word	0x003af000
    928c:	013a9000 	.word	0x013a9000

00009290 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    9290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9294:	4605      	mov	r5, r0
    9296:	460f      	mov	r7, r1
	return dev->data;
    9298:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    929c:	f00c f8bb 	bl	15416 <k_is_in_isr>
    92a0:	b920      	cbnz	r0, 92ac <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    92a2:	4b16      	ldr	r3, [pc, #88]	; (92fc <uarte_nrfx_poll_out+0x6c>)
    92a4:	781b      	ldrb	r3, [r3, #0]
    92a6:	b1ab      	cbz	r3, 92d4 <uarte_nrfx_poll_out+0x44>
    92a8:	2300      	movs	r3, #0
    92aa:	e000      	b.n	92ae <uarte_nrfx_poll_out+0x1e>
    92ac:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    92ae:	b19b      	cbz	r3, 92d8 <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
    92b0:	f04f 0320 	mov.w	r3, #32
    92b4:	f3ef 8411 	mrs	r4, BASEPRI
    92b8:	f383 8812 	msr	BASEPRI_MAX, r3
    92bc:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
    92c0:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    92c2:	4628      	mov	r0, r5
    92c4:	f00a fa7a 	bl	137bc <is_tx_ready>
    92c8:	b950      	cbnz	r0, 92e0 <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
    92ca:	f384 8811 	msr	BASEPRI, r4
    92ce:	f3bf 8f6f 	isb	sy
}
    92d2:	e7ed      	b.n	92b0 <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    92d4:	2301      	movs	r3, #1
    92d6:	e7ea      	b.n	92ae <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    92d8:	4628      	mov	r0, r5
    92da:	f00a fb90 	bl	139fe <wait_tx_ready>
    92de:	4606      	mov	r6, r0
	}

	data->char_out = c;
    92e0:	4641      	mov	r1, r8
    92e2:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    92e6:	2201      	movs	r2, #1
    92e8:	4628      	mov	r0, r5
    92ea:	f00a fa81 	bl	137f0 <tx_start>
	__asm__ volatile(
    92ee:	f386 8811 	msr	BASEPRI, r6
    92f2:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    92f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    92fa:	bf00      	nop
    92fc:	20002f83 	.word	0x20002f83

00009300 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    9300:	b538      	push	{r3, r4, r5, lr}
    9302:	4604      	mov	r4, r0
    9304:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    9306:	f101 0016 	add.w	r0, r1, #22
    930a:	f000 ff77 	bl	a1fc <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    930e:	4b14      	ldr	r3, [pc, #80]	; (9360 <endtx_stoptx_ppi_init+0x60>)
    9310:	4298      	cmp	r0, r3
    9312:	d111      	bne.n	9338 <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    9314:	7dab      	ldrb	r3, [r5, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    9316:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    931a:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    931c:	4a11      	ldr	r2, [pc, #68]	; (9364 <endtx_stoptx_ppi_init+0x64>)
    931e:	33a2      	adds	r3, #162	; 0xa2
    9320:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    9324:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    9328:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    932a:	7da9      	ldrb	r1, [r5, #22]
    932c:	2301      	movs	r3, #1
    932e:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    9330:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    9334:	2000      	movs	r0, #0
}
    9336:	bd38      	pop	{r3, r4, r5, pc}
    9338:	4b0b      	ldr	r3, [pc, #44]	; (9368 <endtx_stoptx_ppi_init+0x68>)
    933a:	4a0c      	ldr	r2, [pc, #48]	; (936c <endtx_stoptx_ppi_init+0x6c>)
    933c:	1a9b      	subs	r3, r3, r2
    933e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate PPI Channel");
    9340:	f04f 0100 	mov.w	r1, #0
    9344:	2201      	movs	r2, #1
    9346:	f362 0102 	bfi	r1, r2, #0, #3
    934a:	f36f 01c5 	bfc	r1, #3, #3
    934e:	f363 118f 	bfi	r1, r3, #6, #10
    9352:	4807      	ldr	r0, [pc, #28]	; (9370 <endtx_stoptx_ppi_init+0x70>)
    9354:	f7f9 fcc4 	bl	2ce0 <log_0>
		return -EIO;
    9358:	f06f 0004 	mvn.w	r0, #4
    935c:	e7eb      	b.n	9336 <endtx_stoptx_ppi_init+0x36>
    935e:	bf00      	nop
    9360:	0bad0000 	.word	0x0bad0000
    9364:	4001f000 	.word	0x4001f000
    9368:	00015f00 	.word	0x00015f00
    936c:	00015ea8 	.word	0x00015ea8
    9370:	000173e0 	.word	0x000173e0

00009374 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    9374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->config;
    9376:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
    9378:	6825      	ldr	r5, [r4, #0]
	return dev->data;
    937a:	6906      	ldr	r6, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    937c:	2300      	movs	r3, #0
    937e:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    9382:	6030      	str	r0, [r6, #0]

	nrf_gpio_pin_write(cfg->pseltxd, 1);
    9384:	68a3      	ldr	r3, [r4, #8]
    *p_pin = pin_number & 0x1F;
    9386:	f003 011f 	and.w	r1, r3, #31
    return pin_number >> 5;
    938a:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    938c:	2b01      	cmp	r3, #1
    938e:	f000 8097 	beq.w	94c0 <uarte_instance_init+0x14c>
        case 0: return NRF_P0;
    9392:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    9396:	2301      	movs	r3, #1
    9398:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    939a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_gpio_cfg_output(cfg->pseltxd);
    939e:	68a3      	ldr	r3, [r4, #8]
    *p_pin = pin_number & 0x1F;
    93a0:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    93a4:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    93a6:	2b01      	cmp	r3, #1
    93a8:	f000 808c 	beq.w	94c4 <uarte_instance_init+0x150>
        case 0: return NRF_P0;
    93ac:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    93b0:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    93b4:	2203      	movs	r2, #3
    93b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (cfg->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    93ba:	68e3      	ldr	r3, [r4, #12]
    93bc:	f1b3 3fff 	cmp.w	r3, #4294967295
    93c0:	d00c      	beq.n	93dc <uarte_instance_init+0x68>
		nrf_gpio_cfg_input(cfg->pselrxd, cfg->rxd_pull);
    93c2:	7e21      	ldrb	r1, [r4, #24]
    *p_pin = pin_number & 0x1F;
    93c4:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    93c8:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    93ca:	2b01      	cmp	r3, #1
    93cc:	d07c      	beq.n	94c8 <uarte_instance_init+0x154>
        case 0: return NRF_P0;
    93ce:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    93d2:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    93d4:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    93d8:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
	}

	nrf_uarte_txrx_pins_set(uarte, cfg->pseltxd, cfg->pselrxd);
    93dc:	68a2      	ldr	r2, [r4, #8]
    93de:	68e3      	ldr	r3, [r4, #12]
    p_reg->PSEL.TXD = pseltxd;
    93e0:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    93e4:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514

	if (cfg->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    93e8:	6923      	ldr	r3, [r4, #16]
    93ea:	f1b3 3fff 	cmp.w	r3, #4294967295
    93ee:	d00c      	beq.n	940a <uarte_instance_init+0x96>
		nrf_gpio_cfg_input(cfg->pselcts, cfg->cts_pull);
    93f0:	7e61      	ldrb	r1, [r4, #25]
    *p_pin = pin_number & 0x1F;
    93f2:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    93f6:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    93f8:	2b01      	cmp	r3, #1
    93fa:	d067      	beq.n	94cc <uarte_instance_init+0x158>
        case 0: return NRF_P0;
    93fc:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    9400:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    9402:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    9406:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
	}

	if (cfg->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    940a:	6963      	ldr	r3, [r4, #20]
    940c:	f1b3 3fff 	cmp.w	r3, #4294967295
    9410:	d017      	beq.n	9442 <uarte_instance_init+0xce>
    *p_pin = pin_number & 0x1F;
    9412:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    9416:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9418:	2b01      	cmp	r3, #1
    941a:	d059      	beq.n	94d0 <uarte_instance_init+0x15c>
        case 0: return NRF_P0;
    941c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    9420:	2301      	movs	r3, #1
    9422:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    9424:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
		nrf_gpio_pin_write(cfg->pselrts, 1);
		nrf_gpio_cfg_output(cfg->pselrts);
    9428:	6963      	ldr	r3, [r4, #20]
    *p_pin = pin_number & 0x1F;
    942a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    942e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9430:	2b01      	cmp	r3, #1
    9432:	d04f      	beq.n	94d4 <uarte_instance_init+0x160>
        case 0: return NRF_P0;
    9434:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    9438:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    943c:	2203      	movs	r2, #3
    943e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	nrf_uarte_hwfc_pins_set(uarte, cfg->pselrts, cfg->pselcts);
    9442:	6962      	ldr	r2, [r4, #20]
    9444:	6923      	ldr	r3, [r4, #16]
    p_reg->PSEL.RTS = pselrts;
    9446:	f8c5 2508 	str.w	r2, [r5, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    944a:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
	return dev->data;
    944e:	6901      	ldr	r1, [r0, #16]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    9450:	3104      	adds	r1, #4
    9452:	f00a f946 	bl	136e2 <uarte_nrfx_configure>
	if (err) {
    9456:	4607      	mov	r7, r0
    9458:	bb80      	cbnz	r0, 94bc <uarte_instance_init+0x148>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    945a:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    945c:	f013 0f08 	tst.w	r3, #8
    9460:	d13a      	bne.n	94d8 <uarte_instance_init+0x164>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    9462:	2308      	movs	r3, #8
    9464:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (cfg->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    9468:	68e3      	ldr	r3, [r4, #12]
    946a:	f1b3 3fff 	cmp.w	r3, #4294967295
    946e:	d00c      	beq.n	948a <uarte_instance_init+0x116>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9470:	2300      	movs	r3, #0
    9472:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    9476:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    947a:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    947e:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    9482:	2301      	movs	r3, #1
    9484:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9488:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    948a:	6863      	ldr	r3, [r4, #4]
    948c:	f013 0f08 	tst.w	r3, #8
    9490:	d103      	bne.n	949a <uarte_instance_init+0x126>
    p_reg->INTENSET = mask;
    9492:	f44f 7380 	mov.w	r3, #256	; 0x100
    9496:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    949a:	6863      	ldr	r3, [r4, #4]
    949c:	f013 0f10 	tst.w	r3, #16
    94a0:	d003      	beq.n	94aa <uarte_instance_init+0x136>
    94a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    94a6:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    94aa:	3614      	adds	r6, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    94ac:	f8c5 6544 	str.w	r6, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    94b0:	2300      	movs	r3, #0
    94b2:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    94b6:	2301      	movs	r3, #1
    94b8:	60ab      	str	r3, [r5, #8]
    94ba:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    94bc:	4638      	mov	r0, r7
    94be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
    94c0:	4a09      	ldr	r2, [pc, #36]	; (94e8 <uarte_instance_init+0x174>)
    94c2:	e768      	b.n	9396 <uarte_instance_init+0x22>
    94c4:	4908      	ldr	r1, [pc, #32]	; (94e8 <uarte_instance_init+0x174>)
    94c6:	e773      	b.n	93b0 <uarte_instance_init+0x3c>
    94c8:	4f07      	ldr	r7, [pc, #28]	; (94e8 <uarte_instance_init+0x174>)
    94ca:	e782      	b.n	93d2 <uarte_instance_init+0x5e>
    94cc:	4f06      	ldr	r7, [pc, #24]	; (94e8 <uarte_instance_init+0x174>)
    94ce:	e797      	b.n	9400 <uarte_instance_init+0x8c>
    94d0:	4905      	ldr	r1, [pc, #20]	; (94e8 <uarte_instance_init+0x174>)
    94d2:	e7a5      	b.n	9420 <uarte_instance_init+0xac>
    94d4:	4904      	ldr	r1, [pc, #16]	; (94e8 <uarte_instance_init+0x174>)
    94d6:	e7af      	b.n	9438 <uarte_instance_init+0xc4>
		err = endtx_stoptx_ppi_init(uarte, data);
    94d8:	4631      	mov	r1, r6
    94da:	4628      	mov	r0, r5
    94dc:	f7ff ff10 	bl	9300 <endtx_stoptx_ppi_init>
		if (err < 0) {
    94e0:	2800      	cmp	r0, #0
    94e2:	dabe      	bge.n	9462 <uarte_instance_init+0xee>
			return err;
    94e4:	4607      	mov	r7, r0
    94e6:	e7e9      	b.n	94bc <uarte_instance_init+0x148>
    94e8:	50000300 	.word	0x50000300

000094ec <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    94ec:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    94f0:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    94f4:	4b01      	ldr	r3, [pc, #4]	; (94fc <set_comparator+0x10>)
    94f6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    94fa:	4770      	bx	lr
    94fc:	40011000 	.word	0x40011000

00009500 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    9500:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    9504:	4b01      	ldr	r3, [pc, #4]	; (950c <get_comparator+0xc>)
    9506:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    950a:	4770      	bx	lr
    950c:	40011000 	.word	0x40011000

00009510 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    9510:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    9514:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    9516:	4a02      	ldr	r2, [pc, #8]	; (9520 <event_enable+0x10>)
    9518:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    951c:	4770      	bx	lr
    951e:	bf00      	nop
    9520:	40011000 	.word	0x40011000

00009524 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    9524:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    9528:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    952a:	4a02      	ldr	r2, [pc, #8]	; (9534 <event_disable+0x10>)
    952c:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    9530:	4770      	bx	lr
    9532:	bf00      	nop
    9534:	40011000 	.word	0x40011000

00009538 <counter>:
     return p_reg->COUNTER;
    9538:	4b01      	ldr	r3, [pc, #4]	; (9540 <counter+0x8>)
    953a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    953e:	4770      	bx	lr
    9540:	40011000 	.word	0x40011000

00009544 <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
    9544:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    9546:	2301      	movs	r3, #1
    9548:	4083      	lsls	r3, r0
    954a:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    954c:	4a10      	ldr	r2, [pc, #64]	; (9590 <compare_int_lock+0x4c>)
    954e:	f3bf 8f5b 	dmb	ish
    9552:	e852 1f00 	ldrex	r1, [r2]
    9556:	ea01 0c04 	and.w	ip, r1, r4
    955a:	e842 ce00 	strex	lr, ip, [r2]
    955e:	f1be 0f00 	cmp.w	lr, #0
    9562:	d1f6      	bne.n	9552 <compare_int_lock+0xe>
    9564:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    9568:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    956c:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    9570:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    9574:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    9578:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    957c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9580:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    9584:	420b      	tst	r3, r1
}
    9586:	bf14      	ite	ne
    9588:	2001      	movne	r0, #1
    958a:	2000      	moveq	r0, #0
    958c:	bd10      	pop	{r4, pc}
    958e:	bf00      	nop
    9590:	20002760 	.word	0x20002760

00009594 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    9594:	b570      	push	{r4, r5, r6, lr}
    9596:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    9598:	f00a fa7c 	bl	13a94 <full_int_lock>
    959c:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    959e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    95a2:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    95a4:	4a17      	ldr	r2, [pc, #92]	; (9604 <channel_processing_check_and_clear+0x70>)
    95a6:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    95aa:	4213      	tst	r3, r2
    95ac:	d105      	bne.n	95ba <channel_processing_check_and_clear+0x26>
	bool result = false;
    95ae:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    95b0:	4628      	mov	r0, r5
    95b2:	f00a fa78 	bl	13aa6 <full_int_unlock>

	return result;
}
    95b6:	4630      	mov	r0, r6
    95b8:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    95ba:	2301      	movs	r3, #1
    95bc:	40a3      	lsls	r3, r4
    95be:	43db      	mvns	r3, r3
    95c0:	4a11      	ldr	r2, [pc, #68]	; (9608 <channel_processing_check_and_clear+0x74>)
    95c2:	f3bf 8f5b 	dmb	ish
    95c6:	e852 1f00 	ldrex	r1, [r2]
    95ca:	ea01 0003 	and.w	r0, r1, r3
    95ce:	e842 0600 	strex	r6, r0, [r2]
    95d2:	2e00      	cmp	r6, #0
    95d4:	d1f7      	bne.n	95c6 <channel_processing_check_and_clear+0x32>
    95d6:	f3bf 8f5b 	dmb	ish
    95da:	b959      	cbnz	r1, 95f4 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    95dc:	f104 0350 	add.w	r3, r4, #80	; 0x50
    95e0:	009b      	lsls	r3, r3, #2
    95e2:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    95e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    95e8:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    95ec:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    95ee:	b113      	cbz	r3, 95f6 <channel_processing_check_and_clear+0x62>
    95f0:	2301      	movs	r3, #1
    95f2:	e000      	b.n	95f6 <channel_processing_check_and_clear+0x62>
    95f4:	2301      	movs	r3, #1
		if (result) {
    95f6:	461e      	mov	r6, r3
    95f8:	2b00      	cmp	r3, #0
    95fa:	d0d9      	beq.n	95b0 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    95fc:	4620      	mov	r0, r4
    95fe:	f00a fa3a 	bl	13a76 <event_clear>
    9602:	e7d5      	b.n	95b0 <channel_processing_check_and_clear+0x1c>
    9604:	40011000 	.word	0x40011000
    9608:	2000275c 	.word	0x2000275c

0000960c <compare_int_unlock>:
	if (key) {
    960c:	b901      	cbnz	r1, 9610 <compare_int_unlock+0x4>
}
    960e:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    9610:	2301      	movs	r3, #1
    9612:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9614:	4a11      	ldr	r2, [pc, #68]	; (965c <compare_int_unlock+0x50>)
    9616:	f3bf 8f5b 	dmb	ish
    961a:	e852 1f00 	ldrex	r1, [r2]
    961e:	4319      	orrs	r1, r3
    9620:	e842 1c00 	strex	ip, r1, [r2]
    9624:	f1bc 0f00 	cmp.w	ip, #0
    9628:	d1f7      	bne.n	961a <compare_int_unlock+0xe>
    962a:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    962e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    9632:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    9634:	4a0a      	ldr	r2, [pc, #40]	; (9660 <compare_int_unlock+0x54>)
    9636:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    963a:	f3bf 8f5b 	dmb	ish
    963e:	4b09      	ldr	r3, [pc, #36]	; (9664 <compare_int_unlock+0x58>)
    9640:	681b      	ldr	r3, [r3, #0]
    9642:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    9646:	fa23 f000 	lsr.w	r0, r3, r0
    964a:	f010 0f01 	tst.w	r0, #1
    964e:	d0de      	beq.n	960e <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9650:	4b05      	ldr	r3, [pc, #20]	; (9668 <compare_int_unlock+0x5c>)
    9652:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    9656:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    965a:	e7d8      	b.n	960e <compare_int_unlock+0x2>
    965c:	20002760 	.word	0x20002760
    9660:	40011000 	.word	0x40011000
    9664:	2000275c 	.word	0x2000275c
    9668:	e000e100 	.word	0xe000e100

0000966c <sys_clock_timeout_handler>:
{
    966c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    966e:	4607      	mov	r7, r0
    9670:	4614      	mov	r4, r2
    9672:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    9674:	4610      	mov	r0, r2
    9676:	4619      	mov	r1, r3
    9678:	f00a fa09 	bl	13a8e <absolute_time_to_cc>
    967c:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    967e:	4b15      	ldr	r3, [pc, #84]	; (96d4 <sys_clock_timeout_handler+0x68>)
    9680:	681a      	ldr	r2, [r3, #0]
    9682:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    9684:	601c      	str	r4, [r3, #0]
    9686:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    9688:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    968c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    9690:	d308      	bcc.n	96a4 <sys_clock_timeout_handler+0x38>
	return false;
    9692:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    9694:	f006 ffda 	bl	1064c <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    9698:	4638      	mov	r0, r7
    969a:	f7ff ff31 	bl	9500 <get_comparator>
    969e:	42a8      	cmp	r0, r5
    96a0:	d00c      	beq.n	96bc <sys_clock_timeout_handler+0x50>
}
    96a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    96a4:	4b0c      	ldr	r3, [pc, #48]	; (96d8 <sys_clock_timeout_handler+0x6c>)
    96a6:	6819      	ldr	r1, [r3, #0]
    96a8:	0a0b      	lsrs	r3, r1, #8
    96aa:	060a      	lsls	r2, r1, #24
    96ac:	1952      	adds	r2, r2, r5
    96ae:	f143 0300 	adc.w	r3, r3, #0
    96b2:	490a      	ldr	r1, [pc, #40]	; (96dc <sys_clock_timeout_handler+0x70>)
    96b4:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    96b8:	2401      	movs	r4, #1
    96ba:	e7eb      	b.n	9694 <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
    96bc:	b11c      	cbz	r4, 96c6 <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
    96be:	4638      	mov	r0, r7
    96c0:	f7ff ff26 	bl	9510 <event_enable>
}
    96c4:	e7ed      	b.n	96a2 <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
    96c6:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    96ca:	4638      	mov	r0, r7
    96cc:	f7ff ff0e 	bl	94ec <set_comparator>
    96d0:	e7f5      	b.n	96be <sys_clock_timeout_handler+0x52>
    96d2:	bf00      	nop
    96d4:	200007e0 	.word	0x200007e0
    96d8:	20002764 	.word	0x20002764
    96dc:	200007c8 	.word	0x200007c8

000096e0 <z_nrf_rtc_timer_read>:
{
    96e0:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    96e2:	4b0d      	ldr	r3, [pc, #52]	; (9718 <z_nrf_rtc_timer_read+0x38>)
    96e4:	681b      	ldr	r3, [r3, #0]
    96e6:	0a1d      	lsrs	r5, r3, #8
    96e8:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    96ea:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    96ee:	f7ff ff23 	bl	9538 <counter>
    96f2:	4603      	mov	r3, r0
	val += cntr;
    96f4:	1820      	adds	r0, r4, r0
    96f6:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    96fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    96fe:	d20a      	bcs.n	9716 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    9700:	4b06      	ldr	r3, [pc, #24]	; (971c <z_nrf_rtc_timer_read+0x3c>)
    9702:	e9d3 2300 	ldrd	r2, r3, [r3]
    9706:	4299      	cmp	r1, r3
    9708:	bf08      	it	eq
    970a:	4290      	cmpeq	r0, r2
    970c:	d203      	bcs.n	9716 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    970e:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    9712:	f141 0100 	adc.w	r1, r1, #0
}
    9716:	bd38      	pop	{r3, r4, r5, pc}
    9718:	20002764 	.word	0x20002764
    971c:	200007c8 	.word	0x200007c8

00009720 <compare_set_nolocks>:
{
    9720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9724:	4606      	mov	r6, r0
    9726:	4614      	mov	r4, r2
    9728:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    972a:	4610      	mov	r0, r2
    972c:	4619      	mov	r1, r3
    972e:	f00a f9ae 	bl	13a8e <absolute_time_to_cc>
    9732:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    9734:	f7ff ffd4 	bl	96e0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    9738:	42a9      	cmp	r1, r5
    973a:	bf08      	it	eq
    973c:	42a0      	cmpeq	r0, r4
    973e:	d21e      	bcs.n	977e <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
    9740:	ebb4 0800 	subs.w	r8, r4, r0
    9744:	eb65 0901 	sbc.w	r9, r5, r1
    9748:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    974c:	2300      	movs	r3, #0
    974e:	454b      	cmp	r3, r9
    9750:	bf08      	it	eq
    9752:	4542      	cmpeq	r2, r8
    9754:	d32e      	bcc.n	97b4 <compare_set_nolocks+0x94>
		if (target_time != cc_data[chan].target_time) {
    9756:	4b19      	ldr	r3, [pc, #100]	; (97bc <compare_set_nolocks+0x9c>)
    9758:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    975c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    9760:	42ab      	cmp	r3, r5
    9762:	bf08      	it	eq
    9764:	42a2      	cmpeq	r2, r4
    9766:	d018      	beq.n	979a <compare_set_nolocks+0x7a>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    9768:	4639      	mov	r1, r7
    976a:	4630      	mov	r0, r6
    976c:	f00a f9a0 	bl	13ab0 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    9770:	4639      	mov	r1, r7
    9772:	f00a f97c 	bl	13a6e <counter_sub>
    9776:	1824      	adds	r4, r4, r0
    9778:	f145 0500 	adc.w	r5, r5, #0
    977c:	e00d      	b.n	979a <compare_set_nolocks+0x7a>
		atomic_or(&force_isr_mask, BIT(chan));
    977e:	2301      	movs	r3, #1
    9780:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9782:	4a0f      	ldr	r2, [pc, #60]	; (97c0 <compare_set_nolocks+0xa0>)
    9784:	f3bf 8f5b 	dmb	ish
    9788:	e852 1f00 	ldrex	r1, [r2]
    978c:	4319      	orrs	r1, r3
    978e:	e842 1000 	strex	r0, r1, [r2]
    9792:	2800      	cmp	r0, #0
    9794:	d1f8      	bne.n	9788 <compare_set_nolocks+0x68>
    9796:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    979a:	4b08      	ldr	r3, [pc, #32]	; (97bc <compare_set_nolocks+0x9c>)
    979c:	0132      	lsls	r2, r6, #4
    979e:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    97a2:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    97a6:	9908      	ldr	r1, [sp, #32]
    97a8:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    97aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
    97ac:	6073      	str	r3, [r6, #4]
	return ret;
    97ae:	2000      	movs	r0, #0
}
    97b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    97b4:	f06f 0015 	mvn.w	r0, #21
    97b8:	e7fa      	b.n	97b0 <compare_set_nolocks+0x90>
    97ba:	bf00      	nop
    97bc:	200007d0 	.word	0x200007d0
    97c0:	2000275c 	.word	0x2000275c

000097c4 <process_channel>:

static void process_channel(int32_t chan)
{
    97c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    97c8:	b082      	sub	sp, #8
    97ca:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    97cc:	f7ff fee2 	bl	9594 <channel_processing_check_and_clear>
    97d0:	b910      	cbnz	r0, 97d8 <process_channel+0x14>

		if (handler) {
			handler(chan, expire_time, user_context);
		}
	}
}
    97d2:	b002      	add	sp, #8
    97d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    97d8:	f7ff ff82 	bl	96e0 <z_nrf_rtc_timer_read>
    97dc:	4606      	mov	r6, r0
    97de:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
    97e0:	f00a f958 	bl	13a94 <full_int_lock>
    97e4:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
    97e6:	4b13      	ldr	r3, [pc, #76]	; (9834 <process_channel+0x70>)
    97e8:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    97ec:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    97f0:	454f      	cmp	r7, r9
    97f2:	bf08      	it	eq
    97f4:	4546      	cmpeq	r6, r8
    97f6:	d20b      	bcs.n	9810 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    97f8:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    97fa:	4650      	mov	r0, sl
    97fc:	f00a f953 	bl	13aa6 <full_int_unlock>
		if (handler) {
    9800:	2e00      	cmp	r6, #0
    9802:	d0e6      	beq.n	97d2 <process_channel+0xe>
			handler(chan, expire_time, user_context);
    9804:	9500      	str	r5, [sp, #0]
    9806:	4642      	mov	r2, r8
    9808:	464b      	mov	r3, r9
    980a:	4620      	mov	r0, r4
    980c:	47b0      	blx	r6
}
    980e:	e7e0      	b.n	97d2 <process_channel+0xe>
			handler = cc_data[chan].callback;
    9810:	4a08      	ldr	r2, [pc, #32]	; (9834 <process_channel+0x70>)
    9812:	0123      	lsls	r3, r4, #4
    9814:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    9818:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    981a:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
    981c:	2000      	movs	r0, #0
    981e:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    9820:	f04f 32ff 	mov.w	r2, #4294967295
    9824:	f04f 33ff 	mov.w	r3, #4294967295
    9828:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    982c:	4620      	mov	r0, r4
    982e:	f7ff fe79 	bl	9524 <event_disable>
    9832:	e7e2      	b.n	97fa <process_channel+0x36>
    9834:	200007d0 	.word	0x200007d0

00009838 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    9838:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    983a:	4b0d      	ldr	r3, [pc, #52]	; (9870 <rtc_nrf_isr+0x38>)
    983c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    9840:	f013 0f02 	tst.w	r3, #2
    9844:	d00a      	beq.n	985c <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9846:	4b0b      	ldr	r3, [pc, #44]	; (9874 <rtc_nrf_isr+0x3c>)
    9848:	681b      	ldr	r3, [r3, #0]
    984a:	b13b      	cbz	r3, 985c <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    984c:	4b09      	ldr	r3, [pc, #36]	; (9874 <rtc_nrf_isr+0x3c>)
    984e:	2200      	movs	r2, #0
    9850:	601a      	str	r2, [r3, #0]
    9852:	681b      	ldr	r3, [r3, #0]
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
    9854:	4a08      	ldr	r2, [pc, #32]	; (9878 <rtc_nrf_isr+0x40>)
    9856:	6813      	ldr	r3, [r2, #0]
    9858:	3301      	adds	r3, #1
    985a:	6013      	str	r3, [r2, #0]
{
    985c:	2400      	movs	r4, #0
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    985e:	2c00      	cmp	r4, #0
    9860:	dd00      	ble.n	9864 <rtc_nrf_isr+0x2c>
		process_channel(chan);
	}
}
    9862:	bd10      	pop	{r4, pc}
		process_channel(chan);
    9864:	4620      	mov	r0, r4
    9866:	f7ff ffad 	bl	97c4 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    986a:	3401      	adds	r4, #1
    986c:	e7f7      	b.n	985e <rtc_nrf_isr+0x26>
    986e:	bf00      	nop
    9870:	40011000 	.word	0x40011000
    9874:	40011104 	.word	0x40011104
    9878:	20002764 	.word	0x20002764

0000987c <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    987c:	b530      	push	{r4, r5, lr}
    987e:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    9880:	2300      	movs	r3, #0
    9882:	4a1f      	ldr	r2, [pc, #124]	; (9900 <sys_clock_driver_init+0x84>)
    9884:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    9888:	2b00      	cmp	r3, #0
    988a:	dd27      	ble.n	98dc <sys_clock_driver_init+0x60>
    p_reg->INTENSET = mask;
    988c:	4c1c      	ldr	r4, [pc, #112]	; (9900 <sys_clock_driver_init+0x84>)
    988e:	2502      	movs	r5, #2
    9890:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9894:	4b1b      	ldr	r3, [pc, #108]	; (9904 <sys_clock_driver_init+0x88>)
    9896:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    989a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    989e:	2200      	movs	r2, #0
    98a0:	2101      	movs	r1, #1
    98a2:	2011      	movs	r0, #17
    98a4:	f7fb fc5a 	bl	515c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    98a8:	2011      	movs	r0, #17
    98aa:	f7fb fc25 	bl	50f8 <arch_irq_enable>
    98ae:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    98b2:	2301      	movs	r3, #1
    98b4:	4a14      	ldr	r2, [pc, #80]	; (9908 <sys_clock_driver_init+0x8c>)
    98b6:	6013      	str	r3, [r2, #0]
    98b8:	6023      	str	r3, [r4, #0]

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    98ba:	4a14      	ldr	r2, [pc, #80]	; (990c <sys_clock_driver_init+0x90>)
    98bc:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
				(COUNTER_HALF_SPAN - 1) :
				(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    98be:	2400      	movs	r4, #0
    98c0:	9401      	str	r4, [sp, #4]
    98c2:	4b13      	ldr	r3, [pc, #76]	; (9910 <sys_clock_driver_init+0x94>)
    98c4:	9300      	str	r3, [sp, #0]
    98c6:	4a13      	ldr	r2, [pc, #76]	; (9914 <sys_clock_driver_init+0x98>)
    98c8:	2300      	movs	r3, #0
    98ca:	4620      	mov	r0, r4
    98cc:	f00a f92b 	bl	13b26 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    98d0:	4628      	mov	r0, r5
    98d2:	f7fe fe43 	bl	855c <z_nrf_clock_control_lf_on>

	return 0;
}
    98d6:	4620      	mov	r0, r4
    98d8:	b003      	add	sp, #12
    98da:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    98dc:	4a0e      	ldr	r2, [pc, #56]	; (9918 <sys_clock_driver_init+0x9c>)
    98de:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    98e2:	f04f 30ff 	mov.w	r0, #4294967295
    98e6:	f04f 31ff 	mov.w	r1, #4294967295
    98ea:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    98ee:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    98f2:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    98f4:	4902      	ldr	r1, [pc, #8]	; (9900 <sys_clock_driver_init+0x84>)
    98f6:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    98fa:	3301      	adds	r3, #1
    98fc:	e7c4      	b.n	9888 <sys_clock_driver_init+0xc>
    98fe:	bf00      	nop
    9900:	40011000 	.word	0x40011000
    9904:	e000e100 	.word	0xe000e100
    9908:	40011008 	.word	0x40011008
    990c:	20002760 	.word	0x20002760
    9910:	0000966d 	.word	0x0000966d
    9914:	007fffff 	.word	0x007fffff
    9918:	200007d0 	.word	0x200007d0

0000991c <sys_clock_set_timeout>:

void sys_clock_set_timeout(int32_t ticks, bool idle)
{
    991c:	b510      	push	{r4, lr}
    991e:	b082      	sub	sp, #8

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    9920:	f1b0 3fff 	cmp.w	r0, #4294967295
    9924:	d007      	beq.n	9936 <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    9926:	1e44      	subs	r4, r0, #1
    9928:	2c00      	cmp	r4, #0
    992a:	dd07      	ble.n	993c <sys_clock_set_timeout+0x20>
    992c:	4b11      	ldr	r3, [pc, #68]	; (9974 <sys_clock_set_timeout+0x58>)
    992e:	429c      	cmp	r4, r3
    9930:	dd05      	ble.n	993e <sys_clock_set_timeout+0x22>
    9932:	4c11      	ldr	r4, [pc, #68]	; (9978 <sys_clock_set_timeout+0x5c>)
    9934:	e003      	b.n	993e <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    9936:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
    993a:	e7f4      	b.n	9926 <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    993c:	2400      	movs	r4, #0

	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    993e:	f7ff fecf 	bl	96e0 <z_nrf_rtc_timer_read>
    9942:	4b0e      	ldr	r3, [pc, #56]	; (997c <sys_clock_set_timeout+0x60>)
    9944:	e9d3 2300 	ldrd	r2, r3, [r3]
    9948:	1a80      	subs	r0, r0, r2
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    994a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    994e:	d300      	bcc.n	9952 <sys_clock_set_timeout+0x36>
		ticks = 0;
    9950:	2400      	movs	r4, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    9952:	4404      	add	r4, r0
    9954:	3401      	adds	r4, #1
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;

	/* Due to elapsed time the calculation above might produce a
	 * duration that laps the counter.  Don't let it.
	 */
	if (cyc > MAX_CYCLES) {
    9956:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    995a:	d300      	bcc.n	995e <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    995c:	4c06      	ldr	r4, [pc, #24]	; (9978 <sys_clock_set_timeout+0x5c>)
	}

	uint64_t target_time = cyc + last_count;

	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    995e:	2000      	movs	r0, #0
    9960:	9001      	str	r0, [sp, #4]
    9962:	4907      	ldr	r1, [pc, #28]	; (9980 <sys_clock_set_timeout+0x64>)
    9964:	9100      	str	r1, [sp, #0]
    9966:	1912      	adds	r2, r2, r4
    9968:	f143 0300 	adc.w	r3, r3, #0
    996c:	f00a f8db 	bl	13b26 <compare_set>
}
    9970:	b002      	add	sp, #8
    9972:	bd10      	pop	{r4, pc}
    9974:	007ffffe 	.word	0x007ffffe
    9978:	007fffff 	.word	0x007fffff
    997c:	200007e0 	.word	0x200007e0
    9980:	0000966d 	.word	0x0000966d

00009984 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
    9984:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    9986:	f7ff feab 	bl	96e0 <z_nrf_rtc_timer_read>
    998a:	4b02      	ldr	r3, [pc, #8]	; (9994 <sys_clock_elapsed+0x10>)
    998c:	681b      	ldr	r3, [r3, #0]
}
    998e:	1ac0      	subs	r0, r0, r3
    9990:	bd08      	pop	{r3, pc}
    9992:	bf00      	nop
    9994:	200007e0 	.word	0x200007e0

00009998 <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9998:	4b03      	ldr	r3, [pc, #12]	; (99a8 <nrf52_errata_36+0x10>)
    999a:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    999c:	2b08      	cmp	r3, #8
    999e:	d001      	beq.n	99a4 <nrf52_errata_36+0xc>
        return false;
    99a0:	2000      	movs	r0, #0
    99a2:	4770      	bx	lr
                        return true;
    99a4:	2001      	movs	r0, #1
}
    99a6:	4770      	bx	lr
    99a8:	10000130 	.word	0x10000130

000099ac <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    99ac:	4b03      	ldr	r3, [pc, #12]	; (99bc <nrf52_errata_66+0x10>)
    99ae:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    99b0:	2b08      	cmp	r3, #8
    99b2:	d001      	beq.n	99b8 <nrf52_errata_66+0xc>
        return false;
    99b4:	2000      	movs	r0, #0
    99b6:	4770      	bx	lr
                        return true;
    99b8:	2001      	movs	r0, #1
}
    99ba:	4770      	bx	lr
    99bc:	10000130 	.word	0x10000130

000099c0 <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    99c0:	4b08      	ldr	r3, [pc, #32]	; (99e4 <nrf52_errata_98+0x24>)
    99c2:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    99c4:	3304      	adds	r3, #4
    99c6:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    99c8:	2a08      	cmp	r2, #8
    99ca:	d001      	beq.n	99d0 <nrf52_errata_98+0x10>
        return false;
    99cc:	2000      	movs	r0, #0
    99ce:	4770      	bx	lr
                switch(var2)
    99d0:	2b00      	cmp	r3, #0
    99d2:	d804      	bhi.n	99de <nrf52_errata_98+0x1e>
    99d4:	e8df f003 	tbb	[pc, r3]
    99d8:	01          	.byte	0x01
    99d9:	00          	.byte	0x00
            if (var1 == 0x08)
    99da:	2001      	movs	r0, #1
    99dc:	4770      	bx	lr
                        return false;
    99de:	2000      	movs	r0, #0
}
    99e0:	4770      	bx	lr
    99e2:	bf00      	nop
    99e4:	10000130 	.word	0x10000130

000099e8 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    99e8:	4b08      	ldr	r3, [pc, #32]	; (9a0c <nrf52_errata_103+0x24>)
    99ea:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    99ec:	3304      	adds	r3, #4
    99ee:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    99f0:	2a08      	cmp	r2, #8
    99f2:	d001      	beq.n	99f8 <nrf52_errata_103+0x10>
        return false;
    99f4:	2000      	movs	r0, #0
    99f6:	4770      	bx	lr
                switch(var2)
    99f8:	2b00      	cmp	r3, #0
    99fa:	d804      	bhi.n	9a06 <nrf52_errata_103+0x1e>
    99fc:	e8df f003 	tbb	[pc, r3]
    9a00:	01          	.byte	0x01
    9a01:	00          	.byte	0x00
            if (var1 == 0x08)
    9a02:	2001      	movs	r0, #1
    9a04:	4770      	bx	lr
                        return false;
    9a06:	2000      	movs	r0, #0
}
    9a08:	4770      	bx	lr
    9a0a:	bf00      	nop
    9a0c:	10000130 	.word	0x10000130

00009a10 <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9a10:	4b08      	ldr	r3, [pc, #32]	; (9a34 <nrf52_errata_115+0x24>)
    9a12:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    9a14:	3304      	adds	r3, #4
    9a16:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    9a18:	2a08      	cmp	r2, #8
    9a1a:	d001      	beq.n	9a20 <nrf52_errata_115+0x10>
        return false;
    9a1c:	2000      	movs	r0, #0
    9a1e:	4770      	bx	lr
                switch(var2)
    9a20:	2b00      	cmp	r3, #0
    9a22:	d804      	bhi.n	9a2e <nrf52_errata_115+0x1e>
    9a24:	e8df f003 	tbb	[pc, r3]
    9a28:	01          	.byte	0x01
    9a29:	00          	.byte	0x00
            if (var1 == 0x08)
    9a2a:	2001      	movs	r0, #1
    9a2c:	4770      	bx	lr
                        return false;
    9a2e:	2000      	movs	r0, #0
}
    9a30:	4770      	bx	lr
    9a32:	bf00      	nop
    9a34:	10000130 	.word	0x10000130

00009a38 <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9a38:	4b08      	ldr	r3, [pc, #32]	; (9a5c <nrf52_errata_120+0x24>)
    9a3a:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    9a3c:	3304      	adds	r3, #4
    9a3e:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    9a40:	2a08      	cmp	r2, #8
    9a42:	d001      	beq.n	9a48 <nrf52_errata_120+0x10>
        return false;
    9a44:	2000      	movs	r0, #0
    9a46:	4770      	bx	lr
                switch(var2)
    9a48:	2b00      	cmp	r3, #0
    9a4a:	d804      	bhi.n	9a56 <nrf52_errata_120+0x1e>
    9a4c:	e8df f003 	tbb	[pc, r3]
    9a50:	01          	.byte	0x01
    9a51:	00          	.byte	0x00
            if (var1 == 0x08)
    9a52:	2001      	movs	r0, #1
    9a54:	4770      	bx	lr
                        return false;
    9a56:	2000      	movs	r0, #0
}
    9a58:	4770      	bx	lr
    9a5a:	bf00      	nop
    9a5c:	10000130 	.word	0x10000130

00009a60 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9a60:	4b03      	ldr	r3, [pc, #12]	; (9a70 <nrf52_errata_136+0x10>)
    9a62:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    9a64:	2b08      	cmp	r3, #8
    9a66:	d001      	beq.n	9a6c <nrf52_errata_136+0xc>
        return false;
    9a68:	2000      	movs	r0, #0
    9a6a:	4770      	bx	lr
                        return true;
    9a6c:	2001      	movs	r0, #1
}
    9a6e:	4770      	bx	lr
    9a70:	10000130 	.word	0x10000130

00009a74 <nrf52_errata_249>:
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9a74:	4b06      	ldr	r3, [pc, #24]	; (9a90 <nrf52_errata_249+0x1c>)
    9a76:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    9a78:	4a06      	ldr	r2, [pc, #24]	; (9a94 <nrf52_errata_249+0x20>)
    9a7a:	6812      	ldr	r2, [r2, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    9a7c:	2b08      	cmp	r3, #8
    9a7e:	d001      	beq.n	9a84 <nrf52_errata_249+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    9a80:	2000      	movs	r0, #0
    9a82:	4770      	bx	lr
                switch(var2)
    9a84:	2a03      	cmp	r2, #3
    9a86:	d801      	bhi.n	9a8c <nrf52_errata_249+0x18>
    9a88:	2000      	movs	r0, #0
    9a8a:	4770      	bx	lr
                        return true;
    9a8c:	2001      	movs	r0, #1
    #endif
}
    9a8e:	4770      	bx	lr
    9a90:	10000130 	.word	0x10000130
    9a94:	10000134 	.word	0x10000134

00009a98 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    9a98:	4b02      	ldr	r3, [pc, #8]	; (9aa4 <nvmc_wait+0xc>)
    9a9a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    9a9e:	2b00      	cmp	r3, #0
    9aa0:	d0fa      	beq.n	9a98 <nvmc_wait>
}
    9aa2:	4770      	bx	lr
    9aa4:	4001e000 	.word	0x4001e000

00009aa8 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    9aa8:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    9aaa:	4b03      	ldr	r3, [pc, #12]	; (9ab8 <nvmc_config+0x10>)
    9aac:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    9ab0:	f7ff fff2 	bl	9a98 <nvmc_wait>
}
    9ab4:	bd08      	pop	{r3, pc}
    9ab6:	bf00      	nop
    9ab8:	4001e000 	.word	0x4001e000

00009abc <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    9abc:	4b01      	ldr	r3, [pc, #4]	; (9ac4 <SystemCoreClockUpdate+0x8>)
    9abe:	4a02      	ldr	r2, [pc, #8]	; (9ac8 <SystemCoreClockUpdate+0xc>)
    9ac0:	601a      	str	r2, [r3, #0]
}
    9ac2:	4770      	bx	lr
    9ac4:	200002b8 	.word	0x200002b8
    9ac8:	03d09000 	.word	0x03d09000

00009acc <SystemInit>:

void SystemInit(void)
{
    9acc:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    9ace:	f7ff ff63 	bl	9998 <nrf52_errata_36>
    9ad2:	b140      	cbz	r0, 9ae6 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    9ad4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9ad8:	2200      	movs	r2, #0
    9ada:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    9ade:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    9ae2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    9ae6:	f7ff ff61 	bl	99ac <nrf52_errata_66>
    9aea:	2800      	cmp	r0, #0
    9aec:	d046      	beq.n	9b7c <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    9aee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    9af2:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    9af6:	4b56      	ldr	r3, [pc, #344]	; (9c50 <SystemInit+0x184>)
    9af8:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    9afc:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    9b00:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    9b04:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    9b08:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    9b0c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    9b10:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    9b14:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    9b18:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    9b1c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    9b20:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    9b24:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    9b28:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    9b2c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    9b30:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    9b34:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    9b38:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    9b3c:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    9b40:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    9b44:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    9b48:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    9b4c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    9b50:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    9b54:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    9b58:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    9b5c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    9b60:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    9b64:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    9b68:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    9b6c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    9b70:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    9b74:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    9b78:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    9b7c:	f7ff ff20 	bl	99c0 <nrf52_errata_98>
    9b80:	b110      	cbz	r0, 9b88 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    9b82:	4b34      	ldr	r3, [pc, #208]	; (9c54 <SystemInit+0x188>)
    9b84:	4a34      	ldr	r2, [pc, #208]	; (9c58 <SystemInit+0x18c>)
    9b86:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    9b88:	f7ff ff2e 	bl	99e8 <nrf52_errata_103>
    9b8c:	b118      	cbz	r0, 9b96 <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    9b8e:	4b33      	ldr	r3, [pc, #204]	; (9c5c <SystemInit+0x190>)
    9b90:	22fb      	movs	r2, #251	; 0xfb
    9b92:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    9b96:	f7ff ff3b 	bl	9a10 <nrf52_errata_115>
    9b9a:	b148      	cbz	r0, 9bb0 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    9b9c:	4930      	ldr	r1, [pc, #192]	; (9c60 <SystemInit+0x194>)
    9b9e:	680b      	ldr	r3, [r1, #0]
    9ba0:	f023 030f 	bic.w	r3, r3, #15
    9ba4:	4a2f      	ldr	r2, [pc, #188]	; (9c64 <SystemInit+0x198>)
    9ba6:	6812      	ldr	r2, [r2, #0]
    9ba8:	f002 020f 	and.w	r2, r2, #15
    9bac:	4313      	orrs	r3, r2
    9bae:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    9bb0:	f7ff ff42 	bl	9a38 <nrf52_errata_120>
    9bb4:	b118      	cbz	r0, 9bbe <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    9bb6:	4b2c      	ldr	r3, [pc, #176]	; (9c68 <SystemInit+0x19c>)
    9bb8:	f44f 7200 	mov.w	r2, #512	; 0x200
    9bbc:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    9bbe:	f7ff ff4f 	bl	9a60 <nrf52_errata_136>
    9bc2:	b160      	cbz	r0, 9bde <SystemInit+0x112>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    9bc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9bc8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    9bcc:	f013 0f01 	tst.w	r3, #1
    9bd0:	d005      	beq.n	9bde <SystemInit+0x112>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    9bd2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9bd6:	f06f 0201 	mvn.w	r2, #1
    9bda:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
    9bde:	f7ff ff49 	bl	9a74 <nrf52_errata_249>
    9be2:	b138      	cbz	r0, 9bf4 <SystemInit+0x128>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    9be4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    9be8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    9bec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9bf0:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    9bf4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    9bf8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    9bfc:	2b00      	cmp	r3, #0
    9bfe:	db08      	blt.n	9c12 <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    9c00:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    9c04:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    9c08:	2b00      	cmp	r3, #0
    9c0a:	db02      	blt.n	9c12 <SystemInit+0x146>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    9c0c:	f7ff ff56 	bl	9abc <SystemCoreClockUpdate>
}
    9c10:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    9c12:	2001      	movs	r0, #1
    9c14:	f7ff ff48 	bl	9aa8 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    9c18:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    9c1c:	2512      	movs	r5, #18
    9c1e:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    9c22:	f7ff ff39 	bl	9a98 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    9c26:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    9c2a:	f7ff ff35 	bl	9a98 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    9c2e:	2000      	movs	r0, #0
    9c30:	f7ff ff3a 	bl	9aa8 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    9c34:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    9c38:	490c      	ldr	r1, [pc, #48]	; (9c6c <SystemInit+0x1a0>)
    9c3a:	68ca      	ldr	r2, [r1, #12]
    9c3c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    9c40:	4b0b      	ldr	r3, [pc, #44]	; (9c70 <SystemInit+0x1a4>)
    9c42:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    9c44:	60cb      	str	r3, [r1, #12]
    9c46:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    9c4a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    9c4c:	e7fd      	b.n	9c4a <SystemInit+0x17e>
    9c4e:	bf00      	nop
    9c50:	4000c000 	.word	0x4000c000
    9c54:	4000568c 	.word	0x4000568c
    9c58:	00038148 	.word	0x00038148
    9c5c:	4000f000 	.word	0x4000f000
    9c60:	40000ee4 	.word	0x40000ee4
    9c64:	10000258 	.word	0x10000258
    9c68:	40029640 	.word	0x40029640
    9c6c:	e000ed00 	.word	0xe000ed00
    9c70:	05fa0004 	.word	0x05fa0004

00009c74 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    9c74:	4b06      	ldr	r3, [pc, #24]	; (9c90 <nrfx_clock_init+0x1c>)
    9c76:	791b      	ldrb	r3, [r3, #4]
    9c78:	b93b      	cbnz	r3, 9c8a <nrfx_clock_init+0x16>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    9c7a:	4b05      	ldr	r3, [pc, #20]	; (9c90 <nrfx_clock_init+0x1c>)
    9c7c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    9c7e:	2201      	movs	r2, #1
    9c80:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    9c82:	2200      	movs	r2, #0
    9c84:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    9c86:	4803      	ldr	r0, [pc, #12]	; (9c94 <nrfx_clock_init+0x20>)
    9c88:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    9c8a:	4803      	ldr	r0, [pc, #12]	; (9c98 <nrfx_clock_init+0x24>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    9c8c:	4770      	bx	lr
    9c8e:	bf00      	nop
    9c90:	20002768 	.word	0x20002768
    9c94:	0bad0000 	.word	0x0bad0000
    9c98:	0bad000c 	.word	0x0bad000c

00009c9c <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    9c9c:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    9c9e:	2000      	movs	r0, #0
    9ca0:	f7fb fa4e 	bl	5140 <arch_irq_is_enabled>
    9ca4:	b118      	cbz	r0, 9cae <nrfx_clock_enable+0x12>
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
    9ca6:	4b03      	ldr	r3, [pc, #12]	; (9cb4 <nrfx_clock_enable+0x18>)
    9ca8:	2201      	movs	r2, #1
    9caa:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    9cac:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    9cae:	f7fb fa23 	bl	50f8 <arch_irq_enable>
    9cb2:	e7f8      	b.n	9ca6 <nrfx_clock_enable+0xa>
    9cb4:	20002f7d 	.word	0x20002f7d

00009cb8 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    9cb8:	b110      	cbz	r0, 9cc0 <nrfx_clock_start+0x8>
    9cba:	2801      	cmp	r0, #1
    9cbc:	d025      	beq.n	9d0a <nrfx_clock_start+0x52>
    9cbe:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    9cc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    9cc4:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    9cc8:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    9ccc:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    9cd0:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    9cd4:	d111      	bne.n	9cfa <nrfx_clock_start+0x42>
    p_reg->LFCLKSRC = (uint32_t)(source);
    9cd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9cda:	2200      	movs	r2, #0
    9cdc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9ce0:	4b0f      	ldr	r3, [pc, #60]	; (9d20 <nrfx_clock_start+0x68>)
    9ce2:	2200      	movs	r2, #0
    9ce4:	601a      	str	r2, [r3, #0]
    9ce6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    9ce8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9cec:	2202      	movs	r2, #2
    9cee:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9cf2:	3308      	adds	r3, #8
    9cf4:	2201      	movs	r2, #1
    9cf6:	601a      	str	r2, [r3, #0]
}
    9cf8:	4770      	bx	lr
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    9cfa:	2b01      	cmp	r3, #1
    9cfc:	d1eb      	bne.n	9cd6 <nrfx_clock_start+0x1e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    9cfe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9d02:	2201      	movs	r2, #1
    9d04:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    9d08:	e7ea      	b.n	9ce0 <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9d0a:	4b06      	ldr	r3, [pc, #24]	; (9d24 <nrfx_clock_start+0x6c>)
    9d0c:	2200      	movs	r2, #0
    9d0e:	601a      	str	r2, [r3, #0]
    9d10:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    9d12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9d16:	2201      	movs	r2, #1
    9d18:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9d1c:	601a      	str	r2, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    9d1e:	4770      	bx	lr
    9d20:	40000104 	.word	0x40000104
    9d24:	40000100 	.word	0x40000100

00009d28 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    9d28:	b530      	push	{r4, r5, lr}
    9d2a:	b083      	sub	sp, #12
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    9d2c:	4604      	mov	r4, r0
    9d2e:	b118      	cbz	r0, 9d38 <nrfx_clock_stop+0x10>
    9d30:	2801      	cmp	r0, #1
    9d32:	d013      	beq.n	9d5c <nrfx_clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    9d34:	b003      	add	sp, #12
    9d36:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
    9d38:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9d3c:	2202      	movs	r2, #2
    9d3e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9d42:	f503 7382 	add.w	r3, r3, #260	; 0x104
    9d46:	2200      	movs	r2, #0
    9d48:	601a      	str	r2, [r3, #0]
    9d4a:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9d4c:	4b39      	ldr	r3, [pc, #228]	; (9e34 <nrfx_clock_stop+0x10c>)
    9d4e:	2201      	movs	r2, #1
    9d50:	601a      	str	r2, [r3, #0]
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    9d52:	2c01      	cmp	r4, #1
    9d54:	d00f      	beq.n	9d76 <nrfx_clock_stop+0x4e>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    9d56:	f242 7510 	movw	r5, #10000	; 0x2710
    9d5a:	e052      	b.n	9e02 <nrfx_clock_stop+0xda>
    p_reg->INTENCLR = mask;
    9d5c:	2301      	movs	r3, #1
    9d5e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    9d62:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9d66:	f502 7280 	add.w	r2, r2, #256	; 0x100
    9d6a:	2100      	movs	r1, #0
    9d6c:	6011      	str	r1, [r2, #0]
    9d6e:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9d70:	4a31      	ldr	r2, [pc, #196]	; (9e38 <nrfx_clock_stop+0x110>)
    9d72:	6013      	str	r3, [r2, #0]
}
    9d74:	e7ed      	b.n	9d52 <nrfx_clock_stop+0x2a>
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    9d76:	2301      	movs	r3, #1
    9d78:	f88d 3007 	strb.w	r3, [sp, #7]
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    9d7c:	f242 7510 	movw	r5, #10000	; 0x2710
    9d80:	e018      	b.n	9db4 <nrfx_clock_stop+0x8c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    9d82:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    9d86:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    9d8a:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    9d8e:	f8cd 3007 	str.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    9d92:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    9d96:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    9d9a:	d120      	bne.n	9dde <nrfx_clock_stop+0xb6>
    return false;
    9d9c:	2300      	movs	r3, #0
    9d9e:	2b00      	cmp	r3, #0
    9da0:	d042      	beq.n	9e28 <nrfx_clock_stop+0x100>
    9da2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9da6:	2b01      	cmp	r3, #1
    9da8:	d13e      	bne.n	9e28 <nrfx_clock_stop+0x100>
    9daa:	2001      	movs	r0, #1
    9dac:	f009 fee9 	bl	13b82 <nrfx_busy_wait>
    9db0:	3d01      	subs	r5, #1
    9db2:	d039      	beq.n	9e28 <nrfx_clock_stop+0x100>
    switch (domain)
    9db4:	2c00      	cmp	r4, #0
    9db6:	d0e4      	beq.n	9d82 <nrfx_clock_stop+0x5a>
    9db8:	2c01      	cmp	r4, #1
    9dba:	d001      	beq.n	9dc0 <nrfx_clock_stop+0x98>
    9dbc:	2300      	movs	r3, #0
    9dbe:	e7ee      	b.n	9d9e <nrfx_clock_stop+0x76>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    9dc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    9dc4:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    9dc8:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    9dcc:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    9dd0:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    9dd4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    9dd8:	d103      	bne.n	9de2 <nrfx_clock_stop+0xba>
    return false;
    9dda:	2300      	movs	r3, #0
    9ddc:	e7df      	b.n	9d9e <nrfx_clock_stop+0x76>
                return true;
    9dde:	2301      	movs	r3, #1
    9de0:	e7dd      	b.n	9d9e <nrfx_clock_stop+0x76>
                return true;
    9de2:	2301      	movs	r3, #1
    9de4:	e7db      	b.n	9d9e <nrfx_clock_stop+0x76>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    9de6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9dea:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    9dee:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    9df2:	d115      	bne.n	9e20 <nrfx_clock_stop+0xf8>
    return false;
    9df4:	2300      	movs	r3, #0
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    9df6:	b1bb      	cbz	r3, 9e28 <nrfx_clock_stop+0x100>
    9df8:	2001      	movs	r0, #1
    9dfa:	f009 fec2 	bl	13b82 <nrfx_busy_wait>
    9dfe:	3d01      	subs	r5, #1
    9e00:	d012      	beq.n	9e28 <nrfx_clock_stop+0x100>
    switch (domain)
    9e02:	2c00      	cmp	r4, #0
    9e04:	d0ef      	beq.n	9de6 <nrfx_clock_stop+0xbe>
    9e06:	2c01      	cmp	r4, #1
    9e08:	d001      	beq.n	9e0e <nrfx_clock_stop+0xe6>
    9e0a:	2300      	movs	r3, #0
    9e0c:	e7f3      	b.n	9df6 <nrfx_clock_stop+0xce>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    9e0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9e12:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    9e16:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    9e1a:	d103      	bne.n	9e24 <nrfx_clock_stop+0xfc>
    return false;
    9e1c:	2300      	movs	r3, #0
    9e1e:	e7ea      	b.n	9df6 <nrfx_clock_stop+0xce>
                return true;
    9e20:	2301      	movs	r3, #1
    9e22:	e7e8      	b.n	9df6 <nrfx_clock_stop+0xce>
                return true;
    9e24:	2301      	movs	r3, #1
    9e26:	e7e6      	b.n	9df6 <nrfx_clock_stop+0xce>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    9e28:	2c01      	cmp	r4, #1
    9e2a:	d183      	bne.n	9d34 <nrfx_clock_stop+0xc>
            m_clock_cb.hfclk_started = false;
    9e2c:	4b03      	ldr	r3, [pc, #12]	; (9e3c <nrfx_clock_stop+0x114>)
    9e2e:	2200      	movs	r2, #0
    9e30:	715a      	strb	r2, [r3, #5]
    9e32:	e77f      	b.n	9d34 <nrfx_clock_stop+0xc>
    9e34:	4000000c 	.word	0x4000000c
    9e38:	40000004 	.word	0x40000004
    9e3c:	20002768 	.word	0x20002768

00009e40 <nrfx_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    9e40:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    9e42:	4b1b      	ldr	r3, [pc, #108]	; (9eb0 <nrfx_clock_irq_handler+0x70>)
    9e44:	681b      	ldr	r3, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    9e46:	b183      	cbz	r3, 9e6a <nrfx_clock_irq_handler+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9e48:	4b19      	ldr	r3, [pc, #100]	; (9eb0 <nrfx_clock_irq_handler+0x70>)
    9e4a:	2200      	movs	r2, #0
    9e4c:	601a      	str	r2, [r3, #0]
    9e4e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    9e50:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9e54:	2201      	movs	r2, #1
    9e56:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    9e5a:	4b16      	ldr	r3, [pc, #88]	; (9eb4 <nrfx_clock_irq_handler+0x74>)
    9e5c:	795b      	ldrb	r3, [r3, #5]
    9e5e:	b923      	cbnz	r3, 9e6a <nrfx_clock_irq_handler+0x2a>
        {
            m_clock_cb.hfclk_started = true;
    9e60:	4b14      	ldr	r3, [pc, #80]	; (9eb4 <nrfx_clock_irq_handler+0x74>)
    9e62:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    9e64:	681b      	ldr	r3, [r3, #0]
    9e66:	2000      	movs	r0, #0
    9e68:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    9e6a:	4b13      	ldr	r3, [pc, #76]	; (9eb8 <nrfx_clock_irq_handler+0x78>)
    9e6c:	681b      	ldr	r3, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    9e6e:	b19b      	cbz	r3, 9e98 <nrfx_clock_irq_handler+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9e70:	4b11      	ldr	r3, [pc, #68]	; (9eb8 <nrfx_clock_irq_handler+0x78>)
    9e72:	2200      	movs	r2, #0
    9e74:	601a      	str	r2, [r3, #0]
    9e76:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    9e78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9e7c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    9e80:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    9e84:	f012 0f03 	tst.w	r2, #3
    9e88:	d107      	bne.n	9e9a <nrfx_clock_irq_handler+0x5a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    9e8a:	2301      	movs	r3, #1
    9e8c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    9e90:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9e94:	3208      	adds	r2, #8
    9e96:	6013      	str	r3, [r2, #0]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    9e98:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    9e9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9e9e:	2202      	movs	r2, #2
    9ea0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    9ea4:	4b03      	ldr	r3, [pc, #12]	; (9eb4 <nrfx_clock_irq_handler+0x74>)
    9ea6:	681b      	ldr	r3, [r3, #0]
    9ea8:	2001      	movs	r0, #1
    9eaa:	4798      	blx	r3
}
    9eac:	e7f4      	b.n	9e98 <nrfx_clock_irq_handler+0x58>
    9eae:	bf00      	nop
    9eb0:	40000100 	.word	0x40000100
    9eb4:	20002768 	.word	0x20002768
    9eb8:	40000104 	.word	0x40000104

00009ebc <is_allocated_channel>:
    NRFX_LOG_INFO("Uninitialized.");
}

static bool is_allocated_channel(uint8_t index)
{
    return m_cb.allocated_channels_mask & (1UL << index);
    9ebc:	4b04      	ldr	r3, [pc, #16]	; (9ed0 <is_allocated_channel+0x14>)
    9ebe:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    9ec0:	2301      	movs	r3, #1
    9ec2:	4083      	lsls	r3, r0
    9ec4:	421a      	tst	r2, r3
}
    9ec6:	bf14      	ite	ne
    9ec8:	2001      	movne	r0, #1
    9eca:	2000      	moveq	r0, #0
    9ecc:	4770      	bx	lr
    9ece:	bf00      	nop
    9ed0:	20002770 	.word	0x20002770

00009ed4 <channel_allocated_set>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
}

static void channel_allocated_set(uint8_t index)
{
    m_cb.allocated_channels_mask |= (1UL << index);
    9ed4:	2301      	movs	r3, #1
    9ed6:	fa03 f000 	lsl.w	r0, r3, r0
    9eda:	4a02      	ldr	r2, [pc, #8]	; (9ee4 <channel_allocated_set+0x10>)
    9edc:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    9ede:	4303      	orrs	r3, r0
    9ee0:	65d3      	str	r3, [r2, #92]	; 0x5c
}
    9ee2:	4770      	bx	lr
    9ee4:	20002770 	.word	0x20002770

00009ee8 <channel_allocated_clr>:

static void channel_allocated_clr(uint8_t index)
{
    m_cb.allocated_channels_mask &= ~(1UL << index);
    9ee8:	2301      	movs	r3, #1
    9eea:	fa03 f000 	lsl.w	r0, r3, r0
    9eee:	4a03      	ldr	r2, [pc, #12]	; (9efc <channel_allocated_clr+0x14>)
    9ef0:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    9ef2:	ea23 0300 	bic.w	r3, r3, r0
    9ef6:	65d3      	str	r3, [r2, #92]	; 0x5c
}
    9ef8:	4770      	bx	lr
    9efa:	bf00      	nop
    9efc:	20002770 	.word	0x20002770

00009f00 <nrfx_gpiote_channel_free>:

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    9f00:	b538      	push	{r3, r4, r5, lr}
    9f02:	4604      	mov	r4, r0
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    9f04:	f009 fe41 	bl	13b8a <is_app_channel>
    9f08:	b908      	cbnz	r0, 9f0e <nrfx_gpiote_channel_free+0xe>
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    9f0a:	4809      	ldr	r0, [pc, #36]	; (9f30 <nrfx_gpiote_channel_free+0x30>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    9f0c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    9f0e:	f04f 0320 	mov.w	r3, #32
    9f12:	f3ef 8511 	mrs	r5, BASEPRI
    9f16:	f383 8812 	msr	BASEPRI_MAX, r3
    9f1a:	f3bf 8f6f 	isb	sy
        channel_allocated_clr(channel);
    9f1e:	4620      	mov	r0, r4
    9f20:	f7ff ffe2 	bl	9ee8 <channel_allocated_clr>
	__asm__ volatile(
    9f24:	f385 8811 	msr	BASEPRI, r5
    9f28:	f3bf 8f6f 	isb	sy
    nrfx_err_t err_code = NRFX_SUCCESS;
    9f2c:	4801      	ldr	r0, [pc, #4]	; (9f34 <nrfx_gpiote_channel_free+0x34>)
}
    9f2e:	e7ed      	b.n	9f0c <nrfx_gpiote_channel_free+0xc>
    9f30:	0bad0004 	.word	0x0bad0004
    9f34:	0bad0000 	.word	0x0bad0000

00009f38 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    9f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9f3c:	4680      	mov	r8, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;

    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    9f3e:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    9f40:	25ff      	movs	r5, #255	; 0xff
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    9f42:	4f17      	ldr	r7, [pc, #92]	; (9fa0 <nrfx_gpiote_channel_alloc+0x68>)
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    9f44:	e013      	b.n	9f6e <nrfx_gpiote_channel_alloc+0x36>
    {
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
    9f46:	4620      	mov	r0, r4
    9f48:	f7ff ffc4 	bl	9ed4 <channel_allocated_set>
            *p_channel = ch_idx;
    9f4c:	f888 4000 	strb.w	r4, [r8]
            err_code = NRFX_SUCCESS;
    9f50:	4f14      	ldr	r7, [pc, #80]	; (9fa4 <nrfx_gpiote_channel_alloc+0x6c>)
	__asm__ volatile(
    9f52:	f386 8811 	msr	BASEPRI, r6
    9f56:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    9f5a:	4b12      	ldr	r3, [pc, #72]	; (9fa4 <nrfx_gpiote_channel_alloc+0x6c>)
    9f5c:	429f      	cmp	r7, r3
    9f5e:	d01b      	beq.n	9f98 <nrfx_gpiote_channel_alloc+0x60>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    9f60:	2301      	movs	r3, #1
    9f62:	fa03 f309 	lsl.w	r3, r3, r9
    9f66:	ea25 0503 	bic.w	r5, r5, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    9f6a:	3401      	adds	r4, #1
    9f6c:	b2e4      	uxtb	r4, r4
    9f6e:	b19d      	cbz	r5, 9f98 <nrfx_gpiote_channel_alloc+0x60>
	__asm__ volatile(
    9f70:	f04f 0320 	mov.w	r3, #32
    9f74:	f3ef 8611 	mrs	r6, BASEPRI
    9f78:	f383 8812 	msr	BASEPRI_MAX, r3
    9f7c:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    9f80:	46a1      	mov	r9, r4
    9f82:	fa25 f304 	lsr.w	r3, r5, r4
    9f86:	f013 0f01 	tst.w	r3, #1
    9f8a:	d0e2      	beq.n	9f52 <nrfx_gpiote_channel_alloc+0x1a>
    9f8c:	4620      	mov	r0, r4
    9f8e:	f7ff ff95 	bl	9ebc <is_allocated_channel>
    9f92:	2800      	cmp	r0, #0
    9f94:	d1dd      	bne.n	9f52 <nrfx_gpiote_channel_alloc+0x1a>
    9f96:	e7d6      	b.n	9f46 <nrfx_gpiote_channel_alloc+0xe>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    9f98:	4638      	mov	r0, r7
    9f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9f9e:	bf00      	nop
    9fa0:	0bad0002 	.word	0x0bad0002
    9fa4:	0bad0000 	.word	0x0bad0000

00009fa8 <nvmc_readonly_mode_set>:
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
    9fa8:	4b02      	ldr	r3, [pc, #8]	; (9fb4 <nvmc_readonly_mode_set+0xc>)
    9faa:	2200      	movs	r2, #0
    9fac:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
    9fb0:	4770      	bx	lr
    9fb2:	bf00      	nop
    9fb4:	4001e000 	.word	0x4001e000

00009fb8 <nvmc_write_mode_set>:
    9fb8:	4b02      	ldr	r3, [pc, #8]	; (9fc4 <nvmc_write_mode_set+0xc>)
    9fba:	2201      	movs	r2, #1
    9fbc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_WRITE);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_WRITE);
#endif
}
    9fc0:	4770      	bx	lr
    9fc2:	bf00      	nop
    9fc4:	4001e000 	.word	0x4001e000

00009fc8 <nvmc_erase_mode_set>:
    9fc8:	4b02      	ldr	r3, [pc, #8]	; (9fd4 <nvmc_erase_mode_set+0xc>)
    9fca:	2202      	movs	r2, #2
    9fcc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_ERASE);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_ERASE);
#endif
}
    9fd0:	4770      	bx	lr
    9fd2:	bf00      	nop
    9fd4:	4001e000 	.word	0x4001e000

00009fd8 <nvmc_word_write>:
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    9fd8:	4b04      	ldr	r3, [pc, #16]	; (9fec <nvmc_word_write+0x14>)
    9fda:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    9fde:	f013 0f01 	tst.w	r3, #1
    9fe2:	d0f9      	beq.n	9fd8 <nvmc_word_write>
    {}
#endif

    *(volatile uint32_t *)addr = value;
    9fe4:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    9fe6:	f3bf 8f5f 	dmb	sy
    __DMB();
}
    9fea:	4770      	bx	lr
    9fec:	4001e000 	.word	0x4001e000

00009ff0 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    9ff0:	b510      	push	{r4, lr}
    9ff2:	4604      	mov	r4, r0
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    9ff4:	f009 fde2 	bl	13bbc <is_page_aligned_check>
    9ff8:	b908      	cbnz	r0, 9ffe <nrfx_nvmc_page_erase+0xe>
    {
        return NRFX_ERROR_INVALID_ADDR;
    9ffa:	4808      	ldr	r0, [pc, #32]	; (a01c <nrfx_nvmc_page_erase+0x2c>)
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
}
    9ffc:	bd10      	pop	{r4, pc}
    nvmc_erase_mode_set();
    9ffe:	f7ff ffe3 	bl	9fc8 <nvmc_erase_mode_set>
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
    a002:	4b07      	ldr	r3, [pc, #28]	; (a020 <nrfx_nvmc_page_erase+0x30>)
    a004:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    a008:	4b05      	ldr	r3, [pc, #20]	; (a020 <nrfx_nvmc_page_erase+0x30>)
    a00a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    a00e:	f013 0f01 	tst.w	r3, #1
    a012:	d0f9      	beq.n	a008 <nrfx_nvmc_page_erase+0x18>
    nvmc_readonly_mode_set();
    a014:	f7ff ffc8 	bl	9fa8 <nvmc_readonly_mode_set>
    return NRFX_SUCCESS;
    a018:	4802      	ldr	r0, [pc, #8]	; (a024 <nrfx_nvmc_page_erase+0x34>)
    a01a:	e7ef      	b.n	9ffc <nrfx_nvmc_page_erase+0xc>
    a01c:	0bad000a 	.word	0x0bad000a
    a020:	4001e000 	.word	0x4001e000
    a024:	0bad0000 	.word	0x0bad0000

0000a028 <nrf52_errata_197>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a028:	4b06      	ldr	r3, [pc, #24]	; (a044 <nrf52_errata_197+0x1c>)
    a02a:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    a02c:	4a06      	ldr	r2, [pc, #24]	; (a048 <nrf52_errata_197+0x20>)
    a02e:	6812      	ldr	r2, [r2, #0]
            if (var1 == 0x08)
    a030:	2b08      	cmp	r3, #8
    a032:	d001      	beq.n	a038 <nrf52_errata_197+0x10>
        return false;
    a034:	2000      	movs	r0, #0
    a036:	4770      	bx	lr
                switch(var2)
    a038:	2a02      	cmp	r2, #2
    a03a:	d001      	beq.n	a040 <nrf52_errata_197+0x18>
                        return false;
    a03c:	2000      	movs	r0, #0
    a03e:	4770      	bx	lr
                        return true;
    a040:	2001      	movs	r0, #1
}
    a042:	4770      	bx	lr
    a044:	10000130 	.word	0x10000130
    a048:	10000134 	.word	0x10000134

0000a04c <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
    a04c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
    a04e:	4b18      	ldr	r3, [pc, #96]	; (a0b0 <nrfx_power_init+0x64>)
    a050:	781b      	ldrb	r3, [r3, #0]
    a052:	bb5b      	cbnz	r3, a0ac <nrfx_power_init+0x60>
    a054:	4604      	mov	r4, r0
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
    a056:	7803      	ldrb	r3, [r0, #0]
    a058:	f3c3 0540 	ubfx	r5, r3, #1, #1
    if (enable && nrf52_errata_197())
    a05c:	f013 0f02 	tst.w	r3, #2
    a060:	d005      	beq.n	a06e <nrfx_power_init+0x22>
    a062:	f7ff ffe1 	bl	a028 <nrf52_errata_197>
    a066:	b110      	cbz	r0, a06e <nrfx_power_init+0x22>
        *(volatile uint32_t *)0x40000638ul = 1ul;
    a068:	4b12      	ldr	r3, [pc, #72]	; (a0b4 <nrfx_power_init+0x68>)
    a06a:	2201      	movs	r2, #1
    a06c:	601a      	str	r2, [r3, #0]
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    a06e:	b1b5      	cbz	r5, a09e <nrfx_power_init+0x52>
    a070:	2201      	movs	r2, #1
    a072:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a076:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#elif NRF_REGULATORS_HAS_DCDCEN_VDDH
    nrf_regulators_dcdcen_vddh_set(NRF_REGULATORS, p_config->dcdcenhv);
#endif

#if NRF_POWER_HAS_DCDCEN
    nrf_power_dcdcen_set(NRF_POWER, p_config->dcdcen);
    a07a:	7823      	ldrb	r3, [r4, #0]
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    a07c:	f013 0f01 	tst.w	r3, #1
    a080:	d00f      	beq.n	a0a2 <nrfx_power_init+0x56>
    a082:	2201      	movs	r2, #1
    a084:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a088:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    a08c:	2000      	movs	r0, #0
    a08e:	f7fb f857 	bl	5140 <arch_irq_is_enabled>
    a092:	b140      	cbz	r0, a0a6 <nrfx_power_init+0x5a>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
    a094:	4b06      	ldr	r3, [pc, #24]	; (a0b0 <nrfx_power_init+0x64>)
    a096:	2201      	movs	r2, #1
    a098:	701a      	strb	r2, [r3, #0]
    return NRFX_SUCCESS;
    a09a:	4807      	ldr	r0, [pc, #28]	; (a0b8 <nrfx_power_init+0x6c>)
}
    a09c:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    a09e:	2200      	movs	r2, #0
    a0a0:	e7e7      	b.n	a072 <nrfx_power_init+0x26>
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    a0a2:	2200      	movs	r2, #0
    a0a4:	e7ee      	b.n	a084 <nrfx_power_init+0x38>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    a0a6:	f7fb f827 	bl	50f8 <arch_irq_enable>
    a0aa:	e7f3      	b.n	a094 <nrfx_power_init+0x48>
        return NRFX_ERROR_ALREADY_INITIALIZED;
    a0ac:	4803      	ldr	r0, [pc, #12]	; (a0bc <nrfx_power_init+0x70>)
    a0ae:	e7f5      	b.n	a09c <nrfx_power_init+0x50>
    a0b0:	20002f7e 	.word	0x20002f7e
    a0b4:	40000638 	.word	0x40000638
    a0b8:	0bad0000 	.word	0x0bad0000
    a0bc:	0bad000c 	.word	0x0bad000c

0000a0c0 <nrfx_power_usbevt_uninit>:
                                     NRF_POWER_INT_USBREMOVED_MASK  |
                                     NRF_POWER_INT_USBPWRRDY_MASK);
}

void nrfx_power_usbevt_uninit(void)
{
    a0c0:	b508      	push	{r3, lr}
    nrfx_power_usbevt_disable();
    a0c2:	f009 fda6 	bl	13c12 <nrfx_power_usbevt_disable>
    m_usbevt_handler = NULL;
    a0c6:	4b02      	ldr	r3, [pc, #8]	; (a0d0 <nrfx_power_usbevt_uninit+0x10>)
    a0c8:	2200      	movs	r2, #0
    a0ca:	601a      	str	r2, [r3, #0]
}
    a0cc:	bd08      	pop	{r3, pc}
    a0ce:	bf00      	nop
    a0d0:	200027d8 	.word	0x200027d8

0000a0d4 <nrfx_power_usbevt_init>:
{
    a0d4:	b510      	push	{r4, lr}
    a0d6:	4604      	mov	r4, r0
    nrfx_power_usbevt_uninit();
    a0d8:	f7ff fff2 	bl	a0c0 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
    a0dc:	6823      	ldr	r3, [r4, #0]
    a0de:	b10b      	cbz	r3, a0e4 <nrfx_power_usbevt_init+0x10>
        m_usbevt_handler = p_config->handler;
    a0e0:	4a01      	ldr	r2, [pc, #4]	; (a0e8 <nrfx_power_usbevt_init+0x14>)
    a0e2:	6013      	str	r3, [r2, #0]
}
    a0e4:	bd10      	pop	{r4, pc}
    a0e6:	bf00      	nop
    a0e8:	200027d8 	.word	0x200027d8

0000a0ec <nrfx_power_irq_handler>:

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    a0ec:	b510      	push	{r4, lr}
    return p_reg->INTENSET;
    a0ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a0f2:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    a0f6:	f014 0f04 	tst.w	r4, #4
    a0fa:	d00b      	beq.n	a114 <nrfx_power_irq_handler+0x28>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a0fc:	f503 7384 	add.w	r3, r3, #264	; 0x108
    a100:	681b      	ldr	r3, [r3, #0]
    if (ret)
    a102:	b11b      	cbz	r3, a10c <nrfx_power_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a104:	4a29      	ldr	r2, [pc, #164]	; (a1ac <nrfx_power_irq_handler+0xc0>)
    a106:	2100      	movs	r1, #0
    a108:	6011      	str	r1, [r2, #0]
    a10a:	6812      	ldr	r2, [r2, #0]
    a10c:	b113      	cbz	r3, a114 <nrfx_power_irq_handler+0x28>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    a10e:	4b28      	ldr	r3, [pc, #160]	; (a1b0 <nrfx_power_irq_handler+0xc4>)
    a110:	681b      	ldr	r3, [r3, #0]
    a112:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    a114:	f014 0f20 	tst.w	r4, #32
    a118:	d00b      	beq.n	a132 <nrfx_power_irq_handler+0x46>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a11a:	4b26      	ldr	r3, [pc, #152]	; (a1b4 <nrfx_power_irq_handler+0xc8>)
    a11c:	681b      	ldr	r3, [r3, #0]
    if (ret)
    a11e:	b11b      	cbz	r3, a128 <nrfx_power_irq_handler+0x3c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a120:	4a24      	ldr	r2, [pc, #144]	; (a1b4 <nrfx_power_irq_handler+0xc8>)
    a122:	2100      	movs	r1, #0
    a124:	6011      	str	r1, [r2, #0]
    a126:	6812      	ldr	r2, [r2, #0]
    a128:	b11b      	cbz	r3, a132 <nrfx_power_irq_handler+0x46>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    a12a:	4b23      	ldr	r3, [pc, #140]	; (a1b8 <nrfx_power_irq_handler+0xcc>)
    a12c:	681b      	ldr	r3, [r3, #0]
    a12e:	2000      	movs	r0, #0
    a130:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    a132:	f014 0f40 	tst.w	r4, #64	; 0x40
    a136:	d00b      	beq.n	a150 <nrfx_power_irq_handler+0x64>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a138:	4b20      	ldr	r3, [pc, #128]	; (a1bc <nrfx_power_irq_handler+0xd0>)
    a13a:	681b      	ldr	r3, [r3, #0]
    if (ret)
    a13c:	b11b      	cbz	r3, a146 <nrfx_power_irq_handler+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a13e:	4a1f      	ldr	r2, [pc, #124]	; (a1bc <nrfx_power_irq_handler+0xd0>)
    a140:	2100      	movs	r1, #0
    a142:	6011      	str	r1, [r2, #0]
    a144:	6812      	ldr	r2, [r2, #0]
    a146:	b11b      	cbz	r3, a150 <nrfx_power_irq_handler+0x64>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    a148:	4b1b      	ldr	r3, [pc, #108]	; (a1b8 <nrfx_power_irq_handler+0xcc>)
    a14a:	681b      	ldr	r3, [r3, #0]
    a14c:	2001      	movs	r0, #1
    a14e:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    a150:	f014 0f80 	tst.w	r4, #128	; 0x80
    a154:	d00b      	beq.n	a16e <nrfx_power_irq_handler+0x82>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a156:	4b1a      	ldr	r3, [pc, #104]	; (a1c0 <nrfx_power_irq_handler+0xd4>)
    a158:	681b      	ldr	r3, [r3, #0]
    if (ret)
    a15a:	b11b      	cbz	r3, a164 <nrfx_power_irq_handler+0x78>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a15c:	4a18      	ldr	r2, [pc, #96]	; (a1c0 <nrfx_power_irq_handler+0xd4>)
    a15e:	2100      	movs	r1, #0
    a160:	6011      	str	r1, [r2, #0]
    a162:	6812      	ldr	r2, [r2, #0]
    a164:	b11b      	cbz	r3, a16e <nrfx_power_irq_handler+0x82>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
    a166:	4b17      	ldr	r3, [pc, #92]	; (a1c4 <nrfx_power_irq_handler+0xd8>)
    a168:	681b      	ldr	r3, [r3, #0]
    a16a:	2000      	movs	r0, #0
    a16c:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    a16e:	f414 7f80 	tst.w	r4, #256	; 0x100
    a172:	d00b      	beq.n	a18c <nrfx_power_irq_handler+0xa0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a174:	4b14      	ldr	r3, [pc, #80]	; (a1c8 <nrfx_power_irq_handler+0xdc>)
    a176:	681b      	ldr	r3, [r3, #0]
    if (ret)
    a178:	b11b      	cbz	r3, a182 <nrfx_power_irq_handler+0x96>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a17a:	4a13      	ldr	r2, [pc, #76]	; (a1c8 <nrfx_power_irq_handler+0xdc>)
    a17c:	2100      	movs	r1, #0
    a17e:	6011      	str	r1, [r2, #0]
    a180:	6812      	ldr	r2, [r2, #0]
    a182:	b11b      	cbz	r3, a18c <nrfx_power_irq_handler+0xa0>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
    a184:	4b0f      	ldr	r3, [pc, #60]	; (a1c4 <nrfx_power_irq_handler+0xd8>)
    a186:	681b      	ldr	r3, [r3, #0]
    a188:	2001      	movs	r0, #1
    a18a:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    a18c:	f414 7f00 	tst.w	r4, #512	; 0x200
    a190:	d00b      	beq.n	a1aa <nrfx_power_irq_handler+0xbe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a192:	4b0e      	ldr	r3, [pc, #56]	; (a1cc <nrfx_power_irq_handler+0xe0>)
    a194:	681b      	ldr	r3, [r3, #0]
    if (ret)
    a196:	b11b      	cbz	r3, a1a0 <nrfx_power_irq_handler+0xb4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a198:	4a0c      	ldr	r2, [pc, #48]	; (a1cc <nrfx_power_irq_handler+0xe0>)
    a19a:	2100      	movs	r1, #0
    a19c:	6011      	str	r1, [r2, #0]
    a19e:	6812      	ldr	r2, [r2, #0]
    a1a0:	b11b      	cbz	r3, a1aa <nrfx_power_irq_handler+0xbe>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    a1a2:	4b08      	ldr	r3, [pc, #32]	; (a1c4 <nrfx_power_irq_handler+0xd8>)
    a1a4:	681b      	ldr	r3, [r3, #0]
    a1a6:	2002      	movs	r0, #2
    a1a8:	4798      	blx	r3
    }
#endif
}
    a1aa:	bd10      	pop	{r4, pc}
    a1ac:	40000108 	.word	0x40000108
    a1b0:	200027d0 	.word	0x200027d0
    a1b4:	40000114 	.word	0x40000114
    a1b8:	200027d4 	.word	0x200027d4
    a1bc:	40000118 	.word	0x40000118
    a1c0:	4000011c 	.word	0x4000011c
    a1c4:	200027d8 	.word	0x200027d8
    a1c8:	40000120 	.word	0x40000120
    a1cc:	40000124 	.word	0x40000124

0000a1d0 <is_allocated_channel>:
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
    a1d0:	2301      	movs	r3, #1
    a1d2:	4083      	lsls	r3, r0
 * @retval true  The channel is allocated.
 * @retval false The channel is not allocated.
 */
static bool is_allocated_channel(nrf_ppi_channel_t channel)
{
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    a1d4:	4a03      	ldr	r2, [pc, #12]	; (a1e4 <is_allocated_channel+0x14>)
    a1d6:	6812      	ldr	r2, [r2, #0]
    a1d8:	4213      	tst	r3, r2
}
    a1da:	bf14      	ite	ne
    a1dc:	2001      	movne	r0, #1
    a1de:	2000      	moveq	r0, #0
    a1e0:	4770      	bx	lr
    a1e2:	bf00      	nop
    a1e4:	200027dc 	.word	0x200027dc

0000a1e8 <channel_allocated_set>:
    a1e8:	2301      	movs	r3, #1
    a1ea:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @param[in] channel_num Specifies the channel to set the "allocated" indication.
 */
static void channel_allocated_set(nrf_ppi_channel_t channel)
{
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
    a1ee:	4a02      	ldr	r2, [pc, #8]	; (a1f8 <channel_allocated_set+0x10>)
    a1f0:	6813      	ldr	r3, [r2, #0]
    a1f2:	4303      	orrs	r3, r0
    a1f4:	6013      	str	r3, [r2, #0]
}
    a1f6:	4770      	bx	lr
    a1f8:	200027dc 	.word	0x200027dc

0000a1fc <nrfx_ppi_channel_alloc>:
    group_allocated_clr_all();
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    a1fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a200:	4681      	mov	r9, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;

    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    a202:	2400      	movs	r4, #0
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
    a204:	4e15      	ldr	r6, [pc, #84]	; (a25c <nrfx_ppi_channel_alloc+0x60>)
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    a206:	f8df 805c 	ldr.w	r8, [pc, #92]	; a264 <nrfx_ppi_channel_alloc+0x68>
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    a20a:	e011      	b.n	a230 <nrfx_ppi_channel_alloc+0x34>
    {
        nrf_ppi_channel_t channel = (nrf_ppi_channel_t)ch_idx;
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
    a20c:	4620      	mov	r0, r4
    a20e:	f7ff ffeb 	bl	a1e8 <channel_allocated_set>
            *p_channel = channel;
    a212:	f889 4000 	strb.w	r4, [r9]
            err_code   = NRFX_SUCCESS;
    a216:	f8df 8048 	ldr.w	r8, [pc, #72]	; a260 <nrfx_ppi_channel_alloc+0x64>
	__asm__ volatile(
    a21a:	f387 8811 	msr	BASEPRI, r7
    a21e:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();
        if (err_code == NRFX_SUCCESS)
    a222:	4b0f      	ldr	r3, [pc, #60]	; (a260 <nrfx_ppi_channel_alloc+0x64>)
    a224:	4598      	cmp	r8, r3
    a226:	d016      	beq.n	a256 <nrfx_ppi_channel_alloc+0x5a>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", channel);
            break;
        }
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    a228:	ea26 0605 	bic.w	r6, r6, r5
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    a22c:	3401      	adds	r4, #1
    a22e:	b2e4      	uxtb	r4, r4
    a230:	b18e      	cbz	r6, a256 <nrfx_ppi_channel_alloc+0x5a>
	__asm__ volatile(
    a232:	f04f 0320 	mov.w	r3, #32
    a236:	f3ef 8711 	mrs	r7, BASEPRI
    a23a:	f383 8812 	msr	BASEPRI_MAX, r3
    a23e:	f3bf 8f6f 	isb	sy
    a242:	2501      	movs	r5, #1
    a244:	40a5      	lsls	r5, r4
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    a246:	4235      	tst	r5, r6
    a248:	d0e7      	beq.n	a21a <nrfx_ppi_channel_alloc+0x1e>
    a24a:	4620      	mov	r0, r4
    a24c:	f7ff ffc0 	bl	a1d0 <is_allocated_channel>
    a250:	2800      	cmp	r0, #0
    a252:	d1e2      	bne.n	a21a <nrfx_ppi_channel_alloc+0x1e>
    a254:	e7da      	b.n	a20c <nrfx_ppi_channel_alloc+0x10>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    a256:	4640      	mov	r0, r8
    a258:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a25c:	000fffff 	.word	0x000fffff
    a260:	0bad0000 	.word	0x0bad0000
    a264:	0bad0002 	.word	0x0bad0002

0000a268 <twi_process_error>:
} twi_control_block_t;

static twi_control_block_t m_cb[NRFX_TWI_ENABLED_COUNT];

static nrfx_err_t twi_process_error(uint32_t errorsrc)
{
    a268:	4603      	mov	r3, r0
    nrfx_err_t ret = NRFX_ERROR_INTERNAL;

    if (errorsrc & NRF_TWI_ERROR_OVERRUN)
    a26a:	f010 0f01 	tst.w	r0, #1
    a26e:	d108      	bne.n	a282 <twi_process_error+0x1a>
    nrfx_err_t ret = NRFX_ERROR_INTERNAL;
    a270:	4806      	ldr	r0, [pc, #24]	; (a28c <twi_process_error+0x24>)
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    }

    if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
    a272:	f013 0f02 	tst.w	r3, #2
    a276:	d000      	beq.n	a27a <twi_process_error+0x12>
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    a278:	4805      	ldr	r0, [pc, #20]	; (a290 <twi_process_error+0x28>)
    }

    if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
    a27a:	f013 0f04 	tst.w	r3, #4
    a27e:	d102      	bne.n	a286 <twi_process_error+0x1e>
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    }

    return ret;
}
    a280:	4770      	bx	lr
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    a282:	4804      	ldr	r0, [pc, #16]	; (a294 <twi_process_error+0x2c>)
    a284:	e7f5      	b.n	a272 <twi_process_error+0xa>
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    a286:	4804      	ldr	r0, [pc, #16]	; (a298 <twi_process_error+0x30>)
    return ret;
    a288:	e7fa      	b.n	a280 <twi_process_error+0x18>
    a28a:	bf00      	nop
    a28c:	0bad0001 	.word	0x0bad0001
    a290:	0bae0001 	.word	0x0bae0001
    a294:	0bae0000 	.word	0x0bae0000
    a298:	0bae0002 	.word	0x0bae0002

0000a29c <twi_tx_start_transfer>:
    return true;
}

static nrfx_err_t twi_tx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    a29c:	b530      	push	{r4, r5, lr}
    a29e:	b083      	sub	sp, #12
    a2a0:	4604      	mov	r4, r0
    a2a2:	460d      	mov	r5, r1
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    a2a4:	4b29      	ldr	r3, [pc, #164]	; (a34c <twi_tx_start_transfer+0xb0>)
    a2a6:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a2a8:	2300      	movs	r3, #0
    a2aa:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    a2ae:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    a2b2:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    a2b6:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    a2ba:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    a2be:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    a2c2:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    a2c6:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
    a2ca:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    nrf_twi_shorts_set(p_twi, 0);

    p_cb->bytes_transferred = 0;
    a2ce:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    a2d0:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a2d4:	2301      	movs	r3, #1
    a2d6:	6203      	str	r3, [r0, #32]

    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
    a2d8:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
    a2dc:	2b01      	cmp	r3, #1
    a2de:	d001      	beq.n	a2e4 <twi_tx_start_transfer+0x48>
    a2e0:	2301      	movs	r3, #1
    a2e2:	6083      	str	r3, [r0, #8]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTTX);
    }

    (void)twi_send_byte(p_twi, p_cb);
    a2e4:	4629      	mov	r1, r5
    a2e6:	4620      	mov	r0, r4
    a2e8:	f009 fcae 	bl	13c48 <twi_send_byte>

    if (p_cb->handler)
    a2ec:	682b      	ldr	r3, [r5, #0]
    a2ee:	b143      	cbz	r3, a302 <twi_tx_start_transfer+0x66>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    a2f0:	f240 2386 	movw	r3, #646	; 0x286
    a2f4:	60ab      	str	r3, [r5, #8]
                         NRF_TWI_INT_ERROR_MASK     |
                         NRF_TWI_INT_TXDSENT_MASK   |
                         NRF_TWI_INT_RXDREADY_MASK;

        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    a2f6:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
    a2f8:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    nrfx_err_t ret_code = NRFX_SUCCESS;
    a2fc:	4814      	ldr	r0, [pc, #80]	; (a350 <twi_tx_start_transfer+0xb4>)
            ret_code = NRFX_ERROR_INTERNAL;
        }

    }
    return ret_code;
}
    a2fe:	b003      	add	sp, #12
    a300:	bd30      	pop	{r4, r5, pc}
        while ((hw_timeout > 0) &&
    a302:	9b01      	ldr	r3, [sp, #4]
    a304:	2b00      	cmp	r3, #0
    a306:	dd08      	ble.n	a31a <twi_tx_start_transfer+0x7e>
               twi_transfer(p_twi, p_cb))
    a308:	4629      	mov	r1, r5
    a30a:	4620      	mov	r0, r4
    a30c:	f009 fcec 	bl	13ce8 <twi_transfer>
        while ((hw_timeout > 0) &&
    a310:	b118      	cbz	r0, a31a <twi_tx_start_transfer+0x7e>
            hw_timeout--;
    a312:	9b01      	ldr	r3, [sp, #4]
    a314:	3b01      	subs	r3, #1
    a316:	9301      	str	r3, [sp, #4]
    a318:	e7f3      	b.n	a302 <twi_tx_start_transfer+0x66>
        if (p_cb->error)
    a31a:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    a31e:	b13b      	cbz	r3, a330 <twi_tx_start_transfer+0x94>
    uint32_t error_source = p_reg->ERRORSRC;
    a320:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    a324:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
            if (errorsrc)
    a328:	b170      	cbz	r0, a348 <twi_tx_start_transfer+0xac>
                ret_code = twi_process_error(errorsrc);
    a32a:	f7ff ff9d 	bl	a268 <twi_process_error>
    a32e:	e000      	b.n	a332 <twi_tx_start_transfer+0x96>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    a330:	4807      	ldr	r0, [pc, #28]	; (a350 <twi_tx_start_transfer+0xb4>)
        if (hw_timeout <= 0)
    a332:	9b01      	ldr	r3, [sp, #4]
    a334:	2b00      	cmp	r3, #0
    a336:	dce2      	bgt.n	a2fe <twi_tx_start_transfer+0x62>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    a338:	2300      	movs	r3, #0
    a33a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    a33e:	2305      	movs	r3, #5
    a340:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
            ret_code = NRFX_ERROR_INTERNAL;
    a344:	4803      	ldr	r0, [pc, #12]	; (a354 <twi_tx_start_transfer+0xb8>)
    return ret_code;
    a346:	e7da      	b.n	a2fe <twi_tx_start_transfer+0x62>
                ret_code = NRFX_ERROR_INTERNAL;
    a348:	4802      	ldr	r0, [pc, #8]	; (a354 <twi_tx_start_transfer+0xb8>)
    a34a:	e7f2      	b.n	a332 <twi_tx_start_transfer+0x96>
    a34c:	000186a0 	.word	0x000186a0
    a350:	0bad0000 	.word	0x0bad0000
    a354:	0bad0001 	.word	0x0bad0001

0000a358 <twi_rx_start_transfer>:

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    a358:	b530      	push	{r4, r5, lr}
    a35a:	b083      	sub	sp, #12
    a35c:	4604      	mov	r4, r0
    a35e:	460d      	mov	r5, r1
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    a360:	4b2d      	ldr	r3, [pc, #180]	; (a418 <twi_rx_start_transfer+0xc0>)
    a362:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a364:	2300      	movs	r3, #0
    a366:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    a36a:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    a36e:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    a372:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    a376:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    a37a:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    a37e:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    a382:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
    a386:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    a388:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    a38c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    a38e:	2b01      	cmp	r3, #1
    a390:	d015      	beq.n	a3be <twi_rx_start_transfer+0x66>
    p_reg->SHORTS = mask;
    a392:	2301      	movs	r3, #1
    a394:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a398:	2301      	movs	r3, #1
    a39a:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
    a39c:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
    a3a0:	2b02      	cmp	r3, #2
    a3a2:	d001      	beq.n	a3a8 <twi_rx_start_transfer+0x50>
    a3a4:	2301      	movs	r3, #1
    a3a6:	6023      	str	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
    a3a8:	682b      	ldr	r3, [r5, #0]
    a3aa:	b183      	cbz	r3, a3ce <twi_rx_start_transfer+0x76>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    a3ac:	f240 2386 	movw	r3, #646	; 0x286
    a3b0:	60ab      	str	r3, [r5, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    a3b2:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
    a3b4:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    nrfx_err_t ret_code = NRFX_SUCCESS;
    a3b8:	4818      	ldr	r0, [pc, #96]	; (a41c <twi_rx_start_transfer+0xc4>)
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
    a3ba:	b003      	add	sp, #12
    a3bc:	bd30      	pop	{r4, r5, pc}
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    a3be:	6a0b      	ldr	r3, [r1, #32]
    a3c0:	f013 0f40 	tst.w	r3, #64	; 0x40
    a3c4:	d1e5      	bne.n	a392 <twi_rx_start_transfer+0x3a>
    p_reg->SHORTS = mask;
    a3c6:	2302      	movs	r3, #2
    a3c8:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
    a3cc:	e7e4      	b.n	a398 <twi_rx_start_transfer+0x40>
        while ((hw_timeout > 0) &&
    a3ce:	9b01      	ldr	r3, [sp, #4]
    a3d0:	2b00      	cmp	r3, #0
    a3d2:	dd08      	ble.n	a3e6 <twi_rx_start_transfer+0x8e>
               twi_transfer(p_twi, p_cb))
    a3d4:	4629      	mov	r1, r5
    a3d6:	4620      	mov	r0, r4
    a3d8:	f009 fc86 	bl	13ce8 <twi_transfer>
        while ((hw_timeout > 0) &&
    a3dc:	b118      	cbz	r0, a3e6 <twi_rx_start_transfer+0x8e>
               hw_timeout--;
    a3de:	9b01      	ldr	r3, [sp, #4]
    a3e0:	3b01      	subs	r3, #1
    a3e2:	9301      	str	r3, [sp, #4]
    a3e4:	e7f3      	b.n	a3ce <twi_rx_start_transfer+0x76>
        if (p_cb->error)
    a3e6:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    a3ea:	b13b      	cbz	r3, a3fc <twi_rx_start_transfer+0xa4>
    uint32_t error_source = p_reg->ERRORSRC;
    a3ec:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    a3f0:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
            if (errorsrc)
    a3f4:	b170      	cbz	r0, a414 <twi_rx_start_transfer+0xbc>
                ret_code = twi_process_error(errorsrc);
    a3f6:	f7ff ff37 	bl	a268 <twi_process_error>
    a3fa:	e000      	b.n	a3fe <twi_rx_start_transfer+0xa6>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    a3fc:	4807      	ldr	r0, [pc, #28]	; (a41c <twi_rx_start_transfer+0xc4>)
        if (hw_timeout <= 0)
    a3fe:	9b01      	ldr	r3, [sp, #4]
    a400:	2b00      	cmp	r3, #0
    a402:	dcda      	bgt.n	a3ba <twi_rx_start_transfer+0x62>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    a404:	2300      	movs	r3, #0
    a406:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    a40a:	2305      	movs	r3, #5
    a40c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
            ret_code = NRFX_ERROR_INTERNAL;
    a410:	4803      	ldr	r0, [pc, #12]	; (a420 <twi_rx_start_transfer+0xc8>)
    return ret_code;
    a412:	e7d2      	b.n	a3ba <twi_rx_start_transfer+0x62>
                ret_code = NRFX_ERROR_INTERNAL;
    a414:	4802      	ldr	r0, [pc, #8]	; (a420 <twi_rx_start_transfer+0xc8>)
    a416:	e7f2      	b.n	a3fe <twi_rx_start_transfer+0xa6>
    a418:	000186a0 	.word	0x000186a0
    a41c:	0bad0000 	.word	0x0bad0000
    a420:	0bad0001 	.word	0x0bad0001

0000a424 <twi_xfer>:

static nrfx_err_t twi_xfer(NRF_TWI_Type               * p_twi,
                           twi_control_block_t        * p_cb,
                           nrfx_twi_xfer_desc_t const * p_xfer_desc,
                           uint32_t                     flags)
{
    a424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a426:	4686      	mov	lr, r0
    a428:	460c      	mov	r4, r1
    a42a:	4615      	mov	r5, r2
    a42c:	469c      	mov	ip, r3

    nrfx_err_t err_code = NRFX_SUCCESS;

    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    a42e:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
    a432:	2b01      	cmp	r3, #1
    a434:	d027      	beq.n	a486 <twi_xfer+0x62>
    {
        /* RX is invalid after TX suspend */
        return NRFX_ERROR_INVALID_STATE;
    }
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
    a436:	2b02      	cmp	r3, #2
    a438:	d02a      	beq.n	a490 <twi_xfer+0x6c>
    p_reg->INTENCLR = mask;
    a43a:	4b24      	ldr	r3, [pc, #144]	; (a4cc <twi_xfer+0xa8>)
    a43c:	f8ce 3308 	str.w	r3, [lr, #776]	; 0x308
    }

    /* Block TWI interrupts to ensure that function is not interrupted by TWI interrupt. */
    nrf_twi_int_disable(p_twi, NRF_TWI_ALL_INTS_MASK);

    if (p_cb->busy)
    a440:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    a444:	bb4b      	cbnz	r3, a49a <twi_xfer+0x76>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
    a446:	f01c 0f04 	tst.w	ip, #4
    a44a:	bf0c      	ite	eq
    a44c:	2301      	moveq	r3, #1
    a44e:	2300      	movne	r3, #0
    a450:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    }

    p_cb->flags       = flags;
    a454:	f8c4 c020 	str.w	ip, [r4, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
    a458:	f104 060c 	add.w	r6, r4, #12
    a45c:	462f      	mov	r7, r5
    a45e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    a460:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    a462:	683b      	ldr	r3, [r7, #0]
    a464:	6033      	str	r3, [r6, #0]
    p_cb->curr_length = p_xfer_desc->primary_length;
    a466:	686b      	ldr	r3, [r5, #4]
    a468:	62a3      	str	r3, [r4, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
    a46a:	68eb      	ldr	r3, [r5, #12]
    a46c:	6263      	str	r3, [r4, #36]	; 0x24
    nrf_twi_address_set(p_twi, p_xfer_desc->address);
    a46e:	786b      	ldrb	r3, [r5, #1]
    p_reg->ADDRESS = address;
    a470:	f8ce 3588 	str.w	r3, [lr, #1416]	; 0x588

    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    a474:	782b      	ldrb	r3, [r5, #0]
    a476:	2b01      	cmp	r3, #1
    a478:	d020      	beq.n	a4bc <twi_xfer+0x98>
    {
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    a47a:	b99b      	cbnz	r3, a4a4 <twi_xfer+0x80>
    a47c:	f01c 0f20 	tst.w	ip, #32
    a480:	d01a      	beq.n	a4b8 <twi_xfer+0x94>
    a482:	2301      	movs	r3, #1
    a484:	e00f      	b.n	a4a6 <twi_xfer+0x82>
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    a486:	7812      	ldrb	r2, [r2, #0]
    a488:	2a01      	cmp	r2, #1
    a48a:	d1d4      	bne.n	a436 <twi_xfer+0x12>
        return NRFX_ERROR_INVALID_STATE;
    a48c:	4810      	ldr	r0, [pc, #64]	; (a4d0 <twi_xfer+0xac>)
    a48e:	e012      	b.n	a4b6 <twi_xfer+0x92>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
    a490:	782b      	ldrb	r3, [r5, #0]
    a492:	2b01      	cmp	r3, #1
    a494:	d0d1      	beq.n	a43a <twi_xfer+0x16>
        return NRFX_ERROR_INVALID_STATE;
    a496:	480e      	ldr	r0, [pc, #56]	; (a4d0 <twi_xfer+0xac>)
    a498:	e00d      	b.n	a4b6 <twi_xfer+0x92>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    a49a:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
    a49c:	f8ce 3304 	str.w	r3, [lr, #772]	; 0x304
        return err_code;
    a4a0:	480c      	ldr	r0, [pc, #48]	; (a4d4 <twi_xfer+0xb0>)
    a4a2:	e008      	b.n	a4b6 <twi_xfer+0x92>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    a4a4:	2301      	movs	r3, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
    a4a6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

        err_code = twi_tx_start_transfer(p_twi, p_cb);
    a4aa:	4621      	mov	r1, r4
    a4ac:	4670      	mov	r0, lr
    a4ae:	f7ff fef5 	bl	a29c <twi_tx_start_transfer>
    }
    else
    {
        err_code = twi_rx_start_transfer(p_twi, p_cb);
    }
    if (p_cb->handler == NULL)
    a4b2:	6823      	ldr	r3, [r4, #0]
    a4b4:	b13b      	cbz	r3, a4c6 <twi_xfer+0xa2>
    {
        p_cb->busy = false;
    }
    return err_code;
}
    a4b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    a4b8:	2300      	movs	r3, #0
    a4ba:	e7f4      	b.n	a4a6 <twi_xfer+0x82>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
    a4bc:	4621      	mov	r1, r4
    a4be:	4670      	mov	r0, lr
    a4c0:	f7ff ff4a 	bl	a358 <twi_rx_start_transfer>
    a4c4:	e7f5      	b.n	a4b2 <twi_xfer+0x8e>
        p_cb->busy = false;
    a4c6:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    a4ca:	e7f4      	b.n	a4b6 <twi_xfer+0x92>
    a4cc:	00044286 	.word	0x00044286
    a4d0:	0bad0005 	.word	0x0bad0005
    a4d4:	0bad000b 	.word	0x0bad000b

0000a4d8 <nrfx_twi_init>:
{
    a4d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    a4da:	7904      	ldrb	r4, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    a4dc:	ebc4 1604 	rsb	r6, r4, r4, lsl #4
    a4e0:	4d2a      	ldr	r5, [pc, #168]	; (a58c <nrfx_twi_init+0xb4>)
    a4e2:	eb05 0586 	add.w	r5, r5, r6, lsl #2
    a4e6:	f895 502e 	ldrb.w	r5, [r5, #46]	; 0x2e
    a4ea:	2d00      	cmp	r5, #0
    a4ec:	d14c      	bne.n	a588 <nrfx_twi_init+0xb0>
    p_cb->handler         = event_handler;
    a4ee:	4e27      	ldr	r6, [pc, #156]	; (a58c <nrfx_twi_init+0xb4>)
    a4f0:	ebc4 1704 	rsb	r7, r4, r4, lsl #4
    a4f4:	eb06 0587 	add.w	r5, r6, r7, lsl #2
    a4f8:	f846 2027 	str.w	r2, [r6, r7, lsl #2]
    p_cb->p_context       = p_context;
    a4fc:	606b      	str	r3, [r5, #4]
    p_cb->int_mask        = 0;
    a4fe:	2300      	movs	r3, #0
    a500:	60ab      	str	r3, [r5, #8]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
    a502:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
    p_cb->repeated        = false;
    a506:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    p_cb->busy            = false;
    a50a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    a50e:	7b4b      	ldrb	r3, [r1, #13]
    a510:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
    TWI_PIN_INIT(p_config->scl);
    a514:	680b      	ldr	r3, [r1, #0]
    *p_pin = pin_number & 0x1F;
    a516:	f003 051f 	and.w	r5, r3, #31
    return pin_number >> 5;
    a51a:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    a51c:	2b01      	cmp	r3, #1
    a51e:	d02f      	beq.n	a580 <nrfx_twi_init+0xa8>
        case 0: return NRF_P0;
    a520:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    a524:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    a528:	f240 650c 	movw	r5, #1548	; 0x60c
    a52c:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
    TWI_PIN_INIT(p_config->sda);
    a530:	684b      	ldr	r3, [r1, #4]
    *p_pin = pin_number & 0x1F;
    a532:	f003 051f 	and.w	r5, r3, #31
    return pin_number >> 5;
    a536:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    a538:	2b01      	cmp	r3, #1
    a53a:	d023      	beq.n	a584 <nrfx_twi_init+0xac>
        case 0: return NRF_P0;
    a53c:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    a540:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    a544:	f240 650c 	movw	r5, #1548	; 0x60c
    a548:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    a54c:	6803      	ldr	r3, [r0, #0]
    nrf_twi_pins_set(p_twi, p_config->scl, p_config->sda);
    a54e:	680e      	ldr	r6, [r1, #0]
    a550:	684d      	ldr	r5, [r1, #4]
    p_reg->PSEL.SCL = scl_pin;
    a552:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    a556:	f8c3 550c 	str.w	r5, [r3, #1292]	; 0x50c
        (nrf_twi_frequency_t)p_config->frequency);
    a55a:	6889      	ldr	r1, [r1, #8]
    p_reg->FREQUENCY = frequency;
    a55c:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
    if (p_cb->handler)
    a560:	b122      	cbz	r2, a56c <nrfx_twi_init+0x94>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
    a562:	6800      	ldr	r0, [r0, #0]
    a564:	f340 3007 	sbfx	r0, r0, #12, #8
    a568:	f7fa fdc6 	bl	50f8 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    a56c:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
    a570:	4b06      	ldr	r3, [pc, #24]	; (a58c <nrfx_twi_init+0xb4>)
    a572:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    a576:	2301      	movs	r3, #1
    a578:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    return err_code;
    a57c:	4804      	ldr	r0, [pc, #16]	; (a590 <nrfx_twi_init+0xb8>)
}
    a57e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
    a580:	4e04      	ldr	r6, [pc, #16]	; (a594 <nrfx_twi_init+0xbc>)
    a582:	e7cf      	b.n	a524 <nrfx_twi_init+0x4c>
    a584:	4e03      	ldr	r6, [pc, #12]	; (a594 <nrfx_twi_init+0xbc>)
    a586:	e7db      	b.n	a540 <nrfx_twi_init+0x68>
        return err_code;
    a588:	4803      	ldr	r0, [pc, #12]	; (a598 <nrfx_twi_init+0xc0>)
    a58a:	e7f8      	b.n	a57e <nrfx_twi_init+0xa6>
    a58c:	200027e0 	.word	0x200027e0
    a590:	0bad0000 	.word	0x0bad0000
    a594:	50000300 	.word	0x50000300
    a598:	0bad0005 	.word	0x0bad0005

0000a59c <nrfx_twi_enable>:
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    a59c:	7903      	ldrb	r3, [r0, #4]
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    a59e:	6802      	ldr	r2, [r0, #0]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    a5a0:	2105      	movs	r1, #5
    a5a2:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    a5a6:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    a5aa:	4a03      	ldr	r2, [pc, #12]	; (a5b8 <nrfx_twi_enable+0x1c>)
    a5ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    a5b0:	2202      	movs	r2, #2
    a5b2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
    a5b6:	4770      	bx	lr
    a5b8:	200027e0 	.word	0x200027e0

0000a5bc <nrfx_twi_disable>:
{
    a5bc:	b410      	push	{r4}
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    a5be:	7903      	ldrb	r3, [r0, #4]
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    a5c0:	6802      	ldr	r2, [r0, #0]
    p_reg->INTENCLR = mask;
    a5c2:	490c      	ldr	r1, [pc, #48]	; (a5f4 <nrfx_twi_disable+0x38>)
    a5c4:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    a5c8:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
    a5cc:	f021 0103 	bic.w	r1, r1, #3
    a5d0:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    a5d4:	2000      	movs	r0, #0
    a5d6:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    a5da:	4a07      	ldr	r2, [pc, #28]	; (a5f8 <nrfx_twi_disable+0x3c>)
    a5dc:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    a5e0:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    a5e4:	2401      	movs	r4, #1
    a5e6:	f881 402e 	strb.w	r4, [r1, #46]	; 0x2e
    p_cb->busy = false;
    a5ea:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
}
    a5ee:	bc10      	pop	{r4}
    a5f0:	4770      	bx	lr
    a5f2:	bf00      	nop
    a5f4:	00044286 	.word	0x00044286
    a5f8:	200027e0 	.word	0x200027e0

0000a5fc <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    a5fc:	b510      	push	{r4, lr}
    a5fe:	4613      	mov	r3, r2

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    a600:	7904      	ldrb	r4, [r0, #4]
    a602:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
    a606:	460a      	mov	r2, r1
    a608:	4903      	ldr	r1, [pc, #12]	; (a618 <nrfx_twi_xfer+0x1c>)
    a60a:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    a60e:	6800      	ldr	r0, [r0, #0]
    a610:	f7ff ff08 	bl	a424 <twi_xfer>
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    a614:	bd10      	pop	{r4, pc}
    a616:	bf00      	nop
    a618:	200027e0 	.word	0x200027e0

0000a61c <nrfx_twi_0_irq_handler>:

}

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
    a61c:	b508      	push	{r3, lr}
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
    a61e:	4902      	ldr	r1, [pc, #8]	; (a628 <nrfx_twi_0_irq_handler+0xc>)
    a620:	4802      	ldr	r0, [pc, #8]	; (a62c <nrfx_twi_0_irq_handler+0x10>)
    a622:	f009 fbdd 	bl	13de0 <twi_irq_handler>
}
    a626:	bd08      	pop	{r3, pc}
    a628:	200027e0 	.word	0x200027e0
    a62c:	40003000 	.word	0x40003000

0000a630 <nrf52_errata_166>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a630:	4b03      	ldr	r3, [pc, #12]	; (a640 <nrf52_errata_166+0x10>)
    a632:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    a634:	2b08      	cmp	r3, #8
    a636:	d001      	beq.n	a63c <nrf52_errata_166+0xc>
        return false;
    a638:	2000      	movs	r0, #0
    a63a:	4770      	bx	lr
                        return true;
    a63c:	2001      	movs	r0, #1
}
    a63e:	4770      	bx	lr
    a640:	10000130 	.word	0x10000130

0000a644 <nrf52_errata_171>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a644:	4b03      	ldr	r3, [pc, #12]	; (a654 <nrf52_errata_171+0x10>)
    a646:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    a648:	2b08      	cmp	r3, #8
    a64a:	d001      	beq.n	a650 <nrf52_errata_171+0xc>
        return false;
    a64c:	2000      	movs	r0, #0
    a64e:	4770      	bx	lr
                        return true;
    a650:	2001      	movs	r0, #1
}
    a652:	4770      	bx	lr
    a654:	10000130 	.word	0x10000130

0000a658 <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a658:	4b08      	ldr	r3, [pc, #32]	; (a67c <nrf52_errata_187+0x24>)
    a65a:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    a65c:	3304      	adds	r3, #4
    a65e:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    a660:	2a08      	cmp	r2, #8
    a662:	d001      	beq.n	a668 <nrf52_errata_187+0x10>
        return false;
    a664:	2000      	movs	r0, #0
    a666:	4770      	bx	lr
                switch(var2)
    a668:	2b00      	cmp	r3, #0
    a66a:	d804      	bhi.n	a676 <nrf52_errata_187+0x1e>
    a66c:	e8df f003 	tbb	[pc, r3]
    a670:	01          	.byte	0x01
    a671:	00          	.byte	0x00
            if (var1 == 0x08)
    a672:	2000      	movs	r0, #0
    a674:	4770      	bx	lr
                        return true;
    a676:	2001      	movs	r0, #1
}
    a678:	4770      	bx	lr
    a67a:	bf00      	nop
    a67c:	10000130 	.word	0x10000130

0000a680 <nrf52_errata_199>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a680:	4b03      	ldr	r3, [pc, #12]	; (a690 <nrf52_errata_199+0x10>)
    a682:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    a684:	2b08      	cmp	r3, #8
    a686:	d001      	beq.n	a68c <nrf52_errata_199+0xc>
        return false;
    a688:	2000      	movs	r0, #0
    a68a:	4770      	bx	lr
                        return true;
    a68c:	2001      	movs	r0, #1
}
    a68e:	4770      	bx	lr
    a690:	10000130 	.word	0x10000130

0000a694 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
    a694:	b500      	push	{lr}
    a696:	b083      	sub	sp, #12
    m_bus_suspend = false;
    a698:	2300      	movs	r3, #0
    a69a:	4a09      	ldr	r2, [pc, #36]	; (a6c0 <ev_usbreset_handler+0x2c>)
    a69c:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    a69e:	4a09      	ldr	r2, [pc, #36]	; (a6c4 <ev_usbreset_handler+0x30>)
    a6a0:	7013      	strb	r3, [r2, #0]

    const nrfx_usbd_evt_t evt = {
    a6a2:	f8ad 3005 	strh.w	r3, [sp, #5]
    a6a6:	f88d 3007 	strb.w	r3, [sp, #7]
    a6aa:	2301      	movs	r3, #1
    a6ac:	f88d 3004 	strb.w	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    a6b0:	4b05      	ldr	r3, [pc, #20]	; (a6c8 <ev_usbreset_handler+0x34>)
    a6b2:	681b      	ldr	r3, [r3, #0]
    a6b4:	a801      	add	r0, sp, #4
    a6b6:	4798      	blx	r3
}
    a6b8:	b003      	add	sp, #12
    a6ba:	f85d fb04 	ldr.w	pc, [sp], #4
    a6be:	bf00      	nop
    a6c0:	20002f7f 	.word	0x20002f7f
    a6c4:	20002f82 	.word	0x20002f82
    a6c8:	20002a1c 	.word	0x20002a1c

0000a6cc <ev_sof_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }

static void ev_sof_handler(void)
{
    a6cc:	b500      	push	{lr}
    a6ce:	b083      	sub	sp, #12
    nrfx_usbd_evt_t evt =  {
    a6d0:	2300      	movs	r3, #0
    a6d2:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
    a6d6:	4b12      	ldr	r3, [pc, #72]	; (a720 <ev_sof_handler+0x54>)
    a6d8:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    a6dc:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
    a6e0:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    if (size_isoout == 0)
    a6e4:	b15b      	cbz	r3, a6fe <ev_sof_handler+0x32>
    else if ((size_isoout & USBD_SIZE_ISOOUT_ZERO_Msk) ==
    a6e6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    a6ea:	d115      	bne.n	a718 <ev_sof_handler+0x4c>
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
    };

    /* Process isochronous endpoints */
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    if (nrf_usbd_episoout_size_get(NRF_USBD, NRFX_USBD_EPOUT8) != NRF_USBD_EPISOOUT_NO_DATA)
    a6ec:	f1b3 3fff 	cmp.w	r3, #4294967295
    a6f0:	d002      	beq.n	a6f8 <ev_sof_handler+0x2c>
    {
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    a6f2:	f04f 2101 	mov.w	r1, #16777472	; 0x1000100
    a6f6:	e004      	b.n	a702 <ev_sof_handler+0x36>
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    a6f8:	f44f 7180 	mov.w	r1, #256	; 0x100
    a6fc:	e001      	b.n	a702 <ev_sof_handler+0x36>
    a6fe:	f44f 7180 	mov.w	r1, #256	; 0x100
    }
    m_ep_ready |= iso_ready_mask;
    a702:	4a08      	ldr	r2, [pc, #32]	; (a724 <ev_sof_handler+0x58>)
    a704:	6813      	ldr	r3, [r2, #0]
    a706:	430b      	orrs	r3, r1
    a708:	6013      	str	r3, [r2, #0]

    m_event_handler(&evt);
    a70a:	4b07      	ldr	r3, [pc, #28]	; (a728 <ev_sof_handler+0x5c>)
    a70c:	681b      	ldr	r3, [r3, #0]
    a70e:	a801      	add	r0, sp, #4
    a710:	4798      	blx	r3
}
    a712:	b003      	add	sp, #12
    a714:	f85d fb04 	ldr.w	pc, [sp], #4
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    a718:	f04f 2101 	mov.w	r1, #16777472	; 0x1000100
    a71c:	e7f1      	b.n	a702 <ev_sof_handler+0x36>
    a71e:	bf00      	nop
    a720:	40027000 	.word	0x40027000
    a724:	200028f8 	.word	0x200028f8
    a728:	20002a1c 	.word	0x20002a1c

0000a72c <ev_usbevent_handler>:
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
    a72c:	b510      	push	{r4, lr}
    a72e:	b082      	sub	sp, #8
    return p_reg->EVENTCAUSE;
    a730:	4b23      	ldr	r3, [pc, #140]	; (a7c0 <ev_usbevent_handler+0x94>)
    a732:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
    a736:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    a73a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    a73e:	f414 7f80 	tst.w	r4, #256	; 0x100
    a742:	d00e      	beq.n	a762 <ev_usbevent_handler+0x36>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
    a744:	4b1f      	ldr	r3, [pc, #124]	; (a7c4 <ev_usbevent_handler+0x98>)
    a746:	2201      	movs	r2, #1
    a748:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    a74a:	2300      	movs	r3, #0
    a74c:	f8ad 3005 	strh.w	r3, [sp, #5]
    a750:	f88d 3007 	strb.w	r3, [sp, #7]
    a754:	2302      	movs	r3, #2
    a756:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
    a75a:	4b1b      	ldr	r3, [pc, #108]	; (a7c8 <ev_usbevent_handler+0x9c>)
    a75c:	681b      	ldr	r3, [r3, #0]
    a75e:	a801      	add	r0, sp, #4
    a760:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    a762:	f414 7f00 	tst.w	r4, #512	; 0x200
    a766:	d00d      	beq.n	a784 <ev_usbevent_handler+0x58>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
    a768:	2300      	movs	r3, #0
    a76a:	4a16      	ldr	r2, [pc, #88]	; (a7c4 <ev_usbevent_handler+0x98>)
    a76c:	7013      	strb	r3, [r2, #0]
        const nrfx_usbd_evt_t evt = {
    a76e:	f8ad 3005 	strh.w	r3, [sp, #5]
    a772:	f88d 3007 	strb.w	r3, [sp, #7]
    a776:	2303      	movs	r3, #3
    a778:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
    a77c:	4b12      	ldr	r3, [pc, #72]	; (a7c8 <ev_usbevent_handler+0x9c>)
    a77e:	681b      	ldr	r3, [r3, #0]
    a780:	a801      	add	r0, sp, #4
    a782:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    a784:	f414 6f80 	tst.w	r4, #1024	; 0x400
    a788:	d017      	beq.n	a7ba <ev_usbevent_handler+0x8e>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
    a78a:	4b0e      	ldr	r3, [pc, #56]	; (a7c4 <ev_usbevent_handler+0x98>)
    a78c:	781b      	ldrb	r3, [r3, #0]
    a78e:	b1a3      	cbz	r3, a7ba <ev_usbevent_handler+0x8e>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
    a790:	2300      	movs	r3, #0
    a792:	4a0c      	ldr	r2, [pc, #48]	; (a7c4 <ev_usbevent_handler+0x98>)
    a794:	7013      	strb	r3, [r2, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    a796:	2101      	movs	r1, #1
    a798:	4a09      	ldr	r2, [pc, #36]	; (a7c0 <ev_usbevent_handler+0x94>)
    a79a:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    a79e:	3258      	adds	r2, #88	; 0x58
    a7a0:	6011      	str	r1, [r2, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    a7a2:	6812      	ldr	r2, [r2, #0]

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
    a7a4:	f8ad 3005 	strh.w	r3, [sp, #5]
    a7a8:	f88d 3007 	strb.w	r3, [sp, #7]
    a7ac:	2304      	movs	r3, #4
    a7ae:	f88d 3004 	strb.w	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
    a7b2:	4b05      	ldr	r3, [pc, #20]	; (a7c8 <ev_usbevent_handler+0x9c>)
    a7b4:	681b      	ldr	r3, [r3, #0]
    a7b6:	a801      	add	r0, sp, #4
    a7b8:	4798      	blx	r3
        }
    }
}
    a7ba:	b002      	add	sp, #8
    a7bc:	bd10      	pop	{r4, pc}
    a7be:	bf00      	nop
    a7c0:	40027000 	.word	0x40027000
    a7c4:	20002f7f 	.word	0x20002f7f
    a7c8:	20002a1c 	.word	0x20002a1c

0000a7cc <usbd_enable>:

/**
 * @brief Enable USBD peripheral.
 */
static void usbd_enable(void)
{
    a7cc:	b510      	push	{r4, lr}
}

/* Errata: USB cannot be enabled. **/
static inline bool nrfx_usbd_errata_187(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    a7ce:	f7ff ff43 	bl	a658 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    a7d2:	b1b8      	cbz	r0, a804 <usbd_enable+0x38>
    a7d4:	f04f 0220 	mov.w	r2, #32
    a7d8:	f3ef 8311 	mrs	r3, BASEPRI
    a7dc:	f382 8812 	msr	BASEPRI_MAX, r2
    a7e0:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    a7e4:	4a41      	ldr	r2, [pc, #260]	; (a8ec <usbd_enable+0x120>)
    a7e6:	6812      	ldr	r2, [r2, #0]
    a7e8:	2a00      	cmp	r2, #0
    a7ea:	d16f      	bne.n	a8cc <usbd_enable+0x100>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    a7ec:	4a3f      	ldr	r2, [pc, #252]	; (a8ec <usbd_enable+0x120>)
    a7ee:	f249 3175 	movw	r1, #37749	; 0x9375
    a7f2:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    a7f4:	483e      	ldr	r0, [pc, #248]	; (a8f0 <usbd_enable+0x124>)
    a7f6:	2403      	movs	r4, #3
    a7f8:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    a7fa:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    a7fc:	f383 8811 	msr	BASEPRI, r3
    a800:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_171();
    a804:	f7ff ff1e 	bl	a644 <nrf52_errata_171>
    {
        usbd_errata_187_211_begin();
    }

    if (nrfx_usbd_errata_171())
    a808:	b1b8      	cbz	r0, a83a <usbd_enable+0x6e>
	__asm__ volatile(
    a80a:	f04f 0220 	mov.w	r2, #32
    a80e:	f3ef 8311 	mrs	r3, BASEPRI
    a812:	f382 8812 	msr	BASEPRI_MAX, r2
    a816:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    a81a:	4a34      	ldr	r2, [pc, #208]	; (a8ec <usbd_enable+0x120>)
    a81c:	6812      	ldr	r2, [r2, #0]
    a81e:	2a00      	cmp	r2, #0
    a820:	d158      	bne.n	a8d4 <usbd_enable+0x108>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    a822:	4a32      	ldr	r2, [pc, #200]	; (a8ec <usbd_enable+0x120>)
    a824:	f249 3175 	movw	r1, #37749	; 0x9375
    a828:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    a82a:	4832      	ldr	r0, [pc, #200]	; (a8f4 <usbd_enable+0x128>)
    a82c:	24c0      	movs	r4, #192	; 0xc0
    a82e:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    a830:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    a832:	f383 8811 	msr	BASEPRI, r3
    a836:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    a83a:	4b2f      	ldr	r3, [pc, #188]	; (a8f8 <usbd_enable+0x12c>)
    a83c:	2201      	movs	r2, #1
    a83e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    a842:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
    a846:	4b2c      	ldr	r3, [pc, #176]	; (a8f8 <usbd_enable+0x12c>)
    a848:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
    a84c:	f413 6f00 	tst.w	r3, #2048	; 0x800
    a850:	d0f9      	beq.n	a846 <usbd_enable+0x7a>
    p_reg->EVENTCAUSE = flags;
    a852:	4b29      	ldr	r3, [pc, #164]	; (a8f8 <usbd_enable+0x12c>)
    a854:	f44f 6200 	mov.w	r2, #2048	; 0x800
    a858:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    a85c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    a860:	f7ff fef0 	bl	a644 <nrf52_errata_171>
    nrf_usbd_enable(NRF_USBD);

    /* Waiting for peripheral to enable, this should take a few us */
    usbd_eventcause_wait_and_clear(NRF_USBD_EVENTCAUSE_READY_MASK);

    if (nrfx_usbd_errata_171())
    a864:	b1b8      	cbz	r0, a896 <usbd_enable+0xca>
	__asm__ volatile(
    a866:	f04f 0220 	mov.w	r2, #32
    a86a:	f3ef 8311 	mrs	r3, BASEPRI
    a86e:	f382 8812 	msr	BASEPRI_MAX, r2
    a872:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    a876:	4a1d      	ldr	r2, [pc, #116]	; (a8ec <usbd_enable+0x120>)
    a878:	6812      	ldr	r2, [r2, #0]
    a87a:	2a00      	cmp	r2, #0
    a87c:	d12e      	bne.n	a8dc <usbd_enable+0x110>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    a87e:	4a1b      	ldr	r2, [pc, #108]	; (a8ec <usbd_enable+0x120>)
    a880:	f249 3175 	movw	r1, #37749	; 0x9375
    a884:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    a886:	481b      	ldr	r0, [pc, #108]	; (a8f4 <usbd_enable+0x128>)
    a888:	2400      	movs	r4, #0
    a88a:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    a88c:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    a88e:	f383 8811 	msr	BASEPRI, r3
    a892:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    a896:	f7ff fedf 	bl	a658 <nrf52_errata_187>
    {
        usbd_errata_171_end();
    }

    if (nrfx_usbd_errata_187())
    a89a:	b1b0      	cbz	r0, a8ca <usbd_enable+0xfe>
	__asm__ volatile(
    a89c:	f04f 0220 	mov.w	r2, #32
    a8a0:	f3ef 8311 	mrs	r3, BASEPRI
    a8a4:	f382 8812 	msr	BASEPRI_MAX, r2
    a8a8:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    a8ac:	4a0f      	ldr	r2, [pc, #60]	; (a8ec <usbd_enable+0x120>)
    a8ae:	6812      	ldr	r2, [r2, #0]
    a8b0:	b9c2      	cbnz	r2, a8e4 <usbd_enable+0x118>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    a8b2:	4a0e      	ldr	r2, [pc, #56]	; (a8ec <usbd_enable+0x120>)
    a8b4:	f249 3175 	movw	r1, #37749	; 0x9375
    a8b8:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    a8ba:	480d      	ldr	r0, [pc, #52]	; (a8f0 <usbd_enable+0x124>)
    a8bc:	2400      	movs	r4, #0
    a8be:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    a8c0:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    a8c2:	f383 8811 	msr	BASEPRI, r3
    a8c6:	f3bf 8f6f 	isb	sy
    {
        usbd_errata_187_211_end();
    }
}
    a8ca:	bd10      	pop	{r4, pc}
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    a8cc:	4a08      	ldr	r2, [pc, #32]	; (a8f0 <usbd_enable+0x124>)
    a8ce:	2103      	movs	r1, #3
    a8d0:	6011      	str	r1, [r2, #0]
    a8d2:	e793      	b.n	a7fc <usbd_enable+0x30>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    a8d4:	4a07      	ldr	r2, [pc, #28]	; (a8f4 <usbd_enable+0x128>)
    a8d6:	21c0      	movs	r1, #192	; 0xc0
    a8d8:	6011      	str	r1, [r2, #0]
    a8da:	e7aa      	b.n	a832 <usbd_enable+0x66>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    a8dc:	4a05      	ldr	r2, [pc, #20]	; (a8f4 <usbd_enable+0x128>)
    a8de:	2100      	movs	r1, #0
    a8e0:	6011      	str	r1, [r2, #0]
    a8e2:	e7d4      	b.n	a88e <usbd_enable+0xc2>
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    a8e4:	4a02      	ldr	r2, [pc, #8]	; (a8f0 <usbd_enable+0x124>)
    a8e6:	2100      	movs	r1, #0
    a8e8:	6011      	str	r1, [r2, #0]
    a8ea:	e7ea      	b.n	a8c2 <usbd_enable+0xf6>
    a8ec:	4006ec00 	.word	0x4006ec00
    a8f0:	4006ed14 	.word	0x4006ed14
    a8f4:	4006ec14 	.word	0x4006ec14
    a8f8:	40027000 	.word	0x40027000

0000a8fc <usbd_ep_data_handler>:
{
    a8fc:	b530      	push	{r4, r5, lr}
    a8fe:	b083      	sub	sp, #12
    a900:	4604      	mov	r4, r0
    a902:	460d      	mov	r5, r1
    m_ep_ready |= (1U << bitpos);
    a904:	2301      	movs	r3, #1
    a906:	fa03 f201 	lsl.w	r2, r3, r1
    a90a:	495c      	ldr	r1, [pc, #368]	; (aa7c <usbd_ep_data_handler+0x180>)
    a90c:	680b      	ldr	r3, [r1, #0]
    a90e:	4313      	orrs	r3, r2
    a910:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    a912:	f010 0f80 	tst.w	r0, #128	; 0x80
    a916:	d114      	bne.n	a942 <usbd_ep_data_handler+0x46>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    a918:	4b59      	ldr	r3, [pc, #356]	; (aa80 <usbd_ep_data_handler+0x184>)
    a91a:	6819      	ldr	r1, [r3, #0]
    a91c:	fa21 f505 	lsr.w	r5, r1, r5
    a920:	f015 0f01 	tst.w	r5, #1
    a924:	d10b      	bne.n	a93e <usbd_ep_data_handler+0x42>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    a926:	2306      	movs	r3, #6
    a928:	f88d 3004 	strb.w	r3, [sp, #4]
    a92c:	f88d 0006 	strb.w	r0, [sp, #6]
    a930:	2301      	movs	r3, #1
    a932:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    a936:	4b53      	ldr	r3, [pc, #332]	; (aa84 <usbd_ep_data_handler+0x188>)
    a938:	681b      	ldr	r3, [r3, #0]
    a93a:	a801      	add	r0, sp, #4
    a93c:	4798      	blx	r3
}
    a93e:	b003      	add	sp, #12
    a940:	bd30      	pop	{r4, r5, pc}
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    a942:	f000 030f 	and.w	r3, r0, #15
    a946:	4a50      	ldr	r2, [pc, #320]	; (aa88 <usbd_ep_data_handler+0x18c>)
    a948:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    a94c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a950:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    a954:	681a      	ldr	r2, [r3, #0]
    if (ret)
    a956:	b112      	cbz	r2, a95e <usbd_ep_data_handler+0x62>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    a958:	2100      	movs	r1, #0
    a95a:	6019      	str	r1, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    a95c:	681b      	ldr	r3, [r3, #0]
        if (nrf_usbd_event_get_and_clear(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)))
    a95e:	2a00      	cmp	r2, #0
    a960:	d047      	beq.n	a9f2 <usbd_ep_data_handler+0xf6>
            if (ep != NRFX_USBD_EPIN0)
    a962:	2c80      	cmp	r4, #128	; 0x80
    a964:	d05b      	beq.n	aa1e <usbd_ep_data_handler+0x122>
}

/* Errata: USBD cannot receive tasks during DMA. **/
static inline bool nrfx_usbd_errata_199(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
    a966:	f7ff fe8b 	bl	a680 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    a96a:	b110      	cbz	r0, a972 <usbd_ep_data_handler+0x76>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    a96c:	4b47      	ldr	r3, [pc, #284]	; (aa8c <usbd_ep_data_handler+0x190>)
    a96e:	2200      	movs	r2, #0
    a970:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    a972:	4b47      	ldr	r3, [pc, #284]	; (aa90 <usbd_ep_data_handler+0x194>)
    a974:	2200      	movs	r2, #0
    a976:	701a      	strb	r2, [r3, #0]
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    a978:	b263      	sxtb	r3, r4
    a97a:	4293      	cmp	r3, r2
    a97c:	db21      	blt.n	a9c2 <usbd_ep_data_handler+0xc6>
    a97e:	4945      	ldr	r1, [pc, #276]	; (aa94 <usbd_ep_data_handler+0x198>)
        NRF_USBD_EP_NR_GET(ep));
    a980:	f004 020f 	and.w	r2, r4, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    a984:	0110      	lsls	r0, r2, #4
    a986:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    a98a:	7b92      	ldrb	r2, [r2, #14]
    a98c:	2a03      	cmp	r2, #3
    a98e:	d01a      	beq.n	a9c6 <usbd_ep_data_handler+0xca>
    else if (p_state->handler.feeder == NULL)
    a990:	580a      	ldr	r2, [r1, r0]
    a992:	bb72      	cbnz	r2, a9f2 <usbd_ep_data_handler+0xf6>
    return NRFX_USBD_EP_BITPOS(ep);
    a994:	2b00      	cmp	r3, #0
    a996:	db00      	blt.n	a99a <usbd_ep_data_handler+0x9e>
    a998:	2210      	movs	r2, #16
    a99a:	f003 030f 	and.w	r3, r3, #15
    a99e:	4413      	add	r3, r2
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a9a0:	2201      	movs	r2, #1
    a9a2:	fa02 f303 	lsl.w	r3, r2, r3
    a9a6:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a9a8:	4a35      	ldr	r2, [pc, #212]	; (aa80 <usbd_ep_data_handler+0x184>)
    a9aa:	f3bf 8f5b 	dmb	ish
    a9ae:	e852 1f00 	ldrex	r1, [r2]
    a9b2:	4019      	ands	r1, r3
    a9b4:	e842 1000 	strex	r0, r1, [r2]
    a9b8:	2800      	cmp	r0, #0
    a9ba:	d1f8      	bne.n	a9ae <usbd_ep_data_handler+0xb2>
    a9bc:	f3bf 8f5b 	dmb	ish
}
    a9c0:	e017      	b.n	a9f2 <usbd_ep_data_handler+0xf6>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    a9c2:	4935      	ldr	r1, [pc, #212]	; (aa98 <usbd_ep_data_handler+0x19c>)
    a9c4:	e7dc      	b.n	a980 <usbd_ep_data_handler+0x84>
    return NRFX_USBD_EP_BITPOS(ep);
    a9c6:	2b00      	cmp	r3, #0
    a9c8:	db27      	blt.n	aa1a <usbd_ep_data_handler+0x11e>
    a9ca:	2210      	movs	r2, #16
    a9cc:	f003 030f 	and.w	r3, r3, #15
    a9d0:	4413      	add	r3, r2
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a9d2:	2201      	movs	r2, #1
    a9d4:	fa02 f303 	lsl.w	r3, r2, r3
    a9d8:	43db      	mvns	r3, r3
    a9da:	4a29      	ldr	r2, [pc, #164]	; (aa80 <usbd_ep_data_handler+0x184>)
    a9dc:	f3bf 8f5b 	dmb	ish
    a9e0:	e852 1f00 	ldrex	r1, [r2]
    a9e4:	4019      	ands	r1, r3
    a9e6:	e842 1000 	strex	r0, r1, [r2]
    a9ea:	2800      	cmp	r0, #0
    a9ec:	d1f8      	bne.n	a9e0 <usbd_ep_data_handler+0xe4>
    a9ee:	f3bf 8f5b 	dmb	ish
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    a9f2:	4b23      	ldr	r3, [pc, #140]	; (aa80 <usbd_ep_data_handler+0x184>)
    a9f4:	6819      	ldr	r1, [r3, #0]
    a9f6:	fa21 f505 	lsr.w	r5, r1, r5
    a9fa:	f015 0f01 	tst.w	r5, #1
    a9fe:	d19e      	bne.n	a93e <usbd_ep_data_handler+0x42>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    aa00:	2306      	movs	r3, #6
    aa02:	f88d 3004 	strb.w	r3, [sp, #4]
    aa06:	f88d 4006 	strb.w	r4, [sp, #6]
    aa0a:	2300      	movs	r3, #0
    aa0c:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    aa10:	4b1c      	ldr	r3, [pc, #112]	; (aa84 <usbd_ep_data_handler+0x188>)
    aa12:	681b      	ldr	r3, [r3, #0]
    aa14:	a801      	add	r0, sp, #4
    aa16:	4798      	blx	r3
    aa18:	e791      	b.n	a93e <usbd_ep_data_handler+0x42>
    return NRFX_USBD_EP_BITPOS(ep);
    aa1a:	2200      	movs	r2, #0
    aa1c:	e7d6      	b.n	a9cc <usbd_ep_data_handler+0xd0>
    aa1e:	f7ff fe2f 	bl	a680 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    aa22:	b110      	cbz	r0, aa2a <usbd_ep_data_handler+0x12e>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    aa24:	4b19      	ldr	r3, [pc, #100]	; (aa8c <usbd_ep_data_handler+0x190>)
    aa26:	2200      	movs	r2, #0
    aa28:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    aa2a:	4b19      	ldr	r3, [pc, #100]	; (aa90 <usbd_ep_data_handler+0x194>)
    aa2c:	2200      	movs	r2, #0
    aa2e:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    aa30:	4b18      	ldr	r3, [pc, #96]	; (aa94 <usbd_ep_data_handler+0x198>)
    aa32:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
    aa36:	2b03      	cmp	r3, #3
    aa38:	d012      	beq.n	aa60 <usbd_ep_data_handler+0x164>
    else if (p_state->handler.feeder == NULL)
    aa3a:	4b16      	ldr	r3, [pc, #88]	; (aa94 <usbd_ep_data_handler+0x198>)
    aa3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    aa40:	2b00      	cmp	r3, #0
    aa42:	d1d6      	bne.n	a9f2 <usbd_ep_data_handler+0xf6>
    aa44:	4b0e      	ldr	r3, [pc, #56]	; (aa80 <usbd_ep_data_handler+0x184>)
    aa46:	f3bf 8f5b 	dmb	ish
    aa4a:	e853 2f00 	ldrex	r2, [r3]
    aa4e:	f022 0201 	bic.w	r2, r2, #1
    aa52:	e843 2100 	strex	r1, r2, [r3]
    aa56:	2900      	cmp	r1, #0
    aa58:	d1f7      	bne.n	aa4a <usbd_ep_data_handler+0x14e>
    aa5a:	f3bf 8f5b 	dmb	ish
}
    aa5e:	e7c8      	b.n	a9f2 <usbd_ep_data_handler+0xf6>
    aa60:	4b07      	ldr	r3, [pc, #28]	; (aa80 <usbd_ep_data_handler+0x184>)
    aa62:	f3bf 8f5b 	dmb	ish
    aa66:	e853 2f00 	ldrex	r2, [r3]
    aa6a:	f022 0201 	bic.w	r2, r2, #1
    aa6e:	e843 2100 	strex	r1, r2, [r3]
    aa72:	2900      	cmp	r1, #0
    aa74:	d1f7      	bne.n	aa66 <usbd_ep_data_handler+0x16a>
    aa76:	f3bf 8f5b 	dmb	ish
    aa7a:	e7ba      	b.n	a9f2 <usbd_ep_data_handler+0xf6>
    aa7c:	200028f8 	.word	0x200028f8
    aa80:	20002888 	.word	0x20002888
    aa84:	20002a1c 	.word	0x20002a1c
    aa88:	000174a0 	.word	0x000174a0
    aa8c:	40027c1c 	.word	0x40027c1c
    aa90:	20002f80 	.word	0x20002f80
    aa94:	200028fc 	.word	0x200028fc
    aa98:	2000298c 	.word	0x2000298c

0000aa9c <ev_setup_data_handler>:
{
    aa9c:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    aa9e:	4b07      	ldr	r3, [pc, #28]	; (aabc <ev_setup_data_handler+0x20>)
    aaa0:	7818      	ldrb	r0, [r3, #0]
    return NRFX_USBD_EP_BITPOS(ep);
    aaa2:	f993 3000 	ldrsb.w	r3, [r3]
    aaa6:	2b00      	cmp	r3, #0
    aaa8:	db06      	blt.n	aab8 <ev_setup_data_handler+0x1c>
    aaaa:	2110      	movs	r1, #16
    aaac:	f003 030f 	and.w	r3, r3, #15
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    aab0:	4419      	add	r1, r3
    aab2:	f7ff ff23 	bl	a8fc <usbd_ep_data_handler>
}
    aab6:	bd08      	pop	{r3, pc}
    return NRFX_USBD_EP_BITPOS(ep);
    aab8:	2100      	movs	r1, #0
    aaba:	e7f7      	b.n	aaac <ev_setup_data_handler+0x10>
    aabc:	20002f82 	.word	0x20002f82

0000aac0 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    aac0:	b500      	push	{lr}
    aac2:	b083      	sub	sp, #12
    aac4:	f7ff fddc 	bl	a680 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    aac8:	b110      	cbz	r0, aad0 <ev_dma_epout8_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    aaca:	4b16      	ldr	r3, [pc, #88]	; (ab24 <ev_dma_epout8_handler+0x64>)
    aacc:	2200      	movs	r2, #0
    aace:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    aad0:	4b15      	ldr	r3, [pc, #84]	; (ab28 <ev_dma_epout8_handler+0x68>)
    aad2:	2200      	movs	r2, #0
    aad4:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    aad6:	4b15      	ldr	r3, [pc, #84]	; (ab2c <ev_dma_epout8_handler+0x6c>)
    aad8:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
    aadc:	2b03      	cmp	r3, #3
    aade:	d01d      	beq.n	ab1c <ev_dma_epout8_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
    aae0:	4b12      	ldr	r3, [pc, #72]	; (ab2c <ev_dma_epout8_handler+0x6c>)
    aae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    aae6:	b9cb      	cbnz	r3, ab1c <ev_dma_epout8_handler+0x5c>
    aae8:	4b11      	ldr	r3, [pc, #68]	; (ab30 <ev_dma_epout8_handler+0x70>)
    aaea:	f3bf 8f5b 	dmb	ish
    aaee:	e853 2f00 	ldrex	r2, [r3]
    aaf2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    aaf6:	e843 2100 	strex	r1, r2, [r3]
    aafa:	2900      	cmp	r1, #0
    aafc:	d1f7      	bne.n	aaee <ev_dma_epout8_handler+0x2e>
    aafe:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    ab02:	2306      	movs	r3, #6
    ab04:	f88d 3004 	strb.w	r3, [sp, #4]
    ab08:	2308      	movs	r3, #8
    ab0a:	f88d 3006 	strb.w	r3, [sp, #6]
    ab0e:	2300      	movs	r3, #0
    ab10:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    ab14:	4b07      	ldr	r3, [pc, #28]	; (ab34 <ev_dma_epout8_handler+0x74>)
    ab16:	681b      	ldr	r3, [r3, #0]
    ab18:	a801      	add	r0, sp, #4
    ab1a:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    ab1c:	b003      	add	sp, #12
    ab1e:	f85d fb04 	ldr.w	pc, [sp], #4
    ab22:	bf00      	nop
    ab24:	40027c1c 	.word	0x40027c1c
    ab28:	20002f80 	.word	0x20002f80
    ab2c:	200028fc 	.word	0x200028fc
    ab30:	20002888 	.word	0x20002888
    ab34:	20002a1c 	.word	0x20002a1c

0000ab38 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    ab38:	b500      	push	{lr}
    ab3a:	b083      	sub	sp, #12
    ab3c:	f7ff fda0 	bl	a680 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    ab40:	b110      	cbz	r0, ab48 <ev_dma_epin8_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    ab42:	4b1d      	ldr	r3, [pc, #116]	; (abb8 <ev_dma_epin8_handler+0x80>)
    ab44:	2200      	movs	r2, #0
    ab46:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    ab48:	4b1c      	ldr	r3, [pc, #112]	; (abbc <ev_dma_epin8_handler+0x84>)
    ab4a:	2200      	movs	r2, #0
    ab4c:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    ab4e:	4b1c      	ldr	r3, [pc, #112]	; (abc0 <ev_dma_epin8_handler+0x88>)
    ab50:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
    ab54:	2b03      	cmp	r3, #3
    ab56:	d01e      	beq.n	ab96 <ev_dma_epin8_handler+0x5e>
    else if (p_state->handler.feeder == NULL)
    ab58:	4b19      	ldr	r3, [pc, #100]	; (abc0 <ev_dma_epin8_handler+0x88>)
    ab5a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    ab5e:	bb3b      	cbnz	r3, abb0 <ev_dma_epin8_handler+0x78>
    ab60:	4b18      	ldr	r3, [pc, #96]	; (abc4 <ev_dma_epin8_handler+0x8c>)
    ab62:	f3bf 8f5b 	dmb	ish
    ab66:	e853 2f00 	ldrex	r2, [r3]
    ab6a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    ab6e:	e843 2100 	strex	r1, r2, [r3]
    ab72:	2900      	cmp	r1, #0
    ab74:	d1f7      	bne.n	ab66 <ev_dma_epin8_handler+0x2e>
    ab76:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    ab7a:	2306      	movs	r3, #6
    ab7c:	f88d 3004 	strb.w	r3, [sp, #4]
    ab80:	2388      	movs	r3, #136	; 0x88
    ab82:	f88d 3006 	strb.w	r3, [sp, #6]
    ab86:	2300      	movs	r3, #0
    ab88:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    ab8c:	4b0e      	ldr	r3, [pc, #56]	; (abc8 <ev_dma_epin8_handler+0x90>)
    ab8e:	681b      	ldr	r3, [r3, #0]
    ab90:	a801      	add	r0, sp, #4
    ab92:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    ab94:	e00c      	b.n	abb0 <ev_dma_epin8_handler+0x78>
    ab96:	4b0b      	ldr	r3, [pc, #44]	; (abc4 <ev_dma_epin8_handler+0x8c>)
    ab98:	f3bf 8f5b 	dmb	ish
    ab9c:	e853 2f00 	ldrex	r2, [r3]
    aba0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    aba4:	e843 2100 	strex	r1, r2, [r3]
    aba8:	2900      	cmp	r1, #0
    abaa:	d1f7      	bne.n	ab9c <ev_dma_epin8_handler+0x64>
    abac:	f3bf 8f5b 	dmb	ish
    abb0:	b003      	add	sp, #12
    abb2:	f85d fb04 	ldr.w	pc, [sp], #4
    abb6:	bf00      	nop
    abb8:	40027c1c 	.word	0x40027c1c
    abbc:	20002f80 	.word	0x20002f80
    abc0:	200028fc 	.word	0x200028fc
    abc4:	20002888 	.word	0x20002888
    abc8:	20002a1c 	.word	0x20002a1c

0000abcc <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    abcc:	b508      	push	{r3, lr}
    abce:	f7ff fd57 	bl	a680 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    abd2:	b110      	cbz	r0, abda <ev_dma_epin0_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    abd4:	4b15      	ldr	r3, [pc, #84]	; (ac2c <ev_dma_epin0_handler+0x60>)
    abd6:	2200      	movs	r2, #0
    abd8:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    abda:	4b15      	ldr	r3, [pc, #84]	; (ac30 <ev_dma_epin0_handler+0x64>)
    abdc:	2200      	movs	r2, #0
    abde:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    abe0:	4b14      	ldr	r3, [pc, #80]	; (ac34 <ev_dma_epin0_handler+0x68>)
    abe2:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
    abe6:	2b03      	cmp	r3, #3
    abe8:	d004      	beq.n	abf4 <ev_dma_epin0_handler+0x28>
    else if (p_state->handler.feeder == NULL)
    abea:	4b12      	ldr	r3, [pc, #72]	; (ac34 <ev_dma_epin0_handler+0x68>)
    abec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    abf0:	b173      	cbz	r3, ac10 <ev_dma_epin0_handler+0x44>
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    abf2:	bd08      	pop	{r3, pc}
    abf4:	4b10      	ldr	r3, [pc, #64]	; (ac38 <ev_dma_epin0_handler+0x6c>)
    abf6:	f3bf 8f5b 	dmb	ish
    abfa:	e853 2f00 	ldrex	r2, [r3]
    abfe:	f022 0201 	bic.w	r2, r2, #1
    ac02:	e843 2100 	strex	r1, r2, [r3]
    ac06:	2900      	cmp	r1, #0
    ac08:	d1f7      	bne.n	abfa <ev_dma_epin0_handler+0x2e>
    ac0a:	f3bf 8f5b 	dmb	ish
    ac0e:	e7f0      	b.n	abf2 <ev_dma_epin0_handler+0x26>
    ac10:	4b09      	ldr	r3, [pc, #36]	; (ac38 <ev_dma_epin0_handler+0x6c>)
    ac12:	f3bf 8f5b 	dmb	ish
    ac16:	e853 2f00 	ldrex	r2, [r3]
    ac1a:	f022 0201 	bic.w	r2, r2, #1
    ac1e:	e843 2100 	strex	r1, r2, [r3]
    ac22:	2900      	cmp	r1, #0
    ac24:	d1f7      	bne.n	ac16 <ev_dma_epin0_handler+0x4a>
    ac26:	f3bf 8f5b 	dmb	ish
    ac2a:	e7e2      	b.n	abf2 <ev_dma_epin0_handler+0x26>
    ac2c:	40027c1c 	.word	0x40027c1c
    ac30:	20002f80 	.word	0x20002f80
    ac34:	200028fc 	.word	0x200028fc
    ac38:	20002888 	.word	0x20002888

0000ac3c <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    ac3c:	b508      	push	{r3, lr}
    ac3e:	f7ff fd1f 	bl	a680 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    ac42:	b110      	cbz	r0, ac4a <ev_dma_epin7_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    ac44:	4b15      	ldr	r3, [pc, #84]	; (ac9c <ev_dma_epin7_handler+0x60>)
    ac46:	2200      	movs	r2, #0
    ac48:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    ac4a:	4b15      	ldr	r3, [pc, #84]	; (aca0 <ev_dma_epin7_handler+0x64>)
    ac4c:	2200      	movs	r2, #0
    ac4e:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    ac50:	4b14      	ldr	r3, [pc, #80]	; (aca4 <ev_dma_epin7_handler+0x68>)
    ac52:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
    ac56:	2b03      	cmp	r3, #3
    ac58:	d011      	beq.n	ac7e <ev_dma_epin7_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    ac5a:	4b12      	ldr	r3, [pc, #72]	; (aca4 <ev_dma_epin7_handler+0x68>)
    ac5c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    ac60:	b9d3      	cbnz	r3, ac98 <ev_dma_epin7_handler+0x5c>
    ac62:	4b11      	ldr	r3, [pc, #68]	; (aca8 <ev_dma_epin7_handler+0x6c>)
    ac64:	f3bf 8f5b 	dmb	ish
    ac68:	e853 2f00 	ldrex	r2, [r3]
    ac6c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    ac70:	e843 2100 	strex	r1, r2, [r3]
    ac74:	2900      	cmp	r1, #0
    ac76:	d1f7      	bne.n	ac68 <ev_dma_epin7_handler+0x2c>
    ac78:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    ac7c:	e00c      	b.n	ac98 <ev_dma_epin7_handler+0x5c>
    ac7e:	4b0a      	ldr	r3, [pc, #40]	; (aca8 <ev_dma_epin7_handler+0x6c>)
    ac80:	f3bf 8f5b 	dmb	ish
    ac84:	e853 2f00 	ldrex	r2, [r3]
    ac88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    ac8c:	e843 2100 	strex	r1, r2, [r3]
    ac90:	2900      	cmp	r1, #0
    ac92:	d1f7      	bne.n	ac84 <ev_dma_epin7_handler+0x48>
    ac94:	f3bf 8f5b 	dmb	ish
    ac98:	bd08      	pop	{r3, pc}
    ac9a:	bf00      	nop
    ac9c:	40027c1c 	.word	0x40027c1c
    aca0:	20002f80 	.word	0x20002f80
    aca4:	200028fc 	.word	0x200028fc
    aca8:	20002888 	.word	0x20002888

0000acac <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    acac:	b508      	push	{r3, lr}
    acae:	f7ff fce7 	bl	a680 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    acb2:	b110      	cbz	r0, acba <ev_dma_epin5_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    acb4:	4b15      	ldr	r3, [pc, #84]	; (ad0c <ev_dma_epin5_handler+0x60>)
    acb6:	2200      	movs	r2, #0
    acb8:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    acba:	4b15      	ldr	r3, [pc, #84]	; (ad10 <ev_dma_epin5_handler+0x64>)
    acbc:	2200      	movs	r2, #0
    acbe:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    acc0:	4b14      	ldr	r3, [pc, #80]	; (ad14 <ev_dma_epin5_handler+0x68>)
    acc2:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
    acc6:	2b03      	cmp	r3, #3
    acc8:	d011      	beq.n	acee <ev_dma_epin5_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    acca:	4b12      	ldr	r3, [pc, #72]	; (ad14 <ev_dma_epin5_handler+0x68>)
    accc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    acd0:	b9d3      	cbnz	r3, ad08 <ev_dma_epin5_handler+0x5c>
    acd2:	4b11      	ldr	r3, [pc, #68]	; (ad18 <ev_dma_epin5_handler+0x6c>)
    acd4:	f3bf 8f5b 	dmb	ish
    acd8:	e853 2f00 	ldrex	r2, [r3]
    acdc:	f022 0220 	bic.w	r2, r2, #32
    ace0:	e843 2100 	strex	r1, r2, [r3]
    ace4:	2900      	cmp	r1, #0
    ace6:	d1f7      	bne.n	acd8 <ev_dma_epin5_handler+0x2c>
    ace8:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    acec:	e00c      	b.n	ad08 <ev_dma_epin5_handler+0x5c>
    acee:	4b0a      	ldr	r3, [pc, #40]	; (ad18 <ev_dma_epin5_handler+0x6c>)
    acf0:	f3bf 8f5b 	dmb	ish
    acf4:	e853 2f00 	ldrex	r2, [r3]
    acf8:	f022 0220 	bic.w	r2, r2, #32
    acfc:	e843 2100 	strex	r1, r2, [r3]
    ad00:	2900      	cmp	r1, #0
    ad02:	d1f7      	bne.n	acf4 <ev_dma_epin5_handler+0x48>
    ad04:	f3bf 8f5b 	dmb	ish
    ad08:	bd08      	pop	{r3, pc}
    ad0a:	bf00      	nop
    ad0c:	40027c1c 	.word	0x40027c1c
    ad10:	20002f80 	.word	0x20002f80
    ad14:	200028fc 	.word	0x200028fc
    ad18:	20002888 	.word	0x20002888

0000ad1c <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    ad1c:	b508      	push	{r3, lr}
    ad1e:	f7ff fcaf 	bl	a680 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    ad22:	b110      	cbz	r0, ad2a <ev_dma_epin6_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    ad24:	4b15      	ldr	r3, [pc, #84]	; (ad7c <ev_dma_epin6_handler+0x60>)
    ad26:	2200      	movs	r2, #0
    ad28:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    ad2a:	4b15      	ldr	r3, [pc, #84]	; (ad80 <ev_dma_epin6_handler+0x64>)
    ad2c:	2200      	movs	r2, #0
    ad2e:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    ad30:	4b14      	ldr	r3, [pc, #80]	; (ad84 <ev_dma_epin6_handler+0x68>)
    ad32:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
    ad36:	2b03      	cmp	r3, #3
    ad38:	d011      	beq.n	ad5e <ev_dma_epin6_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    ad3a:	4b12      	ldr	r3, [pc, #72]	; (ad84 <ev_dma_epin6_handler+0x68>)
    ad3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    ad40:	b9d3      	cbnz	r3, ad78 <ev_dma_epin6_handler+0x5c>
    ad42:	4b11      	ldr	r3, [pc, #68]	; (ad88 <ev_dma_epin6_handler+0x6c>)
    ad44:	f3bf 8f5b 	dmb	ish
    ad48:	e853 2f00 	ldrex	r2, [r3]
    ad4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    ad50:	e843 2100 	strex	r1, r2, [r3]
    ad54:	2900      	cmp	r1, #0
    ad56:	d1f7      	bne.n	ad48 <ev_dma_epin6_handler+0x2c>
    ad58:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    ad5c:	e00c      	b.n	ad78 <ev_dma_epin6_handler+0x5c>
    ad5e:	4b0a      	ldr	r3, [pc, #40]	; (ad88 <ev_dma_epin6_handler+0x6c>)
    ad60:	f3bf 8f5b 	dmb	ish
    ad64:	e853 2f00 	ldrex	r2, [r3]
    ad68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    ad6c:	e843 2100 	strex	r1, r2, [r3]
    ad70:	2900      	cmp	r1, #0
    ad72:	d1f7      	bne.n	ad64 <ev_dma_epin6_handler+0x48>
    ad74:	f3bf 8f5b 	dmb	ish
    ad78:	bd08      	pop	{r3, pc}
    ad7a:	bf00      	nop
    ad7c:	40027c1c 	.word	0x40027c1c
    ad80:	20002f80 	.word	0x20002f80
    ad84:	200028fc 	.word	0x200028fc
    ad88:	20002888 	.word	0x20002888

0000ad8c <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    ad8c:	b508      	push	{r3, lr}
    ad8e:	f7ff fc77 	bl	a680 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    ad92:	b110      	cbz	r0, ad9a <ev_dma_epin1_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    ad94:	4b15      	ldr	r3, [pc, #84]	; (adec <ev_dma_epin1_handler+0x60>)
    ad96:	2200      	movs	r2, #0
    ad98:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    ad9a:	4b15      	ldr	r3, [pc, #84]	; (adf0 <ev_dma_epin1_handler+0x64>)
    ad9c:	2200      	movs	r2, #0
    ad9e:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    ada0:	4b14      	ldr	r3, [pc, #80]	; (adf4 <ev_dma_epin1_handler+0x68>)
    ada2:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
    ada6:	2b03      	cmp	r3, #3
    ada8:	d011      	beq.n	adce <ev_dma_epin1_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    adaa:	4b12      	ldr	r3, [pc, #72]	; (adf4 <ev_dma_epin1_handler+0x68>)
    adac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    adb0:	b9d3      	cbnz	r3, ade8 <ev_dma_epin1_handler+0x5c>
    adb2:	4b11      	ldr	r3, [pc, #68]	; (adf8 <ev_dma_epin1_handler+0x6c>)
    adb4:	f3bf 8f5b 	dmb	ish
    adb8:	e853 2f00 	ldrex	r2, [r3]
    adbc:	f022 0202 	bic.w	r2, r2, #2
    adc0:	e843 2100 	strex	r1, r2, [r3]
    adc4:	2900      	cmp	r1, #0
    adc6:	d1f7      	bne.n	adb8 <ev_dma_epin1_handler+0x2c>
    adc8:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    adcc:	e00c      	b.n	ade8 <ev_dma_epin1_handler+0x5c>
    adce:	4b0a      	ldr	r3, [pc, #40]	; (adf8 <ev_dma_epin1_handler+0x6c>)
    add0:	f3bf 8f5b 	dmb	ish
    add4:	e853 2f00 	ldrex	r2, [r3]
    add8:	f022 0202 	bic.w	r2, r2, #2
    addc:	e843 2100 	strex	r1, r2, [r3]
    ade0:	2900      	cmp	r1, #0
    ade2:	d1f7      	bne.n	add4 <ev_dma_epin1_handler+0x48>
    ade4:	f3bf 8f5b 	dmb	ish
    ade8:	bd08      	pop	{r3, pc}
    adea:	bf00      	nop
    adec:	40027c1c 	.word	0x40027c1c
    adf0:	20002f80 	.word	0x20002f80
    adf4:	200028fc 	.word	0x200028fc
    adf8:	20002888 	.word	0x20002888

0000adfc <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    adfc:	b508      	push	{r3, lr}
    adfe:	f7ff fc3f 	bl	a680 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    ae02:	b110      	cbz	r0, ae0a <ev_dma_epin2_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    ae04:	4b15      	ldr	r3, [pc, #84]	; (ae5c <ev_dma_epin2_handler+0x60>)
    ae06:	2200      	movs	r2, #0
    ae08:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    ae0a:	4b15      	ldr	r3, [pc, #84]	; (ae60 <ev_dma_epin2_handler+0x64>)
    ae0c:	2200      	movs	r2, #0
    ae0e:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    ae10:	4b14      	ldr	r3, [pc, #80]	; (ae64 <ev_dma_epin2_handler+0x68>)
    ae12:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
    ae16:	2b03      	cmp	r3, #3
    ae18:	d011      	beq.n	ae3e <ev_dma_epin2_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    ae1a:	4b12      	ldr	r3, [pc, #72]	; (ae64 <ev_dma_epin2_handler+0x68>)
    ae1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    ae20:	b9d3      	cbnz	r3, ae58 <ev_dma_epin2_handler+0x5c>
    ae22:	4b11      	ldr	r3, [pc, #68]	; (ae68 <ev_dma_epin2_handler+0x6c>)
    ae24:	f3bf 8f5b 	dmb	ish
    ae28:	e853 2f00 	ldrex	r2, [r3]
    ae2c:	f022 0204 	bic.w	r2, r2, #4
    ae30:	e843 2100 	strex	r1, r2, [r3]
    ae34:	2900      	cmp	r1, #0
    ae36:	d1f7      	bne.n	ae28 <ev_dma_epin2_handler+0x2c>
    ae38:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    ae3c:	e00c      	b.n	ae58 <ev_dma_epin2_handler+0x5c>
    ae3e:	4b0a      	ldr	r3, [pc, #40]	; (ae68 <ev_dma_epin2_handler+0x6c>)
    ae40:	f3bf 8f5b 	dmb	ish
    ae44:	e853 2f00 	ldrex	r2, [r3]
    ae48:	f022 0204 	bic.w	r2, r2, #4
    ae4c:	e843 2100 	strex	r1, r2, [r3]
    ae50:	2900      	cmp	r1, #0
    ae52:	d1f7      	bne.n	ae44 <ev_dma_epin2_handler+0x48>
    ae54:	f3bf 8f5b 	dmb	ish
    ae58:	bd08      	pop	{r3, pc}
    ae5a:	bf00      	nop
    ae5c:	40027c1c 	.word	0x40027c1c
    ae60:	20002f80 	.word	0x20002f80
    ae64:	200028fc 	.word	0x200028fc
    ae68:	20002888 	.word	0x20002888

0000ae6c <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    ae6c:	b508      	push	{r3, lr}
    ae6e:	f7ff fc07 	bl	a680 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    ae72:	b110      	cbz	r0, ae7a <ev_dma_epin3_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    ae74:	4b15      	ldr	r3, [pc, #84]	; (aecc <ev_dma_epin3_handler+0x60>)
    ae76:	2200      	movs	r2, #0
    ae78:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    ae7a:	4b15      	ldr	r3, [pc, #84]	; (aed0 <ev_dma_epin3_handler+0x64>)
    ae7c:	2200      	movs	r2, #0
    ae7e:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    ae80:	4b14      	ldr	r3, [pc, #80]	; (aed4 <ev_dma_epin3_handler+0x68>)
    ae82:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
    ae86:	2b03      	cmp	r3, #3
    ae88:	d011      	beq.n	aeae <ev_dma_epin3_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    ae8a:	4b12      	ldr	r3, [pc, #72]	; (aed4 <ev_dma_epin3_handler+0x68>)
    ae8c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    ae90:	b9d3      	cbnz	r3, aec8 <ev_dma_epin3_handler+0x5c>
    ae92:	4b11      	ldr	r3, [pc, #68]	; (aed8 <ev_dma_epin3_handler+0x6c>)
    ae94:	f3bf 8f5b 	dmb	ish
    ae98:	e853 2f00 	ldrex	r2, [r3]
    ae9c:	f022 0208 	bic.w	r2, r2, #8
    aea0:	e843 2100 	strex	r1, r2, [r3]
    aea4:	2900      	cmp	r1, #0
    aea6:	d1f7      	bne.n	ae98 <ev_dma_epin3_handler+0x2c>
    aea8:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    aeac:	e00c      	b.n	aec8 <ev_dma_epin3_handler+0x5c>
    aeae:	4b0a      	ldr	r3, [pc, #40]	; (aed8 <ev_dma_epin3_handler+0x6c>)
    aeb0:	f3bf 8f5b 	dmb	ish
    aeb4:	e853 2f00 	ldrex	r2, [r3]
    aeb8:	f022 0208 	bic.w	r2, r2, #8
    aebc:	e843 2100 	strex	r1, r2, [r3]
    aec0:	2900      	cmp	r1, #0
    aec2:	d1f7      	bne.n	aeb4 <ev_dma_epin3_handler+0x48>
    aec4:	f3bf 8f5b 	dmb	ish
    aec8:	bd08      	pop	{r3, pc}
    aeca:	bf00      	nop
    aecc:	40027c1c 	.word	0x40027c1c
    aed0:	20002f80 	.word	0x20002f80
    aed4:	200028fc 	.word	0x200028fc
    aed8:	20002888 	.word	0x20002888

0000aedc <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    aedc:	b508      	push	{r3, lr}
    aede:	f7ff fbcf 	bl	a680 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    aee2:	b110      	cbz	r0, aeea <ev_dma_epin4_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    aee4:	4b15      	ldr	r3, [pc, #84]	; (af3c <ev_dma_epin4_handler+0x60>)
    aee6:	2200      	movs	r2, #0
    aee8:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    aeea:	4b15      	ldr	r3, [pc, #84]	; (af40 <ev_dma_epin4_handler+0x64>)
    aeec:	2200      	movs	r2, #0
    aeee:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    aef0:	4b14      	ldr	r3, [pc, #80]	; (af44 <ev_dma_epin4_handler+0x68>)
    aef2:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
    aef6:	2b03      	cmp	r3, #3
    aef8:	d011      	beq.n	af1e <ev_dma_epin4_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    aefa:	4b12      	ldr	r3, [pc, #72]	; (af44 <ev_dma_epin4_handler+0x68>)
    aefc:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    af00:	b9d3      	cbnz	r3, af38 <ev_dma_epin4_handler+0x5c>
    af02:	4b11      	ldr	r3, [pc, #68]	; (af48 <ev_dma_epin4_handler+0x6c>)
    af04:	f3bf 8f5b 	dmb	ish
    af08:	e853 2f00 	ldrex	r2, [r3]
    af0c:	f022 0210 	bic.w	r2, r2, #16
    af10:	e843 2100 	strex	r1, r2, [r3]
    af14:	2900      	cmp	r1, #0
    af16:	d1f7      	bne.n	af08 <ev_dma_epin4_handler+0x2c>
    af18:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    af1c:	e00c      	b.n	af38 <ev_dma_epin4_handler+0x5c>
    af1e:	4b0a      	ldr	r3, [pc, #40]	; (af48 <ev_dma_epin4_handler+0x6c>)
    af20:	f3bf 8f5b 	dmb	ish
    af24:	e853 2f00 	ldrex	r2, [r3]
    af28:	f022 0210 	bic.w	r2, r2, #16
    af2c:	e843 2100 	strex	r1, r2, [r3]
    af30:	2900      	cmp	r1, #0
    af32:	d1f7      	bne.n	af24 <ev_dma_epin4_handler+0x48>
    af34:	f3bf 8f5b 	dmb	ish
    af38:	bd08      	pop	{r3, pc}
    af3a:	bf00      	nop
    af3c:	40027c1c 	.word	0x40027c1c
    af40:	20002f80 	.word	0x20002f80
    af44:	200028fc 	.word	0x200028fc
    af48:	20002888 	.word	0x20002888

0000af4c <nrfx_usbd_isoinconfig_set>:
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    af4c:	4b01      	ldr	r3, [pc, #4]	; (af54 <nrfx_usbd_isoinconfig_set+0x8>)
    af4e:	f8c3 0530 	str.w	r0, [r3, #1328]	; 0x530
}
    af52:	4770      	bx	lr
    af54:	40027000 	.word	0x40027000

0000af58 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
    af58:	2300      	movs	r3, #0
    af5a:	4a02      	ldr	r2, [pc, #8]	; (af64 <nrfx_usbd_uninit+0xc>)
    af5c:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    af5e:	4a02      	ldr	r2, [pc, #8]	; (af68 <nrfx_usbd_uninit+0x10>)
    af60:	7013      	strb	r3, [r2, #0]
    return;
}
    af62:	4770      	bx	lr
    af64:	20002a1c 	.word	0x20002a1c
    af68:	20002f81 	.word	0x20002f81

0000af6c <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
    af6c:	b510      	push	{r4, lr}
    p_reg->EVENTCAUSE = flags;
    af6e:	4b41      	ldr	r3, [pc, #260]	; (b074 <nrfx_usbd_enable+0x108>)
    af70:	f44f 6200 	mov.w	r2, #2048	; 0x800
    af74:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    af78:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    /* Prepare for READY event receiving */
    nrf_usbd_eventcause_clear(NRF_USBD, NRF_USBD_EVENTCAUSE_READY_MASK);

    usbd_enable();
    af7c:	f7ff fc26 	bl	a7cc <usbd_enable>
}

/* Errata: Unexpected behavior after reset. **/
static inline bool nrfx_usbd_errata_223(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_223();
    af80:	f008 ff96 	bl	13eb0 <nrf52_errata_223>

    if (nrfx_usbd_errata_223() && m_first_enable)
    af84:	b118      	cbz	r0, af8e <nrfx_usbd_enable+0x22>
    af86:	4b3c      	ldr	r3, [pc, #240]	; (b078 <nrfx_usbd_enable+0x10c>)
    af88:	781b      	ldrb	r3, [r3, #0]
    af8a:	2b00      	cmp	r3, #0
    af8c:	d15f      	bne.n	b04e <nrfx_usbd_enable+0xe2>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    af8e:	f7ff fb63 	bl	a658 <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    af92:	b1b8      	cbz	r0, afc4 <nrfx_usbd_enable+0x58>
	__asm__ volatile(
    af94:	f04f 0220 	mov.w	r2, #32
    af98:	f3ef 8311 	mrs	r3, BASEPRI
    af9c:	f382 8812 	msr	BASEPRI_MAX, r2
    afa0:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    afa4:	4a35      	ldr	r2, [pc, #212]	; (b07c <nrfx_usbd_enable+0x110>)
    afa6:	6812      	ldr	r2, [r2, #0]
    afa8:	2a00      	cmp	r2, #0
    afaa:	d15b      	bne.n	b064 <nrfx_usbd_enable+0xf8>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    afac:	4a33      	ldr	r2, [pc, #204]	; (b07c <nrfx_usbd_enable+0x110>)
    afae:	f249 3175 	movw	r1, #37749	; 0x9375
    afb2:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    afb4:	4832      	ldr	r0, [pc, #200]	; (b080 <nrfx_usbd_enable+0x114>)
    afb6:	2403      	movs	r4, #3
    afb8:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    afba:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    afbc:	f383 8811 	msr	BASEPRI, r3
    afc0:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_166();
    afc4:	f7ff fb34 	bl	a630 <nrf52_errata_166>
#endif
    {
        usbd_errata_187_211_begin();
    }

    if (nrfx_usbd_errata_166())
    afc8:	b150      	cbz	r0, afe0 <nrfx_usbd_enable+0x74>
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
    afca:	4b2e      	ldr	r3, [pc, #184]	; (b084 <nrfx_usbd_enable+0x118>)
    afcc:	f240 72e3 	movw	r2, #2019	; 0x7e3
    afd0:	601a      	str	r2, [r3, #0]
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
    afd2:	3304      	adds	r3, #4
    afd4:	2240      	movs	r2, #64	; 0x40
    afd6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
    afd8:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    afdc:	f3bf 8f4f 	dsb	sy
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    afe0:	4b24      	ldr	r3, [pc, #144]	; (b074 <nrfx_usbd_enable+0x108>)
    afe2:	2280      	movs	r2, #128	; 0x80
    afe4:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_ZERODATA);
    }
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    afe8:	2000      	movs	r0, #0
    afea:	f7ff ffaf 	bl	af4c <nrfx_usbd_isoinconfig_set>
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    afee:	4b26      	ldr	r3, [pc, #152]	; (b088 <nrfx_usbd_enable+0x11c>)
    aff0:	f240 12ff 	movw	r2, #511	; 0x1ff
    aff4:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
    aff6:	4b25      	ldr	r3, [pc, #148]	; (b08c <nrfx_usbd_enable+0x120>)
    aff8:	2200      	movs	r2, #0
    affa:	601a      	str	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
    affc:	f7ff fb40 	bl	a680 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    b000:	b110      	cbz	r0, b008 <nrfx_usbd_enable+0x9c>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    b002:	4b23      	ldr	r3, [pc, #140]	; (b090 <nrfx_usbd_enable+0x124>)
    b004:	2200      	movs	r2, #0
    b006:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    b008:	2300      	movs	r3, #0
    b00a:	4a22      	ldr	r2, [pc, #136]	; (b094 <nrfx_usbd_enable+0x128>)
    b00c:	7013      	strb	r3, [r2, #0]
    usbd_dma_pending_clear();
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    b00e:	4a22      	ldr	r2, [pc, #136]	; (b098 <nrfx_usbd_enable+0x12c>)
    b010:	7013      	strb	r3, [r2, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    b012:	4b22      	ldr	r3, [pc, #136]	; (b09c <nrfx_usbd_enable+0x130>)
    b014:	2202      	movs	r2, #2
    b016:	701a      	strb	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    b018:	f7ff fb1e 	bl	a658 <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    b01c:	b1b0      	cbz	r0, b04c <nrfx_usbd_enable+0xe0>
	__asm__ volatile(
    b01e:	f04f 0220 	mov.w	r2, #32
    b022:	f3ef 8311 	mrs	r3, BASEPRI
    b026:	f382 8812 	msr	BASEPRI_MAX, r2
    b02a:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    b02e:	4a13      	ldr	r2, [pc, #76]	; (b07c <nrfx_usbd_enable+0x110>)
    b030:	6812      	ldr	r2, [r2, #0]
    b032:	b9da      	cbnz	r2, b06c <nrfx_usbd_enable+0x100>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    b034:	4a11      	ldr	r2, [pc, #68]	; (b07c <nrfx_usbd_enable+0x110>)
    b036:	f249 3175 	movw	r1, #37749	; 0x9375
    b03a:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    b03c:	4810      	ldr	r0, [pc, #64]	; (b080 <nrfx_usbd_enable+0x114>)
    b03e:	2400      	movs	r4, #0
    b040:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    b042:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    b044:	f383 8811 	msr	BASEPRI, r3
    b048:	f3bf 8f6f 	isb	sy
#endif
    {
        usbd_errata_187_211_end();
    }
}
    b04c:	bd10      	pop	{r4, pc}
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    b04e:	4b09      	ldr	r3, [pc, #36]	; (b074 <nrfx_usbd_enable+0x108>)
    b050:	2400      	movs	r4, #0
    b052:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    b056:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
         usbd_enable();
    b05a:	f7ff fbb7 	bl	a7cc <usbd_enable>
         m_first_enable = false;
    b05e:	4b06      	ldr	r3, [pc, #24]	; (b078 <nrfx_usbd_enable+0x10c>)
    b060:	701c      	strb	r4, [r3, #0]
    b062:	e794      	b.n	af8e <nrfx_usbd_enable+0x22>
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    b064:	4a06      	ldr	r2, [pc, #24]	; (b080 <nrfx_usbd_enable+0x114>)
    b066:	2103      	movs	r1, #3
    b068:	6011      	str	r1, [r2, #0]
    b06a:	e7a7      	b.n	afbc <nrfx_usbd_enable+0x50>
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    b06c:	4a04      	ldr	r2, [pc, #16]	; (b080 <nrfx_usbd_enable+0x114>)
    b06e:	2100      	movs	r1, #0
    b070:	6011      	str	r1, [r2, #0]
    b072:	e7e7      	b.n	b044 <nrfx_usbd_enable+0xd8>
    b074:	40027000 	.word	0x40027000
    b078:	20000324 	.word	0x20000324
    b07c:	4006ec00 	.word	0x4006ec00
    b080:	4006ed14 	.word	0x4006ed14
    b084:	40027800 	.word	0x40027800
    b088:	200028f8 	.word	0x200028f8
    b08c:	20002888 	.word	0x20002888
    b090:	40027c1c 	.word	0x40027c1c
    b094:	20002f80 	.word	0x20002f80
    b098:	20002f82 	.word	0x20002f82
    b09c:	20002f81 	.word	0x20002f81

0000b0a0 <nrfx_usbd_start>:
    }
#endif
}

void nrfx_usbd_start(bool enable_sof)
{
    b0a0:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
    b0a2:	4b09      	ldr	r3, [pc, #36]	; (b0c8 <nrfx_usbd_start+0x28>)
    b0a4:	2200      	movs	r2, #0
    b0a6:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_ENDEPOUT0_MASK    |
       NRF_USBD_INT_USBEVENT_MASK     |
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof)
    b0a8:	b960      	cbnz	r0, b0c4 <nrfx_usbd_start+0x24>
    uint32_t ints_to_enable =
    b0aa:	4b08      	ldr	r3, [pc, #32]	; (b0cc <nrfx_usbd_start+0x2c>)
    p_reg->INTENSET = mask;
    b0ac:	4c08      	ldr	r4, [pc, #32]	; (b0d0 <nrfx_usbd_start+0x30>)
    b0ae:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    b0b2:	2027      	movs	r0, #39	; 0x27
    b0b4:	f7fa f820 	bl	50f8 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    b0b8:	2301      	movs	r3, #1
    b0ba:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    b0be:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
    b0c2:	bd10      	pop	{r4, pc}
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
    b0c4:	4b03      	ldr	r3, [pc, #12]	; (b0d4 <nrfx_usbd_start+0x34>)
    b0c6:	e7f1      	b.n	b0ac <nrfx_usbd_start+0xc>
    b0c8:	20002f7f 	.word	0x20002f7f
    b0cc:	01c01407 	.word	0x01c01407
    b0d0:	40027000 	.word	0x40027000
    b0d4:	01e01407 	.word	0x01e01407

0000b0d8 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    b0d8:	4b03      	ldr	r3, [pc, #12]	; (b0e8 <nrfx_usbd_is_enabled+0x10>)
    b0da:	7818      	ldrb	r0, [r3, #0]
}
    b0dc:	2801      	cmp	r0, #1
    b0de:	bf94      	ite	ls
    b0e0:	2000      	movls	r0, #0
    b0e2:	2001      	movhi	r0, #1
    b0e4:	4770      	bx	lr
    b0e6:	bf00      	nop
    b0e8:	20002f81 	.word	0x20002f81

0000b0ec <nrfx_usbd_ep_max_packet_size_set>:
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    b0ec:	f010 0f80 	tst.w	r0, #128	; 0x80
    b0f0:	d106      	bne.n	b100 <nrfx_usbd_ep_max_packet_size_set+0x14>
    b0f2:	4b04      	ldr	r3, [pc, #16]	; (b104 <nrfx_usbd_ep_max_packet_size_set+0x18>)
        NRF_USBD_EP_NR_GET(ep));
    b0f4:	f000 000f 	and.w	r0, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    b0f8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    /* Packet size cannot be higher than maximum buffer size */
    NRFX_ASSERT((NRF_USBD_EPISO_CHECK(ep) && (size <= usbd_ep_iso_capacity(ep))) ||
                (!NRF_USBD_EPISO_CHECK(ep) && (size <= NRFX_USBD_EPSIZE)));

    usbd_ep_state_t * p_state = ep_state_access(ep);
    p_state->max_packet_size = size;
    b0fc:	8181      	strh	r1, [r0, #12]
}
    b0fe:	4770      	bx	lr
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    b100:	4b01      	ldr	r3, [pc, #4]	; (b108 <nrfx_usbd_ep_max_packet_size_set+0x1c>)
    b102:	e7f7      	b.n	b0f4 <nrfx_usbd_ep_max_packet_size_set+0x8>
    b104:	200028fc 	.word	0x200028fc
    b108:	2000298c 	.word	0x2000298c

0000b10c <nrfx_usbd_init>:
{
    b10c:	b570      	push	{r4, r5, r6, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    b10e:	4b25      	ldr	r3, [pc, #148]	; (b1a4 <nrfx_usbd_init+0x98>)
    b110:	781c      	ldrb	r4, [r3, #0]
    b112:	2c00      	cmp	r4, #0
    b114:	d144      	bne.n	b1a0 <nrfx_usbd_init+0x94>
    m_event_handler = event_handler;
    b116:	4b24      	ldr	r3, [pc, #144]	; (b1a8 <nrfx_usbd_init+0x9c>)
    b118:	6018      	str	r0, [r3, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    b11a:	4b22      	ldr	r3, [pc, #136]	; (b1a4 <nrfx_usbd_init+0x98>)
    b11c:	2201      	movs	r2, #1
    b11e:	701a      	strb	r2, [r3, #0]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    b120:	4625      	mov	r5, r4
    b122:	e012      	b.n	b14a <nrfx_usbd_init+0x3e>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    b124:	2140      	movs	r1, #64	; 0x40
    b126:	4630      	mov	r0, r6
    b128:	f7ff ffe0 	bl	b0ec <nrfx_usbd_ep_max_packet_size_set>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    b12c:	f016 0f80 	tst.w	r6, #128	; 0x80
    b130:	d115      	bne.n	b15e <nrfx_usbd_init+0x52>
    b132:	491e      	ldr	r1, [pc, #120]	; (b1ac <nrfx_usbd_init+0xa0>)
        NRF_USBD_EP_NR_GET(ep));
    b134:	f005 030f 	and.w	r3, r5, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    b138:	0118      	lsls	r0, r3, #4
    b13a:	eb01 1303 	add.w	r3, r1, r3, lsl #4
        p_state->status = NRFX_USBD_EP_OK;
    b13e:	2200      	movs	r2, #0
    b140:	739a      	strb	r2, [r3, #14]
        p_state->handler.feeder = NULL;
    b142:	500a      	str	r2, [r1, r0]
        p_state->transfer_cnt = 0;
    b144:	609a      	str	r2, [r3, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    b146:	3501      	adds	r5, #1
    b148:	b2ed      	uxtb	r5, r5
    b14a:	2d08      	cmp	r5, #8
    b14c:	d81c      	bhi.n	b188 <nrfx_usbd_init+0x7c>
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    b14e:	f045 0680 	orr.w	r6, r5, #128	; 0x80
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    b152:	f015 0f08 	tst.w	r5, #8
    b156:	d0e5      	beq.n	b124 <nrfx_usbd_init+0x18>
    b158:	f240 11ff 	movw	r1, #511	; 0x1ff
    b15c:	e7e3      	b.n	b126 <nrfx_usbd_init+0x1a>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    b15e:	4914      	ldr	r1, [pc, #80]	; (b1b0 <nrfx_usbd_init+0xa4>)
    b160:	e7e8      	b.n	b134 <nrfx_usbd_init+0x28>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    b162:	2140      	movs	r1, #64	; 0x40
    b164:	4620      	mov	r0, r4
    b166:	f7ff ffc1 	bl	b0ec <nrfx_usbd_ep_max_packet_size_set>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    b16a:	f014 0f80 	tst.w	r4, #128	; 0x80
    b16e:	d113      	bne.n	b198 <nrfx_usbd_init+0x8c>
    b170:	490e      	ldr	r1, [pc, #56]	; (b1ac <nrfx_usbd_init+0xa0>)
        NRF_USBD_EP_NR_GET(ep));
    b172:	f004 030f 	and.w	r3, r4, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    b176:	0118      	lsls	r0, r3, #4
    b178:	eb01 1303 	add.w	r3, r1, r3, lsl #4
        p_state->status = NRFX_USBD_EP_OK;
    b17c:	2200      	movs	r2, #0
    b17e:	739a      	strb	r2, [r3, #14]
        p_state->handler.consumer = NULL;
    b180:	500a      	str	r2, [r1, r0]
        p_state->transfer_cnt = 0;
    b182:	609a      	str	r2, [r3, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    b184:	3401      	adds	r4, #1
    b186:	b2e4      	uxtb	r4, r4
    b188:	2c08      	cmp	r4, #8
    b18a:	d807      	bhi.n	b19c <nrfx_usbd_init+0x90>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    b18c:	f014 0f08 	tst.w	r4, #8
    b190:	d0e7      	beq.n	b162 <nrfx_usbd_init+0x56>
    b192:	f240 11ff 	movw	r1, #511	; 0x1ff
    b196:	e7e5      	b.n	b164 <nrfx_usbd_init+0x58>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    b198:	4905      	ldr	r1, [pc, #20]	; (b1b0 <nrfx_usbd_init+0xa4>)
    b19a:	e7ea      	b.n	b172 <nrfx_usbd_init+0x66>
    return NRFX_SUCCESS;
    b19c:	4805      	ldr	r0, [pc, #20]	; (b1b4 <nrfx_usbd_init+0xa8>)
}
    b19e:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_INVALID_STATE;
    b1a0:	4805      	ldr	r0, [pc, #20]	; (b1b8 <nrfx_usbd_init+0xac>)
    b1a2:	e7fc      	b.n	b19e <nrfx_usbd_init+0x92>
    b1a4:	20002f81 	.word	0x20002f81
    b1a8:	20002a1c 	.word	0x20002a1c
    b1ac:	200028fc 	.word	0x200028fc
    b1b0:	2000298c 	.word	0x2000298c
    b1b4:	0bad0000 	.word	0x0bad0000
    b1b8:	0bad0005 	.word	0x0bad0005

0000b1bc <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    b1bc:	b4f0      	push	{r4, r5, r6, r7}
    return NRFX_USBD_EP_BITPOS(ep);
    b1be:	b242      	sxtb	r2, r0
    b1c0:	2a00      	cmp	r2, #0
    b1c2:	db14      	blt.n	b1ee <nrfx_usbd_ep_transfer+0x32>
    b1c4:	2410      	movs	r4, #16
    b1c6:	f002 030f 	and.w	r3, r2, #15
    b1ca:	441c      	add	r4, r3
	__asm__ volatile(
    b1cc:	f04f 0320 	mov.w	r3, #32
    b1d0:	f3ef 8511 	mrs	r5, BASEPRI
    b1d4:	f383 8812 	msr	BASEPRI_MAX, r3
    b1d8:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    b1dc:	f010 070f 	ands.w	r7, r0, #15
    b1e0:	d107      	bne.n	b1f2 <nrfx_usbd_ep_transfer+0x36>
    b1e2:	4b2f      	ldr	r3, [pc, #188]	; (b2a0 <nrfx_usbd_ep_transfer+0xe4>)
    b1e4:	781b      	ldrb	r3, [r3, #0]
    b1e6:	4283      	cmp	r3, r0
    b1e8:	d003      	beq.n	b1f2 <nrfx_usbd_ep_transfer+0x36>
    {
        ret = NRFX_ERROR_INVALID_ADDR;
    b1ea:	482e      	ldr	r0, [pc, #184]	; (b2a4 <nrfx_usbd_ep_transfer+0xe8>)
    b1ec:	e051      	b.n	b292 <nrfx_usbd_ep_transfer+0xd6>
    return NRFX_USBD_EP_BITPOS(ep);
    b1ee:	2400      	movs	r4, #0
    b1f0:	e7e9      	b.n	b1c6 <nrfx_usbd_ep_transfer+0xa>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    b1f2:	4b2d      	ldr	r3, [pc, #180]	; (b2a8 <nrfx_usbd_ep_transfer+0xec>)
    b1f4:	681b      	ldr	r3, [r3, #0]
    b1f6:	43db      	mvns	r3, r3
    b1f8:	b29b      	uxth	r3, r3
    b1fa:	482c      	ldr	r0, [pc, #176]	; (b2ac <nrfx_usbd_ep_transfer+0xf0>)
    b1fc:	6800      	ldr	r0, [r0, #0]
    b1fe:	4303      	orrs	r3, r0
    b200:	2001      	movs	r0, #1
    b202:	fa00 f404 	lsl.w	r4, r0, r4
    b206:	4223      	tst	r3, r4
    b208:	d142      	bne.n	b290 <nrfx_usbd_ep_transfer+0xd4>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    b20a:	2a00      	cmp	r2, #0
    b20c:	db1f      	blt.n	b24e <nrfx_usbd_ep_transfer+0x92>
    b20e:	4828      	ldr	r0, [pc, #160]	; (b2b0 <nrfx_usbd_ep_transfer+0xf4>)
    b210:	ea4f 1c07 	mov.w	ip, r7, lsl #4
    b214:	eb00 1607 	add.w	r6, r0, r7, lsl #4
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
    b218:	2a00      	cmp	r2, #0
    b21a:	db1a      	blt.n	b252 <nrfx_usbd_ep_transfer+0x96>
                }
            }
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    b21c:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    b220:	4a24      	ldr	r2, [pc, #144]	; (b2b4 <nrfx_usbd_ep_transfer+0xf8>)
    b222:	eb02 0383 	add.w	r3, r2, r3, lsl #2
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
    b226:	4a24      	ldr	r2, [pc, #144]	; (b2b8 <nrfx_usbd_ep_transfer+0xfc>)
    b228:	f840 200c 	str.w	r2, [r0, ip]
        }
        *p_context = *p_transfer;
    b22c:	c907      	ldmia	r1, {r0, r1, r2}
    b22e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
    b232:	6073      	str	r3, [r6, #4]

        p_state->transfer_cnt = 0;
    b234:	2300      	movs	r3, #0
    b236:	60b3      	str	r3, [r6, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    b238:	73b3      	strb	r3, [r6, #14]
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    b23a:	4a1c      	ldr	r2, [pc, #112]	; (b2ac <nrfx_usbd_ep_transfer+0xf0>)
    b23c:	6813      	ldr	r3, [r2, #0]
    b23e:	431c      	orrs	r4, r3
    b240:	6014      	str	r4, [r2, #0]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b242:	4b1e      	ldr	r3, [pc, #120]	; (b2bc <nrfx_usbd_ep_transfer+0x100>)
    b244:	2280      	movs	r2, #128	; 0x80
    b246:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        ret = NRFX_SUCCESS;
    b24a:	481d      	ldr	r0, [pc, #116]	; (b2c0 <nrfx_usbd_ep_transfer+0x104>)
}
    b24c:	e021      	b.n	b292 <nrfx_usbd_ep_transfer+0xd6>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    b24e:	481d      	ldr	r0, [pc, #116]	; (b2c4 <nrfx_usbd_ep_transfer+0x108>)
    b250:	e7de      	b.n	b210 <nrfx_usbd_ep_transfer+0x54>
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    b252:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    b256:	4a1c      	ldr	r2, [pc, #112]	; (b2c8 <nrfx_usbd_ep_transfer+0x10c>)
    b258:	eb02 0383 	add.w	r3, r2, r3, lsl #2
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    b25c:	680a      	ldr	r2, [r1, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    b25e:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
    b262:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    b266:	d006      	beq.n	b276 <nrfx_usbd_ep_transfer+0xba>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    b268:	688a      	ldr	r2, [r1, #8]
    b26a:	f012 0f01 	tst.w	r2, #1
    b26e:	d10c      	bne.n	b28a <nrfx_usbd_ep_transfer+0xce>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
    b270:	4a16      	ldr	r2, [pc, #88]	; (b2cc <nrfx_usbd_ep_transfer+0x110>)
    b272:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
    b274:	e7da      	b.n	b22c <nrfx_usbd_ep_transfer+0x70>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    b276:	688a      	ldr	r2, [r1, #8]
    b278:	f012 0f01 	tst.w	r2, #1
    b27c:	d102      	bne.n	b284 <nrfx_usbd_ep_transfer+0xc8>
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
    b27e:	4a14      	ldr	r2, [pc, #80]	; (b2d0 <nrfx_usbd_ep_transfer+0x114>)
    b280:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
    b282:	e7d3      	b.n	b22c <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
    b284:	4a13      	ldr	r2, [pc, #76]	; (b2d4 <nrfx_usbd_ep_transfer+0x118>)
    b286:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
    b288:	e7d0      	b.n	b22c <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
    b28a:	4a13      	ldr	r2, [pc, #76]	; (b2d8 <nrfx_usbd_ep_transfer+0x11c>)
    b28c:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
    b28e:	e7cd      	b.n	b22c <nrfx_usbd_ep_transfer+0x70>
        ret = NRFX_ERROR_BUSY;
    b290:	4812      	ldr	r0, [pc, #72]	; (b2dc <nrfx_usbd_ep_transfer+0x120>)
	__asm__ volatile(
    b292:	f385 8811 	msr	BASEPRI, r5
    b296:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    b29a:	bcf0      	pop	{r4, r5, r6, r7}
    b29c:	4770      	bx	lr
    b29e:	bf00      	nop
    b2a0:	20002f82 	.word	0x20002f82
    b2a4:	0bad000a 	.word	0x0bad000a
    b2a8:	200028f8 	.word	0x200028f8
    b2ac:	20002888 	.word	0x20002888
    b2b0:	200028fc 	.word	0x200028fc
    b2b4:	2000281c 	.word	0x2000281c
    b2b8:	00013eb5 	.word	0x00013eb5
    b2bc:	e000e100 	.word	0xe000e100
    b2c0:	0bad0000 	.word	0x0bad0000
    b2c4:	2000298c 	.word	0x2000298c
    b2c8:	2000288c 	.word	0x2000288c
    b2cc:	00013f47 	.word	0x00013f47
    b2d0:	00013eeb 	.word	0x00013eeb
    b2d4:	00013f0d 	.word	0x00013f0d
    b2d8:	00013f85 	.word	0x00013f85
    b2dc:	0bad000b 	.word	0x0bad000b

0000b2e0 <nrfx_usbd_feeder_buffer_get>:
}

void * nrfx_usbd_feeder_buffer_get(void)
{
    return m_tx_buffer;
}
    b2e0:	4800      	ldr	r0, [pc, #0]	; (b2e4 <nrfx_usbd_feeder_buffer_get+0x4>)
    b2e2:	4770      	bx	lr
    b2e4:	20002a20 	.word	0x20002a20

0000b2e8 <nrfx_usbd_ep_status_get>:

nrfx_usbd_ep_status_t nrfx_usbd_ep_status_get(nrfx_usbd_ep_t ep, size_t * p_size)
{
    b2e8:	b430      	push	{r4, r5}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    b2ea:	f010 0f80 	tst.w	r0, #128	; 0x80
    b2ee:	d118      	bne.n	b322 <nrfx_usbd_ep_status_get+0x3a>
    b2f0:	4b0e      	ldr	r3, [pc, #56]	; (b32c <nrfx_usbd_ep_status_get+0x44>)
        NRF_USBD_EP_NR_GET(ep));
    b2f2:	f000 000f 	and.w	r0, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    b2f6:	0104      	lsls	r4, r0, #4
    b2f8:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	__asm__ volatile(
    b2fc:	f04f 0520 	mov.w	r5, #32
    b300:	f3ef 8211 	mrs	r2, BASEPRI
    b304:	f385 8812 	msr	BASEPRI_MAX, r5
    b308:	f3bf 8f6f 	isb	sy
    nrfx_usbd_ep_status_t ret;

    usbd_ep_state_t const * p_state = ep_state_access(ep);
    NRFX_CRITICAL_SECTION_ENTER();
    *p_size = p_state->transfer_cnt;
    b30c:	6885      	ldr	r5, [r0, #8]
    b30e:	600d      	str	r5, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    b310:	591b      	ldr	r3, [r3, r4]
    b312:	b143      	cbz	r3, b326 <nrfx_usbd_ep_status_get+0x3e>
    b314:	2004      	movs	r0, #4
	__asm__ volatile(
    b316:	f382 8811 	msr	BASEPRI, r2
    b31a:	f3bf 8f6f 	isb	sy
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    b31e:	bc30      	pop	{r4, r5}
    b320:	4770      	bx	lr
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    b322:	4b03      	ldr	r3, [pc, #12]	; (b330 <nrfx_usbd_ep_status_get+0x48>)
    b324:	e7e5      	b.n	b2f2 <nrfx_usbd_ep_status_get+0xa>
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    b326:	7b80      	ldrb	r0, [r0, #14]
    b328:	e7f5      	b.n	b316 <nrfx_usbd_ep_status_get+0x2e>
    b32a:	bf00      	nop
    b32c:	200028fc 	.word	0x200028fc
    b330:	2000298c 	.word	0x2000298c

0000b334 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
    b334:	f010 0f08 	tst.w	r0, #8
    b338:	d107      	bne.n	b34a <nrfx_usbd_epout_size_get+0x16>
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    b33a:	f000 000f 	and.w	r0, r0, #15
    b33e:	f500 7094 	add.w	r0, r0, #296	; 0x128
    b342:	4b06      	ldr	r3, [pc, #24]	; (b35c <nrfx_usbd_epout_size_get+0x28>)
    b344:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    b348:	4770      	bx	lr
        size_t size_isoout = p_reg->SIZE.ISOOUT;
    b34a:	4b04      	ldr	r3, [pc, #16]	; (b35c <nrfx_usbd_epout_size_get+0x28>)
    b34c:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
        if ((size_isoout & USBD_SIZE_ISOOUT_ZERO_Msk) ==
    b350:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    b354:	d100      	bne.n	b358 <nrfx_usbd_epout_size_get+0x24>
    b356:	4770      	bx	lr
            size_isoout = 0;
    b358:	2000      	movs	r0, #0

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
    b35a:	4770      	bx	lr
    b35c:	40027000 	.word	0x40027000

0000b360 <usbd_dmareq_process>:
    if (!m_dma_pending)
    b360:	4b6d      	ldr	r3, [pc, #436]	; (b518 <usbd_dmareq_process+0x1b8>)
    b362:	781b      	ldrb	r3, [r3, #0]
    b364:	2b00      	cmp	r3, #0
    b366:	f040 80d5 	bne.w	b514 <usbd_dmareq_process+0x1b4>
{
    b36a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b36e:	b085      	sub	sp, #20
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    b370:	4b6a      	ldr	r3, [pc, #424]	; (b51c <usbd_dmareq_process+0x1bc>)
    b372:	681b      	ldr	r3, [r3, #0]
    b374:	4a6a      	ldr	r2, [pc, #424]	; (b520 <usbd_dmareq_process+0x1c0>)
    b376:	6810      	ldr	r0, [r2, #0]
    b378:	4003      	ands	r3, r0
    b37a:	f000 80c8 	beq.w	b50e <usbd_dmareq_process+0x1ae>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    b37e:	f013 2001 	ands.w	r0, r3, #16777472	; 0x1000100
    b382:	d05a      	beq.n	b43a <usbd_dmareq_process+0xda>
                pos = usbd_dma_scheduler_algorithm(req & USBD_EPISO_BIT_MASK);
    b384:	f008 fdd7 	bl	13f36 <usbd_dma_scheduler_algorithm>
    b388:	4680      	mov	r8, r0
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    b38a:	f1b8 0f0f 	cmp.w	r8, #15
    b38e:	d959      	bls.n	b444 <usbd_dmareq_process+0xe4>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    b390:	f1a8 0610 	sub.w	r6, r8, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    b394:	b2f6      	uxtb	r6, r6
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    b396:	b274      	sxtb	r4, r6
    b398:	2c00      	cmp	r4, #0
    b39a:	db57      	blt.n	b44c <usbd_dmareq_process+0xec>
    b39c:	f8df a19c 	ldr.w	sl, [pc, #412]	; b53c <usbd_dmareq_process+0x1dc>
    b3a0:	f006 070f 	and.w	r7, r6, #15
        NRF_USBD_EP_NR_GET(ep));
    b3a4:	463d      	mov	r5, r7
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    b3a6:	ea4f 1b07 	mov.w	fp, r7, lsl #4
    b3aa:	eb0a 1907 	add.w	r9, sl, r7, lsl #4
            if (NRF_USBD_EPIN_CHECK(ep))
    b3ae:	2c00      	cmp	r4, #0
    b3b0:	db4f      	blt.n	b452 <usbd_dmareq_process+0xf2>
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    b3b2:	4630      	mov	r0, r6
    b3b4:	f7ff ffbe 	bl	b334 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
    b3b8:	f85a a00b 	ldr.w	sl, [sl, fp]
    b3bc:	4683      	mov	fp, r0
    b3be:	4603      	mov	r3, r0
    b3c0:	f8b9 200c 	ldrh.w	r2, [r9, #12]
    b3c4:	f8d9 1004 	ldr.w	r1, [r9, #4]
    b3c8:	a802      	add	r0, sp, #8
    b3ca:	47d0      	blx	sl
                if (transfer.p_data.rx == NULL)
    b3cc:	9b02      	ldr	r3, [sp, #8]
    b3ce:	b113      	cbz	r3, b3d6 <usbd_dmareq_process+0x76>
                else if (transfer.size < rx_size)
    b3d0:	9b03      	ldr	r3, [sp, #12]
    b3d2:	455b      	cmp	r3, fp
    b3d4:	d34b      	bcc.n	b46e <usbd_dmareq_process+0x10e>
                if (!continue_transfer)
    b3d6:	b910      	cbnz	r0, b3de <usbd_dmareq_process+0x7e>
                    p_state->handler.consumer = NULL;
    b3d8:	2300      	movs	r3, #0
    b3da:	f8c9 3000 	str.w	r3, [r9]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
    b3de:	f7ff f94f 	bl	a680 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    b3e2:	b110      	cbz	r0, b3ea <usbd_dmareq_process+0x8a>
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
    b3e4:	4b4f      	ldr	r3, [pc, #316]	; (b524 <usbd_dmareq_process+0x1c4>)
    b3e6:	2282      	movs	r2, #130	; 0x82
    b3e8:	601a      	str	r2, [r3, #0]
    m_dma_pending = true;
    b3ea:	2001      	movs	r0, #1
    b3ec:	4b4a      	ldr	r3, [pc, #296]	; (b518 <usbd_dmareq_process+0x1b8>)
    b3ee:	7018      	strb	r0, [r3, #0]
            m_ep_ready &= ~(1U << pos);
    b3f0:	fa00 f008 	lsl.w	r0, r0, r8
    b3f4:	4a4a      	ldr	r2, [pc, #296]	; (b520 <usbd_dmareq_process+0x1c0>)
    b3f6:	6813      	ldr	r3, [r2, #0]
    b3f8:	ea23 0000 	bic.w	r0, r3, r0
    b3fc:	6010      	str	r0, [r2, #0]
            p_state->transfer_cnt += transfer.size;
    b3fe:	9a03      	ldr	r2, [sp, #12]
    b400:	f8d9 3008 	ldr.w	r3, [r9, #8]
    b404:	4413      	add	r3, r2
    b406:	f8c9 3008 	str.w	r3, [r9, #8]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
    b40a:	9b02      	ldr	r3, [sp, #8]
    if (NRF_USBD_EPIN_CHECK(ep))
    b40c:	2c00      	cmp	r4, #0
    b40e:	db4f      	blt.n	b4b0 <usbd_dmareq_process+0x150>
        if (NRF_USBD_EPISO_CHECK(ep))
    b410:	f016 0f08 	tst.w	r6, #8
    b414:	d05f      	beq.n	b4d6 <usbd_dmareq_process+0x176>
            p_reg->ISOOUT.PTR    = ptr;
    b416:	4944      	ldr	r1, [pc, #272]	; (b528 <usbd_dmareq_process+0x1c8>)
    b418:	f8c1 37a0 	str.w	r3, [r1, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
    b41c:	f8c1 27a4 	str.w	r2, [r1, #1956]	; 0x7a4
    return (nrf_usbd_task_t)(
    b420:	2c00      	cmp	r4, #0
    b422:	db62      	blt.n	b4ea <usbd_dmareq_process+0x18a>
    b424:	2328      	movs	r3, #40	; 0x28
    b426:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    b42a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
    b42e:	f507 371c 	add.w	r7, r7, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    b432:	2301      	movs	r3, #1
    b434:	603b      	str	r3, [r7, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    b436:	683b      	ldr	r3, [r7, #0]
}
    b438:	e065      	b.n	b506 <usbd_dmareq_process+0x1a6>
                pos = usbd_dma_scheduler_algorithm(req);
    b43a:	4618      	mov	r0, r3
    b43c:	f008 fd7b 	bl	13f36 <usbd_dma_scheduler_algorithm>
    b440:	4680      	mov	r8, r0
    b442:	e7a2      	b.n	b38a <usbd_dmareq_process+0x2a>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    b444:	f068 067f 	orn	r6, r8, #127	; 0x7f
    b448:	b2f6      	uxtb	r6, r6
    b44a:	e7a4      	b.n	b396 <usbd_dmareq_process+0x36>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    b44c:	f8df a0f0 	ldr.w	sl, [pc, #240]	; b540 <usbd_dmareq_process+0x1e0>
    b450:	e7a6      	b.n	b3a0 <usbd_dmareq_process+0x40>
                continue_transfer = p_state->handler.feeder(
    b452:	f8d9 3000 	ldr.w	r3, [r9]
    b456:	f8b9 200c 	ldrh.w	r2, [r9, #12]
    b45a:	f8d9 1004 	ldr.w	r1, [r9, #4]
    b45e:	a802      	add	r0, sp, #8
    b460:	4798      	blx	r3
                if (!continue_transfer)
    b462:	2800      	cmp	r0, #0
    b464:	d1bb      	bne.n	b3de <usbd_dmareq_process+0x7e>
                    p_state->handler.feeder = NULL;
    b466:	2300      	movs	r3, #0
    b468:	f8c9 3000 	str.w	r3, [r9]
    b46c:	e7b7      	b.n	b3de <usbd_dmareq_process+0x7e>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    b46e:	2202      	movs	r2, #2
    b470:	f889 200e 	strb.w	r2, [r9, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    b474:	2301      	movs	r3, #1
    b476:	fa03 f808 	lsl.w	r8, r3, r8
    b47a:	ea6f 0808 	mvn.w	r8, r8
    b47e:	4b27      	ldr	r3, [pc, #156]	; (b51c <usbd_dmareq_process+0x1bc>)
    b480:	f3bf 8f5b 	dmb	ish
    b484:	e853 1f00 	ldrex	r1, [r3]
    b488:	ea01 0108 	and.w	r1, r1, r8
    b48c:	e843 1000 	strex	r0, r1, [r3]
    b490:	2800      	cmp	r0, #0
    b492:	d1f7      	bne.n	b484 <usbd_dmareq_process+0x124>
    b494:	f3bf 8f5b 	dmb	ish
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    b498:	2306      	movs	r3, #6
    b49a:	f88d 3004 	strb.w	r3, [sp, #4]
    b49e:	f88d 6006 	strb.w	r6, [sp, #6]
    b4a2:	f88d 2007 	strb.w	r2, [sp, #7]
                    m_event_handler(&evt);
    b4a6:	4b21      	ldr	r3, [pc, #132]	; (b52c <usbd_dmareq_process+0x1cc>)
    b4a8:	681b      	ldr	r3, [r3, #0]
    b4aa:	a801      	add	r0, sp, #4
    b4ac:	4798      	blx	r3
                    continue;
    b4ae:	e75f      	b.n	b370 <usbd_dmareq_process+0x10>
        if (NRF_USBD_EPISO_CHECK(ep))
    b4b0:	f016 0f08 	tst.w	r6, #8
    b4b4:	d005      	beq.n	b4c2 <usbd_dmareq_process+0x162>
            p_reg->ISOIN.PTR    = ptr;
    b4b6:	491c      	ldr	r1, [pc, #112]	; (b528 <usbd_dmareq_process+0x1c8>)
    b4b8:	f8c1 36a0 	str.w	r3, [r1, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
    b4bc:	f8c1 26a4 	str.w	r2, [r1, #1700]	; 0x6a4
    b4c0:	e7ae      	b.n	b420 <usbd_dmareq_process+0xc0>
            p_reg->EPIN[epnr].PTR    = ptr;
    b4c2:	4919      	ldr	r1, [pc, #100]	; (b528 <usbd_dmareq_process+0x1c8>)
    b4c4:	eb07 0087 	add.w	r0, r7, r7, lsl #2
    b4c8:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    b4cc:	f8c0 3600 	str.w	r3, [r0, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
    b4d0:	f8c0 2604 	str.w	r2, [r0, #1540]	; 0x604
    b4d4:	e7a4      	b.n	b420 <usbd_dmareq_process+0xc0>
            p_reg->EPOUT[epnr].PTR    = ptr;
    b4d6:	4914      	ldr	r1, [pc, #80]	; (b528 <usbd_dmareq_process+0x1c8>)
    b4d8:	eb07 0087 	add.w	r0, r7, r7, lsl #2
    b4dc:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    b4e0:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
    b4e4:	f8c0 2704 	str.w	r2, [r0, #1796]	; 0x704
    b4e8:	e79a      	b.n	b420 <usbd_dmareq_process+0xc0>
    return (nrf_usbd_task_t)(
    b4ea:	2304      	movs	r3, #4
    b4ec:	e79b      	b.n	b426 <usbd_dmareq_process+0xc6>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    b4ee:	4b10      	ldr	r3, [pc, #64]	; (b530 <usbd_dmareq_process+0x1d0>)
    b4f0:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    b4f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b4f8:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    b4fc:	681b      	ldr	r3, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
    b4fe:	b933      	cbnz	r3, b50e <usbd_dmareq_process+0x1ae>
    b500:	4b0c      	ldr	r3, [pc, #48]	; (b534 <usbd_dmareq_process+0x1d4>)
    b502:	681b      	ldr	r3, [r3, #0]
    b504:	b91b      	cbnz	r3, b50e <usbd_dmareq_process+0x1ae>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    b506:	2c00      	cmp	r4, #0
    b508:	dbf1      	blt.n	b4ee <usbd_dmareq_process+0x18e>
    b50a:	4b0b      	ldr	r3, [pc, #44]	; (b538 <usbd_dmareq_process+0x1d8>)
    b50c:	e7f0      	b.n	b4f0 <usbd_dmareq_process+0x190>
}
    b50e:	b005      	add	sp, #20
    b510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b514:	4770      	bx	lr
    b516:	bf00      	nop
    b518:	20002f80 	.word	0x20002f80
    b51c:	20002888 	.word	0x20002888
    b520:	200028f8 	.word	0x200028f8
    b524:	40027c1c 	.word	0x40027c1c
    b528:	40027000 	.word	0x40027000
    b52c:	20002a1c 	.word	0x20002a1c
    b530:	000174a0 	.word	0x000174a0
    b534:	40027100 	.word	0x40027100
    b538:	000174c0 	.word	0x000174c0
    b53c:	200028fc 	.word	0x200028fc
    b540:	2000298c 	.word	0x2000298c

0000b544 <ev_epdata_handler>:
{
    b544:	b510      	push	{r4, lr}
    return p_reg->EPDATASTATUS;
    b546:	4b0f      	ldr	r3, [pc, #60]	; (b584 <ev_epdata_handler+0x40>)
    b548:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
    b54c:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
    NRFX_LOG_DEBUG("USBD event: EndpointEPStatus: %x", dataepstatus);
    b550:	e009      	b.n	b566 <ev_epdata_handler+0x22>
    return 32U;
    b552:	2120      	movs	r1, #32
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    b554:	f1a1 0010 	sub.w	r0, r1, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    b558:	b2c0      	uxtb	r0, r0
        dataepstatus &= ~(1UL << bitpos);
    b55a:	2301      	movs	r3, #1
    b55c:	408b      	lsls	r3, r1
    b55e:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    b562:	f7ff f9cb 	bl	a8fc <usbd_ep_data_handler>
    while (dataepstatus)
    b566:	b154      	cbz	r4, b57e <ev_epdata_handler+0x3a>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    b568:	fa94 f1a4 	rbit	r1, r4
  if (value == 0U)
    b56c:	2900      	cmp	r1, #0
    b56e:	d0f0      	beq.n	b552 <ev_epdata_handler+0xe>
  return __builtin_clz(value);
    b570:	fab1 f181 	clz	r1, r1
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    b574:	290f      	cmp	r1, #15
    b576:	d8ed      	bhi.n	b554 <ev_epdata_handler+0x10>
    b578:	f041 0080 	orr.w	r0, r1, #128	; 0x80
    b57c:	e7ed      	b.n	b55a <ev_epdata_handler+0x16>
        usbd_dmareq_process();
    b57e:	f7ff feef 	bl	b360 <usbd_dmareq_process>
}
    b582:	bd10      	pop	{r4, pc}
    b584:	40027000 	.word	0x40027000

0000b588 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    b588:	b500      	push	{lr}
    b58a:	b083      	sub	sp, #12
    b58c:	f7ff f878 	bl	a680 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    b590:	b110      	cbz	r0, b598 <ev_dma_epout7_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    b592:	4b1d      	ldr	r3, [pc, #116]	; (b608 <ev_dma_epout7_handler+0x80>)
    b594:	2200      	movs	r2, #0
    b596:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    b598:	4b1c      	ldr	r3, [pc, #112]	; (b60c <ev_dma_epout7_handler+0x84>)
    b59a:	2200      	movs	r2, #0
    b59c:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    b59e:	4b1c      	ldr	r3, [pc, #112]	; (b610 <ev_dma_epout7_handler+0x88>)
    b5a0:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
    b5a4:	2b03      	cmp	r3, #3
    b5a6:	d01d      	beq.n	b5e4 <ev_dma_epout7_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
    b5a8:	4b19      	ldr	r3, [pc, #100]	; (b610 <ev_dma_epout7_handler+0x88>)
    b5aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    b5ac:	bb3b      	cbnz	r3, b5fe <ev_dma_epout7_handler+0x76>
    b5ae:	4b19      	ldr	r3, [pc, #100]	; (b614 <ev_dma_epout7_handler+0x8c>)
    b5b0:	f3bf 8f5b 	dmb	ish
    b5b4:	e853 2f00 	ldrex	r2, [r3]
    b5b8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
    b5bc:	e843 2100 	strex	r1, r2, [r3]
    b5c0:	2900      	cmp	r1, #0
    b5c2:	d1f7      	bne.n	b5b4 <ev_dma_epout7_handler+0x2c>
    b5c4:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    b5c8:	2306      	movs	r3, #6
    b5ca:	f88d 3004 	strb.w	r3, [sp, #4]
    b5ce:	2307      	movs	r3, #7
    b5d0:	f88d 3006 	strb.w	r3, [sp, #6]
    b5d4:	2300      	movs	r3, #0
    b5d6:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    b5da:	4b0f      	ldr	r3, [pc, #60]	; (b618 <ev_dma_epout7_handler+0x90>)
    b5dc:	681b      	ldr	r3, [r3, #0]
    b5de:	a801      	add	r0, sp, #4
    b5e0:	4798      	blx	r3
    b5e2:	e00c      	b.n	b5fe <ev_dma_epout7_handler+0x76>
    b5e4:	4b0b      	ldr	r3, [pc, #44]	; (b614 <ev_dma_epout7_handler+0x8c>)
    b5e6:	f3bf 8f5b 	dmb	ish
    b5ea:	e853 2f00 	ldrex	r2, [r3]
    b5ee:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
    b5f2:	e843 2100 	strex	r1, r2, [r3]
    b5f6:	2900      	cmp	r1, #0
    b5f8:	d1f7      	bne.n	b5ea <ev_dma_epout7_handler+0x62>
    b5fa:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    b5fe:	f7ff feaf 	bl	b360 <usbd_dmareq_process>
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    b602:	b003      	add	sp, #12
    b604:	f85d fb04 	ldr.w	pc, [sp], #4
    b608:	40027c1c 	.word	0x40027c1c
    b60c:	20002f80 	.word	0x20002f80
    b610:	200028fc 	.word	0x200028fc
    b614:	20002888 	.word	0x20002888
    b618:	20002a1c 	.word	0x20002a1c

0000b61c <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    b61c:	b500      	push	{lr}
    b61e:	b083      	sub	sp, #12
    b620:	f7ff f82e 	bl	a680 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    b624:	b110      	cbz	r0, b62c <ev_dma_epout1_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    b626:	4b1d      	ldr	r3, [pc, #116]	; (b69c <ev_dma_epout1_handler+0x80>)
    b628:	2200      	movs	r2, #0
    b62a:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    b62c:	4b1c      	ldr	r3, [pc, #112]	; (b6a0 <ev_dma_epout1_handler+0x84>)
    b62e:	2200      	movs	r2, #0
    b630:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    b632:	4b1c      	ldr	r3, [pc, #112]	; (b6a4 <ev_dma_epout1_handler+0x88>)
    b634:	7f9b      	ldrb	r3, [r3, #30]
    b636:	2b03      	cmp	r3, #3
    b638:	d01d      	beq.n	b676 <ev_dma_epout1_handler+0x5a>
    else if (p_state->handler.consumer == NULL)
    b63a:	4b1a      	ldr	r3, [pc, #104]	; (b6a4 <ev_dma_epout1_handler+0x88>)
    b63c:	691b      	ldr	r3, [r3, #16]
    b63e:	bb3b      	cbnz	r3, b690 <ev_dma_epout1_handler+0x74>
    b640:	4b19      	ldr	r3, [pc, #100]	; (b6a8 <ev_dma_epout1_handler+0x8c>)
    b642:	f3bf 8f5b 	dmb	ish
    b646:	e853 2f00 	ldrex	r2, [r3]
    b64a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
    b64e:	e843 2100 	strex	r1, r2, [r3]
    b652:	2900      	cmp	r1, #0
    b654:	d1f7      	bne.n	b646 <ev_dma_epout1_handler+0x2a>
    b656:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    b65a:	2306      	movs	r3, #6
    b65c:	f88d 3004 	strb.w	r3, [sp, #4]
    b660:	2301      	movs	r3, #1
    b662:	f88d 3006 	strb.w	r3, [sp, #6]
    b666:	2300      	movs	r3, #0
    b668:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    b66c:	4b0f      	ldr	r3, [pc, #60]	; (b6ac <ev_dma_epout1_handler+0x90>)
    b66e:	681b      	ldr	r3, [r3, #0]
    b670:	a801      	add	r0, sp, #4
    b672:	4798      	blx	r3
    b674:	e00c      	b.n	b690 <ev_dma_epout1_handler+0x74>
    b676:	4b0c      	ldr	r3, [pc, #48]	; (b6a8 <ev_dma_epout1_handler+0x8c>)
    b678:	f3bf 8f5b 	dmb	ish
    b67c:	e853 2f00 	ldrex	r2, [r3]
    b680:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
    b684:	e843 2100 	strex	r1, r2, [r3]
    b688:	2900      	cmp	r1, #0
    b68a:	d1f7      	bne.n	b67c <ev_dma_epout1_handler+0x60>
    b68c:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    b690:	f7ff fe66 	bl	b360 <usbd_dmareq_process>
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    b694:	b003      	add	sp, #12
    b696:	f85d fb04 	ldr.w	pc, [sp], #4
    b69a:	bf00      	nop
    b69c:	40027c1c 	.word	0x40027c1c
    b6a0:	20002f80 	.word	0x20002f80
    b6a4:	200028fc 	.word	0x200028fc
    b6a8:	20002888 	.word	0x20002888
    b6ac:	20002a1c 	.word	0x20002a1c

0000b6b0 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    b6b0:	b500      	push	{lr}
    b6b2:	b083      	sub	sp, #12
    b6b4:	f7fe ffe4 	bl	a680 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    b6b8:	b110      	cbz	r0, b6c0 <ev_dma_epout2_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    b6ba:	4b1d      	ldr	r3, [pc, #116]	; (b730 <ev_dma_epout2_handler+0x80>)
    b6bc:	2200      	movs	r2, #0
    b6be:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    b6c0:	4b1c      	ldr	r3, [pc, #112]	; (b734 <ev_dma_epout2_handler+0x84>)
    b6c2:	2200      	movs	r2, #0
    b6c4:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    b6c6:	4b1c      	ldr	r3, [pc, #112]	; (b738 <ev_dma_epout2_handler+0x88>)
    b6c8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    b6cc:	2b03      	cmp	r3, #3
    b6ce:	d01d      	beq.n	b70c <ev_dma_epout2_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
    b6d0:	4b19      	ldr	r3, [pc, #100]	; (b738 <ev_dma_epout2_handler+0x88>)
    b6d2:	6a1b      	ldr	r3, [r3, #32]
    b6d4:	bb3b      	cbnz	r3, b726 <ev_dma_epout2_handler+0x76>
    b6d6:	4b19      	ldr	r3, [pc, #100]	; (b73c <ev_dma_epout2_handler+0x8c>)
    b6d8:	f3bf 8f5b 	dmb	ish
    b6dc:	e853 2f00 	ldrex	r2, [r3]
    b6e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
    b6e4:	e843 2100 	strex	r1, r2, [r3]
    b6e8:	2900      	cmp	r1, #0
    b6ea:	d1f7      	bne.n	b6dc <ev_dma_epout2_handler+0x2c>
    b6ec:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    b6f0:	2306      	movs	r3, #6
    b6f2:	f88d 3004 	strb.w	r3, [sp, #4]
    b6f6:	2302      	movs	r3, #2
    b6f8:	f88d 3006 	strb.w	r3, [sp, #6]
    b6fc:	2300      	movs	r3, #0
    b6fe:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    b702:	4b0f      	ldr	r3, [pc, #60]	; (b740 <ev_dma_epout2_handler+0x90>)
    b704:	681b      	ldr	r3, [r3, #0]
    b706:	a801      	add	r0, sp, #4
    b708:	4798      	blx	r3
    b70a:	e00c      	b.n	b726 <ev_dma_epout2_handler+0x76>
    b70c:	4b0b      	ldr	r3, [pc, #44]	; (b73c <ev_dma_epout2_handler+0x8c>)
    b70e:	f3bf 8f5b 	dmb	ish
    b712:	e853 2f00 	ldrex	r2, [r3]
    b716:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
    b71a:	e843 2100 	strex	r1, r2, [r3]
    b71e:	2900      	cmp	r1, #0
    b720:	d1f7      	bne.n	b712 <ev_dma_epout2_handler+0x62>
    b722:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    b726:	f7ff fe1b 	bl	b360 <usbd_dmareq_process>
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    b72a:	b003      	add	sp, #12
    b72c:	f85d fb04 	ldr.w	pc, [sp], #4
    b730:	40027c1c 	.word	0x40027c1c
    b734:	20002f80 	.word	0x20002f80
    b738:	200028fc 	.word	0x200028fc
    b73c:	20002888 	.word	0x20002888
    b740:	20002a1c 	.word	0x20002a1c

0000b744 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    b744:	b500      	push	{lr}
    b746:	b083      	sub	sp, #12
    b748:	f7fe ff9a 	bl	a680 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    b74c:	b110      	cbz	r0, b754 <ev_dma_epout3_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    b74e:	4b1d      	ldr	r3, [pc, #116]	; (b7c4 <ev_dma_epout3_handler+0x80>)
    b750:	2200      	movs	r2, #0
    b752:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    b754:	4b1c      	ldr	r3, [pc, #112]	; (b7c8 <ev_dma_epout3_handler+0x84>)
    b756:	2200      	movs	r2, #0
    b758:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    b75a:	4b1c      	ldr	r3, [pc, #112]	; (b7cc <ev_dma_epout3_handler+0x88>)
    b75c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
    b760:	2b03      	cmp	r3, #3
    b762:	d01d      	beq.n	b7a0 <ev_dma_epout3_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
    b764:	4b19      	ldr	r3, [pc, #100]	; (b7cc <ev_dma_epout3_handler+0x88>)
    b766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    b768:	bb3b      	cbnz	r3, b7ba <ev_dma_epout3_handler+0x76>
    b76a:	4b19      	ldr	r3, [pc, #100]	; (b7d0 <ev_dma_epout3_handler+0x8c>)
    b76c:	f3bf 8f5b 	dmb	ish
    b770:	e853 2f00 	ldrex	r2, [r3]
    b774:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
    b778:	e843 2100 	strex	r1, r2, [r3]
    b77c:	2900      	cmp	r1, #0
    b77e:	d1f7      	bne.n	b770 <ev_dma_epout3_handler+0x2c>
    b780:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    b784:	2306      	movs	r3, #6
    b786:	f88d 3004 	strb.w	r3, [sp, #4]
    b78a:	2303      	movs	r3, #3
    b78c:	f88d 3006 	strb.w	r3, [sp, #6]
    b790:	2300      	movs	r3, #0
    b792:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    b796:	4b0f      	ldr	r3, [pc, #60]	; (b7d4 <ev_dma_epout3_handler+0x90>)
    b798:	681b      	ldr	r3, [r3, #0]
    b79a:	a801      	add	r0, sp, #4
    b79c:	4798      	blx	r3
    b79e:	e00c      	b.n	b7ba <ev_dma_epout3_handler+0x76>
    b7a0:	4b0b      	ldr	r3, [pc, #44]	; (b7d0 <ev_dma_epout3_handler+0x8c>)
    b7a2:	f3bf 8f5b 	dmb	ish
    b7a6:	e853 2f00 	ldrex	r2, [r3]
    b7aa:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
    b7ae:	e843 2100 	strex	r1, r2, [r3]
    b7b2:	2900      	cmp	r1, #0
    b7b4:	d1f7      	bne.n	b7a6 <ev_dma_epout3_handler+0x62>
    b7b6:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    b7ba:	f7ff fdd1 	bl	b360 <usbd_dmareq_process>
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    b7be:	b003      	add	sp, #12
    b7c0:	f85d fb04 	ldr.w	pc, [sp], #4
    b7c4:	40027c1c 	.word	0x40027c1c
    b7c8:	20002f80 	.word	0x20002f80
    b7cc:	200028fc 	.word	0x200028fc
    b7d0:	20002888 	.word	0x20002888
    b7d4:	20002a1c 	.word	0x20002a1c

0000b7d8 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    b7d8:	b500      	push	{lr}
    b7da:	b083      	sub	sp, #12
    b7dc:	f7fe ff50 	bl	a680 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    b7e0:	b110      	cbz	r0, b7e8 <ev_dma_epout4_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    b7e2:	4b1d      	ldr	r3, [pc, #116]	; (b858 <ev_dma_epout4_handler+0x80>)
    b7e4:	2200      	movs	r2, #0
    b7e6:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    b7e8:	4b1c      	ldr	r3, [pc, #112]	; (b85c <ev_dma_epout4_handler+0x84>)
    b7ea:	2200      	movs	r2, #0
    b7ec:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    b7ee:	4b1c      	ldr	r3, [pc, #112]	; (b860 <ev_dma_epout4_handler+0x88>)
    b7f0:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
    b7f4:	2b03      	cmp	r3, #3
    b7f6:	d01d      	beq.n	b834 <ev_dma_epout4_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
    b7f8:	4b19      	ldr	r3, [pc, #100]	; (b860 <ev_dma_epout4_handler+0x88>)
    b7fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    b7fc:	bb3b      	cbnz	r3, b84e <ev_dma_epout4_handler+0x76>
    b7fe:	4b19      	ldr	r3, [pc, #100]	; (b864 <ev_dma_epout4_handler+0x8c>)
    b800:	f3bf 8f5b 	dmb	ish
    b804:	e853 2f00 	ldrex	r2, [r3]
    b808:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    b80c:	e843 2100 	strex	r1, r2, [r3]
    b810:	2900      	cmp	r1, #0
    b812:	d1f7      	bne.n	b804 <ev_dma_epout4_handler+0x2c>
    b814:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    b818:	2306      	movs	r3, #6
    b81a:	f88d 3004 	strb.w	r3, [sp, #4]
    b81e:	2304      	movs	r3, #4
    b820:	f88d 3006 	strb.w	r3, [sp, #6]
    b824:	2300      	movs	r3, #0
    b826:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    b82a:	4b0f      	ldr	r3, [pc, #60]	; (b868 <ev_dma_epout4_handler+0x90>)
    b82c:	681b      	ldr	r3, [r3, #0]
    b82e:	a801      	add	r0, sp, #4
    b830:	4798      	blx	r3
    b832:	e00c      	b.n	b84e <ev_dma_epout4_handler+0x76>
    b834:	4b0b      	ldr	r3, [pc, #44]	; (b864 <ev_dma_epout4_handler+0x8c>)
    b836:	f3bf 8f5b 	dmb	ish
    b83a:	e853 2f00 	ldrex	r2, [r3]
    b83e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    b842:	e843 2100 	strex	r1, r2, [r3]
    b846:	2900      	cmp	r1, #0
    b848:	d1f7      	bne.n	b83a <ev_dma_epout4_handler+0x62>
    b84a:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    b84e:	f7ff fd87 	bl	b360 <usbd_dmareq_process>
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    b852:	b003      	add	sp, #12
    b854:	f85d fb04 	ldr.w	pc, [sp], #4
    b858:	40027c1c 	.word	0x40027c1c
    b85c:	20002f80 	.word	0x20002f80
    b860:	200028fc 	.word	0x200028fc
    b864:	20002888 	.word	0x20002888
    b868:	20002a1c 	.word	0x20002a1c

0000b86c <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    b86c:	b500      	push	{lr}
    b86e:	b083      	sub	sp, #12
    b870:	f7fe ff06 	bl	a680 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    b874:	b110      	cbz	r0, b87c <ev_dma_epout5_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    b876:	4b1d      	ldr	r3, [pc, #116]	; (b8ec <ev_dma_epout5_handler+0x80>)
    b878:	2200      	movs	r2, #0
    b87a:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    b87c:	4b1c      	ldr	r3, [pc, #112]	; (b8f0 <ev_dma_epout5_handler+0x84>)
    b87e:	2200      	movs	r2, #0
    b880:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    b882:	4b1c      	ldr	r3, [pc, #112]	; (b8f4 <ev_dma_epout5_handler+0x88>)
    b884:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
    b888:	2b03      	cmp	r3, #3
    b88a:	d01d      	beq.n	b8c8 <ev_dma_epout5_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
    b88c:	4b19      	ldr	r3, [pc, #100]	; (b8f4 <ev_dma_epout5_handler+0x88>)
    b88e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    b890:	bb3b      	cbnz	r3, b8e2 <ev_dma_epout5_handler+0x76>
    b892:	4b19      	ldr	r3, [pc, #100]	; (b8f8 <ev_dma_epout5_handler+0x8c>)
    b894:	f3bf 8f5b 	dmb	ish
    b898:	e853 2f00 	ldrex	r2, [r3]
    b89c:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
    b8a0:	e843 2100 	strex	r1, r2, [r3]
    b8a4:	2900      	cmp	r1, #0
    b8a6:	d1f7      	bne.n	b898 <ev_dma_epout5_handler+0x2c>
    b8a8:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    b8ac:	2306      	movs	r3, #6
    b8ae:	f88d 3004 	strb.w	r3, [sp, #4]
    b8b2:	2305      	movs	r3, #5
    b8b4:	f88d 3006 	strb.w	r3, [sp, #6]
    b8b8:	2300      	movs	r3, #0
    b8ba:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    b8be:	4b0f      	ldr	r3, [pc, #60]	; (b8fc <ev_dma_epout5_handler+0x90>)
    b8c0:	681b      	ldr	r3, [r3, #0]
    b8c2:	a801      	add	r0, sp, #4
    b8c4:	4798      	blx	r3
    b8c6:	e00c      	b.n	b8e2 <ev_dma_epout5_handler+0x76>
    b8c8:	4b0b      	ldr	r3, [pc, #44]	; (b8f8 <ev_dma_epout5_handler+0x8c>)
    b8ca:	f3bf 8f5b 	dmb	ish
    b8ce:	e853 2f00 	ldrex	r2, [r3]
    b8d2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
    b8d6:	e843 2100 	strex	r1, r2, [r3]
    b8da:	2900      	cmp	r1, #0
    b8dc:	d1f7      	bne.n	b8ce <ev_dma_epout5_handler+0x62>
    b8de:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    b8e2:	f7ff fd3d 	bl	b360 <usbd_dmareq_process>
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    b8e6:	b003      	add	sp, #12
    b8e8:	f85d fb04 	ldr.w	pc, [sp], #4
    b8ec:	40027c1c 	.word	0x40027c1c
    b8f0:	20002f80 	.word	0x20002f80
    b8f4:	200028fc 	.word	0x200028fc
    b8f8:	20002888 	.word	0x20002888
    b8fc:	20002a1c 	.word	0x20002a1c

0000b900 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    b900:	b500      	push	{lr}
    b902:	b083      	sub	sp, #12
    b904:	f7fe febc 	bl	a680 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    b908:	b110      	cbz	r0, b910 <ev_dma_epout6_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    b90a:	4b1d      	ldr	r3, [pc, #116]	; (b980 <ev_dma_epout6_handler+0x80>)
    b90c:	2200      	movs	r2, #0
    b90e:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    b910:	4b1c      	ldr	r3, [pc, #112]	; (b984 <ev_dma_epout6_handler+0x84>)
    b912:	2200      	movs	r2, #0
    b914:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    b916:	4b1c      	ldr	r3, [pc, #112]	; (b988 <ev_dma_epout6_handler+0x88>)
    b918:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
    b91c:	2b03      	cmp	r3, #3
    b91e:	d01c      	beq.n	b95a <ev_dma_epout6_handler+0x5a>
    else if (p_state->handler.consumer == NULL)
    b920:	4b19      	ldr	r3, [pc, #100]	; (b988 <ev_dma_epout6_handler+0x88>)
    b922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    b924:	bb33      	cbnz	r3, b974 <ev_dma_epout6_handler+0x74>
    b926:	4b19      	ldr	r3, [pc, #100]	; (b98c <ev_dma_epout6_handler+0x8c>)
    b928:	f3bf 8f5b 	dmb	ish
    b92c:	e853 2f00 	ldrex	r2, [r3]
    b930:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
    b934:	e843 2100 	strex	r1, r2, [r3]
    b938:	2900      	cmp	r1, #0
    b93a:	d1f7      	bne.n	b92c <ev_dma_epout6_handler+0x2c>
    b93c:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    b940:	2306      	movs	r3, #6
    b942:	f88d 3004 	strb.w	r3, [sp, #4]
    b946:	f88d 3006 	strb.w	r3, [sp, #6]
    b94a:	2300      	movs	r3, #0
    b94c:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    b950:	4b0f      	ldr	r3, [pc, #60]	; (b990 <ev_dma_epout6_handler+0x90>)
    b952:	681b      	ldr	r3, [r3, #0]
    b954:	a801      	add	r0, sp, #4
    b956:	4798      	blx	r3
    b958:	e00c      	b.n	b974 <ev_dma_epout6_handler+0x74>
    b95a:	4b0c      	ldr	r3, [pc, #48]	; (b98c <ev_dma_epout6_handler+0x8c>)
    b95c:	f3bf 8f5b 	dmb	ish
    b960:	e853 2f00 	ldrex	r2, [r3]
    b964:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
    b968:	e843 2100 	strex	r1, r2, [r3]
    b96c:	2900      	cmp	r1, #0
    b96e:	d1f7      	bne.n	b960 <ev_dma_epout6_handler+0x60>
    b970:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    b974:	f7ff fcf4 	bl	b360 <usbd_dmareq_process>
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    b978:	b003      	add	sp, #12
    b97a:	f85d fb04 	ldr.w	pc, [sp], #4
    b97e:	bf00      	nop
    b980:	40027c1c 	.word	0x40027c1c
    b984:	20002f80 	.word	0x20002f80
    b988:	200028fc 	.word	0x200028fc
    b98c:	20002888 	.word	0x20002888
    b990:	20002a1c 	.word	0x20002a1c

0000b994 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    b994:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    b998:	4b01      	ldr	r3, [pc, #4]	; (b9a0 <nrfx_usbd_ep_stall+0xc>)
    b99a:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
    b99e:	4770      	bx	lr
    b9a0:	40027000 	.word	0x40027000

0000b9a4 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
    b9a4:	f010 0f08 	tst.w	r0, #8
    b9a8:	d117      	bne.n	b9da <nrfx_usbd_ep_stall_check+0x36>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    b9aa:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    b9ae:	f010 0f80 	tst.w	r0, #128	; 0x80
    b9b2:	d10c      	bne.n	b9ce <nrfx_usbd_ep_stall_check+0x2a>
        return p_reg->HALTED.EPOUT[epnr];
    b9b4:	f503 7388 	add.w	r3, r3, #272	; 0x110
    b9b8:	009b      	lsls	r3, r3, #2
    b9ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b9be:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    b9c2:	6858      	ldr	r0, [r3, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
    b9c4:	2801      	cmp	r0, #1
    b9c6:	bf14      	ite	ne
    b9c8:	2000      	movne	r0, #0
    b9ca:	2001      	moveq	r0, #1
    b9cc:	4770      	bx	lr
        return p_reg->HALTED.EPIN[epnr];
    b9ce:	f503 7384 	add.w	r3, r3, #264	; 0x108
    b9d2:	4a03      	ldr	r2, [pc, #12]	; (b9e0 <nrfx_usbd_ep_stall_check+0x3c>)
    b9d4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    b9d8:	e7f4      	b.n	b9c4 <nrfx_usbd_ep_stall_check+0x20>
        return false;
    b9da:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
    b9dc:	4770      	bx	lr
    b9de:	bf00      	nop
    b9e0:	40027000 	.word	0x40027000

0000b9e4 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
    b9e4:	4b04      	ldr	r3, [pc, #16]	; (b9f8 <nrfx_usbd_ep_dtoggle_clear+0x14>)
    b9e6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
    b9ea:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    b9ee:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
    b9f2:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
    b9f6:	4770      	bx	lr
    b9f8:	40027000 	.word	0x40027000

0000b9fc <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    b9fc:	b510      	push	{r4, lr}
    b9fe:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    ba00:	2208      	movs	r2, #8
    ba02:	2100      	movs	r1, #0
    ba04:	f007 f880 	bl	12b08 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    ba08:	4b11      	ldr	r3, [pc, #68]	; (ba50 <nrfx_usbd_setup_get+0x54>)
    ba0a:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    ba0e:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
    ba10:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    ba14:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
    ba16:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    ba1a:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    ba1c:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    ba20:	0209      	lsls	r1, r1, #8
    ba22:	b289      	uxth	r1, r1
    ba24:	430a      	orrs	r2, r1
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
    ba26:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
    ba28:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    ba2c:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    ba2e:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    ba32:	0209      	lsls	r1, r1, #8
    ba34:	b289      	uxth	r1, r1
    ba36:	430a      	orrs	r2, r1
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
    ba38:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
    ba3a:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    ba3e:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    ba40:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    ba44:	021b      	lsls	r3, r3, #8
    ba46:	b29b      	uxth	r3, r3
    ba48:	4313      	orrs	r3, r2
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
    ba4a:	80e3      	strh	r3, [r4, #6]
}
    ba4c:	bd10      	pop	{r4, pc}
    ba4e:	bf00      	nop
    ba50:	40027000 	.word	0x40027000

0000ba54 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    ba54:	4b02      	ldr	r3, [pc, #8]	; (ba60 <nrfx_usbd_setup_data_clear+0xc>)
    ba56:	2201      	movs	r2, #1
    ba58:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    ba5a:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
    ba5c:	4770      	bx	lr
    ba5e:	bf00      	nop
    ba60:	4002704c 	.word	0x4002704c

0000ba64 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    ba64:	b500      	push	{lr}
    ba66:	b083      	sub	sp, #12
    ba68:	f7fe fe0a 	bl	a680 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    ba6c:	b110      	cbz	r0, ba74 <ev_dma_epout0_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    ba6e:	4b1d      	ldr	r3, [pc, #116]	; (bae4 <ev_dma_epout0_handler+0x80>)
    ba70:	2200      	movs	r2, #0
    ba72:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    ba74:	4b1c      	ldr	r3, [pc, #112]	; (bae8 <ev_dma_epout0_handler+0x84>)
    ba76:	2200      	movs	r2, #0
    ba78:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    ba7a:	4b1c      	ldr	r3, [pc, #112]	; (baec <ev_dma_epout0_handler+0x88>)
    ba7c:	7b9b      	ldrb	r3, [r3, #14]
    ba7e:	2b03      	cmp	r3, #3
    ba80:	d005      	beq.n	ba8e <ev_dma_epout0_handler+0x2a>
    else if (p_state->handler.consumer == NULL)
    ba82:	4b1a      	ldr	r3, [pc, #104]	; (baec <ev_dma_epout0_handler+0x88>)
    ba84:	681b      	ldr	r3, [r3, #0]
    ba86:	b183      	cbz	r3, baaa <ev_dma_epout0_handler+0x46>
        nrfx_usbd_setup_data_clear();
    ba88:	f7ff ffe4 	bl	ba54 <nrfx_usbd_setup_data_clear>
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    ba8c:	e026      	b.n	badc <ev_dma_epout0_handler+0x78>
    ba8e:	4b18      	ldr	r3, [pc, #96]	; (baf0 <ev_dma_epout0_handler+0x8c>)
    ba90:	f3bf 8f5b 	dmb	ish
    ba94:	e853 2f00 	ldrex	r2, [r3]
    ba98:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    ba9c:	e843 2100 	strex	r1, r2, [r3]
    baa0:	2900      	cmp	r1, #0
    baa2:	d1f7      	bne.n	ba94 <ev_dma_epout0_handler+0x30>
    baa4:	f3bf 8f5b 	dmb	ish
    baa8:	e018      	b.n	badc <ev_dma_epout0_handler+0x78>
    baaa:	4b11      	ldr	r3, [pc, #68]	; (baf0 <ev_dma_epout0_handler+0x8c>)
    baac:	f3bf 8f5b 	dmb	ish
    bab0:	e853 2f00 	ldrex	r2, [r3]
    bab4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    bab8:	e843 2100 	strex	r1, r2, [r3]
    babc:	2900      	cmp	r1, #0
    babe:	d1f7      	bne.n	bab0 <ev_dma_epout0_handler+0x4c>
    bac0:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    bac4:	2306      	movs	r3, #6
    bac6:	f88d 3004 	strb.w	r3, [sp, #4]
    baca:	2300      	movs	r3, #0
    bacc:	f88d 3006 	strb.w	r3, [sp, #6]
    bad0:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    bad4:	4b07      	ldr	r3, [pc, #28]	; (baf4 <ev_dma_epout0_handler+0x90>)
    bad6:	681b      	ldr	r3, [r3, #0]
    bad8:	a801      	add	r0, sp, #4
    bada:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    badc:	b003      	add	sp, #12
    bade:	f85d fb04 	ldr.w	pc, [sp], #4
    bae2:	bf00      	nop
    bae4:	40027c1c 	.word	0x40027c1c
    bae8:	20002f80 	.word	0x20002f80
    baec:	200028fc 	.word	0x200028fc
    baf0:	20002888 	.word	0x20002888
    baf4:	20002a1c 	.word	0x20002a1c

0000baf8 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    baf8:	4b02      	ldr	r3, [pc, #8]	; (bb04 <nrfx_usbd_setup_clear+0xc>)
    bafa:	2201      	movs	r2, #1
    bafc:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    bafe:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
    bb00:	4770      	bx	lr
    bb02:	bf00      	nop
    bb04:	40027050 	.word	0x40027050

0000bb08 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    bb08:	4b02      	ldr	r3, [pc, #8]	; (bb14 <nrfx_usbd_setup_stall+0xc>)
    bb0a:	2201      	movs	r2, #1
    bb0c:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    bb0e:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
    bb10:	4770      	bx	lr
    bb12:	bf00      	nop
    bb14:	40027054 	.word	0x40027054

0000bb18 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
    bb18:	4b01      	ldr	r3, [pc, #4]	; (bb20 <nrfx_usbd_last_setup_dir_get+0x8>)
    bb1a:	7818      	ldrb	r0, [r3, #0]
    bb1c:	4770      	bx	lr
    bb1e:	bf00      	nop
    bb20:	20002f82 	.word	0x20002f82

0000bb24 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    bb24:	b410      	push	{r4}
	__asm__ volatile(
    bb26:	f04f 0320 	mov.w	r3, #32
    bb2a:	f3ef 8411 	mrs	r4, BASEPRI
    bb2e:	f383 8812 	msr	BASEPRI_MAX, r3
    bb32:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_EP_BITPOS(ep);
    bb36:	b243      	sxtb	r3, r0
    bb38:	2b00      	cmp	r3, #0
    bb3a:	db1e      	blt.n	bb7a <nrfx_usbd_transfer_out_drop+0x56>
    bb3c:	2210      	movs	r2, #16
    bb3e:	f003 030f 	and.w	r3, r3, #15
    bb42:	4413      	add	r3, r2
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
    bb44:	2201      	movs	r2, #1
    bb46:	fa02 f303 	lsl.w	r3, r2, r3
    bb4a:	490d      	ldr	r1, [pc, #52]	; (bb80 <nrfx_usbd_transfer_out_drop+0x5c>)
    bb4c:	680a      	ldr	r2, [r1, #0]
    bb4e:	ea22 0203 	bic.w	r2, r2, r3
    bb52:	600a      	str	r2, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
    bb54:	f010 0f08 	tst.w	r0, #8
    bb58:	d109      	bne.n	bb6e <nrfx_usbd_transfer_out_drop+0x4a>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    bb5a:	f000 000f 	and.w	r0, r0, #15
    bb5e:	4b09      	ldr	r3, [pc, #36]	; (bb84 <nrfx_usbd_transfer_out_drop+0x60>)
    bb60:	f500 7094 	add.w	r0, r0, #296	; 0x128
    bb64:	2200      	movs	r2, #0
    bb66:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    bb6a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	__asm__ volatile(
    bb6e:	f384 8811 	msr	BASEPRI, r4
    bb72:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    bb76:	bc10      	pop	{r4}
    bb78:	4770      	bx	lr
    return NRFX_USBD_EP_BITPOS(ep);
    bb7a:	2200      	movs	r2, #0
    bb7c:	e7df      	b.n	bb3e <nrfx_usbd_transfer_out_drop+0x1a>
    bb7e:	bf00      	nop
    bb80:	200028f8 	.word	0x200028f8
    bb84:	40027000 	.word	0x40027000

0000bb88 <ev_setup_handler>:
{
    bb88:	b5f0      	push	{r4, r5, r6, r7, lr}
    bb8a:	b083      	sub	sp, #12
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    bb8c:	4b5f      	ldr	r3, [pc, #380]	; (bd0c <ev_setup_handler+0x184>)
    bb8e:	f8d3 4480 	ldr.w	r4, [r3, #1152]	; 0x480
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    bb92:	4b5f      	ldr	r3, [pc, #380]	; (bd10 <ev_setup_handler+0x188>)
    bb94:	681b      	ldr	r3, [r3, #0]
    bb96:	43db      	mvns	r3, r3
    bb98:	b29b      	uxth	r3, r3
    bb9a:	4a5e      	ldr	r2, [pc, #376]	; (bd14 <ev_setup_handler+0x18c>)
    bb9c:	6812      	ldr	r2, [r2, #0]
    bb9e:	4313      	orrs	r3, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    bba0:	4a5d      	ldr	r2, [pc, #372]	; (bd18 <ev_setup_handler+0x190>)
    bba2:	7810      	ldrb	r0, [r2, #0]
    return NRFX_USBD_EP_BITPOS(ep);
    bba4:	f992 2000 	ldrsb.w	r2, [r2]
    bba8:	2a00      	cmp	r2, #0
    bbaa:	db2e      	blt.n	bc0a <ev_setup_handler+0x82>
    bbac:	2110      	movs	r1, #16
    bbae:	f002 020f 	and.w	r2, r2, #15
    bbb2:	4411      	add	r1, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    bbb4:	2201      	movs	r2, #1
    bbb6:	408a      	lsls	r2, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    bbb8:	4213      	tst	r3, r2
    bbba:	d128      	bne.n	bc0e <ev_setup_handler+0x86>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    bbbc:	f014 0f80 	tst.w	r4, #128	; 0x80
    bbc0:	f040 80a2 	bne.w	bd08 <ev_setup_handler+0x180>
    bbc4:	2200      	movs	r2, #0
    m_last_setup_dir =
    bbc6:	4b54      	ldr	r3, [pc, #336]	; (bd18 <ev_setup_handler+0x190>)
    bbc8:	701a      	strb	r2, [r3, #0]
    bbca:	4b52      	ldr	r3, [pc, #328]	; (bd14 <ev_setup_handler+0x18c>)
    bbcc:	f3bf 8f5b 	dmb	ish
    bbd0:	e853 2f00 	ldrex	r2, [r3]
    bbd4:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
    bbd8:	e843 2100 	strex	r1, r2, [r3]
    bbdc:	2900      	cmp	r1, #0
    bbde:	d1f7      	bne.n	bbd0 <ev_setup_handler+0x48>
    bbe0:	f3bf 8f5b 	dmb	ish
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    bbe4:	4a4a      	ldr	r2, [pc, #296]	; (bd10 <ev_setup_handler+0x188>)
    bbe6:	6813      	ldr	r3, [r2, #0]
    bbe8:	f043 0301 	orr.w	r3, r3, #1
    bbec:	6013      	str	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
    bbee:	2300      	movs	r3, #0
    bbf0:	f8ad 3005 	strh.w	r3, [sp, #5]
    bbf4:	f88d 3007 	strb.w	r3, [sp, #7]
    bbf8:	2305      	movs	r3, #5
    bbfa:	f88d 3004 	strb.w	r3, [sp, #4]
    m_event_handler(&evt);
    bbfe:	4b47      	ldr	r3, [pc, #284]	; (bd1c <ev_setup_handler+0x194>)
    bc00:	681b      	ldr	r3, [r3, #0]
    bc02:	a801      	add	r0, sp, #4
    bc04:	4798      	blx	r3
}
    bc06:	b003      	add	sp, #12
    bc08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NRFX_USBD_EP_BITPOS(ep);
    bc0a:	2100      	movs	r1, #0
    bc0c:	e7cf      	b.n	bbae <ev_setup_handler+0x26>
	__asm__ volatile(
    bc0e:	f04f 0320 	mov.w	r3, #32
    bc12:	f3ef 8611 	mrs	r6, BASEPRI
    bc16:	f383 8812 	msr	BASEPRI_MAX, r3
    bc1a:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    bc1e:	b243      	sxtb	r3, r0
    bc20:	2b00      	cmp	r3, #0
    bc22:	db26      	blt.n	bc72 <ev_setup_handler+0xea>
    bc24:	4d3e      	ldr	r5, [pc, #248]	; (bd20 <ev_setup_handler+0x198>)
        NRF_USBD_EP_NR_GET(ep));
    bc26:	f000 020f 	and.w	r2, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    bc2a:	eb05 1502 	add.w	r5, r5, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
    bc2e:	2b00      	cmp	r3, #0
    bc30:	db24      	blt.n	bc7c <ev_setup_handler+0xf4>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    bc32:	4a38      	ldr	r2, [pc, #224]	; (bd14 <ev_setup_handler+0x18c>)
    bc34:	6812      	ldr	r2, [r2, #0]
    bc36:	43d2      	mvns	r2, r2
    return NRFX_USBD_EP_BITPOS(ep);
    bc38:	f003 030f 	and.w	r3, r3, #15
    bc3c:	3310      	adds	r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    bc3e:	40da      	lsrs	r2, r3
    bc40:	f012 0f01 	tst.w	r2, #1
    bc44:	d117      	bne.n	bc76 <ev_setup_handler+0xee>
            p_state->handler.consumer = NULL;
    bc46:	2200      	movs	r2, #0
    bc48:	602a      	str	r2, [r5, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    bc4a:	2201      	movs	r2, #1
    bc4c:	fa02 f303 	lsl.w	r3, r2, r3
    bc50:	4930      	ldr	r1, [pc, #192]	; (bd14 <ev_setup_handler+0x18c>)
    bc52:	680a      	ldr	r2, [r1, #0]
    bc54:	ea22 0203 	bic.w	r2, r2, r3
    bc58:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    bc5a:	492d      	ldr	r1, [pc, #180]	; (bd10 <ev_setup_handler+0x188>)
    bc5c:	680a      	ldr	r2, [r1, #0]
    bc5e:	ea22 0303 	bic.w	r3, r2, r3
    bc62:	600b      	str	r3, [r1, #0]
        p_state->status = NRFX_USBD_EP_ABORTED;
    bc64:	2303      	movs	r3, #3
    bc66:	73ab      	strb	r3, [r5, #14]
	__asm__ volatile(
    bc68:	f386 8811 	msr	BASEPRI, r6
    bc6c:	f3bf 8f6f 	isb	sy
}
    bc70:	e7a4      	b.n	bbbc <ev_setup_handler+0x34>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    bc72:	4d2c      	ldr	r5, [pc, #176]	; (bd24 <ev_setup_handler+0x19c>)
    bc74:	e7d7      	b.n	bc26 <ev_setup_handler+0x9e>
            nrfx_usbd_transfer_out_drop(ep);
    bc76:	f7ff ff55 	bl	bb24 <nrfx_usbd_transfer_out_drop>
    bc7a:	e7f3      	b.n	bc64 <ev_setup_handler+0xdc>
        if(!NRF_USBD_EPISO_CHECK(ep))
    bc7c:	f010 0f08 	tst.w	r0, #8
    bc80:	d10f      	bne.n	bca2 <ev_setup_handler+0x11a>
            if(ep != NRFX_USBD_EPIN0)
    bc82:	2880      	cmp	r0, #128	; 0x80
    bc84:	d032      	beq.n	bcec <ev_setup_handler+0x164>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    bc86:	f202 32da 	addw	r2, r2, #986	; 0x3da
    bc8a:	0052      	lsls	r2, r2, #1
    bc8c:	4926      	ldr	r1, [pc, #152]	; (bd28 <ev_setup_handler+0x1a0>)
    bc8e:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    bc90:	3104      	adds	r1, #4
    bc92:	680a      	ldr	r2, [r1, #0]
    bc94:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
    bc96:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    bc9a:	680f      	ldr	r7, [r1, #0]
    bc9c:	433a      	orrs	r2, r7
    bc9e:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    bca0:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    bca2:	4a1b      	ldr	r2, [pc, #108]	; (bd10 <ev_setup_handler+0x188>)
    bca4:	6811      	ldr	r1, [r2, #0]
    bca6:	4a1b      	ldr	r2, [pc, #108]	; (bd14 <ev_setup_handler+0x18c>)
    bca8:	6817      	ldr	r7, [r2, #0]
    bcaa:	ea67 0c01 	orn	ip, r7, r1
    return NRFX_USBD_EP_BITPOS(ep);
    bcae:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    bcb2:	2201      	movs	r2, #1
    bcb4:	fa02 f303 	lsl.w	r3, r2, r3
    bcb8:	ea1c 0f03 	tst.w	ip, r3
    bcbc:	d0d4      	beq.n	bc68 <ev_setup_handler+0xe0>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    bcbe:	ea27 0703 	bic.w	r7, r7, r3
    bcc2:	4a14      	ldr	r2, [pc, #80]	; (bd14 <ev_setup_handler+0x18c>)
    bcc4:	6017      	str	r7, [r2, #0]
            m_ep_ready       |=   1U << ep2bit(ep) ;
    bcc6:	430b      	orrs	r3, r1
    bcc8:	4a11      	ldr	r2, [pc, #68]	; (bd10 <ev_setup_handler+0x188>)
    bcca:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
    bccc:	2300      	movs	r3, #0
    bcce:	602b      	str	r3, [r5, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    bcd0:	2303      	movs	r3, #3
    bcd2:	73ab      	strb	r3, [r5, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    bcd4:	2206      	movs	r2, #6
    bcd6:	f88d 2000 	strb.w	r2, [sp]
    bcda:	f88d 0002 	strb.w	r0, [sp, #2]
    bcde:	f88d 3003 	strb.w	r3, [sp, #3]
            m_event_handler(&evt);
    bce2:	4b0e      	ldr	r3, [pc, #56]	; (bd1c <ev_setup_handler+0x194>)
    bce4:	681b      	ldr	r3, [r3, #0]
    bce6:	4668      	mov	r0, sp
    bce8:	4798      	blx	r3
    bcea:	e7bd      	b.n	bc68 <ev_setup_handler+0xe0>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    bcec:	4a0e      	ldr	r2, [pc, #56]	; (bd28 <ev_setup_handler+0x1a0>)
    bcee:	f240 71b4 	movw	r1, #1972	; 0x7b4
    bcf2:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    bcf4:	490d      	ldr	r1, [pc, #52]	; (bd2c <ev_setup_handler+0x1a4>)
    bcf6:	680a      	ldr	r2, [r1, #0]
    bcf8:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
    bcfa:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    bcfe:	680f      	ldr	r7, [r1, #0]
    bd00:	433a      	orrs	r2, r7
    bd02:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    bd04:	680a      	ldr	r2, [r1, #0]
    bd06:	e7cc      	b.n	bca2 <ev_setup_handler+0x11a>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    bd08:	2280      	movs	r2, #128	; 0x80
    bd0a:	e75c      	b.n	bbc6 <ev_setup_handler+0x3e>
    bd0c:	40027000 	.word	0x40027000
    bd10:	200028f8 	.word	0x200028f8
    bd14:	20002888 	.word	0x20002888
    bd18:	20002f82 	.word	0x20002f82
    bd1c:	20002a1c 	.word	0x20002a1c
    bd20:	200028fc 	.word	0x200028fc
    bd24:	2000298c 	.word	0x2000298c
    bd28:	40027800 	.word	0x40027800
    bd2c:	40027804 	.word	0x40027804

0000bd30 <nrfx_usbd_irq_handler>:
{
    bd30:	b570      	push	{r4, r5, r6, lr}
    return p_reg->INTENSET;
    bd32:	4b22      	ldr	r3, [pc, #136]	; (bdbc <nrfx_usbd_irq_handler+0x8c>)
    bd34:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
    uint32_t active = 0;
    bd38:	2500      	movs	r5, #0
    while (to_process)
    bd3a:	e006      	b.n	bd4a <nrfx_usbd_irq_handler+0x1a>
    return 32U;
    bd3c:	2220      	movs	r2, #32
    bd3e:	e00b      	b.n	bd58 <nrfx_usbd_irq_handler+0x28>
        to_process &= ~(1UL << event_nr);
    bd40:	2301      	movs	r3, #1
    bd42:	fa03 f202 	lsl.w	r2, r3, r2
    bd46:	ea21 0102 	bic.w	r1, r1, r2
    while (to_process)
    bd4a:	b1c1      	cbz	r1, bd7e <nrfx_usbd_irq_handler+0x4e>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    bd4c:	fa91 f2a1 	rbit	r2, r1
  if (value == 0U)
    bd50:	2a00      	cmp	r2, #0
    bd52:	d0f3      	beq.n	bd3c <nrfx_usbd_irq_handler+0xc>
  return __builtin_clz(value);
    bd54:	fab2 f282 	clz	r2, r2
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    bd58:	f102 0340 	add.w	r3, r2, #64	; 0x40
    bd5c:	009b      	lsls	r3, r3, #2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    bd5e:	b29b      	uxth	r3, r3
    bd60:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    bd64:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    bd68:	6818      	ldr	r0, [r3, #0]
    if (ret)
    bd6a:	b110      	cbz	r0, bd72 <nrfx_usbd_irq_handler+0x42>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    bd6c:	2400      	movs	r4, #0
    bd6e:	601c      	str	r4, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    bd70:	681b      	ldr	r3, [r3, #0]
        if (nrf_usbd_event_get_and_clear(NRF_USBD,
    bd72:	2800      	cmp	r0, #0
    bd74:	d0e4      	beq.n	bd40 <nrfx_usbd_irq_handler+0x10>
            active |= 1UL << event_nr;
    bd76:	2301      	movs	r3, #1
    bd78:	4093      	lsls	r3, r2
    bd7a:	431d      	orrs	r5, r3
    bd7c:	e7e0      	b.n	bd40 <nrfx_usbd_irq_handler+0x10>
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    bd7e:	f405 0600 	and.w	r6, r5, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    bd82:	f425 0500 	bic.w	r5, r5, #8388608	; 0x800000
    while (active)
    bd86:	e00a      	b.n	bd9e <nrfx_usbd_irq_handler+0x6e>
    bd88:	fab4 f484 	clz	r4, r4
        m_isr[event_nr]();
    bd8c:	4b0c      	ldr	r3, [pc, #48]	; (bdc0 <nrfx_usbd_irq_handler+0x90>)
    bd8e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    bd92:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    bd94:	2301      	movs	r3, #1
    bd96:	fa03 f404 	lsl.w	r4, r3, r4
    bd9a:	ea25 0504 	bic.w	r5, r5, r4
    while (active)
    bd9e:	b12d      	cbz	r5, bdac <nrfx_usbd_irq_handler+0x7c>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    bda0:	fa95 f4a5 	rbit	r4, r5
  if (value == 0U)
    bda4:	2c00      	cmp	r4, #0
    bda6:	d1ef      	bne.n	bd88 <nrfx_usbd_irq_handler+0x58>
    return 32U;
    bda8:	2420      	movs	r4, #32
    bdaa:	e7ef      	b.n	bd8c <nrfx_usbd_irq_handler+0x5c>
    usbd_dmareq_process();
    bdac:	f7ff fad8 	bl	b360 <usbd_dmareq_process>
    if (setup_active)
    bdb0:	b906      	cbnz	r6, bdb4 <nrfx_usbd_irq_handler+0x84>
}
    bdb2:	bd70      	pop	{r4, r5, r6, pc}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    bdb4:	f7ff fee8 	bl	bb88 <ev_setup_handler>
}
    bdb8:	e7fb      	b.n	bdb2 <nrfx_usbd_irq_handler+0x82>
    bdba:	bf00      	nop
    bdbc:	40027000 	.word	0x40027000
    bdc0:	000174d4 	.word	0x000174d4

0000bdc4 <nrfx_usbd_ep_enable>:
{
    bdc4:	b538      	push	{r3, r4, r5, lr}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    bdc6:	b244      	sxtb	r4, r0
    bdc8:	2c00      	cmp	r4, #0
    bdca:	db22      	blt.n	be12 <nrfx_usbd_ep_enable+0x4e>
    bdcc:	4b26      	ldr	r3, [pc, #152]	; (be68 <nrfx_usbd_ep_enable+0xa4>)
    bdce:	f000 010f 	and.w	r1, r0, #15
    bdd2:	5c5a      	ldrb	r2, [r3, r1]
    bdd4:	2301      	movs	r3, #1
    bdd6:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
    bdd8:	4a24      	ldr	r2, [pc, #144]	; (be6c <nrfx_usbd_ep_enable+0xa8>)
    bdda:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    if (NRF_USBD_EPIN_CHECK(ep))
    bdde:	2c00      	cmp	r4, #0
    bde0:	db19      	blt.n	be16 <nrfx_usbd_ep_enable+0x52>
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
    bde2:	4b22      	ldr	r3, [pc, #136]	; (be6c <nrfx_usbd_ep_enable+0xa8>)
    bde4:	f8d3 3514 	ldr.w	r3, [r3, #1300]	; 0x514
    bde8:	40cb      	lsrs	r3, r1
    bdea:	f003 0301 	and.w	r3, r3, #1
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    bdee:	b97b      	cbnz	r3, be10 <nrfx_usbd_ep_enable+0x4c>
    if (NRF_USBD_EPIN_CHECK(ep))
    bdf0:	2c00      	cmp	r4, #0
    bdf2:	db16      	blt.n	be22 <nrfx_usbd_ep_enable+0x5e>
        p_reg->EPOUTEN |= 1UL << epnr;
    bdf4:	4d1d      	ldr	r5, [pc, #116]	; (be6c <nrfx_usbd_ep_enable+0xa8>)
    bdf6:	f8d5 3514 	ldr.w	r3, [r5, #1300]	; 0x514
    bdfa:	2201      	movs	r2, #1
    bdfc:	408a      	lsls	r2, r1
    bdfe:	4313      	orrs	r3, r2
    be00:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    be04:	b121      	cbz	r1, be10 <nrfx_usbd_ep_enable+0x4c>
    be06:	2c00      	cmp	r4, #0
    be08:	db02      	blt.n	be10 <nrfx_usbd_ep_enable+0x4c>
        NRF_USBD_EPOUT_CHECK(ep) &&
    be0a:	f010 0f08 	tst.w	r0, #8
    be0e:	d011      	beq.n	be34 <nrfx_usbd_ep_enable+0x70>
}
    be10:	bd38      	pop	{r3, r4, r5, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    be12:	4b17      	ldr	r3, [pc, #92]	; (be70 <nrfx_usbd_ep_enable+0xac>)
    be14:	e7db      	b.n	bdce <nrfx_usbd_ep_enable+0xa>
        return 0 != (p_reg->EPINEN & (1UL << epnr));
    be16:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    be1a:	40cb      	lsrs	r3, r1
    be1c:	f003 0301 	and.w	r3, r3, #1
    be20:	e7e5      	b.n	bdee <nrfx_usbd_ep_enable+0x2a>
        p_reg->EPINEN |= 1UL << epnr;
    be22:	4d12      	ldr	r5, [pc, #72]	; (be6c <nrfx_usbd_ep_enable+0xa8>)
    be24:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510
    be28:	2201      	movs	r2, #1
    be2a:	408a      	lsls	r2, r1
    be2c:	4313      	orrs	r3, r2
    be2e:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
    be32:	e7e7      	b.n	be04 <nrfx_usbd_ep_enable+0x40>
	__asm__ volatile(
    be34:	f04f 0320 	mov.w	r3, #32
    be38:	f3ef 8511 	mrs	r5, BASEPRI
    be3c:	f383 8812 	msr	BASEPRI_MAX, r3
    be40:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    be44:	f7ff fe6e 	bl	bb24 <nrfx_usbd_transfer_out_drop>
    return NRFX_USBD_EP_BITPOS(ep);
    be48:	f004 040f 	and.w	r4, r4, #15
    be4c:	3410      	adds	r4, #16
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    be4e:	2301      	movs	r3, #1
    be50:	fa03 f404 	lsl.w	r4, r3, r4
    be54:	4a07      	ldr	r2, [pc, #28]	; (be74 <nrfx_usbd_ep_enable+0xb0>)
    be56:	6813      	ldr	r3, [r2, #0]
    be58:	ea23 0304 	bic.w	r3, r3, r4
    be5c:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    be5e:	f385 8811 	msr	BASEPRI, r5
    be62:	f3bf 8f6f 	isb	sy
}
    be66:	e7d3      	b.n	be10 <nrfx_usbd_ep_enable+0x4c>
    be68:	000174b4 	.word	0x000174b4
    be6c:	40027000 	.word	0x40027000
    be70:	00017494 	.word	0x00017494
    be74:	20002888 	.word	0x20002888

0000be78 <nrfx_usbd_ep_stall_clear>:
{
    be78:	b510      	push	{r4, lr}
    be7a:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    be7c:	f010 0f80 	tst.w	r0, #128	; 0x80
    be80:	d003      	beq.n	be8a <nrfx_usbd_ep_stall_clear+0x12>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    be82:	4b06      	ldr	r3, [pc, #24]	; (be9c <nrfx_usbd_ep_stall_clear+0x24>)
    be84:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
    be88:	bd10      	pop	{r4, pc}
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    be8a:	f7ff fd8b 	bl	b9a4 <nrfx_usbd_ep_stall_check>
    be8e:	2800      	cmp	r0, #0
    be90:	d0f7      	beq.n	be82 <nrfx_usbd_ep_stall_clear+0xa>
        nrfx_usbd_transfer_out_drop(ep);
    be92:	4620      	mov	r0, r4
    be94:	f7ff fe46 	bl	bb24 <nrfx_usbd_transfer_out_drop>
    be98:	e7f3      	b.n	be82 <nrfx_usbd_ep_stall_clear+0xa>
    be9a:	bf00      	nop
    be9c:	40027000 	.word	0x40027000

0000bea0 <usbd_ep_abort_all>:
{
    bea0:	b5f0      	push	{r4, r5, r6, r7, lr}
    bea2:	b083      	sub	sp, #12
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    bea4:	4b59      	ldr	r3, [pc, #356]	; (c00c <usbd_ep_abort_all+0x16c>)
    bea6:	885b      	ldrh	r3, [r3, #2]
    bea8:	4a59      	ldr	r2, [pc, #356]	; (c010 <usbd_ep_abort_all+0x170>)
    beaa:	6815      	ldr	r5, [r2, #0]
    beac:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    while (0 != ep_waiting)
    beb0:	e016      	b.n	bee0 <usbd_ep_abort_all+0x40>
    beb2:	2420      	movs	r4, #32
    beb4:	e01f      	b.n	bef6 <usbd_ep_abort_all+0x56>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    beb6:	f044 0380 	orr.w	r3, r4, #128	; 0x80
    beba:	e01f      	b.n	befc <usbd_ep_abort_all+0x5c>
    bebc:	f044 0080 	orr.w	r0, r4, #128	; 0x80
    bec0:	e024      	b.n	bf0c <usbd_ep_abort_all+0x6c>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    bec2:	4e54      	ldr	r6, [pc, #336]	; (c014 <usbd_ep_abort_all+0x174>)
    bec4:	e02e      	b.n	bf24 <usbd_ep_abort_all+0x84>
            nrfx_usbd_transfer_out_drop(ep);
    bec6:	f7ff fe2d 	bl	bb24 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
    beca:	2303      	movs	r3, #3
    becc:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
    bece:	f387 8811 	msr	BASEPRI, r7
    bed2:	f3bf 8f6f 	isb	sy
        ep_waiting &= ~(1U << bitpos);
    bed6:	2301      	movs	r3, #1
    bed8:	fa03 f404 	lsl.w	r4, r3, r4
    bedc:	ea25 0504 	bic.w	r5, r5, r4
    while (0 != ep_waiting)
    bee0:	2d00      	cmp	r5, #0
    bee2:	f000 808c 	beq.w	bffe <usbd_ep_abort_all+0x15e>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    bee6:	fa95 f4a5 	rbit	r4, r5
  if (value == 0U)
    beea:	2c00      	cmp	r4, #0
    beec:	d0e1      	beq.n	beb2 <usbd_ep_abort_all+0x12>
  return __builtin_clz(value);
    beee:	fab4 f484 	clz	r4, r4
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    bef2:	2c0f      	cmp	r4, #15
    bef4:	d9df      	bls.n	beb6 <usbd_ep_abort_all+0x16>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    bef6:	f1a4 0310 	sub.w	r3, r4, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    befa:	b2db      	uxtb	r3, r3
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    befc:	f013 0f08 	tst.w	r3, #8
    bf00:	d1e9      	bne.n	bed6 <usbd_ep_abort_all+0x36>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    bf02:	2c0f      	cmp	r4, #15
    bf04:	d9da      	bls.n	bebc <usbd_ep_abort_all+0x1c>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    bf06:	f1a4 0010 	sub.w	r0, r4, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    bf0a:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
    bf0c:	f04f 0320 	mov.w	r3, #32
    bf10:	f3ef 8711 	mrs	r7, BASEPRI
    bf14:	f383 8812 	msr	BASEPRI_MAX, r3
    bf18:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    bf1c:	b243      	sxtb	r3, r0
    bf1e:	2b00      	cmp	r3, #0
    bf20:	dbcf      	blt.n	bec2 <usbd_ep_abort_all+0x22>
    bf22:	4e3d      	ldr	r6, [pc, #244]	; (c018 <usbd_ep_abort_all+0x178>)
        NRF_USBD_EP_NR_GET(ep));
    bf24:	f000 020f 	and.w	r2, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    bf28:	eb06 1602 	add.w	r6, r6, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
    bf2c:	2b00      	cmp	r3, #0
    bf2e:	db19      	blt.n	bf64 <usbd_ep_abort_all+0xc4>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    bf30:	4a37      	ldr	r2, [pc, #220]	; (c010 <usbd_ep_abort_all+0x170>)
    bf32:	6812      	ldr	r2, [r2, #0]
    bf34:	43d2      	mvns	r2, r2
    return NRFX_USBD_EP_BITPOS(ep);
    bf36:	f003 030f 	and.w	r3, r3, #15
    bf3a:	3310      	adds	r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    bf3c:	40da      	lsrs	r2, r3
    bf3e:	f012 0f01 	tst.w	r2, #1
    bf42:	d1c0      	bne.n	bec6 <usbd_ep_abort_all+0x26>
            p_state->handler.consumer = NULL;
    bf44:	2200      	movs	r2, #0
    bf46:	6032      	str	r2, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    bf48:	2201      	movs	r2, #1
    bf4a:	fa02 f303 	lsl.w	r3, r2, r3
    bf4e:	4930      	ldr	r1, [pc, #192]	; (c010 <usbd_ep_abort_all+0x170>)
    bf50:	680a      	ldr	r2, [r1, #0]
    bf52:	ea22 0203 	bic.w	r2, r2, r3
    bf56:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    bf58:	492c      	ldr	r1, [pc, #176]	; (c00c <usbd_ep_abort_all+0x16c>)
    bf5a:	680a      	ldr	r2, [r1, #0]
    bf5c:	ea22 0303 	bic.w	r3, r2, r3
    bf60:	600b      	str	r3, [r1, #0]
    bf62:	e7b2      	b.n	beca <usbd_ep_abort_all+0x2a>
        if(!NRF_USBD_EPISO_CHECK(ep))
    bf64:	f010 0f08 	tst.w	r0, #8
    bf68:	d111      	bne.n	bf8e <usbd_ep_abort_all+0xee>
            if(ep != NRFX_USBD_EPIN0)
    bf6a:	2880      	cmp	r0, #128	; 0x80
    bf6c:	d037      	beq.n	bfde <usbd_ep_abort_all+0x13e>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    bf6e:	f202 32da 	addw	r2, r2, #986	; 0x3da
    bf72:	0052      	lsls	r2, r2, #1
    bf74:	4929      	ldr	r1, [pc, #164]	; (c01c <usbd_ep_abort_all+0x17c>)
    bf76:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    bf78:	3104      	adds	r1, #4
    bf7a:	680a      	ldr	r2, [r1, #0]
    bf7c:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
    bf7e:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    bf82:	f8d1 c000 	ldr.w	ip, [r1]
    bf86:	ea42 020c 	orr.w	r2, r2, ip
    bf8a:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    bf8c:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    bf8e:	4a1f      	ldr	r2, [pc, #124]	; (c00c <usbd_ep_abort_all+0x16c>)
    bf90:	6811      	ldr	r1, [r2, #0]
    bf92:	4a1f      	ldr	r2, [pc, #124]	; (c010 <usbd_ep_abort_all+0x170>)
    bf94:	f8d2 c000 	ldr.w	ip, [r2]
    bf98:	ea6c 0e01 	orn	lr, ip, r1
    return NRFX_USBD_EP_BITPOS(ep);
    bf9c:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    bfa0:	2201      	movs	r2, #1
    bfa2:	fa02 f303 	lsl.w	r3, r2, r3
    bfa6:	ea1e 0f03 	tst.w	lr, r3
    bfaa:	d090      	beq.n	bece <usbd_ep_abort_all+0x2e>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    bfac:	ea2c 0203 	bic.w	r2, ip, r3
    bfb0:	f8df c05c 	ldr.w	ip, [pc, #92]	; c010 <usbd_ep_abort_all+0x170>
    bfb4:	f8cc 2000 	str.w	r2, [ip]
            m_ep_ready       |=   1U << ep2bit(ep) ;
    bfb8:	430b      	orrs	r3, r1
    bfba:	4a14      	ldr	r2, [pc, #80]	; (c00c <usbd_ep_abort_all+0x16c>)
    bfbc:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
    bfbe:	2300      	movs	r3, #0
    bfc0:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    bfc2:	2303      	movs	r3, #3
    bfc4:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    bfc6:	2206      	movs	r2, #6
    bfc8:	f88d 2004 	strb.w	r2, [sp, #4]
    bfcc:	f88d 0006 	strb.w	r0, [sp, #6]
    bfd0:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    bfd4:	4b12      	ldr	r3, [pc, #72]	; (c020 <usbd_ep_abort_all+0x180>)
    bfd6:	681b      	ldr	r3, [r3, #0]
    bfd8:	a801      	add	r0, sp, #4
    bfda:	4798      	blx	r3
    bfdc:	e777      	b.n	bece <usbd_ep_abort_all+0x2e>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    bfde:	4a0f      	ldr	r2, [pc, #60]	; (c01c <usbd_ep_abort_all+0x17c>)
    bfe0:	f240 71b4 	movw	r1, #1972	; 0x7b4
    bfe4:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    bfe6:	490f      	ldr	r1, [pc, #60]	; (c024 <usbd_ep_abort_all+0x184>)
    bfe8:	680a      	ldr	r2, [r1, #0]
    bfea:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
    bfec:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    bff0:	f8d1 c000 	ldr.w	ip, [r1]
    bff4:	ea42 020c 	orr.w	r2, r2, ip
    bff8:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    bffa:	680a      	ldr	r2, [r1, #0]
    bffc:	e7c7      	b.n	bf8e <usbd_ep_abort_all+0xee>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    bffe:	4b03      	ldr	r3, [pc, #12]	; (c00c <usbd_ep_abort_all+0x16c>)
    c000:	f240 12ff 	movw	r2, #511	; 0x1ff
    c004:	601a      	str	r2, [r3, #0]
}
    c006:	b003      	add	sp, #12
    c008:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c00a:	bf00      	nop
    c00c:	200028f8 	.word	0x200028f8
    c010:	20002888 	.word	0x20002888
    c014:	2000298c 	.word	0x2000298c
    c018:	200028fc 	.word	0x200028fc
    c01c:	40027800 	.word	0x40027800
    c020:	20002a1c 	.word	0x20002a1c
    c024:	40027804 	.word	0x40027804

0000c028 <nrfx_usbd_stop>:
{
    c028:	b510      	push	{r4, lr}
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c02a:	4b0c      	ldr	r3, [pc, #48]	; (c05c <nrfx_usbd_stop+0x34>)
    c02c:	2280      	movs	r2, #128	; 0x80
    c02e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    c032:	2027      	movs	r0, #39	; 0x27
    c034:	f7f9 f884 	bl	5140 <arch_irq_is_enabled>
    c038:	b900      	cbnz	r0, c03c <nrfx_usbd_stop+0x14>
}
    c03a:	bd10      	pop	{r4, pc}
        usbd_ep_abort_all();
    c03c:	f7ff ff30 	bl	bea0 <usbd_ep_abort_all>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    c040:	4c07      	ldr	r4, [pc, #28]	; (c060 <nrfx_usbd_stop+0x38>)
    c042:	2300      	movs	r3, #0
    c044:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    c048:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
    c04c:	2027      	movs	r0, #39	; 0x27
    c04e:	f7f9 f863 	bl	5118 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    c052:	f04f 33ff 	mov.w	r3, #4294967295
    c056:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
    c05a:	e7ee      	b.n	c03a <nrfx_usbd_stop+0x12>
    c05c:	e000e100 	.word	0xe000e100
    c060:	40027000 	.word	0x40027000

0000c064 <nrfx_usbd_disable>:
{
    c064:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
    c066:	f7ff ffdf 	bl	c028 <nrfx_usbd_stop>
    return p_reg->INTENSET;
    c06a:	4b0b      	ldr	r3, [pc, #44]	; (c098 <nrfx_usbd_disable+0x34>)
    c06c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
    c070:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    c074:	2200      	movs	r2, #0
    c076:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    c07a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    c07e:	f7fe faff 	bl	a680 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    c082:	b110      	cbz	r0, c08a <nrfx_usbd_disable+0x26>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    c084:	4b05      	ldr	r3, [pc, #20]	; (c09c <nrfx_usbd_disable+0x38>)
    c086:	2200      	movs	r2, #0
    c088:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    c08a:	4b05      	ldr	r3, [pc, #20]	; (c0a0 <nrfx_usbd_disable+0x3c>)
    c08c:	2200      	movs	r2, #0
    c08e:	701a      	strb	r2, [r3, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    c090:	4b04      	ldr	r3, [pc, #16]	; (c0a4 <nrfx_usbd_disable+0x40>)
    c092:	2201      	movs	r2, #1
    c094:	701a      	strb	r2, [r3, #0]
}
    c096:	bd08      	pop	{r3, pc}
    c098:	40027000 	.word	0x40027000
    c09c:	40027c1c 	.word	0x40027c1c
    c0a0:	20002f80 	.word	0x20002f80
    c0a4:	20002f81 	.word	0x20002f81

0000c0a8 <nrfx_usbd_suspend>:
{
    c0a8:	b538      	push	{r3, r4, r5, lr}
    c0aa:	f04f 0320 	mov.w	r3, #32
    c0ae:	f3ef 8511 	mrs	r5, BASEPRI
    c0b2:	f383 8812 	msr	BASEPRI_MAX, r3
    c0b6:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
    c0ba:	4b13      	ldr	r3, [pc, #76]	; (c108 <nrfx_usbd_suspend+0x60>)
    c0bc:	781b      	ldrb	r3, [r3, #0]
    c0be:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    c0c2:	b92b      	cbnz	r3, c0d0 <nrfx_usbd_suspend+0x28>
	__asm__ volatile(
    c0c4:	f385 8811 	msr	BASEPRI, r5
    c0c8:	f3bf 8f6f 	isb	sy
}
    c0cc:	4620      	mov	r0, r4
    c0ce:	bd38      	pop	{r3, r4, r5, pc}
        usbd_ep_abort_all();
    c0d0:	f7ff fee6 	bl	bea0 <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
    c0d4:	4b0d      	ldr	r3, [pc, #52]	; (c10c <nrfx_usbd_suspend+0x64>)
    c0d6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    c0da:	f413 7f00 	tst.w	r3, #512	; 0x200
    c0de:	d111      	bne.n	c104 <nrfx_usbd_suspend+0x5c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    c0e0:	4b0a      	ldr	r3, [pc, #40]	; (c10c <nrfx_usbd_suspend+0x64>)
    c0e2:	2201      	movs	r2, #1
    c0e4:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    c0e8:	f8d3 252c 	ldr.w	r2, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
    c0ec:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    c0f0:	f413 7f00 	tst.w	r3, #512	; 0x200
    c0f4:	d0e6      	beq.n	c0c4 <nrfx_usbd_suspend+0x1c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    c0f6:	4b05      	ldr	r3, [pc, #20]	; (c10c <nrfx_usbd_suspend+0x64>)
    c0f8:	2400      	movs	r4, #0
    c0fa:	f8c3 452c 	str.w	r4, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    c0fe:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
}
    c102:	e7df      	b.n	c0c4 <nrfx_usbd_suspend+0x1c>
    bool suspended = false;
    c104:	2400      	movs	r4, #0
    c106:	e7dd      	b.n	c0c4 <nrfx_usbd_suspend+0x1c>
    c108:	20002f7f 	.word	0x20002f7f
    c10c:	40027000 	.word	0x40027000

0000c110 <nrfx_usbd_ep_abort>:
{
    c110:	b5f0      	push	{r4, r5, r6, r7, lr}
    c112:	b083      	sub	sp, #12
	__asm__ volatile(
    c114:	f04f 0320 	mov.w	r3, #32
    c118:	f3ef 8511 	mrs	r5, BASEPRI
    c11c:	f383 8812 	msr	BASEPRI_MAX, r3
    c120:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    c124:	b243      	sxtb	r3, r0
    c126:	2b00      	cmp	r3, #0
    c128:	db27      	blt.n	c17a <nrfx_usbd_ep_abort+0x6a>
    c12a:	4c39      	ldr	r4, [pc, #228]	; (c210 <nrfx_usbd_ep_abort+0x100>)
        NRF_USBD_EP_NR_GET(ep));
    c12c:	f000 020f 	and.w	r2, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    c130:	eb04 1402 	add.w	r4, r4, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
    c134:	2b00      	cmp	r3, #0
    c136:	db25      	blt.n	c184 <nrfx_usbd_ep_abort+0x74>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    c138:	4a36      	ldr	r2, [pc, #216]	; (c214 <nrfx_usbd_ep_abort+0x104>)
    c13a:	6812      	ldr	r2, [r2, #0]
    c13c:	43d2      	mvns	r2, r2
    return NRFX_USBD_EP_BITPOS(ep);
    c13e:	f003 030f 	and.w	r3, r3, #15
    c142:	3310      	adds	r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    c144:	40da      	lsrs	r2, r3
    c146:	f012 0f01 	tst.w	r2, #1
    c14a:	d118      	bne.n	c17e <nrfx_usbd_ep_abort+0x6e>
            p_state->handler.consumer = NULL;
    c14c:	2200      	movs	r2, #0
    c14e:	6022      	str	r2, [r4, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    c150:	2201      	movs	r2, #1
    c152:	fa02 f303 	lsl.w	r3, r2, r3
    c156:	492f      	ldr	r1, [pc, #188]	; (c214 <nrfx_usbd_ep_abort+0x104>)
    c158:	680a      	ldr	r2, [r1, #0]
    c15a:	ea22 0203 	bic.w	r2, r2, r3
    c15e:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    c160:	492d      	ldr	r1, [pc, #180]	; (c218 <nrfx_usbd_ep_abort+0x108>)
    c162:	680a      	ldr	r2, [r1, #0]
    c164:	ea22 0303 	bic.w	r3, r2, r3
    c168:	600b      	str	r3, [r1, #0]
        p_state->status = NRFX_USBD_EP_ABORTED;
    c16a:	2303      	movs	r3, #3
    c16c:	73a3      	strb	r3, [r4, #14]
	__asm__ volatile(
    c16e:	f385 8811 	msr	BASEPRI, r5
    c172:	f3bf 8f6f 	isb	sy
}
    c176:	b003      	add	sp, #12
    c178:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    c17a:	4c28      	ldr	r4, [pc, #160]	; (c21c <nrfx_usbd_ep_abort+0x10c>)
    c17c:	e7d6      	b.n	c12c <nrfx_usbd_ep_abort+0x1c>
            nrfx_usbd_transfer_out_drop(ep);
    c17e:	f7ff fcd1 	bl	bb24 <nrfx_usbd_transfer_out_drop>
    c182:	e7f2      	b.n	c16a <nrfx_usbd_ep_abort+0x5a>
        if(!NRF_USBD_EPISO_CHECK(ep))
    c184:	f010 0f08 	tst.w	r0, #8
    c188:	d10f      	bne.n	c1aa <nrfx_usbd_ep_abort+0x9a>
            if(ep != NRFX_USBD_EPIN0)
    c18a:	2880      	cmp	r0, #128	; 0x80
    c18c:	d031      	beq.n	c1f2 <nrfx_usbd_ep_abort+0xe2>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    c18e:	f202 32da 	addw	r2, r2, #986	; 0x3da
    c192:	0052      	lsls	r2, r2, #1
    c194:	4922      	ldr	r1, [pc, #136]	; (c220 <nrfx_usbd_ep_abort+0x110>)
    c196:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    c198:	3104      	adds	r1, #4
    c19a:	680a      	ldr	r2, [r1, #0]
    c19c:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
    c19e:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    c1a2:	680e      	ldr	r6, [r1, #0]
    c1a4:	4332      	orrs	r2, r6
    c1a6:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    c1a8:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    c1aa:	4a1b      	ldr	r2, [pc, #108]	; (c218 <nrfx_usbd_ep_abort+0x108>)
    c1ac:	6811      	ldr	r1, [r2, #0]
    c1ae:	4a19      	ldr	r2, [pc, #100]	; (c214 <nrfx_usbd_ep_abort+0x104>)
    c1b0:	6816      	ldr	r6, [r2, #0]
    c1b2:	ea66 0701 	orn	r7, r6, r1
    return NRFX_USBD_EP_BITPOS(ep);
    c1b6:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    c1ba:	2201      	movs	r2, #1
    c1bc:	fa02 f303 	lsl.w	r3, r2, r3
    c1c0:	421f      	tst	r7, r3
    c1c2:	d0d4      	beq.n	c16e <nrfx_usbd_ep_abort+0x5e>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    c1c4:	ea26 0603 	bic.w	r6, r6, r3
    c1c8:	4a12      	ldr	r2, [pc, #72]	; (c214 <nrfx_usbd_ep_abort+0x104>)
    c1ca:	6016      	str	r6, [r2, #0]
            m_ep_ready       |=   1U << ep2bit(ep) ;
    c1cc:	430b      	orrs	r3, r1
    c1ce:	4a12      	ldr	r2, [pc, #72]	; (c218 <nrfx_usbd_ep_abort+0x108>)
    c1d0:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
    c1d2:	2300      	movs	r3, #0
    c1d4:	6023      	str	r3, [r4, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    c1d6:	2303      	movs	r3, #3
    c1d8:	73a3      	strb	r3, [r4, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    c1da:	2206      	movs	r2, #6
    c1dc:	f88d 2004 	strb.w	r2, [sp, #4]
    c1e0:	f88d 0006 	strb.w	r0, [sp, #6]
    c1e4:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    c1e8:	4b0e      	ldr	r3, [pc, #56]	; (c224 <nrfx_usbd_ep_abort+0x114>)
    c1ea:	681b      	ldr	r3, [r3, #0]
    c1ec:	a801      	add	r0, sp, #4
    c1ee:	4798      	blx	r3
    c1f0:	e7bd      	b.n	c16e <nrfx_usbd_ep_abort+0x5e>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    c1f2:	4a0b      	ldr	r2, [pc, #44]	; (c220 <nrfx_usbd_ep_abort+0x110>)
    c1f4:	f240 71b4 	movw	r1, #1972	; 0x7b4
    c1f8:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    c1fa:	490b      	ldr	r1, [pc, #44]	; (c228 <nrfx_usbd_ep_abort+0x118>)
    c1fc:	680a      	ldr	r2, [r1, #0]
    c1fe:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
    c200:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    c204:	680e      	ldr	r6, [r1, #0]
    c206:	4332      	orrs	r2, r6
    c208:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    c20a:	680a      	ldr	r2, [r1, #0]
    c20c:	e7cd      	b.n	c1aa <nrfx_usbd_ep_abort+0x9a>
    c20e:	bf00      	nop
    c210:	200028fc 	.word	0x200028fc
    c214:	20002888 	.word	0x20002888
    c218:	200028f8 	.word	0x200028f8
    c21c:	2000298c 	.word	0x2000298c
    c220:	40027800 	.word	0x40027800
    c224:	20002a1c 	.word	0x20002a1c
    c228:	40027804 	.word	0x40027804

0000c22c <nrfx_usbd_ep_disable>:
{
    c22c:	b5f0      	push	{r4, r5, r6, r7, lr}
    c22e:	b083      	sub	sp, #12
    c230:	4604      	mov	r4, r0
	__asm__ volatile(
    c232:	f04f 0320 	mov.w	r3, #32
    c236:	f3ef 8611 	mrs	r6, BASEPRI
    c23a:	f383 8812 	msr	BASEPRI_MAX, r3
    c23e:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    c242:	b243      	sxtb	r3, r0
    c244:	2b00      	cmp	r3, #0
    c246:	db3e      	blt.n	c2c6 <nrfx_usbd_ep_disable+0x9a>
    c248:	4d4a      	ldr	r5, [pc, #296]	; (c374 <nrfx_usbd_ep_disable+0x148>)
        NRF_USBD_EP_NR_GET(ep));
    c24a:	f004 020f 	and.w	r2, r4, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    c24e:	eb05 1502 	add.w	r5, r5, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
    c252:	2b00      	cmp	r3, #0
    c254:	db3d      	blt.n	c2d2 <nrfx_usbd_ep_disable+0xa6>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    c256:	4a48      	ldr	r2, [pc, #288]	; (c378 <nrfx_usbd_ep_disable+0x14c>)
    c258:	6812      	ldr	r2, [r2, #0]
    c25a:	43d2      	mvns	r2, r2
    return NRFX_USBD_EP_BITPOS(ep);
    c25c:	f003 030f 	and.w	r3, r3, #15
    c260:	3310      	adds	r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    c262:	40da      	lsrs	r2, r3
    c264:	f012 0f01 	tst.w	r2, #1
    c268:	d12f      	bne.n	c2ca <nrfx_usbd_ep_disable+0x9e>
            p_state->handler.consumer = NULL;
    c26a:	2200      	movs	r2, #0
    c26c:	602a      	str	r2, [r5, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    c26e:	2201      	movs	r2, #1
    c270:	fa02 f303 	lsl.w	r3, r2, r3
    c274:	4940      	ldr	r1, [pc, #256]	; (c378 <nrfx_usbd_ep_disable+0x14c>)
    c276:	680a      	ldr	r2, [r1, #0]
    c278:	ea22 0203 	bic.w	r2, r2, r3
    c27c:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    c27e:	493f      	ldr	r1, [pc, #252]	; (c37c <nrfx_usbd_ep_disable+0x150>)
    c280:	680a      	ldr	r2, [r1, #0]
    c282:	ea22 0303 	bic.w	r3, r2, r3
    c286:	600b      	str	r3, [r1, #0]
        p_state->status = NRFX_USBD_EP_ABORTED;
    c288:	2303      	movs	r3, #3
    c28a:	73ab      	strb	r3, [r5, #14]
	__asm__ volatile(
    c28c:	f386 8811 	msr	BASEPRI, r6
    c290:	f3bf 8f6f 	isb	sy
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    c294:	f004 030f 	and.w	r3, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    c298:	b264      	sxtb	r4, r4
    c29a:	2c00      	cmp	r4, #0
    c29c:	db5e      	blt.n	c35c <nrfx_usbd_ep_disable+0x130>
        p_reg->EPOUTEN &= ~(1UL << epnr);
    c29e:	4838      	ldr	r0, [pc, #224]	; (c380 <nrfx_usbd_ep_disable+0x154>)
    c2a0:	f8d0 2514 	ldr.w	r2, [r0, #1300]	; 0x514
    c2a4:	2101      	movs	r1, #1
    c2a6:	4099      	lsls	r1, r3
    c2a8:	ea22 0201 	bic.w	r2, r2, r1
    c2ac:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    c2b0:	2c00      	cmp	r4, #0
    c2b2:	db5d      	blt.n	c370 <nrfx_usbd_ep_disable+0x144>
    c2b4:	4a33      	ldr	r2, [pc, #204]	; (c384 <nrfx_usbd_ep_disable+0x158>)
    c2b6:	5cd2      	ldrb	r2, [r2, r3]
    c2b8:	2301      	movs	r3, #1
    c2ba:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
    c2bc:	4a30      	ldr	r2, [pc, #192]	; (c380 <nrfx_usbd_ep_disable+0x154>)
    c2be:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    c2c2:	b003      	add	sp, #12
    c2c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    c2c6:	4d30      	ldr	r5, [pc, #192]	; (c388 <nrfx_usbd_ep_disable+0x15c>)
    c2c8:	e7bf      	b.n	c24a <nrfx_usbd_ep_disable+0x1e>
            nrfx_usbd_transfer_out_drop(ep);
    c2ca:	4620      	mov	r0, r4
    c2cc:	f7ff fc2a 	bl	bb24 <nrfx_usbd_transfer_out_drop>
    c2d0:	e7da      	b.n	c288 <nrfx_usbd_ep_disable+0x5c>
        if(!NRF_USBD_EPISO_CHECK(ep))
    c2d2:	f014 0f08 	tst.w	r4, #8
    c2d6:	d10f      	bne.n	c2f8 <nrfx_usbd_ep_disable+0xcc>
            if(ep != NRFX_USBD_EPIN0)
    c2d8:	2c80      	cmp	r4, #128	; 0x80
    c2da:	d031      	beq.n	c340 <nrfx_usbd_ep_disable+0x114>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    c2dc:	f202 32da 	addw	r2, r2, #986	; 0x3da
    c2e0:	0052      	lsls	r2, r2, #1
    c2e2:	492a      	ldr	r1, [pc, #168]	; (c38c <nrfx_usbd_ep_disable+0x160>)
    c2e4:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    c2e6:	3104      	adds	r1, #4
    c2e8:	680a      	ldr	r2, [r1, #0]
    c2ea:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
    c2ec:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    c2f0:	6808      	ldr	r0, [r1, #0]
    c2f2:	4302      	orrs	r2, r0
    c2f4:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    c2f6:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    c2f8:	4a20      	ldr	r2, [pc, #128]	; (c37c <nrfx_usbd_ep_disable+0x150>)
    c2fa:	6811      	ldr	r1, [r2, #0]
    c2fc:	4a1e      	ldr	r2, [pc, #120]	; (c378 <nrfx_usbd_ep_disable+0x14c>)
    c2fe:	6810      	ldr	r0, [r2, #0]
    c300:	ea60 0701 	orn	r7, r0, r1
    return NRFX_USBD_EP_BITPOS(ep);
    c304:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    c308:	2201      	movs	r2, #1
    c30a:	fa02 f303 	lsl.w	r3, r2, r3
    c30e:	421f      	tst	r7, r3
    c310:	d0bc      	beq.n	c28c <nrfx_usbd_ep_disable+0x60>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    c312:	ea20 0003 	bic.w	r0, r0, r3
    c316:	4a18      	ldr	r2, [pc, #96]	; (c378 <nrfx_usbd_ep_disable+0x14c>)
    c318:	6010      	str	r0, [r2, #0]
            m_ep_ready       |=   1U << ep2bit(ep) ;
    c31a:	430b      	orrs	r3, r1
    c31c:	4a17      	ldr	r2, [pc, #92]	; (c37c <nrfx_usbd_ep_disable+0x150>)
    c31e:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
    c320:	2300      	movs	r3, #0
    c322:	602b      	str	r3, [r5, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    c324:	2303      	movs	r3, #3
    c326:	73ab      	strb	r3, [r5, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    c328:	2206      	movs	r2, #6
    c32a:	f88d 2004 	strb.w	r2, [sp, #4]
    c32e:	f88d 4006 	strb.w	r4, [sp, #6]
    c332:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    c336:	4b16      	ldr	r3, [pc, #88]	; (c390 <nrfx_usbd_ep_disable+0x164>)
    c338:	681b      	ldr	r3, [r3, #0]
    c33a:	a801      	add	r0, sp, #4
    c33c:	4798      	blx	r3
    c33e:	e7a5      	b.n	c28c <nrfx_usbd_ep_disable+0x60>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    c340:	4a12      	ldr	r2, [pc, #72]	; (c38c <nrfx_usbd_ep_disable+0x160>)
    c342:	f240 71b4 	movw	r1, #1972	; 0x7b4
    c346:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    c348:	4912      	ldr	r1, [pc, #72]	; (c394 <nrfx_usbd_ep_disable+0x168>)
    c34a:	680a      	ldr	r2, [r1, #0]
    c34c:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
    c34e:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    c352:	6808      	ldr	r0, [r1, #0]
    c354:	4302      	orrs	r2, r0
    c356:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    c358:	680a      	ldr	r2, [r1, #0]
    c35a:	e7cd      	b.n	c2f8 <nrfx_usbd_ep_disable+0xcc>
        p_reg->EPINEN &= ~(1UL << epnr);
    c35c:	4808      	ldr	r0, [pc, #32]	; (c380 <nrfx_usbd_ep_disable+0x154>)
    c35e:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    c362:	2101      	movs	r1, #1
    c364:	4099      	lsls	r1, r3
    c366:	ea22 0201 	bic.w	r2, r2, r1
    c36a:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    c36e:	e79f      	b.n	c2b0 <nrfx_usbd_ep_disable+0x84>
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    c370:	4a09      	ldr	r2, [pc, #36]	; (c398 <nrfx_usbd_ep_disable+0x16c>)
    c372:	e7a0      	b.n	c2b6 <nrfx_usbd_ep_disable+0x8a>
    c374:	200028fc 	.word	0x200028fc
    c378:	20002888 	.word	0x20002888
    c37c:	200028f8 	.word	0x200028f8
    c380:	40027000 	.word	0x40027000
    c384:	000174b4 	.word	0x000174b4
    c388:	2000298c 	.word	0x2000298c
    c38c:	40027800 	.word	0x40027800
    c390:	20002a1c 	.word	0x20002a1c
    c394:	40027804 	.word	0x40027804
    c398:	00017494 	.word	0x00017494

0000c39c <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    c39c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    *p_pin = pin_number & 0x1F;
    c3a0:	f000 031f 	and.w	r3, r0, #31
    return pin_number >> 5;
    c3a4:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    c3a6:	2801      	cmp	r0, #1
    c3a8:	d036      	beq.n	c418 <nrfx_twi_twim_bus_recover+0x7c>
        case 0: return NRF_P0;
    c3aa:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    c3ae:	2501      	movs	r5, #1
    c3b0:	409d      	lsls	r5, r3
    p_reg->OUTSET = set_mask;
    c3b2:	f8c6 5508 	str.w	r5, [r6, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    c3b6:	f001 081f 	and.w	r8, r1, #31
    return pin_number >> 5;
    c3ba:	0949      	lsrs	r1, r1, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    c3bc:	2901      	cmp	r1, #1
    c3be:	d02d      	beq.n	c41c <nrfx_twi_twim_bus_recover+0x80>
        case 0: return NRF_P0;
    c3c0:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    c3c4:	f04f 0901 	mov.w	r9, #1
    c3c8:	fa09 f908 	lsl.w	r9, r9, r8
    p_reg->OUTSET = set_mask;
    c3cc:	f8c7 9508 	str.w	r9, [r7, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
    c3d0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    c3d4:	f240 620d 	movw	r2, #1549	; 0x60d
    c3d8:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    c3dc:	f508 73e0 	add.w	r3, r8, #448	; 0x1c0
    c3e0:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
    nrf_gpio_pin_set(scl_pin);
    nrf_gpio_pin_set(sda_pin);

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    c3e4:	2004      	movs	r0, #4
    c3e6:	f007 fbcc 	bl	13b82 <nrfx_busy_wait>

    for (uint8_t i = 0; i < 9; i++)
    c3ea:	2400      	movs	r4, #0
    c3ec:	2c08      	cmp	r4, #8
    c3ee:	d817      	bhi.n	c420 <nrfx_twi_twim_bus_recover+0x84>
    return p_reg->IN;
    c3f0:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    c3f4:	fa23 f308 	lsr.w	r3, r3, r8
    {
        if (nrf_gpio_pin_read(sda_pin))
    c3f8:	f013 0f01 	tst.w	r3, #1
    c3fc:	d110      	bne.n	c420 <nrfx_twi_twim_bus_recover+0x84>
    p_reg->OUTCLR = clr_mask;
    c3fe:	f8c6 550c 	str.w	r5, [r6, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    c402:	2004      	movs	r0, #4
    c404:	f007 fbbd 	bl	13b82 <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
    c408:	f8c6 5508 	str.w	r5, [r6, #1288]	; 0x508
            nrf_gpio_pin_set(scl_pin);
            NRFX_DELAY_US(4);
    c40c:	2004      	movs	r0, #4
    c40e:	f007 fbb8 	bl	13b82 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    c412:	3401      	adds	r4, #1
    c414:	b2e4      	uxtb	r4, r4
    c416:	e7e9      	b.n	c3ec <nrfx_twi_twim_bus_recover+0x50>
        case 1: return NRF_P1;
    c418:	4e0c      	ldr	r6, [pc, #48]	; (c44c <nrfx_twi_twim_bus_recover+0xb0>)
    c41a:	e7c8      	b.n	c3ae <nrfx_twi_twim_bus_recover+0x12>
    c41c:	4f0b      	ldr	r7, [pc, #44]	; (c44c <nrfx_twi_twim_bus_recover+0xb0>)
    c41e:	e7d1      	b.n	c3c4 <nrfx_twi_twim_bus_recover+0x28>
    p_reg->OUTCLR = clr_mask;
    c420:	f8c7 950c 	str.w	r9, [r7, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    c424:	2004      	movs	r0, #4
    c426:	f007 fbac 	bl	13b82 <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
    c42a:	f8c7 9508 	str.w	r9, [r7, #1288]	; 0x508
    nrf_gpio_pin_set(sda_pin);
    NRFX_DELAY_US(4);
    c42e:	2004      	movs	r0, #4
    c430:	f007 fba7 	bl	13b82 <nrfx_busy_wait>
    return p_reg->IN;
    c434:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    c438:	fa23 f808 	lsr.w	r8, r3, r8

    if (nrf_gpio_pin_read(sda_pin))
    c43c:	f018 0f01 	tst.w	r8, #1
    c440:	d002      	beq.n	c448 <nrfx_twi_twim_bus_recover+0xac>
    {
        return NRFX_SUCCESS;
    c442:	4803      	ldr	r0, [pc, #12]	; (c450 <nrfx_twi_twim_bus_recover+0xb4>)
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    c444:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NRFX_ERROR_INTERNAL;
    c448:	4802      	ldr	r0, [pc, #8]	; (c454 <nrfx_twi_twim_bus_recover+0xb8>)
    c44a:	e7fb      	b.n	c444 <nrfx_twi_twim_bus_recover+0xa8>
    c44c:	50000300 	.word	0x50000300
    c450:	0bad0000 	.word	0x0bad0000
    c454:	0bad0001 	.word	0x0bad0001

0000c458 <lfs_dir_traverse_filter>:

    return 0;
}

static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
    c458:	b410      	push	{r4}
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
    c45a:	f011 5f80 	tst.w	r1, #268435456	; 0x10000000
    c45e:	d01c      	beq.n	c49a <lfs_dir_traverse_filter+0x42>
    c460:	4a19      	ldr	r2, [pc, #100]	; (c4c8 <lfs_dir_traverse_filter+0x70>)

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
    c462:	6803      	ldr	r3, [r0, #0]
    c464:	ea83 0401 	eor.w	r4, r3, r1
    c468:	4214      	tst	r4, r2
    c46a:	d024      	beq.n	c4b6 <lfs_dir_traverse_filter+0x5e>
    return ((int32_t)(tag << 22) >> 22) == -1;
    c46c:	f343 0209 	sbfx	r2, r3, #0, #10
    if ((mask & tag) == (mask & *filtertag) ||
    c470:	f1b2 3fff 	cmp.w	r2, #4294967295
    c474:	d022      	beq.n	c4bc <lfs_dir_traverse_filter+0x64>
            lfs_tag_isdelete(*filtertag) ||
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
    c476:	4c14      	ldr	r4, [pc, #80]	; (c4c8 <lfs_dir_traverse_filter+0x70>)
    c478:	400c      	ands	r4, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
    c47a:	4a14      	ldr	r2, [pc, #80]	; (c4cc <lfs_dir_traverse_filter+0x74>)
    c47c:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
    c47e:	f042 429f 	orr.w	r2, r2, #1333788672	; 0x4f800000
    c482:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
    c486:	4294      	cmp	r4, r2
    c488:	d01a      	beq.n	c4c0 <lfs_dir_traverse_filter+0x68>
    return (tag & 0x70000000) >> 20;
    c48a:	0d0a      	lsrs	r2, r1, #20
    c48c:	f402 64e0 	and.w	r4, r2, #1792	; 0x700
        return true;
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
    c490:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    c494:	d003      	beq.n	c49e <lfs_dir_traverse_filter+0x46>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    }

    return false;
    c496:	2000      	movs	r0, #0
    c498:	e00e      	b.n	c4b8 <lfs_dir_traverse_filter+0x60>
            : LFS_MKTAG(0x700, 0x3ff, 0);
    c49a:	4a0d      	ldr	r2, [pc, #52]	; (c4d0 <lfs_dir_traverse_filter+0x78>)
    c49c:	e7e1      	b.n	c462 <lfs_dir_traverse_filter+0xa>
    return (tag & 0x000ffc00) >> 10;
    c49e:	f3c1 2189 	ubfx	r1, r1, #10, #10
    c4a2:	f3c3 2489 	ubfx	r4, r3, #10, #10
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
    c4a6:	428c      	cmp	r4, r1
    c4a8:	d30c      	bcc.n	c4c4 <lfs_dir_traverse_filter+0x6c>
    return (int8_t)lfs_tag_chunk(tag);
    c4aa:	b252      	sxtb	r2, r2
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    c4ac:	eb03 2382 	add.w	r3, r3, r2, lsl #10
    c4b0:	6003      	str	r3, [r0, #0]
    return false;
    c4b2:	2000      	movs	r0, #0
    c4b4:	e000      	b.n	c4b8 <lfs_dir_traverse_filter+0x60>
        return true;
    c4b6:	2001      	movs	r0, #1
}
    c4b8:	bc10      	pop	{r4}
    c4ba:	4770      	bx	lr
        return true;
    c4bc:	2001      	movs	r0, #1
    c4be:	e7fb      	b.n	c4b8 <lfs_dir_traverse_filter+0x60>
    c4c0:	2001      	movs	r0, #1
    c4c2:	e7f9      	b.n	c4b8 <lfs_dir_traverse_filter+0x60>
    return false;
    c4c4:	2000      	movs	r0, #0
    c4c6:	e7f7      	b.n	c4b8 <lfs_dir_traverse_filter+0x60>
    c4c8:	7ffffc00 	.word	0x7ffffc00
    c4cc:	000ffc00 	.word	0x000ffc00
    c4d0:	700ffc00 	.word	0x700ffc00

0000c4d4 <lfs_fs_prepmove>:
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    c4d4:	b410      	push	{r4}
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
    c4d6:	6b04      	ldr	r4, [r0, #48]	; 0x30
    c4d8:	4b10      	ldr	r3, [pc, #64]	; (c51c <lfs_fs_prepmove+0x48>)
    c4da:	4023      	ands	r3, r4
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
    c4dc:	f240 34ff 	movw	r4, #1023	; 0x3ff
    c4e0:	42a1      	cmp	r1, r4
    c4e2:	d014      	beq.n	c50e <lfs_fs_prepmove+0x3a>
    c4e4:	028c      	lsls	r4, r1, #10
    c4e6:	f044 449f 	orr.w	r4, r4, #1333788672	; 0x4f800000
    c4ea:	f444 04e0 	orr.w	r4, r4, #7340032	; 0x700000
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
    c4ee:	4323      	orrs	r3, r4
    c4f0:	6303      	str	r3, [r0, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
    c4f2:	f240 33ff 	movw	r3, #1023	; 0x3ff
    c4f6:	4299      	cmp	r1, r3
    c4f8:	d00b      	beq.n	c512 <lfs_fs_prepmove+0x3e>
    c4fa:	6813      	ldr	r3, [r2, #0]
    c4fc:	6343      	str	r3, [r0, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
    c4fe:	f240 33ff 	movw	r3, #1023	; 0x3ff
    c502:	4299      	cmp	r1, r3
    c504:	d007      	beq.n	c516 <lfs_fs_prepmove+0x42>
    c506:	6853      	ldr	r3, [r2, #4]
    c508:	6383      	str	r3, [r0, #56]	; 0x38
}
    c50a:	bc10      	pop	{r4}
    c50c:	4770      	bx	lr
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
    c50e:	2400      	movs	r4, #0
    c510:	e7ed      	b.n	c4ee <lfs_fs_prepmove+0x1a>
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
    c512:	2300      	movs	r3, #0
    c514:	e7f2      	b.n	c4fc <lfs_fs_prepmove+0x28>
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
    c516:	2300      	movs	r3, #0
    c518:	e7f6      	b.n	c508 <lfs_fs_prepmove+0x34>
    c51a:	bf00      	nop
    c51c:	800003ff 	.word	0x800003ff

0000c520 <lfs_dir_fetchmatch>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
    c520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c524:	b097      	sub	sp, #92	; 0x5c
    c526:	4615      	mov	r5, r2
    c528:	9309      	str	r3, [sp, #36]	; 0x24
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
    c52a:	6812      	ldr	r2, [r2, #0]
    c52c:	6e83      	ldr	r3, [r0, #104]	; 0x68
    c52e:	6a1b      	ldr	r3, [r3, #32]
    c530:	429a      	cmp	r2, r3
    c532:	f080 828e 	bcs.w	ca52 <lfs_dir_fetchmatch+0x532>
    c536:	4683      	mov	fp, r0
    c538:	4689      	mov	r9, r1
    c53a:	686a      	ldr	r2, [r5, #4]
    c53c:	4293      	cmp	r3, r2
    c53e:	f240 828c 	bls.w	ca5a <lfs_dir_fetchmatch+0x53a>
    uint32_t revs[2] = {0, 0};
    c542:	2600      	movs	r6, #0
    c544:	9612      	str	r6, [sp, #72]	; 0x48
    c546:	9613      	str	r6, [sp, #76]	; 0x4c
    for (int i = 0; i < 2; i++) {
    c548:	4634      	mov	r4, r6
    c54a:	e000      	b.n	c54e <lfs_dir_fetchmatch+0x2e>
    c54c:	3401      	adds	r4, #1
    c54e:	2c01      	cmp	r4, #1
    c550:	dc2b      	bgt.n	c5aa <lfs_dir_fetchmatch+0x8a>
                pair[i], 0, &revs[i], sizeof(revs[i]));
    c552:	00a7      	lsls	r7, r4, #2
    c554:	ab12      	add	r3, sp, #72	; 0x48
    c556:	eb03 0284 	add.w	r2, r3, r4, lsl #2
        int err = lfs_bd_read(lfs,
    c55a:	2304      	movs	r3, #4
    c55c:	9303      	str	r3, [sp, #12]
    c55e:	9202      	str	r2, [sp, #8]
    c560:	2100      	movs	r1, #0
    c562:	9101      	str	r1, [sp, #4]
    c564:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    c568:	9200      	str	r2, [sp, #0]
    c56a:	465a      	mov	r2, fp
    c56c:	4658      	mov	r0, fp
    c56e:	f007 fd7e 	bl	1406e <lfs_bd_read>
        revs[i] = lfs_fromle32(revs[i]);
    c572:	ab16      	add	r3, sp, #88	; 0x58
    c574:	441f      	add	r7, r3
    c576:	f857 2c10 	ldr.w	r2, [r7, #-16]
        if (err && err != LFS_ERR_CORRUPT) {
    c57a:	4603      	mov	r3, r0
    c57c:	b118      	cbz	r0, c586 <lfs_dir_fetchmatch+0x66>
    c57e:	f110 0f54 	cmn.w	r0, #84	; 0x54
    c582:	f040 826e 	bne.w	ca62 <lfs_dir_fetchmatch+0x542>
        if (err != LFS_ERR_CORRUPT &&
    c586:	f113 0f54 	cmn.w	r3, #84	; 0x54
    c58a:	d0df      	beq.n	c54c <lfs_dir_fetchmatch+0x2c>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
    c58c:	1c63      	adds	r3, r4, #1
    c58e:	f003 0301 	and.w	r3, r3, #1
    c592:	bf48      	it	mi
    c594:	425b      	negmi	r3, r3
    c596:	a916      	add	r1, sp, #88	; 0x58
    c598:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    c59c:	f853 3c10 	ldr.w	r3, [r3, #-16]
}

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
    return (int)(unsigned)(a - b);
    c5a0:	1ad2      	subs	r2, r2, r3
        if (err != LFS_ERR_CORRUPT &&
    c5a2:	2a00      	cmp	r2, #0
    c5a4:	ddd2      	ble.n	c54c <lfs_dir_fetchmatch+0x2c>
            r = i;
    c5a6:	4626      	mov	r6, r4
    c5a8:	e7d0      	b.n	c54c <lfs_dir_fetchmatch+0x2c>
    dir->pair[0] = pair[(r+0)%2];
    c5aa:	2e00      	cmp	r6, #0
    c5ac:	f006 0301 	and.w	r3, r6, #1
    c5b0:	bfb8      	it	lt
    c5b2:	425b      	neglt	r3, r3
    c5b4:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
    c5b8:	f8c9 2000 	str.w	r2, [r9]
    dir->pair[1] = pair[(r+1)%2];
    c5bc:	3601      	adds	r6, #1
    c5be:	f006 0601 	and.w	r6, r6, #1
    c5c2:	bf48      	it	mi
    c5c4:	4276      	negmi	r6, r6
    c5c6:	960a      	str	r6, [sp, #40]	; 0x28
    c5c8:	f855 2026 	ldr.w	r2, [r5, r6, lsl #2]
    c5cc:	f8c9 2004 	str.w	r2, [r9, #4]
    dir->rev = revs[(r+0)%2];
    c5d0:	aa16      	add	r2, sp, #88	; 0x58
    c5d2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    c5d6:	f853 3c10 	ldr.w	r3, [r3, #-16]
    c5da:	f8c9 3008 	str.w	r3, [r9, #8]
    dir->off = 0; // nonzero = found some commits
    c5de:	2300      	movs	r3, #0
    c5e0:	f8c9 300c 	str.w	r3, [r9, #12]
    for (int i = 0; i < 2; i++) {
    c5e4:	469a      	mov	sl, r3
    lfs_stag_t besttag = -1;
    c5e6:	f04f 33ff 	mov.w	r3, #4294967295
    c5ea:	9305      	str	r3, [sp, #20]
    for (int i = 0; i < 2; i++) {
    c5ec:	e053      	b.n	c696 <lfs_dir_fetchmatch+0x176>
                if (err == LFS_ERR_CORRUPT) {
    c5ee:	f110 0f54 	cmn.w	r0, #84	; 0x54
    c5f2:	f040 81b0 	bne.w	c956 <lfs_dir_fetchmatch+0x436>
                    dir->erased = false;
    c5f6:	2300      	movs	r3, #0
    c5f8:	f889 3016 	strb.w	r3, [r9, #22]
                    break;
    c5fc:	e034      	b.n	c668 <lfs_dir_fetchmatch+0x148>
    return (tag & 0x70000000) >> 20;
    c5fe:	ea4f 5318 	mov.w	r3, r8, lsr #20
    c602:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
    c606:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    c60a:	d005      	beq.n	c618 <lfs_dir_fetchmatch+0xf8>
    c60c:	9b07      	ldr	r3, [sp, #28]
    c60e:	f003 0301 	and.w	r3, r3, #1
    c612:	f889 3016 	strb.w	r3, [r9, #22]
                break;
    c616:	e027      	b.n	c668 <lfs_dir_fetchmatch+0x148>
                        dir->off % lfs->cfg->prog_size == 0);
    c618:	f8d9 100c 	ldr.w	r1, [r9, #12]
    c61c:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
    c620:	699a      	ldr	r2, [r3, #24]
    c622:	fbb1 f3f2 	udiv	r3, r1, r2
    c626:	fb02 1313 	mls	r3, r2, r3, r1
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
    c62a:	2b00      	cmp	r3, #0
    c62c:	d1ee      	bne.n	c60c <lfs_dir_fetchmatch+0xec>
    c62e:	2301      	movs	r3, #1
    c630:	9307      	str	r3, [sp, #28]
    c632:	e7eb      	b.n	c60c <lfs_dir_fetchmatch+0xec>
                dir->erased = false;
    c634:	2300      	movs	r3, #0
    c636:	f889 3016 	strb.w	r3, [r9, #22]
                break;
    c63a:	e015      	b.n	c668 <lfs_dir_fetchmatch+0x148>
                err = lfs_bd_read(lfs,
    c63c:	2204      	movs	r2, #4
    c63e:	9203      	str	r2, [sp, #12]
    c640:	aa0d      	add	r2, sp, #52	; 0x34
    c642:	9202      	str	r2, [sp, #8]
    c644:	1d32      	adds	r2, r6, #4
    c646:	9201      	str	r2, [sp, #4]
    c648:	f8d9 2000 	ldr.w	r2, [r9]
    c64c:	9200      	str	r2, [sp, #0]
    c64e:	465a      	mov	r2, fp
    c650:	2100      	movs	r1, #0
    c652:	4658      	mov	r0, fp
    c654:	f007 fd0b 	bl	1406e <lfs_bd_read>
                if (err) {
    c658:	2800      	cmp	r0, #0
    c65a:	d136      	bne.n	c6ca <lfs_dir_fetchmatch+0x1aa>
                dcrc = lfs_fromle32(dcrc);
    c65c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                if (crc != dcrc) {
    c65e:	42a3      	cmp	r3, r4
    c660:	d03c      	beq.n	c6dc <lfs_dir_fetchmatch+0x1bc>
                    dir->erased = false;
    c662:	2300      	movs	r3, #0
    c664:	f889 3016 	strb.w	r3, [r9, #22]
        if (dir->off > 0) {
    c668:	f8d9 300c 	ldr.w	r3, [r9, #12]
    c66c:	2b00      	cmp	r3, #0
    c66e:	f040 8175 	bne.w	c95c <lfs_dir_fetchmatch+0x43c>
    lfs_block_t t = pair[0];
    c672:	f8d9 3000 	ldr.w	r3, [r9]
    pair[0] = pair[1];
    c676:	f8d9 2004 	ldr.w	r2, [r9, #4]
    c67a:	f8c9 2000 	str.w	r2, [r9]
    pair[1] = t;
    c67e:	f8c9 3004 	str.w	r3, [r9, #4]
        dir->rev = revs[(r+1)%2];
    c682:	aa16      	add	r2, sp, #88	; 0x58
    c684:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c686:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    c68a:	f853 3c10 	ldr.w	r3, [r3, #-16]
    c68e:	f8c9 3008 	str.w	r3, [r9, #8]
    for (int i = 0; i < 2; i++) {
    c692:	f10a 0a01 	add.w	sl, sl, #1
    c696:	f1ba 0f01 	cmp.w	sl, #1
    c69a:	f300 81b6 	bgt.w	ca0a <lfs_dir_fetchmatch+0x4ea>
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
    c69e:	4abc      	ldr	r2, [pc, #752]	; (c990 <lfs_dir_fetchmatch+0x470>)
    c6a0:	ab0e      	add	r3, sp, #56	; 0x38
    c6a2:	e892 0003 	ldmia.w	r2, {r0, r1}
    c6a6:	e883 0003 	stmia.w	r3, {r0, r1}
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
    c6aa:	2204      	movs	r2, #4
    c6ac:	f109 0108 	add.w	r1, r9, #8
    c6b0:	f04f 30ff 	mov.w	r0, #4294967295
    c6b4:	f002 fb8a 	bl	edcc <lfs_crc>
    c6b8:	4604      	mov	r4, r0
        lfs_stag_t tempbesttag = besttag;
    c6ba:	9b05      	ldr	r3, [sp, #20]
    c6bc:	9308      	str	r3, [sp, #32]
        bool tempsplit = false;
    c6be:	2600      	movs	r6, #0
    c6c0:	960b      	str	r6, [sp, #44]	; 0x2c
        uint16_t tempcount = 0;
    c6c2:	9606      	str	r6, [sp, #24]
        lfs_tag_t ptag = 0xffffffff;
    c6c4:	f04f 38ff 	mov.w	r8, #4294967295
    c6c8:	e066      	b.n	c798 <lfs_dir_fetchmatch+0x278>
                    if (err == LFS_ERR_CORRUPT) {
    c6ca:	f110 0f54 	cmn.w	r0, #84	; 0x54
    c6ce:	d103      	bne.n	c6d8 <lfs_dir_fetchmatch+0x1b8>
                        dir->erased = false;
    c6d0:	2300      	movs	r3, #0
    c6d2:	f889 3016 	strb.w	r3, [r9, #22]
                        break;
    c6d6:	e7c7      	b.n	c668 <lfs_dir_fetchmatch+0x148>
                    return err;
    c6d8:	9005      	str	r0, [sp, #20]
    c6da:	e1b6      	b.n	ca4a <lfs_dir_fetchmatch+0x52a>
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
    c6dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return (tag & 0x0ff00000) >> 20;
    c6de:	ea4f 5813 	mov.w	r8, r3, lsr #20
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
    c6e2:	ea85 78c8 	eor.w	r8, r5, r8, lsl #31
                lfs->seed ^= crc;
    c6e6:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
    c6ea:	4062      	eors	r2, r4
    c6ec:	f8cb 202c 	str.w	r2, [fp, #44]	; 0x2c
    return ((int32_t)(tag << 22) >> 22) == -1;
    c6f0:	f343 0209 	sbfx	r2, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    c6f4:	f1b2 3fff 	cmp.w	r2, #4294967295
    c6f8:	bf08      	it	eq
    c6fa:	3301      	addeq	r3, #1
    return tag & 0x000003ff;
    c6fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    c700:	3304      	adds	r3, #4
                dir->off = off + lfs_tag_dsize(tag);
    c702:	4433      	add	r3, r6
    c704:	f8c9 300c 	str.w	r3, [r9, #12]
                dir->etag = ptag;
    c708:	f8c9 8010 	str.w	r8, [r9, #16]
                dir->count = tempcount;
    c70c:	9b06      	ldr	r3, [sp, #24]
    c70e:	f8a9 3014 	strh.w	r3, [r9, #20]
                dir->tail[0] = temptail[0];
    c712:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c714:	f8c9 3018 	str.w	r3, [r9, #24]
                dir->tail[1] = temptail[1];
    c718:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c71a:	f8c9 301c 	str.w	r3, [r9, #28]
                dir->split = tempsplit;
    c71e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c720:	f889 3017 	strb.w	r3, [r9, #23]
                besttag = tempbesttag;
    c724:	9b08      	ldr	r3, [sp, #32]
    c726:	9305      	str	r3, [sp, #20]
                crc = 0xffffffff;
    c728:	f04f 34ff 	mov.w	r4, #4294967295
    c72c:	e034      	b.n	c798 <lfs_dir_fetchmatch+0x278>
                    if (err == LFS_ERR_CORRUPT) {
    c72e:	f110 0f54 	cmn.w	r0, #84	; 0x54
    c732:	d10f      	bne.n	c754 <lfs_dir_fetchmatch+0x234>
                        dir->erased = false;
    c734:	2300      	movs	r3, #0
    c736:	f889 3016 	strb.w	r3, [r9, #22]
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
    c73a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
    c73c:	0d1a      	lsrs	r2, r3, #20
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
    c73e:	f412 61e0 	ands.w	r1, r2, #1792	; 0x700
    c742:	d109      	bne.n	c758 <lfs_dir_fetchmatch+0x238>
    return (tag & 0x000ffc00) >> 10;
    c744:	f3c3 2389 	ubfx	r3, r3, #10, #10
                if (lfs_tag_id(tag) >= tempcount) {
    c748:	9a06      	ldr	r2, [sp, #24]
    c74a:	4293      	cmp	r3, r2
    c74c:	d30c      	bcc.n	c768 <lfs_dir_fetchmatch+0x248>
                    tempcount = lfs_tag_id(tag) + 1;
    c74e:	3301      	adds	r3, #1
    c750:	9306      	str	r3, [sp, #24]
    c752:	e009      	b.n	c768 <lfs_dir_fetchmatch+0x248>
                    return err;
    c754:	9005      	str	r0, [sp, #20]
    c756:	e178      	b.n	ca4a <lfs_dir_fetchmatch+0x52a>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
    c758:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    c75c:	f000 8090 	beq.w	c880 <lfs_dir_fetchmatch+0x360>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
    c760:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
    c764:	f000 80b5 	beq.w	c8d2 <lfs_dir_fetchmatch+0x3b2>
            if ((fmask & tag) == (fmask & ftag)) {
    c768:	990c      	ldr	r1, [sp, #48]	; 0x30
    c76a:	9b20      	ldr	r3, [sp, #128]	; 0x80
    c76c:	404b      	eors	r3, r1
    c76e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c770:	4213      	tst	r3, r2
    c772:	d110      	bne.n	c796 <lfs_dir_fetchmatch+0x276>
                        dir->pair[0], off+sizeof(tag)});
    c774:	f8d9 3000 	ldr.w	r3, [r9]
                int res = cb(data, tag, &(struct lfs_diskoff){
    c778:	9314      	str	r3, [sp, #80]	; 0x50
                        dir->pair[0], off+sizeof(tag)});
    c77a:	1d33      	adds	r3, r6, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
    c77c:	9315      	str	r3, [sp, #84]	; 0x54
    c77e:	aa14      	add	r2, sp, #80	; 0x50
    c780:	9823      	ldr	r0, [sp, #140]	; 0x8c
    c782:	9b22      	ldr	r3, [sp, #136]	; 0x88
    c784:	4798      	blx	r3
                if (res < 0) {
    c786:	2800      	cmp	r0, #0
    c788:	f2c0 80c2 	blt.w	c910 <lfs_dir_fetchmatch+0x3f0>
                if (res == LFS_CMP_EQ) {
    c78c:	2800      	cmp	r0, #0
    c78e:	f040 80c8 	bne.w	c922 <lfs_dir_fetchmatch+0x402>
                    tempbesttag = tag;
    c792:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c794:	9308      	str	r3, [sp, #32]
            ptag = tag;
    c796:	46a8      	mov	r8, r5
    return ((int32_t)(tag << 22) >> 22) == -1;
    c798:	f348 0309 	sbfx	r3, r8, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    c79c:	f1b3 3fff 	cmp.w	r3, #4294967295
    c7a0:	bf14      	ite	ne
    c7a2:	4643      	movne	r3, r8
    c7a4:	f108 0301 	addeq.w	r3, r8, #1
    return tag & 0x000003ff;
    c7a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    c7ac:	3304      	adds	r3, #4
            off += lfs_tag_dsize(ptag);
    c7ae:	441e      	add	r6, r3
            int err = lfs_bd_read(lfs,
    c7b0:	465f      	mov	r7, fp
                    NULL, &lfs->rcache, lfs->cfg->block_size,
    c7b2:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
            int err = lfs_bd_read(lfs,
    c7b6:	69db      	ldr	r3, [r3, #28]
    c7b8:	2204      	movs	r2, #4
    c7ba:	9203      	str	r2, [sp, #12]
    c7bc:	aa0c      	add	r2, sp, #48	; 0x30
    c7be:	9202      	str	r2, [sp, #8]
    c7c0:	9601      	str	r6, [sp, #4]
    c7c2:	f8d9 2000 	ldr.w	r2, [r9]
    c7c6:	9200      	str	r2, [sp, #0]
    c7c8:	465a      	mov	r2, fp
    c7ca:	2100      	movs	r1, #0
    c7cc:	4658      	mov	r0, fp
    c7ce:	f007 fc4e 	bl	1406e <lfs_bd_read>
            if (err) {
    c7d2:	9007      	str	r0, [sp, #28]
    c7d4:	2800      	cmp	r0, #0
    c7d6:	f47f af0a 	bne.w	c5ee <lfs_dir_fetchmatch+0xce>
            crc = lfs_crc(crc, &tag, sizeof(tag));
    c7da:	2204      	movs	r2, #4
    c7dc:	a90c      	add	r1, sp, #48	; 0x30
    c7de:	4620      	mov	r0, r4
    c7e0:	f002 faf4 	bl	edcc <lfs_crc>
    c7e4:	4604      	mov	r4, r0
            tag = lfs_frombe32(tag) ^ ptag;
    c7e6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
static inline uint32_t lfs_frombe32(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
    c7e8:	ba2d      	rev	r5, r5
    c7ea:	ea85 0508 	eor.w	r5, r5, r8
    c7ee:	950c      	str	r5, [sp, #48]	; 0x30
            if (!lfs_tag_isvalid(tag)) {
    c7f0:	2d00      	cmp	r5, #0
    c7f2:	f6ff af04 	blt.w	c5fe <lfs_dir_fetchmatch+0xde>
    return ((int32_t)(tag << 22) >> 22) == -1;
    c7f6:	f345 0209 	sbfx	r2, r5, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    c7fa:	f1b2 3fff 	cmp.w	r2, #4294967295
    c7fe:	bf14      	ite	ne
    c800:	462a      	movne	r2, r5
    c802:	1c6a      	addeq	r2, r5, #1
    return tag & 0x000003ff;
    c804:	f3c2 0209 	ubfx	r2, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    c808:	3204      	adds	r2, #4
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
    c80a:	4432      	add	r2, r6
    c80c:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
    c810:	69db      	ldr	r3, [r3, #28]
    c812:	429a      	cmp	r2, r3
    c814:	f63f af0e 	bhi.w	c634 <lfs_dir_fetchmatch+0x114>
    return (tag & 0x70000000) >> 20;
    c818:	0d2a      	lsrs	r2, r5, #20
    c81a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
    c81e:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    c822:	f43f af0b 	beq.w	c63c <lfs_dir_fetchmatch+0x11c>
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
    c826:	f04f 0804 	mov.w	r8, #4
    c82a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return ((int32_t)(tag << 22) >> 22) == -1;
    c82c:	f343 0209 	sbfx	r2, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    c830:	f1b2 3fff 	cmp.w	r2, #4294967295
    c834:	bf08      	it	eq
    c836:	3301      	addeq	r3, #1
    return tag & 0x000003ff;
    c838:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    c83c:	3304      	adds	r3, #4
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
    c83e:	4543      	cmp	r3, r8
    c840:	f67f af7b 	bls.w	c73a <lfs_dir_fetchmatch+0x21a>
                        NULL, &lfs->rcache, lfs->cfg->block_size,
    c844:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
                err = lfs_bd_read(lfs,
    c848:	69db      	ldr	r3, [r3, #28]
    c84a:	2201      	movs	r2, #1
    c84c:	9203      	str	r2, [sp, #12]
    c84e:	aa0d      	add	r2, sp, #52	; 0x34
    c850:	9202      	str	r2, [sp, #8]
    c852:	eb06 0208 	add.w	r2, r6, r8
    c856:	9201      	str	r2, [sp, #4]
    c858:	f8d9 2000 	ldr.w	r2, [r9]
    c85c:	9200      	str	r2, [sp, #0]
    c85e:	463a      	mov	r2, r7
    c860:	2100      	movs	r1, #0
    c862:	4658      	mov	r0, fp
    c864:	f007 fc03 	bl	1406e <lfs_bd_read>
                if (err) {
    c868:	2800      	cmp	r0, #0
    c86a:	f47f af60 	bne.w	c72e <lfs_dir_fetchmatch+0x20e>
                crc = lfs_crc(crc, &dat, 1);
    c86e:	2201      	movs	r2, #1
    c870:	a90d      	add	r1, sp, #52	; 0x34
    c872:	4620      	mov	r0, r4
    c874:	f002 faaa 	bl	edcc <lfs_crc>
    c878:	4604      	mov	r4, r0
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
    c87a:	f108 0801 	add.w	r8, r8, #1
    c87e:	e7d4      	b.n	c82a <lfs_dir_fetchmatch+0x30a>
    return (int8_t)lfs_tag_chunk(tag);
    c880:	b252      	sxtb	r2, r2
                tempcount += lfs_tag_splice(tag);
    c882:	9906      	ldr	r1, [sp, #24]
    c884:	4411      	add	r1, r2
    c886:	b289      	uxth	r1, r1
    c888:	9106      	str	r1, [sp, #24]
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
    c88a:	9908      	ldr	r1, [sp, #32]
    c88c:	4608      	mov	r0, r1
    c88e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    c892:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
    c896:	f421 717f 	bic.w	r1, r1, #1020	; 0x3fc
    c89a:	f021 0103 	bic.w	r1, r1, #3
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
    c89e:	f041 419f 	orr.w	r1, r1, #1333788672	; 0x4f800000
    c8a2:	f441 01e0 	orr.w	r1, r1, #7340032	; 0x700000
    c8a6:	428b      	cmp	r3, r1
    c8a8:	d00f      	beq.n	c8ca <lfs_dir_fetchmatch+0x3aa>
                } else if (tempbesttag != -1 &&
    c8aa:	9908      	ldr	r1, [sp, #32]
    c8ac:	f1b1 3fff 	cmp.w	r1, #4294967295
    c8b0:	f43f af5a 	beq.w	c768 <lfs_dir_fetchmatch+0x248>
    return (tag & 0x000ffc00) >> 10;
    c8b4:	f3c3 2389 	ubfx	r3, r3, #10, #10
    c8b8:	f3c0 2189 	ubfx	r1, r0, #10, #10
                } else if (tempbesttag != -1 &&
    c8bc:	428b      	cmp	r3, r1
    c8be:	f63f af53 	bhi.w	c768 <lfs_dir_fetchmatch+0x248>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    c8c2:	eb00 2382 	add.w	r3, r0, r2, lsl #10
    c8c6:	9308      	str	r3, [sp, #32]
    c8c8:	e74e      	b.n	c768 <lfs_dir_fetchmatch+0x248>
                    tempbesttag |= 0x80000000;
    c8ca:	f040 4300 	orr.w	r3, r0, #2147483648	; 0x80000000
    c8ce:	9308      	str	r3, [sp, #32]
    c8d0:	e74a      	b.n	c768 <lfs_dir_fetchmatch+0x248>
                tempsplit = (lfs_tag_chunk(tag) & 1);
    c8d2:	f002 0301 	and.w	r3, r2, #1
    c8d6:	930b      	str	r3, [sp, #44]	; 0x2c
                        NULL, &lfs->rcache, lfs->cfg->block_size,
    c8d8:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
                err = lfs_bd_read(lfs,
    c8dc:	69db      	ldr	r3, [r3, #28]
    c8de:	2208      	movs	r2, #8
    c8e0:	9203      	str	r2, [sp, #12]
    c8e2:	aa0e      	add	r2, sp, #56	; 0x38
    c8e4:	9202      	str	r2, [sp, #8]
    c8e6:	1d32      	adds	r2, r6, #4
    c8e8:	9201      	str	r2, [sp, #4]
    c8ea:	f8d9 2000 	ldr.w	r2, [r9]
    c8ee:	9200      	str	r2, [sp, #0]
    c8f0:	465a      	mov	r2, fp
    c8f2:	2100      	movs	r1, #0
    c8f4:	4658      	mov	r0, fp
    c8f6:	f007 fbba 	bl	1406e <lfs_bd_read>
                if (err) {
    c8fa:	2800      	cmp	r0, #0
    c8fc:	f43f af34 	beq.w	c768 <lfs_dir_fetchmatch+0x248>
                    if (err == LFS_ERR_CORRUPT) {
    c900:	f110 0f54 	cmn.w	r0, #84	; 0x54
    c904:	f47f af30 	bne.w	c768 <lfs_dir_fetchmatch+0x248>
                        dir->erased = false;
    c908:	2300      	movs	r3, #0
    c90a:	f889 3016 	strb.w	r3, [r9, #22]
                        break;
    c90e:	e6ab      	b.n	c668 <lfs_dir_fetchmatch+0x148>
                    if (res == LFS_ERR_CORRUPT) {
    c910:	f110 0f54 	cmn.w	r0, #84	; 0x54
    c914:	d103      	bne.n	c91e <lfs_dir_fetchmatch+0x3fe>
                        dir->erased = false;
    c916:	2300      	movs	r3, #0
    c918:	f889 3016 	strb.w	r3, [r9, #22]
                        break;
    c91c:	e6a4      	b.n	c668 <lfs_dir_fetchmatch+0x148>
                    return res;
    c91e:	9005      	str	r0, [sp, #20]
    c920:	e093      	b.n	ca4a <lfs_dir_fetchmatch+0x52a>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
    c922:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c924:	9b08      	ldr	r3, [sp, #32]
    c926:	461f      	mov	r7, r3
    c928:	ea82 0103 	eor.w	r1, r2, r3
    c92c:	4b19      	ldr	r3, [pc, #100]	; (c994 <lfs_dir_fetchmatch+0x474>)
    c92e:	400b      	ands	r3, r1
    c930:	b16b      	cbz	r3, c94e <lfs_dir_fetchmatch+0x42e>
                } else if (res == LFS_CMP_GT &&
    c932:	2802      	cmp	r0, #2
    c934:	f47f af2f 	bne.w	c796 <lfs_dir_fetchmatch+0x276>
    return (tag & 0x000ffc00) >> 10;
    c938:	f3c2 2389 	ubfx	r3, r2, #10, #10
    c93c:	f3c7 2789 	ubfx	r7, r7, #10, #10
                } else if (res == LFS_CMP_GT &&
    c940:	42bb      	cmp	r3, r7
    c942:	f63f af28 	bhi.w	c796 <lfs_dir_fetchmatch+0x276>
                    tempbesttag = tag | 0x80000000;
    c946:	f042 4300 	orr.w	r3, r2, #2147483648	; 0x80000000
    c94a:	9308      	str	r3, [sp, #32]
    c94c:	e723      	b.n	c796 <lfs_dir_fetchmatch+0x276>
                    tempbesttag = -1;
    c94e:	f04f 33ff 	mov.w	r3, #4294967295
    c952:	9308      	str	r3, [sp, #32]
    c954:	e71f      	b.n	c796 <lfs_dir_fetchmatch+0x276>
                return err;
    c956:	9b07      	ldr	r3, [sp, #28]
    c958:	9305      	str	r3, [sp, #20]
    c95a:	e076      	b.n	ca4a <lfs_dir_fetchmatch+0x52a>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    c95c:	f8db 203c 	ldr.w	r2, [fp, #60]	; 0x3c
    return (tag & 0x70000000) >> 20;
    c960:	0d13      	lsrs	r3, r2, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    c962:	f413 6fe0 	tst.w	r3, #1792	; 0x700
    c966:	d017      	beq.n	c998 <lfs_dir_fetchmatch+0x478>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    c968:	f8db 0040 	ldr.w	r0, [fp, #64]	; 0x40
    c96c:	f8d9 1000 	ldr.w	r1, [r9]
    c970:	4281      	cmp	r1, r0
    c972:	d025      	beq.n	c9c0 <lfs_dir_fetchmatch+0x4a0>
    c974:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
    c978:	f8d9 4004 	ldr.w	r4, [r9, #4]
    c97c:	429c      	cmp	r4, r3
    c97e:	d021      	beq.n	c9c4 <lfs_dir_fetchmatch+0x4a4>
    c980:	4284      	cmp	r4, r0
    c982:	d021      	beq.n	c9c8 <lfs_dir_fetchmatch+0x4a8>
    c984:	4299      	cmp	r1, r3
    c986:	d001      	beq.n	c98c <lfs_dir_fetchmatch+0x46c>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    c988:	2300      	movs	r3, #0
    c98a:	e006      	b.n	c99a <lfs_dir_fetchmatch+0x47a>
    c98c:	2301      	movs	r3, #1
    c98e:	e004      	b.n	c99a <lfs_dir_fetchmatch+0x47a>
    c990:	00015fdc 	.word	0x00015fdc
    c994:	7ffffc00 	.word	0x7ffffc00
    c998:	2300      	movs	r3, #0
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
    c99a:	b1d3      	cbz	r3, c9d2 <lfs_dir_fetchmatch+0x4b2>
    return (tag & 0x000ffc00) >> 10;
    c99c:	f3c2 2389 	ubfx	r3, r2, #10, #10
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
    c9a0:	9a05      	ldr	r2, [sp, #20]
    c9a2:	4611      	mov	r1, r2
    return (tag & 0x000ffc00) >> 10;
    c9a4:	f3c2 2289 	ubfx	r2, r2, #10, #10
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
    c9a8:	4293      	cmp	r3, r2
    c9aa:	d00f      	beq.n	c9cc <lfs_dir_fetchmatch+0x4ac>
                } else if (besttag != -1 &&
    c9ac:	9805      	ldr	r0, [sp, #20]
    c9ae:	f1b0 3fff 	cmp.w	r0, #4294967295
    c9b2:	d00e      	beq.n	c9d2 <lfs_dir_fetchmatch+0x4b2>
    c9b4:	4293      	cmp	r3, r2
    c9b6:	d20c      	bcs.n	c9d2 <lfs_dir_fetchmatch+0x4b2>
                    besttag -= LFS_MKTAG(0, 1, 0);
    c9b8:	f5a1 6380 	sub.w	r3, r1, #1024	; 0x400
    c9bc:	9305      	str	r3, [sp, #20]
    c9be:	e008      	b.n	c9d2 <lfs_dir_fetchmatch+0x4b2>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    c9c0:	2301      	movs	r3, #1
    c9c2:	e7ea      	b.n	c99a <lfs_dir_fetchmatch+0x47a>
    c9c4:	2301      	movs	r3, #1
    c9c6:	e7e8      	b.n	c99a <lfs_dir_fetchmatch+0x47a>
    c9c8:	2301      	movs	r3, #1
    c9ca:	e7e6      	b.n	c99a <lfs_dir_fetchmatch+0x47a>
                    besttag |= 0x80000000;
    c9cc:	f041 4300 	orr.w	r3, r1, #2147483648	; 0x80000000
    c9d0:	9305      	str	r3, [sp, #20]
            if (id) {
    c9d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
    c9d4:	b14b      	cbz	r3, c9ea <lfs_dir_fetchmatch+0x4ca>
    return (tag & 0x000ffc00) >> 10;
    c9d6:	9b05      	ldr	r3, [sp, #20]
    c9d8:	f3c3 2389 	ubfx	r3, r3, #10, #10
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
    c9dc:	f8b9 2014 	ldrh.w	r2, [r9, #20]
    return (a < b) ? a : b;
    c9e0:	4293      	cmp	r3, r2
    c9e2:	bf28      	it	cs
    c9e4:	4613      	movcs	r3, r2
    c9e6:	9a21      	ldr	r2, [sp, #132]	; 0x84
    c9e8:	8013      	strh	r3, [r2, #0]
            if (lfs_tag_isvalid(besttag)) {
    c9ea:	9b05      	ldr	r3, [sp, #20]
    c9ec:	2b00      	cmp	r3, #0
    c9ee:	da2c      	bge.n	ca4a <lfs_dir_fetchmatch+0x52a>
    return (tag & 0x000ffc00) >> 10;
    c9f0:	f3c3 2389 	ubfx	r3, r3, #10, #10
            } else if (lfs_tag_id(besttag) < dir->count) {
    c9f4:	f8b9 2014 	ldrh.w	r2, [r9, #20]
    c9f8:	429a      	cmp	r2, r3
    c9fa:	d903      	bls.n	ca04 <lfs_dir_fetchmatch+0x4e4>
                return LFS_ERR_NOENT;
    c9fc:	f06f 0301 	mvn.w	r3, #1
    ca00:	9305      	str	r3, [sp, #20]
    ca02:	e022      	b.n	ca4a <lfs_dir_fetchmatch+0x52a>
                return 0;
    ca04:	2300      	movs	r3, #0
    ca06:	9305      	str	r3, [sp, #20]
    ca08:	e01f      	b.n	ca4a <lfs_dir_fetchmatch+0x52a>
    ca0a:	4a17      	ldr	r2, [pc, #92]	; (ca68 <lfs_dir_fetchmatch+0x548>)
    ca0c:	4b17      	ldr	r3, [pc, #92]	; (ca6c <lfs_dir_fetchmatch+0x54c>)
    ca0e:	1ad2      	subs	r2, r2, r3
    ca10:	08d2      	lsrs	r2, r2, #3
    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
    ca12:	f04f 0300 	mov.w	r3, #0
    ca16:	2101      	movs	r1, #1
    ca18:	f361 0302 	bfi	r3, r1, #0, #3
    ca1c:	f36f 03c5 	bfc	r3, #3, #3
    ca20:	f362 138f 	bfi	r3, r2, #6, #10
    ca24:	4a12      	ldr	r2, [pc, #72]	; (ca70 <lfs_dir_fetchmatch+0x550>)
    ca26:	920e      	str	r2, [sp, #56]	; 0x38
    ca28:	f240 32e5 	movw	r2, #997	; 0x3e5
    ca2c:	920f      	str	r2, [sp, #60]	; 0x3c
    ca2e:	f8d9 2000 	ldr.w	r2, [r9]
    ca32:	9210      	str	r2, [sp, #64]	; 0x40
    ca34:	f8d9 2004 	ldr.w	r2, [r9, #4]
    ca38:	9211      	str	r2, [sp, #68]	; 0x44
    ca3a:	2204      	movs	r2, #4
    ca3c:	a90e      	add	r1, sp, #56	; 0x38
    ca3e:	480d      	ldr	r0, [pc, #52]	; (ca74 <lfs_dir_fetchmatch+0x554>)
    ca40:	f7f6 f92c 	bl	2c9c <log_n>
    return LFS_ERR_CORRUPT;
    ca44:	f06f 0353 	mvn.w	r3, #83	; 0x53
    ca48:	9305      	str	r3, [sp, #20]
}
    ca4a:	9805      	ldr	r0, [sp, #20]
    ca4c:	b017      	add	sp, #92	; 0x5c
    ca4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_CORRUPT;
    ca52:	f06f 0353 	mvn.w	r3, #83	; 0x53
    ca56:	9305      	str	r3, [sp, #20]
    ca58:	e7f7      	b.n	ca4a <lfs_dir_fetchmatch+0x52a>
    ca5a:	f06f 0353 	mvn.w	r3, #83	; 0x53
    ca5e:	9305      	str	r3, [sp, #20]
    ca60:	e7f3      	b.n	ca4a <lfs_dir_fetchmatch+0x52a>
    ca62:	9005      	str	r0, [sp, #20]
    ca64:	e7f1      	b.n	ca4a <lfs_dir_fetchmatch+0x52a>
    ca66:	bf00      	nop
    ca68:	00015ed0 	.word	0x00015ed0
    ca6c:	00015ea8 	.word	0x00015ea8
    ca70:	00017538 	.word	0x00017538
    ca74:	00017560 	.word	0x00017560

0000ca78 <lfs_fs_parent>:
        lfs_mdir_t *parent) {
    ca78:	b5f0      	push	{r4, r5, r6, r7, lr}
    ca7a:	b089      	sub	sp, #36	; 0x24
    ca7c:	4606      	mov	r6, r0
    ca7e:	460f      	mov	r7, r1
    ca80:	4614      	mov	r4, r2
    parent->tail[0] = 0;
    ca82:	2500      	movs	r5, #0
    ca84:	6195      	str	r5, [r2, #24]
    parent->tail[1] = 1;
    ca86:	2301      	movs	r3, #1
    ca88:	61d3      	str	r3, [r2, #28]
    while (!lfs_pair_isnull(parent->tail)) {
    ca8a:	e025      	b.n	cad8 <lfs_fs_parent+0x60>
            return LFS_ERR_CORRUPT;
    ca8c:	f06f 0353 	mvn.w	r3, #83	; 0x53
    ca90:	e02e      	b.n	caf0 <lfs_fs_parent+0x78>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    ca92:	2301      	movs	r3, #1
    ca94:	e000      	b.n	ca98 <lfs_fs_parent+0x20>
    ca96:	2301      	movs	r3, #1
    while (!lfs_pair_isnull(parent->tail)) {
    ca98:	bb43      	cbnz	r3, caec <lfs_fs_parent+0x74>
        if (cycle >= lfs->cfg->block_count/2) {
    ca9a:	6eb3      	ldr	r3, [r6, #104]	; 0x68
    ca9c:	6a1b      	ldr	r3, [r3, #32]
    ca9e:	ebb5 0f53 	cmp.w	r5, r3, lsr #1
    caa2:	d2f3      	bcs.n	ca8c <lfs_fs_parent+0x14>
        cycle += 1;
    caa4:	3501      	adds	r5, #1
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
    caa6:	9605      	str	r6, [sp, #20]
                    lfs, {pair[0], pair[1]}});
    caa8:	683b      	ldr	r3, [r7, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
    caaa:	9306      	str	r3, [sp, #24]
    caac:	687b      	ldr	r3, [r7, #4]
    caae:	9307      	str	r3, [sp, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
    cab0:	ab05      	add	r3, sp, #20
    cab2:	9303      	str	r3, [sp, #12]
    cab4:	4b10      	ldr	r3, [pc, #64]	; (caf8 <lfs_fs_parent+0x80>)
    cab6:	9302      	str	r3, [sp, #8]
    cab8:	2300      	movs	r3, #0
    caba:	9301      	str	r3, [sp, #4]
    cabc:	4b0f      	ldr	r3, [pc, #60]	; (cafc <lfs_fs_parent+0x84>)
    cabe:	9300      	str	r3, [sp, #0]
    cac0:	4b0f      	ldr	r3, [pc, #60]	; (cb00 <lfs_fs_parent+0x88>)
    cac2:	f104 0218 	add.w	r2, r4, #24
    cac6:	4621      	mov	r1, r4
    cac8:	4630      	mov	r0, r6
    caca:	f7ff fd29 	bl	c520 <lfs_dir_fetchmatch>
        if (tag && tag != LFS_ERR_NOENT) {
    cace:	4603      	mov	r3, r0
    cad0:	b110      	cbz	r0, cad8 <lfs_fs_parent+0x60>
    cad2:	f110 0f02 	cmn.w	r0, #2
    cad6:	d10b      	bne.n	caf0 <lfs_fs_parent+0x78>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    cad8:	69a3      	ldr	r3, [r4, #24]
    cada:	f1b3 3fff 	cmp.w	r3, #4294967295
    cade:	d0da      	beq.n	ca96 <lfs_fs_parent+0x1e>
    cae0:	69e3      	ldr	r3, [r4, #28]
    cae2:	f1b3 3fff 	cmp.w	r3, #4294967295
    cae6:	d0d4      	beq.n	ca92 <lfs_fs_parent+0x1a>
    cae8:	2300      	movs	r3, #0
    caea:	e7d5      	b.n	ca98 <lfs_fs_parent+0x20>
    return LFS_ERR_NOENT;
    caec:	f06f 0301 	mvn.w	r3, #1
}
    caf0:	4618      	mov	r0, r3
    caf2:	b009      	add	sp, #36	; 0x24
    caf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    caf6:	bf00      	nop
    caf8:	00014207 	.word	0x00014207
    cafc:	20000008 	.word	0x20000008
    cb00:	7ff003ff 	.word	0x7ff003ff

0000cb04 <lfs_dir_traverse>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
    cb04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cb08:	b097      	sub	sp, #92	; 0x5c
    cb0a:	900b      	str	r0, [sp, #44]	; 0x2c
    cb0c:	4688      	mov	r8, r1
    cb0e:	4692      	mov	sl, r2
    cb10:	461d      	mov	r5, r3
    cb12:	9e20      	ldr	r6, [sp, #128]	; 0x80
    cb14:	9f21      	ldr	r7, [sp, #132]	; 0x84
    cb16:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
    cb1a:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
    cb1e:	930d      	str	r3, [sp, #52]	; 0x34
    cb20:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
    cb24:	930e      	str	r3, [sp, #56]	; 0x38
    cb26:	f9bd 3098 	ldrsh.w	r3, [sp, #152]	; 0x98
    cb2a:	930c      	str	r3, [sp, #48]	; 0x30
    return ((int32_t)(tag << 22) >> 22) == -1;
    cb2c:	f345 0409 	sbfx	r4, r5, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    cb30:	f1b4 3fff 	cmp.w	r4, #4294967295
    cb34:	bf14      	ite	ne
    cb36:	462c      	movne	r4, r5
    cb38:	1c6c      	addeq	r4, r5, #1
    return tag & 0x000003ff;
    cb3a:	f3c4 0409 	ubfx	r4, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    cb3e:	3404      	adds	r4, #4
        if (off+lfs_tag_dsize(ptag) < dir->off) {
    cb40:	4454      	add	r4, sl
    cb42:	f8d8 300c 	ldr.w	r3, [r8, #12]
    cb46:	429c      	cmp	r4, r3
    cb48:	d32b      	bcc.n	cba2 <lfs_dir_traverse+0x9e>
        } else if (attrcount > 0) {
    cb4a:	2f00      	cmp	r7, #0
    cb4c:	f340 80ba 	ble.w	ccc4 <lfs_dir_traverse+0x1c0>
            tag = attrs[0].tag;
    cb50:	6833      	ldr	r3, [r6, #0]
    cb52:	9313      	str	r3, [sp, #76]	; 0x4c
            buffer = attrs[0].buffer;
    cb54:	6874      	ldr	r4, [r6, #4]
            attrs += 1;
    cb56:	3608      	adds	r6, #8
            attrcount -= 1;
    cb58:	3f01      	subs	r7, #1
        if ((mask & tmask & tag) != (mask & tmask & ttag)) {
    cb5a:	4b5d      	ldr	r3, [pc, #372]	; (ccd0 <lfs_dir_traverse+0x1cc>)
    cb5c:	ea0b 0303 	and.w	r3, fp, r3
    cb60:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    cb62:	9923      	ldr	r1, [sp, #140]	; 0x8c
    cb64:	404a      	eors	r2, r1
    cb66:	ea12 0903 	ands.w	r9, r2, r3
    cb6a:	d1df      	bne.n	cb2c <lfs_dir_traverse+0x28>
    return (tag & 0x000ffc00) >> 10;
    cb6c:	f3cb 2389 	ubfx	r3, fp, #10, #10
        if (lfs_tag_id(tmask) != 0) {
    cb70:	2b00      	cmp	r3, #0
    cb72:	d135      	bne.n	cbe0 <lfs_dir_traverse+0xdc>
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
    cb74:	9913      	ldr	r1, [sp, #76]	; 0x4c
    return (tag & 0x7ff00000) >> 20;
    cb76:	f3c1 530a 	ubfx	r3, r1, #20, #11
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
    cb7a:	2b00      	cmp	r3, #0
    cb7c:	d0d6      	beq.n	cb2c <lfs_dir_traverse+0x28>
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
    cb7e:	f240 1201 	movw	r2, #257	; 0x101
    cb82:	4293      	cmp	r3, r2
    cb84:	d04c      	beq.n	cc20 <lfs_dir_traverse+0x11c>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
    cb86:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    cb8a:	d06d      	beq.n	cc68 <lfs_dir_traverse+0x164>
            int err = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
    cb8c:	4622      	mov	r2, r4
    cb8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cb90:	eb01 2183 	add.w	r1, r1, r3, lsl #10
    cb94:	9828      	ldr	r0, [sp, #160]	; 0xa0
    cb96:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    cb98:	4798      	blx	r3
            if (err) {
    cb9a:	4603      	mov	r3, r0
    cb9c:	2800      	cmp	r0, #0
    cb9e:	d0c5      	beq.n	cb2c <lfs_dir_traverse+0x28>
    cba0:	e091      	b.n	ccc6 <lfs_dir_traverse+0x1c2>
            int err = lfs_bd_read(lfs,
    cba2:	2304      	movs	r3, #4
    cba4:	9303      	str	r3, [sp, #12]
    cba6:	aa13      	add	r2, sp, #76	; 0x4c
    cba8:	9202      	str	r2, [sp, #8]
    cbaa:	9401      	str	r4, [sp, #4]
    cbac:	f8d8 2000 	ldr.w	r2, [r8]
    cbb0:	9200      	str	r2, [sp, #0]
    cbb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    cbb4:	2100      	movs	r1, #0
    cbb6:	4610      	mov	r0, r2
    cbb8:	f007 fa59 	bl	1406e <lfs_bd_read>
            if (err) {
    cbbc:	4603      	mov	r3, r0
    cbbe:	2800      	cmp	r0, #0
    cbc0:	f040 8081 	bne.w	ccc6 <lfs_dir_traverse+0x1c2>
            tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
    cbc4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    return __builtin_bswap32(a);
    cbc6:	ba1b      	rev	r3, r3
    cbc8:	405d      	eors	r5, r3
    cbca:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    cbce:	9513      	str	r5, [sp, #76]	; 0x4c
            disk.block = dir->pair[0];
    cbd0:	f8d8 3000 	ldr.w	r3, [r8]
    cbd4:	9314      	str	r3, [sp, #80]	; 0x50
            disk.off = off+sizeof(lfs_tag_t);
    cbd6:	1d23      	adds	r3, r4, #4
    cbd8:	9315      	str	r3, [sp, #84]	; 0x54
            off += lfs_tag_dsize(ptag);
    cbda:	46a2      	mov	sl, r4
            buffer = &disk;
    cbdc:	ac14      	add	r4, sp, #80	; 0x50
    cbde:	e7bc      	b.n	cb5a <lfs_dir_traverse+0x56>
            int filter = lfs_dir_traverse(lfs,
    cbe0:	ab13      	add	r3, sp, #76	; 0x4c
    cbe2:	9308      	str	r3, [sp, #32]
    cbe4:	4b3b      	ldr	r3, [pc, #236]	; (ccd4 <lfs_dir_traverse+0x1d0>)
    cbe6:	9307      	str	r3, [sp, #28]
    cbe8:	2300      	movs	r3, #0
    cbea:	9306      	str	r3, [sp, #24]
    cbec:	9305      	str	r3, [sp, #20]
    cbee:	9304      	str	r3, [sp, #16]
    cbf0:	9303      	str	r3, [sp, #12]
    cbf2:	9302      	str	r3, [sp, #8]
    cbf4:	9701      	str	r7, [sp, #4]
    cbf6:	9600      	str	r6, [sp, #0]
    cbf8:	462b      	mov	r3, r5
    cbfa:	4652      	mov	r2, sl
    cbfc:	4641      	mov	r1, r8
    cbfe:	980b      	ldr	r0, [sp, #44]	; 0x2c
    cc00:	f7ff ff80 	bl	cb04 <lfs_dir_traverse>
            if (filter < 0) {
    cc04:	1e03      	subs	r3, r0, #0
    cc06:	db5e      	blt.n	ccc6 <lfs_dir_traverse+0x1c2>
            if (filter) {
    cc08:	2b00      	cmp	r3, #0
    cc0a:	d18f      	bne.n	cb2c <lfs_dir_traverse+0x28>
    return (tag & 0x000ffc00) >> 10;
    cc0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    cc0e:	f3c3 2389 	ubfx	r3, r3, #10, #10
            if (!(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
    cc12:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    cc14:	429a      	cmp	r2, r3
    cc16:	d889      	bhi.n	cb2c <lfs_dir_traverse+0x28>
    cc18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    cc1a:	429a      	cmp	r2, r3
    cc1c:	d8aa      	bhi.n	cb74 <lfs_dir_traverse+0x70>
    cc1e:	e785      	b.n	cb2c <lfs_dir_traverse+0x28>
    return tag & 0x000003ff;
    cc20:	f3c1 0209 	ubfx	r2, r1, #0, #10
            uint16_t fromid = lfs_tag_size(tag);
    cc24:	4610      	mov	r0, r2
    return (tag & 0x000ffc00) >> 10;
    cc26:	f3c1 2389 	ubfx	r3, r1, #10, #10
                    fromid, fromid+1, toid-fromid+diff,
    cc2a:	1a9b      	subs	r3, r3, r2
            int err = lfs_dir_traverse(lfs,
    cc2c:	9928      	ldr	r1, [sp, #160]	; 0xa0
    cc2e:	9108      	str	r1, [sp, #32]
    cc30:	9927      	ldr	r1, [sp, #156]	; 0x9c
    cc32:	9107      	str	r1, [sp, #28]
    cc34:	990c      	ldr	r1, [sp, #48]	; 0x30
    cc36:	440b      	add	r3, r1
    cc38:	b21b      	sxth	r3, r3
    cc3a:	9306      	str	r3, [sp, #24]
    cc3c:	3201      	adds	r2, #1
    cc3e:	9205      	str	r2, [sp, #20]
    cc40:	9004      	str	r0, [sp, #16]
    cc42:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    cc46:	9303      	str	r3, [sp, #12]
    cc48:	4b23      	ldr	r3, [pc, #140]	; (ccd8 <lfs_dir_traverse+0x1d4>)
    cc4a:	9302      	str	r3, [sp, #8]
    cc4c:	2200      	movs	r2, #0
    cc4e:	9201      	str	r2, [sp, #4]
    cc50:	9200      	str	r2, [sp, #0]
    cc52:	f04f 33ff 	mov.w	r3, #4294967295
    cc56:	4621      	mov	r1, r4
    cc58:	980b      	ldr	r0, [sp, #44]	; 0x2c
    cc5a:	f7ff ff53 	bl	cb04 <lfs_dir_traverse>
            if (err) {
    cc5e:	4603      	mov	r3, r0
    cc60:	2800      	cmp	r0, #0
    cc62:	f43f af63 	beq.w	cb2c <lfs_dir_traverse+0x28>
    cc66:	e02e      	b.n	ccc6 <lfs_dir_traverse+0x1c2>
    cc68:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    cc6c:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
    cc70:	9511      	str	r5, [sp, #68]	; 0x44
    cc72:	46b2      	mov	sl, r6
    cc74:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    cc76:	9e27      	ldr	r6, [sp, #156]	; 0x9c
    cc78:	f8dd 80a0 	ldr.w	r8, [sp, #160]	; 0xa0
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
    cc7c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    return tag & 0x000003ff;
    cc7e:	f3c3 0209 	ubfx	r2, r3, #0, #10
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
    cc82:	4591      	cmp	r9, r2
    cc84:	d217      	bcs.n	ccb6 <lfs_dir_traverse+0x1b2>
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
    cc86:	eb09 0149 	add.w	r1, r9, r9, lsl #1
    cc8a:	eb04 0281 	add.w	r2, r4, r1, lsl #2
    cc8e:	f814 1021 	ldrb.w	r1, [r4, r1, lsl #2]
    cc92:	f501 7140 	add.w	r1, r1, #768	; 0x300
    return (tag & 0x000ffc00) >> 10;
    cc96:	f3c3 2389 	ubfx	r3, r3, #10, #10
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
    cc9a:	442b      	add	r3, r5
    cc9c:	029b      	lsls	r3, r3, #10
    cc9e:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
    cca2:	6891      	ldr	r1, [r2, #8]
    cca4:	6852      	ldr	r2, [r2, #4]
    cca6:	4319      	orrs	r1, r3
    cca8:	4640      	mov	r0, r8
    ccaa:	47b0      	blx	r6
                if (err) {
    ccac:	4603      	mov	r3, r0
    ccae:	b950      	cbnz	r0, ccc6 <lfs_dir_traverse+0x1c2>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
    ccb0:	f109 0901 	add.w	r9, r9, #1
    ccb4:	e7e2      	b.n	cc7c <lfs_dir_traverse+0x178>
    ccb6:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    ccba:	9d11      	ldr	r5, [sp, #68]	; 0x44
    ccbc:	4656      	mov	r6, sl
    ccbe:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
    ccc2:	e733      	b.n	cb2c <lfs_dir_traverse+0x28>
            return 0;
    ccc4:	2300      	movs	r3, #0
}
    ccc6:	4618      	mov	r0, r3
    ccc8:	b017      	add	sp, #92	; 0x5c
    ccca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ccce:	bf00      	nop
    ccd0:	7ff00000 	.word	0x7ff00000
    ccd4:	0000c459 	.word	0x0000c459
    ccd8:	600ffc00 	.word	0x600ffc00

0000ccdc <lfs_dir_getslice>:
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
    ccdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cce0:	b089      	sub	sp, #36	; 0x24
    cce2:	4607      	mov	r7, r0
    cce4:	468a      	mov	sl, r1
    cce6:	4690      	mov	r8, r2
    cce8:	469b      	mov	fp, r3
    lfs_off_t off = dir->off;
    ccea:	68cd      	ldr	r5, [r1, #12]
    lfs_tag_t ntag = dir->etag;
    ccec:	690b      	ldr	r3, [r1, #16]
    ccee:	9307      	str	r3, [sp, #28]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    ccf0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    return (tag & 0x70000000) >> 20;
    ccf2:	0d1a      	lsrs	r2, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    ccf4:	f412 6fe0 	tst.w	r2, #1792	; 0x700
    ccf8:	d010      	beq.n	cd1c <lfs_dir_getslice+0x40>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    ccfa:	6c02      	ldr	r2, [r0, #64]	; 0x40
    ccfc:	6809      	ldr	r1, [r1, #0]
    ccfe:	4291      	cmp	r1, r2
    cd00:	d01e      	beq.n	cd40 <lfs_dir_getslice+0x64>
    cd02:	6c44      	ldr	r4, [r0, #68]	; 0x44
    cd04:	f8da 0004 	ldr.w	r0, [sl, #4]
    cd08:	42a0      	cmp	r0, r4
    cd0a:	d01b      	beq.n	cd44 <lfs_dir_getslice+0x68>
    cd0c:	4290      	cmp	r0, r2
    cd0e:	d01b      	beq.n	cd48 <lfs_dir_getslice+0x6c>
    cd10:	428c      	cmp	r4, r1
    cd12:	d001      	beq.n	cd18 <lfs_dir_getslice+0x3c>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    cd14:	2200      	movs	r2, #0
    cd16:	e002      	b.n	cd1e <lfs_dir_getslice+0x42>
    cd18:	2201      	movs	r2, #1
    cd1a:	e000      	b.n	cd1e <lfs_dir_getslice+0x42>
    cd1c:	2200      	movs	r2, #0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
    cd1e:	2a00      	cmp	r2, #0
    cd20:	f000 808b 	beq.w	ce3a <lfs_dir_getslice+0x15e>
    return (tag & 0x000ffc00) >> 10;
    cd24:	f3c8 2289 	ubfx	r2, r8, #10, #10
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
    cd28:	2a00      	cmp	r2, #0
    cd2a:	f000 8088 	beq.w	ce3e <lfs_dir_getslice+0x162>
    return (tag & 0x000ffc00) >> 10;
    cd2e:	f3c3 2389 	ubfx	r3, r3, #10, #10
    cd32:	f3cb 2289 	ubfx	r2, fp, #10, #10
            lfs_tag_id(gmask) != 0 &&
    cd36:	429a      	cmp	r2, r3
    cd38:	f080 8083 	bcs.w	ce42 <lfs_dir_getslice+0x166>
    lfs_stag_t gdiff = 0;
    cd3c:	2600      	movs	r6, #0
    cd3e:	e00b      	b.n	cd58 <lfs_dir_getslice+0x7c>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    cd40:	2201      	movs	r2, #1
    cd42:	e7ec      	b.n	cd1e <lfs_dir_getslice+0x42>
    cd44:	2201      	movs	r2, #1
    cd46:	e7ea      	b.n	cd1e <lfs_dir_getslice+0x42>
    cd48:	2201      	movs	r2, #1
    cd4a:	e7e8      	b.n	cd1e <lfs_dir_getslice+0x42>
        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
    cd4c:	ebab 0306 	sub.w	r3, fp, r6
    cd50:	4063      	eors	r3, r4
    cd52:	ea13 0f08 	tst.w	r3, r8
    cd56:	d04a      	beq.n	cdee <lfs_dir_getslice+0x112>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
    cd58:	9c07      	ldr	r4, [sp, #28]
    return ((int32_t)(tag << 22) >> 22) == -1;
    cd5a:	f344 0909 	sbfx	r9, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    cd5e:	f1b9 3fff 	cmp.w	r9, #4294967295
    cd62:	bf14      	ite	ne
    cd64:	4623      	movne	r3, r4
    cd66:	1c63      	addeq	r3, r4, #1
    return tag & 0x000003ff;
    cd68:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    cd6c:	1d1a      	adds	r2, r3, #4
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
    cd6e:	3308      	adds	r3, #8
    cd70:	42ab      	cmp	r3, r5
    cd72:	d868      	bhi.n	ce46 <lfs_dir_getslice+0x16a>
        off -= lfs_tag_dsize(ntag);
    cd74:	1aad      	subs	r5, r5, r2
        int err = lfs_bd_read(lfs,
    cd76:	9705      	str	r7, [sp, #20]
    cd78:	2304      	movs	r3, #4
    cd7a:	9303      	str	r3, [sp, #12]
    cd7c:	aa07      	add	r2, sp, #28
    cd7e:	9202      	str	r2, [sp, #8]
    cd80:	9501      	str	r5, [sp, #4]
    cd82:	f8da 2000 	ldr.w	r2, [sl]
    cd86:	9200      	str	r2, [sp, #0]
    cd88:	463a      	mov	r2, r7
    cd8a:	2100      	movs	r1, #0
    cd8c:	4638      	mov	r0, r7
    cd8e:	f007 f96e 	bl	1406e <lfs_bd_read>
        if (err) {
    cd92:	4603      	mov	r3, r0
    cd94:	2800      	cmp	r0, #0
    cd96:	d158      	bne.n	ce4a <lfs_dir_getslice+0x16e>
        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
    cd98:	9b07      	ldr	r3, [sp, #28]
    cd9a:	ba1b      	rev	r3, r3
    cd9c:	4063      	eors	r3, r4
    cd9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    cda2:	9307      	str	r3, [sp, #28]
    return (tag & 0x000ffc00) >> 10;
    cda4:	f3c8 2389 	ubfx	r3, r8, #10, #10
        if (lfs_tag_id(gmask) != 0 &&
    cda8:	2b00      	cmp	r3, #0
    cdaa:	d0cf      	beq.n	cd4c <lfs_dir_getslice+0x70>
    return (tag & 0x70000000) >> 20;
    cdac:	0d23      	lsrs	r3, r4, #20
    cdae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
        if (lfs_tag_id(gmask) != 0 &&
    cdb2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    cdb6:	d1c9      	bne.n	cd4c <lfs_dir_getslice+0x70>
    return (tag & 0x000ffc00) >> 10;
    cdb8:	f3c4 2089 	ubfx	r0, r4, #10, #10
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
    cdbc:	4631      	mov	r1, r6
    cdbe:	ebab 0206 	sub.w	r2, fp, r6
    return (tag & 0x000ffc00) >> 10;
    cdc2:	f3c2 2c89 	ubfx	ip, r2, #10, #10
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
    cdc6:	4584      	cmp	ip, r0
    cdc8:	d3c0      	bcc.n	cd4c <lfs_dir_getslice+0x70>
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
    cdca:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    cdce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    cdd2:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
    cdd6:	f022 0203 	bic.w	r2, r2, #3
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
    cdda:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    cdde:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    cde2:	42a2      	cmp	r2, r4
    cde4:	d035      	beq.n	ce52 <lfs_dir_getslice+0x176>
    return (int8_t)lfs_tag_chunk(tag);
    cde6:	b25e      	sxtb	r6, r3
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    cde8:	eb01 2686 	add.w	r6, r1, r6, lsl #10
    cdec:	e7ae      	b.n	cd4c <lfs_dir_getslice+0x70>
    cdee:	46b0      	mov	r8, r6
            if (lfs_tag_isdelete(tag)) {
    cdf0:	f1b9 3fff 	cmp.w	r9, #4294967295
    cdf4:	d030      	beq.n	ce58 <lfs_dir_getslice+0x17c>
    return tag & 0x000003ff;
    cdf6:	f3c4 0609 	ubfx	r6, r4, #0, #10
    return (a < b) ? a : b;
    cdfa:	9b14      	ldr	r3, [sp, #80]	; 0x50
    cdfc:	429e      	cmp	r6, r3
    cdfe:	bf28      	it	cs
    ce00:	461e      	movcs	r6, r3
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
    ce02:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ce04:	442b      	add	r3, r5
            err = lfs_bd_read(lfs,
    ce06:	9603      	str	r6, [sp, #12]
    ce08:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    ce0a:	9202      	str	r2, [sp, #8]
    ce0c:	3304      	adds	r3, #4
    ce0e:	9301      	str	r3, [sp, #4]
    ce10:	f8da 3000 	ldr.w	r3, [sl]
    ce14:	9300      	str	r3, [sp, #0]
    ce16:	4633      	mov	r3, r6
    ce18:	9a05      	ldr	r2, [sp, #20]
    ce1a:	2100      	movs	r1, #0
    ce1c:	4638      	mov	r0, r7
    ce1e:	f007 f926 	bl	1406e <lfs_bd_read>
            if (err) {
    ce22:	4603      	mov	r3, r0
    ce24:	b988      	cbnz	r0, ce4a <lfs_dir_getslice+0x16e>
            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
    ce26:	9b14      	ldr	r3, [sp, #80]	; 0x50
    ce28:	1b9a      	subs	r2, r3, r6
    ce2a:	2100      	movs	r1, #0
    ce2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    ce2e:	1998      	adds	r0, r3, r6
    ce30:	f005 fe6a 	bl	12b08 <memset>
            return tag + gdiff;
    ce34:	4643      	mov	r3, r8
    ce36:	4423      	add	r3, r4
    ce38:	e007      	b.n	ce4a <lfs_dir_getslice+0x16e>
    lfs_stag_t gdiff = 0;
    ce3a:	2600      	movs	r6, #0
    ce3c:	e78c      	b.n	cd58 <lfs_dir_getslice+0x7c>
    ce3e:	2600      	movs	r6, #0
    ce40:	e78a      	b.n	cd58 <lfs_dir_getslice+0x7c>
        gdiff -= LFS_MKTAG(0, 1, 0);
    ce42:	4e07      	ldr	r6, [pc, #28]	; (ce60 <lfs_dir_getslice+0x184>)
    ce44:	e788      	b.n	cd58 <lfs_dir_getslice+0x7c>
    return LFS_ERR_NOENT;
    ce46:	f06f 0301 	mvn.w	r3, #1
}
    ce4a:	4618      	mov	r0, r3
    ce4c:	b009      	add	sp, #36	; 0x24
    ce4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                return LFS_ERR_NOENT;
    ce52:	f06f 0301 	mvn.w	r3, #1
    ce56:	e7f8      	b.n	ce4a <lfs_dir_getslice+0x16e>
                return LFS_ERR_NOENT;
    ce58:	f06f 0301 	mvn.w	r3, #1
    ce5c:	e7f5      	b.n	ce4a <lfs_dir_getslice+0x16e>
    ce5e:	bf00      	nop
    ce60:	fffffc00 	.word	0xfffffc00

0000ce64 <lfs_dir_getgstate>:
        lfs_gstate_t *gstate) {
    ce64:	b510      	push	{r4, lr}
    ce66:	b086      	sub	sp, #24
    ce68:	4614      	mov	r4, r2
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
    ce6a:	ab03      	add	r3, sp, #12
    ce6c:	9300      	str	r3, [sp, #0]
    ce6e:	4b10      	ldr	r3, [pc, #64]	; (ceb0 <lfs_dir_getgstate+0x4c>)
    ce70:	4a10      	ldr	r2, [pc, #64]	; (ceb4 <lfs_dir_getgstate+0x50>)
    ce72:	f007 fa90 	bl	14396 <lfs_dir_get>
    if (res < 0 && res != LFS_ERR_NOENT) {
    ce76:	2800      	cmp	r0, #0
    ce78:	db04      	blt.n	ce84 <lfs_dir_getgstate+0x20>
    if (res != LFS_ERR_NOENT) {
    ce7a:	f110 0f02 	cmn.w	r0, #2
    ce7e:	d005      	beq.n	ce8c <lfs_dir_getgstate+0x28>
    for (int i = 0; i < 3; i++) {
    ce80:	2300      	movs	r3, #0
    ce82:	e010      	b.n	cea6 <lfs_dir_getgstate+0x42>
    if (res < 0 && res != LFS_ERR_NOENT) {
    ce84:	f110 0f02 	cmn.w	r0, #2
    ce88:	d110      	bne.n	ceac <lfs_dir_getgstate+0x48>
    ce8a:	e7f6      	b.n	ce7a <lfs_dir_getgstate+0x16>
    return 0;
    ce8c:	2000      	movs	r0, #0
    ce8e:	e00d      	b.n	ceac <lfs_dir_getgstate+0x48>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
    ce90:	aa06      	add	r2, sp, #24
    ce92:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    ce96:	f852 2c0c 	ldr.w	r2, [r2, #-12]
    ce9a:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    ce9e:	4051      	eors	r1, r2
    cea0:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
    cea4:	3301      	adds	r3, #1
    cea6:	2b02      	cmp	r3, #2
    cea8:	ddf2      	ble.n	ce90 <lfs_dir_getgstate+0x2c>
    return 0;
    ceaa:	2000      	movs	r0, #0
}
    ceac:	b006      	add	sp, #24
    ceae:	bd10      	pop	{r4, pc}
    ceb0:	7ff0000c 	.word	0x7ff0000c
    ceb4:	7ff00000 	.word	0x7ff00000

0000ceb8 <lfs_dir_find>:
        const char **path, uint16_t *id) {
    ceb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cebc:	b08d      	sub	sp, #52	; 0x34
    cebe:	4683      	mov	fp, r0
    cec0:	4688      	mov	r8, r1
    cec2:	9207      	str	r2, [sp, #28]
    const char *name = *path;
    cec4:	6812      	ldr	r2, [r2, #0]
    cec6:	9206      	str	r2, [sp, #24]
    if (id) {
    cec8:	9305      	str	r3, [sp, #20]
    ceca:	b11b      	cbz	r3, ced4 <lfs_dir_find+0x1c>
    cecc:	461a      	mov	r2, r3
        *id = 0x3ff;
    cece:	f240 33ff 	movw	r3, #1023	; 0x3ff
    ced2:	8013      	strh	r3, [r2, #0]
    dir->tail[0] = lfs->root[0];
    ced4:	f8db 3020 	ldr.w	r3, [fp, #32]
    ced8:	f8c8 3018 	str.w	r3, [r8, #24]
    dir->tail[1] = lfs->root[1];
    cedc:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    cee0:	f8c8 301c 	str.w	r3, [r8, #28]
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
    cee4:	4e50      	ldr	r6, [pc, #320]	; (d028 <lfs_dir_find+0x170>)
        name += strspn(name, "/");
    cee6:	4c51      	ldr	r4, [pc, #324]	; (d02c <lfs_dir_find+0x174>)
    cee8:	4621      	mov	r1, r4
    ceea:	9d06      	ldr	r5, [sp, #24]
    ceec:	4628      	mov	r0, r5
    ceee:	f005 fe28 	bl	12b42 <strspn>
    cef2:	462b      	mov	r3, r5
    cef4:	4403      	add	r3, r0
    cef6:	4699      	mov	r9, r3
        lfs_size_t namelen = strcspn(name, "/");
    cef8:	4621      	mov	r1, r4
    cefa:	4618      	mov	r0, r3
    cefc:	f005 fe2f 	bl	12b5e <strcspn>
    cf00:	4682      	mov	sl, r0
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
    cf02:	2801      	cmp	r0, #1
    cf04:	d00b      	beq.n	cf1e <lfs_dir_find+0x66>
    cf06:	f1ba 0f02 	cmp.w	sl, #2
    cf0a:	d013      	beq.n	cf34 <lfs_dir_find+0x7c>
        const char *suffix = name + namelen;
    cf0c:	eb09 030a 	add.w	r3, r9, sl
    cf10:	9306      	str	r3, [sp, #24]
    cf12:	461c      	mov	r4, r3
        int depth = 1;
    cf14:	2701      	movs	r7, #1
    cf16:	e017      	b.n	cf48 <lfs_dir_find+0x90>
    cf18:	46b3      	mov	fp, r6
    cf1a:	4606      	mov	r6, r0
    cf1c:	e7e3      	b.n	cee6 <lfs_dir_find+0x2e>
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
    cf1e:	2201      	movs	r2, #1
    cf20:	4943      	ldr	r1, [pc, #268]	; (d030 <lfs_dir_find+0x178>)
    cf22:	4648      	mov	r0, r9
    cf24:	f005 fdb5 	bl	12a92 <memcmp>
    cf28:	2800      	cmp	r0, #0
    cf2a:	d1ec      	bne.n	cf06 <lfs_dir_find+0x4e>
            name += namelen;
    cf2c:	eb09 030a 	add.w	r3, r9, sl
    cf30:	9306      	str	r3, [sp, #24]
            goto nextname;
    cf32:	e7d8      	b.n	cee6 <lfs_dir_find+0x2e>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
    cf34:	2202      	movs	r2, #2
    cf36:	493f      	ldr	r1, [pc, #252]	; (d034 <lfs_dir_find+0x17c>)
    cf38:	4648      	mov	r0, r9
    cf3a:	f005 fdaa 	bl	12a92 <memcmp>
    cf3e:	2800      	cmp	r0, #0
    cf40:	d1e4      	bne.n	cf0c <lfs_dir_find+0x54>
    cf42:	e7f3      	b.n	cf2c <lfs_dir_find+0x74>
                depth += 1;
    cf44:	3701      	adds	r7, #1
            suffix += sufflen;
    cf46:	442c      	add	r4, r5
            suffix += strspn(suffix, "/");
    cf48:	4d38      	ldr	r5, [pc, #224]	; (d02c <lfs_dir_find+0x174>)
    cf4a:	4629      	mov	r1, r5
    cf4c:	4620      	mov	r0, r4
    cf4e:	f005 fdf8 	bl	12b42 <strspn>
    cf52:	4404      	add	r4, r0
            sufflen = strcspn(suffix, "/");
    cf54:	4629      	mov	r1, r5
    cf56:	4620      	mov	r0, r4
    cf58:	f005 fe01 	bl	12b5e <strcspn>
            if (sufflen == 0) {
    cf5c:	4605      	mov	r5, r0
    cf5e:	b168      	cbz	r0, cf7c <lfs_dir_find+0xc4>
            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
    cf60:	2802      	cmp	r0, #2
    cf62:	d1ef      	bne.n	cf44 <lfs_dir_find+0x8c>
    cf64:	2202      	movs	r2, #2
    cf66:	4933      	ldr	r1, [pc, #204]	; (d034 <lfs_dir_find+0x17c>)
    cf68:	4620      	mov	r0, r4
    cf6a:	f005 fd92 	bl	12a92 <memcmp>
    cf6e:	2800      	cmp	r0, #0
    cf70:	d1e8      	bne.n	cf44 <lfs_dir_find+0x8c>
                if (depth == 0) {
    cf72:	3f01      	subs	r7, #1
    cf74:	d1e7      	bne.n	cf46 <lfs_dir_find+0x8e>
                    name = suffix + sufflen;
    cf76:	1963      	adds	r3, r4, r5
    cf78:	9306      	str	r3, [sp, #24]
                    goto nextname;
    cf7a:	e7b4      	b.n	cee6 <lfs_dir_find+0x2e>
        if (name[0] == '\0') {
    cf7c:	f899 3000 	ldrb.w	r3, [r9]
    cf80:	2b00      	cmp	r3, #0
    cf82:	d04c      	beq.n	d01e <lfs_dir_find+0x166>
        *path = name;
    cf84:	9b07      	ldr	r3, [sp, #28]
    cf86:	f8c3 9000 	str.w	r9, [r3]
    return (tag & 0x7ff00000) >> 20;
    cf8a:	f3c6 530a 	ubfx	r3, r6, #20, #11
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
    cf8e:	2b02      	cmp	r3, #2
    cf90:	d141      	bne.n	d016 <lfs_dir_find+0x15e>
    return (tag & 0x000ffc00) >> 10;
    cf92:	f3c6 2689 	ubfx	r6, r6, #10, #10
        if (lfs_tag_id(tag) != 0x3ff) {
    cf96:	f240 33ff 	movw	r3, #1023	; 0x3ff
    cf9a:	429e      	cmp	r6, r3
    cf9c:	d103      	bne.n	cfa6 <lfs_dir_find+0xee>
    cf9e:	464c      	mov	r4, r9
    cfa0:	4655      	mov	r5, sl
    cfa2:	465e      	mov	r6, fp
    cfa4:	e02a      	b.n	cffc <lfs_dir_find+0x144>
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
    cfa6:	02b6      	lsls	r6, r6, #10
    cfa8:	f108 0318 	add.w	r3, r8, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
    cfac:	9300      	str	r3, [sp, #0]
    cfae:	f046 5300 	orr.w	r3, r6, #536870912	; 0x20000000
    cfb2:	f043 0308 	orr.w	r3, r3, #8
    cfb6:	4a20      	ldr	r2, [pc, #128]	; (d038 <lfs_dir_find+0x180>)
    cfb8:	4641      	mov	r1, r8
    cfba:	4658      	mov	r0, fp
    cfbc:	f007 f9eb 	bl	14396 <lfs_dir_get>
            if (res < 0) {
    cfc0:	1e06      	subs	r6, r0, #0
    cfc2:	db2c      	blt.n	d01e <lfs_dir_find+0x166>
    cfc4:	464c      	mov	r4, r9
    cfc6:	4655      	mov	r5, sl
    cfc8:	465e      	mov	r6, fp
    cfca:	e017      	b.n	cffc <lfs_dir_find+0x144>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
    cfcc:	9b05      	ldr	r3, [sp, #20]
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
    cfce:	9609      	str	r6, [sp, #36]	; 0x24
    cfd0:	940a      	str	r4, [sp, #40]	; 0x28
    cfd2:	950b      	str	r5, [sp, #44]	; 0x2c
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
    cfd4:	aa09      	add	r2, sp, #36	; 0x24
    cfd6:	9203      	str	r2, [sp, #12]
    cfd8:	4a18      	ldr	r2, [pc, #96]	; (d03c <lfs_dir_find+0x184>)
    cfda:	9202      	str	r2, [sp, #8]
    cfdc:	9301      	str	r3, [sp, #4]
    cfde:	9500      	str	r5, [sp, #0]
    cfe0:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
    cfe4:	463a      	mov	r2, r7
    cfe6:	4641      	mov	r1, r8
    cfe8:	4630      	mov	r0, r6
    cfea:	f7ff fa99 	bl	c520 <lfs_dir_fetchmatch>
            if (tag < 0) {
    cfee:	2800      	cmp	r0, #0
    cff0:	db14      	blt.n	d01c <lfs_dir_find+0x164>
            if (tag) {
    cff2:	2800      	cmp	r0, #0
    cff4:	d190      	bne.n	cf18 <lfs_dir_find+0x60>
            if (!dir->split) {
    cff6:	f898 3017 	ldrb.w	r3, [r8, #23]
    cffa:	b14b      	cbz	r3, d010 <lfs_dir_find+0x158>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
    cffc:	f108 0718 	add.w	r7, r8, #24
                    (strchr(name, '/') == NULL) ? id : NULL,
    d000:	212f      	movs	r1, #47	; 0x2f
    d002:	4620      	mov	r0, r4
    d004:	f005 fd02 	bl	12a0c <strchr>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
    d008:	2800      	cmp	r0, #0
    d00a:	d0df      	beq.n	cfcc <lfs_dir_find+0x114>
    d00c:	2300      	movs	r3, #0
    d00e:	e7de      	b.n	cfce <lfs_dir_find+0x116>
                return LFS_ERR_NOENT;
    d010:	f06f 0601 	mvn.w	r6, #1
    d014:	e003      	b.n	d01e <lfs_dir_find+0x166>
            return LFS_ERR_NOTDIR;
    d016:	f06f 0613 	mvn.w	r6, #19
    d01a:	e000      	b.n	d01e <lfs_dir_find+0x166>
    d01c:	4606      	mov	r6, r0
}
    d01e:	4630      	mov	r0, r6
    d020:	b00d      	add	sp, #52	; 0x34
    d022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d026:	bf00      	nop
    d028:	002ffc00 	.word	0x002ffc00
    d02c:	00016df8 	.word	0x00016df8
    d030:	0001758c 	.word	0x0001758c
    d034:	00017590 	.word	0x00017590
    d038:	700ffc00 	.word	0x700ffc00
    d03c:	000142bf 	.word	0x000142bf

0000d040 <lfs_dir_getinfo>:
        uint16_t id, struct lfs_info *info) {
    d040:	b5f0      	push	{r4, r5, r6, r7, lr}
    d042:	b085      	sub	sp, #20
    d044:	461d      	mov	r5, r3
    if (id == 0x3ff) {
    d046:	f240 33ff 	movw	r3, #1023	; 0x3ff
    d04a:	429a      	cmp	r2, r3
    d04c:	d02c      	beq.n	d0a8 <lfs_dir_getinfo+0x68>
    d04e:	4604      	mov	r4, r0
    d050:	460e      	mov	r6, r1
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
    d052:	0297      	lsls	r7, r2, #10
    d054:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    d056:	3301      	adds	r3, #1
    d058:	f105 0108 	add.w	r1, r5, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
    d05c:	9100      	str	r1, [sp, #0]
    d05e:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
    d062:	4a1b      	ldr	r2, [pc, #108]	; (d0d0 <lfs_dir_getinfo+0x90>)
    d064:	4631      	mov	r1, r6
    d066:	f007 f996 	bl	14396 <lfs_dir_get>
    if (tag < 0) {
    d06a:	2800      	cmp	r0, #0
    d06c:	db24      	blt.n	d0b8 <lfs_dir_getinfo+0x78>
    return (tag & 0x7ff00000) >> 20;
    d06e:	f3c0 520a 	ubfx	r2, r0, #20, #11
    info->type = lfs_tag_type3(tag);
    d072:	702a      	strb	r2, [r5, #0]
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
    d074:	ab02      	add	r3, sp, #8
    d076:	9300      	str	r3, [sp, #0]
    d078:	f047 5300 	orr.w	r3, r7, #536870912	; 0x20000000
    d07c:	f043 0308 	orr.w	r3, r3, #8
    d080:	4a14      	ldr	r2, [pc, #80]	; (d0d4 <lfs_dir_getinfo+0x94>)
    d082:	4631      	mov	r1, r6
    d084:	4620      	mov	r0, r4
    d086:	f007 f986 	bl	14396 <lfs_dir_get>
    if (tag < 0) {
    d08a:	2800      	cmp	r0, #0
    d08c:	db14      	blt.n	d0b8 <lfs_dir_getinfo+0x78>
    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
    d08e:	4602      	mov	r2, r0
    return (tag & 0x7ff00000) >> 20;
    d090:	f3c0 500a 	ubfx	r0, r0, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
    d094:	f240 2302 	movw	r3, #514	; 0x202
    d098:	4298      	cmp	r0, r3
    d09a:	d00f      	beq.n	d0bc <lfs_dir_getinfo+0x7c>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
    d09c:	f240 2301 	movw	r3, #513	; 0x201
    d0a0:	4298      	cmp	r0, r3
    d0a2:	d00f      	beq.n	d0c4 <lfs_dir_getinfo+0x84>
    return 0;
    d0a4:	2000      	movs	r0, #0
    d0a6:	e007      	b.n	d0b8 <lfs_dir_getinfo+0x78>
        strcpy(info->name, "/");
    d0a8:	490b      	ldr	r1, [pc, #44]	; (d0d8 <lfs_dir_getinfo+0x98>)
    d0aa:	f105 0008 	add.w	r0, r5, #8
    d0ae:	f005 fc8a 	bl	129c6 <strcpy>
        info->type = LFS_TYPE_DIR;
    d0b2:	2302      	movs	r3, #2
    d0b4:	702b      	strb	r3, [r5, #0]
        return 0;
    d0b6:	2000      	movs	r0, #0
}
    d0b8:	b005      	add	sp, #20
    d0ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
        info->size = ctz.size;
    d0bc:	9b03      	ldr	r3, [sp, #12]
    d0be:	606b      	str	r3, [r5, #4]
    return 0;
    d0c0:	2000      	movs	r0, #0
    d0c2:	e7f9      	b.n	d0b8 <lfs_dir_getinfo+0x78>
    return tag & 0x000003ff;
    d0c4:	f3c2 0209 	ubfx	r2, r2, #0, #10
        info->size = lfs_tag_size(tag);
    d0c8:	606a      	str	r2, [r5, #4]
    return 0;
    d0ca:	2000      	movs	r0, #0
    d0cc:	e7f4      	b.n	d0b8 <lfs_dir_getinfo+0x78>
    d0ce:	bf00      	nop
    d0d0:	780ffc00 	.word	0x780ffc00
    d0d4:	700ffc00 	.word	0x700ffc00
    d0d8:	00016df8 	.word	0x00016df8

0000d0dc <lfs_dir_open>:
int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
    d0dc:	b570      	push	{r4, r5, r6, lr}
    d0de:	b086      	sub	sp, #24
    d0e0:	4605      	mov	r5, r0
    d0e2:	460c      	mov	r4, r1
    d0e4:	9203      	str	r2, [sp, #12]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
    d0e6:	f101 0608 	add.w	r6, r1, #8
    d0ea:	2300      	movs	r3, #0
    d0ec:	aa03      	add	r2, sp, #12
    d0ee:	4631      	mov	r1, r6
    d0f0:	f7ff fee2 	bl	ceb8 <lfs_dir_find>
    if (tag < 0) {
    d0f4:	2800      	cmp	r0, #0
    d0f6:	db1f      	blt.n	d138 <lfs_dir_open+0x5c>
    return (tag & 0x7ff00000) >> 20;
    d0f8:	f3c0 530a 	ubfx	r3, r0, #20, #11
    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
    d0fc:	2b02      	cmp	r3, #2
    d0fe:	d12c      	bne.n	d15a <lfs_dir_open+0x7e>
    return (tag & 0x000ffc00) >> 10;
    d100:	f3c0 2089 	ubfx	r0, r0, #10, #10
    if (lfs_tag_id(tag) == 0x3ff) {
    d104:	f240 33ff 	movw	r3, #1023	; 0x3ff
    d108:	4298      	cmp	r0, r3
    d10a:	d117      	bne.n	d13c <lfs_dir_open+0x60>
        pair[0] = lfs->root[0];
    d10c:	6a2b      	ldr	r3, [r5, #32]
    d10e:	9304      	str	r3, [sp, #16]
        pair[1] = lfs->root[1];
    d110:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    d112:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
    d114:	aa04      	add	r2, sp, #16
    d116:	4631      	mov	r1, r6
    d118:	4628      	mov	r0, r5
    d11a:	f007 f8f0 	bl	142fe <lfs_dir_fetch>
    if (err) {
    d11e:	b958      	cbnz	r0, d138 <lfs_dir_open+0x5c>
    dir->head[0] = dir->m.pair[0];
    d120:	68a3      	ldr	r3, [r4, #8]
    d122:	62e3      	str	r3, [r4, #44]	; 0x2c
    dir->head[1] = dir->m.pair[1];
    d124:	68e3      	ldr	r3, [r4, #12]
    d126:	6323      	str	r3, [r4, #48]	; 0x30
    dir->id = 0;
    d128:	2300      	movs	r3, #0
    d12a:	80a3      	strh	r3, [r4, #4]
    dir->pos = 0;
    d12c:	62a3      	str	r3, [r4, #40]	; 0x28
    dir->type = LFS_TYPE_DIR;
    d12e:	2302      	movs	r3, #2
    d130:	71a3      	strb	r3, [r4, #6]
    dir->next = (lfs_dir_t*)lfs->mlist;
    d132:	6aab      	ldr	r3, [r5, #40]	; 0x28
    d134:	6023      	str	r3, [r4, #0]
    lfs->mlist = (struct lfs_mlist*)dir;
    d136:	62ac      	str	r4, [r5, #40]	; 0x28
}
    d138:	b006      	add	sp, #24
    d13a:	bd70      	pop	{r4, r5, r6, pc}
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
    d13c:	0283      	lsls	r3, r0, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
    d13e:	aa04      	add	r2, sp, #16
    d140:	9200      	str	r2, [sp, #0]
    d142:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    d146:	f043 0308 	orr.w	r3, r3, #8
    d14a:	4a05      	ldr	r2, [pc, #20]	; (d160 <lfs_dir_open+0x84>)
    d14c:	4631      	mov	r1, r6
    d14e:	4628      	mov	r0, r5
    d150:	f007 f921 	bl	14396 <lfs_dir_get>
        if (res < 0) {
    d154:	2800      	cmp	r0, #0
    d156:	dadd      	bge.n	d114 <lfs_dir_open+0x38>
    d158:	e7ee      	b.n	d138 <lfs_dir_open+0x5c>
        return LFS_ERR_NOTDIR;
    d15a:	f06f 0013 	mvn.w	r0, #19
    d15e:	e7eb      	b.n	d138 <lfs_dir_open+0x5c>
    d160:	700ffc00 	.word	0x700ffc00

0000d164 <lfs_dir_read>:
int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
    d164:	b570      	push	{r4, r5, r6, lr}
    d166:	4605      	mov	r5, r0
    d168:	460c      	mov	r4, r1
    d16a:	4616      	mov	r6, r2
    memset(info, 0, sizeof(*info));
    d16c:	f44f 7284 	mov.w	r2, #264	; 0x108
    d170:	2100      	movs	r1, #0
    d172:	4630      	mov	r0, r6
    d174:	f005 fcc8 	bl	12b08 <memset>
    if (dir->pos == 0) {
    d178:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d17a:	b16b      	cbz	r3, d198 <lfs_dir_read+0x34>
    } else if (dir->pos == 1) {
    d17c:	2b01      	cmp	r3, #1
    d17e:	d11d      	bne.n	d1bc <lfs_dir_read+0x58>
        info->type = LFS_TYPE_DIR;
    d180:	4630      	mov	r0, r6
    d182:	2302      	movs	r3, #2
    d184:	f800 3b08 	strb.w	r3, [r0], #8
        strcpy(info->name, "..");
    d188:	4920      	ldr	r1, [pc, #128]	; (d20c <lfs_dir_read+0xa8>)
    d18a:	f005 fc1c 	bl	129c6 <strcpy>
        dir->pos += 1;
    d18e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d190:	3301      	adds	r3, #1
    d192:	62a3      	str	r3, [r4, #40]	; 0x28
        return true;
    d194:	2101      	movs	r1, #1
    d196:	e034      	b.n	d202 <lfs_dir_read+0x9e>
        info->type = LFS_TYPE_DIR;
    d198:	4630      	mov	r0, r6
    d19a:	2302      	movs	r3, #2
    d19c:	f800 3b08 	strb.w	r3, [r0], #8
        strcpy(info->name, ".");
    d1a0:	491b      	ldr	r1, [pc, #108]	; (d210 <lfs_dir_read+0xac>)
    d1a2:	f005 fc10 	bl	129c6 <strcpy>
        dir->pos += 1;
    d1a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d1a8:	3301      	adds	r3, #1
    d1aa:	62a3      	str	r3, [r4, #40]	; 0x28
        return true;
    d1ac:	2101      	movs	r1, #1
    d1ae:	e028      	b.n	d202 <lfs_dir_read+0x9e>
        dir->id += 1;
    d1b0:	88a3      	ldrh	r3, [r4, #4]
    d1b2:	3301      	adds	r3, #1
    d1b4:	80a3      	strh	r3, [r4, #4]
        if (err != LFS_ERR_NOENT) {
    d1b6:	f111 0f02 	cmn.w	r1, #2
    d1ba:	d11e      	bne.n	d1fa <lfs_dir_read+0x96>
        if (dir->id == dir->m.count) {
    d1bc:	88a2      	ldrh	r2, [r4, #4]
    d1be:	8ba3      	ldrh	r3, [r4, #28]
    d1c0:	429a      	cmp	r2, r3
    d1c2:	d10c      	bne.n	d1de <lfs_dir_read+0x7a>
            if (!dir->m.split) {
    d1c4:	7fe3      	ldrb	r3, [r4, #31]
    d1c6:	b1f3      	cbz	r3, d206 <lfs_dir_read+0xa2>
            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
    d1c8:	f104 0220 	add.w	r2, r4, #32
    d1cc:	f104 0108 	add.w	r1, r4, #8
    d1d0:	4628      	mov	r0, r5
    d1d2:	f007 f894 	bl	142fe <lfs_dir_fetch>
            if (err) {
    d1d6:	4601      	mov	r1, r0
    d1d8:	b998      	cbnz	r0, d202 <lfs_dir_read+0x9e>
            dir->id = 0;
    d1da:	2300      	movs	r3, #0
    d1dc:	80a3      	strh	r3, [r4, #4]
        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
    d1de:	4633      	mov	r3, r6
    d1e0:	88a2      	ldrh	r2, [r4, #4]
    d1e2:	f104 0108 	add.w	r1, r4, #8
    d1e6:	4628      	mov	r0, r5
    d1e8:	f7ff ff2a 	bl	d040 <lfs_dir_getinfo>
        if (err && err != LFS_ERR_NOENT) {
    d1ec:	4601      	mov	r1, r0
    d1ee:	2800      	cmp	r0, #0
    d1f0:	d0de      	beq.n	d1b0 <lfs_dir_read+0x4c>
    d1f2:	f110 0f02 	cmn.w	r0, #2
    d1f6:	d0db      	beq.n	d1b0 <lfs_dir_read+0x4c>
    d1f8:	e003      	b.n	d202 <lfs_dir_read+0x9e>
    dir->pos += 1;
    d1fa:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d1fc:	3301      	adds	r3, #1
    d1fe:	62a3      	str	r3, [r4, #40]	; 0x28
    return true;
    d200:	2101      	movs	r1, #1
}
    d202:	4608      	mov	r0, r1
    d204:	bd70      	pop	{r4, r5, r6, pc}
                return false;
    d206:	2100      	movs	r1, #0
    d208:	e7fb      	b.n	d202 <lfs_dir_read+0x9e>
    d20a:	bf00      	nop
    d20c:	00017590 	.word	0x00017590
    d210:	0001758c 	.word	0x0001758c

0000d214 <lfs_mount>:
int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
    d214:	b570      	push	{r4, r5, r6, lr}
    d216:	b09a      	sub	sp, #104	; 0x68
    d218:	4604      	mov	r4, r0
    int err = lfs_init(lfs, cfg);
    d21a:	f007 fb73 	bl	14904 <lfs_init>
    if (err) {
    d21e:	4606      	mov	r6, r0
    d220:	2800      	cmp	r0, #0
    d222:	f040 80e6 	bne.w	d3f2 <lfs_mount+0x1de>
    lfs_mdir_t dir = {.tail = {0, 1}};
    d226:	2500      	movs	r5, #0
    d228:	950f      	str	r5, [sp, #60]	; 0x3c
    d22a:	9510      	str	r5, [sp, #64]	; 0x40
    d22c:	9511      	str	r5, [sp, #68]	; 0x44
    d22e:	9512      	str	r5, [sp, #72]	; 0x48
    d230:	9513      	str	r5, [sp, #76]	; 0x4c
    d232:	9514      	str	r5, [sp, #80]	; 0x50
    d234:	9515      	str	r5, [sp, #84]	; 0x54
    d236:	2301      	movs	r3, #1
    d238:	9316      	str	r3, [sp, #88]	; 0x58
    while (!lfs_pair_isnull(dir.tail)) {
    d23a:	e07a      	b.n	d332 <lfs_mount+0x11e>
    d23c:	4988      	ldr	r1, [pc, #544]	; (d460 <lfs_mount+0x24c>)
    d23e:	4b89      	ldr	r3, [pc, #548]	; (d464 <lfs_mount+0x250>)
    d240:	1ac9      	subs	r1, r1, r3
    d242:	08c9      	lsrs	r1, r1, #3
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
    d244:	f04f 0300 	mov.w	r3, #0
    d248:	2501      	movs	r5, #1
    d24a:	f365 0302 	bfi	r3, r5, #0, #3
    d24e:	f36f 03c5 	bfc	r3, #3, #3
    d252:	f361 138f 	bfi	r3, r1, #6, #10
    d256:	4984      	ldr	r1, [pc, #528]	; (d468 <lfs_mount+0x254>)
    d258:	9105      	str	r1, [sp, #20]
    d25a:	f640 6198 	movw	r1, #3736	; 0xe98
    d25e:	9106      	str	r1, [sp, #24]
    d260:	9007      	str	r0, [sp, #28]
    d262:	b292      	uxth	r2, r2
    d264:	9208      	str	r2, [sp, #32]
    d266:	2204      	movs	r2, #4
    d268:	a905      	add	r1, sp, #20
    d26a:	4880      	ldr	r0, [pc, #512]	; (d46c <lfs_mount+0x258>)
    d26c:	f7f5 fd16 	bl	2c9c <log_n>
                err = LFS_ERR_INVAL;
    d270:	f06f 0615 	mvn.w	r6, #21
                goto cleanup;
    d274:	e0ba      	b.n	d3ec <lfs_mount+0x1d8>
    d276:	487a      	ldr	r0, [pc, #488]	; (d460 <lfs_mount+0x24c>)
    d278:	4b7a      	ldr	r3, [pc, #488]	; (d464 <lfs_mount+0x250>)
    d27a:	1ac0      	subs	r0, r0, r3
    d27c:	08c0      	lsrs	r0, r0, #3
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
    d27e:	f04f 0300 	mov.w	r3, #0
    d282:	2501      	movs	r5, #1
    d284:	f365 0302 	bfi	r3, r5, #0, #3
    d288:	f36f 03c5 	bfc	r3, #3, #3
    d28c:	f360 138f 	bfi	r3, r0, #6, #10
    d290:	4875      	ldr	r0, [pc, #468]	; (d468 <lfs_mount+0x254>)
    d292:	9005      	str	r0, [sp, #20]
    d294:	f640 60a1 	movw	r0, #3745	; 0xea1
    d298:	9006      	str	r0, [sp, #24]
    d29a:	9207      	str	r2, [sp, #28]
    d29c:	9108      	str	r1, [sp, #32]
    d29e:	2204      	movs	r2, #4
    d2a0:	a905      	add	r1, sp, #20
    d2a2:	4873      	ldr	r0, [pc, #460]	; (d470 <lfs_mount+0x25c>)
    d2a4:	f7f5 fcfa 	bl	2c9c <log_n>
                    err = LFS_ERR_INVAL;
    d2a8:	f06f 0615 	mvn.w	r6, #21
                    goto cleanup;
    d2ac:	e09e      	b.n	d3ec <lfs_mount+0x1d8>
    d2ae:	486c      	ldr	r0, [pc, #432]	; (d460 <lfs_mount+0x24c>)
    d2b0:	4b6c      	ldr	r3, [pc, #432]	; (d464 <lfs_mount+0x250>)
    d2b2:	1ac0      	subs	r0, r0, r3
    d2b4:	08c0      	lsrs	r0, r0, #3
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
    d2b6:	f04f 0300 	mov.w	r3, #0
    d2ba:	2501      	movs	r5, #1
    d2bc:	f365 0302 	bfi	r3, r5, #0, #3
    d2c0:	f36f 03c5 	bfc	r3, #3, #3
    d2c4:	f360 138f 	bfi	r3, r0, #6, #10
    d2c8:	4867      	ldr	r0, [pc, #412]	; (d468 <lfs_mount+0x254>)
    d2ca:	9005      	str	r0, [sp, #20]
    d2cc:	f640 60ac 	movw	r0, #3756	; 0xeac
    d2d0:	9006      	str	r0, [sp, #24]
    d2d2:	9207      	str	r2, [sp, #28]
    d2d4:	9108      	str	r1, [sp, #32]
    d2d6:	2204      	movs	r2, #4
    d2d8:	a905      	add	r1, sp, #20
    d2da:	4866      	ldr	r0, [pc, #408]	; (d474 <lfs_mount+0x260>)
    d2dc:	f7f5 fcde 	bl	2c9c <log_n>
                    err = LFS_ERR_INVAL;
    d2e0:	f06f 0615 	mvn.w	r6, #21
                    goto cleanup;
    d2e4:	e082      	b.n	d3ec <lfs_mount+0x1d8>
    d2e6:	485e      	ldr	r0, [pc, #376]	; (d460 <lfs_mount+0x24c>)
    d2e8:	4b5e      	ldr	r3, [pc, #376]	; (d464 <lfs_mount+0x250>)
    d2ea:	1ac0      	subs	r0, r0, r3
    d2ec:	08c0      	lsrs	r0, r0, #3
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
    d2ee:	f04f 0300 	mov.w	r3, #0
    d2f2:	2501      	movs	r5, #1
    d2f4:	f365 0302 	bfi	r3, r5, #0, #3
    d2f8:	f36f 03c5 	bfc	r3, #3, #3
    d2fc:	f360 138f 	bfi	r3, r0, #6, #10
    d300:	4859      	ldr	r0, [pc, #356]	; (d468 <lfs_mount+0x254>)
    d302:	9005      	str	r0, [sp, #20]
    d304:	f640 60b7 	movw	r0, #3767	; 0xeb7
    d308:	9006      	str	r0, [sp, #24]
    d30a:	9207      	str	r2, [sp, #28]
    d30c:	9108      	str	r1, [sp, #32]
    d30e:	2204      	movs	r2, #4
    d310:	a905      	add	r1, sp, #20
    d312:	4859      	ldr	r0, [pc, #356]	; (d478 <lfs_mount+0x264>)
    d314:	f7f5 fcc2 	bl	2c9c <log_n>
                    err = LFS_ERR_INVAL;
    d318:	f06f 0615 	mvn.w	r6, #21
                    goto cleanup;
    d31c:	e066      	b.n	d3ec <lfs_mount+0x1d8>
                err = tag;
    d31e:	4606      	mov	r6, r0
    d320:	e064      	b.n	d3ec <lfs_mount+0x1d8>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
    d322:	f104 0230 	add.w	r2, r4, #48	; 0x30
    d326:	a90f      	add	r1, sp, #60	; 0x3c
    d328:	4620      	mov	r0, r4
    d32a:	f7ff fd9b 	bl	ce64 <lfs_dir_getgstate>
        if (err) {
    d32e:	2800      	cmp	r0, #0
    d330:	d164      	bne.n	d3fc <lfs_mount+0x1e8>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    d332:	9b15      	ldr	r3, [sp, #84]	; 0x54
    d334:	f1b3 3fff 	cmp.w	r3, #4294967295
    d338:	d064      	beq.n	d404 <lfs_mount+0x1f0>
    d33a:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d33c:	f1b3 3fff 	cmp.w	r3, #4294967295
    d340:	d05e      	beq.n	d400 <lfs_mount+0x1ec>
    d342:	4633      	mov	r3, r6
    while (!lfs_pair_isnull(dir.tail)) {
    d344:	f013 0f01 	tst.w	r3, #1
    d348:	d15e      	bne.n	d408 <lfs_mount+0x1f4>
        if (cycle >= lfs->cfg->block_count/2) {
    d34a:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    d34c:	6a1b      	ldr	r3, [r3, #32]
    d34e:	ebb5 0f53 	cmp.w	r5, r3, lsr #1
    d352:	d249      	bcs.n	d3e8 <lfs_mount+0x1d4>
        cycle += 1;
    d354:	3501      	adds	r5, #1
                lfs_dir_find_match, &(struct lfs_dir_find_match){
    d356:	9417      	str	r4, [sp, #92]	; 0x5c
    d358:	4b48      	ldr	r3, [pc, #288]	; (d47c <lfs_mount+0x268>)
    d35a:	9318      	str	r3, [sp, #96]	; 0x60
    d35c:	2308      	movs	r3, #8
    d35e:	9319      	str	r3, [sp, #100]	; 0x64
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
    d360:	ab17      	add	r3, sp, #92	; 0x5c
    d362:	9303      	str	r3, [sp, #12]
    d364:	4b46      	ldr	r3, [pc, #280]	; (d480 <lfs_mount+0x26c>)
    d366:	9302      	str	r3, [sp, #8]
    d368:	2300      	movs	r3, #0
    d36a:	9301      	str	r3, [sp, #4]
    d36c:	4b45      	ldr	r3, [pc, #276]	; (d484 <lfs_mount+0x270>)
    d36e:	9300      	str	r3, [sp, #0]
    d370:	4b45      	ldr	r3, [pc, #276]	; (d488 <lfs_mount+0x274>)
    d372:	aa15      	add	r2, sp, #84	; 0x54
    d374:	a90f      	add	r1, sp, #60	; 0x3c
    d376:	4620      	mov	r0, r4
    d378:	f7ff f8d2 	bl	c520 <lfs_dir_fetchmatch>
        if (tag < 0) {
    d37c:	2800      	cmp	r0, #0
    d37e:	db3b      	blt.n	d3f8 <lfs_mount+0x1e4>
        if (tag && !lfs_tag_isdelete(tag)) {
    d380:	2800      	cmp	r0, #0
    d382:	d0ce      	beq.n	d322 <lfs_mount+0x10e>
    return ((int32_t)(tag << 22) >> 22) == -1;
    d384:	f340 0009 	sbfx	r0, r0, #0, #10
        if (tag && !lfs_tag_isdelete(tag)) {
    d388:	f1b0 3fff 	cmp.w	r0, #4294967295
    d38c:	d0c9      	beq.n	d322 <lfs_mount+0x10e>
            lfs->root[0] = dir.pair[0];
    d38e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d390:	6223      	str	r3, [r4, #32]
            lfs->root[1] = dir.pair[1];
    d392:	9b10      	ldr	r3, [sp, #64]	; 0x40
    d394:	6263      	str	r3, [r4, #36]	; 0x24
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
    d396:	ab09      	add	r3, sp, #36	; 0x24
    d398:	9300      	str	r3, [sp, #0]
    d39a:	4b3c      	ldr	r3, [pc, #240]	; (d48c <lfs_mount+0x278>)
    d39c:	4a3a      	ldr	r2, [pc, #232]	; (d488 <lfs_mount+0x274>)
    d39e:	a90f      	add	r1, sp, #60	; 0x3c
    d3a0:	4620      	mov	r0, r4
    d3a2:	f006 fff8 	bl	14396 <lfs_dir_get>
            if (tag < 0) {
    d3a6:	2800      	cmp	r0, #0
    d3a8:	dbb9      	blt.n	d31e <lfs_mount+0x10a>
            uint16_t major_version = (0xffff & (superblock.version >> 16));
    d3aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d3ac:	0c10      	lsrs	r0, r2, #16
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
    d3ae:	b291      	uxth	r1, r2
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
    d3b0:	2802      	cmp	r0, #2
    d3b2:	f47f af43 	bne.w	d23c <lfs_mount+0x28>
    d3b6:	2900      	cmp	r1, #0
    d3b8:	f47f af40 	bne.w	d23c <lfs_mount+0x28>
            if (superblock.name_max) {
    d3bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d3be:	b122      	cbz	r2, d3ca <lfs_mount+0x1b6>
                if (superblock.name_max > lfs->name_max) {
    d3c0:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    d3c2:	428a      	cmp	r2, r1
    d3c4:	f63f af57 	bhi.w	d276 <lfs_mount+0x62>
                lfs->name_max = superblock.name_max;
    d3c8:	66e2      	str	r2, [r4, #108]	; 0x6c
            if (superblock.file_max) {
    d3ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    d3cc:	b122      	cbz	r2, d3d8 <lfs_mount+0x1c4>
                if (superblock.file_max > lfs->file_max) {
    d3ce:	6f21      	ldr	r1, [r4, #112]	; 0x70
    d3d0:	428a      	cmp	r2, r1
    d3d2:	f63f af6c 	bhi.w	d2ae <lfs_mount+0x9a>
                lfs->file_max = superblock.file_max;
    d3d6:	6722      	str	r2, [r4, #112]	; 0x70
            if (superblock.attr_max) {
    d3d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d3da:	2a00      	cmp	r2, #0
    d3dc:	d0a1      	beq.n	d322 <lfs_mount+0x10e>
                if (superblock.attr_max > lfs->attr_max) {
    d3de:	6f61      	ldr	r1, [r4, #116]	; 0x74
    d3e0:	428a      	cmp	r2, r1
    d3e2:	d880      	bhi.n	d2e6 <lfs_mount+0xd2>
                lfs->attr_max = superblock.attr_max;
    d3e4:	6762      	str	r2, [r4, #116]	; 0x74
    d3e6:	e79c      	b.n	d322 <lfs_mount+0x10e>
            err = LFS_ERR_CORRUPT;
    d3e8:	f06f 0653 	mvn.w	r6, #83	; 0x53
    lfs_unmount(lfs);
    d3ec:	4620      	mov	r0, r4
    d3ee:	f007 fbc9 	bl	14b84 <lfs_unmount>
}
    d3f2:	4630      	mov	r0, r6
    d3f4:	b01a      	add	sp, #104	; 0x68
    d3f6:	bd70      	pop	{r4, r5, r6, pc}
            err = tag;
    d3f8:	4606      	mov	r6, r0
    d3fa:	e7f7      	b.n	d3ec <lfs_mount+0x1d8>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
    d3fc:	4606      	mov	r6, r0
    d3fe:	e7f5      	b.n	d3ec <lfs_mount+0x1d8>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    d400:	2301      	movs	r3, #1
    d402:	e79f      	b.n	d344 <lfs_mount+0x130>
    d404:	2301      	movs	r3, #1
    d406:	e79d      	b.n	d344 <lfs_mount+0x130>
    d408:	6a23      	ldr	r3, [r4, #32]
    d40a:	f1b3 3fff 	cmp.w	r3, #4294967295
    d40e:	d013      	beq.n	d438 <lfs_mount+0x224>
    d410:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d412:	f1b3 3fff 	cmp.w	r3, #4294967295
    d416:	d00d      	beq.n	d434 <lfs_mount+0x220>
    d418:	4633      	mov	r3, r6
    if (lfs_pair_isnull(lfs->root)) {
    d41a:	f013 0f01 	tst.w	r3, #1
    d41e:	d11c      	bne.n	d45a <lfs_mount+0x246>
    if (!lfs_gstate_iszero(&lfs->gstate)) {
    d420:	f104 0130 	add.w	r1, r4, #48	; 0x30
    for (int i = 0; i < 3; i++) {
    d424:	4633      	mov	r3, r6
    d426:	2b02      	cmp	r3, #2
    d428:	dc08      	bgt.n	d43c <lfs_mount+0x228>
        if (((uint32_t*)a)[i] != 0) {
    d42a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    d42e:	b92a      	cbnz	r2, d43c <lfs_mount+0x228>
    for (int i = 0; i < 3; i++) {
    d430:	3301      	adds	r3, #1
    d432:	e7f8      	b.n	d426 <lfs_mount+0x212>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    d434:	2301      	movs	r3, #1
    d436:	e7f0      	b.n	d41a <lfs_mount+0x206>
    d438:	2301      	movs	r3, #1
    d43a:	e7ee      	b.n	d41a <lfs_mount+0x206>
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
    d43c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    d43e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    d442:	6323      	str	r3, [r4, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
    d444:	f104 033c 	add.w	r3, r4, #60	; 0x3c
    d448:	f104 0230 	add.w	r2, r4, #48	; 0x30
    d44c:	ca07      	ldmia	r2, {r0, r1, r2}
    d44e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    lfs_alloc_reset(lfs);
    d452:	4620      	mov	r0, r4
    d454:	f006 fddc 	bl	14010 <lfs_alloc_reset>
    return 0;
    d458:	e7cb      	b.n	d3f2 <lfs_mount+0x1de>
        err = LFS_ERR_INVAL;
    d45a:	f06f 0615 	mvn.w	r6, #21
    d45e:	e7c5      	b.n	d3ec <lfs_mount+0x1d8>
    d460:	00015ed0 	.word	0x00015ed0
    d464:	00015ea8 	.word	0x00015ea8
    d468:	00017538 	.word	0x00017538
    d46c:	00017594 	.word	0x00017594
    d470:	000175b4 	.word	0x000175b4
    d474:	000175dc 	.word	0x000175dc
    d478:	00017604 	.word	0x00017604
    d47c:	00016f5c 	.word	0x00016f5c
    d480:	000142bf 	.word	0x000142bf
    d484:	0ff00008 	.word	0x0ff00008
    d488:	7ffffc00 	.word	0x7ffffc00
    d48c:	20100018 	.word	0x20100018

0000d490 <lfs_fs_traverseraw>:
        bool includeorphans) {
    d490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d494:	b08f      	sub	sp, #60	; 0x3c
    d496:	4606      	mov	r6, r0
    d498:	460f      	mov	r7, r1
    d49a:	4690      	mov	r8, r2
    d49c:	4699      	mov	r9, r3
    lfs_mdir_t dir = {.tail = {0, 1}};
    d49e:	2500      	movs	r5, #0
    d4a0:	9506      	str	r5, [sp, #24]
    d4a2:	9507      	str	r5, [sp, #28]
    d4a4:	9508      	str	r5, [sp, #32]
    d4a6:	9509      	str	r5, [sp, #36]	; 0x24
    d4a8:	950a      	str	r5, [sp, #40]	; 0x28
    d4aa:	950b      	str	r5, [sp, #44]	; 0x2c
    d4ac:	950c      	str	r5, [sp, #48]	; 0x30
    d4ae:	2301      	movs	r3, #1
    d4b0:	930d      	str	r3, [sp, #52]	; 0x34
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    d4b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d4b4:	f1b3 3fff 	cmp.w	r3, #4294967295
    d4b8:	d06d      	beq.n	d596 <lfs_fs_traverseraw+0x106>
    d4ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d4bc:	f1b3 3fff 	cmp.w	r3, #4294967295
    d4c0:	d067      	beq.n	d592 <lfs_fs_traverseraw+0x102>
    d4c2:	2300      	movs	r3, #0
    while (!lfs_pair_isnull(dir.tail)) {
    d4c4:	2b00      	cmp	r3, #0
    d4c6:	d168      	bne.n	d59a <lfs_fs_traverseraw+0x10a>
        if (cycle >= lfs->cfg->block_count/2) {
    d4c8:	6eb3      	ldr	r3, [r6, #104]	; 0x68
    d4ca:	6a1b      	ldr	r3, [r3, #32]
    d4cc:	ebb5 0f53 	cmp.w	r5, r3, lsr #1
    d4d0:	f080 8097 	bcs.w	d602 <lfs_fs_traverseraw+0x172>
        cycle += 1;
    d4d4:	3501      	adds	r5, #1
        for (int i = 0; i < 2; i++) {
    d4d6:	2400      	movs	r4, #0
    d4d8:	2c01      	cmp	r4, #1
    d4da:	dc0b      	bgt.n	d4f4 <lfs_fs_traverseraw+0x64>
            int err = cb(data, dir.tail[i]);
    d4dc:	1da3      	adds	r3, r4, #6
    d4de:	aa0e      	add	r2, sp, #56	; 0x38
    d4e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    d4e4:	f853 1c20 	ldr.w	r1, [r3, #-32]
    d4e8:	4640      	mov	r0, r8
    d4ea:	47b8      	blx	r7
            if (err) {
    d4ec:	4603      	mov	r3, r0
    d4ee:	b978      	cbnz	r0, d510 <lfs_fs_traverseraw+0x80>
        for (int i = 0; i < 2; i++) {
    d4f0:	3401      	adds	r4, #1
    d4f2:	e7f1      	b.n	d4d8 <lfs_fs_traverseraw+0x48>
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
    d4f4:	aa0c      	add	r2, sp, #48	; 0x30
    d4f6:	a906      	add	r1, sp, #24
    d4f8:	4630      	mov	r0, r6
    d4fa:	f006 ff00 	bl	142fe <lfs_dir_fetch>
        if (err) {
    d4fe:	4682      	mov	sl, r0
    d500:	2800      	cmp	r0, #0
    d502:	f040 8081 	bne.w	d608 <lfs_fs_traverseraw+0x178>
        for (uint16_t id = 0; id < dir.count; id++) {
    d506:	2400      	movs	r4, #0
    d508:	e016      	b.n	d538 <lfs_fs_traverseraw+0xa8>
                if (tag == LFS_ERR_NOENT) {
    d50a:	f113 0f02 	cmn.w	r3, #2
    d50e:	d011      	beq.n	d534 <lfs_fs_traverseraw+0xa4>
}
    d510:	4618      	mov	r0, r3
    d512:	b00f      	add	sp, #60	; 0x3c
    d514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
    d518:	f8cd 8008 	str.w	r8, [sp, #8]
    d51c:	9701      	str	r7, [sp, #4]
    d51e:	9b05      	ldr	r3, [sp, #20]
    d520:	9300      	str	r3, [sp, #0]
    d522:	9b04      	ldr	r3, [sp, #16]
    d524:	4632      	mov	r2, r6
    d526:	2100      	movs	r1, #0
    d528:	4630      	mov	r0, r6
    d52a:	f007 fa67 	bl	149fc <lfs_ctz_traverse>
                if (err) {
    d52e:	4603      	mov	r3, r0
    d530:	2800      	cmp	r0, #0
    d532:	d1ed      	bne.n	d510 <lfs_fs_traverseraw+0x80>
        for (uint16_t id = 0; id < dir.count; id++) {
    d534:	3401      	adds	r4, #1
    d536:	b2a4      	uxth	r4, r4
    d538:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    d53c:	42a3      	cmp	r3, r4
    d53e:	d9b8      	bls.n	d4b2 <lfs_fs_traverseraw+0x22>
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
    d540:	02a3      	lsls	r3, r4, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
    d542:	aa04      	add	r2, sp, #16
    d544:	9200      	str	r2, [sp, #0]
    d546:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    d54a:	f043 0308 	orr.w	r3, r3, #8
    d54e:	4a2f      	ldr	r2, [pc, #188]	; (d60c <lfs_fs_traverseraw+0x17c>)
    d550:	a906      	add	r1, sp, #24
    d552:	4630      	mov	r0, r6
    d554:	f006 ff1f 	bl	14396 <lfs_dir_get>
            if (tag < 0) {
    d558:	1e03      	subs	r3, r0, #0
    d55a:	dbd6      	blt.n	d50a <lfs_fs_traverseraw+0x7a>
    return (tag & 0x7ff00000) >> 20;
    d55c:	f3c3 530a 	ubfx	r3, r3, #20, #11
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
    d560:	f240 2202 	movw	r2, #514	; 0x202
    d564:	4293      	cmp	r3, r2
    d566:	d0d7      	beq.n	d518 <lfs_fs_traverseraw+0x88>
            } else if (includeorphans && 
    d568:	f1b9 0f00 	cmp.w	r9, #0
    d56c:	d0e2      	beq.n	d534 <lfs_fs_traverseraw+0xa4>
    d56e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    d572:	d1df      	bne.n	d534 <lfs_fs_traverseraw+0xa4>
                for (int i = 0; i < 2; i++) {
    d574:	46d3      	mov	fp, sl
    d576:	f1bb 0f01 	cmp.w	fp, #1
    d57a:	dcdb      	bgt.n	d534 <lfs_fs_traverseraw+0xa4>
                    err = cb(data, (&ctz.head)[i]);
    d57c:	ab04      	add	r3, sp, #16
    d57e:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
    d582:	4640      	mov	r0, r8
    d584:	47b8      	blx	r7
                    if (err) {
    d586:	4603      	mov	r3, r0
    d588:	2800      	cmp	r0, #0
    d58a:	d1c1      	bne.n	d510 <lfs_fs_traverseraw+0x80>
                for (int i = 0; i < 2; i++) {
    d58c:	f10b 0b01 	add.w	fp, fp, #1
    d590:	e7f1      	b.n	d576 <lfs_fs_traverseraw+0xe6>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    d592:	2301      	movs	r3, #1
    d594:	e796      	b.n	d4c4 <lfs_fs_traverseraw+0x34>
    d596:	2301      	movs	r3, #1
    d598:	e794      	b.n	d4c4 <lfs_fs_traverseraw+0x34>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
    d59a:	6ab4      	ldr	r4, [r6, #40]	; 0x28
    d59c:	e00f      	b.n	d5be <lfs_fs_traverseraw+0x12e>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
    d59e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d5a0:	f8cd 8008 	str.w	r8, [sp, #8]
    d5a4:	9701      	str	r7, [sp, #4]
    d5a6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    d5a8:	9200      	str	r2, [sp, #0]
    d5aa:	4632      	mov	r2, r6
    d5ac:	f104 0140 	add.w	r1, r4, #64	; 0x40
    d5b0:	4630      	mov	r0, r6
    d5b2:	f007 fa23 	bl	149fc <lfs_ctz_traverse>
            if (err) {
    d5b6:	4603      	mov	r3, r0
    d5b8:	b158      	cbz	r0, d5d2 <lfs_fs_traverseraw+0x142>
    d5ba:	e7a9      	b.n	d510 <lfs_fs_traverseraw+0x80>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
    d5bc:	6824      	ldr	r4, [r4, #0]
    d5be:	b1f4      	cbz	r4, d5fe <lfs_fs_traverseraw+0x16e>
        if (f->type != LFS_TYPE_REG) {
    d5c0:	79a3      	ldrb	r3, [r4, #6]
    d5c2:	2b01      	cmp	r3, #1
    d5c4:	d1fa      	bne.n	d5bc <lfs_fs_traverseraw+0x12c>
        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
    d5c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    d5c8:	f403 1388 	and.w	r3, r3, #1114112	; 0x110000
    d5cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    d5d0:	d0e5      	beq.n	d59e <lfs_fs_traverseraw+0x10e>
        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
    d5d2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    d5d4:	f403 1390 	and.w	r3, r3, #1179648	; 0x120000
    d5d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    d5dc:	d1ee      	bne.n	d5bc <lfs_fs_traverseraw+0x12c>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
    d5de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    d5e0:	f8cd 8008 	str.w	r8, [sp, #8]
    d5e4:	9701      	str	r7, [sp, #4]
    d5e6:	6b62      	ldr	r2, [r4, #52]	; 0x34
    d5e8:	9200      	str	r2, [sp, #0]
    d5ea:	4632      	mov	r2, r6
    d5ec:	f104 0140 	add.w	r1, r4, #64	; 0x40
    d5f0:	4630      	mov	r0, r6
    d5f2:	f007 fa03 	bl	149fc <lfs_ctz_traverse>
            if (err) {
    d5f6:	4603      	mov	r3, r0
    d5f8:	2800      	cmp	r0, #0
    d5fa:	d0df      	beq.n	d5bc <lfs_fs_traverseraw+0x12c>
    d5fc:	e788      	b.n	d510 <lfs_fs_traverseraw+0x80>
    return 0;
    d5fe:	2300      	movs	r3, #0
    d600:	e786      	b.n	d510 <lfs_fs_traverseraw+0x80>
            return LFS_ERR_CORRUPT;
    d602:	f06f 0353 	mvn.w	r3, #83	; 0x53
    d606:	e783      	b.n	d510 <lfs_fs_traverseraw+0x80>
            return err;
    d608:	4603      	mov	r3, r0
    d60a:	e781      	b.n	d510 <lfs_fs_traverseraw+0x80>
    d60c:	700ffc00 	.word	0x700ffc00

0000d610 <lfs_alloc>:
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
    d610:	b570      	push	{r4, r5, r6, lr}
    d612:	b082      	sub	sp, #8
    d614:	4604      	mov	r4, r0
    d616:	460d      	mov	r5, r1
        while (lfs->free.i != lfs->free.size) {
    d618:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    d61a:	6da2      	ldr	r2, [r4, #88]	; 0x58
    d61c:	4293      	cmp	r3, r2
    d61e:	d02d      	beq.n	d67c <lfs_alloc+0x6c>
            lfs->free.i += 1;
    d620:	1c5a      	adds	r2, r3, #1
    d622:	65e2      	str	r2, [r4, #92]	; 0x5c
            lfs->free.ack -= 1;
    d624:	6e22      	ldr	r2, [r4, #96]	; 0x60
    d626:	3a01      	subs	r2, #1
    d628:	6622      	str	r2, [r4, #96]	; 0x60
            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
    d62a:	6e62      	ldr	r2, [r4, #100]	; 0x64
    d62c:	0959      	lsrs	r1, r3, #5
    d62e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    d632:	f003 001f 	and.w	r0, r3, #31
    d636:	2201      	movs	r2, #1
    d638:	4082      	lsls	r2, r0
    d63a:	4211      	tst	r1, r2
    d63c:	d1ec      	bne.n	d618 <lfs_alloc+0x8>
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
    d63e:	6d62      	ldr	r2, [r4, #84]	; 0x54
    d640:	4413      	add	r3, r2
    d642:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    d644:	6a11      	ldr	r1, [r2, #32]
    d646:	fbb3 f2f1 	udiv	r2, r3, r1
    d64a:	fb01 3312 	mls	r3, r1, r2, r3
    d64e:	602b      	str	r3, [r5, #0]
                while (lfs->free.i != lfs->free.size &&
    d650:	e004      	b.n	d65c <lfs_alloc+0x4c>
                    lfs->free.i += 1;
    d652:	3301      	adds	r3, #1
    d654:	65e3      	str	r3, [r4, #92]	; 0x5c
                    lfs->free.ack -= 1;
    d656:	6e23      	ldr	r3, [r4, #96]	; 0x60
    d658:	3b01      	subs	r3, #1
    d65a:	6623      	str	r3, [r4, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
    d65c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    d65e:	6da2      	ldr	r2, [r4, #88]	; 0x58
    d660:	4293      	cmp	r3, r2
    d662:	d049      	beq.n	d6f8 <lfs_alloc+0xe8>
                        (lfs->free.buffer[lfs->free.i / 32]
    d664:	6e62      	ldr	r2, [r4, #100]	; 0x64
    d666:	0959      	lsrs	r1, r3, #5
    d668:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
                            & (1U << (lfs->free.i % 32)))) {
    d66c:	f003 001f 	and.w	r0, r3, #31
    d670:	2201      	movs	r2, #1
    d672:	4082      	lsls	r2, r0
                while (lfs->free.i != lfs->free.size &&
    d674:	4211      	tst	r1, r2
    d676:	d1ec      	bne.n	d652 <lfs_alloc+0x42>
                return 0;
    d678:	2600      	movs	r6, #0
    d67a:	e03e      	b.n	d6fa <lfs_alloc+0xea>
        if (lfs->free.ack == 0) {
    d67c:	6e21      	ldr	r1, [r4, #96]	; 0x60
    d67e:	b309      	cbz	r1, d6c4 <lfs_alloc+0xb4>
        lfs->free.off = (lfs->free.off + lfs->free.size)
    d680:	6d63      	ldr	r3, [r4, #84]	; 0x54
    d682:	441a      	add	r2, r3
                % lfs->cfg->block_count;
    d684:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    d686:	6a1e      	ldr	r6, [r3, #32]
    d688:	fbb2 f0f6 	udiv	r0, r2, r6
    d68c:	fb06 2210 	mls	r2, r6, r0, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
    d690:	6562      	str	r2, [r4, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
    d692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    d694:	00d2      	lsls	r2, r2, #3
    d696:	4291      	cmp	r1, r2
    d698:	bf28      	it	cs
    d69a:	4611      	movcs	r1, r2
    d69c:	65a1      	str	r1, [r4, #88]	; 0x58
        lfs->free.i = 0;
    d69e:	2100      	movs	r1, #0
    d6a0:	65e1      	str	r1, [r4, #92]	; 0x5c
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
    d6a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    d6a4:	6e60      	ldr	r0, [r4, #100]	; 0x64
    d6a6:	f005 fa2f 	bl	12b08 <memset>
        int err = lfs_fs_traverseraw(lfs, lfs_alloc_lookahead, lfs, true);
    d6aa:	2301      	movs	r3, #1
    d6ac:	4622      	mov	r2, r4
    d6ae:	4914      	ldr	r1, [pc, #80]	; (d700 <lfs_alloc+0xf0>)
    d6b0:	4620      	mov	r0, r4
    d6b2:	f7ff feed 	bl	d490 <lfs_fs_traverseraw>
        if (err) {
    d6b6:	4606      	mov	r6, r0
    d6b8:	2800      	cmp	r0, #0
    d6ba:	d0ad      	beq.n	d618 <lfs_alloc+0x8>
            lfs_alloc_reset(lfs);
    d6bc:	4620      	mov	r0, r4
    d6be:	f006 fca7 	bl	14010 <lfs_alloc_reset>
            return err;
    d6c2:	e01a      	b.n	d6fa <lfs_alloc+0xea>
    d6c4:	4a0f      	ldr	r2, [pc, #60]	; (d704 <lfs_alloc+0xf4>)
    d6c6:	4910      	ldr	r1, [pc, #64]	; (d708 <lfs_alloc+0xf8>)
    d6c8:	1a52      	subs	r2, r2, r1
    d6ca:	08d2      	lsrs	r2, r2, #3
            LFS_ERROR("No more free space %"PRIu32,
    d6cc:	f04f 0100 	mov.w	r1, #0
    d6d0:	2001      	movs	r0, #1
    d6d2:	f360 0102 	bfi	r1, r0, #0, #3
    d6d6:	f36f 01c5 	bfc	r1, #3, #3
    d6da:	f362 118f 	bfi	r1, r2, #6, #10
    d6de:	6d62      	ldr	r2, [r4, #84]	; 0x54
    d6e0:	f8ad 1000 	strh.w	r1, [sp]
    d6e4:	4413      	add	r3, r2
    d6e6:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
    d6ea:	4908      	ldr	r1, [pc, #32]	; (d70c <lfs_alloc+0xfc>)
    d6ec:	4808      	ldr	r0, [pc, #32]	; (d710 <lfs_alloc+0x100>)
    d6ee:	f7f5 fa25 	bl	2b3c <log_3>
            return LFS_ERR_NOSPC;
    d6f2:	f06f 061b 	mvn.w	r6, #27
    d6f6:	e000      	b.n	d6fa <lfs_alloc+0xea>
                return 0;
    d6f8:	2600      	movs	r6, #0
}
    d6fa:	4630      	mov	r0, r6
    d6fc:	b002      	add	sp, #8
    d6fe:	bd70      	pop	{r4, r5, r6, pc}
    d700:	00013fd5 	.word	0x00013fd5
    d704:	00015ed0 	.word	0x00015ed0
    d708:	00015ea8 	.word	0x00015ea8
    d70c:	00017538 	.word	0x00017538
    d710:	0001762c 	.word	0x0001762c

0000d714 <lfs_file_relocate>:
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
    d714:	b5f0      	push	{r4, r5, r6, r7, lr}
    d716:	b089      	sub	sp, #36	; 0x24
    d718:	4605      	mov	r5, r0
    d71a:	460e      	mov	r6, r1
    d71c:	e04a      	b.n	d7b4 <lfs_file_relocate+0xa0>
                err = lfs_bd_read(lfs,
    d71e:	2201      	movs	r2, #1
    d720:	9203      	str	r2, [sp, #12]
    d722:	f10d 021b 	add.w	r2, sp, #27
    d726:	9202      	str	r2, [sp, #8]
    d728:	9401      	str	r4, [sp, #4]
    d72a:	6bb2      	ldr	r2, [r6, #56]	; 0x38
    d72c:	9200      	str	r2, [sp, #0]
    d72e:	1b1b      	subs	r3, r3, r4
    d730:	462a      	mov	r2, r5
    d732:	f106 0140 	add.w	r1, r6, #64	; 0x40
    d736:	4628      	mov	r0, r5
    d738:	f006 fc99 	bl	1406e <lfs_bd_read>
                if (err) {
    d73c:	2800      	cmp	r0, #0
    d73e:	d149      	bne.n	d7d4 <lfs_file_relocate+0xc0>
            err = lfs_bd_prog(lfs,
    d740:	2301      	movs	r3, #1
    d742:	9303      	str	r3, [sp, #12]
    d744:	f10d 021b 	add.w	r2, sp, #27
    d748:	9202      	str	r2, [sp, #8]
    d74a:	9401      	str	r4, [sp, #4]
    d74c:	9a07      	ldr	r2, [sp, #28]
    d74e:	9200      	str	r2, [sp, #0]
    d750:	462a      	mov	r2, r5
    d752:	f105 0110 	add.w	r1, r5, #16
    d756:	4628      	mov	r0, r5
    d758:	f006 ff00 	bl	1455c <lfs_bd_prog>
            if (err) {
    d75c:	bb20      	cbnz	r0, d7a8 <lfs_file_relocate+0x94>
        for (lfs_off_t i = 0; i < file->off; i++) {
    d75e:	3401      	adds	r4, #1
    d760:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    d762:	42a3      	cmp	r3, r4
    d764:	d93c      	bls.n	d7e0 <lfs_file_relocate+0xcc>
            if (file->flags & LFS_F_INLINE) {
    d766:	6b32      	ldr	r2, [r6, #48]	; 0x30
    d768:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    d76c:	d0d7      	beq.n	d71e <lfs_file_relocate+0xa>
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
    d76e:	88b2      	ldrh	r2, [r6, #4]
    d770:	0292      	lsls	r2, r2, #10
                err = lfs_dir_getread(lfs, &file->m,
    d772:	2101      	movs	r1, #1
    d774:	9105      	str	r1, [sp, #20]
    d776:	f10d 011b 	add.w	r1, sp, #27
    d77a:	9104      	str	r1, [sp, #16]
    d77c:	9403      	str	r4, [sp, #12]
    d77e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    d782:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    d786:	9202      	str	r2, [sp, #8]
    d788:	4a24      	ldr	r2, [pc, #144]	; (d81c <lfs_file_relocate+0x108>)
    d78a:	9201      	str	r2, [sp, #4]
    d78c:	1b1b      	subs	r3, r3, r4
    d78e:	9300      	str	r3, [sp, #0]
    d790:	f106 0340 	add.w	r3, r6, #64	; 0x40
    d794:	2200      	movs	r2, #0
    d796:	f106 0108 	add.w	r1, r6, #8
    d79a:	4628      	mov	r0, r5
    d79c:	f006 fe08 	bl	143b0 <lfs_dir_getread>
                if (err) {
    d7a0:	2800      	cmp	r0, #0
    d7a2:	d0cd      	beq.n	d740 <lfs_file_relocate+0x2c>
                    return err;
    d7a4:	4607      	mov	r7, r0
    d7a6:	e036      	b.n	d816 <lfs_file_relocate+0x102>
                if (err == LFS_ERR_CORRUPT) {
    d7a8:	f110 0f54 	cmn.w	r0, #84	; 0x54
    d7ac:	d114      	bne.n	d7d8 <lfs_file_relocate+0xc4>
    rcache->block = LFS_BLOCK_NULL;
    d7ae:	f04f 33ff 	mov.w	r3, #4294967295
    d7b2:	612b      	str	r3, [r5, #16]
        int err = lfs_alloc(lfs, &nblock);
    d7b4:	a907      	add	r1, sp, #28
    d7b6:	4628      	mov	r0, r5
    d7b8:	f7ff ff2a 	bl	d610 <lfs_alloc>
        if (err) {
    d7bc:	4607      	mov	r7, r0
    d7be:	bb50      	cbnz	r0, d816 <lfs_file_relocate+0x102>
        err = lfs_bd_erase(lfs, nblock);
    d7c0:	9907      	ldr	r1, [sp, #28]
    d7c2:	4628      	mov	r0, r5
    d7c4:	f006 fc01 	bl	13fca <lfs_bd_erase>
        if (err) {
    d7c8:	4607      	mov	r7, r0
    d7ca:	b138      	cbz	r0, d7dc <lfs_file_relocate+0xc8>
            if (err == LFS_ERR_CORRUPT) {
    d7cc:	f110 0f54 	cmn.w	r0, #84	; 0x54
    d7d0:	d0ed      	beq.n	d7ae <lfs_file_relocate+0x9a>
    d7d2:	e020      	b.n	d816 <lfs_file_relocate+0x102>
                    return err;
    d7d4:	4607      	mov	r7, r0
    d7d6:	e01e      	b.n	d816 <lfs_file_relocate+0x102>
                return err;
    d7d8:	4607      	mov	r7, r0
    d7da:	e01c      	b.n	d816 <lfs_file_relocate+0x102>
        for (lfs_off_t i = 0; i < file->off; i++) {
    d7dc:	2400      	movs	r4, #0
    d7de:	e7bf      	b.n	d760 <lfs_file_relocate+0x4c>
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
    d7e0:	6eab      	ldr	r3, [r5, #104]	; 0x68
    d7e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d7e4:	69e9      	ldr	r1, [r5, #28]
    d7e6:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
    d7e8:	f005 f96a 	bl	12ac0 <memcpy>
        file->cache.block = lfs->pcache.block;
    d7ec:	692b      	ldr	r3, [r5, #16]
    d7ee:	6433      	str	r3, [r6, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
    d7f0:	696b      	ldr	r3, [r5, #20]
    d7f2:	6473      	str	r3, [r6, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
    d7f4:	69ab      	ldr	r3, [r5, #24]
    d7f6:	64b3      	str	r3, [r6, #72]	; 0x48
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
    d7f8:	6eab      	ldr	r3, [r5, #104]	; 0x68
    d7fa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d7fc:	21ff      	movs	r1, #255	; 0xff
    d7fe:	69e8      	ldr	r0, [r5, #28]
    d800:	f005 f982 	bl	12b08 <memset>
    pcache->block = LFS_BLOCK_NULL;
    d804:	f04f 33ff 	mov.w	r3, #4294967295
    d808:	612b      	str	r3, [r5, #16]
        file->block = nblock;
    d80a:	9b07      	ldr	r3, [sp, #28]
    d80c:	63b3      	str	r3, [r6, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
    d80e:	6b33      	ldr	r3, [r6, #48]	; 0x30
    d810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    d814:	6333      	str	r3, [r6, #48]	; 0x30
}
    d816:	4638      	mov	r0, r7
    d818:	b009      	add	sp, #36	; 0x24
    d81a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d81c:	fff7fc00 	.word	0xfff7fc00

0000d820 <lfs_file_flush>:
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
    d820:	b5f0      	push	{r4, r5, r6, r7, lr}
    d822:	b097      	sub	sp, #92	; 0x5c
    d824:	4605      	mov	r5, r0
    d826:	460c      	mov	r4, r1
    if (file->flags & LFS_F_READING) {
    d828:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    d82a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    d82e:	d008      	beq.n	d842 <lfs_file_flush+0x22>
        if (!(file->flags & LFS_F_INLINE)) {
    d830:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    d834:	d102      	bne.n	d83c <lfs_file_flush+0x1c>
    rcache->block = LFS_BLOCK_NULL;
    d836:	f04f 32ff 	mov.w	r2, #4294967295
    d83a:	640a      	str	r2, [r1, #64]	; 0x40
        file->flags &= ~LFS_F_READING;
    d83c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    d840:	6323      	str	r3, [r4, #48]	; 0x30
    if (file->flags & LFS_F_WRITING) {
    d842:	6b23      	ldr	r3, [r4, #48]	; 0x30
    d844:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    d848:	d05e      	beq.n	d908 <lfs_file_flush+0xe8>
        lfs_off_t pos = file->pos;
    d84a:	6b66      	ldr	r6, [r4, #52]	; 0x34
        if (!(file->flags & LFS_F_INLINE)) {
    d84c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    d850:	d148      	bne.n	d8e4 <lfs_file_flush+0xc4>
            lfs_file_t orig = {
    d852:	2254      	movs	r2, #84	; 0x54
    d854:	2100      	movs	r1, #0
    d856:	a801      	add	r0, sp, #4
    d858:	f005 f956 	bl	12b08 <memset>
                .ctz.head = file->ctz.head,
    d85c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
            lfs_file_t orig = {
    d85e:	930b      	str	r3, [sp, #44]	; 0x2c
                .ctz.size = file->ctz.size,
    d860:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
            lfs_file_t orig = {
    d862:	930c      	str	r3, [sp, #48]	; 0x30
    d864:	4b2a      	ldr	r3, [pc, #168]	; (d910 <lfs_file_flush+0xf0>)
    d866:	930d      	str	r3, [sp, #52]	; 0x34
                .pos = file->pos,
    d868:	6b63      	ldr	r3, [r4, #52]	; 0x34
            lfs_file_t orig = {
    d86a:	930e      	str	r3, [sp, #56]	; 0x38
    d86c:	af11      	add	r7, sp, #68	; 0x44
    d86e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    d872:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    rcache->block = LFS_BLOCK_NULL;
    d876:	f04f 33ff 	mov.w	r3, #4294967295
    d87a:	602b      	str	r3, [r5, #0]
}
    d87c:	e003      	b.n	d886 <lfs_file_flush+0x66>
    rcache->block = LFS_BLOCK_NULL;
    d87e:	f04f 33ff 	mov.w	r3, #4294967295
    d882:	9311      	str	r3, [sp, #68]	; 0x44
    d884:	602b      	str	r3, [r5, #0]
            while (file->pos < file->ctz.size) {
    d886:	6b62      	ldr	r2, [r4, #52]	; 0x34
    d888:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    d88a:	429a      	cmp	r2, r3
    d88c:	d216      	bcs.n	d8bc <lfs_file_flush+0x9c>
                lfs_ssize_t res = lfs_file_read(lfs, &orig, &data, 1);
    d88e:	2301      	movs	r3, #1
    d890:	f10d 0203 	add.w	r2, sp, #3
    d894:	a901      	add	r1, sp, #4
    d896:	4628      	mov	r0, r5
    d898:	f000 f83c 	bl	d914 <lfs_file_read>
                if (res < 0) {
    d89c:	1e03      	subs	r3, r0, #0
    d89e:	db34      	blt.n	d90a <lfs_file_flush+0xea>
                res = lfs_file_write(lfs, file, &data, 1);
    d8a0:	2301      	movs	r3, #1
    d8a2:	f10d 0203 	add.w	r2, sp, #3
    d8a6:	4621      	mov	r1, r4
    d8a8:	4628      	mov	r0, r5
    d8aa:	f007 fa63 	bl	14d74 <lfs_file_write>
                if (res < 0) {
    d8ae:	1e03      	subs	r3, r0, #0
    d8b0:	db2b      	blt.n	d90a <lfs_file_flush+0xea>
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
    d8b2:	682b      	ldr	r3, [r5, #0]
    d8b4:	f1b3 3fff 	cmp.w	r3, #4294967295
    d8b8:	d1e1      	bne.n	d87e <lfs_file_flush+0x5e>
    d8ba:	e7e4      	b.n	d886 <lfs_file_flush+0x66>
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
    d8bc:	2301      	movs	r3, #1
    d8be:	462a      	mov	r2, r5
    d8c0:	f104 0140 	add.w	r1, r4, #64	; 0x40
    d8c4:	4628      	mov	r0, r5
    d8c6:	f006 fe01 	bl	144cc <lfs_bd_flush>
                if (err) {
    d8ca:	4603      	mov	r3, r0
    d8cc:	b178      	cbz	r0, d8ee <lfs_file_flush+0xce>
                    if (err == LFS_ERR_CORRUPT) {
    d8ce:	f110 0f54 	cmn.w	r0, #84	; 0x54
    d8d2:	d11a      	bne.n	d90a <lfs_file_flush+0xea>
                err = lfs_file_relocate(lfs, file);
    d8d4:	4621      	mov	r1, r4
    d8d6:	4628      	mov	r0, r5
    d8d8:	f7ff ff1c 	bl	d714 <lfs_file_relocate>
                if (err) {
    d8dc:	4603      	mov	r3, r0
    d8de:	2800      	cmp	r0, #0
    d8e0:	d0ec      	beq.n	d8bc <lfs_file_flush+0x9c>
    d8e2:	e012      	b.n	d90a <lfs_file_flush+0xea>
            file->pos = lfs_max(file->pos, file->ctz.size);
    d8e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (a > b) ? a : b;
    d8e6:	42b3      	cmp	r3, r6
    d8e8:	bf38      	it	cc
    d8ea:	4633      	movcc	r3, r6
    d8ec:	6363      	str	r3, [r4, #52]	; 0x34
        file->ctz.head = file->block;
    d8ee:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    d8f0:	62a3      	str	r3, [r4, #40]	; 0x28
        file->ctz.size = file->pos;
    d8f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    d8f4:	62e3      	str	r3, [r4, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
    d8f6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    d8f8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
        file->flags |= LFS_F_DIRTY;
    d8fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    d900:	6323      	str	r3, [r4, #48]	; 0x30
        file->pos = pos;
    d902:	6366      	str	r6, [r4, #52]	; 0x34
    return 0;
    d904:	2300      	movs	r3, #0
    d906:	e000      	b.n	d90a <lfs_file_flush+0xea>
    d908:	2300      	movs	r3, #0
}
    d90a:	4618      	mov	r0, r3
    d90c:	b017      	add	sp, #92	; 0x5c
    d90e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d910:	00200001 	.word	0x00200001

0000d914 <lfs_file_read>:
        void *buffer, lfs_size_t size) {
    d914:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d918:	b087      	sub	sp, #28
    d91a:	4680      	mov	r8, r0
    d91c:	460c      	mov	r4, r1
    d91e:	4617      	mov	r7, r2
    d920:	4699      	mov	r9, r3
    if (file->flags & LFS_F_WRITING) {
    d922:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    d924:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    d928:	d109      	bne.n	d93e <lfs_file_read+0x2a>
    if (file->pos >= file->ctz.size) {
    d92a:	6b62      	ldr	r2, [r4, #52]	; 0x34
    d92c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    d92e:	429a      	cmp	r2, r3
    d930:	d276      	bcs.n	da20 <lfs_file_read+0x10c>
    size = lfs_min(size, file->ctz.size - file->pos);
    d932:	1a9b      	subs	r3, r3, r2
    return (a < b) ? a : b;
    d934:	4599      	cmp	r9, r3
    d936:	bf28      	it	cs
    d938:	4699      	movcs	r9, r3
    nsize = size;
    d93a:	464e      	mov	r6, r9
    while (nsize > 0) {
    d93c:	e03d      	b.n	d9ba <lfs_file_read+0xa6>
        int err = lfs_file_flush(lfs, file);
    d93e:	f7ff ff6f 	bl	d820 <lfs_file_flush>
        if (err) {
    d942:	4602      	mov	r2, r0
    d944:	2800      	cmp	r0, #0
    d946:	d0f0      	beq.n	d92a <lfs_file_read+0x16>
    d948:	e06b      	b.n	da22 <lfs_file_read+0x10e>
            if (!(file->flags & LFS_F_INLINE)) {
    d94a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    d94e:	d041      	beq.n	d9d4 <lfs_file_read+0xc0>
                file->block = LFS_BLOCK_INLINE;
    d950:	f06f 0301 	mvn.w	r3, #1
    d954:	63a3      	str	r3, [r4, #56]	; 0x38
                file->off = file->pos;
    d956:	6b63      	ldr	r3, [r4, #52]	; 0x34
    d958:	63e3      	str	r3, [r4, #60]	; 0x3c
            file->flags |= LFS_F_READING;
    d95a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    d95c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    d960:	6323      	str	r3, [r4, #48]	; 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
    d962:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
    d966:	69db      	ldr	r3, [r3, #28]
    d968:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    d96a:	1a9d      	subs	r5, r3, r2
    d96c:	42b5      	cmp	r5, r6
    d96e:	bf28      	it	cs
    d970:	4635      	movcs	r5, r6
        if (file->flags & LFS_F_INLINE) {
    d972:	6b21      	ldr	r1, [r4, #48]	; 0x30
    d974:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    d978:	d041      	beq.n	d9fe <lfs_file_read+0xea>
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
    d97a:	88a1      	ldrh	r1, [r4, #4]
    d97c:	0289      	lsls	r1, r1, #10
            int err = lfs_dir_getread(lfs, &file->m,
    d97e:	9505      	str	r5, [sp, #20]
    d980:	9704      	str	r7, [sp, #16]
    d982:	9203      	str	r2, [sp, #12]
    d984:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
    d988:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    d98c:	9102      	str	r1, [sp, #8]
    d98e:	4a27      	ldr	r2, [pc, #156]	; (da2c <lfs_file_read+0x118>)
    d990:	9201      	str	r2, [sp, #4]
    d992:	9300      	str	r3, [sp, #0]
    d994:	f104 0340 	add.w	r3, r4, #64	; 0x40
    d998:	2200      	movs	r2, #0
    d99a:	f104 0108 	add.w	r1, r4, #8
    d99e:	4640      	mov	r0, r8
    d9a0:	f006 fd06 	bl	143b0 <lfs_dir_getread>
            if (err) {
    d9a4:	4602      	mov	r2, r0
    d9a6:	2800      	cmp	r0, #0
    d9a8:	d13b      	bne.n	da22 <lfs_file_read+0x10e>
        file->pos += diff;
    d9aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
    d9ac:	442b      	add	r3, r5
    d9ae:	6363      	str	r3, [r4, #52]	; 0x34
        file->off += diff;
    d9b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    d9b2:	442b      	add	r3, r5
    d9b4:	63e3      	str	r3, [r4, #60]	; 0x3c
        data += diff;
    d9b6:	442f      	add	r7, r5
        nsize -= diff;
    d9b8:	1b76      	subs	r6, r6, r5
    while (nsize > 0) {
    d9ba:	2e00      	cmp	r6, #0
    d9bc:	d02e      	beq.n	da1c <lfs_file_read+0x108>
        if (!(file->flags & LFS_F_READING) ||
    d9be:	6b23      	ldr	r3, [r4, #48]	; 0x30
    d9c0:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    d9c4:	d0c1      	beq.n	d94a <lfs_file_read+0x36>
                file->off == lfs->cfg->block_size) {
    d9c6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    d9c8:	f8d8 2068 	ldr.w	r2, [r8, #104]	; 0x68
    d9cc:	69d2      	ldr	r2, [r2, #28]
        if (!(file->flags & LFS_F_READING) ||
    d9ce:	4291      	cmp	r1, r2
    d9d0:	d1c7      	bne.n	d962 <lfs_file_read+0x4e>
    d9d2:	e7ba      	b.n	d94a <lfs_file_read+0x36>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
    d9d4:	f104 033c 	add.w	r3, r4, #60	; 0x3c
    d9d8:	9303      	str	r3, [sp, #12]
    d9da:	f104 0338 	add.w	r3, r4, #56	; 0x38
    d9de:	9302      	str	r3, [sp, #8]
    d9e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    d9e2:	9301      	str	r3, [sp, #4]
    d9e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    d9e6:	9300      	str	r3, [sp, #0]
    d9e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d9ea:	f104 0240 	add.w	r2, r4, #64	; 0x40
    d9ee:	2100      	movs	r1, #0
    d9f0:	4640      	mov	r0, r8
    d9f2:	f007 f84e 	bl	14a92 <lfs_ctz_find>
                if (err) {
    d9f6:	4602      	mov	r2, r0
    d9f8:	2800      	cmp	r0, #0
    d9fa:	d0ae      	beq.n	d95a <lfs_file_read+0x46>
    d9fc:	e011      	b.n	da22 <lfs_file_read+0x10e>
            int err = lfs_bd_read(lfs,
    d9fe:	9503      	str	r5, [sp, #12]
    da00:	9702      	str	r7, [sp, #8]
    da02:	9201      	str	r2, [sp, #4]
    da04:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    da06:	9200      	str	r2, [sp, #0]
    da08:	f104 0240 	add.w	r2, r4, #64	; 0x40
    da0c:	2100      	movs	r1, #0
    da0e:	4640      	mov	r0, r8
    da10:	f006 fb2d 	bl	1406e <lfs_bd_read>
            if (err) {
    da14:	4602      	mov	r2, r0
    da16:	2800      	cmp	r0, #0
    da18:	d0c7      	beq.n	d9aa <lfs_file_read+0x96>
    da1a:	e002      	b.n	da22 <lfs_file_read+0x10e>
    return size;
    da1c:	464a      	mov	r2, r9
    da1e:	e000      	b.n	da22 <lfs_file_read+0x10e>
        return 0;
    da20:	2200      	movs	r2, #0
}
    da22:	4610      	mov	r0, r2
    da24:	b007      	add	sp, #28
    da26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    da2a:	bf00      	nop
    da2c:	fff7fc00 	.word	0xfff7fc00

0000da30 <lfs_fs_size>:
    lfs_size_t *size = p;
    *size += 1;
    return 0;
}

lfs_ssize_t lfs_fs_size(lfs_t *lfs) {
    da30:	b500      	push	{lr}
    da32:	b083      	sub	sp, #12
    LFS_TRACE("lfs_fs_size(%p)", (void*)lfs);
    lfs_size_t size = 0;
    da34:	2300      	movs	r3, #0
    da36:	9301      	str	r3, [sp, #4]
    int err = lfs_fs_traverseraw(lfs, lfs_fs_size_count, &size, false);
    da38:	aa01      	add	r2, sp, #4
    da3a:	4904      	ldr	r1, [pc, #16]	; (da4c <lfs_fs_size+0x1c>)
    da3c:	f7ff fd28 	bl	d490 <lfs_fs_traverseraw>
    if (err) {
    da40:	b900      	cbnz	r0, da44 <lfs_fs_size+0x14>
        LFS_TRACE("lfs_fs_size -> %d", err);
        return err;
    }

    LFS_TRACE("lfs_fs_size -> %d", err);
    return size;
    da42:	9801      	ldr	r0, [sp, #4]
}
    da44:	b003      	add	sp, #12
    da46:	f85d fb04 	ldr.w	pc, [sp], #4
    da4a:	bf00      	nop
    da4c:	00014065 	.word	0x00014065

0000da50 <lfs_dir_compact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
    da50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    da54:	b09b      	sub	sp, #108	; 0x6c
    da56:	4607      	mov	r7, r0
    da58:	468b      	mov	fp, r1
    da5a:	4690      	mov	r8, r2
    da5c:	4699      	mov	r9, r3
    da5e:	f8dd a090 	ldr.w	sl, [sp, #144]	; 0x90
    da62:	f8bd 5094 	ldrh.w	r5, [sp, #148]	; 0x94
    da66:	f8bd 6098 	ldrh.w	r6, [sp, #152]	; 0x98
    const lfs_block_t oldpair[2] = {dir->pair[0], dir->pair[1]};
    da6a:	680b      	ldr	r3, [r1, #0]
    da6c:	9316      	str	r3, [sp, #88]	; 0x58
    da6e:	684b      	ldr	r3, [r1, #4]
    da70:	9317      	str	r3, [sp, #92]	; 0x5c
    while (end - begin > 1) {
    da72:	e012      	b.n	da9a <lfs_dir_compact+0x4a>
        uint16_t split = (end - begin) / 2;
    da74:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
    da78:	f3c4 044f 	ubfx	r4, r4, #1, #16
        err = lfs_dir_split(lfs, dir, attrs, attrcount,
    da7c:	442c      	add	r4, r5
    da7e:	b2a4      	uxth	r4, r4
    da80:	9602      	str	r6, [sp, #8]
    da82:	9401      	str	r4, [sp, #4]
    da84:	f8cd a000 	str.w	sl, [sp]
    da88:	464b      	mov	r3, r9
    da8a:	4642      	mov	r2, r8
    da8c:	4659      	mov	r1, fp
    da8e:	4638      	mov	r0, r7
    da90:	f007 fb83 	bl	1519a <lfs_dir_split>
        if (err) {
    da94:	2800      	cmp	r0, #0
    da96:	d151      	bne.n	db3c <lfs_dir_compact+0xec>
        end = begin + split;
    da98:	4626      	mov	r6, r4
    while (end - begin > 1) {
    da9a:	1b74      	subs	r4, r6, r5
    da9c:	2c01      	cmp	r4, #1
    da9e:	dd2f      	ble.n	db00 <lfs_dir_compact+0xb0>
        lfs_size_t size = 0;
    daa0:	2200      	movs	r2, #0
    daa2:	9210      	str	r2, [sp, #64]	; 0x40
        int err = lfs_dir_traverse(lfs,
    daa4:	ab10      	add	r3, sp, #64	; 0x40
    daa6:	9308      	str	r3, [sp, #32]
    daa8:	4bad      	ldr	r3, [pc, #692]	; (dd60 <lfs_dir_compact+0x310>)
    daaa:	9307      	str	r3, [sp, #28]
    daac:	426b      	negs	r3, r5
    daae:	b21b      	sxth	r3, r3
    dab0:	9306      	str	r3, [sp, #24]
    dab2:	9605      	str	r6, [sp, #20]
    dab4:	9504      	str	r5, [sp, #16]
    dab6:	9203      	str	r2, [sp, #12]
    dab8:	4baa      	ldr	r3, [pc, #680]	; (dd64 <lfs_dir_compact+0x314>)
    daba:	9302      	str	r3, [sp, #8]
    dabc:	f8cd 9004 	str.w	r9, [sp, #4]
    dac0:	f8cd 8000 	str.w	r8, [sp]
    dac4:	f04f 33ff 	mov.w	r3, #4294967295
    dac8:	4651      	mov	r1, sl
    daca:	4638      	mov	r0, r7
    dacc:	f7ff f81a 	bl	cb04 <lfs_dir_traverse>
        if (err) {
    dad0:	2800      	cmp	r0, #0
    dad2:	f040 81a7 	bne.w	de24 <lfs_dir_compact+0x3d4>
        if (end - begin < 0xff &&
    dad6:	2cfe      	cmp	r4, #254	; 0xfe
    dad8:	dccc      	bgt.n	da74 <lfs_dir_compact+0x24>
                size <= lfs_min(lfs->cfg->block_size - 36,
    dada:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    dadc:	69da      	ldr	r2, [r3, #28]
    dade:	f1a2 0124 	sub.w	r1, r2, #36	; 0x24
    dae2:	6998      	ldr	r0, [r3, #24]
    return lfs_aligndown(a + alignment-1, alignment);
    dae4:	eb00 0252 	add.w	r2, r0, r2, lsr #1
    dae8:	1e53      	subs	r3, r2, #1
    return a - (a % alignment);
    daea:	fbb3 f2f0 	udiv	r2, r3, r0
    daee:	fb00 3212 	mls	r2, r0, r2, r3
    daf2:	1a9b      	subs	r3, r3, r2
    return (a < b) ? a : b;
    daf4:	428b      	cmp	r3, r1
    daf6:	bf28      	it	cs
    daf8:	460b      	movcs	r3, r1
    dafa:	9a10      	ldr	r2, [sp, #64]	; 0x40
        if (end - begin < 0xff &&
    dafc:	429a      	cmp	r2, r3
    dafe:	d8b9      	bhi.n	da74 <lfs_dir_compact+0x24>
    dir->rev += 1;
    db00:	f8db 2008 	ldr.w	r2, [fp, #8]
    db04:	3201      	adds	r2, #1
    db06:	f8cb 2008 	str.w	r2, [fp, #8]
    if (lfs->cfg->block_cycles > 0 &&
    db0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    db0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    db0e:	2b00      	cmp	r3, #0
    db10:	dd43      	ble.n	db9a <lfs_dir_compact+0x14a>
            (dir->rev % ((lfs->cfg->block_cycles+1)|1) == 0)) {
    db12:	3301      	adds	r3, #1
    db14:	f043 0301 	orr.w	r3, r3, #1
    db18:	fbb2 f1f3 	udiv	r1, r2, r3
    db1c:	fb03 2311 	mls	r3, r3, r1, r2
    if (lfs->cfg->block_cycles > 0 &&
    db20:	2b00      	cmp	r3, #0
    db22:	d13c      	bne.n	db9e <lfs_dir_compact+0x14e>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    db24:	f8db 3000 	ldr.w	r3, [fp]
    db28:	b1a3      	cbz	r3, db54 <lfs_dir_compact+0x104>
    db2a:	f8db 2004 	ldr.w	r2, [fp, #4]
    db2e:	2a01      	cmp	r2, #1
    db30:	d010      	beq.n	db54 <lfs_dir_compact+0x104>
    db32:	2b01      	cmp	r3, #1
    db34:	d00e      	beq.n	db54 <lfs_dir_compact+0x104>
    db36:	b16a      	cbz	r2, db54 <lfs_dir_compact+0x104>
            tired = true;
    db38:	2401      	movs	r4, #1
    db3a:	e049      	b.n	dbd0 <lfs_dir_compact+0x180>
    db3c:	900b      	str	r0, [sp, #44]	; 0x2c
            if (err == LFS_ERR_NOSPC && size <= lfs->cfg->block_size - 36) {
    db3e:	f110 0f1c 	cmn.w	r0, #28
    db42:	f040 8170 	bne.w	de26 <lfs_dir_compact+0x3d6>
    db46:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    db48:	69db      	ldr	r3, [r3, #28]
    db4a:	3b24      	subs	r3, #36	; 0x24
    db4c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    db4e:	4293      	cmp	r3, r2
    db50:	d2d6      	bcs.n	db00 <lfs_dir_compact+0xb0>
    db52:	e168      	b.n	de26 <lfs_dir_compact+0x3d6>
            lfs_ssize_t res = lfs_fs_size(lfs);
    db54:	4638      	mov	r0, r7
    db56:	f7ff ff6b 	bl	da30 <lfs_fs_size>
            if (res < 0) {
    db5a:	1e02      	subs	r2, r0, #0
    db5c:	920b      	str	r2, [sp, #44]	; 0x2c
    db5e:	f2c0 8162 	blt.w	de26 <lfs_dir_compact+0x3d6>
            if ((lfs_size_t)res < lfs->cfg->block_count/2) {
    db62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    db64:	6a1b      	ldr	r3, [r3, #32]
    db66:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
    db6a:	d301      	bcc.n	db70 <lfs_dir_compact+0x120>
    bool relocated = false;
    db6c:	2400      	movs	r4, #0
    db6e:	e017      	b.n	dba0 <lfs_dir_compact+0x150>
                int err = lfs_dir_split(lfs, dir, attrs, attrcount,
    db70:	9602      	str	r6, [sp, #8]
    db72:	9501      	str	r5, [sp, #4]
    db74:	f8cd a000 	str.w	sl, [sp]
    db78:	464b      	mov	r3, r9
    db7a:	4642      	mov	r2, r8
    db7c:	4659      	mov	r1, fp
    db7e:	4638      	mov	r0, r7
    db80:	f007 fb0b 	bl	1519a <lfs_dir_split>
                if (err && err != LFS_ERR_NOSPC) {
    db84:	900b      	str	r0, [sp, #44]	; 0x2c
    db86:	b118      	cbz	r0, db90 <lfs_dir_compact+0x140>
    db88:	f110 0f1c 	cmn.w	r0, #28
    db8c:	f040 814b 	bne.w	de26 <lfs_dir_compact+0x3d6>
                if (!err) {
    db90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    db92:	2b00      	cmp	r3, #0
    db94:	d1ea      	bne.n	db6c <lfs_dir_compact+0x11c>
                    end = begin;
    db96:	462e      	mov	r6, r5
    db98:	e7e8      	b.n	db6c <lfs_dir_compact+0x11c>
    bool relocated = false;
    db9a:	2400      	movs	r4, #0
    db9c:	e000      	b.n	dba0 <lfs_dir_compact+0x150>
    db9e:	2400      	movs	r4, #0
                .block = dir->pair[1],
    dba0:	f8db 1004 	ldr.w	r1, [fp, #4]
            struct lfs_commit commit = {
    dba4:	9110      	str	r1, [sp, #64]	; 0x40
    dba6:	2300      	movs	r3, #0
    dba8:	9311      	str	r3, [sp, #68]	; 0x44
    dbaa:	f04f 32ff 	mov.w	r2, #4294967295
    dbae:	9212      	str	r2, [sp, #72]	; 0x48
    dbb0:	9213      	str	r2, [sp, #76]	; 0x4c
    dbb2:	9314      	str	r3, [sp, #80]	; 0x50
                .end = lfs->cfg->block_size - 8,
    dbb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    dbb6:	69db      	ldr	r3, [r3, #28]
    dbb8:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
    dbba:	9315      	str	r3, [sp, #84]	; 0x54
            int err = lfs_bd_erase(lfs, dir->pair[1]);
    dbbc:	4638      	mov	r0, r7
    dbbe:	f006 fa04 	bl	13fca <lfs_bd_erase>
            if (err) {
    dbc2:	900b      	str	r0, [sp, #44]	; 0x2c
    dbc4:	b340      	cbz	r0, dc18 <lfs_dir_compact+0x1c8>
                if (err == LFS_ERR_CORRUPT) {
    dbc6:	f110 0f54 	cmn.w	r0, #84	; 0x54
    dbca:	f040 812c 	bne.w	de26 <lfs_dir_compact+0x3d6>
                    goto relocate;
    dbce:	2400      	movs	r4, #0
    rcache->block = LFS_BLOCK_NULL;
    dbd0:	f04f 33ff 	mov.w	r3, #4294967295
    dbd4:	613b      	str	r3, [r7, #16]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    dbd6:	f8db 3000 	ldr.w	r3, [fp]
    dbda:	2b00      	cmp	r3, #0
    dbdc:	f000 8107 	beq.w	ddee <lfs_dir_compact+0x39e>
    dbe0:	f8db 2004 	ldr.w	r2, [fp, #4]
    dbe4:	2a01      	cmp	r2, #1
    dbe6:	f000 8102 	beq.w	ddee <lfs_dir_compact+0x39e>
    dbea:	2b01      	cmp	r3, #1
    dbec:	f000 80ff 	beq.w	ddee <lfs_dir_compact+0x39e>
    dbf0:	2a00      	cmp	r2, #0
    dbf2:	f000 80fc 	beq.w	ddee <lfs_dir_compact+0x39e>
        int err = lfs_alloc(lfs, &dir->pair[1]);
    dbf6:	f10b 0104 	add.w	r1, fp, #4
    dbfa:	4638      	mov	r0, r7
    dbfc:	f7ff fd08 	bl	d610 <lfs_alloc>
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
    dc00:	900b      	str	r0, [sp, #44]	; 0x2c
    dc02:	b138      	cbz	r0, dc14 <lfs_dir_compact+0x1c4>
    dc04:	f110 0f1c 	cmn.w	r0, #28
    dc08:	f040 810d 	bne.w	de26 <lfs_dir_compact+0x3d6>
    dc0c:	2c00      	cmp	r4, #0
    dc0e:	f000 810a 	beq.w	de26 <lfs_dir_compact+0x3d6>
    dc12:	e7c5      	b.n	dba0 <lfs_dir_compact+0x150>
        relocated = true;
    dc14:	2401      	movs	r4, #1
    dc16:	e7c3      	b.n	dba0 <lfs_dir_compact+0x150>
            err = lfs_dir_commitprog(lfs, &commit,
    dc18:	2304      	movs	r3, #4
    dc1a:	f10b 0208 	add.w	r2, fp, #8
    dc1e:	a910      	add	r1, sp, #64	; 0x40
    dc20:	4638      	mov	r0, r7
    dc22:	f006 fcea 	bl	145fa <lfs_dir_commitprog>
            if (err) {
    dc26:	900b      	str	r0, [sp, #44]	; 0x2c
    dc28:	b120      	cbz	r0, dc34 <lfs_dir_compact+0x1e4>
                if (err == LFS_ERR_CORRUPT) {
    dc2a:	f110 0f54 	cmn.w	r0, #84	; 0x54
    dc2e:	f040 80fa 	bne.w	de26 <lfs_dir_compact+0x3d6>
    dc32:	e7cc      	b.n	dbce <lfs_dir_compact+0x17e>
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
    dc34:	9718      	str	r7, [sp, #96]	; 0x60
    dc36:	ab10      	add	r3, sp, #64	; 0x40
    dc38:	9319      	str	r3, [sp, #100]	; 0x64
            err = lfs_dir_traverse(lfs,
    dc3a:	ab18      	add	r3, sp, #96	; 0x60
    dc3c:	9308      	str	r3, [sp, #32]
    dc3e:	4b4a      	ldr	r3, [pc, #296]	; (dd68 <lfs_dir_compact+0x318>)
    dc40:	9307      	str	r3, [sp, #28]
    dc42:	426b      	negs	r3, r5
    dc44:	b21b      	sxth	r3, r3
    dc46:	9306      	str	r3, [sp, #24]
    dc48:	9605      	str	r6, [sp, #20]
    dc4a:	9504      	str	r5, [sp, #16]
    dc4c:	2200      	movs	r2, #0
    dc4e:	9203      	str	r2, [sp, #12]
    dc50:	4b44      	ldr	r3, [pc, #272]	; (dd64 <lfs_dir_compact+0x314>)
    dc52:	9302      	str	r3, [sp, #8]
    dc54:	f8cd 9004 	str.w	r9, [sp, #4]
    dc58:	f8cd 8000 	str.w	r8, [sp]
    dc5c:	f04f 33ff 	mov.w	r3, #4294967295
    dc60:	4651      	mov	r1, sl
    dc62:	4638      	mov	r0, r7
    dc64:	f7fe ff4e 	bl	cb04 <lfs_dir_traverse>
            if (err) {
    dc68:	900b      	str	r0, [sp, #44]	; 0x2c
    dc6a:	b120      	cbz	r0, dc76 <lfs_dir_compact+0x226>
                if (err == LFS_ERR_CORRUPT) {
    dc6c:	f110 0f54 	cmn.w	r0, #84	; 0x54
    dc70:	f040 80d9 	bne.w	de26 <lfs_dir_compact+0x3d6>
    dc74:	e7ab      	b.n	dbce <lfs_dir_compact+0x17e>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    dc76:	f8db 3018 	ldr.w	r3, [fp, #24]
    dc7a:	f1b3 3fff 	cmp.w	r3, #4294967295
    dc7e:	d01e      	beq.n	dcbe <lfs_dir_compact+0x26e>
    dc80:	f8db 301c 	ldr.w	r3, [fp, #28]
    dc84:	f1b3 3fff 	cmp.w	r3, #4294967295
    dc88:	d017      	beq.n	dcba <lfs_dir_compact+0x26a>
    dc8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            if (!lfs_pair_isnull(dir->tail)) {
    dc8c:	f013 0f01 	tst.w	r3, #1
    dc90:	d017      	beq.n	dcc2 <lfs_dir_compact+0x272>
            lfs_gstate_t delta = {0};
    dc92:	2300      	movs	r3, #0
    dc94:	930d      	str	r3, [sp, #52]	; 0x34
    dc96:	930e      	str	r3, [sp, #56]	; 0x38
    dc98:	930f      	str	r3, [sp, #60]	; 0x3c
            if (!relocated) {
    dc9a:	bbb4      	cbnz	r4, dd0a <lfs_dir_compact+0x2ba>
                lfs_gstate_xor(&delta, &lfs->gdisk);
    dc9c:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
    for (int i = 0; i < 3; i++) {
    dca0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dca2:	2b02      	cmp	r3, #2
    dca4:	dc22      	bgt.n	dcec <lfs_dir_compact+0x29c>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
    dca6:	a90d      	add	r1, sp, #52	; 0x34
    dca8:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
    dcac:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    dcb0:	4042      	eors	r2, r0
    dcb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
    dcb6:	3301      	adds	r3, #1
    dcb8:	e7f3      	b.n	dca2 <lfs_dir_compact+0x252>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    dcba:	2301      	movs	r3, #1
    dcbc:	e7e6      	b.n	dc8c <lfs_dir_compact+0x23c>
    dcbe:	2301      	movs	r3, #1
    dcc0:	e7e4      	b.n	dc8c <lfs_dir_compact+0x23c>
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
    dcc2:	f89b 2017 	ldrb.w	r2, [fp, #23]
    dcc6:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
                err = lfs_dir_commitattr(lfs, &commit,
    dcca:	f10b 0318 	add.w	r3, fp, #24
    dcce:	4927      	ldr	r1, [pc, #156]	; (dd6c <lfs_dir_compact+0x31c>)
    dcd0:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
    dcd4:	a910      	add	r1, sp, #64	; 0x40
    dcd6:	4638      	mov	r0, r7
    dcd8:	f006 fcaf 	bl	1463a <lfs_dir_commitattr>
                if (err) {
    dcdc:	2800      	cmp	r0, #0
    dcde:	d0d8      	beq.n	dc92 <lfs_dir_compact+0x242>
                    if (err == LFS_ERR_CORRUPT) {
    dce0:	f110 0f54 	cmn.w	r0, #84	; 0x54
    dce4:	f43f af73 	beq.w	dbce <lfs_dir_compact+0x17e>
                    return err;
    dce8:	900b      	str	r0, [sp, #44]	; 0x2c
    dcea:	e09c      	b.n	de26 <lfs_dir_compact+0x3d6>
                lfs_gstate_xor(&delta, &lfs->gstate);
    dcec:	f107 0c30 	add.w	ip, r7, #48	; 0x30
    for (int i = 0; i < 3; i++) {
    dcf0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dcf2:	2b02      	cmp	r3, #2
    dcf4:	dc09      	bgt.n	dd0a <lfs_dir_compact+0x2ba>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
    dcf6:	a90d      	add	r1, sp, #52	; 0x34
    dcf8:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
    dcfc:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    dd00:	4042      	eors	r2, r0
    dd02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
    dd06:	3301      	adds	r3, #1
    dd08:	e7f3      	b.n	dcf2 <lfs_dir_compact+0x2a2>
            lfs_gstate_xor(&delta, &lfs->gdelta);
    dd0a:	f107 0048 	add.w	r0, r7, #72	; 0x48
    for (int i = 0; i < 3; i++) {
    dd0e:	46a4      	mov	ip, r4
    dd10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dd12:	e008      	b.n	dd26 <lfs_dir_compact+0x2d6>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
    dd14:	a90d      	add	r1, sp, #52	; 0x34
    dd16:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    dd1a:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    dd1e:	4062      	eors	r2, r4
    dd20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
    dd24:	3301      	adds	r3, #1
    dd26:	2b02      	cmp	r3, #2
    dd28:	ddf4      	ble.n	dd14 <lfs_dir_compact+0x2c4>
    dd2a:	4664      	mov	r4, ip
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
    dd2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    dd2e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
    dd32:	f023 0303 	bic.w	r3, r3, #3
    dd36:	930d      	str	r3, [sp, #52]	; 0x34
            err = lfs_dir_getgstate(lfs, dir, &delta);
    dd38:	aa0d      	add	r2, sp, #52	; 0x34
    dd3a:	4659      	mov	r1, fp
    dd3c:	4638      	mov	r0, r7
    dd3e:	f7ff f891 	bl	ce64 <lfs_dir_getgstate>
            if (err) {
    dd42:	900b      	str	r0, [sp, #44]	; 0x2c
    dd44:	2800      	cmp	r0, #0
    dd46:	d16e      	bne.n	de26 <lfs_dir_compact+0x3d6>
    dd48:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    for (int i = 0; i < 3; i++) {
    dd4a:	2b02      	cmp	r3, #2
    dd4c:	dc10      	bgt.n	dd70 <lfs_dir_compact+0x320>
        if (((uint32_t*)a)[i] != 0) {
    dd4e:	aa1a      	add	r2, sp, #104	; 0x68
    dd50:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    dd54:	f852 2c34 	ldr.w	r2, [r2, #-52]
    dd58:	b9c2      	cbnz	r2, dd8c <lfs_dir_compact+0x33c>
    for (int i = 0; i < 3; i++) {
    dd5a:	3301      	adds	r3, #1
    dd5c:	e7f5      	b.n	dd4a <lfs_dir_compact+0x2fa>
    dd5e:	bf00      	nop
    dd60:	0001402f 	.word	0x0001402f
    dd64:	400ffc00 	.word	0x400ffc00
    dd68:	000146f7 	.word	0x000146f7
    dd6c:	000ffc08 	.word	0x000ffc08
    return true;
    dd70:	2301      	movs	r3, #1
            if (!lfs_gstate_iszero(&delta)) {
    dd72:	b96b      	cbnz	r3, dd90 <lfs_dir_compact+0x340>
                err = lfs_dir_commitattr(lfs, &commit,
    dd74:	ab0d      	add	r3, sp, #52	; 0x34
    dd76:	4a2e      	ldr	r2, [pc, #184]	; (de30 <lfs_dir_compact+0x3e0>)
    dd78:	a910      	add	r1, sp, #64	; 0x40
    dd7a:	4638      	mov	r0, r7
    dd7c:	f006 fc5d 	bl	1463a <lfs_dir_commitattr>
                if (err) {
    dd80:	900b      	str	r0, [sp, #44]	; 0x2c
    dd82:	b128      	cbz	r0, dd90 <lfs_dir_compact+0x340>
                    if (err == LFS_ERR_CORRUPT) {
    dd84:	f110 0f54 	cmn.w	r0, #84	; 0x54
    dd88:	d14d      	bne.n	de26 <lfs_dir_compact+0x3d6>
    dd8a:	e720      	b.n	dbce <lfs_dir_compact+0x17e>
            return false;
    dd8c:	2300      	movs	r3, #0
    dd8e:	e7f0      	b.n	dd72 <lfs_dir_compact+0x322>
            err = lfs_dir_commitcrc(lfs, &commit);
    dd90:	a910      	add	r1, sp, #64	; 0x40
    dd92:	4638      	mov	r0, r7
    dd94:	f006 fcc3 	bl	1471e <lfs_dir_commitcrc>
            if (err) {
    dd98:	900b      	str	r0, [sp, #44]	; 0x2c
    dd9a:	b118      	cbz	r0, dda4 <lfs_dir_compact+0x354>
                if (err == LFS_ERR_CORRUPT) {
    dd9c:	f110 0f54 	cmn.w	r0, #84	; 0x54
    dda0:	d141      	bne.n	de26 <lfs_dir_compact+0x3d6>
    dda2:	e714      	b.n	dbce <lfs_dir_compact+0x17e>
    lfs_block_t t = pair[0];
    dda4:	f8db 3000 	ldr.w	r3, [fp]
    pair[0] = pair[1];
    dda8:	f8db 2004 	ldr.w	r2, [fp, #4]
    ddac:	f8cb 2000 	str.w	r2, [fp]
    pair[1] = t;
    ddb0:	f8cb 3004 	str.w	r3, [fp, #4]
            dir->count = end - begin;
    ddb4:	1b75      	subs	r5, r6, r5
    ddb6:	f8ab 5014 	strh.w	r5, [fp, #20]
            dir->off = commit.off;
    ddba:	9b11      	ldr	r3, [sp, #68]	; 0x44
    ddbc:	f8cb 300c 	str.w	r3, [fp, #12]
            dir->etag = commit.ptag;
    ddc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ddc2:	f8cb 3010 	str.w	r3, [fp, #16]
            lfs->gdelta = (lfs_gstate_t){0};
    ddc6:	2200      	movs	r2, #0
    ddc8:	64ba      	str	r2, [r7, #72]	; 0x48
    ddca:	64fa      	str	r2, [r7, #76]	; 0x4c
    ddcc:	653a      	str	r2, [r7, #80]	; 0x50
            if (!relocated) {
    ddce:	b934      	cbnz	r4, ddde <lfs_dir_compact+0x38e>
                lfs->gdisk = lfs->gstate;
    ddd0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    ddd4:	f107 0230 	add.w	r2, r7, #48	; 0x30
    ddd8:	ca07      	ldmia	r2, {r0, r1, r2}
    ddda:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (relocated) {
    ddde:	b314      	cbz	r4, de26 <lfs_dir_compact+0x3d6>
        int err = lfs_fs_relocate(lfs, oldpair, dir->pair);
    dde0:	465a      	mov	r2, fp
    dde2:	a916      	add	r1, sp, #88	; 0x58
    dde4:	4638      	mov	r0, r7
    dde6:	f000 fba1 	bl	e52c <lfs_fs_relocate>
    ddea:	900b      	str	r0, [sp, #44]	; 0x2c
        if (err) {
    ddec:	e01b      	b.n	de26 <lfs_dir_compact+0x3d6>
    ddee:	4b11      	ldr	r3, [pc, #68]	; (de34 <lfs_dir_compact+0x3e4>)
    ddf0:	4a11      	ldr	r2, [pc, #68]	; (de38 <lfs_dir_compact+0x3e8>)
    ddf2:	1a9b      	subs	r3, r3, r2
    ddf4:	08db      	lsrs	r3, r3, #3
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
    ddf6:	f04f 0200 	mov.w	r2, #0
    ddfa:	2102      	movs	r1, #2
    ddfc:	f361 0202 	bfi	r2, r1, #0, #3
    de00:	f36f 02c5 	bfc	r2, #3, #3
    de04:	f363 128f 	bfi	r2, r3, #6, #10
    de08:	f8ad 2000 	strh.w	r2, [sp]
    de0c:	f8db 3004 	ldr.w	r3, [fp, #4]
    de10:	f240 629a 	movw	r2, #1690	; 0x69a
    de14:	4909      	ldr	r1, [pc, #36]	; (de3c <lfs_dir_compact+0x3ec>)
    de16:	480a      	ldr	r0, [pc, #40]	; (de40 <lfs_dir_compact+0x3f0>)
    de18:	f7f4 fe90 	bl	2b3c <log_3>
            return LFS_ERR_NOSPC;
    de1c:	f06f 031b 	mvn.w	r3, #27
    de20:	930b      	str	r3, [sp, #44]	; 0x2c
    de22:	e000      	b.n	de26 <lfs_dir_compact+0x3d6>
    de24:	900b      	str	r0, [sp, #44]	; 0x2c
}
    de26:	980b      	ldr	r0, [sp, #44]	; 0x2c
    de28:	b01b      	add	sp, #108	; 0x6c
    de2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de2e:	bf00      	nop
    de30:	7ffffc0c 	.word	0x7ffffc0c
    de34:	00015ed0 	.word	0x00015ed0
    de38:	00015ea8 	.word	0x00015ea8
    de3c:	00017538 	.word	0x00017538
    de40:	0001764c 	.word	0x0001764c

0000de44 <lfs_dir_commit>:
        const struct lfs_mattr *attrs, int attrcount) {
    de44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    de48:	b0a1      	sub	sp, #132	; 0x84
    de4a:	4680      	mov	r8, r0
    de4c:	460d      	mov	r5, r1
    de4e:	4617      	mov	r7, r2
    de50:	4699      	mov	r9, r3
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
    de52:	6a84      	ldr	r4, [r0, #40]	; 0x28
    de54:	e003      	b.n	de5e <lfs_dir_commit+0x1a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
    de56:	79a3      	ldrb	r3, [r4, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
    de58:	2b01      	cmp	r3, #1
    de5a:	d012      	beq.n	de82 <lfs_dir_commit+0x3e>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
    de5c:	6824      	ldr	r4, [r4, #0]
    de5e:	b354      	cbz	r4, deb6 <lfs_dir_commit+0x72>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
    de60:	f104 0308 	add.w	r3, r4, #8
    de64:	42ab      	cmp	r3, r5
    de66:	d0f9      	beq.n	de5c <lfs_dir_commit+0x18>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    de68:	68a3      	ldr	r3, [r4, #8]
    de6a:	682a      	ldr	r2, [r5, #0]
    de6c:	4293      	cmp	r3, r2
    de6e:	d0f2      	beq.n	de56 <lfs_dir_commit+0x12>
    de70:	68e0      	ldr	r0, [r4, #12]
    de72:	6869      	ldr	r1, [r5, #4]
    de74:	4281      	cmp	r1, r0
    de76:	d0ee      	beq.n	de56 <lfs_dir_commit+0x12>
    de78:	428b      	cmp	r3, r1
    de7a:	d0ec      	beq.n	de56 <lfs_dir_commit+0x12>
    de7c:	4290      	cmp	r0, r2
    de7e:	d1ed      	bne.n	de5c <lfs_dir_commit+0x18>
    de80:	e7e9      	b.n	de56 <lfs_dir_commit+0x12>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
    de82:	6b23      	ldr	r3, [r4, #48]	; 0x30
    de84:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    de88:	d0e8      	beq.n	de5c <lfs_dir_commit+0x18>
                f->ctz.size > lfs->cfg->cache_size) {
    de8a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    de8c:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
    de90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
    de92:	429a      	cmp	r2, r3
    de94:	d9e2      	bls.n	de5c <lfs_dir_commit+0x18>
            int err = lfs_file_outline(lfs, f);
    de96:	4621      	mov	r1, r4
    de98:	4640      	mov	r0, r8
    de9a:	f006 feb2 	bl	14c02 <lfs_file_outline>
            if (err) {
    de9e:	4606      	mov	r6, r0
    dea0:	2800      	cmp	r0, #0
    dea2:	f040 81e6 	bne.w	e272 <lfs_dir_commit+0x42e>
            err = lfs_file_flush(lfs, f);
    dea6:	4621      	mov	r1, r4
    dea8:	4640      	mov	r0, r8
    deaa:	f7ff fcb9 	bl	d820 <lfs_file_flush>
            if (err) {
    deae:	4606      	mov	r6, r0
    deb0:	2800      	cmp	r0, #0
    deb2:	d0d3      	beq.n	de5c <lfs_dir_commit+0x18>
    deb4:	e1dd      	b.n	e272 <lfs_dir_commit+0x42e>
    lfs_mdir_t olddir = *dir;
    deb6:	ac16      	add	r4, sp, #88	; 0x58
    deb8:	462e      	mov	r6, r5
    deba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    debc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    debe:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    dec2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    for (int i = 0; i < attrcount; i++) {
    dec6:	2300      	movs	r3, #0
    bool hasdelete = false;
    dec8:	461e      	mov	r6, r3
    for (int i = 0; i < attrcount; i++) {
    deca:	e003      	b.n	ded4 <lfs_dir_commit+0x90>
            dir->count += 1;
    decc:	8aaa      	ldrh	r2, [r5, #20]
    dece:	3201      	adds	r2, #1
    ded0:	82aa      	strh	r2, [r5, #20]
    for (int i = 0; i < attrcount; i++) {
    ded2:	3301      	adds	r3, #1
    ded4:	454b      	cmp	r3, r9
    ded6:	da26      	bge.n	df26 <lfs_dir_commit+0xe2>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
    ded8:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
    dedc:	eb07 04c3 	add.w	r4, r7, r3, lsl #3
    dee0:	f857 2033 	ldr.w	r2, [r7, r3, lsl #3]
    return (tag & 0x7ff00000) >> 20;
    dee4:	0d11      	lsrs	r1, r2, #20
    dee6:	f3c2 520a 	ubfx	r2, r2, #20, #11
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
    deea:	f240 4001 	movw	r0, #1025	; 0x401
    deee:	4282      	cmp	r2, r0
    def0:	d0ec      	beq.n	decc <lfs_dir_commit+0x88>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
    def2:	f240 40ff 	movw	r0, #1279	; 0x4ff
    def6:	4282      	cmp	r2, r0
    def8:	d010      	beq.n	df1c <lfs_dir_commit+0xd8>
    return (tag & 0x70000000) >> 20;
    defa:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
    defe:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
    df02:	d1e6      	bne.n	ded2 <lfs_dir_commit+0x8e>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
    df04:	6862      	ldr	r2, [r4, #4]
    df06:	6812      	ldr	r2, [r2, #0]
    df08:	61aa      	str	r2, [r5, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
    df0a:	6862      	ldr	r2, [r4, #4]
    df0c:	6852      	ldr	r2, [r2, #4]
    df0e:	61ea      	str	r2, [r5, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
    df10:	f857 200c 	ldr.w	r2, [r7, ip]
    df14:	f3c2 5200 	ubfx	r2, r2, #20, #1
    df18:	75ea      	strb	r2, [r5, #23]
            lfs_pair_fromle32(dir->tail);
    df1a:	e7da      	b.n	ded2 <lfs_dir_commit+0x8e>
            dir->count -= 1;
    df1c:	8aaa      	ldrh	r2, [r5, #20]
    df1e:	3a01      	subs	r2, #1
    df20:	82aa      	strh	r2, [r5, #20]
            hasdelete = true;
    df22:	2601      	movs	r6, #1
    df24:	e7d5      	b.n	ded2 <lfs_dir_commit+0x8e>
    if (hasdelete && dir->count == 0) {
    df26:	b116      	cbz	r6, df2e <lfs_dir_commit+0xea>
    df28:	8aab      	ldrh	r3, [r5, #20]
    df2a:	2b00      	cmp	r3, #0
    df2c:	d03c      	beq.n	dfa8 <lfs_dir_commit+0x164>
    if (dir->erased || dir->count >= 0xff) {
    df2e:	7dab      	ldrb	r3, [r5, #22]
    df30:	b91b      	cbnz	r3, df3a <lfs_dir_commit+0xf6>
    df32:	8aab      	ldrh	r3, [r5, #20]
    df34:	2bfe      	cmp	r3, #254	; 0xfe
    df36:	f240 80f1 	bls.w	e11c <lfs_dir_commit+0x2d8>
            .block = dir->pair[0],
    df3a:	682b      	ldr	r3, [r5, #0]
        struct lfs_commit commit = {
    df3c:	930e      	str	r3, [sp, #56]	; 0x38
            .off = dir->off,
    df3e:	68ea      	ldr	r2, [r5, #12]
        struct lfs_commit commit = {
    df40:	920f      	str	r2, [sp, #60]	; 0x3c
            .ptag = dir->etag,
    df42:	692b      	ldr	r3, [r5, #16]
        struct lfs_commit commit = {
    df44:	9310      	str	r3, [sp, #64]	; 0x40
    df46:	f04f 31ff 	mov.w	r1, #4294967295
    df4a:	9111      	str	r1, [sp, #68]	; 0x44
    df4c:	9212      	str	r2, [sp, #72]	; 0x48
            .end = lfs->cfg->block_size - 8,
    df4e:	f8d8 1068 	ldr.w	r1, [r8, #104]	; 0x68
    df52:	69c9      	ldr	r1, [r1, #28]
    df54:	3908      	subs	r1, #8
        struct lfs_commit commit = {
    df56:	9113      	str	r1, [sp, #76]	; 0x4c
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
    df58:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
    df5c:	a90e      	add	r1, sp, #56	; 0x38
    df5e:	911f      	str	r1, [sp, #124]	; 0x7c
        int err = lfs_dir_traverse(lfs,
    df60:	a91e      	add	r1, sp, #120	; 0x78
    df62:	9108      	str	r1, [sp, #32]
    df64:	49b0      	ldr	r1, [pc, #704]	; (e228 <lfs_dir_commit+0x3e4>)
    df66:	9107      	str	r1, [sp, #28]
    df68:	2100      	movs	r1, #0
    df6a:	9106      	str	r1, [sp, #24]
    df6c:	9105      	str	r1, [sp, #20]
    df6e:	9104      	str	r1, [sp, #16]
    df70:	9103      	str	r1, [sp, #12]
    df72:	9102      	str	r1, [sp, #8]
    df74:	f8cd 9004 	str.w	r9, [sp, #4]
    df78:	9700      	str	r7, [sp, #0]
    df7a:	4629      	mov	r1, r5
    df7c:	4640      	mov	r0, r8
    df7e:	f7fe fdc1 	bl	cb04 <lfs_dir_traverse>
        if (err) {
    df82:	4606      	mov	r6, r0
    df84:	2800      	cmp	r0, #0
    df86:	d038      	beq.n	dffa <lfs_dir_commit+0x1b6>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
    df88:	f110 0f1c 	cmn.w	r0, #28
    df8c:	f000 80c6 	beq.w	e11c <lfs_dir_commit+0x2d8>
    df90:	f110 0f54 	cmn.w	r0, #84	; 0x54
    df94:	f000 80c2 	beq.w	e11c <lfs_dir_commit+0x2d8>
            *dir = olddir;
    df98:	ac16      	add	r4, sp, #88	; 0x58
    df9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    df9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    df9e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    dfa2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
    dfa6:	e164      	b.n	e272 <lfs_dir_commit+0x42e>
        int err = lfs_fs_pred(lfs, dir->pair, &pdir);
    dfa8:	aa0e      	add	r2, sp, #56	; 0x38
    dfaa:	4629      	mov	r1, r5
    dfac:	4640      	mov	r0, r8
    dfae:	f006 f9b4 	bl	1431a <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
    dfb2:	4606      	mov	r6, r0
    dfb4:	b150      	cbz	r0, dfcc <lfs_dir_commit+0x188>
    dfb6:	f110 0f02 	cmn.w	r0, #2
    dfba:	d007      	beq.n	dfcc <lfs_dir_commit+0x188>
            *dir = olddir;
    dfbc:	ac16      	add	r4, sp, #88	; 0x58
    dfbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    dfc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    dfc2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    dfc6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
    dfca:	e152      	b.n	e272 <lfs_dir_commit+0x42e>
        if (err != LFS_ERR_NOENT && pdir.split) {
    dfcc:	f116 0f02 	cmn.w	r6, #2
    dfd0:	d0ad      	beq.n	df2e <lfs_dir_commit+0xea>
    dfd2:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
    dfd6:	2b00      	cmp	r3, #0
    dfd8:	d0a9      	beq.n	df2e <lfs_dir_commit+0xea>
            err = lfs_dir_drop(lfs, &pdir, dir);
    dfda:	462a      	mov	r2, r5
    dfdc:	a90e      	add	r1, sp, #56	; 0x38
    dfde:	4640      	mov	r0, r8
    dfe0:	f000 f94e 	bl	e280 <lfs_dir_drop>
            if (err) {
    dfe4:	4606      	mov	r6, r0
    dfe6:	2800      	cmp	r0, #0
    dfe8:	d0a1      	beq.n	df2e <lfs_dir_commit+0xea>
                *dir = olddir;
    dfea:	ac16      	add	r4, sp, #88	; 0x58
    dfec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    dfee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    dff0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    dff4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                return err;
    dff8:	e13b      	b.n	e272 <lfs_dir_commit+0x42e>
        lfs_gstate_t delta = {0};
    dffa:	2300      	movs	r3, #0
    dffc:	930b      	str	r3, [sp, #44]	; 0x2c
    dffe:	930c      	str	r3, [sp, #48]	; 0x30
    e000:	930d      	str	r3, [sp, #52]	; 0x34
        lfs_gstate_xor(&delta, &lfs->gstate);
    e002:	f108 0430 	add.w	r4, r8, #48	; 0x30
    for (int i = 0; i < 3; i++) {
    e006:	4603      	mov	r3, r0
    e008:	e008      	b.n	e01c <lfs_dir_commit+0x1d8>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
    e00a:	a90b      	add	r1, sp, #44	; 0x2c
    e00c:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
    e010:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    e014:	4042      	eors	r2, r0
    e016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
    e01a:	3301      	adds	r3, #1
    e01c:	2b02      	cmp	r3, #2
    e01e:	ddf4      	ble.n	e00a <lfs_dir_commit+0x1c6>
        lfs_gstate_xor(&delta, &lfs->gdisk);
    e020:	f108 043c 	add.w	r4, r8, #60	; 0x3c
    for (int i = 0; i < 3; i++) {
    e024:	4633      	mov	r3, r6
    e026:	e008      	b.n	e03a <lfs_dir_commit+0x1f6>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
    e028:	a90b      	add	r1, sp, #44	; 0x2c
    e02a:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
    e02e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    e032:	4042      	eors	r2, r0
    e034:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
    e038:	3301      	adds	r3, #1
    e03a:	2b02      	cmp	r3, #2
    e03c:	ddf4      	ble.n	e028 <lfs_dir_commit+0x1e4>
        lfs_gstate_xor(&delta, &lfs->gdelta);
    e03e:	f108 0448 	add.w	r4, r8, #72	; 0x48
    for (int i = 0; i < 3; i++) {
    e042:	4633      	mov	r3, r6
    e044:	e008      	b.n	e058 <lfs_dir_commit+0x214>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
    e046:	a90b      	add	r1, sp, #44	; 0x2c
    e048:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
    e04c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    e050:	4042      	eors	r2, r0
    e052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
    e056:	3301      	adds	r3, #1
    e058:	2b02      	cmp	r3, #2
    e05a:	ddf4      	ble.n	e046 <lfs_dir_commit+0x202>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
    e05c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e05e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
    e062:	f023 0303 	bic.w	r3, r3, #3
    e066:	930b      	str	r3, [sp, #44]	; 0x2c
    for (int i = 0; i < 3; i++) {
    e068:	2e02      	cmp	r6, #2
    e06a:	dc07      	bgt.n	e07c <lfs_dir_commit+0x238>
        if (((uint32_t*)a)[i] != 0) {
    e06c:	ab20      	add	r3, sp, #128	; 0x80
    e06e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    e072:	f853 3c54 	ldr.w	r3, [r3, #-84]
    e076:	b993      	cbnz	r3, e09e <lfs_dir_commit+0x25a>
    for (int i = 0; i < 3; i++) {
    e078:	3601      	adds	r6, #1
    e07a:	e7f5      	b.n	e068 <lfs_dir_commit+0x224>
    return true;
    e07c:	2301      	movs	r3, #1
        if (!lfs_gstate_iszero(&delta)) {
    e07e:	bb33      	cbnz	r3, e0ce <lfs_dir_commit+0x28a>
            err = lfs_dir_getgstate(lfs, dir, &delta);
    e080:	aa0b      	add	r2, sp, #44	; 0x2c
    e082:	4629      	mov	r1, r5
    e084:	4640      	mov	r0, r8
    e086:	f7fe feed 	bl	ce64 <lfs_dir_getgstate>
            if (err) {
    e08a:	4606      	mov	r6, r0
    e08c:	b148      	cbz	r0, e0a2 <lfs_dir_commit+0x25e>
                *dir = olddir;
    e08e:	ac16      	add	r4, sp, #88	; 0x58
    e090:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    e092:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    e094:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    e098:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                return err;
    e09c:	e0e9      	b.n	e272 <lfs_dir_commit+0x42e>
            return false;
    e09e:	2300      	movs	r3, #0
    e0a0:	e7ed      	b.n	e07e <lfs_dir_commit+0x23a>
            err = lfs_dir_commitattr(lfs, &commit,
    e0a2:	ab0b      	add	r3, sp, #44	; 0x2c
    e0a4:	4a61      	ldr	r2, [pc, #388]	; (e22c <lfs_dir_commit+0x3e8>)
    e0a6:	a90e      	add	r1, sp, #56	; 0x38
    e0a8:	4640      	mov	r0, r8
    e0aa:	f006 fac6 	bl	1463a <lfs_dir_commitattr>
            if (err) {
    e0ae:	4606      	mov	r6, r0
    e0b0:	b168      	cbz	r0, e0ce <lfs_dir_commit+0x28a>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
    e0b2:	f110 0f1c 	cmn.w	r0, #28
    e0b6:	d031      	beq.n	e11c <lfs_dir_commit+0x2d8>
    e0b8:	f110 0f54 	cmn.w	r0, #84	; 0x54
    e0bc:	d02e      	beq.n	e11c <lfs_dir_commit+0x2d8>
                *dir = olddir;
    e0be:	ac16      	add	r4, sp, #88	; 0x58
    e0c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    e0c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    e0c4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    e0c8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                return err;
    e0cc:	e0d1      	b.n	e272 <lfs_dir_commit+0x42e>
        err = lfs_dir_commitcrc(lfs, &commit);
    e0ce:	a90e      	add	r1, sp, #56	; 0x38
    e0d0:	4640      	mov	r0, r8
    e0d2:	f006 fb24 	bl	1471e <lfs_dir_commitcrc>
        if (err) {
    e0d6:	4606      	mov	r6, r0
    e0d8:	b168      	cbz	r0, e0f6 <lfs_dir_commit+0x2b2>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
    e0da:	f110 0f1c 	cmn.w	r0, #28
    e0de:	d01d      	beq.n	e11c <lfs_dir_commit+0x2d8>
    e0e0:	f110 0f54 	cmn.w	r0, #84	; 0x54
    e0e4:	d01a      	beq.n	e11c <lfs_dir_commit+0x2d8>
            *dir = olddir;
    e0e6:	ac16      	add	r4, sp, #88	; 0x58
    e0e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    e0ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    e0ec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    e0f0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
    e0f4:	e0bd      	b.n	e272 <lfs_dir_commit+0x42e>
        dir->off = commit.off;
    e0f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e0f8:	60eb      	str	r3, [r5, #12]
        dir->etag = commit.ptag;
    e0fa:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e0fc:	612b      	str	r3, [r5, #16]
        lfs->gdisk = lfs->gstate;
    e0fe:	f108 033c 	add.w	r3, r8, #60	; 0x3c
    e102:	f108 0230 	add.w	r2, r8, #48	; 0x30
    e106:	ca07      	ldmia	r2, {r0, r1, r2}
    e108:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
    e10c:	2200      	movs	r2, #0
    e10e:	f8c8 2048 	str.w	r2, [r8, #72]	; 0x48
    e112:	f8c8 204c 	str.w	r2, [r8, #76]	; 0x4c
    e116:	f8c8 2050 	str.w	r2, [r8, #80]	; 0x50
    if (dir->erased || dir->count >= 0xff) {
    e11a:	e010      	b.n	e13e <lfs_dir_commit+0x2fa>
    rcache->block = LFS_BLOCK_NULL;
    e11c:	f04f 33ff 	mov.w	r3, #4294967295
    e120:	f8c8 3010 	str.w	r3, [r8, #16]
        int err = lfs_dir_compact(lfs, dir, attrs, attrcount,
    e124:	8aab      	ldrh	r3, [r5, #20]
    e126:	9302      	str	r3, [sp, #8]
    e128:	2300      	movs	r3, #0
    e12a:	9301      	str	r3, [sp, #4]
    e12c:	9500      	str	r5, [sp, #0]
    e12e:	464b      	mov	r3, r9
    e130:	463a      	mov	r2, r7
    e132:	4629      	mov	r1, r5
    e134:	4640      	mov	r0, r8
    e136:	f7ff fc8b 	bl	da50 <lfs_dir_compact>
        if (err) {
    e13a:	4606      	mov	r6, r0
    e13c:	b910      	cbnz	r0, e144 <lfs_dir_commit+0x300>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
    e13e:	f8d8 c028 	ldr.w	ip, [r8, #40]	; 0x28
    e142:	e04e      	b.n	e1e2 <lfs_dir_commit+0x39e>
            *dir = olddir;
    e144:	ac16      	add	r4, sp, #88	; 0x58
    e146:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    e148:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    e14a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    e14e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
    e152:	e08e      	b.n	e272 <lfs_dir_commit+0x42e>
                        d->id == lfs_tag_id(attrs[i].tag)) {
    e154:	f8bc 2004 	ldrh.w	r2, [ip, #4]
    return (tag & 0x000ffc00) >> 10;
    e158:	f3c6 2389 	ubfx	r3, r6, #10, #10
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
    e15c:	429a      	cmp	r2, r3
    e15e:	d110      	bne.n	e182 <lfs_dir_commit+0x33e>
                    d->m.pair[0] = LFS_BLOCK_NULL;
    e160:	f04f 33ff 	mov.w	r3, #4294967295
    e164:	f8cc 3008 	str.w	r3, [ip, #8]
                    d->m.pair[1] = LFS_BLOCK_NULL;
    e168:	f8cc 300c 	str.w	r3, [ip, #12]
            for (int i = 0; i < attrcount; i++) {
    e16c:	3101      	adds	r1, #1
    e16e:	4549      	cmp	r1, r9
    e170:	da35      	bge.n	e1de <lfs_dir_commit+0x39a>
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
    e172:	f857 6031 	ldr.w	r6, [r7, r1, lsl #3]
    return (tag & 0x7ff00000) >> 20;
    e176:	f3c6 540a 	ubfx	r4, r6, #20, #11
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
    e17a:	f240 43ff 	movw	r3, #1279	; 0x4ff
    e17e:	429c      	cmp	r4, r3
    e180:	d0e8      	beq.n	e154 <lfs_dir_commit+0x310>
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
    e182:	f240 43ff 	movw	r3, #1279	; 0x4ff
    e186:	429c      	cmp	r4, r3
    e188:	d016      	beq.n	e1b8 <lfs_dir_commit+0x374>
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
    e18a:	f240 4301 	movw	r3, #1025	; 0x401
    e18e:	429c      	cmp	r4, r3
    e190:	d1ec      	bne.n	e16c <lfs_dir_commit+0x328>
                        d->id >= lfs_tag_id(attrs[i].tag)) {
    e192:	f8bc 3004 	ldrh.w	r3, [ip, #4]
    return (tag & 0x000ffc00) >> 10;
    e196:	f3c6 2689 	ubfx	r6, r6, #10, #10
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
    e19a:	42b3      	cmp	r3, r6
    e19c:	d3e6      	bcc.n	e16c <lfs_dir_commit+0x328>
                    d->id += 1;
    e19e:	3301      	adds	r3, #1
    e1a0:	f8ac 3004 	strh.w	r3, [ip, #4]
                    if (d->type == LFS_TYPE_DIR) {
    e1a4:	f89c 3006 	ldrb.w	r3, [ip, #6]
    e1a8:	2b02      	cmp	r3, #2
    e1aa:	d1df      	bne.n	e16c <lfs_dir_commit+0x328>
                        ((lfs_dir_t*)d)->pos += 1;
    e1ac:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
    e1b0:	3301      	adds	r3, #1
    e1b2:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28
    e1b6:	e7d9      	b.n	e16c <lfs_dir_commit+0x328>
                        d->id > lfs_tag_id(attrs[i].tag)) {
    e1b8:	f8bc 3004 	ldrh.w	r3, [ip, #4]
    return (tag & 0x000ffc00) >> 10;
    e1bc:	f3c6 2289 	ubfx	r2, r6, #10, #10
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
    e1c0:	4293      	cmp	r3, r2
    e1c2:	d9e2      	bls.n	e18a <lfs_dir_commit+0x346>
                    d->id -= 1;
    e1c4:	3b01      	subs	r3, #1
    e1c6:	f8ac 3004 	strh.w	r3, [ip, #4]
                    if (d->type == LFS_TYPE_DIR) {
    e1ca:	f89c 3006 	ldrb.w	r3, [ip, #6]
    e1ce:	2b02      	cmp	r3, #2
    e1d0:	d1cc      	bne.n	e16c <lfs_dir_commit+0x328>
                        ((lfs_dir_t*)d)->pos -= 1;
    e1d2:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
    e1d6:	3b01      	subs	r3, #1
    e1d8:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28
    e1dc:	e7c6      	b.n	e16c <lfs_dir_commit+0x328>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
    e1de:	f8dc c000 	ldr.w	ip, [ip]
    e1e2:	f1bc 0f00 	cmp.w	ip, #0
    e1e6:	d01c      	beq.n	e222 <lfs_dir_commit+0x3de>
        if (&d->m != dir && lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
    e1e8:	f10c 0308 	add.w	r3, ip, #8
    e1ec:	42ab      	cmp	r3, r5
    e1ee:	d0f6      	beq.n	e1de <lfs_dir_commit+0x39a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    e1f0:	f8dc 3008 	ldr.w	r3, [ip, #8]
    e1f4:	9a16      	ldr	r2, [sp, #88]	; 0x58
    e1f6:	4293      	cmp	r3, r2
    e1f8:	d008      	beq.n	e20c <lfs_dir_commit+0x3c8>
    e1fa:	f8dc 000c 	ldr.w	r0, [ip, #12]
    e1fe:	9917      	ldr	r1, [sp, #92]	; 0x5c
    e200:	4288      	cmp	r0, r1
    e202:	d003      	beq.n	e20c <lfs_dir_commit+0x3c8>
    e204:	428b      	cmp	r3, r1
    e206:	d001      	beq.n	e20c <lfs_dir_commit+0x3c8>
    e208:	4282      	cmp	r2, r0
    e20a:	d1e8      	bne.n	e1de <lfs_dir_commit+0x39a>
            d->m = *dir;
    e20c:	f10c 0408 	add.w	r4, ip, #8
    e210:	462e      	mov	r6, r5
    e212:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    e214:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    e216:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    e21a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            for (int i = 0; i < attrcount; i++) {
    e21e:	2100      	movs	r1, #0
    e220:	e7a5      	b.n	e16e <lfs_dir_commit+0x32a>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
    e222:	f8d8 4028 	ldr.w	r4, [r8, #40]	; 0x28
    e226:	e004      	b.n	e232 <lfs_dir_commit+0x3ee>
    e228:	000146f7 	.word	0x000146f7
    e22c:	7ffffc0c 	.word	0x7ffffc0c
    e230:	6824      	ldr	r4, [r4, #0]
    e232:	b314      	cbz	r4, e27a <lfs_dir_commit+0x436>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    e234:	68a3      	ldr	r3, [r4, #8]
    e236:	9a16      	ldr	r2, [sp, #88]	; 0x58
    e238:	4293      	cmp	r3, r2
    e23a:	d007      	beq.n	e24c <lfs_dir_commit+0x408>
    e23c:	68e0      	ldr	r0, [r4, #12]
    e23e:	9917      	ldr	r1, [sp, #92]	; 0x5c
    e240:	4288      	cmp	r0, r1
    e242:	d003      	beq.n	e24c <lfs_dir_commit+0x408>
    e244:	428b      	cmp	r3, r1
    e246:	d001      	beq.n	e24c <lfs_dir_commit+0x408>
    e248:	4282      	cmp	r2, r0
    e24a:	d1f1      	bne.n	e230 <lfs_dir_commit+0x3ec>
            while (d->id >= d->m.count && d->m.split) {
    e24c:	88a3      	ldrh	r3, [r4, #4]
    e24e:	8ba2      	ldrh	r2, [r4, #28]
    e250:	4293      	cmp	r3, r2
    e252:	d3ed      	bcc.n	e230 <lfs_dir_commit+0x3ec>
    e254:	7fe1      	ldrb	r1, [r4, #31]
    e256:	2900      	cmp	r1, #0
    e258:	d0ea      	beq.n	e230 <lfs_dir_commit+0x3ec>
                d->id -= d->m.count;
    e25a:	1a9b      	subs	r3, r3, r2
    e25c:	80a3      	strh	r3, [r4, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
    e25e:	f104 0220 	add.w	r2, r4, #32
    e262:	f104 0108 	add.w	r1, r4, #8
    e266:	4640      	mov	r0, r8
    e268:	f006 f849 	bl	142fe <lfs_dir_fetch>
                if (err) {
    e26c:	4606      	mov	r6, r0
    e26e:	2800      	cmp	r0, #0
    e270:	d0ec      	beq.n	e24c <lfs_dir_commit+0x408>
}
    e272:	4630      	mov	r0, r6
    e274:	b021      	add	sp, #132	; 0x84
    e276:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
    e27a:	2600      	movs	r6, #0
    e27c:	e7f9      	b.n	e272 <lfs_dir_commit+0x42e>
    e27e:	bf00      	nop

0000e280 <lfs_dir_drop>:
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
    e280:	b570      	push	{r4, r5, r6, lr}
    e282:	b082      	sub	sp, #8
    e284:	4605      	mov	r5, r0
    e286:	460e      	mov	r6, r1
    e288:	4614      	mov	r4, r2
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
    e28a:	f100 0248 	add.w	r2, r0, #72	; 0x48
    e28e:	4621      	mov	r1, r4
    e290:	f7fe fde8 	bl	ce64 <lfs_dir_getgstate>
    if (err) {
    e294:	b108      	cbz	r0, e29a <lfs_dir_drop+0x1a>
}
    e296:	b002      	add	sp, #8
    e298:	bd70      	pop	{r4, r5, r6, pc}
    lfs_pair_tole32(tail->tail);
    e29a:	f104 0118 	add.w	r1, r4, #24
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
    e29e:	7de3      	ldrb	r3, [r4, #23]
    e2a0:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
    e2a4:	4b05      	ldr	r3, [pc, #20]	; (e2bc <lfs_dir_drop+0x3c>)
    e2a6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    e2aa:	9300      	str	r3, [sp, #0]
    e2ac:	9101      	str	r1, [sp, #4]
    e2ae:	2301      	movs	r3, #1
    e2b0:	466a      	mov	r2, sp
    e2b2:	4631      	mov	r1, r6
    e2b4:	4628      	mov	r0, r5
    e2b6:	f7ff fdc5 	bl	de44 <lfs_dir_commit>
    if (err) {
    e2ba:	e7ec      	b.n	e296 <lfs_dir_drop+0x16>
    e2bc:	000ffc08 	.word	0x000ffc08

0000e2c0 <lfs_fs_deorphan>:
static int lfs_fs_deorphan(lfs_t *lfs) {
    e2c0:	b570      	push	{r4, r5, r6, lr}
    e2c2:	b09e      	sub	sp, #120	; 0x78
    return lfs_tag_size(a->tag);
    e2c4:	6b03      	ldr	r3, [r0, #48]	; 0x30
    return tag & 0x000003ff;
    e2c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
    e2ca:	2b00      	cmp	r3, #0
    e2cc:	d07d      	beq.n	e3ca <lfs_fs_deorphan+0x10a>
    e2ce:	4606      	mov	r6, r0
    lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
    e2d0:	2300      	movs	r3, #0
    e2d2:	9314      	str	r3, [sp, #80]	; 0x50
    e2d4:	9315      	str	r3, [sp, #84]	; 0x54
    e2d6:	9316      	str	r3, [sp, #88]	; 0x58
    e2d8:	9317      	str	r3, [sp, #92]	; 0x5c
    e2da:	9318      	str	r3, [sp, #96]	; 0x60
    e2dc:	9319      	str	r3, [sp, #100]	; 0x64
    e2de:	931a      	str	r3, [sp, #104]	; 0x68
    e2e0:	2301      	movs	r3, #1
    e2e2:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    e2e6:	931b      	str	r3, [sp, #108]	; 0x6c
    while (!lfs_pair_isnull(pdir.tail)) {
    e2e8:	e05c      	b.n	e3a4 <lfs_fs_deorphan+0xe4>
            lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
    e2ea:	aa04      	add	r2, sp, #16
    e2ec:	a91a      	add	r1, sp, #104	; 0x68
    e2ee:	4630      	mov	r0, r6
    e2f0:	f7fe fbc2 	bl	ca78 <lfs_fs_parent>
            if (tag < 0 && tag != LFS_ERR_NOENT) {
    e2f4:	1e03      	subs	r3, r0, #0
    e2f6:	db23      	blt.n	e340 <lfs_fs_deorphan+0x80>
            if (tag == LFS_ERR_NOENT) {
    e2f8:	f113 0f02 	cmn.w	r3, #2
    e2fc:	d025      	beq.n	e34a <lfs_fs_deorphan+0x8a>
            lfs_stag_t res = lfs_dir_get(lfs, &parent,
    e2fe:	aa02      	add	r2, sp, #8
    e300:	9200      	str	r2, [sp, #0]
    e302:	4a34      	ldr	r2, [pc, #208]	; (e3d4 <lfs_fs_deorphan+0x114>)
    e304:	a904      	add	r1, sp, #16
    e306:	4630      	mov	r0, r6
    e308:	f006 f845 	bl	14396 <lfs_dir_get>
            if (res < 0) {
    e30c:	2800      	cmp	r0, #0
    e30e:	db30      	blt.n	e372 <lfs_fs_deorphan+0xb2>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
    e310:	9b02      	ldr	r3, [sp, #8]
    e312:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    e314:	4293      	cmp	r3, r2
    e316:	d021      	beq.n	e35c <lfs_fs_deorphan+0x9c>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
    e318:	991b      	ldr	r1, [sp, #108]	; 0x6c
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
    e31a:	4299      	cmp	r1, r3
    e31c:	d024      	beq.n	e368 <lfs_fs_deorphan+0xa8>
            if (!lfs_pair_sync(pair, pdir.tail)) {
    e31e:	f014 0f01 	tst.w	r4, #1
    e322:	d137      	bne.n	e394 <lfs_fs_deorphan+0xd4>
                err = lfs_dir_commit(lfs, &pdir, LFS_MKATTRS(
    e324:	4b2c      	ldr	r3, [pc, #176]	; (e3d8 <lfs_fs_deorphan+0x118>)
    e326:	931c      	str	r3, [sp, #112]	; 0x70
    e328:	ab02      	add	r3, sp, #8
    e32a:	931d      	str	r3, [sp, #116]	; 0x74
    e32c:	2301      	movs	r3, #1
    e32e:	aa1c      	add	r2, sp, #112	; 0x70
    e330:	a914      	add	r1, sp, #80	; 0x50
    e332:	4630      	mov	r0, r6
    e334:	f7ff fd86 	bl	de44 <lfs_dir_commit>
                if (err) {
    e338:	4604      	mov	r4, r0
    e33a:	2800      	cmp	r0, #0
    e33c:	d146      	bne.n	e3cc <lfs_fs_deorphan+0x10c>
    e33e:	e031      	b.n	e3a4 <lfs_fs_deorphan+0xe4>
            if (tag < 0 && tag != LFS_ERR_NOENT) {
    e340:	f113 0f02 	cmn.w	r3, #2
    e344:	d0d8      	beq.n	e2f8 <lfs_fs_deorphan+0x38>
                return tag;
    e346:	461c      	mov	r4, r3
    e348:	e040      	b.n	e3cc <lfs_fs_deorphan+0x10c>
                err = lfs_dir_drop(lfs, &pdir, &dir);
    e34a:	aa0c      	add	r2, sp, #48	; 0x30
    e34c:	a914      	add	r1, sp, #80	; 0x50
    e34e:	4630      	mov	r0, r6
    e350:	f7ff ff96 	bl	e280 <lfs_dir_drop>
                if (err) {
    e354:	4604      	mov	r4, r0
    e356:	2800      	cmp	r0, #0
    e358:	d138      	bne.n	e3cc <lfs_fs_deorphan+0x10c>
    e35a:	e023      	b.n	e3a4 <lfs_fs_deorphan+0xe4>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
    e35c:	9803      	ldr	r0, [sp, #12]
    e35e:	991b      	ldr	r1, [sp, #108]	; 0x6c
    e360:	4288      	cmp	r0, r1
    e362:	d1d9      	bne.n	e318 <lfs_fs_deorphan+0x58>
    e364:	2401      	movs	r4, #1
    e366:	e7da      	b.n	e31e <lfs_fs_deorphan+0x5e>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
    e368:	9b03      	ldr	r3, [sp, #12]
    e36a:	4293      	cmp	r3, r2
    e36c:	d1d7      	bne.n	e31e <lfs_fs_deorphan+0x5e>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
    e36e:	2401      	movs	r4, #1
    e370:	e7d5      	b.n	e31e <lfs_fs_deorphan+0x5e>
                return res;
    e372:	4604      	mov	r4, r0
    e374:	e02a      	b.n	e3cc <lfs_fs_deorphan+0x10c>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    e376:	2301      	movs	r3, #1
    e378:	e000      	b.n	e37c <lfs_fs_deorphan+0xbc>
    e37a:	2301      	movs	r3, #1
    while (!lfs_pair_isnull(pdir.tail)) {
    e37c:	b9e3      	cbnz	r3, e3b8 <lfs_fs_deorphan+0xf8>
        int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
    e37e:	aa1a      	add	r2, sp, #104	; 0x68
    e380:	a90c      	add	r1, sp, #48	; 0x30
    e382:	4630      	mov	r0, r6
    e384:	f005 ffbb 	bl	142fe <lfs_dir_fetch>
        if (err) {
    e388:	4604      	mov	r4, r0
    e38a:	b9f8      	cbnz	r0, e3cc <lfs_fs_deorphan+0x10c>
        if (!pdir.split) {
    e38c:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    e390:	2b00      	cmp	r3, #0
    e392:	d0aa      	beq.n	e2ea <lfs_fs_deorphan+0x2a>
        pdir = dir;
    e394:	ac14      	add	r4, sp, #80	; 0x50
    e396:	ad0c      	add	r5, sp, #48	; 0x30
    e398:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    e39a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    e39c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    e3a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    e3a4:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    e3a6:	f1b3 3fff 	cmp.w	r3, #4294967295
    e3aa:	d0e6      	beq.n	e37a <lfs_fs_deorphan+0xba>
    e3ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    e3ae:	f1b3 3fff 	cmp.w	r3, #4294967295
    e3b2:	d0e0      	beq.n	e376 <lfs_fs_deorphan+0xb6>
    e3b4:	2300      	movs	r3, #0
    e3b6:	e7e1      	b.n	e37c <lfs_fs_deorphan+0xbc>
    return lfs_tag_size(a->tag);
    e3b8:	f896 1030 	ldrb.w	r1, [r6, #48]	; 0x30
    lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
    e3bc:	4249      	negs	r1, r1
    e3be:	b249      	sxtb	r1, r1
    e3c0:	4630      	mov	r0, r6
    e3c2:	f005 fe42 	bl	1404a <lfs_fs_preporphans>
    return 0;
    e3c6:	2400      	movs	r4, #0
    e3c8:	e000      	b.n	e3cc <lfs_fs_deorphan+0x10c>
        return 0;
    e3ca:	2400      	movs	r4, #0
}
    e3cc:	4620      	mov	r0, r4
    e3ce:	b01e      	add	sp, #120	; 0x78
    e3d0:	bd70      	pop	{r4, r5, r6, pc}
    e3d2:	bf00      	nop
    e3d4:	7ffffc00 	.word	0x7ffffc00
    e3d8:	600ffc08 	.word	0x600ffc08

0000e3dc <lfs_mkdir>:
int lfs_mkdir(lfs_t *lfs, const char *path) {
    e3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    e3de:	b0ab      	sub	sp, #172	; 0xac
    e3e0:	4604      	mov	r4, r0
    e3e2:	9101      	str	r1, [sp, #4]
    int err = lfs_fs_forceconsistency(lfs);
    e3e4:	f006 fe58 	bl	15098 <lfs_fs_forceconsistency>
    if (err) {
    e3e8:	4603      	mov	r3, r0
    e3ea:	b110      	cbz	r0, e3f2 <lfs_mkdir+0x16>
}
    e3ec:	4618      	mov	r0, r3
    e3ee:	b02b      	add	sp, #172	; 0xac
    e3f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cwd.next = lfs->mlist;
    e3f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e3f4:	931c      	str	r3, [sp, #112]	; 0x70
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
    e3f6:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
    e3fa:	aa01      	add	r2, sp, #4
    e3fc:	a91e      	add	r1, sp, #120	; 0x78
    e3fe:	4620      	mov	r0, r4
    e400:	f7fe fd5a 	bl	ceb8 <lfs_dir_find>
    e404:	4603      	mov	r3, r0
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
    e406:	f110 0f02 	cmn.w	r0, #2
    e40a:	d12a      	bne.n	e462 <lfs_mkdir+0x86>
    e40c:	f8bd 106e 	ldrh.w	r1, [sp, #110]	; 0x6e
    e410:	f240 32ff 	movw	r2, #1023	; 0x3ff
    e414:	4291      	cmp	r1, r2
    e416:	d024      	beq.n	e462 <lfs_mkdir+0x86>
    lfs_size_t nlen = strlen(path);
    e418:	9801      	ldr	r0, [sp, #4]
    e41a:	f004 fb03 	bl	12a24 <strlen>
    e41e:	4607      	mov	r7, r0
    if (nlen > lfs->name_max) {
    e420:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    e422:	4283      	cmp	r3, r0
    e424:	d37c      	bcc.n	e520 <lfs_mkdir+0x144>
    lfs_alloc_ack(lfs);
    e426:	4620      	mov	r0, r4
    e428:	f005 fdee 	bl	14008 <lfs_alloc_ack>
    err = lfs_dir_alloc(lfs, &dir);
    e42c:	a913      	add	r1, sp, #76	; 0x4c
    e42e:	4620      	mov	r0, r4
    e430:	f006 fbac 	bl	14b8c <lfs_dir_alloc>
    if (err) {
    e434:	4603      	mov	r3, r0
    e436:	2800      	cmp	r0, #0
    e438:	d1d8      	bne.n	e3ec <lfs_mkdir+0x10>
    lfs_mdir_t pred = cwd.m;
    e43a:	ad0b      	add	r5, sp, #44	; 0x2c
    e43c:	ae1e      	add	r6, sp, #120	; 0x78
    e43e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    e440:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    e442:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    e446:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    while (pred.split) {
    e44a:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    e44e:	b16b      	cbz	r3, e46c <lfs_mkdir+0x90>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
    e450:	aa11      	add	r2, sp, #68	; 0x44
    e452:	a90b      	add	r1, sp, #44	; 0x2c
    e454:	4620      	mov	r0, r4
    e456:	f005 ff52 	bl	142fe <lfs_dir_fetch>
        if (err) {
    e45a:	4603      	mov	r3, r0
    e45c:	2800      	cmp	r0, #0
    e45e:	d0f4      	beq.n	e44a <lfs_mkdir+0x6e>
    e460:	e7c4      	b.n	e3ec <lfs_mkdir+0x10>
        return (err < 0) ? err : LFS_ERR_EXIST;
    e462:	2b00      	cmp	r3, #0
    e464:	dbc2      	blt.n	e3ec <lfs_mkdir+0x10>
    e466:	f06f 0310 	mvn.w	r3, #16
    e46a:	e7bf      	b.n	e3ec <lfs_mkdir+0x10>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
    e46c:	4b2e      	ldr	r3, [pc, #184]	; (e528 <lfs_mkdir+0x14c>)
    e46e:	9326      	str	r3, [sp, #152]	; 0x98
    e470:	ab11      	add	r3, sp, #68	; 0x44
    e472:	9327      	str	r3, [sp, #156]	; 0x9c
    e474:	2301      	movs	r3, #1
    e476:	aa26      	add	r2, sp, #152	; 0x98
    e478:	a913      	add	r1, sp, #76	; 0x4c
    e47a:	4620      	mov	r0, r4
    e47c:	f7ff fce2 	bl	de44 <lfs_dir_commit>
    if (err) {
    e480:	4603      	mov	r3, r0
    e482:	2800      	cmp	r0, #0
    e484:	d1b2      	bne.n	e3ec <lfs_mkdir+0x10>
    if (cwd.m.split) {
    e486:	f89d 308f 	ldrb.w	r3, [sp, #143]	; 0x8f
    e48a:	bb2b      	cbnz	r3, e4d8 <lfs_mkdir+0xfc>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
    e48c:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
    e490:	029b      	lsls	r3, r3, #10
    e492:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    e496:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    e49a:	9203      	str	r2, [sp, #12]
    e49c:	2200      	movs	r2, #0
    e49e:	9204      	str	r2, [sp, #16]
    e4a0:	431f      	orrs	r7, r3
    e4a2:	f447 1700 	orr.w	r7, r7, #2097152	; 0x200000
    e4a6:	9705      	str	r7, [sp, #20]
    e4a8:	9a01      	ldr	r2, [sp, #4]
    e4aa:	9206      	str	r2, [sp, #24]
    e4ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    e4b0:	f043 0308 	orr.w	r3, r3, #8
    e4b4:	9307      	str	r3, [sp, #28]
    e4b6:	ab13      	add	r3, sp, #76	; 0x4c
    e4b8:	9308      	str	r3, [sp, #32]
    e4ba:	f89d 308f 	ldrb.w	r3, [sp, #143]	; 0x8f
    e4be:	bb6b      	cbnz	r3, e51c <lfs_mkdir+0x140>
    e4c0:	4b19      	ldr	r3, [pc, #100]	; (e528 <lfs_mkdir+0x14c>)
    e4c2:	9309      	str	r3, [sp, #36]	; 0x24
    e4c4:	ab13      	add	r3, sp, #76	; 0x4c
    e4c6:	930a      	str	r3, [sp, #40]	; 0x28
    e4c8:	2304      	movs	r3, #4
    e4ca:	aa03      	add	r2, sp, #12
    e4cc:	a91e      	add	r1, sp, #120	; 0x78
    e4ce:	4620      	mov	r0, r4
    e4d0:	f7ff fcb8 	bl	de44 <lfs_dir_commit>
    e4d4:	4603      	mov	r3, r0
    if (err) {
    e4d6:	e789      	b.n	e3ec <lfs_mkdir+0x10>
        lfs_fs_preporphans(lfs, +1);
    e4d8:	2101      	movs	r1, #1
    e4da:	4620      	mov	r0, r4
    e4dc:	f005 fdb5 	bl	1404a <lfs_fs_preporphans>
        cwd.type = 0;
    e4e0:	2300      	movs	r3, #0
    e4e2:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
        cwd.id = 0;
    e4e6:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
        lfs->mlist = &cwd;
    e4ea:	ab1c      	add	r3, sp, #112	; 0x70
    e4ec:	62a3      	str	r3, [r4, #40]	; 0x28
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
    e4ee:	4b0e      	ldr	r3, [pc, #56]	; (e528 <lfs_mkdir+0x14c>)
    e4f0:	9328      	str	r3, [sp, #160]	; 0xa0
    e4f2:	ab13      	add	r3, sp, #76	; 0x4c
    e4f4:	9329      	str	r3, [sp, #164]	; 0xa4
    e4f6:	2301      	movs	r3, #1
    e4f8:	aa28      	add	r2, sp, #160	; 0xa0
    e4fa:	a90b      	add	r1, sp, #44	; 0x2c
    e4fc:	4620      	mov	r0, r4
    e4fe:	f7ff fca1 	bl	de44 <lfs_dir_commit>
        if (err) {
    e502:	4603      	mov	r3, r0
    e504:	b110      	cbz	r0, e50c <lfs_mkdir+0x130>
            lfs->mlist = cwd.next;
    e506:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    e508:	62a2      	str	r2, [r4, #40]	; 0x28
            return err;
    e50a:	e76f      	b.n	e3ec <lfs_mkdir+0x10>
        lfs->mlist = cwd.next;
    e50c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    e50e:	62a3      	str	r3, [r4, #40]	; 0x28
        lfs_fs_preporphans(lfs, -1);
    e510:	f04f 31ff 	mov.w	r1, #4294967295
    e514:	4620      	mov	r0, r4
    e516:	f005 fd98 	bl	1404a <lfs_fs_preporphans>
    e51a:	e7b7      	b.n	e48c <lfs_mkdir+0xb0>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
    e51c:	2300      	movs	r3, #0
    e51e:	e7d0      	b.n	e4c2 <lfs_mkdir+0xe6>
        return LFS_ERR_NAMETOOLONG;
    e520:	f06f 0323 	mvn.w	r3, #35	; 0x23
    e524:	e762      	b.n	e3ec <lfs_mkdir+0x10>
    e526:	bf00      	nop
    e528:	600ffc08 	.word	0x600ffc08

0000e52c <lfs_fs_relocate>:
        const lfs_block_t oldpair[2], lfs_block_t newpair[2]) {
    e52c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e530:	b090      	sub	sp, #64	; 0x40
    e532:	4607      	mov	r7, r0
    e534:	460c      	mov	r4, r1
    e536:	4615      	mov	r5, r2
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    e538:	680b      	ldr	r3, [r1, #0]
    e53a:	6a02      	ldr	r2, [r0, #32]
    e53c:	4293      	cmp	r3, r2
    e53e:	d007      	beq.n	e550 <lfs_fs_relocate+0x24>
    e540:	6848      	ldr	r0, [r1, #4]
    e542:	6a79      	ldr	r1, [r7, #36]	; 0x24
    e544:	4281      	cmp	r1, r0
    e546:	d003      	beq.n	e550 <lfs_fs_relocate+0x24>
    e548:	428b      	cmp	r3, r1
    e54a:	d001      	beq.n	e550 <lfs_fs_relocate+0x24>
    e54c:	4282      	cmp	r2, r0
    e54e:	d103      	bne.n	e558 <lfs_fs_relocate+0x2c>
        lfs->root[0] = newpair[0];
    e550:	682b      	ldr	r3, [r5, #0]
    e552:	623b      	str	r3, [r7, #32]
        lfs->root[1] = newpair[1];
    e554:	686b      	ldr	r3, [r5, #4]
    e556:	627b      	str	r3, [r7, #36]	; 0x24
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
    e558:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e55a:	e007      	b.n	e56c <lfs_fs_relocate+0x40>
            d->m.pair[0] = newpair[0];
    e55c:	682a      	ldr	r2, [r5, #0]
    e55e:	609a      	str	r2, [r3, #8]
            d->m.pair[1] = newpair[1];
    e560:	686a      	ldr	r2, [r5, #4]
    e562:	60da      	str	r2, [r3, #12]
        if (d->type == LFS_TYPE_DIR &&
    e564:	799a      	ldrb	r2, [r3, #6]
    e566:	2a02      	cmp	r2, #2
    e568:	d00e      	beq.n	e588 <lfs_fs_relocate+0x5c>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
    e56a:	681b      	ldr	r3, [r3, #0]
    e56c:	b1eb      	cbz	r3, e5aa <lfs_fs_relocate+0x7e>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    e56e:	6822      	ldr	r2, [r4, #0]
    e570:	6899      	ldr	r1, [r3, #8]
    e572:	4291      	cmp	r1, r2
    e574:	d0f2      	beq.n	e55c <lfs_fs_relocate+0x30>
    e576:	6860      	ldr	r0, [r4, #4]
    e578:	68de      	ldr	r6, [r3, #12]
    e57a:	42b0      	cmp	r0, r6
    e57c:	d0ee      	beq.n	e55c <lfs_fs_relocate+0x30>
    e57e:	42b2      	cmp	r2, r6
    e580:	d0ec      	beq.n	e55c <lfs_fs_relocate+0x30>
    e582:	4281      	cmp	r1, r0
    e584:	d1ee      	bne.n	e564 <lfs_fs_relocate+0x38>
    e586:	e7e9      	b.n	e55c <lfs_fs_relocate+0x30>
    e588:	6822      	ldr	r2, [r4, #0]
    e58a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    e58c:	428a      	cmp	r2, r1
    e58e:	d007      	beq.n	e5a0 <lfs_fs_relocate+0x74>
    e590:	6866      	ldr	r6, [r4, #4]
    e592:	6b18      	ldr	r0, [r3, #48]	; 0x30
    e594:	42b0      	cmp	r0, r6
    e596:	d003      	beq.n	e5a0 <lfs_fs_relocate+0x74>
    e598:	4282      	cmp	r2, r0
    e59a:	d001      	beq.n	e5a0 <lfs_fs_relocate+0x74>
    e59c:	428e      	cmp	r6, r1
    e59e:	d1e4      	bne.n	e56a <lfs_fs_relocate+0x3e>
            ((lfs_dir_t*)d)->head[0] = newpair[0];
    e5a0:	682a      	ldr	r2, [r5, #0]
    e5a2:	62da      	str	r2, [r3, #44]	; 0x2c
            ((lfs_dir_t*)d)->head[1] = newpair[1];
    e5a4:	686a      	ldr	r2, [r5, #4]
    e5a6:	631a      	str	r2, [r3, #48]	; 0x30
    e5a8:	e7df      	b.n	e56a <lfs_fs_relocate+0x3e>
    lfs_stag_t tag = lfs_fs_parent(lfs, oldpair, &parent);
    e5aa:	466a      	mov	r2, sp
    e5ac:	4621      	mov	r1, r4
    e5ae:	4638      	mov	r0, r7
    e5b0:	f7fe fa62 	bl	ca78 <lfs_fs_parent>
    if (tag < 0 && tag != LFS_ERR_NOENT) {
    e5b4:	1e06      	subs	r6, r0, #0
    e5b6:	db1a      	blt.n	e5ee <lfs_fs_relocate+0xc2>
    if (tag != LFS_ERR_NOENT) {
    e5b8:	f116 0f02 	cmn.w	r6, #2
    e5bc:	d058      	beq.n	e670 <lfs_fs_relocate+0x144>
        lfs_fs_preporphans(lfs, +1);
    e5be:	2101      	movs	r1, #1
    e5c0:	4638      	mov	r0, r7
    e5c2:	f005 fd42 	bl	1404a <lfs_fs_preporphans>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    e5c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
    e5c8:	0d1a      	lsrs	r2, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    e5ca:	f412 6fe0 	tst.w	r2, #1792	; 0x700
    e5ce:	d014      	beq.n	e5fa <lfs_fs_relocate+0xce>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    e5d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    e5d2:	9900      	ldr	r1, [sp, #0]
    e5d4:	428a      	cmp	r2, r1
    e5d6:	d02f      	beq.n	e638 <lfs_fs_relocate+0x10c>
    e5d8:	f8d7 c038 	ldr.w	ip, [r7, #56]	; 0x38
    e5dc:	9801      	ldr	r0, [sp, #4]
    e5de:	4584      	cmp	ip, r0
    e5e0:	d02c      	beq.n	e63c <lfs_fs_relocate+0x110>
    e5e2:	4282      	cmp	r2, r0
    e5e4:	d02c      	beq.n	e640 <lfs_fs_relocate+0x114>
    e5e6:	4561      	cmp	r1, ip
    e5e8:	d005      	beq.n	e5f6 <lfs_fs_relocate+0xca>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    e5ea:	2200      	movs	r2, #0
    e5ec:	e006      	b.n	e5fc <lfs_fs_relocate+0xd0>
    if (tag < 0 && tag != LFS_ERR_NOENT) {
    e5ee:	f116 0f02 	cmn.w	r6, #2
    e5f2:	d11d      	bne.n	e630 <lfs_fs_relocate+0x104>
    e5f4:	e7e0      	b.n	e5b8 <lfs_fs_relocate+0x8c>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    e5f6:	2201      	movs	r2, #1
    e5f8:	e000      	b.n	e5fc <lfs_fs_relocate+0xd0>
    e5fa:	2200      	movs	r2, #0
        if (lfs_gstate_hasmovehere(&lfs->gstate, parent.pair)) {
    e5fc:	bb12      	cbnz	r2, e644 <lfs_fs_relocate+0x118>
        uint16_t moveid = 0x3ff;
    e5fe:	f240 38ff 	movw	r8, #1023	; 0x3ff
        int err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
    e602:	2300      	movs	r3, #0
    e604:	9309      	str	r3, [sp, #36]	; 0x24
    e606:	f240 33ff 	movw	r3, #1023	; 0x3ff
    e60a:	4598      	cmp	r8, r3
    e60c:	d029      	beq.n	e662 <lfs_fs_relocate+0x136>
    e60e:	ea4f 2388 	mov.w	r3, r8, lsl #10
    e612:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
    e616:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    e61a:	9308      	str	r3, [sp, #32]
    e61c:	960a      	str	r6, [sp, #40]	; 0x28
    e61e:	950b      	str	r5, [sp, #44]	; 0x2c
    e620:	2302      	movs	r3, #2
    e622:	aa08      	add	r2, sp, #32
    e624:	4669      	mov	r1, sp
    e626:	4638      	mov	r0, r7
    e628:	f7ff fc0c 	bl	de44 <lfs_dir_commit>
        if (err) {
    e62c:	4606      	mov	r6, r0
    e62e:	b1d0      	cbz	r0, e666 <lfs_fs_relocate+0x13a>
}
    e630:	4630      	mov	r0, r6
    e632:	b010      	add	sp, #64	; 0x40
    e634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    e638:	2201      	movs	r2, #1
    e63a:	e7df      	b.n	e5fc <lfs_fs_relocate+0xd0>
    e63c:	2201      	movs	r2, #1
    e63e:	e7dd      	b.n	e5fc <lfs_fs_relocate+0xd0>
    e640:	2201      	movs	r2, #1
    e642:	e7db      	b.n	e5fc <lfs_fs_relocate+0xd0>
    return (tag & 0x000ffc00) >> 10;
    e644:	f3c3 2889 	ubfx	r8, r3, #10, #10
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
    e648:	2200      	movs	r2, #0
    e64a:	f240 31ff 	movw	r1, #1023	; 0x3ff
    e64e:	4638      	mov	r0, r7
    e650:	f7fd ff40 	bl	c4d4 <lfs_fs_prepmove>
    return (tag & 0x000ffc00) >> 10;
    e654:	f3c6 2389 	ubfx	r3, r6, #10, #10
            if (moveid < lfs_tag_id(tag)) {
    e658:	4598      	cmp	r8, r3
    e65a:	d2d2      	bcs.n	e602 <lfs_fs_relocate+0xd6>
                tag -= LFS_MKTAG(0, 1, 0);
    e65c:	f5a6 6680 	sub.w	r6, r6, #1024	; 0x400
    e660:	e7cf      	b.n	e602 <lfs_fs_relocate+0xd6>
        int err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
    e662:	2300      	movs	r3, #0
    e664:	e7d9      	b.n	e61a <lfs_fs_relocate+0xee>
        lfs_fs_preporphans(lfs, -1);
    e666:	f04f 31ff 	mov.w	r1, #4294967295
    e66a:	4638      	mov	r0, r7
    e66c:	f005 fced 	bl	1404a <lfs_fs_preporphans>
    int err = lfs_fs_pred(lfs, oldpair, &parent);
    e670:	466a      	mov	r2, sp
    e672:	4621      	mov	r1, r4
    e674:	4638      	mov	r0, r7
    e676:	f005 fe50 	bl	1431a <lfs_fs_pred>
    if (err && err != LFS_ERR_NOENT) {
    e67a:	4606      	mov	r6, r0
    e67c:	b110      	cbz	r0, e684 <lfs_fs_relocate+0x158>
    e67e:	f110 0f02 	cmn.w	r0, #2
    e682:	d1d5      	bne.n	e630 <lfs_fs_relocate+0x104>
    if (err != LFS_ERR_NOENT) {
    e684:	f116 0f02 	cmn.w	r6, #2
    e688:	d046      	beq.n	e718 <lfs_fs_relocate+0x1ec>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    e68a:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
    e68c:	0d23      	lsrs	r3, r4, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    e68e:	f413 6fe0 	tst.w	r3, #1792	; 0x700
    e692:	d00f      	beq.n	e6b4 <lfs_fs_relocate+0x188>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    e694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    e696:	9a00      	ldr	r2, [sp, #0]
    e698:	4293      	cmp	r3, r2
    e69a:	d02c      	beq.n	e6f6 <lfs_fs_relocate+0x1ca>
    e69c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    e69e:	9901      	ldr	r1, [sp, #4]
    e6a0:	4281      	cmp	r1, r0
    e6a2:	d02a      	beq.n	e6fa <lfs_fs_relocate+0x1ce>
    e6a4:	4299      	cmp	r1, r3
    e6a6:	d02a      	beq.n	e6fe <lfs_fs_relocate+0x1d2>
    e6a8:	4290      	cmp	r0, r2
    e6aa:	d001      	beq.n	e6b0 <lfs_fs_relocate+0x184>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    e6ac:	2300      	movs	r3, #0
    e6ae:	e002      	b.n	e6b6 <lfs_fs_relocate+0x18a>
    e6b0:	2301      	movs	r3, #1
    e6b2:	e000      	b.n	e6b6 <lfs_fs_relocate+0x18a>
    e6b4:	2300      	movs	r3, #0
        if (lfs_gstate_hasmovehere(&lfs->gstate, parent.pair)) {
    e6b6:	bb23      	cbnz	r3, e702 <lfs_fs_relocate+0x1d6>
        uint16_t moveid = 0x3ff;
    e6b8:	f240 34ff 	movw	r4, #1023	; 0x3ff
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
    e6bc:	2300      	movs	r3, #0
    e6be:	930d      	str	r3, [sp, #52]	; 0x34
    e6c0:	f240 33ff 	movw	r3, #1023	; 0x3ff
    e6c4:	429c      	cmp	r4, r3
    e6c6:	d025      	beq.n	e714 <lfs_fs_relocate+0x1e8>
    e6c8:	02a3      	lsls	r3, r4, #10
    e6ca:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
    e6ce:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    e6d2:	930c      	str	r3, [sp, #48]	; 0x30
    e6d4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    e6d8:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
    e6dc:	4b0f      	ldr	r3, [pc, #60]	; (e71c <lfs_fs_relocate+0x1f0>)
    e6de:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    e6e2:	930e      	str	r3, [sp, #56]	; 0x38
    e6e4:	950f      	str	r5, [sp, #60]	; 0x3c
    e6e6:	2302      	movs	r3, #2
    e6e8:	aa0c      	add	r2, sp, #48	; 0x30
    e6ea:	4669      	mov	r1, sp
    e6ec:	4638      	mov	r0, r7
    e6ee:	f7ff fba9 	bl	de44 <lfs_dir_commit>
    e6f2:	4606      	mov	r6, r0
        if (err) {
    e6f4:	e79c      	b.n	e630 <lfs_fs_relocate+0x104>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    e6f6:	2301      	movs	r3, #1
    e6f8:	e7dd      	b.n	e6b6 <lfs_fs_relocate+0x18a>
    e6fa:	2301      	movs	r3, #1
    e6fc:	e7db      	b.n	e6b6 <lfs_fs_relocate+0x18a>
    e6fe:	2301      	movs	r3, #1
    e700:	e7d9      	b.n	e6b6 <lfs_fs_relocate+0x18a>
    return (tag & 0x000ffc00) >> 10;
    e702:	f3c4 2489 	ubfx	r4, r4, #10, #10
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
    e706:	2200      	movs	r2, #0
    e708:	f240 31ff 	movw	r1, #1023	; 0x3ff
    e70c:	4638      	mov	r0, r7
    e70e:	f7fd fee1 	bl	c4d4 <lfs_fs_prepmove>
    e712:	e7d3      	b.n	e6bc <lfs_fs_relocate+0x190>
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
    e714:	2300      	movs	r3, #0
    e716:	e7dc      	b.n	e6d2 <lfs_fs_relocate+0x1a6>
    return 0;
    e718:	2600      	movs	r6, #0
    e71a:	e789      	b.n	e630 <lfs_fs_relocate+0x104>
    e71c:	000ffc08 	.word	0x000ffc08

0000e720 <lfs_file_opencfg>:
        const struct lfs_file_config *cfg) {
    e720:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e724:	b08b      	sub	sp, #44	; 0x2c
    e726:	4607      	mov	r7, r0
    e728:	460c      	mov	r4, r1
    e72a:	9203      	str	r2, [sp, #12]
    e72c:	461e      	mov	r6, r3
    if ((flags & 3) != LFS_O_RDONLY) {
    e72e:	f003 0303 	and.w	r3, r3, #3
    e732:	2b01      	cmp	r3, #1
    e734:	d005      	beq.n	e742 <lfs_file_opencfg+0x22>
        int err = lfs_fs_forceconsistency(lfs);
    e736:	f006 fcaf 	bl	15098 <lfs_fs_forceconsistency>
        if (err) {
    e73a:	4605      	mov	r5, r0
    e73c:	2800      	cmp	r0, #0
    e73e:	f040 8109 	bne.w	e954 <lfs_file_opencfg+0x234>
    file->cfg = cfg;
    e742:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e744:	6523      	str	r3, [r4, #80]	; 0x50
    file->flags = flags | LFS_F_OPENED;
    e746:	f446 1300 	orr.w	r3, r6, #2097152	; 0x200000
    e74a:	6323      	str	r3, [r4, #48]	; 0x30
    file->pos = 0;
    e74c:	2300      	movs	r3, #0
    e74e:	6363      	str	r3, [r4, #52]	; 0x34
    file->off = 0;
    e750:	63e3      	str	r3, [r4, #60]	; 0x3c
    file->cache.buffer = NULL;
    e752:	64e3      	str	r3, [r4, #76]	; 0x4c
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
    e754:	f104 0808 	add.w	r8, r4, #8
    e758:	1d23      	adds	r3, r4, #4
    e75a:	aa03      	add	r2, sp, #12
    e75c:	4641      	mov	r1, r8
    e75e:	4638      	mov	r0, r7
    e760:	f7fe fbaa 	bl	ceb8 <lfs_dir_find>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
    e764:	1e05      	subs	r5, r0, #0
    e766:	db21      	blt.n	e7ac <lfs_file_opencfg+0x8c>
    file->type = LFS_TYPE_REG;
    e768:	2301      	movs	r3, #1
    e76a:	71a3      	strb	r3, [r4, #6]
    file->next = (lfs_file_t*)lfs->mlist;
    e76c:	6abb      	ldr	r3, [r7, #40]	; 0x28
    e76e:	6023      	str	r3, [r4, #0]
    lfs->mlist = (struct lfs_mlist*)file;
    e770:	62bc      	str	r4, [r7, #40]	; 0x28
    if (tag == LFS_ERR_NOENT) {
    e772:	f115 0f02 	cmn.w	r5, #2
    e776:	d023      	beq.n	e7c0 <lfs_file_opencfg+0xa0>
    } else if (flags & LFS_O_EXCL) {
    e778:	f416 7f00 	tst.w	r6, #512	; 0x200
    e77c:	f040 80e0 	bne.w	e940 <lfs_file_opencfg+0x220>
    return (tag & 0x7ff00000) >> 20;
    e780:	f3c5 550a 	ubfx	r5, r5, #20, #11
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
    e784:	2d01      	cmp	r5, #1
    e786:	f040 80e9 	bne.w	e95c <lfs_file_opencfg+0x23c>
    } else if (flags & LFS_O_TRUNC) {
    e78a:	f416 6f80 	tst.w	r6, #1024	; 0x400
    e78e:	d046      	beq.n	e81e <lfs_file_opencfg+0xfe>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
    e790:	f8b4 9004 	ldrh.w	r9, [r4, #4]
    e794:	ea4f 2989 	mov.w	r9, r9, lsl #10
    e798:	f049 5900 	orr.w	r9, r9, #536870912	; 0x20000000
    e79c:	f449 1980 	orr.w	r9, r9, #1048576	; 0x100000
        file->flags |= LFS_F_DIRTY;
    e7a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e7a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    e7a6:	6323      	str	r3, [r4, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
    e7a8:	2600      	movs	r6, #0
    e7aa:	e05e      	b.n	e86a <lfs_file_opencfg+0x14a>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
    e7ac:	f115 0f02 	cmn.w	r5, #2
    e7b0:	f040 80c8 	bne.w	e944 <lfs_file_opencfg+0x224>
    e7b4:	88a2      	ldrh	r2, [r4, #4]
    e7b6:	f240 33ff 	movw	r3, #1023	; 0x3ff
    e7ba:	429a      	cmp	r2, r3
    e7bc:	d1d4      	bne.n	e768 <lfs_file_opencfg+0x48>
    e7be:	e0c1      	b.n	e944 <lfs_file_opencfg+0x224>
        if (!(flags & LFS_O_CREAT)) {
    e7c0:	f416 7f80 	tst.w	r6, #256	; 0x100
    e7c4:	f000 80be 	beq.w	e944 <lfs_file_opencfg+0x224>
        lfs_size_t nlen = strlen(path);
    e7c8:	9803      	ldr	r0, [sp, #12]
    e7ca:	f004 f92b 	bl	12a24 <strlen>
        if (nlen > lfs->name_max) {
    e7ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    e7d0:	4283      	cmp	r3, r0
    e7d2:	d202      	bcs.n	e7da <lfs_file_opencfg+0xba>
            err = LFS_ERR_NAMETOOLONG;
    e7d4:	f06f 0523 	mvn.w	r5, #35	; 0x23
    e7d8:	e0b4      	b.n	e944 <lfs_file_opencfg+0x224>
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
    e7da:	2300      	movs	r3, #0
    e7dc:	9305      	str	r3, [sp, #20]
    e7de:	9309      	str	r3, [sp, #36]	; 0x24
    e7e0:	88a3      	ldrh	r3, [r4, #4]
    e7e2:	029b      	lsls	r3, r3, #10
    e7e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    e7e8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    e7ec:	9204      	str	r2, [sp, #16]
    e7ee:	4318      	orrs	r0, r3
    e7f0:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    e7f4:	9006      	str	r0, [sp, #24]
    e7f6:	9a03      	ldr	r2, [sp, #12]
    e7f8:	9207      	str	r2, [sp, #28]
    e7fa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    e7fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    e802:	9308      	str	r3, [sp, #32]
    e804:	2303      	movs	r3, #3
    e806:	aa04      	add	r2, sp, #16
    e808:	4641      	mov	r1, r8
    e80a:	4638      	mov	r0, r7
    e80c:	f7ff fb1a 	bl	de44 <lfs_dir_commit>
        if (err) {
    e810:	b910      	cbnz	r0, e818 <lfs_file_opencfg+0xf8>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
    e812:	f8df 915c 	ldr.w	r9, [pc, #348]	; e970 <lfs_file_opencfg+0x250>
    e816:	e7c7      	b.n	e7a8 <lfs_file_opencfg+0x88>
            err = LFS_ERR_NAMETOOLONG;
    e818:	f06f 0523 	mvn.w	r5, #35	; 0x23
    e81c:	e092      	b.n	e944 <lfs_file_opencfg+0x224>
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
    e81e:	88a3      	ldrh	r3, [r4, #4]
    e820:	029b      	lsls	r3, r3, #10
    e822:	f104 0228 	add.w	r2, r4, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
    e826:	9200      	str	r2, [sp, #0]
    e828:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    e82c:	f043 0308 	orr.w	r3, r3, #8
    e830:	4a4d      	ldr	r2, [pc, #308]	; (e968 <lfs_file_opencfg+0x248>)
    e832:	4641      	mov	r1, r8
    e834:	4638      	mov	r0, r7
    e836:	f005 fdae 	bl	14396 <lfs_dir_get>
        if (tag < 0) {
    e83a:	f1b0 0900 	subs.w	r9, r0, #0
    e83e:	dab3      	bge.n	e7a8 <lfs_file_opencfg+0x88>
            err = tag;
    e840:	464d      	mov	r5, r9
    e842:	e07f      	b.n	e944 <lfs_file_opencfg+0x224>
        if ((file->flags & 3) != LFS_O_RDONLY) {
    e844:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e846:	f003 0203 	and.w	r2, r3, #3
    e84a:	2a01      	cmp	r2, #1
    e84c:	d00c      	beq.n	e868 <lfs_file_opencfg+0x148>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
    e84e:	6d22      	ldr	r2, [r4, #80]	; 0x50
    e850:	6852      	ldr	r2, [r2, #4]
    e852:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    e856:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    e85a:	6891      	ldr	r1, [r2, #8]
    e85c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    e85e:	4291      	cmp	r1, r2
    e860:	d87f      	bhi.n	e962 <lfs_file_opencfg+0x242>
            file->flags |= LFS_F_DIRTY;
    e862:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    e866:	6323      	str	r3, [r4, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
    e868:	3601      	adds	r6, #1
    e86a:	6d22      	ldr	r2, [r4, #80]	; 0x50
    e86c:	6893      	ldr	r3, [r2, #8]
    e86e:	42b3      	cmp	r3, r6
    e870:	d920      	bls.n	e8b4 <lfs_file_opencfg+0x194>
        if ((file->flags & 3) != LFS_O_WRONLY) {
    e872:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e874:	f003 0303 	and.w	r3, r3, #3
    e878:	2b02      	cmp	r3, #2
    e87a:	d0e3      	beq.n	e844 <lfs_file_opencfg+0x124>
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
    e87c:	6853      	ldr	r3, [r2, #4]
    e87e:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    e882:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    e886:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
    e88a:	f503 7240 	add.w	r2, r3, #768	; 0x300
    e88e:	88a3      	ldrh	r3, [r4, #4]
    e890:	029b      	lsls	r3, r3, #10
    e892:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    e896:	688a      	ldr	r2, [r1, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
    e898:	6849      	ldr	r1, [r1, #4]
    e89a:	9100      	str	r1, [sp, #0]
    e89c:	4313      	orrs	r3, r2
    e89e:	4a33      	ldr	r2, [pc, #204]	; (e96c <lfs_file_opencfg+0x24c>)
    e8a0:	4641      	mov	r1, r8
    e8a2:	4638      	mov	r0, r7
    e8a4:	f005 fd77 	bl	14396 <lfs_dir_get>
            if (res < 0 && res != LFS_ERR_NOENT) {
    e8a8:	1e05      	subs	r5, r0, #0
    e8aa:	dacb      	bge.n	e844 <lfs_file_opencfg+0x124>
    e8ac:	f115 0f02 	cmn.w	r5, #2
    e8b0:	d0c8      	beq.n	e844 <lfs_file_opencfg+0x124>
    e8b2:	e047      	b.n	e944 <lfs_file_opencfg+0x224>
    if (file->cfg->buffer) {
    e8b4:	6813      	ldr	r3, [r2, #0]
    e8b6:	b18b      	cbz	r3, e8dc <lfs_file_opencfg+0x1bc>
        file->cache.buffer = file->cfg->buffer;
    e8b8:	64e3      	str	r3, [r4, #76]	; 0x4c
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
    e8ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    e8bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    e8be:	21ff      	movs	r1, #255	; 0xff
    e8c0:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    e8c2:	f004 f921 	bl	12b08 <memset>
    pcache->block = LFS_BLOCK_NULL;
    e8c6:	f04f 33ff 	mov.w	r3, #4294967295
    e8ca:	6423      	str	r3, [r4, #64]	; 0x40
    return (tag & 0x7ff00000) >> 20;
    e8cc:	f3c9 520a 	ubfx	r2, r9, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
    e8d0:	f240 2301 	movw	r3, #513	; 0x201
    e8d4:	429a      	cmp	r2, r3
    e8d6:	d00b      	beq.n	e8f0 <lfs_file_opencfg+0x1d0>
    return 0;
    e8d8:	2500      	movs	r5, #0
    e8da:	e03b      	b.n	e954 <lfs_file_opencfg+0x234>
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
    e8dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
#ifndef LFS_NO_MALLOC
    return malloc(size);
    e8de:	6a98      	ldr	r0, [r3, #40]	; 0x28
    e8e0:	f7f7 fa9e 	bl	5e20 <malloc>
    e8e4:	64e0      	str	r0, [r4, #76]	; 0x4c
        if (!file->cache.buffer) {
    e8e6:	2800      	cmp	r0, #0
    e8e8:	d1e7      	bne.n	e8ba <lfs_file_opencfg+0x19a>
            err = LFS_ERR_NOMEM;
    e8ea:	f06f 050b 	mvn.w	r5, #11
    e8ee:	e029      	b.n	e944 <lfs_file_opencfg+0x224>
        file->ctz.head = LFS_BLOCK_INLINE;
    e8f0:	f06f 0101 	mvn.w	r1, #1
    e8f4:	62a1      	str	r1, [r4, #40]	; 0x28
    return tag & 0x000003ff;
    e8f6:	f3c9 0209 	ubfx	r2, r9, #0, #10
        file->ctz.size = lfs_tag_size(tag);
    e8fa:	62e2      	str	r2, [r4, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
    e8fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e8fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    e902:	6323      	str	r3, [r4, #48]	; 0x30
        file->cache.block = file->ctz.head;
    e904:	6421      	str	r1, [r4, #64]	; 0x40
        file->cache.off = 0;
    e906:	2300      	movs	r3, #0
    e908:	6463      	str	r3, [r4, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
    e90a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    e90c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    e90e:	64a3      	str	r3, [r4, #72]	; 0x48
        if (file->ctz.size > 0) {
    e910:	b90a      	cbnz	r2, e916 <lfs_file_opencfg+0x1f6>
    return 0;
    e912:	2500      	movs	r5, #0
    e914:	e01e      	b.n	e954 <lfs_file_opencfg+0x234>
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
    e916:	88a2      	ldrh	r2, [r4, #4]
    return (a < b) ? a : b;
    e918:	f240 31fe 	movw	r1, #1022	; 0x3fe
    e91c:	428b      	cmp	r3, r1
    e91e:	bf28      	it	cs
    e920:	460b      	movcs	r3, r1
    e922:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
                    file->cache.buffer);
    e926:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
    e928:	9200      	str	r2, [sp, #0]
    e92a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    e92e:	4a0e      	ldr	r2, [pc, #56]	; (e968 <lfs_file_opencfg+0x248>)
    e930:	4641      	mov	r1, r8
    e932:	4638      	mov	r0, r7
    e934:	f005 fd2f 	bl	14396 <lfs_dir_get>
            if (res < 0) {
    e938:	1e05      	subs	r5, r0, #0
    e93a:	db03      	blt.n	e944 <lfs_file_opencfg+0x224>
    return 0;
    e93c:	2500      	movs	r5, #0
    e93e:	e009      	b.n	e954 <lfs_file_opencfg+0x234>
        err = LFS_ERR_EXIST;
    e940:	f06f 0510 	mvn.w	r5, #16
    file->flags |= LFS_F_ERRED;
    e944:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e946:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    e94a:	6323      	str	r3, [r4, #48]	; 0x30
    lfs_file_close(lfs, file);
    e94c:	4621      	mov	r1, r4
    e94e:	4638      	mov	r0, r7
    e950:	f006 fc06 	bl	15160 <lfs_file_close>
}
    e954:	4628      	mov	r0, r5
    e956:	b00b      	add	sp, #44	; 0x2c
    e958:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        err = LFS_ERR_ISDIR;
    e95c:	f06f 0514 	mvn.w	r5, #20
    e960:	e7f0      	b.n	e944 <lfs_file_opencfg+0x224>
                err = LFS_ERR_NOSPC;
    e962:	f06f 051b 	mvn.w	r5, #27
    e966:	e7ed      	b.n	e944 <lfs_file_opencfg+0x224>
    e968:	700ffc00 	.word	0x700ffc00
    e96c:	7ffffc00 	.word	0x7ffffc00
    e970:	20100000 	.word	0x20100000

0000e974 <lfs_remove>:
int lfs_remove(lfs_t *lfs, const char *path) {
    e974:	b570      	push	{r4, r5, r6, lr}
    e976:	b09a      	sub	sp, #104	; 0x68
    e978:	4604      	mov	r4, r0
    e97a:	9103      	str	r1, [sp, #12]
    int err = lfs_fs_forceconsistency(lfs);
    e97c:	f006 fb8c 	bl	15098 <lfs_fs_forceconsistency>
    if (err) {
    e980:	4603      	mov	r3, r0
    e982:	b110      	cbz	r0, e98a <lfs_remove+0x16>
}
    e984:	4618      	mov	r0, r3
    e986:	b01a      	add	sp, #104	; 0x68
    e988:	bd70      	pop	{r4, r5, r6, pc}
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
    e98a:	2300      	movs	r3, #0
    e98c:	aa03      	add	r2, sp, #12
    e98e:	a910      	add	r1, sp, #64	; 0x40
    e990:	4620      	mov	r0, r4
    e992:	f7fe fa91 	bl	ceb8 <lfs_dir_find>
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
    e996:	1e03      	subs	r3, r0, #0
    e998:	db34      	blt.n	ea04 <lfs_remove+0x90>
    return (tag & 0x000ffc00) >> 10;
    e99a:	f3c3 2589 	ubfx	r5, r3, #10, #10
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
    e99e:	f240 32ff 	movw	r2, #1023	; 0x3ff
    e9a2:	4295      	cmp	r5, r2
    e9a4:	d02e      	beq.n	ea04 <lfs_remove+0x90>
    dir.next = lfs->mlist;
    e9a6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    e9a8:	9206      	str	r2, [sp, #24]
    return (tag & 0x7ff00000) >> 20;
    e9aa:	f3c3 560a 	ubfx	r6, r3, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
    e9ae:	2e02      	cmp	r6, #2
    e9b0:	d02d      	beq.n	ea0e <lfs_remove+0x9a>
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
    e9b2:	2300      	movs	r3, #0
    e9b4:	9319      	str	r3, [sp, #100]	; 0x64
    e9b6:	02ad      	lsls	r5, r5, #10
    e9b8:	f045 459f 	orr.w	r5, r5, #1333788672	; 0x4f800000
    e9bc:	f445 05e0 	orr.w	r5, r5, #7340032	; 0x700000
    e9c0:	9518      	str	r5, [sp, #96]	; 0x60
    e9c2:	2301      	movs	r3, #1
    e9c4:	aa18      	add	r2, sp, #96	; 0x60
    e9c6:	a910      	add	r1, sp, #64	; 0x40
    e9c8:	4620      	mov	r0, r4
    e9ca:	f7ff fa3b 	bl	de44 <lfs_dir_commit>
    if (err) {
    e9ce:	4603      	mov	r3, r0
    e9d0:	2800      	cmp	r0, #0
    e9d2:	d145      	bne.n	ea60 <lfs_remove+0xec>
    lfs->mlist = dir.next;
    e9d4:	9a06      	ldr	r2, [sp, #24]
    e9d6:	62a2      	str	r2, [r4, #40]	; 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
    e9d8:	2e02      	cmp	r6, #2
    e9da:	d1d3      	bne.n	e984 <lfs_remove+0x10>
        lfs_fs_preporphans(lfs, -1);
    e9dc:	f04f 31ff 	mov.w	r1, #4294967295
    e9e0:	4620      	mov	r0, r4
    e9e2:	f005 fb32 	bl	1404a <lfs_fs_preporphans>
        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
    e9e6:	aa10      	add	r2, sp, #64	; 0x40
    e9e8:	a908      	add	r1, sp, #32
    e9ea:	4620      	mov	r0, r4
    e9ec:	f005 fc95 	bl	1431a <lfs_fs_pred>
        if (err) {
    e9f0:	4603      	mov	r3, r0
    e9f2:	2800      	cmp	r0, #0
    e9f4:	d1c6      	bne.n	e984 <lfs_remove+0x10>
        err = lfs_dir_drop(lfs, &cwd, &dir.m);
    e9f6:	aa08      	add	r2, sp, #32
    e9f8:	a910      	add	r1, sp, #64	; 0x40
    e9fa:	4620      	mov	r0, r4
    e9fc:	f7ff fc40 	bl	e280 <lfs_dir_drop>
    ea00:	4603      	mov	r3, r0
        if (err) {
    ea02:	e7bf      	b.n	e984 <lfs_remove+0x10>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
    ea04:	2b00      	cmp	r3, #0
    ea06:	dbbd      	blt.n	e984 <lfs_remove+0x10>
    ea08:	f06f 0315 	mvn.w	r3, #21
    ea0c:	e7ba      	b.n	e984 <lfs_remove+0x10>
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
    ea0e:	02ab      	lsls	r3, r5, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
    ea10:	aa04      	add	r2, sp, #16
    ea12:	9200      	str	r2, [sp, #0]
    ea14:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    ea18:	f043 0308 	orr.w	r3, r3, #8
    ea1c:	4a12      	ldr	r2, [pc, #72]	; (ea68 <lfs_remove+0xf4>)
    ea1e:	a910      	add	r1, sp, #64	; 0x40
    ea20:	4620      	mov	r0, r4
    ea22:	f005 fcb8 	bl	14396 <lfs_dir_get>
        if (res < 0) {
    ea26:	1e03      	subs	r3, r0, #0
    ea28:	dbac      	blt.n	e984 <lfs_remove+0x10>
        err = lfs_dir_fetch(lfs, &dir.m, pair);
    ea2a:	aa04      	add	r2, sp, #16
    ea2c:	a908      	add	r1, sp, #32
    ea2e:	4620      	mov	r0, r4
    ea30:	f005 fc65 	bl	142fe <lfs_dir_fetch>
        if (err) {
    ea34:	4603      	mov	r3, r0
    ea36:	2800      	cmp	r0, #0
    ea38:	d1a4      	bne.n	e984 <lfs_remove+0x10>
        if (dir.m.count > 0 || dir.m.split) {
    ea3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    ea3c:	f433 037f 	bics.w	r3, r3, #16711680	; 0xff0000
    ea40:	d002      	beq.n	ea48 <lfs_remove+0xd4>
            return LFS_ERR_NOTEMPTY;
    ea42:	f06f 0326 	mvn.w	r3, #38	; 0x26
    ea46:	e79d      	b.n	e984 <lfs_remove+0x10>
        lfs_fs_preporphans(lfs, +1);
    ea48:	2101      	movs	r1, #1
    ea4a:	4620      	mov	r0, r4
    ea4c:	f005 fafd 	bl	1404a <lfs_fs_preporphans>
        dir.type = 0;
    ea50:	2300      	movs	r3, #0
    ea52:	f88d 301e 	strb.w	r3, [sp, #30]
        dir.id = 0;
    ea56:	f8ad 301c 	strh.w	r3, [sp, #28]
        lfs->mlist = &dir;
    ea5a:	ab06      	add	r3, sp, #24
    ea5c:	62a3      	str	r3, [r4, #40]	; 0x28
    ea5e:	e7a8      	b.n	e9b2 <lfs_remove+0x3e>
        lfs->mlist = dir.next;
    ea60:	9a06      	ldr	r2, [sp, #24]
    ea62:	62a2      	str	r2, [r4, #40]	; 0x28
        return err;
    ea64:	e78e      	b.n	e984 <lfs_remove+0x10>
    ea66:	bf00      	nop
    ea68:	700ffc00 	.word	0x700ffc00

0000ea6c <lfs_rename>:
int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {
    ea6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ea70:	b0ad      	sub	sp, #180	; 0xb4
    ea72:	4604      	mov	r4, r0
    ea74:	9103      	str	r1, [sp, #12]
    ea76:	9202      	str	r2, [sp, #8]
    int err = lfs_fs_forceconsistency(lfs);
    ea78:	f006 fb0e 	bl	15098 <lfs_fs_forceconsistency>
    if (err) {
    ea7c:	4606      	mov	r6, r0
    ea7e:	b118      	cbz	r0, ea88 <lfs_rename+0x1c>
}
    ea80:	4630      	mov	r0, r6
    ea82:	b02d      	add	sp, #180	; 0xb4
    ea84:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
    ea88:	2300      	movs	r3, #0
    ea8a:	aa03      	add	r2, sp, #12
    ea8c:	a922      	add	r1, sp, #136	; 0x88
    ea8e:	4620      	mov	r0, r4
    ea90:	f7fe fa12 	bl	ceb8 <lfs_dir_find>
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
    ea94:	1e05      	subs	r5, r0, #0
    ea96:	f2c0 8090 	blt.w	ebba <lfs_rename+0x14e>
    return (tag & 0x000ffc00) >> 10;
    ea9a:	f3c5 2889 	ubfx	r8, r5, #10, #10
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
    ea9e:	f240 33ff 	movw	r3, #1023	; 0x3ff
    eaa2:	4598      	cmp	r8, r3
    eaa4:	f000 8089 	beq.w	ebba <lfs_rename+0x14e>
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
    eaa8:	f10d 0366 	add.w	r3, sp, #102	; 0x66
    eaac:	aa02      	add	r2, sp, #8
    eaae:	a91a      	add	r1, sp, #104	; 0x68
    eab0:	4620      	mov	r0, r4
    eab2:	f7fe fa01 	bl	ceb8 <lfs_dir_find>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
    eab6:	1e07      	subs	r7, r0, #0
    eab8:	f2c0 8086 	blt.w	ebc8 <lfs_rename+0x15c>
    return (tag & 0x000ffc00) >> 10;
    eabc:	f3c7 2289 	ubfx	r2, r7, #10, #10
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
    eac0:	f240 33ff 	movw	r3, #1023	; 0x3ff
    eac4:	429a      	cmp	r2, r3
    eac6:	d07f      	beq.n	ebc8 <lfs_rename+0x15c>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    eac8:	9b22      	ldr	r3, [sp, #136]	; 0x88
    eaca:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    eacc:	429a      	cmp	r2, r3
    eace:	d008      	beq.n	eae2 <lfs_rename+0x76>
    ead0:	9823      	ldr	r0, [sp, #140]	; 0x8c
    ead2:	991b      	ldr	r1, [sp, #108]	; 0x6c
    ead4:	4281      	cmp	r1, r0
    ead6:	d004      	beq.n	eae2 <lfs_rename+0x76>
    ead8:	4299      	cmp	r1, r3
    eada:	d002      	beq.n	eae2 <lfs_rename+0x76>
    eadc:	4290      	cmp	r0, r2
    eade:	d000      	beq.n	eae2 <lfs_rename+0x76>
    eae0:	2601      	movs	r6, #1
    prevdir.next = lfs->mlist;
    eae2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    eae4:	930f      	str	r3, [sp, #60]	; 0x3c
    if (prevtag == LFS_ERR_NOENT) {
    eae6:	f117 0f02 	cmn.w	r7, #2
    eaea:	d07e      	beq.n	ebea <lfs_rename+0x17e>
    return (tag & 0x7ff00000) >> 20;
    eaec:	f3c7 530a 	ubfx	r3, r7, #20, #11
    eaf0:	f3c5 520a 	ubfx	r2, r5, #20, #11
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
    eaf4:	429a      	cmp	r2, r3
    eaf6:	f040 80f8 	bne.w	ecea <lfs_rename+0x27e>
    } else if (samepair && newid == newoldid) {
    eafa:	b91e      	cbnz	r6, eb04 <lfs_rename+0x98>
    eafc:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
    eb00:	4542      	cmp	r2, r8
    eb02:	d0bd      	beq.n	ea80 <lfs_rename+0x14>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
    eb04:	2b02      	cmp	r3, #2
    eb06:	d07e      	beq.n	ec06 <lfs_rename+0x19a>
    uint16_t newoldid = lfs_tag_id(oldtag);
    eb08:	46c1      	mov	r9, r8
    if (!samepair) {
    eb0a:	2e00      	cmp	r6, #0
    eb0c:	f040 80ab 	bne.w	ec66 <lfs_rename+0x1fa>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
    eb10:	2224      	movs	r2, #36	; 0x24
    eb12:	2100      	movs	r1, #0
    eb14:	a806      	add	r0, sp, #24
    eb16:	f003 fff7 	bl	12b08 <memset>
    eb1a:	f117 0f02 	cmn.w	r7, #2
    eb1e:	f000 80a8 	beq.w	ec72 <lfs_rename+0x206>
    eb22:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
    eb26:	029b      	lsls	r3, r3, #10
    eb28:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
    eb2c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    eb30:	9305      	str	r3, [sp, #20]
    eb32:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
    eb36:	0292      	lsls	r2, r2, #10
    eb38:	f042 4380 	orr.w	r3, r2, #1073741824	; 0x40000000
    eb3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    eb40:	9307      	str	r3, [sp, #28]
    return (tag & 0x7ff00000) >> 20;
    eb42:	f3c5 530a 	ubfx	r3, r5, #20, #11
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
    eb46:	ea42 5503 	orr.w	r5, r2, r3, lsl #20
    eb4a:	9802      	ldr	r0, [sp, #8]
    eb4c:	f003 ff6a 	bl	12a24 <strlen>
    eb50:	4328      	orrs	r0, r5
    eb52:	9009      	str	r0, [sp, #36]	; 0x24
    eb54:	9b02      	ldr	r3, [sp, #8]
    eb56:	930a      	str	r3, [sp, #40]	; 0x28
    eb58:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
    eb5c:	ea48 2383 	orr.w	r3, r8, r3, lsl #10
    eb60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    eb64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    eb68:	930b      	str	r3, [sp, #44]	; 0x2c
    eb6a:	ab22      	add	r3, sp, #136	; 0x88
    eb6c:	930c      	str	r3, [sp, #48]	; 0x30
    eb6e:	2e00      	cmp	r6, #0
    eb70:	f040 8081 	bne.w	ec76 <lfs_rename+0x20a>
    eb74:	ea4f 2989 	mov.w	r9, r9, lsl #10
    eb78:	f049 439f 	orr.w	r3, r9, #1333788672	; 0x4f800000
    eb7c:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    eb80:	930d      	str	r3, [sp, #52]	; 0x34
    eb82:	2305      	movs	r3, #5
    eb84:	aa05      	add	r2, sp, #20
    eb86:	a91a      	add	r1, sp, #104	; 0x68
    eb88:	4620      	mov	r0, r4
    eb8a:	f7ff f95b 	bl	de44 <lfs_dir_commit>
    if (err) {
    eb8e:	4605      	mov	r5, r0
    eb90:	2800      	cmp	r0, #0
    eb92:	d172      	bne.n	ec7a <lfs_rename+0x20e>
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
    eb94:	b126      	cbz	r6, eba0 <lfs_rename+0x134>
    return lfs_tag_type1(a->tag);
    eb96:	6b23      	ldr	r3, [r4, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
    eb98:	0d1b      	lsrs	r3, r3, #20
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
    eb9a:	f413 6fe0 	tst.w	r3, #1792	; 0x700
    eb9e:	d170      	bne.n	ec82 <lfs_rename+0x216>
    lfs->mlist = prevdir.next;
    eba0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    eba2:	62a3      	str	r3, [r4, #40]	; 0x28
    if (prevtag != LFS_ERR_NOENT && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
    eba4:	f117 0f02 	cmn.w	r7, #2
    eba8:	f000 80a2 	beq.w	ecf0 <lfs_rename+0x284>
    return (tag & 0x7ff00000) >> 20;
    ebac:	f3c7 570a 	ubfx	r7, r7, #20, #11
    if (prevtag != LFS_ERR_NOENT && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
    ebb0:	2f02      	cmp	r7, #2
    ebb2:	f000 8082 	beq.w	ecba <lfs_rename+0x24e>
    return 0;
    ebb6:	462e      	mov	r6, r5
    ebb8:	e762      	b.n	ea80 <lfs_rename+0x14>
        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;
    ebba:	2d00      	cmp	r5, #0
    ebbc:	db02      	blt.n	ebc4 <lfs_rename+0x158>
    ebbe:	f06f 0615 	mvn.w	r6, #21
    ebc2:	e75d      	b.n	ea80 <lfs_rename+0x14>
    ebc4:	462e      	mov	r6, r5
    ebc6:	e75b      	b.n	ea80 <lfs_rename+0x14>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
    ebc8:	f117 0f02 	cmn.w	r7, #2
    ebcc:	d106      	bne.n	ebdc <lfs_rename+0x170>
            !(prevtag == LFS_ERR_NOENT && newid != 0x3ff)) {
    ebce:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
    ebd2:	f240 33ff 	movw	r3, #1023	; 0x3ff
    ebd6:	429a      	cmp	r2, r3
    ebd8:	f47f af76 	bne.w	eac8 <lfs_rename+0x5c>
        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;
    ebdc:	2f00      	cmp	r7, #0
    ebde:	db02      	blt.n	ebe6 <lfs_rename+0x17a>
    ebe0:	f06f 0615 	mvn.w	r6, #21
    ebe4:	e74c      	b.n	ea80 <lfs_rename+0x14>
    ebe6:	463e      	mov	r6, r7
    ebe8:	e74a      	b.n	ea80 <lfs_rename+0x14>
        lfs_size_t nlen = strlen(newpath);
    ebea:	9802      	ldr	r0, [sp, #8]
    ebec:	f003 ff1a 	bl	12a24 <strlen>
        if (nlen > lfs->name_max) {
    ebf0:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    ebf2:	4283      	cmp	r3, r0
    ebf4:	d376      	bcc.n	ece4 <lfs_rename+0x278>
        if (samepair && newid <= newoldid) {
    ebf6:	bb96      	cbnz	r6, ec5e <lfs_rename+0x1f2>
    ebf8:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
    ebfc:	4543      	cmp	r3, r8
    ebfe:	d830      	bhi.n	ec62 <lfs_rename+0x1f6>
            newoldid += 1;
    ec00:	f108 0901 	add.w	r9, r8, #1
    ec04:	e781      	b.n	eb0a <lfs_rename+0x9e>
                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);
    ec06:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
    ec0a:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
    ec0c:	aa05      	add	r2, sp, #20
    ec0e:	9200      	str	r2, [sp, #0]
    ec10:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    ec14:	f043 0308 	orr.w	r3, r3, #8
    ec18:	4a36      	ldr	r2, [pc, #216]	; (ecf4 <lfs_rename+0x288>)
    ec1a:	a91a      	add	r1, sp, #104	; 0x68
    ec1c:	4620      	mov	r0, r4
    ec1e:	f005 fbba 	bl	14396 <lfs_dir_get>
        if (res < 0) {
    ec22:	1e03      	subs	r3, r0, #0
    ec24:	db0c      	blt.n	ec40 <lfs_rename+0x1d4>
        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);
    ec26:	aa05      	add	r2, sp, #20
    ec28:	a911      	add	r1, sp, #68	; 0x44
    ec2a:	4620      	mov	r0, r4
    ec2c:	f005 fb67 	bl	142fe <lfs_dir_fetch>
        if (err) {
    ec30:	4603      	mov	r3, r0
    ec32:	b928      	cbnz	r0, ec40 <lfs_rename+0x1d4>
        if (prevdir.m.count > 0 || prevdir.m.split) {
    ec34:	9b16      	ldr	r3, [sp, #88]	; 0x58
    ec36:	f433 037f 	bics.w	r3, r3, #16711680	; 0xff0000
    ec3a:	d003      	beq.n	ec44 <lfs_rename+0x1d8>
            return LFS_ERR_NOTEMPTY;
    ec3c:	f06f 0326 	mvn.w	r3, #38	; 0x26
            return (int)res;
    ec40:	461e      	mov	r6, r3
    ec42:	e71d      	b.n	ea80 <lfs_rename+0x14>
        lfs_fs_preporphans(lfs, +1);
    ec44:	2101      	movs	r1, #1
    ec46:	4620      	mov	r0, r4
    ec48:	f005 f9ff 	bl	1404a <lfs_fs_preporphans>
        prevdir.type = 0;
    ec4c:	2300      	movs	r3, #0
    ec4e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
        prevdir.id = 0;
    ec52:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        lfs->mlist = &prevdir;
    ec56:	ab0f      	add	r3, sp, #60	; 0x3c
    ec58:	62a3      	str	r3, [r4, #40]	; 0x28
    uint16_t newoldid = lfs_tag_id(oldtag);
    ec5a:	46c1      	mov	r9, r8
    ec5c:	e755      	b.n	eb0a <lfs_rename+0x9e>
    ec5e:	46c1      	mov	r9, r8
    ec60:	e753      	b.n	eb0a <lfs_rename+0x9e>
    ec62:	46c1      	mov	r9, r8
    ec64:	e751      	b.n	eb0a <lfs_rename+0x9e>
        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);
    ec66:	aa22      	add	r2, sp, #136	; 0x88
    ec68:	4649      	mov	r1, r9
    ec6a:	4620      	mov	r0, r4
    ec6c:	f7fd fc32 	bl	c4d4 <lfs_fs_prepmove>
    ec70:	e74e      	b.n	eb10 <lfs_rename+0xa4>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
    ec72:	2300      	movs	r3, #0
    ec74:	e75c      	b.n	eb30 <lfs_rename+0xc4>
    ec76:	2300      	movs	r3, #0
    ec78:	e782      	b.n	eb80 <lfs_rename+0x114>
        lfs->mlist = prevdir.next;
    ec7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ec7c:	62a3      	str	r3, [r4, #40]	; 0x28
        return err;
    ec7e:	4606      	mov	r6, r0
    ec80:	e6fe      	b.n	ea80 <lfs_rename+0x14>
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
    ec82:	2200      	movs	r2, #0
    ec84:	f240 31ff 	movw	r1, #1023	; 0x3ff
    ec88:	4620      	mov	r0, r4
    ec8a:	f7fd fc23 	bl	c4d4 <lfs_fs_prepmove>
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
    ec8e:	2300      	movs	r3, #0
    ec90:	932b      	str	r3, [sp, #172]	; 0xac
    ec92:	ea4f 2388 	mov.w	r3, r8, lsl #10
    ec96:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
    ec9a:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    ec9e:	932a      	str	r3, [sp, #168]	; 0xa8
    eca0:	2301      	movs	r3, #1
    eca2:	aa2a      	add	r2, sp, #168	; 0xa8
    eca4:	a922      	add	r1, sp, #136	; 0x88
    eca6:	4620      	mov	r0, r4
    eca8:	f7ff f8cc 	bl	de44 <lfs_dir_commit>
        if (err) {
    ecac:	4606      	mov	r6, r0
    ecae:	2800      	cmp	r0, #0
    ecb0:	f43f af76 	beq.w	eba0 <lfs_rename+0x134>
            lfs->mlist = prevdir.next;
    ecb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ecb6:	62a3      	str	r3, [r4, #40]	; 0x28
            return err;
    ecb8:	e6e2      	b.n	ea80 <lfs_rename+0x14>
        lfs_fs_preporphans(lfs, -1);
    ecba:	f04f 31ff 	mov.w	r1, #4294967295
    ecbe:	4620      	mov	r0, r4
    ecc0:	f005 f9c3 	bl	1404a <lfs_fs_preporphans>
        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);
    ecc4:	aa1a      	add	r2, sp, #104	; 0x68
    ecc6:	a911      	add	r1, sp, #68	; 0x44
    ecc8:	4620      	mov	r0, r4
    ecca:	f005 fb26 	bl	1431a <lfs_fs_pred>
        if (err) {
    ecce:	4606      	mov	r6, r0
    ecd0:	2800      	cmp	r0, #0
    ecd2:	f47f aed5 	bne.w	ea80 <lfs_rename+0x14>
        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);
    ecd6:	aa11      	add	r2, sp, #68	; 0x44
    ecd8:	a91a      	add	r1, sp, #104	; 0x68
    ecda:	4620      	mov	r0, r4
    ecdc:	f7ff fad0 	bl	e280 <lfs_dir_drop>
    ece0:	4606      	mov	r6, r0
        if (err) {
    ece2:	e6cd      	b.n	ea80 <lfs_rename+0x14>
            return LFS_ERR_NAMETOOLONG;
    ece4:	f06f 0623 	mvn.w	r6, #35	; 0x23
    ece8:	e6ca      	b.n	ea80 <lfs_rename+0x14>
        return LFS_ERR_ISDIR;
    ecea:	f06f 0614 	mvn.w	r6, #20
    ecee:	e6c7      	b.n	ea80 <lfs_rename+0x14>
    return 0;
    ecf0:	462e      	mov	r6, r5
    ecf2:	e6c5      	b.n	ea80 <lfs_rename+0x14>
    ecf4:	700ffc00 	.word	0x700ffc00

0000ecf8 <lfs_format>:
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
    ecf8:	b530      	push	{r4, r5, lr}
    ecfa:	b097      	sub	sp, #92	; 0x5c
    ecfc:	4604      	mov	r4, r0
        err = lfs_init(lfs, cfg);
    ecfe:	f005 fe01 	bl	14904 <lfs_init>
        if (err) {
    ed02:	4605      	mov	r5, r0
    ed04:	b110      	cbz	r0, ed0c <lfs_format+0x14>
}
    ed06:	4628      	mov	r0, r5
    ed08:	b017      	add	sp, #92	; 0x5c
    ed0a:	bd30      	pop	{r4, r5, pc}
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
    ed0c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    ed0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    ed10:	2100      	movs	r1, #0
    ed12:	6e60      	ldr	r0, [r4, #100]	; 0x64
    ed14:	f003 fef8 	bl	12b08 <memset>
        lfs->free.off = 0;
    ed18:	2200      	movs	r2, #0
    ed1a:	6562      	str	r2, [r4, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
    ed1c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    ed1e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    ed20:	00db      	lsls	r3, r3, #3
    ed22:	6a09      	ldr	r1, [r1, #32]
    ed24:	428b      	cmp	r3, r1
    ed26:	bf28      	it	cs
    ed28:	460b      	movcs	r3, r1
    ed2a:	65a3      	str	r3, [r4, #88]	; 0x58
        lfs->free.i = 0;
    ed2c:	65e2      	str	r2, [r4, #92]	; 0x5c
        lfs_alloc_ack(lfs);
    ed2e:	4620      	mov	r0, r4
    ed30:	f005 f96a 	bl	14008 <lfs_alloc_ack>
        err = lfs_dir_alloc(lfs, &root);
    ed34:	a906      	add	r1, sp, #24
    ed36:	4620      	mov	r0, r4
    ed38:	f005 ff28 	bl	14b8c <lfs_dir_alloc>
        if (err) {
    ed3c:	4605      	mov	r5, r0
    ed3e:	b118      	cbz	r0, ed48 <lfs_format+0x50>
    lfs_deinit(lfs);
    ed40:	4620      	mov	r0, r4
    ed42:	f005 fdc6 	bl	148d2 <lfs_deinit>
    return err;
    ed46:	e7de      	b.n	ed06 <lfs_format+0xe>
        lfs_superblock_t superblock = {
    ed48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    ed4c:	9300      	str	r3, [sp, #0]
            .block_size  = lfs->cfg->block_size,
    ed4e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    ed50:	69da      	ldr	r2, [r3, #28]
        lfs_superblock_t superblock = {
    ed52:	9201      	str	r2, [sp, #4]
            .block_count = lfs->cfg->block_count,
    ed54:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
    ed56:	9302      	str	r3, [sp, #8]
            .name_max    = lfs->name_max,
    ed58:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        lfs_superblock_t superblock = {
    ed5a:	9303      	str	r3, [sp, #12]
            .file_max    = lfs->file_max,
    ed5c:	6f23      	ldr	r3, [r4, #112]	; 0x70
        lfs_superblock_t superblock = {
    ed5e:	9304      	str	r3, [sp, #16]
            .attr_max    = lfs->attr_max,
    ed60:	6f63      	ldr	r3, [r4, #116]	; 0x74
        lfs_superblock_t superblock = {
    ed62:	9305      	str	r3, [sp, #20]
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
    ed64:	2300      	movs	r3, #0
    ed66:	930f      	str	r3, [sp, #60]	; 0x3c
    ed68:	4b14      	ldr	r3, [pc, #80]	; (edbc <lfs_format+0xc4>)
    ed6a:	930e      	str	r3, [sp, #56]	; 0x38
    ed6c:	4b14      	ldr	r3, [pc, #80]	; (edc0 <lfs_format+0xc8>)
    ed6e:	9310      	str	r3, [sp, #64]	; 0x40
    ed70:	4b14      	ldr	r3, [pc, #80]	; (edc4 <lfs_format+0xcc>)
    ed72:	9311      	str	r3, [sp, #68]	; 0x44
    ed74:	4b14      	ldr	r3, [pc, #80]	; (edc8 <lfs_format+0xd0>)
    ed76:	9312      	str	r3, [sp, #72]	; 0x48
    ed78:	f8cd d04c 	str.w	sp, [sp, #76]	; 0x4c
    ed7c:	2303      	movs	r3, #3
    ed7e:	aa0e      	add	r2, sp, #56	; 0x38
    ed80:	a906      	add	r1, sp, #24
    ed82:	4620      	mov	r0, r4
    ed84:	f7ff f85e 	bl	de44 <lfs_dir_commit>
        if (err) {
    ed88:	4605      	mov	r5, r0
    ed8a:	2800      	cmp	r0, #0
    ed8c:	d1d8      	bne.n	ed40 <lfs_format+0x48>
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
    ed8e:	2300      	movs	r3, #0
    ed90:	9314      	str	r3, [sp, #80]	; 0x50
    ed92:	2301      	movs	r3, #1
    ed94:	9315      	str	r3, [sp, #84]	; 0x54
    ed96:	aa14      	add	r2, sp, #80	; 0x50
    ed98:	a906      	add	r1, sp, #24
    ed9a:	4620      	mov	r0, r4
    ed9c:	f005 faaf 	bl	142fe <lfs_dir_fetch>
        if (err) {
    eda0:	4605      	mov	r5, r0
    eda2:	2800      	cmp	r0, #0
    eda4:	d1cc      	bne.n	ed40 <lfs_format+0x48>
        root.erased = false;
    eda6:	2200      	movs	r2, #0
    eda8:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
        err = lfs_dir_commit(lfs, &root, NULL, 0);
    edac:	4613      	mov	r3, r2
    edae:	a906      	add	r1, sp, #24
    edb0:	4620      	mov	r0, r4
    edb2:	f7ff f847 	bl	de44 <lfs_dir_commit>
    edb6:	4605      	mov	r5, r0
        if (err) {
    edb8:	e7c2      	b.n	ed40 <lfs_format+0x48>
    edba:	bf00      	nop
    edbc:	40100000 	.word	0x40100000
    edc0:	0ff00008 	.word	0x0ff00008
    edc4:	00016f5c 	.word	0x00016f5c
    edc8:	20100018 	.word	0x20100018

0000edcc <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
    edcc:	b470      	push	{r4, r5, r6}
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;

    for (size_t i = 0; i < size; i++) {
    edce:	2400      	movs	r4, #0
    edd0:	4294      	cmp	r4, r2
    edd2:	d213      	bcs.n	edfc <lfs_crc+0x30>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
    edd4:	5d0b      	ldrb	r3, [r1, r4]
    edd6:	ea83 0500 	eor.w	r5, r3, r0
    edda:	f005 050f 	and.w	r5, r5, #15
    edde:	4e08      	ldr	r6, [pc, #32]	; (ee00 <lfs_crc+0x34>)
    ede0:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    ede4:	ea85 1010 	eor.w	r0, r5, r0, lsr #4
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
    ede8:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
    edec:	f003 030f 	and.w	r3, r3, #15
    edf0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
    edf4:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
    for (size_t i = 0; i < size; i++) {
    edf8:	3401      	adds	r4, #1
    edfa:	e7e9      	b.n	edd0 <lfs_crc+0x4>
    }

    return crc;
}
    edfc:	bc70      	pop	{r4, r5, r6}
    edfe:	4770      	bx	lr
    ee00:	0001767c 	.word	0x0001767c

0000ee04 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    ee04:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    ee06:	4c11      	ldr	r4, [pc, #68]	; (ee4c <_DoInit+0x48>)
    ee08:	2303      	movs	r3, #3
    ee0a:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    ee0c:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    ee0e:	4a10      	ldr	r2, [pc, #64]	; (ee50 <_DoInit+0x4c>)
    ee10:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    ee12:	4b10      	ldr	r3, [pc, #64]	; (ee54 <_DoInit+0x50>)
    ee14:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    ee16:	f44f 6380 	mov.w	r3, #1024	; 0x400
    ee1a:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    ee1c:	2300      	movs	r3, #0
    ee1e:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    ee20:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    ee22:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    ee24:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    ee26:	4a0c      	ldr	r2, [pc, #48]	; (ee58 <_DoInit+0x54>)
    ee28:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    ee2a:	2210      	movs	r2, #16
    ee2c:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    ee2e:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    ee30:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    ee32:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    ee34:	4909      	ldr	r1, [pc, #36]	; (ee5c <_DoInit+0x58>)
    ee36:	1de0      	adds	r0, r4, #7
    ee38:	f003 fdc5 	bl	129c6 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    ee3c:	4908      	ldr	r1, [pc, #32]	; (ee60 <_DoInit+0x5c>)
    ee3e:	4620      	mov	r0, r4
    ee40:	f003 fdc1 	bl	129c6 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    ee44:	2320      	movs	r3, #32
    ee46:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    ee48:	bd10      	pop	{r4, pc}
    ee4a:	bf00      	nop
    ee4c:	20002a60 	.word	0x20002a60
    ee50:	000176bc 	.word	0x000176bc
    ee54:	20002b18 	.word	0x20002b18
    ee58:	20002b08 	.word	0x20002b08
    ee5c:	000176c8 	.word	0x000176c8
    ee60:	000176cc 	.word	0x000176cc

0000ee64 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    ee64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ee68:	4604      	mov	r4, r0
    ee6a:	460e      	mov	r6, r1
    ee6c:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    ee6e:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    ee72:	4a2d      	ldr	r2, [pc, #180]	; (ef28 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    ee74:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    ee78:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    ee7a:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    ee7c:	42bb      	cmp	r3, r7
    ee7e:	d84b      	bhi.n	ef18 <SEGGER_RTT_WriteSkipNoLock+0xb4>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    ee80:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    ee84:	4928      	ldr	r1, [pc, #160]	; (ef28 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    ee86:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    ee8a:	f8d2 8020 	ldr.w	r8, [r2, #32]
    ee8e:	eba8 0907 	sub.w	r9, r8, r7
    ee92:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
    ee96:	4295      	cmp	r5, r2
    ee98:	d904      	bls.n	eea4 <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
    ee9a:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    ee9c:	429d      	cmp	r5, r3
    ee9e:	d916      	bls.n	eece <SEGGER_RTT_WriteSkipNoLock+0x6a>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
    eea0:	2000      	movs	r0, #0
    eea2:	e03e      	b.n	ef22 <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    eea4:	f8df 8080 	ldr.w	r8, [pc, #128]	; ef28 <SEGGER_RTT_WriteSkipNoLock+0xc4>
    eea8:	1c63      	adds	r3, r4, #1
    eeaa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    eeae:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    eeb2:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    eeb4:	462a      	mov	r2, r5
    eeb6:	4631      	mov	r1, r6
    eeb8:	4438      	add	r0, r7
    eeba:	f003 fe01 	bl	12ac0 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    eebe:	443d      	add	r5, r7
    eec0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    eec4:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
    eec8:	6265      	str	r5, [r4, #36]	; 0x24
      return 1;
    eeca:	2001      	movs	r0, #1
    eecc:	e029      	b.n	ef22 <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    eece:	1c43      	adds	r3, r0, #1
    eed0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    eed4:	4a14      	ldr	r2, [pc, #80]	; (ef28 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    eed6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    eeda:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    eedc:	464a      	mov	r2, r9
    eede:	4631      	mov	r1, r6
    eee0:	4438      	add	r0, r7
    eee2:	f003 fded 	bl	12ac0 <memcpy>
      NumBytes -= Rem;
    eee6:	eba7 0708 	sub.w	r7, r7, r8
      if (NumBytes) {
    eeea:	197f      	adds	r7, r7, r5
    eeec:	d107      	bne.n	eefe <SEGGER_RTT_WriteSkipNoLock+0x9a>
      pRing->WrOff = NumBytes;
    eeee:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    eef2:	4b0d      	ldr	r3, [pc, #52]	; (ef28 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    eef4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    eef8:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
    eefa:	2001      	movs	r0, #1
    eefc:	e011      	b.n	ef22 <SEGGER_RTT_WriteSkipNoLock+0xbe>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    eefe:	1c63      	adds	r3, r4, #1
    ef00:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    ef04:	4a08      	ldr	r2, [pc, #32]	; (ef28 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    ef06:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
        memcpy((void*)pDst, pData + Rem, NumBytes);
    ef0a:	463a      	mov	r2, r7
    ef0c:	eb06 0109 	add.w	r1, r6, r9
    ef10:	6858      	ldr	r0, [r3, #4]
    ef12:	f003 fdd5 	bl	12ac0 <memcpy>
    ef16:	e7ea      	b.n	eeee <SEGGER_RTT_WriteSkipNoLock+0x8a>
    Avail = RdOff - WrOff - 1u;
    ef18:	1bdb      	subs	r3, r3, r7
    ef1a:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    ef1c:	42ab      	cmp	r3, r5
    ef1e:	d2c1      	bcs.n	eea4 <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
    ef20:	2000      	movs	r0, #0
}
    ef22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    ef26:	bf00      	nop
    ef28:	20002a60 	.word	0x20002a60

0000ef2c <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    ef2c:	4b06      	ldr	r3, [pc, #24]	; (ef48 <SEGGER_RTT_HasDataUp+0x1c>)
    ef2e:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    ef32:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    ef36:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
    ef38:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    ef3c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    ef40:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    ef42:	1a80      	subs	r0, r0, r2
    ef44:	4770      	bx	lr
    ef46:	bf00      	nop
    ef48:	20002a60 	.word	0x20002a60

0000ef4c <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    ef4c:	4b03      	ldr	r3, [pc, #12]	; (ef5c <z_device_state_init+0x10>)

	while (dev < __device_end) {
    ef4e:	4a04      	ldr	r2, [pc, #16]	; (ef60 <z_device_state_init+0x14>)
    ef50:	4293      	cmp	r3, r2
    ef52:	d201      	bcs.n	ef58 <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
    ef54:	3318      	adds	r3, #24
    ef56:	e7fa      	b.n	ef4e <z_device_state_init+0x2>
	}
}
    ef58:	4770      	bx	lr
    ef5a:	bf00      	nop
    ef5c:	00015c68 	.word	0x00015c68
    ef60:	00015d28 	.word	0x00015d28

0000ef64 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    ef64:	b570      	push	{r4, r5, r6, lr}
    ef66:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    ef68:	4b11      	ldr	r3, [pc, #68]	; (efb0 <z_sys_init_run_level+0x4c>)
    ef6a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    ef6e:	e009      	b.n	ef84 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    ef70:	4240      	negs	r0, r0
    ef72:	e017      	b.n	efa4 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    ef74:	68eb      	ldr	r3, [r5, #12]
    ef76:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    ef78:	68ea      	ldr	r2, [r5, #12]
    ef7a:	7853      	ldrb	r3, [r2, #1]
    ef7c:	f043 0301 	orr.w	r3, r3, #1
    ef80:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    ef82:	3408      	adds	r4, #8
    ef84:	1c73      	adds	r3, r6, #1
    ef86:	4a0a      	ldr	r2, [pc, #40]	; (efb0 <z_sys_init_run_level+0x4c>)
    ef88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    ef8c:	42a3      	cmp	r3, r4
    ef8e:	d90d      	bls.n	efac <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    ef90:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    ef92:	6823      	ldr	r3, [r4, #0]
    ef94:	4628      	mov	r0, r5
    ef96:	4798      	blx	r3
		if (dev != NULL) {
    ef98:	2d00      	cmp	r5, #0
    ef9a:	d0f2      	beq.n	ef82 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    ef9c:	2800      	cmp	r0, #0
    ef9e:	d0eb      	beq.n	ef78 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    efa0:	2800      	cmp	r0, #0
    efa2:	dbe5      	blt.n	ef70 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    efa4:	28ff      	cmp	r0, #255	; 0xff
    efa6:	dde5      	ble.n	ef74 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    efa8:	20ff      	movs	r0, #255	; 0xff
    efaa:	e7e3      	b.n	ef74 <z_sys_init_run_level+0x10>
		}
	}
}
    efac:	bd70      	pop	{r4, r5, r6, pc}
    efae:	bf00      	nop
    efb0:	000176d4 	.word	0x000176d4

0000efb4 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    efb4:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    efb6:	4605      	mov	r5, r0
    efb8:	b328      	cbz	r0, f006 <z_impl_device_get_binding+0x52>
    efba:	7803      	ldrb	r3, [r0, #0]
    efbc:	b32b      	cbz	r3, f00a <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    efbe:	4c14      	ldr	r4, [pc, #80]	; (f010 <z_impl_device_get_binding+0x5c>)
    efc0:	e000      	b.n	efc4 <z_impl_device_get_binding+0x10>
    efc2:	3418      	adds	r4, #24
    efc4:	4b13      	ldr	r3, [pc, #76]	; (f014 <z_impl_device_get_binding+0x60>)
    efc6:	429c      	cmp	r4, r3
    efc8:	d008      	beq.n	efdc <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
    efca:	4620      	mov	r0, r4
    efcc:	f006 f92f 	bl	1522e <z_device_ready>
    efd0:	2800      	cmp	r0, #0
    efd2:	d0f6      	beq.n	efc2 <z_impl_device_get_binding+0xe>
    efd4:	6823      	ldr	r3, [r4, #0]
    efd6:	42ab      	cmp	r3, r5
    efd8:	d1f3      	bne.n	efc2 <z_impl_device_get_binding+0xe>
    efda:	e012      	b.n	f002 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    efdc:	4c0c      	ldr	r4, [pc, #48]	; (f010 <z_impl_device_get_binding+0x5c>)
    efde:	e000      	b.n	efe2 <z_impl_device_get_binding+0x2e>
    efe0:	3418      	adds	r4, #24
    efe2:	4b0c      	ldr	r3, [pc, #48]	; (f014 <z_impl_device_get_binding+0x60>)
    efe4:	429c      	cmp	r4, r3
    efe6:	d00b      	beq.n	f000 <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    efe8:	4620      	mov	r0, r4
    efea:	f006 f920 	bl	1522e <z_device_ready>
    efee:	2800      	cmp	r0, #0
    eff0:	d0f6      	beq.n	efe0 <z_impl_device_get_binding+0x2c>
    eff2:	6821      	ldr	r1, [r4, #0]
    eff4:	4628      	mov	r0, r5
    eff6:	f003 fd27 	bl	12a48 <strcmp>
    effa:	2800      	cmp	r0, #0
    effc:	d1f0      	bne.n	efe0 <z_impl_device_get_binding+0x2c>
    effe:	e000      	b.n	f002 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
    f000:	2400      	movs	r4, #0
}
    f002:	4620      	mov	r0, r4
    f004:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    f006:	4604      	mov	r4, r0
    f008:	e7fb      	b.n	f002 <z_impl_device_get_binding+0x4e>
    f00a:	2400      	movs	r4, #0
    f00c:	e7f9      	b.n	f002 <z_impl_device_get_binding+0x4e>
    f00e:	bf00      	nop
    f010:	00015c68 	.word	0x00015c68
    f014:	00015d28 	.word	0x00015d28

0000f018 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    f018:	4b01      	ldr	r3, [pc, #4]	; (f020 <z_impl_z_errno+0x8>)
    f01a:	6898      	ldr	r0, [r3, #8]
}
    f01c:	3094      	adds	r0, #148	; 0x94
    f01e:	4770      	bx	lr
    f020:	20002f18 	.word	0x20002f18

0000f024 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
    f024:	2804      	cmp	r0, #4
    f026:	d80c      	bhi.n	f042 <reason_to_str+0x1e>
    f028:	e8df f000 	tbb	[pc, r0]
    f02c:	07050d03 	.word	0x07050d03
    f030:	09          	.byte	0x09
    f031:	00          	.byte	0x00
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
    f032:	4806      	ldr	r0, [pc, #24]	; (f04c <reason_to_str+0x28>)
    f034:	4770      	bx	lr
		return "Stack overflow";
    f036:	4806      	ldr	r0, [pc, #24]	; (f050 <reason_to_str+0x2c>)
    f038:	4770      	bx	lr
		return "Kernel oops";
    f03a:	4806      	ldr	r0, [pc, #24]	; (f054 <reason_to_str+0x30>)
    f03c:	4770      	bx	lr
		return "Kernel panic";
    f03e:	4806      	ldr	r0, [pc, #24]	; (f058 <reason_to_str+0x34>)
    f040:	4770      	bx	lr
	default:
		return "Unknown error";
    f042:	4806      	ldr	r0, [pc, #24]	; (f05c <reason_to_str+0x38>)
    f044:	4770      	bx	lr
		return "Unhandled interrupt";
    f046:	4806      	ldr	r0, [pc, #24]	; (f060 <reason_to_str+0x3c>)
	}
}
    f048:	4770      	bx	lr
    f04a:	bf00      	nop
    f04c:	0001773c 	.word	0x0001773c
    f050:	00017710 	.word	0x00017710
    f054:	00017720 	.word	0x00017720
    f058:	0001772c 	.word	0x0001772c
    f05c:	000176ec 	.word	0x000176ec
    f060:	000176fc 	.word	0x000176fc

0000f064 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    f064:	b130      	cbz	r0, f074 <thread_name_get+0x10>
{
    f066:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    f068:	f006 f9db 	bl	15422 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    f06c:	b120      	cbz	r0, f078 <thread_name_get+0x14>
    f06e:	7803      	ldrb	r3, [r0, #0]
    f070:	b123      	cbz	r3, f07c <thread_name_get+0x18>
}
    f072:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
    f074:	4802      	ldr	r0, [pc, #8]	; (f080 <thread_name_get+0x1c>)
}
    f076:	4770      	bx	lr
		thread_name = "unknown";
    f078:	4801      	ldr	r0, [pc, #4]	; (f080 <thread_name_get+0x1c>)
    f07a:	e7fa      	b.n	f072 <thread_name_get+0xe>
    f07c:	4800      	ldr	r0, [pc, #0]	; (f080 <thread_name_get+0x1c>)
	return thread_name;
    f07e:	e7f8      	b.n	f072 <thread_name_get+0xe>
    f080:	0001774c 	.word	0x0001774c

0000f084 <k_sys_fatal_error_handler>:
{
    f084:	b510      	push	{r4, lr}
    f086:	4604      	mov	r4, r0
	z_impl_log_panic();
    f088:	f7f3 fe5a 	bl	2d40 <z_impl_log_panic>
    f08c:	4b09      	ldr	r3, [pc, #36]	; (f0b4 <k_sys_fatal_error_handler+0x30>)
    f08e:	4a0a      	ldr	r2, [pc, #40]	; (f0b8 <k_sys_fatal_error_handler+0x34>)
    f090:	1a9b      	subs	r3, r3, r2
    f092:	08db      	lsrs	r3, r3, #3
	LOG_ERR("Halting system");
    f094:	f04f 0100 	mov.w	r1, #0
    f098:	2201      	movs	r2, #1
    f09a:	f362 0102 	bfi	r1, r2, #0, #3
    f09e:	f36f 01c5 	bfc	r1, #3, #3
    f0a2:	f363 118f 	bfi	r1, r3, #6, #10
    f0a6:	4805      	ldr	r0, [pc, #20]	; (f0bc <k_sys_fatal_error_handler+0x38>)
    f0a8:	f7f3 fe1a 	bl	2ce0 <log_0>
	arch_system_halt(reason);
    f0ac:	4620      	mov	r0, r4
    f0ae:	f006 f8cb 	bl	15248 <arch_system_halt>
    f0b2:	bf00      	nop
    f0b4:	00015ee8 	.word	0x00015ee8
    f0b8:	00015ea8 	.word	0x00015ea8
    f0bc:	00017754 	.word	0x00017754

0000f0c0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    f0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f0c4:	b082      	sub	sp, #8
    f0c6:	4605      	mov	r5, r0
    f0c8:	460e      	mov	r6, r1
	__asm__ volatile(
    f0ca:	f04f 0320 	mov.w	r3, #32
    f0ce:	f3ef 8711 	mrs	r7, BASEPRI
    f0d2:	f383 8812 	msr	BASEPRI_MAX, r3
    f0d6:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    f0da:	f001 f95b 	bl	10394 <z_impl_z_current_get>
    f0de:	4604      	mov	r4, r0
    f0e0:	4b29      	ldr	r3, [pc, #164]	; (f188 <z_fatal_error+0xc8>)
    f0e2:	4a2a      	ldr	r2, [pc, #168]	; (f18c <z_fatal_error+0xcc>)
    f0e4:	1a9b      	subs	r3, r3, r2
    f0e6:	08db      	lsrs	r3, r3, #3
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    f0e8:	f04f 0800 	mov.w	r8, #0
    f0ec:	2201      	movs	r2, #1
    f0ee:	f362 0802 	bfi	r8, r2, #0, #3
    f0f2:	f36f 08c5 	bfc	r8, #3, #3
    f0f6:	f363 188f 	bfi	r8, r3, #6, #10
    f0fa:	4628      	mov	r0, r5
    f0fc:	f7ff ff92 	bl	f024 <reason_to_str>
    f100:	4602      	mov	r2, r0
    f102:	f8ad 8000 	strh.w	r8, [sp]
    f106:	2300      	movs	r3, #0
    f108:	4629      	mov	r1, r5
    f10a:	4821      	ldr	r0, [pc, #132]	; (f190 <z_fatal_error+0xd0>)
    f10c:	f7f3 fd16 	bl	2b3c <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    f110:	b11e      	cbz	r6, f11a <z_fatal_error+0x5a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    f112:	69f3      	ldr	r3, [r6, #28]
    f114:	f3c3 0308 	ubfx	r3, r3, #0, #9
    f118:	bb2b      	cbnz	r3, f166 <z_fatal_error+0xa6>
    f11a:	4b1b      	ldr	r3, [pc, #108]	; (f188 <z_fatal_error+0xc8>)
    f11c:	4a1b      	ldr	r2, [pc, #108]	; (f18c <z_fatal_error+0xcc>)
    f11e:	1a9b      	subs	r3, r3, r2
    f120:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    f122:	f04f 0800 	mov.w	r8, #0
    f126:	2201      	movs	r2, #1
    f128:	f362 0802 	bfi	r8, r2, #0, #3
    f12c:	f36f 08c5 	bfc	r8, #3, #3
    f130:	f363 188f 	bfi	r8, r3, #6, #10
    f134:	4620      	mov	r0, r4
    f136:	f7ff ff95 	bl	f064 <thread_name_get>
    f13a:	f7f3 fbc3 	bl	28c4 <z_log_strdup>
    f13e:	4602      	mov	r2, r0
    f140:	4643      	mov	r3, r8
    f142:	4621      	mov	r1, r4
    f144:	4813      	ldr	r0, [pc, #76]	; (f194 <z_fatal_error+0xd4>)
    f146:	f7f3 fd6d 	bl	2c24 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    f14a:	4631      	mov	r1, r6
    f14c:	4628      	mov	r0, r5
    f14e:	f7ff ff99 	bl	f084 <k_sys_fatal_error_handler>
	__asm__ volatile(
    f152:	f387 8811 	msr	BASEPRI, r7
    f156:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    f15a:	4620      	mov	r0, r4
    f15c:	f7f6 fd62 	bl	5c24 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    f160:	b002      	add	sp, #8
    f162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f166:	4b08      	ldr	r3, [pc, #32]	; (f188 <z_fatal_error+0xc8>)
    f168:	4a08      	ldr	r2, [pc, #32]	; (f18c <z_fatal_error+0xcc>)
    f16a:	1a9b      	subs	r3, r3, r2
    f16c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
    f16e:	f04f 0100 	mov.w	r1, #0
    f172:	2201      	movs	r2, #1
    f174:	f362 0102 	bfi	r1, r2, #0, #3
    f178:	f36f 01c5 	bfc	r1, #3, #3
    f17c:	f363 118f 	bfi	r1, r3, #6, #10
    f180:	4805      	ldr	r0, [pc, #20]	; (f198 <z_fatal_error+0xd8>)
    f182:	f7f3 fdad 	bl	2ce0 <log_0>
    f186:	e7c8      	b.n	f11a <z_fatal_error+0x5a>
    f188:	00015ee8 	.word	0x00015ee8
    f18c:	00015ea8 	.word	0x00015ea8
    f190:	00017764 	.word	0x00017764
    f194:	000177b0 	.word	0x000177b0
    f198:	0001778c 	.word	0x0001778c

0000f19c <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    f19c:	b5f0      	push	{r4, r5, r6, r7, lr}
    f19e:	b089      	sub	sp, #36	; 0x24
    f1a0:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
    f1a2:	4b15      	ldr	r3, [pc, #84]	; (f1f8 <init_idle_thread+0x5c>)
    f1a4:	25b0      	movs	r5, #176	; 0xb0
    f1a6:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
    f1aa:	4b14      	ldr	r3, [pc, #80]	; (f1fc <init_idle_thread+0x60>)
    f1ac:	f44f 76b0 	mov.w	r6, #352	; 0x160
    f1b0:	fb06 3600 	mla	r6, r6, r0, r3

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
    f1b4:	af06      	add	r7, sp, #24
    f1b6:	4603      	mov	r3, r0
    f1b8:	4a11      	ldr	r2, [pc, #68]	; (f200 <init_idle_thread+0x64>)
    f1ba:	2108      	movs	r1, #8
    f1bc:	4638      	mov	r0, r7
    f1be:	f001 fe13 	bl	10de8 <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    f1c2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f1c6:	480f      	ldr	r0, [pc, #60]	; (f204 <init_idle_thread+0x68>)
    f1c8:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
    f1cc:	9705      	str	r7, [sp, #20]
    f1ce:	2301      	movs	r3, #1
    f1d0:	9304      	str	r3, [sp, #16]
    f1d2:	230f      	movs	r3, #15
    f1d4:	9303      	str	r3, [sp, #12]
    f1d6:	2300      	movs	r3, #0
    f1d8:	9302      	str	r3, [sp, #8]
    f1da:	9301      	str	r3, [sp, #4]
    f1dc:	9400      	str	r4, [sp, #0]
    f1de:	4b0a      	ldr	r3, [pc, #40]	; (f208 <init_idle_thread+0x6c>)
    f1e0:	f44f 72a0 	mov.w	r2, #320	; 0x140
    f1e4:	4631      	mov	r1, r6
    f1e6:	4628      	mov	r0, r5
    f1e8:	f000 f96c 	bl	f4c4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    f1ec:	7b6b      	ldrb	r3, [r5, #13]
    f1ee:	f023 0304 	bic.w	r3, r3, #4
    f1f2:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    f1f4:	b009      	add	sp, #36	; 0x24
    f1f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f1f8:	200007e8 	.word	0x200007e8
    f1fc:	200044c0 	.word	0x200044c0
    f200:	000177c8 	.word	0x000177c8
    f204:	20002f18 	.word	0x20002f18
    f208:	00015495 	.word	0x00015495

0000f20c <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
    f20c:	b570      	push	{r4, r5, r6, lr}
    f20e:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
    f210:	f000 ffbe 	bl	10190 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
    f214:	4d1b      	ldr	r5, [pc, #108]	; (f284 <prepare_multithreading+0x78>)
    f216:	4b1c      	ldr	r3, [pc, #112]	; (f288 <prepare_multithreading+0x7c>)
    f218:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    f21a:	4b1c      	ldr	r3, [pc, #112]	; (f28c <prepare_multithreading+0x80>)
    f21c:	9305      	str	r3, [sp, #20]
    f21e:	2301      	movs	r3, #1
    f220:	9304      	str	r3, [sp, #16]
    f222:	2400      	movs	r4, #0
    f224:	9403      	str	r4, [sp, #12]
    f226:	9402      	str	r4, [sp, #8]
    f228:	9401      	str	r4, [sp, #4]
    f22a:	9400      	str	r4, [sp, #0]
    f22c:	4b18      	ldr	r3, [pc, #96]	; (f290 <prepare_multithreading+0x84>)
    f22e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    f232:	4918      	ldr	r1, [pc, #96]	; (f294 <prepare_multithreading+0x88>)
    f234:	4628      	mov	r0, r5
    f236:	f000 f945 	bl	f4c4 <z_setup_new_thread>
    f23a:	4606      	mov	r6, r0
    f23c:	7b6b      	ldrb	r3, [r5, #13]
    f23e:	f023 0304 	bic.w	r3, r3, #4
    f242:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
    f244:	4628      	mov	r0, r5
    f246:	f006 fa80 	bl	1574a <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    f24a:	2c00      	cmp	r4, #0
    f24c:	dd02      	ble.n	f254 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
    f24e:	4630      	mov	r0, r6
    f250:	b006      	add	sp, #24
    f252:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
    f254:	4620      	mov	r0, r4
    f256:	f7ff ffa1 	bl	f19c <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    f25a:	4b0f      	ldr	r3, [pc, #60]	; (f298 <prepare_multithreading+0x8c>)
    f25c:	22b0      	movs	r2, #176	; 0xb0
    f25e:	fb02 3204 	mla	r2, r2, r4, r3
    f262:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    f266:	4b08      	ldr	r3, [pc, #32]	; (f288 <prepare_multithreading+0x7c>)
    f268:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    f26c:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
    f26e:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
    f270:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    f274:	4a09      	ldr	r2, [pc, #36]	; (f29c <prepare_multithreading+0x90>)
    f276:	eb02 1241 	add.w	r2, r2, r1, lsl #5
    f27a:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
    f27e:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    f280:	3401      	adds	r4, #1
    f282:	e7e2      	b.n	f24a <prepare_multithreading+0x3e>
    f284:	20000898 	.word	0x20000898
    f288:	20002f18 	.word	0x20002f18
    f28c:	000177d4 	.word	0x000177d4
    f290:	0000f2a1 	.word	0x0000f2a1
    f294:	20003ca0 	.word	0x20003ca0
    f298:	200007e8 	.word	0x200007e8
    f29c:	20004620 	.word	0x20004620

0000f2a0 <bg_thread_main>:
{
    f2a0:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    f2a2:	4b0a      	ldr	r3, [pc, #40]	; (f2cc <bg_thread_main+0x2c>)
    f2a4:	2201      	movs	r2, #1
    f2a6:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    f2a8:	2002      	movs	r0, #2
    f2aa:	f7ff fe5b 	bl	ef64 <z_sys_init_run_level>
	boot_banner();
    f2ae:	f001 fb11 	bl	108d4 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    f2b2:	2003      	movs	r0, #3
    f2b4:	f7ff fe56 	bl	ef64 <z_sys_init_run_level>
	z_init_static_threads();
    f2b8:	f000 f968 	bl	f58c <z_init_static_threads>
	main();
    f2bc:	f7f2 f8b2 	bl	1424 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    f2c0:	4a03      	ldr	r2, [pc, #12]	; (f2d0 <bg_thread_main+0x30>)
    f2c2:	7b13      	ldrb	r3, [r2, #12]
    f2c4:	f023 0301 	bic.w	r3, r3, #1
    f2c8:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    f2ca:	bd08      	pop	{r3, pc}
    f2cc:	20002f83 	.word	0x20002f83
    f2d0:	20000898 	.word	0x20000898

0000f2d4 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    f2d4:	b508      	push	{r3, lr}
    f2d6:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    f2d8:	4a01      	ldr	r2, [pc, #4]	; (f2e0 <switch_to_main_thread+0xc>)
    f2da:	4802      	ldr	r0, [pc, #8]	; (f2e4 <switch_to_main_thread+0x10>)
    f2dc:	f7f6 f81c 	bl	5318 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    f2e0:	0000f2a1 	.word	0x0000f2a1
    f2e4:	20000898 	.word	0x20000898

0000f2e8 <z_bss_zero>:
{
    f2e8:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    f2ea:	4803      	ldr	r0, [pc, #12]	; (f2f8 <z_bss_zero+0x10>)
    f2ec:	4a03      	ldr	r2, [pc, #12]	; (f2fc <z_bss_zero+0x14>)
    f2ee:	1a12      	subs	r2, r2, r0
    f2f0:	2100      	movs	r1, #0
    f2f2:	f003 fc09 	bl	12b08 <memset>
}
    f2f6:	bd08      	pop	{r3, pc}
    f2f8:	20000540 	.word	0x20000540
    f2fc:	20003140 	.word	0x20003140

0000f300 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    f300:	b500      	push	{lr}
    f302:	b0ad      	sub	sp, #180	; 0xb4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    f304:	f7f3 fa00 	bl	2708 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    f308:	4b1c      	ldr	r3, [pc, #112]	; (f37c <z_cstart+0x7c>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    f30a:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    f30e:	4c1c      	ldr	r4, [pc, #112]	; (f380 <z_cstart+0x80>)
    f310:	6963      	ldr	r3, [r4, #20]
    f312:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    f316:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    f318:	23e0      	movs	r3, #224	; 0xe0
    f31a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    f31e:	2500      	movs	r5, #0
    f320:	77e5      	strb	r5, [r4, #31]
    f322:	7625      	strb	r5, [r4, #24]
    f324:	7665      	strb	r5, [r4, #25]
    f326:	76a5      	strb	r5, [r4, #26]
    f328:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    f32c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f32e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    f332:	6263      	str	r3, [r4, #36]	; 0x24
    f334:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    f338:	f7f6 fbe4 	bl	5b04 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    f33c:	f7f5 fe70 	bl	5020 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    f340:	f04f 33ff 	mov.w	r3, #4294967295
    f344:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    f346:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    f348:	f7f6 fd48 	bl	5ddc <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    f34c:	f7f6 fc80 	bl	5c50 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    f350:	2401      	movs	r4, #1
    f352:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    f356:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    f35a:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    f35c:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    f35e:	4b09      	ldr	r3, [pc, #36]	; (f384 <z_cstart+0x84>)
    f360:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    f364:	f7ff fdf2 	bl	ef4c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    f368:	4628      	mov	r0, r5
    f36a:	f7ff fdfb 	bl	ef64 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    f36e:	4620      	mov	r0, r4
    f370:	f7ff fdf8 	bl	ef64 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    f374:	f7ff ff4a 	bl	f20c <prepare_multithreading>
    f378:	f7ff ffac 	bl	f2d4 <switch_to_main_thread>
    f37c:	20004e40 	.word	0x20004e40
    f380:	e000ed00 	.word	0xe000ed00
    f384:	20002f18 	.word	0x20002f18

0000f388 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    f388:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    f38a:	4c06      	ldr	r4, [pc, #24]	; (f3a4 <statics_init+0x1c>)
    f38c:	4b06      	ldr	r3, [pc, #24]	; (f3a8 <statics_init+0x20>)
    f38e:	429c      	cmp	r4, r3
    f390:	d206      	bcs.n	f3a0 <statics_init+0x18>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    f392:	68a2      	ldr	r2, [r4, #8]
    f394:	6861      	ldr	r1, [r4, #4]
    f396:	4620      	mov	r0, r4
    f398:	f005 ff5f 	bl	1525a <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    f39c:	3414      	adds	r4, #20
    f39e:	e7f5      	b.n	f38c <statics_init+0x4>
		}
	}
	return 0;
}
    f3a0:	2000      	movs	r0, #0
    f3a2:	bd10      	pop	{r4, pc}
    f3a4:	2000039c 	.word	0x2000039c
    f3a8:	200003c4 	.word	0x200003c4

0000f3ac <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    f3ac:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    f3ae:	4c06      	ldr	r4, [pc, #24]	; (f3c8 <init_mem_slab_module+0x1c>)
	int rc = 0;
    f3b0:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    f3b2:	4b06      	ldr	r3, [pc, #24]	; (f3cc <init_mem_slab_module+0x20>)
    f3b4:	429c      	cmp	r4, r3
    f3b6:	d206      	bcs.n	f3c6 <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    f3b8:	4620      	mov	r0, r4
    f3ba:	f005 ffc9 	bl	15350 <create_free_list>
		if (rc < 0) {
    f3be:	2800      	cmp	r0, #0
    f3c0:	db01      	blt.n	f3c6 <init_mem_slab_module+0x1a>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    f3c2:	341c      	adds	r4, #28
    f3c4:	e7f5      	b.n	f3b2 <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
    f3c6:	bd10      	pop	{r4, pc}
    f3c8:	20000348 	.word	0x20000348
    f3cc:	2000039c 	.word	0x2000039c

0000f3d0 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    f3d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    f3d2:	b083      	sub	sp, #12
    f3d4:	460c      	mov	r4, r1
    f3d6:	461f      	mov	r7, r3
	__asm__ volatile(
    f3d8:	f04f 0320 	mov.w	r3, #32
    f3dc:	f3ef 8111 	mrs	r1, BASEPRI
    f3e0:	f383 8812 	msr	BASEPRI_MAX, r3
    f3e4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    f3e8:	6943      	ldr	r3, [r0, #20]
    f3ea:	b16b      	cbz	r3, f408 <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
    f3ec:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    f3ee:	6943      	ldr	r3, [r0, #20]
    f3f0:	681b      	ldr	r3, [r3, #0]
    f3f2:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    f3f4:	6983      	ldr	r3, [r0, #24]
    f3f6:	3301      	adds	r3, #1
    f3f8:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    f3fa:	2000      	movs	r0, #0
	__asm__ volatile(
    f3fc:	f381 8811 	msr	BASEPRI, r1
    f400:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    f404:	b003      	add	sp, #12
    f406:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f408:	4616      	mov	r6, r2
    f40a:	f100 0508 	add.w	r5, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    f40e:	ea56 0307 	orrs.w	r3, r6, r7
    f412:	d104      	bne.n	f41e <k_mem_slab_alloc+0x4e>
		*mem = NULL;
    f414:	2300      	movs	r3, #0
    f416:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    f418:	f06f 000b 	mvn.w	r0, #11
    f41c:	e7ee      	b.n	f3fc <k_mem_slab_alloc+0x2c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    f41e:	e9cd 6700 	strd	r6, r7, [sp]
    f422:	4602      	mov	r2, r0
    f424:	4628      	mov	r0, r5
    f426:	f000 fd89 	bl	ff3c <z_pend_curr>
		if (result == 0) {
    f42a:	2800      	cmp	r0, #0
    f42c:	d1ea      	bne.n	f404 <k_mem_slab_alloc+0x34>
			*mem = _current->base.swap_data;
    f42e:	4b02      	ldr	r3, [pc, #8]	; (f438 <k_mem_slab_alloc+0x68>)
    f430:	689b      	ldr	r3, [r3, #8]
    f432:	695b      	ldr	r3, [r3, #20]
    f434:	6023      	str	r3, [r4, #0]
		return result;
    f436:	e7e5      	b.n	f404 <k_mem_slab_alloc+0x34>
    f438:	20002f18 	.word	0x20002f18

0000f43c <z_thread_monitor_exit>:
	__asm__ volatile(
    f43c:	f04f 0320 	mov.w	r3, #32
    f440:	f3ef 8111 	mrs	r1, BASEPRI
    f444:	f383 8812 	msr	BASEPRI_MAX, r3
    f448:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    f44c:	4b0a      	ldr	r3, [pc, #40]	; (f478 <z_thread_monitor_exit+0x3c>)
    f44e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f450:	4283      	cmp	r3, r0
    f452:	d104      	bne.n	f45e <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    f454:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    f456:	4b08      	ldr	r3, [pc, #32]	; (f478 <z_thread_monitor_exit+0x3c>)
    f458:	629a      	str	r2, [r3, #40]	; 0x28
    f45a:	e007      	b.n	f46c <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    f45c:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    f45e:	b113      	cbz	r3, f466 <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    f460:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    f462:	4282      	cmp	r2, r0
    f464:	d1fa      	bne.n	f45c <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    f466:	b10b      	cbz	r3, f46c <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    f468:	6f02      	ldr	r2, [r0, #112]	; 0x70
    f46a:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    f46c:	f381 8811 	msr	BASEPRI, r1
    f470:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    f474:	4770      	bx	lr
    f476:	bf00      	nop
    f478:	20002f18 	.word	0x20002f18

0000f47c <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    f47c:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    f47e:	4604      	mov	r4, r0
    f480:	b140      	cbz	r0, f494 <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
    f482:	2220      	movs	r2, #32
    f484:	f104 0074 	add.w	r0, r4, #116	; 0x74
    f488:	f003 faa6 	bl	129d8 <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    f48c:	2000      	movs	r0, #0
    f48e:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    f492:	bd10      	pop	{r4, pc}
		thread = _current;
    f494:	4b01      	ldr	r3, [pc, #4]	; (f49c <z_impl_k_thread_name_set+0x20>)
    f496:	689c      	ldr	r4, [r3, #8]
    f498:	e7f3      	b.n	f482 <z_impl_k_thread_name_set+0x6>
    f49a:	bf00      	nop
    f49c:	20002f18 	.word	0x20002f18

0000f4a0 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    f4a0:	b538      	push	{r3, r4, r5, lr}
    f4a2:	4614      	mov	r4, r2
    f4a4:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    f4a6:	ea54 0305 	orrs.w	r3, r4, r5
    f4aa:	d102      	bne.n	f4b2 <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
    f4ac:	f005 ffbb 	bl	15426 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    f4b0:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    f4b2:	462b      	mov	r3, r5
    f4b4:	4902      	ldr	r1, [pc, #8]	; (f4c0 <schedule_new_thread+0x20>)
    f4b6:	3018      	adds	r0, #24
    f4b8:	f001 f81e 	bl	104f8 <z_add_timeout>
    f4bc:	e7f8      	b.n	f4b0 <schedule_new_thread+0x10>
    f4be:	bf00      	nop
    f4c0:	00015783 	.word	0x00015783

0000f4c4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    f4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f4c8:	b085      	sub	sp, #20
    f4ca:	4604      	mov	r4, r0
    f4cc:	460f      	mov	r7, r1
    f4ce:	4615      	mov	r5, r2
    f4d0:	461e      	mov	r6, r3
    f4d2:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    f4d6:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    f4da:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    f4de:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    f4e2:	f100 0358 	add.w	r3, r0, #88	; 0x58
	list->head = (sys_dnode_t *)list;
    f4e6:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    f4e8:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    f4ea:	9b12      	ldr	r3, [sp, #72]	; 0x48
    f4ec:	2204      	movs	r2, #4
    f4ee:	9911      	ldr	r1, [sp, #68]	; 0x44
    f4f0:	f005 ff9d 	bl	1542e <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    f4f4:	462a      	mov	r2, r5
    f4f6:	4639      	mov	r1, r7
    f4f8:	4620      	mov	r0, r4
    f4fa:	f005 ff7a 	bl	153f2 <setup_thread_stack>
    f4fe:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    f500:	f8cd 8008 	str.w	r8, [sp, #8]
    f504:	f8cd 9004 	str.w	r9, [sp, #4]
    f508:	f8cd a000 	str.w	sl, [sp]
    f50c:	4633      	mov	r3, r6
    f50e:	4602      	mov	r2, r0
    f510:	4639      	mov	r1, r7
    f512:	4620      	mov	r0, r4
    f514:	f7f5 feb0 	bl	5278 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    f518:	2300      	movs	r3, #0
    f51a:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    f51c:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    f51e:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    f522:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    f526:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    f52a:	f04f 0320 	mov.w	r3, #32
    f52e:	f3ef 8211 	mrs	r2, BASEPRI
    f532:	f383 8812 	msr	BASEPRI_MAX, r3
    f536:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    f53a:	4b13      	ldr	r3, [pc, #76]	; (f588 <z_setup_new_thread+0xc4>)
    f53c:	6a99      	ldr	r1, [r3, #40]	; 0x28
    f53e:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    f540:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    f542:	f382 8811 	msr	BASEPRI, r2
    f546:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    f54a:	f1bb 0f00 	cmp.w	fp, #0
    f54e:	d013      	beq.n	f578 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
    f550:	221f      	movs	r2, #31
    f552:	4659      	mov	r1, fp
    f554:	f104 0074 	add.w	r0, r4, #116	; 0x74
    f558:	f003 fa3e 	bl	129d8 <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    f55c:	2300      	movs	r3, #0
    f55e:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    f562:	4b09      	ldr	r3, [pc, #36]	; (f588 <z_setup_new_thread+0xc4>)
    f564:	689b      	ldr	r3, [r3, #8]
    f566:	b15b      	cbz	r3, f580 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    f568:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    f56c:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
#ifdef CONFIG_THREAD_RUNTIME_STATS
	memset(&new_thread->rt_stats, 0, sizeof(new_thread->rt_stats));
#endif

	return stack_ptr;
}
    f570:	4628      	mov	r0, r5
    f572:	b005      	add	sp, #20
    f574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    f578:	2300      	movs	r3, #0
    f57a:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    f57e:	e7f0      	b.n	f562 <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    f580:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    f584:	e7f4      	b.n	f570 <z_setup_new_thread+0xac>
    f586:	bf00      	nop
    f588:	20002f18 	.word	0x20002f18

0000f58c <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    f58c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    f590:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    f592:	4c23      	ldr	r4, [pc, #140]	; (f620 <z_init_static_threads+0x94>)
    f594:	4b23      	ldr	r3, [pc, #140]	; (f624 <z_init_static_threads+0x98>)
    f596:	429c      	cmp	r4, r3
    f598:	d215      	bcs.n	f5c6 <z_init_static_threads+0x3a>
		z_setup_new_thread(
    f59a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    f59c:	9305      	str	r3, [sp, #20]
    f59e:	6a23      	ldr	r3, [r4, #32]
    f5a0:	9304      	str	r3, [sp, #16]
    f5a2:	69e3      	ldr	r3, [r4, #28]
    f5a4:	9303      	str	r3, [sp, #12]
    f5a6:	69a3      	ldr	r3, [r4, #24]
    f5a8:	9302      	str	r3, [sp, #8]
    f5aa:	6963      	ldr	r3, [r4, #20]
    f5ac:	9301      	str	r3, [sp, #4]
    f5ae:	6923      	ldr	r3, [r4, #16]
    f5b0:	9300      	str	r3, [sp, #0]
    f5b2:	68e3      	ldr	r3, [r4, #12]
    f5b4:	68a2      	ldr	r2, [r4, #8]
    f5b6:	6861      	ldr	r1, [r4, #4]
    f5b8:	6820      	ldr	r0, [r4, #0]
    f5ba:	f7ff ff83 	bl	f4c4 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    f5be:	6823      	ldr	r3, [r4, #0]
    f5c0:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    f5c2:	3430      	adds	r4, #48	; 0x30
    f5c4:	e7e6      	b.n	f594 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    f5c6:	f000 fb71 	bl	fcac <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    f5ca:	4c15      	ldr	r4, [pc, #84]	; (f620 <z_init_static_threads+0x94>)
    f5cc:	e01b      	b.n	f606 <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
    f5ce:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    f5d0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    f5d4:	ea4f 79e3 	mov.w	r9, r3, asr #31
		} else {
			return (t * to_hz + off) / from_hz;
    f5d8:	ea4f 31c9 	mov.w	r1, r9, lsl #15
    f5dc:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    f5e0:	03d8      	lsls	r0, r3, #15
    f5e2:	f240 35e7 	movw	r5, #999	; 0x3e7
    f5e6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    f5ea:	2300      	movs	r3, #0
    f5ec:	1940      	adds	r0, r0, r5
    f5ee:	f04f 0500 	mov.w	r5, #0
    f5f2:	eb45 0101 	adc.w	r1, r5, r1
    f5f6:	f7f1 fb9f 	bl	d38 <__aeabi_uldivmod>
    f5fa:	4602      	mov	r2, r0
    f5fc:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    f5fe:	4630      	mov	r0, r6
    f600:	f7ff ff4e 	bl	f4a0 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
    f604:	3430      	adds	r4, #48	; 0x30
    f606:	4b07      	ldr	r3, [pc, #28]	; (f624 <z_init_static_threads+0x98>)
    f608:	429c      	cmp	r4, r3
    f60a:	d204      	bcs.n	f616 <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    f60c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f60e:	f1b3 3fff 	cmp.w	r3, #4294967295
    f612:	d0f7      	beq.n	f604 <z_init_static_threads+0x78>
    f614:	e7db      	b.n	f5ce <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
    f616:	f000 fd47 	bl	100a8 <k_sched_unlock>
}
    f61a:	b006      	add	sp, #24
    f61c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    f620:	20000348 	.word	0x20000348
    f624:	20000348 	.word	0x20000348

0000f628 <pm_save_idle>:
 *
 * Sets the kernel data structure idle field to either a positive value or
 * K_FOREVER.
 */
static void pm_save_idle(void)
{
    f628:	b508      	push	{r3, lr}
#ifdef CONFIG_PM
	int32_t ticks = z_get_next_timeout_expiry();
    f62a:	f006 f9f8 	bl	15a1e <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
    f62e:	4b04      	ldr	r3, [pc, #16]	; (f640 <pm_save_idle+0x18>)
    f630:	6198      	str	r0, [r3, #24]
	 * before exiting. This is because the kernel does not do its own idle
	 * processing in those cases i.e. skips k_cpu_idle(). The kernel's
	 * idle processing re-enables interrupts which is essential for
	 * the kernel's scheduling logic.
	 */
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
    f632:	f7f5 fbbf 	bl	4db4 <pm_system_suspend>
    f636:	b100      	cbz	r0, f63a <pm_save_idle+0x12>
		k_cpu_idle();
	}
#endif
}
    f638:	bd08      	pop	{r3, pc}
	arch_cpu_idle();
    f63a:	f7f5 fcf7 	bl	502c <arch_cpu_idle>
    f63e:	e7fb      	b.n	f638 <pm_save_idle+0x10>
    f640:	20002f18 	.word	0x20002f18

0000f644 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    f644:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f648:	b083      	sub	sp, #12
    f64a:	4604      	mov	r4, r0
    f64c:	461d      	mov	r5, r3
	__asm__ volatile(
    f64e:	f04f 0320 	mov.w	r3, #32
    f652:	f3ef 8711 	mrs	r7, BASEPRI
    f656:	f383 8812 	msr	BASEPRI_MAX, r3
    f65a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    f65e:	68c1      	ldr	r1, [r0, #12]
    f660:	b999      	cbnz	r1, f68a <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    f662:	2900      	cmp	r1, #0
    f664:	d14f      	bne.n	f706 <z_impl_k_mutex_lock+0xc2>
    f666:	4b3a      	ldr	r3, [pc, #232]	; (f750 <z_impl_k_mutex_lock+0x10c>)
    f668:	689b      	ldr	r3, [r3, #8]
    f66a:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    f66e:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    f670:	3101      	adds	r1, #1
    f672:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    f674:	4b36      	ldr	r3, [pc, #216]	; (f750 <z_impl_k_mutex_lock+0x10c>)
    f676:	689b      	ldr	r3, [r3, #8]
    f678:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    f67a:	f387 8811 	msr	BASEPRI, r7
    f67e:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    f682:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    f684:	b003      	add	sp, #12
    f686:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f68a:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    f68c:	6882      	ldr	r2, [r0, #8]
    f68e:	4b30      	ldr	r3, [pc, #192]	; (f750 <z_impl_k_mutex_lock+0x10c>)
    f690:	689b      	ldr	r3, [r3, #8]
    f692:	429a      	cmp	r2, r3
    f694:	d0e5      	beq.n	f662 <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    f696:	ea55 0106 	orrs.w	r1, r5, r6
    f69a:	bf0c      	ite	eq
    f69c:	f04f 0801 	moveq.w	r8, #1
    f6a0:	f04f 0800 	movne.w	r8, #0
    f6a4:	d031      	beq.n	f70a <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
    f6a6:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    f6aa:	4649      	mov	r1, r9
    f6ac:	f993 000e 	ldrsb.w	r0, [r3, #14]
    f6b0:	f005 fefc 	bl	154ac <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    f6b4:	4581      	cmp	r9, r0
    f6b6:	dc2f      	bgt.n	f718 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
    f6b8:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    f6bc:	9600      	str	r6, [sp, #0]
    f6be:	9501      	str	r5, [sp, #4]
    f6c0:	4622      	mov	r2, r4
    f6c2:	4639      	mov	r1, r7
    f6c4:	4823      	ldr	r0, [pc, #140]	; (f754 <z_impl_k_mutex_lock+0x110>)
    f6c6:	f000 fc39 	bl	ff3c <z_pend_curr>
	if (got_mutex == 0) {
    f6ca:	2800      	cmp	r0, #0
    f6cc:	d0da      	beq.n	f684 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
    f6ce:	f04f 0320 	mov.w	r3, #32
    f6d2:	f3ef 8511 	mrs	r5, BASEPRI
    f6d6:	f383 8812 	msr	BASEPRI_MAX, r3
    f6da:	f3bf 8f6f 	isb	sy
	return list->head == list;
    f6de:	6823      	ldr	r3, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    f6e0:	42a3      	cmp	r3, r4
    f6e2:	d01f      	beq.n	f724 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    f6e4:	b1f3      	cbz	r3, f724 <z_impl_k_mutex_lock+0xe0>
    f6e6:	6921      	ldr	r1, [r4, #16]
    f6e8:	f993 000e 	ldrsb.w	r0, [r3, #14]
    f6ec:	f005 fede 	bl	154ac <new_prio_for_inheritance>
    f6f0:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    f6f2:	4620      	mov	r0, r4
    f6f4:	f005 fee5 	bl	154c2 <adjust_owner_prio>
    f6f8:	b9b0      	cbnz	r0, f728 <z_impl_k_mutex_lock+0xe4>
    f6fa:	f1b9 0f00 	cmp.w	r9, #0
    f6fe:	d015      	beq.n	f72c <z_impl_k_mutex_lock+0xe8>
    f700:	f04f 0801 	mov.w	r8, #1
    f704:	e012      	b.n	f72c <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    f706:	6923      	ldr	r3, [r4, #16]
    f708:	e7b1      	b.n	f66e <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
    f70a:	f387 8811 	msr	BASEPRI, r7
    f70e:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    f712:	f06f 000f 	mvn.w	r0, #15
    f716:	e7b5      	b.n	f684 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
    f718:	4601      	mov	r1, r0
    f71a:	4620      	mov	r0, r4
    f71c:	f005 fed1 	bl	154c2 <adjust_owner_prio>
    f720:	4681      	mov	r9, r0
    f722:	e7cb      	b.n	f6bc <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    f724:	6921      	ldr	r1, [r4, #16]
    f726:	e7e4      	b.n	f6f2 <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    f728:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    f72c:	f1b8 0f00 	cmp.w	r8, #0
    f730:	d106      	bne.n	f740 <z_impl_k_mutex_lock+0xfc>
    f732:	f385 8811 	msr	BASEPRI, r5
    f736:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    f73a:	f06f 000a 	mvn.w	r0, #10
    f73e:	e7a1      	b.n	f684 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
    f740:	4629      	mov	r1, r5
    f742:	4804      	ldr	r0, [pc, #16]	; (f754 <z_impl_k_mutex_lock+0x110>)
    f744:	f000 fa96 	bl	fc74 <z_reschedule>
	return -EAGAIN;
    f748:	f06f 000a 	mvn.w	r0, #10
    f74c:	e79a      	b.n	f684 <z_impl_k_mutex_lock+0x40>
    f74e:	bf00      	nop
    f750:	20002f18 	.word	0x20002f18
    f754:	20002f44 	.word	0x20002f44

0000f758 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    f758:	6882      	ldr	r2, [r0, #8]
    f75a:	2a00      	cmp	r2, #0
    f75c:	d035      	beq.n	f7ca <z_impl_k_mutex_unlock+0x72>
{
    f75e:	b538      	push	{r3, r4, r5, lr}
    f760:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    f762:	4b1d      	ldr	r3, [pc, #116]	; (f7d8 <z_impl_k_mutex_unlock+0x80>)
    f764:	689b      	ldr	r3, [r3, #8]
    f766:	429a      	cmp	r2, r3
    f768:	d132      	bne.n	f7d0 <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    f76a:	7bda      	ldrb	r2, [r3, #15]
    f76c:	3a01      	subs	r2, #1
    f76e:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    f770:	68c3      	ldr	r3, [r0, #12]
    f772:	2b01      	cmp	r3, #1
    f774:	d905      	bls.n	f782 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    f776:	3b01      	subs	r3, #1
    f778:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    f77a:	f000 fc95 	bl	100a8 <k_sched_unlock>

	return 0;
    f77e:	2000      	movs	r0, #0
}
    f780:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    f782:	f04f 0320 	mov.w	r3, #32
    f786:	f3ef 8511 	mrs	r5, BASEPRI
    f78a:	f383 8812 	msr	BASEPRI_MAX, r3
    f78e:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    f792:	6901      	ldr	r1, [r0, #16]
    f794:	f005 fe95 	bl	154c2 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    f798:	4620      	mov	r0, r4
    f79a:	f006 f898 	bl	158ce <z_unpend_first_thread>
	mutex->owner = new_owner;
    f79e:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    f7a0:	b160      	cbz	r0, f7bc <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    f7a2:	f990 300e 	ldrsb.w	r3, [r0, #14]
    f7a6:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    f7a8:	2300      	movs	r3, #0
    f7aa:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    f7ae:	f005 ffcc 	bl	1574a <z_ready_thread>
		z_reschedule(&lock, key);
    f7b2:	4629      	mov	r1, r5
    f7b4:	4809      	ldr	r0, [pc, #36]	; (f7dc <z_impl_k_mutex_unlock+0x84>)
    f7b6:	f000 fa5d 	bl	fc74 <z_reschedule>
    f7ba:	e7de      	b.n	f77a <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    f7bc:	2300      	movs	r3, #0
    f7be:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
    f7c0:	f385 8811 	msr	BASEPRI, r5
    f7c4:	f3bf 8f6f 	isb	sy
    f7c8:	e7d7      	b.n	f77a <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    f7ca:	f06f 0015 	mvn.w	r0, #21
}
    f7ce:	4770      	bx	lr
		return -EPERM;
    f7d0:	f04f 30ff 	mov.w	r0, #4294967295
    f7d4:	e7d4      	b.n	f780 <z_impl_k_mutex_unlock+0x28>
    f7d6:	bf00      	nop
    f7d8:	20002f18 	.word	0x20002f18
    f7dc:	20002f44 	.word	0x20002f44

0000f7e0 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    f7e0:	b5d0      	push	{r4, r6, r7, lr}
    f7e2:	b082      	sub	sp, #8
    f7e4:	4601      	mov	r1, r0
    f7e6:	4616      	mov	r6, r2
    f7e8:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    f7ea:	4602      	mov	r2, r0
	__asm__ volatile(
    f7ec:	f04f 0320 	mov.w	r3, #32
    f7f0:	f3ef 8411 	mrs	r4, BASEPRI
    f7f4:	f383 8812 	msr	BASEPRI_MAX, r3
    f7f8:	f3bf 8f6f 	isb	sy
    f7fc:	f852 0b08 	ldr.w	r0, [r2], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    f800:	b188      	cbz	r0, f826 <z_impl_k_queue_get+0x46>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    f802:	6803      	ldr	r3, [r0, #0]
    f804:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
    f808:	600b      	str	r3, [r1, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
    f80a:	684a      	ldr	r2, [r1, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    f80c:	4290      	cmp	r0, r2
    f80e:	d008      	beq.n	f822 <z_impl_k_queue_get+0x42>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    f810:	2101      	movs	r1, #1
    f812:	f005 fed6 	bl	155c2 <z_queue_node_peek>
	__asm__ volatile(
    f816:	f384 8811 	msr	BASEPRI, r4
    f81a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    f81e:	b002      	add	sp, #8
    f820:	bdd0      	pop	{r4, r6, r7, pc}
	list->tail = node;
    f822:	604b      	str	r3, [r1, #4]
}
    f824:	e7f4      	b.n	f810 <z_impl_k_queue_get+0x30>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    f826:	ea56 0307 	orrs.w	r3, r6, r7
    f82a:	d00a      	beq.n	f842 <z_impl_k_queue_get+0x62>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    f82c:	e9cd 6700 	strd	r6, r7, [sp]
    f830:	4621      	mov	r1, r4
    f832:	4610      	mov	r0, r2
    f834:	f000 fb82 	bl	ff3c <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    f838:	b948      	cbnz	r0, f84e <z_impl_k_queue_get+0x6e>
    f83a:	4b06      	ldr	r3, [pc, #24]	; (f854 <z_impl_k_queue_get+0x74>)
    f83c:	689b      	ldr	r3, [r3, #8]
    f83e:	6958      	ldr	r0, [r3, #20]
    f840:	e7ed      	b.n	f81e <z_impl_k_queue_get+0x3e>
    f842:	f384 8811 	msr	BASEPRI, r4
    f846:	f3bf 8f6f 	isb	sy
		return NULL;
    f84a:	2000      	movs	r0, #0
    f84c:	e7e7      	b.n	f81e <z_impl_k_queue_get+0x3e>
	return (ret != 0) ? NULL : _current->base.swap_data;
    f84e:	2000      	movs	r0, #0
    f850:	e7e5      	b.n	f81e <z_impl_k_queue_get+0x3e>
    f852:	bf00      	nop
    f854:	20002f18 	.word	0x20002f18

0000f858 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    f858:	b538      	push	{r3, r4, r5, lr}
    f85a:	4604      	mov	r4, r0
	__asm__ volatile(
    f85c:	f04f 0320 	mov.w	r3, #32
    f860:	f3ef 8511 	mrs	r5, BASEPRI
    f864:	f383 8812 	msr	BASEPRI_MAX, r3
    f868:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    f86c:	f006 f82f 	bl	158ce <z_unpend_first_thread>

	if (thread != NULL) {
    f870:	b148      	cbz	r0, f886 <z_impl_k_sem_give+0x2e>
    f872:	2200      	movs	r2, #0
    f874:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    f878:	f005 ff67 	bl	1574a <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    f87c:	4629      	mov	r1, r5
    f87e:	4807      	ldr	r0, [pc, #28]	; (f89c <z_impl_k_sem_give+0x44>)
    f880:	f000 f9f8 	bl	fc74 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    f884:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    f886:	68a3      	ldr	r3, [r4, #8]
    f888:	68e2      	ldr	r2, [r4, #12]
    f88a:	4293      	cmp	r3, r2
    f88c:	d003      	beq.n	f896 <z_impl_k_sem_give+0x3e>
    f88e:	2201      	movs	r2, #1
    f890:	4413      	add	r3, r2
    f892:	60a3      	str	r3, [r4, #8]
}
    f894:	e7f2      	b.n	f87c <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    f896:	2200      	movs	r2, #0
    f898:	e7fa      	b.n	f890 <z_impl_k_sem_give+0x38>
    f89a:	bf00      	nop
    f89c:	20002f44 	.word	0x20002f44

0000f8a0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    f8a0:	b530      	push	{r4, r5, lr}
    f8a2:	b083      	sub	sp, #12
    f8a4:	461d      	mov	r5, r3
    f8a6:	f04f 0320 	mov.w	r3, #32
    f8aa:	f3ef 8111 	mrs	r1, BASEPRI
    f8ae:	f383 8812 	msr	BASEPRI_MAX, r3
    f8b2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    f8b6:	6883      	ldr	r3, [r0, #8]
    f8b8:	b143      	cbz	r3, f8cc <z_impl_k_sem_take+0x2c>
		sem->count--;
    f8ba:	3b01      	subs	r3, #1
    f8bc:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    f8be:	f381 8811 	msr	BASEPRI, r1
    f8c2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    f8c6:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    f8c8:	b003      	add	sp, #12
    f8ca:	bd30      	pop	{r4, r5, pc}
    f8cc:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    f8ce:	ea54 0305 	orrs.w	r3, r4, r5
    f8d2:	d006      	beq.n	f8e2 <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    f8d4:	e9cd 4500 	strd	r4, r5, [sp]
    f8d8:	4602      	mov	r2, r0
    f8da:	4805      	ldr	r0, [pc, #20]	; (f8f0 <z_impl_k_sem_take+0x50>)
    f8dc:	f000 fb2e 	bl	ff3c <z_pend_curr>
	return ret;
    f8e0:	e7f2      	b.n	f8c8 <z_impl_k_sem_take+0x28>
    f8e2:	f381 8811 	msr	BASEPRI, r1
    f8e6:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    f8ea:	f06f 000f 	mvn.w	r0, #15
    f8ee:	e7eb      	b.n	f8c8 <z_impl_k_sem_take+0x28>
    f8f0:	20002f44 	.word	0x20002f44

0000f8f4 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
    f8f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f8f6:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
    f8f8:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    f8fa:	f013 0f02 	tst.w	r3, #2
    f8fe:	d15b      	bne.n	f9b8 <submit_to_queue_locked+0xc4>
    f900:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    f902:	f013 0f04 	tst.w	r3, #4
    f906:	d15c      	bne.n	f9c2 <submit_to_queue_locked+0xce>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
    f908:	680b      	ldr	r3, [r1, #0]
    f90a:	2b00      	cmp	r3, #0
    f90c:	d037      	beq.n	f97e <submit_to_queue_locked+0x8a>
	return (*flagp & BIT(bit)) != 0U;
    f90e:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    f910:	f013 0f01 	tst.w	r3, #1
    f914:	d036      	beq.n	f984 <submit_to_queue_locked+0x90>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
    f916:	68a3      	ldr	r3, [r4, #8]
    f918:	602b      	str	r3, [r5, #0]
			ret = 2;
    f91a:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
    f91c:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
    f91e:	2e00      	cmp	r6, #0
    f920:	d03e      	beq.n	f9a0 <submit_to_queue_locked+0xac>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    f922:	4b29      	ldr	r3, [pc, #164]	; (f9c8 <submit_to_queue_locked+0xd4>)
    f924:	689b      	ldr	r3, [r3, #8]
    f926:	42b3      	cmp	r3, r6
    f928:	d02e      	beq.n	f988 <submit_to_queue_locked+0x94>
    f92a:	2300      	movs	r3, #0
    f92c:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
    f92e:	f8d6 30c8 	ldr.w	r3, [r6, #200]	; 0xc8
    f932:	f3c3 0180 	ubfx	r1, r3, #2, #1
    f936:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    f93a:	f013 0f01 	tst.w	r3, #1
    f93e:	d032      	beq.n	f9a6 <submit_to_queue_locked+0xb2>
	} else if (draining && !chained) {
    f940:	b101      	cbz	r1, f944 <submit_to_queue_locked+0x50>
    f942:	b39a      	cbz	r2, f9ac <submit_to_queue_locked+0xb8>
	} else if (plugged && !draining) {
    f944:	b100      	cbz	r0, f948 <submit_to_queue_locked+0x54>
    f946:	b3a1      	cbz	r1, f9b2 <submit_to_queue_locked+0xbe>
	parent->next = child;
    f948:	2300      	movs	r3, #0
    f94a:	6023      	str	r3, [r4, #0]
	return list->tail;
    f94c:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
Z_GENLIST_APPEND(slist, snode)
    f950:	b30b      	cbz	r3, f996 <submit_to_queue_locked+0xa2>
	parent->next = child;
    f952:	601c      	str	r4, [r3, #0]
	list->tail = node;
    f954:	f8c6 40b4 	str.w	r4, [r6, #180]	; 0xb4
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    f958:	2200      	movs	r2, #0
    f95a:	4611      	mov	r1, r2
    f95c:	f106 00b8 	add.w	r0, r6, #184	; 0xb8
    f960:	f005 fff1 	bl	15946 <z_sched_wake>
		ret = 1;
    f964:	2001      	movs	r0, #1

		if (rc < 0) {
    f966:	2800      	cmp	r0, #0
    f968:	db06      	blt.n	f978 <submit_to_queue_locked+0x84>
	*flagp |= BIT(bit);
    f96a:	68e3      	ldr	r3, [r4, #12]
    f96c:	f043 0304 	orr.w	r3, r3, #4
    f970:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
    f972:	682b      	ldr	r3, [r5, #0]
    f974:	60a3      	str	r3, [r4, #8]
    f976:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
    f978:	2800      	cmp	r0, #0
    f97a:	dc21      	bgt.n	f9c0 <submit_to_queue_locked+0xcc>
    f97c:	e01e      	b.n	f9bc <submit_to_queue_locked+0xc8>
			*queuep = work->queue;
    f97e:	6883      	ldr	r3, [r0, #8]
    f980:	600b      	str	r3, [r1, #0]
    f982:	e7c4      	b.n	f90e <submit_to_queue_locked+0x1a>
		ret = 1;
    f984:	2701      	movs	r7, #1
    f986:	e7c9      	b.n	f91c <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    f988:	f005 fd45 	bl	15416 <k_is_in_isr>
    f98c:	b908      	cbnz	r0, f992 <submit_to_queue_locked+0x9e>
    f98e:	2301      	movs	r3, #1
    f990:	e7cc      	b.n	f92c <submit_to_queue_locked+0x38>
    f992:	2300      	movs	r3, #0
    f994:	e7ca      	b.n	f92c <submit_to_queue_locked+0x38>
    f996:	f8c6 40b4 	str.w	r4, [r6, #180]	; 0xb4
	list->head = node;
    f99a:	f8c6 40b0 	str.w	r4, [r6, #176]	; 0xb0
}
    f99e:	e7db      	b.n	f958 <submit_to_queue_locked+0x64>
		return -EINVAL;
    f9a0:	f06f 0015 	mvn.w	r0, #21
    f9a4:	e7df      	b.n	f966 <submit_to_queue_locked+0x72>
		ret = -ENODEV;
    f9a6:	f06f 0012 	mvn.w	r0, #18
    f9aa:	e7dc      	b.n	f966 <submit_to_queue_locked+0x72>
		ret = -EBUSY;
    f9ac:	f06f 000f 	mvn.w	r0, #15
    f9b0:	e7d9      	b.n	f966 <submit_to_queue_locked+0x72>
		ret = -EBUSY;
    f9b2:	f06f 000f 	mvn.w	r0, #15
    f9b6:	e7d6      	b.n	f966 <submit_to_queue_locked+0x72>
		ret = -EBUSY;
    f9b8:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
    f9bc:	2300      	movs	r3, #0
    f9be:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
    f9c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
    f9c2:	2000      	movs	r0, #0
    f9c4:	e7fa      	b.n	f9bc <submit_to_queue_locked+0xc8>
    f9c6:	bf00      	nop
    f9c8:	20002f18 	.word	0x20002f18

0000f9cc <finalize_cancel_locked>:
{
    f9cc:	b570      	push	{r4, r5, r6, lr}
    f9ce:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
    f9d0:	68c3      	ldr	r3, [r0, #12]
    f9d2:	f023 0302 	bic.w	r3, r3, #2
    f9d6:	60c3      	str	r3, [r0, #12]
	return list->head;
    f9d8:	4b19      	ldr	r3, [pc, #100]	; (fa40 <finalize_cancel_locked+0x74>)
    f9da:	6818      	ldr	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    f9dc:	b1e8      	cbz	r0, fa1a <finalize_cancel_locked+0x4e>
    f9de:	4604      	mov	r4, r0
Z_GENLIST_PEEK_NEXT(slist, snode)
    f9e0:	b100      	cbz	r0, f9e4 <finalize_cancel_locked+0x18>
	return node->next;
    f9e2:	6804      	ldr	r4, [r0, #0]
    f9e4:	2600      	movs	r6, #0
    f9e6:	e01d      	b.n	fa24 <finalize_cancel_locked+0x58>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    f9e8:	b15e      	cbz	r6, fa02 <finalize_cancel_locked+0x36>
	return node->next;
    f9ea:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
    f9ec:	6033      	str	r3, [r6, #0]
	return list->tail;
    f9ee:	4b14      	ldr	r3, [pc, #80]	; (fa40 <finalize_cancel_locked+0x74>)
    f9f0:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    f9f2:	4298      	cmp	r0, r3
    f9f4:	d00e      	beq.n	fa14 <finalize_cancel_locked+0x48>
	parent->next = child;
    f9f6:	2300      	movs	r3, #0
    f9f8:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    f9fc:	f7ff ff2c 	bl	f858 <z_impl_k_sem_give>
}
    fa00:	e015      	b.n	fa2e <finalize_cancel_locked+0x62>
	return node->next;
    fa02:	6802      	ldr	r2, [r0, #0]
	list->head = node;
    fa04:	4b0e      	ldr	r3, [pc, #56]	; (fa40 <finalize_cancel_locked+0x74>)
    fa06:	601a      	str	r2, [r3, #0]
	return list->tail;
    fa08:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    fa0a:	4298      	cmp	r0, r3
    fa0c:	d1f3      	bne.n	f9f6 <finalize_cancel_locked+0x2a>
	list->tail = node;
    fa0e:	4b0c      	ldr	r3, [pc, #48]	; (fa40 <finalize_cancel_locked+0x74>)
    fa10:	605a      	str	r2, [r3, #4]
}
    fa12:	e7f0      	b.n	f9f6 <finalize_cancel_locked+0x2a>
	list->tail = node;
    fa14:	4b0a      	ldr	r3, [pc, #40]	; (fa40 <finalize_cancel_locked+0x74>)
    fa16:	605e      	str	r6, [r3, #4]
}
    fa18:	e7ed      	b.n	f9f6 <finalize_cancel_locked+0x2a>
    fa1a:	4604      	mov	r4, r0
    fa1c:	e7e2      	b.n	f9e4 <finalize_cancel_locked+0x18>
    fa1e:	4623      	mov	r3, r4
    fa20:	4620      	mov	r0, r4
    fa22:	461c      	mov	r4, r3
    fa24:	b150      	cbz	r0, fa3c <finalize_cancel_locked+0x70>
		if (wc->work == work) {
    fa26:	6843      	ldr	r3, [r0, #4]
    fa28:	42ab      	cmp	r3, r5
    fa2a:	d0dd      	beq.n	f9e8 <finalize_cancel_locked+0x1c>
			prev = &wc->node;
    fa2c:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    fa2e:	2c00      	cmp	r4, #0
    fa30:	d0f5      	beq.n	fa1e <finalize_cancel_locked+0x52>
    fa32:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    fa34:	2c00      	cmp	r4, #0
    fa36:	d0f3      	beq.n	fa20 <finalize_cancel_locked+0x54>
	return node->next;
    fa38:	6823      	ldr	r3, [r4, #0]
    fa3a:	e7f1      	b.n	fa20 <finalize_cancel_locked+0x54>
}
    fa3c:	bd70      	pop	{r4, r5, r6, pc}
    fa3e:	bf00      	nop
    fa40:	20002f44 	.word	0x20002f44

0000fa44 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    fa44:	b5f0      	push	{r4, r5, r6, r7, lr}
    fa46:	b085      	sub	sp, #20
    fa48:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
    fa4a:	e016      	b.n	fa7a <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
    fa4c:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
	*flagp &= ~BIT(bit);
    fa50:	f023 0204 	bic.w	r2, r3, #4
    fa54:	f8c5 20c8 	str.w	r2, [r5, #200]	; 0xc8
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
    fa58:	f013 0f04 	tst.w	r3, #4
    fa5c:	d158      	bne.n	fb10 <work_queue_main+0xcc>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
    fa5e:	2300      	movs	r3, #0
    fa60:	9302      	str	r3, [sp, #8]
    fa62:	f04f 32ff 	mov.w	r2, #4294967295
    fa66:	f04f 33ff 	mov.w	r3, #4294967295
    fa6a:	e9cd 2300 	strd	r2, r3, [sp]
    fa6e:	f105 02b8 	add.w	r2, r5, #184	; 0xb8
    fa72:	4631      	mov	r1, r6
    fa74:	482e      	ldr	r0, [pc, #184]	; (fb30 <work_queue_main+0xec>)
    fa76:	f000 fccb 	bl	10410 <z_sched_wait>
	__asm__ volatile(
    fa7a:	f04f 0320 	mov.w	r3, #32
    fa7e:	f3ef 8611 	mrs	r6, BASEPRI
    fa82:	f383 8812 	msr	BASEPRI_MAX, r3
    fa86:	f3bf 8f6f 	isb	sy
	return list->head;
    fa8a:	f8d5 40b0 	ldr.w	r4, [r5, #176]	; 0xb0
Z_GENLIST_GET(slist, snode)
    fa8e:	2c00      	cmp	r4, #0
    fa90:	d0dc      	beq.n	fa4c <work_queue_main+0x8>
	return node->next;
    fa92:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    fa94:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
	return list->tail;
    fa98:	f8d5 20b4 	ldr.w	r2, [r5, #180]	; 0xb4
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    fa9c:	4294      	cmp	r4, r2
    fa9e:	d034      	beq.n	fb0a <work_queue_main+0xc6>
	*flagp |= BIT(bit);
    faa0:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    faa4:	f043 0302 	orr.w	r3, r3, #2
    faa8:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
    faac:	68e3      	ldr	r3, [r4, #12]
    faae:	f043 0301 	orr.w	r3, r3, #1
	*flagp &= ~BIT(bit);
    fab2:	f023 0304 	bic.w	r3, r3, #4
    fab6:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
    fab8:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
    faba:	2c00      	cmp	r4, #0
    fabc:	d0cf      	beq.n	fa5e <work_queue_main+0x1a>
	__asm__ volatile(
    fabe:	f386 8811 	msr	BASEPRI, r6
    fac2:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
    fac6:	4620      	mov	r0, r4
    fac8:	4798      	blx	r3
	__asm__ volatile(
    faca:	f04f 0320 	mov.w	r3, #32
    face:	f3ef 8611 	mrs	r6, BASEPRI
    fad2:	f383 8812 	msr	BASEPRI_MAX, r3
    fad6:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    fada:	68e3      	ldr	r3, [r4, #12]
    fadc:	f023 0301 	bic.w	r3, r3, #1
    fae0:	60e3      	str	r3, [r4, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    fae2:	f013 0f02 	tst.w	r3, #2
    fae6:	d11e      	bne.n	fb26 <work_queue_main+0xe2>
	*flagp &= ~BIT(bit);
    fae8:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    faec:	f023 0302 	bic.w	r3, r3, #2
    faf0:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
	return (*flagp & BIT(bit)) != 0U;
    faf4:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
    faf8:	f386 8811 	msr	BASEPRI, r6
    fafc:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
    fb00:	2b00      	cmp	r3, #0
    fb02:	d1ba      	bne.n	fa7a <work_queue_main+0x36>
	z_impl_k_yield();
    fb04:	f000 fb52 	bl	101ac <z_impl_k_yield>
}
    fb08:	e7b7      	b.n	fa7a <work_queue_main+0x36>
	list->tail = node;
    fb0a:	f8c5 30b4 	str.w	r3, [r5, #180]	; 0xb4
}
    fb0e:	e7c7      	b.n	faa0 <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    fb10:	f105 07c0 	add.w	r7, r5, #192	; 0xc0
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    fb14:	2200      	movs	r2, #0
    fb16:	2101      	movs	r1, #1
    fb18:	4638      	mov	r0, r7
    fb1a:	f005 ff14 	bl	15946 <z_sched_wake>
    fb1e:	2800      	cmp	r0, #0
    fb20:	d1f8      	bne.n	fb14 <work_queue_main+0xd0>
		k_work_handler_t handler = NULL;
    fb22:	2300      	movs	r3, #0
    fb24:	e7c9      	b.n	faba <work_queue_main+0x76>
				finalize_cancel_locked(work);
    fb26:	4620      	mov	r0, r4
    fb28:	f7ff ff50 	bl	f9cc <finalize_cancel_locked>
    fb2c:	e7dc      	b.n	fae8 <work_queue_main+0xa4>
    fb2e:	bf00      	nop
    fb30:	20002f44 	.word	0x20002f44

0000fb34 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    fb34:	b5f0      	push	{r4, r5, r6, r7, lr}
    fb36:	b089      	sub	sp, #36	; 0x24
    fb38:	4604      	mov	r4, r0
    fb3a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
    fb3c:	2000      	movs	r0, #0
    fb3e:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
	list->tail = NULL;
    fb42:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    fb46:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
	list->head = (sys_dnode_t *)list;
    fb4a:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = (sys_dnode_t *)list;
    fb4e:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    fb52:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
    fb56:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
    fb5a:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    fb5e:	b1fd      	cbz	r5, fba0 <k_work_queue_start+0x6c>
    fb60:	7928      	ldrb	r0, [r5, #4]
    fb62:	b9f8      	cbnz	r0, fba4 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    fb64:	2001      	movs	r0, #1
	*flagp = flags;
    fb66:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    fb6a:	f04f 36ff 	mov.w	r6, #4294967295
    fb6e:	f04f 37ff 	mov.w	r7, #4294967295
    fb72:	e9cd 6706 	strd	r6, r7, [sp, #24]
    fb76:	2000      	movs	r0, #0
    fb78:	9004      	str	r0, [sp, #16]
    fb7a:	9303      	str	r3, [sp, #12]
    fb7c:	9002      	str	r0, [sp, #8]
    fb7e:	9001      	str	r0, [sp, #4]
    fb80:	9400      	str	r4, [sp, #0]
    fb82:	4b0a      	ldr	r3, [pc, #40]	; (fbac <k_work_queue_start+0x78>)
    fb84:	4620      	mov	r0, r4
    fb86:	f005 fc5d 	bl	15444 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    fb8a:	b125      	cbz	r5, fb96 <k_work_queue_start+0x62>
    fb8c:	6829      	ldr	r1, [r5, #0]
    fb8e:	b111      	cbz	r1, fb96 <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
    fb90:	4620      	mov	r0, r4
    fb92:	f7ff fc73 	bl	f47c <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    fb96:	4620      	mov	r0, r4
    fb98:	f005 fc45 	bl	15426 <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    fb9c:	b009      	add	sp, #36	; 0x24
    fb9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
    fba0:	2001      	movs	r0, #1
    fba2:	e7e0      	b.n	fb66 <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
    fba4:	f240 1001 	movw	r0, #257	; 0x101
    fba8:	e7dd      	b.n	fb66 <k_work_queue_start+0x32>
    fbaa:	bf00      	nop
    fbac:	0000fa45 	.word	0x0000fa45

0000fbb0 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
    fbb0:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    fbb2:	f1b3 3fff 	cmp.w	r3, #4294967295
    fbb6:	bf08      	it	eq
    fbb8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    fbbc:	d100      	bne.n	fbc0 <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
    fbbe:	bd38      	pop	{r3, r4, r5, pc}
    fbc0:	4902      	ldr	r1, [pc, #8]	; (fbcc <add_thread_timeout+0x1c>)
    fbc2:	3018      	adds	r0, #24
    fbc4:	f000 fc98 	bl	104f8 <z_add_timeout>
    fbc8:	e7f9      	b.n	fbbe <add_thread_timeout+0xe>
    fbca:	bf00      	nop
    fbcc:	00015783 	.word	0x00015783

0000fbd0 <z_reset_time_slice>:
{
    fbd0:	b508      	push	{r3, lr}
	if (slice_time != 0) {
    fbd2:	4b08      	ldr	r3, [pc, #32]	; (fbf4 <z_reset_time_slice+0x24>)
    fbd4:	681b      	ldr	r3, [r3, #0]
    fbd6:	b903      	cbnz	r3, fbda <z_reset_time_slice+0xa>
}
    fbd8:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    fbda:	f7f9 fed3 	bl	9984 <sys_clock_elapsed>
    fbde:	4603      	mov	r3, r0
    fbe0:	4a04      	ldr	r2, [pc, #16]	; (fbf4 <z_reset_time_slice+0x24>)
    fbe2:	6810      	ldr	r0, [r2, #0]
    fbe4:	4403      	add	r3, r0
    fbe6:	4a04      	ldr	r2, [pc, #16]	; (fbf8 <z_reset_time_slice+0x28>)
    fbe8:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    fbea:	2100      	movs	r1, #0
    fbec:	f005 ff2d 	bl	15a4a <z_set_timeout_expiry>
}
    fbf0:	e7f2      	b.n	fbd8 <z_reset_time_slice+0x8>
    fbf2:	bf00      	nop
    fbf4:	20002f54 	.word	0x20002f54
    fbf8:	20002f18 	.word	0x20002f18

0000fbfc <k_sched_time_slice_set>:
{
    fbfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fc00:	4606      	mov	r6, r0
    fc02:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
    fc04:	2300      	movs	r3, #0
	__asm__ volatile(
    fc06:	f04f 0220 	mov.w	r2, #32
    fc0a:	f3ef 8711 	mrs	r7, BASEPRI
    fc0e:	f382 8812 	msr	BASEPRI_MAX, r2
    fc12:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    fc16:	e009      	b.n	fc2c <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
    fc18:	4b13      	ldr	r3, [pc, #76]	; (fc68 <k_sched_time_slice_set+0x6c>)
    fc1a:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
    fc1e:	f7ff ffd7 	bl	fbd0 <z_reset_time_slice>
	__asm__ volatile(
    fc22:	f387 8811 	msr	BASEPRI, r7
    fc26:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    fc2a:	2301      	movs	r3, #1
    fc2c:	b9cb      	cbnz	r3, fc62 <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
    fc2e:	2300      	movs	r3, #0
    fc30:	4a0e      	ldr	r2, [pc, #56]	; (fc6c <k_sched_time_slice_set+0x70>)
    fc32:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    fc34:	0c75      	lsrs	r5, r6, #17
    fc36:	03f4      	lsls	r4, r6, #15
    fc38:	f240 30e7 	movw	r0, #999	; 0x3e7
    fc3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fc40:	2300      	movs	r3, #0
    fc42:	1820      	adds	r0, r4, r0
    fc44:	f04f 0100 	mov.w	r1, #0
    fc48:	eb45 0101 	adc.w	r1, r5, r1
    fc4c:	f7f1 f874 	bl	d38 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    fc50:	4b07      	ldr	r3, [pc, #28]	; (fc70 <k_sched_time_slice_set+0x74>)
    fc52:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    fc54:	2e00      	cmp	r6, #0
    fc56:	dddf      	ble.n	fc18 <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
    fc58:	2802      	cmp	r0, #2
    fc5a:	bfb8      	it	lt
    fc5c:	2002      	movlt	r0, #2
    fc5e:	6018      	str	r0, [r3, #0]
    fc60:	e7da      	b.n	fc18 <k_sched_time_slice_set+0x1c>
}
    fc62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fc66:	bf00      	nop
    fc68:	20002f50 	.word	0x20002f50
    fc6c:	20002f18 	.word	0x20002f18
    fc70:	20002f54 	.word	0x20002f54

0000fc74 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    fc74:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    fc76:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    fc78:	b921      	cbnz	r1, fc84 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    fc7a:	f3ef 8305 	mrs	r3, IPSR
    fc7e:	b913      	cbnz	r3, fc86 <z_reschedule+0x12>
    fc80:	2101      	movs	r1, #1
    fc82:	e000      	b.n	fc86 <z_reschedule+0x12>
    fc84:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    fc86:	f011 0f01 	tst.w	r1, #1
    fc8a:	d007      	beq.n	fc9c <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
    fc8c:	4b06      	ldr	r3, [pc, #24]	; (fca8 <z_reschedule+0x34>)
    fc8e:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    fc90:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    fc92:	429a      	cmp	r2, r3
    fc94:	d002      	beq.n	fc9c <z_reschedule+0x28>
	ret = arch_swap(key);
    fc96:	f7f5 fa97 	bl	51c8 <arch_swap>
		z_swap(lock, key);
    fc9a:	e003      	b.n	fca4 <z_reschedule+0x30>
    fc9c:	f380 8811 	msr	BASEPRI, r0
    fca0:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    fca4:	bd08      	pop	{r3, pc}
    fca6:	bf00      	nop
    fca8:	20002f18 	.word	0x20002f18

0000fcac <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    fcac:	2300      	movs	r3, #0
	__asm__ volatile(
    fcae:	f04f 0220 	mov.w	r2, #32
    fcb2:	f3ef 8111 	mrs	r1, BASEPRI
    fcb6:	f382 8812 	msr	BASEPRI_MAX, r2
    fcba:	f3bf 8f6f 	isb	sy
    fcbe:	b953      	cbnz	r3, fcd6 <k_sched_lock+0x2a>
	--_current->base.sched_locked;
    fcc0:	4b05      	ldr	r3, [pc, #20]	; (fcd8 <k_sched_lock+0x2c>)
    fcc2:	689a      	ldr	r2, [r3, #8]
    fcc4:	7bd3      	ldrb	r3, [r2, #15]
    fcc6:	3b01      	subs	r3, #1
    fcc8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    fcca:	f381 8811 	msr	BASEPRI, r1
    fcce:	f3bf 8f6f 	isb	sy
    fcd2:	2301      	movs	r3, #1
    fcd4:	e7f3      	b.n	fcbe <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    fcd6:	4770      	bx	lr
    fcd8:	20002f18 	.word	0x20002f18

0000fcdc <update_cache>:
{
    fcdc:	b538      	push	{r3, r4, r5, lr}
    fcde:	4604      	mov	r4, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
    fce0:	480f      	ldr	r0, [pc, #60]	; (fd20 <update_cache+0x44>)
    fce2:	f005 fd2b 	bl	1573c <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    fce6:	4605      	mov	r5, r0
    fce8:	b170      	cbz	r0, fd08 <update_cache+0x2c>
	if (preempt_ok != 0) {
    fcea:	b984      	cbnz	r4, fd0e <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    fcec:	4b0d      	ldr	r3, [pc, #52]	; (fd24 <update_cache+0x48>)
    fcee:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    fcf0:	7b5a      	ldrb	r2, [r3, #13]
    fcf2:	f012 0f1f 	tst.w	r2, #31
    fcf6:	d10a      	bne.n	fd0e <update_cache+0x32>
	return node->next != NULL;
    fcf8:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    fcfa:	b942      	cbnz	r2, fd0e <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    fcfc:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    fcfe:	2a7f      	cmp	r2, #127	; 0x7f
    fd00:	d905      	bls.n	fd0e <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    fd02:	4a08      	ldr	r2, [pc, #32]	; (fd24 <update_cache+0x48>)
    fd04:	61d3      	str	r3, [r2, #28]
    fd06:	e00a      	b.n	fd1e <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    fd08:	4b06      	ldr	r3, [pc, #24]	; (fd24 <update_cache+0x48>)
    fd0a:	68dd      	ldr	r5, [r3, #12]
    fd0c:	e7ed      	b.n	fcea <update_cache+0xe>
		if (thread != _current) {
    fd0e:	4b05      	ldr	r3, [pc, #20]	; (fd24 <update_cache+0x48>)
    fd10:	689b      	ldr	r3, [r3, #8]
    fd12:	42ab      	cmp	r3, r5
    fd14:	d001      	beq.n	fd1a <update_cache+0x3e>
			z_reset_time_slice();
    fd16:	f7ff ff5b 	bl	fbd0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    fd1a:	4b02      	ldr	r3, [pc, #8]	; (fd24 <update_cache+0x48>)
    fd1c:	61dd      	str	r5, [r3, #28]
}
    fd1e:	bd38      	pop	{r3, r4, r5, pc}
    fd20:	20002f38 	.word	0x20002f38
    fd24:	20002f18 	.word	0x20002f18

0000fd28 <move_thread_to_end_of_prio_q>:
{
    fd28:	b538      	push	{r3, r4, r5, lr}
    fd2a:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    fd2c:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    fd2e:	f990 300d 	ldrsb.w	r3, [r0, #13]
    fd32:	2b00      	cmp	r3, #0
    fd34:	db28      	blt.n	fd88 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
    fd36:	7b6b      	ldrb	r3, [r5, #13]
    fd38:	f063 037f 	orn	r3, r3, #127	; 0x7f
    fd3c:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    fd3e:	4b1a      	ldr	r3, [pc, #104]	; (fda8 <move_thread_to_end_of_prio_q+0x80>)
    fd40:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fd44:	429c      	cmp	r4, r3
    fd46:	d02d      	beq.n	fda4 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fd48:	b16c      	cbz	r4, fd66 <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    fd4a:	4621      	mov	r1, r4
    fd4c:	4628      	mov	r0, r5
    fd4e:	f005 fc8c 	bl	1566a <z_sched_prio_cmp>
    fd52:	2800      	cmp	r0, #0
    fd54:	dc20      	bgt.n	fd98 <move_thread_to_end_of_prio_q+0x70>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    fd56:	b134      	cbz	r4, fd66 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    fd58:	4b13      	ldr	r3, [pc, #76]	; (fda8 <move_thread_to_end_of_prio_q+0x80>)
    fd5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    fd5c:	429c      	cmp	r4, r3
    fd5e:	d002      	beq.n	fd66 <move_thread_to_end_of_prio_q+0x3e>
    fd60:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fd62:	2c00      	cmp	r4, #0
    fd64:	d1f0      	bne.n	fd48 <move_thread_to_end_of_prio_q+0x20>
	sys_dnode_t *const tail = list->tail;
    fd66:	4b10      	ldr	r3, [pc, #64]	; (fda8 <move_thread_to_end_of_prio_q+0x80>)
    fd68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    fd6a:	f103 0120 	add.w	r1, r3, #32
    fd6e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    fd70:	606a      	str	r2, [r5, #4]
	tail->next = node;
    fd72:	6015      	str	r5, [r2, #0]
	list->tail = node;
    fd74:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    fd76:	4b0c      	ldr	r3, [pc, #48]	; (fda8 <move_thread_to_end_of_prio_q+0x80>)
    fd78:	6898      	ldr	r0, [r3, #8]
    fd7a:	42a8      	cmp	r0, r5
    fd7c:	bf14      	ite	ne
    fd7e:	2000      	movne	r0, #0
    fd80:	2001      	moveq	r0, #1
    fd82:	f7ff ffab 	bl	fcdc <update_cache>
}
    fd86:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    fd88:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    fd8c:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
    fd8e:	4601      	mov	r1, r0
    fd90:	4806      	ldr	r0, [pc, #24]	; (fdac <move_thread_to_end_of_prio_q+0x84>)
    fd92:	f005 fca8 	bl	156e6 <z_priq_dumb_remove>
}
    fd96:	e7ce      	b.n	fd36 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    fd98:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    fd9a:	606b      	str	r3, [r5, #4]
	node->next = successor;
    fd9c:	602c      	str	r4, [r5, #0]
	prev->next = node;
    fd9e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    fda0:	6065      	str	r5, [r4, #4]
}
    fda2:	e7e8      	b.n	fd76 <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fda4:	2400      	movs	r4, #0
    fda6:	e7cf      	b.n	fd48 <move_thread_to_end_of_prio_q+0x20>
    fda8:	20002f18 	.word	0x20002f18
    fdac:	20002f38 	.word	0x20002f38

0000fdb0 <z_time_slice>:
{
    fdb0:	b510      	push	{r4, lr}
	__asm__ volatile(
    fdb2:	f04f 0320 	mov.w	r3, #32
    fdb6:	f3ef 8411 	mrs	r4, BASEPRI
    fdba:	f383 8812 	msr	BASEPRI_MAX, r3
    fdbe:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    fdc2:	4b1c      	ldr	r3, [pc, #112]	; (fe34 <z_time_slice+0x84>)
    fdc4:	689b      	ldr	r3, [r3, #8]
    fdc6:	4a1c      	ldr	r2, [pc, #112]	; (fe38 <z_time_slice+0x88>)
    fdc8:	6812      	ldr	r2, [r2, #0]
    fdca:	4293      	cmp	r3, r2
    fdcc:	d01d      	beq.n	fe0a <z_time_slice+0x5a>
	pending_current = NULL;
    fdce:	4a1a      	ldr	r2, [pc, #104]	; (fe38 <z_time_slice+0x88>)
    fdd0:	2100      	movs	r1, #0
    fdd2:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
    fdd4:	4a19      	ldr	r2, [pc, #100]	; (fe3c <z_time_slice+0x8c>)
    fdd6:	6812      	ldr	r2, [r2, #0]
    fdd8:	b322      	cbz	r2, fe24 <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    fdda:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
    fddc:	2a7f      	cmp	r2, #127	; 0x7f
    fdde:	d821      	bhi.n	fe24 <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
    fde0:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
    fde2:	f012 0f1f 	tst.w	r2, #31
    fde6:	d11d      	bne.n	fe24 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    fde8:	f993 100e 	ldrsb.w	r1, [r3, #14]
    fdec:	4a14      	ldr	r2, [pc, #80]	; (fe40 <z_time_slice+0x90>)
    fdee:	6812      	ldr	r2, [r2, #0]
    fdf0:	4291      	cmp	r1, r2
    fdf2:	db17      	blt.n	fe24 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
    fdf4:	4a13      	ldr	r2, [pc, #76]	; (fe44 <z_time_slice+0x94>)
    fdf6:	4293      	cmp	r3, r2
    fdf8:	d014      	beq.n	fe24 <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
    fdfa:	4a0e      	ldr	r2, [pc, #56]	; (fe34 <z_time_slice+0x84>)
    fdfc:	6912      	ldr	r2, [r2, #16]
    fdfe:	4282      	cmp	r2, r0
    fe00:	dd0a      	ble.n	fe18 <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
    fe02:	1a10      	subs	r0, r2, r0
    fe04:	4b0b      	ldr	r3, [pc, #44]	; (fe34 <z_time_slice+0x84>)
    fe06:	6118      	str	r0, [r3, #16]
    fe08:	e00f      	b.n	fe2a <z_time_slice+0x7a>
		z_reset_time_slice();
    fe0a:	f7ff fee1 	bl	fbd0 <z_reset_time_slice>
	__asm__ volatile(
    fe0e:	f384 8811 	msr	BASEPRI, r4
    fe12:	f3bf 8f6f 	isb	sy
		return;
    fe16:	e00c      	b.n	fe32 <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
    fe18:	4618      	mov	r0, r3
    fe1a:	f7ff ff85 	bl	fd28 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
    fe1e:	f7ff fed7 	bl	fbd0 <z_reset_time_slice>
    fe22:	e002      	b.n	fe2a <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
    fe24:	4b03      	ldr	r3, [pc, #12]	; (fe34 <z_time_slice+0x84>)
    fe26:	2200      	movs	r2, #0
    fe28:	611a      	str	r2, [r3, #16]
    fe2a:	f384 8811 	msr	BASEPRI, r4
    fe2e:	f3bf 8f6f 	isb	sy
}
    fe32:	bd10      	pop	{r4, pc}
    fe34:	20002f18 	.word	0x20002f18
    fe38:	20002f4c 	.word	0x20002f4c
    fe3c:	20002f54 	.word	0x20002f54
    fe40:	20002f50 	.word	0x20002f50
    fe44:	200007e8 	.word	0x200007e8

0000fe48 <ready_thread>:
{
    fe48:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    fe4a:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    fe4c:	f990 200d 	ldrsb.w	r2, [r0, #13]
    fe50:	2a00      	cmp	r2, #0
    fe52:	db2d      	blt.n	feb0 <ready_thread+0x68>
    fe54:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    fe56:	f013 0f1f 	tst.w	r3, #31
    fe5a:	d105      	bne.n	fe68 <ready_thread+0x20>
	return node->next != NULL;
    fe5c:	6982      	ldr	r2, [r0, #24]
    fe5e:	b10a      	cbz	r2, fe64 <ready_thread+0x1c>
    fe60:	2200      	movs	r2, #0
    fe62:	e002      	b.n	fe6a <ready_thread+0x22>
    fe64:	2201      	movs	r2, #1
    fe66:	e000      	b.n	fe6a <ready_thread+0x22>
    fe68:	2200      	movs	r2, #0
    fe6a:	b30a      	cbz	r2, feb0 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
    fe6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    fe70:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    fe72:	4b14      	ldr	r3, [pc, #80]	; (fec4 <ready_thread+0x7c>)
    fe74:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fe78:	429d      	cmp	r5, r3
    fe7a:	d020      	beq.n	febe <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fe7c:	b16d      	cbz	r5, fe9a <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
    fe7e:	4629      	mov	r1, r5
    fe80:	4620      	mov	r0, r4
    fe82:	f005 fbf2 	bl	1566a <z_sched_prio_cmp>
    fe86:	2800      	cmp	r0, #0
    fe88:	dc13      	bgt.n	feb2 <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    fe8a:	b135      	cbz	r5, fe9a <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
    fe8c:	4b0d      	ldr	r3, [pc, #52]	; (fec4 <ready_thread+0x7c>)
    fe8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    fe90:	429d      	cmp	r5, r3
    fe92:	d002      	beq.n	fe9a <ready_thread+0x52>
    fe94:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    fe96:	2d00      	cmp	r5, #0
    fe98:	d1f0      	bne.n	fe7c <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
    fe9a:	4b0a      	ldr	r3, [pc, #40]	; (fec4 <ready_thread+0x7c>)
    fe9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    fe9e:	f103 0120 	add.w	r1, r3, #32
    fea2:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    fea4:	6062      	str	r2, [r4, #4]
	tail->next = node;
    fea6:	6014      	str	r4, [r2, #0]
	list->tail = node;
    fea8:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    feaa:	2000      	movs	r0, #0
    feac:	f7ff ff16 	bl	fcdc <update_cache>
}
    feb0:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
    feb2:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    feb4:	6063      	str	r3, [r4, #4]
	node->next = successor;
    feb6:	6025      	str	r5, [r4, #0]
	prev->next = node;
    feb8:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    feba:	606c      	str	r4, [r5, #4]
}
    febc:	e7f5      	b.n	feaa <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    febe:	2500      	movs	r5, #0
    fec0:	e7dc      	b.n	fe7c <ready_thread+0x34>
    fec2:	bf00      	nop
    fec4:	20002f18 	.word	0x20002f18

0000fec8 <z_sched_start>:
{
    fec8:	b510      	push	{r4, lr}
	__asm__ volatile(
    feca:	f04f 0320 	mov.w	r3, #32
    fece:	f3ef 8411 	mrs	r4, BASEPRI
    fed2:	f383 8812 	msr	BASEPRI_MAX, r3
    fed6:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    feda:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    fedc:	f013 0f04 	tst.w	r3, #4
    fee0:	d104      	bne.n	feec <z_sched_start+0x24>
	__asm__ volatile(
    fee2:	f384 8811 	msr	BASEPRI, r4
    fee6:	f3bf 8f6f 	isb	sy
}
    feea:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    feec:	f023 0304 	bic.w	r3, r3, #4
    fef0:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    fef2:	f7ff ffa9 	bl	fe48 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    fef6:	4621      	mov	r1, r4
    fef8:	4801      	ldr	r0, [pc, #4]	; (ff00 <z_sched_start+0x38>)
    fefa:	f7ff febb 	bl	fc74 <z_reschedule>
    fefe:	e7f4      	b.n	feea <z_sched_start+0x22>
    ff00:	20002f50 	.word	0x20002f50

0000ff04 <unready_thread>:
{
    ff04:	b510      	push	{r4, lr}
    ff06:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    ff08:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    ff0a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    ff0e:	2b00      	cmp	r3, #0
    ff10:	db08      	blt.n	ff24 <unready_thread+0x20>
	update_cache(thread == _current);
    ff12:	4b08      	ldr	r3, [pc, #32]	; (ff34 <unready_thread+0x30>)
    ff14:	6898      	ldr	r0, [r3, #8]
    ff16:	42a0      	cmp	r0, r4
    ff18:	bf14      	ite	ne
    ff1a:	2000      	movne	r0, #0
    ff1c:	2001      	moveq	r0, #1
    ff1e:	f7ff fedd 	bl	fcdc <update_cache>
}
    ff22:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    ff24:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    ff28:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
    ff2a:	4601      	mov	r1, r0
    ff2c:	4802      	ldr	r0, [pc, #8]	; (ff38 <unready_thread+0x34>)
    ff2e:	f005 fbda 	bl	156e6 <z_priq_dumb_remove>
}
    ff32:	e7ee      	b.n	ff12 <unready_thread+0xe>
    ff34:	20002f18 	.word	0x20002f18
    ff38:	20002f38 	.word	0x20002f38

0000ff3c <z_pend_curr>:
{
    ff3c:	b510      	push	{r4, lr}
    ff3e:	460c      	mov	r4, r1
    ff40:	4611      	mov	r1, r2
	pending_current = _current;
    ff42:	4b06      	ldr	r3, [pc, #24]	; (ff5c <z_pend_curr+0x20>)
    ff44:	6898      	ldr	r0, [r3, #8]
    ff46:	4b06      	ldr	r3, [pc, #24]	; (ff60 <z_pend_curr+0x24>)
    ff48:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    ff4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ff4e:	f005 fc76 	bl	1583e <pend>
    ff52:	4620      	mov	r0, r4
    ff54:	f7f5 f938 	bl	51c8 <arch_swap>
}
    ff58:	bd10      	pop	{r4, pc}
    ff5a:	bf00      	nop
    ff5c:	20002f18 	.word	0x20002f18
    ff60:	20002f4c 	.word	0x20002f4c

0000ff64 <z_set_prio>:
{
    ff64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ff68:	4604      	mov	r4, r0
    ff6a:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    ff6c:	2300      	movs	r3, #0
	__asm__ volatile(
    ff6e:	f04f 0220 	mov.w	r2, #32
    ff72:	f3ef 8611 	mrs	r6, BASEPRI
    ff76:	f382 8812 	msr	BASEPRI_MAX, r2
    ff7a:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    ff7e:	4698      	mov	r8, r3
    ff80:	e008      	b.n	ff94 <z_set_prio+0x30>
		if (need_sched) {
    ff82:	f012 0801 	ands.w	r8, r2, #1
    ff86:	d111      	bne.n	ffac <z_set_prio+0x48>
			thread->base.prio = prio;
    ff88:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
    ff8a:	f386 8811 	msr	BASEPRI, r6
    ff8e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    ff92:	2301      	movs	r3, #1
    ff94:	461a      	mov	r2, r3
    ff96:	2b00      	cmp	r3, #0
    ff98:	d13d      	bne.n	10016 <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
    ff9a:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    ff9c:	f013 0f1f 	tst.w	r3, #31
    ffa0:	d1ef      	bne.n	ff82 <z_set_prio+0x1e>
	return node->next != NULL;
    ffa2:	69a1      	ldr	r1, [r4, #24]
    ffa4:	2900      	cmp	r1, #0
    ffa6:	d1ec      	bne.n	ff82 <z_set_prio+0x1e>
    ffa8:	2201      	movs	r2, #1
    ffaa:	e7ea      	b.n	ff82 <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    ffac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    ffb0:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
    ffb2:	f8df 906c 	ldr.w	r9, [pc, #108]	; 10020 <z_set_prio+0xbc>
    ffb6:	4621      	mov	r1, r4
    ffb8:	4648      	mov	r0, r9
    ffba:	f005 fb94 	bl	156e6 <z_priq_dumb_remove>
				thread->base.prio = prio;
    ffbe:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    ffc0:	7b63      	ldrb	r3, [r4, #13]
    ffc2:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ffc6:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    ffc8:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ffcc:	454d      	cmp	r5, r9
    ffce:	d020      	beq.n	10012 <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ffd0:	b16d      	cbz	r5, ffee <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    ffd2:	4629      	mov	r1, r5
    ffd4:	4620      	mov	r0, r4
    ffd6:	f005 fb48 	bl	1566a <z_sched_prio_cmp>
    ffda:	2800      	cmp	r0, #0
    ffdc:	dc13      	bgt.n	10006 <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    ffde:	b135      	cbz	r5, ffee <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
    ffe0:	4b0e      	ldr	r3, [pc, #56]	; (1001c <z_set_prio+0xb8>)
    ffe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    ffe4:	429d      	cmp	r5, r3
    ffe6:	d002      	beq.n	ffee <z_set_prio+0x8a>
    ffe8:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ffea:	2d00      	cmp	r5, #0
    ffec:	d1f0      	bne.n	ffd0 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
    ffee:	4b0b      	ldr	r3, [pc, #44]	; (1001c <z_set_prio+0xb8>)
    fff0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    fff2:	f103 0120 	add.w	r1, r3, #32
    fff6:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    fff8:	6062      	str	r2, [r4, #4]
	tail->next = node;
    fffa:	6014      	str	r4, [r2, #0]
	list->tail = node;
    fffc:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    fffe:	2001      	movs	r0, #1
   10000:	f7ff fe6c 	bl	fcdc <update_cache>
   10004:	e7c1      	b.n	ff8a <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
   10006:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   10008:	6063      	str	r3, [r4, #4]
	node->next = successor;
   1000a:	6025      	str	r5, [r4, #0]
	prev->next = node;
   1000c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   1000e:	606c      	str	r4, [r5, #4]
}
   10010:	e7f5      	b.n	fffe <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10012:	2500      	movs	r5, #0
   10014:	e7dc      	b.n	ffd0 <z_set_prio+0x6c>
}
   10016:	4640      	mov	r0, r8
   10018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1001c:	20002f18 	.word	0x20002f18
   10020:	20002f38 	.word	0x20002f38

00010024 <z_impl_k_thread_suspend>:
{
   10024:	b538      	push	{r3, r4, r5, lr}
   10026:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   10028:	3018      	adds	r0, #24
   1002a:	f005 fcda 	bl	159e2 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   1002e:	2300      	movs	r3, #0
	__asm__ volatile(
   10030:	f04f 0220 	mov.w	r2, #32
   10034:	f3ef 8511 	mrs	r5, BASEPRI
   10038:	f382 8812 	msr	BASEPRI_MAX, r2
   1003c:	f3bf 8f6f 	isb	sy
   10040:	e010      	b.n	10064 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   10042:	7b63      	ldrb	r3, [r4, #13]
   10044:	f043 0310 	orr.w	r3, r3, #16
   10048:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1004a:	4b15      	ldr	r3, [pc, #84]	; (100a0 <z_impl_k_thread_suspend+0x7c>)
   1004c:	6898      	ldr	r0, [r3, #8]
   1004e:	42a0      	cmp	r0, r4
   10050:	bf14      	ite	ne
   10052:	2000      	movne	r0, #0
   10054:	2001      	moveq	r0, #1
   10056:	f7ff fe41 	bl	fcdc <update_cache>
	__asm__ volatile(
   1005a:	f385 8811 	msr	BASEPRI, r5
   1005e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   10062:	2301      	movs	r3, #1
   10064:	b963      	cbnz	r3, 10080 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   10066:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   10068:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1006c:	2b00      	cmp	r3, #0
   1006e:	dae8      	bge.n	10042 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   10070:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   10074:	7362      	strb	r2, [r4, #13]
		_priq_run_remove(pq, thread);
   10076:	4621      	mov	r1, r4
   10078:	480a      	ldr	r0, [pc, #40]	; (100a4 <z_impl_k_thread_suspend+0x80>)
   1007a:	f005 fb34 	bl	156e6 <z_priq_dumb_remove>
}
   1007e:	e7e0      	b.n	10042 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   10080:	4b07      	ldr	r3, [pc, #28]	; (100a0 <z_impl_k_thread_suspend+0x7c>)
   10082:	689b      	ldr	r3, [r3, #8]
   10084:	42a3      	cmp	r3, r4
   10086:	d000      	beq.n	1008a <z_impl_k_thread_suspend+0x66>
}
   10088:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1008a:	f04f 0320 	mov.w	r3, #32
   1008e:	f3ef 8011 	mrs	r0, BASEPRI
   10092:	f383 8812 	msr	BASEPRI_MAX, r3
   10096:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1009a:	f005 fb0f 	bl	156bc <z_reschedule_irqlock>
   1009e:	e7f3      	b.n	10088 <z_impl_k_thread_suspend+0x64>
   100a0:	20002f18 	.word	0x20002f18
   100a4:	20002f38 	.word	0x20002f38

000100a8 <k_sched_unlock>:

void k_sched_unlock(void)
{
   100a8:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   100aa:	2300      	movs	r3, #0
   100ac:	f04f 0220 	mov.w	r2, #32
   100b0:	f3ef 8411 	mrs	r4, BASEPRI
   100b4:	f382 8812 	msr	BASEPRI_MAX, r2
   100b8:	f3bf 8f6f 	isb	sy
   100bc:	b96b      	cbnz	r3, 100da <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   100be:	4b0c      	ldr	r3, [pc, #48]	; (100f0 <k_sched_unlock+0x48>)
   100c0:	689a      	ldr	r2, [r3, #8]
   100c2:	7bd3      	ldrb	r3, [r2, #15]
   100c4:	3301      	adds	r3, #1
   100c6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   100c8:	2000      	movs	r0, #0
   100ca:	f7ff fe07 	bl	fcdc <update_cache>
	__asm__ volatile(
   100ce:	f384 8811 	msr	BASEPRI, r4
   100d2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   100d6:	2301      	movs	r3, #1
   100d8:	e7f0      	b.n	100bc <k_sched_unlock+0x14>
	__asm__ volatile(
   100da:	f04f 0320 	mov.w	r3, #32
   100de:	f3ef 8011 	mrs	r0, BASEPRI
   100e2:	f383 8812 	msr	BASEPRI_MAX, r3
   100e6:	f3bf 8f6f 	isb	sy
   100ea:	f005 fae7 	bl	156bc <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   100ee:	bd10      	pop	{r4, pc}
   100f0:	20002f18 	.word	0x20002f18

000100f4 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
   100f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   100f6:	7b43      	ldrb	r3, [r0, #13]
   100f8:	f013 0f08 	tst.w	r3, #8
   100fc:	d145      	bne.n	1018a <end_thread+0x96>
   100fe:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
   10100:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
   10104:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   10108:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
   1010a:	f013 0f80 	tst.w	r3, #128	; 0x80
   1010e:	d114      	bne.n	1013a <end_thread+0x46>
			dequeue_thread(&_kernel.ready_q.runq, thread);
		}
		if (thread->base.pended_on != NULL) {
   10110:	68ab      	ldr	r3, [r5, #8]
   10112:	b15b      	cbz	r3, 1012c <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   10114:	4628      	mov	r0, r5
   10116:	f005 faa6 	bl	15666 <pended_on_thread>
   1011a:	4629      	mov	r1, r5
   1011c:	f005 fae3 	bl	156e6 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   10120:	7b6b      	ldrb	r3, [r5, #13]
   10122:	f023 0302 	bic.w	r3, r3, #2
   10126:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   10128:	2300      	movs	r3, #0
   1012a:	60ab      	str	r3, [r5, #8]
   1012c:	f105 0018 	add.w	r0, r5, #24
   10130:	f005 fc57 	bl	159e2 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   10134:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   10138:	e01c      	b.n	10174 <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1013a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1013e:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
   10140:	4601      	mov	r1, r0
   10142:	4812      	ldr	r0, [pc, #72]	; (1018c <end_thread+0x98>)
   10144:	f005 facf 	bl	156e6 <z_priq_dumb_remove>
}
   10148:	e7e2      	b.n	10110 <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1014a:	4620      	mov	r0, r4
   1014c:	f005 fa8b 	bl	15666 <pended_on_thread>
   10150:	4621      	mov	r1, r4
   10152:	f005 fac8 	bl	156e6 <z_priq_dumb_remove>
   10156:	7b63      	ldrb	r3, [r4, #13]
   10158:	f023 0302 	bic.w	r3, r3, #2
   1015c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1015e:	2600      	movs	r6, #0
   10160:	60a6      	str	r6, [r4, #8]
   10162:	f104 0018 	add.w	r0, r4, #24
   10166:	f005 fc3c 	bl	159e2 <z_abort_timeout>
   1016a:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
   1016e:	4620      	mov	r0, r4
   10170:	f7ff fe6a 	bl	fe48 <ready_thread>
	return list->head == list;
   10174:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10176:	42bc      	cmp	r4, r7
   10178:	d001      	beq.n	1017e <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1017a:	2c00      	cmp	r4, #0
   1017c:	d1e5      	bne.n	1014a <end_thread+0x56>
		update_cache(1);
   1017e:	2001      	movs	r0, #1
   10180:	f7ff fdac 	bl	fcdc <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   10184:	4628      	mov	r0, r5
   10186:	f7ff f959 	bl	f43c <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   1018a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1018c:	20002f38 	.word	0x20002f38

00010190 <z_sched_init>:
{
   10190:	b508      	push	{r3, lr}
	list->head = (sys_dnode_t *)list;
   10192:	4b05      	ldr	r3, [pc, #20]	; (101a8 <z_sched_init+0x18>)
   10194:	f103 0220 	add.w	r2, r3, #32
   10198:	621a      	str	r2, [r3, #32]
	list->tail = (sys_dnode_t *)list;
   1019a:	625a      	str	r2, [r3, #36]	; 0x24
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   1019c:	2100      	movs	r1, #0
   1019e:	4608      	mov	r0, r1
   101a0:	f7ff fd2c 	bl	fbfc <k_sched_time_slice_set>
}
   101a4:	bd08      	pop	{r3, pc}
   101a6:	bf00      	nop
   101a8:	20002f18 	.word	0x20002f18

000101ac <z_impl_k_yield>:
{
   101ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   101ae:	f04f 0320 	mov.w	r3, #32
   101b2:	f3ef 8611 	mrs	r6, BASEPRI
   101b6:	f383 8812 	msr	BASEPRI_MAX, r3
   101ba:	f3bf 8f6f 	isb	sy
		dequeue_thread(&_kernel.ready_q.runq,
   101be:	4c1c      	ldr	r4, [pc, #112]	; (10230 <z_impl_k_yield+0x84>)
   101c0:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   101c2:	7b4b      	ldrb	r3, [r1, #13]
   101c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   101c8:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
   101ca:	f104 0720 	add.w	r7, r4, #32
   101ce:	4638      	mov	r0, r7
   101d0:	f005 fa89 	bl	156e6 <z_priq_dumb_remove>
	queue_thread(&_kernel.ready_q.runq, _current);
   101d4:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   101d6:	7b6b      	ldrb	r3, [r5, #13]
   101d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
   101dc:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   101de:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   101e0:	42bc      	cmp	r4, r7
   101e2:	d023      	beq.n	1022c <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   101e4:	b16c      	cbz	r4, 10202 <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
   101e6:	4621      	mov	r1, r4
   101e8:	4628      	mov	r0, r5
   101ea:	f005 fa3e 	bl	1566a <z_sched_prio_cmp>
   101ee:	2800      	cmp	r0, #0
   101f0:	dc16      	bgt.n	10220 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   101f2:	b134      	cbz	r4, 10202 <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
   101f4:	4b0e      	ldr	r3, [pc, #56]	; (10230 <z_impl_k_yield+0x84>)
   101f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   101f8:	429c      	cmp	r4, r3
   101fa:	d002      	beq.n	10202 <z_impl_k_yield+0x56>
   101fc:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   101fe:	2c00      	cmp	r4, #0
   10200:	d1f0      	bne.n	101e4 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
   10202:	4b0b      	ldr	r3, [pc, #44]	; (10230 <z_impl_k_yield+0x84>)
   10204:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   10206:	f103 0120 	add.w	r1, r3, #32
   1020a:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   1020c:	606a      	str	r2, [r5, #4]
	tail->next = node;
   1020e:	6015      	str	r5, [r2, #0]
	list->tail = node;
   10210:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
   10212:	2001      	movs	r0, #1
   10214:	f7ff fd62 	bl	fcdc <update_cache>
   10218:	4630      	mov	r0, r6
   1021a:	f7f4 ffd5 	bl	51c8 <arch_swap>
}
   1021e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
   10220:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   10222:	606b      	str	r3, [r5, #4]
	node->next = successor;
   10224:	602c      	str	r4, [r5, #0]
	prev->next = node;
   10226:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   10228:	6065      	str	r5, [r4, #4]
}
   1022a:	e7f2      	b.n	10212 <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1022c:	2400      	movs	r4, #0
   1022e:	e7d9      	b.n	101e4 <z_impl_k_yield+0x38>
   10230:	20002f18 	.word	0x20002f18

00010234 <z_tick_sleep>:
{
   10234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10238:	4604      	mov	r4, r0
   1023a:	460d      	mov	r5, r1
	if (ticks == 0) {
   1023c:	ea54 0105 	orrs.w	r1, r4, r5
   10240:	d037      	beq.n	102b2 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   10242:	f06f 0101 	mvn.w	r1, #1
   10246:	1a0a      	subs	r2, r1, r0
   10248:	f04f 31ff 	mov.w	r1, #4294967295
   1024c:	eb61 0305 	sbc.w	r3, r1, r5
   10250:	2a01      	cmp	r2, #1
   10252:	f173 0300 	sbcs.w	r3, r3, #0
   10256:	db30      	blt.n	102ba <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   10258:	f06f 0601 	mvn.w	r6, #1
   1025c:	1a36      	subs	r6, r6, r0
   1025e:	f04f 0320 	mov.w	r3, #32
   10262:	f3ef 8811 	mrs	r8, BASEPRI
   10266:	f383 8812 	msr	BASEPRI_MAX, r3
   1026a:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   1026e:	4f16      	ldr	r7, [pc, #88]	; (102c8 <z_tick_sleep+0x94>)
   10270:	68b8      	ldr	r0, [r7, #8]
   10272:	4b16      	ldr	r3, [pc, #88]	; (102cc <z_tick_sleep+0x98>)
   10274:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   10276:	f7ff fe45 	bl	ff04 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   1027a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   1027c:	4622      	mov	r2, r4
   1027e:	462b      	mov	r3, r5
   10280:	4913      	ldr	r1, [pc, #76]	; (102d0 <z_tick_sleep+0x9c>)
   10282:	3018      	adds	r0, #24
   10284:	f000 f938 	bl	104f8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   10288:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1028a:	7b53      	ldrb	r3, [r2, #13]
   1028c:	f043 0310 	orr.w	r3, r3, #16
   10290:	7353      	strb	r3, [r2, #13]
   10292:	4640      	mov	r0, r8
   10294:	f7f4 ff98 	bl	51c8 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   10298:	2500      	movs	r5, #0
   1029a:	f005 fc01 	bl	15aa0 <sys_clock_tick_get_32>
   1029e:	1a34      	subs	r4, r6, r0
   102a0:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
   102a4:	2c01      	cmp	r4, #1
   102a6:	f175 0300 	sbcs.w	r3, r5, #0
   102aa:	da0a      	bge.n	102c2 <z_tick_sleep+0x8e>
	return 0;
   102ac:	2000      	movs	r0, #0
}
   102ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   102b2:	f7ff ff7b 	bl	101ac <z_impl_k_yield>
		return 0;
   102b6:	2000      	movs	r0, #0
   102b8:	e7f9      	b.n	102ae <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   102ba:	f005 fbf1 	bl	15aa0 <sys_clock_tick_get_32>
   102be:	1906      	adds	r6, r0, r4
   102c0:	e7cd      	b.n	1025e <z_tick_sleep+0x2a>
		return ticks;
   102c2:	4620      	mov	r0, r4
   102c4:	e7f3      	b.n	102ae <z_tick_sleep+0x7a>
   102c6:	bf00      	nop
   102c8:	20002f18 	.word	0x20002f18
   102cc:	20002f4c 	.word	0x20002f4c
   102d0:	00015783 	.word	0x00015783

000102d4 <z_impl_k_sleep>:
{
   102d4:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   102d6:	f1b1 3fff 	cmp.w	r1, #4294967295
   102da:	bf08      	it	eq
   102dc:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   102e0:	d01a      	beq.n	10318 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
   102e2:	f7ff ffa7 	bl	10234 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   102e6:	4604      	mov	r4, r0
   102e8:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
   102ea:	0169      	lsls	r1, r5, #5
   102ec:	0143      	lsls	r3, r0, #5
   102ee:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
   102f2:	1a18      	subs	r0, r3, r0
   102f4:	eb62 0305 	sbc.w	r3, r2, r5
   102f8:	009a      	lsls	r2, r3, #2
   102fa:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
   102fe:	0081      	lsls	r1, r0, #2
   10300:	4613      	mov	r3, r2
   10302:	1908      	adds	r0, r1, r4
   10304:	eb45 0303 	adc.w	r3, r5, r3
   10308:	00da      	lsls	r2, r3, #3
   1030a:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
   1030e:	00c1      	lsls	r1, r0, #3
   10310:	0bc8      	lsrs	r0, r1, #15
   10312:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
   10316:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
   10318:	4b03      	ldr	r3, [pc, #12]	; (10328 <z_impl_k_sleep+0x54>)
   1031a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   1031c:	f7ff fe82 	bl	10024 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   10320:	f04f 30ff 	mov.w	r0, #4294967295
   10324:	e7f7      	b.n	10316 <z_impl_k_sleep+0x42>
   10326:	bf00      	nop
   10328:	20002f18 	.word	0x20002f18

0001032c <z_impl_k_usleep>:
{
   1032c:	b538      	push	{r3, r4, r5, lr}
	ticks = k_us_to_ticks_ceil64(us);
   1032e:	17c3      	asrs	r3, r0, #31
   10330:	03d9      	lsls	r1, r3, #15
   10332:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   10336:	03c4      	lsls	r4, r0, #15
   10338:	4814      	ldr	r0, [pc, #80]	; (1038c <z_impl_k_usleep+0x60>)
   1033a:	4a15      	ldr	r2, [pc, #84]	; (10390 <z_impl_k_usleep+0x64>)
   1033c:	2300      	movs	r3, #0
   1033e:	1820      	adds	r0, r4, r0
   10340:	f04f 0400 	mov.w	r4, #0
   10344:	eb44 0101 	adc.w	r1, r4, r1
   10348:	f7f0 fcf6 	bl	d38 <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
   1034c:	17c1      	asrs	r1, r0, #31
   1034e:	f7ff ff71 	bl	10234 <z_tick_sleep>
	return k_ticks_to_us_floor64(ticks);
   10352:	4604      	mov	r4, r0
   10354:	17c5      	asrs	r5, r0, #31
   10356:	0169      	lsls	r1, r5, #5
   10358:	0143      	lsls	r3, r0, #5
   1035a:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
   1035e:	1a1b      	subs	r3, r3, r0
   10360:	eb62 0005 	sbc.w	r0, r2, r5
   10364:	0242      	lsls	r2, r0, #9
   10366:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
   1036a:	0259      	lsls	r1, r3, #9
   1036c:	190b      	adds	r3, r1, r4
   1036e:	416a      	adcs	r2, r5
   10370:	0191      	lsls	r1, r2, #6
   10372:	ea41 6193 	orr.w	r1, r1, r3, lsr #26
   10376:	0198      	lsls	r0, r3, #6
   10378:	1ac3      	subs	r3, r0, r3
   1037a:	eb61 0002 	sbc.w	r0, r1, r2
   1037e:	191b      	adds	r3, r3, r4
   10380:	eb45 0000 	adc.w	r0, r5, r0
   10384:	0bdb      	lsrs	r3, r3, #15
}
   10386:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
   1038a:	bd38      	pop	{r3, r4, r5, pc}
   1038c:	000f423f 	.word	0x000f423f
   10390:	000f4240 	.word	0x000f4240

00010394 <z_impl_z_current_get>:
}
   10394:	4b01      	ldr	r3, [pc, #4]	; (1039c <z_impl_z_current_get+0x8>)
   10396:	6898      	ldr	r0, [r3, #8]
   10398:	4770      	bx	lr
   1039a:	bf00      	nop
   1039c:	20002f18 	.word	0x20002f18

000103a0 <z_impl_k_is_preempt_thread>:
   103a0:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
   103a4:	b933      	cbnz	r3, 103b4 <z_impl_k_is_preempt_thread+0x14>
   103a6:	4b05      	ldr	r3, [pc, #20]	; (103bc <z_impl_k_is_preempt_thread+0x1c>)
   103a8:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   103aa:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
   103ac:	2b7f      	cmp	r3, #127	; 0x7f
   103ae:	d803      	bhi.n	103b8 <z_impl_k_is_preempt_thread+0x18>
   103b0:	2001      	movs	r0, #1
   103b2:	4770      	bx	lr
   103b4:	2000      	movs	r0, #0
   103b6:	4770      	bx	lr
   103b8:	2000      	movs	r0, #0
}
   103ba:	4770      	bx	lr
   103bc:	20002f18 	.word	0x20002f18

000103c0 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   103c0:	b538      	push	{r3, r4, r5, lr}
   103c2:	f04f 0320 	mov.w	r3, #32
   103c6:	f3ef 8511 	mrs	r5, BASEPRI
   103ca:	f383 8812 	msr	BASEPRI_MAX, r3
   103ce:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   103d2:	7b43      	ldrb	r3, [r0, #13]
   103d4:	f013 0f08 	tst.w	r3, #8
   103d8:	d004      	beq.n	103e4 <z_thread_abort+0x24>
	__asm__ volatile(
   103da:	f385 8811 	msr	BASEPRI, r5
   103de:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   103e2:	bd38      	pop	{r3, r4, r5, pc}
   103e4:	4604      	mov	r4, r0
	end_thread(thread);
   103e6:	f7ff fe85 	bl	100f4 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   103ea:	4b08      	ldr	r3, [pc, #32]	; (1040c <z_thread_abort+0x4c>)
   103ec:	689b      	ldr	r3, [r3, #8]
   103ee:	42a3      	cmp	r3, r4
   103f0:	d004      	beq.n	103fc <z_thread_abort+0x3c>
   103f2:	f385 8811 	msr	BASEPRI, r5
   103f6:	f3bf 8f6f 	isb	sy
   103fa:	e7f2      	b.n	103e2 <z_thread_abort+0x22>
   103fc:	f3ef 8305 	mrs	r3, IPSR
   10400:	2b00      	cmp	r3, #0
   10402:	d1f6      	bne.n	103f2 <z_thread_abort+0x32>
   10404:	4628      	mov	r0, r5
   10406:	f7f4 fedf 	bl	51c8 <arch_swap>
	return ret;
   1040a:	e7f2      	b.n	103f2 <z_thread_abort+0x32>
   1040c:	20002f18 	.word	0x20002f18

00010410 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   10410:	b5d0      	push	{r4, r6, r7, lr}
   10412:	b082      	sub	sp, #8
   10414:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   10416:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   1041a:	e9cd 6700 	strd	r6, r7, [sp]
   1041e:	f7ff fd8d 	bl	ff3c <z_pend_curr>

	if (data != NULL) {
   10422:	b11c      	cbz	r4, 1042c <z_sched_wait+0x1c>
		*data = _current->base.swap_data;
   10424:	4b02      	ldr	r3, [pc, #8]	; (10430 <z_sched_wait+0x20>)
   10426:	689b      	ldr	r3, [r3, #8]
   10428:	695b      	ldr	r3, [r3, #20]
   1042a:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   1042c:	b002      	add	sp, #8
   1042e:	bdd0      	pop	{r4, r6, r7, pc}
   10430:	20002f18 	.word	0x20002f18

00010434 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   10434:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   10436:	4806      	ldr	r0, [pc, #24]	; (10450 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   10438:	4a06      	ldr	r2, [pc, #24]	; (10454 <z_data_copy+0x20>)
   1043a:	1a12      	subs	r2, r2, r0
   1043c:	4906      	ldr	r1, [pc, #24]	; (10458 <z_data_copy+0x24>)
   1043e:	f002 fb3f 	bl	12ac0 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   10442:	4a06      	ldr	r2, [pc, #24]	; (1045c <z_data_copy+0x28>)
   10444:	4906      	ldr	r1, [pc, #24]	; (10460 <z_data_copy+0x2c>)
   10446:	4807      	ldr	r0, [pc, #28]	; (10464 <z_data_copy+0x30>)
   10448:	f002 fb3a 	bl	12ac0 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   1044c:	bd08      	pop	{r3, pc}
   1044e:	bf00      	nop
   10450:	20000000 	.word	0x20000000
   10454:	20000540 	.word	0x20000540
   10458:	000178a8 	.word	0x000178a8
   1045c:	00000000 	.word	0x00000000
   10460:	000178a8 	.word	0x000178a8
   10464:	20000000 	.word	0x20000000

00010468 <first>:
	return list->head == list;
   10468:	4b03      	ldr	r3, [pc, #12]	; (10478 <first+0x10>)
   1046a:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1046c:	4298      	cmp	r0, r3
   1046e:	d000      	beq.n	10472 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   10470:	4770      	bx	lr
   10472:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   10474:	e7fc      	b.n	10470 <first+0x8>
   10476:	bf00      	nop
   10478:	200002bc 	.word	0x200002bc

0001047c <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1047c:	b130      	cbz	r0, 1048c <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   1047e:	4a04      	ldr	r2, [pc, #16]	; (10490 <next+0x14>)
   10480:	6852      	ldr	r2, [r2, #4]
   10482:	4290      	cmp	r0, r2
   10484:	d001      	beq.n	1048a <next+0xe>
   10486:	6800      	ldr	r0, [r0, #0]
   10488:	4770      	bx	lr
   1048a:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   1048c:	4770      	bx	lr
   1048e:	bf00      	nop
   10490:	200002bc 	.word	0x200002bc

00010494 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   10494:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   10496:	4b04      	ldr	r3, [pc, #16]	; (104a8 <elapsed+0x14>)
   10498:	681b      	ldr	r3, [r3, #0]
   1049a:	b10b      	cbz	r3, 104a0 <elapsed+0xc>
   1049c:	2000      	movs	r0, #0
}
   1049e:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   104a0:	f7f9 fa70 	bl	9984 <sys_clock_elapsed>
   104a4:	e7fb      	b.n	1049e <elapsed+0xa>
   104a6:	bf00      	nop
   104a8:	20002f58 	.word	0x20002f58

000104ac <next_timeout>:

static int32_t next_timeout(void)
{
   104ac:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   104ae:	f7ff ffdb 	bl	10468 <first>
   104b2:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   104b4:	f7ff ffee 	bl	10494 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   104b8:	b18c      	cbz	r4, 104de <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   104ba:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   104be:	1a12      	subs	r2, r2, r0
   104c0:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   104c4:	2a01      	cmp	r2, #1
   104c6:	f173 0100 	sbcs.w	r1, r3, #0
   104ca:	db11      	blt.n	104f0 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   104cc:	4610      	mov	r0, r2
   104ce:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   104d2:	f173 0300 	sbcs.w	r3, r3, #0
   104d6:	db04      	blt.n	104e2 <next_timeout+0x36>
   104d8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   104dc:	e001      	b.n	104e2 <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
   104de:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   104e2:	4b04      	ldr	r3, [pc, #16]	; (104f4 <next_timeout+0x48>)
   104e4:	691b      	ldr	r3, [r3, #16]
   104e6:	b113      	cbz	r3, 104ee <next_timeout+0x42>
   104e8:	4283      	cmp	r3, r0
   104ea:	da00      	bge.n	104ee <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
   104ec:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   104ee:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   104f0:	2000      	movs	r0, #0
   104f2:	e7f6      	b.n	104e2 <next_timeout+0x36>
   104f4:	20002f18 	.word	0x20002f18

000104f8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   104f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   104fc:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   104fe:	f1b3 3fff 	cmp.w	r3, #4294967295
   10502:	bf08      	it	eq
   10504:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   10508:	f000 8096 	beq.w	10638 <z_add_timeout+0x140>
   1050c:	4682      	mov	sl, r0
   1050e:	4614      	mov	r4, r2
   10510:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   10512:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   10514:	2300      	movs	r3, #0
	__asm__ volatile(
   10516:	f04f 0220 	mov.w	r2, #32
   1051a:	f3ef 8b11 	mrs	fp, BASEPRI
   1051e:	f382 8812 	msr	BASEPRI_MAX, r2
   10522:	f3bf 8f6f 	isb	sy
   10526:	e02e      	b.n	10586 <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
   10528:	2201      	movs	r2, #1
   1052a:	2300      	movs	r3, #0
   1052c:	e04b      	b.n	105c6 <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   1052e:	f7ff ffb1 	bl	10494 <elapsed>
   10532:	1822      	adds	r2, r4, r0
   10534:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
   10538:	3201      	adds	r2, #1
   1053a:	f143 0300 	adc.w	r3, r3, #0
   1053e:	f8ca 2010 	str.w	r2, [sl, #16]
   10542:	f8ca 3014 	str.w	r3, [sl, #20]
   10546:	e042      	b.n	105ce <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   10548:	9b00      	ldr	r3, [sp, #0]
   1054a:	1ac2      	subs	r2, r0, r3
   1054c:	9b01      	ldr	r3, [sp, #4]
   1054e:	eb61 0303 	sbc.w	r3, r1, r3
   10552:	f8cc 2010 	str.w	r2, [ip, #16]
   10556:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
   1055a:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
   1055e:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
   10562:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
   10566:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
   1056a:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   1056e:	f1bc 0f00 	cmp.w	ip, #0
   10572:	d049      	beq.n	10608 <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   10574:	f7ff ff78 	bl	10468 <first>
   10578:	4582      	cmp	sl, r0
   1057a:	d050      	beq.n	1061e <z_add_timeout+0x126>
	__asm__ volatile(
   1057c:	f38b 8811 	msr	BASEPRI, fp
   10580:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   10584:	2301      	movs	r3, #1
   10586:	2b00      	cmp	r3, #0
   10588:	d156      	bne.n	10638 <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   1058a:	f06f 0301 	mvn.w	r3, #1
   1058e:	ebb3 0804 	subs.w	r8, r3, r4
   10592:	f04f 30ff 	mov.w	r0, #4294967295
   10596:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   1059a:	f1b8 0f00 	cmp.w	r8, #0
   1059e:	f179 0300 	sbcs.w	r3, r9, #0
   105a2:	dbc4      	blt.n	1052e <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   105a4:	4a26      	ldr	r2, [pc, #152]	; (10640 <z_add_timeout+0x148>)
   105a6:	6813      	ldr	r3, [r2, #0]
   105a8:	6852      	ldr	r2, [r2, #4]
   105aa:	18e3      	adds	r3, r4, r3
   105ac:	eb45 0202 	adc.w	r2, r5, r2
   105b0:	f06f 0101 	mvn.w	r1, #1
   105b4:	1ace      	subs	r6, r1, r3
   105b6:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
   105ba:	4632      	mov	r2, r6
   105bc:	463b      	mov	r3, r7
   105be:	2e01      	cmp	r6, #1
   105c0:	f177 0100 	sbcs.w	r1, r7, #0
   105c4:	dbb0      	blt.n	10528 <z_add_timeout+0x30>
   105c6:	f8ca 2010 	str.w	r2, [sl, #16]
   105ca:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   105ce:	f7ff ff4b 	bl	10468 <first>
   105d2:	4684      	mov	ip, r0
   105d4:	f1bc 0f00 	cmp.w	ip, #0
   105d8:	d0c9      	beq.n	1056e <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
   105da:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
   105de:	e9da 2304 	ldrd	r2, r3, [sl, #16]
   105e2:	e9cd 2300 	strd	r2, r3, [sp]
   105e6:	4282      	cmp	r2, r0
   105e8:	418b      	sbcs	r3, r1
   105ea:	dbad      	blt.n	10548 <z_add_timeout+0x50>
			to->dticks -= t->dticks;
   105ec:	9b00      	ldr	r3, [sp, #0]
   105ee:	1a1a      	subs	r2, r3, r0
   105f0:	9b01      	ldr	r3, [sp, #4]
   105f2:	eb63 0301 	sbc.w	r3, r3, r1
   105f6:	f8ca 2010 	str.w	r2, [sl, #16]
   105fa:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   105fe:	4660      	mov	r0, ip
   10600:	f7ff ff3c 	bl	1047c <next>
   10604:	4684      	mov	ip, r0
   10606:	e7e5      	b.n	105d4 <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
   10608:	4b0e      	ldr	r3, [pc, #56]	; (10644 <z_add_timeout+0x14c>)
   1060a:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   1060c:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
   10610:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
   10614:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   10618:	f8c3 a004 	str.w	sl, [r3, #4]
}
   1061c:	e7aa      	b.n	10574 <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   1061e:	f7ff ff45 	bl	104ac <next_timeout>

			if (next_time == 0 ||
   10622:	4603      	mov	r3, r0
   10624:	b118      	cbz	r0, 1062e <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
   10626:	4a08      	ldr	r2, [pc, #32]	; (10648 <z_add_timeout+0x150>)
   10628:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   1062a:	4282      	cmp	r2, r0
   1062c:	d0a6      	beq.n	1057c <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
   1062e:	2100      	movs	r1, #0
   10630:	4618      	mov	r0, r3
   10632:	f7f9 f973 	bl	991c <sys_clock_set_timeout>
   10636:	e7a1      	b.n	1057c <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   10638:	b003      	add	sp, #12
   1063a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1063e:	bf00      	nop
   10640:	20000948 	.word	0x20000948
   10644:	200002bc 	.word	0x200002bc
   10648:	20002f18 	.word	0x20002f18

0001064c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   1064c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1064e:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   10650:	f7ff fbae 	bl	fdb0 <z_time_slice>
	__asm__ volatile(
   10654:	f04f 0320 	mov.w	r3, #32
   10658:	f3ef 8511 	mrs	r5, BASEPRI
   1065c:	f383 8812 	msr	BASEPRI_MAX, r3
   10660:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   10664:	4b28      	ldr	r3, [pc, #160]	; (10708 <sys_clock_announce+0xbc>)
   10666:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   10668:	f7ff fefe 	bl	10468 <first>
   1066c:	4604      	mov	r4, r0
   1066e:	b350      	cbz	r0, 106c6 <sys_clock_announce+0x7a>
   10670:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   10674:	4b24      	ldr	r3, [pc, #144]	; (10708 <sys_clock_announce+0xbc>)
   10676:	681b      	ldr	r3, [r3, #0]
   10678:	17d9      	asrs	r1, r3, #31
   1067a:	42b3      	cmp	r3, r6
   1067c:	eb71 0207 	sbcs.w	r2, r1, r7
   10680:	db21      	blt.n	106c6 <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   10682:	4a22      	ldr	r2, [pc, #136]	; (1070c <sys_clock_announce+0xc0>)
   10684:	e9d2 0100 	ldrd	r0, r1, [r2]
   10688:	1980      	adds	r0, r0, r6
   1068a:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
   1068e:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
   10692:	1b9b      	subs	r3, r3, r6
   10694:	4a1c      	ldr	r2, [pc, #112]	; (10708 <sys_clock_announce+0xbc>)
   10696:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
   10698:	2200      	movs	r2, #0
   1069a:	2300      	movs	r3, #0
   1069c:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   106a0:	4620      	mov	r0, r4
   106a2:	f005 f987 	bl	159b4 <remove_timeout>
	__asm__ volatile(
   106a6:	f385 8811 	msr	BASEPRI, r5
   106aa:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   106ae:	68a3      	ldr	r3, [r4, #8]
   106b0:	4620      	mov	r0, r4
   106b2:	4798      	blx	r3
	__asm__ volatile(
   106b4:	f04f 0320 	mov.w	r3, #32
   106b8:	f3ef 8511 	mrs	r5, BASEPRI
   106bc:	f383 8812 	msr	BASEPRI_MAX, r3
   106c0:	f3bf 8f6f 	isb	sy
   106c4:	e7d0      	b.n	10668 <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
   106c6:	b144      	cbz	r4, 106da <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
   106c8:	4b0f      	ldr	r3, [pc, #60]	; (10708 <sys_clock_announce+0xbc>)
   106ca:	6819      	ldr	r1, [r3, #0]
   106cc:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   106d0:	1a52      	subs	r2, r2, r1
   106d2:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   106d6:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
   106da:	480c      	ldr	r0, [pc, #48]	; (1070c <sys_clock_announce+0xc0>)
   106dc:	490a      	ldr	r1, [pc, #40]	; (10708 <sys_clock_announce+0xbc>)
   106de:	680c      	ldr	r4, [r1, #0]
   106e0:	e9d0 2300 	ldrd	r2, r3, [r0]
   106e4:	1912      	adds	r2, r2, r4
   106e6:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
   106ea:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
   106ee:	2400      	movs	r4, #0
   106f0:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
   106f2:	f7ff fedb 	bl	104ac <next_timeout>
   106f6:	4621      	mov	r1, r4
   106f8:	f7f9 f910 	bl	991c <sys_clock_set_timeout>
	__asm__ volatile(
   106fc:	f385 8811 	msr	BASEPRI, r5
   10700:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   10704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10706:	bf00      	nop
   10708:	20002f58 	.word	0x20002f58
   1070c:	20000948 	.word	0x20000948

00010710 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   10710:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   10712:	2100      	movs	r1, #0
	__asm__ volatile(
   10714:	f04f 0320 	mov.w	r3, #32
   10718:	f3ef 8411 	mrs	r4, BASEPRI
   1071c:	f383 8812 	msr	BASEPRI_MAX, r3
   10720:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   10724:	2200      	movs	r2, #0
   10726:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
   10728:	b969      	cbnz	r1, 10746 <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
   1072a:	f7f9 f92b 	bl	9984 <sys_clock_elapsed>
   1072e:	4b07      	ldr	r3, [pc, #28]	; (1074c <sys_clock_tick_get+0x3c>)
   10730:	e9d3 2300 	ldrd	r2, r3, [r3]
   10734:	1812      	adds	r2, r2, r0
   10736:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1073a:	f384 8811 	msr	BASEPRI, r4
   1073e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   10742:	2101      	movs	r1, #1
   10744:	e7f0      	b.n	10728 <sys_clock_tick_get+0x18>
	}
	return t;
}
   10746:	4610      	mov	r0, r2
   10748:	4619      	mov	r1, r3
   1074a:	bd10      	pop	{r4, pc}
   1074c:	20000948 	.word	0x20000948

00010750 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   10750:	b538      	push	{r3, r4, r5, lr}
   10752:	4604      	mov	r4, r0
	__asm__ volatile(
   10754:	f04f 0320 	mov.w	r3, #32
   10758:	f3ef 8511 	mrs	r5, BASEPRI
   1075c:	f383 8812 	msr	BASEPRI_MAX, r3
   10760:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   10764:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   10768:	ea52 0103 	orrs.w	r1, r2, r3
   1076c:	d005      	beq.n	1077a <z_timer_expiration_handler+0x2a>
   1076e:	f1b3 3fff 	cmp.w	r3, #4294967295
   10772:	bf08      	it	eq
   10774:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   10778:	d11a      	bne.n	107b0 <z_timer_expiration_handler+0x60>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   1077a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1077c:	3301      	adds	r3, #1
   1077e:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   10780:	6a23      	ldr	r3, [r4, #32]
   10782:	b10b      	cbz	r3, 10788 <z_timer_expiration_handler+0x38>
		timer->expiry_fn(timer);
   10784:	4620      	mov	r0, r4
   10786:	4798      	blx	r3
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   10788:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   1078c:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1078e:	42a3      	cmp	r3, r4
   10790:	d012      	beq.n	107b8 <z_timer_expiration_handler+0x68>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   10792:	b18c      	cbz	r4, 107b8 <z_timer_expiration_handler+0x68>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
   10794:	4620      	mov	r0, r4
   10796:	f004 ff72 	bl	1567e <z_unpend_thread_no_timeout>
   1079a:	2300      	movs	r3, #0
   1079c:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	__asm__ volatile(
   107a0:	f385 8811 	msr	BASEPRI, r5
   107a4:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
   107a8:	4620      	mov	r0, r4
   107aa:	f004 ffce 	bl	1574a <z_ready_thread>
}
   107ae:	bd38      	pop	{r3, r4, r5, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   107b0:	4904      	ldr	r1, [pc, #16]	; (107c4 <z_timer_expiration_handler+0x74>)
   107b2:	f7ff fea1 	bl	104f8 <z_add_timeout>
   107b6:	e7e0      	b.n	1077a <z_timer_expiration_handler+0x2a>
   107b8:	f385 8811 	msr	BASEPRI, r5
   107bc:	f3bf 8f6f 	isb	sy
		return;
   107c0:	e7f5      	b.n	107ae <z_timer_expiration_handler+0x5e>
   107c2:	bf00      	nop
   107c4:	00010751 	.word	0x00010751

000107c8 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   107c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   107cc:	b087      	sub	sp, #28
   107ce:	4614      	mov	r4, r2
   107d0:	461d      	mov	r5, r3
   107d2:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   107d6:	f1b3 3fff 	cmp.w	r3, #4294967295
   107da:	bf08      	it	eq
   107dc:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   107e0:	d035      	beq.n	1084e <z_impl_k_timer_start+0x86>
   107e2:	4606      	mov	r6, r0
   107e4:	4613      	mov	r3, r2
   107e6:	462a      	mov	r2, r5
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   107e8:	f1b9 3fff 	cmp.w	r9, #4294967295
   107ec:	bf08      	it	eq
   107ee:	f1b8 3fff 	cmpeq.w	r8, #4294967295
   107f2:	d012      	beq.n	1081a <z_impl_k_timer_start+0x52>
   107f4:	ea58 0109 	orrs.w	r1, r8, r9
   107f8:	d00f      	beq.n	1081a <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
   107fa:	f06f 0701 	mvn.w	r7, #1
   107fe:	ebb7 0708 	subs.w	r7, r7, r8
   10802:	9702      	str	r7, [sp, #8]
   10804:	f04f 31ff 	mov.w	r1, #4294967295
   10808:	eb61 0709 	sbc.w	r7, r1, r9
   1080c:	9703      	str	r7, [sp, #12]
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   1080e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   10812:	2800      	cmp	r0, #0
   10814:	f171 0100 	sbcs.w	r1, r1, #0
   10818:	db1c      	blt.n	10854 <z_impl_k_timer_start+0x8c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   1081a:	f06f 0101 	mvn.w	r1, #1
   1081e:	ebb1 0a03 	subs.w	sl, r1, r3
   10822:	f04f 31ff 	mov.w	r1, #4294967295
   10826:	eb61 0b02 	sbc.w	fp, r1, r2
   1082a:	f1ba 0f00 	cmp.w	sl, #0
   1082e:	f17b 0100 	sbcs.w	r1, fp, #0
   10832:	db23      	blt.n	1087c <z_impl_k_timer_start+0xb4>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
   10834:	4630      	mov	r0, r6
   10836:	f005 f8d4 	bl	159e2 <z_abort_timeout>
	timer->period = period;
   1083a:	e9c6 890a 	strd	r8, r9, [r6, #40]	; 0x28
	timer->status = 0U;
   1083e:	2300      	movs	r3, #0
   10840:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   10842:	4622      	mov	r2, r4
   10844:	462b      	mov	r3, r5
   10846:	4917      	ldr	r1, [pc, #92]	; (108a4 <z_impl_k_timer_start+0xdc>)
   10848:	4630      	mov	r0, r6
   1084a:	f7ff fe55 	bl	104f8 <z_add_timeout>
		     duration);
}
   1084e:	b007      	add	sp, #28
   10850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		period.ticks = MAX(period.ticks - 1, 1);
   10854:	f118 31ff 	adds.w	r1, r8, #4294967295
   10858:	9104      	str	r1, [sp, #16]
   1085a:	f149 31ff 	adc.w	r1, r9, #4294967295
   1085e:	9105      	str	r1, [sp, #20]
   10860:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
   10864:	4638      	mov	r0, r7
   10866:	4641      	mov	r1, r8
   10868:	2f01      	cmp	r7, #1
   1086a:	f178 0700 	sbcs.w	r7, r8, #0
   1086e:	db02      	blt.n	10876 <z_impl_k_timer_start+0xae>
   10870:	4680      	mov	r8, r0
   10872:	4689      	mov	r9, r1
   10874:	e7d1      	b.n	1081a <z_impl_k_timer_start+0x52>
   10876:	2001      	movs	r0, #1
   10878:	2100      	movs	r1, #0
   1087a:	e7f9      	b.n	10870 <z_impl_k_timer_start+0xa8>
		duration.ticks = MAX(duration.ticks - 1, 0);
   1087c:	f113 33ff 	adds.w	r3, r3, #4294967295
   10880:	9300      	str	r3, [sp, #0]
   10882:	f142 33ff 	adc.w	r3, r2, #4294967295
   10886:	9301      	str	r3, [sp, #4]
   10888:	e9dd 0100 	ldrd	r0, r1, [sp]
   1088c:	4602      	mov	r2, r0
   1088e:	460b      	mov	r3, r1
   10890:	2800      	cmp	r0, #0
   10892:	f171 0100 	sbcs.w	r1, r1, #0
   10896:	db02      	blt.n	1089e <z_impl_k_timer_start+0xd6>
   10898:	4614      	mov	r4, r2
   1089a:	461d      	mov	r5, r3
   1089c:	e7ca      	b.n	10834 <z_impl_k_timer_start+0x6c>
   1089e:	2200      	movs	r2, #0
   108a0:	4613      	mov	r3, r2
   108a2:	e7f9      	b.n	10898 <z_impl_k_timer_start+0xd0>
   108a4:	00010751 	.word	0x00010751

000108a8 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   108a8:	b538      	push	{r3, r4, r5, lr}
   108aa:	4604      	mov	r4, r0
   108ac:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   108ae:	f004 fdb2 	bl	15416 <k_is_in_isr>
   108b2:	b948      	cbnz	r0, 108c8 <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   108b4:	4b05      	ldr	r3, [pc, #20]	; (108cc <z_thread_aligned_alloc+0x24>)
   108b6:	689b      	ldr	r3, [r3, #8]
   108b8:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
	}

	if (heap != NULL) {
   108bc:	b118      	cbz	r0, 108c6 <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
   108be:	462a      	mov	r2, r5
   108c0:	4621      	mov	r1, r4
   108c2:	f005 f94e 	bl	15b62 <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   108c6:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   108c8:	4801      	ldr	r0, [pc, #4]	; (108d0 <z_thread_aligned_alloc+0x28>)
   108ca:	e7f7      	b.n	108bc <z_thread_aligned_alloc+0x14>
   108cc:	20002f18 	.word	0x20002f18
   108d0:	2000039c 	.word	0x2000039c

000108d4 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
   108d4:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   108d6:	4a03      	ldr	r2, [pc, #12]	; (108e4 <boot_banner+0x10>)
   108d8:	4903      	ldr	r1, [pc, #12]	; (108e8 <boot_banner+0x14>)
   108da:	4804      	ldr	r0, [pc, #16]	; (108ec <boot_banner+0x18>)
   108dc:	f000 fa76 	bl	10dcc <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   108e0:	bd08      	pop	{r3, pc}
   108e2:	bf00      	nop
   108e4:	000177ac 	.word	0x000177ac
   108e8:	000177e0 	.word	0x000177e0
   108ec:	000177ec 	.word	0x000177ec

000108f0 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   108f0:	b510      	push	{r4, lr}
   108f2:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   108f4:	4b08      	ldr	r3, [pc, #32]	; (10918 <k_sys_work_q_init+0x28>)
   108f6:	9302      	str	r3, [sp, #8]
   108f8:	2400      	movs	r4, #0
   108fa:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   108fe:	ab02      	add	r3, sp, #8
   10900:	9300      	str	r3, [sp, #0]
   10902:	f04f 33ff 	mov.w	r3, #4294967295
   10906:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1090a:	4904      	ldr	r1, [pc, #16]	; (1091c <k_sys_work_q_init+0x2c>)
   1090c:	4804      	ldr	r0, [pc, #16]	; (10920 <k_sys_work_q_init+0x30>)
   1090e:	f7ff f911 	bl	fb34 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   10912:	4620      	mov	r0, r4
   10914:	b004      	add	sp, #16
   10916:	bd10      	pop	{r4, pc}
   10918:	00017814 	.word	0x00017814
   1091c:	20004e40 	.word	0x20004e40
   10920:	20000950 	.word	0x20000950

00010924 <nrf_cc3xx_platform_init_no_rng>:
   10924:	b510      	push	{r4, lr}
   10926:	4c0a      	ldr	r4, [pc, #40]	; (10950 <nrf_cc3xx_platform_init_no_rng+0x2c>)
   10928:	6823      	ldr	r3, [r4, #0]
   1092a:	b11b      	cbz	r3, 10934 <nrf_cc3xx_platform_init_no_rng+0x10>
   1092c:	2301      	movs	r3, #1
   1092e:	6023      	str	r3, [r4, #0]
   10930:	2000      	movs	r0, #0
   10932:	bd10      	pop	{r4, pc}
   10934:	f000 f8d6 	bl	10ae4 <CC_LibInitNoRng>
   10938:	2800      	cmp	r0, #0
   1093a:	d0f7      	beq.n	1092c <nrf_cc3xx_platform_init_no_rng+0x8>
   1093c:	3801      	subs	r0, #1
   1093e:	2806      	cmp	r0, #6
   10940:	d803      	bhi.n	1094a <nrf_cc3xx_platform_init_no_rng+0x26>
   10942:	4b04      	ldr	r3, [pc, #16]	; (10954 <nrf_cc3xx_platform_init_no_rng+0x30>)
   10944:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   10948:	bd10      	pop	{r4, pc}
   1094a:	4803      	ldr	r0, [pc, #12]	; (10958 <nrf_cc3xx_platform_init_no_rng+0x34>)
   1094c:	bd10      	pop	{r4, pc}
   1094e:	bf00      	nop
   10950:	20002f5c 	.word	0x20002f5c
   10954:	00017820 	.word	0x00017820
   10958:	ffff8ffe 	.word	0xffff8ffe

0001095c <nrf_cc3xx_platform_abort>:
   1095c:	f3bf 8f4f 	dsb	sy
   10960:	4905      	ldr	r1, [pc, #20]	; (10978 <nrf_cc3xx_platform_abort+0x1c>)
   10962:	4b06      	ldr	r3, [pc, #24]	; (1097c <nrf_cc3xx_platform_abort+0x20>)
   10964:	68ca      	ldr	r2, [r1, #12]
   10966:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1096a:	4313      	orrs	r3, r2
   1096c:	60cb      	str	r3, [r1, #12]
   1096e:	f3bf 8f4f 	dsb	sy
   10972:	bf00      	nop
   10974:	e7fd      	b.n	10972 <nrf_cc3xx_platform_abort+0x16>
   10976:	bf00      	nop
   10978:	e000ed00 	.word	0xe000ed00
   1097c:	05fa0004 	.word	0x05fa0004

00010980 <CC_PalAbort>:
   10980:	b4f0      	push	{r4, r5, r6, r7}
   10982:	4f09      	ldr	r7, [pc, #36]	; (109a8 <CC_PalAbort+0x28>)
   10984:	4e09      	ldr	r6, [pc, #36]	; (109ac <CC_PalAbort+0x2c>)
   10986:	4c0a      	ldr	r4, [pc, #40]	; (109b0 <CC_PalAbort+0x30>)
   10988:	4a0a      	ldr	r2, [pc, #40]	; (109b4 <CC_PalAbort+0x34>)
   1098a:	4d0b      	ldr	r5, [pc, #44]	; (109b8 <CC_PalAbort+0x38>)
   1098c:	490b      	ldr	r1, [pc, #44]	; (109bc <CC_PalAbort+0x3c>)
   1098e:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   10992:	603b      	str	r3, [r7, #0]
   10994:	6852      	ldr	r2, [r2, #4]
   10996:	6033      	str	r3, [r6, #0]
   10998:	6023      	str	r3, [r4, #0]
   1099a:	2400      	movs	r4, #0
   1099c:	602b      	str	r3, [r5, #0]
   1099e:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
   109a2:	bcf0      	pop	{r4, r5, r6, r7}
   109a4:	4710      	bx	r2
   109a6:	bf00      	nop
   109a8:	5002b400 	.word	0x5002b400
   109ac:	5002b404 	.word	0x5002b404
   109b0:	5002b408 	.word	0x5002b408
   109b4:	200002c4 	.word	0x200002c4
   109b8:	5002b40c 	.word	0x5002b40c
   109bc:	5002a000 	.word	0x5002a000

000109c0 <nrf_cc3xx_platform_set_abort>:
   109c0:	e9d0 1200 	ldrd	r1, r2, [r0]
   109c4:	4b01      	ldr	r3, [pc, #4]	; (109cc <nrf_cc3xx_platform_set_abort+0xc>)
   109c6:	e9c3 1200 	strd	r1, r2, [r3]
   109ca:	4770      	bx	lr
   109cc:	200002c4 	.word	0x200002c4

000109d0 <mutex_free>:
   109d0:	b510      	push	{r4, lr}
   109d2:	4604      	mov	r4, r0
   109d4:	b130      	cbz	r0, 109e4 <mutex_free+0x14>
   109d6:	6863      	ldr	r3, [r4, #4]
   109d8:	06db      	lsls	r3, r3, #27
   109da:	d502      	bpl.n	109e2 <mutex_free+0x12>
   109dc:	2300      	movs	r3, #0
   109de:	6023      	str	r3, [r4, #0]
   109e0:	6063      	str	r3, [r4, #4]
   109e2:	bd10      	pop	{r4, pc}
   109e4:	4b02      	ldr	r3, [pc, #8]	; (109f0 <mutex_free+0x20>)
   109e6:	4803      	ldr	r0, [pc, #12]	; (109f4 <mutex_free+0x24>)
   109e8:	685b      	ldr	r3, [r3, #4]
   109ea:	4798      	blx	r3
   109ec:	e7f3      	b.n	109d6 <mutex_free+0x6>
   109ee:	bf00      	nop
   109f0:	200002c4 	.word	0x200002c4
   109f4:	0001783c 	.word	0x0001783c

000109f8 <mutex_unlock>:
   109f8:	b168      	cbz	r0, 10a16 <mutex_unlock+0x1e>
   109fa:	6843      	ldr	r3, [r0, #4]
   109fc:	b13b      	cbz	r3, 10a0e <mutex_unlock+0x16>
   109fe:	06db      	lsls	r3, r3, #27
   10a00:	d507      	bpl.n	10a12 <mutex_unlock+0x1a>
   10a02:	f3bf 8f5f 	dmb	sy
   10a06:	2300      	movs	r3, #0
   10a08:	6003      	str	r3, [r0, #0]
   10a0a:	4618      	mov	r0, r3
   10a0c:	4770      	bx	lr
   10a0e:	4803      	ldr	r0, [pc, #12]	; (10a1c <mutex_unlock+0x24>)
   10a10:	4770      	bx	lr
   10a12:	4803      	ldr	r0, [pc, #12]	; (10a20 <mutex_unlock+0x28>)
   10a14:	4770      	bx	lr
   10a16:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   10a1a:	4770      	bx	lr
   10a1c:	ffff8fea 	.word	0xffff8fea
   10a20:	ffff8fe9 	.word	0xffff8fe9

00010a24 <mutex_init>:
   10a24:	b510      	push	{r4, lr}
   10a26:	4604      	mov	r4, r0
   10a28:	b120      	cbz	r0, 10a34 <mutex_init+0x10>
   10a2a:	2200      	movs	r2, #0
   10a2c:	2311      	movs	r3, #17
   10a2e:	6022      	str	r2, [r4, #0]
   10a30:	6063      	str	r3, [r4, #4]
   10a32:	bd10      	pop	{r4, pc}
   10a34:	4801      	ldr	r0, [pc, #4]	; (10a3c <mutex_init+0x18>)
   10a36:	f7ff ffa3 	bl	10980 <CC_PalAbort>
   10a3a:	e7f6      	b.n	10a2a <mutex_init+0x6>
   10a3c:	00017864 	.word	0x00017864

00010a40 <mutex_lock>:
   10a40:	b1c0      	cbz	r0, 10a74 <mutex_lock+0x34>
   10a42:	6843      	ldr	r3, [r0, #4]
   10a44:	b1a3      	cbz	r3, 10a70 <mutex_lock+0x30>
   10a46:	06db      	lsls	r3, r3, #27
   10a48:	d510      	bpl.n	10a6c <mutex_lock+0x2c>
   10a4a:	2201      	movs	r2, #1
   10a4c:	f3bf 8f5b 	dmb	ish
   10a50:	e850 3f00 	ldrex	r3, [r0]
   10a54:	e840 2100 	strex	r1, r2, [r0]
   10a58:	2900      	cmp	r1, #0
   10a5a:	d1f9      	bne.n	10a50 <mutex_lock+0x10>
   10a5c:	f3bf 8f5b 	dmb	ish
   10a60:	2b01      	cmp	r3, #1
   10a62:	d0f3      	beq.n	10a4c <mutex_lock+0xc>
   10a64:	f3bf 8f5f 	dmb	sy
   10a68:	2000      	movs	r0, #0
   10a6a:	4770      	bx	lr
   10a6c:	4803      	ldr	r0, [pc, #12]	; (10a7c <mutex_lock+0x3c>)
   10a6e:	4770      	bx	lr
   10a70:	4803      	ldr	r0, [pc, #12]	; (10a80 <mutex_lock+0x40>)
   10a72:	4770      	bx	lr
   10a74:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   10a78:	4770      	bx	lr
   10a7a:	bf00      	nop
   10a7c:	ffff8fe9 	.word	0xffff8fe9
   10a80:	ffff8fea 	.word	0xffff8fea

00010a84 <nrf_cc3xx_platform_set_mutexes>:
   10a84:	b570      	push	{r4, r5, r6, lr}
   10a86:	e9d0 2300 	ldrd	r2, r3, [r0]
   10a8a:	4c13      	ldr	r4, [pc, #76]	; (10ad8 <nrf_cc3xx_platform_set_mutexes+0x54>)
   10a8c:	4d13      	ldr	r5, [pc, #76]	; (10adc <nrf_cc3xx_platform_set_mutexes+0x58>)
   10a8e:	e9c4 2300 	strd	r2, r3, [r4]
   10a92:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
   10a96:	e9c4 6302 	strd	r6, r3, [r4, #8]
   10a9a:	4b11      	ldr	r3, [pc, #68]	; (10ae0 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   10a9c:	6808      	ldr	r0, [r1, #0]
   10a9e:	6018      	str	r0, [r3, #0]
   10aa0:	6848      	ldr	r0, [r1, #4]
   10aa2:	6058      	str	r0, [r3, #4]
   10aa4:	6888      	ldr	r0, [r1, #8]
   10aa6:	6098      	str	r0, [r3, #8]
   10aa8:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
   10aac:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   10ab0:	60de      	str	r6, [r3, #12]
   10ab2:	6118      	str	r0, [r3, #16]
   10ab4:	06cb      	lsls	r3, r1, #27
   10ab6:	d50d      	bpl.n	10ad4 <nrf_cc3xx_platform_set_mutexes+0x50>
   10ab8:	2300      	movs	r3, #0
   10aba:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
   10abe:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
   10ac2:	f505 7088 	add.w	r0, r5, #272	; 0x110
   10ac6:	4790      	blx	r2
   10ac8:	6823      	ldr	r3, [r4, #0]
   10aca:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
   10ace:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10ad2:	4718      	bx	r3
   10ad4:	bd70      	pop	{r4, r5, r6, pc}
   10ad6:	bf00      	nop
   10ad8:	200002d4 	.word	0x200002d4
   10adc:	20002f84 	.word	0x20002f84
   10ae0:	200002e4 	.word	0x200002e4

00010ae4 <CC_LibInitNoRng>:
   10ae4:	b510      	push	{r4, lr}
   10ae6:	f000 f833 	bl	10b50 <CC_HalInit>
   10aea:	b120      	cbz	r0, 10af6 <CC_LibInitNoRng+0x12>
   10aec:	2403      	movs	r4, #3
   10aee:	f000 f867 	bl	10bc0 <CC_PalTerminate>
   10af2:	4620      	mov	r0, r4
   10af4:	bd10      	pop	{r4, pc}
   10af6:	f000 f835 	bl	10b64 <CC_PalInit>
   10afa:	b990      	cbnz	r0, 10b22 <CC_LibInitNoRng+0x3e>
   10afc:	f000 f8b0 	bl	10c60 <CC_PalPowerSaveModeSelect>
   10b00:	b990      	cbnz	r0, 10b28 <CC_LibInitNoRng+0x44>
   10b02:	4b0f      	ldr	r3, [pc, #60]	; (10b40 <CC_LibInitNoRng+0x5c>)
   10b04:	681b      	ldr	r3, [r3, #0]
   10b06:	0e1b      	lsrs	r3, r3, #24
   10b08:	2bf0      	cmp	r3, #240	; 0xf0
   10b0a:	d108      	bne.n	10b1e <CC_LibInitNoRng+0x3a>
   10b0c:	4a0d      	ldr	r2, [pc, #52]	; (10b44 <CC_LibInitNoRng+0x60>)
   10b0e:	4b0e      	ldr	r3, [pc, #56]	; (10b48 <CC_LibInitNoRng+0x64>)
   10b10:	6812      	ldr	r2, [r2, #0]
   10b12:	429a      	cmp	r2, r3
   10b14:	d00a      	beq.n	10b2c <CC_LibInitNoRng+0x48>
   10b16:	2407      	movs	r4, #7
   10b18:	f000 f81c 	bl	10b54 <CC_HalTerminate>
   10b1c:	e7e7      	b.n	10aee <CC_LibInitNoRng+0xa>
   10b1e:	2406      	movs	r4, #6
   10b20:	e7fa      	b.n	10b18 <CC_LibInitNoRng+0x34>
   10b22:	2404      	movs	r4, #4
   10b24:	4620      	mov	r0, r4
   10b26:	bd10      	pop	{r4, pc}
   10b28:	2400      	movs	r4, #0
   10b2a:	e7f5      	b.n	10b18 <CC_LibInitNoRng+0x34>
   10b2c:	2001      	movs	r0, #1
   10b2e:	f000 f897 	bl	10c60 <CC_PalPowerSaveModeSelect>
   10b32:	4604      	mov	r4, r0
   10b34:	2800      	cmp	r0, #0
   10b36:	d1f7      	bne.n	10b28 <CC_LibInitNoRng+0x44>
   10b38:	4b04      	ldr	r3, [pc, #16]	; (10b4c <CC_LibInitNoRng+0x68>)
   10b3a:	6018      	str	r0, [r3, #0]
   10b3c:	e7d9      	b.n	10af2 <CC_LibInitNoRng+0xe>
   10b3e:	bf00      	nop
   10b40:	5002b928 	.word	0x5002b928
   10b44:	5002ba24 	.word	0x5002ba24
   10b48:	20e00000 	.word	0x20e00000
   10b4c:	5002ba0c 	.word	0x5002ba0c

00010b50 <CC_HalInit>:
   10b50:	2000      	movs	r0, #0
   10b52:	4770      	bx	lr

00010b54 <CC_HalTerminate>:
   10b54:	2000      	movs	r0, #0
   10b56:	4770      	bx	lr

00010b58 <CC_HalMaskInterrupt>:
   10b58:	4b01      	ldr	r3, [pc, #4]	; (10b60 <CC_HalMaskInterrupt+0x8>)
   10b5a:	6018      	str	r0, [r3, #0]
   10b5c:	4770      	bx	lr
   10b5e:	bf00      	nop
   10b60:	5002ba04 	.word	0x5002ba04

00010b64 <CC_PalInit>:
   10b64:	b510      	push	{r4, lr}
   10b66:	4811      	ldr	r0, [pc, #68]	; (10bac <CC_PalInit+0x48>)
   10b68:	f000 f848 	bl	10bfc <CC_PalMutexCreate>
   10b6c:	b100      	cbz	r0, 10b70 <CC_PalInit+0xc>
   10b6e:	bd10      	pop	{r4, pc}
   10b70:	480f      	ldr	r0, [pc, #60]	; (10bb0 <CC_PalInit+0x4c>)
   10b72:	f000 f843 	bl	10bfc <CC_PalMutexCreate>
   10b76:	2800      	cmp	r0, #0
   10b78:	d1f9      	bne.n	10b6e <CC_PalInit+0xa>
   10b7a:	4c0e      	ldr	r4, [pc, #56]	; (10bb4 <CC_PalInit+0x50>)
   10b7c:	4620      	mov	r0, r4
   10b7e:	f000 f83d 	bl	10bfc <CC_PalMutexCreate>
   10b82:	2800      	cmp	r0, #0
   10b84:	d1f3      	bne.n	10b6e <CC_PalInit+0xa>
   10b86:	4b0c      	ldr	r3, [pc, #48]	; (10bb8 <CC_PalInit+0x54>)
   10b88:	480c      	ldr	r0, [pc, #48]	; (10bbc <CC_PalInit+0x58>)
   10b8a:	601c      	str	r4, [r3, #0]
   10b8c:	f000 f836 	bl	10bfc <CC_PalMutexCreate>
   10b90:	4601      	mov	r1, r0
   10b92:	2800      	cmp	r0, #0
   10b94:	d1eb      	bne.n	10b6e <CC_PalInit+0xa>
   10b96:	f000 f82d 	bl	10bf4 <CC_PalDmaInit>
   10b9a:	4604      	mov	r4, r0
   10b9c:	b108      	cbz	r0, 10ba2 <CC_PalInit+0x3e>
   10b9e:	4620      	mov	r0, r4
   10ba0:	bd10      	pop	{r4, pc}
   10ba2:	f000 f83f 	bl	10c24 <CC_PalPowerSaveModeInit>
   10ba6:	4620      	mov	r0, r4
   10ba8:	e7fa      	b.n	10ba0 <CC_PalInit+0x3c>
   10baa:	bf00      	nop
   10bac:	2000031c 	.word	0x2000031c
   10bb0:	20000310 	.word	0x20000310
   10bb4:	20000318 	.word	0x20000318
   10bb8:	20000320 	.word	0x20000320
   10bbc:	20000314 	.word	0x20000314

00010bc0 <CC_PalTerminate>:
   10bc0:	b508      	push	{r3, lr}
   10bc2:	4808      	ldr	r0, [pc, #32]	; (10be4 <CC_PalTerminate+0x24>)
   10bc4:	f000 f824 	bl	10c10 <CC_PalMutexDestroy>
   10bc8:	4807      	ldr	r0, [pc, #28]	; (10be8 <CC_PalTerminate+0x28>)
   10bca:	f000 f821 	bl	10c10 <CC_PalMutexDestroy>
   10bce:	4807      	ldr	r0, [pc, #28]	; (10bec <CC_PalTerminate+0x2c>)
   10bd0:	f000 f81e 	bl	10c10 <CC_PalMutexDestroy>
   10bd4:	4806      	ldr	r0, [pc, #24]	; (10bf0 <CC_PalTerminate+0x30>)
   10bd6:	f000 f81b 	bl	10c10 <CC_PalMutexDestroy>
   10bda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   10bde:	f000 b80b 	b.w	10bf8 <CC_PalDmaTerminate>
   10be2:	bf00      	nop
   10be4:	2000031c 	.word	0x2000031c
   10be8:	20000310 	.word	0x20000310
   10bec:	20000318 	.word	0x20000318
   10bf0:	20000314 	.word	0x20000314

00010bf4 <CC_PalDmaInit>:
   10bf4:	2000      	movs	r0, #0
   10bf6:	4770      	bx	lr

00010bf8 <CC_PalDmaTerminate>:
   10bf8:	4770      	bx	lr
   10bfa:	bf00      	nop

00010bfc <CC_PalMutexCreate>:
   10bfc:	b508      	push	{r3, lr}
   10bfe:	4b03      	ldr	r3, [pc, #12]	; (10c0c <CC_PalMutexCreate+0x10>)
   10c00:	6802      	ldr	r2, [r0, #0]
   10c02:	681b      	ldr	r3, [r3, #0]
   10c04:	6810      	ldr	r0, [r2, #0]
   10c06:	4798      	blx	r3
   10c08:	2000      	movs	r0, #0
   10c0a:	bd08      	pop	{r3, pc}
   10c0c:	200002d4 	.word	0x200002d4

00010c10 <CC_PalMutexDestroy>:
   10c10:	b508      	push	{r3, lr}
   10c12:	4b03      	ldr	r3, [pc, #12]	; (10c20 <CC_PalMutexDestroy+0x10>)
   10c14:	6802      	ldr	r2, [r0, #0]
   10c16:	685b      	ldr	r3, [r3, #4]
   10c18:	6810      	ldr	r0, [r2, #0]
   10c1a:	4798      	blx	r3
   10c1c:	2000      	movs	r0, #0
   10c1e:	bd08      	pop	{r3, pc}
   10c20:	200002d4 	.word	0x200002d4

00010c24 <CC_PalPowerSaveModeInit>:
   10c24:	b570      	push	{r4, r5, r6, lr}
   10c26:	4c09      	ldr	r4, [pc, #36]	; (10c4c <CC_PalPowerSaveModeInit+0x28>)
   10c28:	4d09      	ldr	r5, [pc, #36]	; (10c50 <CC_PalPowerSaveModeInit+0x2c>)
   10c2a:	6920      	ldr	r0, [r4, #16]
   10c2c:	68ab      	ldr	r3, [r5, #8]
   10c2e:	4798      	blx	r3
   10c30:	b118      	cbz	r0, 10c3a <CC_PalPowerSaveModeInit+0x16>
   10c32:	4b08      	ldr	r3, [pc, #32]	; (10c54 <CC_PalPowerSaveModeInit+0x30>)
   10c34:	4808      	ldr	r0, [pc, #32]	; (10c58 <CC_PalPowerSaveModeInit+0x34>)
   10c36:	685b      	ldr	r3, [r3, #4]
   10c38:	4798      	blx	r3
   10c3a:	4a08      	ldr	r2, [pc, #32]	; (10c5c <CC_PalPowerSaveModeInit+0x38>)
   10c3c:	68eb      	ldr	r3, [r5, #12]
   10c3e:	6920      	ldr	r0, [r4, #16]
   10c40:	2100      	movs	r1, #0
   10c42:	6011      	str	r1, [r2, #0]
   10c44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   10c48:	4718      	bx	r3
   10c4a:	bf00      	nop
   10c4c:	200002e4 	.word	0x200002e4
   10c50:	200002d4 	.word	0x200002d4
   10c54:	200002c4 	.word	0x200002c4
   10c58:	00017888 	.word	0x00017888
   10c5c:	20002f70 	.word	0x20002f70

00010c60 <CC_PalPowerSaveModeSelect>:
   10c60:	b570      	push	{r4, r5, r6, lr}
   10c62:	4d1a      	ldr	r5, [pc, #104]	; (10ccc <CC_PalPowerSaveModeSelect+0x6c>)
   10c64:	4e1a      	ldr	r6, [pc, #104]	; (10cd0 <CC_PalPowerSaveModeSelect+0x70>)
   10c66:	4604      	mov	r4, r0
   10c68:	68b2      	ldr	r2, [r6, #8]
   10c6a:	6928      	ldr	r0, [r5, #16]
   10c6c:	4790      	blx	r2
   10c6e:	b9f0      	cbnz	r0, 10cae <CC_PalPowerSaveModeSelect+0x4e>
   10c70:	b15c      	cbz	r4, 10c8a <CC_PalPowerSaveModeSelect+0x2a>
   10c72:	4c18      	ldr	r4, [pc, #96]	; (10cd4 <CC_PalPowerSaveModeSelect+0x74>)
   10c74:	6823      	ldr	r3, [r4, #0]
   10c76:	b1ab      	cbz	r3, 10ca4 <CC_PalPowerSaveModeSelect+0x44>
   10c78:	2b01      	cmp	r3, #1
   10c7a:	d01a      	beq.n	10cb2 <CC_PalPowerSaveModeSelect+0x52>
   10c7c:	3b01      	subs	r3, #1
   10c7e:	6023      	str	r3, [r4, #0]
   10c80:	6928      	ldr	r0, [r5, #16]
   10c82:	68f3      	ldr	r3, [r6, #12]
   10c84:	4798      	blx	r3
   10c86:	2000      	movs	r0, #0
   10c88:	bd70      	pop	{r4, r5, r6, pc}
   10c8a:	4c12      	ldr	r4, [pc, #72]	; (10cd4 <CC_PalPowerSaveModeSelect+0x74>)
   10c8c:	6821      	ldr	r1, [r4, #0]
   10c8e:	b939      	cbnz	r1, 10ca0 <CC_PalPowerSaveModeSelect+0x40>
   10c90:	4b11      	ldr	r3, [pc, #68]	; (10cd8 <CC_PalPowerSaveModeSelect+0x78>)
   10c92:	4a12      	ldr	r2, [pc, #72]	; (10cdc <CC_PalPowerSaveModeSelect+0x7c>)
   10c94:	2001      	movs	r0, #1
   10c96:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   10c9a:	6813      	ldr	r3, [r2, #0]
   10c9c:	2b00      	cmp	r3, #0
   10c9e:	d1fc      	bne.n	10c9a <CC_PalPowerSaveModeSelect+0x3a>
   10ca0:	3101      	adds	r1, #1
   10ca2:	6021      	str	r1, [r4, #0]
   10ca4:	68f3      	ldr	r3, [r6, #12]
   10ca6:	6928      	ldr	r0, [r5, #16]
   10ca8:	4798      	blx	r3
   10caa:	2000      	movs	r0, #0
   10cac:	bd70      	pop	{r4, r5, r6, pc}
   10cae:	480c      	ldr	r0, [pc, #48]	; (10ce0 <CC_PalPowerSaveModeSelect+0x80>)
   10cb0:	bd70      	pop	{r4, r5, r6, pc}
   10cb2:	4a0a      	ldr	r2, [pc, #40]	; (10cdc <CC_PalPowerSaveModeSelect+0x7c>)
   10cb4:	6813      	ldr	r3, [r2, #0]
   10cb6:	2b00      	cmp	r3, #0
   10cb8:	d1fc      	bne.n	10cb4 <CC_PalPowerSaveModeSelect+0x54>
   10cba:	4a07      	ldr	r2, [pc, #28]	; (10cd8 <CC_PalPowerSaveModeSelect+0x78>)
   10cbc:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   10cc0:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   10cc4:	f7ff ff48 	bl	10b58 <CC_HalMaskInterrupt>
   10cc8:	6823      	ldr	r3, [r4, #0]
   10cca:	e7d7      	b.n	10c7c <CC_PalPowerSaveModeSelect+0x1c>
   10ccc:	200002e4 	.word	0x200002e4
   10cd0:	200002d4 	.word	0x200002d4
   10cd4:	20002f70 	.word	0x20002f70
   10cd8:	5002a000 	.word	0x5002a000
   10cdc:	5002b910 	.word	0x5002b910
   10ce0:	ffff8fe9 	.word	0xffff8fe9

00010ce4 <crc16calc>:
 uint16_t crc16calc(char* pData, int length){
   10ce4:	b410      	push	{r4}
   10ce6:	4604      	mov	r4, r0
     uint16_t wCrc = 0xffff;
   10ce8:	f64f 70ff 	movw	r0, #65535	; 0xffff
     while (length--) {
   10cec:	460b      	mov	r3, r1
   10cee:	3901      	subs	r1, #1
   10cf0:	b1a3      	cbz	r3, 10d1c <crc16calc+0x38>
         wCrc ^= *(unsigned char *)pData++ << 8;
   10cf2:	f814 3b01 	ldrb.w	r3, [r4], #1
   10cf6:	ea80 2003 	eor.w	r0, r0, r3, lsl #8
         for (i=0; i < 8; i++)
   10cfa:	2300      	movs	r3, #0
   10cfc:	e006      	b.n	10d0c <crc16calc+0x28>
             wCrc = wCrc & 0x8000 ? (wCrc << 1) ^ 0x1021 : wCrc << 1;
   10cfe:	f241 0221 	movw	r2, #4129	; 0x1021
   10d02:	ea82 0040 	eor.w	r0, r2, r0, lsl #1
   10d06:	b280      	uxth	r0, r0
         for (i=0; i < 8; i++)
   10d08:	3301      	adds	r3, #1
   10d0a:	b2db      	uxtb	r3, r3
   10d0c:	2b07      	cmp	r3, #7
   10d0e:	d8ed      	bhi.n	10cec <crc16calc+0x8>
             wCrc = wCrc & 0x8000 ? (wCrc << 1) ^ 0x1021 : wCrc << 1;
   10d10:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   10d14:	d1f3      	bne.n	10cfe <crc16calc+0x1a>
   10d16:	0040      	lsls	r0, r0, #1
   10d18:	b280      	uxth	r0, r0
   10d1a:	e7f5      	b.n	10d08 <crc16calc+0x24>
 }
   10d1c:	bc10      	pop	{r4}
   10d1e:	4770      	bx	lr

00010d20 <EncapsulationMsgs>:
 void EncapsulationMsgs(char *data1,char *data2,int len){
   10d20:	b538      	push	{r3, r4, r5, lr}
   10d22:	460d      	mov	r5, r1
   10d24:	4611      	mov	r1, r2
	 data2[0]=0x7E;
   10d26:	237e      	movs	r3, #126	; 0x7e
   10d28:	702b      	strb	r3, [r5, #0]
	 int i = 1;
   10d2a:	2401      	movs	r4, #1
	 for(;i<=len;i++)data2[i]=data1[i-1];
   10d2c:	428c      	cmp	r4, r1
   10d2e:	dc05      	bgt.n	10d3c <EncapsulationMsgs+0x1c>
   10d30:	1903      	adds	r3, r0, r4
   10d32:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   10d36:	552b      	strb	r3, [r5, r4]
   10d38:	3401      	adds	r4, #1
   10d3a:	e7f7      	b.n	10d2c <EncapsulationMsgs+0xc>
	 aux=crc16calc(data1,len);
   10d3c:	f7ff ffd2 	bl	10ce4 <crc16calc>
	 data2[i+1] = aux;
   10d40:	1c63      	adds	r3, r4, #1
   10d42:	54e8      	strb	r0, [r5, r3]
	 data2[i]= aux>>8;
   10d44:	0a00      	lsrs	r0, r0, #8
   10d46:	5528      	strb	r0, [r5, r4]
	 data2[i+2] = 0xFF;
   10d48:	3402      	adds	r4, #2
   10d4a:	23ff      	movs	r3, #255	; 0xff
   10d4c:	552b      	strb	r3, [r5, r4]
 }
   10d4e:	bd38      	pop	{r3, r4, r5, pc}

00010d50 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   10d50:	4602      	mov	r2, r0
   10d52:	b158      	cbz	r0, 10d6c <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   10d54:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   10d56:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   10d5a:	2b01      	cmp	r3, #1
   10d5c:	d003      	beq.n	10d66 <sys_notify_validate+0x16>
   10d5e:	2b03      	cmp	r3, #3
   10d60:	d107      	bne.n	10d72 <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   10d62:	6803      	ldr	r3, [r0, #0]
   10d64:	b143      	cbz	r3, 10d78 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   10d66:	2000      	movs	r0, #0
   10d68:	6090      	str	r0, [r2, #8]
   10d6a:	4770      	bx	lr
		return -EINVAL;
   10d6c:	f06f 0015 	mvn.w	r0, #21
   10d70:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
   10d72:	f06f 0015 	mvn.w	r0, #21
   10d76:	4770      	bx	lr
			rv = -EINVAL;
   10d78:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   10d7c:	4770      	bx	lr

00010d7e <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   10d7e:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   10d80:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   10d82:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   10d86:	6081      	str	r1, [r0, #8]
	switch (method) {
   10d88:	2a03      	cmp	r2, #3
   10d8a:	d103      	bne.n	10d94 <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   10d8c:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   10d8e:	2200      	movs	r2, #0
   10d90:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   10d92:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
   10d94:	2000      	movs	r0, #0
   10d96:	e7fa      	b.n	10d8e <sys_notify_finalize+0x10>

00010d98 <arch_printk_char_out>:
}
   10d98:	2000      	movs	r0, #0
   10d9a:	4770      	bx	lr

00010d9c <str_out>:
{
   10d9c:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   10d9e:	680c      	ldr	r4, [r1, #0]
   10da0:	b154      	cbz	r4, 10db8 <str_out+0x1c>
   10da2:	688a      	ldr	r2, [r1, #8]
   10da4:	684b      	ldr	r3, [r1, #4]
   10da6:	429a      	cmp	r2, r3
   10da8:	da06      	bge.n	10db8 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   10daa:	3b01      	subs	r3, #1
   10dac:	429a      	cmp	r2, r3
   10dae:	d008      	beq.n	10dc2 <str_out+0x26>
		ctx->str[ctx->count++] = c;
   10db0:	1c53      	adds	r3, r2, #1
   10db2:	608b      	str	r3, [r1, #8]
   10db4:	54a0      	strb	r0, [r4, r2]
   10db6:	e002      	b.n	10dbe <str_out+0x22>
		ctx->count++;
   10db8:	688b      	ldr	r3, [r1, #8]
   10dba:	3301      	adds	r3, #1
   10dbc:	608b      	str	r3, [r1, #8]
}
   10dbe:	bc10      	pop	{r4}
   10dc0:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   10dc2:	1c53      	adds	r3, r2, #1
   10dc4:	608b      	str	r3, [r1, #8]
   10dc6:	2300      	movs	r3, #0
   10dc8:	54a3      	strb	r3, [r4, r2]
   10dca:	e7f8      	b.n	10dbe <str_out+0x22>

00010dcc <printk>:
{
   10dcc:	b40f      	push	{r0, r1, r2, r3}
   10dce:	b500      	push	{lr}
   10dd0:	b083      	sub	sp, #12
   10dd2:	a904      	add	r1, sp, #16
   10dd4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   10dd8:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   10dda:	f7f0 fe75 	bl	1ac8 <vprintk>
}
   10dde:	b003      	add	sp, #12
   10de0:	f85d eb04 	ldr.w	lr, [sp], #4
   10de4:	b004      	add	sp, #16
   10de6:	4770      	bx	lr

00010de8 <snprintk>:
{
   10de8:	b40c      	push	{r2, r3}
   10dea:	b500      	push	{lr}
   10dec:	b083      	sub	sp, #12
   10dee:	ab04      	add	r3, sp, #16
   10df0:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   10df4:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   10df6:	f7f0 fe77 	bl	1ae8 <vsnprintk>
}
   10dfa:	b003      	add	sp, #12
   10dfc:	f85d eb04 	ldr.w	lr, [sp], #4
   10e00:	b002      	add	sp, #8
   10e02:	4770      	bx	lr

00010e04 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   10e04:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10e08:	8b01      	ldrh	r1, [r0, #24]
   10e0a:	f021 0107 	bic.w	r1, r1, #7
   10e0e:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   10e10:	8301      	strh	r1, [r0, #24]
}
   10e12:	4770      	bx	lr

00010e14 <notify_monitors>:
{
   10e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10e18:	4606      	mov	r6, r0
   10e1a:	460f      	mov	r7, r1
   10e1c:	4690      	mov	r8, r2
	return list->head;
   10e1e:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   10e20:	b119      	cbz	r1, 10e2a <notify_monitors+0x16>
   10e22:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   10e24:	b131      	cbz	r1, 10e34 <notify_monitors+0x20>
	return node->next;
   10e26:	680c      	ldr	r4, [r1, #0]
   10e28:	e004      	b.n	10e34 <notify_monitors+0x20>
   10e2a:	460c      	mov	r4, r1
   10e2c:	e002      	b.n	10e34 <notify_monitors+0x20>
   10e2e:	4623      	mov	r3, r4
   10e30:	4621      	mov	r1, r4
   10e32:	461c      	mov	r4, r3
   10e34:	b159      	cbz	r1, 10e4e <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
   10e36:	684d      	ldr	r5, [r1, #4]
   10e38:	4643      	mov	r3, r8
   10e3a:	463a      	mov	r2, r7
   10e3c:	4630      	mov	r0, r6
   10e3e:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   10e40:	2c00      	cmp	r4, #0
   10e42:	d0f4      	beq.n	10e2e <notify_monitors+0x1a>
   10e44:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   10e46:	2c00      	cmp	r4, #0
   10e48:	d0f2      	beq.n	10e30 <notify_monitors+0x1c>
	return node->next;
   10e4a:	6823      	ldr	r3, [r4, #0]
   10e4c:	e7f0      	b.n	10e30 <notify_monitors+0x1c>
}
   10e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010e52 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10e52:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   10e54:	f013 0307 	ands.w	r3, r3, #7
   10e58:	d103      	bne.n	10e62 <process_recheck+0x10>
	return list->head;
   10e5a:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   10e5c:	b10a      	cbz	r2, 10e62 <process_recheck+0x10>
		evt = EVT_START;
   10e5e:	2003      	movs	r0, #3
   10e60:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   10e62:	2b02      	cmp	r3, #2
   10e64:	d003      	beq.n	10e6e <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   10e66:	2b01      	cmp	r3, #1
   10e68:	d006      	beq.n	10e78 <process_recheck+0x26>
	int evt = EVT_NOP;
   10e6a:	2000      	movs	r0, #0
   10e6c:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   10e6e:	8b42      	ldrh	r2, [r0, #26]
   10e70:	2a00      	cmp	r2, #0
   10e72:	d1f8      	bne.n	10e66 <process_recheck+0x14>
		evt = EVT_STOP;
   10e74:	2004      	movs	r0, #4
   10e76:	4770      	bx	lr
   10e78:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   10e7a:	b10b      	cbz	r3, 10e80 <process_recheck+0x2e>
		evt = EVT_RESET;
   10e7c:	2005      	movs	r0, #5
}
   10e7e:	4770      	bx	lr
	int evt = EVT_NOP;
   10e80:	2000      	movs	r0, #0
   10e82:	4770      	bx	lr

00010e84 <process_complete>:
{
   10e84:	b538      	push	{r3, r4, r5, lr}
   10e86:	4604      	mov	r4, r0
   10e88:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10e8a:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
   10e8c:	2a00      	cmp	r2, #0
   10e8e:	db07      	blt.n	10ea0 <process_complete+0x1c>
   10e90:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   10e94:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   10e96:	2a01      	cmp	r2, #1
   10e98:	d90e      	bls.n	10eb8 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   10e9a:	2b04      	cmp	r3, #4
   10e9c:	d032      	beq.n	10f04 <process_complete+0x80>
}
   10e9e:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
   10ea0:	e9d0 0100 	ldrd	r0, r1, [r0]
   10ea4:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   10ea8:	2300      	movs	r3, #0
   10eaa:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   10eac:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   10eae:	2101      	movs	r1, #1
   10eb0:	4620      	mov	r0, r4
   10eb2:	f7ff ffa7 	bl	10e04 <set_state>
   10eb6:	e7f2      	b.n	10e9e <process_complete+0x1a>
		*clients = mgr->clients;
   10eb8:	e9d0 0100 	ldrd	r0, r1, [r0]
   10ebc:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   10ec0:	2200      	movs	r2, #0
   10ec2:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   10ec4:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   10ec6:	2b06      	cmp	r3, #6
   10ec8:	d117      	bne.n	10efa <process_complete+0x76>
	return list->head;
   10eca:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   10ecc:	b13b      	cbz	r3, 10ede <process_complete+0x5a>
				mgr->refs += 1U;
   10ece:	8b62      	ldrh	r2, [r4, #26]
   10ed0:	3201      	adds	r2, #1
   10ed2:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
   10ed4:	2b00      	cmp	r3, #0
   10ed6:	d0f9      	beq.n	10ecc <process_complete+0x48>
	return node->next;
   10ed8:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   10eda:	2b00      	cmp	r3, #0
   10edc:	d1f6      	bne.n	10ecc <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
   10ede:	2102      	movs	r1, #2
   10ee0:	4620      	mov	r0, r4
   10ee2:	f7ff ff8f 	bl	10e04 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   10ee6:	4620      	mov	r0, r4
   10ee8:	f7ff ffb3 	bl	10e52 <process_recheck>
   10eec:	2800      	cmp	r0, #0
   10eee:	d0d6      	beq.n	10e9e <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   10ef0:	8b23      	ldrh	r3, [r4, #24]
   10ef2:	f043 0320 	orr.w	r3, r3, #32
   10ef6:	8323      	strh	r3, [r4, #24]
   10ef8:	e7d1      	b.n	10e9e <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   10efa:	2100      	movs	r1, #0
   10efc:	4620      	mov	r0, r4
   10efe:	f7ff ff81 	bl	10e04 <set_state>
   10f02:	e7f0      	b.n	10ee6 <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
   10f04:	2100      	movs	r1, #0
   10f06:	f7ff ff7d 	bl	10e04 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   10f0a:	4620      	mov	r0, r4
   10f0c:	f7ff ffa1 	bl	10e52 <process_recheck>
   10f10:	2800      	cmp	r0, #0
   10f12:	d0c4      	beq.n	10e9e <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   10f14:	8b23      	ldrh	r3, [r4, #24]
   10f16:	f043 0320 	orr.w	r3, r3, #32
   10f1a:	8323      	strh	r3, [r4, #24]
}
   10f1c:	e7bf      	b.n	10e9e <process_complete+0x1a>

00010f1e <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   10f1e:	b158      	cbz	r0, 10f38 <validate_args+0x1a>
{
   10f20:	b510      	push	{r4, lr}
   10f22:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   10f24:	b159      	cbz	r1, 10f3e <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
   10f26:	1d08      	adds	r0, r1, #4
   10f28:	f7ff ff12 	bl	10d50 <sys_notify_validate>
	if ((rv == 0)
   10f2c:	b918      	cbnz	r0, 10f36 <validate_args+0x18>
	    && ((cli->notify.flags
   10f2e:	68a3      	ldr	r3, [r4, #8]
   10f30:	f033 0303 	bics.w	r3, r3, #3
   10f34:	d106      	bne.n	10f44 <validate_args+0x26>
}
   10f36:	bd10      	pop	{r4, pc}
		return -EINVAL;
   10f38:	f06f 0015 	mvn.w	r0, #21
}
   10f3c:	4770      	bx	lr
		return -EINVAL;
   10f3e:	f06f 0015 	mvn.w	r0, #21
   10f42:	e7f8      	b.n	10f36 <validate_args+0x18>
		rv = -EINVAL;
   10f44:	f06f 0015 	mvn.w	r0, #21
   10f48:	e7f5      	b.n	10f36 <validate_args+0x18>

00010f4a <notify_one>:
{
   10f4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10f4e:	4607      	mov	r7, r0
   10f50:	460c      	mov	r4, r1
   10f52:	4616      	mov	r6, r2
   10f54:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   10f56:	4619      	mov	r1, r3
   10f58:	1d20      	adds	r0, r4, #4
   10f5a:	f7ff ff10 	bl	10d7e <sys_notify_finalize>
	if (cb) {
   10f5e:	b128      	cbz	r0, 10f6c <notify_one+0x22>
   10f60:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   10f62:	462b      	mov	r3, r5
   10f64:	4632      	mov	r2, r6
   10f66:	4621      	mov	r1, r4
   10f68:	4638      	mov	r0, r7
   10f6a:	47c0      	blx	r8
}
   10f6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010f70 <notify_all>:
{
   10f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10f74:	4681      	mov	r9, r0
   10f76:	460c      	mov	r4, r1
   10f78:	4690      	mov	r8, r2
   10f7a:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
   10f7c:	e005      	b.n	10f8a <notify_all+0x1a>
	list->tail = node;
   10f7e:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
   10f80:	463b      	mov	r3, r7
   10f82:	4642      	mov	r2, r8
   10f84:	4648      	mov	r0, r9
   10f86:	f7ff ffe0 	bl	10f4a <notify_one>
	return list->head;
   10f8a:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   10f8c:	b129      	cbz	r1, 10f9a <notify_all+0x2a>
	return node->next;
   10f8e:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   10f90:	6025      	str	r5, [r4, #0]
	return list->tail;
   10f92:	6866      	ldr	r6, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10f94:	428e      	cmp	r6, r1
   10f96:	d1f3      	bne.n	10f80 <notify_all+0x10>
   10f98:	e7f1      	b.n	10f7e <notify_all+0xe>
}
   10f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00010f9e <transition_complete>:
{
   10f9e:	b510      	push	{r4, lr}
	__asm__ volatile(
   10fa0:	f04f 0420 	mov.w	r4, #32
   10fa4:	f3ef 8211 	mrs	r2, BASEPRI
   10fa8:	f384 8812 	msr	BASEPRI_MAX, r4
   10fac:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   10fb0:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
   10fb2:	2101      	movs	r1, #1
   10fb4:	f7f0 fdae 	bl	1b14 <process_event>
}
   10fb8:	bd10      	pop	{r4, pc}

00010fba <onoff_manager_init>:
	if ((mgr == NULL)
   10fba:	4603      	mov	r3, r0
   10fbc:	b168      	cbz	r0, 10fda <onoff_manager_init+0x20>
	    || (transitions == NULL)
   10fbe:	b179      	cbz	r1, 10fe0 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
   10fc0:	680a      	ldr	r2, [r1, #0]
   10fc2:	b182      	cbz	r2, 10fe6 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
   10fc4:	684a      	ldr	r2, [r1, #4]
   10fc6:	b18a      	cbz	r2, 10fec <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   10fc8:	2000      	movs	r0, #0
   10fca:	6018      	str	r0, [r3, #0]
   10fcc:	6058      	str	r0, [r3, #4]
   10fce:	6098      	str	r0, [r3, #8]
   10fd0:	60d8      	str	r0, [r3, #12]
   10fd2:	6158      	str	r0, [r3, #20]
   10fd4:	6198      	str	r0, [r3, #24]
   10fd6:	6119      	str	r1, [r3, #16]
	return 0;
   10fd8:	4770      	bx	lr
		return -EINVAL;
   10fda:	f06f 0015 	mvn.w	r0, #21
   10fde:	4770      	bx	lr
   10fe0:	f06f 0015 	mvn.w	r0, #21
   10fe4:	4770      	bx	lr
   10fe6:	f06f 0015 	mvn.w	r0, #21
   10fea:	4770      	bx	lr
   10fec:	f06f 0015 	mvn.w	r0, #21
}
   10ff0:	4770      	bx	lr

00010ff2 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   10ff2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10ff4:	4604      	mov	r4, r0
   10ff6:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   10ff8:	f7ff ff91 	bl	10f1e <validate_args>

	if (rv < 0) {
   10ffc:	1e06      	subs	r6, r0, #0
   10ffe:	db37      	blt.n	11070 <onoff_request+0x7e>
   11000:	f04f 0320 	mov.w	r3, #32
   11004:	f3ef 8211 	mrs	r2, BASEPRI
   11008:	f383 8812 	msr	BASEPRI_MAX, r3
   1100c:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11010:	8b25      	ldrh	r5, [r4, #24]
   11012:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   11016:	8b63      	ldrh	r3, [r4, #26]
   11018:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1101c:	428b      	cmp	r3, r1
   1101e:	d02f      	beq.n	11080 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   11020:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
   11022:	2d02      	cmp	r5, #2
   11024:	d00c      	beq.n	11040 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   11026:	b18d      	cbz	r5, 1104c <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
   11028:	2d04      	cmp	r5, #4
   1102a:	d00f      	beq.n	1104c <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
   1102c:	2d06      	cmp	r5, #6
   1102e:	d00d      	beq.n	1104c <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
   11030:	2d05      	cmp	r5, #5
   11032:	d01f      	beq.n	11074 <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
   11034:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
   11038:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   1103a:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   1103c:	4608      	mov	r0, r1
   1103e:	e00a      	b.n	11056 <onoff_request+0x64>
		mgr->refs += 1U;
   11040:	3301      	adds	r3, #1
   11042:	8363      	strh	r3, [r4, #26]
		notify = true;
   11044:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
   11046:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
   11048:	4618      	mov	r0, r3
   1104a:	e004      	b.n	11056 <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
   1104c:	fab5 f385 	clz	r3, r5
   11050:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
   11052:	2100      	movs	r1, #0
		add_client = true;
   11054:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
   11056:	b128      	cbz	r0, 11064 <onoff_request+0x72>
	parent->next = child;
   11058:	2000      	movs	r0, #0
   1105a:	6038      	str	r0, [r7, #0]
	return list->tail;
   1105c:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   1105e:	b1a8      	cbz	r0, 1108c <onoff_request+0x9a>
	parent->next = child;
   11060:	6007      	str	r7, [r0, #0]
	list->tail = node;
   11062:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   11064:	b9ab      	cbnz	r3, 11092 <onoff_request+0xa0>
	__asm__ volatile(
   11066:	f382 8811 	msr	BASEPRI, r2
   1106a:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1106e:	b9a9      	cbnz	r1, 1109c <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   11070:	4630      	mov	r0, r6
   11072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
   11074:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
   11078:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   1107a:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   1107c:	4608      	mov	r0, r1
   1107e:	e7ea      	b.n	11056 <onoff_request+0x64>
		rv = -EAGAIN;
   11080:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
   11084:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   11086:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   11088:	4608      	mov	r0, r1
   1108a:	e7e4      	b.n	11056 <onoff_request+0x64>
   1108c:	6067      	str	r7, [r4, #4]
	list->head = node;
   1108e:	6027      	str	r7, [r4, #0]
}
   11090:	e7e8      	b.n	11064 <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
   11092:	2102      	movs	r1, #2
   11094:	4620      	mov	r0, r4
   11096:	f7f0 fd3d 	bl	1b14 <process_event>
   1109a:	e7e9      	b.n	11070 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
   1109c:	2300      	movs	r3, #0
   1109e:	462a      	mov	r2, r5
   110a0:	4639      	mov	r1, r7
   110a2:	4620      	mov	r0, r4
   110a4:	f7ff ff51 	bl	10f4a <notify_one>
   110a8:	e7e2      	b.n	11070 <onoff_request+0x7e>

000110aa <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   110aa:	b510      	push	{r4, lr}
	__asm__ volatile(
   110ac:	f04f 0320 	mov.w	r3, #32
   110b0:	f3ef 8211 	mrs	r2, BASEPRI
   110b4:	f383 8812 	msr	BASEPRI_MAX, r3
   110b8:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   110bc:	8b03      	ldrh	r3, [r0, #24]
   110be:	f003 0307 	and.w	r3, r3, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   110c2:	2b02      	cmp	r3, #2
   110c4:	d007      	beq.n	110d6 <onoff_release+0x2c>
		if (state == ONOFF_STATE_ERROR) {
   110c6:	2b01      	cmp	r3, #1
   110c8:	d002      	beq.n	110d0 <onoff_release+0x26>
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   110ca:	f06f 0485 	mvn.w	r4, #133	; 0x85
	__ASSERT_NO_MSG(mgr->refs > 0);
	mgr->refs -= 1U;
	stop = (mgr->refs == 0);

out:
	if (stop) {
   110ce:	e008      	b.n	110e2 <onoff_release+0x38>
			rv = -EIO;
   110d0:	f06f 0404 	mvn.w	r4, #4
   110d4:	e005      	b.n	110e2 <onoff_release+0x38>
   110d6:	461c      	mov	r4, r3
	mgr->refs -= 1U;
   110d8:	8b43      	ldrh	r3, [r0, #26]
   110da:	3b01      	subs	r3, #1
   110dc:	b29b      	uxth	r3, r3
   110de:	8343      	strh	r3, [r0, #26]
	if (stop) {
   110e0:	b12b      	cbz	r3, 110ee <onoff_release+0x44>
	__asm__ volatile(
   110e2:	f382 8811 	msr	BASEPRI, r2
   110e6:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
}
   110ea:	4620      	mov	r0, r4
   110ec:	bd10      	pop	{r4, pc}
		process_event(mgr, EVT_RECHECK, key);
   110ee:	2102      	movs	r1, #2
   110f0:	f7f0 fd10 	bl	1b14 <process_event>
   110f4:	e7f9      	b.n	110ea <onoff_release+0x40>

000110f6 <onoff_cancel>:
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
	if ((mgr == NULL) || (cli == NULL)) {
   110f6:	2800      	cmp	r0, #0
   110f8:	d031      	beq.n	1115e <onoff_cancel+0x68>
{
   110fa:	b470      	push	{r4, r5, r6}
   110fc:	4605      	mov	r5, r0
	if ((mgr == NULL) || (cli == NULL)) {
   110fe:	2900      	cmp	r1, #0
   11100:	d030      	beq.n	11164 <onoff_cancel+0x6e>
	__asm__ volatile(
   11102:	f04f 0320 	mov.w	r3, #32
   11106:	f3ef 8611 	mrs	r6, BASEPRI
   1110a:	f383 8812 	msr	BASEPRI_MAX, r3
   1110e:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11112:	8b00      	ldrh	r0, [r0, #24]
   11114:	f000 0007 	and.w	r0, r0, #7

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
   11118:	460c      	mov	r4, r1
	return list->head;
   1111a:	682b      	ldr	r3, [r5, #0]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1111c:	2200      	movs	r2, #0
   1111e:	b1b3      	cbz	r3, 1114e <onoff_cancel+0x58>
   11120:	429c      	cmp	r4, r3
   11122:	d002      	beq.n	1112a <onoff_cancel+0x34>
   11124:	461a      	mov	r2, r3
   11126:	681b      	ldr	r3, [r3, #0]
   11128:	e7f9      	b.n	1111e <onoff_cancel+0x28>
Z_GENLIST_REMOVE(slist, snode)
   1112a:	b13a      	cbz	r2, 1113c <onoff_cancel+0x46>
	return node->next;
   1112c:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
   1112e:	6013      	str	r3, [r2, #0]
	return list->tail;
   11130:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   11132:	4299      	cmp	r1, r3
   11134:	d009      	beq.n	1114a <onoff_cancel+0x54>
	parent->next = child;
   11136:	2300      	movs	r3, #0
   11138:	600b      	str	r3, [r1, #0]
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
   1113a:	e00a      	b.n	11152 <onoff_cancel+0x5c>
	return node->next;
   1113c:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   1113e:	602b      	str	r3, [r5, #0]
	return list->tail;
   11140:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   11142:	4291      	cmp	r1, r2
   11144:	d1f7      	bne.n	11136 <onoff_cancel+0x40>
	list->tail = node;
   11146:	606b      	str	r3, [r5, #4]
}
   11148:	e7f5      	b.n	11136 <onoff_cancel+0x40>
	list->tail = node;
   1114a:	606a      	str	r2, [r5, #4]
}
   1114c:	e7f3      	b.n	11136 <onoff_cancel+0x40>
	int rv = -EALREADY;
   1114e:	f06f 0077 	mvn.w	r0, #119	; 0x77
	__asm__ volatile(
   11152:	f386 8811 	msr	BASEPRI, r6
   11156:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
   1115a:	bc70      	pop	{r4, r5, r6}
   1115c:	4770      	bx	lr
		return -EINVAL;
   1115e:	f06f 0015 	mvn.w	r0, #21
}
   11162:	4770      	bx	lr
		return -EINVAL;
   11164:	f06f 0015 	mvn.w	r0, #21
   11168:	e7f7      	b.n	1115a <onoff_cancel+0x64>

0001116a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1116a:	b508      	push	{r3, lr}
   1116c:	4604      	mov	r4, r0
   1116e:	4608      	mov	r0, r1
   11170:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   11172:	461a      	mov	r2, r3
   11174:	47a0      	blx	r4
	return z_impl_z_current_get();
   11176:	f7ff f90d 	bl	10394 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   1117a:	f7f4 fd53 	bl	5c24 <z_impl_k_thread_abort>

0001117e <chunk_mem>:
#include "heap.h"

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1117e:	00c9      	lsls	r1, r1, #3
	return big_heap_chunks(bytes / CHUNK_UNIT);
}

static inline bool big_heap(struct z_heap *h)
{
	return big_heap_chunks(h->end_chunk);
   11180:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   11182:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11186:	d303      	bcc.n	11190 <chunk_mem+0x12>
   11188:	2308      	movs	r3, #8
   1118a:	4419      	add	r1, r3

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
   1118c:	4408      	add	r0, r1
   1118e:	4770      	bx	lr
   11190:	2304      	movs	r3, #4
   11192:	e7fa      	b.n	1118a <chunk_mem+0xc>

00011194 <free_list_remove_bidx>:

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   11194:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
   11196:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   1119a:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   1119c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   111a0:	d317      	bcc.n	111d2 <free_list_remove_bidx+0x3e>
		return ((uint32_t *)cmem)[f];
   111a2:	68eb      	ldr	r3, [r5, #12]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & (1 << bidx));

	if (next_free_chunk(h, c) == c) {
   111a4:	4299      	cmp	r1, r3
   111a6:	d016      	beq.n	111d6 <free_list_remove_bidx+0x42>
	if (big_heap(h)) {
   111a8:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   111ac:	d320      	bcc.n	111f0 <free_list_remove_bidx+0x5c>
		return ((uint32_t *)cmem)[f];
   111ae:	68a9      	ldr	r1, [r5, #8]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
   111b0:	3204      	adds	r2, #4
   111b2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   111b6:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   111ba:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   111be:	d319      	bcc.n	111f4 <free_list_remove_bidx+0x60>
		((uint32_t *)cmem)[f] = val;
   111c0:	60d3      	str	r3, [r2, #12]
	void *cmem = &buf[c];
   111c2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
   111c6:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   111c8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   111cc:	d314      	bcc.n	111f8 <free_list_remove_bidx+0x64>
		((uint32_t *)cmem)[f] = val;
   111ce:	6099      	str	r1, [r3, #8]
   111d0:	e00c      	b.n	111ec <free_list_remove_bidx+0x58>
		return ((uint16_t *)cmem)[f];
   111d2:	88eb      	ldrh	r3, [r5, #6]
   111d4:	e7e6      	b.n	111a4 <free_list_remove_bidx+0x10>
		h->avail_buckets &= ~(1 << bidx);
   111d6:	2301      	movs	r3, #1
   111d8:	fa03 f102 	lsl.w	r1, r3, r2
   111dc:	68c3      	ldr	r3, [r0, #12]
   111de:	ea23 0301 	bic.w	r3, r3, r1
   111e2:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   111e4:	3204      	adds	r2, #4
   111e6:	2300      	movs	r3, #0
   111e8:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
		set_next_free_chunk(h, first, second);
		set_prev_free_chunk(h, second, first);
	}
}
   111ec:	bc30      	pop	{r4, r5}
   111ee:	4770      	bx	lr
   111f0:	88a9      	ldrh	r1, [r5, #4]
   111f2:	e7dd      	b.n	111b0 <free_list_remove_bidx+0x1c>
		((uint16_t *)cmem)[f] = val;
   111f4:	80d3      	strh	r3, [r2, #6]
   111f6:	e7e4      	b.n	111c2 <free_list_remove_bidx+0x2e>
   111f8:	8099      	strh	r1, [r3, #4]
   111fa:	e7f7      	b.n	111ec <free_list_remove_bidx+0x58>

000111fc <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   111fc:	b470      	push	{r4, r5, r6}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   111fe:	1d13      	adds	r3, r2, #4
   11200:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   11204:	b9d3      	cbnz	r3, 1123c <free_list_add_bidx+0x40>
		CHECK((h->avail_buckets & (1 << bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << bidx);
   11206:	2301      	movs	r3, #1
   11208:	fa03 f402 	lsl.w	r4, r3, r2
   1120c:	68c3      	ldr	r3, [r0, #12]
   1120e:	4323      	orrs	r3, r4
   11210:	60c3      	str	r3, [r0, #12]
		b->next = c;
   11212:	3204      	adds	r2, #4
   11214:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   11218:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   1121c:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   1121e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   11222:	d307      	bcc.n	11234 <free_list_add_bidx+0x38>
		((uint32_t *)cmem)[f] = val;
   11224:	6099      	str	r1, [r3, #8]
	return big_heap_chunks(h->end_chunk);
   11226:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   11228:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1122c:	d304      	bcc.n	11238 <free_list_add_bidx+0x3c>
		((uint32_t *)cmem)[f] = val;
   1122e:	60d9      	str	r1, [r3, #12]
		set_prev_free_chunk(h, c, first);
		set_next_free_chunk(h, c, second);
		set_next_free_chunk(h, first, c);
		set_prev_free_chunk(h, second, c);
	}
}
   11230:	bc70      	pop	{r4, r5, r6}
   11232:	4770      	bx	lr
		((uint16_t *)cmem)[f] = val;
   11234:	8099      	strh	r1, [r3, #4]
   11236:	e7f6      	b.n	11226 <free_list_add_bidx+0x2a>
   11238:	80d9      	strh	r1, [r3, #6]
   1123a:	e7f9      	b.n	11230 <free_list_add_bidx+0x34>
	void *cmem = &buf[c];
   1123c:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
   11240:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   11242:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   11246:	d318      	bcc.n	1127a <free_list_add_bidx+0x7e>
		return ((uint32_t *)cmem)[f];
   11248:	68a2      	ldr	r2, [r4, #8]
	void *cmem = &buf[c];
   1124a:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	if (big_heap(h)) {
   1124e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   11252:	d314      	bcc.n	1127e <free_list_add_bidx+0x82>
		((uint32_t *)cmem)[f] = val;
   11254:	60aa      	str	r2, [r5, #8]
	return big_heap_chunks(h->end_chunk);
   11256:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   11258:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1125c:	d311      	bcc.n	11282 <free_list_add_bidx+0x86>
		((uint32_t *)cmem)[f] = val;
   1125e:	60eb      	str	r3, [r5, #12]
	void *cmem = &buf[c];
   11260:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
   11264:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   11266:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1126a:	d30c      	bcc.n	11286 <free_list_add_bidx+0x8a>
		((uint32_t *)cmem)[f] = val;
   1126c:	60d1      	str	r1, [r2, #12]
	return big_heap_chunks(h->end_chunk);
   1126e:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   11270:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11274:	d309      	bcc.n	1128a <free_list_add_bidx+0x8e>
		((uint32_t *)cmem)[f] = val;
   11276:	60a1      	str	r1, [r4, #8]
   11278:	e7da      	b.n	11230 <free_list_add_bidx+0x34>
		return ((uint16_t *)cmem)[f];
   1127a:	88a2      	ldrh	r2, [r4, #4]
   1127c:	e7e5      	b.n	1124a <free_list_add_bidx+0x4e>
		((uint16_t *)cmem)[f] = val;
   1127e:	80aa      	strh	r2, [r5, #4]
   11280:	e7e9      	b.n	11256 <free_list_add_bidx+0x5a>
   11282:	80eb      	strh	r3, [r5, #6]
   11284:	e7ec      	b.n	11260 <free_list_add_bidx+0x64>
   11286:	80d1      	strh	r1, [r2, #6]
   11288:	e7f1      	b.n	1126e <free_list_add_bidx+0x72>
   1128a:	80a1      	strh	r1, [r4, #4]
   1128c:	e7d0      	b.n	11230 <free_list_add_bidx+0x34>

0001128e <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   1128e:	b470      	push	{r4, r5, r6}
	void *cmem = &buf[c];
   11290:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   11294:	6885      	ldr	r5, [r0, #8]
	if (big_heap(h)) {
   11296:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   1129a:	d325      	bcc.n	112e8 <split_chunks+0x5a>
		return ((uint32_t *)cmem)[f];
   1129c:	6866      	ldr	r6, [r4, #4]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
   1129e:	1a53      	subs	r3, r2, r1
	chunksz_t rsz = sz0 - lsz;
   112a0:	1a89      	subs	r1, r1, r2
   112a2:	eb01 0156 	add.w	r1, r1, r6, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   112a6:	005e      	lsls	r6, r3, #1
	if (big_heap(h)) {
   112a8:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   112ac:	d31e      	bcc.n	112ec <split_chunks+0x5e>
		((uint32_t *)cmem)[f] = val;
   112ae:	6066      	str	r6, [r4, #4]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   112b0:	004d      	lsls	r5, r1, #1
	void *cmem = &buf[c];
   112b2:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
   112b6:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   112b8:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   112bc:	d318      	bcc.n	112f0 <split_chunks+0x62>
		((uint32_t *)cmem)[f] = val;
   112be:	6065      	str	r5, [r4, #4]
	return big_heap_chunks(h->end_chunk);
   112c0:	6885      	ldr	r5, [r0, #8]
	if (big_heap(h)) {
   112c2:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   112c6:	d315      	bcc.n	112f4 <split_chunks+0x66>
		((uint32_t *)cmem)[f] = val;
   112c8:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
	return big_heap_chunks(h->end_chunk);
   112cc:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   112ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   112d2:	d312      	bcc.n	112fa <split_chunks+0x6c>
		return ((uint32_t *)cmem)[f];
   112d4:	6864      	ldr	r4, [r4, #4]
	return c + chunk_size(h, c);
   112d6:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
   112da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   112de:	d30e      	bcc.n	112fe <split_chunks+0x70>
		((uint32_t *)cmem)[f] = val;
   112e0:	f840 1032 	str.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
   112e4:	bc70      	pop	{r4, r5, r6}
   112e6:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
   112e8:	8866      	ldrh	r6, [r4, #2]
   112ea:	e7d8      	b.n	1129e <split_chunks+0x10>
		((uint16_t *)cmem)[f] = val;
   112ec:	8066      	strh	r6, [r4, #2]
   112ee:	e7df      	b.n	112b0 <split_chunks+0x22>
   112f0:	8065      	strh	r5, [r4, #2]
   112f2:	e7e5      	b.n	112c0 <split_chunks+0x32>
   112f4:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
   112f8:	e7e8      	b.n	112cc <split_chunks+0x3e>
		return ((uint16_t *)cmem)[f];
   112fa:	8864      	ldrh	r4, [r4, #2]
   112fc:	e7eb      	b.n	112d6 <split_chunks+0x48>
		((uint16_t *)cmem)[f] = val;
   112fe:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]
   11302:	e7ef      	b.n	112e4 <split_chunks+0x56>

00011304 <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   11304:	b470      	push	{r4, r5, r6}
	void *cmem = &buf[c];
   11306:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   1130a:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   1130c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   11310:	d31c      	bcc.n	1134c <merge_chunks+0x48>
		return ((uint32_t *)cmem)[f];
   11312:	684b      	ldr	r3, [r1, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   11314:	085b      	lsrs	r3, r3, #1
	void *cmem = &buf[c];
   11316:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
	if (big_heap(h)) {
   1131a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1131e:	d317      	bcc.n	11350 <merge_chunks+0x4c>
		return ((uint32_t *)cmem)[f];
   11320:	686e      	ldr	r6, [r5, #4]
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   11322:	eb03 0356 	add.w	r3, r3, r6, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   11326:	005e      	lsls	r6, r3, #1
	if (big_heap(h)) {
   11328:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1132c:	d312      	bcc.n	11354 <merge_chunks+0x50>
		((uint32_t *)cmem)[f] = val;
   1132e:	604e      	str	r6, [r1, #4]
	return big_heap_chunks(h->end_chunk);
   11330:	6881      	ldr	r1, [r0, #8]
	if (big_heap(h)) {
   11332:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   11336:	d30f      	bcc.n	11358 <merge_chunks+0x54>
		return ((uint32_t *)cmem)[f];
   11338:	686c      	ldr	r4, [r5, #4]
	return c + chunk_size(h, c);
   1133a:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
   1133e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   11342:	d30b      	bcc.n	1135c <merge_chunks+0x58>
		((uint32_t *)cmem)[f] = val;
   11344:	f840 3032 	str.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   11348:	bc70      	pop	{r4, r5, r6}
   1134a:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
   1134c:	884b      	ldrh	r3, [r1, #2]
   1134e:	e7e1      	b.n	11314 <merge_chunks+0x10>
   11350:	886e      	ldrh	r6, [r5, #2]
   11352:	e7e6      	b.n	11322 <merge_chunks+0x1e>
		((uint16_t *)cmem)[f] = val;
   11354:	804e      	strh	r6, [r1, #2]
   11356:	e7eb      	b.n	11330 <merge_chunks+0x2c>
		return ((uint16_t *)cmem)[f];
   11358:	886c      	ldrh	r4, [r5, #2]
   1135a:	e7ee      	b.n	1133a <merge_chunks+0x36>
		((uint16_t *)cmem)[f] = val;
   1135c:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
   11360:	e7f2      	b.n	11348 <merge_chunks+0x44>

00011362 <mem_to_chunkid>:
	return big_heap_chunks(h->end_chunk);
   11362:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) ? 8 : 4;
   11364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11368:	d304      	bcc.n	11374 <mem_to_chunkid+0x12>
   1136a:	2308      	movs	r3, #8
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1136c:	1ac9      	subs	r1, r1, r3
   1136e:	1a08      	subs	r0, r1, r0
}
   11370:	08c0      	lsrs	r0, r0, #3
   11372:	4770      	bx	lr
   11374:	2304      	movs	r3, #4
   11376:	e7f9      	b.n	1136c <mem_to_chunkid+0xa>

00011378 <free_list_remove>:
{
   11378:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
   1137a:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
   1137c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11380:	d307      	bcc.n	11392 <free_list_remove+0x1a>
	void *cmem = &buf[c];
   11382:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
   11386:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   11388:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
   1138a:	2a01      	cmp	r2, #1
   1138c:	d002      	beq.n	11394 <free_list_remove+0x1c>
   1138e:	2200      	movs	r2, #0
   11390:	e000      	b.n	11394 <free_list_remove+0x1c>
   11392:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
   11394:	b9a2      	cbnz	r2, 113c0 <free_list_remove+0x48>
	void *cmem = &buf[c];
   11396:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   1139a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1139e:	d310      	bcc.n	113c2 <free_list_remove+0x4a>
		return ((uint32_t *)cmem)[f];
   113a0:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   113a2:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
   113a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   113a8:	d30d      	bcc.n	113c6 <free_list_remove+0x4e>
   113aa:	2308      	movs	r3, #8
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   113ac:	3308      	adds	r3, #8
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   113ae:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
   113b2:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
   113b4:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   113b8:	f1c2 021f 	rsb	r2, r2, #31
   113bc:	f7ff feea 	bl	11194 <free_list_remove_bidx>
}
   113c0:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
   113c2:	8852      	ldrh	r2, [r2, #2]
   113c4:	e7ed      	b.n	113a2 <free_list_remove+0x2a>
	return big_heap(h) ? 8 : 4;
   113c6:	2304      	movs	r3, #4
   113c8:	e7f0      	b.n	113ac <free_list_remove+0x34>

000113ca <free_list_add>:
{
   113ca:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
   113cc:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
   113ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   113d2:	d307      	bcc.n	113e4 <free_list_add+0x1a>
	void *cmem = &buf[c];
   113d4:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
   113d8:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   113da:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
   113dc:	2a01      	cmp	r2, #1
   113de:	d002      	beq.n	113e6 <free_list_add+0x1c>
   113e0:	2200      	movs	r2, #0
   113e2:	e000      	b.n	113e6 <free_list_add+0x1c>
   113e4:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
   113e6:	b9a2      	cbnz	r2, 11412 <free_list_add+0x48>
	void *cmem = &buf[c];
   113e8:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   113ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   113f0:	d310      	bcc.n	11414 <free_list_add+0x4a>
		return ((uint32_t *)cmem)[f];
   113f2:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   113f4:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
   113f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   113fa:	d30d      	bcc.n	11418 <free_list_add+0x4e>
   113fc:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   113fe:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   11400:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
   11404:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
   11406:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   1140a:	f1c2 021f 	rsb	r2, r2, #31
   1140e:	f7ff fef5 	bl	111fc <free_list_add_bidx>
}
   11412:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
   11414:	8852      	ldrh	r2, [r2, #2]
   11416:	e7ed      	b.n	113f4 <free_list_add+0x2a>
	return big_heap(h) ? 8 : 4;
   11418:	2304      	movs	r3, #4
   1141a:	e7f0      	b.n	113fe <free_list_add+0x34>

0001141c <free_chunk>:
{
   1141c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1141e:	4604      	mov	r4, r0
   11420:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   11422:	00ce      	lsls	r6, r1, #3
   11424:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   11428:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   1142a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1142e:	d31f      	bcc.n	11470 <free_chunk+0x54>
		return ((uint32_t *)cmem)[f];
   11430:	6879      	ldr	r1, [r7, #4]
	return c + chunk_size(h, c);
   11432:	eb05 0151 	add.w	r1, r5, r1, lsr #1
	void *cmem = &buf[c];
   11436:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
	if (big_heap(h)) {
   1143a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1143e:	d319      	bcc.n	11474 <free_chunk+0x58>
		return ((uint32_t *)cmem)[f];
   11440:	6853      	ldr	r3, [r2, #4]
	if (!chunk_used(h, right_chunk(h, c))) {
   11442:	f013 0f01 	tst.w	r3, #1
   11446:	d017      	beq.n	11478 <free_chunk+0x5c>
	return big_heap_chunks(h->end_chunk);
   11448:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   1144a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1144e:	d324      	bcc.n	1149a <free_chunk+0x7e>
		return ((uint32_t *)cmem)[f];
   11450:	59a1      	ldr	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   11452:	1a69      	subs	r1, r5, r1
	void *cmem = &buf[c];
   11454:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
	if (big_heap(h)) {
   11458:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1145c:	d31f      	bcc.n	1149e <free_chunk+0x82>
		return ((uint32_t *)cmem)[f];
   1145e:	6853      	ldr	r3, [r2, #4]
	if (!chunk_used(h, left_chunk(h, c))) {
   11460:	f013 0f01 	tst.w	r3, #1
   11464:	d01d      	beq.n	114a2 <free_chunk+0x86>
	free_list_add(h, c);
   11466:	4629      	mov	r1, r5
   11468:	4620      	mov	r0, r4
   1146a:	f7ff ffae 	bl	113ca <free_list_add>
}
   1146e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ((uint16_t *)cmem)[f];
   11470:	8879      	ldrh	r1, [r7, #2]
   11472:	e7de      	b.n	11432 <free_chunk+0x16>
   11474:	8853      	ldrh	r3, [r2, #2]
   11476:	e7e4      	b.n	11442 <free_chunk+0x26>
		free_list_remove(h, right_chunk(h, c));
   11478:	4620      	mov	r0, r4
   1147a:	f7ff ff7d 	bl	11378 <free_list_remove>
	return big_heap_chunks(h->end_chunk);
   1147e:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   11480:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11484:	d307      	bcc.n	11496 <free_chunk+0x7a>
		return ((uint32_t *)cmem)[f];
   11486:	687a      	ldr	r2, [r7, #4]
		merge_chunks(h, c, right_chunk(h, c));
   11488:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   1148c:	4629      	mov	r1, r5
   1148e:	4620      	mov	r0, r4
   11490:	f7ff ff38 	bl	11304 <merge_chunks>
   11494:	e7d8      	b.n	11448 <free_chunk+0x2c>
		return ((uint16_t *)cmem)[f];
   11496:	887a      	ldrh	r2, [r7, #2]
   11498:	e7f6      	b.n	11488 <free_chunk+0x6c>
   1149a:	5ba1      	ldrh	r1, [r4, r6]
   1149c:	e7d9      	b.n	11452 <free_chunk+0x36>
   1149e:	8853      	ldrh	r3, [r2, #2]
   114a0:	e7de      	b.n	11460 <free_chunk+0x44>
		free_list_remove(h, left_chunk(h, c));
   114a2:	4620      	mov	r0, r4
   114a4:	f7ff ff68 	bl	11378 <free_list_remove>
	return big_heap_chunks(h->end_chunk);
   114a8:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   114aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   114ae:	d30c      	bcc.n	114ca <free_chunk+0xae>
		return ((uint32_t *)cmem)[f];
   114b0:	59a1      	ldr	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   114b2:	462a      	mov	r2, r5
   114b4:	1a69      	subs	r1, r5, r1
   114b6:	4620      	mov	r0, r4
   114b8:	f7ff ff24 	bl	11304 <merge_chunks>
	return big_heap_chunks(h->end_chunk);
   114bc:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   114be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   114c2:	d304      	bcc.n	114ce <free_chunk+0xb2>
		return ((uint32_t *)cmem)[f];
   114c4:	59a3      	ldr	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   114c6:	1aed      	subs	r5, r5, r3
   114c8:	e7cd      	b.n	11466 <free_chunk+0x4a>
		return ((uint16_t *)cmem)[f];
   114ca:	5ba1      	ldrh	r1, [r4, r6]
   114cc:	e7f1      	b.n	114b2 <free_chunk+0x96>
   114ce:	5ba3      	ldrh	r3, [r4, r6]
   114d0:	e7f9      	b.n	114c6 <free_chunk+0xaa>

000114d2 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   114d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return big_heap_chunks(h->end_chunk);
   114d4:	6885      	ldr	r5, [r0, #8]
	return big_heap(h) ? 8 : 4;
   114d6:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   114da:	d311      	bcc.n	11500 <alloc_chunk+0x2e>
   114dc:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   114de:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   114e0:	eba1 03d3 	sub.w	r3, r1, r3, lsr #3
   114e4:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
   114e6:	fab3 f383 	clz	r3, r3
   114ea:	f1c3 021f 	rsb	r2, r3, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   114ee:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   114f2:	f850 c024 	ldr.w	ip, [r0, r4, lsl #2]
   114f6:	f1bc 0f00 	cmp.w	ip, #0
   114fa:	d024      	beq.n	11546 <alloc_chunk+0x74>
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   114fc:	2603      	movs	r6, #3
   114fe:	e010      	b.n	11522 <alloc_chunk+0x50>
	return big_heap(h) ? 8 : 4;
   11500:	2304      	movs	r3, #4
   11502:	e7ec      	b.n	114de <alloc_chunk+0xc>
		return ((uint16_t *)cmem)[f];
   11504:	f8b7 e002 	ldrh.w	lr, [r7, #2]
   11508:	e015      	b.n	11536 <alloc_chunk+0x64>
		do {
			chunkid_t c = b->next;
			if (chunk_size(h, c) >= sz) {
				free_list_remove_bidx(h, c, bi);
   1150a:	4621      	mov	r1, r4
   1150c:	f7ff fe42 	bl	11194 <free_list_remove_bidx>
				return c;
   11510:	e021      	b.n	11556 <alloc_chunk+0x84>
   11512:	88fc      	ldrh	r4, [r7, #6]
			}
			b->next = next_free_chunk(h, c);
   11514:	1d17      	adds	r7, r2, #4
   11516:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
   1151a:	3e01      	subs	r6, #1
   1151c:	d013      	beq.n	11546 <alloc_chunk+0x74>
   1151e:	45a4      	cmp	ip, r4
   11520:	d011      	beq.n	11546 <alloc_chunk+0x74>
			chunkid_t c = b->next;
   11522:	1d14      	adds	r4, r2, #4
   11524:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   11528:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
	if (big_heap(h)) {
   1152c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   11530:	d3e8      	bcc.n	11504 <alloc_chunk+0x32>
		return ((uint32_t *)cmem)[f];
   11532:	f8d7 e004 	ldr.w	lr, [r7, #4]
			if (chunk_size(h, c) >= sz) {
   11536:	ebb1 0f5e 	cmp.w	r1, lr, lsr #1
   1153a:	d9e6      	bls.n	1150a <alloc_chunk+0x38>
	if (big_heap(h)) {
   1153c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   11540:	d3e7      	bcc.n	11512 <alloc_chunk+0x40>
		return ((uint32_t *)cmem)[f];
   11542:	68fc      	ldr	r4, [r7, #12]
   11544:	e7e6      	b.n	11514 <alloc_chunk+0x42>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   11546:	68c4      	ldr	r4, [r0, #12]
   11548:	f1c3 0220 	rsb	r2, r3, #32
   1154c:	2301      	movs	r3, #1
   1154e:	4093      	lsls	r3, r2
   11550:	425b      	negs	r3, r3

	if (bmask != 0U) {
   11552:	401c      	ands	r4, r3
   11554:	d101      	bne.n	1155a <alloc_chunk+0x88>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   11556:	4620      	mov	r0, r4
   11558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		int minbucket = __builtin_ctz(bmask);
   1155a:	fa94 f2a4 	rbit	r2, r4
   1155e:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   11562:	1d13      	adds	r3, r2, #4
   11564:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   11568:	4621      	mov	r1, r4
   1156a:	f7ff fe13 	bl	11194 <free_list_remove_bidx>
		return c;
   1156e:	e7f2      	b.n	11556 <alloc_chunk+0x84>

00011570 <sys_heap_free>:
	if (mem == NULL) {
   11570:	b1c1      	cbz	r1, 115a4 <sys_heap_free+0x34>
{
   11572:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
   11574:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   11576:	4620      	mov	r0, r4
   11578:	f7ff fef3 	bl	11362 <mem_to_chunkid>
   1157c:	4601      	mov	r1, r0
	void *cmem = &buf[c];
   1157e:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
	return big_heap_chunks(h->end_chunk);
   11582:	68a2      	ldr	r2, [r4, #8]
	if (big_heap(h)) {
   11584:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   11588:	d307      	bcc.n	1159a <sys_heap_free+0x2a>
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1158a:	685a      	ldr	r2, [r3, #4]
   1158c:	f022 0201 	bic.w	r2, r2, #1
   11590:	605a      	str	r2, [r3, #4]
	free_chunk(h, c);
   11592:	4620      	mov	r0, r4
   11594:	f7ff ff42 	bl	1141c <free_chunk>
}
   11598:	bd10      	pop	{r4, pc}
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1159a:	885a      	ldrh	r2, [r3, #2]
   1159c:	f022 0201 	bic.w	r2, r2, #1
   115a0:	805a      	strh	r2, [r3, #2]
   115a2:	e7f6      	b.n	11592 <sys_heap_free+0x22>
   115a4:	4770      	bx	lr

000115a6 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   115a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   115a8:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   115aa:	2900      	cmp	r1, #0
   115ac:	d03c      	beq.n	11628 <sys_heap_alloc+0x82>
   115ae:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   115b0:	68aa      	ldr	r2, [r5, #8]
   115b2:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   115b6:	d939      	bls.n	1162c <sys_heap_alloc+0x86>
	return big_heap(h) ? 8 : 4;
   115b8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   115bc:	d320      	bcc.n	11600 <sys_heap_alloc+0x5a>
   115be:	2408      	movs	r4, #8
	return chunksz(chunk_header_bytes(h) + bytes);
   115c0:	441c      	add	r4, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   115c2:	3407      	adds	r4, #7
   115c4:	08e4      	lsrs	r4, r4, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
   115c6:	4621      	mov	r1, r4
   115c8:	4628      	mov	r0, r5
   115ca:	f7ff ff82 	bl	114d2 <alloc_chunk>
	if (c == 0U) {
   115ce:	4607      	mov	r7, r0
   115d0:	b370      	cbz	r0, 11630 <sys_heap_alloc+0x8a>
	void *cmem = &buf[c];
   115d2:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	return big_heap_chunks(h->end_chunk);
   115d6:	68ab      	ldr	r3, [r5, #8]
	if (big_heap(h)) {
   115d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   115dc:	d312      	bcc.n	11604 <sys_heap_alloc+0x5e>
		return ((uint32_t *)cmem)[f];
   115de:	6873      	ldr	r3, [r6, #4]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
   115e0:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   115e4:	d310      	bcc.n	11608 <sys_heap_alloc+0x62>
	return big_heap_chunks(h->end_chunk);
   115e6:	68ab      	ldr	r3, [r5, #8]
	if (big_heap(h)) {
   115e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   115ec:	d317      	bcc.n	1161e <sys_heap_alloc+0x78>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   115ee:	6873      	ldr	r3, [r6, #4]
   115f0:	f043 0301 	orr.w	r3, r3, #1
   115f4:	6073      	str	r3, [r6, #4]
		split_chunks(h, c, c + chunk_sz);
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
   115f6:	4639      	mov	r1, r7
   115f8:	4628      	mov	r0, r5
   115fa:	f7ff fdc0 	bl	1117e <chunk_mem>
}
   115fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return big_heap(h) ? 8 : 4;
   11600:	2404      	movs	r4, #4
   11602:	e7dd      	b.n	115c0 <sys_heap_alloc+0x1a>
		return ((uint16_t *)cmem)[f];
   11604:	8873      	ldrh	r3, [r6, #2]
   11606:	e7eb      	b.n	115e0 <sys_heap_alloc+0x3a>
		split_chunks(h, c, c + chunk_sz);
   11608:	443c      	add	r4, r7
   1160a:	4622      	mov	r2, r4
   1160c:	4639      	mov	r1, r7
   1160e:	4628      	mov	r0, r5
   11610:	f7ff fe3d 	bl	1128e <split_chunks>
		free_list_add(h, c + chunk_sz);
   11614:	4621      	mov	r1, r4
   11616:	4628      	mov	r0, r5
   11618:	f7ff fed7 	bl	113ca <free_list_add>
   1161c:	e7e3      	b.n	115e6 <sys_heap_alloc+0x40>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1161e:	8873      	ldrh	r3, [r6, #2]
   11620:	f043 0301 	orr.w	r3, r3, #1
   11624:	8073      	strh	r3, [r6, #2]
   11626:	e7e6      	b.n	115f6 <sys_heap_alloc+0x50>
		return NULL;
   11628:	2000      	movs	r0, #0
   1162a:	e7e8      	b.n	115fe <sys_heap_alloc+0x58>
   1162c:	2000      	movs	r0, #0
   1162e:	e7e6      	b.n	115fe <sys_heap_alloc+0x58>
		return NULL;
   11630:	2000      	movs	r0, #0
   11632:	e7e4      	b.n	115fe <sys_heap_alloc+0x58>

00011634 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   11634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11638:	460d      	mov	r5, r1
   1163a:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   1163c:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   1163e:	424b      	negs	r3, r1
   11640:	ea03 0801 	and.w	r8, r3, r1
	if (align != rew) {
   11644:	ea31 0303 	bics.w	r3, r1, r3
   11648:	d04e      	beq.n	116e8 <sys_heap_aligned_alloc+0xb4>
		align -= rew;
   1164a:	eba1 0508 	sub.w	r5, r1, r8
	return big_heap_chunks(h->end_chunk);
   1164e:	68b3      	ldr	r3, [r6, #8]
	return big_heap(h) ? 8 : 4;
   11650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11654:	d346      	bcc.n	116e4 <sys_heap_aligned_alloc+0xb0>
   11656:	2308      	movs	r3, #8
		gap = MIN(rew, chunk_header_bytes(h));
   11658:	4598      	cmp	r8, r3
   1165a:	d200      	bcs.n	1165e <sys_heap_aligned_alloc+0x2a>
   1165c:	4643      	mov	r3, r8
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   1165e:	2c00      	cmp	r4, #0
   11660:	d070      	beq.n	11744 <sys_heap_aligned_alloc+0x110>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   11662:	68b2      	ldr	r2, [r6, #8]
   11664:	ebb2 0fd4 	cmp.w	r2, r4, lsr #3
   11668:	d96e      	bls.n	11748 <sys_heap_aligned_alloc+0x114>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   1166a:	1929      	adds	r1, r5, r4
   1166c:	1ac9      	subs	r1, r1, r3
	return big_heap(h) ? 8 : 4;
   1166e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   11672:	d34a      	bcc.n	1170a <sys_heap_aligned_alloc+0xd6>
   11674:	2308      	movs	r3, #8
	return chunksz(chunk_header_bytes(h) + bytes);
   11676:	4419      	add	r1, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   11678:	3107      	adds	r1, #7
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   1167a:	08c9      	lsrs	r1, r1, #3
   1167c:	4630      	mov	r0, r6
   1167e:	f7ff ff28 	bl	114d2 <alloc_chunk>

	if (c0 == 0) {
   11682:	4607      	mov	r7, r0
   11684:	2800      	cmp	r0, #0
   11686:	d061      	beq.n	1174c <sys_heap_aligned_alloc+0x118>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   11688:	4601      	mov	r1, r0
   1168a:	4630      	mov	r0, r6
   1168c:	f7ff fd77 	bl	1117e <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   11690:	4440      	add	r0, r8
   11692:	4428      	add	r0, r5
   11694:	3801      	subs	r0, #1
   11696:	426d      	negs	r5, r5
   11698:	4005      	ands	r5, r0
   1169a:	eba5 0508 	sub.w	r5, r5, r8
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   1169e:	442c      	add	r4, r5
   116a0:	3407      	adds	r4, #7
   116a2:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   116a6:	4629      	mov	r1, r5
   116a8:	4630      	mov	r0, r6
   116aa:	f7ff fe5a 	bl	11362 <mem_to_chunkid>
   116ae:	4680      	mov	r8, r0
	chunkid_t c_end = end - chunk_buf(h);
   116b0:	1ba4      	subs	r4, r4, r6
   116b2:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   116b4:	4287      	cmp	r7, r0
   116b6:	d32a      	bcc.n	1170e <sys_heap_aligned_alloc+0xda>
	void *cmem = &buf[c];
   116b8:	eb06 07c8 	add.w	r7, r6, r8, lsl #3
	return big_heap_chunks(h->end_chunk);
   116bc:	68b3      	ldr	r3, [r6, #8]
	if (big_heap(h)) {
   116be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   116c2:	d32e      	bcc.n	11722 <sys_heap_aligned_alloc+0xee>
		return ((uint32_t *)cmem)[f];
   116c4:	687b      	ldr	r3, [r7, #4]
	return c + chunk_size(h, c);
   116c6:	eb08 0353 	add.w	r3, r8, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   116ca:	429c      	cmp	r4, r3
   116cc:	d32b      	bcc.n	11726 <sys_heap_aligned_alloc+0xf2>
	return big_heap_chunks(h->end_chunk);
   116ce:	68b3      	ldr	r3, [r6, #8]
	if (big_heap(h)) {
   116d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   116d4:	d331      	bcc.n	1173a <sys_heap_aligned_alloc+0x106>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   116d6:	687b      	ldr	r3, [r7, #4]
   116d8:	f043 0301 	orr.w	r3, r3, #1
   116dc:	607b      	str	r3, [r7, #4]
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   116de:	4628      	mov	r0, r5
   116e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return big_heap(h) ? 8 : 4;
   116e4:	2304      	movs	r3, #4
   116e6:	e7b7      	b.n	11658 <sys_heap_aligned_alloc+0x24>
	return big_heap_chunks(h->end_chunk);
   116e8:	68b3      	ldr	r3, [r6, #8]
	return big_heap(h) ? 8 : 4;
   116ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   116ee:	d305      	bcc.n	116fc <sys_heap_aligned_alloc+0xc8>
   116f0:	2308      	movs	r3, #8
		if (align <= chunk_header_bytes(h)) {
   116f2:	429d      	cmp	r5, r3
   116f4:	d904      	bls.n	11700 <sys_heap_aligned_alloc+0xcc>
		rew = 0;
   116f6:	f04f 0800 	mov.w	r8, #0
   116fa:	e7b0      	b.n	1165e <sys_heap_aligned_alloc+0x2a>
   116fc:	2304      	movs	r3, #4
   116fe:	e7f8      	b.n	116f2 <sys_heap_aligned_alloc+0xbe>
			return sys_heap_alloc(heap, bytes);
   11700:	4621      	mov	r1, r4
   11702:	f7ff ff50 	bl	115a6 <sys_heap_alloc>
   11706:	4605      	mov	r5, r0
   11708:	e7e9      	b.n	116de <sys_heap_aligned_alloc+0xaa>
   1170a:	2304      	movs	r3, #4
   1170c:	e7b3      	b.n	11676 <sys_heap_aligned_alloc+0x42>
		split_chunks(h, c0, c);
   1170e:	4602      	mov	r2, r0
   11710:	4639      	mov	r1, r7
   11712:	4630      	mov	r0, r6
   11714:	f7ff fdbb 	bl	1128e <split_chunks>
		free_list_add(h, c0);
   11718:	4639      	mov	r1, r7
   1171a:	4630      	mov	r0, r6
   1171c:	f7ff fe55 	bl	113ca <free_list_add>
   11720:	e7ca      	b.n	116b8 <sys_heap_aligned_alloc+0x84>
		return ((uint16_t *)cmem)[f];
   11722:	887b      	ldrh	r3, [r7, #2]
   11724:	e7cf      	b.n	116c6 <sys_heap_aligned_alloc+0x92>
		split_chunks(h, c, c_end);
   11726:	4622      	mov	r2, r4
   11728:	4641      	mov	r1, r8
   1172a:	4630      	mov	r0, r6
   1172c:	f7ff fdaf 	bl	1128e <split_chunks>
		free_list_add(h, c_end);
   11730:	4621      	mov	r1, r4
   11732:	4630      	mov	r0, r6
   11734:	f7ff fe49 	bl	113ca <free_list_add>
   11738:	e7c9      	b.n	116ce <sys_heap_aligned_alloc+0x9a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1173a:	887b      	ldrh	r3, [r7, #2]
   1173c:	f043 0301 	orr.w	r3, r3, #1
   11740:	807b      	strh	r3, [r7, #2]
   11742:	e7cc      	b.n	116de <sys_heap_aligned_alloc+0xaa>
		return NULL;
   11744:	2500      	movs	r5, #0
   11746:	e7ca      	b.n	116de <sys_heap_aligned_alloc+0xaa>
   11748:	2500      	movs	r5, #0
   1174a:	e7c8      	b.n	116de <sys_heap_aligned_alloc+0xaa>
		return NULL;
   1174c:	2500      	movs	r5, #0
   1174e:	e7c6      	b.n	116de <sys_heap_aligned_alloc+0xaa>

00011750 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   11750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11752:	4603      	mov	r3, r0
	return big_heap_bytes(size) ? 8 : 4;
   11754:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
   11758:	d32a      	bcc.n	117b0 <sys_heap_init+0x60>
   1175a:	2508      	movs	r5, #8
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1175c:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1175e:	1dc8      	adds	r0, r1, #7
   11760:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   11764:	440d      	add	r5, r1
   11766:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   1176a:	1a2d      	subs	r5, r5, r0
   1176c:	08ef      	lsrs	r7, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
   1176e:	4606      	mov	r6, r0
	heap->heap = h;
   11770:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   11772:	6087      	str	r7, [r0, #8]
	h->avail_buckets = 0;
   11774:	2300      	movs	r3, #0
   11776:	60c3      	str	r3, [r0, #12]
	return big_heap(h) ? 8 : 4;
   11778:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   1177c:	d31a      	bcc.n	117b4 <sys_heap_init+0x64>
   1177e:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   11780:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   11782:	eba7 03d3 	sub.w	r3, r7, r3, lsr #3
   11786:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
   11788:	fab3 f383 	clz	r3, r3

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   1178c:	f1c3 0c20 	rsb	ip, r3, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   11790:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
   11794:	009b      	lsls	r3, r3, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   11796:	f103 0e07 	add.w	lr, r3, #7
   1179a:	ea4f 01de 	mov.w	r1, lr, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1179e:	2300      	movs	r3, #0
   117a0:	4563      	cmp	r3, ip
   117a2:	da09      	bge.n	117b8 <sys_heap_init+0x68>
		h->buckets[i].next = 0;
   117a4:	1d1a      	adds	r2, r3, #4
   117a6:	2400      	movs	r4, #0
   117a8:	f846 4022 	str.w	r4, [r6, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   117ac:	3301      	adds	r3, #1
   117ae:	e7f7      	b.n	117a0 <sys_heap_init+0x50>
	return big_heap_bytes(size) ? 8 : 4;
   117b0:	2504      	movs	r5, #4
   117b2:	e7d3      	b.n	1175c <sys_heap_init+0xc>
	return big_heap(h) ? 8 : 4;
   117b4:	2304      	movs	r3, #4
   117b6:	e7e3      	b.n	11780 <sys_heap_init+0x30>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   117b8:	004b      	lsls	r3, r1, #1
	if (big_heap(h)) {
   117ba:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   117be:	d333      	bcc.n	11828 <sys_heap_init+0xd8>
		((uint32_t *)cmem)[f] = val;
   117c0:	6043      	str	r3, [r0, #4]
	if (big_heap(h)) {
   117c2:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   117c6:	d331      	bcc.n	1182c <sys_heap_init+0xdc>
		((uint32_t *)cmem)[f] = val;
   117c8:	2300      	movs	r3, #0
   117ca:	6003      	str	r3, [r0, #0]
	if (big_heap(h)) {
   117cc:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   117d0:	d32f      	bcc.n	11832 <sys_heap_init+0xe2>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   117d2:	6843      	ldr	r3, [r0, #4]
   117d4:	f043 0301 	orr.w	r3, r3, #1
   117d8:	6043      	str	r3, [r0, #4]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   117da:	1a7a      	subs	r2, r7, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   117dc:	0056      	lsls	r6, r2, #1
	void *cmem = &buf[c];
   117de:	f02e 0307 	bic.w	r3, lr, #7
   117e2:	18c4      	adds	r4, r0, r3
	if (big_heap(h)) {
   117e4:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   117e8:	d328      	bcc.n	1183c <sys_heap_init+0xec>
		((uint32_t *)cmem)[f] = val;
   117ea:	6066      	str	r6, [r4, #4]
	return big_heap_chunks(h->end_chunk);
   117ec:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   117ee:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   117f2:	d325      	bcc.n	11840 <sys_heap_init+0xf0>
		((uint32_t *)cmem)[f] = val;
   117f4:	50c1      	str	r1, [r0, r3]
	void *cmem = &buf[c];
   117f6:	f025 0307 	bic.w	r3, r5, #7
   117fa:	4405      	add	r5, r0
	return big_heap_chunks(h->end_chunk);
   117fc:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   117fe:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   11802:	d31f      	bcc.n	11844 <sys_heap_init+0xf4>
		((uint32_t *)cmem)[f] = val;
   11804:	2400      	movs	r4, #0
   11806:	606c      	str	r4, [r5, #4]
	return big_heap_chunks(h->end_chunk);
   11808:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   1180a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   1180e:	d31c      	bcc.n	1184a <sys_heap_init+0xfa>
		((uint32_t *)cmem)[f] = val;
   11810:	50c2      	str	r2, [r0, r3]
	return big_heap_chunks(h->end_chunk);
   11812:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   11814:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11818:	d319      	bcc.n	1184e <sys_heap_init+0xfe>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1181a:	686b      	ldr	r3, [r5, #4]
   1181c:	f043 0301 	orr.w	r3, r3, #1
   11820:	606b      	str	r3, [r5, #4]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   11822:	f7ff fdd2 	bl	113ca <free_list_add>
}
   11826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		((uint16_t *)cmem)[f] = val;
   11828:	8043      	strh	r3, [r0, #2]
   1182a:	e7ca      	b.n	117c2 <sys_heap_init+0x72>
   1182c:	2300      	movs	r3, #0
   1182e:	8003      	strh	r3, [r0, #0]
   11830:	e7cc      	b.n	117cc <sys_heap_init+0x7c>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   11832:	8843      	ldrh	r3, [r0, #2]
   11834:	f043 0301 	orr.w	r3, r3, #1
   11838:	8043      	strh	r3, [r0, #2]
   1183a:	e7ce      	b.n	117da <sys_heap_init+0x8a>
		((uint16_t *)cmem)[f] = val;
   1183c:	8066      	strh	r6, [r4, #2]
   1183e:	e7d5      	b.n	117ec <sys_heap_init+0x9c>
   11840:	52c1      	strh	r1, [r0, r3]
   11842:	e7d8      	b.n	117f6 <sys_heap_init+0xa6>
   11844:	2400      	movs	r4, #0
   11846:	806c      	strh	r4, [r5, #2]
   11848:	e7de      	b.n	11808 <sys_heap_init+0xb8>
   1184a:	52c2      	strh	r2, [r0, r3]
   1184c:	e7e1      	b.n	11812 <sys_heap_init+0xc2>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1184e:	886b      	ldrh	r3, [r5, #2]
   11850:	f043 0301 	orr.w	r3, r3, #1
   11854:	806b      	strh	r3, [r5, #2]
   11856:	e7e4      	b.n	11822 <sys_heap_init+0xd2>

00011858 <extract_decimal>:
{
   11858:	b410      	push	{r4}
   1185a:	4604      	mov	r4, r0
	const char *sp = *str;
   1185c:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   1185e:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   11860:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   11862:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   11866:	2909      	cmp	r1, #9
   11868:	d806      	bhi.n	11878 <extract_decimal+0x20>
		val = 10U * val + *sp++ - '0';
   1186a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1186e:	3201      	adds	r2, #1
   11870:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   11874:	3830      	subs	r0, #48	; 0x30
   11876:	e7f3      	b.n	11860 <extract_decimal+0x8>
	*str = sp;
   11878:	6022      	str	r2, [r4, #0]
}
   1187a:	bc10      	pop	{r4}
   1187c:	4770      	bx	lr

0001187e <encode_uint>:
{
   1187e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11882:	b083      	sub	sp, #12
   11884:	4604      	mov	r4, r0
   11886:	460d      	mov	r5, r1
   11888:	9201      	str	r2, [sp, #4]
   1188a:	469a      	mov	sl, r3
   1188c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
   11890:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   11892:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   11896:	2b6f      	cmp	r3, #111	; 0x6f
   11898:	d00f      	beq.n	118ba <encode_uint+0x3c>
   1189a:	d906      	bls.n	118aa <encode_uint+0x2c>
   1189c:	2b70      	cmp	r3, #112	; 0x70
   1189e:	d00f      	beq.n	118c0 <encode_uint+0x42>
   118a0:	2b78      	cmp	r3, #120	; 0x78
   118a2:	d110      	bne.n	118c6 <encode_uint+0x48>
		return 16;
   118a4:	f04f 0910 	mov.w	r9, #16
   118a8:	e026      	b.n	118f8 <encode_uint+0x7a>
	switch (specifier) {
   118aa:	2b58      	cmp	r3, #88	; 0x58
   118ac:	d002      	beq.n	118b4 <encode_uint+0x36>
   118ae:	f04f 090a 	mov.w	r9, #10
   118b2:	e021      	b.n	118f8 <encode_uint+0x7a>
		return 16;
   118b4:	f04f 0910 	mov.w	r9, #16
   118b8:	e01e      	b.n	118f8 <encode_uint+0x7a>
		return 8;
   118ba:	f04f 0908 	mov.w	r9, #8
   118be:	e01b      	b.n	118f8 <encode_uint+0x7a>
		return 16;
   118c0:	f04f 0910 	mov.w	r9, #16
   118c4:	e018      	b.n	118f8 <encode_uint+0x7a>
	switch (specifier) {
   118c6:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
   118ca:	e015      	b.n	118f8 <encode_uint+0x7a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   118cc:	f1bb 0f19 	cmp.w	fp, #25
   118d0:	d820      	bhi.n	11914 <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   118d2:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   118d4:	3237      	adds	r2, #55	; 0x37
   118d6:	b2d2      	uxtb	r2, r2
   118d8:	f808 2d01 	strb.w	r2, [r8, #-1]!
		value /= radix;
   118dc:	4632      	mov	r2, r6
   118de:	463b      	mov	r3, r7
   118e0:	4620      	mov	r0, r4
   118e2:	4629      	mov	r1, r5
   118e4:	f7ef fa28 	bl	d38 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   118e8:	42bd      	cmp	r5, r7
   118ea:	bf08      	it	eq
   118ec:	42b4      	cmpeq	r4, r6
   118ee:	d315      	bcc.n	1191c <encode_uint+0x9e>
   118f0:	45d0      	cmp	r8, sl
   118f2:	d913      	bls.n	1191c <encode_uint+0x9e>
		value /= radix;
   118f4:	4604      	mov	r4, r0
   118f6:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
   118f8:	464e      	mov	r6, r9
   118fa:	2700      	movs	r7, #0
   118fc:	464a      	mov	r2, r9
   118fe:	463b      	mov	r3, r7
   11900:	4620      	mov	r0, r4
   11902:	4629      	mov	r1, r5
   11904:	f7ef fa18 	bl	d38 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   11908:	2a09      	cmp	r2, #9
   1190a:	d8df      	bhi.n	118cc <encode_uint+0x4e>
   1190c:	b2d2      	uxtb	r2, r2
   1190e:	3230      	adds	r2, #48	; 0x30
   11910:	b2d2      	uxtb	r2, r2
   11912:	e7e1      	b.n	118d8 <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   11914:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   11916:	3257      	adds	r2, #87	; 0x57
   11918:	b2d2      	uxtb	r2, r2
   1191a:	e7dd      	b.n	118d8 <encode_uint+0x5a>
	if (conv->flag_hash) {
   1191c:	9b01      	ldr	r3, [sp, #4]
   1191e:	781b      	ldrb	r3, [r3, #0]
   11920:	f013 0f20 	tst.w	r3, #32
   11924:	d005      	beq.n	11932 <encode_uint+0xb4>
		if (radix == 8) {
   11926:	f1b9 0f08 	cmp.w	r9, #8
   1192a:	d006      	beq.n	1193a <encode_uint+0xbc>
		} else if (radix == 16) {
   1192c:	f1b9 0f10 	cmp.w	r9, #16
   11930:	d009      	beq.n	11946 <encode_uint+0xc8>
}
   11932:	4640      	mov	r0, r8
   11934:	b003      	add	sp, #12
   11936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   1193a:	9a01      	ldr	r2, [sp, #4]
   1193c:	7893      	ldrb	r3, [r2, #2]
   1193e:	f043 0308 	orr.w	r3, r3, #8
   11942:	7093      	strb	r3, [r2, #2]
   11944:	e7f5      	b.n	11932 <encode_uint+0xb4>
			conv->altform_0c = true;
   11946:	9a01      	ldr	r2, [sp, #4]
   11948:	7893      	ldrb	r3, [r2, #2]
   1194a:	f043 0310 	orr.w	r3, r3, #16
   1194e:	7093      	strb	r3, [r2, #2]
   11950:	e7ef      	b.n	11932 <encode_uint+0xb4>

00011952 <outs>:
{
   11952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11956:	4607      	mov	r7, r0
   11958:	460e      	mov	r6, r1
   1195a:	4614      	mov	r4, r2
   1195c:	4698      	mov	r8, r3
	size_t count = 0;
   1195e:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   11960:	e006      	b.n	11970 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   11962:	4631      	mov	r1, r6
   11964:	f814 0b01 	ldrb.w	r0, [r4], #1
   11968:	47b8      	blx	r7
		if (rc < 0) {
   1196a:	2800      	cmp	r0, #0
   1196c:	db09      	blt.n	11982 <outs+0x30>
		++count;
   1196e:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   11970:	4544      	cmp	r4, r8
   11972:	d3f6      	bcc.n	11962 <outs+0x10>
   11974:	f1b8 0f00 	cmp.w	r8, #0
   11978:	d102      	bne.n	11980 <outs+0x2e>
   1197a:	7823      	ldrb	r3, [r4, #0]
   1197c:	2b00      	cmp	r3, #0
   1197e:	d1f0      	bne.n	11962 <outs+0x10>
	return (int)count;
   11980:	4628      	mov	r0, r5
}
   11982:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011986 <get_rewind_value>:
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
}

static uint32_t get_rewind_value(uint32_t buf_size, uint32_t threshold)
{
	return buf_size * (threshold / buf_size);
   11986:	fbb1 f1f0 	udiv	r1, r1, r0
}
   1198a:	fb00 f001 	mul.w	r0, r0, r1
   1198e:	4770      	bx	lr

00011990 <mod>:
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   11990:	6983      	ldr	r3, [r0, #24]
   11992:	b113      	cbz	r3, 1199a <mod+0xa>
   11994:	ea03 0001 	and.w	r0, r3, r1
   11998:	4770      	bx	lr
   1199a:	6900      	ldr	r0, [r0, #16]
   1199c:	fbb1 f3f0 	udiv	r3, r1, r0
   119a0:	fb00 1013 	mls	r0, r0, r3, r1
}
   119a4:	4770      	bx	lr

000119a6 <ring_buf_get_rewind_threshold>:
}
   119a6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   119aa:	4770      	bx	lr

000119ac <ring_buf_is_empty>:

int ring_buf_is_empty(struct ring_buf *buf)
{
   119ac:	b570      	push	{r4, r5, r6, lr}
	uint32_t tail = buf->tail;
   119ae:	6844      	ldr	r4, [r0, #4]
	uint32_t head = buf->head;
   119b0:	6805      	ldr	r5, [r0, #0]

	if (tail < head) {
   119b2:	42ac      	cmp	r4, r5
   119b4:	d304      	bcc.n	119c0 <ring_buf_is_empty+0x14>
		tail += get_rewind_value(buf->size,
					 ring_buf_get_rewind_threshold());
	}

	return (head == tail);
}
   119b6:	42ac      	cmp	r4, r5
   119b8:	bf14      	ite	ne
   119ba:	2000      	movne	r0, #0
   119bc:	2001      	moveq	r0, #1
   119be:	bd70      	pop	{r4, r5, r6, pc}
		tail += get_rewind_value(buf->size,
   119c0:	6906      	ldr	r6, [r0, #16]
   119c2:	f7ff fff0 	bl	119a6 <ring_buf_get_rewind_threshold>
   119c6:	4601      	mov	r1, r0
   119c8:	4630      	mov	r0, r6
   119ca:	f7ff ffdc 	bl	11986 <get_rewind_value>
   119ce:	4404      	add	r4, r0
   119d0:	e7f1      	b.n	119b6 <ring_buf_is_empty+0xa>

000119d2 <ring_buf_size_get>:

uint32_t ring_buf_size_get(struct ring_buf *buf)
{
   119d2:	b570      	push	{r4, r5, r6, lr}
	uint32_t tail = buf->tail;
   119d4:	6844      	ldr	r4, [r0, #4]
	uint32_t head = buf->head;
   119d6:	6805      	ldr	r5, [r0, #0]

	if (tail < head) {
   119d8:	42ac      	cmp	r4, r5
   119da:	d301      	bcc.n	119e0 <ring_buf_size_get+0xe>
		tail += get_rewind_value(buf->size,
					 ring_buf_get_rewind_threshold());
	}

	return tail - head;
}
   119dc:	1b60      	subs	r0, r4, r5
   119de:	bd70      	pop	{r4, r5, r6, pc}
		tail += get_rewind_value(buf->size,
   119e0:	6906      	ldr	r6, [r0, #16]
   119e2:	f7ff ffe0 	bl	119a6 <ring_buf_get_rewind_threshold>
   119e6:	4601      	mov	r1, r0
   119e8:	4630      	mov	r0, r6
   119ea:	f7ff ffcc 	bl	11986 <get_rewind_value>
   119ee:	4404      	add	r4, r0
   119f0:	e7f4      	b.n	119dc <ring_buf_size_get+0xa>

000119f2 <ring_buf_space_get>:

uint32_t ring_buf_space_get(struct ring_buf *buf)
{
   119f2:	b510      	push	{r4, lr}
	return buf->size - ring_buf_size_get(buf);
   119f4:	6904      	ldr	r4, [r0, #16]
   119f6:	f7ff ffec 	bl	119d2 <ring_buf_size_get>
}
   119fa:	1a20      	subs	r0, r4, r0
   119fc:	bd10      	pop	{r4, pc}

000119fe <ring_buf_put_claim>:
{
	return val >= max ? (val - max) : val;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   119fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11a02:	4604      	mov	r4, r0
   11a04:	460e      	mov	r6, r1
   11a06:	4617      	mov	r7, r2
	uint32_t space, trail_size, allocated, tmp_trail_mod;

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
   11a08:	f8d0 8008 	ldr.w	r8, [r0, #8]
   11a0c:	4641      	mov	r1, r8
   11a0e:	f7ff ffbf 	bl	11990 <mod>
   11a12:	4601      	mov	r1, r0
	space = (buf->head + buf->size) - buf->misc.byte_mode.tmp_tail;
   11a14:	6825      	ldr	r5, [r4, #0]
   11a16:	6920      	ldr	r0, [r4, #16]
   11a18:	4405      	add	r5, r0
   11a1a:	eba5 0208 	sub.w	r2, r5, r8
	trail_size = buf->size - tmp_trail_mod;
   11a1e:	1a40      	subs	r0, r0, r1

	/* Limit requested size to available size. */
	size = MIN(size, space);
   11a20:	42ba      	cmp	r2, r7
   11a22:	bf28      	it	cs
   11a24:	463a      	movcs	r2, r7

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
   11a26:	4290      	cmp	r0, r2
   11a28:	bf28      	it	cs
   11a2a:	4610      	movcs	r0, r2
	*data = &buf->buf.buf8[tmp_trail_mod];
   11a2c:	6963      	ldr	r3, [r4, #20]
   11a2e:	4419      	add	r1, r3
   11a30:	6031      	str	r1, [r6, #0]

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
   11a32:	68a3      	ldr	r3, [r4, #8]
   11a34:	4403      	add	r3, r0
	buf->misc.byte_mode.tmp_tail =
   11a36:	60a3      	str	r3, [r4, #8]

	return allocated;
}
   11a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011a3c <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
   11a3c:	b570      	push	{r4, r5, r6, lr}
   11a3e:	4604      	mov	r4, r0
   11a40:	460d      	mov	r5, r1
	uint32_t rew;
	uint32_t threshold = ring_buf_get_rewind_threshold();
   11a42:	f7ff ffb0 	bl	119a6 <ring_buf_get_rewind_threshold>
   11a46:	4601      	mov	r1, r0

	if ((buf->tail + size) > (buf->head + buf->size)) {
   11a48:	6866      	ldr	r6, [r4, #4]
   11a4a:	1972      	adds	r2, r6, r5
   11a4c:	6823      	ldr	r3, [r4, #0]
   11a4e:	6920      	ldr	r0, [r4, #16]
   11a50:	4403      	add	r3, r0
   11a52:	429a      	cmp	r2, r3
   11a54:	d80b      	bhi.n	11a6e <ring_buf_put_finish+0x32>
		return -EINVAL;
	}

	/* Check if indexes shall be rewind. */
	if (buf->tail > threshold) {
   11a56:	428e      	cmp	r6, r1
   11a58:	d907      	bls.n	11a6a <ring_buf_put_finish+0x2e>
		rew = get_rewind_value(buf->size, threshold);
   11a5a:	f7ff ff94 	bl	11986 <get_rewind_value>
	} else {
		rew = 0;
	}

	buf->tail += (size - rew);
   11a5e:	1a2d      	subs	r5, r5, r0
   11a60:	442e      	add	r6, r5
   11a62:	6066      	str	r6, [r4, #4]
	buf->misc.byte_mode.tmp_tail = buf->tail;
   11a64:	60a6      	str	r6, [r4, #8]

	return 0;
   11a66:	2000      	movs	r0, #0
}
   11a68:	bd70      	pop	{r4, r5, r6, pc}
		rew = 0;
   11a6a:	2000      	movs	r0, #0
   11a6c:	e7f7      	b.n	11a5e <ring_buf_put_finish+0x22>
		return -EINVAL;
   11a6e:	f06f 0015 	mvn.w	r0, #21
   11a72:	e7f9      	b.n	11a68 <ring_buf_put_finish+0x2c>

00011a74 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
   11a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11a78:	b082      	sub	sp, #8
   11a7a:	4680      	mov	r8, r0
   11a7c:	460e      	mov	r6, r1
   11a7e:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   11a80:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
   11a82:	462a      	mov	r2, r5
   11a84:	a901      	add	r1, sp, #4
   11a86:	4640      	mov	r0, r8
   11a88:	f7ff ffb9 	bl	119fe <ring_buf_put_claim>
   11a8c:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
   11a8e:	4602      	mov	r2, r0
   11a90:	4631      	mov	r1, r6
   11a92:	9801      	ldr	r0, [sp, #4]
   11a94:	f001 f814 	bl	12ac0 <memcpy>
		total_size += partial_size;
   11a98:	4427      	add	r7, r4
		size -= partial_size;
		data += partial_size;
   11a9a:	4426      	add	r6, r4
	} while (size && partial_size);
   11a9c:	1b2d      	subs	r5, r5, r4
   11a9e:	d001      	beq.n	11aa4 <ring_buf_put+0x30>
   11aa0:	2c00      	cmp	r4, #0
   11aa2:	d1ee      	bne.n	11a82 <ring_buf_put+0xe>

	err = ring_buf_put_finish(buf, total_size);
   11aa4:	4639      	mov	r1, r7
   11aa6:	4640      	mov	r0, r8
   11aa8:	f7ff ffc8 	bl	11a3c <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   11aac:	4638      	mov	r0, r7
   11aae:	b002      	add	sp, #8
   11ab0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011ab4 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   11ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11ab8:	4604      	mov	r4, r0
   11aba:	460e      	mov	r6, r1
   11abc:	4617      	mov	r7, r2
	uint32_t space, granted_size, trail_size, tmp_head_mod;
	uint32_t tail = buf->tail;
   11abe:	6845      	ldr	r5, [r0, #4]

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
   11ac0:	68c3      	ldr	r3, [r0, #12]
   11ac2:	42ab      	cmp	r3, r5
   11ac4:	d818      	bhi.n	11af8 <ring_buf_get_claim+0x44>
		/* Locally, increment it to pre-rewind value */
		tail += get_rewind_value(buf->size,
					 ring_buf_get_rewind_threshold());
	}

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
   11ac6:	f8d4 800c 	ldr.w	r8, [r4, #12]
   11aca:	4641      	mov	r1, r8
   11acc:	4620      	mov	r0, r4
   11ace:	f7ff ff5f 	bl	11990 <mod>
   11ad2:	4601      	mov	r1, r0
	space = tail - buf->misc.byte_mode.tmp_head;
   11ad4:	eba5 0508 	sub.w	r5, r5, r8
	trail_size = buf->size - tmp_head_mod;
   11ad8:	6923      	ldr	r3, [r4, #16]
   11ada:	1a18      	subs	r0, r3, r0

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
   11adc:	42bd      	cmp	r5, r7
   11ade:	bf28      	it	cs
   11ae0:	463d      	movcs	r5, r7

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
   11ae2:	42a8      	cmp	r0, r5
   11ae4:	bf28      	it	cs
   11ae6:	4628      	movcs	r0, r5

	*data = &buf->buf.buf8[tmp_head_mod];
   11ae8:	6963      	ldr	r3, [r4, #20]
   11aea:	4419      	add	r1, r3
   11aec:	6031      	str	r1, [r6, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
   11aee:	68e3      	ldr	r3, [r4, #12]
   11af0:	4403      	add	r3, r0
   11af2:	60e3      	str	r3, [r4, #12]

	return granted_size;
}
   11af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tail += get_rewind_value(buf->size,
   11af8:	f8d0 8010 	ldr.w	r8, [r0, #16]
   11afc:	f7ff ff53 	bl	119a6 <ring_buf_get_rewind_threshold>
   11b00:	4601      	mov	r1, r0
   11b02:	4640      	mov	r0, r8
   11b04:	f7ff ff3f 	bl	11986 <get_rewind_value>
   11b08:	4405      	add	r5, r0
   11b0a:	e7dc      	b.n	11ac6 <ring_buf_get_claim+0x12>

00011b0c <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
   11b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11b0e:	4604      	mov	r4, r0
   11b10:	460d      	mov	r5, r1
	uint32_t tail = buf->tail;
   11b12:	6846      	ldr	r6, [r0, #4]
	uint32_t rew;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
   11b14:	68c3      	ldr	r3, [r0, #12]
   11b16:	42b3      	cmp	r3, r6
   11b18:	d80a      	bhi.n	11b30 <ring_buf_get_finish+0x24>
		/* tail was rewinded. Locally, increment it to pre-rewind value */
		rew = get_rewind_value(buf->size,
				       ring_buf_get_rewind_threshold());
		tail += rew;
	} else {
		rew = 0;
   11b1a:	2000      	movs	r0, #0
	}

	if ((buf->head + size) > tail) {
   11b1c:	6823      	ldr	r3, [r4, #0]
   11b1e:	195a      	adds	r2, r3, r5
   11b20:	42b2      	cmp	r2, r6
   11b22:	d80e      	bhi.n	11b42 <ring_buf_get_finish+0x36>
		return -EINVAL;
	}

	/* Include potential rewinding. */
	buf->head += (size - rew);
   11b24:	1a2d      	subs	r5, r5, r0
   11b26:	442b      	add	r3, r5
   11b28:	6023      	str	r3, [r4, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
   11b2a:	60e3      	str	r3, [r4, #12]

	return 0;
   11b2c:	2000      	movs	r0, #0
}
   11b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rew = get_rewind_value(buf->size,
   11b30:	6907      	ldr	r7, [r0, #16]
   11b32:	f7ff ff38 	bl	119a6 <ring_buf_get_rewind_threshold>
   11b36:	4601      	mov	r1, r0
   11b38:	4638      	mov	r0, r7
   11b3a:	f7ff ff24 	bl	11986 <get_rewind_value>
		tail += rew;
   11b3e:	4406      	add	r6, r0
   11b40:	e7ec      	b.n	11b1c <ring_buf_get_finish+0x10>
		return -EINVAL;
   11b42:	f06f 0015 	mvn.w	r0, #21
   11b46:	e7f2      	b.n	11b2e <ring_buf_get_finish+0x22>

00011b48 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
   11b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11b4c:	b082      	sub	sp, #8
   11b4e:	4680      	mov	r8, r0
   11b50:	460e      	mov	r6, r1
   11b52:	4615      	mov	r5, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   11b54:	2700      	movs	r7, #0
   11b56:	e009      	b.n	11b6c <ring_buf_get+0x24>
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
		if (data) {
			memcpy(data, src, partial_size);
   11b58:	4602      	mov	r2, r0
   11b5a:	9901      	ldr	r1, [sp, #4]
   11b5c:	4630      	mov	r0, r6
   11b5e:	f000 ffaf 	bl	12ac0 <memcpy>
			data += partial_size;
   11b62:	4426      	add	r6, r4
		}
		total_size += partial_size;
   11b64:	4427      	add	r7, r4
		size -= partial_size;
	} while (size && partial_size);
   11b66:	1b2d      	subs	r5, r5, r4
   11b68:	d009      	beq.n	11b7e <ring_buf_get+0x36>
   11b6a:	b144      	cbz	r4, 11b7e <ring_buf_get+0x36>
		partial_size = ring_buf_get_claim(buf, &src, size);
   11b6c:	462a      	mov	r2, r5
   11b6e:	a901      	add	r1, sp, #4
   11b70:	4640      	mov	r0, r8
   11b72:	f7ff ff9f 	bl	11ab4 <ring_buf_get_claim>
   11b76:	4604      	mov	r4, r0
		if (data) {
   11b78:	2e00      	cmp	r6, #0
   11b7a:	d1ed      	bne.n	11b58 <ring_buf_get+0x10>
   11b7c:	e7f2      	b.n	11b64 <ring_buf_get+0x1c>

	err = ring_buf_get_finish(buf, total_size);
   11b7e:	4639      	mov	r1, r7
   11b80:	4640      	mov	r0, r8
   11b82:	f7ff ffc3 	bl	11b0c <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   11b86:	4638      	mov	r0, r7
   11b88:	b002      	add	sp, #8
   11b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011b8e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   11b8e:	4770      	bx	lr

00011b90 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   11b90:	2300      	movs	r3, #0
   11b92:	6043      	str	r3, [r0, #4]
	list->head = NULL;
   11b94:	6003      	str	r3, [r0, #0]
}
   11b96:	4770      	bx	lr

00011b98 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   11b98:	6803      	ldr	r3, [r0, #0]
   11b9a:	b12b      	cbz	r3, 11ba8 <log_list_add_tail+0x10>
		list->head = msg;
	} else {
		list->tail->next = msg;
   11b9c:	6843      	ldr	r3, [r0, #4]
   11b9e:	6019      	str	r1, [r3, #0]
	}

	list->tail = msg;
   11ba0:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   11ba2:	2300      	movs	r3, #0
   11ba4:	600b      	str	r3, [r1, #0]
}
   11ba6:	4770      	bx	lr
		list->head = msg;
   11ba8:	6001      	str	r1, [r0, #0]
   11baa:	e7f9      	b.n	11ba0 <log_list_add_tail+0x8>

00011bac <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   11bac:	6800      	ldr	r0, [r0, #0]
   11bae:	4770      	bx	lr

00011bb0 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   11bb0:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   11bb2:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   11bb4:	b108      	cbz	r0, 11bba <log_list_head_get+0xa>
		list->head = list->head->next;
   11bb6:	6802      	ldr	r2, [r0, #0]
   11bb8:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   11bba:	4770      	bx	lr

00011bbc <dummy_timestamp>:
}
   11bbc:	2000      	movs	r0, #0
   11bbe:	4770      	bx	lr

00011bc0 <msg_filter_check>:
}
   11bc0:	2001      	movs	r0, #1
   11bc2:	4770      	bx	lr

00011bc4 <default_get_timestamp>:
{
   11bc4:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   11bc6:	f001 ffc7 	bl	13b58 <sys_clock_cycle_get_32>
}
   11bca:	bd08      	pop	{r3, pc}

00011bcc <z_log_get_s_mask>:
{
   11bcc:	b470      	push	{r4, r5, r6}
   11bce:	4603      	mov	r3, r0
	uint32_t mask = 0U;
   11bd0:	2000      	movs	r0, #0
	uint32_t arg = 0U;
   11bd2:	4605      	mov	r5, r0
	bool arm = false;
   11bd4:	4604      	mov	r4, r0
	while ((curr = *str++) && arg < nargs) {
   11bd6:	e001      	b.n	11bdc <z_log_get_s_mask+0x10>
			arm = !arm;
   11bd8:	f084 0401 	eor.w	r4, r4, #1
	while ((curr = *str++) && arg < nargs) {
   11bdc:	f813 2b01 	ldrb.w	r2, [r3], #1
   11be0:	b19a      	cbz	r2, 11c0a <z_log_get_s_mask+0x3e>
   11be2:	428d      	cmp	r5, r1
   11be4:	d211      	bcs.n	11c0a <z_log_get_s_mask+0x3e>
		if (curr == '%') {
   11be6:	2a25      	cmp	r2, #37	; 0x25
   11be8:	d0f6      	beq.n	11bd8 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   11bea:	2c00      	cmp	r4, #0
   11bec:	d0f6      	beq.n	11bdc <z_log_get_s_mask+0x10>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   11bee:	f042 0620 	orr.w	r6, r2, #32
   11bf2:	3e61      	subs	r6, #97	; 0x61
   11bf4:	2e19      	cmp	r6, #25
   11bf6:	d8f1      	bhi.n	11bdc <z_log_get_s_mask+0x10>
			if (curr == 's') {
   11bf8:	2a73      	cmp	r2, #115	; 0x73
   11bfa:	d002      	beq.n	11c02 <z_log_get_s_mask+0x36>
			arg++;
   11bfc:	3501      	adds	r5, #1
			arm = false;
   11bfe:	2400      	movs	r4, #0
   11c00:	e7ec      	b.n	11bdc <z_log_get_s_mask+0x10>
				mask |= BIT(arg);
   11c02:	2201      	movs	r2, #1
   11c04:	40aa      	lsls	r2, r5
   11c06:	4310      	orrs	r0, r2
   11c08:	e7f8      	b.n	11bfc <z_log_get_s_mask+0x30>
}
   11c0a:	bc70      	pop	{r4, r5, r6}
   11c0c:	4770      	bx	lr

00011c0e <block_on_alloc>:
}
   11c0e:	2000      	movs	r0, #0
   11c10:	4770      	bx	lr

00011c12 <cont_arg_get>:

static log_arg_t cont_arg_get(struct log_msg *msg, uint32_t arg_idx)
{
	struct log_msg_cont *cont;

	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   11c12:	2901      	cmp	r1, #1
   11c14:	d906      	bls.n	11c24 <cont_arg_get+0x12>
		return msg->payload.ext.data.args[arg_idx];
	}


	cont = msg->payload.ext.next;
   11c16:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   11c18:	3902      	subs	r1, #2

	while (arg_idx >= ARGS_CONT_MSG) {
   11c1a:	2906      	cmp	r1, #6
   11c1c:	d907      	bls.n	11c2e <cont_arg_get+0x1c>
		arg_idx -= ARGS_CONT_MSG;
   11c1e:	3907      	subs	r1, #7
		cont = cont->next;
   11c20:	681b      	ldr	r3, [r3, #0]
   11c22:	e7fa      	b.n	11c1a <cont_arg_get+0x8>
		return msg->payload.ext.data.args[arg_idx];
   11c24:	3104      	adds	r1, #4
   11c26:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   11c2a:	6888      	ldr	r0, [r1, #8]
   11c2c:	4770      	bx	lr
	}

	return cont->payload.args[arg_idx];
   11c2e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   11c32:	6848      	ldr	r0, [r1, #4]
}
   11c34:	4770      	bx	lr

00011c36 <copy_args_to_msg>:

	return msg;
}

static void copy_args_to_msg(struct  log_msg *msg, log_arg_t *args, uint32_t nargs)
{
   11c36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11c3a:	460d      	mov	r5, r1
   11c3c:	4614      	mov	r4, r2
	struct log_msg_cont *cont = msg->payload.ext.next;
   11c3e:	6946      	ldr	r6, [r0, #20]

	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   11c40:	2a03      	cmp	r2, #3
   11c42:	d917      	bls.n	11c74 <copy_args_to_msg+0x3e>
		(void)memcpy(msg->payload.ext.data.args, args,
   11c44:	2208      	movs	r2, #8
   11c46:	3018      	adds	r0, #24
   11c48:	f000 ff3a 	bl	12ac0 <memcpy>
		       LOG_MSG_NARGS_HEAD_CHUNK * sizeof(log_arg_t));
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   11c4c:	3c02      	subs	r4, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   11c4e:	3508      	adds	r5, #8
		(void)memcpy(msg->payload.single.args, args,
			     nargs * sizeof(log_arg_t));
		nargs  = 0U;
	}

	while (nargs != 0U) {
   11c50:	b1b4      	cbz	r4, 11c80 <copy_args_to_msg+0x4a>
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   11c52:	46a0      	mov	r8, r4
   11c54:	2c07      	cmp	r4, #7
   11c56:	bf28      	it	cs
   11c58:	f04f 0807 	movcs.w	r8, #7

		(void)memcpy(cont->payload.args, args,
   11c5c:	ea4f 0788 	mov.w	r7, r8, lsl #2
   11c60:	463a      	mov	r2, r7
   11c62:	4629      	mov	r1, r5
   11c64:	1d30      	adds	r0, r6, #4
   11c66:	f000 ff2b 	bl	12ac0 <memcpy>
			     cpy_args * sizeof(log_arg_t));
		nargs -= cpy_args;
   11c6a:	eba4 0408 	sub.w	r4, r4, r8
		args += cpy_args;
   11c6e:	443d      	add	r5, r7
		cont = cont->next;
   11c70:	6836      	ldr	r6, [r6, #0]
   11c72:	e7ed      	b.n	11c50 <copy_args_to_msg+0x1a>
		(void)memcpy(msg->payload.single.args, args,
   11c74:	0092      	lsls	r2, r2, #2
   11c76:	3014      	adds	r0, #20
   11c78:	f000 ff22 	bl	12ac0 <memcpy>
		nargs  = 0U;
   11c7c:	2400      	movs	r4, #0
   11c7e:	e7e7      	b.n	11c50 <copy_args_to_msg+0x1a>
	}
}
   11c80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011c84 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   11c84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   11c88:	461c      	mov	r4, r3
   11c8a:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint32_t available_len = msg->hdr.params.hexdump.length;
   11c8e:	8903      	ldrh	r3, [r0, #8]
   11c90:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   11c94:	42a3      	cmp	r3, r4
   11c96:	d91f      	bls.n	11cd8 <log_msg_hexdump_data_op+0x54>
   11c98:	4688      	mov	r8, r1
		*length = 0;
		return;
	}

	if ((offset + *length) > available_len) {
   11c9a:	6811      	ldr	r1, [r2, #0]
   11c9c:	4421      	add	r1, r4
   11c9e:	4299      	cmp	r1, r3
   11ca0:	d901      	bls.n	11ca6 <log_msg_hexdump_data_op+0x22>
		*length = available_len - offset;
   11ca2:	1b19      	subs	r1, r3, r4
   11ca4:	6011      	str	r1, [r2, #0]
	}

	req_len = *length;
   11ca6:	6817      	ldr	r7, [r2, #0]

	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   11ca8:	2b0c      	cmp	r3, #12
   11caa:	d919      	bls.n	11ce0 <log_msg_hexdump_data_op+0x5c>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
		head_data = msg->payload.ext.data.bytes;
   11cac:	f100 0c18 	add.w	ip, r0, #24
		cont = msg->payload.ext.next;
   11cb0:	6946      	ldr	r6, [r0, #20]
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   11cb2:	2308      	movs	r3, #8
		head_data = msg->payload.single.bytes;
		chunk_len = available_len;

	}

	if (offset < chunk_len) {
   11cb4:	42a3      	cmp	r3, r4
   11cb6:	d91e      	bls.n	11cf6 <log_msg_hexdump_data_op+0x72>
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   11cb8:	42bb      	cmp	r3, r7
   11cba:	bf28      	it	cs
   11cbc:	463b      	movcs	r3, r7
   11cbe:	461d      	mov	r5, r3

		if (put_op) {
   11cc0:	f1b9 0f00 	cmp.w	r9, #0
   11cc4:	d010      	beq.n	11ce8 <log_msg_hexdump_data_op+0x64>
			(void)memcpy(&head_data[offset], data, cpy_len);
   11cc6:	461a      	mov	r2, r3
   11cc8:	4641      	mov	r1, r8
   11cca:	eb0c 0004 	add.w	r0, ip, r4
   11cce:	f000 fef7 	bl	12ac0 <memcpy>
		} else {
			(void)memcpy(data, &head_data[offset], cpy_len);
		}

		req_len -= cpy_len;
   11cd2:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
   11cd4:	44a8      	add	r8, r5
   11cd6:	e021      	b.n	11d1c <log_msg_hexdump_data_op+0x98>
		*length = 0;
   11cd8:	2300      	movs	r3, #0
   11cda:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   11cdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		head_data = msg->payload.single.bytes;
   11ce0:	f100 0c14 	add.w	ip, r0, #20
	struct log_msg_cont *cont = NULL;
   11ce4:	2600      	movs	r6, #0
   11ce6:	e7e5      	b.n	11cb4 <log_msg_hexdump_data_op+0x30>
			(void)memcpy(data, &head_data[offset], cpy_len);
   11ce8:	461a      	mov	r2, r3
   11cea:	eb0c 0104 	add.w	r1, ip, r4
   11cee:	4640      	mov	r0, r8
   11cf0:	f000 fee6 	bl	12ac0 <memcpy>
   11cf4:	e7ed      	b.n	11cd2 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   11cf6:	1ae4      	subs	r4, r4, r3
		if (cont == NULL) {
   11cf8:	b91e      	cbnz	r6, 11d02 <log_msg_hexdump_data_op+0x7e>
			cont = msg->payload.ext.next;
   11cfa:	6946      	ldr	r6, [r0, #20]
   11cfc:	e001      	b.n	11d02 <log_msg_hexdump_data_op+0x7e>
			cont = cont->next;
   11cfe:	6836      	ldr	r6, [r6, #0]
			offset -= chunk_len;
   11d00:	3c1c      	subs	r4, #28
		while (offset >= chunk_len) {
   11d02:	2c1b      	cmp	r4, #27
   11d04:	d8fb      	bhi.n	11cfe <log_msg_hexdump_data_op+0x7a>
   11d06:	e009      	b.n	11d1c <log_msg_hexdump_data_op+0x98>
			(void)memcpy(data, &cont->payload.bytes[offset],
   11d08:	1931      	adds	r1, r6, r4
   11d0a:	462a      	mov	r2, r5
   11d0c:	3104      	adds	r1, #4
   11d0e:	4640      	mov	r0, r8
   11d10:	f000 fed6 	bl	12ac0 <memcpy>
		cont = cont->next;
   11d14:	6836      	ldr	r6, [r6, #0]
		req_len -= cpy_len;
   11d16:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
   11d18:	44a8      	add	r8, r5
		offset = 0;
   11d1a:	2400      	movs	r4, #0
	while ((req_len > 0) && (cont != NULL)) {
   11d1c:	2f00      	cmp	r7, #0
   11d1e:	d0dd      	beq.n	11cdc <log_msg_hexdump_data_op+0x58>
   11d20:	2e00      	cmp	r6, #0
   11d22:	d0db      	beq.n	11cdc <log_msg_hexdump_data_op+0x58>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   11d24:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   11d28:	42bd      	cmp	r5, r7
   11d2a:	bf28      	it	cs
   11d2c:	463d      	movcs	r5, r7
		if (put_op) {
   11d2e:	f1b9 0f00 	cmp.w	r9, #0
   11d32:	d0e9      	beq.n	11d08 <log_msg_hexdump_data_op+0x84>
			(void)memcpy(&cont->payload.bytes[offset],
   11d34:	1930      	adds	r0, r6, r4
   11d36:	462a      	mov	r2, r5
   11d38:	4641      	mov	r1, r8
   11d3a:	3004      	adds	r0, #4
   11d3c:	f000 fec0 	bl	12ac0 <memcpy>
   11d40:	e7e8      	b.n	11d14 <log_msg_hexdump_data_op+0x90>

00011d42 <log_msg_get>:
	atomic_inc(&msg->hdr.ref_cnt);
   11d42:	3004      	adds	r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   11d44:	f3bf 8f5b 	dmb	ish
   11d48:	e850 3f00 	ldrex	r3, [r0]
   11d4c:	3301      	adds	r3, #1
   11d4e:	e840 3200 	strex	r2, r3, [r0]
   11d52:	2a00      	cmp	r2, #0
   11d54:	d1f8      	bne.n	11d48 <log_msg_get+0x6>
   11d56:	f3bf 8f5b 	dmb	ish
}
   11d5a:	4770      	bx	lr

00011d5c <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   11d5c:	7a40      	ldrb	r0, [r0, #9]
}
   11d5e:	0900      	lsrs	r0, r0, #4
   11d60:	4770      	bx	lr

00011d62 <log_msg_arg_get>:
{
   11d62:	b508      	push	{r3, lr}
	if (arg_idx >= msg->hdr.params.std.nargs) {
   11d64:	7a43      	ldrb	r3, [r0, #9]
   11d66:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   11d6a:	d20a      	bcs.n	11d82 <log_msg_arg_get+0x20>
   11d6c:	091a      	lsrs	r2, r3, #4
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   11d6e:	2a03      	cmp	r2, #3
   11d70:	d804      	bhi.n	11d7c <log_msg_arg_get+0x1a>
		arg = msg->payload.single.args[arg_idx];
   11d72:	3104      	adds	r1, #4
   11d74:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   11d78:	6840      	ldr	r0, [r0, #4]
   11d7a:	e003      	b.n	11d84 <log_msg_arg_get+0x22>
		arg = cont_arg_get(msg, arg_idx);
   11d7c:	f7ff ff49 	bl	11c12 <cont_arg_get>
   11d80:	e000      	b.n	11d84 <log_msg_arg_get+0x22>
		return 0;
   11d82:	2000      	movs	r0, #0
}
   11d84:	bd08      	pop	{r3, pc}

00011d86 <log_msg_str_get>:
}
   11d86:	6900      	ldr	r0, [r0, #16]
   11d88:	4770      	bx	lr

00011d8a <log_msg_put>:
{
   11d8a:	b508      	push	{r3, lr}
	atomic_dec(&msg->hdr.ref_cnt);
   11d8c:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   11d8e:	f3bf 8f5b 	dmb	ish
   11d92:	e853 2f00 	ldrex	r2, [r3]
   11d96:	3a01      	subs	r2, #1
   11d98:	e843 2100 	strex	r1, r2, [r3]
   11d9c:	2900      	cmp	r1, #0
   11d9e:	d1f8      	bne.n	11d92 <log_msg_put+0x8>
   11da0:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   11da4:	6843      	ldr	r3, [r0, #4]
   11da6:	b103      	cbz	r3, 11daa <log_msg_put+0x20>
}
   11da8:	bd08      	pop	{r3, pc}
		msg_free(msg);
   11daa:	f7f1 f89b 	bl	2ee4 <msg_free>
}
   11dae:	e7fb      	b.n	11da8 <log_msg_put+0x1e>

00011db0 <msg_alloc>:
{
   11db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11db2:	4605      	mov	r5, r0
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   11db4:	f7f1 f87a 	bl	2eac <log_msg_chunk_alloc>
	if (msg != NULL) {
   11db8:	4607      	mov	r7, r0
   11dba:	b140      	cbz	r0, 11dce <msg_alloc+0x1e>
		msg->hdr.ref_cnt = 1;
   11dbc:	2301      	movs	r3, #1
   11dbe:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   11dc0:	2200      	movs	r2, #0
   11dc2:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   11dc4:	f04f 0300 	mov.w	r3, #0
   11dc8:	f362 0300 	bfi	r3, r2, #0, #1
   11dcc:	7203      	strb	r3, [r0, #8]
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   11dce:	b1f7      	cbz	r7, 11e0e <msg_alloc+0x5e>
   11dd0:	2d03      	cmp	r5, #3
   11dd2:	d91c      	bls.n	11e0e <msg_alloc+0x5e>
	msg->hdr.params.std.nargs = 0U;
   11dd4:	7a7b      	ldrb	r3, [r7, #9]
   11dd6:	f36f 1307 	bfc	r3, #4, #4
   11dda:	727b      	strb	r3, [r7, #9]
	msg->hdr.params.generic.ext = 1;
   11ddc:	7a3b      	ldrb	r3, [r7, #8]
   11dde:	f043 0302 	orr.w	r3, r3, #2
   11de2:	723b      	strb	r3, [r7, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   11de4:	3d02      	subs	r5, #2
	next = &msg->payload.ext.next;
   11de6:	f107 0614 	add.w	r6, r7, #20
	*next = NULL;
   11dea:	2300      	movs	r3, #0
   11dec:	617b      	str	r3, [r7, #20]
	while (n > 0) {
   11dee:	2d00      	cmp	r5, #0
   11df0:	dd0d      	ble.n	11e0e <msg_alloc+0x5e>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   11df2:	f7f1 f85b 	bl	2eac <log_msg_chunk_alloc>
		if (cont == NULL) {
   11df6:	4604      	mov	r4, r0
   11df8:	b128      	cbz	r0, 11e06 <msg_alloc+0x56>
		*next = cont;
   11dfa:	6030      	str	r0, [r6, #0]
		cont->next = NULL;
   11dfc:	2300      	movs	r3, #0
   11dfe:	6003      	str	r3, [r0, #0]
		next = &cont->next;
   11e00:	4606      	mov	r6, r0
		n -= ARGS_CONT_MSG;
   11e02:	3d07      	subs	r5, #7
   11e04:	e7f3      	b.n	11dee <msg_alloc+0x3e>
			msg_free(msg);
   11e06:	4638      	mov	r0, r7
   11e08:	f7f1 f86c 	bl	2ee4 <msg_free>
			return NULL;
   11e0c:	4627      	mov	r7, r4
}
   11e0e:	4638      	mov	r0, r7
   11e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011e12 <log_msg_create_n>:
{
   11e12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11e14:	4607      	mov	r7, r0
   11e16:	460e      	mov	r6, r1
   11e18:	4614      	mov	r4, r2
	msg = msg_alloc(nargs);
   11e1a:	4610      	mov	r0, r2
   11e1c:	f7ff ffc8 	bl	11db0 <msg_alloc>
	if (msg != NULL) {
   11e20:	4605      	mov	r5, r0
   11e22:	b140      	cbz	r0, 11e36 <log_msg_create_n+0x24>
		msg->str = str;
   11e24:	6107      	str	r7, [r0, #16]
		msg->hdr.params.std.nargs = nargs;
   11e26:	7a43      	ldrb	r3, [r0, #9]
   11e28:	f364 1307 	bfi	r3, r4, #4, #4
   11e2c:	7243      	strb	r3, [r0, #9]
		copy_args_to_msg(msg, args, nargs);
   11e2e:	4622      	mov	r2, r4
   11e30:	4631      	mov	r1, r6
   11e32:	f7ff ff00 	bl	11c36 <copy_args_to_msg>
}
   11e36:	4628      	mov	r0, r5
   11e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011e3a <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   11e3a:	b510      	push	{r4, lr}
   11e3c:	b082      	sub	sp, #8
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   11e3e:	2400      	movs	r4, #0
   11e40:	9400      	str	r4, [sp, #0]
   11e42:	f7ff ff1f 	bl	11c84 <log_msg_hexdump_data_op>
}
   11e46:	b002      	add	sp, #8
   11e48:	bd10      	pop	{r4, pc}

00011e4a <buffer_write>:
{
   11e4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11e4c:	4607      	mov	r7, r0
   11e4e:	460d      	mov	r5, r1
   11e50:	4614      	mov	r4, r2
   11e52:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
   11e54:	4632      	mov	r2, r6
   11e56:	4621      	mov	r1, r4
   11e58:	4628      	mov	r0, r5
   11e5a:	47b8      	blx	r7
		buf += processed;
   11e5c:	4405      	add	r5, r0
	} while (len != 0);
   11e5e:	1a24      	subs	r4, r4, r0
   11e60:	d1f8      	bne.n	11e54 <buffer_write+0xa>
}
   11e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011e64 <color_prefix>:
{
   11e64:	b508      	push	{r3, lr}
   11e66:	4613      	mov	r3, r2
	color_print(output, color, true, level);
   11e68:	2201      	movs	r2, #1
   11e6a:	f7f1 f8d3 	bl	3014 <color_print>
}
   11e6e:	bd08      	pop	{r3, pc}

00011e70 <color_postfix>:
{
   11e70:	b508      	push	{r3, lr}
   11e72:	4613      	mov	r3, r2
	color_print(output, color, false, level);
   11e74:	2200      	movs	r2, #0
   11e76:	f7f1 f8cd 	bl	3014 <color_print>
}
   11e7a:	bd08      	pop	{r3, pc}

00011e7c <postfix_print>:
{
   11e7c:	b538      	push	{r3, r4, r5, lr}
   11e7e:	4605      	mov	r5, r0
   11e80:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
   11e82:	f001 0101 	and.w	r1, r1, #1
   11e86:	f7ff fff3 	bl	11e70 <color_postfix>
	newline_print(output, flags);
   11e8a:	4621      	mov	r1, r4
   11e8c:	4628      	mov	r0, r5
   11e8e:	f7f1 f8d7 	bl	3040 <newline_print>
}
   11e92:	bd38      	pop	{r3, r4, r5, pc}

00011e94 <prefix_print>:
{
   11e94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11e98:	b083      	sub	sp, #12
   11e9a:	4604      	mov	r4, r0
   11e9c:	4615      	mov	r5, r2
   11e9e:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   11ea2:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   11ea6:	f3c1 08c0 	ubfx	r8, r1, #3, #1
	if (stamp) {
   11eaa:	f011 0702 	ands.w	r7, r1, #2
   11eae:	d113      	bne.n	11ed8 <prefix_print+0x44>
		color_prefix(output, colors_on, level);
   11eb0:	4632      	mov	r2, r6
   11eb2:	4649      	mov	r1, r9
   11eb4:	4620      	mov	r0, r4
   11eb6:	f7ff ffd5 	bl	11e64 <color_prefix>
	length += ids_print(output, level_on, func_on,
   11eba:	9601      	str	r6, [sp, #4]
   11ebc:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
   11ec0:	9300      	str	r3, [sp, #0]
   11ec2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   11ec6:	462a      	mov	r2, r5
   11ec8:	4641      	mov	r1, r8
   11eca:	4620      	mov	r0, r4
   11ecc:	f7f1 f92a 	bl	3124 <ids_print>
}
   11ed0:	4438      	add	r0, r7
   11ed2:	b003      	add	sp, #12
   11ed4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		length += timestamp_print(output, flags, timestamp);
   11ed8:	461a      	mov	r2, r3
   11eda:	f7f1 f855 	bl	2f88 <timestamp_print>
   11ede:	4607      	mov	r7, r0
   11ee0:	e7e6      	b.n	11eb0 <prefix_print+0x1c>

00011ee2 <std_print>:
{
   11ee2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11ee6:	b08e      	sub	sp, #56	; 0x38
   11ee8:	af0e      	add	r7, sp, #56	; 0x38
   11eea:	4606      	mov	r6, r0
   11eec:	4689      	mov	r9, r1
	const char *str = log_msg_str_get(msg);
   11eee:	f7ff ff4a 	bl	11d86 <log_msg_str_get>
   11ef2:	4682      	mov	sl, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   11ef4:	4630      	mov	r0, r6
   11ef6:	f7ff ff31 	bl	11d5c <log_msg_nargs_get>
   11efa:	4680      	mov	r8, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   11efc:	0083      	lsls	r3, r0, #2
   11efe:	3307      	adds	r3, #7
   11f00:	f023 0307 	bic.w	r3, r3, #7
   11f04:	ebad 0d03 	sub.w	sp, sp, r3
   11f08:	ad0e      	add	r5, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   11f0a:	2400      	movs	r4, #0
   11f0c:	4544      	cmp	r4, r8
   11f0e:	d207      	bcs.n	11f20 <std_print+0x3e>
		args[i] = log_msg_arg_get(msg, i);
   11f10:	4621      	mov	r1, r4
   11f12:	4630      	mov	r0, r6
   11f14:	f7ff ff25 	bl	11d62 <log_msg_arg_get>
   11f18:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	for (i = 0; i < nargs; i++) {
   11f1c:	3401      	adds	r4, #1
   11f1e:	e7f5      	b.n	11f0c <std_print+0x2a>
	switch (log_msg_nargs_get(msg)) {
   11f20:	4630      	mov	r0, r6
   11f22:	f7ff ff1b 	bl	11d5c <log_msg_nargs_get>
   11f26:	280f      	cmp	r0, #15
   11f28:	d815      	bhi.n	11f56 <std_print+0x74>
   11f2a:	e8df f010 	tbh	[pc, r0, lsl #1]
   11f2e:	0010      	.short	0x0010
   11f30:	001d0017 	.word	0x001d0017
   11f34:	002d0024 	.word	0x002d0024
   11f38:	00450038 	.word	0x00450038
   11f3c:	00650054 	.word	0x00650054
   11f40:	008d0078 	.word	0x008d0078
   11f44:	00bd00a4 	.word	0x00bd00a4
   11f48:	00f500d8 	.word	0x00f500d8
   11f4c:	0114      	.short	0x0114
		print_formatted(output, str);
   11f4e:	4651      	mov	r1, sl
   11f50:	4648      	mov	r0, r9
   11f52:	f7f1 f807 	bl	2f64 <print_formatted>
}
   11f56:	46bd      	mov	sp, r7
   11f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   11f5c:	682a      	ldr	r2, [r5, #0]
   11f5e:	4651      	mov	r1, sl
   11f60:	4648      	mov	r0, r9
   11f62:	f7f0 ffff 	bl	2f64 <print_formatted>
		break;
   11f66:	e7f6      	b.n	11f56 <std_print+0x74>
		print_formatted(output, str, args[0], args[1]);
   11f68:	686b      	ldr	r3, [r5, #4]
   11f6a:	682a      	ldr	r2, [r5, #0]
   11f6c:	4651      	mov	r1, sl
   11f6e:	4648      	mov	r0, r9
   11f70:	f7f0 fff8 	bl	2f64 <print_formatted>
		break;
   11f74:	e7ef      	b.n	11f56 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2]);
   11f76:	686b      	ldr	r3, [r5, #4]
   11f78:	682a      	ldr	r2, [r5, #0]
   11f7a:	68a9      	ldr	r1, [r5, #8]
   11f7c:	9100      	str	r1, [sp, #0]
   11f7e:	4651      	mov	r1, sl
   11f80:	4648      	mov	r0, r9
   11f82:	f7f0 ffef 	bl	2f64 <print_formatted>
		break;
   11f86:	e7e6      	b.n	11f56 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   11f88:	686b      	ldr	r3, [r5, #4]
   11f8a:	682a      	ldr	r2, [r5, #0]
   11f8c:	68e9      	ldr	r1, [r5, #12]
   11f8e:	9101      	str	r1, [sp, #4]
   11f90:	68a9      	ldr	r1, [r5, #8]
   11f92:	9100      	str	r1, [sp, #0]
   11f94:	4651      	mov	r1, sl
   11f96:	4648      	mov	r0, r9
   11f98:	f7f0 ffe4 	bl	2f64 <print_formatted>
		break;
   11f9c:	e7db      	b.n	11f56 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   11f9e:	686b      	ldr	r3, [r5, #4]
   11fa0:	682a      	ldr	r2, [r5, #0]
   11fa2:	6929      	ldr	r1, [r5, #16]
   11fa4:	9102      	str	r1, [sp, #8]
   11fa6:	68e9      	ldr	r1, [r5, #12]
   11fa8:	9101      	str	r1, [sp, #4]
   11faa:	68a9      	ldr	r1, [r5, #8]
   11fac:	9100      	str	r1, [sp, #0]
   11fae:	4651      	mov	r1, sl
   11fb0:	4648      	mov	r0, r9
   11fb2:	f7f0 ffd7 	bl	2f64 <print_formatted>
		break;
   11fb6:	e7ce      	b.n	11f56 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   11fb8:	686b      	ldr	r3, [r5, #4]
   11fba:	682a      	ldr	r2, [r5, #0]
   11fbc:	6969      	ldr	r1, [r5, #20]
   11fbe:	9103      	str	r1, [sp, #12]
   11fc0:	6929      	ldr	r1, [r5, #16]
   11fc2:	9102      	str	r1, [sp, #8]
   11fc4:	68e9      	ldr	r1, [r5, #12]
   11fc6:	9101      	str	r1, [sp, #4]
   11fc8:	68a9      	ldr	r1, [r5, #8]
   11fca:	9100      	str	r1, [sp, #0]
   11fcc:	4651      	mov	r1, sl
   11fce:	4648      	mov	r0, r9
   11fd0:	f7f0 ffc8 	bl	2f64 <print_formatted>
		break;
   11fd4:	e7bf      	b.n	11f56 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   11fd6:	686b      	ldr	r3, [r5, #4]
   11fd8:	682a      	ldr	r2, [r5, #0]
   11fda:	69a9      	ldr	r1, [r5, #24]
   11fdc:	9104      	str	r1, [sp, #16]
   11fde:	6969      	ldr	r1, [r5, #20]
   11fe0:	9103      	str	r1, [sp, #12]
   11fe2:	6929      	ldr	r1, [r5, #16]
   11fe4:	9102      	str	r1, [sp, #8]
   11fe6:	68e9      	ldr	r1, [r5, #12]
   11fe8:	9101      	str	r1, [sp, #4]
   11fea:	68a9      	ldr	r1, [r5, #8]
   11fec:	9100      	str	r1, [sp, #0]
   11fee:	4651      	mov	r1, sl
   11ff0:	4648      	mov	r0, r9
   11ff2:	f7f0 ffb7 	bl	2f64 <print_formatted>
		break;
   11ff6:	e7ae      	b.n	11f56 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   11ff8:	686b      	ldr	r3, [r5, #4]
   11ffa:	682a      	ldr	r2, [r5, #0]
   11ffc:	69e9      	ldr	r1, [r5, #28]
   11ffe:	9105      	str	r1, [sp, #20]
   12000:	69a9      	ldr	r1, [r5, #24]
   12002:	9104      	str	r1, [sp, #16]
   12004:	6969      	ldr	r1, [r5, #20]
   12006:	9103      	str	r1, [sp, #12]
   12008:	6929      	ldr	r1, [r5, #16]
   1200a:	9102      	str	r1, [sp, #8]
   1200c:	68e9      	ldr	r1, [r5, #12]
   1200e:	9101      	str	r1, [sp, #4]
   12010:	68a9      	ldr	r1, [r5, #8]
   12012:	9100      	str	r1, [sp, #0]
   12014:	4651      	mov	r1, sl
   12016:	4648      	mov	r0, r9
   12018:	f7f0 ffa4 	bl	2f64 <print_formatted>
		break;
   1201c:	e79b      	b.n	11f56 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   1201e:	686b      	ldr	r3, [r5, #4]
   12020:	682a      	ldr	r2, [r5, #0]
   12022:	6a29      	ldr	r1, [r5, #32]
   12024:	9106      	str	r1, [sp, #24]
   12026:	69e9      	ldr	r1, [r5, #28]
   12028:	9105      	str	r1, [sp, #20]
   1202a:	69a9      	ldr	r1, [r5, #24]
   1202c:	9104      	str	r1, [sp, #16]
   1202e:	6969      	ldr	r1, [r5, #20]
   12030:	9103      	str	r1, [sp, #12]
   12032:	6929      	ldr	r1, [r5, #16]
   12034:	9102      	str	r1, [sp, #8]
   12036:	68e9      	ldr	r1, [r5, #12]
   12038:	9101      	str	r1, [sp, #4]
   1203a:	68a9      	ldr	r1, [r5, #8]
   1203c:	9100      	str	r1, [sp, #0]
   1203e:	4651      	mov	r1, sl
   12040:	4648      	mov	r0, r9
   12042:	f7f0 ff8f 	bl	2f64 <print_formatted>
		break;
   12046:	e786      	b.n	11f56 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   12048:	686b      	ldr	r3, [r5, #4]
   1204a:	682a      	ldr	r2, [r5, #0]
   1204c:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1204e:	9107      	str	r1, [sp, #28]
   12050:	6a29      	ldr	r1, [r5, #32]
   12052:	9106      	str	r1, [sp, #24]
   12054:	69e9      	ldr	r1, [r5, #28]
   12056:	9105      	str	r1, [sp, #20]
   12058:	69a9      	ldr	r1, [r5, #24]
   1205a:	9104      	str	r1, [sp, #16]
   1205c:	6969      	ldr	r1, [r5, #20]
   1205e:	9103      	str	r1, [sp, #12]
   12060:	6929      	ldr	r1, [r5, #16]
   12062:	9102      	str	r1, [sp, #8]
   12064:	68e9      	ldr	r1, [r5, #12]
   12066:	9101      	str	r1, [sp, #4]
   12068:	68a9      	ldr	r1, [r5, #8]
   1206a:	9100      	str	r1, [sp, #0]
   1206c:	4651      	mov	r1, sl
   1206e:	4648      	mov	r0, r9
   12070:	f7f0 ff78 	bl	2f64 <print_formatted>
		break;
   12074:	e76f      	b.n	11f56 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   12076:	686b      	ldr	r3, [r5, #4]
   12078:	682a      	ldr	r2, [r5, #0]
   1207a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   1207c:	9108      	str	r1, [sp, #32]
   1207e:	6a69      	ldr	r1, [r5, #36]	; 0x24
   12080:	9107      	str	r1, [sp, #28]
   12082:	6a29      	ldr	r1, [r5, #32]
   12084:	9106      	str	r1, [sp, #24]
   12086:	69e9      	ldr	r1, [r5, #28]
   12088:	9105      	str	r1, [sp, #20]
   1208a:	69a9      	ldr	r1, [r5, #24]
   1208c:	9104      	str	r1, [sp, #16]
   1208e:	6969      	ldr	r1, [r5, #20]
   12090:	9103      	str	r1, [sp, #12]
   12092:	6929      	ldr	r1, [r5, #16]
   12094:	9102      	str	r1, [sp, #8]
   12096:	68e9      	ldr	r1, [r5, #12]
   12098:	9101      	str	r1, [sp, #4]
   1209a:	68a9      	ldr	r1, [r5, #8]
   1209c:	9100      	str	r1, [sp, #0]
   1209e:	4651      	mov	r1, sl
   120a0:	4648      	mov	r0, r9
   120a2:	f7f0 ff5f 	bl	2f64 <print_formatted>
		break;
   120a6:	e756      	b.n	11f56 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   120a8:	686b      	ldr	r3, [r5, #4]
   120aa:	682a      	ldr	r2, [r5, #0]
   120ac:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   120ae:	9109      	str	r1, [sp, #36]	; 0x24
   120b0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   120b2:	9108      	str	r1, [sp, #32]
   120b4:	6a69      	ldr	r1, [r5, #36]	; 0x24
   120b6:	9107      	str	r1, [sp, #28]
   120b8:	6a29      	ldr	r1, [r5, #32]
   120ba:	9106      	str	r1, [sp, #24]
   120bc:	69e9      	ldr	r1, [r5, #28]
   120be:	9105      	str	r1, [sp, #20]
   120c0:	69a9      	ldr	r1, [r5, #24]
   120c2:	9104      	str	r1, [sp, #16]
   120c4:	6969      	ldr	r1, [r5, #20]
   120c6:	9103      	str	r1, [sp, #12]
   120c8:	6929      	ldr	r1, [r5, #16]
   120ca:	9102      	str	r1, [sp, #8]
   120cc:	68e9      	ldr	r1, [r5, #12]
   120ce:	9101      	str	r1, [sp, #4]
   120d0:	68a9      	ldr	r1, [r5, #8]
   120d2:	9100      	str	r1, [sp, #0]
   120d4:	4651      	mov	r1, sl
   120d6:	4648      	mov	r0, r9
   120d8:	f7f0 ff44 	bl	2f64 <print_formatted>
		break;
   120dc:	e73b      	b.n	11f56 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   120de:	686b      	ldr	r3, [r5, #4]
   120e0:	682a      	ldr	r2, [r5, #0]
   120e2:	6b29      	ldr	r1, [r5, #48]	; 0x30
   120e4:	910a      	str	r1, [sp, #40]	; 0x28
   120e6:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   120e8:	9109      	str	r1, [sp, #36]	; 0x24
   120ea:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   120ec:	9108      	str	r1, [sp, #32]
   120ee:	6a69      	ldr	r1, [r5, #36]	; 0x24
   120f0:	9107      	str	r1, [sp, #28]
   120f2:	6a29      	ldr	r1, [r5, #32]
   120f4:	9106      	str	r1, [sp, #24]
   120f6:	69e9      	ldr	r1, [r5, #28]
   120f8:	9105      	str	r1, [sp, #20]
   120fa:	69a9      	ldr	r1, [r5, #24]
   120fc:	9104      	str	r1, [sp, #16]
   120fe:	6969      	ldr	r1, [r5, #20]
   12100:	9103      	str	r1, [sp, #12]
   12102:	6929      	ldr	r1, [r5, #16]
   12104:	9102      	str	r1, [sp, #8]
   12106:	68e9      	ldr	r1, [r5, #12]
   12108:	9101      	str	r1, [sp, #4]
   1210a:	68a9      	ldr	r1, [r5, #8]
   1210c:	9100      	str	r1, [sp, #0]
   1210e:	4651      	mov	r1, sl
   12110:	4648      	mov	r0, r9
   12112:	f7f0 ff27 	bl	2f64 <print_formatted>
		break;
   12116:	e71e      	b.n	11f56 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   12118:	686b      	ldr	r3, [r5, #4]
   1211a:	682a      	ldr	r2, [r5, #0]
   1211c:	6b69      	ldr	r1, [r5, #52]	; 0x34
   1211e:	910b      	str	r1, [sp, #44]	; 0x2c
   12120:	6b29      	ldr	r1, [r5, #48]	; 0x30
   12122:	910a      	str	r1, [sp, #40]	; 0x28
   12124:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   12126:	9109      	str	r1, [sp, #36]	; 0x24
   12128:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   1212a:	9108      	str	r1, [sp, #32]
   1212c:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1212e:	9107      	str	r1, [sp, #28]
   12130:	6a29      	ldr	r1, [r5, #32]
   12132:	9106      	str	r1, [sp, #24]
   12134:	69e9      	ldr	r1, [r5, #28]
   12136:	9105      	str	r1, [sp, #20]
   12138:	69a9      	ldr	r1, [r5, #24]
   1213a:	9104      	str	r1, [sp, #16]
   1213c:	6969      	ldr	r1, [r5, #20]
   1213e:	9103      	str	r1, [sp, #12]
   12140:	6929      	ldr	r1, [r5, #16]
   12142:	9102      	str	r1, [sp, #8]
   12144:	68e9      	ldr	r1, [r5, #12]
   12146:	9101      	str	r1, [sp, #4]
   12148:	68a9      	ldr	r1, [r5, #8]
   1214a:	9100      	str	r1, [sp, #0]
   1214c:	4651      	mov	r1, sl
   1214e:	4648      	mov	r0, r9
   12150:	f7f0 ff08 	bl	2f64 <print_formatted>
		break;
   12154:	e6ff      	b.n	11f56 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   12156:	686b      	ldr	r3, [r5, #4]
   12158:	682a      	ldr	r2, [r5, #0]
   1215a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   1215c:	910c      	str	r1, [sp, #48]	; 0x30
   1215e:	6b69      	ldr	r1, [r5, #52]	; 0x34
   12160:	910b      	str	r1, [sp, #44]	; 0x2c
   12162:	6b29      	ldr	r1, [r5, #48]	; 0x30
   12164:	910a      	str	r1, [sp, #40]	; 0x28
   12166:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   12168:	9109      	str	r1, [sp, #36]	; 0x24
   1216a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   1216c:	9108      	str	r1, [sp, #32]
   1216e:	6a69      	ldr	r1, [r5, #36]	; 0x24
   12170:	9107      	str	r1, [sp, #28]
   12172:	6a29      	ldr	r1, [r5, #32]
   12174:	9106      	str	r1, [sp, #24]
   12176:	69e9      	ldr	r1, [r5, #28]
   12178:	9105      	str	r1, [sp, #20]
   1217a:	69a9      	ldr	r1, [r5, #24]
   1217c:	9104      	str	r1, [sp, #16]
   1217e:	6969      	ldr	r1, [r5, #20]
   12180:	9103      	str	r1, [sp, #12]
   12182:	6929      	ldr	r1, [r5, #16]
   12184:	9102      	str	r1, [sp, #8]
   12186:	68e9      	ldr	r1, [r5, #12]
   12188:	9101      	str	r1, [sp, #4]
   1218a:	68a9      	ldr	r1, [r5, #8]
   1218c:	9100      	str	r1, [sp, #0]
   1218e:	4651      	mov	r1, sl
   12190:	4648      	mov	r0, r9
   12192:	f7f0 fee7 	bl	2f64 <print_formatted>
}
   12196:	e6de      	b.n	11f56 <std_print+0x74>

00012198 <log_output_flush>:
{
   12198:	b510      	push	{r4, lr}
   1219a:	4604      	mov	r4, r0
		     output->control_block->offset,
   1219c:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   1219e:	6853      	ldr	r3, [r2, #4]
   121a0:	6812      	ldr	r2, [r2, #0]
   121a2:	6881      	ldr	r1, [r0, #8]
   121a4:	6800      	ldr	r0, [r0, #0]
   121a6:	f7ff fe50 	bl	11e4a <buffer_write>
	output->control_block->offset = 0;
   121aa:	6863      	ldr	r3, [r4, #4]
   121ac:	2200      	movs	r2, #0
   121ae:	601a      	str	r2, [r3, #0]
}
   121b0:	bd10      	pop	{r4, pc}

000121b2 <out_func>:
{
   121b2:	b538      	push	{r3, r4, r5, lr}
   121b4:	4605      	mov	r5, r0
   121b6:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   121b8:	684b      	ldr	r3, [r1, #4]
   121ba:	681a      	ldr	r2, [r3, #0]
   121bc:	68cb      	ldr	r3, [r1, #12]
   121be:	429a      	cmp	r2, r3
   121c0:	d00f      	beq.n	121e2 <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
   121c2:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   121c4:	f3bf 8f5b 	dmb	ish
   121c8:	e853 2f00 	ldrex	r2, [r3]
   121cc:	1c51      	adds	r1, r2, #1
   121ce:	e843 1000 	strex	r0, r1, [r3]
   121d2:	2800      	cmp	r0, #0
   121d4:	d1f8      	bne.n	121c8 <out_func+0x16>
   121d6:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   121da:	68a3      	ldr	r3, [r4, #8]
   121dc:	549d      	strb	r5, [r3, r2]
}
   121de:	2000      	movs	r0, #0
   121e0:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
   121e2:	4608      	mov	r0, r1
   121e4:	f7ff ffd8 	bl	12198 <log_output_flush>
   121e8:	e7eb      	b.n	121c2 <out_func+0x10>

000121ea <log_output_msg_process>:
{
   121ea:	b5f0      	push	{r4, r5, r6, r7, lr}
   121ec:	b085      	sub	sp, #20
   121ee:	4606      	mov	r6, r0
   121f0:	460c      	mov	r4, r1
   121f2:	4617      	mov	r7, r2
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   121f4:	7a0b      	ldrb	r3, [r1, #8]
   121f6:	f083 0301 	eor.w	r3, r3, #1
   121fa:	f003 0201 	and.w	r2, r3, #1
	return msg->hdr.timestamp;
   121fe:	68cb      	ldr	r3, [r1, #12]
	return msg->hdr.ids.level;
   12200:	7a89      	ldrb	r1, [r1, #10]
	return msg->hdr.ids.domain_id;
   12202:	f3c1 0cc2 	ubfx	ip, r1, #3, #3
	return msg->hdr.ids.source_id;
   12206:	8960      	ldrh	r0, [r4, #10]
	int16_t source_id = (int16_t)log_msg_source_id_get(msg);
   12208:	f3c0 1089 	ubfx	r0, r0, #6, #10
			0 : prefix_print(output, flags, std_msg, timestamp,
   1220c:	f011 0507 	ands.w	r5, r1, #7
   12210:	d10f      	bne.n	12232 <log_output_msg_process+0x48>
   12212:	2200      	movs	r2, #0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   12214:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg)) {
   12216:	f013 0f01 	tst.w	r3, #1
   1221a:	d014      	beq.n	12246 <log_output_msg_process+0x5c>
	} else if (raw_string) {
   1221c:	b9c5      	cbnz	r5, 12250 <log_output_msg_process+0x66>
		raw_string_print(msg, output);
   1221e:	4631      	mov	r1, r6
   12220:	4620      	mov	r0, r4
   12222:	f7f0 ffdf 	bl	31e4 <raw_string_print>
	if (!raw_string) {
   12226:	b9cd      	cbnz	r5, 1225c <log_output_msg_process+0x72>
	log_output_flush(output);
   12228:	4630      	mov	r0, r6
   1222a:	f7ff ffb5 	bl	12198 <log_output_flush>
}
   1222e:	b005      	add	sp, #20
   12230:	bdf0      	pop	{r4, r5, r6, r7, pc}
			0 : prefix_print(output, flags, std_msg, timestamp,
   12232:	9002      	str	r0, [sp, #8]
   12234:	f8cd c004 	str.w	ip, [sp, #4]
   12238:	9500      	str	r5, [sp, #0]
   1223a:	4639      	mov	r1, r7
   1223c:	4630      	mov	r0, r6
   1223e:	f7ff fe29 	bl	11e94 <prefix_print>
   12242:	4602      	mov	r2, r0
   12244:	e7e6      	b.n	12214 <log_output_msg_process+0x2a>
		std_print(msg, output);
   12246:	4631      	mov	r1, r6
   12248:	4620      	mov	r0, r4
   1224a:	f7ff fe4a 	bl	11ee2 <std_print>
   1224e:	e7ea      	b.n	12226 <log_output_msg_process+0x3c>
		hexdump_print(msg, output, prefix_offset, flags);
   12250:	463b      	mov	r3, r7
   12252:	4631      	mov	r1, r6
   12254:	4620      	mov	r0, r4
   12256:	f7f0 ff9b 	bl	3190 <hexdump_print>
   1225a:	e7e4      	b.n	12226 <log_output_msg_process+0x3c>
		postfix_print(output, flags, level);
   1225c:	462a      	mov	r2, r5
   1225e:	4639      	mov	r1, r7
   12260:	4630      	mov	r0, r6
   12262:	f7ff fe0b 	bl	11e7c <postfix_print>
   12266:	e7df      	b.n	12228 <log_output_msg_process+0x3e>

00012268 <usb_get_status>:
	uint8_t *data = *data_buf;
   12268:	6813      	ldr	r3, [r2, #0]
	data[1] = 0U;
   1226a:	2200      	movs	r2, #0
   1226c:	705a      	strb	r2, [r3, #1]
		data[0] |= USB_GET_STATUS_SELF_POWERED;
   1226e:	2001      	movs	r0, #1
   12270:	7018      	strb	r0, [r3, #0]
	*len = 2;
   12272:	2302      	movs	r3, #2
   12274:	600b      	str	r3, [r1, #0]
}
   12276:	4770      	bx	lr

00012278 <usb_vbus_set>:
}
   12278:	2000      	movs	r0, #0
   1227a:	4770      	bx	lr

0001227c <usb_eps_reconfigure>:
{
   1227c:	b508      	push	{r3, lr}
	if (cur_alt_setting != alt_setting) {
   1227e:	4291      	cmp	r1, r2
   12280:	d002      	beq.n	12288 <usb_eps_reconfigure+0xc>
		ret = reset_endpoint(ep_desc);
   12282:	f7f1 fbb7 	bl	39f4 <reset_endpoint>
}
   12286:	bd08      	pop	{r3, pc}
		ret = set_endpoint(ep_desc);
   12288:	f7f1 fad8 	bl	383c <set_endpoint>
   1228c:	e7fb      	b.n	12286 <usb_eps_reconfigure+0xa>

0001228e <usb_handle_std_interface_req>:
{
   1228e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12290:	4604      	mov	r4, r0
   12292:	460e      	mov	r6, r1
   12294:	4615      	mov	r5, r2
	uint8_t *data = *data_buf;
   12296:	6817      	ldr	r7, [r2, #0]
	if (!is_device_configured() ||
   12298:	f7f1 f976 	bl	3588 <is_device_configured>
   1229c:	b900      	cbnz	r0, 122a0 <usb_handle_std_interface_req+0x12>
}
   1229e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
   122a0:	7920      	ldrb	r0, [r4, #4]
   122a2:	f7f1 f97b 	bl	359c <is_interface_valid>
	if (!is_device_configured() ||
   122a6:	2800      	cmp	r0, #0
   122a8:	d0f9      	beq.n	1229e <usb_handle_std_interface_req+0x10>
	if (usb_reqtype_is_to_host(setup)) {
   122aa:	f994 3000 	ldrsb.w	r3, [r4]
   122ae:	2b00      	cmp	r3, #0
   122b0:	db04      	blt.n	122bc <usb_handle_std_interface_req+0x2e>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
   122b2:	7863      	ldrb	r3, [r4, #1]
   122b4:	2b0b      	cmp	r3, #11
   122b6:	d013      	beq.n	122e0 <usb_handle_std_interface_req+0x52>
	return false;
   122b8:	2000      	movs	r0, #0
   122ba:	e7f0      	b.n	1229e <usb_handle_std_interface_req+0x10>
		switch (setup->bRequest) {
   122bc:	7863      	ldrb	r3, [r4, #1]
   122be:	b11b      	cbz	r3, 122c8 <usb_handle_std_interface_req+0x3a>
   122c0:	2b0a      	cmp	r3, #10
   122c2:	d007      	beq.n	122d4 <usb_handle_std_interface_req+0x46>
   122c4:	2000      	movs	r0, #0
   122c6:	e7ea      	b.n	1229e <usb_handle_std_interface_req+0x10>
			data[0] = 0U;
   122c8:	2300      	movs	r3, #0
   122ca:	703b      	strb	r3, [r7, #0]
			data[1] = 0U;
   122cc:	707b      	strb	r3, [r7, #1]
			*len = 2;
   122ce:	2302      	movs	r3, #2
   122d0:	6033      	str	r3, [r6, #0]
			return true;
   122d2:	e7e4      	b.n	1229e <usb_handle_std_interface_req+0x10>
			return usb_get_interface(setup, len, data_buf);
   122d4:	462a      	mov	r2, r5
   122d6:	4631      	mov	r1, r6
   122d8:	4620      	mov	r0, r4
   122da:	f7f1 f937 	bl	354c <usb_get_interface>
   122de:	e7de      	b.n	1229e <usb_handle_std_interface_req+0x10>
			return usb_set_interface(setup);
   122e0:	4620      	mov	r0, r4
   122e2:	f7f1 fbb1 	bl	3a48 <usb_set_interface>
   122e6:	e7da      	b.n	1229e <usb_handle_std_interface_req+0x10>

000122e8 <disable_interface_ep>:
{
   122e8:	b508      	push	{r3, lr}
	return usb_dc_ep_disable(ep_data->ep_addr);
   122ea:	7900      	ldrb	r0, [r0, #4]
   122ec:	f7f5 fd82 	bl	7df4 <usb_dc_ep_disable>
}
   122f0:	bd08      	pop	{r3, pc}

000122f2 <usb_get_status_endpoint>:
{
   122f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   122f4:	460e      	mov	r6, r1
	uint8_t ep = setup->wIndex;
   122f6:	7904      	ldrb	r4, [r0, #4]
	uint8_t *data = *data_buf;
   122f8:	6817      	ldr	r7, [r2, #0]
	if (!is_ep_valid(ep)) {
   122fa:	4620      	mov	r0, r4
   122fc:	f7f1 f960 	bl	35c0 <is_ep_valid>
   12300:	4605      	mov	r5, r0
   12302:	b130      	cbz	r0, 12312 <usb_get_status_endpoint+0x20>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   12304:	f034 0380 	bics.w	r3, r4, #128	; 0x80
   12308:	d005      	beq.n	12316 <usb_get_status_endpoint+0x24>
   1230a:	f7f1 f93d 	bl	3588 <is_device_configured>
   1230e:	b910      	cbnz	r0, 12316 <usb_get_status_endpoint+0x24>
	return false;
   12310:	4605      	mov	r5, r0
}
   12312:	4628      	mov	r0, r5
   12314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_dc_ep_is_stalled(ep, &data[0]);
   12316:	4639      	mov	r1, r7
   12318:	4620      	mov	r0, r4
   1231a:	f7f5 fd19 	bl	7d50 <usb_dc_ep_is_stalled>
		data[1] = 0U;
   1231e:	2300      	movs	r3, #0
   12320:	707b      	strb	r3, [r7, #1]
		*len = 2;
   12322:	2302      	movs	r3, #2
   12324:	6033      	str	r3, [r6, #0]
		return true;
   12326:	e7f4      	b.n	12312 <usb_get_status_endpoint+0x20>

00012328 <usb_handle_std_endpoint_req>:
{
   12328:	b508      	push	{r3, lr}
	if (usb_reqtype_is_to_host(setup)) {
   1232a:	f990 3000 	ldrsb.w	r3, [r0]
   1232e:	2b00      	cmp	r3, #0
   12330:	db06      	blt.n	12340 <usb_handle_std_endpoint_req+0x18>
		switch (setup->bRequest) {
   12332:	7843      	ldrb	r3, [r0, #1]
   12334:	2b01      	cmp	r3, #1
   12336:	d00a      	beq.n	1234e <usb_handle_std_endpoint_req+0x26>
   12338:	2b03      	cmp	r3, #3
   1233a:	d010      	beq.n	1235e <usb_handle_std_endpoint_req+0x36>
   1233c:	2000      	movs	r0, #0
   1233e:	e002      	b.n	12346 <usb_handle_std_endpoint_req+0x1e>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
   12340:	7843      	ldrb	r3, [r0, #1]
   12342:	b10b      	cbz	r3, 12348 <usb_handle_std_endpoint_req+0x20>
	return false;
   12344:	2000      	movs	r0, #0
}
   12346:	bd08      	pop	{r3, pc}
			return usb_get_status_endpoint(setup, len, data_buf);
   12348:	f7ff ffd3 	bl	122f2 <usb_get_status_endpoint>
   1234c:	e7fb      	b.n	12346 <usb_handle_std_endpoint_req+0x1e>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   1234e:	8843      	ldrh	r3, [r0, #2]
   12350:	b10b      	cbz	r3, 12356 <usb_handle_std_endpoint_req+0x2e>
	return false;
   12352:	2000      	movs	r0, #0
   12354:	e7f7      	b.n	12346 <usb_handle_std_endpoint_req+0x1e>
				return usb_halt_endpoint_req(setup, false);
   12356:	2100      	movs	r1, #0
   12358:	f7f1 fa40 	bl	37dc <usb_halt_endpoint_req>
   1235c:	e7f3      	b.n	12346 <usb_handle_std_endpoint_req+0x1e>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   1235e:	8843      	ldrh	r3, [r0, #2]
   12360:	b10b      	cbz	r3, 12366 <usb_handle_std_endpoint_req+0x3e>
	return false;
   12362:	2000      	movs	r0, #0
   12364:	e7ef      	b.n	12346 <usb_handle_std_endpoint_req+0x1e>
				return usb_halt_endpoint_req(setup, true);
   12366:	2101      	movs	r1, #1
   12368:	f7f1 fa38 	bl	37dc <usb_halt_endpoint_req>
   1236c:	e7eb      	b.n	12346 <usb_handle_std_endpoint_req+0x1e>

0001236e <usb_write>:
{
   1236e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12372:	4681      	mov	r9, r0
   12374:	4688      	mov	r8, r1
   12376:	4617      	mov	r7, r2
   12378:	461e      	mov	r6, r3
	int tries = CONFIG_USB_NUMOF_EP_WRITE_RETRIES;
   1237a:	2503      	movs	r5, #3
   1237c:	e000      	b.n	12380 <usb_write+0x12>
	} while (ret == -EAGAIN && tries--);
   1237e:	461d      	mov	r5, r3
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   12380:	4633      	mov	r3, r6
   12382:	463a      	mov	r2, r7
   12384:	4641      	mov	r1, r8
   12386:	4648      	mov	r0, r9
   12388:	f7f5 fd5e 	bl	7e48 <usb_dc_ep_write>
   1238c:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
   1238e:	f110 0f0b 	cmn.w	r0, #11
   12392:	d008      	beq.n	123a6 <usb_write+0x38>
	} while (ret == -EAGAIN && tries--);
   12394:	f114 0f0b 	cmn.w	r4, #11
   12398:	d102      	bne.n	123a0 <usb_write+0x32>
   1239a:	1e6b      	subs	r3, r5, #1
   1239c:	2d00      	cmp	r5, #0
   1239e:	d1ee      	bne.n	1237e <usb_write+0x10>
}
   123a0:	4620      	mov	r0, r4
   123a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_impl_k_yield();
   123a6:	f7fd ff01 	bl	101ac <z_impl_k_yield>
}
   123aa:	e7f3      	b.n	12394 <usb_write+0x26>

000123ac <ascii7_to_utf16le>:
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
   123ac:	f810 2b02 	ldrb.w	r2, [r0], #2
   123b0:	1ed3      	subs	r3, r2, #3
	int ascii_idx_max = USB_BSTRING_ASCII_IDX_MAX(str_descr->bLength);
   123b2:	0852      	lsrs	r2, r2, #1
   123b4:	3a02      	subs	r2, #2
	for (int i = idx_max; i >= 0; i -= 2) {
   123b6:	2b00      	cmp	r3, #0
   123b8:	db0b      	blt.n	123d2 <ascii7_to_utf16le+0x26>
{
   123ba:	b410      	push	{r4}
		buf[i] = 0U;
   123bc:	2100      	movs	r1, #0
   123be:	54c1      	strb	r1, [r0, r3]
		buf[i - 1] = buf[ascii_idx_max--];
   123c0:	1e59      	subs	r1, r3, #1
   123c2:	5c84      	ldrb	r4, [r0, r2]
   123c4:	5444      	strb	r4, [r0, r1]
	for (int i = idx_max; i >= 0; i -= 2) {
   123c6:	3b02      	subs	r3, #2
		buf[i - 1] = buf[ascii_idx_max--];
   123c8:	3a01      	subs	r2, #1
	for (int i = idx_max; i >= 0; i -= 2) {
   123ca:	2b00      	cmp	r3, #0
   123cc:	daf6      	bge.n	123bc <ascii7_to_utf16le+0x10>
}
   123ce:	bc10      	pop	{r4}
   123d0:	4770      	bx	lr
   123d2:	4770      	bx	lr

000123d4 <usb_validate_ep_cfg_data>:
{
   123d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   123d8:	b083      	sub	sp, #12
   123da:	4605      	mov	r5, r0
   123dc:	4689      	mov	r9, r1
   123de:	4690      	mov	r8, r2
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   123e0:	2700      	movs	r7, #0
   123e2:	e04a      	b.n	1247a <usb_validate_ep_cfg_data+0xa6>
				if ((*requested_ep & (1U << (idx + 16U)))) {
   123e4:	f8d8 2000 	ldr.w	r2, [r8]
   123e8:	f104 0110 	add.w	r1, r4, #16
   123ec:	2301      	movs	r3, #1
   123ee:	408b      	lsls	r3, r1
   123f0:	421a      	tst	r2, r3
   123f2:	d108      	bne.n	12406 <usb_validate_ep_cfg_data+0x32>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
   123f4:	f064 037f 	orn	r3, r4, #127	; 0x7f
   123f8:	f88d 3000 	strb.w	r3, [sp]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
   123fc:	4668      	mov	r0, sp
   123fe:	f7f5 fbb9 	bl	7b74 <usb_dc_ep_check_cap>
   12402:	4603      	mov	r3, r0
   12404:	b1d0      	cbz	r0, 1243c <usb_validate_ep_cfg_data+0x68>
		for (uint8_t idx = 1; idx < 16U; idx++) {
   12406:	3401      	adds	r4, #1
   12408:	b2e4      	uxtb	r4, r4
   1240a:	2c0f      	cmp	r4, #15
   1240c:	d834      	bhi.n	12478 <usb_validate_ep_cfg_data+0xa4>
			ep_cfg.ep_type = (ep_descr->bmAttributes &
   1240e:	78eb      	ldrb	r3, [r5, #3]
   12410:	f003 0303 	and.w	r3, r3, #3
   12414:	f88d 3004 	strb.w	r3, [sp, #4]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
   12418:	88ab      	ldrh	r3, [r5, #4]
   1241a:	f8ad 3002 	strh.w	r3, [sp, #2]
			ep_cfg.ep_addr = ep_descr->bEndpointAddress;
   1241e:	78ab      	ldrb	r3, [r5, #2]
   12420:	f88d 3000 	strb.w	r3, [sp]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   12424:	f013 0f80 	tst.w	r3, #128	; 0x80
   12428:	d1dc      	bne.n	123e4 <usb_validate_ep_cfg_data+0x10>
				if ((*requested_ep & (1U << (idx)))) {
   1242a:	f8d8 2000 	ldr.w	r2, [r8]
   1242e:	2301      	movs	r3, #1
   12430:	40a3      	lsls	r3, r4
   12432:	421a      	tst	r2, r3
   12434:	d1e7      	bne.n	12406 <usb_validate_ep_cfg_data+0x32>
				ep_cfg.ep_addr = idx;
   12436:	f88d 4000 	strb.w	r4, [sp]
   1243a:	e7df      	b.n	123fc <usb_validate_ep_cfg_data+0x28>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
   1243c:	f89d 2000 	ldrb.w	r2, [sp]
   12440:	70aa      	strb	r2, [r5, #2]
				ep_data[i].ep_addr = ep_cfg.ep_addr;
   12442:	7132      	strb	r2, [r6, #4]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   12444:	f012 0f80 	tst.w	r2, #128	; 0x80
   12448:	d10b      	bne.n	12462 <usb_validate_ep_cfg_data+0x8e>
					*requested_ep |= (1U << idx);
   1244a:	2201      	movs	r2, #1
   1244c:	fa02 f404 	lsl.w	r4, r2, r4
   12450:	f8d8 2000 	ldr.w	r2, [r8]
   12454:	4322      	orrs	r2, r4
   12456:	f8c8 2000 	str.w	r2, [r8]
}
   1245a:	4618      	mov	r0, r3
   1245c:	b003      	add	sp, #12
   1245e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					*requested_ep |= (1U << (idx + 16U));
   12462:	f104 0110 	add.w	r1, r4, #16
   12466:	2201      	movs	r2, #1
   12468:	fa02 f101 	lsl.w	r1, r2, r1
   1246c:	f8d8 2000 	ldr.w	r2, [r8]
   12470:	430a      	orrs	r2, r1
   12472:	f8c8 2000 	str.w	r2, [r8]
   12476:	e7f0      	b.n	1245a <usb_validate_ep_cfg_data+0x86>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   12478:	3701      	adds	r7, #1
   1247a:	f899 301c 	ldrb.w	r3, [r9, #28]
   1247e:	429f      	cmp	r7, r3
   12480:	d209      	bcs.n	12496 <usb_validate_ep_cfg_data+0xc2>
		struct usb_ep_cfg_data *ep_data = cfg_data->endpoint;
   12482:	f8d9 6020 	ldr.w	r6, [r9, #32]
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
   12486:	78aa      	ldrb	r2, [r5, #2]
   12488:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
   1248c:	7933      	ldrb	r3, [r6, #4]
   1248e:	429a      	cmp	r2, r3
   12490:	d1f2      	bne.n	12478 <usb_validate_ep_cfg_data+0xa4>
		for (uint8_t idx = 1; idx < 16U; idx++) {
   12492:	2401      	movs	r4, #1
   12494:	e7b9      	b.n	1240a <usb_validate_ep_cfg_data+0x36>
	return -1;
   12496:	f04f 33ff 	mov.w	r3, #4294967295
   1249a:	e7de      	b.n	1245a <usb_validate_ep_cfg_data+0x86>

0001249c <usb_get_dev_data_by_cfg>:
	return list->head;
   1249c:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   1249e:	b110      	cbz	r0, 124a6 <usb_get_dev_data_by_cfg+0xa>
   124a0:	3804      	subs	r0, #4
   124a2:	e000      	b.n	124a6 <usb_get_dev_data_by_cfg+0xa>
   124a4:	3804      	subs	r0, #4
   124a6:	b140      	cbz	r0, 124ba <usb_get_dev_data_by_cfg+0x1e>
		const struct device *dev = dev_data->dev;
   124a8:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg_cur = dev->config;
   124aa:	685b      	ldr	r3, [r3, #4]

		if (cfg_cur == cfg) {
   124ac:	428b      	cmp	r3, r1
   124ae:	d004      	beq.n	124ba <usb_get_dev_data_by_cfg+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   124b0:	1d03      	adds	r3, r0, #4
   124b2:	d003      	beq.n	124bc <usb_get_dev_data_by_cfg+0x20>
	return node->next;
   124b4:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   124b6:	2800      	cmp	r0, #0
   124b8:	d1f4      	bne.n	124a4 <usb_get_dev_data_by_cfg+0x8>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
   124ba:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   124bc:	4618      	mov	r0, r3
   124be:	e7f2      	b.n	124a6 <usb_get_dev_data_by_cfg+0xa>

000124c0 <usb_get_dev_data_by_iface>:
	return list->head;
   124c0:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   124c2:	b110      	cbz	r0, 124ca <usb_get_dev_data_by_iface+0xa>
   124c4:	3804      	subs	r0, #4
   124c6:	e000      	b.n	124ca <usb_get_dev_data_by_iface+0xa>
   124c8:	3804      	subs	r0, #4
   124ca:	b150      	cbz	r0, 124e2 <usb_get_dev_data_by_iface+0x22>
		const struct device *dev = dev_data->dev;
   124cc:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg = dev->config;
   124ce:	685b      	ldr	r3, [r3, #4]
		const struct usb_if_descriptor *if_desc =
   124d0:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
   124d2:	789b      	ldrb	r3, [r3, #2]
   124d4:	428b      	cmp	r3, r1
   124d6:	d004      	beq.n	124e2 <usb_get_dev_data_by_iface+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   124d8:	1d03      	adds	r3, r0, #4
   124da:	d003      	beq.n	124e4 <usb_get_dev_data_by_iface+0x24>
	return node->next;
   124dc:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   124de:	2800      	cmp	r0, #0
   124e0:	d1f2      	bne.n	124c8 <usb_get_dev_data_by_iface+0x8>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
   124e2:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   124e4:	4618      	mov	r0, r3
   124e6:	e7f0      	b.n	124ca <usb_get_dev_data_by_iface+0xa>

000124e8 <usb_get_dev_data_by_ep>:
	return list->head;
   124e8:	6800      	ldr	r0, [r0, #0]

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   124ea:	b100      	cbz	r0, 124ee <usb_get_dev_data_by_ep+0x6>
   124ec:	3804      	subs	r0, #4
   124ee:	b1d0      	cbz	r0, 12526 <usb_get_dev_data_by_ep+0x3e>
{
   124f0:	b430      	push	{r4, r5}
   124f2:	e005      	b.n	12500 <usb_get_dev_data_by_ep+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   124f4:	1d03      	adds	r3, r0, #4
   124f6:	d012      	beq.n	1251e <usb_get_dev_data_by_ep+0x36>
	return node->next;
   124f8:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   124fa:	b190      	cbz	r0, 12522 <usb_get_dev_data_by_ep+0x3a>
   124fc:	3804      	subs	r0, #4
   124fe:	b180      	cbz	r0, 12522 <usb_get_dev_data_by_ep+0x3a>
		const struct device *dev = dev_data->dev;
   12500:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg = dev->config;
   12502:	685c      	ldr	r4, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
   12504:	6a25      	ldr	r5, [r4, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   12506:	2300      	movs	r3, #0
   12508:	7f22      	ldrb	r2, [r4, #28]
   1250a:	429a      	cmp	r2, r3
   1250c:	d9f2      	bls.n	124f4 <usb_get_dev_data_by_ep+0xc>
			if (ep_data[i].ep_addr == ep) {
   1250e:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
   12512:	7912      	ldrb	r2, [r2, #4]
   12514:	428a      	cmp	r2, r1
   12516:	d004      	beq.n	12522 <usb_get_dev_data_by_ep+0x3a>
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   12518:	3301      	adds	r3, #1
   1251a:	b2db      	uxtb	r3, r3
   1251c:	e7f4      	b.n	12508 <usb_get_dev_data_by_ep+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   1251e:	4618      	mov	r0, r3
   12520:	e7ed      	b.n	124fe <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
   12522:	bc30      	pop	{r4, r5}
   12524:	4770      	bx	lr
   12526:	4770      	bx	lr

00012528 <usb_transfer_is_busy>:
{
   12528:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
   1252a:	f7f1 fe77 	bl	421c <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
   1252e:	b128      	cbz	r0, 1253c <usb_transfer_is_busy+0x14>
   12530:	6843      	ldr	r3, [r0, #4]
   12532:	f113 0f10 	cmn.w	r3, #16
   12536:	d003      	beq.n	12540 <usb_transfer_is_busy+0x18>
	return false;
   12538:	2000      	movs	r0, #0
}
   1253a:	bd08      	pop	{r3, pc}
	return false;
   1253c:	2000      	movs	r0, #0
   1253e:	e7fc      	b.n	1253a <usb_transfer_is_busy+0x12>
		return true;
   12540:	2001      	movs	r0, #1
   12542:	e7fa      	b.n	1253a <usb_transfer_is_busy+0x12>

00012544 <cdc_interface_config>:
	desc->if0.bInterfaceNumber = bInterfaceNumber;
   12544:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
   12546:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
   12548:	1c4b      	adds	r3, r1, #1
   1254a:	b2db      	uxtb	r3, r3
   1254c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
   12550:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
   12552:	f800 1c06 	strb.w	r1, [r0, #-6]
}
   12556:	4770      	bx	lr

00012558 <cdc_acm_irq_callback_work_handler>:
{
   12558:	b508      	push	{r3, lr}
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
   1255a:	f850 3c08 	ldr.w	r3, [r0, #-8]
   1255e:	f850 1c04 	ldr.w	r1, [r0, #-4]
   12562:	6f80      	ldr	r0, [r0, #120]	; 0x78
   12564:	4798      	blx	r3
}
   12566:	bd08      	pop	{r3, pc}

00012568 <cdc_acm_irq_tx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   12568:	6903      	ldr	r3, [r0, #16]
	dev_data->tx_irq_ena = false;
   1256a:	2200      	movs	r2, #0
   1256c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
   12570:	4770      	bx	lr

00012572 <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   12572:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
   12574:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
   12578:	b122      	cbz	r2, 12584 <cdc_acm_irq_tx_ready+0x12>
   1257a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   1257e:	b91b      	cbnz	r3, 12588 <cdc_acm_irq_tx_ready+0x16>
	return 0;
   12580:	2000      	movs	r0, #0
   12582:	4770      	bx	lr
   12584:	2000      	movs	r0, #0
   12586:	4770      	bx	lr
		return 1;
   12588:	2001      	movs	r0, #1
}
   1258a:	4770      	bx	lr

0001258c <cdc_acm_irq_rx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   1258c:	6903      	ldr	r3, [r0, #16]
	dev_data->rx_irq_ena = false;
   1258e:	2200      	movs	r2, #0
   12590:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
   12594:	4770      	bx	lr

00012596 <cdc_acm_irq_rx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   12596:	6903      	ldr	r3, [r0, #16]
	if (dev_data->rx_ready) {
   12598:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
   1259c:	b90b      	cbnz	r3, 125a2 <cdc_acm_irq_rx_ready+0xc>
	return 0;
   1259e:	2000      	movs	r0, #0
   125a0:	4770      	bx	lr
		return 1;
   125a2:	2001      	movs	r0, #1
}
   125a4:	4770      	bx	lr

000125a6 <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   125a6:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
   125a8:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   125ac:	b112      	cbz	r2, 125b4 <cdc_acm_irq_is_pending+0xe>
   125ae:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
   125b2:	b93a      	cbnz	r2, 125c4 <cdc_acm_irq_is_pending+0x1e>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
   125b4:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
   125b8:	b132      	cbz	r2, 125c8 <cdc_acm_irq_is_pending+0x22>
   125ba:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
   125be:	b92b      	cbnz	r3, 125cc <cdc_acm_irq_is_pending+0x26>
		return 0;
   125c0:	2000      	movs	r0, #0
   125c2:	4770      	bx	lr
		return 1;
   125c4:	2001      	movs	r0, #1
   125c6:	4770      	bx	lr
		return 0;
   125c8:	2000      	movs	r0, #0
   125ca:	4770      	bx	lr
		return 1;
   125cc:	2001      	movs	r0, #1
}
   125ce:	4770      	bx	lr

000125d0 <cdc_acm_irq_update>:
}
   125d0:	2001      	movs	r0, #1
   125d2:	4770      	bx	lr

000125d4 <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   125d4:	6903      	ldr	r3, [r0, #16]
	dev_data->cb = cb;
   125d6:	6019      	str	r1, [r3, #0]
	dev_data->cb_data = cb_data;
   125d8:	605a      	str	r2, [r3, #4]
}
   125da:	4770      	bx	lr

000125dc <cdc_acm_baudrate_set>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   125dc:	6903      	ldr	r3, [r0, #16]
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
   125de:	6759      	str	r1, [r3, #116]	; 0x74
}
   125e0:	4770      	bx	lr

000125e2 <cdc_acm_line_ctrl_get>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   125e2:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
   125e4:	2902      	cmp	r1, #2
   125e6:	d00a      	beq.n	125fe <cdc_acm_line_ctrl_get+0x1c>
   125e8:	2904      	cmp	r1, #4
   125ea:	d00f      	beq.n	1260c <cdc_acm_line_ctrl_get+0x2a>
   125ec:	2901      	cmp	r1, #1
   125ee:	d002      	beq.n	125f6 <cdc_acm_line_ctrl_get+0x14>
   125f0:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   125f4:	4770      	bx	lr
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
   125f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   125f8:	6013      	str	r3, [r2, #0]
		return 0;
   125fa:	2000      	movs	r0, #0
   125fc:	4770      	bx	lr
		*val = (dev_data->line_state &
   125fe:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
   12602:	f3c3 0340 	ubfx	r3, r3, #1, #1
		*val = (dev_data->line_state &
   12606:	6013      	str	r3, [r2, #0]
		return 0;
   12608:	2000      	movs	r0, #0
   1260a:	4770      	bx	lr
		*val = (dev_data->line_state &
   1260c:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
   12610:	f003 0301 	and.w	r3, r3, #1
		*val = (dev_data->line_state &
   12614:	6013      	str	r3, [r2, #0]
		return 0;
   12616:	2000      	movs	r0, #0
   12618:	4770      	bx	lr

0001261a <cdc_acm_line_ctrl_set>:
{
   1261a:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   1261c:	6904      	ldr	r4, [r0, #16]
	switch (ctrl) {
   1261e:	2940      	cmp	r1, #64	; 0x40
   12620:	f000 8081 	beq.w	12726 <cdc_acm_line_ctrl_set+0x10c>
   12624:	d81b      	bhi.n	1265e <cdc_acm_line_ctrl_set+0x44>
   12626:	2920      	cmp	r1, #32
   12628:	f200 809f 	bhi.w	1276a <cdc_acm_line_ctrl_set+0x150>
   1262c:	2900      	cmp	r1, #0
   1262e:	f000 809f 	beq.w	12770 <cdc_acm_line_ctrl_set+0x156>
   12632:	1e4b      	subs	r3, r1, #1
   12634:	2b1f      	cmp	r3, #31
   12636:	f200 809e 	bhi.w	12776 <cdc_acm_line_ctrl_set+0x15c>
   1263a:	e8df f003 	tbb	[pc, r3]
   1263e:	9c3d      	.short	0x9c3d
   12640:	9c9c9c9c 	.word	0x9c9c9c9c
   12644:	9c9c429c 	.word	0x9c9c429c
   12648:	9c9c9c9c 	.word	0x9c9c9c9c
   1264c:	9c9c529c 	.word	0x9c9c529c
   12650:	9c9c9c9c 	.word	0x9c9c9c9c
   12654:	9c9c9c9c 	.word	0x9c9c9c9c
   12658:	9c9c9c9c 	.word	0x9c9c9c9c
   1265c:	639c      	.short	0x639c
   1265e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   12662:	d071      	beq.n	12748 <cdc_acm_line_ctrl_set+0x12e>
   12664:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   12668:	d110      	bne.n	1268c <cdc_acm_line_ctrl_set+0x72>
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
   1266a:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   1266e:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
   12672:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   12676:	b11a      	cbz	r2, 12680 <cdc_acm_line_ctrl_set+0x66>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
   12678:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1267c:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   12680:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
   12684:	f7f2 fa08 	bl	4a98 <cdc_acm_send_notification>
		return 0;
   12688:	2000      	movs	r0, #0
   1268a:	e019      	b.n	126c0 <cdc_acm_line_ctrl_set+0xa6>
	switch (ctrl) {
   1268c:	2980      	cmp	r1, #128	; 0x80
   1268e:	d110      	bne.n	126b2 <cdc_acm_line_ctrl_set+0x98>
		dev_data->serial_state &= ~SERIAL_STATE_FRAMING;
   12690:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   12694:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   12698:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   1269c:	b11a      	cbz	r2, 126a6 <cdc_acm_line_ctrl_set+0x8c>
			dev_data->serial_state |= SERIAL_STATE_FRAMING;
   1269e:	f043 0310 	orr.w	r3, r3, #16
   126a2:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   126a6:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
   126aa:	f7f2 f9f5 	bl	4a98 <cdc_acm_send_notification>
		return 0;
   126ae:	2000      	movs	r0, #0
   126b0:	e006      	b.n	126c0 <cdc_acm_line_ctrl_set+0xa6>
	switch (ctrl) {
   126b2:	f06f 0012 	mvn.w	r0, #18
   126b6:	e003      	b.n	126c0 <cdc_acm_line_ctrl_set+0xa6>
		cdc_acm_baudrate_set(dev, val);
   126b8:	4611      	mov	r1, r2
   126ba:	f7ff ff8f 	bl	125dc <cdc_acm_baudrate_set>
		return 0;
   126be:	2000      	movs	r0, #0
}
   126c0:	bd10      	pop	{r4, pc}
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
   126c2:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   126c6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   126ca:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   126ce:	b11a      	cbz	r2, 126d8 <cdc_acm_line_ctrl_set+0xbe>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
   126d0:	f043 0301 	orr.w	r3, r3, #1
   126d4:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
   126d8:	2101      	movs	r1, #1
   126da:	f7f2 f9dd 	bl	4a98 <cdc_acm_send_notification>
		return 0;
   126de:	2000      	movs	r0, #0
   126e0:	e7ee      	b.n	126c0 <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
   126e2:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   126e6:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   126ea:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   126ee:	b11a      	cbz	r2, 126f8 <cdc_acm_line_ctrl_set+0xde>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
   126f0:	f043 0302 	orr.w	r3, r3, #2
   126f4:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   126f8:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
   126fc:	f7f2 f9cc 	bl	4a98 <cdc_acm_send_notification>
		return 0;
   12700:	2000      	movs	r0, #0
   12702:	e7dd      	b.n	126c0 <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_BREAK;
   12704:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   12708:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   1270c:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   12710:	b11a      	cbz	r2, 1271a <cdc_acm_line_ctrl_set+0x100>
			dev_data->serial_state |= SERIAL_STATE_BREAK;
   12712:	f043 0304 	orr.w	r3, r3, #4
   12716:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   1271a:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
   1271e:	f7f2 f9bb 	bl	4a98 <cdc_acm_send_notification>
		return 0;
   12722:	2000      	movs	r0, #0
   12724:	e7cc      	b.n	126c0 <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_RING_SIGNAL;
   12726:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   1272a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   1272e:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   12732:	b11a      	cbz	r2, 1273c <cdc_acm_line_ctrl_set+0x122>
			dev_data->serial_state |= SERIAL_STATE_RING_SIGNAL;
   12734:	f043 0308 	orr.w	r3, r3, #8
   12738:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   1273c:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
   12740:	f7f2 f9aa 	bl	4a98 <cdc_acm_send_notification>
		return 0;
   12744:	2000      	movs	r0, #0
   12746:	e7bb      	b.n	126c0 <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_PARITY;
   12748:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   1274c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   12750:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   12754:	b11a      	cbz	r2, 1275e <cdc_acm_line_ctrl_set+0x144>
			dev_data->serial_state |= SERIAL_STATE_PARITY;
   12756:	f043 0320 	orr.w	r3, r3, #32
   1275a:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   1275e:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
   12762:	f7f2 f999 	bl	4a98 <cdc_acm_send_notification>
		return 0;
   12766:	2000      	movs	r0, #0
   12768:	e7aa      	b.n	126c0 <cdc_acm_line_ctrl_set+0xa6>
	switch (ctrl) {
   1276a:	f06f 0012 	mvn.w	r0, #18
   1276e:	e7a7      	b.n	126c0 <cdc_acm_line_ctrl_set+0xa6>
   12770:	f06f 0012 	mvn.w	r0, #18
   12774:	e7a4      	b.n	126c0 <cdc_acm_line_ctrl_set+0xa6>
   12776:	f06f 0012 	mvn.w	r0, #18
   1277a:	e7a1      	b.n	126c0 <cdc_acm_line_ctrl_set+0xa6>

0001277c <cdc_acm_fifo_read>:
{
   1277c:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   1277e:	6905      	ldr	r5, [r0, #16]
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
   12780:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
   12782:	f7ff f9e1 	bl	11b48 <ring_buf_get>
   12786:	4604      	mov	r4, r0
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
   12788:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
   1278a:	f7ff f90f 	bl	119ac <ring_buf_is_empty>
   1278e:	b110      	cbz	r0, 12796 <cdc_acm_fifo_read+0x1a>
		dev_data->rx_ready = false;
   12790:	2300      	movs	r3, #0
   12792:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
}
   12796:	4620      	mov	r0, r4
   12798:	bd38      	pop	{r3, r4, r5, pc}

0001279a <cdc_acm_poll_in>:
{
   1279a:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
   1279c:	2201      	movs	r2, #1
   1279e:	f7ff ffed 	bl	1277c <cdc_acm_fifo_read>
	return ret == 1 ? 0 : -1;
   127a2:	2801      	cmp	r0, #1
   127a4:	d101      	bne.n	127aa <cdc_acm_poll_in+0x10>
   127a6:	2000      	movs	r0, #0
}
   127a8:	bd08      	pop	{r3, pc}
	return ret == 1 ? 0 : -1;
   127aa:	f04f 30ff 	mov.w	r0, #4294967295
   127ae:	e7fb      	b.n	127a8 <cdc_acm_poll_in+0xe>

000127b0 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   127b0:	4770      	bx	lr

000127b2 <flash_area_read>:
}
#endif /* CONFIG_FLASH_PAGE_LAYOUT */

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   127b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   127b6:	4680      	mov	r8, r0
   127b8:	4617      	mov	r7, r2
   127ba:	461e      	mov	r6, r3
	return (off >= 0) && ((off + len) <= fa->fa_size);
   127bc:	1e0d      	subs	r5, r1, #0
   127be:	db05      	blt.n	127cc <flash_area_read+0x1a>
   127c0:	18eb      	adds	r3, r5, r3
   127c2:	6882      	ldr	r2, [r0, #8]
   127c4:	4293      	cmp	r3, r2
   127c6:	d911      	bls.n	127ec <flash_area_read+0x3a>
   127c8:	2300      	movs	r3, #0
   127ca:	e000      	b.n	127ce <flash_area_read+0x1c>
   127cc:	2300      	movs	r3, #0
	const struct device *dev;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   127ce:	b17b      	cbz	r3, 127f0 <flash_area_read+0x3e>
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
   127d0:	f8d8 000c 	ldr.w	r0, [r8, #12]
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   127d4:	f7fc fbee 	bl	efb4 <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
   127d8:	f8d8 1004 	ldr.w	r1, [r8, #4]
   127dc:	4429      	add	r1, r5

static inline int z_impl_flash_read(const struct device *dev, off_t offset,
				    void *data,
				    size_t len)
{
	const struct flash_driver_api *api =
   127de:	6883      	ldr	r3, [r0, #8]
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
   127e0:	681c      	ldr	r4, [r3, #0]
   127e2:	4633      	mov	r3, r6
   127e4:	463a      	mov	r2, r7
   127e6:	47a0      	blx	r4
}
   127e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (off >= 0) && ((off + len) <= fa->fa_size);
   127ec:	2301      	movs	r3, #1
   127ee:	e7ee      	b.n	127ce <flash_area_read+0x1c>
		return -EINVAL;
   127f0:	f06f 0015 	mvn.w	r0, #21
   127f4:	e7f8      	b.n	127e8 <flash_area_read+0x36>

000127f6 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   127f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   127fa:	4606      	mov	r6, r0
   127fc:	4690      	mov	r8, r2
   127fe:	461f      	mov	r7, r3
	return (off >= 0) && ((off + len) <= fa->fa_size);
   12800:	f1b1 0900 	subs.w	r9, r1, #0
   12804:	db05      	blt.n	12812 <flash_area_write+0x1c>
   12806:	444b      	add	r3, r9
   12808:	6882      	ldr	r2, [r0, #8]
   1280a:	4293      	cmp	r3, r2
   1280c:	d91f      	bls.n	1284e <flash_area_write+0x58>
   1280e:	2300      	movs	r3, #0
   12810:	e000      	b.n	12814 <flash_area_write+0x1e>
   12812:	2300      	movs	r3, #0
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   12814:	b1eb      	cbz	r3, 12852 <flash_area_write+0x5c>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   12816:	68f0      	ldr	r0, [r6, #12]
   12818:	f7fc fbcc 	bl	efb4 <z_impl_device_get_binding>
   1281c:	4604      	mov	r4, r0

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
   1281e:	6871      	ldr	r1, [r6, #4]
   12820:	4489      	add	r9, r1
			  size_t len);

static inline int z_impl_flash_write(const struct device *dev, off_t offset,
				     const void *data, size_t len)
{
	const struct flash_driver_api *api =
   12822:	6886      	ldr	r6, [r0, #8]
	/* write protection management in this function exists for keeping
	 * compatibility with out-of-tree drivers which are not aligned jet
	 * with write-protection API depreciation.
	 * This will be removed with flash_api_write_protection handler type.
	 */
	if (api->write_protection != NULL) {
   12824:	68f3      	ldr	r3, [r6, #12]
   12826:	b11b      	cbz	r3, 12830 <flash_area_write+0x3a>
		rc = api->write_protection(dev, false);
   12828:	2100      	movs	r1, #0
   1282a:	4798      	blx	r3
		if (rc) {
   1282c:	4605      	mov	r5, r0
   1282e:	b958      	cbnz	r0, 12848 <flash_area_write+0x52>
			return rc;
		}
	}

	rc = api->write(dev, offset, data, len);
   12830:	6875      	ldr	r5, [r6, #4]
   12832:	463b      	mov	r3, r7
   12834:	4642      	mov	r2, r8
   12836:	4649      	mov	r1, r9
   12838:	4620      	mov	r0, r4
   1283a:	47a8      	blx	r5
   1283c:	4605      	mov	r5, r0

	if (api->write_protection != NULL) {
   1283e:	68f3      	ldr	r3, [r6, #12]
   12840:	b113      	cbz	r3, 12848 <flash_area_write+0x52>
		(void) api->write_protection(dev, true);
   12842:	2101      	movs	r1, #1
   12844:	4620      	mov	r0, r4
   12846:	4798      	blx	r3

	return rc;
}
   12848:	4628      	mov	r0, r5
   1284a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (off >= 0) && ((off + len) <= fa->fa_size);
   1284e:	2301      	movs	r3, #1
   12850:	e7e0      	b.n	12814 <flash_area_write+0x1e>
		return -EINVAL;
   12852:	f06f 0515 	mvn.w	r5, #21
   12856:	e7f7      	b.n	12848 <flash_area_write+0x52>

00012858 <flash_area_erase>:

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
   12858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1285c:	4605      	mov	r5, r0
   1285e:	4690      	mov	r8, r2
	return (off >= 0) && ((off + len) <= fa->fa_size);
   12860:	1e0e      	subs	r6, r1, #0
   12862:	db05      	blt.n	12870 <flash_area_erase+0x18>
   12864:	18b3      	adds	r3, r6, r2
   12866:	6882      	ldr	r2, [r0, #8]
   12868:	4293      	cmp	r3, r2
   1286a:	d91e      	bls.n	128aa <flash_area_erase+0x52>
   1286c:	2300      	movs	r3, #0
   1286e:	e000      	b.n	12872 <flash_area_erase+0x1a>
   12870:	2300      	movs	r3, #0
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   12872:	b1e3      	cbz	r3, 128ae <flash_area_erase+0x56>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   12874:	68e8      	ldr	r0, [r5, #12]
   12876:	f7fc fb9d 	bl	efb4 <z_impl_device_get_binding>
   1287a:	4604      	mov	r4, r0

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
   1287c:	686b      	ldr	r3, [r5, #4]
   1287e:	441e      	add	r6, r3
__syscall int flash_erase(const struct device *dev, off_t offset, size_t size);

static inline int z_impl_flash_erase(const struct device *dev, off_t offset,
				     size_t size)
{
	const struct flash_driver_api *api =
   12880:	6887      	ldr	r7, [r0, #8]
	/* write protection management in this function exists for keeping
	 * compatibility with out-of-tree drivers which are not aligned jet
	 * with write-protection API depreciation.
	 * This will be removed with flash_api_write_protection handler type.
	 */
	if (api->write_protection != NULL) {
   12882:	68fb      	ldr	r3, [r7, #12]
   12884:	b11b      	cbz	r3, 1288e <flash_area_erase+0x36>
		rc = api->write_protection(dev, false);
   12886:	2100      	movs	r1, #0
   12888:	4798      	blx	r3
		if (rc) {
   1288a:	4605      	mov	r5, r0
   1288c:	b950      	cbnz	r0, 128a4 <flash_area_erase+0x4c>
			return rc;
		}
	}

	rc = api->erase(dev, offset, size);
   1288e:	68bb      	ldr	r3, [r7, #8]
   12890:	4642      	mov	r2, r8
   12892:	4631      	mov	r1, r6
   12894:	4620      	mov	r0, r4
   12896:	4798      	blx	r3
   12898:	4605      	mov	r5, r0

	if (api->write_protection != NULL) {
   1289a:	68fb      	ldr	r3, [r7, #12]
   1289c:	b113      	cbz	r3, 128a4 <flash_area_erase+0x4c>
		(void) api->write_protection(dev, true);
   1289e:	2101      	movs	r1, #1
   128a0:	4620      	mov	r0, r4
   128a2:	4798      	blx	r3

	return rc;
}
   128a4:	4628      	mov	r0, r5
   128a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (off >= 0) && ((off + len) <= fa->fa_size);
   128aa:	2301      	movs	r3, #1
   128ac:	e7e1      	b.n	12872 <flash_area_erase+0x1a>
		return -EINVAL;
   128ae:	f06f 0515 	mvn.w	r5, #21
   128b2:	e7f7      	b.n	128a4 <flash_area_erase+0x4c>

000128b4 <flash_area_get_device>:

	return 1;
}

const struct device *flash_area_get_device(const struct flash_area *fa)
{
   128b4:	b508      	push	{r3, lr}
	return device_get_binding(fa->fa_dev_name);
   128b6:	68c0      	ldr	r0, [r0, #12]
   128b8:	f7fc fb7c 	bl	efb4 <z_impl_device_get_binding>
}
   128bc:	bd08      	pop	{r3, pc}

000128be <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   128be:	2200      	movs	r2, #0
   128c0:	6002      	str	r2, [r0, #0]
   128c2:	6042      	str	r2, [r0, #4]
   128c4:	6082      	str	r2, [r0, #8]
}
   128c6:	4770      	bx	lr

000128c8 <abort_function>:
	while(1);
   128c8:	e7fe      	b.n	128c8 <abort_function>

000128ca <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   128ca:	b538      	push	{r3, r4, r5, lr}
   128cc:	4604      	mov	r4, r0

	if (esf != NULL) {
   128ce:	460d      	mov	r5, r1
   128d0:	b111      	cbz	r1, 128d8 <z_arm_fatal_error+0xe>
		esf_dump(esf);
   128d2:	4608      	mov	r0, r1
   128d4:	f7f2 fbc2 	bl	505c <esf_dump>
	}
	z_fatal_error(reason, esf);
   128d8:	4629      	mov	r1, r5
   128da:	4620      	mov	r0, r4
   128dc:	f7fc fbf0 	bl	f0c0 <z_fatal_error>
}
   128e0:	bd38      	pop	{r3, r4, r5, pc}

000128e2 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   128e2:	b508      	push	{r3, lr}
   128e4:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   128e6:	6800      	ldr	r0, [r0, #0]
   128e8:	f7ff ffef 	bl	128ca <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   128ec:	bd08      	pop	{r3, pc}

000128ee <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
   128ee:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   128f0:	2100      	movs	r1, #0
   128f2:	2001      	movs	r0, #1
   128f4:	f7ff ffe9 	bl	128ca <z_arm_fatal_error>
}
   128f8:	bd08      	pop	{r3, pc}

000128fa <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   128fa:	b508      	push	{r3, lr}
	handler();
   128fc:	f7f2 fc44 	bl	5188 <z_SysNmiOnReset>
	z_arm_int_exit();
   12900:	f7f2 fd40 	bl	5384 <z_arm_exc_exit>
}
   12904:	bd08      	pop	{r3, pc}

00012906 <memory_fault_recoverable>:
}
   12906:	2000      	movs	r0, #0
   12908:	4770      	bx	lr

0001290a <fault_handle>:
{
   1290a:	b508      	push	{r3, lr}
	*recoverable = false;
   1290c:	2300      	movs	r3, #0
   1290e:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   12910:	1ecb      	subs	r3, r1, #3
   12912:	2b09      	cmp	r3, #9
   12914:	d81a      	bhi.n	1294c <fault_handle+0x42>
   12916:	e8df f003 	tbb	[pc, r3]
   1291a:	0905      	.short	0x0905
   1291c:	1919110d 	.word	0x1919110d
   12920:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
   12924:	4611      	mov	r1, r2
   12926:	f7f2 ffc1 	bl	58ac <hard_fault>
}
   1292a:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   1292c:	2100      	movs	r1, #0
   1292e:	f7f2 fedb 	bl	56e8 <mem_manage_fault>
		break;
   12932:	e7fa      	b.n	1292a <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
   12934:	2100      	movs	r1, #0
   12936:	f7f2 fdff 	bl	5538 <bus_fault>
		break;
   1293a:	e7f6      	b.n	1292a <fault_handle+0x20>
		reason = usage_fault(esf);
   1293c:	f7f2 fd30 	bl	53a0 <usage_fault>
		break;
   12940:	e7f3      	b.n	1292a <fault_handle+0x20>
		debug_monitor(esf, recoverable);
   12942:	4611      	mov	r1, r2
   12944:	f7f2 fdde 	bl	5504 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   12948:	2000      	movs	r0, #0
		break;
   1294a:	e7ee      	b.n	1292a <fault_handle+0x20>
		reserved_exception(esf, fault);
   1294c:	f7f3 f854 	bl	59f8 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   12950:	2000      	movs	r0, #0
	return reason;
   12952:	e7ea      	b.n	1292a <fault_handle+0x20>

00012954 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   12954:	6843      	ldr	r3, [r0, #4]
   12956:	1e5a      	subs	r2, r3, #1
		&&
   12958:	4213      	tst	r3, r2
   1295a:	d106      	bne.n	1296a <mpu_partition_is_valid+0x16>
		&&
   1295c:	2b1f      	cmp	r3, #31
   1295e:	d906      	bls.n	1296e <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   12960:	6803      	ldr	r3, [r0, #0]
		&&
   12962:	421a      	tst	r2, r3
   12964:	d005      	beq.n	12972 <mpu_partition_is_valid+0x1e>
   12966:	2000      	movs	r0, #0
   12968:	4770      	bx	lr
   1296a:	2000      	movs	r0, #0
   1296c:	4770      	bx	lr
   1296e:	2000      	movs	r0, #0
   12970:	4770      	bx	lr
   12972:	2001      	movs	r0, #1
}
   12974:	4770      	bx	lr

00012976 <mpu_configure_region>:
{
   12976:	b500      	push	{lr}
   12978:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   1297a:	680b      	ldr	r3, [r1, #0]
   1297c:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   1297e:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   12980:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   12982:	2b20      	cmp	r3, #32
   12984:	d912      	bls.n	129ac <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   12986:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   1298a:	d811      	bhi.n	129b0 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   1298c:	3b01      	subs	r3, #1
   1298e:	fab3 f383 	clz	r3, r3
   12992:	f1c3 031f 	rsb	r3, r3, #31
   12996:	005b      	lsls	r3, r3, #1
   12998:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   1299c:	4313      	orrs	r3, r2
   1299e:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   129a0:	a901      	add	r1, sp, #4
   129a2:	f7f3 f985 	bl	5cb0 <region_allocate_and_init>
}
   129a6:	b005      	add	sp, #20
   129a8:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   129ac:	2308      	movs	r3, #8
   129ae:	e7f5      	b.n	1299c <mpu_configure_region+0x26>
		return REGION_4G;
   129b0:	233e      	movs	r3, #62	; 0x3e
   129b2:	e7f3      	b.n	1299c <mpu_configure_region+0x26>

000129b4 <arm_core_mpu_configure_static_mpu_regions>:
{
   129b4:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   129b6:	f7f3 f9dd 	bl	5d74 <mpu_configure_static_mpu_regions>
}
   129ba:	bd08      	pop	{r3, pc}

000129bc <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   129bc:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   129be:	f7f3 f9e3 	bl	5d88 <mpu_configure_dynamic_mpu_regions>
}
   129c2:	bd08      	pop	{r3, pc}

000129c4 <free>:

void free(void *ptr)
{
	ARG_UNUSED(ptr);
}
   129c4:	4770      	bx	lr

000129c6 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   129c6:	4602      	mov	r2, r0
   129c8:	780b      	ldrb	r3, [r1, #0]
   129ca:	b11b      	cbz	r3, 129d4 <strcpy+0xe>
		*d = *s;
   129cc:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
   129d0:	3101      	adds	r1, #1
   129d2:	e7f9      	b.n	129c8 <strcpy+0x2>
	}

	*d = '\0';
   129d4:	7013      	strb	r3, [r2, #0]

	return dest;
}
   129d6:	4770      	bx	lr

000129d8 <strncpy>:

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   129d8:	4603      	mov	r3, r0
   129da:	b1a2      	cbz	r2, 12a06 <strncpy+0x2e>
{
   129dc:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
   129de:	780c      	ldrb	r4, [r1, #0]
   129e0:	b12c      	cbz	r4, 129ee <strncpy+0x16>
		*d = *s;
   129e2:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
   129e6:	3101      	adds	r1, #1
		d++;
		n--;
   129e8:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
   129ea:	2a00      	cmp	r2, #0
   129ec:	d1f7      	bne.n	129de <strncpy+0x6>
	}

	while (n > 0) {
   129ee:	b122      	cbz	r2, 129fa <strncpy+0x22>
		*d = '\0';
   129f0:	2100      	movs	r1, #0
   129f2:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
   129f6:	3a01      	subs	r2, #1
   129f8:	e7f9      	b.n	129ee <strncpy+0x16>
	}

	return dest;
}
   129fa:	bc10      	pop	{r4}
   129fc:	4770      	bx	lr
		*d = '\0';
   129fe:	2100      	movs	r1, #0
   12a00:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   12a04:	3a01      	subs	r2, #1
	while (n > 0) {
   12a06:	2a00      	cmp	r2, #0
   12a08:	d1f9      	bne.n	129fe <strncpy+0x26>
   12a0a:	4770      	bx	lr

00012a0c <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   12a0c:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   12a0e:	7803      	ldrb	r3, [r0, #0]
   12a10:	428b      	cmp	r3, r1
   12a12:	d002      	beq.n	12a1a <strchr+0xe>
   12a14:	b10b      	cbz	r3, 12a1a <strchr+0xe>
		s++;
   12a16:	3001      	adds	r0, #1
   12a18:	e7f9      	b.n	12a0e <strchr+0x2>
	}

	return (*s == tmp) ? (char *) s : NULL;
   12a1a:	428b      	cmp	r3, r1
   12a1c:	d100      	bne.n	12a20 <strchr+0x14>
}
   12a1e:	4770      	bx	lr
	return (*s == tmp) ? (char *) s : NULL;
   12a20:	2000      	movs	r0, #0
   12a22:	e7fc      	b.n	12a1e <strchr+0x12>

00012a24 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   12a24:	4603      	mov	r3, r0
	size_t n = 0;
   12a26:	2000      	movs	r0, #0

	while (*s != '\0') {
   12a28:	781a      	ldrb	r2, [r3, #0]
   12a2a:	b112      	cbz	r2, 12a32 <strlen+0xe>
		s++;
   12a2c:	3301      	adds	r3, #1
		n++;
   12a2e:	3001      	adds	r0, #1
   12a30:	e7fa      	b.n	12a28 <strlen+0x4>
	}

	return n;
}
   12a32:	4770      	bx	lr

00012a34 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   12a34:	4603      	mov	r3, r0
	size_t n = 0;
   12a36:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   12a38:	781a      	ldrb	r2, [r3, #0]
   12a3a:	b122      	cbz	r2, 12a46 <strnlen+0x12>
   12a3c:	4288      	cmp	r0, r1
   12a3e:	d202      	bcs.n	12a46 <strnlen+0x12>
		s++;
   12a40:	3301      	adds	r3, #1
		n++;
   12a42:	3001      	adds	r0, #1
   12a44:	e7f8      	b.n	12a38 <strnlen+0x4>
	}

	return n;
}
   12a46:	4770      	bx	lr

00012a48 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   12a48:	7803      	ldrb	r3, [r0, #0]
   12a4a:	780a      	ldrb	r2, [r1, #0]
   12a4c:	4293      	cmp	r3, r2
   12a4e:	d103      	bne.n	12a58 <strcmp+0x10>
   12a50:	b113      	cbz	r3, 12a58 <strcmp+0x10>
		s1++;
   12a52:	3001      	adds	r0, #1
		s2++;
   12a54:	3101      	adds	r1, #1
   12a56:	e7f7      	b.n	12a48 <strcmp>
	}

	return *s1 - *s2;
}
   12a58:	1a98      	subs	r0, r3, r2
   12a5a:	4770      	bx	lr

00012a5c <strncmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   12a5c:	b192      	cbz	r2, 12a84 <strncmp+0x28>
{
   12a5e:	b410      	push	{r4}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   12a60:	7803      	ldrb	r3, [r0, #0]
   12a62:	780c      	ldrb	r4, [r1, #0]
   12a64:	42a3      	cmp	r3, r4
   12a66:	d105      	bne.n	12a74 <strncmp+0x18>
   12a68:	b123      	cbz	r3, 12a74 <strncmp+0x18>
		s1++;
   12a6a:	3001      	adds	r0, #1
		s2++;
   12a6c:	3101      	adds	r1, #1
		n--;
   12a6e:	3a01      	subs	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   12a70:	2a00      	cmp	r2, #0
   12a72:	d1f5      	bne.n	12a60 <strncmp+0x4>
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   12a74:	b122      	cbz	r2, 12a80 <strncmp+0x24>
   12a76:	7800      	ldrb	r0, [r0, #0]
   12a78:	780b      	ldrb	r3, [r1, #0]
   12a7a:	1ac0      	subs	r0, r0, r3
}
   12a7c:	bc10      	pop	{r4}
   12a7e:	4770      	bx	lr
	return (n == 0) ? 0 : (*s1 - *s2);
   12a80:	2000      	movs	r0, #0
   12a82:	e7fb      	b.n	12a7c <strncmp+0x20>
   12a84:	b11a      	cbz	r2, 12a8e <strncmp+0x32>
   12a86:	7800      	ldrb	r0, [r0, #0]
   12a88:	780b      	ldrb	r3, [r1, #0]
   12a8a:	1ac0      	subs	r0, r0, r3
   12a8c:	4770      	bx	lr
   12a8e:	2000      	movs	r0, #0
}
   12a90:	4770      	bx	lr

00012a92 <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   12a92:	b17a      	cbz	r2, 12ab4 <memcmp+0x22>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   12a94:	1e53      	subs	r3, r2, #1
   12a96:	d00f      	beq.n	12ab8 <memcmp+0x26>
{
   12a98:	b410      	push	{r4}
	while ((--n > 0) && (*c1 == *c2)) {
   12a9a:	7804      	ldrb	r4, [r0, #0]
   12a9c:	780a      	ldrb	r2, [r1, #0]
   12a9e:	4294      	cmp	r4, r2
   12aa0:	d103      	bne.n	12aaa <memcmp+0x18>
		c1++;
   12aa2:	3001      	adds	r0, #1
		c2++;
   12aa4:	3101      	adds	r1, #1
	while ((--n > 0) && (*c1 == *c2)) {
   12aa6:	3b01      	subs	r3, #1
   12aa8:	d1f7      	bne.n	12a9a <memcmp+0x8>
	}

	return *c1 - *c2;
   12aaa:	7800      	ldrb	r0, [r0, #0]
   12aac:	780b      	ldrb	r3, [r1, #0]
   12aae:	1ac0      	subs	r0, r0, r3
}
   12ab0:	bc10      	pop	{r4}
   12ab2:	4770      	bx	lr
		return 0;
   12ab4:	2000      	movs	r0, #0
   12ab6:	4770      	bx	lr
	return *c1 - *c2;
   12ab8:	7800      	ldrb	r0, [r0, #0]
   12aba:	780b      	ldrb	r3, [r1, #0]
   12abc:	1ac0      	subs	r0, r0, r3
}
   12abe:	4770      	bx	lr

00012ac0 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   12ac0:	b410      	push	{r4}
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   12ac2:	ea80 0301 	eor.w	r3, r0, r1
   12ac6:	f013 0f03 	tst.w	r3, #3
   12aca:	d001      	beq.n	12ad0 <memcpy+0x10>
	unsigned char *d_byte = (unsigned char *)d;
   12acc:	4603      	mov	r3, r0
   12ace:	e017      	b.n	12b00 <memcpy+0x40>
   12ad0:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
   12ad2:	f013 0f03 	tst.w	r3, #3
   12ad6:	d00b      	beq.n	12af0 <memcpy+0x30>
			if (n == 0) {
   12ad8:	b1a2      	cbz	r2, 12b04 <memcpy+0x44>
				return d;
			}
			*(d_byte++) = *(s_byte++);
   12ada:	f811 4b01 	ldrb.w	r4, [r1], #1
   12ade:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   12ae2:	3a01      	subs	r2, #1
   12ae4:	e7f5      	b.n	12ad2 <memcpy+0x12>

		mem_word_t *d_word = (mem_word_t *)d_byte;
		const mem_word_t *s_word = (const mem_word_t *)s_byte;

		while (n >= sizeof(mem_word_t)) {
			*(d_word++) = *(s_word++);
   12ae6:	f851 4b04 	ldr.w	r4, [r1], #4
   12aea:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
   12aee:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
   12af0:	2a03      	cmp	r2, #3
   12af2:	d8f8      	bhi.n	12ae6 <memcpy+0x26>
   12af4:	e004      	b.n	12b00 <memcpy+0x40>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
   12af6:	f811 4b01 	ldrb.w	r4, [r1], #1
   12afa:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   12afe:	3a01      	subs	r2, #1
	while (n > 0) {
   12b00:	2a00      	cmp	r2, #0
   12b02:	d1f8      	bne.n	12af6 <memcpy+0x36>
	}

	return d;
}
   12b04:	bc10      	pop	{r4}
   12b06:	4770      	bx	lr

00012b08 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   12b08:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   12b0a:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
   12b0c:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   12b0e:	f013 0f03 	tst.w	r3, #3
   12b12:	d004      	beq.n	12b1e <memset+0x16>
		if (n == 0) {
   12b14:	b19a      	cbz	r2, 12b3e <memset+0x36>
			return buf;
		}
		*(d_byte++) = c_byte;
   12b16:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   12b1a:	3a01      	subs	r2, #1
   12b1c:	e7f7      	b.n	12b0e <memset+0x6>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
   12b1e:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
   12b20:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
   12b24:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   12b28:	2a03      	cmp	r2, #3
   12b2a:	d906      	bls.n	12b3a <memset+0x32>
		*(d_word++) = c_word;
   12b2c:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
   12b30:	3a04      	subs	r2, #4
   12b32:	e7f9      	b.n	12b28 <memset+0x20>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
   12b34:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   12b38:	3a01      	subs	r2, #1
	while (n > 0) {
   12b3a:	2a00      	cmp	r2, #0
   12b3c:	d1fa      	bne.n	12b34 <memset+0x2c>
	}

	return buf;
}
   12b3e:	bc10      	pop	{r4}
   12b40:	4770      	bx	lr

00012b42 <strspn>:
#include <string.h>
#include <string.h>

size_t strspn(const char *s,
	      const char *accept)
{
   12b42:	b570      	push	{r4, r5, r6, lr}
   12b44:	4606      	mov	r6, r0
   12b46:	460d      	mov	r5, r1
	const char *ins = s;

	while ((*s != '\0') && (strchr(accept, *s) != NULL)) {
   12b48:	4604      	mov	r4, r0
   12b4a:	7821      	ldrb	r1, [r4, #0]
   12b4c:	b129      	cbz	r1, 12b5a <strspn+0x18>
   12b4e:	4628      	mov	r0, r5
   12b50:	f7ff ff5c 	bl	12a0c <strchr>
   12b54:	b108      	cbz	r0, 12b5a <strspn+0x18>
		++s;
   12b56:	3401      	adds	r4, #1
   12b58:	e7f7      	b.n	12b4a <strspn+0x8>
	}

	return s - ins;
}
   12b5a:	1ba0      	subs	r0, r4, r6
   12b5c:	bd70      	pop	{r4, r5, r6, pc}

00012b5e <strcspn>:

size_t strcspn(const char *s,
	       const char *reject)
{
   12b5e:	b570      	push	{r4, r5, r6, lr}
   12b60:	4606      	mov	r6, r0
   12b62:	460d      	mov	r5, r1
	const char *ins = s;

	while ((*s != '\0') && (strchr(reject, *s) == NULL)) {
   12b64:	4604      	mov	r4, r0
   12b66:	7821      	ldrb	r1, [r4, #0]
   12b68:	b129      	cbz	r1, 12b76 <strcspn+0x18>
   12b6a:	4628      	mov	r0, r5
   12b6c:	f7ff ff4e 	bl	12a0c <strchr>
   12b70:	b908      	cbnz	r0, 12b76 <strcspn+0x18>
		++s;
   12b72:	3401      	adds	r4, #1
   12b74:	e7f7      	b.n	12b66 <strcspn+0x8>
	}

	return s - ins;
}
   12b76:	1ba0      	subs	r0, r4, r6
   12b78:	bd70      	pop	{r4, r5, r6, pc}

00012b7a <_stdout_hook_default>:
}
   12b7a:	f04f 30ff 	mov.w	r0, #4294967295
   12b7e:	4770      	bx	lr

00012b80 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   12b80:	684b      	ldr	r3, [r1, #4]
   12b82:	2b01      	cmp	r3, #1
   12b84:	dd07      	ble.n	12b96 <sprintf_out+0x16>
		*(p->ptr) = c;
   12b86:	680b      	ldr	r3, [r1, #0]
   12b88:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   12b8a:	680b      	ldr	r3, [r1, #0]
   12b8c:	3301      	adds	r3, #1
   12b8e:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   12b90:	684b      	ldr	r3, [r1, #4]
   12b92:	3b01      	subs	r3, #1
   12b94:	604b      	str	r3, [r1, #4]
}
   12b96:	2000      	movs	r0, #0
   12b98:	4770      	bx	lr

00012b9a <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   12b9a:	b084      	sub	sp, #16
   12b9c:	ab04      	add	r3, sp, #16
   12b9e:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   12ba2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   12ba6:	2b06      	cmp	r3, #6
   12ba8:	d001      	beq.n	12bae <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   12baa:	b004      	add	sp, #16
   12bac:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   12bae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   12bb2:	2201      	movs	r2, #1
   12bb4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   12bb8:	f3bf 8f4f 	dsb	sy
        __WFE();
   12bbc:	bf20      	wfe
    while (true)
   12bbe:	e7fd      	b.n	12bbc <pm_power_state_set+0x22>

00012bc0 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   12bc0:	b084      	sub	sp, #16
   12bc2:	ab04      	add	r3, sp, #16
   12bc4:	e903 0007 	stmdb	r3, {r0, r1, r2}
   12bc8:	2300      	movs	r3, #0
   12bca:	f383 8811 	msr	BASEPRI, r3
   12bce:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   12bd2:	b004      	add	sp, #16
   12bd4:	4770      	bx	lr

00012bd6 <fs_type_get>:
{
   12bd6:	b508      	push	{r3, lr}
	struct registry_entry *ep = registry_find(type);
   12bd8:	f7f3 f99c 	bl	5f14 <registry_find>
	return (ep != NULL) ? ep->fstp : NULL;
   12bdc:	4603      	mov	r3, r0
   12bde:	b100      	cbz	r0, 12be2 <fs_type_get+0xc>
   12be0:	6843      	ldr	r3, [r0, #4]
}
   12be2:	4618      	mov	r0, r3
   12be4:	bd08      	pop	{r3, pc}

00012be6 <lfs_to_errno>:
	if (error >= 0) {
   12be6:	2800      	cmp	r0, #0
   12be8:	da37      	bge.n	12c5a <lfs_to_errno+0x74>
	switch (error) {
   12bea:	f100 0354 	add.w	r3, r0, #84	; 0x54
   12bee:	2b52      	cmp	r3, #82	; 0x52
   12bf0:	d82b      	bhi.n	12c4a <lfs_to_errno+0x64>
   12bf2:	e8df f003 	tbb	[pc, r3]
   12bf6:	2a30      	.short	0x2a30
   12bf8:	2a2a2a2a 	.word	0x2a2a2a2a
   12bfc:	2a2a2a2a 	.word	0x2a2a2a2a
   12c00:	2a2a2a2a 	.word	0x2a2a2a2a
   12c04:	2a2a2a2a 	.word	0x2a2a2a2a
   12c08:	2a2a2a2a 	.word	0x2a2a2a2a
   12c0c:	2a2a2a2a 	.word	0x2a2a2a2a
   12c10:	2a2a2a2a 	.word	0x2a2a2a2a
   12c14:	2a2a2a2a 	.word	0x2a2a2a2a
   12c18:	2a2a2a2a 	.word	0x2a2a2a2a
   12c1c:	2a2a2a2a 	.word	0x2a2a2a2a
   12c20:	2d2a2a2a 	.word	0x2d2a2a2a
   12c24:	2a2a2a2a 	.word	0x2a2a2a2a
   12c28:	2a2a2a2a 	.word	0x2a2a2a2a
   12c2c:	32322a2a 	.word	0x32322a2a
   12c30:	2a2a2a2a 	.word	0x2a2a2a2a
   12c34:	2a323232 	.word	0x2a323232
   12c38:	2a2a322a 	.word	0x2a2a322a
   12c3c:	2a322a2a 	.word	0x2a322a2a
   12c40:	2a2a322a 	.word	0x2a2a322a
   12c44:	2a2a2a2a 	.word	0x2a2a2a2a
   12c48:	32          	.byte	0x32
   12c49:	00          	.byte	0x00
	if (error >= 0) {
   12c4a:	f06f 0004 	mvn.w	r0, #4
   12c4e:	4770      	bx	lr
		return -ENOTEMPTY;
   12c50:	f06f 0059 	mvn.w	r0, #89	; 0x59
   12c54:	4770      	bx	lr
		return -EFAULT;
   12c56:	f06f 000d 	mvn.w	r0, #13
}
   12c5a:	4770      	bx	lr

00012c5c <errno_to_lfs>:
	if (error >= 0) {
   12c5c:	2800      	cmp	r0, #0
   12c5e:	da20      	bge.n	12ca2 <errno_to_lfs+0x46>
	switch (error) {
   12c60:	f110 0f5a 	cmn.w	r0, #90	; 0x5a
   12c64:	d01f      	beq.n	12ca6 <errno_to_lfs+0x4a>
   12c66:	db21      	blt.n	12cac <errno_to_lfs+0x50>
   12c68:	f110 0f02 	cmn.w	r0, #2
   12c6c:	dc21      	bgt.n	12cb2 <errno_to_lfs+0x56>
   12c6e:	f110 0f1c 	cmn.w	r0, #28
   12c72:	db21      	blt.n	12cb8 <errno_to_lfs+0x5c>
   12c74:	f100 031c 	add.w	r3, r0, #28
   12c78:	2b1a      	cmp	r3, #26
   12c7a:	d80f      	bhi.n	12c9c <errno_to_lfs+0x40>
   12c7c:	e8df f003 	tbb	[pc, r3]
   12c80:	0e0e2121 	.word	0x0e0e2121
   12c84:	21210e0e 	.word	0x21210e0e
   12c88:	210e0e21 	.word	0x210e0e21
   12c8c:	0e1f0e0e 	.word	0x0e1f0e0e
   12c90:	210e0e21 	.word	0x210e0e21
   12c94:	0e0e0e0e 	.word	0x0e0e0e0e
   12c98:	0e0e      	.short	0x0e0e
   12c9a:	21          	.byte	0x21
   12c9b:	00          	.byte	0x00
   12c9c:	f06f 0004 	mvn.w	r0, #4
   12ca0:	4770      	bx	lr
		return LFS_ERR_OK;
   12ca2:	2000      	movs	r0, #0
   12ca4:	4770      	bx	lr
		return LFS_ERR_NOTEMPTY;
   12ca6:	f06f 0026 	mvn.w	r0, #38	; 0x26
   12caa:	4770      	bx	lr
	switch (error) {
   12cac:	f06f 0004 	mvn.w	r0, #4
   12cb0:	4770      	bx	lr
   12cb2:	f06f 0004 	mvn.w	r0, #4
   12cb6:	4770      	bx	lr
   12cb8:	f06f 0004 	mvn.w	r0, #4
   12cbc:	4770      	bx	lr
		return LFS_ERR_CORRUPT;
   12cbe:	f06f 0053 	mvn.w	r0, #83	; 0x53
}
   12cc2:	4770      	bx	lr

00012cc4 <lfs_api_sync>:
}
   12cc4:	2000      	movs	r0, #0
   12cc6:	4770      	bx	lr

00012cc8 <lfs_flags_from_zephyr>:
	int flags = (zflags & FS_O_CREATE) ? LFS_O_CREAT : 0;
   12cc8:	0102      	lsls	r2, r0, #4
   12cca:	f402 7280 	and.w	r2, r2, #256	; 0x100
	flags |= (zflags & FS_O_READ) ? LFS_O_RDONLY : 0;
   12cce:	f000 0301 	and.w	r3, r0, #1
   12cd2:	431a      	orrs	r2, r3
	flags |= (zflags & FS_O_WRITE) ? LFS_O_WRONLY : 0;
   12cd4:	f000 0302 	and.w	r3, r0, #2
   12cd8:	4313      	orrs	r3, r2
	flags |= (zflags & FS_O_APPEND) ? LFS_O_APPEND : 0;
   12cda:	0180      	lsls	r0, r0, #6
   12cdc:	f400 6000 	and.w	r0, r0, #2048	; 0x800
}
   12ce0:	4318      	orrs	r0, r3
   12ce2:	4770      	bx	lr

00012ce4 <get_page_cb>:
{
   12ce4:	b430      	push	{r4, r5}
	size_t info_start = info->start_offset;
   12ce6:	6804      	ldr	r4, [r0, #0]
	size_t info_end = info_start + info->size - 1U;
   12ce8:	6845      	ldr	r5, [r0, #4]
   12cea:	192a      	adds	r2, r5, r4
   12cec:	3a01      	subs	r2, #1
	size_t area_start = ctx->area->fa_off;
   12cee:	680b      	ldr	r3, [r1, #0]
   12cf0:	6858      	ldr	r0, [r3, #4]
	size_t area_end = area_start + ctx->area->fa_size - 1U;
   12cf2:	689b      	ldr	r3, [r3, #8]
   12cf4:	4403      	add	r3, r0
	if (info_end < area_start) {
   12cf6:	4282      	cmp	r2, r0
   12cf8:	d308      	bcc.n	12d0c <get_page_cb+0x28>
   12cfa:	3b01      	subs	r3, #1
	if (info_start > area_end) {
   12cfc:	429c      	cmp	r4, r3
   12cfe:	d808      	bhi.n	12d12 <get_page_cb+0x2e>
	if (info->size > ctx->max_size) {
   12d00:	684b      	ldr	r3, [r1, #4]
   12d02:	429d      	cmp	r5, r3
   12d04:	d907      	bls.n	12d16 <get_page_cb+0x32>
		ctx->max_size = info->size;
   12d06:	604d      	str	r5, [r1, #4]
	return true;
   12d08:	2001      	movs	r0, #1
   12d0a:	e000      	b.n	12d0e <get_page_cb+0x2a>
		return true;
   12d0c:	2001      	movs	r0, #1
}
   12d0e:	bc30      	pop	{r4, r5}
   12d10:	4770      	bx	lr
		return false;
   12d12:	2000      	movs	r0, #0
   12d14:	e7fb      	b.n	12d0e <get_page_cb+0x2a>
	return true;
   12d16:	2001      	movs	r0, #1
   12d18:	e7f9      	b.n	12d0e <get_page_cb+0x2a>

00012d1a <info_to_dirent>:
{
   12d1a:	b510      	push	{r4, lr}
   12d1c:	460c      	mov	r4, r1
	entry->type = ((info->type == LFS_TYPE_DIR) ?
   12d1e:	7803      	ldrb	r3, [r0, #0]
		       FS_DIR_ENTRY_DIR : FS_DIR_ENTRY_FILE);
   12d20:	2b02      	cmp	r3, #2
   12d22:	bf14      	ite	ne
   12d24:	2300      	movne	r3, #0
   12d26:	2301      	moveq	r3, #1
	entry->type = ((info->type == LFS_TYPE_DIR) ?
   12d28:	700b      	strb	r3, [r1, #0]
	entry->size = info->size;
   12d2a:	6843      	ldr	r3, [r0, #4]
   12d2c:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
	strncpy(entry->name, info->name, sizeof(entry->name));
   12d30:	f240 1201 	movw	r2, #257	; 0x101
   12d34:	f100 0108 	add.w	r1, r0, #8
   12d38:	1c60      	adds	r0, r4, #1
   12d3a:	f7ff fe4d 	bl	129d8 <strncpy>
	entry->name[sizeof(entry->name) - 1] = '\0';
   12d3e:	2300      	movs	r3, #0
   12d40:	f884 3101 	strb.w	r3, [r4, #257]	; 0x101
}
   12d44:	bd10      	pop	{r4, pc}

00012d46 <lfs_api_erase>:
{
   12d46:	b508      	push	{r3, lr}
	size_t offset = block * c->block_size;
   12d48:	69c2      	ldr	r2, [r0, #28]
	int rc = flash_area_erase(fa, offset, c->block_size);
   12d4a:	fb01 f102 	mul.w	r1, r1, r2
   12d4e:	6800      	ldr	r0, [r0, #0]
   12d50:	f7ff fd82 	bl	12858 <flash_area_erase>
	return errno_to_lfs(rc);
   12d54:	f7ff ff82 	bl	12c5c <errno_to_lfs>
}
   12d58:	bd08      	pop	{r3, pc}

00012d5a <lfs_api_prog>:
{
   12d5a:	b538      	push	{r3, r4, r5, lr}
   12d5c:	4614      	mov	r4, r2
   12d5e:	461a      	mov	r2, r3
	size_t offset = block * c->block_size + off;
   12d60:	69c5      	ldr	r5, [r0, #28]
	int rc = flash_area_write(fa, offset, buffer, size);
   12d62:	9b04      	ldr	r3, [sp, #16]
   12d64:	fb01 4105 	mla	r1, r1, r5, r4
   12d68:	6800      	ldr	r0, [r0, #0]
   12d6a:	f7ff fd44 	bl	127f6 <flash_area_write>
	return errno_to_lfs(rc);
   12d6e:	f7ff ff75 	bl	12c5c <errno_to_lfs>
}
   12d72:	bd38      	pop	{r3, r4, r5, pc}

00012d74 <lfs_api_read>:
{
   12d74:	b538      	push	{r3, r4, r5, lr}
   12d76:	4614      	mov	r4, r2
   12d78:	461a      	mov	r2, r3
	size_t offset = block * c->block_size + off;
   12d7a:	69c5      	ldr	r5, [r0, #28]
	int rc = flash_area_read(fa, offset, buffer, size);
   12d7c:	9b04      	ldr	r3, [sp, #16]
   12d7e:	fb01 4105 	mla	r1, r1, r5, r4
   12d82:	6800      	ldr	r0, [r0, #0]
   12d84:	f7ff fd15 	bl	127b2 <flash_area_read>
	return errno_to_lfs(rc);
   12d88:	f7ff ff68 	bl	12c5c <errno_to_lfs>
}
   12d8c:	bd38      	pop	{r3, r4, r5, pc}

00012d8e <littlefs_tell>:
{
   12d8e:	b570      	push	{r4, r5, r6, lr}
   12d90:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   12d92:	6843      	ldr	r3, [r0, #4]
   12d94:	691e      	ldr	r6, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   12d96:	f106 05ec 	add.w	r5, r6, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   12d9a:	f04f 32ff 	mov.w	r2, #4294967295
   12d9e:	f04f 33ff 	mov.w	r3, #4294967295
   12da2:	4628      	mov	r0, r5
   12da4:	f7fc fc4e 	bl	f644 <z_impl_k_mutex_lock>
	off_t ret = lfs_file_tell(&fs->lfs, LFS_FILEP(fp));
   12da8:	6821      	ldr	r1, [r4, #0]
   12daa:	f106 0070 	add.w	r0, r6, #112	; 0x70
   12dae:	f001 fec6 	bl	14b3e <lfs_file_tell>
   12db2:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   12db4:	4628      	mov	r0, r5
   12db6:	f7fc fccf 	bl	f758 <z_impl_k_mutex_unlock>
}
   12dba:	4620      	mov	r0, r4
   12dbc:	bd70      	pop	{r4, r5, r6, pc}

00012dbe <littlefs_sync>:
{
   12dbe:	b570      	push	{r4, r5, r6, lr}
   12dc0:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   12dc2:	6843      	ldr	r3, [r0, #4]
   12dc4:	691e      	ldr	r6, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   12dc6:	f106 05ec 	add.w	r5, r6, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   12dca:	f04f 32ff 	mov.w	r2, #4294967295
   12dce:	f04f 33ff 	mov.w	r3, #4294967295
   12dd2:	4628      	mov	r0, r5
   12dd4:	f7fc fc36 	bl	f644 <z_impl_k_mutex_lock>
	int ret = lfs_file_sync(&fs->lfs, LFS_FILEP(fp));
   12dd8:	6821      	ldr	r1, [r4, #0]
   12dda:	f106 0070 	add.w	r0, r6, #112	; 0x70
   12dde:	f002 f965 	bl	150ac <lfs_file_sync>
   12de2:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   12de4:	4628      	mov	r0, r5
   12de6:	f7fc fcb7 	bl	f758 <z_impl_k_mutex_unlock>
	return lfs_to_errno(ret);
   12dea:	4620      	mov	r0, r4
   12dec:	f7ff fefb 	bl	12be6 <lfs_to_errno>
}
   12df0:	bd70      	pop	{r4, r5, r6, pc}

00012df2 <littlefs_truncate>:
{
   12df2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12df4:	4604      	mov	r4, r0
   12df6:	460d      	mov	r5, r1
	struct fs_littlefs *fs = fp->mp->fs_data;
   12df8:	6843      	ldr	r3, [r0, #4]
   12dfa:	691f      	ldr	r7, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   12dfc:	f107 06ec 	add.w	r6, r7, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   12e00:	f04f 32ff 	mov.w	r2, #4294967295
   12e04:	f04f 33ff 	mov.w	r3, #4294967295
   12e08:	4630      	mov	r0, r6
   12e0a:	f7fc fc1b 	bl	f644 <z_impl_k_mutex_lock>
	int ret = lfs_file_truncate(&fs->lfs, LFS_FILEP(fp), length);
   12e0e:	462a      	mov	r2, r5
   12e10:	6821      	ldr	r1, [r4, #0]
   12e12:	f107 0070 	add.w	r0, r7, #112	; 0x70
   12e16:	f002 f8c2 	bl	14f9e <lfs_file_truncate>
   12e1a:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   12e1c:	4630      	mov	r0, r6
   12e1e:	f7fc fc9b 	bl	f758 <z_impl_k_mutex_unlock>
	return lfs_to_errno(ret);
   12e22:	4620      	mov	r0, r4
   12e24:	f7ff fedf 	bl	12be6 <lfs_to_errno>
}
   12e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00012e2a <littlefs_mkdir>:
{
   12e2a:	b570      	push	{r4, r5, r6, lr}
   12e2c:	4603      	mov	r3, r0
   12e2e:	4608      	mov	r0, r1
	struct fs_littlefs *fs = mountp->fs_data;
   12e30:	691e      	ldr	r6, [r3, #16]
	path = fs_impl_strip_prefix(path, mountp);
   12e32:	4619      	mov	r1, r3
   12e34:	f7f3 fbd8 	bl	65e8 <fs_impl_strip_prefix>
   12e38:	4604      	mov	r4, r0
	k_mutex_lock(&fs->mutex, K_FOREVER);
   12e3a:	f106 05ec 	add.w	r5, r6, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   12e3e:	f04f 32ff 	mov.w	r2, #4294967295
   12e42:	f04f 33ff 	mov.w	r3, #4294967295
   12e46:	4628      	mov	r0, r5
   12e48:	f7fc fbfc 	bl	f644 <z_impl_k_mutex_lock>
	int ret = lfs_mkdir(&fs->lfs, path);
   12e4c:	4621      	mov	r1, r4
   12e4e:	f106 0070 	add.w	r0, r6, #112	; 0x70
   12e52:	f7fb fac3 	bl	e3dc <lfs_mkdir>
   12e56:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   12e58:	4628      	mov	r0, r5
   12e5a:	f7fc fc7d 	bl	f758 <z_impl_k_mutex_unlock>
	return lfs_to_errno(ret);
   12e5e:	4620      	mov	r0, r4
   12e60:	f7ff fec1 	bl	12be6 <lfs_to_errno>
}
   12e64:	bd70      	pop	{r4, r5, r6, pc}

00012e66 <littlefs_close>:
{
   12e66:	b570      	push	{r4, r5, r6, lr}
   12e68:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   12e6a:	6843      	ldr	r3, [r0, #4]
   12e6c:	691d      	ldr	r5, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   12e6e:	f105 06ec 	add.w	r6, r5, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   12e72:	f04f 32ff 	mov.w	r2, #4294967295
   12e76:	f04f 33ff 	mov.w	r3, #4294967295
   12e7a:	4630      	mov	r0, r6
   12e7c:	f7fc fbe2 	bl	f644 <z_impl_k_mutex_lock>
	int ret = lfs_file_close(&fs->lfs, LFS_FILEP(fp));
   12e80:	6821      	ldr	r1, [r4, #0]
   12e82:	f105 0070 	add.w	r0, r5, #112	; 0x70
   12e86:	f002 f96b 	bl	15160 <lfs_file_close>
   12e8a:	4605      	mov	r5, r0
	return z_impl_k_mutex_unlock(mutex);
   12e8c:	4630      	mov	r0, r6
   12e8e:	f7fc fc63 	bl	f758 <z_impl_k_mutex_unlock>
	release_file_data(fp);
   12e92:	4620      	mov	r0, r4
   12e94:	f7f3 fd80 	bl	6998 <release_file_data>
	return lfs_to_errno(ret);
   12e98:	4628      	mov	r0, r5
   12e9a:	f7ff fea4 	bl	12be6 <lfs_to_errno>
}
   12e9e:	bd70      	pop	{r4, r5, r6, pc}

00012ea0 <littlefs_unlink>:
{
   12ea0:	b570      	push	{r4, r5, r6, lr}
   12ea2:	4603      	mov	r3, r0
   12ea4:	4608      	mov	r0, r1
	struct fs_littlefs *fs = mountp->fs_data;
   12ea6:	691e      	ldr	r6, [r3, #16]
	path = fs_impl_strip_prefix(path, mountp);
   12ea8:	4619      	mov	r1, r3
   12eaa:	f7f3 fb9d 	bl	65e8 <fs_impl_strip_prefix>
   12eae:	4604      	mov	r4, r0
	k_mutex_lock(&fs->mutex, K_FOREVER);
   12eb0:	f106 05ec 	add.w	r5, r6, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   12eb4:	f04f 32ff 	mov.w	r2, #4294967295
   12eb8:	f04f 33ff 	mov.w	r3, #4294967295
   12ebc:	4628      	mov	r0, r5
   12ebe:	f7fc fbc1 	bl	f644 <z_impl_k_mutex_lock>
	int ret = lfs_remove(&fs->lfs, path);
   12ec2:	4621      	mov	r1, r4
   12ec4:	f106 0070 	add.w	r0, r6, #112	; 0x70
   12ec8:	f7fb fd54 	bl	e974 <lfs_remove>
   12ecc:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   12ece:	4628      	mov	r0, r5
   12ed0:	f7fc fc42 	bl	f758 <z_impl_k_mutex_unlock>
	return lfs_to_errno(ret);
   12ed4:	4620      	mov	r0, r4
   12ed6:	f7ff fe86 	bl	12be6 <lfs_to_errno>
}
   12eda:	bd70      	pop	{r4, r5, r6, pc}

00012edc <littlefs_read>:
{
   12edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12ee0:	4604      	mov	r4, r0
   12ee2:	460d      	mov	r5, r1
   12ee4:	4616      	mov	r6, r2
	struct fs_littlefs *fs = fp->mp->fs_data;
   12ee6:	6843      	ldr	r3, [r0, #4]
   12ee8:	f8d3 8010 	ldr.w	r8, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   12eec:	f108 07ec 	add.w	r7, r8, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   12ef0:	f04f 32ff 	mov.w	r2, #4294967295
   12ef4:	f04f 33ff 	mov.w	r3, #4294967295
   12ef8:	4638      	mov	r0, r7
   12efa:	f7fc fba3 	bl	f644 <z_impl_k_mutex_lock>
	ssize_t ret = lfs_file_read(&fs->lfs, LFS_FILEP(fp), ptr, len);
   12efe:	4633      	mov	r3, r6
   12f00:	462a      	mov	r2, r5
   12f02:	6821      	ldr	r1, [r4, #0]
   12f04:	f108 0070 	add.w	r0, r8, #112	; 0x70
   12f08:	f7fa fd04 	bl	d914 <lfs_file_read>
   12f0c:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   12f0e:	4638      	mov	r0, r7
   12f10:	f7fc fc22 	bl	f758 <z_impl_k_mutex_unlock>
	return lfs_to_errno(ret);
   12f14:	4620      	mov	r0, r4
   12f16:	f7ff fe66 	bl	12be6 <lfs_to_errno>
}
   12f1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00012f1e <littlefs_write>:
{
   12f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12f22:	4604      	mov	r4, r0
   12f24:	460d      	mov	r5, r1
   12f26:	4616      	mov	r6, r2
	struct fs_littlefs *fs = fp->mp->fs_data;
   12f28:	6843      	ldr	r3, [r0, #4]
   12f2a:	f8d3 8010 	ldr.w	r8, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   12f2e:	f108 07ec 	add.w	r7, r8, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   12f32:	f04f 32ff 	mov.w	r2, #4294967295
   12f36:	f04f 33ff 	mov.w	r3, #4294967295
   12f3a:	4638      	mov	r0, r7
   12f3c:	f7fc fb82 	bl	f644 <z_impl_k_mutex_lock>
	ssize_t ret = lfs_file_write(&fs->lfs, LFS_FILEP(fp), ptr, len);
   12f40:	4633      	mov	r3, r6
   12f42:	462a      	mov	r2, r5
   12f44:	6821      	ldr	r1, [r4, #0]
   12f46:	f108 0070 	add.w	r0, r8, #112	; 0x70
   12f4a:	f001 ff13 	bl	14d74 <lfs_file_write>
   12f4e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   12f50:	4638      	mov	r0, r7
   12f52:	f7fc fc01 	bl	f758 <z_impl_k_mutex_unlock>
	return lfs_to_errno(ret);
   12f56:	4620      	mov	r0, r4
   12f58:	f7ff fe45 	bl	12be6 <lfs_to_errno>
}
   12f5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00012f60 <littlefs_seek>:
{
   12f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12f64:	4604      	mov	r4, r0
   12f66:	460d      	mov	r5, r1
   12f68:	4616      	mov	r6, r2
	struct fs_littlefs *fs = fp->mp->fs_data;
   12f6a:	6843      	ldr	r3, [r0, #4]
   12f6c:	f8d3 8010 	ldr.w	r8, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   12f70:	f108 07ec 	add.w	r7, r8, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   12f74:	f04f 32ff 	mov.w	r2, #4294967295
   12f78:	f04f 33ff 	mov.w	r3, #4294967295
   12f7c:	4638      	mov	r0, r7
   12f7e:	f7fc fb61 	bl	f644 <z_impl_k_mutex_lock>
	off_t ret = lfs_file_seek(&fs->lfs, LFS_FILEP(fp), off, whence);
   12f82:	4633      	mov	r3, r6
   12f84:	462a      	mov	r2, r5
   12f86:	6821      	ldr	r1, [r4, #0]
   12f88:	f108 0070 	add.w	r0, r8, #112	; 0x70
   12f8c:	f001 ffeb 	bl	14f66 <lfs_file_seek>
   12f90:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   12f92:	4638      	mov	r0, r7
   12f94:	f7fc fbe0 	bl	f758 <z_impl_k_mutex_unlock>
	if (ret >= 0) {
   12f98:	2c00      	cmp	r4, #0
   12f9a:	db00      	blt.n	12f9e <littlefs_seek+0x3e>
		ret = 0;
   12f9c:	2400      	movs	r4, #0
	return lfs_to_errno(ret);
   12f9e:	4620      	mov	r0, r4
   12fa0:	f7ff fe21 	bl	12be6 <lfs_to_errno>
}
   12fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00012fa8 <littlefs_rename>:
{
   12fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12faa:	4604      	mov	r4, r0
   12fac:	4608      	mov	r0, r1
   12fae:	4616      	mov	r6, r2
	struct fs_littlefs *fs = mountp->fs_data;
   12fb0:	6927      	ldr	r7, [r4, #16]
	from = fs_impl_strip_prefix(from, mountp);
   12fb2:	4621      	mov	r1, r4
   12fb4:	f7f3 fb18 	bl	65e8 <fs_impl_strip_prefix>
   12fb8:	4605      	mov	r5, r0
	to = fs_impl_strip_prefix(to, mountp);
   12fba:	4621      	mov	r1, r4
   12fbc:	4630      	mov	r0, r6
   12fbe:	f7f3 fb13 	bl	65e8 <fs_impl_strip_prefix>
   12fc2:	4604      	mov	r4, r0
	k_mutex_lock(&fs->mutex, K_FOREVER);
   12fc4:	f107 06ec 	add.w	r6, r7, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   12fc8:	f04f 32ff 	mov.w	r2, #4294967295
   12fcc:	f04f 33ff 	mov.w	r3, #4294967295
   12fd0:	4630      	mov	r0, r6
   12fd2:	f7fc fb37 	bl	f644 <z_impl_k_mutex_lock>
	int ret = lfs_rename(&fs->lfs, from, to);
   12fd6:	4622      	mov	r2, r4
   12fd8:	4629      	mov	r1, r5
   12fda:	f107 0070 	add.w	r0, r7, #112	; 0x70
   12fde:	f7fb fd45 	bl	ea6c <lfs_rename>
   12fe2:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   12fe4:	4630      	mov	r0, r6
   12fe6:	f7fc fbb7 	bl	f758 <z_impl_k_mutex_unlock>
	return lfs_to_errno(ret);
   12fea:	4620      	mov	r0, r4
   12fec:	f7ff fdfb 	bl	12be6 <lfs_to_errno>
}
   12ff0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00012ff2 <littlefs_stat>:
{
   12ff2:	b5f0      	push	{r4, r5, r6, r7, lr}
   12ff4:	b0c3      	sub	sp, #268	; 0x10c
   12ff6:	4603      	mov	r3, r0
   12ff8:	4608      	mov	r0, r1
   12ffa:	4615      	mov	r5, r2
	struct fs_littlefs *fs = mountp->fs_data;
   12ffc:	691f      	ldr	r7, [r3, #16]
	path = fs_impl_strip_prefix(path, mountp);
   12ffe:	4619      	mov	r1, r3
   13000:	f7f3 faf2 	bl	65e8 <fs_impl_strip_prefix>
   13004:	4604      	mov	r4, r0
	k_mutex_lock(&fs->mutex, K_FOREVER);
   13006:	f107 06ec 	add.w	r6, r7, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   1300a:	f04f 32ff 	mov.w	r2, #4294967295
   1300e:	f04f 33ff 	mov.w	r3, #4294967295
   13012:	4630      	mov	r0, r6
   13014:	f7fc fb16 	bl	f644 <z_impl_k_mutex_lock>
	int ret = lfs_stat(&fs->lfs, path, &info);
   13018:	466a      	mov	r2, sp
   1301a:	4621      	mov	r1, r4
   1301c:	f107 0070 	add.w	r0, r7, #112	; 0x70
   13020:	f001 fd9b 	bl	14b5a <lfs_stat>
   13024:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   13026:	4630      	mov	r0, r6
   13028:	f7fc fb96 	bl	f758 <z_impl_k_mutex_unlock>
	if (ret >= 0) {
   1302c:	2c00      	cmp	r4, #0
   1302e:	da04      	bge.n	1303a <littlefs_stat+0x48>
	return lfs_to_errno(ret);
   13030:	4620      	mov	r0, r4
   13032:	f7ff fdd8 	bl	12be6 <lfs_to_errno>
}
   13036:	b043      	add	sp, #268	; 0x10c
   13038:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info_to_dirent(&info, entry);
   1303a:	4629      	mov	r1, r5
   1303c:	4668      	mov	r0, sp
   1303e:	f7ff fe6c 	bl	12d1a <info_to_dirent>
		ret = 0;
   13042:	2400      	movs	r4, #0
   13044:	e7f4      	b.n	13030 <littlefs_stat+0x3e>

00013046 <littlefs_readdir>:
{
   13046:	b5f0      	push	{r4, r5, r6, r7, lr}
   13048:	b0c3      	sub	sp, #268	; 0x10c
   1304a:	4604      	mov	r4, r0
   1304c:	460d      	mov	r5, r1
	struct fs_littlefs *fs = dp->mp->fs_data;
   1304e:	6843      	ldr	r3, [r0, #4]
   13050:	691f      	ldr	r7, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   13052:	f107 06ec 	add.w	r6, r7, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   13056:	f04f 32ff 	mov.w	r2, #4294967295
   1305a:	f04f 33ff 	mov.w	r3, #4294967295
   1305e:	4630      	mov	r0, r6
   13060:	f7fc faf0 	bl	f644 <z_impl_k_mutex_lock>
	int ret = lfs_dir_read(&fs->lfs, dp->dirp, &info);
   13064:	466a      	mov	r2, sp
   13066:	6821      	ldr	r1, [r4, #0]
   13068:	f107 0070 	add.w	r0, r7, #112	; 0x70
   1306c:	f7fa f87a 	bl	d164 <lfs_dir_read>
   13070:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   13072:	4630      	mov	r0, r6
   13074:	f7fc fb70 	bl	f758 <z_impl_k_mutex_unlock>
	if (ret > 0) {
   13078:	2c00      	cmp	r4, #0
   1307a:	dc03      	bgt.n	13084 <littlefs_readdir+0x3e>
	} else if (ret == 0) {
   1307c:	b93c      	cbnz	r4, 1308e <littlefs_readdir+0x48>
		entry->name[0] = 0;
   1307e:	2300      	movs	r3, #0
   13080:	706b      	strb	r3, [r5, #1]
   13082:	e004      	b.n	1308e <littlefs_readdir+0x48>
		info_to_dirent(&info, entry);
   13084:	4629      	mov	r1, r5
   13086:	4668      	mov	r0, sp
   13088:	f7ff fe47 	bl	12d1a <info_to_dirent>
		ret = 0;
   1308c:	2400      	movs	r4, #0
	return lfs_to_errno(ret);
   1308e:	4620      	mov	r0, r4
   13090:	f7ff fda9 	bl	12be6 <lfs_to_errno>
}
   13094:	b043      	add	sp, #268	; 0x10c
   13096:	bdf0      	pop	{r4, r5, r6, r7, pc}

00013098 <littlefs_statvfs>:
{
   13098:	b570      	push	{r4, r5, r6, lr}
   1309a:	4603      	mov	r3, r0
   1309c:	4608      	mov	r0, r1
   1309e:	4615      	mov	r5, r2
	struct fs_littlefs *fs = mountp->fs_data;
   130a0:	691c      	ldr	r4, [r3, #16]
	struct lfs *lfs = &fs->lfs;
   130a2:	f104 0670 	add.w	r6, r4, #112	; 0x70
	stat->f_bsize = lfs->cfg->prog_size;
   130a6:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
   130aa:	6992      	ldr	r2, [r2, #24]
   130ac:	602a      	str	r2, [r5, #0]
	stat->f_frsize = lfs->cfg->block_size;
   130ae:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
   130b2:	69d2      	ldr	r2, [r2, #28]
   130b4:	606a      	str	r2, [r5, #4]
	stat->f_blocks = lfs->cfg->block_count;
   130b6:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
   130ba:	6a12      	ldr	r2, [r2, #32]
   130bc:	60aa      	str	r2, [r5, #8]
	path = fs_impl_strip_prefix(path, mountp);
   130be:	4619      	mov	r1, r3
   130c0:	f7f3 fa92 	bl	65e8 <fs_impl_strip_prefix>
	k_mutex_lock(&fs->mutex, K_FOREVER);
   130c4:	34ec      	adds	r4, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   130c6:	f04f 32ff 	mov.w	r2, #4294967295
   130ca:	f04f 33ff 	mov.w	r3, #4294967295
   130ce:	4620      	mov	r0, r4
   130d0:	f7fc fab8 	bl	f644 <z_impl_k_mutex_lock>
	ssize_t ret = lfs_fs_size(lfs);
   130d4:	4630      	mov	r0, r6
   130d6:	f7fa fcab 	bl	da30 <lfs_fs_size>
   130da:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
   130dc:	4620      	mov	r0, r4
   130de:	f7fc fb3b 	bl	f758 <z_impl_k_mutex_unlock>
	if (ret >= 0) {
   130e2:	2e00      	cmp	r6, #0
   130e4:	db03      	blt.n	130ee <littlefs_statvfs+0x56>
		stat->f_bfree = stat->f_blocks - ret;
   130e6:	68a8      	ldr	r0, [r5, #8]
   130e8:	1b80      	subs	r0, r0, r6
   130ea:	60e8      	str	r0, [r5, #12]
		ret = 0;
   130ec:	2600      	movs	r6, #0
	return lfs_to_errno(ret);
   130ee:	4630      	mov	r0, r6
   130f0:	f7ff fd79 	bl	12be6 <lfs_to_errno>
}
   130f4:	bd70      	pop	{r4, r5, r6, pc}

000130f6 <in_endpoint_ctx>:
{
   130f6:	b508      	push	{r3, lr}
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   130f8:	f040 0080 	orr.w	r0, r0, #128	; 0x80
   130fc:	f7f3 fd4a 	bl	6b94 <endpoint_ctx>
}
   13100:	bd08      	pop	{r3, pc}

00013102 <out_endpoint_ctx>:
{
   13102:	b508      	push	{r3, lr}
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   13104:	f7f3 fd46 	bl	6b94 <endpoint_ctx>
}
   13108:	bd08      	pop	{r3, pc}

0001310a <ep_ctx_reset>:
{
   1310a:	b510      	push	{r4, lr}
   1310c:	4604      	mov	r4, r0
	ep_ctx->buf.data = ep_ctx->buf.block.data;
   1310e:	6903      	ldr	r3, [r0, #16]
   13110:	6143      	str	r3, [r0, #20]
	ep_ctx->buf.curr = ep_ctx->buf.data;
   13112:	6183      	str	r3, [r0, #24]
	ep_ctx->buf.len  = 0U;
   13114:	2300      	movs	r3, #0
   13116:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
   13118:	7f83      	ldrb	r3, [r0, #30]
   1311a:	b933      	cbnz	r3, 1312a <ep_ctx_reset+0x20>
	ep_ctx->read_complete = true;
   1311c:	2301      	movs	r3, #1
   1311e:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
   13120:	2300      	movs	r3, #0
   13122:	7763      	strb	r3, [r4, #29]
	ep_ctx->write_in_progress = false;
   13124:	77a3      	strb	r3, [r4, #30]
	ep_ctx->trans_zlp = false;
   13126:	77e3      	strb	r3, [r4, #31]
}
   13128:	bd10      	pop	{r4, pc}
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   1312a:	7a40      	ldrb	r0, [r0, #9]
   1312c:	f7f8 fff0 	bl	c110 <nrfx_usbd_ep_abort>
   13130:	e7f4      	b.n	1311c <ep_ctx_reset+0x12>

00013132 <hfxo_stop>:
{
   13132:	b510      	push	{r4, lr}
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
   13134:	f100 0320 	add.w	r3, r0, #32
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   13138:	2200      	movs	r2, #0
   1313a:	f3bf 8f5b 	dmb	ish
   1313e:	e853 1f00 	ldrex	r1, [r3]
   13142:	2901      	cmp	r1, #1
   13144:	d103      	bne.n	1314e <hfxo_stop+0x1c>
   13146:	e843 2400 	strex	r4, r2, [r3]
   1314a:	2c00      	cmp	r4, #0
   1314c:	d1f7      	bne.n	1313e <hfxo_stop+0xc>
   1314e:	f3bf 8f5b 	dmb	ish
   13152:	d10d      	bne.n	13170 <hfxo_stop+0x3e>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
   13154:	69c4      	ldr	r4, [r0, #28]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
   13156:	f100 010c 	add.w	r1, r0, #12
   1315a:	4620      	mov	r0, r4
   1315c:	f7fd ffcb 	bl	110f6 <onoff_cancel>

	if (rv == -EALREADY) {
   13160:	f110 0f78 	cmn.w	r0, #120	; 0x78
   13164:	d000      	beq.n	13168 <hfxo_stop+0x36>
}
   13166:	bd10      	pop	{r4, pc}
		rv = onoff_release(mgr);
   13168:	4620      	mov	r0, r4
   1316a:	f7fd ff9e 	bl	110aa <onoff_release>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
   1316e:	e7fa      	b.n	13166 <hfxo_stop+0x34>
	return 0;
   13170:	2000      	movs	r0, #0
   13172:	e7f8      	b.n	13166 <hfxo_stop+0x34>

00013174 <usbd_enable_endpoints>:
{
   13174:	b510      	push	{r4, lr}
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   13176:	2400      	movs	r4, #0
   13178:	e003      	b.n	13182 <usbd_enable_endpoints+0xe>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   1317a:	7a40      	ldrb	r0, [r0, #9]
   1317c:	f7f8 fe22 	bl	bdc4 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   13180:	3401      	adds	r4, #1
   13182:	2c07      	cmp	r4, #7
   13184:	dc06      	bgt.n	13194 <usbd_enable_endpoints+0x20>
		ep_ctx = in_endpoint_ctx(i);
   13186:	b2e0      	uxtb	r0, r4
   13188:	f7ff ffb5 	bl	130f6 <in_endpoint_ctx>
		if (ep_ctx->cfg.en) {
   1318c:	7a03      	ldrb	r3, [r0, #8]
   1318e:	2b00      	cmp	r3, #0
   13190:	d0f6      	beq.n	13180 <usbd_enable_endpoints+0xc>
   13192:	e7f2      	b.n	1317a <usbd_enable_endpoints+0x6>
		ep_ctx = in_endpoint_ctx(NRF_USBD_EPIN(8));
   13194:	2088      	movs	r0, #136	; 0x88
   13196:	f7ff ffae 	bl	130f6 <in_endpoint_ctx>
		if (ep_ctx->cfg.en) {
   1319a:	7a03      	ldrb	r3, [r0, #8]
   1319c:	b90b      	cbnz	r3, 131a2 <usbd_enable_endpoints+0x2e>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   1319e:	2400      	movs	r4, #0
   131a0:	e007      	b.n	131b2 <usbd_enable_endpoints+0x3e>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   131a2:	7a40      	ldrb	r0, [r0, #9]
   131a4:	f7f8 fe0e 	bl	bdc4 <nrfx_usbd_ep_enable>
   131a8:	e7f9      	b.n	1319e <usbd_enable_endpoints+0x2a>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   131aa:	7a40      	ldrb	r0, [r0, #9]
   131ac:	f7f8 fe0a 	bl	bdc4 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
   131b0:	3401      	adds	r4, #1
   131b2:	2c07      	cmp	r4, #7
   131b4:	dc06      	bgt.n	131c4 <usbd_enable_endpoints+0x50>
		ep_ctx = out_endpoint_ctx(i);
   131b6:	b2e0      	uxtb	r0, r4
   131b8:	f7ff ffa3 	bl	13102 <out_endpoint_ctx>
		if (ep_ctx->cfg.en) {
   131bc:	7a03      	ldrb	r3, [r0, #8]
   131be:	2b00      	cmp	r3, #0
   131c0:	d0f6      	beq.n	131b0 <usbd_enable_endpoints+0x3c>
   131c2:	e7f2      	b.n	131aa <usbd_enable_endpoints+0x36>
		ep_ctx = out_endpoint_ctx(NRF_USBD_EPOUT(8));
   131c4:	2008      	movs	r0, #8
   131c6:	f7ff ff9c 	bl	13102 <out_endpoint_ctx>
		if (ep_ctx->cfg.en) {
   131ca:	7a03      	ldrb	r3, [r0, #8]
   131cc:	b903      	cbnz	r3, 131d0 <usbd_enable_endpoints+0x5c>
}
   131ce:	bd10      	pop	{r4, pc}
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   131d0:	7a40      	ldrb	r0, [r0, #9]
   131d2:	f7f8 fdf7 	bl	bdc4 <nrfx_usbd_ep_enable>
}
   131d6:	e7fa      	b.n	131ce <usbd_enable_endpoints+0x5a>

000131d8 <hfxo_start>:
{
   131d8:	b508      	push	{r3, lr}
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
   131da:	f100 0320 	add.w	r3, r0, #32
   131de:	2201      	movs	r2, #1
   131e0:	f3bf 8f5b 	dmb	ish
   131e4:	e853 1f00 	ldrex	r1, [r3]
   131e8:	2900      	cmp	r1, #0
   131ea:	d104      	bne.n	131f6 <hfxo_start+0x1e>
   131ec:	e843 2c00 	strex	ip, r2, [r3]
   131f0:	f1bc 0f00 	cmp.w	ip, #0
   131f4:	d1f6      	bne.n	131e4 <hfxo_start+0xc>
   131f6:	f3bf 8f5b 	dmb	ish
   131fa:	d10a      	bne.n	13212 <hfxo_start+0x3a>
	*notify = (struct sys_notify){
   131fc:	2300      	movs	r3, #0
   131fe:	6103      	str	r3, [r0, #16]
   13200:	6183      	str	r3, [r0, #24]
   13202:	2301      	movs	r3, #1
   13204:	6143      	str	r3, [r0, #20]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
   13206:	f100 010c 	add.w	r1, r0, #12
   1320a:	69c0      	ldr	r0, [r0, #28]
   1320c:	f7fd fef1 	bl	10ff2 <onoff_request>
}
   13210:	bd08      	pop	{r3, pc}
	return 0;
   13212:	2000      	movs	r0, #0
   13214:	e7fc      	b.n	13210 <hfxo_start+0x38>

00013216 <usb_dc_ep_read>:
{
   13216:	b570      	push	{r4, r5, r6, lr}
   13218:	4605      	mov	r5, r0
   1321a:	460c      	mov	r4, r1
   1321c:	4616      	mov	r6, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
   1321e:	f7f4 fec3 	bl	7fa8 <usb_dc_ep_read_wait>
	if (ret) {
   13222:	b918      	cbnz	r0, 1322c <usb_dc_ep_read+0x16>
	if (!data && !max_data_len) {
   13224:	b11c      	cbz	r4, 1322e <usb_dc_ep_read+0x18>
	ret = usb_dc_ep_read_continue(ep);
   13226:	4628      	mov	r0, r5
   13228:	f7f4 ff38 	bl	809c <usb_dc_ep_read_continue>
}
   1322c:	bd70      	pop	{r4, r5, r6, pc}
	if (!data && !max_data_len) {
   1322e:	2e00      	cmp	r6, #0
   13230:	d1f9      	bne.n	13226 <usb_dc_ep_read+0x10>
   13232:	e7fb      	b.n	1322c <usb_dc_ep_read+0x16>

00013234 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   13234:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   13236:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1323a:	0089      	lsls	r1, r1, #2
   1323c:	3138      	adds	r1, #56	; 0x38
}
   1323e:	4408      	add	r0, r1
   13240:	4770      	bx	lr

00013242 <get_sub_config>:
	const struct nrf_clock_control_config *config =
   13242:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
   13244:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   13248:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   1324c:	4770      	bx	lr

0001324e <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   1324e:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   13250:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   13254:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   13258:	4770      	bx	lr

0001325a <get_status>:
{
   1325a:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1325c:	b2c9      	uxtb	r1, r1
   1325e:	f7ff ffe9 	bl	13234 <get_sub_data>
   13262:	6880      	ldr	r0, [r0, #8]
}
   13264:	f000 0007 	and.w	r0, r0, #7
   13268:	bd08      	pop	{r3, pc}

0001326a <set_off_state>:
	__asm__ volatile(
   1326a:	f04f 0320 	mov.w	r3, #32
   1326e:	f3ef 8211 	mrs	r2, BASEPRI
   13272:	f383 8812 	msr	BASEPRI_MAX, r3
   13276:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1327a:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1327c:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   13280:	d001      	beq.n	13286 <set_off_state+0x1c>
   13282:	428b      	cmp	r3, r1
   13284:	d107      	bne.n	13296 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   13286:	2301      	movs	r3, #1
   13288:	6003      	str	r3, [r0, #0]
	int err = 0;
   1328a:	2000      	movs	r0, #0
	__asm__ volatile(
   1328c:	f382 8811 	msr	BASEPRI, r2
   13290:	f3bf 8f6f 	isb	sy
}
   13294:	4770      	bx	lr
		err = -EPERM;
   13296:	f04f 30ff 	mov.w	r0, #4294967295
   1329a:	e7f7      	b.n	1328c <set_off_state+0x22>

0001329c <set_starting_state>:
{
   1329c:	b410      	push	{r4}
	__asm__ volatile(
   1329e:	f04f 0320 	mov.w	r3, #32
   132a2:	f3ef 8211 	mrs	r2, BASEPRI
   132a6:	f383 8812 	msr	BASEPRI_MAX, r3
   132aa:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   132ae:	6803      	ldr	r3, [r0, #0]
   132b0:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   132b4:	f003 0307 	and.w	r3, r3, #7
   132b8:	2b01      	cmp	r3, #1
   132ba:	d009      	beq.n	132d0 <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
   132bc:	428c      	cmp	r4, r1
   132be:	d00a      	beq.n	132d6 <set_starting_state+0x3a>
		err = -EPERM;
   132c0:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   132c4:	f382 8811 	msr	BASEPRI, r2
   132c8:	f3bf 8f6f 	isb	sy
}
   132cc:	bc10      	pop	{r4}
   132ce:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   132d0:	6001      	str	r1, [r0, #0]
	int err = 0;
   132d2:	2000      	movs	r0, #0
   132d4:	e7f6      	b.n	132c4 <set_starting_state+0x28>
		err = -EALREADY;
   132d6:	f06f 0077 	mvn.w	r0, #119	; 0x77
   132da:	e7f3      	b.n	132c4 <set_starting_state+0x28>

000132dc <set_on_state>:
	__asm__ volatile(
   132dc:	f04f 0320 	mov.w	r3, #32
   132e0:	f3ef 8211 	mrs	r2, BASEPRI
   132e4:	f383 8812 	msr	BASEPRI_MAX, r3
   132e8:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   132ec:	6803      	ldr	r3, [r0, #0]
   132ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   132f2:	f043 0302 	orr.w	r3, r3, #2
   132f6:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   132f8:	f382 8811 	msr	BASEPRI, r2
   132fc:	f3bf 8f6f 	isb	sy
}
   13300:	4770      	bx	lr

00013302 <clkstarted_handle>:
{
   13302:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13304:	4606      	mov	r6, r0
   13306:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   13308:	f7ff ff94 	bl	13234 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   1330c:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   1330e:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   13310:	2300      	movs	r3, #0
   13312:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   13316:	f7ff ffe1 	bl	132dc <set_on_state>
	if (callback) {
   1331a:	b11d      	cbz	r5, 13324 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   1331c:	463a      	mov	r2, r7
   1331e:	4621      	mov	r1, r4
   13320:	4630      	mov	r0, r6
   13322:	47a8      	blx	r5
}
   13324:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013326 <stop>:
{
   13326:	b570      	push	{r4, r5, r6, lr}
   13328:	4606      	mov	r6, r0
   1332a:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   1332c:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1332e:	4621      	mov	r1, r4
   13330:	f7ff ff80 	bl	13234 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   13334:	4629      	mov	r1, r5
   13336:	3008      	adds	r0, #8
   13338:	f7ff ff97 	bl	1326a <set_off_state>
	if (err < 0) {
   1333c:	2800      	cmp	r0, #0
   1333e:	db06      	blt.n	1334e <stop+0x28>
	get_sub_config(dev, type)->stop();
   13340:	4621      	mov	r1, r4
   13342:	4630      	mov	r0, r6
   13344:	f7ff ff7d 	bl	13242 <get_sub_config>
   13348:	6843      	ldr	r3, [r0, #4]
   1334a:	4798      	blx	r3
	return 0;
   1334c:	2000      	movs	r0, #0
}
   1334e:	bd70      	pop	{r4, r5, r6, pc}

00013350 <api_stop>:
{
   13350:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   13352:	2280      	movs	r2, #128	; 0x80
   13354:	f7ff ffe7 	bl	13326 <stop>
}
   13358:	bd08      	pop	{r3, pc}

0001335a <async_start>:
{
   1335a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1335e:	4606      	mov	r6, r0
   13360:	4690      	mov	r8, r2
   13362:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   13364:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   13366:	4629      	mov	r1, r5
   13368:	f7ff ff64 	bl	13234 <get_sub_data>
   1336c:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   1336e:	9906      	ldr	r1, [sp, #24]
   13370:	3008      	adds	r0, #8
   13372:	f7ff ff93 	bl	1329c <set_starting_state>
	if (err < 0) {
   13376:	2800      	cmp	r0, #0
   13378:	db09      	blt.n	1338e <async_start+0x34>
	subdata->cb = cb;
   1337a:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   1337e:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   13380:	4629      	mov	r1, r5
   13382:	4630      	mov	r0, r6
   13384:	f7ff ff5d 	bl	13242 <get_sub_config>
   13388:	6803      	ldr	r3, [r0, #0]
   1338a:	4798      	blx	r3
	return 0;
   1338c:	2000      	movs	r0, #0
}
   1338e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00013392 <api_start>:
{
   13392:	b510      	push	{r4, lr}
   13394:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   13396:	2480      	movs	r4, #128	; 0x80
   13398:	9400      	str	r4, [sp, #0]
   1339a:	f7ff ffde 	bl	1335a <async_start>
}
   1339e:	b002      	add	sp, #8
   133a0:	bd10      	pop	{r4, pc}

000133a2 <onoff_started_callback>:
{
   133a2:	b510      	push	{r4, lr}
   133a4:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   133a6:	b2c9      	uxtb	r1, r1
   133a8:	f7ff ff51 	bl	1324e <get_onoff_manager>
	notify(mgr, 0);
   133ac:	2100      	movs	r1, #0
   133ae:	47a0      	blx	r4
}
   133b0:	bd10      	pop	{r4, pc}

000133b2 <hfclk_start>:
{
   133b2:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   133b4:	2001      	movs	r0, #1
   133b6:	f7f6 fc7f 	bl	9cb8 <nrfx_clock_start>
}
   133ba:	bd08      	pop	{r3, pc}

000133bc <lfclk_start>:
{
   133bc:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   133be:	2000      	movs	r0, #0
   133c0:	f7f6 fc7a 	bl	9cb8 <nrfx_clock_start>
}
   133c4:	bd08      	pop	{r3, pc}

000133c6 <hfclk_stop>:
{
   133c6:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   133c8:	2001      	movs	r0, #1
   133ca:	f7f6 fcad 	bl	9d28 <nrfx_clock_stop>
}
   133ce:	bd08      	pop	{r3, pc}

000133d0 <lfclk_stop>:
{
   133d0:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   133d2:	2000      	movs	r0, #0
   133d4:	f7f6 fca8 	bl	9d28 <nrfx_clock_stop>
}
   133d8:	bd08      	pop	{r3, pc}

000133da <blocking_start_callback>:
{
   133da:	b508      	push	{r3, lr}
   133dc:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   133de:	f7fc fa3b 	bl	f858 <z_impl_k_sem_give>
}
   133e2:	bd08      	pop	{r3, pc}

000133e4 <gpio_nrfx_port_get_raw>:
	return port->config;
   133e4:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   133e6:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   133e8:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   133ec:	600b      	str	r3, [r1, #0]
}
   133ee:	2000      	movs	r0, #0
   133f0:	4770      	bx	lr

000133f2 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   133f2:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   133f4:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   133f6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   133fa:	4042      	eors	r2, r0
   133fc:	400a      	ands	r2, r1
   133fe:	4042      	eors	r2, r0
    p_reg->OUT = value;
   13400:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   13404:	2000      	movs	r0, #0
   13406:	4770      	bx	lr

00013408 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   13408:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1340a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   1340c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
   13410:	2000      	movs	r0, #0
   13412:	4770      	bx	lr

00013414 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   13414:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   13416:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   13418:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   1341c:	2000      	movs	r0, #0
   1341e:	4770      	bx	lr

00013420 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   13420:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   13422:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   13424:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   13428:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1342a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   1342e:	2000      	movs	r0, #0
   13430:	4770      	bx	lr

00013432 <gpio_nrfx_manage_callback>:
{
   13432:	b470      	push	{r4, r5, r6}
	return port->data;
   13434:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   13436:	1d05      	adds	r5, r0, #4
	return list->head;
   13438:	6843      	ldr	r3, [r0, #4]
	if (!sys_slist_is_empty(callbacks)) {
   1343a:	b1db      	cbz	r3, 13474 <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   1343c:	460e      	mov	r6, r1
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1343e:	2400      	movs	r4, #0
   13440:	e00a      	b.n	13458 <gpio_nrfx_manage_callback+0x26>
	return node->next;
   13442:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   13444:	6043      	str	r3, [r0, #4]
	return list->tail;
   13446:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   13448:	42a1      	cmp	r1, r4
   1344a:	d10f      	bne.n	1346c <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   1344c:	606b      	str	r3, [r5, #4]
}
   1344e:	e00d      	b.n	1346c <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   13450:	606c      	str	r4, [r5, #4]
}
   13452:	e00b      	b.n	1346c <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   13454:	461c      	mov	r4, r3
   13456:	681b      	ldr	r3, [r3, #0]
   13458:	b15b      	cbz	r3, 13472 <gpio_nrfx_manage_callback+0x40>
   1345a:	429e      	cmp	r6, r3
   1345c:	d1fa      	bne.n	13454 <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
   1345e:	2c00      	cmp	r4, #0
   13460:	d0ef      	beq.n	13442 <gpio_nrfx_manage_callback+0x10>
	return node->next;
   13462:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
   13464:	6023      	str	r3, [r4, #0]
	return list->tail;
   13466:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   13468:	4299      	cmp	r1, r3
   1346a:	d0f1      	beq.n	13450 <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
   1346c:	2300      	movs	r3, #0
   1346e:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   13470:	e000      	b.n	13474 <gpio_nrfx_manage_callback+0x42>
			if (!set) {
   13472:	b152      	cbz	r2, 1348a <gpio_nrfx_manage_callback+0x58>
	if (set) {
   13474:	b162      	cbz	r2, 13490 <gpio_nrfx_manage_callback+0x5e>
	return list->head;
   13476:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
   13478:	600b      	str	r3, [r1, #0]
	list->head = node;
   1347a:	6041      	str	r1, [r0, #4]
	return list->tail;
   1347c:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1347e:	b10b      	cbz	r3, 13484 <gpio_nrfx_manage_callback+0x52>
	return 0;
   13480:	2000      	movs	r0, #0
   13482:	e006      	b.n	13492 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   13484:	6069      	str	r1, [r5, #4]
   13486:	2000      	movs	r0, #0
}
   13488:	e003      	b.n	13492 <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
   1348a:	f06f 0015 	mvn.w	r0, #21
   1348e:	e000      	b.n	13492 <gpio_nrfx_manage_callback+0x60>
	return 0;
   13490:	2000      	movs	r0, #0
}
   13492:	bc70      	pop	{r4, r5, r6}
   13494:	4770      	bx	lr

00013496 <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
   13496:	b510      	push	{r4, lr}
   13498:	4604      	mov	r4, r0
   1349a:	2200      	movs	r2, #0
   1349c:	2101      	movs	r1, #1
   1349e:	2003      	movs	r0, #3
   134a0:	f7f1 fe5c 	bl	515c <z_arm_irq_priority_set>
   134a4:	4620      	mov	r0, r4
   134a6:	f7f5 fca7 	bl	8df8 <init_twi>
   134aa:	bd10      	pop	{r4, pc}

000134ac <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
   134ac:	b510      	push	{r4, lr}
   134ae:	b082      	sub	sp, #8
   134b0:	460c      	mov	r4, r1
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
   134b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   134b6:	6e51      	ldr	r1, [r2, #100]	; 0x64
   134b8:	6e53      	ldr	r3, [r2, #100]	; 0x64
	struct nrf_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
   134ba:	0a1b      	lsrs	r3, r3, #8
   134bc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   134c0:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
   134c4:	6e51      	ldr	r1, [r2, #100]	; 0x64
   134c6:	0209      	lsls	r1, r1, #8
   134c8:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   134cc:	430b      	orrs	r3, r1
   134ce:	6e51      	ldr	r1, [r2, #100]	; 0x64
   134d0:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   134d4:	9300      	str	r3, [sp, #0]
   134d6:	6e11      	ldr	r1, [r2, #96]	; 0x60
   134d8:	6e13      	ldr	r3, [r2, #96]	; 0x60
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   134da:	0a1b      	lsrs	r3, r3, #8
   134dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   134e0:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
   134e4:	6e11      	ldr	r1, [r2, #96]	; 0x60
   134e6:	0209      	lsls	r1, r1, #8
   134e8:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   134ec:	430b      	orrs	r3, r1
   134ee:	6e12      	ldr	r2, [r2, #96]	; 0x60
   134f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   134f4:	9301      	str	r3, [sp, #4]

	if (length > sizeof(dev_id.id)) {
   134f6:	2c08      	cmp	r4, #8
   134f8:	d900      	bls.n	134fc <z_impl_hwinfo_get_device_id+0x50>
		length = sizeof(dev_id.id);
   134fa:	2408      	movs	r4, #8
	}

	memcpy(buffer, dev_id.id, length);
   134fc:	4622      	mov	r2, r4
   134fe:	4669      	mov	r1, sp
   13500:	f7ff fade 	bl	12ac0 <memcpy>

	return length;
}
   13504:	4620      	mov	r0, r4
   13506:	b002      	add	sp, #8
   13508:	bd10      	pop	{r4, pc}

0001350a <shift_write_context>:
	w_ctx->flash_addr += shift;
   1350a:	684b      	ldr	r3, [r1, #4]
   1350c:	4403      	add	r3, r0
   1350e:	604b      	str	r3, [r1, #4]
	w_ctx->data_addr += shift;
   13510:	680b      	ldr	r3, [r1, #0]
   13512:	4403      	add	r3, r0
   13514:	600b      	str	r3, [r1, #0]
	w_ctx->len -= shift;
   13516:	688b      	ldr	r3, [r1, #8]
   13518:	1a18      	subs	r0, r3, r0
   1351a:	6088      	str	r0, [r1, #8]
}
   1351c:	4770      	bx	lr

0001351e <erase_op>:
{
   1351e:	b570      	push	{r4, r5, r6, lr}
   13520:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   13522:	f000 fb67 	bl	13bf4 <nrfx_nvmc_flash_page_size_get>
   13526:	4605      	mov	r5, r0
		if (SUSPEND_POFWARN()) {
   13528:	f7f5 fcb2 	bl	8e90 <suspend_pofwarn>
   1352c:	4606      	mov	r6, r0
   1352e:	b970      	cbnz	r0, 1354e <erase_op+0x30>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   13530:	6860      	ldr	r0, [r4, #4]
   13532:	f7f6 fd5d 	bl	9ff0 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   13536:	68a3      	ldr	r3, [r4, #8]
   13538:	1b5b      	subs	r3, r3, r5
   1353a:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   1353c:	6863      	ldr	r3, [r4, #4]
   1353e:	442b      	add	r3, r5
   13540:	6063      	str	r3, [r4, #4]
		RESUME_POFWARN();
   13542:	f7f5 fcd7 	bl	8ef4 <restore_pofwarn>
	} while (e_ctx->len > 0);
   13546:	68a3      	ldr	r3, [r4, #8]
   13548:	2b00      	cmp	r3, #0
   1354a:	d1ed      	bne.n	13528 <erase_op+0xa>
   1354c:	e001      	b.n	13552 <erase_op+0x34>
			return -ECANCELED;
   1354e:	f06f 068b 	mvn.w	r6, #139	; 0x8b
}
   13552:	4630      	mov	r0, r6
   13554:	bd70      	pop	{r4, r5, r6, pc}

00013556 <erase>:
{
   13556:	b500      	push	{lr}
   13558:	b085      	sub	sp, #20
	struct flash_context context = {
   1355a:	2300      	movs	r3, #0
   1355c:	9301      	str	r3, [sp, #4]
   1355e:	9002      	str	r0, [sp, #8]
   13560:	9103      	str	r1, [sp, #12]
	return	erase_op(&context);
   13562:	a801      	add	r0, sp, #4
   13564:	f7ff ffdb 	bl	1351e <erase_op>
}
   13568:	b005      	add	sp, #20
   1356a:	f85d fb04 	ldr.w	pc, [sp], #4

0001356e <write_op>:
{
   1356e:	b510      	push	{r4, lr}
   13570:	4604      	mov	r4, r0
	while (w_ctx->len >= sizeof(uint32_t)) {
   13572:	68a3      	ldr	r3, [r4, #8]
   13574:	2b03      	cmp	r3, #3
   13576:	d90e      	bls.n	13596 <write_op+0x28>
		if (SUSPEND_POFWARN()) {
   13578:	f7f5 fc8a 	bl	8e90 <suspend_pofwarn>
   1357c:	b978      	cbnz	r0, 1359e <write_op+0x30>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   1357e:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   13580:	6819      	ldr	r1, [r3, #0]
   13582:	6860      	ldr	r0, [r4, #4]
   13584:	f000 fb26 	bl	13bd4 <nrfx_nvmc_word_write>
		RESUME_POFWARN();
   13588:	f7f5 fcb4 	bl	8ef4 <restore_pofwarn>
		shift_write_context(sizeof(uint32_t), w_ctx);
   1358c:	4621      	mov	r1, r4
   1358e:	2004      	movs	r0, #4
   13590:	f7ff ffbb 	bl	1350a <shift_write_context>
   13594:	e7ed      	b.n	13572 <write_op+0x4>
	nvmc_wait_ready();
   13596:	f7f5 fc65 	bl	8e64 <nvmc_wait_ready>
	return FLASH_OP_DONE;
   1359a:	2000      	movs	r0, #0
}
   1359c:	bd10      	pop	{r4, pc}
			return -ECANCELED;
   1359e:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   135a2:	e7fb      	b.n	1359c <write_op+0x2e>

000135a4 <write>:
{
   135a4:	b500      	push	{lr}
   135a6:	b085      	sub	sp, #20
	struct flash_context context = {
   135a8:	9101      	str	r1, [sp, #4]
   135aa:	9002      	str	r0, [sp, #8]
   135ac:	9203      	str	r2, [sp, #12]
	return write_op(&context);
   135ae:	a801      	add	r0, sp, #4
   135b0:	f7ff ffdd 	bl	1356e <write_op>
}
   135b4:	b005      	add	sp, #20
   135b6:	f85d fb04 	ldr.w	pc, [sp], #4

000135ba <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   135ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   135be:	b086      	sub	sp, #24
   135c0:	4689      	mov	r9, r1
   135c2:	4690      	mov	r8, r2
	const struct flash_driver_api *api = dev->api;
   135c4:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   135c6:	695b      	ldr	r3, [r3, #20]
   135c8:	aa01      	add	r2, sp, #4
   135ca:	a905      	add	r1, sp, #20
   135cc:	4798      	blx	r3
	off_t off = 0;
   135ce:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   135d0:	4626      	mov	r6, r4

	for (block = 0; block < num_blocks; block++) {
   135d2:	46a2      	mov	sl, r4
   135d4:	9b01      	ldr	r3, [sp, #4]
   135d6:	4553      	cmp	r3, sl
   135d8:	d916      	bls.n	13608 <flash_page_foreach+0x4e>
		const struct flash_pages_layout *l = &layout[block];
   135da:	9f05      	ldr	r7, [sp, #20]
   135dc:	eb07 07ca 	add.w	r7, r7, sl, lsl #3
		page_info.size = l->pages_size;
   135e0:	687b      	ldr	r3, [r7, #4]
   135e2:	9303      	str	r3, [sp, #12]

		for (i = 0; i < l->pages_count; i++) {
   135e4:	2500      	movs	r5, #0
   135e6:	683b      	ldr	r3, [r7, #0]
   135e8:	42ab      	cmp	r3, r5
   135ea:	d90a      	bls.n	13602 <flash_page_foreach+0x48>
			page_info.start_offset = off;
   135ec:	9402      	str	r4, [sp, #8]
			page_info.index = page;
   135ee:	9604      	str	r6, [sp, #16]

			if (!cb(&page_info, data)) {
   135f0:	4641      	mov	r1, r8
   135f2:	a802      	add	r0, sp, #8
   135f4:	47c8      	blx	r9
   135f6:	b138      	cbz	r0, 13608 <flash_page_foreach+0x4e>
				return;
			}

			off += page_info.size;
   135f8:	9b03      	ldr	r3, [sp, #12]
   135fa:	441c      	add	r4, r3
			page++;
   135fc:	3601      	adds	r6, #1
		for (i = 0; i < l->pages_count; i++) {
   135fe:	3501      	adds	r5, #1
   13600:	e7f1      	b.n	135e6 <flash_page_foreach+0x2c>
	for (block = 0; block < num_blocks; block++) {
   13602:	f10a 0a01 	add.w	sl, sl, #1
   13606:	e7e5      	b.n	135d4 <flash_page_foreach+0x1a>
		}
	}
}
   13608:	b006      	add	sp, #24
   1360a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001360e <endtx_isr>:
	return dev->config;
   1360e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   13610:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   13612:	f04f 0120 	mov.w	r1, #32
   13616:	f3ef 8211 	mrs	r2, BASEPRI
   1361a:	f381 8812 	msr	BASEPRI_MAX, r1
   1361e:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13622:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   13626:	b131      	cbz	r1, 13636 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13628:	2100      	movs	r1, #0
   1362a:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   1362e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13632:	2101      	movs	r1, #1
   13634:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   13636:	f382 8811 	msr	BASEPRI, r2
   1363a:	f3bf 8f6f 	isb	sy
}
   1363e:	4770      	bx	lr

00013640 <uarte_nrfx_isr_int>:
{
   13640:	b538      	push	{r3, r4, r5, lr}
   13642:	4604      	mov	r4, r0
	return dev->config;
   13644:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   13646:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   13648:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   1364c:	f413 7f80 	tst.w	r3, #256	; 0x100
   13650:	d003      	beq.n	1365a <uarte_nrfx_isr_int+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13652:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   13656:	2b00      	cmp	r3, #0
   13658:	d139      	bne.n	136ce <uarte_nrfx_isr_int+0x8e>
	return dev->config;
   1365a:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   1365c:	685b      	ldr	r3, [r3, #4]
   1365e:	f013 0f10 	tst.w	r3, #16
   13662:	d01a      	beq.n	1369a <uarte_nrfx_isr_int+0x5a>
	__asm__ volatile(
   13664:	f04f 0320 	mov.w	r3, #32
   13668:	f3ef 8211 	mrs	r2, BASEPRI
   1366c:	f383 8812 	msr	BASEPRI_MAX, r3
   13670:	f3bf 8f6f 	isb	sy
   13674:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   13678:	b113      	cbz	r3, 13680 <uarte_nrfx_isr_int+0x40>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1367a:	2300      	movs	r3, #0
   1367c:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	return dev->data;
   13680:	6923      	ldr	r3, [r4, #16]
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   13682:	68db      	ldr	r3, [r3, #12]
   13684:	b10b      	cbz	r3, 1368a <uarte_nrfx_isr_int+0x4a>
   13686:	691b      	ldr	r3, [r3, #16]
   13688:	b91b      	cbnz	r3, 13692 <uarte_nrfx_isr_int+0x52>
    p_reg->INTENCLR = mask;
   1368a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1368e:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
	__asm__ volatile(
   13692:	f382 8811 	msr	BASEPRI, r2
   13696:	f3bf 8f6f 	isb	sy
	return dev->data;
   1369a:	6923      	ldr	r3, [r4, #16]
	if (!data->int_driven) {
   1369c:	68da      	ldr	r2, [r3, #12]
   1369e:	b1aa      	cbz	r2, 136cc <uarte_nrfx_isr_int+0x8c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   136a0:	f8d5 1158 	ldr.w	r1, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   136a4:	b121      	cbz	r1, 136b0 <uarte_nrfx_isr_int+0x70>
		data->int_driven->fifo_fill_lock = 0;
   136a6:	2100      	movs	r1, #0
   136a8:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   136aa:	68da      	ldr	r2, [r3, #12]
   136ac:	7b92      	ldrb	r2, [r2, #14]
   136ae:	b98a      	cbnz	r2, 136d4 <uarte_nrfx_isr_int+0x94>
   136b0:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   136b4:	b122      	cbz	r2, 136c0 <uarte_nrfx_isr_int+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   136b6:	2200      	movs	r2, #0
   136b8:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
   136bc:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (data->int_driven->cb) {
   136c0:	68da      	ldr	r2, [r3, #12]
   136c2:	6813      	ldr	r3, [r2, #0]
   136c4:	b113      	cbz	r3, 136cc <uarte_nrfx_isr_int+0x8c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   136c6:	6851      	ldr	r1, [r2, #4]
   136c8:	4620      	mov	r0, r4
   136ca:	4798      	blx	r3
}
   136cc:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   136ce:	f7ff ff9e 	bl	1360e <endtx_isr>
   136d2:	e7c2      	b.n	1365a <uarte_nrfx_isr_int+0x1a>
    p_reg->INTENCLR = mask;
   136d4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   136d8:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   136dc:	68db      	ldr	r3, [r3, #12]
   136de:	7399      	strb	r1, [r3, #14]
			return;
   136e0:	e7f4      	b.n	136cc <uarte_nrfx_isr_int+0x8c>

000136e2 <uarte_nrfx_configure>:
{
   136e2:	b570      	push	{r4, r5, r6, lr}
   136e4:	b082      	sub	sp, #8
   136e6:	4605      	mov	r5, r0
   136e8:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
   136ea:	794b      	ldrb	r3, [r1, #5]
   136ec:	2b01      	cmp	r3, #1
   136ee:	d006      	beq.n	136fe <uarte_nrfx_configure+0x1c>
   136f0:	2b03      	cmp	r3, #3
   136f2:	d011      	beq.n	13718 <uarte_nrfx_configure+0x36>
   136f4:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   136f8:	4618      	mov	r0, r3
   136fa:	b002      	add	sp, #8
   136fc:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   136fe:	2300      	movs	r3, #0
   13700:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   13704:	79a3      	ldrb	r3, [r4, #6]
   13706:	2b03      	cmp	r3, #3
   13708:	d140      	bne.n	1378c <uarte_nrfx_configure+0xaa>
	switch (cfg->flow_ctrl) {
   1370a:	79e3      	ldrb	r3, [r4, #7]
   1370c:	b143      	cbz	r3, 13720 <uarte_nrfx_configure+0x3e>
   1370e:	2b01      	cmp	r3, #1
   13710:	d010      	beq.n	13734 <uarte_nrfx_configure+0x52>
   13712:	f06f 0385 	mvn.w	r3, #133	; 0x85
   13716:	e7ef      	b.n	136f8 <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   13718:	2310      	movs	r3, #16
   1371a:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   1371e:	e7f1      	b.n	13704 <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   13720:	2300      	movs	r3, #0
   13722:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
   13726:	7923      	ldrb	r3, [r4, #4]
   13728:	b183      	cbz	r3, 1374c <uarte_nrfx_configure+0x6a>
   1372a:	2b02      	cmp	r3, #2
   1372c:	d02a      	beq.n	13784 <uarte_nrfx_configure+0xa2>
   1372e:	f06f 0385 	mvn.w	r3, #133	; 0x85
   13732:	e7e1      	b.n	136f8 <uarte_nrfx_configure+0x16>
	return dev->config;
   13734:	686b      	ldr	r3, [r5, #4]
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
   13736:	685b      	ldr	r3, [r3, #4]
   13738:	f003 0201 	and.w	r2, r3, #1
   1373c:	f003 0302 	and.w	r3, r3, #2
   13740:	4313      	orrs	r3, r2
   13742:	d026      	beq.n	13792 <uarte_nrfx_configure+0xb0>
			uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   13744:	2301      	movs	r3, #1
   13746:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   1374a:	e7ec      	b.n	13726 <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   1374c:	2300      	movs	r3, #0
   1374e:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   13752:	6821      	ldr	r1, [r4, #0]
   13754:	4628      	mov	r0, r5
   13756:	f7f5 fcf3 	bl	9140 <baudrate_set>
   1375a:	4603      	mov	r3, r0
   1375c:	b9e0      	cbnz	r0, 13798 <uarte_nrfx_configure+0xb6>
	return dev->config;
   1375e:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
   13760:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   13762:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
   13766:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
   1376a:	f89d 2004 	ldrb.w	r2, [sp, #4]
   1376e:	4331      	orrs	r1, r6
   13770:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   13772:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	return dev->data;
   13776:	692a      	ldr	r2, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
   13778:	3204      	adds	r2, #4
   1377a:	e894 0003 	ldmia.w	r4, {r0, r1}
   1377e:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
   13782:	e7b9      	b.n	136f8 <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   13784:	230e      	movs	r3, #14
   13786:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
   1378a:	e7e2      	b.n	13752 <uarte_nrfx_configure+0x70>
		return -ENOTSUP;
   1378c:	f06f 0385 	mvn.w	r3, #133	; 0x85
   13790:	e7b2      	b.n	136f8 <uarte_nrfx_configure+0x16>
			return -ENOTSUP;
   13792:	f06f 0385 	mvn.w	r3, #133	; 0x85
   13796:	e7af      	b.n	136f8 <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
   13798:	f06f 0385 	mvn.w	r3, #133	; 0x85
   1379c:	e7ac      	b.n	136f8 <uarte_nrfx_configure+0x16>

0001379e <uarte_nrfx_config_get>:
{
   1379e:	460b      	mov	r3, r1
	return dev->data;
   137a0:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
   137a2:	6891      	ldr	r1, [r2, #8]
   137a4:	6850      	ldr	r0, [r2, #4]
   137a6:	e883 0003 	stmia.w	r3, {r0, r1}
}
   137aa:	2000      	movs	r0, #0
   137ac:	4770      	bx	lr

000137ae <uarte_nrfx_err_check>:
	return dev->config;
   137ae:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   137b0:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   137b2:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   137b6:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   137ba:	4770      	bx	lr

000137bc <is_tx_ready>:
	return dev->config;
   137bc:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   137be:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   137c0:	685b      	ldr	r3, [r3, #4]
   137c2:	f003 0308 	and.w	r3, r3, #8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   137c6:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   137ca:	b929      	cbnz	r1, 137d8 <is_tx_ready+0x1c>
   137cc:	b933      	cbnz	r3, 137dc <is_tx_ready+0x20>
   137ce:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   137d2:	b92b      	cbnz	r3, 137e0 <is_tx_ready+0x24>
   137d4:	2000      	movs	r0, #0
   137d6:	4770      	bx	lr
   137d8:	2001      	movs	r0, #1
   137da:	4770      	bx	lr
   137dc:	2000      	movs	r0, #0
   137de:	4770      	bx	lr
   137e0:	2001      	movs	r0, #1
}
   137e2:	4770      	bx	lr

000137e4 <uarte_enable>:
	return dev->config;
   137e4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   137e6:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   137e8:	2208      	movs	r2, #8
   137ea:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   137ee:	4770      	bx	lr

000137f0 <tx_start>:
{
   137f0:	b510      	push	{r4, lr}
	return dev->config;
   137f2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   137f4:	681c      	ldr	r4, [r3, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   137f6:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   137fa:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   137fe:	2300      	movs	r3, #0
   13800:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   13804:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   13808:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   1380c:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
   13810:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   13812:	685b      	ldr	r3, [r3, #4]
   13814:	f013 0f10 	tst.w	r3, #16
   13818:	d102      	bne.n	13820 <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1381a:	2301      	movs	r3, #1
   1381c:	60a3      	str	r3, [r4, #8]
}
   1381e:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   13820:	2101      	movs	r1, #1
   13822:	f7ff ffdf 	bl	137e4 <uarte_enable>
    p_reg->INTENSET = mask;
   13826:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   1382a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   1382e:	e7f4      	b.n	1381a <tx_start+0x2a>

00013830 <uarte_nrfx_poll_in>:
{
   13830:	b410      	push	{r4}
	return dev->data;
   13832:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   13834:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   13836:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13838:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   1383c:	b152      	cbz	r2, 13854 <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
   1383e:	7d62      	ldrb	r2, [r4, #21]
   13840:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13842:	2000      	movs	r0, #0
   13844:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   13848:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1384c:	2201      	movs	r2, #1
   1384e:	601a      	str	r2, [r3, #0]
}
   13850:	bc10      	pop	{r4}
   13852:	4770      	bx	lr
		return -1;
   13854:	f04f 30ff 	mov.w	r0, #4294967295
   13858:	e7fa      	b.n	13850 <uarte_nrfx_poll_in+0x20>

0001385a <uarte_nrfx_fifo_fill>:
{
   1385a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1385e:	4680      	mov	r8, r0
	return dev->data;
   13860:	6907      	ldr	r7, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   13862:	68fb      	ldr	r3, [r7, #12]
   13864:	899e      	ldrh	r6, [r3, #12]
   13866:	4296      	cmp	r6, r2
   13868:	bfa8      	it	ge
   1386a:	4616      	movge	r6, r2
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   1386c:	3310      	adds	r3, #16
   1386e:	2201      	movs	r2, #1
   13870:	f3bf 8f5b 	dmb	ish
   13874:	e853 0f00 	ldrex	r0, [r3]
   13878:	2800      	cmp	r0, #0
   1387a:	d103      	bne.n	13884 <uarte_nrfx_fifo_fill+0x2a>
   1387c:	e843 2400 	strex	r4, r2, [r3]
   13880:	2c00      	cmp	r4, #0
   13882:	d1f7      	bne.n	13874 <uarte_nrfx_fifo_fill+0x1a>
   13884:	f3bf 8f5b 	dmb	ish
   13888:	d101      	bne.n	1388e <uarte_nrfx_fifo_fill+0x34>
	for (int i = 0; i < len; i++) {
   1388a:	2300      	movs	r3, #0
   1388c:	e006      	b.n	1389c <uarte_nrfx_fifo_fill+0x42>
		return 0;
   1388e:	2600      	movs	r6, #0
   13890:	e019      	b.n	138c6 <uarte_nrfx_fifo_fill+0x6c>
		data->int_driven->tx_buffer[i] = tx_data[i];
   13892:	68fc      	ldr	r4, [r7, #12]
   13894:	68a4      	ldr	r4, [r4, #8]
   13896:	5ccd      	ldrb	r5, [r1, r3]
   13898:	54e5      	strb	r5, [r4, r3]
	for (int i = 0; i < len; i++) {
   1389a:	3301      	adds	r3, #1
   1389c:	42b3      	cmp	r3, r6
   1389e:	dbf8      	blt.n	13892 <uarte_nrfx_fifo_fill+0x38>
	__asm__ volatile(
   138a0:	f04f 0320 	mov.w	r3, #32
   138a4:	f3ef 8411 	mrs	r4, BASEPRI
   138a8:	f383 8812 	msr	BASEPRI_MAX, r3
   138ac:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   138b0:	4640      	mov	r0, r8
   138b2:	f7ff ff83 	bl	137bc <is_tx_ready>
   138b6:	b948      	cbnz	r0, 138cc <uarte_nrfx_fifo_fill+0x72>
		data->int_driven->fifo_fill_lock = 0;
   138b8:	68fb      	ldr	r3, [r7, #12]
   138ba:	2600      	movs	r6, #0
   138bc:	611e      	str	r6, [r3, #16]
	__asm__ volatile(
   138be:	f384 8811 	msr	BASEPRI, r4
   138c2:	f3bf 8f6f 	isb	sy
}
   138c6:	4630      	mov	r0, r6
   138c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
   138cc:	68fb      	ldr	r3, [r7, #12]
   138ce:	4632      	mov	r2, r6
   138d0:	6899      	ldr	r1, [r3, #8]
   138d2:	4640      	mov	r0, r8
   138d4:	f7ff ff8c 	bl	137f0 <tx_start>
   138d8:	e7f1      	b.n	138be <uarte_nrfx_fifo_fill+0x64>

000138da <uarte_nrfx_fifo_read>:
	return dev->config;
   138da:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   138dc:	681b      	ldr	r3, [r3, #0]
	return dev->data;
   138de:	6900      	ldr	r0, [r0, #16]
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   138e0:	2a00      	cmp	r2, #0
   138e2:	dd0c      	ble.n	138fe <uarte_nrfx_fifo_read+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   138e4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   138e8:	b15a      	cbz	r2, 13902 <uarte_nrfx_fifo_read+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   138ea:	2200      	movs	r2, #0
   138ec:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   138f0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   138f4:	7d42      	ldrb	r2, [r0, #21]
   138f6:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   138f8:	2001      	movs	r0, #1
   138fa:	6018      	str	r0, [r3, #0]
}
   138fc:	4770      	bx	lr
	int num_rx = 0;
   138fe:	2000      	movs	r0, #0
   13900:	4770      	bx	lr
   13902:	2000      	movs	r0, #0
}
   13904:	4770      	bx	lr

00013906 <uarte_nrfx_irq_tx_enable>:
	return dev->config;
   13906:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   13908:	681a      	ldr	r2, [r3, #0]
	return dev->data;
   1390a:	6901      	ldr	r1, [r0, #16]
	__asm__ volatile(
   1390c:	f04f 0020 	mov.w	r0, #32
   13910:	f3ef 8311 	mrs	r3, BASEPRI
   13914:	f380 8812 	msr	BASEPRI_MAX, r0
   13918:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   1391c:	68c9      	ldr	r1, [r1, #12]
   1391e:	2000      	movs	r0, #0
   13920:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   13922:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   13926:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   1392a:	f383 8811 	msr	BASEPRI, r3
   1392e:	f3bf 8f6f 	isb	sy
}
   13932:	4770      	bx	lr

00013934 <uarte_nrfx_irq_tx_disable>:
	return dev->data;
   13934:	6903      	ldr	r3, [r0, #16]
	data->int_driven->disable_tx_irq = true;
   13936:	68db      	ldr	r3, [r3, #12]
   13938:	2201      	movs	r2, #1
   1393a:	739a      	strb	r2, [r3, #14]
}
   1393c:	4770      	bx	lr

0001393e <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config;
   1393e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   13940:	6819      	ldr	r1, [r3, #0]
	return dev->data;
   13942:	6903      	ldr	r3, [r0, #16]
	bool ready = !data->int_driven->disable_tx_irq &&
   13944:	68db      	ldr	r3, [r3, #12]
   13946:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   13948:	b94a      	cbnz	r2, 1395e <uarte_nrfx_irq_tx_ready_complete+0x20>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1394a:	f8d1 2158 	ldr.w	r2, [r1, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   1394e:	b15a      	cbz	r2, 13968 <uarte_nrfx_irq_tx_ready_complete+0x2a>
    return p_reg->INTENSET & mask;
   13950:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   13954:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
   13958:	d008      	beq.n	1396c <uarte_nrfx_irq_tx_ready_complete+0x2e>
   1395a:	2001      	movs	r0, #1
   1395c:	e000      	b.n	13960 <uarte_nrfx_irq_tx_ready_complete+0x22>
   1395e:	2000      	movs	r0, #0
	if (ready) {
   13960:	b108      	cbz	r0, 13966 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
   13962:	2200      	movs	r2, #0
   13964:	611a      	str	r2, [r3, #16]
}
   13966:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   13968:	2000      	movs	r0, #0
   1396a:	e7f9      	b.n	13960 <uarte_nrfx_irq_tx_ready_complete+0x22>
   1396c:	2000      	movs	r0, #0
   1396e:	e7f7      	b.n	13960 <uarte_nrfx_irq_tx_ready_complete+0x22>

00013970 <uarte_nrfx_irq_rx_ready>:
	return dev->config;
   13970:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   13972:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13974:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   13978:	3800      	subs	r0, #0
   1397a:	bf18      	it	ne
   1397c:	2001      	movne	r0, #1
   1397e:	4770      	bx	lr

00013980 <uarte_nrfx_irq_rx_enable>:
	return dev->config;
   13980:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   13982:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   13984:	2210      	movs	r2, #16
   13986:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   1398a:	4770      	bx	lr

0001398c <uarte_nrfx_irq_rx_disable>:
	return dev->config;
   1398c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1398e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   13990:	2210      	movs	r2, #16
   13992:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   13996:	4770      	bx	lr

00013998 <uarte_nrfx_irq_err_enable>:
	return dev->config;
   13998:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1399a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1399c:	f44f 7200 	mov.w	r2, #512	; 0x200
   139a0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   139a4:	4770      	bx	lr

000139a6 <uarte_nrfx_irq_err_disable>:
	return dev->config;
   139a6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   139a8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   139aa:	f44f 7200 	mov.w	r2, #512	; 0x200
   139ae:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   139b2:	4770      	bx	lr

000139b4 <uarte_nrfx_irq_is_pending>:
{
   139b4:	b538      	push	{r3, r4, r5, lr}
   139b6:	4604      	mov	r4, r0
	return dev->config;
   139b8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   139ba:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   139bc:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   139c0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
   139c4:	d106      	bne.n	139d4 <uarte_nrfx_irq_is_pending+0x20>
   139c6:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   139ca:	f013 0f10 	tst.w	r3, #16
   139ce:	d107      	bne.n	139e0 <uarte_nrfx_irq_is_pending+0x2c>
   139d0:	2000      	movs	r0, #0
}
   139d2:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   139d4:	f7ff ffb3 	bl	1393e <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   139d8:	2800      	cmp	r0, #0
   139da:	d0f4      	beq.n	139c6 <uarte_nrfx_irq_is_pending+0x12>
		||
   139dc:	2001      	movs	r0, #1
   139de:	e7f8      	b.n	139d2 <uarte_nrfx_irq_is_pending+0x1e>
		 uarte_nrfx_irq_rx_ready(dev)));
   139e0:	4620      	mov	r0, r4
   139e2:	f7ff ffc5 	bl	13970 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   139e6:	2800      	cmp	r0, #0
   139e8:	d0f3      	beq.n	139d2 <uarte_nrfx_irq_is_pending+0x1e>
		||
   139ea:	2001      	movs	r0, #1
   139ec:	e7f1      	b.n	139d2 <uarte_nrfx_irq_is_pending+0x1e>

000139ee <uarte_nrfx_irq_update>:
}
   139ee:	2001      	movs	r0, #1
   139f0:	4770      	bx	lr

000139f2 <uarte_nrfx_irq_callback_set>:
	return dev->data;
   139f2:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
   139f4:	68d8      	ldr	r0, [r3, #12]
   139f6:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
   139f8:	68db      	ldr	r3, [r3, #12]
   139fa:	605a      	str	r2, [r3, #4]
}
   139fc:	4770      	bx	lr

000139fe <wait_tx_ready>:
{
   139fe:	b570      	push	{r4, r5, r6, lr}
   13a00:	4606      	mov	r6, r0
   13a02:	e014      	b.n	13a2e <wait_tx_ready+0x30>
		if (res) {
   13a04:	b17d      	cbz	r5, 13a26 <wait_tx_ready+0x28>
	__asm__ volatile(
   13a06:	f04f 0320 	mov.w	r3, #32
   13a0a:	f3ef 8411 	mrs	r4, BASEPRI
   13a0e:	f383 8812 	msr	BASEPRI_MAX, r3
   13a12:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   13a16:	4630      	mov	r0, r6
   13a18:	f7ff fed0 	bl	137bc <is_tx_ready>
   13a1c:	b9a0      	cbnz	r0, 13a48 <wait_tx_ready+0x4a>
	__asm__ volatile(
   13a1e:	f384 8811 	msr	BASEPRI, r4
   13a22:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
   13a26:	2021      	movs	r0, #33	; 0x21
   13a28:	2100      	movs	r1, #0
   13a2a:	f7fc fc53 	bl	102d4 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   13a2e:	2464      	movs	r4, #100	; 0x64
   13a30:	4630      	mov	r0, r6
   13a32:	f7ff fec3 	bl	137bc <is_tx_ready>
   13a36:	4605      	mov	r5, r0
   13a38:	2800      	cmp	r0, #0
   13a3a:	d1e3      	bne.n	13a04 <wait_tx_ready+0x6>
   13a3c:	2001      	movs	r0, #1
   13a3e:	f000 f8a0 	bl	13b82 <nrfx_busy_wait>
   13a42:	3c01      	subs	r4, #1
   13a44:	d1f4      	bne.n	13a30 <wait_tx_ready+0x32>
   13a46:	e7dd      	b.n	13a04 <wait_tx_ready+0x6>
}
   13a48:	4620      	mov	r0, r4
   13a4a:	bd70      	pop	{r4, r5, r6, pc}

00013a4c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   13a4c:	b510      	push	{r4, lr}
   13a4e:	4604      	mov	r4, r0
   13a50:	2200      	movs	r2, #0
   13a52:	2101      	movs	r1, #1
   13a54:	2002      	movs	r0, #2
   13a56:	f7f1 fb81 	bl	515c <z_arm_irq_priority_set>
   13a5a:	2002      	movs	r0, #2
   13a5c:	f7f1 fb4c 	bl	50f8 <arch_irq_enable>
   13a60:	2101      	movs	r1, #1
   13a62:	4620      	mov	r0, r4
   13a64:	f7f5 fc86 	bl	9374 <uarte_instance_init>
   13a68:	bd10      	pop	{r4, pc}

00013a6a <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   13a6a:	4770      	bx	lr

00013a6c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   13a6c:	4770      	bx	lr

00013a6e <counter_sub>:
	return (a - b) & COUNTER_MAX;
   13a6e:	1a40      	subs	r0, r0, r1
}
   13a70:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   13a74:	4770      	bx	lr

00013a76 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   13a76:	f100 0350 	add.w	r3, r0, #80	; 0x50
   13a7a:	009b      	lsls	r3, r3, #2
   13a7c:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   13a7e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   13a82:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   13a86:	2200      	movs	r2, #0
   13a88:	601a      	str	r2, [r3, #0]
   13a8a:	681b      	ldr	r3, [r3, #0]
}
   13a8c:	4770      	bx	lr

00013a8e <absolute_time_to_cc>:
}
   13a8e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   13a92:	4770      	bx	lr

00013a94 <full_int_lock>:
	__asm__ volatile(
   13a94:	f04f 0320 	mov.w	r3, #32
   13a98:	f3ef 8011 	mrs	r0, BASEPRI
   13a9c:	f383 8812 	msr	BASEPRI_MAX, r3
   13aa0:	f3bf 8f6f 	isb	sy
}
   13aa4:	4770      	bx	lr

00013aa6 <full_int_unlock>:
	__asm__ volatile(
   13aa6:	f380 8811 	msr	BASEPRI, r0
   13aaa:	f3bf 8f6f 	isb	sy
}
   13aae:	4770      	bx	lr

00013ab0 <set_absolute_alarm>:
{
   13ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13ab2:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   13ab4:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   13ab8:	f7f5 fd22 	bl	9500 <get_comparator>
   13abc:	4607      	mov	r7, r0
   13abe:	e019      	b.n	13af4 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   13ac0:	2013      	movs	r0, #19
   13ac2:	f001 fff1 	bl	15aa8 <z_impl_k_busy_wait>
}
   13ac6:	e022      	b.n	13b0e <set_absolute_alarm+0x5e>
		event_clear(chan);
   13ac8:	4630      	mov	r0, r6
   13aca:	f7ff ffd4 	bl	13a76 <event_clear>
		event_enable(chan);
   13ace:	4630      	mov	r0, r6
   13ad0:	f7f5 fd1e 	bl	9510 <event_enable>
		set_comparator(chan, cc_val);
   13ad4:	4629      	mov	r1, r5
   13ad6:	4630      	mov	r0, r6
   13ad8:	f7f5 fd08 	bl	94ec <set_comparator>
		now2 = counter();
   13adc:	f7f5 fd2c 	bl	9538 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   13ae0:	4284      	cmp	r4, r0
   13ae2:	d01e      	beq.n	13b22 <set_absolute_alarm+0x72>
   13ae4:	1c81      	adds	r1, r0, #2
   13ae6:	4628      	mov	r0, r5
   13ae8:	f7ff ffc1 	bl	13a6e <counter_sub>
	} while ((now2 != now) &&
   13aec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   13af0:	d917      	bls.n	13b22 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   13af2:	462f      	mov	r7, r5
		now = counter();
   13af4:	f7f5 fd20 	bl	9538 <counter>
   13af8:	4604      	mov	r4, r0
		set_comparator(chan, now);
   13afa:	4601      	mov	r1, r0
   13afc:	4630      	mov	r0, r6
   13afe:	f7f5 fcf5 	bl	94ec <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   13b02:	4621      	mov	r1, r4
   13b04:	4638      	mov	r0, r7
   13b06:	f7ff ffb2 	bl	13a6e <counter_sub>
   13b0a:	2801      	cmp	r0, #1
   13b0c:	d0d8      	beq.n	13ac0 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   13b0e:	1ca7      	adds	r7, r4, #2
   13b10:	4639      	mov	r1, r7
   13b12:	4628      	mov	r0, r5
   13b14:	f7ff ffab 	bl	13a6e <counter_sub>
   13b18:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   13b1c:	d9d4      	bls.n	13ac8 <set_absolute_alarm+0x18>
			cc_val = now + 2;
   13b1e:	463d      	mov	r5, r7
   13b20:	e7d2      	b.n	13ac8 <set_absolute_alarm+0x18>
}
   13b22:	4628      	mov	r0, r5
   13b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013b26 <compare_set>:
{
   13b26:	b5f0      	push	{r4, r5, r6, r7, lr}
   13b28:	b083      	sub	sp, #12
   13b2a:	4604      	mov	r4, r0
   13b2c:	4617      	mov	r7, r2
   13b2e:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   13b30:	f7f5 fd08 	bl	9544 <compare_int_lock>
   13b34:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   13b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13b38:	9301      	str	r3, [sp, #4]
   13b3a:	9b08      	ldr	r3, [sp, #32]
   13b3c:	9300      	str	r3, [sp, #0]
   13b3e:	463a      	mov	r2, r7
   13b40:	462b      	mov	r3, r5
   13b42:	4620      	mov	r0, r4
   13b44:	f7f5 fdec 	bl	9720 <compare_set_nolocks>
   13b48:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   13b4a:	4631      	mov	r1, r6
   13b4c:	4620      	mov	r0, r4
   13b4e:	f7f5 fd5d 	bl	960c <compare_int_unlock>
}
   13b52:	4628      	mov	r0, r5
   13b54:	b003      	add	sp, #12
   13b56:	bdf0      	pop	{r4, r5, r6, r7, pc}

00013b58 <sys_clock_cycle_get_32>:

uint32_t sys_clock_cycle_get_32(void)
{
   13b58:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   13b5a:	f7f5 fdc1 	bl	96e0 <z_nrf_rtc_timer_read>
}
   13b5e:	bd08      	pop	{r3, pc}

00013b60 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
   13b60:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
   13b62:	f7fc fedf 	bl	10924 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
   13b66:	bd08      	pop	{r3, pc}

00013b68 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
   13b68:	b510      	push	{r4, lr}
   13b6a:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   13b6c:	f7f1 f986 	bl	4e7c <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   13b70:	f7f1 fa42 	bl	4ff8 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
   13b74:	4620      	mov	r0, r4
   13b76:	f7ff fff3 	bl	13b60 <hw_cc3xx_init_internal>
	return res;
}
   13b7a:	bd10      	pop	{r4, pc}

00013b7c <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
   13b7c:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   13b7e:	4780      	blx	r0
}
   13b80:	bd08      	pop	{r3, pc}

00013b82 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   13b82:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   13b84:	f001 ff90 	bl	15aa8 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
   13b88:	bd08      	pop	{r3, pc}

00013b8a <is_app_channel>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   13b8a:	2301      	movs	r3, #1
   13b8c:	4083      	lsls	r3, r0
   13b8e:	f013 0fff 	tst.w	r3, #255	; 0xff
}
   13b92:	bf14      	ite	ne
   13b94:	2001      	movne	r0, #1
   13b96:	2000      	moveq	r0, #0
   13b98:	4770      	bx	lr

00013b9a <flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   13b9a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   13b9e:	6918      	ldr	r0, [r3, #16]
}
   13ba0:	4770      	bx	lr

00013ba2 <flash_page_count_get>:
    return p_reg->CODESIZE;
   13ba2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   13ba6:	6958      	ldr	r0, [r3, #20]
}
   13ba8:	4770      	bx	lr

00013baa <flash_total_size_get>:
{
   13baa:	b510      	push	{r4, lr}
    return flash_page_size_get() * flash_page_count_get();
   13bac:	f7ff fff5 	bl	13b9a <flash_page_size_get>
   13bb0:	4604      	mov	r4, r0
   13bb2:	f7ff fff6 	bl	13ba2 <flash_page_count_get>
}
   13bb6:	fb00 f004 	mul.w	r0, r0, r4
   13bba:	bd10      	pop	{r4, pc}

00013bbc <is_page_aligned_check>:
{
   13bbc:	b510      	push	{r4, lr}
   13bbe:	4604      	mov	r4, r0
    return !(addr % flash_page_size_get());
   13bc0:	f7ff ffeb 	bl	13b9a <flash_page_size_get>
   13bc4:	fbb4 f3f0 	udiv	r3, r4, r0
   13bc8:	fb00 4013 	mls	r0, r0, r3, r4
}
   13bcc:	fab0 f080 	clz	r0, r0
   13bd0:	0940      	lsrs	r0, r0, #5
   13bd2:	bd10      	pop	{r4, pc}

00013bd4 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   13bd4:	b538      	push	{r3, r4, r5, lr}
   13bd6:	4604      	mov	r4, r0
   13bd8:	460d      	mov	r5, r1
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();
   13bda:	f7f6 f9ed 	bl	9fb8 <nvmc_write_mode_set>

    nvmc_word_write(addr, value);
   13bde:	4629      	mov	r1, r5
   13be0:	4620      	mov	r0, r4
   13be2:	f7f6 f9f9 	bl	9fd8 <nvmc_word_write>

    nvmc_readonly_mode_set();
   13be6:	f7f6 f9df 	bl	9fa8 <nvmc_readonly_mode_set>
}
   13bea:	bd38      	pop	{r3, r4, r5, pc}

00013bec <nrfx_nvmc_flash_size_get>:
    return (nrfx_is_word_aligned((void const *)addr) ? (uint16_t)(val32)
                                                     : (uint16_t)(val32 >> 16));
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
   13bec:	b508      	push	{r3, lr}
    return flash_total_size_get();
   13bee:	f7ff ffdc 	bl	13baa <flash_total_size_get>
}
   13bf2:	bd08      	pop	{r3, pc}

00013bf4 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
   13bf4:	b508      	push	{r3, lr}
    return flash_page_size_get();
   13bf6:	f7ff ffd0 	bl	13b9a <flash_page_size_get>
}
   13bfa:	bd08      	pop	{r3, pc}

00013bfc <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
   13bfc:	b508      	push	{r3, lr}
    return flash_page_count_get();
   13bfe:	f7ff ffd0 	bl	13ba2 <flash_page_count_get>
}
   13c02:	bd08      	pop	{r3, pc}

00013c04 <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
   13c04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13c08:	f44f 7260 	mov.w	r2, #896	; 0x380
   13c0c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   13c10:	4770      	bx	lr

00013c12 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
   13c12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   13c16:	f44f 7260 	mov.w	r2, #896	; 0x380
   13c1a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   13c1e:	4770      	bx	lr

00013c20 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
   13c20:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
   13c22:	f7f6 fa63 	bl	a0ec <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
   13c26:	f7f6 f90b 	bl	9e40 <nrfx_clock_irq_handler>
}
   13c2a:	bd08      	pop	{r3, pc}

00013c2c <xfer_completeness_check>:
    if (p_cb->bytes_transferred != p_cb->curr_length)
   13c2c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
   13c2e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   13c30:	429a      	cmp	r2, r3
   13c32:	d007      	beq.n	13c44 <xfer_completeness_check+0x18>
   13c34:	2300      	movs	r3, #0
   13c36:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   13c3a:	2205      	movs	r2, #5
   13c3c:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
        return false;
   13c40:	4618      	mov	r0, r3
   13c42:	4770      	bx	lr
        return true;
   13c44:	2001      	movs	r0, #1
}
   13c46:	4770      	bx	lr

00013c48 <twi_send_byte>:
{
   13c48:	4603      	mov	r3, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
   13c4a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
   13c4c:	6a88      	ldr	r0, [r1, #40]	; 0x28
   13c4e:	4282      	cmp	r2, r0
   13c50:	d205      	bcs.n	13c5e <twi_send_byte+0x16>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
   13c52:	6a49      	ldr	r1, [r1, #36]	; 0x24
   13c54:	5c8a      	ldrb	r2, [r1, r2]
    p_reg->TXD = data;
   13c56:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    return true;
   13c5a:	2001      	movs	r0, #1
}
   13c5c:	4770      	bx	lr
        if (p_cb->curr_tx_no_stop)
   13c5e:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
   13c62:	b930      	cbnz	r0, 13c72 <twi_send_byte+0x2a>
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
   13c64:	6a0a      	ldr	r2, [r1, #32]
   13c66:	f012 0f40 	tst.w	r2, #64	; 0x40
   13c6a:	d106      	bne.n	13c7a <twi_send_byte+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13c6c:	2001      	movs	r0, #1
   13c6e:	6158      	str	r0, [r3, #20]
}
   13c70:	4770      	bx	lr
   13c72:	2201      	movs	r2, #1
   13c74:	61da      	str	r2, [r3, #28]
            return false;
   13c76:	2000      	movs	r0, #0
   13c78:	4770      	bx	lr
   13c7a:	2201      	movs	r2, #1
   13c7c:	61da      	str	r2, [r3, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
   13c7e:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
            return false;
   13c82:	4770      	bx	lr

00013c84 <twi_receive_byte>:
    if (p_cb->bytes_transferred < p_cb->curr_length)
   13c84:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   13c86:	6a8a      	ldr	r2, [r1, #40]	; 0x28
   13c88:	4293      	cmp	r3, r2
   13c8a:	d22b      	bcs.n	13ce4 <twi_receive_byte+0x60>
{
   13c8c:	b410      	push	{r4}
   13c8e:	4604      	mov	r4, r0
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
   13c90:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
   13c92:	f8d0 0518 	ldr.w	r0, [r0, #1304]	; 0x518
   13c96:	54d0      	strb	r0, [r2, r3]
        ++(p_cb->bytes_transferred);
   13c98:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   13c9a:	3301      	adds	r3, #1
   13c9c:	634b      	str	r3, [r1, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   13c9e:	6a8a      	ldr	r2, [r1, #40]	; 0x28
   13ca0:	1e50      	subs	r0, r2, #1
   13ca2:	4283      	cmp	r3, r0
   13ca4:	d007      	beq.n	13cb6 <twi_receive_byte+0x32>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   13ca6:	4293      	cmp	r3, r2
   13ca8:	d00d      	beq.n	13cc6 <twi_receive_byte+0x42>
        else if (p_cb->bytes_transferred == p_cb->curr_length && TWI_FLAG_SUSPEND(p_cb->flags))
   13caa:	4293      	cmp	r3, r2
   13cac:	d011      	beq.n	13cd2 <twi_receive_byte+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13cae:	2001      	movs	r0, #1
   13cb0:	6220      	str	r0, [r4, #32]
}
   13cb2:	bc10      	pop	{r4}
   13cb4:	4770      	bx	lr
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   13cb6:	6a08      	ldr	r0, [r1, #32]
   13cb8:	f010 0f40 	tst.w	r0, #64	; 0x40
   13cbc:	d1f3      	bne.n	13ca6 <twi_receive_byte+0x22>
    p_reg->SHORTS = mask;
   13cbe:	2302      	movs	r3, #2
   13cc0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
}
   13cc4:	e7f3      	b.n	13cae <twi_receive_byte+0x2a>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   13cc6:	6a08      	ldr	r0, [r1, #32]
   13cc8:	f010 0f40 	tst.w	r0, #64	; 0x40
   13ccc:	d1ed      	bne.n	13caa <twi_receive_byte+0x26>
            return true;
   13cce:	2001      	movs	r0, #1
   13cd0:	e7ef      	b.n	13cb2 <twi_receive_byte+0x2e>
        else if (p_cb->bytes_transferred == p_cb->curr_length && TWI_FLAG_SUSPEND(p_cb->flags))
   13cd2:	6a0b      	ldr	r3, [r1, #32]
   13cd4:	f013 0f40 	tst.w	r3, #64	; 0x40
   13cd8:	d0e9      	beq.n	13cae <twi_receive_byte+0x2a>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
   13cda:	2302      	movs	r3, #2
   13cdc:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
   13ce0:	2000      	movs	r0, #0
   13ce2:	e7e6      	b.n	13cb2 <twi_receive_byte+0x2e>
    return true;
   13ce4:	2001      	movs	r0, #1
}
   13ce6:	4770      	bx	lr

00013ce8 <twi_transfer>:
{
   13ce8:	b570      	push	{r4, r5, r6, lr}
   13cea:	4604      	mov	r4, r0
   13cec:	460d      	mov	r5, r1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13cee:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
   13cf2:	b1cb      	cbz	r3, 13d28 <twi_transfer+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13cf4:	2300      	movs	r3, #0
   13cf6:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   13cfa:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
   13cfe:	2601      	movs	r6, #1
    if (p_cb->error)
   13d00:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   13d04:	b193      	cbz	r3, 13d2c <twi_transfer+0x44>
   13d06:	2300      	movs	r3, #0
   13d08:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   13d0c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   13d10:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   13d14:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
   13d18:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   13d1c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    if (stopped)
   13d20:	2e00      	cmp	r6, #0
   13d22:	d14c      	bne.n	13dbe <twi_transfer+0xd6>
    return true;
   13d24:	2001      	movs	r0, #1
}
   13d26:	bd70      	pop	{r4, r5, r6, pc}
    bool stopped = false;
   13d28:	2600      	movs	r6, #0
   13d2a:	e7e9      	b.n	13d00 <twi_transfer+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13d2c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   13d30:	b14b      	cbz	r3, 13d46 <twi_transfer+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13d32:	2300      	movs	r3, #0
   13d34:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   13d38:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13d3c:	2301      	movs	r3, #1
   13d3e:	6163      	str	r3, [r4, #20]
        p_cb->error = true;
   13d40:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   13d44:	e7ec      	b.n	13d20 <twi_transfer+0x38>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13d46:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
   13d4a:	b1db      	cbz	r3, 13d84 <twi_transfer+0x9c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13d4c:	2300      	movs	r3, #0
   13d4e:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   13d52:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
   13d56:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   13d58:	3301      	adds	r3, #1
   13d5a:	636b      	str	r3, [r5, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13d5c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   13d60:	b14b      	cbz	r3, 13d76 <twi_transfer+0x8e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13d62:	2300      	movs	r3, #0
   13d64:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   13d68:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13d6c:	2301      	movs	r3, #1
   13d6e:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
   13d70:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   13d74:	e7d4      	b.n	13d20 <twi_transfer+0x38>
                if (!twi_send_byte(p_twi, p_cb))
   13d76:	4629      	mov	r1, r5
   13d78:	4620      	mov	r0, r4
   13d7a:	f7ff ff65 	bl	13c48 <twi_send_byte>
   13d7e:	2800      	cmp	r0, #0
   13d80:	d1ce      	bne.n	13d20 <twi_transfer+0x38>
   13d82:	e7d0      	b.n	13d26 <twi_transfer+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13d84:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
   13d88:	2b00      	cmp	r3, #0
   13d8a:	d0c9      	beq.n	13d20 <twi_transfer+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13d8c:	2300      	movs	r3, #0
   13d8e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   13d92:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13d96:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   13d9a:	b14b      	cbz	r3, 13db0 <twi_transfer+0xc8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13d9c:	2300      	movs	r3, #0
   13d9e:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   13da2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13da6:	2301      	movs	r3, #1
   13da8:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
   13daa:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   13dae:	e7b7      	b.n	13d20 <twi_transfer+0x38>
                if (!twi_receive_byte(p_twi, p_cb))
   13db0:	4629      	mov	r1, r5
   13db2:	4620      	mov	r0, r4
   13db4:	f7ff ff66 	bl	13c84 <twi_receive_byte>
   13db8:	2800      	cmp	r0, #0
   13dba:	d1b1      	bne.n	13d20 <twi_transfer+0x38>
   13dbc:	e7b3      	b.n	13d26 <twi_transfer+0x3e>
        p_cb->prev_suspend = TWI_NO_SUSPEND;
   13dbe:	2300      	movs	r3, #0
   13dc0:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
        if (!p_cb->error)
   13dc4:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   13dc8:	b10b      	cbz	r3, 13dce <twi_transfer+0xe6>
        return false;
   13dca:	2000      	movs	r0, #0
   13dcc:	e7ab      	b.n	13d26 <twi_transfer+0x3e>
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
   13dce:	4629      	mov	r1, r5
   13dd0:	4620      	mov	r0, r4
   13dd2:	f7ff ff2b 	bl	13c2c <xfer_completeness_check>
   13dd6:	f080 0001 	eor.w	r0, r0, #1
   13dda:	f885 002f 	strb.w	r0, [r5, #47]	; 0x2f
   13dde:	e7f4      	b.n	13dca <twi_transfer+0xe2>

00013de0 <twi_irq_handler>:
{
   13de0:	b5f0      	push	{r4, r5, r6, r7, lr}
   13de2:	b087      	sub	sp, #28
   13de4:	4607      	mov	r7, r0
   13de6:	460c      	mov	r4, r1
    if (twi_transfer(p_twi, p_cb))
   13de8:	f7ff ff7e 	bl	13ce8 <twi_transfer>
   13dec:	2800      	cmp	r0, #0
   13dee:	d15d      	bne.n	13eac <twi_irq_handler+0xcc>
    if (!p_cb->error &&
   13df0:	f894 c02f 	ldrb.w	ip, [r4, #47]	; 0x2f
   13df4:	f1bc 0f00 	cmp.w	ip, #0
   13df8:	d104      	bne.n	13e04 <twi_irq_handler+0x24>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
   13dfa:	7b22      	ldrb	r2, [r4, #12]
   13dfc:	1e93      	subs	r3, r2, #2
   13dfe:	b2db      	uxtb	r3, r3
    if (!p_cb->error &&
   13e00:	2b01      	cmp	r3, #1
   13e02:	d914      	bls.n	13e2e <twi_irq_handler+0x4e>
        event.xfer_desc = p_cb->xfer_desc;
   13e04:	ad01      	add	r5, sp, #4
   13e06:	f104 060c 	add.w	r6, r4, #12
   13e0a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   13e0c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   13e0e:	6833      	ldr	r3, [r6, #0]
   13e10:	602b      	str	r3, [r5, #0]
        if (p_cb->error)
   13e12:	f1bc 0f00 	cmp.w	ip, #0
   13e16:	d038      	beq.n	13e8a <twi_irq_handler+0xaa>
    uint32_t error_source = p_reg->ERRORSRC;
   13e18:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   13e1c:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
   13e20:	f013 0f02 	tst.w	r3, #2
   13e24:	d01f      	beq.n	13e66 <twi_irq_handler+0x86>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
   13e26:	2301      	movs	r3, #1
   13e28:	f88d 3000 	strb.w	r3, [sp]
                NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_ADDRESS_NACK));
   13e2c:	e030      	b.n	13e90 <twi_irq_handler+0xb0>
        p_cb->p_curr_buf == p_cb->xfer_desc.p_primary_buf)
   13e2e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   13e30:	69a3      	ldr	r3, [r4, #24]
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
   13e32:	4299      	cmp	r1, r3
   13e34:	d1e6      	bne.n	13e04 <twi_irq_handler+0x24>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
   13e36:	69e3      	ldr	r3, [r4, #28]
   13e38:	6263      	str	r3, [r4, #36]	; 0x24
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
   13e3a:	6963      	ldr	r3, [r4, #20]
   13e3c:	62a3      	str	r3, [r4, #40]	; 0x28
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   13e3e:	6a23      	ldr	r3, [r4, #32]
   13e40:	f3c3 1340 	ubfx	r3, r3, #5, #1
   13e44:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
   13e48:	2300      	movs	r3, #0
   13e4a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   13e4e:	2a03      	cmp	r2, #3
   13e50:	d004      	beq.n	13e5c <twi_irq_handler+0x7c>
            (void)twi_rx_start_transfer(p_twi, p_cb);
   13e52:	4621      	mov	r1, r4
   13e54:	4638      	mov	r0, r7
   13e56:	f7f6 fa7f 	bl	a358 <twi_rx_start_transfer>
   13e5a:	e027      	b.n	13eac <twi_irq_handler+0xcc>
            (void)twi_tx_start_transfer(p_twi, p_cb);
   13e5c:	4621      	mov	r1, r4
   13e5e:	4638      	mov	r0, r7
   13e60:	f7f6 fa1c 	bl	a29c <twi_tx_start_transfer>
   13e64:	e022      	b.n	13eac <twi_irq_handler+0xcc>
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
   13e66:	f013 0f04 	tst.w	r3, #4
   13e6a:	d003      	beq.n	13e74 <twi_irq_handler+0x94>
                event.type = NRFX_TWI_EVT_DATA_NACK;
   13e6c:	2302      	movs	r3, #2
   13e6e:	f88d 3000 	strb.w	r3, [sp]
                NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_DATA_NACK));
   13e72:	e00d      	b.n	13e90 <twi_irq_handler+0xb0>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
   13e74:	f013 0f01 	tst.w	r3, #1
   13e78:	d003      	beq.n	13e82 <twi_irq_handler+0xa2>
                event.type = NRFX_TWI_EVT_OVERRUN;
   13e7a:	2303      	movs	r3, #3
   13e7c:	f88d 3000 	strb.w	r3, [sp]
                NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_OVERRUN));
   13e80:	e006      	b.n	13e90 <twi_irq_handler+0xb0>
                event.type = NRFX_TWI_EVT_BUS_ERROR;
   13e82:	2304      	movs	r3, #4
   13e84:	f88d 3000 	strb.w	r3, [sp]
                NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_BUS_ERROR));
   13e88:	e002      	b.n	13e90 <twi_irq_handler+0xb0>
            event.type = NRFX_TWI_EVT_DONE;
   13e8a:	2300      	movs	r3, #0
   13e8c:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
   13e90:	2300      	movs	r3, #0
   13e92:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   13e96:	6a23      	ldr	r3, [r4, #32]
   13e98:	f013 0f04 	tst.w	r3, #4
   13e9c:	d002      	beq.n	13ea4 <twi_irq_handler+0xc4>
   13e9e:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   13ea2:	b11b      	cbz	r3, 13eac <twi_irq_handler+0xcc>
            p_cb->handler(&event, p_cb->p_context);
   13ea4:	6823      	ldr	r3, [r4, #0]
   13ea6:	6861      	ldr	r1, [r4, #4]
   13ea8:	4668      	mov	r0, sp
   13eaa:	4798      	blx	r3
}
   13eac:	b007      	add	sp, #28
   13eae:	bdf0      	pop	{r4, r5, r6, r7, pc}

00013eb0 <nrf52_errata_223>:
}
   13eb0:	2000      	movs	r0, #0
   13eb2:	4770      	bx	lr

00013eb4 <nrfx_usbd_consumer>:
{
   13eb4:	b430      	push	{r4, r5}
    size_t size = p_transfer->size;
   13eb6:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
   13eb8:	42a3      	cmp	r3, r4
   13eba:	d908      	bls.n	13ece <nrfx_usbd_consumer+0x1a>
        p_next->size = 0;
   13ebc:	2500      	movs	r5, #0
   13ebe:	6045      	str	r5, [r0, #4]
        p_next->p_data = p_transfer->p_data;
   13ec0:	6809      	ldr	r1, [r1, #0]
   13ec2:	6001      	str	r1, [r0, #0]
    return (ep_size == data_size) && (size != 0);
   13ec4:	429a      	cmp	r2, r3
   13ec6:	d00b      	beq.n	13ee0 <nrfx_usbd_consumer+0x2c>
   13ec8:	2000      	movs	r0, #0
}
   13eca:	bc30      	pop	{r4, r5}
   13ecc:	4770      	bx	lr
        p_next->size = data_size;
   13ece:	6043      	str	r3, [r0, #4]
        p_next->p_data = p_transfer->p_data;
   13ed0:	680d      	ldr	r5, [r1, #0]
   13ed2:	6005      	str	r5, [r0, #0]
        size -= data_size;
   13ed4:	1ae4      	subs	r4, r4, r3
        p_transfer->size = size;
   13ed6:	604c      	str	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
   13ed8:	6808      	ldr	r0, [r1, #0]
   13eda:	4418      	add	r0, r3
   13edc:	6008      	str	r0, [r1, #0]
   13ede:	e7f1      	b.n	13ec4 <nrfx_usbd_consumer+0x10>
    return (ep_size == data_size) && (size != 0);
   13ee0:	b90c      	cbnz	r4, 13ee6 <nrfx_usbd_consumer+0x32>
   13ee2:	2000      	movs	r0, #0
   13ee4:	e7f1      	b.n	13eca <nrfx_usbd_consumer+0x16>
   13ee6:	2001      	movs	r0, #1
   13ee8:	e7ef      	b.n	13eca <nrfx_usbd_consumer+0x16>

00013eea <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
   13eea:	684b      	ldr	r3, [r1, #4]
    if (tx_size > ep_size)
   13eec:	4293      	cmp	r3, r2
   13eee:	d800      	bhi.n	13ef2 <nrfx_usbd_feeder_ram+0x8>
    size_t tx_size = p_transfer->size;
   13ef0:	461a      	mov	r2, r3
    p_next->p_data = p_transfer->p_data;
   13ef2:	680b      	ldr	r3, [r1, #0]
   13ef4:	6003      	str	r3, [r0, #0]
    p_next->size = tx_size;
   13ef6:	6042      	str	r2, [r0, #4]
    p_transfer->size -= tx_size;
   13ef8:	6848      	ldr	r0, [r1, #4]
   13efa:	1a80      	subs	r0, r0, r2
   13efc:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   13efe:	680b      	ldr	r3, [r1, #0]
   13f00:	441a      	add	r2, r3
   13f02:	600a      	str	r2, [r1, #0]
}
   13f04:	3800      	subs	r0, #0
   13f06:	bf18      	it	ne
   13f08:	2001      	movne	r0, #1
   13f0a:	4770      	bx	lr

00013f0c <nrfx_usbd_feeder_ram_zlp>:
    size_t tx_size = p_transfer->size;
   13f0c:	684b      	ldr	r3, [r1, #4]
    if (tx_size > ep_size)
   13f0e:	4293      	cmp	r3, r2
   13f10:	d800      	bhi.n	13f14 <nrfx_usbd_feeder_ram_zlp+0x8>
    size_t tx_size = p_transfer->size;
   13f12:	461a      	mov	r2, r3
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   13f14:	b162      	cbz	r2, 13f30 <nrfx_usbd_feeder_ram_zlp+0x24>
   13f16:	680b      	ldr	r3, [r1, #0]
   13f18:	6003      	str	r3, [r0, #0]
    p_next->size = tx_size;
   13f1a:	6042      	str	r2, [r0, #4]
    p_transfer->size -= tx_size;
   13f1c:	684b      	ldr	r3, [r1, #4]
   13f1e:	1a9b      	subs	r3, r3, r2
   13f20:	604b      	str	r3, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   13f22:	680b      	ldr	r3, [r1, #0]
   13f24:	4413      	add	r3, r2
   13f26:	600b      	str	r3, [r1, #0]
}
   13f28:	1e10      	subs	r0, r2, #0
   13f2a:	bf18      	it	ne
   13f2c:	2001      	movne	r0, #1
   13f2e:	4770      	bx	lr
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   13f30:	2300      	movs	r3, #0
   13f32:	e7f1      	b.n	13f18 <nrfx_usbd_feeder_ram_zlp+0xc>

00013f34 <ev_started_handler>:
}
   13f34:	4770      	bx	lr

00013f36 <usbd_dma_scheduler_algorithm>:
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   13f36:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
   13f3a:	b110      	cbz	r0, 13f42 <usbd_dma_scheduler_algorithm+0xc>
  return __builtin_clz(value);
   13f3c:	fab0 f080 	clz	r0, r0
   13f40:	4770      	bx	lr
    return 32U;
   13f42:	2020      	movs	r0, #32
}
   13f44:	4770      	bx	lr

00013f46 <nrfx_usbd_feeder_flash>:
{
   13f46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13f4a:	4606      	mov	r6, r0
   13f4c:	460c      	mov	r4, r1
   13f4e:	4615      	mov	r5, r2
    size_t tx_size  = p_transfer->size;
   13f50:	f8d1 8004 	ldr.w	r8, [r1, #4]
    void * p_buffer = nrfx_usbd_feeder_buffer_get();
   13f54:	f7f7 f9c4 	bl	b2e0 <nrfx_usbd_feeder_buffer_get>
   13f58:	4607      	mov	r7, r0
    if (tx_size > ep_size)
   13f5a:	45a8      	cmp	r8, r5
   13f5c:	d800      	bhi.n	13f60 <nrfx_usbd_feeder_flash+0x1a>
    size_t tx_size  = p_transfer->size;
   13f5e:	4645      	mov	r5, r8
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   13f60:	462a      	mov	r2, r5
   13f62:	6821      	ldr	r1, [r4, #0]
   13f64:	4638      	mov	r0, r7
   13f66:	f7fe fdab 	bl	12ac0 <memcpy>
    p_next->p_data.tx = p_buffer;
   13f6a:	6037      	str	r7, [r6, #0]
    p_next->size = tx_size;
   13f6c:	6075      	str	r5, [r6, #4]
    p_transfer->size -= tx_size;
   13f6e:	6860      	ldr	r0, [r4, #4]
   13f70:	1b40      	subs	r0, r0, r5
   13f72:	6060      	str	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
   13f74:	6822      	ldr	r2, [r4, #0]
   13f76:	442a      	add	r2, r5
   13f78:	6022      	str	r2, [r4, #0]
}
   13f7a:	3800      	subs	r0, #0
   13f7c:	bf18      	it	ne
   13f7e:	2001      	movne	r0, #1
   13f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00013f84 <nrfx_usbd_feeder_flash_zlp>:
{
   13f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13f88:	4606      	mov	r6, r0
   13f8a:	460d      	mov	r5, r1
   13f8c:	4614      	mov	r4, r2
    size_t tx_size  = p_transfer->size;
   13f8e:	f8d1 8004 	ldr.w	r8, [r1, #4]
    void * p_buffer = nrfx_usbd_feeder_buffer_get();
   13f92:	f7f7 f9a5 	bl	b2e0 <nrfx_usbd_feeder_buffer_get>
   13f96:	4607      	mov	r7, r0
    if (tx_size > ep_size)
   13f98:	45a0      	cmp	r8, r4
   13f9a:	d800      	bhi.n	13f9e <nrfx_usbd_feeder_flash_zlp+0x1a>
    size_t tx_size  = p_transfer->size;
   13f9c:	4644      	mov	r4, r8
    if (tx_size != 0)
   13f9e:	b96c      	cbnz	r4, 13fbc <nrfx_usbd_feeder_flash_zlp+0x38>
        p_next->p_data.tx = NULL;
   13fa0:	2300      	movs	r3, #0
   13fa2:	6033      	str	r3, [r6, #0]
    p_next->size = tx_size;
   13fa4:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
   13fa6:	686b      	ldr	r3, [r5, #4]
   13fa8:	1b1b      	subs	r3, r3, r4
   13faa:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
   13fac:	682b      	ldr	r3, [r5, #0]
   13fae:	4423      	add	r3, r4
   13fb0:	602b      	str	r3, [r5, #0]
}
   13fb2:	1e20      	subs	r0, r4, #0
   13fb4:	bf18      	it	ne
   13fb6:	2001      	movne	r0, #1
   13fb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   13fbc:	4622      	mov	r2, r4
   13fbe:	6829      	ldr	r1, [r5, #0]
   13fc0:	4638      	mov	r0, r7
   13fc2:	f7fe fd7d 	bl	12ac0 <memcpy>
        p_next->p_data.tx = p_buffer;
   13fc6:	6037      	str	r7, [r6, #0]
   13fc8:	e7ec      	b.n	13fa4 <nrfx_usbd_feeder_flash_zlp+0x20>

00013fca <lfs_bd_erase>:
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
   13fca:	b508      	push	{r3, lr}
    int err = lfs->cfg->erase(lfs->cfg, block);
   13fcc:	6e80      	ldr	r0, [r0, #104]	; 0x68
   13fce:	68c3      	ldr	r3, [r0, #12]
   13fd0:	4798      	blx	r3
}
   13fd2:	bd08      	pop	{r3, pc}

00013fd4 <lfs_alloc_lookahead>:
    lfs_block_t off = ((block - lfs->free.off)
   13fd4:	6d43      	ldr	r3, [r0, #84]	; 0x54
   13fd6:	1ac9      	subs	r1, r1, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
   13fd8:	6e83      	ldr	r3, [r0, #104]	; 0x68
   13fda:	6a1a      	ldr	r2, [r3, #32]
   13fdc:	4411      	add	r1, r2
    lfs_block_t off = ((block - lfs->free.off)
   13fde:	fbb1 f3f2 	udiv	r3, r1, r2
   13fe2:	fb02 1113 	mls	r1, r2, r3, r1
    if (off < lfs->free.size) {
   13fe6:	6d83      	ldr	r3, [r0, #88]	; 0x58
   13fe8:	428b      	cmp	r3, r1
   13fea:	d90b      	bls.n	14004 <lfs_alloc_lookahead+0x30>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
   13fec:	6e42      	ldr	r2, [r0, #100]	; 0x64
   13fee:	0948      	lsrs	r0, r1, #5
   13ff0:	f001 011f 	and.w	r1, r1, #31
   13ff4:	2301      	movs	r3, #1
   13ff6:	fa03 f101 	lsl.w	r1, r3, r1
   13ffa:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   13ffe:	430b      	orrs	r3, r1
   14000:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
   14004:	2000      	movs	r0, #0
   14006:	4770      	bx	lr

00014008 <lfs_alloc_ack>:
    lfs->free.ack = lfs->cfg->block_count;
   14008:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1400a:	6a1b      	ldr	r3, [r3, #32]
   1400c:	6603      	str	r3, [r0, #96]	; 0x60
}
   1400e:	4770      	bx	lr

00014010 <lfs_alloc_reset>:
static void lfs_alloc_reset(lfs_t *lfs) {
   14010:	b510      	push	{r4, lr}
    lfs->free.off = lfs->seed % lfs->cfg->block_size;
   14012:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
   14014:	6e82      	ldr	r2, [r0, #104]	; 0x68
   14016:	69d1      	ldr	r1, [r2, #28]
   14018:	fbb4 f2f1 	udiv	r2, r4, r1
   1401c:	fb01 4212 	mls	r2, r1, r2, r4
   14020:	6542      	str	r2, [r0, #84]	; 0x54
    lfs->free.size = 0;
   14022:	2200      	movs	r2, #0
   14024:	6582      	str	r2, [r0, #88]	; 0x58
    lfs->free.i = 0;
   14026:	65c2      	str	r2, [r0, #92]	; 0x5c
    lfs_alloc_ack(lfs);
   14028:	f7ff ffee 	bl	14008 <lfs_alloc_ack>
}
   1402c:	bd10      	pop	{r4, pc}

0001402e <lfs_dir_commit_size>:
    return ((int32_t)(tag << 22) >> 22) == -1;
   1402e:	f341 0309 	sbfx	r3, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
   14032:	f1b3 3fff 	cmp.w	r3, #4294967295
   14036:	bf08      	it	eq
   14038:	3101      	addeq	r1, #1
    return tag & 0x000003ff;
   1403a:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
   1403e:	3104      	adds	r1, #4
    *size += lfs_tag_dsize(tag);
   14040:	6803      	ldr	r3, [r0, #0]
   14042:	4419      	add	r1, r3
   14044:	6001      	str	r1, [r0, #0]
}
   14046:	2000      	movs	r0, #0
   14048:	4770      	bx	lr

0001404a <lfs_fs_preporphans>:
    lfs->gstate.tag += orphans;
   1404a:	6b03      	ldr	r3, [r0, #48]	; 0x30
   1404c:	4419      	add	r1, r3
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
   1404e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    return tag & 0x000003ff;
   14052:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return lfs_tag_size(a->tag);
   14056:	3900      	subs	r1, #0
   14058:	bf18      	it	ne
   1405a:	2101      	movne	r1, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
   1405c:	ea43 71c1 	orr.w	r1, r3, r1, lsl #31
   14060:	6301      	str	r1, [r0, #48]	; 0x30
}
   14062:	4770      	bx	lr

00014064 <lfs_fs_size_count>:
    *size += 1;
   14064:	6803      	ldr	r3, [r0, #0]
   14066:	3301      	adds	r3, #1
   14068:	6003      	str	r3, [r0, #0]
}
   1406a:	2000      	movs	r0, #0
   1406c:	4770      	bx	lr

0001406e <lfs_bd_read>:
        void *buffer, lfs_size_t size) {
   1406e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14072:	b087      	sub	sp, #28
   14074:	4615      	mov	r5, r2
   14076:	469a      	mov	sl, r3
   14078:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1407a:	9c11      	ldr	r4, [sp, #68]	; 0x44
   1407c:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
    if (block >= lfs->cfg->block_count ||
   14080:	6e82      	ldr	r2, [r0, #104]	; 0x68
   14082:	6a13      	ldr	r3, [r2, #32]
   14084:	42b3      	cmp	r3, r6
   14086:	f240 80b8 	bls.w	141fa <lfs_bd_read+0x18c>
   1408a:	4689      	mov	r9, r1
            off+size > lfs->cfg->block_size) {
   1408c:	eb04 030b 	add.w	r3, r4, fp
   14090:	69d2      	ldr	r2, [r2, #28]
    if (block >= lfs->cfg->block_count ||
   14092:	4293      	cmp	r3, r2
   14094:	f200 80b4 	bhi.w	14200 <lfs_bd_read+0x192>
   14098:	9003      	str	r0, [sp, #12]
   1409a:	e07a      	b.n	14192 <lfs_bd_read+0x124>
                off < pcache->off + pcache->size) {
   1409c:	f8d9 3004 	ldr.w	r3, [r9, #4]
   140a0:	f8d9 2008 	ldr.w	r2, [r9, #8]
   140a4:	1899      	adds	r1, r3, r2
        if (pcache && block == pcache->block &&
   140a6:	42a1      	cmp	r1, r4
   140a8:	d91e      	bls.n	140e8 <lfs_bd_read+0x7a>
            if (off >= pcache->off) {
   140aa:	42a3      	cmp	r3, r4
   140ac:	d905      	bls.n	140ba <lfs_bd_read+0x4c>
            diff = lfs_min(diff, pcache->off-off);
   140ae:	1b1b      	subs	r3, r3, r4
   140b0:	455b      	cmp	r3, fp
   140b2:	bf28      	it	cs
   140b4:	465b      	movcs	r3, fp
   140b6:	4698      	mov	r8, r3
   140b8:	e077      	b.n	141aa <lfs_bd_read+0x13c>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
   140ba:	eba3 0804 	sub.w	r8, r3, r4
   140be:	4490      	add	r8, r2
   140c0:	45d8      	cmp	r8, fp
   140c2:	bf28      	it	cs
   140c4:	46d8      	movcs	r8, fp
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
   140c6:	f8d9 100c 	ldr.w	r1, [r9, #12]
   140ca:	1ae3      	subs	r3, r4, r3
   140cc:	4642      	mov	r2, r8
   140ce:	4419      	add	r1, r3
   140d0:	9812      	ldr	r0, [sp, #72]	; 0x48
   140d2:	f7fe fcf5 	bl	12ac0 <memcpy>
                data += diff;
   140d6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   140d8:	4443      	add	r3, r8
   140da:	9312      	str	r3, [sp, #72]	; 0x48
                off += diff;
   140dc:	4444      	add	r4, r8
                size -= diff;
   140de:	ebab 0b08 	sub.w	fp, fp, r8
                continue;
   140e2:	e056      	b.n	14192 <lfs_bd_read+0x124>
        lfs_size_t diff = size;
   140e4:	46d8      	mov	r8, fp
   140e6:	e060      	b.n	141aa <lfs_bd_read+0x13c>
   140e8:	46d8      	mov	r8, fp
   140ea:	e05e      	b.n	141aa <lfs_bd_read+0x13c>
                off < rcache->off + rcache->size) {
   140ec:	686b      	ldr	r3, [r5, #4]
   140ee:	68aa      	ldr	r2, [r5, #8]
   140f0:	1899      	adds	r1, r3, r2
        if (block == rcache->block &&
   140f2:	42a1      	cmp	r1, r4
   140f4:	d95c      	bls.n	141b0 <lfs_bd_read+0x142>
            if (off >= rcache->off) {
   140f6:	42a3      	cmp	r3, r4
   140f8:	d904      	bls.n	14104 <lfs_bd_read+0x96>
            diff = lfs_min(diff, rcache->off-off);
   140fa:	1b1b      	subs	r3, r3, r4
   140fc:	4598      	cmp	r8, r3
   140fe:	bf28      	it	cs
   14100:	4698      	movcs	r8, r3
   14102:	e055      	b.n	141b0 <lfs_bd_read+0x142>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
   14104:	1b19      	subs	r1, r3, r4
   14106:	440a      	add	r2, r1
   14108:	4590      	cmp	r8, r2
   1410a:	bf28      	it	cs
   1410c:	4690      	movcs	r8, r2
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
   1410e:	68e9      	ldr	r1, [r5, #12]
   14110:	1ae3      	subs	r3, r4, r3
   14112:	4642      	mov	r2, r8
   14114:	4419      	add	r1, r3
   14116:	9812      	ldr	r0, [sp, #72]	; 0x48
   14118:	f7fe fcd2 	bl	12ac0 <memcpy>
                data += diff;
   1411c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1411e:	4443      	add	r3, r8
   14120:	9312      	str	r3, [sp, #72]	; 0x48
                off += diff;
   14122:	4444      	add	r4, r8
                size -= diff;
   14124:	ebab 0b08 	sub.w	fp, fp, r8
                continue;
   14128:	e033      	b.n	14192 <lfs_bd_read+0x124>
            data += diff;
   1412a:	9912      	ldr	r1, [sp, #72]	; 0x48
   1412c:	9b04      	ldr	r3, [sp, #16]
   1412e:	4419      	add	r1, r3
   14130:	9112      	str	r1, [sp, #72]	; 0x48
            off += diff;
   14132:	441c      	add	r4, r3
            size -= diff;
   14134:	9a05      	ldr	r2, [sp, #20]
   14136:	eba2 0308 	sub.w	r3, r2, r8
   1413a:	449b      	add	fp, r3
            continue;
   1413c:	e029      	b.n	14192 <lfs_bd_read+0x124>
        rcache->block = block;
   1413e:	602e      	str	r6, [r5, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
   14140:	9f03      	ldr	r7, [sp, #12]
   14142:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   14144:	695b      	ldr	r3, [r3, #20]
    return a - (a % alignment);
   14146:	fbb4 f2f3 	udiv	r2, r4, r3
   1414a:	fb03 4212 	mls	r2, r3, r2, r4
   1414e:	1aa2      	subs	r2, r4, r2
   14150:	606a      	str	r2, [r5, #4]
                lfs_min(
   14152:	eb04 030a 	add.w	r3, r4, sl
                    lfs_alignup(off+hint, lfs->cfg->read_size),
   14156:	6eb9      	ldr	r1, [r7, #104]	; 0x68
                lfs_min(
   14158:	6948      	ldr	r0, [r1, #20]
    return lfs_aligndown(a + alignment-1, alignment);
   1415a:	4403      	add	r3, r0
   1415c:	3b01      	subs	r3, #1
    return a - (a % alignment);
   1415e:	fbb3 fcf0 	udiv	ip, r3, r0
   14162:	fb00 301c 	mls	r0, r0, ip, r3
   14166:	1a1b      	subs	r3, r3, r0
   14168:	69c8      	ldr	r0, [r1, #28]
        rcache->size = lfs_min(
   1416a:	4298      	cmp	r0, r3
   1416c:	bf94      	ite	ls
   1416e:	ebc2 0300 	rsbls	r3, r2, r0
   14172:	ebc2 0303 	rsbhi	r3, r2, r3
   14176:	6a89      	ldr	r1, [r1, #40]	; 0x28
    return (a < b) ? a : b;
   14178:	428b      	cmp	r3, r1
   1417a:	bf28      	it	cs
   1417c:	460b      	movcs	r3, r1
   1417e:	60ab      	str	r3, [r5, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
   14180:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   14182:	f8d0 8004 	ldr.w	r8, [r0, #4]
   14186:	9300      	str	r3, [sp, #0]
   14188:	68eb      	ldr	r3, [r5, #12]
   1418a:	4631      	mov	r1, r6
   1418c:	47c0      	blx	r8
        if (err) {
   1418e:	4603      	mov	r3, r0
   14190:	bb68      	cbnz	r0, 141ee <lfs_bd_read+0x180>
    while (size > 0) {
   14192:	f1bb 0f00 	cmp.w	fp, #0
   14196:	d02e      	beq.n	141f6 <lfs_bd_read+0x188>
        if (pcache && block == pcache->block &&
   14198:	f1b9 0f00 	cmp.w	r9, #0
   1419c:	d0a2      	beq.n	140e4 <lfs_bd_read+0x76>
   1419e:	f8d9 3000 	ldr.w	r3, [r9]
   141a2:	42b3      	cmp	r3, r6
   141a4:	f43f af7a 	beq.w	1409c <lfs_bd_read+0x2e>
        lfs_size_t diff = size;
   141a8:	46d8      	mov	r8, fp
        if (block == rcache->block &&
   141aa:	682b      	ldr	r3, [r5, #0]
   141ac:	42b3      	cmp	r3, r6
   141ae:	d09d      	beq.n	140ec <lfs_bd_read+0x7e>
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
   141b0:	45d3      	cmp	fp, sl
   141b2:	d3c4      	bcc.n	1413e <lfs_bd_read+0xd0>
   141b4:	9b03      	ldr	r3, [sp, #12]
   141b6:	6e98      	ldr	r0, [r3, #104]	; 0x68
   141b8:	6942      	ldr	r2, [r0, #20]
   141ba:	fbb4 f3f2 	udiv	r3, r4, r2
   141be:	fb02 4313 	mls	r3, r2, r3, r4
   141c2:	2b00      	cmp	r3, #0
   141c4:	d1bb      	bne.n	1413e <lfs_bd_read+0xd0>
   141c6:	455a      	cmp	r2, fp
   141c8:	d8b9      	bhi.n	1413e <lfs_bd_read+0xd0>
    return a - (a % alignment);
   141ca:	fbb8 f3f2 	udiv	r3, r8, r2
   141ce:	fb02 8313 	mls	r3, r2, r3, r8
   141d2:	9305      	str	r3, [sp, #20]
   141d4:	eba8 0303 	sub.w	r3, r8, r3
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
   141d8:	6841      	ldr	r1, [r0, #4]
   141da:	460f      	mov	r7, r1
   141dc:	9304      	str	r3, [sp, #16]
   141de:	9300      	str	r3, [sp, #0]
   141e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   141e2:	4622      	mov	r2, r4
   141e4:	4631      	mov	r1, r6
   141e6:	47b8      	blx	r7
            if (err) {
   141e8:	4603      	mov	r3, r0
   141ea:	2800      	cmp	r0, #0
   141ec:	d09d      	beq.n	1412a <lfs_bd_read+0xbc>
}
   141ee:	4618      	mov	r0, r3
   141f0:	b007      	add	sp, #28
   141f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return 0;
   141f6:	2300      	movs	r3, #0
   141f8:	e7f9      	b.n	141ee <lfs_bd_read+0x180>
        return LFS_ERR_CORRUPT;
   141fa:	f06f 0353 	mvn.w	r3, #83	; 0x53
   141fe:	e7f6      	b.n	141ee <lfs_bd_read+0x180>
   14200:	f06f 0353 	mvn.w	r3, #83	; 0x53
   14204:	e7f3      	b.n	141ee <lfs_bd_read+0x180>

00014206 <lfs_fs_parent_match>:
        lfs_tag_t tag, const void *buffer) {
   14206:	b530      	push	{r4, r5, lr}
   14208:	b087      	sub	sp, #28
   1420a:	4604      	mov	r4, r0
    lfs_t *lfs = find->lfs;
   1420c:	6800      	ldr	r0, [r0, #0]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
   1420e:	6e83      	ldr	r3, [r0, #104]	; 0x68
    int err = lfs_bd_read(lfs,
   14210:	69db      	ldr	r3, [r3, #28]
   14212:	2108      	movs	r1, #8
   14214:	9103      	str	r1, [sp, #12]
   14216:	a904      	add	r1, sp, #16
   14218:	9102      	str	r1, [sp, #8]
   1421a:	6851      	ldr	r1, [r2, #4]
   1421c:	9101      	str	r1, [sp, #4]
   1421e:	6812      	ldr	r2, [r2, #0]
   14220:	9200      	str	r2, [sp, #0]
   14222:	4602      	mov	r2, r0
   14224:	f100 0110 	add.w	r1, r0, #16
   14228:	f7ff ff21 	bl	1406e <lfs_bd_read>
    if (err) {
   1422c:	4603      	mov	r3, r0
   1422e:	b978      	cbnz	r0, 14250 <lfs_fs_parent_match+0x4a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   14230:	9a04      	ldr	r2, [sp, #16]
   14232:	6861      	ldr	r1, [r4, #4]
   14234:	4291      	cmp	r1, r2
   14236:	d008      	beq.n	1424a <lfs_fs_parent_match+0x44>
   14238:	9d05      	ldr	r5, [sp, #20]
   1423a:	68a0      	ldr	r0, [r4, #8]
   1423c:	4285      	cmp	r5, r0
   1423e:	d004      	beq.n	1424a <lfs_fs_parent_match+0x44>
   14240:	4282      	cmp	r2, r0
   14242:	d002      	beq.n	1424a <lfs_fs_parent_match+0x44>
   14244:	42a9      	cmp	r1, r5
   14246:	d000      	beq.n	1424a <lfs_fs_parent_match+0x44>
   14248:	2301      	movs	r3, #1
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
   1424a:	3b00      	subs	r3, #0
   1424c:	bf18      	it	ne
   1424e:	2301      	movne	r3, #1
}
   14250:	4618      	mov	r0, r3
   14252:	b007      	add	sp, #28
   14254:	bd30      	pop	{r4, r5, pc}

00014256 <lfs_bd_cmp>:
        const void *buffer, lfs_size_t size) {
   14256:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1425a:	b087      	sub	sp, #28
   1425c:	4607      	mov	r7, r0
   1425e:	460e      	mov	r6, r1
   14260:	4692      	mov	sl, r2
   14262:	461d      	mov	r5, r3
   14264:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
   14268:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
   1426c:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
    for (lfs_off_t i = 0; i < size; i++) {
   14270:	2400      	movs	r4, #0
   14272:	e002      	b.n	1427a <lfs_bd_cmp+0x24>
            return (dat < data[i]) ? LFS_CMP_LT : LFS_CMP_GT;
   14274:	2302      	movs	r3, #2
   14276:	e01e      	b.n	142b6 <lfs_bd_cmp+0x60>
    for (lfs_off_t i = 0; i < size; i++) {
   14278:	3401      	adds	r4, #1
   1427a:	4544      	cmp	r4, r8
   1427c:	d21a      	bcs.n	142b4 <lfs_bd_cmp+0x5e>
        int err = lfs_bd_read(lfs,
   1427e:	2301      	movs	r3, #1
   14280:	9303      	str	r3, [sp, #12]
   14282:	f10d 0317 	add.w	r3, sp, #23
   14286:	9302      	str	r3, [sp, #8]
   14288:	eb04 0309 	add.w	r3, r4, r9
   1428c:	9301      	str	r3, [sp, #4]
   1428e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14290:	9300      	str	r3, [sp, #0]
   14292:	1b2b      	subs	r3, r5, r4
   14294:	4652      	mov	r2, sl
   14296:	4631      	mov	r1, r6
   14298:	4638      	mov	r0, r7
   1429a:	f7ff fee8 	bl	1406e <lfs_bd_read>
        if (err) {
   1429e:	4603      	mov	r3, r0
   142a0:	b948      	cbnz	r0, 142b6 <lfs_bd_cmp+0x60>
        if (dat != data[i]) {
   142a2:	f81b 2004 	ldrb.w	r2, [fp, r4]
   142a6:	f89d 3017 	ldrb.w	r3, [sp, #23]
   142aa:	429a      	cmp	r2, r3
   142ac:	d0e4      	beq.n	14278 <lfs_bd_cmp+0x22>
            return (dat < data[i]) ? LFS_CMP_LT : LFS_CMP_GT;
   142ae:	d9e1      	bls.n	14274 <lfs_bd_cmp+0x1e>
   142b0:	2301      	movs	r3, #1
   142b2:	e000      	b.n	142b6 <lfs_bd_cmp+0x60>
    return LFS_CMP_EQ;
   142b4:	2300      	movs	r3, #0
}
   142b6:	4618      	mov	r0, r3
   142b8:	b007      	add	sp, #28
   142ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000142be <lfs_dir_find_match>:
        lfs_tag_t tag, const void *buffer) {
   142be:	b570      	push	{r4, r5, r6, lr}
   142c0:	b084      	sub	sp, #16
   142c2:	4604      	mov	r4, r0
   142c4:	4615      	mov	r5, r2
    lfs_t *lfs = name->lfs;
   142c6:	6800      	ldr	r0, [r0, #0]
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
   142c8:	68a3      	ldr	r3, [r4, #8]
    return tag & 0x000003ff;
   142ca:	f3c1 0609 	ubfx	r6, r1, #0, #10
    return (a < b) ? a : b;
   142ce:	42b3      	cmp	r3, r6
   142d0:	bf28      	it	cs
   142d2:	4633      	movcs	r3, r6
    int res = lfs_bd_cmp(lfs,
   142d4:	9303      	str	r3, [sp, #12]
   142d6:	6862      	ldr	r2, [r4, #4]
   142d8:	9202      	str	r2, [sp, #8]
   142da:	686a      	ldr	r2, [r5, #4]
   142dc:	9201      	str	r2, [sp, #4]
   142de:	682a      	ldr	r2, [r5, #0]
   142e0:	9200      	str	r2, [sp, #0]
   142e2:	4602      	mov	r2, r0
   142e4:	2100      	movs	r1, #0
   142e6:	f7ff ffb6 	bl	14256 <lfs_bd_cmp>
    if (res != LFS_CMP_EQ) {
   142ea:	b920      	cbnz	r0, 142f6 <lfs_dir_find_match+0x38>
    if (name->size != lfs_tag_size(tag)) {
   142ec:	68a3      	ldr	r3, [r4, #8]
   142ee:	42b3      	cmp	r3, r6
   142f0:	d001      	beq.n	142f6 <lfs_dir_find_match+0x38>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
   142f2:	d202      	bcs.n	142fa <lfs_dir_find_match+0x3c>
   142f4:	2001      	movs	r0, #1
}
   142f6:	b004      	add	sp, #16
   142f8:	bd70      	pop	{r4, r5, r6, pc}
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
   142fa:	2002      	movs	r0, #2
   142fc:	e7fb      	b.n	142f6 <lfs_dir_find_match+0x38>

000142fe <lfs_dir_fetch>:
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
   142fe:	b500      	push	{lr}
   14300:	b085      	sub	sp, #20
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
   14302:	2300      	movs	r3, #0
   14304:	9303      	str	r3, [sp, #12]
   14306:	9302      	str	r3, [sp, #8]
   14308:	9301      	str	r3, [sp, #4]
   1430a:	f04f 33ff 	mov.w	r3, #4294967295
   1430e:	9300      	str	r3, [sp, #0]
   14310:	f7f8 f906 	bl	c520 <lfs_dir_fetchmatch>
}
   14314:	b005      	add	sp, #20
   14316:	f85d fb04 	ldr.w	pc, [sp], #4

0001431a <lfs_fs_pred>:
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
   1431a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1431c:	4607      	mov	r7, r0
   1431e:	460e      	mov	r6, r1
   14320:	4614      	mov	r4, r2
    pdir->tail[0] = 0;
   14322:	2500      	movs	r5, #0
   14324:	6195      	str	r5, [r2, #24]
    pdir->tail[1] = 1;
   14326:	2301      	movs	r3, #1
   14328:	61d3      	str	r3, [r2, #28]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
   1432a:	69a3      	ldr	r3, [r4, #24]
   1432c:	f1b3 3fff 	cmp.w	r3, #4294967295
   14330:	d021      	beq.n	14376 <lfs_fs_pred+0x5c>
   14332:	69e2      	ldr	r2, [r4, #28]
   14334:	f1b2 3fff 	cmp.w	r2, #4294967295
   14338:	d01b      	beq.n	14372 <lfs_fs_pred+0x58>
   1433a:	2200      	movs	r2, #0
    while (!lfs_pair_isnull(pdir->tail)) {
   1433c:	b9ea      	cbnz	r2, 1437a <lfs_fs_pred+0x60>
        if (cycle >= lfs->cfg->block_count/2) {
   1433e:	6eba      	ldr	r2, [r7, #104]	; 0x68
   14340:	6a12      	ldr	r2, [r2, #32]
   14342:	ebb5 0f52 	cmp.w	r5, r2, lsr #1
   14346:	d21b      	bcs.n	14380 <lfs_fs_pred+0x66>
        cycle += 1;
   14348:	3501      	adds	r5, #1
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   1434a:	6832      	ldr	r2, [r6, #0]
   1434c:	429a      	cmp	r2, r3
   1434e:	d01a      	beq.n	14386 <lfs_fs_pred+0x6c>
   14350:	69e0      	ldr	r0, [r4, #28]
   14352:	6871      	ldr	r1, [r6, #4]
   14354:	4288      	cmp	r0, r1
   14356:	d018      	beq.n	1438a <lfs_fs_pred+0x70>
   14358:	4299      	cmp	r1, r3
   1435a:	d018      	beq.n	1438e <lfs_fs_pred+0x74>
   1435c:	4282      	cmp	r2, r0
   1435e:	d018      	beq.n	14392 <lfs_fs_pred+0x78>
        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
   14360:	f104 0218 	add.w	r2, r4, #24
   14364:	4621      	mov	r1, r4
   14366:	4638      	mov	r0, r7
   14368:	f7ff ffc9 	bl	142fe <lfs_dir_fetch>
        if (err) {
   1436c:	2800      	cmp	r0, #0
   1436e:	d0dc      	beq.n	1432a <lfs_fs_pred+0x10>
   14370:	e00a      	b.n	14388 <lfs_fs_pred+0x6e>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
   14372:	2201      	movs	r2, #1
   14374:	e7e2      	b.n	1433c <lfs_fs_pred+0x22>
   14376:	2201      	movs	r2, #1
   14378:	e7e0      	b.n	1433c <lfs_fs_pred+0x22>
    return LFS_ERR_NOENT;
   1437a:	f06f 0001 	mvn.w	r0, #1
   1437e:	e003      	b.n	14388 <lfs_fs_pred+0x6e>
            return LFS_ERR_CORRUPT;
   14380:	f06f 0053 	mvn.w	r0, #83	; 0x53
   14384:	e000      	b.n	14388 <lfs_fs_pred+0x6e>
            return 0;
   14386:	2000      	movs	r0, #0
}
   14388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return 0;
   1438a:	2000      	movs	r0, #0
   1438c:	e7fc      	b.n	14388 <lfs_fs_pred+0x6e>
   1438e:	2000      	movs	r0, #0
   14390:	e7fa      	b.n	14388 <lfs_fs_pred+0x6e>
   14392:	2000      	movs	r0, #0
   14394:	e7f8      	b.n	14388 <lfs_fs_pred+0x6e>

00014396 <lfs_dir_get>:
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
   14396:	b510      	push	{r4, lr}
   14398:	b084      	sub	sp, #16
    return tag & 0x000003ff;
   1439a:	f3c3 0409 	ubfx	r4, r3, #0, #10
    return lfs_dir_getslice(lfs, dir,
   1439e:	9402      	str	r4, [sp, #8]
   143a0:	9c06      	ldr	r4, [sp, #24]
   143a2:	9401      	str	r4, [sp, #4]
   143a4:	2400      	movs	r4, #0
   143a6:	9400      	str	r4, [sp, #0]
   143a8:	f7f8 fc98 	bl	ccdc <lfs_dir_getslice>
}
   143ac:	b004      	add	sp, #16
   143ae:	bd10      	pop	{r4, pc}

000143b0 <lfs_dir_getread>:
        lfs_off_t off, void *buffer, lfs_size_t size) {
   143b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143b4:	b085      	sub	sp, #20
   143b6:	4606      	mov	r6, r0
   143b8:	468a      	mov	sl, r1
   143ba:	4617      	mov	r7, r2
   143bc:	461c      	mov	r4, r3
   143be:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   143c2:	9d11      	ldr	r5, [sp, #68]	; 0x44
   143c4:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
    if (off+size > lfs->cfg->block_size) {
   143c8:	eb05 0208 	add.w	r2, r5, r8
   143cc:	6e83      	ldr	r3, [r0, #104]	; 0x68
   143ce:	69db      	ldr	r3, [r3, #28]
   143d0:	429a      	cmp	r2, r3
   143d2:	d94e      	bls.n	14472 <lfs_dir_getread+0xc2>
        return LFS_ERR_CORRUPT;
   143d4:	f06f 0053 	mvn.w	r0, #83	; 0x53
   143d8:	e075      	b.n	144c6 <lfs_dir_getread+0x116>
                off < pcache->off + pcache->size) {
   143da:	6879      	ldr	r1, [r7, #4]
   143dc:	68bb      	ldr	r3, [r7, #8]
   143de:	18ca      	adds	r2, r1, r3
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
   143e0:	42aa      	cmp	r2, r5
   143e2:	d91c      	bls.n	1441e <lfs_dir_getread+0x6e>
            if (off >= pcache->off) {
   143e4:	42a9      	cmp	r1, r5
   143e6:	d904      	bls.n	143f2 <lfs_dir_getread+0x42>
            diff = lfs_min(diff, pcache->off-off);
   143e8:	1b49      	subs	r1, r1, r5
   143ea:	4541      	cmp	r1, r8
   143ec:	bf28      	it	cs
   143ee:	4641      	movcs	r1, r8
   143f0:	e049      	b.n	14486 <lfs_dir_getread+0xd6>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
   143f2:	eba1 0905 	sub.w	r9, r1, r5
   143f6:	4499      	add	r9, r3
   143f8:	45c1      	cmp	r9, r8
   143fa:	bf28      	it	cs
   143fc:	46c1      	movcs	r9, r8
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
   143fe:	68fb      	ldr	r3, [r7, #12]
   14400:	1a69      	subs	r1, r5, r1
   14402:	464a      	mov	r2, r9
   14404:	4419      	add	r1, r3
   14406:	9812      	ldr	r0, [sp, #72]	; 0x48
   14408:	f7fe fb5a 	bl	12ac0 <memcpy>
                data += diff;
   1440c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1440e:	444b      	add	r3, r9
   14410:	9312      	str	r3, [sp, #72]	; 0x48
                off += diff;
   14412:	444d      	add	r5, r9
                size -= diff;
   14414:	eba8 0809 	sub.w	r8, r8, r9
                continue;
   14418:	e02b      	b.n	14472 <lfs_dir_getread+0xc2>
        lfs_size_t diff = size;
   1441a:	4641      	mov	r1, r8
   1441c:	e033      	b.n	14486 <lfs_dir_getread+0xd6>
   1441e:	4641      	mov	r1, r8
   14420:	e031      	b.n	14486 <lfs_dir_getread+0xd6>
        rcache->block = LFS_BLOCK_INLINE;
   14422:	f06f 0301 	mvn.w	r3, #1
   14426:	6023      	str	r3, [r4, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
   14428:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   1442a:	695b      	ldr	r3, [r3, #20]
    return a - (a % alignment);
   1442c:	fbb5 f2f3 	udiv	r2, r5, r3
   14430:	fb03 5212 	mls	r2, r3, r2, r5
   14434:	1aaa      	subs	r2, r5, r2
   14436:	6062      	str	r2, [r4, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
   14438:	eb05 030b 	add.w	r3, r5, fp
   1443c:	6eb0      	ldr	r0, [r6, #104]	; 0x68
   1443e:	f8d0 c014 	ldr.w	ip, [r0, #20]
    return lfs_aligndown(a + alignment-1, alignment);
   14442:	4463      	add	r3, ip
   14444:	3b01      	subs	r3, #1
    return a - (a % alignment);
   14446:	fbb3 f1fc 	udiv	r1, r3, ip
   1444a:	fb0c 3111 	mls	r1, ip, r1, r3
   1444e:	1a5b      	subs	r3, r3, r1
   14450:	6a81      	ldr	r1, [r0, #40]	; 0x28
    return (a < b) ? a : b;
   14452:	428b      	cmp	r3, r1
   14454:	bf28      	it	cs
   14456:	460b      	movcs	r3, r1
   14458:	60a3      	str	r3, [r4, #8]
                rcache->off, rcache->buffer, rcache->size);
   1445a:	68e1      	ldr	r1, [r4, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
   1445c:	9302      	str	r3, [sp, #8]
   1445e:	9101      	str	r1, [sp, #4]
   14460:	9200      	str	r2, [sp, #0]
   14462:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14464:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   14466:	4651      	mov	r1, sl
   14468:	4630      	mov	r0, r6
   1446a:	f7f8 fc37 	bl	ccdc <lfs_dir_getslice>
        if (err < 0) {
   1446e:	2800      	cmp	r0, #0
   14470:	db29      	blt.n	144c6 <lfs_dir_getread+0x116>
    while (size > 0) {
   14472:	f1b8 0f00 	cmp.w	r8, #0
   14476:	d025      	beq.n	144c4 <lfs_dir_getread+0x114>
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
   14478:	2f00      	cmp	r7, #0
   1447a:	d0ce      	beq.n	1441a <lfs_dir_getread+0x6a>
   1447c:	683b      	ldr	r3, [r7, #0]
   1447e:	f113 0f02 	cmn.w	r3, #2
   14482:	d0aa      	beq.n	143da <lfs_dir_getread+0x2a>
        lfs_size_t diff = size;
   14484:	4641      	mov	r1, r8
        if (rcache->block == LFS_BLOCK_INLINE &&
   14486:	6823      	ldr	r3, [r4, #0]
   14488:	f113 0f02 	cmn.w	r3, #2
   1448c:	d1c9      	bne.n	14422 <lfs_dir_getread+0x72>
                off < rcache->off + rcache->size) {
   1448e:	6863      	ldr	r3, [r4, #4]
   14490:	68a2      	ldr	r2, [r4, #8]
   14492:	1898      	adds	r0, r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
   14494:	42a8      	cmp	r0, r5
   14496:	d9c4      	bls.n	14422 <lfs_dir_getread+0x72>
            if (off >= rcache->off) {
   14498:	42ab      	cmp	r3, r5
   1449a:	d8c2      	bhi.n	14422 <lfs_dir_getread+0x72>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
   1449c:	eba3 0905 	sub.w	r9, r3, r5
   144a0:	4491      	add	r9, r2
   144a2:	4589      	cmp	r9, r1
   144a4:	bf28      	it	cs
   144a6:	4689      	movcs	r9, r1
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
   144a8:	68e1      	ldr	r1, [r4, #12]
   144aa:	1aeb      	subs	r3, r5, r3
   144ac:	464a      	mov	r2, r9
   144ae:	4419      	add	r1, r3
   144b0:	9812      	ldr	r0, [sp, #72]	; 0x48
   144b2:	f7fe fb05 	bl	12ac0 <memcpy>
                data += diff;
   144b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   144b8:	444b      	add	r3, r9
   144ba:	9312      	str	r3, [sp, #72]	; 0x48
                off += diff;
   144bc:	444d      	add	r5, r9
                size -= diff;
   144be:	eba8 0809 	sub.w	r8, r8, r9
                continue;
   144c2:	e7d6      	b.n	14472 <lfs_dir_getread+0xc2>
    return 0;
   144c4:	2000      	movs	r0, #0
}
   144c6:	b005      	add	sp, #20
   144c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000144cc <lfs_bd_flush>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
   144cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   144d0:	b085      	sub	sp, #20
   144d2:	460c      	mov	r4, r1
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
   144d4:	6809      	ldr	r1, [r1, #0]
   144d6:	f111 0f03 	cmn.w	r1, #3
   144da:	d834      	bhi.n	14546 <lfs_bd_flush+0x7a>
   144dc:	4606      	mov	r6, r0
   144de:	4617      	mov	r7, r2
   144e0:	4698      	mov	r8, r3
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
   144e2:	68a5      	ldr	r5, [r4, #8]
   144e4:	6e80      	ldr	r0, [r0, #104]	; 0x68
   144e6:	6982      	ldr	r2, [r0, #24]
    return lfs_aligndown(a + alignment-1, alignment);
   144e8:	4415      	add	r5, r2
   144ea:	3d01      	subs	r5, #1
    return a - (a % alignment);
   144ec:	fbb5 f3f2 	udiv	r3, r5, r2
   144f0:	fb02 5313 	mls	r3, r2, r3, r5
   144f4:	1aed      	subs	r5, r5, r3
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
   144f6:	f8d0 9008 	ldr.w	r9, [r0, #8]
   144fa:	9500      	str	r5, [sp, #0]
   144fc:	68e3      	ldr	r3, [r4, #12]
   144fe:	6862      	ldr	r2, [r4, #4]
   14500:	47c8      	blx	r9
        if (err) {
   14502:	4681      	mov	r9, r0
   14504:	bb08      	cbnz	r0, 1454a <lfs_bd_flush+0x7e>
        if (validate) {
   14506:	f1b8 0f00 	cmp.w	r8, #0
   1450a:	d012      	beq.n	14532 <lfs_bd_flush+0x66>
    rcache->block = LFS_BLOCK_NULL;
   1450c:	f04f 33ff 	mov.w	r3, #4294967295
   14510:	603b      	str	r3, [r7, #0]
                    pcache->block, pcache->off, pcache->buffer, diff);
   14512:	68e3      	ldr	r3, [r4, #12]
            int res = lfs_bd_cmp(lfs,
   14514:	9503      	str	r5, [sp, #12]
   14516:	9302      	str	r3, [sp, #8]
   14518:	6863      	ldr	r3, [r4, #4]
   1451a:	9301      	str	r3, [sp, #4]
   1451c:	6823      	ldr	r3, [r4, #0]
   1451e:	9300      	str	r3, [sp, #0]
   14520:	462b      	mov	r3, r5
   14522:	463a      	mov	r2, r7
   14524:	2100      	movs	r1, #0
   14526:	4630      	mov	r0, r6
   14528:	f7ff fe95 	bl	14256 <lfs_bd_cmp>
            if (res < 0) {
   1452c:	2800      	cmp	r0, #0
   1452e:	db10      	blt.n	14552 <lfs_bd_flush+0x86>
            if (res != LFS_CMP_EQ) {
   14530:	b988      	cbnz	r0, 14556 <lfs_bd_flush+0x8a>
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
   14532:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   14534:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14536:	21ff      	movs	r1, #255	; 0xff
   14538:	68e0      	ldr	r0, [r4, #12]
   1453a:	f7fe fae5 	bl	12b08 <memset>
    pcache->block = LFS_BLOCK_NULL;
   1453e:	f04f 33ff 	mov.w	r3, #4294967295
   14542:	6023      	str	r3, [r4, #0]
}
   14544:	e001      	b.n	1454a <lfs_bd_flush+0x7e>
    return 0;
   14546:	f04f 0900 	mov.w	r9, #0
}
   1454a:	4648      	mov	r0, r9
   1454c:	b005      	add	sp, #20
   1454e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return res;
   14552:	4681      	mov	r9, r0
   14554:	e7f9      	b.n	1454a <lfs_bd_flush+0x7e>
                return LFS_ERR_CORRUPT;
   14556:	f06f 0953 	mvn.w	r9, #83	; 0x53
   1455a:	e7f6      	b.n	1454a <lfs_bd_flush+0x7e>

0001455c <lfs_bd_prog>:
        const void *buffer, lfs_size_t size) {
   1455c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14560:	b083      	sub	sp, #12
   14562:	4607      	mov	r7, r0
   14564:	460c      	mov	r4, r1
   14566:	4693      	mov	fp, r2
   14568:	9301      	str	r3, [sp, #4]
   1456a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   1456c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   1456e:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   14572:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    while (size > 0) {
   14576:	e00a      	b.n	1458e <lfs_bd_prog+0x32>
        pcache->block = block;
   14578:	6026      	str	r6, [r4, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
   1457a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   1457c:	699a      	ldr	r2, [r3, #24]
   1457e:	fbb5 f3f2 	udiv	r3, r5, r2
   14582:	fb02 5313 	mls	r3, r2, r3, r5
   14586:	1aeb      	subs	r3, r5, r3
   14588:	6063      	str	r3, [r4, #4]
        pcache->size = 0;
   1458a:	2300      	movs	r3, #0
   1458c:	60a3      	str	r3, [r4, #8]
    while (size > 0) {
   1458e:	f1b8 0f00 	cmp.w	r8, #0
   14592:	d02e      	beq.n	145f2 <lfs_bd_prog+0x96>
        if (block == pcache->block &&
   14594:	6823      	ldr	r3, [r4, #0]
   14596:	42b3      	cmp	r3, r6
   14598:	d1ee      	bne.n	14578 <lfs_bd_prog+0x1c>
                off >= pcache->off &&
   1459a:	6860      	ldr	r0, [r4, #4]
        if (block == pcache->block &&
   1459c:	42a8      	cmp	r0, r5
   1459e:	d8eb      	bhi.n	14578 <lfs_bd_prog+0x1c>
                off < pcache->off + lfs->cfg->cache_size) {
   145a0:	6eba      	ldr	r2, [r7, #104]	; 0x68
   145a2:	6a92      	ldr	r2, [r2, #40]	; 0x28
   145a4:	1881      	adds	r1, r0, r2
                off >= pcache->off &&
   145a6:	42a9      	cmp	r1, r5
   145a8:	d9e6      	bls.n	14578 <lfs_bd_prog+0x1c>
                    lfs->cfg->cache_size - (off-pcache->off));
   145aa:	eba0 0905 	sub.w	r9, r0, r5
            lfs_size_t diff = lfs_min(size,
   145ae:	4491      	add	r9, r2
    return (a < b) ? a : b;
   145b0:	45c1      	cmp	r9, r8
   145b2:	bf28      	it	cs
   145b4:	46c1      	movcs	r9, r8
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
   145b6:	1a28      	subs	r0, r5, r0
   145b8:	464a      	mov	r2, r9
   145ba:	4651      	mov	r1, sl
   145bc:	68e3      	ldr	r3, [r4, #12]
   145be:	4418      	add	r0, r3
   145c0:	f7fe fa7e 	bl	12ac0 <memcpy>
            data += diff;
   145c4:	44ca      	add	sl, r9
            off += diff;
   145c6:	444d      	add	r5, r9
            size -= diff;
   145c8:	eba8 0809 	sub.w	r8, r8, r9
            pcache->size = lfs_max(pcache->size, off - pcache->off);
   145cc:	68a3      	ldr	r3, [r4, #8]
   145ce:	6862      	ldr	r2, [r4, #4]
   145d0:	1aaa      	subs	r2, r5, r2
    return (a > b) ? a : b;
   145d2:	4293      	cmp	r3, r2
   145d4:	bf38      	it	cc
   145d6:	4613      	movcc	r3, r2
   145d8:	60a3      	str	r3, [r4, #8]
            if (pcache->size == lfs->cfg->cache_size) {
   145da:	6eba      	ldr	r2, [r7, #104]	; 0x68
   145dc:	6a92      	ldr	r2, [r2, #40]	; 0x28
   145de:	429a      	cmp	r2, r3
   145e0:	d1d5      	bne.n	1458e <lfs_bd_prog+0x32>
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
   145e2:	9b01      	ldr	r3, [sp, #4]
   145e4:	465a      	mov	r2, fp
   145e6:	4621      	mov	r1, r4
   145e8:	4638      	mov	r0, r7
   145ea:	f7ff ff6f 	bl	144cc <lfs_bd_flush>
                if (err) {
   145ee:	b908      	cbnz	r0, 145f4 <lfs_bd_prog+0x98>
   145f0:	e7cd      	b.n	1458e <lfs_bd_prog+0x32>
    return 0;
   145f2:	2000      	movs	r0, #0
}
   145f4:	b003      	add	sp, #12
   145f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000145fa <lfs_dir_commitprog>:
        const void *buffer, lfs_size_t size) {
   145fa:	b5f0      	push	{r4, r5, r6, r7, lr}
   145fc:	b085      	sub	sp, #20
   145fe:	460c      	mov	r4, r1
   14600:	4617      	mov	r7, r2
   14602:	461e      	mov	r6, r3
    int err = lfs_bd_prog(lfs,
   14604:	9303      	str	r3, [sp, #12]
   14606:	9202      	str	r2, [sp, #8]
   14608:	684b      	ldr	r3, [r1, #4]
   1460a:	9301      	str	r3, [sp, #4]
   1460c:	680b      	ldr	r3, [r1, #0]
   1460e:	9300      	str	r3, [sp, #0]
   14610:	2300      	movs	r3, #0
   14612:	4602      	mov	r2, r0
   14614:	f100 0110 	add.w	r1, r0, #16
   14618:	f7ff ffa0 	bl	1455c <lfs_bd_prog>
    if (err) {
   1461c:	4605      	mov	r5, r0
   1461e:	b110      	cbz	r0, 14626 <lfs_dir_commitprog+0x2c>
}
   14620:	4628      	mov	r0, r5
   14622:	b005      	add	sp, #20
   14624:	bdf0      	pop	{r4, r5, r6, r7, pc}
    commit->crc = lfs_crc(commit->crc, buffer, size);
   14626:	4632      	mov	r2, r6
   14628:	4639      	mov	r1, r7
   1462a:	68e0      	ldr	r0, [r4, #12]
   1462c:	f7fa fbce 	bl	edcc <lfs_crc>
   14630:	60e0      	str	r0, [r4, #12]
    commit->off += size;
   14632:	6863      	ldr	r3, [r4, #4]
   14634:	4433      	add	r3, r6
   14636:	6063      	str	r3, [r4, #4]
    return 0;
   14638:	e7f2      	b.n	14620 <lfs_dir_commitprog+0x26>

0001463a <lfs_dir_commitattr>:
        lfs_tag_t tag, const void *buffer) {
   1463a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1463e:	b087      	sub	sp, #28
   14640:	4614      	mov	r4, r2
   14642:	461f      	mov	r7, r3
    return ((int32_t)(tag << 22) >> 22) == -1;
   14644:	f342 0809 	sbfx	r8, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
   14648:	f1b8 3fff 	cmp.w	r8, #4294967295
   1464c:	bf14      	ite	ne
   1464e:	4690      	movne	r8, r2
   14650:	f102 0801 	addeq.w	r8, r2, #1
    return tag & 0x000003ff;
   14654:	f3c8 0809 	ubfx	r8, r8, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
   14658:	f108 0904 	add.w	r9, r8, #4
    if (commit->off + dsize > commit->end) {
   1465c:	684b      	ldr	r3, [r1, #4]
   1465e:	444b      	add	r3, r9
   14660:	694a      	ldr	r2, [r1, #20]
   14662:	4293      	cmp	r3, r2
   14664:	d842      	bhi.n	146ec <lfs_dir_commitattr+0xb2>
   14666:	4605      	mov	r5, r0
   14668:	460e      	mov	r6, r1
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
   1466a:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
   1466e:	688b      	ldr	r3, [r1, #8]
   14670:	ea8b 0303 	eor.w	r3, fp, r3
    return __builtin_bswap32(a);
   14674:	ba1b      	rev	r3, r3
   14676:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
   14678:	2304      	movs	r3, #4
   1467a:	aa05      	add	r2, sp, #20
   1467c:	f7ff ffbd 	bl	145fa <lfs_dir_commitprog>
    if (err) {
   14680:	4682      	mov	sl, r0
   14682:	b960      	cbnz	r0, 1469e <lfs_dir_commitattr+0x64>
    if (!(tag & 0x80000000)) {
   14684:	2c00      	cmp	r4, #0
   14686:	da01      	bge.n	1468c <lfs_dir_commitattr+0x52>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
   14688:	2400      	movs	r4, #0
   1468a:	e00d      	b.n	146a8 <lfs_dir_commitattr+0x6e>
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
   1468c:	4643      	mov	r3, r8
   1468e:	463a      	mov	r2, r7
   14690:	4631      	mov	r1, r6
   14692:	4628      	mov	r0, r5
   14694:	f7ff ffb1 	bl	145fa <lfs_dir_commitprog>
        if (err) {
   14698:	bb58      	cbnz	r0, 146f2 <lfs_dir_commitattr+0xb8>
    commit->ptag = tag & 0x7fffffff;
   1469a:	f8c6 b008 	str.w	fp, [r6, #8]
}
   1469e:	4650      	mov	r0, sl
   146a0:	b007      	add	sp, #28
   146a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
   146a6:	3401      	adds	r4, #1
   146a8:	4544      	cmp	r4, r8
   146aa:	d2f6      	bcs.n	1469a <lfs_dir_commitattr+0x60>
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
   146ac:	eba9 0304 	sub.w	r3, r9, r4
                    disk->block, disk->off+i, &dat, 1);
   146b0:	687a      	ldr	r2, [r7, #4]
            err = lfs_bd_read(lfs,
   146b2:	2101      	movs	r1, #1
   146b4:	9103      	str	r1, [sp, #12]
   146b6:	f10d 0113 	add.w	r1, sp, #19
   146ba:	9102      	str	r1, [sp, #8]
   146bc:	4422      	add	r2, r4
   146be:	9201      	str	r2, [sp, #4]
   146c0:	683a      	ldr	r2, [r7, #0]
   146c2:	9200      	str	r2, [sp, #0]
   146c4:	3b04      	subs	r3, #4
   146c6:	462a      	mov	r2, r5
   146c8:	2100      	movs	r1, #0
   146ca:	4628      	mov	r0, r5
   146cc:	f7ff fccf 	bl	1406e <lfs_bd_read>
            if (err) {
   146d0:	4603      	mov	r3, r0
   146d2:	b948      	cbnz	r0, 146e8 <lfs_dir_commitattr+0xae>
            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
   146d4:	2301      	movs	r3, #1
   146d6:	f10d 0213 	add.w	r2, sp, #19
   146da:	4631      	mov	r1, r6
   146dc:	4628      	mov	r0, r5
   146de:	f7ff ff8c 	bl	145fa <lfs_dir_commitprog>
            if (err) {
   146e2:	4603      	mov	r3, r0
   146e4:	2800      	cmp	r0, #0
   146e6:	d0de      	beq.n	146a6 <lfs_dir_commitattr+0x6c>
                return err;
   146e8:	469a      	mov	sl, r3
   146ea:	e7d8      	b.n	1469e <lfs_dir_commitattr+0x64>
        return LFS_ERR_NOSPC;
   146ec:	f06f 0a1b 	mvn.w	sl, #27
   146f0:	e7d5      	b.n	1469e <lfs_dir_commitattr+0x64>
            return err;
   146f2:	4682      	mov	sl, r0
   146f4:	e7d3      	b.n	1469e <lfs_dir_commitattr+0x64>

000146f6 <lfs_dir_commit_commit>:
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
   146f6:	b508      	push	{r3, lr}
   146f8:	4613      	mov	r3, r2
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
   146fa:	460a      	mov	r2, r1
   146fc:	6841      	ldr	r1, [r0, #4]
   146fe:	6800      	ldr	r0, [r0, #0]
   14700:	f7ff ff9b 	bl	1463a <lfs_dir_commitattr>
}
   14704:	bd08      	pop	{r3, pc}

00014706 <lfs_bd_sync>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
   14706:	b538      	push	{r3, r4, r5, lr}
   14708:	4604      	mov	r4, r0
    rcache->block = LFS_BLOCK_NULL;
   1470a:	f04f 35ff 	mov.w	r5, #4294967295
   1470e:	6015      	str	r5, [r2, #0]
    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
   14710:	f7ff fedc 	bl	144cc <lfs_bd_flush>
    if (err) {
   14714:	b910      	cbnz	r0, 1471c <lfs_bd_sync+0x16>
    err = lfs->cfg->sync(lfs->cfg);
   14716:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   14718:	6903      	ldr	r3, [r0, #16]
   1471a:	4798      	blx	r3
}
   1471c:	bd38      	pop	{r3, r4, r5, pc}

0001471e <lfs_dir_commitcrc>:
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
   1471e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14722:	b08b      	sub	sp, #44	; 0x2c
   14724:	4605      	mov	r5, r0
   14726:	460c      	mov	r4, r1
    const lfs_off_t off1 = commit->off;
   14728:	f8d1 b004 	ldr.w	fp, [r1, #4]
    const uint32_t crc1 = commit->crc;
   1472c:	68cb      	ldr	r3, [r1, #12]
   1472e:	9304      	str	r3, [sp, #16]
    const lfs_off_t end = lfs_alignup(off1 + 2*sizeof(uint32_t),
   14730:	f10b 0608 	add.w	r6, fp, #8
            lfs->cfg->prog_size);
   14734:	6e83      	ldr	r3, [r0, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(off1 + 2*sizeof(uint32_t),
   14736:	699a      	ldr	r2, [r3, #24]
    return lfs_aligndown(a + alignment-1, alignment);
   14738:	4416      	add	r6, r2
   1473a:	3e01      	subs	r6, #1
    return a - (a % alignment);
   1473c:	fbb6 f3f2 	udiv	r3, r6, r2
   14740:	fb02 6313 	mls	r3, r2, r3, r6
   14744:	1af6      	subs	r6, r6, r3
    while (commit->off < end) {
   14746:	e04d      	b.n	147e4 <lfs_dir_commitcrc+0xc6>
        lfs_tag_t tag = 0xffffffff;
   14748:	f04f 33ff 	mov.w	r3, #4294967295
   1474c:	9307      	str	r3, [sp, #28]
        int err = lfs_bd_read(lfs,
   1474e:	2304      	movs	r3, #4
   14750:	9303      	str	r3, [sp, #12]
   14752:	aa07      	add	r2, sp, #28
   14754:	9202      	str	r2, [sp, #8]
   14756:	9701      	str	r7, [sp, #4]
   14758:	6822      	ldr	r2, [r4, #0]
   1475a:	9200      	str	r2, [sp, #0]
   1475c:	462a      	mov	r2, r5
   1475e:	2100      	movs	r1, #0
   14760:	4628      	mov	r0, r5
   14762:	f7ff fc84 	bl	1406e <lfs_bd_read>
        if (err && err != LFS_ERR_CORRUPT) {
   14766:	b118      	cbz	r0, 14770 <lfs_dir_commitcrc+0x52>
   14768:	f110 0f54 	cmn.w	r0, #84	; 0x54
   1476c:	f040 80aa 	bne.w	148c4 <lfs_dir_commitcrc+0x1a6>
        bool reset = ~lfs_frombe32(tag) >> 31;
   14770:	9b07      	ldr	r3, [sp, #28]
    return __builtin_bswap32(a);
   14772:	ba1b      	rev	r3, r3
   14774:	ea6f 0803 	mvn.w	r8, r3
   14778:	ea4f 78d8 	mov.w	r8, r8, lsr #31
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
   1477c:	f508 63a0 	add.w	r3, r8, #1280	; 0x500
   14780:	eba7 0709 	sub.w	r7, r7, r9
   14784:	ea47 5703 	orr.w	r7, r7, r3, lsl #20
   14788:	f447 277f 	orr.w	r7, r7, #1044480	; 0xff000
   1478c:	f447 6740 	orr.w	r7, r7, #3072	; 0xc00
   14790:	9707      	str	r7, [sp, #28]
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
   14792:	68a3      	ldr	r3, [r4, #8]
   14794:	405f      	eors	r7, r3
   14796:	ba3f      	rev	r7, r7
   14798:	9708      	str	r7, [sp, #32]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
   1479a:	af08      	add	r7, sp, #32
   1479c:	2204      	movs	r2, #4
   1479e:	4639      	mov	r1, r7
   147a0:	68e0      	ldr	r0, [r4, #12]
   147a2:	f7fa fb13 	bl	edcc <lfs_crc>
   147a6:	60e0      	str	r0, [r4, #12]
        footer[1] = lfs_tole32(commit->crc);
   147a8:	9009      	str	r0, [sp, #36]	; 0x24
        err = lfs_bd_prog(lfs,
   147aa:	2308      	movs	r3, #8
   147ac:	9303      	str	r3, [sp, #12]
   147ae:	9702      	str	r7, [sp, #8]
   147b0:	6863      	ldr	r3, [r4, #4]
   147b2:	9301      	str	r3, [sp, #4]
   147b4:	6823      	ldr	r3, [r4, #0]
   147b6:	9300      	str	r3, [sp, #0]
   147b8:	2300      	movs	r3, #0
   147ba:	462a      	mov	r2, r5
   147bc:	f105 0110 	add.w	r1, r5, #16
   147c0:	4628      	mov	r0, r5
   147c2:	f7ff fecb 	bl	1455c <lfs_bd_prog>
        if (err) {
   147c6:	2800      	cmp	r0, #0
   147c8:	d17e      	bne.n	148c8 <lfs_dir_commitcrc+0x1aa>
        commit->off += sizeof(tag)+lfs_tag_size(tag);
   147ca:	9b07      	ldr	r3, [sp, #28]
    return tag & 0x000003ff;
   147cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
        commit->off += sizeof(tag)+lfs_tag_size(tag);
   147d0:	1d11      	adds	r1, r2, #4
   147d2:	6862      	ldr	r2, [r4, #4]
   147d4:	440a      	add	r2, r1
   147d6:	6062      	str	r2, [r4, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
   147d8:	ea83 73c8 	eor.w	r3, r3, r8, lsl #31
   147dc:	60a3      	str	r3, [r4, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
   147de:	f04f 33ff 	mov.w	r3, #4294967295
   147e2:	60e3      	str	r3, [r4, #12]
    while (commit->off < end) {
   147e4:	6867      	ldr	r7, [r4, #4]
   147e6:	42b7      	cmp	r7, r6
   147e8:	d212      	bcs.n	14810 <lfs_dir_commitcrc+0xf2>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
   147ea:	f107 0904 	add.w	r9, r7, #4
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
   147ee:	eba6 0709 	sub.w	r7, r6, r9
   147f2:	f240 33fe 	movw	r3, #1022	; 0x3fe
   147f6:	429f      	cmp	r7, r3
   147f8:	bf94      	ite	ls
   147fa:	444f      	addls	r7, r9
   147fc:	eb09 0703 	addhi.w	r7, r9, r3
        if (noff < end) {
   14800:	42b7      	cmp	r7, r6
   14802:	d2a1      	bcs.n	14748 <lfs_dir_commitcrc+0x2a>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
   14804:	f1a6 0308 	sub.w	r3, r6, #8
    return (a < b) ? a : b;
   14808:	429f      	cmp	r7, r3
   1480a:	bf28      	it	cs
   1480c:	461f      	movcs	r7, r3
   1480e:	e79b      	b.n	14748 <lfs_dir_commitcrc+0x2a>
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
   14810:	9505      	str	r5, [sp, #20]
   14812:	2300      	movs	r3, #0
   14814:	462a      	mov	r2, r5
   14816:	f105 0110 	add.w	r1, r5, #16
   1481a:	4628      	mov	r0, r5
   1481c:	f7ff ff73 	bl	14706 <lfs_bd_sync>
    if (err) {
   14820:	4607      	mov	r7, r0
   14822:	2800      	cmp	r0, #0
   14824:	d151      	bne.n	148ca <lfs_dir_commitcrc+0x1ac>
    lfs_off_t off = commit->begin;
   14826:	f8d4 8010 	ldr.w	r8, [r4, #16]
    lfs_off_t noff = off1 + sizeof(uint32_t);
   1482a:	f10b 0a04 	add.w	sl, fp, #4
    while (off < end) {
   1482e:	f8dd 9010 	ldr.w	r9, [sp, #16]
   14832:	9604      	str	r6, [sp, #16]
   14834:	4646      	mov	r6, r8
   14836:	f8dd 8014 	ldr.w	r8, [sp, #20]
   1483a:	9005      	str	r0, [sp, #20]
   1483c:	9b04      	ldr	r3, [sp, #16]
   1483e:	429e      	cmp	r6, r3
   14840:	d23b      	bcs.n	148ba <lfs_dir_commitcrc+0x19c>
        uint32_t crc = 0xffffffff;
   14842:	f04f 37ff 	mov.w	r7, #4294967295
   14846:	e017      	b.n	14878 <lfs_dir_commitcrc+0x15a>
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
   14848:	ebaa 0306 	sub.w	r3, sl, r6
            err = lfs_bd_read(lfs,
   1484c:	2201      	movs	r2, #1
   1484e:	9203      	str	r2, [sp, #12]
   14850:	aa08      	add	r2, sp, #32
   14852:	9202      	str	r2, [sp, #8]
   14854:	9601      	str	r6, [sp, #4]
   14856:	6822      	ldr	r2, [r4, #0]
   14858:	9200      	str	r2, [sp, #0]
   1485a:	3304      	adds	r3, #4
   1485c:	4642      	mov	r2, r8
   1485e:	2100      	movs	r1, #0
   14860:	4628      	mov	r0, r5
   14862:	f7ff fc04 	bl	1406e <lfs_bd_read>
            if (err) {
   14866:	4603      	mov	r3, r0
   14868:	b980      	cbnz	r0, 1488c <lfs_dir_commitcrc+0x16e>
            crc = lfs_crc(crc, &dat, 1);
   1486a:	2201      	movs	r2, #1
   1486c:	a908      	add	r1, sp, #32
   1486e:	4638      	mov	r0, r7
   14870:	f7fa faac 	bl	edcc <lfs_crc>
   14874:	4607      	mov	r7, r0
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
   14876:	3601      	adds	r6, #1
   14878:	f10a 0304 	add.w	r3, sl, #4
   1487c:	42b3      	cmp	r3, r6
   1487e:	d907      	bls.n	14890 <lfs_dir_commitcrc+0x172>
            if (i == off1 && crc != crc1) {
   14880:	455e      	cmp	r6, fp
   14882:	d1e1      	bne.n	14848 <lfs_dir_commitcrc+0x12a>
   14884:	454f      	cmp	r7, r9
   14886:	d0df      	beq.n	14848 <lfs_dir_commitcrc+0x12a>
                return LFS_ERR_CORRUPT;
   14888:	f06f 0353 	mvn.w	r3, #83	; 0x53
   1488c:	461f      	mov	r7, r3
   1488e:	e01c      	b.n	148ca <lfs_dir_commitcrc+0x1ac>
        if (crc != 0) {
   14890:	b9af      	cbnz	r7, 148be <lfs_dir_commitcrc+0x1a0>
        off = lfs_min(end - noff, 0x3fe) + noff;
   14892:	9a04      	ldr	r2, [sp, #16]
   14894:	eba2 060a 	sub.w	r6, r2, sl
   14898:	f240 33fe 	movw	r3, #1022	; 0x3fe
   1489c:	429e      	cmp	r6, r3
   1489e:	bf94      	ite	ls
   148a0:	4456      	addls	r6, sl
   148a2:	eb0a 0603 	addhi.w	r6, sl, r3
        if (off < end) {
   148a6:	4296      	cmp	r6, r2
   148a8:	d204      	bcs.n	148b4 <lfs_dir_commitcrc+0x196>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
   148aa:	f1a2 0308 	sub.w	r3, r2, #8
   148ae:	429e      	cmp	r6, r3
   148b0:	bf28      	it	cs
   148b2:	461e      	movcs	r6, r3
        noff = off + sizeof(uint32_t);
   148b4:	f106 0a04 	add.w	sl, r6, #4
   148b8:	e7c0      	b.n	1483c <lfs_dir_commitcrc+0x11e>
   148ba:	9f05      	ldr	r7, [sp, #20]
   148bc:	e005      	b.n	148ca <lfs_dir_commitcrc+0x1ac>
            return LFS_ERR_CORRUPT;
   148be:	f06f 0753 	mvn.w	r7, #83	; 0x53
   148c2:	e002      	b.n	148ca <lfs_dir_commitcrc+0x1ac>
   148c4:	4607      	mov	r7, r0
   148c6:	e000      	b.n	148ca <lfs_dir_commitcrc+0x1ac>
   148c8:	4607      	mov	r7, r0
}
   148ca:	4638      	mov	r0, r7
   148cc:	b00b      	add	sp, #44	; 0x2c
   148ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000148d2 <lfs_deinit>:
static int lfs_deinit(lfs_t *lfs) {
   148d2:	b510      	push	{r4, lr}
   148d4:	4604      	mov	r4, r0
    if (!lfs->cfg->read_buffer) {
   148d6:	6e83      	ldr	r3, [r0, #104]	; 0x68
   148d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   148da:	b13b      	cbz	r3, 148ec <lfs_deinit+0x1a>
    if (!lfs->cfg->prog_buffer) {
   148dc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   148de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   148e0:	b143      	cbz	r3, 148f4 <lfs_deinit+0x22>
    if (!lfs->cfg->lookahead_buffer) {
   148e2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   148e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   148e6:	b14b      	cbz	r3, 148fc <lfs_deinit+0x2a>
}
   148e8:	2000      	movs	r0, #0
   148ea:	bd10      	pop	{r4, pc}
}

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
#ifndef LFS_NO_MALLOC
    free(p);
   148ec:	68c0      	ldr	r0, [r0, #12]
   148ee:	f7fe f869 	bl	129c4 <free>
#else
    (void)p;
#endif
}
   148f2:	e7f3      	b.n	148dc <lfs_deinit+0xa>
    free(p);
   148f4:	69e0      	ldr	r0, [r4, #28]
   148f6:	f7fe f865 	bl	129c4 <free>
}
   148fa:	e7f2      	b.n	148e2 <lfs_deinit+0x10>
    free(p);
   148fc:	6e60      	ldr	r0, [r4, #100]	; 0x64
   148fe:	f7fe f861 	bl	129c4 <free>
}
   14902:	e7f1      	b.n	148e8 <lfs_deinit+0x16>

00014904 <lfs_init>:
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
   14904:	b538      	push	{r3, r4, r5, lr}
   14906:	4604      	mov	r4, r0
    lfs->cfg = cfg;
   14908:	6681      	str	r1, [r0, #104]	; 0x68
    if (lfs->cfg->read_buffer) {
   1490a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   1490c:	2b00      	cmp	r3, #0
   1490e:	d03d      	beq.n	1498c <lfs_init+0x88>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
   14910:	60c3      	str	r3, [r0, #12]
    if (lfs->cfg->prog_buffer) {
   14912:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   14914:	6b53      	ldr	r3, [r2, #52]	; 0x34
   14916:	2b00      	cmp	r3, #0
   14918:	d044      	beq.n	149a4 <lfs_init+0xa0>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
   1491a:	61e3      	str	r3, [r4, #28]
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
   1491c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   1491e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14920:	21ff      	movs	r1, #255	; 0xff
   14922:	68e0      	ldr	r0, [r4, #12]
   14924:	f7fe f8f0 	bl	12b08 <memset>
    pcache->block = LFS_BLOCK_NULL;
   14928:	f04f 35ff 	mov.w	r5, #4294967295
   1492c:	6025      	str	r5, [r4, #0]
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
   1492e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   14930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14932:	21ff      	movs	r1, #255	; 0xff
   14934:	69e0      	ldr	r0, [r4, #28]
   14936:	f7fe f8e7 	bl	12b08 <memset>
    pcache->block = LFS_BLOCK_NULL;
   1493a:	6125      	str	r5, [r4, #16]
    if (lfs->cfg->lookahead_buffer) {
   1493c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   1493e:	6b93      	ldr	r3, [r2, #56]	; 0x38
   14940:	2b00      	cmp	r3, #0
   14942:	d036      	beq.n	149b2 <lfs_init+0xae>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
   14944:	6663      	str	r3, [r4, #100]	; 0x64
    lfs->name_max = lfs->cfg->name_max;
   14946:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   14948:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1494a:	66e2      	str	r2, [r4, #108]	; 0x6c
    if (!lfs->name_max) {
   1494c:	b90a      	cbnz	r2, 14952 <lfs_init+0x4e>
        lfs->name_max = LFS_NAME_MAX;
   1494e:	22ff      	movs	r2, #255	; 0xff
   14950:	66e2      	str	r2, [r4, #108]	; 0x6c
    lfs->file_max = lfs->cfg->file_max;
   14952:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   14954:	6722      	str	r2, [r4, #112]	; 0x70
    if (!lfs->file_max) {
   14956:	b912      	cbnz	r2, 1495e <lfs_init+0x5a>
        lfs->file_max = LFS_FILE_MAX;
   14958:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1495c:	6722      	str	r2, [r4, #112]	; 0x70
    lfs->attr_max = lfs->cfg->attr_max;
   1495e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   14960:	6763      	str	r3, [r4, #116]	; 0x74
    if (!lfs->attr_max) {
   14962:	b913      	cbnz	r3, 1496a <lfs_init+0x66>
        lfs->attr_max = LFS_ATTR_MAX;
   14964:	f240 33fe 	movw	r3, #1022	; 0x3fe
   14968:	6763      	str	r3, [r4, #116]	; 0x74
    lfs->root[0] = LFS_BLOCK_NULL;
   1496a:	f04f 33ff 	mov.w	r3, #4294967295
   1496e:	6223      	str	r3, [r4, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
   14970:	6263      	str	r3, [r4, #36]	; 0x24
    lfs->mlist = NULL;
   14972:	2000      	movs	r0, #0
   14974:	62a0      	str	r0, [r4, #40]	; 0x28
    lfs->seed = 0;
   14976:	62e0      	str	r0, [r4, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
   14978:	63e0      	str	r0, [r4, #60]	; 0x3c
   1497a:	6420      	str	r0, [r4, #64]	; 0x40
   1497c:	6460      	str	r0, [r4, #68]	; 0x44
    lfs->gstate = (lfs_gstate_t){0};
   1497e:	6320      	str	r0, [r4, #48]	; 0x30
   14980:	6360      	str	r0, [r4, #52]	; 0x34
   14982:	63a0      	str	r0, [r4, #56]	; 0x38
    lfs->gdelta = (lfs_gstate_t){0};
   14984:	64a0      	str	r0, [r4, #72]	; 0x48
   14986:	64e0      	str	r0, [r4, #76]	; 0x4c
   14988:	6520      	str	r0, [r4, #80]	; 0x50
}
   1498a:	bd38      	pop	{r3, r4, r5, pc}
    return malloc(size);
   1498c:	6a88      	ldr	r0, [r1, #40]	; 0x28
   1498e:	f7f1 fa47 	bl	5e20 <malloc>
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
   14992:	60e0      	str	r0, [r4, #12]
        if (!lfs->rcache.buffer) {
   14994:	2800      	cmp	r0, #0
   14996:	d1bc      	bne.n	14912 <lfs_init+0xe>
    lfs_deinit(lfs);
   14998:	4620      	mov	r0, r4
   1499a:	f7ff ff9a 	bl	148d2 <lfs_deinit>
    return err;
   1499e:	f06f 000b 	mvn.w	r0, #11
   149a2:	e7f2      	b.n	1498a <lfs_init+0x86>
   149a4:	6a90      	ldr	r0, [r2, #40]	; 0x28
   149a6:	f7f1 fa3b 	bl	5e20 <malloc>
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
   149aa:	61e0      	str	r0, [r4, #28]
        if (!lfs->pcache.buffer) {
   149ac:	2800      	cmp	r0, #0
   149ae:	d1b5      	bne.n	1491c <lfs_init+0x18>
   149b0:	e7f2      	b.n	14998 <lfs_init+0x94>
   149b2:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
   149b4:	f7f1 fa34 	bl	5e20 <malloc>
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
   149b8:	6660      	str	r0, [r4, #100]	; 0x64
        if (!lfs->free.buffer) {
   149ba:	2800      	cmp	r0, #0
   149bc:	d1c3      	bne.n	14946 <lfs_init+0x42>
   149be:	e7eb      	b.n	14998 <lfs_init+0x94>

000149c0 <lfs_ctz_index>:
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
   149c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lfs_off_t size = *off;
   149c2:	680f      	ldr	r7, [r1, #0]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
   149c4:	6e83      	ldr	r3, [r0, #104]	; 0x68
   149c6:	69dc      	ldr	r4, [r3, #28]
   149c8:	3c08      	subs	r4, #8
    lfs_off_t i = size / b;
   149ca:	fbb7 f0f4 	udiv	r0, r7, r4
    if (i == 0) {
   149ce:	42a7      	cmp	r7, r4
   149d0:	d312      	bcc.n	149f8 <lfs_ctz_index+0x38>
   149d2:	460e      	mov	r6, r1
    return __builtin_popcount(a);
   149d4:	3801      	subs	r0, #1
   149d6:	f7ec f9c7 	bl	d68 <__popcountsi2>
    i = (size - 4*(lfs_popc(i-1)+2)) / b;
   149da:	1c85      	adds	r5, r0, #2
   149dc:	eba7 0585 	sub.w	r5, r7, r5, lsl #2
   149e0:	fbb5 f5f4 	udiv	r5, r5, r4
    *off = size - b*i - 4*lfs_popc(i);
   149e4:	fb05 7414 	mls	r4, r5, r4, r7
   149e8:	4628      	mov	r0, r5
   149ea:	f7ec f9bd 	bl	d68 <__popcountsi2>
   149ee:	eba4 0480 	sub.w	r4, r4, r0, lsl #2
   149f2:	6034      	str	r4, [r6, #0]
    return i;
   149f4:	4628      	mov	r0, r5
}
   149f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
   149f8:	2000      	movs	r0, #0
   149fa:	e7fc      	b.n	149f6 <lfs_ctz_index+0x36>

000149fc <lfs_ctz_traverse>:
        int (*cb)(void*, lfs_block_t), void *data) {
   149fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a00:	b08b      	sub	sp, #44	; 0x2c
   14a02:	9105      	str	r1, [sp, #20]
   14a04:	461c      	mov	r4, r3
   14a06:	9b14      	ldr	r3, [sp, #80]	; 0x50
   14a08:	9e15      	ldr	r6, [sp, #84]	; 0x54
   14a0a:	9f16      	ldr	r7, [sp, #88]	; 0x58
    if (size == 0) {
   14a0c:	b923      	cbnz	r3, 14a18 <lfs_ctz_traverse+0x1c>
        return 0;
   14a0e:	2300      	movs	r3, #0
}
   14a10:	4618      	mov	r0, r3
   14a12:	b00b      	add	sp, #44	; 0x2c
   14a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a18:	4680      	mov	r8, r0
   14a1a:	4692      	mov	sl, r2
    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
   14a1c:	3b01      	subs	r3, #1
   14a1e:	9309      	str	r3, [sp, #36]	; 0x24
   14a20:	a909      	add	r1, sp, #36	; 0x24
   14a22:	f7ff ffcd 	bl	149c0 <lfs_ctz_index>
   14a26:	4681      	mov	r9, r0
        int err = cb(data, head);
   14a28:	4621      	mov	r1, r4
   14a2a:	4638      	mov	r0, r7
   14a2c:	47b0      	blx	r6
        if (err) {
   14a2e:	4603      	mov	r3, r0
   14a30:	2800      	cmp	r0, #0
   14a32:	d1ed      	bne.n	14a10 <lfs_ctz_traverse+0x14>
        if (index == 0) {
   14a34:	f1b9 0f00 	cmp.w	r9, #0
   14a38:	d0ea      	beq.n	14a10 <lfs_ctz_traverse+0x14>
        int count = 2 - (index & 1);
   14a3a:	f009 0b01 	and.w	fp, r9, #1
   14a3e:	f1cb 0502 	rsb	r5, fp, #2
        err = lfs_bd_read(lfs,
   14a42:	00ab      	lsls	r3, r5, #2
   14a44:	9303      	str	r3, [sp, #12]
   14a46:	aa07      	add	r2, sp, #28
   14a48:	9202      	str	r2, [sp, #8]
   14a4a:	2200      	movs	r2, #0
   14a4c:	9201      	str	r2, [sp, #4]
   14a4e:	9400      	str	r4, [sp, #0]
   14a50:	4652      	mov	r2, sl
   14a52:	9905      	ldr	r1, [sp, #20]
   14a54:	4640      	mov	r0, r8
   14a56:	f7ff fb0a 	bl	1406e <lfs_bd_read>
        if (err) {
   14a5a:	4604      	mov	r4, r0
   14a5c:	b110      	cbz	r0, 14a64 <lfs_ctz_traverse+0x68>
            return err;
   14a5e:	4603      	mov	r3, r0
   14a60:	e7d6      	b.n	14a10 <lfs_ctz_traverse+0x14>
        for (int i = 0; i < count-1; i++) {
   14a62:	3401      	adds	r4, #1
   14a64:	1e6b      	subs	r3, r5, #1
   14a66:	42a3      	cmp	r3, r4
   14a68:	dd0a      	ble.n	14a80 <lfs_ctz_traverse+0x84>
            err = cb(data, heads[i]);
   14a6a:	ab0a      	add	r3, sp, #40	; 0x28
   14a6c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   14a70:	f853 1c0c 	ldr.w	r1, [r3, #-12]
   14a74:	4638      	mov	r0, r7
   14a76:	47b0      	blx	r6
            if (err) {
   14a78:	4603      	mov	r3, r0
   14a7a:	2800      	cmp	r0, #0
   14a7c:	d0f1      	beq.n	14a62 <lfs_ctz_traverse+0x66>
   14a7e:	e7c7      	b.n	14a10 <lfs_ctz_traverse+0x14>
        head = heads[count-1];
   14a80:	aa0a      	add	r2, sp, #40	; 0x28
   14a82:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   14a86:	f853 4c0c 	ldr.w	r4, [r3, #-12]
        index -= count;
   14a8a:	f1ab 0b02 	sub.w	fp, fp, #2
   14a8e:	44d9      	add	r9, fp
    while (true) {
   14a90:	e7ca      	b.n	14a28 <lfs_ctz_traverse+0x2c>

00014a92 <lfs_ctz_find>:
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
   14a92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14a96:	b089      	sub	sp, #36	; 0x24
   14a98:	9305      	str	r3, [sp, #20]
   14a9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    if (size == 0) {
   14a9c:	b953      	cbnz	r3, 14ab4 <lfs_ctz_find+0x22>
        *block = LFS_BLOCK_NULL;
   14a9e:	f04f 33ff 	mov.w	r3, #4294967295
   14aa2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   14aa4:	6013      	str	r3, [r2, #0]
        *off = 0;
   14aa6:	2300      	movs	r3, #0
   14aa8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   14aaa:	6013      	str	r3, [r2, #0]
}
   14aac:	4618      	mov	r0, r3
   14aae:	b009      	add	sp, #36	; 0x24
   14ab0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   14ab4:	4607      	mov	r7, r0
   14ab6:	4688      	mov	r8, r1
   14ab8:	4691      	mov	r9, r2
    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
   14aba:	3b01      	subs	r3, #1
   14abc:	9307      	str	r3, [sp, #28]
   14abe:	a907      	add	r1, sp, #28
   14ac0:	f7ff ff7e 	bl	149c0 <lfs_ctz_index>
   14ac4:	4605      	mov	r5, r0
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
   14ac6:	a911      	add	r1, sp, #68	; 0x44
   14ac8:	4638      	mov	r0, r7
   14aca:	f7ff ff79 	bl	149c0 <lfs_ctz_index>
   14ace:	4606      	mov	r6, r0
    while (current > target) {
   14ad0:	e003      	b.n	14ada <lfs_ctz_find+0x48>
        current -= 1 << skip;
   14ad2:	2301      	movs	r3, #1
   14ad4:	fa03 f404 	lsl.w	r4, r3, r4
   14ad8:	1b2d      	subs	r5, r5, r4
    while (current > target) {
   14ada:	42b5      	cmp	r5, r6
   14adc:	d91c      	bls.n	14b18 <lfs_ctz_find+0x86>
                lfs_npw2(current-target+1) - 1,
   14ade:	1bac      	subs	r4, r5, r6
    return 32 - __builtin_clz(a-1);
   14ae0:	fab4 f484 	clz	r4, r4
        lfs_size_t skip = lfs_min(
   14ae4:	f1c4 041f 	rsb	r4, r4, #31
    return __builtin_ctz(a);
   14ae8:	fa95 f3a5 	rbit	r3, r5
   14aec:	fab3 f383 	clz	r3, r3
    return (a < b) ? a : b;
   14af0:	429c      	cmp	r4, r3
   14af2:	bf28      	it	cs
   14af4:	461c      	movcs	r4, r3
        int err = lfs_bd_read(lfs,
   14af6:	2304      	movs	r3, #4
   14af8:	9303      	str	r3, [sp, #12]
   14afa:	aa05      	add	r2, sp, #20
   14afc:	9202      	str	r2, [sp, #8]
   14afe:	00a2      	lsls	r2, r4, #2
   14b00:	9201      	str	r2, [sp, #4]
   14b02:	9a05      	ldr	r2, [sp, #20]
   14b04:	9200      	str	r2, [sp, #0]
   14b06:	464a      	mov	r2, r9
   14b08:	4641      	mov	r1, r8
   14b0a:	4638      	mov	r0, r7
   14b0c:	f7ff faaf 	bl	1406e <lfs_bd_read>
        if (err) {
   14b10:	4603      	mov	r3, r0
   14b12:	2800      	cmp	r0, #0
   14b14:	d0dd      	beq.n	14ad2 <lfs_ctz_find+0x40>
   14b16:	e7c9      	b.n	14aac <lfs_ctz_find+0x1a>
    *block = head;
   14b18:	9b05      	ldr	r3, [sp, #20]
   14b1a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   14b1c:	6013      	str	r3, [r2, #0]
    *off = pos;
   14b1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   14b20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   14b22:	6013      	str	r3, [r2, #0]
    return 0;
   14b24:	2300      	movs	r3, #0
   14b26:	e7c1      	b.n	14aac <lfs_ctz_find+0x1a>

00014b28 <lfs_dir_close>:
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   14b28:	3028      	adds	r0, #40	; 0x28
   14b2a:	6803      	ldr	r3, [r0, #0]
   14b2c:	b12b      	cbz	r3, 14b3a <lfs_dir_close+0x12>
        if (*p == (struct lfs_mlist*)dir) {
   14b2e:	428b      	cmp	r3, r1
   14b30:	d001      	beq.n	14b36 <lfs_dir_close+0xe>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   14b32:	4618      	mov	r0, r3
   14b34:	e7f9      	b.n	14b2a <lfs_dir_close+0x2>
            *p = (*p)->next;
   14b36:	681b      	ldr	r3, [r3, #0]
   14b38:	6003      	str	r3, [r0, #0]
}
   14b3a:	2000      	movs	r0, #0
   14b3c:	4770      	bx	lr

00014b3e <lfs_file_tell>:
}
   14b3e:	6b48      	ldr	r0, [r1, #52]	; 0x34
   14b40:	4770      	bx	lr

00014b42 <lfs_file_size>:
    if (file->flags & LFS_F_WRITING) {
   14b42:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   14b44:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   14b48:	d005      	beq.n	14b56 <lfs_file_size+0x14>
        return lfs_max(file->pos, file->ctz.size);
   14b4a:	6b48      	ldr	r0, [r1, #52]	; 0x34
   14b4c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   14b4e:	4298      	cmp	r0, r3
   14b50:	bf38      	it	cc
   14b52:	4618      	movcc	r0, r3
   14b54:	4770      	bx	lr
        return file->ctz.size;
   14b56:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
}
   14b58:	4770      	bx	lr

00014b5a <lfs_stat>:
int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
   14b5a:	b530      	push	{r4, r5, lr}
   14b5c:	b08b      	sub	sp, #44	; 0x2c
   14b5e:	4604      	mov	r4, r0
   14b60:	9101      	str	r1, [sp, #4]
   14b62:	4615      	mov	r5, r2
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
   14b64:	2300      	movs	r3, #0
   14b66:	aa01      	add	r2, sp, #4
   14b68:	a902      	add	r1, sp, #8
   14b6a:	f7f8 f9a5 	bl	ceb8 <lfs_dir_find>
    if (tag < 0) {
   14b6e:	2800      	cmp	r0, #0
   14b70:	db06      	blt.n	14b80 <lfs_stat+0x26>
    int err = lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
   14b72:	462b      	mov	r3, r5
   14b74:	f3c0 2289 	ubfx	r2, r0, #10, #10
   14b78:	a902      	add	r1, sp, #8
   14b7a:	4620      	mov	r0, r4
   14b7c:	f7f8 fa60 	bl	d040 <lfs_dir_getinfo>
}
   14b80:	b00b      	add	sp, #44	; 0x2c
   14b82:	bd30      	pop	{r4, r5, pc}

00014b84 <lfs_unmount>:
int lfs_unmount(lfs_t *lfs) {
   14b84:	b508      	push	{r3, lr}
    int err = lfs_deinit(lfs);
   14b86:	f7ff fea4 	bl	148d2 <lfs_deinit>
}
   14b8a:	bd08      	pop	{r3, pc}

00014b8c <lfs_dir_alloc>:
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
   14b8c:	b570      	push	{r4, r5, r6, lr}
   14b8e:	b084      	sub	sp, #16
   14b90:	4606      	mov	r6, r0
   14b92:	460c      	mov	r4, r1
    for (int i = 0; i < 2; i++) {
   14b94:	2500      	movs	r5, #0
   14b96:	2d01      	cmp	r5, #1
   14b98:	dc0d      	bgt.n	14bb6 <lfs_dir_alloc+0x2a>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
   14b9a:	3501      	adds	r5, #1
   14b9c:	f005 0101 	and.w	r1, r5, #1
   14ba0:	bf48      	it	mi
   14ba2:	4249      	negmi	r1, r1
   14ba4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   14ba8:	4630      	mov	r0, r6
   14baa:	f7f8 fd31 	bl	d610 <lfs_alloc>
        if (err) {
   14bae:	4603      	mov	r3, r0
   14bb0:	2800      	cmp	r0, #0
   14bb2:	d0f0      	beq.n	14b96 <lfs_dir_alloc+0xa>
   14bb4:	e022      	b.n	14bfc <lfs_dir_alloc+0x70>
    dir->rev = 0;
   14bb6:	2100      	movs	r1, #0
   14bb8:	4622      	mov	r2, r4
   14bba:	f842 1f08 	str.w	r1, [r2, #8]!
    int err = lfs_bd_read(lfs,
   14bbe:	2304      	movs	r3, #4
   14bc0:	9303      	str	r3, [sp, #12]
   14bc2:	9202      	str	r2, [sp, #8]
   14bc4:	9101      	str	r1, [sp, #4]
   14bc6:	6822      	ldr	r2, [r4, #0]
   14bc8:	9200      	str	r2, [sp, #0]
   14bca:	4632      	mov	r2, r6
   14bcc:	4630      	mov	r0, r6
   14bce:	f7ff fa4e 	bl	1406e <lfs_bd_read>
    dir->rev = lfs_fromle32(dir->rev);
   14bd2:	68a2      	ldr	r2, [r4, #8]
    if (err && err != LFS_ERR_CORRUPT) {
   14bd4:	4603      	mov	r3, r0
   14bd6:	b110      	cbz	r0, 14bde <lfs_dir_alloc+0x52>
   14bd8:	f110 0f54 	cmn.w	r0, #84	; 0x54
   14bdc:	d10e      	bne.n	14bfc <lfs_dir_alloc+0x70>
    dir->rev += dir->rev & 1;
   14bde:	3201      	adds	r2, #1
   14be0:	f022 0201 	bic.w	r2, r2, #1
   14be4:	60a2      	str	r2, [r4, #8]
    dir->off = sizeof(dir->rev);
   14be6:	2304      	movs	r3, #4
   14be8:	60e3      	str	r3, [r4, #12]
    dir->etag = 0xffffffff;
   14bea:	f04f 32ff 	mov.w	r2, #4294967295
   14bee:	6122      	str	r2, [r4, #16]
    dir->count = 0;
   14bf0:	2300      	movs	r3, #0
   14bf2:	82a3      	strh	r3, [r4, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
   14bf4:	61a2      	str	r2, [r4, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
   14bf6:	61e2      	str	r2, [r4, #28]
    dir->erased = false;
   14bf8:	75a3      	strb	r3, [r4, #22]
    dir->split = false;
   14bfa:	75e3      	strb	r3, [r4, #23]
}
   14bfc:	4618      	mov	r0, r3
   14bfe:	b004      	add	sp, #16
   14c00:	bd70      	pop	{r4, r5, r6, pc}

00014c02 <lfs_file_outline>:
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
   14c02:	b538      	push	{r3, r4, r5, lr}
   14c04:	4605      	mov	r5, r0
   14c06:	460c      	mov	r4, r1
    file->off = file->pos;
   14c08:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   14c0a:	63cb      	str	r3, [r1, #60]	; 0x3c
    lfs_alloc_ack(lfs);
   14c0c:	f7ff f9fc 	bl	14008 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
   14c10:	4621      	mov	r1, r4
   14c12:	4628      	mov	r0, r5
   14c14:	f7f8 fd7e 	bl	d714 <lfs_file_relocate>
    if (err) {
   14c18:	b918      	cbnz	r0, 14c22 <lfs_file_outline+0x20>
    file->flags &= ~LFS_F_INLINE;
   14c1a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14c1c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   14c20:	6323      	str	r3, [r4, #48]	; 0x30
}
   14c22:	bd38      	pop	{r3, r4, r5, pc}

00014c24 <lfs_ctz_extend>:
        lfs_block_t *block, lfs_off_t *off) {
   14c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c28:	b08b      	sub	sp, #44	; 0x2c
   14c2a:	4604      	mov	r4, r0
   14c2c:	460f      	mov	r7, r1
   14c2e:	4615      	mov	r5, r2
   14c30:	4699      	mov	r9, r3
   14c32:	e043      	b.n	14cbc <lfs_ctz_extend+0x98>
            if (size == 0) {
   14c34:	9b14      	ldr	r3, [sp, #80]	; 0x50
   14c36:	b18b      	cbz	r3, 14c5c <lfs_ctz_extend+0x38>
            lfs_size_t noff = size - 1;
   14c38:	9b14      	ldr	r3, [sp, #80]	; 0x50
   14c3a:	3b01      	subs	r3, #1
   14c3c:	9308      	str	r3, [sp, #32]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
   14c3e:	a908      	add	r1, sp, #32
   14c40:	4620      	mov	r0, r4
   14c42:	f7ff febd 	bl	149c0 <lfs_ctz_index>
            noff = noff + 1;
   14c46:	9b08      	ldr	r3, [sp, #32]
   14c48:	3301      	adds	r3, #1
   14c4a:	9308      	str	r3, [sp, #32]
            if (noff != lfs->cfg->block_size) {
   14c4c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   14c4e:	69d2      	ldr	r2, [r2, #28]
   14c50:	4293      	cmp	r3, r2
   14c52:	d050      	beq.n	14cf6 <lfs_ctz_extend+0xd2>
                for (lfs_off_t i = 0; i < noff; i++) {
   14c54:	2600      	movs	r6, #0
   14c56:	46b8      	mov	r8, r7
   14c58:	464f      	mov	r7, r9
   14c5a:	e007      	b.n	14c6c <lfs_ctz_extend+0x48>
                *block = nblock;
   14c5c:	9b07      	ldr	r3, [sp, #28]
   14c5e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   14c60:	6013      	str	r3, [r2, #0]
                *off = 0;
   14c62:	2300      	movs	r3, #0
   14c64:	9a16      	ldr	r2, [sp, #88]	; 0x58
   14c66:	6013      	str	r3, [r2, #0]
                return 0;
   14c68:	e041      	b.n	14cee <lfs_ctz_extend+0xca>
                for (lfs_off_t i = 0; i < noff; i++) {
   14c6a:	3601      	adds	r6, #1
   14c6c:	9b08      	ldr	r3, [sp, #32]
   14c6e:	42b3      	cmp	r3, r6
   14c70:	d937      	bls.n	14ce2 <lfs_ctz_extend+0xbe>
                    err = lfs_bd_read(lfs,
   14c72:	2201      	movs	r2, #1
   14c74:	9203      	str	r2, [sp, #12]
   14c76:	aa09      	add	r2, sp, #36	; 0x24
   14c78:	9202      	str	r2, [sp, #8]
   14c7a:	9601      	str	r6, [sp, #4]
   14c7c:	9700      	str	r7, [sp, #0]
   14c7e:	1b9b      	subs	r3, r3, r6
   14c80:	462a      	mov	r2, r5
   14c82:	2100      	movs	r1, #0
   14c84:	4620      	mov	r0, r4
   14c86:	f7ff f9f2 	bl	1406e <lfs_bd_read>
                    if (err) {
   14c8a:	4603      	mov	r3, r0
   14c8c:	bb38      	cbnz	r0, 14cde <lfs_ctz_extend+0xba>
                    err = lfs_bd_prog(lfs,
   14c8e:	2301      	movs	r3, #1
   14c90:	9303      	str	r3, [sp, #12]
   14c92:	aa09      	add	r2, sp, #36	; 0x24
   14c94:	9202      	str	r2, [sp, #8]
   14c96:	9601      	str	r6, [sp, #4]
   14c98:	9a07      	ldr	r2, [sp, #28]
   14c9a:	9200      	str	r2, [sp, #0]
   14c9c:	462a      	mov	r2, r5
   14c9e:	4641      	mov	r1, r8
   14ca0:	4620      	mov	r0, r4
   14ca2:	f7ff fc5b 	bl	1455c <lfs_bd_prog>
                    if (err) {
   14ca6:	4603      	mov	r3, r0
   14ca8:	2800      	cmp	r0, #0
   14caa:	d0de      	beq.n	14c6a <lfs_ctz_extend+0x46>
   14cac:	46b9      	mov	r9, r7
   14cae:	4647      	mov	r7, r8
                        if (err == LFS_ERR_CORRUPT) {
   14cb0:	f110 0f54 	cmn.w	r0, #84	; 0x54
   14cb4:	d113      	bne.n	14cde <lfs_ctz_extend+0xba>
    rcache->block = LFS_BLOCK_NULL;
   14cb6:	f04f 33ff 	mov.w	r3, #4294967295
   14cba:	603b      	str	r3, [r7, #0]
        int err = lfs_alloc(lfs, &nblock);
   14cbc:	a907      	add	r1, sp, #28
   14cbe:	4620      	mov	r0, r4
   14cc0:	f7f8 fca6 	bl	d610 <lfs_alloc>
        if (err) {
   14cc4:	9005      	str	r0, [sp, #20]
   14cc6:	b990      	cbnz	r0, 14cee <lfs_ctz_extend+0xca>
            err = lfs_bd_erase(lfs, nblock);
   14cc8:	9907      	ldr	r1, [sp, #28]
   14cca:	4620      	mov	r0, r4
   14ccc:	f7ff f97d 	bl	13fca <lfs_bd_erase>
            if (err) {
   14cd0:	9005      	str	r0, [sp, #20]
   14cd2:	2800      	cmp	r0, #0
   14cd4:	d0ae      	beq.n	14c34 <lfs_ctz_extend+0x10>
                if (err == LFS_ERR_CORRUPT) {
   14cd6:	f110 0f54 	cmn.w	r0, #84	; 0x54
   14cda:	d0ec      	beq.n	14cb6 <lfs_ctz_extend+0x92>
   14cdc:	e007      	b.n	14cee <lfs_ctz_extend+0xca>
                        return err;
   14cde:	9305      	str	r3, [sp, #20]
   14ce0:	e005      	b.n	14cee <lfs_ctz_extend+0xca>
                *block = nblock;
   14ce2:	9b07      	ldr	r3, [sp, #28]
   14ce4:	9a15      	ldr	r2, [sp, #84]	; 0x54
   14ce6:	6013      	str	r3, [r2, #0]
                *off = noff;
   14ce8:	9b08      	ldr	r3, [sp, #32]
   14cea:	9a16      	ldr	r2, [sp, #88]	; 0x58
   14cec:	6013      	str	r3, [r2, #0]
}
   14cee:	9805      	ldr	r0, [sp, #20]
   14cf0:	b00b      	add	sp, #44	; 0x2c
   14cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            index += 1;
   14cf6:	3001      	adds	r0, #1
    return __builtin_ctz(a);
   14cf8:	fa90 faa0 	rbit	sl, r0
   14cfc:	faba fa8a 	clz	sl, sl
            lfs_size_t skips = lfs_ctz(index) + 1;
   14d00:	f10a 0b01 	add.w	fp, sl, #1
            lfs_block_t nhead = head;
   14d04:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
            for (lfs_off_t i = 0; i < skips; i++) {
   14d08:	2600      	movs	r6, #0
   14d0a:	46a0      	mov	r8, r4
   14d0c:	e006      	b.n	14d1c <lfs_ctz_extend+0xf8>
   14d0e:	4644      	mov	r4, r8
                    if (err == LFS_ERR_CORRUPT) {
   14d10:	f110 0f54 	cmn.w	r0, #84	; 0x54
   14d14:	d0cf      	beq.n	14cb6 <lfs_ctz_extend+0x92>
                    return err;
   14d16:	9005      	str	r0, [sp, #20]
   14d18:	e7e9      	b.n	14cee <lfs_ctz_extend+0xca>
            for (lfs_off_t i = 0; i < skips; i++) {
   14d1a:	3601      	adds	r6, #1
   14d1c:	45b3      	cmp	fp, r6
   14d1e:	d921      	bls.n	14d64 <lfs_ctz_extend+0x140>
                err = lfs_bd_prog(lfs, pcache, rcache, true,
   14d20:	00b4      	lsls	r4, r6, #2
   14d22:	2304      	movs	r3, #4
   14d24:	9303      	str	r3, [sp, #12]
   14d26:	ab09      	add	r3, sp, #36	; 0x24
   14d28:	9302      	str	r3, [sp, #8]
   14d2a:	9401      	str	r4, [sp, #4]
   14d2c:	9b07      	ldr	r3, [sp, #28]
   14d2e:	9300      	str	r3, [sp, #0]
   14d30:	2301      	movs	r3, #1
   14d32:	462a      	mov	r2, r5
   14d34:	4639      	mov	r1, r7
   14d36:	4640      	mov	r0, r8
   14d38:	f7ff fc10 	bl	1455c <lfs_bd_prog>
                nhead = lfs_fromle32(nhead);
   14d3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
                if (err) {
   14d3e:	2800      	cmp	r0, #0
   14d40:	d1e5      	bne.n	14d0e <lfs_ctz_extend+0xea>
                if (i != skips-1) {
   14d42:	45b2      	cmp	sl, r6
   14d44:	d0e9      	beq.n	14d1a <lfs_ctz_extend+0xf6>
                    err = lfs_bd_read(lfs,
   14d46:	2304      	movs	r3, #4
   14d48:	9303      	str	r3, [sp, #12]
   14d4a:	a909      	add	r1, sp, #36	; 0x24
   14d4c:	9102      	str	r1, [sp, #8]
   14d4e:	9401      	str	r4, [sp, #4]
   14d50:	9200      	str	r2, [sp, #0]
   14d52:	462a      	mov	r2, r5
   14d54:	2100      	movs	r1, #0
   14d56:	4640      	mov	r0, r8
   14d58:	f7ff f989 	bl	1406e <lfs_bd_read>
                    if (err) {
   14d5c:	2800      	cmp	r0, #0
   14d5e:	d0dc      	beq.n	14d1a <lfs_ctz_extend+0xf6>
                        return err;
   14d60:	9005      	str	r0, [sp, #20]
   14d62:	e7c4      	b.n	14cee <lfs_ctz_extend+0xca>
            *block = nblock;
   14d64:	9b07      	ldr	r3, [sp, #28]
   14d66:	9a15      	ldr	r2, [sp, #84]	; 0x54
   14d68:	6013      	str	r3, [r2, #0]
            *off = 4*skips;
   14d6a:	ea4f 038b 	mov.w	r3, fp, lsl #2
   14d6e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   14d70:	6013      	str	r3, [r2, #0]
            return 0;
   14d72:	e7bc      	b.n	14cee <lfs_ctz_extend+0xca>

00014d74 <lfs_file_write>:
        const void *buffer, lfs_size_t size) {
   14d74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14d78:	b087      	sub	sp, #28
   14d7a:	4605      	mov	r5, r0
   14d7c:	460c      	mov	r4, r1
   14d7e:	4617      	mov	r7, r2
   14d80:	4698      	mov	r8, r3
    if (file->flags & LFS_F_READING) {
   14d82:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   14d84:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   14d88:	d126      	bne.n	14dd8 <lfs_file_write+0x64>
    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
   14d8a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14d8c:	f413 6f00 	tst.w	r3, #2048	; 0x800
   14d90:	d004      	beq.n	14d9c <lfs_file_write+0x28>
   14d92:	6b61      	ldr	r1, [r4, #52]	; 0x34
   14d94:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   14d96:	4291      	cmp	r1, r2
   14d98:	d200      	bcs.n	14d9c <lfs_file_write+0x28>
        file->pos = file->ctz.size;
   14d9a:	6362      	str	r2, [r4, #52]	; 0x34
    if (file->pos + size > lfs->file_max) {
   14d9c:	6b66      	ldr	r6, [r4, #52]	; 0x34
   14d9e:	eb06 0108 	add.w	r1, r6, r8
   14da2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
   14da4:	4291      	cmp	r1, r2
   14da6:	f200 80db 	bhi.w	14f60 <lfs_file_write+0x1ec>
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
   14daa:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   14dae:	d119      	bne.n	14de4 <lfs_file_write+0x70>
   14db0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   14db2:	429e      	cmp	r6, r3
   14db4:	d916      	bls.n	14de4 <lfs_file_write+0x70>
        file->pos = file->ctz.size;
   14db6:	6363      	str	r3, [r4, #52]	; 0x34
        while (file->pos < pos) {
   14db8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   14dba:	429e      	cmp	r6, r3
   14dbc:	d912      	bls.n	14de4 <lfs_file_write+0x70>
            lfs_ssize_t res = lfs_file_write(lfs, file, &(uint8_t){0}, 1);
   14dbe:	2300      	movs	r3, #0
   14dc0:	f88d 3017 	strb.w	r3, [sp, #23]
   14dc4:	2301      	movs	r3, #1
   14dc6:	f10d 0217 	add.w	r2, sp, #23
   14dca:	4621      	mov	r1, r4
   14dcc:	4628      	mov	r0, r5
   14dce:	f7ff ffd1 	bl	14d74 <lfs_file_write>
            if (res < 0) {
   14dd2:	1e01      	subs	r1, r0, #0
   14dd4:	daf0      	bge.n	14db8 <lfs_file_write+0x44>
   14dd6:	e0ac      	b.n	14f32 <lfs_file_write+0x1be>
        int err = lfs_file_flush(lfs, file);
   14dd8:	f7f8 fd22 	bl	d820 <lfs_file_flush>
        if (err) {
   14ddc:	4601      	mov	r1, r0
   14dde:	2800      	cmp	r0, #0
   14de0:	d0d3      	beq.n	14d8a <lfs_file_write+0x16>
   14de2:	e0a6      	b.n	14f32 <lfs_file_write+0x1be>
    if ((file->flags & LFS_F_INLINE) &&
   14de4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14de6:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   14dea:	d014      	beq.n	14e16 <lfs_file_write+0xa2>
            lfs_max(file->pos+nsize, file->ctz.size) >
   14dec:	6b63      	ldr	r3, [r4, #52]	; 0x34
   14dee:	eb03 0208 	add.w	r2, r3, r8
   14df2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (a > b) ? a : b;
   14df4:	429a      	cmp	r2, r3
   14df6:	bf38      	it	cc
   14df8:	461a      	movcc	r2, r3
                lfs->cfg->cache_size, lfs->cfg->block_size/8))) {
   14dfa:	6ea9      	ldr	r1, [r5, #104]	; 0x68
            lfs_min(0x3fe, lfs_min(
   14dfc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
                lfs->cfg->cache_size, lfs->cfg->block_size/8))) {
   14dfe:	69c9      	ldr	r1, [r1, #28]
            lfs_min(0x3fe, lfs_min(
   14e00:	08c9      	lsrs	r1, r1, #3
    return (a < b) ? a : b;
   14e02:	428b      	cmp	r3, r1
   14e04:	bf28      	it	cs
   14e06:	460b      	movcs	r3, r1
   14e08:	f240 31fe 	movw	r1, #1022	; 0x3fe
   14e0c:	428b      	cmp	r3, r1
   14e0e:	bf28      	it	cs
   14e10:	460b      	movcs	r3, r1
    if ((file->flags & LFS_F_INLINE) &&
   14e12:	429a      	cmp	r2, r3
   14e14:	d82d      	bhi.n	14e72 <lfs_file_write+0xfe>
        const void *buffer, lfs_size_t size) {
   14e16:	46c1      	mov	r9, r8
    while (nsize > 0) {
   14e18:	f1b9 0f00 	cmp.w	r9, #0
   14e1c:	f000 809a 	beq.w	14f54 <lfs_file_write+0x1e0>
        if (!(file->flags & LFS_F_WRITING) ||
   14e20:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14e22:	f413 3200 	ands.w	r2, r3, #131072	; 0x20000
   14e26:	d004      	beq.n	14e32 <lfs_file_write+0xbe>
                file->off == lfs->cfg->block_size) {
   14e28:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   14e2a:	6ea9      	ldr	r1, [r5, #104]	; 0x68
   14e2c:	69c9      	ldr	r1, [r1, #28]
        if (!(file->flags & LFS_F_WRITING) ||
   14e2e:	4288      	cmp	r0, r1
   14e30:	d156      	bne.n	14ee0 <lfs_file_write+0x16c>
            if (!(file->flags & LFS_F_INLINE)) {
   14e32:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   14e36:	d14a      	bne.n	14ece <lfs_file_write+0x15a>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
   14e38:	b90a      	cbnz	r2, 14e3e <lfs_file_write+0xca>
   14e3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   14e3c:	bb2b      	cbnz	r3, 14e8a <lfs_file_write+0x116>
                lfs_alloc_ack(lfs);
   14e3e:	4628      	mov	r0, r5
   14e40:	f7ff f8e2 	bl	14008 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
   14e44:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   14e48:	9302      	str	r3, [sp, #8]
   14e4a:	f104 0338 	add.w	r3, r4, #56	; 0x38
   14e4e:	9301      	str	r3, [sp, #4]
   14e50:	6b63      	ldr	r3, [r4, #52]	; 0x34
   14e52:	9300      	str	r3, [sp, #0]
   14e54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   14e56:	462a      	mov	r2, r5
   14e58:	f104 0140 	add.w	r1, r4, #64	; 0x40
   14e5c:	4628      	mov	r0, r5
   14e5e:	f7ff fee1 	bl	14c24 <lfs_ctz_extend>
                if (err) {
   14e62:	4601      	mov	r1, r0
   14e64:	2800      	cmp	r0, #0
   14e66:	d037      	beq.n	14ed8 <lfs_file_write+0x164>
                    file->flags |= LFS_F_ERRED;
   14e68:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14e6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   14e6e:	6323      	str	r3, [r4, #48]	; 0x30
                    return err;
   14e70:	e05f      	b.n	14f32 <lfs_file_write+0x1be>
        int err = lfs_file_outline(lfs, file);
   14e72:	4621      	mov	r1, r4
   14e74:	4628      	mov	r0, r5
   14e76:	f7ff fec4 	bl	14c02 <lfs_file_outline>
        if (err) {
   14e7a:	4601      	mov	r1, r0
   14e7c:	2800      	cmp	r0, #0
   14e7e:	d0ca      	beq.n	14e16 <lfs_file_write+0xa2>
            file->flags |= LFS_F_ERRED;
   14e80:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14e82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   14e86:	6323      	str	r3, [r4, #48]	; 0x30
            return err;
   14e88:	e053      	b.n	14f32 <lfs_file_write+0x1be>
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
   14e8a:	f104 023c 	add.w	r2, r4, #60	; 0x3c
   14e8e:	9203      	str	r2, [sp, #12]
   14e90:	f104 0238 	add.w	r2, r4, #56	; 0x38
   14e94:	9202      	str	r2, [sp, #8]
   14e96:	3b01      	subs	r3, #1
   14e98:	9301      	str	r3, [sp, #4]
   14e9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   14e9c:	9300      	str	r3, [sp, #0]
   14e9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14ea0:	f104 0240 	add.w	r2, r4, #64	; 0x40
   14ea4:	2100      	movs	r1, #0
   14ea6:	4628      	mov	r0, r5
   14ea8:	f7ff fdf3 	bl	14a92 <lfs_ctz_find>
                    if (err) {
   14eac:	4601      	mov	r1, r0
   14eae:	b948      	cbnz	r0, 14ec4 <lfs_file_write+0x150>
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
   14eb0:	6eab      	ldr	r3, [r5, #104]	; 0x68
   14eb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14eb4:	21ff      	movs	r1, #255	; 0xff
   14eb6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   14eb8:	f7fd fe26 	bl	12b08 <memset>
    pcache->block = LFS_BLOCK_NULL;
   14ebc:	f04f 33ff 	mov.w	r3, #4294967295
   14ec0:	6423      	str	r3, [r4, #64]	; 0x40
}
   14ec2:	e7bc      	b.n	14e3e <lfs_file_write+0xca>
                        file->flags |= LFS_F_ERRED;
   14ec4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14ec6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   14eca:	6323      	str	r3, [r4, #48]	; 0x30
                        return err;
   14ecc:	e031      	b.n	14f32 <lfs_file_write+0x1be>
                file->block = LFS_BLOCK_INLINE;
   14ece:	f06f 0301 	mvn.w	r3, #1
   14ed2:	63a3      	str	r3, [r4, #56]	; 0x38
                file->off = file->pos;
   14ed4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   14ed6:	63e3      	str	r3, [r4, #60]	; 0x3c
            file->flags |= LFS_F_WRITING;
   14ed8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14eda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   14ede:	6323      	str	r3, [r4, #48]	; 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
   14ee0:	6eab      	ldr	r3, [r5, #104]	; 0x68
   14ee2:	69de      	ldr	r6, [r3, #28]
   14ee4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   14ee6:	1af6      	subs	r6, r6, r3
   14ee8:	454e      	cmp	r6, r9
   14eea:	bf28      	it	cs
   14eec:	464e      	movcs	r6, r9
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
   14eee:	9603      	str	r6, [sp, #12]
   14ef0:	9702      	str	r7, [sp, #8]
   14ef2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   14ef4:	9301      	str	r3, [sp, #4]
   14ef6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   14ef8:	9300      	str	r3, [sp, #0]
   14efa:	2301      	movs	r3, #1
   14efc:	462a      	mov	r2, r5
   14efe:	f104 0140 	add.w	r1, r4, #64	; 0x40
   14f02:	4628      	mov	r0, r5
   14f04:	f7ff fb2a 	bl	1455c <lfs_bd_prog>
            if (err) {
   14f08:	4601      	mov	r1, r0
   14f0a:	b1b0      	cbz	r0, 14f3a <lfs_file_write+0x1c6>
                if (err == LFS_ERR_CORRUPT) {
   14f0c:	f110 0f54 	cmn.w	r0, #84	; 0x54
   14f10:	d10b      	bne.n	14f2a <lfs_file_write+0x1b6>
            err = lfs_file_relocate(lfs, file);
   14f12:	4621      	mov	r1, r4
   14f14:	4628      	mov	r0, r5
   14f16:	f7f8 fbfd 	bl	d714 <lfs_file_relocate>
            if (err) {
   14f1a:	4601      	mov	r1, r0
   14f1c:	2800      	cmp	r0, #0
   14f1e:	d0e6      	beq.n	14eee <lfs_file_write+0x17a>
                file->flags |= LFS_F_ERRED;
   14f20:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14f22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   14f26:	6323      	str	r3, [r4, #48]	; 0x30
                return err;
   14f28:	e003      	b.n	14f32 <lfs_file_write+0x1be>
                file->flags |= LFS_F_ERRED;
   14f2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14f2c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   14f30:	6323      	str	r3, [r4, #48]	; 0x30
}
   14f32:	4608      	mov	r0, r1
   14f34:	b007      	add	sp, #28
   14f36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        file->pos += diff;
   14f3a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   14f3c:	4433      	add	r3, r6
   14f3e:	6363      	str	r3, [r4, #52]	; 0x34
        file->off += diff;
   14f40:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   14f42:	4433      	add	r3, r6
   14f44:	63e3      	str	r3, [r4, #60]	; 0x3c
        data += diff;
   14f46:	4437      	add	r7, r6
        nsize -= diff;
   14f48:	eba9 0906 	sub.w	r9, r9, r6
        lfs_alloc_ack(lfs);
   14f4c:	4628      	mov	r0, r5
   14f4e:	f7ff f85b 	bl	14008 <lfs_alloc_ack>
   14f52:	e761      	b.n	14e18 <lfs_file_write+0xa4>
    file->flags &= ~LFS_F_ERRED;
   14f54:	6b23      	ldr	r3, [r4, #48]	; 0x30
   14f56:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
   14f5a:	6323      	str	r3, [r4, #48]	; 0x30
    return size;
   14f5c:	4641      	mov	r1, r8
   14f5e:	e7e8      	b.n	14f32 <lfs_file_write+0x1be>
        return LFS_ERR_FBIG;
   14f60:	f06f 011a 	mvn.w	r1, #26
   14f64:	e7e5      	b.n	14f32 <lfs_file_write+0x1be>

00014f66 <lfs_file_seek>:
        lfs_soff_t off, int whence) {
   14f66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14f68:	4606      	mov	r6, r0
   14f6a:	460c      	mov	r4, r1
   14f6c:	4617      	mov	r7, r2
   14f6e:	461d      	mov	r5, r3
    int err = lfs_file_flush(lfs, file);
   14f70:	f7f8 fc56 	bl	d820 <lfs_file_flush>
    if (err) {
   14f74:	b930      	cbnz	r0, 14f84 <lfs_file_seek+0x1e>
    lfs_off_t npos = file->pos;
   14f76:	6b60      	ldr	r0, [r4, #52]	; 0x34
    if (whence == LFS_SEEK_SET) {
   14f78:	b92d      	cbnz	r5, 14f86 <lfs_file_seek+0x20>
        npos = off;
   14f7a:	4638      	mov	r0, r7
    if (npos > lfs->file_max) {
   14f7c:	6f33      	ldr	r3, [r6, #112]	; 0x70
   14f7e:	4283      	cmp	r3, r0
   14f80:	d30a      	bcc.n	14f98 <lfs_file_seek+0x32>
    file->pos = npos;
   14f82:	6360      	str	r0, [r4, #52]	; 0x34
}
   14f84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (whence == LFS_SEEK_CUR) {
   14f86:	2d01      	cmp	r5, #1
   14f88:	d004      	beq.n	14f94 <lfs_file_seek+0x2e>
    } else if (whence == LFS_SEEK_END) {
   14f8a:	2d02      	cmp	r5, #2
   14f8c:	d1f6      	bne.n	14f7c <lfs_file_seek+0x16>
        npos = file->ctz.size + off;
   14f8e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   14f90:	19d8      	adds	r0, r3, r7
   14f92:	e7f3      	b.n	14f7c <lfs_file_seek+0x16>
        npos = file->pos + off;
   14f94:	4438      	add	r0, r7
   14f96:	e7f1      	b.n	14f7c <lfs_file_seek+0x16>
        return LFS_ERR_INVAL;
   14f98:	f06f 0015 	mvn.w	r0, #21
   14f9c:	e7f2      	b.n	14f84 <lfs_file_seek+0x1e>

00014f9e <lfs_file_truncate>:
int lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {
   14f9e:	b5f0      	push	{r4, r5, r6, r7, lr}
   14fa0:	b087      	sub	sp, #28
    if (size > LFS_FILE_MAX) {
   14fa2:	1e15      	subs	r5, r2, #0
   14fa4:	db4b      	blt.n	1503e <lfs_file_truncate+0xa0>
   14fa6:	4606      	mov	r6, r0
   14fa8:	460c      	mov	r4, r1
    lfs_off_t pos = file->pos;
   14faa:	6b4f      	ldr	r7, [r1, #52]	; 0x34
    lfs_off_t oldsize = lfs_file_size(lfs, file);
   14fac:	f7ff fdc9 	bl	14b42 <lfs_file_size>
    if (size < oldsize) {
   14fb0:	4285      	cmp	r5, r0
   14fb2:	d313      	bcc.n	14fdc <lfs_file_truncate+0x3e>
    } else if (size > oldsize) {
   14fb4:	4285      	cmp	r5, r0
   14fb6:	d92e      	bls.n	15016 <lfs_file_truncate+0x78>
        if (file->pos != oldsize) {
   14fb8:	4287      	cmp	r7, r0
   14fba:	d137      	bne.n	1502c <lfs_file_truncate+0x8e>
        while (file->pos < size) {
   14fbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   14fbe:	42ab      	cmp	r3, r5
   14fc0:	d229      	bcs.n	15016 <lfs_file_truncate+0x78>
            lfs_ssize_t res = lfs_file_write(lfs, file, &(uint8_t){0}, 1);
   14fc2:	2300      	movs	r3, #0
   14fc4:	f88d 3017 	strb.w	r3, [sp, #23]
   14fc8:	2301      	movs	r3, #1
   14fca:	f10d 0217 	add.w	r2, sp, #23
   14fce:	4621      	mov	r1, r4
   14fd0:	4630      	mov	r0, r6
   14fd2:	f7ff fecf 	bl	14d74 <lfs_file_write>
            if (res < 0) {
   14fd6:	2800      	cmp	r0, #0
   14fd8:	daf0      	bge.n	14fbc <lfs_file_truncate+0x1e>
   14fda:	e025      	b.n	15028 <lfs_file_truncate+0x8a>
        int err = lfs_file_flush(lfs, file);
   14fdc:	4621      	mov	r1, r4
   14fde:	4630      	mov	r0, r6
   14fe0:	f7f8 fc1e 	bl	d820 <lfs_file_flush>
        if (err) {
   14fe4:	bb00      	cbnz	r0, 15028 <lfs_file_truncate+0x8a>
        err = lfs_ctz_find(lfs, NULL, &file->cache,
   14fe6:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   14fea:	9303      	str	r3, [sp, #12]
   14fec:	f104 0338 	add.w	r3, r4, #56	; 0x38
   14ff0:	9302      	str	r3, [sp, #8]
   14ff2:	9501      	str	r5, [sp, #4]
   14ff4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   14ff6:	9300      	str	r3, [sp, #0]
   14ff8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   14ffa:	f104 0240 	add.w	r2, r4, #64	; 0x40
   14ffe:	2100      	movs	r1, #0
   15000:	4630      	mov	r0, r6
   15002:	f7ff fd46 	bl	14a92 <lfs_ctz_find>
        if (err) {
   15006:	b978      	cbnz	r0, 15028 <lfs_file_truncate+0x8a>
        file->ctz.head = file->block;
   15008:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1500a:	62a3      	str	r3, [r4, #40]	; 0x28
        file->ctz.size = size;
   1500c:	62e5      	str	r5, [r4, #44]	; 0x2c
        file->flags |= LFS_F_DIRTY | LFS_F_READING;
   1500e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15010:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
   15014:	6323      	str	r3, [r4, #48]	; 0x30
    lfs_soff_t res = lfs_file_seek(lfs, file, pos, LFS_SEEK_SET);
   15016:	2300      	movs	r3, #0
   15018:	463a      	mov	r2, r7
   1501a:	4621      	mov	r1, r4
   1501c:	4630      	mov	r0, r6
   1501e:	f7ff ffa2 	bl	14f66 <lfs_file_seek>
    if (res < 0) {
   15022:	2800      	cmp	r0, #0
   15024:	db00      	blt.n	15028 <lfs_file_truncate+0x8a>
    return 0;
   15026:	2000      	movs	r0, #0
}
   15028:	b007      	add	sp, #28
   1502a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            lfs_soff_t res = lfs_file_seek(lfs, file, 0, LFS_SEEK_END);
   1502c:	2302      	movs	r3, #2
   1502e:	2200      	movs	r2, #0
   15030:	4621      	mov	r1, r4
   15032:	4630      	mov	r0, r6
   15034:	f7ff ff97 	bl	14f66 <lfs_file_seek>
            if (res < 0) {
   15038:	2800      	cmp	r0, #0
   1503a:	dabf      	bge.n	14fbc <lfs_file_truncate+0x1e>
   1503c:	e7f4      	b.n	15028 <lfs_file_truncate+0x8a>
        return LFS_ERR_INVAL;
   1503e:	f06f 0015 	mvn.w	r0, #21
   15042:	e7f1      	b.n	15028 <lfs_file_truncate+0x8a>

00015044 <lfs_fs_demove>:
    return lfs_tag_type1(a->tag);
   15044:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    return (tag & 0x70000000) >> 20;
   15046:	0d1b      	lsrs	r3, r3, #20
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
   15048:	f413 6fe0 	tst.w	r3, #1792	; 0x700
   1504c:	d101      	bne.n	15052 <lfs_fs_demove+0xe>
        return 0;
   1504e:	2000      	movs	r0, #0
}
   15050:	4770      	bx	lr
static int lfs_fs_demove(lfs_t *lfs) {
   15052:	b530      	push	{r4, r5, lr}
   15054:	b08b      	sub	sp, #44	; 0x2c
   15056:	4604      	mov	r4, r0
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
   15058:	f100 0240 	add.w	r2, r0, #64	; 0x40
   1505c:	4669      	mov	r1, sp
   1505e:	f7ff f94e 	bl	142fe <lfs_dir_fetch>
    if (err) {
   15062:	b108      	cbz	r0, 15068 <lfs_fs_demove+0x24>
}
   15064:	b00b      	add	sp, #44	; 0x2c
   15066:	bd30      	pop	{r4, r5, pc}
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
   15068:	6be5      	ldr	r5, [r4, #60]	; 0x3c
    return (tag & 0x000ffc00) >> 10;
   1506a:	f3c5 2589 	ubfx	r5, r5, #10, #10
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
   1506e:	2200      	movs	r2, #0
   15070:	f240 31ff 	movw	r1, #1023	; 0x3ff
   15074:	4620      	mov	r0, r4
   15076:	f7f7 fa2d 	bl	c4d4 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
   1507a:	2300      	movs	r3, #0
   1507c:	9309      	str	r3, [sp, #36]	; 0x24
   1507e:	02ab      	lsls	r3, r5, #10
   15080:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
   15084:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
   15088:	9308      	str	r3, [sp, #32]
   1508a:	2301      	movs	r3, #1
   1508c:	aa08      	add	r2, sp, #32
   1508e:	4669      	mov	r1, sp
   15090:	4620      	mov	r0, r4
   15092:	f7f8 fed7 	bl	de44 <lfs_dir_commit>
    if (err) {
   15096:	e7e5      	b.n	15064 <lfs_fs_demove+0x20>

00015098 <lfs_fs_forceconsistency>:
static int lfs_fs_forceconsistency(lfs_t *lfs) {
   15098:	b510      	push	{r4, lr}
   1509a:	4604      	mov	r4, r0
    int err = lfs_fs_demove(lfs);
   1509c:	f7ff ffd2 	bl	15044 <lfs_fs_demove>
    if (err) {
   150a0:	b100      	cbz	r0, 150a4 <lfs_fs_forceconsistency+0xc>
}
   150a2:	bd10      	pop	{r4, pc}
    err = lfs_fs_deorphan(lfs);
   150a4:	4620      	mov	r0, r4
   150a6:	f7f9 f90b 	bl	e2c0 <lfs_fs_deorphan>
    if (err) {
   150aa:	e7fa      	b.n	150a2 <lfs_fs_forceconsistency+0xa>

000150ac <lfs_file_sync>:
    if (file->flags & LFS_F_ERRED) {
   150ac:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   150ae:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   150b2:	d001      	beq.n	150b8 <lfs_file_sync+0xc>
        return 0;
   150b4:	2000      	movs	r0, #0
}
   150b6:	4770      	bx	lr
int lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {
   150b8:	b530      	push	{r4, r5, lr}
   150ba:	b087      	sub	sp, #28
   150bc:	4605      	mov	r5, r0
   150be:	460c      	mov	r4, r1
    int err = lfs_file_flush(lfs, file);
   150c0:	f7f8 fbae 	bl	d820 <lfs_file_flush>
    if (err) {
   150c4:	2800      	cmp	r0, #0
   150c6:	d132      	bne.n	1512e <lfs_file_sync+0x82>
    if ((file->flags & LFS_F_DIRTY) &&
   150c8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   150ca:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   150ce:	d032      	beq.n	15136 <lfs_file_sync+0x8a>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
   150d0:	68a2      	ldr	r2, [r4, #8]
   150d2:	f1b2 3fff 	cmp.w	r2, #4294967295
   150d6:	d032      	beq.n	1513e <lfs_file_sync+0x92>
   150d8:	68e2      	ldr	r2, [r4, #12]
   150da:	f1b2 3fff 	cmp.w	r2, #4294967295
   150de:	d02c      	beq.n	1513a <lfs_file_sync+0x8e>
   150e0:	4602      	mov	r2, r0
    if ((file->flags & LFS_F_DIRTY) &&
   150e2:	f012 0f01 	tst.w	r2, #1
   150e6:	d126      	bne.n	15136 <lfs_file_sync+0x8a>
        if (file->flags & LFS_F_INLINE) {
   150e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   150ec:	d029      	beq.n	15142 <lfs_file_sync+0x96>
            buffer = file->cache.buffer;
   150ee:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
            size = file->ctz.size;
   150f0:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
            type = LFS_TYPE_INLINESTRUCT;
   150f2:	f240 2201 	movw	r2, #513	; 0x201
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
   150f6:	88a3      	ldrh	r3, [r4, #4]
   150f8:	029b      	lsls	r3, r3, #10
   150fa:	ea43 5202 	orr.w	r2, r3, r2, lsl #20
   150fe:	4302      	orrs	r2, r0
   15100:	9202      	str	r2, [sp, #8]
   15102:	9103      	str	r1, [sp, #12]
   15104:	6d22      	ldr	r2, [r4, #80]	; 0x50
   15106:	6891      	ldr	r1, [r2, #8]
   15108:	430b      	orrs	r3, r1
   1510a:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
   1510e:	9304      	str	r3, [sp, #16]
   15110:	6853      	ldr	r3, [r2, #4]
   15112:	9305      	str	r3, [sp, #20]
   15114:	2302      	movs	r3, #2
   15116:	aa02      	add	r2, sp, #8
   15118:	f104 0108 	add.w	r1, r4, #8
   1511c:	4628      	mov	r0, r5
   1511e:	f7f8 fe91 	bl	de44 <lfs_dir_commit>
        if (err) {
   15122:	b9c0      	cbnz	r0, 15156 <lfs_file_sync+0xaa>
        file->flags &= ~LFS_F_DIRTY;
   15124:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1512a:	6323      	str	r3, [r4, #48]	; 0x30
   1512c:	e003      	b.n	15136 <lfs_file_sync+0x8a>
        file->flags |= LFS_F_ERRED;
   1512e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15130:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   15134:	6323      	str	r3, [r4, #48]	; 0x30
}
   15136:	b007      	add	sp, #28
   15138:	bd30      	pop	{r4, r5, pc}
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
   1513a:	2201      	movs	r2, #1
   1513c:	e7d1      	b.n	150e2 <lfs_file_sync+0x36>
   1513e:	2201      	movs	r2, #1
   15140:	e7cf      	b.n	150e2 <lfs_file_sync+0x36>
            ctz = file->ctz;
   15142:	466b      	mov	r3, sp
   15144:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   15146:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   15148:	e883 0003 	stmia.w	r3, {r0, r1}
            size = sizeof(ctz);
   1514c:	2008      	movs	r0, #8
            buffer = &ctz;
   1514e:	4619      	mov	r1, r3
            type = LFS_TYPE_CTZSTRUCT;
   15150:	f240 2202 	movw	r2, #514	; 0x202
   15154:	e7cf      	b.n	150f6 <lfs_file_sync+0x4a>
            file->flags |= LFS_F_ERRED;
   15156:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15158:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   1515c:	6323      	str	r3, [r4, #48]	; 0x30
            return err;
   1515e:	e7ea      	b.n	15136 <lfs_file_sync+0x8a>

00015160 <lfs_file_close>:
int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
   15160:	b570      	push	{r4, r5, r6, lr}
   15162:	4604      	mov	r4, r0
   15164:	460d      	mov	r5, r1
    int err = lfs_file_sync(lfs, file);
   15166:	f7ff ffa1 	bl	150ac <lfs_file_sync>
   1516a:	4606      	mov	r6, r0
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   1516c:	f104 0228 	add.w	r2, r4, #40	; 0x28
   15170:	6813      	ldr	r3, [r2, #0]
   15172:	b12b      	cbz	r3, 15180 <lfs_file_close+0x20>
        if (*p == (struct lfs_mlist*)file) {
   15174:	42ab      	cmp	r3, r5
   15176:	d001      	beq.n	1517c <lfs_file_close+0x1c>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   15178:	461a      	mov	r2, r3
   1517a:	e7f9      	b.n	15170 <lfs_file_close+0x10>
            *p = (*p)->next;
   1517c:	681b      	ldr	r3, [r3, #0]
   1517e:	6013      	str	r3, [r2, #0]
    if (!file->cfg->buffer) {
   15180:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   15182:	681b      	ldr	r3, [r3, #0]
   15184:	b12b      	cbz	r3, 15192 <lfs_file_close+0x32>
    file->flags &= ~LFS_F_OPENED;
   15186:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   15188:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1518c:	632b      	str	r3, [r5, #48]	; 0x30
}
   1518e:	4630      	mov	r0, r6
   15190:	bd70      	pop	{r4, r5, r6, pc}
    free(p);
   15192:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   15194:	f7fd fc16 	bl	129c4 <free>
}
   15198:	e7f5      	b.n	15186 <lfs_file_close+0x26>

0001519a <lfs_dir_split>:
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
   1519a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1519e:	b08c      	sub	sp, #48	; 0x30
   151a0:	4605      	mov	r5, r0
   151a2:	460c      	mov	r4, r1
   151a4:	4617      	mov	r7, r2
   151a6:	461e      	mov	r6, r3
   151a8:	f8bd 804c 	ldrh.w	r8, [sp, #76]	; 0x4c
    lfs_alloc_ack(lfs);
   151ac:	f7fe ff2c 	bl	14008 <lfs_alloc_ack>
    int err = lfs_dir_alloc(lfs, &tail);
   151b0:	a904      	add	r1, sp, #16
   151b2:	4628      	mov	r0, r5
   151b4:	f7ff fcea 	bl	14b8c <lfs_dir_alloc>
    if (err) {
   151b8:	b110      	cbz	r0, 151c0 <lfs_dir_split+0x26>
}
   151ba:	b00c      	add	sp, #48	; 0x30
   151bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tail.split = dir->split;
   151c0:	7de3      	ldrb	r3, [r4, #23]
   151c2:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
   151c6:	69a3      	ldr	r3, [r4, #24]
   151c8:	930a      	str	r3, [sp, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
   151ca:	69e3      	ldr	r3, [r4, #28]
   151cc:	930b      	str	r3, [sp, #44]	; 0x2c
    err = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
   151ce:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
   151d2:	9302      	str	r3, [sp, #8]
   151d4:	f8cd 8004 	str.w	r8, [sp, #4]
   151d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   151da:	9300      	str	r3, [sp, #0]
   151dc:	4633      	mov	r3, r6
   151de:	463a      	mov	r2, r7
   151e0:	a904      	add	r1, sp, #16
   151e2:	4628      	mov	r0, r5
   151e4:	f7f8 fc34 	bl	da50 <lfs_dir_compact>
    if (err) {
   151e8:	2800      	cmp	r0, #0
   151ea:	d1e6      	bne.n	151ba <lfs_dir_split+0x20>
    dir->tail[0] = tail.pair[0];
   151ec:	9904      	ldr	r1, [sp, #16]
   151ee:	61a1      	str	r1, [r4, #24]
    dir->tail[1] = tail.pair[1];
   151f0:	9a05      	ldr	r2, [sp, #20]
   151f2:	61e2      	str	r2, [r4, #28]
    dir->split = true;
   151f4:	2301      	movs	r3, #1
   151f6:	75e3      	strb	r3, [r4, #23]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   151f8:	6823      	ldr	r3, [r4, #0]
   151fa:	6a2e      	ldr	r6, [r5, #32]
   151fc:	42b3      	cmp	r3, r6
   151fe:	d007      	beq.n	15210 <lfs_dir_split+0x76>
   15200:	6867      	ldr	r7, [r4, #4]
   15202:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   15204:	42a7      	cmp	r7, r4
   15206:	d003      	beq.n	15210 <lfs_dir_split+0x76>
   15208:	42a3      	cmp	r3, r4
   1520a:	d001      	beq.n	15210 <lfs_dir_split+0x76>
   1520c:	42be      	cmp	r6, r7
   1520e:	d1d4      	bne.n	151ba <lfs_dir_split+0x20>
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
   15210:	f1b8 0f00 	cmp.w	r8, #0
   15214:	d1d1      	bne.n	151ba <lfs_dir_split+0x20>
        lfs->root[0] = tail.pair[0];
   15216:	6229      	str	r1, [r5, #32]
        lfs->root[1] = tail.pair[1];
   15218:	626a      	str	r2, [r5, #36]	; 0x24
   1521a:	e7ce      	b.n	151ba <lfs_dir_split+0x20>

0001521c <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   1521c:	b508      	push	{r3, lr}
  _DoInit();
   1521e:	f7f9 fdf1 	bl	ee04 <_DoInit>
}
   15222:	bd08      	pop	{r3, pc}

00015224 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   15224:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   15226:	f7ff fff9 	bl	1521c <SEGGER_RTT_Init>

	return 0;
}
   1522a:	2000      	movs	r0, #0
   1522c:	bd08      	pop	{r3, pc}

0001522e <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1522e:	b148      	cbz	r0, 15244 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   15230:	68c3      	ldr	r3, [r0, #12]
   15232:	8818      	ldrh	r0, [r3, #0]
   15234:	f3c0 0008 	ubfx	r0, r0, #0, #9
   15238:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   1523c:	bf14      	ite	ne
   1523e:	2000      	movne	r0, #0
   15240:	2001      	moveq	r0, #1
   15242:	4770      	bx	lr
		return false;
   15244:	2000      	movs	r0, #0
}
   15246:	4770      	bx	lr

00015248 <arch_system_halt>:
	__asm__ volatile(
   15248:	f04f 0220 	mov.w	r2, #32
   1524c:	f3ef 8311 	mrs	r3, BASEPRI
   15250:	f382 8812 	msr	BASEPRI_MAX, r2
   15254:	f3bf 8f6f 	isb	sy
	for (;;) {
   15258:	e7fe      	b.n	15258 <arch_system_halt+0x10>

0001525a <k_heap_init>:
{
   1525a:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
   1525c:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   15260:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   15262:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   15264:	f7fc fa74 	bl	11750 <sys_heap_init>
}
   15268:	bd10      	pop	{r4, pc}

0001526a <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1526a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1526e:	b087      	sub	sp, #28
   15270:	4680      	mov	r8, r0
   15272:	9103      	str	r1, [sp, #12]
   15274:	9204      	str	r2, [sp, #16]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   15276:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1527a:	f000 fc1b 	bl	15ab4 <sys_clock_timeout_end_calc>
   1527e:	4681      	mov	r9, r0
   15280:	468b      	mov	fp, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   15282:	f108 0314 	add.w	r3, r8, #20
   15286:	9305      	str	r3, [sp, #20]
   15288:	f04f 0320 	mov.w	r3, #32
   1528c:	f3ef 8511 	mrs	r5, BASEPRI
   15290:	f383 8812 	msr	BASEPRI_MAX, r3
   15294:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
   15298:	f04f 0a00 	mov.w	sl, #0
	void *ret = NULL;
   1529c:	4654      	mov	r4, sl

	while (ret == NULL) {
   1529e:	e00f      	b.n	152c0 <k_heap_aligned_alloc+0x56>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   152a0:	e9cd 6700 	strd	r6, r7, [sp]
   152a4:	f108 020c 	add.w	r2, r8, #12
   152a8:	4629      	mov	r1, r5
   152aa:	9805      	ldr	r0, [sp, #20]
   152ac:	f7fa fe46 	bl	ff3c <z_pend_curr>
   152b0:	f04f 0320 	mov.w	r3, #32
   152b4:	f3ef 8511 	mrs	r5, BASEPRI
   152b8:	f383 8812 	msr	BASEPRI_MAX, r3
   152bc:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
   152c0:	b9b4      	cbnz	r4, 152f0 <k_heap_aligned_alloc+0x86>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   152c2:	9a04      	ldr	r2, [sp, #16]
   152c4:	9903      	ldr	r1, [sp, #12]
   152c6:	4640      	mov	r0, r8
   152c8:	f7fc f9b4 	bl	11634 <sys_heap_aligned_alloc>
   152cc:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   152ce:	f7fb fa1f 	bl	10710 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   152d2:	b96c      	cbnz	r4, 152f0 <k_heap_aligned_alloc+0x86>
		    (ret != NULL) || ((end - now) <= 0)) {
   152d4:	ebb9 0600 	subs.w	r6, r9, r0
   152d8:	eb6b 0701 	sbc.w	r7, fp, r1
   152dc:	2e01      	cmp	r6, #1
   152de:	f177 0300 	sbcs.w	r3, r7, #0
   152e2:	db05      	blt.n	152f0 <k_heap_aligned_alloc+0x86>
		if (!blocked_alloc) {
   152e4:	f1ba 0f00 	cmp.w	sl, #0
   152e8:	d1da      	bne.n	152a0 <k_heap_aligned_alloc+0x36>
			blocked_alloc = true;
   152ea:	f04f 0a01 	mov.w	sl, #1
   152ee:	e7d7      	b.n	152a0 <k_heap_aligned_alloc+0x36>
	__asm__ volatile(
   152f0:	f385 8811 	msr	BASEPRI, r5
   152f4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   152f8:	4620      	mov	r0, r4
   152fa:	b007      	add	sp, #28
   152fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015300 <k_heap_alloc>:

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   15300:	b500      	push	{lr}
   15302:	b083      	sub	sp, #12
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, alloc, h, timeout);

	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   15304:	e9cd 2300 	strd	r2, r3, [sp]
   15308:	460a      	mov	r2, r1
   1530a:	2104      	movs	r1, #4
   1530c:	f7ff ffad 	bl	1526a <k_heap_aligned_alloc>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, alloc, h, timeout, ret);

	return ret;
}
   15310:	b003      	add	sp, #12
   15312:	f85d fb04 	ldr.w	pc, [sp], #4

00015316 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   15316:	b570      	push	{r4, r5, r6, lr}
   15318:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1531a:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
   1531e:	f04f 0320 	mov.w	r3, #32
   15322:	f3ef 8511 	mrs	r5, BASEPRI
   15326:	f383 8812 	msr	BASEPRI_MAX, r3
   1532a:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
   1532e:	f7fc f91f 	bl	11570 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   15332:	f104 000c 	add.w	r0, r4, #12
   15336:	f000 faf5 	bl	15924 <z_unpend_all>
   1533a:	b920      	cbnz	r0, 15346 <k_heap_free+0x30>
	__asm__ volatile(
   1533c:	f385 8811 	msr	BASEPRI, r5
   15340:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   15344:	bd70      	pop	{r4, r5, r6, pc}
		z_reschedule(&h->lock, key);
   15346:	4629      	mov	r1, r5
   15348:	4630      	mov	r0, r6
   1534a:	f7fa fc93 	bl	fc74 <z_reschedule>
   1534e:	e7f9      	b.n	15344 <k_heap_free+0x2e>

00015350 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   15350:	68c2      	ldr	r2, [r0, #12]
   15352:	6903      	ldr	r3, [r0, #16]
   15354:	431a      	orrs	r2, r3
   15356:	f012 0203 	ands.w	r2, r2, #3
   1535a:	d10d      	bne.n	15378 <create_free_list+0x28>
	slab->free_list = NULL;
   1535c:	2100      	movs	r1, #0
   1535e:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   15360:	e005      	b.n	1536e <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   15362:	6941      	ldr	r1, [r0, #20]
   15364:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   15366:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   15368:	68c1      	ldr	r1, [r0, #12]
   1536a:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   1536c:	3201      	adds	r2, #1
   1536e:	6881      	ldr	r1, [r0, #8]
   15370:	4291      	cmp	r1, r2
   15372:	d8f6      	bhi.n	15362 <create_free_list+0x12>
	return 0;
   15374:	2000      	movs	r0, #0
   15376:	4770      	bx	lr
		return -EINVAL;
   15378:	f06f 0015 	mvn.w	r0, #21
}
   1537c:	4770      	bx	lr

0001537e <k_mem_slab_init>:
{
   1537e:	b510      	push	{r4, lr}
   15380:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
   15382:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
   15384:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
   15386:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
   15388:	2300      	movs	r3, #0
   1538a:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
   1538c:	f7ff ffe0 	bl	15350 <create_free_list>
	if (rc < 0) {
   15390:	2800      	cmp	r0, #0
   15392:	db01      	blt.n	15398 <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
   15394:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
   15396:	6064      	str	r4, [r4, #4]
}
   15398:	bd10      	pop	{r4, pc}

0001539a <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1539a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1539c:	4604      	mov	r4, r0
   1539e:	460d      	mov	r5, r1
	__asm__ volatile(
   153a0:	f04f 0320 	mov.w	r3, #32
   153a4:	f3ef 8611 	mrs	r6, BASEPRI
   153a8:	f383 8812 	msr	BASEPRI_MAX, r3
   153ac:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   153b0:	6943      	ldr	r3, [r0, #20]
   153b2:	b163      	cbz	r3, 153ce <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   153b4:	682b      	ldr	r3, [r5, #0]
   153b6:	6962      	ldr	r2, [r4, #20]
   153b8:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   153ba:	682b      	ldr	r3, [r5, #0]
   153bc:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   153be:	69a3      	ldr	r3, [r4, #24]
   153c0:	3b01      	subs	r3, #1
   153c2:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   153c4:	f386 8811 	msr	BASEPRI, r6
   153c8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   153cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   153ce:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   153d2:	f000 fa7c 	bl	158ce <z_unpend_first_thread>
		if (pending_thread != NULL) {
   153d6:	2800      	cmp	r0, #0
   153d8:	d0ec      	beq.n	153b4 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   153da:	682a      	ldr	r2, [r5, #0]
   153dc:	2100      	movs	r1, #0
   153de:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   153e2:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   153e4:	f000 f9b1 	bl	1574a <z_ready_thread>
			z_reschedule(&slab->lock, key);
   153e8:	4631      	mov	r1, r6
   153ea:	4638      	mov	r0, r7
   153ec:	f7fa fc42 	bl	fc74 <z_reschedule>
			return;
   153f0:	e7ec      	b.n	153cc <k_mem_slab_free+0x32>

000153f2 <setup_thread_stack>:
{
   153f2:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   153f4:	3207      	adds	r2, #7
   153f6:	f022 0207 	bic.w	r2, r2, #7
   153fa:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   153fe:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   15402:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
   15406:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
   1540a:	2200      	movs	r2, #0
   1540c:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
   15410:	18c8      	adds	r0, r1, r3
   15412:	bc10      	pop	{r4}
   15414:	4770      	bx	lr

00015416 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   15416:	f3ef 8005 	mrs	r0, IPSR
}
   1541a:	3800      	subs	r0, #0
   1541c:	bf18      	it	ne
   1541e:	2001      	movne	r0, #1
   15420:	4770      	bx	lr

00015422 <k_thread_name_get>:
}
   15422:	3074      	adds	r0, #116	; 0x74
   15424:	4770      	bx	lr

00015426 <z_impl_k_thread_start>:
{
   15426:	b508      	push	{r3, lr}
	z_sched_start(thread);
   15428:	f7fa fd4e 	bl	fec8 <z_sched_start>
}
   1542c:	bd08      	pop	{r3, pc}

0001542e <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   1542e:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   15430:	2400      	movs	r4, #0
   15432:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   15434:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   15436:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   15438:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   1543a:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   1543c:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   1543e:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   15440:	bc10      	pop	{r4}
   15442:	4770      	bx	lr

00015444 <z_impl_k_thread_create>:
{
   15444:	b5f0      	push	{r4, r5, r6, r7, lr}
   15446:	b087      	sub	sp, #28
   15448:	4604      	mov	r4, r0
   1544a:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   1544e:	2500      	movs	r5, #0
   15450:	9505      	str	r5, [sp, #20]
   15452:	9d10      	ldr	r5, [sp, #64]	; 0x40
   15454:	9504      	str	r5, [sp, #16]
   15456:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   15458:	9503      	str	r5, [sp, #12]
   1545a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1545c:	9502      	str	r5, [sp, #8]
   1545e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   15460:	9501      	str	r5, [sp, #4]
   15462:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   15464:	9500      	str	r5, [sp, #0]
   15466:	f7fa f82d 	bl	f4c4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   1546a:	f1b7 3fff 	cmp.w	r7, #4294967295
   1546e:	bf08      	it	eq
   15470:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   15474:	d102      	bne.n	1547c <z_impl_k_thread_create+0x38>
}
   15476:	4620      	mov	r0, r4
   15478:	b007      	add	sp, #28
   1547a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
   1547c:	4632      	mov	r2, r6
   1547e:	463b      	mov	r3, r7
   15480:	4620      	mov	r0, r4
   15482:	f7fa f80d 	bl	f4a0 <schedule_new_thread>
   15486:	e7f6      	b.n	15476 <z_impl_k_thread_create+0x32>

00015488 <z_pm_save_idle_exit>:

void z_pm_save_idle_exit(int32_t ticks)
{
   15488:	b508      	push	{r3, lr}
	/* Some CPU low power states require notification at the ISR
	 * to allow any operations that needs to be done before kernel
	 * switches task or processes nested interrupts.
	 * This can be simply ignored if not required.
	 */
	pm_system_resume();
   1548a:	f7ef fc53 	bl	4d34 <pm_system_resume>
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
   1548e:	f7fe faed 	bl	13a6c <sys_clock_idle_exit>
}
   15492:	bd08      	pop	{r3, pc}

00015494 <idle>:

void idle(void *unused1, void *unused2, void *unused3)
{
   15494:	b508      	push	{r3, lr}
	__asm__ volatile(
   15496:	f04f 0220 	mov.w	r2, #32
   1549a:	f3ef 8311 	mrs	r3, BASEPRI
   1549e:	f382 8812 	msr	BASEPRI_MAX, r2
   154a2:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

		if (IS_ENABLED(CONFIG_PM)) {
			pm_save_idle();
   154a6:	f7fa f8bf 	bl	f628 <pm_save_idle>
   154aa:	e7f4      	b.n	15496 <idle+0x2>

000154ac <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   154ac:	4288      	cmp	r0, r1
   154ae:	da00      	bge.n	154b2 <new_prio_for_inheritance+0x6>
   154b0:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   154b2:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   154b6:	db01      	blt.n	154bc <new_prio_for_inheritance+0x10>
   154b8:	4608      	mov	r0, r1
   154ba:	4770      	bx	lr
   154bc:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   154c0:	4770      	bx	lr

000154c2 <adjust_owner_prio>:
{
   154c2:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   154c4:	6880      	ldr	r0, [r0, #8]
   154c6:	f990 300e 	ldrsb.w	r3, [r0, #14]
   154ca:	428b      	cmp	r3, r1
   154cc:	d101      	bne.n	154d2 <adjust_owner_prio+0x10>
	return false;
   154ce:	2000      	movs	r0, #0
}
   154d0:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   154d2:	f7fa fd47 	bl	ff64 <z_set_prio>
   154d6:	e7fb      	b.n	154d0 <adjust_owner_prio+0xe>

000154d8 <z_impl_k_mutex_init>:
{
   154d8:	4603      	mov	r3, r0
	mutex->owner = NULL;
   154da:	2000      	movs	r0, #0
   154dc:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   154de:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   154e0:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   154e2:	605b      	str	r3, [r3, #4]
}
   154e4:	4770      	bx	lr

000154e6 <prepare_thread_to_run>:
{
   154e6:	b508      	push	{r3, lr}
   154e8:	2200      	movs	r2, #0
   154ea:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
   154ee:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   154f0:	f000 f92b 	bl	1574a <z_ready_thread>
}
   154f4:	bd08      	pop	{r3, pc}

000154f6 <queue_insert>:
{
   154f6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   154fa:	4605      	mov	r5, r0
   154fc:	460e      	mov	r6, r1
   154fe:	4614      	mov	r4, r2
   15500:	461f      	mov	r7, r3
   15502:	f89d 2020 	ldrb.w	r2, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   15506:	f100 0808 	add.w	r8, r0, #8
   1550a:	f04f 0320 	mov.w	r3, #32
   1550e:	f3ef 8911 	mrs	r9, BASEPRI
   15512:	f383 8812 	msr	BASEPRI_MAX, r3
   15516:	f3bf 8f6f 	isb	sy
	if (is_append) {
   1551a:	b102      	cbz	r2, 1551e <queue_insert+0x28>
	return list->tail;
   1551c:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1551e:	4640      	mov	r0, r8
   15520:	f000 f9d5 	bl	158ce <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   15524:	b9a0      	cbnz	r0, 15550 <queue_insert+0x5a>
	if (alloc) {
   15526:	b9e7      	cbnz	r7, 15562 <queue_insert+0x6c>
	node->next_and_flags = flags;
   15528:	2300      	movs	r3, #0
   1552a:	6023      	str	r3, [r4, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1552c:	b356      	cbz	r6, 15584 <queue_insert+0x8e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1552e:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   15530:	f033 0303 	bics.w	r3, r3, #3
   15534:	d134      	bne.n	155a0 <queue_insert+0xaa>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   15536:	6823      	ldr	r3, [r4, #0]
   15538:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1553c:	6023      	str	r3, [r4, #0]
	return list->tail;
   1553e:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   15540:	b35a      	cbz	r2, 1559a <queue_insert+0xa4>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   15542:	6813      	ldr	r3, [r2, #0]
   15544:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   15548:	4323      	orrs	r3, r4
   1554a:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1554c:	606c      	str	r4, [r5, #4]
}
   1554e:	e031      	b.n	155b4 <queue_insert+0xbe>
		prepare_thread_to_run(first_pending_thread, data);
   15550:	4621      	mov	r1, r4
   15552:	f7ff ffc8 	bl	154e6 <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   15556:	4649      	mov	r1, r9
   15558:	4640      	mov	r0, r8
   1555a:	f7fa fb8b 	bl	fc74 <z_reschedule>
		return 0;
   1555e:	2000      	movs	r0, #0
   15560:	e02d      	b.n	155be <queue_insert+0xc8>
	return z_thread_aligned_alloc(0, size);
   15562:	2108      	movs	r1, #8
   15564:	2000      	movs	r0, #0
   15566:	f7fb f99f 	bl	108a8 <z_thread_aligned_alloc>
		if (anode == NULL) {
   1556a:	b120      	cbz	r0, 15576 <queue_insert+0x80>
		anode->data = data;
   1556c:	6044      	str	r4, [r0, #4]
	node->next_and_flags = flags;
   1556e:	2201      	movs	r2, #1
   15570:	6002      	str	r2, [r0, #0]
		data = anode;
   15572:	4604      	mov	r4, r0
   15574:	e7da      	b.n	1552c <queue_insert+0x36>
	__asm__ volatile(
   15576:	f389 8811 	msr	BASEPRI, r9
   1557a:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1557e:	f06f 000b 	mvn.w	r0, #11
   15582:	e01c      	b.n	155be <queue_insert+0xc8>
	return list->head;
   15584:	682a      	ldr	r2, [r5, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   15586:	6823      	ldr	r3, [r4, #0]
   15588:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   1558c:	4313      	orrs	r3, r2
   1558e:	6023      	str	r3, [r4, #0]
	list->head = node;
   15590:	602c      	str	r4, [r5, #0]
	return list->tail;
   15592:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   15594:	b973      	cbnz	r3, 155b4 <queue_insert+0xbe>
	list->tail = node;
   15596:	606c      	str	r4, [r5, #4]
}
   15598:	e00c      	b.n	155b4 <queue_insert+0xbe>
	list->tail = node;
   1559a:	606c      	str	r4, [r5, #4]
	list->head = node;
   1559c:	602c      	str	r4, [r5, #0]
}
   1559e:	e009      	b.n	155b4 <queue_insert+0xbe>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   155a0:	6822      	ldr	r2, [r4, #0]
   155a2:	f002 0203 	and.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   155a6:	4313      	orrs	r3, r2
   155a8:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   155aa:	6833      	ldr	r3, [r6, #0]
   155ac:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   155b0:	431c      	orrs	r4, r3
   155b2:	6034      	str	r4, [r6, #0]
	z_reschedule(&queue->lock, key);
   155b4:	4649      	mov	r1, r9
   155b6:	4640      	mov	r0, r8
   155b8:	f7fa fb5c 	bl	fc74 <z_reschedule>
	return 0;
   155bc:	2000      	movs	r0, #0
}
   155be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000155c2 <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   155c2:	b160      	cbz	r0, 155de <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   155c4:	6803      	ldr	r3, [r0, #0]
   155c6:	f013 0f03 	tst.w	r3, #3
   155ca:	d008      	beq.n	155de <z_queue_node_peek+0x1c>
{
   155cc:	b510      	push	{r4, lr}
		ret = anode->data;
   155ce:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   155d0:	b909      	cbnz	r1, 155d6 <z_queue_node_peek+0x14>
		ret = anode->data;
   155d2:	4620      	mov	r0, r4
}
   155d4:	bd10      	pop	{r4, pc}
			k_free(anode);
   155d6:	f000 fade 	bl	15b96 <k_free>
		ret = anode->data;
   155da:	4620      	mov	r0, r4
   155dc:	e7fa      	b.n	155d4 <z_queue_node_peek+0x12>
}
   155de:	4770      	bx	lr

000155e0 <k_queue_append>:
{
   155e0:	b500      	push	{lr}
   155e2:	b083      	sub	sp, #12
   155e4:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   155e6:	2301      	movs	r3, #1
   155e8:	9300      	str	r3, [sp, #0]
   155ea:	2300      	movs	r3, #0
   155ec:	4619      	mov	r1, r3
   155ee:	f7ff ff82 	bl	154f6 <queue_insert>
}
   155f2:	b003      	add	sp, #12
   155f4:	f85d fb04 	ldr.w	pc, [sp], #4

000155f8 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   155f8:	b13a      	cbz	r2, 1560a <z_impl_k_sem_init+0x12>
   155fa:	428a      	cmp	r2, r1
   155fc:	d308      	bcc.n	15610 <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
   155fe:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   15600:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   15602:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   15604:	6040      	str	r0, [r0, #4]
	return 0;
   15606:	2000      	movs	r0, #0
   15608:	4770      	bx	lr
		return -EINVAL;
   1560a:	f06f 0015 	mvn.w	r0, #21
   1560e:	4770      	bx	lr
   15610:	f06f 0015 	mvn.w	r0, #21
}
   15614:	4770      	bx	lr

00015616 <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   15616:	2300      	movs	r3, #0
   15618:	6003      	str	r3, [r0, #0]
   1561a:	6083      	str	r3, [r0, #8]
   1561c:	60c3      	str	r3, [r0, #12]
   1561e:	6041      	str	r1, [r0, #4]
}
   15620:	4770      	bx	lr

00015622 <k_work_submit_to_queue>:
{
   15622:	b530      	push	{r4, r5, lr}
   15624:	b083      	sub	sp, #12
   15626:	9001      	str	r0, [sp, #4]
   15628:	4608      	mov	r0, r1
	__asm__ volatile(
   1562a:	f04f 0320 	mov.w	r3, #32
   1562e:	f3ef 8511 	mrs	r5, BASEPRI
   15632:	f383 8812 	msr	BASEPRI_MAX, r3
   15636:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   1563a:	a901      	add	r1, sp, #4
   1563c:	f7fa f95a 	bl	f8f4 <submit_to_queue_locked>
   15640:	4604      	mov	r4, r0
	__asm__ volatile(
   15642:	f385 8811 	msr	BASEPRI, r5
   15646:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   1564a:	2800      	cmp	r0, #0
   1564c:	dc02      	bgt.n	15654 <k_work_submit_to_queue+0x32>
}
   1564e:	4620      	mov	r0, r4
   15650:	b003      	add	sp, #12
   15652:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
   15654:	f7fa fea4 	bl	103a0 <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   15658:	2800      	cmp	r0, #0
   1565a:	d0f8      	beq.n	1564e <k_work_submit_to_queue+0x2c>
	z_impl_k_yield();
   1565c:	f7fa fda6 	bl	101ac <z_impl_k_yield>
	return ret;
   15660:	e7f5      	b.n	1564e <k_work_submit_to_queue+0x2c>

00015662 <thread_active_elsewhere>:
}
   15662:	2000      	movs	r0, #0
   15664:	4770      	bx	lr

00015666 <pended_on_thread>:
}
   15666:	6880      	ldr	r0, [r0, #8]
   15668:	4770      	bx	lr

0001566a <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   1566a:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   1566e:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   15672:	4283      	cmp	r3, r0
   15674:	d001      	beq.n	1567a <z_sched_prio_cmp+0x10>
		return b2 - b1;
   15676:	1ac0      	subs	r0, r0, r3
   15678:	4770      	bx	lr
	return 0;
   1567a:	2000      	movs	r0, #0
}
   1567c:	4770      	bx	lr

0001567e <z_unpend_thread_no_timeout>:
{
   1567e:	b538      	push	{r3, r4, r5, lr}
   15680:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   15682:	2300      	movs	r3, #0
	__asm__ volatile(
   15684:	f04f 0220 	mov.w	r2, #32
   15688:	f3ef 8511 	mrs	r5, BASEPRI
   1568c:	f382 8812 	msr	BASEPRI_MAX, r2
   15690:	f3bf 8f6f 	isb	sy
   15694:	b98b      	cbnz	r3, 156ba <z_unpend_thread_no_timeout+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   15696:	4620      	mov	r0, r4
   15698:	f7ff ffe5 	bl	15666 <pended_on_thread>
   1569c:	4621      	mov	r1, r4
   1569e:	f000 f822 	bl	156e6 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   156a2:	7b63      	ldrb	r3, [r4, #13]
   156a4:	f023 0302 	bic.w	r3, r3, #2
   156a8:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   156aa:	2300      	movs	r3, #0
   156ac:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   156ae:	f385 8811 	msr	BASEPRI, r5
   156b2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   156b6:	2301      	movs	r3, #1
   156b8:	e7ec      	b.n	15694 <z_unpend_thread_no_timeout+0x16>
}
   156ba:	bd38      	pop	{r3, r4, r5, pc}

000156bc <z_reschedule_irqlock>:
{
   156bc:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   156be:	4603      	mov	r3, r0
   156c0:	b920      	cbnz	r0, 156cc <z_reschedule_irqlock+0x10>
   156c2:	f3ef 8205 	mrs	r2, IPSR
   156c6:	b942      	cbnz	r2, 156da <z_reschedule_irqlock+0x1e>
   156c8:	2201      	movs	r2, #1
   156ca:	e000      	b.n	156ce <z_reschedule_irqlock+0x12>
   156cc:	2200      	movs	r2, #0
	if (resched(key)) {
   156ce:	b932      	cbnz	r2, 156de <z_reschedule_irqlock+0x22>
   156d0:	f383 8811 	msr	BASEPRI, r3
   156d4:	f3bf 8f6f 	isb	sy
}
   156d8:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   156da:	2200      	movs	r2, #0
   156dc:	e7f7      	b.n	156ce <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   156de:	4618      	mov	r0, r3
   156e0:	f7ef fd72 	bl	51c8 <arch_swap>
	return ret;
   156e4:	e7f8      	b.n	156d8 <z_reschedule_irqlock+0x1c>

000156e6 <z_priq_dumb_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   156e6:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   156e8:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
   156ea:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   156ec:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   156ee:	2300      	movs	r3, #0
   156f0:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   156f2:	604b      	str	r3, [r1, #4]
}
   156f4:	4770      	bx	lr

000156f6 <z_unpend_thread>:
{
   156f6:	b538      	push	{r3, r4, r5, lr}
   156f8:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   156fa:	2300      	movs	r3, #0
	__asm__ volatile(
   156fc:	f04f 0220 	mov.w	r2, #32
   15700:	f3ef 8511 	mrs	r5, BASEPRI
   15704:	f382 8812 	msr	BASEPRI_MAX, r2
   15708:	f3bf 8f6f 	isb	sy
   1570c:	b98b      	cbnz	r3, 15732 <z_unpend_thread+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1570e:	4620      	mov	r0, r4
   15710:	f7ff ffa9 	bl	15666 <pended_on_thread>
   15714:	4621      	mov	r1, r4
   15716:	f7ff ffe6 	bl	156e6 <z_priq_dumb_remove>
   1571a:	7b63      	ldrb	r3, [r4, #13]
   1571c:	f023 0302 	bic.w	r3, r3, #2
   15720:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   15722:	2300      	movs	r3, #0
   15724:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   15726:	f385 8811 	msr	BASEPRI, r5
   1572a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1572e:	2301      	movs	r3, #1
   15730:	e7ec      	b.n	1570c <z_unpend_thread+0x16>
	return z_abort_timeout(&thread->base.timeout);
   15732:	f104 0018 	add.w	r0, r4, #24
   15736:	f000 f954 	bl	159e2 <z_abort_timeout>
}
   1573a:	bd38      	pop	{r3, r4, r5, pc}

0001573c <z_priq_dumb_best>:
{
   1573c:	4603      	mov	r3, r0
	return list->head == list;
   1573e:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15740:	4283      	cmp	r3, r0
   15742:	d000      	beq.n	15746 <z_priq_dumb_best+0xa>
}
   15744:	4770      	bx	lr
	struct k_thread *thread = NULL;
   15746:	2000      	movs	r0, #0
	return thread;
   15748:	e7fc      	b.n	15744 <z_priq_dumb_best+0x8>

0001574a <z_ready_thread>:
{
   1574a:	b538      	push	{r3, r4, r5, lr}
   1574c:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   1574e:	2300      	movs	r3, #0
	__asm__ volatile(
   15750:	f04f 0220 	mov.w	r2, #32
   15754:	f3ef 8511 	mrs	r5, BASEPRI
   15758:	f382 8812 	msr	BASEPRI_MAX, r2
   1575c:	f3bf 8f6f 	isb	sy
   15760:	e007      	b.n	15772 <z_ready_thread+0x28>
			ready_thread(thread);
   15762:	4620      	mov	r0, r4
   15764:	f7fa fb70 	bl	fe48 <ready_thread>
	__asm__ volatile(
   15768:	f385 8811 	msr	BASEPRI, r5
   1576c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   15770:	2301      	movs	r3, #1
   15772:	b92b      	cbnz	r3, 15780 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   15774:	4620      	mov	r0, r4
   15776:	f7ff ff74 	bl	15662 <thread_active_elsewhere>
   1577a:	2800      	cmp	r0, #0
   1577c:	d1f4      	bne.n	15768 <z_ready_thread+0x1e>
   1577e:	e7f0      	b.n	15762 <z_ready_thread+0x18>
}
   15780:	bd38      	pop	{r3, r4, r5, pc}

00015782 <z_thread_timeout>:
{
   15782:	b570      	push	{r4, r5, r6, lr}
   15784:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   15786:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
   1578a:	2300      	movs	r3, #0
	__asm__ volatile(
   1578c:	f04f 0220 	mov.w	r2, #32
   15790:	f3ef 8611 	mrs	r6, BASEPRI
   15794:	f382 8812 	msr	BASEPRI_MAX, r2
   15798:	f3bf 8f6f 	isb	sy
   1579c:	e019      	b.n	157d2 <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1579e:	4628      	mov	r0, r5
   157a0:	f7ff ff61 	bl	15666 <pended_on_thread>
   157a4:	4629      	mov	r1, r5
   157a6:	f7ff ff9e 	bl	156e6 <z_priq_dumb_remove>
   157aa:	7b6b      	ldrb	r3, [r5, #13]
   157ac:	f023 0302 	bic.w	r3, r3, #2
   157b0:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   157b2:	2300      	movs	r3, #0
   157b4:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   157b6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   157ba:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
   157be:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   157c2:	4628      	mov	r0, r5
   157c4:	f7fa fb40 	bl	fe48 <ready_thread>
	__asm__ volatile(
   157c8:	f386 8811 	msr	BASEPRI, r6
   157cc:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   157d0:	2301      	movs	r3, #1
   157d2:	b94b      	cbnz	r3, 157e8 <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   157d4:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   157d8:	f013 0f28 	tst.w	r3, #40	; 0x28
   157dc:	d1f4      	bne.n	157c8 <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
   157de:	f854 3c10 	ldr.w	r3, [r4, #-16]
   157e2:	2b00      	cmp	r3, #0
   157e4:	d1db      	bne.n	1579e <z_thread_timeout+0x1c>
   157e6:	e7e6      	b.n	157b6 <z_thread_timeout+0x34>
}
   157e8:	bd70      	pop	{r4, r5, r6, pc}

000157ea <add_to_waitq_locked>:
{
   157ea:	b570      	push	{r4, r5, r6, lr}
   157ec:	4605      	mov	r5, r0
   157ee:	460e      	mov	r6, r1
	unready_thread(thread);
   157f0:	f7fa fb88 	bl	ff04 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   157f4:	7b6b      	ldrb	r3, [r5, #13]
   157f6:	f043 0302 	orr.w	r3, r3, #2
   157fa:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   157fc:	b1b6      	cbz	r6, 1582c <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
   157fe:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   15800:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15802:	42a6      	cmp	r6, r4
   15804:	d019      	beq.n	1583a <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15806:	b164      	cbz	r4, 15822 <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
   15808:	4621      	mov	r1, r4
   1580a:	4628      	mov	r0, r5
   1580c:	f7ff ff2d 	bl	1566a <z_sched_prio_cmp>
   15810:	2800      	cmp	r0, #0
   15812:	dc0c      	bgt.n	1582e <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   15814:	b12c      	cbz	r4, 15822 <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
   15816:	6873      	ldr	r3, [r6, #4]
   15818:	429c      	cmp	r4, r3
   1581a:	d002      	beq.n	15822 <add_to_waitq_locked+0x38>
   1581c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1581e:	2c00      	cmp	r4, #0
   15820:	d1f1      	bne.n	15806 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
   15822:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   15824:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   15826:	606b      	str	r3, [r5, #4]
	tail->next = node;
   15828:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1582a:	6075      	str	r5, [r6, #4]
}
   1582c:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
   1582e:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   15830:	606b      	str	r3, [r5, #4]
	node->next = successor;
   15832:	602c      	str	r4, [r5, #0]
	prev->next = node;
   15834:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   15836:	6065      	str	r5, [r4, #4]
}
   15838:	e7f8      	b.n	1582c <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1583a:	2400      	movs	r4, #0
   1583c:	e7e3      	b.n	15806 <add_to_waitq_locked+0x1c>

0001583e <pend>:
{
   1583e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15842:	4605      	mov	r5, r0
   15844:	460f      	mov	r7, r1
   15846:	4691      	mov	r9, r2
   15848:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
   1584a:	2400      	movs	r4, #0
	__asm__ volatile(
   1584c:	f04f 0320 	mov.w	r3, #32
   15850:	f3ef 8611 	mrs	r6, BASEPRI
   15854:	f383 8812 	msr	BASEPRI_MAX, r3
   15858:	f3bf 8f6f 	isb	sy
   1585c:	b94c      	cbnz	r4, 15872 <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
   1585e:	4639      	mov	r1, r7
   15860:	4628      	mov	r0, r5
   15862:	f7ff ffc2 	bl	157ea <add_to_waitq_locked>
	__asm__ volatile(
   15866:	f386 8811 	msr	BASEPRI, r6
   1586a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1586e:	2401      	movs	r4, #1
   15870:	e7f4      	b.n	1585c <pend+0x1e>
	add_thread_timeout(thread, timeout);
   15872:	464a      	mov	r2, r9
   15874:	4643      	mov	r3, r8
   15876:	4628      	mov	r0, r5
   15878:	f7fa f99a 	bl	fbb0 <add_thread_timeout>
}
   1587c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00015880 <z_unpend1_no_timeout>:
{
   15880:	b570      	push	{r4, r5, r6, lr}
   15882:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   15884:	2300      	movs	r3, #0
	__asm__ volatile(
   15886:	f04f 0220 	mov.w	r2, #32
   1588a:	f3ef 8511 	mrs	r5, BASEPRI
   1588e:	f382 8812 	msr	BASEPRI_MAX, r2
   15892:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   15896:	461c      	mov	r4, r3
   15898:	e00f      	b.n	158ba <z_unpend1_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1589a:	f7ff fee4 	bl	15666 <pended_on_thread>
   1589e:	4621      	mov	r1, r4
   158a0:	f7ff ff21 	bl	156e6 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   158a4:	7b63      	ldrb	r3, [r4, #13]
   158a6:	f023 0302 	bic.w	r3, r3, #2
   158aa:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   158ac:	2300      	movs	r3, #0
   158ae:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   158b0:	f385 8811 	msr	BASEPRI, r5
   158b4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   158b8:	2301      	movs	r3, #1
   158ba:	b933      	cbnz	r3, 158ca <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
   158bc:	4630      	mov	r0, r6
   158be:	f7ff ff3d 	bl	1573c <z_priq_dumb_best>
		if (thread != NULL) {
   158c2:	4604      	mov	r4, r0
   158c4:	2800      	cmp	r0, #0
   158c6:	d1e8      	bne.n	1589a <z_unpend1_no_timeout+0x1a>
   158c8:	e7f2      	b.n	158b0 <z_unpend1_no_timeout+0x30>
}
   158ca:	4620      	mov	r0, r4
   158cc:	bd70      	pop	{r4, r5, r6, pc}

000158ce <z_unpend_first_thread>:
{
   158ce:	b570      	push	{r4, r5, r6, lr}
   158d0:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   158d2:	2300      	movs	r3, #0
	__asm__ volatile(
   158d4:	f04f 0220 	mov.w	r2, #32
   158d8:	f3ef 8511 	mrs	r5, BASEPRI
   158dc:	f382 8812 	msr	BASEPRI_MAX, r2
   158e0:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   158e4:	461c      	mov	r4, r3
   158e6:	e013      	b.n	15910 <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   158e8:	f7ff febd 	bl	15666 <pended_on_thread>
   158ec:	4621      	mov	r1, r4
   158ee:	f7ff fefa 	bl	156e6 <z_priq_dumb_remove>
   158f2:	7b63      	ldrb	r3, [r4, #13]
   158f4:	f023 0302 	bic.w	r3, r3, #2
   158f8:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   158fa:	2300      	movs	r3, #0
   158fc:	60a3      	str	r3, [r4, #8]
   158fe:	f104 0018 	add.w	r0, r4, #24
   15902:	f000 f86e 	bl	159e2 <z_abort_timeout>
	__asm__ volatile(
   15906:	f385 8811 	msr	BASEPRI, r5
   1590a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1590e:	2301      	movs	r3, #1
   15910:	b933      	cbnz	r3, 15920 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
   15912:	4630      	mov	r0, r6
   15914:	f7ff ff12 	bl	1573c <z_priq_dumb_best>
		if (thread != NULL) {
   15918:	4604      	mov	r4, r0
   1591a:	2800      	cmp	r0, #0
   1591c:	d1e4      	bne.n	158e8 <z_unpend_first_thread+0x1a>
   1591e:	e7f2      	b.n	15906 <z_unpend_first_thread+0x38>
}
   15920:	4620      	mov	r0, r4
   15922:	bd70      	pop	{r4, r5, r6, pc}

00015924 <z_unpend_all>:
{
   15924:	b538      	push	{r3, r4, r5, lr}
   15926:	4605      	mov	r5, r0
	int need_sched = 0;
   15928:	2000      	movs	r0, #0
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1592a:	e006      	b.n	1593a <z_unpend_all+0x16>
		z_unpend_thread(thread);
   1592c:	4620      	mov	r0, r4
   1592e:	f7ff fee2 	bl	156f6 <z_unpend_thread>
		z_ready_thread(thread);
   15932:	4620      	mov	r0, r4
   15934:	f7ff ff09 	bl	1574a <z_ready_thread>
		need_sched = 1;
   15938:	2001      	movs	r0, #1
	return list->head == list;
   1593a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1593c:	42a5      	cmp	r5, r4
   1593e:	d001      	beq.n	15944 <z_unpend_all+0x20>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   15940:	2c00      	cmp	r4, #0
   15942:	d1f3      	bne.n	1592c <z_unpend_all+0x8>
}
   15944:	bd38      	pop	{r3, r4, r5, pc}

00015946 <z_sched_wake>:
{
   15946:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1594a:	4606      	mov	r6, r0
   1594c:	4688      	mov	r8, r1
   1594e:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
   15950:	2300      	movs	r3, #0
	__asm__ volatile(
   15952:	f04f 0220 	mov.w	r2, #32
   15956:	f3ef 8511 	mrs	r5, BASEPRI
   1595a:	f382 8812 	msr	BASEPRI_MAX, r2
   1595e:	f3bf 8f6f 	isb	sy
	bool ret = false;
   15962:	4699      	mov	r9, r3
   15964:	e01b      	b.n	1599e <z_sched_wake+0x58>
   15966:	f8c0 80ac 	str.w	r8, [r0, #172]	; 0xac
	thread->base.swap_data = data;
   1596a:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1596c:	f7ff fe7b 	bl	15666 <pended_on_thread>
   15970:	4621      	mov	r1, r4
   15972:	f7ff feb8 	bl	156e6 <z_priq_dumb_remove>
   15976:	7b63      	ldrb	r3, [r4, #13]
   15978:	f023 0302 	bic.w	r3, r3, #2
   1597c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1597e:	2300      	movs	r3, #0
   15980:	60a3      	str	r3, [r4, #8]
   15982:	f104 0018 	add.w	r0, r4, #24
   15986:	f000 f82c 	bl	159e2 <z_abort_timeout>
			ready_thread(thread);
   1598a:	4620      	mov	r0, r4
   1598c:	f7fa fa5c 	bl	fe48 <ready_thread>
			ret = true;
   15990:	f04f 0901 	mov.w	r9, #1
	__asm__ volatile(
   15994:	f385 8811 	msr	BASEPRI, r5
   15998:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1599c:	2301      	movs	r3, #1
   1599e:	b933      	cbnz	r3, 159ae <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
   159a0:	4630      	mov	r0, r6
   159a2:	f7ff fecb 	bl	1573c <z_priq_dumb_best>
		if (thread != NULL) {
   159a6:	4604      	mov	r4, r0
   159a8:	2800      	cmp	r0, #0
   159aa:	d1dc      	bne.n	15966 <z_sched_wake+0x20>
   159ac:	e7f2      	b.n	15994 <z_sched_wake+0x4e>
}
   159ae:	4648      	mov	r0, r9
   159b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000159b4 <remove_timeout>:
{
   159b4:	b538      	push	{r3, r4, r5, lr}
   159b6:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   159b8:	f7fa fd60 	bl	1047c <next>
   159bc:	b148      	cbz	r0, 159d2 <remove_timeout+0x1e>
   159be:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   159c0:	6920      	ldr	r0, [r4, #16]
   159c2:	6965      	ldr	r5, [r4, #20]
   159c4:	6913      	ldr	r3, [r2, #16]
   159c6:	6951      	ldr	r1, [r2, #20]
   159c8:	181b      	adds	r3, r3, r0
   159ca:	eb45 0101 	adc.w	r1, r5, r1
   159ce:	6113      	str	r3, [r2, #16]
   159d0:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   159d2:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   159d4:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   159d6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   159d8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   159da:	2300      	movs	r3, #0
   159dc:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   159de:	6063      	str	r3, [r4, #4]
}
   159e0:	bd38      	pop	{r3, r4, r5, pc}

000159e2 <z_abort_timeout>:
{
   159e2:	b570      	push	{r4, r5, r6, lr}
   159e4:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   159e6:	2300      	movs	r3, #0
	__asm__ volatile(
   159e8:	f04f 0220 	mov.w	r2, #32
   159ec:	f3ef 8611 	mrs	r6, BASEPRI
   159f0:	f382 8812 	msr	BASEPRI_MAX, r2
   159f4:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   159f8:	f06f 0015 	mvn.w	r0, #21
   159fc:	e008      	b.n	15a10 <z_abort_timeout+0x2e>
			remove_timeout(to);
   159fe:	4620      	mov	r0, r4
   15a00:	f7ff ffd8 	bl	159b4 <remove_timeout>
			ret = 0;
   15a04:	4628      	mov	r0, r5
	__asm__ volatile(
   15a06:	f386 8811 	msr	BASEPRI, r6
   15a0a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   15a0e:	2301      	movs	r3, #1
   15a10:	461d      	mov	r5, r3
   15a12:	b91b      	cbnz	r3, 15a1c <z_abort_timeout+0x3a>
	return node->next != NULL;
   15a14:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   15a16:	2b00      	cmp	r3, #0
   15a18:	d1f1      	bne.n	159fe <z_abort_timeout+0x1c>
   15a1a:	e7f4      	b.n	15a06 <z_abort_timeout+0x24>
}
   15a1c:	bd70      	pop	{r4, r5, r6, pc}

00015a1e <z_get_next_timeout_expiry>:
{
   15a1e:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   15a20:	2300      	movs	r3, #0
	__asm__ volatile(
   15a22:	f04f 0220 	mov.w	r2, #32
   15a26:	f3ef 8411 	mrs	r4, BASEPRI
   15a2a:	f382 8812 	msr	BASEPRI_MAX, r2
   15a2e:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   15a32:	f04f 30ff 	mov.w	r0, #4294967295
	LOCKED(&timeout_lock) {
   15a36:	b93b      	cbnz	r3, 15a48 <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
   15a38:	f7fa fd38 	bl	104ac <next_timeout>
	__asm__ volatile(
   15a3c:	f384 8811 	msr	BASEPRI, r4
   15a40:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   15a44:	2301      	movs	r3, #1
   15a46:	e7f6      	b.n	15a36 <z_get_next_timeout_expiry+0x18>
}
   15a48:	bd10      	pop	{r4, pc}

00015a4a <z_set_timeout_expiry>:
{
   15a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15a4c:	4606      	mov	r6, r0
   15a4e:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   15a50:	2300      	movs	r3, #0
	__asm__ volatile(
   15a52:	f04f 0220 	mov.w	r2, #32
   15a56:	f3ef 8511 	mrs	r5, BASEPRI
   15a5a:	f382 8812 	msr	BASEPRI_MAX, r2
   15a5e:	f3bf 8f6f 	isb	sy
   15a62:	e00a      	b.n	15a7a <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
   15a64:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   15a66:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   15a6a:	2801      	cmp	r0, #1
   15a6c:	dd00      	ble.n	15a70 <z_set_timeout_expiry+0x26>
   15a6e:	b97c      	cbnz	r4, 15a90 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   15a70:	f385 8811 	msr	BASEPRI, r5
   15a74:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   15a78:	2301      	movs	r3, #1
   15a7a:	461c      	mov	r4, r3
   15a7c:	b97b      	cbnz	r3, 15a9e <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
   15a7e:	f7fa fd15 	bl	104ac <next_timeout>
			      || (ticks <= next_to);
   15a82:	f1b0 3fff 	cmp.w	r0, #4294967295
   15a86:	d0ed      	beq.n	15a64 <z_set_timeout_expiry+0x1a>
   15a88:	42b0      	cmp	r0, r6
   15a8a:	dbec      	blt.n	15a66 <z_set_timeout_expiry+0x1c>
   15a8c:	2401      	movs	r4, #1
   15a8e:	e7ea      	b.n	15a66 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   15a90:	4639      	mov	r1, r7
   15a92:	42b0      	cmp	r0, r6
   15a94:	bfa8      	it	ge
   15a96:	4630      	movge	r0, r6
   15a98:	f7f3 ff40 	bl	991c <sys_clock_set_timeout>
   15a9c:	e7e8      	b.n	15a70 <z_set_timeout_expiry+0x26>
}
   15a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00015aa0 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   15aa0:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   15aa2:	f7fa fe35 	bl	10710 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   15aa6:	bd08      	pop	{r3, pc}

00015aa8 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   15aa8:	b900      	cbnz	r0, 15aac <z_impl_k_busy_wait+0x4>
   15aaa:	4770      	bx	lr
{
   15aac:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   15aae:	f7f0 fa0d 	bl	5ecc <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   15ab2:	bd08      	pop	{r3, pc}

00015ab4 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   15ab4:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   15ab6:	f1b1 3fff 	cmp.w	r1, #4294967295
   15aba:	bf08      	it	eq
   15abc:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   15ac0:	d024      	beq.n	15b0c <sys_clock_timeout_end_calc+0x58>
   15ac2:	4604      	mov	r4, r0
   15ac4:	460d      	mov	r5, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   15ac6:	ea54 0105 	orrs.w	r1, r4, r5
   15aca:	d00d      	beq.n	15ae8 <sys_clock_timeout_end_calc+0x34>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   15acc:	f06f 0101 	mvn.w	r1, #1
   15ad0:	1a0a      	subs	r2, r1, r0
   15ad2:	f04f 31ff 	mov.w	r1, #4294967295
   15ad6:	eb61 0305 	sbc.w	r3, r1, r5
   15ada:	2a00      	cmp	r2, #0
   15adc:	f173 0100 	sbcs.w	r1, r3, #0
   15ae0:	db05      	blt.n	15aee <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   15ae2:	4610      	mov	r0, r2
   15ae4:	4619      	mov	r1, r3
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   15ae6:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   15ae8:	f7fa fe12 	bl	10710 <sys_clock_tick_get>
   15aec:	e7fb      	b.n	15ae6 <sys_clock_timeout_end_calc+0x32>
		return sys_clock_tick_get() + MAX(1, dt);
   15aee:	f7fa fe0f 	bl	10710 <sys_clock_tick_get>
   15af2:	4623      	mov	r3, r4
   15af4:	462a      	mov	r2, r5
   15af6:	2c01      	cmp	r4, #1
   15af8:	f175 0400 	sbcs.w	r4, r5, #0
   15afc:	db03      	blt.n	15b06 <sys_clock_timeout_end_calc+0x52>
   15afe:	18c0      	adds	r0, r0, r3
   15b00:	eb42 0101 	adc.w	r1, r2, r1
   15b04:	e7ef      	b.n	15ae6 <sys_clock_timeout_end_calc+0x32>
   15b06:	2301      	movs	r3, #1
   15b08:	2200      	movs	r2, #0
   15b0a:	e7f8      	b.n	15afe <sys_clock_timeout_end_calc+0x4a>
		return UINT64_MAX;
   15b0c:	f04f 30ff 	mov.w	r0, #4294967295
   15b10:	4601      	mov	r1, r0
   15b12:	e7e8      	b.n	15ae6 <sys_clock_timeout_end_calc+0x32>

00015b14 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
   15b14:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   15b16:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
   15b18:	2300      	movs	r3, #0
   15b1a:	6303      	str	r3, [r0, #48]	; 0x30
   15b1c:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   15b20:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   15b22:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
   15b24:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   15b26:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
   15b28:	6343      	str	r3, [r0, #52]	; 0x34
}
   15b2a:	4770      	bx	lr

00015b2c <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   15b2c:	b510      	push	{r4, lr}
   15b2e:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   15b30:	f7ff ff57 	bl	159e2 <z_abort_timeout>

	if (inactive) {
   15b34:	b9a0      	cbnz	r0, 15b60 <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
   15b36:	6a63      	ldr	r3, [r4, #36]	; 0x24
   15b38:	b10b      	cbz	r3, 15b3e <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   15b3a:	4620      	mov	r0, r4
   15b3c:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   15b3e:	f104 0018 	add.w	r0, r4, #24
   15b42:	f7ff fe9d 	bl	15880 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   15b46:	b158      	cbz	r0, 15b60 <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
   15b48:	f7ff fdff 	bl	1574a <z_ready_thread>
	__asm__ volatile(
   15b4c:	f04f 0320 	mov.w	r3, #32
   15b50:	f3ef 8011 	mrs	r0, BASEPRI
   15b54:	f383 8812 	msr	BASEPRI_MAX, r3
   15b58:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   15b5c:	f7ff fdae 	bl	156bc <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
   15b60:	bd10      	pop	{r4, pc}

00015b62 <z_heap_aligned_alloc>:
{
   15b62:	b5d0      	push	{r4, r6, r7, lr}
   15b64:	b082      	sub	sp, #8
   15b66:	4604      	mov	r4, r0
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   15b68:	2000      	movs	r0, #0
   15b6a:	2304      	movs	r3, #4
   15b6c:	18d2      	adds	r2, r2, r3
   15b6e:	d20e      	bcs.n	15b8e <z_heap_aligned_alloc+0x2c>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   15b70:	b978      	cbnz	r0, 15b92 <z_heap_aligned_alloc+0x30>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   15b72:	2600      	movs	r6, #0
   15b74:	2700      	movs	r7, #0
   15b76:	e9cd 6700 	strd	r6, r7, [sp]
   15b7a:	f041 0104 	orr.w	r1, r1, #4
   15b7e:	4620      	mov	r0, r4
   15b80:	f7ff fb73 	bl	1526a <k_heap_aligned_alloc>
	if (mem == NULL) {
   15b84:	b108      	cbz	r0, 15b8a <z_heap_aligned_alloc+0x28>
	*heap_ref = heap;
   15b86:	f840 4b04 	str.w	r4, [r0], #4
}
   15b8a:	b002      	add	sp, #8
   15b8c:	bdd0      	pop	{r4, r6, r7, pc}
   15b8e:	2001      	movs	r0, #1
   15b90:	e7ee      	b.n	15b70 <z_heap_aligned_alloc+0xe>
		return NULL;
   15b92:	2000      	movs	r0, #0
   15b94:	e7f9      	b.n	15b8a <z_heap_aligned_alloc+0x28>

00015b96 <k_free>:
	if (ptr != NULL) {
   15b96:	b130      	cbz	r0, 15ba6 <k_free+0x10>
{
   15b98:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   15b9a:	1f01      	subs	r1, r0, #4
   15b9c:	f850 0c04 	ldr.w	r0, [r0, #-4]
   15ba0:	f7ff fbb9 	bl	15316 <k_heap_free>
}
   15ba4:	bd08      	pop	{r3, pc}
   15ba6:	4770      	bx	lr

00015ba8 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   15ba8:	4770      	bx	lr
	...

00015bac <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   15bac:	f7f3 bf8e 	b.w	9acc <SystemInit>
