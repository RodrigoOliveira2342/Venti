
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:

void i2c_dump_msgs(const char *name, const struct i2c_msg *msgs,
		   uint8_t num_msgs, uint16_t addr)
{
	LOG_DBG("I2C msg: %s, addr=%x", name, addr);
	for (unsigned int i = 0; i < num_msgs; i++) {
   0:	20004500 	.word	0x20004500
   4:	00006255 	.word	0x00006255
   8:	0001302b 	.word	0x0001302b
   c:	0000620d 	.word	0x0000620d
  10:	0000620d 	.word	0x0000620d
  14:	0000620d 	.word	0x0000620d
  18:	0000620d 	.word	0x0000620d
	...
  2c:	00005951 	.word	0x00005951
  30:	0000620d 	.word	0x0000620d
  34:	00000000 	.word	0x00000000
  38:	000058f9 	.word	0x000058f9
  3c:	0001419b 	.word	0x0001419b

00000040 <_irq_vector_table>:
  40:	00005a3d 00005a3d 00005a3d 00005a3d     =Z..=Z..=Z..=Z..
  50:	00005a3d 00005a3d 00005a3d 00005a3d     =Z..=Z..=Z..=Z..
  60:	00005a3d 00005a3d 00005a3d 00005a3d     =Z..=Z..=Z..=Z..
  70:	00005a3d 00005a3d 00005a3d 00005a3d     =Z..=Z..=Z..=Z..
  80:	00005a3d 00005a3d 00005a3d 00005a3d     =Z..=Z..=Z..=Z..
  90:	00005a3d 00005a3d 00005a3d 00005a3d     =Z..=Z..=Z..=Z..
  a0:	00005a3d 00005a3d 00005a3d 00005a3d     =Z..=Z..=Z..=Z..
  b0:	00005a3d 00005a3d 00005a3d 00005a3d     =Z..=Z..=Z..=Z..
  c0:	00005a3d 00005a3d 00005a3d 00005a3d     =Z..=Z..=Z..=Z..
  d0:	00005a3d 00005a3d 00005a3d 00005a3d     =Z..=Z..=Z..=Z..
  e0:	00005a3d 00005a3d 00005a3d 00005a3d     =Z..=Z..=Z..=Z..
  f0:	00005a3d 00005a3d 00005a3d 00005a3d     =Z..=Z..=Z..=Z..

Disassembly of section text:

00000100 <__aeabi_drsub>:
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     132:	f000 80e2 	beq.w	2fa <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0xfa>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_IDLE_STACK_SIZE+0x3c>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     188:	d002      	beq.n	190 <CONFIG_IDLE_STACK_SIZE+0x50>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     190:	ea94 0f05 	teq	r4, r5
     194:	f000 80a7 	beq.w	2e6 <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0xe6>
     198:	f1a4 0401 	sub.w	r4, r4, #1
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <CONFIG_IDLE_STACK_SIZE+0x9c>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
     1c2:	f10e 0e20 	add.w	lr, lr, #32
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0x30>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0x18>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <__data_size+0x22>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0x18>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0x7a>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0x76>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0x90>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0xde>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0xc6>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <__data_size+0x30>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1e>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <__data_size+0x12>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0x44>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0x44>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0x44>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <CONFIG_IDLE_STACK_SIZE+0xb2>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16c>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c8>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xf4>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc4>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x152>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x136>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x156>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x196>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1b2>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_ISR_STACK_SIZE+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__aeabi_ddiv+0x114>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__aeabi_ddiv+0x11e>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6e>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x12c>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c4>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x188>
     89a:	e712      	b.n	6c2 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1da>

0000089c <__gedf2>:
     89c:	f04f 3cff 	mov.w	ip, #4294967295
     8a0:	e006      	b.n	8b0 <__cmpdf2+0x4>
     8a2:	bf00      	nop

000008a4 <__ledf2>:
     8a4:	f04f 0c01 	mov.w	ip, #1
     8a8:	e002      	b.n	8b0 <__cmpdf2+0x4>
     8aa:	bf00      	nop

000008ac <__cmpdf2>:
     8ac:	f04f 0c01 	mov.w	ip, #1
     8b0:	f84d cd04 	str.w	ip, [sp, #-4]!
     8b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     8b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     8bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     8c0:	bf18      	it	ne
     8c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     8c6:	d01b      	beq.n	900 <__cmpdf2+0x54>
     8c8:	b001      	add	sp, #4
     8ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     8ce:	bf0c      	ite	eq
     8d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     8d4:	ea91 0f03 	teqne	r1, r3
     8d8:	bf02      	ittt	eq
     8da:	ea90 0f02 	teqeq	r0, r2
     8de:	2000      	moveq	r0, #0
     8e0:	4770      	bxeq	lr
     8e2:	f110 0f00 	cmn.w	r0, #0
     8e6:	ea91 0f03 	teq	r1, r3
     8ea:	bf58      	it	pl
     8ec:	4299      	cmppl	r1, r3
     8ee:	bf08      	it	eq
     8f0:	4290      	cmpeq	r0, r2
     8f2:	bf2c      	ite	cs
     8f4:	17d8      	asrcs	r0, r3, #31
     8f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     8fa:	f040 0001 	orr.w	r0, r0, #1
     8fe:	4770      	bx	lr
     900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     908:	d102      	bne.n	910 <__cmpdf2+0x64>
     90a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     90e:	d107      	bne.n	920 <__cmpdf2+0x74>
     910:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     918:	d1d6      	bne.n	8c8 <__cmpdf2+0x1c>
     91a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     91e:	d0d3      	beq.n	8c8 <__cmpdf2+0x1c>
     920:	f85d 0b04 	ldr.w	r0, [sp], #4
     924:	4770      	bx	lr
     926:	bf00      	nop

00000928 <__aeabi_cdrcmple>:
     928:	4684      	mov	ip, r0
     92a:	4610      	mov	r0, r2
     92c:	4662      	mov	r2, ip
     92e:	468c      	mov	ip, r1
     930:	4619      	mov	r1, r3
     932:	4663      	mov	r3, ip
     934:	e000      	b.n	938 <__aeabi_cdcmpeq>
     936:	bf00      	nop

00000938 <__aeabi_cdcmpeq>:
     938:	b501      	push	{r0, lr}
     93a:	f7ff ffb7 	bl	8ac <__cmpdf2>
     93e:	2800      	cmp	r0, #0
     940:	bf48      	it	mi
     942:	f110 0f00 	cmnmi.w	r0, #0
     946:	bd01      	pop	{r0, pc}

00000948 <__aeabi_dcmpeq>:
     948:	f84d ed08 	str.w	lr, [sp, #-8]!
     94c:	f7ff fff4 	bl	938 <__aeabi_cdcmpeq>
     950:	bf0c      	ite	eq
     952:	2001      	moveq	r0, #1
     954:	2000      	movne	r0, #0
     956:	f85d fb08 	ldr.w	pc, [sp], #8
     95a:	bf00      	nop

0000095c <__aeabi_dcmplt>:
     95c:	f84d ed08 	str.w	lr, [sp, #-8]!
     960:	f7ff ffea 	bl	938 <__aeabi_cdcmpeq>
     964:	bf34      	ite	cc
     966:	2001      	movcc	r0, #1
     968:	2000      	movcs	r0, #0
     96a:	f85d fb08 	ldr.w	pc, [sp], #8
     96e:	bf00      	nop

00000970 <__aeabi_dcmple>:
     970:	f84d ed08 	str.w	lr, [sp, #-8]!
     974:	f7ff ffe0 	bl	938 <__aeabi_cdcmpeq>
     978:	bf94      	ite	ls
     97a:	2001      	movls	r0, #1
     97c:	2000      	movhi	r0, #0
     97e:	f85d fb08 	ldr.w	pc, [sp], #8
     982:	bf00      	nop

00000984 <__aeabi_dcmpge>:
     984:	f84d ed08 	str.w	lr, [sp, #-8]!
     988:	f7ff ffce 	bl	928 <__aeabi_cdrcmple>
     98c:	bf94      	ite	ls
     98e:	2001      	movls	r0, #1
     990:	2000      	movhi	r0, #0
     992:	f85d fb08 	ldr.w	pc, [sp], #8
     996:	bf00      	nop

00000998 <__aeabi_dcmpgt>:
     998:	f84d ed08 	str.w	lr, [sp, #-8]!
     99c:	f7ff ffc4 	bl	928 <__aeabi_cdrcmple>
     9a0:	bf34      	ite	cc
     9a2:	2001      	movcc	r0, #1
     9a4:	2000      	movcs	r0, #0
     9a6:	f85d fb08 	ldr.w	pc, [sp], #8
     9aa:	bf00      	nop

000009ac <__aeabi_d2f>:
     9ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
     9b0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     9b4:	bf24      	itt	cs
     9b6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     9ba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     9be:	d90d      	bls.n	9dc <__aeabi_d2f+0x30>
     9c0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     9c4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     9c8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     9cc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     9d0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     9d4:	bf08      	it	eq
     9d6:	f020 0001 	biceq.w	r0, r0, #1
     9da:	4770      	bx	lr
     9dc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     9e0:	d121      	bne.n	a26 <__aeabi_d2f+0x7a>
     9e2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     9e6:	bfbc      	itt	lt
     9e8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     9ec:	4770      	bxlt	lr
     9ee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     9f2:	ea4f 5252 	mov.w	r2, r2, lsr #21
     9f6:	f1c2 0218 	rsb	r2, r2, #24
     9fa:	f1c2 0c20 	rsb	ip, r2, #32
     9fe:	fa10 f30c 	lsls.w	r3, r0, ip
     a02:	fa20 f002 	lsr.w	r0, r0, r2
     a06:	bf18      	it	ne
     a08:	f040 0001 	orrne.w	r0, r0, #1
     a0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     a14:	fa03 fc0c 	lsl.w	ip, r3, ip
     a18:	ea40 000c 	orr.w	r0, r0, ip
     a1c:	fa23 f302 	lsr.w	r3, r3, r2
     a20:	ea4f 0343 	mov.w	r3, r3, lsl #1
     a24:	e7cc      	b.n	9c0 <__aeabi_d2f+0x14>
     a26:	ea7f 5362 	mvns.w	r3, r2, asr #21
     a2a:	d107      	bne.n	a3c <__aeabi_d2f+0x90>
     a2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     a30:	bf1e      	ittt	ne
     a32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     a36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     a3a:	4770      	bxne	lr
     a3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     a40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     a44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     a48:	4770      	bx	lr
     a4a:	bf00      	nop

00000a4c <__aeabi_frsub>:
     a4c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     a50:	e002      	b.n	a58 <__addsf3>
     a52:	bf00      	nop

00000a54 <__aeabi_fsub>:
     a54:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000a58 <__addsf3>:
     a58:	0042      	lsls	r2, r0, #1
     a5a:	bf1f      	itttt	ne
     a5c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     a60:	ea92 0f03 	teqne	r2, r3
     a64:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     a68:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     a6c:	d06a      	beq.n	b44 <__addsf3+0xec>
     a6e:	ea4f 6212 	mov.w	r2, r2, lsr #24
     a72:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     a76:	bfc1      	itttt	gt
     a78:	18d2      	addgt	r2, r2, r3
     a7a:	4041      	eorgt	r1, r0
     a7c:	4048      	eorgt	r0, r1
     a7e:	4041      	eorgt	r1, r0
     a80:	bfb8      	it	lt
     a82:	425b      	neglt	r3, r3
     a84:	2b19      	cmp	r3, #25
     a86:	bf88      	it	hi
     a88:	4770      	bxhi	lr
     a8a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     a8e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     a92:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     a96:	bf18      	it	ne
     a98:	4240      	negne	r0, r0
     a9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     a9e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     aa2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     aa6:	bf18      	it	ne
     aa8:	4249      	negne	r1, r1
     aaa:	ea92 0f03 	teq	r2, r3
     aae:	d03f      	beq.n	b30 <__addsf3+0xd8>
     ab0:	f1a2 0201 	sub.w	r2, r2, #1
     ab4:	fa41 fc03 	asr.w	ip, r1, r3
     ab8:	eb10 000c 	adds.w	r0, r0, ip
     abc:	f1c3 0320 	rsb	r3, r3, #32
     ac0:	fa01 f103 	lsl.w	r1, r1, r3
     ac4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     ac8:	d502      	bpl.n	ad0 <__addsf3+0x78>
     aca:	4249      	negs	r1, r1
     acc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     ad0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     ad4:	d313      	bcc.n	afe <__addsf3+0xa6>
     ad6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     ada:	d306      	bcc.n	aea <__addsf3+0x92>
     adc:	0840      	lsrs	r0, r0, #1
     ade:	ea4f 0131 	mov.w	r1, r1, rrx
     ae2:	f102 0201 	add.w	r2, r2, #1
     ae6:	2afe      	cmp	r2, #254	; 0xfe
     ae8:	d251      	bcs.n	b8e <__addsf3+0x136>
     aea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     aee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     af2:	bf08      	it	eq
     af4:	f020 0001 	biceq.w	r0, r0, #1
     af8:	ea40 0003 	orr.w	r0, r0, r3
     afc:	4770      	bx	lr
     afe:	0049      	lsls	r1, r1, #1
     b00:	eb40 0000 	adc.w	r0, r0, r0
     b04:	3a01      	subs	r2, #1
     b06:	bf28      	it	cs
     b08:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     b0c:	d2ed      	bcs.n	aea <__addsf3+0x92>
     b0e:	fab0 fc80 	clz	ip, r0
     b12:	f1ac 0c08 	sub.w	ip, ip, #8
     b16:	ebb2 020c 	subs.w	r2, r2, ip
     b1a:	fa00 f00c 	lsl.w	r0, r0, ip
     b1e:	bfaa      	itet	ge
     b20:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     b24:	4252      	neglt	r2, r2
     b26:	4318      	orrge	r0, r3
     b28:	bfbc      	itt	lt
     b2a:	40d0      	lsrlt	r0, r2
     b2c:	4318      	orrlt	r0, r3
     b2e:	4770      	bx	lr
     b30:	f092 0f00 	teq	r2, #0
     b34:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     b38:	bf06      	itte	eq
     b3a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     b3e:	3201      	addeq	r2, #1
     b40:	3b01      	subne	r3, #1
     b42:	e7b5      	b.n	ab0 <__addsf3+0x58>
     b44:	ea4f 0341 	mov.w	r3, r1, lsl #1
     b48:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     b4c:	bf18      	it	ne
     b4e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     b52:	d021      	beq.n	b98 <__addsf3+0x140>
     b54:	ea92 0f03 	teq	r2, r3
     b58:	d004      	beq.n	b64 <__addsf3+0x10c>
     b5a:	f092 0f00 	teq	r2, #0
     b5e:	bf08      	it	eq
     b60:	4608      	moveq	r0, r1
     b62:	4770      	bx	lr
     b64:	ea90 0f01 	teq	r0, r1
     b68:	bf1c      	itt	ne
     b6a:	2000      	movne	r0, #0
     b6c:	4770      	bxne	lr
     b6e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     b72:	d104      	bne.n	b7e <__addsf3+0x126>
     b74:	0040      	lsls	r0, r0, #1
     b76:	bf28      	it	cs
     b78:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     b7c:	4770      	bx	lr
     b7e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     b82:	bf3c      	itt	cc
     b84:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     b88:	4770      	bxcc	lr
     b8a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     b8e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     b96:	4770      	bx	lr
     b98:	ea7f 6222 	mvns.w	r2, r2, asr #24
     b9c:	bf16      	itet	ne
     b9e:	4608      	movne	r0, r1
     ba0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     ba4:	4601      	movne	r1, r0
     ba6:	0242      	lsls	r2, r0, #9
     ba8:	bf06      	itte	eq
     baa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     bae:	ea90 0f01 	teqeq	r0, r1
     bb2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     bb6:	4770      	bx	lr

00000bb8 <__aeabi_ui2f>:
     bb8:	f04f 0300 	mov.w	r3, #0
     bbc:	e004      	b.n	bc8 <__aeabi_i2f+0x8>
     bbe:	bf00      	nop

00000bc0 <__aeabi_i2f>:
     bc0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     bc4:	bf48      	it	mi
     bc6:	4240      	negmi	r0, r0
     bc8:	ea5f 0c00 	movs.w	ip, r0
     bcc:	bf08      	it	eq
     bce:	4770      	bxeq	lr
     bd0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     bd4:	4601      	mov	r1, r0
     bd6:	f04f 0000 	mov.w	r0, #0
     bda:	e01c      	b.n	c16 <__aeabi_l2f+0x2a>

00000bdc <__aeabi_ul2f>:
     bdc:	ea50 0201 	orrs.w	r2, r0, r1
     be0:	bf08      	it	eq
     be2:	4770      	bxeq	lr
     be4:	f04f 0300 	mov.w	r3, #0
     be8:	e00a      	b.n	c00 <__aeabi_l2f+0x14>
     bea:	bf00      	nop

00000bec <__aeabi_l2f>:
     bec:	ea50 0201 	orrs.w	r2, r0, r1
     bf0:	bf08      	it	eq
     bf2:	4770      	bxeq	lr
     bf4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     bf8:	d502      	bpl.n	c00 <__aeabi_l2f+0x14>
     bfa:	4240      	negs	r0, r0
     bfc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     c00:	ea5f 0c01 	movs.w	ip, r1
     c04:	bf02      	ittt	eq
     c06:	4684      	moveq	ip, r0
     c08:	4601      	moveq	r1, r0
     c0a:	2000      	moveq	r0, #0
     c0c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     c10:	bf08      	it	eq
     c12:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     c16:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     c1a:	fabc f28c 	clz	r2, ip
     c1e:	3a08      	subs	r2, #8
     c20:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     c24:	db10      	blt.n	c48 <__aeabi_l2f+0x5c>
     c26:	fa01 fc02 	lsl.w	ip, r1, r2
     c2a:	4463      	add	r3, ip
     c2c:	fa00 fc02 	lsl.w	ip, r0, r2
     c30:	f1c2 0220 	rsb	r2, r2, #32
     c34:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     c38:	fa20 f202 	lsr.w	r2, r0, r2
     c3c:	eb43 0002 	adc.w	r0, r3, r2
     c40:	bf08      	it	eq
     c42:	f020 0001 	biceq.w	r0, r0, #1
     c46:	4770      	bx	lr
     c48:	f102 0220 	add.w	r2, r2, #32
     c4c:	fa01 fc02 	lsl.w	ip, r1, r2
     c50:	f1c2 0220 	rsb	r2, r2, #32
     c54:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     c58:	fa21 f202 	lsr.w	r2, r1, r2
     c5c:	eb43 0002 	adc.w	r0, r3, r2
     c60:	bf08      	it	eq
     c62:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     c66:	4770      	bx	lr

00000c68 <__aeabi_fmul>:
     c68:	f04f 0cff 	mov.w	ip, #255	; 0xff
     c6c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     c70:	bf1e      	ittt	ne
     c72:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     c76:	ea92 0f0c 	teqne	r2, ip
     c7a:	ea93 0f0c 	teqne	r3, ip
     c7e:	d06f      	beq.n	d60 <__aeabi_fmul+0xf8>
     c80:	441a      	add	r2, r3
     c82:	ea80 0c01 	eor.w	ip, r0, r1
     c86:	0240      	lsls	r0, r0, #9
     c88:	bf18      	it	ne
     c8a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     c8e:	d01e      	beq.n	cce <__aeabi_fmul+0x66>
     c90:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     c94:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     c98:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     c9c:	fba0 3101 	umull	r3, r1, r0, r1
     ca0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     ca4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     ca8:	bf3e      	ittt	cc
     caa:	0049      	lslcc	r1, r1, #1
     cac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     cb0:	005b      	lslcc	r3, r3, #1
     cb2:	ea40 0001 	orr.w	r0, r0, r1
     cb6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     cba:	2afd      	cmp	r2, #253	; 0xfd
     cbc:	d81d      	bhi.n	cfa <__aeabi_fmul+0x92>
     cbe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     cc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     cc6:	bf08      	it	eq
     cc8:	f020 0001 	biceq.w	r0, r0, #1
     ccc:	4770      	bx	lr
     cce:	f090 0f00 	teq	r0, #0
     cd2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     cd6:	bf08      	it	eq
     cd8:	0249      	lsleq	r1, r1, #9
     cda:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     cde:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     ce2:	3a7f      	subs	r2, #127	; 0x7f
     ce4:	bfc2      	ittt	gt
     ce6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     cea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     cee:	4770      	bxgt	lr
     cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     cf4:	f04f 0300 	mov.w	r3, #0
     cf8:	3a01      	subs	r2, #1
     cfa:	dc5d      	bgt.n	db8 <__aeabi_fmul+0x150>
     cfc:	f112 0f19 	cmn.w	r2, #25
     d00:	bfdc      	itt	le
     d02:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     d06:	4770      	bxle	lr
     d08:	f1c2 0200 	rsb	r2, r2, #0
     d0c:	0041      	lsls	r1, r0, #1
     d0e:	fa21 f102 	lsr.w	r1, r1, r2
     d12:	f1c2 0220 	rsb	r2, r2, #32
     d16:	fa00 fc02 	lsl.w	ip, r0, r2
     d1a:	ea5f 0031 	movs.w	r0, r1, rrx
     d1e:	f140 0000 	adc.w	r0, r0, #0
     d22:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     d26:	bf08      	it	eq
     d28:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     d2c:	4770      	bx	lr
     d2e:	f092 0f00 	teq	r2, #0
     d32:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     d36:	bf02      	ittt	eq
     d38:	0040      	lsleq	r0, r0, #1
     d3a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     d3e:	3a01      	subeq	r2, #1
     d40:	d0f9      	beq.n	d36 <__aeabi_fmul+0xce>
     d42:	ea40 000c 	orr.w	r0, r0, ip
     d46:	f093 0f00 	teq	r3, #0
     d4a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     d4e:	bf02      	ittt	eq
     d50:	0049      	lsleq	r1, r1, #1
     d52:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     d56:	3b01      	subeq	r3, #1
     d58:	d0f9      	beq.n	d4e <__aeabi_fmul+0xe6>
     d5a:	ea41 010c 	orr.w	r1, r1, ip
     d5e:	e78f      	b.n	c80 <__aeabi_fmul+0x18>
     d60:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     d64:	ea92 0f0c 	teq	r2, ip
     d68:	bf18      	it	ne
     d6a:	ea93 0f0c 	teqne	r3, ip
     d6e:	d00a      	beq.n	d86 <__aeabi_fmul+0x11e>
     d70:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     d74:	bf18      	it	ne
     d76:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     d7a:	d1d8      	bne.n	d2e <__aeabi_fmul+0xc6>
     d7c:	ea80 0001 	eor.w	r0, r0, r1
     d80:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     d84:	4770      	bx	lr
     d86:	f090 0f00 	teq	r0, #0
     d8a:	bf17      	itett	ne
     d8c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     d90:	4608      	moveq	r0, r1
     d92:	f091 0f00 	teqne	r1, #0
     d96:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     d9a:	d014      	beq.n	dc6 <__aeabi_fmul+0x15e>
     d9c:	ea92 0f0c 	teq	r2, ip
     da0:	d101      	bne.n	da6 <__aeabi_fmul+0x13e>
     da2:	0242      	lsls	r2, r0, #9
     da4:	d10f      	bne.n	dc6 <__aeabi_fmul+0x15e>
     da6:	ea93 0f0c 	teq	r3, ip
     daa:	d103      	bne.n	db4 <__aeabi_fmul+0x14c>
     dac:	024b      	lsls	r3, r1, #9
     dae:	bf18      	it	ne
     db0:	4608      	movne	r0, r1
     db2:	d108      	bne.n	dc6 <__aeabi_fmul+0x15e>
     db4:	ea80 0001 	eor.w	r0, r0, r1
     db8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     dbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     dc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     dc4:	4770      	bx	lr
     dc6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     dca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     dce:	4770      	bx	lr

00000dd0 <__aeabi_fdiv>:
     dd0:	f04f 0cff 	mov.w	ip, #255	; 0xff
     dd4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     dd8:	bf1e      	ittt	ne
     dda:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     dde:	ea92 0f0c 	teqne	r2, ip
     de2:	ea93 0f0c 	teqne	r3, ip
     de6:	d069      	beq.n	ebc <__aeabi_fdiv+0xec>
     de8:	eba2 0203 	sub.w	r2, r2, r3
     dec:	ea80 0c01 	eor.w	ip, r0, r1
     df0:	0249      	lsls	r1, r1, #9
     df2:	ea4f 2040 	mov.w	r0, r0, lsl #9
     df6:	d037      	beq.n	e68 <__aeabi_fdiv+0x98>
     df8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     dfc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     e00:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     e04:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     e08:	428b      	cmp	r3, r1
     e0a:	bf38      	it	cc
     e0c:	005b      	lslcc	r3, r3, #1
     e0e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     e12:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     e16:	428b      	cmp	r3, r1
     e18:	bf24      	itt	cs
     e1a:	1a5b      	subcs	r3, r3, r1
     e1c:	ea40 000c 	orrcs.w	r0, r0, ip
     e20:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     e24:	bf24      	itt	cs
     e26:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     e2a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     e2e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     e32:	bf24      	itt	cs
     e34:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     e38:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     e3c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     e40:	bf24      	itt	cs
     e42:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     e46:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     e4a:	011b      	lsls	r3, r3, #4
     e4c:	bf18      	it	ne
     e4e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     e52:	d1e0      	bne.n	e16 <__aeabi_fdiv+0x46>
     e54:	2afd      	cmp	r2, #253	; 0xfd
     e56:	f63f af50 	bhi.w	cfa <__aeabi_fmul+0x92>
     e5a:	428b      	cmp	r3, r1
     e5c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     e60:	bf08      	it	eq
     e62:	f020 0001 	biceq.w	r0, r0, #1
     e66:	4770      	bx	lr
     e68:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     e6c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     e70:	327f      	adds	r2, #127	; 0x7f
     e72:	bfc2      	ittt	gt
     e74:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     e78:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     e7c:	4770      	bxgt	lr
     e7e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     e82:	f04f 0300 	mov.w	r3, #0
     e86:	3a01      	subs	r2, #1
     e88:	e737      	b.n	cfa <__aeabi_fmul+0x92>
     e8a:	f092 0f00 	teq	r2, #0
     e8e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     e92:	bf02      	ittt	eq
     e94:	0040      	lsleq	r0, r0, #1
     e96:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     e9a:	3a01      	subeq	r2, #1
     e9c:	d0f9      	beq.n	e92 <__aeabi_fdiv+0xc2>
     e9e:	ea40 000c 	orr.w	r0, r0, ip
     ea2:	f093 0f00 	teq	r3, #0
     ea6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     eaa:	bf02      	ittt	eq
     eac:	0049      	lsleq	r1, r1, #1
     eae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     eb2:	3b01      	subeq	r3, #1
     eb4:	d0f9      	beq.n	eaa <__aeabi_fdiv+0xda>
     eb6:	ea41 010c 	orr.w	r1, r1, ip
     eba:	e795      	b.n	de8 <__aeabi_fdiv+0x18>
     ebc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     ec0:	ea92 0f0c 	teq	r2, ip
     ec4:	d108      	bne.n	ed8 <__aeabi_fdiv+0x108>
     ec6:	0242      	lsls	r2, r0, #9
     ec8:	f47f af7d 	bne.w	dc6 <__aeabi_fmul+0x15e>
     ecc:	ea93 0f0c 	teq	r3, ip
     ed0:	f47f af70 	bne.w	db4 <__aeabi_fmul+0x14c>
     ed4:	4608      	mov	r0, r1
     ed6:	e776      	b.n	dc6 <__aeabi_fmul+0x15e>
     ed8:	ea93 0f0c 	teq	r3, ip
     edc:	d104      	bne.n	ee8 <__aeabi_fdiv+0x118>
     ede:	024b      	lsls	r3, r1, #9
     ee0:	f43f af4c 	beq.w	d7c <__aeabi_fmul+0x114>
     ee4:	4608      	mov	r0, r1
     ee6:	e76e      	b.n	dc6 <__aeabi_fmul+0x15e>
     ee8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     eec:	bf18      	it	ne
     eee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     ef2:	d1ca      	bne.n	e8a <__aeabi_fdiv+0xba>
     ef4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     ef8:	f47f af5c 	bne.w	db4 <__aeabi_fmul+0x14c>
     efc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     f00:	f47f af3c 	bne.w	d7c <__aeabi_fmul+0x114>
     f04:	e75f      	b.n	dc6 <__aeabi_fmul+0x15e>
     f06:	bf00      	nop

00000f08 <__gesf2>:
     f08:	f04f 3cff 	mov.w	ip, #4294967295
     f0c:	e006      	b.n	f1c <__cmpsf2+0x4>
     f0e:	bf00      	nop

00000f10 <__lesf2>:
     f10:	f04f 0c01 	mov.w	ip, #1
     f14:	e002      	b.n	f1c <__cmpsf2+0x4>
     f16:	bf00      	nop

00000f18 <__cmpsf2>:
     f18:	f04f 0c01 	mov.w	ip, #1
     f1c:	f84d cd04 	str.w	ip, [sp, #-4]!
     f20:	ea4f 0240 	mov.w	r2, r0, lsl #1
     f24:	ea4f 0341 	mov.w	r3, r1, lsl #1
     f28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     f2c:	bf18      	it	ne
     f2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     f32:	d011      	beq.n	f58 <__cmpsf2+0x40>
     f34:	b001      	add	sp, #4
     f36:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
     f3a:	bf18      	it	ne
     f3c:	ea90 0f01 	teqne	r0, r1
     f40:	bf58      	it	pl
     f42:	ebb2 0003 	subspl.w	r0, r2, r3
     f46:	bf88      	it	hi
     f48:	17c8      	asrhi	r0, r1, #31
     f4a:	bf38      	it	cc
     f4c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
     f50:	bf18      	it	ne
     f52:	f040 0001 	orrne.w	r0, r0, #1
     f56:	4770      	bx	lr
     f58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     f5c:	d102      	bne.n	f64 <__cmpsf2+0x4c>
     f5e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
     f62:	d105      	bne.n	f70 <__cmpsf2+0x58>
     f64:	ea7f 6c23 	mvns.w	ip, r3, asr #24
     f68:	d1e4      	bne.n	f34 <__cmpsf2+0x1c>
     f6a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
     f6e:	d0e1      	beq.n	f34 <__cmpsf2+0x1c>
     f70:	f85d 0b04 	ldr.w	r0, [sp], #4
     f74:	4770      	bx	lr
     f76:	bf00      	nop

00000f78 <__aeabi_cfrcmple>:
     f78:	4684      	mov	ip, r0
     f7a:	4608      	mov	r0, r1
     f7c:	4661      	mov	r1, ip
     f7e:	e7ff      	b.n	f80 <__aeabi_cfcmpeq>

00000f80 <__aeabi_cfcmpeq>:
     f80:	b50f      	push	{r0, r1, r2, r3, lr}
     f82:	f7ff ffc9 	bl	f18 <__cmpsf2>
     f86:	2800      	cmp	r0, #0
     f88:	bf48      	it	mi
     f8a:	f110 0f00 	cmnmi.w	r0, #0
     f8e:	bd0f      	pop	{r0, r1, r2, r3, pc}

00000f90 <__aeabi_fcmpeq>:
     f90:	f84d ed08 	str.w	lr, [sp, #-8]!
     f94:	f7ff fff4 	bl	f80 <__aeabi_cfcmpeq>
     f98:	bf0c      	ite	eq
     f9a:	2001      	moveq	r0, #1
     f9c:	2000      	movne	r0, #0
     f9e:	f85d fb08 	ldr.w	pc, [sp], #8
     fa2:	bf00      	nop

00000fa4 <__aeabi_fcmplt>:
     fa4:	f84d ed08 	str.w	lr, [sp, #-8]!
     fa8:	f7ff ffea 	bl	f80 <__aeabi_cfcmpeq>
     fac:	bf34      	ite	cc
     fae:	2001      	movcc	r0, #1
     fb0:	2000      	movcs	r0, #0
     fb2:	f85d fb08 	ldr.w	pc, [sp], #8
     fb6:	bf00      	nop

00000fb8 <__aeabi_fcmple>:
     fb8:	f84d ed08 	str.w	lr, [sp, #-8]!
     fbc:	f7ff ffe0 	bl	f80 <__aeabi_cfcmpeq>
     fc0:	bf94      	ite	ls
     fc2:	2001      	movls	r0, #1
     fc4:	2000      	movhi	r0, #0
     fc6:	f85d fb08 	ldr.w	pc, [sp], #8
     fca:	bf00      	nop

00000fcc <__aeabi_fcmpge>:
     fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
     fd0:	f7ff ffd2 	bl	f78 <__aeabi_cfrcmple>
     fd4:	bf94      	ite	ls
     fd6:	2001      	movls	r0, #1
     fd8:	2000      	movhi	r0, #0
     fda:	f85d fb08 	ldr.w	pc, [sp], #8
     fde:	bf00      	nop

00000fe0 <__aeabi_fcmpgt>:
     fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
     fe4:	f7ff ffc8 	bl	f78 <__aeabi_cfrcmple>
     fe8:	bf34      	ite	cc
     fea:	2001      	movcc	r0, #1
     fec:	2000      	movcs	r0, #0
     fee:	f85d fb08 	ldr.w	pc, [sp], #8
     ff2:	bf00      	nop

00000ff4 <__aeabi_f2iz>:
     ff4:	ea4f 0240 	mov.w	r2, r0, lsl #1
     ff8:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     ffc:	d30f      	bcc.n	101e <CONFIG_FPROTECT_BLOCK_SIZE+0x1e>
     ffe:	f04f 039e 	mov.w	r3, #158	; 0x9e
    1002:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
    1006:	d90d      	bls.n	1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
    1008:	ea4f 2300 	mov.w	r3, r0, lsl #8
    100c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    1010:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    1014:	fa23 f002 	lsr.w	r0, r3, r2
    1018:	bf18      	it	ne
    101a:	4240      	negne	r0, r0
    101c:	4770      	bx	lr
    101e:	f04f 0000 	mov.w	r0, #0
    1022:	4770      	bx	lr
    1024:	f112 0f61 	cmn.w	r2, #97	; 0x61
    1028:	d101      	bne.n	102e <CONFIG_FPROTECT_BLOCK_SIZE+0x2e>
    102a:	0242      	lsls	r2, r0, #9
    102c:	d105      	bne.n	103a <CONFIG_FPROTECT_BLOCK_SIZE+0x3a>
    102e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
    1032:	bf08      	it	eq
    1034:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    1038:	4770      	bx	lr
    103a:	f04f 0000 	mov.w	r0, #0
    103e:	4770      	bx	lr

00001040 <__aeabi_uldivmod>:
    1040:	b953      	cbnz	r3, 1058 <__aeabi_uldivmod+0x18>
    1042:	b94a      	cbnz	r2, 1058 <__aeabi_uldivmod+0x18>
    1044:	2900      	cmp	r1, #0
    1046:	bf08      	it	eq
    1048:	2800      	cmpeq	r0, #0
    104a:	bf1c      	itt	ne
    104c:	f04f 31ff 	movne.w	r1, #4294967295
    1050:	f04f 30ff 	movne.w	r0, #4294967295
    1054:	f000 b980 	b.w	1358 <__aeabi_idiv0>
    1058:	f1ad 0c08 	sub.w	ip, sp, #8
    105c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1060:	f000 f81a 	bl	1098 <__udivmoddi4>
    1064:	f8dd e004 	ldr.w	lr, [sp, #4]
    1068:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    106c:	b004      	add	sp, #16
    106e:	4770      	bx	lr

00001070 <__popcountsi2>:
    1070:	0843      	lsrs	r3, r0, #1
    1072:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
    1076:	1ac0      	subs	r0, r0, r3
    1078:	0883      	lsrs	r3, r0, #2
    107a:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
    107e:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
    1082:	4418      	add	r0, r3
    1084:	eb00 1010 	add.w	r0, r0, r0, lsr #4
    1088:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
    108c:	eb00 2000 	add.w	r0, r0, r0, lsl #8
    1090:	eb00 4000 	add.w	r0, r0, r0, lsl #16
    1094:	0e00      	lsrs	r0, r0, #24
    1096:	4770      	bx	lr

00001098 <__udivmoddi4>:
    1098:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    109c:	9e08      	ldr	r6, [sp, #32]
    109e:	460d      	mov	r5, r1
    10a0:	4604      	mov	r4, r0
    10a2:	468e      	mov	lr, r1
    10a4:	2b00      	cmp	r3, #0
    10a6:	f040 8082 	bne.w	11ae <__udivmoddi4+0x116>
    10aa:	428a      	cmp	r2, r1
    10ac:	4617      	mov	r7, r2
    10ae:	d946      	bls.n	113e <__udivmoddi4+0xa6>
    10b0:	fab2 f282 	clz	r2, r2
    10b4:	b14a      	cbz	r2, 10ca <__udivmoddi4+0x32>
    10b6:	f1c2 0120 	rsb	r1, r2, #32
    10ba:	fa05 f302 	lsl.w	r3, r5, r2
    10be:	fa20 f101 	lsr.w	r1, r0, r1
    10c2:	4097      	lsls	r7, r2
    10c4:	ea41 0e03 	orr.w	lr, r1, r3
    10c8:	4094      	lsls	r4, r2
    10ca:	ea4f 4817 	mov.w	r8, r7, lsr #16
    10ce:	0c23      	lsrs	r3, r4, #16
    10d0:	fbbe fcf8 	udiv	ip, lr, r8
    10d4:	b2b9      	uxth	r1, r7
    10d6:	fb08 ee1c 	mls	lr, r8, ip, lr
    10da:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
    10de:	fb0c f001 	mul.w	r0, ip, r1
    10e2:	4298      	cmp	r0, r3
    10e4:	d90a      	bls.n	10fc <__udivmoddi4+0x64>
    10e6:	18fb      	adds	r3, r7, r3
    10e8:	f10c 35ff 	add.w	r5, ip, #4294967295
    10ec:	f080 8116 	bcs.w	131c <__udivmoddi4+0x284>
    10f0:	4298      	cmp	r0, r3
    10f2:	f240 8113 	bls.w	131c <__udivmoddi4+0x284>
    10f6:	f1ac 0c02 	sub.w	ip, ip, #2
    10fa:	443b      	add	r3, r7
    10fc:	1a1b      	subs	r3, r3, r0
    10fe:	b2a4      	uxth	r4, r4
    1100:	fbb3 f0f8 	udiv	r0, r3, r8
    1104:	fb08 3310 	mls	r3, r8, r0, r3
    1108:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    110c:	fb00 f101 	mul.w	r1, r0, r1
    1110:	42a1      	cmp	r1, r4
    1112:	d909      	bls.n	1128 <__udivmoddi4+0x90>
    1114:	193c      	adds	r4, r7, r4
    1116:	f100 33ff 	add.w	r3, r0, #4294967295
    111a:	f080 8101 	bcs.w	1320 <__udivmoddi4+0x288>
    111e:	42a1      	cmp	r1, r4
    1120:	f240 80fe 	bls.w	1320 <__udivmoddi4+0x288>
    1124:	3802      	subs	r0, #2
    1126:	443c      	add	r4, r7
    1128:	1a64      	subs	r4, r4, r1
    112a:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    112e:	2100      	movs	r1, #0
    1130:	b11e      	cbz	r6, 113a <__udivmoddi4+0xa2>
    1132:	40d4      	lsrs	r4, r2
    1134:	2300      	movs	r3, #0
    1136:	e9c6 4300 	strd	r4, r3, [r6]
    113a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    113e:	b902      	cbnz	r2, 1142 <__udivmoddi4+0xaa>
    1140:	deff      	udf	#255	; 0xff
    1142:	fab2 f282 	clz	r2, r2
    1146:	2a00      	cmp	r2, #0
    1148:	d14f      	bne.n	11ea <__udivmoddi4+0x152>
    114a:	1bcb      	subs	r3, r1, r7
    114c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1150:	fa1f f887 	uxth.w	r8, r7
    1154:	2101      	movs	r1, #1
    1156:	fbb3 fcfe 	udiv	ip, r3, lr
    115a:	0c25      	lsrs	r5, r4, #16
    115c:	fb0e 331c 	mls	r3, lr, ip, r3
    1160:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    1164:	fb08 f30c 	mul.w	r3, r8, ip
    1168:	42ab      	cmp	r3, r5
    116a:	d907      	bls.n	117c <__udivmoddi4+0xe4>
    116c:	197d      	adds	r5, r7, r5
    116e:	f10c 30ff 	add.w	r0, ip, #4294967295
    1172:	d202      	bcs.n	117a <__udivmoddi4+0xe2>
    1174:	42ab      	cmp	r3, r5
    1176:	f200 80e7 	bhi.w	1348 <__udivmoddi4+0x2b0>
    117a:	4684      	mov	ip, r0
    117c:	1aed      	subs	r5, r5, r3
    117e:	b2a3      	uxth	r3, r4
    1180:	fbb5 f0fe 	udiv	r0, r5, lr
    1184:	fb0e 5510 	mls	r5, lr, r0, r5
    1188:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    118c:	fb08 f800 	mul.w	r8, r8, r0
    1190:	45a0      	cmp	r8, r4
    1192:	d907      	bls.n	11a4 <__udivmoddi4+0x10c>
    1194:	193c      	adds	r4, r7, r4
    1196:	f100 33ff 	add.w	r3, r0, #4294967295
    119a:	d202      	bcs.n	11a2 <__udivmoddi4+0x10a>
    119c:	45a0      	cmp	r8, r4
    119e:	f200 80d7 	bhi.w	1350 <__udivmoddi4+0x2b8>
    11a2:	4618      	mov	r0, r3
    11a4:	eba4 0408 	sub.w	r4, r4, r8
    11a8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    11ac:	e7c0      	b.n	1130 <__udivmoddi4+0x98>
    11ae:	428b      	cmp	r3, r1
    11b0:	d908      	bls.n	11c4 <__udivmoddi4+0x12c>
    11b2:	2e00      	cmp	r6, #0
    11b4:	f000 80af 	beq.w	1316 <__udivmoddi4+0x27e>
    11b8:	2100      	movs	r1, #0
    11ba:	e9c6 0500 	strd	r0, r5, [r6]
    11be:	4608      	mov	r0, r1
    11c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    11c4:	fab3 f183 	clz	r1, r3
    11c8:	2900      	cmp	r1, #0
    11ca:	d14b      	bne.n	1264 <__udivmoddi4+0x1cc>
    11cc:	42ab      	cmp	r3, r5
    11ce:	d302      	bcc.n	11d6 <__udivmoddi4+0x13e>
    11d0:	4282      	cmp	r2, r0
    11d2:	f200 80b7 	bhi.w	1344 <__udivmoddi4+0x2ac>
    11d6:	1a84      	subs	r4, r0, r2
    11d8:	eb65 0303 	sbc.w	r3, r5, r3
    11dc:	2001      	movs	r0, #1
    11de:	469e      	mov	lr, r3
    11e0:	2e00      	cmp	r6, #0
    11e2:	d0aa      	beq.n	113a <__udivmoddi4+0xa2>
    11e4:	e9c6 4e00 	strd	r4, lr, [r6]
    11e8:	e7a7      	b.n	113a <__udivmoddi4+0xa2>
    11ea:	f1c2 0c20 	rsb	ip, r2, #32
    11ee:	fa01 f302 	lsl.w	r3, r1, r2
    11f2:	4097      	lsls	r7, r2
    11f4:	fa20 f00c 	lsr.w	r0, r0, ip
    11f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    11fc:	fa21 fc0c 	lsr.w	ip, r1, ip
    1200:	4318      	orrs	r0, r3
    1202:	fbbc f1fe 	udiv	r1, ip, lr
    1206:	0c05      	lsrs	r5, r0, #16
    1208:	fb0e cc11 	mls	ip, lr, r1, ip
    120c:	fa1f f887 	uxth.w	r8, r7
    1210:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    1214:	fb01 f308 	mul.w	r3, r1, r8
    1218:	42ab      	cmp	r3, r5
    121a:	fa04 f402 	lsl.w	r4, r4, r2
    121e:	d909      	bls.n	1234 <__udivmoddi4+0x19c>
    1220:	197d      	adds	r5, r7, r5
    1222:	f101 3cff 	add.w	ip, r1, #4294967295
    1226:	f080 808b 	bcs.w	1340 <__udivmoddi4+0x2a8>
    122a:	42ab      	cmp	r3, r5
    122c:	f240 8088 	bls.w	1340 <__udivmoddi4+0x2a8>
    1230:	3902      	subs	r1, #2
    1232:	443d      	add	r5, r7
    1234:	1aeb      	subs	r3, r5, r3
    1236:	b285      	uxth	r5, r0
    1238:	fbb3 f0fe 	udiv	r0, r3, lr
    123c:	fb0e 3310 	mls	r3, lr, r0, r3
    1240:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    1244:	fb00 f308 	mul.w	r3, r0, r8
    1248:	42ab      	cmp	r3, r5
    124a:	d907      	bls.n	125c <__udivmoddi4+0x1c4>
    124c:	197d      	adds	r5, r7, r5
    124e:	f100 3cff 	add.w	ip, r0, #4294967295
    1252:	d271      	bcs.n	1338 <__udivmoddi4+0x2a0>
    1254:	42ab      	cmp	r3, r5
    1256:	d96f      	bls.n	1338 <__udivmoddi4+0x2a0>
    1258:	3802      	subs	r0, #2
    125a:	443d      	add	r5, r7
    125c:	1aeb      	subs	r3, r5, r3
    125e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    1262:	e778      	b.n	1156 <__udivmoddi4+0xbe>
    1264:	f1c1 0c20 	rsb	ip, r1, #32
    1268:	408b      	lsls	r3, r1
    126a:	fa22 f70c 	lsr.w	r7, r2, ip
    126e:	431f      	orrs	r7, r3
    1270:	fa20 f40c 	lsr.w	r4, r0, ip
    1274:	fa05 f301 	lsl.w	r3, r5, r1
    1278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    127c:	fa25 f50c 	lsr.w	r5, r5, ip
    1280:	431c      	orrs	r4, r3
    1282:	0c23      	lsrs	r3, r4, #16
    1284:	fbb5 f9fe 	udiv	r9, r5, lr
    1288:	fa1f f887 	uxth.w	r8, r7
    128c:	fb0e 5519 	mls	r5, lr, r9, r5
    1290:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
    1294:	fb09 fa08 	mul.w	sl, r9, r8
    1298:	45aa      	cmp	sl, r5
    129a:	fa02 f201 	lsl.w	r2, r2, r1
    129e:	fa00 f301 	lsl.w	r3, r0, r1
    12a2:	d908      	bls.n	12b6 <__udivmoddi4+0x21e>
    12a4:	197d      	adds	r5, r7, r5
    12a6:	f109 30ff 	add.w	r0, r9, #4294967295
    12aa:	d247      	bcs.n	133c <__udivmoddi4+0x2a4>
    12ac:	45aa      	cmp	sl, r5
    12ae:	d945      	bls.n	133c <__udivmoddi4+0x2a4>
    12b0:	f1a9 0902 	sub.w	r9, r9, #2
    12b4:	443d      	add	r5, r7
    12b6:	eba5 050a 	sub.w	r5, r5, sl
    12ba:	b2a4      	uxth	r4, r4
    12bc:	fbb5 f0fe 	udiv	r0, r5, lr
    12c0:	fb0e 5510 	mls	r5, lr, r0, r5
    12c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    12c8:	fb00 f808 	mul.w	r8, r0, r8
    12cc:	45a0      	cmp	r8, r4
    12ce:	d907      	bls.n	12e0 <__udivmoddi4+0x248>
    12d0:	193c      	adds	r4, r7, r4
    12d2:	f100 35ff 	add.w	r5, r0, #4294967295
    12d6:	d22d      	bcs.n	1334 <__udivmoddi4+0x29c>
    12d8:	45a0      	cmp	r8, r4
    12da:	d92b      	bls.n	1334 <__udivmoddi4+0x29c>
    12dc:	3802      	subs	r0, #2
    12de:	443c      	add	r4, r7
    12e0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    12e4:	eba4 0408 	sub.w	r4, r4, r8
    12e8:	fba0 8902 	umull	r8, r9, r0, r2
    12ec:	454c      	cmp	r4, r9
    12ee:	46c6      	mov	lr, r8
    12f0:	464d      	mov	r5, r9
    12f2:	d319      	bcc.n	1328 <__udivmoddi4+0x290>
    12f4:	d016      	beq.n	1324 <__udivmoddi4+0x28c>
    12f6:	b15e      	cbz	r6, 1310 <__udivmoddi4+0x278>
    12f8:	ebb3 020e 	subs.w	r2, r3, lr
    12fc:	eb64 0405 	sbc.w	r4, r4, r5
    1300:	fa04 fc0c 	lsl.w	ip, r4, ip
    1304:	40ca      	lsrs	r2, r1
    1306:	ea4c 0202 	orr.w	r2, ip, r2
    130a:	40cc      	lsrs	r4, r1
    130c:	e9c6 2400 	strd	r2, r4, [r6]
    1310:	2100      	movs	r1, #0
    1312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1316:	4631      	mov	r1, r6
    1318:	4630      	mov	r0, r6
    131a:	e70e      	b.n	113a <__udivmoddi4+0xa2>
    131c:	46ac      	mov	ip, r5
    131e:	e6ed      	b.n	10fc <__udivmoddi4+0x64>
    1320:	4618      	mov	r0, r3
    1322:	e701      	b.n	1128 <__udivmoddi4+0x90>
    1324:	4543      	cmp	r3, r8
    1326:	d2e6      	bcs.n	12f6 <__udivmoddi4+0x25e>
    1328:	ebb8 0e02 	subs.w	lr, r8, r2
    132c:	eb69 0507 	sbc.w	r5, r9, r7
    1330:	3801      	subs	r0, #1
    1332:	e7e0      	b.n	12f6 <__udivmoddi4+0x25e>
    1334:	4628      	mov	r0, r5
    1336:	e7d3      	b.n	12e0 <__udivmoddi4+0x248>
    1338:	4660      	mov	r0, ip
    133a:	e78f      	b.n	125c <__udivmoddi4+0x1c4>
    133c:	4681      	mov	r9, r0
    133e:	e7ba      	b.n	12b6 <__udivmoddi4+0x21e>
    1340:	4661      	mov	r1, ip
    1342:	e777      	b.n	1234 <__udivmoddi4+0x19c>
    1344:	4608      	mov	r0, r1
    1346:	e74b      	b.n	11e0 <__udivmoddi4+0x148>
    1348:	f1ac 0c02 	sub.w	ip, ip, #2
    134c:	443d      	add	r5, r7
    134e:	e715      	b.n	117c <__udivmoddi4+0xe4>
    1350:	3802      	subs	r0, #2
    1352:	443c      	add	r4, r7
    1354:	e726      	b.n	11a4 <__udivmoddi4+0x10c>
    1356:	bf00      	nop

00001358 <__aeabi_idiv0>:
    1358:	4770      	bx	lr
    135a:	bf00      	nop
    135c:	0000      	movs	r0, r0
	...

00001360 <CMD3>:
	lenBufferACK = 0;
}


// Zerar os transdutores
void CMD3(char *data){
    1360:	b5f0      	push	{r4, r5, r6, r7, lr}
    1362:	b085      	sub	sp, #20
        char MSG[] = {ACK, data[1], data[2],0,0};
    1364:	2306      	movs	r3, #6
    1366:	f88d 3008 	strb.w	r3, [sp, #8]
    136a:	7843      	ldrb	r3, [r0, #1]
    136c:	f88d 3009 	strb.w	r3, [sp, #9]
    1370:	7883      	ldrb	r3, [r0, #2]
    1372:	f88d 300a 	strb.w	r3, [sp, #10]
    1376:	2300      	movs	r3, #0
    1378:	f88d 300b 	strb.w	r3, [sp, #11]
    137c:	f88d 300c 	strb.w	r3, [sp, #12]
		// char MSG[] = {ACK, data[1], data[2],0,0,0,0};
        // uint8_t bufferLPS[3]={0};
		uint8_t bufferSDP[3]={0};
    1380:	4a57      	ldr	r2, [pc, #348]	; (14e0 <CMD3+0x180>)
    1382:	8812      	ldrh	r2, [r2, #0]
    1384:	f8ad 2004 	strh.w	r2, [sp, #4]
    1388:	f88d 3006 	strb.w	r3, [sp, #6]
		uint8_t bufferHSC[2]={0};
    138c:	f8ad 3000 	strh.w	r3, [sp]
		signed short calc_press;

		tabela_HSC[0]=0;
    1390:	2300      	movs	r3, #0
    1392:	4a54      	ldr	r2, [pc, #336]	; (14e4 <CMD3+0x184>)
    1394:	6013      	str	r3, [r2, #0]
		tabela_SDP[0]=0;
    1396:	4a54      	ldr	r2, [pc, #336]	; (14e8 <CMD3+0x188>)
    1398:	6013      	str	r3, [r2, #0]
		offset_LPS[0]=0;
    139a:	4a54      	ldr	r2, [pc, #336]	; (14ec <CMD3+0x18c>)
    139c:	6013      	str	r3, [r2, #0]

		int k = 0;

        if(data[2] == 0x12){
    139e:	7883      	ldrb	r3, [r0, #2]
    13a0:	2b12      	cmp	r3, #18
    13a2:	f040 8085 	bne.w	14b0 <CMD3+0x150>

			// Savedata(0);

			// char aux2[2];
			// int aux4;
            for(k = 0;k<32;k++){
    13a6:	2500      	movs	r5, #0
    13a8:	2d1f      	cmp	r5, #31
    13aa:	dc60      	bgt.n	146e <CMD3+0x10e>
				    
				ReadSensorI2C(bufferSDP, ADDRESS_SDP31 ,3);
    13ac:	2203      	movs	r2, #3
    13ae:	2121      	movs	r1, #33	; 0x21
    13b0:	a801      	add	r0, sp, #4
    13b2:	f000 fb33 	bl	1a1c <ReadSensorI2C>
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke1(*(uintptr_t *)&us, K_SYSCALL_K_USLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_usleep(us);
    13b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    13ba:	f00f fb33 	bl	10a24 <z_impl_k_usleep>
				
				
				k_usleep(500);
				calc_press = ((bufferSDP[0]<<8 | bufferSDP[1]));
    13be:	f89d 4004 	ldrb.w	r4, [sp, #4]
    13c2:	0224      	lsls	r4, r4, #8
    13c4:	b224      	sxth	r4, r4
    13c6:	f89d 3005 	ldrb.w	r3, [sp, #5]
    13ca:	431c      	orrs	r4, r3
               	tabela_SDP[0]  += calc_press/((escalaBufferSDP) * 100.0);
    13cc:	4b48      	ldr	r3, [pc, #288]	; (14f0 <CMD3+0x190>)
    13ce:	6818      	ldr	r0, [r3, #0]
    13d0:	f7fe ffe8 	bl	3a4 <__aeabi_i2d>
    13d4:	2200      	movs	r2, #0
    13d6:	4b47      	ldr	r3, [pc, #284]	; (14f4 <CMD3+0x194>)
    13d8:	f7ff f84e 	bl	478 <__aeabi_dmul>
    13dc:	4606      	mov	r6, r0
    13de:	460f      	mov	r7, r1
    13e0:	4620      	mov	r0, r4
    13e2:	f7fe ffdf 	bl	3a4 <__aeabi_i2d>
    13e6:	4632      	mov	r2, r6
    13e8:	463b      	mov	r3, r7
    13ea:	f7ff f96f 	bl	6cc <__aeabi_ddiv>
    13ee:	4606      	mov	r6, r0
    13f0:	460f      	mov	r7, r1
    13f2:	4c3d      	ldr	r4, [pc, #244]	; (14e8 <CMD3+0x188>)
    13f4:	6820      	ldr	r0, [r4, #0]
    13f6:	f7fe ffe7 	bl	3c8 <__aeabi_f2d>
    13fa:	4632      	mov	r2, r6
    13fc:	463b      	mov	r3, r7
    13fe:	f7fe fe85 	bl	10c <__adddf3>
    1402:	f7ff fad3 	bl	9ac <__aeabi_d2f>
    1406:	6020      	str	r0, [r4, #0]
				// aux4= abs(aux4);
				// aux2[0]= aux4>>8;
				// aux2[1]= aux4 & 0x00FF;
				// SendMsg(aux2,2);

            	ReadSensorI2C(bufferHSC, ADDRESS_HSC ,2);
    1408:	2202      	movs	r2, #2
    140a:	2178      	movs	r1, #120	; 0x78
    140c:	4668      	mov	r0, sp
    140e:	f000 fb05 	bl	1a1c <ReadSensorI2C>
    1412:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1416:	f00f fb05 	bl	10a24 <z_impl_k_usleep>
				k_usleep(500);
                tabela_HSC[0] += ((((bufferHSC[0] & 0x3F)<<8 | bufferHSC[1])-0x0666)*(12.4541-(-12.4541))/(0x3999-0x0666) -12.4541);
    141a:	f89d 0000 	ldrb.w	r0, [sp]
    141e:	0200      	lsls	r0, r0, #8
    1420:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    1424:	f89d 3001 	ldrb.w	r3, [sp, #1]
    1428:	4318      	orrs	r0, r3
    142a:	f2a0 6066 	subw	r0, r0, #1638	; 0x666
    142e:	f7fe ffb9 	bl	3a4 <__aeabi_i2d>
    1432:	a325      	add	r3, pc, #148	; (adr r3, 14c8 <CMD3+0x168>)
    1434:	e9d3 2300 	ldrd	r2, r3, [r3]
    1438:	f7ff f81e 	bl	478 <__aeabi_dmul>
    143c:	a324      	add	r3, pc, #144	; (adr r3, 14d0 <CMD3+0x170>)
    143e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1442:	f7ff f943 	bl	6cc <__aeabi_ddiv>
    1446:	a324      	add	r3, pc, #144	; (adr r3, 14d8 <CMD3+0x178>)
    1448:	e9d3 2300 	ldrd	r2, r3, [r3]
    144c:	f7fe fe5c 	bl	108 <__aeabi_dsub>
    1450:	4606      	mov	r6, r0
    1452:	460f      	mov	r7, r1
    1454:	4c23      	ldr	r4, [pc, #140]	; (14e4 <CMD3+0x184>)
    1456:	6820      	ldr	r0, [r4, #0]
    1458:	f7fe ffb6 	bl	3c8 <__aeabi_f2d>
    145c:	4632      	mov	r2, r6
    145e:	463b      	mov	r3, r7
    1460:	f7fe fe54 	bl	10c <__adddf3>
    1464:	f7ff faa2 	bl	9ac <__aeabi_d2f>
    1468:	6020      	str	r0, [r4, #0]
            for(k = 0;k<32;k++){
    146a:	3501      	adds	r5, #1
    146c:	e79c      	b.n	13a8 <CMD3+0x48>
				// aux2[1]= aux4 & 0x00FF;
				// SendMsg(aux2,2);
			
			}

			tabela_SDP[0]=tabela_SDP[0]/32.0;
    146e:	4c1e      	ldr	r4, [pc, #120]	; (14e8 <CMD3+0x188>)
    1470:	f04f 5174 	mov.w	r1, #1023410176	; 0x3d000000
    1474:	6820      	ldr	r0, [r4, #0]
    1476:	f7ff fbf7 	bl	c68 <__aeabi_fmul>
    147a:	6020      	str	r0, [r4, #0]
			Savedata(2);
    147c:	2002      	movs	r0, #2
    147e:	f000 fded 	bl	205c <Savedata>

			tabela_HSC[0]=tabela_HSC[0]/32.0;
    1482:	4c18      	ldr	r4, [pc, #96]	; (14e4 <CMD3+0x184>)
    1484:	f04f 5174 	mov.w	r1, #1023410176	; 0x3d000000
    1488:	6820      	ldr	r0, [r4, #0]
    148a:	f7ff fbed 	bl	c68 <__aeabi_fmul>
    148e:	6020      	str	r0, [r4, #0]
			Savedata(1);
    1490:	2001      	movs	r0, #1
    1492:	f000 fde3 	bl	205c <Savedata>

			//BEGIN::AREA RESERVADA PARA DEBUGAR PROTOCOLO, MANTER COMENTADO!
			
			//END::AREA RESERVADA

			SendMsg(MSG,5);
    1496:	2105      	movs	r1, #5
    1498:	a802      	add	r0, sp, #8
    149a:	f000 fb5d 	bl	1b58 <SendMsg>
			lenBufferACK = sizeof(MSG);
    149e:	2205      	movs	r2, #5
    14a0:	4b15      	ldr	r3, [pc, #84]	; (14f8 <CMD3+0x198>)
    14a2:	701a      	strb	r2, [r3, #0]
			memcpy(bufferACK,MSG,sizeof(MSG));
    14a4:	a902      	add	r1, sp, #8
    14a6:	4815      	ldr	r0, [pc, #84]	; (14fc <CMD3+0x19c>)
    14a8:	f011 fea2 	bl	131f0 <memcpy>
		else{
			MSG[0]= NACK;
			SendMsg(MSG,5);
			lenBufferACK = 0;
		}
}
    14ac:	b005      	add	sp, #20
    14ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
			MSG[0]= NACK;
    14b0:	2315      	movs	r3, #21
    14b2:	f88d 3008 	strb.w	r3, [sp, #8]
			SendMsg(MSG,5);
    14b6:	2105      	movs	r1, #5
    14b8:	a802      	add	r0, sp, #8
    14ba:	f000 fb4d 	bl	1b58 <SendMsg>
			lenBufferACK = 0;
    14be:	4b0e      	ldr	r3, [pc, #56]	; (14f8 <CMD3+0x198>)
    14c0:	2200      	movs	r2, #0
    14c2:	701a      	strb	r2, [r3, #0]
}
    14c4:	e7f2      	b.n	14ac <CMD3+0x14c>
    14c6:	bf00      	nop
    14c8:	cb923a2a 	.word	0xcb923a2a
    14cc:	4038e87f 	.word	0x4038e87f
    14d0:	00000000 	.word	0x00000000
    14d4:	40c99980 	.word	0x40c99980
    14d8:	cb923a2a 	.word	0xcb923a2a
    14dc:	4028e87f 	.word	0x4028e87f
    14e0:	000166f0 	.word	0x000166f0
    14e4:	20001504 	.word	0x20001504
    14e8:	200015b0 	.word	0x200015b0
    14ec:	20001458 	.word	0x20001458
    14f0:	20000008 	.word	0x20000008
    14f4:	40590000 	.word	0x40590000
    14f8:	20002fbe 	.word	0x20002fbe
    14fc:	20000a60 	.word	0x20000a60

00001500 <CMD4>:


void CMD4(char *data){
    1500:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1504:	b085      	sub	sp, #20
    1506:	4606      	mov	r6, r0
    char MSG[] = {ACK, data[1], data[2],0,0};
    1508:	2306      	movs	r3, #6
    150a:	f88d 3008 	strb.w	r3, [sp, #8]
    150e:	7843      	ldrb	r3, [r0, #1]
    1510:	f88d 3009 	strb.w	r3, [sp, #9]
    1514:	7882      	ldrb	r2, [r0, #2]
    1516:	f88d 200a 	strb.w	r2, [sp, #10]
    151a:	2500      	movs	r5, #0
    151c:	f88d 500b 	strb.w	r5, [sp, #11]
    1520:	f88d 500c 	strb.w	r5, [sp, #12]
	//  char MSG[] = {ACK, data[1], data[2],0,0,0,0};
	uint8_t bufferSDP[3]={0};
    1524:	4b7e      	ldr	r3, [pc, #504]	; (1720 <CMD4+0x220>)
    1526:	881b      	ldrh	r3, [r3, #0]
    1528:	f8ad 3004 	strh.w	r3, [sp, #4]
    152c:	f88d 5006 	strb.w	r5, [sp, #6]
	uint8_t bufferHSC[2]={0};
    1530:	f8ad 5000 	strh.w	r5, [sp]
	signed short calc_press;

	tabela_HSC[data[2]]=0;
    1534:	2300      	movs	r3, #0
    1536:	497b      	ldr	r1, [pc, #492]	; (1724 <CMD4+0x224>)
    1538:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	tabela_SDP[data[2]]=0;
    153c:	7881      	ldrb	r1, [r0, #2]
    153e:	4a7a      	ldr	r2, [pc, #488]	; (1728 <CMD4+0x228>)
    1540:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	int k = 0;
	
	char aux3[4];
	char aux2[4];
	for(k = 0;k<32;k++){
    1544:	2d1f      	cmp	r5, #31
    1546:	dc66      	bgt.n	1616 <CMD4+0x116>
		ReadSensorI2C(bufferSDP, ADDRESS_SDP31 ,3);
    1548:	2203      	movs	r2, #3
    154a:	2121      	movs	r1, #33	; 0x21
    154c:	a801      	add	r0, sp, #4
    154e:	f000 fa65 	bl	1a1c <ReadSensorI2C>
    1552:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1556:	f00f fa65 	bl	10a24 <z_impl_k_usleep>
		k_usleep(500);
		calc_press = ((bufferSDP[0]<<8 | bufferSDP[1]));
    155a:	f89d 4004 	ldrb.w	r4, [sp, #4]
    155e:	0224      	lsls	r4, r4, #8
    1560:	b224      	sxth	r4, r4
    1562:	f89d 3005 	ldrb.w	r3, [sp, #5]
    1566:	431c      	orrs	r4, r3
		tabela_SDP[data[2]]  += calc_press/((escalaBufferSDP) * 100.0);
    1568:	78b7      	ldrb	r7, [r6, #2]
    156a:	4b70      	ldr	r3, [pc, #448]	; (172c <CMD4+0x22c>)
    156c:	6818      	ldr	r0, [r3, #0]
    156e:	f7fe ff19 	bl	3a4 <__aeabi_i2d>
    1572:	2200      	movs	r2, #0
    1574:	4b6e      	ldr	r3, [pc, #440]	; (1730 <CMD4+0x230>)
    1576:	f7fe ff7f 	bl	478 <__aeabi_dmul>
    157a:	4680      	mov	r8, r0
    157c:	4689      	mov	r9, r1
    157e:	4620      	mov	r0, r4
    1580:	f7fe ff10 	bl	3a4 <__aeabi_i2d>
    1584:	4642      	mov	r2, r8
    1586:	464b      	mov	r3, r9
    1588:	f7ff f8a0 	bl	6cc <__aeabi_ddiv>
    158c:	4680      	mov	r8, r0
    158e:	4689      	mov	r9, r1
    1590:	4c65      	ldr	r4, [pc, #404]	; (1728 <CMD4+0x228>)
    1592:	f854 0027 	ldr.w	r0, [r4, r7, lsl #2]
    1596:	f7fe ff17 	bl	3c8 <__aeabi_f2d>
    159a:	4642      	mov	r2, r8
    159c:	464b      	mov	r3, r9
    159e:	f7fe fdb5 	bl	10c <__adddf3>
    15a2:	f7ff fa03 	bl	9ac <__aeabi_d2f>
    15a6:	f844 0027 	str.w	r0, [r4, r7, lsl #2]

		ReadSensorI2C(bufferHSC, ADDRESS_HSC ,2);
    15aa:	2202      	movs	r2, #2
    15ac:	2178      	movs	r1, #120	; 0x78
    15ae:	4668      	mov	r0, sp
    15b0:	f000 fa34 	bl	1a1c <ReadSensorI2C>
    15b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    15b8:	f00f fa34 	bl	10a24 <z_impl_k_usleep>
		k_usleep(500);
		tabela_HSC[data[2]] += ((((bufferHSC[0] & 0x3F)<<8 | bufferHSC[1])-0x0666)*(12.4541-(-12.4541))/(0x3999-0x0666) -12.4541);
    15bc:	78b4      	ldrb	r4, [r6, #2]
    15be:	f89d 0000 	ldrb.w	r0, [sp]
    15c2:	0200      	lsls	r0, r0, #8
    15c4:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    15c8:	f89d 3001 	ldrb.w	r3, [sp, #1]
    15cc:	4318      	orrs	r0, r3
    15ce:	f2a0 6066 	subw	r0, r0, #1638	; 0x666
    15d2:	f7fe fee7 	bl	3a4 <__aeabi_i2d>
    15d6:	a34c      	add	r3, pc, #304	; (adr r3, 1708 <CMD4+0x208>)
    15d8:	e9d3 2300 	ldrd	r2, r3, [r3]
    15dc:	f7fe ff4c 	bl	478 <__aeabi_dmul>
    15e0:	a34b      	add	r3, pc, #300	; (adr r3, 1710 <CMD4+0x210>)
    15e2:	e9d3 2300 	ldrd	r2, r3, [r3]
    15e6:	f7ff f871 	bl	6cc <__aeabi_ddiv>
    15ea:	a34b      	add	r3, pc, #300	; (adr r3, 1718 <CMD4+0x218>)
    15ec:	e9d3 2300 	ldrd	r2, r3, [r3]
    15f0:	f7fe fd8a 	bl	108 <__aeabi_dsub>
    15f4:	4680      	mov	r8, r0
    15f6:	4689      	mov	r9, r1
    15f8:	4f4a      	ldr	r7, [pc, #296]	; (1724 <CMD4+0x224>)
    15fa:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
    15fe:	f7fe fee3 	bl	3c8 <__aeabi_f2d>
    1602:	4642      	mov	r2, r8
    1604:	464b      	mov	r3, r9
    1606:	f7fe fd81 	bl	10c <__adddf3>
    160a:	f7ff f9cf 	bl	9ac <__aeabi_d2f>
    160e:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
	for(k = 0;k<32;k++){
    1612:	3501      	adds	r5, #1
    1614:	e796      	b.n	1544 <CMD4+0x44>
	}

	tabela_SDP[data[2]]=abs((tabela_SDP[data[2]]/32.0)-tabela_SDP[0]);
    1616:	78b7      	ldrb	r7, [r6, #2]
    1618:	f8df 810c 	ldr.w	r8, [pc, #268]	; 1728 <CMD4+0x228>
    161c:	f858 0027 	ldr.w	r0, [r8, r7, lsl #2]
    1620:	f7fe fed2 	bl	3c8 <__aeabi_f2d>
    1624:	2200      	movs	r2, #0
    1626:	4b43      	ldr	r3, [pc, #268]	; (1734 <CMD4+0x234>)
    1628:	f7fe ff26 	bl	478 <__aeabi_dmul>
    162c:	4604      	mov	r4, r0
    162e:	460d      	mov	r5, r1
    1630:	f8d8 0000 	ldr.w	r0, [r8]
    1634:	f7fe fec8 	bl	3c8 <__aeabi_f2d>
    1638:	4602      	mov	r2, r0
    163a:	460b      	mov	r3, r1
    163c:	4620      	mov	r0, r4
    163e:	4629      	mov	r1, r5
    1640:	f7fe fd62 	bl	108 <__aeabi_dsub>
    1644:	4605      	mov	r5, r0
    1646:	460c      	mov	r4, r1
    1648:	2200      	movs	r2, #0
    164a:	2300      	movs	r3, #0
    164c:	4628      	mov	r0, r5
    164e:	4621      	mov	r1, r4
    1650:	f7ff f9a2 	bl	998 <__aeabi_dcmpgt>
    1654:	2800      	cmp	r0, #0
    1656:	d04e      	beq.n	16f6 <CMD4+0x1f6>
    1658:	4628      	mov	r0, r5
    165a:	4621      	mov	r1, r4
    165c:	f7ff f9a6 	bl	9ac <__aeabi_d2f>
    1660:	4b31      	ldr	r3, [pc, #196]	; (1728 <CMD4+0x228>)
    1662:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
	Savedata(2);
    1666:	2002      	movs	r0, #2
    1668:	f000 fcf8 	bl	205c <Savedata>

	tabela_HSC[data[2]]=abs((tabela_HSC[data[2]]/32.0) - tabela_HSC[0]);
    166c:	78b7      	ldrb	r7, [r6, #2]
    166e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 1724 <CMD4+0x224>
    1672:	f858 0027 	ldr.w	r0, [r8, r7, lsl #2]
    1676:	f7fe fea7 	bl	3c8 <__aeabi_f2d>
    167a:	2200      	movs	r2, #0
    167c:	4b2d      	ldr	r3, [pc, #180]	; (1734 <CMD4+0x234>)
    167e:	f7fe fefb 	bl	478 <__aeabi_dmul>
    1682:	4604      	mov	r4, r0
    1684:	460d      	mov	r5, r1
    1686:	f8d8 0000 	ldr.w	r0, [r8]
    168a:	f7fe fe9d 	bl	3c8 <__aeabi_f2d>
    168e:	4602      	mov	r2, r0
    1690:	460b      	mov	r3, r1
    1692:	4620      	mov	r0, r4
    1694:	4629      	mov	r1, r5
    1696:	f7fe fd37 	bl	108 <__aeabi_dsub>
    169a:	4605      	mov	r5, r0
    169c:	460c      	mov	r4, r1
    169e:	2200      	movs	r2, #0
    16a0:	2300      	movs	r3, #0
    16a2:	4628      	mov	r0, r5
    16a4:	4621      	mov	r1, r4
    16a6:	f7ff f977 	bl	998 <__aeabi_dcmpgt>
    16aa:	b338      	cbz	r0, 16fc <CMD4+0x1fc>
    16ac:	4628      	mov	r0, r5
    16ae:	4621      	mov	r1, r4
    16b0:	f7ff f97c 	bl	9ac <__aeabi_d2f>
    16b4:	4c1b      	ldr	r4, [pc, #108]	; (1724 <CMD4+0x224>)
    16b6:	f844 0027 	str.w	r0, [r4, r7, lsl #2]
	Savedata(1);
    16ba:	2001      	movs	r0, #1
    16bc:	f000 fcce 	bl	205c <Savedata>
	//BEGIN::AREA RESERVADA PARA DEBUGAR PROTOCOLO, MANTER COMENTADO!

	//END::AREA RESERVADA


	int aux = (tabela_HSC[data[2]]*1000)/1;
    16c0:	78b3      	ldrb	r3, [r6, #2]
    16c2:	491d      	ldr	r1, [pc, #116]	; (1738 <CMD4+0x238>)
    16c4:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
    16c8:	f7ff face 	bl	c68 <__aeabi_fmul>
    16cc:	f7ff fc92 	bl	ff4 <__aeabi_f2iz>
	MSG[3]= aux>>8;
    16d0:	1203      	asrs	r3, r0, #8
    16d2:	f88d 300b 	strb.w	r3, [sp, #11]
	MSG[4]= aux & 0x00FF;
    16d6:	f88d 000c 	strb.w	r0, [sp, #12]

	SendMsg(MSG,5);
    16da:	2105      	movs	r1, #5
    16dc:	a802      	add	r0, sp, #8
    16de:	f000 fa3b 	bl	1b58 <SendMsg>
	lenBufferACK = sizeof(MSG);
    16e2:	2205      	movs	r2, #5
    16e4:	4b15      	ldr	r3, [pc, #84]	; (173c <CMD4+0x23c>)
    16e6:	701a      	strb	r2, [r3, #0]
	memcpy(bufferACK,MSG,sizeof(MSG));
    16e8:	a902      	add	r1, sp, #8
    16ea:	4815      	ldr	r0, [pc, #84]	; (1740 <CMD4+0x240>)
    16ec:	f011 fd80 	bl	131f0 <memcpy>
}
    16f0:	b005      	add	sp, #20
    16f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	tabela_SDP[data[2]]=abs((tabela_SDP[data[2]]/32.0)-tabela_SDP[0]);
    16f6:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
    16fa:	e7ad      	b.n	1658 <CMD4+0x158>
	tabela_HSC[data[2]]=abs((tabela_HSC[data[2]]/32.0) - tabela_HSC[0]);
    16fc:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
    1700:	e7d4      	b.n	16ac <CMD4+0x1ac>
    1702:	bf00      	nop
    1704:	f3af 8000 	nop.w
    1708:	cb923a2a 	.word	0xcb923a2a
    170c:	4038e87f 	.word	0x4038e87f
    1710:	00000000 	.word	0x00000000
    1714:	40c99980 	.word	0x40c99980
    1718:	cb923a2a 	.word	0xcb923a2a
    171c:	4028e87f 	.word	0x4028e87f
    1720:	000166f0 	.word	0x000166f0
    1724:	20001504 	.word	0x20001504
    1728:	200015b0 	.word	0x200015b0
    172c:	20000008 	.word	0x20000008
    1730:	40590000 	.word	0x40590000
    1734:	3fa00000 	.word	0x3fa00000
    1738:	447a0000 	.word	0x447a0000
    173c:	20002fbe 	.word	0x20002fbe
    1740:	20000a60 	.word	0x20000a60
    1744:	00000000 	.word	0x00000000

00001748 <Telemetria>:
	SendMsg(MSG,128);
    lenBufferACK = sizeof(MSG);
	memcpy(bufferACK,MSG,sizeof(MSG));
}

void Telemetria(){
    1748:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    174c:	b087      	sub	sp, #28
	char MSG[] = {ACK,0x77,0,0,0,0,0,0};
    174e:	4b88      	ldr	r3, [pc, #544]	; (1970 <Telemetria+0x228>)
    1750:	6899      	ldr	r1, [r3, #8]
    1752:	6858      	ldr	r0, [r3, #4]
    1754:	aa06      	add	r2, sp, #24
    1756:	e902 0003 	stmdb	r2, {r0, r1}
	uint8_t bufferSDP[3]={0};
    175a:	881b      	ldrh	r3, [r3, #0]
    175c:	f8ad 300c 	strh.w	r3, [sp, #12]
    1760:	2300      	movs	r3, #0
    1762:	f88d 300e 	strb.w	r3, [sp, #14]
	uint8_t bufferHSC[2]={0};
    1766:	f8ad 3008 	strh.w	r3, [sp, #8]
	int auxEV = 0;
	float SDP = 0;
	float HSC = 0;
	float fluxoSDP = 0;
	float fluxoHSC = 0;
	flagTimer1 = 0;
    176a:	4a82      	ldr	r2, [pc, #520]	; (1974 <Telemetria+0x22c>)
    176c:	7013      	strb	r3, [r2, #0]
	k_timer_start(&my_timer,K_USEC(750), K_USEC(750));
    176e:	2219      	movs	r2, #25
    1770:	2300      	movs	r3, #0
		arch_syscall_invoke5(*(uintptr_t *)&timer, parm0.split.lo, parm0.split.hi, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_TIMER_START);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_timer_start(timer, duration, period);
    1772:	e9cd 2300 	strd	r2, r3, [sp]
    1776:	4880      	ldr	r0, [pc, #512]	; (1978 <Telemetria+0x230>)
    1778:	f00f fba2 	bl	10ec0 <z_impl_k_timer_start>
	while(flagCE){
    177c:	e02b      	b.n	17d6 <Telemetria+0x8e>
				       gpio_port_pins_t pins);

static inline int z_impl_gpio_port_clear_bits_raw(const struct device *port,
						  gpio_port_pins_t pins)
{
	const struct gpio_driver_api *api =
    177e:	6883      	ldr	r3, [r0, #8]
		(const struct gpio_driver_api *)port->api;

	return api->port_clear_bits_raw(port, pins);
    1780:	691b      	ldr	r3, [r3, #16]
    1782:	f44f 7180 	mov.w	r1, #256	; 0x100
    1786:	4798      	blx	r3
    1788:	e03d      	b.n	1806 <Telemetria+0xbe>
			SDP = (calc_press/((escalaBufferSDP) * 100.0));
			SDP = SDP - tabela_SDP[0];
			fluxoSDP = FlowCalc(SDP, tabela_SDP);


			if((60 >= abs(fluxoSDP) &&   20 >= abs(abs(fluxoSDP) - abs(fluxoHSC)))){
    178a:	497c      	ldr	r1, [pc, #496]	; (197c <Telemetria+0x234>)
    178c:	4620      	mov	r0, r4
    178e:	f7ff fc1d 	bl	fcc <__aeabi_fcmpge>
    1792:	2800      	cmp	r0, #0
    1794:	f040 80a9 	bne.w	18ea <Telemetria+0x1a2>
				auxEV = (fluxoSDP*100)/1;
			}else{
				auxEV = (HSC*100)/1;	
    1798:	4979      	ldr	r1, [pc, #484]	; (1980 <Telemetria+0x238>)
    179a:	4630      	mov	r0, r6
    179c:	f7ff fa64 	bl	c68 <__aeabi_fmul>
    17a0:	f7ff fc28 	bl	ff4 <__aeabi_f2iz>
			}

			MSG[4] = auxEV>>8;
    17a4:	1203      	asrs	r3, r0, #8
    17a6:	f88d 3014 	strb.w	r3, [sp, #20]
			MSG[5] = auxEV & 0xFF;
    17aa:	f88d 0015 	strb.w	r0, [sp, #21]

			SendMsg(MSG,8);
    17ae:	2108      	movs	r1, #8
    17b0:	a804      	add	r0, sp, #16
    17b2:	f000 f9d1 	bl	1b58 <SendMsg>
    		lenBufferACK = sizeof(MSG);
    17b6:	2208      	movs	r2, #8
    17b8:	4b72      	ldr	r3, [pc, #456]	; (1984 <Telemetria+0x23c>)
    17ba:	701a      	strb	r2, [r3, #0]
			memcpy(bufferACK,MSG,sizeof(MSG));
    17bc:	a904      	add	r1, sp, #16
    17be:	4872      	ldr	r0, [pc, #456]	; (1988 <Telemetria+0x240>)
    17c0:	f011 fd16 	bl	131f0 <memcpy>

			if(uart_irq_rx_ready(uart_dev)){
    17c4:	4b71      	ldr	r3, [pc, #452]	; (198c <Telemetria+0x244>)
    17c6:	6818      	ldr	r0, [r3, #0]
 * @retval -ENOTSUP if API is not enabled.
 */
static inline int uart_irq_rx_ready(const struct device *dev)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
    17c8:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if (api->irq_rx_ready == NULL) {
    17ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    17cc:	b10b      	cbz	r3, 17d2 <Telemetria+0x8a>
		return -ENOSYS;
	}
	return api->irq_rx_ready(dev);
    17ce:	4798      	blx	r3
    17d0:	b108      	cbz	r0, 17d6 <Telemetria+0x8e>
				ReadMsg();
    17d2:	f000 fab7 	bl	1d44 <ReadMsg>
	while(flagCE){
    17d6:	4b6e      	ldr	r3, [pc, #440]	; (1990 <Telemetria+0x248>)
    17d8:	781b      	ldrb	r3, [r3, #0]
    17da:	2b00      	cmp	r3, #0
    17dc:	f000 80b5 	beq.w	194a <Telemetria+0x202>
			gpio_pin_set(dev1, PIN, (int)led_is_on);
    17e0:	4b6c      	ldr	r3, [pc, #432]	; (1994 <Telemetria+0x24c>)
    17e2:	6818      	ldr	r0, [r3, #0]
    17e4:	4b6c      	ldr	r3, [pc, #432]	; (1998 <Telemetria+0x250>)
    17e6:	781a      	ldrb	r2, [r3, #0]
    17e8:	4613      	mov	r3, r2
static inline int gpio_pin_set(const struct device *port, gpio_pin_t pin,
			       int value)
{
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	const struct gpio_driver_data *const data =
    17ea:	6901      	ldr	r1, [r0, #16]

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    17ec:	6809      	ldr	r1, [r1, #0]
    17ee:	f411 7f80 	tst.w	r1, #256	; 0x100
    17f2:	d001      	beq.n	17f8 <Telemetria+0xb0>
		value = (value != 0) ? 0 : 1;
    17f4:	f082 0301 	eor.w	r3, r2, #1
	if (value != 0)	{
    17f8:	2b00      	cmp	r3, #0
    17fa:	d0c0      	beq.n	177e <Telemetria+0x36>
	const struct gpio_driver_api *api =
    17fc:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    17fe:	68db      	ldr	r3, [r3, #12]
    1800:	f44f 7180 	mov.w	r1, #256	; 0x100
    1804:	4798      	blx	r3
			led_is_on = !led_is_on;
    1806:	4a64      	ldr	r2, [pc, #400]	; (1998 <Telemetria+0x250>)
    1808:	7813      	ldrb	r3, [r2, #0]
    180a:	f083 0301 	eor.w	r3, r3, #1
    180e:	7013      	strb	r3, [r2, #0]
			ReadSensorI2C(bufferHSC, ADDRESS_HSC ,2);
    1810:	2202      	movs	r2, #2
    1812:	2178      	movs	r1, #120	; 0x78
    1814:	a802      	add	r0, sp, #8
    1816:	f000 f901 	bl	1a1c <ReadSensorI2C>
			while(!flagTimer1);  
    181a:	4b56      	ldr	r3, [pc, #344]	; (1974 <Telemetria+0x22c>)
    181c:	781b      	ldrb	r3, [r3, #0]
    181e:	2b00      	cmp	r3, #0
    1820:	d0fb      	beq.n	181a <Telemetria+0xd2>
			flagTimer1 = 0;
    1822:	4b54      	ldr	r3, [pc, #336]	; (1974 <Telemetria+0x22c>)
    1824:	2200      	movs	r2, #0
    1826:	701a      	strb	r2, [r3, #0]
			ReadSensorI2C(bufferSDP, ADDRESS_SDP31 ,3);
    1828:	2203      	movs	r2, #3
    182a:	2121      	movs	r1, #33	; 0x21
    182c:	a803      	add	r0, sp, #12
    182e:	f000 f8f5 	bl	1a1c <ReadSensorI2C>
			HSC = ((((bufferHSC[0] & 0x3F)<<8 | bufferHSC[1])-0x0666)*(12.4541-(-12.4541))/(0x3999-0x0666) -12.4541);
    1832:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1836:	0200      	lsls	r0, r0, #8
    1838:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
    183c:	f89d 3009 	ldrb.w	r3, [sp, #9]
    1840:	4318      	orrs	r0, r3
    1842:	f2a0 6066 	subw	r0, r0, #1638	; 0x666
    1846:	f7fe fdad 	bl	3a4 <__aeabi_i2d>
    184a:	a343      	add	r3, pc, #268	; (adr r3, 1958 <Telemetria+0x210>)
    184c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1850:	f7fe fe12 	bl	478 <__aeabi_dmul>
    1854:	a342      	add	r3, pc, #264	; (adr r3, 1960 <Telemetria+0x218>)
    1856:	e9d3 2300 	ldrd	r2, r3, [r3]
    185a:	f7fe ff37 	bl	6cc <__aeabi_ddiv>
    185e:	a342      	add	r3, pc, #264	; (adr r3, 1968 <Telemetria+0x220>)
    1860:	e9d3 2300 	ldrd	r2, r3, [r3]
    1864:	f7fe fc50 	bl	108 <__aeabi_dsub>
    1868:	f7ff f8a0 	bl	9ac <__aeabi_d2f>
			HSC = HSC - tabela_HSC[0];
    186c:	4c4b      	ldr	r4, [pc, #300]	; (199c <Telemetria+0x254>)
    186e:	6821      	ldr	r1, [r4, #0]
    1870:	f7ff f8f0 	bl	a54 <__aeabi_fsub>
    1874:	4606      	mov	r6, r0
			fluxoHSC = FlowCalc(HSC, tabela_HSC);
    1876:	4621      	mov	r1, r4
    1878:	f000 face 	bl	1e18 <FlowCalc>
    187c:	4605      	mov	r5, r0
			while(!flagTimer1);
    187e:	4b3d      	ldr	r3, [pc, #244]	; (1974 <Telemetria+0x22c>)
    1880:	781b      	ldrb	r3, [r3, #0]
    1882:	2b00      	cmp	r3, #0
    1884:	d0fb      	beq.n	187e <Telemetria+0x136>
			flagTimer1 = 0;
    1886:	4b3b      	ldr	r3, [pc, #236]	; (1974 <Telemetria+0x22c>)
    1888:	2200      	movs	r2, #0
    188a:	701a      	strb	r2, [r3, #0]
			calc_press = ((bufferSDP[0]<<8 | bufferSDP[1]));
    188c:	f89d 400c 	ldrb.w	r4, [sp, #12]
    1890:	0224      	lsls	r4, r4, #8
    1892:	b224      	sxth	r4, r4
    1894:	f89d 300d 	ldrb.w	r3, [sp, #13]
    1898:	431c      	orrs	r4, r3
			SDP = (calc_press/((escalaBufferSDP) * 100.0));
    189a:	4b41      	ldr	r3, [pc, #260]	; (19a0 <Telemetria+0x258>)
    189c:	6818      	ldr	r0, [r3, #0]
    189e:	f7fe fd81 	bl	3a4 <__aeabi_i2d>
    18a2:	2200      	movs	r2, #0
    18a4:	4b3f      	ldr	r3, [pc, #252]	; (19a4 <Telemetria+0x25c>)
    18a6:	f7fe fde7 	bl	478 <__aeabi_dmul>
    18aa:	4680      	mov	r8, r0
    18ac:	4689      	mov	r9, r1
    18ae:	4620      	mov	r0, r4
    18b0:	f7fe fd78 	bl	3a4 <__aeabi_i2d>
    18b4:	4642      	mov	r2, r8
    18b6:	464b      	mov	r3, r9
    18b8:	f7fe ff08 	bl	6cc <__aeabi_ddiv>
    18bc:	f7ff f876 	bl	9ac <__aeabi_d2f>
			SDP = SDP - tabela_SDP[0];
    18c0:	4c39      	ldr	r4, [pc, #228]	; (19a8 <Telemetria+0x260>)
    18c2:	6821      	ldr	r1, [r4, #0]
    18c4:	f7ff f8c6 	bl	a54 <__aeabi_fsub>
			fluxoSDP = FlowCalc(SDP, tabela_SDP);
    18c8:	4621      	mov	r1, r4
    18ca:	f000 faa5 	bl	1e18 <FlowCalc>
    18ce:	4604      	mov	r4, r0
			if((60 >= abs(fluxoSDP) &&   20 >= abs(abs(fluxoSDP) - abs(fluxoHSC)))){
    18d0:	2100      	movs	r1, #0
    18d2:	f7ff fb85 	bl	fe0 <__aeabi_fcmpgt>
    18d6:	2800      	cmp	r0, #0
    18d8:	f43f af57 	beq.w	178a <Telemetria+0x42>
    18dc:	4933      	ldr	r1, [pc, #204]	; (19ac <Telemetria+0x264>)
    18de:	4620      	mov	r0, r4
    18e0:	f7ff fb6a 	bl	fb8 <__aeabi_fcmple>
    18e4:	2800      	cmp	r0, #0
    18e6:	f43f af57 	beq.w	1798 <Telemetria+0x50>
    18ea:	2100      	movs	r1, #0
    18ec:	4620      	mov	r0, r4
    18ee:	f7ff fb77 	bl	fe0 <__aeabi_fcmpgt>
    18f2:	b1e0      	cbz	r0, 192e <Telemetria+0x1e6>
    18f4:	4627      	mov	r7, r4
    18f6:	2100      	movs	r1, #0
    18f8:	4628      	mov	r0, r5
    18fa:	f7ff fb71 	bl	fe0 <__aeabi_fcmpgt>
    18fe:	b1c8      	cbz	r0, 1934 <Telemetria+0x1ec>
    1900:	4629      	mov	r1, r5
    1902:	4638      	mov	r0, r7
    1904:	f7ff f8a6 	bl	a54 <__aeabi_fsub>
    1908:	4605      	mov	r5, r0
    190a:	2100      	movs	r1, #0
    190c:	f7ff fb68 	bl	fe0 <__aeabi_fcmpgt>
    1910:	b198      	cbz	r0, 193a <Telemetria+0x1f2>
    1912:	4927      	ldr	r1, [pc, #156]	; (19b0 <Telemetria+0x268>)
    1914:	4628      	mov	r0, r5
    1916:	f7ff fb4f 	bl	fb8 <__aeabi_fcmple>
    191a:	2800      	cmp	r0, #0
    191c:	f43f af3c 	beq.w	1798 <Telemetria+0x50>
				auxEV = (fluxoSDP*100)/1;
    1920:	4917      	ldr	r1, [pc, #92]	; (1980 <Telemetria+0x238>)
    1922:	4620      	mov	r0, r4
    1924:	f7ff f9a0 	bl	c68 <__aeabi_fmul>
    1928:	f7ff fb64 	bl	ff4 <__aeabi_f2iz>
    192c:	e73a      	b.n	17a4 <Telemetria+0x5c>
			if((60 >= abs(fluxoSDP) &&   20 >= abs(abs(fluxoSDP) - abs(fluxoHSC)))){
    192e:	f104 4700 	add.w	r7, r4, #2147483648	; 0x80000000
    1932:	e7e0      	b.n	18f6 <Telemetria+0x1ae>
    1934:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
    1938:	e7e2      	b.n	1900 <Telemetria+0x1b8>
    193a:	491e      	ldr	r1, [pc, #120]	; (19b4 <Telemetria+0x26c>)
    193c:	4628      	mov	r0, r5
    193e:	f7ff fb45 	bl	fcc <__aeabi_fcmpge>
    1942:	2800      	cmp	r0, #0
    1944:	f43f af28 	beq.w	1798 <Telemetria+0x50>
    1948:	e7ea      	b.n	1920 <Telemetria+0x1d8>
		arch_syscall_invoke1(*(uintptr_t *)&timer, K_SYSCALL_K_TIMER_STOP);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_timer_stop(timer);
    194a:	480b      	ldr	r0, [pc, #44]	; (1978 <Telemetria+0x230>)
    194c:	f014 fc86 	bl	1625c <z_impl_k_timer_stop>
			}
	}
	k_timer_stop(&my_timer);
}
    1950:	b007      	add	sp, #28
    1952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1956:	bf00      	nop
    1958:	cb923a2a 	.word	0xcb923a2a
    195c:	4038e87f 	.word	0x4038e87f
    1960:	00000000 	.word	0x00000000
    1964:	40c99980 	.word	0x40c99980
    1968:	cb923a2a 	.word	0xcb923a2a
    196c:	4028e87f 	.word	0x4028e87f
    1970:	000166f0 	.word	0x000166f0
    1974:	20002fbd 	.word	0x20002fbd
    1978:	20000548 	.word	0x20000548
    197c:	c2700000 	.word	0xc2700000
    1980:	42c80000 	.word	0x42c80000
    1984:	20002fbe 	.word	0x20002fbe
    1988:	20000a60 	.word	0x20000a60
    198c:	20000f00 	.word	0x20000f00
    1990:	20002fbc 	.word	0x20002fbc
    1994:	20000f04 	.word	0x20000f04
    1998:	20000328 	.word	0x20000328
    199c:	20001504 	.word	0x20001504
    19a0:	20000008 	.word	0x20000008
    19a4:	40590000 	.word	0x40590000
    19a8:	200015b0 	.word	0x200015b0
    19ac:	42700000 	.word	0x42700000
    19b0:	41a00000 	.word	0x41a00000
    19b4:	c1a00000 	.word	0xc1a00000

000019b8 <main>:
#include  "protocol-usb.h"
#include  "sensor_controller.h"


void main(void)
{	
    19b8:	b508      	push	{r3, lr}
	// NRF_USBD_Type 
	// DT_N_S_soc_S_uart_40002000_P_rx_pull_up
	// NRF_USBD->USBPULLUP =  USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
	ConfigureUSB(); // COMUNICAÇÃO UART VIA USB
    19ba:	f000 f88d 	bl	1ad8 <ConfigureUSB>
	ConfigureLFS(); // SISTEMA DE ARQUIVOS
    19be:	f000 fad3 	bl	1f68 <ConfigureLFS>
	ConfigureSDP(); // SENSOR DE PRESÃO DIFERENCIAL SDP
    19c2:	f000 f859 	bl	1a78 <ConfigureSDP>
	ConfigurePin(); // PINO DO LED
    19c6:	f000 fab3 	bl	1f30 <ConfigurePin>
	ConfigureTimer(); // timer
    19ca:	f000 fa19 	bl	1e00 <ConfigureTimer>


	Readdata(0); // offset LPS
    19ce:	2000      	movs	r0, #0
    19d0:	f000 fb8e 	bl	20f0 <Readdata>
	Readdata(1); // Tabela de fluxo HSC
    19d4:	2001      	movs	r0, #1
    19d6:	f000 fb8b 	bl	20f0 <Readdata>
	Readdata(2); // Tabela de fluxo SDP
    19da:	2002      	movs	r0, #2
    19dc:	f000 fb88 	bl	20f0 <Readdata>
	Readdata(3); // pontos FIO2
    19e0:	2003      	movs	r0, #3
    19e2:	f000 fb85 	bl	20f0 <Readdata>
    19e6:	e00b      	b.n	1a00 <main+0x48>

	while(1){
		if(uart_irq_rx_ready(uart_dev)){
			ReadMsg();
    19e8:	f000 f9ac 	bl	1d44 <ReadMsg>
		}
		if(flagCE){
    19ec:	4b09      	ldr	r3, [pc, #36]	; (1a14 <main+0x5c>)
    19ee:	781b      	ldrb	r3, [r3, #0]
    19f0:	b10b      	cbz	r3, 19f6 <main+0x3e>
			Telemetria();
    19f2:	f7ff fea9 	bl	1748 <Telemetria>
	return z_impl_k_sleep(timeout);
    19f6:	f640 40cd 	movw	r0, #3277	; 0xccd
    19fa:	2100      	movs	r1, #0
    19fc:	f00e ffe6 	bl	109cc <z_impl_k_sleep>
		if(uart_irq_rx_ready(uart_dev)){
    1a00:	4b05      	ldr	r3, [pc, #20]	; (1a18 <main+0x60>)
    1a02:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    1a04:	6883      	ldr	r3, [r0, #8]
	if (api->irq_rx_ready == NULL) {
    1a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    1a08:	2b00      	cmp	r3, #0
    1a0a:	d0ed      	beq.n	19e8 <main+0x30>
	return api->irq_rx_ready(dev);
    1a0c:	4798      	blx	r3
    1a0e:	2800      	cmp	r0, #0
    1a10:	d0ec      	beq.n	19ec <main+0x34>
    1a12:	e7e9      	b.n	19e8 <main+0x30>
    1a14:	20002fbc 	.word	0x20002fbc
    1a18:	20000f00 	.word	0x20000f00

00001a1c <ReadSensorI2C>:
static int ReadSensorI2C( uint8_t *buf, uint16_t addr, uint8_t len){
    1a1c:	b510      	push	{r4, lr}
    1a1e:	b084      	sub	sp, #16
    1a20:	4604      	mov	r4, r0
    1a22:	460b      	mov	r3, r1
    return i2c_read(i2c_dev ,buf ,len ,addr);
    1a24:	4906      	ldr	r1, [pc, #24]	; (1a40 <ReadSensorI2C+0x24>)
    1a26:	6808      	ldr	r0, [r1, #0]
static inline int i2c_read(const struct device *dev, uint8_t *buf,
			   uint32_t num_bytes, uint16_t addr)
{
	struct i2c_msg msg;

	msg.buf = buf;
    1a28:	9401      	str	r4, [sp, #4]
	msg.len = num_bytes;
    1a2a:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_READ | I2C_MSG_STOP;
    1a2c:	2203      	movs	r2, #3
    1a2e:	f88d 200c 	strb.w	r2, [sp, #12]
	const struct i2c_driver_api *api =
    1a32:	6882      	ldr	r2, [r0, #8]
	return api->transfer(dev, msgs, num_msgs, addr);
    1a34:	6854      	ldr	r4, [r2, #4]
    1a36:	2201      	movs	r2, #1
    1a38:	a901      	add	r1, sp, #4
    1a3a:	47a0      	blx	r4
}
    1a3c:	b004      	add	sp, #16
    1a3e:	bd10      	pop	{r4, pc}
    1a40:	20000000 	.word	0x20000000

00001a44 <WriteSensorI2C>:
static int WriteSensorI2C( uint8_t *buf, uint16_t addr, uint8_t len){
    1a44:	b510      	push	{r4, lr}
    1a46:	b084      	sub	sp, #16
    1a48:	4604      	mov	r4, r0
    1a4a:	460b      	mov	r3, r1
    return i2c_write(i2c_dev ,buf ,len ,addr);
    1a4c:	4906      	ldr	r1, [pc, #24]	; (1a68 <WriteSensorI2C+0x24>)
    1a4e:	6808      	ldr	r0, [r1, #0]
	msg.buf = (uint8_t *)buf;
    1a50:	9401      	str	r4, [sp, #4]
	msg.len = num_bytes;
    1a52:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    1a54:	2202      	movs	r2, #2
    1a56:	f88d 200c 	strb.w	r2, [sp, #12]
	const struct i2c_driver_api *api =
    1a5a:	6882      	ldr	r2, [r0, #8]
	return api->transfer(dev, msgs, num_msgs, addr);
    1a5c:	6854      	ldr	r4, [r2, #4]
    1a5e:	2201      	movs	r2, #1
    1a60:	a901      	add	r1, sp, #4
    1a62:	47a0      	blx	r4
}
    1a64:	b004      	add	sp, #16
    1a66:	bd10      	pop	{r4, pc}
    1a68:	20000000 	.word	0x20000000

00001a6c <ExpiryF>:

	void ExpiryF(struct k_timer *timer_id){
		flagTimer1 = 1;
    1a6c:	4b01      	ldr	r3, [pc, #4]	; (1a74 <ExpiryF+0x8>)
    1a6e:	2201      	movs	r2, #1
    1a70:	701a      	strb	r2, [r3, #0]
	}
    1a72:	4770      	bx	lr
    1a74:	20002fbd 	.word	0x20002fbd

00001a78 <ConfigureSDP>:
void ConfigureSDP(){
    1a78:	b500      	push	{lr}
    1a7a:	b085      	sub	sp, #20
	    char temp[9] = {0};
    1a7c:	2300      	movs	r3, #0
    1a7e:	9301      	str	r3, [sp, #4]
    1a80:	9302      	str	r3, [sp, #8]
    1a82:	f88d 300c 	strb.w	r3, [sp, #12]
		char buf[2]={0x36,0x1e};
    1a86:	f641 6336 	movw	r3, #7734	; 0x1e36
    1a8a:	f8ad 3000 	strh.w	r3, [sp]
		WriteSensorI2C(buf,ADDRESS_SDP31,2);
    1a8e:	2202      	movs	r2, #2
    1a90:	2121      	movs	r1, #33	; 0x21
    1a92:	4668      	mov	r0, sp
    1a94:	f7ff ffd6 	bl	1a44 <WriteSensorI2C>
    1a98:	f44f 7024 	mov.w	r0, #656	; 0x290
    1a9c:	2100      	movs	r1, #0
    1a9e:	f00e ff95 	bl	109cc <z_impl_k_sleep>
		ReadSensorI2C(temp,ADDRESS_SDP31,9);
    1aa2:	2209      	movs	r2, #9
    1aa4:	2121      	movs	r1, #33	; 0x21
    1aa6:	a801      	add	r0, sp, #4
    1aa8:	f7ff ffb8 	bl	1a1c <ReadSensorI2C>
	return z_impl_k_usleep(us);
    1aac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1ab0:	f00e ffb8 	bl	10a24 <z_impl_k_usleep>
        escalaBufferSDP = temp[6] << 8 | temp[7];
    1ab4:	f89d 200a 	ldrb.w	r2, [sp, #10]
    1ab8:	f89d 300b 	ldrb.w	r3, [sp, #11]
    1abc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1ac0:	4a04      	ldr	r2, [pc, #16]	; (1ad4 <ConfigureSDP+0x5c>)
    1ac2:	6013      	str	r3, [r2, #0]
    1ac4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1ac8:	f00e ffac 	bl	10a24 <z_impl_k_usleep>
}
    1acc:	b005      	add	sp, #20
    1ace:	f85d fb04 	ldr.w	pc, [sp], #4
    1ad2:	bf00      	nop
    1ad4:	20000008 	.word	0x20000008

00001ad8 <ConfigureUSB>:
void ConfigureUSB(){
    1ad8:	b510      	push	{r4, lr}
    1ada:	b082      	sub	sp, #8
	uart_dev = dev;
    1adc:	4819      	ldr	r0, [pc, #100]	; (1b44 <ConfigureUSB+0x6c>)
    1ade:	4b1a      	ldr	r3, [pc, #104]	; (1b48 <ConfigureUSB+0x70>)
    1ae0:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    1ae2:	f013 ff3c 	bl	1595e <z_device_ready>
    1ae6:	b118      	cbz	r0, 1af0 <ConfigureUSB+0x18>
	ret = usb_enable(NULL);
    1ae8:	2000      	movs	r0, #0
    1aea:	f002 fd3b 	bl	4564 <usb_enable>
	if (ret != 0){
    1aee:	b108      	cbz	r0, 1af4 <ConfigureUSB+0x1c>
}
    1af0:	b002      	add	sp, #8
    1af2:	bd10      	pop	{r4, pc}
				 uint32_t size,
				 void *data)
{
	__ASSERT(size < RING_BUFFER_MAX_SIZE, RING_BUFFER_SIZE_ASSERT_MSG);

	memset(buf, 0, sizeof(struct ring_buf));
    1af4:	4c15      	ldr	r4, [pc, #84]	; (1b4c <ConfigureUSB+0x74>)
    1af6:	221c      	movs	r2, #28
    1af8:	2100      	movs	r1, #0
    1afa:	4620      	mov	r0, r4
    1afc:	f011 fb9c 	bl	13238 <memset>
	buf->size = size;
    1b00:	f44f 6380 	mov.w	r3, #1024	; 0x400
    1b04:	6123      	str	r3, [r4, #16]
	buf->buf.buf32 = (uint32_t *)data;
    1b06:	4b12      	ldr	r3, [pc, #72]	; (1b50 <ConfigureUSB+0x78>)
    1b08:	6163      	str	r3, [r4, #20]
	if (is_power_of_two(size)) {
		buf->mask = size - 1U;
    1b0a:	f240 33ff 	movw	r3, #1023	; 0x3ff
    1b0e:	61a3      	str	r3, [r4, #24]
	z_impl_k_busy_wait(usec_to_wait);
    1b10:	4810      	ldr	r0, [pc, #64]	; (1b54 <ConfigureUSB+0x7c>)
    1b12:	f014 fb61 	bl	161d8 <z_impl_k_busy_wait>

static inline int z_impl_uart_line_ctrl_get(const struct device *dev,
					    uint32_t ctrl, uint32_t *val)
{
#ifdef CONFIG_UART_LINE_CTRL
	const struct uart_driver_api *api =
    1b16:	4b0b      	ldr	r3, [pc, #44]	; (1b44 <ConfigureUSB+0x6c>)
    1b18:	689b      	ldr	r3, [r3, #8]
		(const struct uart_driver_api *)dev->api;

	if (api->line_ctrl_get == NULL) {
    1b1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    1b1c:	b11b      	cbz	r3, 1b26 <ConfigureUSB+0x4e>
		return -ENOSYS;
	}
	return api->line_ctrl_get(dev, ctrl, val);
    1b1e:	aa01      	add	r2, sp, #4
    1b20:	2101      	movs	r1, #1
    1b22:	4808      	ldr	r0, [pc, #32]	; (1b44 <ConfigureUSB+0x6c>)
    1b24:	4798      	blx	r3
	const struct uart_driver_api *api =
    1b26:	4b07      	ldr	r3, [pc, #28]	; (1b44 <ConfigureUSB+0x6c>)
    1b28:	689b      	ldr	r3, [r3, #8]
	if (api->irq_rx_enable != NULL) {
    1b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1b2c:	b10b      	cbz	r3, 1b32 <ConfigureUSB+0x5a>
		api->irq_rx_enable(dev);
    1b2e:	4805      	ldr	r0, [pc, #20]	; (1b44 <ConfigureUSB+0x6c>)
    1b30:	4798      	blx	r3
	const struct uart_driver_api *api =
    1b32:	4b04      	ldr	r3, [pc, #16]	; (1b44 <ConfigureUSB+0x6c>)
    1b34:	689b      	ldr	r3, [r3, #8]
	if (api->irq_tx_enable != NULL) {
    1b36:	69db      	ldr	r3, [r3, #28]
    1b38:	2b00      	cmp	r3, #0
    1b3a:	d0d9      	beq.n	1af0 <ConfigureUSB+0x18>
		api->irq_tx_enable(dev);
    1b3c:	4801      	ldr	r0, [pc, #4]	; (1b44 <ConfigureUSB+0x6c>)
    1b3e:	4798      	blx	r3
    1b40:	e7d6      	b.n	1af0 <ConfigureUSB+0x18>
    1b42:	bf00      	nop
    1b44:	00016398 	.word	0x00016398
    1b48:	20000f00 	.word	0x20000f00
    1b4c:	20000ee4 	.word	0x20000ee4
    1b50:	20000ae4 	.word	0x20000ae4
    1b54:	000f4240 	.word	0x000f4240

00001b58 <SendMsg>:
void SendMsg(char*msg1,int len){
    1b58:	b510      	push	{r4, lr}
    1b5a:	b0a2      	sub	sp, #136	; 0x88
    1b5c:	460c      	mov	r4, r1
	  EncapsulationMsgs(msg1,msg3,len);
    1b5e:	460a      	mov	r2, r1
    1b60:	4669      	mov	r1, sp
    1b62:	f00f fc59 	bl	11418 <EncapsulationMsgs>
	  uart_fifo_fill(uart_dev, msg3, len + 4);
    1b66:	4b05      	ldr	r3, [pc, #20]	; (1b7c <SendMsg+0x24>)
    1b68:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    1b6a:	6883      	ldr	r3, [r0, #8]
	if (api->fifo_fill == NULL) {
    1b6c:	695b      	ldr	r3, [r3, #20]
    1b6e:	b113      	cbz	r3, 1b76 <SendMsg+0x1e>
    1b70:	1d22      	adds	r2, r4, #4
	return api->fifo_fill(dev, tx_data, size);
    1b72:	4669      	mov	r1, sp
    1b74:	4798      	blx	r3
}
    1b76:	b022      	add	sp, #136	; 0x88
    1b78:	bd10      	pop	{r4, pc}
    1b7a:	bf00      	nop
    1b7c:	20000f00 	.word	0x20000f00

00001b80 <CMD1>:
void CMD1(char *data){
    1b80:	b500      	push	{lr}
    1b82:	b083      	sub	sp, #12
	char MSG[] = {ACK,data[1],data[2]};
    1b84:	2306      	movs	r3, #6
    1b86:	f88d 3004 	strb.w	r3, [sp, #4]
    1b8a:	7843      	ldrb	r3, [r0, #1]
    1b8c:	f88d 3005 	strb.w	r3, [sp, #5]
    1b90:	7883      	ldrb	r3, [r0, #2]
    1b92:	f88d 3006 	strb.w	r3, [sp, #6]
	SendMsg(MSG,3);
    1b96:	2103      	movs	r1, #3
    1b98:	a801      	add	r0, sp, #4
    1b9a:	f7ff ffdd 	bl	1b58 <SendMsg>
    lenBufferACK = sizeof(MSG);
    1b9e:	2203      	movs	r2, #3
    1ba0:	4b04      	ldr	r3, [pc, #16]	; (1bb4 <CMD1+0x34>)
    1ba2:	701a      	strb	r2, [r3, #0]
	memcpy(bufferACK,MSG,sizeof(MSG));
    1ba4:	a901      	add	r1, sp, #4
    1ba6:	4804      	ldr	r0, [pc, #16]	; (1bb8 <CMD1+0x38>)
    1ba8:	f011 fb22 	bl	131f0 <memcpy>
}
    1bac:	b003      	add	sp, #12
    1bae:	f85d fb04 	ldr.w	pc, [sp], #4
    1bb2:	bf00      	nop
    1bb4:	20002fbe 	.word	0x20002fbe
    1bb8:	20000a60 	.word	0x20000a60

00001bbc <CMD2>:
void CMD2(char *data){
    1bbc:	b500      	push	{lr}
    1bbe:	b083      	sub	sp, #12
    char MSG[] = {ACK, data[1], data[2]};
    1bc0:	7843      	ldrb	r3, [r0, #1]
    1bc2:	f88d 3005 	strb.w	r3, [sp, #5]
    1bc6:	7883      	ldrb	r3, [r0, #2]
    1bc8:	f88d 3006 	strb.w	r3, [sp, #6]
	if(data[2] == 0x12 || data[2] == 0x21){
    1bcc:	2b12      	cmp	r3, #18
    1bce:	d001      	beq.n	1bd4 <CMD2+0x18>
    1bd0:	2b21      	cmp	r3, #33	; 0x21
    1bd2:	d10e      	bne.n	1bf2 <CMD2+0x36>
		if(data[2] == 0x12){
    1bd4:	2b12      	cmp	r3, #18
    1bd6:	d008      	beq.n	1bea <CMD2+0x2e>
			flagCE = 0;	
    1bd8:	4b0a      	ldr	r3, [pc, #40]	; (1c04 <CMD2+0x48>)
    1bda:	2200      	movs	r2, #0
    1bdc:	701a      	strb	r2, [r3, #0]
	lenBufferACK = 0;
    1bde:	4b0a      	ldr	r3, [pc, #40]	; (1c08 <CMD2+0x4c>)
    1be0:	2200      	movs	r2, #0
    1be2:	701a      	strb	r2, [r3, #0]
}
    1be4:	b003      	add	sp, #12
    1be6:	f85d fb04 	ldr.w	pc, [sp], #4
			flagCE = 1;
    1bea:	4b06      	ldr	r3, [pc, #24]	; (1c04 <CMD2+0x48>)
    1bec:	2201      	movs	r2, #1
    1bee:	701a      	strb	r2, [r3, #0]
    1bf0:	e7f5      	b.n	1bde <CMD2+0x22>
		MSG[0] = NACK;
    1bf2:	2315      	movs	r3, #21
    1bf4:	f88d 3004 	strb.w	r3, [sp, #4]
		SendMsg(MSG,3);
    1bf8:	2103      	movs	r1, #3
    1bfa:	a801      	add	r0, sp, #4
    1bfc:	f7ff ffac 	bl	1b58 <SendMsg>
    1c00:	e7ed      	b.n	1bde <CMD2+0x22>
    1c02:	bf00      	nop
    1c04:	20002fbc 	.word	0x20002fbc
    1c08:	20002fbe 	.word	0x20002fbe

00001c0c <CMD5>:
void CMD5(char *data){
    1c0c:	b530      	push	{r4, r5, lr}
    1c0e:	b0a1      	sub	sp, #132	; 0x84
    1c10:	4605      	mov	r5, r0
	char MSG[128] ={0};
    1c12:	2400      	movs	r4, #0
    1c14:	9400      	str	r4, [sp, #0]
    1c16:	227c      	movs	r2, #124	; 0x7c
    1c18:	4621      	mov	r1, r4
    1c1a:	a801      	add	r0, sp, #4
    1c1c:	f011 fb0c 	bl	13238 <memset>
	MSG[0] = ACK;
    1c20:	2306      	movs	r3, #6
    1c22:	f88d 3000 	strb.w	r3, [sp]
	MSG[1] = data[1];
    1c26:	786b      	ldrb	r3, [r5, #1]
    1c28:	f88d 3001 	strb.w	r3, [sp, #1]
	for(int i=0;i<43;i++){
    1c2c:	e013      	b.n	1c56 <CMD5+0x4a>
			aux = (tabela_HSC[i]*1000)/1;
    1c2e:	491b      	ldr	r1, [pc, #108]	; (1c9c <CMD5+0x90>)
    1c30:	4b1b      	ldr	r3, [pc, #108]	; (1ca0 <CMD5+0x94>)
    1c32:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    1c36:	f7ff f817 	bl	c68 <__aeabi_fmul>
    1c3a:	f7ff f9db 	bl	ff4 <__aeabi_f2iz>
		MSG[i*3+3] = aux>>8;
    1c3e:	1202      	asrs	r2, r0, #8
    1c40:	3401      	adds	r4, #1
    1c42:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    1c46:	a920      	add	r1, sp, #128	; 0x80
    1c48:	440b      	add	r3, r1
    1c4a:	f803 2c80 	strb.w	r2, [r3, #-128]
		MSG[i*3+4] = aux & 0x00FF;
    1c4e:	3504      	adds	r5, #4
    1c50:	440d      	add	r5, r1
    1c52:	f805 0c80 	strb.w	r0, [r5, #-128]
	for(int i=0;i<43;i++){
    1c56:	2c2a      	cmp	r4, #42	; 0x2a
    1c58:	dc13      	bgt.n	1c82 <CMD5+0x76>
		MSG[i*3+2] = tabflow[i];
    1c5a:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    1c5e:	1cab      	adds	r3, r5, #2
    1c60:	4a10      	ldr	r2, [pc, #64]	; (1ca4 <CMD5+0x98>)
    1c62:	5d12      	ldrb	r2, [r2, r4]
    1c64:	a920      	add	r1, sp, #128	; 0x80
    1c66:	440b      	add	r3, r1
    1c68:	f803 2c80 	strb.w	r2, [r3, #-128]
		if(i < 29){
    1c6c:	2c1c      	cmp	r4, #28
    1c6e:	dcde      	bgt.n	1c2e <CMD5+0x22>
			aux = (tabela_SDP[i]*1000)/1;
    1c70:	490a      	ldr	r1, [pc, #40]	; (1c9c <CMD5+0x90>)
    1c72:	4b0d      	ldr	r3, [pc, #52]	; (1ca8 <CMD5+0x9c>)
    1c74:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    1c78:	f7fe fff6 	bl	c68 <__aeabi_fmul>
    1c7c:	f7ff f9ba 	bl	ff4 <__aeabi_f2iz>
    1c80:	e7dd      	b.n	1c3e <CMD5+0x32>
	SendMsg(MSG,128);
    1c82:	2180      	movs	r1, #128	; 0x80
    1c84:	4668      	mov	r0, sp
    1c86:	f7ff ff67 	bl	1b58 <SendMsg>
    lenBufferACK = sizeof(MSG);
    1c8a:	2280      	movs	r2, #128	; 0x80
    1c8c:	4b07      	ldr	r3, [pc, #28]	; (1cac <CMD5+0xa0>)
    1c8e:	701a      	strb	r2, [r3, #0]
	memcpy(bufferACK,MSG,sizeof(MSG));
    1c90:	4669      	mov	r1, sp
    1c92:	4807      	ldr	r0, [pc, #28]	; (1cb0 <CMD5+0xa4>)
    1c94:	f011 faac 	bl	131f0 <memcpy>
}
    1c98:	b021      	add	sp, #132	; 0x84
    1c9a:	bd30      	pop	{r4, r5, pc}
    1c9c:	447a0000 	.word	0x447a0000
    1ca0:	20001504 	.word	0x20001504
    1ca4:	2000000c 	.word	0x2000000c
    1ca8:	200015b0 	.word	0x200015b0
    1cac:	20002fbe 	.word	0x20002fbe
    1cb0:	20000a60 	.word	0x20000a60

00001cb4 <ProceduresMsg>:
void ProceduresMsg(char *data) {
    1cb4:	b510      	push	{r4, lr}
    1cb6:	b082      	sub	sp, #8
	char NAKMSG[] = { 0x15, data[1], data[1] };
    1cb8:	2315      	movs	r3, #21
    1cba:	f88d 3004 	strb.w	r3, [sp, #4]
    1cbe:	7843      	ldrb	r3, [r0, #1]
    1cc0:	f88d 3005 	strb.w	r3, [sp, #5]
    1cc4:	461a      	mov	r2, r3
    1cc6:	f88d 3006 	strb.w	r3, [sp, #6]
	switch (data[0]) {
    1cca:	7803      	ldrb	r3, [r0, #0]
    1ccc:	2b20      	cmp	r3, #32
    1cce:	d019      	beq.n	1d04 <ProceduresMsg+0x50>
    1cd0:	d80a      	bhi.n	1ce8 <ProceduresMsg+0x34>
    1cd2:	2b06      	cmp	r3, #6
    1cd4:	d021      	beq.n	1d1a <ProceduresMsg+0x66>
    1cd6:	2b15      	cmp	r3, #21
    1cd8:	d124      	bne.n	1d24 <ProceduresMsg+0x70>
		if (lenBufferACK != 0)
    1cda:	4b16      	ldr	r3, [pc, #88]	; (1d34 <ProceduresMsg+0x80>)
    1cdc:	781b      	ldrb	r3, [r3, #0]
    1cde:	b1fb      	cbz	r3, 1d20 <ProceduresMsg+0x6c>
			ProceduresMsg(bufferACK);
    1ce0:	4815      	ldr	r0, [pc, #84]	; (1d38 <ProceduresMsg+0x84>)
    1ce2:	f7ff ffe7 	bl	1cb4 <ProceduresMsg>
    1ce6:	e01b      	b.n	1d20 <ProceduresMsg+0x6c>
	switch (data[0]) {
    1ce8:	2b40      	cmp	r3, #64	; 0x40
    1cea:	d11b      	bne.n	1d24 <ProceduresMsg+0x70>
		if (lenBufferACK != 0)
    1cec:	4b11      	ldr	r3, [pc, #68]	; (1d34 <ProceduresMsg+0x80>)
    1cee:	7819      	ldrb	r1, [r3, #0]
    1cf0:	b1b1      	cbz	r1, 1d20 <ProceduresMsg+0x6c>
			SendMsg(bufferACK,lenBufferACK);
    1cf2:	4811      	ldr	r0, [pc, #68]	; (1d38 <ProceduresMsg+0x84>)
    1cf4:	f7ff ff30 	bl	1b58 <SendMsg>
    1cf8:	e012      	b.n	1d20 <ProceduresMsg+0x6c>
				FUNC[f](data);
    1cfa:	4b10      	ldr	r3, [pc, #64]	; (1d3c <ProceduresMsg+0x88>)
    1cfc:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    1d00:	4798      	blx	r3
				break;
    1d02:	e00d      	b.n	1d20 <ProceduresMsg+0x6c>
	switch (data[0]) {
    1d04:	2300      	movs	r3, #0
		for (uint8_t f = 0; f < 6; f++) {
    1d06:	2b05      	cmp	r3, #5
    1d08:	d80a      	bhi.n	1d20 <ProceduresMsg+0x6c>
			if (data[1] == idCMD[f]) {
    1d0a:	461c      	mov	r4, r3
    1d0c:	490c      	ldr	r1, [pc, #48]	; (1d40 <ProceduresMsg+0x8c>)
    1d0e:	5cc9      	ldrb	r1, [r1, r3]
    1d10:	428a      	cmp	r2, r1
    1d12:	d0f2      	beq.n	1cfa <ProceduresMsg+0x46>
		for (uint8_t f = 0; f < 6; f++) {
    1d14:	3301      	adds	r3, #1
    1d16:	b2db      	uxtb	r3, r3
    1d18:	e7f5      	b.n	1d06 <ProceduresMsg+0x52>
		lenBufferACK = 0;
    1d1a:	4b06      	ldr	r3, [pc, #24]	; (1d34 <ProceduresMsg+0x80>)
    1d1c:	2200      	movs	r2, #0
    1d1e:	701a      	strb	r2, [r3, #0]
}
    1d20:	b002      	add	sp, #8
    1d22:	bd10      	pop	{r4, pc}
		SendMsg(NAKMSG, 3);
    1d24:	2103      	movs	r1, #3
    1d26:	a801      	add	r0, sp, #4
    1d28:	f7ff ff16 	bl	1b58 <SendMsg>
		lenBufferACK = 0;
    1d2c:	4b01      	ldr	r3, [pc, #4]	; (1d34 <ProceduresMsg+0x80>)
    1d2e:	2200      	movs	r2, #0
    1d30:	701a      	strb	r2, [r3, #0]
}
    1d32:	e7f5      	b.n	1d20 <ProceduresMsg+0x6c>
    1d34:	20002fbe 	.word	0x20002fbe
    1d38:	20000a60 	.word	0x20000a60
    1d3c:	00016728 	.word	0x00016728
    1d40:	00016740 	.word	0x00016740

00001d44 <ReadMsg>:
void ReadMsg(){
    1d44:	b530      	push	{r4, r5, lr}
    1d46:	b097      	sub	sp, #92	; 0x5c
	size_t len = MIN(ring_buf_space_get(&ringbuf),
    1d48:	482a      	ldr	r0, [pc, #168]	; (1df4 <ReadMsg+0xb0>)
    1d4a:	f010 f9ea 	bl	12122 <ring_buf_space_get>
    1d4e:	283f      	cmp	r0, #63	; 0x3f
    1d50:	d90e      	bls.n	1d70 <ReadMsg+0x2c>
    1d52:	2240      	movs	r2, #64	; 0x40
	rb_len = uart_fifo_read(uart_dev, buffer, len);
    1d54:	4b28      	ldr	r3, [pc, #160]	; (1df8 <ReadMsg+0xb4>)
    1d56:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    1d58:	6883      	ldr	r3, [r0, #8]
	if (api->fifo_read == NULL) {
    1d5a:	699b      	ldr	r3, [r3, #24]
    1d5c:	b16b      	cbz	r3, 1d7a <ReadMsg+0x36>
	return api->fifo_read(dev, rx_data, size);
    1d5e:	a906      	add	r1, sp, #24
    1d60:	4798      	blx	r3
    1d62:	4604      	mov	r4, r0
	if(buffer[0]== 0x7E && buffer[rb_len-1] == 0xFF && rb_len >6){
    1d64:	f89d 3018 	ldrb.w	r3, [sp, #24]
    1d68:	2b7e      	cmp	r3, #126	; 0x7e
    1d6a:	d009      	beq.n	1d80 <ReadMsg+0x3c>
}
    1d6c:	b017      	add	sp, #92	; 0x5c
    1d6e:	bd30      	pop	{r4, r5, pc}
	size_t len = MIN(ring_buf_space_get(&ringbuf),
    1d70:	4820      	ldr	r0, [pc, #128]	; (1df4 <ReadMsg+0xb0>)
    1d72:	f010 f9d6 	bl	12122 <ring_buf_space_get>
    1d76:	4602      	mov	r2, r0
    1d78:	e7ec      	b.n	1d54 <ReadMsg+0x10>
		return -ENOSYS;
    1d7a:	f06f 0457 	mvn.w	r4, #87	; 0x57
    1d7e:	e7f1      	b.n	1d64 <ReadMsg+0x20>
	if(buffer[0]== 0x7E && buffer[rb_len-1] == 0xFF && rb_len >6){
    1d80:	1e63      	subs	r3, r4, #1
    1d82:	aa16      	add	r2, sp, #88	; 0x58
    1d84:	4413      	add	r3, r2
    1d86:	f813 3c40 	ldrb.w	r3, [r3, #-64]
    1d8a:	2bff      	cmp	r3, #255	; 0xff
    1d8c:	d1ee      	bne.n	1d6c <ReadMsg+0x28>
    1d8e:	2c06      	cmp	r4, #6
    1d90:	ddec      	ble.n	1d6c <ReadMsg+0x28>
		memcpy(commandAPayload,&buffer[1],rb_len -4);
    1d92:	1f25      	subs	r5, r4, #4
    1d94:	462a      	mov	r2, r5
    1d96:	f10d 0119 	add.w	r1, sp, #25
    1d9a:	a802      	add	r0, sp, #8
    1d9c:	f011 fa28 	bl	131f0 <memcpy>
		memcpy(crc,&buffer[rb_len-3],2);
    1da0:	1ee1      	subs	r1, r4, #3
    1da2:	2202      	movs	r2, #2
    1da4:	ab06      	add	r3, sp, #24
    1da6:	4419      	add	r1, r3
    1da8:	a801      	add	r0, sp, #4
    1daa:	f011 fa21 	bl	131f0 <memcpy>
		if( crc16calc(commandAPayload,rb_len -4 ) == (crc[0]<<8 | crc[1])){
    1dae:	4629      	mov	r1, r5
    1db0:	a802      	add	r0, sp, #8
    1db2:	f00f fb13 	bl	113dc <crc16calc>
    1db6:	f89d 2004 	ldrb.w	r2, [sp, #4]
    1dba:	f89d 3005 	ldrb.w	r3, [sp, #5]
    1dbe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1dc2:	4298      	cmp	r0, r3
    1dc4:	d011      	beq.n	1dea <ReadMsg+0xa6>
			char NAKMSG[] = {NACK,commandAPayload[1],0x0A};
    1dc6:	2315      	movs	r3, #21
    1dc8:	f88d 3000 	strb.w	r3, [sp]
    1dcc:	f89d 3009 	ldrb.w	r3, [sp, #9]
    1dd0:	f88d 3001 	strb.w	r3, [sp, #1]
    1dd4:	230a      	movs	r3, #10
    1dd6:	f88d 3002 	strb.w	r3, [sp, #2]
			SendMsg(NAKMSG,3);
    1dda:	2103      	movs	r1, #3
    1ddc:	4668      	mov	r0, sp
    1dde:	f7ff febb 	bl	1b58 <SendMsg>
			lenBufferACK = 0;
    1de2:	4b06      	ldr	r3, [pc, #24]	; (1dfc <ReadMsg+0xb8>)
    1de4:	2200      	movs	r2, #0
    1de6:	701a      	strb	r2, [r3, #0]
}
    1de8:	e7c0      	b.n	1d6c <ReadMsg+0x28>
			ProceduresMsg(commandAPayload);
    1dea:	a802      	add	r0, sp, #8
    1dec:	f7ff ff62 	bl	1cb4 <ProceduresMsg>
    1df0:	e7bc      	b.n	1d6c <ReadMsg+0x28>
    1df2:	bf00      	nop
    1df4:	20000ee4 	.word	0x20000ee4
    1df8:	20000f00 	.word	0x20000f00
    1dfc:	20002fbe 	.word	0x20002fbe

00001e00 <ConfigureTimer>:

    void ConfigureTimer(){
    1e00:	b508      	push	{r3, lr}
		k_timer_init(&my_timer, ExpiryF, NULL);
    1e02:	2200      	movs	r2, #0
    1e04:	4902      	ldr	r1, [pc, #8]	; (1e10 <ConfigureTimer+0x10>)
    1e06:	4803      	ldr	r0, [pc, #12]	; (1e14 <ConfigureTimer+0x14>)
    1e08:	f014 fa1c 	bl	16244 <k_timer_init>
    1e0c:	bd08      	pop	{r3, pc}
    1e0e:	bf00      	nop
    1e10:	00001a6d 	.word	0x00001a6d
    1e14:	20000548 	.word	0x20000548

00001e18 <FlowCalc>:

 float MapFloat(float value, float fromLow, float fromHigh, float toLow, float toHigh) {
    return (value - fromLow) * (toHigh - toLow) / (fromHigh - fromLow) + toLow; 
  }

  float FlowCalc(float dpvalue, float tabela_calib[TAMANHO_TABELAS]){
    1e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1e1c:	b082      	sub	sp, #8
    1e1e:	4682      	mov	sl, r0
    1e20:	460d      	mov	r5, r1
    1e22:	4b40      	ldr	r3, [pc, #256]	; (1f24 <FlowCalc+0x10c>)
    1e24:	f8d3 8000 	ldr.w	r8, [r3]
    if(abs(dpvalue) < tabela_calib[1]){
    1e28:	2100      	movs	r1, #0
    1e2a:	f7ff f8d9 	bl	fe0 <__aeabi_fcmpgt>
    1e2e:	b1f8      	cbz	r0, 1e70 <FlowCalc+0x58>
    1e30:	4657      	mov	r7, sl
    1e32:	686c      	ldr	r4, [r5, #4]
    1e34:	4639      	mov	r1, r7
    1e36:	4620      	mov	r0, r4
    1e38:	f7ff f8d2 	bl	fe0 <__aeabi_fcmpgt>
    1e3c:	2800      	cmp	r0, #0
    1e3e:	d06b      	beq.n	1f18 <FlowCalc+0x100>
      if(dpvalue <= 0){
    1e40:	2100      	movs	r1, #0
    1e42:	4650      	mov	r0, sl
    1e44:	f7ff f8b8 	bl	fb8 <__aeabi_fcmple>
    1e48:	b9a8      	cbnz	r0, 1e76 <FlowCalc+0x5e>
        return (MapFloat(abs(dpvalue), 0, tabela_calib[1], tabflow[0], tabflow[1]));
      }
      return (MapFloat(abs(dpvalue), 0, tabela_calib[1], tabflow[0], tabflow[1])*(-1));
    1e4a:	4b37      	ldr	r3, [pc, #220]	; (1f28 <FlowCalc+0x110>)
    1e4c:	785e      	ldrb	r6, [r3, #1]
    1e4e:	7818      	ldrb	r0, [r3, #0]
    1e50:	f7fe feb2 	bl	bb8 <__aeabi_ui2f>
    1e54:	4605      	mov	r5, r0
    1e56:	4630      	mov	r0, r6
    1e58:	f7fe feae 	bl	bb8 <__aeabi_ui2f>
    1e5c:	9000      	str	r0, [sp, #0]
    1e5e:	462b      	mov	r3, r5
    1e60:	4622      	mov	r2, r4
    1e62:	2100      	movs	r1, #0
    1e64:	4638      	mov	r0, r7
    1e66:	f00f faef 	bl	11448 <MapFloat>
    1e6a:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    1e6e:	e056      	b.n	1f1e <FlowCalc+0x106>
    if(abs(dpvalue) < tabela_calib[1]){
    1e70:	f10a 4700 	add.w	r7, sl, #2147483648	; 0x80000000
    1e74:	e7dd      	b.n	1e32 <FlowCalc+0x1a>
        return (MapFloat(abs(dpvalue), 0, tabela_calib[1], tabflow[0], tabflow[1]));
    1e76:	4b2c      	ldr	r3, [pc, #176]	; (1f28 <FlowCalc+0x110>)
    1e78:	785e      	ldrb	r6, [r3, #1]
    1e7a:	7818      	ldrb	r0, [r3, #0]
    1e7c:	f7fe fe9c 	bl	bb8 <__aeabi_ui2f>
    1e80:	4605      	mov	r5, r0
    1e82:	4630      	mov	r0, r6
    1e84:	f7fe fe98 	bl	bb8 <__aeabi_ui2f>
    1e88:	9000      	str	r0, [sp, #0]
    1e8a:	462b      	mov	r3, r5
    1e8c:	4622      	mov	r2, r4
    1e8e:	2100      	movs	r1, #0
    1e90:	4638      	mov	r0, r7
    1e92:	f00f fad9 	bl	11448 <MapFloat>
    1e96:	e042      	b.n	1f1e <FlowCalc+0x106>
    }
    for(int i = 1; i < TAMANHO_TABELAS; i++){
      if(tabela_calib[i] <= abs(dpvalue) && abs(dpvalue) < tabela_calib[i+1]){
        if(dpvalue <= 0){
          return (MapFloat(abs(dpvalue), tabela_calib[i], tabela_calib[i+1], tabflow[i], tabflow[i+1]));
    1e98:	4b23      	ldr	r3, [pc, #140]	; (1f28 <FlowCalc+0x110>)
    1e9a:	1c62      	adds	r2, r4, #1
    1e9c:	5c9d      	ldrb	r5, [r3, r2]
    1e9e:	5d18      	ldrb	r0, [r3, r4]
    1ea0:	f7fe fe8a 	bl	bb8 <__aeabi_ui2f>
    1ea4:	4604      	mov	r4, r0
    1ea6:	4628      	mov	r0, r5
    1ea8:	f7fe fe86 	bl	bb8 <__aeabi_ui2f>
    1eac:	9000      	str	r0, [sp, #0]
    1eae:	4623      	mov	r3, r4
    1eb0:	464a      	mov	r2, r9
    1eb2:	4631      	mov	r1, r6
    1eb4:	4638      	mov	r0, r7
    1eb6:	f00f fac7 	bl	11448 <MapFloat>
    1eba:	e030      	b.n	1f1e <FlowCalc+0x106>
    for(int i = 1; i < TAMANHO_TABELAS; i++){
    1ebc:	3401      	adds	r4, #1
    1ebe:	4544      	cmp	r4, r8
    1ec0:	da2c      	bge.n	1f1c <FlowCalc+0x104>
      if(tabela_calib[i] <= abs(dpvalue) && abs(dpvalue) < tabela_calib[i+1]){
    1ec2:	f855 6024 	ldr.w	r6, [r5, r4, lsl #2]
    1ec6:	4639      	mov	r1, r7
    1ec8:	4630      	mov	r0, r6
    1eca:	f7ff f875 	bl	fb8 <__aeabi_fcmple>
    1ece:	2800      	cmp	r0, #0
    1ed0:	d0f4      	beq.n	1ebc <FlowCalc+0xa4>
    1ed2:	1c63      	adds	r3, r4, #1
    1ed4:	f855 9023 	ldr.w	r9, [r5, r3, lsl #2]
    1ed8:	4639      	mov	r1, r7
    1eda:	4648      	mov	r0, r9
    1edc:	f7ff f880 	bl	fe0 <__aeabi_fcmpgt>
    1ee0:	2800      	cmp	r0, #0
    1ee2:	d0eb      	beq.n	1ebc <FlowCalc+0xa4>
        if(dpvalue <= 0){
    1ee4:	2100      	movs	r1, #0
    1ee6:	4650      	mov	r0, sl
    1ee8:	f7ff f866 	bl	fb8 <__aeabi_fcmple>
    1eec:	2800      	cmp	r0, #0
    1eee:	d1d3      	bne.n	1e98 <FlowCalc+0x80>
        }
        return (MapFloat(abs(dpvalue), tabela_calib[i], tabela_calib[i+1], tabflow[i], tabflow[i+1])*(-1));
    1ef0:	4b0d      	ldr	r3, [pc, #52]	; (1f28 <FlowCalc+0x110>)
    1ef2:	1c62      	adds	r2, r4, #1
    1ef4:	5c9d      	ldrb	r5, [r3, r2]
    1ef6:	5d18      	ldrb	r0, [r3, r4]
    1ef8:	f7fe fe5e 	bl	bb8 <__aeabi_ui2f>
    1efc:	4604      	mov	r4, r0
    1efe:	4628      	mov	r0, r5
    1f00:	f7fe fe5a 	bl	bb8 <__aeabi_ui2f>
    1f04:	9000      	str	r0, [sp, #0]
    1f06:	4623      	mov	r3, r4
    1f08:	464a      	mov	r2, r9
    1f0a:	4631      	mov	r1, r6
    1f0c:	4638      	mov	r0, r7
    1f0e:	f00f fa9b 	bl	11448 <MapFloat>
    1f12:	f100 4000 	add.w	r0, r0, #2147483648	; 0x80000000
    1f16:	e002      	b.n	1f1e <FlowCalc+0x106>
    for(int i = 1; i < TAMANHO_TABELAS; i++){
    1f18:	2401      	movs	r4, #1
    1f1a:	e7d0      	b.n	1ebe <FlowCalc+0xa6>
      }
    }
    return -1;
    1f1c:	4803      	ldr	r0, [pc, #12]	; (1f2c <FlowCalc+0x114>)
  }
    1f1e:	b002      	add	sp, #8
    1f20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1f24:	20000004 	.word	0x20000004
    1f28:	2000000c 	.word	0x2000000c
    1f2c:	bf800000 	.word	0xbf800000

00001f30 <ConfigurePin>:

void ConfigurePin(){
    1f30:	b508      	push	{r3, lr}
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    1f32:	480a      	ldr	r0, [pc, #40]	; (1f5c <ConfigurePin+0x2c>)
    1f34:	f00d fbba 	bl	f6ac <z_impl_device_get_binding>

		dev1 = device_get_binding(LED0);
    1f38:	4b09      	ldr	r3, [pc, #36]	; (1f60 <ConfigurePin+0x30>)
    1f3a:	6018      	str	r0, [r3, #0]
		if (dev1 == NULL) {
    1f3c:	b160      	cbz	r0, 1f58 <ConfigurePin+0x28>
	const struct gpio_driver_api *api =
    1f3e:	6881      	ldr	r1, [r0, #8]
	struct gpio_driver_data *data =
    1f40:	6902      	ldr	r2, [r0, #16]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    1f42:	6813      	ldr	r3, [r2, #0]
    1f44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1f48:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
    1f4a:	680b      	ldr	r3, [r1, #0]
    1f4c:	f240 6201 	movw	r2, #1537	; 0x601
    1f50:	2108      	movs	r1, #8
    1f52:	4798      	blx	r3
			return;
		}

		ret1 = gpio_pin_configure(dev1, PIN, GPIO_OUTPUT_ACTIVE | FLAGS);
    1f54:	4b03      	ldr	r3, [pc, #12]	; (1f64 <ConfigurePin+0x34>)
    1f56:	6018      	str	r0, [r3, #0]
		if (ret1 < 0) {
			return;
		}

    1f58:	bd08      	pop	{r3, pc}
    1f5a:	bf00      	nop
    1f5c:	00016748 	.word	0x00016748
    1f60:	20000f04 	.word	0x20000f04
    1f64:	20000f08 	.word	0x20000f08

00001f68 <ConfigureLFS>:
float tabela_SDP[43]={0}; 
float tabela_FIO2[2]={0};
float offset_LPS[1] = {0};

void ConfigureLFS(void)
{
    1f68:	b570      	push	{r4, r5, r6, lr}
    1f6a:	b086      	sub	sp, #24
		&FS_FSTAB_ENTRY(PARTITION_NODE)
#else
		&lfs_storage_mnt
#endif
		;
	unsigned int id = (uintptr_t)mp->storage_dev;
    1f6c:	4c2b      	ldr	r4, [pc, #172]	; (201c <ConfigureLFS+0xb4>)
    1f6e:	6965      	ldr	r5, [r4, #20]

	struct fs_statvfs sbuf;
	const struct flash_area *pfa;
	int rc;

	snprintf(fnameLPS, sizeof(fnameLPS), "%s/offsetLPS", mp->mnt_point);
    1f70:	68e3      	ldr	r3, [r4, #12]
    1f72:	4a2b      	ldr	r2, [pc, #172]	; (2020 <ConfigureLFS+0xb8>)
    1f74:	21ff      	movs	r1, #255	; 0xff
    1f76:	482b      	ldr	r0, [pc, #172]	; (2024 <ConfigureLFS+0xbc>)
    1f78:	f004 faf2 	bl	6560 <snprintf>
	snprintf(fnameHSC, sizeof(fnameHSC), "%s/tableHSC", mp->mnt_point);
    1f7c:	68e3      	ldr	r3, [r4, #12]
    1f7e:	4a2a      	ldr	r2, [pc, #168]	; (2028 <ConfigureLFS+0xc0>)
    1f80:	21ff      	movs	r1, #255	; 0xff
    1f82:	482a      	ldr	r0, [pc, #168]	; (202c <ConfigureLFS+0xc4>)
    1f84:	f004 faec 	bl	6560 <snprintf>
	snprintf(fnameSDP, sizeof(fnameSDP), "%s/tableSDP", mp->mnt_point);
    1f88:	68e3      	ldr	r3, [r4, #12]
    1f8a:	4a29      	ldr	r2, [pc, #164]	; (2030 <ConfigureLFS+0xc8>)
    1f8c:	21ff      	movs	r1, #255	; 0xff
    1f8e:	4829      	ldr	r0, [pc, #164]	; (2034 <ConfigureLFS+0xcc>)
    1f90:	f004 fae6 	bl	6560 <snprintf>
	snprintf(fnameFIO2, sizeof(fnameFIO2), "%s/tableFIO2", mp->mnt_point);
    1f94:	68e3      	ldr	r3, [r4, #12]
    1f96:	4a28      	ldr	r2, [pc, #160]	; (2038 <ConfigureLFS+0xd0>)
    1f98:	21ff      	movs	r1, #255	; 0xff
    1f9a:	4828      	ldr	r0, [pc, #160]	; (203c <ConfigureLFS+0xd4>)
    1f9c:	f004 fae0 	bl	6560 <snprintf>

	rc = flash_area_open(id, &pfa);
    1fa0:	a901      	add	r1, sp, #4
    1fa2:	b2e8      	uxtb	r0, r5
    1fa4:	f003 fa2e 	bl	5404 <flash_area_open>
	if (rc < 0)return;
    1fa8:	2800      	cmp	r0, #0
    1faa:	db34      	blt.n	2016 <ConfigureLFS+0xae>
	/* Optional wipe flash contents */
	if (IS_ENABLED(CONFIG_APP_WIPE_STORAGE)) {
		rc = flash_area_erase(pfa, 0, pfa->fa_size);
	}

	flash_area_close(pfa);
    1fac:	9801      	ldr	r0, [sp, #4]
    1fae:	f010 ff97 	bl	12ee0 <flash_area_close>

	/* Do not mount if auto-mount has been enabled */
#if !DT_NODE_EXISTS(PARTITION_NODE) ||						\
	!(FSTAB_ENTRY_DT_MOUNT_FLAGS(PARTITION_NODE) & FS_MOUNT_FLAG_AUTOMOUNT)
	rc = fs_mount(mp);
    1fb2:	4620      	mov	r0, r4
    1fb4:	f004 fd90 	bl	6ad8 <fs_mount>
	if (rc < 0) {
    1fb8:	2800      	cmp	r0, #0
    1fba:	db2c      	blt.n	2016 <ConfigureLFS+0xae>
	// printk("%s mount: %d\n", mp->mnt_point, rc);
#else
	// printk("%s automounted\n", mp->mnt_point);
#endif

	rc = fs_statvfs(mp->mnt_point, &sbuf);
    1fbc:	a902      	add	r1, sp, #8
    1fbe:	68e0      	ldr	r0, [r4, #12]
    1fc0:	f004 fd2a 	bl	6a18 <fs_statvfs>
	fREF = mp;
    1fc4:	4b1e      	ldr	r3, [pc, #120]	; (2040 <ConfigureLFS+0xd8>)
    1fc6:	601c      	str	r4, [r3, #0]
 * @param zfp Pointer to file object
 *
 */
static inline void fs_file_t_init(struct fs_file_t *zfp)
{
	*zfp = (struct fs_file_t){ 0 };
    1fc8:	4b1e      	ldr	r3, [pc, #120]	; (2044 <ConfigureLFS+0xdc>)
    1fca:	2400      	movs	r4, #0
    1fcc:	601c      	str	r4, [r3, #0]
    1fce:	605c      	str	r4, [r3, #4]
    1fd0:	609c      	str	r4, [r3, #8]

	fs_file_t_init(&fLPS);

	flagfiles[0] = fs_stat(fnameLPS, &dirent);
    1fd2:	4e1d      	ldr	r6, [pc, #116]	; (2048 <ConfigureLFS+0xe0>)
    1fd4:	4631      	mov	r1, r6
    1fd6:	4813      	ldr	r0, [pc, #76]	; (2024 <ConfigureLFS+0xbc>)
    1fd8:	f004 fcb6 	bl	6948 <fs_stat>
    1fdc:	4d1b      	ldr	r5, [pc, #108]	; (204c <ConfigureLFS+0xe4>)
    1fde:	6028      	str	r0, [r5, #0]
    1fe0:	4b1b      	ldr	r3, [pc, #108]	; (2050 <ConfigureLFS+0xe8>)
    1fe2:	601c      	str	r4, [r3, #0]
    1fe4:	605c      	str	r4, [r3, #4]
    1fe6:	609c      	str	r4, [r3, #8]

	fs_file_t_init(&fHSC);

	flagfiles[1] = fs_stat(fnameHSC, &dirent);
    1fe8:	4631      	mov	r1, r6
    1fea:	4810      	ldr	r0, [pc, #64]	; (202c <ConfigureLFS+0xc4>)
    1fec:	f004 fcac 	bl	6948 <fs_stat>
    1ff0:	6068      	str	r0, [r5, #4]
    1ff2:	4b18      	ldr	r3, [pc, #96]	; (2054 <ConfigureLFS+0xec>)
    1ff4:	601c      	str	r4, [r3, #0]
    1ff6:	605c      	str	r4, [r3, #4]
    1ff8:	609c      	str	r4, [r3, #8]
	
	fs_file_t_init(&fSDP);

	flagfiles[2] = fs_stat(fnameSDP, &dirent);
    1ffa:	4631      	mov	r1, r6
    1ffc:	480d      	ldr	r0, [pc, #52]	; (2034 <ConfigureLFS+0xcc>)
    1ffe:	f004 fca3 	bl	6948 <fs_stat>
    2002:	60a8      	str	r0, [r5, #8]
    2004:	4b14      	ldr	r3, [pc, #80]	; (2058 <ConfigureLFS+0xf0>)
    2006:	601c      	str	r4, [r3, #0]
    2008:	605c      	str	r4, [r3, #4]
    200a:	609c      	str	r4, [r3, #8]
	
	
	fs_file_t_init(&fFIO2);

	flagfiles[3] = fs_stat(fnameFIO2, &dirent);
    200c:	4631      	mov	r1, r6
    200e:	480b      	ldr	r0, [pc, #44]	; (203c <ConfigureLFS+0xd4>)
    2010:	f004 fc9a 	bl	6948 <fs_stat>
    2014:	60e8      	str	r0, [r5, #12]

}
    2016:	b006      	add	sp, #24
    2018:	bd70      	pop	{r4, r5, r6, pc}
    201a:	bf00      	nop
    201c:	20000038 	.word	0x20000038
    2020:	00016750 	.word	0x00016750
    2024:	20001258 	.word	0x20001258
    2028:	00016760 	.word	0x00016760
    202c:	20001158 	.word	0x20001158
    2030:	0001676c 	.word	0x0001676c
    2034:	20001358 	.word	0x20001358
    2038:	00016778 	.word	0x00016778
    203c:	20001058 	.word	0x20001058
    2040:	20001038 	.word	0x20001038
    2044:	2000102c 	.word	0x2000102c
    2048:	20000f0c 	.word	0x20000f0c
    204c:	20001048 	.word	0x20001048
    2050:	20001020 	.word	0x20001020
    2054:	2000103c 	.word	0x2000103c
    2058:	20001014 	.word	0x20001014

0000205c <Savedata>:

void Savedata(int tipo){
    205c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *fname;
	int len = 0;
	float *data;
	int rc;
	
	switch(tipo){
    205e:	2803      	cmp	r0, #3
    2060:	d82d      	bhi.n	20be <Savedata+0x62>
    2062:	e8df f000 	tbb	[pc, r0]
    2066:	1602      	.short	0x1602
    2068:	110c      	.short	0x110c
			fname = fnameHSC;
			len = 43;
			data = tabela_HSC;
			break;
		case 2:
			file = &fSDP;
    206a:	4f15      	ldr	r7, [pc, #84]	; (20c0 <Savedata+0x64>)
    206c:	2601      	movs	r6, #1
    206e:	4915      	ldr	r1, [pc, #84]	; (20c4 <Savedata+0x68>)
    2070:	4d15      	ldr	r5, [pc, #84]	; (20c8 <Savedata+0x6c>)
			data = tabela_FIO2;
			break;
		default:
			return;
	}
	rc = fs_open(file, fname, FS_O_CREATE | FS_O_RDWR);
    2072:	2213      	movs	r2, #19
    2074:	4628      	mov	r0, r5
    2076:	f004 fb3f 	bl	66f8 <fs_open>
	for(int i=0;i<len;i++){
    207a:	2400      	movs	r4, #0
    207c:	e015      	b.n	20aa <Savedata+0x4e>
			data = tabela_SDP;
    207e:	4f13      	ldr	r7, [pc, #76]	; (20cc <Savedata+0x70>)
			len = 43;
    2080:	262b      	movs	r6, #43	; 0x2b
			fname = fnameSDP;
    2082:	4913      	ldr	r1, [pc, #76]	; (20d0 <Savedata+0x74>)
			file = &fSDP;
    2084:	4d13      	ldr	r5, [pc, #76]	; (20d4 <Savedata+0x78>)
			break;
    2086:	e7f4      	b.n	2072 <Savedata+0x16>
			data = tabela_FIO2;
    2088:	4f13      	ldr	r7, [pc, #76]	; (20d8 <Savedata+0x7c>)
			len = 2;
    208a:	2602      	movs	r6, #2
			fname = fnameFIO2;
    208c:	4913      	ldr	r1, [pc, #76]	; (20dc <Savedata+0x80>)
			file = &fFIO2;
    208e:	4d14      	ldr	r5, [pc, #80]	; (20e0 <Savedata+0x84>)
			break;
    2090:	e7ef      	b.n	2072 <Savedata+0x16>
			data = tabela_HSC;
    2092:	4f14      	ldr	r7, [pc, #80]	; (20e4 <Savedata+0x88>)
			len = 43;
    2094:	262b      	movs	r6, #43	; 0x2b
			fname = fnameHSC;
    2096:	4914      	ldr	r1, [pc, #80]	; (20e8 <Savedata+0x8c>)
			file = &fHSC;
    2098:	4d14      	ldr	r5, [pc, #80]	; (20ec <Savedata+0x90>)
    209a:	e7ea      	b.n	2072 <Savedata+0x16>
			rc = fs_write(file, &data[i], sizeof(float));
    209c:	2204      	movs	r2, #4
    209e:	eb07 0184 	add.w	r1, r7, r4, lsl #2
    20a2:	4628      	mov	r0, r5
    20a4:	f004 fbfc 	bl	68a0 <fs_write>
	for(int i=0;i<len;i++){
    20a8:	3401      	adds	r4, #1
    20aa:	42a6      	cmp	r6, r4
    20ac:	dcf6      	bgt.n	209c <Savedata+0x40>
		}
	rc = fs_seek(file, 0, FS_SEEK_SET);
    20ae:	2200      	movs	r2, #0
    20b0:	4611      	mov	r1, r2
    20b2:	4628      	mov	r0, r5
    20b4:	f004 fc1e 	bl	68f4 <fs_seek>
	rc = fs_close(file);
    20b8:	4628      	mov	r0, r5
    20ba:	f004 fb9b 	bl	67f4 <fs_close>


}	
    20be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    20c0:	20001458 	.word	0x20001458
    20c4:	20001258 	.word	0x20001258
    20c8:	2000102c 	.word	0x2000102c
    20cc:	200015b0 	.word	0x200015b0
    20d0:	20001358 	.word	0x20001358
    20d4:	2000103c 	.word	0x2000103c
    20d8:	200014fc 	.word	0x200014fc
    20dc:	20001058 	.word	0x20001058
    20e0:	20001014 	.word	0x20001014
    20e4:	20001504 	.word	0x20001504
    20e8:	20001158 	.word	0x20001158
    20ec:	20001020 	.word	0x20001020

000020f0 <Readdata>:

void Readdata(int tipo){
    20f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct fs_file_t *file;
	char *fname;
	int len = 0;
	float *data;
	int rc;
	switch(tipo){
    20f2:	2803      	cmp	r0, #3
    20f4:	d831      	bhi.n	215a <Readdata+0x6a>
    20f6:	e8df f000 	tbb	[pc, r0]
    20fa:	1802      	.short	0x1802
    20fc:	130e      	.short	0x130e
			fname = fnameHSC;
			len = 43;
			data = tabela_HSC;
			break;
		case 2:
			file = &fSDP;
    20fe:	4f1c      	ldr	r7, [pc, #112]	; (2170 <Readdata+0x80>)
    2100:	2601      	movs	r6, #1
    2102:	491c      	ldr	r1, [pc, #112]	; (2174 <Readdata+0x84>)
    2104:	4d1c      	ldr	r5, [pc, #112]	; (2178 <Readdata+0x88>)
			break;
		default:
			return;
	}

	rc = fs_open(file, fname, FS_O_CREATE | FS_O_RDWR);
    2106:	2213      	movs	r2, #19
    2108:	4628      	mov	r0, r5
    210a:	f004 faf5 	bl	66f8 <fs_open>

	if (rc >= 0) {
    210e:	2800      	cmp	r0, #0
    2110:	db10      	blt.n	2134 <Readdata+0x44>
		for(int i=0;i<len;i++){
    2112:	2400      	movs	r4, #0
    2114:	e017      	b.n	2146 <Readdata+0x56>
			data = tabela_SDP;
    2116:	4f19      	ldr	r7, [pc, #100]	; (217c <Readdata+0x8c>)
			len = 43;
    2118:	262b      	movs	r6, #43	; 0x2b
			fname = fnameSDP;
    211a:	4919      	ldr	r1, [pc, #100]	; (2180 <Readdata+0x90>)
			file = &fSDP;
    211c:	4d19      	ldr	r5, [pc, #100]	; (2184 <Readdata+0x94>)
			break;
    211e:	e7f2      	b.n	2106 <Readdata+0x16>
			data = tabela_FIO2;
    2120:	4f19      	ldr	r7, [pc, #100]	; (2188 <Readdata+0x98>)
			len = 2;
    2122:	2602      	movs	r6, #2
			fname = fnameFIO2;
    2124:	4919      	ldr	r1, [pc, #100]	; (218c <Readdata+0x9c>)
			file = &fFIO2;
    2126:	4d1a      	ldr	r5, [pc, #104]	; (2190 <Readdata+0xa0>)
			break;
    2128:	e7ed      	b.n	2106 <Readdata+0x16>
			data = tabela_HSC;
    212a:	4f1a      	ldr	r7, [pc, #104]	; (2194 <Readdata+0xa4>)
			len = 43;
    212c:	262b      	movs	r6, #43	; 0x2b
			fname = fnameHSC;
    212e:	491a      	ldr	r1, [pc, #104]	; (2198 <Readdata+0xa8>)
			file = &fHSC;
    2130:	4d1a      	ldr	r5, [pc, #104]	; (219c <Readdata+0xac>)
    2132:	e7e8      	b.n	2106 <Readdata+0x16>
			rc = fs_read(file, &data[i], sizeof(float));
		}
	}else{
		for(int i=0;i<len;i++){
    2134:	2400      	movs	r4, #0
    2136:	e018      	b.n	216a <Readdata+0x7a>
			rc = fs_read(file, &data[i], sizeof(float));
    2138:	2204      	movs	r2, #4
    213a:	eb07 0184 	add.w	r1, r7, r4, lsl #2
    213e:	4628      	mov	r0, r5
    2140:	f004 fb84 	bl	684c <fs_read>
		for(int i=0;i<len;i++){
    2144:	3401      	adds	r4, #1
    2146:	42a6      	cmp	r6, r4
    2148:	dcf6      	bgt.n	2138 <Readdata+0x48>
			rc = fs_write(file, &data[i], sizeof(float));
		}
	}
	
	rc = fs_seek(file, 0, FS_SEEK_SET);
    214a:	2200      	movs	r2, #0
    214c:	4611      	mov	r1, r2
    214e:	4628      	mov	r0, r5
    2150:	f004 fbd0 	bl	68f4 <fs_seek>
	rc = fs_close(file);
    2154:	4628      	mov	r0, r5
    2156:	f004 fb4d 	bl	67f4 <fs_close>

}
    215a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			rc = fs_write(file, &data[i], sizeof(float));
    215c:	2204      	movs	r2, #4
    215e:	eb07 0184 	add.w	r1, r7, r4, lsl #2
    2162:	4628      	mov	r0, r5
    2164:	f004 fb9c 	bl	68a0 <fs_write>
		for(int i=0;i<len;i++){
    2168:	3401      	adds	r4, #1
    216a:	42a6      	cmp	r6, r4
    216c:	dcf6      	bgt.n	215c <Readdata+0x6c>
    216e:	e7ec      	b.n	214a <Readdata+0x5a>
    2170:	20001458 	.word	0x20001458
    2174:	20001258 	.word	0x20001258
    2178:	2000102c 	.word	0x2000102c
    217c:	200015b0 	.word	0x200015b0
    2180:	20001358 	.word	0x20001358
    2184:	2000103c 	.word	0x2000103c
    2188:	200014fc 	.word	0x200014fc
    218c:	20001058 	.word	0x20001058
    2190:	20001014 	.word	0x20001014
    2194:	20001504 	.word	0x20001504
    2198:	20001158 	.word	0x20001158
    219c:	20001020 	.word	0x20001020

000021a0 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    21a0:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
    21a2:	680b      	ldr	r3, [r1, #0]
    21a4:	3301      	adds	r3, #1
    21a6:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    21a8:	4b01      	ldr	r3, [pc, #4]	; (21b0 <char_out+0x10>)
    21aa:	681b      	ldr	r3, [r3, #0]
    21ac:	4798      	blx	r3
}
    21ae:	bd08      	pop	{r3, pc}
    21b0:	2000015c 	.word	0x2000015c

000021b4 <__printk_hook_install>:
	_char_out = fn;
    21b4:	4b01      	ldr	r3, [pc, #4]	; (21bc <__printk_hook_install+0x8>)
    21b6:	6018      	str	r0, [r3, #0]
}
    21b8:	4770      	bx	lr
    21ba:	bf00      	nop
    21bc:	2000015c 	.word	0x2000015c

000021c0 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    21c0:	b500      	push	{lr}
    21c2:	b083      	sub	sp, #12
    21c4:	4602      	mov	r2, r0
    21c6:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    21c8:	2100      	movs	r1, #0
    21ca:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    21cc:	a901      	add	r1, sp, #4
    21ce:	4803      	ldr	r0, [pc, #12]	; (21dc <vprintk+0x1c>)
    21d0:	f000 f8c8 	bl	2364 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    21d4:	b003      	add	sp, #12
    21d6:	f85d fb04 	ldr.w	pc, [sp], #4
    21da:	bf00      	nop
    21dc:	000021a1 	.word	0x000021a1

000021e0 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    21e0:	b510      	push	{r4, lr}
    21e2:	b084      	sub	sp, #16
    21e4:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    21e6:	9001      	str	r0, [sp, #4]
    21e8:	9102      	str	r1, [sp, #8]
    21ea:	2100      	movs	r1, #0
    21ec:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
    21ee:	a901      	add	r1, sp, #4
    21f0:	4805      	ldr	r0, [pc, #20]	; (2208 <vsnprintk+0x28>)
    21f2:	f000 f8b7 	bl	2364 <cbvprintf>

	if (ctx.count < ctx.max) {
    21f6:	9b03      	ldr	r3, [sp, #12]
    21f8:	9a02      	ldr	r2, [sp, #8]
    21fa:	4293      	cmp	r3, r2
    21fc:	da01      	bge.n	2202 <vsnprintk+0x22>
		str[ctx.count] = '\0';
    21fe:	2200      	movs	r2, #0
    2200:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    2202:	9803      	ldr	r0, [sp, #12]
    2204:	b004      	add	sp, #16
    2206:	bd10      	pop	{r4, pc}
    2208:	000114cd 	.word	0x000114cd

0000220c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    220c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    2210:	b083      	sub	sp, #12
    2212:	4604      	mov	r4, r0
    2214:	4608      	mov	r0, r1
    2216:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2218:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    221a:	f013 0f08 	tst.w	r3, #8
    221e:	d105      	bne.n	222c <process_event+0x20>
    2220:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    2224:	2300      	movs	r3, #0
    2226:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
    2228:	9301      	str	r3, [sp, #4]
}
    222a:	e069      	b.n	2300 <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
    222c:	2901      	cmp	r1, #1
    222e:	d009      	beq.n	2244 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    2230:	f043 0320 	orr.w	r3, r3, #32
    2234:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    2236:	f385 8811 	msr	BASEPRI, r5
    223a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    223e:	b003      	add	sp, #12
    2240:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    2244:	f043 0310 	orr.w	r3, r3, #16
    2248:	8323      	strh	r3, [r4, #24]
    224a:	e7f4      	b.n	2236 <process_event+0x2a>
			evt = process_recheck(mgr);
    224c:	4620      	mov	r0, r4
    224e:	f00f f998 	bl	11582 <process_recheck>
    2252:	e057      	b.n	2304 <process_event+0xf8>
			res = mgr->last_res;
    2254:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
    2258:	464a      	mov	r2, r9
    225a:	4669      	mov	r1, sp
    225c:	4620      	mov	r0, r4
    225e:	f00f f9a9 	bl	115b4 <process_complete>
		onoff_transition_fn transit = NULL;
    2262:	2700      	movs	r7, #0
    2264:	e05a      	b.n	231c <process_event+0x110>
			transit = mgr->transitions->start;
    2266:	6923      	ldr	r3, [r4, #16]
    2268:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
    226a:	2106      	movs	r1, #6
    226c:	4620      	mov	r0, r4
    226e:	f00f f961 	bl	11534 <set_state>
		res = 0;
    2272:	f04f 0900 	mov.w	r9, #0
    2276:	e051      	b.n	231c <process_event+0x110>
			transit = mgr->transitions->stop;
    2278:	6923      	ldr	r3, [r4, #16]
    227a:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
    227c:	2104      	movs	r1, #4
    227e:	4620      	mov	r0, r4
    2280:	f00f f958 	bl	11534 <set_state>
		res = 0;
    2284:	f04f 0900 	mov.w	r9, #0
    2288:	e048      	b.n	231c <process_event+0x110>
			transit = mgr->transitions->reset;
    228a:	6923      	ldr	r3, [r4, #16]
    228c:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
    228e:	2105      	movs	r1, #5
    2290:	4620      	mov	r0, r4
    2292:	f00f f94f 	bl	11534 <set_state>
		res = 0;
    2296:	f04f 0900 	mov.w	r9, #0
    229a:	e03f      	b.n	231c <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
    229c:	2200      	movs	r2, #0
    229e:	e046      	b.n	232e <process_event+0x122>
    22a0:	2200      	movs	r2, #0
    22a2:	e044      	b.n	232e <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    22a4:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
    22a8:	8323      	strh	r3, [r4, #24]
    22aa:	f385 8811 	msr	BASEPRI, r5
    22ae:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    22b2:	2900      	cmp	r1, #0
    22b4:	d144      	bne.n	2340 <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    22b6:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
    22b8:	b12b      	cbz	r3, 22c6 <process_event+0xba>
				notify_all(mgr, &clients, state, res);
    22ba:	464b      	mov	r3, r9
    22bc:	4642      	mov	r2, r8
    22be:	4669      	mov	r1, sp
    22c0:	4620      	mov	r0, r4
    22c2:	f00f f9ed 	bl	116a0 <notify_all>
			if (transit != NULL) {
    22c6:	b117      	cbz	r7, 22ce <process_event+0xc2>
				transit(mgr, transition_complete);
    22c8:	4925      	ldr	r1, [pc, #148]	; (2360 <process_event+0x154>)
    22ca:	4620      	mov	r0, r4
    22cc:	47b8      	blx	r7
	__asm__ volatile(
    22ce:	f04f 0320 	mov.w	r3, #32
    22d2:	f3ef 8511 	mrs	r5, BASEPRI
    22d6:	f383 8812 	msr	BASEPRI_MAX, r3
    22da:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    22de:	8b23      	ldrh	r3, [r4, #24]
    22e0:	f023 0308 	bic.w	r3, r3, #8
    22e4:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    22e6:	8b23      	ldrh	r3, [r4, #24]
    22e8:	f013 0f10 	tst.w	r3, #16
    22ec:	d02e      	beq.n	234c <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    22ee:	f023 0310 	bic.w	r3, r3, #16
    22f2:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    22f4:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    22f6:	8b26      	ldrh	r6, [r4, #24]
    22f8:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
    22fc:	2800      	cmp	r0, #0
    22fe:	d09a      	beq.n	2236 <process_event+0x2a>
		if (evt == EVT_RECHECK) {
    2300:	2802      	cmp	r0, #2
    2302:	d0a3      	beq.n	224c <process_event+0x40>
		if (evt == EVT_NOP) {
    2304:	2800      	cmp	r0, #0
    2306:	d096      	beq.n	2236 <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
    2308:	2801      	cmp	r0, #1
    230a:	d0a3      	beq.n	2254 <process_event+0x48>
		} else if (evt == EVT_START) {
    230c:	2803      	cmp	r0, #3
    230e:	d0aa      	beq.n	2266 <process_event+0x5a>
		} else if (evt == EVT_STOP) {
    2310:	2804      	cmp	r0, #4
    2312:	d0b1      	beq.n	2278 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
    2314:	2805      	cmp	r0, #5
    2316:	d0b8      	beq.n	228a <process_event+0x7e>
		onoff_transition_fn transit = NULL;
    2318:	2700      	movs	r7, #0
		res = 0;
    231a:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    231c:	8b23      	ldrh	r3, [r4, #24]
    231e:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    2322:	45b0      	cmp	r8, r6
    2324:	d0ba      	beq.n	229c <process_event+0x90>
    2326:	68a2      	ldr	r2, [r4, #8]
    2328:	2a00      	cmp	r2, #0
    232a:	d0b9      	beq.n	22a0 <process_event+0x94>
    232c:	2201      	movs	r2, #1
		if (do_monitors
    232e:	4611      	mov	r1, r2
    2330:	2a00      	cmp	r2, #0
    2332:	d1b7      	bne.n	22a4 <process_event+0x98>
    2334:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
    2336:	2a00      	cmp	r2, #0
    2338:	d1b4      	bne.n	22a4 <process_event+0x98>
		    || (transit != NULL)) {
    233a:	2f00      	cmp	r7, #0
    233c:	d1b2      	bne.n	22a4 <process_event+0x98>
    233e:	e7d2      	b.n	22e6 <process_event+0xda>
				notify_monitors(mgr, state, res);
    2340:	464a      	mov	r2, r9
    2342:	4641      	mov	r1, r8
    2344:	4620      	mov	r0, r4
    2346:	f00f f8fd 	bl	11544 <notify_monitors>
    234a:	e7b4      	b.n	22b6 <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    234c:	f013 0f20 	tst.w	r3, #32
    2350:	d004      	beq.n	235c <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    2352:	f023 0320 	bic.w	r3, r3, #32
    2356:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
    2358:	2002      	movs	r0, #2
    235a:	e7cc      	b.n	22f6 <process_event+0xea>
		evt = EVT_NOP;
    235c:	2000      	movs	r0, #0
    235e:	e7ca      	b.n	22f6 <process_event+0xea>
    2360:	000116cf 	.word	0x000116cf

00002364 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    2364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2368:	b093      	sub	sp, #76	; 0x4c
    236a:	4606      	mov	r6, r0
    236c:	460d      	mov	r5, r1
    236e:	4692      	mov	sl, r2
    2370:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    2372:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    2374:	f89a 0000 	ldrb.w	r0, [sl]
    2378:	2800      	cmp	r0, #0
    237a:	f000 84d6 	beq.w	2d2a <cbvprintf+0x9c6>
		if (*fp != '%') {
    237e:	2825      	cmp	r0, #37	; 0x25
    2380:	d008      	beq.n	2394 <cbvprintf+0x30>
			OUTC(*fp++);
    2382:	f10a 0a01 	add.w	sl, sl, #1
    2386:	4629      	mov	r1, r5
    2388:	47b0      	blx	r6
    238a:	2800      	cmp	r0, #0
    238c:	f2c0 84ce 	blt.w	2d2c <cbvprintf+0x9c8>
    2390:	3401      	adds	r4, #1
			continue;
    2392:	e7ef      	b.n	2374 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
    2394:	2300      	movs	r3, #0
    2396:	9306      	str	r3, [sp, #24]
    2398:	9307      	str	r3, [sp, #28]
    239a:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
    239c:	9308      	str	r3, [sp, #32]
    239e:	9309      	str	r3, [sp, #36]	; 0x24
    23a0:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
    23a2:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
    23a6:	f89a 3001 	ldrb.w	r3, [sl, #1]
    23aa:	2b25      	cmp	r3, #37	; 0x25
    23ac:	d001      	beq.n	23b2 <cbvprintf+0x4e>
	bool loop = true;
    23ae:	2701      	movs	r7, #1
    23b0:	e02c      	b.n	240c <cbvprintf+0xa8>
		conv->specifier = *sp++;
    23b2:	f10a 0802 	add.w	r8, sl, #2
    23b6:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
    23ba:	e1a8      	b.n	270e <cbvprintf+0x3aa>
			conv->flag_dash = true;
    23bc:	f89d 3020 	ldrb.w	r3, [sp, #32]
    23c0:	f043 0304 	orr.w	r3, r3, #4
    23c4:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
    23c8:	b1ff      	cbz	r7, 240a <cbvprintf+0xa6>
			++sp;
    23ca:	f108 0801 	add.w	r8, r8, #1
    23ce:	e01c      	b.n	240a <cbvprintf+0xa6>
			conv->flag_plus = true;
    23d0:	f89d 3020 	ldrb.w	r3, [sp, #32]
    23d4:	f043 0308 	orr.w	r3, r3, #8
    23d8:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    23dc:	e7f4      	b.n	23c8 <cbvprintf+0x64>
			conv->flag_space = true;
    23de:	f89d 3020 	ldrb.w	r3, [sp, #32]
    23e2:	f043 0310 	orr.w	r3, r3, #16
    23e6:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    23ea:	e7ed      	b.n	23c8 <cbvprintf+0x64>
			conv->flag_hash = true;
    23ec:	f89d 3020 	ldrb.w	r3, [sp, #32]
    23f0:	f043 0320 	orr.w	r3, r3, #32
    23f4:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    23f8:	e7e6      	b.n	23c8 <cbvprintf+0x64>
			conv->flag_zero = true;
    23fa:	f89d 3020 	ldrb.w	r3, [sp, #32]
    23fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    2402:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
    2406:	e7df      	b.n	23c8 <cbvprintf+0x64>
		switch (*sp) {
    2408:	2700      	movs	r7, #0
	} while (loop);
    240a:	b34f      	cbz	r7, 2460 <cbvprintf+0xfc>
		switch (*sp) {
    240c:	f898 3000 	ldrb.w	r3, [r8]
    2410:	3b20      	subs	r3, #32
    2412:	2b10      	cmp	r3, #16
    2414:	d8f8      	bhi.n	2408 <cbvprintf+0xa4>
    2416:	a201      	add	r2, pc, #4	; (adr r2, 241c <cbvprintf+0xb8>)
    2418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    241c:	000023df 	.word	0x000023df
    2420:	00002409 	.word	0x00002409
    2424:	00002409 	.word	0x00002409
    2428:	000023ed 	.word	0x000023ed
    242c:	00002409 	.word	0x00002409
    2430:	00002409 	.word	0x00002409
    2434:	00002409 	.word	0x00002409
    2438:	00002409 	.word	0x00002409
    243c:	00002409 	.word	0x00002409
    2440:	00002409 	.word	0x00002409
    2444:	00002409 	.word	0x00002409
    2448:	000023d1 	.word	0x000023d1
    244c:	00002409 	.word	0x00002409
    2450:	000023bd 	.word	0x000023bd
    2454:	00002409 	.word	0x00002409
    2458:	00002409 	.word	0x00002409
    245c:	000023fb 	.word	0x000023fb
	if (conv->flag_zero && conv->flag_dash) {
    2460:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2464:	f003 0344 	and.w	r3, r3, #68	; 0x44
    2468:	2b44      	cmp	r3, #68	; 0x44
    246a:	d06d      	beq.n	2548 <cbvprintf+0x1e4>
	sp = extract_width(conv, sp);
    246c:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
    2470:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2474:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2478:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
    247c:	f898 3000 	ldrb.w	r3, [r8]
    2480:	2b2a      	cmp	r3, #42	; 0x2a
    2482:	d068      	beq.n	2556 <cbvprintf+0x1f2>
	size_t width = extract_decimal(&sp);
    2484:	a805      	add	r0, sp, #20
    2486:	f00f fd7f 	bl	11f88 <extract_decimal>
	if (sp != wp) {
    248a:	9b05      	ldr	r3, [sp, #20]
    248c:	4598      	cmp	r8, r3
    248e:	d012      	beq.n	24b6 <cbvprintf+0x152>
		conv->width_present = true;
    2490:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2494:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    2498:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
    249c:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
    249e:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
    24a2:	2800      	cmp	r0, #0
    24a4:	db60      	blt.n	2568 <cbvprintf+0x204>
    24a6:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
    24a8:	4313      	orrs	r3, r2
    24aa:	f89d 2020 	ldrb.w	r2, [sp, #32]
    24ae:	f363 0241 	bfi	r2, r3, #1, #1
    24b2:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
    24b6:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
    24b8:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
    24ba:	781b      	ldrb	r3, [r3, #0]
    24bc:	2b2e      	cmp	r3, #46	; 0x2e
    24be:	bf14      	ite	ne
    24c0:	2300      	movne	r3, #0
    24c2:	2301      	moveq	r3, #1
    24c4:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    24c8:	f363 0241 	bfi	r2, r3, #1, #1
    24cc:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
    24d0:	2b00      	cmp	r3, #0
    24d2:	d04b      	beq.n	256c <cbvprintf+0x208>
	++sp;
    24d4:	9b05      	ldr	r3, [sp, #20]
    24d6:	1c5a      	adds	r2, r3, #1
    24d8:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
    24da:	785b      	ldrb	r3, [r3, #1]
    24dc:	2b2a      	cmp	r3, #42	; 0x2a
    24de:	d048      	beq.n	2572 <cbvprintf+0x20e>
	size_t prec = extract_decimal(&sp);
    24e0:	a805      	add	r0, sp, #20
    24e2:	f00f fd51 	bl	11f88 <extract_decimal>
	conv->prec_value = prec;
    24e6:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
    24e8:	f89d 3020 	ldrb.w	r3, [sp, #32]
    24ec:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
    24f0:	2800      	cmp	r0, #0
    24f2:	db47      	blt.n	2584 <cbvprintf+0x220>
    24f4:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
    24f6:	4313      	orrs	r3, r2
    24f8:	f89d 2020 	ldrb.w	r2, [sp, #32]
    24fc:	f363 0241 	bfi	r2, r3, #1, #1
    2500:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
    2504:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
    2508:	f898 3000 	ldrb.w	r3, [r8]
    250c:	3b4c      	subs	r3, #76	; 0x4c
    250e:	2b2e      	cmp	r3, #46	; 0x2e
    2510:	f200 80dc 	bhi.w	26cc <cbvprintf+0x368>
    2514:	e8df f003 	tbb	[pc, r3]
    2518:	dadadaca 	.word	0xdadadaca
    251c:	dadadada 	.word	0xdadadada
    2520:	dadadada 	.word	0xdadadada
    2524:	dadadada 	.word	0xdadadada
    2528:	dadadada 	.word	0xdadadada
    252c:	dadadada 	.word	0xdadadada
    2530:	dadadada 	.word	0xdadadada
    2534:	da6ada38 	.word	0xda6ada38
    2538:	dadada51 	.word	0xdadada51
    253c:	dadadada 	.word	0xdadadada
    2540:	dadadac0 	.word	0xdadadac0
    2544:	dada      	.short	0xdada
    2546:	b6          	.byte	0xb6
    2547:	00          	.byte	0x00
		conv->flag_zero = false;
    2548:	f89d 3020 	ldrb.w	r3, [sp, #32]
    254c:	f36f 1386 	bfc	r3, #6, #1
    2550:	f88d 3020 	strb.w	r3, [sp, #32]
    2554:	e78a      	b.n	246c <cbvprintf+0x108>
		conv->width_star = true;
    2556:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    255a:	f043 0301 	orr.w	r3, r3, #1
    255e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
    2562:	4643      	mov	r3, r8
    2564:	3301      	adds	r3, #1
    2566:	e7a7      	b.n	24b8 <cbvprintf+0x154>
				      || (width != (size_t)conv->width_value));
    2568:	2201      	movs	r2, #1
    256a:	e79d      	b.n	24a8 <cbvprintf+0x144>
		return sp;
    256c:	f8dd 8014 	ldr.w	r8, [sp, #20]
    2570:	e7ca      	b.n	2508 <cbvprintf+0x1a4>
		conv->prec_star = true;
    2572:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2576:	f043 0304 	orr.w	r3, r3, #4
    257a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
    257e:	f102 0801 	add.w	r8, r2, #1
    2582:	e7c1      	b.n	2508 <cbvprintf+0x1a4>
			      || (prec != (size_t)conv->prec_value));
    2584:	2201      	movs	r2, #1
    2586:	e7b6      	b.n	24f6 <cbvprintf+0x192>
		if (*++sp == 'h') {
    2588:	f108 0201 	add.w	r2, r8, #1
    258c:	f898 3001 	ldrb.w	r3, [r8, #1]
    2590:	2b68      	cmp	r3, #104	; 0x68
    2592:	d008      	beq.n	25a6 <cbvprintf+0x242>
			conv->length_mod = LENGTH_H;
    2594:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2598:	2102      	movs	r1, #2
    259a:	f361 03c6 	bfi	r3, r1, #3, #4
    259e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
    25a2:	4690      	mov	r8, r2
    25a4:	e02b      	b.n	25fe <cbvprintf+0x29a>
			conv->length_mod = LENGTH_HH;
    25a6:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    25aa:	2201      	movs	r2, #1
    25ac:	f362 03c6 	bfi	r3, r2, #3, #4
    25b0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
    25b4:	f108 0802 	add.w	r8, r8, #2
    25b8:	e021      	b.n	25fe <cbvprintf+0x29a>
		if (*++sp == 'l') {
    25ba:	f108 0201 	add.w	r2, r8, #1
    25be:	f898 3001 	ldrb.w	r3, [r8, #1]
    25c2:	2b6c      	cmp	r3, #108	; 0x6c
    25c4:	d008      	beq.n	25d8 <cbvprintf+0x274>
			conv->length_mod = LENGTH_L;
    25c6:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    25ca:	2103      	movs	r1, #3
    25cc:	f361 03c6 	bfi	r3, r1, #3, #4
    25d0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
    25d4:	4690      	mov	r8, r2
    25d6:	e012      	b.n	25fe <cbvprintf+0x29a>
			conv->length_mod = LENGTH_LL;
    25d8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    25dc:	2204      	movs	r2, #4
    25de:	f362 03c6 	bfi	r3, r2, #3, #4
    25e2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
    25e6:	f108 0802 	add.w	r8, r8, #2
    25ea:	e008      	b.n	25fe <cbvprintf+0x29a>
		conv->length_mod = LENGTH_J;
    25ec:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    25f0:	2205      	movs	r2, #5
    25f2:	f362 03c6 	bfi	r3, r2, #3, #4
    25f6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    25fa:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
    25fe:	f818 3b01 	ldrb.w	r3, [r8], #1
    2602:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
    2606:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
    260a:	2a37      	cmp	r2, #55	; 0x37
    260c:	f200 8150 	bhi.w	28b0 <cbvprintf+0x54c>
    2610:	e8df f012 	tbh	[pc, r2, lsl #1]
    2614:	014e0126 	.word	0x014e0126
    2618:	014e014e 	.word	0x014e014e
    261c:	01260126 	.word	0x01260126
    2620:	014e0126 	.word	0x014e0126
    2624:	014e014e 	.word	0x014e014e
    2628:	014e014e 	.word	0x014e014e
    262c:	014e014e 	.word	0x014e014e
    2630:	014e014e 	.word	0x014e014e
    2634:	014e014e 	.word	0x014e014e
    2638:	014e014e 	.word	0x014e014e
    263c:	014e014e 	.word	0x014e014e
    2640:	0113014e 	.word	0x0113014e
    2644:	014e014e 	.word	0x014e014e
    2648:	014e014e 	.word	0x014e014e
    264c:	014e014e 	.word	0x014e014e
    2650:	014e014e 	.word	0x014e014e
    2654:	014e0126 	.word	0x014e0126
    2658:	00630113 	.word	0x00630113
    265c:	01260126 	.word	0x01260126
    2660:	014e0126 	.word	0x014e0126
    2664:	014e0063 	.word	0x014e0063
    2668:	014e014e 	.word	0x014e014e
    266c:	012f014e 	.word	0x012f014e
    2670:	013f0113 	.word	0x013f0113
    2674:	014e014e 	.word	0x014e014e
    2678:	014e013f 	.word	0x014e013f
    267c:	014e0113 	.word	0x014e0113
    2680:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
    2684:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2688:	2206      	movs	r2, #6
    268a:	f362 03c6 	bfi	r3, r2, #3, #4
    268e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    2692:	f108 0801 	add.w	r8, r8, #1
		break;
    2696:	e7b2      	b.n	25fe <cbvprintf+0x29a>
		conv->length_mod = LENGTH_T;
    2698:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    269c:	2207      	movs	r2, #7
    269e:	f362 03c6 	bfi	r3, r2, #3, #4
    26a2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    26a6:	f108 0801 	add.w	r8, r8, #1
		break;
    26aa:	e7a8      	b.n	25fe <cbvprintf+0x29a>
		conv->length_mod = LENGTH_UPPER_L;
    26ac:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    26b0:	2208      	movs	r2, #8
    26b2:	f362 03c6 	bfi	r3, r2, #3, #4
    26b6:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
    26ba:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
    26be:	f89d 3020 	ldrb.w	r3, [sp, #32]
    26c2:	f043 0302 	orr.w	r3, r3, #2
    26c6:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
    26ca:	e798      	b.n	25fe <cbvprintf+0x29a>
		conv->length_mod = LENGTH_NONE;
    26cc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    26d0:	f36f 03c6 	bfc	r3, #3, #4
    26d4:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
    26d8:	e791      	b.n	25fe <cbvprintf+0x29a>
		conv->specifier_cat = SPECIFIER_SINT;
    26da:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    26de:	2101      	movs	r1, #1
    26e0:	f361 0202 	bfi	r2, r1, #0, #3
    26e4:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
    26e8:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
    26ec:	f002 0278 	and.w	r2, r2, #120	; 0x78
    26f0:	2a40      	cmp	r2, #64	; 0x40
    26f2:	f000 80aa 	beq.w	284a <cbvprintf+0x4e6>
		if (conv->specifier == 'c') {
    26f6:	2b63      	cmp	r3, #99	; 0x63
    26f8:	f000 80ae 	beq.w	2858 <cbvprintf+0x4f4>
	conv->unsupported |= unsupported;
    26fc:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2700:	f3c3 0240 	ubfx	r2, r3, #1, #1
    2704:	4317      	orrs	r7, r2
    2706:	f367 0341 	bfi	r3, r7, #1, #1
    270a:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
    270e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2712:	f013 0f01 	tst.w	r3, #1
    2716:	f000 80da 	beq.w	28ce <cbvprintf+0x56a>
			width = va_arg(ap, int);
    271a:	9b03      	ldr	r3, [sp, #12]
    271c:	1d1a      	adds	r2, r3, #4
    271e:	9203      	str	r2, [sp, #12]
    2720:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
    2722:	2f00      	cmp	r7, #0
    2724:	f2c0 80cb 	blt.w	28be <cbvprintf+0x55a>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
    2728:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    272c:	f013 0f04 	tst.w	r3, #4
    2730:	f000 80df 	beq.w	28f2 <cbvprintf+0x58e>
			int arg = va_arg(ap, int);
    2734:	9b03      	ldr	r3, [sp, #12]
    2736:	1d1a      	adds	r2, r3, #4
    2738:	9203      	str	r2, [sp, #12]
    273a:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
    273e:	f1bb 0f00 	cmp.w	fp, #0
    2742:	f2c0 80cd 	blt.w	28e0 <cbvprintf+0x57c>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
    2746:	2300      	movs	r3, #0
    2748:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
    274a:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
    274c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    2750:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
    2754:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
    2758:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
    275c:	2b01      	cmp	r3, #1
    275e:	f000 80d1 	beq.w	2904 <cbvprintf+0x5a0>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
    2762:	2b02      	cmp	r3, #2
    2764:	f000 8116 	beq.w	2994 <cbvprintf+0x630>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
    2768:	2b04      	cmp	r3, #4
    276a:	f000 8167 	beq.w	2a3c <cbvprintf+0x6d8>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
    276e:	2b03      	cmp	r3, #3
    2770:	f000 817e 	beq.w	2a70 <cbvprintf+0x70c>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
    2774:	f89d 9020 	ldrb.w	r9, [sp, #32]
    2778:	f019 0303 	ands.w	r3, r9, #3
    277c:	9302      	str	r3, [sp, #8]
    277e:	f040 817d 	bne.w	2a7c <cbvprintf+0x718>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
    2782:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
    2786:	3b25      	subs	r3, #37	; 0x25
    2788:	2b53      	cmp	r3, #83	; 0x53
    278a:	f200 8233 	bhi.w	2bf4 <cbvprintf+0x890>
    278e:	e8df f013 	tbh	[pc, r3, lsl #1]
    2792:	0181      	.short	0x0181
    2794:	02310231 	.word	0x02310231
    2798:	02310231 	.word	0x02310231
    279c:	02310231 	.word	0x02310231
    27a0:	02310231 	.word	0x02310231
    27a4:	02310231 	.word	0x02310231
    27a8:	02310231 	.word	0x02310231
    27ac:	02310231 	.word	0x02310231
    27b0:	02310231 	.word	0x02310231
    27b4:	02310231 	.word	0x02310231
    27b8:	02310231 	.word	0x02310231
    27bc:	02310231 	.word	0x02310231
    27c0:	02310231 	.word	0x02310231
    27c4:	02310231 	.word	0x02310231
    27c8:	02310231 	.word	0x02310231
    27cc:	02310231 	.word	0x02310231
    27d0:	02310231 	.word	0x02310231
    27d4:	02310231 	.word	0x02310231
    27d8:	02310231 	.word	0x02310231
    27dc:	02310231 	.word	0x02310231
    27e0:	02310231 	.word	0x02310231
    27e4:	02310231 	.word	0x02310231
    27e8:	02310231 	.word	0x02310231
    27ec:	02310231 	.word	0x02310231
    27f0:	02310231 	.word	0x02310231
    27f4:	02310231 	.word	0x02310231
    27f8:	023101c7 	.word	0x023101c7
    27fc:	02310231 	.word	0x02310231
    2800:	02310231 	.word	0x02310231
    2804:	02310231 	.word	0x02310231
    2808:	02310231 	.word	0x02310231
    280c:	01a10231 	.word	0x01a10231
    2810:	023101ab 	.word	0x023101ab
    2814:	02310231 	.word	0x02310231
    2818:	01ab0231 	.word	0x01ab0231
    281c:	02310231 	.word	0x02310231
    2820:	02310231 	.word	0x02310231
    2824:	01c70208 	.word	0x01c70208
    2828:	023101ea 	.word	0x023101ea
    282c:	018f0231 	.word	0x018f0231
    2830:	01c70231 	.word	0x01c70231
    2834:	02310231 	.word	0x02310231
    2838:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
    283a:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
    283e:	2102      	movs	r1, #2
    2840:	f361 0202 	bfi	r2, r1, #0, #3
    2844:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
    2848:	e74e      	b.n	26e8 <cbvprintf+0x384>
			conv->invalid = true;
    284a:	f89d 1020 	ldrb.w	r1, [sp, #32]
    284e:	f041 0101 	orr.w	r1, r1, #1
    2852:	f88d 1020 	strb.w	r1, [sp, #32]
    2856:	e74e      	b.n	26f6 <cbvprintf+0x392>
			unsupported = (conv->length_mod != LENGTH_NONE);
    2858:	1e17      	subs	r7, r2, #0
    285a:	bf18      	it	ne
    285c:	2701      	movne	r7, #1
    285e:	e74d      	b.n	26fc <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_FP;
    2860:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    2864:	2204      	movs	r2, #4
    2866:	f362 0302 	bfi	r3, r2, #0, #3
    286a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
    286e:	2701      	movs	r7, #1
			break;
    2870:	e744      	b.n	26fc <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
    2872:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    2876:	2203      	movs	r2, #3
    2878:	f362 0302 	bfi	r3, r2, #0, #3
    287c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
    2880:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2884:	f003 0378 	and.w	r3, r3, #120	; 0x78
    2888:	2b40      	cmp	r3, #64	; 0x40
    288a:	f47f af37 	bne.w	26fc <cbvprintf+0x398>
			unsupported = true;
    288e:	2701      	movs	r7, #1
    2890:	e734      	b.n	26fc <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
    2892:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    2896:	2203      	movs	r2, #3
    2898:	f362 0302 	bfi	r3, r2, #0, #3
    289c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
    28a0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    28a4:	f013 0f78 	tst.w	r3, #120	; 0x78
    28a8:	f43f af28 	beq.w	26fc <cbvprintf+0x398>
			unsupported = true;
    28ac:	2701      	movs	r7, #1
    28ae:	e725      	b.n	26fc <cbvprintf+0x398>
		conv->invalid = true;
    28b0:	f89d 3020 	ldrb.w	r3, [sp, #32]
    28b4:	f043 0301 	orr.w	r3, r3, #1
    28b8:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
    28bc:	e71e      	b.n	26fc <cbvprintf+0x398>
				conv->flag_dash = true;
    28be:	f89d 3020 	ldrb.w	r3, [sp, #32]
    28c2:	f043 0304 	orr.w	r3, r3, #4
    28c6:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
    28ca:	427f      	negs	r7, r7
    28cc:	e72c      	b.n	2728 <cbvprintf+0x3c4>
		} else if (conv->width_present) {
    28ce:	f99d 3020 	ldrsb.w	r3, [sp, #32]
    28d2:	2b00      	cmp	r3, #0
    28d4:	db02      	blt.n	28dc <cbvprintf+0x578>
		int width = -1;
    28d6:	f04f 37ff 	mov.w	r7, #4294967295
    28da:	e725      	b.n	2728 <cbvprintf+0x3c4>
			width = conv->width_value;
    28dc:	9f09      	ldr	r7, [sp, #36]	; 0x24
    28de:	e723      	b.n	2728 <cbvprintf+0x3c4>
				conv->prec_present = false;
    28e0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    28e4:	f36f 0341 	bfc	r3, #1, #1
    28e8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
    28ec:	f04f 3bff 	mov.w	fp, #4294967295
    28f0:	e729      	b.n	2746 <cbvprintf+0x3e2>
		} else if (conv->prec_present) {
    28f2:	f013 0f02 	tst.w	r3, #2
    28f6:	d002      	beq.n	28fe <cbvprintf+0x59a>
			precision = conv->prec_value;
    28f8:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    28fc:	e723      	b.n	2746 <cbvprintf+0x3e2>
		int precision = -1;
    28fe:	f04f 3bff 	mov.w	fp, #4294967295
    2902:	e720      	b.n	2746 <cbvprintf+0x3e2>
			switch (length_mod) {
    2904:	1ecb      	subs	r3, r1, #3
    2906:	2b04      	cmp	r3, #4
    2908:	d804      	bhi.n	2914 <cbvprintf+0x5b0>
    290a:	e8df f003 	tbb	[pc, r3]
    290e:	1d0b      	.short	0x1d0b
    2910:	3529      	.short	0x3529
    2912:	35          	.byte	0x35
    2913:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    2914:	9b03      	ldr	r3, [sp, #12]
    2916:	1d1a      	adds	r2, r3, #4
    2918:	9203      	str	r2, [sp, #12]
    291a:	681a      	ldr	r2, [r3, #0]
    291c:	17d3      	asrs	r3, r2, #31
    291e:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    2922:	e006      	b.n	2932 <cbvprintf+0x5ce>
					value->sint = va_arg(ap, long);
    2924:	9b03      	ldr	r3, [sp, #12]
    2926:	1d1a      	adds	r2, r3, #4
    2928:	9203      	str	r2, [sp, #12]
    292a:	681a      	ldr	r2, [r3, #0]
    292c:	17d3      	asrs	r3, r2, #31
    292e:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    2932:	2901      	cmp	r1, #1
    2934:	d028      	beq.n	2988 <cbvprintf+0x624>
			} else if (length_mod == LENGTH_H) {
    2936:	2902      	cmp	r1, #2
    2938:	f47f af1c 	bne.w	2774 <cbvprintf+0x410>
				value->sint = (short)value->sint;
    293c:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    2940:	17d3      	asrs	r3, r2, #31
    2942:	e9cd 2306 	strd	r2, r3, [sp, #24]
    2946:	e715      	b.n	2774 <cbvprintf+0x410>
					(sint_value_type)va_arg(ap, long long);
    2948:	9b03      	ldr	r3, [sp, #12]
    294a:	3307      	adds	r3, #7
    294c:	f023 0307 	bic.w	r3, r3, #7
    2950:	f103 0208 	add.w	r2, r3, #8
    2954:	9203      	str	r2, [sp, #12]
    2956:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    295a:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    295e:	e7e8      	b.n	2932 <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, intmax_t);
    2960:	9b03      	ldr	r3, [sp, #12]
    2962:	3307      	adds	r3, #7
    2964:	f023 0307 	bic.w	r3, r3, #7
    2968:	f103 0208 	add.w	r2, r3, #8
    296c:	9203      	str	r2, [sp, #12]
    296e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    2972:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    2976:	e7dc      	b.n	2932 <cbvprintf+0x5ce>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    2978:	9b03      	ldr	r3, [sp, #12]
    297a:	1d1a      	adds	r2, r3, #4
    297c:	9203      	str	r2, [sp, #12]
    297e:	681a      	ldr	r2, [r3, #0]
    2980:	17d3      	asrs	r3, r2, #31
				value->sint =
    2982:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    2986:	e7d4      	b.n	2932 <cbvprintf+0x5ce>
				value->sint = (char)value->sint;
    2988:	f89d 3018 	ldrb.w	r3, [sp, #24]
    298c:	9306      	str	r3, [sp, #24]
    298e:	2300      	movs	r3, #0
    2990:	9307      	str	r3, [sp, #28]
    2992:	e6ef      	b.n	2774 <cbvprintf+0x410>
			switch (length_mod) {
    2994:	1ecb      	subs	r3, r1, #3
    2996:	2b04      	cmp	r3, #4
    2998:	d804      	bhi.n	29a4 <cbvprintf+0x640>
    299a:	e8df f003 	tbb	[pc, r3]
    299e:	1f0b      	.short	0x1f0b
    29a0:	4135      	.short	0x4135
    29a2:	41          	.byte	0x41
    29a3:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    29a4:	9b03      	ldr	r3, [sp, #12]
    29a6:	1d1a      	adds	r2, r3, #4
    29a8:	9203      	str	r2, [sp, #12]
    29aa:	681b      	ldr	r3, [r3, #0]
    29ac:	9306      	str	r3, [sp, #24]
    29ae:	2300      	movs	r3, #0
    29b0:	9307      	str	r3, [sp, #28]
				break;
    29b2:	e01e      	b.n	29f2 <cbvprintf+0x68e>
				    && (conv->specifier == 'c')) {
    29b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
    29b8:	2b63      	cmp	r3, #99	; 0x63
    29ba:	d007      	beq.n	29cc <cbvprintf+0x668>
					value->uint = va_arg(ap, unsigned long);
    29bc:	9b03      	ldr	r3, [sp, #12]
    29be:	1d1a      	adds	r2, r3, #4
    29c0:	9203      	str	r2, [sp, #12]
    29c2:	681b      	ldr	r3, [r3, #0]
    29c4:	9306      	str	r3, [sp, #24]
    29c6:	2300      	movs	r3, #0
    29c8:	9307      	str	r3, [sp, #28]
    29ca:	e012      	b.n	29f2 <cbvprintf+0x68e>
					value->uint = (wchar_t)va_arg(ap,
    29cc:	9b03      	ldr	r3, [sp, #12]
    29ce:	1d1a      	adds	r2, r3, #4
    29d0:	9203      	str	r2, [sp, #12]
    29d2:	681b      	ldr	r3, [r3, #0]
    29d4:	9306      	str	r3, [sp, #24]
    29d6:	2300      	movs	r3, #0
    29d8:	9307      	str	r3, [sp, #28]
    29da:	e00a      	b.n	29f2 <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap,
    29dc:	9b03      	ldr	r3, [sp, #12]
    29de:	3307      	adds	r3, #7
    29e0:	f023 0307 	bic.w	r3, r3, #7
    29e4:	f103 0208 	add.w	r2, r3, #8
    29e8:	9203      	str	r2, [sp, #12]
    29ea:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    29ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    29f2:	2901      	cmp	r1, #1
    29f4:	d01c      	beq.n	2a30 <cbvprintf+0x6cc>
			} else if (length_mod == LENGTH_H) {
    29f6:	2902      	cmp	r1, #2
    29f8:	f47f aebc 	bne.w	2774 <cbvprintf+0x410>
				value->uint = (unsigned short)value->uint;
    29fc:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    2a00:	9306      	str	r3, [sp, #24]
    2a02:	2300      	movs	r3, #0
    2a04:	9307      	str	r3, [sp, #28]
    2a06:	e6b5      	b.n	2774 <cbvprintf+0x410>
					(uint_value_type)va_arg(ap,
    2a08:	9b03      	ldr	r3, [sp, #12]
    2a0a:	3307      	adds	r3, #7
    2a0c:	f023 0307 	bic.w	r3, r3, #7
    2a10:	f103 0208 	add.w	r2, r3, #8
    2a14:	9203      	str	r2, [sp, #12]
    2a16:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    2a1a:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    2a1e:	e7e8      	b.n	29f2 <cbvprintf+0x68e>
					(uint_value_type)va_arg(ap, size_t);
    2a20:	9b03      	ldr	r3, [sp, #12]
    2a22:	1d1a      	adds	r2, r3, #4
    2a24:	9203      	str	r2, [sp, #12]
    2a26:	681b      	ldr	r3, [r3, #0]
				value->uint =
    2a28:	9306      	str	r3, [sp, #24]
    2a2a:	2300      	movs	r3, #0
    2a2c:	9307      	str	r3, [sp, #28]
				break;
    2a2e:	e7e0      	b.n	29f2 <cbvprintf+0x68e>
				value->uint = (unsigned char)value->uint;
    2a30:	f89d 3018 	ldrb.w	r3, [sp, #24]
    2a34:	9306      	str	r3, [sp, #24]
    2a36:	2300      	movs	r3, #0
    2a38:	9307      	str	r3, [sp, #28]
    2a3a:	e69b      	b.n	2774 <cbvprintf+0x410>
			if (length_mod == LENGTH_UPPER_L) {
    2a3c:	2908      	cmp	r1, #8
    2a3e:	d00b      	beq.n	2a58 <cbvprintf+0x6f4>
				value->dbl = va_arg(ap, double);
    2a40:	9b03      	ldr	r3, [sp, #12]
    2a42:	3307      	adds	r3, #7
    2a44:	f023 0307 	bic.w	r3, r3, #7
    2a48:	f103 0208 	add.w	r2, r3, #8
    2a4c:	9203      	str	r2, [sp, #12]
    2a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
    2a52:	e9cd 2306 	strd	r2, r3, [sp, #24]
    2a56:	e68d      	b.n	2774 <cbvprintf+0x410>
				value->ldbl = va_arg(ap, long double);
    2a58:	9b03      	ldr	r3, [sp, #12]
    2a5a:	3307      	adds	r3, #7
    2a5c:	f023 0307 	bic.w	r3, r3, #7
    2a60:	f103 0208 	add.w	r2, r3, #8
    2a64:	9203      	str	r2, [sp, #12]
    2a66:	e9d3 2300 	ldrd	r2, r3, [r3]
    2a6a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    2a6e:	e681      	b.n	2774 <cbvprintf+0x410>
			value->ptr = va_arg(ap, void *);
    2a70:	9b03      	ldr	r3, [sp, #12]
    2a72:	1d1a      	adds	r2, r3, #4
    2a74:	9203      	str	r2, [sp, #12]
    2a76:	681b      	ldr	r3, [r3, #0]
    2a78:	9306      	str	r3, [sp, #24]
    2a7a:	e67b      	b.n	2774 <cbvprintf+0x410>
			OUTS(sp, fp);
    2a7c:	4643      	mov	r3, r8
    2a7e:	4652      	mov	r2, sl
    2a80:	4629      	mov	r1, r5
    2a82:	4630      	mov	r0, r6
    2a84:	f00f fafd 	bl	12082 <outs>
    2a88:	2800      	cmp	r0, #0
    2a8a:	f2c0 814f 	blt.w	2d2c <cbvprintf+0x9c8>
    2a8e:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    2a90:	46c2      	mov	sl, r8
			continue;
    2a92:	e46f      	b.n	2374 <cbvprintf+0x10>
		case '%':
			OUTC('%');
    2a94:	4629      	mov	r1, r5
    2a96:	2025      	movs	r0, #37	; 0x25
    2a98:	47b0      	blx	r6
    2a9a:	2800      	cmp	r0, #0
    2a9c:	f2c0 8146 	blt.w	2d2c <cbvprintf+0x9c8>
    2aa0:	3401      	adds	r4, #1
		char sign = 0;
    2aa2:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    2aa6:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    2aaa:	f04f 0a00 	mov.w	sl, #0
			break;
    2aae:	e0a7      	b.n	2c00 <cbvprintf+0x89c>
		case 's': {
			bps = (const char *)value->ptr;
    2ab0:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
    2ab4:	f1bb 0f00 	cmp.w	fp, #0
    2ab8:	db08      	blt.n	2acc <cbvprintf+0x768>
				len = strnlen(bps, precision);
    2aba:	4659      	mov	r1, fp
    2abc:	4650      	mov	r0, sl
    2abe:	f010 fb51 	bl	13164 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    2ac2:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
    2ac6:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
    2aca:	e099      	b.n	2c00 <cbvprintf+0x89c>
				len = strlen(bps);
    2acc:	4650      	mov	r0, sl
    2ace:	f010 fb41 	bl	13154 <strlen>
    2ad2:	e7f6      	b.n	2ac2 <cbvprintf+0x75e>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    2ad4:	9b06      	ldr	r3, [sp, #24]
    2ad6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
    2ada:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
    2ade:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
    2ae2:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
    2ae6:	e08b      	b.n	2c00 <cbvprintf+0x89c>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    2ae8:	f019 0f08 	tst.w	r9, #8
    2aec:	d105      	bne.n	2afa <cbvprintf+0x796>
				sign = '+';
			} else if (conv->flag_space) {
    2aee:	f019 0910 	ands.w	r9, r9, #16
    2af2:	d004      	beq.n	2afe <cbvprintf+0x79a>
				sign = ' ';
    2af4:	f04f 0920 	mov.w	r9, #32
    2af8:	e001      	b.n	2afe <cbvprintf+0x79a>
				sign = '+';
    2afa:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    2afe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
    2b02:	2a00      	cmp	r2, #0
    2b04:	f173 0100 	sbcs.w	r1, r3, #0
    2b08:	db02      	blt.n	2b10 <cbvprintf+0x7ac>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    2b0a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    2b0e:	e009      	b.n	2b24 <cbvprintf+0x7c0>
				value->uint = (uint_value_type)-sint;
    2b10:	4252      	negs	r2, r2
    2b12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    2b16:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
    2b1a:	f04f 092d 	mov.w	r9, #45	; 0x2d
    2b1e:	e001      	b.n	2b24 <cbvprintf+0x7c0>
		switch (conv->specifier) {
    2b20:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    2b24:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    2b28:	9300      	str	r3, [sp, #0]
    2b2a:	ab0c      	add	r3, sp, #48	; 0x30
    2b2c:	aa08      	add	r2, sp, #32
    2b2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    2b32:	f00f fa3c 	bl	11fae <encode_uint>
    2b36:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    2b38:	f1bb 0f00 	cmp.w	fp, #0
    2b3c:	f2c0 8090 	blt.w	2c60 <cbvprintf+0x8fc>
				size_t len = bpe - bps;
    2b40:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    2b44:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    2b48:	f89d 2020 	ldrb.w	r2, [sp, #32]
    2b4c:	f36f 1286 	bfc	r2, #6, #1
    2b50:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    2b54:	459b      	cmp	fp, r3
    2b56:	f240 8086 	bls.w	2c66 <cbvprintf+0x902>
					conv->pad0_value = precision - (int)len;
    2b5a:	ebab 0303 	sub.w	r3, fp, r3
    2b5e:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
    2b60:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    2b64:	e04c      	b.n	2c00 <cbvprintf+0x89c>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    2b66:	9806      	ldr	r0, [sp, #24]
    2b68:	b930      	cbnz	r0, 2b78 <cbvprintf+0x814>
		char sign = 0;
    2b6a:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    2b6e:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 2d34 <cbvprintf+0x9d0>
			bps = "(nil)";
    2b72:	f1ab 0a05 	sub.w	sl, fp, #5
    2b76:	e043      	b.n	2c00 <cbvprintf+0x89c>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2b78:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    2b7c:	9300      	str	r3, [sp, #0]
    2b7e:	ab0c      	add	r3, sp, #48	; 0x30
    2b80:	aa08      	add	r2, sp, #32
    2b82:	2100      	movs	r1, #0
    2b84:	f00f fa13 	bl	11fae <encode_uint>
    2b88:	4682      	mov	sl, r0
				conv->altform_0c = true;
    2b8a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    2b8e:	f043 0310 	orr.w	r3, r3, #16
    2b92:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
    2b96:	2378      	movs	r3, #120	; 0x78
    2b98:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
    2b9c:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
    2ba0:	e7ca      	b.n	2b38 <cbvprintf+0x7d4>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    2ba2:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
    2ba4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    2ba8:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    2bac:	2b07      	cmp	r3, #7
    2bae:	d806      	bhi.n	2bbe <cbvprintf+0x85a>
    2bb0:	e8df f003 	tbb	[pc, r3]
    2bb4:	100e0c04 	.word	0x100e0c04
    2bb8:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
    2bbc:	6014      	str	r4, [r2, #0]
		char sign = 0;
    2bbe:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    2bc2:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    2bc6:	f04f 0a00 	mov.w	sl, #0
}
    2bca:	e019      	b.n	2c00 <cbvprintf+0x89c>
		*(signed char *)dp = (signed char)count;
    2bcc:	7014      	strb	r4, [r2, #0]
		break;
    2bce:	e7f6      	b.n	2bbe <cbvprintf+0x85a>
		*(short *)dp = (short)count;
    2bd0:	8014      	strh	r4, [r2, #0]
		break;
    2bd2:	e7f4      	b.n	2bbe <cbvprintf+0x85a>
		*(long *)dp = (long)count;
    2bd4:	6014      	str	r4, [r2, #0]
		break;
    2bd6:	e7f2      	b.n	2bbe <cbvprintf+0x85a>
		*(long long *)dp = (long long)count;
    2bd8:	4620      	mov	r0, r4
    2bda:	17e1      	asrs	r1, r4, #31
    2bdc:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    2be0:	e7ed      	b.n	2bbe <cbvprintf+0x85a>
		*(intmax_t *)dp = (intmax_t)count;
    2be2:	4620      	mov	r0, r4
    2be4:	17e1      	asrs	r1, r4, #31
    2be6:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    2bea:	e7e8      	b.n	2bbe <cbvprintf+0x85a>
		*(size_t *)dp = (size_t)count;
    2bec:	6014      	str	r4, [r2, #0]
		break;
    2bee:	e7e6      	b.n	2bbe <cbvprintf+0x85a>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    2bf0:	6014      	str	r4, [r2, #0]
		break;
    2bf2:	e7e4      	b.n	2bbe <cbvprintf+0x85a>
		switch (conv->specifier) {
    2bf4:	f8dd 9008 	ldr.w	r9, [sp, #8]
    2bf8:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    2bfc:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    2c00:	f1ba 0f00 	cmp.w	sl, #0
    2c04:	f000 808e 	beq.w	2d24 <cbvprintf+0x9c0>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    2c08:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
    2c0c:	f1b9 0f00 	cmp.w	r9, #0
    2c10:	d000      	beq.n	2c14 <cbvprintf+0x8b0>
			nj_len += 1U;
    2c12:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
    2c14:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
    2c18:	f011 0f10 	tst.w	r1, #16
    2c1c:	d026      	beq.n	2c6c <cbvprintf+0x908>
			nj_len += 2U;
    2c1e:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    2c20:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2c22:	4413      	add	r3, r2
		if (conv->pad_fp) {
    2c24:	f011 0f40 	tst.w	r1, #64	; 0x40
    2c28:	d001      	beq.n	2c2e <cbvprintf+0x8ca>
			nj_len += conv->pad0_pre_exp;
    2c2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    2c2c:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    2c2e:	2f00      	cmp	r7, #0
    2c30:	dd32      	ble.n	2c98 <cbvprintf+0x934>
			width -= (int)nj_len;
    2c32:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    2c34:	f89d 3020 	ldrb.w	r3, [sp, #32]
    2c38:	f013 0f04 	tst.w	r3, #4
    2c3c:	d12c      	bne.n	2c98 <cbvprintf+0x934>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    2c3e:	f013 0f40 	tst.w	r3, #64	; 0x40
    2c42:	d018      	beq.n	2c76 <cbvprintf+0x912>
					if (sign != 0) {
    2c44:	f1b9 0f00 	cmp.w	r9, #0
    2c48:	d018      	beq.n	2c7c <cbvprintf+0x918>
						OUTC(sign);
    2c4a:	4629      	mov	r1, r5
    2c4c:	4648      	mov	r0, r9
    2c4e:	47b0      	blx	r6
    2c50:	2800      	cmp	r0, #0
    2c52:	db6b      	blt.n	2d2c <cbvprintf+0x9c8>
    2c54:	3401      	adds	r4, #1
						sign = 0;
    2c56:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
    2c5a:	2330      	movs	r3, #48	; 0x30
    2c5c:	9302      	str	r3, [sp, #8]
    2c5e:	e00f      	b.n	2c80 <cbvprintf+0x91c>
		const char *bpe = buf + sizeof(buf);
    2c60:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    2c64:	e7cc      	b.n	2c00 <cbvprintf+0x89c>
    2c66:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    2c6a:	e7c9      	b.n	2c00 <cbvprintf+0x89c>
		} else if (conv->altform_0) {
    2c6c:	f011 0f08 	tst.w	r1, #8
    2c70:	d0d6      	beq.n	2c20 <cbvprintf+0x8bc>
			nj_len += 1U;
    2c72:	3201      	adds	r2, #1
    2c74:	e7d4      	b.n	2c20 <cbvprintf+0x8bc>
				char pad = ' ';
    2c76:	2320      	movs	r3, #32
    2c78:	9302      	str	r3, [sp, #8]
    2c7a:	e001      	b.n	2c80 <cbvprintf+0x91c>
					pad = '0';
    2c7c:	2330      	movs	r3, #48	; 0x30
    2c7e:	9302      	str	r3, [sp, #8]
    2c80:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    2c82:	1e5f      	subs	r7, r3, #1
    2c84:	2b00      	cmp	r3, #0
    2c86:	dd07      	ble.n	2c98 <cbvprintf+0x934>
					OUTC(pad);
    2c88:	4629      	mov	r1, r5
    2c8a:	9802      	ldr	r0, [sp, #8]
    2c8c:	47b0      	blx	r6
    2c8e:	2800      	cmp	r0, #0
    2c90:	db4c      	blt.n	2d2c <cbvprintf+0x9c8>
    2c92:	3401      	adds	r4, #1
				while (width-- > 0) {
    2c94:	463b      	mov	r3, r7
    2c96:	e7f4      	b.n	2c82 <cbvprintf+0x91e>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    2c98:	f1b9 0f00 	cmp.w	r9, #0
    2c9c:	d005      	beq.n	2caa <cbvprintf+0x946>
			OUTC(sign);
    2c9e:	4629      	mov	r1, r5
    2ca0:	4648      	mov	r0, r9
    2ca2:	47b0      	blx	r6
    2ca4:	2800      	cmp	r0, #0
    2ca6:	db41      	blt.n	2d2c <cbvprintf+0x9c8>
    2ca8:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    2caa:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    2cae:	f3c3 1200 	ubfx	r2, r3, #4, #1
    2cb2:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    2cb6:	4313      	orrs	r3, r2
    2cb8:	d005      	beq.n	2cc6 <cbvprintf+0x962>
				OUTC('0');
    2cba:	4629      	mov	r1, r5
    2cbc:	2030      	movs	r0, #48	; 0x30
    2cbe:	47b0      	blx	r6
    2cc0:	2800      	cmp	r0, #0
    2cc2:	db33      	blt.n	2d2c <cbvprintf+0x9c8>
    2cc4:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    2cc6:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    2cca:	f013 0f10 	tst.w	r3, #16
    2cce:	d006      	beq.n	2cde <cbvprintf+0x97a>
				OUTC(conv->specifier);
    2cd0:	4629      	mov	r1, r5
    2cd2:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    2cd6:	47b0      	blx	r6
    2cd8:	2800      	cmp	r0, #0
    2cda:	db27      	blt.n	2d2c <cbvprintf+0x9c8>
    2cdc:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    2cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
    2ce0:	f103 39ff 	add.w	r9, r3, #4294967295
    2ce4:	2b00      	cmp	r3, #0
    2ce6:	dd07      	ble.n	2cf8 <cbvprintf+0x994>
				OUTC('0');
    2ce8:	4629      	mov	r1, r5
    2cea:	2030      	movs	r0, #48	; 0x30
    2cec:	47b0      	blx	r6
    2cee:	2800      	cmp	r0, #0
    2cf0:	db1c      	blt.n	2d2c <cbvprintf+0x9c8>
    2cf2:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    2cf4:	464b      	mov	r3, r9
    2cf6:	e7f3      	b.n	2ce0 <cbvprintf+0x97c>
			}

			OUTS(bps, bpe);
    2cf8:	465b      	mov	r3, fp
    2cfa:	4652      	mov	r2, sl
    2cfc:	4629      	mov	r1, r5
    2cfe:	4630      	mov	r0, r6
    2d00:	f00f f9bf 	bl	12082 <outs>
    2d04:	2800      	cmp	r0, #0
    2d06:	db11      	blt.n	2d2c <cbvprintf+0x9c8>
    2d08:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    2d0a:	2f00      	cmp	r7, #0
    2d0c:	dd07      	ble.n	2d1e <cbvprintf+0x9ba>
			OUTC(' ');
    2d0e:	4629      	mov	r1, r5
    2d10:	2020      	movs	r0, #32
    2d12:	47b0      	blx	r6
    2d14:	2800      	cmp	r0, #0
    2d16:	db09      	blt.n	2d2c <cbvprintf+0x9c8>
    2d18:	3401      	adds	r4, #1
			--width;
    2d1a:	3f01      	subs	r7, #1
    2d1c:	e7f5      	b.n	2d0a <cbvprintf+0x9a6>
		fp = extract_conversion(conv, sp);
    2d1e:	46c2      	mov	sl, r8
    2d20:	f7ff bb28 	b.w	2374 <cbvprintf+0x10>
    2d24:	46c2      	mov	sl, r8
    2d26:	f7ff bb25 	b.w	2374 <cbvprintf+0x10>
		}
	}

	return count;
    2d2a:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    2d2c:	b013      	add	sp, #76	; 0x4c
    2d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2d32:	bf00      	nop
    2d34:	00016795 	.word	0x00016795

00002d38 <is_rodata>:
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    2d38:	4b05      	ldr	r3, [pc, #20]	; (2d50 <is_rodata+0x18>)
    2d3a:	4298      	cmp	r0, r3
    2d3c:	d304      	bcc.n	2d48 <is_rodata+0x10>
    2d3e:	4b05      	ldr	r3, [pc, #20]	; (2d54 <is_rodata+0x1c>)
    2d40:	4298      	cmp	r0, r3
    2d42:	d303      	bcc.n	2d4c <is_rodata+0x14>
    2d44:	2000      	movs	r0, #0
    2d46:	4770      	bx	lr
    2d48:	2000      	movs	r0, #0
    2d4a:	4770      	bx	lr
    2d4c:	2001      	movs	r0, #1
		((const char *)addr < (const char *)RO_END));
}
    2d4e:	4770      	bx	lr
    2d50:	000162e8 	.word	0x000162e8
    2d54:	00017fd8 	.word	0x00017fd8

00002d58 <thread_set>:
		}
	}
}

static void thread_set(k_tid_t process_tid)
{
    2d58:	b508      	push	{r3, lr}
	proc_tid = process_tid;
    2d5a:	4b06      	ldr	r3, [pc, #24]	; (2d74 <thread_set+0x1c>)
    2d5c:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    2d5e:	b118      	cbz	r0, 2d68 <thread_set+0x10>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    2d60:	4b05      	ldr	r3, [pc, #20]	; (2d78 <thread_set+0x20>)
    2d62:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
    2d64:	2b09      	cmp	r3, #9
    2d66:	dc00      	bgt.n	2d6a <thread_set+0x12>
		k_sem_give(&log_process_thread_sem);
	}
}
    2d68:	bd08      	pop	{r3, pc}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    2d6a:	4804      	ldr	r0, [pc, #16]	; (2d7c <thread_set+0x24>)
    2d6c:	f00d f8f0 	bl	ff50 <z_impl_k_sem_give>
}
    2d70:	e7fa      	b.n	2d68 <thread_set+0x10>
    2d72:	bf00      	nop
    2d74:	2000168c 	.word	0x2000168c
    2d78:	2000165c 	.word	0x2000165c
    2d7c:	20000440 	.word	0x20000440

00002d80 <log_process_thread_timer_expiry_fn>:
{
	return mpsc_pbuf_is_pending(&log_buffer);
}

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
    2d80:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
    2d82:	4802      	ldr	r0, [pc, #8]	; (2d8c <log_process_thread_timer_expiry_fn+0xc>)
    2d84:	f00d f8e4 	bl	ff50 <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
    2d88:	bd08      	pop	{r3, pc}
    2d8a:	bf00      	nop
    2d8c:	20000440 	.word	0x20000440

00002d90 <next_pending>:
{
    2d90:	b508      	push	{r3, lr}
	return (log_list_head_peek(&list) != NULL);
    2d92:	4803      	ldr	r0, [pc, #12]	; (2da0 <next_pending+0x10>)
    2d94:	f00f faa2 	bl	122dc <log_list_head_peek>
}
    2d98:	3800      	subs	r0, #0
    2d9a:	bf18      	it	ne
    2d9c:	2001      	movne	r0, #1
    2d9e:	bd08      	pop	{r3, pc}
    2da0:	20001668 	.word	0x20001668

00002da4 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    2da4:	b530      	push	{r4, r5, lr}
    2da6:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    2da8:	2200      	movs	r2, #0
    2daa:	490f      	ldr	r1, [pc, #60]	; (2de8 <enable_logger+0x44>)
    2dac:	480f      	ldr	r0, [pc, #60]	; (2dec <enable_logger+0x48>)
    2dae:	f013 fa49 	bl	16244 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    2db2:	4d0f      	ldr	r5, [pc, #60]	; (2df0 <enable_logger+0x4c>)
    2db4:	2200      	movs	r2, #0
    2db6:	2300      	movs	r3, #0
    2db8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    2dbc:	2400      	movs	r4, #0
    2dbe:	9404      	str	r4, [sp, #16]
    2dc0:	230e      	movs	r3, #14
    2dc2:	9303      	str	r3, [sp, #12]
    2dc4:	9402      	str	r4, [sp, #8]
    2dc6:	9401      	str	r4, [sp, #4]
    2dc8:	9400      	str	r4, [sp, #0]
    2dca:	4b0a      	ldr	r3, [pc, #40]	; (2df4 <enable_logger+0x50>)
    2dcc:	f44f 7240 	mov.w	r2, #768	; 0x300
    2dd0:	4909      	ldr	r1, [pc, #36]	; (2df8 <enable_logger+0x54>)
    2dd2:	4628      	mov	r0, r5
    2dd4:	f012 fece 	bl	15b74 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    2dd8:	4908      	ldr	r1, [pc, #32]	; (2dfc <enable_logger+0x58>)
    2dda:	4628      	mov	r0, r5
    2ddc:	f00c feca 	bl	fb74 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    2de0:	4620      	mov	r0, r4
    2de2:	b009      	add	sp, #36	; 0x24
    2de4:	bd30      	pop	{r4, r5, pc}
    2de6:	bf00      	nop
    2de8:	00002d81 	.word	0x00002d81
    2dec:	20000580 	.word	0x20000580
    2df0:	200005b8 	.word	0x200005b8
    2df4:	00003491 	.word	0x00003491
    2df8:	200031a0 	.word	0x200031a0
    2dfc:	00016798 	.word	0x00016798

00002e00 <log_core_init>:
{
    2e00:	b508      	push	{r3, lr}
	panic_mode = false;
    2e02:	2300      	movs	r3, #0
    2e04:	4a0b      	ldr	r2, [pc, #44]	; (2e34 <log_core_init+0x34>)
    2e06:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    2e08:	4a0b      	ldr	r2, [pc, #44]	; (2e38 <log_core_init+0x38>)
    2e0a:	6013      	str	r3, [r2, #0]
		timestamp_func = default_get_timestamp;
    2e0c:	4b0b      	ldr	r3, [pc, #44]	; (2e3c <log_core_init+0x3c>)
    2e0e:	4a0c      	ldr	r2, [pc, #48]	; (2e40 <log_core_init+0x40>)
    2e10:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    2e12:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    2e16:	f000 fdbb 	bl	3990 <log_output_timestamp_freq_set>
		log_msg_pool_init();
    2e1a:	f000 fb9f 	bl	355c <log_msg_pool_init>
		log_list_init(&list);
    2e1e:	4809      	ldr	r0, [pc, #36]	; (2e44 <log_core_init+0x44>)
    2e20:	f00f fa4e 	bl	122c0 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    2e24:	2304      	movs	r3, #4
    2e26:	2228      	movs	r2, #40	; 0x28
    2e28:	4907      	ldr	r1, [pc, #28]	; (2e48 <log_core_init+0x48>)
    2e2a:	4808      	ldr	r0, [pc, #32]	; (2e4c <log_core_init+0x4c>)
    2e2c:	f012 fe3f 	bl	15aae <k_mem_slab_init>
}
    2e30:	bd08      	pop	{r3, pc}
    2e32:	bf00      	nop
    2e34:	20002fc0 	.word	0x20002fc0
    2e38:	20001660 	.word	0x20001660
    2e3c:	20000160 	.word	0x20000160
    2e40:	000122f5 	.word	0x000122f5
    2e44:	20001668 	.word	0x20001668
    2e48:	20005820 	.word	0x20005820
    2e4c:	20001670 	.word	0x20001670

00002e50 <log_init>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    2e50:	4b18      	ldr	r3, [pc, #96]	; (2eb4 <log_init+0x64>)
    2e52:	f3bf 8f5b 	dmb	ish
    2e56:	e853 2f00 	ldrex	r2, [r3]
    2e5a:	1c51      	adds	r1, r2, #1
    2e5c:	e843 1000 	strex	r0, r1, [r3]
    2e60:	2800      	cmp	r0, #0
    2e62:	d1f8      	bne.n	2e56 <log_init+0x6>
    2e64:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    2e68:	bb1a      	cbnz	r2, 2eb2 <log_init+0x62>
{
    2e6a:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < log_backend_count_get(); i++) {
    2e6c:	2400      	movs	r4, #0
    2e6e:	e009      	b.n	2e84 <log_init+0x34>
					   backend->cb->ctx,
    2e70:	4b11      	ldr	r3, [pc, #68]	; (2eb8 <log_init+0x68>)
    2e72:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    2e76:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
    2e78:	2204      	movs	r2, #4
    2e7a:	6819      	ldr	r1, [r3, #0]
    2e7c:	4628      	mov	r0, r5
    2e7e:	f000 fb4b 	bl	3518 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    2e82:	3401      	adds	r4, #1
    2e84:	4b0d      	ldr	r3, [pc, #52]	; (2ebc <log_init+0x6c>)
    2e86:	4a0c      	ldr	r2, [pc, #48]	; (2eb8 <log_init+0x68>)
    2e88:	1a9b      	subs	r3, r3, r2
    2e8a:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    2e8e:	da0f      	bge.n	2eb0 <log_init+0x60>
		const struct log_backend *backend = log_backend_get(i);
    2e90:	4626      	mov	r6, r4
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
    2e92:	4d09      	ldr	r5, [pc, #36]	; (2eb8 <log_init+0x68>)
    2e94:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
    2e98:	7b2b      	ldrb	r3, [r5, #12]
    2e9a:	2b00      	cmp	r3, #0
    2e9c:	d0f1      	beq.n	2e82 <log_init+0x32>
			if (backend->api->init != NULL) {
    2e9e:	0123      	lsls	r3, r4, #4
    2ea0:	4a05      	ldr	r2, [pc, #20]	; (2eb8 <log_init+0x68>)
    2ea2:	58d3      	ldr	r3, [r2, r3]
    2ea4:	699b      	ldr	r3, [r3, #24]
    2ea6:	2b00      	cmp	r3, #0
    2ea8:	d0e2      	beq.n	2e70 <log_init+0x20>
				backend->api->init(backend);
    2eaa:	4628      	mov	r0, r5
    2eac:	4798      	blx	r3
    2eae:	e7df      	b.n	2e70 <log_init+0x20>
}
    2eb0:	bd70      	pop	{r4, r5, r6, pc}
    2eb2:	4770      	bx	lr
    2eb4:	20001664 	.word	0x20001664
    2eb8:	00016660 	.word	0x00016660
    2ebc:	00016680 	.word	0x00016680

00002ec0 <get_msg>:
{
    2ec0:	b510      	push	{r4, lr}
    2ec2:	f04f 0320 	mov.w	r3, #32
    2ec6:	f3ef 8411 	mrs	r4, BASEPRI
    2eca:	f383 8812 	msr	BASEPRI_MAX, r3
    2ece:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
    2ed2:	4804      	ldr	r0, [pc, #16]	; (2ee4 <get_msg+0x24>)
    2ed4:	f00f fa04 	bl	122e0 <log_list_head_get>
	__asm__ volatile(
    2ed8:	f384 8811 	msr	BASEPRI, r4
    2edc:	f3bf 8f6f 	isb	sy
}
    2ee0:	bd10      	pop	{r4, pc}
    2ee2:	bf00      	nop
    2ee4:	20001668 	.word	0x20001668

00002ee8 <z_log_notify_backend_enabled>:
{
    2ee8:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    2eea:	4b05      	ldr	r3, [pc, #20]	; (2f00 <z_log_notify_backend_enabled+0x18>)
    2eec:	781b      	ldrb	r3, [r3, #0]
    2eee:	b11b      	cbz	r3, 2ef8 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
    2ef0:	4b03      	ldr	r3, [pc, #12]	; (2f00 <z_log_notify_backend_enabled+0x18>)
    2ef2:	2201      	movs	r2, #1
    2ef4:	701a      	strb	r2, [r3, #0]
}
    2ef6:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
    2ef8:	4802      	ldr	r0, [pc, #8]	; (2f04 <z_log_notify_backend_enabled+0x1c>)
    2efa:	f00d f829 	bl	ff50 <z_impl_k_sem_give>
}
    2efe:	e7f7      	b.n	2ef0 <z_log_notify_backend_enabled+0x8>
    2f00:	20002fbf 	.word	0x20002fbf
    2f04:	20000440 	.word	0x20000440

00002f08 <z_log_dropped>:
    2f08:	4b0c      	ldr	r3, [pc, #48]	; (2f3c <z_log_dropped+0x34>)
    2f0a:	f3bf 8f5b 	dmb	ish
    2f0e:	e853 2f00 	ldrex	r2, [r3]
    2f12:	3201      	adds	r2, #1
    2f14:	e843 2100 	strex	r1, r2, [r3]
    2f18:	2900      	cmp	r1, #0
    2f1a:	d1f8      	bne.n	2f0e <z_log_dropped+0x6>
    2f1c:	f3bf 8f5b 	dmb	ish
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2f20:	4b07      	ldr	r3, [pc, #28]	; (2f40 <z_log_dropped+0x38>)
    2f22:	f3bf 8f5b 	dmb	ish
    2f26:	e853 2f00 	ldrex	r2, [r3]
    2f2a:	3a01      	subs	r2, #1
    2f2c:	e843 2100 	strex	r1, r2, [r3]
    2f30:	2900      	cmp	r1, #0
    2f32:	d1f8      	bne.n	2f26 <z_log_dropped+0x1e>
    2f34:	f3bf 8f5b 	dmb	ish
}
    2f38:	4770      	bx	lr
    2f3a:	bf00      	nop
    2f3c:	20001660 	.word	0x20001660
    2f40:	2000165c 	.word	0x2000165c

00002f44 <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2f44:	4b06      	ldr	r3, [pc, #24]	; (2f60 <z_log_dropped_read_and_clear+0x1c>)
}
    2f46:	2000      	movs	r0, #0
    2f48:	4602      	mov	r2, r0
    2f4a:	f3bf 8f5b 	dmb	ish
    2f4e:	e853 0f00 	ldrex	r0, [r3]
    2f52:	e843 2100 	strex	r1, r2, [r3]
    2f56:	2900      	cmp	r1, #0
    2f58:	d1f9      	bne.n	2f4e <z_log_dropped_read_and_clear+0xa>
    2f5a:	f3bf 8f5b 	dmb	ish
    2f5e:	4770      	bx	lr
    2f60:	20001660 	.word	0x20001660

00002f64 <dropped_notify>:
{
    2f64:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    2f66:	f7ff ffed 	bl	2f44 <z_log_dropped_read_and_clear>
    2f6a:	4605      	mov	r5, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
    2f6c:	2400      	movs	r4, #0
    2f6e:	e000      	b.n	2f72 <dropped_notify+0xe>
    2f70:	3401      	adds	r4, #1
    2f72:	4b0b      	ldr	r3, [pc, #44]	; (2fa0 <dropped_notify+0x3c>)
    2f74:	4a0b      	ldr	r2, [pc, #44]	; (2fa4 <dropped_notify+0x40>)
    2f76:	1a9b      	subs	r3, r3, r2
    2f78:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    2f7c:	da0f      	bge.n	2f9e <dropped_notify+0x3a>
    2f7e:	4809      	ldr	r0, [pc, #36]	; (2fa4 <dropped_notify+0x40>)
    2f80:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    2f84:	6843      	ldr	r3, [r0, #4]
    2f86:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    2f88:	2b00      	cmp	r3, #0
    2f8a:	d0f1      	beq.n	2f70 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
    2f8c:	0123      	lsls	r3, r4, #4
    2f8e:	4a05      	ldr	r2, [pc, #20]	; (2fa4 <dropped_notify+0x40>)
    2f90:	58d3      	ldr	r3, [r2, r3]
    2f92:	691b      	ldr	r3, [r3, #16]
    2f94:	2b00      	cmp	r3, #0
    2f96:	d0eb      	beq.n	2f70 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
    2f98:	4629      	mov	r1, r5
    2f9a:	4798      	blx	r3
    2f9c:	e7e8      	b.n	2f70 <dropped_notify+0xc>
}
    2f9e:	bd38      	pop	{r3, r4, r5, pc}
    2fa0:	00016680 	.word	0x00016680
    2fa4:	00016660 	.word	0x00016660

00002fa8 <z_log_dropped_pending>:
	return dropped_cnt > 0;
    2fa8:	4b03      	ldr	r3, [pc, #12]	; (2fb8 <z_log_dropped_pending+0x10>)
    2faa:	6818      	ldr	r0, [r3, #0]
}
    2fac:	2800      	cmp	r0, #0
    2fae:	bfd4      	ite	le
    2fb0:	2000      	movle	r0, #0
    2fb2:	2001      	movgt	r0, #1
    2fb4:	4770      	bx	lr
    2fb6:	bf00      	nop
    2fb8:	20001660 	.word	0x20001660

00002fbc <z_log_strdup>:
{
    2fbc:	b510      	push	{r4, lr}
    2fbe:	b082      	sub	sp, #8
    2fc0:	4604      	mov	r4, r0
	    is_rodata(str) || k_is_user_context()) {
    2fc2:	f7ff feb9 	bl	2d38 <is_rodata>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    2fc6:	bb10      	cbnz	r0, 300e <CONFIG_USB_DEVICE_VID+0x2b>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    2fc8:	2200      	movs	r2, #0
    2fca:	2300      	movs	r3, #0
    2fcc:	a901      	add	r1, sp, #4
    2fce:	4811      	ldr	r0, [pc, #68]	; (3014 <CONFIG_USB_DEVICE_VID+0x31>)
    2fd0:	f00c fd7a 	bl	fac8 <k_mem_slab_alloc>
	if (err != 0) {
    2fd4:	b108      	cbz	r0, 2fda <z_log_strdup+0x1e>
		return (char *)log_strdup_fail_msg;
    2fd6:	4c10      	ldr	r4, [pc, #64]	; (3018 <CONFIG_USB_DEVICE_VID+0x35>)
    2fd8:	e019      	b.n	300e <CONFIG_USB_DEVICE_VID+0x2b>
	(void)atomic_set(&dup->refcount, 1);
    2fda:	9b01      	ldr	r3, [sp, #4]
    2fdc:	2201      	movs	r2, #1
    2fde:	f3bf 8f5b 	dmb	ish
    2fe2:	e853 1f00 	ldrex	r1, [r3]
    2fe6:	e843 2000 	strex	r0, r2, [r3]
    2fea:	2800      	cmp	r0, #0
    2fec:	d1f9      	bne.n	2fe2 <z_log_strdup+0x26>
    2fee:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    2ff2:	221f      	movs	r2, #31
    2ff4:	4621      	mov	r1, r4
    2ff6:	9801      	ldr	r0, [sp, #4]
    2ff8:	3004      	adds	r0, #4
    2ffa:	f010 f885 	bl	13108 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    2ffe:	9c01      	ldr	r4, [sp, #4]
    3000:	237e      	movs	r3, #126	; 0x7e
    3002:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    3006:	2300      	movs	r3, #0
    3008:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	return dup->buf;
    300c:	3404      	adds	r4, #4
}
    300e:	4620      	mov	r0, r4
    3010:	b002      	add	sp, #8
    3012:	bd10      	pop	{r4, pc}
    3014:	20001670 	.word	0x20001670
    3018:	000167a0 	.word	0x000167a0

0000301c <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    301c:	b138      	cbz	r0, 302e <log_is_strdup+0x12>
    301e:	4a07      	ldr	r2, [pc, #28]	; (303c <log_is_strdup+0x20>)
    3020:	4290      	cmp	r0, r2
    3022:	d306      	bcc.n	3032 <log_is_strdup+0x16>
    3024:	32a0      	adds	r2, #160	; 0xa0
    3026:	4290      	cmp	r0, r2
    3028:	d305      	bcc.n	3036 <log_is_strdup+0x1a>
    302a:	2000      	movs	r0, #0
    302c:	4770      	bx	lr
    302e:	2000      	movs	r0, #0
    3030:	4770      	bx	lr
    3032:	2000      	movs	r0, #0
    3034:	4770      	bx	lr
    3036:	2001      	movs	r0, #1
}
    3038:	4770      	bx	lr
    303a:	bf00      	nop
    303c:	20005820 	.word	0x20005820

00003040 <detect_missed_strdup>:
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    3040:	7a03      	ldrb	r3, [r0, #8]
	if (!log_msg_is_std(msg)) {
    3042:	f013 0f01 	tst.w	r3, #1
    3046:	d000      	beq.n	304a <detect_missed_strdup+0xa>
    3048:	4770      	bx	lr
{
    304a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    304e:	b083      	sub	sp, #12
    3050:	4606      	mov	r6, r0
	msg_str = log_msg_str_get(msg);
    3052:	f00f fa30 	bl	124b6 <log_msg_str_get>
    3056:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    3058:	4630      	mov	r0, r6
    305a:	f00f fa17 	bl	1248c <log_msg_nargs_get>
    305e:	4601      	mov	r1, r0
    3060:	4638      	mov	r0, r7
    3062:	f00f f94b 	bl	122fc <z_log_get_s_mask>
    3066:	4605      	mov	r5, r0
	while (mask) {
    3068:	e004      	b.n	3074 <detect_missed_strdup+0x34>
		mask &= ~BIT(idx);
    306a:	2301      	movs	r3, #1
    306c:	fa03 f404 	lsl.w	r4, r3, r4
    3070:	ea25 0504 	bic.w	r5, r5, r4
	while (mask) {
    3074:	b36d      	cbz	r5, 30d2 <detect_missed_strdup+0x92>
		idx = 31 - __builtin_clz(mask);
    3076:	fab5 f485 	clz	r4, r5
    307a:	f1c4 041f 	rsb	r4, r4, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    307e:	4621      	mov	r1, r4
    3080:	4630      	mov	r0, r6
    3082:	f00f fa06 	bl	12492 <log_msg_arg_get>
    3086:	4681      	mov	r9, r0
		if (!is_rodata(str) && !log_is_strdup(str) &&
    3088:	f7ff fe56 	bl	2d38 <is_rodata>
    308c:	2800      	cmp	r0, #0
    308e:	d1ec      	bne.n	306a <detect_missed_strdup+0x2a>
    3090:	4648      	mov	r0, r9
    3092:	f7ff ffc3 	bl	301c <log_is_strdup>
    3096:	2800      	cmp	r0, #0
    3098:	d1e7      	bne.n	306a <detect_missed_strdup+0x2a>
    309a:	4b0f      	ldr	r3, [pc, #60]	; (30d8 <detect_missed_strdup+0x98>)
    309c:	4599      	cmp	r9, r3
    309e:	d0e4      	beq.n	306a <detect_missed_strdup+0x2a>
	return msg->hdr.ids.source_id;
    30a0:	8971      	ldrh	r1, [r6, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
    30a2:	f3c1 1189 	ubfx	r1, r1, #6, #10
    30a6:	f000 fa27 	bl	34f8 <log_source_name_get>
    30aa:	4602      	mov	r2, r0
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    30ac:	4b0b      	ldr	r3, [pc, #44]	; (30dc <detect_missed_strdup+0x9c>)
    30ae:	490c      	ldr	r1, [pc, #48]	; (30e0 <detect_missed_strdup+0xa0>)
    30b0:	1a5b      	subs	r3, r3, r1
    30b2:	08db      	lsrs	r3, r3, #3
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    30b4:	2101      	movs	r1, #1
    30b6:	f361 0802 	bfi	r8, r1, #0, #3
    30ba:	f36f 08c5 	bfc	r8, #3, #3
    30be:	f363 188f 	bfi	r8, r3, #6, #10
    30c2:	f8ad 8000 	strh.w	r8, [sp]
    30c6:	463b      	mov	r3, r7
    30c8:	4621      	mov	r1, r4
    30ca:	4806      	ldr	r0, [pc, #24]	; (30e4 <detect_missed_strdup+0xa4>)
    30cc:	f000 f8b2 	bl	3234 <log_3>
    30d0:	e7cb      	b.n	306a <detect_missed_strdup+0x2a>
}
    30d2:	b003      	add	sp, #12
    30d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    30d8:	000167a0 	.word	0x000167a0
    30dc:	00016608 	.word	0x00016608
    30e0:	000165d8 	.word	0x000165d8
    30e4:	000167bc 	.word	0x000167bc

000030e8 <msg_process>:
{
    30e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    30ea:	4606      	mov	r6, r0
	if (!bypass) {
    30ec:	bb19      	cbnz	r1, 3136 <msg_process+0x4e>
		    !panic_mode) {
    30ee:	4b14      	ldr	r3, [pc, #80]	; (3140 <msg_process+0x58>)
    30f0:	781b      	ldrb	r3, [r3, #0]
		if (!IS_ENABLED(CONFIG_LOG2) &&
    30f2:	b10b      	cbz	r3, 30f8 <msg_process+0x10>
{
    30f4:	2400      	movs	r4, #0
    30f6:	e003      	b.n	3100 <msg_process+0x18>
			detect_missed_strdup(msg.msg);
    30f8:	f7ff ffa2 	bl	3040 <detect_missed_strdup>
    30fc:	e7fa      	b.n	30f4 <msg_process+0xc>
		for (int i = 0; i < log_backend_count_get(); i++) {
    30fe:	3401      	adds	r4, #1
    3100:	4b10      	ldr	r3, [pc, #64]	; (3144 <msg_process+0x5c>)
    3102:	4a11      	ldr	r2, [pc, #68]	; (3148 <msg_process+0x60>)
    3104:	1a9b      	subs	r3, r3, r2
    3106:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    310a:	da14      	bge.n	3136 <msg_process+0x4e>
	return &__log_backends_start[idx];
    310c:	4d0e      	ldr	r5, [pc, #56]	; (3148 <msg_process+0x60>)
    310e:	eb05 1504 	add.w	r5, r5, r4, lsl #4
	return backend->cb->active;
    3112:	686b      	ldr	r3, [r5, #4]
    3114:	795b      	ldrb	r3, [r3, #5]
			if (log_backend_is_active(backend) &&
    3116:	2b00      	cmp	r3, #0
    3118:	d0f1      	beq.n	30fe <msg_process+0x16>
			    msg_filter_check(backend, msg)) {
    311a:	4631      	mov	r1, r6
    311c:	4628      	mov	r0, r5
    311e:	f00f f8e7 	bl	122f0 <msg_filter_check>
			if (log_backend_is_active(backend) &&
    3122:	2800      	cmp	r0, #0
    3124:	d0eb      	beq.n	30fe <msg_process+0x16>
	backend->api->put(backend, msg);
    3126:	0127      	lsls	r7, r4, #4
    3128:	4b07      	ldr	r3, [pc, #28]	; (3148 <msg_process+0x60>)
    312a:	59db      	ldr	r3, [r3, r7]
    312c:	685b      	ldr	r3, [r3, #4]
    312e:	4631      	mov	r1, r6
    3130:	4628      	mov	r0, r5
    3132:	4798      	blx	r3
}
    3134:	e7e3      	b.n	30fe <msg_process+0x16>
			log_msg_put(msg.msg);
    3136:	4630      	mov	r0, r6
    3138:	f00f f9bf 	bl	124ba <log_msg_put>
}
    313c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    313e:	bf00      	nop
    3140:	20002fc0 	.word	0x20002fc0
    3144:	00016680 	.word	0x00016680
    3148:	00016660 	.word	0x00016660

0000314c <z_impl_log_process>:
{
    314c:	b510      	push	{r4, lr}
    314e:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    3150:	4b10      	ldr	r3, [pc, #64]	; (3194 <z_impl_log_process+0x48>)
    3152:	781b      	ldrb	r3, [r3, #0]
    3154:	b903      	cbnz	r3, 3158 <z_impl_log_process+0xc>
    3156:	b1c8      	cbz	r0, 318c <z_impl_log_process+0x40>
	msg = get_msg();
    3158:	f7ff feb2 	bl	2ec0 <get_msg>
	if (msg.msg) {
    315c:	4602      	mov	r2, r0
    315e:	b178      	cbz	r0, 3180 <z_impl_log_process+0x34>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    3160:	4b0d      	ldr	r3, [pc, #52]	; (3198 <z_impl_log_process+0x4c>)
    3162:	f3bf 8f5b 	dmb	ish
    3166:	e853 1f00 	ldrex	r1, [r3]
    316a:	3901      	subs	r1, #1
    316c:	e843 1000 	strex	r0, r1, [r3]
    3170:	2800      	cmp	r0, #0
    3172:	d1f8      	bne.n	3166 <z_impl_log_process+0x1a>
    3174:	f3bf 8f5b 	dmb	ish
		msg_process(msg, bypass);
    3178:	4621      	mov	r1, r4
    317a:	4610      	mov	r0, r2
    317c:	f7ff ffb4 	bl	30e8 <msg_process>
	if (!bypass && z_log_dropped_pending()) {
    3180:	b914      	cbnz	r4, 3188 <z_impl_log_process+0x3c>
    3182:	f7ff ff11 	bl	2fa8 <z_log_dropped_pending>
    3186:	b910      	cbnz	r0, 318e <z_impl_log_process+0x42>
	return next_pending();
    3188:	f7ff fe02 	bl	2d90 <next_pending>
}
    318c:	bd10      	pop	{r4, pc}
		dropped_notify();
    318e:	f7ff fee9 	bl	2f64 <dropped_notify>
    3192:	e7f9      	b.n	3188 <z_impl_log_process+0x3c>
    3194:	20002fbf 	.word	0x20002fbf
    3198:	2000165c 	.word	0x2000165c

0000319c <z_log_msg_post_finalize>:
{
    319c:	b510      	push	{r4, lr}
    319e:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    31a0:	4b1f      	ldr	r3, [pc, #124]	; (3220 <z_log_msg_post_finalize+0x84>)
    31a2:	f3bf 8f5b 	dmb	ish
    31a6:	e853 2f00 	ldrex	r2, [r3]
    31aa:	3201      	adds	r2, #1
    31ac:	e843 2100 	strex	r1, r2, [r3]
    31b0:	2900      	cmp	r1, #0
    31b2:	d1f8      	bne.n	31a6 <z_log_msg_post_finalize+0xa>
    31b4:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    31b8:	4b1a      	ldr	r3, [pc, #104]	; (3224 <z_log_msg_post_finalize+0x88>)
    31ba:	781b      	ldrb	r3, [r3, #0]
    31bc:	b963      	cbnz	r3, 31d8 <z_log_msg_post_finalize+0x3c>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    31be:	4b1a      	ldr	r3, [pc, #104]	; (3228 <z_log_msg_post_finalize+0x8c>)
    31c0:	681b      	ldr	r3, [r3, #0]
    31c2:	b11b      	cbz	r3, 31cc <z_log_msg_post_finalize+0x30>
    31c4:	4a16      	ldr	r2, [pc, #88]	; (3220 <z_log_msg_post_finalize+0x84>)
    31c6:	6812      	ldr	r2, [r2, #0]
    31c8:	2a01      	cmp	r2, #1
    31ca:	d015      	beq.n	31f8 <z_log_msg_post_finalize+0x5c>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    31cc:	4a14      	ldr	r2, [pc, #80]	; (3220 <z_log_msg_post_finalize+0x84>)
    31ce:	6812      	ldr	r2, [r2, #0]
    31d0:	2a0a      	cmp	r2, #10
    31d2:	d01c      	beq.n	320e <z_log_msg_post_finalize+0x72>
}
    31d4:	b002      	add	sp, #8
    31d6:	bd10      	pop	{r4, pc}
	__asm__ volatile(
    31d8:	f04f 0320 	mov.w	r3, #32
    31dc:	f3ef 8411 	mrs	r4, BASEPRI
    31e0:	f383 8812 	msr	BASEPRI_MAX, r3
    31e4:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    31e8:	2000      	movs	r0, #0
    31ea:	f7ff ffaf 	bl	314c <z_impl_log_process>
	__asm__ volatile(
    31ee:	f384 8811 	msr	BASEPRI, r4
    31f2:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    31f6:	e7ed      	b.n	31d4 <z_log_msg_post_finalize+0x38>
	z_impl_k_timer_start(timer, duration, period);
    31f8:	2200      	movs	r2, #0
    31fa:	2300      	movs	r3, #0
    31fc:	e9cd 2300 	strd	r2, r3, [sp]
    3200:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    3204:	2300      	movs	r3, #0
    3206:	4809      	ldr	r0, [pc, #36]	; (322c <z_log_msg_post_finalize+0x90>)
    3208:	f00d fe5a 	bl	10ec0 <z_impl_k_timer_start>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    320c:	e7e2      	b.n	31d4 <z_log_msg_post_finalize+0x38>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    320e:	2b00      	cmp	r3, #0
    3210:	d0e0      	beq.n	31d4 <z_log_msg_post_finalize+0x38>
	z_impl_k_timer_stop(timer);
    3212:	4806      	ldr	r0, [pc, #24]	; (322c <z_log_msg_post_finalize+0x90>)
    3214:	f013 f822 	bl	1625c <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    3218:	4805      	ldr	r0, [pc, #20]	; (3230 <z_log_msg_post_finalize+0x94>)
    321a:	f00c fe99 	bl	ff50 <z_impl_k_sem_give>
}
    321e:	e7d9      	b.n	31d4 <z_log_msg_post_finalize+0x38>
    3220:	2000165c 	.word	0x2000165c
    3224:	20002fc0 	.word	0x20002fc0
    3228:	2000168c 	.word	0x2000168c
    322c:	20000580 	.word	0x20000580
    3230:	20000440 	.word	0x20000440

00003234 <log_3>:
{
    3234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3238:	4680      	mov	r8, r0
    323a:	460f      	mov	r7, r1
    323c:	4616      	mov	r6, r2
    323e:	461d      	mov	r5, r3
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    3240:	f000 f9b0 	bl	35a4 <log_msg_chunk_alloc>

	if (msg != NULL) {
    3244:	4604      	mov	r4, r0
    3246:	b140      	cbz	r0, 325a <log_3+0x26>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
    3248:	2301      	movs	r3, #1
    324a:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    324c:	2200      	movs	r2, #0
    324e:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    3250:	f04f 0300 	mov.w	r3, #0
    3254:	f362 0300 	bfi	r3, r2, #0, #1
    3258:	7203      	strb	r3, [r0, #8]
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
    325a:	b14c      	cbz	r4, 3270 <log_3+0x3c>
		msg->str = str;
    325c:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = 3U;
    3260:	7a63      	ldrb	r3, [r4, #9]
    3262:	2203      	movs	r2, #3
    3264:	f362 1307 	bfi	r3, r2, #4, #4
    3268:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    326a:	6167      	str	r7, [r4, #20]
		msg->payload.single.args[1] = arg2;
    326c:	61a6      	str	r6, [r4, #24]
		msg->payload.single.args[2] = arg3;
    326e:	61e5      	str	r5, [r4, #28]
		if (msg == NULL) {
    3270:	b1c4      	cbz	r4, 32a4 <log_3+0x70>
	msg->hdr.ids = src_level;
    3272:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    3276:	8163      	strh	r3, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    3278:	4b0b      	ldr	r3, [pc, #44]	; (32a8 <log_3+0x74>)
    327a:	681b      	ldr	r3, [r3, #0]
    327c:	4798      	blx	r3
    327e:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    3280:	f04f 0320 	mov.w	r3, #32
    3284:	f3ef 8511 	mrs	r5, BASEPRI
    3288:	f383 8812 	msr	BASEPRI_MAX, r3
    328c:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    3290:	4621      	mov	r1, r4
    3292:	4806      	ldr	r0, [pc, #24]	; (32ac <log_3+0x78>)
    3294:	f00f f818 	bl	122c8 <log_list_add_tail>
	__asm__ volatile(
    3298:	f385 8811 	msr	BASEPRI, r5
    329c:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    32a0:	f7ff ff7c 	bl	319c <z_log_msg_post_finalize>
}
    32a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    32a8:	20000160 	.word	0x20000160
    32ac:	20001668 	.word	0x20001668

000032b0 <log_1>:
{
    32b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    32b2:	4606      	mov	r6, r0
    32b4:	460d      	mov	r5, r1
    32b6:	4617      	mov	r7, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    32b8:	f000 f974 	bl	35a4 <log_msg_chunk_alloc>
	if (msg != NULL) {
    32bc:	4604      	mov	r4, r0
    32be:	b140      	cbz	r0, 32d2 <log_1+0x22>
		msg->hdr.ref_cnt = 1;
    32c0:	2301      	movs	r3, #1
    32c2:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    32c4:	2100      	movs	r1, #0
    32c6:	8101      	strh	r1, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    32c8:	f04f 0300 	mov.w	r3, #0
    32cc:	f361 0300 	bfi	r3, r1, #0, #1
    32d0:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
    32d2:	b134      	cbz	r4, 32e2 <log_1+0x32>
		msg->str = str;
    32d4:	6126      	str	r6, [r4, #16]
		msg->hdr.params.std.nargs = 1U;
    32d6:	7a63      	ldrb	r3, [r4, #9]
    32d8:	2201      	movs	r2, #1
    32da:	f362 1307 	bfi	r3, r2, #4, #4
    32de:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    32e0:	6165      	str	r5, [r4, #20]
		if (msg == NULL) {
    32e2:	b1b4      	cbz	r4, 3312 <log_1+0x62>
	msg->hdr.ids = src_level;
    32e4:	8167      	strh	r7, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    32e6:	4b0b      	ldr	r3, [pc, #44]	; (3314 <log_1+0x64>)
    32e8:	681b      	ldr	r3, [r3, #0]
    32ea:	4798      	blx	r3
    32ec:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    32ee:	f04f 0320 	mov.w	r3, #32
    32f2:	f3ef 8511 	mrs	r5, BASEPRI
    32f6:	f383 8812 	msr	BASEPRI_MAX, r3
    32fa:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    32fe:	4621      	mov	r1, r4
    3300:	4805      	ldr	r0, [pc, #20]	; (3318 <log_1+0x68>)
    3302:	f00e ffe1 	bl	122c8 <log_list_add_tail>
	__asm__ volatile(
    3306:	f385 8811 	msr	BASEPRI, r5
    330a:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    330e:	f7ff ff45 	bl	319c <z_log_msg_post_finalize>
}
    3312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3314:	20000160 	.word	0x20000160
    3318:	20001668 	.word	0x20001668

0000331c <log_2>:
{
    331c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3320:	4607      	mov	r7, r0
    3322:	460e      	mov	r6, r1
    3324:	4615      	mov	r5, r2
    3326:	4698      	mov	r8, r3
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    3328:	f000 f93c 	bl	35a4 <log_msg_chunk_alloc>
	if (msg != NULL) {
    332c:	4604      	mov	r4, r0
    332e:	b140      	cbz	r0, 3342 <log_2+0x26>
		msg->hdr.ref_cnt = 1;
    3330:	2301      	movs	r3, #1
    3332:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    3334:	2200      	movs	r2, #0
    3336:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    3338:	f04f 0300 	mov.w	r3, #0
    333c:	f362 0300 	bfi	r3, r2, #0, #1
    3340:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
    3342:	b13c      	cbz	r4, 3354 <log_2+0x38>
		msg->str = str;
    3344:	6127      	str	r7, [r4, #16]
		msg->hdr.params.std.nargs = 2U;
    3346:	7a63      	ldrb	r3, [r4, #9]
    3348:	2202      	movs	r2, #2
    334a:	f362 1307 	bfi	r3, r2, #4, #4
    334e:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    3350:	6166      	str	r6, [r4, #20]
		msg->payload.single.args[1] = arg2;
    3352:	61a5      	str	r5, [r4, #24]
		if (msg == NULL) {
    3354:	b1bc      	cbz	r4, 3386 <log_2+0x6a>
	msg->hdr.ids = src_level;
    3356:	f8a4 800a 	strh.w	r8, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    335a:	4b0c      	ldr	r3, [pc, #48]	; (338c <log_2+0x70>)
    335c:	681b      	ldr	r3, [r3, #0]
    335e:	4798      	blx	r3
    3360:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    3362:	f04f 0320 	mov.w	r3, #32
    3366:	f3ef 8511 	mrs	r5, BASEPRI
    336a:	f383 8812 	msr	BASEPRI_MAX, r3
    336e:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    3372:	4621      	mov	r1, r4
    3374:	4806      	ldr	r0, [pc, #24]	; (3390 <log_2+0x74>)
    3376:	f00e ffa7 	bl	122c8 <log_list_add_tail>
	__asm__ volatile(
    337a:	f385 8811 	msr	BASEPRI, r5
    337e:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    3382:	f7ff ff0b 	bl	319c <z_log_msg_post_finalize>
}
    3386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    338a:	bf00      	nop
    338c:	20000160 	.word	0x20000160
    3390:	20001668 	.word	0x20001668

00003394 <log_n>:
{
    3394:	b538      	push	{r3, r4, r5, lr}
    3396:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
    3398:	f00f f8d3 	bl	12542 <log_msg_create_n>
		if (msg == NULL) {
    339c:	b1b8      	cbz	r0, 33ce <log_n+0x3a>
    339e:	4605      	mov	r5, r0
	msg->hdr.ids = src_level;
    33a0:	8144      	strh	r4, [r0, #10]
	msg->hdr.timestamp = timestamp_func();
    33a2:	4b0b      	ldr	r3, [pc, #44]	; (33d0 <log_n+0x3c>)
    33a4:	681b      	ldr	r3, [r3, #0]
    33a6:	4798      	blx	r3
    33a8:	60e8      	str	r0, [r5, #12]
	__asm__ volatile(
    33aa:	f04f 0320 	mov.w	r3, #32
    33ae:	f3ef 8411 	mrs	r4, BASEPRI
    33b2:	f383 8812 	msr	BASEPRI_MAX, r3
    33b6:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    33ba:	4629      	mov	r1, r5
    33bc:	4805      	ldr	r0, [pc, #20]	; (33d4 <log_n+0x40>)
    33be:	f00e ff83 	bl	122c8 <log_list_add_tail>
	__asm__ volatile(
    33c2:	f384 8811 	msr	BASEPRI, r4
    33c6:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    33ca:	f7ff fee7 	bl	319c <z_log_msg_post_finalize>
}
    33ce:	bd38      	pop	{r3, r4, r5, pc}
    33d0:	20000160 	.word	0x20000160
    33d4:	20001668 	.word	0x20001668

000033d8 <log_0>:
{
    33d8:	b570      	push	{r4, r5, r6, lr}
    33da:	4605      	mov	r5, r0
    33dc:	460e      	mov	r6, r1
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    33de:	f000 f8e1 	bl	35a4 <log_msg_chunk_alloc>
	if (msg != NULL) {
    33e2:	4604      	mov	r4, r0
    33e4:	b140      	cbz	r0, 33f8 <log_0+0x20>
		msg->hdr.ref_cnt = 1;
    33e6:	2301      	movs	r3, #1
    33e8:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    33ea:	2200      	movs	r2, #0
    33ec:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    33ee:	f04f 0300 	mov.w	r3, #0
    33f2:	f362 0300 	bfi	r3, r2, #0, #1
    33f6:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
    33f8:	b104      	cbz	r4, 33fc <log_0+0x24>
		msg->str = str;
    33fa:	6125      	str	r5, [r4, #16]
		if (msg == NULL) {
    33fc:	b1b4      	cbz	r4, 342c <log_0+0x54>
	msg->hdr.ids = src_level;
    33fe:	8166      	strh	r6, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    3400:	4b0b      	ldr	r3, [pc, #44]	; (3430 <log_0+0x58>)
    3402:	681b      	ldr	r3, [r3, #0]
    3404:	4798      	blx	r3
    3406:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    3408:	f04f 0320 	mov.w	r3, #32
    340c:	f3ef 8511 	mrs	r5, BASEPRI
    3410:	f383 8812 	msr	BASEPRI_MAX, r3
    3414:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    3418:	4621      	mov	r1, r4
    341a:	4806      	ldr	r0, [pc, #24]	; (3434 <log_0+0x5c>)
    341c:	f00e ff54 	bl	122c8 <log_list_add_tail>
	__asm__ volatile(
    3420:	f385 8811 	msr	BASEPRI, r5
    3424:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    3428:	f7ff feb8 	bl	319c <z_log_msg_post_finalize>
}
    342c:	bd70      	pop	{r4, r5, r6, pc}
    342e:	bf00      	nop
    3430:	20000160 	.word	0x20000160
    3434:	20001668 	.word	0x20001668

00003438 <z_impl_log_panic>:
	if (panic_mode) {
    3438:	4b12      	ldr	r3, [pc, #72]	; (3484 <z_impl_log_panic+0x4c>)
    343a:	781b      	ldrb	r3, [r3, #0]
    343c:	b103      	cbz	r3, 3440 <z_impl_log_panic+0x8>
    343e:	4770      	bx	lr
{
    3440:	b510      	push	{r4, lr}
	log_init();
    3442:	f7ff fd05 	bl	2e50 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    3446:	2400      	movs	r4, #0
    3448:	e000      	b.n	344c <z_impl_log_panic+0x14>
    344a:	3401      	adds	r4, #1
    344c:	4b0e      	ldr	r3, [pc, #56]	; (3488 <z_impl_log_panic+0x50>)
    344e:	4a0f      	ldr	r2, [pc, #60]	; (348c <z_impl_log_panic+0x54>)
    3450:	1a9b      	subs	r3, r3, r2
    3452:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    3456:	da0c      	bge.n	3472 <z_impl_log_panic+0x3a>
	return &__log_backends_start[idx];
    3458:	480c      	ldr	r0, [pc, #48]	; (348c <z_impl_log_panic+0x54>)
    345a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
    345e:	6843      	ldr	r3, [r0, #4]
    3460:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    3462:	2b00      	cmp	r3, #0
    3464:	d0f1      	beq.n	344a <z_impl_log_panic+0x12>
	backend->api->panic(backend);
    3466:	0123      	lsls	r3, r4, #4
    3468:	4a08      	ldr	r2, [pc, #32]	; (348c <z_impl_log_panic+0x54>)
    346a:	58d3      	ldr	r3, [r2, r3]
    346c:	695b      	ldr	r3, [r3, #20]
    346e:	4798      	blx	r3
}
    3470:	e7eb      	b.n	344a <z_impl_log_panic+0x12>
    3472:	2000      	movs	r0, #0
    3474:	f7ff fe6a 	bl	314c <z_impl_log_process>
		while (log_process(false) == true) {
    3478:	2800      	cmp	r0, #0
    347a:	d1fa      	bne.n	3472 <z_impl_log_panic+0x3a>
	panic_mode = true;
    347c:	4b01      	ldr	r3, [pc, #4]	; (3484 <z_impl_log_panic+0x4c>)
    347e:	2201      	movs	r2, #1
    3480:	701a      	strb	r2, [r3, #0]
}
    3482:	bd10      	pop	{r4, pc}
    3484:	20002fc0 	.word	0x20002fc0
    3488:	00016680 	.word	0x00016680
    348c:	00016660 	.word	0x00016660

00003490 <log_process_thread_func>:
{
    3490:	b508      	push	{r3, lr}
	log_init();
    3492:	f7ff fcdd 	bl	2e50 <log_init>
	return z_impl_z_current_get();
    3496:	f00d faf9 	bl	10a8c <z_impl_z_current_get>
	thread_set(k_current_get());
    349a:	f7ff fc5d 	bl	2d58 <thread_set>
    349e:	e006      	b.n	34ae <log_process_thread_func+0x1e>
	return z_impl_k_sem_take(sem, timeout);
    34a0:	f04f 32ff 	mov.w	r2, #4294967295
    34a4:	f04f 33ff 	mov.w	r3, #4294967295
    34a8:	4804      	ldr	r0, [pc, #16]	; (34bc <log_process_thread_func+0x2c>)
    34aa:	f00c fd75 	bl	ff98 <z_impl_k_sem_take>
    34ae:	2000      	movs	r0, #0
    34b0:	f7ff fe4c 	bl	314c <z_impl_log_process>
		if (log_process(false) == false) {
    34b4:	2800      	cmp	r0, #0
    34b6:	d1fa      	bne.n	34ae <log_process_thread_func+0x1e>
    34b8:	e7f2      	b.n	34a0 <log_process_thread_func+0x10>
    34ba:	bf00      	nop
    34bc:	20000440 	.word	0x20000440

000034c0 <log_free>:
{
    34c0:	b500      	push	{lr}
    34c2:	b083      	sub	sp, #12
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    34c4:	3804      	subs	r0, #4
    34c6:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    34c8:	f3bf 8f5b 	dmb	ish
    34cc:	e850 3f00 	ldrex	r3, [r0]
    34d0:	1e5a      	subs	r2, r3, #1
    34d2:	e840 2100 	strex	r1, r2, [r0]
    34d6:	2900      	cmp	r1, #0
    34d8:	d1f8      	bne.n	34cc <log_free+0xc>
    34da:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    34de:	2b01      	cmp	r3, #1
    34e0:	d002      	beq.n	34e8 <log_free+0x28>
}
    34e2:	b003      	add	sp, #12
    34e4:	f85d fb04 	ldr.w	pc, [sp], #4
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    34e8:	a901      	add	r1, sp, #4
    34ea:	4802      	ldr	r0, [pc, #8]	; (34f4 <log_free+0x34>)
    34ec:	f012 faed 	bl	15aca <k_mem_slab_free>
}
    34f0:	e7f7      	b.n	34e2 <log_free+0x22>
    34f2:	bf00      	nop
    34f4:	20001670 	.word	0x20001670

000034f8 <log_source_name_get>:
	return log_sources_count();
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    34f8:	4b05      	ldr	r3, [pc, #20]	; (3510 <log_source_name_get+0x18>)
    34fa:	4a06      	ldr	r2, [pc, #24]	; (3514 <log_source_name_get+0x1c>)
    34fc:	1a9b      	subs	r3, r3, r2
    34fe:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    3502:	d202      	bcs.n	350a <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
    3504:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    3508:	4770      	bx	lr
    350a:	2000      	movs	r0, #0
}
    350c:	4770      	bx	lr
    350e:	bf00      	nop
    3510:	00016660 	.word	0x00016660
    3514:	000165d8 	.word	0x000165d8

00003518 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    3518:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    351a:	4b07      	ldr	r3, [pc, #28]	; (3538 <log_backend_enable+0x20>)
    351c:	1ac3      	subs	r3, r0, r3
    351e:	111b      	asrs	r3, r3, #4
    3520:	3301      	adds	r3, #1
	backend->cb->id = id;
    3522:	6842      	ldr	r2, [r0, #4]
    3524:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
    3526:	6843      	ldr	r3, [r0, #4]
    3528:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    352a:	6843      	ldr	r3, [r0, #4]
    352c:	2201      	movs	r2, #1
    352e:	715a      	strb	r2, [r3, #5]

	log_backend_id_set(backend, id);
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    3530:	f7ff fcda 	bl	2ee8 <z_log_notify_backend_enabled>
}
    3534:	bd08      	pop	{r3, pc}
    3536:	bf00      	nop
    3538:	00016660 	.word	0x00016660

0000353c <cont_free>:
{
	atomic_inc(&msg->hdr.ref_cnt);
}

static void cont_free(struct log_msg_cont *cont)
{
    353c:	b510      	push	{r4, lr}
    353e:	b082      	sub	sp, #8
    3540:	9001      	str	r0, [sp, #4]
	struct log_msg_cont *next;

	while (cont != NULL) {
    3542:	9b01      	ldr	r3, [sp, #4]
    3544:	b133      	cbz	r3, 3554 <cont_free+0x18>
		next = cont->next;
    3546:	681c      	ldr	r4, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    3548:	a901      	add	r1, sp, #4
    354a:	4803      	ldr	r0, [pc, #12]	; (3558 <cont_free+0x1c>)
    354c:	f012 fabd 	bl	15aca <k_mem_slab_free>
		cont = next;
    3550:	9401      	str	r4, [sp, #4]
    3552:	e7f6      	b.n	3542 <cont_free+0x6>
	}
}
    3554:	b002      	add	sp, #8
    3556:	bd10      	pop	{r4, pc}
    3558:	20001690 	.word	0x20001690

0000355c <log_msg_pool_init>:
{
    355c:	b508      	push	{r3, lr}
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    355e:	2320      	movs	r3, #32
    3560:	461a      	mov	r2, r3
    3562:	4902      	ldr	r1, [pc, #8]	; (356c <log_msg_pool_init+0x10>)
    3564:	4802      	ldr	r0, [pc, #8]	; (3570 <log_msg_pool_init+0x14>)
    3566:	f012 faa2 	bl	15aae <k_mem_slab_init>
}
    356a:	bd08      	pop	{r3, pc}
    356c:	200058c0 	.word	0x200058c0
    3570:	20001690 	.word	0x20001690

00003574 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    3574:	b510      	push	{r4, lr}
    3576:	b082      	sub	sp, #8
	union log_msg_chunk *msg = NULL;
    3578:	2300      	movs	r3, #0
    357a:	9301      	str	r3, [sp, #4]
    357c:	2001      	movs	r0, #1
    357e:	f7ff fde5 	bl	314c <z_impl_log_process>
    3582:	4604      	mov	r4, r0
	int err;

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
    3584:	f7ff fcc0 	bl	2f08 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    3588:	2200      	movs	r2, #0
    358a:	2300      	movs	r3, #0
    358c:	a901      	add	r1, sp, #4
    358e:	4804      	ldr	r0, [pc, #16]	; (35a0 <log_msg_no_space_handle+0x2c>)
    3590:	f00c fa9a 	bl	fac8 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    3594:	b108      	cbz	r0, 359a <log_msg_no_space_handle+0x26>
    3596:	2c00      	cmp	r4, #0
    3598:	d1f0      	bne.n	357c <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
    359a:	9801      	ldr	r0, [sp, #4]
    359c:	b002      	add	sp, #8
    359e:	bd10      	pop	{r4, pc}
    35a0:	20001690 	.word	0x20001690

000035a4 <log_msg_chunk_alloc>:
{
    35a4:	b500      	push	{lr}
    35a6:	b083      	sub	sp, #12
	union log_msg_chunk *msg = NULL;
    35a8:	2300      	movs	r3, #0
    35aa:	9301      	str	r3, [sp, #4]
		   block_on_alloc()
    35ac:	f00e fec7 	bl	1233e <block_on_alloc>
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    35b0:	b150      	cbz	r0, 35c8 <log_msg_chunk_alloc+0x24>
    35b2:	2200      	movs	r2, #0
    35b4:	2300      	movs	r3, #0
    35b6:	a901      	add	r1, sp, #4
    35b8:	4807      	ldr	r0, [pc, #28]	; (35d8 <log_msg_chunk_alloc+0x34>)
    35ba:	f00c fa85 	bl	fac8 <k_mem_slab_alloc>
	if (err != 0) {
    35be:	b930      	cbnz	r0, 35ce <log_msg_chunk_alloc+0x2a>
}
    35c0:	9801      	ldr	r0, [sp, #4]
    35c2:	b003      	add	sp, #12
    35c4:	f85d fb04 	ldr.w	pc, [sp], #4
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    35c8:	2200      	movs	r2, #0
    35ca:	2300      	movs	r3, #0
    35cc:	e7f3      	b.n	35b6 <log_msg_chunk_alloc+0x12>
		msg = log_msg_no_space_handle();
    35ce:	f7ff ffd1 	bl	3574 <log_msg_no_space_handle>
    35d2:	9001      	str	r0, [sp, #4]
    35d4:	e7f4      	b.n	35c0 <log_msg_chunk_alloc+0x1c>
    35d6:	bf00      	nop
    35d8:	20001690 	.word	0x20001690

000035dc <msg_free>:
{
    35dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    35de:	b083      	sub	sp, #12
    35e0:	9001      	str	r0, [sp, #4]
	uint32_t nargs = log_msg_nargs_get(msg);
    35e2:	4604      	mov	r4, r0
    35e4:	f00e ff52 	bl	1248c <log_msg_nargs_get>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    35e8:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg) && nargs) {
    35ea:	f013 0f01 	tst.w	r3, #1
    35ee:	d101      	bne.n	35f4 <msg_free+0x18>
    35f0:	4606      	mov	r6, r0
    35f2:	bb50      	cbnz	r0, 364a <msg_free+0x6e>
	if (msg->hdr.params.generic.ext == 1) {
    35f4:	9b01      	ldr	r3, [sp, #4]
    35f6:	7a1a      	ldrb	r2, [r3, #8]
    35f8:	f012 0f02 	tst.w	r2, #2
    35fc:	d128      	bne.n	3650 <msg_free+0x74>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    35fe:	a901      	add	r1, sp, #4
    3600:	4815      	ldr	r0, [pc, #84]	; (3658 <msg_free+0x7c>)
    3602:	f012 fa62 	bl	15aca <k_mem_slab_free>
}
    3606:	b003      	add	sp, #12
    3608:	bdf0      	pop	{r4, r5, r6, r7, pc}
					smask = z_log_get_s_mask(
    360a:	9801      	ldr	r0, [sp, #4]
    360c:	f00e ff53 	bl	124b6 <log_msg_str_get>
    3610:	4631      	mov	r1, r6
    3612:	f00e fe73 	bl	122fc <z_log_get_s_mask>
					if (smask == 0U) {
    3616:	4607      	mov	r7, r0
    3618:	b988      	cbnz	r0, 363e <msg_free+0x62>
    361a:	e7eb      	b.n	35f4 <msg_free+0x18>
					log_free(buf);
    361c:	4628      	mov	r0, r5
    361e:	f7ff ff4f 	bl	34c0 <log_free>
		for (i = 0U; i < nargs; i++) {
    3622:	3401      	adds	r4, #1
    3624:	42b4      	cmp	r4, r6
    3626:	d2e5      	bcs.n	35f4 <msg_free+0x18>
			void *buf = (void *)log_msg_arg_get(msg, i);
    3628:	4621      	mov	r1, r4
    362a:	9801      	ldr	r0, [sp, #4]
    362c:	f00e ff31 	bl	12492 <log_msg_arg_get>
    3630:	4605      	mov	r5, r0
			if (log_is_strdup(buf)) {
    3632:	f7ff fcf3 	bl	301c <log_is_strdup>
    3636:	2800      	cmp	r0, #0
    3638:	d0f3      	beq.n	3622 <msg_free+0x46>
				if (smask == 0U) {
    363a:	2f00      	cmp	r7, #0
    363c:	d0e5      	beq.n	360a <msg_free+0x2e>
				if (smask & BIT(i)) {
    363e:	fa27 f304 	lsr.w	r3, r7, r4
    3642:	f013 0f01 	tst.w	r3, #1
    3646:	d0ec      	beq.n	3622 <msg_free+0x46>
    3648:	e7e8      	b.n	361c <msg_free+0x40>
		uint32_t smask = 0U;
    364a:	2700      	movs	r7, #0
		for (i = 0U; i < nargs; i++) {
    364c:	463c      	mov	r4, r7
    364e:	e7e9      	b.n	3624 <msg_free+0x48>
		cont_free(msg->payload.ext.next);
    3650:	6958      	ldr	r0, [r3, #20]
    3652:	f7ff ff73 	bl	353c <cont_free>
    3656:	e7d2      	b.n	35fe <msg_free+0x22>
    3658:	20001690 	.word	0x20001690

0000365c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    365c:	b40e      	push	{r1, r2, r3}
    365e:	b500      	push	{lr}
    3660:	b082      	sub	sp, #8
    3662:	4601      	mov	r1, r0
    3664:	ab03      	add	r3, sp, #12
    3666:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    366a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    366c:	4803      	ldr	r0, [pc, #12]	; (367c <print_formatted+0x20>)
    366e:	f7fe fe79 	bl	2364 <cbvprintf>
	va_end(args);

	return length;
}
    3672:	b002      	add	sp, #8
    3674:	f85d eb04 	ldr.w	lr, [sp], #4
    3678:	b003      	add	sp, #12
    367a:	4770      	bx	lr
    367c:	000128e3 	.word	0x000128e3

00003680 <timestamp_print>:
	output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, uint32_t timestamp)
{
    3680:	b5f0      	push	{r4, r5, r6, r7, lr}
    3682:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
    3684:	f011 0f44 	tst.w	r1, #68	; 0x44
    3688:	d005      	beq.n	3696 <timestamp_print+0x16>
		length = print_formatted(output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
    368a:	4b1a      	ldr	r3, [pc, #104]	; (36f4 <timestamp_print+0x74>)
    368c:	681c      	ldr	r4, [r3, #0]
    368e:	b934      	cbnz	r4, 369e <timestamp_print+0x1e>
			length = print_formatted(output,
						 "[%02u:%02u:%02u.%03u,%03u] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
    3690:	2000      	movs	r0, #0
	}

	return length;
}
    3692:	b005      	add	sp, #20
    3694:	bdf0      	pop	{r4, r5, r6, r7, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
    3696:	4918      	ldr	r1, [pc, #96]	; (36f8 <timestamp_print+0x78>)
    3698:	f7ff ffe0 	bl	365c <print_formatted>
    369c:	e7f9      	b.n	3692 <timestamp_print+0x12>
		timestamp /= timestamp_div;
    369e:	4b17      	ldr	r3, [pc, #92]	; (36fc <timestamp_print+0x7c>)
    36a0:	6819      	ldr	r1, [r3, #0]
    36a2:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    36a6:	fbb1 f5f4 	udiv	r5, r1, r4
		hours = seconds / 3600U;
    36aa:	4a15      	ldr	r2, [pc, #84]	; (3700 <timestamp_print+0x80>)
    36ac:	fba2 3205 	umull	r3, r2, r2, r5
    36b0:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    36b2:	f44f 6661 	mov.w	r6, #3600	; 0xe10
    36b6:	fb06 5612 	mls	r6, r6, r2, r5
		mins = seconds / 60U;
    36ba:	4b12      	ldr	r3, [pc, #72]	; (3704 <timestamp_print+0x84>)
    36bc:	fba3 7306 	umull	r7, r3, r3, r6
    36c0:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    36c2:	fb04 1115 	mls	r1, r4, r5, r1
		ms = (remainder * 1000U) / freq;
    36c6:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    36ca:	fb05 f101 	mul.w	r1, r5, r1
    36ce:	fbb1 f7f4 	udiv	r7, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    36d2:	fb07 1114 	mls	r1, r7, r4, r1
    36d6:	fb05 f101 	mul.w	r1, r5, r1
    36da:	fbb1 f4f4 	udiv	r4, r1, r4
			length = print_formatted(output,
    36de:	9402      	str	r4, [sp, #8]
    36e0:	9701      	str	r7, [sp, #4]
    36e2:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    36e6:	eba6 0181 	sub.w	r1, r6, r1, lsl #2
    36ea:	9100      	str	r1, [sp, #0]
    36ec:	4906      	ldr	r1, [pc, #24]	; (3708 <timestamp_print+0x88>)
    36ee:	f7ff ffb5 	bl	365c <print_formatted>
    36f2:	e7ce      	b.n	3692 <timestamp_print+0x12>
    36f4:	200016ac 	.word	0x200016ac
    36f8:	00016800 	.word	0x00016800
    36fc:	200016b0 	.word	0x200016b0
    3700:	91a2b3c5 	.word	0x91a2b3c5
    3704:	88888889 	.word	0x88888889
    3708:	0001680c 	.word	0x0001680c

0000370c <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    370c:	b161      	cbz	r1, 3728 <color_print+0x1c>
{
    370e:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    3710:	b12a      	cbz	r2, 371e <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    3712:	4a06      	ldr	r2, [pc, #24]	; (372c <color_print+0x20>)
    3714:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    3718:	b912      	cbnz	r2, 3720 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    371a:	4a05      	ldr	r2, [pc, #20]	; (3730 <color_print+0x24>)
    371c:	e000      	b.n	3720 <color_print+0x14>
    371e:	4a04      	ldr	r2, [pc, #16]	; (3730 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
    3720:	4904      	ldr	r1, [pc, #16]	; (3734 <color_print+0x28>)
    3722:	f7ff ff9b 	bl	365c <print_formatted>
	}
}
    3726:	bd08      	pop	{r3, pc}
    3728:	4770      	bx	lr
    372a:	bf00      	nop
    372c:	0001687c 	.word	0x0001687c
    3730:	00016828 	.word	0x00016828
    3734:	00017594 	.word	0x00017594

00003738 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    3738:	f011 0f10 	tst.w	r1, #16
    373c:	d10b      	bne.n	3756 <newline_print+0x1e>
{
    373e:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    3740:	f011 0f20 	tst.w	r1, #32
    3744:	d003      	beq.n	374e <newline_print+0x16>
		print_formatted(ctx, "\n");
    3746:	4904      	ldr	r1, [pc, #16]	; (3758 <newline_print+0x20>)
    3748:	f7ff ff88 	bl	365c <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
    374c:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    374e:	4903      	ldr	r1, [pc, #12]	; (375c <newline_print+0x24>)
    3750:	f7ff ff84 	bl	365c <print_formatted>
    3754:	e7fa      	b.n	374c <newline_print+0x14>
    3756:	4770      	bx	lr
    3758:	000172f8 	.word	0x000172f8
    375c:	00017fb4 	.word	0x00017fb4

00003760 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    3760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3764:	4605      	mov	r5, r0
    3766:	460f      	mov	r7, r1
    3768:	4616      	mov	r6, r2
    376a:	4698      	mov	r8, r3
	newline_print(output, flags);
    376c:	9906      	ldr	r1, [sp, #24]
    376e:	f7ff ffe3 	bl	3738 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
    3772:	2400      	movs	r4, #0
    3774:	4544      	cmp	r4, r8
    3776:	da05      	bge.n	3784 <hexdump_line_print+0x24>
		print_formatted(output, " ");
    3778:	4923      	ldr	r1, [pc, #140]	; (3808 <hexdump_line_print+0xa8>)
    377a:	4628      	mov	r0, r5
    377c:	f7ff ff6e 	bl	365c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    3780:	3401      	adds	r4, #1
    3782:	e7f7      	b.n	3774 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3784:	2400      	movs	r4, #0
    3786:	e009      	b.n	379c <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    3788:	491f      	ldr	r1, [pc, #124]	; (3808 <hexdump_line_print+0xa8>)
    378a:	4628      	mov	r0, r5
    378c:	f7ff ff66 	bl	365c <print_formatted>
    3790:	e00b      	b.n	37aa <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    3792:	491e      	ldr	r1, [pc, #120]	; (380c <hexdump_line_print+0xac>)
    3794:	4628      	mov	r0, r5
    3796:	f7ff ff61 	bl	365c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    379a:	3401      	adds	r4, #1
    379c:	2c0f      	cmp	r4, #15
    379e:	dc0c      	bgt.n	37ba <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    37a0:	2c00      	cmp	r4, #0
    37a2:	dd02      	ble.n	37aa <hexdump_line_print+0x4a>
    37a4:	f014 0f07 	tst.w	r4, #7
    37a8:	d0ee      	beq.n	3788 <hexdump_line_print+0x28>
		if (i < length) {
    37aa:	42b4      	cmp	r4, r6
    37ac:	d2f1      	bcs.n	3792 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
    37ae:	5d3a      	ldrb	r2, [r7, r4]
    37b0:	4917      	ldr	r1, [pc, #92]	; (3810 <hexdump_line_print+0xb0>)
    37b2:	4628      	mov	r0, r5
    37b4:	f7ff ff52 	bl	365c <print_formatted>
    37b8:	e7ef      	b.n	379a <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
    37ba:	4916      	ldr	r1, [pc, #88]	; (3814 <hexdump_line_print+0xb4>)
    37bc:	4628      	mov	r0, r5
    37be:	f7ff ff4d 	bl	365c <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    37c2:	2400      	movs	r4, #0
    37c4:	e009      	b.n	37da <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    37c6:	4910      	ldr	r1, [pc, #64]	; (3808 <hexdump_line_print+0xa8>)
    37c8:	4628      	mov	r0, r5
    37ca:	f7ff ff47 	bl	365c <print_formatted>
    37ce:	e00b      	b.n	37e8 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
    37d0:	4911      	ldr	r1, [pc, #68]	; (3818 <hexdump_line_print+0xb8>)
    37d2:	4628      	mov	r0, r5
    37d4:	f7ff ff42 	bl	365c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    37d8:	3401      	adds	r4, #1
    37da:	2c0f      	cmp	r4, #15
    37dc:	dc12      	bgt.n	3804 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
    37de:	2c00      	cmp	r4, #0
    37e0:	dd02      	ble.n	37e8 <hexdump_line_print+0x88>
    37e2:	f014 0f07 	tst.w	r4, #7
    37e6:	d0ee      	beq.n	37c6 <hexdump_line_print+0x66>
		if (i < length) {
    37e8:	42b4      	cmp	r4, r6
    37ea:	d206      	bcs.n	37fa <hexdump_line_print+0x9a>
			char c = (char)data[i];
    37ec:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    37ee:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
    37f2:	2b5e      	cmp	r3, #94	; 0x5e
    37f4:	d9ec      	bls.n	37d0 <hexdump_line_print+0x70>
    37f6:	222e      	movs	r2, #46	; 0x2e
    37f8:	e7ea      	b.n	37d0 <hexdump_line_print+0x70>
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    37fa:	4903      	ldr	r1, [pc, #12]	; (3808 <hexdump_line_print+0xa8>)
    37fc:	4628      	mov	r0, r5
    37fe:	f7ff ff2d 	bl	365c <print_formatted>
    3802:	e7e9      	b.n	37d8 <hexdump_line_print+0x78>
		}
	}
}
    3804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3808:	00016854 	.word	0x00016854
    380c:	00016838 	.word	0x00016838
    3810:	00016830 	.word	0x00016830
    3814:	0001683c 	.word	0x0001683c
    3818:	00016840 	.word	0x00016840

0000381c <ids_print>:
{
    381c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3820:	4680      	mov	r8, r0
    3822:	4616      	mov	r6, r2
    3824:	461d      	mov	r5, r3
    3826:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
    382a:	b959      	cbnz	r1, 3844 <ids_print+0x28>
	int total = 0;
    382c:	2400      	movs	r4, #0
	if (source_id >= 0) {
    382e:	2f00      	cmp	r7, #0
    3830:	db1c      	blt.n	386c <ids_print+0x50>
		total += print_formatted(output,
    3832:	b186      	cbz	r6, 3856 <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    3834:	2301      	movs	r3, #1
    3836:	9a07      	ldr	r2, [sp, #28]
    3838:	4093      	lsls	r3, r2
				(func_on &&
    383a:	f013 0f10 	tst.w	r3, #16
    383e:	d118      	bne.n	3872 <ids_print+0x56>
		total += print_formatted(output,
    3840:	4e0d      	ldr	r6, [pc, #52]	; (3878 <ids_print+0x5c>)
    3842:	e009      	b.n	3858 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
    3844:	4b0d      	ldr	r3, [pc, #52]	; (387c <ids_print+0x60>)
    3846:	9a07      	ldr	r2, [sp, #28]
    3848:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    384c:	490c      	ldr	r1, [pc, #48]	; (3880 <ids_print+0x64>)
    384e:	f7ff ff05 	bl	365c <print_formatted>
    3852:	4604      	mov	r4, r0
    3854:	e7eb      	b.n	382e <ids_print+0x12>
		total += print_formatted(output,
    3856:	4e08      	ldr	r6, [pc, #32]	; (3878 <ids_print+0x5c>)
    3858:	4639      	mov	r1, r7
    385a:	4628      	mov	r0, r5
    385c:	f7ff fe4c 	bl	34f8 <log_source_name_get>
    3860:	4602      	mov	r2, r0
    3862:	4631      	mov	r1, r6
    3864:	4640      	mov	r0, r8
    3866:	f7ff fef9 	bl	365c <print_formatted>
    386a:	4404      	add	r4, r0
}
    386c:	4620      	mov	r0, r4
    386e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
    3872:	4e04      	ldr	r6, [pc, #16]	; (3884 <ids_print+0x68>)
    3874:	e7f0      	b.n	3858 <ids_print+0x3c>
    3876:	bf00      	nop
    3878:	00016844 	.word	0x00016844
    387c:	000168b8 	.word	0x000168b8
    3880:	00016850 	.word	0x00016850
    3884:	0001684c 	.word	0x0001684c

00003888 <hexdump_print>:

static void hexdump_print(struct log_msg *msg,
			  const struct log_output *output,
			  int prefix_offset, uint32_t flags)
{
    3888:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    388c:	b089      	sub	sp, #36	; 0x24
    388e:	4607      	mov	r7, r0
    3890:	460e      	mov	r6, r1
    3892:	4691      	mov	r9, r2
    3894:	4698      	mov	r8, r3
	uint32_t offset = 0U;
	uint8_t buf[HEXDUMP_BYTES_IN_LINE];
	size_t length;

	print_formatted(output, "%s", log_msg_str_get(msg));
    3896:	f00e fe0e 	bl	124b6 <log_msg_str_get>
    389a:	4602      	mov	r2, r0
    389c:	490e      	ldr	r1, [pc, #56]	; (38d8 <hexdump_print+0x50>)
    389e:	4630      	mov	r0, r6
    38a0:	f7ff fedc 	bl	365c <print_formatted>
	uint32_t offset = 0U;
    38a4:	2400      	movs	r4, #0

	do {
		length = sizeof(buf);
    38a6:	2510      	movs	r5, #16
    38a8:	9503      	str	r5, [sp, #12]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    38aa:	4623      	mov	r3, r4
    38ac:	aa03      	add	r2, sp, #12
    38ae:	eb0d 0105 	add.w	r1, sp, r5
    38b2:	4638      	mov	r0, r7
    38b4:	f00e fe59 	bl	1256a <log_msg_hexdump_data_get>

		if (length) {
    38b8:	9a03      	ldr	r2, [sp, #12]
    38ba:	b152      	cbz	r2, 38d2 <hexdump_print+0x4a>
			hexdump_line_print(output, buf, length,
    38bc:	f8cd 8000 	str.w	r8, [sp]
    38c0:	464b      	mov	r3, r9
    38c2:	eb0d 0105 	add.w	r1, sp, r5
    38c6:	4630      	mov	r0, r6
    38c8:	f7ff ff4a 	bl	3760 <hexdump_line_print>
					   prefix_offset, flags);
			offset += length;
    38cc:	9d03      	ldr	r5, [sp, #12]
    38ce:	442c      	add	r4, r5
		length = sizeof(buf);
    38d0:	e7e9      	b.n	38a6 <hexdump_print+0x1e>
		} else {
			break;
		}
	} while (true);
}
    38d2:	b009      	add	sp, #36	; 0x24
    38d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    38d8:	00017594 	.word	0x00017594

000038dc <raw_string_print>:
}


static void raw_string_print(struct log_msg *msg,
			     const struct log_output *output)
{
    38dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    38de:	b083      	sub	sp, #12
    38e0:	4606      	mov	r6, r0
    38e2:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(output->size);

	size_t offset = 0;
	size_t length;
	bool eol = false;
    38e4:	2700      	movs	r7, #0
	size_t offset = 0;
    38e6:	463d      	mov	r5, r7
    38e8:	e00d      	b.n	3906 <raw_string_print+0x2a>
		/* Sting is stored in a hexdump message. */
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
		output->control_block->offset = length;

		if (length != 0) {
			eol = (output->buf[length - 1] == '\n');
    38ea:	68a2      	ldr	r2, [r4, #8]
    38ec:	4413      	add	r3, r2
    38ee:	f813 7c01 	ldrb.w	r7, [r3, #-1]
    38f2:	2f0a      	cmp	r7, #10
    38f4:	bf14      	ite	ne
    38f6:	2700      	movne	r7, #0
    38f8:	2701      	moveq	r7, #1
		}

		log_output_flush(output);
    38fa:	4620      	mov	r0, r4
    38fc:	f00e ffe4 	bl	128c8 <log_output_flush>
		offset += length;
    3900:	9b01      	ldr	r3, [sp, #4]
    3902:	441d      	add	r5, r3
	} while (length > 0);
    3904:	b173      	cbz	r3, 3924 <raw_string_print+0x48>
		length = output->size;
    3906:	68e3      	ldr	r3, [r4, #12]
    3908:	9301      	str	r3, [sp, #4]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
    390a:	462b      	mov	r3, r5
    390c:	aa01      	add	r2, sp, #4
    390e:	68a1      	ldr	r1, [r4, #8]
    3910:	4630      	mov	r0, r6
    3912:	f00e fe2a 	bl	1256a <log_msg_hexdump_data_get>
		output->control_block->offset = length;
    3916:	6863      	ldr	r3, [r4, #4]
    3918:	9a01      	ldr	r2, [sp, #4]
    391a:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    391c:	9b01      	ldr	r3, [sp, #4]
    391e:	2b00      	cmp	r3, #0
    3920:	d0eb      	beq.n	38fa <raw_string_print+0x1e>
    3922:	e7e2      	b.n	38ea <raw_string_print+0xe>

	if (eol) {
    3924:	b90f      	cbnz	r7, 392a <raw_string_print+0x4e>
		print_formatted(output, "\r");
	}
}
    3926:	b003      	add	sp, #12
    3928:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(output, "\r");
    392a:	4902      	ldr	r1, [pc, #8]	; (3934 <raw_string_print+0x58>)
    392c:	4620      	mov	r0, r4
    392e:	f7ff fe95 	bl	365c <print_formatted>
}
    3932:	e7f8      	b.n	3926 <raw_string_print+0x4a>
    3934:	00016858 	.word	0x00016858

00003938 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    3938:	b570      	push	{r4, r5, r6, lr}
    393a:	b082      	sub	sp, #8
    393c:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
    393e:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    3940:	f242 730f 	movw	r3, #9999	; 0x270f
    3944:	428b      	cmp	r3, r1
    3946:	bf28      	it	cs
    3948:	460b      	movcs	r3, r1
    394a:	4a0e      	ldr	r2, [pc, #56]	; (3984 <log_output_dropped_process+0x4c>)
    394c:	2105      	movs	r1, #5
    394e:	4668      	mov	r0, sp
    3950:	f00d fde2 	bl	11518 <snprintk>
    3954:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
    3956:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    3958:	685b      	ldr	r3, [r3, #4]
    395a:	220b      	movs	r2, #11
    395c:	490a      	ldr	r1, [pc, #40]	; (3988 <log_output_dropped_process+0x50>)
    395e:	4628      	mov	r0, r5
    3960:	f00e fe0b 	bl	1257a <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
    3964:	6863      	ldr	r3, [r4, #4]
    3966:	685b      	ldr	r3, [r3, #4]
    3968:	4632      	mov	r2, r6
    396a:	4669      	mov	r1, sp
    396c:	4628      	mov	r0, r5
    396e:	f00e fe04 	bl	1257a <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
    3972:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    3974:	685b      	ldr	r3, [r3, #4]
    3976:	221b      	movs	r2, #27
    3978:	4904      	ldr	r1, [pc, #16]	; (398c <log_output_dropped_process+0x54>)
    397a:	4628      	mov	r0, r5
    397c:	f00e fdfd 	bl	1257a <buffer_write>
}
    3980:	b002      	add	sp, #8
    3982:	bd70      	pop	{r4, r5, r6, pc}
    3984:	000177e4 	.word	0x000177e4
    3988:	000168ac 	.word	0x000168ac
    398c:	00016890 	.word	0x00016890

00003990 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    3990:	4b07      	ldr	r3, [pc, #28]	; (39b0 <log_output_timestamp_freq_set+0x20>)
    3992:	2201      	movs	r2, #1
    3994:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    3996:	4b07      	ldr	r3, [pc, #28]	; (39b4 <log_output_timestamp_freq_set+0x24>)
    3998:	4298      	cmp	r0, r3
    399a:	d905      	bls.n	39a8 <log_output_timestamp_freq_set+0x18>
		frequency /= 2U;
    399c:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    399e:	4a04      	ldr	r2, [pc, #16]	; (39b0 <log_output_timestamp_freq_set+0x20>)
    39a0:	6813      	ldr	r3, [r2, #0]
    39a2:	005b      	lsls	r3, r3, #1
    39a4:	6013      	str	r3, [r2, #0]
    39a6:	e7f6      	b.n	3996 <log_output_timestamp_freq_set+0x6>
	}

	freq = frequency;
    39a8:	4b03      	ldr	r3, [pc, #12]	; (39b8 <log_output_timestamp_freq_set+0x28>)
    39aa:	6018      	str	r0, [r3, #0]
}
    39ac:	4770      	bx	lr
    39ae:	bf00      	nop
    39b0:	200016b0 	.word	0x200016b0
    39b4:	000f4240 	.word	0x000f4240
    39b8:	200016ac 	.word	0x200016ac

000039bc <char_out>:
static const char LOG_HEX_SEP[10] = "##ZLOGV1##";

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    39bc:	b570      	push	{r4, r5, r6, lr}
    39be:	4606      	mov	r6, r0
    39c0:	460d      	mov	r5, r1
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
    39c2:	2400      	movs	r4, #0
    39c4:	42ac      	cmp	r4, r5
    39c6:	d207      	bcs.n	39d8 <char_out+0x1c>
		/* lower 8-bit */
		x = data[i] & 0x0FU;
		(void)hex2char(x, &c);
		uart_poll_out(uart_dev, c);
#else
		uart_poll_out(uart_dev, data[i]);
    39c8:	4b04      	ldr	r3, [pc, #16]	; (39dc <char_out+0x20>)
    39ca:	6818      	ldr	r0, [r3, #0]
    39cc:	5d31      	ldrb	r1, [r6, r4]
	const struct uart_driver_api *api =
    39ce:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    39d0:	685b      	ldr	r3, [r3, #4]
    39d2:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
    39d4:	3401      	adds	r4, #1
    39d6:	e7f5      	b.n	39c4 <char_out+0x8>
#endif
	}

	return length;
}
    39d8:	4628      	mov	r0, r5
    39da:	bd70      	pop	{r4, r5, r6, pc}
    39dc:	200016c8 	.word	0x200016c8

000039e0 <log_backend_uart_init>:
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    39e0:	4b01      	ldr	r3, [pc, #4]	; (39e8 <log_backend_uart_init+0x8>)
    39e2:	4a02      	ldr	r2, [pc, #8]	; (39ec <log_backend_uart_init+0xc>)
    39e4:	601a      	str	r2, [r3, #0]
		 */
		for (int i = 0; i < sizeof(LOG_HEX_SEP); i++) {
			uart_poll_out(uart_dev, LOG_HEX_SEP[i]);
		}
	}
}
    39e6:	4770      	bx	lr
    39e8:	200016c8 	.word	0x200016c8
    39ec:	000163c8 	.word	0x000163c8

000039f0 <panic>:

static void panic(struct log_backend const *const backend)
{
    39f0:	b508      	push	{r3, lr}
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    39f2:	4802      	ldr	r0, [pc, #8]	; (39fc <panic+0xc>)
    39f4:	f00e ff68 	bl	128c8 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
    39f8:	bd08      	pop	{r3, pc}
    39fa:	bf00      	nop
    39fc:	000168fc 	.word	0x000168fc

00003a00 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
    3a00:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    3a02:	4802      	ldr	r0, [pc, #8]	; (3a0c <dropped+0xc>)
    3a04:	f7ff ff98 	bl	3938 <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
    3a08:	bd08      	pop	{r3, pc}
    3a0a:	bf00      	nop
    3a0c:	000168fc 	.word	0x000168fc

00003a10 <put>:
{
    3a10:	b510      	push	{r4, lr}
    3a12:	460c      	mov	r4, r1
	log_msg_get(msg);
    3a14:	4608      	mov	r0, r1
    3a16:	f00e fd2c 	bl	12472 <log_msg_get>
	log_output_msg_process(output, msg, flags);
    3a1a:	220f      	movs	r2, #15
    3a1c:	4621      	mov	r1, r4
    3a1e:	4803      	ldr	r0, [pc, #12]	; (3a2c <put+0x1c>)
    3a20:	f00e ff7b 	bl	1291a <log_output_msg_process>
	log_msg_put(msg);
    3a24:	4620      	mov	r0, r4
    3a26:	f00e fd48 	bl	124ba <log_msg_put>
}
    3a2a:	bd10      	pop	{r4, pc}
    3a2c:	000168fc 	.word	0x000168fc

00003a30 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    3a30:	4b01      	ldr	r3, [pc, #4]	; (3a38 <log_backend_rtt_init+0x8>)
    3a32:	2201      	movs	r2, #1
    3a34:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    3a36:	4770      	bx	lr
    3a38:	20002fc2 	.word	0x20002fc2

00003a3c <on_failed_write>:
{
    3a3c:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
    3a3e:	b918      	cbnz	r0, 3a48 <on_failed_write+0xc>
		host_present = false;
    3a40:	4b08      	ldr	r3, [pc, #32]	; (3a64 <on_failed_write+0x28>)
    3a42:	2200      	movs	r2, #0
    3a44:	701a      	strb	r2, [r3, #0]
}
    3a46:	bd08      	pop	{r3, pc}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    3a48:	4b07      	ldr	r3, [pc, #28]	; (3a68 <on_failed_write+0x2c>)
    3a4a:	781b      	ldrb	r3, [r3, #0]
	} else if (is_sync_mode()) {
    3a4c:	b123      	cbz	r3, 3a58 <on_failed_write+0x1c>
	z_impl_k_busy_wait(usec_to_wait);
    3a4e:	f241 3088 	movw	r0, #5000	; 0x1388
    3a52:	f012 fbc1 	bl	161d8 <z_impl_k_busy_wait>
}
    3a56:	e7f6      	b.n	3a46 <on_failed_write+0xa>
	return z_impl_k_sleep(timeout);
    3a58:	20a4      	movs	r0, #164	; 0xa4
    3a5a:	2100      	movs	r1, #0
    3a5c:	f00c ffb6 	bl	109cc <z_impl_k_sleep>
}
    3a60:	e7f1      	b.n	3a46 <on_failed_write+0xa>
    3a62:	bf00      	nop
    3a64:	20002fc2 	.word	0x20002fc2
    3a68:	20002fc3 	.word	0x20002fc3

00003a6c <on_write>:
{
    3a6c:	b538      	push	{r3, r4, r5, lr}
    3a6e:	4604      	mov	r4, r0
	host_present = true;
    3a70:	4b0a      	ldr	r3, [pc, #40]	; (3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>)
    3a72:	2201      	movs	r2, #1
    3a74:	701a      	strb	r2, [r3, #0]
	return panic_mode;
    3a76:	4b0a      	ldr	r3, [pc, #40]	; (3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>)
    3a78:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
    3a7a:	b903      	cbnz	r3, 3a7e <on_write+0x12>
}
    3a7c:	bd38      	pop	{r3, r4, r5, pc}
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    3a7e:	2000      	movs	r0, #0
    3a80:	f00b fdd0 	bl	f624 <SEGGER_RTT_HasDataUp>
    3a84:	2800      	cmp	r0, #0
    3a86:	d0f9      	beq.n	3a7c <on_write+0x10>
    3a88:	4b04      	ldr	r3, [pc, #16]	; (3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>)
    3a8a:	781b      	ldrb	r3, [r3, #0]
    3a8c:	2b00      	cmp	r3, #0
    3a8e:	d0f5      	beq.n	3a7c <on_write+0x10>
			on_failed_write(retry_cnt--);
    3a90:	1e65      	subs	r5, r4, #1
    3a92:	4620      	mov	r0, r4
    3a94:	f7ff ffd2 	bl	3a3c <on_failed_write>
    3a98:	462c      	mov	r4, r5
    3a9a:	e7f0      	b.n	3a7e <on_write+0x12>
    3a9c:	20002fc2 	.word	0x20002fc2
    3aa0:	20002fc3 	.word	0x20002fc3

00003aa4 <data_out_block_mode>:
{
    3aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3aa8:	4606      	mov	r6, r0
    3aaa:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    3aac:	2704      	movs	r7, #4
    3aae:	e00d      	b.n	3acc <data_out_block_mode+0x28>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    3ab0:	462a      	mov	r2, r5
    3ab2:	4631      	mov	r1, r6
    3ab4:	2000      	movs	r0, #0
    3ab6:	f00b fd51 	bl	f55c <SEGGER_RTT_WriteSkipNoLock>
    3aba:	4604      	mov	r4, r0
    3abc:	e01c      	b.n	3af8 <data_out_block_mode+0x54>
			on_write(retry_cnt);
    3abe:	4638      	mov	r0, r7
    3ac0:	f7ff ffd4 	bl	3a6c <on_write>
	} while ((ret == 0) && host_present);
    3ac4:	bb1c      	cbnz	r4, 3b0e <data_out_block_mode+0x6a>
    3ac6:	4b16      	ldr	r3, [pc, #88]	; (3b20 <data_out_block_mode+0x7c>)
    3ac8:	781b      	ldrb	r3, [r3, #0]
    3aca:	b303      	cbz	r3, 3b0e <data_out_block_mode+0x6a>
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    3acc:	4b15      	ldr	r3, [pc, #84]	; (3b24 <data_out_block_mode+0x80>)
    3ace:	781b      	ldrb	r3, [r3, #0]
		if (!is_sync_mode()) {
    3ad0:	2b00      	cmp	r3, #0
    3ad2:	d1ed      	bne.n	3ab0 <data_out_block_mode+0xc>
	return z_impl_k_mutex_lock(mutex, timeout);
    3ad4:	f8df 8050 	ldr.w	r8, [pc, #80]	; 3b28 <data_out_block_mode+0x84>
    3ad8:	f04f 32ff 	mov.w	r2, #4294967295
    3adc:	f04f 33ff 	mov.w	r3, #4294967295
    3ae0:	4640      	mov	r0, r8
    3ae2:	f00c f92b 	bl	fd3c <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    3ae6:	462a      	mov	r2, r5
    3ae8:	4631      	mov	r1, r6
    3aea:	2000      	movs	r0, #0
    3aec:	f00b fd36 	bl	f55c <SEGGER_RTT_WriteSkipNoLock>
    3af0:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    3af2:	4640      	mov	r0, r8
    3af4:	f00c f9ac 	bl	fe50 <z_impl_k_mutex_unlock>
		if (ret) {
    3af8:	2c00      	cmp	r4, #0
    3afa:	d1e0      	bne.n	3abe <data_out_block_mode+0x1a>
		} else if (host_present) {
    3afc:	4b08      	ldr	r3, [pc, #32]	; (3b20 <data_out_block_mode+0x7c>)
    3afe:	781b      	ldrb	r3, [r3, #0]
    3b00:	2b00      	cmp	r3, #0
    3b02:	d0df      	beq.n	3ac4 <data_out_block_mode+0x20>
			retry_cnt--;
    3b04:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
    3b06:	4638      	mov	r0, r7
    3b08:	f7ff ff98 	bl	3a3c <on_failed_write>
    3b0c:	e7da      	b.n	3ac4 <data_out_block_mode+0x20>
	return ((ret == 0) && host_present) ? 0 : length;
    3b0e:	b914      	cbnz	r4, 3b16 <data_out_block_mode+0x72>
    3b10:	4b03      	ldr	r3, [pc, #12]	; (3b20 <data_out_block_mode+0x7c>)
    3b12:	781b      	ldrb	r3, [r3, #0]
    3b14:	b903      	cbnz	r3, 3b18 <data_out_block_mode+0x74>
    3b16:	462c      	mov	r4, r5
}
    3b18:	4620      	mov	r0, r4
    3b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3b1e:	bf00      	nop
    3b20:	20002fc2 	.word	0x20002fc2
    3b24:	20002fc3 	.word	0x20002fc3
    3b28:	20000404 	.word	0x20000404

00003b2c <panic>:

static void panic(struct log_backend const *const backend)
{
    3b2c:	b508      	push	{r3, lr}
	panic_mode = true;
    3b2e:	4b03      	ldr	r3, [pc, #12]	; (3b3c <panic+0x10>)
    3b30:	2201      	movs	r2, #1
    3b32:	701a      	strb	r2, [r3, #0]
	log_output_flush(output);
    3b34:	4802      	ldr	r0, [pc, #8]	; (3b40 <panic+0x14>)
    3b36:	f00e fec7 	bl	128c8 <log_output_flush>
	log_backend_std_panic(&log_output_rtt);
}
    3b3a:	bd08      	pop	{r3, pc}
    3b3c:	20002fc3 	.word	0x20002fc3
    3b40:	00016938 	.word	0x00016938

00003b44 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
    3b44:	b508      	push	{r3, lr}
	log_output_dropped_process(output, cnt);
    3b46:	4802      	ldr	r0, [pc, #8]	; (3b50 <dropped+0xc>)
    3b48:	f7ff fef6 	bl	3938 <log_output_dropped_process>
	ARG_UNUSED(backend);

	log_backend_std_dropped(&log_output_rtt, cnt);
}
    3b4c:	bd08      	pop	{r3, pc}
    3b4e:	bf00      	nop
    3b50:	00016938 	.word	0x00016938

00003b54 <put>:
{
    3b54:	b510      	push	{r4, lr}
    3b56:	460c      	mov	r4, r1
	log_msg_get(msg);
    3b58:	4608      	mov	r0, r1
    3b5a:	f00e fc8a 	bl	12472 <log_msg_get>
	log_output_msg_process(output, msg, flags);
    3b5e:	220f      	movs	r2, #15
    3b60:	4621      	mov	r1, r4
    3b62:	4803      	ldr	r0, [pc, #12]	; (3b70 <put+0x1c>)
    3b64:	f00e fed9 	bl	1291a <log_output_msg_process>
	log_msg_put(msg);
    3b68:	4620      	mov	r0, r4
    3b6a:	f00e fca6 	bl	124ba <log_msg_put>
}
    3b6e:	bd10      	pop	{r4, pc}
    3b70:	00016938 	.word	0x00016938

00003b74 <usb_set_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
}

static bool usb_set_alt_setting(uint8_t iface, uint8_t alt_setting)
{
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    3b74:	2807      	cmp	r0, #7
    3b76:	d901      	bls.n	3b7c <usb_set_alt_setting+0x8>
		usb_dev.alt_setting[iface] = alt_setting;
		return true;
	}

	return false;
    3b78:	2000      	movs	r0, #0
}
    3b7a:	4770      	bx	lr
		usb_dev.alt_setting[iface] = alt_setting;
    3b7c:	4b02      	ldr	r3, [pc, #8]	; (3b88 <usb_set_alt_setting+0x14>)
    3b7e:	4418      	add	r0, r3
    3b80:	f880 10bb 	strb.w	r1, [r0, #187]	; 0xbb
		return true;
    3b84:	2001      	movs	r0, #1
    3b86:	4770      	bx	lr
    3b88:	200016f0 	.word	0x200016f0

00003b8c <usb_get_alt_setting>:

static uint8_t usb_get_alt_setting(uint8_t iface)
{
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    3b8c:	2807      	cmp	r0, #7
    3b8e:	d901      	bls.n	3b94 <usb_get_alt_setting+0x8>
		return usb_dev.alt_setting[iface];
	}

	return 0;
    3b90:	2000      	movs	r0, #0
}
    3b92:	4770      	bx	lr
		return usb_dev.alt_setting[iface];
    3b94:	4b02      	ldr	r3, [pc, #8]	; (3ba0 <usb_get_alt_setting+0x14>)
    3b96:	4418      	add	r0, r3
    3b98:	f890 00bb 	ldrb.w	r0, [r0, #187]	; 0xbb
    3b9c:	4770      	bx	lr
    3b9e:	bf00      	nop
    3ba0:	200016f0 	.word	0x200016f0

00003ba4 <usb_handle_request>:
 *
 * @return true if the request was handles successfully
 */
static bool usb_handle_request(struct usb_setup_packet *setup,
			       int32_t *len, uint8_t **data)
{
    3ba4:	b510      	push	{r4, lr}
	uint32_t type = setup->RequestType.type;
    3ba6:	7803      	ldrb	r3, [r0, #0]
    3ba8:	f3c3 1341 	ubfx	r3, r3, #5, #2
	if (type >= MAX_NUM_REQ_HANDLERS) {
		LOG_DBG("Error Incorrect iType %d", type);
		return false;
	}

	handler = usb_dev.req_handlers[type];
    3bac:	330a      	adds	r3, #10
    3bae:	4c06      	ldr	r4, [pc, #24]	; (3bc8 <usb_handle_request+0x24>)
    3bb0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
	if (handler == NULL) {
    3bb4:	b123      	cbz	r3, 3bc0 <usb_handle_request+0x1c>
		LOG_DBG("No handler for reqtype %d", type);
		return false;
	}

	if ((*handler)(setup, len, data) < 0) {
    3bb6:	4798      	blx	r3
    3bb8:	2800      	cmp	r0, #0
    3bba:	db03      	blt.n	3bc4 <usb_handle_request+0x20>
		LOG_DBG("Handler Error %d", type);
		usb_print_setup(setup);
		return false;
	}

	return true;
    3bbc:	2001      	movs	r0, #1
}
    3bbe:	bd10      	pop	{r4, pc}
		return false;
    3bc0:	2000      	movs	r0, #0
    3bc2:	e7fc      	b.n	3bbe <usb_handle_request+0x1a>
		return false;
    3bc4:	2000      	movs	r0, #0
    3bc6:	e7fa      	b.n	3bbe <usb_handle_request+0x1a>
    3bc8:	200016f0 	.word	0x200016f0

00003bcc <usb_register_request_handler>:
 * @return N/A
 */
static void usb_register_request_handler(int32_t type,
					 usb_request_handler handler)
{
	usb_dev.req_handlers[type] = handler;
    3bcc:	300a      	adds	r0, #10
    3bce:	4b02      	ldr	r3, [pc, #8]	; (3bd8 <usb_register_request_handler+0xc>)
    3bd0:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    3bd4:	4770      	bx	lr
    3bd6:	bf00      	nop
    3bd8:	200016f0 	.word	0x200016f0

00003bdc <usb_register_descriptors>:
 *
 * @param [in] usb_descriptors The descriptor byte array
 */
static void usb_register_descriptors(const uint8_t *usb_descriptors)
{
	usb_dev.descriptors = usb_descriptors;
    3bdc:	4b01      	ldr	r3, [pc, #4]	; (3be4 <usb_register_descriptors+0x8>)
    3bde:	6258      	str	r0, [r3, #36]	; 0x24
}
    3be0:	4770      	bx	lr
    3be2:	bf00      	nop
    3be4:	200016f0 	.word	0x200016f0

00003be8 <usb_get_descriptor>:
 *
 * @return true if the descriptor was found, false otherwise
 */
static bool usb_get_descriptor(struct usb_setup_packet *setup,
			       int32_t *len, uint8_t **data)
{
    3be8:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t *p = NULL;
	uint32_t cur_index = 0U;
	bool found = false;

	LOG_DBG("Get Descriptor request");
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    3bea:	8847      	ldrh	r7, [r0, #2]
    3bec:	0a3d      	lsrs	r5, r7, #8

	/*
	 * Invalid types of descriptors,
	 * see USB Spec. Revision 2.0, 9.4.3 Get Descriptor
	 */
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    3bee:	1f2b      	subs	r3, r5, #4
    3bf0:	b2db      	uxtb	r3, r3
    3bf2:	2b01      	cmp	r3, #1
    3bf4:	d91e      	bls.n	3c34 <usb_get_descriptor+0x4c>
    3bf6:	b2ff      	uxtb	r7, r7
    3bf8:	2d07      	cmp	r5, #7
    3bfa:	d81e      	bhi.n	3c3a <usb_get_descriptor+0x52>
	    (type > USB_DESC_OTHER_SPEED)) {
		return false;
	}

	p = (uint8_t *)usb_dev.descriptors;
    3bfc:	4b10      	ldr	r3, [pc, #64]	; (3c40 <usb_get_descriptor+0x58>)
    3bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	cur_index = 0U;
    3c00:	2600      	movs	r6, #0

	while (p[DESC_bLength] != 0U) {
    3c02:	e000      	b.n	3c06 <usb_get_descriptor+0x1e>
				break;
			}
			cur_index++;
		}
		/* skip to next descriptor */
		p += p[DESC_bLength];
    3c04:	4403      	add	r3, r0
	while (p[DESC_bLength] != 0U) {
    3c06:	7818      	ldrb	r0, [r3, #0]
    3c08:	b138      	cbz	r0, 3c1a <usb_get_descriptor+0x32>
		if (p[DESC_bDescriptorType] == type) {
    3c0a:	785c      	ldrb	r4, [r3, #1]
    3c0c:	42ac      	cmp	r4, r5
    3c0e:	d1f9      	bne.n	3c04 <usb_get_descriptor+0x1c>
			if (cur_index == index) {
    3c10:	42b7      	cmp	r7, r6
    3c12:	d001      	beq.n	3c18 <usb_get_descriptor+0x30>
			cur_index++;
    3c14:	3601      	adds	r6, #1
    3c16:	e7f5      	b.n	3c04 <usb_get_descriptor+0x1c>
				found = true;
    3c18:	2001      	movs	r0, #1
	}

	if (found) {
    3c1a:	b160      	cbz	r0, 3c36 <usb_get_descriptor+0x4e>
		/* set data pointer */
		*data = p;
    3c1c:	6013      	str	r3, [r2, #0]
		/* get length from structure */
		if (type == USB_DESC_CONFIGURATION) {
    3c1e:	2d02      	cmp	r5, #2
    3c20:	d002      	beq.n	3c28 <usb_get_descriptor+0x40>
			 */
			*len = (p[CONF_DESC_wTotalLength]) |
			    (p[CONF_DESC_wTotalLength + 1] << 8);
		} else {
			/* normally length is at offset 0 */
			*len = p[DESC_bLength];
    3c22:	781b      	ldrb	r3, [r3, #0]
    3c24:	600b      	str	r3, [r1, #0]
    3c26:	e006      	b.n	3c36 <usb_get_descriptor+0x4e>
			*len = (p[CONF_DESC_wTotalLength]) |
    3c28:	789a      	ldrb	r2, [r3, #2]
			    (p[CONF_DESC_wTotalLength + 1] << 8);
    3c2a:	78db      	ldrb	r3, [r3, #3]
			*len = (p[CONF_DESC_wTotalLength]) |
    3c2c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    3c30:	600b      	str	r3, [r1, #0]
    3c32:	e000      	b.n	3c36 <usb_get_descriptor+0x4e>
		return false;
    3c34:	2000      	movs	r0, #0
	} else {
		/* nothing found */
		LOG_DBG("Desc %x not found!", setup->wValue);
	}
	return found;
}
    3c36:	bcf0      	pop	{r4, r5, r6, r7}
    3c38:	4770      	bx	lr
		return false;
    3c3a:	2000      	movs	r0, #0
    3c3c:	e7fb      	b.n	3c36 <usb_get_descriptor+0x4e>
    3c3e:	bf00      	nop
    3c40:	200016f0 	.word	0x200016f0

00003c44 <usb_get_interface>:
	return ret;
}

static bool usb_get_interface(struct usb_setup_packet *setup,
			      int32_t *len, uint8_t **data_buf)
{
    3c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c46:	4684      	mov	ip, r0
    3c48:	460e      	mov	r6, r1
	const uint8_t *p = usb_dev.descriptors;
    3c4a:	4b0c      	ldr	r3, [pc, #48]	; (3c7c <usb_get_interface+0x38>)
    3c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	uint8_t *data = *data_buf;
    3c4e:	6817      	ldr	r7, [r2, #0]
	uint8_t cur_iface;

	while (p[DESC_bLength] != 0U) {
    3c50:	e000      	b.n	3c54 <usb_get_interface+0x10>
				return true;
			}
		}

		/* skip to next descriptor */
		p += p[DESC_bLength];
    3c52:	4413      	add	r3, r2
	while (p[DESC_bLength] != 0U) {
    3c54:	781a      	ldrb	r2, [r3, #0]
    3c56:	b172      	cbz	r2, 3c76 <usb_get_interface+0x32>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    3c58:	785c      	ldrb	r4, [r3, #1]
    3c5a:	2c04      	cmp	r4, #4
    3c5c:	d1f9      	bne.n	3c52 <usb_get_interface+0xe>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    3c5e:	7898      	ldrb	r0, [r3, #2]
			if (cur_iface == setup->wIndex) {
    3c60:	b285      	uxth	r5, r0
    3c62:	f8bc 4004 	ldrh.w	r4, [ip, #4]
    3c66:	42a5      	cmp	r5, r4
    3c68:	d1f3      	bne.n	3c52 <usb_get_interface+0xe>
				data[0] = usb_get_alt_setting(cur_iface);
    3c6a:	f7ff ff8f 	bl	3b8c <usb_get_alt_setting>
    3c6e:	7038      	strb	r0, [r7, #0]
				*len = 1;
    3c70:	2001      	movs	r0, #1
    3c72:	6030      	str	r0, [r6, #0]
				return true;
    3c74:	e000      	b.n	3c78 <usb_get_interface+0x34>
	}

	return false;
    3c76:	2000      	movs	r0, #0
}
    3c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c7a:	bf00      	nop
    3c7c:	200016f0 	.word	0x200016f0

00003c80 <is_device_configured>:
 *
 * @return true if Configured, false otherwise.
 */
static bool is_device_configured(void)
{
	return (usb_dev.configuration != 0);
    3c80:	4b03      	ldr	r3, [pc, #12]	; (3c90 <is_device_configured+0x10>)
    3c82:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
}
    3c86:	3800      	subs	r0, #0
    3c88:	bf18      	it	ne
    3c8a:	2001      	movne	r0, #1
    3c8c:	4770      	bx	lr
    3c8e:	bf00      	nop
    3c90:	200016f0 	.word	0x200016f0

00003c94 <is_interface_valid>:
 *
 * @return true if interface exists - valid
 */
static bool is_interface_valid(uint8_t interface)
{
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    3c94:	4b07      	ldr	r3, [pc, #28]	; (3cb4 <is_interface_valid+0x20>)
    3c96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	const struct usb_cfg_descriptor *cfg_descr;

	/* Search through descriptor for matching interface */
	while (p[DESC_bLength] != 0U) {
    3c98:	e000      	b.n	3c9c <is_interface_valid+0x8>
			cfg_descr = (const struct usb_cfg_descriptor *)p;
			if (interface < cfg_descr->bNumInterfaces) {
				return true;
			}
		}
		p += p[DESC_bLength];
    3c9a:	4413      	add	r3, r2
	while (p[DESC_bLength] != 0U) {
    3c9c:	781a      	ldrb	r2, [r3, #0]
    3c9e:	b13a      	cbz	r2, 3cb0 <is_interface_valid+0x1c>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    3ca0:	7859      	ldrb	r1, [r3, #1]
    3ca2:	2902      	cmp	r1, #2
    3ca4:	d1f9      	bne.n	3c9a <is_interface_valid+0x6>
			if (interface < cfg_descr->bNumInterfaces) {
    3ca6:	7919      	ldrb	r1, [r3, #4]
    3ca8:	4281      	cmp	r1, r0
    3caa:	d9f6      	bls.n	3c9a <is_interface_valid+0x6>
				return true;
    3cac:	2001      	movs	r0, #1
	}

	return false;
}
    3cae:	4770      	bx	lr
	return false;
    3cb0:	2000      	movs	r0, #0
    3cb2:	4770      	bx	lr
    3cb4:	200016f0 	.word	0x200016f0

00003cb8 <is_ep_valid>:
 * either Control Endpoint or one used by the device.
 *
 * @return true if endpoint exists - valid
 */
static bool is_ep_valid(uint8_t ep)
{
    3cb8:	b470      	push	{r4, r5, r6}
	size_t size = (__usb_data_end - __usb_data_start);
    3cba:	4b16      	ldr	r3, [pc, #88]	; (3d14 <is_ep_valid+0x5c>)
    3cbc:	4a16      	ldr	r2, [pc, #88]	; (3d18 <is_ep_valid+0x60>)
    3cbe:	1a9b      	subs	r3, r3, r2
    3cc0:	109b      	asrs	r3, r3, #2
    3cc2:	4e16      	ldr	r6, [pc, #88]	; (3d1c <is_ep_valid+0x64>)
    3cc4:	fb06 f603 	mul.w	r6, r6, r3
	const struct usb_ep_cfg_data *ep_data;
	const struct usb_cfg_data *cfg;

	/* Check if its Endpoint 0 */
	if (USB_EP_GET_IDX(ep) == 0) {
    3cc8:	f030 0380 	bics.w	r3, r0, #128	; 0x80
    3ccc:	d01d      	beq.n	3d0a <is_ep_valid+0x52>
		return true;
	}

	for (size_t i = 0; i < size; i++) {
    3cce:	2400      	movs	r4, #0
    3cd0:	42b4      	cmp	r4, r6
    3cd2:	d218      	bcs.n	3d06 <is_ep_valid+0x4e>
		cfg = &__usb_data_start[i];
		ep_data = cfg->endpoint;
    3cd4:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    3cd8:	4b0f      	ldr	r3, [pc, #60]	; (3d18 <is_ep_valid+0x60>)
    3cda:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    3cde:	6a15      	ldr	r5, [r2, #32]

		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
    3ce0:	2300      	movs	r3, #0
    3ce2:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    3ce6:	490c      	ldr	r1, [pc, #48]	; (3d18 <is_ep_valid+0x60>)
    3ce8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    3cec:	7f12      	ldrb	r2, [r2, #28]
    3cee:	429a      	cmp	r2, r3
    3cf0:	d907      	bls.n	3d02 <is_ep_valid+0x4a>
			if (ep_data[n].ep_addr == ep) {
    3cf2:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    3cf6:	7912      	ldrb	r2, [r2, #4]
    3cf8:	4282      	cmp	r2, r0
    3cfa:	d008      	beq.n	3d0e <is_ep_valid+0x56>
		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
    3cfc:	3301      	adds	r3, #1
    3cfe:	b2db      	uxtb	r3, r3
    3d00:	e7ef      	b.n	3ce2 <is_ep_valid+0x2a>
	for (size_t i = 0; i < size; i++) {
    3d02:	3401      	adds	r4, #1
    3d04:	e7e4      	b.n	3cd0 <is_ep_valid+0x18>
				return true;
			}
		}
	}

	return false;
    3d06:	2000      	movs	r0, #0
    3d08:	e002      	b.n	3d10 <is_ep_valid+0x58>
		return true;
    3d0a:	2001      	movs	r0, #1
    3d0c:	e000      	b.n	3d10 <is_ep_valid+0x58>
				return true;
    3d0e:	2001      	movs	r0, #1
}
    3d10:	bc70      	pop	{r4, r5, r6}
    3d12:	4770      	bx	lr
    3d14:	20000544 	.word	0x20000544
    3d18:	20000520 	.word	0x20000520
    3d1c:	38e38e39 	.word	0x38e38e39

00003d20 <usb_register_custom_req_handler>:
 *
 * @param [in] handler Callback function pointer
 */
static void usb_register_custom_req_handler(usb_request_handler handler)
{
	usb_dev.custom_req_handler = handler;
    3d20:	4b01      	ldr	r3, [pc, #4]	; (3d28 <usb_register_custom_req_handler+0x8>)
    3d22:	6198      	str	r0, [r3, #24]
}
    3d24:	4770      	bx	lr
    3d26:	bf00      	nop
    3d28:	200016f0 	.word	0x200016f0

00003d2c <usb_register_status_callback>:
 *
 * @param [in] cb Callback function pointer
 */
static void usb_register_status_callback(usb_dc_status_callback cb)
{
	usb_dev.status_callback = cb;
    3d2c:	4b01      	ldr	r3, [pc, #4]	; (3d34 <usb_register_status_callback+0x8>)
    3d2e:	61d8      	str	r0, [r3, #28]
}
    3d30:	4770      	bx	lr
    3d32:	bf00      	nop
    3d34:	200016f0 	.word	0x200016f0

00003d38 <foreach_ep>:

static int foreach_ep(int (* endpoint_callback)(const struct usb_ep_cfg_data *))
{
    3d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d3c:	4606      	mov	r6, r0
	size_t size = (__usb_data_end - __usb_data_start);
    3d3e:	4b14      	ldr	r3, [pc, #80]	; (3d90 <foreach_ep+0x58>)
    3d40:	4a14      	ldr	r2, [pc, #80]	; (3d94 <foreach_ep+0x5c>)
    3d42:	eba3 0802 	sub.w	r8, r3, r2
    3d46:	ea4f 03a8 	mov.w	r3, r8, asr #2
    3d4a:	4a13      	ldr	r2, [pc, #76]	; (3d98 <foreach_ep+0x60>)
    3d4c:	fb02 f803 	mul.w	r8, r2, r3

	for (size_t i = 0; i < size; i++) {
    3d50:	2500      	movs	r5, #0
    3d52:	4545      	cmp	r5, r8
    3d54:	d218      	bcs.n	3d88 <foreach_ep+0x50>
		struct usb_cfg_data *cfg = &__usb_data_start[i];
		struct usb_ep_cfg_data *ep_data = cfg->endpoint;
    3d56:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    3d5a:	4a0e      	ldr	r2, [pc, #56]	; (3d94 <foreach_ep+0x5c>)
    3d5c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3d60:	6a1f      	ldr	r7, [r3, #32]

		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
    3d62:	2400      	movs	r4, #0
    3d64:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    3d68:	4a0a      	ldr	r2, [pc, #40]	; (3d94 <foreach_ep+0x5c>)
    3d6a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3d6e:	7f1b      	ldrb	r3, [r3, #28]
    3d70:	42a3      	cmp	r3, r4
    3d72:	d907      	bls.n	3d84 <foreach_ep+0x4c>
			int ret;

			ret = endpoint_callback(&ep_data[n]);
    3d74:	eb07 00c4 	add.w	r0, r7, r4, lsl #3
    3d78:	47b0      	blx	r6
			if (ret < 0) {
    3d7a:	2800      	cmp	r0, #0
    3d7c:	db05      	blt.n	3d8a <foreach_ep+0x52>
		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
    3d7e:	3401      	adds	r4, #1
    3d80:	b2e4      	uxtb	r4, r4
    3d82:	e7ef      	b.n	3d64 <foreach_ep+0x2c>
	for (size_t i = 0; i < size; i++) {
    3d84:	3501      	adds	r5, #1
    3d86:	e7e4      	b.n	3d52 <foreach_ep+0x1a>
				return ret;
			}
		}
	}

	return 0;
    3d88:	2000      	movs	r0, #0
}
    3d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3d8e:	bf00      	nop
    3d90:	20000544 	.word	0x20000544
    3d94:	20000520 	.word	0x20000520
    3d98:	38e38e39 	.word	0x38e38e39

00003d9c <class_handler>:
 * usb_enable() is no longer needed.
 */

static int class_handler(struct usb_setup_packet *pSetup,
			 int32_t *len, uint8_t **data)
{
    3d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	size_t size = (__usb_data_end - __usb_data_start);
    3d9e:	4f13      	ldr	r7, [pc, #76]	; (3dec <class_handler+0x50>)
    3da0:	4b13      	ldr	r3, [pc, #76]	; (3df0 <class_handler+0x54>)
    3da2:	1aff      	subs	r7, r7, r3
    3da4:	10bb      	asrs	r3, r7, #2
    3da6:	4f13      	ldr	r7, [pc, #76]	; (3df4 <class_handler+0x58>)
    3da8:	fb07 f703 	mul.w	r7, r7, r3
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	for (size_t i = 0; i < size; i++) {
    3dac:	2300      	movs	r3, #0
    3dae:	e000      	b.n	3db2 <class_handler+0x16>
    3db0:	3301      	adds	r3, #1
    3db2:	42bb      	cmp	r3, r7
    3db4:	d216      	bcs.n	3de4 <class_handler+0x48>
		iface = &(__usb_data_start[i].interface);
		if_descr = __usb_data_start[i].interface_descriptor;
    3db6:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
    3dba:	4d0d      	ldr	r5, [pc, #52]	; (3df0 <class_handler+0x54>)
    3dbc:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    3dc0:	6866      	ldr	r6, [r4, #4]
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    3dc2:	4c0d      	ldr	r4, [pc, #52]	; (3df8 <class_handler+0x5c>)
    3dc4:	6a64      	ldr	r4, [r4, #36]	; 0x24
    3dc6:	42a6      	cmp	r6, r4
    3dc8:	d3f2      	bcc.n	3db0 <class_handler+0x14>
			continue;
		}

		if (iface->class_handler &&
    3dca:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
    3dce:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    3dd2:	6924      	ldr	r4, [r4, #16]
    3dd4:	2c00      	cmp	r4, #0
    3dd6:	d0eb      	beq.n	3db0 <class_handler+0x14>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    3dd8:	78b6      	ldrb	r6, [r6, #2]
    3dda:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
    3ddc:	42ae      	cmp	r6, r5
    3dde:	d1e7      	bne.n	3db0 <class_handler+0x14>
			return iface->class_handler(pSetup, len, data);
    3de0:	47a0      	blx	r4
    3de2:	e001      	b.n	3de8 <class_handler+0x4c>
		}
	}

	return -ENOTSUP;
    3de4:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    3de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3dea:	bf00      	nop
    3dec:	20000544 	.word	0x20000544
    3df0:	20000520 	.word	0x20000520
    3df4:	38e38e39 	.word	0x38e38e39
    3df8:	200016f0 	.word	0x200016f0

00003dfc <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    3dfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3e00:	4607      	mov	r7, r0
    3e02:	4688      	mov	r8, r1
    3e04:	4691      	mov	r9, r2
	size_t size = (__usb_data_end - __usb_data_start);
    3e06:	4e19      	ldr	r6, [pc, #100]	; (3e6c <custom_handler+0x70>)
    3e08:	4b19      	ldr	r3, [pc, #100]	; (3e70 <custom_handler+0x74>)
    3e0a:	1af6      	subs	r6, r6, r3
    3e0c:	10b3      	asrs	r3, r6, #2
    3e0e:	4e19      	ldr	r6, [pc, #100]	; (3e74 <custom_handler+0x78>)
    3e10:	fb06 f603 	mul.w	r6, r6, r3
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	for (size_t i = 0; i < size; i++) {
    3e14:	2400      	movs	r4, #0
    3e16:	e005      	b.n	3e24 <custom_handler+0x28>
		if (iface->custom_handler == NULL) {
			continue;
		}

		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
			return iface->custom_handler(pSetup, len, data);
    3e18:	464a      	mov	r2, r9
    3e1a:	4641      	mov	r1, r8
    3e1c:	4638      	mov	r0, r7
    3e1e:	47a8      	blx	r5
    3e20:	e021      	b.n	3e66 <custom_handler+0x6a>
	for (size_t i = 0; i < size; i++) {
    3e22:	3401      	adds	r4, #1
    3e24:	42a6      	cmp	r6, r4
    3e26:	d91c      	bls.n	3e62 <custom_handler+0x66>
		if_descr = __usb_data_start[i].interface_descriptor;
    3e28:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    3e2c:	4d10      	ldr	r5, [pc, #64]	; (3e70 <custom_handler+0x74>)
    3e2e:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    3e32:	685b      	ldr	r3, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    3e34:	4a10      	ldr	r2, [pc, #64]	; (3e78 <custom_handler+0x7c>)
    3e36:	6a52      	ldr	r2, [r2, #36]	; 0x24
    3e38:	4293      	cmp	r3, r2
    3e3a:	d3f2      	bcc.n	3e22 <custom_handler+0x26>
		if (iface->custom_handler == NULL) {
    3e3c:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    3e40:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    3e44:	6995      	ldr	r5, [r2, #24]
    3e46:	2d00      	cmp	r5, #0
    3e48:	d0eb      	beq.n	3e22 <custom_handler+0x26>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    3e4a:	7899      	ldrb	r1, [r3, #2]
    3e4c:	793a      	ldrb	r2, [r7, #4]
    3e4e:	4291      	cmp	r1, r2
    3e50:	d0e2      	beq.n	3e18 <custom_handler+0x1c>
			 * the first interface, but the request may be for
			 * subsequent ones, so forward each request to audio.
			 * The class does not actively engage in request
			 * handling and therefore we can ignore return value.
			 */
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    3e52:	795b      	ldrb	r3, [r3, #5]
    3e54:	2b01      	cmp	r3, #1
    3e56:	d1e4      	bne.n	3e22 <custom_handler+0x26>
				(void)iface->custom_handler(pSetup, len, data);
    3e58:	464a      	mov	r2, r9
    3e5a:	4641      	mov	r1, r8
    3e5c:	4638      	mov	r0, r7
    3e5e:	47a8      	blx	r5
    3e60:	e7df      	b.n	3e22 <custom_handler+0x26>
			}
		}
	}

	return -ENOTSUP;
    3e62:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    3e66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3e6a:	bf00      	nop
    3e6c:	20000544 	.word	0x20000544
    3e70:	20000520 	.word	0x20000520
    3e74:	38e38e39 	.word	0x38e38e39
    3e78:	200016f0 	.word	0x200016f0

00003e7c <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    3e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3e80:	4681      	mov	r9, r0
    3e82:	4688      	mov	r8, r1
    3e84:	4617      	mov	r7, r2
	size_t size = (__usb_data_end - __usb_data_start);
    3e86:	4e10      	ldr	r6, [pc, #64]	; (3ec8 <vendor_handler+0x4c>)
    3e88:	4b10      	ldr	r3, [pc, #64]	; (3ecc <vendor_handler+0x50>)
    3e8a:	1af6      	subs	r6, r6, r3
    3e8c:	10b3      	asrs	r3, r6, #2
    3e8e:	4e10      	ldr	r6, [pc, #64]	; (3ed0 <vendor_handler+0x54>)
    3e90:	fb06 f603 	mul.w	r6, r6, r3
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	for (size_t i = 0; i < size; i++) {
    3e94:	2400      	movs	r4, #0
    3e96:	e000      	b.n	3e9a <vendor_handler+0x1e>
    3e98:	3401      	adds	r4, #1
    3e9a:	42a6      	cmp	r6, r4
    3e9c:	d90f      	bls.n	3ebe <vendor_handler+0x42>
		iface = &(__usb_data_start[i].interface);
		if (iface->vendor_handler) {
    3e9e:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    3ea2:	4d0a      	ldr	r5, [pc, #40]	; (3ecc <vendor_handler+0x50>)
    3ea4:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    3ea8:	695b      	ldr	r3, [r3, #20]
    3eaa:	2b00      	cmp	r3, #0
    3eac:	d0f4      	beq.n	3e98 <vendor_handler+0x1c>
			if (!iface->vendor_handler(pSetup, len, data)) {
    3eae:	463a      	mov	r2, r7
    3eb0:	4641      	mov	r1, r8
    3eb2:	4648      	mov	r0, r9
    3eb4:	4798      	blx	r3
    3eb6:	4603      	mov	r3, r0
    3eb8:	2800      	cmp	r0, #0
    3eba:	d1ed      	bne.n	3e98 <vendor_handler+0x1c>
    3ebc:	e001      	b.n	3ec2 <vendor_handler+0x46>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    3ebe:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    3ec2:	4618      	mov	r0, r3
    3ec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3ec8:	20000544 	.word	0x20000544
    3ecc:	20000520 	.word	0x20000520
    3ed0:	38e38e39 	.word	0x38e38e39

00003ed4 <usb_halt_endpoint_req>:
{
    3ed4:	b570      	push	{r4, r5, r6, lr}
    3ed6:	b082      	sub	sp, #8
    3ed8:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    3eda:	7904      	ldrb	r4, [r0, #4]
    3edc:	f88d 4007 	strb.w	r4, [sp, #7]
	if (!is_ep_valid(ep)) {
    3ee0:	4620      	mov	r0, r4
    3ee2:	f7ff fee9 	bl	3cb8 <is_ep_valid>
    3ee6:	4606      	mov	r6, r0
    3ee8:	b130      	cbz	r0, 3ef8 <usb_halt_endpoint_req+0x24>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    3eea:	f034 0380 	bics.w	r3, r4, #128	; 0x80
    3eee:	d006      	beq.n	3efe <usb_halt_endpoint_req+0x2a>
    3ef0:	f7ff fec6 	bl	3c80 <is_device_configured>
    3ef4:	b918      	cbnz	r0, 3efe <usb_halt_endpoint_req+0x2a>
	return false;
    3ef6:	4606      	mov	r6, r0
}
    3ef8:	4630      	mov	r0, r6
    3efa:	b002      	add	sp, #8
    3efc:	bd70      	pop	{r4, r5, r6, pc}
		if (halt) {
    3efe:	b15d      	cbz	r5, 3f18 <usb_halt_endpoint_req+0x44>
			usb_dc_ep_set_stall(ep);
    3f00:	4620      	mov	r0, r4
    3f02:	f004 fa35 	bl	8370 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    3f06:	4b0a      	ldr	r3, [pc, #40]	; (3f30 <usb_halt_endpoint_req+0x5c>)
    3f08:	69db      	ldr	r3, [r3, #28]
    3f0a:	2b00      	cmp	r3, #0
    3f0c:	d0f4      	beq.n	3ef8 <usb_halt_endpoint_req+0x24>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    3f0e:	f10d 0107 	add.w	r1, sp, #7
    3f12:	2008      	movs	r0, #8
    3f14:	4798      	blx	r3
    3f16:	e7ef      	b.n	3ef8 <usb_halt_endpoint_req+0x24>
			usb_dc_ep_clear_stall(ep);
    3f18:	4620      	mov	r0, r4
    3f1a:	f004 fa6f 	bl	83fc <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    3f1e:	4b04      	ldr	r3, [pc, #16]	; (3f30 <usb_halt_endpoint_req+0x5c>)
    3f20:	69db      	ldr	r3, [r3, #28]
    3f22:	2b00      	cmp	r3, #0
    3f24:	d0e8      	beq.n	3ef8 <usb_halt_endpoint_req+0x24>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    3f26:	f10d 0107 	add.w	r1, sp, #7
    3f2a:	2009      	movs	r0, #9
    3f2c:	4798      	blx	r3
		return true;
    3f2e:	e7e3      	b.n	3ef8 <usb_halt_endpoint_req+0x24>
    3f30:	200016f0 	.word	0x200016f0

00003f34 <set_endpoint>:
{
    3f34:	b500      	push	{lr}
    3f36:	b083      	sub	sp, #12
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    3f38:	7883      	ldrb	r3, [r0, #2]
    3f3a:	f88d 3000 	strb.w	r3, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    3f3e:	8883      	ldrh	r3, [r0, #4]
    3f40:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    3f44:	78c3      	ldrb	r3, [r0, #3]
    3f46:	f003 0303 	and.w	r3, r3, #3
    3f4a:	f88d 3004 	strb.w	r3, [sp, #4]
	ret = usb_dc_ep_configure(&ep_cfg);
    3f4e:	4668      	mov	r0, sp
    3f50:	f004 f9d0 	bl	82f4 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    3f54:	f110 0f78 	cmn.w	r0, #120	; 0x78
    3f58:	d000      	beq.n	3f5c <set_endpoint+0x28>
	} else if (ret) {
    3f5a:	b970      	cbnz	r0, 3f7a <set_endpoint+0x46>
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    3f5c:	f89d 0000 	ldrb.w	r0, [sp]
    3f60:	f004 fa96 	bl	8490 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    3f64:	f110 0f78 	cmn.w	r0, #120	; 0x78
    3f68:	d000      	beq.n	3f6c <set_endpoint+0x38>
	} else if (ret) {
    3f6a:	b9d0      	cbnz	r0, 3fa2 <set_endpoint+0x6e>
	usb_dev.configured = true;
    3f6c:	2001      	movs	r0, #1
    3f6e:	4b17      	ldr	r3, [pc, #92]	; (3fcc <set_endpoint+0x98>)
    3f70:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
}
    3f74:	b003      	add	sp, #12
    3f76:	f85d fb04 	ldr.w	pc, [sp], #4
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    3f7a:	4b15      	ldr	r3, [pc, #84]	; (3fd0 <set_endpoint+0x9c>)
    3f7c:	4a15      	ldr	r2, [pc, #84]	; (3fd4 <set_endpoint+0xa0>)
    3f7e:	1a9b      	subs	r3, r3, r2
    3f80:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
    3f82:	f04f 0200 	mov.w	r2, #0
    3f86:	2101      	movs	r1, #1
    3f88:	f361 0202 	bfi	r2, r1, #0, #3
    3f8c:	f36f 02c5 	bfc	r2, #3, #3
    3f90:	f363 128f 	bfi	r2, r3, #6, #10
    3f94:	f89d 1000 	ldrb.w	r1, [sp]
    3f98:	480f      	ldr	r0, [pc, #60]	; (3fd8 <set_endpoint+0xa4>)
    3f9a:	f7ff f989 	bl	32b0 <log_1>
		return false;
    3f9e:	2000      	movs	r0, #0
    3fa0:	e7e8      	b.n	3f74 <set_endpoint+0x40>
    3fa2:	4b0b      	ldr	r3, [pc, #44]	; (3fd0 <set_endpoint+0x9c>)
    3fa4:	4a0b      	ldr	r2, [pc, #44]	; (3fd4 <set_endpoint+0xa0>)
    3fa6:	1a9b      	subs	r3, r3, r2
    3fa8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    3faa:	f04f 0200 	mov.w	r2, #0
    3fae:	2101      	movs	r1, #1
    3fb0:	f361 0202 	bfi	r2, r1, #0, #3
    3fb4:	f36f 02c5 	bfc	r2, #3, #3
    3fb8:	f363 128f 	bfi	r2, r3, #6, #10
    3fbc:	f89d 1000 	ldrb.w	r1, [sp]
    3fc0:	4806      	ldr	r0, [pc, #24]	; (3fdc <set_endpoint+0xa8>)
    3fc2:	f7ff f975 	bl	32b0 <log_1>
		return false;
    3fc6:	2000      	movs	r0, #0
    3fc8:	e7d4      	b.n	3f74 <set_endpoint+0x40>
    3fca:	bf00      	nop
    3fcc:	200016f0 	.word	0x200016f0
    3fd0:	00016648 	.word	0x00016648
    3fd4:	000165d8 	.word	0x000165d8
    3fd8:	00016948 	.word	0x00016948
    3fdc:	0001696c 	.word	0x0001696c

00003fe0 <usb_reset_alt_setting>:
{
    3fe0:	b508      	push	{r3, lr}
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    3fe2:	2208      	movs	r2, #8
    3fe4:	2100      	movs	r1, #0
    3fe6:	4802      	ldr	r0, [pc, #8]	; (3ff0 <usb_reset_alt_setting+0x10>)
    3fe8:	f00f f926 	bl	13238 <memset>
}
    3fec:	bd08      	pop	{r3, pc}
    3fee:	bf00      	nop
    3ff0:	200017ab 	.word	0x200017ab

00003ff4 <usb_set_configuration>:
{
    3ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ff8:	4605      	mov	r5, r0
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    3ffa:	4b23      	ldr	r3, [pc, #140]	; (4088 <usb_set_configuration+0x94>)
    3ffc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	if (setup->wValue == 0U) {
    3ffe:	8843      	ldrh	r3, [r0, #2]
    4000:	b11b      	cbz	r3, 400a <usb_set_configuration+0x16>
	bool found = false;
    4002:	2700      	movs	r7, #0
	uint8_t cur_config = 0xFF;
    4004:	26ff      	movs	r6, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    4006:	46b0      	mov	r8, r6
    4008:	e010      	b.n	402c <usb_set_configuration+0x38>
		usb_reset_alt_setting();
    400a:	f7ff ffe9 	bl	3fe0 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    400e:	886a      	ldrh	r2, [r5, #2]
    4010:	4b1d      	ldr	r3, [pc, #116]	; (4088 <usb_set_configuration+0x94>)
    4012:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		if (usb_dev.status_callback) {
    4016:	69db      	ldr	r3, [r3, #28]
    4018:	b113      	cbz	r3, 4020 <usb_set_configuration+0x2c>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    401a:	491c      	ldr	r1, [pc, #112]	; (408c <usb_set_configuration+0x98>)
    401c:	2003      	movs	r0, #3
    401e:	4798      	blx	r3
		return true;
    4020:	2701      	movs	r7, #1
    4022:	e020      	b.n	4066 <usb_set_configuration+0x72>
			cur_alt_setting =
    4024:	f894 8003 	ldrb.w	r8, [r4, #3]
		p += p[DESC_bLength];
    4028:	7823      	ldrb	r3, [r4, #0]
    402a:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
    402c:	7823      	ldrb	r3, [r4, #0]
    402e:	b1cb      	cbz	r3, 4064 <usb_set_configuration+0x70>
		switch (p[DESC_bDescriptorType]) {
    4030:	7863      	ldrb	r3, [r4, #1]
    4032:	2b04      	cmp	r3, #4
    4034:	d0f6      	beq.n	4024 <usb_set_configuration+0x30>
    4036:	2b05      	cmp	r3, #5
    4038:	d008      	beq.n	404c <usb_set_configuration+0x58>
    403a:	2b02      	cmp	r3, #2
    403c:	d1f4      	bne.n	4028 <usb_set_configuration+0x34>
			cur_config = p[CONF_DESC_bConfigurationValue];
    403e:	7966      	ldrb	r6, [r4, #5]
			if (cur_config == setup->wValue) {
    4040:	b2b2      	uxth	r2, r6
    4042:	886b      	ldrh	r3, [r5, #2]
    4044:	429a      	cmp	r2, r3
    4046:	d1ef      	bne.n	4028 <usb_set_configuration+0x34>
				found = true;
    4048:	2701      	movs	r7, #1
    404a:	e7ed      	b.n	4028 <usb_set_configuration+0x34>
			if ((cur_config != setup->wValue) ||
    404c:	b2b3      	uxth	r3, r6
    404e:	886a      	ldrh	r2, [r5, #2]
    4050:	4293      	cmp	r3, r2
    4052:	d1e9      	bne.n	4028 <usb_set_configuration+0x34>
    4054:	f1b8 0f00 	cmp.w	r8, #0
    4058:	d1e6      	bne.n	4028 <usb_set_configuration+0x34>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    405a:	4620      	mov	r0, r4
    405c:	f7ff ff6a 	bl	3f34 <set_endpoint>
    4060:	4607      	mov	r7, r0
			break;
    4062:	e7e1      	b.n	4028 <usb_set_configuration+0x34>
	if (found) {
    4064:	b917      	cbnz	r7, 406c <usb_set_configuration+0x78>
}
    4066:	4638      	mov	r0, r7
    4068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		usb_reset_alt_setting();
    406c:	f7ff ffb8 	bl	3fe0 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    4070:	886a      	ldrh	r2, [r5, #2]
    4072:	4b05      	ldr	r3, [pc, #20]	; (4088 <usb_set_configuration+0x94>)
    4074:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		if (usb_dev.status_callback) {
    4078:	69db      	ldr	r3, [r3, #28]
    407a:	2b00      	cmp	r3, #0
    407c:	d0f3      	beq.n	4066 <usb_set_configuration+0x72>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    407e:	4903      	ldr	r1, [pc, #12]	; (408c <usb_set_configuration+0x98>)
    4080:	2003      	movs	r0, #3
    4082:	4798      	blx	r3
    4084:	e7ef      	b.n	4066 <usb_set_configuration+0x72>
    4086:	bf00      	nop
    4088:	200016f0 	.word	0x200016f0
    408c:	200017aa 	.word	0x200017aa

00004090 <usb_handle_std_device_req>:
{
    4090:	b510      	push	{r4, lr}
	uint8_t *data = *data_buf;
    4092:	6814      	ldr	r4, [r2, #0]
	if (usb_reqtype_is_to_host(setup)) {
    4094:	f990 3000 	ldrsb.w	r3, [r0]
    4098:	2b00      	cmp	r3, #0
    409a:	db06      	blt.n	40aa <usb_handle_std_device_req+0x1a>
		switch (setup->bRequest) {
    409c:	7843      	ldrb	r3, [r0, #1]
    409e:	2b05      	cmp	r3, #5
    40a0:	d018      	beq.n	40d4 <usb_handle_std_device_req+0x44>
    40a2:	2b09      	cmp	r3, #9
    40a4:	d01d      	beq.n	40e2 <usb_handle_std_device_req+0x52>
    40a6:	2000      	movs	r0, #0
}
    40a8:	bd10      	pop	{r4, pc}
		switch (setup->bRequest) {
    40aa:	7843      	ldrb	r3, [r0, #1]
    40ac:	2b06      	cmp	r3, #6
    40ae:	d007      	beq.n	40c0 <usb_handle_std_device_req+0x30>
    40b0:	2b08      	cmp	r3, #8
    40b2:	d008      	beq.n	40c6 <usb_handle_std_device_req+0x36>
    40b4:	b10b      	cbz	r3, 40ba <usb_handle_std_device_req+0x2a>
    40b6:	2000      	movs	r0, #0
    40b8:	e7f6      	b.n	40a8 <usb_handle_std_device_req+0x18>
			return usb_get_status(setup, len, data_buf);
    40ba:	f00e fc6d 	bl	12998 <usb_get_status>
    40be:	e7f3      	b.n	40a8 <usb_handle_std_device_req+0x18>
			return usb_get_descriptor(setup, len, data_buf);
    40c0:	f7ff fd92 	bl	3be8 <usb_get_descriptor>
    40c4:	e7f0      	b.n	40a8 <usb_handle_std_device_req+0x18>
			data[0] = usb_dev.configuration;
    40c6:	4b08      	ldr	r3, [pc, #32]	; (40e8 <usb_handle_std_device_req+0x58>)
    40c8:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
    40cc:	7023      	strb	r3, [r4, #0]
			*len = 1;
    40ce:	2001      	movs	r0, #1
    40d0:	6008      	str	r0, [r1, #0]
			return true;
    40d2:	e7e9      	b.n	40a8 <usb_handle_std_device_req+0x18>
			return !usb_dc_set_address(setup->wValue);
    40d4:	7880      	ldrb	r0, [r0, #2]
    40d6:	f004 f8b7 	bl	8248 <usb_dc_set_address>
    40da:	fab0 f080 	clz	r0, r0
    40de:	0940      	lsrs	r0, r0, #5
    40e0:	e7e2      	b.n	40a8 <usb_handle_std_device_req+0x18>
			return usb_set_configuration(setup);
    40e2:	f7ff ff87 	bl	3ff4 <usb_set_configuration>
    40e6:	e7df      	b.n	40a8 <usb_handle_std_device_req+0x18>
    40e8:	200016f0 	.word	0x200016f0

000040ec <reset_endpoint>:
{
    40ec:	b510      	push	{r4, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    40ee:	7884      	ldrb	r4, [r0, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    40f0:	4620      	mov	r0, r4
    40f2:	f000 fdcb 	bl	4c8c <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
    40f6:	4620      	mov	r0, r4
    40f8:	f004 f9f8 	bl	84ec <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    40fc:	f110 0f78 	cmn.w	r0, #120	; 0x78
    4100:	d015      	beq.n	412e <reset_endpoint+0x42>
	} else if (ret) {
    4102:	b908      	cbnz	r0, 4108 <reset_endpoint+0x1c>
	return true;
    4104:	2001      	movs	r0, #1
}
    4106:	bd10      	pop	{r4, pc}
    4108:	4b0a      	ldr	r3, [pc, #40]	; (4134 <reset_endpoint+0x48>)
    410a:	4a0b      	ldr	r2, [pc, #44]	; (4138 <reset_endpoint+0x4c>)
    410c:	1a9b      	subs	r3, r3, r2
    410e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_cfg.ep_addr);
    4110:	f04f 0200 	mov.w	r2, #0
    4114:	2101      	movs	r1, #1
    4116:	f361 0202 	bfi	r2, r1, #0, #3
    411a:	f36f 02c5 	bfc	r2, #3, #3
    411e:	f363 128f 	bfi	r2, r3, #6, #10
    4122:	4621      	mov	r1, r4
    4124:	4805      	ldr	r0, [pc, #20]	; (413c <reset_endpoint+0x50>)
    4126:	f7ff f8c3 	bl	32b0 <log_1>
		return false;
    412a:	2000      	movs	r0, #0
    412c:	e7eb      	b.n	4106 <reset_endpoint+0x1a>
	return true;
    412e:	2001      	movs	r0, #1
    4130:	e7e9      	b.n	4106 <reset_endpoint+0x1a>
    4132:	bf00      	nop
    4134:	00016648 	.word	0x00016648
    4138:	000165d8 	.word	0x000165d8
    413c:	00016990 	.word	0x00016990

00004140 <usb_set_interface>:
{
    4140:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4144:	4606      	mov	r6, r0
	const uint8_t *p = usb_dev.descriptors;
    4146:	4b1b      	ldr	r3, [pc, #108]	; (41b4 <usb_set_interface+0x74>)
    4148:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	bool ret = false;
    414a:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
    414c:	25ff      	movs	r5, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    414e:	46a8      	mov	r8, r5
	const uint8_t *if_desc = NULL;
    4150:	46b9      	mov	r9, r7
    4152:	e008      	b.n	4166 <usb_set_interface+0x26>
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    4154:	f894 8003 	ldrb.w	r8, [r4, #3]
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    4158:	78a5      	ldrb	r5, [r4, #2]
			if (cur_iface == setup->wIndex &&
    415a:	b2ab      	uxth	r3, r5
    415c:	88b0      	ldrh	r0, [r6, #4]
    415e:	4283      	cmp	r3, r0
    4160:	d013      	beq.n	418a <usb_set_interface+0x4a>
		p += p[DESC_bLength];
    4162:	7823      	ldrb	r3, [r4, #0]
    4164:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
    4166:	7823      	ldrb	r3, [r4, #0]
    4168:	b1db      	cbz	r3, 41a2 <usb_set_interface+0x62>
		switch (p[DESC_bDescriptorType]) {
    416a:	7863      	ldrb	r3, [r4, #1]
    416c:	2b04      	cmp	r3, #4
    416e:	d0f1      	beq.n	4154 <usb_set_interface+0x14>
    4170:	2b05      	cmp	r3, #5
    4172:	d1f6      	bne.n	4162 <usb_set_interface+0x22>
			if (cur_iface == setup->wIndex) {
    4174:	b2ab      	uxth	r3, r5
    4176:	88b2      	ldrh	r2, [r6, #4]
    4178:	4293      	cmp	r3, r2
    417a:	d1f2      	bne.n	4162 <usb_set_interface+0x22>
				ret = usb_eps_reconfigure(ep, cur_alt_setting,
    417c:	78b2      	ldrb	r2, [r6, #2]
    417e:	4641      	mov	r1, r8
    4180:	4620      	mov	r0, r4
    4182:	f00e fc13 	bl	129ac <usb_eps_reconfigure>
    4186:	4607      	mov	r7, r0
    4188:	e7eb      	b.n	4162 <usb_set_interface+0x22>
			    cur_alt_setting == setup->wValue) {
    418a:	fa1f f388 	uxth.w	r3, r8
    418e:	8871      	ldrh	r1, [r6, #2]
			if (cur_iface == setup->wIndex &&
    4190:	428b      	cmp	r3, r1
    4192:	d1e6      	bne.n	4162 <usb_set_interface+0x22>
				ret = usb_set_alt_setting(setup->wIndex,
    4194:	b2c9      	uxtb	r1, r1
    4196:	b2c0      	uxtb	r0, r0
    4198:	f7ff fcec 	bl	3b74 <usb_set_alt_setting>
    419c:	4607      	mov	r7, r0
				if_desc = (void *)p;
    419e:	46a1      	mov	r9, r4
    41a0:	e7df      	b.n	4162 <usb_set_interface+0x22>
	if (usb_dev.status_callback) {
    41a2:	4b04      	ldr	r3, [pc, #16]	; (41b4 <usb_set_interface+0x74>)
    41a4:	69db      	ldr	r3, [r3, #28]
    41a6:	b113      	cbz	r3, 41ae <usb_set_interface+0x6e>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    41a8:	4649      	mov	r1, r9
    41aa:	2007      	movs	r0, #7
    41ac:	4798      	blx	r3
}
    41ae:	4638      	mov	r0, r7
    41b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    41b4:	200016f0 	.word	0x200016f0

000041b8 <usb_handle_standard_request>:
{
    41b8:	b570      	push	{r4, r5, r6, lr}
    41ba:	4604      	mov	r4, r0
    41bc:	460d      	mov	r5, r1
    41be:	4616      	mov	r6, r2
	if (usb_dev.custom_req_handler &&
    41c0:	4b18      	ldr	r3, [pc, #96]	; (4224 <usb_handle_standard_request+0x6c>)
    41c2:	699b      	ldr	r3, [r3, #24]
    41c4:	b10b      	cbz	r3, 41ca <usb_handle_standard_request+0x12>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    41c6:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    41c8:	b148      	cbz	r0, 41de <usb_handle_standard_request+0x26>
	switch (setup->RequestType.recipient) {
    41ca:	7823      	ldrb	r3, [r4, #0]
    41cc:	f003 031f 	and.w	r3, r3, #31
    41d0:	2b01      	cmp	r3, #1
    41d2:	d00d      	beq.n	41f0 <usb_handle_standard_request+0x38>
    41d4:	2b02      	cmp	r3, #2
    41d6:	d013      	beq.n	4200 <usb_handle_standard_request+0x48>
    41d8:	b113      	cbz	r3, 41e0 <usb_handle_standard_request+0x28>
    41da:	f06f 0015 	mvn.w	r0, #21
}
    41de:	bd70      	pop	{r4, r5, r6, pc}
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    41e0:	4632      	mov	r2, r6
    41e2:	4629      	mov	r1, r5
    41e4:	4620      	mov	r0, r4
    41e6:	f7ff ff53 	bl	4090 <usb_handle_std_device_req>
    41ea:	b188      	cbz	r0, 4210 <usb_handle_standard_request+0x58>
	int rc = 0;
    41ec:	2000      	movs	r0, #0
    41ee:	e7f6      	b.n	41de <usb_handle_standard_request+0x26>
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    41f0:	4632      	mov	r2, r6
    41f2:	4629      	mov	r1, r5
    41f4:	4620      	mov	r0, r4
    41f6:	f00e fbe2 	bl	129be <usb_handle_std_interface_req>
    41fa:	b160      	cbz	r0, 4216 <usb_handle_standard_request+0x5e>
	int rc = 0;
    41fc:	2000      	movs	r0, #0
    41fe:	e7ee      	b.n	41de <usb_handle_standard_request+0x26>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    4200:	4632      	mov	r2, r6
    4202:	4629      	mov	r1, r5
    4204:	4620      	mov	r0, r4
    4206:	f00e fc27 	bl	12a58 <usb_handle_std_endpoint_req>
    420a:	b138      	cbz	r0, 421c <usb_handle_standard_request+0x64>
	int rc = 0;
    420c:	2000      	movs	r0, #0
    420e:	e7e6      	b.n	41de <usb_handle_standard_request+0x26>
			rc = -EINVAL;
    4210:	f06f 0015 	mvn.w	r0, #21
    4214:	e7e3      	b.n	41de <usb_handle_standard_request+0x26>
			rc = -EINVAL;
    4216:	f06f 0015 	mvn.w	r0, #21
    421a:	e7e0      	b.n	41de <usb_handle_standard_request+0x26>
			rc = -EINVAL;
    421c:	f06f 0015 	mvn.w	r0, #21
    4220:	e7dd      	b.n	41de <usb_handle_standard_request+0x26>
    4222:	bf00      	nop
    4224:	200016f0 	.word	0x200016f0

00004228 <composite_setup_ep_cb>:

static int composite_setup_ep_cb(void)
{
    4228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	size_t size = (__usb_data_end - __usb_data_start);
    422a:	4f15      	ldr	r7, [pc, #84]	; (4280 <composite_setup_ep_cb+0x58>)
    422c:	4b15      	ldr	r3, [pc, #84]	; (4284 <composite_setup_ep_cb+0x5c>)
    422e:	1aff      	subs	r7, r7, r3
    4230:	10bb      	asrs	r3, r7, #2
    4232:	4f15      	ldr	r7, [pc, #84]	; (4288 <composite_setup_ep_cb+0x60>)
    4234:	fb07 f703 	mul.w	r7, r7, r3
	struct usb_ep_cfg_data *ep_data;

	for (size_t i = 0; i < size; i++) {
    4238:	2500      	movs	r5, #0
    423a:	42af      	cmp	r7, r5
    423c:	d91b      	bls.n	4276 <composite_setup_ep_cb+0x4e>
		ep_data = __usb_data_start[i].endpoint;
    423e:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    4242:	4a10      	ldr	r2, [pc, #64]	; (4284 <composite_setup_ep_cb+0x5c>)
    4244:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4248:	6a1e      	ldr	r6, [r3, #32]
		for (uint8_t n = 0; n < __usb_data_start[i].num_endpoints; n++) {
    424a:	2400      	movs	r4, #0
    424c:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    4250:	4a0c      	ldr	r2, [pc, #48]	; (4284 <composite_setup_ep_cb+0x5c>)
    4252:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    4256:	7f1b      	ldrb	r3, [r3, #28]
    4258:	429c      	cmp	r4, r3
    425a:	d20a      	bcs.n	4272 <composite_setup_ep_cb+0x4a>
			LOG_DBG("set cb, ep: 0x%x", ep_data[n].ep_addr);
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    425c:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
    4260:	f856 1034 	ldr.w	r1, [r6, r4, lsl #3]
    4264:	7918      	ldrb	r0, [r3, #4]
    4266:	f004 fb5d 	bl	8924 <usb_dc_ep_set_callback>
    426a:	b930      	cbnz	r0, 427a <composite_setup_ep_cb+0x52>
		for (uint8_t n = 0; n < __usb_data_start[i].num_endpoints; n++) {
    426c:	3401      	adds	r4, #1
    426e:	b2e4      	uxtb	r4, r4
    4270:	e7ec      	b.n	424c <composite_setup_ep_cb+0x24>
	for (size_t i = 0; i < size; i++) {
    4272:	3501      	adds	r5, #1
    4274:	e7e1      	b.n	423a <composite_setup_ep_cb+0x12>
				return -1;
			}
		}
	}

	return 0;
    4276:	2000      	movs	r0, #0
    4278:	e001      	b.n	427e <composite_setup_ep_cb+0x56>
				return -1;
    427a:	f04f 30ff 	mov.w	r0, #4294967295
}
    427e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4280:	20000544 	.word	0x20000544
    4284:	20000520 	.word	0x20000520
    4288:	38e38e39 	.word	0x38e38e39

0000428c <forward_status_cb>:
{
    428c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    428e:	4606      	mov	r6, r0
    4290:	460f      	mov	r7, r1
	size_t size = (__usb_data_end - __usb_data_start);
    4292:	4d1c      	ldr	r5, [pc, #112]	; (4304 <forward_status_cb+0x78>)
    4294:	4b1c      	ldr	r3, [pc, #112]	; (4308 <forward_status_cb+0x7c>)
    4296:	1aed      	subs	r5, r5, r3
    4298:	10ab      	asrs	r3, r5, #2
    429a:	4d1c      	ldr	r5, [pc, #112]	; (430c <forward_status_cb+0x80>)
    429c:	fb05 f503 	mul.w	r5, r5, r3
	if (status == USB_DC_DISCONNECTED) {
    42a0:	2804      	cmp	r0, #4
    42a2:	d005      	beq.n	42b0 <forward_status_cb+0x24>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND) {
    42a4:	1f33      	subs	r3, r6, #4
    42a6:	b2db      	uxtb	r3, r3
    42a8:	2b01      	cmp	r3, #1
    42aa:	d904      	bls.n	42b6 <forward_status_cb+0x2a>
{
    42ac:	2400      	movs	r4, #0
    42ae:	e014      	b.n	42da <forward_status_cb+0x4e>
		usb_reset_alt_setting();
    42b0:	f7ff fe96 	bl	3fe0 <usb_reset_alt_setting>
    42b4:	e7f6      	b.n	42a4 <forward_status_cb+0x18>
		if (usb_dev.configured) {
    42b6:	4b16      	ldr	r3, [pc, #88]	; (4310 <forward_status_cb+0x84>)
    42b8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
    42bc:	2b00      	cmp	r3, #0
    42be:	d0f5      	beq.n	42ac <forward_status_cb+0x20>
			usb_cancel_transfers();
    42c0:	f000 fd04 	bl	4ccc <usb_cancel_transfers>
			if (status == USB_DC_DISCONNECTED) {
    42c4:	2e04      	cmp	r6, #4
    42c6:	d1f1      	bne.n	42ac <forward_status_cb+0x20>
				foreach_ep(disable_interface_ep);
    42c8:	4812      	ldr	r0, [pc, #72]	; (4314 <forward_status_cb+0x88>)
    42ca:	f7ff fd35 	bl	3d38 <foreach_ep>
				usb_dev.configured = false;
    42ce:	4b10      	ldr	r3, [pc, #64]	; (4310 <forward_status_cb+0x84>)
    42d0:	2200      	movs	r2, #0
    42d2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
    42d6:	e7e9      	b.n	42ac <forward_status_cb+0x20>
	for (size_t i = 0; i < size; i++) {
    42d8:	3401      	adds	r4, #1
    42da:	42ac      	cmp	r4, r5
    42dc:	d20b      	bcs.n	42f6 <forward_status_cb+0x6a>
		struct usb_cfg_data *cfg = &__usb_data_start[i];
    42de:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
    42e2:	4b09      	ldr	r3, [pc, #36]	; (4308 <forward_status_cb+0x7c>)
    42e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
		if (cfg->cb_usb_status) {
    42e8:	68c3      	ldr	r3, [r0, #12]
    42ea:	2b00      	cmp	r3, #0
    42ec:	d0f4      	beq.n	42d8 <forward_status_cb+0x4c>
			cfg->cb_usb_status(cfg, status, param);
    42ee:	463a      	mov	r2, r7
    42f0:	4631      	mov	r1, r6
    42f2:	4798      	blx	r3
    42f4:	e7f0      	b.n	42d8 <forward_status_cb+0x4c>
	if (usb_dev.user_status_callback) {
    42f6:	4b06      	ldr	r3, [pc, #24]	; (4310 <forward_status_cb+0x84>)
    42f8:	6a1b      	ldr	r3, [r3, #32]
    42fa:	b113      	cbz	r3, 4302 <forward_status_cb+0x76>
		usb_dev.user_status_callback(status, param);
    42fc:	4639      	mov	r1, r7
    42fe:	4630      	mov	r0, r6
    4300:	4798      	blx	r3
}
    4302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4304:	20000544 	.word	0x20000544
    4308:	20000520 	.word	0x20000520
    430c:	38e38e39 	.word	0x38e38e39
    4310:	200016f0 	.word	0x200016f0
    4314:	00012a19 	.word	0x00012a19

00004318 <usb_data_to_host>:
{
    4318:	b510      	push	{r4, lr}
    431a:	b082      	sub	sp, #8
	if (usb_dev.zlp_flag == false) {
    431c:	4b13      	ldr	r3, [pc, #76]	; (436c <usb_data_to_host+0x54>)
    431e:	7d1b      	ldrb	r3, [r3, #20]
    4320:	b9cb      	cbnz	r3, 4356 <usb_data_to_host+0x3e>
		uint32_t chunk = usb_dev.data_buf_residue;
    4322:	4c12      	ldr	r4, [pc, #72]	; (436c <usb_data_to_host+0x54>)
    4324:	68e2      	ldr	r2, [r4, #12]
    4326:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    4328:	ab01      	add	r3, sp, #4
    432a:	68a1      	ldr	r1, [r4, #8]
    432c:	2080      	movs	r0, #128	; 0x80
    432e:	f00e fbb6 	bl	12a9e <usb_write>
		usb_dev.data_buf += chunk;
    4332:	9901      	ldr	r1, [sp, #4]
    4334:	68a2      	ldr	r2, [r4, #8]
    4336:	440a      	add	r2, r1
    4338:	60a2      	str	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    433a:	68e3      	ldr	r3, [r4, #12]
    433c:	1a5b      	subs	r3, r3, r1
    433e:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue &&
    4340:	b98b      	cbnz	r3, 4366 <usb_data_to_host+0x4e>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    4342:	88e2      	ldrh	r2, [r4, #6]
    4344:	6923      	ldr	r3, [r4, #16]
		if (!usb_dev.data_buf_residue &&
    4346:	429a      	cmp	r2, r3
    4348:	dd0d      	ble.n	4366 <usb_data_to_host+0x4e>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
    434a:	f013 0f3f 	tst.w	r3, #63	; 0x3f
    434e:	d10a      	bne.n	4366 <usb_data_to_host+0x4e>
				usb_dev.zlp_flag = true;
    4350:	2201      	movs	r2, #1
    4352:	7522      	strb	r2, [r4, #20]
    4354:	e007      	b.n	4366 <usb_data_to_host+0x4e>
		usb_dev.zlp_flag = false;
    4356:	2100      	movs	r1, #0
    4358:	4b04      	ldr	r3, [pc, #16]	; (436c <usb_data_to_host+0x54>)
    435a:	7519      	strb	r1, [r3, #20]
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    435c:	460b      	mov	r3, r1
    435e:	460a      	mov	r2, r1
    4360:	2080      	movs	r0, #128	; 0x80
    4362:	f004 f8ed 	bl	8540 <usb_dc_ep_write>
}
    4366:	b002      	add	sp, #8
    4368:	bd10      	pop	{r4, pc}
    436a:	bf00      	nop
    436c:	200016f0 	.word	0x200016f0

00004370 <usb_handle_control_transfer>:
{
    4370:	b510      	push	{r4, lr}
    4372:	b084      	sub	sp, #16
	uint32_t chunk = 0U;
    4374:	2300      	movs	r3, #0
    4376:	9303      	str	r3, [sp, #12]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    4378:	4604      	mov	r4, r0
    437a:	b900      	cbnz	r0, 437e <usb_handle_control_transfer+0xe>
    437c:	b331      	cbz	r1, 43cc <usb_handle_control_transfer+0x5c>
	} else if (ep == USB_CONTROL_EP_OUT) {
    437e:	2c00      	cmp	r4, #0
    4380:	f040 8094 	bne.w	44ac <usb_handle_control_transfer+0x13c>
		if (usb_dev.data_buf_residue <= 0) {
    4384:	4b50      	ldr	r3, [pc, #320]	; (44c8 <usb_handle_control_transfer+0x158>)
    4386:	68da      	ldr	r2, [r3, #12]
    4388:	2a00      	cmp	r2, #0
    438a:	dd77      	ble.n	447c <usb_handle_control_transfer+0x10c>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    438c:	ab03      	add	r3, sp, #12
    438e:	494e      	ldr	r1, [pc, #312]	; (44c8 <usb_handle_control_transfer+0x158>)
    4390:	6889      	ldr	r1, [r1, #8]
    4392:	2000      	movs	r0, #0
    4394:	f00f fad7 	bl	13946 <usb_dc_ep_read>
    4398:	2800      	cmp	r0, #0
    439a:	db7c      	blt.n	4496 <usb_handle_control_transfer+0x126>
		usb_dev.data_buf += chunk;
    439c:	9803      	ldr	r0, [sp, #12]
    439e:	4a4a      	ldr	r2, [pc, #296]	; (44c8 <usb_handle_control_transfer+0x158>)
    43a0:	6891      	ldr	r1, [r2, #8]
    43a2:	4401      	add	r1, r0
    43a4:	6091      	str	r1, [r2, #8]
		usb_dev.data_buf_residue -= chunk;
    43a6:	68d3      	ldr	r3, [r2, #12]
    43a8:	1a1b      	subs	r3, r3, r0
    43aa:	60d3      	str	r3, [r2, #12]
		if (usb_dev.data_buf_residue == 0) {
    43ac:	2b00      	cmp	r3, #0
    43ae:	d17f      	bne.n	44b0 <usb_handle_control_transfer+0x140>
			usb_dev.data_buf = usb_dev.req_data;
    43b0:	4610      	mov	r0, r2
    43b2:	f102 0338 	add.w	r3, r2, #56	; 0x38
    43b6:	f842 3f08 	str.w	r3, [r2, #8]!
			if (!usb_handle_request(setup,
    43ba:	f100 0110 	add.w	r1, r0, #16
    43be:	f7ff fbf1 	bl	3ba4 <usb_handle_request>
    43c2:	2800      	cmp	r0, #0
    43c4:	d06e      	beq.n	44a4 <usb_handle_control_transfer+0x134>
			usb_data_to_host();
    43c6:	f7ff ffa7 	bl	4318 <usb_data_to_host>
    43ca:	e071      	b.n	44b0 <usb_handle_control_transfer+0x140>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    43cc:	2208      	movs	r2, #8
    43ce:	a901      	add	r1, sp, #4
    43d0:	f00f fab9 	bl	13946 <usb_dc_ep_read>
    43d4:	2800      	cmp	r0, #0
    43d6:	db2e      	blt.n	4436 <usb_handle_control_transfer+0xc6>
		setup->bmRequestType = setup_raw.bmRequestType;
    43d8:	f89d 0004 	ldrb.w	r0, [sp, #4]
    43dc:	4b3a      	ldr	r3, [pc, #232]	; (44c8 <usb_handle_control_transfer+0x158>)
    43de:	7018      	strb	r0, [r3, #0]
		setup->bRequest = setup_raw.bRequest;
    43e0:	f89d 2005 	ldrb.w	r2, [sp, #5]
    43e4:	705a      	strb	r2, [r3, #1]
		setup->wValue = sys_le16_to_cpu(setup_raw.wValue);
    43e6:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    43ea:	805a      	strh	r2, [r3, #2]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    43ec:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    43f0:	809a      	strh	r2, [r3, #4]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    43f2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    43f6:	80d9      	strh	r1, [r3, #6]
		usb_dev.data_buf = usb_dev.req_data;
    43f8:	f103 0238 	add.w	r2, r3, #56	; 0x38
    43fc:	609a      	str	r2, [r3, #8]
		usb_dev.zlp_flag = false;
    43fe:	2200      	movs	r2, #0
    4400:	751a      	strb	r2, [r3, #20]
		usb_dev.data_buf_len = 0;
    4402:	611a      	str	r2, [r3, #16]
		usb_dev.data_buf_residue = 0;
    4404:	60da      	str	r2, [r3, #12]
		if (usb_reqtype_is_to_device(setup)) {
    4406:	f010 0f80 	tst.w	r0, #128	; 0x80
    440a:	d102      	bne.n	4412 <usb_handle_control_transfer+0xa2>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    440c:	2980      	cmp	r1, #128	; 0x80
    440e:	d816      	bhi.n	443e <usb_handle_control_transfer+0xce>
			if (setup->wLength) {
    4410:	bb61      	cbnz	r1, 446c <usb_handle_control_transfer+0xfc>
		if (!usb_handle_request(setup,
    4412:	482d      	ldr	r0, [pc, #180]	; (44c8 <usb_handle_control_transfer+0x158>)
    4414:	f100 0208 	add.w	r2, r0, #8
    4418:	f100 0110 	add.w	r1, r0, #16
    441c:	f7ff fbc2 	bl	3ba4 <usb_handle_request>
    4420:	b340      	cbz	r0, 4474 <usb_handle_control_transfer+0x104>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    4422:	4b29      	ldr	r3, [pc, #164]	; (44c8 <usb_handle_control_transfer+0x158>)
    4424:	88da      	ldrh	r2, [r3, #6]
    4426:	6919      	ldr	r1, [r3, #16]
    4428:	428a      	cmp	r2, r1
    442a:	bfa8      	it	ge
    442c:	460a      	movge	r2, r1
    442e:	60da      	str	r2, [r3, #12]
		usb_data_to_host();
    4430:	f7ff ff72 	bl	4318 <usb_data_to_host>
    4434:	e03c      	b.n	44b0 <usb_handle_control_transfer+0x140>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    4436:	2080      	movs	r0, #128	; 0x80
    4438:	f003 ff9a 	bl	8370 <usb_dc_ep_set_stall>
			return;
    443c:	e038      	b.n	44b0 <usb_handle_control_transfer+0x140>
    443e:	4b23      	ldr	r3, [pc, #140]	; (44cc <usb_handle_control_transfer+0x15c>)
    4440:	4a23      	ldr	r2, [pc, #140]	; (44d0 <usb_handle_control_transfer+0x160>)
    4442:	1a9b      	subs	r3, r3, r2
    4444:	08db      	lsrs	r3, r3, #3
				LOG_ERR("Request buffer too small");
    4446:	f04f 0100 	mov.w	r1, #0
    444a:	2201      	movs	r2, #1
    444c:	f362 0102 	bfi	r1, r2, #0, #3
    4450:	f36f 01c5 	bfc	r1, #3, #3
    4454:	f363 118f 	bfi	r1, r3, #6, #10
    4458:	481e      	ldr	r0, [pc, #120]	; (44d4 <usb_handle_control_transfer+0x164>)
    445a:	f7fe ffbd 	bl	33d8 <log_0>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    445e:	2080      	movs	r0, #128	; 0x80
    4460:	f003 ff86 	bl	8370 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    4464:	2000      	movs	r0, #0
    4466:	f003 ff83 	bl	8370 <usb_dc_ep_set_stall>
				return;
    446a:	e021      	b.n	44b0 <usb_handle_control_transfer+0x140>
				usb_dev.data_buf_len = setup->wLength;
    446c:	4b16      	ldr	r3, [pc, #88]	; (44c8 <usb_handle_control_transfer+0x158>)
    446e:	6119      	str	r1, [r3, #16]
				usb_dev.data_buf_residue = setup->wLength;
    4470:	60d9      	str	r1, [r3, #12]
				return;
    4472:	e01d      	b.n	44b0 <usb_handle_control_transfer+0x140>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    4474:	2080      	movs	r0, #128	; 0x80
    4476:	f003 ff7b 	bl	8370 <usb_dc_ep_set_stall>
			return;
    447a:	e019      	b.n	44b0 <usb_handle_control_transfer+0x140>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    447c:	ab03      	add	r3, sp, #12
    447e:	2200      	movs	r2, #0
    4480:	4911      	ldr	r1, [pc, #68]	; (44c8 <usb_handle_control_transfer+0x158>)
    4482:	6889      	ldr	r1, [r1, #8]
    4484:	4610      	mov	r0, r2
    4486:	f00f fa5e 	bl	13946 <usb_dc_ep_read>
    448a:	2800      	cmp	r0, #0
    448c:	da10      	bge.n	44b0 <usb_handle_control_transfer+0x140>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    448e:	2080      	movs	r0, #128	; 0x80
    4490:	f003 ff6e 	bl	8370 <usb_dc_ep_set_stall>
			return;
    4494:	e00c      	b.n	44b0 <usb_handle_control_transfer+0x140>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    4496:	2080      	movs	r0, #128	; 0x80
    4498:	f003 ff6a 	bl	8370 <usb_dc_ep_set_stall>
			usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    449c:	2000      	movs	r0, #0
    449e:	f003 ff67 	bl	8370 <usb_dc_ep_set_stall>
			return;
    44a2:	e005      	b.n	44b0 <usb_handle_control_transfer+0x140>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    44a4:	2080      	movs	r0, #128	; 0x80
    44a6:	f003 ff63 	bl	8370 <usb_dc_ep_set_stall>
				return;
    44aa:	e001      	b.n	44b0 <usb_handle_control_transfer+0x140>
	} else if (ep == USB_CONTROL_EP_IN) {
    44ac:	2c80      	cmp	r4, #128	; 0x80
    44ae:	d001      	beq.n	44b4 <usb_handle_control_transfer+0x144>
}
    44b0:	b004      	add	sp, #16
    44b2:	bd10      	pop	{r4, pc}
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    44b4:	4b04      	ldr	r3, [pc, #16]	; (44c8 <usb_handle_control_transfer+0x158>)
    44b6:	68db      	ldr	r3, [r3, #12]
    44b8:	b91b      	cbnz	r3, 44c2 <usb_handle_control_transfer+0x152>
    44ba:	4b03      	ldr	r3, [pc, #12]	; (44c8 <usb_handle_control_transfer+0x158>)
    44bc:	7d1b      	ldrb	r3, [r3, #20]
    44be:	2b00      	cmp	r3, #0
    44c0:	d0f6      	beq.n	44b0 <usb_handle_control_transfer+0x140>
			usb_data_to_host();
    44c2:	f7ff ff29 	bl	4318 <usb_data_to_host>
		__ASSERT_NO_MSG(false);
    44c6:	e7f3      	b.n	44b0 <usb_handle_control_transfer+0x140>
    44c8:	200016f0 	.word	0x200016f0
    44cc:	00016648 	.word	0x00016648
    44d0:	000165d8 	.word	0x000165d8
    44d4:	000169b4 	.word	0x000169b4

000044d8 <usb_set_config>:

int usb_set_config(const uint8_t *device_descriptor)
{
    44d8:	b508      	push	{r3, lr}
	/* register descriptors */
	usb_register_descriptors(device_descriptor);
    44da:	f7ff fb7f 	bl	3bdc <usb_register_descriptors>

	/* register standard request handler */
	usb_register_request_handler(USB_REQTYPE_TYPE_STANDARD,
    44de:	4908      	ldr	r1, [pc, #32]	; (4500 <usb_set_config+0x28>)
    44e0:	2000      	movs	r0, #0
    44e2:	f7ff fb73 	bl	3bcc <usb_register_request_handler>
				     usb_handle_standard_request);

	/* register class request handlers for each interface*/
	usb_register_request_handler(USB_REQTYPE_TYPE_CLASS, class_handler);
    44e6:	4907      	ldr	r1, [pc, #28]	; (4504 <usb_set_config+0x2c>)
    44e8:	2001      	movs	r0, #1
    44ea:	f7ff fb6f 	bl	3bcc <usb_register_request_handler>

	/* register vendor request handler */
	usb_register_request_handler(USB_REQTYPE_TYPE_VENDOR, vendor_handler);
    44ee:	4906      	ldr	r1, [pc, #24]	; (4508 <usb_set_config+0x30>)
    44f0:	2002      	movs	r0, #2
    44f2:	f7ff fb6b 	bl	3bcc <usb_register_request_handler>

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);
    44f6:	4805      	ldr	r0, [pc, #20]	; (450c <usb_set_config+0x34>)
    44f8:	f7ff fc12 	bl	3d20 <usb_register_custom_req_handler>

	return 0;
}
    44fc:	2000      	movs	r0, #0
    44fe:	bd08      	pop	{r3, pc}
    4500:	000041b9 	.word	0x000041b9
    4504:	00003d9d 	.word	0x00003d9d
    4508:	00003e7d 	.word	0x00003e7d
    450c:	00003dfd 	.word	0x00003dfd

00004510 <usb_device_init>:
/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(const struct device *dev)
{
    4510:	b508      	push	{r3, lr}
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
    4512:	4b10      	ldr	r3, [pc, #64]	; (4554 <usb_device_init+0x44>)
    4514:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
    4518:	b10b      	cbz	r3, 451e <usb_device_init+0xe>
		return 0;
    451a:	2000      	movs	r0, #0
	}

	usb_set_config(device_descriptor);

	return 0;
}
    451c:	bd08      	pop	{r3, pc}
	device_descriptor = usb_get_device_descriptor();
    451e:	f000 f9d7 	bl	48d0 <usb_get_device_descriptor>
	if (!device_descriptor) {
    4522:	b118      	cbz	r0, 452c <usb_device_init+0x1c>
	usb_set_config(device_descriptor);
    4524:	f7ff ffd8 	bl	44d8 <usb_set_config>
	return 0;
    4528:	2000      	movs	r0, #0
    452a:	e7f7      	b.n	451c <usb_device_init+0xc>
    452c:	4b0a      	ldr	r3, [pc, #40]	; (4558 <usb_device_init+0x48>)
    452e:	4a0b      	ldr	r2, [pc, #44]	; (455c <usb_device_init+0x4c>)
    4530:	1a9b      	subs	r3, r3, r2
    4532:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to configure USB device stack");
    4534:	f04f 0100 	mov.w	r1, #0
    4538:	2201      	movs	r2, #1
    453a:	f362 0102 	bfi	r1, r2, #0, #3
    453e:	f36f 01c5 	bfc	r1, #3, #3
    4542:	f363 118f 	bfi	r1, r3, #6, #10
    4546:	4806      	ldr	r0, [pc, #24]	; (4560 <usb_device_init+0x50>)
    4548:	f7fe ff46 	bl	33d8 <log_0>
		return -1;
    454c:	f04f 30ff 	mov.w	r0, #4294967295
    4550:	e7e4      	b.n	451c <usb_device_init+0xc>
    4552:	bf00      	nop
    4554:	200016f0 	.word	0x200016f0
    4558:	00016648 	.word	0x00016648
    455c:	000165d8 	.word	0x000165d8
    4560:	000169d0 	.word	0x000169d0

00004564 <usb_enable>:
{
    4564:	b530      	push	{r4, r5, lr}
    4566:	b083      	sub	sp, #12
    4568:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
    456a:	f04f 32ff 	mov.w	r2, #4294967295
    456e:	f04f 33ff 	mov.w	r3, #4294967295
    4572:	482d      	ldr	r0, [pc, #180]	; (4628 <usb_enable+0xc4>)
    4574:	f00b fbe2 	bl	fd3c <z_impl_k_mutex_lock>
	if (usb_dev.enabled == true) {
    4578:	4b2c      	ldr	r3, [pc, #176]	; (462c <usb_enable+0xc8>)
    457a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
    457e:	2b00      	cmp	r3, #0
    4580:	d14a      	bne.n	4618 <usb_enable+0xb4>
	ret = usb_vbus_set(true);
    4582:	2001      	movs	r0, #1
    4584:	f00e fa10 	bl	129a8 <usb_vbus_set>
	if (ret < 0) {
    4588:	1e04      	subs	r4, r0, #0
    458a:	db46      	blt.n	461a <usb_enable+0xb6>
	usb_dev.user_status_callback = status_cb;
    458c:	4b27      	ldr	r3, [pc, #156]	; (462c <usb_enable+0xc8>)
    458e:	621d      	str	r5, [r3, #32]
	usb_register_status_callback(forward_status_cb);
    4590:	4c27      	ldr	r4, [pc, #156]	; (4630 <usb_enable+0xcc>)
    4592:	4620      	mov	r0, r4
    4594:	f7ff fbca 	bl	3d2c <usb_register_status_callback>
	usb_dc_set_status_callback(forward_status_cb);
    4598:	4620      	mov	r0, r4
    459a:	f004 f9d7 	bl	894c <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    459e:	f003 fe0b 	bl	81b8 <usb_dc_attach>
	if (ret < 0) {
    45a2:	1e04      	subs	r4, r0, #0
    45a4:	db39      	blt.n	461a <usb_enable+0xb6>
	ret = usb_transfer_init();
    45a6:	f000 fbbd 	bl	4d24 <usb_transfer_init>
	if (ret < 0) {
    45aa:	1e04      	subs	r4, r0, #0
    45ac:	db35      	blt.n	461a <usb_enable+0xb6>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    45ae:	2340      	movs	r3, #64	; 0x40
    45b0:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    45b4:	2300      	movs	r3, #0
    45b6:	f88d 3004 	strb.w	r3, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    45ba:	f88d 3000 	strb.w	r3, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    45be:	4668      	mov	r0, sp
    45c0:	f003 fe98 	bl	82f4 <usb_dc_ep_configure>
	if (ret < 0) {
    45c4:	1e04      	subs	r4, r0, #0
    45c6:	db28      	blt.n	461a <usb_enable+0xb6>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    45c8:	2380      	movs	r3, #128	; 0x80
    45ca:	f88d 3000 	strb.w	r3, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    45ce:	4668      	mov	r0, sp
    45d0:	f003 fe90 	bl	82f4 <usb_dc_ep_configure>
	if (ret < 0) {
    45d4:	1e04      	subs	r4, r0, #0
    45d6:	db20      	blt.n	461a <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    45d8:	4916      	ldr	r1, [pc, #88]	; (4634 <usb_enable+0xd0>)
    45da:	2000      	movs	r0, #0
    45dc:	f004 f9a2 	bl	8924 <usb_dc_ep_set_callback>
	if (ret < 0) {
    45e0:	1e04      	subs	r4, r0, #0
    45e2:	db1a      	blt.n	461a <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    45e4:	4913      	ldr	r1, [pc, #76]	; (4634 <usb_enable+0xd0>)
    45e6:	2080      	movs	r0, #128	; 0x80
    45e8:	f004 f99c 	bl	8924 <usb_dc_ep_set_callback>
	if (ret < 0) {
    45ec:	1e04      	subs	r4, r0, #0
    45ee:	db14      	blt.n	461a <usb_enable+0xb6>
	ret = composite_setup_ep_cb();
    45f0:	f7ff fe1a 	bl	4228 <composite_setup_ep_cb>
	if (ret < 0) {
    45f4:	1e04      	subs	r4, r0, #0
    45f6:	db10      	blt.n	461a <usb_enable+0xb6>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    45f8:	2000      	movs	r0, #0
    45fa:	f003 ff49 	bl	8490 <usb_dc_ep_enable>
	if (ret < 0) {
    45fe:	1e04      	subs	r4, r0, #0
    4600:	db0b      	blt.n	461a <usb_enable+0xb6>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    4602:	2080      	movs	r0, #128	; 0x80
    4604:	f003 ff44 	bl	8490 <usb_dc_ep_enable>
	if (ret < 0) {
    4608:	1e04      	subs	r4, r0, #0
    460a:	db06      	blt.n	461a <usb_enable+0xb6>
	usb_dev.enabled = true;
    460c:	4b07      	ldr	r3, [pc, #28]	; (462c <usb_enable+0xc8>)
    460e:	2201      	movs	r2, #1
    4610:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	ret = 0;
    4614:	2400      	movs	r4, #0
    4616:	e000      	b.n	461a <usb_enable+0xb6>
		ret = 0;
    4618:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
    461a:	4803      	ldr	r0, [pc, #12]	; (4628 <usb_enable+0xc4>)
    461c:	f00b fc18 	bl	fe50 <z_impl_k_mutex_unlock>
}
    4620:	4620      	mov	r0, r4
    4622:	b003      	add	sp, #12
    4624:	bd30      	pop	{r4, r5, pc}
    4626:	bf00      	nop
    4628:	2000042c 	.word	0x2000042c
    462c:	200016f0 	.word	0x200016f0
    4630:	0000428d 	.word	0x0000428d
    4634:	00004371 	.word	0x00004371

00004638 <usb_get_cfg_data>:
 * The interface descriptor of a USB function must be assigned to the
 * usb_cfg_data so that usb_ep_cfg_data and matching endpoint descriptor
 * can be found.
 */
static struct usb_cfg_data *usb_get_cfg_data(struct usb_if_descriptor *iface)
{
    4638:	b410      	push	{r4}
	size_t length = (__usb_data_end - __usb_data_start);
    463a:	4c0e      	ldr	r4, [pc, #56]	; (4674 <usb_get_cfg_data+0x3c>)
    463c:	4b0e      	ldr	r3, [pc, #56]	; (4678 <usb_get_cfg_data+0x40>)
    463e:	1ae4      	subs	r4, r4, r3
    4640:	10a3      	asrs	r3, r4, #2
    4642:	4c0e      	ldr	r4, [pc, #56]	; (467c <usb_get_cfg_data+0x44>)
    4644:	fb04 f403 	mul.w	r4, r4, r3

	for (size_t i = 0; i < length; i++) {
    4648:	2300      	movs	r3, #0
    464a:	42a3      	cmp	r3, r4
    464c:	d20e      	bcs.n	466c <usb_get_cfg_data+0x34>
		if (__usb_data_start[i].interface_descriptor == iface) {
    464e:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
    4652:	4909      	ldr	r1, [pc, #36]	; (4678 <usb_get_cfg_data+0x40>)
    4654:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    4658:	6852      	ldr	r2, [r2, #4]
    465a:	4282      	cmp	r2, r0
    465c:	d001      	beq.n	4662 <usb_get_cfg_data+0x2a>
	for (size_t i = 0; i < length; i++) {
    465e:	3301      	adds	r3, #1
    4660:	e7f3      	b.n	464a <usb_get_cfg_data+0x12>
			return &__usb_data_start[i];
    4662:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    4666:	eb01 0083 	add.w	r0, r1, r3, lsl #2
    466a:	e000      	b.n	466e <usb_get_cfg_data+0x36>
		}
	}

	return NULL;
    466c:	2000      	movs	r0, #0
}
    466e:	bc10      	pop	{r4}
    4670:	4770      	bx	lr
    4672:	bf00      	nop
    4674:	20000544 	.word	0x20000544
    4678:	20000520 	.word	0x20000520
    467c:	38e38e39 	.word	0x38e38e39

00004680 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    4680:	b530      	push	{r4, r5, lr}
    4682:	b08b      	sub	sp, #44	; 0x2c
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    4684:	ac01      	add	r4, sp, #4
    4686:	4d1b      	ldr	r5, [pc, #108]	; (46f4 <usb_update_sn_string_descriptor+0x74>)
    4688:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    468a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    468c:	682b      	ldr	r3, [r5, #0]
    468e:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    4690:	2210      	movs	r2, #16
    4692:	2100      	movs	r1, #0
    4694:	a806      	add	r0, sp, #24
    4696:	f00e fdcf 	bl	13238 <memset>
	memset(sn, 0, sizeof(sn));
    469a:	2212      	movs	r2, #18
    469c:	2100      	movs	r1, #0
    469e:	4816      	ldr	r0, [pc, #88]	; (46f8 <usb_update_sn_string_descriptor+0x78>)
    46a0:	f00e fdca 	bl	13238 <memset>
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    46a4:	2110      	movs	r1, #16
    46a6:	a806      	add	r0, sp, #24
    46a8:	f00f fa98 	bl	13bdc <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    46ac:	2800      	cmp	r0, #0
    46ae:	dd1d      	ble.n	46ec <usb_update_sn_string_descriptor+0x6c>
		skip = MAX(0, hwlen - usblen);
    46b0:	3808      	subs	r0, #8
    46b2:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    46b6:	2200      	movs	r2, #0
    46b8:	e016      	b.n	46e8 <usb_update_sn_string_descriptor+0x68>
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    46ba:	18a3      	adds	r3, r4, r2
    46bc:	a90a      	add	r1, sp, #40	; 0x28
    46be:	440b      	add	r3, r1
    46c0:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    46c4:	0051      	lsls	r1, r2, #1
    46c6:	a80a      	add	r0, sp, #40	; 0x28
    46c8:	eb00 1013 	add.w	r0, r0, r3, lsr #4
    46cc:	f810 5c24 	ldrb.w	r5, [r0, #-36]
    46d0:	4809      	ldr	r0, [pc, #36]	; (46f8 <usb_update_sn_string_descriptor+0x78>)
    46d2:	f800 5012 	strb.w	r5, [r0, r2, lsl #1]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    46d6:	f003 030f 	and.w	r3, r3, #15
    46da:	3101      	adds	r1, #1
    46dc:	ad0a      	add	r5, sp, #40	; 0x28
    46de:	442b      	add	r3, r5
    46e0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
    46e4:	5443      	strb	r3, [r0, r1]
		for (int i = 0; i < usblen; i++) {
    46e6:	3201      	adds	r2, #1
    46e8:	2a07      	cmp	r2, #7
    46ea:	dde6      	ble.n	46ba <usb_update_sn_string_descriptor+0x3a>
		}
	}

	return sn;
}
    46ec:	4802      	ldr	r0, [pc, #8]	; (46f8 <usb_update_sn_string_descriptor+0x78>)
    46ee:	b00b      	add	sp, #44	; 0x2c
    46f0:	bd30      	pop	{r4, r5, pc}
    46f2:	bf00      	nop
    46f4:	00016a04 	.word	0x00016a04
    46f8:	200017b4 	.word	0x200017b4

000046fc <usb_fix_ascii_sn_string_descriptor>:

static void usb_fix_ascii_sn_string_descriptor(struct usb_sn_descriptor *sn)
{
    46fc:	b570      	push	{r4, r5, r6, lr}
    46fe:	4604      	mov	r4, r0
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    4700:	f7ff ffbe 	bl	4680 <usb_update_sn_string_descriptor>
	int runtime_sn_len, default_sn_len;

	if (!runtime_sn) {
    4704:	b120      	cbz	r0, 4710 <usb_fix_ascii_sn_string_descriptor+0x14>
    4706:	4605      	mov	r5, r0
		return;
	}

	runtime_sn_len = strlen(runtime_sn);
    4708:	f00e fd24 	bl	13154 <strlen>
	if (!runtime_sn_len) {
    470c:	4606      	mov	r6, r0
    470e:	b900      	cbnz	r0, 4712 <usb_fix_ascii_sn_string_descriptor+0x16>
			"length as CONFIG_USB_DEVICE_SN");
		return;
	}

	memcpy(sn->bString, runtime_sn, runtime_sn_len);
}
    4710:	bd70      	pop	{r4, r5, r6, pc}
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    4712:	480e      	ldr	r0, [pc, #56]	; (474c <usb_fix_ascii_sn_string_descriptor+0x50>)
    4714:	f00e fd1e 	bl	13154 <strlen>
	if (runtime_sn_len != default_sn_len) {
    4718:	4286      	cmp	r6, r0
    471a:	d010      	beq.n	473e <usb_fix_ascii_sn_string_descriptor+0x42>
    471c:	4b0c      	ldr	r3, [pc, #48]	; (4750 <usb_fix_ascii_sn_string_descriptor+0x54>)
    471e:	4a0d      	ldr	r2, [pc, #52]	; (4754 <usb_fix_ascii_sn_string_descriptor+0x58>)
    4720:	1a9b      	subs	r3, r3, r2
    4722:	08db      	lsrs	r3, r3, #3
		LOG_ERR("the new SN descriptor doesn't have the same "
    4724:	f04f 0100 	mov.w	r1, #0
    4728:	2201      	movs	r2, #1
    472a:	f362 0102 	bfi	r1, r2, #0, #3
    472e:	f36f 01c5 	bfc	r1, #3, #3
    4732:	f363 118f 	bfi	r1, r3, #6, #10
    4736:	4808      	ldr	r0, [pc, #32]	; (4758 <usb_fix_ascii_sn_string_descriptor+0x5c>)
    4738:	f7fe fe4e 	bl	33d8 <log_0>
		return;
    473c:	e7e8      	b.n	4710 <usb_fix_ascii_sn_string_descriptor+0x14>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    473e:	4632      	mov	r2, r6
    4740:	4629      	mov	r1, r5
    4742:	1ca0      	adds	r0, r4, #2
    4744:	f00e fd54 	bl	131f0 <memcpy>
    4748:	e7e2      	b.n	4710 <usb_fix_ascii_sn_string_descriptor+0x14>
    474a:	bf00      	nop
    474c:	00016a04 	.word	0x00016a04
    4750:	00016640 	.word	0x00016640
    4754:	000165d8 	.word	0x000165d8
    4758:	00016a18 	.word	0x00016a18

0000475c <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
    475c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4760:	b082      	sub	sp, #8
    4762:	4604      	mov	r4, r0
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	uint8_t numof_ifaces = 0U;
	uint8_t str_descr_idx = 0U;
	uint32_t requested_ep = BIT(16) | BIT(0);
    4764:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    4768:	9301      	str	r3, [sp, #4]
	uint8_t str_descr_idx = 0U;
    476a:	2500      	movs	r5, #0
	uint8_t numof_ifaces = 0U;
    476c:	462f      	mov	r7, r5
	struct usb_cfg_data *cfg_data = NULL;
    476e:	46a8      	mov	r8, r5
	struct usb_cfg_descriptor *cfg_descr = NULL;
    4770:	462e      	mov	r6, r5

	while (head->bLength != 0U) {
    4772:	e062      	b.n	483a <usb_fix_descriptor+0xde>
			LOG_DBG("Association descriptor %p", head);
			break;
		case USB_DESC_INTERFACE:
			if_descr = (struct usb_if_descriptor *)head;
			LOG_DBG("Interface descriptor %p", head);
			if (if_descr->bAlternateSetting) {
    4774:	78e3      	ldrb	r3, [r4, #3]
    4776:	2b00      	cmp	r3, #0
    4778:	d15d      	bne.n	4836 <usb_fix_descriptor+0xda>
				LOG_DBG("Skip alternate interface");
				break;
			}

			if (if_descr->bInterfaceNumber == 0U) {
    477a:	78a3      	ldrb	r3, [r4, #2]
    477c:	b94b      	cbnz	r3, 4792 <usb_fix_descriptor+0x36>
				cfg_data = usb_get_cfg_data(if_descr);
    477e:	4620      	mov	r0, r4
    4780:	f7ff ff5a 	bl	4638 <usb_get_cfg_data>
				if (!cfg_data) {
    4784:	4680      	mov	r8, r0
    4786:	b138      	cbz	r0, 4798 <usb_fix_descriptor+0x3c>
					LOG_ERR("There is no usb_cfg_data "
						"for %p", head);
					return -1;
				}

				if (cfg_data->interface_config) {
    4788:	6883      	ldr	r3, [r0, #8]
    478a:	b113      	cbz	r3, 4792 <usb_fix_descriptor+0x36>
					cfg_data->interface_config(head,
    478c:	4639      	mov	r1, r7
    478e:	4620      	mov	r0, r4
    4790:	4798      	blx	r3
							numof_ifaces);
				}
			}

			numof_ifaces++;
    4792:	3701      	adds	r7, #1
    4794:	b2ff      	uxtb	r7, r7
			break;
    4796:	e04e      	b.n	4836 <usb_fix_descriptor+0xda>
    4798:	4b46      	ldr	r3, [pc, #280]	; (48b4 <usb_fix_descriptor+0x158>)
    479a:	4a47      	ldr	r2, [pc, #284]	; (48b8 <usb_fix_descriptor+0x15c>)
    479c:	1a9b      	subs	r3, r3, r2
    479e:	08db      	lsrs	r3, r3, #3
					LOG_ERR("There is no usb_cfg_data "
    47a0:	f04f 0200 	mov.w	r2, #0
    47a4:	2101      	movs	r1, #1
    47a6:	f361 0202 	bfi	r2, r1, #0, #3
    47aa:	f36f 02c5 	bfc	r2, #3, #3
    47ae:	f363 128f 	bfi	r2, r3, #6, #10
    47b2:	4621      	mov	r1, r4
    47b4:	4841      	ldr	r0, [pc, #260]	; (48bc <usb_fix_descriptor+0x160>)
    47b6:	f7fe fd7b 	bl	32b0 <log_1>
					return -1;
    47ba:	f04f 30ff 	mov.w	r0, #4294967295
    47be:	e073      	b.n	48a8 <usb_fix_descriptor+0x14c>
		case USB_DESC_ENDPOINT:
			if (!cfg_data) {
    47c0:	f1b8 0f00 	cmp.w	r8, #0
    47c4:	d018      	beq.n	47f8 <usb_fix_descriptor+0x9c>
				return -1;
			}

			LOG_DBG("Endpoint descriptor %p", head);
			ep_descr = (struct usb_ep_descriptor *)head;
			if (usb_validate_ep_cfg_data(ep_descr,
    47c6:	aa01      	add	r2, sp, #4
    47c8:	4641      	mov	r1, r8
    47ca:	4620      	mov	r0, r4
    47cc:	f00e f99a 	bl	12b04 <usb_validate_ep_cfg_data>
    47d0:	b388      	cbz	r0, 4836 <usb_fix_descriptor+0xda>
    47d2:	4b38      	ldr	r3, [pc, #224]	; (48b4 <usb_fix_descriptor+0x158>)
    47d4:	4a38      	ldr	r2, [pc, #224]	; (48b8 <usb_fix_descriptor+0x15c>)
    47d6:	1a9b      	subs	r3, r3, r2
    47d8:	08db      	lsrs	r3, r3, #3
						     cfg_data,
						     &requested_ep)) {
				LOG_ERR("Failed to validate endpoints");
    47da:	f04f 0100 	mov.w	r1, #0
    47de:	2201      	movs	r2, #1
    47e0:	f362 0102 	bfi	r1, r2, #0, #3
    47e4:	f36f 01c5 	bfc	r1, #3, #3
    47e8:	f363 118f 	bfi	r1, r3, #6, #10
    47ec:	4834      	ldr	r0, [pc, #208]	; (48c0 <usb_fix_descriptor+0x164>)
    47ee:	f7fe fdf3 	bl	33d8 <log_0>
				return -1;
    47f2:	f04f 30ff 	mov.w	r0, #4294967295
    47f6:	e057      	b.n	48a8 <usb_fix_descriptor+0x14c>
    47f8:	4b2e      	ldr	r3, [pc, #184]	; (48b4 <usb_fix_descriptor+0x158>)
    47fa:	4a2f      	ldr	r2, [pc, #188]	; (48b8 <usb_fix_descriptor+0x15c>)
    47fc:	1a9b      	subs	r3, r3, r2
    47fe:	08db      	lsrs	r3, r3, #3
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
    4800:	f04f 0100 	mov.w	r1, #0
    4804:	2201      	movs	r2, #1
    4806:	f362 0102 	bfi	r1, r2, #0, #3
    480a:	f36f 01c5 	bfc	r1, #3, #3
    480e:	f363 118f 	bfi	r1, r3, #6, #10
    4812:	482c      	ldr	r0, [pc, #176]	; (48c4 <usb_fix_descriptor+0x168>)
    4814:	f7fe fde0 	bl	33d8 <log_0>
				return -1;
    4818:	f04f 30ff 	mov.w	r0, #4294967295
    481c:	e044      	b.n	48a8 <usb_fix_descriptor+0x14c>
		case 0:
		case USB_DESC_STRING:
			/*
			 * Copy runtime SN string descriptor first, if has
			 */
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    481e:	2d03      	cmp	r5, #3
    4820:	d020      	beq.n	4864 <usb_fix_descriptor+0x108>
			}
			/*
			 * Skip language descriptor but correct
			 * wTotalLength and bNumInterfaces once.
			 */
			if (str_descr_idx) {
    4822:	bb1d      	cbnz	r5, 486c <usb_fix_descriptor+0x110>
				ascii7_to_utf16le(head);
			} else {
				if (!cfg_descr) {
    4824:	b336      	cbz	r6, 4874 <usb_fix_descriptor+0x118>
					return -1;
				}

				LOG_DBG("Now the wTotalLength is %zd",
					(uint8_t *)head - (uint8_t *)cfg_descr);
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    4826:	1ba3      	subs	r3, r4, r6
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    4828:	70b3      	strb	r3, [r6, #2]
	dst[1] = val >> 8;
    482a:	f3c3 2307 	ubfx	r3, r3, #8, #8
    482e:	70f3      	strb	r3, [r6, #3]
					     (uint8_t *)&cfg_descr->wTotalLength);
				cfg_descr->bNumInterfaces = numof_ifaces;
    4830:	7137      	strb	r7, [r6, #4]
			}

			str_descr_idx += 1U;
    4832:	3501      	adds	r5, #1
    4834:	b2ed      	uxtb	r5, r5
		default:
			break;
		}

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    4836:	7823      	ldrb	r3, [r4, #0]
    4838:	441c      	add	r4, r3
	while (head->bLength != 0U) {
    483a:	7823      	ldrb	r3, [r4, #0]
    483c:	b37b      	cbz	r3, 489e <usb_fix_descriptor+0x142>
		switch (head->bDescriptorType) {
    483e:	7863      	ldrb	r3, [r4, #1]
    4840:	2b05      	cmp	r3, #5
    4842:	d8f8      	bhi.n	4836 <usb_fix_descriptor+0xda>
    4844:	a201      	add	r2, pc, #4	; (adr r2, 484c <usb_fix_descriptor+0xf0>)
    4846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    484a:	bf00      	nop
    484c:	0000481f 	.word	0x0000481f
    4850:	00004837 	.word	0x00004837
    4854:	0000489b 	.word	0x0000489b
    4858:	0000481f 	.word	0x0000481f
    485c:	00004775 	.word	0x00004775
    4860:	000047c1 	.word	0x000047c1
				usb_fix_ascii_sn_string_descriptor(sn);
    4864:	4620      	mov	r0, r4
    4866:	f7ff ff49 	bl	46fc <usb_fix_ascii_sn_string_descriptor>
    486a:	e7da      	b.n	4822 <usb_fix_descriptor+0xc6>
				ascii7_to_utf16le(head);
    486c:	4620      	mov	r0, r4
    486e:	f00e f935 	bl	12adc <ascii7_to_utf16le>
    4872:	e7de      	b.n	4832 <usb_fix_descriptor+0xd6>
    4874:	4b0f      	ldr	r3, [pc, #60]	; (48b4 <usb_fix_descriptor+0x158>)
    4876:	4a10      	ldr	r2, [pc, #64]	; (48b8 <usb_fix_descriptor+0x15c>)
    4878:	1a9b      	subs	r3, r3, r2
    487a:	08db      	lsrs	r3, r3, #3
					LOG_ERR("Incomplete device descriptor");
    487c:	f04f 0100 	mov.w	r1, #0
    4880:	2201      	movs	r2, #1
    4882:	f362 0102 	bfi	r1, r2, #0, #3
    4886:	f36f 01c5 	bfc	r1, #3, #3
    488a:	f363 118f 	bfi	r1, r3, #6, #10
    488e:	480e      	ldr	r0, [pc, #56]	; (48c8 <usb_fix_descriptor+0x16c>)
    4890:	f7fe fda2 	bl	33d8 <log_0>
					return -1;
    4894:	f04f 30ff 	mov.w	r0, #4294967295
    4898:	e006      	b.n	48a8 <usb_fix_descriptor+0x14c>
			cfg_descr = (struct usb_cfg_descriptor *)head;
    489a:	4626      	mov	r6, r4
    489c:	e7cb      	b.n	4836 <usb_fix_descriptor+0xda>
	}

	if ((head + 1) != __usb_descriptor_end) {
    489e:	1ca0      	adds	r0, r4, #2
    48a0:	4b0a      	ldr	r3, [pc, #40]	; (48cc <usb_fix_descriptor+0x170>)
    48a2:	4298      	cmp	r0, r3
    48a4:	d103      	bne.n	48ae <usb_fix_descriptor+0x152>
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
	}

	return 0;
    48a6:	2000      	movs	r0, #0
}
    48a8:	b002      	add	sp, #8
    48aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return usb_fix_descriptor(head + 1);
    48ae:	f7ff ff55 	bl	475c <usb_fix_descriptor>
    48b2:	e7f9      	b.n	48a8 <usb_fix_descriptor+0x14c>
    48b4:	00016640 	.word	0x00016640
    48b8:	000165d8 	.word	0x000165d8
    48bc:	00016a64 	.word	0x00016a64
    48c0:	00016ac8 	.word	0x00016ac8
    48c4:	00016a84 	.word	0x00016a84
    48c8:	00016ae8 	.word	0x00016ae8
    48cc:	2000051f 	.word	0x2000051f

000048d0 <usb_get_device_descriptor>:


uint8_t *usb_get_device_descriptor(void)
{
    48d0:	b508      	push	{r3, lr}
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
    48d2:	480c      	ldr	r0, [pc, #48]	; (4904 <usb_get_device_descriptor+0x34>)
    48d4:	f7ff ff42 	bl	475c <usb_fix_descriptor>
    48d8:	b908      	cbnz	r0, 48de <usb_get_device_descriptor+0xe>
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
    48da:	480a      	ldr	r0, [pc, #40]	; (4904 <usb_get_device_descriptor+0x34>)
}
    48dc:	bd08      	pop	{r3, pc}
    48de:	4b0a      	ldr	r3, [pc, #40]	; (4908 <usb_get_device_descriptor+0x38>)
    48e0:	4a0a      	ldr	r2, [pc, #40]	; (490c <usb_get_device_descriptor+0x3c>)
    48e2:	1a9b      	subs	r3, r3, r2
    48e4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to fixup USB descriptor");
    48e6:	f04f 0100 	mov.w	r1, #0
    48ea:	2201      	movs	r2, #1
    48ec:	f362 0102 	bfi	r1, r2, #0, #3
    48f0:	f36f 01c5 	bfc	r1, #3, #3
    48f4:	f363 118f 	bfi	r1, r3, #6, #10
    48f8:	4805      	ldr	r0, [pc, #20]	; (4910 <usb_get_device_descriptor+0x40>)
    48fa:	f7fe fd6d 	bl	33d8 <log_0>
		return NULL;
    48fe:	2000      	movs	r0, #0
    4900:	e7ec      	b.n	48dc <usb_get_device_descriptor+0xc>
    4902:	bf00      	nop
    4904:	20000460 	.word	0x20000460
    4908:	00016640 	.word	0x00016640
    490c:	000165d8 	.word	0x000165d8
    4910:	00016b08 	.word	0x00016b08

00004914 <usb_ep_get_transfer>:
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    4914:	2300      	movs	r3, #0
    4916:	e000      	b.n	491a <usb_ep_get_transfer+0x6>
    4918:	3301      	adds	r3, #1
    491a:	2b03      	cmp	r3, #3
    491c:	dc0c      	bgt.n	4938 <usb_ep_get_transfer+0x24>
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    491e:	019a      	lsls	r2, r3, #6
    4920:	4906      	ldr	r1, [pc, #24]	; (493c <usb_ep_get_transfer+0x28>)
    4922:	5c8a      	ldrb	r2, [r1, r2]
    4924:	4282      	cmp	r2, r0
    4926:	d1f7      	bne.n	4918 <usb_ep_get_transfer+0x4>
    4928:	eb01 1283 	add.w	r2, r1, r3, lsl #6
    492c:	6852      	ldr	r2, [r2, #4]
    492e:	2a00      	cmp	r2, #0
    4930:	d0f2      	beq.n	4918 <usb_ep_get_transfer+0x4>
			return &ut_data[i];
    4932:	eb01 1083 	add.w	r0, r1, r3, lsl #6
    4936:	4770      	bx	lr
		}
	}

	return NULL;
    4938:	2000      	movs	r0, #0
}
    493a:	4770      	bx	lr
    493c:	200017c8 	.word	0x200017c8

00004940 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    4940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4944:	b082      	sub	sp, #8
    4946:	4604      	mov	r4, r0
	int ret = 0;
	uint32_t bytes;
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;
    4948:	f810 5c2c 	ldrb.w	r5, [r0, #-44]

	if (trans->status != -EBUSY) {
    494c:	f850 3c28 	ldr.w	r3, [r0, #-40]
    4950:	f113 0f10 	cmn.w	r3, #16
    4954:	d10c      	bne.n	4970 <usb_transfer_work+0x30>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    4956:	6903      	ldr	r3, [r0, #16]
    4958:	f013 0f02 	tst.w	r3, #2
    495c:	d062      	beq.n	4a24 <usb_transfer_work+0xe4>
		if (!trans->bsize) {
    495e:	f850 2c20 	ldr.w	r2, [r0, #-32]
    4962:	bb82      	cbnz	r2, 49c6 <usb_transfer_work+0x86>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    4964:	f013 0f04 	tst.w	r3, #4
    4968:	d026      	beq.n	49b8 <usb_transfer_work+0x78>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
			}
			trans->status = 0;
    496a:	2300      	movs	r3, #0
    496c:	f844 3c28 	str.w	r3, [r4, #-40]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    4970:	f854 3c28 	ldr.w	r3, [r4, #-40]
    4974:	f113 0f10 	cmn.w	r3, #16
    4978:	d01b      	beq.n	49b2 <usb_transfer_work+0x72>
    497a:	f854 6c18 	ldr.w	r6, [r4, #-24]
    497e:	b1c6      	cbz	r6, 49b2 <usb_transfer_work+0x72>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    4980:	f854 7c1c 	ldr.w	r7, [r4, #-28]
		void *priv = trans->priv;
    4984:	f854 8c14 	ldr.w	r8, [r4, #-20]

		if (k_is_in_isr()) {
    4988:	f011 f8dd 	bl	15b46 <k_is_in_isr>
    498c:	2800      	cmp	r0, #0
    498e:	f040 808f 	bne.w	4ab0 <usb_transfer_work+0x170>
		}

		LOG_DBG("Transfer done, ep 0x%02x, status %d, size %zu",
			trans->ep, trans->status, trans->tsize);

		trans->cb = NULL;
    4992:	2300      	movs	r3, #0
    4994:	f844 3c18 	str.w	r3, [r4, #-24]
		k_sem_give(&trans->sem);
    4998:	f1a4 0010 	sub.w	r0, r4, #16
	z_impl_k_sem_give(sem);
    499c:	f00b fad8 	bl	ff50 <z_impl_k_sem_give>

		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
    49a0:	f854 3c28 	ldr.w	r3, [r4, #-40]
    49a4:	f113 0f8c 	cmn.w	r3, #140	; 0x8c
    49a8:	d003      	beq.n	49b2 <usb_transfer_work+0x72>
			cb(ep, tsize, priv);
    49aa:	4642      	mov	r2, r8
    49ac:	4639      	mov	r1, r7
    49ae:	4628      	mov	r0, r5
    49b0:	47b0      	blx	r6
		}
	}
}
    49b2:	b002      	add	sp, #8
    49b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_write(ep, NULL, 0, NULL);
    49b8:	2300      	movs	r3, #0
    49ba:	461a      	mov	r2, r3
    49bc:	4619      	mov	r1, r3
    49be:	4628      	mov	r0, r5
    49c0:	f00e f86d 	bl	12a9e <usb_write>
    49c4:	e7d1      	b.n	496a <usb_transfer_work+0x2a>
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    49c6:	ab01      	add	r3, sp, #4
    49c8:	f850 1c24 	ldr.w	r1, [r0, #-36]
    49cc:	4628      	mov	r0, r5
    49ce:	f00e f866 	bl	12a9e <usb_write>
		if (ret) {
    49d2:	4601      	mov	r1, r0
    49d4:	b980      	cbnz	r0, 49f8 <usb_transfer_work+0xb8>
		trans->buffer += bytes;
    49d6:	f854 3c24 	ldr.w	r3, [r4, #-36]
    49da:	9a01      	ldr	r2, [sp, #4]
    49dc:	4413      	add	r3, r2
    49de:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    49e2:	f854 3c20 	ldr.w	r3, [r4, #-32]
    49e6:	1a9b      	subs	r3, r3, r2
    49e8:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    49ec:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    49f0:	4413      	add	r3, r2
    49f2:	f844 3c1c 	str.w	r3, [r4, #-28]
    49f6:	e7bb      	b.n	4970 <usb_transfer_work+0x30>
    49f8:	4a30      	ldr	r2, [pc, #192]	; (4abc <usb_transfer_work+0x17c>)
    49fa:	4b31      	ldr	r3, [pc, #196]	; (4ac0 <usb_transfer_work+0x180>)
    49fc:	1ad2      	subs	r2, r2, r3
    49fe:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    4a00:	f04f 0300 	mov.w	r3, #0
    4a04:	2001      	movs	r0, #1
    4a06:	f360 0302 	bfi	r3, r0, #0, #3
    4a0a:	f36f 03c5 	bfc	r3, #3, #3
    4a0e:	f362 138f 	bfi	r3, r2, #6, #10
    4a12:	462a      	mov	r2, r5
    4a14:	482b      	ldr	r0, [pc, #172]	; (4ac4 <usb_transfer_work+0x184>)
    4a16:	f7fe fc81 	bl	331c <log_2>
			trans->status = -EINVAL;
    4a1a:	f06f 0315 	mvn.w	r3, #21
    4a1e:	f844 3c28 	str.w	r3, [r4, #-40]
			goto done;
    4a22:	e7a5      	b.n	4970 <usb_transfer_work+0x30>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    4a24:	ab01      	add	r3, sp, #4
    4a26:	f850 2c20 	ldr.w	r2, [r0, #-32]
    4a2a:	f850 1c24 	ldr.w	r1, [r0, #-36]
    4a2e:	4628      	mov	r0, r5
    4a30:	f003 fe36 	bl	86a0 <usb_dc_ep_read_wait>
		if (ret) {
    4a34:	4601      	mov	r1, r0
    4a36:	b9a0      	cbnz	r0, 4a62 <usb_transfer_work+0x122>
		trans->buffer += bytes;
    4a38:	f854 3c24 	ldr.w	r3, [r4, #-36]
    4a3c:	9e01      	ldr	r6, [sp, #4]
    4a3e:	4433      	add	r3, r6
    4a40:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    4a44:	f854 3c20 	ldr.w	r3, [r4, #-32]
    4a48:	1b9b      	subs	r3, r3, r6
    4a4a:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    4a4e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    4a52:	4433      	add	r3, r6
    4a54:	f844 3c1c 	str.w	r3, [r4, #-28]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    4a58:	b9ce      	cbnz	r6, 4a8e <usb_transfer_work+0x14e>
			trans->status = 0;
    4a5a:	2300      	movs	r3, #0
    4a5c:	f844 3c28 	str.w	r3, [r4, #-40]
			goto done;
    4a60:	e786      	b.n	4970 <usb_transfer_work+0x30>
    4a62:	4a16      	ldr	r2, [pc, #88]	; (4abc <usb_transfer_work+0x17c>)
    4a64:	4b16      	ldr	r3, [pc, #88]	; (4ac0 <usb_transfer_work+0x180>)
    4a66:	1ad2      	subs	r2, r2, r3
    4a68:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    4a6a:	f04f 0300 	mov.w	r3, #0
    4a6e:	2001      	movs	r0, #1
    4a70:	f360 0302 	bfi	r3, r0, #0, #3
    4a74:	f36f 03c5 	bfc	r3, #3, #3
    4a78:	f362 138f 	bfi	r3, r2, #6, #10
    4a7c:	462a      	mov	r2, r5
    4a7e:	4811      	ldr	r0, [pc, #68]	; (4ac4 <usb_transfer_work+0x184>)
    4a80:	f7fe fc4c 	bl	331c <log_2>
			trans->status = -EINVAL;
    4a84:	f06f 0315 	mvn.w	r3, #21
    4a88:	f844 3c28 	str.w	r3, [r4, #-40]
			goto done;
    4a8c:	e770      	b.n	4970 <usb_transfer_work+0x30>
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    4a8e:	4628      	mov	r0, r5
    4a90:	f003 ff62 	bl	8958 <usb_dc_ep_mps>
    4a94:	fbb6 f3f0 	udiv	r3, r6, r0
    4a98:	fb00 6013 	mls	r0, r0, r3, r6
    4a9c:	2800      	cmp	r0, #0
    4a9e:	d1dc      	bne.n	4a5a <usb_transfer_work+0x11a>
    4aa0:	f854 3c20 	ldr.w	r3, [r4, #-32]
    4aa4:	2b00      	cmp	r3, #0
    4aa6:	d0d8      	beq.n	4a5a <usb_transfer_work+0x11a>
		usb_dc_ep_read_continue(ep);
    4aa8:	4628      	mov	r0, r5
    4aaa:	f003 fe73 	bl	8794 <usb_dc_ep_read_continue>
    4aae:	e75f      	b.n	4970 <usb_transfer_work+0x30>
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4ab0:	4621      	mov	r1, r4
    4ab2:	4805      	ldr	r0, [pc, #20]	; (4ac8 <usb_transfer_work+0x188>)
    4ab4:	f011 f94d 	bl	15d52 <k_work_submit_to_queue>
			return;
    4ab8:	e77b      	b.n	49b2 <usb_transfer_work+0x72>
    4aba:	bf00      	nop
    4abc:	00016658 	.word	0x00016658
    4ac0:	000165d8 	.word	0x000165d8
    4ac4:	00016b38 	.word	0x00016b38
    4ac8:	20000668 	.word	0x20000668

00004acc <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
    4acc:	b570      	push	{r4, r5, r6, lr}
    4ace:	b082      	sub	sp, #8
    4ad0:	4606      	mov	r6, r0
    4ad2:	460c      	mov	r4, r1
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    4ad4:	f7ff ff1e 	bl	4914 <usb_ep_get_transfer>

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    4ad8:	1e63      	subs	r3, r4, #1
    4ada:	b2db      	uxtb	r3, r3
    4adc:	2b01      	cmp	r3, #1
    4ade:	d80a      	bhi.n	4af6 <usb_transfer_ep_callback+0x2a>
    4ae0:	4605      	mov	r5, r0
		return;
	}

	if (!trans) {
    4ae2:	b150      	cbz	r0, 4afa <usb_transfer_ep_callback+0x2e>
			LOG_ERR("RX data lost, no transfer");
		}
		return;
	}

	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    4ae4:	f011 f82f 	bl	15b46 <k_is_in_isr>
    4ae8:	b108      	cbz	r0, 4aee <usb_transfer_ep_callback+0x22>
    4aea:	2c01      	cmp	r4, #1
    4aec:	d122      	bne.n	4b34 <usb_transfer_ep_callback+0x68>
		/* If we are not in IRQ context, no need to defer work */
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
    4aee:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    4af2:	f7ff ff25 	bl	4940 <usb_transfer_work>
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
    4af6:	b002      	add	sp, #8
    4af8:	bd70      	pop	{r4, r5, r6, pc}
		if (status == USB_DC_EP_DATA_OUT) {
    4afa:	2c01      	cmp	r4, #1
    4afc:	d1fb      	bne.n	4af6 <usb_transfer_ep_callback+0x2a>
				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
    4afe:	ab01      	add	r3, sp, #4
    4b00:	2201      	movs	r2, #1
    4b02:	f10d 0103 	add.w	r1, sp, #3
    4b06:	4630      	mov	r0, r6
    4b08:	f003 fdca 	bl	86a0 <usb_dc_ep_read_wait>
			} while (bytes);
    4b0c:	9b01      	ldr	r3, [sp, #4]
    4b0e:	2b00      	cmp	r3, #0
    4b10:	d1f5      	bne.n	4afe <usb_transfer_ep_callback+0x32>
    4b12:	4b0b      	ldr	r3, [pc, #44]	; (4b40 <usb_transfer_ep_callback+0x74>)
    4b14:	4a0b      	ldr	r2, [pc, #44]	; (4b44 <usb_transfer_ep_callback+0x78>)
    4b16:	1a9b      	subs	r3, r3, r2
    4b18:	08db      	lsrs	r3, r3, #3
			LOG_ERR("RX data lost, no transfer");
    4b1a:	f04f 0100 	mov.w	r1, #0
    4b1e:	2201      	movs	r2, #1
    4b20:	f362 0102 	bfi	r1, r2, #0, #3
    4b24:	f36f 01c5 	bfc	r1, #3, #3
    4b28:	f363 118f 	bfi	r1, r3, #6, #10
    4b2c:	4806      	ldr	r0, [pc, #24]	; (4b48 <usb_transfer_ep_callback+0x7c>)
    4b2e:	f7fe fc53 	bl	33d8 <log_0>
		return;
    4b32:	e7e0      	b.n	4af6 <usb_transfer_ep_callback+0x2a>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4b34:	f105 012c 	add.w	r1, r5, #44	; 0x2c
    4b38:	4804      	ldr	r0, [pc, #16]	; (4b4c <usb_transfer_ep_callback+0x80>)
    4b3a:	f011 f90a 	bl	15d52 <k_work_submit_to_queue>
    4b3e:	e7da      	b.n	4af6 <usb_transfer_ep_callback+0x2a>
    4b40:	00016658 	.word	0x00016658
    4b44:	000165d8 	.word	0x000165d8
    4b48:	00016b58 	.word	0x00016b58
    4b4c:	20000668 	.word	0x20000668

00004b50 <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
    4b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4b54:	4605      	mov	r5, r0
    4b56:	4688      	mov	r8, r1
    4b58:	4617      	mov	r7, r2
    4b5a:	461e      	mov	r6, r3
	struct usb_transfer_data *trans = NULL;
	int i, key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
    4b5c:	f00e f87c 	bl	12c58 <usb_transfer_is_busy>
    4b60:	2800      	cmp	r0, #0
    4b62:	f040 8083 	bne.w	4c6c <usb_transfer+0x11c>
	__asm__ volatile(
    4b66:	f04f 0320 	mov.w	r3, #32
    4b6a:	f3ef 8911 	mrs	r9, BASEPRI
    4b6e:	f383 8812 	msr	BASEPRI_MAX, r3
    4b72:	f3bf 8f6f 	isb	sy
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    4b76:	2400      	movs	r4, #0
    4b78:	2c03      	cmp	r4, #3
    4b7a:	dc10      	bgt.n	4b9e <usb_transfer+0x4e>
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
    4b7c:	01a0      	lsls	r0, r4, #6
    4b7e:	f100 0318 	add.w	r3, r0, #24
    4b82:	483c      	ldr	r0, [pc, #240]	; (4c74 <usb_transfer+0x124>)
    4b84:	4418      	add	r0, r3
    4b86:	3004      	adds	r0, #4
	return z_impl_k_sem_take(sem, timeout);
    4b88:	2200      	movs	r2, #0
    4b8a:	2300      	movs	r3, #0
    4b8c:	f00b fa04 	bl	ff98 <z_impl_k_sem_take>
    4b90:	b108      	cbz	r0, 4b96 <usb_transfer+0x46>
	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    4b92:	3401      	adds	r4, #1
    4b94:	e7f0      	b.n	4b78 <usb_transfer+0x28>
			trans = &ut_data[i];
    4b96:	4837      	ldr	r0, [pc, #220]	; (4c74 <usb_transfer+0x124>)
    4b98:	eb00 1484 	add.w	r4, r0, r4, lsl #6
			break;
    4b9c:	e000      	b.n	4ba0 <usb_transfer+0x50>
	struct usb_transfer_data *trans = NULL;
    4b9e:	2400      	movs	r4, #0
		}
	}

	if (!trans) {
    4ba0:	b344      	cbz	r4, 4bf4 <usb_transfer+0xa4>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
    4ba2:	f8d4 a004 	ldr.w	sl, [r4, #4]
    4ba6:	f11a 0f10 	cmn.w	sl, #16
    4baa:	d036      	beq.n	4c1a <usb_transfer+0xca>
		ret = -EBUSY;
		goto done;
	}

	/* Configure new transfer */
	trans->ep = ep;
    4bac:	7025      	strb	r5, [r4, #0]
	trans->buffer = data;
    4bae:	f8c4 8008 	str.w	r8, [r4, #8]
	trans->bsize = dlen;
    4bb2:	60e7      	str	r7, [r4, #12]
	trans->tsize = 0;
    4bb4:	2300      	movs	r3, #0
    4bb6:	6123      	str	r3, [r4, #16]
	trans->cb = cb;
    4bb8:	9b08      	ldr	r3, [sp, #32]
    4bba:	6163      	str	r3, [r4, #20]
	trans->flags = flags;
    4bbc:	63e6      	str	r6, [r4, #60]	; 0x3c
	trans->priv = cb_data;
    4bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4bc0:	61a3      	str	r3, [r4, #24]
	trans->status = -EBUSY;
    4bc2:	f06f 030f 	mvn.w	r3, #15
    4bc6:	6063      	str	r3, [r4, #4]

	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    4bc8:	4628      	mov	r0, r5
    4bca:	f003 fec5 	bl	8958 <usb_dc_ep_mps>
    4bce:	2800      	cmp	r0, #0
    4bd0:	d139      	bne.n	4c46 <usb_transfer+0xf6>
		/* no need to send ZLP since last packet will be a short one */
		trans->flags |= USB_TRANS_NO_ZLP;
	}

	if (flags & USB_TRANS_WRITE) {
    4bd2:	f016 0f02 	tst.w	r6, #2
    4bd6:	d044      	beq.n	4c62 <usb_transfer+0x112>
		/* start writing first chunk */
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4bd8:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    4bdc:	4826      	ldr	r0, [pc, #152]	; (4c78 <usb_transfer+0x128>)
    4bde:	f011 f8b8 	bl	15d52 <k_work_submit_to_queue>
	int i, key, ret = 0;
    4be2:	f04f 0a00 	mov.w	sl, #0
	__asm__ volatile(
    4be6:	f389 8811 	msr	BASEPRI, r9
    4bea:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
    4bee:	4650      	mov	r0, sl
    4bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4bf4:	4b21      	ldr	r3, [pc, #132]	; (4c7c <usb_transfer+0x12c>)
    4bf6:	4a22      	ldr	r2, [pc, #136]	; (4c80 <usb_transfer+0x130>)
    4bf8:	1a9b      	subs	r3, r3, r2
    4bfa:	08db      	lsrs	r3, r3, #3
		LOG_ERR("No transfer slot available");
    4bfc:	f04f 0100 	mov.w	r1, #0
    4c00:	2201      	movs	r2, #1
    4c02:	f362 0102 	bfi	r1, r2, #0, #3
    4c06:	f36f 01c5 	bfc	r1, #3, #3
    4c0a:	f363 118f 	bfi	r1, r3, #6, #10
    4c0e:	481d      	ldr	r0, [pc, #116]	; (4c84 <usb_transfer+0x134>)
    4c10:	f7fe fbe2 	bl	33d8 <log_0>
		ret = -ENOMEM;
    4c14:	f06f 0a0b 	mvn.w	sl, #11
		goto done;
    4c18:	e7e5      	b.n	4be6 <usb_transfer+0x96>
    4c1a:	4b18      	ldr	r3, [pc, #96]	; (4c7c <usb_transfer+0x12c>)
    4c1c:	4a18      	ldr	r2, [pc, #96]	; (4c80 <usb_transfer+0x130>)
    4c1e:	1a9b      	subs	r3, r3, r2
    4c20:	08db      	lsrs	r3, r3, #3
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
    4c22:	f04f 0200 	mov.w	r2, #0
    4c26:	2101      	movs	r1, #1
    4c28:	f361 0202 	bfi	r2, r1, #0, #3
    4c2c:	f36f 02c5 	bfc	r2, #3, #3
    4c30:	f363 128f 	bfi	r2, r3, #6, #10
    4c34:	4629      	mov	r1, r5
    4c36:	4814      	ldr	r0, [pc, #80]	; (4c88 <usb_transfer+0x138>)
    4c38:	f7fe fb3a 	bl	32b0 <log_1>
		k_sem_give(&trans->sem);
    4c3c:	f104 001c 	add.w	r0, r4, #28
	z_impl_k_sem_give(sem);
    4c40:	f00b f986 	bl	ff50 <z_impl_k_sem_give>
		goto done;
    4c44:	e7cf      	b.n	4be6 <usb_transfer+0x96>
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    4c46:	4628      	mov	r0, r5
    4c48:	f003 fe86 	bl	8958 <usb_dc_ep_mps>
    4c4c:	fbb7 f3f0 	udiv	r3, r7, r0
    4c50:	fb00 7013 	mls	r0, r0, r3, r7
    4c54:	2800      	cmp	r0, #0
    4c56:	d0bc      	beq.n	4bd2 <usb_transfer+0x82>
		trans->flags |= USB_TRANS_NO_ZLP;
    4c58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    4c5a:	f043 0304 	orr.w	r3, r3, #4
    4c5e:	63e3      	str	r3, [r4, #60]	; 0x3c
    4c60:	e7b7      	b.n	4bd2 <usb_transfer+0x82>
		ret = usb_dc_ep_read_continue(ep);
    4c62:	4628      	mov	r0, r5
    4c64:	f003 fd96 	bl	8794 <usb_dc_ep_read_continue>
    4c68:	4682      	mov	sl, r0
    4c6a:	e7bc      	b.n	4be6 <usb_transfer+0x96>
		return -EBUSY;
    4c6c:	f06f 0a0f 	mvn.w	sl, #15
    4c70:	e7bd      	b.n	4bee <usb_transfer+0x9e>
    4c72:	bf00      	nop
    4c74:	200017c8 	.word	0x200017c8
    4c78:	20000668 	.word	0x20000668
    4c7c:	00016658 	.word	0x00016658
    4c80:	000165d8 	.word	0x000165d8
    4c84:	00016b74 	.word	0x00016b74
    4c88:	00016b90 	.word	0x00016b90

00004c8c <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
    4c8c:	b510      	push	{r4, lr}
	__asm__ volatile(
    4c8e:	f04f 0320 	mov.w	r3, #32
    4c92:	f3ef 8411 	mrs	r4, BASEPRI
    4c96:	f383 8812 	msr	BASEPRI_MAX, r3
    4c9a:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    4c9e:	f7ff fe39 	bl	4914 <usb_ep_get_transfer>
	if (!trans) {
    4ca2:	b120      	cbz	r0, 4cae <usb_cancel_transfer+0x22>
    4ca4:	4601      	mov	r1, r0
		goto done;
	}

	if (trans->status != -EBUSY) {
    4ca6:	6843      	ldr	r3, [r0, #4]
    4ca8:	f113 0f10 	cmn.w	r3, #16
    4cac:	d004      	beq.n	4cb8 <usb_cancel_transfer+0x2c>
	__asm__ volatile(
    4cae:	f384 8811 	msr	BASEPRI, r4
    4cb2:	f3bf 8f6f 	isb	sy
	trans->status = -ECANCELED;
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);

done:
	irq_unlock(key);
}
    4cb6:	bd10      	pop	{r4, pc}
	trans->status = -ECANCELED;
    4cb8:	f06f 038b 	mvn.w	r3, #139	; 0x8b
    4cbc:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4cbe:	312c      	adds	r1, #44	; 0x2c
    4cc0:	4801      	ldr	r0, [pc, #4]	; (4cc8 <usb_cancel_transfer+0x3c>)
    4cc2:	f011 f846 	bl	15d52 <k_work_submit_to_queue>
    4cc6:	e7f2      	b.n	4cae <usb_cancel_transfer+0x22>
    4cc8:	20000668 	.word	0x20000668

00004ccc <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    4ccc:	b538      	push	{r3, r4, r5, lr}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    4cce:	2400      	movs	r4, #0
    4cd0:	e011      	b.n	4cf6 <usb_cancel_transfers+0x2a>
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
			trans->status = -ECANCELED;
    4cd2:	4b12      	ldr	r3, [pc, #72]	; (4d1c <usb_cancel_transfers+0x50>)
    4cd4:	01a1      	lsls	r1, r4, #6
    4cd6:	eb03 1284 	add.w	r2, r3, r4, lsl #6
    4cda:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    4cde:	6050      	str	r0, [r2, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4ce0:	3128      	adds	r1, #40	; 0x28
    4ce2:	4419      	add	r1, r3
    4ce4:	3104      	adds	r1, #4
    4ce6:	480e      	ldr	r0, [pc, #56]	; (4d20 <usb_cancel_transfers+0x54>)
    4ce8:	f011 f833 	bl	15d52 <k_work_submit_to_queue>
    4cec:	f385 8811 	msr	BASEPRI, r5
    4cf0:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    4cf4:	3401      	adds	r4, #1
    4cf6:	2c03      	cmp	r4, #3
    4cf8:	dc0f      	bgt.n	4d1a <usb_cancel_transfers+0x4e>
	__asm__ volatile(
    4cfa:	f04f 0320 	mov.w	r3, #32
    4cfe:	f3ef 8511 	mrs	r5, BASEPRI
    4d02:	f383 8812 	msr	BASEPRI_MAX, r3
    4d06:	f3bf 8f6f 	isb	sy
		if (trans->status == -EBUSY) {
    4d0a:	4b04      	ldr	r3, [pc, #16]	; (4d1c <usb_cancel_transfers+0x50>)
    4d0c:	eb03 1384 	add.w	r3, r3, r4, lsl #6
    4d10:	685b      	ldr	r3, [r3, #4]
    4d12:	f113 0f10 	cmn.w	r3, #16
    4d16:	d1e9      	bne.n	4cec <usb_cancel_transfers+0x20>
    4d18:	e7db      	b.n	4cd2 <usb_cancel_transfers+0x6>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    4d1a:	bd38      	pop	{r3, r4, r5, pc}
    4d1c:	200017c8 	.word	0x200017c8
    4d20:	20000668 	.word	0x20000668

00004d24 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    4d24:	b570      	push	{r4, r5, r6, lr}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    4d26:	2600      	movs	r6, #0
    4d28:	e011      	b.n	4d4e <usb_transfer_init+0x2a>
		k_work_init(&ut_data[i].work, usb_transfer_work);
    4d2a:	4c0b      	ldr	r4, [pc, #44]	; (4d58 <usb_transfer_init+0x34>)
    4d2c:	01b5      	lsls	r5, r6, #6
    4d2e:	f105 0028 	add.w	r0, r5, #40	; 0x28
    4d32:	4420      	add	r0, r4
    4d34:	4909      	ldr	r1, [pc, #36]	; (4d5c <usb_transfer_init+0x38>)
    4d36:	3004      	adds	r0, #4
    4d38:	f011 f805 	bl	15d46 <k_work_init>
		k_sem_init(&ut_data[i].sem, 1, 1);
    4d3c:	f105 0018 	add.w	r0, r5, #24
    4d40:	4420      	add	r0, r4
    4d42:	3004      	adds	r0, #4
	return z_impl_k_sem_init(sem, initial_count, limit);
    4d44:	2201      	movs	r2, #1
    4d46:	4611      	mov	r1, r2
    4d48:	f010 ffee 	bl	15d28 <z_impl_k_sem_init>
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    4d4c:	3601      	adds	r6, #1
    4d4e:	2e03      	cmp	r6, #3
    4d50:	ddeb      	ble.n	4d2a <usb_transfer_init+0x6>
	}

	return 0;
}
    4d52:	2000      	movs	r0, #0
    4d54:	bd70      	pop	{r4, r5, r6, pc}
    4d56:	bf00      	nop
    4d58:	200017c8 	.word	0x200017c8
    4d5c:	00004941 	.word	0x00004941

00004d60 <cdc_acm_class_handle_req>:
 *
 * @return  0 on success, negative errno code on fail.
 */
int cdc_acm_class_handle_req(struct usb_setup_packet *setup,
			     int32_t *len, uint8_t **data)
{
    4d60:	b570      	push	{r4, r5, r6, lr}
    4d62:	4604      	mov	r4, r0
    4d64:	460e      	mov	r6, r1
    4d66:	4615      	mov	r5, r2
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;
	uint32_t rate;
	uint32_t new_rate;

	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    4d68:	7901      	ldrb	r1, [r0, #4]
    4d6a:	481e      	ldr	r0, [pc, #120]	; (4de4 <cdc_acm_class_handle_req+0x84>)
    4d6c:	f00d ff40 	bl	12bf0 <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
    4d70:	b158      	cbz	r0, 4d8a <cdc_acm_class_handle_req+0x2a>
		return -ENODEV;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	if (usb_reqtype_is_to_device(setup)) {
    4d72:	f994 2000 	ldrsb.w	r2, [r4]
    4d76:	2a00      	cmp	r2, #0
    4d78:	db27      	blt.n	4dca <cdc_acm_class_handle_req+0x6a>
		switch (setup->bRequest) {
    4d7a:	7862      	ldrb	r2, [r4, #1]
    4d7c:	2a20      	cmp	r2, #32
    4d7e:	d018      	beq.n	4db2 <cdc_acm_class_handle_req+0x52>
    4d80:	2a22      	cmp	r2, #34	; 0x22
    4d82:	d01d      	beq.n	4dc0 <cdc_acm_class_handle_req+0x60>
    4d84:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4d88:	e028      	b.n	4ddc <cdc_acm_class_handle_req+0x7c>
    4d8a:	4b17      	ldr	r3, [pc, #92]	; (4de8 <cdc_acm_class_handle_req+0x88>)
    4d8c:	4a17      	ldr	r2, [pc, #92]	; (4dec <cdc_acm_class_handle_req+0x8c>)
    4d8e:	1a9b      	subs	r3, r3, r2
    4d90:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Device data not found for interface %u",
    4d92:	f04f 0200 	mov.w	r2, #0
    4d96:	2102      	movs	r1, #2
    4d98:	f361 0202 	bfi	r2, r1, #0, #3
    4d9c:	f36f 02c5 	bfc	r2, #3, #3
    4da0:	f363 128f 	bfi	r2, r3, #6, #10
    4da4:	88a1      	ldrh	r1, [r4, #4]
    4da6:	4812      	ldr	r0, [pc, #72]	; (4df0 <cdc_acm_class_handle_req+0x90>)
    4da8:	f7fe fa82 	bl	32b0 <log_1>
		return -ENODEV;
    4dac:	f06f 0012 	mvn.w	r0, #18
    4db0:	e014      	b.n	4ddc <cdc_acm_class_handle_req+0x7c>
		case SET_LINE_CODING:
			rate = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
			memcpy(&dev_data->line_coding, *data,
    4db2:	2207      	movs	r2, #7
    4db4:	6829      	ldr	r1, [r5, #0]
    4db6:	380c      	subs	r0, #12
    4db8:	f00e fa1a 	bl	131f0 <memcpy>
#if defined(CONFIG_CDC_ACM_DTE_RATE_CALLBACK_SUPPORT)
			if (rate != new_rate && dev_data->rate_cb != NULL) {
				dev_data->rate_cb(common->dev, new_rate);
			}
#endif
			return 0;
    4dbc:	2000      	movs	r0, #0
    4dbe:	e00d      	b.n	4ddc <cdc_acm_class_handle_req+0x7c>

		case SET_CONTROL_LINE_STATE:
			dev_data->line_state = (uint8_t)setup->wValue;
    4dc0:	78a2      	ldrb	r2, [r4, #2]
    4dc2:	f800 2c05 	strb.w	r2, [r0, #-5]
			LOG_DBG("CDC_SET_CONTROL_LINE_STATE 0x%x",
				dev_data->line_state);
			return 0;
    4dc6:	2000      	movs	r0, #0
    4dc8:	e008      	b.n	4ddc <cdc_acm_class_handle_req+0x7c>

		default:
			break;
		}
	} else {
		if (setup->bRequest == GET_LINE_CODING) {
    4dca:	7862      	ldrb	r2, [r4, #1]
    4dcc:	2a21      	cmp	r2, #33	; 0x21
    4dce:	d106      	bne.n	4dde <cdc_acm_class_handle_req+0x7e>
			*data = (uint8_t *)(&dev_data->line_coding);
    4dd0:	f1a0 030c 	sub.w	r3, r0, #12
    4dd4:	602b      	str	r3, [r5, #0]
			*len = sizeof(dev_data->line_coding);
    4dd6:	2307      	movs	r3, #7
    4dd8:	6033      	str	r3, [r6, #0]
			LOG_DBG("CDC_GET_LINE_CODING %d %d %d %d",
				sys_le32_to_cpu(dev_data->line_coding.dwDTERate),
				dev_data->line_coding.bCharFormat,
				dev_data->line_coding.bParityType,
				dev_data->line_coding.bDataBits);
			return 0;
    4dda:	2000      	movs	r0, #0
	}

	LOG_DBG("CDC ACM bmRequestType 0x%02x bRequest 0x%02x unsupported",
		setup->bmRequestType, setup->bRequest);
	return -ENOTSUP;
}
    4ddc:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOTSUP;
    4dde:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4de2:	e7fb      	b.n	4ddc <cdc_acm_class_handle_req+0x7c>
    4de4:	200018c8 	.word	0x200018c8
    4de8:	00016638 	.word	0x00016638
    4dec:	000165d8 	.word	0x000165d8
    4df0:	00016bcc 	.word	0x00016bcc

00004df4 <cdc_acm_int_in>:
 * @param ep_status Endpoint status code.
 *
 * @return  N/A.
 */
static void cdc_acm_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
    4df4:	b510      	push	{r4, lr}
    4df6:	4604      	mov	r4, r0
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    4df8:	4601      	mov	r1, r0
    4dfa:	480d      	ldr	r0, [pc, #52]	; (4e30 <cdc_acm_int_in+0x3c>)
    4dfc:	f00d ff0c 	bl	12c18 <usb_get_dev_data_by_ep>
	if (common == NULL) {
    4e00:	b118      	cbz	r0, 4e0a <cdc_acm_int_in+0x16>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
    4e02:	2201      	movs	r2, #1
    4e04:	f800 2c03 	strb.w	r2, [r0, #-3]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
    4e08:	bd10      	pop	{r4, pc}
    4e0a:	4b0a      	ldr	r3, [pc, #40]	; (4e34 <cdc_acm_int_in+0x40>)
    4e0c:	4a0a      	ldr	r2, [pc, #40]	; (4e38 <cdc_acm_int_in+0x44>)
    4e0e:	1a9b      	subs	r3, r3, r2
    4e10:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Device data not found for endpoint %u", ep);
    4e12:	f04f 0200 	mov.w	r2, #0
    4e16:	2102      	movs	r1, #2
    4e18:	f361 0202 	bfi	r2, r1, #0, #3
    4e1c:	f36f 02c5 	bfc	r2, #3, #3
    4e20:	f363 128f 	bfi	r2, r3, #6, #10
    4e24:	4621      	mov	r1, r4
    4e26:	4805      	ldr	r0, [pc, #20]	; (4e3c <cdc_acm_int_in+0x48>)
    4e28:	f7fe fa42 	bl	32b0 <log_1>
		return;
    4e2c:	e7ec      	b.n	4e08 <cdc_acm_int_in+0x14>
    4e2e:	bf00      	nop
    4e30:	200018c8 	.word	0x200018c8
    4e34:	00016638 	.word	0x00016638
    4e38:	000165d8 	.word	0x000165d8
    4e3c:	00016bf4 	.word	0x00016bf4

00004e40 <cdc_acm_irq_rx_enable>:
 * @param dev CDC ACM device struct.
 *
 * @return N/A
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
    4e40:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    4e42:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
    4e44:	2301      	movs	r3, #1
    4e46:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b

	if (dev_data->cb && dev_data->rx_ready) {
    4e4a:	680b      	ldr	r3, [r1, #0]
    4e4c:	b113      	cbz	r3, 4e54 <cdc_acm_irq_rx_enable+0x14>
    4e4e:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
    4e52:	b903      	cbnz	r3, 4e56 <cdc_acm_irq_rx_enable+0x16>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
	}
}
    4e54:	bd08      	pop	{r3, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    4e56:	3108      	adds	r1, #8
    4e58:	4801      	ldr	r0, [pc, #4]	; (4e60 <cdc_acm_irq_rx_enable+0x20>)
    4e5a:	f010 ff7a 	bl	15d52 <k_work_submit_to_queue>
}
    4e5e:	e7f9      	b.n	4e54 <cdc_acm_irq_rx_enable+0x14>
    4e60:	20000668 	.word	0x20000668

00004e64 <cdc_acm_irq_tx_enable>:
{
    4e64:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    4e66:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
    4e68:	2301      	movs	r3, #1
    4e6a:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
	if (dev_data->cb && dev_data->tx_ready) {
    4e6e:	680b      	ldr	r3, [r1, #0]
    4e70:	b113      	cbz	r3, 4e78 <cdc_acm_irq_tx_enable+0x14>
    4e72:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    4e76:	b903      	cbnz	r3, 4e7a <cdc_acm_irq_tx_enable+0x16>
}
    4e78:	bd08      	pop	{r3, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    4e7a:	3108      	adds	r1, #8
    4e7c:	4801      	ldr	r0, [pc, #4]	; (4e84 <cdc_acm_irq_tx_enable+0x20>)
    4e7e:	f010 ff68 	bl	15d52 <k_work_submit_to_queue>
}
    4e82:	e7f9      	b.n	4e78 <cdc_acm_irq_tx_enable+0x14>
    4e84:	20000668 	.word	0x20000668

00004e88 <cdc_acm_reset_port>:
{
    4e88:	b510      	push	{r4, lr}
    4e8a:	4603      	mov	r3, r0
	dev_data->configured = false;
    4e8c:	2400      	movs	r4, #0
    4e8e:	f880 407e 	strb.w	r4, [r0, #126]	; 0x7e
	dev_data->suspended = false;
    4e92:	f880 407f 	strb.w	r4, [r0, #127]	; 0x7f
	dev_data->rx_ready = false;
    4e96:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
	dev_data->tx_ready = false;
    4e9a:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
	dev_data->line_coding = (struct cdc_acm_line_coding)
    4e9e:	4a0a      	ldr	r2, [pc, #40]	; (4ec8 <cdc_acm_reset_port+0x40>)
    4ea0:	e892 0003 	ldmia.w	r2, {r0, r1}
    4ea4:	6758      	str	r0, [r3, #116]	; 0x74
    4ea6:	f8a3 1078 	strh.w	r1, [r3, #120]	; 0x78
    4eaa:	0c09      	lsrs	r1, r1, #16
    4eac:	f883 107a 	strb.w	r1, [r3, #122]	; 0x7a
	dev_data->serial_state = 0;
    4eb0:	f883 407c 	strb.w	r4, [r3, #124]	; 0x7c
	dev_data->line_state = 0;
    4eb4:	f883 407b 	strb.w	r4, [r3, #123]	; 0x7b
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    4eb8:	2240      	movs	r2, #64	; 0x40
    4eba:	4621      	mov	r1, r4
    4ebc:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    4ec0:	f00e f9ba 	bl	13238 <memset>
}
    4ec4:	bd10      	pop	{r4, pc}
    4ec6:	bf00      	nop
    4ec8:	000166fc 	.word	0x000166fc

00004ecc <cdc_acm_fifo_fill>:
{
    4ecc:	b570      	push	{r4, r5, r6, lr}
    4ece:	4614      	mov	r4, r2
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    4ed0:	6906      	ldr	r6, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
    4ed2:	f896 307e 	ldrb.w	r3, [r6, #126]	; 0x7e
    4ed6:	b113      	cbz	r3, 4ede <cdc_acm_fifo_fill+0x12>
    4ed8:	f896 307f 	ldrb.w	r3, [r6, #127]	; 0x7f
    4edc:	b193      	cbz	r3, 4f04 <cdc_acm_fifo_fill+0x38>
    4ede:	4b1a      	ldr	r3, [pc, #104]	; (4f48 <cdc_acm_fifo_fill+0x7c>)
    4ee0:	4a1a      	ldr	r2, [pc, #104]	; (4f4c <cdc_acm_fifo_fill+0x80>)
    4ee2:	1a9b      	subs	r3, r3, r2
    4ee4:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Device not configured or suspended, drop %d bytes",
    4ee6:	f04f 0200 	mov.w	r2, #0
    4eea:	2102      	movs	r1, #2
    4eec:	f361 0202 	bfi	r2, r1, #0, #3
    4ef0:	f36f 02c5 	bfc	r2, #3, #3
    4ef4:	f363 128f 	bfi	r2, r3, #6, #10
    4ef8:	4621      	mov	r1, r4
    4efa:	4815      	ldr	r0, [pc, #84]	; (4f50 <cdc_acm_fifo_fill+0x84>)
    4efc:	f7fe f9d8 	bl	32b0 <log_1>
		return 0;
    4f00:	2000      	movs	r0, #0
}
    4f02:	bd70      	pop	{r4, r5, r6, pc}
	dev_data->tx_ready = false;
    4f04:	2300      	movs	r3, #0
    4f06:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    4f0a:	6f30      	ldr	r0, [r6, #112]	; 0x70
    4f0c:	f00d f94a 	bl	121a4 <ring_buf_put>
    4f10:	4605      	mov	r5, r0
	if (wrote < len) {
    4f12:	4284      	cmp	r4, r0
    4f14:	d806      	bhi.n	4f24 <cdc_acm_fifo_fill+0x58>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    4f16:	f106 0118 	add.w	r1, r6, #24
    4f1a:	480e      	ldr	r0, [pc, #56]	; (4f54 <cdc_acm_fifo_fill+0x88>)
    4f1c:	f010 ff19 	bl	15d52 <k_work_submit_to_queue>
	return wrote;
    4f20:	4628      	mov	r0, r5
    4f22:	e7ee      	b.n	4f02 <cdc_acm_fifo_fill+0x36>
    4f24:	4b08      	ldr	r3, [pc, #32]	; (4f48 <cdc_acm_fifo_fill+0x7c>)
    4f26:	4a09      	ldr	r2, [pc, #36]	; (4f4c <cdc_acm_fifo_fill+0x80>)
    4f28:	1a9b      	subs	r3, r3, r2
    4f2a:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Ring buffer full, drop %zd bytes", len - wrote);
    4f2c:	f04f 0200 	mov.w	r2, #0
    4f30:	2102      	movs	r1, #2
    4f32:	f361 0202 	bfi	r2, r1, #0, #3
    4f36:	f36f 02c5 	bfc	r2, #3, #3
    4f3a:	f363 128f 	bfi	r2, r3, #6, #10
    4f3e:	1a21      	subs	r1, r4, r0
    4f40:	4805      	ldr	r0, [pc, #20]	; (4f58 <cdc_acm_fifo_fill+0x8c>)
    4f42:	f7fe f9b5 	bl	32b0 <log_1>
    4f46:	e7e6      	b.n	4f16 <cdc_acm_fifo_fill+0x4a>
    4f48:	00016638 	.word	0x00016638
    4f4c:	000165d8 	.word	0x000165d8
    4f50:	00016c1c 	.word	0x00016c1c
    4f54:	20000668 	.word	0x20000668
    4f58:	00016c50 	.word	0x00016c50

00004f5c <cdc_acm_read_cb>:
{
    4f5c:	b570      	push	{r4, r5, r6, lr}
    4f5e:	b082      	sub	sp, #8
    4f60:	4606      	mov	r6, r0
    4f62:	4614      	mov	r4, r2
	if (size <= 0) {
    4f64:	1e0d      	subs	r5, r1, #0
    4f66:	dd0f      	ble.n	4f88 <cdc_acm_read_cb+0x2c>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    4f68:	462a      	mov	r2, r5
    4f6a:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    4f6e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    4f70:	f00d f918 	bl	121a4 <ring_buf_put>
	if (wrote < size) {
    4f74:	4285      	cmp	r5, r0
    4f76:	d813      	bhi.n	4fa0 <cdc_acm_read_cb+0x44>
	dev_data->rx_ready = true;
    4f78:	2301      	movs	r3, #1
    4f7a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	if (dev_data->cb && dev_data->rx_irq_ena) {
    4f7e:	6823      	ldr	r3, [r4, #0]
    4f80:	b113      	cbz	r3, 4f88 <cdc_acm_read_cb+0x2c>
    4f82:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    4f86:	b9eb      	cbnz	r3, 4fc4 <cdc_acm_read_cb+0x68>
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
    4f88:	9401      	str	r4, [sp, #4]
    4f8a:	4b11      	ldr	r3, [pc, #68]	; (4fd0 <cdc_acm_read_cb+0x74>)
    4f8c:	9300      	str	r3, [sp, #0]
    4f8e:	2301      	movs	r3, #1
    4f90:	2240      	movs	r2, #64	; 0x40
    4f92:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    4f96:	4630      	mov	r0, r6
    4f98:	f7ff fdda 	bl	4b50 <usb_transfer>
}
    4f9c:	b002      	add	sp, #8
    4f9e:	bd70      	pop	{r4, r5, r6, pc}
    4fa0:	4b0c      	ldr	r3, [pc, #48]	; (4fd4 <cdc_acm_read_cb+0x78>)
    4fa2:	4a0d      	ldr	r2, [pc, #52]	; (4fd8 <cdc_acm_read_cb+0x7c>)
    4fa4:	1a9b      	subs	r3, r3, r2
    4fa6:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Ring buffer full, drop %zd bytes", size - wrote);
    4fa8:	f04f 0200 	mov.w	r2, #0
    4fac:	2101      	movs	r1, #1
    4fae:	f361 0202 	bfi	r2, r1, #0, #3
    4fb2:	f36f 02c5 	bfc	r2, #3, #3
    4fb6:	f363 128f 	bfi	r2, r3, #6, #10
    4fba:	1a29      	subs	r1, r5, r0
    4fbc:	4807      	ldr	r0, [pc, #28]	; (4fdc <cdc_acm_read_cb+0x80>)
    4fbe:	f7fe f977 	bl	32b0 <log_1>
    4fc2:	e7d9      	b.n	4f78 <cdc_acm_read_cb+0x1c>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    4fc4:	f104 0108 	add.w	r1, r4, #8
    4fc8:	4805      	ldr	r0, [pc, #20]	; (4fe0 <cdc_acm_read_cb+0x84>)
    4fca:	f010 fec2 	bl	15d52 <k_work_submit_to_queue>
    4fce:	e7db      	b.n	4f88 <cdc_acm_read_cb+0x2c>
    4fd0:	00004f5d 	.word	0x00004f5d
    4fd4:	00016638 	.word	0x00016638
    4fd8:	000165d8 	.word	0x000165d8
    4fdc:	00016c50 	.word	0x00016c50
    4fe0:	20000668 	.word	0x20000668

00004fe4 <cdc_acm_do_cb>:
{
    4fe4:	b538      	push	{r3, r4, r5, lr}
    4fe6:	4604      	mov	r4, r0
	const struct device *dev = dev_data->common.dev;
    4fe8:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
	struct usb_cfg_data *cfg = (void *)dev->config;
    4fec:	685d      	ldr	r5, [r3, #4]
	switch (status) {
    4fee:	3901      	subs	r1, #1
    4ff0:	2905      	cmp	r1, #5
    4ff2:	d806      	bhi.n	5002 <cdc_acm_do_cb+0x1e>
    4ff4:	e8df f001 	tbb	[pc, r1]
    4ff8:	37060503 	.word	0x37060503
    4ffc:	5f4b      	.short	0x5f4b
		cdc_acm_reset_port(dev_data);
    4ffe:	f7ff ff43 	bl	4e88 <cdc_acm_reset_port>
}
    5002:	bd38      	pop	{r3, r4, r5, pc}
    5004:	4b45      	ldr	r3, [pc, #276]	; (511c <cdc_acm_do_cb+0x138>)
    5006:	4a46      	ldr	r2, [pc, #280]	; (5120 <cdc_acm_do_cb+0x13c>)
    5008:	1a9b      	subs	r3, r3, r2
    500a:	08db      	lsrs	r3, r3, #3
		LOG_INF("Device configured");
    500c:	f04f 0100 	mov.w	r1, #0
    5010:	2203      	movs	r2, #3
    5012:	f362 0102 	bfi	r1, r2, #0, #3
    5016:	f36f 01c5 	bfc	r1, #3, #3
    501a:	f363 118f 	bfi	r1, r3, #6, #10
    501e:	4841      	ldr	r0, [pc, #260]	; (5124 <cdc_acm_do_cb+0x140>)
    5020:	f7fe f9da 	bl	33d8 <log_0>
		if (!dev_data->configured) {
    5024:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    5028:	b19b      	cbz	r3, 5052 <cdc_acm_do_cb+0x6e>
		if (!dev_data->tx_ready) {
    502a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    502e:	2b00      	cmp	r3, #0
    5030:	d1e7      	bne.n	5002 <cdc_acm_do_cb+0x1e>
			dev_data->tx_ready = true;
    5032:	2301      	movs	r3, #1
    5034:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
    5038:	6823      	ldr	r3, [r4, #0]
    503a:	2b00      	cmp	r3, #0
    503c:	d0e1      	beq.n	5002 <cdc_acm_do_cb+0x1e>
    503e:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    5042:	2b00      	cmp	r3, #0
    5044:	d0dd      	beq.n	5002 <cdc_acm_do_cb+0x1e>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    5046:	f104 0108 	add.w	r1, r4, #8
    504a:	4837      	ldr	r0, [pc, #220]	; (5128 <cdc_acm_do_cb+0x144>)
    504c:	f010 fe81 	bl	15d52 <k_work_submit_to_queue>
    5050:	e7d7      	b.n	5002 <cdc_acm_do_cb+0x1e>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
    5052:	6a2b      	ldr	r3, [r5, #32]
    5054:	4622      	mov	r2, r4
    5056:	2100      	movs	r1, #0
    5058:	7b18      	ldrb	r0, [r3, #12]
    505a:	f7ff ff7f 	bl	4f5c <cdc_acm_read_cb>
			dev_data->configured = true;
    505e:	2301      	movs	r3, #1
    5060:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
    5064:	e7e1      	b.n	502a <cdc_acm_do_cb+0x46>
    5066:	4b2d      	ldr	r3, [pc, #180]	; (511c <cdc_acm_do_cb+0x138>)
    5068:	4a2d      	ldr	r2, [pc, #180]	; (5120 <cdc_acm_do_cb+0x13c>)
    506a:	1a9b      	subs	r3, r3, r2
    506c:	08db      	lsrs	r3, r3, #3
		LOG_INF("Device disconnected");
    506e:	f04f 0100 	mov.w	r1, #0
    5072:	2203      	movs	r2, #3
    5074:	f362 0102 	bfi	r1, r2, #0, #3
    5078:	f36f 01c5 	bfc	r1, #3, #3
    507c:	f363 118f 	bfi	r1, r3, #6, #10
    5080:	482a      	ldr	r0, [pc, #168]	; (512c <cdc_acm_do_cb+0x148>)
    5082:	f7fe f9a9 	bl	33d8 <log_0>
		cdc_acm_reset_port(dev_data);
    5086:	4620      	mov	r0, r4
    5088:	f7ff fefe 	bl	4e88 <cdc_acm_reset_port>
		break;
    508c:	e7b9      	b.n	5002 <cdc_acm_do_cb+0x1e>
    508e:	4b23      	ldr	r3, [pc, #140]	; (511c <cdc_acm_do_cb+0x138>)
    5090:	4a23      	ldr	r2, [pc, #140]	; (5120 <cdc_acm_do_cb+0x13c>)
    5092:	1a9b      	subs	r3, r3, r2
    5094:	08db      	lsrs	r3, r3, #3
		LOG_INF("Device suspended");
    5096:	f04f 0100 	mov.w	r1, #0
    509a:	2203      	movs	r2, #3
    509c:	f362 0102 	bfi	r1, r2, #0, #3
    50a0:	f36f 01c5 	bfc	r1, #3, #3
    50a4:	f363 118f 	bfi	r1, r3, #6, #10
    50a8:	4821      	ldr	r0, [pc, #132]	; (5130 <cdc_acm_do_cb+0x14c>)
    50aa:	f7fe f995 	bl	33d8 <log_0>
		dev_data->suspended = true;
    50ae:	2301      	movs	r3, #1
    50b0:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
		break;
    50b4:	e7a5      	b.n	5002 <cdc_acm_do_cb+0x1e>
    50b6:	4b19      	ldr	r3, [pc, #100]	; (511c <cdc_acm_do_cb+0x138>)
    50b8:	4a19      	ldr	r2, [pc, #100]	; (5120 <cdc_acm_do_cb+0x13c>)
    50ba:	1a9b      	subs	r3, r3, r2
    50bc:	08db      	lsrs	r3, r3, #3
		LOG_INF("Device resumed");
    50be:	f04f 0100 	mov.w	r1, #0
    50c2:	2203      	movs	r2, #3
    50c4:	f362 0102 	bfi	r1, r2, #0, #3
    50c8:	f36f 01c5 	bfc	r1, #3, #3
    50cc:	f363 118f 	bfi	r1, r3, #6, #10
    50d0:	4818      	ldr	r0, [pc, #96]	; (5134 <cdc_acm_do_cb+0x150>)
    50d2:	f7fe f981 	bl	33d8 <log_0>
		if (dev_data->suspended) {
    50d6:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
    50da:	2b00      	cmp	r3, #0
    50dc:	d091      	beq.n	5002 <cdc_acm_do_cb+0x1e>
    50de:	4b0f      	ldr	r3, [pc, #60]	; (511c <cdc_acm_do_cb+0x138>)
    50e0:	4a0f      	ldr	r2, [pc, #60]	; (5120 <cdc_acm_do_cb+0x13c>)
    50e2:	1a9b      	subs	r3, r3, r2
    50e4:	08db      	lsrs	r3, r3, #3
			LOG_INF("from suspend");
    50e6:	f04f 0100 	mov.w	r1, #0
    50ea:	2203      	movs	r2, #3
    50ec:	f362 0102 	bfi	r1, r2, #0, #3
    50f0:	f36f 01c5 	bfc	r1, #3, #3
    50f4:	f363 118f 	bfi	r1, r3, #6, #10
    50f8:	480f      	ldr	r0, [pc, #60]	; (5138 <cdc_acm_do_cb+0x154>)
    50fa:	f7fe f96d 	bl	33d8 <log_0>
			dev_data->suspended = false;
    50fe:	2300      	movs	r3, #0
    5100:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
			if (dev_data->configured) {
    5104:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    5108:	2b00      	cmp	r3, #0
    510a:	f43f af7a 	beq.w	5002 <cdc_acm_do_cb+0x1e>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    510e:	6a2b      	ldr	r3, [r5, #32]
    5110:	4622      	mov	r2, r4
    5112:	2100      	movs	r1, #0
    5114:	7b18      	ldrb	r0, [r3, #12]
    5116:	f7ff ff21 	bl	4f5c <cdc_acm_read_cb>
}
    511a:	e772      	b.n	5002 <cdc_acm_do_cb+0x1e>
    511c:	00016638 	.word	0x00016638
    5120:	000165d8 	.word	0x000165d8
    5124:	00016c74 	.word	0x00016c74
    5128:	20000668 	.word	0x20000668
    512c:	00016c88 	.word	0x00016c88
    5130:	00016c9c 	.word	0x00016c9c
    5134:	00016cb0 	.word	0x00016cb0
    5138:	00016cc0 	.word	0x00016cc0

0000513c <cdc_acm_dev_status_cb>:
{
    513c:	b570      	push	{r4, r5, r6, lr}
    513e:	4604      	mov	r4, r0
    5140:	460d      	mov	r5, r1
    5142:	4616      	mov	r6, r2
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
    5144:	4601      	mov	r1, r0
    5146:	480e      	ldr	r0, [pc, #56]	; (5180 <cdc_acm_dev_status_cb+0x44>)
    5148:	f00d fd40 	bl	12bcc <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    514c:	b128      	cbz	r0, 515a <cdc_acm_dev_status_cb+0x1e>
	cdc_acm_do_cb(dev_data, status, param);
    514e:	4632      	mov	r2, r6
    5150:	4629      	mov	r1, r5
    5152:	3880      	subs	r0, #128	; 0x80
    5154:	f7ff ff46 	bl	4fe4 <cdc_acm_do_cb>
}
    5158:	bd70      	pop	{r4, r5, r6, pc}
    515a:	4b0a      	ldr	r3, [pc, #40]	; (5184 <cdc_acm_dev_status_cb+0x48>)
    515c:	4a0a      	ldr	r2, [pc, #40]	; (5188 <cdc_acm_dev_status_cb+0x4c>)
    515e:	1a9b      	subs	r3, r3, r2
    5160:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Device data not found for cfg %p", cfg);
    5162:	f04f 0200 	mov.w	r2, #0
    5166:	2102      	movs	r1, #2
    5168:	f361 0202 	bfi	r2, r1, #0, #3
    516c:	f36f 02c5 	bfc	r2, #3, #3
    5170:	f363 128f 	bfi	r2, r3, #6, #10
    5174:	4621      	mov	r1, r4
    5176:	4805      	ldr	r0, [pc, #20]	; (518c <cdc_acm_dev_status_cb+0x50>)
    5178:	f7fe f89a 	bl	32b0 <log_1>
		return;
    517c:	e7ec      	b.n	5158 <cdc_acm_dev_status_cb+0x1c>
    517e:	bf00      	nop
    5180:	200018c8 	.word	0x200018c8
    5184:	00016638 	.word	0x00016638
    5188:	000165d8 	.word	0x000165d8
    518c:	00016cd0 	.word	0x00016cd0

00005190 <cdc_acm_send_notification>:
 *
 * @return  N/A.
 */
static int cdc_acm_send_notification(const struct device *dev,
				     uint16_t serial_state)
{
    5190:	b530      	push	{r4, r5, lr}
    5192:	b085      	sub	sp, #20
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    5194:	6905      	ldr	r5, [r0, #16]
	struct usb_cfg_data * const cfg = (void *)dev->config;
    5196:	6843      	ldr	r3, [r0, #4]
	struct cdc_acm_notification notification;
	uint32_t cnt = 0U;

	notification.bmRequestType = 0xA1;
    5198:	22a1      	movs	r2, #161	; 0xa1
    519a:	f88d 2004 	strb.w	r2, [sp, #4]
	notification.bNotificationType = 0x20;
    519e:	2220      	movs	r2, #32
    51a0:	f88d 2005 	strb.w	r2, [sp, #5]
	notification.wValue = 0U;
    51a4:	2400      	movs	r4, #0
    51a6:	f8ad 4006 	strh.w	r4, [sp, #6]
	notification.wIndex = 0U;
    51aa:	f8ad 4008 	strh.w	r4, [sp, #8]
	notification.wLength = sys_cpu_to_le16(sizeof(serial_state));
    51ae:	2202      	movs	r2, #2
    51b0:	f8ad 200a 	strh.w	r2, [sp, #10]
	notification.data = sys_cpu_to_le16(serial_state);
    51b4:	f8ad 100c 	strh.w	r1, [sp, #12]

	dev_data->notification_sent = 0U;
    51b8:	f885 407d 	strb.w	r4, [r5, #125]	; 0x7d

	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    51bc:	6a18      	ldr	r0, [r3, #32]
    51be:	4623      	mov	r3, r4
    51c0:	220a      	movs	r2, #10
    51c2:	a901      	add	r1, sp, #4
    51c4:	7900      	ldrb	r0, [r0, #4]
    51c6:	f00d fc6a 	bl	12a9e <usb_write>
		  (const uint8_t *)&notification, sizeof(notification), NULL);

	/* Wait for notification to be sent */
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    51ca:	f895 307d 	ldrb.w	r3, [r5, #125]	; 0x7d
    51ce:	b94b      	cbnz	r3, 51e4 <cdc_acm_send_notification+0x54>
	z_impl_k_busy_wait(usec_to_wait);
    51d0:	2001      	movs	r0, #1
    51d2:	f011 f801 	bl	161d8 <z_impl_k_busy_wait>
		k_busy_wait(1);

		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
    51d6:	3401      	adds	r4, #1
    51d8:	4b04      	ldr	r3, [pc, #16]	; (51ec <cdc_acm_send_notification+0x5c>)
    51da:	429c      	cmp	r4, r3
    51dc:	d9f5      	bls.n	51ca <cdc_acm_send_notification+0x3a>
			LOG_DBG("CDC ACM notification timeout!");
			return -EIO;
    51de:	f06f 0004 	mvn.w	r0, #4
    51e2:	e000      	b.n	51e6 <cdc_acm_send_notification+0x56>
		}
	}

	return 0;
    51e4:	2000      	movs	r0, #0
}
    51e6:	b005      	add	sp, #20
    51e8:	bd30      	pop	{r4, r5, pc}
    51ea:	bf00      	nop
    51ec:	000186a0 	.word	0x000186a0

000051f0 <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
    51f0:	b510      	push	{r4, lr}
    51f2:	b082      	sub	sp, #8
    51f4:	f88d 1007 	strb.w	r1, [sp, #7]
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    51f8:	6904      	ldr	r4, [r0, #16]

	if (!dev_data->configured || dev_data->suspended) {
    51fa:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    51fe:	b113      	cbz	r3, 5206 <cdc_acm_poll_out+0x16>
    5200:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
    5204:	b18b      	cbz	r3, 522a <cdc_acm_poll_out+0x3a>
    5206:	4b28      	ldr	r3, [pc, #160]	; (52a8 <cdc_acm_poll_out+0xb8>)
    5208:	4a28      	ldr	r2, [pc, #160]	; (52ac <cdc_acm_poll_out+0xbc>)
    520a:	1a9b      	subs	r3, r3, r2
    520c:	08db      	lsrs	r3, r3, #3
		LOG_INF("USB device not ready, drop data");
    520e:	f04f 0100 	mov.w	r1, #0
    5212:	2203      	movs	r2, #3
    5214:	f362 0102 	bfi	r1, r2, #0, #3
    5218:	f36f 01c5 	bfc	r1, #3, #3
    521c:	f363 118f 	bfi	r1, r3, #6, #10
    5220:	4823      	ldr	r0, [pc, #140]	; (52b0 <cdc_acm_poll_out+0xc0>)
    5222:	f7fe f8d9 	bl	33d8 <log_0>
			return;
		}
	}

	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
}
    5226:	b002      	add	sp, #8
    5228:	bd10      	pop	{r4, pc}
	dev_data->tx_ready = false;
    522a:	2300      	movs	r3, #0
    522c:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    5230:	2201      	movs	r2, #1
    5232:	f10d 0107 	add.w	r1, sp, #7
    5236:	6f20      	ldr	r0, [r4, #112]	; 0x70
    5238:	f00c ffb4 	bl	121a4 <ring_buf_put>
    523c:	b9e0      	cbnz	r0, 5278 <cdc_acm_poll_out+0x88>
    523e:	4b1a      	ldr	r3, [pc, #104]	; (52a8 <cdc_acm_poll_out+0xb8>)
    5240:	4a1a      	ldr	r2, [pc, #104]	; (52ac <cdc_acm_poll_out+0xbc>)
    5242:	1a9b      	subs	r3, r3, r2
    5244:	08db      	lsrs	r3, r3, #3
		LOG_INF("Ring buffer full, drain buffer");
    5246:	f04f 0100 	mov.w	r1, #0
    524a:	2203      	movs	r2, #3
    524c:	f362 0102 	bfi	r1, r2, #0, #3
    5250:	f36f 01c5 	bfc	r1, #3, #3
    5254:	f363 118f 	bfi	r1, r3, #6, #10
    5258:	4816      	ldr	r0, [pc, #88]	; (52b4 <cdc_acm_poll_out+0xc4>)
    525a:	f7fe f8bd 	bl	33d8 <log_0>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    525e:	2201      	movs	r2, #1
    5260:	2100      	movs	r1, #0
    5262:	6f20      	ldr	r0, [r4, #112]	; 0x70
    5264:	f00d f808 	bl	12278 <ring_buf_get>
    5268:	b160      	cbz	r0, 5284 <cdc_acm_poll_out+0x94>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    526a:	2201      	movs	r2, #1
    526c:	f10d 0107 	add.w	r1, sp, #7
    5270:	6f20      	ldr	r0, [r4, #112]	; 0x70
    5272:	f00c ff97 	bl	121a4 <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    5276:	b128      	cbz	r0, 5284 <cdc_acm_poll_out+0x94>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    5278:	f104 0118 	add.w	r1, r4, #24
    527c:	480e      	ldr	r0, [pc, #56]	; (52b8 <cdc_acm_poll_out+0xc8>)
    527e:	f010 fd68 	bl	15d52 <k_work_submit_to_queue>
    5282:	e7d0      	b.n	5226 <cdc_acm_poll_out+0x36>
    5284:	4b08      	ldr	r3, [pc, #32]	; (52a8 <cdc_acm_poll_out+0xb8>)
    5286:	4a09      	ldr	r2, [pc, #36]	; (52ac <cdc_acm_poll_out+0xbc>)
    5288:	1a9b      	subs	r3, r3, r2
    528a:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Failed to drain buffer");
    528c:	f04f 0100 	mov.w	r1, #0
    5290:	2201      	movs	r2, #1
    5292:	f362 0102 	bfi	r1, r2, #0, #3
    5296:	f36f 01c5 	bfc	r1, #3, #3
    529a:	f363 118f 	bfi	r1, r3, #6, #10
    529e:	4807      	ldr	r0, [pc, #28]	; (52bc <cdc_acm_poll_out+0xcc>)
    52a0:	f7fe f89a 	bl	33d8 <log_0>
			return;
    52a4:	e7bf      	b.n	5226 <cdc_acm_poll_out+0x36>
    52a6:	bf00      	nop
    52a8:	00016638 	.word	0x00016638
    52ac:	000165d8 	.word	0x000165d8
    52b0:	00016cf4 	.word	0x00016cf4
    52b4:	00016d14 	.word	0x00016d14
    52b8:	20000668 	.word	0x20000668
    52bc:	00016d34 	.word	0x00016d34

000052c0 <cdc_acm_write_cb>:
{
    52c0:	b510      	push	{r4, lr}
    52c2:	4614      	mov	r4, r2
	dev_data->tx_ready = true;
    52c4:	2301      	movs	r3, #1
    52c6:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	if (dev_data->cb && dev_data->tx_irq_ena) {
    52ca:	6813      	ldr	r3, [r2, #0]
    52cc:	b113      	cbz	r3, 52d4 <cdc_acm_write_cb+0x14>
    52ce:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
    52d2:	b923      	cbnz	r3, 52de <cdc_acm_write_cb+0x1e>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
    52d4:	6f20      	ldr	r0, [r4, #112]	; 0x70
    52d6:	f00c ff01 	bl	120dc <ring_buf_is_empty>
    52da:	b130      	cbz	r0, 52ea <cdc_acm_write_cb+0x2a>
}
    52dc:	bd10      	pop	{r4, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    52de:	f102 0108 	add.w	r1, r2, #8
    52e2:	4805      	ldr	r0, [pc, #20]	; (52f8 <cdc_acm_write_cb+0x38>)
    52e4:	f010 fd35 	bl	15d52 <k_work_submit_to_queue>
    52e8:	e7f4      	b.n	52d4 <cdc_acm_write_cb+0x14>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    52ea:	f104 0118 	add.w	r1, r4, #24
    52ee:	4802      	ldr	r0, [pc, #8]	; (52f8 <cdc_acm_write_cb+0x38>)
    52f0:	f010 fd2f 	bl	15d52 <k_work_submit_to_queue>
    52f4:	e7f2      	b.n	52dc <cdc_acm_write_cb+0x1c>
    52f6:	bf00      	nop
    52f8:	20000668 	.word	0x20000668

000052fc <cdc_acm_init>:
{
    52fc:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    52fe:	6904      	ldr	r4, [r0, #16]
	dev_data->common.dev = dev;
    5300:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
    5304:	f104 0384 	add.w	r3, r4, #132	; 0x84
	parent->next = child;
    5308:	2200      	movs	r2, #0
    530a:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    530e:	4a0b      	ldr	r2, [pc, #44]	; (533c <cdc_acm_init+0x40>)
    5310:	6852      	ldr	r2, [r2, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    5312:	b172      	cbz	r2, 5332 <cdc_acm_init+0x36>
	parent->next = child;
    5314:	6013      	str	r3, [r2, #0]
	list->tail = node;
    5316:	4a09      	ldr	r2, [pc, #36]	; (533c <cdc_acm_init+0x40>)
    5318:	6053      	str	r3, [r2, #4]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
    531a:	4909      	ldr	r1, [pc, #36]	; (5340 <cdc_acm_init+0x44>)
    531c:	f104 0008 	add.w	r0, r4, #8
    5320:	f010 fd11 	bl	15d46 <k_work_init>
	k_work_init(&dev_data->tx_work, tx_work_handler);
    5324:	4907      	ldr	r1, [pc, #28]	; (5344 <cdc_acm_init+0x48>)
    5326:	f104 0018 	add.w	r0, r4, #24
    532a:	f010 fd0c 	bl	15d46 <k_work_init>
}
    532e:	2000      	movs	r0, #0
    5330:	bd10      	pop	{r4, pc}
    5332:	4a02      	ldr	r2, [pc, #8]	; (533c <cdc_acm_init+0x40>)
    5334:	6053      	str	r3, [r2, #4]
	list->head = node;
    5336:	6013      	str	r3, [r2, #0]
}
    5338:	e7ef      	b.n	531a <cdc_acm_init+0x1e>
    533a:	bf00      	nop
    533c:	200018c8 	.word	0x200018c8
    5340:	00012c89 	.word	0x00012c89
    5344:	00005349 	.word	0x00005349

00005348 <tx_work_handler>:
{
    5348:	b5f0      	push	{r4, r5, r6, r7, lr}
    534a:	b085      	sub	sp, #20
    534c:	4604      	mov	r4, r0
	struct cdc_acm_dev_data_t *dev_data =
    534e:	f1a0 0718 	sub.w	r7, r0, #24
	const struct device *dev = dev_data->common.dev;
    5352:	6e83      	ldr	r3, [r0, #104]	; 0x68
	struct usb_cfg_data *cfg = (void *)dev->config;
    5354:	685b      	ldr	r3, [r3, #4]
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    5356:	6a1b      	ldr	r3, [r3, #32]
    5358:	7d1d      	ldrb	r5, [r3, #20]
	if (usb_transfer_is_busy(ep)) {
    535a:	4628      	mov	r0, r5
    535c:	f00d fc7c 	bl	12c58 <usb_transfer_is_busy>
    5360:	b108      	cbz	r0, 5366 <tx_work_handler+0x1e>
}
    5362:	b005      	add	sp, #20
    5364:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
    5366:	f44f 6280 	mov.w	r2, #1024	; 0x400
    536a:	a903      	add	r1, sp, #12
    536c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    536e:	f00c ff39 	bl	121e4 <ring_buf_get_claim>
	if (!len) {
    5372:	4606      	mov	r6, r0
    5374:	2800      	cmp	r0, #0
    5376:	d0f4      	beq.n	5362 <tx_work_handler+0x1a>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
    5378:	f010 0f3f 	tst.w	r0, #63	; 0x3f
    537c:	d100      	bne.n	5380 <tx_work_handler+0x38>
		len -= 1;
    537e:	1e46      	subs	r6, r0, #1
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    5380:	9701      	str	r7, [sp, #4]
    5382:	4b06      	ldr	r3, [pc, #24]	; (539c <tx_work_handler+0x54>)
    5384:	9300      	str	r3, [sp, #0]
    5386:	2302      	movs	r3, #2
    5388:	4632      	mov	r2, r6
    538a:	9903      	ldr	r1, [sp, #12]
    538c:	4628      	mov	r0, r5
    538e:	f7ff fbdf 	bl	4b50 <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
    5392:	4631      	mov	r1, r6
    5394:	6da0      	ldr	r0, [r4, #88]	; 0x58
    5396:	f00c ff51 	bl	1223c <ring_buf_get_finish>
    539a:	e7e2      	b.n	5362 <tx_work_handler+0x1a>
    539c:	000052c1 	.word	0x000052c1

000053a0 <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(const struct device *dev)
{
    53a0:	b530      	push	{r4, r5, lr}
    53a2:	b083      	sub	sp, #12
	ARG_UNUSED(dev);

	k_work_queue_start(&z_usb_work_q,
    53a4:	4d08      	ldr	r5, [pc, #32]	; (53c8 <z_usb_work_q_init+0x28>)
    53a6:	2400      	movs	r4, #0
    53a8:	9400      	str	r4, [sp, #0]
    53aa:	f04f 33ff 	mov.w	r3, #4294967295
    53ae:	f44f 6280 	mov.w	r2, #1024	; 0x400
    53b2:	4906      	ldr	r1, [pc, #24]	; (53cc <z_usb_work_q_init+0x2c>)
    53b4:	4628      	mov	r0, r5
    53b6:	f00a ff39 	bl	1022c <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    53ba:	4905      	ldr	r1, [pc, #20]	; (53d0 <z_usb_work_q_init+0x30>)
    53bc:	4628      	mov	r0, r5
    53be:	f00a fbd9 	bl	fb74 <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
    53c2:	4620      	mov	r0, r4
    53c4:	b003      	add	sp, #12
    53c6:	bd30      	pop	{r4, r5, pc}
    53c8:	20000668 	.word	0x20000668
    53cc:	200034c0 	.word	0x200034c0
    53d0:	00016db8 	.word	0x00016db8

000053d4 <get_flash_area_from_id>:

extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
    53d4:	b410      	push	{r4}
    53d6:	4604      	mov	r4, r0
	for (int i = 0; i < flash_map_entries; i++) {
    53d8:	2300      	movs	r3, #0
    53da:	4a08      	ldr	r2, [pc, #32]	; (53fc <get_flash_area_from_id+0x28>)
    53dc:	6812      	ldr	r2, [r2, #0]
    53de:	429a      	cmp	r2, r3
    53e0:	dd09      	ble.n	53f6 <get_flash_area_from_id+0x22>
		if (flash_map[i].fa_id == idx) {
    53e2:	011a      	lsls	r2, r3, #4
    53e4:	4906      	ldr	r1, [pc, #24]	; (5400 <get_flash_area_from_id+0x2c>)
    53e6:	6809      	ldr	r1, [r1, #0]
    53e8:	eb01 1003 	add.w	r0, r1, r3, lsl #4
    53ec:	5c8a      	ldrb	r2, [r1, r2]
    53ee:	42a2      	cmp	r2, r4
    53f0:	d002      	beq.n	53f8 <get_flash_area_from_id+0x24>
	for (int i = 0; i < flash_map_entries; i++) {
    53f2:	3301      	adds	r3, #1
    53f4:	e7f1      	b.n	53da <get_flash_area_from_id+0x6>
			return &flash_map[i];
		}
	}

	return NULL;
    53f6:	2000      	movs	r0, #0
}
    53f8:	bc10      	pop	{r4}
    53fa:	4770      	bx	lr
    53fc:	00016e28 	.word	0x00016e28
    5400:	2000023c 	.word	0x2000023c

00005404 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    5404:	4b08      	ldr	r3, [pc, #32]	; (5428 <flash_area_open+0x24>)
    5406:	681b      	ldr	r3, [r3, #0]
    5408:	b13b      	cbz	r3, 541a <flash_area_open+0x16>
{
    540a:	b510      	push	{r4, lr}
    540c:	460c      	mov	r4, r1
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    540e:	f7ff ffe1 	bl	53d4 <get_flash_area_from_id>
	if (area == NULL) {
    5412:	b128      	cbz	r0, 5420 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    5414:	6020      	str	r0, [r4, #0]
	return 0;
    5416:	2000      	movs	r0, #0
}
    5418:	bd10      	pop	{r4, pc}
		return -EACCES;
    541a:	f06f 000c 	mvn.w	r0, #12
}
    541e:	4770      	bx	lr
		return -ENOENT;
    5420:	f06f 0001 	mvn.w	r0, #1
    5424:	e7f8      	b.n	5418 <flash_area_open+0x14>
    5426:	bf00      	nop
    5428:	2000023c 	.word	0x2000023c

0000542c <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    542c:	4b1b      	ldr	r3, [pc, #108]	; (549c <pm_system_resume+0x70>)
    542e:	681b      	ldr	r3, [r3, #0]
    5430:	2b00      	cmp	r3, #0
    5432:	d132      	bne.n	549a <pm_system_resume+0x6e>
{
    5434:	b530      	push	{r4, r5, lr}
    5436:	b085      	sub	sp, #20
		post_ops_done = 1;
    5438:	4b18      	ldr	r3, [pc, #96]	; (549c <pm_system_resume+0x70>)
    543a:	2201      	movs	r2, #1
    543c:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
    543e:	4b18      	ldr	r3, [pc, #96]	; (54a0 <pm_system_resume+0x74>)
    5440:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    5444:	ab04      	add	r3, sp, #16
    5446:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    544a:	4b16      	ldr	r3, [pc, #88]	; (54a4 <pm_system_resume+0x78>)
    544c:	b163      	cbz	r3, 5468 <pm_system_resume+0x3c>
		pm_power_state_exit_post_ops(info);
    544e:	f00d ff4f 	bl	132f0 <pm_power_state_exit_post_ops>
    5452:	f04f 0320 	mov.w	r3, #32
    5456:	f3ef 8511 	mrs	r5, BASEPRI
    545a:	f383 8812 	msr	BASEPRI_MAX, r3
    545e:	f3bf 8f6f 	isb	sy
	return list->head;
    5462:	4b11      	ldr	r3, [pc, #68]	; (54a8 <pm_system_resume+0x7c>)
    5464:	681c      	ldr	r4, [r3, #0]
    5466:	e00a      	b.n	547e <pm_system_resume+0x52>
	__asm__ volatile(
    5468:	2300      	movs	r3, #0
    546a:	f383 8811 	msr	BASEPRI, r3
    546e:	f3bf 8f6f 	isb	sy
}
    5472:	e7ee      	b.n	5452 <pm_system_resume+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    5474:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    5476:	b10c      	cbz	r4, 547c <pm_system_resume+0x50>
	return node->next;
    5478:	6823      	ldr	r3, [r4, #0]
    547a:	b143      	cbz	r3, 548e <pm_system_resume+0x62>
{
    547c:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    547e:	b134      	cbz	r4, 548e <pm_system_resume+0x62>
			callback = notifier->state_exit;
    5480:	68a3      	ldr	r3, [r4, #8]
		if (callback) {
    5482:	2b00      	cmp	r3, #0
    5484:	d0f6      	beq.n	5474 <pm_system_resume+0x48>
			callback(z_power_state.state);
    5486:	4a06      	ldr	r2, [pc, #24]	; (54a0 <pm_system_resume+0x74>)
    5488:	7810      	ldrb	r0, [r2, #0]
    548a:	4798      	blx	r3
    548c:	e7f2      	b.n	5474 <pm_system_resume+0x48>
	__asm__ volatile(
    548e:	f385 8811 	msr	BASEPRI, r5
    5492:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
	}
}
    5496:	b005      	add	sp, #20
    5498:	bd30      	pop	{r4, r5, pc}
    549a:	4770      	bx	lr
    549c:	20000240 	.word	0x20000240
    54a0:	200018d8 	.word	0x200018d8
    54a4:	000132f1 	.word	0x000132f1
    54a8:	200018d0 	.word	0x200018d0

000054ac <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    54ac:	b570      	push	{r4, r5, r6, lr}
    54ae:	b088      	sub	sp, #32
    54b0:	4606      	mov	r6, r0
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
    54b2:	4c2a      	ldr	r4, [pc, #168]	; (555c <pm_system_suspend+0xb0>)
    54b4:	466d      	mov	r5, sp
    54b6:	4601      	mov	r1, r0
    54b8:	4628      	mov	r0, r5
    54ba:	f00d fd98 	bl	12fee <pm_policy_next_state>
    54be:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    54c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    54c6:	7820      	ldrb	r0, [r4, #0]
    54c8:	2800      	cmp	r0, #0
    54ca:	d045      	beq.n	5558 <pm_system_suspend+0xac>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
    54cc:	4b24      	ldr	r3, [pc, #144]	; (5560 <pm_system_suspend+0xb4>)
    54ce:	2200      	movs	r2, #0
    54d0:	601a      	str	r2, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    54d2:	f1b6 3fff 	cmp.w	r6, #4294967295
    54d6:	d10c      	bne.n	54f2 <pm_system_suspend+0x46>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    54d8:	f00a ff64 	bl	103a4 <k_sched_lock>
	__asm__ volatile(
    54dc:	f04f 0320 	mov.w	r3, #32
    54e0:	f3ef 8511 	mrs	r5, BASEPRI
    54e4:	f383 8812 	msr	BASEPRI_MAX, r3
    54e8:	f3bf 8f6f 	isb	sy
	return list->head;
    54ec:	4b1d      	ldr	r3, [pc, #116]	; (5564 <pm_system_suspend+0xb8>)
    54ee:	681c      	ldr	r4, [r3, #0]
    54f0:	e016      	b.n	5520 <pm_system_suspend+0x74>
		     k_us_to_ticks_ceil32(z_power_state.exit_latency_us), true);
    54f2:	68a3      	ldr	r3, [r4, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    54f4:	0c59      	lsrs	r1, r3, #17
    54f6:	03d8      	lsls	r0, r3, #15
    54f8:	4c1b      	ldr	r4, [pc, #108]	; (5568 <pm_system_suspend+0xbc>)
    54fa:	4a1c      	ldr	r2, [pc, #112]	; (556c <pm_system_suspend+0xc0>)
    54fc:	2300      	movs	r3, #0
    54fe:	1900      	adds	r0, r0, r4
    5500:	f04f 0400 	mov.w	r4, #0
    5504:	eb44 0101 	adc.w	r1, r4, r1
    5508:	f7fb fd9a 	bl	1040 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    550c:	2101      	movs	r1, #1
    550e:	1a30      	subs	r0, r6, r0
    5510:	f010 fe33 	bl	1617a <z_set_timeout_expiry>
    5514:	e7e0      	b.n	54d8 <pm_system_suspend+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    5516:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    5518:	b10c      	cbz	r4, 551e <pm_system_suspend+0x72>
	return node->next;
    551a:	6823      	ldr	r3, [r4, #0]
    551c:	b143      	cbz	r3, 5530 <pm_system_suspend+0x84>
{
    551e:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    5520:	b134      	cbz	r4, 5530 <pm_system_suspend+0x84>
			callback = notifier->state_entry;
    5522:	6863      	ldr	r3, [r4, #4]
		if (callback) {
    5524:	2b00      	cmp	r3, #0
    5526:	d0f6      	beq.n	5516 <pm_system_suspend+0x6a>
			callback(z_power_state.state);
    5528:	4a0c      	ldr	r2, [pc, #48]	; (555c <pm_system_suspend+0xb0>)
    552a:	7810      	ldrb	r0, [r2, #0]
    552c:	4798      	blx	r3
    552e:	e7f2      	b.n	5516 <pm_system_suspend+0x6a>
	__asm__ volatile(
    5530:	f385 8811 	msr	BASEPRI, r5
    5534:	f3bf 8f6f 	isb	sy
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
	pm_state_set(z_power_state);
    5538:	4b08      	ldr	r3, [pc, #32]	; (555c <pm_system_suspend+0xb0>)
    553a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    553e:	ab08      	add	r3, sp, #32
    5540:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    5544:	4b0a      	ldr	r3, [pc, #40]	; (5570 <pm_system_suspend+0xc4>)
    5546:	b10b      	cbz	r3, 554c <pm_system_suspend+0xa0>
		pm_power_state_set(info);
    5548:	f00d febf 	bl	132ca <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    554c:	f7ff ff6e 	bl	542c <pm_system_resume>
	k_sched_unlock();
    5550:	f00b f926 	bl	107a0 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
    5554:	4b01      	ldr	r3, [pc, #4]	; (555c <pm_system_suspend+0xb0>)
    5556:	7818      	ldrb	r0, [r3, #0]
}
    5558:	b008      	add	sp, #32
    555a:	bd70      	pop	{r4, r5, r6, pc}
    555c:	200018d8 	.word	0x200018d8
    5560:	20000240 	.word	0x20000240
    5564:	200018d0 	.word	0x200018d0
    5568:	000f423f 	.word	0x000f423f
    556c:	000f4240 	.word	0x000f4240
    5570:	000132cb 	.word	0x000132cb

00005574 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    5574:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    5576:	4802      	ldr	r0, [pc, #8]	; (5580 <nrf_cc3xx_platform_abort_init+0xc>)
    5578:	f00b fd9e 	bl	110b8 <nrf_cc3xx_platform_set_abort>
}
    557c:	bd08      	pop	{r3, pc}
    557e:	bf00      	nop
    5580:	00016e34 	.word	0x00016e34

00005584 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    5584:	b1d0      	cbz	r0, 55bc <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    5586:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    5588:	6842      	ldr	r2, [r0, #4]
    558a:	2a04      	cmp	r2, #4
    558c:	d005      	beq.n	559a <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    558e:	b1d2      	cbz	r2, 55c6 <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    5590:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    5592:	f00a fc5d 	bl	fe50 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    5596:	2000      	movs	r0, #0
    }
}
    5598:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    559a:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    559c:	2200      	movs	r2, #0
    559e:	f3bf 8f5b 	dmb	ish
    55a2:	e853 1f00 	ldrex	r1, [r3]
    55a6:	2901      	cmp	r1, #1
    55a8:	d103      	bne.n	55b2 <mutex_unlock_platform+0x2e>
    55aa:	e843 2000 	strex	r0, r2, [r3]
    55ae:	2800      	cmp	r0, #0
    55b0:	d1f7      	bne.n	55a2 <mutex_unlock_platform+0x1e>
    55b2:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    55b6:	d104      	bne.n	55c2 <mutex_unlock_platform+0x3e>
    55b8:	4610      	mov	r0, r2
    55ba:	e7ed      	b.n	5598 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    55bc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    55c0:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    55c2:	4802      	ldr	r0, [pc, #8]	; (55cc <mutex_unlock_platform+0x48>)
    55c4:	e7e8      	b.n	5598 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    55c6:	4802      	ldr	r0, [pc, #8]	; (55d0 <mutex_unlock_platform+0x4c>)
    55c8:	e7e6      	b.n	5598 <mutex_unlock_platform+0x14>
    55ca:	bf00      	nop
    55cc:	ffff8fe9 	.word	0xffff8fe9
    55d0:	ffff8fea 	.word	0xffff8fea

000055d4 <mutex_lock_platform>:
    if(mutex == NULL) {
    55d4:	b320      	cbz	r0, 5620 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    55d6:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    55d8:	6842      	ldr	r2, [r0, #4]
    55da:	2a04      	cmp	r2, #4
    55dc:	d002      	beq.n	55e4 <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    55de:	b992      	cbnz	r2, 5606 <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    55e0:	4811      	ldr	r0, [pc, #68]	; (5628 <mutex_lock_platform+0x54>)
    55e2:	e00f      	b.n	5604 <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    55e4:	6803      	ldr	r3, [r0, #0]
    55e6:	2201      	movs	r2, #1
    55e8:	f3bf 8f5b 	dmb	ish
    55ec:	e853 1f00 	ldrex	r1, [r3]
    55f0:	2900      	cmp	r1, #0
    55f2:	d103      	bne.n	55fc <mutex_lock_platform+0x28>
    55f4:	e843 2000 	strex	r0, r2, [r3]
    55f8:	2800      	cmp	r0, #0
    55fa:	d1f7      	bne.n	55ec <mutex_lock_platform+0x18>
    55fc:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    5600:	d10c      	bne.n	561c <mutex_lock_platform+0x48>
    5602:	2000      	movs	r0, #0
}
    5604:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
    5606:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    5608:	f04f 32ff 	mov.w	r2, #4294967295
    560c:	f04f 33ff 	mov.w	r3, #4294967295
    5610:	f00a fb94 	bl	fd3c <z_impl_k_mutex_lock>
        if (ret == 0) {
    5614:	2800      	cmp	r0, #0
    5616:	d0f5      	beq.n	5604 <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    5618:	4804      	ldr	r0, [pc, #16]	; (562c <mutex_lock_platform+0x58>)
    561a:	e7f3      	b.n	5604 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    561c:	4803      	ldr	r0, [pc, #12]	; (562c <mutex_lock_platform+0x58>)
    561e:	e7f1      	b.n	5604 <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    5620:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    5624:	4770      	bx	lr
    5626:	bf00      	nop
    5628:	ffff8fea 	.word	0xffff8fea
    562c:	ffff8fe9 	.word	0xffff8fe9

00005630 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    5630:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    5632:	4604      	mov	r4, r0
    5634:	b188      	cbz	r0, 565a <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    5636:	6863      	ldr	r3, [r4, #4]
    5638:	2b04      	cmp	r3, #4
    563a:	d00d      	beq.n	5658 <mutex_free_platform+0x28>
    563c:	2b08      	cmp	r3, #8
    563e:	d00b      	beq.n	5658 <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    5640:	b153      	cbz	r3, 5658 <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    5642:	f013 0f02 	tst.w	r3, #2
    5646:	d00d      	beq.n	5664 <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    5648:	4621      	mov	r1, r4
    564a:	4809      	ldr	r0, [pc, #36]	; (5670 <mutex_free_platform+0x40>)
    564c:	f010 fa3d 	bl	15aca <k_mem_slab_free>
        mutex->mutex = NULL;
    5650:	2300      	movs	r3, #0
    5652:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    5654:	2300      	movs	r3, #0
    5656:	6063      	str	r3, [r4, #4]
}
    5658:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    565a:	4b06      	ldr	r3, [pc, #24]	; (5674 <mutex_free_platform+0x44>)
    565c:	685b      	ldr	r3, [r3, #4]
    565e:	4806      	ldr	r0, [pc, #24]	; (5678 <mutex_free_platform+0x48>)
    5660:	4798      	blx	r3
    5662:	e7e8      	b.n	5636 <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    5664:	2214      	movs	r2, #20
    5666:	2100      	movs	r1, #0
    5668:	6820      	ldr	r0, [r4, #0]
    566a:	f00d fde5 	bl	13238 <memset>
    566e:	e7f1      	b.n	5654 <mutex_free_platform+0x24>
    5670:	200018e4 	.word	0x200018e4
    5674:	200002c8 	.word	0x200002c8
    5678:	00016e3c 	.word	0x00016e3c

0000567c <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    567c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    567e:	4604      	mov	r4, r0
    5680:	b178      	cbz	r0, 56a2 <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    5682:	6863      	ldr	r3, [r4, #4]
    5684:	2b04      	cmp	r3, #4
    5686:	d00b      	beq.n	56a0 <mutex_init_platform+0x24>
    5688:	2b08      	cmp	r3, #8
    568a:	d009      	beq.n	56a0 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    568c:	b90b      	cbnz	r3, 5692 <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    568e:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    5690:	b163      	cbz	r3, 56ac <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    5692:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    5694:	f010 fab8 	bl	15c08 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    5698:	6863      	ldr	r3, [r4, #4]
    569a:	f043 0301 	orr.w	r3, r3, #1
    569e:	6063      	str	r3, [r4, #4]
}
    56a0:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    56a2:	4b0f      	ldr	r3, [pc, #60]	; (56e0 <mutex_init_platform+0x64>)
    56a4:	685b      	ldr	r3, [r3, #4]
    56a6:	480f      	ldr	r0, [pc, #60]	; (56e4 <mutex_init_platform+0x68>)
    56a8:	4798      	blx	r3
    56aa:	e7ea      	b.n	5682 <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    56ac:	f04f 32ff 	mov.w	r2, #4294967295
    56b0:	f04f 33ff 	mov.w	r3, #4294967295
    56b4:	4621      	mov	r1, r4
    56b6:	480c      	ldr	r0, [pc, #48]	; (56e8 <mutex_init_platform+0x6c>)
    56b8:	f00a fa06 	bl	fac8 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    56bc:	b908      	cbnz	r0, 56c2 <mutex_init_platform+0x46>
    56be:	6823      	ldr	r3, [r4, #0]
    56c0:	b91b      	cbnz	r3, 56ca <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    56c2:	4b07      	ldr	r3, [pc, #28]	; (56e0 <mutex_init_platform+0x64>)
    56c4:	685b      	ldr	r3, [r3, #4]
    56c6:	4809      	ldr	r0, [pc, #36]	; (56ec <mutex_init_platform+0x70>)
    56c8:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    56ca:	2214      	movs	r2, #20
    56cc:	2100      	movs	r1, #0
    56ce:	6820      	ldr	r0, [r4, #0]
    56d0:	f00d fdb2 	bl	13238 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    56d4:	6863      	ldr	r3, [r4, #4]
    56d6:	f043 0302 	orr.w	r3, r3, #2
    56da:	6063      	str	r3, [r4, #4]
    56dc:	e7d9      	b.n	5692 <mutex_init_platform+0x16>
    56de:	bf00      	nop
    56e0:	200002c8 	.word	0x200002c8
    56e4:	00016e3c 	.word	0x00016e3c
    56e8:	200018e4 	.word	0x200018e4
    56ec:	00016e64 	.word	0x00016e64

000056f0 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    56f0:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    56f2:	2340      	movs	r3, #64	; 0x40
    56f4:	2214      	movs	r2, #20
    56f6:	4904      	ldr	r1, [pc, #16]	; (5708 <nrf_cc3xx_platform_mutex_init+0x18>)
    56f8:	4804      	ldr	r0, [pc, #16]	; (570c <nrf_cc3xx_platform_mutex_init+0x1c>)
    56fa:	f010 f9d8 	bl	15aae <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    56fe:	4904      	ldr	r1, [pc, #16]	; (5710 <nrf_cc3xx_platform_mutex_init+0x20>)
    5700:	4804      	ldr	r0, [pc, #16]	; (5714 <nrf_cc3xx_platform_mutex_init+0x24>)
    5702:	f00b fd3b 	bl	1117c <nrf_cc3xx_platform_set_mutexes>
}
    5706:	bd08      	pop	{r3, pc}
    5708:	20001900 	.word	0x20001900
    570c:	200018e4 	.word	0x200018e4
    5710:	00016ea4 	.word	0x00016ea4
    5714:	00016e94 	.word	0x00016e94

00005718 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    5718:	4901      	ldr	r1, [pc, #4]	; (5720 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    571a:	2210      	movs	r2, #16
	str	r2, [r1]
    571c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    571e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    5720:	e000ed10 	.word	0xe000ed10

00005724 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    5724:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    5726:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    5728:	f380 8811 	msr	BASEPRI, r0
	isb
    572c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    5730:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    5734:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    5736:	b662      	cpsie	i
	isb
    5738:	f3bf 8f6f 	isb	sy

	bx	lr
    573c:	4770      	bx	lr
    573e:	bf00      	nop

00005740 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    5740:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    5742:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    5744:	f381 8811 	msr	BASEPRI, r1

	wfe
    5748:	bf20      	wfe

	msr	BASEPRI, r0
    574a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    574e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    5750:	4770      	bx	lr
    5752:	bf00      	nop

00005754 <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    5754:	b570      	push	{r4, r5, r6, lr}
    5756:	b082      	sub	sp, #8
    5758:	4604      	mov	r4, r0
    575a:	4d1f      	ldr	r5, [pc, #124]	; (57d8 <esf_dump+0x84>)
    575c:	4b1f      	ldr	r3, [pc, #124]	; (57dc <esf_dump+0x88>)
    575e:	1aed      	subs	r5, r5, r3
    5760:	08ed      	lsrs	r5, r5, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    5762:	2601      	movs	r6, #1
    5764:	f04f 0300 	mov.w	r3, #0
    5768:	f366 0302 	bfi	r3, r6, #0, #3
    576c:	f36f 03c5 	bfc	r3, #3, #3
    5770:	f365 138f 	bfi	r3, r5, #6, #10
    5774:	f8ad 3000 	strh.w	r3, [sp]
    5778:	6883      	ldr	r3, [r0, #8]
    577a:	6842      	ldr	r2, [r0, #4]
    577c:	6801      	ldr	r1, [r0, #0]
    577e:	4818      	ldr	r0, [pc, #96]	; (57e0 <esf_dump+0x8c>)
    5780:	f7fd fd58 	bl	3234 <log_3>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    5784:	f04f 0300 	mov.w	r3, #0
    5788:	f366 0302 	bfi	r3, r6, #0, #3
    578c:	f36f 03c5 	bfc	r3, #3, #3
    5790:	f365 138f 	bfi	r3, r5, #6, #10
    5794:	f8ad 3000 	strh.w	r3, [sp]
    5798:	6963      	ldr	r3, [r4, #20]
    579a:	6922      	ldr	r2, [r4, #16]
    579c:	68e1      	ldr	r1, [r4, #12]
    579e:	4811      	ldr	r0, [pc, #68]	; (57e4 <esf_dump+0x90>)
    57a0:	f7fd fd48 	bl	3234 <log_3>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    57a4:	f04f 0200 	mov.w	r2, #0
    57a8:	f366 0202 	bfi	r2, r6, #0, #3
    57ac:	f36f 02c5 	bfc	r2, #3, #3
    57b0:	f365 128f 	bfi	r2, r5, #6, #10
    57b4:	69e1      	ldr	r1, [r4, #28]
    57b6:	480c      	ldr	r0, [pc, #48]	; (57e8 <esf_dump+0x94>)
    57b8:	f7fd fd7a 	bl	32b0 <log_1>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    57bc:	f04f 0200 	mov.w	r2, #0
    57c0:	f366 0202 	bfi	r2, r6, #0, #3
    57c4:	f36f 02c5 	bfc	r2, #3, #3
    57c8:	f365 128f 	bfi	r2, r5, #6, #10
    57cc:	69a1      	ldr	r1, [r4, #24]
    57ce:	4807      	ldr	r0, [pc, #28]	; (57ec <esf_dump+0x98>)
    57d0:	f7fd fd6e 	bl	32b0 <log_1>
		esf->basic.pc);
}
    57d4:	b002      	add	sp, #8
    57d6:	bd70      	pop	{r4, r5, r6, pc}
    57d8:	00016618 	.word	0x00016618
    57dc:	000165d8 	.word	0x000165d8
    57e0:	00016eb8 	.word	0x00016eb8
    57e4:	00016ee8 	.word	0x00016ee8
    57e8:	00016f18 	.word	0x00016f18
    57ec:	00016f28 	.word	0x00016f28

000057f0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    57f0:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    57f2:	2b00      	cmp	r3, #0
    57f4:	db08      	blt.n	5808 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    57f6:	f000 001f 	and.w	r0, r0, #31
    57fa:	095b      	lsrs	r3, r3, #5
    57fc:	2201      	movs	r2, #1
    57fe:	fa02 f000 	lsl.w	r0, r2, r0
    5802:	4a02      	ldr	r2, [pc, #8]	; (580c <arch_irq_enable+0x1c>)
    5804:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    5808:	4770      	bx	lr
    580a:	bf00      	nop
    580c:	e000e100 	.word	0xe000e100

00005810 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    5810:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    5812:	2b00      	cmp	r3, #0
    5814:	db0d      	blt.n	5832 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5816:	f000 001f 	and.w	r0, r0, #31
    581a:	095b      	lsrs	r3, r3, #5
    581c:	2201      	movs	r2, #1
    581e:	fa02 f000 	lsl.w	r0, r2, r0
    5822:	3320      	adds	r3, #32
    5824:	4a03      	ldr	r2, [pc, #12]	; (5834 <arch_irq_disable+0x24>)
    5826:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    582a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    582e:	f3bf 8f6f 	isb	sy
}
    5832:	4770      	bx	lr
    5834:	e000e100 	.word	0xe000e100

00005838 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    5838:	0942      	lsrs	r2, r0, #5
    583a:	4b05      	ldr	r3, [pc, #20]	; (5850 <arch_irq_is_enabled+0x18>)
    583c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    5840:	f000 001f 	and.w	r0, r0, #31
    5844:	2301      	movs	r3, #1
    5846:	fa03 f000 	lsl.w	r0, r3, r0
}
    584a:	4010      	ands	r0, r2
    584c:	4770      	bx	lr
    584e:	bf00      	nop
    5850:	e000e100 	.word	0xe000e100

00005854 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    5854:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    5856:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    5858:	2b00      	cmp	r3, #0
    585a:	db08      	blt.n	586e <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    585c:	0149      	lsls	r1, r1, #5
    585e:	b2c9      	uxtb	r1, r1
    5860:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    5864:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    5868:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    586c:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    586e:	f000 000f 	and.w	r0, r0, #15
    5872:	0149      	lsls	r1, r1, #5
    5874:	b2c9      	uxtb	r1, r1
    5876:	4b01      	ldr	r3, [pc, #4]	; (587c <z_arm_irq_priority_set+0x28>)
    5878:	5419      	strb	r1, [r3, r0]
}
    587a:	4770      	bx	lr
    587c:	e000ed14 	.word	0xe000ed14

00005880 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    5880:	bf30      	wfi
    b z_SysNmiOnReset
    5882:	f7ff bffd 	b.w	5880 <z_SysNmiOnReset>
    5886:	bf00      	nop

00005888 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    5888:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    588a:	4b0b      	ldr	r3, [pc, #44]	; (58b8 <z_arm_prep_c+0x30>)
    588c:	4a0b      	ldr	r2, [pc, #44]	; (58bc <z_arm_prep_c+0x34>)
    588e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    5892:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    5894:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5898:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    589c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    58a0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    58a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    58a8:	f00a f89a 	bl	f9e0 <z_bss_zero>
	z_data_copy();
    58ac:	f00b f93e 	bl	10b2c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    58b0:	f000 fcb6 	bl	6220 <z_arm_interrupt_init>
	z_cstart();
    58b4:	f00a f8a0 	bl	f9f8 <z_cstart>
    58b8:	e000ed00 	.word	0xe000ed00
    58bc:	00000000 	.word	0x00000000

000058c0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    58c0:	4a0a      	ldr	r2, [pc, #40]	; (58ec <arch_swap+0x2c>)
    58c2:	6893      	ldr	r3, [r2, #8]
    58c4:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    58c8:	4909      	ldr	r1, [pc, #36]	; (58f0 <arch_swap+0x30>)
    58ca:	6809      	ldr	r1, [r1, #0]
    58cc:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    58d0:	4908      	ldr	r1, [pc, #32]	; (58f4 <arch_swap+0x34>)
    58d2:	684b      	ldr	r3, [r1, #4]
    58d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    58d8:	604b      	str	r3, [r1, #4]
    58da:	2300      	movs	r3, #0
    58dc:	f383 8811 	msr	BASEPRI, r3
    58e0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    58e4:	6893      	ldr	r3, [r2, #8]
}
    58e6:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    58ea:	4770      	bx	lr
    58ec:	20002f60 	.word	0x20002f60
    58f0:	00017e18 	.word	0x00017e18
    58f4:	e000ed00 	.word	0xe000ed00

000058f8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    58f8:	4913      	ldr	r1, [pc, #76]	; (5948 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    58fa:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    58fc:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    5900:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    5902:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    5906:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    590a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    590c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    5910:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    5914:	4f0d      	ldr	r7, [pc, #52]	; (594c <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    5916:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    591a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    591c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    591e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    5920:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    5924:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    5926:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    592a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    592e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    5930:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    5932:	f000 fd17 	bl	6364 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    5936:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    593a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    593e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    5942:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    5946:	4770      	bx	lr
    ldr r1, =_kernel
    5948:	20002f60 	.word	0x20002f60
    ldr v4, =_SCS_ICSR
    594c:	e000ed04 	.word	0xe000ed04

00005950 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    5950:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    5954:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    5956:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    595a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    595e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    5960:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    5964:	2902      	cmp	r1, #2
    beq _oops
    5966:	d0ff      	beq.n	5968 <_oops>

00005968 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    5968:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    596a:	f00d fb52 	bl	13012 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    596e:	bd01      	pop	{r0, pc}

00005970 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    5970:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    5972:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    5976:	490d      	ldr	r1, [pc, #52]	; (59ac <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    5978:	f021 0101 	bic.w	r1, r1, #1
    597c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    5980:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    5984:	9b01      	ldr	r3, [sp, #4]
    5986:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    598a:	9b02      	ldr	r3, [sp, #8]
    598c:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    5990:	9b03      	ldr	r3, [sp, #12]
    5992:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    5996:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    599a:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    599e:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    59a0:	2300      	movs	r3, #0
    59a2:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    59a6:	bc10      	pop	{r4}
    59a8:	4770      	bx	lr
    59aa:	bf00      	nop
    59ac:	0001189b 	.word	0x0001189b

000059b0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    59b0:	4b16      	ldr	r3, [pc, #88]	; (5a0c <z_check_thread_stack_fail+0x5c>)
    59b2:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    59b4:	b1da      	cbz	r2, 59ee <z_check_thread_stack_fail+0x3e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    59b6:	f110 0f16 	cmn.w	r0, #22
    59ba:	d01a      	beq.n	59f2 <z_check_thread_stack_fail+0x42>
{
    59bc:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    59be:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    59c2:	f1a3 0420 	sub.w	r4, r3, #32
    59c6:	4284      	cmp	r4, r0
    59c8:	d805      	bhi.n	59d6 <z_check_thread_stack_fail+0x26>
    59ca:	4283      	cmp	r3, r0
    59cc:	d908      	bls.n	59e0 <z_check_thread_stack_fail+0x30>
    59ce:	428b      	cmp	r3, r1
    59d0:	d808      	bhi.n	59e4 <z_check_thread_stack_fail+0x34>
    59d2:	2100      	movs	r1, #0
    59d4:	e000      	b.n	59d8 <z_check_thread_stack_fail+0x28>
    59d6:	2100      	movs	r1, #0
    59d8:	b931      	cbnz	r1, 59e8 <z_check_thread_stack_fail+0x38>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    59da:	2000      	movs	r0, #0
}
    59dc:	bc10      	pop	{r4}
    59de:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    59e0:	2100      	movs	r1, #0
    59e2:	e7f9      	b.n	59d8 <z_check_thread_stack_fail+0x28>
    59e4:	2101      	movs	r1, #1
    59e6:	e7f7      	b.n	59d8 <z_check_thread_stack_fail+0x28>
		return thread->stack_info.start;
    59e8:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    59ec:	e7f6      	b.n	59dc <z_check_thread_stack_fail+0x2c>
		return 0;
    59ee:	2000      	movs	r0, #0
    59f0:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    59f2:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    59f6:	428b      	cmp	r3, r1
    59f8:	bf94      	ite	ls
    59fa:	2100      	movls	r1, #0
    59fc:	2101      	movhi	r1, #1
    59fe:	b909      	cbnz	r1, 5a04 <z_check_thread_stack_fail+0x54>
	return 0;
    5a00:	2000      	movs	r0, #0
}
    5a02:	4770      	bx	lr
		return thread->stack_info.start;
    5a04:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    5a08:	4770      	bx	lr
    5a0a:	bf00      	nop
    5a0c:	20002f60 	.word	0x20002f60

00005a10 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    5a10:	b508      	push	{r3, lr}
    5a12:	460d      	mov	r5, r1
    5a14:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    5a16:	4b08      	ldr	r3, [pc, #32]	; (5a38 <arch_switch_to_main_thread+0x28>)
    5a18:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    5a1a:	f000 fca3 	bl	6364 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    5a1e:	4620      	mov	r0, r4
    5a20:	f385 8809 	msr	PSP, r5
    5a24:	2100      	movs	r1, #0
    5a26:	b663      	cpsie	if
    5a28:	f381 8811 	msr	BASEPRI, r1
    5a2c:	f3bf 8f6f 	isb	sy
    5a30:	2200      	movs	r2, #0
    5a32:	2300      	movs	r3, #0
    5a34:	f00b ff31 	bl	1189a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    5a38:	20002f60 	.word	0x20002f60

00005a3c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    5a3c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    5a3e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    5a40:	4a0b      	ldr	r2, [pc, #44]	; (5a70 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    5a42:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    5a44:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    5a46:	bf1e      	ittt	ne
	movne	r1, #0
    5a48:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    5a4a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    5a4c:	f010 f8b4 	blne	15bb8 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    5a50:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    5a52:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    5a56:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    5a5a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    5a5e:	4905      	ldr	r1, [pc, #20]	; (5a74 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    5a60:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    5a62:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    5a64:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    5a66:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    5a6a:	4903      	ldr	r1, [pc, #12]	; (5a78 <_isr_wrapper+0x3c>)
	bx r1
    5a6c:	4708      	bx	r1
    5a6e:	0000      	.short	0x0000
	ldr r2, =_kernel
    5a70:	20002f60 	.word	0x20002f60
	ldr r1, =_sw_isr_table
    5a74:	00016458 	.word	0x00016458
	ldr r1, =z_arm_int_exit
    5a78:	00005a7d 	.word	0x00005a7d

00005a7c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    5a7c:	4b04      	ldr	r3, [pc, #16]	; (5a90 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    5a7e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    5a80:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    5a82:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    5a84:	d003      	beq.n	5a8e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    5a86:	4903      	ldr	r1, [pc, #12]	; (5a94 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    5a88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    5a8c:	600a      	str	r2, [r1, #0]

00005a8e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    5a8e:	4770      	bx	lr
	ldr r3, =_kernel
    5a90:	20002f60 	.word	0x20002f60
	ldr r1, =_SCS_ICSR
    5a94:	e000ed04 	.word	0xe000ed04

00005a98 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
    5a98:	b508      	push	{r3, lr}
    5a9a:	4b4e      	ldr	r3, [pc, #312]	; (5bd4 <usage_fault+0x13c>)
    5a9c:	4a4e      	ldr	r2, [pc, #312]	; (5bd8 <usage_fault+0x140>)
    5a9e:	1a9b      	subs	r3, r3, r2
    5aa0:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    5aa2:	f04f 0100 	mov.w	r1, #0
    5aa6:	2201      	movs	r2, #1
    5aa8:	f362 0102 	bfi	r1, r2, #0, #3
    5aac:	f36f 01c5 	bfc	r1, #3, #3
    5ab0:	f363 118f 	bfi	r1, r3, #6, #10
    5ab4:	4849      	ldr	r0, [pc, #292]	; (5bdc <usage_fault+0x144>)
    5ab6:	f7fd fc8f 	bl	33d8 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    5aba:	4b49      	ldr	r3, [pc, #292]	; (5be0 <usage_fault+0x148>)
    5abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5abe:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    5ac2:	d121      	bne.n	5b08 <usage_fault+0x70>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    5ac4:	4b46      	ldr	r3, [pc, #280]	; (5be0 <usage_fault+0x148>)
    5ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5ac8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    5acc:	d12d      	bne.n	5b2a <usage_fault+0x92>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    5ace:	4b44      	ldr	r3, [pc, #272]	; (5be0 <usage_fault+0x148>)
    5ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5ad2:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    5ad6:	d139      	bne.n	5b4c <usage_fault+0xb4>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    5ad8:	4b41      	ldr	r3, [pc, #260]	; (5be0 <usage_fault+0x148>)
    5ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5adc:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    5ae0:	d145      	bne.n	5b6e <usage_fault+0xd6>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    5ae2:	4b3f      	ldr	r3, [pc, #252]	; (5be0 <usage_fault+0x148>)
    5ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5ae6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    5aea:	d151      	bne.n	5b90 <usage_fault+0xf8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    5aec:	4b3c      	ldr	r3, [pc, #240]	; (5be0 <usage_fault+0x148>)
    5aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5af0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    5af4:	d15d      	bne.n	5bb2 <usage_fault+0x11a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    5af6:	4a3a      	ldr	r2, [pc, #232]	; (5be0 <usage_fault+0x148>)
    5af8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5afa:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    5afe:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    5b02:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    5b04:	2000      	movs	r0, #0
    5b06:	bd08      	pop	{r3, pc}
    5b08:	4b32      	ldr	r3, [pc, #200]	; (5bd4 <usage_fault+0x13c>)
    5b0a:	4a33      	ldr	r2, [pc, #204]	; (5bd8 <usage_fault+0x140>)
    5b0c:	1a9b      	subs	r3, r3, r2
    5b0e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Division by zero");
    5b10:	f04f 0100 	mov.w	r1, #0
    5b14:	2201      	movs	r2, #1
    5b16:	f362 0102 	bfi	r1, r2, #0, #3
    5b1a:	f36f 01c5 	bfc	r1, #3, #3
    5b1e:	f363 118f 	bfi	r1, r3, #6, #10
    5b22:	4830      	ldr	r0, [pc, #192]	; (5be4 <usage_fault+0x14c>)
    5b24:	f7fd fc58 	bl	33d8 <log_0>
    5b28:	e7cc      	b.n	5ac4 <usage_fault+0x2c>
    5b2a:	4b2a      	ldr	r3, [pc, #168]	; (5bd4 <usage_fault+0x13c>)
    5b2c:	4a2a      	ldr	r2, [pc, #168]	; (5bd8 <usage_fault+0x140>)
    5b2e:	1a9b      	subs	r3, r3, r2
    5b30:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unaligned memory access");
    5b32:	f04f 0100 	mov.w	r1, #0
    5b36:	2201      	movs	r2, #1
    5b38:	f362 0102 	bfi	r1, r2, #0, #3
    5b3c:	f36f 01c5 	bfc	r1, #3, #3
    5b40:	f363 118f 	bfi	r1, r3, #6, #10
    5b44:	4828      	ldr	r0, [pc, #160]	; (5be8 <usage_fault+0x150>)
    5b46:	f7fd fc47 	bl	33d8 <log_0>
    5b4a:	e7c0      	b.n	5ace <usage_fault+0x36>
    5b4c:	4b21      	ldr	r3, [pc, #132]	; (5bd4 <usage_fault+0x13c>)
    5b4e:	4a22      	ldr	r2, [pc, #136]	; (5bd8 <usage_fault+0x140>)
    5b50:	1a9b      	subs	r3, r3, r2
    5b52:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  No coprocessor instructions");
    5b54:	f04f 0100 	mov.w	r1, #0
    5b58:	2201      	movs	r2, #1
    5b5a:	f362 0102 	bfi	r1, r2, #0, #3
    5b5e:	f36f 01c5 	bfc	r1, #3, #3
    5b62:	f363 118f 	bfi	r1, r3, #6, #10
    5b66:	4821      	ldr	r0, [pc, #132]	; (5bec <usage_fault+0x154>)
    5b68:	f7fd fc36 	bl	33d8 <log_0>
    5b6c:	e7b4      	b.n	5ad8 <usage_fault+0x40>
    5b6e:	4b19      	ldr	r3, [pc, #100]	; (5bd4 <usage_fault+0x13c>)
    5b70:	4a19      	ldr	r2, [pc, #100]	; (5bd8 <usage_fault+0x140>)
    5b72:	1a9b      	subs	r3, r3, r2
    5b74:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    5b76:	f04f 0100 	mov.w	r1, #0
    5b7a:	2201      	movs	r2, #1
    5b7c:	f362 0102 	bfi	r1, r2, #0, #3
    5b80:	f36f 01c5 	bfc	r1, #3, #3
    5b84:	f363 118f 	bfi	r1, r3, #6, #10
    5b88:	4819      	ldr	r0, [pc, #100]	; (5bf0 <usage_fault+0x158>)
    5b8a:	f7fd fc25 	bl	33d8 <log_0>
    5b8e:	e7a8      	b.n	5ae2 <usage_fault+0x4a>
    5b90:	4b10      	ldr	r3, [pc, #64]	; (5bd4 <usage_fault+0x13c>)
    5b92:	4a11      	ldr	r2, [pc, #68]	; (5bd8 <usage_fault+0x140>)
    5b94:	1a9b      	subs	r3, r3, r2
    5b96:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal use of the EPSR");
    5b98:	f04f 0100 	mov.w	r1, #0
    5b9c:	2201      	movs	r2, #1
    5b9e:	f362 0102 	bfi	r1, r2, #0, #3
    5ba2:	f36f 01c5 	bfc	r1, #3, #3
    5ba6:	f363 118f 	bfi	r1, r3, #6, #10
    5baa:	4812      	ldr	r0, [pc, #72]	; (5bf4 <usage_fault+0x15c>)
    5bac:	f7fd fc14 	bl	33d8 <log_0>
    5bb0:	e79c      	b.n	5aec <usage_fault+0x54>
    5bb2:	4b08      	ldr	r3, [pc, #32]	; (5bd4 <usage_fault+0x13c>)
    5bb4:	4a08      	ldr	r2, [pc, #32]	; (5bd8 <usage_fault+0x140>)
    5bb6:	1a9b      	subs	r3, r3, r2
    5bb8:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    5bba:	f04f 0100 	mov.w	r1, #0
    5bbe:	2201      	movs	r2, #1
    5bc0:	f362 0102 	bfi	r1, r2, #0, #3
    5bc4:	f36f 01c5 	bfc	r1, #3, #3
    5bc8:	f363 118f 	bfi	r1, r3, #6, #10
    5bcc:	480a      	ldr	r0, [pc, #40]	; (5bf8 <usage_fault+0x160>)
    5bce:	f7fd fc03 	bl	33d8 <log_0>
    5bd2:	e790      	b.n	5af6 <usage_fault+0x5e>
    5bd4:	00016618 	.word	0x00016618
    5bd8:	000165d8 	.word	0x000165d8
    5bdc:	00016f58 	.word	0x00016f58
    5be0:	e000ed00 	.word	0xe000ed00
    5be4:	00016f70 	.word	0x00016f70
    5be8:	00016f84 	.word	0x00016f84
    5bec:	00016fa0 	.word	0x00016fa0
    5bf0:	00016fc0 	.word	0x00016fc0
    5bf4:	00016fe8 	.word	0x00016fe8
    5bf8:	00017004 	.word	0x00017004

00005bfc <debug_monitor>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
    5bfc:	b508      	push	{r3, lr}
	*recoverable = false;
    5bfe:	2200      	movs	r2, #0
    5c00:	700a      	strb	r2, [r1, #0]
    5c02:	4b08      	ldr	r3, [pc, #32]	; (5c24 <debug_monitor+0x28>)
    5c04:	4908      	ldr	r1, [pc, #32]	; (5c28 <debug_monitor+0x2c>)
    5c06:	1a5b      	subs	r3, r3, r1
    5c08:	08db      	lsrs	r3, r3, #3

	PR_FAULT_INFO(
    5c0a:	f04f 0100 	mov.w	r1, #0
    5c0e:	2001      	movs	r0, #1
    5c10:	f360 0102 	bfi	r1, r0, #0, #3
    5c14:	f362 01c5 	bfi	r1, r2, #3, #3
    5c18:	f363 118f 	bfi	r1, r3, #6, #10
    5c1c:	4803      	ldr	r0, [pc, #12]	; (5c2c <debug_monitor+0x30>)
    5c1e:	f7fd fbdb 	bl	33d8 <log_0>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
    5c22:	bd08      	pop	{r3, pc}
    5c24:	00016618 	.word	0x00016618
    5c28:	000165d8 	.word	0x000165d8
    5c2c:	00017030 	.word	0x00017030

00005c30 <bus_fault>:
{
    5c30:	b570      	push	{r4, r5, r6, lr}
    5c32:	4605      	mov	r5, r0
    5c34:	460e      	mov	r6, r1
    5c36:	4614      	mov	r4, r2
    5c38:	4b5e      	ldr	r3, [pc, #376]	; (5db4 <bus_fault+0x184>)
    5c3a:	4a5f      	ldr	r2, [pc, #380]	; (5db8 <bus_fault+0x188>)
    5c3c:	1a9b      	subs	r3, r3, r2
    5c3e:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    5c40:	f04f 0100 	mov.w	r1, #0
    5c44:	2201      	movs	r2, #1
    5c46:	f362 0102 	bfi	r1, r2, #0, #3
    5c4a:	f36f 01c5 	bfc	r1, #3, #3
    5c4e:	f363 118f 	bfi	r1, r3, #6, #10
    5c52:	485a      	ldr	r0, [pc, #360]	; (5dbc <bus_fault+0x18c>)
    5c54:	f7fd fbc0 	bl	33d8 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    5c58:	4b59      	ldr	r3, [pc, #356]	; (5dc0 <bus_fault+0x190>)
    5c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5c5c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    5c60:	d124      	bne.n	5cac <bus_fault+0x7c>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    5c62:	4b57      	ldr	r3, [pc, #348]	; (5dc0 <bus_fault+0x190>)
    5c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5c66:	f413 6f00 	tst.w	r3, #2048	; 0x800
    5c6a:	d130      	bne.n	5cce <bus_fault+0x9e>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    5c6c:	4b54      	ldr	r3, [pc, #336]	; (5dc0 <bus_fault+0x190>)
    5c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5c70:	f413 7f00 	tst.w	r3, #512	; 0x200
    5c74:	d13c      	bne.n	5cf0 <bus_fault+0xc0>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    5c76:	4b52      	ldr	r3, [pc, #328]	; (5dc0 <bus_fault+0x190>)
    5c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5c7a:	f413 6f80 	tst.w	r3, #1024	; 0x400
    5c7e:	d165      	bne.n	5d4c <bus_fault+0x11c>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    5c80:	4b4f      	ldr	r3, [pc, #316]	; (5dc0 <bus_fault+0x190>)
    5c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5c84:	f413 7f80 	tst.w	r3, #256	; 0x100
    5c88:	d171      	bne.n	5d6e <bus_fault+0x13e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    5c8a:	4b4d      	ldr	r3, [pc, #308]	; (5dc0 <bus_fault+0x190>)
    5c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5c8e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    5c92:	d17d      	bne.n	5d90 <bus_fault+0x160>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    5c94:	4a4a      	ldr	r2, [pc, #296]	; (5dc0 <bus_fault+0x190>)
    5c96:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5c98:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    5c9c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    5c9e:	2101      	movs	r1, #1
    5ca0:	4628      	mov	r0, r5
    5ca2:	f00d f9c8 	bl	13036 <memory_fault_recoverable>
    5ca6:	7020      	strb	r0, [r4, #0]
}
    5ca8:	2000      	movs	r0, #0
    5caa:	bd70      	pop	{r4, r5, r6, pc}
    5cac:	4b41      	ldr	r3, [pc, #260]	; (5db4 <bus_fault+0x184>)
    5cae:	4a42      	ldr	r2, [pc, #264]	; (5db8 <bus_fault+0x188>)
    5cb0:	1a9b      	subs	r3, r3, r2
    5cb2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error");
    5cb4:	f04f 0100 	mov.w	r1, #0
    5cb8:	2201      	movs	r2, #1
    5cba:	f362 0102 	bfi	r1, r2, #0, #3
    5cbe:	f36f 01c5 	bfc	r1, #3, #3
    5cc2:	f363 118f 	bfi	r1, r3, #6, #10
    5cc6:	483f      	ldr	r0, [pc, #252]	; (5dc4 <bus_fault+0x194>)
    5cc8:	f7fd fb86 	bl	33d8 <log_0>
    5ccc:	e7c9      	b.n	5c62 <bus_fault+0x32>
    5cce:	4b39      	ldr	r3, [pc, #228]	; (5db4 <bus_fault+0x184>)
    5cd0:	4a39      	ldr	r2, [pc, #228]	; (5db8 <bus_fault+0x188>)
    5cd2:	1a9b      	subs	r3, r3, r2
    5cd4:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
    5cd6:	f04f 0100 	mov.w	r1, #0
    5cda:	2201      	movs	r2, #1
    5cdc:	f362 0102 	bfi	r1, r2, #0, #3
    5ce0:	f36f 01c5 	bfc	r1, #3, #3
    5ce4:	f363 118f 	bfi	r1, r3, #6, #10
    5ce8:	4837      	ldr	r0, [pc, #220]	; (5dc8 <bus_fault+0x198>)
    5cea:	f7fd fb75 	bl	33d8 <log_0>
    5cee:	e7bd      	b.n	5c6c <bus_fault+0x3c>
    5cf0:	4b30      	ldr	r3, [pc, #192]	; (5db4 <bus_fault+0x184>)
    5cf2:	4a31      	ldr	r2, [pc, #196]	; (5db8 <bus_fault+0x188>)
    5cf4:	1a9b      	subs	r3, r3, r2
    5cf6:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Precise data bus error");
    5cf8:	f04f 0100 	mov.w	r1, #0
    5cfc:	2201      	movs	r2, #1
    5cfe:	f362 0102 	bfi	r1, r2, #0, #3
    5d02:	f36f 01c5 	bfc	r1, #3, #3
    5d06:	f363 118f 	bfi	r1, r3, #6, #10
    5d0a:	4830      	ldr	r0, [pc, #192]	; (5dcc <bus_fault+0x19c>)
    5d0c:	f7fd fb64 	bl	33d8 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    5d10:	4b2b      	ldr	r3, [pc, #172]	; (5dc0 <bus_fault+0x190>)
    5d12:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    5d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5d16:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    5d1a:	d0ac      	beq.n	5c76 <bus_fault+0x46>
    5d1c:	4b25      	ldr	r3, [pc, #148]	; (5db4 <bus_fault+0x184>)
    5d1e:	4a26      	ldr	r2, [pc, #152]	; (5db8 <bus_fault+0x188>)
    5d20:	1a9b      	subs	r3, r3, r2
    5d22:	08db      	lsrs	r3, r3, #3
			PR_EXC("  BFAR Address: 0x%x", bfar);
    5d24:	f04f 0200 	mov.w	r2, #0
    5d28:	2001      	movs	r0, #1
    5d2a:	f360 0202 	bfi	r2, r0, #0, #3
    5d2e:	f36f 02c5 	bfc	r2, #3, #3
    5d32:	f363 128f 	bfi	r2, r3, #6, #10
    5d36:	4826      	ldr	r0, [pc, #152]	; (5dd0 <bus_fault+0x1a0>)
    5d38:	f7fd faba 	bl	32b0 <log_1>
			if (from_hard_fault != 0) {
    5d3c:	2e00      	cmp	r6, #0
    5d3e:	d09a      	beq.n	5c76 <bus_fault+0x46>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    5d40:	4a1f      	ldr	r2, [pc, #124]	; (5dc0 <bus_fault+0x190>)
    5d42:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5d44:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    5d48:	6293      	str	r3, [r2, #40]	; 0x28
    5d4a:	e794      	b.n	5c76 <bus_fault+0x46>
    5d4c:	4b19      	ldr	r3, [pc, #100]	; (5db4 <bus_fault+0x184>)
    5d4e:	4a1a      	ldr	r2, [pc, #104]	; (5db8 <bus_fault+0x188>)
    5d50:	1a9b      	subs	r3, r3, r2
    5d52:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Imprecise data bus error");
    5d54:	f04f 0100 	mov.w	r1, #0
    5d58:	2201      	movs	r2, #1
    5d5a:	f362 0102 	bfi	r1, r2, #0, #3
    5d5e:	f36f 01c5 	bfc	r1, #3, #3
    5d62:	f363 118f 	bfi	r1, r3, #6, #10
    5d66:	481b      	ldr	r0, [pc, #108]	; (5dd4 <bus_fault+0x1a4>)
    5d68:	f7fd fb36 	bl	33d8 <log_0>
    5d6c:	e788      	b.n	5c80 <bus_fault+0x50>
    5d6e:	4b11      	ldr	r3, [pc, #68]	; (5db4 <bus_fault+0x184>)
    5d70:	4a11      	ldr	r2, [pc, #68]	; (5db8 <bus_fault+0x188>)
    5d72:	1a9b      	subs	r3, r3, r2
    5d74:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction bus error");
    5d76:	f04f 0100 	mov.w	r1, #0
    5d7a:	2201      	movs	r2, #1
    5d7c:	f362 0102 	bfi	r1, r2, #0, #3
    5d80:	f36f 01c5 	bfc	r1, #3, #3
    5d84:	f363 118f 	bfi	r1, r3, #6, #10
    5d88:	4813      	ldr	r0, [pc, #76]	; (5dd8 <bus_fault+0x1a8>)
    5d8a:	f7fd fb25 	bl	33d8 <log_0>
    5d8e:	e781      	b.n	5c94 <bus_fault+0x64>
    5d90:	4b08      	ldr	r3, [pc, #32]	; (5db4 <bus_fault+0x184>)
    5d92:	4a09      	ldr	r2, [pc, #36]	; (5db8 <bus_fault+0x188>)
    5d94:	1a9b      	subs	r3, r3, r2
    5d96:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    5d98:	f04f 0100 	mov.w	r1, #0
    5d9c:	2201      	movs	r2, #1
    5d9e:	f362 0102 	bfi	r1, r2, #0, #3
    5da2:	f36f 01c5 	bfc	r1, #3, #3
    5da6:	f363 118f 	bfi	r1, r3, #6, #10
    5daa:	480c      	ldr	r0, [pc, #48]	; (5ddc <bus_fault+0x1ac>)
    5dac:	f7fd fb14 	bl	33d8 <log_0>
    5db0:	e770      	b.n	5c94 <bus_fault+0x64>
    5db2:	bf00      	nop
    5db4:	00016618 	.word	0x00016618
    5db8:	000165d8 	.word	0x000165d8
    5dbc:	00017054 	.word	0x00017054
    5dc0:	e000ed00 	.word	0xe000ed00
    5dc4:	0001706c 	.word	0x0001706c
    5dc8:	00017080 	.word	0x00017080
    5dcc:	00017094 	.word	0x00017094
    5dd0:	000170b0 	.word	0x000170b0
    5dd4:	000170c8 	.word	0x000170c8
    5dd8:	000170e4 	.word	0x000170e4
    5ddc:	000170fc 	.word	0x000170fc

00005de0 <mem_manage_fault>:
{
    5de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5de2:	4605      	mov	r5, r0
    5de4:	460c      	mov	r4, r1
    5de6:	4616      	mov	r6, r2
    5de8:	4b64      	ldr	r3, [pc, #400]	; (5f7c <mem_manage_fault+0x19c>)
    5dea:	4a65      	ldr	r2, [pc, #404]	; (5f80 <mem_manage_fault+0x1a0>)
    5dec:	1a9b      	subs	r3, r3, r2
    5dee:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    5df0:	f04f 0100 	mov.w	r1, #0
    5df4:	2201      	movs	r2, #1
    5df6:	f362 0102 	bfi	r1, r2, #0, #3
    5dfa:	f36f 01c5 	bfc	r1, #3, #3
    5dfe:	f363 118f 	bfi	r1, r3, #6, #10
    5e02:	4860      	ldr	r0, [pc, #384]	; (5f84 <mem_manage_fault+0x1a4>)
    5e04:	f7fd fae8 	bl	33d8 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    5e08:	4b5f      	ldr	r3, [pc, #380]	; (5f88 <mem_manage_fault+0x1a8>)
    5e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5e0c:	f013 0f10 	tst.w	r3, #16
    5e10:	d132      	bne.n	5e78 <mem_manage_fault+0x98>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    5e12:	4b5d      	ldr	r3, [pc, #372]	; (5f88 <mem_manage_fault+0x1a8>)
    5e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5e16:	f013 0f08 	tst.w	r3, #8
    5e1a:	d13e      	bne.n	5e9a <mem_manage_fault+0xba>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    5e1c:	4b5a      	ldr	r3, [pc, #360]	; (5f88 <mem_manage_fault+0x1a8>)
    5e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5e20:	f013 0f02 	tst.w	r3, #2
    5e24:	d14a      	bne.n	5ebc <mem_manage_fault+0xdc>
	uint32_t mmfar = -EINVAL;
    5e26:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    5e2a:	4b57      	ldr	r3, [pc, #348]	; (5f88 <mem_manage_fault+0x1a8>)
    5e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5e2e:	f013 0f01 	tst.w	r3, #1
    5e32:	d175      	bne.n	5f20 <mem_manage_fault+0x140>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    5e34:	4b54      	ldr	r3, [pc, #336]	; (5f88 <mem_manage_fault+0x1a8>)
    5e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5e38:	f013 0f20 	tst.w	r3, #32
    5e3c:	f040 8081 	bne.w	5f42 <mem_manage_fault+0x162>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    5e40:	4b51      	ldr	r3, [pc, #324]	; (5f88 <mem_manage_fault+0x1a8>)
    5e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5e44:	f013 0f10 	tst.w	r3, #16
    5e48:	d104      	bne.n	5e54 <mem_manage_fault+0x74>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    5e4a:	4b4f      	ldr	r3, [pc, #316]	; (5f88 <mem_manage_fault+0x1a8>)
    5e4c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    5e4e:	f014 0402 	ands.w	r4, r4, #2
    5e52:	d005      	beq.n	5e60 <mem_manage_fault+0x80>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    5e54:	4b4c      	ldr	r3, [pc, #304]	; (5f88 <mem_manage_fault+0x1a8>)
    5e56:	685c      	ldr	r4, [r3, #4]
    5e58:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    5e5c:	f040 8082 	bne.w	5f64 <mem_manage_fault+0x184>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    5e60:	4a49      	ldr	r2, [pc, #292]	; (5f88 <mem_manage_fault+0x1a8>)
    5e62:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5e64:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    5e68:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    5e6a:	2101      	movs	r1, #1
    5e6c:	4628      	mov	r0, r5
    5e6e:	f00d f8e2 	bl	13036 <memory_fault_recoverable>
    5e72:	7030      	strb	r0, [r6, #0]
}
    5e74:	4620      	mov	r0, r4
    5e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5e78:	4b40      	ldr	r3, [pc, #256]	; (5f7c <mem_manage_fault+0x19c>)
    5e7a:	4a41      	ldr	r2, [pc, #260]	; (5f80 <mem_manage_fault+0x1a0>)
    5e7c:	1a9b      	subs	r3, r3, r2
    5e7e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error (context area might be"
    5e80:	f04f 0100 	mov.w	r1, #0
    5e84:	2201      	movs	r2, #1
    5e86:	f362 0102 	bfi	r1, r2, #0, #3
    5e8a:	f36f 01c5 	bfc	r1, #3, #3
    5e8e:	f363 118f 	bfi	r1, r3, #6, #10
    5e92:	483e      	ldr	r0, [pc, #248]	; (5f8c <mem_manage_fault+0x1ac>)
    5e94:	f7fd faa0 	bl	33d8 <log_0>
    5e98:	e7bb      	b.n	5e12 <mem_manage_fault+0x32>
    5e9a:	4b38      	ldr	r3, [pc, #224]	; (5f7c <mem_manage_fault+0x19c>)
    5e9c:	4a38      	ldr	r2, [pc, #224]	; (5f80 <mem_manage_fault+0x1a0>)
    5e9e:	1a9b      	subs	r3, r3, r2
    5ea0:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
    5ea2:	f04f 0100 	mov.w	r1, #0
    5ea6:	2201      	movs	r2, #1
    5ea8:	f362 0102 	bfi	r1, r2, #0, #3
    5eac:	f36f 01c5 	bfc	r1, #3, #3
    5eb0:	f363 118f 	bfi	r1, r3, #6, #10
    5eb4:	4836      	ldr	r0, [pc, #216]	; (5f90 <mem_manage_fault+0x1b0>)
    5eb6:	f7fd fa8f 	bl	33d8 <log_0>
    5eba:	e7af      	b.n	5e1c <mem_manage_fault+0x3c>
    5ebc:	4b2f      	ldr	r3, [pc, #188]	; (5f7c <mem_manage_fault+0x19c>)
    5ebe:	4a30      	ldr	r2, [pc, #192]	; (5f80 <mem_manage_fault+0x1a0>)
    5ec0:	1a9b      	subs	r3, r3, r2
    5ec2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Data Access Violation");
    5ec4:	f04f 0100 	mov.w	r1, #0
    5ec8:	2201      	movs	r2, #1
    5eca:	f362 0102 	bfi	r1, r2, #0, #3
    5ece:	f36f 01c5 	bfc	r1, #3, #3
    5ed2:	f363 118f 	bfi	r1, r3, #6, #10
    5ed6:	482f      	ldr	r0, [pc, #188]	; (5f94 <mem_manage_fault+0x1b4>)
    5ed8:	f7fd fa7e 	bl	33d8 <log_0>
		uint32_t temp = SCB->MMFAR;
    5edc:	4b2a      	ldr	r3, [pc, #168]	; (5f88 <mem_manage_fault+0x1a8>)
    5ede:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    5ee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    5ee2:	f013 0f80 	tst.w	r3, #128	; 0x80
    5ee6:	d102      	bne.n	5eee <mem_manage_fault+0x10e>
	uint32_t mmfar = -EINVAL;
    5ee8:	f06f 0715 	mvn.w	r7, #21
    5eec:	e79d      	b.n	5e2a <mem_manage_fault+0x4a>
    5eee:	4b23      	ldr	r3, [pc, #140]	; (5f7c <mem_manage_fault+0x19c>)
    5ef0:	4a23      	ldr	r2, [pc, #140]	; (5f80 <mem_manage_fault+0x1a0>)
    5ef2:	1a9b      	subs	r3, r3, r2
    5ef4:	08db      	lsrs	r3, r3, #3
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    5ef6:	f04f 0200 	mov.w	r2, #0
    5efa:	2101      	movs	r1, #1
    5efc:	f361 0202 	bfi	r2, r1, #0, #3
    5f00:	f36f 02c5 	bfc	r2, #3, #3
    5f04:	f363 128f 	bfi	r2, r3, #6, #10
    5f08:	4639      	mov	r1, r7
    5f0a:	4823      	ldr	r0, [pc, #140]	; (5f98 <mem_manage_fault+0x1b8>)
    5f0c:	f7fd f9d0 	bl	32b0 <log_1>
			if (from_hard_fault != 0) {
    5f10:	2c00      	cmp	r4, #0
    5f12:	d08a      	beq.n	5e2a <mem_manage_fault+0x4a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    5f14:	4a1c      	ldr	r2, [pc, #112]	; (5f88 <mem_manage_fault+0x1a8>)
    5f16:	6a93      	ldr	r3, [r2, #40]	; 0x28
    5f18:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    5f1c:	6293      	str	r3, [r2, #40]	; 0x28
    5f1e:	e784      	b.n	5e2a <mem_manage_fault+0x4a>
    5f20:	4b16      	ldr	r3, [pc, #88]	; (5f7c <mem_manage_fault+0x19c>)
    5f22:	4a17      	ldr	r2, [pc, #92]	; (5f80 <mem_manage_fault+0x1a0>)
    5f24:	1a9b      	subs	r3, r3, r2
    5f26:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction Access Violation");
    5f28:	f04f 0100 	mov.w	r1, #0
    5f2c:	2201      	movs	r2, #1
    5f2e:	f362 0102 	bfi	r1, r2, #0, #3
    5f32:	f36f 01c5 	bfc	r1, #3, #3
    5f36:	f363 118f 	bfi	r1, r3, #6, #10
    5f3a:	4818      	ldr	r0, [pc, #96]	; (5f9c <mem_manage_fault+0x1bc>)
    5f3c:	f7fd fa4c 	bl	33d8 <log_0>
    5f40:	e778      	b.n	5e34 <mem_manage_fault+0x54>
    5f42:	4b0e      	ldr	r3, [pc, #56]	; (5f7c <mem_manage_fault+0x19c>)
    5f44:	4a0e      	ldr	r2, [pc, #56]	; (5f80 <mem_manage_fault+0x1a0>)
    5f46:	1a9b      	subs	r3, r3, r2
    5f48:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO(
    5f4a:	f04f 0100 	mov.w	r1, #0
    5f4e:	2201      	movs	r2, #1
    5f50:	f362 0102 	bfi	r1, r2, #0, #3
    5f54:	f36f 01c5 	bfc	r1, #3, #3
    5f58:	f363 118f 	bfi	r1, r3, #6, #10
    5f5c:	4810      	ldr	r0, [pc, #64]	; (5fa0 <mem_manage_fault+0x1c0>)
    5f5e:	f7fd fa3b 	bl	33d8 <log_0>
    5f62:	e76d      	b.n	5e40 <mem_manage_fault+0x60>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    5f64:	4629      	mov	r1, r5
    5f66:	4638      	mov	r0, r7
    5f68:	f7ff fd22 	bl	59b0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    5f6c:	4604      	mov	r4, r0
    5f6e:	2800      	cmp	r0, #0
    5f70:	f43f af76 	beq.w	5e60 <mem_manage_fault+0x80>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    5f74:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    5f78:	2402      	movs	r4, #2
    5f7a:	e771      	b.n	5e60 <mem_manage_fault+0x80>
    5f7c:	00016618 	.word	0x00016618
    5f80:	000165d8 	.word	0x000165d8
    5f84:	0001712c 	.word	0x0001712c
    5f88:	e000ed00 	.word	0xe000ed00
    5f8c:	00017144 	.word	0x00017144
    5f90:	00017080 	.word	0x00017080
    5f94:	00017178 	.word	0x00017178
    5f98:	00017190 	.word	0x00017190
    5f9c:	000171a8 	.word	0x000171a8
    5fa0:	000170fc 	.word	0x000170fc

00005fa4 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    5fa4:	b570      	push	{r4, r5, r6, lr}
    5fa6:	4605      	mov	r5, r0
    5fa8:	460c      	mov	r4, r1
    5faa:	4b47      	ldr	r3, [pc, #284]	; (60c8 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xc8>)
    5fac:	4a47      	ldr	r2, [pc, #284]	; (60cc <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xcc>)
    5fae:	1a9b      	subs	r3, r3, r2
    5fb0:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** HARD FAULT *****");
    5fb2:	f04f 0100 	mov.w	r1, #0
    5fb6:	2201      	movs	r2, #1
    5fb8:	f362 0102 	bfi	r1, r2, #0, #3
    5fbc:	f36f 01c5 	bfc	r1, #3, #3
    5fc0:	f363 118f 	bfi	r1, r3, #6, #10
    5fc4:	4842      	ldr	r0, [pc, #264]	; (60d0 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xd0>)
    5fc6:	f7fd fa07 	bl	33d8 <log_0>
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    5fca:	2300      	movs	r3, #0
    5fcc:	7023      	strb	r3, [r4, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    5fce:	4b41      	ldr	r3, [pc, #260]	; (60d4 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xd4>)
    5fd0:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    5fd2:	f016 0602 	ands.w	r6, r6, #2
    5fd6:	d109      	bne.n	5fec <hard_fault+0x48>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    5fd8:	4b3e      	ldr	r3, [pc, #248]	; (60d4 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xd4>)
    5fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    5fdc:	2b00      	cmp	r3, #0
    5fde:	db17      	blt.n	6010 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x10>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    5fe0:	4b3c      	ldr	r3, [pc, #240]	; (60d4 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xd4>)
    5fe2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    5fe4:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    5fe8:	d124      	bne.n	6034 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x34>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    5fea:	bd70      	pop	{r4, r5, r6, pc}
    5fec:	4b36      	ldr	r3, [pc, #216]	; (60c8 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xc8>)
    5fee:	4a37      	ldr	r2, [pc, #220]	; (60cc <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xcc>)
    5ff0:	1a9b      	subs	r3, r3, r2
    5ff2:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Bus fault on vector table read");
    5ff4:	f04f 0100 	mov.w	r1, #0
    5ff8:	2201      	movs	r2, #1
    5ffa:	f362 0102 	bfi	r1, r2, #0, #3
    5ffe:	f36f 01c5 	bfc	r1, #3, #3
    6002:	f363 118f 	bfi	r1, r3, #6, #10
    6006:	4834      	ldr	r0, [pc, #208]	; (60d8 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xd8>)
    6008:	f7fd f9e6 	bl	33d8 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    600c:	2000      	movs	r0, #0
    600e:	e7ec      	b.n	5fea <hard_fault+0x46>
    6010:	4b2d      	ldr	r3, [pc, #180]	; (60c8 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xc8>)
    6012:	4a2e      	ldr	r2, [pc, #184]	; (60cc <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xcc>)
    6014:	1a9b      	subs	r3, r3, r2
    6016:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Debug event");
    6018:	f04f 0100 	mov.w	r1, #0
    601c:	2201      	movs	r2, #1
    601e:	f362 0102 	bfi	r1, r2, #0, #3
    6022:	f36f 01c5 	bfc	r1, #3, #3
    6026:	f363 118f 	bfi	r1, r3, #6, #10
    602a:	482c      	ldr	r0, [pc, #176]	; (60dc <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xdc>)
    602c:	f7fd f9d4 	bl	33d8 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    6030:	4630      	mov	r0, r6
    6032:	e7da      	b.n	5fea <hard_fault+0x46>
    6034:	4b24      	ldr	r3, [pc, #144]	; (60c8 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xc8>)
    6036:	4a25      	ldr	r2, [pc, #148]	; (60cc <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xcc>)
    6038:	1a9b      	subs	r3, r3, r2
    603a:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Fault escalation (see below)");
    603c:	f04f 0100 	mov.w	r1, #0
    6040:	2201      	movs	r2, #1
    6042:	f362 0102 	bfi	r1, r2, #0, #3
    6046:	f36f 01c5 	bfc	r1, #3, #3
    604a:	f363 118f 	bfi	r1, r3, #6, #10
    604e:	4824      	ldr	r0, [pc, #144]	; (60e0 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xe0>)
    6050:	f7fd f9c2 	bl	33d8 <log_0>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    6054:	69ab      	ldr	r3, [r5, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    6056:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    605a:	f64d 7302 	movw	r3, #57090	; 0xdf02
    605e:	429a      	cmp	r2, r3
    6060:	d00e      	beq.n	6080 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x80>
		} else if (SCB_MMFSR != 0) {
    6062:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    6066:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    606a:	781b      	ldrb	r3, [r3, #0]
    606c:	b9db      	cbnz	r3, 60a6 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xa6>
		} else if (SCB_BFSR != 0) {
    606e:	4b1d      	ldr	r3, [pc, #116]	; (60e4 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xe4>)
    6070:	781b      	ldrb	r3, [r3, #0]
    6072:	b9f3      	cbnz	r3, 60b2 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xb2>
		} else if (SCB_UFSR != 0) {
    6074:	4b1c      	ldr	r3, [pc, #112]	; (60e8 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xe8>)
    6076:	881b      	ldrh	r3, [r3, #0]
    6078:	b29b      	uxth	r3, r3
    607a:	bb03      	cbnz	r3, 60be <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xbe>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    607c:	4630      	mov	r0, r6
	return reason;
    607e:	e7b4      	b.n	5fea <hard_fault+0x46>
    6080:	4b11      	ldr	r3, [pc, #68]	; (60c8 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xc8>)
    6082:	4a12      	ldr	r2, [pc, #72]	; (60cc <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xcc>)
    6084:	1a9b      	subs	r3, r3, r2
    6086:	08db      	lsrs	r3, r3, #3
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    6088:	f04f 0200 	mov.w	r2, #0
    608c:	2101      	movs	r1, #1
    608e:	f361 0202 	bfi	r2, r1, #0, #3
    6092:	f36f 02c5 	bfc	r2, #3, #3
    6096:	f363 128f 	bfi	r2, r3, #6, #10
    609a:	6829      	ldr	r1, [r5, #0]
    609c:	4813      	ldr	r0, [pc, #76]	; (60ec <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xec>)
    609e:	f7fd f907 	bl	32b0 <log_1>
			reason = esf->basic.r0;
    60a2:	6828      	ldr	r0, [r5, #0]
    60a4:	e7a1      	b.n	5fea <hard_fault+0x46>
			reason = mem_manage_fault(esf, 1, recoverable);
    60a6:	4622      	mov	r2, r4
    60a8:	2101      	movs	r1, #1
    60aa:	4628      	mov	r0, r5
    60ac:	f7ff fe98 	bl	5de0 <mem_manage_fault>
    60b0:	e79b      	b.n	5fea <hard_fault+0x46>
			reason = bus_fault(esf, 1, recoverable);
    60b2:	4622      	mov	r2, r4
    60b4:	2101      	movs	r1, #1
    60b6:	4628      	mov	r0, r5
    60b8:	f7ff fdba 	bl	5c30 <bus_fault>
    60bc:	e795      	b.n	5fea <hard_fault+0x46>
			reason = usage_fault(esf);
    60be:	4628      	mov	r0, r5
    60c0:	f7ff fcea 	bl	5a98 <usage_fault>
    60c4:	e791      	b.n	5fea <hard_fault+0x46>
    60c6:	bf00      	nop
    60c8:	00016618 	.word	0x00016618
    60cc:	000165d8 	.word	0x000165d8
    60d0:	000171c8 	.word	0x000171c8
    60d4:	e000ed00 	.word	0xe000ed00
    60d8:	000171e0 	.word	0x000171e0
    60dc:	00017204 	.word	0x00017204
    60e0:	00017214 	.word	0x00017214
    60e4:	e000ed29 	.word	0xe000ed29
    60e8:	e000ed2a 	.word	0xe000ed2a
    60ec:	00017234 	.word	0x00017234

000060f0 <reserved_exception>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
    60f0:	b508      	push	{r3, lr}
    60f2:	460a      	mov	r2, r1
    60f4:	480b      	ldr	r0, [pc, #44]	; (6124 <reserved_exception+0x34>)
    60f6:	4b0c      	ldr	r3, [pc, #48]	; (6128 <reserved_exception+0x38>)
    60f8:	1ac0      	subs	r0, r0, r3
    60fa:	08c0      	lsrs	r0, r0, #3
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
    60fc:	f04f 0300 	mov.w	r3, #0
    6100:	2101      	movs	r1, #1
    6102:	f361 0302 	bfi	r3, r1, #0, #3
    6106:	f36f 03c5 	bfc	r3, #3, #3
    610a:	f360 138f 	bfi	r3, r0, #6, #10
    610e:	2a0f      	cmp	r2, #15
    6110:	dc05      	bgt.n	611e <reserved_exception+0x2e>
    6112:	4906      	ldr	r1, [pc, #24]	; (612c <reserved_exception+0x3c>)
    6114:	3a10      	subs	r2, #16
    6116:	4806      	ldr	r0, [pc, #24]	; (6130 <reserved_exception+0x40>)
    6118:	f7fd f900 	bl	331c <log_2>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
    611c:	bd08      	pop	{r3, pc}
	PR_FAULT_INFO("***** %s %d) *****",
    611e:	4905      	ldr	r1, [pc, #20]	; (6134 <reserved_exception+0x44>)
    6120:	e7f8      	b.n	6114 <reserved_exception+0x24>
    6122:	bf00      	nop
    6124:	00016618 	.word	0x00016618
    6128:	000165d8 	.word	0x000165d8
    612c:	00017250 	.word	0x00017250
    6130:	00017284 	.word	0x00017284
    6134:	00017268 	.word	0x00017268

00006138 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    6138:	b570      	push	{r4, r5, r6, lr}
    613a:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    613c:	4b2b      	ldr	r3, [pc, #172]	; (61ec <z_arm_fault+0xb4>)
    613e:	685d      	ldr	r5, [r3, #4]
    6140:	f3c5 0508 	ubfx	r5, r5, #0, #9
    6144:	2300      	movs	r3, #0
    6146:	f383 8811 	msr	BASEPRI, r3
    614a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    614e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    6152:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    6156:	d12a      	bne.n	61ae <z_arm_fault+0x76>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    6158:	f002 030c 	and.w	r3, r2, #12
    615c:	2b08      	cmp	r3, #8
    615e:	d010      	beq.n	6182 <z_arm_fault+0x4a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    6160:	f012 0f08 	tst.w	r2, #8
    6164:	d020      	beq.n	61a8 <z_arm_fault+0x70>
			ptr_esf =  (z_arch_esf_t *)psp;
    6166:	460c      	mov	r4, r1
	*nested_exc = false;
    6168:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    616a:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    616e:	4629      	mov	r1, r5
    6170:	4620      	mov	r0, r4
    6172:	f00c ff62 	bl	1303a <fault_handle>
    6176:	4605      	mov	r5, r0
	if (recoverable) {
    6178:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    617c:	b1d3      	cbz	r3, 61b4 <z_arm_fault+0x7c>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    617e:	b00a      	add	sp, #40	; 0x28
    6180:	bd70      	pop	{r4, r5, r6, pc}
    6182:	4b1b      	ldr	r3, [pc, #108]	; (61f0 <z_arm_fault+0xb8>)
    6184:	4a1b      	ldr	r2, [pc, #108]	; (61f4 <z_arm_fault+0xbc>)
    6186:	1a9b      	subs	r3, r3, r2
    6188:	08db      	lsrs	r3, r3, #3
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    618a:	f04f 0100 	mov.w	r1, #0
    618e:	2201      	movs	r2, #1
    6190:	f362 0102 	bfi	r1, r2, #0, #3
    6194:	f36f 01c5 	bfc	r1, #3, #3
    6198:	f363 118f 	bfi	r1, r3, #6, #10
    619c:	4816      	ldr	r0, [pc, #88]	; (61f8 <z_arm_fault+0xc0>)
    619e:	f7fd f91b 	bl	33d8 <log_0>
	*nested_exc = false;
    61a2:	2600      	movs	r6, #0
		return NULL;
    61a4:	4634      	mov	r4, r6
    61a6:	e7e0      	b.n	616a <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    61a8:	4604      	mov	r4, r0
			*nested_exc = true;
    61aa:	2601      	movs	r6, #1
    61ac:	e7dd      	b.n	616a <z_arm_fault+0x32>
	*nested_exc = false;
    61ae:	2600      	movs	r6, #0
		return NULL;
    61b0:	4634      	mov	r4, r6
    61b2:	e7da      	b.n	616a <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    61b4:	2220      	movs	r2, #32
    61b6:	4621      	mov	r1, r4
    61b8:	a801      	add	r0, sp, #4
    61ba:	f00d f819 	bl	131f0 <memcpy>
	if (nested_exc) {
    61be:	b14e      	cbz	r6, 61d4 <z_arm_fault+0x9c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    61c0:	9b08      	ldr	r3, [sp, #32]
    61c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
    61c6:	b95a      	cbnz	r2, 61e0 <z_arm_fault+0xa8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    61c8:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    61cc:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    61d0:	9308      	str	r3, [sp, #32]
    61d2:	e005      	b.n	61e0 <z_arm_fault+0xa8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    61d4:	9b08      	ldr	r3, [sp, #32]
    61d6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    61da:	f023 0301 	bic.w	r3, r3, #1
    61de:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    61e0:	a901      	add	r1, sp, #4
    61e2:	4628      	mov	r0, r5
    61e4:	f00c ff09 	bl	12ffa <z_arm_fatal_error>
    61e8:	e7c9      	b.n	617e <z_arm_fault+0x46>
    61ea:	bf00      	nop
    61ec:	e000ed00 	.word	0xe000ed00
    61f0:	00016618 	.word	0x00016618
    61f4:	000165d8 	.word	0x000165d8
    61f8:	00017298 	.word	0x00017298

000061fc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    61fc:	4a02      	ldr	r2, [pc, #8]	; (6208 <z_arm_fault_init+0xc>)
    61fe:	6953      	ldr	r3, [r2, #20]
    6200:	f043 0310 	orr.w	r3, r3, #16
    6204:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    6206:	4770      	bx	lr
    6208:	e000ed00 	.word	0xe000ed00

0000620c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    620c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    6210:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    6214:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    6216:	4672      	mov	r2, lr
	bl z_arm_fault
    6218:	f7ff ff8e 	bl	6138 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    621c:	bd01      	pop	{r0, pc}
    621e:	bf00      	nop

00006220 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    6220:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    6222:	e006      	b.n	6232 <z_arm_interrupt_init+0x12>
    6224:	f002 010f 	and.w	r1, r2, #15
    6228:	4b09      	ldr	r3, [pc, #36]	; (6250 <z_arm_interrupt_init+0x30>)
    622a:	440b      	add	r3, r1
    622c:	2120      	movs	r1, #32
    622e:	7619      	strb	r1, [r3, #24]
    6230:	3201      	adds	r2, #1
    6232:	2a2f      	cmp	r2, #47	; 0x2f
    6234:	dc0a      	bgt.n	624c <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    6236:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    6238:	2b00      	cmp	r3, #0
    623a:	dbf3      	blt.n	6224 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    623c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    6240:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    6244:	2120      	movs	r1, #32
    6246:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    624a:	e7f1      	b.n	6230 <z_arm_interrupt_init+0x10>
	}
}
    624c:	4770      	bx	lr
    624e:	bf00      	nop
    6250:	e000ecfc 	.word	0xe000ecfc

00006254 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    6254:	2000      	movs	r0, #0
    msr CONTROL, r0
    6256:	f380 8814 	msr	CONTROL, r0
    isb
    625a:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    625e:	f010 f83d 	bl	162dc <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    6262:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    6264:	490d      	ldr	r1, [pc, #52]	; (629c <__start+0x48>)
    str r0, [r1]
    6266:	6008      	str	r0, [r1, #0]
    dsb
    6268:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    626c:	480c      	ldr	r0, [pc, #48]	; (62a0 <__start+0x4c>)
    msr msp, r0
    626e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    6272:	f000 f829 	bl	62c8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    6276:	2020      	movs	r0, #32
    msr BASEPRI, r0
    6278:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    627c:	4809      	ldr	r0, [pc, #36]	; (62a4 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    627e:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    6282:	1840      	adds	r0, r0, r1
    msr PSP, r0
    6284:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    6288:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    628c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    628e:	4308      	orrs	r0, r1
    msr CONTROL, r0
    6290:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    6294:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    6298:	f7ff faf6 	bl	5888 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    629c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    62a0:	20004500 	.word	0x20004500
    ldr r0, =z_interrupt_stacks
    62a4:	20004680 	.word	0x20004680

000062a8 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    62a8:	4b06      	ldr	r3, [pc, #24]	; (62c4 <z_arm_clear_arm_mpu_config+0x1c>)
    62aa:	6818      	ldr	r0, [r3, #0]
	int num_regions =
    62ac:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    62b0:	2300      	movs	r3, #0
    62b2:	4283      	cmp	r3, r0
    62b4:	da05      	bge.n	62c2 <z_arm_clear_arm_mpu_config+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    62b6:	4a03      	ldr	r2, [pc, #12]	; (62c4 <z_arm_clear_arm_mpu_config+0x1c>)
    62b8:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    62ba:	2100      	movs	r1, #0
    62bc:	6111      	str	r1, [r2, #16]
    62be:	3301      	adds	r3, #1
    62c0:	e7f7      	b.n	62b2 <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
    62c2:	4770      	bx	lr
    62c4:	e000ed90 	.word	0xe000ed90

000062c8 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    62c8:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    62ca:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    62cc:	2400      	movs	r4, #0
    62ce:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    62d2:	f7ff ffe9 	bl	62a8 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    62d6:	4623      	mov	r3, r4
    62d8:	e008      	b.n	62ec <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    62da:	f103 0120 	add.w	r1, r3, #32
    62de:	4a0e      	ldr	r2, [pc, #56]	; (6318 <z_arm_init_arch_hw_at_boot+0x50>)
    62e0:	f04f 30ff 	mov.w	r0, #4294967295
    62e4:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    62e8:	3301      	adds	r3, #1
    62ea:	b2db      	uxtb	r3, r3
    62ec:	2b07      	cmp	r3, #7
    62ee:	d9f4      	bls.n	62da <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    62f0:	2300      	movs	r3, #0
    62f2:	e008      	b.n	6306 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    62f4:	f103 0160 	add.w	r1, r3, #96	; 0x60
    62f8:	4a07      	ldr	r2, [pc, #28]	; (6318 <z_arm_init_arch_hw_at_boot+0x50>)
    62fa:	f04f 30ff 	mov.w	r0, #4294967295
    62fe:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    6302:	3301      	adds	r3, #1
    6304:	b2db      	uxtb	r3, r3
    6306:	2b07      	cmp	r3, #7
    6308:	d9f4      	bls.n	62f4 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    630a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    630c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6310:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    6314:	bd10      	pop	{r4, pc}
    6316:	bf00      	nop
    6318:	e000e100 	.word	0xe000e100

0000631c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    631c:	b508      	push	{r3, lr}
	if (_current == thread) {
    631e:	4b08      	ldr	r3, [pc, #32]	; (6340 <z_impl_k_thread_abort+0x24>)
    6320:	689b      	ldr	r3, [r3, #8]
    6322:	4283      	cmp	r3, r0
    6324:	d002      	beq.n	632c <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
    6326:	f00a fbc7 	bl	10ab8 <z_thread_abort>
}
    632a:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    632c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    6330:	2b00      	cmp	r3, #0
    6332:	d0f8      	beq.n	6326 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    6334:	4a03      	ldr	r2, [pc, #12]	; (6344 <z_impl_k_thread_abort+0x28>)
    6336:	6853      	ldr	r3, [r2, #4]
    6338:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    633c:	6053      	str	r3, [r2, #4]
    633e:	e7f2      	b.n	6326 <z_impl_k_thread_abort+0xa>
    6340:	20002f60 	.word	0x20002f60
    6344:	e000ed00 	.word	0xe000ed00

00006348 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    6348:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    634a:	4b03      	ldr	r3, [pc, #12]	; (6358 <z_arm_configure_static_mpu_regions+0x10>)
    634c:	4a03      	ldr	r2, [pc, #12]	; (635c <z_arm_configure_static_mpu_regions+0x14>)
    634e:	2101      	movs	r1, #1
    6350:	4803      	ldr	r0, [pc, #12]	; (6360 <z_arm_configure_static_mpu_regions+0x18>)
    6352:	f00c fec7 	bl	130e4 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    6356:	bd08      	pop	{r3, pc}
    6358:	20040000 	.word	0x20040000
    635c:	20000000 	.word	0x20000000
    6360:	000172c8 	.word	0x000172c8

00006364 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    6364:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    6366:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    636a:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    636c:	4804      	ldr	r0, [pc, #16]	; (6380 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    636e:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    6370:	2320      	movs	r3, #32
    6372:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    6374:	4b03      	ldr	r3, [pc, #12]	; (6384 <z_arm_configure_dynamic_mpu_regions+0x20>)
    6376:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    6378:	2101      	movs	r1, #1
    637a:	f00c feb7 	bl	130ec <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    637e:	bd08      	pop	{r3, pc}
    6380:	20001e00 	.word	0x20001e00
    6384:	150b0000 	.word	0x150b0000

00006388 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    6388:	4a06      	ldr	r2, [pc, #24]	; (63a4 <region_init+0x1c>)
    638a:	6090      	str	r0, [r2, #8]

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    638c:	680b      	ldr	r3, [r1, #0]
    638e:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    6392:	4303      	orrs	r3, r0
    6394:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    6398:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    639a:	688b      	ldr	r3, [r1, #8]
    639c:	f043 0301 	orr.w	r3, r3, #1
    63a0:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    63a2:	4770      	bx	lr
    63a4:	e000ed90 	.word	0xe000ed90

000063a8 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    63a8:	b510      	push	{r4, lr}
    63aa:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    63ac:	2807      	cmp	r0, #7
    63ae:	d803      	bhi.n	63b8 <region_allocate_and_init+0x10>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    63b0:	f7ff ffea 	bl	6388 <region_init>

	return index;
    63b4:	4620      	mov	r0, r4
}
    63b6:	bd10      	pop	{r4, pc}
    63b8:	4b09      	ldr	r3, [pc, #36]	; (63e0 <region_allocate_and_init+0x38>)
    63ba:	4a0a      	ldr	r2, [pc, #40]	; (63e4 <region_allocate_and_init+0x3c>)
    63bc:	1a9b      	subs	r3, r3, r2
    63be:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    63c0:	f04f 0200 	mov.w	r2, #0
    63c4:	2101      	movs	r1, #1
    63c6:	f361 0202 	bfi	r2, r1, #0, #3
    63ca:	f36f 02c5 	bfc	r2, #3, #3
    63ce:	f363 128f 	bfi	r2, r3, #6, #10
    63d2:	4601      	mov	r1, r0
    63d4:	4804      	ldr	r0, [pc, #16]	; (63e8 <region_allocate_and_init+0x40>)
    63d6:	f7fc ff6b 	bl	32b0 <log_1>
		return -EINVAL;
    63da:	f06f 0015 	mvn.w	r0, #21
    63de:	e7ea      	b.n	63b6 <region_allocate_and_init+0xe>
    63e0:	00016610 	.word	0x00016610
    63e4:	000165d8 	.word	0x000165d8
    63e8:	000172d4 	.word	0x000172d4

000063ec <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    63ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    63f0:	4680      	mov	r8, r0
    63f2:	460f      	mov	r7, r1
    63f4:	469a      	mov	sl, r3
	int i;
	int reg_index = start_reg_index;
    63f6:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
    63f8:	2400      	movs	r4, #0
    63fa:	e009      	b.n	6410 <mpu_configure_regions+0x24>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    63fc:	4629      	mov	r1, r5
    63fe:	b2f0      	uxtb	r0, r6
    6400:	f00c fe51 	bl	130a6 <mpu_configure_region>
    6404:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
    6406:	f110 0f16 	cmn.w	r0, #22
    640a:	d025      	beq.n	6458 <mpu_configure_regions+0x6c>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    640c:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    640e:	3401      	adds	r4, #1
    6410:	42bc      	cmp	r4, r7
    6412:	da21      	bge.n	6458 <mpu_configure_regions+0x6c>
		if (regions[i].size == 0U) {
    6414:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    6418:	eb08 0585 	add.w	r5, r8, r5, lsl #2
    641c:	686a      	ldr	r2, [r5, #4]
    641e:	2a00      	cmp	r2, #0
    6420:	d0f5      	beq.n	640e <mpu_configure_regions+0x22>
		if (do_sanity_check &&
    6422:	f1ba 0f00 	cmp.w	sl, #0
    6426:	d0e9      	beq.n	63fc <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
    6428:	4628      	mov	r0, r5
    642a:	f00c fe2b 	bl	13084 <mpu_partition_is_valid>
		if (do_sanity_check &&
    642e:	2800      	cmp	r0, #0
    6430:	d1e4      	bne.n	63fc <mpu_configure_regions+0x10>
    6432:	4b0b      	ldr	r3, [pc, #44]	; (6460 <mpu_configure_regions+0x74>)
    6434:	4a0b      	ldr	r2, [pc, #44]	; (6464 <mpu_configure_regions+0x78>)
    6436:	1a9b      	subs	r3, r3, r2
    6438:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Partition %u: sanity check failed.", i);
    643a:	f04f 0200 	mov.w	r2, #0
    643e:	2101      	movs	r1, #1
    6440:	f361 0202 	bfi	r2, r1, #0, #3
    6444:	f36f 02c5 	bfc	r2, #3, #3
    6448:	f363 128f 	bfi	r2, r3, #6, #10
    644c:	4621      	mov	r1, r4
    644e:	4806      	ldr	r0, [pc, #24]	; (6468 <mpu_configure_regions+0x7c>)
    6450:	f7fc ff2e 	bl	32b0 <log_1>
			return -EINVAL;
    6454:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
    6458:	4630      	mov	r0, r6
    645a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    645e:	bf00      	nop
    6460:	00016610 	.word	0x00016610
    6464:	000165d8 	.word	0x000165d8
    6468:	000172fc 	.word	0x000172fc

0000646c <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    646c:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    646e:	4c03      	ldr	r4, [pc, #12]	; (647c <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    6470:	2301      	movs	r3, #1
    6472:	7822      	ldrb	r2, [r4, #0]
    6474:	f7ff ffba 	bl	63ec <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    6478:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    647a:	bd10      	pop	{r4, pc}
    647c:	20002fc4 	.word	0x20002fc4

00006480 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    6480:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    6482:	2300      	movs	r3, #0
    6484:	4a08      	ldr	r2, [pc, #32]	; (64a8 <mpu_configure_dynamic_mpu_regions+0x28>)
    6486:	7812      	ldrb	r2, [r2, #0]
    6488:	f7ff ffb0 	bl	63ec <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    648c:	f110 0f16 	cmn.w	r0, #22
    6490:	d008      	beq.n	64a4 <mpu_configure_dynamic_mpu_regions+0x24>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    6492:	4603      	mov	r3, r0
    6494:	2b07      	cmp	r3, #7
    6496:	dc05      	bgt.n	64a4 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    6498:	4a04      	ldr	r2, [pc, #16]	; (64ac <mpu_configure_dynamic_mpu_regions+0x2c>)
    649a:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    649c:	2100      	movs	r1, #0
    649e:	6111      	str	r1, [r2, #16]
    64a0:	3301      	adds	r3, #1
    64a2:	e7f7      	b.n	6494 <mpu_configure_dynamic_mpu_regions+0x14>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    64a4:	bd08      	pop	{r3, pc}
    64a6:	bf00      	nop
    64a8:	20002fc4 	.word	0x20002fc4
    64ac:	e000ed90 	.word	0xe000ed90

000064b0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    64b0:	4b03      	ldr	r3, [pc, #12]	; (64c0 <arm_core_mpu_enable+0x10>)
    64b2:	2205      	movs	r2, #5
    64b4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    64b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    64ba:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    64be:	4770      	bx	lr
    64c0:	e000ed90 	.word	0xe000ed90

000064c4 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    64c4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    64c8:	4b01      	ldr	r3, [pc, #4]	; (64d0 <arm_core_mpu_disable+0xc>)
    64ca:	2200      	movs	r2, #0
    64cc:	605a      	str	r2, [r3, #4]
}
    64ce:	4770      	bx	lr
    64d0:	e000ed90 	.word	0xe000ed90

000064d4 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    64d4:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    64d6:	4b0e      	ldr	r3, [pc, #56]	; (6510 <z_arm_mpu_init+0x3c>)
    64d8:	681d      	ldr	r5, [r3, #0]
    64da:	2d08      	cmp	r5, #8
    64dc:	d815      	bhi.n	650a <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    64de:	f7ff fff1 	bl	64c4 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    64e2:	2400      	movs	r4, #0
    64e4:	42a5      	cmp	r5, r4
    64e6:	d90a      	bls.n	64fe <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    64e8:	4b09      	ldr	r3, [pc, #36]	; (6510 <z_arm_mpu_init+0x3c>)
    64ea:	6859      	ldr	r1, [r3, #4]
    64ec:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    64f0:	0093      	lsls	r3, r2, #2
    64f2:	4419      	add	r1, r3
    64f4:	4620      	mov	r0, r4
    64f6:	f7ff ff47 	bl	6388 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    64fa:	3401      	adds	r4, #1
    64fc:	e7f2      	b.n	64e4 <z_arm_mpu_init+0x10>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    64fe:	4b05      	ldr	r3, [pc, #20]	; (6514 <z_arm_mpu_init+0x40>)
    6500:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    6502:	f7ff ffd5 	bl	64b0 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    6506:	2000      	movs	r0, #0
}
    6508:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    650a:	f04f 30ff 	mov.w	r0, #4294967295
    650e:	e7fb      	b.n	6508 <z_arm_mpu_init+0x34>
    6510:	0001735c 	.word	0x0001735c
    6514:	20002fc4 	.word	0x20002fc4

00006518 <malloc>:
}

SYS_INIT(malloc_prepare, APPLICATION, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT);
#else /* No malloc arena */
void *malloc(size_t size)
{
    6518:	b508      	push	{r3, lr}
    651a:	4b0b      	ldr	r3, [pc, #44]	; (6548 <malloc+0x30>)
    651c:	4a0b      	ldr	r2, [pc, #44]	; (654c <malloc+0x34>)
    651e:	1a9b      	subs	r3, r3, r2
    6520:	08db      	lsrs	r3, r3, #3
	ARG_UNUSED(size);

	LOG_ERR("CONFIG_MINIMAL_LIBC_MALLOC_ARENA_SIZE is 0");
    6522:	f04f 0100 	mov.w	r1, #0
    6526:	2201      	movs	r2, #1
    6528:	f362 0102 	bfi	r1, r2, #0, #3
    652c:	f36f 01c5 	bfc	r1, #3, #3
    6530:	f363 118f 	bfi	r1, r3, #6, #10
    6534:	4806      	ldr	r0, [pc, #24]	; (6550 <malloc+0x38>)
    6536:	f7fc ff4f 	bl	33d8 <log_0>
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    653a:	f009 f8e9 	bl	f710 <z_impl_z_errno>
	errno = ENOMEM;
    653e:	230c      	movs	r3, #12
    6540:	6003      	str	r3, [r0, #0]

	return NULL;
}
    6542:	2000      	movs	r0, #0
    6544:	bd08      	pop	{r3, pc}
    6546:	bf00      	nop
    6548:	00016618 	.word	0x00016618
    654c:	000165d8 	.word	0x000165d8
    6550:	00017320 	.word	0x00017320

00006554 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    6554:	4b01      	ldr	r3, [pc, #4]	; (655c <__stdout_hook_install+0x8>)
    6556:	6018      	str	r0, [r3, #0]
}
    6558:	4770      	bx	lr
    655a:	bf00      	nop
    655c:	20000264 	.word	0x20000264

00006560 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT str, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
    6560:	b40c      	push	{r2, r3}
    6562:	b500      	push	{lr}
    6564:	b085      	sub	sp, #20

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    6566:	460b      	mov	r3, r1
    6568:	b909      	cbnz	r1, 656e <snprintf+0xe>
		str = &dummy; /* write final NUL to dummy, can't change *s */
    656a:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = str;
    656e:	9001      	str	r0, [sp, #4]
	p.len = (int) len;
    6570:	9302      	str	r3, [sp, #8]

	va_start(vargs, format);
    6572:	ab07      	add	r3, sp, #28
    6574:	9303      	str	r3, [sp, #12]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    6576:	9a06      	ldr	r2, [sp, #24]
    6578:	a901      	add	r1, sp, #4
    657a:	4805      	ldr	r0, [pc, #20]	; (6590 <snprintf+0x30>)
    657c:	f7fb fef2 	bl	2364 <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
    6580:	9b01      	ldr	r3, [sp, #4]
    6582:	2200      	movs	r2, #0
    6584:	701a      	strb	r2, [r3, #0]
	return r;
}
    6586:	b005      	add	sp, #20
    6588:	f85d eb04 	ldr.w	lr, [sp], #4
    658c:	b002      	add	sp, #8
    658e:	4770      	bx	lr
    6590:	000132b1 	.word	0x000132b1

00006594 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    6594:	f04f 0320 	mov.w	r3, #32
    6598:	f3ef 8211 	mrs	r2, BASEPRI
    659c:	f383 8812 	msr	BASEPRI_MAX, r3
    65a0:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    65a4:	2301      	movs	r3, #1
    65a6:	4906      	ldr	r1, [pc, #24]	; (65c0 <nordicsemi_nrf52_init+0x2c>)
    65a8:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    65ac:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    65b0:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    65b4:	f382 8811 	msr	BASEPRI, r2
    65b8:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    65bc:	2000      	movs	r0, #0
    65be:	4770      	bx	lr
    65c0:	4001e000 	.word	0x4001e000

000065c4 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    65c4:	b130      	cbz	r0, 65d4 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    65c6:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    65c8:	0180      	lsls	r0, r0, #6
    65ca:	4b03      	ldr	r3, [pc, #12]	; (65d8 <arch_busy_wait+0x14>)
    65cc:	f043 0301 	orr.w	r3, r3, #1
    65d0:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    65d2:	bd08      	pop	{r3, pc}
    65d4:	4770      	bx	lr
    65d6:	bf00      	nop
    65d8:	00016720 	.word	0x00016720

000065dc <registry_add>:
static int registry_add(int type,
			const struct fs_file_system_t *fstp)
{
	int rv = -ENOSPC;

	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
    65dc:	2300      	movs	r3, #0
    65de:	2b01      	cmp	r3, #1
    65e0:	d80e      	bhi.n	6600 <registry_add+0x24>
		struct registry_entry *ep = &registry[i];

		if (ep->fstp == NULL) {
    65e2:	4a09      	ldr	r2, [pc, #36]	; (6608 <registry_add+0x2c>)
    65e4:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    65e8:	6852      	ldr	r2, [r2, #4]
    65ea:	b10a      	cbz	r2, 65f0 <registry_add+0x14>
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
    65ec:	3301      	adds	r3, #1
    65ee:	e7f6      	b.n	65de <registry_add+0x2>
			ep->type = type;
    65f0:	4a05      	ldr	r2, [pc, #20]	; (6608 <registry_add+0x2c>)
    65f2:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
			ep->fstp = fstp;
    65f6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    65fa:	6059      	str	r1, [r3, #4]
			rv = 0;
    65fc:	2000      	movs	r0, #0
			break;
    65fe:	4770      	bx	lr
	int rv = -ENOSPC;
    6600:	f06f 001b 	mvn.w	r0, #27
		}
	}

	return rv;
}
    6604:	4770      	bx	lr
    6606:	bf00      	nop
    6608:	20001e28 	.word	0x20001e28

0000660c <registry_find>:

static struct registry_entry *registry_find(int type)
{
    660c:	4601      	mov	r1, r0
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
    660e:	2300      	movs	r3, #0
    6610:	e000      	b.n	6614 <registry_find+0x8>
    6612:	3301      	adds	r3, #1
    6614:	2b01      	cmp	r3, #1
    6616:	d80b      	bhi.n	6630 <registry_find+0x24>
		struct registry_entry *ep = &registry[i];
    6618:	4806      	ldr	r0, [pc, #24]	; (6634 <registry_find+0x28>)
    661a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3

		if ((ep->fstp != NULL) && (ep->type == type)) {
    661e:	6842      	ldr	r2, [r0, #4]
    6620:	2a00      	cmp	r2, #0
    6622:	d0f6      	beq.n	6612 <registry_find+0x6>
    6624:	4a03      	ldr	r2, [pc, #12]	; (6634 <registry_find+0x28>)
    6626:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    662a:	428a      	cmp	r2, r1
    662c:	d1f1      	bne.n	6612 <registry_find+0x6>
    662e:	e000      	b.n	6632 <registry_find+0x26>
			return ep;
		}
	}
	return NULL;
    6630:	2000      	movs	r0, #0
}
    6632:	4770      	bx	lr
    6634:	20001e28 	.word	0x20001e28

00006638 <fs_get_mnt_point>:
	return (ep != NULL) ? ep->fstp : NULL;
}

static int fs_get_mnt_point(struct fs_mount_t **mnt_pntp,
			    const char *name, size_t *match_len)
{
    6638:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    663c:	4683      	mov	fp, r0
    663e:	460f      	mov	r7, r1
    6640:	4692      	mov	sl, r2
	struct fs_mount_t *mnt_p = NULL, *itr;
	size_t longest_match = 0;
	size_t len, name_len = strlen(name);
    6642:	4608      	mov	r0, r1
    6644:	f00c fd86 	bl	13154 <strlen>
    6648:	4680      	mov	r8, r0
	return z_impl_k_mutex_lock(mutex, timeout);
    664a:	f04f 32ff 	mov.w	r2, #4294967295
    664e:	f04f 33ff 	mov.w	r3, #4294967295
    6652:	4820      	ldr	r0, [pc, #128]	; (66d4 <fs_get_mnt_point+0x9c>)
    6654:	f009 fb72 	bl	fd3c <z_impl_k_mutex_lock>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    6658:	4b1f      	ldr	r3, [pc, #124]	; (66d8 <fs_get_mnt_point+0xa0>)
    665a:	681c      	ldr	r4, [r3, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    665c:	429c      	cmp	r4, r3
    665e:	d01d      	beq.n	669c <fs_get_mnt_point+0x64>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    6660:	2600      	movs	r6, #0
    6662:	46b1      	mov	r9, r6
    6664:	e00c      	b.n	6680 <fs_get_mnt_point+0x48>
		if ((len > 1) && (name[len] != '/') && (name[len] != '\0')) {
			continue;
		}

		/* Check for mount point match */
		if (strncmp(name, itr->mnt_point, len) == 0) {
    6666:	462a      	mov	r2, r5
    6668:	68e1      	ldr	r1, [r4, #12]
    666a:	4638      	mov	r0, r7
    666c:	f00c fd8e 	bl	1318c <strncmp>
    6670:	b908      	cbnz	r0, 6676 <fs_get_mnt_point+0x3e>
			mnt_p = itr;
			longest_match = len;
    6672:	462e      	mov	r6, r5
			mnt_p = itr;
    6674:	46a1      	mov	r9, r4
    6676:	4b18      	ldr	r3, [pc, #96]	; (66d8 <fs_get_mnt_point+0xa0>)
    6678:	685b      	ldr	r3, [r3, #4]
    667a:	429c      	cmp	r4, r3
    667c:	d010      	beq.n	66a0 <fs_get_mnt_point+0x68>
    667e:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
    6680:	b184      	cbz	r4, 66a4 <fs_get_mnt_point+0x6c>
		len = itr->mountp_len;
    6682:	69a5      	ldr	r5, [r4, #24]
		if ((len < longest_match) || (len > name_len)) {
    6684:	42ae      	cmp	r6, r5
    6686:	d8f6      	bhi.n	6676 <fs_get_mnt_point+0x3e>
    6688:	45a8      	cmp	r8, r5
    668a:	d3f4      	bcc.n	6676 <fs_get_mnt_point+0x3e>
		if ((len > 1) && (name[len] != '/') && (name[len] != '\0')) {
    668c:	2d01      	cmp	r5, #1
    668e:	d9ea      	bls.n	6666 <fs_get_mnt_point+0x2e>
    6690:	5d7b      	ldrb	r3, [r7, r5]
    6692:	2b2f      	cmp	r3, #47	; 0x2f
    6694:	d0e7      	beq.n	6666 <fs_get_mnt_point+0x2e>
    6696:	2b00      	cmp	r3, #0
    6698:	d0e5      	beq.n	6666 <fs_get_mnt_point+0x2e>
    669a:	e7ec      	b.n	6676 <fs_get_mnt_point+0x3e>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    669c:	2400      	movs	r4, #0
    669e:	e7df      	b.n	6660 <fs_get_mnt_point+0x28>
	return (node == list->tail) ? NULL : node->next;
    66a0:	2400      	movs	r4, #0
    66a2:	e7ed      	b.n	6680 <fs_get_mnt_point+0x48>
	return z_impl_k_mutex_unlock(mutex);
    66a4:	480b      	ldr	r0, [pc, #44]	; (66d4 <fs_get_mnt_point+0x9c>)
    66a6:	f009 fbd3 	bl	fe50 <z_impl_k_mutex_unlock>
		}
	}
	k_mutex_unlock(&mutex);

	if (mnt_p == NULL) {
    66aa:	f1b9 0f00 	cmp.w	r9, #0
    66ae:	d00b      	beq.n	66c8 <fs_get_mnt_point+0x90>
		return -ENOENT;
	}

	*mnt_pntp = mnt_p;
    66b0:	f8cb 9000 	str.w	r9, [fp]
	if (match_len)
    66b4:	f1ba 0f00 	cmp.w	sl, #0
    66b8:	d009      	beq.n	66ce <fs_get_mnt_point+0x96>
		*match_len = mnt_p->mountp_len;
    66ba:	f8d9 3018 	ldr.w	r3, [r9, #24]
    66be:	f8ca 3000 	str.w	r3, [sl]

	return 0;
    66c2:	2000      	movs	r0, #0
}
    66c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOENT;
    66c8:	f06f 0001 	mvn.w	r0, #1
    66cc:	e7fa      	b.n	66c4 <fs_get_mnt_point+0x8c>
	return 0;
    66ce:	2000      	movs	r0, #0
    66d0:	e7f8      	b.n	66c4 <fs_get_mnt_point+0x8c>
    66d2:	bf00      	nop
    66d4:	20001e14 	.word	0x20001e14
    66d8:	20001e0c 	.word	0x20001e0c

000066dc <fs_init>:
	LOG_DBG("fs unregister %d: %d", type, rc);
	return rc;
}

static int fs_init(const struct device *dev)
{
    66dc:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
    66de:	4804      	ldr	r0, [pc, #16]	; (66f0 <fs_init+0x14>)
    66e0:	f00f fa92 	bl	15c08 <z_impl_k_mutex_init>
	list->head = (sys_dnode_t *)list;
    66e4:	4b03      	ldr	r3, [pc, #12]	; (66f4 <fs_init+0x18>)
    66e6:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    66e8:	605b      	str	r3, [r3, #4]
	k_mutex_init(&mutex);
	sys_dlist_init(&fs_mnt_list);
	return 0;
}
    66ea:	2000      	movs	r0, #0
    66ec:	bd08      	pop	{r3, pc}
    66ee:	bf00      	nop
    66f0:	20001e14 	.word	0x20001e14
    66f4:	20001e0c 	.word	0x20001e0c

000066f8 <fs_open>:
{
    66f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    66fa:	b083      	sub	sp, #12
    66fc:	4605      	mov	r5, r0
	zfp->flags = flags;
    66fe:	7202      	strb	r2, [r0, #8]
	if ((file_name == NULL) ||
    6700:	b361      	cbz	r1, 675c <fs_open+0x64>
    6702:	4616      	mov	r6, r2
    6704:	460f      	mov	r7, r1
			(strlen(file_name) <= 1) || (file_name[0] != '/')) {
    6706:	4608      	mov	r0, r1
    6708:	f00c fd24 	bl	13154 <strlen>
	if ((file_name == NULL) ||
    670c:	2801      	cmp	r0, #1
    670e:	d925      	bls.n	675c <fs_open+0x64>
			(strlen(file_name) <= 1) || (file_name[0] != '/')) {
    6710:	783b      	ldrb	r3, [r7, #0]
    6712:	2b2f      	cmp	r3, #47	; 0x2f
    6714:	d122      	bne.n	675c <fs_open+0x64>
	if (zfp->mp != NULL) {
    6716:	686b      	ldr	r3, [r5, #4]
    6718:	2b00      	cmp	r3, #0
    671a:	d157      	bne.n	67cc <fs_open+0xd4>
	rc = fs_get_mnt_point(&mp, file_name, NULL);
    671c:	2200      	movs	r2, #0
    671e:	4639      	mov	r1, r7
    6720:	a801      	add	r0, sp, #4
    6722:	f7ff ff89 	bl	6638 <fs_get_mnt_point>
	if (rc < 0) {
    6726:	1e04      	subs	r4, r0, #0
    6728:	db2b      	blt.n	6782 <fs_open+0x8a>
	if (((mp->flags & FS_MOUNT_FLAG_READ_ONLY) != 0) &&
    672a:	9b01      	ldr	r3, [sp, #4]
    672c:	f893 2020 	ldrb.w	r2, [r3, #32]
    6730:	f012 0f02 	tst.w	r2, #2
    6734:	d002      	beq.n	673c <fs_open+0x44>
    6736:	f016 0f12 	tst.w	r6, #18
    673a:	d14a      	bne.n	67d2 <fs_open+0xda>
	CHECKIF(mp->fs->open == NULL) {
    673c:	69da      	ldr	r2, [r3, #28]
    673e:	6812      	ldr	r2, [r2, #0]
    6740:	2a00      	cmp	r2, #0
    6742:	d049      	beq.n	67d8 <fs_open+0xe0>
	zfp->mp = mp;
    6744:	606b      	str	r3, [r5, #4]
	rc = mp->fs->open(zfp, file_name, flags);
    6746:	69db      	ldr	r3, [r3, #28]
    6748:	681b      	ldr	r3, [r3, #0]
    674a:	4632      	mov	r2, r6
    674c:	4639      	mov	r1, r7
    674e:	4628      	mov	r0, r5
    6750:	4798      	blx	r3
	if (rc < 0) {
    6752:	1e04      	subs	r4, r0, #0
    6754:	db26      	blt.n	67a4 <fs_open+0xac>
}
    6756:	4620      	mov	r0, r4
    6758:	b003      	add	sp, #12
    675a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    675c:	4b20      	ldr	r3, [pc, #128]	; (67e0 <fs_open+0xe8>)
    675e:	4a21      	ldr	r2, [pc, #132]	; (67e4 <fs_open+0xec>)
    6760:	1a9b      	subs	r3, r3, r2
    6762:	08db      	lsrs	r3, r3, #3
		LOG_ERR("invalid file name!!");
    6764:	f04f 0100 	mov.w	r1, #0
    6768:	2201      	movs	r2, #1
    676a:	f362 0102 	bfi	r1, r2, #0, #3
    676e:	f36f 01c5 	bfc	r1, #3, #3
    6772:	f363 118f 	bfi	r1, r3, #6, #10
    6776:	481c      	ldr	r0, [pc, #112]	; (67e8 <fs_open+0xf0>)
    6778:	f7fc fe2e 	bl	33d8 <log_0>
		return -EINVAL;
    677c:	f06f 0415 	mvn.w	r4, #21
    6780:	e7e9      	b.n	6756 <fs_open+0x5e>
    6782:	4b17      	ldr	r3, [pc, #92]	; (67e0 <fs_open+0xe8>)
    6784:	4a17      	ldr	r2, [pc, #92]	; (67e4 <fs_open+0xec>)
    6786:	1a9b      	subs	r3, r3, r2
    6788:	08db      	lsrs	r3, r3, #3
		LOG_ERR("mount point not found!!");
    678a:	f04f 0100 	mov.w	r1, #0
    678e:	2201      	movs	r2, #1
    6790:	f362 0102 	bfi	r1, r2, #0, #3
    6794:	f36f 01c5 	bfc	r1, #3, #3
    6798:	f363 118f 	bfi	r1, r3, #6, #10
    679c:	4813      	ldr	r0, [pc, #76]	; (67ec <fs_open+0xf4>)
    679e:	f7fc fe1b 	bl	33d8 <log_0>
		return rc;
    67a2:	e7d8      	b.n	6756 <fs_open+0x5e>
    67a4:	4b0e      	ldr	r3, [pc, #56]	; (67e0 <fs_open+0xe8>)
    67a6:	4a0f      	ldr	r2, [pc, #60]	; (67e4 <fs_open+0xec>)
    67a8:	1a9b      	subs	r3, r3, r2
    67aa:	08db      	lsrs	r3, r3, #3
		LOG_ERR("file open error (%d)", rc);
    67ac:	f04f 0200 	mov.w	r2, #0
    67b0:	2101      	movs	r1, #1
    67b2:	f361 0202 	bfi	r2, r1, #0, #3
    67b6:	f36f 02c5 	bfc	r2, #3, #3
    67ba:	f363 128f 	bfi	r2, r3, #6, #10
    67be:	4621      	mov	r1, r4
    67c0:	480b      	ldr	r0, [pc, #44]	; (67f0 <fs_open+0xf8>)
    67c2:	f7fc fd75 	bl	32b0 <log_1>
		zfp->mp = NULL;
    67c6:	2300      	movs	r3, #0
    67c8:	606b      	str	r3, [r5, #4]
		return rc;
    67ca:	e7c4      	b.n	6756 <fs_open+0x5e>
		return -EBUSY;
    67cc:	f06f 040f 	mvn.w	r4, #15
    67d0:	e7c1      	b.n	6756 <fs_open+0x5e>
		return -EROFS;
    67d2:	f06f 041d 	mvn.w	r4, #29
    67d6:	e7be      	b.n	6756 <fs_open+0x5e>
		return -ENOTSUP;
    67d8:	f06f 0485 	mvn.w	r4, #133	; 0x85
    67dc:	e7bb      	b.n	6756 <fs_open+0x5e>
    67de:	bf00      	nop
    67e0:	000165e8 	.word	0x000165e8
    67e4:	000165d8 	.word	0x000165d8
    67e8:	00017380 	.word	0x00017380
    67ec:	00017394 	.word	0x00017394
    67f0:	000173ac 	.word	0x000173ac

000067f4 <fs_close>:
{
    67f4:	b538      	push	{r3, r4, r5, lr}
	if (zfp->mp == NULL) {
    67f6:	6843      	ldr	r3, [r0, #4]
    67f8:	b1e3      	cbz	r3, 6834 <fs_close+0x40>
    67fa:	4604      	mov	r4, r0
	CHECKIF(zfp->mp->fs->close == NULL) {
    67fc:	69db      	ldr	r3, [r3, #28]
    67fe:	69db      	ldr	r3, [r3, #28]
    6800:	b1d3      	cbz	r3, 6838 <fs_close+0x44>
	rc = zfp->mp->fs->close(zfp);
    6802:	4798      	blx	r3
	if (rc < 0) {
    6804:	1e05      	subs	r5, r0, #0
    6806:	db03      	blt.n	6810 <fs_close+0x1c>
	zfp->mp = NULL;
    6808:	2300      	movs	r3, #0
    680a:	6063      	str	r3, [r4, #4]
}
    680c:	4628      	mov	r0, r5
    680e:	bd38      	pop	{r3, r4, r5, pc}
    6810:	4b0b      	ldr	r3, [pc, #44]	; (6840 <fs_close+0x4c>)
    6812:	4a0c      	ldr	r2, [pc, #48]	; (6844 <fs_close+0x50>)
    6814:	1a9b      	subs	r3, r3, r2
    6816:	08db      	lsrs	r3, r3, #3
		LOG_ERR("file close error (%d)", rc);
    6818:	f04f 0200 	mov.w	r2, #0
    681c:	2101      	movs	r1, #1
    681e:	f361 0202 	bfi	r2, r1, #0, #3
    6822:	f36f 02c5 	bfc	r2, #3, #3
    6826:	f363 128f 	bfi	r2, r3, #6, #10
    682a:	4629      	mov	r1, r5
    682c:	4806      	ldr	r0, [pc, #24]	; (6848 <fs_close+0x54>)
    682e:	f7fc fd3f 	bl	32b0 <log_1>
		return rc;
    6832:	e7eb      	b.n	680c <fs_close+0x18>
		return 0;
    6834:	2500      	movs	r5, #0
    6836:	e7e9      	b.n	680c <fs_close+0x18>
		return -ENOTSUP;
    6838:	f06f 0585 	mvn.w	r5, #133	; 0x85
    683c:	e7e6      	b.n	680c <fs_close+0x18>
    683e:	bf00      	nop
    6840:	000165e8 	.word	0x000165e8
    6844:	000165d8 	.word	0x000165d8
    6848:	000173c4 	.word	0x000173c4

0000684c <fs_read>:
{
    684c:	b510      	push	{r4, lr}
	if (zfp->mp == NULL) {
    684e:	6843      	ldr	r3, [r0, #4]
    6850:	b1cb      	cbz	r3, 6886 <fs_read+0x3a>
	CHECKIF(zfp->mp->fs->read == NULL) {
    6852:	69db      	ldr	r3, [r3, #28]
    6854:	685b      	ldr	r3, [r3, #4]
    6856:	b1cb      	cbz	r3, 688c <fs_read+0x40>
	rc = zfp->mp->fs->read(zfp, ptr, size);
    6858:	4798      	blx	r3
	if (rc < 0) {
    685a:	1e04      	subs	r4, r0, #0
    685c:	db01      	blt.n	6862 <fs_read+0x16>
}
    685e:	4620      	mov	r0, r4
    6860:	bd10      	pop	{r4, pc}
    6862:	4b0c      	ldr	r3, [pc, #48]	; (6894 <fs_read+0x48>)
    6864:	4a0c      	ldr	r2, [pc, #48]	; (6898 <fs_read+0x4c>)
    6866:	1a9b      	subs	r3, r3, r2
    6868:	08db      	lsrs	r3, r3, #3
		LOG_ERR("file read error (%d)", rc);
    686a:	f04f 0200 	mov.w	r2, #0
    686e:	2101      	movs	r1, #1
    6870:	f361 0202 	bfi	r2, r1, #0, #3
    6874:	f36f 02c5 	bfc	r2, #3, #3
    6878:	f363 128f 	bfi	r2, r3, #6, #10
    687c:	4621      	mov	r1, r4
    687e:	4807      	ldr	r0, [pc, #28]	; (689c <fs_read+0x50>)
    6880:	f7fc fd16 	bl	32b0 <log_1>
    6884:	e7eb      	b.n	685e <fs_read+0x12>
		return -EBADF;
    6886:	f06f 0408 	mvn.w	r4, #8
    688a:	e7e8      	b.n	685e <fs_read+0x12>
		return -ENOTSUP;
    688c:	f06f 0485 	mvn.w	r4, #133	; 0x85
    6890:	e7e5      	b.n	685e <fs_read+0x12>
    6892:	bf00      	nop
    6894:	000165e8 	.word	0x000165e8
    6898:	000165d8 	.word	0x000165d8
    689c:	000173dc 	.word	0x000173dc

000068a0 <fs_write>:
{
    68a0:	b510      	push	{r4, lr}
	if (zfp->mp == NULL) {
    68a2:	6843      	ldr	r3, [r0, #4]
    68a4:	b1cb      	cbz	r3, 68da <fs_write+0x3a>
	CHECKIF(zfp->mp->fs->write == NULL) {
    68a6:	69db      	ldr	r3, [r3, #28]
    68a8:	689b      	ldr	r3, [r3, #8]
    68aa:	b1cb      	cbz	r3, 68e0 <fs_write+0x40>
	rc = zfp->mp->fs->write(zfp, ptr, size);
    68ac:	4798      	blx	r3
	if (rc < 0) {
    68ae:	1e04      	subs	r4, r0, #0
    68b0:	db01      	blt.n	68b6 <fs_write+0x16>
}
    68b2:	4620      	mov	r0, r4
    68b4:	bd10      	pop	{r4, pc}
    68b6:	4b0c      	ldr	r3, [pc, #48]	; (68e8 <fs_write+0x48>)
    68b8:	4a0c      	ldr	r2, [pc, #48]	; (68ec <fs_write+0x4c>)
    68ba:	1a9b      	subs	r3, r3, r2
    68bc:	08db      	lsrs	r3, r3, #3
		LOG_ERR("file write error (%d)", rc);
    68be:	f04f 0200 	mov.w	r2, #0
    68c2:	2101      	movs	r1, #1
    68c4:	f361 0202 	bfi	r2, r1, #0, #3
    68c8:	f36f 02c5 	bfc	r2, #3, #3
    68cc:	f363 128f 	bfi	r2, r3, #6, #10
    68d0:	4621      	mov	r1, r4
    68d2:	4807      	ldr	r0, [pc, #28]	; (68f0 <fs_write+0x50>)
    68d4:	f7fc fcec 	bl	32b0 <log_1>
    68d8:	e7eb      	b.n	68b2 <fs_write+0x12>
		return -EBADF;
    68da:	f06f 0408 	mvn.w	r4, #8
    68de:	e7e8      	b.n	68b2 <fs_write+0x12>
		return -ENOTSUP;
    68e0:	f06f 0485 	mvn.w	r4, #133	; 0x85
    68e4:	e7e5      	b.n	68b2 <fs_write+0x12>
    68e6:	bf00      	nop
    68e8:	000165e8 	.word	0x000165e8
    68ec:	000165d8 	.word	0x000165d8
    68f0:	000173f4 	.word	0x000173f4

000068f4 <fs_seek>:
{
    68f4:	b510      	push	{r4, lr}
	if (zfp->mp == NULL) {
    68f6:	6843      	ldr	r3, [r0, #4]
    68f8:	b1cb      	cbz	r3, 692e <fs_seek+0x3a>
	CHECKIF(zfp->mp->fs->lseek == NULL) {
    68fa:	69db      	ldr	r3, [r3, #28]
    68fc:	68db      	ldr	r3, [r3, #12]
    68fe:	b1cb      	cbz	r3, 6934 <fs_seek+0x40>
	rc = zfp->mp->fs->lseek(zfp, offset, whence);
    6900:	4798      	blx	r3
	if (rc < 0) {
    6902:	1e04      	subs	r4, r0, #0
    6904:	db01      	blt.n	690a <fs_seek+0x16>
}
    6906:	4620      	mov	r0, r4
    6908:	bd10      	pop	{r4, pc}
    690a:	4b0c      	ldr	r3, [pc, #48]	; (693c <fs_seek+0x48>)
    690c:	4a0c      	ldr	r2, [pc, #48]	; (6940 <fs_seek+0x4c>)
    690e:	1a9b      	subs	r3, r3, r2
    6910:	08db      	lsrs	r3, r3, #3
		LOG_ERR("file seek error (%d)", rc);
    6912:	f04f 0200 	mov.w	r2, #0
    6916:	2101      	movs	r1, #1
    6918:	f361 0202 	bfi	r2, r1, #0, #3
    691c:	f36f 02c5 	bfc	r2, #3, #3
    6920:	f363 128f 	bfi	r2, r3, #6, #10
    6924:	4621      	mov	r1, r4
    6926:	4807      	ldr	r0, [pc, #28]	; (6944 <fs_seek+0x50>)
    6928:	f7fc fcc2 	bl	32b0 <log_1>
    692c:	e7eb      	b.n	6906 <fs_seek+0x12>
		return -EBADF;
    692e:	f06f 0408 	mvn.w	r4, #8
    6932:	e7e8      	b.n	6906 <fs_seek+0x12>
		return -ENOTSUP;
    6934:	f06f 0485 	mvn.w	r4, #133	; 0x85
    6938:	e7e5      	b.n	6906 <fs_seek+0x12>
    693a:	bf00      	nop
    693c:	000165e8 	.word	0x000165e8
    6940:	000165d8 	.word	0x000165d8
    6944:	0001740c 	.word	0x0001740c

00006948 <fs_stat>:
{
    6948:	b570      	push	{r4, r5, r6, lr}
    694a:	b082      	sub	sp, #8
	if ((abs_path == NULL) ||
    694c:	b300      	cbz	r0, 6990 <fs_stat+0x48>
    694e:	460e      	mov	r6, r1
    6950:	4605      	mov	r5, r0
			(strlen(abs_path) <= 1) || (abs_path[0] != '/')) {
    6952:	f00c fbff 	bl	13154 <strlen>
	if ((abs_path == NULL) ||
    6956:	2801      	cmp	r0, #1
    6958:	d91a      	bls.n	6990 <fs_stat+0x48>
			(strlen(abs_path) <= 1) || (abs_path[0] != '/')) {
    695a:	782b      	ldrb	r3, [r5, #0]
    695c:	2b2f      	cmp	r3, #47	; 0x2f
    695e:	d117      	bne.n	6990 <fs_stat+0x48>
	rc = fs_get_mnt_point(&mp, abs_path, NULL);
    6960:	2200      	movs	r2, #0
    6962:	4629      	mov	r1, r5
    6964:	a801      	add	r0, sp, #4
    6966:	f7ff fe67 	bl	6638 <fs_get_mnt_point>
	if (rc < 0) {
    696a:	1e04      	subs	r4, r0, #0
    696c:	db23      	blt.n	69b6 <fs_stat+0x6e>
	CHECKIF(mp->fs->stat == NULL) {
    696e:	9801      	ldr	r0, [sp, #4]
    6970:	69c3      	ldr	r3, [r0, #28]
    6972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6974:	2b00      	cmp	r3, #0
    6976:	d041      	beq.n	69fc <fs_stat+0xb4>
	rc = mp->fs->stat(mp, abs_path, entry);
    6978:	4632      	mov	r2, r6
    697a:	4629      	mov	r1, r5
    697c:	4798      	blx	r3
    697e:	4604      	mov	r4, r0
	if (rc == -ENOENT) {
    6980:	f110 0f02 	cmn.w	r0, #2
    6984:	d001      	beq.n	698a <fs_stat+0x42>
	} else if (rc < 0) {
    6986:	2800      	cmp	r0, #0
    6988:	db26      	blt.n	69d8 <fs_stat+0x90>
}
    698a:	4620      	mov	r0, r4
    698c:	b002      	add	sp, #8
    698e:	bd70      	pop	{r4, r5, r6, pc}
    6990:	4b1c      	ldr	r3, [pc, #112]	; (6a04 <fs_stat+0xbc>)
    6992:	4a1d      	ldr	r2, [pc, #116]	; (6a08 <fs_stat+0xc0>)
    6994:	1a9b      	subs	r3, r3, r2
    6996:	08db      	lsrs	r3, r3, #3
		LOG_ERR("invalid file name!!");
    6998:	f04f 0100 	mov.w	r1, #0
    699c:	2201      	movs	r2, #1
    699e:	f362 0102 	bfi	r1, r2, #0, #3
    69a2:	f36f 01c5 	bfc	r1, #3, #3
    69a6:	f363 118f 	bfi	r1, r3, #6, #10
    69aa:	4818      	ldr	r0, [pc, #96]	; (6a0c <fs_stat+0xc4>)
    69ac:	f7fc fd14 	bl	33d8 <log_0>
		return -EINVAL;
    69b0:	f06f 0415 	mvn.w	r4, #21
    69b4:	e7e9      	b.n	698a <fs_stat+0x42>
    69b6:	4b13      	ldr	r3, [pc, #76]	; (6a04 <fs_stat+0xbc>)
    69b8:	4a13      	ldr	r2, [pc, #76]	; (6a08 <fs_stat+0xc0>)
    69ba:	1a9b      	subs	r3, r3, r2
    69bc:	08db      	lsrs	r3, r3, #3
		LOG_ERR("mount point not found!!");
    69be:	f04f 0100 	mov.w	r1, #0
    69c2:	2201      	movs	r2, #1
    69c4:	f362 0102 	bfi	r1, r2, #0, #3
    69c8:	f36f 01c5 	bfc	r1, #3, #3
    69cc:	f363 118f 	bfi	r1, r3, #6, #10
    69d0:	480f      	ldr	r0, [pc, #60]	; (6a10 <fs_stat+0xc8>)
    69d2:	f7fc fd01 	bl	33d8 <log_0>
		return rc;
    69d6:	e7d8      	b.n	698a <fs_stat+0x42>
    69d8:	4b0a      	ldr	r3, [pc, #40]	; (6a04 <fs_stat+0xbc>)
    69da:	4a0b      	ldr	r2, [pc, #44]	; (6a08 <fs_stat+0xc0>)
    69dc:	1a9b      	subs	r3, r3, r2
    69de:	08db      	lsrs	r3, r3, #3
		LOG_ERR("failed get file or dir stat (%d)", rc);
    69e0:	f04f 0200 	mov.w	r2, #0
    69e4:	2101      	movs	r1, #1
    69e6:	f361 0202 	bfi	r2, r1, #0, #3
    69ea:	f36f 02c5 	bfc	r2, #3, #3
    69ee:	f363 128f 	bfi	r2, r3, #6, #10
    69f2:	4601      	mov	r1, r0
    69f4:	4807      	ldr	r0, [pc, #28]	; (6a14 <fs_stat+0xcc>)
    69f6:	f7fc fc5b 	bl	32b0 <log_1>
    69fa:	e7c6      	b.n	698a <fs_stat+0x42>
		return -ENOTSUP;
    69fc:	f06f 0485 	mvn.w	r4, #133	; 0x85
    6a00:	e7c3      	b.n	698a <fs_stat+0x42>
    6a02:	bf00      	nop
    6a04:	000165e8 	.word	0x000165e8
    6a08:	000165d8 	.word	0x000165d8
    6a0c:	00017380 	.word	0x00017380
    6a10:	00017394 	.word	0x00017394
    6a14:	00017424 	.word	0x00017424

00006a18 <fs_statvfs>:
{
    6a18:	b570      	push	{r4, r5, r6, lr}
    6a1a:	b082      	sub	sp, #8
	if ((abs_path == NULL) ||
    6a1c:	b1d8      	cbz	r0, 6a56 <fs_statvfs+0x3e>
    6a1e:	460e      	mov	r6, r1
    6a20:	4605      	mov	r5, r0
			(strlen(abs_path) <= 1) || (abs_path[0] != '/')) {
    6a22:	f00c fb97 	bl	13154 <strlen>
	if ((abs_path == NULL) ||
    6a26:	2801      	cmp	r0, #1
    6a28:	d915      	bls.n	6a56 <fs_statvfs+0x3e>
			(strlen(abs_path) <= 1) || (abs_path[0] != '/')) {
    6a2a:	782b      	ldrb	r3, [r5, #0]
    6a2c:	2b2f      	cmp	r3, #47	; 0x2f
    6a2e:	d112      	bne.n	6a56 <fs_statvfs+0x3e>
	rc = fs_get_mnt_point(&mp, abs_path, NULL);
    6a30:	2200      	movs	r2, #0
    6a32:	4629      	mov	r1, r5
    6a34:	a801      	add	r0, sp, #4
    6a36:	f7ff fdff 	bl	6638 <fs_get_mnt_point>
	if (rc < 0) {
    6a3a:	1e04      	subs	r4, r0, #0
    6a3c:	db1e      	blt.n	6a7c <fs_statvfs+0x64>
	if (mp->fs->statvfs != NULL) {
    6a3e:	9801      	ldr	r0, [sp, #4]
    6a40:	69c3      	ldr	r3, [r0, #28]
    6a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    6a44:	b123      	cbz	r3, 6a50 <fs_statvfs+0x38>
		rc = mp->fs->statvfs(mp, abs_path, stat);
    6a46:	4632      	mov	r2, r6
    6a48:	4629      	mov	r1, r5
    6a4a:	4798      	blx	r3
		if (rc < 0) {
    6a4c:	1e04      	subs	r4, r0, #0
    6a4e:	db26      	blt.n	6a9e <fs_statvfs+0x86>
}
    6a50:	4620      	mov	r0, r4
    6a52:	b002      	add	sp, #8
    6a54:	bd70      	pop	{r4, r5, r6, pc}
    6a56:	4b1b      	ldr	r3, [pc, #108]	; (6ac4 <fs_statvfs+0xac>)
    6a58:	4a1b      	ldr	r2, [pc, #108]	; (6ac8 <fs_statvfs+0xb0>)
    6a5a:	1a9b      	subs	r3, r3, r2
    6a5c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("invalid file name!!");
    6a5e:	f04f 0100 	mov.w	r1, #0
    6a62:	2201      	movs	r2, #1
    6a64:	f362 0102 	bfi	r1, r2, #0, #3
    6a68:	f36f 01c5 	bfc	r1, #3, #3
    6a6c:	f363 118f 	bfi	r1, r3, #6, #10
    6a70:	4816      	ldr	r0, [pc, #88]	; (6acc <fs_statvfs+0xb4>)
    6a72:	f7fc fcb1 	bl	33d8 <log_0>
		return -EINVAL;
    6a76:	f06f 0415 	mvn.w	r4, #21
    6a7a:	e7e9      	b.n	6a50 <fs_statvfs+0x38>
    6a7c:	4b11      	ldr	r3, [pc, #68]	; (6ac4 <fs_statvfs+0xac>)
    6a7e:	4a12      	ldr	r2, [pc, #72]	; (6ac8 <fs_statvfs+0xb0>)
    6a80:	1a9b      	subs	r3, r3, r2
    6a82:	08db      	lsrs	r3, r3, #3
		LOG_ERR("mount point not found!!");
    6a84:	f04f 0100 	mov.w	r1, #0
    6a88:	2201      	movs	r2, #1
    6a8a:	f362 0102 	bfi	r1, r2, #0, #3
    6a8e:	f36f 01c5 	bfc	r1, #3, #3
    6a92:	f363 118f 	bfi	r1, r3, #6, #10
    6a96:	480e      	ldr	r0, [pc, #56]	; (6ad0 <fs_statvfs+0xb8>)
    6a98:	f7fc fc9e 	bl	33d8 <log_0>
		return rc;
    6a9c:	e7d8      	b.n	6a50 <fs_statvfs+0x38>
    6a9e:	4b09      	ldr	r3, [pc, #36]	; (6ac4 <fs_statvfs+0xac>)
    6aa0:	4a09      	ldr	r2, [pc, #36]	; (6ac8 <fs_statvfs+0xb0>)
    6aa2:	1a9b      	subs	r3, r3, r2
    6aa4:	08db      	lsrs	r3, r3, #3
			LOG_ERR("failed get file or dir stat (%d)", rc);
    6aa6:	f04f 0200 	mov.w	r2, #0
    6aaa:	2101      	movs	r1, #1
    6aac:	f361 0202 	bfi	r2, r1, #0, #3
    6ab0:	f36f 02c5 	bfc	r2, #3, #3
    6ab4:	f363 128f 	bfi	r2, r3, #6, #10
    6ab8:	4621      	mov	r1, r4
    6aba:	4806      	ldr	r0, [pc, #24]	; (6ad4 <fs_statvfs+0xbc>)
    6abc:	f7fc fbf8 	bl	32b0 <log_1>
    6ac0:	e7c6      	b.n	6a50 <fs_statvfs+0x38>
    6ac2:	bf00      	nop
    6ac4:	000165e8 	.word	0x000165e8
    6ac8:	000165d8 	.word	0x000165d8
    6acc:	00017380 	.word	0x00017380
    6ad0:	00017394 	.word	0x00017394
    6ad4:	00017424 	.word	0x00017424

00006ad8 <fs_mount>:
{
    6ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((mp == NULL) || (mp->mnt_point == NULL)) {
    6ada:	b1c0      	cbz	r0, 6b0e <fs_mount+0x36>
    6adc:	4606      	mov	r6, r0
    6ade:	68c0      	ldr	r0, [r0, #12]
    6ae0:	b1a8      	cbz	r0, 6b0e <fs_mount+0x36>
	len = strlen(mp->mnt_point);
    6ae2:	f00c fb37 	bl	13154 <strlen>
    6ae6:	4605      	mov	r5, r0
	if ((len <= 1) || (mp->mnt_point[0] != '/')) {
    6ae8:	2801      	cmp	r0, #1
    6aea:	d923      	bls.n	6b34 <fs_mount+0x5c>
    6aec:	68f3      	ldr	r3, [r6, #12]
    6aee:	781b      	ldrb	r3, [r3, #0]
    6af0:	2b2f      	cmp	r3, #47	; 0x2f
    6af2:	d11f      	bne.n	6b34 <fs_mount+0x5c>
	return z_impl_k_mutex_lock(mutex, timeout);
    6af4:	f04f 32ff 	mov.w	r2, #4294967295
    6af8:	f04f 33ff 	mov.w	r3, #4294967295
    6afc:	485e      	ldr	r0, [pc, #376]	; (6c78 <fs_mount+0x1a0>)
    6afe:	f009 f91d 	bl	fd3c <z_impl_k_mutex_lock>
	return list->head == list;
    6b02:	4b5e      	ldr	r3, [pc, #376]	; (6c7c <fs_mount+0x1a4>)
    6b04:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6b06:	429c      	cmp	r4, r3
    6b08:	d12c      	bne.n	6b64 <fs_mount+0x8c>
    6b0a:	2400      	movs	r4, #0
    6b0c:	e02a      	b.n	6b64 <fs_mount+0x8c>
    6b0e:	4b5c      	ldr	r3, [pc, #368]	; (6c80 <fs_mount+0x1a8>)
    6b10:	4a5c      	ldr	r2, [pc, #368]	; (6c84 <fs_mount+0x1ac>)
    6b12:	1a9b      	subs	r3, r3, r2
    6b14:	08db      	lsrs	r3, r3, #3
		LOG_ERR("mount point not initialized!!");
    6b16:	f04f 0100 	mov.w	r1, #0
    6b1a:	2201      	movs	r2, #1
    6b1c:	f362 0102 	bfi	r1, r2, #0, #3
    6b20:	f36f 01c5 	bfc	r1, #3, #3
    6b24:	f363 118f 	bfi	r1, r3, #6, #10
    6b28:	4857      	ldr	r0, [pc, #348]	; (6c88 <fs_mount+0x1b0>)
    6b2a:	f7fc fc55 	bl	33d8 <log_0>
		return -EINVAL;
    6b2e:	f06f 0415 	mvn.w	r4, #21
    6b32:	e050      	b.n	6bd6 <fs_mount+0xfe>
    6b34:	4b52      	ldr	r3, [pc, #328]	; (6c80 <fs_mount+0x1a8>)
    6b36:	4a53      	ldr	r2, [pc, #332]	; (6c84 <fs_mount+0x1ac>)
    6b38:	1a9b      	subs	r3, r3, r2
    6b3a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("invalid mount point!!");
    6b3c:	f04f 0100 	mov.w	r1, #0
    6b40:	2201      	movs	r2, #1
    6b42:	f362 0102 	bfi	r1, r2, #0, #3
    6b46:	f36f 01c5 	bfc	r1, #3, #3
    6b4a:	f363 118f 	bfi	r1, r3, #6, #10
    6b4e:	484f      	ldr	r0, [pc, #316]	; (6c8c <fs_mount+0x1b4>)
    6b50:	f7fc fc42 	bl	33d8 <log_0>
		return -EINVAL;
    6b54:	f06f 0415 	mvn.w	r4, #21
    6b58:	e03d      	b.n	6bd6 <fs_mount+0xfe>
	return (node == list->tail) ? NULL : node->next;
    6b5a:	4b48      	ldr	r3, [pc, #288]	; (6c7c <fs_mount+0x1a4>)
    6b5c:	685b      	ldr	r3, [r3, #4]
    6b5e:	42a3      	cmp	r3, r4
    6b60:	d01e      	beq.n	6ba0 <fs_mount+0xc8>
    6b62:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
    6b64:	b1e4      	cbz	r4, 6ba0 <fs_mount+0xc8>
		if (len != itr->mountp_len) {
    6b66:	69a3      	ldr	r3, [r4, #24]
    6b68:	42ab      	cmp	r3, r5
    6b6a:	d1f6      	bne.n	6b5a <fs_mount+0x82>
		if (strncmp(mp->mnt_point, itr->mnt_point, len) == 0) {
    6b6c:	462a      	mov	r2, r5
    6b6e:	68e1      	ldr	r1, [r4, #12]
    6b70:	68f0      	ldr	r0, [r6, #12]
    6b72:	f00c fb0b 	bl	1318c <strncmp>
    6b76:	2800      	cmp	r0, #0
    6b78:	d1ef      	bne.n	6b5a <fs_mount+0x82>
    6b7a:	4b41      	ldr	r3, [pc, #260]	; (6c80 <fs_mount+0x1a8>)
    6b7c:	4a41      	ldr	r2, [pc, #260]	; (6c84 <fs_mount+0x1ac>)
    6b7e:	1a9b      	subs	r3, r3, r2
    6b80:	08db      	lsrs	r3, r3, #3
			LOG_ERR("mount point already exists!!");
    6b82:	f04f 0100 	mov.w	r1, #0
    6b86:	2201      	movs	r2, #1
    6b88:	f362 0102 	bfi	r1, r2, #0, #3
    6b8c:	f36f 01c5 	bfc	r1, #3, #3
    6b90:	f363 118f 	bfi	r1, r3, #6, #10
    6b94:	483e      	ldr	r0, [pc, #248]	; (6c90 <fs_mount+0x1b8>)
    6b96:	f7fc fc1f 	bl	33d8 <log_0>
			rc = -EBUSY;
    6b9a:	f06f 040f 	mvn.w	r4, #15
			goto mount_err;
    6b9e:	e017      	b.n	6bd0 <fs_mount+0xf8>
	fs = fs_type_get(mp->type);
    6ba0:	68b4      	ldr	r4, [r6, #8]
    6ba2:	4620      	mov	r0, r4
    6ba4:	f00c fbaf 	bl	13306 <fs_type_get>
	if (fs == NULL) {
    6ba8:	4607      	mov	r7, r0
    6baa:	b1b0      	cbz	r0, 6bda <fs_mount+0x102>
	CHECKIF(fs->mount == NULL) {
    6bac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    6bae:	b33b      	cbz	r3, 6c00 <fs_mount+0x128>
	if (fs->unmount == NULL) {
    6bb0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    6bb2:	2b00      	cmp	r3, #0
    6bb4:	d038      	beq.n	6c28 <fs_mount+0x150>
	rc = fs->mount(mp);
    6bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    6bb8:	4630      	mov	r0, r6
    6bba:	4798      	blx	r3
	if (rc < 0) {
    6bbc:	1e04      	subs	r4, r0, #0
    6bbe:	db49      	blt.n	6c54 <fs_mount+0x17c>
	mp->mountp_len = len;
    6bc0:	61b5      	str	r5, [r6, #24]
	mp->fs = fs;
    6bc2:	61f7      	str	r7, [r6, #28]
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
    6bc4:	4b2d      	ldr	r3, [pc, #180]	; (6c7c <fs_mount+0x1a4>)
    6bc6:	685a      	ldr	r2, [r3, #4]

	node->next = list;
    6bc8:	6033      	str	r3, [r6, #0]
	node->prev = tail;
    6bca:	6072      	str	r2, [r6, #4]

	tail->next = node;
    6bcc:	6016      	str	r6, [r2, #0]
	list->tail = node;
    6bce:	605e      	str	r6, [r3, #4]
	return z_impl_k_mutex_unlock(mutex);
    6bd0:	4829      	ldr	r0, [pc, #164]	; (6c78 <fs_mount+0x1a0>)
    6bd2:	f009 f93d 	bl	fe50 <z_impl_k_mutex_unlock>
}
    6bd6:	4620      	mov	r0, r4
    6bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6bda:	4b29      	ldr	r3, [pc, #164]	; (6c80 <fs_mount+0x1a8>)
    6bdc:	4a29      	ldr	r2, [pc, #164]	; (6c84 <fs_mount+0x1ac>)
    6bde:	1a9b      	subs	r3, r3, r2
    6be0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("requested file system type not registered!!");
    6be2:	f04f 0100 	mov.w	r1, #0
    6be6:	2201      	movs	r2, #1
    6be8:	f362 0102 	bfi	r1, r2, #0, #3
    6bec:	f36f 01c5 	bfc	r1, #3, #3
    6bf0:	f363 118f 	bfi	r1, r3, #6, #10
    6bf4:	4827      	ldr	r0, [pc, #156]	; (6c94 <fs_mount+0x1bc>)
    6bf6:	f7fc fbef 	bl	33d8 <log_0>
		rc = -ENOENT;
    6bfa:	f06f 0401 	mvn.w	r4, #1
		goto mount_err;
    6bfe:	e7e7      	b.n	6bd0 <fs_mount+0xf8>
    6c00:	4b1f      	ldr	r3, [pc, #124]	; (6c80 <fs_mount+0x1a8>)
    6c02:	4a20      	ldr	r2, [pc, #128]	; (6c84 <fs_mount+0x1ac>)
    6c04:	1a9b      	subs	r3, r3, r2
    6c06:	08db      	lsrs	r3, r3, #3
		LOG_ERR("fs type %d does not support mounting", mp->type);
    6c08:	f04f 0200 	mov.w	r2, #0
    6c0c:	2101      	movs	r1, #1
    6c0e:	f361 0202 	bfi	r2, r1, #0, #3
    6c12:	f36f 02c5 	bfc	r2, #3, #3
    6c16:	f363 128f 	bfi	r2, r3, #6, #10
    6c1a:	4621      	mov	r1, r4
    6c1c:	481e      	ldr	r0, [pc, #120]	; (6c98 <fs_mount+0x1c0>)
    6c1e:	f7fc fb47 	bl	32b0 <log_1>
		rc = -ENOTSUP;
    6c22:	f06f 0485 	mvn.w	r4, #133	; 0x85
		goto mount_err;
    6c26:	e7d3      	b.n	6bd0 <fs_mount+0xf8>
    6c28:	4b15      	ldr	r3, [pc, #84]	; (6c80 <fs_mount+0x1a8>)
    6c2a:	4a16      	ldr	r2, [pc, #88]	; (6c84 <fs_mount+0x1ac>)
    6c2c:	1a9b      	subs	r3, r3, r2
    6c2e:	08db      	lsrs	r3, r3, #3
		LOG_WRN("mount path %s is not unmountable",
    6c30:	f04f 0400 	mov.w	r4, #0
    6c34:	2202      	movs	r2, #2
    6c36:	f362 0402 	bfi	r4, r2, #0, #3
    6c3a:	f36f 04c5 	bfc	r4, #3, #3
    6c3e:	f363 148f 	bfi	r4, r3, #6, #10
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
    6c42:	68f0      	ldr	r0, [r6, #12]
    6c44:	f7fc f9ba 	bl	2fbc <z_log_strdup>
    6c48:	4601      	mov	r1, r0
    6c4a:	4622      	mov	r2, r4
    6c4c:	4813      	ldr	r0, [pc, #76]	; (6c9c <fs_mount+0x1c4>)
    6c4e:	f7fc fb2f 	bl	32b0 <log_1>
    6c52:	e7b0      	b.n	6bb6 <fs_mount+0xde>
    6c54:	4b0a      	ldr	r3, [pc, #40]	; (6c80 <fs_mount+0x1a8>)
    6c56:	4a0b      	ldr	r2, [pc, #44]	; (6c84 <fs_mount+0x1ac>)
    6c58:	1a9b      	subs	r3, r3, r2
    6c5a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("fs mount error (%d)", rc);
    6c5c:	f04f 0200 	mov.w	r2, #0
    6c60:	2101      	movs	r1, #1
    6c62:	f361 0202 	bfi	r2, r1, #0, #3
    6c66:	f36f 02c5 	bfc	r2, #3, #3
    6c6a:	f363 128f 	bfi	r2, r3, #6, #10
    6c6e:	4621      	mov	r1, r4
    6c70:	480b      	ldr	r0, [pc, #44]	; (6ca0 <fs_mount+0x1c8>)
    6c72:	f7fc fb1d 	bl	32b0 <log_1>
		goto mount_err;
    6c76:	e7ab      	b.n	6bd0 <fs_mount+0xf8>
    6c78:	20001e14 	.word	0x20001e14
    6c7c:	20001e0c 	.word	0x20001e0c
    6c80:	000165e8 	.word	0x000165e8
    6c84:	000165d8 	.word	0x000165d8
    6c88:	00017448 	.word	0x00017448
    6c8c:	00017468 	.word	0x00017468
    6c90:	00017480 	.word	0x00017480
    6c94:	000174a0 	.word	0x000174a0
    6c98:	000174cc 	.word	0x000174cc
    6c9c:	000174f4 	.word	0x000174f4
    6ca0:	00017518 	.word	0x00017518

00006ca4 <fs_register>:
{
    6ca4:	b538      	push	{r3, r4, r5, lr}
    6ca6:	4604      	mov	r4, r0
    6ca8:	460d      	mov	r5, r1
	return z_impl_k_mutex_lock(mutex, timeout);
    6caa:	f04f 32ff 	mov.w	r2, #4294967295
    6cae:	f04f 33ff 	mov.w	r3, #4294967295
    6cb2:	480a      	ldr	r0, [pc, #40]	; (6cdc <fs_register+0x38>)
    6cb4:	f009 f842 	bl	fd3c <z_impl_k_mutex_lock>
	if (fs_type_get(type) != NULL) {
    6cb8:	4620      	mov	r0, r4
    6cba:	f00c fb24 	bl	13306 <fs_type_get>
    6cbe:	b948      	cbnz	r0, 6cd4 <fs_register+0x30>
		rc = registry_add(type, fs);
    6cc0:	4629      	mov	r1, r5
    6cc2:	4620      	mov	r0, r4
    6cc4:	f7ff fc8a 	bl	65dc <registry_add>
    6cc8:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    6cca:	4804      	ldr	r0, [pc, #16]	; (6cdc <fs_register+0x38>)
    6ccc:	f009 f8c0 	bl	fe50 <z_impl_k_mutex_unlock>
}
    6cd0:	4620      	mov	r0, r4
    6cd2:	bd38      	pop	{r3, r4, r5, pc}
		rc = -EALREADY;
    6cd4:	f06f 0477 	mvn.w	r4, #119	; 0x77
    6cd8:	e7f7      	b.n	6cca <fs_register+0x26>
    6cda:	bf00      	nop
    6cdc:	20001e14 	.word	0x20001e14

00006ce0 <fs_impl_strip_prefix>:
const char *fs_impl_strip_prefix(const char *path,
				 const struct fs_mount_t *mp)
{
	static const char *const root = "/";

	if ((path == NULL) || (mp == NULL)) {
    6ce0:	4603      	mov	r3, r0
    6ce2:	b128      	cbz	r0, 6cf0 <fs_impl_strip_prefix+0x10>
    6ce4:	b129      	cbz	r1, 6cf2 <fs_impl_strip_prefix+0x12>
		return path;
	}

	path += mp->mountp_len;
    6ce6:	698a      	ldr	r2, [r1, #24]
    6ce8:	4410      	add	r0, r2
	return *path ? path : root;
    6cea:	5c9b      	ldrb	r3, [r3, r2]
    6cec:	b113      	cbz	r3, 6cf4 <fs_impl_strip_prefix+0x14>
    6cee:	4770      	bx	lr
    6cf0:	4770      	bx	lr
    6cf2:	4770      	bx	lr
    6cf4:	4800      	ldr	r0, [pc, #0]	; (6cf8 <fs_impl_strip_prefix+0x18>)
}
    6cf6:	4770      	bx	lr
    6cf8:	00017530 	.word	0x00017530

00006cfc <littlefs_init>:
		}
	}
}

static int littlefs_init(const struct device *dev)
{
    6cfc:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);
	static struct fs_mount_t *partitions[] = {
		DT_INST_FOREACH_STATUS_OKAY(REFERENCE_MOUNT)
	};

	int rc = fs_register(FS_LITTLEFS, &littlefs_fs);
    6cfe:	4902      	ldr	r1, [pc, #8]	; (6d08 <littlefs_init+0xc>)
    6d00:	2001      	movs	r0, #1
    6d02:	f7ff ffcf 	bl	6ca4 <fs_register>
			mount_init(*mpi++);
		}
	}

	return rc;
}
    6d06:	bd08      	pop	{r3, pc}
    6d08:	000176a0 	.word	0x000176a0

00006d0c <get_block_size>:
{
    6d0c:	b500      	push	{lr}
    6d0e:	b083      	sub	sp, #12
	struct get_page_ctx ctx = {
    6d10:	9000      	str	r0, [sp, #0]
    6d12:	2300      	movs	r3, #0
    6d14:	9301      	str	r3, [sp, #4]
	const struct device *dev = flash_area_get_device(fa);
    6d16:	f00c f965 	bl	12fe4 <flash_area_get_device>
	flash_page_foreach(dev, get_page_cb, &ctx);
    6d1a:	466a      	mov	r2, sp
    6d1c:	4903      	ldr	r1, [pc, #12]	; (6d2c <get_block_size+0x20>)
    6d1e:	f00c ffe4 	bl	13cea <flash_page_foreach>
}
    6d22:	9801      	ldr	r0, [sp, #4]
    6d24:	b003      	add	sp, #12
    6d26:	f85d fb04 	ldr.w	pc, [sp], #4
    6d2a:	bf00      	nop
    6d2c:	00013415 	.word	0x00013415

00006d30 <littlefs_mount>:
{
    6d30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6d34:	b08d      	sub	sp, #52	; 0x34
    6d36:	4605      	mov	r5, r0
	struct fs_littlefs *fs = mountp->fs_data;
    6d38:	6904      	ldr	r4, [r0, #16]
	unsigned int area_id = (uintptr_t)mountp->storage_dev;
    6d3a:	6947      	ldr	r7, [r0, #20]
    6d3c:	4bc3      	ldr	r3, [pc, #780]	; (704c <littlefs_mount+0x31c>)
    6d3e:	4ac4      	ldr	r2, [pc, #784]	; (7050 <littlefs_mount+0x320>)
    6d40:	1a9b      	subs	r3, r3, r2
    6d42:	08db      	lsrs	r3, r3, #3
	LOG_INF("LittleFS version %u.%u, disk version %u.%u",
    6d44:	f04f 0c00 	mov.w	ip, #0
    6d48:	2203      	movs	r2, #3
    6d4a:	f362 0c02 	bfi	ip, r2, #0, #3
    6d4e:	f36f 0cc5 	bfc	ip, #3, #3
    6d52:	f363 1c8f 	bfi	ip, r3, #6, #10
    6d56:	4bbf      	ldr	r3, [pc, #764]	; (7054 <littlefs_mount+0x324>)
    6d58:	ae07      	add	r6, sp, #28
    6d5a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    6d5c:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    6d60:	4663      	mov	r3, ip
    6d62:	2204      	movs	r2, #4
    6d64:	4631      	mov	r1, r6
    6d66:	48bc      	ldr	r0, [pc, #752]	; (7058 <littlefs_mount+0x328>)
    6d68:	f7fc fb14 	bl	3394 <log_n>
	if (fs->area) {
    6d6c:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    6d70:	2b00      	cmp	r3, #0
    6d72:	f040 8167 	bne.w	7044 <littlefs_mount+0x314>
	k_mutex_init(&fs->mutex);
    6d76:	f104 06ec 	add.w	r6, r4, #236	; 0xec
	return z_impl_k_mutex_init(mutex);
    6d7a:	4630      	mov	r0, r6
    6d7c:	f00e ff44 	bl	15c08 <z_impl_k_mutex_init>
	return z_impl_k_mutex_lock(mutex, timeout);
    6d80:	f04f 32ff 	mov.w	r2, #4294967295
    6d84:	f04f 33ff 	mov.w	r3, #4294967295
    6d88:	4630      	mov	r0, r6
    6d8a:	f008 ffd7 	bl	fd3c <z_impl_k_mutex_lock>
	ret = flash_area_open(area_id, &fs->area);
    6d8e:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    6d92:	b2f8      	uxtb	r0, r7
    6d94:	f7fe fb36 	bl	5404 <flash_area_open>
	if ((ret < 0) || (fs->area == NULL)) {
    6d98:	2800      	cmp	r0, #0
    6d9a:	db26      	blt.n	6dea <littlefs_mount+0xba>
    6d9c:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
    6da0:	b318      	cbz	r0, 6dea <littlefs_mount+0xba>
	dev = flash_area_get_device(fs->area);
    6da2:	f00c f91f 	bl	12fe4 <flash_area_get_device>
	if (dev == NULL) {
    6da6:	9004      	str	r0, [sp, #16]
    6da8:	2800      	cmp	r0, #0
    6daa:	d03b      	beq.n	6e24 <littlefs_mount+0xf4>
	lfs_size_t read_size = lcp->read_size;
    6dac:	f8d4 9014 	ldr.w	r9, [r4, #20]
	if (read_size == 0) {
    6db0:	f1b9 0f00 	cmp.w	r9, #0
    6db4:	d101      	bne.n	6dba <littlefs_mount+0x8a>
		read_size = CONFIG_FS_LITTLEFS_READ_SIZE;
    6db6:	f04f 0910 	mov.w	r9, #16
	lfs_size_t prog_size = lcp->prog_size;
    6dba:	f8d4 8018 	ldr.w	r8, [r4, #24]
	if (prog_size == 0) {
    6dbe:	f1b8 0f00 	cmp.w	r8, #0
    6dc2:	d101      	bne.n	6dc8 <littlefs_mount+0x98>
		prog_size = CONFIG_FS_LITTLEFS_PROG_SIZE;
    6dc4:	f04f 0810 	mov.w	r8, #16
	lfs_size_t block_size = lcp->block_size;
    6dc8:	69e7      	ldr	r7, [r4, #28]
	if (block_size == 0) {
    6dca:	2f00      	cmp	r7, #0
    6dcc:	d044      	beq.n	6e58 <littlefs_mount+0x128>
	if (block_size == 0) {
    6dce:	2f00      	cmp	r7, #0
    6dd0:	f000 8135 	beq.w	703e <littlefs_mount+0x30e>
	int32_t block_cycles = lcp->block_cycles;
    6dd4:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
	if (block_cycles == 0) {
    6dd8:	f1bb 0f00 	cmp.w	fp, #0
    6ddc:	d042      	beq.n	6e64 <littlefs_mount+0x134>
	if (block_cycles <= 0) {
    6dde:	f1bb 0f00 	cmp.w	fp, #0
    6de2:	dc41      	bgt.n	6e68 <littlefs_mount+0x138>
		block_cycles = -1;
    6de4:	f04f 3bff 	mov.w	fp, #4294967295
    6de8:	e03e      	b.n	6e68 <littlefs_mount+0x138>
    6dea:	4b98      	ldr	r3, [pc, #608]	; (704c <littlefs_mount+0x31c>)
    6dec:	4a98      	ldr	r2, [pc, #608]	; (7050 <littlefs_mount+0x320>)
    6dee:	1a9b      	subs	r3, r3, r2
    6df0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("can't open flash area %d", area_id);
    6df2:	f04f 0200 	mov.w	r2, #0
    6df6:	2101      	movs	r1, #1
    6df8:	f361 0202 	bfi	r2, r1, #0, #3
    6dfc:	f36f 02c5 	bfc	r2, #3, #3
    6e00:	f363 128f 	bfi	r2, r3, #6, #10
    6e04:	4639      	mov	r1, r7
    6e06:	4895      	ldr	r0, [pc, #596]	; (705c <littlefs_mount+0x32c>)
    6e08:	f7fc fa52 	bl	32b0 <log_1>
		ret = -ENODEV;
    6e0c:	f06f 0712 	mvn.w	r7, #18
		fs->area = NULL;
    6e10:	2300      	movs	r3, #0
    6e12:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
	return z_impl_k_mutex_unlock(mutex);
    6e16:	4630      	mov	r0, r6
    6e18:	f009 f81a 	bl	fe50 <z_impl_k_mutex_unlock>
}
    6e1c:	4638      	mov	r0, r7
    6e1e:	b00d      	add	sp, #52	; 0x34
    6e20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6e24:	4b89      	ldr	r3, [pc, #548]	; (704c <littlefs_mount+0x31c>)
    6e26:	4a8a      	ldr	r2, [pc, #552]	; (7050 <littlefs_mount+0x320>)
    6e28:	1a9b      	subs	r3, r3, r2
    6e2a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("can't get flash device: %s", log_strdup(fs->area->fa_dev_name));
    6e2c:	f04f 0500 	mov.w	r5, #0
    6e30:	2201      	movs	r2, #1
    6e32:	f362 0502 	bfi	r5, r2, #0, #3
    6e36:	f36f 05c5 	bfc	r5, #3, #3
    6e3a:	f363 158f 	bfi	r5, r3, #6, #10
    6e3e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    6e42:	68d8      	ldr	r0, [r3, #12]
    6e44:	f7fc f8ba 	bl	2fbc <z_log_strdup>
    6e48:	4601      	mov	r1, r0
    6e4a:	462a      	mov	r2, r5
    6e4c:	4884      	ldr	r0, [pc, #528]	; (7060 <littlefs_mount+0x330>)
    6e4e:	f7fc fa2f 	bl	32b0 <log_1>
		ret = -ENODEV;
    6e52:	f06f 0712 	mvn.w	r7, #18
    6e56:	e7db      	b.n	6e10 <littlefs_mount+0xe0>
		block_size = get_block_size(fs->area);
    6e58:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
    6e5c:	f7ff ff56 	bl	6d0c <get_block_size>
    6e60:	4607      	mov	r7, r0
    6e62:	e7b4      	b.n	6dce <littlefs_mount+0x9e>
		block_cycles = CONFIG_FS_LITTLEFS_BLOCK_CYCLES;
    6e64:	f44f 7b00 	mov.w	fp, #512	; 0x200
	lfs_size_t cache_size = lcp->cache_size;
    6e68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    6e6a:	9302      	str	r3, [sp, #8]
	if (cache_size == 0) {
    6e6c:	b90b      	cbnz	r3, 6e72 <littlefs_mount+0x142>
		cache_size = CONFIG_FS_LITTLEFS_CACHE_SIZE;
    6e6e:	2340      	movs	r3, #64	; 0x40
    6e70:	9302      	str	r3, [sp, #8]
	lfs_size_t lookahead_size = lcp->lookahead_size;
    6e72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6e74:	9301      	str	r3, [sp, #4]
	if (lookahead_size == 0) {
    6e76:	b90b      	cbnz	r3, 6e7c <littlefs_mount+0x14c>
		lookahead_size = CONFIG_FS_LITTLEFS_LOOKAHEAD_SIZE;
    6e78:	2320      	movs	r3, #32
    6e7a:	9301      	str	r3, [sp, #4]
	lfs_size_t block_count = fs->area->fa_size / block_size;
    6e7c:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    6e80:	689b      	ldr	r3, [r3, #8]
    6e82:	fbb3 f3f7 	udiv	r3, r3, r7
    6e86:	9303      	str	r3, [sp, #12]
    6e88:	4b70      	ldr	r3, [pc, #448]	; (704c <littlefs_mount+0x31c>)
    6e8a:	4a71      	ldr	r2, [pc, #452]	; (7050 <littlefs_mount+0x320>)
    6e8c:	1a9b      	subs	r3, r3, r2
    6e8e:	08da      	lsrs	r2, r3, #3
	LOG_INF("FS at %s:0x%x is %u 0x%x-byte blocks with %u cycle",
    6e90:	f04f 0a00 	mov.w	sl, #0
    6e94:	2103      	movs	r1, #3
    6e96:	f361 0a02 	bfi	sl, r1, #0, #3
    6e9a:	f36f 0ac5 	bfc	sl, #3, #3
    6e9e:	9205      	str	r2, [sp, #20]
    6ea0:	f362 1a8f 	bfi	sl, r2, #6, #10
    6ea4:	9804      	ldr	r0, [sp, #16]
    6ea6:	6800      	ldr	r0, [r0, #0]
    6ea8:	f7fc f888 	bl	2fbc <z_log_strdup>
    6eac:	9007      	str	r0, [sp, #28]
    6eae:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    6eb2:	685b      	ldr	r3, [r3, #4]
    6eb4:	9308      	str	r3, [sp, #32]
    6eb6:	9b03      	ldr	r3, [sp, #12]
    6eb8:	9309      	str	r3, [sp, #36]	; 0x24
    6eba:	970a      	str	r7, [sp, #40]	; 0x28
    6ebc:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    6ec0:	4653      	mov	r3, sl
    6ec2:	2205      	movs	r2, #5
    6ec4:	f10d 0c1c 	add.w	ip, sp, #28
    6ec8:	4661      	mov	r1, ip
    6eca:	4866      	ldr	r0, [pc, #408]	; (7064 <littlefs_mount+0x334>)
    6ecc:	f7fc fa62 	bl	3394 <log_n>
	LOG_INF("sizes: rd %u ; pr %u ; ca %u ; la %u",
    6ed0:	f04f 0300 	mov.w	r3, #0
    6ed4:	2003      	movs	r0, #3
    6ed6:	f360 0302 	bfi	r3, r0, #0, #3
    6eda:	f36f 03c5 	bfc	r3, #3, #3
    6ede:	9905      	ldr	r1, [sp, #20]
    6ee0:	f361 138f 	bfi	r3, r1, #6, #10
    6ee4:	f8cd 901c 	str.w	r9, [sp, #28]
    6ee8:	f8cd 8020 	str.w	r8, [sp, #32]
    6eec:	9a02      	ldr	r2, [sp, #8]
    6eee:	9209      	str	r2, [sp, #36]	; 0x24
    6ef0:	9901      	ldr	r1, [sp, #4]
    6ef2:	910a      	str	r1, [sp, #40]	; 0x28
    6ef4:	2204      	movs	r2, #4
    6ef6:	a807      	add	r0, sp, #28
    6ef8:	4601      	mov	r1, r0
    6efa:	485b      	ldr	r0, [pc, #364]	; (7068 <littlefs_mount+0x338>)
    6efc:	f7fc fa4a 	bl	3394 <log_n>
	lcp->context = (void *)fs->area;
    6f00:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    6f04:	6023      	str	r3, [r4, #0]
	lcp->read = lfs_api_read;
    6f06:	4b59      	ldr	r3, [pc, #356]	; (706c <littlefs_mount+0x33c>)
    6f08:	6063      	str	r3, [r4, #4]
	lcp->prog = lfs_api_prog;
    6f0a:	4b59      	ldr	r3, [pc, #356]	; (7070 <littlefs_mount+0x340>)
    6f0c:	60a3      	str	r3, [r4, #8]
	lcp->erase = lfs_api_erase;
    6f0e:	4b59      	ldr	r3, [pc, #356]	; (7074 <littlefs_mount+0x344>)
    6f10:	60e3      	str	r3, [r4, #12]
	lcp->sync = lfs_api_sync;
    6f12:	4b59      	ldr	r3, [pc, #356]	; (7078 <littlefs_mount+0x348>)
    6f14:	6123      	str	r3, [r4, #16]
	lcp->read_size = read_size;
    6f16:	f8c4 9014 	str.w	r9, [r4, #20]
	lcp->prog_size = prog_size;
    6f1a:	f8c4 8018 	str.w	r8, [r4, #24]
	lcp->block_size = block_size;
    6f1e:	61e7      	str	r7, [r4, #28]
	lcp->block_count = block_count;
    6f20:	9b03      	ldr	r3, [sp, #12]
    6f22:	6223      	str	r3, [r4, #32]
	lcp->block_cycles = block_cycles;
    6f24:	f8c4 b024 	str.w	fp, [r4, #36]	; 0x24
	lcp->cache_size = cache_size;
    6f28:	9a02      	ldr	r2, [sp, #8]
    6f2a:	62a2      	str	r2, [r4, #40]	; 0x28
	lcp->lookahead_size = lookahead_size;
    6f2c:	9901      	ldr	r1, [sp, #4]
    6f2e:	62e1      	str	r1, [r4, #44]	; 0x2c
	ret = lfs_mount(&fs->lfs, &fs->cfg);
    6f30:	f104 0870 	add.w	r8, r4, #112	; 0x70
    6f34:	4621      	mov	r1, r4
    6f36:	4640      	mov	r0, r8
    6f38:	f006 fce8 	bl	d90c <lfs_mount>
	if (ret < 0 &&
    6f3c:	1e07      	subs	r7, r0, #0
    6f3e:	da04      	bge.n	6f4a <littlefs_mount+0x21a>
	    (mountp->flags & FS_MOUNT_FLAG_NO_FORMAT) == 0) {
    6f40:	f895 3020 	ldrb.w	r3, [r5, #32]
	if (ret < 0 &&
    6f44:	f013 0f01 	tst.w	r3, #1
    6f48:	d018      	beq.n	6f7c <littlefs_mount+0x24c>
    6f4a:	4b40      	ldr	r3, [pc, #256]	; (704c <littlefs_mount+0x31c>)
    6f4c:	4a40      	ldr	r2, [pc, #256]	; (7050 <littlefs_mount+0x320>)
    6f4e:	1a9b      	subs	r3, r3, r2
    6f50:	08db      	lsrs	r3, r3, #3
	LOG_INF("%s mounted", log_strdup(mountp->mnt_point));
    6f52:	f04f 0800 	mov.w	r8, #0
    6f56:	2203      	movs	r2, #3
    6f58:	f362 0802 	bfi	r8, r2, #0, #3
    6f5c:	f36f 08c5 	bfc	r8, #3, #3
    6f60:	f363 188f 	bfi	r8, r3, #6, #10
    6f64:	68e8      	ldr	r0, [r5, #12]
    6f66:	f7fc f829 	bl	2fbc <z_log_strdup>
    6f6a:	4601      	mov	r1, r0
    6f6c:	4642      	mov	r2, r8
    6f6e:	4843      	ldr	r0, [pc, #268]	; (707c <littlefs_mount+0x34c>)
    6f70:	f7fc f99e 	bl	32b0 <log_1>
	if (ret < 0) {
    6f74:	2f00      	cmp	r7, #0
    6f76:	f6bf af4e 	bge.w	6e16 <littlefs_mount+0xe6>
    6f7a:	e749      	b.n	6e10 <littlefs_mount+0xe0>
    6f7c:	4b33      	ldr	r3, [pc, #204]	; (704c <littlefs_mount+0x31c>)
    6f7e:	4a34      	ldr	r2, [pc, #208]	; (7050 <littlefs_mount+0x320>)
    6f80:	1a9b      	subs	r3, r3, r2
    6f82:	08db      	lsrs	r3, r3, #3
		LOG_WRN("can't mount (LFS %d); formatting", ret);
    6f84:	f04f 0200 	mov.w	r2, #0
    6f88:	2102      	movs	r1, #2
    6f8a:	f361 0202 	bfi	r2, r1, #0, #3
    6f8e:	f36f 02c5 	bfc	r2, #3, #3
    6f92:	f363 128f 	bfi	r2, r3, #6, #10
    6f96:	4639      	mov	r1, r7
    6f98:	4839      	ldr	r0, [pc, #228]	; (7080 <littlefs_mount+0x350>)
    6f9a:	f7fc f989 	bl	32b0 <log_1>
		if ((mountp->flags & FS_MOUNT_FLAG_READ_ONLY) == 0) {
    6f9e:	f895 3020 	ldrb.w	r3, [r5, #32]
    6fa2:	f013 0f02 	tst.w	r3, #2
    6fa6:	d137      	bne.n	7018 <littlefs_mount+0x2e8>
			ret = lfs_format(&fs->lfs, &fs->cfg);
    6fa8:	4621      	mov	r1, r4
    6faa:	4640      	mov	r0, r8
    6fac:	f008 fa20 	bl	f3f0 <lfs_format>
			if (ret < 0) {
    6fb0:	1e07      	subs	r7, r0, #0
    6fb2:	db1b      	blt.n	6fec <littlefs_mount+0x2bc>
		ret = lfs_mount(&fs->lfs, &fs->cfg);
    6fb4:	4621      	mov	r1, r4
    6fb6:	4640      	mov	r0, r8
    6fb8:	f006 fca8 	bl	d90c <lfs_mount>
		if (ret < 0) {
    6fbc:	1e07      	subs	r7, r0, #0
    6fbe:	dac4      	bge.n	6f4a <littlefs_mount+0x21a>
    6fc0:	4b22      	ldr	r3, [pc, #136]	; (704c <littlefs_mount+0x31c>)
    6fc2:	4a23      	ldr	r2, [pc, #140]	; (7050 <littlefs_mount+0x320>)
    6fc4:	1a9b      	subs	r3, r3, r2
    6fc6:	08db      	lsrs	r3, r3, #3
			LOG_ERR("remount after format failed (LFS %d)", ret);
    6fc8:	f04f 0200 	mov.w	r2, #0
    6fcc:	2101      	movs	r1, #1
    6fce:	f361 0202 	bfi	r2, r1, #0, #3
    6fd2:	f36f 02c5 	bfc	r2, #3, #3
    6fd6:	f363 128f 	bfi	r2, r3, #6, #10
    6fda:	4639      	mov	r1, r7
    6fdc:	4829      	ldr	r0, [pc, #164]	; (7084 <littlefs_mount+0x354>)
    6fde:	f7fc f967 	bl	32b0 <log_1>
			ret = lfs_to_errno(ret);
    6fe2:	4638      	mov	r0, r7
    6fe4:	f00c f997 	bl	13316 <lfs_to_errno>
    6fe8:	4607      	mov	r7, r0
			goto out;
    6fea:	e7c3      	b.n	6f74 <littlefs_mount+0x244>
    6fec:	4b17      	ldr	r3, [pc, #92]	; (704c <littlefs_mount+0x31c>)
    6fee:	4a18      	ldr	r2, [pc, #96]	; (7050 <littlefs_mount+0x320>)
    6ff0:	1a9b      	subs	r3, r3, r2
    6ff2:	08db      	lsrs	r3, r3, #3
				LOG_ERR("format failed (LFS %d)", ret);
    6ff4:	f04f 0200 	mov.w	r2, #0
    6ff8:	2101      	movs	r1, #1
    6ffa:	f361 0202 	bfi	r2, r1, #0, #3
    6ffe:	f36f 02c5 	bfc	r2, #3, #3
    7002:	f363 128f 	bfi	r2, r3, #6, #10
    7006:	4639      	mov	r1, r7
    7008:	481f      	ldr	r0, [pc, #124]	; (7088 <littlefs_mount+0x358>)
    700a:	f7fc f951 	bl	32b0 <log_1>
				ret = lfs_to_errno(ret);
    700e:	4638      	mov	r0, r7
    7010:	f00c f981 	bl	13316 <lfs_to_errno>
    7014:	4607      	mov	r7, r0
				goto out;
    7016:	e7ad      	b.n	6f74 <littlefs_mount+0x244>
    7018:	4b0c      	ldr	r3, [pc, #48]	; (704c <littlefs_mount+0x31c>)
    701a:	4a0d      	ldr	r2, [pc, #52]	; (7050 <littlefs_mount+0x320>)
    701c:	1a9b      	subs	r3, r3, r2
    701e:	08db      	lsrs	r3, r3, #3
			LOG_ERR("can not format read-only system");
    7020:	f04f 0100 	mov.w	r1, #0
    7024:	2201      	movs	r2, #1
    7026:	f362 0102 	bfi	r1, r2, #0, #3
    702a:	f36f 01c5 	bfc	r1, #3, #3
    702e:	f363 118f 	bfi	r1, r3, #6, #10
    7032:	4816      	ldr	r0, [pc, #88]	; (708c <littlefs_mount+0x35c>)
    7034:	f7fc f9d0 	bl	33d8 <log_0>
			ret = -EROFS;
    7038:	f06f 071d 	mvn.w	r7, #29
    703c:	e6e8      	b.n	6e10 <littlefs_mount+0xe0>
		ret = -EINVAL;
    703e:	f06f 0715 	mvn.w	r7, #21
    7042:	e6e5      	b.n	6e10 <littlefs_mount+0xe0>
		return -EBUSY;
    7044:	f06f 070f 	mvn.w	r7, #15
    7048:	e6e8      	b.n	6e1c <littlefs_mount+0xec>
    704a:	bf00      	nop
    704c:	00016600 	.word	0x00016600
    7050:	000165d8 	.word	0x000165d8
    7054:	00016704 	.word	0x00016704
    7058:	00017534 	.word	0x00017534
    705c:	00017560 	.word	0x00017560
    7060:	0001757c 	.word	0x0001757c
    7064:	00017598 	.word	0x00017598
    7068:	000175cc 	.word	0x000175cc
    706c:	000134a5 	.word	0x000134a5
    7070:	0001348b 	.word	0x0001348b
    7074:	00013477 	.word	0x00013477
    7078:	000133f5 	.word	0x000133f5
    707c:	00017678 	.word	0x00017678
    7080:	000175f4 	.word	0x000175f4
    7084:	00017650 	.word	0x00017650
    7088:	00017618 	.word	0x00017618
    708c:	00017630 	.word	0x00017630

00007090 <release_file_data>:
{
    7090:	b510      	push	{r4, lr}
    7092:	4604      	mov	r4, r0
	struct lfs_file_data *fdp = fp->filep;
    7094:	6803      	ldr	r3, [r0, #0]
	if (fdp->config.buffer) {
    7096:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    7098:	b11a      	cbz	r2, 70a2 <release_file_data+0x12>
	k_heap_free(&file_cache_heap, buf);
    709a:	6e19      	ldr	r1, [r3, #96]	; 0x60
    709c:	4804      	ldr	r0, [pc, #16]	; (70b0 <release_file_data+0x20>)
    709e:	f00e fcd2 	bl	15a46 <k_heap_free>
	k_mem_slab_free(&file_data_pool, &fp->filep);
    70a2:	4621      	mov	r1, r4
    70a4:	4803      	ldr	r0, [pc, #12]	; (70b4 <release_file_data+0x24>)
    70a6:	f00e fd10 	bl	15aca <k_mem_slab_free>
	fp->filep = NULL;
    70aa:	2300      	movs	r3, #0
    70ac:	6023      	str	r3, [r4, #0]
}
    70ae:	bd10      	pop	{r4, pc}
    70b0:	200003b4 	.word	0x200003b4
    70b4:	20000368 	.word	0x20000368

000070b8 <littlefs_closedir>:
{
    70b8:	b570      	push	{r4, r5, r6, lr}
    70ba:	4604      	mov	r4, r0
	struct fs_littlefs *fs = dp->mp->fs_data;
    70bc:	6843      	ldr	r3, [r0, #4]
    70be:	691d      	ldr	r5, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
    70c0:	f105 06ec 	add.w	r6, r5, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
    70c4:	f04f 32ff 	mov.w	r2, #4294967295
    70c8:	f04f 33ff 	mov.w	r3, #4294967295
    70cc:	4630      	mov	r0, r6
    70ce:	f008 fe35 	bl	fd3c <z_impl_k_mutex_lock>
	int ret = lfs_dir_close(&fs->lfs, dp->dirp);
    70d2:	6821      	ldr	r1, [r4, #0]
    70d4:	f105 0070 	add.w	r0, r5, #112	; 0x70
    70d8:	f00e f8be 	bl	15258 <lfs_dir_close>
    70dc:	4605      	mov	r5, r0
	return z_impl_k_mutex_unlock(mutex);
    70de:	4630      	mov	r0, r6
    70e0:	f008 feb6 	bl	fe50 <z_impl_k_mutex_unlock>
	k_mem_slab_free(&lfs_dir_pool, &dp->dirp);
    70e4:	4621      	mov	r1, r4
    70e6:	4803      	ldr	r0, [pc, #12]	; (70f4 <littlefs_closedir+0x3c>)
    70e8:	f00e fcef 	bl	15aca <k_mem_slab_free>
	return lfs_to_errno(ret);
    70ec:	4628      	mov	r0, r5
    70ee:	f00c f912 	bl	13316 <lfs_to_errno>
}
    70f2:	bd70      	pop	{r4, r5, r6, pc}
    70f4:	20000384 	.word	0x20000384

000070f8 <littlefs_unmount>:
{
    70f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    70fa:	4605      	mov	r5, r0
	struct fs_littlefs *fs = mountp->fs_data;
    70fc:	6904      	ldr	r4, [r0, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
    70fe:	f104 07ec 	add.w	r7, r4, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
    7102:	f04f 32ff 	mov.w	r2, #4294967295
    7106:	f04f 33ff 	mov.w	r3, #4294967295
    710a:	4638      	mov	r0, r7
    710c:	f008 fe16 	bl	fd3c <z_impl_k_mutex_lock>
	lfs_unmount(&fs->lfs);
    7110:	f104 0070 	add.w	r0, r4, #112	; 0x70
    7114:	f00e f8ce 	bl	152b4 <lfs_unmount>
	flash_area_close(fs->area);
    7118:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
    711c:	f00b fee0 	bl	12ee0 <flash_area_close>
	fs->area = NULL;
    7120:	2600      	movs	r6, #0
    7122:	f8c4 60e8 	str.w	r6, [r4, #232]	; 0xe8
	return z_impl_k_mutex_unlock(mutex);
    7126:	4638      	mov	r0, r7
    7128:	f008 fe92 	bl	fe50 <z_impl_k_mutex_unlock>
    712c:	4b0b      	ldr	r3, [pc, #44]	; (715c <littlefs_unmount+0x64>)
    712e:	4a0c      	ldr	r2, [pc, #48]	; (7160 <littlefs_unmount+0x68>)
    7130:	1a9b      	subs	r3, r3, r2
    7132:	08db      	lsrs	r3, r3, #3
	LOG_INF("%s unmounted", log_strdup(mountp->mnt_point));
    7134:	f04f 0400 	mov.w	r4, #0
    7138:	2203      	movs	r2, #3
    713a:	f362 0402 	bfi	r4, r2, #0, #3
    713e:	f366 04c5 	bfi	r4, r6, #3, #3
    7142:	f363 148f 	bfi	r4, r3, #6, #10
    7146:	68e8      	ldr	r0, [r5, #12]
    7148:	f7fb ff38 	bl	2fbc <z_log_strdup>
    714c:	4601      	mov	r1, r0
    714e:	4622      	mov	r2, r4
    7150:	4804      	ldr	r0, [pc, #16]	; (7164 <littlefs_unmount+0x6c>)
    7152:	f7fc f8ad 	bl	32b0 <log_1>
}
    7156:	4630      	mov	r0, r6
    7158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    715a:	bf00      	nop
    715c:	00016600 	.word	0x00016600
    7160:	000165d8 	.word	0x000165d8
    7164:	00017684 	.word	0x00017684

00007168 <littlefs_opendir>:
{
    7168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    716a:	4604      	mov	r4, r0
    716c:	460d      	mov	r5, r1
	struct fs_littlefs *fs = dp->mp->fs_data;
    716e:	6843      	ldr	r3, [r0, #4]
    7170:	691e      	ldr	r6, [r3, #16]
	if (k_mem_slab_alloc(&lfs_dir_pool, &dp->dirp, K_NO_WAIT) != 0) {
    7172:	2200      	movs	r2, #0
    7174:	2300      	movs	r3, #0
    7176:	4601      	mov	r1, r0
    7178:	4817      	ldr	r0, [pc, #92]	; (71d8 <littlefs_opendir+0x70>)
    717a:	f008 fca5 	bl	fac8 <k_mem_slab_alloc>
    717e:	bb10      	cbnz	r0, 71c6 <littlefs_opendir+0x5e>
	memset(dp->dirp, 0, sizeof(struct lfs_dir));
    7180:	2234      	movs	r2, #52	; 0x34
    7182:	2100      	movs	r1, #0
    7184:	6820      	ldr	r0, [r4, #0]
    7186:	f00c f857 	bl	13238 <memset>
	path = fs_impl_strip_prefix(path, dp->mp);
    718a:	6861      	ldr	r1, [r4, #4]
    718c:	4628      	mov	r0, r5
    718e:	f7ff fda7 	bl	6ce0 <fs_impl_strip_prefix>
    7192:	4605      	mov	r5, r0
	k_mutex_lock(&fs->mutex, K_FOREVER);
    7194:	f106 07ec 	add.w	r7, r6, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
    7198:	f04f 32ff 	mov.w	r2, #4294967295
    719c:	f04f 33ff 	mov.w	r3, #4294967295
    71a0:	4638      	mov	r0, r7
    71a2:	f008 fdcb 	bl	fd3c <z_impl_k_mutex_lock>
	int ret = lfs_dir_open(&fs->lfs, dp->dirp, path);
    71a6:	462a      	mov	r2, r5
    71a8:	6821      	ldr	r1, [r4, #0]
    71aa:	f106 0070 	add.w	r0, r6, #112	; 0x70
    71ae:	f006 fb11 	bl	d7d4 <lfs_dir_open>
    71b2:	4605      	mov	r5, r0
	return z_impl_k_mutex_unlock(mutex);
    71b4:	4638      	mov	r0, r7
    71b6:	f008 fe4b 	bl	fe50 <z_impl_k_mutex_unlock>
	if (ret < 0) {
    71ba:	2d00      	cmp	r5, #0
    71bc:	db06      	blt.n	71cc <littlefs_opendir+0x64>
	return lfs_to_errno(ret);
    71be:	4628      	mov	r0, r5
    71c0:	f00c f8a9 	bl	13316 <lfs_to_errno>
}
    71c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOMEM;
    71c6:	f06f 000b 	mvn.w	r0, #11
    71ca:	e7fb      	b.n	71c4 <littlefs_opendir+0x5c>
		k_mem_slab_free(&lfs_dir_pool, &dp->dirp);
    71cc:	4621      	mov	r1, r4
    71ce:	4802      	ldr	r0, [pc, #8]	; (71d8 <littlefs_opendir+0x70>)
    71d0:	f00e fc7b 	bl	15aca <k_mem_slab_free>
    71d4:	e7f3      	b.n	71be <littlefs_opendir+0x56>
    71d6:	bf00      	nop
    71d8:	20000384 	.word	0x20000384

000071dc <littlefs_open>:
{
    71dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    71e0:	b082      	sub	sp, #8
    71e2:	4604      	mov	r4, r0
    71e4:	460e      	mov	r6, r1
	struct fs_littlefs *fs = fp->mp->fs_data;
    71e6:	6843      	ldr	r3, [r0, #4]
    71e8:	691f      	ldr	r7, [r3, #16]
	int flags = lfs_flags_from_zephyr(zflags);
    71ea:	4610      	mov	r0, r2
    71ec:	f00c f904 	bl	133f8 <lfs_flags_from_zephyr>
    71f0:	4605      	mov	r5, r0
	int ret = k_mem_slab_alloc(&file_data_pool, &fp->filep, K_NO_WAIT);
    71f2:	2200      	movs	r2, #0
    71f4:	2300      	movs	r3, #0
    71f6:	4621      	mov	r1, r4
    71f8:	4822      	ldr	r0, [pc, #136]	; (7284 <littlefs_open+0xa8>)
    71fa:	f008 fc65 	bl	fac8 <k_mem_slab_alloc>
	if (ret != 0) {
    71fe:	4603      	mov	r3, r0
    7200:	b118      	cbz	r0, 720a <littlefs_open+0x2e>
}
    7202:	4618      	mov	r0, r3
    7204:	b002      	add	sp, #8
    7206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct lfs_file_data *fdp = fp->filep;
    720a:	f8d4 8000 	ldr.w	r8, [r4]
	memset(fdp, 0, sizeof(*fdp));
    720e:	2264      	movs	r2, #100	; 0x64
    7210:	2100      	movs	r1, #0
    7212:	4640      	mov	r0, r8
    7214:	f00c f810 	bl	13238 <memset>
	fdp->cache_block = fc_allocate(lfs->cfg->cache_size);
    7218:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
	ret = k_heap_alloc(&file_cache_heap, size, K_NO_WAIT);
    721c:	2200      	movs	r2, #0
    721e:	2300      	movs	r3, #0
    7220:	6a89      	ldr	r1, [r1, #40]	; 0x28
    7222:	4819      	ldr	r0, [pc, #100]	; (7288 <littlefs_open+0xac>)
    7224:	f00e fc04 	bl	15a30 <k_heap_alloc>
	fdp->cache_block = fc_allocate(lfs->cfg->cache_size);
    7228:	f8c8 0060 	str.w	r0, [r8, #96]	; 0x60
	if (fdp->cache_block == NULL) {
    722c:	b300      	cbz	r0, 7270 <littlefs_open+0x94>
	fdp->config.buffer = fdp->cache_block;
    722e:	46c1      	mov	r9, r8
    7230:	f849 0f54 	str.w	r0, [r9, #84]!
	path = fs_impl_strip_prefix(path, fp->mp);
    7234:	6861      	ldr	r1, [r4, #4]
    7236:	4630      	mov	r0, r6
    7238:	f7ff fd52 	bl	6ce0 <fs_impl_strip_prefix>
    723c:	4682      	mov	sl, r0
	k_mutex_lock(&fs->mutex, K_FOREVER);
    723e:	f107 06ec 	add.w	r6, r7, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
    7242:	f04f 32ff 	mov.w	r2, #4294967295
    7246:	f04f 33ff 	mov.w	r3, #4294967295
    724a:	4630      	mov	r0, r6
    724c:	f008 fd76 	bl	fd3c <z_impl_k_mutex_lock>
	ret = lfs_file_opencfg(&fs->lfs, &fdp->file,
    7250:	f8cd 9000 	str.w	r9, [sp]
    7254:	462b      	mov	r3, r5
    7256:	4652      	mov	r2, sl
    7258:	4641      	mov	r1, r8
    725a:	f107 0070 	add.w	r0, r7, #112	; 0x70
    725e:	f007 fddb 	bl	ee18 <lfs_file_opencfg>
    7262:	4605      	mov	r5, r0
	return z_impl_k_mutex_unlock(mutex);
    7264:	4630      	mov	r0, r6
    7266:	f008 fdf3 	bl	fe50 <z_impl_k_mutex_unlock>
	if (ret < 0) {
    726a:	2d00      	cmp	r5, #0
    726c:	da05      	bge.n	727a <littlefs_open+0x9e>
    726e:	e001      	b.n	7274 <littlefs_open+0x98>
		ret = -ENOMEM;
    7270:	f06f 050b 	mvn.w	r5, #11
		release_file_data(fp);
    7274:	4620      	mov	r0, r4
    7276:	f7ff ff0b 	bl	7090 <release_file_data>
	return lfs_to_errno(ret);
    727a:	4628      	mov	r0, r5
    727c:	f00c f84b 	bl	13316 <lfs_to_errno>
    7280:	4603      	mov	r3, r0
    7282:	e7be      	b.n	7202 <littlefs_open+0x26>
    7284:	20000368 	.word	0x20000368
    7288:	200003b4 	.word	0x200003b4

0000728c <endpoint_ctx>:
	return (uint8_t)ep;
}

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);
    728c:	f000 037f 	and.w	r3, r0, #127	; 0x7f

	if (NRF_USBD_EPIN_CHECK(ep)) {
    7290:	b242      	sxtb	r2, r0
    7292:	2a00      	cmp	r2, #0
    7294:	db12      	blt.n	72bc <endpoint_ctx+0x30>
			if (ep_num >= CFG_EPIN_CNT) {
				return false;
			}
		}
	} else {
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    7296:	2b08      	cmp	r3, #8
    7298:	d002      	beq.n	72a0 <endpoint_ctx+0x14>
			if (CFG_EP_ISOOUT_CNT == 0) {
				return false;
			}
		} else {
			if (ep_num >= CFG_EPOUT_CNT) {
    729a:	f010 0f78 	tst.w	r0, #120	; 0x78
    729e:	d11d      	bne.n	72dc <endpoint_ctx+0x50>
	if (!ep_is_valid(ep)) {
		return NULL;
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);
    72a0:	f000 030f 	and.w	r3, r0, #15

	if (NRF_USBD_EPIN_CHECK(ep)) {
    72a4:	2a00      	cmp	r2, #0
    72a6:	db10      	blt.n	72ca <endpoint_ctx+0x3e>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    72a8:	f010 0f08 	tst.w	r0, #8
    72ac:	d11a      	bne.n	72e4 <endpoint_ctx+0x58>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
					    CFG_EP_ISOIN_CNT +
    72ae:	3309      	adds	r3, #9
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    72b0:	015b      	lsls	r3, r3, #5
    72b2:	3348      	adds	r3, #72	; 0x48
    72b4:	480c      	ldr	r0, [pc, #48]	; (72e8 <endpoint_ctx+0x5c>)
    72b6:	4403      	add	r3, r0
    72b8:	1d18      	adds	r0, r3, #4
    72ba:	4770      	bx	lr
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    72bc:	2b08      	cmp	r3, #8
    72be:	d0ef      	beq.n	72a0 <endpoint_ctx+0x14>
			if (ep_num >= CFG_EPIN_CNT) {
    72c0:	f010 0f78 	tst.w	r0, #120	; 0x78
    72c4:	d0ec      	beq.n	72a0 <endpoint_ctx+0x14>
		return NULL;
    72c6:	2000      	movs	r0, #0
    72c8:	4770      	bx	lr
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    72ca:	f010 0f08 	tst.w	r0, #8
    72ce:	d107      	bne.n	72e0 <endpoint_ctx+0x54>
			return &ctx->ep_ctx[ep_num];
    72d0:	015b      	lsls	r3, r3, #5
    72d2:	3348      	adds	r3, #72	; 0x48
    72d4:	4804      	ldr	r0, [pc, #16]	; (72e8 <endpoint_ctx+0x5c>)
    72d6:	4403      	add	r3, r0
    72d8:	1d18      	adds	r0, r3, #4
    72da:	4770      	bx	lr
		return NULL;
    72dc:	2000      	movs	r0, #0
    72de:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    72e0:	4802      	ldr	r0, [pc, #8]	; (72ec <endpoint_ctx+0x60>)
    72e2:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    72e4:	4802      	ldr	r0, [pc, #8]	; (72f0 <endpoint_ctx+0x64>)
					    ep_num];
		}
	}

	return NULL;
}
    72e6:	4770      	bx	lr
    72e8:	20002438 	.word	0x20002438
    72ec:	20002584 	.word	0x20002584
    72f0:	200026a4 	.word	0x200026a4

000072f4 <eps_ctx_init>:
 * Endpoint buffers are allocated during the first call of this function.
 * This function may also be called again on every USB reset event
 * to reinitialize the state of all endpoints.
 */
static int eps_ctx_init(void)
{
    72f4:	b510      	push	{r4, lr}
	struct nrf_usbd_ep_ctx *ep_ctx;
	uint32_t i;

	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    72f6:	2400      	movs	r4, #0
    72f8:	e005      	b.n	7306 <eps_ctx_init+0x12>
		ep_ctx = in_endpoint_ctx(i);
    72fa:	b2e0      	uxtb	r0, r4
    72fc:	f00c fa93 	bl	13826 <in_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);
		ep_ctx_reset(ep_ctx);
    7300:	f00c fa9b 	bl	1383a <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    7304:	3401      	adds	r4, #1
    7306:	2c07      	cmp	r4, #7
    7308:	d9f7      	bls.n	72fa <eps_ctx_init+0x6>
	}

	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    730a:	2400      	movs	r4, #0
    730c:	e006      	b.n	731c <eps_ctx_init+0x28>
		ep_ctx = out_endpoint_ctx(i);
		__ASSERT_NO_MSG(ep_ctx);

		if (!ep_ctx->buf.block.data) {
			ep_ctx->buf.block.data = ep_out_bufs[i];
    730e:	4b10      	ldr	r3, [pc, #64]	; (7350 <eps_ctx_init+0x5c>)
    7310:	eb03 1384 	add.w	r3, r3, r4, lsl #6
    7314:	6103      	str	r3, [r0, #16]
		}

		ep_ctx_reset(ep_ctx);
    7316:	f00c fa90 	bl	1383a <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    731a:	3401      	adds	r4, #1
    731c:	2c07      	cmp	r4, #7
    731e:	d806      	bhi.n	732e <eps_ctx_init+0x3a>
		ep_ctx = out_endpoint_ctx(i);
    7320:	b2e0      	uxtb	r0, r4
    7322:	f00c fa86 	bl	13832 <out_endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    7326:	6903      	ldr	r3, [r0, #16]
    7328:	2b00      	cmp	r3, #0
    732a:	d1f4      	bne.n	7316 <eps_ctx_init+0x22>
    732c:	e7ef      	b.n	730e <eps_ctx_init+0x1a>
	}

	if (CFG_EP_ISOIN_CNT) {
		ep_ctx = in_endpoint_ctx(NRF_USBD_EPIN(8));
    732e:	2088      	movs	r0, #136	; 0x88
    7330:	f00c fa79 	bl	13826 <in_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);
		ep_ctx_reset(ep_ctx);
    7334:	f00c fa81 	bl	1383a <ep_ctx_reset>
	}

	if (CFG_EP_ISOOUT_CNT) {
		BUILD_ASSERT(CFG_EP_ISOOUT_CNT <= 1);

		ep_ctx = out_endpoint_ctx(NRF_USBD_EPOUT(8));
    7338:	2008      	movs	r0, #8
    733a:	f00c fa7a 	bl	13832 <out_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);

		if (!ep_ctx->buf.block.data) {
    733e:	6903      	ldr	r3, [r0, #16]
    7340:	b11b      	cbz	r3, 734a <eps_ctx_init+0x56>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
		}

		ep_ctx_reset(ep_ctx);
    7342:	f00c fa7a 	bl	1383a <ep_ctx_reset>
	}

	return 0;
}
    7346:	2000      	movs	r0, #0
    7348:	bd10      	pop	{r4, pc}
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
    734a:	4b02      	ldr	r3, [pc, #8]	; (7354 <eps_ctx_init+0x60>)
    734c:	6103      	str	r3, [r0, #16]
    734e:	e7f8      	b.n	7342 <eps_ctx_init+0x4e>
    7350:	20002238 	.word	0x20002238
    7354:	20001e38 	.word	0x20001e38

00007358 <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
    7358:	b510      	push	{r4, lr}
    735a:	b082      	sub	sp, #8
	};

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
    735c:	480b      	ldr	r0, [pc, #44]	; (738c <usb_init+0x34>)
    735e:	f003 f9f1 	bl	a744 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);
    7362:	480b      	ldr	r0, [pc, #44]	; (7390 <usb_init+0x38>)
    7364:	f003 fa32 	bl	a7cc <nrfx_power_usbevt_init>

	k_work_queue_start(&usbd_work_queue,
    7368:	2400      	movs	r4, #0
    736a:	9400      	str	r4, [sp, #0]
    736c:	f04f 33ff 	mov.w	r3, #4294967295
    7370:	f44f 6280 	mov.w	r2, #1024	; 0x400
    7374:	4907      	ldr	r1, [pc, #28]	; (7394 <usb_init+0x3c>)
    7376:	4808      	ldr	r0, [pc, #32]	; (7398 <usb_init+0x40>)
    7378:	f008 ff58 	bl	1022c <k_work_queue_start>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_work_init(&ctx->usb_work, usbd_work_handler);
    737c:	4907      	ldr	r1, [pc, #28]	; (739c <usb_init+0x44>)
    737e:	4808      	ldr	r0, [pc, #32]	; (73a0 <usb_init+0x48>)
    7380:	f00e fce1 	bl	15d46 <k_work_init>

	return 0;
}
    7384:	4620      	mov	r0, r4
    7386:	b002      	add	sp, #8
    7388:	bd10      	pop	{r4, pc}
    738a:	bf00      	nop
    738c:	00017908 	.word	0x00017908
    7390:	0001790c 	.word	0x0001790c
    7394:	200038e0 	.word	0x200038e0
    7398:	20000738 	.word	0x20000738
    739c:	00007619 	.word	0x00007619
    73a0:	20002460 	.word	0x20002460

000073a4 <submit_dc_power_event>:
{
    73a4:	b530      	push	{r4, r5, lr}
    73a6:	b083      	sub	sp, #12
    73a8:	4605      	mov	r5, r0
	if (k_mem_slab_alloc(&fifo_elem_slab,
    73aa:	2200      	movs	r2, #0
    73ac:	2300      	movs	r3, #0
    73ae:	a901      	add	r1, sp, #4
    73b0:	482e      	ldr	r0, [pc, #184]	; (746c <submit_dc_power_event+0xc8>)
    73b2:	f008 fb89 	bl	fac8 <k_mem_slab_alloc>
    73b6:	b980      	cbnz	r0, 73da <submit_dc_power_event+0x36>
	ev = (struct usbd_event *)block.data;
    73b8:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    73ba:	6064      	str	r4, [r4, #4]
	if (!ev) {
    73bc:	b15c      	cbz	r4, 73d6 <submit_dc_power_event+0x32>
	ev->evt_type = USBD_EVT_POWER;
    73be:	2300      	movs	r3, #0
    73c0:	7423      	strb	r3, [r4, #16]
	ev->evt.pwr_evt.state = state;
    73c2:	7225      	strb	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    73c4:	4621      	mov	r1, r4
    73c6:	482a      	ldr	r0, [pc, #168]	; (7470 <submit_dc_power_event+0xcc>)
    73c8:	f00e fca2 	bl	15d10 <k_queue_append>
	if (usbd_ctx.attached) {
    73cc:	4b29      	ldr	r3, [pc, #164]	; (7474 <submit_dc_power_event+0xd0>)
    73ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    73d2:	2b00      	cmp	r3, #0
    73d4:	d144      	bne.n	7460 <submit_dc_power_event+0xbc>
}
    73d6:	b003      	add	sp, #12
    73d8:	bd30      	pop	{r4, r5, pc}
    73da:	4b27      	ldr	r3, [pc, #156]	; (7478 <submit_dc_power_event+0xd4>)
    73dc:	4a27      	ldr	r2, [pc, #156]	; (747c <submit_dc_power_event+0xd8>)
    73de:	1a9b      	subs	r3, r3, r2
    73e0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    73e2:	f04f 0100 	mov.w	r1, #0
    73e6:	2201      	movs	r2, #1
    73e8:	f362 0102 	bfi	r1, r2, #0, #3
    73ec:	f36f 01c5 	bfc	r1, #3, #3
    73f0:	f363 118f 	bfi	r1, r3, #6, #10
    73f4:	4822      	ldr	r0, [pc, #136]	; (7480 <submit_dc_power_event+0xdc>)
    73f6:	f7fb ffef 	bl	33d8 <log_0>
static inline void usbd_evt_flush(void)
    73fa:	e004      	b.n	7406 <submit_dc_power_event+0x62>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    73fc:	1d01      	adds	r1, r0, #4
    73fe:	481b      	ldr	r0, [pc, #108]	; (746c <submit_dc_power_event+0xc8>)
    7400:	f00e fb63 	bl	15aca <k_mem_slab_free>
	} while (ev != NULL);
    7404:	b144      	cbz	r4, 7418 <submit_dc_power_event+0x74>
	return z_impl_k_queue_get(queue, timeout);
    7406:	2200      	movs	r2, #0
    7408:	2300      	movs	r3, #0
    740a:	4819      	ldr	r0, [pc, #100]	; (7470 <submit_dc_power_event+0xcc>)
    740c:	f008 fd64 	bl	fed8 <z_impl_k_queue_get>
		if (ev) {
    7410:	4604      	mov	r4, r0
    7412:	2800      	cmp	r0, #0
    7414:	d1f2      	bne.n	73fc <submit_dc_power_event+0x58>
    7416:	e7f5      	b.n	7404 <submit_dc_power_event+0x60>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    7418:	2200      	movs	r2, #0
    741a:	2300      	movs	r3, #0
    741c:	a901      	add	r1, sp, #4
    741e:	4813      	ldr	r0, [pc, #76]	; (746c <submit_dc_power_event+0xc8>)
    7420:	f008 fb52 	bl	fac8 <k_mem_slab_alloc>
    7424:	b180      	cbz	r0, 7448 <submit_dc_power_event+0xa4>
    7426:	4b14      	ldr	r3, [pc, #80]	; (7478 <submit_dc_power_event+0xd4>)
    7428:	4a14      	ldr	r2, [pc, #80]	; (747c <submit_dc_power_event+0xd8>)
    742a:	1a9b      	subs	r3, r3, r2
    742c:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    742e:	f04f 0100 	mov.w	r1, #0
    7432:	2201      	movs	r2, #1
    7434:	f362 0102 	bfi	r1, r2, #0, #3
    7438:	f36f 01c5 	bfc	r1, #3, #3
    743c:	f363 118f 	bfi	r1, r3, #6, #10
    7440:	4810      	ldr	r0, [pc, #64]	; (7484 <submit_dc_power_event+0xe0>)
    7442:	f7fb ffc9 	bl	33d8 <log_0>
			return NULL;
    7446:	e7b9      	b.n	73bc <submit_dc_power_event+0x18>
		ev = (struct usbd_event *)block.data;
    7448:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    744a:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    744c:	2304      	movs	r3, #4
    744e:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    7450:	4807      	ldr	r0, [pc, #28]	; (7470 <submit_dc_power_event+0xcc>)
    7452:	f00e fc5d 	bl	15d10 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    7456:	490c      	ldr	r1, [pc, #48]	; (7488 <submit_dc_power_event+0xe4>)
    7458:	480c      	ldr	r0, [pc, #48]	; (748c <submit_dc_power_event+0xe8>)
    745a:	f00e fc7a 	bl	15d52 <k_work_submit_to_queue>
		return NULL;
    745e:	e7ad      	b.n	73bc <submit_dc_power_event+0x18>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    7460:	4909      	ldr	r1, [pc, #36]	; (7488 <submit_dc_power_event+0xe4>)
    7462:	480a      	ldr	r0, [pc, #40]	; (748c <submit_dc_power_event+0xe8>)
    7464:	f00e fc75 	bl	15d52 <k_work_submit_to_queue>
}
    7468:	e7b5      	b.n	73d6 <submit_dc_power_event+0x32>
    746a:	bf00      	nop
    746c:	2000034c 	.word	0x2000034c
    7470:	20000450 	.word	0x20000450
    7474:	20002438 	.word	0x20002438
    7478:	00016650 	.word	0x00016650
    747c:	000165d8 	.word	0x000165d8
    7480:	000176e8 	.word	0x000176e8
    7484:	00017708 	.word	0x00017708
    7488:	20002460 	.word	0x20002460
    748c:	20000738 	.word	0x20000738

00007490 <usb_dc_power_event_handler>:
{
    7490:	b508      	push	{r3, lr}
	switch (event) {
    7492:	2801      	cmp	r0, #1
    7494:	d014      	beq.n	74c0 <usb_dc_power_event_handler+0x30>
    7496:	2802      	cmp	r0, #2
    7498:	d015      	beq.n	74c6 <usb_dc_power_event_handler+0x36>
    749a:	b198      	cbz	r0, 74c4 <usb_dc_power_event_handler+0x34>
    749c:	4b0b      	ldr	r3, [pc, #44]	; (74cc <usb_dc_power_event_handler+0x3c>)
    749e:	4a0c      	ldr	r2, [pc, #48]	; (74d0 <usb_dc_power_event_handler+0x40>)
    74a0:	1a9b      	subs	r3, r3, r2
    74a2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unknown USB power event %d", event);
    74a4:	f04f 0200 	mov.w	r2, #0
    74a8:	2101      	movs	r1, #1
    74aa:	f361 0202 	bfi	r2, r1, #0, #3
    74ae:	f36f 02c5 	bfc	r2, #3, #3
    74b2:	f363 128f 	bfi	r2, r3, #6, #10
    74b6:	4601      	mov	r1, r0
    74b8:	4806      	ldr	r0, [pc, #24]	; (74d4 <usb_dc_power_event_handler+0x44>)
    74ba:	f7fb fef9 	bl	32b0 <log_1>
    74be:	e004      	b.n	74ca <usb_dc_power_event_handler+0x3a>
		new_state = USBD_DETACHED;
    74c0:	2000      	movs	r0, #0
    74c2:	e000      	b.n	74c6 <usb_dc_power_event_handler+0x36>
	switch (event) {
    74c4:	2001      	movs	r0, #1
	submit_dc_power_event(new_state);
    74c6:	f7ff ff6d 	bl	73a4 <submit_dc_power_event>
}
    74ca:	bd08      	pop	{r3, pc}
    74cc:	00016650 	.word	0x00016650
    74d0:	000165d8 	.word	0x000165d8
    74d4:	00017724 	.word	0x00017724

000074d8 <usbd_sof_trigger_iso_read>:
{
    74d8:	b530      	push	{r4, r5, lr}
    74da:	b083      	sub	sp, #12
	ep_ctx = endpoint_ctx(NRFX_USBD_EPOUT8);
    74dc:	2008      	movs	r0, #8
    74de:	f7ff fed5 	bl	728c <endpoint_ctx>
	if (!ep_ctx) {
    74e2:	b120      	cbz	r0, 74ee <usbd_sof_trigger_iso_read+0x16>
    74e4:	4605      	mov	r5, r0
	if (ep_ctx->cfg.en) {
    74e6:	7a03      	ldrb	r3, [r0, #8]
    74e8:	b993      	cbnz	r3, 7510 <usbd_sof_trigger_iso_read+0x38>
}
    74ea:	b003      	add	sp, #12
    74ec:	bd30      	pop	{r4, r5, pc}
    74ee:	4b40      	ldr	r3, [pc, #256]	; (75f0 <usbd_sof_trigger_iso_read+0x118>)
    74f0:	4a40      	ldr	r2, [pc, #256]	; (75f4 <usbd_sof_trigger_iso_read+0x11c>)
    74f2:	1a9b      	subs	r3, r3, r2
    74f4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("There is no ISO ep");
    74f6:	f04f 0100 	mov.w	r1, #0
    74fa:	2201      	movs	r2, #1
    74fc:	f362 0102 	bfi	r1, r2, #0, #3
    7500:	f36f 01c5 	bfc	r1, #3, #3
    7504:	f363 118f 	bfi	r1, r3, #6, #10
    7508:	483b      	ldr	r0, [pc, #236]	; (75f8 <usbd_sof_trigger_iso_read+0x120>)
    750a:	f7fb ff65 	bl	33d8 <log_0>
		return;
    750e:	e7ec      	b.n	74ea <usbd_sof_trigger_iso_read+0x12>
		ep_ctx->read_pending = true;
    7510:	2301      	movs	r3, #1
    7512:	7743      	strb	r3, [r0, #29]
		ep_ctx->read_complete = true;
    7514:	7703      	strb	r3, [r0, #28]
	if (k_mem_slab_alloc(&fifo_elem_slab,
    7516:	2200      	movs	r2, #0
    7518:	2300      	movs	r3, #0
    751a:	a901      	add	r1, sp, #4
    751c:	4837      	ldr	r0, [pc, #220]	; (75fc <usbd_sof_trigger_iso_read+0x124>)
    751e:	f008 fad3 	bl	fac8 <k_mem_slab_alloc>
    7522:	b980      	cbnz	r0, 7546 <usbd_sof_trigger_iso_read+0x6e>
	ev = (struct usbd_event *)block.data;
    7524:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    7526:	6064      	str	r4, [r4, #4]
		if (!ev) {
    7528:	2c00      	cmp	r4, #0
    752a:	d04f      	beq.n	75cc <usbd_sof_trigger_iso_read+0xf4>
		ev->evt_type = USBD_EVT_EP;
    752c:	2301      	movs	r3, #1
    752e:	7423      	strb	r3, [r4, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    7530:	7323      	strb	r3, [r4, #12]
		ev->evt.ep_evt.ep = ep_ctx;
    7532:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    7534:	4621      	mov	r1, r4
    7536:	4832      	ldr	r0, [pc, #200]	; (7600 <usbd_sof_trigger_iso_read+0x128>)
    7538:	f00e fbea 	bl	15d10 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    753c:	4931      	ldr	r1, [pc, #196]	; (7604 <usbd_sof_trigger_iso_read+0x12c>)
    753e:	4832      	ldr	r0, [pc, #200]	; (7608 <usbd_sof_trigger_iso_read+0x130>)
    7540:	f00e fc07 	bl	15d52 <k_work_submit_to_queue>
}
    7544:	e7d1      	b.n	74ea <usbd_sof_trigger_iso_read+0x12>
    7546:	4b2a      	ldr	r3, [pc, #168]	; (75f0 <usbd_sof_trigger_iso_read+0x118>)
    7548:	4a2a      	ldr	r2, [pc, #168]	; (75f4 <usbd_sof_trigger_iso_read+0x11c>)
    754a:	1a9b      	subs	r3, r3, r2
    754c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    754e:	f04f 0100 	mov.w	r1, #0
    7552:	2201      	movs	r2, #1
    7554:	f362 0102 	bfi	r1, r2, #0, #3
    7558:	f36f 01c5 	bfc	r1, #3, #3
    755c:	f363 118f 	bfi	r1, r3, #6, #10
    7560:	482a      	ldr	r0, [pc, #168]	; (760c <usbd_sof_trigger_iso_read+0x134>)
    7562:	f7fb ff39 	bl	33d8 <log_0>
static inline void usbd_evt_flush(void)
    7566:	e000      	b.n	756a <usbd_sof_trigger_iso_read+0x92>
	} while (ev != NULL);
    7568:	b164      	cbz	r4, 7584 <usbd_sof_trigger_iso_read+0xac>
    756a:	2200      	movs	r2, #0
    756c:	2300      	movs	r3, #0
    756e:	4824      	ldr	r0, [pc, #144]	; (7600 <usbd_sof_trigger_iso_read+0x128>)
    7570:	f008 fcb2 	bl	fed8 <z_impl_k_queue_get>
		if (ev) {
    7574:	4604      	mov	r4, r0
    7576:	2800      	cmp	r0, #0
    7578:	d0f6      	beq.n	7568 <usbd_sof_trigger_iso_read+0x90>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    757a:	1d01      	adds	r1, r0, #4
    757c:	481f      	ldr	r0, [pc, #124]	; (75fc <usbd_sof_trigger_iso_read+0x124>)
    757e:	f00e faa4 	bl	15aca <k_mem_slab_free>
}
    7582:	e7f1      	b.n	7568 <usbd_sof_trigger_iso_read+0x90>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    7584:	2200      	movs	r2, #0
    7586:	2300      	movs	r3, #0
    7588:	a901      	add	r1, sp, #4
    758a:	481c      	ldr	r0, [pc, #112]	; (75fc <usbd_sof_trigger_iso_read+0x124>)
    758c:	f008 fa9c 	bl	fac8 <k_mem_slab_alloc>
    7590:	b180      	cbz	r0, 75b4 <usbd_sof_trigger_iso_read+0xdc>
    7592:	4b17      	ldr	r3, [pc, #92]	; (75f0 <usbd_sof_trigger_iso_read+0x118>)
    7594:	4a17      	ldr	r2, [pc, #92]	; (75f4 <usbd_sof_trigger_iso_read+0x11c>)
    7596:	1a9b      	subs	r3, r3, r2
    7598:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    759a:	f04f 0100 	mov.w	r1, #0
    759e:	2201      	movs	r2, #1
    75a0:	f362 0102 	bfi	r1, r2, #0, #3
    75a4:	f36f 01c5 	bfc	r1, #3, #3
    75a8:	f363 118f 	bfi	r1, r3, #6, #10
    75ac:	4818      	ldr	r0, [pc, #96]	; (7610 <usbd_sof_trigger_iso_read+0x138>)
    75ae:	f7fb ff13 	bl	33d8 <log_0>
			return NULL;
    75b2:	e7b9      	b.n	7528 <usbd_sof_trigger_iso_read+0x50>
		ev = (struct usbd_event *)block.data;
    75b4:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    75b6:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    75b8:	2304      	movs	r3, #4
    75ba:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    75bc:	4810      	ldr	r0, [pc, #64]	; (7600 <usbd_sof_trigger_iso_read+0x128>)
    75be:	f00e fba7 	bl	15d10 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    75c2:	4910      	ldr	r1, [pc, #64]	; (7604 <usbd_sof_trigger_iso_read+0x12c>)
    75c4:	4810      	ldr	r0, [pc, #64]	; (7608 <usbd_sof_trigger_iso_read+0x130>)
    75c6:	f00e fbc4 	bl	15d52 <k_work_submit_to_queue>
		return NULL;
    75ca:	e7ad      	b.n	7528 <usbd_sof_trigger_iso_read+0x50>
    75cc:	4b08      	ldr	r3, [pc, #32]	; (75f0 <usbd_sof_trigger_iso_read+0x118>)
    75ce:	4a09      	ldr	r2, [pc, #36]	; (75f4 <usbd_sof_trigger_iso_read+0x11c>)
    75d0:	1a9b      	subs	r3, r3, r2
    75d2:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Failed to alloc evt");
    75d4:	f04f 0100 	mov.w	r1, #0
    75d8:	2201      	movs	r2, #1
    75da:	f362 0102 	bfi	r1, r2, #0, #3
    75de:	f36f 01c5 	bfc	r1, #3, #3
    75e2:	f363 118f 	bfi	r1, r3, #6, #10
    75e6:	480b      	ldr	r0, [pc, #44]	; (7614 <usbd_sof_trigger_iso_read+0x13c>)
    75e8:	f7fb fef6 	bl	33d8 <log_0>
			return;
    75ec:	e77d      	b.n	74ea <usbd_sof_trigger_iso_read+0x12>
    75ee:	bf00      	nop
    75f0:	00016650 	.word	0x00016650
    75f4:	000165d8 	.word	0x000165d8
    75f8:	00017740 	.word	0x00017740
    75fc:	2000034c 	.word	0x2000034c
    7600:	20000450 	.word	0x20000450
    7604:	20002460 	.word	0x20002460
    7608:	20000738 	.word	0x20000738
    760c:	000176e8 	.word	0x000176e8
    7610:	00017708 	.word	0x00017708
    7614:	00017754 	.word	0x00017754

00007618 <usbd_work_handler>:
{
    7618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    761c:	b085      	sub	sp, #20
    761e:	4605      	mov	r5, r0
	while ((ev = usbd_evt_get()) != NULL) {
    7620:	e18f      	b.n	7942 <usbd_work_handler+0x32a>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    7622:	1d21      	adds	r1, r4, #4
    7624:	48b5      	ldr	r0, [pc, #724]	; (78fc <usbd_work_handler+0x2e4>)
    7626:	f00e fa50 	bl	15aca <k_mem_slab_free>
			continue;
    762a:	e18a      	b.n	7942 <usbd_work_handler+0x32a>
			if (!ctx->attached) {
    762c:	f815 3c04 	ldrb.w	r3, [r5, #-4]
    7630:	b14b      	cbz	r3, 7646 <usbd_work_handler+0x2e>
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    7632:	f8d4 a008 	ldr.w	sl, [r4, #8]
	switch (ep_evt->evt_type) {
    7636:	7b23      	ldrb	r3, [r4, #12]
    7638:	2b03      	cmp	r3, #3
    763a:	f200 817e 	bhi.w	793a <usbd_work_handler+0x322>
    763e:	e8df f003 	tbb	[pc, r3]
    7642:	6114      	.short	0x6114
    7644:	a49d      	.short	0xa49d
    7646:	4bae      	ldr	r3, [pc, #696]	; (7900 <usbd_work_handler+0x2e8>)
    7648:	4aae      	ldr	r2, [pc, #696]	; (7904 <usbd_work_handler+0x2ec>)
    764a:	1a9b      	subs	r3, r3, r2
    764c:	08db      	lsrs	r3, r3, #3
				LOG_ERR("not attached, EP 0x%02x event dropped",
    764e:	2201      	movs	r2, #1
    7650:	f362 0702 	bfi	r7, r2, #0, #3
    7654:	f36f 07c5 	bfc	r7, #3, #3
    7658:	f363 178f 	bfi	r7, r3, #6, #10
    765c:	68a3      	ldr	r3, [r4, #8]
    765e:	463a      	mov	r2, r7
    7660:	7a59      	ldrb	r1, [r3, #9]
    7662:	48a9      	ldr	r0, [pc, #676]	; (7908 <usbd_work_handler+0x2f0>)
    7664:	f7fb fe24 	bl	32b0 <log_1>
    7668:	e7e3      	b.n	7632 <usbd_work_handler+0x1a>
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    766a:	f8da b014 	ldr.w	fp, [sl, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
    766e:	2208      	movs	r2, #8
    7670:	2100      	movs	r1, #0
    7672:	4658      	mov	r0, fp
    7674:	f00b fde0 	bl	13238 <memset>
    return ret;
}

NRF_STATIC_INLINE uint8_t nrf_usbd_setup_bmrequesttype_get(NRF_USBD_Type const * p_reg)
{
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    7678:	4ba4      	ldr	r3, [pc, #656]	; (790c <usbd_work_handler+0x2f4>)
    767a:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
	usbd_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    767e:	f88b 2000 	strb.w	r2, [fp]
}

NRF_STATIC_INLINE uint8_t nrf_usbd_setup_brequest_get(NRF_USBD_Type const * p_reg)
{
    return (uint8_t)(p_reg->BREQUEST);
    7682:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
	usbd_setup->bRequest = nrf_usbd_setup_brequest_get(NRF_USBD);
    7686:	f88b 2001 	strb.w	r2, [fp, #1]
}

NRF_STATIC_INLINE uint16_t nrf_usbd_setup_wvalue_get(NRF_USBD_Type const * p_reg)
{
    const uint16_t val = p_reg->WVALUEL;
    768a:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    768e:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    7690:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    7694:	0209      	lsls	r1, r1, #8
    7696:	b289      	uxth	r1, r1
    7698:	430a      	orrs	r2, r1
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
    769a:	f8ab 2002 	strh.w	r2, [fp, #2]
}

NRF_STATIC_INLINE uint16_t nrf_usbd_setup_windex_get(NRF_USBD_Type const * p_reg)
{
    const uint16_t val = p_reg->WINDEXL;
    769e:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    76a2:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    76a4:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    76a8:	0209      	lsls	r1, r1, #8
    76aa:	b289      	uxth	r1, r1
    76ac:	430a      	orrs	r2, r1
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
    76ae:	f8ab 2004 	strh.w	r2, [fp, #4]
}

NRF_STATIC_INLINE uint16_t nrf_usbd_setup_wlength_get(NRF_USBD_Type const * p_reg)
{
    const uint16_t val = p_reg->WLENGTHL;
    76b2:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    76b6:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    76b8:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    76bc:	021b      	lsls	r3, r3, #8
    76be:	b29b      	uxth	r3, r3
    76c0:	4313      	orrs	r3, r2
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
    76c2:	f8ab 3006 	strh.w	r3, [fp, #6]
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    76c6:	2208      	movs	r2, #8
    76c8:	f8ca 200c 	str.w	r2, [sl, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    76cc:	4659      	mov	r1, fp
    76ce:	4890      	ldr	r0, [pc, #576]	; (7910 <usbd_work_handler+0x2f8>)
    76d0:	f00b fd8e 	bl	131f0 <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    76d4:	f8da 3000 	ldr.w	r3, [sl]
    76d8:	2100      	movs	r1, #0
    76da:	f89a 0009 	ldrb.w	r0, [sl, #9]
    76de:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
    76e0:	f99b 3000 	ldrsb.w	r3, [fp]
    76e4:	2b00      	cmp	r3, #0
    76e6:	db02      	blt.n	76ee <usbd_work_handler+0xd6>
    76e8:	f8bb 3006 	ldrh.w	r3, [fp, #6]
    76ec:	b923      	cbnz	r3, 76f8 <usbd_work_handler+0xe0>
		ctx->ctrl_read_len = 0U;
    76ee:	4b89      	ldr	r3, [pc, #548]	; (7914 <usbd_work_handler+0x2fc>)
    76f0:	2200      	movs	r2, #0
    76f2:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
}
    76f6:	e120      	b.n	793a <usbd_work_handler+0x322>
		ctx->ctrl_read_len = usbd_setup->wLength;
    76f8:	4a86      	ldr	r2, [pc, #536]	; (7914 <usbd_work_handler+0x2fc>)
    76fa:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
    76fe:	f004 fd25 	bl	c14c <nrfx_usbd_setup_data_clear>
    7702:	e11a      	b.n	793a <usbd_work_handler+0x322>
	if (!ep_ctx->read_pending) {
    7704:	f89a 301d 	ldrb.w	r3, [sl, #29]
    7708:	2b00      	cmp	r3, #0
    770a:	f000 8116 	beq.w	793a <usbd_work_handler+0x322>
	if (!ep_ctx->read_complete) {
    770e:	f89a 301c 	ldrb.w	r3, [sl, #28]
    7712:	2b00      	cmp	r3, #0
    7714:	f000 8111 	beq.w	793a <usbd_work_handler+0x322>
	ep_ctx->read_pending = false;
    7718:	f04f 0b00 	mov.w	fp, #0
    771c:	f88a b01d 	strb.w	fp, [sl, #29]
	ep_ctx->read_complete = false;
    7720:	f88a b01c 	strb.w	fp, [sl, #28]
	return z_impl_k_mutex_lock(mutex, timeout);
    7724:	f04f 32ff 	mov.w	r2, #4294967295
    7728:	f04f 33ff 	mov.w	r3, #4294967295
    772c:	487a      	ldr	r0, [pc, #488]	; (7918 <usbd_work_handler+0x300>)
    772e:	f008 fb05 	bl	fd3c <z_impl_k_mutex_lock>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    7732:	f8da 3014 	ldr.w	r3, [sl, #20]
    7736:	9301      	str	r3, [sp, #4]
    7738:	f8da 3004 	ldr.w	r3, [sl, #4]
    773c:	9302      	str	r3, [sp, #8]
    773e:	f8cd b00c 	str.w	fp, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    7742:	a901      	add	r1, sp, #4
    7744:	f89a 0009 	ldrb.w	r0, [sl, #9]
    7748:	f004 f8b4 	bl	b8b4 <nrfx_usbd_ep_transfer>
    774c:	4601      	mov	r1, r0
	if (err != NRFX_SUCCESS) {
    774e:	4b73      	ldr	r3, [pc, #460]	; (791c <usbd_work_handler+0x304>)
    7750:	4298      	cmp	r0, r3
    7752:	d103      	bne.n	775c <usbd_work_handler+0x144>
	return z_impl_k_mutex_unlock(mutex);
    7754:	4870      	ldr	r0, [pc, #448]	; (7918 <usbd_work_handler+0x300>)
    7756:	f008 fb7b 	bl	fe50 <z_impl_k_mutex_unlock>
    775a:	e0ee      	b.n	793a <usbd_work_handler+0x322>
    775c:	4b68      	ldr	r3, [pc, #416]	; (7900 <usbd_work_handler+0x2e8>)
    775e:	4a69      	ldr	r2, [pc, #420]	; (7904 <usbd_work_handler+0x2ec>)
    7760:	1a9b      	subs	r3, r3, r2
    7762:	08db      	lsrs	r3, r3, #3
		LOG_ERR("nRF USBD transfer error (OUT): 0x%02x", err);
    7764:	2201      	movs	r2, #1
    7766:	f362 0802 	bfi	r8, r2, #0, #3
    776a:	f36f 08c5 	bfc	r8, #3, #3
    776e:	f363 188f 	bfi	r8, r3, #6, #10
    7772:	4642      	mov	r2, r8
    7774:	486a      	ldr	r0, [pc, #424]	; (7920 <usbd_work_handler+0x308>)
    7776:	f7fb fd9b 	bl	32b0 <log_1>
    777a:	e7eb      	b.n	7754 <usbd_work_handler+0x13c>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    777c:	f8da 3000 	ldr.w	r3, [sl]
    7780:	2101      	movs	r1, #1
    7782:	f89a 0009 	ldrb.w	r0, [sl, #9]
    7786:	4798      	blx	r3
		break;
    7788:	e0d7      	b.n	793a <usbd_work_handler+0x322>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    778a:	f89a 300a 	ldrb.w	r3, [sl, #10]
    778e:	b913      	cbnz	r3, 7796 <usbd_work_handler+0x17e>
		    !ep_ctx->trans_zlp) {
    7790:	f89a 301f 	ldrb.w	r3, [sl, #31]
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    7794:	b133      	cbz	r3, 77a4 <usbd_work_handler+0x18c>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    7796:	f8da 3000 	ldr.w	r3, [sl]
    779a:	2102      	movs	r1, #2
    779c:	f89a 0009 	ldrb.w	r0, [sl, #9]
    77a0:	4798      	blx	r3
}
    77a2:	e0ca      	b.n	793a <usbd_work_handler+0x322>
	return z_impl_k_mutex_lock(mutex, timeout);
    77a4:	f8df b170 	ldr.w	fp, [pc, #368]	; 7918 <usbd_work_handler+0x300>
    77a8:	f04f 32ff 	mov.w	r2, #4294967295
    77ac:	f04f 33ff 	mov.w	r3, #4294967295
    77b0:	4658      	mov	r0, fp
    77b2:	f008 fac3 	bl	fd3c <z_impl_k_mutex_lock>
			nrfx_usbd_setup_clear();
    77b6:	f004 fd1b 	bl	c1f0 <nrfx_usbd_setup_clear>
	return z_impl_k_mutex_unlock(mutex);
    77ba:	4658      	mov	r0, fp
    77bc:	f008 fb48 	bl	fe50 <z_impl_k_mutex_unlock>
    77c0:	e7e9      	b.n	7796 <usbd_work_handler+0x17e>
	switch (pwr_evt->state) {
    77c2:	7a23      	ldrb	r3, [r4, #8]
    77c4:	2b04      	cmp	r3, #4
    77c6:	f200 80b8 	bhi.w	793a <usbd_work_handler+0x322>
    77ca:	e8df f003 	tbb	[pc, r3]
    77ce:	0322      	.short	0x0322
    77d0:	350e      	.short	0x350e
    77d2:	44          	.byte	0x44
    77d3:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
    77d4:	f003 fffc 	bl	b7d0 <nrfx_usbd_is_enabled>
    77d8:	2800      	cmp	r0, #0
    77da:	f040 80ae 	bne.w	793a <usbd_work_handler+0x322>
			nrfx_usbd_enable();
    77de:	f003 ff41 	bl	b664 <nrfx_usbd_enable>
			err = hfxo_start(ctx);
    77e2:	484c      	ldr	r0, [pc, #304]	; (7914 <usbd_work_handler+0x2fc>)
    77e4:	f00c f890 	bl	13908 <hfxo_start>
    77e8:	e0a7      	b.n	793a <usbd_work_handler+0x322>
		usbd_enable_endpoints(ctx);
    77ea:	f8df a128 	ldr.w	sl, [pc, #296]	; 7914 <usbd_work_handler+0x2fc>
    77ee:	4650      	mov	r0, sl
    77f0:	f00c f858 	bl	138a4 <usbd_enable_endpoints>
		nrfx_usbd_start(true);
    77f4:	2001      	movs	r0, #1
    77f6:	f003 ffcf 	bl	b798 <nrfx_usbd_start>
		ctx->ready = true;
    77fa:	2301      	movs	r3, #1
    77fc:	f88a 3025 	strb.w	r3, [sl, #37]	; 0x25
		if (ctx->status_cb) {
    7800:	f8da 3000 	ldr.w	r3, [sl]
    7804:	2b00      	cmp	r3, #0
    7806:	f000 8098 	beq.w	793a <usbd_work_handler+0x322>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    780a:	2100      	movs	r1, #0
    780c:	2002      	movs	r0, #2
    780e:	4798      	blx	r3
    7810:	e093      	b.n	793a <usbd_work_handler+0x322>
		ctx->ready = false;
    7812:	f8df a100 	ldr.w	sl, [pc, #256]	; 7914 <usbd_work_handler+0x2fc>
    7816:	2300      	movs	r3, #0
    7818:	f88a 3025 	strb.w	r3, [sl, #37]	; 0x25
		nrfx_usbd_disable();
    781c:	f004 ff9e 	bl	c75c <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
    7820:	4650      	mov	r0, sl
    7822:	f00c f81e 	bl	13862 <hfxo_stop>
		if (ctx->status_cb) {
    7826:	f8da 3000 	ldr.w	r3, [sl]
    782a:	2b00      	cmp	r3, #0
    782c:	f000 8085 	beq.w	793a <usbd_work_handler+0x322>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    7830:	2100      	movs	r1, #0
    7832:	2004      	movs	r0, #4
    7834:	4798      	blx	r3
    7836:	e080      	b.n	793a <usbd_work_handler+0x322>
	return get_usbd_ctx()->ready;
    7838:	4b36      	ldr	r3, [pc, #216]	; (7914 <usbd_work_handler+0x2fc>)
    783a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		if (dev_ready()) {
    783e:	2b00      	cmp	r3, #0
    7840:	d07b      	beq.n	793a <usbd_work_handler+0x322>
			nrfx_usbd_suspend();
    7842:	f004 ffad 	bl	c7a0 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    7846:	4b33      	ldr	r3, [pc, #204]	; (7914 <usbd_work_handler+0x2fc>)
    7848:	681b      	ldr	r3, [r3, #0]
    784a:	2b00      	cmp	r3, #0
    784c:	d075      	beq.n	793a <usbd_work_handler+0x322>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    784e:	2100      	movs	r1, #0
    7850:	2005      	movs	r0, #5
    7852:	4798      	blx	r3
    7854:	e071      	b.n	793a <usbd_work_handler+0x322>
		if (ctx->status_cb && dev_ready()) {
    7856:	4b2f      	ldr	r3, [pc, #188]	; (7914 <usbd_work_handler+0x2fc>)
    7858:	681b      	ldr	r3, [r3, #0]
    785a:	2b00      	cmp	r3, #0
    785c:	d06d      	beq.n	793a <usbd_work_handler+0x322>
	return get_usbd_ctx()->ready;
    785e:	4a2d      	ldr	r2, [pc, #180]	; (7914 <usbd_work_handler+0x2fc>)
    7860:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
		if (ctx->status_cb && dev_ready()) {
    7864:	2a00      	cmp	r2, #0
    7866:	d068      	beq.n	793a <usbd_work_handler+0x322>
			ctx->status_cb(USB_DC_RESUME, NULL);
    7868:	2100      	movs	r1, #0
    786a:	2006      	movs	r0, #6
    786c:	4798      	blx	r3
}
    786e:	e064      	b.n	793a <usbd_work_handler+0x322>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    7870:	f105 0a10 	add.w	sl, r5, #16
	return z_impl_k_mutex_lock(mutex, timeout);
    7874:	f04f 32ff 	mov.w	r2, #4294967295
    7878:	f04f 33ff 	mov.w	r3, #4294967295
    787c:	4650      	mov	r0, sl
    787e:	f008 fa5d 	bl	fd3c <z_impl_k_mutex_lock>
			eps_ctx_init();
    7882:	f7ff fd37 	bl	72f4 <eps_ctx_init>
	return z_impl_k_mutex_unlock(mutex);
    7886:	4650      	mov	r0, sl
    7888:	f008 fae2 	bl	fe50 <z_impl_k_mutex_unlock>
			if (ctx->status_cb) {
    788c:	f855 3c28 	ldr.w	r3, [r5, #-40]
    7890:	2b00      	cmp	r3, #0
    7892:	d052      	beq.n	793a <usbd_work_handler+0x322>
				ctx->status_cb(USB_DC_RESET, NULL);
    7894:	2100      	movs	r1, #0
    7896:	2001      	movs	r0, #1
    7898:	4798      	blx	r3
    789a:	e04e      	b.n	793a <usbd_work_handler+0x322>
			usbd_sof_trigger_iso_read();
    789c:	f7ff fe1c 	bl	74d8 <usbd_sof_trigger_iso_read>
			if (ctx->status_cb) {
    78a0:	f855 3c28 	ldr.w	r3, [r5, #-40]
    78a4:	2b00      	cmp	r3, #0
    78a6:	d048      	beq.n	793a <usbd_work_handler+0x322>
				ctx->status_cb(USB_DC_SOF, NULL);
    78a8:	2100      	movs	r1, #0
    78aa:	200a      	movs	r0, #10
    78ac:	4798      	blx	r3
    78ae:	e044      	b.n	793a <usbd_work_handler+0x322>
    78b0:	4b13      	ldr	r3, [pc, #76]	; (7900 <usbd_work_handler+0x2e8>)
    78b2:	4a14      	ldr	r2, [pc, #80]	; (7904 <usbd_work_handler+0x2ec>)
    78b4:	1a9b      	subs	r3, r3, r2
    78b6:	08db      	lsrs	r3, r3, #3
				LOG_ERR("USBD event queue full!");
    78b8:	2201      	movs	r2, #1
    78ba:	f362 0602 	bfi	r6, r2, #0, #3
    78be:	f36f 06c5 	bfc	r6, #3, #3
    78c2:	f363 168f 	bfi	r6, r3, #6, #10
    78c6:	4631      	mov	r1, r6
    78c8:	4816      	ldr	r0, [pc, #88]	; (7924 <usbd_work_handler+0x30c>)
    78ca:	f7fb fd85 	bl	33d8 <log_0>
	nrfx_power_usbevt_disable();
    78ce:	f00c fd38 	bl	14342 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
    78d2:	f004 ff43 	bl	c75c <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    78d6:	f003 febb 	bl	b650 <nrfx_usbd_uninit>
static inline void usbd_evt_flush(void)
    78da:	e006      	b.n	78ea <usbd_work_handler+0x2d2>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    78dc:	1d01      	adds	r1, r0, #4
    78de:	4807      	ldr	r0, [pc, #28]	; (78fc <usbd_work_handler+0x2e4>)
    78e0:	f00e f8f3 	bl	15aca <k_mem_slab_free>
	} while (ev != NULL);
    78e4:	f1ba 0f00 	cmp.w	sl, #0
    78e8:	d020      	beq.n	792c <usbd_work_handler+0x314>
	return z_impl_k_queue_get(queue, timeout);
    78ea:	2200      	movs	r2, #0
    78ec:	2300      	movs	r3, #0
    78ee:	480e      	ldr	r0, [pc, #56]	; (7928 <usbd_work_handler+0x310>)
    78f0:	f008 faf2 	bl	fed8 <z_impl_k_queue_get>
		if (ev) {
    78f4:	4682      	mov	sl, r0
    78f6:	2800      	cmp	r0, #0
    78f8:	d1f0      	bne.n	78dc <usbd_work_handler+0x2c4>
    78fa:	e7f3      	b.n	78e4 <usbd_work_handler+0x2cc>
    78fc:	2000034c 	.word	0x2000034c
    7900:	00016650 	.word	0x00016650
    7904:	000165d8 	.word	0x000165d8
    7908:	00017768 	.word	0x00017768
    790c:	40027000 	.word	0x40027000
    7910:	2000243c 	.word	0x2000243c
    7914:	20002438 	.word	0x20002438
    7918:	20002470 	.word	0x20002470
    791c:	0bad0000 	.word	0x0bad0000
    7920:	00017790 	.word	0x00017790
    7924:	000177b8 	.word	0x000177b8
    7928:	20000450 	.word	0x20000450
	ret = eps_ctx_init();
    792c:	f7ff fce2 	bl	72f4 <eps_ctx_init>
	nrfx_power_usbevt_enable();
    7930:	f00c fd00 	bl	14334 <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    7934:	481c      	ldr	r0, [pc, #112]	; (79a8 <usbd_work_handler+0x390>)
    7936:	f003 ff65 	bl	b804 <nrfx_usbd_init>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    793a:	1d21      	adds	r1, r4, #4
    793c:	481b      	ldr	r0, [pc, #108]	; (79ac <usbd_work_handler+0x394>)
    793e:	f00e f8c4 	bl	15aca <k_mem_slab_free>
    7942:	2200      	movs	r2, #0
    7944:	2300      	movs	r3, #0
    7946:	481a      	ldr	r0, [pc, #104]	; (79b0 <usbd_work_handler+0x398>)
    7948:	f008 fac6 	bl	fed8 <z_impl_k_queue_get>
	while ((ev = usbd_evt_get()) != NULL) {
    794c:	4604      	mov	r4, r0
    794e:	b338      	cbz	r0, 79a0 <usbd_work_handler+0x388>
	return get_usbd_ctx()->ready;
    7950:	4b18      	ldr	r3, [pc, #96]	; (79b4 <usbd_work_handler+0x39c>)
    7952:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    7956:	b91b      	cbnz	r3, 7960 <usbd_work_handler+0x348>
    7958:	7c23      	ldrb	r3, [r4, #16]
    795a:	2b00      	cmp	r3, #0
    795c:	f47f ae61 	bne.w	7622 <usbd_work_handler+0xa>
		switch (ev->evt_type) {
    7960:	7c21      	ldrb	r1, [r4, #16]
    7962:	2904      	cmp	r1, #4
    7964:	d80c      	bhi.n	7980 <usbd_work_handler+0x368>
    7966:	a301      	add	r3, pc, #4	; (adr r3, 796c <usbd_work_handler+0x354>)
    7968:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    796c:	000077c3 	.word	0x000077c3
    7970:	0000762d 	.word	0x0000762d
    7974:	00007871 	.word	0x00007871
    7978:	0000789d 	.word	0x0000789d
    797c:	000078b1 	.word	0x000078b1
    7980:	4b0d      	ldr	r3, [pc, #52]	; (79b8 <usbd_work_handler+0x3a0>)
    7982:	4a0e      	ldr	r2, [pc, #56]	; (79bc <usbd_work_handler+0x3a4>)
    7984:	1a9b      	subs	r3, r3, r2
    7986:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    7988:	2201      	movs	r2, #1
    798a:	f362 0902 	bfi	r9, r2, #0, #3
    798e:	f36f 09c5 	bfc	r9, #3, #3
    7992:	f363 198f 	bfi	r9, r3, #6, #10
    7996:	464a      	mov	r2, r9
    7998:	4809      	ldr	r0, [pc, #36]	; (79c0 <usbd_work_handler+0x3a8>)
    799a:	f7fb fc89 	bl	32b0 <log_1>
    799e:	e7cc      	b.n	793a <usbd_work_handler+0x322>
}
    79a0:	b005      	add	sp, #20
    79a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    79a6:	bf00      	nop
    79a8:	00008021 	.word	0x00008021
    79ac:	2000034c 	.word	0x2000034c
    79b0:	20000450 	.word	0x20000450
    79b4:	20002438 	.word	0x20002438
    79b8:	00016650 	.word	0x00016650
    79bc:	000165d8 	.word	0x000165d8
    79c0:	000177d0 	.word	0x000177d0

000079c4 <usbd_event_transfer_ctrl>:
{
    79c4:	b570      	push	{r4, r5, r6, lr}
    79c6:	b082      	sub	sp, #8
    79c8:	4604      	mov	r4, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
    79ca:	7886      	ldrb	r6, [r0, #2]
    79cc:	4630      	mov	r0, r6
    79ce:	f7ff fc5d 	bl	728c <endpoint_ctx>
    79d2:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    79d4:	f016 0f80 	tst.w	r6, #128	; 0x80
    79d8:	d122      	bne.n	7a20 <usbd_event_transfer_ctrl+0x5c>
		switch (p_event->data.eptransfer.status) {
    79da:	78e1      	ldrb	r1, [r4, #3]
    79dc:	2900      	cmp	r1, #0
    79de:	f000 80d8 	beq.w	7b92 <usbd_event_transfer_ctrl+0x1ce>
    79e2:	2901      	cmp	r1, #1
    79e4:	f040 815c 	bne.w	7ca0 <usbd_event_transfer_ctrl+0x2dc>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    79e8:	2200      	movs	r2, #0
    79ea:	2300      	movs	r3, #0
    79ec:	a901      	add	r1, sp, #4
    79ee:	48b6      	ldr	r0, [pc, #728]	; (7cc8 <usbd_event_transfer_ctrl+0x304>)
    79f0:	f008 f86a 	bl	fac8 <k_mem_slab_alloc>
    79f4:	2800      	cmp	r0, #0
    79f6:	f040 8089 	bne.w	7b0c <usbd_event_transfer_ctrl+0x148>
	ev = (struct usbd_event *)block.data;
    79fa:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    79fc:	6064      	str	r4, [r4, #4]
			if (!ev) {
    79fe:	2c00      	cmp	r4, #0
    7a00:	f000 815f 	beq.w	7cc2 <usbd_event_transfer_ctrl+0x2fe>
			ep_ctx->read_pending = true;
    7a04:	2301      	movs	r3, #1
    7a06:	776b      	strb	r3, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    7a08:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    7a0a:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    7a0c:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    7a0e:	4621      	mov	r1, r4
    7a10:	48ae      	ldr	r0, [pc, #696]	; (7ccc <usbd_event_transfer_ctrl+0x308>)
    7a12:	f00e f97d 	bl	15d10 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    7a16:	49ae      	ldr	r1, [pc, #696]	; (7cd0 <usbd_event_transfer_ctrl+0x30c>)
    7a18:	48ae      	ldr	r0, [pc, #696]	; (7cd4 <usbd_event_transfer_ctrl+0x310>)
    7a1a:	f00e f99a 	bl	15d52 <k_work_submit_to_queue>
}
    7a1e:	e150      	b.n	7cc2 <usbd_event_transfer_ctrl+0x2fe>
		switch (p_event->data.eptransfer.status) {
    7a20:	78e1      	ldrb	r1, [r4, #3]
    7a22:	b1a1      	cbz	r1, 7a4e <usbd_event_transfer_ctrl+0x8a>
    7a24:	2903      	cmp	r1, #3
    7a26:	f000 814c 	beq.w	7cc2 <usbd_event_transfer_ctrl+0x2fe>
    7a2a:	4aab      	ldr	r2, [pc, #684]	; (7cd8 <usbd_event_transfer_ctrl+0x314>)
    7a2c:	4bab      	ldr	r3, [pc, #684]	; (7cdc <usbd_event_transfer_ctrl+0x318>)
    7a2e:	1ad2      	subs	r2, r2, r3
    7a30:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    7a32:	f04f 0300 	mov.w	r3, #0
    7a36:	2001      	movs	r0, #1
    7a38:	f360 0302 	bfi	r3, r0, #0, #3
    7a3c:	f36f 03c5 	bfc	r3, #3, #3
    7a40:	f362 138f 	bfi	r3, r2, #6, #10
    7a44:	4632      	mov	r2, r6
    7a46:	48a6      	ldr	r0, [pc, #664]	; (7ce0 <usbd_event_transfer_ctrl+0x31c>)
    7a48:	f7fb fc68 	bl	331c <log_2>
    7a4c:	e139      	b.n	7cc2 <usbd_event_transfer_ctrl+0x2fe>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    7a4e:	2200      	movs	r2, #0
    7a50:	2300      	movs	r3, #0
    7a52:	a901      	add	r1, sp, #4
    7a54:	489c      	ldr	r0, [pc, #624]	; (7cc8 <usbd_event_transfer_ctrl+0x304>)
    7a56:	f008 f837 	bl	fac8 <k_mem_slab_alloc>
    7a5a:	b9a0      	cbnz	r0, 7a86 <usbd_event_transfer_ctrl+0xc2>
	ev = (struct usbd_event *)block.data;
    7a5c:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    7a5e:	6064      	str	r4, [r4, #4]
			if (!ev) {
    7a60:	2c00      	cmp	r4, #0
    7a62:	f000 812e 	beq.w	7cc2 <usbd_event_transfer_ctrl+0x2fe>
			ep_ctx->write_in_progress = false;
    7a66:	2300      	movs	r3, #0
    7a68:	77ab      	strb	r3, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    7a6a:	2301      	movs	r3, #1
    7a6c:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    7a6e:	2303      	movs	r3, #3
    7a70:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    7a72:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    7a74:	4621      	mov	r1, r4
    7a76:	4895      	ldr	r0, [pc, #596]	; (7ccc <usbd_event_transfer_ctrl+0x308>)
    7a78:	f00e f94a 	bl	15d10 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    7a7c:	4994      	ldr	r1, [pc, #592]	; (7cd0 <usbd_event_transfer_ctrl+0x30c>)
    7a7e:	4895      	ldr	r0, [pc, #596]	; (7cd4 <usbd_event_transfer_ctrl+0x310>)
    7a80:	f00e f967 	bl	15d52 <k_work_submit_to_queue>
}
    7a84:	e11d      	b.n	7cc2 <usbd_event_transfer_ctrl+0x2fe>
    7a86:	4b94      	ldr	r3, [pc, #592]	; (7cd8 <usbd_event_transfer_ctrl+0x314>)
    7a88:	4a94      	ldr	r2, [pc, #592]	; (7cdc <usbd_event_transfer_ctrl+0x318>)
    7a8a:	1a9b      	subs	r3, r3, r2
    7a8c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    7a8e:	f04f 0100 	mov.w	r1, #0
    7a92:	2201      	movs	r2, #1
    7a94:	f362 0102 	bfi	r1, r2, #0, #3
    7a98:	f36f 01c5 	bfc	r1, #3, #3
    7a9c:	f363 118f 	bfi	r1, r3, #6, #10
    7aa0:	4890      	ldr	r0, [pc, #576]	; (7ce4 <usbd_event_transfer_ctrl+0x320>)
    7aa2:	f7fb fc99 	bl	33d8 <log_0>
static inline void usbd_evt_flush(void)
    7aa6:	e000      	b.n	7aaa <usbd_event_transfer_ctrl+0xe6>
	} while (ev != NULL);
    7aa8:	b164      	cbz	r4, 7ac4 <usbd_event_transfer_ctrl+0x100>
    7aaa:	2200      	movs	r2, #0
    7aac:	2300      	movs	r3, #0
    7aae:	4887      	ldr	r0, [pc, #540]	; (7ccc <usbd_event_transfer_ctrl+0x308>)
    7ab0:	f008 fa12 	bl	fed8 <z_impl_k_queue_get>
		if (ev) {
    7ab4:	4604      	mov	r4, r0
    7ab6:	2800      	cmp	r0, #0
    7ab8:	d0f6      	beq.n	7aa8 <usbd_event_transfer_ctrl+0xe4>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    7aba:	1d01      	adds	r1, r0, #4
    7abc:	4882      	ldr	r0, [pc, #520]	; (7cc8 <usbd_event_transfer_ctrl+0x304>)
    7abe:	f00e f804 	bl	15aca <k_mem_slab_free>
}
    7ac2:	e7f1      	b.n	7aa8 <usbd_event_transfer_ctrl+0xe4>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    7ac4:	2200      	movs	r2, #0
    7ac6:	2300      	movs	r3, #0
    7ac8:	a901      	add	r1, sp, #4
    7aca:	487f      	ldr	r0, [pc, #508]	; (7cc8 <usbd_event_transfer_ctrl+0x304>)
    7acc:	f007 fffc 	bl	fac8 <k_mem_slab_alloc>
    7ad0:	b180      	cbz	r0, 7af4 <usbd_event_transfer_ctrl+0x130>
    7ad2:	4b81      	ldr	r3, [pc, #516]	; (7cd8 <usbd_event_transfer_ctrl+0x314>)
    7ad4:	4a81      	ldr	r2, [pc, #516]	; (7cdc <usbd_event_transfer_ctrl+0x318>)
    7ad6:	1a9b      	subs	r3, r3, r2
    7ad8:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    7ada:	f04f 0100 	mov.w	r1, #0
    7ade:	2201      	movs	r2, #1
    7ae0:	f362 0102 	bfi	r1, r2, #0, #3
    7ae4:	f36f 01c5 	bfc	r1, #3, #3
    7ae8:	f363 118f 	bfi	r1, r3, #6, #10
    7aec:	487e      	ldr	r0, [pc, #504]	; (7ce8 <usbd_event_transfer_ctrl+0x324>)
    7aee:	f7fb fc73 	bl	33d8 <log_0>
			return NULL;
    7af2:	e7b5      	b.n	7a60 <usbd_event_transfer_ctrl+0x9c>
		ev = (struct usbd_event *)block.data;
    7af4:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    7af6:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    7af8:	2304      	movs	r3, #4
    7afa:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    7afc:	4873      	ldr	r0, [pc, #460]	; (7ccc <usbd_event_transfer_ctrl+0x308>)
    7afe:	f00e f907 	bl	15d10 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    7b02:	4973      	ldr	r1, [pc, #460]	; (7cd0 <usbd_event_transfer_ctrl+0x30c>)
    7b04:	4873      	ldr	r0, [pc, #460]	; (7cd4 <usbd_event_transfer_ctrl+0x310>)
    7b06:	f00e f924 	bl	15d52 <k_work_submit_to_queue>
		return NULL;
    7b0a:	e7a9      	b.n	7a60 <usbd_event_transfer_ctrl+0x9c>
    7b0c:	4b72      	ldr	r3, [pc, #456]	; (7cd8 <usbd_event_transfer_ctrl+0x314>)
    7b0e:	4a73      	ldr	r2, [pc, #460]	; (7cdc <usbd_event_transfer_ctrl+0x318>)
    7b10:	1a9b      	subs	r3, r3, r2
    7b12:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    7b14:	f04f 0100 	mov.w	r1, #0
    7b18:	2201      	movs	r2, #1
    7b1a:	f362 0102 	bfi	r1, r2, #0, #3
    7b1e:	f36f 01c5 	bfc	r1, #3, #3
    7b22:	f363 118f 	bfi	r1, r3, #6, #10
    7b26:	486f      	ldr	r0, [pc, #444]	; (7ce4 <usbd_event_transfer_ctrl+0x320>)
    7b28:	f7fb fc56 	bl	33d8 <log_0>
static inline void usbd_evt_flush(void)
    7b2c:	e004      	b.n	7b38 <usbd_event_transfer_ctrl+0x174>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    7b2e:	1d01      	adds	r1, r0, #4
    7b30:	4865      	ldr	r0, [pc, #404]	; (7cc8 <usbd_event_transfer_ctrl+0x304>)
    7b32:	f00d ffca 	bl	15aca <k_mem_slab_free>
	} while (ev != NULL);
    7b36:	b144      	cbz	r4, 7b4a <usbd_event_transfer_ctrl+0x186>
    7b38:	2200      	movs	r2, #0
    7b3a:	2300      	movs	r3, #0
    7b3c:	4863      	ldr	r0, [pc, #396]	; (7ccc <usbd_event_transfer_ctrl+0x308>)
    7b3e:	f008 f9cb 	bl	fed8 <z_impl_k_queue_get>
		if (ev) {
    7b42:	4604      	mov	r4, r0
    7b44:	2800      	cmp	r0, #0
    7b46:	d1f2      	bne.n	7b2e <usbd_event_transfer_ctrl+0x16a>
    7b48:	e7f5      	b.n	7b36 <usbd_event_transfer_ctrl+0x172>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    7b4a:	2200      	movs	r2, #0
    7b4c:	2300      	movs	r3, #0
    7b4e:	a901      	add	r1, sp, #4
    7b50:	485d      	ldr	r0, [pc, #372]	; (7cc8 <usbd_event_transfer_ctrl+0x304>)
    7b52:	f007 ffb9 	bl	fac8 <k_mem_slab_alloc>
    7b56:	b180      	cbz	r0, 7b7a <usbd_event_transfer_ctrl+0x1b6>
    7b58:	4b5f      	ldr	r3, [pc, #380]	; (7cd8 <usbd_event_transfer_ctrl+0x314>)
    7b5a:	4a60      	ldr	r2, [pc, #384]	; (7cdc <usbd_event_transfer_ctrl+0x318>)
    7b5c:	1a9b      	subs	r3, r3, r2
    7b5e:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    7b60:	f04f 0100 	mov.w	r1, #0
    7b64:	2201      	movs	r2, #1
    7b66:	f362 0102 	bfi	r1, r2, #0, #3
    7b6a:	f36f 01c5 	bfc	r1, #3, #3
    7b6e:	f363 118f 	bfi	r1, r3, #6, #10
    7b72:	485d      	ldr	r0, [pc, #372]	; (7ce8 <usbd_event_transfer_ctrl+0x324>)
    7b74:	f7fb fc30 	bl	33d8 <log_0>
			return NULL;
    7b78:	e741      	b.n	79fe <usbd_event_transfer_ctrl+0x3a>
		ev = (struct usbd_event *)block.data;
    7b7a:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    7b7c:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    7b7e:	2304      	movs	r3, #4
    7b80:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    7b82:	4852      	ldr	r0, [pc, #328]	; (7ccc <usbd_event_transfer_ctrl+0x308>)
    7b84:	f00e f8c4 	bl	15d10 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    7b88:	4951      	ldr	r1, [pc, #324]	; (7cd0 <usbd_event_transfer_ctrl+0x30c>)
    7b8a:	4852      	ldr	r0, [pc, #328]	; (7cd4 <usbd_event_transfer_ctrl+0x310>)
    7b8c:	f00e f8e1 	bl	15d52 <k_work_submit_to_queue>
		return NULL;
    7b90:	e735      	b.n	79fe <usbd_event_transfer_ctrl+0x3a>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    7b92:	2200      	movs	r2, #0
    7b94:	2300      	movs	r3, #0
    7b96:	a901      	add	r1, sp, #4
    7b98:	484b      	ldr	r0, [pc, #300]	; (7cc8 <usbd_event_transfer_ctrl+0x304>)
    7b9a:	f007 ff95 	bl	fac8 <k_mem_slab_alloc>
    7b9e:	bb20      	cbnz	r0, 7bea <usbd_event_transfer_ctrl+0x226>
	ev = (struct usbd_event *)block.data;
    7ba0:	9e01      	ldr	r6, [sp, #4]
	ev->block = block;
    7ba2:	6076      	str	r6, [r6, #4]
			if (!ev) {
    7ba4:	2e00      	cmp	r6, #0
    7ba6:	f000 808c 	beq.w	7cc2 <usbd_event_transfer_ctrl+0x2fe>
			ev->evt_type = USBD_EVT_EP;
    7baa:	2301      	movs	r3, #1
    7bac:	7433      	strb	r3, [r6, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    7bae:	2302      	movs	r3, #2
    7bb0:	7333      	strb	r3, [r6, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    7bb2:	60b5      	str	r5, [r6, #8]
			err_code = nrfx_usbd_ep_status_get(
    7bb4:	f105 010c 	add.w	r1, r5, #12
    7bb8:	78a0      	ldrb	r0, [r4, #2]
    7bba:	f003 ff11 	bl	b9e0 <nrfx_usbd_ep_status_get>
			if (err_code != NRFX_USBD_EP_OK) {
    7bbe:	4601      	mov	r1, r0
    7bc0:	2800      	cmp	r0, #0
    7bc2:	d155      	bne.n	7c70 <usbd_event_transfer_ctrl+0x2ac>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    7bc4:	4b49      	ldr	r3, [pc, #292]	; (7cec <usbd_event_transfer_ctrl+0x328>)
    7bc6:	f8b3 328c 	ldrh.w	r3, [r3, #652]	; 0x28c
    7bca:	68ea      	ldr	r2, [r5, #12]
    7bcc:	4293      	cmp	r3, r2
    7bce:	d860      	bhi.n	7c92 <usbd_event_transfer_ctrl+0x2ce>
				ctx->ctrl_read_len = 0U;
    7bd0:	4b46      	ldr	r3, [pc, #280]	; (7cec <usbd_event_transfer_ctrl+0x328>)
    7bd2:	2200      	movs	r2, #0
    7bd4:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
	k_fifo_put(&usbd_evt_fifo, ev);
    7bd8:	4631      	mov	r1, r6
    7bda:	483c      	ldr	r0, [pc, #240]	; (7ccc <usbd_event_transfer_ctrl+0x308>)
    7bdc:	f00e f898 	bl	15d10 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    7be0:	493b      	ldr	r1, [pc, #236]	; (7cd0 <usbd_event_transfer_ctrl+0x30c>)
    7be2:	483c      	ldr	r0, [pc, #240]	; (7cd4 <usbd_event_transfer_ctrl+0x310>)
    7be4:	f00e f8b5 	bl	15d52 <k_work_submit_to_queue>
}
    7be8:	e06b      	b.n	7cc2 <usbd_event_transfer_ctrl+0x2fe>
    7bea:	4b3b      	ldr	r3, [pc, #236]	; (7cd8 <usbd_event_transfer_ctrl+0x314>)
    7bec:	4a3b      	ldr	r2, [pc, #236]	; (7cdc <usbd_event_transfer_ctrl+0x318>)
    7bee:	1a9b      	subs	r3, r3, r2
    7bf0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    7bf2:	f04f 0100 	mov.w	r1, #0
    7bf6:	2201      	movs	r2, #1
    7bf8:	f362 0102 	bfi	r1, r2, #0, #3
    7bfc:	f36f 01c5 	bfc	r1, #3, #3
    7c00:	f363 118f 	bfi	r1, r3, #6, #10
    7c04:	4837      	ldr	r0, [pc, #220]	; (7ce4 <usbd_event_transfer_ctrl+0x320>)
    7c06:	f7fb fbe7 	bl	33d8 <log_0>
static inline void usbd_evt_flush(void)
    7c0a:	e004      	b.n	7c16 <usbd_event_transfer_ctrl+0x252>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    7c0c:	1d01      	adds	r1, r0, #4
    7c0e:	482e      	ldr	r0, [pc, #184]	; (7cc8 <usbd_event_transfer_ctrl+0x304>)
    7c10:	f00d ff5b 	bl	15aca <k_mem_slab_free>
	} while (ev != NULL);
    7c14:	b146      	cbz	r6, 7c28 <usbd_event_transfer_ctrl+0x264>
    7c16:	2200      	movs	r2, #0
    7c18:	2300      	movs	r3, #0
    7c1a:	482c      	ldr	r0, [pc, #176]	; (7ccc <usbd_event_transfer_ctrl+0x308>)
    7c1c:	f008 f95c 	bl	fed8 <z_impl_k_queue_get>
		if (ev) {
    7c20:	4606      	mov	r6, r0
    7c22:	2800      	cmp	r0, #0
    7c24:	d1f2      	bne.n	7c0c <usbd_event_transfer_ctrl+0x248>
    7c26:	e7f5      	b.n	7c14 <usbd_event_transfer_ctrl+0x250>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    7c28:	2200      	movs	r2, #0
    7c2a:	2300      	movs	r3, #0
    7c2c:	a901      	add	r1, sp, #4
    7c2e:	4826      	ldr	r0, [pc, #152]	; (7cc8 <usbd_event_transfer_ctrl+0x304>)
    7c30:	f007 ff4a 	bl	fac8 <k_mem_slab_alloc>
    7c34:	b180      	cbz	r0, 7c58 <usbd_event_transfer_ctrl+0x294>
    7c36:	4b28      	ldr	r3, [pc, #160]	; (7cd8 <usbd_event_transfer_ctrl+0x314>)
    7c38:	4a28      	ldr	r2, [pc, #160]	; (7cdc <usbd_event_transfer_ctrl+0x318>)
    7c3a:	1a9b      	subs	r3, r3, r2
    7c3c:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    7c3e:	f04f 0100 	mov.w	r1, #0
    7c42:	2201      	movs	r2, #1
    7c44:	f362 0102 	bfi	r1, r2, #0, #3
    7c48:	f36f 01c5 	bfc	r1, #3, #3
    7c4c:	f363 118f 	bfi	r1, r3, #6, #10
    7c50:	4825      	ldr	r0, [pc, #148]	; (7ce8 <usbd_event_transfer_ctrl+0x324>)
    7c52:	f7fb fbc1 	bl	33d8 <log_0>
			return NULL;
    7c56:	e7a5      	b.n	7ba4 <usbd_event_transfer_ctrl+0x1e0>
		ev = (struct usbd_event *)block.data;
    7c58:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    7c5a:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    7c5c:	2304      	movs	r3, #4
    7c5e:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    7c60:	481a      	ldr	r0, [pc, #104]	; (7ccc <usbd_event_transfer_ctrl+0x308>)
    7c62:	f00e f855 	bl	15d10 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    7c66:	491a      	ldr	r1, [pc, #104]	; (7cd0 <usbd_event_transfer_ctrl+0x30c>)
    7c68:	481a      	ldr	r0, [pc, #104]	; (7cd4 <usbd_event_transfer_ctrl+0x310>)
    7c6a:	f00e f872 	bl	15d52 <k_work_submit_to_queue>
		return NULL;
    7c6e:	e799      	b.n	7ba4 <usbd_event_transfer_ctrl+0x1e0>
    7c70:	4b19      	ldr	r3, [pc, #100]	; (7cd8 <usbd_event_transfer_ctrl+0x314>)
    7c72:	4a1a      	ldr	r2, [pc, #104]	; (7cdc <usbd_event_transfer_ctrl+0x318>)
    7c74:	1a9b      	subs	r3, r3, r2
    7c76:	08db      	lsrs	r3, r3, #3
				LOG_ERR("_ep_status_get failed! Code: %d",
    7c78:	f04f 0200 	mov.w	r2, #0
    7c7c:	2001      	movs	r0, #1
    7c7e:	f360 0202 	bfi	r2, r0, #0, #3
    7c82:	f36f 02c5 	bfc	r2, #3, #3
    7c86:	f363 128f 	bfi	r2, r3, #6, #10
    7c8a:	4819      	ldr	r0, [pc, #100]	; (7cf0 <usbd_event_transfer_ctrl+0x32c>)
    7c8c:	f7fb fb10 	bl	32b0 <log_1>
    7c90:	e798      	b.n	7bc4 <usbd_event_transfer_ctrl+0x200>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    7c92:	1a9b      	subs	r3, r3, r2
    7c94:	4a15      	ldr	r2, [pc, #84]	; (7cec <usbd_event_transfer_ctrl+0x328>)
    7c96:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
    7c9a:	f004 fa57 	bl	c14c <nrfx_usbd_setup_data_clear>
    7c9e:	e79b      	b.n	7bd8 <usbd_event_transfer_ctrl+0x214>
    7ca0:	4a0d      	ldr	r2, [pc, #52]	; (7cd8 <usbd_event_transfer_ctrl+0x314>)
    7ca2:	4b0e      	ldr	r3, [pc, #56]	; (7cdc <usbd_event_transfer_ctrl+0x318>)
    7ca4:	1ad2      	subs	r2, r2, r3
    7ca6:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    7ca8:	f04f 0300 	mov.w	r3, #0
    7cac:	2001      	movs	r0, #1
    7cae:	f360 0302 	bfi	r3, r0, #0, #3
    7cb2:	f36f 03c5 	bfc	r3, #3, #3
    7cb6:	f362 138f 	bfi	r3, r2, #6, #10
    7cba:	4632      	mov	r2, r6
    7cbc:	4808      	ldr	r0, [pc, #32]	; (7ce0 <usbd_event_transfer_ctrl+0x31c>)
    7cbe:	f7fb fb2d 	bl	331c <log_2>
}
    7cc2:	b002      	add	sp, #8
    7cc4:	bd70      	pop	{r4, r5, r6, pc}
    7cc6:	bf00      	nop
    7cc8:	2000034c 	.word	0x2000034c
    7ccc:	20000450 	.word	0x20000450
    7cd0:	20002460 	.word	0x20002460
    7cd4:	20000738 	.word	0x20000738
    7cd8:	00016650 	.word	0x00016650
    7cdc:	000165d8 	.word	0x000165d8
    7ce0:	000177e8 	.word	0x000177e8
    7ce4:	000176e8 	.word	0x000176e8
    7ce8:	00017708 	.word	0x00017708
    7cec:	20002438 	.word	0x20002438
    7cf0:	00017814 	.word	0x00017814

00007cf4 <usbd_event_transfer_data>:
{
    7cf4:	b570      	push	{r4, r5, r6, lr}
    7cf6:	b082      	sub	sp, #8
    7cf8:	4604      	mov	r4, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
    7cfa:	7886      	ldrb	r6, [r0, #2]
    7cfc:	4630      	mov	r0, r6
    7cfe:	f7ff fac5 	bl	728c <endpoint_ctx>
    7d02:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    7d04:	f016 0f80 	tst.w	r6, #128	; 0x80
    7d08:	d122      	bne.n	7d50 <usbd_event_transfer_data+0x5c>
		switch (p_event->data.eptransfer.status) {
    7d0a:	78e1      	ldrb	r1, [r4, #3]
    7d0c:	2900      	cmp	r1, #0
    7d0e:	f000 80d8 	beq.w	7ec2 <usbd_event_transfer_data+0x1ce>
    7d12:	2901      	cmp	r1, #1
    7d14:	f040 815d 	bne.w	7fd2 <usbd_event_transfer_data+0x2de>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    7d18:	2200      	movs	r2, #0
    7d1a:	2300      	movs	r3, #0
    7d1c:	a901      	add	r1, sp, #4
    7d1e:	48b6      	ldr	r0, [pc, #728]	; (7ff8 <usbd_event_transfer_data+0x304>)
    7d20:	f007 fed2 	bl	fac8 <k_mem_slab_alloc>
    7d24:	2800      	cmp	r0, #0
    7d26:	f040 8089 	bne.w	7e3c <usbd_event_transfer_data+0x148>
	ev = (struct usbd_event *)block.data;
    7d2a:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    7d2c:	6064      	str	r4, [r4, #4]
			if (!ev) {
    7d2e:	2c00      	cmp	r4, #0
    7d30:	f000 8160 	beq.w	7ff4 <usbd_event_transfer_data+0x300>
			ep_ctx->read_pending = true;
    7d34:	2301      	movs	r3, #1
    7d36:	776b      	strb	r3, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    7d38:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    7d3a:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    7d3c:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    7d3e:	4621      	mov	r1, r4
    7d40:	48ae      	ldr	r0, [pc, #696]	; (7ffc <usbd_event_transfer_data+0x308>)
    7d42:	f00d ffe5 	bl	15d10 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    7d46:	49ae      	ldr	r1, [pc, #696]	; (8000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>)
    7d48:	48ae      	ldr	r0, [pc, #696]	; (8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>)
    7d4a:	f00e f802 	bl	15d52 <k_work_submit_to_queue>
}
    7d4e:	e151      	b.n	7ff4 <usbd_event_transfer_data+0x300>
		switch (p_event->data.eptransfer.status) {
    7d50:	78e1      	ldrb	r1, [r4, #3]
    7d52:	b1a1      	cbz	r1, 7d7e <usbd_event_transfer_data+0x8a>
    7d54:	2903      	cmp	r1, #3
    7d56:	f000 814d 	beq.w	7ff4 <usbd_event_transfer_data+0x300>
    7d5a:	4aab      	ldr	r2, [pc, #684]	; (8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>)
    7d5c:	4bab      	ldr	r3, [pc, #684]	; (800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>)
    7d5e:	1ad2      	subs	r2, r2, r3
    7d60:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    7d62:	f04f 0300 	mov.w	r3, #0
    7d66:	2001      	movs	r0, #1
    7d68:	f360 0302 	bfi	r3, r0, #0, #3
    7d6c:	f36f 03c5 	bfc	r3, #3, #3
    7d70:	f362 138f 	bfi	r3, r2, #6, #10
    7d74:	4632      	mov	r2, r6
    7d76:	48a6      	ldr	r0, [pc, #664]	; (8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    7d78:	f7fb fad0 	bl	331c <log_2>
    7d7c:	e13a      	b.n	7ff4 <usbd_event_transfer_data+0x300>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    7d7e:	2200      	movs	r2, #0
    7d80:	2300      	movs	r3, #0
    7d82:	a901      	add	r1, sp, #4
    7d84:	489c      	ldr	r0, [pc, #624]	; (7ff8 <usbd_event_transfer_data+0x304>)
    7d86:	f007 fe9f 	bl	fac8 <k_mem_slab_alloc>
    7d8a:	b9a0      	cbnz	r0, 7db6 <usbd_event_transfer_data+0xc2>
	ev = (struct usbd_event *)block.data;
    7d8c:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    7d8e:	6064      	str	r4, [r4, #4]
			if (!ev) {
    7d90:	2c00      	cmp	r4, #0
    7d92:	f000 812f 	beq.w	7ff4 <usbd_event_transfer_data+0x300>
			ep_ctx->write_in_progress = false;
    7d96:	2300      	movs	r3, #0
    7d98:	77ab      	strb	r3, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    7d9a:	2301      	movs	r3, #1
    7d9c:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    7d9e:	2303      	movs	r3, #3
    7da0:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    7da2:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    7da4:	4621      	mov	r1, r4
    7da6:	4895      	ldr	r0, [pc, #596]	; (7ffc <usbd_event_transfer_data+0x308>)
    7da8:	f00d ffb2 	bl	15d10 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    7dac:	4994      	ldr	r1, [pc, #592]	; (8000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>)
    7dae:	4895      	ldr	r0, [pc, #596]	; (8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>)
    7db0:	f00d ffcf 	bl	15d52 <k_work_submit_to_queue>
}
    7db4:	e11e      	b.n	7ff4 <usbd_event_transfer_data+0x300>
    7db6:	4b94      	ldr	r3, [pc, #592]	; (8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>)
    7db8:	4a94      	ldr	r2, [pc, #592]	; (800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>)
    7dba:	1a9b      	subs	r3, r3, r2
    7dbc:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    7dbe:	f04f 0100 	mov.w	r1, #0
    7dc2:	2201      	movs	r2, #1
    7dc4:	f362 0102 	bfi	r1, r2, #0, #3
    7dc8:	f36f 01c5 	bfc	r1, #3, #3
    7dcc:	f363 118f 	bfi	r1, r3, #6, #10
    7dd0:	4890      	ldr	r0, [pc, #576]	; (8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>)
    7dd2:	f7fb fb01 	bl	33d8 <log_0>
static inline void usbd_evt_flush(void)
    7dd6:	e000      	b.n	7dda <usbd_event_transfer_data+0xe6>
	} while (ev != NULL);
    7dd8:	b164      	cbz	r4, 7df4 <usbd_event_transfer_data+0x100>
    7dda:	2200      	movs	r2, #0
    7ddc:	2300      	movs	r3, #0
    7dde:	4887      	ldr	r0, [pc, #540]	; (7ffc <usbd_event_transfer_data+0x308>)
    7de0:	f008 f87a 	bl	fed8 <z_impl_k_queue_get>
		if (ev) {
    7de4:	4604      	mov	r4, r0
    7de6:	2800      	cmp	r0, #0
    7de8:	d0f6      	beq.n	7dd8 <usbd_event_transfer_data+0xe4>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    7dea:	1d01      	adds	r1, r0, #4
    7dec:	4882      	ldr	r0, [pc, #520]	; (7ff8 <usbd_event_transfer_data+0x304>)
    7dee:	f00d fe6c 	bl	15aca <k_mem_slab_free>
}
    7df2:	e7f1      	b.n	7dd8 <usbd_event_transfer_data+0xe4>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    7df4:	2200      	movs	r2, #0
    7df6:	2300      	movs	r3, #0
    7df8:	a901      	add	r1, sp, #4
    7dfa:	487f      	ldr	r0, [pc, #508]	; (7ff8 <usbd_event_transfer_data+0x304>)
    7dfc:	f007 fe64 	bl	fac8 <k_mem_slab_alloc>
    7e00:	b180      	cbz	r0, 7e24 <usbd_event_transfer_data+0x130>
    7e02:	4b81      	ldr	r3, [pc, #516]	; (8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>)
    7e04:	4a81      	ldr	r2, [pc, #516]	; (800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>)
    7e06:	1a9b      	subs	r3, r3, r2
    7e08:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    7e0a:	f04f 0100 	mov.w	r1, #0
    7e0e:	2201      	movs	r2, #1
    7e10:	f362 0102 	bfi	r1, r2, #0, #3
    7e14:	f36f 01c5 	bfc	r1, #3, #3
    7e18:	f363 118f 	bfi	r1, r3, #6, #10
    7e1c:	487e      	ldr	r0, [pc, #504]	; (8018 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18>)
    7e1e:	f7fb fadb 	bl	33d8 <log_0>
			return NULL;
    7e22:	e7b5      	b.n	7d90 <usbd_event_transfer_data+0x9c>
		ev = (struct usbd_event *)block.data;
    7e24:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    7e26:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    7e28:	2304      	movs	r3, #4
    7e2a:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    7e2c:	4873      	ldr	r0, [pc, #460]	; (7ffc <usbd_event_transfer_data+0x308>)
    7e2e:	f00d ff6f 	bl	15d10 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    7e32:	4973      	ldr	r1, [pc, #460]	; (8000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>)
    7e34:	4873      	ldr	r0, [pc, #460]	; (8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>)
    7e36:	f00d ff8c 	bl	15d52 <k_work_submit_to_queue>
		return NULL;
    7e3a:	e7a9      	b.n	7d90 <usbd_event_transfer_data+0x9c>
    7e3c:	4b72      	ldr	r3, [pc, #456]	; (8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>)
    7e3e:	4a73      	ldr	r2, [pc, #460]	; (800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>)
    7e40:	1a9b      	subs	r3, r3, r2
    7e42:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    7e44:	f04f 0100 	mov.w	r1, #0
    7e48:	2201      	movs	r2, #1
    7e4a:	f362 0102 	bfi	r1, r2, #0, #3
    7e4e:	f36f 01c5 	bfc	r1, #3, #3
    7e52:	f363 118f 	bfi	r1, r3, #6, #10
    7e56:	486f      	ldr	r0, [pc, #444]	; (8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>)
    7e58:	f7fb fabe 	bl	33d8 <log_0>
static inline void usbd_evt_flush(void)
    7e5c:	e004      	b.n	7e68 <usbd_event_transfer_data+0x174>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    7e5e:	1d01      	adds	r1, r0, #4
    7e60:	4865      	ldr	r0, [pc, #404]	; (7ff8 <usbd_event_transfer_data+0x304>)
    7e62:	f00d fe32 	bl	15aca <k_mem_slab_free>
	} while (ev != NULL);
    7e66:	b144      	cbz	r4, 7e7a <usbd_event_transfer_data+0x186>
    7e68:	2200      	movs	r2, #0
    7e6a:	2300      	movs	r3, #0
    7e6c:	4863      	ldr	r0, [pc, #396]	; (7ffc <usbd_event_transfer_data+0x308>)
    7e6e:	f008 f833 	bl	fed8 <z_impl_k_queue_get>
		if (ev) {
    7e72:	4604      	mov	r4, r0
    7e74:	2800      	cmp	r0, #0
    7e76:	d1f2      	bne.n	7e5e <usbd_event_transfer_data+0x16a>
    7e78:	e7f5      	b.n	7e66 <usbd_event_transfer_data+0x172>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    7e7a:	2200      	movs	r2, #0
    7e7c:	2300      	movs	r3, #0
    7e7e:	a901      	add	r1, sp, #4
    7e80:	485d      	ldr	r0, [pc, #372]	; (7ff8 <usbd_event_transfer_data+0x304>)
    7e82:	f007 fe21 	bl	fac8 <k_mem_slab_alloc>
    7e86:	b180      	cbz	r0, 7eaa <usbd_event_transfer_data+0x1b6>
    7e88:	4b5f      	ldr	r3, [pc, #380]	; (8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>)
    7e8a:	4a60      	ldr	r2, [pc, #384]	; (800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>)
    7e8c:	1a9b      	subs	r3, r3, r2
    7e8e:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    7e90:	f04f 0100 	mov.w	r1, #0
    7e94:	2201      	movs	r2, #1
    7e96:	f362 0102 	bfi	r1, r2, #0, #3
    7e9a:	f36f 01c5 	bfc	r1, #3, #3
    7e9e:	f363 118f 	bfi	r1, r3, #6, #10
    7ea2:	485d      	ldr	r0, [pc, #372]	; (8018 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18>)
    7ea4:	f7fb fa98 	bl	33d8 <log_0>
			return NULL;
    7ea8:	e741      	b.n	7d2e <usbd_event_transfer_data+0x3a>
		ev = (struct usbd_event *)block.data;
    7eaa:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    7eac:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    7eae:	2304      	movs	r3, #4
    7eb0:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    7eb2:	4852      	ldr	r0, [pc, #328]	; (7ffc <usbd_event_transfer_data+0x308>)
    7eb4:	f00d ff2c 	bl	15d10 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    7eb8:	4951      	ldr	r1, [pc, #324]	; (8000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>)
    7eba:	4852      	ldr	r0, [pc, #328]	; (8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>)
    7ebc:	f00d ff49 	bl	15d52 <k_work_submit_to_queue>
		return NULL;
    7ec0:	e735      	b.n	7d2e <usbd_event_transfer_data+0x3a>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    7ec2:	2200      	movs	r2, #0
    7ec4:	2300      	movs	r3, #0
    7ec6:	a901      	add	r1, sp, #4
    7ec8:	484b      	ldr	r0, [pc, #300]	; (7ff8 <usbd_event_transfer_data+0x304>)
    7eca:	f007 fdfd 	bl	fac8 <k_mem_slab_alloc>
    7ece:	b9f0      	cbnz	r0, 7f0e <usbd_event_transfer_data+0x21a>
	ev = (struct usbd_event *)block.data;
    7ed0:	9e01      	ldr	r6, [sp, #4]
	ev->block = block;
    7ed2:	6076      	str	r6, [r6, #4]
			if (!ev) {
    7ed4:	2e00      	cmp	r6, #0
    7ed6:	f000 808d 	beq.w	7ff4 <usbd_event_transfer_data+0x300>
				p_event->data.eptransfer.ep);
    7eda:	78a3      	ldrb	r3, [r4, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    7edc:	f994 2002 	ldrsb.w	r2, [r4, #2]
    7ee0:	2a00      	cmp	r2, #0
    7ee2:	db57      	blt.n	7f94 <usbd_event_transfer_data+0x2a0>
            ret = p_reg->EPIN[epnr].AMOUNT;
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    7ee4:	f013 0f08 	tst.w	r3, #8
    7ee8:	d067      	beq.n	7fba <usbd_event_transfer_data+0x2c6>
        {
            ret = p_reg->ISOOUT.AMOUNT;
    7eea:	4b4c      	ldr	r3, [pc, #304]	; (801c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>)
    7eec:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
    7ef0:	60eb      	str	r3, [r5, #12]
			ev->evt_type = USBD_EVT_EP;
    7ef2:	2301      	movs	r3, #1
    7ef4:	7433      	strb	r3, [r6, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    7ef6:	2302      	movs	r3, #2
    7ef8:	7333      	strb	r3, [r6, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    7efa:	60b5      	str	r5, [r6, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    7efc:	4631      	mov	r1, r6
    7efe:	483f      	ldr	r0, [pc, #252]	; (7ffc <usbd_event_transfer_data+0x308>)
    7f00:	f00d ff06 	bl	15d10 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    7f04:	493e      	ldr	r1, [pc, #248]	; (8000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>)
    7f06:	483f      	ldr	r0, [pc, #252]	; (8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>)
    7f08:	f00d ff23 	bl	15d52 <k_work_submit_to_queue>
}
    7f0c:	e072      	b.n	7ff4 <usbd_event_transfer_data+0x300>
    7f0e:	4b3e      	ldr	r3, [pc, #248]	; (8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>)
    7f10:	4a3e      	ldr	r2, [pc, #248]	; (800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>)
    7f12:	1a9b      	subs	r3, r3, r2
    7f14:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    7f16:	f04f 0100 	mov.w	r1, #0
    7f1a:	2201      	movs	r2, #1
    7f1c:	f362 0102 	bfi	r1, r2, #0, #3
    7f20:	f36f 01c5 	bfc	r1, #3, #3
    7f24:	f363 118f 	bfi	r1, r3, #6, #10
    7f28:	483a      	ldr	r0, [pc, #232]	; (8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>)
    7f2a:	f7fb fa55 	bl	33d8 <log_0>
static inline void usbd_evt_flush(void)
    7f2e:	e004      	b.n	7f3a <usbd_event_transfer_data+0x246>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    7f30:	1d01      	adds	r1, r0, #4
    7f32:	4831      	ldr	r0, [pc, #196]	; (7ff8 <usbd_event_transfer_data+0x304>)
    7f34:	f00d fdc9 	bl	15aca <k_mem_slab_free>
	} while (ev != NULL);
    7f38:	b146      	cbz	r6, 7f4c <usbd_event_transfer_data+0x258>
    7f3a:	2200      	movs	r2, #0
    7f3c:	2300      	movs	r3, #0
    7f3e:	482f      	ldr	r0, [pc, #188]	; (7ffc <usbd_event_transfer_data+0x308>)
    7f40:	f007 ffca 	bl	fed8 <z_impl_k_queue_get>
		if (ev) {
    7f44:	4606      	mov	r6, r0
    7f46:	2800      	cmp	r0, #0
    7f48:	d1f2      	bne.n	7f30 <usbd_event_transfer_data+0x23c>
    7f4a:	e7f5      	b.n	7f38 <usbd_event_transfer_data+0x244>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    7f4c:	2200      	movs	r2, #0
    7f4e:	2300      	movs	r3, #0
    7f50:	a901      	add	r1, sp, #4
    7f52:	4829      	ldr	r0, [pc, #164]	; (7ff8 <usbd_event_transfer_data+0x304>)
    7f54:	f007 fdb8 	bl	fac8 <k_mem_slab_alloc>
    7f58:	b180      	cbz	r0, 7f7c <usbd_event_transfer_data+0x288>
    7f5a:	4b2b      	ldr	r3, [pc, #172]	; (8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>)
    7f5c:	4a2b      	ldr	r2, [pc, #172]	; (800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>)
    7f5e:	1a9b      	subs	r3, r3, r2
    7f60:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    7f62:	f04f 0100 	mov.w	r1, #0
    7f66:	2201      	movs	r2, #1
    7f68:	f362 0102 	bfi	r1, r2, #0, #3
    7f6c:	f36f 01c5 	bfc	r1, #3, #3
    7f70:	f363 118f 	bfi	r1, r3, #6, #10
    7f74:	4828      	ldr	r0, [pc, #160]	; (8018 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18>)
    7f76:	f7fb fa2f 	bl	33d8 <log_0>
			return NULL;
    7f7a:	e7ab      	b.n	7ed4 <usbd_event_transfer_data+0x1e0>
		ev = (struct usbd_event *)block.data;
    7f7c:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    7f7e:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    7f80:	2304      	movs	r3, #4
    7f82:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    7f84:	481d      	ldr	r0, [pc, #116]	; (7ffc <usbd_event_transfer_data+0x308>)
    7f86:	f00d fec3 	bl	15d10 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    7f8a:	491d      	ldr	r1, [pc, #116]	; (8000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>)
    7f8c:	481d      	ldr	r0, [pc, #116]	; (8004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>)
    7f8e:	f00d fee0 	bl	15d52 <k_work_submit_to_queue>
		return NULL;
    7f92:	e79f      	b.n	7ed4 <usbd_event_transfer_data+0x1e0>
        if (NRF_USBD_EPISO_CHECK(ep))
    7f94:	f013 0f08 	tst.w	r3, #8
    7f98:	d003      	beq.n	7fa2 <usbd_event_transfer_data+0x2ae>
            ret = p_reg->ISOIN.AMOUNT;
    7f9a:	4b20      	ldr	r3, [pc, #128]	; (801c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>)
    7f9c:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
    7fa0:	e7a6      	b.n	7ef0 <usbd_event_transfer_data+0x1fc>
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    7fa2:	f003 030f 	and.w	r3, r3, #15
            ret = p_reg->EPIN[epnr].AMOUNT;
    7fa6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7faa:	009b      	lsls	r3, r3, #2
    7fac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7fb0:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    7fb4:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    7fb8:	e79a      	b.n	7ef0 <usbd_event_transfer_data+0x1fc>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    7fba:	f003 030f 	and.w	r3, r3, #15
            ret = p_reg->EPOUT[epnr].AMOUNT;
    7fbe:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    7fc2:	009b      	lsls	r3, r3, #2
    7fc4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7fc8:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    7fcc:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    7fd0:	e78e      	b.n	7ef0 <usbd_event_transfer_data+0x1fc>
    7fd2:	4a0d      	ldr	r2, [pc, #52]	; (8008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>)
    7fd4:	4b0d      	ldr	r3, [pc, #52]	; (800c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>)
    7fd6:	1ad2      	subs	r2, r2, r3
    7fd8:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    7fda:	f04f 0300 	mov.w	r3, #0
    7fde:	2001      	movs	r0, #1
    7fe0:	f360 0302 	bfi	r3, r0, #0, #3
    7fe4:	f36f 03c5 	bfc	r3, #3, #3
    7fe8:	f362 138f 	bfi	r3, r2, #6, #10
    7fec:	4632      	mov	r2, r6
    7fee:	4808      	ldr	r0, [pc, #32]	; (8010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    7ff0:	f7fb f994 	bl	331c <log_2>
}
    7ff4:	b002      	add	sp, #8
    7ff6:	bd70      	pop	{r4, r5, r6, pc}
    7ff8:	2000034c 	.word	0x2000034c
    7ffc:	20000450 	.word	0x20000450
    8000:	20002460 	.word	0x20002460
    8004:	20000738 	.word	0x20000738
    8008:	00016650 	.word	0x00016650
    800c:	000165d8 	.word	0x000165d8
    8010:	000177e8 	.word	0x000177e8
    8014:	000176e8 	.word	0x000176e8
    8018:	00017708 	.word	0x00017708
    801c:	40027000 	.word	0x40027000

00008020 <usbd_event_handler>:
{
    8020:	b510      	push	{r4, lr}
    8022:	b088      	sub	sp, #32
	struct usbd_event evt = {0};
    8024:	2300      	movs	r3, #0
    8026:	9303      	str	r3, [sp, #12]
    8028:	9304      	str	r3, [sp, #16]
    802a:	9305      	str	r3, [sp, #20]
    802c:	9306      	str	r3, [sp, #24]
    802e:	9307      	str	r3, [sp, #28]
	switch (p_event->type) {
    8030:	7803      	ldrb	r3, [r0, #0]
    8032:	3b01      	subs	r3, #1
    8034:	2b05      	cmp	r3, #5
    8036:	d826      	bhi.n	8086 <usbd_event_handler+0x66>
    8038:	e8df f003 	tbb	[pc, r3]
    803c:	2e270335 	.word	0x2e270335
    8040:	3953      	.short	0x3953
		evt.evt_type = USBD_EVT_POWER;
    8042:	2300      	movs	r3, #0
    8044:	f88d 301c 	strb.w	r3, [sp, #28]
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    8048:	2303      	movs	r3, #3
    804a:	f88d 3014 	strb.w	r3, [sp, #20]
	if (k_mem_slab_alloc(&fifo_elem_slab,
    804e:	2200      	movs	r2, #0
    8050:	2300      	movs	r3, #0
    8052:	a901      	add	r1, sp, #4
    8054:	4850      	ldr	r0, [pc, #320]	; (8198 <usbd_event_handler+0x178>)
    8056:	f007 fd37 	bl	fac8 <k_mem_slab_alloc>
    805a:	2800      	cmp	r0, #0
    805c:	d159      	bne.n	8112 <usbd_event_handler+0xf2>
	ev = (struct usbd_event *)block.data;
    805e:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    8060:	6064      	str	r4, [r4, #4]
		if (!ev) {
    8062:	b184      	cbz	r4, 8086 <usbd_event_handler+0x66>
		ev->evt_type = evt.evt_type;
    8064:	f89d 301c 	ldrb.w	r3, [sp, #28]
    8068:	7423      	strb	r3, [r4, #16]
		ev->evt = evt.evt;
    806a:	f104 0308 	add.w	r3, r4, #8
    806e:	9906      	ldr	r1, [sp, #24]
    8070:	9805      	ldr	r0, [sp, #20]
    8072:	e883 0003 	stmia.w	r3, {r0, r1}
	k_fifo_put(&usbd_evt_fifo, ev);
    8076:	4621      	mov	r1, r4
    8078:	4848      	ldr	r0, [pc, #288]	; (819c <usbd_event_handler+0x17c>)
    807a:	f00d fe49 	bl	15d10 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    807e:	4948      	ldr	r1, [pc, #288]	; (81a0 <usbd_event_handler+0x180>)
    8080:	4848      	ldr	r0, [pc, #288]	; (81a4 <usbd_event_handler+0x184>)
    8082:	f00d fe66 	bl	15d52 <k_work_submit_to_queue>
}
    8086:	b008      	add	sp, #32
    8088:	bd10      	pop	{r4, pc}
		evt.evt_type = USBD_EVT_POWER;
    808a:	2300      	movs	r3, #0
    808c:	f88d 301c 	strb.w	r3, [sp, #28]
		evt.evt.pwr_evt.state = USBD_RESUMED;
    8090:	2304      	movs	r3, #4
    8092:	f88d 3014 	strb.w	r3, [sp, #20]
	if (put_evt) {
    8096:	e7da      	b.n	804e <usbd_event_handler+0x2e>
		evt.evt_type = USBD_EVT_POWER;
    8098:	2300      	movs	r3, #0
    809a:	f88d 301c 	strb.w	r3, [sp, #28]
		evt.evt.pwr_evt.state = USBD_RESUMED;
    809e:	2304      	movs	r3, #4
    80a0:	f88d 3014 	strb.w	r3, [sp, #20]
	if (put_evt) {
    80a4:	e7d3      	b.n	804e <usbd_event_handler+0x2e>
		evt.evt_type = USBD_EVT_RESET;
    80a6:	2302      	movs	r3, #2
    80a8:	f88d 301c 	strb.w	r3, [sp, #28]
	if (put_evt) {
    80ac:	e7cf      	b.n	804e <usbd_event_handler+0x2e>
    80ae:	4604      	mov	r4, r0
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    80b0:	7880      	ldrb	r0, [r0, #2]
    80b2:	f7ff f8eb 	bl	728c <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    80b6:	7a83      	ldrb	r3, [r0, #10]
    80b8:	2b01      	cmp	r3, #1
    80ba:	d00e      	beq.n	80da <usbd_event_handler+0xba>
    80bc:	d805      	bhi.n	80ca <usbd_event_handler+0xaa>
    80be:	2b00      	cmp	r3, #0
    80c0:	d1e1      	bne.n	8086 <usbd_event_handler+0x66>
			usbd_event_transfer_ctrl(p_event);
    80c2:	4620      	mov	r0, r4
    80c4:	f7ff fc7e 	bl	79c4 <usbd_event_transfer_ctrl>
	if (put_evt) {
    80c8:	e7dd      	b.n	8086 <usbd_event_handler+0x66>
    80ca:	3b02      	subs	r3, #2
    80cc:	b2db      	uxtb	r3, r3
    80ce:	2b01      	cmp	r3, #1
    80d0:	d8d9      	bhi.n	8086 <usbd_event_handler+0x66>
			usbd_event_transfer_data(p_event);
    80d2:	4620      	mov	r0, r4
    80d4:	f7ff fe0e 	bl	7cf4 <usbd_event_transfer_data>
	if (put_evt) {
    80d8:	e7d5      	b.n	8086 <usbd_event_handler+0x66>
			usbd_event_transfer_data(p_event);
    80da:	4620      	mov	r0, r4
    80dc:	f7ff fe0a 	bl	7cf4 <usbd_event_transfer_data>
	if (put_evt) {
    80e0:	e7d1      	b.n	8086 <usbd_event_handler+0x66>
		nrfx_usbd_setup_get(&drv_setup);
    80e2:	a801      	add	r0, sp, #4
    80e4:	f004 f806 	bl	c0f4 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
    80e8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    80ec:	2b05      	cmp	r3, #5
    80ee:	d00a      	beq.n	8106 <usbd_event_handler+0xe6>
				endpoint_ctx(NRF_USBD_EPOUT(0));
    80f0:	2000      	movs	r0, #0
    80f2:	f7ff f8cb 	bl	728c <endpoint_ctx>
			evt.evt_type = USBD_EVT_EP;
    80f6:	2301      	movs	r3, #1
    80f8:	f88d 301c 	strb.w	r3, [sp, #28]
			evt.evt.ep_evt.ep = ep_ctx;
    80fc:	9005      	str	r0, [sp, #20]
			evt.evt.ep_evt.evt_type = EP_EVT_SETUP_RECV;
    80fe:	2300      	movs	r3, #0
    8100:	f88d 3018 	strb.w	r3, [sp, #24]
	if (put_evt) {
    8104:	e7a3      	b.n	804e <usbd_event_handler+0x2e>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
    8106:	f89d 3004 	ldrb.w	r3, [sp, #4]
    810a:	f013 0f60 	tst.w	r3, #96	; 0x60
    810e:	d0ba      	beq.n	8086 <usbd_event_handler+0x66>
    8110:	e7ee      	b.n	80f0 <usbd_event_handler+0xd0>
    8112:	4b25      	ldr	r3, [pc, #148]	; (81a8 <usbd_event_handler+0x188>)
    8114:	4a25      	ldr	r2, [pc, #148]	; (81ac <usbd_event_handler+0x18c>)
    8116:	1a9b      	subs	r3, r3, r2
    8118:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    811a:	f04f 0100 	mov.w	r1, #0
    811e:	2201      	movs	r2, #1
    8120:	f362 0102 	bfi	r1, r2, #0, #3
    8124:	f36f 01c5 	bfc	r1, #3, #3
    8128:	f363 118f 	bfi	r1, r3, #6, #10
    812c:	4820      	ldr	r0, [pc, #128]	; (81b0 <usbd_event_handler+0x190>)
    812e:	f7fb f953 	bl	33d8 <log_0>
static inline void usbd_evt_flush(void)
    8132:	e004      	b.n	813e <usbd_event_handler+0x11e>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    8134:	1d01      	adds	r1, r0, #4
    8136:	4818      	ldr	r0, [pc, #96]	; (8198 <usbd_event_handler+0x178>)
    8138:	f00d fcc7 	bl	15aca <k_mem_slab_free>
	} while (ev != NULL);
    813c:	b144      	cbz	r4, 8150 <usbd_event_handler+0x130>
    813e:	2200      	movs	r2, #0
    8140:	2300      	movs	r3, #0
    8142:	4816      	ldr	r0, [pc, #88]	; (819c <usbd_event_handler+0x17c>)
    8144:	f007 fec8 	bl	fed8 <z_impl_k_queue_get>
		if (ev) {
    8148:	4604      	mov	r4, r0
    814a:	2800      	cmp	r0, #0
    814c:	d1f2      	bne.n	8134 <usbd_event_handler+0x114>
    814e:	e7f5      	b.n	813c <usbd_event_handler+0x11c>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    8150:	2200      	movs	r2, #0
    8152:	2300      	movs	r3, #0
    8154:	a901      	add	r1, sp, #4
    8156:	4810      	ldr	r0, [pc, #64]	; (8198 <usbd_event_handler+0x178>)
    8158:	f007 fcb6 	bl	fac8 <k_mem_slab_alloc>
    815c:	b180      	cbz	r0, 8180 <usbd_event_handler+0x160>
    815e:	4b12      	ldr	r3, [pc, #72]	; (81a8 <usbd_event_handler+0x188>)
    8160:	4a12      	ldr	r2, [pc, #72]	; (81ac <usbd_event_handler+0x18c>)
    8162:	1a9b      	subs	r3, r3, r2
    8164:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    8166:	f04f 0100 	mov.w	r1, #0
    816a:	2201      	movs	r2, #1
    816c:	f362 0102 	bfi	r1, r2, #0, #3
    8170:	f36f 01c5 	bfc	r1, #3, #3
    8174:	f363 118f 	bfi	r1, r3, #6, #10
    8178:	480e      	ldr	r0, [pc, #56]	; (81b4 <usbd_event_handler+0x194>)
    817a:	f7fb f92d 	bl	33d8 <log_0>
			return NULL;
    817e:	e770      	b.n	8062 <usbd_event_handler+0x42>
		ev = (struct usbd_event *)block.data;
    8180:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    8182:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    8184:	2304      	movs	r3, #4
    8186:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    8188:	4804      	ldr	r0, [pc, #16]	; (819c <usbd_event_handler+0x17c>)
    818a:	f00d fdc1 	bl	15d10 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    818e:	4904      	ldr	r1, [pc, #16]	; (81a0 <usbd_event_handler+0x180>)
    8190:	4804      	ldr	r0, [pc, #16]	; (81a4 <usbd_event_handler+0x184>)
    8192:	f00d fdde 	bl	15d52 <k_work_submit_to_queue>
		return NULL;
    8196:	e764      	b.n	8062 <usbd_event_handler+0x42>
    8198:	2000034c 	.word	0x2000034c
    819c:	20000450 	.word	0x20000450
    81a0:	20002460 	.word	0x20002460
    81a4:	20000738 	.word	0x20000738
    81a8:	00016650 	.word	0x00016650
    81ac:	000165d8 	.word	0x000165d8
    81b0:	000176e8 	.word	0x000176e8
    81b4:	00017708 	.word	0x00017708

000081b8 <usb_dc_attach>:
{
    81b8:	b510      	push	{r4, lr}
	if (ctx->attached) {
    81ba:	4b1d      	ldr	r3, [pc, #116]	; (8230 <usb_dc_attach+0x78>)
    81bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    81c0:	b113      	cbz	r3, 81c8 <usb_dc_attach+0x10>
		return 0;
    81c2:	2400      	movs	r4, #0
}
    81c4:	4620      	mov	r0, r4
    81c6:	bd10      	pop	{r4, pc}
	return z_impl_k_mutex_init(mutex);
    81c8:	4c19      	ldr	r4, [pc, #100]	; (8230 <usb_dc_attach+0x78>)
    81ca:	f104 0038 	add.w	r0, r4, #56	; 0x38
    81ce:	f00d fd1b 	bl	15c08 <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
    81d2:	2000      	movs	r0, #0
    81d4:	f000 fd36 	bl	8c44 <z_nrf_clock_control_get_onoff>
	ctx->hfxo_mgr =
    81d8:	61e0      	str	r0, [r4, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    81da:	2200      	movs	r2, #0
    81dc:	2101      	movs	r1, #1
    81de:	2027      	movs	r0, #39	; 0x27
    81e0:	f7fd fb38 	bl	5854 <z_arm_irq_priority_set>
	err = nrfx_usbd_init(usbd_event_handler);
    81e4:	4813      	ldr	r0, [pc, #76]	; (8234 <usb_dc_attach+0x7c>)
    81e6:	f003 fb0d 	bl	b804 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
    81ea:	4b13      	ldr	r3, [pc, #76]	; (8238 <usb_dc_attach+0x80>)
    81ec:	4298      	cmp	r0, r3
    81ee:	d11b      	bne.n	8228 <usb_dc_attach+0x70>
	nrfx_power_usbevt_enable();
    81f0:	f00c f8a0 	bl	14334 <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
    81f4:	f7ff f87e 	bl	72f4 <eps_ctx_init>
	if (ret == 0) {
    81f8:	4604      	mov	r4, r0
    81fa:	b918      	cbnz	r0, 8204 <usb_dc_attach+0x4c>
		ctx->attached = true;
    81fc:	4b0c      	ldr	r3, [pc, #48]	; (8230 <usb_dc_attach+0x78>)
    81fe:	2201      	movs	r2, #1
    8200:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
    8204:	4b0d      	ldr	r3, [pc, #52]	; (823c <usb_dc_attach+0x84>)
    8206:	681b      	ldr	r3, [r3, #0]
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
    8208:	b11b      	cbz	r3, 8212 <usb_dc_attach+0x5a>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    820a:	490d      	ldr	r1, [pc, #52]	; (8240 <usb_dc_attach+0x88>)
    820c:	480d      	ldr	r0, [pc, #52]	; (8244 <usb_dc_attach+0x8c>)
    820e:	f00d fda0 	bl	15d52 <k_work_submit_to_queue>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
    8212:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8216:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
    821a:	f013 0f01 	tst.w	r3, #1
    821e:	d0d1      	beq.n	81c4 <usb_dc_attach+0xc>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
    8220:	2000      	movs	r0, #0
    8222:	f7ff f935 	bl	7490 <usb_dc_power_event_handler>
    8226:	e7cd      	b.n	81c4 <usb_dc_attach+0xc>
		return -EIO;
    8228:	f06f 0404 	mvn.w	r4, #4
    822c:	e7ca      	b.n	81c4 <usb_dc_attach+0xc>
    822e:	bf00      	nop
    8230:	20002438 	.word	0x20002438
    8234:	00008021 	.word	0x00008021
    8238:	0bad0000 	.word	0x0bad0000
    823c:	20000450 	.word	0x20000450
    8240:	20002460 	.word	0x20002460
    8244:	20000738 	.word	0x20000738

00008248 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
    8248:	4b07      	ldr	r3, [pc, #28]	; (8268 <usb_dc_set_address+0x20>)
    824a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    824e:	b12b      	cbz	r3, 825c <usb_dc_set_address+0x14>
	return get_usbd_ctx()->ready;
    8250:	4b05      	ldr	r3, [pc, #20]	; (8268 <usb_dc_set_address+0x20>)
    8252:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    8256:	b123      	cbz	r3, 8262 <usb_dc_set_address+0x1a>
	return 0;
    8258:	2000      	movs	r0, #0
    825a:	4770      	bx	lr
		return -ENODEV;
    825c:	f06f 0012 	mvn.w	r0, #18
    8260:	4770      	bx	lr
    8262:	f06f 0012 	mvn.w	r0, #18
}
    8266:	4770      	bx	lr
    8268:	20002438 	.word	0x20002438

0000826c <usb_dc_ep_check_cap>:
{
    826c:	b508      	push	{r3, lr}
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    826e:	7801      	ldrb	r1, [r0, #0]
    8270:	f001 020f 	and.w	r2, r1, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    8274:	7903      	ldrb	r3, [r0, #4]
    8276:	b903      	cbnz	r3, 827a <usb_dc_ep_check_cap+0xe>
    8278:	b92a      	cbnz	r2, 8286 <usb_dc_ep_check_cap+0x1a>
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    827a:	2a08      	cmp	r2, #8
    827c:	d816      	bhi.n	82ac <usb_dc_ep_check_cap+0x40>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    827e:	2b01      	cmp	r3, #1
    8280:	d027      	beq.n	82d2 <usb_dc_ep_check_cap+0x66>
	return 0;
    8282:	2000      	movs	r0, #0
}
    8284:	bd08      	pop	{r3, pc}
    8286:	4b17      	ldr	r3, [pc, #92]	; (82e4 <usb_dc_ep_check_cap+0x78>)
    8288:	4a17      	ldr	r2, [pc, #92]	; (82e8 <usb_dc_ep_check_cap+0x7c>)
    828a:	1a9b      	subs	r3, r3, r2
    828c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("invalid endpoint configuration");
    828e:	f04f 0100 	mov.w	r1, #0
    8292:	2201      	movs	r2, #1
    8294:	f362 0102 	bfi	r1, r2, #0, #3
    8298:	f36f 01c5 	bfc	r1, #3, #3
    829c:	f363 118f 	bfi	r1, r3, #6, #10
    82a0:	4812      	ldr	r0, [pc, #72]	; (82ec <usb_dc_ep_check_cap+0x80>)
    82a2:	f7fb f899 	bl	33d8 <log_0>
		return -1;
    82a6:	f04f 30ff 	mov.w	r0, #4294967295
    82aa:	e7eb      	b.n	8284 <usb_dc_ep_check_cap+0x18>
    82ac:	4b0d      	ldr	r3, [pc, #52]	; (82e4 <usb_dc_ep_check_cap+0x78>)
    82ae:	4a0e      	ldr	r2, [pc, #56]	; (82e8 <usb_dc_ep_check_cap+0x7c>)
    82b0:	1a9b      	subs	r3, r3, r2
    82b2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("invalid endpoint index/address");
    82b4:	f04f 0100 	mov.w	r1, #0
    82b8:	2201      	movs	r2, #1
    82ba:	f362 0102 	bfi	r1, r2, #0, #3
    82be:	f36f 01c5 	bfc	r1, #3, #3
    82c2:	f363 118f 	bfi	r1, r3, #6, #10
    82c6:	480a      	ldr	r0, [pc, #40]	; (82f0 <usb_dc_ep_check_cap+0x84>)
    82c8:	f7fb f886 	bl	33d8 <log_0>
		return -1;
    82cc:	f04f 30ff 	mov.w	r0, #4294967295
    82d0:	e7d8      	b.n	8284 <usb_dc_ep_check_cap+0x18>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    82d2:	f011 0f08 	tst.w	r1, #8
    82d6:	d001      	beq.n	82dc <usb_dc_ep_check_cap+0x70>
	return 0;
    82d8:	2000      	movs	r0, #0
    82da:	e7d3      	b.n	8284 <usb_dc_ep_check_cap+0x18>
		return -1;
    82dc:	f04f 30ff 	mov.w	r0, #4294967295
    82e0:	e7d0      	b.n	8284 <usb_dc_ep_check_cap+0x18>
    82e2:	bf00      	nop
    82e4:	00016650 	.word	0x00016650
    82e8:	000165d8 	.word	0x000165d8
    82ec:	00017834 	.word	0x00017834
    82f0:	00017854 	.word	0x00017854

000082f4 <usb_dc_ep_configure>:
{
    82f4:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    82f6:	4b1a      	ldr	r3, [pc, #104]	; (8360 <usb_dc_ep_configure+0x6c>)
    82f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
    82fc:	b353      	cbz	r3, 8354 <usb_dc_ep_configure+0x60>
    82fe:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    8300:	7805      	ldrb	r5, [r0, #0]
    8302:	4628      	mov	r0, r5
    8304:	f7fe ffc2 	bl	728c <endpoint_ctx>
	if (!ep_ctx) {
    8308:	b338      	cbz	r0, 835a <usb_dc_ep_configure+0x66>
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    830a:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    830c:	7922      	ldrb	r2, [r4, #4]
    830e:	7282      	strb	r2, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    8310:	8862      	ldrh	r2, [r4, #2]
    8312:	6042      	str	r2, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    8314:	7820      	ldrb	r0, [r4, #0]
    8316:	f010 0f08 	tst.w	r0, #8
    831a:	d103      	bne.n	8324 <usb_dc_ep_configure+0x30>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    831c:	8863      	ldrh	r3, [r4, #2]
    831e:	1e5a      	subs	r2, r3, #1
    8320:	4213      	tst	r3, r2
    8322:	d104      	bne.n	832e <usb_dc_ep_configure+0x3a>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    8324:	8861      	ldrh	r1, [r4, #2]
    8326:	f003 fa5d 	bl	b7e4 <nrfx_usbd_ep_max_packet_size_set>
	return 0;
    832a:	2000      	movs	r0, #0
}
    832c:	bd38      	pop	{r3, r4, r5, pc}
    832e:	4b0d      	ldr	r3, [pc, #52]	; (8364 <usb_dc_ep_configure+0x70>)
    8330:	4a0d      	ldr	r2, [pc, #52]	; (8368 <usb_dc_ep_configure+0x74>)
    8332:	1a9b      	subs	r3, r3, r2
    8334:	08db      	lsrs	r3, r3, #3
			LOG_ERR("EP max packet size must be a power of 2");
    8336:	f04f 0100 	mov.w	r1, #0
    833a:	2201      	movs	r2, #1
    833c:	f362 0102 	bfi	r1, r2, #0, #3
    8340:	f36f 01c5 	bfc	r1, #3, #3
    8344:	f363 118f 	bfi	r1, r3, #6, #10
    8348:	4808      	ldr	r0, [pc, #32]	; (836c <usb_dc_ep_configure+0x78>)
    834a:	f7fb f845 	bl	33d8 <log_0>
			return -EINVAL;
    834e:	f06f 0015 	mvn.w	r0, #21
    8352:	e7eb      	b.n	832c <usb_dc_ep_configure+0x38>
		return -ENODEV;
    8354:	f06f 0012 	mvn.w	r0, #18
    8358:	e7e8      	b.n	832c <usb_dc_ep_configure+0x38>
		return -EINVAL;
    835a:	f06f 0015 	mvn.w	r0, #21
    835e:	e7e5      	b.n	832c <usb_dc_ep_configure+0x38>
    8360:	20002438 	.word	0x20002438
    8364:	00016650 	.word	0x00016650
    8368:	000165d8 	.word	0x000165d8
    836c:	00017874 	.word	0x00017874

00008370 <usb_dc_ep_set_stall>:
{
    8370:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    8372:	4b1e      	ldr	r3, [pc, #120]	; (83ec <usb_dc_ep_set_stall+0x7c>)
    8374:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    8378:	b37b      	cbz	r3, 83da <usb_dc_ep_set_stall+0x6a>
    837a:	4604      	mov	r4, r0
	return get_usbd_ctx()->ready;
    837c:	4b1b      	ldr	r3, [pc, #108]	; (83ec <usb_dc_ep_set_stall+0x7c>)
    837e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    8382:	b36b      	cbz	r3, 83e0 <usb_dc_ep_set_stall+0x70>
	ep_ctx = endpoint_ctx(ep);
    8384:	f7fe ff82 	bl	728c <endpoint_ctx>
	if (!ep_ctx) {
    8388:	4605      	mov	r5, r0
    838a:	b360      	cbz	r0, 83e6 <usb_dc_ep_set_stall+0x76>
	switch (ep_ctx->cfg.type) {
    838c:	7a83      	ldrb	r3, [r0, #10]
    838e:	2b01      	cmp	r3, #1
    8390:	d010      	beq.n	83b4 <usb_dc_ep_set_stall+0x44>
    8392:	d807      	bhi.n	83a4 <usb_dc_ep_set_stall+0x34>
    8394:	b90b      	cbnz	r3, 839a <usb_dc_ep_set_stall+0x2a>
		nrfx_usbd_setup_stall();
    8396:	f003 ff33 	bl	c200 <nrfx_usbd_setup_stall>
	ep_ctx->buf.len = 0U;
    839a:	2000      	movs	r0, #0
    839c:	60e8      	str	r0, [r5, #12]
	ep_ctx->buf.curr = ep_ctx->buf.data;
    839e:	696b      	ldr	r3, [r5, #20]
    83a0:	61ab      	str	r3, [r5, #24]
}
    83a2:	bd38      	pop	{r3, r4, r5, pc}
	switch (ep_ctx->cfg.type) {
    83a4:	3b02      	subs	r3, #2
    83a6:	b2db      	uxtb	r3, r3
    83a8:	2b01      	cmp	r3, #1
    83aa:	d8f6      	bhi.n	839a <usb_dc_ep_set_stall+0x2a>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    83ac:	4620      	mov	r0, r4
    83ae:	f003 fe6d 	bl	c08c <nrfx_usbd_ep_stall>
		break;
    83b2:	e7f2      	b.n	839a <usb_dc_ep_set_stall+0x2a>
    83b4:	4b0e      	ldr	r3, [pc, #56]	; (83f0 <usb_dc_ep_set_stall+0x80>)
    83b6:	4a0f      	ldr	r2, [pc, #60]	; (83f4 <usb_dc_ep_set_stall+0x84>)
    83b8:	1a9b      	subs	r3, r3, r2
    83ba:	08db      	lsrs	r3, r3, #3
		LOG_ERR("STALL unsupported on ISO endpoint");
    83bc:	f04f 0100 	mov.w	r1, #0
    83c0:	2201      	movs	r2, #1
    83c2:	f362 0102 	bfi	r1, r2, #0, #3
    83c6:	f36f 01c5 	bfc	r1, #3, #3
    83ca:	f363 118f 	bfi	r1, r3, #6, #10
    83ce:	480a      	ldr	r0, [pc, #40]	; (83f8 <usb_dc_ep_set_stall+0x88>)
    83d0:	f7fb f802 	bl	33d8 <log_0>
		return -EINVAL;
    83d4:	f06f 0015 	mvn.w	r0, #21
    83d8:	e7e3      	b.n	83a2 <usb_dc_ep_set_stall+0x32>
		return -ENODEV;
    83da:	f06f 0012 	mvn.w	r0, #18
    83de:	e7e0      	b.n	83a2 <usb_dc_ep_set_stall+0x32>
    83e0:	f06f 0012 	mvn.w	r0, #18
    83e4:	e7dd      	b.n	83a2 <usb_dc_ep_set_stall+0x32>
		return -EINVAL;
    83e6:	f06f 0015 	mvn.w	r0, #21
    83ea:	e7da      	b.n	83a2 <usb_dc_ep_set_stall+0x32>
    83ec:	20002438 	.word	0x20002438
    83f0:	00016650 	.word	0x00016650
    83f4:	000165d8 	.word	0x000165d8
    83f8:	0001789c 	.word	0x0001789c

000083fc <usb_dc_ep_clear_stall>:
	return get_usbd_ctx()->attached;
    83fc:	4b11      	ldr	r3, [pc, #68]	; (8444 <usb_dc_ep_clear_stall+0x48>)
    83fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    8402:	b19b      	cbz	r3, 842c <usb_dc_ep_clear_stall+0x30>
{
    8404:	b510      	push	{r4, lr}
    8406:	4604      	mov	r4, r0
	return get_usbd_ctx()->ready;
    8408:	4b0e      	ldr	r3, [pc, #56]	; (8444 <usb_dc_ep_clear_stall+0x48>)
    840a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    840e:	b183      	cbz	r3, 8432 <usb_dc_ep_clear_stall+0x36>
	ep_ctx = endpoint_ctx(ep);
    8410:	f7fe ff3c 	bl	728c <endpoint_ctx>
	if (!ep_ctx) {
    8414:	b180      	cbz	r0, 8438 <usb_dc_ep_clear_stall+0x3c>
	if (NRF_USBD_EPISO_CHECK(ep)) {
    8416:	f014 0f08 	tst.w	r4, #8
    841a:	d110      	bne.n	843e <usb_dc_ep_clear_stall+0x42>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    841c:	4620      	mov	r0, r4
    841e:	f003 fe5d 	bl	c0dc <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    8422:	4620      	mov	r0, r4
    8424:	f004 f8a4 	bl	c570 <nrfx_usbd_ep_stall_clear>
	return 0;
    8428:	2000      	movs	r0, #0
}
    842a:	bd10      	pop	{r4, pc}
		return -ENODEV;
    842c:	f06f 0012 	mvn.w	r0, #18
}
    8430:	4770      	bx	lr
		return -ENODEV;
    8432:	f06f 0012 	mvn.w	r0, #18
    8436:	e7f8      	b.n	842a <usb_dc_ep_clear_stall+0x2e>
		return -EINVAL;
    8438:	f06f 0015 	mvn.w	r0, #21
    843c:	e7f5      	b.n	842a <usb_dc_ep_clear_stall+0x2e>
		return -EINVAL;
    843e:	f06f 0015 	mvn.w	r0, #21
    8442:	e7f2      	b.n	842a <usb_dc_ep_clear_stall+0x2e>
    8444:	20002438 	.word	0x20002438

00008448 <usb_dc_ep_is_stalled>:
{
    8448:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    844a:	4b10      	ldr	r3, [pc, #64]	; (848c <usb_dc_ep_is_stalled+0x44>)
    844c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    8450:	b17b      	cbz	r3, 8472 <usb_dc_ep_is_stalled+0x2a>
    8452:	4604      	mov	r4, r0
    8454:	460d      	mov	r5, r1
	return get_usbd_ctx()->ready;
    8456:	4b0d      	ldr	r3, [pc, #52]	; (848c <usb_dc_ep_is_stalled+0x44>)
    8458:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    845c:	b163      	cbz	r3, 8478 <usb_dc_ep_is_stalled+0x30>
	ep_ctx = endpoint_ctx(ep);
    845e:	f7fe ff15 	bl	728c <endpoint_ctx>
	if (!ep_ctx) {
    8462:	b160      	cbz	r0, 847e <usb_dc_ep_is_stalled+0x36>
	if (!stalled) {
    8464:	b175      	cbz	r5, 8484 <usb_dc_ep_is_stalled+0x3c>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    8466:	4620      	mov	r0, r4
    8468:	f003 fe18 	bl	c09c <nrfx_usbd_ep_stall_check>
    846c:	7028      	strb	r0, [r5, #0]
	return 0;
    846e:	2000      	movs	r0, #0
}
    8470:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    8472:	f06f 0012 	mvn.w	r0, #18
    8476:	e7fb      	b.n	8470 <usb_dc_ep_is_stalled+0x28>
    8478:	f06f 0012 	mvn.w	r0, #18
    847c:	e7f8      	b.n	8470 <usb_dc_ep_is_stalled+0x28>
		return -EINVAL;
    847e:	f06f 0015 	mvn.w	r0, #21
    8482:	e7f5      	b.n	8470 <usb_dc_ep_is_stalled+0x28>
		return -EINVAL;
    8484:	f06f 0015 	mvn.w	r0, #21
    8488:	e7f2      	b.n	8470 <usb_dc_ep_is_stalled+0x28>
    848a:	bf00      	nop
    848c:	20002438 	.word	0x20002438

00008490 <usb_dc_ep_enable>:
{
    8490:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    8492:	4b15      	ldr	r3, [pc, #84]	; (84e8 <usb_dc_ep_enable+0x58>)
    8494:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
    8498:	b1eb      	cbz	r3, 84d6 <usb_dc_ep_enable+0x46>
    849a:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep);
    849c:	f7fe fef6 	bl	728c <endpoint_ctx>
	if (!ep_ctx) {
    84a0:	4605      	mov	r5, r0
    84a2:	b1d8      	cbz	r0, 84dc <usb_dc_ep_enable+0x4c>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
    84a4:	f014 0f08 	tst.w	r4, #8
    84a8:	d009      	beq.n	84be <usb_dc_ep_enable+0x2e>
	if (ep_ctx->cfg.en) {
    84aa:	7a2b      	ldrb	r3, [r5, #8]
    84ac:	b9cb      	cbnz	r3, 84e2 <usb_dc_ep_enable+0x52>
	ep_ctx->cfg.en = true;
    84ae:	2301      	movs	r3, #1
    84b0:	722b      	strb	r3, [r5, #8]
	return get_usbd_ctx()->ready;
    84b2:	4b0d      	ldr	r3, [pc, #52]	; (84e8 <usb_dc_ep_enable+0x58>)
    84b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (dev_ready()) {
    84b8:	b943      	cbnz	r3, 84cc <usb_dc_ep_enable+0x3c>
	return 0;
    84ba:	2000      	movs	r0, #0
}
    84bc:	bd38      	pop	{r3, r4, r5, pc}
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    84be:	4620      	mov	r0, r4
    84c0:	f003 fe0c 	bl	c0dc <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    84c4:	4620      	mov	r0, r4
    84c6:	f004 f853 	bl	c570 <nrfx_usbd_ep_stall_clear>
    84ca:	e7ee      	b.n	84aa <usb_dc_ep_enable+0x1a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    84cc:	4620      	mov	r0, r4
    84ce:	f003 fff5 	bl	c4bc <nrfx_usbd_ep_enable>
	return 0;
    84d2:	2000      	movs	r0, #0
    84d4:	e7f2      	b.n	84bc <usb_dc_ep_enable+0x2c>
		return -ENODEV;
    84d6:	f06f 0012 	mvn.w	r0, #18
    84da:	e7ef      	b.n	84bc <usb_dc_ep_enable+0x2c>
		return -EINVAL;
    84dc:	f06f 0015 	mvn.w	r0, #21
    84e0:	e7ec      	b.n	84bc <usb_dc_ep_enable+0x2c>
		return -EALREADY;
    84e2:	f06f 0077 	mvn.w	r0, #119	; 0x77
    84e6:	e7e9      	b.n	84bc <usb_dc_ep_enable+0x2c>
    84e8:	20002438 	.word	0x20002438

000084ec <usb_dc_ep_disable>:
{
    84ec:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    84ee:	4b13      	ldr	r3, [pc, #76]	; (853c <usb_dc_ep_disable+0x50>)
    84f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    84f4:	b1ab      	cbz	r3, 8522 <usb_dc_ep_disable+0x36>
    84f6:	4604      	mov	r4, r0
	return get_usbd_ctx()->ready;
    84f8:	4b10      	ldr	r3, [pc, #64]	; (853c <usb_dc_ep_disable+0x50>)
    84fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    84fe:	b19b      	cbz	r3, 8528 <usb_dc_ep_disable+0x3c>
	ep_ctx = endpoint_ctx(ep);
    8500:	f7fe fec4 	bl	728c <endpoint_ctx>
	if (!ep_ctx) {
    8504:	4605      	mov	r5, r0
    8506:	b190      	cbz	r0, 852e <usb_dc_ep_disable+0x42>
	if (!ep_ctx->cfg.en) {
    8508:	7a03      	ldrb	r3, [r0, #8]
    850a:	b19b      	cbz	r3, 8534 <usb_dc_ep_disable+0x48>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    850c:	4620      	mov	r0, r4
    850e:	f004 fa09 	bl	c924 <nrfx_usbd_ep_disable>
	ep_ctx->write_in_progress = false;
    8512:	2400      	movs	r4, #0
    8514:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
    8516:	4628      	mov	r0, r5
    8518:	f00b f98f 	bl	1383a <ep_ctx_reset>
	ep_ctx->cfg.en = false;
    851c:	722c      	strb	r4, [r5, #8]
	return 0;
    851e:	4620      	mov	r0, r4
}
    8520:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    8522:	f06f 0012 	mvn.w	r0, #18
    8526:	e7fb      	b.n	8520 <usb_dc_ep_disable+0x34>
    8528:	f06f 0012 	mvn.w	r0, #18
    852c:	e7f8      	b.n	8520 <usb_dc_ep_disable+0x34>
		return -EINVAL;
    852e:	f06f 0015 	mvn.w	r0, #21
    8532:	e7f5      	b.n	8520 <usb_dc_ep_disable+0x34>
		return -EALREADY;
    8534:	f06f 0077 	mvn.w	r0, #119	; 0x77
    8538:	e7f2      	b.n	8520 <usb_dc_ep_disable+0x34>
    853a:	bf00      	nop
    853c:	20002438 	.word	0x20002438

00008540 <usb_dc_ep_write>:
{
    8540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8544:	b084      	sub	sp, #16
    8546:	461f      	mov	r7, r3
	return get_usbd_ctx()->attached;
    8548:	4b4e      	ldr	r3, [pc, #312]	; (8684 <usb_dc_ep_write+0x144>)
    854a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    854e:	2b00      	cmp	r3, #0
    8550:	f000 808c 	beq.w	866c <usb_dc_ep_write+0x12c>
    8554:	4604      	mov	r4, r0
    8556:	4688      	mov	r8, r1
    8558:	4616      	mov	r6, r2
	return get_usbd_ctx()->ready;
    855a:	4b4a      	ldr	r3, [pc, #296]	; (8684 <usb_dc_ep_write+0x144>)
    855c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    8560:	2b00      	cmp	r3, #0
    8562:	f000 8086 	beq.w	8672 <usb_dc_ep_write+0x132>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
    8566:	f010 0f80 	tst.w	r0, #128	; 0x80
    856a:	f000 8085 	beq.w	8678 <usb_dc_ep_write+0x138>
	ep_ctx = endpoint_ctx(ep);
    856e:	f7fe fe8d 	bl	728c <endpoint_ctx>
	if (!ep_ctx) {
    8572:	4605      	mov	r5, r0
    8574:	2800      	cmp	r0, #0
    8576:	f000 8082 	beq.w	867e <usb_dc_ep_write+0x13e>
	if (!ep_ctx->cfg.en) {
    857a:	7a03      	ldrb	r3, [r0, #8]
    857c:	2b00      	cmp	r3, #0
    857e:	d04e      	beq.n	861e <usb_dc_ep_write+0xde>
	return z_impl_k_mutex_lock(mutex, timeout);
    8580:	f04f 32ff 	mov.w	r2, #4294967295
    8584:	f04f 33ff 	mov.w	r3, #4294967295
    8588:	483f      	ldr	r0, [pc, #252]	; (8688 <usb_dc_ep_write+0x148>)
    858a:	f007 fbd7 	bl	fd3c <z_impl_k_mutex_lock>
	if (ep_ctx->write_in_progress) {
    858e:	7fab      	ldrb	r3, [r5, #30]
    8590:	2b00      	cmp	r3, #0
    8592:	d158      	bne.n	8646 <usb_dc_ep_write+0x106>
	if (!data_len && ep_ctx->trans_zlp) {
    8594:	b91e      	cbnz	r6, 859e <usb_dc_ep_write+0x5e>
    8596:	7feb      	ldrb	r3, [r5, #31]
    8598:	b10b      	cbz	r3, 859e <usb_dc_ep_write+0x5e>
		ep_ctx->trans_zlp = false;
    859a:	2300      	movs	r3, #0
    859c:	77eb      	strb	r3, [r5, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    859e:	7aab      	ldrb	r3, [r5, #10]
    85a0:	b963      	cbnz	r3, 85bc <usb_dc_ep_write+0x7c>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    85a2:	b15e      	cbz	r6, 85bc <usb_dc_ep_write+0x7c>
    85a4:	4a37      	ldr	r2, [pc, #220]	; (8684 <usb_dc_ep_write+0x144>)
    85a6:	8952      	ldrh	r2, [r2, #10]
    85a8:	42b2      	cmp	r2, r6
    85aa:	d907      	bls.n	85bc <usb_dc_ep_write+0x7c>
		    !(data_len % ep_ctx->cfg.max_sz)) {
    85ac:	6869      	ldr	r1, [r5, #4]
    85ae:	fbb6 f2f1 	udiv	r2, r6, r1
    85b2:	fb01 6212 	mls	r2, r1, r2, r6
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    85b6:	b90a      	cbnz	r2, 85bc <usb_dc_ep_write+0x7c>
			ep_ctx->trans_zlp = true;
    85b8:	2201      	movs	r2, #1
    85ba:	77ea      	strb	r2, [r5, #31]
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
    85bc:	b91b      	cbnz	r3, 85c6 <usb_dc_ep_write+0x86>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    85be:	f003 fe27 	bl	c210 <nrfx_usbd_last_setup_dir_get>
    85c2:	42a0      	cmp	r0, r4
    85c4:	d145      	bne.n	8652 <usb_dc_ep_write+0x112>
	ep_ctx->write_in_progress = true;
    85c6:	2301      	movs	r3, #1
    85c8:	77ab      	strb	r3, [r5, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    85ca:	f8cd 8004 	str.w	r8, [sp, #4]
    85ce:	9602      	str	r6, [sp, #8]
    85d0:	2300      	movs	r3, #0
    85d2:	9303      	str	r3, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    85d4:	a901      	add	r1, sp, #4
    85d6:	4620      	mov	r0, r4
    85d8:	f003 f96c 	bl	b8b4 <nrfx_usbd_ep_transfer>
    85dc:	4601      	mov	r1, r0
	if (err != NRFX_SUCCESS) {
    85de:	4b2b      	ldr	r3, [pc, #172]	; (868c <usb_dc_ep_write+0x14c>)
    85e0:	4298      	cmp	r0, r3
    85e2:	d03d      	beq.n	8660 <usb_dc_ep_write+0x120>
		ep_ctx->write_in_progress = false;
    85e4:	2300      	movs	r3, #0
    85e6:	77ab      	strb	r3, [r5, #30]
		if (ret_bytes) {
    85e8:	b107      	cbz	r7, 85ec <usb_dc_ep_write+0xac>
			*ret_bytes = 0;
    85ea:	603b      	str	r3, [r7, #0]
    85ec:	4b28      	ldr	r3, [pc, #160]	; (8690 <usb_dc_ep_write+0x150>)
    85ee:	4a29      	ldr	r2, [pc, #164]	; (8694 <usb_dc_ep_write+0x154>)
    85f0:	1a9b      	subs	r3, r3, r2
    85f2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("nRF USBD write error: %d", (uint32_t)err);
    85f4:	f04f 0200 	mov.w	r2, #0
    85f8:	2001      	movs	r0, #1
    85fa:	f360 0202 	bfi	r2, r0, #0, #3
    85fe:	f36f 02c5 	bfc	r2, #3, #3
    8602:	f363 128f 	bfi	r2, r3, #6, #10
    8606:	4824      	ldr	r0, [pc, #144]	; (8698 <usb_dc_ep_write+0x158>)
    8608:	f7fa fe52 	bl	32b0 <log_1>
		result = -EIO;
    860c:	f06f 0404 	mvn.w	r4, #4
	return z_impl_k_mutex_unlock(mutex);
    8610:	481d      	ldr	r0, [pc, #116]	; (8688 <usb_dc_ep_write+0x148>)
    8612:	f007 fc1d 	bl	fe50 <z_impl_k_mutex_unlock>
}
    8616:	4620      	mov	r0, r4
    8618:	b004      	add	sp, #16
    861a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    861e:	4b1c      	ldr	r3, [pc, #112]	; (8690 <usb_dc_ep_write+0x150>)
    8620:	4a1c      	ldr	r2, [pc, #112]	; (8694 <usb_dc_ep_write+0x154>)
    8622:	1a9b      	subs	r3, r3, r2
    8624:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    8626:	f04f 0200 	mov.w	r2, #0
    862a:	2101      	movs	r1, #1
    862c:	f361 0202 	bfi	r2, r1, #0, #3
    8630:	f36f 02c5 	bfc	r2, #3, #3
    8634:	f363 128f 	bfi	r2, r3, #6, #10
    8638:	4621      	mov	r1, r4
    863a:	4818      	ldr	r0, [pc, #96]	; (869c <usb_dc_ep_write+0x15c>)
    863c:	f7fa fe38 	bl	32b0 <log_1>
		return -EINVAL;
    8640:	f06f 0415 	mvn.w	r4, #21
    8644:	e7e7      	b.n	8616 <usb_dc_ep_write+0xd6>
    8646:	4810      	ldr	r0, [pc, #64]	; (8688 <usb_dc_ep_write+0x148>)
    8648:	f007 fc02 	bl	fe50 <z_impl_k_mutex_unlock>
		return -EAGAIN;
    864c:	f06f 040a 	mvn.w	r4, #10
    8650:	e7e1      	b.n	8616 <usb_dc_ep_write+0xd6>
		nrfx_usbd_setup_clear();
    8652:	f003 fdcd 	bl	c1f0 <nrfx_usbd_setup_clear>
    8656:	480c      	ldr	r0, [pc, #48]	; (8688 <usb_dc_ep_write+0x148>)
    8658:	f007 fbfa 	bl	fe50 <z_impl_k_mutex_unlock>
		return 0;
    865c:	2400      	movs	r4, #0
    865e:	e7da      	b.n	8616 <usb_dc_ep_write+0xd6>
		if (ret_bytes) {
    8660:	b117      	cbz	r7, 8668 <usb_dc_ep_write+0x128>
			*ret_bytes = data_len;
    8662:	603e      	str	r6, [r7, #0]
	int result = 0;
    8664:	2400      	movs	r4, #0
    8666:	e7d3      	b.n	8610 <usb_dc_ep_write+0xd0>
    8668:	2400      	movs	r4, #0
    866a:	e7d1      	b.n	8610 <usb_dc_ep_write+0xd0>
		return -ENODEV;
    866c:	f06f 0412 	mvn.w	r4, #18
    8670:	e7d1      	b.n	8616 <usb_dc_ep_write+0xd6>
    8672:	f06f 0412 	mvn.w	r4, #18
    8676:	e7ce      	b.n	8616 <usb_dc_ep_write+0xd6>
		return -EINVAL;
    8678:	f06f 0415 	mvn.w	r4, #21
    867c:	e7cb      	b.n	8616 <usb_dc_ep_write+0xd6>
		return -EINVAL;
    867e:	f06f 0415 	mvn.w	r4, #21
    8682:	e7c8      	b.n	8616 <usb_dc_ep_write+0xd6>
    8684:	20002438 	.word	0x20002438
    8688:	20002470 	.word	0x20002470
    868c:	0bad0000 	.word	0x0bad0000
    8690:	00016650 	.word	0x00016650
    8694:	000165d8 	.word	0x000165d8
    8698:	000178e0 	.word	0x000178e0
    869c:	000178c0 	.word	0x000178c0

000086a0 <usb_dc_ep_read_wait>:
{
    86a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    86a4:	4698      	mov	r8, r3
	return get_usbd_ctx()->attached;
    86a6:	4b36      	ldr	r3, [pc, #216]	; (8780 <usb_dc_ep_read_wait+0xe0>)
    86a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    86ac:	2b00      	cmp	r3, #0
    86ae:	d05b      	beq.n	8768 <usb_dc_ep_read_wait+0xc8>
    86b0:	4606      	mov	r6, r0
    86b2:	460d      	mov	r5, r1
    86b4:	4617      	mov	r7, r2
	return get_usbd_ctx()->ready;
    86b6:	4b32      	ldr	r3, [pc, #200]	; (8780 <usb_dc_ep_read_wait+0xe0>)
    86b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    86bc:	2b00      	cmp	r3, #0
    86be:	d056      	beq.n	876e <usb_dc_ep_read_wait+0xce>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    86c0:	f010 0f80 	tst.w	r0, #128	; 0x80
    86c4:	d156      	bne.n	8774 <usb_dc_ep_read_wait+0xd4>
	if (!data && max_data_len) {
    86c6:	b351      	cbz	r1, 871e <usb_dc_ep_read_wait+0x7e>
	ep_ctx = endpoint_ctx(ep);
    86c8:	4630      	mov	r0, r6
    86ca:	f7fe fddf 	bl	728c <endpoint_ctx>
	if (!ep_ctx) {
    86ce:	4604      	mov	r4, r0
    86d0:	2800      	cmp	r0, #0
    86d2:	d052      	beq.n	877a <usb_dc_ep_read_wait+0xda>
	if (!ep_ctx->cfg.en) {
    86d4:	7a03      	ldrb	r3, [r0, #8]
    86d6:	b33b      	cbz	r3, 8728 <usb_dc_ep_read_wait+0x88>
	return z_impl_k_mutex_lock(mutex, timeout);
    86d8:	f04f 32ff 	mov.w	r2, #4294967295
    86dc:	f04f 33ff 	mov.w	r3, #4294967295
    86e0:	4828      	ldr	r0, [pc, #160]	; (8784 <usb_dc_ep_read_wait+0xe4>)
    86e2:	f007 fb2b 	bl	fd3c <z_impl_k_mutex_lock>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
    86e6:	68e3      	ldr	r3, [r4, #12]
    86e8:	463e      	mov	r6, r7
    86ea:	429f      	cmp	r7, r3
    86ec:	bf28      	it	cs
    86ee:	461e      	movcs	r6, r3
	if (!data && !max_data_len) {
    86f0:	b375      	cbz	r5, 8750 <usb_dc_ep_read_wait+0xb0>
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
    86f2:	4632      	mov	r2, r6
    86f4:	69a1      	ldr	r1, [r4, #24]
    86f6:	4628      	mov	r0, r5
    86f8:	f00a fd7a 	bl	131f0 <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
    86fc:	69a3      	ldr	r3, [r4, #24]
    86fe:	4433      	add	r3, r6
    8700:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
    8702:	68e3      	ldr	r3, [r4, #12]
    8704:	1b9b      	subs	r3, r3, r6
    8706:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
    8708:	f1b8 0f00 	cmp.w	r8, #0
    870c:	d001      	beq.n	8712 <usb_dc_ep_read_wait+0x72>
		*read_bytes = bytes_to_copy;
    870e:	f8c8 6000 	str.w	r6, [r8]
	return z_impl_k_mutex_unlock(mutex);
    8712:	481c      	ldr	r0, [pc, #112]	; (8784 <usb_dc_ep_read_wait+0xe4>)
    8714:	f007 fb9c 	bl	fe50 <z_impl_k_mutex_unlock>
	return 0;
    8718:	2000      	movs	r0, #0
}
    871a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!data && max_data_len) {
    871e:	2a00      	cmp	r2, #0
    8720:	d0d2      	beq.n	86c8 <usb_dc_ep_read_wait+0x28>
		return -EINVAL;
    8722:	f06f 0015 	mvn.w	r0, #21
    8726:	e7f8      	b.n	871a <usb_dc_ep_read_wait+0x7a>
    8728:	4b17      	ldr	r3, [pc, #92]	; (8788 <usb_dc_ep_read_wait+0xe8>)
    872a:	4a18      	ldr	r2, [pc, #96]	; (878c <usb_dc_ep_read_wait+0xec>)
    872c:	1a9b      	subs	r3, r3, r2
    872e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    8730:	f04f 0200 	mov.w	r2, #0
    8734:	2101      	movs	r1, #1
    8736:	f361 0202 	bfi	r2, r1, #0, #3
    873a:	f36f 02c5 	bfc	r2, #3, #3
    873e:	f363 128f 	bfi	r2, r3, #6, #10
    8742:	4631      	mov	r1, r6
    8744:	4812      	ldr	r0, [pc, #72]	; (8790 <usb_dc_ep_read_wait+0xf0>)
    8746:	f7fa fdb3 	bl	32b0 <log_1>
		return -EINVAL;
    874a:	f06f 0015 	mvn.w	r0, #21
    874e:	e7e4      	b.n	871a <usb_dc_ep_read_wait+0x7a>
	if (!data && !max_data_len) {
    8750:	2f00      	cmp	r7, #0
    8752:	d1ce      	bne.n	86f2 <usb_dc_ep_read_wait+0x52>
		if (read_bytes) {
    8754:	f1b8 0f00 	cmp.w	r8, #0
    8758:	d001      	beq.n	875e <usb_dc_ep_read_wait+0xbe>
			*read_bytes = ep_ctx->buf.len;
    875a:	f8c8 3000 	str.w	r3, [r8]
    875e:	4809      	ldr	r0, [pc, #36]	; (8784 <usb_dc_ep_read_wait+0xe4>)
    8760:	f007 fb76 	bl	fe50 <z_impl_k_mutex_unlock>
		return 0;
    8764:	2000      	movs	r0, #0
    8766:	e7d8      	b.n	871a <usb_dc_ep_read_wait+0x7a>
		return -ENODEV;
    8768:	f06f 0012 	mvn.w	r0, #18
    876c:	e7d5      	b.n	871a <usb_dc_ep_read_wait+0x7a>
    876e:	f06f 0012 	mvn.w	r0, #18
    8772:	e7d2      	b.n	871a <usb_dc_ep_read_wait+0x7a>
		return -EINVAL;
    8774:	f06f 0015 	mvn.w	r0, #21
    8778:	e7cf      	b.n	871a <usb_dc_ep_read_wait+0x7a>
		return -EINVAL;
    877a:	f06f 0015 	mvn.w	r0, #21
    877e:	e7cc      	b.n	871a <usb_dc_ep_read_wait+0x7a>
    8780:	20002438 	.word	0x20002438
    8784:	20002470 	.word	0x20002470
    8788:	00016650 	.word	0x00016650
    878c:	000165d8 	.word	0x000165d8
    8790:	000178c0 	.word	0x000178c0

00008794 <usb_dc_ep_read_continue>:
	return get_usbd_ctx()->attached;
    8794:	4b58      	ldr	r3, [pc, #352]	; (88f8 <usb_dc_ep_read_continue+0x164>)
    8796:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    879a:	2b00      	cmp	r3, #0
    879c:	f000 809f 	beq.w	88de <usb_dc_ep_read_continue+0x14a>
{
    87a0:	b530      	push	{r4, r5, lr}
    87a2:	b083      	sub	sp, #12
    87a4:	4605      	mov	r5, r0
	return get_usbd_ctx()->ready;
    87a6:	4b54      	ldr	r3, [pc, #336]	; (88f8 <usb_dc_ep_read_continue+0x164>)
    87a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    87ac:	2b00      	cmp	r3, #0
    87ae:	f000 8099 	beq.w	88e4 <usb_dc_ep_read_continue+0x150>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    87b2:	f010 0f80 	tst.w	r0, #128	; 0x80
    87b6:	f040 8098 	bne.w	88ea <usb_dc_ep_read_continue+0x156>
	ep_ctx = endpoint_ctx(ep);
    87ba:	f7fe fd67 	bl	728c <endpoint_ctx>
	if (!ep_ctx) {
    87be:	4604      	mov	r4, r0
    87c0:	2800      	cmp	r0, #0
    87c2:	f000 8095 	beq.w	88f0 <usb_dc_ep_read_continue+0x15c>
	if (!ep_ctx->cfg.en) {
    87c6:	7a03      	ldrb	r3, [r0, #8]
    87c8:	b1a3      	cbz	r3, 87f4 <usb_dc_ep_read_continue+0x60>
	return z_impl_k_mutex_lock(mutex, timeout);
    87ca:	f04f 32ff 	mov.w	r2, #4294967295
    87ce:	f04f 33ff 	mov.w	r3, #4294967295
    87d2:	484a      	ldr	r0, [pc, #296]	; (88fc <usb_dc_ep_read_continue+0x168>)
    87d4:	f007 fab2 	bl	fd3c <z_impl_k_mutex_lock>
	if (!ep_ctx->buf.len) {
    87d8:	68e3      	ldr	r3, [r4, #12]
    87da:	b92b      	cbnz	r3, 87e8 <usb_dc_ep_read_continue+0x54>
		ep_ctx->buf.curr = ep_ctx->buf.data;
    87dc:	6963      	ldr	r3, [r4, #20]
    87de:	61a3      	str	r3, [r4, #24]
		ep_ctx->read_complete = true;
    87e0:	2301      	movs	r3, #1
    87e2:	7723      	strb	r3, [r4, #28]
		if (ep_ctx->read_pending) {
    87e4:	7f63      	ldrb	r3, [r4, #29]
    87e6:	b9cb      	cbnz	r3, 881c <usb_dc_ep_read_continue+0x88>
	return z_impl_k_mutex_unlock(mutex);
    87e8:	4844      	ldr	r0, [pc, #272]	; (88fc <usb_dc_ep_read_continue+0x168>)
    87ea:	f007 fb31 	bl	fe50 <z_impl_k_mutex_unlock>
	return 0;
    87ee:	2000      	movs	r0, #0
}
    87f0:	b003      	add	sp, #12
    87f2:	bd30      	pop	{r4, r5, pc}
    87f4:	4b42      	ldr	r3, [pc, #264]	; (8900 <usb_dc_ep_read_continue+0x16c>)
    87f6:	4a43      	ldr	r2, [pc, #268]	; (8904 <usb_dc_ep_read_continue+0x170>)
    87f8:	1a9b      	subs	r3, r3, r2
    87fa:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    87fc:	f04f 0200 	mov.w	r2, #0
    8800:	2101      	movs	r1, #1
    8802:	f361 0202 	bfi	r2, r1, #0, #3
    8806:	f36f 02c5 	bfc	r2, #3, #3
    880a:	f363 128f 	bfi	r2, r3, #6, #10
    880e:	4629      	mov	r1, r5
    8810:	483d      	ldr	r0, [pc, #244]	; (8908 <usb_dc_ep_read_continue+0x174>)
    8812:	f7fa fd4d 	bl	32b0 <log_1>
		return -EINVAL;
    8816:	f06f 0015 	mvn.w	r0, #21
    881a:	e7e9      	b.n	87f0 <usb_dc_ep_read_continue+0x5c>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    881c:	2200      	movs	r2, #0
    881e:	2300      	movs	r3, #0
    8820:	a901      	add	r1, sp, #4
    8822:	483a      	ldr	r0, [pc, #232]	; (890c <usb_dc_ep_read_continue+0x178>)
    8824:	f007 f950 	bl	fac8 <k_mem_slab_alloc>
    8828:	b980      	cbnz	r0, 884c <usb_dc_ep_read_continue+0xb8>
	ev = (struct usbd_event *)block.data;
    882a:	9d01      	ldr	r5, [sp, #4]
	ev->block = block;
    882c:	606d      	str	r5, [r5, #4]
			if (!ev) {
    882e:	2d00      	cmp	r5, #0
    8830:	d04f      	beq.n	88d2 <usb_dc_ep_read_continue+0x13e>
			ev->evt_type = USBD_EVT_EP;
    8832:	2301      	movs	r3, #1
    8834:	742b      	strb	r3, [r5, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    8836:	60ac      	str	r4, [r5, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    8838:	732b      	strb	r3, [r5, #12]
	k_fifo_put(&usbd_evt_fifo, ev);
    883a:	4629      	mov	r1, r5
    883c:	4834      	ldr	r0, [pc, #208]	; (8910 <usb_dc_ep_read_continue+0x17c>)
    883e:	f00d fa67 	bl	15d10 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    8842:	4934      	ldr	r1, [pc, #208]	; (8914 <usb_dc_ep_read_continue+0x180>)
    8844:	4834      	ldr	r0, [pc, #208]	; (8918 <usb_dc_ep_read_continue+0x184>)
    8846:	f00d fa84 	bl	15d52 <k_work_submit_to_queue>
}
    884a:	e7cd      	b.n	87e8 <usb_dc_ep_read_continue+0x54>
    884c:	4b2c      	ldr	r3, [pc, #176]	; (8900 <usb_dc_ep_read_continue+0x16c>)
    884e:	4a2d      	ldr	r2, [pc, #180]	; (8904 <usb_dc_ep_read_continue+0x170>)
    8850:	1a9b      	subs	r3, r3, r2
    8852:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    8854:	f04f 0100 	mov.w	r1, #0
    8858:	2201      	movs	r2, #1
    885a:	f362 0102 	bfi	r1, r2, #0, #3
    885e:	f36f 01c5 	bfc	r1, #3, #3
    8862:	f363 118f 	bfi	r1, r3, #6, #10
    8866:	482d      	ldr	r0, [pc, #180]	; (891c <usb_dc_ep_read_continue+0x188>)
    8868:	f7fa fdb6 	bl	33d8 <log_0>
static inline void usbd_evt_flush(void)
    886c:	e004      	b.n	8878 <usb_dc_ep_read_continue+0xe4>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    886e:	1d01      	adds	r1, r0, #4
    8870:	4826      	ldr	r0, [pc, #152]	; (890c <usb_dc_ep_read_continue+0x178>)
    8872:	f00d f92a 	bl	15aca <k_mem_slab_free>
	} while (ev != NULL);
    8876:	b145      	cbz	r5, 888a <usb_dc_ep_read_continue+0xf6>
	return z_impl_k_queue_get(queue, timeout);
    8878:	2200      	movs	r2, #0
    887a:	2300      	movs	r3, #0
    887c:	4824      	ldr	r0, [pc, #144]	; (8910 <usb_dc_ep_read_continue+0x17c>)
    887e:	f007 fb2b 	bl	fed8 <z_impl_k_queue_get>
		if (ev) {
    8882:	4605      	mov	r5, r0
    8884:	2800      	cmp	r0, #0
    8886:	d1f2      	bne.n	886e <usb_dc_ep_read_continue+0xda>
    8888:	e7f5      	b.n	8876 <usb_dc_ep_read_continue+0xe2>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    888a:	2200      	movs	r2, #0
    888c:	2300      	movs	r3, #0
    888e:	a901      	add	r1, sp, #4
    8890:	481e      	ldr	r0, [pc, #120]	; (890c <usb_dc_ep_read_continue+0x178>)
    8892:	f007 f919 	bl	fac8 <k_mem_slab_alloc>
    8896:	b180      	cbz	r0, 88ba <usb_dc_ep_read_continue+0x126>
    8898:	4b19      	ldr	r3, [pc, #100]	; (8900 <usb_dc_ep_read_continue+0x16c>)
    889a:	4a1a      	ldr	r2, [pc, #104]	; (8904 <usb_dc_ep_read_continue+0x170>)
    889c:	1a9b      	subs	r3, r3, r2
    889e:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    88a0:	f04f 0100 	mov.w	r1, #0
    88a4:	2201      	movs	r2, #1
    88a6:	f362 0102 	bfi	r1, r2, #0, #3
    88aa:	f36f 01c5 	bfc	r1, #3, #3
    88ae:	f363 118f 	bfi	r1, r3, #6, #10
    88b2:	481b      	ldr	r0, [pc, #108]	; (8920 <usb_dc_ep_read_continue+0x18c>)
    88b4:	f7fa fd90 	bl	33d8 <log_0>
			return NULL;
    88b8:	e7b9      	b.n	882e <usb_dc_ep_read_continue+0x9a>
		ev = (struct usbd_event *)block.data;
    88ba:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    88bc:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    88be:	2304      	movs	r3, #4
    88c0:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    88c2:	4813      	ldr	r0, [pc, #76]	; (8910 <usb_dc_ep_read_continue+0x17c>)
    88c4:	f00d fa24 	bl	15d10 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    88c8:	4912      	ldr	r1, [pc, #72]	; (8914 <usb_dc_ep_read_continue+0x180>)
    88ca:	4813      	ldr	r0, [pc, #76]	; (8918 <usb_dc_ep_read_continue+0x184>)
    88cc:	f00d fa41 	bl	15d52 <k_work_submit_to_queue>
		return NULL;
    88d0:	e7ad      	b.n	882e <usb_dc_ep_read_continue+0x9a>
	return z_impl_k_mutex_unlock(mutex);
    88d2:	480a      	ldr	r0, [pc, #40]	; (88fc <usb_dc_ep_read_continue+0x168>)
    88d4:	f007 fabc 	bl	fe50 <z_impl_k_mutex_unlock>
				return -ENOMEM;
    88d8:	f06f 000b 	mvn.w	r0, #11
    88dc:	e788      	b.n	87f0 <usb_dc_ep_read_continue+0x5c>
		return -ENODEV;
    88de:	f06f 0012 	mvn.w	r0, #18
}
    88e2:	4770      	bx	lr
		return -ENODEV;
    88e4:	f06f 0012 	mvn.w	r0, #18
    88e8:	e782      	b.n	87f0 <usb_dc_ep_read_continue+0x5c>
		return -EINVAL;
    88ea:	f06f 0015 	mvn.w	r0, #21
    88ee:	e77f      	b.n	87f0 <usb_dc_ep_read_continue+0x5c>
		return -EINVAL;
    88f0:	f06f 0015 	mvn.w	r0, #21
    88f4:	e77c      	b.n	87f0 <usb_dc_ep_read_continue+0x5c>
    88f6:	bf00      	nop
    88f8:	20002438 	.word	0x20002438
    88fc:	20002470 	.word	0x20002470
    8900:	00016650 	.word	0x00016650
    8904:	000165d8 	.word	0x000165d8
    8908:	000178c0 	.word	0x000178c0
    890c:	2000034c 	.word	0x2000034c
    8910:	20000450 	.word	0x20000450
    8914:	20002460 	.word	0x20002460
    8918:	20000738 	.word	0x20000738
    891c:	000176e8 	.word	0x000176e8
    8920:	00017708 	.word	0x00017708

00008924 <usb_dc_ep_set_callback>:
	return get_usbd_ctx()->attached;
    8924:	4b08      	ldr	r3, [pc, #32]	; (8948 <usb_dc_ep_set_callback+0x24>)
    8926:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
    892a:	b13b      	cbz	r3, 893c <usb_dc_ep_set_callback+0x18>
{
    892c:	b510      	push	{r4, lr}
    892e:	460c      	mov	r4, r1
	ep_ctx = endpoint_ctx(ep);
    8930:	f7fe fcac 	bl	728c <endpoint_ctx>
	if (!ep_ctx) {
    8934:	b128      	cbz	r0, 8942 <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
    8936:	6004      	str	r4, [r0, #0]
	return 0;
    8938:	2000      	movs	r0, #0
}
    893a:	bd10      	pop	{r4, pc}
		return -ENODEV;
    893c:	f06f 0012 	mvn.w	r0, #18
}
    8940:	4770      	bx	lr
		return -EINVAL;
    8942:	f06f 0015 	mvn.w	r0, #21
    8946:	e7f8      	b.n	893a <usb_dc_ep_set_callback+0x16>
    8948:	20002438 	.word	0x20002438

0000894c <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
    894c:	4b01      	ldr	r3, [pc, #4]	; (8954 <usb_dc_set_status_callback+0x8>)
    894e:	6018      	str	r0, [r3, #0]
}
    8950:	4770      	bx	lr
    8952:	bf00      	nop
    8954:	20002438 	.word	0x20002438

00008958 <usb_dc_ep_mps>:
{
    8958:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    895a:	4b07      	ldr	r3, [pc, #28]	; (8978 <usb_dc_ep_mps+0x20>)
    895c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
    8960:	b123      	cbz	r3, 896c <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
    8962:	f7fe fc93 	bl	728c <endpoint_ctx>
	if (!ep_ctx) {
    8966:	b120      	cbz	r0, 8972 <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
    8968:	6840      	ldr	r0, [r0, #4]
}
    896a:	bd08      	pop	{r3, pc}
		return -ENODEV;
    896c:	f06f 0012 	mvn.w	r0, #18
    8970:	e7fb      	b.n	896a <usb_dc_ep_mps+0x12>
		return -EINVAL;
    8972:	f06f 0015 	mvn.w	r0, #21
    8976:	e7f8      	b.n	896a <usb_dc_ep_mps+0x12>
    8978:	20002438 	.word	0x20002438

0000897c <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    897c:	4800      	ldr	r0, [pc, #0]	; (8980 <get_hf_flags+0x4>)
    897e:	4770      	bx	lr
    8980:	20002718 	.word	0x20002718

00008984 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    8984:	4b03      	ldr	r3, [pc, #12]	; (8994 <get_subsys+0x10>)
    8986:	1ac0      	subs	r0, r0, r3
    8988:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    898a:	4b03      	ldr	r3, [pc, #12]	; (8998 <get_subsys+0x14>)
    898c:	fb03 f000 	mul.w	r0, r3, r0
    8990:	4770      	bx	lr
    8992:	bf00      	nop
    8994:	200026d8 	.word	0x200026d8
    8998:	b6db6db7 	.word	0xb6db6db7

0000899c <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    899c:	b538      	push	{r3, r4, r5, lr}
    899e:	4605      	mov	r5, r0
    89a0:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    89a2:	f7ff ffef 	bl	8984 <get_subsys>
    89a6:	4601      	mov	r1, r0
    89a8:	2240      	movs	r2, #64	; 0x40
    89aa:	4803      	ldr	r0, [pc, #12]	; (89b8 <onoff_stop+0x1c>)
    89ac:	f00b f853 	bl	13a56 <stop>
    89b0:	4601      	mov	r1, r0
	notify(mgr, res);
    89b2:	4628      	mov	r0, r5
    89b4:	47a0      	blx	r4
}
    89b6:	bd38      	pop	{r3, r4, r5, pc}
    89b8:	000163b0 	.word	0x000163b0

000089bc <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    89bc:	b530      	push	{r4, r5, lr}
    89be:	b083      	sub	sp, #12
    89c0:	4605      	mov	r5, r0
    89c2:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    89c4:	f7ff ffde 	bl	8984 <get_subsys>
    89c8:	4601      	mov	r1, r0
    89ca:	2340      	movs	r3, #64	; 0x40
    89cc:	9300      	str	r3, [sp, #0]
    89ce:	4623      	mov	r3, r4
    89d0:	4a05      	ldr	r2, [pc, #20]	; (89e8 <onoff_start+0x2c>)
    89d2:	4806      	ldr	r0, [pc, #24]	; (89ec <onoff_start+0x30>)
    89d4:	f00b f859 	bl	13a8a <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    89d8:	1e01      	subs	r1, r0, #0
    89da:	db01      	blt.n	89e0 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    89dc:	b003      	add	sp, #12
    89de:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    89e0:	4628      	mov	r0, r5
    89e2:	47a0      	blx	r4
}
    89e4:	e7fa      	b.n	89dc <onoff_start+0x20>
    89e6:	bf00      	nop
    89e8:	00013ad3 	.word	0x00013ad3
    89ec:	000163b0 	.word	0x000163b0

000089f0 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    89f0:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    89f2:	b110      	cbz	r0, 89fa <clock_event_handler+0xa>
    89f4:	2801      	cmp	r0, #1
    89f6:	d00d      	beq.n	8a14 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    89f8:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    89fa:	2100      	movs	r1, #0
    89fc:	4808      	ldr	r0, [pc, #32]	; (8a20 <clock_event_handler+0x30>)
    89fe:	f00a ffb1 	bl	13964 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    8a02:	6883      	ldr	r3, [r0, #8]
    8a04:	f013 0f07 	tst.w	r3, #7
    8a08:	d1f6      	bne.n	89f8 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    8a0a:	2100      	movs	r1, #0
    8a0c:	4804      	ldr	r0, [pc, #16]	; (8a20 <clock_event_handler+0x30>)
    8a0e:	f00b f810 	bl	13a32 <clkstarted_handle>
    8a12:	e7f1      	b.n	89f8 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    8a14:	2101      	movs	r1, #1
    8a16:	4802      	ldr	r0, [pc, #8]	; (8a20 <clock_event_handler+0x30>)
    8a18:	f00b f80b 	bl	13a32 <clkstarted_handle>
}
    8a1c:	e7ec      	b.n	89f8 <clock_event_handler+0x8>
    8a1e:	bf00      	nop
    8a20:	000163b0 	.word	0x000163b0

00008a24 <generic_hfclk_start>:
{
    8a24:	b510      	push	{r4, lr}
	__asm__ volatile(
    8a26:	f04f 0320 	mov.w	r3, #32
    8a2a:	f3ef 8411 	mrs	r4, BASEPRI
    8a2e:	f383 8812 	msr	BASEPRI_MAX, r3
    8a32:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    8a36:	4a13      	ldr	r2, [pc, #76]	; (8a84 <generic_hfclk_start+0x60>)
    8a38:	6813      	ldr	r3, [r2, #0]
    8a3a:	f043 0302 	orr.w	r3, r3, #2
    8a3e:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    8a40:	f013 0f01 	tst.w	r3, #1
    8a44:	d108      	bne.n	8a58 <generic_hfclk_start+0x34>
	bool already_started = false;
    8a46:	2300      	movs	r3, #0
	__asm__ volatile(
    8a48:	f384 8811 	msr	BASEPRI, r4
    8a4c:	f3bf 8f6f 	isb	sy
	if (already_started) {
    8a50:	b99b      	cbnz	r3, 8a7a <generic_hfclk_start+0x56>
	hfclk_start();
    8a52:	f00b f846 	bl	13ae2 <hfclk_start>
}
    8a56:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    8a58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8a5c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    8a60:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    8a64:	f012 0f01 	tst.w	r2, #1
    8a68:	d101      	bne.n	8a6e <generic_hfclk_start+0x4a>
	bool already_started = false;
    8a6a:	2300      	movs	r3, #0
    8a6c:	e7ec      	b.n	8a48 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    8a6e:	f7ff ff85 	bl	897c <get_hf_flags>
    8a72:	f00a ffcb 	bl	13a0c <set_on_state>
			already_started = true;
    8a76:	2301      	movs	r3, #1
    8a78:	e7e6      	b.n	8a48 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    8a7a:	2100      	movs	r1, #0
    8a7c:	4802      	ldr	r0, [pc, #8]	; (8a88 <generic_hfclk_start+0x64>)
    8a7e:	f00a ffd8 	bl	13a32 <clkstarted_handle>
		return;
    8a82:	e7e8      	b.n	8a56 <generic_hfclk_start+0x32>
    8a84:	20002728 	.word	0x20002728
    8a88:	000163b0 	.word	0x000163b0

00008a8c <generic_hfclk_stop>:
{
    8a8c:	b508      	push	{r3, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8a8e:	4b0a      	ldr	r3, [pc, #40]	; (8ab8 <generic_hfclk_stop+0x2c>)
    8a90:	f3bf 8f5b 	dmb	ish
    8a94:	e853 2f00 	ldrex	r2, [r3]
    8a98:	f022 0102 	bic.w	r1, r2, #2
    8a9c:	e843 1000 	strex	r0, r1, [r3]
    8aa0:	2800      	cmp	r0, #0
    8aa2:	d1f7      	bne.n	8a94 <generic_hfclk_stop+0x8>
    8aa4:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    8aa8:	f012 0f01 	tst.w	r2, #1
    8aac:	d000      	beq.n	8ab0 <generic_hfclk_stop+0x24>
}
    8aae:	bd08      	pop	{r3, pc}
	hfclk_stop();
    8ab0:	f00b f821 	bl	13af6 <hfclk_stop>
    8ab4:	e7fb      	b.n	8aae <generic_hfclk_stop+0x22>
    8ab6:	bf00      	nop
    8ab8:	20002728 	.word	0x20002728

00008abc <api_blocking_start>:
{
    8abc:	b500      	push	{lr}
    8abe:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    8ac0:	f8cd d000 	str.w	sp, [sp]
    8ac4:	f8cd d004 	str.w	sp, [sp, #4]
    8ac8:	2300      	movs	r3, #0
    8aca:	9302      	str	r3, [sp, #8]
    8acc:	2301      	movs	r3, #1
    8ace:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    8ad0:	466b      	mov	r3, sp
    8ad2:	4a07      	ldr	r2, [pc, #28]	; (8af0 <api_blocking_start+0x34>)
    8ad4:	f00a fff5 	bl	13ac2 <api_start>
	if (err < 0) {
    8ad8:	2800      	cmp	r0, #0
    8ada:	db05      	blt.n	8ae8 <api_blocking_start+0x2c>
	return z_impl_k_sem_take(sem, timeout);
    8adc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    8ae0:	2300      	movs	r3, #0
    8ae2:	4668      	mov	r0, sp
    8ae4:	f007 fa58 	bl	ff98 <z_impl_k_sem_take>
}
    8ae8:	b005      	add	sp, #20
    8aea:	f85d fb04 	ldr.w	pc, [sp], #4
    8aee:	bf00      	nop
    8af0:	00013b0b 	.word	0x00013b0b

00008af4 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    8af4:	b570      	push	{r4, r5, r6, lr}
    8af6:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    8af8:	2200      	movs	r2, #0
    8afa:	2101      	movs	r1, #1
    8afc:	4610      	mov	r0, r2
    8afe:	f7fc fea9 	bl	5854 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    8b02:	2000      	movs	r0, #0
    8b04:	f7fc fe74 	bl	57f0 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    8b08:	4811      	ldr	r0, [pc, #68]	; (8b50 <clk_init+0x5c>)
    8b0a:	f001 fc2f 	bl	a36c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    8b0e:	4b11      	ldr	r3, [pc, #68]	; (8b54 <clk_init+0x60>)
    8b10:	4298      	cmp	r0, r3
    8b12:	d11a      	bne.n	8b4a <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    8b14:	f001 fc3e 	bl	a394 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    8b18:	2400      	movs	r4, #0
    8b1a:	e003      	b.n	8b24 <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    8b1c:	2301      	movs	r3, #1
    8b1e:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    8b20:	441c      	add	r4, r3
    8b22:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
    8b24:	2c01      	cmp	r4, #1
    8b26:	d80e      	bhi.n	8b46 <clk_init+0x52>
						get_sub_data(dev, i);
    8b28:	4621      	mov	r1, r4
    8b2a:	4630      	mov	r0, r6
    8b2c:	f00a ff1a 	bl	13964 <get_sub_data>
    8b30:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
    8b32:	4621      	mov	r1, r4
    8b34:	4630      	mov	r0, r6
    8b36:	f00a ff22 	bl	1397e <get_onoff_manager>
    8b3a:	4907      	ldr	r1, [pc, #28]	; (8b58 <clk_init+0x64>)
    8b3c:	f008 fdd5 	bl	116ea <onoff_manager_init>
		if (err < 0) {
    8b40:	2800      	cmp	r0, #0
    8b42:	daeb      	bge.n	8b1c <clk_init+0x28>
    8b44:	e000      	b.n	8b48 <clk_init+0x54>
	}

	return 0;
    8b46:	2000      	movs	r0, #0
}
    8b48:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    8b4a:	f06f 0004 	mvn.w	r0, #4
    8b4e:	e7fb      	b.n	8b48 <clk_init+0x54>
    8b50:	000089f1 	.word	0x000089f1
    8b54:	0bad0000 	.word	0x0bad0000
    8b58:	00017964 	.word	0x00017964

00008b5c <lfclk_spinwait>:
{
    8b5c:	b570      	push	{r4, r5, r6, lr}
    8b5e:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    8b60:	2801      	cmp	r0, #1
    8b62:	d107      	bne.n	8b74 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    8b64:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8b68:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    8b6c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    8b70:	2b01      	cmp	r3, #1
    8b72:	d058      	beq.n	8c26 <lfclk_spinwait+0xca>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    8b74:	f00c ffe7 	bl	15b46 <k_is_in_isr>
    8b78:	b928      	cbnz	r0, 8b86 <lfclk_spinwait+0x2a>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    8b7a:	4b2e      	ldr	r3, [pc, #184]	; (8c34 <lfclk_spinwait+0xd8>)
    8b7c:	781b      	ldrb	r3, [r3, #0]
    8b7e:	2b00      	cmp	r3, #0
    8b80:	d041      	beq.n	8c06 <lfclk_spinwait+0xaa>
    8b82:	2300      	movs	r3, #0
    8b84:	e000      	b.n	8b88 <lfclk_spinwait+0x2c>
    8b86:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    8b88:	461c      	mov	r4, r3
    8b8a:	2b00      	cmp	r3, #0
    8b8c:	d03d      	beq.n	8c0a <lfclk_spinwait+0xae>
	__asm__ volatile(
    8b8e:	f04f 0320 	mov.w	r3, #32
    8b92:	f3ef 8611 	mrs	r6, BASEPRI
    8b96:	f383 8812 	msr	BASEPRI_MAX, r3
    8b9a:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    8b9e:	b924      	cbnz	r4, 8baa <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    8ba0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8ba4:	2202      	movs	r2, #2
    8ba6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    8baa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    8bae:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    8bb2:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8bb6:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    8bba:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    8bbe:	d12b      	bne.n	8c18 <lfclk_spinwait+0xbc>
    return false;
    8bc0:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    8bc2:	b11a      	cbz	r2, 8bcc <lfclk_spinwait+0x70>
    8bc4:	2b01      	cmp	r3, #1
    8bc6:	d029      	beq.n	8c1c <lfclk_spinwait+0xc0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    8bc8:	2d01      	cmp	r5, #1
    8bca:	d027      	beq.n	8c1c <lfclk_spinwait+0xc0>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    8bcc:	b1fc      	cbz	r4, 8c0e <lfclk_spinwait+0xb2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    8bce:	4630      	mov	r0, r6
    8bd0:	f7fc fdb6 	bl	5740 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    8bd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8bd8:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    8bdc:	2b00      	cmp	r3, #0
    8bde:	d1e4      	bne.n	8baa <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    8be0:	4b15      	ldr	r3, [pc, #84]	; (8c38 <lfclk_spinwait+0xdc>)
    8be2:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    8be4:	2b00      	cmp	r3, #0
    8be6:	d0e0      	beq.n	8baa <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8be8:	4b13      	ldr	r3, [pc, #76]	; (8c38 <lfclk_spinwait+0xdc>)
    8bea:	2200      	movs	r2, #0
    8bec:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    8bee:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    8bf0:	2301      	movs	r3, #1
    8bf2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    8bf6:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8bfa:	4a10      	ldr	r2, [pc, #64]	; (8c3c <lfclk_spinwait+0xe0>)
    8bfc:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8c00:	4a0f      	ldr	r2, [pc, #60]	; (8c40 <lfclk_spinwait+0xe4>)
    8c02:	6013      	str	r3, [r2, #0]
}
    8c04:	e7d1      	b.n	8baa <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    8c06:	2301      	movs	r3, #1
    8c08:	e7be      	b.n	8b88 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    8c0a:	2600      	movs	r6, #0
    8c0c:	e7c7      	b.n	8b9e <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    8c0e:	2021      	movs	r0, #33	; 0x21
    8c10:	2100      	movs	r1, #0
    8c12:	f007 fedb 	bl	109cc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    8c16:	e7dd      	b.n	8bd4 <lfclk_spinwait+0x78>
                return true;
    8c18:	2201      	movs	r2, #1
    8c1a:	e7d2      	b.n	8bc2 <lfclk_spinwait+0x66>
	if (isr_mode) {
    8c1c:	b124      	cbz	r4, 8c28 <lfclk_spinwait+0xcc>
	__asm__ volatile(
    8c1e:	f386 8811 	msr	BASEPRI, r6
    8c22:	f3bf 8f6f 	isb	sy
}
    8c26:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    8c28:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8c2c:	2202      	movs	r2, #2
    8c2e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    8c32:	e7f8      	b.n	8c26 <lfclk_spinwait+0xca>
    8c34:	20002fcd 	.word	0x20002fcd
    8c38:	40000104 	.word	0x40000104
    8c3c:	e000e100 	.word	0xe000e100
    8c40:	40000008 	.word	0x40000008

00008c44 <z_nrf_clock_control_get_onoff>:
{
    8c44:	b508      	push	{r3, lr}
	return get_onoff_manager(CLOCK_DEVICE,
    8c46:	b2c1      	uxtb	r1, r0
    8c48:	4801      	ldr	r0, [pc, #4]	; (8c50 <z_nrf_clock_control_get_onoff+0xc>)
    8c4a:	f00a fe98 	bl	1397e <get_onoff_manager>
}
    8c4e:	bd08      	pop	{r3, pc}
    8c50:	000163b0 	.word	0x000163b0

00008c54 <z_nrf_clock_control_lf_on>:
{
    8c54:	b510      	push	{r4, lr}
    8c56:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8c58:	4b10      	ldr	r3, [pc, #64]	; (8c9c <z_nrf_clock_control_lf_on+0x48>)
    8c5a:	2101      	movs	r1, #1
    8c5c:	f3bf 8f5b 	dmb	ish
    8c60:	e853 2f00 	ldrex	r2, [r3]
    8c64:	e843 1000 	strex	r0, r1, [r3]
    8c68:	2800      	cmp	r0, #0
    8c6a:	d1f9      	bne.n	8c60 <z_nrf_clock_control_lf_on+0xc>
    8c6c:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    8c70:	b11a      	cbz	r2, 8c7a <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
    8c72:	1e63      	subs	r3, r4, #1
    8c74:	2b01      	cmp	r3, #1
    8c76:	d90c      	bls.n	8c92 <z_nrf_clock_control_lf_on+0x3e>
}
    8c78:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    8c7a:	4809      	ldr	r0, [pc, #36]	; (8ca0 <z_nrf_clock_control_lf_on+0x4c>)
    8c7c:	f00a fe7f 	bl	1397e <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    8c80:	4908      	ldr	r1, [pc, #32]	; (8ca4 <z_nrf_clock_control_lf_on+0x50>)
    8c82:	2300      	movs	r3, #0
    8c84:	604b      	str	r3, [r1, #4]
    8c86:	60cb      	str	r3, [r1, #12]
    8c88:	2301      	movs	r3, #1
    8c8a:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    8c8c:	f008 fd49 	bl	11722 <onoff_request>
    8c90:	e7ef      	b.n	8c72 <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
    8c92:	4620      	mov	r0, r4
    8c94:	f7ff ff62 	bl	8b5c <lfclk_spinwait>
		break;
    8c98:	e7ee      	b.n	8c78 <z_nrf_clock_control_lf_on+0x24>
    8c9a:	bf00      	nop
    8c9c:	2000272c 	.word	0x2000272c
    8ca0:	000163b0 	.word	0x000163b0
    8ca4:	200026c8 	.word	0x200026c8

00008ca8 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    8ca8:	b510      	push	{r4, lr}
    8caa:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    8cac:	280a      	cmp	r0, #10
    8cae:	d007      	beq.n	8cc0 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    8cb0:	4b07      	ldr	r3, [pc, #28]	; (8cd0 <console_out+0x28>)
    8cb2:	6818      	ldr	r0, [r3, #0]
    8cb4:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    8cb6:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    8cb8:	685b      	ldr	r3, [r3, #4]
    8cba:	4798      	blx	r3

	return c;
}
    8cbc:	4620      	mov	r0, r4
    8cbe:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    8cc0:	4b03      	ldr	r3, [pc, #12]	; (8cd0 <console_out+0x28>)
    8cc2:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    8cc4:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    8cc6:	685b      	ldr	r3, [r3, #4]
    8cc8:	210d      	movs	r1, #13
    8cca:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    8ccc:	e7f0      	b.n	8cb0 <console_out+0x8>
    8cce:	bf00      	nop
    8cd0:	20002730 	.word	0x20002730

00008cd4 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
    8cd4:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    8cd6:	4c04      	ldr	r4, [pc, #16]	; (8ce8 <uart_console_hook_install+0x14>)
    8cd8:	4620      	mov	r0, r4
    8cda:	f7fd fc3b 	bl	6554 <__stdout_hook_install>
	__printk_hook_install(console_out);
    8cde:	4620      	mov	r0, r4
    8ce0:	f7f9 fa68 	bl	21b4 <__printk_hook_install>
}
    8ce4:	bd10      	pop	{r4, pc}
    8ce6:	bf00      	nop
    8ce8:	00008ca9 	.word	0x00008ca9

00008cec <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    8cec:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    8cee:	4806      	ldr	r0, [pc, #24]	; (8d08 <uart_console_init+0x1c>)
    8cf0:	4b06      	ldr	r3, [pc, #24]	; (8d0c <uart_console_init+0x20>)
    8cf2:	6018      	str	r0, [r3, #0]
    8cf4:	f00c fe33 	bl	1595e <z_device_ready>
    8cf8:	b118      	cbz	r0, 8d02 <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
    8cfa:	f7ff ffeb 	bl	8cd4 <uart_console_hook_install>

	return 0;
    8cfe:	2000      	movs	r0, #0
}
    8d00:	bd08      	pop	{r3, pc}
		return -ENODEV;
    8d02:	f06f 0012 	mvn.w	r0, #18
    8d06:	e7fb      	b.n	8d00 <uart_console_init+0x14>
    8d08:	000163c8 	.word	0x000163c8
    8d0c:	20002730 	.word	0x20002730

00008d10 <gpio_nrfx_config>:
	return res;
}

static int gpio_nrfx_config(const struct device *port,
			    gpio_pin_t pin, gpio_flags_t flags)
{
    8d10:	b4f0      	push	{r4, r5, r6, r7}
	return port->config;
    8d12:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    8d14:	685f      	ldr	r7, [r3, #4]
	nrf_gpio_pin_pull_t pull;
	nrf_gpio_pin_drive_t drive;
	nrf_gpio_pin_dir_t dir;
	nrf_gpio_pin_input_t input;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    8d16:	4b37      	ldr	r3, [pc, #220]	; (8df4 <gpio_nrfx_config+0xe4>)
    8d18:	4013      	ands	r3, r2
    8d1a:	4c37      	ldr	r4, [pc, #220]	; (8df8 <gpio_nrfx_config+0xe8>)
    8d1c:	42a3      	cmp	r3, r4
    8d1e:	d027      	beq.n	8d70 <gpio_nrfx_config+0x60>
    8d20:	d812      	bhi.n	8d48 <gpio_nrfx_config+0x38>
    8d22:	2b06      	cmp	r3, #6
    8d24:	d026      	beq.n	8d74 <gpio_nrfx_config+0x64>
    8d26:	d904      	bls.n	8d32 <gpio_nrfx_config+0x22>
    8d28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    8d2c:	d109      	bne.n	8d42 <gpio_nrfx_config+0x32>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		drive = NRF_GPIO_PIN_H0S1;
    8d2e:	2401      	movs	r4, #1
    8d30:	e016      	b.n	8d60 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    8d32:	b30b      	cbz	r3, 8d78 <gpio_nrfx_config+0x68>
    8d34:	2b02      	cmp	r3, #2
    8d36:	d101      	bne.n	8d3c <gpio_nrfx_config+0x2c>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		drive = NRF_GPIO_PIN_D0S1;
    8d38:	2404      	movs	r4, #4
    8d3a:	e011      	b.n	8d60 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    8d3c:	f06f 0015 	mvn.w	r0, #21
    8d40:	e046      	b.n	8dd0 <gpio_nrfx_config+0xc0>
    8d42:	f06f 0015 	mvn.w	r0, #21
    8d46:	e043      	b.n	8dd0 <gpio_nrfx_config+0xc0>
    8d48:	4c2c      	ldr	r4, [pc, #176]	; (8dfc <gpio_nrfx_config+0xec>)
    8d4a:	42a3      	cmp	r3, r4
    8d4c:	d016      	beq.n	8d7c <gpio_nrfx_config+0x6c>
    8d4e:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    8d52:	d101      	bne.n	8d58 <gpio_nrfx_config+0x48>
		drive = NRF_GPIO_PIN_H0H1;
    8d54:	2403      	movs	r4, #3
    8d56:	e003      	b.n	8d60 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    8d58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    8d5c:	d146      	bne.n	8dec <gpio_nrfx_config+0xdc>
		drive = NRF_GPIO_PIN_S0H1;
    8d5e:	2402      	movs	r4, #2

	default:
		return -EINVAL;
	}

	if ((flags & GPIO_PULL_UP) != 0) {
    8d60:	f012 0f10 	tst.w	r2, #16
    8d64:	d10c      	bne.n	8d80 <gpio_nrfx_config+0x70>
		pull = NRF_GPIO_PIN_PULLUP;
	} else if ((flags & GPIO_PULL_DOWN) != 0) {
    8d66:	f012 0f20 	tst.w	r2, #32
    8d6a:	d033      	beq.n	8dd4 <gpio_nrfx_config+0xc4>
		pull = NRF_GPIO_PIN_PULLDOWN;
    8d6c:	2501      	movs	r5, #1
    8d6e:	e008      	b.n	8d82 <gpio_nrfx_config+0x72>
		drive = NRF_GPIO_PIN_H0D1;
    8d70:	2407      	movs	r4, #7
    8d72:	e7f5      	b.n	8d60 <gpio_nrfx_config+0x50>
		drive = NRF_GPIO_PIN_S0D1;
    8d74:	2406      	movs	r4, #6
    8d76:	e7f3      	b.n	8d60 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    8d78:	2400      	movs	r4, #0
    8d7a:	e7f1      	b.n	8d60 <gpio_nrfx_config+0x50>
		drive = NRF_GPIO_PIN_D0H1;
    8d7c:	2405      	movs	r4, #5
    8d7e:	e7ef      	b.n	8d60 <gpio_nrfx_config+0x50>
		pull = NRF_GPIO_PIN_PULLUP;
    8d80:	2503      	movs	r5, #3
	} else {
		pull = NRF_GPIO_PIN_NOPULL;
	}

	dir = ((flags & GPIO_OUTPUT) != 0)
    8d82:	f3c2 2340 	ubfx	r3, r2, #9, #1
	      ? NRF_GPIO_PIN_DIR_OUTPUT
	      : NRF_GPIO_PIN_DIR_INPUT;

	input = ((flags & GPIO_INPUT) != 0)
		? NRF_GPIO_PIN_INPUT_CONNECT
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    8d86:	f412 7f80 	tst.w	r2, #256	; 0x100
    8d8a:	bf0c      	ite	eq
    8d8c:	2601      	moveq	r6, #1
    8d8e:	2600      	movne	r6, #0

	if ((flags & GPIO_OUTPUT) != 0) {
    8d90:	f412 7f00 	tst.w	r2, #512	; 0x200
    8d94:	d006      	beq.n	8da4 <gpio_nrfx_config+0x94>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    8d96:	f412 6f00 	tst.w	r2, #2048	; 0x800
    8d9a:	d01d      	beq.n	8dd8 <gpio_nrfx_config+0xc8>
			nrf_gpio_port_out_set(reg, BIT(pin));
    8d9c:	2201      	movs	r2, #1
    8d9e:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    8da0:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
	return port->config;
    8da4:	6842      	ldr	r2, [r0, #4]
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
			nrf_gpio_port_out_clear(reg, BIT(pin));
		}
	}

	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
    8da6:	7a12      	ldrb	r2, [r2, #8]
    8da8:	f001 011f 	and.w	r1, r1, #31
    8dac:	ea41 1242 	orr.w	r2, r1, r2, lsl #5
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    8db0:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8db2:	2a01      	cmp	r2, #1
    8db4:	d018      	beq.n	8de8 <gpio_nrfx_config+0xd8>
        case 0: return NRF_P0;
    8db6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    8dba:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    8dbe:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    8dc2:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    8dc6:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
    8dca:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		     dir, input, pull, drive, NRF_GPIO_PIN_NOSENSE);

	return 0;
    8dce:	2000      	movs	r0, #0
}
    8dd0:	bcf0      	pop	{r4, r5, r6, r7}
    8dd2:	4770      	bx	lr
		pull = NRF_GPIO_PIN_NOPULL;
    8dd4:	2500      	movs	r5, #0
    8dd6:	e7d4      	b.n	8d82 <gpio_nrfx_config+0x72>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    8dd8:	f412 6f80 	tst.w	r2, #1024	; 0x400
    8ddc:	d0e2      	beq.n	8da4 <gpio_nrfx_config+0x94>
			nrf_gpio_port_out_clear(reg, BIT(pin));
    8dde:	2201      	movs	r2, #1
    8de0:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    8de2:	f8c7 250c 	str.w	r2, [r7, #1292]	; 0x50c
}
    8de6:	e7dd      	b.n	8da4 <gpio_nrfx_config+0x94>
        case 1: return NRF_P1;
    8de8:	4a05      	ldr	r2, [pc, #20]	; (8e00 <gpio_nrfx_config+0xf0>)
    8dea:	e7e6      	b.n	8dba <gpio_nrfx_config+0xaa>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    8dec:	f06f 0015 	mvn.w	r0, #21
    8df0:	e7ee      	b.n	8dd0 <gpio_nrfx_config+0xc0>
    8df2:	bf00      	nop
    8df4:	00f00006 	.word	0x00f00006
    8df8:	00100006 	.word	0x00100006
    8dfc:	00400002 	.word	0x00400002
    8e00:	50000300 	.word	0x50000300

00008e04 <cfg_level_pins>:
	 */
	return out;
}

static void cfg_level_pins(const struct device *port)
{
    8e04:	b4f0      	push	{r4, r5, r6, r7}
	return port->data;
    8e06:	6905      	ldr	r5, [r0, #16]
	return port->config;
    8e08:	6846      	ldr	r6, [r0, #4]
	uint32_t out = data->pin_int_en;
    8e0a:	68e9      	ldr	r1, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    8e0c:	696a      	ldr	r2, [r5, #20]
    8e0e:	69ab      	ldr	r3, [r5, #24]
    8e10:	4313      	orrs	r3, r2
    8e12:	ea21 0103 	bic.w	r1, r1, r3
	const struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;
    8e16:	2301      	movs	r3, #1
	uint32_t pin = 0U;
    8e18:	2000      	movs	r0, #0
	uint32_t level_pins = get_level_pins(port);

	/* Configure sense detection on all pins that use it. */
	while (level_pins) {
    8e1a:	e011      	b.n	8e40 <cfg_level_pins+0x3c>
		return NRF_GPIO_PIN_SENSE_HIGH;
    8e1c:	f04f 0c02 	mov.w	ip, #2
    8e20:	e01d      	b.n	8e5e <cfg_level_pins+0x5a>
    8e22:	4f14      	ldr	r7, [pc, #80]	; (8e74 <cfg_level_pins+0x70>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    8e24:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    8e28:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
    8e2c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    8e30:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
    8e34:	f847 2024 	str.w	r2, [r7, r4, lsl #2]
		if (level_pins & bit) {
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
			uint32_t sense = sense_for_pin(data, pin);

			nrf_gpio_cfg_sense_set(abs_pin, sense);
			level_pins &= ~bit;
    8e38:	ea21 0103 	bic.w	r1, r1, r3
		}
		++pin;
    8e3c:	3001      	adds	r0, #1
		bit <<= 1;
    8e3e:	005b      	lsls	r3, r3, #1
	while (level_pins) {
    8e40:	b1a9      	cbz	r1, 8e6e <cfg_level_pins+0x6a>
		if (level_pins & bit) {
    8e42:	420b      	tst	r3, r1
    8e44:	d0fa      	beq.n	8e3c <cfg_level_pins+0x38>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    8e46:	7a34      	ldrb	r4, [r6, #8]
    8e48:	f000 021f 	and.w	r2, r0, #31
    8e4c:	ea42 1244 	orr.w	r2, r2, r4, lsl #5
	if ((BIT(pin) & data->int_active_level) != 0U) {
    8e50:	692c      	ldr	r4, [r5, #16]
    8e52:	40c4      	lsrs	r4, r0
    8e54:	f014 0f01 	tst.w	r4, #1
    8e58:	d1e0      	bne.n	8e1c <cfg_level_pins+0x18>
	return NRF_GPIO_PIN_SENSE_LOW;
    8e5a:	f04f 0c03 	mov.w	ip, #3
    *p_pin = pin_number & 0x1F;
    8e5e:	f002 041f 	and.w	r4, r2, #31
    return pin_number >> 5;
    8e62:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8e64:	2a01      	cmp	r2, #1
    8e66:	d0dc      	beq.n	8e22 <cfg_level_pins+0x1e>
        case 0: return NRF_P0;
    8e68:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    8e6c:	e7da      	b.n	8e24 <cfg_level_pins+0x20>
	}
}
    8e6e:	bcf0      	pop	{r4, r5, r6, r7}
    8e70:	4770      	bx	lr
    8e72:	bf00      	nop
    8e74:	50000300 	.word	0x50000300

00008e78 <check_level_trigger_pins>:
 *
 * @return Bitmask where 1 marks pin as trigger source.
 */
static uint32_t check_level_trigger_pins(const struct device *port,
					 uint32_t *sense_levels)
{
    8e78:	b5f0      	push	{r4, r5, r6, r7, lr}
    8e7a:	468c      	mov	ip, r1
	return port->data;
    8e7c:	6903      	ldr	r3, [r0, #16]
	return port->config;
    8e7e:	6841      	ldr	r1, [r0, #4]
	uint32_t out = data->pin_int_en;
    8e80:	68df      	ldr	r7, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    8e82:	695a      	ldr	r2, [r3, #20]
    8e84:	6998      	ldr	r0, [r3, #24]
    8e86:	4302      	orrs	r2, r0
    8e88:	ea27 0702 	bic.w	r7, r7, r2
	struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t level_pins = get_level_pins(port);
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
    8e8c:	684a      	ldr	r2, [r1, #4]
    return p_reg->IN;
    8e8e:	f8d2 2510 	ldr.w	r2, [r2, #1296]	; 0x510

	/* Extract which pins have logic level same as interrupt trigger level.
	 */
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    8e92:	6918      	ldr	r0, [r3, #16]
    8e94:	4050      	eors	r0, r2

	/* Discard pins that aren't configured for level. */
	uint32_t out = pin_states & level_pins;
    8e96:	ea27 0000 	bic.w	r0, r7, r0
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;

	uint32_t port_latch = 0;

	uint32_t check_pins = level_pins;
    8e9a:	463c      	mov	r4, r7
	uint32_t bit = 1U << pin;
    8e9c:	2301      	movs	r3, #1
	uint32_t pin = 0U;
    8e9e:	2500      	movs	r5, #0
#if IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE)
	/* Read LATCH, which will tell us which pin has changed its state. */
	port_latch = cfg->port->LATCH;
#endif

	while (check_pins) {
    8ea0:	e015      	b.n	8ece <check_level_trigger_pins+0x56>
        case 1: return NRF_P1;
    8ea2:	f8df e074 	ldr.w	lr, [pc, #116]	; 8f18 <check_level_trigger_pins+0xa0>
    8ea6:	e025      	b.n	8ef4 <check_level_trigger_pins+0x7c>
    *p_pin = pin_number & 0x1F;
    8ea8:	f002 061f 	and.w	r6, r2, #31
    return pin_number >> 5;
    8eac:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8eae:	2a01      	cmp	r2, #1
    8eb0:	d02e      	beq.n	8f10 <check_level_trigger_pins+0x98>
        case 0: return NRF_P0;
    8eb2:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    8eb6:	f506 72e0 	add.w	r2, r6, #448	; 0x1c0
    8eba:	f85e 6022 	ldr.w	r6, [lr, r2, lsl #2]
    8ebe:	f426 3640 	bic.w	r6, r6, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    8ec2:	f84e 6022 	str.w	r6, [lr, r2, lsl #2]
					*sense_levels |= bit;
				}
			}

			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
			check_pins &= ~bit;
    8ec6:	ea24 0403 	bic.w	r4, r4, r3
		}
		++pin;
    8eca:	3501      	adds	r5, #1
		bit <<= 1;
    8ecc:	005b      	lsls	r3, r3, #1
	while (check_pins) {
    8ece:	b314      	cbz	r4, 8f16 <check_level_trigger_pins+0x9e>
		if (check_pins & bit) {
    8ed0:	4223      	tst	r3, r4
    8ed2:	d0fa      	beq.n	8eca <check_level_trigger_pins+0x52>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    8ed4:	7a0e      	ldrb	r6, [r1, #8]
    8ed6:	f005 021f 	and.w	r2, r5, #31
    8eda:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
			if (!(level_pins & bit)) {
    8ede:	423b      	tst	r3, r7
    8ee0:	d1e2      	bne.n	8ea8 <check_level_trigger_pins+0x30>
    *p_pin = pin_number & 0x1F;
    8ee2:	f002 061f 	and.w	r6, r2, #31
    return pin_number >> 5;
    8ee6:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8eea:	f1be 0f01 	cmp.w	lr, #1
    8eee:	d0d8      	beq.n	8ea2 <check_level_trigger_pins+0x2a>
        case 0: return NRF_P0;
    8ef0:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    8ef4:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    8ef8:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    8efc:	f3c6 4601 	ubfx	r6, r6, #16, #2
				if (high) {
    8f00:	2e02      	cmp	r6, #2
    8f02:	d1d1      	bne.n	8ea8 <check_level_trigger_pins+0x30>
					*sense_levels |= bit;
    8f04:	f8dc 6000 	ldr.w	r6, [ip]
    8f08:	431e      	orrs	r6, r3
    8f0a:	f8cc 6000 	str.w	r6, [ip]
    8f0e:	e7cb      	b.n	8ea8 <check_level_trigger_pins+0x30>
        case 1: return NRF_P1;
    8f10:	f8df e004 	ldr.w	lr, [pc, #4]	; 8f18 <check_level_trigger_pins+0xa0>
    8f14:	e7cf      	b.n	8eb6 <check_level_trigger_pins+0x3e>
	 */
	cfg->port->LATCH = port_latch;
#endif

	return out;
}
    8f16:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8f18:	50000300 	.word	0x50000300

00008f1c <gpiote_pin_cleanup>:
{
    8f1c:	b510      	push	{r4, lr}
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    8f1e:	4b14      	ldr	r3, [pc, #80]	; (8f70 <gpiote_pin_cleanup+0x54>)
    8f20:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    8f24:	b2e4      	uxtb	r4, r4
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    8f26:	2300      	movs	r3, #0
    8f28:	e000      	b.n	8f2c <gpiote_pin_cleanup+0x10>
    8f2a:	3301      	adds	r3, #1
    8f2c:	2b07      	cmp	r3, #7
    8f2e:	d81d      	bhi.n	8f6c <gpiote_pin_cleanup+0x50>
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    8f30:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    8f34:	490e      	ldr	r1, [pc, #56]	; (8f70 <gpiote_pin_cleanup+0x54>)
    8f36:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    8f3a:	f3c2 2205 	ubfx	r2, r2, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    8f3e:	4290      	cmp	r0, r2
    8f40:	d1f3      	bne.n	8f2a <gpiote_pin_cleanup+0xe>
		    && (intenset & BIT(i))) {
    8f42:	fa24 f203 	lsr.w	r2, r4, r3
    8f46:	f012 0f01 	tst.w	r2, #1
    8f4a:	d0ee      	beq.n	8f2a <gpiote_pin_cleanup+0xe>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    8f4c:	460a      	mov	r2, r1
    8f4e:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    8f52:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    8f56:	f021 0101 	bic.w	r1, r1, #1
    8f5a:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    8f5e:	2101      	movs	r1, #1
    8f60:	4099      	lsls	r1, r3
    p_reg->INTENCLR = mask;
    8f62:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    8f66:	b2d8      	uxtb	r0, r3
    8f68:	f001 fb46 	bl	a5f8 <nrfx_gpiote_channel_free>
}
    8f6c:	bd10      	pop	{r4, pc}
    8f6e:	bf00      	nop
    8f70:	40006000 	.word	0x40006000

00008f74 <gpiote_channel_alloc>:
{
    8f74:	b570      	push	{r4, r5, r6, lr}
    8f76:	b082      	sub	sp, #8
    8f78:	4604      	mov	r4, r0
    8f7a:	460d      	mov	r5, r1
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    8f7c:	f10d 0007 	add.w	r0, sp, #7
    8f80:	f001 fb56 	bl	a630 <nrfx_gpiote_channel_alloc>
    8f84:	4b1c      	ldr	r3, [pc, #112]	; (8ff8 <gpiote_channel_alloc+0x84>)
    8f86:	4298      	cmp	r0, r3
    8f88:	d132      	bne.n	8ff0 <gpiote_channel_alloc+0x7c>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    8f8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8f8e:	f103 0240 	add.w	r2, r3, #64	; 0x40
    8f92:	0092      	lsls	r2, r2, #2
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    8f94:	4e19      	ldr	r6, [pc, #100]	; (8ffc <gpiote_channel_alloc+0x88>)
    8f96:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    8f9a:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    8f9e:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    8fa2:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    8fa6:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    8faa:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    8fae:	0224      	lsls	r4, r4, #8
    8fb0:	f404 547c 	and.w	r4, r4, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    8fb4:	042d      	lsls	r5, r5, #16
    8fb6:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    8fba:	432c      	orrs	r4, r5
    8fbc:	430c      	orrs	r4, r1
    8fbe:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
    return ((uint32_t)p_reg + event);
    8fc2:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    8fc6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    8fca:	2000      	movs	r0, #0
    8fcc:	6018      	str	r0, [r3, #0]
    8fce:	681b      	ldr	r3, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
    8fd0:	f89d 1007 	ldrb.w	r1, [sp, #7]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    8fd4:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    8fd8:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
    8fdc:	f042 0201 	orr.w	r2, r2, #1
    8fe0:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    8fe4:	2301      	movs	r3, #1
    8fe6:	408b      	lsls	r3, r1
    p_reg->INTENSET = mask;
    8fe8:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
}
    8fec:	b002      	add	sp, #8
    8fee:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    8ff0:	f06f 0012 	mvn.w	r0, #18
    8ff4:	e7fa      	b.n	8fec <gpiote_channel_alloc+0x78>
    8ff6:	bf00      	nop
    8ff8:	0bad0000 	.word	0x0bad0000
    8ffc:	40006000 	.word	0x40006000

00009000 <gpiote_pin_int_cfg>:
{
    9000:	b570      	push	{r4, r5, r6, lr}
    9002:	460d      	mov	r5, r1
	return port->data;
    9004:	6906      	ldr	r6, [r0, #16]
	return port->config;
    9006:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    9008:	7a1b      	ldrb	r3, [r3, #8]
    900a:	f001 041f 	and.w	r4, r1, #31
    900e:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	gpiote_pin_cleanup(abs_pin);
    9012:	4620      	mov	r0, r4
    9014:	f7ff ff82 	bl	8f1c <gpiote_pin_cleanup>
    *p_pin = pin_number & 0x1F;
    9018:	f004 001f 	and.w	r0, r4, #31
    return pin_number >> 5;
    901c:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    901e:	2b01      	cmp	r3, #1
    9020:	d020      	beq.n	9064 <gpiote_pin_int_cfg+0x64>
        case 0: return NRF_P0;
    9022:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    9026:	f500 71e0 	add.w	r1, r0, #448	; 0x1c0
    902a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    902e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    9032:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	if (data->pin_int_en & BIT(pin)) {
    9036:	68f3      	ldr	r3, [r6, #12]
    9038:	40eb      	lsrs	r3, r5
    903a:	f013 0f01 	tst.w	r3, #1
    903e:	d02f      	beq.n	90a0 <gpiote_pin_int_cfg+0xa0>
		if (data->trig_edge & BIT(pin)) {
    9040:	6973      	ldr	r3, [r6, #20]
    9042:	40eb      	lsrs	r3, r5
    9044:	f013 0f01 	tst.w	r3, #1
    9048:	d015      	beq.n	9076 <gpiote_pin_int_cfg+0x76>
				if (data->double_edge & BIT(pin)) {
    904a:	69b3      	ldr	r3, [r6, #24]
    904c:	40eb      	lsrs	r3, r5
    904e:	f013 0f01 	tst.w	r3, #1
    9052:	d109      	bne.n	9068 <gpiote_pin_int_cfg+0x68>
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    9054:	6931      	ldr	r1, [r6, #16]
    9056:	fa21 f505 	lsr.w	r5, r1, r5
    905a:	f015 0f01 	tst.w	r5, #1
    905e:	d008      	beq.n	9072 <gpiote_pin_int_cfg+0x72>
					pol = NRF_GPIOTE_POLARITY_LOTOHI;
    9060:	2101      	movs	r1, #1
    9062:	e002      	b.n	906a <gpiote_pin_int_cfg+0x6a>
        case 1: return NRF_P1;
    9064:	4a0f      	ldr	r2, [pc, #60]	; (90a4 <gpiote_pin_int_cfg+0xa4>)
    9066:	e7de      	b.n	9026 <gpiote_pin_int_cfg+0x26>
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
    9068:	2103      	movs	r1, #3
				res = gpiote_channel_alloc(abs_pin, pol);
    906a:	4620      	mov	r0, r4
    906c:	f7ff ff82 	bl	8f74 <gpiote_channel_alloc>
    9070:	e017      	b.n	90a2 <gpiote_pin_int_cfg+0xa2>
					pol = NRF_GPIOTE_POLARITY_HITOLO;
    9072:	2102      	movs	r1, #2
    9074:	e7f9      	b.n	906a <gpiote_pin_int_cfg+0x6a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    9076:	6931      	ldr	r1, [r6, #16]
    9078:	fa21 f505 	lsr.w	r5, r1, r5
    907c:	f015 0f01 	tst.w	r5, #1
    9080:	d10c      	bne.n	909c <gpiote_pin_int_cfg+0x9c>
	return NRF_GPIO_PIN_SENSE_LOW;
    9082:	2103      	movs	r1, #3
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    9084:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    9088:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    908c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    9090:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    9094:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	int res = 0;
    9098:	2000      	movs	r0, #0
}
    909a:	e002      	b.n	90a2 <gpiote_pin_int_cfg+0xa2>
		return NRF_GPIO_PIN_SENSE_HIGH;
    909c:	2102      	movs	r1, #2
    909e:	e7f1      	b.n	9084 <gpiote_pin_int_cfg+0x84>
	int res = 0;
    90a0:	2000      	movs	r0, #0
}
    90a2:	bd70      	pop	{r4, r5, r6, pc}
    90a4:	50000300 	.word	0x50000300

000090a8 <gpio_nrfx_pin_interrupt_configure>:
{
    90a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return port->data;
    90aa:	6904      	ldr	r4, [r0, #16]
	return port->config;
    90ac:	6845      	ldr	r5, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    90ae:	7a2e      	ldrb	r6, [r5, #8]
    90b0:	f001 051f 	and.w	r5, r1, #31
    90b4:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    90b8:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    90bc:	d025      	beq.n	910a <gpio_nrfx_pin_interrupt_configure+0x62>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    90be:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    90c2:	d035      	beq.n	9130 <gpio_nrfx_pin_interrupt_configure+0x88>
    90c4:	68e5      	ldr	r5, [r4, #12]
    90c6:	2601      	movs	r6, #1
    90c8:	408e      	lsls	r6, r1
    90ca:	4335      	orrs	r5, r6
    90cc:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    90ce:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    90d2:	d033      	beq.n	913c <gpio_nrfx_pin_interrupt_configure+0x94>
    90d4:	6962      	ldr	r2, [r4, #20]
    90d6:	2501      	movs	r5, #1
    90d8:	408d      	lsls	r5, r1
    90da:	ea22 0205 	bic.w	r2, r2, r5
    90de:	6162      	str	r2, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    90e0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    90e4:	d02f      	beq.n	9146 <gpio_nrfx_pin_interrupt_configure+0x9e>
    90e6:	69a2      	ldr	r2, [r4, #24]
    90e8:	2501      	movs	r5, #1
    90ea:	408d      	lsls	r5, r1
    90ec:	ea22 0205 	bic.w	r2, r2, r5
    90f0:	61a2      	str	r2, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    90f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    90f6:	d02b      	beq.n	9150 <gpio_nrfx_pin_interrupt_configure+0xa8>
    90f8:	6923      	ldr	r3, [r4, #16]
    90fa:	2201      	movs	r2, #1
    90fc:	408a      	lsls	r2, r1
    90fe:	ea23 0302 	bic.w	r3, r3, r2
    9102:	6123      	str	r3, [r4, #16]
	return gpiote_pin_int_cfg(port, pin);
    9104:	f7ff ff7c 	bl	9000 <gpiote_pin_int_cfg>
}
    9108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *p_pin = pin_number & 0x1F;
    910a:	f005 061f 	and.w	r6, r5, #31
    return pin_number >> 5;
    910e:	096d      	lsrs	r5, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9110:	2d01      	cmp	r5, #1
    9112:	d00b      	beq.n	912c <gpio_nrfx_pin_interrupt_configure+0x84>
        case 0: return NRF_P0;
    9114:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    9118:	f506 75e0 	add.w	r5, r6, #448	; 0x1c0
    911c:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    9120:	f015 0f01 	tst.w	r5, #1
    9124:	d0cb      	beq.n	90be <gpio_nrfx_pin_interrupt_configure+0x16>
		return -ENOTSUP;
    9126:	f06f 0085 	mvn.w	r0, #133	; 0x85
    912a:	e7ed      	b.n	9108 <gpio_nrfx_pin_interrupt_configure+0x60>
        case 1: return NRF_P1;
    912c:	4f0b      	ldr	r7, [pc, #44]	; (915c <gpio_nrfx_pin_interrupt_configure+0xb4>)
    912e:	e7f3      	b.n	9118 <gpio_nrfx_pin_interrupt_configure+0x70>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    9130:	68e5      	ldr	r5, [r4, #12]
    9132:	2601      	movs	r6, #1
    9134:	408e      	lsls	r6, r1
    9136:	ea25 0506 	bic.w	r5, r5, r6
    913a:	e7c7      	b.n	90cc <gpio_nrfx_pin_interrupt_configure+0x24>
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    913c:	6962      	ldr	r2, [r4, #20]
    913e:	2501      	movs	r5, #1
    9140:	408d      	lsls	r5, r1
    9142:	432a      	orrs	r2, r5
    9144:	e7cb      	b.n	90de <gpio_nrfx_pin_interrupt_configure+0x36>
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    9146:	69a2      	ldr	r2, [r4, #24]
    9148:	2501      	movs	r5, #1
    914a:	408d      	lsls	r5, r1
    914c:	432a      	orrs	r2, r5
    914e:	e7cf      	b.n	90f0 <gpio_nrfx_pin_interrupt_configure+0x48>
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    9150:	6923      	ldr	r3, [r4, #16]
    9152:	2201      	movs	r2, #1
    9154:	408a      	lsls	r2, r1
    9156:	4313      	orrs	r3, r2
    9158:	e7d3      	b.n	9102 <gpio_nrfx_pin_interrupt_configure+0x5a>
    915a:	bf00      	nop
    915c:	50000300 	.word	0x50000300

00009160 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    9160:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    9162:	4b0b      	ldr	r3, [pc, #44]	; (9190 <gpio_nrfx_init+0x30>)
    9164:	781b      	ldrb	r3, [r3, #0]
    9166:	b10b      	cbz	r3, 916c <gpio_nrfx_init+0xc>
		irq_enable(DT_IRQN(GPIOTE_NODE));
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    9168:	2000      	movs	r0, #0
    916a:	bd08      	pop	{r3, pc}
		gpio_initialized = true;
    916c:	4b08      	ldr	r3, [pc, #32]	; (9190 <gpio_nrfx_init+0x30>)
    916e:	2201      	movs	r2, #1
    9170:	701a      	strb	r2, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    9172:	2200      	movs	r2, #0
    9174:	2105      	movs	r1, #5
    9176:	2006      	movs	r0, #6
    9178:	f7fc fb6c 	bl	5854 <z_arm_irq_priority_set>
		irq_enable(DT_IRQN(GPIOTE_NODE));
    917c:	2006      	movs	r0, #6
    917e:	f7fc fb37 	bl	57f0 <arch_irq_enable>
    9182:	4b04      	ldr	r3, [pc, #16]	; (9194 <gpio_nrfx_init+0x34>)
    9184:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    9188:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    918c:	e7ec      	b.n	9168 <gpio_nrfx_init+0x8>
    918e:	bf00      	nop
    9190:	20002fc5 	.word	0x20002fc5
    9194:	40006000 	.word	0x40006000

00009198 <gpiote_event_handler>:
{
    9198:	b570      	push	{r4, r5, r6, lr}
    919a:	b084      	sub	sp, #16
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    919c:	2300      	movs	r3, #0
    919e:	9302      	str	r3, [sp, #8]
    91a0:	9303      	str	r3, [sp, #12]
	uint32_t sense_levels[GPIO_COUNT] = {0};
    91a2:	9300      	str	r3, [sp, #0]
    91a4:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    91a6:	4b46      	ldr	r3, [pc, #280]	; (92c0 <gpiote_event_handler+0x128>)
    91a8:	681c      	ldr	r4, [r3, #0]
	if (port_event) {
    91aa:	b90c      	cbnz	r4, 91b0 <gpiote_event_handler+0x18>
{
    91ac:	2100      	movs	r1, #0
    91ae:	e011      	b.n	91d4 <gpiote_event_handler+0x3c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
    91b0:	4d44      	ldr	r5, [pc, #272]	; (92c4 <gpiote_event_handler+0x12c>)
    91b2:	4669      	mov	r1, sp
    91b4:	4628      	mov	r0, r5
    91b6:	f7ff fe5f 	bl	8e78 <check_level_trigger_pins>
		fired_triggers[0] =
    91ba:	9002      	str	r0, [sp, #8]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
    91bc:	a901      	add	r1, sp, #4
    91be:	f105 0018 	add.w	r0, r5, #24
    91c2:	f7ff fe59 	bl	8e78 <check_level_trigger_pins>
		fired_triggers[1] =
    91c6:	9003      	str	r0, [sp, #12]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    91c8:	4b3d      	ldr	r3, [pc, #244]	; (92c0 <gpiote_event_handler+0x128>)
    91ca:	2200      	movs	r2, #0
    91cc:	601a      	str	r2, [r3, #0]
    91ce:	681b      	ldr	r3, [r3, #0]
}
    91d0:	e7ec      	b.n	91ac <gpiote_event_handler+0x14>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    91d2:	3101      	adds	r1, #1
    91d4:	2907      	cmp	r1, #7
    91d6:	d82d      	bhi.n	9234 <gpiote_event_handler+0x9c>
		nrf_gpiote_event_t evt =
    91d8:	f101 0340 	add.w	r3, r1, #64	; 0x40
    91dc:	009b      	lsls	r3, r3, #2
    91de:	b29a      	uxth	r2, r3
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    91e0:	2301      	movs	r3, #1
    91e2:	408b      	lsls	r3, r1
    return p_reg->INTENSET & mask;
    91e4:	4838      	ldr	r0, [pc, #224]	; (92c8 <gpiote_event_handler+0x130>)
    91e6:	f8d0 0304 	ldr.w	r0, [r0, #772]	; 0x304
    91ea:	4203      	tst	r3, r0
    91ec:	d0f1      	beq.n	91d2 <gpiote_event_handler+0x3a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    91ee:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    91f2:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    91f6:	681b      	ldr	r3, [r3, #0]
    91f8:	2b00      	cmp	r3, #0
    91fa:	d0ea      	beq.n	91d2 <gpiote_event_handler+0x3a>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    91fc:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    9200:	4831      	ldr	r0, [pc, #196]	; (92c8 <gpiote_event_handler+0x130>)
    9202:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    9206:	f3c0 3340 	ubfx	r3, r0, #13, #1
    920a:	f3c0 2004 	ubfx	r0, r0, #8, #5
    920e:	2501      	movs	r5, #1
    9210:	fa05 f000 	lsl.w	r0, r5, r0
    9214:	ad04      	add	r5, sp, #16
    9216:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    921a:	f853 5c08 	ldr.w	r5, [r3, #-8]
    921e:	4305      	orrs	r5, r0
    9220:	f843 5c08 	str.w	r5, [r3, #-8]
    return ((uint32_t)p_reg + event);
    9224:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    9228:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    922c:	2200      	movs	r2, #0
    922e:	601a      	str	r2, [r3, #0]
    9230:	681b      	ldr	r3, [r3, #0]
}
    9232:	e7ce      	b.n	91d2 <gpiote_event_handler+0x3a>
	if (fired_triggers[0]) {
    9234:	9e02      	ldr	r6, [sp, #8]
    9236:	b92e      	cbnz	r6, 9244 <gpiote_event_handler+0xac>
	if (fired_triggers[1]) {
    9238:	9e03      	ldr	r6, [sp, #12]
    923a:	b9ee      	cbnz	r6, 9278 <gpiote_event_handler+0xe0>
	if (port_event) {
    923c:	2c00      	cmp	r4, #0
    923e:	d135      	bne.n	92ac <gpiote_event_handler+0x114>
}
    9240:	b004      	add	sp, #16
    9242:	bd70      	pop	{r4, r5, r6, pc}
	return list->head;
    9244:	4b21      	ldr	r3, [pc, #132]	; (92cc <gpiote_event_handler+0x134>)
    9246:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    9248:	b119      	cbz	r1, 9252 <gpiote_event_handler+0xba>
    924a:	460d      	mov	r5, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    924c:	b149      	cbz	r1, 9262 <gpiote_event_handler+0xca>
	return node->next;
    924e:	680d      	ldr	r5, [r1, #0]
    9250:	e007      	b.n	9262 <gpiote_event_handler+0xca>
    9252:	460d      	mov	r5, r1
    9254:	e005      	b.n	9262 <gpiote_event_handler+0xca>
    9256:	b16d      	cbz	r5, 9274 <gpiote_event_handler+0xdc>
    9258:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    925a:	b105      	cbz	r5, 925e <gpiote_event_handler+0xc6>
	return node->next;
    925c:	682b      	ldr	r3, [r5, #0]
    925e:	4629      	mov	r1, r5
    9260:	461d      	mov	r5, r3
    9262:	2900      	cmp	r1, #0
    9264:	d0e8      	beq.n	9238 <gpiote_event_handler+0xa0>
		if (cb->pin_mask & pins) {
    9266:	688a      	ldr	r2, [r1, #8]
    9268:	4032      	ands	r2, r6
    926a:	d0f4      	beq.n	9256 <gpiote_event_handler+0xbe>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    926c:	684b      	ldr	r3, [r1, #4]
    926e:	4815      	ldr	r0, [pc, #84]	; (92c4 <gpiote_event_handler+0x12c>)
    9270:	4798      	blx	r3
    9272:	e7f0      	b.n	9256 <gpiote_event_handler+0xbe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    9274:	462b      	mov	r3, r5
    9276:	e7f2      	b.n	925e <gpiote_event_handler+0xc6>
	return list->head;
    9278:	4b15      	ldr	r3, [pc, #84]	; (92d0 <gpiote_event_handler+0x138>)
    927a:	6859      	ldr	r1, [r3, #4]
    927c:	b119      	cbz	r1, 9286 <gpiote_event_handler+0xee>
    927e:	460d      	mov	r5, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    9280:	b149      	cbz	r1, 9296 <gpiote_event_handler+0xfe>
	return node->next;
    9282:	680d      	ldr	r5, [r1, #0]
    9284:	e007      	b.n	9296 <gpiote_event_handler+0xfe>
    9286:	460d      	mov	r5, r1
    9288:	e005      	b.n	9296 <gpiote_event_handler+0xfe>
    928a:	b16d      	cbz	r5, 92a8 <gpiote_event_handler+0x110>
    928c:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    928e:	b105      	cbz	r5, 9292 <gpiote_event_handler+0xfa>
	return node->next;
    9290:	682b      	ldr	r3, [r5, #0]
    9292:	4629      	mov	r1, r5
    9294:	461d      	mov	r5, r3
    9296:	2900      	cmp	r1, #0
    9298:	d0d0      	beq.n	923c <gpiote_event_handler+0xa4>
		if (cb->pin_mask & pins) {
    929a:	688a      	ldr	r2, [r1, #8]
    929c:	4032      	ands	r2, r6
    929e:	d0f4      	beq.n	928a <gpiote_event_handler+0xf2>
			cb->handler(port, cb, cb->pin_mask & pins);
    92a0:	684b      	ldr	r3, [r1, #4]
    92a2:	480c      	ldr	r0, [pc, #48]	; (92d4 <gpiote_event_handler+0x13c>)
    92a4:	4798      	blx	r3
    92a6:	e7f0      	b.n	928a <gpiote_event_handler+0xf2>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    92a8:	462b      	mov	r3, r5
    92aa:	e7f2      	b.n	9292 <gpiote_event_handler+0xfa>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
    92ac:	4c05      	ldr	r4, [pc, #20]	; (92c4 <gpiote_event_handler+0x12c>)
    92ae:	4620      	mov	r0, r4
    92b0:	f7ff fda8 	bl	8e04 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
    92b4:	f104 0018 	add.w	r0, r4, #24
    92b8:	f7ff fda4 	bl	8e04 <cfg_level_pins>
}
    92bc:	e7c0      	b.n	9240 <gpiote_event_handler+0xa8>
    92be:	bf00      	nop
    92c0:	4000617c 	.word	0x4000617c
    92c4:	000163f8 	.word	0x000163f8
    92c8:	40006000 	.word	0x40006000
    92cc:	20002734 	.word	0x20002734
    92d0:	20002750 	.word	0x20002750
    92d4:	00016410 	.word	0x00016410

000092d8 <i2c_nrfx_twi_transfer>:
}

static int i2c_nrfx_twi_transfer(const struct device *dev,
				 struct i2c_msg *msgs,
				 uint8_t num_msgs, uint16_t addr)
{
    92d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    92dc:	b086      	sub	sp, #24
    92de:	4607      	mov	r7, r0
    92e0:	4688      	mov	r8, r1
    92e2:	4691      	mov	r9, r2
    92e4:	469a      	mov	sl, r3
	return dev->data;
    92e6:	6900      	ldr	r0, [r0, #16]
	return z_impl_k_sem_take(sem, timeout);
    92e8:	f04f 32ff 	mov.w	r2, #4294967295
    92ec:	f04f 33ff 	mov.w	r3, #4294967295
    92f0:	f006 fe52 	bl	ff98 <z_impl_k_sem_take>
    92f4:	6938      	ldr	r0, [r7, #16]
	int ret = 0;

	k_sem_take(&(get_dev_data(dev)->transfer_sync), K_FOREVER);

	/* Dummy take on completion_sync sem to be sure that it is empty */
	k_sem_take(&(get_dev_data(dev)->completion_sync), K_NO_WAIT);
    92f6:	3010      	adds	r0, #16
    92f8:	2200      	movs	r2, #0
    92fa:	2300      	movs	r3, #0
    92fc:	f006 fe4c 	bl	ff98 <z_impl_k_sem_take>

	nrfx_twi_enable(&get_dev_config(dev)->twi);
    9300:	6878      	ldr	r0, [r7, #4]
    9302:	f001 fcc7 	bl	ac94 <nrfx_twi_enable>

	for (size_t i = 0; i < num_msgs; i++) {
    9306:	2400      	movs	r4, #0
	int ret = 0;
    9308:	4625      	mov	r5, r4
	for (size_t i = 0; i < num_msgs; i++) {
    930a:	e01b      	b.n	9344 <i2c_nrfx_twi_transfer+0x6c>
			/* - otherwise, just finish the transfer without
			 *   generating the STOP condition, unless the current
			 *   message is an RX request, for which such feature
			 *   is not supported
			 */
			} else if (msgs[i].flags & I2C_MSG_READ) {
    930c:	f013 0f01 	tst.w	r3, #1
    9310:	f040 808b 	bne.w	942a <i2c_nrfx_twi_transfer+0x152>
				ret = -ENOTSUP;
				break;
			} else {
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
    9314:	2220      	movs	r2, #32
			}
		}

		res = nrfx_twi_xfer(&get_dev_config(dev)->twi,
    9316:	a901      	add	r1, sp, #4
    9318:	6878      	ldr	r0, [r7, #4]
    931a:	f001 fceb 	bl	acf4 <nrfx_twi_xfer>
				    &cur_xfer,
				    xfer_flags);
		if (res != NRFX_SUCCESS) {
    931e:	4b44      	ldr	r3, [pc, #272]	; (9430 <i2c_nrfx_twi_transfer+0x158>)
    9320:	4298      	cmp	r0, r3
    9322:	d13d      	bne.n	93a0 <i2c_nrfx_twi_transfer+0xc8>
	return dev->data;
    9324:	6938      	ldr	r0, [r7, #16]
				ret = -EIO;
				break;
			}
		}

		ret = k_sem_take(&(get_dev_data(dev)->completion_sync),
    9326:	3010      	adds	r0, #16
    9328:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    932c:	2300      	movs	r3, #0
    932e:	f006 fe33 	bl	ff98 <z_impl_k_sem_take>
				 I2C_TRANSFER_TIMEOUT_MSEC);
		if (ret != 0) {
    9332:	4605      	mov	r5, r0
    9334:	2800      	cmp	r0, #0
    9336:	d13c      	bne.n	93b2 <i2c_nrfx_twi_transfer+0xda>
	return dev->data;
    9338:	693b      	ldr	r3, [r7, #16]
					     get_dev_config(dev)->config.sda);
			ret = -EIO;
			break;
		}

		res = get_dev_data(dev)->res;
    933a:	6a19      	ldr	r1, [r3, #32]
		if (res != NRFX_SUCCESS) {
    933c:	4b3c      	ldr	r3, [pc, #240]	; (9430 <i2c_nrfx_twi_transfer+0x158>)
    933e:	4299      	cmp	r1, r3
    9340:	d153      	bne.n	93ea <i2c_nrfx_twi_transfer+0x112>
	for (size_t i = 0; i < num_msgs; i++) {
    9342:	3401      	adds	r4, #1
    9344:	454c      	cmp	r4, r9
    9346:	d266      	bcs.n	9416 <i2c_nrfx_twi_transfer+0x13e>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
    9348:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    934c:	eb08 0582 	add.w	r5, r8, r2, lsl #2
    9350:	7a2b      	ldrb	r3, [r5, #8]
    9352:	f013 0f08 	tst.w	r3, #8
    9356:	d15c      	bne.n	9412 <i2c_nrfx_twi_transfer+0x13a>
		nrfx_twi_xfer_desc_t cur_xfer = {
    9358:	2600      	movs	r6, #0
    935a:	9601      	str	r6, [sp, #4]
    935c:	9603      	str	r6, [sp, #12]
    935e:	9605      	str	r6, [sp, #20]
			.type		= (msgs[i].flags & I2C_MSG_READ) ?
    9360:	7a2b      	ldrb	r3, [r5, #8]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
    9362:	f003 0101 	and.w	r1, r3, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
    9366:	f88d 1004 	strb.w	r1, [sp, #4]
    936a:	f88d a005 	strb.w	sl, [sp, #5]
			.primary_length = msgs[i].len,
    936e:	6869      	ldr	r1, [r5, #4]
		nrfx_twi_xfer_desc_t cur_xfer = {
    9370:	9102      	str	r1, [sp, #8]
			.p_primary_buf  = msgs[i].buf,
    9372:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
		nrfx_twi_xfer_desc_t cur_xfer = {
    9376:	9204      	str	r2, [sp, #16]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
    9378:	f013 0f02 	tst.w	r3, #2
    937c:	d10e      	bne.n	939c <i2c_nrfx_twi_transfer+0xc4>
			if ((i < (num_msgs - 1)) &&
    937e:	f109 32ff 	add.w	r2, r9, #4294967295
    9382:	42a2      	cmp	r2, r4
    9384:	d9c2      	bls.n	930c <i2c_nrfx_twi_transfer+0x34>
			    !(msgs[i + 1].flags & I2C_MSG_RESTART)) {
    9386:	1c62      	adds	r2, r4, #1
    9388:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    938c:	eb08 0282 	add.w	r2, r8, r2, lsl #2
    9390:	7a12      	ldrb	r2, [r2, #8]
			if ((i < (num_msgs - 1)) &&
    9392:	f012 0f04 	tst.w	r2, #4
    9396:	d1b9      	bne.n	930c <i2c_nrfx_twi_transfer+0x34>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
    9398:	2240      	movs	r2, #64	; 0x40
    939a:	e7bc      	b.n	9316 <i2c_nrfx_twi_transfer+0x3e>
		uint32_t xfer_flags = 0;
    939c:	2200      	movs	r2, #0
    939e:	e7ba      	b.n	9316 <i2c_nrfx_twi_transfer+0x3e>
			if (res == NRFX_ERROR_BUSY) {
    93a0:	330b      	adds	r3, #11
    93a2:	4298      	cmp	r0, r3
    93a4:	d002      	beq.n	93ac <i2c_nrfx_twi_transfer+0xd4>
				ret = -EIO;
    93a6:	f06f 0504 	mvn.w	r5, #4
    93aa:	e034      	b.n	9416 <i2c_nrfx_twi_transfer+0x13e>
				ret = -EBUSY;
    93ac:	f06f 050f 	mvn.w	r5, #15
    93b0:	e031      	b.n	9416 <i2c_nrfx_twi_transfer+0x13e>
    93b2:	4b20      	ldr	r3, [pc, #128]	; (9434 <i2c_nrfx_twi_transfer+0x15c>)
    93b4:	4a20      	ldr	r2, [pc, #128]	; (9438 <i2c_nrfx_twi_transfer+0x160>)
    93b6:	1a9b      	subs	r3, r3, r2
    93b8:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Error on I2C line occurred for message %d", i);
    93ba:	f04f 0200 	mov.w	r2, #0
    93be:	2101      	movs	r1, #1
    93c0:	f361 0202 	bfi	r2, r1, #0, #3
    93c4:	f36f 02c5 	bfc	r2, #3, #3
    93c8:	f363 128f 	bfi	r2, r3, #6, #10
    93cc:	4621      	mov	r1, r4
    93ce:	481b      	ldr	r0, [pc, #108]	; (943c <i2c_nrfx_twi_transfer+0x164>)
    93d0:	f7f9 ff6e 	bl	32b0 <log_1>
			nrfx_twi_disable(&get_dev_config(dev)->twi);
    93d4:	6878      	ldr	r0, [r7, #4]
    93d6:	f001 fc6d 	bl	acb4 <nrfx_twi_disable>
	return dev->config;
    93da:	687b      	ldr	r3, [r7, #4]
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE nrfx_err_t nrfx_twi_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    return nrfx_twi_twim_bus_recover(scl_pin, sda_pin);
    93dc:	68d9      	ldr	r1, [r3, #12]
    93de:	6898      	ldr	r0, [r3, #8]
    93e0:	f003 fb58 	bl	ca94 <nrfx_twi_twim_bus_recover>
			ret = -EIO;
    93e4:	f06f 0504 	mvn.w	r5, #4
			break;
    93e8:	e015      	b.n	9416 <i2c_nrfx_twi_transfer+0x13e>
    93ea:	4a12      	ldr	r2, [pc, #72]	; (9434 <i2c_nrfx_twi_transfer+0x15c>)
    93ec:	4b12      	ldr	r3, [pc, #72]	; (9438 <i2c_nrfx_twi_transfer+0x160>)
    93ee:	1ad2      	subs	r2, r2, r3
    93f0:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Error 0x%08X occurred for message %d", res, i);
    93f2:	f04f 0300 	mov.w	r3, #0
    93f6:	2001      	movs	r0, #1
    93f8:	f360 0302 	bfi	r3, r0, #0, #3
    93fc:	f36f 03c5 	bfc	r3, #3, #3
    9400:	f362 138f 	bfi	r3, r2, #6, #10
    9404:	4622      	mov	r2, r4
    9406:	480e      	ldr	r0, [pc, #56]	; (9440 <i2c_nrfx_twi_transfer+0x168>)
    9408:	f7f9 ff88 	bl	331c <log_2>
			ret = -EIO;
    940c:	f06f 0504 	mvn.w	r5, #4
			break;
    9410:	e001      	b.n	9416 <i2c_nrfx_twi_transfer+0x13e>
			ret = -ENOTSUP;
    9412:	f06f 0585 	mvn.w	r5, #133	; 0x85
		}
	}

	nrfx_twi_disable(&get_dev_config(dev)->twi);
    9416:	6878      	ldr	r0, [r7, #4]
    9418:	f001 fc4c 	bl	acb4 <nrfx_twi_disable>
	return dev->data;
    941c:	6938      	ldr	r0, [r7, #16]
	z_impl_k_sem_give(sem);
    941e:	f006 fd97 	bl	ff50 <z_impl_k_sem_give>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));

	return ret;
}
    9422:	4628      	mov	r0, r5
    9424:	b006      	add	sp, #24
    9426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				ret = -ENOTSUP;
    942a:	f06f 0585 	mvn.w	r5, #133	; 0x85
    942e:	e7f2      	b.n	9416 <i2c_nrfx_twi_transfer+0x13e>
    9430:	0bad0000 	.word	0x0bad0000
    9434:	000165f8 	.word	0x000165f8
    9438:	000165d8 	.word	0x000165d8
    943c:	000179b8 	.word	0x000179b8
    9440:	000179e4 	.word	0x000179e4

00009444 <event_handler>:

static void event_handler(nrfx_twi_evt_t const *p_event, void *p_context)
{
    9444:	b508      	push	{r3, lr}
	struct i2c_nrfx_twi_data *dev_data = p_context;

	switch (p_event->type) {
    9446:	7803      	ldrb	r3, [r0, #0]
    9448:	2b01      	cmp	r3, #1
    944a:	d00c      	beq.n	9466 <event_handler+0x22>
    944c:	2b02      	cmp	r3, #2
    944e:	d00d      	beq.n	946c <event_handler+0x28>
    9450:	b113      	cbz	r3, 9458 <event_handler+0x14>
		break;
	case NRFX_TWI_EVT_DATA_NACK:
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
		break;
	default:
		dev_data->res = NRFX_ERROR_INTERNAL;
    9452:	4b08      	ldr	r3, [pc, #32]	; (9474 <event_handler+0x30>)
    9454:	620b      	str	r3, [r1, #32]
		break;
    9456:	e001      	b.n	945c <event_handler+0x18>
		dev_data->res = NRFX_SUCCESS;
    9458:	4b07      	ldr	r3, [pc, #28]	; (9478 <event_handler+0x34>)
    945a:	620b      	str	r3, [r1, #32]
	}

	k_sem_give(&dev_data->completion_sync);
    945c:	f101 0010 	add.w	r0, r1, #16
    9460:	f006 fd76 	bl	ff50 <z_impl_k_sem_give>
}
    9464:	bd08      	pop	{r3, pc}
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    9466:	4b05      	ldr	r3, [pc, #20]	; (947c <event_handler+0x38>)
    9468:	620b      	str	r3, [r1, #32]
		break;
    946a:	e7f7      	b.n	945c <event_handler+0x18>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    946c:	4b04      	ldr	r3, [pc, #16]	; (9480 <event_handler+0x3c>)
    946e:	620b      	str	r3, [r1, #32]
		break;
    9470:	e7f4      	b.n	945c <event_handler+0x18>
    9472:	bf00      	nop
    9474:	0bad0001 	.word	0x0bad0001
    9478:	0bad0000 	.word	0x0bad0000
    947c:	0bae0001 	.word	0x0bae0001
    9480:	0bae0002 	.word	0x0bae0002

00009484 <i2c_nrfx_twi_configure>:
	return dev->config;
    9484:	6842      	ldr	r2, [r0, #4]
static int i2c_nrfx_twi_configure(const struct device *dev,
				  uint32_t dev_config)
{
	nrfx_twi_t const *inst = &(get_dev_config(dev)->twi);

	if (I2C_ADDR_10_BITS & dev_config) {
    9486:	f011 0f01 	tst.w	r1, #1
    948a:	d128      	bne.n	94de <i2c_nrfx_twi_configure+0x5a>
{
    948c:	b508      	push	{r3, lr}
		return -EINVAL;
	}

	switch (I2C_SPEED_GET(dev_config)) {
    948e:	f3c1 0342 	ubfx	r3, r1, #1, #3
    9492:	2b01      	cmp	r3, #1
    9494:	d014      	beq.n	94c0 <i2c_nrfx_twi_configure+0x3c>
    9496:	2b02      	cmp	r3, #2
    9498:	d01b      	beq.n	94d2 <i2c_nrfx_twi_configure+0x4e>
    949a:	4b12      	ldr	r3, [pc, #72]	; (94e4 <i2c_nrfx_twi_configure+0x60>)
    949c:	4a12      	ldr	r2, [pc, #72]	; (94e8 <i2c_nrfx_twi_configure+0x64>)
    949e:	1a9b      	subs	r3, r3, r2
    94a0:	08db      	lsrs	r3, r3, #3
		break;
	case I2C_SPEED_FAST:
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
		break;
	default:
		LOG_ERR("unsupported speed");
    94a2:	f04f 0100 	mov.w	r1, #0
    94a6:	2201      	movs	r2, #1
    94a8:	f362 0102 	bfi	r1, r2, #0, #3
    94ac:	f36f 01c5 	bfc	r1, #3, #3
    94b0:	f363 118f 	bfi	r1, r3, #6, #10
    94b4:	480d      	ldr	r0, [pc, #52]	; (94ec <i2c_nrfx_twi_configure+0x68>)
    94b6:	f7f9 ff8f 	bl	33d8 <log_0>
		return -EINVAL;
    94ba:	f06f 0015 	mvn.w	r0, #21
    94be:	e007      	b.n	94d0 <i2c_nrfx_twi_configure+0x4c>
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
    94c0:	6813      	ldr	r3, [r2, #0]
}

NRF_STATIC_INLINE void nrf_twi_frequency_set(NRF_TWI_Type *      p_reg,
                                             nrf_twi_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
    94c2:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
    94c6:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return dev->data;
    94ca:	6903      	ldr	r3, [r0, #16]
	}
	get_dev_data(dev)->dev_config = dev_config;
    94cc:	6259      	str	r1, [r3, #36]	; 0x24

	return 0;
    94ce:	2000      	movs	r0, #0
}
    94d0:	bd08      	pop	{r3, pc}
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
    94d2:	6813      	ldr	r3, [r2, #0]
    94d4:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
    94d8:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
}
    94dc:	e7f5      	b.n	94ca <i2c_nrfx_twi_configure+0x46>
		return -EINVAL;
    94de:	f06f 0015 	mvn.w	r0, #21
}
    94e2:	4770      	bx	lr
    94e4:	000165f8 	.word	0x000165f8
    94e8:	000165d8 	.word	0x000165d8
    94ec:	00017a0c 	.word	0x00017a0c

000094f0 <init_twi>:
	.configure = i2c_nrfx_twi_configure,
	.transfer  = i2c_nrfx_twi_transfer,
};

static int init_twi(const struct device *dev)
{
    94f0:	b510      	push	{r4, lr}
    94f2:	4604      	mov	r4, r0
	return dev->config;
    94f4:	6840      	ldr	r0, [r0, #4]
	struct i2c_nrfx_twi_data *dev_data = get_dev_data(dev);
	nrfx_err_t result = nrfx_twi_init(&get_dev_config(dev)->twi,
    94f6:	6923      	ldr	r3, [r4, #16]
    94f8:	4a0e      	ldr	r2, [pc, #56]	; (9534 <init_twi+0x44>)
    94fa:	f100 0108 	add.w	r1, r0, #8
    94fe:	f001 fb67 	bl	abd0 <nrfx_twi_init>
					  &get_dev_config(dev)->config,
					  event_handler, dev_data);
	if (result != NRFX_SUCCESS) {
    9502:	4b0d      	ldr	r3, [pc, #52]	; (9538 <init_twi+0x48>)
    9504:	4298      	cmp	r0, r3
    9506:	d101      	bne.n	950c <init_twi+0x1c>
		LOG_ERR("Failed to initialize device: %s",
			    dev->name);
		return -EBUSY;
	}

	return 0;
    9508:	2000      	movs	r0, #0
}
    950a:	bd10      	pop	{r4, pc}
    950c:	4b0b      	ldr	r3, [pc, #44]	; (953c <init_twi+0x4c>)
    950e:	4a0c      	ldr	r2, [pc, #48]	; (9540 <init_twi+0x50>)
    9510:	1a9b      	subs	r3, r3, r2
    9512:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to initialize device: %s",
    9514:	f04f 0200 	mov.w	r2, #0
    9518:	2101      	movs	r1, #1
    951a:	f361 0202 	bfi	r2, r1, #0, #3
    951e:	f36f 02c5 	bfc	r2, #3, #3
    9522:	f363 128f 	bfi	r2, r3, #6, #10
    9526:	6821      	ldr	r1, [r4, #0]
    9528:	4806      	ldr	r0, [pc, #24]	; (9544 <init_twi+0x54>)
    952a:	f7f9 fec1 	bl	32b0 <log_1>
		return -EBUSY;
    952e:	f06f 000f 	mvn.w	r0, #15
    9532:	e7ea      	b.n	950a <init_twi+0x1a>
    9534:	00009445 	.word	0x00009445
    9538:	0bad0000 	.word	0x0bad0000
    953c:	000165f8 	.word	0x000165f8
    9540:	000165d8 	.word	0x000165d8
    9544:	00017a20 	.word	0x00017a20

00009548 <nrf52_errata_242>:
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9548:	4b03      	ldr	r3, [pc, #12]	; (9558 <nrf52_errata_242+0x10>)
    954a:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    954c:	2b08      	cmp	r3, #8
    954e:	d001      	beq.n	9554 <nrf52_errata_242+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    9550:	2000      	movs	r0, #0
    9552:	4770      	bx	lr
                        return true;
    9554:	2001      	movs	r0, #1
    #endif
}
    9556:	4770      	bx	lr
    9558:	10000130 	.word	0x10000130

0000955c <nvmc_wait_ready>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    955c:	4b03      	ldr	r3, [pc, #12]	; (956c <nvmc_wait_ready+0x10>)
    955e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
#endif /* CONFIG_SOC_FLASH_NRF_UICR */
}

static void nvmc_wait_ready(void)
{
	while (!nrfx_nvmc_write_done_check()) {
    9562:	f013 0f01 	tst.w	r3, #1
    9566:	d0f9      	beq.n	955c <nvmc_wait_ready>
	}
}
    9568:	4770      	bx	lr
    956a:	bf00      	nop
    956c:	4001e000 	.word	0x4001e000

00009570 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    9570:	4b02      	ldr	r3, [pc, #8]	; (957c <flash_nrf_pages_layout+0xc>)
    9572:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    9574:	2301      	movs	r3, #1
    9576:	6013      	str	r3, [r2, #0]
}
    9578:	4770      	bx	lr
    957a:	bf00      	nop
    957c:	2000276c 	.word	0x2000276c

00009580 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    9580:	4800      	ldr	r0, [pc, #0]	; (9584 <flash_nrf_get_parameters+0x4>)
    9582:	4770      	bx	lr
    9584:	00017b08 	.word	0x00017b08

00009588 <suspend_pofwarn>:
 * Do not attempt to write or erase if EVENTS_POFWARN is already asserted.
 */
static bool pofcon_enabled;

static int suspend_pofwarn(void)
{
    9588:	b508      	push	{r3, lr}
	if (!nrf52_errata_242()) {
    958a:	f7ff ffdd 	bl	9548 <nrf52_errata_242>
    958e:	b328      	cbz	r0, 95dc <suspend_pofwarn+0x54>
    uint32_t pofcon = p_reg->POFCON;
    9590:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9594:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
            == POWER_POFCON_POF_Enabled;
    9598:	f013 0201 	ands.w	r2, r3, #1
    959c:	b2d2      	uxtb	r2, r2
	bool enabled;
	nrf_power_pof_thr_t pof_thr;

	pof_thr = nrf_power_pofcon_get(NRF_POWER, &enabled);

	if (enabled) {
    959e:	d01f      	beq.n	95e0 <suspend_pofwarn+0x58>
    uint32_t pofcon = p_reg->POFCON;
    95a0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    95a4:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
    95a8:	f021 011f 	bic.w	r1, r1, #31
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
    95ac:	f003 031e 	and.w	r3, r3, #30
    pofcon |=
    95b0:	4319      	orrs	r1, r3
    p_reg->POFCON = pofcon;
    95b2:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    95b6:	490b      	ldr	r1, [pc, #44]	; (95e4 <suspend_pofwarn+0x5c>)
    95b8:	6809      	ldr	r1, [r1, #0]
		nrf_power_pofcon_set(NRF_POWER, false, pof_thr);

		/* This check need to be reworked once POFWARN event will be
		 * served by zephyr.
		 */
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
    95ba:	b919      	cbnz	r1, 95c4 <suspend_pofwarn+0x3c>
			nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
			return -ECANCELED;
		}

		pofcon_enabled = enabled;
    95bc:	4b0a      	ldr	r3, [pc, #40]	; (95e8 <suspend_pofwarn+0x60>)
    95be:	701a      	strb	r2, [r3, #0]
	}

	return 0;
    95c0:	2000      	movs	r0, #0
    95c2:	e00c      	b.n	95de <suspend_pofwarn+0x56>
    uint32_t pofcon = p_reg->POFCON;
    95c4:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
    95c8:	f022 021f 	bic.w	r2, r2, #31
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
    95cc:	f043 0301 	orr.w	r3, r3, #1
    pofcon |=
    95d0:	4313      	orrs	r3, r2
    p_reg->POFCON = pofcon;
    95d2:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
			return -ECANCELED;
    95d6:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    95da:	e000      	b.n	95de <suspend_pofwarn+0x56>
		return 0;
    95dc:	2000      	movs	r0, #0
}
    95de:	bd08      	pop	{r3, pc}
	return 0;
    95e0:	2000      	movs	r0, #0
    95e2:	e7fc      	b.n	95de <suspend_pofwarn+0x56>
    95e4:	40000108 	.word	0x40000108
    95e8:	20002fc6 	.word	0x20002fc6

000095ec <restore_pofwarn>:

static void restore_pofwarn(void)
{
	nrf_power_pof_thr_t pof_thr;

	if (pofcon_enabled) {
    95ec:	4b0a      	ldr	r3, [pc, #40]	; (9618 <restore_pofwarn+0x2c>)
    95ee:	781b      	ldrb	r3, [r3, #0]
    95f0:	b18b      	cbz	r3, 9616 <restore_pofwarn+0x2a>
    uint32_t pofcon = p_reg->POFCON;
    95f2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    95f6:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
    95fa:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
    95fe:	f023 031f 	bic.w	r3, r3, #31
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
    9602:	f002 021e 	and.w	r2, r2, #30
    9606:	f042 0201 	orr.w	r2, r2, #1
    pofcon |=
    960a:	4313      	orrs	r3, r2
    p_reg->POFCON = pofcon;
    960c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
    9610:	4b01      	ldr	r3, [pc, #4]	; (9618 <restore_pofwarn+0x2c>)
    9612:	2200      	movs	r2, #0
    9614:	701a      	strb	r2, [r3, #0]
	}
}
    9616:	4770      	bx	lr
    9618:	20002fc6 	.word	0x20002fc6

0000961c <flash_nrf_erase>:
{
    961c:	b570      	push	{r4, r5, r6, lr}
    961e:	460c      	mov	r4, r1
    9620:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    9622:	f00a fe7f 	bl	14324 <nrfx_nvmc_flash_page_size_get>
    9626:	4606      	mov	r6, r0
	size_t flash_size = nrfx_nvmc_flash_size_get();
    9628:	f00a fe78 	bl	1431c <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
    962c:	42a0      	cmp	r0, r4
    962e:	d914      	bls.n	965a <flash_nrf_erase+0x3e>
    9630:	2c00      	cmp	r4, #0
    9632:	db12      	blt.n	965a <flash_nrf_erase+0x3e>
	    addr < 0 ||
    9634:	42a8      	cmp	r0, r5
    9636:	d310      	bcc.n	965a <flash_nrf_erase+0x3e>
	    (addr) + len > flash_size) {
    9638:	1963      	adds	r3, r4, r5
	    len > flash_size ||
    963a:	4283      	cmp	r3, r0
    963c:	d80d      	bhi.n	965a <flash_nrf_erase+0x3e>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    963e:	fbb4 f3f6 	udiv	r3, r4, r6
    9642:	fb06 4313 	mls	r3, r6, r3, r4
    9646:	b9f3      	cbnz	r3, 9686 <flash_nrf_erase+0x6a>
    9648:	fbb5 f3f6 	udiv	r3, r5, r6
    964c:	fb06 5313 	mls	r3, r6, r3, r5
    9650:	b9cb      	cbnz	r3, 9686 <flash_nrf_erase+0x6a>
		if (!n_pages) {
    9652:	42b5      	cmp	r5, r6
    9654:	d22c      	bcs.n	96b0 <flash_nrf_erase+0x94>
			return 0;
    9656:	2400      	movs	r4, #0
    9658:	e013      	b.n	9682 <flash_nrf_erase+0x66>
    965a:	4a1e      	ldr	r2, [pc, #120]	; (96d4 <flash_nrf_erase+0xb8>)
    965c:	4b1e      	ldr	r3, [pc, #120]	; (96d8 <flash_nrf_erase+0xbc>)
    965e:	1ad2      	subs	r2, r2, r3
    9660:	08d2      	lsrs	r2, r2, #3
		LOG_ERR("invalid address: 0x%08lx:%zu",
    9662:	f04f 0300 	mov.w	r3, #0
    9666:	2101      	movs	r1, #1
    9668:	f361 0302 	bfi	r3, r1, #0, #3
    966c:	f36f 03c5 	bfc	r3, #3, #3
    9670:	f362 138f 	bfi	r3, r2, #6, #10
    9674:	462a      	mov	r2, r5
    9676:	4621      	mov	r1, r4
    9678:	4818      	ldr	r0, [pc, #96]	; (96dc <flash_nrf_erase+0xc0>)
    967a:	f7f9 fe4f 	bl	331c <log_2>
		return -EINVAL;
    967e:	f06f 0415 	mvn.w	r4, #21
}
    9682:	4620      	mov	r0, r4
    9684:	bd70      	pop	{r4, r5, r6, pc}
    9686:	4a13      	ldr	r2, [pc, #76]	; (96d4 <flash_nrf_erase+0xb8>)
    9688:	4b13      	ldr	r3, [pc, #76]	; (96d8 <flash_nrf_erase+0xbc>)
    968a:	1ad2      	subs	r2, r2, r3
    968c:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("unaligned address: 0x%08lx:%zu",
    968e:	f04f 0300 	mov.w	r3, #0
    9692:	2101      	movs	r1, #1
    9694:	f361 0302 	bfi	r3, r1, #0, #3
    9698:	f36f 03c5 	bfc	r3, #3, #3
    969c:	f362 138f 	bfi	r3, r2, #6, #10
    96a0:	462a      	mov	r2, r5
    96a2:	4621      	mov	r1, r4
    96a4:	480e      	ldr	r0, [pc, #56]	; (96e0 <flash_nrf_erase+0xc4>)
    96a6:	f7f9 fe39 	bl	331c <log_2>
			return -EINVAL;
    96aa:	f06f 0415 	mvn.w	r4, #21
    96ae:	e7e8      	b.n	9682 <flash_nrf_erase+0x66>
	return z_impl_k_sem_take(sem, timeout);
    96b0:	4e0c      	ldr	r6, [pc, #48]	; (96e4 <flash_nrf_erase+0xc8>)
    96b2:	f04f 32ff 	mov.w	r2, #4294967295
    96b6:	f04f 33ff 	mov.w	r3, #4294967295
    96ba:	4630      	mov	r0, r6
    96bc:	f006 fc6c 	bl	ff98 <z_impl_k_sem_take>
		ret = erase(addr, size);
    96c0:	4629      	mov	r1, r5
    96c2:	4620      	mov	r0, r4
    96c4:	f00a fadf 	bl	13c86 <erase>
    96c8:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
    96ca:	4630      	mov	r0, r6
    96cc:	f006 fc40 	bl	ff50 <z_impl_k_sem_give>
	return ret;
    96d0:	e7d7      	b.n	9682 <flash_nrf_erase+0x66>
    96d2:	bf00      	nop
    96d4:	000165e0 	.word	0x000165e0
    96d8:	000165d8 	.word	0x000165d8
    96dc:	00017a84 	.word	0x00017a84
    96e0:	00017aa4 	.word	0x00017aa4
    96e4:	20002774 	.word	0x20002774

000096e8 <flash_nrf_write>:
{
    96e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    96ea:	460c      	mov	r4, r1
    96ec:	4616      	mov	r6, r2
    96ee:	461d      	mov	r5, r3
	size_t flash_size = nrfx_nvmc_flash_size_get();
    96f0:	f00a fe14 	bl	1431c <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
    96f4:	42a0      	cmp	r0, r4
    96f6:	d90f      	bls.n	9718 <flash_nrf_write+0x30>
    96f8:	2c00      	cmp	r4, #0
    96fa:	db0d      	blt.n	9718 <flash_nrf_write+0x30>
	    addr < 0 ||
    96fc:	42a8      	cmp	r0, r5
    96fe:	d30b      	bcc.n	9718 <flash_nrf_write+0x30>
	    (addr) + len > flash_size) {
    9700:	1963      	adds	r3, r4, r5
	    len > flash_size ||
    9702:	4298      	cmp	r0, r3
    9704:	d308      	bcc.n	9718 <flash_nrf_write+0x30>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    9706:	f014 0f03 	tst.w	r4, #3
    970a:	d11b      	bne.n	9744 <flash_nrf_write+0x5c>
    970c:	f015 0f03 	tst.w	r5, #3
    9710:	d118      	bne.n	9744 <flash_nrf_write+0x5c>
	if (!len) {
    9712:	bb65      	cbnz	r5, 976e <flash_nrf_write+0x86>
		return 0;
    9714:	2400      	movs	r4, #0
    9716:	e013      	b.n	9740 <flash_nrf_write+0x58>
    9718:	4a1e      	ldr	r2, [pc, #120]	; (9794 <flash_nrf_write+0xac>)
    971a:	4b1f      	ldr	r3, [pc, #124]	; (9798 <flash_nrf_write+0xb0>)
    971c:	1ad2      	subs	r2, r2, r3
    971e:	08d2      	lsrs	r2, r2, #3
		LOG_ERR("invalid address: 0x%08lx:%zu",
    9720:	f04f 0300 	mov.w	r3, #0
    9724:	2101      	movs	r1, #1
    9726:	f361 0302 	bfi	r3, r1, #0, #3
    972a:	f36f 03c5 	bfc	r3, #3, #3
    972e:	f362 138f 	bfi	r3, r2, #6, #10
    9732:	462a      	mov	r2, r5
    9734:	4621      	mov	r1, r4
    9736:	4819      	ldr	r0, [pc, #100]	; (979c <flash_nrf_write+0xb4>)
    9738:	f7f9 fdf0 	bl	331c <log_2>
		return -EINVAL;
    973c:	f06f 0415 	mvn.w	r4, #21
}
    9740:	4620      	mov	r0, r4
    9742:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9744:	4a13      	ldr	r2, [pc, #76]	; (9794 <flash_nrf_write+0xac>)
    9746:	4b14      	ldr	r3, [pc, #80]	; (9798 <flash_nrf_write+0xb0>)
    9748:	1ad2      	subs	r2, r2, r3
    974a:	08d2      	lsrs	r2, r2, #3
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    974c:	f04f 0300 	mov.w	r3, #0
    9750:	2101      	movs	r1, #1
    9752:	f361 0302 	bfi	r3, r1, #0, #3
    9756:	f36f 03c5 	bfc	r3, #3, #3
    975a:	f362 138f 	bfi	r3, r2, #6, #10
    975e:	462a      	mov	r2, r5
    9760:	4621      	mov	r1, r4
    9762:	480f      	ldr	r0, [pc, #60]	; (97a0 <flash_nrf_write+0xb8>)
    9764:	f7f9 fdda 	bl	331c <log_2>
		return -EINVAL;
    9768:	f06f 0415 	mvn.w	r4, #21
    976c:	e7e8      	b.n	9740 <flash_nrf_write+0x58>
	return z_impl_k_sem_take(sem, timeout);
    976e:	4f0d      	ldr	r7, [pc, #52]	; (97a4 <flash_nrf_write+0xbc>)
    9770:	f04f 32ff 	mov.w	r2, #4294967295
    9774:	f04f 33ff 	mov.w	r3, #4294967295
    9778:	4638      	mov	r0, r7
    977a:	f006 fc0d 	bl	ff98 <z_impl_k_sem_take>
		ret = write(addr, data, len);
    977e:	462a      	mov	r2, r5
    9780:	4631      	mov	r1, r6
    9782:	4620      	mov	r0, r4
    9784:	f00a faa6 	bl	13cd4 <write>
    9788:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
    978a:	4638      	mov	r0, r7
    978c:	f006 fbe0 	bl	ff50 <z_impl_k_sem_give>
	return ret;
    9790:	e7d6      	b.n	9740 <flash_nrf_write+0x58>
    9792:	bf00      	nop
    9794:	000165e0 	.word	0x000165e0
    9798:	000165d8 	.word	0x000165d8
    979c:	00017a84 	.word	0x00017a84
    97a0:	00017ac4 	.word	0x00017ac4
    97a4:	20002774 	.word	0x20002774

000097a8 <flash_nrf_read>:
{
    97a8:	b570      	push	{r4, r5, r6, lr}
    97aa:	460c      	mov	r4, r1
    97ac:	4616      	mov	r6, r2
    97ae:	461d      	mov	r5, r3
	size_t flash_size = nrfx_nvmc_flash_size_get();
    97b0:	f00a fdb4 	bl	1431c <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
    97b4:	4284      	cmp	r4, r0
    97b6:	d209      	bcs.n	97cc <flash_nrf_read+0x24>
    97b8:	2c00      	cmp	r4, #0
    97ba:	db07      	blt.n	97cc <flash_nrf_read+0x24>
	    addr < 0 ||
    97bc:	42a8      	cmp	r0, r5
    97be:	d305      	bcc.n	97cc <flash_nrf_read+0x24>
	    (addr) + len > flash_size) {
    97c0:	1963      	adds	r3, r4, r5
	    len > flash_size ||
    97c2:	4283      	cmp	r3, r0
    97c4:	d802      	bhi.n	97cc <flash_nrf_read+0x24>
	if (!len) {
    97c6:	b9b5      	cbnz	r5, 97f6 <flash_nrf_read+0x4e>
		return 0;
    97c8:	2000      	movs	r0, #0
    97ca:	e013      	b.n	97f4 <flash_nrf_read+0x4c>
    97cc:	4a0d      	ldr	r2, [pc, #52]	; (9804 <flash_nrf_read+0x5c>)
    97ce:	4b0e      	ldr	r3, [pc, #56]	; (9808 <flash_nrf_read+0x60>)
    97d0:	1ad2      	subs	r2, r2, r3
    97d2:	08d2      	lsrs	r2, r2, #3
		LOG_ERR("invalid address: 0x%08lx:%zu",
    97d4:	f04f 0300 	mov.w	r3, #0
    97d8:	2101      	movs	r1, #1
    97da:	f361 0302 	bfi	r3, r1, #0, #3
    97de:	f36f 03c5 	bfc	r3, #3, #3
    97e2:	f362 138f 	bfi	r3, r2, #6, #10
    97e6:	462a      	mov	r2, r5
    97e8:	4621      	mov	r1, r4
    97ea:	4808      	ldr	r0, [pc, #32]	; (980c <flash_nrf_read+0x64>)
    97ec:	f7f9 fd96 	bl	331c <log_2>
		return -EINVAL;
    97f0:	f06f 0015 	mvn.w	r0, #21
}
    97f4:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(data, (void *)addr, len);
    97f6:	462a      	mov	r2, r5
    97f8:	4621      	mov	r1, r4
    97fa:	4630      	mov	r0, r6
    97fc:	f009 fcf8 	bl	131f0 <memcpy>
	return 0;
    9800:	2000      	movs	r0, #0
    9802:	e7f7      	b.n	97f4 <flash_nrf_read+0x4c>
    9804:	000165e0 	.word	0x000165e0
    9808:	000165d8 	.word	0x000165d8
    980c:	00017a84 	.word	0x00017a84

00009810 <nrf_flash_init>:
{
    9810:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    9812:	2201      	movs	r2, #1
    9814:	4611      	mov	r1, r2
    9816:	4806      	ldr	r0, [pc, #24]	; (9830 <nrf_flash_init+0x20>)
    9818:	f00c fa86 	bl	15d28 <z_impl_k_sem_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    981c:	f00a fd86 	bl	1432c <nrfx_nvmc_flash_page_count_get>
    9820:	4c04      	ldr	r4, [pc, #16]	; (9834 <nrf_flash_init+0x24>)
    9822:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    9824:	f00a fd7e 	bl	14324 <nrfx_nvmc_flash_page_size_get>
    9828:	6060      	str	r0, [r4, #4]
}
    982a:	2000      	movs	r0, #0
    982c:	bd10      	pop	{r4, pc}
    982e:	bf00      	nop
    9830:	20002774 	.word	0x20002774
    9834:	2000276c 	.word	0x2000276c

00009838 <baudrate_set>:
	return dev->data;
}

static inline const struct uarte_nrfx_config *get_dev_config(const struct device *dev)
{
	return dev->config;
    9838:	6843      	ldr	r3, [r0, #4]

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = get_dev_config(dev);

	return config->uarte_regs;
    983a:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    983c:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    9840:	d06f      	beq.n	9922 <baudrate_set+0xea>
    9842:	d83a      	bhi.n	98ba <baudrate_set+0x82>
    9844:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    9848:	d06e      	beq.n	9928 <baudrate_set+0xf0>
    984a:	d90a      	bls.n	9862 <baudrate_set+0x2a>
    984c:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    9850:	d075      	beq.n	993e <baudrate_set+0x106>
    9852:	d924      	bls.n	989e <baudrate_set+0x66>
    9854:	f647 2312 	movw	r3, #31250	; 0x7a12
    9858:	4299      	cmp	r1, r3
    985a:	d12b      	bne.n	98b4 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    985c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    9860:	e013      	b.n	988a <baudrate_set+0x52>
	switch (baudrate) {
    9862:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    9866:	d061      	beq.n	992c <baudrate_set+0xf4>
    9868:	d907      	bls.n	987a <baudrate_set+0x42>
    986a:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    986e:	d063      	beq.n	9938 <baudrate_set+0x100>
    9870:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    9874:	d110      	bne.n	9898 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    9876:	4b3c      	ldr	r3, [pc, #240]	; (9968 <baudrate_set+0x130>)
    9878:	e007      	b.n	988a <baudrate_set+0x52>
	switch (baudrate) {
    987a:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    987e:	d058      	beq.n	9932 <baudrate_set+0xfa>
    9880:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    9884:	d105      	bne.n	9892 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    9886:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    988a:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    988e:	2000      	movs	r0, #0
    9890:	4770      	bx	lr
	switch (baudrate) {
    9892:	f06f 0015 	mvn.w	r0, #21
    9896:	4770      	bx	lr
    9898:	f06f 0015 	mvn.w	r0, #21
    989c:	4770      	bx	lr
    989e:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    98a2:	d04e      	beq.n	9942 <baudrate_set+0x10a>
    98a4:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    98a8:	d101      	bne.n	98ae <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    98aa:	4b30      	ldr	r3, [pc, #192]	; (996c <baudrate_set+0x134>)
    98ac:	e7ed      	b.n	988a <baudrate_set+0x52>
	switch (baudrate) {
    98ae:	f06f 0015 	mvn.w	r0, #21
    98b2:	4770      	bx	lr
    98b4:	f06f 0015 	mvn.w	r0, #21
    98b8:	4770      	bx	lr
    98ba:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    98be:	d042      	beq.n	9946 <baudrate_set+0x10e>
    98c0:	d909      	bls.n	98d6 <baudrate_set+0x9e>
    98c2:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    98c6:	d046      	beq.n	9956 <baudrate_set+0x11e>
    98c8:	d91f      	bls.n	990a <baudrate_set+0xd2>
    98ca:	4b29      	ldr	r3, [pc, #164]	; (9970 <baudrate_set+0x138>)
    98cc:	4299      	cmp	r1, r3
    98ce:	d148      	bne.n	9962 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    98d0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    98d4:	e7d9      	b.n	988a <baudrate_set+0x52>
	switch (baudrate) {
    98d6:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    98da:	d037      	beq.n	994c <baudrate_set+0x114>
    98dc:	d905      	bls.n	98ea <baudrate_set+0xb2>
    98de:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    98e2:	d10f      	bne.n	9904 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    98e4:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    98e8:	e7cf      	b.n	988a <baudrate_set+0x52>
	switch (baudrate) {
    98ea:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    98ee:	4299      	cmp	r1, r3
    98f0:	d02e      	beq.n	9950 <baudrate_set+0x118>
    98f2:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    98f6:	d102      	bne.n	98fe <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    98f8:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    98fc:	e7c5      	b.n	988a <baudrate_set+0x52>
	switch (baudrate) {
    98fe:	f06f 0015 	mvn.w	r0, #21
    9902:	4770      	bx	lr
    9904:	f06f 0015 	mvn.w	r0, #21
    9908:	4770      	bx	lr
    990a:	4b1a      	ldr	r3, [pc, #104]	; (9974 <baudrate_set+0x13c>)
    990c:	4299      	cmp	r1, r3
    990e:	d025      	beq.n	995c <baudrate_set+0x124>
    9910:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    9914:	d102      	bne.n	991c <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    9916:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    991a:	e7b6      	b.n	988a <baudrate_set+0x52>
	switch (baudrate) {
    991c:	f06f 0015 	mvn.w	r0, #21
    9920:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    9922:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    9926:	e7b0      	b.n	988a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    9928:	4b13      	ldr	r3, [pc, #76]	; (9978 <baudrate_set+0x140>)
    992a:	e7ae      	b.n	988a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    992c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    9930:	e7ab      	b.n	988a <baudrate_set+0x52>
	switch (baudrate) {
    9932:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    9936:	e7a8      	b.n	988a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    9938:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    993c:	e7a5      	b.n	988a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    993e:	4b0f      	ldr	r3, [pc, #60]	; (997c <baudrate_set+0x144>)
    9940:	e7a3      	b.n	988a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    9942:	4b0f      	ldr	r3, [pc, #60]	; (9980 <baudrate_set+0x148>)
    9944:	e7a1      	b.n	988a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    9946:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    994a:	e79e      	b.n	988a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    994c:	4b0d      	ldr	r3, [pc, #52]	; (9984 <baudrate_set+0x14c>)
    994e:	e79c      	b.n	988a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    9950:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    9954:	e799      	b.n	988a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    9956:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    995a:	e796      	b.n	988a <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    995c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    9960:	e793      	b.n	988a <baudrate_set+0x52>
	switch (baudrate) {
    9962:	f06f 0015 	mvn.w	r0, #21
}
    9966:	4770      	bx	lr
    9968:	0013b000 	.word	0x0013b000
    996c:	004ea000 	.word	0x004ea000
    9970:	000f4240 	.word	0x000f4240
    9974:	0003d090 	.word	0x0003d090
    9978:	00275000 	.word	0x00275000
    997c:	0075c000 	.word	0x0075c000
    9980:	003af000 	.word	0x003af000
    9984:	013a9000 	.word	0x013a9000

00009988 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    9988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    998c:	4605      	mov	r5, r0
    998e:	460f      	mov	r7, r1
	return dev->data;
    9990:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    9994:	f00c f8d7 	bl	15b46 <k_is_in_isr>
    9998:	b920      	cbnz	r0, 99a4 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    999a:	4b16      	ldr	r3, [pc, #88]	; (99f4 <uarte_nrfx_poll_out+0x6c>)
    999c:	781b      	ldrb	r3, [r3, #0]
    999e:	b1ab      	cbz	r3, 99cc <uarte_nrfx_poll_out+0x44>
    99a0:	2300      	movs	r3, #0
    99a2:	e000      	b.n	99a6 <uarte_nrfx_poll_out+0x1e>
    99a4:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    99a6:	b19b      	cbz	r3, 99d0 <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
    99a8:	f04f 0320 	mov.w	r3, #32
    99ac:	f3ef 8411 	mrs	r4, BASEPRI
    99b0:	f383 8812 	msr	BASEPRI_MAX, r3
    99b4:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
    99b8:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    99ba:	4628      	mov	r0, r5
    99bc:	f00a fa96 	bl	13eec <is_tx_ready>
    99c0:	b950      	cbnz	r0, 99d8 <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
    99c2:	f384 8811 	msr	BASEPRI, r4
    99c6:	f3bf 8f6f 	isb	sy
}
    99ca:	e7ed      	b.n	99a8 <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    99cc:	2301      	movs	r3, #1
    99ce:	e7ea      	b.n	99a6 <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    99d0:	4628      	mov	r0, r5
    99d2:	f00a fbac 	bl	1412e <wait_tx_ready>
    99d6:	4606      	mov	r6, r0
	}

	data->char_out = c;
    99d8:	4641      	mov	r1, r8
    99da:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    99de:	2201      	movs	r2, #1
    99e0:	4628      	mov	r0, r5
    99e2:	f00a fa9d 	bl	13f20 <tx_start>
	__asm__ volatile(
    99e6:	f386 8811 	msr	BASEPRI, r6
    99ea:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    99ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    99f2:	bf00      	nop
    99f4:	20002fcd 	.word	0x20002fcd

000099f8 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    99f8:	b538      	push	{r3, r4, r5, lr}
    99fa:	4604      	mov	r4, r0
    99fc:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    99fe:	f101 0016 	add.w	r0, r1, #22
    9a02:	f000 ff77 	bl	a8f4 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    9a06:	4b14      	ldr	r3, [pc, #80]	; (9a58 <endtx_stoptx_ppi_init+0x60>)
    9a08:	4298      	cmp	r0, r3
    9a0a:	d111      	bne.n	9a30 <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    9a0c:	7dab      	ldrb	r3, [r5, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    9a0e:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    9a12:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    9a14:	4a11      	ldr	r2, [pc, #68]	; (9a5c <endtx_stoptx_ppi_init+0x64>)
    9a16:	33a2      	adds	r3, #162	; 0xa2
    9a18:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    9a1c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    9a20:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    9a22:	7da9      	ldrb	r1, [r5, #22]
    9a24:	2301      	movs	r3, #1
    9a26:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    9a28:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    9a2c:	2000      	movs	r0, #0
}
    9a2e:	bd38      	pop	{r3, r4, r5, pc}
    9a30:	4b0b      	ldr	r3, [pc, #44]	; (9a60 <endtx_stoptx_ppi_init+0x68>)
    9a32:	4a0c      	ldr	r2, [pc, #48]	; (9a64 <endtx_stoptx_ppi_init+0x6c>)
    9a34:	1a9b      	subs	r3, r3, r2
    9a36:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate PPI Channel");
    9a38:	f04f 0100 	mov.w	r1, #0
    9a3c:	2201      	movs	r2, #1
    9a3e:	f362 0102 	bfi	r1, r2, #0, #3
    9a42:	f36f 01c5 	bfc	r1, #3, #3
    9a46:	f363 118f 	bfi	r1, r3, #6, #10
    9a4a:	4807      	ldr	r0, [pc, #28]	; (9a68 <endtx_stoptx_ppi_init+0x70>)
    9a4c:	f7f9 fcc4 	bl	33d8 <log_0>
		return -EIO;
    9a50:	f06f 0004 	mvn.w	r0, #4
    9a54:	e7eb      	b.n	9a2e <endtx_stoptx_ppi_init+0x36>
    9a56:	bf00      	nop
    9a58:	0bad0000 	.word	0x0bad0000
    9a5c:	4001f000 	.word	0x4001f000
    9a60:	00016630 	.word	0x00016630
    9a64:	000165d8 	.word	0x000165d8
    9a68:	00017b10 	.word	0x00017b10

00009a6c <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    9a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->config;
    9a6e:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
    9a70:	6825      	ldr	r5, [r4, #0]
	return dev->data;
    9a72:	6906      	ldr	r6, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    9a74:	2300      	movs	r3, #0
    9a76:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    9a7a:	6030      	str	r0, [r6, #0]

	nrf_gpio_pin_write(cfg->pseltxd, 1);
    9a7c:	68a3      	ldr	r3, [r4, #8]
    *p_pin = pin_number & 0x1F;
    9a7e:	f003 011f 	and.w	r1, r3, #31
    return pin_number >> 5;
    9a82:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9a84:	2b01      	cmp	r3, #1
    9a86:	f000 8097 	beq.w	9bb8 <uarte_instance_init+0x14c>
        case 0: return NRF_P0;
    9a8a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    9a8e:	2301      	movs	r3, #1
    9a90:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    9a92:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_gpio_cfg_output(cfg->pseltxd);
    9a96:	68a3      	ldr	r3, [r4, #8]
    *p_pin = pin_number & 0x1F;
    9a98:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    9a9c:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9a9e:	2b01      	cmp	r3, #1
    9aa0:	f000 808c 	beq.w	9bbc <uarte_instance_init+0x150>
        case 0: return NRF_P0;
    9aa4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    9aa8:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    9aac:	2203      	movs	r2, #3
    9aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (cfg->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    9ab2:	68e3      	ldr	r3, [r4, #12]
    9ab4:	f1b3 3fff 	cmp.w	r3, #4294967295
    9ab8:	d00c      	beq.n	9ad4 <uarte_instance_init+0x68>
		nrf_gpio_cfg_input(cfg->pselrxd, cfg->rxd_pull);
    9aba:	7e21      	ldrb	r1, [r4, #24]
    *p_pin = pin_number & 0x1F;
    9abc:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    9ac0:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9ac2:	2b01      	cmp	r3, #1
    9ac4:	d07c      	beq.n	9bc0 <uarte_instance_init+0x154>
        case 0: return NRF_P0;
    9ac6:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    9aca:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    9acc:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    9ad0:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
	}

	nrf_uarte_txrx_pins_set(uarte, cfg->pseltxd, cfg->pselrxd);
    9ad4:	68a2      	ldr	r2, [r4, #8]
    9ad6:	68e3      	ldr	r3, [r4, #12]
    p_reg->PSEL.TXD = pseltxd;
    9ad8:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    9adc:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514

	if (cfg->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    9ae0:	6923      	ldr	r3, [r4, #16]
    9ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
    9ae6:	d00c      	beq.n	9b02 <uarte_instance_init+0x96>
		nrf_gpio_cfg_input(cfg->pselcts, cfg->cts_pull);
    9ae8:	7e61      	ldrb	r1, [r4, #25]
    *p_pin = pin_number & 0x1F;
    9aea:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    9aee:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9af0:	2b01      	cmp	r3, #1
    9af2:	d067      	beq.n	9bc4 <uarte_instance_init+0x158>
        case 0: return NRF_P0;
    9af4:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    9af8:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    9afa:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    9afe:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
	}

	if (cfg->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    9b02:	6963      	ldr	r3, [r4, #20]
    9b04:	f1b3 3fff 	cmp.w	r3, #4294967295
    9b08:	d017      	beq.n	9b3a <uarte_instance_init+0xce>
    *p_pin = pin_number & 0x1F;
    9b0a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    9b0e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9b10:	2b01      	cmp	r3, #1
    9b12:	d059      	beq.n	9bc8 <uarte_instance_init+0x15c>
        case 0: return NRF_P0;
    9b14:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    9b18:	2301      	movs	r3, #1
    9b1a:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    9b1c:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
		nrf_gpio_pin_write(cfg->pselrts, 1);
		nrf_gpio_cfg_output(cfg->pselrts);
    9b20:	6963      	ldr	r3, [r4, #20]
    *p_pin = pin_number & 0x1F;
    9b22:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    9b26:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    9b28:	2b01      	cmp	r3, #1
    9b2a:	d04f      	beq.n	9bcc <uarte_instance_init+0x160>
        case 0: return NRF_P0;
    9b2c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    9b30:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    9b34:	2203      	movs	r2, #3
    9b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	nrf_uarte_hwfc_pins_set(uarte, cfg->pselrts, cfg->pselcts);
    9b3a:	6962      	ldr	r2, [r4, #20]
    9b3c:	6923      	ldr	r3, [r4, #16]
    p_reg->PSEL.RTS = pselrts;
    9b3e:	f8c5 2508 	str.w	r2, [r5, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    9b42:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
	return dev->data;
    9b46:	6901      	ldr	r1, [r0, #16]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    9b48:	3104      	adds	r1, #4
    9b4a:	f00a f962 	bl	13e12 <uarte_nrfx_configure>
	if (err) {
    9b4e:	4607      	mov	r7, r0
    9b50:	bb80      	cbnz	r0, 9bb4 <uarte_instance_init+0x148>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    9b52:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    9b54:	f013 0f08 	tst.w	r3, #8
    9b58:	d13a      	bne.n	9bd0 <uarte_instance_init+0x164>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    9b5a:	2308      	movs	r3, #8
    9b5c:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (cfg->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    9b60:	68e3      	ldr	r3, [r4, #12]
    9b62:	f1b3 3fff 	cmp.w	r3, #4294967295
    9b66:	d00c      	beq.n	9b82 <uarte_instance_init+0x116>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9b68:	2300      	movs	r3, #0
    9b6a:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    9b6e:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    9b72:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    9b76:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    9b7a:	2301      	movs	r3, #1
    9b7c:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9b80:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    9b82:	6863      	ldr	r3, [r4, #4]
    9b84:	f013 0f08 	tst.w	r3, #8
    9b88:	d103      	bne.n	9b92 <uarte_instance_init+0x126>
    p_reg->INTENSET = mask;
    9b8a:	f44f 7380 	mov.w	r3, #256	; 0x100
    9b8e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    9b92:	6863      	ldr	r3, [r4, #4]
    9b94:	f013 0f10 	tst.w	r3, #16
    9b98:	d003      	beq.n	9ba2 <uarte_instance_init+0x136>
    9b9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    9b9e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    9ba2:	3614      	adds	r6, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    9ba4:	f8c5 6544 	str.w	r6, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    9ba8:	2300      	movs	r3, #0
    9baa:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9bae:	2301      	movs	r3, #1
    9bb0:	60ab      	str	r3, [r5, #8]
    9bb2:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    9bb4:	4638      	mov	r0, r7
    9bb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
    9bb8:	4a09      	ldr	r2, [pc, #36]	; (9be0 <uarte_instance_init+0x174>)
    9bba:	e768      	b.n	9a8e <uarte_instance_init+0x22>
    9bbc:	4908      	ldr	r1, [pc, #32]	; (9be0 <uarte_instance_init+0x174>)
    9bbe:	e773      	b.n	9aa8 <uarte_instance_init+0x3c>
    9bc0:	4f07      	ldr	r7, [pc, #28]	; (9be0 <uarte_instance_init+0x174>)
    9bc2:	e782      	b.n	9aca <uarte_instance_init+0x5e>
    9bc4:	4f06      	ldr	r7, [pc, #24]	; (9be0 <uarte_instance_init+0x174>)
    9bc6:	e797      	b.n	9af8 <uarte_instance_init+0x8c>
    9bc8:	4905      	ldr	r1, [pc, #20]	; (9be0 <uarte_instance_init+0x174>)
    9bca:	e7a5      	b.n	9b18 <uarte_instance_init+0xac>
    9bcc:	4904      	ldr	r1, [pc, #16]	; (9be0 <uarte_instance_init+0x174>)
    9bce:	e7af      	b.n	9b30 <uarte_instance_init+0xc4>
		err = endtx_stoptx_ppi_init(uarte, data);
    9bd0:	4631      	mov	r1, r6
    9bd2:	4628      	mov	r0, r5
    9bd4:	f7ff ff10 	bl	99f8 <endtx_stoptx_ppi_init>
		if (err < 0) {
    9bd8:	2800      	cmp	r0, #0
    9bda:	dabe      	bge.n	9b5a <uarte_instance_init+0xee>
			return err;
    9bdc:	4607      	mov	r7, r0
    9bde:	e7e9      	b.n	9bb4 <uarte_instance_init+0x148>
    9be0:	50000300 	.word	0x50000300

00009be4 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    9be4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    9be8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    9bec:	4b01      	ldr	r3, [pc, #4]	; (9bf4 <set_comparator+0x10>)
    9bee:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    9bf2:	4770      	bx	lr
    9bf4:	40011000 	.word	0x40011000

00009bf8 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    9bf8:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    9bfc:	4b01      	ldr	r3, [pc, #4]	; (9c04 <get_comparator+0xc>)
    9bfe:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    9c02:	4770      	bx	lr
    9c04:	40011000 	.word	0x40011000

00009c08 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    9c08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    9c0c:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    9c0e:	4a02      	ldr	r2, [pc, #8]	; (9c18 <event_enable+0x10>)
    9c10:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    9c14:	4770      	bx	lr
    9c16:	bf00      	nop
    9c18:	40011000 	.word	0x40011000

00009c1c <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    9c1c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    9c20:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    9c22:	4a02      	ldr	r2, [pc, #8]	; (9c2c <event_disable+0x10>)
    9c24:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    9c28:	4770      	bx	lr
    9c2a:	bf00      	nop
    9c2c:	40011000 	.word	0x40011000

00009c30 <counter>:
     return p_reg->COUNTER;
    9c30:	4b01      	ldr	r3, [pc, #4]	; (9c38 <counter+0x8>)
    9c32:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    9c36:	4770      	bx	lr
    9c38:	40011000 	.word	0x40011000

00009c3c <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
    9c3c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    9c3e:	2301      	movs	r3, #1
    9c40:	4083      	lsls	r3, r0
    9c42:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9c44:	4a10      	ldr	r2, [pc, #64]	; (9c88 <compare_int_lock+0x4c>)
    9c46:	f3bf 8f5b 	dmb	ish
    9c4a:	e852 1f00 	ldrex	r1, [r2]
    9c4e:	ea01 0c04 	and.w	ip, r1, r4
    9c52:	e842 ce00 	strex	lr, ip, [r2]
    9c56:	f1be 0f00 	cmp.w	lr, #0
    9c5a:	d1f6      	bne.n	9c4a <compare_int_lock+0xe>
    9c5c:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    9c60:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    9c64:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    9c68:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    9c6c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    9c70:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    9c74:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    9c78:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    9c7c:	420b      	tst	r3, r1
}
    9c7e:	bf14      	ite	ne
    9c80:	2001      	movne	r0, #1
    9c82:	2000      	moveq	r0, #0
    9c84:	bd10      	pop	{r4, pc}
    9c86:	bf00      	nop
    9c88:	200027a8 	.word	0x200027a8

00009c8c <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    9c8c:	b570      	push	{r4, r5, r6, lr}
    9c8e:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    9c90:	f00a fa98 	bl	141c4 <full_int_lock>
    9c94:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    9c96:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    9c9a:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    9c9c:	4a17      	ldr	r2, [pc, #92]	; (9cfc <channel_processing_check_and_clear+0x70>)
    9c9e:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    9ca2:	4213      	tst	r3, r2
    9ca4:	d105      	bne.n	9cb2 <channel_processing_check_and_clear+0x26>
	bool result = false;
    9ca6:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    9ca8:	4628      	mov	r0, r5
    9caa:	f00a fa94 	bl	141d6 <full_int_unlock>

	return result;
}
    9cae:	4630      	mov	r0, r6
    9cb0:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    9cb2:	2301      	movs	r3, #1
    9cb4:	40a3      	lsls	r3, r4
    9cb6:	43db      	mvns	r3, r3
    9cb8:	4a11      	ldr	r2, [pc, #68]	; (9d00 <channel_processing_check_and_clear+0x74>)
    9cba:	f3bf 8f5b 	dmb	ish
    9cbe:	e852 1f00 	ldrex	r1, [r2]
    9cc2:	ea01 0003 	and.w	r0, r1, r3
    9cc6:	e842 0600 	strex	r6, r0, [r2]
    9cca:	2e00      	cmp	r6, #0
    9ccc:	d1f7      	bne.n	9cbe <channel_processing_check_and_clear+0x32>
    9cce:	f3bf 8f5b 	dmb	ish
    9cd2:	b959      	cbnz	r1, 9cec <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    9cd4:	f104 0350 	add.w	r3, r4, #80	; 0x50
    9cd8:	009b      	lsls	r3, r3, #2
    9cda:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9cdc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9ce0:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    9ce4:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    9ce6:	b113      	cbz	r3, 9cee <channel_processing_check_and_clear+0x62>
    9ce8:	2301      	movs	r3, #1
    9cea:	e000      	b.n	9cee <channel_processing_check_and_clear+0x62>
    9cec:	2301      	movs	r3, #1
		if (result) {
    9cee:	461e      	mov	r6, r3
    9cf0:	2b00      	cmp	r3, #0
    9cf2:	d0d9      	beq.n	9ca8 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    9cf4:	4620      	mov	r0, r4
    9cf6:	f00a fa56 	bl	141a6 <event_clear>
    9cfa:	e7d5      	b.n	9ca8 <channel_processing_check_and_clear+0x1c>
    9cfc:	40011000 	.word	0x40011000
    9d00:	200027a4 	.word	0x200027a4

00009d04 <compare_int_unlock>:
	if (key) {
    9d04:	b901      	cbnz	r1, 9d08 <compare_int_unlock+0x4>
}
    9d06:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    9d08:	2301      	movs	r3, #1
    9d0a:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9d0c:	4a11      	ldr	r2, [pc, #68]	; (9d54 <compare_int_unlock+0x50>)
    9d0e:	f3bf 8f5b 	dmb	ish
    9d12:	e852 1f00 	ldrex	r1, [r2]
    9d16:	4319      	orrs	r1, r3
    9d18:	e842 1c00 	strex	ip, r1, [r2]
    9d1c:	f1bc 0f00 	cmp.w	ip, #0
    9d20:	d1f7      	bne.n	9d12 <compare_int_unlock+0xe>
    9d22:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    9d26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    9d2a:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    9d2c:	4a0a      	ldr	r2, [pc, #40]	; (9d58 <compare_int_unlock+0x54>)
    9d2e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9d32:	f3bf 8f5b 	dmb	ish
    9d36:	4b09      	ldr	r3, [pc, #36]	; (9d5c <compare_int_unlock+0x58>)
    9d38:	681b      	ldr	r3, [r3, #0]
    9d3a:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    9d3e:	fa23 f000 	lsr.w	r0, r3, r0
    9d42:	f010 0f01 	tst.w	r0, #1
    9d46:	d0de      	beq.n	9d06 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9d48:	4b05      	ldr	r3, [pc, #20]	; (9d60 <compare_int_unlock+0x5c>)
    9d4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    9d4e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    9d52:	e7d8      	b.n	9d06 <compare_int_unlock+0x2>
    9d54:	200027a8 	.word	0x200027a8
    9d58:	40011000 	.word	0x40011000
    9d5c:	200027a4 	.word	0x200027a4
    9d60:	e000e100 	.word	0xe000e100

00009d64 <sys_clock_timeout_handler>:
{
    9d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9d66:	4607      	mov	r7, r0
    9d68:	4614      	mov	r4, r2
    9d6a:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    9d6c:	4610      	mov	r0, r2
    9d6e:	4619      	mov	r1, r3
    9d70:	f00a fa25 	bl	141be <absolute_time_to_cc>
    9d74:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    9d76:	4b15      	ldr	r3, [pc, #84]	; (9dcc <sys_clock_timeout_handler+0x68>)
    9d78:	681a      	ldr	r2, [r3, #0]
    9d7a:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    9d7c:	601c      	str	r4, [r3, #0]
    9d7e:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    9d80:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    9d84:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    9d88:	d308      	bcc.n	9d9c <sys_clock_timeout_handler+0x38>
	return false;
    9d8a:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    9d8c:	f006 ffda 	bl	10d44 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    9d90:	4638      	mov	r0, r7
    9d92:	f7ff ff31 	bl	9bf8 <get_comparator>
    9d96:	42a8      	cmp	r0, r5
    9d98:	d00c      	beq.n	9db4 <sys_clock_timeout_handler+0x50>
}
    9d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    9d9c:	4b0c      	ldr	r3, [pc, #48]	; (9dd0 <sys_clock_timeout_handler+0x6c>)
    9d9e:	6819      	ldr	r1, [r3, #0]
    9da0:	0a0b      	lsrs	r3, r1, #8
    9da2:	060a      	lsls	r2, r1, #24
    9da4:	1952      	adds	r2, r2, r5
    9da6:	f143 0300 	adc.w	r3, r3, #0
    9daa:	490a      	ldr	r1, [pc, #40]	; (9dd4 <sys_clock_timeout_handler+0x70>)
    9dac:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    9db0:	2401      	movs	r4, #1
    9db2:	e7eb      	b.n	9d8c <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
    9db4:	b11c      	cbz	r4, 9dbe <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
    9db6:	4638      	mov	r0, r7
    9db8:	f7ff ff26 	bl	9c08 <event_enable>
}
    9dbc:	e7ed      	b.n	9d9a <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
    9dbe:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    9dc2:	4638      	mov	r0, r7
    9dc4:	f7ff ff0e 	bl	9be4 <set_comparator>
    9dc8:	e7f5      	b.n	9db6 <sys_clock_timeout_handler+0x52>
    9dca:	bf00      	nop
    9dcc:	20000820 	.word	0x20000820
    9dd0:	200027ac 	.word	0x200027ac
    9dd4:	20000808 	.word	0x20000808

00009dd8 <z_nrf_rtc_timer_read>:
{
    9dd8:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    9dda:	4b0d      	ldr	r3, [pc, #52]	; (9e10 <z_nrf_rtc_timer_read+0x38>)
    9ddc:	681b      	ldr	r3, [r3, #0]
    9dde:	0a1d      	lsrs	r5, r3, #8
    9de0:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    9de2:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    9de6:	f7ff ff23 	bl	9c30 <counter>
    9dea:	4603      	mov	r3, r0
	val += cntr;
    9dec:	1820      	adds	r0, r4, r0
    9dee:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    9df2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    9df6:	d20a      	bcs.n	9e0e <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    9df8:	4b06      	ldr	r3, [pc, #24]	; (9e14 <z_nrf_rtc_timer_read+0x3c>)
    9dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
    9dfe:	4299      	cmp	r1, r3
    9e00:	bf08      	it	eq
    9e02:	4290      	cmpeq	r0, r2
    9e04:	d203      	bcs.n	9e0e <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    9e06:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    9e0a:	f141 0100 	adc.w	r1, r1, #0
}
    9e0e:	bd38      	pop	{r3, r4, r5, pc}
    9e10:	200027ac 	.word	0x200027ac
    9e14:	20000808 	.word	0x20000808

00009e18 <compare_set_nolocks>:
{
    9e18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9e1c:	4606      	mov	r6, r0
    9e1e:	4614      	mov	r4, r2
    9e20:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    9e22:	4610      	mov	r0, r2
    9e24:	4619      	mov	r1, r3
    9e26:	f00a f9ca 	bl	141be <absolute_time_to_cc>
    9e2a:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    9e2c:	f7ff ffd4 	bl	9dd8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    9e30:	42a9      	cmp	r1, r5
    9e32:	bf08      	it	eq
    9e34:	42a0      	cmpeq	r0, r4
    9e36:	d21e      	bcs.n	9e76 <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
    9e38:	ebb4 0800 	subs.w	r8, r4, r0
    9e3c:	eb65 0901 	sbc.w	r9, r5, r1
    9e40:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    9e44:	2300      	movs	r3, #0
    9e46:	454b      	cmp	r3, r9
    9e48:	bf08      	it	eq
    9e4a:	4542      	cmpeq	r2, r8
    9e4c:	d32e      	bcc.n	9eac <compare_set_nolocks+0x94>
		if (target_time != cc_data[chan].target_time) {
    9e4e:	4b19      	ldr	r3, [pc, #100]	; (9eb4 <compare_set_nolocks+0x9c>)
    9e50:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    9e54:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    9e58:	42ab      	cmp	r3, r5
    9e5a:	bf08      	it	eq
    9e5c:	42a2      	cmpeq	r2, r4
    9e5e:	d018      	beq.n	9e92 <compare_set_nolocks+0x7a>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    9e60:	4639      	mov	r1, r7
    9e62:	4630      	mov	r0, r6
    9e64:	f00a f9bc 	bl	141e0 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    9e68:	4639      	mov	r1, r7
    9e6a:	f00a f998 	bl	1419e <counter_sub>
    9e6e:	1824      	adds	r4, r4, r0
    9e70:	f145 0500 	adc.w	r5, r5, #0
    9e74:	e00d      	b.n	9e92 <compare_set_nolocks+0x7a>
		atomic_or(&force_isr_mask, BIT(chan));
    9e76:	2301      	movs	r3, #1
    9e78:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9e7a:	4a0f      	ldr	r2, [pc, #60]	; (9eb8 <compare_set_nolocks+0xa0>)
    9e7c:	f3bf 8f5b 	dmb	ish
    9e80:	e852 1f00 	ldrex	r1, [r2]
    9e84:	4319      	orrs	r1, r3
    9e86:	e842 1000 	strex	r0, r1, [r2]
    9e8a:	2800      	cmp	r0, #0
    9e8c:	d1f8      	bne.n	9e80 <compare_set_nolocks+0x68>
    9e8e:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    9e92:	4b08      	ldr	r3, [pc, #32]	; (9eb4 <compare_set_nolocks+0x9c>)
    9e94:	0132      	lsls	r2, r6, #4
    9e96:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    9e9a:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    9e9e:	9908      	ldr	r1, [sp, #32]
    9ea0:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    9ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    9ea4:	6073      	str	r3, [r6, #4]
	return ret;
    9ea6:	2000      	movs	r0, #0
}
    9ea8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    9eac:	f06f 0015 	mvn.w	r0, #21
    9eb0:	e7fa      	b.n	9ea8 <compare_set_nolocks+0x90>
    9eb2:	bf00      	nop
    9eb4:	20000810 	.word	0x20000810
    9eb8:	200027a4 	.word	0x200027a4

00009ebc <process_channel>:

static void process_channel(int32_t chan)
{
    9ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9ec0:	b082      	sub	sp, #8
    9ec2:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    9ec4:	f7ff fee2 	bl	9c8c <channel_processing_check_and_clear>
    9ec8:	b910      	cbnz	r0, 9ed0 <process_channel+0x14>

		if (handler) {
			handler(chan, expire_time, user_context);
		}
	}
}
    9eca:	b002      	add	sp, #8
    9ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    9ed0:	f7ff ff82 	bl	9dd8 <z_nrf_rtc_timer_read>
    9ed4:	4606      	mov	r6, r0
    9ed6:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
    9ed8:	f00a f974 	bl	141c4 <full_int_lock>
    9edc:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
    9ede:	4b13      	ldr	r3, [pc, #76]	; (9f2c <process_channel+0x70>)
    9ee0:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    9ee4:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    9ee8:	454f      	cmp	r7, r9
    9eea:	bf08      	it	eq
    9eec:	4546      	cmpeq	r6, r8
    9eee:	d20b      	bcs.n	9f08 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    9ef0:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    9ef2:	4650      	mov	r0, sl
    9ef4:	f00a f96f 	bl	141d6 <full_int_unlock>
		if (handler) {
    9ef8:	2e00      	cmp	r6, #0
    9efa:	d0e6      	beq.n	9eca <process_channel+0xe>
			handler(chan, expire_time, user_context);
    9efc:	9500      	str	r5, [sp, #0]
    9efe:	4642      	mov	r2, r8
    9f00:	464b      	mov	r3, r9
    9f02:	4620      	mov	r0, r4
    9f04:	47b0      	blx	r6
}
    9f06:	e7e0      	b.n	9eca <process_channel+0xe>
			handler = cc_data[chan].callback;
    9f08:	4a08      	ldr	r2, [pc, #32]	; (9f2c <process_channel+0x70>)
    9f0a:	0123      	lsls	r3, r4, #4
    9f0c:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    9f10:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    9f12:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
    9f14:	2000      	movs	r0, #0
    9f16:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    9f18:	f04f 32ff 	mov.w	r2, #4294967295
    9f1c:	f04f 33ff 	mov.w	r3, #4294967295
    9f20:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    9f24:	4620      	mov	r0, r4
    9f26:	f7ff fe79 	bl	9c1c <event_disable>
    9f2a:	e7e2      	b.n	9ef2 <process_channel+0x36>
    9f2c:	20000810 	.word	0x20000810

00009f30 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    9f30:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    9f32:	4b0d      	ldr	r3, [pc, #52]	; (9f68 <rtc_nrf_isr+0x38>)
    9f34:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    9f38:	f013 0f02 	tst.w	r3, #2
    9f3c:	d00a      	beq.n	9f54 <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9f3e:	4b0b      	ldr	r3, [pc, #44]	; (9f6c <rtc_nrf_isr+0x3c>)
    9f40:	681b      	ldr	r3, [r3, #0]
    9f42:	b13b      	cbz	r3, 9f54 <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    9f44:	4b09      	ldr	r3, [pc, #36]	; (9f6c <rtc_nrf_isr+0x3c>)
    9f46:	2200      	movs	r2, #0
    9f48:	601a      	str	r2, [r3, #0]
    9f4a:	681b      	ldr	r3, [r3, #0]
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
    9f4c:	4a08      	ldr	r2, [pc, #32]	; (9f70 <rtc_nrf_isr+0x40>)
    9f4e:	6813      	ldr	r3, [r2, #0]
    9f50:	3301      	adds	r3, #1
    9f52:	6013      	str	r3, [r2, #0]
{
    9f54:	2400      	movs	r4, #0
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    9f56:	2c00      	cmp	r4, #0
    9f58:	dd00      	ble.n	9f5c <rtc_nrf_isr+0x2c>
		process_channel(chan);
	}
}
    9f5a:	bd10      	pop	{r4, pc}
		process_channel(chan);
    9f5c:	4620      	mov	r0, r4
    9f5e:	f7ff ffad 	bl	9ebc <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    9f62:	3401      	adds	r4, #1
    9f64:	e7f7      	b.n	9f56 <rtc_nrf_isr+0x26>
    9f66:	bf00      	nop
    9f68:	40011000 	.word	0x40011000
    9f6c:	40011104 	.word	0x40011104
    9f70:	200027ac 	.word	0x200027ac

00009f74 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    9f74:	b530      	push	{r4, r5, lr}
    9f76:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    9f78:	2300      	movs	r3, #0
    9f7a:	4a1f      	ldr	r2, [pc, #124]	; (9ff8 <sys_clock_driver_init+0x84>)
    9f7c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    9f80:	2b00      	cmp	r3, #0
    9f82:	dd27      	ble.n	9fd4 <sys_clock_driver_init+0x60>
    p_reg->INTENSET = mask;
    9f84:	4c1c      	ldr	r4, [pc, #112]	; (9ff8 <sys_clock_driver_init+0x84>)
    9f86:	2502      	movs	r5, #2
    9f88:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9f8c:	4b1b      	ldr	r3, [pc, #108]	; (9ffc <sys_clock_driver_init+0x88>)
    9f8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    9f92:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    9f96:	2200      	movs	r2, #0
    9f98:	2101      	movs	r1, #1
    9f9a:	2011      	movs	r0, #17
    9f9c:	f7fb fc5a 	bl	5854 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    9fa0:	2011      	movs	r0, #17
    9fa2:	f7fb fc25 	bl	57f0 <arch_irq_enable>
    9fa6:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    9faa:	2301      	movs	r3, #1
    9fac:	4a14      	ldr	r2, [pc, #80]	; (a000 <sys_clock_driver_init+0x8c>)
    9fae:	6013      	str	r3, [r2, #0]
    9fb0:	6023      	str	r3, [r4, #0]

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    9fb2:	4a14      	ldr	r2, [pc, #80]	; (a004 <sys_clock_driver_init+0x90>)
    9fb4:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
				(COUNTER_HALF_SPAN - 1) :
				(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    9fb6:	2400      	movs	r4, #0
    9fb8:	9401      	str	r4, [sp, #4]
    9fba:	4b13      	ldr	r3, [pc, #76]	; (a008 <sys_clock_driver_init+0x94>)
    9fbc:	9300      	str	r3, [sp, #0]
    9fbe:	4a13      	ldr	r2, [pc, #76]	; (a00c <sys_clock_driver_init+0x98>)
    9fc0:	2300      	movs	r3, #0
    9fc2:	4620      	mov	r0, r4
    9fc4:	f00a f947 	bl	14256 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    9fc8:	4628      	mov	r0, r5
    9fca:	f7fe fe43 	bl	8c54 <z_nrf_clock_control_lf_on>

	return 0;
}
    9fce:	4620      	mov	r0, r4
    9fd0:	b003      	add	sp, #12
    9fd2:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    9fd4:	4a0e      	ldr	r2, [pc, #56]	; (a010 <sys_clock_driver_init+0x9c>)
    9fd6:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    9fda:	f04f 30ff 	mov.w	r0, #4294967295
    9fde:	f04f 31ff 	mov.w	r1, #4294967295
    9fe2:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    9fe6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    9fea:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    9fec:	4902      	ldr	r1, [pc, #8]	; (9ff8 <sys_clock_driver_init+0x84>)
    9fee:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    9ff2:	3301      	adds	r3, #1
    9ff4:	e7c4      	b.n	9f80 <sys_clock_driver_init+0xc>
    9ff6:	bf00      	nop
    9ff8:	40011000 	.word	0x40011000
    9ffc:	e000e100 	.word	0xe000e100
    a000:	40011008 	.word	0x40011008
    a004:	200027a8 	.word	0x200027a8
    a008:	00009d65 	.word	0x00009d65
    a00c:	007fffff 	.word	0x007fffff
    a010:	20000810 	.word	0x20000810

0000a014 <sys_clock_set_timeout>:

void sys_clock_set_timeout(int32_t ticks, bool idle)
{
    a014:	b510      	push	{r4, lr}
    a016:	b082      	sub	sp, #8

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    a018:	f1b0 3fff 	cmp.w	r0, #4294967295
    a01c:	d007      	beq.n	a02e <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    a01e:	1e44      	subs	r4, r0, #1
    a020:	2c00      	cmp	r4, #0
    a022:	dd07      	ble.n	a034 <sys_clock_set_timeout+0x20>
    a024:	4b11      	ldr	r3, [pc, #68]	; (a06c <sys_clock_set_timeout+0x58>)
    a026:	429c      	cmp	r4, r3
    a028:	dd05      	ble.n	a036 <sys_clock_set_timeout+0x22>
    a02a:	4c11      	ldr	r4, [pc, #68]	; (a070 <sys_clock_set_timeout+0x5c>)
    a02c:	e003      	b.n	a036 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    a02e:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
    a032:	e7f4      	b.n	a01e <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    a034:	2400      	movs	r4, #0

	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    a036:	f7ff fecf 	bl	9dd8 <z_nrf_rtc_timer_read>
    a03a:	4b0e      	ldr	r3, [pc, #56]	; (a074 <sys_clock_set_timeout+0x60>)
    a03c:	e9d3 2300 	ldrd	r2, r3, [r3]
    a040:	1a80      	subs	r0, r0, r2
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    a042:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    a046:	d300      	bcc.n	a04a <sys_clock_set_timeout+0x36>
		ticks = 0;
    a048:	2400      	movs	r4, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    a04a:	4404      	add	r4, r0
    a04c:	3401      	adds	r4, #1
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;

	/* Due to elapsed time the calculation above might produce a
	 * duration that laps the counter.  Don't let it.
	 */
	if (cyc > MAX_CYCLES) {
    a04e:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    a052:	d300      	bcc.n	a056 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    a054:	4c06      	ldr	r4, [pc, #24]	; (a070 <sys_clock_set_timeout+0x5c>)
	}

	uint64_t target_time = cyc + last_count;

	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    a056:	2000      	movs	r0, #0
    a058:	9001      	str	r0, [sp, #4]
    a05a:	4907      	ldr	r1, [pc, #28]	; (a078 <sys_clock_set_timeout+0x64>)
    a05c:	9100      	str	r1, [sp, #0]
    a05e:	1912      	adds	r2, r2, r4
    a060:	f143 0300 	adc.w	r3, r3, #0
    a064:	f00a f8f7 	bl	14256 <compare_set>
}
    a068:	b002      	add	sp, #8
    a06a:	bd10      	pop	{r4, pc}
    a06c:	007ffffe 	.word	0x007ffffe
    a070:	007fffff 	.word	0x007fffff
    a074:	20000820 	.word	0x20000820
    a078:	00009d65 	.word	0x00009d65

0000a07c <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
    a07c:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    a07e:	f7ff feab 	bl	9dd8 <z_nrf_rtc_timer_read>
    a082:	4b02      	ldr	r3, [pc, #8]	; (a08c <sys_clock_elapsed+0x10>)
    a084:	681b      	ldr	r3, [r3, #0]
}
    a086:	1ac0      	subs	r0, r0, r3
    a088:	bd08      	pop	{r3, pc}
    a08a:	bf00      	nop
    a08c:	20000820 	.word	0x20000820

0000a090 <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a090:	4b03      	ldr	r3, [pc, #12]	; (a0a0 <nrf52_errata_36+0x10>)
    a092:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    a094:	2b08      	cmp	r3, #8
    a096:	d001      	beq.n	a09c <nrf52_errata_36+0xc>
        return false;
    a098:	2000      	movs	r0, #0
    a09a:	4770      	bx	lr
                        return true;
    a09c:	2001      	movs	r0, #1
}
    a09e:	4770      	bx	lr
    a0a0:	10000130 	.word	0x10000130

0000a0a4 <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a0a4:	4b03      	ldr	r3, [pc, #12]	; (a0b4 <nrf52_errata_66+0x10>)
    a0a6:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    a0a8:	2b08      	cmp	r3, #8
    a0aa:	d001      	beq.n	a0b0 <nrf52_errata_66+0xc>
        return false;
    a0ac:	2000      	movs	r0, #0
    a0ae:	4770      	bx	lr
                        return true;
    a0b0:	2001      	movs	r0, #1
}
    a0b2:	4770      	bx	lr
    a0b4:	10000130 	.word	0x10000130

0000a0b8 <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a0b8:	4b08      	ldr	r3, [pc, #32]	; (a0dc <nrf52_errata_98+0x24>)
    a0ba:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    a0bc:	3304      	adds	r3, #4
    a0be:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    a0c0:	2a08      	cmp	r2, #8
    a0c2:	d001      	beq.n	a0c8 <nrf52_errata_98+0x10>
        return false;
    a0c4:	2000      	movs	r0, #0
    a0c6:	4770      	bx	lr
                switch(var2)
    a0c8:	2b00      	cmp	r3, #0
    a0ca:	d804      	bhi.n	a0d6 <nrf52_errata_98+0x1e>
    a0cc:	e8df f003 	tbb	[pc, r3]
    a0d0:	01          	.byte	0x01
    a0d1:	00          	.byte	0x00
            if (var1 == 0x08)
    a0d2:	2001      	movs	r0, #1
    a0d4:	4770      	bx	lr
                        return false;
    a0d6:	2000      	movs	r0, #0
}
    a0d8:	4770      	bx	lr
    a0da:	bf00      	nop
    a0dc:	10000130 	.word	0x10000130

0000a0e0 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a0e0:	4b08      	ldr	r3, [pc, #32]	; (a104 <nrf52_errata_103+0x24>)
    a0e2:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    a0e4:	3304      	adds	r3, #4
    a0e6:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    a0e8:	2a08      	cmp	r2, #8
    a0ea:	d001      	beq.n	a0f0 <nrf52_errata_103+0x10>
        return false;
    a0ec:	2000      	movs	r0, #0
    a0ee:	4770      	bx	lr
                switch(var2)
    a0f0:	2b00      	cmp	r3, #0
    a0f2:	d804      	bhi.n	a0fe <nrf52_errata_103+0x1e>
    a0f4:	e8df f003 	tbb	[pc, r3]
    a0f8:	01          	.byte	0x01
    a0f9:	00          	.byte	0x00
            if (var1 == 0x08)
    a0fa:	2001      	movs	r0, #1
    a0fc:	4770      	bx	lr
                        return false;
    a0fe:	2000      	movs	r0, #0
}
    a100:	4770      	bx	lr
    a102:	bf00      	nop
    a104:	10000130 	.word	0x10000130

0000a108 <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a108:	4b08      	ldr	r3, [pc, #32]	; (a12c <nrf52_errata_115+0x24>)
    a10a:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    a10c:	3304      	adds	r3, #4
    a10e:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    a110:	2a08      	cmp	r2, #8
    a112:	d001      	beq.n	a118 <nrf52_errata_115+0x10>
        return false;
    a114:	2000      	movs	r0, #0
    a116:	4770      	bx	lr
                switch(var2)
    a118:	2b00      	cmp	r3, #0
    a11a:	d804      	bhi.n	a126 <nrf52_errata_115+0x1e>
    a11c:	e8df f003 	tbb	[pc, r3]
    a120:	01          	.byte	0x01
    a121:	00          	.byte	0x00
            if (var1 == 0x08)
    a122:	2001      	movs	r0, #1
    a124:	4770      	bx	lr
                        return false;
    a126:	2000      	movs	r0, #0
}
    a128:	4770      	bx	lr
    a12a:	bf00      	nop
    a12c:	10000130 	.word	0x10000130

0000a130 <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a130:	4b08      	ldr	r3, [pc, #32]	; (a154 <nrf52_errata_120+0x24>)
    a132:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    a134:	3304      	adds	r3, #4
    a136:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    a138:	2a08      	cmp	r2, #8
    a13a:	d001      	beq.n	a140 <nrf52_errata_120+0x10>
        return false;
    a13c:	2000      	movs	r0, #0
    a13e:	4770      	bx	lr
                switch(var2)
    a140:	2b00      	cmp	r3, #0
    a142:	d804      	bhi.n	a14e <nrf52_errata_120+0x1e>
    a144:	e8df f003 	tbb	[pc, r3]
    a148:	01          	.byte	0x01
    a149:	00          	.byte	0x00
            if (var1 == 0x08)
    a14a:	2001      	movs	r0, #1
    a14c:	4770      	bx	lr
                        return false;
    a14e:	2000      	movs	r0, #0
}
    a150:	4770      	bx	lr
    a152:	bf00      	nop
    a154:	10000130 	.word	0x10000130

0000a158 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a158:	4b03      	ldr	r3, [pc, #12]	; (a168 <nrf52_errata_136+0x10>)
    a15a:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    a15c:	2b08      	cmp	r3, #8
    a15e:	d001      	beq.n	a164 <nrf52_errata_136+0xc>
        return false;
    a160:	2000      	movs	r0, #0
    a162:	4770      	bx	lr
                        return true;
    a164:	2001      	movs	r0, #1
}
    a166:	4770      	bx	lr
    a168:	10000130 	.word	0x10000130

0000a16c <nrf52_errata_249>:
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a16c:	4b06      	ldr	r3, [pc, #24]	; (a188 <nrf52_errata_249+0x1c>)
    a16e:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    a170:	4a06      	ldr	r2, [pc, #24]	; (a18c <nrf52_errata_249+0x20>)
    a172:	6812      	ldr	r2, [r2, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    a174:	2b08      	cmp	r3, #8
    a176:	d001      	beq.n	a17c <nrf52_errata_249+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    a178:	2000      	movs	r0, #0
    a17a:	4770      	bx	lr
                switch(var2)
    a17c:	2a03      	cmp	r2, #3
    a17e:	d801      	bhi.n	a184 <nrf52_errata_249+0x18>
    a180:	2000      	movs	r0, #0
    a182:	4770      	bx	lr
                        return true;
    a184:	2001      	movs	r0, #1
    #endif
}
    a186:	4770      	bx	lr
    a188:	10000130 	.word	0x10000130
    a18c:	10000134 	.word	0x10000134

0000a190 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    a190:	4b02      	ldr	r3, [pc, #8]	; (a19c <nvmc_wait+0xc>)
    a192:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    a196:	2b00      	cmp	r3, #0
    a198:	d0fa      	beq.n	a190 <nvmc_wait>
}
    a19a:	4770      	bx	lr
    a19c:	4001e000 	.word	0x4001e000

0000a1a0 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    a1a0:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    a1a2:	4b03      	ldr	r3, [pc, #12]	; (a1b0 <nvmc_config+0x10>)
    a1a4:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    a1a8:	f7ff fff2 	bl	a190 <nvmc_wait>
}
    a1ac:	bd08      	pop	{r3, pc}
    a1ae:	bf00      	nop
    a1b0:	4001e000 	.word	0x4001e000

0000a1b4 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    a1b4:	4b01      	ldr	r3, [pc, #4]	; (a1bc <SystemCoreClockUpdate+0x8>)
    a1b6:	4a02      	ldr	r2, [pc, #8]	; (a1c0 <SystemCoreClockUpdate+0xc>)
    a1b8:	601a      	str	r2, [r3, #0]
}
    a1ba:	4770      	bx	lr
    a1bc:	200002bc 	.word	0x200002bc
    a1c0:	03d09000 	.word	0x03d09000

0000a1c4 <SystemInit>:

void SystemInit(void)
{
    a1c4:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    a1c6:	f7ff ff63 	bl	a090 <nrf52_errata_36>
    a1ca:	b140      	cbz	r0, a1de <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    a1cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a1d0:	2200      	movs	r2, #0
    a1d2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    a1d6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    a1da:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    a1de:	f7ff ff61 	bl	a0a4 <nrf52_errata_66>
    a1e2:	2800      	cmp	r0, #0
    a1e4:	d046      	beq.n	a274 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    a1e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    a1ea:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    a1ee:	4b56      	ldr	r3, [pc, #344]	; (a348 <SystemInit+0x184>)
    a1f0:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    a1f4:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    a1f8:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    a1fc:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    a200:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    a204:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    a208:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    a20c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    a210:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    a214:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    a218:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    a21c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    a220:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    a224:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    a228:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    a22c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    a230:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    a234:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    a238:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    a23c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    a240:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    a244:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    a248:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    a24c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    a250:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    a254:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    a258:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    a25c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    a260:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    a264:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    a268:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    a26c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    a270:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    a274:	f7ff ff20 	bl	a0b8 <nrf52_errata_98>
    a278:	b110      	cbz	r0, a280 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    a27a:	4b34      	ldr	r3, [pc, #208]	; (a34c <SystemInit+0x188>)
    a27c:	4a34      	ldr	r2, [pc, #208]	; (a350 <SystemInit+0x18c>)
    a27e:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    a280:	f7ff ff2e 	bl	a0e0 <nrf52_errata_103>
    a284:	b118      	cbz	r0, a28e <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    a286:	4b33      	ldr	r3, [pc, #204]	; (a354 <SystemInit+0x190>)
    a288:	22fb      	movs	r2, #251	; 0xfb
    a28a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    a28e:	f7ff ff3b 	bl	a108 <nrf52_errata_115>
    a292:	b148      	cbz	r0, a2a8 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    a294:	4930      	ldr	r1, [pc, #192]	; (a358 <SystemInit+0x194>)
    a296:	680b      	ldr	r3, [r1, #0]
    a298:	f023 030f 	bic.w	r3, r3, #15
    a29c:	4a2f      	ldr	r2, [pc, #188]	; (a35c <SystemInit+0x198>)
    a29e:	6812      	ldr	r2, [r2, #0]
    a2a0:	f002 020f 	and.w	r2, r2, #15
    a2a4:	4313      	orrs	r3, r2
    a2a6:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    a2a8:	f7ff ff42 	bl	a130 <nrf52_errata_120>
    a2ac:	b118      	cbz	r0, a2b6 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    a2ae:	4b2c      	ldr	r3, [pc, #176]	; (a360 <SystemInit+0x19c>)
    a2b0:	f44f 7200 	mov.w	r2, #512	; 0x200
    a2b4:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    a2b6:	f7ff ff4f 	bl	a158 <nrf52_errata_136>
    a2ba:	b160      	cbz	r0, a2d6 <SystemInit+0x112>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    a2bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a2c0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    a2c4:	f013 0f01 	tst.w	r3, #1
    a2c8:	d005      	beq.n	a2d6 <SystemInit+0x112>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    a2ca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a2ce:	f06f 0201 	mvn.w	r2, #1
    a2d2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
    a2d6:	f7ff ff49 	bl	a16c <nrf52_errata_249>
    a2da:	b138      	cbz	r0, a2ec <SystemInit+0x128>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    a2dc:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    a2e0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    a2e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a2e8:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    a2ec:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    a2f0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    a2f4:	2b00      	cmp	r3, #0
    a2f6:	db08      	blt.n	a30a <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    a2f8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    a2fc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    a300:	2b00      	cmp	r3, #0
    a302:	db02      	blt.n	a30a <SystemInit+0x146>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    a304:	f7ff ff56 	bl	a1b4 <SystemCoreClockUpdate>
}
    a308:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    a30a:	2001      	movs	r0, #1
    a30c:	f7ff ff48 	bl	a1a0 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    a310:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    a314:	2512      	movs	r5, #18
    a316:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    a31a:	f7ff ff39 	bl	a190 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    a31e:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    a322:	f7ff ff35 	bl	a190 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    a326:	2000      	movs	r0, #0
    a328:	f7ff ff3a 	bl	a1a0 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    a32c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    a330:	490c      	ldr	r1, [pc, #48]	; (a364 <SystemInit+0x1a0>)
    a332:	68ca      	ldr	r2, [r1, #12]
    a334:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    a338:	4b0b      	ldr	r3, [pc, #44]	; (a368 <SystemInit+0x1a4>)
    a33a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    a33c:	60cb      	str	r3, [r1, #12]
    a33e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    a342:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    a344:	e7fd      	b.n	a342 <SystemInit+0x17e>
    a346:	bf00      	nop
    a348:	4000c000 	.word	0x4000c000
    a34c:	4000568c 	.word	0x4000568c
    a350:	00038148 	.word	0x00038148
    a354:	4000f000 	.word	0x4000f000
    a358:	40000ee4 	.word	0x40000ee4
    a35c:	10000258 	.word	0x10000258
    a360:	40029640 	.word	0x40029640
    a364:	e000ed00 	.word	0xe000ed00
    a368:	05fa0004 	.word	0x05fa0004

0000a36c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    a36c:	4b06      	ldr	r3, [pc, #24]	; (a388 <nrfx_clock_init+0x1c>)
    a36e:	791b      	ldrb	r3, [r3, #4]
    a370:	b93b      	cbnz	r3, a382 <nrfx_clock_init+0x16>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    a372:	4b05      	ldr	r3, [pc, #20]	; (a388 <nrfx_clock_init+0x1c>)
    a374:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    a376:	2201      	movs	r2, #1
    a378:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    a37a:	2200      	movs	r2, #0
    a37c:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    a37e:	4803      	ldr	r0, [pc, #12]	; (a38c <nrfx_clock_init+0x20>)
    a380:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    a382:	4803      	ldr	r0, [pc, #12]	; (a390 <nrfx_clock_init+0x24>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    a384:	4770      	bx	lr
    a386:	bf00      	nop
    a388:	200027b0 	.word	0x200027b0
    a38c:	0bad0000 	.word	0x0bad0000
    a390:	0bad000c 	.word	0x0bad000c

0000a394 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    a394:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    a396:	2000      	movs	r0, #0
    a398:	f7fb fa4e 	bl	5838 <arch_irq_is_enabled>
    a39c:	b118      	cbz	r0, a3a6 <nrfx_clock_enable+0x12>
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
    a39e:	4b03      	ldr	r3, [pc, #12]	; (a3ac <nrfx_clock_enable+0x18>)
    a3a0:	2201      	movs	r2, #1
    a3a2:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    a3a4:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    a3a6:	f7fb fa23 	bl	57f0 <arch_irq_enable>
    a3aa:	e7f8      	b.n	a39e <nrfx_clock_enable+0xa>
    a3ac:	20002fc7 	.word	0x20002fc7

0000a3b0 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    a3b0:	b110      	cbz	r0, a3b8 <nrfx_clock_start+0x8>
    a3b2:	2801      	cmp	r0, #1
    a3b4:	d025      	beq.n	a402 <nrfx_clock_start+0x52>
    a3b6:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    a3b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    a3bc:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    a3c0:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    a3c4:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    a3c8:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    a3cc:	d111      	bne.n	a3f2 <nrfx_clock_start+0x42>
    p_reg->LFCLKSRC = (uint32_t)(source);
    a3ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a3d2:	2200      	movs	r2, #0
    a3d4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a3d8:	4b0f      	ldr	r3, [pc, #60]	; (a418 <nrfx_clock_start+0x68>)
    a3da:	2200      	movs	r2, #0
    a3dc:	601a      	str	r2, [r3, #0]
    a3de:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    a3e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a3e4:	2202      	movs	r2, #2
    a3e6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a3ea:	3308      	adds	r3, #8
    a3ec:	2201      	movs	r2, #1
    a3ee:	601a      	str	r2, [r3, #0]
}
    a3f0:	4770      	bx	lr
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    a3f2:	2b01      	cmp	r3, #1
    a3f4:	d1eb      	bne.n	a3ce <nrfx_clock_start+0x1e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    a3f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a3fa:	2201      	movs	r2, #1
    a3fc:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    a400:	e7ea      	b.n	a3d8 <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a402:	4b06      	ldr	r3, [pc, #24]	; (a41c <nrfx_clock_start+0x6c>)
    a404:	2200      	movs	r2, #0
    a406:	601a      	str	r2, [r3, #0]
    a408:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    a40a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a40e:	2201      	movs	r2, #1
    a410:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a414:	601a      	str	r2, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    a416:	4770      	bx	lr
    a418:	40000104 	.word	0x40000104
    a41c:	40000100 	.word	0x40000100

0000a420 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    a420:	b530      	push	{r4, r5, lr}
    a422:	b083      	sub	sp, #12
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    a424:	4604      	mov	r4, r0
    a426:	b118      	cbz	r0, a430 <nrfx_clock_stop+0x10>
    a428:	2801      	cmp	r0, #1
    a42a:	d013      	beq.n	a454 <nrfx_clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    a42c:	b003      	add	sp, #12
    a42e:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
    a430:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a434:	2202      	movs	r2, #2
    a436:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a43a:	f503 7382 	add.w	r3, r3, #260	; 0x104
    a43e:	2200      	movs	r2, #0
    a440:	601a      	str	r2, [r3, #0]
    a442:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a444:	4b39      	ldr	r3, [pc, #228]	; (a52c <nrfx_clock_stop+0x10c>)
    a446:	2201      	movs	r2, #1
    a448:	601a      	str	r2, [r3, #0]
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    a44a:	2c01      	cmp	r4, #1
    a44c:	d00f      	beq.n	a46e <nrfx_clock_stop+0x4e>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    a44e:	f242 7510 	movw	r5, #10000	; 0x2710
    a452:	e052      	b.n	a4fa <nrfx_clock_stop+0xda>
    p_reg->INTENCLR = mask;
    a454:	2301      	movs	r3, #1
    a456:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    a45a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a45e:	f502 7280 	add.w	r2, r2, #256	; 0x100
    a462:	2100      	movs	r1, #0
    a464:	6011      	str	r1, [r2, #0]
    a466:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a468:	4a31      	ldr	r2, [pc, #196]	; (a530 <nrfx_clock_stop+0x110>)
    a46a:	6013      	str	r3, [r2, #0]
}
    a46c:	e7ed      	b.n	a44a <nrfx_clock_stop+0x2a>
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    a46e:	2301      	movs	r3, #1
    a470:	f88d 3007 	strb.w	r3, [sp, #7]
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    a474:	f242 7510 	movw	r5, #10000	; 0x2710
    a478:	e018      	b.n	a4ac <nrfx_clock_stop+0x8c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    a47a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    a47e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    a482:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    a486:	f8cd 3007 	str.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    a48a:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    a48e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    a492:	d120      	bne.n	a4d6 <nrfx_clock_stop+0xb6>
    return false;
    a494:	2300      	movs	r3, #0
    a496:	2b00      	cmp	r3, #0
    a498:	d042      	beq.n	a520 <nrfx_clock_stop+0x100>
    a49a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    a49e:	2b01      	cmp	r3, #1
    a4a0:	d13e      	bne.n	a520 <nrfx_clock_stop+0x100>
    a4a2:	2001      	movs	r0, #1
    a4a4:	f009 ff05 	bl	142b2 <nrfx_busy_wait>
    a4a8:	3d01      	subs	r5, #1
    a4aa:	d039      	beq.n	a520 <nrfx_clock_stop+0x100>
    switch (domain)
    a4ac:	2c00      	cmp	r4, #0
    a4ae:	d0e4      	beq.n	a47a <nrfx_clock_stop+0x5a>
    a4b0:	2c01      	cmp	r4, #1
    a4b2:	d001      	beq.n	a4b8 <nrfx_clock_stop+0x98>
    a4b4:	2300      	movs	r3, #0
    a4b6:	e7ee      	b.n	a496 <nrfx_clock_stop+0x76>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    a4b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    a4bc:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    a4c0:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    a4c4:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    a4c8:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    a4cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    a4d0:	d103      	bne.n	a4da <nrfx_clock_stop+0xba>
    return false;
    a4d2:	2300      	movs	r3, #0
    a4d4:	e7df      	b.n	a496 <nrfx_clock_stop+0x76>
                return true;
    a4d6:	2301      	movs	r3, #1
    a4d8:	e7dd      	b.n	a496 <nrfx_clock_stop+0x76>
                return true;
    a4da:	2301      	movs	r3, #1
    a4dc:	e7db      	b.n	a496 <nrfx_clock_stop+0x76>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    a4de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a4e2:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    a4e6:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    a4ea:	d115      	bne.n	a518 <nrfx_clock_stop+0xf8>
    return false;
    a4ec:	2300      	movs	r3, #0
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    a4ee:	b1bb      	cbz	r3, a520 <nrfx_clock_stop+0x100>
    a4f0:	2001      	movs	r0, #1
    a4f2:	f009 fede 	bl	142b2 <nrfx_busy_wait>
    a4f6:	3d01      	subs	r5, #1
    a4f8:	d012      	beq.n	a520 <nrfx_clock_stop+0x100>
    switch (domain)
    a4fa:	2c00      	cmp	r4, #0
    a4fc:	d0ef      	beq.n	a4de <nrfx_clock_stop+0xbe>
    a4fe:	2c01      	cmp	r4, #1
    a500:	d001      	beq.n	a506 <nrfx_clock_stop+0xe6>
    a502:	2300      	movs	r3, #0
    a504:	e7f3      	b.n	a4ee <nrfx_clock_stop+0xce>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    a506:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a50a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    a50e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    a512:	d103      	bne.n	a51c <nrfx_clock_stop+0xfc>
    return false;
    a514:	2300      	movs	r3, #0
    a516:	e7ea      	b.n	a4ee <nrfx_clock_stop+0xce>
                return true;
    a518:	2301      	movs	r3, #1
    a51a:	e7e8      	b.n	a4ee <nrfx_clock_stop+0xce>
                return true;
    a51c:	2301      	movs	r3, #1
    a51e:	e7e6      	b.n	a4ee <nrfx_clock_stop+0xce>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    a520:	2c01      	cmp	r4, #1
    a522:	d183      	bne.n	a42c <nrfx_clock_stop+0xc>
            m_clock_cb.hfclk_started = false;
    a524:	4b03      	ldr	r3, [pc, #12]	; (a534 <nrfx_clock_stop+0x114>)
    a526:	2200      	movs	r2, #0
    a528:	715a      	strb	r2, [r3, #5]
    a52a:	e77f      	b.n	a42c <nrfx_clock_stop+0xc>
    a52c:	4000000c 	.word	0x4000000c
    a530:	40000004 	.word	0x40000004
    a534:	200027b0 	.word	0x200027b0

0000a538 <nrfx_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    a538:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    a53a:	4b1b      	ldr	r3, [pc, #108]	; (a5a8 <nrfx_clock_irq_handler+0x70>)
    a53c:	681b      	ldr	r3, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    a53e:	b183      	cbz	r3, a562 <nrfx_clock_irq_handler+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a540:	4b19      	ldr	r3, [pc, #100]	; (a5a8 <nrfx_clock_irq_handler+0x70>)
    a542:	2200      	movs	r2, #0
    a544:	601a      	str	r2, [r3, #0]
    a546:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    a548:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a54c:	2201      	movs	r2, #1
    a54e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    a552:	4b16      	ldr	r3, [pc, #88]	; (a5ac <nrfx_clock_irq_handler+0x74>)
    a554:	795b      	ldrb	r3, [r3, #5]
    a556:	b923      	cbnz	r3, a562 <nrfx_clock_irq_handler+0x2a>
        {
            m_clock_cb.hfclk_started = true;
    a558:	4b14      	ldr	r3, [pc, #80]	; (a5ac <nrfx_clock_irq_handler+0x74>)
    a55a:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    a55c:	681b      	ldr	r3, [r3, #0]
    a55e:	2000      	movs	r0, #0
    a560:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    a562:	4b13      	ldr	r3, [pc, #76]	; (a5b0 <nrfx_clock_irq_handler+0x78>)
    a564:	681b      	ldr	r3, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    a566:	b19b      	cbz	r3, a590 <nrfx_clock_irq_handler+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a568:	4b11      	ldr	r3, [pc, #68]	; (a5b0 <nrfx_clock_irq_handler+0x78>)
    a56a:	2200      	movs	r2, #0
    a56c:	601a      	str	r2, [r3, #0]
    a56e:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    a570:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a574:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    a578:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    a57c:	f012 0f03 	tst.w	r2, #3
    a580:	d107      	bne.n	a592 <nrfx_clock_irq_handler+0x5a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    a582:	2301      	movs	r3, #1
    a584:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    a588:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a58c:	3208      	adds	r2, #8
    a58e:	6013      	str	r3, [r2, #0]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    a590:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    a592:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a596:	2202      	movs	r2, #2
    a598:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    a59c:	4b03      	ldr	r3, [pc, #12]	; (a5ac <nrfx_clock_irq_handler+0x74>)
    a59e:	681b      	ldr	r3, [r3, #0]
    a5a0:	2001      	movs	r0, #1
    a5a2:	4798      	blx	r3
}
    a5a4:	e7f4      	b.n	a590 <nrfx_clock_irq_handler+0x58>
    a5a6:	bf00      	nop
    a5a8:	40000100 	.word	0x40000100
    a5ac:	200027b0 	.word	0x200027b0
    a5b0:	40000104 	.word	0x40000104

0000a5b4 <is_allocated_channel>:
    NRFX_LOG_INFO("Uninitialized.");
}

static bool is_allocated_channel(uint8_t index)
{
    return m_cb.allocated_channels_mask & (1UL << index);
    a5b4:	4b04      	ldr	r3, [pc, #16]	; (a5c8 <is_allocated_channel+0x14>)
    a5b6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    a5b8:	2301      	movs	r3, #1
    a5ba:	4083      	lsls	r3, r0
    a5bc:	421a      	tst	r2, r3
}
    a5be:	bf14      	ite	ne
    a5c0:	2001      	movne	r0, #1
    a5c2:	2000      	moveq	r0, #0
    a5c4:	4770      	bx	lr
    a5c6:	bf00      	nop
    a5c8:	200027b8 	.word	0x200027b8

0000a5cc <channel_allocated_set>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
}

static void channel_allocated_set(uint8_t index)
{
    m_cb.allocated_channels_mask |= (1UL << index);
    a5cc:	2301      	movs	r3, #1
    a5ce:	fa03 f000 	lsl.w	r0, r3, r0
    a5d2:	4a02      	ldr	r2, [pc, #8]	; (a5dc <channel_allocated_set+0x10>)
    a5d4:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    a5d6:	4303      	orrs	r3, r0
    a5d8:	65d3      	str	r3, [r2, #92]	; 0x5c
}
    a5da:	4770      	bx	lr
    a5dc:	200027b8 	.word	0x200027b8

0000a5e0 <channel_allocated_clr>:

static void channel_allocated_clr(uint8_t index)
{
    m_cb.allocated_channels_mask &= ~(1UL << index);
    a5e0:	2301      	movs	r3, #1
    a5e2:	fa03 f000 	lsl.w	r0, r3, r0
    a5e6:	4a03      	ldr	r2, [pc, #12]	; (a5f4 <channel_allocated_clr+0x14>)
    a5e8:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    a5ea:	ea23 0300 	bic.w	r3, r3, r0
    a5ee:	65d3      	str	r3, [r2, #92]	; 0x5c
}
    a5f0:	4770      	bx	lr
    a5f2:	bf00      	nop
    a5f4:	200027b8 	.word	0x200027b8

0000a5f8 <nrfx_gpiote_channel_free>:

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    a5f8:	b538      	push	{r3, r4, r5, lr}
    a5fa:	4604      	mov	r4, r0
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    a5fc:	f009 fe5d 	bl	142ba <is_app_channel>
    a600:	b908      	cbnz	r0, a606 <nrfx_gpiote_channel_free+0xe>
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    a602:	4809      	ldr	r0, [pc, #36]	; (a628 <nrfx_gpiote_channel_free+0x30>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    a604:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    a606:	f04f 0320 	mov.w	r3, #32
    a60a:	f3ef 8511 	mrs	r5, BASEPRI
    a60e:	f383 8812 	msr	BASEPRI_MAX, r3
    a612:	f3bf 8f6f 	isb	sy
        channel_allocated_clr(channel);
    a616:	4620      	mov	r0, r4
    a618:	f7ff ffe2 	bl	a5e0 <channel_allocated_clr>
	__asm__ volatile(
    a61c:	f385 8811 	msr	BASEPRI, r5
    a620:	f3bf 8f6f 	isb	sy
    nrfx_err_t err_code = NRFX_SUCCESS;
    a624:	4801      	ldr	r0, [pc, #4]	; (a62c <nrfx_gpiote_channel_free+0x34>)
}
    a626:	e7ed      	b.n	a604 <nrfx_gpiote_channel_free+0xc>
    a628:	0bad0004 	.word	0x0bad0004
    a62c:	0bad0000 	.word	0x0bad0000

0000a630 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    a630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a634:	4680      	mov	r8, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;

    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    a636:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    a638:	25ff      	movs	r5, #255	; 0xff
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    a63a:	4f17      	ldr	r7, [pc, #92]	; (a698 <nrfx_gpiote_channel_alloc+0x68>)
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    a63c:	e013      	b.n	a666 <nrfx_gpiote_channel_alloc+0x36>
    {
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
    a63e:	4620      	mov	r0, r4
    a640:	f7ff ffc4 	bl	a5cc <channel_allocated_set>
            *p_channel = ch_idx;
    a644:	f888 4000 	strb.w	r4, [r8]
            err_code = NRFX_SUCCESS;
    a648:	4f14      	ldr	r7, [pc, #80]	; (a69c <nrfx_gpiote_channel_alloc+0x6c>)
	__asm__ volatile(
    a64a:	f386 8811 	msr	BASEPRI, r6
    a64e:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    a652:	4b12      	ldr	r3, [pc, #72]	; (a69c <nrfx_gpiote_channel_alloc+0x6c>)
    a654:	429f      	cmp	r7, r3
    a656:	d01b      	beq.n	a690 <nrfx_gpiote_channel_alloc+0x60>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    a658:	2301      	movs	r3, #1
    a65a:	fa03 f309 	lsl.w	r3, r3, r9
    a65e:	ea25 0503 	bic.w	r5, r5, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    a662:	3401      	adds	r4, #1
    a664:	b2e4      	uxtb	r4, r4
    a666:	b19d      	cbz	r5, a690 <nrfx_gpiote_channel_alloc+0x60>
	__asm__ volatile(
    a668:	f04f 0320 	mov.w	r3, #32
    a66c:	f3ef 8611 	mrs	r6, BASEPRI
    a670:	f383 8812 	msr	BASEPRI_MAX, r3
    a674:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    a678:	46a1      	mov	r9, r4
    a67a:	fa25 f304 	lsr.w	r3, r5, r4
    a67e:	f013 0f01 	tst.w	r3, #1
    a682:	d0e2      	beq.n	a64a <nrfx_gpiote_channel_alloc+0x1a>
    a684:	4620      	mov	r0, r4
    a686:	f7ff ff95 	bl	a5b4 <is_allocated_channel>
    a68a:	2800      	cmp	r0, #0
    a68c:	d1dd      	bne.n	a64a <nrfx_gpiote_channel_alloc+0x1a>
    a68e:	e7d6      	b.n	a63e <nrfx_gpiote_channel_alloc+0xe>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    a690:	4638      	mov	r0, r7
    a692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a696:	bf00      	nop
    a698:	0bad0002 	.word	0x0bad0002
    a69c:	0bad0000 	.word	0x0bad0000

0000a6a0 <nvmc_readonly_mode_set>:
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
    a6a0:	4b02      	ldr	r3, [pc, #8]	; (a6ac <nvmc_readonly_mode_set+0xc>)
    a6a2:	2200      	movs	r2, #0
    a6a4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
    a6a8:	4770      	bx	lr
    a6aa:	bf00      	nop
    a6ac:	4001e000 	.word	0x4001e000

0000a6b0 <nvmc_write_mode_set>:
    a6b0:	4b02      	ldr	r3, [pc, #8]	; (a6bc <nvmc_write_mode_set+0xc>)
    a6b2:	2201      	movs	r2, #1
    a6b4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_WRITE);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_WRITE);
#endif
}
    a6b8:	4770      	bx	lr
    a6ba:	bf00      	nop
    a6bc:	4001e000 	.word	0x4001e000

0000a6c0 <nvmc_erase_mode_set>:
    a6c0:	4b02      	ldr	r3, [pc, #8]	; (a6cc <nvmc_erase_mode_set+0xc>)
    a6c2:	2202      	movs	r2, #2
    a6c4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_ERASE);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_ERASE);
#endif
}
    a6c8:	4770      	bx	lr
    a6ca:	bf00      	nop
    a6cc:	4001e000 	.word	0x4001e000

0000a6d0 <nvmc_word_write>:
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    a6d0:	4b04      	ldr	r3, [pc, #16]	; (a6e4 <nvmc_word_write+0x14>)
    a6d2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    a6d6:	f013 0f01 	tst.w	r3, #1
    a6da:	d0f9      	beq.n	a6d0 <nvmc_word_write>
    {}
#endif

    *(volatile uint32_t *)addr = value;
    a6dc:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    a6de:	f3bf 8f5f 	dmb	sy
    __DMB();
}
    a6e2:	4770      	bx	lr
    a6e4:	4001e000 	.word	0x4001e000

0000a6e8 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    a6e8:	b510      	push	{r4, lr}
    a6ea:	4604      	mov	r4, r0
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    a6ec:	f009 fdfe 	bl	142ec <is_page_aligned_check>
    a6f0:	b908      	cbnz	r0, a6f6 <nrfx_nvmc_page_erase+0xe>
    {
        return NRFX_ERROR_INVALID_ADDR;
    a6f2:	4808      	ldr	r0, [pc, #32]	; (a714 <nrfx_nvmc_page_erase+0x2c>)
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
}
    a6f4:	bd10      	pop	{r4, pc}
    nvmc_erase_mode_set();
    a6f6:	f7ff ffe3 	bl	a6c0 <nvmc_erase_mode_set>
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
    a6fa:	4b07      	ldr	r3, [pc, #28]	; (a718 <nrfx_nvmc_page_erase+0x30>)
    a6fc:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    a700:	4b05      	ldr	r3, [pc, #20]	; (a718 <nrfx_nvmc_page_erase+0x30>)
    a702:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    a706:	f013 0f01 	tst.w	r3, #1
    a70a:	d0f9      	beq.n	a700 <nrfx_nvmc_page_erase+0x18>
    nvmc_readonly_mode_set();
    a70c:	f7ff ffc8 	bl	a6a0 <nvmc_readonly_mode_set>
    return NRFX_SUCCESS;
    a710:	4802      	ldr	r0, [pc, #8]	; (a71c <nrfx_nvmc_page_erase+0x34>)
    a712:	e7ef      	b.n	a6f4 <nrfx_nvmc_page_erase+0xc>
    a714:	0bad000a 	.word	0x0bad000a
    a718:	4001e000 	.word	0x4001e000
    a71c:	0bad0000 	.word	0x0bad0000

0000a720 <nrf52_errata_197>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a720:	4b06      	ldr	r3, [pc, #24]	; (a73c <nrf52_errata_197+0x1c>)
    a722:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    a724:	4a06      	ldr	r2, [pc, #24]	; (a740 <nrf52_errata_197+0x20>)
    a726:	6812      	ldr	r2, [r2, #0]
            if (var1 == 0x08)
    a728:	2b08      	cmp	r3, #8
    a72a:	d001      	beq.n	a730 <nrf52_errata_197+0x10>
        return false;
    a72c:	2000      	movs	r0, #0
    a72e:	4770      	bx	lr
                switch(var2)
    a730:	2a02      	cmp	r2, #2
    a732:	d001      	beq.n	a738 <nrf52_errata_197+0x18>
                        return false;
    a734:	2000      	movs	r0, #0
    a736:	4770      	bx	lr
                        return true;
    a738:	2001      	movs	r0, #1
}
    a73a:	4770      	bx	lr
    a73c:	10000130 	.word	0x10000130
    a740:	10000134 	.word	0x10000134

0000a744 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
    a744:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
    a746:	4b18      	ldr	r3, [pc, #96]	; (a7a8 <nrfx_power_init+0x64>)
    a748:	781b      	ldrb	r3, [r3, #0]
    a74a:	bb5b      	cbnz	r3, a7a4 <nrfx_power_init+0x60>
    a74c:	4604      	mov	r4, r0
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
    a74e:	7803      	ldrb	r3, [r0, #0]
    a750:	f3c3 0540 	ubfx	r5, r3, #1, #1
    if (enable && nrf52_errata_197())
    a754:	f013 0f02 	tst.w	r3, #2
    a758:	d005      	beq.n	a766 <nrfx_power_init+0x22>
    a75a:	f7ff ffe1 	bl	a720 <nrf52_errata_197>
    a75e:	b110      	cbz	r0, a766 <nrfx_power_init+0x22>
        *(volatile uint32_t *)0x40000638ul = 1ul;
    a760:	4b12      	ldr	r3, [pc, #72]	; (a7ac <nrfx_power_init+0x68>)
    a762:	2201      	movs	r2, #1
    a764:	601a      	str	r2, [r3, #0]
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    a766:	b1b5      	cbz	r5, a796 <nrfx_power_init+0x52>
    a768:	2201      	movs	r2, #1
    a76a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a76e:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#elif NRF_REGULATORS_HAS_DCDCEN_VDDH
    nrf_regulators_dcdcen_vddh_set(NRF_REGULATORS, p_config->dcdcenhv);
#endif

#if NRF_POWER_HAS_DCDCEN
    nrf_power_dcdcen_set(NRF_POWER, p_config->dcdcen);
    a772:	7823      	ldrb	r3, [r4, #0]
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    a774:	f013 0f01 	tst.w	r3, #1
    a778:	d00f      	beq.n	a79a <nrfx_power_init+0x56>
    a77a:	2201      	movs	r2, #1
    a77c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a780:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    a784:	2000      	movs	r0, #0
    a786:	f7fb f857 	bl	5838 <arch_irq_is_enabled>
    a78a:	b140      	cbz	r0, a79e <nrfx_power_init+0x5a>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
    a78c:	4b06      	ldr	r3, [pc, #24]	; (a7a8 <nrfx_power_init+0x64>)
    a78e:	2201      	movs	r2, #1
    a790:	701a      	strb	r2, [r3, #0]
    return NRFX_SUCCESS;
    a792:	4807      	ldr	r0, [pc, #28]	; (a7b0 <nrfx_power_init+0x6c>)
}
    a794:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    a796:	2200      	movs	r2, #0
    a798:	e7e7      	b.n	a76a <nrfx_power_init+0x26>
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    a79a:	2200      	movs	r2, #0
    a79c:	e7ee      	b.n	a77c <nrfx_power_init+0x38>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    a79e:	f7fb f827 	bl	57f0 <arch_irq_enable>
    a7a2:	e7f3      	b.n	a78c <nrfx_power_init+0x48>
        return NRFX_ERROR_ALREADY_INITIALIZED;
    a7a4:	4803      	ldr	r0, [pc, #12]	; (a7b4 <nrfx_power_init+0x70>)
    a7a6:	e7f5      	b.n	a794 <nrfx_power_init+0x50>
    a7a8:	20002fc8 	.word	0x20002fc8
    a7ac:	40000638 	.word	0x40000638
    a7b0:	0bad0000 	.word	0x0bad0000
    a7b4:	0bad000c 	.word	0x0bad000c

0000a7b8 <nrfx_power_usbevt_uninit>:
                                     NRF_POWER_INT_USBREMOVED_MASK  |
                                     NRF_POWER_INT_USBPWRRDY_MASK);
}

void nrfx_power_usbevt_uninit(void)
{
    a7b8:	b508      	push	{r3, lr}
    nrfx_power_usbevt_disable();
    a7ba:	f009 fdc2 	bl	14342 <nrfx_power_usbevt_disable>
    m_usbevt_handler = NULL;
    a7be:	4b02      	ldr	r3, [pc, #8]	; (a7c8 <nrfx_power_usbevt_uninit+0x10>)
    a7c0:	2200      	movs	r2, #0
    a7c2:	601a      	str	r2, [r3, #0]
}
    a7c4:	bd08      	pop	{r3, pc}
    a7c6:	bf00      	nop
    a7c8:	20002820 	.word	0x20002820

0000a7cc <nrfx_power_usbevt_init>:
{
    a7cc:	b510      	push	{r4, lr}
    a7ce:	4604      	mov	r4, r0
    nrfx_power_usbevt_uninit();
    a7d0:	f7ff fff2 	bl	a7b8 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
    a7d4:	6823      	ldr	r3, [r4, #0]
    a7d6:	b10b      	cbz	r3, a7dc <nrfx_power_usbevt_init+0x10>
        m_usbevt_handler = p_config->handler;
    a7d8:	4a01      	ldr	r2, [pc, #4]	; (a7e0 <nrfx_power_usbevt_init+0x14>)
    a7da:	6013      	str	r3, [r2, #0]
}
    a7dc:	bd10      	pop	{r4, pc}
    a7de:	bf00      	nop
    a7e0:	20002820 	.word	0x20002820

0000a7e4 <nrfx_power_irq_handler>:

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    a7e4:	b510      	push	{r4, lr}
    return p_reg->INTENSET;
    a7e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a7ea:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    a7ee:	f014 0f04 	tst.w	r4, #4
    a7f2:	d00b      	beq.n	a80c <nrfx_power_irq_handler+0x28>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a7f4:	f503 7384 	add.w	r3, r3, #264	; 0x108
    a7f8:	681b      	ldr	r3, [r3, #0]
    if (ret)
    a7fa:	b11b      	cbz	r3, a804 <nrfx_power_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a7fc:	4a29      	ldr	r2, [pc, #164]	; (a8a4 <nrfx_power_irq_handler+0xc0>)
    a7fe:	2100      	movs	r1, #0
    a800:	6011      	str	r1, [r2, #0]
    a802:	6812      	ldr	r2, [r2, #0]
    a804:	b113      	cbz	r3, a80c <nrfx_power_irq_handler+0x28>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    a806:	4b28      	ldr	r3, [pc, #160]	; (a8a8 <nrfx_power_irq_handler+0xc4>)
    a808:	681b      	ldr	r3, [r3, #0]
    a80a:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    a80c:	f014 0f20 	tst.w	r4, #32
    a810:	d00b      	beq.n	a82a <nrfx_power_irq_handler+0x46>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a812:	4b26      	ldr	r3, [pc, #152]	; (a8ac <nrfx_power_irq_handler+0xc8>)
    a814:	681b      	ldr	r3, [r3, #0]
    if (ret)
    a816:	b11b      	cbz	r3, a820 <nrfx_power_irq_handler+0x3c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a818:	4a24      	ldr	r2, [pc, #144]	; (a8ac <nrfx_power_irq_handler+0xc8>)
    a81a:	2100      	movs	r1, #0
    a81c:	6011      	str	r1, [r2, #0]
    a81e:	6812      	ldr	r2, [r2, #0]
    a820:	b11b      	cbz	r3, a82a <nrfx_power_irq_handler+0x46>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    a822:	4b23      	ldr	r3, [pc, #140]	; (a8b0 <nrfx_power_irq_handler+0xcc>)
    a824:	681b      	ldr	r3, [r3, #0]
    a826:	2000      	movs	r0, #0
    a828:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    a82a:	f014 0f40 	tst.w	r4, #64	; 0x40
    a82e:	d00b      	beq.n	a848 <nrfx_power_irq_handler+0x64>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a830:	4b20      	ldr	r3, [pc, #128]	; (a8b4 <nrfx_power_irq_handler+0xd0>)
    a832:	681b      	ldr	r3, [r3, #0]
    if (ret)
    a834:	b11b      	cbz	r3, a83e <nrfx_power_irq_handler+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a836:	4a1f      	ldr	r2, [pc, #124]	; (a8b4 <nrfx_power_irq_handler+0xd0>)
    a838:	2100      	movs	r1, #0
    a83a:	6011      	str	r1, [r2, #0]
    a83c:	6812      	ldr	r2, [r2, #0]
    a83e:	b11b      	cbz	r3, a848 <nrfx_power_irq_handler+0x64>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    a840:	4b1b      	ldr	r3, [pc, #108]	; (a8b0 <nrfx_power_irq_handler+0xcc>)
    a842:	681b      	ldr	r3, [r3, #0]
    a844:	2001      	movs	r0, #1
    a846:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    a848:	f014 0f80 	tst.w	r4, #128	; 0x80
    a84c:	d00b      	beq.n	a866 <nrfx_power_irq_handler+0x82>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a84e:	4b1a      	ldr	r3, [pc, #104]	; (a8b8 <nrfx_power_irq_handler+0xd4>)
    a850:	681b      	ldr	r3, [r3, #0]
    if (ret)
    a852:	b11b      	cbz	r3, a85c <nrfx_power_irq_handler+0x78>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a854:	4a18      	ldr	r2, [pc, #96]	; (a8b8 <nrfx_power_irq_handler+0xd4>)
    a856:	2100      	movs	r1, #0
    a858:	6011      	str	r1, [r2, #0]
    a85a:	6812      	ldr	r2, [r2, #0]
    a85c:	b11b      	cbz	r3, a866 <nrfx_power_irq_handler+0x82>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
    a85e:	4b17      	ldr	r3, [pc, #92]	; (a8bc <nrfx_power_irq_handler+0xd8>)
    a860:	681b      	ldr	r3, [r3, #0]
    a862:	2000      	movs	r0, #0
    a864:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    a866:	f414 7f80 	tst.w	r4, #256	; 0x100
    a86a:	d00b      	beq.n	a884 <nrfx_power_irq_handler+0xa0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a86c:	4b14      	ldr	r3, [pc, #80]	; (a8c0 <nrfx_power_irq_handler+0xdc>)
    a86e:	681b      	ldr	r3, [r3, #0]
    if (ret)
    a870:	b11b      	cbz	r3, a87a <nrfx_power_irq_handler+0x96>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a872:	4a13      	ldr	r2, [pc, #76]	; (a8c0 <nrfx_power_irq_handler+0xdc>)
    a874:	2100      	movs	r1, #0
    a876:	6011      	str	r1, [r2, #0]
    a878:	6812      	ldr	r2, [r2, #0]
    a87a:	b11b      	cbz	r3, a884 <nrfx_power_irq_handler+0xa0>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
    a87c:	4b0f      	ldr	r3, [pc, #60]	; (a8bc <nrfx_power_irq_handler+0xd8>)
    a87e:	681b      	ldr	r3, [r3, #0]
    a880:	2001      	movs	r0, #1
    a882:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    a884:	f414 7f00 	tst.w	r4, #512	; 0x200
    a888:	d00b      	beq.n	a8a2 <nrfx_power_irq_handler+0xbe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    a88a:	4b0e      	ldr	r3, [pc, #56]	; (a8c4 <nrfx_power_irq_handler+0xe0>)
    a88c:	681b      	ldr	r3, [r3, #0]
    if (ret)
    a88e:	b11b      	cbz	r3, a898 <nrfx_power_irq_handler+0xb4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a890:	4a0c      	ldr	r2, [pc, #48]	; (a8c4 <nrfx_power_irq_handler+0xe0>)
    a892:	2100      	movs	r1, #0
    a894:	6011      	str	r1, [r2, #0]
    a896:	6812      	ldr	r2, [r2, #0]
    a898:	b11b      	cbz	r3, a8a2 <nrfx_power_irq_handler+0xbe>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    a89a:	4b08      	ldr	r3, [pc, #32]	; (a8bc <nrfx_power_irq_handler+0xd8>)
    a89c:	681b      	ldr	r3, [r3, #0]
    a89e:	2002      	movs	r0, #2
    a8a0:	4798      	blx	r3
    }
#endif
}
    a8a2:	bd10      	pop	{r4, pc}
    a8a4:	40000108 	.word	0x40000108
    a8a8:	20002818 	.word	0x20002818
    a8ac:	40000114 	.word	0x40000114
    a8b0:	2000281c 	.word	0x2000281c
    a8b4:	40000118 	.word	0x40000118
    a8b8:	4000011c 	.word	0x4000011c
    a8bc:	20002820 	.word	0x20002820
    a8c0:	40000120 	.word	0x40000120
    a8c4:	40000124 	.word	0x40000124

0000a8c8 <is_allocated_channel>:
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
    a8c8:	2301      	movs	r3, #1
    a8ca:	4083      	lsls	r3, r0
 * @retval true  The channel is allocated.
 * @retval false The channel is not allocated.
 */
static bool is_allocated_channel(nrf_ppi_channel_t channel)
{
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    a8cc:	4a03      	ldr	r2, [pc, #12]	; (a8dc <is_allocated_channel+0x14>)
    a8ce:	6812      	ldr	r2, [r2, #0]
    a8d0:	4213      	tst	r3, r2
}
    a8d2:	bf14      	ite	ne
    a8d4:	2001      	movne	r0, #1
    a8d6:	2000      	moveq	r0, #0
    a8d8:	4770      	bx	lr
    a8da:	bf00      	nop
    a8dc:	20002824 	.word	0x20002824

0000a8e0 <channel_allocated_set>:
    a8e0:	2301      	movs	r3, #1
    a8e2:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @param[in] channel_num Specifies the channel to set the "allocated" indication.
 */
static void channel_allocated_set(nrf_ppi_channel_t channel)
{
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
    a8e6:	4a02      	ldr	r2, [pc, #8]	; (a8f0 <channel_allocated_set+0x10>)
    a8e8:	6813      	ldr	r3, [r2, #0]
    a8ea:	4303      	orrs	r3, r0
    a8ec:	6013      	str	r3, [r2, #0]
}
    a8ee:	4770      	bx	lr
    a8f0:	20002824 	.word	0x20002824

0000a8f4 <nrfx_ppi_channel_alloc>:
    group_allocated_clr_all();
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    a8f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a8f8:	4681      	mov	r9, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;

    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    a8fa:	2400      	movs	r4, #0
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
    a8fc:	4e15      	ldr	r6, [pc, #84]	; (a954 <nrfx_ppi_channel_alloc+0x60>)
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    a8fe:	f8df 805c 	ldr.w	r8, [pc, #92]	; a95c <nrfx_ppi_channel_alloc+0x68>
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    a902:	e011      	b.n	a928 <nrfx_ppi_channel_alloc+0x34>
    {
        nrf_ppi_channel_t channel = (nrf_ppi_channel_t)ch_idx;
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
    a904:	4620      	mov	r0, r4
    a906:	f7ff ffeb 	bl	a8e0 <channel_allocated_set>
            *p_channel = channel;
    a90a:	f889 4000 	strb.w	r4, [r9]
            err_code   = NRFX_SUCCESS;
    a90e:	f8df 8048 	ldr.w	r8, [pc, #72]	; a958 <nrfx_ppi_channel_alloc+0x64>
	__asm__ volatile(
    a912:	f387 8811 	msr	BASEPRI, r7
    a916:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();
        if (err_code == NRFX_SUCCESS)
    a91a:	4b0f      	ldr	r3, [pc, #60]	; (a958 <nrfx_ppi_channel_alloc+0x64>)
    a91c:	4598      	cmp	r8, r3
    a91e:	d016      	beq.n	a94e <nrfx_ppi_channel_alloc+0x5a>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", channel);
            break;
        }
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    a920:	ea26 0605 	bic.w	r6, r6, r5
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    a924:	3401      	adds	r4, #1
    a926:	b2e4      	uxtb	r4, r4
    a928:	b18e      	cbz	r6, a94e <nrfx_ppi_channel_alloc+0x5a>
	__asm__ volatile(
    a92a:	f04f 0320 	mov.w	r3, #32
    a92e:	f3ef 8711 	mrs	r7, BASEPRI
    a932:	f383 8812 	msr	BASEPRI_MAX, r3
    a936:	f3bf 8f6f 	isb	sy
    a93a:	2501      	movs	r5, #1
    a93c:	40a5      	lsls	r5, r4
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    a93e:	4235      	tst	r5, r6
    a940:	d0e7      	beq.n	a912 <nrfx_ppi_channel_alloc+0x1e>
    a942:	4620      	mov	r0, r4
    a944:	f7ff ffc0 	bl	a8c8 <is_allocated_channel>
    a948:	2800      	cmp	r0, #0
    a94a:	d1e2      	bne.n	a912 <nrfx_ppi_channel_alloc+0x1e>
    a94c:	e7da      	b.n	a904 <nrfx_ppi_channel_alloc+0x10>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    a94e:	4640      	mov	r0, r8
    a950:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a954:	000fffff 	.word	0x000fffff
    a958:	0bad0000 	.word	0x0bad0000
    a95c:	0bad0002 	.word	0x0bad0002

0000a960 <twi_process_error>:
} twi_control_block_t;

static twi_control_block_t m_cb[NRFX_TWI_ENABLED_COUNT];

static nrfx_err_t twi_process_error(uint32_t errorsrc)
{
    a960:	4603      	mov	r3, r0
    nrfx_err_t ret = NRFX_ERROR_INTERNAL;

    if (errorsrc & NRF_TWI_ERROR_OVERRUN)
    a962:	f010 0f01 	tst.w	r0, #1
    a966:	d108      	bne.n	a97a <twi_process_error+0x1a>
    nrfx_err_t ret = NRFX_ERROR_INTERNAL;
    a968:	4806      	ldr	r0, [pc, #24]	; (a984 <twi_process_error+0x24>)
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    }

    if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
    a96a:	f013 0f02 	tst.w	r3, #2
    a96e:	d000      	beq.n	a972 <twi_process_error+0x12>
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
    a970:	4805      	ldr	r0, [pc, #20]	; (a988 <twi_process_error+0x28>)
    }

    if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
    a972:	f013 0f04 	tst.w	r3, #4
    a976:	d102      	bne.n	a97e <twi_process_error+0x1e>
    {
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    }

    return ret;
}
    a978:	4770      	bx	lr
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
    a97a:	4804      	ldr	r0, [pc, #16]	; (a98c <twi_process_error+0x2c>)
    a97c:	e7f5      	b.n	a96a <twi_process_error+0xa>
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
    a97e:	4804      	ldr	r0, [pc, #16]	; (a990 <twi_process_error+0x30>)
    return ret;
    a980:	e7fa      	b.n	a978 <twi_process_error+0x18>
    a982:	bf00      	nop
    a984:	0bad0001 	.word	0x0bad0001
    a988:	0bae0001 	.word	0x0bae0001
    a98c:	0bae0000 	.word	0x0bae0000
    a990:	0bae0002 	.word	0x0bae0002

0000a994 <twi_tx_start_transfer>:
    return true;
}

static nrfx_err_t twi_tx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    a994:	b530      	push	{r4, r5, lr}
    a996:	b083      	sub	sp, #12
    a998:	4604      	mov	r4, r0
    a99a:	460d      	mov	r5, r1
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    a99c:	4b29      	ldr	r3, [pc, #164]	; (aa44 <twi_tx_start_transfer+0xb0>)
    a99e:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a9a0:	2300      	movs	r3, #0
    a9a2:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    a9a6:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    a9aa:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    a9ae:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    a9b2:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    a9b6:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    a9ba:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    a9be:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
    a9c2:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    nrf_twi_shorts_set(p_twi, 0);

    p_cb->bytes_transferred = 0;
    a9c6:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    a9c8:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    a9cc:	2301      	movs	r3, #1
    a9ce:	6203      	str	r3, [r0, #32]

    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
    a9d0:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
    a9d4:	2b01      	cmp	r3, #1
    a9d6:	d001      	beq.n	a9dc <twi_tx_start_transfer+0x48>
    a9d8:	2301      	movs	r3, #1
    a9da:	6083      	str	r3, [r0, #8]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTTX);
    }

    (void)twi_send_byte(p_twi, p_cb);
    a9dc:	4629      	mov	r1, r5
    a9de:	4620      	mov	r0, r4
    a9e0:	f009 fcca 	bl	14378 <twi_send_byte>

    if (p_cb->handler)
    a9e4:	682b      	ldr	r3, [r5, #0]
    a9e6:	b143      	cbz	r3, a9fa <twi_tx_start_transfer+0x66>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    a9e8:	f240 2386 	movw	r3, #646	; 0x286
    a9ec:	60ab      	str	r3, [r5, #8]
                         NRF_TWI_INT_ERROR_MASK     |
                         NRF_TWI_INT_TXDSENT_MASK   |
                         NRF_TWI_INT_RXDREADY_MASK;

        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    a9ee:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
    a9f0:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    nrfx_err_t ret_code = NRFX_SUCCESS;
    a9f4:	4814      	ldr	r0, [pc, #80]	; (aa48 <twi_tx_start_transfer+0xb4>)
            ret_code = NRFX_ERROR_INTERNAL;
        }

    }
    return ret_code;
}
    a9f6:	b003      	add	sp, #12
    a9f8:	bd30      	pop	{r4, r5, pc}
        while ((hw_timeout > 0) &&
    a9fa:	9b01      	ldr	r3, [sp, #4]
    a9fc:	2b00      	cmp	r3, #0
    a9fe:	dd08      	ble.n	aa12 <twi_tx_start_transfer+0x7e>
               twi_transfer(p_twi, p_cb))
    aa00:	4629      	mov	r1, r5
    aa02:	4620      	mov	r0, r4
    aa04:	f009 fd08 	bl	14418 <twi_transfer>
        while ((hw_timeout > 0) &&
    aa08:	b118      	cbz	r0, aa12 <twi_tx_start_transfer+0x7e>
            hw_timeout--;
    aa0a:	9b01      	ldr	r3, [sp, #4]
    aa0c:	3b01      	subs	r3, #1
    aa0e:	9301      	str	r3, [sp, #4]
    aa10:	e7f3      	b.n	a9fa <twi_tx_start_transfer+0x66>
        if (p_cb->error)
    aa12:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    aa16:	b13b      	cbz	r3, aa28 <twi_tx_start_transfer+0x94>
    uint32_t error_source = p_reg->ERRORSRC;
    aa18:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    aa1c:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
            if (errorsrc)
    aa20:	b170      	cbz	r0, aa40 <twi_tx_start_transfer+0xac>
                ret_code = twi_process_error(errorsrc);
    aa22:	f7ff ff9d 	bl	a960 <twi_process_error>
    aa26:	e000      	b.n	aa2a <twi_tx_start_transfer+0x96>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    aa28:	4807      	ldr	r0, [pc, #28]	; (aa48 <twi_tx_start_transfer+0xb4>)
        if (hw_timeout <= 0)
    aa2a:	9b01      	ldr	r3, [sp, #4]
    aa2c:	2b00      	cmp	r3, #0
    aa2e:	dce2      	bgt.n	a9f6 <twi_tx_start_transfer+0x62>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    aa30:	2300      	movs	r3, #0
    aa32:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    aa36:	2305      	movs	r3, #5
    aa38:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
            ret_code = NRFX_ERROR_INTERNAL;
    aa3c:	4803      	ldr	r0, [pc, #12]	; (aa4c <twi_tx_start_transfer+0xb8>)
    return ret_code;
    aa3e:	e7da      	b.n	a9f6 <twi_tx_start_transfer+0x62>
                ret_code = NRFX_ERROR_INTERNAL;
    aa40:	4802      	ldr	r0, [pc, #8]	; (aa4c <twi_tx_start_transfer+0xb8>)
    aa42:	e7f2      	b.n	aa2a <twi_tx_start_transfer+0x96>
    aa44:	000186a0 	.word	0x000186a0
    aa48:	0bad0000 	.word	0x0bad0000
    aa4c:	0bad0001 	.word	0x0bad0001

0000aa50 <twi_rx_start_transfer>:

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
    aa50:	b530      	push	{r4, r5, lr}
    aa52:	b083      	sub	sp, #12
    aa54:	4604      	mov	r4, r0
    aa56:	460d      	mov	r5, r1
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
    aa58:	4b2d      	ldr	r3, [pc, #180]	; (ab10 <twi_rx_start_transfer+0xc0>)
    aa5a:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    aa5c:	2300      	movs	r3, #0
    aa5e:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    aa62:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
    aa66:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
    aa6a:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
    aa6e:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    aa72:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    aa76:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
    aa7a:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
    aa7e:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
    aa80:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    aa84:	6a8b      	ldr	r3, [r1, #40]	; 0x28
    aa86:	2b01      	cmp	r3, #1
    aa88:	d015      	beq.n	aab6 <twi_rx_start_transfer+0x66>
    p_reg->SHORTS = mask;
    aa8a:	2301      	movs	r3, #1
    aa8c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    aa90:	2301      	movs	r3, #1
    aa92:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
    aa94:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
    aa98:	2b02      	cmp	r3, #2
    aa9a:	d001      	beq.n	aaa0 <twi_rx_start_transfer+0x50>
    aa9c:	2301      	movs	r3, #1
    aa9e:	6023      	str	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
    aaa0:	682b      	ldr	r3, [r5, #0]
    aaa2:	b183      	cbz	r3, aac6 <twi_rx_start_transfer+0x76>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
    aaa4:	f240 2386 	movw	r3, #646	; 0x286
    aaa8:	60ab      	str	r3, [r5, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    aaaa:	68ab      	ldr	r3, [r5, #8]
    p_reg->INTENSET = mask;
    aaac:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    nrfx_err_t ret_code = NRFX_SUCCESS;
    aab0:	4818      	ldr	r0, [pc, #96]	; (ab14 <twi_rx_start_transfer+0xc4>)
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
    aab2:	b003      	add	sp, #12
    aab4:	bd30      	pop	{r4, r5, pc}
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
    aab6:	6a0b      	ldr	r3, [r1, #32]
    aab8:	f013 0f40 	tst.w	r3, #64	; 0x40
    aabc:	d1e5      	bne.n	aa8a <twi_rx_start_transfer+0x3a>
    p_reg->SHORTS = mask;
    aabe:	2302      	movs	r3, #2
    aac0:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
}
    aac4:	e7e4      	b.n	aa90 <twi_rx_start_transfer+0x40>
        while ((hw_timeout > 0) &&
    aac6:	9b01      	ldr	r3, [sp, #4]
    aac8:	2b00      	cmp	r3, #0
    aaca:	dd08      	ble.n	aade <twi_rx_start_transfer+0x8e>
               twi_transfer(p_twi, p_cb))
    aacc:	4629      	mov	r1, r5
    aace:	4620      	mov	r0, r4
    aad0:	f009 fca2 	bl	14418 <twi_transfer>
        while ((hw_timeout > 0) &&
    aad4:	b118      	cbz	r0, aade <twi_rx_start_transfer+0x8e>
               hw_timeout--;
    aad6:	9b01      	ldr	r3, [sp, #4]
    aad8:	3b01      	subs	r3, #1
    aada:	9301      	str	r3, [sp, #4]
    aadc:	e7f3      	b.n	aac6 <twi_rx_start_transfer+0x76>
        if (p_cb->error)
    aade:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
    aae2:	b13b      	cbz	r3, aaf4 <twi_rx_start_transfer+0xa4>
    uint32_t error_source = p_reg->ERRORSRC;
    aae4:	f8d4 04c4 	ldr.w	r0, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
    aae8:	f8c4 04c4 	str.w	r0, [r4, #1220]	; 0x4c4
            if (errorsrc)
    aaec:	b170      	cbz	r0, ab0c <twi_rx_start_transfer+0xbc>
                ret_code = twi_process_error(errorsrc);
    aaee:	f7ff ff37 	bl	a960 <twi_process_error>
    aaf2:	e000      	b.n	aaf6 <twi_rx_start_transfer+0xa6>
    nrfx_err_t ret_code = NRFX_SUCCESS;
    aaf4:	4807      	ldr	r0, [pc, #28]	; (ab14 <twi_rx_start_transfer+0xc4>)
        if (hw_timeout <= 0)
    aaf6:	9b01      	ldr	r3, [sp, #4]
    aaf8:	2b00      	cmp	r3, #0
    aafa:	dcda      	bgt.n	aab2 <twi_rx_start_transfer+0x62>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    aafc:	2300      	movs	r3, #0
    aafe:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    ab02:	2305      	movs	r3, #5
    ab04:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
            ret_code = NRFX_ERROR_INTERNAL;
    ab08:	4803      	ldr	r0, [pc, #12]	; (ab18 <twi_rx_start_transfer+0xc8>)
    return ret_code;
    ab0a:	e7d2      	b.n	aab2 <twi_rx_start_transfer+0x62>
                ret_code = NRFX_ERROR_INTERNAL;
    ab0c:	4802      	ldr	r0, [pc, #8]	; (ab18 <twi_rx_start_transfer+0xc8>)
    ab0e:	e7f2      	b.n	aaf6 <twi_rx_start_transfer+0xa6>
    ab10:	000186a0 	.word	0x000186a0
    ab14:	0bad0000 	.word	0x0bad0000
    ab18:	0bad0001 	.word	0x0bad0001

0000ab1c <twi_xfer>:

static nrfx_err_t twi_xfer(NRF_TWI_Type               * p_twi,
                           twi_control_block_t        * p_cb,
                           nrfx_twi_xfer_desc_t const * p_xfer_desc,
                           uint32_t                     flags)
{
    ab1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ab1e:	4686      	mov	lr, r0
    ab20:	460c      	mov	r4, r1
    ab22:	4615      	mov	r5, r2
    ab24:	469c      	mov	ip, r3

    nrfx_err_t err_code = NRFX_SUCCESS;

    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    ab26:	f891 302d 	ldrb.w	r3, [r1, #45]	; 0x2d
    ab2a:	2b01      	cmp	r3, #1
    ab2c:	d027      	beq.n	ab7e <twi_xfer+0x62>
    {
        /* RX is invalid after TX suspend */
        return NRFX_ERROR_INVALID_STATE;
    }
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
    ab2e:	2b02      	cmp	r3, #2
    ab30:	d02a      	beq.n	ab88 <twi_xfer+0x6c>
    p_reg->INTENCLR = mask;
    ab32:	4b24      	ldr	r3, [pc, #144]	; (abc4 <twi_xfer+0xa8>)
    ab34:	f8ce 3308 	str.w	r3, [lr, #776]	; 0x308
    }

    /* Block TWI interrupts to ensure that function is not interrupted by TWI interrupt. */
    nrf_twi_int_disable(p_twi, NRF_TWI_ALL_INTS_MASK);

    if (p_cb->busy)
    ab38:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    ab3c:	bb4b      	cbnz	r3, ab92 <twi_xfer+0x76>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
    ab3e:	f01c 0f04 	tst.w	ip, #4
    ab42:	bf0c      	ite	eq
    ab44:	2301      	moveq	r3, #1
    ab46:	2300      	movne	r3, #0
    ab48:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    }

    p_cb->flags       = flags;
    ab4c:	f8c4 c020 	str.w	ip, [r4, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
    ab50:	f104 060c 	add.w	r6, r4, #12
    ab54:	462f      	mov	r7, r5
    ab56:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    ab58:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    ab5a:	683b      	ldr	r3, [r7, #0]
    ab5c:	6033      	str	r3, [r6, #0]
    p_cb->curr_length = p_xfer_desc->primary_length;
    ab5e:	686b      	ldr	r3, [r5, #4]
    ab60:	62a3      	str	r3, [r4, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
    ab62:	68eb      	ldr	r3, [r5, #12]
    ab64:	6263      	str	r3, [r4, #36]	; 0x24
    nrf_twi_address_set(p_twi, p_xfer_desc->address);
    ab66:	786b      	ldrb	r3, [r5, #1]
    p_reg->ADDRESS = address;
    ab68:	f8ce 3588 	str.w	r3, [lr, #1416]	; 0x588

    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
    ab6c:	782b      	ldrb	r3, [r5, #0]
    ab6e:	2b01      	cmp	r3, #1
    ab70:	d020      	beq.n	abb4 <twi_xfer+0x98>
    {
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    ab72:	b99b      	cbnz	r3, ab9c <twi_xfer+0x80>
    ab74:	f01c 0f20 	tst.w	ip, #32
    ab78:	d01a      	beq.n	abb0 <twi_xfer+0x94>
    ab7a:	2301      	movs	r3, #1
    ab7c:	e00f      	b.n	ab9e <twi_xfer+0x82>
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
    ab7e:	7812      	ldrb	r2, [r2, #0]
    ab80:	2a01      	cmp	r2, #1
    ab82:	d1d4      	bne.n	ab2e <twi_xfer+0x12>
        return NRFX_ERROR_INVALID_STATE;
    ab84:	4810      	ldr	r0, [pc, #64]	; (abc8 <twi_xfer+0xac>)
    ab86:	e012      	b.n	abae <twi_xfer+0x92>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
    ab88:	782b      	ldrb	r3, [r5, #0]
    ab8a:	2b01      	cmp	r3, #1
    ab8c:	d0d1      	beq.n	ab32 <twi_xfer+0x16>
        return NRFX_ERROR_INVALID_STATE;
    ab8e:	480e      	ldr	r0, [pc, #56]	; (abc8 <twi_xfer+0xac>)
    ab90:	e00d      	b.n	abae <twi_xfer+0x92>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
    ab92:	68a3      	ldr	r3, [r4, #8]
    p_reg->INTENSET = mask;
    ab94:	f8ce 3304 	str.w	r3, [lr, #772]	; 0x304
        return err_code;
    ab98:	480c      	ldr	r0, [pc, #48]	; (abcc <twi_xfer+0xb0>)
    ab9a:	e008      	b.n	abae <twi_xfer+0x92>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    ab9c:	2301      	movs	r3, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
    ab9e:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

        err_code = twi_tx_start_transfer(p_twi, p_cb);
    aba2:	4621      	mov	r1, r4
    aba4:	4670      	mov	r0, lr
    aba6:	f7ff fef5 	bl	a994 <twi_tx_start_transfer>
    }
    else
    {
        err_code = twi_rx_start_transfer(p_twi, p_cb);
    }
    if (p_cb->handler == NULL)
    abaa:	6823      	ldr	r3, [r4, #0]
    abac:	b13b      	cbz	r3, abbe <twi_xfer+0xa2>
    {
        p_cb->busy = false;
    }
    return err_code;
}
    abae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
    abb0:	2300      	movs	r3, #0
    abb2:	e7f4      	b.n	ab9e <twi_xfer+0x82>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
    abb4:	4621      	mov	r1, r4
    abb6:	4670      	mov	r0, lr
    abb8:	f7ff ff4a 	bl	aa50 <twi_rx_start_transfer>
    abbc:	e7f5      	b.n	abaa <twi_xfer+0x8e>
        p_cb->busy = false;
    abbe:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
    abc2:	e7f4      	b.n	abae <twi_xfer+0x92>
    abc4:	00044286 	.word	0x00044286
    abc8:	0bad0005 	.word	0x0bad0005
    abcc:	0bad000b 	.word	0x0bad000b

0000abd0 <nrfx_twi_init>:
{
    abd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    abd2:	7904      	ldrb	r4, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    abd4:	ebc4 1604 	rsb	r6, r4, r4, lsl #4
    abd8:	4d2a      	ldr	r5, [pc, #168]	; (ac84 <nrfx_twi_init+0xb4>)
    abda:	eb05 0586 	add.w	r5, r5, r6, lsl #2
    abde:	f895 502e 	ldrb.w	r5, [r5, #46]	; 0x2e
    abe2:	2d00      	cmp	r5, #0
    abe4:	d14c      	bne.n	ac80 <nrfx_twi_init+0xb0>
    p_cb->handler         = event_handler;
    abe6:	4e27      	ldr	r6, [pc, #156]	; (ac84 <nrfx_twi_init+0xb4>)
    abe8:	ebc4 1704 	rsb	r7, r4, r4, lsl #4
    abec:	eb06 0587 	add.w	r5, r6, r7, lsl #2
    abf0:	f846 2027 	str.w	r2, [r6, r7, lsl #2]
    p_cb->p_context       = p_context;
    abf4:	606b      	str	r3, [r5, #4]
    p_cb->int_mask        = 0;
    abf6:	2300      	movs	r3, #0
    abf8:	60ab      	str	r3, [r5, #8]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
    abfa:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
    p_cb->repeated        = false;
    abfe:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
    p_cb->busy            = false;
    ac02:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
    ac06:	7b4b      	ldrb	r3, [r1, #13]
    ac08:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
    TWI_PIN_INIT(p_config->scl);
    ac0c:	680b      	ldr	r3, [r1, #0]
    *p_pin = pin_number & 0x1F;
    ac0e:	f003 051f 	and.w	r5, r3, #31
    return pin_number >> 5;
    ac12:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    ac14:	2b01      	cmp	r3, #1
    ac16:	d02f      	beq.n	ac78 <nrfx_twi_init+0xa8>
        case 0: return NRF_P0;
    ac18:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    ac1c:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    ac20:	f240 650c 	movw	r5, #1548	; 0x60c
    ac24:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
    TWI_PIN_INIT(p_config->sda);
    ac28:	684b      	ldr	r3, [r1, #4]
    *p_pin = pin_number & 0x1F;
    ac2a:	f003 051f 	and.w	r5, r3, #31
    return pin_number >> 5;
    ac2e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    ac30:	2b01      	cmp	r3, #1
    ac32:	d023      	beq.n	ac7c <nrfx_twi_init+0xac>
        case 0: return NRF_P0;
    ac34:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    ac38:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    ac3c:	f240 650c 	movw	r5, #1548	; 0x60c
    ac40:	f846 5023 	str.w	r5, [r6, r3, lsl #2]
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    ac44:	6803      	ldr	r3, [r0, #0]
    nrf_twi_pins_set(p_twi, p_config->scl, p_config->sda);
    ac46:	680e      	ldr	r6, [r1, #0]
    ac48:	684d      	ldr	r5, [r1, #4]
    p_reg->PSEL.SCL = scl_pin;
    ac4a:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
    ac4e:	f8c3 550c 	str.w	r5, [r3, #1292]	; 0x50c
        (nrf_twi_frequency_t)p_config->frequency);
    ac52:	6889      	ldr	r1, [r1, #8]
    p_reg->FREQUENCY = frequency;
    ac54:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
    if (p_cb->handler)
    ac58:	b122      	cbz	r2, ac64 <nrfx_twi_init+0x94>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
    ac5a:	6800      	ldr	r0, [r0, #0]
    ac5c:	f340 3007 	sbfx	r0, r0, #12, #8
    ac60:	f7fa fdc6 	bl	57f0 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    ac64:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
    ac68:	4b06      	ldr	r3, [pc, #24]	; (ac84 <nrfx_twi_init+0xb4>)
    ac6a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
    ac6e:	2301      	movs	r3, #1
    ac70:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
    return err_code;
    ac74:	4804      	ldr	r0, [pc, #16]	; (ac88 <nrfx_twi_init+0xb8>)
}
    ac76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
    ac78:	4e04      	ldr	r6, [pc, #16]	; (ac8c <nrfx_twi_init+0xbc>)
    ac7a:	e7cf      	b.n	ac1c <nrfx_twi_init+0x4c>
    ac7c:	4e03      	ldr	r6, [pc, #12]	; (ac8c <nrfx_twi_init+0xbc>)
    ac7e:	e7db      	b.n	ac38 <nrfx_twi_init+0x68>
        return err_code;
    ac80:	4803      	ldr	r0, [pc, #12]	; (ac90 <nrfx_twi_init+0xc0>)
    ac82:	e7f8      	b.n	ac76 <nrfx_twi_init+0xa6>
    ac84:	20002828 	.word	0x20002828
    ac88:	0bad0000 	.word	0x0bad0000
    ac8c:	50000300 	.word	0x50000300
    ac90:	0bad0005 	.word	0x0bad0005

0000ac94 <nrfx_twi_enable>:
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    ac94:	7903      	ldrb	r3, [r0, #4]
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    ac96:	6802      	ldr	r2, [r0, #0]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
    ac98:	2105      	movs	r1, #5
    ac9a:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    ac9e:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    aca2:	4a03      	ldr	r2, [pc, #12]	; (acb0 <nrfx_twi_enable+0x1c>)
    aca4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    aca8:	2202      	movs	r2, #2
    acaa:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
    acae:	4770      	bx	lr
    acb0:	20002828 	.word	0x20002828

0000acb4 <nrfx_twi_disable>:
{
    acb4:	b410      	push	{r4}
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    acb6:	7903      	ldrb	r3, [r0, #4]
    NRF_TWI_Type * p_twi = p_instance->p_twi;
    acb8:	6802      	ldr	r2, [r0, #0]
    p_reg->INTENCLR = mask;
    acba:	490c      	ldr	r1, [pc, #48]	; (acec <nrfx_twi_disable+0x38>)
    acbc:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
    acc0:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
    acc4:	f021 0103 	bic.w	r1, r1, #3
    acc8:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
    accc:	2000      	movs	r0, #0
    acce:	f8c2 0500 	str.w	r0, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    acd2:	4a07      	ldr	r2, [pc, #28]	; (acf0 <nrfx_twi_disable+0x3c>)
    acd4:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    acd8:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    acdc:	2401      	movs	r4, #1
    acde:	f881 402e 	strb.w	r4, [r1, #46]	; 0x2e
    p_cb->busy = false;
    ace2:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
}
    ace6:	bc10      	pop	{r4}
    ace8:	4770      	bx	lr
    acea:	bf00      	nop
    acec:	00044286 	.word	0x00044286
    acf0:	20002828 	.word	0x20002828

0000acf4 <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
    acf4:	b510      	push	{r4, lr}
    acf6:	4613      	mov	r3, r2

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    acf8:	7904      	ldrb	r4, [r0, #4]
    acfa:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
    acfe:	460a      	mov	r2, r1
    ad00:	4903      	ldr	r1, [pc, #12]	; (ad10 <nrfx_twi_xfer+0x1c>)
    ad02:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    ad06:	6800      	ldr	r0, [r0, #0]
    ad08:	f7ff ff08 	bl	ab1c <twi_xfer>
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    ad0c:	bd10      	pop	{r4, pc}
    ad0e:	bf00      	nop
    ad10:	20002828 	.word	0x20002828

0000ad14 <nrfx_twi_0_irq_handler>:

}

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
    ad14:	b508      	push	{r3, lr}
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
    ad16:	4902      	ldr	r1, [pc, #8]	; (ad20 <nrfx_twi_0_irq_handler+0xc>)
    ad18:	4802      	ldr	r0, [pc, #8]	; (ad24 <nrfx_twi_0_irq_handler+0x10>)
    ad1a:	f009 fbf9 	bl	14510 <twi_irq_handler>
}
    ad1e:	bd08      	pop	{r3, pc}
    ad20:	20002828 	.word	0x20002828
    ad24:	40003000 	.word	0x40003000

0000ad28 <nrf52_errata_166>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    ad28:	4b03      	ldr	r3, [pc, #12]	; (ad38 <nrf52_errata_166+0x10>)
    ad2a:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    ad2c:	2b08      	cmp	r3, #8
    ad2e:	d001      	beq.n	ad34 <nrf52_errata_166+0xc>
        return false;
    ad30:	2000      	movs	r0, #0
    ad32:	4770      	bx	lr
                        return true;
    ad34:	2001      	movs	r0, #1
}
    ad36:	4770      	bx	lr
    ad38:	10000130 	.word	0x10000130

0000ad3c <nrf52_errata_171>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    ad3c:	4b03      	ldr	r3, [pc, #12]	; (ad4c <nrf52_errata_171+0x10>)
    ad3e:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    ad40:	2b08      	cmp	r3, #8
    ad42:	d001      	beq.n	ad48 <nrf52_errata_171+0xc>
        return false;
    ad44:	2000      	movs	r0, #0
    ad46:	4770      	bx	lr
                        return true;
    ad48:	2001      	movs	r0, #1
}
    ad4a:	4770      	bx	lr
    ad4c:	10000130 	.word	0x10000130

0000ad50 <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    ad50:	4b08      	ldr	r3, [pc, #32]	; (ad74 <nrf52_errata_187+0x24>)
    ad52:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    ad54:	3304      	adds	r3, #4
    ad56:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    ad58:	2a08      	cmp	r2, #8
    ad5a:	d001      	beq.n	ad60 <nrf52_errata_187+0x10>
        return false;
    ad5c:	2000      	movs	r0, #0
    ad5e:	4770      	bx	lr
                switch(var2)
    ad60:	2b00      	cmp	r3, #0
    ad62:	d804      	bhi.n	ad6e <nrf52_errata_187+0x1e>
    ad64:	e8df f003 	tbb	[pc, r3]
    ad68:	01          	.byte	0x01
    ad69:	00          	.byte	0x00
            if (var1 == 0x08)
    ad6a:	2000      	movs	r0, #0
    ad6c:	4770      	bx	lr
                        return true;
    ad6e:	2001      	movs	r0, #1
}
    ad70:	4770      	bx	lr
    ad72:	bf00      	nop
    ad74:	10000130 	.word	0x10000130

0000ad78 <nrf52_errata_199>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    ad78:	4b03      	ldr	r3, [pc, #12]	; (ad88 <nrf52_errata_199+0x10>)
    ad7a:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    ad7c:	2b08      	cmp	r3, #8
    ad7e:	d001      	beq.n	ad84 <nrf52_errata_199+0xc>
        return false;
    ad80:	2000      	movs	r0, #0
    ad82:	4770      	bx	lr
                        return true;
    ad84:	2001      	movs	r0, #1
}
    ad86:	4770      	bx	lr
    ad88:	10000130 	.word	0x10000130

0000ad8c <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
    ad8c:	b500      	push	{lr}
    ad8e:	b083      	sub	sp, #12
    m_bus_suspend = false;
    ad90:	2300      	movs	r3, #0
    ad92:	4a09      	ldr	r2, [pc, #36]	; (adb8 <ev_usbreset_handler+0x2c>)
    ad94:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    ad96:	4a09      	ldr	r2, [pc, #36]	; (adbc <ev_usbreset_handler+0x30>)
    ad98:	7013      	strb	r3, [r2, #0]

    const nrfx_usbd_evt_t evt = {
    ad9a:	f8ad 3005 	strh.w	r3, [sp, #5]
    ad9e:	f88d 3007 	strb.w	r3, [sp, #7]
    ada2:	2301      	movs	r3, #1
    ada4:	f88d 3004 	strb.w	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    ada8:	4b05      	ldr	r3, [pc, #20]	; (adc0 <ev_usbreset_handler+0x34>)
    adaa:	681b      	ldr	r3, [r3, #0]
    adac:	a801      	add	r0, sp, #4
    adae:	4798      	blx	r3
}
    adb0:	b003      	add	sp, #12
    adb2:	f85d fb04 	ldr.w	pc, [sp], #4
    adb6:	bf00      	nop
    adb8:	20002fc9 	.word	0x20002fc9
    adbc:	20002fcc 	.word	0x20002fcc
    adc0:	20002a64 	.word	0x20002a64

0000adc4 <ev_sof_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }

static void ev_sof_handler(void)
{
    adc4:	b500      	push	{lr}
    adc6:	b083      	sub	sp, #12
    nrfx_usbd_evt_t evt =  {
    adc8:	2300      	movs	r3, #0
    adca:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
    adce:	4b12      	ldr	r3, [pc, #72]	; (ae18 <ev_sof_handler+0x54>)
    add0:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    add4:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
    add8:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    if (size_isoout == 0)
    addc:	b15b      	cbz	r3, adf6 <ev_sof_handler+0x32>
    else if ((size_isoout & USBD_SIZE_ISOOUT_ZERO_Msk) ==
    adde:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    ade2:	d115      	bne.n	ae10 <ev_sof_handler+0x4c>
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
    };

    /* Process isochronous endpoints */
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    if (nrf_usbd_episoout_size_get(NRF_USBD, NRFX_USBD_EPOUT8) != NRF_USBD_EPISOOUT_NO_DATA)
    ade4:	f1b3 3fff 	cmp.w	r3, #4294967295
    ade8:	d002      	beq.n	adf0 <ev_sof_handler+0x2c>
    {
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    adea:	f04f 2101 	mov.w	r1, #16777472	; 0x1000100
    adee:	e004      	b.n	adfa <ev_sof_handler+0x36>
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    adf0:	f44f 7180 	mov.w	r1, #256	; 0x100
    adf4:	e001      	b.n	adfa <ev_sof_handler+0x36>
    adf6:	f44f 7180 	mov.w	r1, #256	; 0x100
    }
    m_ep_ready |= iso_ready_mask;
    adfa:	4a08      	ldr	r2, [pc, #32]	; (ae1c <ev_sof_handler+0x58>)
    adfc:	6813      	ldr	r3, [r2, #0]
    adfe:	430b      	orrs	r3, r1
    ae00:	6013      	str	r3, [r2, #0]

    m_event_handler(&evt);
    ae02:	4b07      	ldr	r3, [pc, #28]	; (ae20 <ev_sof_handler+0x5c>)
    ae04:	681b      	ldr	r3, [r3, #0]
    ae06:	a801      	add	r0, sp, #4
    ae08:	4798      	blx	r3
}
    ae0a:	b003      	add	sp, #12
    ae0c:	f85d fb04 	ldr.w	pc, [sp], #4
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    ae10:	f04f 2101 	mov.w	r1, #16777472	; 0x1000100
    ae14:	e7f1      	b.n	adfa <ev_sof_handler+0x36>
    ae16:	bf00      	nop
    ae18:	40027000 	.word	0x40027000
    ae1c:	20002940 	.word	0x20002940
    ae20:	20002a64 	.word	0x20002a64

0000ae24 <ev_usbevent_handler>:
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
    ae24:	b510      	push	{r4, lr}
    ae26:	b082      	sub	sp, #8
    return p_reg->EVENTCAUSE;
    ae28:	4b23      	ldr	r3, [pc, #140]	; (aeb8 <ev_usbevent_handler+0x94>)
    ae2a:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
    ae2e:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    ae32:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    ae36:	f414 7f80 	tst.w	r4, #256	; 0x100
    ae3a:	d00e      	beq.n	ae5a <ev_usbevent_handler+0x36>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
    ae3c:	4b1f      	ldr	r3, [pc, #124]	; (aebc <ev_usbevent_handler+0x98>)
    ae3e:	2201      	movs	r2, #1
    ae40:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    ae42:	2300      	movs	r3, #0
    ae44:	f8ad 3005 	strh.w	r3, [sp, #5]
    ae48:	f88d 3007 	strb.w	r3, [sp, #7]
    ae4c:	2302      	movs	r3, #2
    ae4e:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
    ae52:	4b1b      	ldr	r3, [pc, #108]	; (aec0 <ev_usbevent_handler+0x9c>)
    ae54:	681b      	ldr	r3, [r3, #0]
    ae56:	a801      	add	r0, sp, #4
    ae58:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    ae5a:	f414 7f00 	tst.w	r4, #512	; 0x200
    ae5e:	d00d      	beq.n	ae7c <ev_usbevent_handler+0x58>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
    ae60:	2300      	movs	r3, #0
    ae62:	4a16      	ldr	r2, [pc, #88]	; (aebc <ev_usbevent_handler+0x98>)
    ae64:	7013      	strb	r3, [r2, #0]
        const nrfx_usbd_evt_t evt = {
    ae66:	f8ad 3005 	strh.w	r3, [sp, #5]
    ae6a:	f88d 3007 	strb.w	r3, [sp, #7]
    ae6e:	2303      	movs	r3, #3
    ae70:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
    ae74:	4b12      	ldr	r3, [pc, #72]	; (aec0 <ev_usbevent_handler+0x9c>)
    ae76:	681b      	ldr	r3, [r3, #0]
    ae78:	a801      	add	r0, sp, #4
    ae7a:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    ae7c:	f414 6f80 	tst.w	r4, #1024	; 0x400
    ae80:	d017      	beq.n	aeb2 <ev_usbevent_handler+0x8e>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
    ae82:	4b0e      	ldr	r3, [pc, #56]	; (aebc <ev_usbevent_handler+0x98>)
    ae84:	781b      	ldrb	r3, [r3, #0]
    ae86:	b1a3      	cbz	r3, aeb2 <ev_usbevent_handler+0x8e>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
    ae88:	2300      	movs	r3, #0
    ae8a:	4a0c      	ldr	r2, [pc, #48]	; (aebc <ev_usbevent_handler+0x98>)
    ae8c:	7013      	strb	r3, [r2, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    ae8e:	2101      	movs	r1, #1
    ae90:	4a09      	ldr	r2, [pc, #36]	; (aeb8 <ev_usbevent_handler+0x94>)
    ae92:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    ae96:	3258      	adds	r2, #88	; 0x58
    ae98:	6011      	str	r1, [r2, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    ae9a:	6812      	ldr	r2, [r2, #0]

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
    ae9c:	f8ad 3005 	strh.w	r3, [sp, #5]
    aea0:	f88d 3007 	strb.w	r3, [sp, #7]
    aea4:	2304      	movs	r3, #4
    aea6:	f88d 3004 	strb.w	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
    aeaa:	4b05      	ldr	r3, [pc, #20]	; (aec0 <ev_usbevent_handler+0x9c>)
    aeac:	681b      	ldr	r3, [r3, #0]
    aeae:	a801      	add	r0, sp, #4
    aeb0:	4798      	blx	r3
        }
    }
}
    aeb2:	b002      	add	sp, #8
    aeb4:	bd10      	pop	{r4, pc}
    aeb6:	bf00      	nop
    aeb8:	40027000 	.word	0x40027000
    aebc:	20002fc9 	.word	0x20002fc9
    aec0:	20002a64 	.word	0x20002a64

0000aec4 <usbd_enable>:

/**
 * @brief Enable USBD peripheral.
 */
static void usbd_enable(void)
{
    aec4:	b510      	push	{r4, lr}
}

/* Errata: USB cannot be enabled. **/
static inline bool nrfx_usbd_errata_187(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    aec6:	f7ff ff43 	bl	ad50 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    aeca:	b1b8      	cbz	r0, aefc <usbd_enable+0x38>
    aecc:	f04f 0220 	mov.w	r2, #32
    aed0:	f3ef 8311 	mrs	r3, BASEPRI
    aed4:	f382 8812 	msr	BASEPRI_MAX, r2
    aed8:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    aedc:	4a41      	ldr	r2, [pc, #260]	; (afe4 <usbd_enable+0x120>)
    aede:	6812      	ldr	r2, [r2, #0]
    aee0:	2a00      	cmp	r2, #0
    aee2:	d16f      	bne.n	afc4 <usbd_enable+0x100>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    aee4:	4a3f      	ldr	r2, [pc, #252]	; (afe4 <usbd_enable+0x120>)
    aee6:	f249 3175 	movw	r1, #37749	; 0x9375
    aeea:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    aeec:	483e      	ldr	r0, [pc, #248]	; (afe8 <usbd_enable+0x124>)
    aeee:	2403      	movs	r4, #3
    aef0:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    aef2:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    aef4:	f383 8811 	msr	BASEPRI, r3
    aef8:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_171();
    aefc:	f7ff ff1e 	bl	ad3c <nrf52_errata_171>
    {
        usbd_errata_187_211_begin();
    }

    if (nrfx_usbd_errata_171())
    af00:	b1b8      	cbz	r0, af32 <usbd_enable+0x6e>
	__asm__ volatile(
    af02:	f04f 0220 	mov.w	r2, #32
    af06:	f3ef 8311 	mrs	r3, BASEPRI
    af0a:	f382 8812 	msr	BASEPRI_MAX, r2
    af0e:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    af12:	4a34      	ldr	r2, [pc, #208]	; (afe4 <usbd_enable+0x120>)
    af14:	6812      	ldr	r2, [r2, #0]
    af16:	2a00      	cmp	r2, #0
    af18:	d158      	bne.n	afcc <usbd_enable+0x108>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    af1a:	4a32      	ldr	r2, [pc, #200]	; (afe4 <usbd_enable+0x120>)
    af1c:	f249 3175 	movw	r1, #37749	; 0x9375
    af20:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    af22:	4832      	ldr	r0, [pc, #200]	; (afec <usbd_enable+0x128>)
    af24:	24c0      	movs	r4, #192	; 0xc0
    af26:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    af28:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    af2a:	f383 8811 	msr	BASEPRI, r3
    af2e:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    af32:	4b2f      	ldr	r3, [pc, #188]	; (aff0 <usbd_enable+0x12c>)
    af34:	2201      	movs	r2, #1
    af36:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    af3a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
    af3e:	4b2c      	ldr	r3, [pc, #176]	; (aff0 <usbd_enable+0x12c>)
    af40:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
    af44:	f413 6f00 	tst.w	r3, #2048	; 0x800
    af48:	d0f9      	beq.n	af3e <usbd_enable+0x7a>
    p_reg->EVENTCAUSE = flags;
    af4a:	4b29      	ldr	r3, [pc, #164]	; (aff0 <usbd_enable+0x12c>)
    af4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    af50:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    af54:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    af58:	f7ff fef0 	bl	ad3c <nrf52_errata_171>
    nrf_usbd_enable(NRF_USBD);

    /* Waiting for peripheral to enable, this should take a few us */
    usbd_eventcause_wait_and_clear(NRF_USBD_EVENTCAUSE_READY_MASK);

    if (nrfx_usbd_errata_171())
    af5c:	b1b8      	cbz	r0, af8e <usbd_enable+0xca>
	__asm__ volatile(
    af5e:	f04f 0220 	mov.w	r2, #32
    af62:	f3ef 8311 	mrs	r3, BASEPRI
    af66:	f382 8812 	msr	BASEPRI_MAX, r2
    af6a:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    af6e:	4a1d      	ldr	r2, [pc, #116]	; (afe4 <usbd_enable+0x120>)
    af70:	6812      	ldr	r2, [r2, #0]
    af72:	2a00      	cmp	r2, #0
    af74:	d12e      	bne.n	afd4 <usbd_enable+0x110>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    af76:	4a1b      	ldr	r2, [pc, #108]	; (afe4 <usbd_enable+0x120>)
    af78:	f249 3175 	movw	r1, #37749	; 0x9375
    af7c:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    af7e:	481b      	ldr	r0, [pc, #108]	; (afec <usbd_enable+0x128>)
    af80:	2400      	movs	r4, #0
    af82:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    af84:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    af86:	f383 8811 	msr	BASEPRI, r3
    af8a:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    af8e:	f7ff fedf 	bl	ad50 <nrf52_errata_187>
    {
        usbd_errata_171_end();
    }

    if (nrfx_usbd_errata_187())
    af92:	b1b0      	cbz	r0, afc2 <usbd_enable+0xfe>
	__asm__ volatile(
    af94:	f04f 0220 	mov.w	r2, #32
    af98:	f3ef 8311 	mrs	r3, BASEPRI
    af9c:	f382 8812 	msr	BASEPRI_MAX, r2
    afa0:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    afa4:	4a0f      	ldr	r2, [pc, #60]	; (afe4 <usbd_enable+0x120>)
    afa6:	6812      	ldr	r2, [r2, #0]
    afa8:	b9c2      	cbnz	r2, afdc <usbd_enable+0x118>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    afaa:	4a0e      	ldr	r2, [pc, #56]	; (afe4 <usbd_enable+0x120>)
    afac:	f249 3175 	movw	r1, #37749	; 0x9375
    afb0:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    afb2:	480d      	ldr	r0, [pc, #52]	; (afe8 <usbd_enable+0x124>)
    afb4:	2400      	movs	r4, #0
    afb6:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    afb8:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    afba:	f383 8811 	msr	BASEPRI, r3
    afbe:	f3bf 8f6f 	isb	sy
    {
        usbd_errata_187_211_end();
    }
}
    afc2:	bd10      	pop	{r4, pc}
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    afc4:	4a08      	ldr	r2, [pc, #32]	; (afe8 <usbd_enable+0x124>)
    afc6:	2103      	movs	r1, #3
    afc8:	6011      	str	r1, [r2, #0]
    afca:	e793      	b.n	aef4 <usbd_enable+0x30>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    afcc:	4a07      	ldr	r2, [pc, #28]	; (afec <usbd_enable+0x128>)
    afce:	21c0      	movs	r1, #192	; 0xc0
    afd0:	6011      	str	r1, [r2, #0]
    afd2:	e7aa      	b.n	af2a <usbd_enable+0x66>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    afd4:	4a05      	ldr	r2, [pc, #20]	; (afec <usbd_enable+0x128>)
    afd6:	2100      	movs	r1, #0
    afd8:	6011      	str	r1, [r2, #0]
    afda:	e7d4      	b.n	af86 <usbd_enable+0xc2>
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    afdc:	4a02      	ldr	r2, [pc, #8]	; (afe8 <usbd_enable+0x124>)
    afde:	2100      	movs	r1, #0
    afe0:	6011      	str	r1, [r2, #0]
    afe2:	e7ea      	b.n	afba <usbd_enable+0xf6>
    afe4:	4006ec00 	.word	0x4006ec00
    afe8:	4006ed14 	.word	0x4006ed14
    afec:	4006ec14 	.word	0x4006ec14
    aff0:	40027000 	.word	0x40027000

0000aff4 <usbd_ep_data_handler>:
{
    aff4:	b530      	push	{r4, r5, lr}
    aff6:	b083      	sub	sp, #12
    aff8:	4604      	mov	r4, r0
    affa:	460d      	mov	r5, r1
    m_ep_ready |= (1U << bitpos);
    affc:	2301      	movs	r3, #1
    affe:	fa03 f201 	lsl.w	r2, r3, r1
    b002:	495c      	ldr	r1, [pc, #368]	; (b174 <usbd_ep_data_handler+0x180>)
    b004:	680b      	ldr	r3, [r1, #0]
    b006:	4313      	orrs	r3, r2
    b008:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    b00a:	f010 0f80 	tst.w	r0, #128	; 0x80
    b00e:	d114      	bne.n	b03a <usbd_ep_data_handler+0x46>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    b010:	4b59      	ldr	r3, [pc, #356]	; (b178 <usbd_ep_data_handler+0x184>)
    b012:	6819      	ldr	r1, [r3, #0]
    b014:	fa21 f505 	lsr.w	r5, r1, r5
    b018:	f015 0f01 	tst.w	r5, #1
    b01c:	d10b      	bne.n	b036 <usbd_ep_data_handler+0x42>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    b01e:	2306      	movs	r3, #6
    b020:	f88d 3004 	strb.w	r3, [sp, #4]
    b024:	f88d 0006 	strb.w	r0, [sp, #6]
    b028:	2301      	movs	r3, #1
    b02a:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    b02e:	4b53      	ldr	r3, [pc, #332]	; (b17c <usbd_ep_data_handler+0x188>)
    b030:	681b      	ldr	r3, [r3, #0]
    b032:	a801      	add	r0, sp, #4
    b034:	4798      	blx	r3
}
    b036:	b003      	add	sp, #12
    b038:	bd30      	pop	{r4, r5, pc}
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    b03a:	f000 030f 	and.w	r3, r0, #15
    b03e:	4a50      	ldr	r2, [pc, #320]	; (b180 <usbd_ep_data_handler+0x18c>)
    b040:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    b044:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    b048:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    b04c:	681a      	ldr	r2, [r3, #0]
    if (ret)
    b04e:	b112      	cbz	r2, b056 <usbd_ep_data_handler+0x62>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    b050:	2100      	movs	r1, #0
    b052:	6019      	str	r1, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    b054:	681b      	ldr	r3, [r3, #0]
        if (nrf_usbd_event_get_and_clear(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)))
    b056:	2a00      	cmp	r2, #0
    b058:	d047      	beq.n	b0ea <usbd_ep_data_handler+0xf6>
            if (ep != NRFX_USBD_EPIN0)
    b05a:	2c80      	cmp	r4, #128	; 0x80
    b05c:	d05b      	beq.n	b116 <usbd_ep_data_handler+0x122>
}

/* Errata: USBD cannot receive tasks during DMA. **/
static inline bool nrfx_usbd_errata_199(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
    b05e:	f7ff fe8b 	bl	ad78 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    b062:	b110      	cbz	r0, b06a <usbd_ep_data_handler+0x76>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    b064:	4b47      	ldr	r3, [pc, #284]	; (b184 <usbd_ep_data_handler+0x190>)
    b066:	2200      	movs	r2, #0
    b068:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    b06a:	4b47      	ldr	r3, [pc, #284]	; (b188 <usbd_ep_data_handler+0x194>)
    b06c:	2200      	movs	r2, #0
    b06e:	701a      	strb	r2, [r3, #0]
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    b070:	b263      	sxtb	r3, r4
    b072:	4293      	cmp	r3, r2
    b074:	db21      	blt.n	b0ba <usbd_ep_data_handler+0xc6>
    b076:	4945      	ldr	r1, [pc, #276]	; (b18c <usbd_ep_data_handler+0x198>)
        NRF_USBD_EP_NR_GET(ep));
    b078:	f004 020f 	and.w	r2, r4, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    b07c:	0110      	lsls	r0, r2, #4
    b07e:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    b082:	7b92      	ldrb	r2, [r2, #14]
    b084:	2a03      	cmp	r2, #3
    b086:	d01a      	beq.n	b0be <usbd_ep_data_handler+0xca>
    else if (p_state->handler.feeder == NULL)
    b088:	580a      	ldr	r2, [r1, r0]
    b08a:	bb72      	cbnz	r2, b0ea <usbd_ep_data_handler+0xf6>
    return NRFX_USBD_EP_BITPOS(ep);
    b08c:	2b00      	cmp	r3, #0
    b08e:	db00      	blt.n	b092 <usbd_ep_data_handler+0x9e>
    b090:	2210      	movs	r2, #16
    b092:	f003 030f 	and.w	r3, r3, #15
    b096:	4413      	add	r3, r2
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    b098:	2201      	movs	r2, #1
    b09a:	fa02 f303 	lsl.w	r3, r2, r3
    b09e:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b0a0:	4a35      	ldr	r2, [pc, #212]	; (b178 <usbd_ep_data_handler+0x184>)
    b0a2:	f3bf 8f5b 	dmb	ish
    b0a6:	e852 1f00 	ldrex	r1, [r2]
    b0aa:	4019      	ands	r1, r3
    b0ac:	e842 1000 	strex	r0, r1, [r2]
    b0b0:	2800      	cmp	r0, #0
    b0b2:	d1f8      	bne.n	b0a6 <usbd_ep_data_handler+0xb2>
    b0b4:	f3bf 8f5b 	dmb	ish
}
    b0b8:	e017      	b.n	b0ea <usbd_ep_data_handler+0xf6>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    b0ba:	4935      	ldr	r1, [pc, #212]	; (b190 <usbd_ep_data_handler+0x19c>)
    b0bc:	e7dc      	b.n	b078 <usbd_ep_data_handler+0x84>
    return NRFX_USBD_EP_BITPOS(ep);
    b0be:	2b00      	cmp	r3, #0
    b0c0:	db27      	blt.n	b112 <usbd_ep_data_handler+0x11e>
    b0c2:	2210      	movs	r2, #16
    b0c4:	f003 030f 	and.w	r3, r3, #15
    b0c8:	4413      	add	r3, r2
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    b0ca:	2201      	movs	r2, #1
    b0cc:	fa02 f303 	lsl.w	r3, r2, r3
    b0d0:	43db      	mvns	r3, r3
    b0d2:	4a29      	ldr	r2, [pc, #164]	; (b178 <usbd_ep_data_handler+0x184>)
    b0d4:	f3bf 8f5b 	dmb	ish
    b0d8:	e852 1f00 	ldrex	r1, [r2]
    b0dc:	4019      	ands	r1, r3
    b0de:	e842 1000 	strex	r0, r1, [r2]
    b0e2:	2800      	cmp	r0, #0
    b0e4:	d1f8      	bne.n	b0d8 <usbd_ep_data_handler+0xe4>
    b0e6:	f3bf 8f5b 	dmb	ish
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    b0ea:	4b23      	ldr	r3, [pc, #140]	; (b178 <usbd_ep_data_handler+0x184>)
    b0ec:	6819      	ldr	r1, [r3, #0]
    b0ee:	fa21 f505 	lsr.w	r5, r1, r5
    b0f2:	f015 0f01 	tst.w	r5, #1
    b0f6:	d19e      	bne.n	b036 <usbd_ep_data_handler+0x42>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    b0f8:	2306      	movs	r3, #6
    b0fa:	f88d 3004 	strb.w	r3, [sp, #4]
    b0fe:	f88d 4006 	strb.w	r4, [sp, #6]
    b102:	2300      	movs	r3, #0
    b104:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    b108:	4b1c      	ldr	r3, [pc, #112]	; (b17c <usbd_ep_data_handler+0x188>)
    b10a:	681b      	ldr	r3, [r3, #0]
    b10c:	a801      	add	r0, sp, #4
    b10e:	4798      	blx	r3
    b110:	e791      	b.n	b036 <usbd_ep_data_handler+0x42>
    return NRFX_USBD_EP_BITPOS(ep);
    b112:	2200      	movs	r2, #0
    b114:	e7d6      	b.n	b0c4 <usbd_ep_data_handler+0xd0>
    b116:	f7ff fe2f 	bl	ad78 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    b11a:	b110      	cbz	r0, b122 <usbd_ep_data_handler+0x12e>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    b11c:	4b19      	ldr	r3, [pc, #100]	; (b184 <usbd_ep_data_handler+0x190>)
    b11e:	2200      	movs	r2, #0
    b120:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    b122:	4b19      	ldr	r3, [pc, #100]	; (b188 <usbd_ep_data_handler+0x194>)
    b124:	2200      	movs	r2, #0
    b126:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    b128:	4b18      	ldr	r3, [pc, #96]	; (b18c <usbd_ep_data_handler+0x198>)
    b12a:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
    b12e:	2b03      	cmp	r3, #3
    b130:	d012      	beq.n	b158 <usbd_ep_data_handler+0x164>
    else if (p_state->handler.feeder == NULL)
    b132:	4b16      	ldr	r3, [pc, #88]	; (b18c <usbd_ep_data_handler+0x198>)
    b134:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    b138:	2b00      	cmp	r3, #0
    b13a:	d1d6      	bne.n	b0ea <usbd_ep_data_handler+0xf6>
    b13c:	4b0e      	ldr	r3, [pc, #56]	; (b178 <usbd_ep_data_handler+0x184>)
    b13e:	f3bf 8f5b 	dmb	ish
    b142:	e853 2f00 	ldrex	r2, [r3]
    b146:	f022 0201 	bic.w	r2, r2, #1
    b14a:	e843 2100 	strex	r1, r2, [r3]
    b14e:	2900      	cmp	r1, #0
    b150:	d1f7      	bne.n	b142 <usbd_ep_data_handler+0x14e>
    b152:	f3bf 8f5b 	dmb	ish
}
    b156:	e7c8      	b.n	b0ea <usbd_ep_data_handler+0xf6>
    b158:	4b07      	ldr	r3, [pc, #28]	; (b178 <usbd_ep_data_handler+0x184>)
    b15a:	f3bf 8f5b 	dmb	ish
    b15e:	e853 2f00 	ldrex	r2, [r3]
    b162:	f022 0201 	bic.w	r2, r2, #1
    b166:	e843 2100 	strex	r1, r2, [r3]
    b16a:	2900      	cmp	r1, #0
    b16c:	d1f7      	bne.n	b15e <usbd_ep_data_handler+0x16a>
    b16e:	f3bf 8f5b 	dmb	ish
    b172:	e7ba      	b.n	b0ea <usbd_ep_data_handler+0xf6>
    b174:	20002940 	.word	0x20002940
    b178:	200028d0 	.word	0x200028d0
    b17c:	20002a64 	.word	0x20002a64
    b180:	00017bd0 	.word	0x00017bd0
    b184:	40027c1c 	.word	0x40027c1c
    b188:	20002fca 	.word	0x20002fca
    b18c:	20002944 	.word	0x20002944
    b190:	200029d4 	.word	0x200029d4

0000b194 <ev_setup_data_handler>:
{
    b194:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    b196:	4b07      	ldr	r3, [pc, #28]	; (b1b4 <ev_setup_data_handler+0x20>)
    b198:	7818      	ldrb	r0, [r3, #0]
    return NRFX_USBD_EP_BITPOS(ep);
    b19a:	f993 3000 	ldrsb.w	r3, [r3]
    b19e:	2b00      	cmp	r3, #0
    b1a0:	db06      	blt.n	b1b0 <ev_setup_data_handler+0x1c>
    b1a2:	2110      	movs	r1, #16
    b1a4:	f003 030f 	and.w	r3, r3, #15
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    b1a8:	4419      	add	r1, r3
    b1aa:	f7ff ff23 	bl	aff4 <usbd_ep_data_handler>
}
    b1ae:	bd08      	pop	{r3, pc}
    return NRFX_USBD_EP_BITPOS(ep);
    b1b0:	2100      	movs	r1, #0
    b1b2:	e7f7      	b.n	b1a4 <ev_setup_data_handler+0x10>
    b1b4:	20002fcc 	.word	0x20002fcc

0000b1b8 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    b1b8:	b500      	push	{lr}
    b1ba:	b083      	sub	sp, #12
    b1bc:	f7ff fddc 	bl	ad78 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    b1c0:	b110      	cbz	r0, b1c8 <ev_dma_epout8_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    b1c2:	4b16      	ldr	r3, [pc, #88]	; (b21c <ev_dma_epout8_handler+0x64>)
    b1c4:	2200      	movs	r2, #0
    b1c6:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    b1c8:	4b15      	ldr	r3, [pc, #84]	; (b220 <ev_dma_epout8_handler+0x68>)
    b1ca:	2200      	movs	r2, #0
    b1cc:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    b1ce:	4b15      	ldr	r3, [pc, #84]	; (b224 <ev_dma_epout8_handler+0x6c>)
    b1d0:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
    b1d4:	2b03      	cmp	r3, #3
    b1d6:	d01d      	beq.n	b214 <ev_dma_epout8_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
    b1d8:	4b12      	ldr	r3, [pc, #72]	; (b224 <ev_dma_epout8_handler+0x6c>)
    b1da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    b1de:	b9cb      	cbnz	r3, b214 <ev_dma_epout8_handler+0x5c>
    b1e0:	4b11      	ldr	r3, [pc, #68]	; (b228 <ev_dma_epout8_handler+0x70>)
    b1e2:	f3bf 8f5b 	dmb	ish
    b1e6:	e853 2f00 	ldrex	r2, [r3]
    b1ea:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    b1ee:	e843 2100 	strex	r1, r2, [r3]
    b1f2:	2900      	cmp	r1, #0
    b1f4:	d1f7      	bne.n	b1e6 <ev_dma_epout8_handler+0x2e>
    b1f6:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    b1fa:	2306      	movs	r3, #6
    b1fc:	f88d 3004 	strb.w	r3, [sp, #4]
    b200:	2308      	movs	r3, #8
    b202:	f88d 3006 	strb.w	r3, [sp, #6]
    b206:	2300      	movs	r3, #0
    b208:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    b20c:	4b07      	ldr	r3, [pc, #28]	; (b22c <ev_dma_epout8_handler+0x74>)
    b20e:	681b      	ldr	r3, [r3, #0]
    b210:	a801      	add	r0, sp, #4
    b212:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    b214:	b003      	add	sp, #12
    b216:	f85d fb04 	ldr.w	pc, [sp], #4
    b21a:	bf00      	nop
    b21c:	40027c1c 	.word	0x40027c1c
    b220:	20002fca 	.word	0x20002fca
    b224:	20002944 	.word	0x20002944
    b228:	200028d0 	.word	0x200028d0
    b22c:	20002a64 	.word	0x20002a64

0000b230 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    b230:	b500      	push	{lr}
    b232:	b083      	sub	sp, #12
    b234:	f7ff fda0 	bl	ad78 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    b238:	b110      	cbz	r0, b240 <ev_dma_epin8_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    b23a:	4b1d      	ldr	r3, [pc, #116]	; (b2b0 <ev_dma_epin8_handler+0x80>)
    b23c:	2200      	movs	r2, #0
    b23e:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    b240:	4b1c      	ldr	r3, [pc, #112]	; (b2b4 <ev_dma_epin8_handler+0x84>)
    b242:	2200      	movs	r2, #0
    b244:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    b246:	4b1c      	ldr	r3, [pc, #112]	; (b2b8 <ev_dma_epin8_handler+0x88>)
    b248:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
    b24c:	2b03      	cmp	r3, #3
    b24e:	d01e      	beq.n	b28e <ev_dma_epin8_handler+0x5e>
    else if (p_state->handler.feeder == NULL)
    b250:	4b19      	ldr	r3, [pc, #100]	; (b2b8 <ev_dma_epin8_handler+0x88>)
    b252:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    b256:	bb3b      	cbnz	r3, b2a8 <ev_dma_epin8_handler+0x78>
    b258:	4b18      	ldr	r3, [pc, #96]	; (b2bc <ev_dma_epin8_handler+0x8c>)
    b25a:	f3bf 8f5b 	dmb	ish
    b25e:	e853 2f00 	ldrex	r2, [r3]
    b262:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    b266:	e843 2100 	strex	r1, r2, [r3]
    b26a:	2900      	cmp	r1, #0
    b26c:	d1f7      	bne.n	b25e <ev_dma_epin8_handler+0x2e>
    b26e:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    b272:	2306      	movs	r3, #6
    b274:	f88d 3004 	strb.w	r3, [sp, #4]
    b278:	2388      	movs	r3, #136	; 0x88
    b27a:	f88d 3006 	strb.w	r3, [sp, #6]
    b27e:	2300      	movs	r3, #0
    b280:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    b284:	4b0e      	ldr	r3, [pc, #56]	; (b2c0 <ev_dma_epin8_handler+0x90>)
    b286:	681b      	ldr	r3, [r3, #0]
    b288:	a801      	add	r0, sp, #4
    b28a:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    b28c:	e00c      	b.n	b2a8 <ev_dma_epin8_handler+0x78>
    b28e:	4b0b      	ldr	r3, [pc, #44]	; (b2bc <ev_dma_epin8_handler+0x8c>)
    b290:	f3bf 8f5b 	dmb	ish
    b294:	e853 2f00 	ldrex	r2, [r3]
    b298:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    b29c:	e843 2100 	strex	r1, r2, [r3]
    b2a0:	2900      	cmp	r1, #0
    b2a2:	d1f7      	bne.n	b294 <ev_dma_epin8_handler+0x64>
    b2a4:	f3bf 8f5b 	dmb	ish
    b2a8:	b003      	add	sp, #12
    b2aa:	f85d fb04 	ldr.w	pc, [sp], #4
    b2ae:	bf00      	nop
    b2b0:	40027c1c 	.word	0x40027c1c
    b2b4:	20002fca 	.word	0x20002fca
    b2b8:	20002944 	.word	0x20002944
    b2bc:	200028d0 	.word	0x200028d0
    b2c0:	20002a64 	.word	0x20002a64

0000b2c4 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    b2c4:	b508      	push	{r3, lr}
    b2c6:	f7ff fd57 	bl	ad78 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    b2ca:	b110      	cbz	r0, b2d2 <ev_dma_epin0_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    b2cc:	4b15      	ldr	r3, [pc, #84]	; (b324 <ev_dma_epin0_handler+0x60>)
    b2ce:	2200      	movs	r2, #0
    b2d0:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    b2d2:	4b15      	ldr	r3, [pc, #84]	; (b328 <ev_dma_epin0_handler+0x64>)
    b2d4:	2200      	movs	r2, #0
    b2d6:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    b2d8:	4b14      	ldr	r3, [pc, #80]	; (b32c <ev_dma_epin0_handler+0x68>)
    b2da:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
    b2de:	2b03      	cmp	r3, #3
    b2e0:	d004      	beq.n	b2ec <ev_dma_epin0_handler+0x28>
    else if (p_state->handler.feeder == NULL)
    b2e2:	4b12      	ldr	r3, [pc, #72]	; (b32c <ev_dma_epin0_handler+0x68>)
    b2e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    b2e8:	b173      	cbz	r3, b308 <ev_dma_epin0_handler+0x44>
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    b2ea:	bd08      	pop	{r3, pc}
    b2ec:	4b10      	ldr	r3, [pc, #64]	; (b330 <ev_dma_epin0_handler+0x6c>)
    b2ee:	f3bf 8f5b 	dmb	ish
    b2f2:	e853 2f00 	ldrex	r2, [r3]
    b2f6:	f022 0201 	bic.w	r2, r2, #1
    b2fa:	e843 2100 	strex	r1, r2, [r3]
    b2fe:	2900      	cmp	r1, #0
    b300:	d1f7      	bne.n	b2f2 <ev_dma_epin0_handler+0x2e>
    b302:	f3bf 8f5b 	dmb	ish
    b306:	e7f0      	b.n	b2ea <ev_dma_epin0_handler+0x26>
    b308:	4b09      	ldr	r3, [pc, #36]	; (b330 <ev_dma_epin0_handler+0x6c>)
    b30a:	f3bf 8f5b 	dmb	ish
    b30e:	e853 2f00 	ldrex	r2, [r3]
    b312:	f022 0201 	bic.w	r2, r2, #1
    b316:	e843 2100 	strex	r1, r2, [r3]
    b31a:	2900      	cmp	r1, #0
    b31c:	d1f7      	bne.n	b30e <ev_dma_epin0_handler+0x4a>
    b31e:	f3bf 8f5b 	dmb	ish
    b322:	e7e2      	b.n	b2ea <ev_dma_epin0_handler+0x26>
    b324:	40027c1c 	.word	0x40027c1c
    b328:	20002fca 	.word	0x20002fca
    b32c:	20002944 	.word	0x20002944
    b330:	200028d0 	.word	0x200028d0

0000b334 <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    b334:	b508      	push	{r3, lr}
    b336:	f7ff fd1f 	bl	ad78 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    b33a:	b110      	cbz	r0, b342 <ev_dma_epin7_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    b33c:	4b15      	ldr	r3, [pc, #84]	; (b394 <ev_dma_epin7_handler+0x60>)
    b33e:	2200      	movs	r2, #0
    b340:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    b342:	4b15      	ldr	r3, [pc, #84]	; (b398 <ev_dma_epin7_handler+0x64>)
    b344:	2200      	movs	r2, #0
    b346:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    b348:	4b14      	ldr	r3, [pc, #80]	; (b39c <ev_dma_epin7_handler+0x68>)
    b34a:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
    b34e:	2b03      	cmp	r3, #3
    b350:	d011      	beq.n	b376 <ev_dma_epin7_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    b352:	4b12      	ldr	r3, [pc, #72]	; (b39c <ev_dma_epin7_handler+0x68>)
    b354:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    b358:	b9d3      	cbnz	r3, b390 <ev_dma_epin7_handler+0x5c>
    b35a:	4b11      	ldr	r3, [pc, #68]	; (b3a0 <ev_dma_epin7_handler+0x6c>)
    b35c:	f3bf 8f5b 	dmb	ish
    b360:	e853 2f00 	ldrex	r2, [r3]
    b364:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    b368:	e843 2100 	strex	r1, r2, [r3]
    b36c:	2900      	cmp	r1, #0
    b36e:	d1f7      	bne.n	b360 <ev_dma_epin7_handler+0x2c>
    b370:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    b374:	e00c      	b.n	b390 <ev_dma_epin7_handler+0x5c>
    b376:	4b0a      	ldr	r3, [pc, #40]	; (b3a0 <ev_dma_epin7_handler+0x6c>)
    b378:	f3bf 8f5b 	dmb	ish
    b37c:	e853 2f00 	ldrex	r2, [r3]
    b380:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    b384:	e843 2100 	strex	r1, r2, [r3]
    b388:	2900      	cmp	r1, #0
    b38a:	d1f7      	bne.n	b37c <ev_dma_epin7_handler+0x48>
    b38c:	f3bf 8f5b 	dmb	ish
    b390:	bd08      	pop	{r3, pc}
    b392:	bf00      	nop
    b394:	40027c1c 	.word	0x40027c1c
    b398:	20002fca 	.word	0x20002fca
    b39c:	20002944 	.word	0x20002944
    b3a0:	200028d0 	.word	0x200028d0

0000b3a4 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    b3a4:	b508      	push	{r3, lr}
    b3a6:	f7ff fce7 	bl	ad78 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    b3aa:	b110      	cbz	r0, b3b2 <ev_dma_epin5_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    b3ac:	4b15      	ldr	r3, [pc, #84]	; (b404 <ev_dma_epin5_handler+0x60>)
    b3ae:	2200      	movs	r2, #0
    b3b0:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    b3b2:	4b15      	ldr	r3, [pc, #84]	; (b408 <ev_dma_epin5_handler+0x64>)
    b3b4:	2200      	movs	r2, #0
    b3b6:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    b3b8:	4b14      	ldr	r3, [pc, #80]	; (b40c <ev_dma_epin5_handler+0x68>)
    b3ba:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
    b3be:	2b03      	cmp	r3, #3
    b3c0:	d011      	beq.n	b3e6 <ev_dma_epin5_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    b3c2:	4b12      	ldr	r3, [pc, #72]	; (b40c <ev_dma_epin5_handler+0x68>)
    b3c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    b3c8:	b9d3      	cbnz	r3, b400 <ev_dma_epin5_handler+0x5c>
    b3ca:	4b11      	ldr	r3, [pc, #68]	; (b410 <ev_dma_epin5_handler+0x6c>)
    b3cc:	f3bf 8f5b 	dmb	ish
    b3d0:	e853 2f00 	ldrex	r2, [r3]
    b3d4:	f022 0220 	bic.w	r2, r2, #32
    b3d8:	e843 2100 	strex	r1, r2, [r3]
    b3dc:	2900      	cmp	r1, #0
    b3de:	d1f7      	bne.n	b3d0 <ev_dma_epin5_handler+0x2c>
    b3e0:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    b3e4:	e00c      	b.n	b400 <ev_dma_epin5_handler+0x5c>
    b3e6:	4b0a      	ldr	r3, [pc, #40]	; (b410 <ev_dma_epin5_handler+0x6c>)
    b3e8:	f3bf 8f5b 	dmb	ish
    b3ec:	e853 2f00 	ldrex	r2, [r3]
    b3f0:	f022 0220 	bic.w	r2, r2, #32
    b3f4:	e843 2100 	strex	r1, r2, [r3]
    b3f8:	2900      	cmp	r1, #0
    b3fa:	d1f7      	bne.n	b3ec <ev_dma_epin5_handler+0x48>
    b3fc:	f3bf 8f5b 	dmb	ish
    b400:	bd08      	pop	{r3, pc}
    b402:	bf00      	nop
    b404:	40027c1c 	.word	0x40027c1c
    b408:	20002fca 	.word	0x20002fca
    b40c:	20002944 	.word	0x20002944
    b410:	200028d0 	.word	0x200028d0

0000b414 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    b414:	b508      	push	{r3, lr}
    b416:	f7ff fcaf 	bl	ad78 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    b41a:	b110      	cbz	r0, b422 <ev_dma_epin6_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    b41c:	4b15      	ldr	r3, [pc, #84]	; (b474 <ev_dma_epin6_handler+0x60>)
    b41e:	2200      	movs	r2, #0
    b420:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    b422:	4b15      	ldr	r3, [pc, #84]	; (b478 <ev_dma_epin6_handler+0x64>)
    b424:	2200      	movs	r2, #0
    b426:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    b428:	4b14      	ldr	r3, [pc, #80]	; (b47c <ev_dma_epin6_handler+0x68>)
    b42a:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
    b42e:	2b03      	cmp	r3, #3
    b430:	d011      	beq.n	b456 <ev_dma_epin6_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    b432:	4b12      	ldr	r3, [pc, #72]	; (b47c <ev_dma_epin6_handler+0x68>)
    b434:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    b438:	b9d3      	cbnz	r3, b470 <ev_dma_epin6_handler+0x5c>
    b43a:	4b11      	ldr	r3, [pc, #68]	; (b480 <ev_dma_epin6_handler+0x6c>)
    b43c:	f3bf 8f5b 	dmb	ish
    b440:	e853 2f00 	ldrex	r2, [r3]
    b444:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    b448:	e843 2100 	strex	r1, r2, [r3]
    b44c:	2900      	cmp	r1, #0
    b44e:	d1f7      	bne.n	b440 <ev_dma_epin6_handler+0x2c>
    b450:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    b454:	e00c      	b.n	b470 <ev_dma_epin6_handler+0x5c>
    b456:	4b0a      	ldr	r3, [pc, #40]	; (b480 <ev_dma_epin6_handler+0x6c>)
    b458:	f3bf 8f5b 	dmb	ish
    b45c:	e853 2f00 	ldrex	r2, [r3]
    b460:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    b464:	e843 2100 	strex	r1, r2, [r3]
    b468:	2900      	cmp	r1, #0
    b46a:	d1f7      	bne.n	b45c <ev_dma_epin6_handler+0x48>
    b46c:	f3bf 8f5b 	dmb	ish
    b470:	bd08      	pop	{r3, pc}
    b472:	bf00      	nop
    b474:	40027c1c 	.word	0x40027c1c
    b478:	20002fca 	.word	0x20002fca
    b47c:	20002944 	.word	0x20002944
    b480:	200028d0 	.word	0x200028d0

0000b484 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    b484:	b508      	push	{r3, lr}
    b486:	f7ff fc77 	bl	ad78 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    b48a:	b110      	cbz	r0, b492 <ev_dma_epin1_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    b48c:	4b15      	ldr	r3, [pc, #84]	; (b4e4 <ev_dma_epin1_handler+0x60>)
    b48e:	2200      	movs	r2, #0
    b490:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    b492:	4b15      	ldr	r3, [pc, #84]	; (b4e8 <ev_dma_epin1_handler+0x64>)
    b494:	2200      	movs	r2, #0
    b496:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    b498:	4b14      	ldr	r3, [pc, #80]	; (b4ec <ev_dma_epin1_handler+0x68>)
    b49a:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
    b49e:	2b03      	cmp	r3, #3
    b4a0:	d011      	beq.n	b4c6 <ev_dma_epin1_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    b4a2:	4b12      	ldr	r3, [pc, #72]	; (b4ec <ev_dma_epin1_handler+0x68>)
    b4a4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    b4a8:	b9d3      	cbnz	r3, b4e0 <ev_dma_epin1_handler+0x5c>
    b4aa:	4b11      	ldr	r3, [pc, #68]	; (b4f0 <ev_dma_epin1_handler+0x6c>)
    b4ac:	f3bf 8f5b 	dmb	ish
    b4b0:	e853 2f00 	ldrex	r2, [r3]
    b4b4:	f022 0202 	bic.w	r2, r2, #2
    b4b8:	e843 2100 	strex	r1, r2, [r3]
    b4bc:	2900      	cmp	r1, #0
    b4be:	d1f7      	bne.n	b4b0 <ev_dma_epin1_handler+0x2c>
    b4c0:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    b4c4:	e00c      	b.n	b4e0 <ev_dma_epin1_handler+0x5c>
    b4c6:	4b0a      	ldr	r3, [pc, #40]	; (b4f0 <ev_dma_epin1_handler+0x6c>)
    b4c8:	f3bf 8f5b 	dmb	ish
    b4cc:	e853 2f00 	ldrex	r2, [r3]
    b4d0:	f022 0202 	bic.w	r2, r2, #2
    b4d4:	e843 2100 	strex	r1, r2, [r3]
    b4d8:	2900      	cmp	r1, #0
    b4da:	d1f7      	bne.n	b4cc <ev_dma_epin1_handler+0x48>
    b4dc:	f3bf 8f5b 	dmb	ish
    b4e0:	bd08      	pop	{r3, pc}
    b4e2:	bf00      	nop
    b4e4:	40027c1c 	.word	0x40027c1c
    b4e8:	20002fca 	.word	0x20002fca
    b4ec:	20002944 	.word	0x20002944
    b4f0:	200028d0 	.word	0x200028d0

0000b4f4 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    b4f4:	b508      	push	{r3, lr}
    b4f6:	f7ff fc3f 	bl	ad78 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    b4fa:	b110      	cbz	r0, b502 <ev_dma_epin2_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    b4fc:	4b15      	ldr	r3, [pc, #84]	; (b554 <ev_dma_epin2_handler+0x60>)
    b4fe:	2200      	movs	r2, #0
    b500:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    b502:	4b15      	ldr	r3, [pc, #84]	; (b558 <ev_dma_epin2_handler+0x64>)
    b504:	2200      	movs	r2, #0
    b506:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    b508:	4b14      	ldr	r3, [pc, #80]	; (b55c <ev_dma_epin2_handler+0x68>)
    b50a:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
    b50e:	2b03      	cmp	r3, #3
    b510:	d011      	beq.n	b536 <ev_dma_epin2_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    b512:	4b12      	ldr	r3, [pc, #72]	; (b55c <ev_dma_epin2_handler+0x68>)
    b514:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    b518:	b9d3      	cbnz	r3, b550 <ev_dma_epin2_handler+0x5c>
    b51a:	4b11      	ldr	r3, [pc, #68]	; (b560 <ev_dma_epin2_handler+0x6c>)
    b51c:	f3bf 8f5b 	dmb	ish
    b520:	e853 2f00 	ldrex	r2, [r3]
    b524:	f022 0204 	bic.w	r2, r2, #4
    b528:	e843 2100 	strex	r1, r2, [r3]
    b52c:	2900      	cmp	r1, #0
    b52e:	d1f7      	bne.n	b520 <ev_dma_epin2_handler+0x2c>
    b530:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    b534:	e00c      	b.n	b550 <ev_dma_epin2_handler+0x5c>
    b536:	4b0a      	ldr	r3, [pc, #40]	; (b560 <ev_dma_epin2_handler+0x6c>)
    b538:	f3bf 8f5b 	dmb	ish
    b53c:	e853 2f00 	ldrex	r2, [r3]
    b540:	f022 0204 	bic.w	r2, r2, #4
    b544:	e843 2100 	strex	r1, r2, [r3]
    b548:	2900      	cmp	r1, #0
    b54a:	d1f7      	bne.n	b53c <ev_dma_epin2_handler+0x48>
    b54c:	f3bf 8f5b 	dmb	ish
    b550:	bd08      	pop	{r3, pc}
    b552:	bf00      	nop
    b554:	40027c1c 	.word	0x40027c1c
    b558:	20002fca 	.word	0x20002fca
    b55c:	20002944 	.word	0x20002944
    b560:	200028d0 	.word	0x200028d0

0000b564 <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    b564:	b508      	push	{r3, lr}
    b566:	f7ff fc07 	bl	ad78 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    b56a:	b110      	cbz	r0, b572 <ev_dma_epin3_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    b56c:	4b15      	ldr	r3, [pc, #84]	; (b5c4 <ev_dma_epin3_handler+0x60>)
    b56e:	2200      	movs	r2, #0
    b570:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    b572:	4b15      	ldr	r3, [pc, #84]	; (b5c8 <ev_dma_epin3_handler+0x64>)
    b574:	2200      	movs	r2, #0
    b576:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    b578:	4b14      	ldr	r3, [pc, #80]	; (b5cc <ev_dma_epin3_handler+0x68>)
    b57a:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
    b57e:	2b03      	cmp	r3, #3
    b580:	d011      	beq.n	b5a6 <ev_dma_epin3_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    b582:	4b12      	ldr	r3, [pc, #72]	; (b5cc <ev_dma_epin3_handler+0x68>)
    b584:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    b588:	b9d3      	cbnz	r3, b5c0 <ev_dma_epin3_handler+0x5c>
    b58a:	4b11      	ldr	r3, [pc, #68]	; (b5d0 <ev_dma_epin3_handler+0x6c>)
    b58c:	f3bf 8f5b 	dmb	ish
    b590:	e853 2f00 	ldrex	r2, [r3]
    b594:	f022 0208 	bic.w	r2, r2, #8
    b598:	e843 2100 	strex	r1, r2, [r3]
    b59c:	2900      	cmp	r1, #0
    b59e:	d1f7      	bne.n	b590 <ev_dma_epin3_handler+0x2c>
    b5a0:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    b5a4:	e00c      	b.n	b5c0 <ev_dma_epin3_handler+0x5c>
    b5a6:	4b0a      	ldr	r3, [pc, #40]	; (b5d0 <ev_dma_epin3_handler+0x6c>)
    b5a8:	f3bf 8f5b 	dmb	ish
    b5ac:	e853 2f00 	ldrex	r2, [r3]
    b5b0:	f022 0208 	bic.w	r2, r2, #8
    b5b4:	e843 2100 	strex	r1, r2, [r3]
    b5b8:	2900      	cmp	r1, #0
    b5ba:	d1f7      	bne.n	b5ac <ev_dma_epin3_handler+0x48>
    b5bc:	f3bf 8f5b 	dmb	ish
    b5c0:	bd08      	pop	{r3, pc}
    b5c2:	bf00      	nop
    b5c4:	40027c1c 	.word	0x40027c1c
    b5c8:	20002fca 	.word	0x20002fca
    b5cc:	20002944 	.word	0x20002944
    b5d0:	200028d0 	.word	0x200028d0

0000b5d4 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    b5d4:	b508      	push	{r3, lr}
    b5d6:	f7ff fbcf 	bl	ad78 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    b5da:	b110      	cbz	r0, b5e2 <ev_dma_epin4_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    b5dc:	4b15      	ldr	r3, [pc, #84]	; (b634 <ev_dma_epin4_handler+0x60>)
    b5de:	2200      	movs	r2, #0
    b5e0:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    b5e2:	4b15      	ldr	r3, [pc, #84]	; (b638 <ev_dma_epin4_handler+0x64>)
    b5e4:	2200      	movs	r2, #0
    b5e6:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    b5e8:	4b14      	ldr	r3, [pc, #80]	; (b63c <ev_dma_epin4_handler+0x68>)
    b5ea:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
    b5ee:	2b03      	cmp	r3, #3
    b5f0:	d011      	beq.n	b616 <ev_dma_epin4_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    b5f2:	4b12      	ldr	r3, [pc, #72]	; (b63c <ev_dma_epin4_handler+0x68>)
    b5f4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    b5f8:	b9d3      	cbnz	r3, b630 <ev_dma_epin4_handler+0x5c>
    b5fa:	4b11      	ldr	r3, [pc, #68]	; (b640 <ev_dma_epin4_handler+0x6c>)
    b5fc:	f3bf 8f5b 	dmb	ish
    b600:	e853 2f00 	ldrex	r2, [r3]
    b604:	f022 0210 	bic.w	r2, r2, #16
    b608:	e843 2100 	strex	r1, r2, [r3]
    b60c:	2900      	cmp	r1, #0
    b60e:	d1f7      	bne.n	b600 <ev_dma_epin4_handler+0x2c>
    b610:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    b614:	e00c      	b.n	b630 <ev_dma_epin4_handler+0x5c>
    b616:	4b0a      	ldr	r3, [pc, #40]	; (b640 <ev_dma_epin4_handler+0x6c>)
    b618:	f3bf 8f5b 	dmb	ish
    b61c:	e853 2f00 	ldrex	r2, [r3]
    b620:	f022 0210 	bic.w	r2, r2, #16
    b624:	e843 2100 	strex	r1, r2, [r3]
    b628:	2900      	cmp	r1, #0
    b62a:	d1f7      	bne.n	b61c <ev_dma_epin4_handler+0x48>
    b62c:	f3bf 8f5b 	dmb	ish
    b630:	bd08      	pop	{r3, pc}
    b632:	bf00      	nop
    b634:	40027c1c 	.word	0x40027c1c
    b638:	20002fca 	.word	0x20002fca
    b63c:	20002944 	.word	0x20002944
    b640:	200028d0 	.word	0x200028d0

0000b644 <nrfx_usbd_isoinconfig_set>:
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    b644:	4b01      	ldr	r3, [pc, #4]	; (b64c <nrfx_usbd_isoinconfig_set+0x8>)
    b646:	f8c3 0530 	str.w	r0, [r3, #1328]	; 0x530
}
    b64a:	4770      	bx	lr
    b64c:	40027000 	.word	0x40027000

0000b650 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
    b650:	2300      	movs	r3, #0
    b652:	4a02      	ldr	r2, [pc, #8]	; (b65c <nrfx_usbd_uninit+0xc>)
    b654:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    b656:	4a02      	ldr	r2, [pc, #8]	; (b660 <nrfx_usbd_uninit+0x10>)
    b658:	7013      	strb	r3, [r2, #0]
    return;
}
    b65a:	4770      	bx	lr
    b65c:	20002a64 	.word	0x20002a64
    b660:	20002fcb 	.word	0x20002fcb

0000b664 <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
    b664:	b510      	push	{r4, lr}
    p_reg->EVENTCAUSE = flags;
    b666:	4b41      	ldr	r3, [pc, #260]	; (b76c <nrfx_usbd_enable+0x108>)
    b668:	f44f 6200 	mov.w	r2, #2048	; 0x800
    b66c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    b670:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    /* Prepare for READY event receiving */
    nrf_usbd_eventcause_clear(NRF_USBD, NRF_USBD_EVENTCAUSE_READY_MASK);

    usbd_enable();
    b674:	f7ff fc26 	bl	aec4 <usbd_enable>
}

/* Errata: Unexpected behavior after reset. **/
static inline bool nrfx_usbd_errata_223(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_223();
    b678:	f008 ffb2 	bl	145e0 <nrf52_errata_223>

    if (nrfx_usbd_errata_223() && m_first_enable)
    b67c:	b118      	cbz	r0, b686 <nrfx_usbd_enable+0x22>
    b67e:	4b3c      	ldr	r3, [pc, #240]	; (b770 <nrfx_usbd_enable+0x10c>)
    b680:	781b      	ldrb	r3, [r3, #0]
    b682:	2b00      	cmp	r3, #0
    b684:	d15f      	bne.n	b746 <nrfx_usbd_enable+0xe2>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    b686:	f7ff fb63 	bl	ad50 <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    b68a:	b1b8      	cbz	r0, b6bc <nrfx_usbd_enable+0x58>
	__asm__ volatile(
    b68c:	f04f 0220 	mov.w	r2, #32
    b690:	f3ef 8311 	mrs	r3, BASEPRI
    b694:	f382 8812 	msr	BASEPRI_MAX, r2
    b698:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    b69c:	4a35      	ldr	r2, [pc, #212]	; (b774 <nrfx_usbd_enable+0x110>)
    b69e:	6812      	ldr	r2, [r2, #0]
    b6a0:	2a00      	cmp	r2, #0
    b6a2:	d15b      	bne.n	b75c <nrfx_usbd_enable+0xf8>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    b6a4:	4a33      	ldr	r2, [pc, #204]	; (b774 <nrfx_usbd_enable+0x110>)
    b6a6:	f249 3175 	movw	r1, #37749	; 0x9375
    b6aa:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    b6ac:	4832      	ldr	r0, [pc, #200]	; (b778 <nrfx_usbd_enable+0x114>)
    b6ae:	2403      	movs	r4, #3
    b6b0:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    b6b2:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    b6b4:	f383 8811 	msr	BASEPRI, r3
    b6b8:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_166();
    b6bc:	f7ff fb34 	bl	ad28 <nrf52_errata_166>
#endif
    {
        usbd_errata_187_211_begin();
    }

    if (nrfx_usbd_errata_166())
    b6c0:	b150      	cbz	r0, b6d8 <nrfx_usbd_enable+0x74>
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
    b6c2:	4b2e      	ldr	r3, [pc, #184]	; (b77c <nrfx_usbd_enable+0x118>)
    b6c4:	f240 72e3 	movw	r2, #2019	; 0x7e3
    b6c8:	601a      	str	r2, [r3, #0]
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
    b6ca:	3304      	adds	r3, #4
    b6cc:	2240      	movs	r2, #64	; 0x40
    b6ce:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
    b6d0:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    b6d4:	f3bf 8f4f 	dsb	sy
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    b6d8:	4b24      	ldr	r3, [pc, #144]	; (b76c <nrfx_usbd_enable+0x108>)
    b6da:	2280      	movs	r2, #128	; 0x80
    b6dc:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_ZERODATA);
    }
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    b6e0:	2000      	movs	r0, #0
    b6e2:	f7ff ffaf 	bl	b644 <nrfx_usbd_isoinconfig_set>
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    b6e6:	4b26      	ldr	r3, [pc, #152]	; (b780 <nrfx_usbd_enable+0x11c>)
    b6e8:	f240 12ff 	movw	r2, #511	; 0x1ff
    b6ec:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
    b6ee:	4b25      	ldr	r3, [pc, #148]	; (b784 <nrfx_usbd_enable+0x120>)
    b6f0:	2200      	movs	r2, #0
    b6f2:	601a      	str	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
    b6f4:	f7ff fb40 	bl	ad78 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    b6f8:	b110      	cbz	r0, b700 <nrfx_usbd_enable+0x9c>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    b6fa:	4b23      	ldr	r3, [pc, #140]	; (b788 <nrfx_usbd_enable+0x124>)
    b6fc:	2200      	movs	r2, #0
    b6fe:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    b700:	2300      	movs	r3, #0
    b702:	4a22      	ldr	r2, [pc, #136]	; (b78c <nrfx_usbd_enable+0x128>)
    b704:	7013      	strb	r3, [r2, #0]
    usbd_dma_pending_clear();
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    b706:	4a22      	ldr	r2, [pc, #136]	; (b790 <nrfx_usbd_enable+0x12c>)
    b708:	7013      	strb	r3, [r2, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    b70a:	4b22      	ldr	r3, [pc, #136]	; (b794 <nrfx_usbd_enable+0x130>)
    b70c:	2202      	movs	r2, #2
    b70e:	701a      	strb	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    b710:	f7ff fb1e 	bl	ad50 <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    b714:	b1b0      	cbz	r0, b744 <nrfx_usbd_enable+0xe0>
	__asm__ volatile(
    b716:	f04f 0220 	mov.w	r2, #32
    b71a:	f3ef 8311 	mrs	r3, BASEPRI
    b71e:	f382 8812 	msr	BASEPRI_MAX, r2
    b722:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    b726:	4a13      	ldr	r2, [pc, #76]	; (b774 <nrfx_usbd_enable+0x110>)
    b728:	6812      	ldr	r2, [r2, #0]
    b72a:	b9da      	cbnz	r2, b764 <nrfx_usbd_enable+0x100>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    b72c:	4a11      	ldr	r2, [pc, #68]	; (b774 <nrfx_usbd_enable+0x110>)
    b72e:	f249 3175 	movw	r1, #37749	; 0x9375
    b732:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    b734:	4810      	ldr	r0, [pc, #64]	; (b778 <nrfx_usbd_enable+0x114>)
    b736:	2400      	movs	r4, #0
    b738:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    b73a:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    b73c:	f383 8811 	msr	BASEPRI, r3
    b740:	f3bf 8f6f 	isb	sy
#endif
    {
        usbd_errata_187_211_end();
    }
}
    b744:	bd10      	pop	{r4, pc}
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    b746:	4b09      	ldr	r3, [pc, #36]	; (b76c <nrfx_usbd_enable+0x108>)
    b748:	2400      	movs	r4, #0
    b74a:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    b74e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
         usbd_enable();
    b752:	f7ff fbb7 	bl	aec4 <usbd_enable>
         m_first_enable = false;
    b756:	4b06      	ldr	r3, [pc, #24]	; (b770 <nrfx_usbd_enable+0x10c>)
    b758:	701c      	strb	r4, [r3, #0]
    b75a:	e794      	b.n	b686 <nrfx_usbd_enable+0x22>
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    b75c:	4a06      	ldr	r2, [pc, #24]	; (b778 <nrfx_usbd_enable+0x114>)
    b75e:	2103      	movs	r1, #3
    b760:	6011      	str	r1, [r2, #0]
    b762:	e7a7      	b.n	b6b4 <nrfx_usbd_enable+0x50>
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    b764:	4a04      	ldr	r2, [pc, #16]	; (b778 <nrfx_usbd_enable+0x114>)
    b766:	2100      	movs	r1, #0
    b768:	6011      	str	r1, [r2, #0]
    b76a:	e7e7      	b.n	b73c <nrfx_usbd_enable+0xd8>
    b76c:	40027000 	.word	0x40027000
    b770:	20000329 	.word	0x20000329
    b774:	4006ec00 	.word	0x4006ec00
    b778:	4006ed14 	.word	0x4006ed14
    b77c:	40027800 	.word	0x40027800
    b780:	20002940 	.word	0x20002940
    b784:	200028d0 	.word	0x200028d0
    b788:	40027c1c 	.word	0x40027c1c
    b78c:	20002fca 	.word	0x20002fca
    b790:	20002fcc 	.word	0x20002fcc
    b794:	20002fcb 	.word	0x20002fcb

0000b798 <nrfx_usbd_start>:
    }
#endif
}

void nrfx_usbd_start(bool enable_sof)
{
    b798:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
    b79a:	4b09      	ldr	r3, [pc, #36]	; (b7c0 <nrfx_usbd_start+0x28>)
    b79c:	2200      	movs	r2, #0
    b79e:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_ENDEPOUT0_MASK    |
       NRF_USBD_INT_USBEVENT_MASK     |
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof)
    b7a0:	b960      	cbnz	r0, b7bc <nrfx_usbd_start+0x24>
    uint32_t ints_to_enable =
    b7a2:	4b08      	ldr	r3, [pc, #32]	; (b7c4 <nrfx_usbd_start+0x2c>)
    p_reg->INTENSET = mask;
    b7a4:	4c08      	ldr	r4, [pc, #32]	; (b7c8 <nrfx_usbd_start+0x30>)
    b7a6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    b7aa:	2027      	movs	r0, #39	; 0x27
    b7ac:	f7fa f820 	bl	57f0 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    b7b0:	2301      	movs	r3, #1
    b7b2:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    b7b6:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
    b7ba:	bd10      	pop	{r4, pc}
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
    b7bc:	4b03      	ldr	r3, [pc, #12]	; (b7cc <nrfx_usbd_start+0x34>)
    b7be:	e7f1      	b.n	b7a4 <nrfx_usbd_start+0xc>
    b7c0:	20002fc9 	.word	0x20002fc9
    b7c4:	01c01407 	.word	0x01c01407
    b7c8:	40027000 	.word	0x40027000
    b7cc:	01e01407 	.word	0x01e01407

0000b7d0 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    b7d0:	4b03      	ldr	r3, [pc, #12]	; (b7e0 <nrfx_usbd_is_enabled+0x10>)
    b7d2:	7818      	ldrb	r0, [r3, #0]
}
    b7d4:	2801      	cmp	r0, #1
    b7d6:	bf94      	ite	ls
    b7d8:	2000      	movls	r0, #0
    b7da:	2001      	movhi	r0, #1
    b7dc:	4770      	bx	lr
    b7de:	bf00      	nop
    b7e0:	20002fcb 	.word	0x20002fcb

0000b7e4 <nrfx_usbd_ep_max_packet_size_set>:
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    b7e4:	f010 0f80 	tst.w	r0, #128	; 0x80
    b7e8:	d106      	bne.n	b7f8 <nrfx_usbd_ep_max_packet_size_set+0x14>
    b7ea:	4b04      	ldr	r3, [pc, #16]	; (b7fc <nrfx_usbd_ep_max_packet_size_set+0x18>)
        NRF_USBD_EP_NR_GET(ep));
    b7ec:	f000 000f 	and.w	r0, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    b7f0:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    /* Packet size cannot be higher than maximum buffer size */
    NRFX_ASSERT((NRF_USBD_EPISO_CHECK(ep) && (size <= usbd_ep_iso_capacity(ep))) ||
                (!NRF_USBD_EPISO_CHECK(ep) && (size <= NRFX_USBD_EPSIZE)));

    usbd_ep_state_t * p_state = ep_state_access(ep);
    p_state->max_packet_size = size;
    b7f4:	8181      	strh	r1, [r0, #12]
}
    b7f6:	4770      	bx	lr
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    b7f8:	4b01      	ldr	r3, [pc, #4]	; (b800 <nrfx_usbd_ep_max_packet_size_set+0x1c>)
    b7fa:	e7f7      	b.n	b7ec <nrfx_usbd_ep_max_packet_size_set+0x8>
    b7fc:	20002944 	.word	0x20002944
    b800:	200029d4 	.word	0x200029d4

0000b804 <nrfx_usbd_init>:
{
    b804:	b570      	push	{r4, r5, r6, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    b806:	4b25      	ldr	r3, [pc, #148]	; (b89c <nrfx_usbd_init+0x98>)
    b808:	781c      	ldrb	r4, [r3, #0]
    b80a:	2c00      	cmp	r4, #0
    b80c:	d144      	bne.n	b898 <nrfx_usbd_init+0x94>
    m_event_handler = event_handler;
    b80e:	4b24      	ldr	r3, [pc, #144]	; (b8a0 <nrfx_usbd_init+0x9c>)
    b810:	6018      	str	r0, [r3, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    b812:	4b22      	ldr	r3, [pc, #136]	; (b89c <nrfx_usbd_init+0x98>)
    b814:	2201      	movs	r2, #1
    b816:	701a      	strb	r2, [r3, #0]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    b818:	4625      	mov	r5, r4
    b81a:	e012      	b.n	b842 <nrfx_usbd_init+0x3e>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    b81c:	2140      	movs	r1, #64	; 0x40
    b81e:	4630      	mov	r0, r6
    b820:	f7ff ffe0 	bl	b7e4 <nrfx_usbd_ep_max_packet_size_set>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    b824:	f016 0f80 	tst.w	r6, #128	; 0x80
    b828:	d115      	bne.n	b856 <nrfx_usbd_init+0x52>
    b82a:	491e      	ldr	r1, [pc, #120]	; (b8a4 <nrfx_usbd_init+0xa0>)
        NRF_USBD_EP_NR_GET(ep));
    b82c:	f005 030f 	and.w	r3, r5, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    b830:	0118      	lsls	r0, r3, #4
    b832:	eb01 1303 	add.w	r3, r1, r3, lsl #4
        p_state->status = NRFX_USBD_EP_OK;
    b836:	2200      	movs	r2, #0
    b838:	739a      	strb	r2, [r3, #14]
        p_state->handler.feeder = NULL;
    b83a:	500a      	str	r2, [r1, r0]
        p_state->transfer_cnt = 0;
    b83c:	609a      	str	r2, [r3, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    b83e:	3501      	adds	r5, #1
    b840:	b2ed      	uxtb	r5, r5
    b842:	2d08      	cmp	r5, #8
    b844:	d81c      	bhi.n	b880 <nrfx_usbd_init+0x7c>
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    b846:	f045 0680 	orr.w	r6, r5, #128	; 0x80
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    b84a:	f015 0f08 	tst.w	r5, #8
    b84e:	d0e5      	beq.n	b81c <nrfx_usbd_init+0x18>
    b850:	f240 11ff 	movw	r1, #511	; 0x1ff
    b854:	e7e3      	b.n	b81e <nrfx_usbd_init+0x1a>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    b856:	4914      	ldr	r1, [pc, #80]	; (b8a8 <nrfx_usbd_init+0xa4>)
    b858:	e7e8      	b.n	b82c <nrfx_usbd_init+0x28>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    b85a:	2140      	movs	r1, #64	; 0x40
    b85c:	4620      	mov	r0, r4
    b85e:	f7ff ffc1 	bl	b7e4 <nrfx_usbd_ep_max_packet_size_set>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    b862:	f014 0f80 	tst.w	r4, #128	; 0x80
    b866:	d113      	bne.n	b890 <nrfx_usbd_init+0x8c>
    b868:	490e      	ldr	r1, [pc, #56]	; (b8a4 <nrfx_usbd_init+0xa0>)
        NRF_USBD_EP_NR_GET(ep));
    b86a:	f004 030f 	and.w	r3, r4, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    b86e:	0118      	lsls	r0, r3, #4
    b870:	eb01 1303 	add.w	r3, r1, r3, lsl #4
        p_state->status = NRFX_USBD_EP_OK;
    b874:	2200      	movs	r2, #0
    b876:	739a      	strb	r2, [r3, #14]
        p_state->handler.consumer = NULL;
    b878:	500a      	str	r2, [r1, r0]
        p_state->transfer_cnt = 0;
    b87a:	609a      	str	r2, [r3, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    b87c:	3401      	adds	r4, #1
    b87e:	b2e4      	uxtb	r4, r4
    b880:	2c08      	cmp	r4, #8
    b882:	d807      	bhi.n	b894 <nrfx_usbd_init+0x90>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    b884:	f014 0f08 	tst.w	r4, #8
    b888:	d0e7      	beq.n	b85a <nrfx_usbd_init+0x56>
    b88a:	f240 11ff 	movw	r1, #511	; 0x1ff
    b88e:	e7e5      	b.n	b85c <nrfx_usbd_init+0x58>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    b890:	4905      	ldr	r1, [pc, #20]	; (b8a8 <nrfx_usbd_init+0xa4>)
    b892:	e7ea      	b.n	b86a <nrfx_usbd_init+0x66>
    return NRFX_SUCCESS;
    b894:	4805      	ldr	r0, [pc, #20]	; (b8ac <nrfx_usbd_init+0xa8>)
}
    b896:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_INVALID_STATE;
    b898:	4805      	ldr	r0, [pc, #20]	; (b8b0 <nrfx_usbd_init+0xac>)
    b89a:	e7fc      	b.n	b896 <nrfx_usbd_init+0x92>
    b89c:	20002fcb 	.word	0x20002fcb
    b8a0:	20002a64 	.word	0x20002a64
    b8a4:	20002944 	.word	0x20002944
    b8a8:	200029d4 	.word	0x200029d4
    b8ac:	0bad0000 	.word	0x0bad0000
    b8b0:	0bad0005 	.word	0x0bad0005

0000b8b4 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    b8b4:	b4f0      	push	{r4, r5, r6, r7}
    return NRFX_USBD_EP_BITPOS(ep);
    b8b6:	b242      	sxtb	r2, r0
    b8b8:	2a00      	cmp	r2, #0
    b8ba:	db14      	blt.n	b8e6 <nrfx_usbd_ep_transfer+0x32>
    b8bc:	2410      	movs	r4, #16
    b8be:	f002 030f 	and.w	r3, r2, #15
    b8c2:	441c      	add	r4, r3
	__asm__ volatile(
    b8c4:	f04f 0320 	mov.w	r3, #32
    b8c8:	f3ef 8511 	mrs	r5, BASEPRI
    b8cc:	f383 8812 	msr	BASEPRI_MAX, r3
    b8d0:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    b8d4:	f010 070f 	ands.w	r7, r0, #15
    b8d8:	d107      	bne.n	b8ea <nrfx_usbd_ep_transfer+0x36>
    b8da:	4b2f      	ldr	r3, [pc, #188]	; (b998 <nrfx_usbd_ep_transfer+0xe4>)
    b8dc:	781b      	ldrb	r3, [r3, #0]
    b8de:	4283      	cmp	r3, r0
    b8e0:	d003      	beq.n	b8ea <nrfx_usbd_ep_transfer+0x36>
    {
        ret = NRFX_ERROR_INVALID_ADDR;
    b8e2:	482e      	ldr	r0, [pc, #184]	; (b99c <nrfx_usbd_ep_transfer+0xe8>)
    b8e4:	e051      	b.n	b98a <nrfx_usbd_ep_transfer+0xd6>
    return NRFX_USBD_EP_BITPOS(ep);
    b8e6:	2400      	movs	r4, #0
    b8e8:	e7e9      	b.n	b8be <nrfx_usbd_ep_transfer+0xa>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    b8ea:	4b2d      	ldr	r3, [pc, #180]	; (b9a0 <nrfx_usbd_ep_transfer+0xec>)
    b8ec:	681b      	ldr	r3, [r3, #0]
    b8ee:	43db      	mvns	r3, r3
    b8f0:	b29b      	uxth	r3, r3
    b8f2:	482c      	ldr	r0, [pc, #176]	; (b9a4 <nrfx_usbd_ep_transfer+0xf0>)
    b8f4:	6800      	ldr	r0, [r0, #0]
    b8f6:	4303      	orrs	r3, r0
    b8f8:	2001      	movs	r0, #1
    b8fa:	fa00 f404 	lsl.w	r4, r0, r4
    b8fe:	4223      	tst	r3, r4
    b900:	d142      	bne.n	b988 <nrfx_usbd_ep_transfer+0xd4>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    b902:	2a00      	cmp	r2, #0
    b904:	db1f      	blt.n	b946 <nrfx_usbd_ep_transfer+0x92>
    b906:	4828      	ldr	r0, [pc, #160]	; (b9a8 <nrfx_usbd_ep_transfer+0xf4>)
    b908:	ea4f 1c07 	mov.w	ip, r7, lsl #4
    b90c:	eb00 1607 	add.w	r6, r0, r7, lsl #4
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
    b910:	2a00      	cmp	r2, #0
    b912:	db1a      	blt.n	b94a <nrfx_usbd_ep_transfer+0x96>
                }
            }
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    b914:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    b918:	4a24      	ldr	r2, [pc, #144]	; (b9ac <nrfx_usbd_ep_transfer+0xf8>)
    b91a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
    b91e:	4a24      	ldr	r2, [pc, #144]	; (b9b0 <nrfx_usbd_ep_transfer+0xfc>)
    b920:	f840 200c 	str.w	r2, [r0, ip]
        }
        *p_context = *p_transfer;
    b924:	c907      	ldmia	r1, {r0, r1, r2}
    b926:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
    b92a:	6073      	str	r3, [r6, #4]

        p_state->transfer_cnt = 0;
    b92c:	2300      	movs	r3, #0
    b92e:	60b3      	str	r3, [r6, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    b930:	73b3      	strb	r3, [r6, #14]
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    b932:	4a1c      	ldr	r2, [pc, #112]	; (b9a4 <nrfx_usbd_ep_transfer+0xf0>)
    b934:	6813      	ldr	r3, [r2, #0]
    b936:	431c      	orrs	r4, r3
    b938:	6014      	str	r4, [r2, #0]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    b93a:	4b1e      	ldr	r3, [pc, #120]	; (b9b4 <nrfx_usbd_ep_transfer+0x100>)
    b93c:	2280      	movs	r2, #128	; 0x80
    b93e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        ret = NRFX_SUCCESS;
    b942:	481d      	ldr	r0, [pc, #116]	; (b9b8 <nrfx_usbd_ep_transfer+0x104>)
}
    b944:	e021      	b.n	b98a <nrfx_usbd_ep_transfer+0xd6>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    b946:	481d      	ldr	r0, [pc, #116]	; (b9bc <nrfx_usbd_ep_transfer+0x108>)
    b948:	e7de      	b.n	b908 <nrfx_usbd_ep_transfer+0x54>
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    b94a:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    b94e:	4a1c      	ldr	r2, [pc, #112]	; (b9c0 <nrfx_usbd_ep_transfer+0x10c>)
    b950:	eb02 0383 	add.w	r3, r2, r3, lsl #2
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    b954:	680a      	ldr	r2, [r1, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    b956:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
    b95a:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    b95e:	d006      	beq.n	b96e <nrfx_usbd_ep_transfer+0xba>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    b960:	688a      	ldr	r2, [r1, #8]
    b962:	f012 0f01 	tst.w	r2, #1
    b966:	d10c      	bne.n	b982 <nrfx_usbd_ep_transfer+0xce>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
    b968:	4a16      	ldr	r2, [pc, #88]	; (b9c4 <nrfx_usbd_ep_transfer+0x110>)
    b96a:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
    b96c:	e7da      	b.n	b924 <nrfx_usbd_ep_transfer+0x70>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    b96e:	688a      	ldr	r2, [r1, #8]
    b970:	f012 0f01 	tst.w	r2, #1
    b974:	d102      	bne.n	b97c <nrfx_usbd_ep_transfer+0xc8>
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
    b976:	4a14      	ldr	r2, [pc, #80]	; (b9c8 <nrfx_usbd_ep_transfer+0x114>)
    b978:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
    b97a:	e7d3      	b.n	b924 <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
    b97c:	4a13      	ldr	r2, [pc, #76]	; (b9cc <nrfx_usbd_ep_transfer+0x118>)
    b97e:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
    b980:	e7d0      	b.n	b924 <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
    b982:	4a13      	ldr	r2, [pc, #76]	; (b9d0 <nrfx_usbd_ep_transfer+0x11c>)
    b984:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
    b986:	e7cd      	b.n	b924 <nrfx_usbd_ep_transfer+0x70>
        ret = NRFX_ERROR_BUSY;
    b988:	4812      	ldr	r0, [pc, #72]	; (b9d4 <nrfx_usbd_ep_transfer+0x120>)
	__asm__ volatile(
    b98a:	f385 8811 	msr	BASEPRI, r5
    b98e:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    b992:	bcf0      	pop	{r4, r5, r6, r7}
    b994:	4770      	bx	lr
    b996:	bf00      	nop
    b998:	20002fcc 	.word	0x20002fcc
    b99c:	0bad000a 	.word	0x0bad000a
    b9a0:	20002940 	.word	0x20002940
    b9a4:	200028d0 	.word	0x200028d0
    b9a8:	20002944 	.word	0x20002944
    b9ac:	20002864 	.word	0x20002864
    b9b0:	000145e5 	.word	0x000145e5
    b9b4:	e000e100 	.word	0xe000e100
    b9b8:	0bad0000 	.word	0x0bad0000
    b9bc:	200029d4 	.word	0x200029d4
    b9c0:	200028d4 	.word	0x200028d4
    b9c4:	00014677 	.word	0x00014677
    b9c8:	0001461b 	.word	0x0001461b
    b9cc:	0001463d 	.word	0x0001463d
    b9d0:	000146b5 	.word	0x000146b5
    b9d4:	0bad000b 	.word	0x0bad000b

0000b9d8 <nrfx_usbd_feeder_buffer_get>:
}

void * nrfx_usbd_feeder_buffer_get(void)
{
    return m_tx_buffer;
}
    b9d8:	4800      	ldr	r0, [pc, #0]	; (b9dc <nrfx_usbd_feeder_buffer_get+0x4>)
    b9da:	4770      	bx	lr
    b9dc:	20002a68 	.word	0x20002a68

0000b9e0 <nrfx_usbd_ep_status_get>:

nrfx_usbd_ep_status_t nrfx_usbd_ep_status_get(nrfx_usbd_ep_t ep, size_t * p_size)
{
    b9e0:	b430      	push	{r4, r5}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    b9e2:	f010 0f80 	tst.w	r0, #128	; 0x80
    b9e6:	d118      	bne.n	ba1a <nrfx_usbd_ep_status_get+0x3a>
    b9e8:	4b0e      	ldr	r3, [pc, #56]	; (ba24 <nrfx_usbd_ep_status_get+0x44>)
        NRF_USBD_EP_NR_GET(ep));
    b9ea:	f000 000f 	and.w	r0, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    b9ee:	0104      	lsls	r4, r0, #4
    b9f0:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	__asm__ volatile(
    b9f4:	f04f 0520 	mov.w	r5, #32
    b9f8:	f3ef 8211 	mrs	r2, BASEPRI
    b9fc:	f385 8812 	msr	BASEPRI_MAX, r5
    ba00:	f3bf 8f6f 	isb	sy
    nrfx_usbd_ep_status_t ret;

    usbd_ep_state_t const * p_state = ep_state_access(ep);
    NRFX_CRITICAL_SECTION_ENTER();
    *p_size = p_state->transfer_cnt;
    ba04:	6885      	ldr	r5, [r0, #8]
    ba06:	600d      	str	r5, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    ba08:	591b      	ldr	r3, [r3, r4]
    ba0a:	b143      	cbz	r3, ba1e <nrfx_usbd_ep_status_get+0x3e>
    ba0c:	2004      	movs	r0, #4
	__asm__ volatile(
    ba0e:	f382 8811 	msr	BASEPRI, r2
    ba12:	f3bf 8f6f 	isb	sy
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    ba16:	bc30      	pop	{r4, r5}
    ba18:	4770      	bx	lr
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    ba1a:	4b03      	ldr	r3, [pc, #12]	; (ba28 <nrfx_usbd_ep_status_get+0x48>)
    ba1c:	e7e5      	b.n	b9ea <nrfx_usbd_ep_status_get+0xa>
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    ba1e:	7b80      	ldrb	r0, [r0, #14]
    ba20:	e7f5      	b.n	ba0e <nrfx_usbd_ep_status_get+0x2e>
    ba22:	bf00      	nop
    ba24:	20002944 	.word	0x20002944
    ba28:	200029d4 	.word	0x200029d4

0000ba2c <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
    ba2c:	f010 0f08 	tst.w	r0, #8
    ba30:	d107      	bne.n	ba42 <nrfx_usbd_epout_size_get+0x16>
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    ba32:	f000 000f 	and.w	r0, r0, #15
    ba36:	f500 7094 	add.w	r0, r0, #296	; 0x128
    ba3a:	4b06      	ldr	r3, [pc, #24]	; (ba54 <nrfx_usbd_epout_size_get+0x28>)
    ba3c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    ba40:	4770      	bx	lr
        size_t size_isoout = p_reg->SIZE.ISOOUT;
    ba42:	4b04      	ldr	r3, [pc, #16]	; (ba54 <nrfx_usbd_epout_size_get+0x28>)
    ba44:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
        if ((size_isoout & USBD_SIZE_ISOOUT_ZERO_Msk) ==
    ba48:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    ba4c:	d100      	bne.n	ba50 <nrfx_usbd_epout_size_get+0x24>
    ba4e:	4770      	bx	lr
            size_isoout = 0;
    ba50:	2000      	movs	r0, #0

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
    ba52:	4770      	bx	lr
    ba54:	40027000 	.word	0x40027000

0000ba58 <usbd_dmareq_process>:
    if (!m_dma_pending)
    ba58:	4b6d      	ldr	r3, [pc, #436]	; (bc10 <usbd_dmareq_process+0x1b8>)
    ba5a:	781b      	ldrb	r3, [r3, #0]
    ba5c:	2b00      	cmp	r3, #0
    ba5e:	f040 80d5 	bne.w	bc0c <usbd_dmareq_process+0x1b4>
{
    ba62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ba66:	b085      	sub	sp, #20
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    ba68:	4b6a      	ldr	r3, [pc, #424]	; (bc14 <usbd_dmareq_process+0x1bc>)
    ba6a:	681b      	ldr	r3, [r3, #0]
    ba6c:	4a6a      	ldr	r2, [pc, #424]	; (bc18 <usbd_dmareq_process+0x1c0>)
    ba6e:	6810      	ldr	r0, [r2, #0]
    ba70:	4003      	ands	r3, r0
    ba72:	f000 80c8 	beq.w	bc06 <usbd_dmareq_process+0x1ae>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    ba76:	f013 2001 	ands.w	r0, r3, #16777472	; 0x1000100
    ba7a:	d05a      	beq.n	bb32 <usbd_dmareq_process+0xda>
                pos = usbd_dma_scheduler_algorithm(req & USBD_EPISO_BIT_MASK);
    ba7c:	f008 fdf3 	bl	14666 <usbd_dma_scheduler_algorithm>
    ba80:	4680      	mov	r8, r0
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    ba82:	f1b8 0f0f 	cmp.w	r8, #15
    ba86:	d959      	bls.n	bb3c <usbd_dmareq_process+0xe4>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    ba88:	f1a8 0610 	sub.w	r6, r8, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    ba8c:	b2f6      	uxtb	r6, r6
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    ba8e:	b274      	sxtb	r4, r6
    ba90:	2c00      	cmp	r4, #0
    ba92:	db57      	blt.n	bb44 <usbd_dmareq_process+0xec>
    ba94:	f8df a19c 	ldr.w	sl, [pc, #412]	; bc34 <usbd_dmareq_process+0x1dc>
    ba98:	f006 070f 	and.w	r7, r6, #15
        NRF_USBD_EP_NR_GET(ep));
    ba9c:	463d      	mov	r5, r7
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    ba9e:	ea4f 1b07 	mov.w	fp, r7, lsl #4
    baa2:	eb0a 1907 	add.w	r9, sl, r7, lsl #4
            if (NRF_USBD_EPIN_CHECK(ep))
    baa6:	2c00      	cmp	r4, #0
    baa8:	db4f      	blt.n	bb4a <usbd_dmareq_process+0xf2>
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    baaa:	4630      	mov	r0, r6
    baac:	f7ff ffbe 	bl	ba2c <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
    bab0:	f85a a00b 	ldr.w	sl, [sl, fp]
    bab4:	4683      	mov	fp, r0
    bab6:	4603      	mov	r3, r0
    bab8:	f8b9 200c 	ldrh.w	r2, [r9, #12]
    babc:	f8d9 1004 	ldr.w	r1, [r9, #4]
    bac0:	a802      	add	r0, sp, #8
    bac2:	47d0      	blx	sl
                if (transfer.p_data.rx == NULL)
    bac4:	9b02      	ldr	r3, [sp, #8]
    bac6:	b113      	cbz	r3, bace <usbd_dmareq_process+0x76>
                else if (transfer.size < rx_size)
    bac8:	9b03      	ldr	r3, [sp, #12]
    baca:	455b      	cmp	r3, fp
    bacc:	d34b      	bcc.n	bb66 <usbd_dmareq_process+0x10e>
                if (!continue_transfer)
    bace:	b910      	cbnz	r0, bad6 <usbd_dmareq_process+0x7e>
                    p_state->handler.consumer = NULL;
    bad0:	2300      	movs	r3, #0
    bad2:	f8c9 3000 	str.w	r3, [r9]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
    bad6:	f7ff f94f 	bl	ad78 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    bada:	b110      	cbz	r0, bae2 <usbd_dmareq_process+0x8a>
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
    badc:	4b4f      	ldr	r3, [pc, #316]	; (bc1c <usbd_dmareq_process+0x1c4>)
    bade:	2282      	movs	r2, #130	; 0x82
    bae0:	601a      	str	r2, [r3, #0]
    m_dma_pending = true;
    bae2:	2001      	movs	r0, #1
    bae4:	4b4a      	ldr	r3, [pc, #296]	; (bc10 <usbd_dmareq_process+0x1b8>)
    bae6:	7018      	strb	r0, [r3, #0]
            m_ep_ready &= ~(1U << pos);
    bae8:	fa00 f008 	lsl.w	r0, r0, r8
    baec:	4a4a      	ldr	r2, [pc, #296]	; (bc18 <usbd_dmareq_process+0x1c0>)
    baee:	6813      	ldr	r3, [r2, #0]
    baf0:	ea23 0000 	bic.w	r0, r3, r0
    baf4:	6010      	str	r0, [r2, #0]
            p_state->transfer_cnt += transfer.size;
    baf6:	9a03      	ldr	r2, [sp, #12]
    baf8:	f8d9 3008 	ldr.w	r3, [r9, #8]
    bafc:	4413      	add	r3, r2
    bafe:	f8c9 3008 	str.w	r3, [r9, #8]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
    bb02:	9b02      	ldr	r3, [sp, #8]
    if (NRF_USBD_EPIN_CHECK(ep))
    bb04:	2c00      	cmp	r4, #0
    bb06:	db4f      	blt.n	bba8 <usbd_dmareq_process+0x150>
        if (NRF_USBD_EPISO_CHECK(ep))
    bb08:	f016 0f08 	tst.w	r6, #8
    bb0c:	d05f      	beq.n	bbce <usbd_dmareq_process+0x176>
            p_reg->ISOOUT.PTR    = ptr;
    bb0e:	4944      	ldr	r1, [pc, #272]	; (bc20 <usbd_dmareq_process+0x1c8>)
    bb10:	f8c1 37a0 	str.w	r3, [r1, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
    bb14:	f8c1 27a4 	str.w	r2, [r1, #1956]	; 0x7a4
    return (nrf_usbd_task_t)(
    bb18:	2c00      	cmp	r4, #0
    bb1a:	db62      	blt.n	bbe2 <usbd_dmareq_process+0x18a>
    bb1c:	2328      	movs	r3, #40	; 0x28
    bb1e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    bb22:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
    bb26:	f507 371c 	add.w	r7, r7, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    bb2a:	2301      	movs	r3, #1
    bb2c:	603b      	str	r3, [r7, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    bb2e:	683b      	ldr	r3, [r7, #0]
}
    bb30:	e065      	b.n	bbfe <usbd_dmareq_process+0x1a6>
                pos = usbd_dma_scheduler_algorithm(req);
    bb32:	4618      	mov	r0, r3
    bb34:	f008 fd97 	bl	14666 <usbd_dma_scheduler_algorithm>
    bb38:	4680      	mov	r8, r0
    bb3a:	e7a2      	b.n	ba82 <usbd_dmareq_process+0x2a>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    bb3c:	f068 067f 	orn	r6, r8, #127	; 0x7f
    bb40:	b2f6      	uxtb	r6, r6
    bb42:	e7a4      	b.n	ba8e <usbd_dmareq_process+0x36>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    bb44:	f8df a0f0 	ldr.w	sl, [pc, #240]	; bc38 <usbd_dmareq_process+0x1e0>
    bb48:	e7a6      	b.n	ba98 <usbd_dmareq_process+0x40>
                continue_transfer = p_state->handler.feeder(
    bb4a:	f8d9 3000 	ldr.w	r3, [r9]
    bb4e:	f8b9 200c 	ldrh.w	r2, [r9, #12]
    bb52:	f8d9 1004 	ldr.w	r1, [r9, #4]
    bb56:	a802      	add	r0, sp, #8
    bb58:	4798      	blx	r3
                if (!continue_transfer)
    bb5a:	2800      	cmp	r0, #0
    bb5c:	d1bb      	bne.n	bad6 <usbd_dmareq_process+0x7e>
                    p_state->handler.feeder = NULL;
    bb5e:	2300      	movs	r3, #0
    bb60:	f8c9 3000 	str.w	r3, [r9]
    bb64:	e7b7      	b.n	bad6 <usbd_dmareq_process+0x7e>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    bb66:	2202      	movs	r2, #2
    bb68:	f889 200e 	strb.w	r2, [r9, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    bb6c:	2301      	movs	r3, #1
    bb6e:	fa03 f808 	lsl.w	r8, r3, r8
    bb72:	ea6f 0808 	mvn.w	r8, r8
    bb76:	4b27      	ldr	r3, [pc, #156]	; (bc14 <usbd_dmareq_process+0x1bc>)
    bb78:	f3bf 8f5b 	dmb	ish
    bb7c:	e853 1f00 	ldrex	r1, [r3]
    bb80:	ea01 0108 	and.w	r1, r1, r8
    bb84:	e843 1000 	strex	r0, r1, [r3]
    bb88:	2800      	cmp	r0, #0
    bb8a:	d1f7      	bne.n	bb7c <usbd_dmareq_process+0x124>
    bb8c:	f3bf 8f5b 	dmb	ish
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    bb90:	2306      	movs	r3, #6
    bb92:	f88d 3004 	strb.w	r3, [sp, #4]
    bb96:	f88d 6006 	strb.w	r6, [sp, #6]
    bb9a:	f88d 2007 	strb.w	r2, [sp, #7]
                    m_event_handler(&evt);
    bb9e:	4b21      	ldr	r3, [pc, #132]	; (bc24 <usbd_dmareq_process+0x1cc>)
    bba0:	681b      	ldr	r3, [r3, #0]
    bba2:	a801      	add	r0, sp, #4
    bba4:	4798      	blx	r3
                    continue;
    bba6:	e75f      	b.n	ba68 <usbd_dmareq_process+0x10>
        if (NRF_USBD_EPISO_CHECK(ep))
    bba8:	f016 0f08 	tst.w	r6, #8
    bbac:	d005      	beq.n	bbba <usbd_dmareq_process+0x162>
            p_reg->ISOIN.PTR    = ptr;
    bbae:	491c      	ldr	r1, [pc, #112]	; (bc20 <usbd_dmareq_process+0x1c8>)
    bbb0:	f8c1 36a0 	str.w	r3, [r1, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
    bbb4:	f8c1 26a4 	str.w	r2, [r1, #1700]	; 0x6a4
    bbb8:	e7ae      	b.n	bb18 <usbd_dmareq_process+0xc0>
            p_reg->EPIN[epnr].PTR    = ptr;
    bbba:	4919      	ldr	r1, [pc, #100]	; (bc20 <usbd_dmareq_process+0x1c8>)
    bbbc:	eb07 0087 	add.w	r0, r7, r7, lsl #2
    bbc0:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    bbc4:	f8c0 3600 	str.w	r3, [r0, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
    bbc8:	f8c0 2604 	str.w	r2, [r0, #1540]	; 0x604
    bbcc:	e7a4      	b.n	bb18 <usbd_dmareq_process+0xc0>
            p_reg->EPOUT[epnr].PTR    = ptr;
    bbce:	4914      	ldr	r1, [pc, #80]	; (bc20 <usbd_dmareq_process+0x1c8>)
    bbd0:	eb07 0087 	add.w	r0, r7, r7, lsl #2
    bbd4:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    bbd8:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
    bbdc:	f8c0 2704 	str.w	r2, [r0, #1796]	; 0x704
    bbe0:	e79a      	b.n	bb18 <usbd_dmareq_process+0xc0>
    return (nrf_usbd_task_t)(
    bbe2:	2304      	movs	r3, #4
    bbe4:	e79b      	b.n	bb1e <usbd_dmareq_process+0xc6>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    bbe6:	4b10      	ldr	r3, [pc, #64]	; (bc28 <usbd_dmareq_process+0x1d0>)
    bbe8:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    bbec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    bbf0:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    bbf4:	681b      	ldr	r3, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
    bbf6:	b933      	cbnz	r3, bc06 <usbd_dmareq_process+0x1ae>
    bbf8:	4b0c      	ldr	r3, [pc, #48]	; (bc2c <usbd_dmareq_process+0x1d4>)
    bbfa:	681b      	ldr	r3, [r3, #0]
    bbfc:	b91b      	cbnz	r3, bc06 <usbd_dmareq_process+0x1ae>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    bbfe:	2c00      	cmp	r4, #0
    bc00:	dbf1      	blt.n	bbe6 <usbd_dmareq_process+0x18e>
    bc02:	4b0b      	ldr	r3, [pc, #44]	; (bc30 <usbd_dmareq_process+0x1d8>)
    bc04:	e7f0      	b.n	bbe8 <usbd_dmareq_process+0x190>
}
    bc06:	b005      	add	sp, #20
    bc08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bc0c:	4770      	bx	lr
    bc0e:	bf00      	nop
    bc10:	20002fca 	.word	0x20002fca
    bc14:	200028d0 	.word	0x200028d0
    bc18:	20002940 	.word	0x20002940
    bc1c:	40027c1c 	.word	0x40027c1c
    bc20:	40027000 	.word	0x40027000
    bc24:	20002a64 	.word	0x20002a64
    bc28:	00017bd0 	.word	0x00017bd0
    bc2c:	40027100 	.word	0x40027100
    bc30:	00017bf0 	.word	0x00017bf0
    bc34:	20002944 	.word	0x20002944
    bc38:	200029d4 	.word	0x200029d4

0000bc3c <ev_epdata_handler>:
{
    bc3c:	b510      	push	{r4, lr}
    return p_reg->EPDATASTATUS;
    bc3e:	4b0f      	ldr	r3, [pc, #60]	; (bc7c <ev_epdata_handler+0x40>)
    bc40:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
    bc44:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
    NRFX_LOG_DEBUG("USBD event: EndpointEPStatus: %x", dataepstatus);
    bc48:	e009      	b.n	bc5e <ev_epdata_handler+0x22>
    return 32U;
    bc4a:	2120      	movs	r1, #32
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    bc4c:	f1a1 0010 	sub.w	r0, r1, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    bc50:	b2c0      	uxtb	r0, r0
        dataepstatus &= ~(1UL << bitpos);
    bc52:	2301      	movs	r3, #1
    bc54:	408b      	lsls	r3, r1
    bc56:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    bc5a:	f7ff f9cb 	bl	aff4 <usbd_ep_data_handler>
    while (dataepstatus)
    bc5e:	b154      	cbz	r4, bc76 <ev_epdata_handler+0x3a>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    bc60:	fa94 f1a4 	rbit	r1, r4
  if (value == 0U)
    bc64:	2900      	cmp	r1, #0
    bc66:	d0f0      	beq.n	bc4a <ev_epdata_handler+0xe>
  return __builtin_clz(value);
    bc68:	fab1 f181 	clz	r1, r1
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    bc6c:	290f      	cmp	r1, #15
    bc6e:	d8ed      	bhi.n	bc4c <ev_epdata_handler+0x10>
    bc70:	f041 0080 	orr.w	r0, r1, #128	; 0x80
    bc74:	e7ed      	b.n	bc52 <ev_epdata_handler+0x16>
        usbd_dmareq_process();
    bc76:	f7ff feef 	bl	ba58 <usbd_dmareq_process>
}
    bc7a:	bd10      	pop	{r4, pc}
    bc7c:	40027000 	.word	0x40027000

0000bc80 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    bc80:	b500      	push	{lr}
    bc82:	b083      	sub	sp, #12
    bc84:	f7ff f878 	bl	ad78 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    bc88:	b110      	cbz	r0, bc90 <ev_dma_epout7_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    bc8a:	4b1d      	ldr	r3, [pc, #116]	; (bd00 <ev_dma_epout7_handler+0x80>)
    bc8c:	2200      	movs	r2, #0
    bc8e:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    bc90:	4b1c      	ldr	r3, [pc, #112]	; (bd04 <ev_dma_epout7_handler+0x84>)
    bc92:	2200      	movs	r2, #0
    bc94:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    bc96:	4b1c      	ldr	r3, [pc, #112]	; (bd08 <ev_dma_epout7_handler+0x88>)
    bc98:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
    bc9c:	2b03      	cmp	r3, #3
    bc9e:	d01d      	beq.n	bcdc <ev_dma_epout7_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
    bca0:	4b19      	ldr	r3, [pc, #100]	; (bd08 <ev_dma_epout7_handler+0x88>)
    bca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    bca4:	bb3b      	cbnz	r3, bcf6 <ev_dma_epout7_handler+0x76>
    bca6:	4b19      	ldr	r3, [pc, #100]	; (bd0c <ev_dma_epout7_handler+0x8c>)
    bca8:	f3bf 8f5b 	dmb	ish
    bcac:	e853 2f00 	ldrex	r2, [r3]
    bcb0:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
    bcb4:	e843 2100 	strex	r1, r2, [r3]
    bcb8:	2900      	cmp	r1, #0
    bcba:	d1f7      	bne.n	bcac <ev_dma_epout7_handler+0x2c>
    bcbc:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    bcc0:	2306      	movs	r3, #6
    bcc2:	f88d 3004 	strb.w	r3, [sp, #4]
    bcc6:	2307      	movs	r3, #7
    bcc8:	f88d 3006 	strb.w	r3, [sp, #6]
    bccc:	2300      	movs	r3, #0
    bcce:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    bcd2:	4b0f      	ldr	r3, [pc, #60]	; (bd10 <ev_dma_epout7_handler+0x90>)
    bcd4:	681b      	ldr	r3, [r3, #0]
    bcd6:	a801      	add	r0, sp, #4
    bcd8:	4798      	blx	r3
    bcda:	e00c      	b.n	bcf6 <ev_dma_epout7_handler+0x76>
    bcdc:	4b0b      	ldr	r3, [pc, #44]	; (bd0c <ev_dma_epout7_handler+0x8c>)
    bcde:	f3bf 8f5b 	dmb	ish
    bce2:	e853 2f00 	ldrex	r2, [r3]
    bce6:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
    bcea:	e843 2100 	strex	r1, r2, [r3]
    bcee:	2900      	cmp	r1, #0
    bcf0:	d1f7      	bne.n	bce2 <ev_dma_epout7_handler+0x62>
    bcf2:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    bcf6:	f7ff feaf 	bl	ba58 <usbd_dmareq_process>
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    bcfa:	b003      	add	sp, #12
    bcfc:	f85d fb04 	ldr.w	pc, [sp], #4
    bd00:	40027c1c 	.word	0x40027c1c
    bd04:	20002fca 	.word	0x20002fca
    bd08:	20002944 	.word	0x20002944
    bd0c:	200028d0 	.word	0x200028d0
    bd10:	20002a64 	.word	0x20002a64

0000bd14 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    bd14:	b500      	push	{lr}
    bd16:	b083      	sub	sp, #12
    bd18:	f7ff f82e 	bl	ad78 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    bd1c:	b110      	cbz	r0, bd24 <ev_dma_epout1_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    bd1e:	4b1d      	ldr	r3, [pc, #116]	; (bd94 <ev_dma_epout1_handler+0x80>)
    bd20:	2200      	movs	r2, #0
    bd22:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    bd24:	4b1c      	ldr	r3, [pc, #112]	; (bd98 <ev_dma_epout1_handler+0x84>)
    bd26:	2200      	movs	r2, #0
    bd28:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    bd2a:	4b1c      	ldr	r3, [pc, #112]	; (bd9c <ev_dma_epout1_handler+0x88>)
    bd2c:	7f9b      	ldrb	r3, [r3, #30]
    bd2e:	2b03      	cmp	r3, #3
    bd30:	d01d      	beq.n	bd6e <ev_dma_epout1_handler+0x5a>
    else if (p_state->handler.consumer == NULL)
    bd32:	4b1a      	ldr	r3, [pc, #104]	; (bd9c <ev_dma_epout1_handler+0x88>)
    bd34:	691b      	ldr	r3, [r3, #16]
    bd36:	bb3b      	cbnz	r3, bd88 <ev_dma_epout1_handler+0x74>
    bd38:	4b19      	ldr	r3, [pc, #100]	; (bda0 <ev_dma_epout1_handler+0x8c>)
    bd3a:	f3bf 8f5b 	dmb	ish
    bd3e:	e853 2f00 	ldrex	r2, [r3]
    bd42:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
    bd46:	e843 2100 	strex	r1, r2, [r3]
    bd4a:	2900      	cmp	r1, #0
    bd4c:	d1f7      	bne.n	bd3e <ev_dma_epout1_handler+0x2a>
    bd4e:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    bd52:	2306      	movs	r3, #6
    bd54:	f88d 3004 	strb.w	r3, [sp, #4]
    bd58:	2301      	movs	r3, #1
    bd5a:	f88d 3006 	strb.w	r3, [sp, #6]
    bd5e:	2300      	movs	r3, #0
    bd60:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    bd64:	4b0f      	ldr	r3, [pc, #60]	; (bda4 <ev_dma_epout1_handler+0x90>)
    bd66:	681b      	ldr	r3, [r3, #0]
    bd68:	a801      	add	r0, sp, #4
    bd6a:	4798      	blx	r3
    bd6c:	e00c      	b.n	bd88 <ev_dma_epout1_handler+0x74>
    bd6e:	4b0c      	ldr	r3, [pc, #48]	; (bda0 <ev_dma_epout1_handler+0x8c>)
    bd70:	f3bf 8f5b 	dmb	ish
    bd74:	e853 2f00 	ldrex	r2, [r3]
    bd78:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
    bd7c:	e843 2100 	strex	r1, r2, [r3]
    bd80:	2900      	cmp	r1, #0
    bd82:	d1f7      	bne.n	bd74 <ev_dma_epout1_handler+0x60>
    bd84:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    bd88:	f7ff fe66 	bl	ba58 <usbd_dmareq_process>
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    bd8c:	b003      	add	sp, #12
    bd8e:	f85d fb04 	ldr.w	pc, [sp], #4
    bd92:	bf00      	nop
    bd94:	40027c1c 	.word	0x40027c1c
    bd98:	20002fca 	.word	0x20002fca
    bd9c:	20002944 	.word	0x20002944
    bda0:	200028d0 	.word	0x200028d0
    bda4:	20002a64 	.word	0x20002a64

0000bda8 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    bda8:	b500      	push	{lr}
    bdaa:	b083      	sub	sp, #12
    bdac:	f7fe ffe4 	bl	ad78 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    bdb0:	b110      	cbz	r0, bdb8 <ev_dma_epout2_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    bdb2:	4b1d      	ldr	r3, [pc, #116]	; (be28 <ev_dma_epout2_handler+0x80>)
    bdb4:	2200      	movs	r2, #0
    bdb6:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    bdb8:	4b1c      	ldr	r3, [pc, #112]	; (be2c <ev_dma_epout2_handler+0x84>)
    bdba:	2200      	movs	r2, #0
    bdbc:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    bdbe:	4b1c      	ldr	r3, [pc, #112]	; (be30 <ev_dma_epout2_handler+0x88>)
    bdc0:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    bdc4:	2b03      	cmp	r3, #3
    bdc6:	d01d      	beq.n	be04 <ev_dma_epout2_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
    bdc8:	4b19      	ldr	r3, [pc, #100]	; (be30 <ev_dma_epout2_handler+0x88>)
    bdca:	6a1b      	ldr	r3, [r3, #32]
    bdcc:	bb3b      	cbnz	r3, be1e <ev_dma_epout2_handler+0x76>
    bdce:	4b19      	ldr	r3, [pc, #100]	; (be34 <ev_dma_epout2_handler+0x8c>)
    bdd0:	f3bf 8f5b 	dmb	ish
    bdd4:	e853 2f00 	ldrex	r2, [r3]
    bdd8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
    bddc:	e843 2100 	strex	r1, r2, [r3]
    bde0:	2900      	cmp	r1, #0
    bde2:	d1f7      	bne.n	bdd4 <ev_dma_epout2_handler+0x2c>
    bde4:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    bde8:	2306      	movs	r3, #6
    bdea:	f88d 3004 	strb.w	r3, [sp, #4]
    bdee:	2302      	movs	r3, #2
    bdf0:	f88d 3006 	strb.w	r3, [sp, #6]
    bdf4:	2300      	movs	r3, #0
    bdf6:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    bdfa:	4b0f      	ldr	r3, [pc, #60]	; (be38 <ev_dma_epout2_handler+0x90>)
    bdfc:	681b      	ldr	r3, [r3, #0]
    bdfe:	a801      	add	r0, sp, #4
    be00:	4798      	blx	r3
    be02:	e00c      	b.n	be1e <ev_dma_epout2_handler+0x76>
    be04:	4b0b      	ldr	r3, [pc, #44]	; (be34 <ev_dma_epout2_handler+0x8c>)
    be06:	f3bf 8f5b 	dmb	ish
    be0a:	e853 2f00 	ldrex	r2, [r3]
    be0e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
    be12:	e843 2100 	strex	r1, r2, [r3]
    be16:	2900      	cmp	r1, #0
    be18:	d1f7      	bne.n	be0a <ev_dma_epout2_handler+0x62>
    be1a:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    be1e:	f7ff fe1b 	bl	ba58 <usbd_dmareq_process>
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    be22:	b003      	add	sp, #12
    be24:	f85d fb04 	ldr.w	pc, [sp], #4
    be28:	40027c1c 	.word	0x40027c1c
    be2c:	20002fca 	.word	0x20002fca
    be30:	20002944 	.word	0x20002944
    be34:	200028d0 	.word	0x200028d0
    be38:	20002a64 	.word	0x20002a64

0000be3c <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    be3c:	b500      	push	{lr}
    be3e:	b083      	sub	sp, #12
    be40:	f7fe ff9a 	bl	ad78 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    be44:	b110      	cbz	r0, be4c <ev_dma_epout3_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    be46:	4b1d      	ldr	r3, [pc, #116]	; (bebc <ev_dma_epout3_handler+0x80>)
    be48:	2200      	movs	r2, #0
    be4a:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    be4c:	4b1c      	ldr	r3, [pc, #112]	; (bec0 <ev_dma_epout3_handler+0x84>)
    be4e:	2200      	movs	r2, #0
    be50:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    be52:	4b1c      	ldr	r3, [pc, #112]	; (bec4 <ev_dma_epout3_handler+0x88>)
    be54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
    be58:	2b03      	cmp	r3, #3
    be5a:	d01d      	beq.n	be98 <ev_dma_epout3_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
    be5c:	4b19      	ldr	r3, [pc, #100]	; (bec4 <ev_dma_epout3_handler+0x88>)
    be5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    be60:	bb3b      	cbnz	r3, beb2 <ev_dma_epout3_handler+0x76>
    be62:	4b19      	ldr	r3, [pc, #100]	; (bec8 <ev_dma_epout3_handler+0x8c>)
    be64:	f3bf 8f5b 	dmb	ish
    be68:	e853 2f00 	ldrex	r2, [r3]
    be6c:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
    be70:	e843 2100 	strex	r1, r2, [r3]
    be74:	2900      	cmp	r1, #0
    be76:	d1f7      	bne.n	be68 <ev_dma_epout3_handler+0x2c>
    be78:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    be7c:	2306      	movs	r3, #6
    be7e:	f88d 3004 	strb.w	r3, [sp, #4]
    be82:	2303      	movs	r3, #3
    be84:	f88d 3006 	strb.w	r3, [sp, #6]
    be88:	2300      	movs	r3, #0
    be8a:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    be8e:	4b0f      	ldr	r3, [pc, #60]	; (becc <ev_dma_epout3_handler+0x90>)
    be90:	681b      	ldr	r3, [r3, #0]
    be92:	a801      	add	r0, sp, #4
    be94:	4798      	blx	r3
    be96:	e00c      	b.n	beb2 <ev_dma_epout3_handler+0x76>
    be98:	4b0b      	ldr	r3, [pc, #44]	; (bec8 <ev_dma_epout3_handler+0x8c>)
    be9a:	f3bf 8f5b 	dmb	ish
    be9e:	e853 2f00 	ldrex	r2, [r3]
    bea2:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
    bea6:	e843 2100 	strex	r1, r2, [r3]
    beaa:	2900      	cmp	r1, #0
    beac:	d1f7      	bne.n	be9e <ev_dma_epout3_handler+0x62>
    beae:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    beb2:	f7ff fdd1 	bl	ba58 <usbd_dmareq_process>
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    beb6:	b003      	add	sp, #12
    beb8:	f85d fb04 	ldr.w	pc, [sp], #4
    bebc:	40027c1c 	.word	0x40027c1c
    bec0:	20002fca 	.word	0x20002fca
    bec4:	20002944 	.word	0x20002944
    bec8:	200028d0 	.word	0x200028d0
    becc:	20002a64 	.word	0x20002a64

0000bed0 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    bed0:	b500      	push	{lr}
    bed2:	b083      	sub	sp, #12
    bed4:	f7fe ff50 	bl	ad78 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    bed8:	b110      	cbz	r0, bee0 <ev_dma_epout4_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    beda:	4b1d      	ldr	r3, [pc, #116]	; (bf50 <ev_dma_epout4_handler+0x80>)
    bedc:	2200      	movs	r2, #0
    bede:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    bee0:	4b1c      	ldr	r3, [pc, #112]	; (bf54 <ev_dma_epout4_handler+0x84>)
    bee2:	2200      	movs	r2, #0
    bee4:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    bee6:	4b1c      	ldr	r3, [pc, #112]	; (bf58 <ev_dma_epout4_handler+0x88>)
    bee8:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
    beec:	2b03      	cmp	r3, #3
    beee:	d01d      	beq.n	bf2c <ev_dma_epout4_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
    bef0:	4b19      	ldr	r3, [pc, #100]	; (bf58 <ev_dma_epout4_handler+0x88>)
    bef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    bef4:	bb3b      	cbnz	r3, bf46 <ev_dma_epout4_handler+0x76>
    bef6:	4b19      	ldr	r3, [pc, #100]	; (bf5c <ev_dma_epout4_handler+0x8c>)
    bef8:	f3bf 8f5b 	dmb	ish
    befc:	e853 2f00 	ldrex	r2, [r3]
    bf00:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    bf04:	e843 2100 	strex	r1, r2, [r3]
    bf08:	2900      	cmp	r1, #0
    bf0a:	d1f7      	bne.n	befc <ev_dma_epout4_handler+0x2c>
    bf0c:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    bf10:	2306      	movs	r3, #6
    bf12:	f88d 3004 	strb.w	r3, [sp, #4]
    bf16:	2304      	movs	r3, #4
    bf18:	f88d 3006 	strb.w	r3, [sp, #6]
    bf1c:	2300      	movs	r3, #0
    bf1e:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    bf22:	4b0f      	ldr	r3, [pc, #60]	; (bf60 <ev_dma_epout4_handler+0x90>)
    bf24:	681b      	ldr	r3, [r3, #0]
    bf26:	a801      	add	r0, sp, #4
    bf28:	4798      	blx	r3
    bf2a:	e00c      	b.n	bf46 <ev_dma_epout4_handler+0x76>
    bf2c:	4b0b      	ldr	r3, [pc, #44]	; (bf5c <ev_dma_epout4_handler+0x8c>)
    bf2e:	f3bf 8f5b 	dmb	ish
    bf32:	e853 2f00 	ldrex	r2, [r3]
    bf36:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    bf3a:	e843 2100 	strex	r1, r2, [r3]
    bf3e:	2900      	cmp	r1, #0
    bf40:	d1f7      	bne.n	bf32 <ev_dma_epout4_handler+0x62>
    bf42:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    bf46:	f7ff fd87 	bl	ba58 <usbd_dmareq_process>
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    bf4a:	b003      	add	sp, #12
    bf4c:	f85d fb04 	ldr.w	pc, [sp], #4
    bf50:	40027c1c 	.word	0x40027c1c
    bf54:	20002fca 	.word	0x20002fca
    bf58:	20002944 	.word	0x20002944
    bf5c:	200028d0 	.word	0x200028d0
    bf60:	20002a64 	.word	0x20002a64

0000bf64 <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    bf64:	b500      	push	{lr}
    bf66:	b083      	sub	sp, #12
    bf68:	f7fe ff06 	bl	ad78 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    bf6c:	b110      	cbz	r0, bf74 <ev_dma_epout5_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    bf6e:	4b1d      	ldr	r3, [pc, #116]	; (bfe4 <ev_dma_epout5_handler+0x80>)
    bf70:	2200      	movs	r2, #0
    bf72:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    bf74:	4b1c      	ldr	r3, [pc, #112]	; (bfe8 <ev_dma_epout5_handler+0x84>)
    bf76:	2200      	movs	r2, #0
    bf78:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    bf7a:	4b1c      	ldr	r3, [pc, #112]	; (bfec <ev_dma_epout5_handler+0x88>)
    bf7c:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
    bf80:	2b03      	cmp	r3, #3
    bf82:	d01d      	beq.n	bfc0 <ev_dma_epout5_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
    bf84:	4b19      	ldr	r3, [pc, #100]	; (bfec <ev_dma_epout5_handler+0x88>)
    bf86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    bf88:	bb3b      	cbnz	r3, bfda <ev_dma_epout5_handler+0x76>
    bf8a:	4b19      	ldr	r3, [pc, #100]	; (bff0 <ev_dma_epout5_handler+0x8c>)
    bf8c:	f3bf 8f5b 	dmb	ish
    bf90:	e853 2f00 	ldrex	r2, [r3]
    bf94:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
    bf98:	e843 2100 	strex	r1, r2, [r3]
    bf9c:	2900      	cmp	r1, #0
    bf9e:	d1f7      	bne.n	bf90 <ev_dma_epout5_handler+0x2c>
    bfa0:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    bfa4:	2306      	movs	r3, #6
    bfa6:	f88d 3004 	strb.w	r3, [sp, #4]
    bfaa:	2305      	movs	r3, #5
    bfac:	f88d 3006 	strb.w	r3, [sp, #6]
    bfb0:	2300      	movs	r3, #0
    bfb2:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    bfb6:	4b0f      	ldr	r3, [pc, #60]	; (bff4 <ev_dma_epout5_handler+0x90>)
    bfb8:	681b      	ldr	r3, [r3, #0]
    bfba:	a801      	add	r0, sp, #4
    bfbc:	4798      	blx	r3
    bfbe:	e00c      	b.n	bfda <ev_dma_epout5_handler+0x76>
    bfc0:	4b0b      	ldr	r3, [pc, #44]	; (bff0 <ev_dma_epout5_handler+0x8c>)
    bfc2:	f3bf 8f5b 	dmb	ish
    bfc6:	e853 2f00 	ldrex	r2, [r3]
    bfca:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
    bfce:	e843 2100 	strex	r1, r2, [r3]
    bfd2:	2900      	cmp	r1, #0
    bfd4:	d1f7      	bne.n	bfc6 <ev_dma_epout5_handler+0x62>
    bfd6:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    bfda:	f7ff fd3d 	bl	ba58 <usbd_dmareq_process>
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    bfde:	b003      	add	sp, #12
    bfe0:	f85d fb04 	ldr.w	pc, [sp], #4
    bfe4:	40027c1c 	.word	0x40027c1c
    bfe8:	20002fca 	.word	0x20002fca
    bfec:	20002944 	.word	0x20002944
    bff0:	200028d0 	.word	0x200028d0
    bff4:	20002a64 	.word	0x20002a64

0000bff8 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    bff8:	b500      	push	{lr}
    bffa:	b083      	sub	sp, #12
    bffc:	f7fe febc 	bl	ad78 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    c000:	b110      	cbz	r0, c008 <ev_dma_epout6_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    c002:	4b1d      	ldr	r3, [pc, #116]	; (c078 <ev_dma_epout6_handler+0x80>)
    c004:	2200      	movs	r2, #0
    c006:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    c008:	4b1c      	ldr	r3, [pc, #112]	; (c07c <ev_dma_epout6_handler+0x84>)
    c00a:	2200      	movs	r2, #0
    c00c:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    c00e:	4b1c      	ldr	r3, [pc, #112]	; (c080 <ev_dma_epout6_handler+0x88>)
    c010:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
    c014:	2b03      	cmp	r3, #3
    c016:	d01c      	beq.n	c052 <ev_dma_epout6_handler+0x5a>
    else if (p_state->handler.consumer == NULL)
    c018:	4b19      	ldr	r3, [pc, #100]	; (c080 <ev_dma_epout6_handler+0x88>)
    c01a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    c01c:	bb33      	cbnz	r3, c06c <ev_dma_epout6_handler+0x74>
    c01e:	4b19      	ldr	r3, [pc, #100]	; (c084 <ev_dma_epout6_handler+0x8c>)
    c020:	f3bf 8f5b 	dmb	ish
    c024:	e853 2f00 	ldrex	r2, [r3]
    c028:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
    c02c:	e843 2100 	strex	r1, r2, [r3]
    c030:	2900      	cmp	r1, #0
    c032:	d1f7      	bne.n	c024 <ev_dma_epout6_handler+0x2c>
    c034:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    c038:	2306      	movs	r3, #6
    c03a:	f88d 3004 	strb.w	r3, [sp, #4]
    c03e:	f88d 3006 	strb.w	r3, [sp, #6]
    c042:	2300      	movs	r3, #0
    c044:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    c048:	4b0f      	ldr	r3, [pc, #60]	; (c088 <ev_dma_epout6_handler+0x90>)
    c04a:	681b      	ldr	r3, [r3, #0]
    c04c:	a801      	add	r0, sp, #4
    c04e:	4798      	blx	r3
    c050:	e00c      	b.n	c06c <ev_dma_epout6_handler+0x74>
    c052:	4b0c      	ldr	r3, [pc, #48]	; (c084 <ev_dma_epout6_handler+0x8c>)
    c054:	f3bf 8f5b 	dmb	ish
    c058:	e853 2f00 	ldrex	r2, [r3]
    c05c:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
    c060:	e843 2100 	strex	r1, r2, [r3]
    c064:	2900      	cmp	r1, #0
    c066:	d1f7      	bne.n	c058 <ev_dma_epout6_handler+0x60>
    c068:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    c06c:	f7ff fcf4 	bl	ba58 <usbd_dmareq_process>
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    c070:	b003      	add	sp, #12
    c072:	f85d fb04 	ldr.w	pc, [sp], #4
    c076:	bf00      	nop
    c078:	40027c1c 	.word	0x40027c1c
    c07c:	20002fca 	.word	0x20002fca
    c080:	20002944 	.word	0x20002944
    c084:	200028d0 	.word	0x200028d0
    c088:	20002a64 	.word	0x20002a64

0000c08c <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    c08c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    c090:	4b01      	ldr	r3, [pc, #4]	; (c098 <nrfx_usbd_ep_stall+0xc>)
    c092:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
    c096:	4770      	bx	lr
    c098:	40027000 	.word	0x40027000

0000c09c <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
    c09c:	f010 0f08 	tst.w	r0, #8
    c0a0:	d117      	bne.n	c0d2 <nrfx_usbd_ep_stall_check+0x36>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    c0a2:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    c0a6:	f010 0f80 	tst.w	r0, #128	; 0x80
    c0aa:	d10c      	bne.n	c0c6 <nrfx_usbd_ep_stall_check+0x2a>
        return p_reg->HALTED.EPOUT[epnr];
    c0ac:	f503 7388 	add.w	r3, r3, #272	; 0x110
    c0b0:	009b      	lsls	r3, r3, #2
    c0b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c0b6:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    c0ba:	6858      	ldr	r0, [r3, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
    c0bc:	2801      	cmp	r0, #1
    c0be:	bf14      	ite	ne
    c0c0:	2000      	movne	r0, #0
    c0c2:	2001      	moveq	r0, #1
    c0c4:	4770      	bx	lr
        return p_reg->HALTED.EPIN[epnr];
    c0c6:	f503 7384 	add.w	r3, r3, #264	; 0x108
    c0ca:	4a03      	ldr	r2, [pc, #12]	; (c0d8 <nrfx_usbd_ep_stall_check+0x3c>)
    c0cc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    c0d0:	e7f4      	b.n	c0bc <nrfx_usbd_ep_stall_check+0x20>
        return false;
    c0d2:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
    c0d4:	4770      	bx	lr
    c0d6:	bf00      	nop
    c0d8:	40027000 	.word	0x40027000

0000c0dc <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
    c0dc:	4b04      	ldr	r3, [pc, #16]	; (c0f0 <nrfx_usbd_ep_dtoggle_clear+0x14>)
    c0de:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
    c0e2:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    c0e6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
    c0ea:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
    c0ee:	4770      	bx	lr
    c0f0:	40027000 	.word	0x40027000

0000c0f4 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    c0f4:	b510      	push	{r4, lr}
    c0f6:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    c0f8:	2208      	movs	r2, #8
    c0fa:	2100      	movs	r1, #0
    c0fc:	f007 f89c 	bl	13238 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    c100:	4b11      	ldr	r3, [pc, #68]	; (c148 <nrfx_usbd_setup_get+0x54>)
    c102:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    c106:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
    c108:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    c10c:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
    c10e:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    c112:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    c114:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    c118:	0209      	lsls	r1, r1, #8
    c11a:	b289      	uxth	r1, r1
    c11c:	430a      	orrs	r2, r1
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
    c11e:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
    c120:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    c124:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    c126:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    c12a:	0209      	lsls	r1, r1, #8
    c12c:	b289      	uxth	r1, r1
    c12e:	430a      	orrs	r2, r1
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
    c130:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
    c132:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    c136:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    c138:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    c13c:	021b      	lsls	r3, r3, #8
    c13e:	b29b      	uxth	r3, r3
    c140:	4313      	orrs	r3, r2
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
    c142:	80e3      	strh	r3, [r4, #6]
}
    c144:	bd10      	pop	{r4, pc}
    c146:	bf00      	nop
    c148:	40027000 	.word	0x40027000

0000c14c <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    c14c:	4b02      	ldr	r3, [pc, #8]	; (c158 <nrfx_usbd_setup_data_clear+0xc>)
    c14e:	2201      	movs	r2, #1
    c150:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    c152:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
    c154:	4770      	bx	lr
    c156:	bf00      	nop
    c158:	4002704c 	.word	0x4002704c

0000c15c <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    c15c:	b500      	push	{lr}
    c15e:	b083      	sub	sp, #12
    c160:	f7fe fe0a 	bl	ad78 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    c164:	b110      	cbz	r0, c16c <ev_dma_epout0_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    c166:	4b1d      	ldr	r3, [pc, #116]	; (c1dc <ev_dma_epout0_handler+0x80>)
    c168:	2200      	movs	r2, #0
    c16a:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    c16c:	4b1c      	ldr	r3, [pc, #112]	; (c1e0 <ev_dma_epout0_handler+0x84>)
    c16e:	2200      	movs	r2, #0
    c170:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    c172:	4b1c      	ldr	r3, [pc, #112]	; (c1e4 <ev_dma_epout0_handler+0x88>)
    c174:	7b9b      	ldrb	r3, [r3, #14]
    c176:	2b03      	cmp	r3, #3
    c178:	d005      	beq.n	c186 <ev_dma_epout0_handler+0x2a>
    else if (p_state->handler.consumer == NULL)
    c17a:	4b1a      	ldr	r3, [pc, #104]	; (c1e4 <ev_dma_epout0_handler+0x88>)
    c17c:	681b      	ldr	r3, [r3, #0]
    c17e:	b183      	cbz	r3, c1a2 <ev_dma_epout0_handler+0x46>
        nrfx_usbd_setup_data_clear();
    c180:	f7ff ffe4 	bl	c14c <nrfx_usbd_setup_data_clear>
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    c184:	e026      	b.n	c1d4 <ev_dma_epout0_handler+0x78>
    c186:	4b18      	ldr	r3, [pc, #96]	; (c1e8 <ev_dma_epout0_handler+0x8c>)
    c188:	f3bf 8f5b 	dmb	ish
    c18c:	e853 2f00 	ldrex	r2, [r3]
    c190:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    c194:	e843 2100 	strex	r1, r2, [r3]
    c198:	2900      	cmp	r1, #0
    c19a:	d1f7      	bne.n	c18c <ev_dma_epout0_handler+0x30>
    c19c:	f3bf 8f5b 	dmb	ish
    c1a0:	e018      	b.n	c1d4 <ev_dma_epout0_handler+0x78>
    c1a2:	4b11      	ldr	r3, [pc, #68]	; (c1e8 <ev_dma_epout0_handler+0x8c>)
    c1a4:	f3bf 8f5b 	dmb	ish
    c1a8:	e853 2f00 	ldrex	r2, [r3]
    c1ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    c1b0:	e843 2100 	strex	r1, r2, [r3]
    c1b4:	2900      	cmp	r1, #0
    c1b6:	d1f7      	bne.n	c1a8 <ev_dma_epout0_handler+0x4c>
    c1b8:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    c1bc:	2306      	movs	r3, #6
    c1be:	f88d 3004 	strb.w	r3, [sp, #4]
    c1c2:	2300      	movs	r3, #0
    c1c4:	f88d 3006 	strb.w	r3, [sp, #6]
    c1c8:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    c1cc:	4b07      	ldr	r3, [pc, #28]	; (c1ec <ev_dma_epout0_handler+0x90>)
    c1ce:	681b      	ldr	r3, [r3, #0]
    c1d0:	a801      	add	r0, sp, #4
    c1d2:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    c1d4:	b003      	add	sp, #12
    c1d6:	f85d fb04 	ldr.w	pc, [sp], #4
    c1da:	bf00      	nop
    c1dc:	40027c1c 	.word	0x40027c1c
    c1e0:	20002fca 	.word	0x20002fca
    c1e4:	20002944 	.word	0x20002944
    c1e8:	200028d0 	.word	0x200028d0
    c1ec:	20002a64 	.word	0x20002a64

0000c1f0 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    c1f0:	4b02      	ldr	r3, [pc, #8]	; (c1fc <nrfx_usbd_setup_clear+0xc>)
    c1f2:	2201      	movs	r2, #1
    c1f4:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    c1f6:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
    c1f8:	4770      	bx	lr
    c1fa:	bf00      	nop
    c1fc:	40027050 	.word	0x40027050

0000c200 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    c200:	4b02      	ldr	r3, [pc, #8]	; (c20c <nrfx_usbd_setup_stall+0xc>)
    c202:	2201      	movs	r2, #1
    c204:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    c206:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
    c208:	4770      	bx	lr
    c20a:	bf00      	nop
    c20c:	40027054 	.word	0x40027054

0000c210 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
    c210:	4b01      	ldr	r3, [pc, #4]	; (c218 <nrfx_usbd_last_setup_dir_get+0x8>)
    c212:	7818      	ldrb	r0, [r3, #0]
    c214:	4770      	bx	lr
    c216:	bf00      	nop
    c218:	20002fcc 	.word	0x20002fcc

0000c21c <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    c21c:	b410      	push	{r4}
	__asm__ volatile(
    c21e:	f04f 0320 	mov.w	r3, #32
    c222:	f3ef 8411 	mrs	r4, BASEPRI
    c226:	f383 8812 	msr	BASEPRI_MAX, r3
    c22a:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_EP_BITPOS(ep);
    c22e:	b243      	sxtb	r3, r0
    c230:	2b00      	cmp	r3, #0
    c232:	db1e      	blt.n	c272 <nrfx_usbd_transfer_out_drop+0x56>
    c234:	2210      	movs	r2, #16
    c236:	f003 030f 	and.w	r3, r3, #15
    c23a:	4413      	add	r3, r2
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
    c23c:	2201      	movs	r2, #1
    c23e:	fa02 f303 	lsl.w	r3, r2, r3
    c242:	490d      	ldr	r1, [pc, #52]	; (c278 <nrfx_usbd_transfer_out_drop+0x5c>)
    c244:	680a      	ldr	r2, [r1, #0]
    c246:	ea22 0203 	bic.w	r2, r2, r3
    c24a:	600a      	str	r2, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
    c24c:	f010 0f08 	tst.w	r0, #8
    c250:	d109      	bne.n	c266 <nrfx_usbd_transfer_out_drop+0x4a>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    c252:	f000 000f 	and.w	r0, r0, #15
    c256:	4b09      	ldr	r3, [pc, #36]	; (c27c <nrfx_usbd_transfer_out_drop+0x60>)
    c258:	f500 7094 	add.w	r0, r0, #296	; 0x128
    c25c:	2200      	movs	r2, #0
    c25e:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    c262:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	__asm__ volatile(
    c266:	f384 8811 	msr	BASEPRI, r4
    c26a:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    c26e:	bc10      	pop	{r4}
    c270:	4770      	bx	lr
    return NRFX_USBD_EP_BITPOS(ep);
    c272:	2200      	movs	r2, #0
    c274:	e7df      	b.n	c236 <nrfx_usbd_transfer_out_drop+0x1a>
    c276:	bf00      	nop
    c278:	20002940 	.word	0x20002940
    c27c:	40027000 	.word	0x40027000

0000c280 <ev_setup_handler>:
{
    c280:	b5f0      	push	{r4, r5, r6, r7, lr}
    c282:	b083      	sub	sp, #12
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    c284:	4b5f      	ldr	r3, [pc, #380]	; (c404 <ev_setup_handler+0x184>)
    c286:	f8d3 4480 	ldr.w	r4, [r3, #1152]	; 0x480
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    c28a:	4b5f      	ldr	r3, [pc, #380]	; (c408 <ev_setup_handler+0x188>)
    c28c:	681b      	ldr	r3, [r3, #0]
    c28e:	43db      	mvns	r3, r3
    c290:	b29b      	uxth	r3, r3
    c292:	4a5e      	ldr	r2, [pc, #376]	; (c40c <ev_setup_handler+0x18c>)
    c294:	6812      	ldr	r2, [r2, #0]
    c296:	4313      	orrs	r3, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    c298:	4a5d      	ldr	r2, [pc, #372]	; (c410 <ev_setup_handler+0x190>)
    c29a:	7810      	ldrb	r0, [r2, #0]
    return NRFX_USBD_EP_BITPOS(ep);
    c29c:	f992 2000 	ldrsb.w	r2, [r2]
    c2a0:	2a00      	cmp	r2, #0
    c2a2:	db2e      	blt.n	c302 <ev_setup_handler+0x82>
    c2a4:	2110      	movs	r1, #16
    c2a6:	f002 020f 	and.w	r2, r2, #15
    c2aa:	4411      	add	r1, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    c2ac:	2201      	movs	r2, #1
    c2ae:	408a      	lsls	r2, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    c2b0:	4213      	tst	r3, r2
    c2b2:	d128      	bne.n	c306 <ev_setup_handler+0x86>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    c2b4:	f014 0f80 	tst.w	r4, #128	; 0x80
    c2b8:	f040 80a2 	bne.w	c400 <ev_setup_handler+0x180>
    c2bc:	2200      	movs	r2, #0
    m_last_setup_dir =
    c2be:	4b54      	ldr	r3, [pc, #336]	; (c410 <ev_setup_handler+0x190>)
    c2c0:	701a      	strb	r2, [r3, #0]
    c2c2:	4b52      	ldr	r3, [pc, #328]	; (c40c <ev_setup_handler+0x18c>)
    c2c4:	f3bf 8f5b 	dmb	ish
    c2c8:	e853 2f00 	ldrex	r2, [r3]
    c2cc:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
    c2d0:	e843 2100 	strex	r1, r2, [r3]
    c2d4:	2900      	cmp	r1, #0
    c2d6:	d1f7      	bne.n	c2c8 <ev_setup_handler+0x48>
    c2d8:	f3bf 8f5b 	dmb	ish
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    c2dc:	4a4a      	ldr	r2, [pc, #296]	; (c408 <ev_setup_handler+0x188>)
    c2de:	6813      	ldr	r3, [r2, #0]
    c2e0:	f043 0301 	orr.w	r3, r3, #1
    c2e4:	6013      	str	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
    c2e6:	2300      	movs	r3, #0
    c2e8:	f8ad 3005 	strh.w	r3, [sp, #5]
    c2ec:	f88d 3007 	strb.w	r3, [sp, #7]
    c2f0:	2305      	movs	r3, #5
    c2f2:	f88d 3004 	strb.w	r3, [sp, #4]
    m_event_handler(&evt);
    c2f6:	4b47      	ldr	r3, [pc, #284]	; (c414 <ev_setup_handler+0x194>)
    c2f8:	681b      	ldr	r3, [r3, #0]
    c2fa:	a801      	add	r0, sp, #4
    c2fc:	4798      	blx	r3
}
    c2fe:	b003      	add	sp, #12
    c300:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NRFX_USBD_EP_BITPOS(ep);
    c302:	2100      	movs	r1, #0
    c304:	e7cf      	b.n	c2a6 <ev_setup_handler+0x26>
	__asm__ volatile(
    c306:	f04f 0320 	mov.w	r3, #32
    c30a:	f3ef 8611 	mrs	r6, BASEPRI
    c30e:	f383 8812 	msr	BASEPRI_MAX, r3
    c312:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    c316:	b243      	sxtb	r3, r0
    c318:	2b00      	cmp	r3, #0
    c31a:	db26      	blt.n	c36a <ev_setup_handler+0xea>
    c31c:	4d3e      	ldr	r5, [pc, #248]	; (c418 <ev_setup_handler+0x198>)
        NRF_USBD_EP_NR_GET(ep));
    c31e:	f000 020f 	and.w	r2, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    c322:	eb05 1502 	add.w	r5, r5, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
    c326:	2b00      	cmp	r3, #0
    c328:	db24      	blt.n	c374 <ev_setup_handler+0xf4>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    c32a:	4a38      	ldr	r2, [pc, #224]	; (c40c <ev_setup_handler+0x18c>)
    c32c:	6812      	ldr	r2, [r2, #0]
    c32e:	43d2      	mvns	r2, r2
    return NRFX_USBD_EP_BITPOS(ep);
    c330:	f003 030f 	and.w	r3, r3, #15
    c334:	3310      	adds	r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    c336:	40da      	lsrs	r2, r3
    c338:	f012 0f01 	tst.w	r2, #1
    c33c:	d117      	bne.n	c36e <ev_setup_handler+0xee>
            p_state->handler.consumer = NULL;
    c33e:	2200      	movs	r2, #0
    c340:	602a      	str	r2, [r5, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    c342:	2201      	movs	r2, #1
    c344:	fa02 f303 	lsl.w	r3, r2, r3
    c348:	4930      	ldr	r1, [pc, #192]	; (c40c <ev_setup_handler+0x18c>)
    c34a:	680a      	ldr	r2, [r1, #0]
    c34c:	ea22 0203 	bic.w	r2, r2, r3
    c350:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    c352:	492d      	ldr	r1, [pc, #180]	; (c408 <ev_setup_handler+0x188>)
    c354:	680a      	ldr	r2, [r1, #0]
    c356:	ea22 0303 	bic.w	r3, r2, r3
    c35a:	600b      	str	r3, [r1, #0]
        p_state->status = NRFX_USBD_EP_ABORTED;
    c35c:	2303      	movs	r3, #3
    c35e:	73ab      	strb	r3, [r5, #14]
	__asm__ volatile(
    c360:	f386 8811 	msr	BASEPRI, r6
    c364:	f3bf 8f6f 	isb	sy
}
    c368:	e7a4      	b.n	c2b4 <ev_setup_handler+0x34>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    c36a:	4d2c      	ldr	r5, [pc, #176]	; (c41c <ev_setup_handler+0x19c>)
    c36c:	e7d7      	b.n	c31e <ev_setup_handler+0x9e>
            nrfx_usbd_transfer_out_drop(ep);
    c36e:	f7ff ff55 	bl	c21c <nrfx_usbd_transfer_out_drop>
    c372:	e7f3      	b.n	c35c <ev_setup_handler+0xdc>
        if(!NRF_USBD_EPISO_CHECK(ep))
    c374:	f010 0f08 	tst.w	r0, #8
    c378:	d10f      	bne.n	c39a <ev_setup_handler+0x11a>
            if(ep != NRFX_USBD_EPIN0)
    c37a:	2880      	cmp	r0, #128	; 0x80
    c37c:	d032      	beq.n	c3e4 <ev_setup_handler+0x164>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    c37e:	f202 32da 	addw	r2, r2, #986	; 0x3da
    c382:	0052      	lsls	r2, r2, #1
    c384:	4926      	ldr	r1, [pc, #152]	; (c420 <ev_setup_handler+0x1a0>)
    c386:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    c388:	3104      	adds	r1, #4
    c38a:	680a      	ldr	r2, [r1, #0]
    c38c:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
    c38e:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    c392:	680f      	ldr	r7, [r1, #0]
    c394:	433a      	orrs	r2, r7
    c396:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    c398:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    c39a:	4a1b      	ldr	r2, [pc, #108]	; (c408 <ev_setup_handler+0x188>)
    c39c:	6811      	ldr	r1, [r2, #0]
    c39e:	4a1b      	ldr	r2, [pc, #108]	; (c40c <ev_setup_handler+0x18c>)
    c3a0:	6817      	ldr	r7, [r2, #0]
    c3a2:	ea67 0c01 	orn	ip, r7, r1
    return NRFX_USBD_EP_BITPOS(ep);
    c3a6:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    c3aa:	2201      	movs	r2, #1
    c3ac:	fa02 f303 	lsl.w	r3, r2, r3
    c3b0:	ea1c 0f03 	tst.w	ip, r3
    c3b4:	d0d4      	beq.n	c360 <ev_setup_handler+0xe0>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    c3b6:	ea27 0703 	bic.w	r7, r7, r3
    c3ba:	4a14      	ldr	r2, [pc, #80]	; (c40c <ev_setup_handler+0x18c>)
    c3bc:	6017      	str	r7, [r2, #0]
            m_ep_ready       |=   1U << ep2bit(ep) ;
    c3be:	430b      	orrs	r3, r1
    c3c0:	4a11      	ldr	r2, [pc, #68]	; (c408 <ev_setup_handler+0x188>)
    c3c2:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
    c3c4:	2300      	movs	r3, #0
    c3c6:	602b      	str	r3, [r5, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    c3c8:	2303      	movs	r3, #3
    c3ca:	73ab      	strb	r3, [r5, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    c3cc:	2206      	movs	r2, #6
    c3ce:	f88d 2000 	strb.w	r2, [sp]
    c3d2:	f88d 0002 	strb.w	r0, [sp, #2]
    c3d6:	f88d 3003 	strb.w	r3, [sp, #3]
            m_event_handler(&evt);
    c3da:	4b0e      	ldr	r3, [pc, #56]	; (c414 <ev_setup_handler+0x194>)
    c3dc:	681b      	ldr	r3, [r3, #0]
    c3de:	4668      	mov	r0, sp
    c3e0:	4798      	blx	r3
    c3e2:	e7bd      	b.n	c360 <ev_setup_handler+0xe0>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    c3e4:	4a0e      	ldr	r2, [pc, #56]	; (c420 <ev_setup_handler+0x1a0>)
    c3e6:	f240 71b4 	movw	r1, #1972	; 0x7b4
    c3ea:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    c3ec:	490d      	ldr	r1, [pc, #52]	; (c424 <ev_setup_handler+0x1a4>)
    c3ee:	680a      	ldr	r2, [r1, #0]
    c3f0:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
    c3f2:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    c3f6:	680f      	ldr	r7, [r1, #0]
    c3f8:	433a      	orrs	r2, r7
    c3fa:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    c3fc:	680a      	ldr	r2, [r1, #0]
    c3fe:	e7cc      	b.n	c39a <ev_setup_handler+0x11a>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    c400:	2280      	movs	r2, #128	; 0x80
    c402:	e75c      	b.n	c2be <ev_setup_handler+0x3e>
    c404:	40027000 	.word	0x40027000
    c408:	20002940 	.word	0x20002940
    c40c:	200028d0 	.word	0x200028d0
    c410:	20002fcc 	.word	0x20002fcc
    c414:	20002a64 	.word	0x20002a64
    c418:	20002944 	.word	0x20002944
    c41c:	200029d4 	.word	0x200029d4
    c420:	40027800 	.word	0x40027800
    c424:	40027804 	.word	0x40027804

0000c428 <nrfx_usbd_irq_handler>:
{
    c428:	b570      	push	{r4, r5, r6, lr}
    return p_reg->INTENSET;
    c42a:	4b22      	ldr	r3, [pc, #136]	; (c4b4 <nrfx_usbd_irq_handler+0x8c>)
    c42c:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
    uint32_t active = 0;
    c430:	2500      	movs	r5, #0
    while (to_process)
    c432:	e006      	b.n	c442 <nrfx_usbd_irq_handler+0x1a>
    return 32U;
    c434:	2220      	movs	r2, #32
    c436:	e00b      	b.n	c450 <nrfx_usbd_irq_handler+0x28>
        to_process &= ~(1UL << event_nr);
    c438:	2301      	movs	r3, #1
    c43a:	fa03 f202 	lsl.w	r2, r3, r2
    c43e:	ea21 0102 	bic.w	r1, r1, r2
    while (to_process)
    c442:	b1c1      	cbz	r1, c476 <nrfx_usbd_irq_handler+0x4e>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    c444:	fa91 f2a1 	rbit	r2, r1
  if (value == 0U)
    c448:	2a00      	cmp	r2, #0
    c44a:	d0f3      	beq.n	c434 <nrfx_usbd_irq_handler+0xc>
  return __builtin_clz(value);
    c44c:	fab2 f282 	clz	r2, r2
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    c450:	f102 0340 	add.w	r3, r2, #64	; 0x40
    c454:	009b      	lsls	r3, r3, #2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    c456:	b29b      	uxth	r3, r3
    c458:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c45c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    c460:	6818      	ldr	r0, [r3, #0]
    if (ret)
    c462:	b110      	cbz	r0, c46a <nrfx_usbd_irq_handler+0x42>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    c464:	2400      	movs	r4, #0
    c466:	601c      	str	r4, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    c468:	681b      	ldr	r3, [r3, #0]
        if (nrf_usbd_event_get_and_clear(NRF_USBD,
    c46a:	2800      	cmp	r0, #0
    c46c:	d0e4      	beq.n	c438 <nrfx_usbd_irq_handler+0x10>
            active |= 1UL << event_nr;
    c46e:	2301      	movs	r3, #1
    c470:	4093      	lsls	r3, r2
    c472:	431d      	orrs	r5, r3
    c474:	e7e0      	b.n	c438 <nrfx_usbd_irq_handler+0x10>
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    c476:	f405 0600 	and.w	r6, r5, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    c47a:	f425 0500 	bic.w	r5, r5, #8388608	; 0x800000
    while (active)
    c47e:	e00a      	b.n	c496 <nrfx_usbd_irq_handler+0x6e>
    c480:	fab4 f484 	clz	r4, r4
        m_isr[event_nr]();
    c484:	4b0c      	ldr	r3, [pc, #48]	; (c4b8 <nrfx_usbd_irq_handler+0x90>)
    c486:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    c48a:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    c48c:	2301      	movs	r3, #1
    c48e:	fa03 f404 	lsl.w	r4, r3, r4
    c492:	ea25 0504 	bic.w	r5, r5, r4
    while (active)
    c496:	b12d      	cbz	r5, c4a4 <nrfx_usbd_irq_handler+0x7c>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    c498:	fa95 f4a5 	rbit	r4, r5
  if (value == 0U)
    c49c:	2c00      	cmp	r4, #0
    c49e:	d1ef      	bne.n	c480 <nrfx_usbd_irq_handler+0x58>
    return 32U;
    c4a0:	2420      	movs	r4, #32
    c4a2:	e7ef      	b.n	c484 <nrfx_usbd_irq_handler+0x5c>
    usbd_dmareq_process();
    c4a4:	f7ff fad8 	bl	ba58 <usbd_dmareq_process>
    if (setup_active)
    c4a8:	b906      	cbnz	r6, c4ac <nrfx_usbd_irq_handler+0x84>
}
    c4aa:	bd70      	pop	{r4, r5, r6, pc}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    c4ac:	f7ff fee8 	bl	c280 <ev_setup_handler>
}
    c4b0:	e7fb      	b.n	c4aa <nrfx_usbd_irq_handler+0x82>
    c4b2:	bf00      	nop
    c4b4:	40027000 	.word	0x40027000
    c4b8:	00017c04 	.word	0x00017c04

0000c4bc <nrfx_usbd_ep_enable>:
{
    c4bc:	b538      	push	{r3, r4, r5, lr}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    c4be:	b244      	sxtb	r4, r0
    c4c0:	2c00      	cmp	r4, #0
    c4c2:	db22      	blt.n	c50a <nrfx_usbd_ep_enable+0x4e>
    c4c4:	4b26      	ldr	r3, [pc, #152]	; (c560 <nrfx_usbd_ep_enable+0xa4>)
    c4c6:	f000 010f 	and.w	r1, r0, #15
    c4ca:	5c5a      	ldrb	r2, [r3, r1]
    c4cc:	2301      	movs	r3, #1
    c4ce:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
    c4d0:	4a24      	ldr	r2, [pc, #144]	; (c564 <nrfx_usbd_ep_enable+0xa8>)
    c4d2:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    if (NRF_USBD_EPIN_CHECK(ep))
    c4d6:	2c00      	cmp	r4, #0
    c4d8:	db19      	blt.n	c50e <nrfx_usbd_ep_enable+0x52>
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
    c4da:	4b22      	ldr	r3, [pc, #136]	; (c564 <nrfx_usbd_ep_enable+0xa8>)
    c4dc:	f8d3 3514 	ldr.w	r3, [r3, #1300]	; 0x514
    c4e0:	40cb      	lsrs	r3, r1
    c4e2:	f003 0301 	and.w	r3, r3, #1
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    c4e6:	b97b      	cbnz	r3, c508 <nrfx_usbd_ep_enable+0x4c>
    if (NRF_USBD_EPIN_CHECK(ep))
    c4e8:	2c00      	cmp	r4, #0
    c4ea:	db16      	blt.n	c51a <nrfx_usbd_ep_enable+0x5e>
        p_reg->EPOUTEN |= 1UL << epnr;
    c4ec:	4d1d      	ldr	r5, [pc, #116]	; (c564 <nrfx_usbd_ep_enable+0xa8>)
    c4ee:	f8d5 3514 	ldr.w	r3, [r5, #1300]	; 0x514
    c4f2:	2201      	movs	r2, #1
    c4f4:	408a      	lsls	r2, r1
    c4f6:	4313      	orrs	r3, r2
    c4f8:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    c4fc:	b121      	cbz	r1, c508 <nrfx_usbd_ep_enable+0x4c>
    c4fe:	2c00      	cmp	r4, #0
    c500:	db02      	blt.n	c508 <nrfx_usbd_ep_enable+0x4c>
        NRF_USBD_EPOUT_CHECK(ep) &&
    c502:	f010 0f08 	tst.w	r0, #8
    c506:	d011      	beq.n	c52c <nrfx_usbd_ep_enable+0x70>
}
    c508:	bd38      	pop	{r3, r4, r5, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    c50a:	4b17      	ldr	r3, [pc, #92]	; (c568 <nrfx_usbd_ep_enable+0xac>)
    c50c:	e7db      	b.n	c4c6 <nrfx_usbd_ep_enable+0xa>
        return 0 != (p_reg->EPINEN & (1UL << epnr));
    c50e:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    c512:	40cb      	lsrs	r3, r1
    c514:	f003 0301 	and.w	r3, r3, #1
    c518:	e7e5      	b.n	c4e6 <nrfx_usbd_ep_enable+0x2a>
        p_reg->EPINEN |= 1UL << epnr;
    c51a:	4d12      	ldr	r5, [pc, #72]	; (c564 <nrfx_usbd_ep_enable+0xa8>)
    c51c:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510
    c520:	2201      	movs	r2, #1
    c522:	408a      	lsls	r2, r1
    c524:	4313      	orrs	r3, r2
    c526:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
    c52a:	e7e7      	b.n	c4fc <nrfx_usbd_ep_enable+0x40>
	__asm__ volatile(
    c52c:	f04f 0320 	mov.w	r3, #32
    c530:	f3ef 8511 	mrs	r5, BASEPRI
    c534:	f383 8812 	msr	BASEPRI_MAX, r3
    c538:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    c53c:	f7ff fe6e 	bl	c21c <nrfx_usbd_transfer_out_drop>
    return NRFX_USBD_EP_BITPOS(ep);
    c540:	f004 040f 	and.w	r4, r4, #15
    c544:	3410      	adds	r4, #16
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    c546:	2301      	movs	r3, #1
    c548:	fa03 f404 	lsl.w	r4, r3, r4
    c54c:	4a07      	ldr	r2, [pc, #28]	; (c56c <nrfx_usbd_ep_enable+0xb0>)
    c54e:	6813      	ldr	r3, [r2, #0]
    c550:	ea23 0304 	bic.w	r3, r3, r4
    c554:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    c556:	f385 8811 	msr	BASEPRI, r5
    c55a:	f3bf 8f6f 	isb	sy
}
    c55e:	e7d3      	b.n	c508 <nrfx_usbd_ep_enable+0x4c>
    c560:	00017be4 	.word	0x00017be4
    c564:	40027000 	.word	0x40027000
    c568:	00017bc4 	.word	0x00017bc4
    c56c:	200028d0 	.word	0x200028d0

0000c570 <nrfx_usbd_ep_stall_clear>:
{
    c570:	b510      	push	{r4, lr}
    c572:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    c574:	f010 0f80 	tst.w	r0, #128	; 0x80
    c578:	d003      	beq.n	c582 <nrfx_usbd_ep_stall_clear+0x12>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    c57a:	4b06      	ldr	r3, [pc, #24]	; (c594 <nrfx_usbd_ep_stall_clear+0x24>)
    c57c:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
    c580:	bd10      	pop	{r4, pc}
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    c582:	f7ff fd8b 	bl	c09c <nrfx_usbd_ep_stall_check>
    c586:	2800      	cmp	r0, #0
    c588:	d0f7      	beq.n	c57a <nrfx_usbd_ep_stall_clear+0xa>
        nrfx_usbd_transfer_out_drop(ep);
    c58a:	4620      	mov	r0, r4
    c58c:	f7ff fe46 	bl	c21c <nrfx_usbd_transfer_out_drop>
    c590:	e7f3      	b.n	c57a <nrfx_usbd_ep_stall_clear+0xa>
    c592:	bf00      	nop
    c594:	40027000 	.word	0x40027000

0000c598 <usbd_ep_abort_all>:
{
    c598:	b5f0      	push	{r4, r5, r6, r7, lr}
    c59a:	b083      	sub	sp, #12
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    c59c:	4b59      	ldr	r3, [pc, #356]	; (c704 <usbd_ep_abort_all+0x16c>)
    c59e:	885b      	ldrh	r3, [r3, #2]
    c5a0:	4a59      	ldr	r2, [pc, #356]	; (c708 <usbd_ep_abort_all+0x170>)
    c5a2:	6815      	ldr	r5, [r2, #0]
    c5a4:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    while (0 != ep_waiting)
    c5a8:	e016      	b.n	c5d8 <usbd_ep_abort_all+0x40>
    c5aa:	2420      	movs	r4, #32
    c5ac:	e01f      	b.n	c5ee <usbd_ep_abort_all+0x56>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    c5ae:	f044 0380 	orr.w	r3, r4, #128	; 0x80
    c5b2:	e01f      	b.n	c5f4 <usbd_ep_abort_all+0x5c>
    c5b4:	f044 0080 	orr.w	r0, r4, #128	; 0x80
    c5b8:	e024      	b.n	c604 <usbd_ep_abort_all+0x6c>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    c5ba:	4e54      	ldr	r6, [pc, #336]	; (c70c <usbd_ep_abort_all+0x174>)
    c5bc:	e02e      	b.n	c61c <usbd_ep_abort_all+0x84>
            nrfx_usbd_transfer_out_drop(ep);
    c5be:	f7ff fe2d 	bl	c21c <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
    c5c2:	2303      	movs	r3, #3
    c5c4:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
    c5c6:	f387 8811 	msr	BASEPRI, r7
    c5ca:	f3bf 8f6f 	isb	sy
        ep_waiting &= ~(1U << bitpos);
    c5ce:	2301      	movs	r3, #1
    c5d0:	fa03 f404 	lsl.w	r4, r3, r4
    c5d4:	ea25 0504 	bic.w	r5, r5, r4
    while (0 != ep_waiting)
    c5d8:	2d00      	cmp	r5, #0
    c5da:	f000 808c 	beq.w	c6f6 <usbd_ep_abort_all+0x15e>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    c5de:	fa95 f4a5 	rbit	r4, r5
  if (value == 0U)
    c5e2:	2c00      	cmp	r4, #0
    c5e4:	d0e1      	beq.n	c5aa <usbd_ep_abort_all+0x12>
  return __builtin_clz(value);
    c5e6:	fab4 f484 	clz	r4, r4
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    c5ea:	2c0f      	cmp	r4, #15
    c5ec:	d9df      	bls.n	c5ae <usbd_ep_abort_all+0x16>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    c5ee:	f1a4 0310 	sub.w	r3, r4, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    c5f2:	b2db      	uxtb	r3, r3
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    c5f4:	f013 0f08 	tst.w	r3, #8
    c5f8:	d1e9      	bne.n	c5ce <usbd_ep_abort_all+0x36>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    c5fa:	2c0f      	cmp	r4, #15
    c5fc:	d9da      	bls.n	c5b4 <usbd_ep_abort_all+0x1c>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    c5fe:	f1a4 0010 	sub.w	r0, r4, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    c602:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
    c604:	f04f 0320 	mov.w	r3, #32
    c608:	f3ef 8711 	mrs	r7, BASEPRI
    c60c:	f383 8812 	msr	BASEPRI_MAX, r3
    c610:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    c614:	b243      	sxtb	r3, r0
    c616:	2b00      	cmp	r3, #0
    c618:	dbcf      	blt.n	c5ba <usbd_ep_abort_all+0x22>
    c61a:	4e3d      	ldr	r6, [pc, #244]	; (c710 <usbd_ep_abort_all+0x178>)
        NRF_USBD_EP_NR_GET(ep));
    c61c:	f000 020f 	and.w	r2, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    c620:	eb06 1602 	add.w	r6, r6, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
    c624:	2b00      	cmp	r3, #0
    c626:	db19      	blt.n	c65c <usbd_ep_abort_all+0xc4>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    c628:	4a37      	ldr	r2, [pc, #220]	; (c708 <usbd_ep_abort_all+0x170>)
    c62a:	6812      	ldr	r2, [r2, #0]
    c62c:	43d2      	mvns	r2, r2
    return NRFX_USBD_EP_BITPOS(ep);
    c62e:	f003 030f 	and.w	r3, r3, #15
    c632:	3310      	adds	r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    c634:	40da      	lsrs	r2, r3
    c636:	f012 0f01 	tst.w	r2, #1
    c63a:	d1c0      	bne.n	c5be <usbd_ep_abort_all+0x26>
            p_state->handler.consumer = NULL;
    c63c:	2200      	movs	r2, #0
    c63e:	6032      	str	r2, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    c640:	2201      	movs	r2, #1
    c642:	fa02 f303 	lsl.w	r3, r2, r3
    c646:	4930      	ldr	r1, [pc, #192]	; (c708 <usbd_ep_abort_all+0x170>)
    c648:	680a      	ldr	r2, [r1, #0]
    c64a:	ea22 0203 	bic.w	r2, r2, r3
    c64e:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    c650:	492c      	ldr	r1, [pc, #176]	; (c704 <usbd_ep_abort_all+0x16c>)
    c652:	680a      	ldr	r2, [r1, #0]
    c654:	ea22 0303 	bic.w	r3, r2, r3
    c658:	600b      	str	r3, [r1, #0]
    c65a:	e7b2      	b.n	c5c2 <usbd_ep_abort_all+0x2a>
        if(!NRF_USBD_EPISO_CHECK(ep))
    c65c:	f010 0f08 	tst.w	r0, #8
    c660:	d111      	bne.n	c686 <usbd_ep_abort_all+0xee>
            if(ep != NRFX_USBD_EPIN0)
    c662:	2880      	cmp	r0, #128	; 0x80
    c664:	d037      	beq.n	c6d6 <usbd_ep_abort_all+0x13e>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    c666:	f202 32da 	addw	r2, r2, #986	; 0x3da
    c66a:	0052      	lsls	r2, r2, #1
    c66c:	4929      	ldr	r1, [pc, #164]	; (c714 <usbd_ep_abort_all+0x17c>)
    c66e:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    c670:	3104      	adds	r1, #4
    c672:	680a      	ldr	r2, [r1, #0]
    c674:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
    c676:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    c67a:	f8d1 c000 	ldr.w	ip, [r1]
    c67e:	ea42 020c 	orr.w	r2, r2, ip
    c682:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    c684:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    c686:	4a1f      	ldr	r2, [pc, #124]	; (c704 <usbd_ep_abort_all+0x16c>)
    c688:	6811      	ldr	r1, [r2, #0]
    c68a:	4a1f      	ldr	r2, [pc, #124]	; (c708 <usbd_ep_abort_all+0x170>)
    c68c:	f8d2 c000 	ldr.w	ip, [r2]
    c690:	ea6c 0e01 	orn	lr, ip, r1
    return NRFX_USBD_EP_BITPOS(ep);
    c694:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    c698:	2201      	movs	r2, #1
    c69a:	fa02 f303 	lsl.w	r3, r2, r3
    c69e:	ea1e 0f03 	tst.w	lr, r3
    c6a2:	d090      	beq.n	c5c6 <usbd_ep_abort_all+0x2e>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    c6a4:	ea2c 0203 	bic.w	r2, ip, r3
    c6a8:	f8df c05c 	ldr.w	ip, [pc, #92]	; c708 <usbd_ep_abort_all+0x170>
    c6ac:	f8cc 2000 	str.w	r2, [ip]
            m_ep_ready       |=   1U << ep2bit(ep) ;
    c6b0:	430b      	orrs	r3, r1
    c6b2:	4a14      	ldr	r2, [pc, #80]	; (c704 <usbd_ep_abort_all+0x16c>)
    c6b4:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
    c6b6:	2300      	movs	r3, #0
    c6b8:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    c6ba:	2303      	movs	r3, #3
    c6bc:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    c6be:	2206      	movs	r2, #6
    c6c0:	f88d 2004 	strb.w	r2, [sp, #4]
    c6c4:	f88d 0006 	strb.w	r0, [sp, #6]
    c6c8:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    c6cc:	4b12      	ldr	r3, [pc, #72]	; (c718 <usbd_ep_abort_all+0x180>)
    c6ce:	681b      	ldr	r3, [r3, #0]
    c6d0:	a801      	add	r0, sp, #4
    c6d2:	4798      	blx	r3
    c6d4:	e777      	b.n	c5c6 <usbd_ep_abort_all+0x2e>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    c6d6:	4a0f      	ldr	r2, [pc, #60]	; (c714 <usbd_ep_abort_all+0x17c>)
    c6d8:	f240 71b4 	movw	r1, #1972	; 0x7b4
    c6dc:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    c6de:	490f      	ldr	r1, [pc, #60]	; (c71c <usbd_ep_abort_all+0x184>)
    c6e0:	680a      	ldr	r2, [r1, #0]
    c6e2:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
    c6e4:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    c6e8:	f8d1 c000 	ldr.w	ip, [r1]
    c6ec:	ea42 020c 	orr.w	r2, r2, ip
    c6f0:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    c6f2:	680a      	ldr	r2, [r1, #0]
    c6f4:	e7c7      	b.n	c686 <usbd_ep_abort_all+0xee>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    c6f6:	4b03      	ldr	r3, [pc, #12]	; (c704 <usbd_ep_abort_all+0x16c>)
    c6f8:	f240 12ff 	movw	r2, #511	; 0x1ff
    c6fc:	601a      	str	r2, [r3, #0]
}
    c6fe:	b003      	add	sp, #12
    c700:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c702:	bf00      	nop
    c704:	20002940 	.word	0x20002940
    c708:	200028d0 	.word	0x200028d0
    c70c:	200029d4 	.word	0x200029d4
    c710:	20002944 	.word	0x20002944
    c714:	40027800 	.word	0x40027800
    c718:	20002a64 	.word	0x20002a64
    c71c:	40027804 	.word	0x40027804

0000c720 <nrfx_usbd_stop>:
{
    c720:	b510      	push	{r4, lr}
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    c722:	4b0c      	ldr	r3, [pc, #48]	; (c754 <nrfx_usbd_stop+0x34>)
    c724:	2280      	movs	r2, #128	; 0x80
    c726:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    c72a:	2027      	movs	r0, #39	; 0x27
    c72c:	f7f9 f884 	bl	5838 <arch_irq_is_enabled>
    c730:	b900      	cbnz	r0, c734 <nrfx_usbd_stop+0x14>
}
    c732:	bd10      	pop	{r4, pc}
        usbd_ep_abort_all();
    c734:	f7ff ff30 	bl	c598 <usbd_ep_abort_all>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    c738:	4c07      	ldr	r4, [pc, #28]	; (c758 <nrfx_usbd_stop+0x38>)
    c73a:	2300      	movs	r3, #0
    c73c:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    c740:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
    c744:	2027      	movs	r0, #39	; 0x27
    c746:	f7f9 f863 	bl	5810 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    c74a:	f04f 33ff 	mov.w	r3, #4294967295
    c74e:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
    c752:	e7ee      	b.n	c732 <nrfx_usbd_stop+0x12>
    c754:	e000e100 	.word	0xe000e100
    c758:	40027000 	.word	0x40027000

0000c75c <nrfx_usbd_disable>:
{
    c75c:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
    c75e:	f7ff ffdf 	bl	c720 <nrfx_usbd_stop>
    return p_reg->INTENSET;
    c762:	4b0b      	ldr	r3, [pc, #44]	; (c790 <nrfx_usbd_disable+0x34>)
    c764:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
    c768:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    c76c:	2200      	movs	r2, #0
    c76e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    c772:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    c776:	f7fe faff 	bl	ad78 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    c77a:	b110      	cbz	r0, c782 <nrfx_usbd_disable+0x26>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    c77c:	4b05      	ldr	r3, [pc, #20]	; (c794 <nrfx_usbd_disable+0x38>)
    c77e:	2200      	movs	r2, #0
    c780:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    c782:	4b05      	ldr	r3, [pc, #20]	; (c798 <nrfx_usbd_disable+0x3c>)
    c784:	2200      	movs	r2, #0
    c786:	701a      	strb	r2, [r3, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    c788:	4b04      	ldr	r3, [pc, #16]	; (c79c <nrfx_usbd_disable+0x40>)
    c78a:	2201      	movs	r2, #1
    c78c:	701a      	strb	r2, [r3, #0]
}
    c78e:	bd08      	pop	{r3, pc}
    c790:	40027000 	.word	0x40027000
    c794:	40027c1c 	.word	0x40027c1c
    c798:	20002fca 	.word	0x20002fca
    c79c:	20002fcb 	.word	0x20002fcb

0000c7a0 <nrfx_usbd_suspend>:
{
    c7a0:	b538      	push	{r3, r4, r5, lr}
    c7a2:	f04f 0320 	mov.w	r3, #32
    c7a6:	f3ef 8511 	mrs	r5, BASEPRI
    c7aa:	f383 8812 	msr	BASEPRI_MAX, r3
    c7ae:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
    c7b2:	4b13      	ldr	r3, [pc, #76]	; (c800 <nrfx_usbd_suspend+0x60>)
    c7b4:	781b      	ldrb	r3, [r3, #0]
    c7b6:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    c7ba:	b92b      	cbnz	r3, c7c8 <nrfx_usbd_suspend+0x28>
	__asm__ volatile(
    c7bc:	f385 8811 	msr	BASEPRI, r5
    c7c0:	f3bf 8f6f 	isb	sy
}
    c7c4:	4620      	mov	r0, r4
    c7c6:	bd38      	pop	{r3, r4, r5, pc}
        usbd_ep_abort_all();
    c7c8:	f7ff fee6 	bl	c598 <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
    c7cc:	4b0d      	ldr	r3, [pc, #52]	; (c804 <nrfx_usbd_suspend+0x64>)
    c7ce:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    c7d2:	f413 7f00 	tst.w	r3, #512	; 0x200
    c7d6:	d111      	bne.n	c7fc <nrfx_usbd_suspend+0x5c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    c7d8:	4b0a      	ldr	r3, [pc, #40]	; (c804 <nrfx_usbd_suspend+0x64>)
    c7da:	2201      	movs	r2, #1
    c7dc:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    c7e0:	f8d3 252c 	ldr.w	r2, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
    c7e4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    c7e8:	f413 7f00 	tst.w	r3, #512	; 0x200
    c7ec:	d0e6      	beq.n	c7bc <nrfx_usbd_suspend+0x1c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    c7ee:	4b05      	ldr	r3, [pc, #20]	; (c804 <nrfx_usbd_suspend+0x64>)
    c7f0:	2400      	movs	r4, #0
    c7f2:	f8c3 452c 	str.w	r4, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    c7f6:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
}
    c7fa:	e7df      	b.n	c7bc <nrfx_usbd_suspend+0x1c>
    bool suspended = false;
    c7fc:	2400      	movs	r4, #0
    c7fe:	e7dd      	b.n	c7bc <nrfx_usbd_suspend+0x1c>
    c800:	20002fc9 	.word	0x20002fc9
    c804:	40027000 	.word	0x40027000

0000c808 <nrfx_usbd_ep_abort>:
{
    c808:	b5f0      	push	{r4, r5, r6, r7, lr}
    c80a:	b083      	sub	sp, #12
	__asm__ volatile(
    c80c:	f04f 0320 	mov.w	r3, #32
    c810:	f3ef 8511 	mrs	r5, BASEPRI
    c814:	f383 8812 	msr	BASEPRI_MAX, r3
    c818:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    c81c:	b243      	sxtb	r3, r0
    c81e:	2b00      	cmp	r3, #0
    c820:	db27      	blt.n	c872 <nrfx_usbd_ep_abort+0x6a>
    c822:	4c39      	ldr	r4, [pc, #228]	; (c908 <nrfx_usbd_ep_abort+0x100>)
        NRF_USBD_EP_NR_GET(ep));
    c824:	f000 020f 	and.w	r2, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    c828:	eb04 1402 	add.w	r4, r4, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
    c82c:	2b00      	cmp	r3, #0
    c82e:	db25      	blt.n	c87c <nrfx_usbd_ep_abort+0x74>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    c830:	4a36      	ldr	r2, [pc, #216]	; (c90c <nrfx_usbd_ep_abort+0x104>)
    c832:	6812      	ldr	r2, [r2, #0]
    c834:	43d2      	mvns	r2, r2
    return NRFX_USBD_EP_BITPOS(ep);
    c836:	f003 030f 	and.w	r3, r3, #15
    c83a:	3310      	adds	r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    c83c:	40da      	lsrs	r2, r3
    c83e:	f012 0f01 	tst.w	r2, #1
    c842:	d118      	bne.n	c876 <nrfx_usbd_ep_abort+0x6e>
            p_state->handler.consumer = NULL;
    c844:	2200      	movs	r2, #0
    c846:	6022      	str	r2, [r4, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    c848:	2201      	movs	r2, #1
    c84a:	fa02 f303 	lsl.w	r3, r2, r3
    c84e:	492f      	ldr	r1, [pc, #188]	; (c90c <nrfx_usbd_ep_abort+0x104>)
    c850:	680a      	ldr	r2, [r1, #0]
    c852:	ea22 0203 	bic.w	r2, r2, r3
    c856:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    c858:	492d      	ldr	r1, [pc, #180]	; (c910 <nrfx_usbd_ep_abort+0x108>)
    c85a:	680a      	ldr	r2, [r1, #0]
    c85c:	ea22 0303 	bic.w	r3, r2, r3
    c860:	600b      	str	r3, [r1, #0]
        p_state->status = NRFX_USBD_EP_ABORTED;
    c862:	2303      	movs	r3, #3
    c864:	73a3      	strb	r3, [r4, #14]
	__asm__ volatile(
    c866:	f385 8811 	msr	BASEPRI, r5
    c86a:	f3bf 8f6f 	isb	sy
}
    c86e:	b003      	add	sp, #12
    c870:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    c872:	4c28      	ldr	r4, [pc, #160]	; (c914 <nrfx_usbd_ep_abort+0x10c>)
    c874:	e7d6      	b.n	c824 <nrfx_usbd_ep_abort+0x1c>
            nrfx_usbd_transfer_out_drop(ep);
    c876:	f7ff fcd1 	bl	c21c <nrfx_usbd_transfer_out_drop>
    c87a:	e7f2      	b.n	c862 <nrfx_usbd_ep_abort+0x5a>
        if(!NRF_USBD_EPISO_CHECK(ep))
    c87c:	f010 0f08 	tst.w	r0, #8
    c880:	d10f      	bne.n	c8a2 <nrfx_usbd_ep_abort+0x9a>
            if(ep != NRFX_USBD_EPIN0)
    c882:	2880      	cmp	r0, #128	; 0x80
    c884:	d031      	beq.n	c8ea <nrfx_usbd_ep_abort+0xe2>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    c886:	f202 32da 	addw	r2, r2, #986	; 0x3da
    c88a:	0052      	lsls	r2, r2, #1
    c88c:	4922      	ldr	r1, [pc, #136]	; (c918 <nrfx_usbd_ep_abort+0x110>)
    c88e:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    c890:	3104      	adds	r1, #4
    c892:	680a      	ldr	r2, [r1, #0]
    c894:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
    c896:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    c89a:	680e      	ldr	r6, [r1, #0]
    c89c:	4332      	orrs	r2, r6
    c89e:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    c8a0:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    c8a2:	4a1b      	ldr	r2, [pc, #108]	; (c910 <nrfx_usbd_ep_abort+0x108>)
    c8a4:	6811      	ldr	r1, [r2, #0]
    c8a6:	4a19      	ldr	r2, [pc, #100]	; (c90c <nrfx_usbd_ep_abort+0x104>)
    c8a8:	6816      	ldr	r6, [r2, #0]
    c8aa:	ea66 0701 	orn	r7, r6, r1
    return NRFX_USBD_EP_BITPOS(ep);
    c8ae:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    c8b2:	2201      	movs	r2, #1
    c8b4:	fa02 f303 	lsl.w	r3, r2, r3
    c8b8:	421f      	tst	r7, r3
    c8ba:	d0d4      	beq.n	c866 <nrfx_usbd_ep_abort+0x5e>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    c8bc:	ea26 0603 	bic.w	r6, r6, r3
    c8c0:	4a12      	ldr	r2, [pc, #72]	; (c90c <nrfx_usbd_ep_abort+0x104>)
    c8c2:	6016      	str	r6, [r2, #0]
            m_ep_ready       |=   1U << ep2bit(ep) ;
    c8c4:	430b      	orrs	r3, r1
    c8c6:	4a12      	ldr	r2, [pc, #72]	; (c910 <nrfx_usbd_ep_abort+0x108>)
    c8c8:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
    c8ca:	2300      	movs	r3, #0
    c8cc:	6023      	str	r3, [r4, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    c8ce:	2303      	movs	r3, #3
    c8d0:	73a3      	strb	r3, [r4, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    c8d2:	2206      	movs	r2, #6
    c8d4:	f88d 2004 	strb.w	r2, [sp, #4]
    c8d8:	f88d 0006 	strb.w	r0, [sp, #6]
    c8dc:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    c8e0:	4b0e      	ldr	r3, [pc, #56]	; (c91c <nrfx_usbd_ep_abort+0x114>)
    c8e2:	681b      	ldr	r3, [r3, #0]
    c8e4:	a801      	add	r0, sp, #4
    c8e6:	4798      	blx	r3
    c8e8:	e7bd      	b.n	c866 <nrfx_usbd_ep_abort+0x5e>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    c8ea:	4a0b      	ldr	r2, [pc, #44]	; (c918 <nrfx_usbd_ep_abort+0x110>)
    c8ec:	f240 71b4 	movw	r1, #1972	; 0x7b4
    c8f0:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    c8f2:	490b      	ldr	r1, [pc, #44]	; (c920 <nrfx_usbd_ep_abort+0x118>)
    c8f4:	680a      	ldr	r2, [r1, #0]
    c8f6:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
    c8f8:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    c8fc:	680e      	ldr	r6, [r1, #0]
    c8fe:	4332      	orrs	r2, r6
    c900:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    c902:	680a      	ldr	r2, [r1, #0]
    c904:	e7cd      	b.n	c8a2 <nrfx_usbd_ep_abort+0x9a>
    c906:	bf00      	nop
    c908:	20002944 	.word	0x20002944
    c90c:	200028d0 	.word	0x200028d0
    c910:	20002940 	.word	0x20002940
    c914:	200029d4 	.word	0x200029d4
    c918:	40027800 	.word	0x40027800
    c91c:	20002a64 	.word	0x20002a64
    c920:	40027804 	.word	0x40027804

0000c924 <nrfx_usbd_ep_disable>:
{
    c924:	b5f0      	push	{r4, r5, r6, r7, lr}
    c926:	b083      	sub	sp, #12
    c928:	4604      	mov	r4, r0
	__asm__ volatile(
    c92a:	f04f 0320 	mov.w	r3, #32
    c92e:	f3ef 8611 	mrs	r6, BASEPRI
    c932:	f383 8812 	msr	BASEPRI_MAX, r3
    c936:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    c93a:	b243      	sxtb	r3, r0
    c93c:	2b00      	cmp	r3, #0
    c93e:	db3e      	blt.n	c9be <nrfx_usbd_ep_disable+0x9a>
    c940:	4d4a      	ldr	r5, [pc, #296]	; (ca6c <nrfx_usbd_ep_disable+0x148>)
        NRF_USBD_EP_NR_GET(ep));
    c942:	f004 020f 	and.w	r2, r4, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    c946:	eb05 1502 	add.w	r5, r5, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
    c94a:	2b00      	cmp	r3, #0
    c94c:	db3d      	blt.n	c9ca <nrfx_usbd_ep_disable+0xa6>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    c94e:	4a48      	ldr	r2, [pc, #288]	; (ca70 <nrfx_usbd_ep_disable+0x14c>)
    c950:	6812      	ldr	r2, [r2, #0]
    c952:	43d2      	mvns	r2, r2
    return NRFX_USBD_EP_BITPOS(ep);
    c954:	f003 030f 	and.w	r3, r3, #15
    c958:	3310      	adds	r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    c95a:	40da      	lsrs	r2, r3
    c95c:	f012 0f01 	tst.w	r2, #1
    c960:	d12f      	bne.n	c9c2 <nrfx_usbd_ep_disable+0x9e>
            p_state->handler.consumer = NULL;
    c962:	2200      	movs	r2, #0
    c964:	602a      	str	r2, [r5, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    c966:	2201      	movs	r2, #1
    c968:	fa02 f303 	lsl.w	r3, r2, r3
    c96c:	4940      	ldr	r1, [pc, #256]	; (ca70 <nrfx_usbd_ep_disable+0x14c>)
    c96e:	680a      	ldr	r2, [r1, #0]
    c970:	ea22 0203 	bic.w	r2, r2, r3
    c974:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    c976:	493f      	ldr	r1, [pc, #252]	; (ca74 <nrfx_usbd_ep_disable+0x150>)
    c978:	680a      	ldr	r2, [r1, #0]
    c97a:	ea22 0303 	bic.w	r3, r2, r3
    c97e:	600b      	str	r3, [r1, #0]
        p_state->status = NRFX_USBD_EP_ABORTED;
    c980:	2303      	movs	r3, #3
    c982:	73ab      	strb	r3, [r5, #14]
	__asm__ volatile(
    c984:	f386 8811 	msr	BASEPRI, r6
    c988:	f3bf 8f6f 	isb	sy
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    c98c:	f004 030f 	and.w	r3, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    c990:	b264      	sxtb	r4, r4
    c992:	2c00      	cmp	r4, #0
    c994:	db5e      	blt.n	ca54 <nrfx_usbd_ep_disable+0x130>
        p_reg->EPOUTEN &= ~(1UL << epnr);
    c996:	4838      	ldr	r0, [pc, #224]	; (ca78 <nrfx_usbd_ep_disable+0x154>)
    c998:	f8d0 2514 	ldr.w	r2, [r0, #1300]	; 0x514
    c99c:	2101      	movs	r1, #1
    c99e:	4099      	lsls	r1, r3
    c9a0:	ea22 0201 	bic.w	r2, r2, r1
    c9a4:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    c9a8:	2c00      	cmp	r4, #0
    c9aa:	db5d      	blt.n	ca68 <nrfx_usbd_ep_disable+0x144>
    c9ac:	4a33      	ldr	r2, [pc, #204]	; (ca7c <nrfx_usbd_ep_disable+0x158>)
    c9ae:	5cd2      	ldrb	r2, [r2, r3]
    c9b0:	2301      	movs	r3, #1
    c9b2:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
    c9b4:	4a30      	ldr	r2, [pc, #192]	; (ca78 <nrfx_usbd_ep_disable+0x154>)
    c9b6:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    c9ba:	b003      	add	sp, #12
    c9bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    c9be:	4d30      	ldr	r5, [pc, #192]	; (ca80 <nrfx_usbd_ep_disable+0x15c>)
    c9c0:	e7bf      	b.n	c942 <nrfx_usbd_ep_disable+0x1e>
            nrfx_usbd_transfer_out_drop(ep);
    c9c2:	4620      	mov	r0, r4
    c9c4:	f7ff fc2a 	bl	c21c <nrfx_usbd_transfer_out_drop>
    c9c8:	e7da      	b.n	c980 <nrfx_usbd_ep_disable+0x5c>
        if(!NRF_USBD_EPISO_CHECK(ep))
    c9ca:	f014 0f08 	tst.w	r4, #8
    c9ce:	d10f      	bne.n	c9f0 <nrfx_usbd_ep_disable+0xcc>
            if(ep != NRFX_USBD_EPIN0)
    c9d0:	2c80      	cmp	r4, #128	; 0x80
    c9d2:	d031      	beq.n	ca38 <nrfx_usbd_ep_disable+0x114>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    c9d4:	f202 32da 	addw	r2, r2, #986	; 0x3da
    c9d8:	0052      	lsls	r2, r2, #1
    c9da:	492a      	ldr	r1, [pc, #168]	; (ca84 <nrfx_usbd_ep_disable+0x160>)
    c9dc:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    c9de:	3104      	adds	r1, #4
    c9e0:	680a      	ldr	r2, [r1, #0]
    c9e2:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
    c9e4:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    c9e8:	6808      	ldr	r0, [r1, #0]
    c9ea:	4302      	orrs	r2, r0
    c9ec:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    c9ee:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    c9f0:	4a20      	ldr	r2, [pc, #128]	; (ca74 <nrfx_usbd_ep_disable+0x150>)
    c9f2:	6811      	ldr	r1, [r2, #0]
    c9f4:	4a1e      	ldr	r2, [pc, #120]	; (ca70 <nrfx_usbd_ep_disable+0x14c>)
    c9f6:	6810      	ldr	r0, [r2, #0]
    c9f8:	ea60 0701 	orn	r7, r0, r1
    return NRFX_USBD_EP_BITPOS(ep);
    c9fc:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    ca00:	2201      	movs	r2, #1
    ca02:	fa02 f303 	lsl.w	r3, r2, r3
    ca06:	421f      	tst	r7, r3
    ca08:	d0bc      	beq.n	c984 <nrfx_usbd_ep_disable+0x60>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    ca0a:	ea20 0003 	bic.w	r0, r0, r3
    ca0e:	4a18      	ldr	r2, [pc, #96]	; (ca70 <nrfx_usbd_ep_disable+0x14c>)
    ca10:	6010      	str	r0, [r2, #0]
            m_ep_ready       |=   1U << ep2bit(ep) ;
    ca12:	430b      	orrs	r3, r1
    ca14:	4a17      	ldr	r2, [pc, #92]	; (ca74 <nrfx_usbd_ep_disable+0x150>)
    ca16:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
    ca18:	2300      	movs	r3, #0
    ca1a:	602b      	str	r3, [r5, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    ca1c:	2303      	movs	r3, #3
    ca1e:	73ab      	strb	r3, [r5, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    ca20:	2206      	movs	r2, #6
    ca22:	f88d 2004 	strb.w	r2, [sp, #4]
    ca26:	f88d 4006 	strb.w	r4, [sp, #6]
    ca2a:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    ca2e:	4b16      	ldr	r3, [pc, #88]	; (ca88 <nrfx_usbd_ep_disable+0x164>)
    ca30:	681b      	ldr	r3, [r3, #0]
    ca32:	a801      	add	r0, sp, #4
    ca34:	4798      	blx	r3
    ca36:	e7a5      	b.n	c984 <nrfx_usbd_ep_disable+0x60>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    ca38:	4a12      	ldr	r2, [pc, #72]	; (ca84 <nrfx_usbd_ep_disable+0x160>)
    ca3a:	f240 71b4 	movw	r1, #1972	; 0x7b4
    ca3e:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    ca40:	4912      	ldr	r1, [pc, #72]	; (ca8c <nrfx_usbd_ep_disable+0x168>)
    ca42:	680a      	ldr	r2, [r1, #0]
    ca44:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
    ca46:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    ca4a:	6808      	ldr	r0, [r1, #0]
    ca4c:	4302      	orrs	r2, r0
    ca4e:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    ca50:	680a      	ldr	r2, [r1, #0]
    ca52:	e7cd      	b.n	c9f0 <nrfx_usbd_ep_disable+0xcc>
        p_reg->EPINEN &= ~(1UL << epnr);
    ca54:	4808      	ldr	r0, [pc, #32]	; (ca78 <nrfx_usbd_ep_disable+0x154>)
    ca56:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    ca5a:	2101      	movs	r1, #1
    ca5c:	4099      	lsls	r1, r3
    ca5e:	ea22 0201 	bic.w	r2, r2, r1
    ca62:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    ca66:	e79f      	b.n	c9a8 <nrfx_usbd_ep_disable+0x84>
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    ca68:	4a09      	ldr	r2, [pc, #36]	; (ca90 <nrfx_usbd_ep_disable+0x16c>)
    ca6a:	e7a0      	b.n	c9ae <nrfx_usbd_ep_disable+0x8a>
    ca6c:	20002944 	.word	0x20002944
    ca70:	200028d0 	.word	0x200028d0
    ca74:	20002940 	.word	0x20002940
    ca78:	40027000 	.word	0x40027000
    ca7c:	00017be4 	.word	0x00017be4
    ca80:	200029d4 	.word	0x200029d4
    ca84:	40027800 	.word	0x40027800
    ca88:	20002a64 	.word	0x20002a64
    ca8c:	40027804 	.word	0x40027804
    ca90:	00017bc4 	.word	0x00017bc4

0000ca94 <nrfx_twi_twim_bus_recover>:
                                                  NRF_GPIO_PIN_PULLUP,        \
                                                  NRF_GPIO_PIN_S0D1,          \
                                                  NRF_GPIO_PIN_NOSENSE)

nrfx_err_t nrfx_twi_twim_bus_recover(uint32_t scl_pin, uint32_t sda_pin)
{
    ca94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    *p_pin = pin_number & 0x1F;
    ca98:	f000 031f 	and.w	r3, r0, #31
    return pin_number >> 5;
    ca9c:	0940      	lsrs	r0, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    ca9e:	2801      	cmp	r0, #1
    caa0:	d036      	beq.n	cb10 <nrfx_twi_twim_bus_recover+0x7c>
        case 0: return NRF_P0;
    caa2:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    caa6:	2501      	movs	r5, #1
    caa8:	409d      	lsls	r5, r3
    p_reg->OUTSET = set_mask;
    caaa:	f8c6 5508 	str.w	r5, [r6, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    caae:	f001 081f 	and.w	r8, r1, #31
    return pin_number >> 5;
    cab2:	0949      	lsrs	r1, r1, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    cab4:	2901      	cmp	r1, #1
    cab6:	d02d      	beq.n	cb14 <nrfx_twi_twim_bus_recover+0x80>
        case 0: return NRF_P0;
    cab8:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    cabc:	f04f 0901 	mov.w	r9, #1
    cac0:	fa09 f908 	lsl.w	r9, r9, r8
    p_reg->OUTSET = set_mask;
    cac4:	f8c7 9508 	str.w	r9, [r7, #1288]	; 0x508
    reg->PIN_CNF[pin_number] = cnf;
    cac8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    cacc:	f240 620d 	movw	r2, #1549	; 0x60d
    cad0:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
    cad4:	f508 73e0 	add.w	r3, r8, #448	; 0x1c0
    cad8:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
    nrf_gpio_pin_set(scl_pin);
    nrf_gpio_pin_set(sda_pin);

    TWI_TWIM_PIN_CONFIGURE(scl_pin);
    TWI_TWIM_PIN_CONFIGURE(sda_pin);
    NRFX_DELAY_US(4);
    cadc:	2004      	movs	r0, #4
    cade:	f007 fbe8 	bl	142b2 <nrfx_busy_wait>

    for (uint8_t i = 0; i < 9; i++)
    cae2:	2400      	movs	r4, #0
    cae4:	2c08      	cmp	r4, #8
    cae6:	d817      	bhi.n	cb18 <nrfx_twi_twim_bus_recover+0x84>
    return p_reg->IN;
    cae8:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    caec:	fa23 f308 	lsr.w	r3, r3, r8
    {
        if (nrf_gpio_pin_read(sda_pin))
    caf0:	f013 0f01 	tst.w	r3, #1
    caf4:	d110      	bne.n	cb18 <nrfx_twi_twim_bus_recover+0x84>
    p_reg->OUTCLR = clr_mask;
    caf6:	f8c6 550c 	str.w	r5, [r6, #1292]	; 0x50c
        }
        else
        {
            // Pulse CLOCK signal
            nrf_gpio_pin_clear(scl_pin);
            NRFX_DELAY_US(4);
    cafa:	2004      	movs	r0, #4
    cafc:	f007 fbd9 	bl	142b2 <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
    cb00:	f8c6 5508 	str.w	r5, [r6, #1288]	; 0x508
            nrf_gpio_pin_set(scl_pin);
            NRFX_DELAY_US(4);
    cb04:	2004      	movs	r0, #4
    cb06:	f007 fbd4 	bl	142b2 <nrfx_busy_wait>
    for (uint8_t i = 0; i < 9; i++)
    cb0a:	3401      	adds	r4, #1
    cb0c:	b2e4      	uxtb	r4, r4
    cb0e:	e7e9      	b.n	cae4 <nrfx_twi_twim_bus_recover+0x50>
        case 1: return NRF_P1;
    cb10:	4e0c      	ldr	r6, [pc, #48]	; (cb44 <nrfx_twi_twim_bus_recover+0xb0>)
    cb12:	e7c8      	b.n	caa6 <nrfx_twi_twim_bus_recover+0x12>
    cb14:	4f0b      	ldr	r7, [pc, #44]	; (cb44 <nrfx_twi_twim_bus_recover+0xb0>)
    cb16:	e7d1      	b.n	cabc <nrfx_twi_twim_bus_recover+0x28>
    p_reg->OUTCLR = clr_mask;
    cb18:	f8c7 950c 	str.w	r9, [r7, #1292]	; 0x50c
        }
    }

    // Generate a STOP condition on the bus
    nrf_gpio_pin_clear(sda_pin);
    NRFX_DELAY_US(4);
    cb1c:	2004      	movs	r0, #4
    cb1e:	f007 fbc8 	bl	142b2 <nrfx_busy_wait>
    p_reg->OUTSET = set_mask;
    cb22:	f8c7 9508 	str.w	r9, [r7, #1288]	; 0x508
    nrf_gpio_pin_set(sda_pin);
    NRFX_DELAY_US(4);
    cb26:	2004      	movs	r0, #4
    cb28:	f007 fbc3 	bl	142b2 <nrfx_busy_wait>
    return p_reg->IN;
    cb2c:	f8d7 3510 	ldr.w	r3, [r7, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    cb30:	fa23 f808 	lsr.w	r8, r3, r8

    if (nrf_gpio_pin_read(sda_pin))
    cb34:	f018 0f01 	tst.w	r8, #1
    cb38:	d002      	beq.n	cb40 <nrfx_twi_twim_bus_recover+0xac>
    {
        return NRFX_SUCCESS;
    cb3a:	4803      	ldr	r0, [pc, #12]	; (cb48 <nrfx_twi_twim_bus_recover+0xb4>)
    }
    else
    {
        return NRFX_ERROR_INTERNAL;
    }
}
    cb3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NRFX_ERROR_INTERNAL;
    cb40:	4802      	ldr	r0, [pc, #8]	; (cb4c <nrfx_twi_twim_bus_recover+0xb8>)
    cb42:	e7fb      	b.n	cb3c <nrfx_twi_twim_bus_recover+0xa8>
    cb44:	50000300 	.word	0x50000300
    cb48:	0bad0000 	.word	0x0bad0000
    cb4c:	0bad0001 	.word	0x0bad0001

0000cb50 <lfs_dir_traverse_filter>:

    return 0;
}

static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
    cb50:	b410      	push	{r4}
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
    cb52:	f011 5f80 	tst.w	r1, #268435456	; 0x10000000
    cb56:	d01c      	beq.n	cb92 <lfs_dir_traverse_filter+0x42>
    cb58:	4a19      	ldr	r2, [pc, #100]	; (cbc0 <lfs_dir_traverse_filter+0x70>)

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
    cb5a:	6803      	ldr	r3, [r0, #0]
    cb5c:	ea83 0401 	eor.w	r4, r3, r1
    cb60:	4214      	tst	r4, r2
    cb62:	d024      	beq.n	cbae <lfs_dir_traverse_filter+0x5e>
    return ((int32_t)(tag << 22) >> 22) == -1;
    cb64:	f343 0209 	sbfx	r2, r3, #0, #10
    if ((mask & tag) == (mask & *filtertag) ||
    cb68:	f1b2 3fff 	cmp.w	r2, #4294967295
    cb6c:	d022      	beq.n	cbb4 <lfs_dir_traverse_filter+0x64>
            lfs_tag_isdelete(*filtertag) ||
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
    cb6e:	4c14      	ldr	r4, [pc, #80]	; (cbc0 <lfs_dir_traverse_filter+0x70>)
    cb70:	400c      	ands	r4, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
    cb72:	4a14      	ldr	r2, [pc, #80]	; (cbc4 <lfs_dir_traverse_filter+0x74>)
    cb74:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
    cb76:	f042 429f 	orr.w	r2, r2, #1333788672	; 0x4f800000
    cb7a:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
    cb7e:	4294      	cmp	r4, r2
    cb80:	d01a      	beq.n	cbb8 <lfs_dir_traverse_filter+0x68>
    return (tag & 0x70000000) >> 20;
    cb82:	0d0a      	lsrs	r2, r1, #20
    cb84:	f402 64e0 	and.w	r4, r2, #1792	; 0x700
        return true;
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
    cb88:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    cb8c:	d003      	beq.n	cb96 <lfs_dir_traverse_filter+0x46>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    }

    return false;
    cb8e:	2000      	movs	r0, #0
    cb90:	e00e      	b.n	cbb0 <lfs_dir_traverse_filter+0x60>
            : LFS_MKTAG(0x700, 0x3ff, 0);
    cb92:	4a0d      	ldr	r2, [pc, #52]	; (cbc8 <lfs_dir_traverse_filter+0x78>)
    cb94:	e7e1      	b.n	cb5a <lfs_dir_traverse_filter+0xa>
    return (tag & 0x000ffc00) >> 10;
    cb96:	f3c1 2189 	ubfx	r1, r1, #10, #10
    cb9a:	f3c3 2489 	ubfx	r4, r3, #10, #10
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
    cb9e:	428c      	cmp	r4, r1
    cba0:	d30c      	bcc.n	cbbc <lfs_dir_traverse_filter+0x6c>
    return (int8_t)lfs_tag_chunk(tag);
    cba2:	b252      	sxtb	r2, r2
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    cba4:	eb03 2382 	add.w	r3, r3, r2, lsl #10
    cba8:	6003      	str	r3, [r0, #0]
    return false;
    cbaa:	2000      	movs	r0, #0
    cbac:	e000      	b.n	cbb0 <lfs_dir_traverse_filter+0x60>
        return true;
    cbae:	2001      	movs	r0, #1
}
    cbb0:	bc10      	pop	{r4}
    cbb2:	4770      	bx	lr
        return true;
    cbb4:	2001      	movs	r0, #1
    cbb6:	e7fb      	b.n	cbb0 <lfs_dir_traverse_filter+0x60>
    cbb8:	2001      	movs	r0, #1
    cbba:	e7f9      	b.n	cbb0 <lfs_dir_traverse_filter+0x60>
    return false;
    cbbc:	2000      	movs	r0, #0
    cbbe:	e7f7      	b.n	cbb0 <lfs_dir_traverse_filter+0x60>
    cbc0:	7ffffc00 	.word	0x7ffffc00
    cbc4:	000ffc00 	.word	0x000ffc00
    cbc8:	700ffc00 	.word	0x700ffc00

0000cbcc <lfs_fs_prepmove>:
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    cbcc:	b410      	push	{r4}
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
    cbce:	6b04      	ldr	r4, [r0, #48]	; 0x30
    cbd0:	4b10      	ldr	r3, [pc, #64]	; (cc14 <lfs_fs_prepmove+0x48>)
    cbd2:	4023      	ands	r3, r4
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
    cbd4:	f240 34ff 	movw	r4, #1023	; 0x3ff
    cbd8:	42a1      	cmp	r1, r4
    cbda:	d014      	beq.n	cc06 <lfs_fs_prepmove+0x3a>
    cbdc:	028c      	lsls	r4, r1, #10
    cbde:	f044 449f 	orr.w	r4, r4, #1333788672	; 0x4f800000
    cbe2:	f444 04e0 	orr.w	r4, r4, #7340032	; 0x700000
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
    cbe6:	4323      	orrs	r3, r4
    cbe8:	6303      	str	r3, [r0, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
    cbea:	f240 33ff 	movw	r3, #1023	; 0x3ff
    cbee:	4299      	cmp	r1, r3
    cbf0:	d00b      	beq.n	cc0a <lfs_fs_prepmove+0x3e>
    cbf2:	6813      	ldr	r3, [r2, #0]
    cbf4:	6343      	str	r3, [r0, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
    cbf6:	f240 33ff 	movw	r3, #1023	; 0x3ff
    cbfa:	4299      	cmp	r1, r3
    cbfc:	d007      	beq.n	cc0e <lfs_fs_prepmove+0x42>
    cbfe:	6853      	ldr	r3, [r2, #4]
    cc00:	6383      	str	r3, [r0, #56]	; 0x38
}
    cc02:	bc10      	pop	{r4}
    cc04:	4770      	bx	lr
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
    cc06:	2400      	movs	r4, #0
    cc08:	e7ed      	b.n	cbe6 <lfs_fs_prepmove+0x1a>
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
    cc0a:	2300      	movs	r3, #0
    cc0c:	e7f2      	b.n	cbf4 <lfs_fs_prepmove+0x28>
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
    cc0e:	2300      	movs	r3, #0
    cc10:	e7f6      	b.n	cc00 <lfs_fs_prepmove+0x34>
    cc12:	bf00      	nop
    cc14:	800003ff 	.word	0x800003ff

0000cc18 <lfs_dir_fetchmatch>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
    cc18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cc1c:	b097      	sub	sp, #92	; 0x5c
    cc1e:	4615      	mov	r5, r2
    cc20:	9309      	str	r3, [sp, #36]	; 0x24
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
    cc22:	6812      	ldr	r2, [r2, #0]
    cc24:	6e83      	ldr	r3, [r0, #104]	; 0x68
    cc26:	6a1b      	ldr	r3, [r3, #32]
    cc28:	429a      	cmp	r2, r3
    cc2a:	f080 828e 	bcs.w	d14a <lfs_dir_fetchmatch+0x532>
    cc2e:	4683      	mov	fp, r0
    cc30:	4689      	mov	r9, r1
    cc32:	686a      	ldr	r2, [r5, #4]
    cc34:	4293      	cmp	r3, r2
    cc36:	f240 828c 	bls.w	d152 <lfs_dir_fetchmatch+0x53a>
    uint32_t revs[2] = {0, 0};
    cc3a:	2600      	movs	r6, #0
    cc3c:	9612      	str	r6, [sp, #72]	; 0x48
    cc3e:	9613      	str	r6, [sp, #76]	; 0x4c
    for (int i = 0; i < 2; i++) {
    cc40:	4634      	mov	r4, r6
    cc42:	e000      	b.n	cc46 <lfs_dir_fetchmatch+0x2e>
    cc44:	3401      	adds	r4, #1
    cc46:	2c01      	cmp	r4, #1
    cc48:	dc2b      	bgt.n	cca2 <lfs_dir_fetchmatch+0x8a>
                pair[i], 0, &revs[i], sizeof(revs[i]));
    cc4a:	00a7      	lsls	r7, r4, #2
    cc4c:	ab12      	add	r3, sp, #72	; 0x48
    cc4e:	eb03 0284 	add.w	r2, r3, r4, lsl #2
        int err = lfs_bd_read(lfs,
    cc52:	2304      	movs	r3, #4
    cc54:	9303      	str	r3, [sp, #12]
    cc56:	9202      	str	r2, [sp, #8]
    cc58:	2100      	movs	r1, #0
    cc5a:	9101      	str	r1, [sp, #4]
    cc5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    cc60:	9200      	str	r2, [sp, #0]
    cc62:	465a      	mov	r2, fp
    cc64:	4658      	mov	r0, fp
    cc66:	f007 fd9a 	bl	1479e <lfs_bd_read>
        revs[i] = lfs_fromle32(revs[i]);
    cc6a:	ab16      	add	r3, sp, #88	; 0x58
    cc6c:	441f      	add	r7, r3
    cc6e:	f857 2c10 	ldr.w	r2, [r7, #-16]
        if (err && err != LFS_ERR_CORRUPT) {
    cc72:	4603      	mov	r3, r0
    cc74:	b118      	cbz	r0, cc7e <lfs_dir_fetchmatch+0x66>
    cc76:	f110 0f54 	cmn.w	r0, #84	; 0x54
    cc7a:	f040 826e 	bne.w	d15a <lfs_dir_fetchmatch+0x542>
        if (err != LFS_ERR_CORRUPT &&
    cc7e:	f113 0f54 	cmn.w	r3, #84	; 0x54
    cc82:	d0df      	beq.n	cc44 <lfs_dir_fetchmatch+0x2c>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
    cc84:	1c63      	adds	r3, r4, #1
    cc86:	f003 0301 	and.w	r3, r3, #1
    cc8a:	bf48      	it	mi
    cc8c:	425b      	negmi	r3, r3
    cc8e:	a916      	add	r1, sp, #88	; 0x58
    cc90:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    cc94:	f853 3c10 	ldr.w	r3, [r3, #-16]
}

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
    return (int)(unsigned)(a - b);
    cc98:	1ad2      	subs	r2, r2, r3
        if (err != LFS_ERR_CORRUPT &&
    cc9a:	2a00      	cmp	r2, #0
    cc9c:	ddd2      	ble.n	cc44 <lfs_dir_fetchmatch+0x2c>
            r = i;
    cc9e:	4626      	mov	r6, r4
    cca0:	e7d0      	b.n	cc44 <lfs_dir_fetchmatch+0x2c>
    dir->pair[0] = pair[(r+0)%2];
    cca2:	2e00      	cmp	r6, #0
    cca4:	f006 0301 	and.w	r3, r6, #1
    cca8:	bfb8      	it	lt
    ccaa:	425b      	neglt	r3, r3
    ccac:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
    ccb0:	f8c9 2000 	str.w	r2, [r9]
    dir->pair[1] = pair[(r+1)%2];
    ccb4:	3601      	adds	r6, #1
    ccb6:	f006 0601 	and.w	r6, r6, #1
    ccba:	bf48      	it	mi
    ccbc:	4276      	negmi	r6, r6
    ccbe:	960a      	str	r6, [sp, #40]	; 0x28
    ccc0:	f855 2026 	ldr.w	r2, [r5, r6, lsl #2]
    ccc4:	f8c9 2004 	str.w	r2, [r9, #4]
    dir->rev = revs[(r+0)%2];
    ccc8:	aa16      	add	r2, sp, #88	; 0x58
    ccca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    ccce:	f853 3c10 	ldr.w	r3, [r3, #-16]
    ccd2:	f8c9 3008 	str.w	r3, [r9, #8]
    dir->off = 0; // nonzero = found some commits
    ccd6:	2300      	movs	r3, #0
    ccd8:	f8c9 300c 	str.w	r3, [r9, #12]
    for (int i = 0; i < 2; i++) {
    ccdc:	469a      	mov	sl, r3
    lfs_stag_t besttag = -1;
    ccde:	f04f 33ff 	mov.w	r3, #4294967295
    cce2:	9305      	str	r3, [sp, #20]
    for (int i = 0; i < 2; i++) {
    cce4:	e053      	b.n	cd8e <lfs_dir_fetchmatch+0x176>
                if (err == LFS_ERR_CORRUPT) {
    cce6:	f110 0f54 	cmn.w	r0, #84	; 0x54
    ccea:	f040 81b0 	bne.w	d04e <lfs_dir_fetchmatch+0x436>
                    dir->erased = false;
    ccee:	2300      	movs	r3, #0
    ccf0:	f889 3016 	strb.w	r3, [r9, #22]
                    break;
    ccf4:	e034      	b.n	cd60 <lfs_dir_fetchmatch+0x148>
    return (tag & 0x70000000) >> 20;
    ccf6:	ea4f 5318 	mov.w	r3, r8, lsr #20
    ccfa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
    ccfe:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    cd02:	d005      	beq.n	cd10 <lfs_dir_fetchmatch+0xf8>
    cd04:	9b07      	ldr	r3, [sp, #28]
    cd06:	f003 0301 	and.w	r3, r3, #1
    cd0a:	f889 3016 	strb.w	r3, [r9, #22]
                break;
    cd0e:	e027      	b.n	cd60 <lfs_dir_fetchmatch+0x148>
                        dir->off % lfs->cfg->prog_size == 0);
    cd10:	f8d9 100c 	ldr.w	r1, [r9, #12]
    cd14:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
    cd18:	699a      	ldr	r2, [r3, #24]
    cd1a:	fbb1 f3f2 	udiv	r3, r1, r2
    cd1e:	fb02 1313 	mls	r3, r2, r3, r1
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
    cd22:	2b00      	cmp	r3, #0
    cd24:	d1ee      	bne.n	cd04 <lfs_dir_fetchmatch+0xec>
    cd26:	2301      	movs	r3, #1
    cd28:	9307      	str	r3, [sp, #28]
    cd2a:	e7eb      	b.n	cd04 <lfs_dir_fetchmatch+0xec>
                dir->erased = false;
    cd2c:	2300      	movs	r3, #0
    cd2e:	f889 3016 	strb.w	r3, [r9, #22]
                break;
    cd32:	e015      	b.n	cd60 <lfs_dir_fetchmatch+0x148>
                err = lfs_bd_read(lfs,
    cd34:	2204      	movs	r2, #4
    cd36:	9203      	str	r2, [sp, #12]
    cd38:	aa0d      	add	r2, sp, #52	; 0x34
    cd3a:	9202      	str	r2, [sp, #8]
    cd3c:	1d32      	adds	r2, r6, #4
    cd3e:	9201      	str	r2, [sp, #4]
    cd40:	f8d9 2000 	ldr.w	r2, [r9]
    cd44:	9200      	str	r2, [sp, #0]
    cd46:	465a      	mov	r2, fp
    cd48:	2100      	movs	r1, #0
    cd4a:	4658      	mov	r0, fp
    cd4c:	f007 fd27 	bl	1479e <lfs_bd_read>
                if (err) {
    cd50:	2800      	cmp	r0, #0
    cd52:	d136      	bne.n	cdc2 <lfs_dir_fetchmatch+0x1aa>
                dcrc = lfs_fromle32(dcrc);
    cd54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                if (crc != dcrc) {
    cd56:	42a3      	cmp	r3, r4
    cd58:	d03c      	beq.n	cdd4 <lfs_dir_fetchmatch+0x1bc>
                    dir->erased = false;
    cd5a:	2300      	movs	r3, #0
    cd5c:	f889 3016 	strb.w	r3, [r9, #22]
        if (dir->off > 0) {
    cd60:	f8d9 300c 	ldr.w	r3, [r9, #12]
    cd64:	2b00      	cmp	r3, #0
    cd66:	f040 8175 	bne.w	d054 <lfs_dir_fetchmatch+0x43c>
    lfs_block_t t = pair[0];
    cd6a:	f8d9 3000 	ldr.w	r3, [r9]
    pair[0] = pair[1];
    cd6e:	f8d9 2004 	ldr.w	r2, [r9, #4]
    cd72:	f8c9 2000 	str.w	r2, [r9]
    pair[1] = t;
    cd76:	f8c9 3004 	str.w	r3, [r9, #4]
        dir->rev = revs[(r+1)%2];
    cd7a:	aa16      	add	r2, sp, #88	; 0x58
    cd7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cd7e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    cd82:	f853 3c10 	ldr.w	r3, [r3, #-16]
    cd86:	f8c9 3008 	str.w	r3, [r9, #8]
    for (int i = 0; i < 2; i++) {
    cd8a:	f10a 0a01 	add.w	sl, sl, #1
    cd8e:	f1ba 0f01 	cmp.w	sl, #1
    cd92:	f300 81b6 	bgt.w	d102 <lfs_dir_fetchmatch+0x4ea>
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
    cd96:	4abc      	ldr	r2, [pc, #752]	; (d088 <lfs_dir_fetchmatch+0x470>)
    cd98:	ab0e      	add	r3, sp, #56	; 0x38
    cd9a:	e892 0003 	ldmia.w	r2, {r0, r1}
    cd9e:	e883 0003 	stmia.w	r3, {r0, r1}
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
    cda2:	2204      	movs	r2, #4
    cda4:	f109 0108 	add.w	r1, r9, #8
    cda8:	f04f 30ff 	mov.w	r0, #4294967295
    cdac:	f002 fb8a 	bl	f4c4 <lfs_crc>
    cdb0:	4604      	mov	r4, r0
        lfs_stag_t tempbesttag = besttag;
    cdb2:	9b05      	ldr	r3, [sp, #20]
    cdb4:	9308      	str	r3, [sp, #32]
        bool tempsplit = false;
    cdb6:	2600      	movs	r6, #0
    cdb8:	960b      	str	r6, [sp, #44]	; 0x2c
        uint16_t tempcount = 0;
    cdba:	9606      	str	r6, [sp, #24]
        lfs_tag_t ptag = 0xffffffff;
    cdbc:	f04f 38ff 	mov.w	r8, #4294967295
    cdc0:	e066      	b.n	ce90 <lfs_dir_fetchmatch+0x278>
                    if (err == LFS_ERR_CORRUPT) {
    cdc2:	f110 0f54 	cmn.w	r0, #84	; 0x54
    cdc6:	d103      	bne.n	cdd0 <lfs_dir_fetchmatch+0x1b8>
                        dir->erased = false;
    cdc8:	2300      	movs	r3, #0
    cdca:	f889 3016 	strb.w	r3, [r9, #22]
                        break;
    cdce:	e7c7      	b.n	cd60 <lfs_dir_fetchmatch+0x148>
                    return err;
    cdd0:	9005      	str	r0, [sp, #20]
    cdd2:	e1b6      	b.n	d142 <lfs_dir_fetchmatch+0x52a>
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
    cdd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return (tag & 0x0ff00000) >> 20;
    cdd6:	ea4f 5813 	mov.w	r8, r3, lsr #20
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
    cdda:	ea85 78c8 	eor.w	r8, r5, r8, lsl #31
                lfs->seed ^= crc;
    cdde:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
    cde2:	4062      	eors	r2, r4
    cde4:	f8cb 202c 	str.w	r2, [fp, #44]	; 0x2c
    return ((int32_t)(tag << 22) >> 22) == -1;
    cde8:	f343 0209 	sbfx	r2, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    cdec:	f1b2 3fff 	cmp.w	r2, #4294967295
    cdf0:	bf08      	it	eq
    cdf2:	3301      	addeq	r3, #1
    return tag & 0x000003ff;
    cdf4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    cdf8:	3304      	adds	r3, #4
                dir->off = off + lfs_tag_dsize(tag);
    cdfa:	4433      	add	r3, r6
    cdfc:	f8c9 300c 	str.w	r3, [r9, #12]
                dir->etag = ptag;
    ce00:	f8c9 8010 	str.w	r8, [r9, #16]
                dir->count = tempcount;
    ce04:	9b06      	ldr	r3, [sp, #24]
    ce06:	f8a9 3014 	strh.w	r3, [r9, #20]
                dir->tail[0] = temptail[0];
    ce0a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    ce0c:	f8c9 3018 	str.w	r3, [r9, #24]
                dir->tail[1] = temptail[1];
    ce10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    ce12:	f8c9 301c 	str.w	r3, [r9, #28]
                dir->split = tempsplit;
    ce16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    ce18:	f889 3017 	strb.w	r3, [r9, #23]
                besttag = tempbesttag;
    ce1c:	9b08      	ldr	r3, [sp, #32]
    ce1e:	9305      	str	r3, [sp, #20]
                crc = 0xffffffff;
    ce20:	f04f 34ff 	mov.w	r4, #4294967295
    ce24:	e034      	b.n	ce90 <lfs_dir_fetchmatch+0x278>
                    if (err == LFS_ERR_CORRUPT) {
    ce26:	f110 0f54 	cmn.w	r0, #84	; 0x54
    ce2a:	d10f      	bne.n	ce4c <lfs_dir_fetchmatch+0x234>
                        dir->erased = false;
    ce2c:	2300      	movs	r3, #0
    ce2e:	f889 3016 	strb.w	r3, [r9, #22]
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
    ce32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
    ce34:	0d1a      	lsrs	r2, r3, #20
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
    ce36:	f412 61e0 	ands.w	r1, r2, #1792	; 0x700
    ce3a:	d109      	bne.n	ce50 <lfs_dir_fetchmatch+0x238>
    return (tag & 0x000ffc00) >> 10;
    ce3c:	f3c3 2389 	ubfx	r3, r3, #10, #10
                if (lfs_tag_id(tag) >= tempcount) {
    ce40:	9a06      	ldr	r2, [sp, #24]
    ce42:	4293      	cmp	r3, r2
    ce44:	d30c      	bcc.n	ce60 <lfs_dir_fetchmatch+0x248>
                    tempcount = lfs_tag_id(tag) + 1;
    ce46:	3301      	adds	r3, #1
    ce48:	9306      	str	r3, [sp, #24]
    ce4a:	e009      	b.n	ce60 <lfs_dir_fetchmatch+0x248>
                    return err;
    ce4c:	9005      	str	r0, [sp, #20]
    ce4e:	e178      	b.n	d142 <lfs_dir_fetchmatch+0x52a>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
    ce50:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    ce54:	f000 8090 	beq.w	cf78 <lfs_dir_fetchmatch+0x360>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
    ce58:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
    ce5c:	f000 80b5 	beq.w	cfca <lfs_dir_fetchmatch+0x3b2>
            if ((fmask & tag) == (fmask & ftag)) {
    ce60:	990c      	ldr	r1, [sp, #48]	; 0x30
    ce62:	9b20      	ldr	r3, [sp, #128]	; 0x80
    ce64:	404b      	eors	r3, r1
    ce66:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ce68:	4213      	tst	r3, r2
    ce6a:	d110      	bne.n	ce8e <lfs_dir_fetchmatch+0x276>
                        dir->pair[0], off+sizeof(tag)});
    ce6c:	f8d9 3000 	ldr.w	r3, [r9]
                int res = cb(data, tag, &(struct lfs_diskoff){
    ce70:	9314      	str	r3, [sp, #80]	; 0x50
                        dir->pair[0], off+sizeof(tag)});
    ce72:	1d33      	adds	r3, r6, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
    ce74:	9315      	str	r3, [sp, #84]	; 0x54
    ce76:	aa14      	add	r2, sp, #80	; 0x50
    ce78:	9823      	ldr	r0, [sp, #140]	; 0x8c
    ce7a:	9b22      	ldr	r3, [sp, #136]	; 0x88
    ce7c:	4798      	blx	r3
                if (res < 0) {
    ce7e:	2800      	cmp	r0, #0
    ce80:	f2c0 80c2 	blt.w	d008 <lfs_dir_fetchmatch+0x3f0>
                if (res == LFS_CMP_EQ) {
    ce84:	2800      	cmp	r0, #0
    ce86:	f040 80c8 	bne.w	d01a <lfs_dir_fetchmatch+0x402>
                    tempbesttag = tag;
    ce8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ce8c:	9308      	str	r3, [sp, #32]
            ptag = tag;
    ce8e:	46a8      	mov	r8, r5
    return ((int32_t)(tag << 22) >> 22) == -1;
    ce90:	f348 0309 	sbfx	r3, r8, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    ce94:	f1b3 3fff 	cmp.w	r3, #4294967295
    ce98:	bf14      	ite	ne
    ce9a:	4643      	movne	r3, r8
    ce9c:	f108 0301 	addeq.w	r3, r8, #1
    return tag & 0x000003ff;
    cea0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    cea4:	3304      	adds	r3, #4
            off += lfs_tag_dsize(ptag);
    cea6:	441e      	add	r6, r3
            int err = lfs_bd_read(lfs,
    cea8:	465f      	mov	r7, fp
                    NULL, &lfs->rcache, lfs->cfg->block_size,
    ceaa:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
            int err = lfs_bd_read(lfs,
    ceae:	69db      	ldr	r3, [r3, #28]
    ceb0:	2204      	movs	r2, #4
    ceb2:	9203      	str	r2, [sp, #12]
    ceb4:	aa0c      	add	r2, sp, #48	; 0x30
    ceb6:	9202      	str	r2, [sp, #8]
    ceb8:	9601      	str	r6, [sp, #4]
    ceba:	f8d9 2000 	ldr.w	r2, [r9]
    cebe:	9200      	str	r2, [sp, #0]
    cec0:	465a      	mov	r2, fp
    cec2:	2100      	movs	r1, #0
    cec4:	4658      	mov	r0, fp
    cec6:	f007 fc6a 	bl	1479e <lfs_bd_read>
            if (err) {
    ceca:	9007      	str	r0, [sp, #28]
    cecc:	2800      	cmp	r0, #0
    cece:	f47f af0a 	bne.w	cce6 <lfs_dir_fetchmatch+0xce>
            crc = lfs_crc(crc, &tag, sizeof(tag));
    ced2:	2204      	movs	r2, #4
    ced4:	a90c      	add	r1, sp, #48	; 0x30
    ced6:	4620      	mov	r0, r4
    ced8:	f002 faf4 	bl	f4c4 <lfs_crc>
    cedc:	4604      	mov	r4, r0
            tag = lfs_frombe32(tag) ^ ptag;
    cede:	9d0c      	ldr	r5, [sp, #48]	; 0x30
static inline uint32_t lfs_frombe32(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
    cee0:	ba2d      	rev	r5, r5
    cee2:	ea85 0508 	eor.w	r5, r5, r8
    cee6:	950c      	str	r5, [sp, #48]	; 0x30
            if (!lfs_tag_isvalid(tag)) {
    cee8:	2d00      	cmp	r5, #0
    ceea:	f6ff af04 	blt.w	ccf6 <lfs_dir_fetchmatch+0xde>
    return ((int32_t)(tag << 22) >> 22) == -1;
    ceee:	f345 0209 	sbfx	r2, r5, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    cef2:	f1b2 3fff 	cmp.w	r2, #4294967295
    cef6:	bf14      	ite	ne
    cef8:	462a      	movne	r2, r5
    cefa:	1c6a      	addeq	r2, r5, #1
    return tag & 0x000003ff;
    cefc:	f3c2 0209 	ubfx	r2, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    cf00:	3204      	adds	r2, #4
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
    cf02:	4432      	add	r2, r6
    cf04:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
    cf08:	69db      	ldr	r3, [r3, #28]
    cf0a:	429a      	cmp	r2, r3
    cf0c:	f63f af0e 	bhi.w	cd2c <lfs_dir_fetchmatch+0x114>
    return (tag & 0x70000000) >> 20;
    cf10:	0d2a      	lsrs	r2, r5, #20
    cf12:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
    cf16:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    cf1a:	f43f af0b 	beq.w	cd34 <lfs_dir_fetchmatch+0x11c>
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
    cf1e:	f04f 0804 	mov.w	r8, #4
    cf22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return ((int32_t)(tag << 22) >> 22) == -1;
    cf24:	f343 0209 	sbfx	r2, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    cf28:	f1b2 3fff 	cmp.w	r2, #4294967295
    cf2c:	bf08      	it	eq
    cf2e:	3301      	addeq	r3, #1
    return tag & 0x000003ff;
    cf30:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    cf34:	3304      	adds	r3, #4
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
    cf36:	4543      	cmp	r3, r8
    cf38:	f67f af7b 	bls.w	ce32 <lfs_dir_fetchmatch+0x21a>
                        NULL, &lfs->rcache, lfs->cfg->block_size,
    cf3c:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
                err = lfs_bd_read(lfs,
    cf40:	69db      	ldr	r3, [r3, #28]
    cf42:	2201      	movs	r2, #1
    cf44:	9203      	str	r2, [sp, #12]
    cf46:	aa0d      	add	r2, sp, #52	; 0x34
    cf48:	9202      	str	r2, [sp, #8]
    cf4a:	eb06 0208 	add.w	r2, r6, r8
    cf4e:	9201      	str	r2, [sp, #4]
    cf50:	f8d9 2000 	ldr.w	r2, [r9]
    cf54:	9200      	str	r2, [sp, #0]
    cf56:	463a      	mov	r2, r7
    cf58:	2100      	movs	r1, #0
    cf5a:	4658      	mov	r0, fp
    cf5c:	f007 fc1f 	bl	1479e <lfs_bd_read>
                if (err) {
    cf60:	2800      	cmp	r0, #0
    cf62:	f47f af60 	bne.w	ce26 <lfs_dir_fetchmatch+0x20e>
                crc = lfs_crc(crc, &dat, 1);
    cf66:	2201      	movs	r2, #1
    cf68:	a90d      	add	r1, sp, #52	; 0x34
    cf6a:	4620      	mov	r0, r4
    cf6c:	f002 faaa 	bl	f4c4 <lfs_crc>
    cf70:	4604      	mov	r4, r0
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
    cf72:	f108 0801 	add.w	r8, r8, #1
    cf76:	e7d4      	b.n	cf22 <lfs_dir_fetchmatch+0x30a>
    return (int8_t)lfs_tag_chunk(tag);
    cf78:	b252      	sxtb	r2, r2
                tempcount += lfs_tag_splice(tag);
    cf7a:	9906      	ldr	r1, [sp, #24]
    cf7c:	4411      	add	r1, r2
    cf7e:	b289      	uxth	r1, r1
    cf80:	9106      	str	r1, [sp, #24]
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
    cf82:	9908      	ldr	r1, [sp, #32]
    cf84:	4608      	mov	r0, r1
    cf86:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    cf8a:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
    cf8e:	f421 717f 	bic.w	r1, r1, #1020	; 0x3fc
    cf92:	f021 0103 	bic.w	r1, r1, #3
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
    cf96:	f041 419f 	orr.w	r1, r1, #1333788672	; 0x4f800000
    cf9a:	f441 01e0 	orr.w	r1, r1, #7340032	; 0x700000
    cf9e:	428b      	cmp	r3, r1
    cfa0:	d00f      	beq.n	cfc2 <lfs_dir_fetchmatch+0x3aa>
                } else if (tempbesttag != -1 &&
    cfa2:	9908      	ldr	r1, [sp, #32]
    cfa4:	f1b1 3fff 	cmp.w	r1, #4294967295
    cfa8:	f43f af5a 	beq.w	ce60 <lfs_dir_fetchmatch+0x248>
    return (tag & 0x000ffc00) >> 10;
    cfac:	f3c3 2389 	ubfx	r3, r3, #10, #10
    cfb0:	f3c0 2189 	ubfx	r1, r0, #10, #10
                } else if (tempbesttag != -1 &&
    cfb4:	428b      	cmp	r3, r1
    cfb6:	f63f af53 	bhi.w	ce60 <lfs_dir_fetchmatch+0x248>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    cfba:	eb00 2382 	add.w	r3, r0, r2, lsl #10
    cfbe:	9308      	str	r3, [sp, #32]
    cfc0:	e74e      	b.n	ce60 <lfs_dir_fetchmatch+0x248>
                    tempbesttag |= 0x80000000;
    cfc2:	f040 4300 	orr.w	r3, r0, #2147483648	; 0x80000000
    cfc6:	9308      	str	r3, [sp, #32]
    cfc8:	e74a      	b.n	ce60 <lfs_dir_fetchmatch+0x248>
                tempsplit = (lfs_tag_chunk(tag) & 1);
    cfca:	f002 0301 	and.w	r3, r2, #1
    cfce:	930b      	str	r3, [sp, #44]	; 0x2c
                        NULL, &lfs->rcache, lfs->cfg->block_size,
    cfd0:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
                err = lfs_bd_read(lfs,
    cfd4:	69db      	ldr	r3, [r3, #28]
    cfd6:	2208      	movs	r2, #8
    cfd8:	9203      	str	r2, [sp, #12]
    cfda:	aa0e      	add	r2, sp, #56	; 0x38
    cfdc:	9202      	str	r2, [sp, #8]
    cfde:	1d32      	adds	r2, r6, #4
    cfe0:	9201      	str	r2, [sp, #4]
    cfe2:	f8d9 2000 	ldr.w	r2, [r9]
    cfe6:	9200      	str	r2, [sp, #0]
    cfe8:	465a      	mov	r2, fp
    cfea:	2100      	movs	r1, #0
    cfec:	4658      	mov	r0, fp
    cfee:	f007 fbd6 	bl	1479e <lfs_bd_read>
                if (err) {
    cff2:	2800      	cmp	r0, #0
    cff4:	f43f af34 	beq.w	ce60 <lfs_dir_fetchmatch+0x248>
                    if (err == LFS_ERR_CORRUPT) {
    cff8:	f110 0f54 	cmn.w	r0, #84	; 0x54
    cffc:	f47f af30 	bne.w	ce60 <lfs_dir_fetchmatch+0x248>
                        dir->erased = false;
    d000:	2300      	movs	r3, #0
    d002:	f889 3016 	strb.w	r3, [r9, #22]
                        break;
    d006:	e6ab      	b.n	cd60 <lfs_dir_fetchmatch+0x148>
                    if (res == LFS_ERR_CORRUPT) {
    d008:	f110 0f54 	cmn.w	r0, #84	; 0x54
    d00c:	d103      	bne.n	d016 <lfs_dir_fetchmatch+0x3fe>
                        dir->erased = false;
    d00e:	2300      	movs	r3, #0
    d010:	f889 3016 	strb.w	r3, [r9, #22]
                        break;
    d014:	e6a4      	b.n	cd60 <lfs_dir_fetchmatch+0x148>
                    return res;
    d016:	9005      	str	r0, [sp, #20]
    d018:	e093      	b.n	d142 <lfs_dir_fetchmatch+0x52a>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
    d01a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    d01c:	9b08      	ldr	r3, [sp, #32]
    d01e:	461f      	mov	r7, r3
    d020:	ea82 0103 	eor.w	r1, r2, r3
    d024:	4b19      	ldr	r3, [pc, #100]	; (d08c <lfs_dir_fetchmatch+0x474>)
    d026:	400b      	ands	r3, r1
    d028:	b16b      	cbz	r3, d046 <lfs_dir_fetchmatch+0x42e>
                } else if (res == LFS_CMP_GT &&
    d02a:	2802      	cmp	r0, #2
    d02c:	f47f af2f 	bne.w	ce8e <lfs_dir_fetchmatch+0x276>
    return (tag & 0x000ffc00) >> 10;
    d030:	f3c2 2389 	ubfx	r3, r2, #10, #10
    d034:	f3c7 2789 	ubfx	r7, r7, #10, #10
                } else if (res == LFS_CMP_GT &&
    d038:	42bb      	cmp	r3, r7
    d03a:	f63f af28 	bhi.w	ce8e <lfs_dir_fetchmatch+0x276>
                    tempbesttag = tag | 0x80000000;
    d03e:	f042 4300 	orr.w	r3, r2, #2147483648	; 0x80000000
    d042:	9308      	str	r3, [sp, #32]
    d044:	e723      	b.n	ce8e <lfs_dir_fetchmatch+0x276>
                    tempbesttag = -1;
    d046:	f04f 33ff 	mov.w	r3, #4294967295
    d04a:	9308      	str	r3, [sp, #32]
    d04c:	e71f      	b.n	ce8e <lfs_dir_fetchmatch+0x276>
                return err;
    d04e:	9b07      	ldr	r3, [sp, #28]
    d050:	9305      	str	r3, [sp, #20]
    d052:	e076      	b.n	d142 <lfs_dir_fetchmatch+0x52a>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    d054:	f8db 203c 	ldr.w	r2, [fp, #60]	; 0x3c
    return (tag & 0x70000000) >> 20;
    d058:	0d13      	lsrs	r3, r2, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    d05a:	f413 6fe0 	tst.w	r3, #1792	; 0x700
    d05e:	d017      	beq.n	d090 <lfs_dir_fetchmatch+0x478>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    d060:	f8db 0040 	ldr.w	r0, [fp, #64]	; 0x40
    d064:	f8d9 1000 	ldr.w	r1, [r9]
    d068:	4281      	cmp	r1, r0
    d06a:	d025      	beq.n	d0b8 <lfs_dir_fetchmatch+0x4a0>
    d06c:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
    d070:	f8d9 4004 	ldr.w	r4, [r9, #4]
    d074:	429c      	cmp	r4, r3
    d076:	d021      	beq.n	d0bc <lfs_dir_fetchmatch+0x4a4>
    d078:	4284      	cmp	r4, r0
    d07a:	d021      	beq.n	d0c0 <lfs_dir_fetchmatch+0x4a8>
    d07c:	4299      	cmp	r1, r3
    d07e:	d001      	beq.n	d084 <lfs_dir_fetchmatch+0x46c>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    d080:	2300      	movs	r3, #0
    d082:	e006      	b.n	d092 <lfs_dir_fetchmatch+0x47a>
    d084:	2301      	movs	r3, #1
    d086:	e004      	b.n	d092 <lfs_dir_fetchmatch+0x47a>
    d088:	00016714 	.word	0x00016714
    d08c:	7ffffc00 	.word	0x7ffffc00
    d090:	2300      	movs	r3, #0
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
    d092:	b1d3      	cbz	r3, d0ca <lfs_dir_fetchmatch+0x4b2>
    return (tag & 0x000ffc00) >> 10;
    d094:	f3c2 2389 	ubfx	r3, r2, #10, #10
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
    d098:	9a05      	ldr	r2, [sp, #20]
    d09a:	4611      	mov	r1, r2
    return (tag & 0x000ffc00) >> 10;
    d09c:	f3c2 2289 	ubfx	r2, r2, #10, #10
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
    d0a0:	4293      	cmp	r3, r2
    d0a2:	d00f      	beq.n	d0c4 <lfs_dir_fetchmatch+0x4ac>
                } else if (besttag != -1 &&
    d0a4:	9805      	ldr	r0, [sp, #20]
    d0a6:	f1b0 3fff 	cmp.w	r0, #4294967295
    d0aa:	d00e      	beq.n	d0ca <lfs_dir_fetchmatch+0x4b2>
    d0ac:	4293      	cmp	r3, r2
    d0ae:	d20c      	bcs.n	d0ca <lfs_dir_fetchmatch+0x4b2>
                    besttag -= LFS_MKTAG(0, 1, 0);
    d0b0:	f5a1 6380 	sub.w	r3, r1, #1024	; 0x400
    d0b4:	9305      	str	r3, [sp, #20]
    d0b6:	e008      	b.n	d0ca <lfs_dir_fetchmatch+0x4b2>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    d0b8:	2301      	movs	r3, #1
    d0ba:	e7ea      	b.n	d092 <lfs_dir_fetchmatch+0x47a>
    d0bc:	2301      	movs	r3, #1
    d0be:	e7e8      	b.n	d092 <lfs_dir_fetchmatch+0x47a>
    d0c0:	2301      	movs	r3, #1
    d0c2:	e7e6      	b.n	d092 <lfs_dir_fetchmatch+0x47a>
                    besttag |= 0x80000000;
    d0c4:	f041 4300 	orr.w	r3, r1, #2147483648	; 0x80000000
    d0c8:	9305      	str	r3, [sp, #20]
            if (id) {
    d0ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
    d0cc:	b14b      	cbz	r3, d0e2 <lfs_dir_fetchmatch+0x4ca>
    return (tag & 0x000ffc00) >> 10;
    d0ce:	9b05      	ldr	r3, [sp, #20]
    d0d0:	f3c3 2389 	ubfx	r3, r3, #10, #10
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
    d0d4:	f8b9 2014 	ldrh.w	r2, [r9, #20]
    return (a < b) ? a : b;
    d0d8:	4293      	cmp	r3, r2
    d0da:	bf28      	it	cs
    d0dc:	4613      	movcs	r3, r2
    d0de:	9a21      	ldr	r2, [sp, #132]	; 0x84
    d0e0:	8013      	strh	r3, [r2, #0]
            if (lfs_tag_isvalid(besttag)) {
    d0e2:	9b05      	ldr	r3, [sp, #20]
    d0e4:	2b00      	cmp	r3, #0
    d0e6:	da2c      	bge.n	d142 <lfs_dir_fetchmatch+0x52a>
    return (tag & 0x000ffc00) >> 10;
    d0e8:	f3c3 2389 	ubfx	r3, r3, #10, #10
            } else if (lfs_tag_id(besttag) < dir->count) {
    d0ec:	f8b9 2014 	ldrh.w	r2, [r9, #20]
    d0f0:	429a      	cmp	r2, r3
    d0f2:	d903      	bls.n	d0fc <lfs_dir_fetchmatch+0x4e4>
                return LFS_ERR_NOENT;
    d0f4:	f06f 0301 	mvn.w	r3, #1
    d0f8:	9305      	str	r3, [sp, #20]
    d0fa:	e022      	b.n	d142 <lfs_dir_fetchmatch+0x52a>
                return 0;
    d0fc:	2300      	movs	r3, #0
    d0fe:	9305      	str	r3, [sp, #20]
    d100:	e01f      	b.n	d142 <lfs_dir_fetchmatch+0x52a>
    d102:	4a17      	ldr	r2, [pc, #92]	; (d160 <lfs_dir_fetchmatch+0x548>)
    d104:	4b17      	ldr	r3, [pc, #92]	; (d164 <lfs_dir_fetchmatch+0x54c>)
    d106:	1ad2      	subs	r2, r2, r3
    d108:	08d2      	lsrs	r2, r2, #3
    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
    d10a:	f04f 0300 	mov.w	r3, #0
    d10e:	2101      	movs	r1, #1
    d110:	f361 0302 	bfi	r3, r1, #0, #3
    d114:	f36f 03c5 	bfc	r3, #3, #3
    d118:	f362 138f 	bfi	r3, r2, #6, #10
    d11c:	4a12      	ldr	r2, [pc, #72]	; (d168 <lfs_dir_fetchmatch+0x550>)
    d11e:	920e      	str	r2, [sp, #56]	; 0x38
    d120:	f240 32e5 	movw	r2, #997	; 0x3e5
    d124:	920f      	str	r2, [sp, #60]	; 0x3c
    d126:	f8d9 2000 	ldr.w	r2, [r9]
    d12a:	9210      	str	r2, [sp, #64]	; 0x40
    d12c:	f8d9 2004 	ldr.w	r2, [r9, #4]
    d130:	9211      	str	r2, [sp, #68]	; 0x44
    d132:	2204      	movs	r2, #4
    d134:	a90e      	add	r1, sp, #56	; 0x38
    d136:	480d      	ldr	r0, [pc, #52]	; (d16c <lfs_dir_fetchmatch+0x554>)
    d138:	f7f6 f92c 	bl	3394 <log_n>
    return LFS_ERR_CORRUPT;
    d13c:	f06f 0353 	mvn.w	r3, #83	; 0x53
    d140:	9305      	str	r3, [sp, #20]
}
    d142:	9805      	ldr	r0, [sp, #20]
    d144:	b017      	add	sp, #92	; 0x5c
    d146:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_CORRUPT;
    d14a:	f06f 0353 	mvn.w	r3, #83	; 0x53
    d14e:	9305      	str	r3, [sp, #20]
    d150:	e7f7      	b.n	d142 <lfs_dir_fetchmatch+0x52a>
    d152:	f06f 0353 	mvn.w	r3, #83	; 0x53
    d156:	9305      	str	r3, [sp, #20]
    d158:	e7f3      	b.n	d142 <lfs_dir_fetchmatch+0x52a>
    d15a:	9005      	str	r0, [sp, #20]
    d15c:	e7f1      	b.n	d142 <lfs_dir_fetchmatch+0x52a>
    d15e:	bf00      	nop
    d160:	00016600 	.word	0x00016600
    d164:	000165d8 	.word	0x000165d8
    d168:	00017c68 	.word	0x00017c68
    d16c:	00017c90 	.word	0x00017c90

0000d170 <lfs_fs_parent>:
        lfs_mdir_t *parent) {
    d170:	b5f0      	push	{r4, r5, r6, r7, lr}
    d172:	b089      	sub	sp, #36	; 0x24
    d174:	4606      	mov	r6, r0
    d176:	460f      	mov	r7, r1
    d178:	4614      	mov	r4, r2
    parent->tail[0] = 0;
    d17a:	2500      	movs	r5, #0
    d17c:	6195      	str	r5, [r2, #24]
    parent->tail[1] = 1;
    d17e:	2301      	movs	r3, #1
    d180:	61d3      	str	r3, [r2, #28]
    while (!lfs_pair_isnull(parent->tail)) {
    d182:	e025      	b.n	d1d0 <lfs_fs_parent+0x60>
            return LFS_ERR_CORRUPT;
    d184:	f06f 0353 	mvn.w	r3, #83	; 0x53
    d188:	e02e      	b.n	d1e8 <lfs_fs_parent+0x78>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    d18a:	2301      	movs	r3, #1
    d18c:	e000      	b.n	d190 <lfs_fs_parent+0x20>
    d18e:	2301      	movs	r3, #1
    while (!lfs_pair_isnull(parent->tail)) {
    d190:	bb43      	cbnz	r3, d1e4 <lfs_fs_parent+0x74>
        if (cycle >= lfs->cfg->block_count/2) {
    d192:	6eb3      	ldr	r3, [r6, #104]	; 0x68
    d194:	6a1b      	ldr	r3, [r3, #32]
    d196:	ebb5 0f53 	cmp.w	r5, r3, lsr #1
    d19a:	d2f3      	bcs.n	d184 <lfs_fs_parent+0x14>
        cycle += 1;
    d19c:	3501      	adds	r5, #1
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
    d19e:	9605      	str	r6, [sp, #20]
                    lfs, {pair[0], pair[1]}});
    d1a0:	683b      	ldr	r3, [r7, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
    d1a2:	9306      	str	r3, [sp, #24]
    d1a4:	687b      	ldr	r3, [r7, #4]
    d1a6:	9307      	str	r3, [sp, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
    d1a8:	ab05      	add	r3, sp, #20
    d1aa:	9303      	str	r3, [sp, #12]
    d1ac:	4b10      	ldr	r3, [pc, #64]	; (d1f0 <lfs_fs_parent+0x80>)
    d1ae:	9302      	str	r3, [sp, #8]
    d1b0:	2300      	movs	r3, #0
    d1b2:	9301      	str	r3, [sp, #4]
    d1b4:	4b0f      	ldr	r3, [pc, #60]	; (d1f4 <lfs_fs_parent+0x84>)
    d1b6:	9300      	str	r3, [sp, #0]
    d1b8:	4b0f      	ldr	r3, [pc, #60]	; (d1f8 <lfs_fs_parent+0x88>)
    d1ba:	f104 0218 	add.w	r2, r4, #24
    d1be:	4621      	mov	r1, r4
    d1c0:	4630      	mov	r0, r6
    d1c2:	f7ff fd29 	bl	cc18 <lfs_dir_fetchmatch>
        if (tag && tag != LFS_ERR_NOENT) {
    d1c6:	4603      	mov	r3, r0
    d1c8:	b110      	cbz	r0, d1d0 <lfs_fs_parent+0x60>
    d1ca:	f110 0f02 	cmn.w	r0, #2
    d1ce:	d10b      	bne.n	d1e8 <lfs_fs_parent+0x78>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    d1d0:	69a3      	ldr	r3, [r4, #24]
    d1d2:	f1b3 3fff 	cmp.w	r3, #4294967295
    d1d6:	d0da      	beq.n	d18e <lfs_fs_parent+0x1e>
    d1d8:	69e3      	ldr	r3, [r4, #28]
    d1da:	f1b3 3fff 	cmp.w	r3, #4294967295
    d1de:	d0d4      	beq.n	d18a <lfs_fs_parent+0x1a>
    d1e0:	2300      	movs	r3, #0
    d1e2:	e7d5      	b.n	d190 <lfs_fs_parent+0x20>
    return LFS_ERR_NOENT;
    d1e4:	f06f 0301 	mvn.w	r3, #1
}
    d1e8:	4618      	mov	r0, r3
    d1ea:	b009      	add	sp, #36	; 0x24
    d1ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d1ee:	bf00      	nop
    d1f0:	00014937 	.word	0x00014937
    d1f4:	20000008 	.word	0x20000008
    d1f8:	7ff003ff 	.word	0x7ff003ff

0000d1fc <lfs_dir_traverse>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
    d1fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d200:	b097      	sub	sp, #92	; 0x5c
    d202:	900b      	str	r0, [sp, #44]	; 0x2c
    d204:	4688      	mov	r8, r1
    d206:	4692      	mov	sl, r2
    d208:	461d      	mov	r5, r3
    d20a:	9e20      	ldr	r6, [sp, #128]	; 0x80
    d20c:	9f21      	ldr	r7, [sp, #132]	; 0x84
    d20e:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
    d212:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
    d216:	930d      	str	r3, [sp, #52]	; 0x34
    d218:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
    d21c:	930e      	str	r3, [sp, #56]	; 0x38
    d21e:	f9bd 3098 	ldrsh.w	r3, [sp, #152]	; 0x98
    d222:	930c      	str	r3, [sp, #48]	; 0x30
    return ((int32_t)(tag << 22) >> 22) == -1;
    d224:	f345 0409 	sbfx	r4, r5, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    d228:	f1b4 3fff 	cmp.w	r4, #4294967295
    d22c:	bf14      	ite	ne
    d22e:	462c      	movne	r4, r5
    d230:	1c6c      	addeq	r4, r5, #1
    return tag & 0x000003ff;
    d232:	f3c4 0409 	ubfx	r4, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    d236:	3404      	adds	r4, #4
        if (off+lfs_tag_dsize(ptag) < dir->off) {
    d238:	4454      	add	r4, sl
    d23a:	f8d8 300c 	ldr.w	r3, [r8, #12]
    d23e:	429c      	cmp	r4, r3
    d240:	d32b      	bcc.n	d29a <lfs_dir_traverse+0x9e>
        } else if (attrcount > 0) {
    d242:	2f00      	cmp	r7, #0
    d244:	f340 80ba 	ble.w	d3bc <lfs_dir_traverse+0x1c0>
            tag = attrs[0].tag;
    d248:	6833      	ldr	r3, [r6, #0]
    d24a:	9313      	str	r3, [sp, #76]	; 0x4c
            buffer = attrs[0].buffer;
    d24c:	6874      	ldr	r4, [r6, #4]
            attrs += 1;
    d24e:	3608      	adds	r6, #8
            attrcount -= 1;
    d250:	3f01      	subs	r7, #1
        if ((mask & tmask & tag) != (mask & tmask & ttag)) {
    d252:	4b5d      	ldr	r3, [pc, #372]	; (d3c8 <lfs_dir_traverse+0x1cc>)
    d254:	ea0b 0303 	and.w	r3, fp, r3
    d258:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    d25a:	9923      	ldr	r1, [sp, #140]	; 0x8c
    d25c:	404a      	eors	r2, r1
    d25e:	ea12 0903 	ands.w	r9, r2, r3
    d262:	d1df      	bne.n	d224 <lfs_dir_traverse+0x28>
    return (tag & 0x000ffc00) >> 10;
    d264:	f3cb 2389 	ubfx	r3, fp, #10, #10
        if (lfs_tag_id(tmask) != 0) {
    d268:	2b00      	cmp	r3, #0
    d26a:	d135      	bne.n	d2d8 <lfs_dir_traverse+0xdc>
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
    d26c:	9913      	ldr	r1, [sp, #76]	; 0x4c
    return (tag & 0x7ff00000) >> 20;
    d26e:	f3c1 530a 	ubfx	r3, r1, #20, #11
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
    d272:	2b00      	cmp	r3, #0
    d274:	d0d6      	beq.n	d224 <lfs_dir_traverse+0x28>
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
    d276:	f240 1201 	movw	r2, #257	; 0x101
    d27a:	4293      	cmp	r3, r2
    d27c:	d04c      	beq.n	d318 <lfs_dir_traverse+0x11c>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
    d27e:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    d282:	d06d      	beq.n	d360 <lfs_dir_traverse+0x164>
            int err = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
    d284:	4622      	mov	r2, r4
    d286:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d288:	eb01 2183 	add.w	r1, r1, r3, lsl #10
    d28c:	9828      	ldr	r0, [sp, #160]	; 0xa0
    d28e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    d290:	4798      	blx	r3
            if (err) {
    d292:	4603      	mov	r3, r0
    d294:	2800      	cmp	r0, #0
    d296:	d0c5      	beq.n	d224 <lfs_dir_traverse+0x28>
    d298:	e091      	b.n	d3be <lfs_dir_traverse+0x1c2>
            int err = lfs_bd_read(lfs,
    d29a:	2304      	movs	r3, #4
    d29c:	9303      	str	r3, [sp, #12]
    d29e:	aa13      	add	r2, sp, #76	; 0x4c
    d2a0:	9202      	str	r2, [sp, #8]
    d2a2:	9401      	str	r4, [sp, #4]
    d2a4:	f8d8 2000 	ldr.w	r2, [r8]
    d2a8:	9200      	str	r2, [sp, #0]
    d2aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    d2ac:	2100      	movs	r1, #0
    d2ae:	4610      	mov	r0, r2
    d2b0:	f007 fa75 	bl	1479e <lfs_bd_read>
            if (err) {
    d2b4:	4603      	mov	r3, r0
    d2b6:	2800      	cmp	r0, #0
    d2b8:	f040 8081 	bne.w	d3be <lfs_dir_traverse+0x1c2>
            tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
    d2bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    return __builtin_bswap32(a);
    d2be:	ba1b      	rev	r3, r3
    d2c0:	405d      	eors	r5, r3
    d2c2:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    d2c6:	9513      	str	r5, [sp, #76]	; 0x4c
            disk.block = dir->pair[0];
    d2c8:	f8d8 3000 	ldr.w	r3, [r8]
    d2cc:	9314      	str	r3, [sp, #80]	; 0x50
            disk.off = off+sizeof(lfs_tag_t);
    d2ce:	1d23      	adds	r3, r4, #4
    d2d0:	9315      	str	r3, [sp, #84]	; 0x54
            off += lfs_tag_dsize(ptag);
    d2d2:	46a2      	mov	sl, r4
            buffer = &disk;
    d2d4:	ac14      	add	r4, sp, #80	; 0x50
    d2d6:	e7bc      	b.n	d252 <lfs_dir_traverse+0x56>
            int filter = lfs_dir_traverse(lfs,
    d2d8:	ab13      	add	r3, sp, #76	; 0x4c
    d2da:	9308      	str	r3, [sp, #32]
    d2dc:	4b3b      	ldr	r3, [pc, #236]	; (d3cc <lfs_dir_traverse+0x1d0>)
    d2de:	9307      	str	r3, [sp, #28]
    d2e0:	2300      	movs	r3, #0
    d2e2:	9306      	str	r3, [sp, #24]
    d2e4:	9305      	str	r3, [sp, #20]
    d2e6:	9304      	str	r3, [sp, #16]
    d2e8:	9303      	str	r3, [sp, #12]
    d2ea:	9302      	str	r3, [sp, #8]
    d2ec:	9701      	str	r7, [sp, #4]
    d2ee:	9600      	str	r6, [sp, #0]
    d2f0:	462b      	mov	r3, r5
    d2f2:	4652      	mov	r2, sl
    d2f4:	4641      	mov	r1, r8
    d2f6:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d2f8:	f7ff ff80 	bl	d1fc <lfs_dir_traverse>
            if (filter < 0) {
    d2fc:	1e03      	subs	r3, r0, #0
    d2fe:	db5e      	blt.n	d3be <lfs_dir_traverse+0x1c2>
            if (filter) {
    d300:	2b00      	cmp	r3, #0
    d302:	d18f      	bne.n	d224 <lfs_dir_traverse+0x28>
    return (tag & 0x000ffc00) >> 10;
    d304:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d306:	f3c3 2389 	ubfx	r3, r3, #10, #10
            if (!(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
    d30a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    d30c:	429a      	cmp	r2, r3
    d30e:	d889      	bhi.n	d224 <lfs_dir_traverse+0x28>
    d310:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d312:	429a      	cmp	r2, r3
    d314:	d8aa      	bhi.n	d26c <lfs_dir_traverse+0x70>
    d316:	e785      	b.n	d224 <lfs_dir_traverse+0x28>
    return tag & 0x000003ff;
    d318:	f3c1 0209 	ubfx	r2, r1, #0, #10
            uint16_t fromid = lfs_tag_size(tag);
    d31c:	4610      	mov	r0, r2
    return (tag & 0x000ffc00) >> 10;
    d31e:	f3c1 2389 	ubfx	r3, r1, #10, #10
                    fromid, fromid+1, toid-fromid+diff,
    d322:	1a9b      	subs	r3, r3, r2
            int err = lfs_dir_traverse(lfs,
    d324:	9928      	ldr	r1, [sp, #160]	; 0xa0
    d326:	9108      	str	r1, [sp, #32]
    d328:	9927      	ldr	r1, [sp, #156]	; 0x9c
    d32a:	9107      	str	r1, [sp, #28]
    d32c:	990c      	ldr	r1, [sp, #48]	; 0x30
    d32e:	440b      	add	r3, r1
    d330:	b21b      	sxth	r3, r3
    d332:	9306      	str	r3, [sp, #24]
    d334:	3201      	adds	r2, #1
    d336:	9205      	str	r2, [sp, #20]
    d338:	9004      	str	r0, [sp, #16]
    d33a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    d33e:	9303      	str	r3, [sp, #12]
    d340:	4b23      	ldr	r3, [pc, #140]	; (d3d0 <lfs_dir_traverse+0x1d4>)
    d342:	9302      	str	r3, [sp, #8]
    d344:	2200      	movs	r2, #0
    d346:	9201      	str	r2, [sp, #4]
    d348:	9200      	str	r2, [sp, #0]
    d34a:	f04f 33ff 	mov.w	r3, #4294967295
    d34e:	4621      	mov	r1, r4
    d350:	980b      	ldr	r0, [sp, #44]	; 0x2c
    d352:	f7ff ff53 	bl	d1fc <lfs_dir_traverse>
            if (err) {
    d356:	4603      	mov	r3, r0
    d358:	2800      	cmp	r0, #0
    d35a:	f43f af63 	beq.w	d224 <lfs_dir_traverse+0x28>
    d35e:	e02e      	b.n	d3be <lfs_dir_traverse+0x1c2>
    d360:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    d364:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
    d368:	9511      	str	r5, [sp, #68]	; 0x44
    d36a:	46b2      	mov	sl, r6
    d36c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    d36e:	9e27      	ldr	r6, [sp, #156]	; 0x9c
    d370:	f8dd 80a0 	ldr.w	r8, [sp, #160]	; 0xa0
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
    d374:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    return tag & 0x000003ff;
    d376:	f3c3 0209 	ubfx	r2, r3, #0, #10
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
    d37a:	4591      	cmp	r9, r2
    d37c:	d217      	bcs.n	d3ae <lfs_dir_traverse+0x1b2>
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
    d37e:	eb09 0149 	add.w	r1, r9, r9, lsl #1
    d382:	eb04 0281 	add.w	r2, r4, r1, lsl #2
    d386:	f814 1021 	ldrb.w	r1, [r4, r1, lsl #2]
    d38a:	f501 7140 	add.w	r1, r1, #768	; 0x300
    return (tag & 0x000ffc00) >> 10;
    d38e:	f3c3 2389 	ubfx	r3, r3, #10, #10
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
    d392:	442b      	add	r3, r5
    d394:	029b      	lsls	r3, r3, #10
    d396:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
    d39a:	6891      	ldr	r1, [r2, #8]
    d39c:	6852      	ldr	r2, [r2, #4]
    d39e:	4319      	orrs	r1, r3
    d3a0:	4640      	mov	r0, r8
    d3a2:	47b0      	blx	r6
                if (err) {
    d3a4:	4603      	mov	r3, r0
    d3a6:	b950      	cbnz	r0, d3be <lfs_dir_traverse+0x1c2>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
    d3a8:	f109 0901 	add.w	r9, r9, #1
    d3ac:	e7e2      	b.n	d374 <lfs_dir_traverse+0x178>
    d3ae:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    d3b2:	9d11      	ldr	r5, [sp, #68]	; 0x44
    d3b4:	4656      	mov	r6, sl
    d3b6:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
    d3ba:	e733      	b.n	d224 <lfs_dir_traverse+0x28>
            return 0;
    d3bc:	2300      	movs	r3, #0
}
    d3be:	4618      	mov	r0, r3
    d3c0:	b017      	add	sp, #92	; 0x5c
    d3c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d3c6:	bf00      	nop
    d3c8:	7ff00000 	.word	0x7ff00000
    d3cc:	0000cb51 	.word	0x0000cb51
    d3d0:	600ffc00 	.word	0x600ffc00

0000d3d4 <lfs_dir_getslice>:
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
    d3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d3d8:	b089      	sub	sp, #36	; 0x24
    d3da:	4607      	mov	r7, r0
    d3dc:	468a      	mov	sl, r1
    d3de:	4690      	mov	r8, r2
    d3e0:	469b      	mov	fp, r3
    lfs_off_t off = dir->off;
    d3e2:	68cd      	ldr	r5, [r1, #12]
    lfs_tag_t ntag = dir->etag;
    d3e4:	690b      	ldr	r3, [r1, #16]
    d3e6:	9307      	str	r3, [sp, #28]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    d3e8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    return (tag & 0x70000000) >> 20;
    d3ea:	0d1a      	lsrs	r2, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    d3ec:	f412 6fe0 	tst.w	r2, #1792	; 0x700
    d3f0:	d010      	beq.n	d414 <lfs_dir_getslice+0x40>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    d3f2:	6c02      	ldr	r2, [r0, #64]	; 0x40
    d3f4:	6809      	ldr	r1, [r1, #0]
    d3f6:	4291      	cmp	r1, r2
    d3f8:	d01e      	beq.n	d438 <lfs_dir_getslice+0x64>
    d3fa:	6c44      	ldr	r4, [r0, #68]	; 0x44
    d3fc:	f8da 0004 	ldr.w	r0, [sl, #4]
    d400:	42a0      	cmp	r0, r4
    d402:	d01b      	beq.n	d43c <lfs_dir_getslice+0x68>
    d404:	4290      	cmp	r0, r2
    d406:	d01b      	beq.n	d440 <lfs_dir_getslice+0x6c>
    d408:	428c      	cmp	r4, r1
    d40a:	d001      	beq.n	d410 <lfs_dir_getslice+0x3c>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    d40c:	2200      	movs	r2, #0
    d40e:	e002      	b.n	d416 <lfs_dir_getslice+0x42>
    d410:	2201      	movs	r2, #1
    d412:	e000      	b.n	d416 <lfs_dir_getslice+0x42>
    d414:	2200      	movs	r2, #0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
    d416:	2a00      	cmp	r2, #0
    d418:	f000 808b 	beq.w	d532 <lfs_dir_getslice+0x15e>
    return (tag & 0x000ffc00) >> 10;
    d41c:	f3c8 2289 	ubfx	r2, r8, #10, #10
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
    d420:	2a00      	cmp	r2, #0
    d422:	f000 8088 	beq.w	d536 <lfs_dir_getslice+0x162>
    return (tag & 0x000ffc00) >> 10;
    d426:	f3c3 2389 	ubfx	r3, r3, #10, #10
    d42a:	f3cb 2289 	ubfx	r2, fp, #10, #10
            lfs_tag_id(gmask) != 0 &&
    d42e:	429a      	cmp	r2, r3
    d430:	f080 8083 	bcs.w	d53a <lfs_dir_getslice+0x166>
    lfs_stag_t gdiff = 0;
    d434:	2600      	movs	r6, #0
    d436:	e00b      	b.n	d450 <lfs_dir_getslice+0x7c>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    d438:	2201      	movs	r2, #1
    d43a:	e7ec      	b.n	d416 <lfs_dir_getslice+0x42>
    d43c:	2201      	movs	r2, #1
    d43e:	e7ea      	b.n	d416 <lfs_dir_getslice+0x42>
    d440:	2201      	movs	r2, #1
    d442:	e7e8      	b.n	d416 <lfs_dir_getslice+0x42>
        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
    d444:	ebab 0306 	sub.w	r3, fp, r6
    d448:	4063      	eors	r3, r4
    d44a:	ea13 0f08 	tst.w	r3, r8
    d44e:	d04a      	beq.n	d4e6 <lfs_dir_getslice+0x112>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
    d450:	9c07      	ldr	r4, [sp, #28]
    return ((int32_t)(tag << 22) >> 22) == -1;
    d452:	f344 0909 	sbfx	r9, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    d456:	f1b9 3fff 	cmp.w	r9, #4294967295
    d45a:	bf14      	ite	ne
    d45c:	4623      	movne	r3, r4
    d45e:	1c63      	addeq	r3, r4, #1
    return tag & 0x000003ff;
    d460:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    d464:	1d1a      	adds	r2, r3, #4
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
    d466:	3308      	adds	r3, #8
    d468:	42ab      	cmp	r3, r5
    d46a:	d868      	bhi.n	d53e <lfs_dir_getslice+0x16a>
        off -= lfs_tag_dsize(ntag);
    d46c:	1aad      	subs	r5, r5, r2
        int err = lfs_bd_read(lfs,
    d46e:	9705      	str	r7, [sp, #20]
    d470:	2304      	movs	r3, #4
    d472:	9303      	str	r3, [sp, #12]
    d474:	aa07      	add	r2, sp, #28
    d476:	9202      	str	r2, [sp, #8]
    d478:	9501      	str	r5, [sp, #4]
    d47a:	f8da 2000 	ldr.w	r2, [sl]
    d47e:	9200      	str	r2, [sp, #0]
    d480:	463a      	mov	r2, r7
    d482:	2100      	movs	r1, #0
    d484:	4638      	mov	r0, r7
    d486:	f007 f98a 	bl	1479e <lfs_bd_read>
        if (err) {
    d48a:	4603      	mov	r3, r0
    d48c:	2800      	cmp	r0, #0
    d48e:	d158      	bne.n	d542 <lfs_dir_getslice+0x16e>
        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
    d490:	9b07      	ldr	r3, [sp, #28]
    d492:	ba1b      	rev	r3, r3
    d494:	4063      	eors	r3, r4
    d496:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    d49a:	9307      	str	r3, [sp, #28]
    return (tag & 0x000ffc00) >> 10;
    d49c:	f3c8 2389 	ubfx	r3, r8, #10, #10
        if (lfs_tag_id(gmask) != 0 &&
    d4a0:	2b00      	cmp	r3, #0
    d4a2:	d0cf      	beq.n	d444 <lfs_dir_getslice+0x70>
    return (tag & 0x70000000) >> 20;
    d4a4:	0d23      	lsrs	r3, r4, #20
    d4a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
        if (lfs_tag_id(gmask) != 0 &&
    d4aa:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    d4ae:	d1c9      	bne.n	d444 <lfs_dir_getslice+0x70>
    return (tag & 0x000ffc00) >> 10;
    d4b0:	f3c4 2089 	ubfx	r0, r4, #10, #10
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
    d4b4:	4631      	mov	r1, r6
    d4b6:	ebab 0206 	sub.w	r2, fp, r6
    return (tag & 0x000ffc00) >> 10;
    d4ba:	f3c2 2c89 	ubfx	ip, r2, #10, #10
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
    d4be:	4584      	cmp	ip, r0
    d4c0:	d3c0      	bcc.n	d444 <lfs_dir_getslice+0x70>
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
    d4c2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    d4c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    d4ca:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
    d4ce:	f022 0203 	bic.w	r2, r2, #3
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
    d4d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    d4d6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    d4da:	42a2      	cmp	r2, r4
    d4dc:	d035      	beq.n	d54a <lfs_dir_getslice+0x176>
    return (int8_t)lfs_tag_chunk(tag);
    d4de:	b25e      	sxtb	r6, r3
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    d4e0:	eb01 2686 	add.w	r6, r1, r6, lsl #10
    d4e4:	e7ae      	b.n	d444 <lfs_dir_getslice+0x70>
    d4e6:	46b0      	mov	r8, r6
            if (lfs_tag_isdelete(tag)) {
    d4e8:	f1b9 3fff 	cmp.w	r9, #4294967295
    d4ec:	d030      	beq.n	d550 <lfs_dir_getslice+0x17c>
    return tag & 0x000003ff;
    d4ee:	f3c4 0609 	ubfx	r6, r4, #0, #10
    return (a < b) ? a : b;
    d4f2:	9b14      	ldr	r3, [sp, #80]	; 0x50
    d4f4:	429e      	cmp	r6, r3
    d4f6:	bf28      	it	cs
    d4f8:	461e      	movcs	r6, r3
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
    d4fa:	9b12      	ldr	r3, [sp, #72]	; 0x48
    d4fc:	442b      	add	r3, r5
            err = lfs_bd_read(lfs,
    d4fe:	9603      	str	r6, [sp, #12]
    d500:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    d502:	9202      	str	r2, [sp, #8]
    d504:	3304      	adds	r3, #4
    d506:	9301      	str	r3, [sp, #4]
    d508:	f8da 3000 	ldr.w	r3, [sl]
    d50c:	9300      	str	r3, [sp, #0]
    d50e:	4633      	mov	r3, r6
    d510:	9a05      	ldr	r2, [sp, #20]
    d512:	2100      	movs	r1, #0
    d514:	4638      	mov	r0, r7
    d516:	f007 f942 	bl	1479e <lfs_bd_read>
            if (err) {
    d51a:	4603      	mov	r3, r0
    d51c:	b988      	cbnz	r0, d542 <lfs_dir_getslice+0x16e>
            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
    d51e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    d520:	1b9a      	subs	r2, r3, r6
    d522:	2100      	movs	r1, #0
    d524:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    d526:	1998      	adds	r0, r3, r6
    d528:	f005 fe86 	bl	13238 <memset>
            return tag + gdiff;
    d52c:	4643      	mov	r3, r8
    d52e:	4423      	add	r3, r4
    d530:	e007      	b.n	d542 <lfs_dir_getslice+0x16e>
    lfs_stag_t gdiff = 0;
    d532:	2600      	movs	r6, #0
    d534:	e78c      	b.n	d450 <lfs_dir_getslice+0x7c>
    d536:	2600      	movs	r6, #0
    d538:	e78a      	b.n	d450 <lfs_dir_getslice+0x7c>
        gdiff -= LFS_MKTAG(0, 1, 0);
    d53a:	4e07      	ldr	r6, [pc, #28]	; (d558 <lfs_dir_getslice+0x184>)
    d53c:	e788      	b.n	d450 <lfs_dir_getslice+0x7c>
    return LFS_ERR_NOENT;
    d53e:	f06f 0301 	mvn.w	r3, #1
}
    d542:	4618      	mov	r0, r3
    d544:	b009      	add	sp, #36	; 0x24
    d546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                return LFS_ERR_NOENT;
    d54a:	f06f 0301 	mvn.w	r3, #1
    d54e:	e7f8      	b.n	d542 <lfs_dir_getslice+0x16e>
                return LFS_ERR_NOENT;
    d550:	f06f 0301 	mvn.w	r3, #1
    d554:	e7f5      	b.n	d542 <lfs_dir_getslice+0x16e>
    d556:	bf00      	nop
    d558:	fffffc00 	.word	0xfffffc00

0000d55c <lfs_dir_getgstate>:
        lfs_gstate_t *gstate) {
    d55c:	b510      	push	{r4, lr}
    d55e:	b086      	sub	sp, #24
    d560:	4614      	mov	r4, r2
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
    d562:	ab03      	add	r3, sp, #12
    d564:	9300      	str	r3, [sp, #0]
    d566:	4b10      	ldr	r3, [pc, #64]	; (d5a8 <lfs_dir_getgstate+0x4c>)
    d568:	4a10      	ldr	r2, [pc, #64]	; (d5ac <lfs_dir_getgstate+0x50>)
    d56a:	f007 faac 	bl	14ac6 <lfs_dir_get>
    if (res < 0 && res != LFS_ERR_NOENT) {
    d56e:	2800      	cmp	r0, #0
    d570:	db04      	blt.n	d57c <lfs_dir_getgstate+0x20>
    if (res != LFS_ERR_NOENT) {
    d572:	f110 0f02 	cmn.w	r0, #2
    d576:	d005      	beq.n	d584 <lfs_dir_getgstate+0x28>
    for (int i = 0; i < 3; i++) {
    d578:	2300      	movs	r3, #0
    d57a:	e010      	b.n	d59e <lfs_dir_getgstate+0x42>
    if (res < 0 && res != LFS_ERR_NOENT) {
    d57c:	f110 0f02 	cmn.w	r0, #2
    d580:	d110      	bne.n	d5a4 <lfs_dir_getgstate+0x48>
    d582:	e7f6      	b.n	d572 <lfs_dir_getgstate+0x16>
    return 0;
    d584:	2000      	movs	r0, #0
    d586:	e00d      	b.n	d5a4 <lfs_dir_getgstate+0x48>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
    d588:	aa06      	add	r2, sp, #24
    d58a:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    d58e:	f852 2c0c 	ldr.w	r2, [r2, #-12]
    d592:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    d596:	4051      	eors	r1, r2
    d598:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
    d59c:	3301      	adds	r3, #1
    d59e:	2b02      	cmp	r3, #2
    d5a0:	ddf2      	ble.n	d588 <lfs_dir_getgstate+0x2c>
    return 0;
    d5a2:	2000      	movs	r0, #0
}
    d5a4:	b006      	add	sp, #24
    d5a6:	bd10      	pop	{r4, pc}
    d5a8:	7ff0000c 	.word	0x7ff0000c
    d5ac:	7ff00000 	.word	0x7ff00000

0000d5b0 <lfs_dir_find>:
        const char **path, uint16_t *id) {
    d5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d5b4:	b08d      	sub	sp, #52	; 0x34
    d5b6:	4683      	mov	fp, r0
    d5b8:	4688      	mov	r8, r1
    d5ba:	9207      	str	r2, [sp, #28]
    const char *name = *path;
    d5bc:	6812      	ldr	r2, [r2, #0]
    d5be:	9206      	str	r2, [sp, #24]
    if (id) {
    d5c0:	9305      	str	r3, [sp, #20]
    d5c2:	b11b      	cbz	r3, d5cc <lfs_dir_find+0x1c>
    d5c4:	461a      	mov	r2, r3
        *id = 0x3ff;
    d5c6:	f240 33ff 	movw	r3, #1023	; 0x3ff
    d5ca:	8013      	strh	r3, [r2, #0]
    dir->tail[0] = lfs->root[0];
    d5cc:	f8db 3020 	ldr.w	r3, [fp, #32]
    d5d0:	f8c8 3018 	str.w	r3, [r8, #24]
    dir->tail[1] = lfs->root[1];
    d5d4:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    d5d8:	f8c8 301c 	str.w	r3, [r8, #28]
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
    d5dc:	4e50      	ldr	r6, [pc, #320]	; (d720 <lfs_dir_find+0x170>)
        name += strspn(name, "/");
    d5de:	4c51      	ldr	r4, [pc, #324]	; (d724 <lfs_dir_find+0x174>)
    d5e0:	4621      	mov	r1, r4
    d5e2:	9d06      	ldr	r5, [sp, #24]
    d5e4:	4628      	mov	r0, r5
    d5e6:	f005 fe44 	bl	13272 <strspn>
    d5ea:	462b      	mov	r3, r5
    d5ec:	4403      	add	r3, r0
    d5ee:	4699      	mov	r9, r3
        lfs_size_t namelen = strcspn(name, "/");
    d5f0:	4621      	mov	r1, r4
    d5f2:	4618      	mov	r0, r3
    d5f4:	f005 fe4b 	bl	1328e <strcspn>
    d5f8:	4682      	mov	sl, r0
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
    d5fa:	2801      	cmp	r0, #1
    d5fc:	d00b      	beq.n	d616 <lfs_dir_find+0x66>
    d5fe:	f1ba 0f02 	cmp.w	sl, #2
    d602:	d013      	beq.n	d62c <lfs_dir_find+0x7c>
        const char *suffix = name + namelen;
    d604:	eb09 030a 	add.w	r3, r9, sl
    d608:	9306      	str	r3, [sp, #24]
    d60a:	461c      	mov	r4, r3
        int depth = 1;
    d60c:	2701      	movs	r7, #1
    d60e:	e017      	b.n	d640 <lfs_dir_find+0x90>
    d610:	46b3      	mov	fp, r6
    d612:	4606      	mov	r6, r0
    d614:	e7e3      	b.n	d5de <lfs_dir_find+0x2e>
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
    d616:	2201      	movs	r2, #1
    d618:	4943      	ldr	r1, [pc, #268]	; (d728 <lfs_dir_find+0x178>)
    d61a:	4648      	mov	r0, r9
    d61c:	f005 fdd1 	bl	131c2 <memcmp>
    d620:	2800      	cmp	r0, #0
    d622:	d1ec      	bne.n	d5fe <lfs_dir_find+0x4e>
            name += namelen;
    d624:	eb09 030a 	add.w	r3, r9, sl
    d628:	9306      	str	r3, [sp, #24]
            goto nextname;
    d62a:	e7d8      	b.n	d5de <lfs_dir_find+0x2e>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
    d62c:	2202      	movs	r2, #2
    d62e:	493f      	ldr	r1, [pc, #252]	; (d72c <lfs_dir_find+0x17c>)
    d630:	4648      	mov	r0, r9
    d632:	f005 fdc6 	bl	131c2 <memcmp>
    d636:	2800      	cmp	r0, #0
    d638:	d1e4      	bne.n	d604 <lfs_dir_find+0x54>
    d63a:	e7f3      	b.n	d624 <lfs_dir_find+0x74>
                depth += 1;
    d63c:	3701      	adds	r7, #1
            suffix += sufflen;
    d63e:	442c      	add	r4, r5
            suffix += strspn(suffix, "/");
    d640:	4d38      	ldr	r5, [pc, #224]	; (d724 <lfs_dir_find+0x174>)
    d642:	4629      	mov	r1, r5
    d644:	4620      	mov	r0, r4
    d646:	f005 fe14 	bl	13272 <strspn>
    d64a:	4404      	add	r4, r0
            sufflen = strcspn(suffix, "/");
    d64c:	4629      	mov	r1, r5
    d64e:	4620      	mov	r0, r4
    d650:	f005 fe1d 	bl	1328e <strcspn>
            if (sufflen == 0) {
    d654:	4605      	mov	r5, r0
    d656:	b168      	cbz	r0, d674 <lfs_dir_find+0xc4>
            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
    d658:	2802      	cmp	r0, #2
    d65a:	d1ef      	bne.n	d63c <lfs_dir_find+0x8c>
    d65c:	2202      	movs	r2, #2
    d65e:	4933      	ldr	r1, [pc, #204]	; (d72c <lfs_dir_find+0x17c>)
    d660:	4620      	mov	r0, r4
    d662:	f005 fdae 	bl	131c2 <memcmp>
    d666:	2800      	cmp	r0, #0
    d668:	d1e8      	bne.n	d63c <lfs_dir_find+0x8c>
                if (depth == 0) {
    d66a:	3f01      	subs	r7, #1
    d66c:	d1e7      	bne.n	d63e <lfs_dir_find+0x8e>
                    name = suffix + sufflen;
    d66e:	1963      	adds	r3, r4, r5
    d670:	9306      	str	r3, [sp, #24]
                    goto nextname;
    d672:	e7b4      	b.n	d5de <lfs_dir_find+0x2e>
        if (name[0] == '\0') {
    d674:	f899 3000 	ldrb.w	r3, [r9]
    d678:	2b00      	cmp	r3, #0
    d67a:	d04c      	beq.n	d716 <lfs_dir_find+0x166>
        *path = name;
    d67c:	9b07      	ldr	r3, [sp, #28]
    d67e:	f8c3 9000 	str.w	r9, [r3]
    return (tag & 0x7ff00000) >> 20;
    d682:	f3c6 530a 	ubfx	r3, r6, #20, #11
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
    d686:	2b02      	cmp	r3, #2
    d688:	d141      	bne.n	d70e <lfs_dir_find+0x15e>
    return (tag & 0x000ffc00) >> 10;
    d68a:	f3c6 2689 	ubfx	r6, r6, #10, #10
        if (lfs_tag_id(tag) != 0x3ff) {
    d68e:	f240 33ff 	movw	r3, #1023	; 0x3ff
    d692:	429e      	cmp	r6, r3
    d694:	d103      	bne.n	d69e <lfs_dir_find+0xee>
    d696:	464c      	mov	r4, r9
    d698:	4655      	mov	r5, sl
    d69a:	465e      	mov	r6, fp
    d69c:	e02a      	b.n	d6f4 <lfs_dir_find+0x144>
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
    d69e:	02b6      	lsls	r6, r6, #10
    d6a0:	f108 0318 	add.w	r3, r8, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
    d6a4:	9300      	str	r3, [sp, #0]
    d6a6:	f046 5300 	orr.w	r3, r6, #536870912	; 0x20000000
    d6aa:	f043 0308 	orr.w	r3, r3, #8
    d6ae:	4a20      	ldr	r2, [pc, #128]	; (d730 <lfs_dir_find+0x180>)
    d6b0:	4641      	mov	r1, r8
    d6b2:	4658      	mov	r0, fp
    d6b4:	f007 fa07 	bl	14ac6 <lfs_dir_get>
            if (res < 0) {
    d6b8:	1e06      	subs	r6, r0, #0
    d6ba:	db2c      	blt.n	d716 <lfs_dir_find+0x166>
    d6bc:	464c      	mov	r4, r9
    d6be:	4655      	mov	r5, sl
    d6c0:	465e      	mov	r6, fp
    d6c2:	e017      	b.n	d6f4 <lfs_dir_find+0x144>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
    d6c4:	9b05      	ldr	r3, [sp, #20]
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
    d6c6:	9609      	str	r6, [sp, #36]	; 0x24
    d6c8:	940a      	str	r4, [sp, #40]	; 0x28
    d6ca:	950b      	str	r5, [sp, #44]	; 0x2c
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
    d6cc:	aa09      	add	r2, sp, #36	; 0x24
    d6ce:	9203      	str	r2, [sp, #12]
    d6d0:	4a18      	ldr	r2, [pc, #96]	; (d734 <lfs_dir_find+0x184>)
    d6d2:	9202      	str	r2, [sp, #8]
    d6d4:	9301      	str	r3, [sp, #4]
    d6d6:	9500      	str	r5, [sp, #0]
    d6d8:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
    d6dc:	463a      	mov	r2, r7
    d6de:	4641      	mov	r1, r8
    d6e0:	4630      	mov	r0, r6
    d6e2:	f7ff fa99 	bl	cc18 <lfs_dir_fetchmatch>
            if (tag < 0) {
    d6e6:	2800      	cmp	r0, #0
    d6e8:	db14      	blt.n	d714 <lfs_dir_find+0x164>
            if (tag) {
    d6ea:	2800      	cmp	r0, #0
    d6ec:	d190      	bne.n	d610 <lfs_dir_find+0x60>
            if (!dir->split) {
    d6ee:	f898 3017 	ldrb.w	r3, [r8, #23]
    d6f2:	b14b      	cbz	r3, d708 <lfs_dir_find+0x158>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
    d6f4:	f108 0718 	add.w	r7, r8, #24
                    (strchr(name, '/') == NULL) ? id : NULL,
    d6f8:	212f      	movs	r1, #47	; 0x2f
    d6fa:	4620      	mov	r0, r4
    d6fc:	f005 fd1e 	bl	1313c <strchr>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
    d700:	2800      	cmp	r0, #0
    d702:	d0df      	beq.n	d6c4 <lfs_dir_find+0x114>
    d704:	2300      	movs	r3, #0
    d706:	e7de      	b.n	d6c6 <lfs_dir_find+0x116>
                return LFS_ERR_NOENT;
    d708:	f06f 0601 	mvn.w	r6, #1
    d70c:	e003      	b.n	d716 <lfs_dir_find+0x166>
            return LFS_ERR_NOTDIR;
    d70e:	f06f 0613 	mvn.w	r6, #19
    d712:	e000      	b.n	d716 <lfs_dir_find+0x166>
    d714:	4606      	mov	r6, r0
}
    d716:	4630      	mov	r0, r6
    d718:	b00d      	add	sp, #52	; 0x34
    d71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d71e:	bf00      	nop
    d720:	002ffc00 	.word	0x002ffc00
    d724:	00017530 	.word	0x00017530
    d728:	00017cbc 	.word	0x00017cbc
    d72c:	00017cc0 	.word	0x00017cc0
    d730:	700ffc00 	.word	0x700ffc00
    d734:	000149ef 	.word	0x000149ef

0000d738 <lfs_dir_getinfo>:
        uint16_t id, struct lfs_info *info) {
    d738:	b5f0      	push	{r4, r5, r6, r7, lr}
    d73a:	b085      	sub	sp, #20
    d73c:	461d      	mov	r5, r3
    if (id == 0x3ff) {
    d73e:	f240 33ff 	movw	r3, #1023	; 0x3ff
    d742:	429a      	cmp	r2, r3
    d744:	d02c      	beq.n	d7a0 <lfs_dir_getinfo+0x68>
    d746:	4604      	mov	r4, r0
    d748:	460e      	mov	r6, r1
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
    d74a:	0297      	lsls	r7, r2, #10
    d74c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    d74e:	3301      	adds	r3, #1
    d750:	f105 0108 	add.w	r1, r5, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
    d754:	9100      	str	r1, [sp, #0]
    d756:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
    d75a:	4a1b      	ldr	r2, [pc, #108]	; (d7c8 <lfs_dir_getinfo+0x90>)
    d75c:	4631      	mov	r1, r6
    d75e:	f007 f9b2 	bl	14ac6 <lfs_dir_get>
    if (tag < 0) {
    d762:	2800      	cmp	r0, #0
    d764:	db24      	blt.n	d7b0 <lfs_dir_getinfo+0x78>
    return (tag & 0x7ff00000) >> 20;
    d766:	f3c0 520a 	ubfx	r2, r0, #20, #11
    info->type = lfs_tag_type3(tag);
    d76a:	702a      	strb	r2, [r5, #0]
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
    d76c:	ab02      	add	r3, sp, #8
    d76e:	9300      	str	r3, [sp, #0]
    d770:	f047 5300 	orr.w	r3, r7, #536870912	; 0x20000000
    d774:	f043 0308 	orr.w	r3, r3, #8
    d778:	4a14      	ldr	r2, [pc, #80]	; (d7cc <lfs_dir_getinfo+0x94>)
    d77a:	4631      	mov	r1, r6
    d77c:	4620      	mov	r0, r4
    d77e:	f007 f9a2 	bl	14ac6 <lfs_dir_get>
    if (tag < 0) {
    d782:	2800      	cmp	r0, #0
    d784:	db14      	blt.n	d7b0 <lfs_dir_getinfo+0x78>
    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
    d786:	4602      	mov	r2, r0
    return (tag & 0x7ff00000) >> 20;
    d788:	f3c0 500a 	ubfx	r0, r0, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
    d78c:	f240 2302 	movw	r3, #514	; 0x202
    d790:	4298      	cmp	r0, r3
    d792:	d00f      	beq.n	d7b4 <lfs_dir_getinfo+0x7c>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
    d794:	f240 2301 	movw	r3, #513	; 0x201
    d798:	4298      	cmp	r0, r3
    d79a:	d00f      	beq.n	d7bc <lfs_dir_getinfo+0x84>
    return 0;
    d79c:	2000      	movs	r0, #0
    d79e:	e007      	b.n	d7b0 <lfs_dir_getinfo+0x78>
        strcpy(info->name, "/");
    d7a0:	490b      	ldr	r1, [pc, #44]	; (d7d0 <lfs_dir_getinfo+0x98>)
    d7a2:	f105 0008 	add.w	r0, r5, #8
    d7a6:	f005 fca6 	bl	130f6 <strcpy>
        info->type = LFS_TYPE_DIR;
    d7aa:	2302      	movs	r3, #2
    d7ac:	702b      	strb	r3, [r5, #0]
        return 0;
    d7ae:	2000      	movs	r0, #0
}
    d7b0:	b005      	add	sp, #20
    d7b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        info->size = ctz.size;
    d7b4:	9b03      	ldr	r3, [sp, #12]
    d7b6:	606b      	str	r3, [r5, #4]
    return 0;
    d7b8:	2000      	movs	r0, #0
    d7ba:	e7f9      	b.n	d7b0 <lfs_dir_getinfo+0x78>
    return tag & 0x000003ff;
    d7bc:	f3c2 0209 	ubfx	r2, r2, #0, #10
        info->size = lfs_tag_size(tag);
    d7c0:	606a      	str	r2, [r5, #4]
    return 0;
    d7c2:	2000      	movs	r0, #0
    d7c4:	e7f4      	b.n	d7b0 <lfs_dir_getinfo+0x78>
    d7c6:	bf00      	nop
    d7c8:	780ffc00 	.word	0x780ffc00
    d7cc:	700ffc00 	.word	0x700ffc00
    d7d0:	00017530 	.word	0x00017530

0000d7d4 <lfs_dir_open>:
int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
    d7d4:	b570      	push	{r4, r5, r6, lr}
    d7d6:	b086      	sub	sp, #24
    d7d8:	4605      	mov	r5, r0
    d7da:	460c      	mov	r4, r1
    d7dc:	9203      	str	r2, [sp, #12]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
    d7de:	f101 0608 	add.w	r6, r1, #8
    d7e2:	2300      	movs	r3, #0
    d7e4:	aa03      	add	r2, sp, #12
    d7e6:	4631      	mov	r1, r6
    d7e8:	f7ff fee2 	bl	d5b0 <lfs_dir_find>
    if (tag < 0) {
    d7ec:	2800      	cmp	r0, #0
    d7ee:	db1f      	blt.n	d830 <lfs_dir_open+0x5c>
    return (tag & 0x7ff00000) >> 20;
    d7f0:	f3c0 530a 	ubfx	r3, r0, #20, #11
    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
    d7f4:	2b02      	cmp	r3, #2
    d7f6:	d12c      	bne.n	d852 <lfs_dir_open+0x7e>
    return (tag & 0x000ffc00) >> 10;
    d7f8:	f3c0 2089 	ubfx	r0, r0, #10, #10
    if (lfs_tag_id(tag) == 0x3ff) {
    d7fc:	f240 33ff 	movw	r3, #1023	; 0x3ff
    d800:	4298      	cmp	r0, r3
    d802:	d117      	bne.n	d834 <lfs_dir_open+0x60>
        pair[0] = lfs->root[0];
    d804:	6a2b      	ldr	r3, [r5, #32]
    d806:	9304      	str	r3, [sp, #16]
        pair[1] = lfs->root[1];
    d808:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    d80a:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
    d80c:	aa04      	add	r2, sp, #16
    d80e:	4631      	mov	r1, r6
    d810:	4628      	mov	r0, r5
    d812:	f007 f90c 	bl	14a2e <lfs_dir_fetch>
    if (err) {
    d816:	b958      	cbnz	r0, d830 <lfs_dir_open+0x5c>
    dir->head[0] = dir->m.pair[0];
    d818:	68a3      	ldr	r3, [r4, #8]
    d81a:	62e3      	str	r3, [r4, #44]	; 0x2c
    dir->head[1] = dir->m.pair[1];
    d81c:	68e3      	ldr	r3, [r4, #12]
    d81e:	6323      	str	r3, [r4, #48]	; 0x30
    dir->id = 0;
    d820:	2300      	movs	r3, #0
    d822:	80a3      	strh	r3, [r4, #4]
    dir->pos = 0;
    d824:	62a3      	str	r3, [r4, #40]	; 0x28
    dir->type = LFS_TYPE_DIR;
    d826:	2302      	movs	r3, #2
    d828:	71a3      	strb	r3, [r4, #6]
    dir->next = (lfs_dir_t*)lfs->mlist;
    d82a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    d82c:	6023      	str	r3, [r4, #0]
    lfs->mlist = (struct lfs_mlist*)dir;
    d82e:	62ac      	str	r4, [r5, #40]	; 0x28
}
    d830:	b006      	add	sp, #24
    d832:	bd70      	pop	{r4, r5, r6, pc}
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
    d834:	0283      	lsls	r3, r0, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
    d836:	aa04      	add	r2, sp, #16
    d838:	9200      	str	r2, [sp, #0]
    d83a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    d83e:	f043 0308 	orr.w	r3, r3, #8
    d842:	4a05      	ldr	r2, [pc, #20]	; (d858 <lfs_dir_open+0x84>)
    d844:	4631      	mov	r1, r6
    d846:	4628      	mov	r0, r5
    d848:	f007 f93d 	bl	14ac6 <lfs_dir_get>
        if (res < 0) {
    d84c:	2800      	cmp	r0, #0
    d84e:	dadd      	bge.n	d80c <lfs_dir_open+0x38>
    d850:	e7ee      	b.n	d830 <lfs_dir_open+0x5c>
        return LFS_ERR_NOTDIR;
    d852:	f06f 0013 	mvn.w	r0, #19
    d856:	e7eb      	b.n	d830 <lfs_dir_open+0x5c>
    d858:	700ffc00 	.word	0x700ffc00

0000d85c <lfs_dir_read>:
int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
    d85c:	b570      	push	{r4, r5, r6, lr}
    d85e:	4605      	mov	r5, r0
    d860:	460c      	mov	r4, r1
    d862:	4616      	mov	r6, r2
    memset(info, 0, sizeof(*info));
    d864:	f44f 7284 	mov.w	r2, #264	; 0x108
    d868:	2100      	movs	r1, #0
    d86a:	4630      	mov	r0, r6
    d86c:	f005 fce4 	bl	13238 <memset>
    if (dir->pos == 0) {
    d870:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d872:	b16b      	cbz	r3, d890 <lfs_dir_read+0x34>
    } else if (dir->pos == 1) {
    d874:	2b01      	cmp	r3, #1
    d876:	d11d      	bne.n	d8b4 <lfs_dir_read+0x58>
        info->type = LFS_TYPE_DIR;
    d878:	4630      	mov	r0, r6
    d87a:	2302      	movs	r3, #2
    d87c:	f800 3b08 	strb.w	r3, [r0], #8
        strcpy(info->name, "..");
    d880:	4920      	ldr	r1, [pc, #128]	; (d904 <lfs_dir_read+0xa8>)
    d882:	f005 fc38 	bl	130f6 <strcpy>
        dir->pos += 1;
    d886:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d888:	3301      	adds	r3, #1
    d88a:	62a3      	str	r3, [r4, #40]	; 0x28
        return true;
    d88c:	2101      	movs	r1, #1
    d88e:	e034      	b.n	d8fa <lfs_dir_read+0x9e>
        info->type = LFS_TYPE_DIR;
    d890:	4630      	mov	r0, r6
    d892:	2302      	movs	r3, #2
    d894:	f800 3b08 	strb.w	r3, [r0], #8
        strcpy(info->name, ".");
    d898:	491b      	ldr	r1, [pc, #108]	; (d908 <lfs_dir_read+0xac>)
    d89a:	f005 fc2c 	bl	130f6 <strcpy>
        dir->pos += 1;
    d89e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d8a0:	3301      	adds	r3, #1
    d8a2:	62a3      	str	r3, [r4, #40]	; 0x28
        return true;
    d8a4:	2101      	movs	r1, #1
    d8a6:	e028      	b.n	d8fa <lfs_dir_read+0x9e>
        dir->id += 1;
    d8a8:	88a3      	ldrh	r3, [r4, #4]
    d8aa:	3301      	adds	r3, #1
    d8ac:	80a3      	strh	r3, [r4, #4]
        if (err != LFS_ERR_NOENT) {
    d8ae:	f111 0f02 	cmn.w	r1, #2
    d8b2:	d11e      	bne.n	d8f2 <lfs_dir_read+0x96>
        if (dir->id == dir->m.count) {
    d8b4:	88a2      	ldrh	r2, [r4, #4]
    d8b6:	8ba3      	ldrh	r3, [r4, #28]
    d8b8:	429a      	cmp	r2, r3
    d8ba:	d10c      	bne.n	d8d6 <lfs_dir_read+0x7a>
            if (!dir->m.split) {
    d8bc:	7fe3      	ldrb	r3, [r4, #31]
    d8be:	b1f3      	cbz	r3, d8fe <lfs_dir_read+0xa2>
            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
    d8c0:	f104 0220 	add.w	r2, r4, #32
    d8c4:	f104 0108 	add.w	r1, r4, #8
    d8c8:	4628      	mov	r0, r5
    d8ca:	f007 f8b0 	bl	14a2e <lfs_dir_fetch>
            if (err) {
    d8ce:	4601      	mov	r1, r0
    d8d0:	b998      	cbnz	r0, d8fa <lfs_dir_read+0x9e>
            dir->id = 0;
    d8d2:	2300      	movs	r3, #0
    d8d4:	80a3      	strh	r3, [r4, #4]
        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
    d8d6:	4633      	mov	r3, r6
    d8d8:	88a2      	ldrh	r2, [r4, #4]
    d8da:	f104 0108 	add.w	r1, r4, #8
    d8de:	4628      	mov	r0, r5
    d8e0:	f7ff ff2a 	bl	d738 <lfs_dir_getinfo>
        if (err && err != LFS_ERR_NOENT) {
    d8e4:	4601      	mov	r1, r0
    d8e6:	2800      	cmp	r0, #0
    d8e8:	d0de      	beq.n	d8a8 <lfs_dir_read+0x4c>
    d8ea:	f110 0f02 	cmn.w	r0, #2
    d8ee:	d0db      	beq.n	d8a8 <lfs_dir_read+0x4c>
    d8f0:	e003      	b.n	d8fa <lfs_dir_read+0x9e>
    dir->pos += 1;
    d8f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d8f4:	3301      	adds	r3, #1
    d8f6:	62a3      	str	r3, [r4, #40]	; 0x28
    return true;
    d8f8:	2101      	movs	r1, #1
}
    d8fa:	4608      	mov	r0, r1
    d8fc:	bd70      	pop	{r4, r5, r6, pc}
                return false;
    d8fe:	2100      	movs	r1, #0
    d900:	e7fb      	b.n	d8fa <lfs_dir_read+0x9e>
    d902:	bf00      	nop
    d904:	00017cc0 	.word	0x00017cc0
    d908:	00017cbc 	.word	0x00017cbc

0000d90c <lfs_mount>:
int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
    d90c:	b570      	push	{r4, r5, r6, lr}
    d90e:	b09a      	sub	sp, #104	; 0x68
    d910:	4604      	mov	r4, r0
    int err = lfs_init(lfs, cfg);
    d912:	f007 fb8f 	bl	15034 <lfs_init>
    if (err) {
    d916:	4606      	mov	r6, r0
    d918:	2800      	cmp	r0, #0
    d91a:	f040 80e6 	bne.w	daea <lfs_mount+0x1de>
    lfs_mdir_t dir = {.tail = {0, 1}};
    d91e:	2500      	movs	r5, #0
    d920:	950f      	str	r5, [sp, #60]	; 0x3c
    d922:	9510      	str	r5, [sp, #64]	; 0x40
    d924:	9511      	str	r5, [sp, #68]	; 0x44
    d926:	9512      	str	r5, [sp, #72]	; 0x48
    d928:	9513      	str	r5, [sp, #76]	; 0x4c
    d92a:	9514      	str	r5, [sp, #80]	; 0x50
    d92c:	9515      	str	r5, [sp, #84]	; 0x54
    d92e:	2301      	movs	r3, #1
    d930:	9316      	str	r3, [sp, #88]	; 0x58
    while (!lfs_pair_isnull(dir.tail)) {
    d932:	e07a      	b.n	da2a <lfs_mount+0x11e>
    d934:	4988      	ldr	r1, [pc, #544]	; (db58 <lfs_mount+0x24c>)
    d936:	4b89      	ldr	r3, [pc, #548]	; (db5c <lfs_mount+0x250>)
    d938:	1ac9      	subs	r1, r1, r3
    d93a:	08c9      	lsrs	r1, r1, #3
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
    d93c:	f04f 0300 	mov.w	r3, #0
    d940:	2501      	movs	r5, #1
    d942:	f365 0302 	bfi	r3, r5, #0, #3
    d946:	f36f 03c5 	bfc	r3, #3, #3
    d94a:	f361 138f 	bfi	r3, r1, #6, #10
    d94e:	4984      	ldr	r1, [pc, #528]	; (db60 <lfs_mount+0x254>)
    d950:	9105      	str	r1, [sp, #20]
    d952:	f640 6198 	movw	r1, #3736	; 0xe98
    d956:	9106      	str	r1, [sp, #24]
    d958:	9007      	str	r0, [sp, #28]
    d95a:	b292      	uxth	r2, r2
    d95c:	9208      	str	r2, [sp, #32]
    d95e:	2204      	movs	r2, #4
    d960:	a905      	add	r1, sp, #20
    d962:	4880      	ldr	r0, [pc, #512]	; (db64 <lfs_mount+0x258>)
    d964:	f7f5 fd16 	bl	3394 <log_n>
                err = LFS_ERR_INVAL;
    d968:	f06f 0615 	mvn.w	r6, #21
                goto cleanup;
    d96c:	e0ba      	b.n	dae4 <lfs_mount+0x1d8>
    d96e:	487a      	ldr	r0, [pc, #488]	; (db58 <lfs_mount+0x24c>)
    d970:	4b7a      	ldr	r3, [pc, #488]	; (db5c <lfs_mount+0x250>)
    d972:	1ac0      	subs	r0, r0, r3
    d974:	08c0      	lsrs	r0, r0, #3
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
    d976:	f04f 0300 	mov.w	r3, #0
    d97a:	2501      	movs	r5, #1
    d97c:	f365 0302 	bfi	r3, r5, #0, #3
    d980:	f36f 03c5 	bfc	r3, #3, #3
    d984:	f360 138f 	bfi	r3, r0, #6, #10
    d988:	4875      	ldr	r0, [pc, #468]	; (db60 <lfs_mount+0x254>)
    d98a:	9005      	str	r0, [sp, #20]
    d98c:	f640 60a1 	movw	r0, #3745	; 0xea1
    d990:	9006      	str	r0, [sp, #24]
    d992:	9207      	str	r2, [sp, #28]
    d994:	9108      	str	r1, [sp, #32]
    d996:	2204      	movs	r2, #4
    d998:	a905      	add	r1, sp, #20
    d99a:	4873      	ldr	r0, [pc, #460]	; (db68 <lfs_mount+0x25c>)
    d99c:	f7f5 fcfa 	bl	3394 <log_n>
                    err = LFS_ERR_INVAL;
    d9a0:	f06f 0615 	mvn.w	r6, #21
                    goto cleanup;
    d9a4:	e09e      	b.n	dae4 <lfs_mount+0x1d8>
    d9a6:	486c      	ldr	r0, [pc, #432]	; (db58 <lfs_mount+0x24c>)
    d9a8:	4b6c      	ldr	r3, [pc, #432]	; (db5c <lfs_mount+0x250>)
    d9aa:	1ac0      	subs	r0, r0, r3
    d9ac:	08c0      	lsrs	r0, r0, #3
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
    d9ae:	f04f 0300 	mov.w	r3, #0
    d9b2:	2501      	movs	r5, #1
    d9b4:	f365 0302 	bfi	r3, r5, #0, #3
    d9b8:	f36f 03c5 	bfc	r3, #3, #3
    d9bc:	f360 138f 	bfi	r3, r0, #6, #10
    d9c0:	4867      	ldr	r0, [pc, #412]	; (db60 <lfs_mount+0x254>)
    d9c2:	9005      	str	r0, [sp, #20]
    d9c4:	f640 60ac 	movw	r0, #3756	; 0xeac
    d9c8:	9006      	str	r0, [sp, #24]
    d9ca:	9207      	str	r2, [sp, #28]
    d9cc:	9108      	str	r1, [sp, #32]
    d9ce:	2204      	movs	r2, #4
    d9d0:	a905      	add	r1, sp, #20
    d9d2:	4866      	ldr	r0, [pc, #408]	; (db6c <lfs_mount+0x260>)
    d9d4:	f7f5 fcde 	bl	3394 <log_n>
                    err = LFS_ERR_INVAL;
    d9d8:	f06f 0615 	mvn.w	r6, #21
                    goto cleanup;
    d9dc:	e082      	b.n	dae4 <lfs_mount+0x1d8>
    d9de:	485e      	ldr	r0, [pc, #376]	; (db58 <lfs_mount+0x24c>)
    d9e0:	4b5e      	ldr	r3, [pc, #376]	; (db5c <lfs_mount+0x250>)
    d9e2:	1ac0      	subs	r0, r0, r3
    d9e4:	08c0      	lsrs	r0, r0, #3
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
    d9e6:	f04f 0300 	mov.w	r3, #0
    d9ea:	2501      	movs	r5, #1
    d9ec:	f365 0302 	bfi	r3, r5, #0, #3
    d9f0:	f36f 03c5 	bfc	r3, #3, #3
    d9f4:	f360 138f 	bfi	r3, r0, #6, #10
    d9f8:	4859      	ldr	r0, [pc, #356]	; (db60 <lfs_mount+0x254>)
    d9fa:	9005      	str	r0, [sp, #20]
    d9fc:	f640 60b7 	movw	r0, #3767	; 0xeb7
    da00:	9006      	str	r0, [sp, #24]
    da02:	9207      	str	r2, [sp, #28]
    da04:	9108      	str	r1, [sp, #32]
    da06:	2204      	movs	r2, #4
    da08:	a905      	add	r1, sp, #20
    da0a:	4859      	ldr	r0, [pc, #356]	; (db70 <lfs_mount+0x264>)
    da0c:	f7f5 fcc2 	bl	3394 <log_n>
                    err = LFS_ERR_INVAL;
    da10:	f06f 0615 	mvn.w	r6, #21
                    goto cleanup;
    da14:	e066      	b.n	dae4 <lfs_mount+0x1d8>
                err = tag;
    da16:	4606      	mov	r6, r0
    da18:	e064      	b.n	dae4 <lfs_mount+0x1d8>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
    da1a:	f104 0230 	add.w	r2, r4, #48	; 0x30
    da1e:	a90f      	add	r1, sp, #60	; 0x3c
    da20:	4620      	mov	r0, r4
    da22:	f7ff fd9b 	bl	d55c <lfs_dir_getgstate>
        if (err) {
    da26:	2800      	cmp	r0, #0
    da28:	d164      	bne.n	daf4 <lfs_mount+0x1e8>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    da2a:	9b15      	ldr	r3, [sp, #84]	; 0x54
    da2c:	f1b3 3fff 	cmp.w	r3, #4294967295
    da30:	d064      	beq.n	dafc <lfs_mount+0x1f0>
    da32:	9b16      	ldr	r3, [sp, #88]	; 0x58
    da34:	f1b3 3fff 	cmp.w	r3, #4294967295
    da38:	d05e      	beq.n	daf8 <lfs_mount+0x1ec>
    da3a:	4633      	mov	r3, r6
    while (!lfs_pair_isnull(dir.tail)) {
    da3c:	f013 0f01 	tst.w	r3, #1
    da40:	d15e      	bne.n	db00 <lfs_mount+0x1f4>
        if (cycle >= lfs->cfg->block_count/2) {
    da42:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    da44:	6a1b      	ldr	r3, [r3, #32]
    da46:	ebb5 0f53 	cmp.w	r5, r3, lsr #1
    da4a:	d249      	bcs.n	dae0 <lfs_mount+0x1d4>
        cycle += 1;
    da4c:	3501      	adds	r5, #1
                lfs_dir_find_match, &(struct lfs_dir_find_match){
    da4e:	9417      	str	r4, [sp, #92]	; 0x5c
    da50:	4b48      	ldr	r3, [pc, #288]	; (db74 <lfs_mount+0x268>)
    da52:	9318      	str	r3, [sp, #96]	; 0x60
    da54:	2308      	movs	r3, #8
    da56:	9319      	str	r3, [sp, #100]	; 0x64
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
    da58:	ab17      	add	r3, sp, #92	; 0x5c
    da5a:	9303      	str	r3, [sp, #12]
    da5c:	4b46      	ldr	r3, [pc, #280]	; (db78 <lfs_mount+0x26c>)
    da5e:	9302      	str	r3, [sp, #8]
    da60:	2300      	movs	r3, #0
    da62:	9301      	str	r3, [sp, #4]
    da64:	4b45      	ldr	r3, [pc, #276]	; (db7c <lfs_mount+0x270>)
    da66:	9300      	str	r3, [sp, #0]
    da68:	4b45      	ldr	r3, [pc, #276]	; (db80 <lfs_mount+0x274>)
    da6a:	aa15      	add	r2, sp, #84	; 0x54
    da6c:	a90f      	add	r1, sp, #60	; 0x3c
    da6e:	4620      	mov	r0, r4
    da70:	f7ff f8d2 	bl	cc18 <lfs_dir_fetchmatch>
        if (tag < 0) {
    da74:	2800      	cmp	r0, #0
    da76:	db3b      	blt.n	daf0 <lfs_mount+0x1e4>
        if (tag && !lfs_tag_isdelete(tag)) {
    da78:	2800      	cmp	r0, #0
    da7a:	d0ce      	beq.n	da1a <lfs_mount+0x10e>
    return ((int32_t)(tag << 22) >> 22) == -1;
    da7c:	f340 0009 	sbfx	r0, r0, #0, #10
        if (tag && !lfs_tag_isdelete(tag)) {
    da80:	f1b0 3fff 	cmp.w	r0, #4294967295
    da84:	d0c9      	beq.n	da1a <lfs_mount+0x10e>
            lfs->root[0] = dir.pair[0];
    da86:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    da88:	6223      	str	r3, [r4, #32]
            lfs->root[1] = dir.pair[1];
    da8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    da8c:	6263      	str	r3, [r4, #36]	; 0x24
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
    da8e:	ab09      	add	r3, sp, #36	; 0x24
    da90:	9300      	str	r3, [sp, #0]
    da92:	4b3c      	ldr	r3, [pc, #240]	; (db84 <lfs_mount+0x278>)
    da94:	4a3a      	ldr	r2, [pc, #232]	; (db80 <lfs_mount+0x274>)
    da96:	a90f      	add	r1, sp, #60	; 0x3c
    da98:	4620      	mov	r0, r4
    da9a:	f007 f814 	bl	14ac6 <lfs_dir_get>
            if (tag < 0) {
    da9e:	2800      	cmp	r0, #0
    daa0:	dbb9      	blt.n	da16 <lfs_mount+0x10a>
            uint16_t major_version = (0xffff & (superblock.version >> 16));
    daa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    daa4:	0c10      	lsrs	r0, r2, #16
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
    daa6:	b291      	uxth	r1, r2
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
    daa8:	2802      	cmp	r0, #2
    daaa:	f47f af43 	bne.w	d934 <lfs_mount+0x28>
    daae:	2900      	cmp	r1, #0
    dab0:	f47f af40 	bne.w	d934 <lfs_mount+0x28>
            if (superblock.name_max) {
    dab4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    dab6:	b122      	cbz	r2, dac2 <lfs_mount+0x1b6>
                if (superblock.name_max > lfs->name_max) {
    dab8:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    daba:	428a      	cmp	r2, r1
    dabc:	f63f af57 	bhi.w	d96e <lfs_mount+0x62>
                lfs->name_max = superblock.name_max;
    dac0:	66e2      	str	r2, [r4, #108]	; 0x6c
            if (superblock.file_max) {
    dac2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    dac4:	b122      	cbz	r2, dad0 <lfs_mount+0x1c4>
                if (superblock.file_max > lfs->file_max) {
    dac6:	6f21      	ldr	r1, [r4, #112]	; 0x70
    dac8:	428a      	cmp	r2, r1
    daca:	f63f af6c 	bhi.w	d9a6 <lfs_mount+0x9a>
                lfs->file_max = superblock.file_max;
    dace:	6722      	str	r2, [r4, #112]	; 0x70
            if (superblock.attr_max) {
    dad0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    dad2:	2a00      	cmp	r2, #0
    dad4:	d0a1      	beq.n	da1a <lfs_mount+0x10e>
                if (superblock.attr_max > lfs->attr_max) {
    dad6:	6f61      	ldr	r1, [r4, #116]	; 0x74
    dad8:	428a      	cmp	r2, r1
    dada:	d880      	bhi.n	d9de <lfs_mount+0xd2>
                lfs->attr_max = superblock.attr_max;
    dadc:	6762      	str	r2, [r4, #116]	; 0x74
    dade:	e79c      	b.n	da1a <lfs_mount+0x10e>
            err = LFS_ERR_CORRUPT;
    dae0:	f06f 0653 	mvn.w	r6, #83	; 0x53
    lfs_unmount(lfs);
    dae4:	4620      	mov	r0, r4
    dae6:	f007 fbe5 	bl	152b4 <lfs_unmount>
}
    daea:	4630      	mov	r0, r6
    daec:	b01a      	add	sp, #104	; 0x68
    daee:	bd70      	pop	{r4, r5, r6, pc}
            err = tag;
    daf0:	4606      	mov	r6, r0
    daf2:	e7f7      	b.n	dae4 <lfs_mount+0x1d8>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
    daf4:	4606      	mov	r6, r0
    daf6:	e7f5      	b.n	dae4 <lfs_mount+0x1d8>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    daf8:	2301      	movs	r3, #1
    dafa:	e79f      	b.n	da3c <lfs_mount+0x130>
    dafc:	2301      	movs	r3, #1
    dafe:	e79d      	b.n	da3c <lfs_mount+0x130>
    db00:	6a23      	ldr	r3, [r4, #32]
    db02:	f1b3 3fff 	cmp.w	r3, #4294967295
    db06:	d013      	beq.n	db30 <lfs_mount+0x224>
    db08:	6a63      	ldr	r3, [r4, #36]	; 0x24
    db0a:	f1b3 3fff 	cmp.w	r3, #4294967295
    db0e:	d00d      	beq.n	db2c <lfs_mount+0x220>
    db10:	4633      	mov	r3, r6
    if (lfs_pair_isnull(lfs->root)) {
    db12:	f013 0f01 	tst.w	r3, #1
    db16:	d11c      	bne.n	db52 <lfs_mount+0x246>
    if (!lfs_gstate_iszero(&lfs->gstate)) {
    db18:	f104 0130 	add.w	r1, r4, #48	; 0x30
    for (int i = 0; i < 3; i++) {
    db1c:	4633      	mov	r3, r6
    db1e:	2b02      	cmp	r3, #2
    db20:	dc08      	bgt.n	db34 <lfs_mount+0x228>
        if (((uint32_t*)a)[i] != 0) {
    db22:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    db26:	b92a      	cbnz	r2, db34 <lfs_mount+0x228>
    for (int i = 0; i < 3; i++) {
    db28:	3301      	adds	r3, #1
    db2a:	e7f8      	b.n	db1e <lfs_mount+0x212>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    db2c:	2301      	movs	r3, #1
    db2e:	e7f0      	b.n	db12 <lfs_mount+0x206>
    db30:	2301      	movs	r3, #1
    db32:	e7ee      	b.n	db12 <lfs_mount+0x206>
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
    db34:	6b23      	ldr	r3, [r4, #48]	; 0x30
    db36:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    db3a:	6323      	str	r3, [r4, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
    db3c:	f104 033c 	add.w	r3, r4, #60	; 0x3c
    db40:	f104 0230 	add.w	r2, r4, #48	; 0x30
    db44:	ca07      	ldmia	r2, {r0, r1, r2}
    db46:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    lfs_alloc_reset(lfs);
    db4a:	4620      	mov	r0, r4
    db4c:	f006 fdf8 	bl	14740 <lfs_alloc_reset>
    return 0;
    db50:	e7cb      	b.n	daea <lfs_mount+0x1de>
        err = LFS_ERR_INVAL;
    db52:	f06f 0615 	mvn.w	r6, #21
    db56:	e7c5      	b.n	dae4 <lfs_mount+0x1d8>
    db58:	00016600 	.word	0x00016600
    db5c:	000165d8 	.word	0x000165d8
    db60:	00017c68 	.word	0x00017c68
    db64:	00017cc4 	.word	0x00017cc4
    db68:	00017ce4 	.word	0x00017ce4
    db6c:	00017d0c 	.word	0x00017d0c
    db70:	00017d34 	.word	0x00017d34
    db74:	00017694 	.word	0x00017694
    db78:	000149ef 	.word	0x000149ef
    db7c:	0ff00008 	.word	0x0ff00008
    db80:	7ffffc00 	.word	0x7ffffc00
    db84:	20100018 	.word	0x20100018

0000db88 <lfs_fs_traverseraw>:
        bool includeorphans) {
    db88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    db8c:	b08f      	sub	sp, #60	; 0x3c
    db8e:	4606      	mov	r6, r0
    db90:	460f      	mov	r7, r1
    db92:	4690      	mov	r8, r2
    db94:	4699      	mov	r9, r3
    lfs_mdir_t dir = {.tail = {0, 1}};
    db96:	2500      	movs	r5, #0
    db98:	9506      	str	r5, [sp, #24]
    db9a:	9507      	str	r5, [sp, #28]
    db9c:	9508      	str	r5, [sp, #32]
    db9e:	9509      	str	r5, [sp, #36]	; 0x24
    dba0:	950a      	str	r5, [sp, #40]	; 0x28
    dba2:	950b      	str	r5, [sp, #44]	; 0x2c
    dba4:	950c      	str	r5, [sp, #48]	; 0x30
    dba6:	2301      	movs	r3, #1
    dba8:	930d      	str	r3, [sp, #52]	; 0x34
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    dbaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    dbac:	f1b3 3fff 	cmp.w	r3, #4294967295
    dbb0:	d06d      	beq.n	dc8e <lfs_fs_traverseraw+0x106>
    dbb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    dbb4:	f1b3 3fff 	cmp.w	r3, #4294967295
    dbb8:	d067      	beq.n	dc8a <lfs_fs_traverseraw+0x102>
    dbba:	2300      	movs	r3, #0
    while (!lfs_pair_isnull(dir.tail)) {
    dbbc:	2b00      	cmp	r3, #0
    dbbe:	d168      	bne.n	dc92 <lfs_fs_traverseraw+0x10a>
        if (cycle >= lfs->cfg->block_count/2) {
    dbc0:	6eb3      	ldr	r3, [r6, #104]	; 0x68
    dbc2:	6a1b      	ldr	r3, [r3, #32]
    dbc4:	ebb5 0f53 	cmp.w	r5, r3, lsr #1
    dbc8:	f080 8097 	bcs.w	dcfa <lfs_fs_traverseraw+0x172>
        cycle += 1;
    dbcc:	3501      	adds	r5, #1
        for (int i = 0; i < 2; i++) {
    dbce:	2400      	movs	r4, #0
    dbd0:	2c01      	cmp	r4, #1
    dbd2:	dc0b      	bgt.n	dbec <lfs_fs_traverseraw+0x64>
            int err = cb(data, dir.tail[i]);
    dbd4:	1da3      	adds	r3, r4, #6
    dbd6:	aa0e      	add	r2, sp, #56	; 0x38
    dbd8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    dbdc:	f853 1c20 	ldr.w	r1, [r3, #-32]
    dbe0:	4640      	mov	r0, r8
    dbe2:	47b8      	blx	r7
            if (err) {
    dbe4:	4603      	mov	r3, r0
    dbe6:	b978      	cbnz	r0, dc08 <lfs_fs_traverseraw+0x80>
        for (int i = 0; i < 2; i++) {
    dbe8:	3401      	adds	r4, #1
    dbea:	e7f1      	b.n	dbd0 <lfs_fs_traverseraw+0x48>
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
    dbec:	aa0c      	add	r2, sp, #48	; 0x30
    dbee:	a906      	add	r1, sp, #24
    dbf0:	4630      	mov	r0, r6
    dbf2:	f006 ff1c 	bl	14a2e <lfs_dir_fetch>
        if (err) {
    dbf6:	4682      	mov	sl, r0
    dbf8:	2800      	cmp	r0, #0
    dbfa:	f040 8081 	bne.w	dd00 <lfs_fs_traverseraw+0x178>
        for (uint16_t id = 0; id < dir.count; id++) {
    dbfe:	2400      	movs	r4, #0
    dc00:	e016      	b.n	dc30 <lfs_fs_traverseraw+0xa8>
                if (tag == LFS_ERR_NOENT) {
    dc02:	f113 0f02 	cmn.w	r3, #2
    dc06:	d011      	beq.n	dc2c <lfs_fs_traverseraw+0xa4>
}
    dc08:	4618      	mov	r0, r3
    dc0a:	b00f      	add	sp, #60	; 0x3c
    dc0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
    dc10:	f8cd 8008 	str.w	r8, [sp, #8]
    dc14:	9701      	str	r7, [sp, #4]
    dc16:	9b05      	ldr	r3, [sp, #20]
    dc18:	9300      	str	r3, [sp, #0]
    dc1a:	9b04      	ldr	r3, [sp, #16]
    dc1c:	4632      	mov	r2, r6
    dc1e:	2100      	movs	r1, #0
    dc20:	4630      	mov	r0, r6
    dc22:	f007 fa83 	bl	1512c <lfs_ctz_traverse>
                if (err) {
    dc26:	4603      	mov	r3, r0
    dc28:	2800      	cmp	r0, #0
    dc2a:	d1ed      	bne.n	dc08 <lfs_fs_traverseraw+0x80>
        for (uint16_t id = 0; id < dir.count; id++) {
    dc2c:	3401      	adds	r4, #1
    dc2e:	b2a4      	uxth	r4, r4
    dc30:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    dc34:	42a3      	cmp	r3, r4
    dc36:	d9b8      	bls.n	dbaa <lfs_fs_traverseraw+0x22>
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
    dc38:	02a3      	lsls	r3, r4, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
    dc3a:	aa04      	add	r2, sp, #16
    dc3c:	9200      	str	r2, [sp, #0]
    dc3e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    dc42:	f043 0308 	orr.w	r3, r3, #8
    dc46:	4a2f      	ldr	r2, [pc, #188]	; (dd04 <lfs_fs_traverseraw+0x17c>)
    dc48:	a906      	add	r1, sp, #24
    dc4a:	4630      	mov	r0, r6
    dc4c:	f006 ff3b 	bl	14ac6 <lfs_dir_get>
            if (tag < 0) {
    dc50:	1e03      	subs	r3, r0, #0
    dc52:	dbd6      	blt.n	dc02 <lfs_fs_traverseraw+0x7a>
    return (tag & 0x7ff00000) >> 20;
    dc54:	f3c3 530a 	ubfx	r3, r3, #20, #11
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
    dc58:	f240 2202 	movw	r2, #514	; 0x202
    dc5c:	4293      	cmp	r3, r2
    dc5e:	d0d7      	beq.n	dc10 <lfs_fs_traverseraw+0x88>
            } else if (includeorphans && 
    dc60:	f1b9 0f00 	cmp.w	r9, #0
    dc64:	d0e2      	beq.n	dc2c <lfs_fs_traverseraw+0xa4>
    dc66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    dc6a:	d1df      	bne.n	dc2c <lfs_fs_traverseraw+0xa4>
                for (int i = 0; i < 2; i++) {
    dc6c:	46d3      	mov	fp, sl
    dc6e:	f1bb 0f01 	cmp.w	fp, #1
    dc72:	dcdb      	bgt.n	dc2c <lfs_fs_traverseraw+0xa4>
                    err = cb(data, (&ctz.head)[i]);
    dc74:	ab04      	add	r3, sp, #16
    dc76:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
    dc7a:	4640      	mov	r0, r8
    dc7c:	47b8      	blx	r7
                    if (err) {
    dc7e:	4603      	mov	r3, r0
    dc80:	2800      	cmp	r0, #0
    dc82:	d1c1      	bne.n	dc08 <lfs_fs_traverseraw+0x80>
                for (int i = 0; i < 2; i++) {
    dc84:	f10b 0b01 	add.w	fp, fp, #1
    dc88:	e7f1      	b.n	dc6e <lfs_fs_traverseraw+0xe6>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    dc8a:	2301      	movs	r3, #1
    dc8c:	e796      	b.n	dbbc <lfs_fs_traverseraw+0x34>
    dc8e:	2301      	movs	r3, #1
    dc90:	e794      	b.n	dbbc <lfs_fs_traverseraw+0x34>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
    dc92:	6ab4      	ldr	r4, [r6, #40]	; 0x28
    dc94:	e00f      	b.n	dcb6 <lfs_fs_traverseraw+0x12e>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
    dc96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    dc98:	f8cd 8008 	str.w	r8, [sp, #8]
    dc9c:	9701      	str	r7, [sp, #4]
    dc9e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    dca0:	9200      	str	r2, [sp, #0]
    dca2:	4632      	mov	r2, r6
    dca4:	f104 0140 	add.w	r1, r4, #64	; 0x40
    dca8:	4630      	mov	r0, r6
    dcaa:	f007 fa3f 	bl	1512c <lfs_ctz_traverse>
            if (err) {
    dcae:	4603      	mov	r3, r0
    dcb0:	b158      	cbz	r0, dcca <lfs_fs_traverseraw+0x142>
    dcb2:	e7a9      	b.n	dc08 <lfs_fs_traverseraw+0x80>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
    dcb4:	6824      	ldr	r4, [r4, #0]
    dcb6:	b1f4      	cbz	r4, dcf6 <lfs_fs_traverseraw+0x16e>
        if (f->type != LFS_TYPE_REG) {
    dcb8:	79a3      	ldrb	r3, [r4, #6]
    dcba:	2b01      	cmp	r3, #1
    dcbc:	d1fa      	bne.n	dcb4 <lfs_fs_traverseraw+0x12c>
        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
    dcbe:	6b23      	ldr	r3, [r4, #48]	; 0x30
    dcc0:	f403 1388 	and.w	r3, r3, #1114112	; 0x110000
    dcc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    dcc8:	d0e5      	beq.n	dc96 <lfs_fs_traverseraw+0x10e>
        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
    dcca:	6b23      	ldr	r3, [r4, #48]	; 0x30
    dccc:	f403 1390 	and.w	r3, r3, #1179648	; 0x120000
    dcd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    dcd4:	d1ee      	bne.n	dcb4 <lfs_fs_traverseraw+0x12c>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
    dcd6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    dcd8:	f8cd 8008 	str.w	r8, [sp, #8]
    dcdc:	9701      	str	r7, [sp, #4]
    dcde:	6b62      	ldr	r2, [r4, #52]	; 0x34
    dce0:	9200      	str	r2, [sp, #0]
    dce2:	4632      	mov	r2, r6
    dce4:	f104 0140 	add.w	r1, r4, #64	; 0x40
    dce8:	4630      	mov	r0, r6
    dcea:	f007 fa1f 	bl	1512c <lfs_ctz_traverse>
            if (err) {
    dcee:	4603      	mov	r3, r0
    dcf0:	2800      	cmp	r0, #0
    dcf2:	d0df      	beq.n	dcb4 <lfs_fs_traverseraw+0x12c>
    dcf4:	e788      	b.n	dc08 <lfs_fs_traverseraw+0x80>
    return 0;
    dcf6:	2300      	movs	r3, #0
    dcf8:	e786      	b.n	dc08 <lfs_fs_traverseraw+0x80>
            return LFS_ERR_CORRUPT;
    dcfa:	f06f 0353 	mvn.w	r3, #83	; 0x53
    dcfe:	e783      	b.n	dc08 <lfs_fs_traverseraw+0x80>
            return err;
    dd00:	4603      	mov	r3, r0
    dd02:	e781      	b.n	dc08 <lfs_fs_traverseraw+0x80>
    dd04:	700ffc00 	.word	0x700ffc00

0000dd08 <lfs_alloc>:
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
    dd08:	b570      	push	{r4, r5, r6, lr}
    dd0a:	b082      	sub	sp, #8
    dd0c:	4604      	mov	r4, r0
    dd0e:	460d      	mov	r5, r1
        while (lfs->free.i != lfs->free.size) {
    dd10:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    dd12:	6da2      	ldr	r2, [r4, #88]	; 0x58
    dd14:	4293      	cmp	r3, r2
    dd16:	d02d      	beq.n	dd74 <lfs_alloc+0x6c>
            lfs->free.i += 1;
    dd18:	1c5a      	adds	r2, r3, #1
    dd1a:	65e2      	str	r2, [r4, #92]	; 0x5c
            lfs->free.ack -= 1;
    dd1c:	6e22      	ldr	r2, [r4, #96]	; 0x60
    dd1e:	3a01      	subs	r2, #1
    dd20:	6622      	str	r2, [r4, #96]	; 0x60
            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
    dd22:	6e62      	ldr	r2, [r4, #100]	; 0x64
    dd24:	0959      	lsrs	r1, r3, #5
    dd26:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    dd2a:	f003 001f 	and.w	r0, r3, #31
    dd2e:	2201      	movs	r2, #1
    dd30:	4082      	lsls	r2, r0
    dd32:	4211      	tst	r1, r2
    dd34:	d1ec      	bne.n	dd10 <lfs_alloc+0x8>
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
    dd36:	6d62      	ldr	r2, [r4, #84]	; 0x54
    dd38:	4413      	add	r3, r2
    dd3a:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    dd3c:	6a11      	ldr	r1, [r2, #32]
    dd3e:	fbb3 f2f1 	udiv	r2, r3, r1
    dd42:	fb01 3312 	mls	r3, r1, r2, r3
    dd46:	602b      	str	r3, [r5, #0]
                while (lfs->free.i != lfs->free.size &&
    dd48:	e004      	b.n	dd54 <lfs_alloc+0x4c>
                    lfs->free.i += 1;
    dd4a:	3301      	adds	r3, #1
    dd4c:	65e3      	str	r3, [r4, #92]	; 0x5c
                    lfs->free.ack -= 1;
    dd4e:	6e23      	ldr	r3, [r4, #96]	; 0x60
    dd50:	3b01      	subs	r3, #1
    dd52:	6623      	str	r3, [r4, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
    dd54:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    dd56:	6da2      	ldr	r2, [r4, #88]	; 0x58
    dd58:	4293      	cmp	r3, r2
    dd5a:	d049      	beq.n	ddf0 <lfs_alloc+0xe8>
                        (lfs->free.buffer[lfs->free.i / 32]
    dd5c:	6e62      	ldr	r2, [r4, #100]	; 0x64
    dd5e:	0959      	lsrs	r1, r3, #5
    dd60:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
                            & (1U << (lfs->free.i % 32)))) {
    dd64:	f003 001f 	and.w	r0, r3, #31
    dd68:	2201      	movs	r2, #1
    dd6a:	4082      	lsls	r2, r0
                while (lfs->free.i != lfs->free.size &&
    dd6c:	4211      	tst	r1, r2
    dd6e:	d1ec      	bne.n	dd4a <lfs_alloc+0x42>
                return 0;
    dd70:	2600      	movs	r6, #0
    dd72:	e03e      	b.n	ddf2 <lfs_alloc+0xea>
        if (lfs->free.ack == 0) {
    dd74:	6e21      	ldr	r1, [r4, #96]	; 0x60
    dd76:	b309      	cbz	r1, ddbc <lfs_alloc+0xb4>
        lfs->free.off = (lfs->free.off + lfs->free.size)
    dd78:	6d63      	ldr	r3, [r4, #84]	; 0x54
    dd7a:	441a      	add	r2, r3
                % lfs->cfg->block_count;
    dd7c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    dd7e:	6a1e      	ldr	r6, [r3, #32]
    dd80:	fbb2 f0f6 	udiv	r0, r2, r6
    dd84:	fb06 2210 	mls	r2, r6, r0, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
    dd88:	6562      	str	r2, [r4, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
    dd8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    dd8c:	00d2      	lsls	r2, r2, #3
    dd8e:	4291      	cmp	r1, r2
    dd90:	bf28      	it	cs
    dd92:	4611      	movcs	r1, r2
    dd94:	65a1      	str	r1, [r4, #88]	; 0x58
        lfs->free.i = 0;
    dd96:	2100      	movs	r1, #0
    dd98:	65e1      	str	r1, [r4, #92]	; 0x5c
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
    dd9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    dd9c:	6e60      	ldr	r0, [r4, #100]	; 0x64
    dd9e:	f005 fa4b 	bl	13238 <memset>
        int err = lfs_fs_traverseraw(lfs, lfs_alloc_lookahead, lfs, true);
    dda2:	2301      	movs	r3, #1
    dda4:	4622      	mov	r2, r4
    dda6:	4914      	ldr	r1, [pc, #80]	; (ddf8 <lfs_alloc+0xf0>)
    dda8:	4620      	mov	r0, r4
    ddaa:	f7ff feed 	bl	db88 <lfs_fs_traverseraw>
        if (err) {
    ddae:	4606      	mov	r6, r0
    ddb0:	2800      	cmp	r0, #0
    ddb2:	d0ad      	beq.n	dd10 <lfs_alloc+0x8>
            lfs_alloc_reset(lfs);
    ddb4:	4620      	mov	r0, r4
    ddb6:	f006 fcc3 	bl	14740 <lfs_alloc_reset>
            return err;
    ddba:	e01a      	b.n	ddf2 <lfs_alloc+0xea>
    ddbc:	4a0f      	ldr	r2, [pc, #60]	; (ddfc <lfs_alloc+0xf4>)
    ddbe:	4910      	ldr	r1, [pc, #64]	; (de00 <lfs_alloc+0xf8>)
    ddc0:	1a52      	subs	r2, r2, r1
    ddc2:	08d2      	lsrs	r2, r2, #3
            LFS_ERROR("No more free space %"PRIu32,
    ddc4:	f04f 0100 	mov.w	r1, #0
    ddc8:	2001      	movs	r0, #1
    ddca:	f360 0102 	bfi	r1, r0, #0, #3
    ddce:	f36f 01c5 	bfc	r1, #3, #3
    ddd2:	f362 118f 	bfi	r1, r2, #6, #10
    ddd6:	6d62      	ldr	r2, [r4, #84]	; 0x54
    ddd8:	f8ad 1000 	strh.w	r1, [sp]
    dddc:	4413      	add	r3, r2
    ddde:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
    dde2:	4908      	ldr	r1, [pc, #32]	; (de04 <lfs_alloc+0xfc>)
    dde4:	4808      	ldr	r0, [pc, #32]	; (de08 <lfs_alloc+0x100>)
    dde6:	f7f5 fa25 	bl	3234 <log_3>
            return LFS_ERR_NOSPC;
    ddea:	f06f 061b 	mvn.w	r6, #27
    ddee:	e000      	b.n	ddf2 <lfs_alloc+0xea>
                return 0;
    ddf0:	2600      	movs	r6, #0
}
    ddf2:	4630      	mov	r0, r6
    ddf4:	b002      	add	sp, #8
    ddf6:	bd70      	pop	{r4, r5, r6, pc}
    ddf8:	00014705 	.word	0x00014705
    ddfc:	00016600 	.word	0x00016600
    de00:	000165d8 	.word	0x000165d8
    de04:	00017c68 	.word	0x00017c68
    de08:	00017d5c 	.word	0x00017d5c

0000de0c <lfs_file_relocate>:
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
    de0c:	b5f0      	push	{r4, r5, r6, r7, lr}
    de0e:	b089      	sub	sp, #36	; 0x24
    de10:	4605      	mov	r5, r0
    de12:	460e      	mov	r6, r1
    de14:	e04a      	b.n	deac <lfs_file_relocate+0xa0>
                err = lfs_bd_read(lfs,
    de16:	2201      	movs	r2, #1
    de18:	9203      	str	r2, [sp, #12]
    de1a:	f10d 021b 	add.w	r2, sp, #27
    de1e:	9202      	str	r2, [sp, #8]
    de20:	9401      	str	r4, [sp, #4]
    de22:	6bb2      	ldr	r2, [r6, #56]	; 0x38
    de24:	9200      	str	r2, [sp, #0]
    de26:	1b1b      	subs	r3, r3, r4
    de28:	462a      	mov	r2, r5
    de2a:	f106 0140 	add.w	r1, r6, #64	; 0x40
    de2e:	4628      	mov	r0, r5
    de30:	f006 fcb5 	bl	1479e <lfs_bd_read>
                if (err) {
    de34:	2800      	cmp	r0, #0
    de36:	d149      	bne.n	decc <lfs_file_relocate+0xc0>
            err = lfs_bd_prog(lfs,
    de38:	2301      	movs	r3, #1
    de3a:	9303      	str	r3, [sp, #12]
    de3c:	f10d 021b 	add.w	r2, sp, #27
    de40:	9202      	str	r2, [sp, #8]
    de42:	9401      	str	r4, [sp, #4]
    de44:	9a07      	ldr	r2, [sp, #28]
    de46:	9200      	str	r2, [sp, #0]
    de48:	462a      	mov	r2, r5
    de4a:	f105 0110 	add.w	r1, r5, #16
    de4e:	4628      	mov	r0, r5
    de50:	f006 ff1c 	bl	14c8c <lfs_bd_prog>
            if (err) {
    de54:	bb20      	cbnz	r0, dea0 <lfs_file_relocate+0x94>
        for (lfs_off_t i = 0; i < file->off; i++) {
    de56:	3401      	adds	r4, #1
    de58:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    de5a:	42a3      	cmp	r3, r4
    de5c:	d93c      	bls.n	ded8 <lfs_file_relocate+0xcc>
            if (file->flags & LFS_F_INLINE) {
    de5e:	6b32      	ldr	r2, [r6, #48]	; 0x30
    de60:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    de64:	d0d7      	beq.n	de16 <lfs_file_relocate+0xa>
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
    de66:	88b2      	ldrh	r2, [r6, #4]
    de68:	0292      	lsls	r2, r2, #10
                err = lfs_dir_getread(lfs, &file->m,
    de6a:	2101      	movs	r1, #1
    de6c:	9105      	str	r1, [sp, #20]
    de6e:	f10d 011b 	add.w	r1, sp, #27
    de72:	9104      	str	r1, [sp, #16]
    de74:	9403      	str	r4, [sp, #12]
    de76:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    de7a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    de7e:	9202      	str	r2, [sp, #8]
    de80:	4a24      	ldr	r2, [pc, #144]	; (df14 <lfs_file_relocate+0x108>)
    de82:	9201      	str	r2, [sp, #4]
    de84:	1b1b      	subs	r3, r3, r4
    de86:	9300      	str	r3, [sp, #0]
    de88:	f106 0340 	add.w	r3, r6, #64	; 0x40
    de8c:	2200      	movs	r2, #0
    de8e:	f106 0108 	add.w	r1, r6, #8
    de92:	4628      	mov	r0, r5
    de94:	f006 fe24 	bl	14ae0 <lfs_dir_getread>
                if (err) {
    de98:	2800      	cmp	r0, #0
    de9a:	d0cd      	beq.n	de38 <lfs_file_relocate+0x2c>
                    return err;
    de9c:	4607      	mov	r7, r0
    de9e:	e036      	b.n	df0e <lfs_file_relocate+0x102>
                if (err == LFS_ERR_CORRUPT) {
    dea0:	f110 0f54 	cmn.w	r0, #84	; 0x54
    dea4:	d114      	bne.n	ded0 <lfs_file_relocate+0xc4>
    rcache->block = LFS_BLOCK_NULL;
    dea6:	f04f 33ff 	mov.w	r3, #4294967295
    deaa:	612b      	str	r3, [r5, #16]
        int err = lfs_alloc(lfs, &nblock);
    deac:	a907      	add	r1, sp, #28
    deae:	4628      	mov	r0, r5
    deb0:	f7ff ff2a 	bl	dd08 <lfs_alloc>
        if (err) {
    deb4:	4607      	mov	r7, r0
    deb6:	bb50      	cbnz	r0, df0e <lfs_file_relocate+0x102>
        err = lfs_bd_erase(lfs, nblock);
    deb8:	9907      	ldr	r1, [sp, #28]
    deba:	4628      	mov	r0, r5
    debc:	f006 fc1d 	bl	146fa <lfs_bd_erase>
        if (err) {
    dec0:	4607      	mov	r7, r0
    dec2:	b138      	cbz	r0, ded4 <lfs_file_relocate+0xc8>
            if (err == LFS_ERR_CORRUPT) {
    dec4:	f110 0f54 	cmn.w	r0, #84	; 0x54
    dec8:	d0ed      	beq.n	dea6 <lfs_file_relocate+0x9a>
    deca:	e020      	b.n	df0e <lfs_file_relocate+0x102>
                    return err;
    decc:	4607      	mov	r7, r0
    dece:	e01e      	b.n	df0e <lfs_file_relocate+0x102>
                return err;
    ded0:	4607      	mov	r7, r0
    ded2:	e01c      	b.n	df0e <lfs_file_relocate+0x102>
        for (lfs_off_t i = 0; i < file->off; i++) {
    ded4:	2400      	movs	r4, #0
    ded6:	e7bf      	b.n	de58 <lfs_file_relocate+0x4c>
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
    ded8:	6eab      	ldr	r3, [r5, #104]	; 0x68
    deda:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    dedc:	69e9      	ldr	r1, [r5, #28]
    dede:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
    dee0:	f005 f986 	bl	131f0 <memcpy>
        file->cache.block = lfs->pcache.block;
    dee4:	692b      	ldr	r3, [r5, #16]
    dee6:	6433      	str	r3, [r6, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
    dee8:	696b      	ldr	r3, [r5, #20]
    deea:	6473      	str	r3, [r6, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
    deec:	69ab      	ldr	r3, [r5, #24]
    deee:	64b3      	str	r3, [r6, #72]	; 0x48
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
    def0:	6eab      	ldr	r3, [r5, #104]	; 0x68
    def2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    def4:	21ff      	movs	r1, #255	; 0xff
    def6:	69e8      	ldr	r0, [r5, #28]
    def8:	f005 f99e 	bl	13238 <memset>
    pcache->block = LFS_BLOCK_NULL;
    defc:	f04f 33ff 	mov.w	r3, #4294967295
    df00:	612b      	str	r3, [r5, #16]
        file->block = nblock;
    df02:	9b07      	ldr	r3, [sp, #28]
    df04:	63b3      	str	r3, [r6, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
    df06:	6b33      	ldr	r3, [r6, #48]	; 0x30
    df08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    df0c:	6333      	str	r3, [r6, #48]	; 0x30
}
    df0e:	4638      	mov	r0, r7
    df10:	b009      	add	sp, #36	; 0x24
    df12:	bdf0      	pop	{r4, r5, r6, r7, pc}
    df14:	fff7fc00 	.word	0xfff7fc00

0000df18 <lfs_file_flush>:
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
    df18:	b5f0      	push	{r4, r5, r6, r7, lr}
    df1a:	b097      	sub	sp, #92	; 0x5c
    df1c:	4605      	mov	r5, r0
    df1e:	460c      	mov	r4, r1
    if (file->flags & LFS_F_READING) {
    df20:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    df22:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    df26:	d008      	beq.n	df3a <lfs_file_flush+0x22>
        if (!(file->flags & LFS_F_INLINE)) {
    df28:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    df2c:	d102      	bne.n	df34 <lfs_file_flush+0x1c>
    rcache->block = LFS_BLOCK_NULL;
    df2e:	f04f 32ff 	mov.w	r2, #4294967295
    df32:	640a      	str	r2, [r1, #64]	; 0x40
        file->flags &= ~LFS_F_READING;
    df34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    df38:	6323      	str	r3, [r4, #48]	; 0x30
    if (file->flags & LFS_F_WRITING) {
    df3a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    df3c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    df40:	d05e      	beq.n	e000 <lfs_file_flush+0xe8>
        lfs_off_t pos = file->pos;
    df42:	6b66      	ldr	r6, [r4, #52]	; 0x34
        if (!(file->flags & LFS_F_INLINE)) {
    df44:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    df48:	d148      	bne.n	dfdc <lfs_file_flush+0xc4>
            lfs_file_t orig = {
    df4a:	2254      	movs	r2, #84	; 0x54
    df4c:	2100      	movs	r1, #0
    df4e:	a801      	add	r0, sp, #4
    df50:	f005 f972 	bl	13238 <memset>
                .ctz.head = file->ctz.head,
    df54:	6aa3      	ldr	r3, [r4, #40]	; 0x28
            lfs_file_t orig = {
    df56:	930b      	str	r3, [sp, #44]	; 0x2c
                .ctz.size = file->ctz.size,
    df58:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
            lfs_file_t orig = {
    df5a:	930c      	str	r3, [sp, #48]	; 0x30
    df5c:	4b2a      	ldr	r3, [pc, #168]	; (e008 <lfs_file_flush+0xf0>)
    df5e:	930d      	str	r3, [sp, #52]	; 0x34
                .pos = file->pos,
    df60:	6b63      	ldr	r3, [r4, #52]	; 0x34
            lfs_file_t orig = {
    df62:	930e      	str	r3, [sp, #56]	; 0x38
    df64:	af11      	add	r7, sp, #68	; 0x44
    df66:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    df6a:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    rcache->block = LFS_BLOCK_NULL;
    df6e:	f04f 33ff 	mov.w	r3, #4294967295
    df72:	602b      	str	r3, [r5, #0]
}
    df74:	e003      	b.n	df7e <lfs_file_flush+0x66>
    rcache->block = LFS_BLOCK_NULL;
    df76:	f04f 33ff 	mov.w	r3, #4294967295
    df7a:	9311      	str	r3, [sp, #68]	; 0x44
    df7c:	602b      	str	r3, [r5, #0]
            while (file->pos < file->ctz.size) {
    df7e:	6b62      	ldr	r2, [r4, #52]	; 0x34
    df80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    df82:	429a      	cmp	r2, r3
    df84:	d216      	bcs.n	dfb4 <lfs_file_flush+0x9c>
                lfs_ssize_t res = lfs_file_read(lfs, &orig, &data, 1);
    df86:	2301      	movs	r3, #1
    df88:	f10d 0203 	add.w	r2, sp, #3
    df8c:	a901      	add	r1, sp, #4
    df8e:	4628      	mov	r0, r5
    df90:	f000 f83c 	bl	e00c <lfs_file_read>
                if (res < 0) {
    df94:	1e03      	subs	r3, r0, #0
    df96:	db34      	blt.n	e002 <lfs_file_flush+0xea>
                res = lfs_file_write(lfs, file, &data, 1);
    df98:	2301      	movs	r3, #1
    df9a:	f10d 0203 	add.w	r2, sp, #3
    df9e:	4621      	mov	r1, r4
    dfa0:	4628      	mov	r0, r5
    dfa2:	f007 fa7f 	bl	154a4 <lfs_file_write>
                if (res < 0) {
    dfa6:	1e03      	subs	r3, r0, #0
    dfa8:	db2b      	blt.n	e002 <lfs_file_flush+0xea>
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
    dfaa:	682b      	ldr	r3, [r5, #0]
    dfac:	f1b3 3fff 	cmp.w	r3, #4294967295
    dfb0:	d1e1      	bne.n	df76 <lfs_file_flush+0x5e>
    dfb2:	e7e4      	b.n	df7e <lfs_file_flush+0x66>
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
    dfb4:	2301      	movs	r3, #1
    dfb6:	462a      	mov	r2, r5
    dfb8:	f104 0140 	add.w	r1, r4, #64	; 0x40
    dfbc:	4628      	mov	r0, r5
    dfbe:	f006 fe1d 	bl	14bfc <lfs_bd_flush>
                if (err) {
    dfc2:	4603      	mov	r3, r0
    dfc4:	b178      	cbz	r0, dfe6 <lfs_file_flush+0xce>
                    if (err == LFS_ERR_CORRUPT) {
    dfc6:	f110 0f54 	cmn.w	r0, #84	; 0x54
    dfca:	d11a      	bne.n	e002 <lfs_file_flush+0xea>
                err = lfs_file_relocate(lfs, file);
    dfcc:	4621      	mov	r1, r4
    dfce:	4628      	mov	r0, r5
    dfd0:	f7ff ff1c 	bl	de0c <lfs_file_relocate>
                if (err) {
    dfd4:	4603      	mov	r3, r0
    dfd6:	2800      	cmp	r0, #0
    dfd8:	d0ec      	beq.n	dfb4 <lfs_file_flush+0x9c>
    dfda:	e012      	b.n	e002 <lfs_file_flush+0xea>
            file->pos = lfs_max(file->pos, file->ctz.size);
    dfdc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (a > b) ? a : b;
    dfde:	42b3      	cmp	r3, r6
    dfe0:	bf38      	it	cc
    dfe2:	4633      	movcc	r3, r6
    dfe4:	6363      	str	r3, [r4, #52]	; 0x34
        file->ctz.head = file->block;
    dfe6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    dfe8:	62a3      	str	r3, [r4, #40]	; 0x28
        file->ctz.size = file->pos;
    dfea:	6b63      	ldr	r3, [r4, #52]	; 0x34
    dfec:	62e3      	str	r3, [r4, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
    dfee:	6b23      	ldr	r3, [r4, #48]	; 0x30
    dff0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
        file->flags |= LFS_F_DIRTY;
    dff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    dff8:	6323      	str	r3, [r4, #48]	; 0x30
        file->pos = pos;
    dffa:	6366      	str	r6, [r4, #52]	; 0x34
    return 0;
    dffc:	2300      	movs	r3, #0
    dffe:	e000      	b.n	e002 <lfs_file_flush+0xea>
    e000:	2300      	movs	r3, #0
}
    e002:	4618      	mov	r0, r3
    e004:	b017      	add	sp, #92	; 0x5c
    e006:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e008:	00200001 	.word	0x00200001

0000e00c <lfs_file_read>:
        void *buffer, lfs_size_t size) {
    e00c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e010:	b087      	sub	sp, #28
    e012:	4680      	mov	r8, r0
    e014:	460c      	mov	r4, r1
    e016:	4617      	mov	r7, r2
    e018:	4699      	mov	r9, r3
    if (file->flags & LFS_F_WRITING) {
    e01a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    e01c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    e020:	d109      	bne.n	e036 <lfs_file_read+0x2a>
    if (file->pos >= file->ctz.size) {
    e022:	6b62      	ldr	r2, [r4, #52]	; 0x34
    e024:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    e026:	429a      	cmp	r2, r3
    e028:	d276      	bcs.n	e118 <lfs_file_read+0x10c>
    size = lfs_min(size, file->ctz.size - file->pos);
    e02a:	1a9b      	subs	r3, r3, r2
    return (a < b) ? a : b;
    e02c:	4599      	cmp	r9, r3
    e02e:	bf28      	it	cs
    e030:	4699      	movcs	r9, r3
    nsize = size;
    e032:	464e      	mov	r6, r9
    while (nsize > 0) {
    e034:	e03d      	b.n	e0b2 <lfs_file_read+0xa6>
        int err = lfs_file_flush(lfs, file);
    e036:	f7ff ff6f 	bl	df18 <lfs_file_flush>
        if (err) {
    e03a:	4602      	mov	r2, r0
    e03c:	2800      	cmp	r0, #0
    e03e:	d0f0      	beq.n	e022 <lfs_file_read+0x16>
    e040:	e06b      	b.n	e11a <lfs_file_read+0x10e>
            if (!(file->flags & LFS_F_INLINE)) {
    e042:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    e046:	d041      	beq.n	e0cc <lfs_file_read+0xc0>
                file->block = LFS_BLOCK_INLINE;
    e048:	f06f 0301 	mvn.w	r3, #1
    e04c:	63a3      	str	r3, [r4, #56]	; 0x38
                file->off = file->pos;
    e04e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e050:	63e3      	str	r3, [r4, #60]	; 0x3c
            file->flags |= LFS_F_READING;
    e052:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e054:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    e058:	6323      	str	r3, [r4, #48]	; 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
    e05a:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
    e05e:	69db      	ldr	r3, [r3, #28]
    e060:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    e062:	1a9d      	subs	r5, r3, r2
    e064:	42b5      	cmp	r5, r6
    e066:	bf28      	it	cs
    e068:	4635      	movcs	r5, r6
        if (file->flags & LFS_F_INLINE) {
    e06a:	6b21      	ldr	r1, [r4, #48]	; 0x30
    e06c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    e070:	d041      	beq.n	e0f6 <lfs_file_read+0xea>
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
    e072:	88a1      	ldrh	r1, [r4, #4]
    e074:	0289      	lsls	r1, r1, #10
            int err = lfs_dir_getread(lfs, &file->m,
    e076:	9505      	str	r5, [sp, #20]
    e078:	9704      	str	r7, [sp, #16]
    e07a:	9203      	str	r2, [sp, #12]
    e07c:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
    e080:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    e084:	9102      	str	r1, [sp, #8]
    e086:	4a27      	ldr	r2, [pc, #156]	; (e124 <lfs_file_read+0x118>)
    e088:	9201      	str	r2, [sp, #4]
    e08a:	9300      	str	r3, [sp, #0]
    e08c:	f104 0340 	add.w	r3, r4, #64	; 0x40
    e090:	2200      	movs	r2, #0
    e092:	f104 0108 	add.w	r1, r4, #8
    e096:	4640      	mov	r0, r8
    e098:	f006 fd22 	bl	14ae0 <lfs_dir_getread>
            if (err) {
    e09c:	4602      	mov	r2, r0
    e09e:	2800      	cmp	r0, #0
    e0a0:	d13b      	bne.n	e11a <lfs_file_read+0x10e>
        file->pos += diff;
    e0a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e0a4:	442b      	add	r3, r5
    e0a6:	6363      	str	r3, [r4, #52]	; 0x34
        file->off += diff;
    e0a8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    e0aa:	442b      	add	r3, r5
    e0ac:	63e3      	str	r3, [r4, #60]	; 0x3c
        data += diff;
    e0ae:	442f      	add	r7, r5
        nsize -= diff;
    e0b0:	1b76      	subs	r6, r6, r5
    while (nsize > 0) {
    e0b2:	2e00      	cmp	r6, #0
    e0b4:	d02e      	beq.n	e114 <lfs_file_read+0x108>
        if (!(file->flags & LFS_F_READING) ||
    e0b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e0b8:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    e0bc:	d0c1      	beq.n	e042 <lfs_file_read+0x36>
                file->off == lfs->cfg->block_size) {
    e0be:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    e0c0:	f8d8 2068 	ldr.w	r2, [r8, #104]	; 0x68
    e0c4:	69d2      	ldr	r2, [r2, #28]
        if (!(file->flags & LFS_F_READING) ||
    e0c6:	4291      	cmp	r1, r2
    e0c8:	d1c7      	bne.n	e05a <lfs_file_read+0x4e>
    e0ca:	e7ba      	b.n	e042 <lfs_file_read+0x36>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
    e0cc:	f104 033c 	add.w	r3, r4, #60	; 0x3c
    e0d0:	9303      	str	r3, [sp, #12]
    e0d2:	f104 0338 	add.w	r3, r4, #56	; 0x38
    e0d6:	9302      	str	r3, [sp, #8]
    e0d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    e0da:	9301      	str	r3, [sp, #4]
    e0dc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    e0de:	9300      	str	r3, [sp, #0]
    e0e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    e0e2:	f104 0240 	add.w	r2, r4, #64	; 0x40
    e0e6:	2100      	movs	r1, #0
    e0e8:	4640      	mov	r0, r8
    e0ea:	f007 f86a 	bl	151c2 <lfs_ctz_find>
                if (err) {
    e0ee:	4602      	mov	r2, r0
    e0f0:	2800      	cmp	r0, #0
    e0f2:	d0ae      	beq.n	e052 <lfs_file_read+0x46>
    e0f4:	e011      	b.n	e11a <lfs_file_read+0x10e>
            int err = lfs_bd_read(lfs,
    e0f6:	9503      	str	r5, [sp, #12]
    e0f8:	9702      	str	r7, [sp, #8]
    e0fa:	9201      	str	r2, [sp, #4]
    e0fc:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    e0fe:	9200      	str	r2, [sp, #0]
    e100:	f104 0240 	add.w	r2, r4, #64	; 0x40
    e104:	2100      	movs	r1, #0
    e106:	4640      	mov	r0, r8
    e108:	f006 fb49 	bl	1479e <lfs_bd_read>
            if (err) {
    e10c:	4602      	mov	r2, r0
    e10e:	2800      	cmp	r0, #0
    e110:	d0c7      	beq.n	e0a2 <lfs_file_read+0x96>
    e112:	e002      	b.n	e11a <lfs_file_read+0x10e>
    return size;
    e114:	464a      	mov	r2, r9
    e116:	e000      	b.n	e11a <lfs_file_read+0x10e>
        return 0;
    e118:	2200      	movs	r2, #0
}
    e11a:	4610      	mov	r0, r2
    e11c:	b007      	add	sp, #28
    e11e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e122:	bf00      	nop
    e124:	fff7fc00 	.word	0xfff7fc00

0000e128 <lfs_fs_size>:
    lfs_size_t *size = p;
    *size += 1;
    return 0;
}

lfs_ssize_t lfs_fs_size(lfs_t *lfs) {
    e128:	b500      	push	{lr}
    e12a:	b083      	sub	sp, #12
    LFS_TRACE("lfs_fs_size(%p)", (void*)lfs);
    lfs_size_t size = 0;
    e12c:	2300      	movs	r3, #0
    e12e:	9301      	str	r3, [sp, #4]
    int err = lfs_fs_traverseraw(lfs, lfs_fs_size_count, &size, false);
    e130:	aa01      	add	r2, sp, #4
    e132:	4904      	ldr	r1, [pc, #16]	; (e144 <lfs_fs_size+0x1c>)
    e134:	f7ff fd28 	bl	db88 <lfs_fs_traverseraw>
    if (err) {
    e138:	b900      	cbnz	r0, e13c <lfs_fs_size+0x14>
        LFS_TRACE("lfs_fs_size -> %d", err);
        return err;
    }

    LFS_TRACE("lfs_fs_size -> %d", err);
    return size;
    e13a:	9801      	ldr	r0, [sp, #4]
}
    e13c:	b003      	add	sp, #12
    e13e:	f85d fb04 	ldr.w	pc, [sp], #4
    e142:	bf00      	nop
    e144:	00014795 	.word	0x00014795

0000e148 <lfs_dir_compact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
    e148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e14c:	b09b      	sub	sp, #108	; 0x6c
    e14e:	4607      	mov	r7, r0
    e150:	468b      	mov	fp, r1
    e152:	4690      	mov	r8, r2
    e154:	4699      	mov	r9, r3
    e156:	f8dd a090 	ldr.w	sl, [sp, #144]	; 0x90
    e15a:	f8bd 5094 	ldrh.w	r5, [sp, #148]	; 0x94
    e15e:	f8bd 6098 	ldrh.w	r6, [sp, #152]	; 0x98
    const lfs_block_t oldpair[2] = {dir->pair[0], dir->pair[1]};
    e162:	680b      	ldr	r3, [r1, #0]
    e164:	9316      	str	r3, [sp, #88]	; 0x58
    e166:	684b      	ldr	r3, [r1, #4]
    e168:	9317      	str	r3, [sp, #92]	; 0x5c
    while (end - begin > 1) {
    e16a:	e012      	b.n	e192 <lfs_dir_compact+0x4a>
        uint16_t split = (end - begin) / 2;
    e16c:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
    e170:	f3c4 044f 	ubfx	r4, r4, #1, #16
        err = lfs_dir_split(lfs, dir, attrs, attrcount,
    e174:	442c      	add	r4, r5
    e176:	b2a4      	uxth	r4, r4
    e178:	9602      	str	r6, [sp, #8]
    e17a:	9401      	str	r4, [sp, #4]
    e17c:	f8cd a000 	str.w	sl, [sp]
    e180:	464b      	mov	r3, r9
    e182:	4642      	mov	r2, r8
    e184:	4659      	mov	r1, fp
    e186:	4638      	mov	r0, r7
    e188:	f007 fb9f 	bl	158ca <lfs_dir_split>
        if (err) {
    e18c:	2800      	cmp	r0, #0
    e18e:	d151      	bne.n	e234 <lfs_dir_compact+0xec>
        end = begin + split;
    e190:	4626      	mov	r6, r4
    while (end - begin > 1) {
    e192:	1b74      	subs	r4, r6, r5
    e194:	2c01      	cmp	r4, #1
    e196:	dd2f      	ble.n	e1f8 <lfs_dir_compact+0xb0>
        lfs_size_t size = 0;
    e198:	2200      	movs	r2, #0
    e19a:	9210      	str	r2, [sp, #64]	; 0x40
        int err = lfs_dir_traverse(lfs,
    e19c:	ab10      	add	r3, sp, #64	; 0x40
    e19e:	9308      	str	r3, [sp, #32]
    e1a0:	4bad      	ldr	r3, [pc, #692]	; (e458 <lfs_dir_compact+0x310>)
    e1a2:	9307      	str	r3, [sp, #28]
    e1a4:	426b      	negs	r3, r5
    e1a6:	b21b      	sxth	r3, r3
    e1a8:	9306      	str	r3, [sp, #24]
    e1aa:	9605      	str	r6, [sp, #20]
    e1ac:	9504      	str	r5, [sp, #16]
    e1ae:	9203      	str	r2, [sp, #12]
    e1b0:	4baa      	ldr	r3, [pc, #680]	; (e45c <lfs_dir_compact+0x314>)
    e1b2:	9302      	str	r3, [sp, #8]
    e1b4:	f8cd 9004 	str.w	r9, [sp, #4]
    e1b8:	f8cd 8000 	str.w	r8, [sp]
    e1bc:	f04f 33ff 	mov.w	r3, #4294967295
    e1c0:	4651      	mov	r1, sl
    e1c2:	4638      	mov	r0, r7
    e1c4:	f7ff f81a 	bl	d1fc <lfs_dir_traverse>
        if (err) {
    e1c8:	2800      	cmp	r0, #0
    e1ca:	f040 81a7 	bne.w	e51c <lfs_dir_compact+0x3d4>
        if (end - begin < 0xff &&
    e1ce:	2cfe      	cmp	r4, #254	; 0xfe
    e1d0:	dccc      	bgt.n	e16c <lfs_dir_compact+0x24>
                size <= lfs_min(lfs->cfg->block_size - 36,
    e1d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    e1d4:	69da      	ldr	r2, [r3, #28]
    e1d6:	f1a2 0124 	sub.w	r1, r2, #36	; 0x24
    e1da:	6998      	ldr	r0, [r3, #24]
    return lfs_aligndown(a + alignment-1, alignment);
    e1dc:	eb00 0252 	add.w	r2, r0, r2, lsr #1
    e1e0:	1e53      	subs	r3, r2, #1
    return a - (a % alignment);
    e1e2:	fbb3 f2f0 	udiv	r2, r3, r0
    e1e6:	fb00 3212 	mls	r2, r0, r2, r3
    e1ea:	1a9b      	subs	r3, r3, r2
    return (a < b) ? a : b;
    e1ec:	428b      	cmp	r3, r1
    e1ee:	bf28      	it	cs
    e1f0:	460b      	movcs	r3, r1
    e1f2:	9a10      	ldr	r2, [sp, #64]	; 0x40
        if (end - begin < 0xff &&
    e1f4:	429a      	cmp	r2, r3
    e1f6:	d8b9      	bhi.n	e16c <lfs_dir_compact+0x24>
    dir->rev += 1;
    e1f8:	f8db 2008 	ldr.w	r2, [fp, #8]
    e1fc:	3201      	adds	r2, #1
    e1fe:	f8cb 2008 	str.w	r2, [fp, #8]
    if (lfs->cfg->block_cycles > 0 &&
    e202:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    e204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e206:	2b00      	cmp	r3, #0
    e208:	dd43      	ble.n	e292 <lfs_dir_compact+0x14a>
            (dir->rev % ((lfs->cfg->block_cycles+1)|1) == 0)) {
    e20a:	3301      	adds	r3, #1
    e20c:	f043 0301 	orr.w	r3, r3, #1
    e210:	fbb2 f1f3 	udiv	r1, r2, r3
    e214:	fb03 2311 	mls	r3, r3, r1, r2
    if (lfs->cfg->block_cycles > 0 &&
    e218:	2b00      	cmp	r3, #0
    e21a:	d13c      	bne.n	e296 <lfs_dir_compact+0x14e>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    e21c:	f8db 3000 	ldr.w	r3, [fp]
    e220:	b1a3      	cbz	r3, e24c <lfs_dir_compact+0x104>
    e222:	f8db 2004 	ldr.w	r2, [fp, #4]
    e226:	2a01      	cmp	r2, #1
    e228:	d010      	beq.n	e24c <lfs_dir_compact+0x104>
    e22a:	2b01      	cmp	r3, #1
    e22c:	d00e      	beq.n	e24c <lfs_dir_compact+0x104>
    e22e:	b16a      	cbz	r2, e24c <lfs_dir_compact+0x104>
            tired = true;
    e230:	2401      	movs	r4, #1
    e232:	e049      	b.n	e2c8 <lfs_dir_compact+0x180>
    e234:	900b      	str	r0, [sp, #44]	; 0x2c
            if (err == LFS_ERR_NOSPC && size <= lfs->cfg->block_size - 36) {
    e236:	f110 0f1c 	cmn.w	r0, #28
    e23a:	f040 8170 	bne.w	e51e <lfs_dir_compact+0x3d6>
    e23e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    e240:	69db      	ldr	r3, [r3, #28]
    e242:	3b24      	subs	r3, #36	; 0x24
    e244:	9a10      	ldr	r2, [sp, #64]	; 0x40
    e246:	4293      	cmp	r3, r2
    e248:	d2d6      	bcs.n	e1f8 <lfs_dir_compact+0xb0>
    e24a:	e168      	b.n	e51e <lfs_dir_compact+0x3d6>
            lfs_ssize_t res = lfs_fs_size(lfs);
    e24c:	4638      	mov	r0, r7
    e24e:	f7ff ff6b 	bl	e128 <lfs_fs_size>
            if (res < 0) {
    e252:	1e02      	subs	r2, r0, #0
    e254:	920b      	str	r2, [sp, #44]	; 0x2c
    e256:	f2c0 8162 	blt.w	e51e <lfs_dir_compact+0x3d6>
            if ((lfs_size_t)res < lfs->cfg->block_count/2) {
    e25a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    e25c:	6a1b      	ldr	r3, [r3, #32]
    e25e:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
    e262:	d301      	bcc.n	e268 <lfs_dir_compact+0x120>
    bool relocated = false;
    e264:	2400      	movs	r4, #0
    e266:	e017      	b.n	e298 <lfs_dir_compact+0x150>
                int err = lfs_dir_split(lfs, dir, attrs, attrcount,
    e268:	9602      	str	r6, [sp, #8]
    e26a:	9501      	str	r5, [sp, #4]
    e26c:	f8cd a000 	str.w	sl, [sp]
    e270:	464b      	mov	r3, r9
    e272:	4642      	mov	r2, r8
    e274:	4659      	mov	r1, fp
    e276:	4638      	mov	r0, r7
    e278:	f007 fb27 	bl	158ca <lfs_dir_split>
                if (err && err != LFS_ERR_NOSPC) {
    e27c:	900b      	str	r0, [sp, #44]	; 0x2c
    e27e:	b118      	cbz	r0, e288 <lfs_dir_compact+0x140>
    e280:	f110 0f1c 	cmn.w	r0, #28
    e284:	f040 814b 	bne.w	e51e <lfs_dir_compact+0x3d6>
                if (!err) {
    e288:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e28a:	2b00      	cmp	r3, #0
    e28c:	d1ea      	bne.n	e264 <lfs_dir_compact+0x11c>
                    end = begin;
    e28e:	462e      	mov	r6, r5
    e290:	e7e8      	b.n	e264 <lfs_dir_compact+0x11c>
    bool relocated = false;
    e292:	2400      	movs	r4, #0
    e294:	e000      	b.n	e298 <lfs_dir_compact+0x150>
    e296:	2400      	movs	r4, #0
                .block = dir->pair[1],
    e298:	f8db 1004 	ldr.w	r1, [fp, #4]
            struct lfs_commit commit = {
    e29c:	9110      	str	r1, [sp, #64]	; 0x40
    e29e:	2300      	movs	r3, #0
    e2a0:	9311      	str	r3, [sp, #68]	; 0x44
    e2a2:	f04f 32ff 	mov.w	r2, #4294967295
    e2a6:	9212      	str	r2, [sp, #72]	; 0x48
    e2a8:	9213      	str	r2, [sp, #76]	; 0x4c
    e2aa:	9314      	str	r3, [sp, #80]	; 0x50
                .end = lfs->cfg->block_size - 8,
    e2ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    e2ae:	69db      	ldr	r3, [r3, #28]
    e2b0:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
    e2b2:	9315      	str	r3, [sp, #84]	; 0x54
            int err = lfs_bd_erase(lfs, dir->pair[1]);
    e2b4:	4638      	mov	r0, r7
    e2b6:	f006 fa20 	bl	146fa <lfs_bd_erase>
            if (err) {
    e2ba:	900b      	str	r0, [sp, #44]	; 0x2c
    e2bc:	b340      	cbz	r0, e310 <lfs_dir_compact+0x1c8>
                if (err == LFS_ERR_CORRUPT) {
    e2be:	f110 0f54 	cmn.w	r0, #84	; 0x54
    e2c2:	f040 812c 	bne.w	e51e <lfs_dir_compact+0x3d6>
                    goto relocate;
    e2c6:	2400      	movs	r4, #0
    rcache->block = LFS_BLOCK_NULL;
    e2c8:	f04f 33ff 	mov.w	r3, #4294967295
    e2cc:	613b      	str	r3, [r7, #16]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    e2ce:	f8db 3000 	ldr.w	r3, [fp]
    e2d2:	2b00      	cmp	r3, #0
    e2d4:	f000 8107 	beq.w	e4e6 <lfs_dir_compact+0x39e>
    e2d8:	f8db 2004 	ldr.w	r2, [fp, #4]
    e2dc:	2a01      	cmp	r2, #1
    e2de:	f000 8102 	beq.w	e4e6 <lfs_dir_compact+0x39e>
    e2e2:	2b01      	cmp	r3, #1
    e2e4:	f000 80ff 	beq.w	e4e6 <lfs_dir_compact+0x39e>
    e2e8:	2a00      	cmp	r2, #0
    e2ea:	f000 80fc 	beq.w	e4e6 <lfs_dir_compact+0x39e>
        int err = lfs_alloc(lfs, &dir->pair[1]);
    e2ee:	f10b 0104 	add.w	r1, fp, #4
    e2f2:	4638      	mov	r0, r7
    e2f4:	f7ff fd08 	bl	dd08 <lfs_alloc>
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
    e2f8:	900b      	str	r0, [sp, #44]	; 0x2c
    e2fa:	b138      	cbz	r0, e30c <lfs_dir_compact+0x1c4>
    e2fc:	f110 0f1c 	cmn.w	r0, #28
    e300:	f040 810d 	bne.w	e51e <lfs_dir_compact+0x3d6>
    e304:	2c00      	cmp	r4, #0
    e306:	f000 810a 	beq.w	e51e <lfs_dir_compact+0x3d6>
    e30a:	e7c5      	b.n	e298 <lfs_dir_compact+0x150>
        relocated = true;
    e30c:	2401      	movs	r4, #1
    e30e:	e7c3      	b.n	e298 <lfs_dir_compact+0x150>
            err = lfs_dir_commitprog(lfs, &commit,
    e310:	2304      	movs	r3, #4
    e312:	f10b 0208 	add.w	r2, fp, #8
    e316:	a910      	add	r1, sp, #64	; 0x40
    e318:	4638      	mov	r0, r7
    e31a:	f006 fd06 	bl	14d2a <lfs_dir_commitprog>
            if (err) {
    e31e:	900b      	str	r0, [sp, #44]	; 0x2c
    e320:	b120      	cbz	r0, e32c <lfs_dir_compact+0x1e4>
                if (err == LFS_ERR_CORRUPT) {
    e322:	f110 0f54 	cmn.w	r0, #84	; 0x54
    e326:	f040 80fa 	bne.w	e51e <lfs_dir_compact+0x3d6>
    e32a:	e7cc      	b.n	e2c6 <lfs_dir_compact+0x17e>
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
    e32c:	9718      	str	r7, [sp, #96]	; 0x60
    e32e:	ab10      	add	r3, sp, #64	; 0x40
    e330:	9319      	str	r3, [sp, #100]	; 0x64
            err = lfs_dir_traverse(lfs,
    e332:	ab18      	add	r3, sp, #96	; 0x60
    e334:	9308      	str	r3, [sp, #32]
    e336:	4b4a      	ldr	r3, [pc, #296]	; (e460 <lfs_dir_compact+0x318>)
    e338:	9307      	str	r3, [sp, #28]
    e33a:	426b      	negs	r3, r5
    e33c:	b21b      	sxth	r3, r3
    e33e:	9306      	str	r3, [sp, #24]
    e340:	9605      	str	r6, [sp, #20]
    e342:	9504      	str	r5, [sp, #16]
    e344:	2200      	movs	r2, #0
    e346:	9203      	str	r2, [sp, #12]
    e348:	4b44      	ldr	r3, [pc, #272]	; (e45c <lfs_dir_compact+0x314>)
    e34a:	9302      	str	r3, [sp, #8]
    e34c:	f8cd 9004 	str.w	r9, [sp, #4]
    e350:	f8cd 8000 	str.w	r8, [sp]
    e354:	f04f 33ff 	mov.w	r3, #4294967295
    e358:	4651      	mov	r1, sl
    e35a:	4638      	mov	r0, r7
    e35c:	f7fe ff4e 	bl	d1fc <lfs_dir_traverse>
            if (err) {
    e360:	900b      	str	r0, [sp, #44]	; 0x2c
    e362:	b120      	cbz	r0, e36e <lfs_dir_compact+0x226>
                if (err == LFS_ERR_CORRUPT) {
    e364:	f110 0f54 	cmn.w	r0, #84	; 0x54
    e368:	f040 80d9 	bne.w	e51e <lfs_dir_compact+0x3d6>
    e36c:	e7ab      	b.n	e2c6 <lfs_dir_compact+0x17e>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    e36e:	f8db 3018 	ldr.w	r3, [fp, #24]
    e372:	f1b3 3fff 	cmp.w	r3, #4294967295
    e376:	d01e      	beq.n	e3b6 <lfs_dir_compact+0x26e>
    e378:	f8db 301c 	ldr.w	r3, [fp, #28]
    e37c:	f1b3 3fff 	cmp.w	r3, #4294967295
    e380:	d017      	beq.n	e3b2 <lfs_dir_compact+0x26a>
    e382:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            if (!lfs_pair_isnull(dir->tail)) {
    e384:	f013 0f01 	tst.w	r3, #1
    e388:	d017      	beq.n	e3ba <lfs_dir_compact+0x272>
            lfs_gstate_t delta = {0};
    e38a:	2300      	movs	r3, #0
    e38c:	930d      	str	r3, [sp, #52]	; 0x34
    e38e:	930e      	str	r3, [sp, #56]	; 0x38
    e390:	930f      	str	r3, [sp, #60]	; 0x3c
            if (!relocated) {
    e392:	bbb4      	cbnz	r4, e402 <lfs_dir_compact+0x2ba>
                lfs_gstate_xor(&delta, &lfs->gdisk);
    e394:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
    for (int i = 0; i < 3; i++) {
    e398:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e39a:	2b02      	cmp	r3, #2
    e39c:	dc22      	bgt.n	e3e4 <lfs_dir_compact+0x29c>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
    e39e:	a90d      	add	r1, sp, #52	; 0x34
    e3a0:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
    e3a4:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    e3a8:	4042      	eors	r2, r0
    e3aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
    e3ae:	3301      	adds	r3, #1
    e3b0:	e7f3      	b.n	e39a <lfs_dir_compact+0x252>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    e3b2:	2301      	movs	r3, #1
    e3b4:	e7e6      	b.n	e384 <lfs_dir_compact+0x23c>
    e3b6:	2301      	movs	r3, #1
    e3b8:	e7e4      	b.n	e384 <lfs_dir_compact+0x23c>
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
    e3ba:	f89b 2017 	ldrb.w	r2, [fp, #23]
    e3be:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
                err = lfs_dir_commitattr(lfs, &commit,
    e3c2:	f10b 0318 	add.w	r3, fp, #24
    e3c6:	4927      	ldr	r1, [pc, #156]	; (e464 <lfs_dir_compact+0x31c>)
    e3c8:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
    e3cc:	a910      	add	r1, sp, #64	; 0x40
    e3ce:	4638      	mov	r0, r7
    e3d0:	f006 fccb 	bl	14d6a <lfs_dir_commitattr>
                if (err) {
    e3d4:	2800      	cmp	r0, #0
    e3d6:	d0d8      	beq.n	e38a <lfs_dir_compact+0x242>
                    if (err == LFS_ERR_CORRUPT) {
    e3d8:	f110 0f54 	cmn.w	r0, #84	; 0x54
    e3dc:	f43f af73 	beq.w	e2c6 <lfs_dir_compact+0x17e>
                    return err;
    e3e0:	900b      	str	r0, [sp, #44]	; 0x2c
    e3e2:	e09c      	b.n	e51e <lfs_dir_compact+0x3d6>
                lfs_gstate_xor(&delta, &lfs->gstate);
    e3e4:	f107 0c30 	add.w	ip, r7, #48	; 0x30
    for (int i = 0; i < 3; i++) {
    e3e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e3ea:	2b02      	cmp	r3, #2
    e3ec:	dc09      	bgt.n	e402 <lfs_dir_compact+0x2ba>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
    e3ee:	a90d      	add	r1, sp, #52	; 0x34
    e3f0:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
    e3f4:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    e3f8:	4042      	eors	r2, r0
    e3fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
    e3fe:	3301      	adds	r3, #1
    e400:	e7f3      	b.n	e3ea <lfs_dir_compact+0x2a2>
            lfs_gstate_xor(&delta, &lfs->gdelta);
    e402:	f107 0048 	add.w	r0, r7, #72	; 0x48
    for (int i = 0; i < 3; i++) {
    e406:	46a4      	mov	ip, r4
    e408:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e40a:	e008      	b.n	e41e <lfs_dir_compact+0x2d6>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
    e40c:	a90d      	add	r1, sp, #52	; 0x34
    e40e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    e412:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    e416:	4062      	eors	r2, r4
    e418:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
    e41c:	3301      	adds	r3, #1
    e41e:	2b02      	cmp	r3, #2
    e420:	ddf4      	ble.n	e40c <lfs_dir_compact+0x2c4>
    e422:	4664      	mov	r4, ip
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
    e424:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    e426:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
    e42a:	f023 0303 	bic.w	r3, r3, #3
    e42e:	930d      	str	r3, [sp, #52]	; 0x34
            err = lfs_dir_getgstate(lfs, dir, &delta);
    e430:	aa0d      	add	r2, sp, #52	; 0x34
    e432:	4659      	mov	r1, fp
    e434:	4638      	mov	r0, r7
    e436:	f7ff f891 	bl	d55c <lfs_dir_getgstate>
            if (err) {
    e43a:	900b      	str	r0, [sp, #44]	; 0x2c
    e43c:	2800      	cmp	r0, #0
    e43e:	d16e      	bne.n	e51e <lfs_dir_compact+0x3d6>
    e440:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    for (int i = 0; i < 3; i++) {
    e442:	2b02      	cmp	r3, #2
    e444:	dc10      	bgt.n	e468 <lfs_dir_compact+0x320>
        if (((uint32_t*)a)[i] != 0) {
    e446:	aa1a      	add	r2, sp, #104	; 0x68
    e448:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    e44c:	f852 2c34 	ldr.w	r2, [r2, #-52]
    e450:	b9c2      	cbnz	r2, e484 <lfs_dir_compact+0x33c>
    for (int i = 0; i < 3; i++) {
    e452:	3301      	adds	r3, #1
    e454:	e7f5      	b.n	e442 <lfs_dir_compact+0x2fa>
    e456:	bf00      	nop
    e458:	0001475f 	.word	0x0001475f
    e45c:	400ffc00 	.word	0x400ffc00
    e460:	00014e27 	.word	0x00014e27
    e464:	000ffc08 	.word	0x000ffc08
    return true;
    e468:	2301      	movs	r3, #1
            if (!lfs_gstate_iszero(&delta)) {
    e46a:	b96b      	cbnz	r3, e488 <lfs_dir_compact+0x340>
                err = lfs_dir_commitattr(lfs, &commit,
    e46c:	ab0d      	add	r3, sp, #52	; 0x34
    e46e:	4a2e      	ldr	r2, [pc, #184]	; (e528 <lfs_dir_compact+0x3e0>)
    e470:	a910      	add	r1, sp, #64	; 0x40
    e472:	4638      	mov	r0, r7
    e474:	f006 fc79 	bl	14d6a <lfs_dir_commitattr>
                if (err) {
    e478:	900b      	str	r0, [sp, #44]	; 0x2c
    e47a:	b128      	cbz	r0, e488 <lfs_dir_compact+0x340>
                    if (err == LFS_ERR_CORRUPT) {
    e47c:	f110 0f54 	cmn.w	r0, #84	; 0x54
    e480:	d14d      	bne.n	e51e <lfs_dir_compact+0x3d6>
    e482:	e720      	b.n	e2c6 <lfs_dir_compact+0x17e>
            return false;
    e484:	2300      	movs	r3, #0
    e486:	e7f0      	b.n	e46a <lfs_dir_compact+0x322>
            err = lfs_dir_commitcrc(lfs, &commit);
    e488:	a910      	add	r1, sp, #64	; 0x40
    e48a:	4638      	mov	r0, r7
    e48c:	f006 fcdf 	bl	14e4e <lfs_dir_commitcrc>
            if (err) {
    e490:	900b      	str	r0, [sp, #44]	; 0x2c
    e492:	b118      	cbz	r0, e49c <lfs_dir_compact+0x354>
                if (err == LFS_ERR_CORRUPT) {
    e494:	f110 0f54 	cmn.w	r0, #84	; 0x54
    e498:	d141      	bne.n	e51e <lfs_dir_compact+0x3d6>
    e49a:	e714      	b.n	e2c6 <lfs_dir_compact+0x17e>
    lfs_block_t t = pair[0];
    e49c:	f8db 3000 	ldr.w	r3, [fp]
    pair[0] = pair[1];
    e4a0:	f8db 2004 	ldr.w	r2, [fp, #4]
    e4a4:	f8cb 2000 	str.w	r2, [fp]
    pair[1] = t;
    e4a8:	f8cb 3004 	str.w	r3, [fp, #4]
            dir->count = end - begin;
    e4ac:	1b75      	subs	r5, r6, r5
    e4ae:	f8ab 5014 	strh.w	r5, [fp, #20]
            dir->off = commit.off;
    e4b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
    e4b4:	f8cb 300c 	str.w	r3, [fp, #12]
            dir->etag = commit.ptag;
    e4b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
    e4ba:	f8cb 3010 	str.w	r3, [fp, #16]
            lfs->gdelta = (lfs_gstate_t){0};
    e4be:	2200      	movs	r2, #0
    e4c0:	64ba      	str	r2, [r7, #72]	; 0x48
    e4c2:	64fa      	str	r2, [r7, #76]	; 0x4c
    e4c4:	653a      	str	r2, [r7, #80]	; 0x50
            if (!relocated) {
    e4c6:	b934      	cbnz	r4, e4d6 <lfs_dir_compact+0x38e>
                lfs->gdisk = lfs->gstate;
    e4c8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    e4cc:	f107 0230 	add.w	r2, r7, #48	; 0x30
    e4d0:	ca07      	ldmia	r2, {r0, r1, r2}
    e4d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (relocated) {
    e4d6:	b314      	cbz	r4, e51e <lfs_dir_compact+0x3d6>
        int err = lfs_fs_relocate(lfs, oldpair, dir->pair);
    e4d8:	465a      	mov	r2, fp
    e4da:	a916      	add	r1, sp, #88	; 0x58
    e4dc:	4638      	mov	r0, r7
    e4de:	f000 fba1 	bl	ec24 <lfs_fs_relocate>
    e4e2:	900b      	str	r0, [sp, #44]	; 0x2c
        if (err) {
    e4e4:	e01b      	b.n	e51e <lfs_dir_compact+0x3d6>
    e4e6:	4b11      	ldr	r3, [pc, #68]	; (e52c <lfs_dir_compact+0x3e4>)
    e4e8:	4a11      	ldr	r2, [pc, #68]	; (e530 <lfs_dir_compact+0x3e8>)
    e4ea:	1a9b      	subs	r3, r3, r2
    e4ec:	08db      	lsrs	r3, r3, #3
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
    e4ee:	f04f 0200 	mov.w	r2, #0
    e4f2:	2102      	movs	r1, #2
    e4f4:	f361 0202 	bfi	r2, r1, #0, #3
    e4f8:	f36f 02c5 	bfc	r2, #3, #3
    e4fc:	f363 128f 	bfi	r2, r3, #6, #10
    e500:	f8ad 2000 	strh.w	r2, [sp]
    e504:	f8db 3004 	ldr.w	r3, [fp, #4]
    e508:	f240 629a 	movw	r2, #1690	; 0x69a
    e50c:	4909      	ldr	r1, [pc, #36]	; (e534 <lfs_dir_compact+0x3ec>)
    e50e:	480a      	ldr	r0, [pc, #40]	; (e538 <lfs_dir_compact+0x3f0>)
    e510:	f7f4 fe90 	bl	3234 <log_3>
            return LFS_ERR_NOSPC;
    e514:	f06f 031b 	mvn.w	r3, #27
    e518:	930b      	str	r3, [sp, #44]	; 0x2c
    e51a:	e000      	b.n	e51e <lfs_dir_compact+0x3d6>
    e51c:	900b      	str	r0, [sp, #44]	; 0x2c
}
    e51e:	980b      	ldr	r0, [sp, #44]	; 0x2c
    e520:	b01b      	add	sp, #108	; 0x6c
    e522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e526:	bf00      	nop
    e528:	7ffffc0c 	.word	0x7ffffc0c
    e52c:	00016600 	.word	0x00016600
    e530:	000165d8 	.word	0x000165d8
    e534:	00017c68 	.word	0x00017c68
    e538:	00017d7c 	.word	0x00017d7c

0000e53c <lfs_dir_commit>:
        const struct lfs_mattr *attrs, int attrcount) {
    e53c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e540:	b0a1      	sub	sp, #132	; 0x84
    e542:	4680      	mov	r8, r0
    e544:	460d      	mov	r5, r1
    e546:	4617      	mov	r7, r2
    e548:	4699      	mov	r9, r3
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
    e54a:	6a84      	ldr	r4, [r0, #40]	; 0x28
    e54c:	e003      	b.n	e556 <lfs_dir_commit+0x1a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
    e54e:	79a3      	ldrb	r3, [r4, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
    e550:	2b01      	cmp	r3, #1
    e552:	d012      	beq.n	e57a <lfs_dir_commit+0x3e>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
    e554:	6824      	ldr	r4, [r4, #0]
    e556:	b354      	cbz	r4, e5ae <lfs_dir_commit+0x72>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
    e558:	f104 0308 	add.w	r3, r4, #8
    e55c:	42ab      	cmp	r3, r5
    e55e:	d0f9      	beq.n	e554 <lfs_dir_commit+0x18>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    e560:	68a3      	ldr	r3, [r4, #8]
    e562:	682a      	ldr	r2, [r5, #0]
    e564:	4293      	cmp	r3, r2
    e566:	d0f2      	beq.n	e54e <lfs_dir_commit+0x12>
    e568:	68e0      	ldr	r0, [r4, #12]
    e56a:	6869      	ldr	r1, [r5, #4]
    e56c:	4281      	cmp	r1, r0
    e56e:	d0ee      	beq.n	e54e <lfs_dir_commit+0x12>
    e570:	428b      	cmp	r3, r1
    e572:	d0ec      	beq.n	e54e <lfs_dir_commit+0x12>
    e574:	4290      	cmp	r0, r2
    e576:	d1ed      	bne.n	e554 <lfs_dir_commit+0x18>
    e578:	e7e9      	b.n	e54e <lfs_dir_commit+0x12>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
    e57a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    e57c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    e580:	d0e8      	beq.n	e554 <lfs_dir_commit+0x18>
                f->ctz.size > lfs->cfg->cache_size) {
    e582:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    e584:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
    e588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
    e58a:	429a      	cmp	r2, r3
    e58c:	d9e2      	bls.n	e554 <lfs_dir_commit+0x18>
            int err = lfs_file_outline(lfs, f);
    e58e:	4621      	mov	r1, r4
    e590:	4640      	mov	r0, r8
    e592:	f006 fece 	bl	15332 <lfs_file_outline>
            if (err) {
    e596:	4606      	mov	r6, r0
    e598:	2800      	cmp	r0, #0
    e59a:	f040 81e6 	bne.w	e96a <lfs_dir_commit+0x42e>
            err = lfs_file_flush(lfs, f);
    e59e:	4621      	mov	r1, r4
    e5a0:	4640      	mov	r0, r8
    e5a2:	f7ff fcb9 	bl	df18 <lfs_file_flush>
            if (err) {
    e5a6:	4606      	mov	r6, r0
    e5a8:	2800      	cmp	r0, #0
    e5aa:	d0d3      	beq.n	e554 <lfs_dir_commit+0x18>
    e5ac:	e1dd      	b.n	e96a <lfs_dir_commit+0x42e>
    lfs_mdir_t olddir = *dir;
    e5ae:	ac16      	add	r4, sp, #88	; 0x58
    e5b0:	462e      	mov	r6, r5
    e5b2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    e5b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    e5b6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    e5ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    for (int i = 0; i < attrcount; i++) {
    e5be:	2300      	movs	r3, #0
    bool hasdelete = false;
    e5c0:	461e      	mov	r6, r3
    for (int i = 0; i < attrcount; i++) {
    e5c2:	e003      	b.n	e5cc <lfs_dir_commit+0x90>
            dir->count += 1;
    e5c4:	8aaa      	ldrh	r2, [r5, #20]
    e5c6:	3201      	adds	r2, #1
    e5c8:	82aa      	strh	r2, [r5, #20]
    for (int i = 0; i < attrcount; i++) {
    e5ca:	3301      	adds	r3, #1
    e5cc:	454b      	cmp	r3, r9
    e5ce:	da26      	bge.n	e61e <lfs_dir_commit+0xe2>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
    e5d0:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
    e5d4:	eb07 04c3 	add.w	r4, r7, r3, lsl #3
    e5d8:	f857 2033 	ldr.w	r2, [r7, r3, lsl #3]
    return (tag & 0x7ff00000) >> 20;
    e5dc:	0d11      	lsrs	r1, r2, #20
    e5de:	f3c2 520a 	ubfx	r2, r2, #20, #11
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
    e5e2:	f240 4001 	movw	r0, #1025	; 0x401
    e5e6:	4282      	cmp	r2, r0
    e5e8:	d0ec      	beq.n	e5c4 <lfs_dir_commit+0x88>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
    e5ea:	f240 40ff 	movw	r0, #1279	; 0x4ff
    e5ee:	4282      	cmp	r2, r0
    e5f0:	d010      	beq.n	e614 <lfs_dir_commit+0xd8>
    return (tag & 0x70000000) >> 20;
    e5f2:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
    e5f6:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
    e5fa:	d1e6      	bne.n	e5ca <lfs_dir_commit+0x8e>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
    e5fc:	6862      	ldr	r2, [r4, #4]
    e5fe:	6812      	ldr	r2, [r2, #0]
    e600:	61aa      	str	r2, [r5, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
    e602:	6862      	ldr	r2, [r4, #4]
    e604:	6852      	ldr	r2, [r2, #4]
    e606:	61ea      	str	r2, [r5, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
    e608:	f857 200c 	ldr.w	r2, [r7, ip]
    e60c:	f3c2 5200 	ubfx	r2, r2, #20, #1
    e610:	75ea      	strb	r2, [r5, #23]
            lfs_pair_fromle32(dir->tail);
    e612:	e7da      	b.n	e5ca <lfs_dir_commit+0x8e>
            dir->count -= 1;
    e614:	8aaa      	ldrh	r2, [r5, #20]
    e616:	3a01      	subs	r2, #1
    e618:	82aa      	strh	r2, [r5, #20]
            hasdelete = true;
    e61a:	2601      	movs	r6, #1
    e61c:	e7d5      	b.n	e5ca <lfs_dir_commit+0x8e>
    if (hasdelete && dir->count == 0) {
    e61e:	b116      	cbz	r6, e626 <lfs_dir_commit+0xea>
    e620:	8aab      	ldrh	r3, [r5, #20]
    e622:	2b00      	cmp	r3, #0
    e624:	d03c      	beq.n	e6a0 <lfs_dir_commit+0x164>
    if (dir->erased || dir->count >= 0xff) {
    e626:	7dab      	ldrb	r3, [r5, #22]
    e628:	b91b      	cbnz	r3, e632 <lfs_dir_commit+0xf6>
    e62a:	8aab      	ldrh	r3, [r5, #20]
    e62c:	2bfe      	cmp	r3, #254	; 0xfe
    e62e:	f240 80f1 	bls.w	e814 <lfs_dir_commit+0x2d8>
            .block = dir->pair[0],
    e632:	682b      	ldr	r3, [r5, #0]
        struct lfs_commit commit = {
    e634:	930e      	str	r3, [sp, #56]	; 0x38
            .off = dir->off,
    e636:	68ea      	ldr	r2, [r5, #12]
        struct lfs_commit commit = {
    e638:	920f      	str	r2, [sp, #60]	; 0x3c
            .ptag = dir->etag,
    e63a:	692b      	ldr	r3, [r5, #16]
        struct lfs_commit commit = {
    e63c:	9310      	str	r3, [sp, #64]	; 0x40
    e63e:	f04f 31ff 	mov.w	r1, #4294967295
    e642:	9111      	str	r1, [sp, #68]	; 0x44
    e644:	9212      	str	r2, [sp, #72]	; 0x48
            .end = lfs->cfg->block_size - 8,
    e646:	f8d8 1068 	ldr.w	r1, [r8, #104]	; 0x68
    e64a:	69c9      	ldr	r1, [r1, #28]
    e64c:	3908      	subs	r1, #8
        struct lfs_commit commit = {
    e64e:	9113      	str	r1, [sp, #76]	; 0x4c
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
    e650:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
    e654:	a90e      	add	r1, sp, #56	; 0x38
    e656:	911f      	str	r1, [sp, #124]	; 0x7c
        int err = lfs_dir_traverse(lfs,
    e658:	a91e      	add	r1, sp, #120	; 0x78
    e65a:	9108      	str	r1, [sp, #32]
    e65c:	49b0      	ldr	r1, [pc, #704]	; (e920 <lfs_dir_commit+0x3e4>)
    e65e:	9107      	str	r1, [sp, #28]
    e660:	2100      	movs	r1, #0
    e662:	9106      	str	r1, [sp, #24]
    e664:	9105      	str	r1, [sp, #20]
    e666:	9104      	str	r1, [sp, #16]
    e668:	9103      	str	r1, [sp, #12]
    e66a:	9102      	str	r1, [sp, #8]
    e66c:	f8cd 9004 	str.w	r9, [sp, #4]
    e670:	9700      	str	r7, [sp, #0]
    e672:	4629      	mov	r1, r5
    e674:	4640      	mov	r0, r8
    e676:	f7fe fdc1 	bl	d1fc <lfs_dir_traverse>
        if (err) {
    e67a:	4606      	mov	r6, r0
    e67c:	2800      	cmp	r0, #0
    e67e:	d038      	beq.n	e6f2 <lfs_dir_commit+0x1b6>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
    e680:	f110 0f1c 	cmn.w	r0, #28
    e684:	f000 80c6 	beq.w	e814 <lfs_dir_commit+0x2d8>
    e688:	f110 0f54 	cmn.w	r0, #84	; 0x54
    e68c:	f000 80c2 	beq.w	e814 <lfs_dir_commit+0x2d8>
            *dir = olddir;
    e690:	ac16      	add	r4, sp, #88	; 0x58
    e692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    e694:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    e696:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    e69a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
    e69e:	e164      	b.n	e96a <lfs_dir_commit+0x42e>
        int err = lfs_fs_pred(lfs, dir->pair, &pdir);
    e6a0:	aa0e      	add	r2, sp, #56	; 0x38
    e6a2:	4629      	mov	r1, r5
    e6a4:	4640      	mov	r0, r8
    e6a6:	f006 f9d0 	bl	14a4a <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
    e6aa:	4606      	mov	r6, r0
    e6ac:	b150      	cbz	r0, e6c4 <lfs_dir_commit+0x188>
    e6ae:	f110 0f02 	cmn.w	r0, #2
    e6b2:	d007      	beq.n	e6c4 <lfs_dir_commit+0x188>
            *dir = olddir;
    e6b4:	ac16      	add	r4, sp, #88	; 0x58
    e6b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    e6b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    e6ba:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    e6be:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
    e6c2:	e152      	b.n	e96a <lfs_dir_commit+0x42e>
        if (err != LFS_ERR_NOENT && pdir.split) {
    e6c4:	f116 0f02 	cmn.w	r6, #2
    e6c8:	d0ad      	beq.n	e626 <lfs_dir_commit+0xea>
    e6ca:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
    e6ce:	2b00      	cmp	r3, #0
    e6d0:	d0a9      	beq.n	e626 <lfs_dir_commit+0xea>
            err = lfs_dir_drop(lfs, &pdir, dir);
    e6d2:	462a      	mov	r2, r5
    e6d4:	a90e      	add	r1, sp, #56	; 0x38
    e6d6:	4640      	mov	r0, r8
    e6d8:	f000 f94e 	bl	e978 <lfs_dir_drop>
            if (err) {
    e6dc:	4606      	mov	r6, r0
    e6de:	2800      	cmp	r0, #0
    e6e0:	d0a1      	beq.n	e626 <lfs_dir_commit+0xea>
                *dir = olddir;
    e6e2:	ac16      	add	r4, sp, #88	; 0x58
    e6e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    e6e6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    e6e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    e6ec:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                return err;
    e6f0:	e13b      	b.n	e96a <lfs_dir_commit+0x42e>
        lfs_gstate_t delta = {0};
    e6f2:	2300      	movs	r3, #0
    e6f4:	930b      	str	r3, [sp, #44]	; 0x2c
    e6f6:	930c      	str	r3, [sp, #48]	; 0x30
    e6f8:	930d      	str	r3, [sp, #52]	; 0x34
        lfs_gstate_xor(&delta, &lfs->gstate);
    e6fa:	f108 0430 	add.w	r4, r8, #48	; 0x30
    for (int i = 0; i < 3; i++) {
    e6fe:	4603      	mov	r3, r0
    e700:	e008      	b.n	e714 <lfs_dir_commit+0x1d8>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
    e702:	a90b      	add	r1, sp, #44	; 0x2c
    e704:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
    e708:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    e70c:	4042      	eors	r2, r0
    e70e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
    e712:	3301      	adds	r3, #1
    e714:	2b02      	cmp	r3, #2
    e716:	ddf4      	ble.n	e702 <lfs_dir_commit+0x1c6>
        lfs_gstate_xor(&delta, &lfs->gdisk);
    e718:	f108 043c 	add.w	r4, r8, #60	; 0x3c
    for (int i = 0; i < 3; i++) {
    e71c:	4633      	mov	r3, r6
    e71e:	e008      	b.n	e732 <lfs_dir_commit+0x1f6>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
    e720:	a90b      	add	r1, sp, #44	; 0x2c
    e722:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
    e726:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    e72a:	4042      	eors	r2, r0
    e72c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
    e730:	3301      	adds	r3, #1
    e732:	2b02      	cmp	r3, #2
    e734:	ddf4      	ble.n	e720 <lfs_dir_commit+0x1e4>
        lfs_gstate_xor(&delta, &lfs->gdelta);
    e736:	f108 0448 	add.w	r4, r8, #72	; 0x48
    for (int i = 0; i < 3; i++) {
    e73a:	4633      	mov	r3, r6
    e73c:	e008      	b.n	e750 <lfs_dir_commit+0x214>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
    e73e:	a90b      	add	r1, sp, #44	; 0x2c
    e740:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
    e744:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    e748:	4042      	eors	r2, r0
    e74a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
    e74e:	3301      	adds	r3, #1
    e750:	2b02      	cmp	r3, #2
    e752:	ddf4      	ble.n	e73e <lfs_dir_commit+0x202>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
    e754:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    e756:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
    e75a:	f023 0303 	bic.w	r3, r3, #3
    e75e:	930b      	str	r3, [sp, #44]	; 0x2c
    for (int i = 0; i < 3; i++) {
    e760:	2e02      	cmp	r6, #2
    e762:	dc07      	bgt.n	e774 <lfs_dir_commit+0x238>
        if (((uint32_t*)a)[i] != 0) {
    e764:	ab20      	add	r3, sp, #128	; 0x80
    e766:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    e76a:	f853 3c54 	ldr.w	r3, [r3, #-84]
    e76e:	b993      	cbnz	r3, e796 <lfs_dir_commit+0x25a>
    for (int i = 0; i < 3; i++) {
    e770:	3601      	adds	r6, #1
    e772:	e7f5      	b.n	e760 <lfs_dir_commit+0x224>
    return true;
    e774:	2301      	movs	r3, #1
        if (!lfs_gstate_iszero(&delta)) {
    e776:	bb33      	cbnz	r3, e7c6 <lfs_dir_commit+0x28a>
            err = lfs_dir_getgstate(lfs, dir, &delta);
    e778:	aa0b      	add	r2, sp, #44	; 0x2c
    e77a:	4629      	mov	r1, r5
    e77c:	4640      	mov	r0, r8
    e77e:	f7fe feed 	bl	d55c <lfs_dir_getgstate>
            if (err) {
    e782:	4606      	mov	r6, r0
    e784:	b148      	cbz	r0, e79a <lfs_dir_commit+0x25e>
                *dir = olddir;
    e786:	ac16      	add	r4, sp, #88	; 0x58
    e788:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    e78a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    e78c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    e790:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                return err;
    e794:	e0e9      	b.n	e96a <lfs_dir_commit+0x42e>
            return false;
    e796:	2300      	movs	r3, #0
    e798:	e7ed      	b.n	e776 <lfs_dir_commit+0x23a>
            err = lfs_dir_commitattr(lfs, &commit,
    e79a:	ab0b      	add	r3, sp, #44	; 0x2c
    e79c:	4a61      	ldr	r2, [pc, #388]	; (e924 <lfs_dir_commit+0x3e8>)
    e79e:	a90e      	add	r1, sp, #56	; 0x38
    e7a0:	4640      	mov	r0, r8
    e7a2:	f006 fae2 	bl	14d6a <lfs_dir_commitattr>
            if (err) {
    e7a6:	4606      	mov	r6, r0
    e7a8:	b168      	cbz	r0, e7c6 <lfs_dir_commit+0x28a>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
    e7aa:	f110 0f1c 	cmn.w	r0, #28
    e7ae:	d031      	beq.n	e814 <lfs_dir_commit+0x2d8>
    e7b0:	f110 0f54 	cmn.w	r0, #84	; 0x54
    e7b4:	d02e      	beq.n	e814 <lfs_dir_commit+0x2d8>
                *dir = olddir;
    e7b6:	ac16      	add	r4, sp, #88	; 0x58
    e7b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    e7ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    e7bc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    e7c0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                return err;
    e7c4:	e0d1      	b.n	e96a <lfs_dir_commit+0x42e>
        err = lfs_dir_commitcrc(lfs, &commit);
    e7c6:	a90e      	add	r1, sp, #56	; 0x38
    e7c8:	4640      	mov	r0, r8
    e7ca:	f006 fb40 	bl	14e4e <lfs_dir_commitcrc>
        if (err) {
    e7ce:	4606      	mov	r6, r0
    e7d0:	b168      	cbz	r0, e7ee <lfs_dir_commit+0x2b2>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
    e7d2:	f110 0f1c 	cmn.w	r0, #28
    e7d6:	d01d      	beq.n	e814 <lfs_dir_commit+0x2d8>
    e7d8:	f110 0f54 	cmn.w	r0, #84	; 0x54
    e7dc:	d01a      	beq.n	e814 <lfs_dir_commit+0x2d8>
            *dir = olddir;
    e7de:	ac16      	add	r4, sp, #88	; 0x58
    e7e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    e7e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    e7e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    e7e8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
    e7ec:	e0bd      	b.n	e96a <lfs_dir_commit+0x42e>
        dir->off = commit.off;
    e7ee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    e7f0:	60eb      	str	r3, [r5, #12]
        dir->etag = commit.ptag;
    e7f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
    e7f4:	612b      	str	r3, [r5, #16]
        lfs->gdisk = lfs->gstate;
    e7f6:	f108 033c 	add.w	r3, r8, #60	; 0x3c
    e7fa:	f108 0230 	add.w	r2, r8, #48	; 0x30
    e7fe:	ca07      	ldmia	r2, {r0, r1, r2}
    e800:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
    e804:	2200      	movs	r2, #0
    e806:	f8c8 2048 	str.w	r2, [r8, #72]	; 0x48
    e80a:	f8c8 204c 	str.w	r2, [r8, #76]	; 0x4c
    e80e:	f8c8 2050 	str.w	r2, [r8, #80]	; 0x50
    if (dir->erased || dir->count >= 0xff) {
    e812:	e010      	b.n	e836 <lfs_dir_commit+0x2fa>
    rcache->block = LFS_BLOCK_NULL;
    e814:	f04f 33ff 	mov.w	r3, #4294967295
    e818:	f8c8 3010 	str.w	r3, [r8, #16]
        int err = lfs_dir_compact(lfs, dir, attrs, attrcount,
    e81c:	8aab      	ldrh	r3, [r5, #20]
    e81e:	9302      	str	r3, [sp, #8]
    e820:	2300      	movs	r3, #0
    e822:	9301      	str	r3, [sp, #4]
    e824:	9500      	str	r5, [sp, #0]
    e826:	464b      	mov	r3, r9
    e828:	463a      	mov	r2, r7
    e82a:	4629      	mov	r1, r5
    e82c:	4640      	mov	r0, r8
    e82e:	f7ff fc8b 	bl	e148 <lfs_dir_compact>
        if (err) {
    e832:	4606      	mov	r6, r0
    e834:	b910      	cbnz	r0, e83c <lfs_dir_commit+0x300>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
    e836:	f8d8 c028 	ldr.w	ip, [r8, #40]	; 0x28
    e83a:	e04e      	b.n	e8da <lfs_dir_commit+0x39e>
            *dir = olddir;
    e83c:	ac16      	add	r4, sp, #88	; 0x58
    e83e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    e840:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    e842:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    e846:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
    e84a:	e08e      	b.n	e96a <lfs_dir_commit+0x42e>
                        d->id == lfs_tag_id(attrs[i].tag)) {
    e84c:	f8bc 2004 	ldrh.w	r2, [ip, #4]
    return (tag & 0x000ffc00) >> 10;
    e850:	f3c6 2389 	ubfx	r3, r6, #10, #10
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
    e854:	429a      	cmp	r2, r3
    e856:	d110      	bne.n	e87a <lfs_dir_commit+0x33e>
                    d->m.pair[0] = LFS_BLOCK_NULL;
    e858:	f04f 33ff 	mov.w	r3, #4294967295
    e85c:	f8cc 3008 	str.w	r3, [ip, #8]
                    d->m.pair[1] = LFS_BLOCK_NULL;
    e860:	f8cc 300c 	str.w	r3, [ip, #12]
            for (int i = 0; i < attrcount; i++) {
    e864:	3101      	adds	r1, #1
    e866:	4549      	cmp	r1, r9
    e868:	da35      	bge.n	e8d6 <lfs_dir_commit+0x39a>
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
    e86a:	f857 6031 	ldr.w	r6, [r7, r1, lsl #3]
    return (tag & 0x7ff00000) >> 20;
    e86e:	f3c6 540a 	ubfx	r4, r6, #20, #11
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
    e872:	f240 43ff 	movw	r3, #1279	; 0x4ff
    e876:	429c      	cmp	r4, r3
    e878:	d0e8      	beq.n	e84c <lfs_dir_commit+0x310>
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
    e87a:	f240 43ff 	movw	r3, #1279	; 0x4ff
    e87e:	429c      	cmp	r4, r3
    e880:	d016      	beq.n	e8b0 <lfs_dir_commit+0x374>
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
    e882:	f240 4301 	movw	r3, #1025	; 0x401
    e886:	429c      	cmp	r4, r3
    e888:	d1ec      	bne.n	e864 <lfs_dir_commit+0x328>
                        d->id >= lfs_tag_id(attrs[i].tag)) {
    e88a:	f8bc 3004 	ldrh.w	r3, [ip, #4]
    return (tag & 0x000ffc00) >> 10;
    e88e:	f3c6 2689 	ubfx	r6, r6, #10, #10
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
    e892:	42b3      	cmp	r3, r6
    e894:	d3e6      	bcc.n	e864 <lfs_dir_commit+0x328>
                    d->id += 1;
    e896:	3301      	adds	r3, #1
    e898:	f8ac 3004 	strh.w	r3, [ip, #4]
                    if (d->type == LFS_TYPE_DIR) {
    e89c:	f89c 3006 	ldrb.w	r3, [ip, #6]
    e8a0:	2b02      	cmp	r3, #2
    e8a2:	d1df      	bne.n	e864 <lfs_dir_commit+0x328>
                        ((lfs_dir_t*)d)->pos += 1;
    e8a4:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
    e8a8:	3301      	adds	r3, #1
    e8aa:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28
    e8ae:	e7d9      	b.n	e864 <lfs_dir_commit+0x328>
                        d->id > lfs_tag_id(attrs[i].tag)) {
    e8b0:	f8bc 3004 	ldrh.w	r3, [ip, #4]
    return (tag & 0x000ffc00) >> 10;
    e8b4:	f3c6 2289 	ubfx	r2, r6, #10, #10
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
    e8b8:	4293      	cmp	r3, r2
    e8ba:	d9e2      	bls.n	e882 <lfs_dir_commit+0x346>
                    d->id -= 1;
    e8bc:	3b01      	subs	r3, #1
    e8be:	f8ac 3004 	strh.w	r3, [ip, #4]
                    if (d->type == LFS_TYPE_DIR) {
    e8c2:	f89c 3006 	ldrb.w	r3, [ip, #6]
    e8c6:	2b02      	cmp	r3, #2
    e8c8:	d1cc      	bne.n	e864 <lfs_dir_commit+0x328>
                        ((lfs_dir_t*)d)->pos -= 1;
    e8ca:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
    e8ce:	3b01      	subs	r3, #1
    e8d0:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28
    e8d4:	e7c6      	b.n	e864 <lfs_dir_commit+0x328>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
    e8d6:	f8dc c000 	ldr.w	ip, [ip]
    e8da:	f1bc 0f00 	cmp.w	ip, #0
    e8de:	d01c      	beq.n	e91a <lfs_dir_commit+0x3de>
        if (&d->m != dir && lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
    e8e0:	f10c 0308 	add.w	r3, ip, #8
    e8e4:	42ab      	cmp	r3, r5
    e8e6:	d0f6      	beq.n	e8d6 <lfs_dir_commit+0x39a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    e8e8:	f8dc 3008 	ldr.w	r3, [ip, #8]
    e8ec:	9a16      	ldr	r2, [sp, #88]	; 0x58
    e8ee:	4293      	cmp	r3, r2
    e8f0:	d008      	beq.n	e904 <lfs_dir_commit+0x3c8>
    e8f2:	f8dc 000c 	ldr.w	r0, [ip, #12]
    e8f6:	9917      	ldr	r1, [sp, #92]	; 0x5c
    e8f8:	4288      	cmp	r0, r1
    e8fa:	d003      	beq.n	e904 <lfs_dir_commit+0x3c8>
    e8fc:	428b      	cmp	r3, r1
    e8fe:	d001      	beq.n	e904 <lfs_dir_commit+0x3c8>
    e900:	4282      	cmp	r2, r0
    e902:	d1e8      	bne.n	e8d6 <lfs_dir_commit+0x39a>
            d->m = *dir;
    e904:	f10c 0408 	add.w	r4, ip, #8
    e908:	462e      	mov	r6, r5
    e90a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    e90c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    e90e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    e912:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            for (int i = 0; i < attrcount; i++) {
    e916:	2100      	movs	r1, #0
    e918:	e7a5      	b.n	e866 <lfs_dir_commit+0x32a>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
    e91a:	f8d8 4028 	ldr.w	r4, [r8, #40]	; 0x28
    e91e:	e004      	b.n	e92a <lfs_dir_commit+0x3ee>
    e920:	00014e27 	.word	0x00014e27
    e924:	7ffffc0c 	.word	0x7ffffc0c
    e928:	6824      	ldr	r4, [r4, #0]
    e92a:	b314      	cbz	r4, e972 <lfs_dir_commit+0x436>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    e92c:	68a3      	ldr	r3, [r4, #8]
    e92e:	9a16      	ldr	r2, [sp, #88]	; 0x58
    e930:	4293      	cmp	r3, r2
    e932:	d007      	beq.n	e944 <lfs_dir_commit+0x408>
    e934:	68e0      	ldr	r0, [r4, #12]
    e936:	9917      	ldr	r1, [sp, #92]	; 0x5c
    e938:	4288      	cmp	r0, r1
    e93a:	d003      	beq.n	e944 <lfs_dir_commit+0x408>
    e93c:	428b      	cmp	r3, r1
    e93e:	d001      	beq.n	e944 <lfs_dir_commit+0x408>
    e940:	4282      	cmp	r2, r0
    e942:	d1f1      	bne.n	e928 <lfs_dir_commit+0x3ec>
            while (d->id >= d->m.count && d->m.split) {
    e944:	88a3      	ldrh	r3, [r4, #4]
    e946:	8ba2      	ldrh	r2, [r4, #28]
    e948:	4293      	cmp	r3, r2
    e94a:	d3ed      	bcc.n	e928 <lfs_dir_commit+0x3ec>
    e94c:	7fe1      	ldrb	r1, [r4, #31]
    e94e:	2900      	cmp	r1, #0
    e950:	d0ea      	beq.n	e928 <lfs_dir_commit+0x3ec>
                d->id -= d->m.count;
    e952:	1a9b      	subs	r3, r3, r2
    e954:	80a3      	strh	r3, [r4, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
    e956:	f104 0220 	add.w	r2, r4, #32
    e95a:	f104 0108 	add.w	r1, r4, #8
    e95e:	4640      	mov	r0, r8
    e960:	f006 f865 	bl	14a2e <lfs_dir_fetch>
                if (err) {
    e964:	4606      	mov	r6, r0
    e966:	2800      	cmp	r0, #0
    e968:	d0ec      	beq.n	e944 <lfs_dir_commit+0x408>
}
    e96a:	4630      	mov	r0, r6
    e96c:	b021      	add	sp, #132	; 0x84
    e96e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
    e972:	2600      	movs	r6, #0
    e974:	e7f9      	b.n	e96a <lfs_dir_commit+0x42e>
    e976:	bf00      	nop

0000e978 <lfs_dir_drop>:
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
    e978:	b570      	push	{r4, r5, r6, lr}
    e97a:	b082      	sub	sp, #8
    e97c:	4605      	mov	r5, r0
    e97e:	460e      	mov	r6, r1
    e980:	4614      	mov	r4, r2
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
    e982:	f100 0248 	add.w	r2, r0, #72	; 0x48
    e986:	4621      	mov	r1, r4
    e988:	f7fe fde8 	bl	d55c <lfs_dir_getgstate>
    if (err) {
    e98c:	b108      	cbz	r0, e992 <lfs_dir_drop+0x1a>
}
    e98e:	b002      	add	sp, #8
    e990:	bd70      	pop	{r4, r5, r6, pc}
    lfs_pair_tole32(tail->tail);
    e992:	f104 0118 	add.w	r1, r4, #24
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
    e996:	7de3      	ldrb	r3, [r4, #23]
    e998:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
    e99c:	4b05      	ldr	r3, [pc, #20]	; (e9b4 <lfs_dir_drop+0x3c>)
    e99e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    e9a2:	9300      	str	r3, [sp, #0]
    e9a4:	9101      	str	r1, [sp, #4]
    e9a6:	2301      	movs	r3, #1
    e9a8:	466a      	mov	r2, sp
    e9aa:	4631      	mov	r1, r6
    e9ac:	4628      	mov	r0, r5
    e9ae:	f7ff fdc5 	bl	e53c <lfs_dir_commit>
    if (err) {
    e9b2:	e7ec      	b.n	e98e <lfs_dir_drop+0x16>
    e9b4:	000ffc08 	.word	0x000ffc08

0000e9b8 <lfs_fs_deorphan>:
static int lfs_fs_deorphan(lfs_t *lfs) {
    e9b8:	b570      	push	{r4, r5, r6, lr}
    e9ba:	b09e      	sub	sp, #120	; 0x78
    return lfs_tag_size(a->tag);
    e9bc:	6b03      	ldr	r3, [r0, #48]	; 0x30
    return tag & 0x000003ff;
    e9be:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
    e9c2:	2b00      	cmp	r3, #0
    e9c4:	d07d      	beq.n	eac2 <lfs_fs_deorphan+0x10a>
    e9c6:	4606      	mov	r6, r0
    lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
    e9c8:	2300      	movs	r3, #0
    e9ca:	9314      	str	r3, [sp, #80]	; 0x50
    e9cc:	9315      	str	r3, [sp, #84]	; 0x54
    e9ce:	9316      	str	r3, [sp, #88]	; 0x58
    e9d0:	9317      	str	r3, [sp, #92]	; 0x5c
    e9d2:	9318      	str	r3, [sp, #96]	; 0x60
    e9d4:	9319      	str	r3, [sp, #100]	; 0x64
    e9d6:	931a      	str	r3, [sp, #104]	; 0x68
    e9d8:	2301      	movs	r3, #1
    e9da:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    e9de:	931b      	str	r3, [sp, #108]	; 0x6c
    while (!lfs_pair_isnull(pdir.tail)) {
    e9e0:	e05c      	b.n	ea9c <lfs_fs_deorphan+0xe4>
            lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
    e9e2:	aa04      	add	r2, sp, #16
    e9e4:	a91a      	add	r1, sp, #104	; 0x68
    e9e6:	4630      	mov	r0, r6
    e9e8:	f7fe fbc2 	bl	d170 <lfs_fs_parent>
            if (tag < 0 && tag != LFS_ERR_NOENT) {
    e9ec:	1e03      	subs	r3, r0, #0
    e9ee:	db23      	blt.n	ea38 <lfs_fs_deorphan+0x80>
            if (tag == LFS_ERR_NOENT) {
    e9f0:	f113 0f02 	cmn.w	r3, #2
    e9f4:	d025      	beq.n	ea42 <lfs_fs_deorphan+0x8a>
            lfs_stag_t res = lfs_dir_get(lfs, &parent,
    e9f6:	aa02      	add	r2, sp, #8
    e9f8:	9200      	str	r2, [sp, #0]
    e9fa:	4a34      	ldr	r2, [pc, #208]	; (eacc <lfs_fs_deorphan+0x114>)
    e9fc:	a904      	add	r1, sp, #16
    e9fe:	4630      	mov	r0, r6
    ea00:	f006 f861 	bl	14ac6 <lfs_dir_get>
            if (res < 0) {
    ea04:	2800      	cmp	r0, #0
    ea06:	db30      	blt.n	ea6a <lfs_fs_deorphan+0xb2>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
    ea08:	9b02      	ldr	r3, [sp, #8]
    ea0a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    ea0c:	4293      	cmp	r3, r2
    ea0e:	d021      	beq.n	ea54 <lfs_fs_deorphan+0x9c>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
    ea10:	991b      	ldr	r1, [sp, #108]	; 0x6c
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
    ea12:	4299      	cmp	r1, r3
    ea14:	d024      	beq.n	ea60 <lfs_fs_deorphan+0xa8>
            if (!lfs_pair_sync(pair, pdir.tail)) {
    ea16:	f014 0f01 	tst.w	r4, #1
    ea1a:	d137      	bne.n	ea8c <lfs_fs_deorphan+0xd4>
                err = lfs_dir_commit(lfs, &pdir, LFS_MKATTRS(
    ea1c:	4b2c      	ldr	r3, [pc, #176]	; (ead0 <lfs_fs_deorphan+0x118>)
    ea1e:	931c      	str	r3, [sp, #112]	; 0x70
    ea20:	ab02      	add	r3, sp, #8
    ea22:	931d      	str	r3, [sp, #116]	; 0x74
    ea24:	2301      	movs	r3, #1
    ea26:	aa1c      	add	r2, sp, #112	; 0x70
    ea28:	a914      	add	r1, sp, #80	; 0x50
    ea2a:	4630      	mov	r0, r6
    ea2c:	f7ff fd86 	bl	e53c <lfs_dir_commit>
                if (err) {
    ea30:	4604      	mov	r4, r0
    ea32:	2800      	cmp	r0, #0
    ea34:	d146      	bne.n	eac4 <lfs_fs_deorphan+0x10c>
    ea36:	e031      	b.n	ea9c <lfs_fs_deorphan+0xe4>
            if (tag < 0 && tag != LFS_ERR_NOENT) {
    ea38:	f113 0f02 	cmn.w	r3, #2
    ea3c:	d0d8      	beq.n	e9f0 <lfs_fs_deorphan+0x38>
                return tag;
    ea3e:	461c      	mov	r4, r3
    ea40:	e040      	b.n	eac4 <lfs_fs_deorphan+0x10c>
                err = lfs_dir_drop(lfs, &pdir, &dir);
    ea42:	aa0c      	add	r2, sp, #48	; 0x30
    ea44:	a914      	add	r1, sp, #80	; 0x50
    ea46:	4630      	mov	r0, r6
    ea48:	f7ff ff96 	bl	e978 <lfs_dir_drop>
                if (err) {
    ea4c:	4604      	mov	r4, r0
    ea4e:	2800      	cmp	r0, #0
    ea50:	d138      	bne.n	eac4 <lfs_fs_deorphan+0x10c>
    ea52:	e023      	b.n	ea9c <lfs_fs_deorphan+0xe4>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
    ea54:	9803      	ldr	r0, [sp, #12]
    ea56:	991b      	ldr	r1, [sp, #108]	; 0x6c
    ea58:	4288      	cmp	r0, r1
    ea5a:	d1d9      	bne.n	ea10 <lfs_fs_deorphan+0x58>
    ea5c:	2401      	movs	r4, #1
    ea5e:	e7da      	b.n	ea16 <lfs_fs_deorphan+0x5e>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
    ea60:	9b03      	ldr	r3, [sp, #12]
    ea62:	4293      	cmp	r3, r2
    ea64:	d1d7      	bne.n	ea16 <lfs_fs_deorphan+0x5e>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
    ea66:	2401      	movs	r4, #1
    ea68:	e7d5      	b.n	ea16 <lfs_fs_deorphan+0x5e>
                return res;
    ea6a:	4604      	mov	r4, r0
    ea6c:	e02a      	b.n	eac4 <lfs_fs_deorphan+0x10c>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    ea6e:	2301      	movs	r3, #1
    ea70:	e000      	b.n	ea74 <lfs_fs_deorphan+0xbc>
    ea72:	2301      	movs	r3, #1
    while (!lfs_pair_isnull(pdir.tail)) {
    ea74:	b9e3      	cbnz	r3, eab0 <lfs_fs_deorphan+0xf8>
        int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
    ea76:	aa1a      	add	r2, sp, #104	; 0x68
    ea78:	a90c      	add	r1, sp, #48	; 0x30
    ea7a:	4630      	mov	r0, r6
    ea7c:	f005 ffd7 	bl	14a2e <lfs_dir_fetch>
        if (err) {
    ea80:	4604      	mov	r4, r0
    ea82:	b9f8      	cbnz	r0, eac4 <lfs_fs_deorphan+0x10c>
        if (!pdir.split) {
    ea84:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    ea88:	2b00      	cmp	r3, #0
    ea8a:	d0aa      	beq.n	e9e2 <lfs_fs_deorphan+0x2a>
        pdir = dir;
    ea8c:	ac14      	add	r4, sp, #80	; 0x50
    ea8e:	ad0c      	add	r5, sp, #48	; 0x30
    ea90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    ea92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    ea94:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    ea98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    ea9c:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    ea9e:	f1b3 3fff 	cmp.w	r3, #4294967295
    eaa2:	d0e6      	beq.n	ea72 <lfs_fs_deorphan+0xba>
    eaa4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    eaa6:	f1b3 3fff 	cmp.w	r3, #4294967295
    eaaa:	d0e0      	beq.n	ea6e <lfs_fs_deorphan+0xb6>
    eaac:	2300      	movs	r3, #0
    eaae:	e7e1      	b.n	ea74 <lfs_fs_deorphan+0xbc>
    return lfs_tag_size(a->tag);
    eab0:	f896 1030 	ldrb.w	r1, [r6, #48]	; 0x30
    lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
    eab4:	4249      	negs	r1, r1
    eab6:	b249      	sxtb	r1, r1
    eab8:	4630      	mov	r0, r6
    eaba:	f005 fe5e 	bl	1477a <lfs_fs_preporphans>
    return 0;
    eabe:	2400      	movs	r4, #0
    eac0:	e000      	b.n	eac4 <lfs_fs_deorphan+0x10c>
        return 0;
    eac2:	2400      	movs	r4, #0
}
    eac4:	4620      	mov	r0, r4
    eac6:	b01e      	add	sp, #120	; 0x78
    eac8:	bd70      	pop	{r4, r5, r6, pc}
    eaca:	bf00      	nop
    eacc:	7ffffc00 	.word	0x7ffffc00
    ead0:	600ffc08 	.word	0x600ffc08

0000ead4 <lfs_mkdir>:
int lfs_mkdir(lfs_t *lfs, const char *path) {
    ead4:	b5f0      	push	{r4, r5, r6, r7, lr}
    ead6:	b0ab      	sub	sp, #172	; 0xac
    ead8:	4604      	mov	r4, r0
    eada:	9101      	str	r1, [sp, #4]
    int err = lfs_fs_forceconsistency(lfs);
    eadc:	f006 fe74 	bl	157c8 <lfs_fs_forceconsistency>
    if (err) {
    eae0:	4603      	mov	r3, r0
    eae2:	b110      	cbz	r0, eaea <lfs_mkdir+0x16>
}
    eae4:	4618      	mov	r0, r3
    eae6:	b02b      	add	sp, #172	; 0xac
    eae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cwd.next = lfs->mlist;
    eaea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    eaec:	931c      	str	r3, [sp, #112]	; 0x70
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
    eaee:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
    eaf2:	aa01      	add	r2, sp, #4
    eaf4:	a91e      	add	r1, sp, #120	; 0x78
    eaf6:	4620      	mov	r0, r4
    eaf8:	f7fe fd5a 	bl	d5b0 <lfs_dir_find>
    eafc:	4603      	mov	r3, r0
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
    eafe:	f110 0f02 	cmn.w	r0, #2
    eb02:	d12a      	bne.n	eb5a <lfs_mkdir+0x86>
    eb04:	f8bd 106e 	ldrh.w	r1, [sp, #110]	; 0x6e
    eb08:	f240 32ff 	movw	r2, #1023	; 0x3ff
    eb0c:	4291      	cmp	r1, r2
    eb0e:	d024      	beq.n	eb5a <lfs_mkdir+0x86>
    lfs_size_t nlen = strlen(path);
    eb10:	9801      	ldr	r0, [sp, #4]
    eb12:	f004 fb1f 	bl	13154 <strlen>
    eb16:	4607      	mov	r7, r0
    if (nlen > lfs->name_max) {
    eb18:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    eb1a:	4283      	cmp	r3, r0
    eb1c:	d37c      	bcc.n	ec18 <lfs_mkdir+0x144>
    lfs_alloc_ack(lfs);
    eb1e:	4620      	mov	r0, r4
    eb20:	f005 fe0a 	bl	14738 <lfs_alloc_ack>
    err = lfs_dir_alloc(lfs, &dir);
    eb24:	a913      	add	r1, sp, #76	; 0x4c
    eb26:	4620      	mov	r0, r4
    eb28:	f006 fbc8 	bl	152bc <lfs_dir_alloc>
    if (err) {
    eb2c:	4603      	mov	r3, r0
    eb2e:	2800      	cmp	r0, #0
    eb30:	d1d8      	bne.n	eae4 <lfs_mkdir+0x10>
    lfs_mdir_t pred = cwd.m;
    eb32:	ad0b      	add	r5, sp, #44	; 0x2c
    eb34:	ae1e      	add	r6, sp, #120	; 0x78
    eb36:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    eb38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    eb3a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    eb3e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    while (pred.split) {
    eb42:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    eb46:	b16b      	cbz	r3, eb64 <lfs_mkdir+0x90>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
    eb48:	aa11      	add	r2, sp, #68	; 0x44
    eb4a:	a90b      	add	r1, sp, #44	; 0x2c
    eb4c:	4620      	mov	r0, r4
    eb4e:	f005 ff6e 	bl	14a2e <lfs_dir_fetch>
        if (err) {
    eb52:	4603      	mov	r3, r0
    eb54:	2800      	cmp	r0, #0
    eb56:	d0f4      	beq.n	eb42 <lfs_mkdir+0x6e>
    eb58:	e7c4      	b.n	eae4 <lfs_mkdir+0x10>
        return (err < 0) ? err : LFS_ERR_EXIST;
    eb5a:	2b00      	cmp	r3, #0
    eb5c:	dbc2      	blt.n	eae4 <lfs_mkdir+0x10>
    eb5e:	f06f 0310 	mvn.w	r3, #16
    eb62:	e7bf      	b.n	eae4 <lfs_mkdir+0x10>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
    eb64:	4b2e      	ldr	r3, [pc, #184]	; (ec20 <lfs_mkdir+0x14c>)
    eb66:	9326      	str	r3, [sp, #152]	; 0x98
    eb68:	ab11      	add	r3, sp, #68	; 0x44
    eb6a:	9327      	str	r3, [sp, #156]	; 0x9c
    eb6c:	2301      	movs	r3, #1
    eb6e:	aa26      	add	r2, sp, #152	; 0x98
    eb70:	a913      	add	r1, sp, #76	; 0x4c
    eb72:	4620      	mov	r0, r4
    eb74:	f7ff fce2 	bl	e53c <lfs_dir_commit>
    if (err) {
    eb78:	4603      	mov	r3, r0
    eb7a:	2800      	cmp	r0, #0
    eb7c:	d1b2      	bne.n	eae4 <lfs_mkdir+0x10>
    if (cwd.m.split) {
    eb7e:	f89d 308f 	ldrb.w	r3, [sp, #143]	; 0x8f
    eb82:	bb2b      	cbnz	r3, ebd0 <lfs_mkdir+0xfc>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
    eb84:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
    eb88:	029b      	lsls	r3, r3, #10
    eb8a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    eb8e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    eb92:	9203      	str	r2, [sp, #12]
    eb94:	2200      	movs	r2, #0
    eb96:	9204      	str	r2, [sp, #16]
    eb98:	431f      	orrs	r7, r3
    eb9a:	f447 1700 	orr.w	r7, r7, #2097152	; 0x200000
    eb9e:	9705      	str	r7, [sp, #20]
    eba0:	9a01      	ldr	r2, [sp, #4]
    eba2:	9206      	str	r2, [sp, #24]
    eba4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    eba8:	f043 0308 	orr.w	r3, r3, #8
    ebac:	9307      	str	r3, [sp, #28]
    ebae:	ab13      	add	r3, sp, #76	; 0x4c
    ebb0:	9308      	str	r3, [sp, #32]
    ebb2:	f89d 308f 	ldrb.w	r3, [sp, #143]	; 0x8f
    ebb6:	bb6b      	cbnz	r3, ec14 <lfs_mkdir+0x140>
    ebb8:	4b19      	ldr	r3, [pc, #100]	; (ec20 <lfs_mkdir+0x14c>)
    ebba:	9309      	str	r3, [sp, #36]	; 0x24
    ebbc:	ab13      	add	r3, sp, #76	; 0x4c
    ebbe:	930a      	str	r3, [sp, #40]	; 0x28
    ebc0:	2304      	movs	r3, #4
    ebc2:	aa03      	add	r2, sp, #12
    ebc4:	a91e      	add	r1, sp, #120	; 0x78
    ebc6:	4620      	mov	r0, r4
    ebc8:	f7ff fcb8 	bl	e53c <lfs_dir_commit>
    ebcc:	4603      	mov	r3, r0
    if (err) {
    ebce:	e789      	b.n	eae4 <lfs_mkdir+0x10>
        lfs_fs_preporphans(lfs, +1);
    ebd0:	2101      	movs	r1, #1
    ebd2:	4620      	mov	r0, r4
    ebd4:	f005 fdd1 	bl	1477a <lfs_fs_preporphans>
        cwd.type = 0;
    ebd8:	2300      	movs	r3, #0
    ebda:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
        cwd.id = 0;
    ebde:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
        lfs->mlist = &cwd;
    ebe2:	ab1c      	add	r3, sp, #112	; 0x70
    ebe4:	62a3      	str	r3, [r4, #40]	; 0x28
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
    ebe6:	4b0e      	ldr	r3, [pc, #56]	; (ec20 <lfs_mkdir+0x14c>)
    ebe8:	9328      	str	r3, [sp, #160]	; 0xa0
    ebea:	ab13      	add	r3, sp, #76	; 0x4c
    ebec:	9329      	str	r3, [sp, #164]	; 0xa4
    ebee:	2301      	movs	r3, #1
    ebf0:	aa28      	add	r2, sp, #160	; 0xa0
    ebf2:	a90b      	add	r1, sp, #44	; 0x2c
    ebf4:	4620      	mov	r0, r4
    ebf6:	f7ff fca1 	bl	e53c <lfs_dir_commit>
        if (err) {
    ebfa:	4603      	mov	r3, r0
    ebfc:	b110      	cbz	r0, ec04 <lfs_mkdir+0x130>
            lfs->mlist = cwd.next;
    ebfe:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    ec00:	62a2      	str	r2, [r4, #40]	; 0x28
            return err;
    ec02:	e76f      	b.n	eae4 <lfs_mkdir+0x10>
        lfs->mlist = cwd.next;
    ec04:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    ec06:	62a3      	str	r3, [r4, #40]	; 0x28
        lfs_fs_preporphans(lfs, -1);
    ec08:	f04f 31ff 	mov.w	r1, #4294967295
    ec0c:	4620      	mov	r0, r4
    ec0e:	f005 fdb4 	bl	1477a <lfs_fs_preporphans>
    ec12:	e7b7      	b.n	eb84 <lfs_mkdir+0xb0>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
    ec14:	2300      	movs	r3, #0
    ec16:	e7d0      	b.n	ebba <lfs_mkdir+0xe6>
        return LFS_ERR_NAMETOOLONG;
    ec18:	f06f 0323 	mvn.w	r3, #35	; 0x23
    ec1c:	e762      	b.n	eae4 <lfs_mkdir+0x10>
    ec1e:	bf00      	nop
    ec20:	600ffc08 	.word	0x600ffc08

0000ec24 <lfs_fs_relocate>:
        const lfs_block_t oldpair[2], lfs_block_t newpair[2]) {
    ec24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ec28:	b090      	sub	sp, #64	; 0x40
    ec2a:	4607      	mov	r7, r0
    ec2c:	460c      	mov	r4, r1
    ec2e:	4615      	mov	r5, r2
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    ec30:	680b      	ldr	r3, [r1, #0]
    ec32:	6a02      	ldr	r2, [r0, #32]
    ec34:	4293      	cmp	r3, r2
    ec36:	d007      	beq.n	ec48 <lfs_fs_relocate+0x24>
    ec38:	6848      	ldr	r0, [r1, #4]
    ec3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ec3c:	4281      	cmp	r1, r0
    ec3e:	d003      	beq.n	ec48 <lfs_fs_relocate+0x24>
    ec40:	428b      	cmp	r3, r1
    ec42:	d001      	beq.n	ec48 <lfs_fs_relocate+0x24>
    ec44:	4282      	cmp	r2, r0
    ec46:	d103      	bne.n	ec50 <lfs_fs_relocate+0x2c>
        lfs->root[0] = newpair[0];
    ec48:	682b      	ldr	r3, [r5, #0]
    ec4a:	623b      	str	r3, [r7, #32]
        lfs->root[1] = newpair[1];
    ec4c:	686b      	ldr	r3, [r5, #4]
    ec4e:	627b      	str	r3, [r7, #36]	; 0x24
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
    ec50:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ec52:	e007      	b.n	ec64 <lfs_fs_relocate+0x40>
            d->m.pair[0] = newpair[0];
    ec54:	682a      	ldr	r2, [r5, #0]
    ec56:	609a      	str	r2, [r3, #8]
            d->m.pair[1] = newpair[1];
    ec58:	686a      	ldr	r2, [r5, #4]
    ec5a:	60da      	str	r2, [r3, #12]
        if (d->type == LFS_TYPE_DIR &&
    ec5c:	799a      	ldrb	r2, [r3, #6]
    ec5e:	2a02      	cmp	r2, #2
    ec60:	d00e      	beq.n	ec80 <lfs_fs_relocate+0x5c>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
    ec62:	681b      	ldr	r3, [r3, #0]
    ec64:	b1eb      	cbz	r3, eca2 <lfs_fs_relocate+0x7e>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    ec66:	6822      	ldr	r2, [r4, #0]
    ec68:	6899      	ldr	r1, [r3, #8]
    ec6a:	4291      	cmp	r1, r2
    ec6c:	d0f2      	beq.n	ec54 <lfs_fs_relocate+0x30>
    ec6e:	6860      	ldr	r0, [r4, #4]
    ec70:	68de      	ldr	r6, [r3, #12]
    ec72:	42b0      	cmp	r0, r6
    ec74:	d0ee      	beq.n	ec54 <lfs_fs_relocate+0x30>
    ec76:	42b2      	cmp	r2, r6
    ec78:	d0ec      	beq.n	ec54 <lfs_fs_relocate+0x30>
    ec7a:	4281      	cmp	r1, r0
    ec7c:	d1ee      	bne.n	ec5c <lfs_fs_relocate+0x38>
    ec7e:	e7e9      	b.n	ec54 <lfs_fs_relocate+0x30>
    ec80:	6822      	ldr	r2, [r4, #0]
    ec82:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    ec84:	428a      	cmp	r2, r1
    ec86:	d007      	beq.n	ec98 <lfs_fs_relocate+0x74>
    ec88:	6866      	ldr	r6, [r4, #4]
    ec8a:	6b18      	ldr	r0, [r3, #48]	; 0x30
    ec8c:	42b0      	cmp	r0, r6
    ec8e:	d003      	beq.n	ec98 <lfs_fs_relocate+0x74>
    ec90:	4282      	cmp	r2, r0
    ec92:	d001      	beq.n	ec98 <lfs_fs_relocate+0x74>
    ec94:	428e      	cmp	r6, r1
    ec96:	d1e4      	bne.n	ec62 <lfs_fs_relocate+0x3e>
            ((lfs_dir_t*)d)->head[0] = newpair[0];
    ec98:	682a      	ldr	r2, [r5, #0]
    ec9a:	62da      	str	r2, [r3, #44]	; 0x2c
            ((lfs_dir_t*)d)->head[1] = newpair[1];
    ec9c:	686a      	ldr	r2, [r5, #4]
    ec9e:	631a      	str	r2, [r3, #48]	; 0x30
    eca0:	e7df      	b.n	ec62 <lfs_fs_relocate+0x3e>
    lfs_stag_t tag = lfs_fs_parent(lfs, oldpair, &parent);
    eca2:	466a      	mov	r2, sp
    eca4:	4621      	mov	r1, r4
    eca6:	4638      	mov	r0, r7
    eca8:	f7fe fa62 	bl	d170 <lfs_fs_parent>
    if (tag < 0 && tag != LFS_ERR_NOENT) {
    ecac:	1e06      	subs	r6, r0, #0
    ecae:	db1a      	blt.n	ece6 <lfs_fs_relocate+0xc2>
    if (tag != LFS_ERR_NOENT) {
    ecb0:	f116 0f02 	cmn.w	r6, #2
    ecb4:	d058      	beq.n	ed68 <lfs_fs_relocate+0x144>
        lfs_fs_preporphans(lfs, +1);
    ecb6:	2101      	movs	r1, #1
    ecb8:	4638      	mov	r0, r7
    ecba:	f005 fd5e 	bl	1477a <lfs_fs_preporphans>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    ecbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
    ecc0:	0d1a      	lsrs	r2, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    ecc2:	f412 6fe0 	tst.w	r2, #1792	; 0x700
    ecc6:	d014      	beq.n	ecf2 <lfs_fs_relocate+0xce>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    ecc8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    ecca:	9900      	ldr	r1, [sp, #0]
    eccc:	428a      	cmp	r2, r1
    ecce:	d02f      	beq.n	ed30 <lfs_fs_relocate+0x10c>
    ecd0:	f8d7 c038 	ldr.w	ip, [r7, #56]	; 0x38
    ecd4:	9801      	ldr	r0, [sp, #4]
    ecd6:	4584      	cmp	ip, r0
    ecd8:	d02c      	beq.n	ed34 <lfs_fs_relocate+0x110>
    ecda:	4282      	cmp	r2, r0
    ecdc:	d02c      	beq.n	ed38 <lfs_fs_relocate+0x114>
    ecde:	4561      	cmp	r1, ip
    ece0:	d005      	beq.n	ecee <lfs_fs_relocate+0xca>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    ece2:	2200      	movs	r2, #0
    ece4:	e006      	b.n	ecf4 <lfs_fs_relocate+0xd0>
    if (tag < 0 && tag != LFS_ERR_NOENT) {
    ece6:	f116 0f02 	cmn.w	r6, #2
    ecea:	d11d      	bne.n	ed28 <lfs_fs_relocate+0x104>
    ecec:	e7e0      	b.n	ecb0 <lfs_fs_relocate+0x8c>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    ecee:	2201      	movs	r2, #1
    ecf0:	e000      	b.n	ecf4 <lfs_fs_relocate+0xd0>
    ecf2:	2200      	movs	r2, #0
        if (lfs_gstate_hasmovehere(&lfs->gstate, parent.pair)) {
    ecf4:	bb12      	cbnz	r2, ed3c <lfs_fs_relocate+0x118>
        uint16_t moveid = 0x3ff;
    ecf6:	f240 38ff 	movw	r8, #1023	; 0x3ff
        int err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
    ecfa:	2300      	movs	r3, #0
    ecfc:	9309      	str	r3, [sp, #36]	; 0x24
    ecfe:	f240 33ff 	movw	r3, #1023	; 0x3ff
    ed02:	4598      	cmp	r8, r3
    ed04:	d029      	beq.n	ed5a <lfs_fs_relocate+0x136>
    ed06:	ea4f 2388 	mov.w	r3, r8, lsl #10
    ed0a:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
    ed0e:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    ed12:	9308      	str	r3, [sp, #32]
    ed14:	960a      	str	r6, [sp, #40]	; 0x28
    ed16:	950b      	str	r5, [sp, #44]	; 0x2c
    ed18:	2302      	movs	r3, #2
    ed1a:	aa08      	add	r2, sp, #32
    ed1c:	4669      	mov	r1, sp
    ed1e:	4638      	mov	r0, r7
    ed20:	f7ff fc0c 	bl	e53c <lfs_dir_commit>
        if (err) {
    ed24:	4606      	mov	r6, r0
    ed26:	b1d0      	cbz	r0, ed5e <lfs_fs_relocate+0x13a>
}
    ed28:	4630      	mov	r0, r6
    ed2a:	b010      	add	sp, #64	; 0x40
    ed2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    ed30:	2201      	movs	r2, #1
    ed32:	e7df      	b.n	ecf4 <lfs_fs_relocate+0xd0>
    ed34:	2201      	movs	r2, #1
    ed36:	e7dd      	b.n	ecf4 <lfs_fs_relocate+0xd0>
    ed38:	2201      	movs	r2, #1
    ed3a:	e7db      	b.n	ecf4 <lfs_fs_relocate+0xd0>
    return (tag & 0x000ffc00) >> 10;
    ed3c:	f3c3 2889 	ubfx	r8, r3, #10, #10
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
    ed40:	2200      	movs	r2, #0
    ed42:	f240 31ff 	movw	r1, #1023	; 0x3ff
    ed46:	4638      	mov	r0, r7
    ed48:	f7fd ff40 	bl	cbcc <lfs_fs_prepmove>
    return (tag & 0x000ffc00) >> 10;
    ed4c:	f3c6 2389 	ubfx	r3, r6, #10, #10
            if (moveid < lfs_tag_id(tag)) {
    ed50:	4598      	cmp	r8, r3
    ed52:	d2d2      	bcs.n	ecfa <lfs_fs_relocate+0xd6>
                tag -= LFS_MKTAG(0, 1, 0);
    ed54:	f5a6 6680 	sub.w	r6, r6, #1024	; 0x400
    ed58:	e7cf      	b.n	ecfa <lfs_fs_relocate+0xd6>
        int err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
    ed5a:	2300      	movs	r3, #0
    ed5c:	e7d9      	b.n	ed12 <lfs_fs_relocate+0xee>
        lfs_fs_preporphans(lfs, -1);
    ed5e:	f04f 31ff 	mov.w	r1, #4294967295
    ed62:	4638      	mov	r0, r7
    ed64:	f005 fd09 	bl	1477a <lfs_fs_preporphans>
    int err = lfs_fs_pred(lfs, oldpair, &parent);
    ed68:	466a      	mov	r2, sp
    ed6a:	4621      	mov	r1, r4
    ed6c:	4638      	mov	r0, r7
    ed6e:	f005 fe6c 	bl	14a4a <lfs_fs_pred>
    if (err && err != LFS_ERR_NOENT) {
    ed72:	4606      	mov	r6, r0
    ed74:	b110      	cbz	r0, ed7c <lfs_fs_relocate+0x158>
    ed76:	f110 0f02 	cmn.w	r0, #2
    ed7a:	d1d5      	bne.n	ed28 <lfs_fs_relocate+0x104>
    if (err != LFS_ERR_NOENT) {
    ed7c:	f116 0f02 	cmn.w	r6, #2
    ed80:	d046      	beq.n	ee10 <lfs_fs_relocate+0x1ec>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    ed82:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
    ed84:	0d23      	lsrs	r3, r4, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    ed86:	f413 6fe0 	tst.w	r3, #1792	; 0x700
    ed8a:	d00f      	beq.n	edac <lfs_fs_relocate+0x188>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    ed8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ed8e:	9a00      	ldr	r2, [sp, #0]
    ed90:	4293      	cmp	r3, r2
    ed92:	d02c      	beq.n	edee <lfs_fs_relocate+0x1ca>
    ed94:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    ed96:	9901      	ldr	r1, [sp, #4]
    ed98:	4281      	cmp	r1, r0
    ed9a:	d02a      	beq.n	edf2 <lfs_fs_relocate+0x1ce>
    ed9c:	4299      	cmp	r1, r3
    ed9e:	d02a      	beq.n	edf6 <lfs_fs_relocate+0x1d2>
    eda0:	4290      	cmp	r0, r2
    eda2:	d001      	beq.n	eda8 <lfs_fs_relocate+0x184>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    eda4:	2300      	movs	r3, #0
    eda6:	e002      	b.n	edae <lfs_fs_relocate+0x18a>
    eda8:	2301      	movs	r3, #1
    edaa:	e000      	b.n	edae <lfs_fs_relocate+0x18a>
    edac:	2300      	movs	r3, #0
        if (lfs_gstate_hasmovehere(&lfs->gstate, parent.pair)) {
    edae:	bb23      	cbnz	r3, edfa <lfs_fs_relocate+0x1d6>
        uint16_t moveid = 0x3ff;
    edb0:	f240 34ff 	movw	r4, #1023	; 0x3ff
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
    edb4:	2300      	movs	r3, #0
    edb6:	930d      	str	r3, [sp, #52]	; 0x34
    edb8:	f240 33ff 	movw	r3, #1023	; 0x3ff
    edbc:	429c      	cmp	r4, r3
    edbe:	d025      	beq.n	ee0c <lfs_fs_relocate+0x1e8>
    edc0:	02a3      	lsls	r3, r4, #10
    edc2:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
    edc6:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    edca:	930c      	str	r3, [sp, #48]	; 0x30
    edcc:	f89d 3017 	ldrb.w	r3, [sp, #23]
    edd0:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
    edd4:	4b0f      	ldr	r3, [pc, #60]	; (ee14 <lfs_fs_relocate+0x1f0>)
    edd6:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    edda:	930e      	str	r3, [sp, #56]	; 0x38
    eddc:	950f      	str	r5, [sp, #60]	; 0x3c
    edde:	2302      	movs	r3, #2
    ede0:	aa0c      	add	r2, sp, #48	; 0x30
    ede2:	4669      	mov	r1, sp
    ede4:	4638      	mov	r0, r7
    ede6:	f7ff fba9 	bl	e53c <lfs_dir_commit>
    edea:	4606      	mov	r6, r0
        if (err) {
    edec:	e79c      	b.n	ed28 <lfs_fs_relocate+0x104>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    edee:	2301      	movs	r3, #1
    edf0:	e7dd      	b.n	edae <lfs_fs_relocate+0x18a>
    edf2:	2301      	movs	r3, #1
    edf4:	e7db      	b.n	edae <lfs_fs_relocate+0x18a>
    edf6:	2301      	movs	r3, #1
    edf8:	e7d9      	b.n	edae <lfs_fs_relocate+0x18a>
    return (tag & 0x000ffc00) >> 10;
    edfa:	f3c4 2489 	ubfx	r4, r4, #10, #10
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
    edfe:	2200      	movs	r2, #0
    ee00:	f240 31ff 	movw	r1, #1023	; 0x3ff
    ee04:	4638      	mov	r0, r7
    ee06:	f7fd fee1 	bl	cbcc <lfs_fs_prepmove>
    ee0a:	e7d3      	b.n	edb4 <lfs_fs_relocate+0x190>
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
    ee0c:	2300      	movs	r3, #0
    ee0e:	e7dc      	b.n	edca <lfs_fs_relocate+0x1a6>
    return 0;
    ee10:	2600      	movs	r6, #0
    ee12:	e789      	b.n	ed28 <lfs_fs_relocate+0x104>
    ee14:	000ffc08 	.word	0x000ffc08

0000ee18 <lfs_file_opencfg>:
        const struct lfs_file_config *cfg) {
    ee18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ee1c:	b08b      	sub	sp, #44	; 0x2c
    ee1e:	4607      	mov	r7, r0
    ee20:	460c      	mov	r4, r1
    ee22:	9203      	str	r2, [sp, #12]
    ee24:	461e      	mov	r6, r3
    if ((flags & 3) != LFS_O_RDONLY) {
    ee26:	f003 0303 	and.w	r3, r3, #3
    ee2a:	2b01      	cmp	r3, #1
    ee2c:	d005      	beq.n	ee3a <lfs_file_opencfg+0x22>
        int err = lfs_fs_forceconsistency(lfs);
    ee2e:	f006 fccb 	bl	157c8 <lfs_fs_forceconsistency>
        if (err) {
    ee32:	4605      	mov	r5, r0
    ee34:	2800      	cmp	r0, #0
    ee36:	f040 8109 	bne.w	f04c <lfs_file_opencfg+0x234>
    file->cfg = cfg;
    ee3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ee3c:	6523      	str	r3, [r4, #80]	; 0x50
    file->flags = flags | LFS_F_OPENED;
    ee3e:	f446 1300 	orr.w	r3, r6, #2097152	; 0x200000
    ee42:	6323      	str	r3, [r4, #48]	; 0x30
    file->pos = 0;
    ee44:	2300      	movs	r3, #0
    ee46:	6363      	str	r3, [r4, #52]	; 0x34
    file->off = 0;
    ee48:	63e3      	str	r3, [r4, #60]	; 0x3c
    file->cache.buffer = NULL;
    ee4a:	64e3      	str	r3, [r4, #76]	; 0x4c
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
    ee4c:	f104 0808 	add.w	r8, r4, #8
    ee50:	1d23      	adds	r3, r4, #4
    ee52:	aa03      	add	r2, sp, #12
    ee54:	4641      	mov	r1, r8
    ee56:	4638      	mov	r0, r7
    ee58:	f7fe fbaa 	bl	d5b0 <lfs_dir_find>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
    ee5c:	1e05      	subs	r5, r0, #0
    ee5e:	db21      	blt.n	eea4 <lfs_file_opencfg+0x8c>
    file->type = LFS_TYPE_REG;
    ee60:	2301      	movs	r3, #1
    ee62:	71a3      	strb	r3, [r4, #6]
    file->next = (lfs_file_t*)lfs->mlist;
    ee64:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ee66:	6023      	str	r3, [r4, #0]
    lfs->mlist = (struct lfs_mlist*)file;
    ee68:	62bc      	str	r4, [r7, #40]	; 0x28
    if (tag == LFS_ERR_NOENT) {
    ee6a:	f115 0f02 	cmn.w	r5, #2
    ee6e:	d023      	beq.n	eeb8 <lfs_file_opencfg+0xa0>
    } else if (flags & LFS_O_EXCL) {
    ee70:	f416 7f00 	tst.w	r6, #512	; 0x200
    ee74:	f040 80e0 	bne.w	f038 <lfs_file_opencfg+0x220>
    return (tag & 0x7ff00000) >> 20;
    ee78:	f3c5 550a 	ubfx	r5, r5, #20, #11
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
    ee7c:	2d01      	cmp	r5, #1
    ee7e:	f040 80e9 	bne.w	f054 <lfs_file_opencfg+0x23c>
    } else if (flags & LFS_O_TRUNC) {
    ee82:	f416 6f80 	tst.w	r6, #1024	; 0x400
    ee86:	d046      	beq.n	ef16 <lfs_file_opencfg+0xfe>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
    ee88:	f8b4 9004 	ldrh.w	r9, [r4, #4]
    ee8c:	ea4f 2989 	mov.w	r9, r9, lsl #10
    ee90:	f049 5900 	orr.w	r9, r9, #536870912	; 0x20000000
    ee94:	f449 1980 	orr.w	r9, r9, #1048576	; 0x100000
        file->flags |= LFS_F_DIRTY;
    ee98:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ee9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    ee9e:	6323      	str	r3, [r4, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
    eea0:	2600      	movs	r6, #0
    eea2:	e05e      	b.n	ef62 <lfs_file_opencfg+0x14a>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
    eea4:	f115 0f02 	cmn.w	r5, #2
    eea8:	f040 80c8 	bne.w	f03c <lfs_file_opencfg+0x224>
    eeac:	88a2      	ldrh	r2, [r4, #4]
    eeae:	f240 33ff 	movw	r3, #1023	; 0x3ff
    eeb2:	429a      	cmp	r2, r3
    eeb4:	d1d4      	bne.n	ee60 <lfs_file_opencfg+0x48>
    eeb6:	e0c1      	b.n	f03c <lfs_file_opencfg+0x224>
        if (!(flags & LFS_O_CREAT)) {
    eeb8:	f416 7f80 	tst.w	r6, #256	; 0x100
    eebc:	f000 80be 	beq.w	f03c <lfs_file_opencfg+0x224>
        lfs_size_t nlen = strlen(path);
    eec0:	9803      	ldr	r0, [sp, #12]
    eec2:	f004 f947 	bl	13154 <strlen>
        if (nlen > lfs->name_max) {
    eec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    eec8:	4283      	cmp	r3, r0
    eeca:	d202      	bcs.n	eed2 <lfs_file_opencfg+0xba>
            err = LFS_ERR_NAMETOOLONG;
    eecc:	f06f 0523 	mvn.w	r5, #35	; 0x23
    eed0:	e0b4      	b.n	f03c <lfs_file_opencfg+0x224>
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
    eed2:	2300      	movs	r3, #0
    eed4:	9305      	str	r3, [sp, #20]
    eed6:	9309      	str	r3, [sp, #36]	; 0x24
    eed8:	88a3      	ldrh	r3, [r4, #4]
    eeda:	029b      	lsls	r3, r3, #10
    eedc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    eee0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    eee4:	9204      	str	r2, [sp, #16]
    eee6:	4318      	orrs	r0, r3
    eee8:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    eeec:	9006      	str	r0, [sp, #24]
    eeee:	9a03      	ldr	r2, [sp, #12]
    eef0:	9207      	str	r2, [sp, #28]
    eef2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    eef6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    eefa:	9308      	str	r3, [sp, #32]
    eefc:	2303      	movs	r3, #3
    eefe:	aa04      	add	r2, sp, #16
    ef00:	4641      	mov	r1, r8
    ef02:	4638      	mov	r0, r7
    ef04:	f7ff fb1a 	bl	e53c <lfs_dir_commit>
        if (err) {
    ef08:	b910      	cbnz	r0, ef10 <lfs_file_opencfg+0xf8>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
    ef0a:	f8df 915c 	ldr.w	r9, [pc, #348]	; f068 <lfs_file_opencfg+0x250>
    ef0e:	e7c7      	b.n	eea0 <lfs_file_opencfg+0x88>
            err = LFS_ERR_NAMETOOLONG;
    ef10:	f06f 0523 	mvn.w	r5, #35	; 0x23
    ef14:	e092      	b.n	f03c <lfs_file_opencfg+0x224>
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
    ef16:	88a3      	ldrh	r3, [r4, #4]
    ef18:	029b      	lsls	r3, r3, #10
    ef1a:	f104 0228 	add.w	r2, r4, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
    ef1e:	9200      	str	r2, [sp, #0]
    ef20:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    ef24:	f043 0308 	orr.w	r3, r3, #8
    ef28:	4a4d      	ldr	r2, [pc, #308]	; (f060 <lfs_file_opencfg+0x248>)
    ef2a:	4641      	mov	r1, r8
    ef2c:	4638      	mov	r0, r7
    ef2e:	f005 fdca 	bl	14ac6 <lfs_dir_get>
        if (tag < 0) {
    ef32:	f1b0 0900 	subs.w	r9, r0, #0
    ef36:	dab3      	bge.n	eea0 <lfs_file_opencfg+0x88>
            err = tag;
    ef38:	464d      	mov	r5, r9
    ef3a:	e07f      	b.n	f03c <lfs_file_opencfg+0x224>
        if ((file->flags & 3) != LFS_O_RDONLY) {
    ef3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ef3e:	f003 0203 	and.w	r2, r3, #3
    ef42:	2a01      	cmp	r2, #1
    ef44:	d00c      	beq.n	ef60 <lfs_file_opencfg+0x148>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
    ef46:	6d22      	ldr	r2, [r4, #80]	; 0x50
    ef48:	6852      	ldr	r2, [r2, #4]
    ef4a:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    ef4e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    ef52:	6891      	ldr	r1, [r2, #8]
    ef54:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    ef56:	4291      	cmp	r1, r2
    ef58:	d87f      	bhi.n	f05a <lfs_file_opencfg+0x242>
            file->flags |= LFS_F_DIRTY;
    ef5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    ef5e:	6323      	str	r3, [r4, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
    ef60:	3601      	adds	r6, #1
    ef62:	6d22      	ldr	r2, [r4, #80]	; 0x50
    ef64:	6893      	ldr	r3, [r2, #8]
    ef66:	42b3      	cmp	r3, r6
    ef68:	d920      	bls.n	efac <lfs_file_opencfg+0x194>
        if ((file->flags & 3) != LFS_O_WRONLY) {
    ef6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ef6c:	f003 0303 	and.w	r3, r3, #3
    ef70:	2b02      	cmp	r3, #2
    ef72:	d0e3      	beq.n	ef3c <lfs_file_opencfg+0x124>
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
    ef74:	6853      	ldr	r3, [r2, #4]
    ef76:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    ef7a:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    ef7e:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
    ef82:	f503 7240 	add.w	r2, r3, #768	; 0x300
    ef86:	88a3      	ldrh	r3, [r4, #4]
    ef88:	029b      	lsls	r3, r3, #10
    ef8a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    ef8e:	688a      	ldr	r2, [r1, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
    ef90:	6849      	ldr	r1, [r1, #4]
    ef92:	9100      	str	r1, [sp, #0]
    ef94:	4313      	orrs	r3, r2
    ef96:	4a33      	ldr	r2, [pc, #204]	; (f064 <lfs_file_opencfg+0x24c>)
    ef98:	4641      	mov	r1, r8
    ef9a:	4638      	mov	r0, r7
    ef9c:	f005 fd93 	bl	14ac6 <lfs_dir_get>
            if (res < 0 && res != LFS_ERR_NOENT) {
    efa0:	1e05      	subs	r5, r0, #0
    efa2:	dacb      	bge.n	ef3c <lfs_file_opencfg+0x124>
    efa4:	f115 0f02 	cmn.w	r5, #2
    efa8:	d0c8      	beq.n	ef3c <lfs_file_opencfg+0x124>
    efaa:	e047      	b.n	f03c <lfs_file_opencfg+0x224>
    if (file->cfg->buffer) {
    efac:	6813      	ldr	r3, [r2, #0]
    efae:	b18b      	cbz	r3, efd4 <lfs_file_opencfg+0x1bc>
        file->cache.buffer = file->cfg->buffer;
    efb0:	64e3      	str	r3, [r4, #76]	; 0x4c
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
    efb2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    efb4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    efb6:	21ff      	movs	r1, #255	; 0xff
    efb8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    efba:	f004 f93d 	bl	13238 <memset>
    pcache->block = LFS_BLOCK_NULL;
    efbe:	f04f 33ff 	mov.w	r3, #4294967295
    efc2:	6423      	str	r3, [r4, #64]	; 0x40
    return (tag & 0x7ff00000) >> 20;
    efc4:	f3c9 520a 	ubfx	r2, r9, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
    efc8:	f240 2301 	movw	r3, #513	; 0x201
    efcc:	429a      	cmp	r2, r3
    efce:	d00b      	beq.n	efe8 <lfs_file_opencfg+0x1d0>
    return 0;
    efd0:	2500      	movs	r5, #0
    efd2:	e03b      	b.n	f04c <lfs_file_opencfg+0x234>
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
    efd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
#ifndef LFS_NO_MALLOC
    return malloc(size);
    efd6:	6a98      	ldr	r0, [r3, #40]	; 0x28
    efd8:	f7f7 fa9e 	bl	6518 <malloc>
    efdc:	64e0      	str	r0, [r4, #76]	; 0x4c
        if (!file->cache.buffer) {
    efde:	2800      	cmp	r0, #0
    efe0:	d1e7      	bne.n	efb2 <lfs_file_opencfg+0x19a>
            err = LFS_ERR_NOMEM;
    efe2:	f06f 050b 	mvn.w	r5, #11
    efe6:	e029      	b.n	f03c <lfs_file_opencfg+0x224>
        file->ctz.head = LFS_BLOCK_INLINE;
    efe8:	f06f 0101 	mvn.w	r1, #1
    efec:	62a1      	str	r1, [r4, #40]	; 0x28
    return tag & 0x000003ff;
    efee:	f3c9 0209 	ubfx	r2, r9, #0, #10
        file->ctz.size = lfs_tag_size(tag);
    eff2:	62e2      	str	r2, [r4, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
    eff4:	6b23      	ldr	r3, [r4, #48]	; 0x30
    eff6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    effa:	6323      	str	r3, [r4, #48]	; 0x30
        file->cache.block = file->ctz.head;
    effc:	6421      	str	r1, [r4, #64]	; 0x40
        file->cache.off = 0;
    effe:	2300      	movs	r3, #0
    f000:	6463      	str	r3, [r4, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
    f002:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    f004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    f006:	64a3      	str	r3, [r4, #72]	; 0x48
        if (file->ctz.size > 0) {
    f008:	b90a      	cbnz	r2, f00e <lfs_file_opencfg+0x1f6>
    return 0;
    f00a:	2500      	movs	r5, #0
    f00c:	e01e      	b.n	f04c <lfs_file_opencfg+0x234>
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
    f00e:	88a2      	ldrh	r2, [r4, #4]
    return (a < b) ? a : b;
    f010:	f240 31fe 	movw	r1, #1022	; 0x3fe
    f014:	428b      	cmp	r3, r1
    f016:	bf28      	it	cs
    f018:	460b      	movcs	r3, r1
    f01a:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
                    file->cache.buffer);
    f01e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
    f020:	9200      	str	r2, [sp, #0]
    f022:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    f026:	4a0e      	ldr	r2, [pc, #56]	; (f060 <lfs_file_opencfg+0x248>)
    f028:	4641      	mov	r1, r8
    f02a:	4638      	mov	r0, r7
    f02c:	f005 fd4b 	bl	14ac6 <lfs_dir_get>
            if (res < 0) {
    f030:	1e05      	subs	r5, r0, #0
    f032:	db03      	blt.n	f03c <lfs_file_opencfg+0x224>
    return 0;
    f034:	2500      	movs	r5, #0
    f036:	e009      	b.n	f04c <lfs_file_opencfg+0x234>
        err = LFS_ERR_EXIST;
    f038:	f06f 0510 	mvn.w	r5, #16
    file->flags |= LFS_F_ERRED;
    f03c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    f03e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    f042:	6323      	str	r3, [r4, #48]	; 0x30
    lfs_file_close(lfs, file);
    f044:	4621      	mov	r1, r4
    f046:	4638      	mov	r0, r7
    f048:	f006 fc22 	bl	15890 <lfs_file_close>
}
    f04c:	4628      	mov	r0, r5
    f04e:	b00b      	add	sp, #44	; 0x2c
    f050:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        err = LFS_ERR_ISDIR;
    f054:	f06f 0514 	mvn.w	r5, #20
    f058:	e7f0      	b.n	f03c <lfs_file_opencfg+0x224>
                err = LFS_ERR_NOSPC;
    f05a:	f06f 051b 	mvn.w	r5, #27
    f05e:	e7ed      	b.n	f03c <lfs_file_opencfg+0x224>
    f060:	700ffc00 	.word	0x700ffc00
    f064:	7ffffc00 	.word	0x7ffffc00
    f068:	20100000 	.word	0x20100000

0000f06c <lfs_remove>:
int lfs_remove(lfs_t *lfs, const char *path) {
    f06c:	b570      	push	{r4, r5, r6, lr}
    f06e:	b09a      	sub	sp, #104	; 0x68
    f070:	4604      	mov	r4, r0
    f072:	9103      	str	r1, [sp, #12]
    int err = lfs_fs_forceconsistency(lfs);
    f074:	f006 fba8 	bl	157c8 <lfs_fs_forceconsistency>
    if (err) {
    f078:	4603      	mov	r3, r0
    f07a:	b110      	cbz	r0, f082 <lfs_remove+0x16>
}
    f07c:	4618      	mov	r0, r3
    f07e:	b01a      	add	sp, #104	; 0x68
    f080:	bd70      	pop	{r4, r5, r6, pc}
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
    f082:	2300      	movs	r3, #0
    f084:	aa03      	add	r2, sp, #12
    f086:	a910      	add	r1, sp, #64	; 0x40
    f088:	4620      	mov	r0, r4
    f08a:	f7fe fa91 	bl	d5b0 <lfs_dir_find>
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
    f08e:	1e03      	subs	r3, r0, #0
    f090:	db34      	blt.n	f0fc <lfs_remove+0x90>
    return (tag & 0x000ffc00) >> 10;
    f092:	f3c3 2589 	ubfx	r5, r3, #10, #10
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
    f096:	f240 32ff 	movw	r2, #1023	; 0x3ff
    f09a:	4295      	cmp	r5, r2
    f09c:	d02e      	beq.n	f0fc <lfs_remove+0x90>
    dir.next = lfs->mlist;
    f09e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    f0a0:	9206      	str	r2, [sp, #24]
    return (tag & 0x7ff00000) >> 20;
    f0a2:	f3c3 560a 	ubfx	r6, r3, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
    f0a6:	2e02      	cmp	r6, #2
    f0a8:	d02d      	beq.n	f106 <lfs_remove+0x9a>
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
    f0aa:	2300      	movs	r3, #0
    f0ac:	9319      	str	r3, [sp, #100]	; 0x64
    f0ae:	02ad      	lsls	r5, r5, #10
    f0b0:	f045 459f 	orr.w	r5, r5, #1333788672	; 0x4f800000
    f0b4:	f445 05e0 	orr.w	r5, r5, #7340032	; 0x700000
    f0b8:	9518      	str	r5, [sp, #96]	; 0x60
    f0ba:	2301      	movs	r3, #1
    f0bc:	aa18      	add	r2, sp, #96	; 0x60
    f0be:	a910      	add	r1, sp, #64	; 0x40
    f0c0:	4620      	mov	r0, r4
    f0c2:	f7ff fa3b 	bl	e53c <lfs_dir_commit>
    if (err) {
    f0c6:	4603      	mov	r3, r0
    f0c8:	2800      	cmp	r0, #0
    f0ca:	d145      	bne.n	f158 <lfs_remove+0xec>
    lfs->mlist = dir.next;
    f0cc:	9a06      	ldr	r2, [sp, #24]
    f0ce:	62a2      	str	r2, [r4, #40]	; 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
    f0d0:	2e02      	cmp	r6, #2
    f0d2:	d1d3      	bne.n	f07c <lfs_remove+0x10>
        lfs_fs_preporphans(lfs, -1);
    f0d4:	f04f 31ff 	mov.w	r1, #4294967295
    f0d8:	4620      	mov	r0, r4
    f0da:	f005 fb4e 	bl	1477a <lfs_fs_preporphans>
        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
    f0de:	aa10      	add	r2, sp, #64	; 0x40
    f0e0:	a908      	add	r1, sp, #32
    f0e2:	4620      	mov	r0, r4
    f0e4:	f005 fcb1 	bl	14a4a <lfs_fs_pred>
        if (err) {
    f0e8:	4603      	mov	r3, r0
    f0ea:	2800      	cmp	r0, #0
    f0ec:	d1c6      	bne.n	f07c <lfs_remove+0x10>
        err = lfs_dir_drop(lfs, &cwd, &dir.m);
    f0ee:	aa08      	add	r2, sp, #32
    f0f0:	a910      	add	r1, sp, #64	; 0x40
    f0f2:	4620      	mov	r0, r4
    f0f4:	f7ff fc40 	bl	e978 <lfs_dir_drop>
    f0f8:	4603      	mov	r3, r0
        if (err) {
    f0fa:	e7bf      	b.n	f07c <lfs_remove+0x10>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
    f0fc:	2b00      	cmp	r3, #0
    f0fe:	dbbd      	blt.n	f07c <lfs_remove+0x10>
    f100:	f06f 0315 	mvn.w	r3, #21
    f104:	e7ba      	b.n	f07c <lfs_remove+0x10>
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
    f106:	02ab      	lsls	r3, r5, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
    f108:	aa04      	add	r2, sp, #16
    f10a:	9200      	str	r2, [sp, #0]
    f10c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    f110:	f043 0308 	orr.w	r3, r3, #8
    f114:	4a12      	ldr	r2, [pc, #72]	; (f160 <lfs_remove+0xf4>)
    f116:	a910      	add	r1, sp, #64	; 0x40
    f118:	4620      	mov	r0, r4
    f11a:	f005 fcd4 	bl	14ac6 <lfs_dir_get>
        if (res < 0) {
    f11e:	1e03      	subs	r3, r0, #0
    f120:	dbac      	blt.n	f07c <lfs_remove+0x10>
        err = lfs_dir_fetch(lfs, &dir.m, pair);
    f122:	aa04      	add	r2, sp, #16
    f124:	a908      	add	r1, sp, #32
    f126:	4620      	mov	r0, r4
    f128:	f005 fc81 	bl	14a2e <lfs_dir_fetch>
        if (err) {
    f12c:	4603      	mov	r3, r0
    f12e:	2800      	cmp	r0, #0
    f130:	d1a4      	bne.n	f07c <lfs_remove+0x10>
        if (dir.m.count > 0 || dir.m.split) {
    f132:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    f134:	f433 037f 	bics.w	r3, r3, #16711680	; 0xff0000
    f138:	d002      	beq.n	f140 <lfs_remove+0xd4>
            return LFS_ERR_NOTEMPTY;
    f13a:	f06f 0326 	mvn.w	r3, #38	; 0x26
    f13e:	e79d      	b.n	f07c <lfs_remove+0x10>
        lfs_fs_preporphans(lfs, +1);
    f140:	2101      	movs	r1, #1
    f142:	4620      	mov	r0, r4
    f144:	f005 fb19 	bl	1477a <lfs_fs_preporphans>
        dir.type = 0;
    f148:	2300      	movs	r3, #0
    f14a:	f88d 301e 	strb.w	r3, [sp, #30]
        dir.id = 0;
    f14e:	f8ad 301c 	strh.w	r3, [sp, #28]
        lfs->mlist = &dir;
    f152:	ab06      	add	r3, sp, #24
    f154:	62a3      	str	r3, [r4, #40]	; 0x28
    f156:	e7a8      	b.n	f0aa <lfs_remove+0x3e>
        lfs->mlist = dir.next;
    f158:	9a06      	ldr	r2, [sp, #24]
    f15a:	62a2      	str	r2, [r4, #40]	; 0x28
        return err;
    f15c:	e78e      	b.n	f07c <lfs_remove+0x10>
    f15e:	bf00      	nop
    f160:	700ffc00 	.word	0x700ffc00

0000f164 <lfs_rename>:
int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {
    f164:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f168:	b0ad      	sub	sp, #180	; 0xb4
    f16a:	4604      	mov	r4, r0
    f16c:	9103      	str	r1, [sp, #12]
    f16e:	9202      	str	r2, [sp, #8]
    int err = lfs_fs_forceconsistency(lfs);
    f170:	f006 fb2a 	bl	157c8 <lfs_fs_forceconsistency>
    if (err) {
    f174:	4606      	mov	r6, r0
    f176:	b118      	cbz	r0, f180 <lfs_rename+0x1c>
}
    f178:	4630      	mov	r0, r6
    f17a:	b02d      	add	sp, #180	; 0xb4
    f17c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
    f180:	2300      	movs	r3, #0
    f182:	aa03      	add	r2, sp, #12
    f184:	a922      	add	r1, sp, #136	; 0x88
    f186:	4620      	mov	r0, r4
    f188:	f7fe fa12 	bl	d5b0 <lfs_dir_find>
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
    f18c:	1e05      	subs	r5, r0, #0
    f18e:	f2c0 8090 	blt.w	f2b2 <lfs_rename+0x14e>
    return (tag & 0x000ffc00) >> 10;
    f192:	f3c5 2889 	ubfx	r8, r5, #10, #10
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
    f196:	f240 33ff 	movw	r3, #1023	; 0x3ff
    f19a:	4598      	cmp	r8, r3
    f19c:	f000 8089 	beq.w	f2b2 <lfs_rename+0x14e>
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
    f1a0:	f10d 0366 	add.w	r3, sp, #102	; 0x66
    f1a4:	aa02      	add	r2, sp, #8
    f1a6:	a91a      	add	r1, sp, #104	; 0x68
    f1a8:	4620      	mov	r0, r4
    f1aa:	f7fe fa01 	bl	d5b0 <lfs_dir_find>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
    f1ae:	1e07      	subs	r7, r0, #0
    f1b0:	f2c0 8086 	blt.w	f2c0 <lfs_rename+0x15c>
    return (tag & 0x000ffc00) >> 10;
    f1b4:	f3c7 2289 	ubfx	r2, r7, #10, #10
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
    f1b8:	f240 33ff 	movw	r3, #1023	; 0x3ff
    f1bc:	429a      	cmp	r2, r3
    f1be:	d07f      	beq.n	f2c0 <lfs_rename+0x15c>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    f1c0:	9b22      	ldr	r3, [sp, #136]	; 0x88
    f1c2:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    f1c4:	429a      	cmp	r2, r3
    f1c6:	d008      	beq.n	f1da <lfs_rename+0x76>
    f1c8:	9823      	ldr	r0, [sp, #140]	; 0x8c
    f1ca:	991b      	ldr	r1, [sp, #108]	; 0x6c
    f1cc:	4281      	cmp	r1, r0
    f1ce:	d004      	beq.n	f1da <lfs_rename+0x76>
    f1d0:	4299      	cmp	r1, r3
    f1d2:	d002      	beq.n	f1da <lfs_rename+0x76>
    f1d4:	4290      	cmp	r0, r2
    f1d6:	d000      	beq.n	f1da <lfs_rename+0x76>
    f1d8:	2601      	movs	r6, #1
    prevdir.next = lfs->mlist;
    f1da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    f1dc:	930f      	str	r3, [sp, #60]	; 0x3c
    if (prevtag == LFS_ERR_NOENT) {
    f1de:	f117 0f02 	cmn.w	r7, #2
    f1e2:	d07e      	beq.n	f2e2 <lfs_rename+0x17e>
    return (tag & 0x7ff00000) >> 20;
    f1e4:	f3c7 530a 	ubfx	r3, r7, #20, #11
    f1e8:	f3c5 520a 	ubfx	r2, r5, #20, #11
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
    f1ec:	429a      	cmp	r2, r3
    f1ee:	f040 80f8 	bne.w	f3e2 <lfs_rename+0x27e>
    } else if (samepair && newid == newoldid) {
    f1f2:	b91e      	cbnz	r6, f1fc <lfs_rename+0x98>
    f1f4:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
    f1f8:	4542      	cmp	r2, r8
    f1fa:	d0bd      	beq.n	f178 <lfs_rename+0x14>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
    f1fc:	2b02      	cmp	r3, #2
    f1fe:	d07e      	beq.n	f2fe <lfs_rename+0x19a>
    uint16_t newoldid = lfs_tag_id(oldtag);
    f200:	46c1      	mov	r9, r8
    if (!samepair) {
    f202:	2e00      	cmp	r6, #0
    f204:	f040 80ab 	bne.w	f35e <lfs_rename+0x1fa>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
    f208:	2224      	movs	r2, #36	; 0x24
    f20a:	2100      	movs	r1, #0
    f20c:	a806      	add	r0, sp, #24
    f20e:	f004 f813 	bl	13238 <memset>
    f212:	f117 0f02 	cmn.w	r7, #2
    f216:	f000 80a8 	beq.w	f36a <lfs_rename+0x206>
    f21a:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
    f21e:	029b      	lsls	r3, r3, #10
    f220:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
    f224:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    f228:	9305      	str	r3, [sp, #20]
    f22a:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
    f22e:	0292      	lsls	r2, r2, #10
    f230:	f042 4380 	orr.w	r3, r2, #1073741824	; 0x40000000
    f234:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    f238:	9307      	str	r3, [sp, #28]
    return (tag & 0x7ff00000) >> 20;
    f23a:	f3c5 530a 	ubfx	r3, r5, #20, #11
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
    f23e:	ea42 5503 	orr.w	r5, r2, r3, lsl #20
    f242:	9802      	ldr	r0, [sp, #8]
    f244:	f003 ff86 	bl	13154 <strlen>
    f248:	4328      	orrs	r0, r5
    f24a:	9009      	str	r0, [sp, #36]	; 0x24
    f24c:	9b02      	ldr	r3, [sp, #8]
    f24e:	930a      	str	r3, [sp, #40]	; 0x28
    f250:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
    f254:	ea48 2383 	orr.w	r3, r8, r3, lsl #10
    f258:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    f25c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    f260:	930b      	str	r3, [sp, #44]	; 0x2c
    f262:	ab22      	add	r3, sp, #136	; 0x88
    f264:	930c      	str	r3, [sp, #48]	; 0x30
    f266:	2e00      	cmp	r6, #0
    f268:	f040 8081 	bne.w	f36e <lfs_rename+0x20a>
    f26c:	ea4f 2989 	mov.w	r9, r9, lsl #10
    f270:	f049 439f 	orr.w	r3, r9, #1333788672	; 0x4f800000
    f274:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    f278:	930d      	str	r3, [sp, #52]	; 0x34
    f27a:	2305      	movs	r3, #5
    f27c:	aa05      	add	r2, sp, #20
    f27e:	a91a      	add	r1, sp, #104	; 0x68
    f280:	4620      	mov	r0, r4
    f282:	f7ff f95b 	bl	e53c <lfs_dir_commit>
    if (err) {
    f286:	4605      	mov	r5, r0
    f288:	2800      	cmp	r0, #0
    f28a:	d172      	bne.n	f372 <lfs_rename+0x20e>
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
    f28c:	b126      	cbz	r6, f298 <lfs_rename+0x134>
    return lfs_tag_type1(a->tag);
    f28e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
    f290:	0d1b      	lsrs	r3, r3, #20
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
    f292:	f413 6fe0 	tst.w	r3, #1792	; 0x700
    f296:	d170      	bne.n	f37a <lfs_rename+0x216>
    lfs->mlist = prevdir.next;
    f298:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f29a:	62a3      	str	r3, [r4, #40]	; 0x28
    if (prevtag != LFS_ERR_NOENT && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
    f29c:	f117 0f02 	cmn.w	r7, #2
    f2a0:	f000 80a2 	beq.w	f3e8 <lfs_rename+0x284>
    return (tag & 0x7ff00000) >> 20;
    f2a4:	f3c7 570a 	ubfx	r7, r7, #20, #11
    if (prevtag != LFS_ERR_NOENT && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
    f2a8:	2f02      	cmp	r7, #2
    f2aa:	f000 8082 	beq.w	f3b2 <lfs_rename+0x24e>
    return 0;
    f2ae:	462e      	mov	r6, r5
    f2b0:	e762      	b.n	f178 <lfs_rename+0x14>
        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;
    f2b2:	2d00      	cmp	r5, #0
    f2b4:	db02      	blt.n	f2bc <lfs_rename+0x158>
    f2b6:	f06f 0615 	mvn.w	r6, #21
    f2ba:	e75d      	b.n	f178 <lfs_rename+0x14>
    f2bc:	462e      	mov	r6, r5
    f2be:	e75b      	b.n	f178 <lfs_rename+0x14>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
    f2c0:	f117 0f02 	cmn.w	r7, #2
    f2c4:	d106      	bne.n	f2d4 <lfs_rename+0x170>
            !(prevtag == LFS_ERR_NOENT && newid != 0x3ff)) {
    f2c6:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
    f2ca:	f240 33ff 	movw	r3, #1023	; 0x3ff
    f2ce:	429a      	cmp	r2, r3
    f2d0:	f47f af76 	bne.w	f1c0 <lfs_rename+0x5c>
        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;
    f2d4:	2f00      	cmp	r7, #0
    f2d6:	db02      	blt.n	f2de <lfs_rename+0x17a>
    f2d8:	f06f 0615 	mvn.w	r6, #21
    f2dc:	e74c      	b.n	f178 <lfs_rename+0x14>
    f2de:	463e      	mov	r6, r7
    f2e0:	e74a      	b.n	f178 <lfs_rename+0x14>
        lfs_size_t nlen = strlen(newpath);
    f2e2:	9802      	ldr	r0, [sp, #8]
    f2e4:	f003 ff36 	bl	13154 <strlen>
        if (nlen > lfs->name_max) {
    f2e8:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    f2ea:	4283      	cmp	r3, r0
    f2ec:	d376      	bcc.n	f3dc <lfs_rename+0x278>
        if (samepair && newid <= newoldid) {
    f2ee:	bb96      	cbnz	r6, f356 <lfs_rename+0x1f2>
    f2f0:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
    f2f4:	4543      	cmp	r3, r8
    f2f6:	d830      	bhi.n	f35a <lfs_rename+0x1f6>
            newoldid += 1;
    f2f8:	f108 0901 	add.w	r9, r8, #1
    f2fc:	e781      	b.n	f202 <lfs_rename+0x9e>
                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);
    f2fe:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
    f302:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
    f304:	aa05      	add	r2, sp, #20
    f306:	9200      	str	r2, [sp, #0]
    f308:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    f30c:	f043 0308 	orr.w	r3, r3, #8
    f310:	4a36      	ldr	r2, [pc, #216]	; (f3ec <lfs_rename+0x288>)
    f312:	a91a      	add	r1, sp, #104	; 0x68
    f314:	4620      	mov	r0, r4
    f316:	f005 fbd6 	bl	14ac6 <lfs_dir_get>
        if (res < 0) {
    f31a:	1e03      	subs	r3, r0, #0
    f31c:	db0c      	blt.n	f338 <lfs_rename+0x1d4>
        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);
    f31e:	aa05      	add	r2, sp, #20
    f320:	a911      	add	r1, sp, #68	; 0x44
    f322:	4620      	mov	r0, r4
    f324:	f005 fb83 	bl	14a2e <lfs_dir_fetch>
        if (err) {
    f328:	4603      	mov	r3, r0
    f32a:	b928      	cbnz	r0, f338 <lfs_rename+0x1d4>
        if (prevdir.m.count > 0 || prevdir.m.split) {
    f32c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    f32e:	f433 037f 	bics.w	r3, r3, #16711680	; 0xff0000
    f332:	d003      	beq.n	f33c <lfs_rename+0x1d8>
            return LFS_ERR_NOTEMPTY;
    f334:	f06f 0326 	mvn.w	r3, #38	; 0x26
            return (int)res;
    f338:	461e      	mov	r6, r3
    f33a:	e71d      	b.n	f178 <lfs_rename+0x14>
        lfs_fs_preporphans(lfs, +1);
    f33c:	2101      	movs	r1, #1
    f33e:	4620      	mov	r0, r4
    f340:	f005 fa1b 	bl	1477a <lfs_fs_preporphans>
        prevdir.type = 0;
    f344:	2300      	movs	r3, #0
    f346:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
        prevdir.id = 0;
    f34a:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        lfs->mlist = &prevdir;
    f34e:	ab0f      	add	r3, sp, #60	; 0x3c
    f350:	62a3      	str	r3, [r4, #40]	; 0x28
    uint16_t newoldid = lfs_tag_id(oldtag);
    f352:	46c1      	mov	r9, r8
    f354:	e755      	b.n	f202 <lfs_rename+0x9e>
    f356:	46c1      	mov	r9, r8
    f358:	e753      	b.n	f202 <lfs_rename+0x9e>
    f35a:	46c1      	mov	r9, r8
    f35c:	e751      	b.n	f202 <lfs_rename+0x9e>
        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);
    f35e:	aa22      	add	r2, sp, #136	; 0x88
    f360:	4649      	mov	r1, r9
    f362:	4620      	mov	r0, r4
    f364:	f7fd fc32 	bl	cbcc <lfs_fs_prepmove>
    f368:	e74e      	b.n	f208 <lfs_rename+0xa4>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
    f36a:	2300      	movs	r3, #0
    f36c:	e75c      	b.n	f228 <lfs_rename+0xc4>
    f36e:	2300      	movs	r3, #0
    f370:	e782      	b.n	f278 <lfs_rename+0x114>
        lfs->mlist = prevdir.next;
    f372:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f374:	62a3      	str	r3, [r4, #40]	; 0x28
        return err;
    f376:	4606      	mov	r6, r0
    f378:	e6fe      	b.n	f178 <lfs_rename+0x14>
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
    f37a:	2200      	movs	r2, #0
    f37c:	f240 31ff 	movw	r1, #1023	; 0x3ff
    f380:	4620      	mov	r0, r4
    f382:	f7fd fc23 	bl	cbcc <lfs_fs_prepmove>
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
    f386:	2300      	movs	r3, #0
    f388:	932b      	str	r3, [sp, #172]	; 0xac
    f38a:	ea4f 2388 	mov.w	r3, r8, lsl #10
    f38e:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
    f392:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    f396:	932a      	str	r3, [sp, #168]	; 0xa8
    f398:	2301      	movs	r3, #1
    f39a:	aa2a      	add	r2, sp, #168	; 0xa8
    f39c:	a922      	add	r1, sp, #136	; 0x88
    f39e:	4620      	mov	r0, r4
    f3a0:	f7ff f8cc 	bl	e53c <lfs_dir_commit>
        if (err) {
    f3a4:	4606      	mov	r6, r0
    f3a6:	2800      	cmp	r0, #0
    f3a8:	f43f af76 	beq.w	f298 <lfs_rename+0x134>
            lfs->mlist = prevdir.next;
    f3ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    f3ae:	62a3      	str	r3, [r4, #40]	; 0x28
            return err;
    f3b0:	e6e2      	b.n	f178 <lfs_rename+0x14>
        lfs_fs_preporphans(lfs, -1);
    f3b2:	f04f 31ff 	mov.w	r1, #4294967295
    f3b6:	4620      	mov	r0, r4
    f3b8:	f005 f9df 	bl	1477a <lfs_fs_preporphans>
        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);
    f3bc:	aa1a      	add	r2, sp, #104	; 0x68
    f3be:	a911      	add	r1, sp, #68	; 0x44
    f3c0:	4620      	mov	r0, r4
    f3c2:	f005 fb42 	bl	14a4a <lfs_fs_pred>
        if (err) {
    f3c6:	4606      	mov	r6, r0
    f3c8:	2800      	cmp	r0, #0
    f3ca:	f47f aed5 	bne.w	f178 <lfs_rename+0x14>
        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);
    f3ce:	aa11      	add	r2, sp, #68	; 0x44
    f3d0:	a91a      	add	r1, sp, #104	; 0x68
    f3d2:	4620      	mov	r0, r4
    f3d4:	f7ff fad0 	bl	e978 <lfs_dir_drop>
    f3d8:	4606      	mov	r6, r0
        if (err) {
    f3da:	e6cd      	b.n	f178 <lfs_rename+0x14>
            return LFS_ERR_NAMETOOLONG;
    f3dc:	f06f 0623 	mvn.w	r6, #35	; 0x23
    f3e0:	e6ca      	b.n	f178 <lfs_rename+0x14>
        return LFS_ERR_ISDIR;
    f3e2:	f06f 0614 	mvn.w	r6, #20
    f3e6:	e6c7      	b.n	f178 <lfs_rename+0x14>
    return 0;
    f3e8:	462e      	mov	r6, r5
    f3ea:	e6c5      	b.n	f178 <lfs_rename+0x14>
    f3ec:	700ffc00 	.word	0x700ffc00

0000f3f0 <lfs_format>:
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
    f3f0:	b530      	push	{r4, r5, lr}
    f3f2:	b097      	sub	sp, #92	; 0x5c
    f3f4:	4604      	mov	r4, r0
        err = lfs_init(lfs, cfg);
    f3f6:	f005 fe1d 	bl	15034 <lfs_init>
        if (err) {
    f3fa:	4605      	mov	r5, r0
    f3fc:	b110      	cbz	r0, f404 <lfs_format+0x14>
}
    f3fe:	4628      	mov	r0, r5
    f400:	b017      	add	sp, #92	; 0x5c
    f402:	bd30      	pop	{r4, r5, pc}
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
    f404:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    f406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    f408:	2100      	movs	r1, #0
    f40a:	6e60      	ldr	r0, [r4, #100]	; 0x64
    f40c:	f003 ff14 	bl	13238 <memset>
        lfs->free.off = 0;
    f410:	2200      	movs	r2, #0
    f412:	6562      	str	r2, [r4, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
    f414:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    f416:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    f418:	00db      	lsls	r3, r3, #3
    f41a:	6a09      	ldr	r1, [r1, #32]
    f41c:	428b      	cmp	r3, r1
    f41e:	bf28      	it	cs
    f420:	460b      	movcs	r3, r1
    f422:	65a3      	str	r3, [r4, #88]	; 0x58
        lfs->free.i = 0;
    f424:	65e2      	str	r2, [r4, #92]	; 0x5c
        lfs_alloc_ack(lfs);
    f426:	4620      	mov	r0, r4
    f428:	f005 f986 	bl	14738 <lfs_alloc_ack>
        err = lfs_dir_alloc(lfs, &root);
    f42c:	a906      	add	r1, sp, #24
    f42e:	4620      	mov	r0, r4
    f430:	f005 ff44 	bl	152bc <lfs_dir_alloc>
        if (err) {
    f434:	4605      	mov	r5, r0
    f436:	b118      	cbz	r0, f440 <lfs_format+0x50>
    lfs_deinit(lfs);
    f438:	4620      	mov	r0, r4
    f43a:	f005 fde2 	bl	15002 <lfs_deinit>
    return err;
    f43e:	e7de      	b.n	f3fe <lfs_format+0xe>
        lfs_superblock_t superblock = {
    f440:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    f444:	9300      	str	r3, [sp, #0]
            .block_size  = lfs->cfg->block_size,
    f446:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    f448:	69da      	ldr	r2, [r3, #28]
        lfs_superblock_t superblock = {
    f44a:	9201      	str	r2, [sp, #4]
            .block_count = lfs->cfg->block_count,
    f44c:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
    f44e:	9302      	str	r3, [sp, #8]
            .name_max    = lfs->name_max,
    f450:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        lfs_superblock_t superblock = {
    f452:	9303      	str	r3, [sp, #12]
            .file_max    = lfs->file_max,
    f454:	6f23      	ldr	r3, [r4, #112]	; 0x70
        lfs_superblock_t superblock = {
    f456:	9304      	str	r3, [sp, #16]
            .attr_max    = lfs->attr_max,
    f458:	6f63      	ldr	r3, [r4, #116]	; 0x74
        lfs_superblock_t superblock = {
    f45a:	9305      	str	r3, [sp, #20]
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
    f45c:	2300      	movs	r3, #0
    f45e:	930f      	str	r3, [sp, #60]	; 0x3c
    f460:	4b14      	ldr	r3, [pc, #80]	; (f4b4 <lfs_format+0xc4>)
    f462:	930e      	str	r3, [sp, #56]	; 0x38
    f464:	4b14      	ldr	r3, [pc, #80]	; (f4b8 <lfs_format+0xc8>)
    f466:	9310      	str	r3, [sp, #64]	; 0x40
    f468:	4b14      	ldr	r3, [pc, #80]	; (f4bc <lfs_format+0xcc>)
    f46a:	9311      	str	r3, [sp, #68]	; 0x44
    f46c:	4b14      	ldr	r3, [pc, #80]	; (f4c0 <lfs_format+0xd0>)
    f46e:	9312      	str	r3, [sp, #72]	; 0x48
    f470:	f8cd d04c 	str.w	sp, [sp, #76]	; 0x4c
    f474:	2303      	movs	r3, #3
    f476:	aa0e      	add	r2, sp, #56	; 0x38
    f478:	a906      	add	r1, sp, #24
    f47a:	4620      	mov	r0, r4
    f47c:	f7ff f85e 	bl	e53c <lfs_dir_commit>
        if (err) {
    f480:	4605      	mov	r5, r0
    f482:	2800      	cmp	r0, #0
    f484:	d1d8      	bne.n	f438 <lfs_format+0x48>
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
    f486:	2300      	movs	r3, #0
    f488:	9314      	str	r3, [sp, #80]	; 0x50
    f48a:	2301      	movs	r3, #1
    f48c:	9315      	str	r3, [sp, #84]	; 0x54
    f48e:	aa14      	add	r2, sp, #80	; 0x50
    f490:	a906      	add	r1, sp, #24
    f492:	4620      	mov	r0, r4
    f494:	f005 facb 	bl	14a2e <lfs_dir_fetch>
        if (err) {
    f498:	4605      	mov	r5, r0
    f49a:	2800      	cmp	r0, #0
    f49c:	d1cc      	bne.n	f438 <lfs_format+0x48>
        root.erased = false;
    f49e:	2200      	movs	r2, #0
    f4a0:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
        err = lfs_dir_commit(lfs, &root, NULL, 0);
    f4a4:	4613      	mov	r3, r2
    f4a6:	a906      	add	r1, sp, #24
    f4a8:	4620      	mov	r0, r4
    f4aa:	f7ff f847 	bl	e53c <lfs_dir_commit>
    f4ae:	4605      	mov	r5, r0
        if (err) {
    f4b0:	e7c2      	b.n	f438 <lfs_format+0x48>
    f4b2:	bf00      	nop
    f4b4:	40100000 	.word	0x40100000
    f4b8:	0ff00008 	.word	0x0ff00008
    f4bc:	00017694 	.word	0x00017694
    f4c0:	20100018 	.word	0x20100018

0000f4c4 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
    f4c4:	b470      	push	{r4, r5, r6}
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;

    for (size_t i = 0; i < size; i++) {
    f4c6:	2400      	movs	r4, #0
    f4c8:	4294      	cmp	r4, r2
    f4ca:	d213      	bcs.n	f4f4 <lfs_crc+0x30>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
    f4cc:	5d0b      	ldrb	r3, [r1, r4]
    f4ce:	ea83 0500 	eor.w	r5, r3, r0
    f4d2:	f005 050f 	and.w	r5, r5, #15
    f4d6:	4e08      	ldr	r6, [pc, #32]	; (f4f8 <lfs_crc+0x34>)
    f4d8:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    f4dc:	ea85 1010 	eor.w	r0, r5, r0, lsr #4
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
    f4e0:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
    f4e4:	f003 030f 	and.w	r3, r3, #15
    f4e8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
    f4ec:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
    for (size_t i = 0; i < size; i++) {
    f4f0:	3401      	adds	r4, #1
    f4f2:	e7e9      	b.n	f4c8 <lfs_crc+0x4>
    }

    return crc;
}
    f4f4:	bc70      	pop	{r4, r5, r6}
    f4f6:	4770      	bx	lr
    f4f8:	00017dac 	.word	0x00017dac

0000f4fc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    f4fc:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    f4fe:	4c11      	ldr	r4, [pc, #68]	; (f544 <_DoInit+0x48>)
    f500:	2303      	movs	r3, #3
    f502:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    f504:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    f506:	4a10      	ldr	r2, [pc, #64]	; (f548 <_DoInit+0x4c>)
    f508:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    f50a:	4b10      	ldr	r3, [pc, #64]	; (f54c <_DoInit+0x50>)
    f50c:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    f50e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    f512:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    f514:	2300      	movs	r3, #0
    f516:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    f518:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    f51a:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    f51c:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    f51e:	4a0c      	ldr	r2, [pc, #48]	; (f550 <_DoInit+0x54>)
    f520:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    f522:	2210      	movs	r2, #16
    f524:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    f526:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    f528:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    f52a:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    f52c:	4909      	ldr	r1, [pc, #36]	; (f554 <_DoInit+0x58>)
    f52e:	1de0      	adds	r0, r4, #7
    f530:	f003 fde1 	bl	130f6 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    f534:	4908      	ldr	r1, [pc, #32]	; (f558 <_DoInit+0x5c>)
    f536:	4620      	mov	r0, r4
    f538:	f003 fddd 	bl	130f6 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    f53c:	2320      	movs	r3, #32
    f53e:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    f540:	bd10      	pop	{r4, pc}
    f542:	bf00      	nop
    f544:	20002aa8 	.word	0x20002aa8
    f548:	00017dec 	.word	0x00017dec
    f54c:	20002b60 	.word	0x20002b60
    f550:	20002b50 	.word	0x20002b50
    f554:	00017df8 	.word	0x00017df8
    f558:	00017dfc 	.word	0x00017dfc

0000f55c <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    f55c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f560:	4604      	mov	r4, r0
    f562:	460e      	mov	r6, r1
    f564:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    f566:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    f56a:	4a2d      	ldr	r2, [pc, #180]	; (f620 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    f56c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    f570:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    f572:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    f574:	42bb      	cmp	r3, r7
    f576:	d84b      	bhi.n	f610 <SEGGER_RTT_WriteSkipNoLock+0xb4>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    f578:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    f57c:	4928      	ldr	r1, [pc, #160]	; (f620 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    f57e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    f582:	f8d2 8020 	ldr.w	r8, [r2, #32]
    f586:	eba8 0907 	sub.w	r9, r8, r7
    f58a:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
    f58e:	4295      	cmp	r5, r2
    f590:	d904      	bls.n	f59c <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
    f592:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    f594:	429d      	cmp	r5, r3
    f596:	d916      	bls.n	f5c6 <SEGGER_RTT_WriteSkipNoLock+0x6a>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
    f598:	2000      	movs	r0, #0
    f59a:	e03e      	b.n	f61a <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    f59c:	f8df 8080 	ldr.w	r8, [pc, #128]	; f620 <SEGGER_RTT_WriteSkipNoLock+0xc4>
    f5a0:	1c63      	adds	r3, r4, #1
    f5a2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    f5a6:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    f5aa:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    f5ac:	462a      	mov	r2, r5
    f5ae:	4631      	mov	r1, r6
    f5b0:	4438      	add	r0, r7
    f5b2:	f003 fe1d 	bl	131f0 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    f5b6:	443d      	add	r5, r7
    f5b8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f5bc:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
    f5c0:	6265      	str	r5, [r4, #36]	; 0x24
      return 1;
    f5c2:	2001      	movs	r0, #1
    f5c4:	e029      	b.n	f61a <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    f5c6:	1c43      	adds	r3, r0, #1
    f5c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    f5cc:	4a14      	ldr	r2, [pc, #80]	; (f620 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    f5ce:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    f5d2:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    f5d4:	464a      	mov	r2, r9
    f5d6:	4631      	mov	r1, r6
    f5d8:	4438      	add	r0, r7
    f5da:	f003 fe09 	bl	131f0 <memcpy>
      NumBytes -= Rem;
    f5de:	eba7 0708 	sub.w	r7, r7, r8
      if (NumBytes) {
    f5e2:	197f      	adds	r7, r7, r5
    f5e4:	d107      	bne.n	f5f6 <SEGGER_RTT_WriteSkipNoLock+0x9a>
      pRing->WrOff = NumBytes;
    f5e6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f5ea:	4b0d      	ldr	r3, [pc, #52]	; (f620 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    f5ec:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    f5f0:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
    f5f2:	2001      	movs	r0, #1
    f5f4:	e011      	b.n	f61a <SEGGER_RTT_WriteSkipNoLock+0xbe>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    f5f6:	1c63      	adds	r3, r4, #1
    f5f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    f5fc:	4a08      	ldr	r2, [pc, #32]	; (f620 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    f5fe:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
        memcpy((void*)pDst, pData + Rem, NumBytes);
    f602:	463a      	mov	r2, r7
    f604:	eb06 0109 	add.w	r1, r6, r9
    f608:	6858      	ldr	r0, [r3, #4]
    f60a:	f003 fdf1 	bl	131f0 <memcpy>
    f60e:	e7ea      	b.n	f5e6 <SEGGER_RTT_WriteSkipNoLock+0x8a>
    Avail = RdOff - WrOff - 1u;
    f610:	1bdb      	subs	r3, r3, r7
    f612:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    f614:	42ab      	cmp	r3, r5
    f616:	d2c1      	bcs.n	f59c <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
    f618:	2000      	movs	r0, #0
}
    f61a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    f61e:	bf00      	nop
    f620:	20002aa8 	.word	0x20002aa8

0000f624 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    f624:	4b06      	ldr	r3, [pc, #24]	; (f640 <SEGGER_RTT_HasDataUp+0x1c>)
    f626:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    f62a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    f62e:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
    f630:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    f634:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    f638:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    f63a:	1a80      	subs	r0, r0, r2
    f63c:	4770      	bx	lr
    f63e:	bf00      	nop
    f640:	20002aa8 	.word	0x20002aa8

0000f644 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    f644:	4b03      	ldr	r3, [pc, #12]	; (f654 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    f646:	4a04      	ldr	r2, [pc, #16]	; (f658 <z_device_state_init+0x14>)
    f648:	4293      	cmp	r3, r2
    f64a:	d201      	bcs.n	f650 <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
    f64c:	3318      	adds	r3, #24
    f64e:	e7fa      	b.n	f646 <z_device_state_init+0x2>
	}
}
    f650:	4770      	bx	lr
    f652:	bf00      	nop
    f654:	00016398 	.word	0x00016398
    f658:	00016458 	.word	0x00016458

0000f65c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    f65c:	b570      	push	{r4, r5, r6, lr}
    f65e:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    f660:	4b11      	ldr	r3, [pc, #68]	; (f6a8 <z_sys_init_run_level+0x4c>)
    f662:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    f666:	e009      	b.n	f67c <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    f668:	4240      	negs	r0, r0
    f66a:	e017      	b.n	f69c <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    f66c:	68eb      	ldr	r3, [r5, #12]
    f66e:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    f670:	68ea      	ldr	r2, [r5, #12]
    f672:	7853      	ldrb	r3, [r2, #1]
    f674:	f043 0301 	orr.w	r3, r3, #1
    f678:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    f67a:	3408      	adds	r4, #8
    f67c:	1c73      	adds	r3, r6, #1
    f67e:	4a0a      	ldr	r2, [pc, #40]	; (f6a8 <z_sys_init_run_level+0x4c>)
    f680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    f684:	42a3      	cmp	r3, r4
    f686:	d90d      	bls.n	f6a4 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    f688:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    f68a:	6823      	ldr	r3, [r4, #0]
    f68c:	4628      	mov	r0, r5
    f68e:	4798      	blx	r3
		if (dev != NULL) {
    f690:	2d00      	cmp	r5, #0
    f692:	d0f2      	beq.n	f67a <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    f694:	2800      	cmp	r0, #0
    f696:	d0eb      	beq.n	f670 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    f698:	2800      	cmp	r0, #0
    f69a:	dbe5      	blt.n	f668 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    f69c:	28ff      	cmp	r0, #255	; 0xff
    f69e:	dde5      	ble.n	f66c <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    f6a0:	20ff      	movs	r0, #255	; 0xff
    f6a2:	e7e3      	b.n	f66c <z_sys_init_run_level+0x10>
		}
	}
}
    f6a4:	bd70      	pop	{r4, r5, r6, pc}
    f6a6:	bf00      	nop
    f6a8:	00017e04 	.word	0x00017e04

0000f6ac <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    f6ac:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    f6ae:	4605      	mov	r5, r0
    f6b0:	b328      	cbz	r0, f6fe <z_impl_device_get_binding+0x52>
    f6b2:	7803      	ldrb	r3, [r0, #0]
    f6b4:	b32b      	cbz	r3, f702 <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    f6b6:	4c14      	ldr	r4, [pc, #80]	; (f708 <z_impl_device_get_binding+0x5c>)
    f6b8:	e000      	b.n	f6bc <z_impl_device_get_binding+0x10>
    f6ba:	3418      	adds	r4, #24
    f6bc:	4b13      	ldr	r3, [pc, #76]	; (f70c <z_impl_device_get_binding+0x60>)
    f6be:	429c      	cmp	r4, r3
    f6c0:	d008      	beq.n	f6d4 <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
    f6c2:	4620      	mov	r0, r4
    f6c4:	f006 f94b 	bl	1595e <z_device_ready>
    f6c8:	2800      	cmp	r0, #0
    f6ca:	d0f6      	beq.n	f6ba <z_impl_device_get_binding+0xe>
    f6cc:	6823      	ldr	r3, [r4, #0]
    f6ce:	42ab      	cmp	r3, r5
    f6d0:	d1f3      	bne.n	f6ba <z_impl_device_get_binding+0xe>
    f6d2:	e012      	b.n	f6fa <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    f6d4:	4c0c      	ldr	r4, [pc, #48]	; (f708 <z_impl_device_get_binding+0x5c>)
    f6d6:	e000      	b.n	f6da <z_impl_device_get_binding+0x2e>
    f6d8:	3418      	adds	r4, #24
    f6da:	4b0c      	ldr	r3, [pc, #48]	; (f70c <z_impl_device_get_binding+0x60>)
    f6dc:	429c      	cmp	r4, r3
    f6de:	d00b      	beq.n	f6f8 <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    f6e0:	4620      	mov	r0, r4
    f6e2:	f006 f93c 	bl	1595e <z_device_ready>
    f6e6:	2800      	cmp	r0, #0
    f6e8:	d0f6      	beq.n	f6d8 <z_impl_device_get_binding+0x2c>
    f6ea:	6821      	ldr	r1, [r4, #0]
    f6ec:	4628      	mov	r0, r5
    f6ee:	f003 fd43 	bl	13178 <strcmp>
    f6f2:	2800      	cmp	r0, #0
    f6f4:	d1f0      	bne.n	f6d8 <z_impl_device_get_binding+0x2c>
    f6f6:	e000      	b.n	f6fa <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
    f6f8:	2400      	movs	r4, #0
}
    f6fa:	4620      	mov	r0, r4
    f6fc:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    f6fe:	4604      	mov	r4, r0
    f700:	e7fb      	b.n	f6fa <z_impl_device_get_binding+0x4e>
    f702:	2400      	movs	r4, #0
    f704:	e7f9      	b.n	f6fa <z_impl_device_get_binding+0x4e>
    f706:	bf00      	nop
    f708:	00016398 	.word	0x00016398
    f70c:	00016458 	.word	0x00016458

0000f710 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    f710:	4b01      	ldr	r3, [pc, #4]	; (f718 <z_impl_z_errno+0x8>)
    f712:	6898      	ldr	r0, [r3, #8]
}
    f714:	3094      	adds	r0, #148	; 0x94
    f716:	4770      	bx	lr
    f718:	20002f60 	.word	0x20002f60

0000f71c <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
    f71c:	2804      	cmp	r0, #4
    f71e:	d80c      	bhi.n	f73a <reason_to_str+0x1e>
    f720:	e8df f000 	tbb	[pc, r0]
    f724:	07050d03 	.word	0x07050d03
    f728:	09          	.byte	0x09
    f729:	00          	.byte	0x00
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
    f72a:	4806      	ldr	r0, [pc, #24]	; (f744 <reason_to_str+0x28>)
    f72c:	4770      	bx	lr
		return "Stack overflow";
    f72e:	4806      	ldr	r0, [pc, #24]	; (f748 <reason_to_str+0x2c>)
    f730:	4770      	bx	lr
		return "Kernel oops";
    f732:	4806      	ldr	r0, [pc, #24]	; (f74c <reason_to_str+0x30>)
    f734:	4770      	bx	lr
		return "Kernel panic";
    f736:	4806      	ldr	r0, [pc, #24]	; (f750 <reason_to_str+0x34>)
    f738:	4770      	bx	lr
	default:
		return "Unknown error";
    f73a:	4806      	ldr	r0, [pc, #24]	; (f754 <reason_to_str+0x38>)
    f73c:	4770      	bx	lr
		return "Unhandled interrupt";
    f73e:	4806      	ldr	r0, [pc, #24]	; (f758 <reason_to_str+0x3c>)
	}
}
    f740:	4770      	bx	lr
    f742:	bf00      	nop
    f744:	00017e6c 	.word	0x00017e6c
    f748:	00017e40 	.word	0x00017e40
    f74c:	00017e50 	.word	0x00017e50
    f750:	00017e5c 	.word	0x00017e5c
    f754:	00017e1c 	.word	0x00017e1c
    f758:	00017e2c 	.word	0x00017e2c

0000f75c <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    f75c:	b130      	cbz	r0, f76c <thread_name_get+0x10>
{
    f75e:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    f760:	f006 f9f7 	bl	15b52 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    f764:	b120      	cbz	r0, f770 <thread_name_get+0x14>
    f766:	7803      	ldrb	r3, [r0, #0]
    f768:	b123      	cbz	r3, f774 <thread_name_get+0x18>
}
    f76a:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
    f76c:	4802      	ldr	r0, [pc, #8]	; (f778 <thread_name_get+0x1c>)
}
    f76e:	4770      	bx	lr
		thread_name = "unknown";
    f770:	4801      	ldr	r0, [pc, #4]	; (f778 <thread_name_get+0x1c>)
    f772:	e7fa      	b.n	f76a <thread_name_get+0xe>
    f774:	4800      	ldr	r0, [pc, #0]	; (f778 <thread_name_get+0x1c>)
	return thread_name;
    f776:	e7f8      	b.n	f76a <thread_name_get+0xe>
    f778:	00017e7c 	.word	0x00017e7c

0000f77c <k_sys_fatal_error_handler>:
{
    f77c:	b510      	push	{r4, lr}
    f77e:	4604      	mov	r4, r0
	z_impl_log_panic();
    f780:	f7f3 fe5a 	bl	3438 <z_impl_log_panic>
    f784:	4b09      	ldr	r3, [pc, #36]	; (f7ac <k_sys_fatal_error_handler+0x30>)
    f786:	4a0a      	ldr	r2, [pc, #40]	; (f7b0 <k_sys_fatal_error_handler+0x34>)
    f788:	1a9b      	subs	r3, r3, r2
    f78a:	08db      	lsrs	r3, r3, #3
	LOG_ERR("Halting system");
    f78c:	f04f 0100 	mov.w	r1, #0
    f790:	2201      	movs	r2, #1
    f792:	f362 0102 	bfi	r1, r2, #0, #3
    f796:	f36f 01c5 	bfc	r1, #3, #3
    f79a:	f363 118f 	bfi	r1, r3, #6, #10
    f79e:	4805      	ldr	r0, [pc, #20]	; (f7b4 <k_sys_fatal_error_handler+0x38>)
    f7a0:	f7f3 fe1a 	bl	33d8 <log_0>
	arch_system_halt(reason);
    f7a4:	4620      	mov	r0, r4
    f7a6:	f006 f8e7 	bl	15978 <arch_system_halt>
    f7aa:	bf00      	nop
    f7ac:	00016618 	.word	0x00016618
    f7b0:	000165d8 	.word	0x000165d8
    f7b4:	00017e84 	.word	0x00017e84

0000f7b8 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    f7b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f7bc:	b082      	sub	sp, #8
    f7be:	4605      	mov	r5, r0
    f7c0:	460e      	mov	r6, r1
	__asm__ volatile(
    f7c2:	f04f 0320 	mov.w	r3, #32
    f7c6:	f3ef 8711 	mrs	r7, BASEPRI
    f7ca:	f383 8812 	msr	BASEPRI_MAX, r3
    f7ce:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    f7d2:	f001 f95b 	bl	10a8c <z_impl_z_current_get>
    f7d6:	4604      	mov	r4, r0
    f7d8:	4b29      	ldr	r3, [pc, #164]	; (f880 <z_fatal_error+0xc8>)
    f7da:	4a2a      	ldr	r2, [pc, #168]	; (f884 <z_fatal_error+0xcc>)
    f7dc:	1a9b      	subs	r3, r3, r2
    f7de:	08db      	lsrs	r3, r3, #3
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    f7e0:	f04f 0800 	mov.w	r8, #0
    f7e4:	2201      	movs	r2, #1
    f7e6:	f362 0802 	bfi	r8, r2, #0, #3
    f7ea:	f36f 08c5 	bfc	r8, #3, #3
    f7ee:	f363 188f 	bfi	r8, r3, #6, #10
    f7f2:	4628      	mov	r0, r5
    f7f4:	f7ff ff92 	bl	f71c <reason_to_str>
    f7f8:	4602      	mov	r2, r0
    f7fa:	f8ad 8000 	strh.w	r8, [sp]
    f7fe:	2300      	movs	r3, #0
    f800:	4629      	mov	r1, r5
    f802:	4821      	ldr	r0, [pc, #132]	; (f888 <z_fatal_error+0xd0>)
    f804:	f7f3 fd16 	bl	3234 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    f808:	b11e      	cbz	r6, f812 <z_fatal_error+0x5a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    f80a:	69f3      	ldr	r3, [r6, #28]
    f80c:	f3c3 0308 	ubfx	r3, r3, #0, #9
    f810:	bb2b      	cbnz	r3, f85e <z_fatal_error+0xa6>
    f812:	4b1b      	ldr	r3, [pc, #108]	; (f880 <z_fatal_error+0xc8>)
    f814:	4a1b      	ldr	r2, [pc, #108]	; (f884 <z_fatal_error+0xcc>)
    f816:	1a9b      	subs	r3, r3, r2
    f818:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    f81a:	f04f 0800 	mov.w	r8, #0
    f81e:	2201      	movs	r2, #1
    f820:	f362 0802 	bfi	r8, r2, #0, #3
    f824:	f36f 08c5 	bfc	r8, #3, #3
    f828:	f363 188f 	bfi	r8, r3, #6, #10
    f82c:	4620      	mov	r0, r4
    f82e:	f7ff ff95 	bl	f75c <thread_name_get>
    f832:	f7f3 fbc3 	bl	2fbc <z_log_strdup>
    f836:	4602      	mov	r2, r0
    f838:	4643      	mov	r3, r8
    f83a:	4621      	mov	r1, r4
    f83c:	4813      	ldr	r0, [pc, #76]	; (f88c <z_fatal_error+0xd4>)
    f83e:	f7f3 fd6d 	bl	331c <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    f842:	4631      	mov	r1, r6
    f844:	4628      	mov	r0, r5
    f846:	f7ff ff99 	bl	f77c <k_sys_fatal_error_handler>
	__asm__ volatile(
    f84a:	f387 8811 	msr	BASEPRI, r7
    f84e:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    f852:	4620      	mov	r0, r4
    f854:	f7f6 fd62 	bl	631c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    f858:	b002      	add	sp, #8
    f85a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f85e:	4b08      	ldr	r3, [pc, #32]	; (f880 <z_fatal_error+0xc8>)
    f860:	4a08      	ldr	r2, [pc, #32]	; (f884 <z_fatal_error+0xcc>)
    f862:	1a9b      	subs	r3, r3, r2
    f864:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
    f866:	f04f 0100 	mov.w	r1, #0
    f86a:	2201      	movs	r2, #1
    f86c:	f362 0102 	bfi	r1, r2, #0, #3
    f870:	f36f 01c5 	bfc	r1, #3, #3
    f874:	f363 118f 	bfi	r1, r3, #6, #10
    f878:	4805      	ldr	r0, [pc, #20]	; (f890 <z_fatal_error+0xd8>)
    f87a:	f7f3 fdad 	bl	33d8 <log_0>
    f87e:	e7c8      	b.n	f812 <z_fatal_error+0x5a>
    f880:	00016618 	.word	0x00016618
    f884:	000165d8 	.word	0x000165d8
    f888:	00017e94 	.word	0x00017e94
    f88c:	00017ee0 	.word	0x00017ee0
    f890:	00017ebc 	.word	0x00017ebc

0000f894 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    f894:	b5f0      	push	{r4, r5, r6, r7, lr}
    f896:	b089      	sub	sp, #36	; 0x24
    f898:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
    f89a:	4b15      	ldr	r3, [pc, #84]	; (f8f0 <init_idle_thread+0x5c>)
    f89c:	25b0      	movs	r5, #176	; 0xb0
    f89e:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
    f8a2:	4b14      	ldr	r3, [pc, #80]	; (f8f4 <init_idle_thread+0x60>)
    f8a4:	f44f 76b0 	mov.w	r6, #352	; 0x160
    f8a8:	fb06 3600 	mla	r6, r6, r0, r3

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
    f8ac:	af06      	add	r7, sp, #24
    f8ae:	4603      	mov	r3, r0
    f8b0:	4a11      	ldr	r2, [pc, #68]	; (f8f8 <init_idle_thread+0x64>)
    f8b2:	2108      	movs	r1, #8
    f8b4:	4638      	mov	r0, r7
    f8b6:	f001 fe2f 	bl	11518 <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    f8ba:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    f8be:	480f      	ldr	r0, [pc, #60]	; (f8fc <init_idle_thread+0x68>)
    f8c0:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
    f8c4:	9705      	str	r7, [sp, #20]
    f8c6:	2301      	movs	r3, #1
    f8c8:	9304      	str	r3, [sp, #16]
    f8ca:	230f      	movs	r3, #15
    f8cc:	9303      	str	r3, [sp, #12]
    f8ce:	2300      	movs	r3, #0
    f8d0:	9302      	str	r3, [sp, #8]
    f8d2:	9301      	str	r3, [sp, #4]
    f8d4:	9400      	str	r4, [sp, #0]
    f8d6:	4b0a      	ldr	r3, [pc, #40]	; (f900 <init_idle_thread+0x6c>)
    f8d8:	f44f 72a0 	mov.w	r2, #320	; 0x140
    f8dc:	4631      	mov	r1, r6
    f8de:	4628      	mov	r0, r5
    f8e0:	f000 f96c 	bl	fbbc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    f8e4:	7b6b      	ldrb	r3, [r5, #13]
    f8e6:	f023 0304 	bic.w	r3, r3, #4
    f8ea:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    f8ec:	b009      	add	sp, #36	; 0x24
    f8ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f8f0:	20000828 	.word	0x20000828
    f8f4:	20004520 	.word	0x20004520
    f8f8:	00017ef8 	.word	0x00017ef8
    f8fc:	20002f60 	.word	0x20002f60
    f900:	00015bc5 	.word	0x00015bc5

0000f904 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
    f904:	b570      	push	{r4, r5, r6, lr}
    f906:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
    f908:	f000 ffbe 	bl	10888 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
    f90c:	4d1b      	ldr	r5, [pc, #108]	; (f97c <prepare_multithreading+0x78>)
    f90e:	4b1c      	ldr	r3, [pc, #112]	; (f980 <prepare_multithreading+0x7c>)
    f910:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    f912:	4b1c      	ldr	r3, [pc, #112]	; (f984 <prepare_multithreading+0x80>)
    f914:	9305      	str	r3, [sp, #20]
    f916:	2301      	movs	r3, #1
    f918:	9304      	str	r3, [sp, #16]
    f91a:	2400      	movs	r4, #0
    f91c:	9403      	str	r4, [sp, #12]
    f91e:	9402      	str	r4, [sp, #8]
    f920:	9401      	str	r4, [sp, #4]
    f922:	9400      	str	r4, [sp, #0]
    f924:	4b18      	ldr	r3, [pc, #96]	; (f988 <prepare_multithreading+0x84>)
    f926:	f44f 6200 	mov.w	r2, #2048	; 0x800
    f92a:	4918      	ldr	r1, [pc, #96]	; (f98c <prepare_multithreading+0x88>)
    f92c:	4628      	mov	r0, r5
    f92e:	f000 f945 	bl	fbbc <z_setup_new_thread>
    f932:	4606      	mov	r6, r0
    f934:	7b6b      	ldrb	r3, [r5, #13]
    f936:	f023 0304 	bic.w	r3, r3, #4
    f93a:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
    f93c:	4628      	mov	r0, r5
    f93e:	f006 fa9c 	bl	15e7a <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    f942:	2c00      	cmp	r4, #0
    f944:	dd02      	ble.n	f94c <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
    f946:	4630      	mov	r0, r6
    f948:	b006      	add	sp, #24
    f94a:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
    f94c:	4620      	mov	r0, r4
    f94e:	f7ff ffa1 	bl	f894 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    f952:	4b0f      	ldr	r3, [pc, #60]	; (f990 <prepare_multithreading+0x8c>)
    f954:	22b0      	movs	r2, #176	; 0xb0
    f956:	fb02 3204 	mla	r2, r2, r4, r3
    f95a:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    f95e:	4b08      	ldr	r3, [pc, #32]	; (f980 <prepare_multithreading+0x7c>)
    f960:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    f964:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
    f966:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
    f968:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    f96c:	4a09      	ldr	r2, [pc, #36]	; (f994 <prepare_multithreading+0x90>)
    f96e:	eb02 1241 	add.w	r2, r2, r1, lsl #5
    f972:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
    f976:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    f978:	3401      	adds	r4, #1
    f97a:	e7e2      	b.n	f942 <prepare_multithreading+0x3e>
    f97c:	200008d8 	.word	0x200008d8
    f980:	20002f60 	.word	0x20002f60
    f984:	00017f04 	.word	0x00017f04
    f988:	0000f999 	.word	0x0000f999
    f98c:	20003d00 	.word	0x20003d00
    f990:	20000828 	.word	0x20000828
    f994:	20004680 	.word	0x20004680

0000f998 <bg_thread_main>:
{
    f998:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    f99a:	4b0a      	ldr	r3, [pc, #40]	; (f9c4 <bg_thread_main+0x2c>)
    f99c:	2201      	movs	r2, #1
    f99e:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    f9a0:	2002      	movs	r0, #2
    f9a2:	f7ff fe5b 	bl	f65c <z_sys_init_run_level>
	boot_banner();
    f9a6:	f001 fb11 	bl	10fcc <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    f9aa:	2003      	movs	r0, #3
    f9ac:	f7ff fe56 	bl	f65c <z_sys_init_run_level>
	z_init_static_threads();
    f9b0:	f000 f968 	bl	fc84 <z_init_static_threads>
	main();
    f9b4:	f7f2 f800 	bl	19b8 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    f9b8:	4a03      	ldr	r2, [pc, #12]	; (f9c8 <bg_thread_main+0x30>)
    f9ba:	7b13      	ldrb	r3, [r2, #12]
    f9bc:	f023 0301 	bic.w	r3, r3, #1
    f9c0:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    f9c2:	bd08      	pop	{r3, pc}
    f9c4:	20002fcd 	.word	0x20002fcd
    f9c8:	200008d8 	.word	0x200008d8

0000f9cc <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    f9cc:	b508      	push	{r3, lr}
    f9ce:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    f9d0:	4a01      	ldr	r2, [pc, #4]	; (f9d8 <switch_to_main_thread+0xc>)
    f9d2:	4802      	ldr	r0, [pc, #8]	; (f9dc <switch_to_main_thread+0x10>)
    f9d4:	f7f6 f81c 	bl	5a10 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    f9d8:	0000f999 	.word	0x0000f999
    f9dc:	200008d8 	.word	0x200008d8

0000f9e0 <z_bss_zero>:
{
    f9e0:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    f9e2:	4803      	ldr	r0, [pc, #12]	; (f9f0 <z_bss_zero+0x10>)
    f9e4:	4a03      	ldr	r2, [pc, #12]	; (f9f4 <z_bss_zero+0x14>)
    f9e6:	1a12      	subs	r2, r2, r0
    f9e8:	2100      	movs	r1, #0
    f9ea:	f003 fc25 	bl	13238 <memset>
}
    f9ee:	bd08      	pop	{r3, pc}
    f9f0:	20000548 	.word	0x20000548
    f9f4:	2000318c 	.word	0x2000318c

0000f9f8 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    f9f8:	b500      	push	{lr}
    f9fa:	b0ad      	sub	sp, #180	; 0xb4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    f9fc:	f7f3 fa00 	bl	2e00 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    fa00:	4b1c      	ldr	r3, [pc, #112]	; (fa74 <z_cstart+0x7c>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    fa02:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    fa06:	4c1c      	ldr	r4, [pc, #112]	; (fa78 <z_cstart+0x80>)
    fa08:	6963      	ldr	r3, [r4, #20]
    fa0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    fa0e:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    fa10:	23e0      	movs	r3, #224	; 0xe0
    fa12:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    fa16:	2500      	movs	r5, #0
    fa18:	77e5      	strb	r5, [r4, #31]
    fa1a:	7625      	strb	r5, [r4, #24]
    fa1c:	7665      	strb	r5, [r4, #25]
    fa1e:	76a5      	strb	r5, [r4, #26]
    fa20:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    fa24:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fa26:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    fa2a:	6263      	str	r3, [r4, #36]	; 0x24
    fa2c:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    fa30:	f7f6 fbe4 	bl	61fc <z_arm_fault_init>
	z_arm_cpu_idle_init();
    fa34:	f7f5 fe70 	bl	5718 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    fa38:	f04f 33ff 	mov.w	r3, #4294967295
    fa3c:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    fa3e:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    fa40:	f7f6 fd48 	bl	64d4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    fa44:	f7f6 fc80 	bl	6348 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    fa48:	2401      	movs	r4, #1
    fa4a:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    fa4e:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    fa52:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    fa54:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    fa56:	4b09      	ldr	r3, [pc, #36]	; (fa7c <z_cstart+0x84>)
    fa58:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    fa5c:	f7ff fdf2 	bl	f644 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    fa60:	4628      	mov	r0, r5
    fa62:	f7ff fdfb 	bl	f65c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    fa66:	4620      	mov	r0, r4
    fa68:	f7ff fdf8 	bl	f65c <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    fa6c:	f7ff ff4a 	bl	f904 <prepare_multithreading>
    fa70:	f7ff ffac 	bl	f9cc <switch_to_main_thread>
    fa74:	20004ea0 	.word	0x20004ea0
    fa78:	e000ed00 	.word	0xe000ed00
    fa7c:	20002f60 	.word	0x20002f60

0000fa80 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    fa80:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    fa82:	4c06      	ldr	r4, [pc, #24]	; (fa9c <statics_init+0x1c>)
    fa84:	4b06      	ldr	r3, [pc, #24]	; (faa0 <statics_init+0x20>)
    fa86:	429c      	cmp	r4, r3
    fa88:	d206      	bcs.n	fa98 <statics_init+0x18>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    fa8a:	68a2      	ldr	r2, [r4, #8]
    fa8c:	6861      	ldr	r1, [r4, #4]
    fa8e:	4620      	mov	r0, r4
    fa90:	f005 ff7b 	bl	1598a <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    fa94:	3414      	adds	r4, #20
    fa96:	e7f5      	b.n	fa84 <statics_init+0x4>
		}
	}
	return 0;
}
    fa98:	2000      	movs	r0, #0
    fa9a:	bd10      	pop	{r4, pc}
    fa9c:	200003a0 	.word	0x200003a0
    faa0:	200003c8 	.word	0x200003c8

0000faa4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    faa4:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    faa6:	4c06      	ldr	r4, [pc, #24]	; (fac0 <init_mem_slab_module+0x1c>)
	int rc = 0;
    faa8:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    faaa:	4b06      	ldr	r3, [pc, #24]	; (fac4 <init_mem_slab_module+0x20>)
    faac:	429c      	cmp	r4, r3
    faae:	d206      	bcs.n	fabe <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    fab0:	4620      	mov	r0, r4
    fab2:	f005 ffe5 	bl	15a80 <create_free_list>
		if (rc < 0) {
    fab6:	2800      	cmp	r0, #0
    fab8:	db01      	blt.n	fabe <init_mem_slab_module+0x1a>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    faba:	341c      	adds	r4, #28
    fabc:	e7f5      	b.n	faaa <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
    fabe:	bd10      	pop	{r4, pc}
    fac0:	2000034c 	.word	0x2000034c
    fac4:	200003a0 	.word	0x200003a0

0000fac8 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    fac8:	b5f0      	push	{r4, r5, r6, r7, lr}
    faca:	b083      	sub	sp, #12
    facc:	460c      	mov	r4, r1
    face:	461f      	mov	r7, r3
	__asm__ volatile(
    fad0:	f04f 0320 	mov.w	r3, #32
    fad4:	f3ef 8111 	mrs	r1, BASEPRI
    fad8:	f383 8812 	msr	BASEPRI_MAX, r3
    fadc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    fae0:	6943      	ldr	r3, [r0, #20]
    fae2:	b16b      	cbz	r3, fb00 <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
    fae4:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    fae6:	6943      	ldr	r3, [r0, #20]
    fae8:	681b      	ldr	r3, [r3, #0]
    faea:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    faec:	6983      	ldr	r3, [r0, #24]
    faee:	3301      	adds	r3, #1
    faf0:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    faf2:	2000      	movs	r0, #0
	__asm__ volatile(
    faf4:	f381 8811 	msr	BASEPRI, r1
    faf8:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    fafc:	b003      	add	sp, #12
    fafe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    fb00:	4616      	mov	r6, r2
    fb02:	f100 0508 	add.w	r5, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    fb06:	ea56 0307 	orrs.w	r3, r6, r7
    fb0a:	d104      	bne.n	fb16 <k_mem_slab_alloc+0x4e>
		*mem = NULL;
    fb0c:	2300      	movs	r3, #0
    fb0e:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    fb10:	f06f 000b 	mvn.w	r0, #11
    fb14:	e7ee      	b.n	faf4 <k_mem_slab_alloc+0x2c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    fb16:	e9cd 6700 	strd	r6, r7, [sp]
    fb1a:	4602      	mov	r2, r0
    fb1c:	4628      	mov	r0, r5
    fb1e:	f000 fd89 	bl	10634 <z_pend_curr>
		if (result == 0) {
    fb22:	2800      	cmp	r0, #0
    fb24:	d1ea      	bne.n	fafc <k_mem_slab_alloc+0x34>
			*mem = _current->base.swap_data;
    fb26:	4b02      	ldr	r3, [pc, #8]	; (fb30 <k_mem_slab_alloc+0x68>)
    fb28:	689b      	ldr	r3, [r3, #8]
    fb2a:	695b      	ldr	r3, [r3, #20]
    fb2c:	6023      	str	r3, [r4, #0]
		return result;
    fb2e:	e7e5      	b.n	fafc <k_mem_slab_alloc+0x34>
    fb30:	20002f60 	.word	0x20002f60

0000fb34 <z_thread_monitor_exit>:
	__asm__ volatile(
    fb34:	f04f 0320 	mov.w	r3, #32
    fb38:	f3ef 8111 	mrs	r1, BASEPRI
    fb3c:	f383 8812 	msr	BASEPRI_MAX, r3
    fb40:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    fb44:	4b0a      	ldr	r3, [pc, #40]	; (fb70 <z_thread_monitor_exit+0x3c>)
    fb46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    fb48:	4283      	cmp	r3, r0
    fb4a:	d104      	bne.n	fb56 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    fb4c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    fb4e:	4b08      	ldr	r3, [pc, #32]	; (fb70 <z_thread_monitor_exit+0x3c>)
    fb50:	629a      	str	r2, [r3, #40]	; 0x28
    fb52:	e007      	b.n	fb64 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    fb54:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    fb56:	b113      	cbz	r3, fb5e <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    fb58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    fb5a:	4282      	cmp	r2, r0
    fb5c:	d1fa      	bne.n	fb54 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    fb5e:	b10b      	cbz	r3, fb64 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    fb60:	6f02      	ldr	r2, [r0, #112]	; 0x70
    fb62:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    fb64:	f381 8811 	msr	BASEPRI, r1
    fb68:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    fb6c:	4770      	bx	lr
    fb6e:	bf00      	nop
    fb70:	20002f60 	.word	0x20002f60

0000fb74 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    fb74:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    fb76:	4604      	mov	r4, r0
    fb78:	b140      	cbz	r0, fb8c <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
    fb7a:	2220      	movs	r2, #32
    fb7c:	f104 0074 	add.w	r0, r4, #116	; 0x74
    fb80:	f003 fac2 	bl	13108 <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    fb84:	2000      	movs	r0, #0
    fb86:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    fb8a:	bd10      	pop	{r4, pc}
		thread = _current;
    fb8c:	4b01      	ldr	r3, [pc, #4]	; (fb94 <z_impl_k_thread_name_set+0x20>)
    fb8e:	689c      	ldr	r4, [r3, #8]
    fb90:	e7f3      	b.n	fb7a <z_impl_k_thread_name_set+0x6>
    fb92:	bf00      	nop
    fb94:	20002f60 	.word	0x20002f60

0000fb98 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    fb98:	b538      	push	{r3, r4, r5, lr}
    fb9a:	4614      	mov	r4, r2
    fb9c:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    fb9e:	ea54 0305 	orrs.w	r3, r4, r5
    fba2:	d102      	bne.n	fbaa <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
    fba4:	f005 ffd7 	bl	15b56 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    fba8:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    fbaa:	462b      	mov	r3, r5
    fbac:	4902      	ldr	r1, [pc, #8]	; (fbb8 <schedule_new_thread+0x20>)
    fbae:	3018      	adds	r0, #24
    fbb0:	f001 f81e 	bl	10bf0 <z_add_timeout>
    fbb4:	e7f8      	b.n	fba8 <schedule_new_thread+0x10>
    fbb6:	bf00      	nop
    fbb8:	00015eb3 	.word	0x00015eb3

0000fbbc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    fbbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fbc0:	b085      	sub	sp, #20
    fbc2:	4604      	mov	r4, r0
    fbc4:	460f      	mov	r7, r1
    fbc6:	4615      	mov	r5, r2
    fbc8:	461e      	mov	r6, r3
    fbca:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    fbce:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    fbd2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    fbd6:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    fbda:	f100 0358 	add.w	r3, r0, #88	; 0x58
	list->head = (sys_dnode_t *)list;
    fbde:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    fbe0:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    fbe2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    fbe4:	2204      	movs	r2, #4
    fbe6:	9911      	ldr	r1, [sp, #68]	; 0x44
    fbe8:	f005 ffb9 	bl	15b5e <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    fbec:	462a      	mov	r2, r5
    fbee:	4639      	mov	r1, r7
    fbf0:	4620      	mov	r0, r4
    fbf2:	f005 ff96 	bl	15b22 <setup_thread_stack>
    fbf6:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    fbf8:	f8cd 8008 	str.w	r8, [sp, #8]
    fbfc:	f8cd 9004 	str.w	r9, [sp, #4]
    fc00:	f8cd a000 	str.w	sl, [sp]
    fc04:	4633      	mov	r3, r6
    fc06:	4602      	mov	r2, r0
    fc08:	4639      	mov	r1, r7
    fc0a:	4620      	mov	r0, r4
    fc0c:	f7f5 feb0 	bl	5970 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    fc10:	2300      	movs	r3, #0
    fc12:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    fc14:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    fc16:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    fc1a:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    fc1e:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    fc22:	f04f 0320 	mov.w	r3, #32
    fc26:	f3ef 8211 	mrs	r2, BASEPRI
    fc2a:	f383 8812 	msr	BASEPRI_MAX, r3
    fc2e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    fc32:	4b13      	ldr	r3, [pc, #76]	; (fc80 <z_setup_new_thread+0xc4>)
    fc34:	6a99      	ldr	r1, [r3, #40]	; 0x28
    fc36:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    fc38:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    fc3a:	f382 8811 	msr	BASEPRI, r2
    fc3e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    fc42:	f1bb 0f00 	cmp.w	fp, #0
    fc46:	d013      	beq.n	fc70 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
    fc48:	221f      	movs	r2, #31
    fc4a:	4659      	mov	r1, fp
    fc4c:	f104 0074 	add.w	r0, r4, #116	; 0x74
    fc50:	f003 fa5a 	bl	13108 <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    fc54:	2300      	movs	r3, #0
    fc56:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    fc5a:	4b09      	ldr	r3, [pc, #36]	; (fc80 <z_setup_new_thread+0xc4>)
    fc5c:	689b      	ldr	r3, [r3, #8]
    fc5e:	b15b      	cbz	r3, fc78 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    fc60:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    fc64:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
#ifdef CONFIG_THREAD_RUNTIME_STATS
	memset(&new_thread->rt_stats, 0, sizeof(new_thread->rt_stats));
#endif

	return stack_ptr;
}
    fc68:	4628      	mov	r0, r5
    fc6a:	b005      	add	sp, #20
    fc6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    fc70:	2300      	movs	r3, #0
    fc72:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    fc76:	e7f0      	b.n	fc5a <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    fc78:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    fc7c:	e7f4      	b.n	fc68 <z_setup_new_thread+0xac>
    fc7e:	bf00      	nop
    fc80:	20002f60 	.word	0x20002f60

0000fc84 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    fc84:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    fc88:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    fc8a:	4c23      	ldr	r4, [pc, #140]	; (fd18 <z_init_static_threads+0x94>)
    fc8c:	4b23      	ldr	r3, [pc, #140]	; (fd1c <z_init_static_threads+0x98>)
    fc8e:	429c      	cmp	r4, r3
    fc90:	d215      	bcs.n	fcbe <z_init_static_threads+0x3a>
		z_setup_new_thread(
    fc92:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    fc94:	9305      	str	r3, [sp, #20]
    fc96:	6a23      	ldr	r3, [r4, #32]
    fc98:	9304      	str	r3, [sp, #16]
    fc9a:	69e3      	ldr	r3, [r4, #28]
    fc9c:	9303      	str	r3, [sp, #12]
    fc9e:	69a3      	ldr	r3, [r4, #24]
    fca0:	9302      	str	r3, [sp, #8]
    fca2:	6963      	ldr	r3, [r4, #20]
    fca4:	9301      	str	r3, [sp, #4]
    fca6:	6923      	ldr	r3, [r4, #16]
    fca8:	9300      	str	r3, [sp, #0]
    fcaa:	68e3      	ldr	r3, [r4, #12]
    fcac:	68a2      	ldr	r2, [r4, #8]
    fcae:	6861      	ldr	r1, [r4, #4]
    fcb0:	6820      	ldr	r0, [r4, #0]
    fcb2:	f7ff ff83 	bl	fbbc <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    fcb6:	6823      	ldr	r3, [r4, #0]
    fcb8:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    fcba:	3430      	adds	r4, #48	; 0x30
    fcbc:	e7e6      	b.n	fc8c <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    fcbe:	f000 fb71 	bl	103a4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    fcc2:	4c15      	ldr	r4, [pc, #84]	; (fd18 <z_init_static_threads+0x94>)
    fcc4:	e01b      	b.n	fcfe <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
    fcc6:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    fcc8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    fccc:	ea4f 79e3 	mov.w	r9, r3, asr #31
		} else {
			return (t * to_hz + off) / from_hz;
    fcd0:	ea4f 31c9 	mov.w	r1, r9, lsl #15
    fcd4:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    fcd8:	03d8      	lsls	r0, r3, #15
    fcda:	f240 35e7 	movw	r5, #999	; 0x3e7
    fcde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fce2:	2300      	movs	r3, #0
    fce4:	1940      	adds	r0, r0, r5
    fce6:	f04f 0500 	mov.w	r5, #0
    fcea:	eb45 0101 	adc.w	r1, r5, r1
    fcee:	f7f1 f9a7 	bl	1040 <__aeabi_uldivmod>
    fcf2:	4602      	mov	r2, r0
    fcf4:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    fcf6:	4630      	mov	r0, r6
    fcf8:	f7ff ff4e 	bl	fb98 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
    fcfc:	3430      	adds	r4, #48	; 0x30
    fcfe:	4b07      	ldr	r3, [pc, #28]	; (fd1c <z_init_static_threads+0x98>)
    fd00:	429c      	cmp	r4, r3
    fd02:	d204      	bcs.n	fd0e <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    fd04:	6a63      	ldr	r3, [r4, #36]	; 0x24
    fd06:	f1b3 3fff 	cmp.w	r3, #4294967295
    fd0a:	d0f7      	beq.n	fcfc <z_init_static_threads+0x78>
    fd0c:	e7db      	b.n	fcc6 <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
    fd0e:	f000 fd47 	bl	107a0 <k_sched_unlock>
}
    fd12:	b006      	add	sp, #24
    fd14:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    fd18:	2000034c 	.word	0x2000034c
    fd1c:	2000034c 	.word	0x2000034c

0000fd20 <pm_save_idle>:
 *
 * Sets the kernel data structure idle field to either a positive value or
 * K_FOREVER.
 */
static void pm_save_idle(void)
{
    fd20:	b508      	push	{r3, lr}
#ifdef CONFIG_PM
	int32_t ticks = z_get_next_timeout_expiry();
    fd22:	f006 fa14 	bl	1614e <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
    fd26:	4b04      	ldr	r3, [pc, #16]	; (fd38 <pm_save_idle+0x18>)
    fd28:	6198      	str	r0, [r3, #24]
	 * before exiting. This is because the kernel does not do its own idle
	 * processing in those cases i.e. skips k_cpu_idle(). The kernel's
	 * idle processing re-enables interrupts which is essential for
	 * the kernel's scheduling logic.
	 */
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
    fd2a:	f7f5 fbbf 	bl	54ac <pm_system_suspend>
    fd2e:	b100      	cbz	r0, fd32 <pm_save_idle+0x12>
		k_cpu_idle();
	}
#endif
}
    fd30:	bd08      	pop	{r3, pc}
	arch_cpu_idle();
    fd32:	f7f5 fcf7 	bl	5724 <arch_cpu_idle>
    fd36:	e7fb      	b.n	fd30 <pm_save_idle+0x10>
    fd38:	20002f60 	.word	0x20002f60

0000fd3c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    fd3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    fd40:	b083      	sub	sp, #12
    fd42:	4604      	mov	r4, r0
    fd44:	461d      	mov	r5, r3
	__asm__ volatile(
    fd46:	f04f 0320 	mov.w	r3, #32
    fd4a:	f3ef 8711 	mrs	r7, BASEPRI
    fd4e:	f383 8812 	msr	BASEPRI_MAX, r3
    fd52:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    fd56:	68c1      	ldr	r1, [r0, #12]
    fd58:	b999      	cbnz	r1, fd82 <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    fd5a:	2900      	cmp	r1, #0
    fd5c:	d14f      	bne.n	fdfe <z_impl_k_mutex_lock+0xc2>
    fd5e:	4b3a      	ldr	r3, [pc, #232]	; (fe48 <z_impl_k_mutex_lock+0x10c>)
    fd60:	689b      	ldr	r3, [r3, #8]
    fd62:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    fd66:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    fd68:	3101      	adds	r1, #1
    fd6a:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    fd6c:	4b36      	ldr	r3, [pc, #216]	; (fe48 <z_impl_k_mutex_lock+0x10c>)
    fd6e:	689b      	ldr	r3, [r3, #8]
    fd70:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    fd72:	f387 8811 	msr	BASEPRI, r7
    fd76:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    fd7a:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    fd7c:	b003      	add	sp, #12
    fd7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    fd82:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    fd84:	6882      	ldr	r2, [r0, #8]
    fd86:	4b30      	ldr	r3, [pc, #192]	; (fe48 <z_impl_k_mutex_lock+0x10c>)
    fd88:	689b      	ldr	r3, [r3, #8]
    fd8a:	429a      	cmp	r2, r3
    fd8c:	d0e5      	beq.n	fd5a <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    fd8e:	ea55 0106 	orrs.w	r1, r5, r6
    fd92:	bf0c      	ite	eq
    fd94:	f04f 0801 	moveq.w	r8, #1
    fd98:	f04f 0800 	movne.w	r8, #0
    fd9c:	d031      	beq.n	fe02 <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
    fd9e:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    fda2:	4649      	mov	r1, r9
    fda4:	f993 000e 	ldrsb.w	r0, [r3, #14]
    fda8:	f005 ff18 	bl	15bdc <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    fdac:	4581      	cmp	r9, r0
    fdae:	dc2f      	bgt.n	fe10 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
    fdb0:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    fdb4:	9600      	str	r6, [sp, #0]
    fdb6:	9501      	str	r5, [sp, #4]
    fdb8:	4622      	mov	r2, r4
    fdba:	4639      	mov	r1, r7
    fdbc:	4823      	ldr	r0, [pc, #140]	; (fe4c <z_impl_k_mutex_lock+0x110>)
    fdbe:	f000 fc39 	bl	10634 <z_pend_curr>
	if (got_mutex == 0) {
    fdc2:	2800      	cmp	r0, #0
    fdc4:	d0da      	beq.n	fd7c <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
    fdc6:	f04f 0320 	mov.w	r3, #32
    fdca:	f3ef 8511 	mrs	r5, BASEPRI
    fdce:	f383 8812 	msr	BASEPRI_MAX, r3
    fdd2:	f3bf 8f6f 	isb	sy
	return list->head == list;
    fdd6:	6823      	ldr	r3, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    fdd8:	42a3      	cmp	r3, r4
    fdda:	d01f      	beq.n	fe1c <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    fddc:	b1f3      	cbz	r3, fe1c <z_impl_k_mutex_lock+0xe0>
    fdde:	6921      	ldr	r1, [r4, #16]
    fde0:	f993 000e 	ldrsb.w	r0, [r3, #14]
    fde4:	f005 fefa 	bl	15bdc <new_prio_for_inheritance>
    fde8:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    fdea:	4620      	mov	r0, r4
    fdec:	f005 ff01 	bl	15bf2 <adjust_owner_prio>
    fdf0:	b9b0      	cbnz	r0, fe20 <z_impl_k_mutex_lock+0xe4>
    fdf2:	f1b9 0f00 	cmp.w	r9, #0
    fdf6:	d015      	beq.n	fe24 <z_impl_k_mutex_lock+0xe8>
    fdf8:	f04f 0801 	mov.w	r8, #1
    fdfc:	e012      	b.n	fe24 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    fdfe:	6923      	ldr	r3, [r4, #16]
    fe00:	e7b1      	b.n	fd66 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
    fe02:	f387 8811 	msr	BASEPRI, r7
    fe06:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    fe0a:	f06f 000f 	mvn.w	r0, #15
    fe0e:	e7b5      	b.n	fd7c <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
    fe10:	4601      	mov	r1, r0
    fe12:	4620      	mov	r0, r4
    fe14:	f005 feed 	bl	15bf2 <adjust_owner_prio>
    fe18:	4681      	mov	r9, r0
    fe1a:	e7cb      	b.n	fdb4 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    fe1c:	6921      	ldr	r1, [r4, #16]
    fe1e:	e7e4      	b.n	fdea <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    fe20:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    fe24:	f1b8 0f00 	cmp.w	r8, #0
    fe28:	d106      	bne.n	fe38 <z_impl_k_mutex_lock+0xfc>
    fe2a:	f385 8811 	msr	BASEPRI, r5
    fe2e:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    fe32:	f06f 000a 	mvn.w	r0, #10
    fe36:	e7a1      	b.n	fd7c <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
    fe38:	4629      	mov	r1, r5
    fe3a:	4804      	ldr	r0, [pc, #16]	; (fe4c <z_impl_k_mutex_lock+0x110>)
    fe3c:	f000 fa96 	bl	1036c <z_reschedule>
	return -EAGAIN;
    fe40:	f06f 000a 	mvn.w	r0, #10
    fe44:	e79a      	b.n	fd7c <z_impl_k_mutex_lock+0x40>
    fe46:	bf00      	nop
    fe48:	20002f60 	.word	0x20002f60
    fe4c:	20002f8c 	.word	0x20002f8c

0000fe50 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    fe50:	6882      	ldr	r2, [r0, #8]
    fe52:	2a00      	cmp	r2, #0
    fe54:	d035      	beq.n	fec2 <z_impl_k_mutex_unlock+0x72>
{
    fe56:	b538      	push	{r3, r4, r5, lr}
    fe58:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    fe5a:	4b1d      	ldr	r3, [pc, #116]	; (fed0 <z_impl_k_mutex_unlock+0x80>)
    fe5c:	689b      	ldr	r3, [r3, #8]
    fe5e:	429a      	cmp	r2, r3
    fe60:	d132      	bne.n	fec8 <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    fe62:	7bda      	ldrb	r2, [r3, #15]
    fe64:	3a01      	subs	r2, #1
    fe66:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    fe68:	68c3      	ldr	r3, [r0, #12]
    fe6a:	2b01      	cmp	r3, #1
    fe6c:	d905      	bls.n	fe7a <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    fe6e:	3b01      	subs	r3, #1
    fe70:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    fe72:	f000 fc95 	bl	107a0 <k_sched_unlock>

	return 0;
    fe76:	2000      	movs	r0, #0
}
    fe78:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    fe7a:	f04f 0320 	mov.w	r3, #32
    fe7e:	f3ef 8511 	mrs	r5, BASEPRI
    fe82:	f383 8812 	msr	BASEPRI_MAX, r3
    fe86:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    fe8a:	6901      	ldr	r1, [r0, #16]
    fe8c:	f005 feb1 	bl	15bf2 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    fe90:	4620      	mov	r0, r4
    fe92:	f006 f8b4 	bl	15ffe <z_unpend_first_thread>
	mutex->owner = new_owner;
    fe96:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    fe98:	b160      	cbz	r0, feb4 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    fe9a:	f990 300e 	ldrsb.w	r3, [r0, #14]
    fe9e:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    fea0:	2300      	movs	r3, #0
    fea2:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    fea6:	f005 ffe8 	bl	15e7a <z_ready_thread>
		z_reschedule(&lock, key);
    feaa:	4629      	mov	r1, r5
    feac:	4809      	ldr	r0, [pc, #36]	; (fed4 <z_impl_k_mutex_unlock+0x84>)
    feae:	f000 fa5d 	bl	1036c <z_reschedule>
    feb2:	e7de      	b.n	fe72 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    feb4:	2300      	movs	r3, #0
    feb6:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
    feb8:	f385 8811 	msr	BASEPRI, r5
    febc:	f3bf 8f6f 	isb	sy
    fec0:	e7d7      	b.n	fe72 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    fec2:	f06f 0015 	mvn.w	r0, #21
}
    fec6:	4770      	bx	lr
		return -EPERM;
    fec8:	f04f 30ff 	mov.w	r0, #4294967295
    fecc:	e7d4      	b.n	fe78 <z_impl_k_mutex_unlock+0x28>
    fece:	bf00      	nop
    fed0:	20002f60 	.word	0x20002f60
    fed4:	20002f8c 	.word	0x20002f8c

0000fed8 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    fed8:	b5d0      	push	{r4, r6, r7, lr}
    feda:	b082      	sub	sp, #8
    fedc:	4601      	mov	r1, r0
    fede:	4616      	mov	r6, r2
    fee0:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    fee2:	4602      	mov	r2, r0
	__asm__ volatile(
    fee4:	f04f 0320 	mov.w	r3, #32
    fee8:	f3ef 8411 	mrs	r4, BASEPRI
    feec:	f383 8812 	msr	BASEPRI_MAX, r3
    fef0:	f3bf 8f6f 	isb	sy
    fef4:	f852 0b08 	ldr.w	r0, [r2], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    fef8:	b188      	cbz	r0, ff1e <z_impl_k_queue_get+0x46>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    fefa:	6803      	ldr	r3, [r0, #0]
    fefc:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
    ff00:	600b      	str	r3, [r1, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
    ff02:	684a      	ldr	r2, [r1, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    ff04:	4290      	cmp	r0, r2
    ff06:	d008      	beq.n	ff1a <z_impl_k_queue_get+0x42>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    ff08:	2101      	movs	r1, #1
    ff0a:	f005 fef2 	bl	15cf2 <z_queue_node_peek>
	__asm__ volatile(
    ff0e:	f384 8811 	msr	BASEPRI, r4
    ff12:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    ff16:	b002      	add	sp, #8
    ff18:	bdd0      	pop	{r4, r6, r7, pc}
	list->tail = node;
    ff1a:	604b      	str	r3, [r1, #4]
}
    ff1c:	e7f4      	b.n	ff08 <z_impl_k_queue_get+0x30>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    ff1e:	ea56 0307 	orrs.w	r3, r6, r7
    ff22:	d00a      	beq.n	ff3a <z_impl_k_queue_get+0x62>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    ff24:	e9cd 6700 	strd	r6, r7, [sp]
    ff28:	4621      	mov	r1, r4
    ff2a:	4610      	mov	r0, r2
    ff2c:	f000 fb82 	bl	10634 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    ff30:	b948      	cbnz	r0, ff46 <z_impl_k_queue_get+0x6e>
    ff32:	4b06      	ldr	r3, [pc, #24]	; (ff4c <z_impl_k_queue_get+0x74>)
    ff34:	689b      	ldr	r3, [r3, #8]
    ff36:	6958      	ldr	r0, [r3, #20]
    ff38:	e7ed      	b.n	ff16 <z_impl_k_queue_get+0x3e>
    ff3a:	f384 8811 	msr	BASEPRI, r4
    ff3e:	f3bf 8f6f 	isb	sy
		return NULL;
    ff42:	2000      	movs	r0, #0
    ff44:	e7e7      	b.n	ff16 <z_impl_k_queue_get+0x3e>
	return (ret != 0) ? NULL : _current->base.swap_data;
    ff46:	2000      	movs	r0, #0
    ff48:	e7e5      	b.n	ff16 <z_impl_k_queue_get+0x3e>
    ff4a:	bf00      	nop
    ff4c:	20002f60 	.word	0x20002f60

0000ff50 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    ff50:	b538      	push	{r3, r4, r5, lr}
    ff52:	4604      	mov	r4, r0
	__asm__ volatile(
    ff54:	f04f 0320 	mov.w	r3, #32
    ff58:	f3ef 8511 	mrs	r5, BASEPRI
    ff5c:	f383 8812 	msr	BASEPRI_MAX, r3
    ff60:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    ff64:	f006 f84b 	bl	15ffe <z_unpend_first_thread>

	if (thread != NULL) {
    ff68:	b148      	cbz	r0, ff7e <z_impl_k_sem_give+0x2e>
    ff6a:	2200      	movs	r2, #0
    ff6c:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    ff70:	f005 ff83 	bl	15e7a <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    ff74:	4629      	mov	r1, r5
    ff76:	4807      	ldr	r0, [pc, #28]	; (ff94 <z_impl_k_sem_give+0x44>)
    ff78:	f000 f9f8 	bl	1036c <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    ff7c:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    ff7e:	68a3      	ldr	r3, [r4, #8]
    ff80:	68e2      	ldr	r2, [r4, #12]
    ff82:	4293      	cmp	r3, r2
    ff84:	d003      	beq.n	ff8e <z_impl_k_sem_give+0x3e>
    ff86:	2201      	movs	r2, #1
    ff88:	4413      	add	r3, r2
    ff8a:	60a3      	str	r3, [r4, #8]
}
    ff8c:	e7f2      	b.n	ff74 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    ff8e:	2200      	movs	r2, #0
    ff90:	e7fa      	b.n	ff88 <z_impl_k_sem_give+0x38>
    ff92:	bf00      	nop
    ff94:	20002f8c 	.word	0x20002f8c

0000ff98 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    ff98:	b530      	push	{r4, r5, lr}
    ff9a:	b083      	sub	sp, #12
    ff9c:	461d      	mov	r5, r3
    ff9e:	f04f 0320 	mov.w	r3, #32
    ffa2:	f3ef 8111 	mrs	r1, BASEPRI
    ffa6:	f383 8812 	msr	BASEPRI_MAX, r3
    ffaa:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    ffae:	6883      	ldr	r3, [r0, #8]
    ffb0:	b143      	cbz	r3, ffc4 <z_impl_k_sem_take+0x2c>
		sem->count--;
    ffb2:	3b01      	subs	r3, #1
    ffb4:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    ffb6:	f381 8811 	msr	BASEPRI, r1
    ffba:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    ffbe:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    ffc0:	b003      	add	sp, #12
    ffc2:	bd30      	pop	{r4, r5, pc}
    ffc4:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    ffc6:	ea54 0305 	orrs.w	r3, r4, r5
    ffca:	d006      	beq.n	ffda <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    ffcc:	e9cd 4500 	strd	r4, r5, [sp]
    ffd0:	4602      	mov	r2, r0
    ffd2:	4805      	ldr	r0, [pc, #20]	; (ffe8 <z_impl_k_sem_take+0x50>)
    ffd4:	f000 fb2e 	bl	10634 <z_pend_curr>
	return ret;
    ffd8:	e7f2      	b.n	ffc0 <z_impl_k_sem_take+0x28>
    ffda:	f381 8811 	msr	BASEPRI, r1
    ffde:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    ffe2:	f06f 000f 	mvn.w	r0, #15
    ffe6:	e7eb      	b.n	ffc0 <z_impl_k_sem_take+0x28>
    ffe8:	20002f8c 	.word	0x20002f8c

0000ffec <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
    ffec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ffee:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
    fff0:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    fff2:	f013 0f02 	tst.w	r3, #2
    fff6:	d15b      	bne.n	100b0 <submit_to_queue_locked+0xc4>
    fff8:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    fffa:	f013 0f04 	tst.w	r3, #4
    fffe:	d15c      	bne.n	100ba <submit_to_queue_locked+0xce>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
   10000:	680b      	ldr	r3, [r1, #0]
   10002:	2b00      	cmp	r3, #0
   10004:	d037      	beq.n	10076 <submit_to_queue_locked+0x8a>
	return (*flagp & BIT(bit)) != 0U;
   10006:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   10008:	f013 0f01 	tst.w	r3, #1
   1000c:	d036      	beq.n	1007c <submit_to_queue_locked+0x90>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
   1000e:	68a3      	ldr	r3, [r4, #8]
   10010:	602b      	str	r3, [r5, #0]
			ret = 2;
   10012:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
   10014:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
   10016:	2e00      	cmp	r6, #0
   10018:	d03e      	beq.n	10098 <submit_to_queue_locked+0xac>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   1001a:	4b29      	ldr	r3, [pc, #164]	; (100c0 <submit_to_queue_locked+0xd4>)
   1001c:	689b      	ldr	r3, [r3, #8]
   1001e:	42b3      	cmp	r3, r6
   10020:	d02e      	beq.n	10080 <submit_to_queue_locked+0x94>
   10022:	2300      	movs	r3, #0
   10024:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
   10026:	f8d6 30c8 	ldr.w	r3, [r6, #200]	; 0xc8
   1002a:	f3c3 0180 	ubfx	r1, r3, #2, #1
   1002e:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   10032:	f013 0f01 	tst.w	r3, #1
   10036:	d032      	beq.n	1009e <submit_to_queue_locked+0xb2>
	} else if (draining && !chained) {
   10038:	b101      	cbz	r1, 1003c <submit_to_queue_locked+0x50>
   1003a:	b39a      	cbz	r2, 100a4 <submit_to_queue_locked+0xb8>
	} else if (plugged && !draining) {
   1003c:	b100      	cbz	r0, 10040 <submit_to_queue_locked+0x54>
   1003e:	b3a1      	cbz	r1, 100aa <submit_to_queue_locked+0xbe>
	parent->next = child;
   10040:	2300      	movs	r3, #0
   10042:	6023      	str	r3, [r4, #0]
	return list->tail;
   10044:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
Z_GENLIST_APPEND(slist, snode)
   10048:	b30b      	cbz	r3, 1008e <submit_to_queue_locked+0xa2>
	parent->next = child;
   1004a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1004c:	f8c6 40b4 	str.w	r4, [r6, #180]	; 0xb4
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   10050:	2200      	movs	r2, #0
   10052:	4611      	mov	r1, r2
   10054:	f106 00b8 	add.w	r0, r6, #184	; 0xb8
   10058:	f006 f80d 	bl	16076 <z_sched_wake>
		ret = 1;
   1005c:	2001      	movs	r0, #1

		if (rc < 0) {
   1005e:	2800      	cmp	r0, #0
   10060:	db06      	blt.n	10070 <submit_to_queue_locked+0x84>
	*flagp |= BIT(bit);
   10062:	68e3      	ldr	r3, [r4, #12]
   10064:	f043 0304 	orr.w	r3, r3, #4
   10068:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
   1006a:	682b      	ldr	r3, [r5, #0]
   1006c:	60a3      	str	r3, [r4, #8]
   1006e:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
   10070:	2800      	cmp	r0, #0
   10072:	dc21      	bgt.n	100b8 <submit_to_queue_locked+0xcc>
   10074:	e01e      	b.n	100b4 <submit_to_queue_locked+0xc8>
			*queuep = work->queue;
   10076:	6883      	ldr	r3, [r0, #8]
   10078:	600b      	str	r3, [r1, #0]
   1007a:	e7c4      	b.n	10006 <submit_to_queue_locked+0x1a>
		ret = 1;
   1007c:	2701      	movs	r7, #1
   1007e:	e7c9      	b.n	10014 <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   10080:	f005 fd61 	bl	15b46 <k_is_in_isr>
   10084:	b908      	cbnz	r0, 1008a <submit_to_queue_locked+0x9e>
   10086:	2301      	movs	r3, #1
   10088:	e7cc      	b.n	10024 <submit_to_queue_locked+0x38>
   1008a:	2300      	movs	r3, #0
   1008c:	e7ca      	b.n	10024 <submit_to_queue_locked+0x38>
   1008e:	f8c6 40b4 	str.w	r4, [r6, #180]	; 0xb4
	list->head = node;
   10092:	f8c6 40b0 	str.w	r4, [r6, #176]	; 0xb0
}
   10096:	e7db      	b.n	10050 <submit_to_queue_locked+0x64>
		return -EINVAL;
   10098:	f06f 0015 	mvn.w	r0, #21
   1009c:	e7df      	b.n	1005e <submit_to_queue_locked+0x72>
		ret = -ENODEV;
   1009e:	f06f 0012 	mvn.w	r0, #18
   100a2:	e7dc      	b.n	1005e <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   100a4:	f06f 000f 	mvn.w	r0, #15
   100a8:	e7d9      	b.n	1005e <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   100aa:	f06f 000f 	mvn.w	r0, #15
   100ae:	e7d6      	b.n	1005e <submit_to_queue_locked+0x72>
		ret = -EBUSY;
   100b0:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
   100b4:	2300      	movs	r3, #0
   100b6:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
   100b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
   100ba:	2000      	movs	r0, #0
   100bc:	e7fa      	b.n	100b4 <submit_to_queue_locked+0xc8>
   100be:	bf00      	nop
   100c0:	20002f60 	.word	0x20002f60

000100c4 <finalize_cancel_locked>:
{
   100c4:	b570      	push	{r4, r5, r6, lr}
   100c6:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
   100c8:	68c3      	ldr	r3, [r0, #12]
   100ca:	f023 0302 	bic.w	r3, r3, #2
   100ce:	60c3      	str	r3, [r0, #12]
	return list->head;
   100d0:	4b19      	ldr	r3, [pc, #100]	; (10138 <finalize_cancel_locked+0x74>)
   100d2:	6818      	ldr	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   100d4:	b1e8      	cbz	r0, 10112 <finalize_cancel_locked+0x4e>
   100d6:	4604      	mov	r4, r0
Z_GENLIST_PEEK_NEXT(slist, snode)
   100d8:	b100      	cbz	r0, 100dc <finalize_cancel_locked+0x18>
	return node->next;
   100da:	6804      	ldr	r4, [r0, #0]
   100dc:	2600      	movs	r6, #0
   100de:	e01d      	b.n	1011c <finalize_cancel_locked+0x58>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
   100e0:	b15e      	cbz	r6, 100fa <finalize_cancel_locked+0x36>
	return node->next;
   100e2:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
   100e4:	6033      	str	r3, [r6, #0]
	return list->tail;
   100e6:	4b14      	ldr	r3, [pc, #80]	; (10138 <finalize_cancel_locked+0x74>)
   100e8:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   100ea:	4298      	cmp	r0, r3
   100ec:	d00e      	beq.n	1010c <finalize_cancel_locked+0x48>
	parent->next = child;
   100ee:	2300      	movs	r3, #0
   100f0:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
   100f4:	f7ff ff2c 	bl	ff50 <z_impl_k_sem_give>
}
   100f8:	e015      	b.n	10126 <finalize_cancel_locked+0x62>
	return node->next;
   100fa:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   100fc:	4b0e      	ldr	r3, [pc, #56]	; (10138 <finalize_cancel_locked+0x74>)
   100fe:	601a      	str	r2, [r3, #0]
	return list->tail;
   10100:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   10102:	4298      	cmp	r0, r3
   10104:	d1f3      	bne.n	100ee <finalize_cancel_locked+0x2a>
	list->tail = node;
   10106:	4b0c      	ldr	r3, [pc, #48]	; (10138 <finalize_cancel_locked+0x74>)
   10108:	605a      	str	r2, [r3, #4]
}
   1010a:	e7f0      	b.n	100ee <finalize_cancel_locked+0x2a>
	list->tail = node;
   1010c:	4b0a      	ldr	r3, [pc, #40]	; (10138 <finalize_cancel_locked+0x74>)
   1010e:	605e      	str	r6, [r3, #4]
}
   10110:	e7ed      	b.n	100ee <finalize_cancel_locked+0x2a>
   10112:	4604      	mov	r4, r0
   10114:	e7e2      	b.n	100dc <finalize_cancel_locked+0x18>
   10116:	4623      	mov	r3, r4
   10118:	4620      	mov	r0, r4
   1011a:	461c      	mov	r4, r3
   1011c:	b150      	cbz	r0, 10134 <finalize_cancel_locked+0x70>
		if (wc->work == work) {
   1011e:	6843      	ldr	r3, [r0, #4]
   10120:	42ab      	cmp	r3, r5
   10122:	d0dd      	beq.n	100e0 <finalize_cancel_locked+0x1c>
			prev = &wc->node;
   10124:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   10126:	2c00      	cmp	r4, #0
   10128:	d0f5      	beq.n	10116 <finalize_cancel_locked+0x52>
   1012a:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   1012c:	2c00      	cmp	r4, #0
   1012e:	d0f3      	beq.n	10118 <finalize_cancel_locked+0x54>
	return node->next;
   10130:	6823      	ldr	r3, [r4, #0]
   10132:	e7f1      	b.n	10118 <finalize_cancel_locked+0x54>
}
   10134:	bd70      	pop	{r4, r5, r6, pc}
   10136:	bf00      	nop
   10138:	20002f8c 	.word	0x20002f8c

0001013c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   1013c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1013e:	b085      	sub	sp, #20
   10140:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
   10142:	e016      	b.n	10172 <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
   10144:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
	*flagp &= ~BIT(bit);
   10148:	f023 0204 	bic.w	r2, r3, #4
   1014c:	f8c5 20c8 	str.w	r2, [r5, #200]	; 0xc8
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   10150:	f013 0f04 	tst.w	r3, #4
   10154:	d158      	bne.n	10208 <work_queue_main+0xcc>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   10156:	2300      	movs	r3, #0
   10158:	9302      	str	r3, [sp, #8]
   1015a:	f04f 32ff 	mov.w	r2, #4294967295
   1015e:	f04f 33ff 	mov.w	r3, #4294967295
   10162:	e9cd 2300 	strd	r2, r3, [sp]
   10166:	f105 02b8 	add.w	r2, r5, #184	; 0xb8
   1016a:	4631      	mov	r1, r6
   1016c:	482e      	ldr	r0, [pc, #184]	; (10228 <work_queue_main+0xec>)
   1016e:	f000 fccb 	bl	10b08 <z_sched_wait>
	__asm__ volatile(
   10172:	f04f 0320 	mov.w	r3, #32
   10176:	f3ef 8611 	mrs	r6, BASEPRI
   1017a:	f383 8812 	msr	BASEPRI_MAX, r3
   1017e:	f3bf 8f6f 	isb	sy
	return list->head;
   10182:	f8d5 40b0 	ldr.w	r4, [r5, #176]	; 0xb0
Z_GENLIST_GET(slist, snode)
   10186:	2c00      	cmp	r4, #0
   10188:	d0dc      	beq.n	10144 <work_queue_main+0x8>
	return node->next;
   1018a:	6823      	ldr	r3, [r4, #0]
	list->head = node;
   1018c:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
	return list->tail;
   10190:	f8d5 20b4 	ldr.w	r2, [r5, #180]	; 0xb4
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10194:	4294      	cmp	r4, r2
   10196:	d034      	beq.n	10202 <work_queue_main+0xc6>
	*flagp |= BIT(bit);
   10198:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
   1019c:	f043 0302 	orr.w	r3, r3, #2
   101a0:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
   101a4:	68e3      	ldr	r3, [r4, #12]
   101a6:	f043 0301 	orr.w	r3, r3, #1
	*flagp &= ~BIT(bit);
   101aa:	f023 0304 	bic.w	r3, r3, #4
   101ae:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
   101b0:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
   101b2:	2c00      	cmp	r4, #0
   101b4:	d0cf      	beq.n	10156 <work_queue_main+0x1a>
	__asm__ volatile(
   101b6:	f386 8811 	msr	BASEPRI, r6
   101ba:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
   101be:	4620      	mov	r0, r4
   101c0:	4798      	blx	r3
	__asm__ volatile(
   101c2:	f04f 0320 	mov.w	r3, #32
   101c6:	f3ef 8611 	mrs	r6, BASEPRI
   101ca:	f383 8812 	msr	BASEPRI_MAX, r3
   101ce:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
   101d2:	68e3      	ldr	r3, [r4, #12]
   101d4:	f023 0301 	bic.w	r3, r3, #1
   101d8:	60e3      	str	r3, [r4, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   101da:	f013 0f02 	tst.w	r3, #2
   101de:	d11e      	bne.n	1021e <work_queue_main+0xe2>
	*flagp &= ~BIT(bit);
   101e0:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
   101e4:	f023 0302 	bic.w	r3, r3, #2
   101e8:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
	return (*flagp & BIT(bit)) != 0U;
   101ec:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
   101f0:	f386 8811 	msr	BASEPRI, r6
   101f4:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
   101f8:	2b00      	cmp	r3, #0
   101fa:	d1ba      	bne.n	10172 <work_queue_main+0x36>
	z_impl_k_yield();
   101fc:	f000 fb52 	bl	108a4 <z_impl_k_yield>
}
   10200:	e7b7      	b.n	10172 <work_queue_main+0x36>
	list->tail = node;
   10202:	f8c5 30b4 	str.w	r3, [r5, #180]	; 0xb4
}
   10206:	e7c7      	b.n	10198 <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   10208:	f105 07c0 	add.w	r7, r5, #192	; 0xc0
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   1020c:	2200      	movs	r2, #0
   1020e:	2101      	movs	r1, #1
   10210:	4638      	mov	r0, r7
   10212:	f005 ff30 	bl	16076 <z_sched_wake>
   10216:	2800      	cmp	r0, #0
   10218:	d1f8      	bne.n	1020c <work_queue_main+0xd0>
		k_work_handler_t handler = NULL;
   1021a:	2300      	movs	r3, #0
   1021c:	e7c9      	b.n	101b2 <work_queue_main+0x76>
				finalize_cancel_locked(work);
   1021e:	4620      	mov	r0, r4
   10220:	f7ff ff50 	bl	100c4 <finalize_cancel_locked>
   10224:	e7dc      	b.n	101e0 <work_queue_main+0xa4>
   10226:	bf00      	nop
   10228:	20002f8c 	.word	0x20002f8c

0001022c <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
   1022c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1022e:	b089      	sub	sp, #36	; 0x24
   10230:	4604      	mov	r4, r0
   10232:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
   10234:	2000      	movs	r0, #0
   10236:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
	list->tail = NULL;
   1023a:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
   1023e:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
	list->head = (sys_dnode_t *)list;
   10242:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = (sys_dnode_t *)list;
   10246:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
   1024a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
   1024e:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
   10252:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
   10256:	b1fd      	cbz	r5, 10298 <k_work_queue_start+0x6c>
   10258:	7928      	ldrb	r0, [r5, #4]
   1025a:	b9f8      	cbnz	r0, 1029c <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   1025c:	2001      	movs	r0, #1
	*flagp = flags;
   1025e:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   10262:	f04f 36ff 	mov.w	r6, #4294967295
   10266:	f04f 37ff 	mov.w	r7, #4294967295
   1026a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1026e:	2000      	movs	r0, #0
   10270:	9004      	str	r0, [sp, #16]
   10272:	9303      	str	r3, [sp, #12]
   10274:	9002      	str	r0, [sp, #8]
   10276:	9001      	str	r0, [sp, #4]
   10278:	9400      	str	r4, [sp, #0]
   1027a:	4b0a      	ldr	r3, [pc, #40]	; (102a4 <k_work_queue_start+0x78>)
   1027c:	4620      	mov	r0, r4
   1027e:	f005 fc79 	bl	15b74 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
   10282:	b125      	cbz	r5, 1028e <k_work_queue_start+0x62>
   10284:	6829      	ldr	r1, [r5, #0]
   10286:	b111      	cbz	r1, 1028e <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
   10288:	4620      	mov	r0, r4
   1028a:	f7ff fc73 	bl	fb74 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   1028e:	4620      	mov	r0, r4
   10290:	f005 fc61 	bl	15b56 <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
   10294:	b009      	add	sp, #36	; 0x24
   10296:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
   10298:	2001      	movs	r0, #1
   1029a:	e7e0      	b.n	1025e <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
   1029c:	f240 1001 	movw	r0, #257	; 0x101
   102a0:	e7dd      	b.n	1025e <k_work_queue_start+0x32>
   102a2:	bf00      	nop
   102a4:	0001013d 	.word	0x0001013d

000102a8 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
   102a8:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   102aa:	f1b3 3fff 	cmp.w	r3, #4294967295
   102ae:	bf08      	it	eq
   102b0:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   102b4:	d100      	bne.n	102b8 <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
   102b6:	bd38      	pop	{r3, r4, r5, pc}
   102b8:	4902      	ldr	r1, [pc, #8]	; (102c4 <add_thread_timeout+0x1c>)
   102ba:	3018      	adds	r0, #24
   102bc:	f000 fc98 	bl	10bf0 <z_add_timeout>
   102c0:	e7f9      	b.n	102b6 <add_thread_timeout+0xe>
   102c2:	bf00      	nop
   102c4:	00015eb3 	.word	0x00015eb3

000102c8 <z_reset_time_slice>:
{
   102c8:	b508      	push	{r3, lr}
	if (slice_time != 0) {
   102ca:	4b08      	ldr	r3, [pc, #32]	; (102ec <z_reset_time_slice+0x24>)
   102cc:	681b      	ldr	r3, [r3, #0]
   102ce:	b903      	cbnz	r3, 102d2 <z_reset_time_slice+0xa>
}
   102d0:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   102d2:	f7f9 fed3 	bl	a07c <sys_clock_elapsed>
   102d6:	4603      	mov	r3, r0
   102d8:	4a04      	ldr	r2, [pc, #16]	; (102ec <z_reset_time_slice+0x24>)
   102da:	6810      	ldr	r0, [r2, #0]
   102dc:	4403      	add	r3, r0
   102de:	4a04      	ldr	r2, [pc, #16]	; (102f0 <z_reset_time_slice+0x28>)
   102e0:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   102e2:	2100      	movs	r1, #0
   102e4:	f005 ff49 	bl	1617a <z_set_timeout_expiry>
}
   102e8:	e7f2      	b.n	102d0 <z_reset_time_slice+0x8>
   102ea:	bf00      	nop
   102ec:	20002f9c 	.word	0x20002f9c
   102f0:	20002f60 	.word	0x20002f60

000102f4 <k_sched_time_slice_set>:
{
   102f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   102f8:	4606      	mov	r6, r0
   102fa:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
   102fc:	2300      	movs	r3, #0
	__asm__ volatile(
   102fe:	f04f 0220 	mov.w	r2, #32
   10302:	f3ef 8711 	mrs	r7, BASEPRI
   10306:	f382 8812 	msr	BASEPRI_MAX, r2
   1030a:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1030e:	e009      	b.n	10324 <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
   10310:	4b13      	ldr	r3, [pc, #76]	; (10360 <k_sched_time_slice_set+0x6c>)
   10312:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
   10316:	f7ff ffd7 	bl	102c8 <z_reset_time_slice>
	__asm__ volatile(
   1031a:	f387 8811 	msr	BASEPRI, r7
   1031e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   10322:	2301      	movs	r3, #1
   10324:	b9cb      	cbnz	r3, 1035a <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
   10326:	2300      	movs	r3, #0
   10328:	4a0e      	ldr	r2, [pc, #56]	; (10364 <k_sched_time_slice_set+0x70>)
   1032a:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
   1032c:	0c75      	lsrs	r5, r6, #17
   1032e:	03f4      	lsls	r4, r6, #15
   10330:	f240 30e7 	movw	r0, #999	; 0x3e7
   10334:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10338:	2300      	movs	r3, #0
   1033a:	1820      	adds	r0, r4, r0
   1033c:	f04f 0100 	mov.w	r1, #0
   10340:	eb45 0101 	adc.w	r1, r5, r1
   10344:	f7f0 fe7c 	bl	1040 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   10348:	4b07      	ldr	r3, [pc, #28]	; (10368 <k_sched_time_slice_set+0x74>)
   1034a:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   1034c:	2e00      	cmp	r6, #0
   1034e:	dddf      	ble.n	10310 <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
   10350:	2802      	cmp	r0, #2
   10352:	bfb8      	it	lt
   10354:	2002      	movlt	r0, #2
   10356:	6018      	str	r0, [r3, #0]
   10358:	e7da      	b.n	10310 <k_sched_time_slice_set+0x1c>
}
   1035a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1035e:	bf00      	nop
   10360:	20002f98 	.word	0x20002f98
   10364:	20002f60 	.word	0x20002f60
   10368:	20002f9c 	.word	0x20002f9c

0001036c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   1036c:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
   1036e:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   10370:	b921      	cbnz	r1, 1037c <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   10372:	f3ef 8305 	mrs	r3, IPSR
   10376:	b913      	cbnz	r3, 1037e <z_reschedule+0x12>
   10378:	2101      	movs	r1, #1
   1037a:	e000      	b.n	1037e <z_reschedule+0x12>
   1037c:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
   1037e:	f011 0f01 	tst.w	r1, #1
   10382:	d007      	beq.n	10394 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
   10384:	4b06      	ldr	r3, [pc, #24]	; (103a0 <z_reschedule+0x34>)
   10386:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
   10388:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
   1038a:	429a      	cmp	r2, r3
   1038c:	d002      	beq.n	10394 <z_reschedule+0x28>
	ret = arch_swap(key);
   1038e:	f7f5 fa97 	bl	58c0 <arch_swap>
		z_swap(lock, key);
   10392:	e003      	b.n	1039c <z_reschedule+0x30>
   10394:	f380 8811 	msr	BASEPRI, r0
   10398:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
   1039c:	bd08      	pop	{r3, pc}
   1039e:	bf00      	nop
   103a0:	20002f60 	.word	0x20002f60

000103a4 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
   103a4:	2300      	movs	r3, #0
	__asm__ volatile(
   103a6:	f04f 0220 	mov.w	r2, #32
   103aa:	f3ef 8111 	mrs	r1, BASEPRI
   103ae:	f382 8812 	msr	BASEPRI_MAX, r2
   103b2:	f3bf 8f6f 	isb	sy
   103b6:	b953      	cbnz	r3, 103ce <k_sched_lock+0x2a>
	--_current->base.sched_locked;
   103b8:	4b05      	ldr	r3, [pc, #20]	; (103d0 <k_sched_lock+0x2c>)
   103ba:	689a      	ldr	r2, [r3, #8]
   103bc:	7bd3      	ldrb	r3, [r2, #15]
   103be:	3b01      	subs	r3, #1
   103c0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   103c2:	f381 8811 	msr	BASEPRI, r1
   103c6:	f3bf 8f6f 	isb	sy
   103ca:	2301      	movs	r3, #1
   103cc:	e7f3      	b.n	103b6 <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   103ce:	4770      	bx	lr
   103d0:	20002f60 	.word	0x20002f60

000103d4 <update_cache>:
{
   103d4:	b538      	push	{r3, r4, r5, lr}
   103d6:	4604      	mov	r4, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
   103d8:	480f      	ldr	r0, [pc, #60]	; (10418 <update_cache+0x44>)
   103da:	f005 fd47 	bl	15e6c <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   103de:	4605      	mov	r5, r0
   103e0:	b170      	cbz	r0, 10400 <update_cache+0x2c>
	if (preempt_ok != 0) {
   103e2:	b984      	cbnz	r4, 10406 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
   103e4:	4b0d      	ldr	r3, [pc, #52]	; (1041c <update_cache+0x48>)
   103e6:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
   103e8:	7b5a      	ldrb	r2, [r3, #13]
   103ea:	f012 0f1f 	tst.w	r2, #31
   103ee:	d10a      	bne.n	10406 <update_cache+0x32>
	return node->next != NULL;
   103f0:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   103f2:	b942      	cbnz	r2, 10406 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   103f4:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
   103f6:	2a7f      	cmp	r2, #127	; 0x7f
   103f8:	d905      	bls.n	10406 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
   103fa:	4a08      	ldr	r2, [pc, #32]	; (1041c <update_cache+0x48>)
   103fc:	61d3      	str	r3, [r2, #28]
   103fe:	e00a      	b.n	10416 <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   10400:	4b06      	ldr	r3, [pc, #24]	; (1041c <update_cache+0x48>)
   10402:	68dd      	ldr	r5, [r3, #12]
   10404:	e7ed      	b.n	103e2 <update_cache+0xe>
		if (thread != _current) {
   10406:	4b05      	ldr	r3, [pc, #20]	; (1041c <update_cache+0x48>)
   10408:	689b      	ldr	r3, [r3, #8]
   1040a:	42ab      	cmp	r3, r5
   1040c:	d001      	beq.n	10412 <update_cache+0x3e>
			z_reset_time_slice();
   1040e:	f7ff ff5b 	bl	102c8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   10412:	4b02      	ldr	r3, [pc, #8]	; (1041c <update_cache+0x48>)
   10414:	61dd      	str	r5, [r3, #28]
}
   10416:	bd38      	pop	{r3, r4, r5, pc}
   10418:	20002f80 	.word	0x20002f80
   1041c:	20002f60 	.word	0x20002f60

00010420 <move_thread_to_end_of_prio_q>:
{
   10420:	b538      	push	{r3, r4, r5, lr}
   10422:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
   10424:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   10426:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1042a:	2b00      	cmp	r3, #0
   1042c:	db28      	blt.n	10480 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
   1042e:	7b6b      	ldrb	r3, [r5, #13]
   10430:	f063 037f 	orn	r3, r3, #127	; 0x7f
   10434:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   10436:	4b1a      	ldr	r3, [pc, #104]	; (104a0 <move_thread_to_end_of_prio_q+0x80>)
   10438:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1043c:	429c      	cmp	r4, r3
   1043e:	d02d      	beq.n	1049c <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10440:	b16c      	cbz	r4, 1045e <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
   10442:	4621      	mov	r1, r4
   10444:	4628      	mov	r0, r5
   10446:	f005 fca8 	bl	15d9a <z_sched_prio_cmp>
   1044a:	2800      	cmp	r0, #0
   1044c:	dc20      	bgt.n	10490 <move_thread_to_end_of_prio_q+0x70>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   1044e:	b134      	cbz	r4, 1045e <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
   10450:	4b13      	ldr	r3, [pc, #76]	; (104a0 <move_thread_to_end_of_prio_q+0x80>)
   10452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10454:	429c      	cmp	r4, r3
   10456:	d002      	beq.n	1045e <move_thread_to_end_of_prio_q+0x3e>
   10458:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1045a:	2c00      	cmp	r4, #0
   1045c:	d1f0      	bne.n	10440 <move_thread_to_end_of_prio_q+0x20>
	sys_dnode_t *const tail = list->tail;
   1045e:	4b10      	ldr	r3, [pc, #64]	; (104a0 <move_thread_to_end_of_prio_q+0x80>)
   10460:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   10462:	f103 0120 	add.w	r1, r3, #32
   10466:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   10468:	606a      	str	r2, [r5, #4]
	tail->next = node;
   1046a:	6015      	str	r5, [r2, #0]
	list->tail = node;
   1046c:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
   1046e:	4b0c      	ldr	r3, [pc, #48]	; (104a0 <move_thread_to_end_of_prio_q+0x80>)
   10470:	6898      	ldr	r0, [r3, #8]
   10472:	42a8      	cmp	r0, r5
   10474:	bf14      	ite	ne
   10476:	2000      	movne	r0, #0
   10478:	2001      	moveq	r0, #1
   1047a:	f7ff ffab 	bl	103d4 <update_cache>
}
   1047e:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   10480:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   10484:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
   10486:	4601      	mov	r1, r0
   10488:	4806      	ldr	r0, [pc, #24]	; (104a4 <move_thread_to_end_of_prio_q+0x84>)
   1048a:	f005 fcc4 	bl	15e16 <z_priq_dumb_remove>
}
   1048e:	e7ce      	b.n	1042e <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
   10490:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
   10492:	606b      	str	r3, [r5, #4]
	node->next = successor;
   10494:	602c      	str	r4, [r5, #0]
	prev->next = node;
   10496:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   10498:	6065      	str	r5, [r4, #4]
}
   1049a:	e7e8      	b.n	1046e <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1049c:	2400      	movs	r4, #0
   1049e:	e7cf      	b.n	10440 <move_thread_to_end_of_prio_q+0x20>
   104a0:	20002f60 	.word	0x20002f60
   104a4:	20002f80 	.word	0x20002f80

000104a8 <z_time_slice>:
{
   104a8:	b510      	push	{r4, lr}
	__asm__ volatile(
   104aa:	f04f 0320 	mov.w	r3, #32
   104ae:	f3ef 8411 	mrs	r4, BASEPRI
   104b2:	f383 8812 	msr	BASEPRI_MAX, r3
   104b6:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   104ba:	4b1c      	ldr	r3, [pc, #112]	; (1052c <z_time_slice+0x84>)
   104bc:	689b      	ldr	r3, [r3, #8]
   104be:	4a1c      	ldr	r2, [pc, #112]	; (10530 <z_time_slice+0x88>)
   104c0:	6812      	ldr	r2, [r2, #0]
   104c2:	4293      	cmp	r3, r2
   104c4:	d01d      	beq.n	10502 <z_time_slice+0x5a>
	pending_current = NULL;
   104c6:	4a1a      	ldr	r2, [pc, #104]	; (10530 <z_time_slice+0x88>)
   104c8:	2100      	movs	r1, #0
   104ca:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
   104cc:	4a19      	ldr	r2, [pc, #100]	; (10534 <z_time_slice+0x8c>)
   104ce:	6812      	ldr	r2, [r2, #0]
   104d0:	b322      	cbz	r2, 1051c <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   104d2:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
   104d4:	2a7f      	cmp	r2, #127	; 0x7f
   104d6:	d821      	bhi.n	1051c <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
   104d8:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
   104da:	f012 0f1f 	tst.w	r2, #31
   104de:	d11d      	bne.n	1051c <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   104e0:	f993 100e 	ldrsb.w	r1, [r3, #14]
   104e4:	4a14      	ldr	r2, [pc, #80]	; (10538 <z_time_slice+0x90>)
   104e6:	6812      	ldr	r2, [r2, #0]
   104e8:	4291      	cmp	r1, r2
   104ea:	db17      	blt.n	1051c <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
   104ec:	4a13      	ldr	r2, [pc, #76]	; (1053c <z_time_slice+0x94>)
   104ee:	4293      	cmp	r3, r2
   104f0:	d014      	beq.n	1051c <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
   104f2:	4a0e      	ldr	r2, [pc, #56]	; (1052c <z_time_slice+0x84>)
   104f4:	6912      	ldr	r2, [r2, #16]
   104f6:	4282      	cmp	r2, r0
   104f8:	dd0a      	ble.n	10510 <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
   104fa:	1a10      	subs	r0, r2, r0
   104fc:	4b0b      	ldr	r3, [pc, #44]	; (1052c <z_time_slice+0x84>)
   104fe:	6118      	str	r0, [r3, #16]
   10500:	e00f      	b.n	10522 <z_time_slice+0x7a>
		z_reset_time_slice();
   10502:	f7ff fee1 	bl	102c8 <z_reset_time_slice>
	__asm__ volatile(
   10506:	f384 8811 	msr	BASEPRI, r4
   1050a:	f3bf 8f6f 	isb	sy
		return;
   1050e:	e00c      	b.n	1052a <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
   10510:	4618      	mov	r0, r3
   10512:	f7ff ff85 	bl	10420 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
   10516:	f7ff fed7 	bl	102c8 <z_reset_time_slice>
   1051a:	e002      	b.n	10522 <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
   1051c:	4b03      	ldr	r3, [pc, #12]	; (1052c <z_time_slice+0x84>)
   1051e:	2200      	movs	r2, #0
   10520:	611a      	str	r2, [r3, #16]
   10522:	f384 8811 	msr	BASEPRI, r4
   10526:	f3bf 8f6f 	isb	sy
}
   1052a:	bd10      	pop	{r4, pc}
   1052c:	20002f60 	.word	0x20002f60
   10530:	20002f94 	.word	0x20002f94
   10534:	20002f9c 	.word	0x20002f9c
   10538:	20002f98 	.word	0x20002f98
   1053c:	20000828 	.word	0x20000828

00010540 <ready_thread>:
{
   10540:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
   10542:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   10544:	f990 200d 	ldrsb.w	r2, [r0, #13]
   10548:	2a00      	cmp	r2, #0
   1054a:	db2d      	blt.n	105a8 <ready_thread+0x68>
   1054c:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1054e:	f013 0f1f 	tst.w	r3, #31
   10552:	d105      	bne.n	10560 <ready_thread+0x20>
	return node->next != NULL;
   10554:	6982      	ldr	r2, [r0, #24]
   10556:	b10a      	cbz	r2, 1055c <ready_thread+0x1c>
   10558:	2200      	movs	r2, #0
   1055a:	e002      	b.n	10562 <ready_thread+0x22>
   1055c:	2201      	movs	r2, #1
   1055e:	e000      	b.n	10562 <ready_thread+0x22>
   10560:	2200      	movs	r2, #0
   10562:	b30a      	cbz	r2, 105a8 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
   10564:	f063 037f 	orn	r3, r3, #127	; 0x7f
   10568:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   1056a:	4b14      	ldr	r3, [pc, #80]	; (105bc <ready_thread+0x7c>)
   1056c:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10570:	429d      	cmp	r5, r3
   10572:	d020      	beq.n	105b6 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10574:	b16d      	cbz	r5, 10592 <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
   10576:	4629      	mov	r1, r5
   10578:	4620      	mov	r0, r4
   1057a:	f005 fc0e 	bl	15d9a <z_sched_prio_cmp>
   1057e:	2800      	cmp	r0, #0
   10580:	dc13      	bgt.n	105aa <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   10582:	b135      	cbz	r5, 10592 <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
   10584:	4b0d      	ldr	r3, [pc, #52]	; (105bc <ready_thread+0x7c>)
   10586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10588:	429d      	cmp	r5, r3
   1058a:	d002      	beq.n	10592 <ready_thread+0x52>
   1058c:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1058e:	2d00      	cmp	r5, #0
   10590:	d1f0      	bne.n	10574 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
   10592:	4b0a      	ldr	r3, [pc, #40]	; (105bc <ready_thread+0x7c>)
   10594:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   10596:	f103 0120 	add.w	r1, r3, #32
   1059a:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   1059c:	6062      	str	r2, [r4, #4]
	tail->next = node;
   1059e:	6014      	str	r4, [r2, #0]
	list->tail = node;
   105a0:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
   105a2:	2000      	movs	r0, #0
   105a4:	f7ff ff16 	bl	103d4 <update_cache>
}
   105a8:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
   105aa:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   105ac:	6063      	str	r3, [r4, #4]
	node->next = successor;
   105ae:	6025      	str	r5, [r4, #0]
	prev->next = node;
   105b0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   105b2:	606c      	str	r4, [r5, #4]
}
   105b4:	e7f5      	b.n	105a2 <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   105b6:	2500      	movs	r5, #0
   105b8:	e7dc      	b.n	10574 <ready_thread+0x34>
   105ba:	bf00      	nop
   105bc:	20002f60 	.word	0x20002f60

000105c0 <z_sched_start>:
{
   105c0:	b510      	push	{r4, lr}
	__asm__ volatile(
   105c2:	f04f 0320 	mov.w	r3, #32
   105c6:	f3ef 8411 	mrs	r4, BASEPRI
   105ca:	f383 8812 	msr	BASEPRI_MAX, r3
   105ce:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   105d2:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
   105d4:	f013 0f04 	tst.w	r3, #4
   105d8:	d104      	bne.n	105e4 <z_sched_start+0x24>
	__asm__ volatile(
   105da:	f384 8811 	msr	BASEPRI, r4
   105de:	f3bf 8f6f 	isb	sy
}
   105e2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   105e4:	f023 0304 	bic.w	r3, r3, #4
   105e8:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
   105ea:	f7ff ffa9 	bl	10540 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   105ee:	4621      	mov	r1, r4
   105f0:	4801      	ldr	r0, [pc, #4]	; (105f8 <z_sched_start+0x38>)
   105f2:	f7ff febb 	bl	1036c <z_reschedule>
   105f6:	e7f4      	b.n	105e2 <z_sched_start+0x22>
   105f8:	20002f98 	.word	0x20002f98

000105fc <unready_thread>:
{
   105fc:	b510      	push	{r4, lr}
   105fe:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
   10600:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
   10602:	f990 300d 	ldrsb.w	r3, [r0, #13]
   10606:	2b00      	cmp	r3, #0
   10608:	db08      	blt.n	1061c <unready_thread+0x20>
	update_cache(thread == _current);
   1060a:	4b08      	ldr	r3, [pc, #32]	; (1062c <unready_thread+0x30>)
   1060c:	6898      	ldr	r0, [r3, #8]
   1060e:	42a0      	cmp	r0, r4
   10610:	bf14      	ite	ne
   10612:	2000      	movne	r0, #0
   10614:	2001      	moveq	r0, #1
   10616:	f7ff fedd 	bl	103d4 <update_cache>
}
   1061a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
   1061c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   10620:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
   10622:	4601      	mov	r1, r0
   10624:	4802      	ldr	r0, [pc, #8]	; (10630 <unready_thread+0x34>)
   10626:	f005 fbf6 	bl	15e16 <z_priq_dumb_remove>
}
   1062a:	e7ee      	b.n	1060a <unready_thread+0xe>
   1062c:	20002f60 	.word	0x20002f60
   10630:	20002f80 	.word	0x20002f80

00010634 <z_pend_curr>:
{
   10634:	b510      	push	{r4, lr}
   10636:	460c      	mov	r4, r1
   10638:	4611      	mov	r1, r2
	pending_current = _current;
   1063a:	4b06      	ldr	r3, [pc, #24]	; (10654 <z_pend_curr+0x20>)
   1063c:	6898      	ldr	r0, [r3, #8]
   1063e:	4b06      	ldr	r3, [pc, #24]	; (10658 <z_pend_curr+0x24>)
   10640:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
   10642:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   10646:	f005 fc92 	bl	15f6e <pend>
   1064a:	4620      	mov	r0, r4
   1064c:	f7f5 f938 	bl	58c0 <arch_swap>
}
   10650:	bd10      	pop	{r4, pc}
   10652:	bf00      	nop
   10654:	20002f60 	.word	0x20002f60
   10658:	20002f94 	.word	0x20002f94

0001065c <z_set_prio>:
{
   1065c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10660:	4604      	mov	r4, r0
   10662:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
   10664:	2300      	movs	r3, #0
	__asm__ volatile(
   10666:	f04f 0220 	mov.w	r2, #32
   1066a:	f3ef 8611 	mrs	r6, BASEPRI
   1066e:	f382 8812 	msr	BASEPRI_MAX, r2
   10672:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
   10676:	4698      	mov	r8, r3
   10678:	e008      	b.n	1068c <z_set_prio+0x30>
		if (need_sched) {
   1067a:	f012 0801 	ands.w	r8, r2, #1
   1067e:	d111      	bne.n	106a4 <z_set_prio+0x48>
			thread->base.prio = prio;
   10680:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
   10682:	f386 8811 	msr	BASEPRI, r6
   10686:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1068a:	2301      	movs	r3, #1
   1068c:	461a      	mov	r2, r3
   1068e:	2b00      	cmp	r3, #0
   10690:	d13d      	bne.n	1070e <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
   10692:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   10694:	f013 0f1f 	tst.w	r3, #31
   10698:	d1ef      	bne.n	1067a <z_set_prio+0x1e>
	return node->next != NULL;
   1069a:	69a1      	ldr	r1, [r4, #24]
   1069c:	2900      	cmp	r1, #0
   1069e:	d1ec      	bne.n	1067a <z_set_prio+0x1e>
   106a0:	2201      	movs	r2, #1
   106a2:	e7ea      	b.n	1067a <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   106a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   106a8:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
   106aa:	f8df 906c 	ldr.w	r9, [pc, #108]	; 10718 <z_set_prio+0xbc>
   106ae:	4621      	mov	r1, r4
   106b0:	4648      	mov	r0, r9
   106b2:	f005 fbb0 	bl	15e16 <z_priq_dumb_remove>
				thread->base.prio = prio;
   106b6:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   106b8:	7b63      	ldrb	r3, [r4, #13]
   106ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
   106be:	7363      	strb	r3, [r4, #13]
	return list->head == list;
   106c0:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   106c4:	454d      	cmp	r5, r9
   106c6:	d020      	beq.n	1070a <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   106c8:	b16d      	cbz	r5, 106e6 <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
   106ca:	4629      	mov	r1, r5
   106cc:	4620      	mov	r0, r4
   106ce:	f005 fb64 	bl	15d9a <z_sched_prio_cmp>
   106d2:	2800      	cmp	r0, #0
   106d4:	dc13      	bgt.n	106fe <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   106d6:	b135      	cbz	r5, 106e6 <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
   106d8:	4b0e      	ldr	r3, [pc, #56]	; (10714 <z_set_prio+0xb8>)
   106da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   106dc:	429d      	cmp	r5, r3
   106de:	d002      	beq.n	106e6 <z_set_prio+0x8a>
   106e0:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   106e2:	2d00      	cmp	r5, #0
   106e4:	d1f0      	bne.n	106c8 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
   106e6:	4b0b      	ldr	r3, [pc, #44]	; (10714 <z_set_prio+0xb8>)
   106e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   106ea:	f103 0120 	add.w	r1, r3, #32
   106ee:	6021      	str	r1, [r4, #0]
	node->prev = tail;
   106f0:	6062      	str	r2, [r4, #4]
	tail->next = node;
   106f2:	6014      	str	r4, [r2, #0]
	list->tail = node;
   106f4:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
   106f6:	2001      	movs	r0, #1
   106f8:	f7ff fe6c 	bl	103d4 <update_cache>
   106fc:	e7c1      	b.n	10682 <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
   106fe:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
   10700:	6063      	str	r3, [r4, #4]
	node->next = successor;
   10702:	6025      	str	r5, [r4, #0]
	prev->next = node;
   10704:	601c      	str	r4, [r3, #0]
	successor->prev = node;
   10706:	606c      	str	r4, [r5, #4]
}
   10708:	e7f5      	b.n	106f6 <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1070a:	2500      	movs	r5, #0
   1070c:	e7dc      	b.n	106c8 <z_set_prio+0x6c>
}
   1070e:	4640      	mov	r0, r8
   10710:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10714:	20002f60 	.word	0x20002f60
   10718:	20002f80 	.word	0x20002f80

0001071c <z_impl_k_thread_suspend>:
{
   1071c:	b538      	push	{r3, r4, r5, lr}
   1071e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   10720:	3018      	adds	r0, #24
   10722:	f005 fcf6 	bl	16112 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
   10726:	2300      	movs	r3, #0
	__asm__ volatile(
   10728:	f04f 0220 	mov.w	r2, #32
   1072c:	f3ef 8511 	mrs	r5, BASEPRI
   10730:	f382 8812 	msr	BASEPRI_MAX, r2
   10734:	f3bf 8f6f 	isb	sy
   10738:	e010      	b.n	1075c <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1073a:	7b63      	ldrb	r3, [r4, #13]
   1073c:	f043 0310 	orr.w	r3, r3, #16
   10740:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   10742:	4b15      	ldr	r3, [pc, #84]	; (10798 <z_impl_k_thread_suspend+0x7c>)
   10744:	6898      	ldr	r0, [r3, #8]
   10746:	42a0      	cmp	r0, r4
   10748:	bf14      	ite	ne
   1074a:	2000      	movne	r0, #0
   1074c:	2001      	moveq	r0, #1
   1074e:	f7ff fe41 	bl	103d4 <update_cache>
	__asm__ volatile(
   10752:	f385 8811 	msr	BASEPRI, r5
   10756:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1075a:	2301      	movs	r3, #1
   1075c:	b963      	cbnz	r3, 10778 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
   1075e:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
   10760:	f994 300d 	ldrsb.w	r3, [r4, #13]
   10764:	2b00      	cmp	r3, #0
   10766:	dae8      	bge.n	1073a <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   10768:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   1076c:	7362      	strb	r2, [r4, #13]
		_priq_run_remove(pq, thread);
   1076e:	4621      	mov	r1, r4
   10770:	480a      	ldr	r0, [pc, #40]	; (1079c <z_impl_k_thread_suspend+0x80>)
   10772:	f005 fb50 	bl	15e16 <z_priq_dumb_remove>
}
   10776:	e7e0      	b.n	1073a <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
   10778:	4b07      	ldr	r3, [pc, #28]	; (10798 <z_impl_k_thread_suspend+0x7c>)
   1077a:	689b      	ldr	r3, [r3, #8]
   1077c:	42a3      	cmp	r3, r4
   1077e:	d000      	beq.n	10782 <z_impl_k_thread_suspend+0x66>
}
   10780:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   10782:	f04f 0320 	mov.w	r3, #32
   10786:	f3ef 8011 	mrs	r0, BASEPRI
   1078a:	f383 8812 	msr	BASEPRI_MAX, r3
   1078e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   10792:	f005 fb2b 	bl	15dec <z_reschedule_irqlock>
   10796:	e7f3      	b.n	10780 <z_impl_k_thread_suspend+0x64>
   10798:	20002f60 	.word	0x20002f60
   1079c:	20002f80 	.word	0x20002f80

000107a0 <k_sched_unlock>:

void k_sched_unlock(void)
{
   107a0:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
   107a2:	2300      	movs	r3, #0
   107a4:	f04f 0220 	mov.w	r2, #32
   107a8:	f3ef 8411 	mrs	r4, BASEPRI
   107ac:	f382 8812 	msr	BASEPRI_MAX, r2
   107b0:	f3bf 8f6f 	isb	sy
   107b4:	b96b      	cbnz	r3, 107d2 <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
   107b6:	4b0c      	ldr	r3, [pc, #48]	; (107e8 <k_sched_unlock+0x48>)
   107b8:	689a      	ldr	r2, [r3, #8]
   107ba:	7bd3      	ldrb	r3, [r2, #15]
   107bc:	3301      	adds	r3, #1
   107be:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   107c0:	2000      	movs	r0, #0
   107c2:	f7ff fe07 	bl	103d4 <update_cache>
	__asm__ volatile(
   107c6:	f384 8811 	msr	BASEPRI, r4
   107ca:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   107ce:	2301      	movs	r3, #1
   107d0:	e7f0      	b.n	107b4 <k_sched_unlock+0x14>
	__asm__ volatile(
   107d2:	f04f 0320 	mov.w	r3, #32
   107d6:	f3ef 8011 	mrs	r0, BASEPRI
   107da:	f383 8812 	msr	BASEPRI_MAX, r3
   107de:	f3bf 8f6f 	isb	sy
   107e2:	f005 fb03 	bl	15dec <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
   107e6:	bd10      	pop	{r4, pc}
   107e8:	20002f60 	.word	0x20002f60

000107ec <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
   107ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
   107ee:	7b43      	ldrb	r3, [r0, #13]
   107f0:	f013 0f08 	tst.w	r3, #8
   107f4:	d145      	bne.n	10882 <end_thread+0x96>
   107f6:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
   107f8:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
   107fc:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   10800:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
   10802:	f013 0f80 	tst.w	r3, #128	; 0x80
   10806:	d114      	bne.n	10832 <end_thread+0x46>
			dequeue_thread(&_kernel.ready_q.runq, thread);
		}
		if (thread->base.pended_on != NULL) {
   10808:	68ab      	ldr	r3, [r5, #8]
   1080a:	b15b      	cbz	r3, 10824 <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1080c:	4628      	mov	r0, r5
   1080e:	f005 fac2 	bl	15d96 <pended_on_thread>
   10812:	4629      	mov	r1, r5
   10814:	f005 faff 	bl	15e16 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   10818:	7b6b      	ldrb	r3, [r5, #13]
   1081a:	f023 0302 	bic.w	r3, r3, #2
   1081e:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   10820:	2300      	movs	r3, #0
   10822:	60ab      	str	r3, [r5, #8]
   10824:	f105 0018 	add.w	r0, r5, #24
   10828:	f005 fc73 	bl	16112 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
   1082c:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   10830:	e01c      	b.n	1086c <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   10832:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   10836:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
   10838:	4601      	mov	r1, r0
   1083a:	4812      	ldr	r0, [pc, #72]	; (10884 <end_thread+0x98>)
   1083c:	f005 faeb 	bl	15e16 <z_priq_dumb_remove>
}
   10840:	e7e2      	b.n	10808 <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   10842:	4620      	mov	r0, r4
   10844:	f005 faa7 	bl	15d96 <pended_on_thread>
   10848:	4621      	mov	r1, r4
   1084a:	f005 fae4 	bl	15e16 <z_priq_dumb_remove>
   1084e:	7b63      	ldrb	r3, [r4, #13]
   10850:	f023 0302 	bic.w	r3, r3, #2
   10854:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   10856:	2600      	movs	r6, #0
   10858:	60a6      	str	r6, [r4, #8]
   1085a:	f104 0018 	add.w	r0, r4, #24
   1085e:	f005 fc58 	bl	16112 <z_abort_timeout>
   10862:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
   10866:	4620      	mov	r0, r4
   10868:	f7ff fe6a 	bl	10540 <ready_thread>
	return list->head == list;
   1086c:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1086e:	42bc      	cmp	r4, r7
   10870:	d001      	beq.n	10876 <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   10872:	2c00      	cmp	r4, #0
   10874:	d1e5      	bne.n	10842 <end_thread+0x56>
		update_cache(1);
   10876:	2001      	movs	r0, #1
   10878:	f7ff fdac 	bl	103d4 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
   1087c:	4628      	mov	r0, r5
   1087e:	f7ff f959 	bl	fb34 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
   10882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10884:	20002f80 	.word	0x20002f80

00010888 <z_sched_init>:
{
   10888:	b508      	push	{r3, lr}
	list->head = (sys_dnode_t *)list;
   1088a:	4b05      	ldr	r3, [pc, #20]	; (108a0 <z_sched_init+0x18>)
   1088c:	f103 0220 	add.w	r2, r3, #32
   10890:	621a      	str	r2, [r3, #32]
	list->tail = (sys_dnode_t *)list;
   10892:	625a      	str	r2, [r3, #36]	; 0x24
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   10894:	2100      	movs	r1, #0
   10896:	4608      	mov	r0, r1
   10898:	f7ff fd2c 	bl	102f4 <k_sched_time_slice_set>
}
   1089c:	bd08      	pop	{r3, pc}
   1089e:	bf00      	nop
   108a0:	20002f60 	.word	0x20002f60

000108a4 <z_impl_k_yield>:
{
   108a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   108a6:	f04f 0320 	mov.w	r3, #32
   108aa:	f3ef 8611 	mrs	r6, BASEPRI
   108ae:	f383 8812 	msr	BASEPRI_MAX, r3
   108b2:	f3bf 8f6f 	isb	sy
		dequeue_thread(&_kernel.ready_q.runq,
   108b6:	4c1c      	ldr	r4, [pc, #112]	; (10928 <z_impl_k_yield+0x84>)
   108b8:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   108ba:	7b4b      	ldrb	r3, [r1, #13]
   108bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   108c0:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
   108c2:	f104 0720 	add.w	r7, r4, #32
   108c6:	4638      	mov	r0, r7
   108c8:	f005 faa5 	bl	15e16 <z_priq_dumb_remove>
	queue_thread(&_kernel.ready_q.runq, _current);
   108cc:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   108ce:	7b6b      	ldrb	r3, [r5, #13]
   108d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   108d4:	736b      	strb	r3, [r5, #13]
	return list->head == list;
   108d6:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   108d8:	42bc      	cmp	r4, r7
   108da:	d023      	beq.n	10924 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   108dc:	b16c      	cbz	r4, 108fa <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
   108de:	4621      	mov	r1, r4
   108e0:	4628      	mov	r0, r5
   108e2:	f005 fa5a 	bl	15d9a <z_sched_prio_cmp>
   108e6:	2800      	cmp	r0, #0
   108e8:	dc16      	bgt.n	10918 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   108ea:	b134      	cbz	r4, 108fa <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
   108ec:	4b0e      	ldr	r3, [pc, #56]	; (10928 <z_impl_k_yield+0x84>)
   108ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   108f0:	429c      	cmp	r4, r3
   108f2:	d002      	beq.n	108fa <z_impl_k_yield+0x56>
   108f4:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   108f6:	2c00      	cmp	r4, #0
   108f8:	d1f0      	bne.n	108dc <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
   108fa:	4b0b      	ldr	r3, [pc, #44]	; (10928 <z_impl_k_yield+0x84>)
   108fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
   108fe:	f103 0120 	add.w	r1, r3, #32
   10902:	6029      	str	r1, [r5, #0]
	node->prev = tail;
   10904:	606a      	str	r2, [r5, #4]
	tail->next = node;
   10906:	6015      	str	r5, [r2, #0]
	list->tail = node;
   10908:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
   1090a:	2001      	movs	r0, #1
   1090c:	f7ff fd62 	bl	103d4 <update_cache>
   10910:	4630      	mov	r0, r6
   10912:	f7f4 ffd5 	bl	58c0 <arch_swap>
}
   10916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
   10918:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   1091a:	606b      	str	r3, [r5, #4]
	node->next = successor;
   1091c:	602c      	str	r4, [r5, #0]
	prev->next = node;
   1091e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   10920:	6065      	str	r5, [r4, #4]
}
   10922:	e7f2      	b.n	1090a <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   10924:	2400      	movs	r4, #0
   10926:	e7d9      	b.n	108dc <z_impl_k_yield+0x38>
   10928:	20002f60 	.word	0x20002f60

0001092c <z_tick_sleep>:
{
   1092c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10930:	4604      	mov	r4, r0
   10932:	460d      	mov	r5, r1
	if (ticks == 0) {
   10934:	ea54 0105 	orrs.w	r1, r4, r5
   10938:	d037      	beq.n	109aa <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
   1093a:	f06f 0101 	mvn.w	r1, #1
   1093e:	1a0a      	subs	r2, r1, r0
   10940:	f04f 31ff 	mov.w	r1, #4294967295
   10944:	eb61 0305 	sbc.w	r3, r1, r5
   10948:	2a01      	cmp	r2, #1
   1094a:	f173 0300 	sbcs.w	r3, r3, #0
   1094e:	db30      	blt.n	109b2 <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   10950:	f06f 0601 	mvn.w	r6, #1
   10954:	1a36      	subs	r6, r6, r0
   10956:	f04f 0320 	mov.w	r3, #32
   1095a:	f3ef 8811 	mrs	r8, BASEPRI
   1095e:	f383 8812 	msr	BASEPRI_MAX, r3
   10962:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   10966:	4f16      	ldr	r7, [pc, #88]	; (109c0 <z_tick_sleep+0x94>)
   10968:	68b8      	ldr	r0, [r7, #8]
   1096a:	4b16      	ldr	r3, [pc, #88]	; (109c4 <z_tick_sleep+0x98>)
   1096c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   1096e:	f7ff fe45 	bl	105fc <unready_thread>
	z_add_thread_timeout(_current, timeout);
   10972:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   10974:	4622      	mov	r2, r4
   10976:	462b      	mov	r3, r5
   10978:	4913      	ldr	r1, [pc, #76]	; (109c8 <z_tick_sleep+0x9c>)
   1097a:	3018      	adds	r0, #24
   1097c:	f000 f938 	bl	10bf0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   10980:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   10982:	7b53      	ldrb	r3, [r2, #13]
   10984:	f043 0310 	orr.w	r3, r3, #16
   10988:	7353      	strb	r3, [r2, #13]
   1098a:	4640      	mov	r0, r8
   1098c:	f7f4 ff98 	bl	58c0 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   10990:	2500      	movs	r5, #0
   10992:	f005 fc1d 	bl	161d0 <sys_clock_tick_get_32>
   10996:	1a34      	subs	r4, r6, r0
   10998:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
   1099c:	2c01      	cmp	r4, #1
   1099e:	f175 0300 	sbcs.w	r3, r5, #0
   109a2:	da0a      	bge.n	109ba <z_tick_sleep+0x8e>
	return 0;
   109a4:	2000      	movs	r0, #0
}
   109a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
   109aa:	f7ff ff7b 	bl	108a4 <z_impl_k_yield>
		return 0;
   109ae:	2000      	movs	r0, #0
   109b0:	e7f9      	b.n	109a6 <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   109b2:	f005 fc0d 	bl	161d0 <sys_clock_tick_get_32>
   109b6:	1906      	adds	r6, r0, r4
   109b8:	e7cd      	b.n	10956 <z_tick_sleep+0x2a>
		return ticks;
   109ba:	4620      	mov	r0, r4
   109bc:	e7f3      	b.n	109a6 <z_tick_sleep+0x7a>
   109be:	bf00      	nop
   109c0:	20002f60 	.word	0x20002f60
   109c4:	20002f94 	.word	0x20002f94
   109c8:	00015eb3 	.word	0x00015eb3

000109cc <z_impl_k_sleep>:
{
   109cc:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   109ce:	f1b1 3fff 	cmp.w	r1, #4294967295
   109d2:	bf08      	it	eq
   109d4:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   109d8:	d01a      	beq.n	10a10 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
   109da:	f7ff ffa7 	bl	1092c <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
   109de:	4604      	mov	r4, r0
   109e0:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
   109e2:	0169      	lsls	r1, r5, #5
   109e4:	0143      	lsls	r3, r0, #5
   109e6:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
   109ea:	1a18      	subs	r0, r3, r0
   109ec:	eb62 0305 	sbc.w	r3, r2, r5
   109f0:	009a      	lsls	r2, r3, #2
   109f2:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
   109f6:	0081      	lsls	r1, r0, #2
   109f8:	4613      	mov	r3, r2
   109fa:	1908      	adds	r0, r1, r4
   109fc:	eb45 0303 	adc.w	r3, r5, r3
   10a00:	00da      	lsls	r2, r3, #3
   10a02:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
   10a06:	00c1      	lsls	r1, r0, #3
   10a08:	0bc8      	lsrs	r0, r1, #15
   10a0a:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
   10a0e:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
   10a10:	4b03      	ldr	r3, [pc, #12]	; (10a20 <z_impl_k_sleep+0x54>)
   10a12:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   10a14:	f7ff fe82 	bl	1071c <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   10a18:	f04f 30ff 	mov.w	r0, #4294967295
   10a1c:	e7f7      	b.n	10a0e <z_impl_k_sleep+0x42>
   10a1e:	bf00      	nop
   10a20:	20002f60 	.word	0x20002f60

00010a24 <z_impl_k_usleep>:
{
   10a24:	b538      	push	{r3, r4, r5, lr}
	ticks = k_us_to_ticks_ceil64(us);
   10a26:	17c3      	asrs	r3, r0, #31
   10a28:	03d9      	lsls	r1, r3, #15
   10a2a:	ea41 4150 	orr.w	r1, r1, r0, lsr #17
   10a2e:	03c4      	lsls	r4, r0, #15
   10a30:	4814      	ldr	r0, [pc, #80]	; (10a84 <z_impl_k_usleep+0x60>)
   10a32:	4a15      	ldr	r2, [pc, #84]	; (10a88 <z_impl_k_usleep+0x64>)
   10a34:	2300      	movs	r3, #0
   10a36:	1820      	adds	r0, r4, r0
   10a38:	f04f 0400 	mov.w	r4, #0
   10a3c:	eb44 0101 	adc.w	r1, r4, r1
   10a40:	f7f0 fafe 	bl	1040 <__aeabi_uldivmod>
	ticks = z_tick_sleep(ticks);
   10a44:	17c1      	asrs	r1, r0, #31
   10a46:	f7ff ff71 	bl	1092c <z_tick_sleep>
	return k_ticks_to_us_floor64(ticks);
   10a4a:	4604      	mov	r4, r0
   10a4c:	17c5      	asrs	r5, r0, #31
   10a4e:	0169      	lsls	r1, r5, #5
   10a50:	0143      	lsls	r3, r0, #5
   10a52:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
   10a56:	1a1b      	subs	r3, r3, r0
   10a58:	eb62 0005 	sbc.w	r0, r2, r5
   10a5c:	0242      	lsls	r2, r0, #9
   10a5e:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
   10a62:	0259      	lsls	r1, r3, #9
   10a64:	190b      	adds	r3, r1, r4
   10a66:	416a      	adcs	r2, r5
   10a68:	0191      	lsls	r1, r2, #6
   10a6a:	ea41 6193 	orr.w	r1, r1, r3, lsr #26
   10a6e:	0198      	lsls	r0, r3, #6
   10a70:	1ac3      	subs	r3, r0, r3
   10a72:	eb61 0002 	sbc.w	r0, r1, r2
   10a76:	191b      	adds	r3, r3, r4
   10a78:	eb45 0000 	adc.w	r0, r5, r0
   10a7c:	0bdb      	lsrs	r3, r3, #15
}
   10a7e:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
   10a82:	bd38      	pop	{r3, r4, r5, pc}
   10a84:	000f423f 	.word	0x000f423f
   10a88:	000f4240 	.word	0x000f4240

00010a8c <z_impl_z_current_get>:
}
   10a8c:	4b01      	ldr	r3, [pc, #4]	; (10a94 <z_impl_z_current_get+0x8>)
   10a8e:	6898      	ldr	r0, [r3, #8]
   10a90:	4770      	bx	lr
   10a92:	bf00      	nop
   10a94:	20002f60 	.word	0x20002f60

00010a98 <z_impl_k_is_preempt_thread>:
   10a98:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
   10a9c:	b933      	cbnz	r3, 10aac <z_impl_k_is_preempt_thread+0x14>
   10a9e:	4b05      	ldr	r3, [pc, #20]	; (10ab4 <z_impl_k_is_preempt_thread+0x1c>)
   10aa0:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   10aa2:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
   10aa4:	2b7f      	cmp	r3, #127	; 0x7f
   10aa6:	d803      	bhi.n	10ab0 <z_impl_k_is_preempt_thread+0x18>
   10aa8:	2001      	movs	r0, #1
   10aaa:	4770      	bx	lr
   10aac:	2000      	movs	r0, #0
   10aae:	4770      	bx	lr
   10ab0:	2000      	movs	r0, #0
}
   10ab2:	4770      	bx	lr
   10ab4:	20002f60 	.word	0x20002f60

00010ab8 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
   10ab8:	b538      	push	{r3, r4, r5, lr}
   10aba:	f04f 0320 	mov.w	r3, #32
   10abe:	f3ef 8511 	mrs	r5, BASEPRI
   10ac2:	f383 8812 	msr	BASEPRI_MAX, r3
   10ac6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   10aca:	7b43      	ldrb	r3, [r0, #13]
   10acc:	f013 0f08 	tst.w	r3, #8
   10ad0:	d004      	beq.n	10adc <z_thread_abort+0x24>
	__asm__ volatile(
   10ad2:	f385 8811 	msr	BASEPRI, r5
   10ad6:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   10ada:	bd38      	pop	{r3, r4, r5, pc}
   10adc:	4604      	mov	r4, r0
	end_thread(thread);
   10ade:	f7ff fe85 	bl	107ec <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
   10ae2:	4b08      	ldr	r3, [pc, #32]	; (10b04 <z_thread_abort+0x4c>)
   10ae4:	689b      	ldr	r3, [r3, #8]
   10ae6:	42a3      	cmp	r3, r4
   10ae8:	d004      	beq.n	10af4 <z_thread_abort+0x3c>
   10aea:	f385 8811 	msr	BASEPRI, r5
   10aee:	f3bf 8f6f 	isb	sy
   10af2:	e7f2      	b.n	10ada <z_thread_abort+0x22>
   10af4:	f3ef 8305 	mrs	r3, IPSR
   10af8:	2b00      	cmp	r3, #0
   10afa:	d1f6      	bne.n	10aea <z_thread_abort+0x32>
   10afc:	4628      	mov	r0, r5
   10afe:	f7f4 fedf 	bl	58c0 <arch_swap>
	return ret;
   10b02:	e7f2      	b.n	10aea <z_thread_abort+0x32>
   10b04:	20002f60 	.word	0x20002f60

00010b08 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   10b08:	b5d0      	push	{r4, r6, r7, lr}
   10b0a:	b082      	sub	sp, #8
   10b0c:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   10b0e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
   10b12:	e9cd 6700 	strd	r6, r7, [sp]
   10b16:	f7ff fd8d 	bl	10634 <z_pend_curr>

	if (data != NULL) {
   10b1a:	b11c      	cbz	r4, 10b24 <z_sched_wait+0x1c>
		*data = _current->base.swap_data;
   10b1c:	4b02      	ldr	r3, [pc, #8]	; (10b28 <z_sched_wait+0x20>)
   10b1e:	689b      	ldr	r3, [r3, #8]
   10b20:	695b      	ldr	r3, [r3, #20]
   10b22:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   10b24:	b002      	add	sp, #8
   10b26:	bdd0      	pop	{r4, r6, r7, pc}
   10b28:	20002f60 	.word	0x20002f60

00010b2c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   10b2c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
   10b2e:	4806      	ldr	r0, [pc, #24]	; (10b48 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
   10b30:	4a06      	ldr	r2, [pc, #24]	; (10b4c <z_data_copy+0x20>)
   10b32:	1a12      	subs	r2, r2, r0
   10b34:	4906      	ldr	r1, [pc, #24]	; (10b50 <z_data_copy+0x24>)
   10b36:	f002 fb5b 	bl	131f0 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
   10b3a:	4a06      	ldr	r2, [pc, #24]	; (10b54 <z_data_copy+0x28>)
   10b3c:	4906      	ldr	r1, [pc, #24]	; (10b58 <z_data_copy+0x2c>)
   10b3e:	4807      	ldr	r0, [pc, #28]	; (10b5c <z_data_copy+0x30>)
   10b40:	f002 fb56 	bl	131f0 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   10b44:	bd08      	pop	{r3, pc}
   10b46:	bf00      	nop
   10b48:	20000000 	.word	0x20000000
   10b4c:	20000544 	.word	0x20000544
   10b50:	00017fd8 	.word	0x00017fd8
   10b54:	00000000 	.word	0x00000000
   10b58:	00017fd8 	.word	0x00017fd8
   10b5c:	20000000 	.word	0x20000000

00010b60 <first>:
	return list->head == list;
   10b60:	4b03      	ldr	r3, [pc, #12]	; (10b70 <first+0x10>)
   10b62:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10b64:	4298      	cmp	r0, r3
   10b66:	d000      	beq.n	10b6a <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
   10b68:	4770      	bx	lr
   10b6a:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
   10b6c:	e7fc      	b.n	10b68 <first+0x8>
   10b6e:	bf00      	nop
   10b70:	200002c0 	.word	0x200002c0

00010b74 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   10b74:	b130      	cbz	r0, 10b84 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
   10b76:	4a04      	ldr	r2, [pc, #16]	; (10b88 <next+0x14>)
   10b78:	6852      	ldr	r2, [r2, #4]
   10b7a:	4290      	cmp	r0, r2
   10b7c:	d001      	beq.n	10b82 <next+0xe>
   10b7e:	6800      	ldr	r0, [r0, #0]
   10b80:	4770      	bx	lr
   10b82:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
   10b84:	4770      	bx	lr
   10b86:	bf00      	nop
   10b88:	200002c0 	.word	0x200002c0

00010b8c <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
   10b8c:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   10b8e:	4b04      	ldr	r3, [pc, #16]	; (10ba0 <elapsed+0x14>)
   10b90:	681b      	ldr	r3, [r3, #0]
   10b92:	b10b      	cbz	r3, 10b98 <elapsed+0xc>
   10b94:	2000      	movs	r0, #0
}
   10b96:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   10b98:	f7f9 fa70 	bl	a07c <sys_clock_elapsed>
   10b9c:	e7fb      	b.n	10b96 <elapsed+0xa>
   10b9e:	bf00      	nop
   10ba0:	20002fa0 	.word	0x20002fa0

00010ba4 <next_timeout>:

static int32_t next_timeout(void)
{
   10ba4:	b510      	push	{r4, lr}
	struct _timeout *to = first();
   10ba6:	f7ff ffdb 	bl	10b60 <first>
   10baa:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
   10bac:	f7ff ffee 	bl	10b8c <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
   10bb0:	b18c      	cbz	r4, 10bd6 <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   10bb2:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   10bb6:	1a12      	subs	r2, r2, r0
   10bb8:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   10bbc:	2a01      	cmp	r2, #1
   10bbe:	f173 0100 	sbcs.w	r1, r3, #0
   10bc2:	db11      	blt.n	10be8 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   10bc4:	4610      	mov	r0, r2
   10bc6:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   10bca:	f173 0300 	sbcs.w	r3, r3, #0
   10bce:	db04      	blt.n	10bda <next_timeout+0x36>
   10bd0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   10bd4:	e001      	b.n	10bda <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
   10bd6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   10bda:	4b04      	ldr	r3, [pc, #16]	; (10bec <next_timeout+0x48>)
   10bdc:	691b      	ldr	r3, [r3, #16]
   10bde:	b113      	cbz	r3, 10be6 <next_timeout+0x42>
   10be0:	4283      	cmp	r3, r0
   10be2:	da00      	bge.n	10be6 <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
   10be4:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
   10be6:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   10be8:	2000      	movs	r0, #0
   10bea:	e7f6      	b.n	10bda <next_timeout+0x36>
   10bec:	20002f60 	.word	0x20002f60

00010bf0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   10bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10bf4:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   10bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
   10bfa:	bf08      	it	eq
   10bfc:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   10c00:	f000 8096 	beq.w	10d30 <z_add_timeout+0x140>
   10c04:	4682      	mov	sl, r0
   10c06:	4614      	mov	r4, r2
   10c08:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   10c0a:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
   10c0c:	2300      	movs	r3, #0
	__asm__ volatile(
   10c0e:	f04f 0220 	mov.w	r2, #32
   10c12:	f3ef 8b11 	mrs	fp, BASEPRI
   10c16:	f382 8812 	msr	BASEPRI_MAX, r2
   10c1a:	f3bf 8f6f 	isb	sy
   10c1e:	e02e      	b.n	10c7e <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
   10c20:	2201      	movs	r2, #1
   10c22:	2300      	movs	r3, #0
   10c24:	e04b      	b.n	10cbe <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   10c26:	f7ff ffb1 	bl	10b8c <elapsed>
   10c2a:	1822      	adds	r2, r4, r0
   10c2c:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
   10c30:	3201      	adds	r2, #1
   10c32:	f143 0300 	adc.w	r3, r3, #0
   10c36:	f8ca 2010 	str.w	r2, [sl, #16]
   10c3a:	f8ca 3014 	str.w	r3, [sl, #20]
   10c3e:	e042      	b.n	10cc6 <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
   10c40:	9b00      	ldr	r3, [sp, #0]
   10c42:	1ac2      	subs	r2, r0, r3
   10c44:	9b01      	ldr	r3, [sp, #4]
   10c46:	eb61 0303 	sbc.w	r3, r1, r3
   10c4a:	f8cc 2010 	str.w	r2, [ip, #16]
   10c4e:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
   10c52:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
   10c56:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
   10c5a:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
   10c5e:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
   10c62:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
   10c66:	f1bc 0f00 	cmp.w	ip, #0
   10c6a:	d049      	beq.n	10d00 <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   10c6c:	f7ff ff78 	bl	10b60 <first>
   10c70:	4582      	cmp	sl, r0
   10c72:	d050      	beq.n	10d16 <z_add_timeout+0x126>
	__asm__ volatile(
   10c74:	f38b 8811 	msr	BASEPRI, fp
   10c78:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   10c7c:	2301      	movs	r3, #1
   10c7e:	2b00      	cmp	r3, #0
   10c80:	d156      	bne.n	10d30 <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   10c82:	f06f 0301 	mvn.w	r3, #1
   10c86:	ebb3 0804 	subs.w	r8, r3, r4
   10c8a:	f04f 30ff 	mov.w	r0, #4294967295
   10c8e:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   10c92:	f1b8 0f00 	cmp.w	r8, #0
   10c96:	f179 0300 	sbcs.w	r3, r9, #0
   10c9a:	dbc4      	blt.n	10c26 <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   10c9c:	4a26      	ldr	r2, [pc, #152]	; (10d38 <z_add_timeout+0x148>)
   10c9e:	6813      	ldr	r3, [r2, #0]
   10ca0:	6852      	ldr	r2, [r2, #4]
   10ca2:	18e3      	adds	r3, r4, r3
   10ca4:	eb45 0202 	adc.w	r2, r5, r2
   10ca8:	f06f 0101 	mvn.w	r1, #1
   10cac:	1ace      	subs	r6, r1, r3
   10cae:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
   10cb2:	4632      	mov	r2, r6
   10cb4:	463b      	mov	r3, r7
   10cb6:	2e01      	cmp	r6, #1
   10cb8:	f177 0100 	sbcs.w	r1, r7, #0
   10cbc:	dbb0      	blt.n	10c20 <z_add_timeout+0x30>
   10cbe:	f8ca 2010 	str.w	r2, [sl, #16]
   10cc2:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   10cc6:	f7ff ff4b 	bl	10b60 <first>
   10cca:	4684      	mov	ip, r0
   10ccc:	f1bc 0f00 	cmp.w	ip, #0
   10cd0:	d0c9      	beq.n	10c66 <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
   10cd2:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
   10cd6:	e9da 2304 	ldrd	r2, r3, [sl, #16]
   10cda:	e9cd 2300 	strd	r2, r3, [sp]
   10cde:	4282      	cmp	r2, r0
   10ce0:	418b      	sbcs	r3, r1
   10ce2:	dbad      	blt.n	10c40 <z_add_timeout+0x50>
			to->dticks -= t->dticks;
   10ce4:	9b00      	ldr	r3, [sp, #0]
   10ce6:	1a1a      	subs	r2, r3, r0
   10ce8:	9b01      	ldr	r3, [sp, #4]
   10cea:	eb63 0301 	sbc.w	r3, r3, r1
   10cee:	f8ca 2010 	str.w	r2, [sl, #16]
   10cf2:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
   10cf6:	4660      	mov	r0, ip
   10cf8:	f7ff ff3c 	bl	10b74 <next>
   10cfc:	4684      	mov	ip, r0
   10cfe:	e7e5      	b.n	10ccc <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
   10d00:	4b0e      	ldr	r3, [pc, #56]	; (10d3c <z_add_timeout+0x14c>)
   10d02:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   10d04:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
   10d08:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
   10d0c:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   10d10:	f8c3 a004 	str.w	sl, [r3, #4]
}
   10d14:	e7aa      	b.n	10c6c <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   10d16:	f7ff ff45 	bl	10ba4 <next_timeout>

			if (next_time == 0 ||
   10d1a:	4603      	mov	r3, r0
   10d1c:	b118      	cbz	r0, 10d26 <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
   10d1e:	4a08      	ldr	r2, [pc, #32]	; (10d40 <z_add_timeout+0x150>)
   10d20:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
   10d22:	4282      	cmp	r2, r0
   10d24:	d0a6      	beq.n	10c74 <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
   10d26:	2100      	movs	r1, #0
   10d28:	4618      	mov	r0, r3
   10d2a:	f7f9 f973 	bl	a014 <sys_clock_set_timeout>
   10d2e:	e7a1      	b.n	10c74 <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   10d30:	b003      	add	sp, #12
   10d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10d36:	bf00      	nop
   10d38:	20000988 	.word	0x20000988
   10d3c:	200002c0 	.word	0x200002c0
   10d40:	20002f60 	.word	0x20002f60

00010d44 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
   10d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10d46:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   10d48:	f7ff fbae 	bl	104a8 <z_time_slice>
	__asm__ volatile(
   10d4c:	f04f 0320 	mov.w	r3, #32
   10d50:	f3ef 8511 	mrs	r5, BASEPRI
   10d54:	f383 8812 	msr	BASEPRI_MAX, r3
   10d58:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   10d5c:	4b28      	ldr	r3, [pc, #160]	; (10e00 <sys_clock_announce+0xbc>)
   10d5e:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   10d60:	f7ff fefe 	bl	10b60 <first>
   10d64:	4604      	mov	r4, r0
   10d66:	b350      	cbz	r0, 10dbe <sys_clock_announce+0x7a>
   10d68:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   10d6c:	4b24      	ldr	r3, [pc, #144]	; (10e00 <sys_clock_announce+0xbc>)
   10d6e:	681b      	ldr	r3, [r3, #0]
   10d70:	17d9      	asrs	r1, r3, #31
   10d72:	42b3      	cmp	r3, r6
   10d74:	eb71 0207 	sbcs.w	r2, r1, r7
   10d78:	db21      	blt.n	10dbe <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   10d7a:	4a22      	ldr	r2, [pc, #136]	; (10e04 <sys_clock_announce+0xc0>)
   10d7c:	e9d2 0100 	ldrd	r0, r1, [r2]
   10d80:	1980      	adds	r0, r0, r6
   10d82:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
   10d86:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
   10d8a:	1b9b      	subs	r3, r3, r6
   10d8c:	4a1c      	ldr	r2, [pc, #112]	; (10e00 <sys_clock_announce+0xbc>)
   10d8e:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
   10d90:	2200      	movs	r2, #0
   10d92:	2300      	movs	r3, #0
   10d94:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   10d98:	4620      	mov	r0, r4
   10d9a:	f005 f9a3 	bl	160e4 <remove_timeout>
	__asm__ volatile(
   10d9e:	f385 8811 	msr	BASEPRI, r5
   10da2:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
   10da6:	68a3      	ldr	r3, [r4, #8]
   10da8:	4620      	mov	r0, r4
   10daa:	4798      	blx	r3
	__asm__ volatile(
   10dac:	f04f 0320 	mov.w	r3, #32
   10db0:	f3ef 8511 	mrs	r5, BASEPRI
   10db4:	f383 8812 	msr	BASEPRI_MAX, r3
   10db8:	f3bf 8f6f 	isb	sy
   10dbc:	e7d0      	b.n	10d60 <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
   10dbe:	b144      	cbz	r4, 10dd2 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
   10dc0:	4b0f      	ldr	r3, [pc, #60]	; (10e00 <sys_clock_announce+0xbc>)
   10dc2:	6819      	ldr	r1, [r3, #0]
   10dc4:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   10dc8:	1a52      	subs	r2, r2, r1
   10dca:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   10dce:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
   10dd2:	480c      	ldr	r0, [pc, #48]	; (10e04 <sys_clock_announce+0xc0>)
   10dd4:	490a      	ldr	r1, [pc, #40]	; (10e00 <sys_clock_announce+0xbc>)
   10dd6:	680c      	ldr	r4, [r1, #0]
   10dd8:	e9d0 2300 	ldrd	r2, r3, [r0]
   10ddc:	1912      	adds	r2, r2, r4
   10dde:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
   10de2:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
   10de6:	2400      	movs	r4, #0
   10de8:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
   10dea:	f7ff fedb 	bl	10ba4 <next_timeout>
   10dee:	4621      	mov	r1, r4
   10df0:	f7f9 f910 	bl	a014 <sys_clock_set_timeout>
	__asm__ volatile(
   10df4:	f385 8811 	msr	BASEPRI, r5
   10df8:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   10dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10dfe:	bf00      	nop
   10e00:	20002fa0 	.word	0x20002fa0
   10e04:	20000988 	.word	0x20000988

00010e08 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   10e08:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
   10e0a:	2100      	movs	r1, #0
	__asm__ volatile(
   10e0c:	f04f 0320 	mov.w	r3, #32
   10e10:	f3ef 8411 	mrs	r4, BASEPRI
   10e14:	f383 8812 	msr	BASEPRI_MAX, r3
   10e18:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
   10e1c:	2200      	movs	r2, #0
   10e1e:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
   10e20:	b969      	cbnz	r1, 10e3e <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
   10e22:	f7f9 f92b 	bl	a07c <sys_clock_elapsed>
   10e26:	4b07      	ldr	r3, [pc, #28]	; (10e44 <sys_clock_tick_get+0x3c>)
   10e28:	e9d3 2300 	ldrd	r2, r3, [r3]
   10e2c:	1812      	adds	r2, r2, r0
   10e2e:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   10e32:	f384 8811 	msr	BASEPRI, r4
   10e36:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   10e3a:	2101      	movs	r1, #1
   10e3c:	e7f0      	b.n	10e20 <sys_clock_tick_get+0x18>
	}
	return t;
}
   10e3e:	4610      	mov	r0, r2
   10e40:	4619      	mov	r1, r3
   10e42:	bd10      	pop	{r4, pc}
   10e44:	20000988 	.word	0x20000988

00010e48 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   10e48:	b538      	push	{r3, r4, r5, lr}
   10e4a:	4604      	mov	r4, r0
	__asm__ volatile(
   10e4c:	f04f 0320 	mov.w	r3, #32
   10e50:	f3ef 8511 	mrs	r5, BASEPRI
   10e54:	f383 8812 	msr	BASEPRI_MAX, r3
   10e58:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   10e5c:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   10e60:	ea52 0103 	orrs.w	r1, r2, r3
   10e64:	d005      	beq.n	10e72 <z_timer_expiration_handler+0x2a>
   10e66:	f1b3 3fff 	cmp.w	r3, #4294967295
   10e6a:	bf08      	it	eq
   10e6c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   10e70:	d11a      	bne.n	10ea8 <z_timer_expiration_handler+0x60>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   10e72:	6b23      	ldr	r3, [r4, #48]	; 0x30
   10e74:	3301      	adds	r3, #1
   10e76:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   10e78:	6a23      	ldr	r3, [r4, #32]
   10e7a:	b10b      	cbz	r3, 10e80 <z_timer_expiration_handler+0x38>
		timer->expiry_fn(timer);
   10e7c:	4620      	mov	r0, r4
   10e7e:	4798      	blx	r3
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   10e80:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   10e84:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   10e86:	42a3      	cmp	r3, r4
   10e88:	d012      	beq.n	10eb0 <z_timer_expiration_handler+0x68>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   10e8a:	b18c      	cbz	r4, 10eb0 <z_timer_expiration_handler+0x68>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
   10e8c:	4620      	mov	r0, r4
   10e8e:	f004 ff8e 	bl	15dae <z_unpend_thread_no_timeout>
   10e92:	2300      	movs	r3, #0
   10e94:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	__asm__ volatile(
   10e98:	f385 8811 	msr	BASEPRI, r5
   10e9c:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
   10ea0:	4620      	mov	r0, r4
   10ea2:	f004 ffea 	bl	15e7a <z_ready_thread>
}
   10ea6:	bd38      	pop	{r3, r4, r5, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   10ea8:	4904      	ldr	r1, [pc, #16]	; (10ebc <z_timer_expiration_handler+0x74>)
   10eaa:	f7ff fea1 	bl	10bf0 <z_add_timeout>
   10eae:	e7e0      	b.n	10e72 <z_timer_expiration_handler+0x2a>
   10eb0:	f385 8811 	msr	BASEPRI, r5
   10eb4:	f3bf 8f6f 	isb	sy
		return;
   10eb8:	e7f5      	b.n	10ea6 <z_timer_expiration_handler+0x5e>
   10eba:	bf00      	nop
   10ebc:	00010e49 	.word	0x00010e49

00010ec0 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   10ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ec4:	b087      	sub	sp, #28
   10ec6:	4614      	mov	r4, r2
   10ec8:	461d      	mov	r5, r3
   10eca:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   10ece:	f1b3 3fff 	cmp.w	r3, #4294967295
   10ed2:	bf08      	it	eq
   10ed4:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   10ed8:	d035      	beq.n	10f46 <z_impl_k_timer_start+0x86>
   10eda:	4606      	mov	r6, r0
   10edc:	4613      	mov	r3, r2
   10ede:	462a      	mov	r2, r5
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   10ee0:	f1b9 3fff 	cmp.w	r9, #4294967295
   10ee4:	bf08      	it	eq
   10ee6:	f1b8 3fff 	cmpeq.w	r8, #4294967295
   10eea:	d012      	beq.n	10f12 <z_impl_k_timer_start+0x52>
   10eec:	ea58 0109 	orrs.w	r1, r8, r9
   10ef0:	d00f      	beq.n	10f12 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
   10ef2:	f06f 0701 	mvn.w	r7, #1
   10ef6:	ebb7 0708 	subs.w	r7, r7, r8
   10efa:	9702      	str	r7, [sp, #8]
   10efc:	f04f 31ff 	mov.w	r1, #4294967295
   10f00:	eb61 0709 	sbc.w	r7, r1, r9
   10f04:	9703      	str	r7, [sp, #12]
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   10f06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   10f0a:	2800      	cmp	r0, #0
   10f0c:	f171 0100 	sbcs.w	r1, r1, #0
   10f10:	db1c      	blt.n	10f4c <z_impl_k_timer_start+0x8c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   10f12:	f06f 0101 	mvn.w	r1, #1
   10f16:	ebb1 0a03 	subs.w	sl, r1, r3
   10f1a:	f04f 31ff 	mov.w	r1, #4294967295
   10f1e:	eb61 0b02 	sbc.w	fp, r1, r2
   10f22:	f1ba 0f00 	cmp.w	sl, #0
   10f26:	f17b 0100 	sbcs.w	r1, fp, #0
   10f2a:	db23      	blt.n	10f74 <z_impl_k_timer_start+0xb4>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
   10f2c:	4630      	mov	r0, r6
   10f2e:	f005 f8f0 	bl	16112 <z_abort_timeout>
	timer->period = period;
   10f32:	e9c6 890a 	strd	r8, r9, [r6, #40]	; 0x28
	timer->status = 0U;
   10f36:	2300      	movs	r3, #0
   10f38:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   10f3a:	4622      	mov	r2, r4
   10f3c:	462b      	mov	r3, r5
   10f3e:	4917      	ldr	r1, [pc, #92]	; (10f9c <z_impl_k_timer_start+0xdc>)
   10f40:	4630      	mov	r0, r6
   10f42:	f7ff fe55 	bl	10bf0 <z_add_timeout>
		     duration);
}
   10f46:	b007      	add	sp, #28
   10f48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		period.ticks = MAX(period.ticks - 1, 1);
   10f4c:	f118 31ff 	adds.w	r1, r8, #4294967295
   10f50:	9104      	str	r1, [sp, #16]
   10f52:	f149 31ff 	adc.w	r1, r9, #4294967295
   10f56:	9105      	str	r1, [sp, #20]
   10f58:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
   10f5c:	4638      	mov	r0, r7
   10f5e:	4641      	mov	r1, r8
   10f60:	2f01      	cmp	r7, #1
   10f62:	f178 0700 	sbcs.w	r7, r8, #0
   10f66:	db02      	blt.n	10f6e <z_impl_k_timer_start+0xae>
   10f68:	4680      	mov	r8, r0
   10f6a:	4689      	mov	r9, r1
   10f6c:	e7d1      	b.n	10f12 <z_impl_k_timer_start+0x52>
   10f6e:	2001      	movs	r0, #1
   10f70:	2100      	movs	r1, #0
   10f72:	e7f9      	b.n	10f68 <z_impl_k_timer_start+0xa8>
		duration.ticks = MAX(duration.ticks - 1, 0);
   10f74:	f113 33ff 	adds.w	r3, r3, #4294967295
   10f78:	9300      	str	r3, [sp, #0]
   10f7a:	f142 33ff 	adc.w	r3, r2, #4294967295
   10f7e:	9301      	str	r3, [sp, #4]
   10f80:	e9dd 0100 	ldrd	r0, r1, [sp]
   10f84:	4602      	mov	r2, r0
   10f86:	460b      	mov	r3, r1
   10f88:	2800      	cmp	r0, #0
   10f8a:	f171 0100 	sbcs.w	r1, r1, #0
   10f8e:	db02      	blt.n	10f96 <z_impl_k_timer_start+0xd6>
   10f90:	4614      	mov	r4, r2
   10f92:	461d      	mov	r5, r3
   10f94:	e7ca      	b.n	10f2c <z_impl_k_timer_start+0x6c>
   10f96:	2200      	movs	r2, #0
   10f98:	4613      	mov	r3, r2
   10f9a:	e7f9      	b.n	10f90 <z_impl_k_timer_start+0xd0>
   10f9c:	00010e49 	.word	0x00010e49

00010fa0 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   10fa0:	b538      	push	{r3, r4, r5, lr}
   10fa2:	4604      	mov	r4, r0
   10fa4:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   10fa6:	f004 fdce 	bl	15b46 <k_is_in_isr>
   10faa:	b948      	cbnz	r0, 10fc0 <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   10fac:	4b05      	ldr	r3, [pc, #20]	; (10fc4 <z_thread_aligned_alloc+0x24>)
   10fae:	689b      	ldr	r3, [r3, #8]
   10fb0:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
	}

	if (heap != NULL) {
   10fb4:	b118      	cbz	r0, 10fbe <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
   10fb6:	462a      	mov	r2, r5
   10fb8:	4621      	mov	r1, r4
   10fba:	f005 f96a 	bl	16292 <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
   10fbe:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
   10fc0:	4801      	ldr	r0, [pc, #4]	; (10fc8 <z_thread_aligned_alloc+0x28>)
   10fc2:	e7f7      	b.n	10fb4 <z_thread_aligned_alloc+0x14>
   10fc4:	20002f60 	.word	0x20002f60
   10fc8:	200003a0 	.word	0x200003a0

00010fcc <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
   10fcc:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   10fce:	4a03      	ldr	r2, [pc, #12]	; (10fdc <boot_banner+0x10>)
   10fd0:	4903      	ldr	r1, [pc, #12]	; (10fe0 <boot_banner+0x14>)
   10fd2:	4804      	ldr	r0, [pc, #16]	; (10fe4 <boot_banner+0x18>)
   10fd4:	f000 fa92 	bl	114fc <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   10fd8:	bd08      	pop	{r3, pc}
   10fda:	bf00      	nop
   10fdc:	00017edc 	.word	0x00017edc
   10fe0:	00017f10 	.word	0x00017f10
   10fe4:	00017f1c 	.word	0x00017f1c

00010fe8 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   10fe8:	b510      	push	{r4, lr}
   10fea:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   10fec:	4b08      	ldr	r3, [pc, #32]	; (11010 <k_sys_work_q_init+0x28>)
   10fee:	9302      	str	r3, [sp, #8]
   10ff0:	2400      	movs	r4, #0
   10ff2:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   10ff6:	ab02      	add	r3, sp, #8
   10ff8:	9300      	str	r3, [sp, #0]
   10ffa:	f04f 33ff 	mov.w	r3, #4294967295
   10ffe:	f44f 6280 	mov.w	r2, #1024	; 0x400
   11002:	4904      	ldr	r1, [pc, #16]	; (11014 <k_sys_work_q_init+0x2c>)
   11004:	4804      	ldr	r0, [pc, #16]	; (11018 <k_sys_work_q_init+0x30>)
   11006:	f7ff f911 	bl	1022c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   1100a:	4620      	mov	r0, r4
   1100c:	b004      	add	sp, #16
   1100e:	bd10      	pop	{r4, pc}
   11010:	00017f44 	.word	0x00017f44
   11014:	20004ea0 	.word	0x20004ea0
   11018:	20000990 	.word	0x20000990

0001101c <nrf_cc3xx_platform_init_no_rng>:
   1101c:	b510      	push	{r4, lr}
   1101e:	4c0a      	ldr	r4, [pc, #40]	; (11048 <nrf_cc3xx_platform_init_no_rng+0x2c>)
   11020:	6823      	ldr	r3, [r4, #0]
   11022:	b11b      	cbz	r3, 1102c <nrf_cc3xx_platform_init_no_rng+0x10>
   11024:	2301      	movs	r3, #1
   11026:	6023      	str	r3, [r4, #0]
   11028:	2000      	movs	r0, #0
   1102a:	bd10      	pop	{r4, pc}
   1102c:	f000 f8d6 	bl	111dc <CC_LibInitNoRng>
   11030:	2800      	cmp	r0, #0
   11032:	d0f7      	beq.n	11024 <nrf_cc3xx_platform_init_no_rng+0x8>
   11034:	3801      	subs	r0, #1
   11036:	2806      	cmp	r0, #6
   11038:	d803      	bhi.n	11042 <nrf_cc3xx_platform_init_no_rng+0x26>
   1103a:	4b04      	ldr	r3, [pc, #16]	; (1104c <nrf_cc3xx_platform_init_no_rng+0x30>)
   1103c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   11040:	bd10      	pop	{r4, pc}
   11042:	4803      	ldr	r0, [pc, #12]	; (11050 <nrf_cc3xx_platform_init_no_rng+0x34>)
   11044:	bd10      	pop	{r4, pc}
   11046:	bf00      	nop
   11048:	20002fa4 	.word	0x20002fa4
   1104c:	00017f50 	.word	0x00017f50
   11050:	ffff8ffe 	.word	0xffff8ffe

00011054 <nrf_cc3xx_platform_abort>:
   11054:	f3bf 8f4f 	dsb	sy
   11058:	4905      	ldr	r1, [pc, #20]	; (11070 <nrf_cc3xx_platform_abort+0x1c>)
   1105a:	4b06      	ldr	r3, [pc, #24]	; (11074 <nrf_cc3xx_platform_abort+0x20>)
   1105c:	68ca      	ldr	r2, [r1, #12]
   1105e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   11062:	4313      	orrs	r3, r2
   11064:	60cb      	str	r3, [r1, #12]
   11066:	f3bf 8f4f 	dsb	sy
   1106a:	bf00      	nop
   1106c:	e7fd      	b.n	1106a <nrf_cc3xx_platform_abort+0x16>
   1106e:	bf00      	nop
   11070:	e000ed00 	.word	0xe000ed00
   11074:	05fa0004 	.word	0x05fa0004

00011078 <CC_PalAbort>:
   11078:	b4f0      	push	{r4, r5, r6, r7}
   1107a:	4f09      	ldr	r7, [pc, #36]	; (110a0 <CC_PalAbort+0x28>)
   1107c:	4e09      	ldr	r6, [pc, #36]	; (110a4 <CC_PalAbort+0x2c>)
   1107e:	4c0a      	ldr	r4, [pc, #40]	; (110a8 <CC_PalAbort+0x30>)
   11080:	4a0a      	ldr	r2, [pc, #40]	; (110ac <CC_PalAbort+0x34>)
   11082:	4d0b      	ldr	r5, [pc, #44]	; (110b0 <CC_PalAbort+0x38>)
   11084:	490b      	ldr	r1, [pc, #44]	; (110b4 <CC_PalAbort+0x3c>)
   11086:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   1108a:	603b      	str	r3, [r7, #0]
   1108c:	6852      	ldr	r2, [r2, #4]
   1108e:	6033      	str	r3, [r6, #0]
   11090:	6023      	str	r3, [r4, #0]
   11092:	2400      	movs	r4, #0
   11094:	602b      	str	r3, [r5, #0]
   11096:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
   1109a:	bcf0      	pop	{r4, r5, r6, r7}
   1109c:	4710      	bx	r2
   1109e:	bf00      	nop
   110a0:	5002b400 	.word	0x5002b400
   110a4:	5002b404 	.word	0x5002b404
   110a8:	5002b408 	.word	0x5002b408
   110ac:	200002c8 	.word	0x200002c8
   110b0:	5002b40c 	.word	0x5002b40c
   110b4:	5002a000 	.word	0x5002a000

000110b8 <nrf_cc3xx_platform_set_abort>:
   110b8:	e9d0 1200 	ldrd	r1, r2, [r0]
   110bc:	4b01      	ldr	r3, [pc, #4]	; (110c4 <nrf_cc3xx_platform_set_abort+0xc>)
   110be:	e9c3 1200 	strd	r1, r2, [r3]
   110c2:	4770      	bx	lr
   110c4:	200002c8 	.word	0x200002c8

000110c8 <mutex_free>:
   110c8:	b510      	push	{r4, lr}
   110ca:	4604      	mov	r4, r0
   110cc:	b130      	cbz	r0, 110dc <mutex_free+0x14>
   110ce:	6863      	ldr	r3, [r4, #4]
   110d0:	06db      	lsls	r3, r3, #27
   110d2:	d502      	bpl.n	110da <mutex_free+0x12>
   110d4:	2300      	movs	r3, #0
   110d6:	6023      	str	r3, [r4, #0]
   110d8:	6063      	str	r3, [r4, #4]
   110da:	bd10      	pop	{r4, pc}
   110dc:	4b02      	ldr	r3, [pc, #8]	; (110e8 <mutex_free+0x20>)
   110de:	4803      	ldr	r0, [pc, #12]	; (110ec <mutex_free+0x24>)
   110e0:	685b      	ldr	r3, [r3, #4]
   110e2:	4798      	blx	r3
   110e4:	e7f3      	b.n	110ce <mutex_free+0x6>
   110e6:	bf00      	nop
   110e8:	200002c8 	.word	0x200002c8
   110ec:	00017f6c 	.word	0x00017f6c

000110f0 <mutex_unlock>:
   110f0:	b168      	cbz	r0, 1110e <mutex_unlock+0x1e>
   110f2:	6843      	ldr	r3, [r0, #4]
   110f4:	b13b      	cbz	r3, 11106 <mutex_unlock+0x16>
   110f6:	06db      	lsls	r3, r3, #27
   110f8:	d507      	bpl.n	1110a <mutex_unlock+0x1a>
   110fa:	f3bf 8f5f 	dmb	sy
   110fe:	2300      	movs	r3, #0
   11100:	6003      	str	r3, [r0, #0]
   11102:	4618      	mov	r0, r3
   11104:	4770      	bx	lr
   11106:	4803      	ldr	r0, [pc, #12]	; (11114 <mutex_unlock+0x24>)
   11108:	4770      	bx	lr
   1110a:	4803      	ldr	r0, [pc, #12]	; (11118 <mutex_unlock+0x28>)
   1110c:	4770      	bx	lr
   1110e:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   11112:	4770      	bx	lr
   11114:	ffff8fea 	.word	0xffff8fea
   11118:	ffff8fe9 	.word	0xffff8fe9

0001111c <mutex_init>:
   1111c:	b510      	push	{r4, lr}
   1111e:	4604      	mov	r4, r0
   11120:	b120      	cbz	r0, 1112c <mutex_init+0x10>
   11122:	2200      	movs	r2, #0
   11124:	2311      	movs	r3, #17
   11126:	6022      	str	r2, [r4, #0]
   11128:	6063      	str	r3, [r4, #4]
   1112a:	bd10      	pop	{r4, pc}
   1112c:	4801      	ldr	r0, [pc, #4]	; (11134 <mutex_init+0x18>)
   1112e:	f7ff ffa3 	bl	11078 <CC_PalAbort>
   11132:	e7f6      	b.n	11122 <mutex_init+0x6>
   11134:	00017f94 	.word	0x00017f94

00011138 <mutex_lock>:
   11138:	b1c0      	cbz	r0, 1116c <mutex_lock+0x34>
   1113a:	6843      	ldr	r3, [r0, #4]
   1113c:	b1a3      	cbz	r3, 11168 <mutex_lock+0x30>
   1113e:	06db      	lsls	r3, r3, #27
   11140:	d510      	bpl.n	11164 <mutex_lock+0x2c>
   11142:	2201      	movs	r2, #1
   11144:	f3bf 8f5b 	dmb	ish
   11148:	e850 3f00 	ldrex	r3, [r0]
   1114c:	e840 2100 	strex	r1, r2, [r0]
   11150:	2900      	cmp	r1, #0
   11152:	d1f9      	bne.n	11148 <mutex_lock+0x10>
   11154:	f3bf 8f5b 	dmb	ish
   11158:	2b01      	cmp	r3, #1
   1115a:	d0f3      	beq.n	11144 <mutex_lock+0xc>
   1115c:	f3bf 8f5f 	dmb	sy
   11160:	2000      	movs	r0, #0
   11162:	4770      	bx	lr
   11164:	4803      	ldr	r0, [pc, #12]	; (11174 <mutex_lock+0x3c>)
   11166:	4770      	bx	lr
   11168:	4803      	ldr	r0, [pc, #12]	; (11178 <mutex_lock+0x40>)
   1116a:	4770      	bx	lr
   1116c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   11170:	4770      	bx	lr
   11172:	bf00      	nop
   11174:	ffff8fe9 	.word	0xffff8fe9
   11178:	ffff8fea 	.word	0xffff8fea

0001117c <nrf_cc3xx_platform_set_mutexes>:
   1117c:	b570      	push	{r4, r5, r6, lr}
   1117e:	e9d0 2300 	ldrd	r2, r3, [r0]
   11182:	4c13      	ldr	r4, [pc, #76]	; (111d0 <nrf_cc3xx_platform_set_mutexes+0x54>)
   11184:	4d13      	ldr	r5, [pc, #76]	; (111d4 <nrf_cc3xx_platform_set_mutexes+0x58>)
   11186:	e9c4 2300 	strd	r2, r3, [r4]
   1118a:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
   1118e:	e9c4 6302 	strd	r6, r3, [r4, #8]
   11192:	4b11      	ldr	r3, [pc, #68]	; (111d8 <nrf_cc3xx_platform_set_mutexes+0x5c>)
   11194:	6808      	ldr	r0, [r1, #0]
   11196:	6018      	str	r0, [r3, #0]
   11198:	6848      	ldr	r0, [r1, #4]
   1119a:	6058      	str	r0, [r3, #4]
   1119c:	6888      	ldr	r0, [r1, #8]
   1119e:	6098      	str	r0, [r3, #8]
   111a0:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
   111a4:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   111a8:	60de      	str	r6, [r3, #12]
   111aa:	6118      	str	r0, [r3, #16]
   111ac:	06cb      	lsls	r3, r1, #27
   111ae:	d50d      	bpl.n	111cc <nrf_cc3xx_platform_set_mutexes+0x50>
   111b0:	2300      	movs	r3, #0
   111b2:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
   111b6:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
   111ba:	f505 7088 	add.w	r0, r5, #272	; 0x110
   111be:	4790      	blx	r2
   111c0:	6823      	ldr	r3, [r4, #0]
   111c2:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
   111c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   111ca:	4718      	bx	r3
   111cc:	bd70      	pop	{r4, r5, r6, pc}
   111ce:	bf00      	nop
   111d0:	200002d8 	.word	0x200002d8
   111d4:	20002fd0 	.word	0x20002fd0
   111d8:	200002e8 	.word	0x200002e8

000111dc <CC_LibInitNoRng>:
   111dc:	b510      	push	{r4, lr}
   111de:	f000 f833 	bl	11248 <CC_HalInit>
   111e2:	b120      	cbz	r0, 111ee <CC_LibInitNoRng+0x12>
   111e4:	2403      	movs	r4, #3
   111e6:	f000 f867 	bl	112b8 <CC_PalTerminate>
   111ea:	4620      	mov	r0, r4
   111ec:	bd10      	pop	{r4, pc}
   111ee:	f000 f835 	bl	1125c <CC_PalInit>
   111f2:	b990      	cbnz	r0, 1121a <CC_LibInitNoRng+0x3e>
   111f4:	f000 f8b0 	bl	11358 <CC_PalPowerSaveModeSelect>
   111f8:	b990      	cbnz	r0, 11220 <CC_LibInitNoRng+0x44>
   111fa:	4b0f      	ldr	r3, [pc, #60]	; (11238 <CC_LibInitNoRng+0x5c>)
   111fc:	681b      	ldr	r3, [r3, #0]
   111fe:	0e1b      	lsrs	r3, r3, #24
   11200:	2bf0      	cmp	r3, #240	; 0xf0
   11202:	d108      	bne.n	11216 <CC_LibInitNoRng+0x3a>
   11204:	4a0d      	ldr	r2, [pc, #52]	; (1123c <CC_LibInitNoRng+0x60>)
   11206:	4b0e      	ldr	r3, [pc, #56]	; (11240 <CC_LibInitNoRng+0x64>)
   11208:	6812      	ldr	r2, [r2, #0]
   1120a:	429a      	cmp	r2, r3
   1120c:	d00a      	beq.n	11224 <CC_LibInitNoRng+0x48>
   1120e:	2407      	movs	r4, #7
   11210:	f000 f81c 	bl	1124c <CC_HalTerminate>
   11214:	e7e7      	b.n	111e6 <CC_LibInitNoRng+0xa>
   11216:	2406      	movs	r4, #6
   11218:	e7fa      	b.n	11210 <CC_LibInitNoRng+0x34>
   1121a:	2404      	movs	r4, #4
   1121c:	4620      	mov	r0, r4
   1121e:	bd10      	pop	{r4, pc}
   11220:	2400      	movs	r4, #0
   11222:	e7f5      	b.n	11210 <CC_LibInitNoRng+0x34>
   11224:	2001      	movs	r0, #1
   11226:	f000 f897 	bl	11358 <CC_PalPowerSaveModeSelect>
   1122a:	4604      	mov	r4, r0
   1122c:	2800      	cmp	r0, #0
   1122e:	d1f7      	bne.n	11220 <CC_LibInitNoRng+0x44>
   11230:	4b04      	ldr	r3, [pc, #16]	; (11244 <CC_LibInitNoRng+0x68>)
   11232:	6018      	str	r0, [r3, #0]
   11234:	e7d9      	b.n	111ea <CC_LibInitNoRng+0xe>
   11236:	bf00      	nop
   11238:	5002b928 	.word	0x5002b928
   1123c:	5002ba24 	.word	0x5002ba24
   11240:	20e00000 	.word	0x20e00000
   11244:	5002ba0c 	.word	0x5002ba0c

00011248 <CC_HalInit>:
   11248:	2000      	movs	r0, #0
   1124a:	4770      	bx	lr

0001124c <CC_HalTerminate>:
   1124c:	2000      	movs	r0, #0
   1124e:	4770      	bx	lr

00011250 <CC_HalMaskInterrupt>:
   11250:	4b01      	ldr	r3, [pc, #4]	; (11258 <CC_HalMaskInterrupt+0x8>)
   11252:	6018      	str	r0, [r3, #0]
   11254:	4770      	bx	lr
   11256:	bf00      	nop
   11258:	5002ba04 	.word	0x5002ba04

0001125c <CC_PalInit>:
   1125c:	b510      	push	{r4, lr}
   1125e:	4811      	ldr	r0, [pc, #68]	; (112a4 <CC_PalInit+0x48>)
   11260:	f000 f848 	bl	112f4 <CC_PalMutexCreate>
   11264:	b100      	cbz	r0, 11268 <CC_PalInit+0xc>
   11266:	bd10      	pop	{r4, pc}
   11268:	480f      	ldr	r0, [pc, #60]	; (112a8 <CC_PalInit+0x4c>)
   1126a:	f000 f843 	bl	112f4 <CC_PalMutexCreate>
   1126e:	2800      	cmp	r0, #0
   11270:	d1f9      	bne.n	11266 <CC_PalInit+0xa>
   11272:	4c0e      	ldr	r4, [pc, #56]	; (112ac <CC_PalInit+0x50>)
   11274:	4620      	mov	r0, r4
   11276:	f000 f83d 	bl	112f4 <CC_PalMutexCreate>
   1127a:	2800      	cmp	r0, #0
   1127c:	d1f3      	bne.n	11266 <CC_PalInit+0xa>
   1127e:	4b0c      	ldr	r3, [pc, #48]	; (112b0 <CC_PalInit+0x54>)
   11280:	480c      	ldr	r0, [pc, #48]	; (112b4 <CC_PalInit+0x58>)
   11282:	601c      	str	r4, [r3, #0]
   11284:	f000 f836 	bl	112f4 <CC_PalMutexCreate>
   11288:	4601      	mov	r1, r0
   1128a:	2800      	cmp	r0, #0
   1128c:	d1eb      	bne.n	11266 <CC_PalInit+0xa>
   1128e:	f000 f82d 	bl	112ec <CC_PalDmaInit>
   11292:	4604      	mov	r4, r0
   11294:	b108      	cbz	r0, 1129a <CC_PalInit+0x3e>
   11296:	4620      	mov	r0, r4
   11298:	bd10      	pop	{r4, pc}
   1129a:	f000 f83f 	bl	1131c <CC_PalPowerSaveModeInit>
   1129e:	4620      	mov	r0, r4
   112a0:	e7fa      	b.n	11298 <CC_PalInit+0x3c>
   112a2:	bf00      	nop
   112a4:	20000320 	.word	0x20000320
   112a8:	20000314 	.word	0x20000314
   112ac:	2000031c 	.word	0x2000031c
   112b0:	20000324 	.word	0x20000324
   112b4:	20000318 	.word	0x20000318

000112b8 <CC_PalTerminate>:
   112b8:	b508      	push	{r3, lr}
   112ba:	4808      	ldr	r0, [pc, #32]	; (112dc <CC_PalTerminate+0x24>)
   112bc:	f000 f824 	bl	11308 <CC_PalMutexDestroy>
   112c0:	4807      	ldr	r0, [pc, #28]	; (112e0 <CC_PalTerminate+0x28>)
   112c2:	f000 f821 	bl	11308 <CC_PalMutexDestroy>
   112c6:	4807      	ldr	r0, [pc, #28]	; (112e4 <CC_PalTerminate+0x2c>)
   112c8:	f000 f81e 	bl	11308 <CC_PalMutexDestroy>
   112cc:	4806      	ldr	r0, [pc, #24]	; (112e8 <CC_PalTerminate+0x30>)
   112ce:	f000 f81b 	bl	11308 <CC_PalMutexDestroy>
   112d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   112d6:	f000 b80b 	b.w	112f0 <CC_PalDmaTerminate>
   112da:	bf00      	nop
   112dc:	20000320 	.word	0x20000320
   112e0:	20000314 	.word	0x20000314
   112e4:	2000031c 	.word	0x2000031c
   112e8:	20000318 	.word	0x20000318

000112ec <CC_PalDmaInit>:
   112ec:	2000      	movs	r0, #0
   112ee:	4770      	bx	lr

000112f0 <CC_PalDmaTerminate>:
   112f0:	4770      	bx	lr
   112f2:	bf00      	nop

000112f4 <CC_PalMutexCreate>:
   112f4:	b508      	push	{r3, lr}
   112f6:	4b03      	ldr	r3, [pc, #12]	; (11304 <CC_PalMutexCreate+0x10>)
   112f8:	6802      	ldr	r2, [r0, #0]
   112fa:	681b      	ldr	r3, [r3, #0]
   112fc:	6810      	ldr	r0, [r2, #0]
   112fe:	4798      	blx	r3
   11300:	2000      	movs	r0, #0
   11302:	bd08      	pop	{r3, pc}
   11304:	200002d8 	.word	0x200002d8

00011308 <CC_PalMutexDestroy>:
   11308:	b508      	push	{r3, lr}
   1130a:	4b03      	ldr	r3, [pc, #12]	; (11318 <CC_PalMutexDestroy+0x10>)
   1130c:	6802      	ldr	r2, [r0, #0]
   1130e:	685b      	ldr	r3, [r3, #4]
   11310:	6810      	ldr	r0, [r2, #0]
   11312:	4798      	blx	r3
   11314:	2000      	movs	r0, #0
   11316:	bd08      	pop	{r3, pc}
   11318:	200002d8 	.word	0x200002d8

0001131c <CC_PalPowerSaveModeInit>:
   1131c:	b570      	push	{r4, r5, r6, lr}
   1131e:	4c09      	ldr	r4, [pc, #36]	; (11344 <CC_PalPowerSaveModeInit+0x28>)
   11320:	4d09      	ldr	r5, [pc, #36]	; (11348 <CC_PalPowerSaveModeInit+0x2c>)
   11322:	6920      	ldr	r0, [r4, #16]
   11324:	68ab      	ldr	r3, [r5, #8]
   11326:	4798      	blx	r3
   11328:	b118      	cbz	r0, 11332 <CC_PalPowerSaveModeInit+0x16>
   1132a:	4b08      	ldr	r3, [pc, #32]	; (1134c <CC_PalPowerSaveModeInit+0x30>)
   1132c:	4808      	ldr	r0, [pc, #32]	; (11350 <CC_PalPowerSaveModeInit+0x34>)
   1132e:	685b      	ldr	r3, [r3, #4]
   11330:	4798      	blx	r3
   11332:	4a08      	ldr	r2, [pc, #32]	; (11354 <CC_PalPowerSaveModeInit+0x38>)
   11334:	68eb      	ldr	r3, [r5, #12]
   11336:	6920      	ldr	r0, [r4, #16]
   11338:	2100      	movs	r1, #0
   1133a:	6011      	str	r1, [r2, #0]
   1133c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   11340:	4718      	bx	r3
   11342:	bf00      	nop
   11344:	200002e8 	.word	0x200002e8
   11348:	200002d8 	.word	0x200002d8
   1134c:	200002c8 	.word	0x200002c8
   11350:	00017fb8 	.word	0x00017fb8
   11354:	20002fb8 	.word	0x20002fb8

00011358 <CC_PalPowerSaveModeSelect>:
   11358:	b570      	push	{r4, r5, r6, lr}
   1135a:	4d1a      	ldr	r5, [pc, #104]	; (113c4 <CC_PalPowerSaveModeSelect+0x6c>)
   1135c:	4e1a      	ldr	r6, [pc, #104]	; (113c8 <CC_PalPowerSaveModeSelect+0x70>)
   1135e:	4604      	mov	r4, r0
   11360:	68b2      	ldr	r2, [r6, #8]
   11362:	6928      	ldr	r0, [r5, #16]
   11364:	4790      	blx	r2
   11366:	b9f0      	cbnz	r0, 113a6 <CC_PalPowerSaveModeSelect+0x4e>
   11368:	b15c      	cbz	r4, 11382 <CC_PalPowerSaveModeSelect+0x2a>
   1136a:	4c18      	ldr	r4, [pc, #96]	; (113cc <CC_PalPowerSaveModeSelect+0x74>)
   1136c:	6823      	ldr	r3, [r4, #0]
   1136e:	b1ab      	cbz	r3, 1139c <CC_PalPowerSaveModeSelect+0x44>
   11370:	2b01      	cmp	r3, #1
   11372:	d01a      	beq.n	113aa <CC_PalPowerSaveModeSelect+0x52>
   11374:	3b01      	subs	r3, #1
   11376:	6023      	str	r3, [r4, #0]
   11378:	6928      	ldr	r0, [r5, #16]
   1137a:	68f3      	ldr	r3, [r6, #12]
   1137c:	4798      	blx	r3
   1137e:	2000      	movs	r0, #0
   11380:	bd70      	pop	{r4, r5, r6, pc}
   11382:	4c12      	ldr	r4, [pc, #72]	; (113cc <CC_PalPowerSaveModeSelect+0x74>)
   11384:	6821      	ldr	r1, [r4, #0]
   11386:	b939      	cbnz	r1, 11398 <CC_PalPowerSaveModeSelect+0x40>
   11388:	4b11      	ldr	r3, [pc, #68]	; (113d0 <CC_PalPowerSaveModeSelect+0x78>)
   1138a:	4a12      	ldr	r2, [pc, #72]	; (113d4 <CC_PalPowerSaveModeSelect+0x7c>)
   1138c:	2001      	movs	r0, #1
   1138e:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   11392:	6813      	ldr	r3, [r2, #0]
   11394:	2b00      	cmp	r3, #0
   11396:	d1fc      	bne.n	11392 <CC_PalPowerSaveModeSelect+0x3a>
   11398:	3101      	adds	r1, #1
   1139a:	6021      	str	r1, [r4, #0]
   1139c:	68f3      	ldr	r3, [r6, #12]
   1139e:	6928      	ldr	r0, [r5, #16]
   113a0:	4798      	blx	r3
   113a2:	2000      	movs	r0, #0
   113a4:	bd70      	pop	{r4, r5, r6, pc}
   113a6:	480c      	ldr	r0, [pc, #48]	; (113d8 <CC_PalPowerSaveModeSelect+0x80>)
   113a8:	bd70      	pop	{r4, r5, r6, pc}
   113aa:	4a0a      	ldr	r2, [pc, #40]	; (113d4 <CC_PalPowerSaveModeSelect+0x7c>)
   113ac:	6813      	ldr	r3, [r2, #0]
   113ae:	2b00      	cmp	r3, #0
   113b0:	d1fc      	bne.n	113ac <CC_PalPowerSaveModeSelect+0x54>
   113b2:	4a07      	ldr	r2, [pc, #28]	; (113d0 <CC_PalPowerSaveModeSelect+0x78>)
   113b4:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   113b8:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   113bc:	f7ff ff48 	bl	11250 <CC_HalMaskInterrupt>
   113c0:	6823      	ldr	r3, [r4, #0]
   113c2:	e7d7      	b.n	11374 <CC_PalPowerSaveModeSelect+0x1c>
   113c4:	200002e8 	.word	0x200002e8
   113c8:	200002d8 	.word	0x200002d8
   113cc:	20002fb8 	.word	0x20002fb8
   113d0:	5002a000 	.word	0x5002a000
   113d4:	5002b910 	.word	0x5002b910
   113d8:	ffff8fe9 	.word	0xffff8fe9

000113dc <crc16calc>:
 uint16_t crc16calc(char* pData, int length){
   113dc:	b410      	push	{r4}
   113de:	4604      	mov	r4, r0
     uint16_t wCrc = 0xffff;
   113e0:	f64f 70ff 	movw	r0, #65535	; 0xffff
     while (length--) {
   113e4:	460b      	mov	r3, r1
   113e6:	3901      	subs	r1, #1
   113e8:	b1a3      	cbz	r3, 11414 <crc16calc+0x38>
         wCrc ^= *(unsigned char *)pData++ << 8;
   113ea:	f814 3b01 	ldrb.w	r3, [r4], #1
   113ee:	ea80 2003 	eor.w	r0, r0, r3, lsl #8
         for (i=0; i < 8; i++)
   113f2:	2300      	movs	r3, #0
   113f4:	e006      	b.n	11404 <crc16calc+0x28>
             wCrc = wCrc & 0x8000 ? (wCrc << 1) ^ 0x1021 : wCrc << 1;
   113f6:	f241 0221 	movw	r2, #4129	; 0x1021
   113fa:	ea82 0040 	eor.w	r0, r2, r0, lsl #1
   113fe:	b280      	uxth	r0, r0
         for (i=0; i < 8; i++)
   11400:	3301      	adds	r3, #1
   11402:	b2db      	uxtb	r3, r3
   11404:	2b07      	cmp	r3, #7
   11406:	d8ed      	bhi.n	113e4 <crc16calc+0x8>
             wCrc = wCrc & 0x8000 ? (wCrc << 1) ^ 0x1021 : wCrc << 1;
   11408:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   1140c:	d1f3      	bne.n	113f6 <crc16calc+0x1a>
   1140e:	0040      	lsls	r0, r0, #1
   11410:	b280      	uxth	r0, r0
   11412:	e7f5      	b.n	11400 <crc16calc+0x24>
 }
   11414:	bc10      	pop	{r4}
   11416:	4770      	bx	lr

00011418 <EncapsulationMsgs>:
 void EncapsulationMsgs(char *data1,char *data2,int len){
   11418:	b538      	push	{r3, r4, r5, lr}
   1141a:	460d      	mov	r5, r1
   1141c:	4611      	mov	r1, r2
	 data2[0]=0x7E;
   1141e:	237e      	movs	r3, #126	; 0x7e
   11420:	702b      	strb	r3, [r5, #0]
	 int i = 1;
   11422:	2401      	movs	r4, #1
	 for(;i<=len;i++)data2[i]=data1[i-1];
   11424:	428c      	cmp	r4, r1
   11426:	dc05      	bgt.n	11434 <EncapsulationMsgs+0x1c>
   11428:	1903      	adds	r3, r0, r4
   1142a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   1142e:	552b      	strb	r3, [r5, r4]
   11430:	3401      	adds	r4, #1
   11432:	e7f7      	b.n	11424 <EncapsulationMsgs+0xc>
	 aux=crc16calc(data1,len);
   11434:	f7ff ffd2 	bl	113dc <crc16calc>
	 data2[i+1] = aux;
   11438:	1c63      	adds	r3, r4, #1
   1143a:	54e8      	strb	r0, [r5, r3]
	 data2[i]= aux>>8;
   1143c:	0a00      	lsrs	r0, r0, #8
   1143e:	5528      	strb	r0, [r5, r4]
	 data2[i+2] = 0xFF;
   11440:	3402      	adds	r4, #2
   11442:	23ff      	movs	r3, #255	; 0xff
   11444:	552b      	strb	r3, [r5, r4]
 }
   11446:	bd38      	pop	{r3, r4, r5, pc}

00011448 <MapFloat>:
 float MapFloat(float value, float fromLow, float fromHigh, float toLow, float toHigh) {
   11448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1144a:	460f      	mov	r7, r1
   1144c:	4616      	mov	r6, r2
   1144e:	461c      	mov	r4, r3
    return (value - fromLow) * (toHigh - toLow) / (fromHigh - fromLow) + toLow; 
   11450:	f7ef fb00 	bl	a54 <__aeabi_fsub>
   11454:	4605      	mov	r5, r0
   11456:	4621      	mov	r1, r4
   11458:	9806      	ldr	r0, [sp, #24]
   1145a:	f7ef fafb 	bl	a54 <__aeabi_fsub>
   1145e:	4601      	mov	r1, r0
   11460:	4628      	mov	r0, r5
   11462:	f7ef fc01 	bl	c68 <__aeabi_fmul>
   11466:	4605      	mov	r5, r0
   11468:	4639      	mov	r1, r7
   1146a:	4630      	mov	r0, r6
   1146c:	f7ef faf2 	bl	a54 <__aeabi_fsub>
   11470:	4601      	mov	r1, r0
   11472:	4628      	mov	r0, r5
   11474:	f7ef fcac 	bl	dd0 <__aeabi_fdiv>
   11478:	4621      	mov	r1, r4
   1147a:	f7ef faed 	bl	a58 <__addsf3>
  }
   1147e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011480 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   11480:	4602      	mov	r2, r0
   11482:	b158      	cbz	r0, 1149c <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   11484:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   11486:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   1148a:	2b01      	cmp	r3, #1
   1148c:	d003      	beq.n	11496 <sys_notify_validate+0x16>
   1148e:	2b03      	cmp	r3, #3
   11490:	d107      	bne.n	114a2 <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
   11492:	6803      	ldr	r3, [r0, #0]
   11494:	b143      	cbz	r3, 114a8 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
   11496:	2000      	movs	r0, #0
   11498:	6090      	str	r0, [r2, #8]
   1149a:	4770      	bx	lr
		return -EINVAL;
   1149c:	f06f 0015 	mvn.w	r0, #21
   114a0:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
   114a2:	f06f 0015 	mvn.w	r0, #21
   114a6:	4770      	bx	lr
			rv = -EINVAL;
   114a8:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
   114ac:	4770      	bx	lr

000114ae <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
   114ae:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   114b0:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   114b2:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
   114b6:	6081      	str	r1, [r0, #8]
	switch (method) {
   114b8:	2a03      	cmp	r2, #3
   114ba:	d103      	bne.n	114c4 <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   114bc:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   114be:	2200      	movs	r2, #0
   114c0:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   114c2:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
   114c4:	2000      	movs	r0, #0
   114c6:	e7fa      	b.n	114be <sys_notify_finalize+0x10>

000114c8 <arch_printk_char_out>:
}
   114c8:	2000      	movs	r0, #0
   114ca:	4770      	bx	lr

000114cc <str_out>:
{
   114cc:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   114ce:	680c      	ldr	r4, [r1, #0]
   114d0:	b154      	cbz	r4, 114e8 <str_out+0x1c>
   114d2:	688a      	ldr	r2, [r1, #8]
   114d4:	684b      	ldr	r3, [r1, #4]
   114d6:	429a      	cmp	r2, r3
   114d8:	da06      	bge.n	114e8 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
   114da:	3b01      	subs	r3, #1
   114dc:	429a      	cmp	r2, r3
   114de:	d008      	beq.n	114f2 <str_out+0x26>
		ctx->str[ctx->count++] = c;
   114e0:	1c53      	adds	r3, r2, #1
   114e2:	608b      	str	r3, [r1, #8]
   114e4:	54a0      	strb	r0, [r4, r2]
   114e6:	e002      	b.n	114ee <str_out+0x22>
		ctx->count++;
   114e8:	688b      	ldr	r3, [r1, #8]
   114ea:	3301      	adds	r3, #1
   114ec:	608b      	str	r3, [r1, #8]
}
   114ee:	bc10      	pop	{r4}
   114f0:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
   114f2:	1c53      	adds	r3, r2, #1
   114f4:	608b      	str	r3, [r1, #8]
   114f6:	2300      	movs	r3, #0
   114f8:	54a3      	strb	r3, [r4, r2]
   114fa:	e7f8      	b.n	114ee <str_out+0x22>

000114fc <printk>:
{
   114fc:	b40f      	push	{r0, r1, r2, r3}
   114fe:	b500      	push	{lr}
   11500:	b083      	sub	sp, #12
   11502:	a904      	add	r1, sp, #16
   11504:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   11508:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   1150a:	f7f0 fe59 	bl	21c0 <vprintk>
}
   1150e:	b003      	add	sp, #12
   11510:	f85d eb04 	ldr.w	lr, [sp], #4
   11514:	b004      	add	sp, #16
   11516:	4770      	bx	lr

00011518 <snprintk>:
{
   11518:	b40c      	push	{r2, r3}
   1151a:	b500      	push	{lr}
   1151c:	b083      	sub	sp, #12
   1151e:	ab04      	add	r3, sp, #16
   11520:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   11524:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   11526:	f7f0 fe5b 	bl	21e0 <vsnprintk>
}
   1152a:	b003      	add	sp, #12
   1152c:	f85d eb04 	ldr.w	lr, [sp], #4
   11530:	b002      	add	sp, #8
   11532:	4770      	bx	lr

00011534 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
   11534:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11538:	8b01      	ldrh	r1, [r0, #24]
   1153a:	f021 0107 	bic.w	r1, r1, #7
   1153e:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   11540:	8301      	strh	r1, [r0, #24]
}
   11542:	4770      	bx	lr

00011544 <notify_monitors>:
{
   11544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11548:	4606      	mov	r6, r0
   1154a:	460f      	mov	r7, r1
   1154c:	4690      	mov	r8, r2
	return list->head;
   1154e:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   11550:	b119      	cbz	r1, 1155a <notify_monitors+0x16>
   11552:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
   11554:	b131      	cbz	r1, 11564 <notify_monitors+0x20>
	return node->next;
   11556:	680c      	ldr	r4, [r1, #0]
   11558:	e004      	b.n	11564 <notify_monitors+0x20>
   1155a:	460c      	mov	r4, r1
   1155c:	e002      	b.n	11564 <notify_monitors+0x20>
   1155e:	4623      	mov	r3, r4
   11560:	4621      	mov	r1, r4
   11562:	461c      	mov	r4, r3
   11564:	b159      	cbz	r1, 1157e <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
   11566:	684d      	ldr	r5, [r1, #4]
   11568:	4643      	mov	r3, r8
   1156a:	463a      	mov	r2, r7
   1156c:	4630      	mov	r0, r6
   1156e:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   11570:	2c00      	cmp	r4, #0
   11572:	d0f4      	beq.n	1155e <notify_monitors+0x1a>
   11574:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
   11576:	2c00      	cmp	r4, #0
   11578:	d0f2      	beq.n	11560 <notify_monitors+0x1c>
	return node->next;
   1157a:	6823      	ldr	r3, [r4, #0]
   1157c:	e7f0      	b.n	11560 <notify_monitors+0x1c>
}
   1157e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011582 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11582:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   11584:	f013 0307 	ands.w	r3, r3, #7
   11588:	d103      	bne.n	11592 <process_recheck+0x10>
	return list->head;
   1158a:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
   1158c:	b10a      	cbz	r2, 11592 <process_recheck+0x10>
		evt = EVT_START;
   1158e:	2003      	movs	r0, #3
   11590:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   11592:	2b02      	cmp	r3, #2
   11594:	d003      	beq.n	1159e <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
   11596:	2b01      	cmp	r3, #1
   11598:	d006      	beq.n	115a8 <process_recheck+0x26>
	int evt = EVT_NOP;
   1159a:	2000      	movs	r0, #0
   1159c:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
   1159e:	8b42      	ldrh	r2, [r0, #26]
   115a0:	2a00      	cmp	r2, #0
   115a2:	d1f8      	bne.n	11596 <process_recheck+0x14>
		evt = EVT_STOP;
   115a4:	2004      	movs	r0, #4
   115a6:	4770      	bx	lr
   115a8:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
   115aa:	b10b      	cbz	r3, 115b0 <process_recheck+0x2e>
		evt = EVT_RESET;
   115ac:	2005      	movs	r0, #5
}
   115ae:	4770      	bx	lr
	int evt = EVT_NOP;
   115b0:	2000      	movs	r0, #0
   115b2:	4770      	bx	lr

000115b4 <process_complete>:
{
   115b4:	b538      	push	{r3, r4, r5, lr}
   115b6:	4604      	mov	r4, r0
   115b8:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   115ba:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
   115bc:	2a00      	cmp	r2, #0
   115be:	db07      	blt.n	115d0 <process_complete+0x1c>
   115c0:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   115c4:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   115c6:	2a01      	cmp	r2, #1
   115c8:	d90e      	bls.n	115e8 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
   115ca:	2b04      	cmp	r3, #4
   115cc:	d032      	beq.n	11634 <process_complete+0x80>
}
   115ce:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
   115d0:	e9d0 0100 	ldrd	r0, r1, [r0]
   115d4:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   115d8:	2300      	movs	r3, #0
   115da:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
   115dc:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
   115de:	2101      	movs	r1, #1
   115e0:	4620      	mov	r0, r4
   115e2:	f7ff ffa7 	bl	11534 <set_state>
   115e6:	e7f2      	b.n	115ce <process_complete+0x1a>
		*clients = mgr->clients;
   115e8:	e9d0 0100 	ldrd	r0, r1, [r0]
   115ec:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
   115f0:	2200      	movs	r2, #0
   115f2:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
   115f4:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
   115f6:	2b06      	cmp	r3, #6
   115f8:	d117      	bne.n	1162a <process_complete+0x76>
	return list->head;
   115fa:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   115fc:	b13b      	cbz	r3, 1160e <process_complete+0x5a>
				mgr->refs += 1U;
   115fe:	8b62      	ldrh	r2, [r4, #26]
   11600:	3201      	adds	r2, #1
   11602:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
   11604:	2b00      	cmp	r3, #0
   11606:	d0f9      	beq.n	115fc <process_complete+0x48>
	return node->next;
   11608:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   1160a:	2b00      	cmp	r3, #0
   1160c:	d1f6      	bne.n	115fc <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
   1160e:	2102      	movs	r1, #2
   11610:	4620      	mov	r0, r4
   11612:	f7ff ff8f 	bl	11534 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   11616:	4620      	mov	r0, r4
   11618:	f7ff ffb3 	bl	11582 <process_recheck>
   1161c:	2800      	cmp	r0, #0
   1161e:	d0d6      	beq.n	115ce <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11620:	8b23      	ldrh	r3, [r4, #24]
   11622:	f043 0320 	orr.w	r3, r3, #32
   11626:	8323      	strh	r3, [r4, #24]
   11628:	e7d1      	b.n	115ce <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
   1162a:	2100      	movs	r1, #0
   1162c:	4620      	mov	r0, r4
   1162e:	f7ff ff81 	bl	11534 <set_state>
   11632:	e7f0      	b.n	11616 <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
   11634:	2100      	movs	r1, #0
   11636:	f7ff ff7d 	bl	11534 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
   1163a:	4620      	mov	r0, r4
   1163c:	f7ff ffa1 	bl	11582 <process_recheck>
   11640:	2800      	cmp	r0, #0
   11642:	d0c4      	beq.n	115ce <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11644:	8b23      	ldrh	r3, [r4, #24]
   11646:	f043 0320 	orr.w	r3, r3, #32
   1164a:	8323      	strh	r3, [r4, #24]
}
   1164c:	e7bf      	b.n	115ce <process_complete+0x1a>

0001164e <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
   1164e:	b158      	cbz	r0, 11668 <validate_args+0x1a>
{
   11650:	b510      	push	{r4, lr}
   11652:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   11654:	b159      	cbz	r1, 1166e <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
   11656:	1d08      	adds	r0, r1, #4
   11658:	f7ff ff12 	bl	11480 <sys_notify_validate>
	if ((rv == 0)
   1165c:	b918      	cbnz	r0, 11666 <validate_args+0x18>
	    && ((cli->notify.flags
   1165e:	68a3      	ldr	r3, [r4, #8]
   11660:	f033 0303 	bics.w	r3, r3, #3
   11664:	d106      	bne.n	11674 <validate_args+0x26>
}
   11666:	bd10      	pop	{r4, pc}
		return -EINVAL;
   11668:	f06f 0015 	mvn.w	r0, #21
}
   1166c:	4770      	bx	lr
		return -EINVAL;
   1166e:	f06f 0015 	mvn.w	r0, #21
   11672:	e7f8      	b.n	11666 <validate_args+0x18>
		rv = -EINVAL;
   11674:	f06f 0015 	mvn.w	r0, #21
   11678:	e7f5      	b.n	11666 <validate_args+0x18>

0001167a <notify_one>:
{
   1167a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1167e:	4607      	mov	r7, r0
   11680:	460c      	mov	r4, r1
   11682:	4616      	mov	r6, r2
   11684:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   11686:	4619      	mov	r1, r3
   11688:	1d20      	adds	r0, r4, #4
   1168a:	f7ff ff10 	bl	114ae <sys_notify_finalize>
	if (cb) {
   1168e:	b128      	cbz	r0, 1169c <notify_one+0x22>
   11690:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
   11692:	462b      	mov	r3, r5
   11694:	4632      	mov	r2, r6
   11696:	4621      	mov	r1, r4
   11698:	4638      	mov	r0, r7
   1169a:	47c0      	blx	r8
}
   1169c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000116a0 <notify_all>:
{
   116a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   116a4:	4681      	mov	r9, r0
   116a6:	460c      	mov	r4, r1
   116a8:	4690      	mov	r8, r2
   116aa:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
   116ac:	e005      	b.n	116ba <notify_all+0x1a>
	list->tail = node;
   116ae:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
   116b0:	463b      	mov	r3, r7
   116b2:	4642      	mov	r2, r8
   116b4:	4648      	mov	r0, r9
   116b6:	f7ff ffe0 	bl	1167a <notify_one>
	return list->head;
   116ba:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
   116bc:	b129      	cbz	r1, 116ca <notify_all+0x2a>
	return node->next;
   116be:	680d      	ldr	r5, [r1, #0]
	list->head = node;
   116c0:	6025      	str	r5, [r4, #0]
	return list->tail;
   116c2:	6866      	ldr	r6, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   116c4:	428e      	cmp	r6, r1
   116c6:	d1f3      	bne.n	116b0 <notify_all+0x10>
   116c8:	e7f1      	b.n	116ae <notify_all+0xe>
}
   116ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000116ce <transition_complete>:
{
   116ce:	b510      	push	{r4, lr}
	__asm__ volatile(
   116d0:	f04f 0420 	mov.w	r4, #32
   116d4:	f3ef 8211 	mrs	r2, BASEPRI
   116d8:	f384 8812 	msr	BASEPRI_MAX, r4
   116dc:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   116e0:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
   116e2:	2101      	movs	r1, #1
   116e4:	f7f0 fd92 	bl	220c <process_event>
}
   116e8:	bd10      	pop	{r4, pc}

000116ea <onoff_manager_init>:
	if ((mgr == NULL)
   116ea:	4603      	mov	r3, r0
   116ec:	b168      	cbz	r0, 1170a <onoff_manager_init+0x20>
	    || (transitions == NULL)
   116ee:	b179      	cbz	r1, 11710 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
   116f0:	680a      	ldr	r2, [r1, #0]
   116f2:	b182      	cbz	r2, 11716 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
   116f4:	684a      	ldr	r2, [r1, #4]
   116f6:	b18a      	cbz	r2, 1171c <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   116f8:	2000      	movs	r0, #0
   116fa:	6018      	str	r0, [r3, #0]
   116fc:	6058      	str	r0, [r3, #4]
   116fe:	6098      	str	r0, [r3, #8]
   11700:	60d8      	str	r0, [r3, #12]
   11702:	6158      	str	r0, [r3, #20]
   11704:	6198      	str	r0, [r3, #24]
   11706:	6119      	str	r1, [r3, #16]
	return 0;
   11708:	4770      	bx	lr
		return -EINVAL;
   1170a:	f06f 0015 	mvn.w	r0, #21
   1170e:	4770      	bx	lr
   11710:	f06f 0015 	mvn.w	r0, #21
   11714:	4770      	bx	lr
   11716:	f06f 0015 	mvn.w	r0, #21
   1171a:	4770      	bx	lr
   1171c:	f06f 0015 	mvn.w	r0, #21
}
   11720:	4770      	bx	lr

00011722 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   11722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11724:	4604      	mov	r4, r0
   11726:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   11728:	f7ff ff91 	bl	1164e <validate_args>

	if (rv < 0) {
   1172c:	1e06      	subs	r6, r0, #0
   1172e:	db37      	blt.n	117a0 <onoff_request+0x7e>
   11730:	f04f 0320 	mov.w	r3, #32
   11734:	f3ef 8211 	mrs	r2, BASEPRI
   11738:	f383 8812 	msr	BASEPRI_MAX, r3
   1173c:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11740:	8b25      	ldrh	r5, [r4, #24]
   11742:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   11746:	8b63      	ldrh	r3, [r4, #26]
   11748:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1174c:	428b      	cmp	r3, r1
   1174e:	d02f      	beq.n	117b0 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
   11750:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
   11752:	2d02      	cmp	r5, #2
   11754:	d00c      	beq.n	11770 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
   11756:	b18d      	cbz	r5, 1177c <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
   11758:	2d04      	cmp	r5, #4
   1175a:	d00f      	beq.n	1177c <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
   1175c:	2d06      	cmp	r5, #6
   1175e:	d00d      	beq.n	1177c <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
   11760:	2d05      	cmp	r5, #5
   11762:	d01f      	beq.n	117a4 <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
   11764:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
   11768:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   1176a:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   1176c:	4608      	mov	r0, r1
   1176e:	e00a      	b.n	11786 <onoff_request+0x64>
		mgr->refs += 1U;
   11770:	3301      	adds	r3, #1
   11772:	8363      	strh	r3, [r4, #26]
		notify = true;
   11774:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
   11776:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
   11778:	4618      	mov	r0, r3
   1177a:	e004      	b.n	11786 <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
   1177c:	fab5 f385 	clz	r3, r5
   11780:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
   11782:	2100      	movs	r1, #0
		add_client = true;
   11784:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
   11786:	b128      	cbz	r0, 11794 <onoff_request+0x72>
	parent->next = child;
   11788:	2000      	movs	r0, #0
   1178a:	6038      	str	r0, [r7, #0]
	return list->tail;
   1178c:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   1178e:	b1a8      	cbz	r0, 117bc <onoff_request+0x9a>
	parent->next = child;
   11790:	6007      	str	r7, [r0, #0]
	list->tail = node;
   11792:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
   11794:	b9ab      	cbnz	r3, 117c2 <onoff_request+0xa0>
	__asm__ volatile(
   11796:	f382 8811 	msr	BASEPRI, r2
   1179a:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1179e:	b9a9      	cbnz	r1, 117cc <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
   117a0:	4630      	mov	r0, r6
   117a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
   117a4:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
   117a8:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   117aa:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   117ac:	4608      	mov	r0, r1
   117ae:	e7ea      	b.n	11786 <onoff_request+0x64>
		rv = -EAGAIN;
   117b0:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
   117b4:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
   117b6:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
   117b8:	4608      	mov	r0, r1
   117ba:	e7e4      	b.n	11786 <onoff_request+0x64>
   117bc:	6067      	str	r7, [r4, #4]
	list->head = node;
   117be:	6027      	str	r7, [r4, #0]
}
   117c0:	e7e8      	b.n	11794 <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
   117c2:	2102      	movs	r1, #2
   117c4:	4620      	mov	r0, r4
   117c6:	f7f0 fd21 	bl	220c <process_event>
   117ca:	e7e9      	b.n	117a0 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
   117cc:	2300      	movs	r3, #0
   117ce:	462a      	mov	r2, r5
   117d0:	4639      	mov	r1, r7
   117d2:	4620      	mov	r0, r4
   117d4:	f7ff ff51 	bl	1167a <notify_one>
   117d8:	e7e2      	b.n	117a0 <onoff_request+0x7e>

000117da <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   117da:	b510      	push	{r4, lr}
	__asm__ volatile(
   117dc:	f04f 0320 	mov.w	r3, #32
   117e0:	f3ef 8211 	mrs	r2, BASEPRI
   117e4:	f383 8812 	msr	BASEPRI_MAX, r3
   117e8:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   117ec:	8b03      	ldrh	r3, [r0, #24]
   117ee:	f003 0307 	and.w	r3, r3, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   117f2:	2b02      	cmp	r3, #2
   117f4:	d007      	beq.n	11806 <onoff_release+0x2c>
		if (state == ONOFF_STATE_ERROR) {
   117f6:	2b01      	cmp	r3, #1
   117f8:	d002      	beq.n	11800 <onoff_release+0x26>
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   117fa:	f06f 0485 	mvn.w	r4, #133	; 0x85
	__ASSERT_NO_MSG(mgr->refs > 0);
	mgr->refs -= 1U;
	stop = (mgr->refs == 0);

out:
	if (stop) {
   117fe:	e008      	b.n	11812 <onoff_release+0x38>
			rv = -EIO;
   11800:	f06f 0404 	mvn.w	r4, #4
   11804:	e005      	b.n	11812 <onoff_release+0x38>
   11806:	461c      	mov	r4, r3
	mgr->refs -= 1U;
   11808:	8b43      	ldrh	r3, [r0, #26]
   1180a:	3b01      	subs	r3, #1
   1180c:	b29b      	uxth	r3, r3
   1180e:	8343      	strh	r3, [r0, #26]
	if (stop) {
   11810:	b12b      	cbz	r3, 1181e <onoff_release+0x44>
	__asm__ volatile(
   11812:	f382 8811 	msr	BASEPRI, r2
   11816:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
}
   1181a:	4620      	mov	r0, r4
   1181c:	bd10      	pop	{r4, pc}
		process_event(mgr, EVT_RECHECK, key);
   1181e:	2102      	movs	r1, #2
   11820:	f7f0 fcf4 	bl	220c <process_event>
   11824:	e7f9      	b.n	1181a <onoff_release+0x40>

00011826 <onoff_cancel>:
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
	if ((mgr == NULL) || (cli == NULL)) {
   11826:	2800      	cmp	r0, #0
   11828:	d031      	beq.n	1188e <onoff_cancel+0x68>
{
   1182a:	b470      	push	{r4, r5, r6}
   1182c:	4605      	mov	r5, r0
	if ((mgr == NULL) || (cli == NULL)) {
   1182e:	2900      	cmp	r1, #0
   11830:	d030      	beq.n	11894 <onoff_cancel+0x6e>
	__asm__ volatile(
   11832:	f04f 0320 	mov.w	r3, #32
   11836:	f3ef 8611 	mrs	r6, BASEPRI
   1183a:	f383 8812 	msr	BASEPRI_MAX, r3
   1183e:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11842:	8b00      	ldrh	r0, [r0, #24]
   11844:	f000 0007 	and.w	r0, r0, #7

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
   11848:	460c      	mov	r4, r1
	return list->head;
   1184a:	682b      	ldr	r3, [r5, #0]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1184c:	2200      	movs	r2, #0
   1184e:	b1b3      	cbz	r3, 1187e <onoff_cancel+0x58>
   11850:	429c      	cmp	r4, r3
   11852:	d002      	beq.n	1185a <onoff_cancel+0x34>
   11854:	461a      	mov	r2, r3
   11856:	681b      	ldr	r3, [r3, #0]
   11858:	e7f9      	b.n	1184e <onoff_cancel+0x28>
Z_GENLIST_REMOVE(slist, snode)
   1185a:	b13a      	cbz	r2, 1186c <onoff_cancel+0x46>
	return node->next;
   1185c:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
   1185e:	6013      	str	r3, [r2, #0]
	return list->tail;
   11860:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   11862:	4299      	cmp	r1, r3
   11864:	d009      	beq.n	1187a <onoff_cancel+0x54>
	parent->next = child;
   11866:	2300      	movs	r3, #0
   11868:	600b      	str	r3, [r1, #0]
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
   1186a:	e00a      	b.n	11882 <onoff_cancel+0x5c>
	return node->next;
   1186c:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   1186e:	602b      	str	r3, [r5, #0]
	return list->tail;
   11870:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   11872:	4291      	cmp	r1, r2
   11874:	d1f7      	bne.n	11866 <onoff_cancel+0x40>
	list->tail = node;
   11876:	606b      	str	r3, [r5, #4]
}
   11878:	e7f5      	b.n	11866 <onoff_cancel+0x40>
	list->tail = node;
   1187a:	606a      	str	r2, [r5, #4]
}
   1187c:	e7f3      	b.n	11866 <onoff_cancel+0x40>
	int rv = -EALREADY;
   1187e:	f06f 0077 	mvn.w	r0, #119	; 0x77
	__asm__ volatile(
   11882:	f386 8811 	msr	BASEPRI, r6
   11886:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
   1188a:	bc70      	pop	{r4, r5, r6}
   1188c:	4770      	bx	lr
		return -EINVAL;
   1188e:	f06f 0015 	mvn.w	r0, #21
}
   11892:	4770      	bx	lr
		return -EINVAL;
   11894:	f06f 0015 	mvn.w	r0, #21
   11898:	e7f7      	b.n	1188a <onoff_cancel+0x64>

0001189a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   1189a:	b508      	push	{r3, lr}
   1189c:	4604      	mov	r4, r0
   1189e:	4608      	mov	r0, r1
   118a0:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   118a2:	461a      	mov	r2, r3
   118a4:	47a0      	blx	r4
	return z_impl_z_current_get();
   118a6:	f7ff f8f1 	bl	10a8c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   118aa:	f7f4 fd37 	bl	631c <z_impl_k_thread_abort>

000118ae <chunk_mem>:
#include "heap.h"

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   118ae:	00c9      	lsls	r1, r1, #3
	return big_heap_chunks(bytes / CHUNK_UNIT);
}

static inline bool big_heap(struct z_heap *h)
{
	return big_heap_chunks(h->end_chunk);
   118b0:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   118b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   118b6:	d303      	bcc.n	118c0 <chunk_mem+0x12>
   118b8:	2308      	movs	r3, #8
   118ba:	4419      	add	r1, r3

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
   118bc:	4408      	add	r0, r1
   118be:	4770      	bx	lr
   118c0:	2304      	movs	r3, #4
   118c2:	e7fa      	b.n	118ba <chunk_mem+0xc>

000118c4 <free_list_remove_bidx>:

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   118c4:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
   118c6:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   118ca:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   118cc:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   118d0:	d317      	bcc.n	11902 <free_list_remove_bidx+0x3e>
		return ((uint32_t *)cmem)[f];
   118d2:	68eb      	ldr	r3, [r5, #12]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & (1 << bidx));

	if (next_free_chunk(h, c) == c) {
   118d4:	4299      	cmp	r1, r3
   118d6:	d016      	beq.n	11906 <free_list_remove_bidx+0x42>
	if (big_heap(h)) {
   118d8:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   118dc:	d320      	bcc.n	11920 <free_list_remove_bidx+0x5c>
		return ((uint32_t *)cmem)[f];
   118de:	68a9      	ldr	r1, [r5, #8]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
   118e0:	3204      	adds	r2, #4
   118e2:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   118e6:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   118ea:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   118ee:	d319      	bcc.n	11924 <free_list_remove_bidx+0x60>
		((uint32_t *)cmem)[f] = val;
   118f0:	60d3      	str	r3, [r2, #12]
	void *cmem = &buf[c];
   118f2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
   118f6:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   118f8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   118fc:	d314      	bcc.n	11928 <free_list_remove_bidx+0x64>
		((uint32_t *)cmem)[f] = val;
   118fe:	6099      	str	r1, [r3, #8]
   11900:	e00c      	b.n	1191c <free_list_remove_bidx+0x58>
		return ((uint16_t *)cmem)[f];
   11902:	88eb      	ldrh	r3, [r5, #6]
   11904:	e7e6      	b.n	118d4 <free_list_remove_bidx+0x10>
		h->avail_buckets &= ~(1 << bidx);
   11906:	2301      	movs	r3, #1
   11908:	fa03 f102 	lsl.w	r1, r3, r2
   1190c:	68c3      	ldr	r3, [r0, #12]
   1190e:	ea23 0301 	bic.w	r3, r3, r1
   11912:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   11914:	3204      	adds	r2, #4
   11916:	2300      	movs	r3, #0
   11918:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
		set_next_free_chunk(h, first, second);
		set_prev_free_chunk(h, second, first);
	}
}
   1191c:	bc30      	pop	{r4, r5}
   1191e:	4770      	bx	lr
   11920:	88a9      	ldrh	r1, [r5, #4]
   11922:	e7dd      	b.n	118e0 <free_list_remove_bidx+0x1c>
		((uint16_t *)cmem)[f] = val;
   11924:	80d3      	strh	r3, [r2, #6]
   11926:	e7e4      	b.n	118f2 <free_list_remove_bidx+0x2e>
   11928:	8099      	strh	r1, [r3, #4]
   1192a:	e7f7      	b.n	1191c <free_list_remove_bidx+0x58>

0001192c <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   1192c:	b470      	push	{r4, r5, r6}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
   1192e:	1d13      	adds	r3, r2, #4
   11930:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   11934:	b9d3      	cbnz	r3, 1196c <free_list_add_bidx+0x40>
		CHECK((h->avail_buckets & (1 << bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << bidx);
   11936:	2301      	movs	r3, #1
   11938:	fa03 f402 	lsl.w	r4, r3, r2
   1193c:	68c3      	ldr	r3, [r0, #12]
   1193e:	4323      	orrs	r3, r4
   11940:	60c3      	str	r3, [r0, #12]
		b->next = c;
   11942:	3204      	adds	r2, #4
   11944:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
   11948:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   1194c:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   1194e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   11952:	d307      	bcc.n	11964 <free_list_add_bidx+0x38>
		((uint32_t *)cmem)[f] = val;
   11954:	6099      	str	r1, [r3, #8]
	return big_heap_chunks(h->end_chunk);
   11956:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
   11958:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   1195c:	d304      	bcc.n	11968 <free_list_add_bidx+0x3c>
		((uint32_t *)cmem)[f] = val;
   1195e:	60d9      	str	r1, [r3, #12]
		set_prev_free_chunk(h, c, first);
		set_next_free_chunk(h, c, second);
		set_next_free_chunk(h, first, c);
		set_prev_free_chunk(h, second, c);
	}
}
   11960:	bc70      	pop	{r4, r5, r6}
   11962:	4770      	bx	lr
		((uint16_t *)cmem)[f] = val;
   11964:	8099      	strh	r1, [r3, #4]
   11966:	e7f6      	b.n	11956 <free_list_add_bidx+0x2a>
   11968:	80d9      	strh	r1, [r3, #6]
   1196a:	e7f9      	b.n	11960 <free_list_add_bidx+0x34>
	void *cmem = &buf[c];
   1196c:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
   11970:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   11972:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   11976:	d318      	bcc.n	119aa <free_list_add_bidx+0x7e>
		return ((uint32_t *)cmem)[f];
   11978:	68a2      	ldr	r2, [r4, #8]
	void *cmem = &buf[c];
   1197a:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	if (big_heap(h)) {
   1197e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   11982:	d314      	bcc.n	119ae <free_list_add_bidx+0x82>
		((uint32_t *)cmem)[f] = val;
   11984:	60aa      	str	r2, [r5, #8]
	return big_heap_chunks(h->end_chunk);
   11986:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   11988:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   1198c:	d311      	bcc.n	119b2 <free_list_add_bidx+0x86>
		((uint32_t *)cmem)[f] = val;
   1198e:	60eb      	str	r3, [r5, #12]
	void *cmem = &buf[c];
   11990:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
   11994:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   11996:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1199a:	d30c      	bcc.n	119b6 <free_list_add_bidx+0x8a>
		((uint32_t *)cmem)[f] = val;
   1199c:	60d1      	str	r1, [r2, #12]
	return big_heap_chunks(h->end_chunk);
   1199e:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   119a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   119a4:	d309      	bcc.n	119ba <free_list_add_bidx+0x8e>
		((uint32_t *)cmem)[f] = val;
   119a6:	60a1      	str	r1, [r4, #8]
   119a8:	e7da      	b.n	11960 <free_list_add_bidx+0x34>
		return ((uint16_t *)cmem)[f];
   119aa:	88a2      	ldrh	r2, [r4, #4]
   119ac:	e7e5      	b.n	1197a <free_list_add_bidx+0x4e>
		((uint16_t *)cmem)[f] = val;
   119ae:	80aa      	strh	r2, [r5, #4]
   119b0:	e7e9      	b.n	11986 <free_list_add_bidx+0x5a>
   119b2:	80eb      	strh	r3, [r5, #6]
   119b4:	e7ec      	b.n	11990 <free_list_add_bidx+0x64>
   119b6:	80d1      	strh	r1, [r2, #6]
   119b8:	e7f1      	b.n	1199e <free_list_add_bidx+0x72>
   119ba:	80a1      	strh	r1, [r4, #4]
   119bc:	e7d0      	b.n	11960 <free_list_add_bidx+0x34>

000119be <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   119be:	b470      	push	{r4, r5, r6}
	void *cmem = &buf[c];
   119c0:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   119c4:	6885      	ldr	r5, [r0, #8]
	if (big_heap(h)) {
   119c6:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   119ca:	d325      	bcc.n	11a18 <split_chunks+0x5a>
		return ((uint32_t *)cmem)[f];
   119cc:	6866      	ldr	r6, [r4, #4]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
   119ce:	1a53      	subs	r3, r2, r1
	chunksz_t rsz = sz0 - lsz;
   119d0:	1a89      	subs	r1, r1, r2
   119d2:	eb01 0156 	add.w	r1, r1, r6, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   119d6:	005e      	lsls	r6, r3, #1
	if (big_heap(h)) {
   119d8:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   119dc:	d31e      	bcc.n	11a1c <split_chunks+0x5e>
		((uint32_t *)cmem)[f] = val;
   119de:	6066      	str	r6, [r4, #4]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   119e0:	004d      	lsls	r5, r1, #1
	void *cmem = &buf[c];
   119e2:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
   119e6:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
   119e8:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   119ec:	d318      	bcc.n	11a20 <split_chunks+0x62>
		((uint32_t *)cmem)[f] = val;
   119ee:	6065      	str	r5, [r4, #4]
	return big_heap_chunks(h->end_chunk);
   119f0:	6885      	ldr	r5, [r0, #8]
	if (big_heap(h)) {
   119f2:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   119f6:	d315      	bcc.n	11a24 <split_chunks+0x66>
		((uint32_t *)cmem)[f] = val;
   119f8:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
	return big_heap_chunks(h->end_chunk);
   119fc:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   119fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11a02:	d312      	bcc.n	11a2a <split_chunks+0x6c>
		return ((uint32_t *)cmem)[f];
   11a04:	6864      	ldr	r4, [r4, #4]
	return c + chunk_size(h, c);
   11a06:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
   11a0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11a0e:	d30e      	bcc.n	11a2e <split_chunks+0x70>
		((uint32_t *)cmem)[f] = val;
   11a10:	f840 1032 	str.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
   11a14:	bc70      	pop	{r4, r5, r6}
   11a16:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
   11a18:	8866      	ldrh	r6, [r4, #2]
   11a1a:	e7d8      	b.n	119ce <split_chunks+0x10>
		((uint16_t *)cmem)[f] = val;
   11a1c:	8066      	strh	r6, [r4, #2]
   11a1e:	e7df      	b.n	119e0 <split_chunks+0x22>
   11a20:	8065      	strh	r5, [r4, #2]
   11a22:	e7e5      	b.n	119f0 <split_chunks+0x32>
   11a24:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
   11a28:	e7e8      	b.n	119fc <split_chunks+0x3e>
		return ((uint16_t *)cmem)[f];
   11a2a:	8864      	ldrh	r4, [r4, #2]
   11a2c:	e7eb      	b.n	11a06 <split_chunks+0x48>
		((uint16_t *)cmem)[f] = val;
   11a2e:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]
   11a32:	e7ef      	b.n	11a14 <split_chunks+0x56>

00011a34 <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   11a34:	b470      	push	{r4, r5, r6}
	void *cmem = &buf[c];
   11a36:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   11a3a:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   11a3c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   11a40:	d31c      	bcc.n	11a7c <merge_chunks+0x48>
		return ((uint32_t *)cmem)[f];
   11a42:	684b      	ldr	r3, [r1, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   11a44:	085b      	lsrs	r3, r3, #1
	void *cmem = &buf[c];
   11a46:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
	if (big_heap(h)) {
   11a4a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   11a4e:	d317      	bcc.n	11a80 <merge_chunks+0x4c>
		return ((uint32_t *)cmem)[f];
   11a50:	686e      	ldr	r6, [r5, #4]
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   11a52:	eb03 0356 	add.w	r3, r3, r6, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   11a56:	005e      	lsls	r6, r3, #1
	if (big_heap(h)) {
   11a58:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   11a5c:	d312      	bcc.n	11a84 <merge_chunks+0x50>
		((uint32_t *)cmem)[f] = val;
   11a5e:	604e      	str	r6, [r1, #4]
	return big_heap_chunks(h->end_chunk);
   11a60:	6881      	ldr	r1, [r0, #8]
	if (big_heap(h)) {
   11a62:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   11a66:	d30f      	bcc.n	11a88 <merge_chunks+0x54>
		return ((uint32_t *)cmem)[f];
   11a68:	686c      	ldr	r4, [r5, #4]
	return c + chunk_size(h, c);
   11a6a:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
   11a6e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
   11a72:	d30b      	bcc.n	11a8c <merge_chunks+0x58>
		((uint32_t *)cmem)[f] = val;
   11a74:	f840 3032 	str.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   11a78:	bc70      	pop	{r4, r5, r6}
   11a7a:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
   11a7c:	884b      	ldrh	r3, [r1, #2]
   11a7e:	e7e1      	b.n	11a44 <merge_chunks+0x10>
   11a80:	886e      	ldrh	r6, [r5, #2]
   11a82:	e7e6      	b.n	11a52 <merge_chunks+0x1e>
		((uint16_t *)cmem)[f] = val;
   11a84:	804e      	strh	r6, [r1, #2]
   11a86:	e7eb      	b.n	11a60 <merge_chunks+0x2c>
		return ((uint16_t *)cmem)[f];
   11a88:	886c      	ldrh	r4, [r5, #2]
   11a8a:	e7ee      	b.n	11a6a <merge_chunks+0x36>
		((uint16_t *)cmem)[f] = val;
   11a8c:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
   11a90:	e7f2      	b.n	11a78 <merge_chunks+0x44>

00011a92 <mem_to_chunkid>:
	return big_heap_chunks(h->end_chunk);
   11a92:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) ? 8 : 4;
   11a94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11a98:	d304      	bcc.n	11aa4 <mem_to_chunkid+0x12>
   11a9a:	2308      	movs	r3, #8
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   11a9c:	1ac9      	subs	r1, r1, r3
   11a9e:	1a08      	subs	r0, r1, r0
}
   11aa0:	08c0      	lsrs	r0, r0, #3
   11aa2:	4770      	bx	lr
   11aa4:	2304      	movs	r3, #4
   11aa6:	e7f9      	b.n	11a9c <mem_to_chunkid+0xa>

00011aa8 <free_list_remove>:
{
   11aa8:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
   11aaa:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
   11aac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11ab0:	d307      	bcc.n	11ac2 <free_list_remove+0x1a>
	void *cmem = &buf[c];
   11ab2:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
   11ab6:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   11ab8:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
   11aba:	2a01      	cmp	r2, #1
   11abc:	d002      	beq.n	11ac4 <free_list_remove+0x1c>
   11abe:	2200      	movs	r2, #0
   11ac0:	e000      	b.n	11ac4 <free_list_remove+0x1c>
   11ac2:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
   11ac4:	b9a2      	cbnz	r2, 11af0 <free_list_remove+0x48>
	void *cmem = &buf[c];
   11ac6:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   11aca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11ace:	d310      	bcc.n	11af2 <free_list_remove+0x4a>
		return ((uint32_t *)cmem)[f];
   11ad0:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   11ad2:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
   11ad4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11ad8:	d30d      	bcc.n	11af6 <free_list_remove+0x4e>
   11ada:	2308      	movs	r3, #8
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   11adc:	3308      	adds	r3, #8
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   11ade:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
   11ae2:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
   11ae4:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
   11ae8:	f1c2 021f 	rsb	r2, r2, #31
   11aec:	f7ff feea 	bl	118c4 <free_list_remove_bidx>
}
   11af0:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
   11af2:	8852      	ldrh	r2, [r2, #2]
   11af4:	e7ed      	b.n	11ad2 <free_list_remove+0x2a>
	return big_heap(h) ? 8 : 4;
   11af6:	2304      	movs	r3, #4
   11af8:	e7f0      	b.n	11adc <free_list_remove+0x34>

00011afa <free_list_add>:
{
   11afa:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
   11afc:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
   11afe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11b02:	d307      	bcc.n	11b14 <free_list_add+0x1a>
	void *cmem = &buf[c];
   11b04:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
   11b08:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   11b0a:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
   11b0c:	2a01      	cmp	r2, #1
   11b0e:	d002      	beq.n	11b16 <free_list_add+0x1c>
   11b10:	2200      	movs	r2, #0
   11b12:	e000      	b.n	11b16 <free_list_add+0x1c>
   11b14:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
   11b16:	b9a2      	cbnz	r2, 11b42 <free_list_add+0x48>
	void *cmem = &buf[c];
   11b18:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
   11b1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11b20:	d310      	bcc.n	11b44 <free_list_add+0x4a>
		return ((uint32_t *)cmem)[f];
   11b22:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   11b24:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
   11b26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11b2a:	d30d      	bcc.n	11b48 <free_list_add+0x4e>
   11b2c:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   11b2e:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   11b30:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
   11b34:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
   11b36:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
   11b3a:	f1c2 021f 	rsb	r2, r2, #31
   11b3e:	f7ff fef5 	bl	1192c <free_list_add_bidx>
}
   11b42:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
   11b44:	8852      	ldrh	r2, [r2, #2]
   11b46:	e7ed      	b.n	11b24 <free_list_add+0x2a>
	return big_heap(h) ? 8 : 4;
   11b48:	2304      	movs	r3, #4
   11b4a:	e7f0      	b.n	11b2e <free_list_add+0x34>

00011b4c <free_chunk>:
{
   11b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11b4e:	4604      	mov	r4, r0
   11b50:	460d      	mov	r5, r1
	void *cmem = &buf[c];
   11b52:	00ce      	lsls	r6, r1, #3
   11b54:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
   11b58:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   11b5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11b5e:	d31f      	bcc.n	11ba0 <free_chunk+0x54>
		return ((uint32_t *)cmem)[f];
   11b60:	6879      	ldr	r1, [r7, #4]
	return c + chunk_size(h, c);
   11b62:	eb05 0151 	add.w	r1, r5, r1, lsr #1
	void *cmem = &buf[c];
   11b66:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
	if (big_heap(h)) {
   11b6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11b6e:	d319      	bcc.n	11ba4 <free_chunk+0x58>
		return ((uint32_t *)cmem)[f];
   11b70:	6853      	ldr	r3, [r2, #4]
	if (!chunk_used(h, right_chunk(h, c))) {
   11b72:	f013 0f01 	tst.w	r3, #1
   11b76:	d017      	beq.n	11ba8 <free_chunk+0x5c>
	return big_heap_chunks(h->end_chunk);
   11b78:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   11b7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11b7e:	d324      	bcc.n	11bca <free_chunk+0x7e>
		return ((uint32_t *)cmem)[f];
   11b80:	59a1      	ldr	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   11b82:	1a69      	subs	r1, r5, r1
	void *cmem = &buf[c];
   11b84:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
	if (big_heap(h)) {
   11b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11b8c:	d31f      	bcc.n	11bce <free_chunk+0x82>
		return ((uint32_t *)cmem)[f];
   11b8e:	6853      	ldr	r3, [r2, #4]
	if (!chunk_used(h, left_chunk(h, c))) {
   11b90:	f013 0f01 	tst.w	r3, #1
   11b94:	d01d      	beq.n	11bd2 <free_chunk+0x86>
	free_list_add(h, c);
   11b96:	4629      	mov	r1, r5
   11b98:	4620      	mov	r0, r4
   11b9a:	f7ff ffae 	bl	11afa <free_list_add>
}
   11b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ((uint16_t *)cmem)[f];
   11ba0:	8879      	ldrh	r1, [r7, #2]
   11ba2:	e7de      	b.n	11b62 <free_chunk+0x16>
   11ba4:	8853      	ldrh	r3, [r2, #2]
   11ba6:	e7e4      	b.n	11b72 <free_chunk+0x26>
		free_list_remove(h, right_chunk(h, c));
   11ba8:	4620      	mov	r0, r4
   11baa:	f7ff ff7d 	bl	11aa8 <free_list_remove>
	return big_heap_chunks(h->end_chunk);
   11bae:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   11bb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11bb4:	d307      	bcc.n	11bc6 <free_chunk+0x7a>
		return ((uint32_t *)cmem)[f];
   11bb6:	687a      	ldr	r2, [r7, #4]
		merge_chunks(h, c, right_chunk(h, c));
   11bb8:	eb05 0252 	add.w	r2, r5, r2, lsr #1
   11bbc:	4629      	mov	r1, r5
   11bbe:	4620      	mov	r0, r4
   11bc0:	f7ff ff38 	bl	11a34 <merge_chunks>
   11bc4:	e7d8      	b.n	11b78 <free_chunk+0x2c>
		return ((uint16_t *)cmem)[f];
   11bc6:	887a      	ldrh	r2, [r7, #2]
   11bc8:	e7f6      	b.n	11bb8 <free_chunk+0x6c>
   11bca:	5ba1      	ldrh	r1, [r4, r6]
   11bcc:	e7d9      	b.n	11b82 <free_chunk+0x36>
   11bce:	8853      	ldrh	r3, [r2, #2]
   11bd0:	e7de      	b.n	11b90 <free_chunk+0x44>
		free_list_remove(h, left_chunk(h, c));
   11bd2:	4620      	mov	r0, r4
   11bd4:	f7ff ff68 	bl	11aa8 <free_list_remove>
	return big_heap_chunks(h->end_chunk);
   11bd8:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   11bda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11bde:	d30c      	bcc.n	11bfa <free_chunk+0xae>
		return ((uint32_t *)cmem)[f];
   11be0:	59a1      	ldr	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
   11be2:	462a      	mov	r2, r5
   11be4:	1a69      	subs	r1, r5, r1
   11be6:	4620      	mov	r0, r4
   11be8:	f7ff ff24 	bl	11a34 <merge_chunks>
	return big_heap_chunks(h->end_chunk);
   11bec:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
   11bee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11bf2:	d304      	bcc.n	11bfe <free_chunk+0xb2>
		return ((uint32_t *)cmem)[f];
   11bf4:	59a3      	ldr	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
   11bf6:	1aed      	subs	r5, r5, r3
   11bf8:	e7cd      	b.n	11b96 <free_chunk+0x4a>
		return ((uint16_t *)cmem)[f];
   11bfa:	5ba1      	ldrh	r1, [r4, r6]
   11bfc:	e7f1      	b.n	11be2 <free_chunk+0x96>
   11bfe:	5ba3      	ldrh	r3, [r4, r6]
   11c00:	e7f9      	b.n	11bf6 <free_chunk+0xaa>

00011c02 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
   11c02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return big_heap_chunks(h->end_chunk);
   11c04:	6885      	ldr	r5, [r0, #8]
	return big_heap(h) ? 8 : 4;
   11c06:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   11c0a:	d311      	bcc.n	11c30 <alloc_chunk+0x2e>
   11c0c:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   11c0e:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   11c10:	eba1 03d3 	sub.w	r3, r1, r3, lsr #3
   11c14:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
   11c16:	fab3 f383 	clz	r3, r3
   11c1a:	f1c3 021f 	rsb	r2, r3, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
   11c1e:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
   11c22:	f850 c024 	ldr.w	ip, [r0, r4, lsl #2]
   11c26:	f1bc 0f00 	cmp.w	ip, #0
   11c2a:	d024      	beq.n	11c76 <alloc_chunk+0x74>
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
   11c2c:	2603      	movs	r6, #3
   11c2e:	e010      	b.n	11c52 <alloc_chunk+0x50>
	return big_heap(h) ? 8 : 4;
   11c30:	2304      	movs	r3, #4
   11c32:	e7ec      	b.n	11c0e <alloc_chunk+0xc>
		return ((uint16_t *)cmem)[f];
   11c34:	f8b7 e002 	ldrh.w	lr, [r7, #2]
   11c38:	e015      	b.n	11c66 <alloc_chunk+0x64>
		do {
			chunkid_t c = b->next;
			if (chunk_size(h, c) >= sz) {
				free_list_remove_bidx(h, c, bi);
   11c3a:	4621      	mov	r1, r4
   11c3c:	f7ff fe42 	bl	118c4 <free_list_remove_bidx>
				return c;
   11c40:	e021      	b.n	11c86 <alloc_chunk+0x84>
   11c42:	88fc      	ldrh	r4, [r7, #6]
			}
			b->next = next_free_chunk(h, c);
   11c44:	1d17      	adds	r7, r2, #4
   11c46:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
   11c4a:	3e01      	subs	r6, #1
   11c4c:	d013      	beq.n	11c76 <alloc_chunk+0x74>
   11c4e:	45a4      	cmp	ip, r4
   11c50:	d011      	beq.n	11c76 <alloc_chunk+0x74>
			chunkid_t c = b->next;
   11c52:	1d14      	adds	r4, r2, #4
   11c54:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
   11c58:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
	if (big_heap(h)) {
   11c5c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   11c60:	d3e8      	bcc.n	11c34 <alloc_chunk+0x32>
		return ((uint32_t *)cmem)[f];
   11c62:	f8d7 e004 	ldr.w	lr, [r7, #4]
			if (chunk_size(h, c) >= sz) {
   11c66:	ebb1 0f5e 	cmp.w	r1, lr, lsr #1
   11c6a:	d9e6      	bls.n	11c3a <alloc_chunk+0x38>
	if (big_heap(h)) {
   11c6c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   11c70:	d3e7      	bcc.n	11c42 <alloc_chunk+0x40>
		return ((uint32_t *)cmem)[f];
   11c72:	68fc      	ldr	r4, [r7, #12]
   11c74:	e7e6      	b.n	11c44 <alloc_chunk+0x42>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   11c76:	68c4      	ldr	r4, [r0, #12]
   11c78:	f1c3 0220 	rsb	r2, r3, #32
   11c7c:	2301      	movs	r3, #1
   11c7e:	4093      	lsls	r3, r2
   11c80:	425b      	negs	r3, r3

	if (bmask != 0U) {
   11c82:	401c      	ands	r4, r3
   11c84:	d101      	bne.n	11c8a <alloc_chunk+0x88>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   11c86:	4620      	mov	r0, r4
   11c88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		int minbucket = __builtin_ctz(bmask);
   11c8a:	fa94 f2a4 	rbit	r2, r4
   11c8e:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   11c92:	1d13      	adds	r3, r2, #4
   11c94:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
   11c98:	4621      	mov	r1, r4
   11c9a:	f7ff fe13 	bl	118c4 <free_list_remove_bidx>
		return c;
   11c9e:	e7f2      	b.n	11c86 <alloc_chunk+0x84>

00011ca0 <sys_heap_free>:
	if (mem == NULL) {
   11ca0:	b1c1      	cbz	r1, 11cd4 <sys_heap_free+0x34>
{
   11ca2:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
   11ca4:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
   11ca6:	4620      	mov	r0, r4
   11ca8:	f7ff fef3 	bl	11a92 <mem_to_chunkid>
   11cac:	4601      	mov	r1, r0
	void *cmem = &buf[c];
   11cae:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
	return big_heap_chunks(h->end_chunk);
   11cb2:	68a2      	ldr	r2, [r4, #8]
	if (big_heap(h)) {
   11cb4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   11cb8:	d307      	bcc.n	11cca <sys_heap_free+0x2a>
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   11cba:	685a      	ldr	r2, [r3, #4]
   11cbc:	f022 0201 	bic.w	r2, r2, #1
   11cc0:	605a      	str	r2, [r3, #4]
	free_chunk(h, c);
   11cc2:	4620      	mov	r0, r4
   11cc4:	f7ff ff42 	bl	11b4c <free_chunk>
}
   11cc8:	bd10      	pop	{r4, pc}
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   11cca:	885a      	ldrh	r2, [r3, #2]
   11ccc:	f022 0201 	bic.w	r2, r2, #1
   11cd0:	805a      	strh	r2, [r3, #2]
   11cd2:	e7f6      	b.n	11cc2 <sys_heap_free+0x22>
   11cd4:	4770      	bx	lr

00011cd6 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   11cd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
   11cd8:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   11cda:	2900      	cmp	r1, #0
   11cdc:	d03c      	beq.n	11d58 <sys_heap_alloc+0x82>
   11cde:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   11ce0:	68aa      	ldr	r2, [r5, #8]
   11ce2:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
   11ce6:	d939      	bls.n	11d5c <sys_heap_alloc+0x86>
	return big_heap(h) ? 8 : 4;
   11ce8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   11cec:	d320      	bcc.n	11d30 <sys_heap_alloc+0x5a>
   11cee:	2408      	movs	r4, #8
	return chunksz(chunk_header_bytes(h) + bytes);
   11cf0:	441c      	add	r4, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   11cf2:	3407      	adds	r4, #7
   11cf4:	08e4      	lsrs	r4, r4, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
   11cf6:	4621      	mov	r1, r4
   11cf8:	4628      	mov	r0, r5
   11cfa:	f7ff ff82 	bl	11c02 <alloc_chunk>
	if (c == 0U) {
   11cfe:	4607      	mov	r7, r0
   11d00:	b370      	cbz	r0, 11d60 <sys_heap_alloc+0x8a>
	void *cmem = &buf[c];
   11d02:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	return big_heap_chunks(h->end_chunk);
   11d06:	68ab      	ldr	r3, [r5, #8]
	if (big_heap(h)) {
   11d08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11d0c:	d312      	bcc.n	11d34 <sys_heap_alloc+0x5e>
		return ((uint32_t *)cmem)[f];
   11d0e:	6873      	ldr	r3, [r6, #4]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
   11d10:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
   11d14:	d310      	bcc.n	11d38 <sys_heap_alloc+0x62>
	return big_heap_chunks(h->end_chunk);
   11d16:	68ab      	ldr	r3, [r5, #8]
	if (big_heap(h)) {
   11d18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11d1c:	d317      	bcc.n	11d4e <sys_heap_alloc+0x78>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   11d1e:	6873      	ldr	r3, [r6, #4]
   11d20:	f043 0301 	orr.w	r3, r3, #1
   11d24:	6073      	str	r3, [r6, #4]
		split_chunks(h, c, c + chunk_sz);
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
   11d26:	4639      	mov	r1, r7
   11d28:	4628      	mov	r0, r5
   11d2a:	f7ff fdc0 	bl	118ae <chunk_mem>
}
   11d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return big_heap(h) ? 8 : 4;
   11d30:	2404      	movs	r4, #4
   11d32:	e7dd      	b.n	11cf0 <sys_heap_alloc+0x1a>
		return ((uint16_t *)cmem)[f];
   11d34:	8873      	ldrh	r3, [r6, #2]
   11d36:	e7eb      	b.n	11d10 <sys_heap_alloc+0x3a>
		split_chunks(h, c, c + chunk_sz);
   11d38:	443c      	add	r4, r7
   11d3a:	4622      	mov	r2, r4
   11d3c:	4639      	mov	r1, r7
   11d3e:	4628      	mov	r0, r5
   11d40:	f7ff fe3d 	bl	119be <split_chunks>
		free_list_add(h, c + chunk_sz);
   11d44:	4621      	mov	r1, r4
   11d46:	4628      	mov	r0, r5
   11d48:	f7ff fed7 	bl	11afa <free_list_add>
   11d4c:	e7e3      	b.n	11d16 <sys_heap_alloc+0x40>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   11d4e:	8873      	ldrh	r3, [r6, #2]
   11d50:	f043 0301 	orr.w	r3, r3, #1
   11d54:	8073      	strh	r3, [r6, #2]
   11d56:	e7e6      	b.n	11d26 <sys_heap_alloc+0x50>
		return NULL;
   11d58:	2000      	movs	r0, #0
   11d5a:	e7e8      	b.n	11d2e <sys_heap_alloc+0x58>
   11d5c:	2000      	movs	r0, #0
   11d5e:	e7e6      	b.n	11d2e <sys_heap_alloc+0x58>
		return NULL;
   11d60:	2000      	movs	r0, #0
   11d62:	e7e4      	b.n	11d2e <sys_heap_alloc+0x58>

00011d64 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   11d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11d68:	460d      	mov	r5, r1
   11d6a:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
   11d6c:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   11d6e:	424b      	negs	r3, r1
   11d70:	ea03 0801 	and.w	r8, r3, r1
	if (align != rew) {
   11d74:	ea31 0303 	bics.w	r3, r1, r3
   11d78:	d04e      	beq.n	11e18 <sys_heap_aligned_alloc+0xb4>
		align -= rew;
   11d7a:	eba1 0508 	sub.w	r5, r1, r8
	return big_heap_chunks(h->end_chunk);
   11d7e:	68b3      	ldr	r3, [r6, #8]
	return big_heap(h) ? 8 : 4;
   11d80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11d84:	d346      	bcc.n	11e14 <sys_heap_aligned_alloc+0xb0>
   11d86:	2308      	movs	r3, #8
		gap = MIN(rew, chunk_header_bytes(h));
   11d88:	4598      	cmp	r8, r3
   11d8a:	d200      	bcs.n	11d8e <sys_heap_aligned_alloc+0x2a>
   11d8c:	4643      	mov	r3, r8
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   11d8e:	2c00      	cmp	r4, #0
   11d90:	d070      	beq.n	11e74 <sys_heap_aligned_alloc+0x110>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
   11d92:	68b2      	ldr	r2, [r6, #8]
   11d94:	ebb2 0fd4 	cmp.w	r2, r4, lsr #3
   11d98:	d96e      	bls.n	11e78 <sys_heap_aligned_alloc+0x114>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   11d9a:	1929      	adds	r1, r5, r4
   11d9c:	1ac9      	subs	r1, r1, r3
	return big_heap(h) ? 8 : 4;
   11d9e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
   11da2:	d34a      	bcc.n	11e3a <sys_heap_aligned_alloc+0xd6>
   11da4:	2308      	movs	r3, #8
	return chunksz(chunk_header_bytes(h) + bytes);
   11da6:	4419      	add	r1, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   11da8:	3107      	adds	r1, #7
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   11daa:	08c9      	lsrs	r1, r1, #3
   11dac:	4630      	mov	r0, r6
   11dae:	f7ff ff28 	bl	11c02 <alloc_chunk>

	if (c0 == 0) {
   11db2:	4607      	mov	r7, r0
   11db4:	2800      	cmp	r0, #0
   11db6:	d061      	beq.n	11e7c <sys_heap_aligned_alloc+0x118>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
   11db8:	4601      	mov	r1, r0
   11dba:	4630      	mov	r0, r6
   11dbc:	f7ff fd77 	bl	118ae <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   11dc0:	4440      	add	r0, r8
   11dc2:	4428      	add	r0, r5
   11dc4:	3801      	subs	r0, #1
   11dc6:	426d      	negs	r5, r5
   11dc8:	4005      	ands	r5, r0
   11dca:	eba5 0508 	sub.w	r5, r5, r8
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   11dce:	442c      	add	r4, r5
   11dd0:	3407      	adds	r4, #7
   11dd2:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
   11dd6:	4629      	mov	r1, r5
   11dd8:	4630      	mov	r0, r6
   11dda:	f7ff fe5a 	bl	11a92 <mem_to_chunkid>
   11dde:	4680      	mov	r8, r0
	chunkid_t c_end = end - chunk_buf(h);
   11de0:	1ba4      	subs	r4, r4, r6
   11de2:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
   11de4:	4287      	cmp	r7, r0
   11de6:	d32a      	bcc.n	11e3e <sys_heap_aligned_alloc+0xda>
	void *cmem = &buf[c];
   11de8:	eb06 07c8 	add.w	r7, r6, r8, lsl #3
	return big_heap_chunks(h->end_chunk);
   11dec:	68b3      	ldr	r3, [r6, #8]
	if (big_heap(h)) {
   11dee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11df2:	d32e      	bcc.n	11e52 <sys_heap_aligned_alloc+0xee>
		return ((uint32_t *)cmem)[f];
   11df4:	687b      	ldr	r3, [r7, #4]
	return c + chunk_size(h, c);
   11df6:	eb08 0353 	add.w	r3, r8, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
   11dfa:	429c      	cmp	r4, r3
   11dfc:	d32b      	bcc.n	11e56 <sys_heap_aligned_alloc+0xf2>
	return big_heap_chunks(h->end_chunk);
   11dfe:	68b3      	ldr	r3, [r6, #8]
	if (big_heap(h)) {
   11e00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11e04:	d331      	bcc.n	11e6a <sys_heap_aligned_alloc+0x106>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   11e06:	687b      	ldr	r3, [r7, #4]
   11e08:	f043 0301 	orr.w	r3, r3, #1
   11e0c:	607b      	str	r3, [r7, #4]
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   11e0e:	4628      	mov	r0, r5
   11e10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return big_heap(h) ? 8 : 4;
   11e14:	2304      	movs	r3, #4
   11e16:	e7b7      	b.n	11d88 <sys_heap_aligned_alloc+0x24>
	return big_heap_chunks(h->end_chunk);
   11e18:	68b3      	ldr	r3, [r6, #8]
	return big_heap(h) ? 8 : 4;
   11e1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11e1e:	d305      	bcc.n	11e2c <sys_heap_aligned_alloc+0xc8>
   11e20:	2308      	movs	r3, #8
		if (align <= chunk_header_bytes(h)) {
   11e22:	429d      	cmp	r5, r3
   11e24:	d904      	bls.n	11e30 <sys_heap_aligned_alloc+0xcc>
		rew = 0;
   11e26:	f04f 0800 	mov.w	r8, #0
   11e2a:	e7b0      	b.n	11d8e <sys_heap_aligned_alloc+0x2a>
   11e2c:	2304      	movs	r3, #4
   11e2e:	e7f8      	b.n	11e22 <sys_heap_aligned_alloc+0xbe>
			return sys_heap_alloc(heap, bytes);
   11e30:	4621      	mov	r1, r4
   11e32:	f7ff ff50 	bl	11cd6 <sys_heap_alloc>
   11e36:	4605      	mov	r5, r0
   11e38:	e7e9      	b.n	11e0e <sys_heap_aligned_alloc+0xaa>
   11e3a:	2304      	movs	r3, #4
   11e3c:	e7b3      	b.n	11da6 <sys_heap_aligned_alloc+0x42>
		split_chunks(h, c0, c);
   11e3e:	4602      	mov	r2, r0
   11e40:	4639      	mov	r1, r7
   11e42:	4630      	mov	r0, r6
   11e44:	f7ff fdbb 	bl	119be <split_chunks>
		free_list_add(h, c0);
   11e48:	4639      	mov	r1, r7
   11e4a:	4630      	mov	r0, r6
   11e4c:	f7ff fe55 	bl	11afa <free_list_add>
   11e50:	e7ca      	b.n	11de8 <sys_heap_aligned_alloc+0x84>
		return ((uint16_t *)cmem)[f];
   11e52:	887b      	ldrh	r3, [r7, #2]
   11e54:	e7cf      	b.n	11df6 <sys_heap_aligned_alloc+0x92>
		split_chunks(h, c, c_end);
   11e56:	4622      	mov	r2, r4
   11e58:	4641      	mov	r1, r8
   11e5a:	4630      	mov	r0, r6
   11e5c:	f7ff fdaf 	bl	119be <split_chunks>
		free_list_add(h, c_end);
   11e60:	4621      	mov	r1, r4
   11e62:	4630      	mov	r0, r6
   11e64:	f7ff fe49 	bl	11afa <free_list_add>
   11e68:	e7c9      	b.n	11dfe <sys_heap_aligned_alloc+0x9a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   11e6a:	887b      	ldrh	r3, [r7, #2]
   11e6c:	f043 0301 	orr.w	r3, r3, #1
   11e70:	807b      	strh	r3, [r7, #2]
   11e72:	e7cc      	b.n	11e0e <sys_heap_aligned_alloc+0xaa>
		return NULL;
   11e74:	2500      	movs	r5, #0
   11e76:	e7ca      	b.n	11e0e <sys_heap_aligned_alloc+0xaa>
   11e78:	2500      	movs	r5, #0
   11e7a:	e7c8      	b.n	11e0e <sys_heap_aligned_alloc+0xaa>
		return NULL;
   11e7c:	2500      	movs	r5, #0
   11e7e:	e7c6      	b.n	11e0e <sys_heap_aligned_alloc+0xaa>

00011e80 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   11e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11e82:	4603      	mov	r3, r0
	return big_heap_bytes(size) ? 8 : 4;
   11e84:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
   11e88:	d32a      	bcc.n	11ee0 <sys_heap_init+0x60>
   11e8a:	2508      	movs	r5, #8
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   11e8c:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   11e8e:	1dc8      	adds	r0, r1, #7
   11e90:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   11e94:	440d      	add	r5, r1
   11e96:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   11e9a:	1a2d      	subs	r5, r5, r0
   11e9c:	08ef      	lsrs	r7, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
   11e9e:	4606      	mov	r6, r0
	heap->heap = h;
   11ea0:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
   11ea2:	6087      	str	r7, [r0, #8]
	h->avail_buckets = 0;
   11ea4:	2300      	movs	r3, #0
   11ea6:	60c3      	str	r3, [r0, #12]
	return big_heap(h) ? 8 : 4;
   11ea8:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   11eac:	d31a      	bcc.n	11ee4 <sys_heap_init+0x64>
   11eae:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   11eb0:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
   11eb2:	eba7 03d3 	sub.w	r3, r7, r3, lsr #3
   11eb6:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
   11eb8:	fab3 f383 	clz	r3, r3

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
   11ebc:	f1c3 0c20 	rsb	ip, r3, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   11ec0:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
   11ec4:	009b      	lsls	r3, r3, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   11ec6:	f103 0e07 	add.w	lr, r3, #7
   11eca:	ea4f 01de 	mov.w	r1, lr, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   11ece:	2300      	movs	r3, #0
   11ed0:	4563      	cmp	r3, ip
   11ed2:	da09      	bge.n	11ee8 <sys_heap_init+0x68>
		h->buckets[i].next = 0;
   11ed4:	1d1a      	adds	r2, r3, #4
   11ed6:	2400      	movs	r4, #0
   11ed8:	f846 4022 	str.w	r4, [r6, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
   11edc:	3301      	adds	r3, #1
   11ede:	e7f7      	b.n	11ed0 <sys_heap_init+0x50>
	return big_heap_bytes(size) ? 8 : 4;
   11ee0:	2504      	movs	r5, #4
   11ee2:	e7d3      	b.n	11e8c <sys_heap_init+0xc>
	return big_heap(h) ? 8 : 4;
   11ee4:	2304      	movs	r3, #4
   11ee6:	e7e3      	b.n	11eb0 <sys_heap_init+0x30>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   11ee8:	004b      	lsls	r3, r1, #1
	if (big_heap(h)) {
   11eea:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   11eee:	d333      	bcc.n	11f58 <sys_heap_init+0xd8>
		((uint32_t *)cmem)[f] = val;
   11ef0:	6043      	str	r3, [r0, #4]
	if (big_heap(h)) {
   11ef2:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   11ef6:	d331      	bcc.n	11f5c <sys_heap_init+0xdc>
		((uint32_t *)cmem)[f] = val;
   11ef8:	2300      	movs	r3, #0
   11efa:	6003      	str	r3, [r0, #0]
	if (big_heap(h)) {
   11efc:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   11f00:	d32f      	bcc.n	11f62 <sys_heap_init+0xe2>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   11f02:	6843      	ldr	r3, [r0, #4]
   11f04:	f043 0301 	orr.w	r3, r3, #1
   11f08:	6043      	str	r3, [r0, #4]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   11f0a:	1a7a      	subs	r2, r7, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   11f0c:	0056      	lsls	r6, r2, #1
	void *cmem = &buf[c];
   11f0e:	f02e 0307 	bic.w	r3, lr, #7
   11f12:	18c4      	adds	r4, r0, r3
	if (big_heap(h)) {
   11f14:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
   11f18:	d328      	bcc.n	11f6c <sys_heap_init+0xec>
		((uint32_t *)cmem)[f] = val;
   11f1a:	6066      	str	r6, [r4, #4]
	return big_heap_chunks(h->end_chunk);
   11f1c:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   11f1e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   11f22:	d325      	bcc.n	11f70 <sys_heap_init+0xf0>
		((uint32_t *)cmem)[f] = val;
   11f24:	50c1      	str	r1, [r0, r3]
	void *cmem = &buf[c];
   11f26:	f025 0307 	bic.w	r3, r5, #7
   11f2a:	4405      	add	r5, r0
	return big_heap_chunks(h->end_chunk);
   11f2c:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   11f2e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   11f32:	d31f      	bcc.n	11f74 <sys_heap_init+0xf4>
		((uint32_t *)cmem)[f] = val;
   11f34:	2400      	movs	r4, #0
   11f36:	606c      	str	r4, [r5, #4]
	return big_heap_chunks(h->end_chunk);
   11f38:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
   11f3a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
   11f3e:	d31c      	bcc.n	11f7a <sys_heap_init+0xfa>
		((uint32_t *)cmem)[f] = val;
   11f40:	50c2      	str	r2, [r0, r3]
	return big_heap_chunks(h->end_chunk);
   11f42:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
   11f44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11f48:	d319      	bcc.n	11f7e <sys_heap_init+0xfe>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   11f4a:	686b      	ldr	r3, [r5, #4]
   11f4c:	f043 0301 	orr.w	r3, r3, #1
   11f50:	606b      	str	r3, [r5, #4]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   11f52:	f7ff fdd2 	bl	11afa <free_list_add>
}
   11f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		((uint16_t *)cmem)[f] = val;
   11f58:	8043      	strh	r3, [r0, #2]
   11f5a:	e7ca      	b.n	11ef2 <sys_heap_init+0x72>
   11f5c:	2300      	movs	r3, #0
   11f5e:	8003      	strh	r3, [r0, #0]
   11f60:	e7cc      	b.n	11efc <sys_heap_init+0x7c>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   11f62:	8843      	ldrh	r3, [r0, #2]
   11f64:	f043 0301 	orr.w	r3, r3, #1
   11f68:	8043      	strh	r3, [r0, #2]
   11f6a:	e7ce      	b.n	11f0a <sys_heap_init+0x8a>
		((uint16_t *)cmem)[f] = val;
   11f6c:	8066      	strh	r6, [r4, #2]
   11f6e:	e7d5      	b.n	11f1c <sys_heap_init+0x9c>
   11f70:	52c1      	strh	r1, [r0, r3]
   11f72:	e7d8      	b.n	11f26 <sys_heap_init+0xa6>
   11f74:	2400      	movs	r4, #0
   11f76:	806c      	strh	r4, [r5, #2]
   11f78:	e7de      	b.n	11f38 <sys_heap_init+0xb8>
   11f7a:	52c2      	strh	r2, [r0, r3]
   11f7c:	e7e1      	b.n	11f42 <sys_heap_init+0xc2>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   11f7e:	886b      	ldrh	r3, [r5, #2]
   11f80:	f043 0301 	orr.w	r3, r3, #1
   11f84:	806b      	strh	r3, [r5, #2]
   11f86:	e7e4      	b.n	11f52 <sys_heap_init+0xd2>

00011f88 <extract_decimal>:
{
   11f88:	b410      	push	{r4}
   11f8a:	4604      	mov	r4, r0
	const char *sp = *str;
   11f8c:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
   11f8e:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
   11f90:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   11f92:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   11f96:	2909      	cmp	r1, #9
   11f98:	d806      	bhi.n	11fa8 <extract_decimal+0x20>
		val = 10U * val + *sp++ - '0';
   11f9a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   11f9e:	3201      	adds	r2, #1
   11fa0:	eb03 0040 	add.w	r0, r3, r0, lsl #1
   11fa4:	3830      	subs	r0, #48	; 0x30
   11fa6:	e7f3      	b.n	11f90 <extract_decimal+0x8>
	*str = sp;
   11fa8:	6022      	str	r2, [r4, #0]
}
   11faa:	bc10      	pop	{r4}
   11fac:	4770      	bx	lr

00011fae <encode_uint>:
{
   11fae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fb2:	b083      	sub	sp, #12
   11fb4:	4604      	mov	r4, r0
   11fb6:	460d      	mov	r5, r1
   11fb8:	9201      	str	r2, [sp, #4]
   11fba:	469a      	mov	sl, r3
   11fbc:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
   11fc0:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   11fc2:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   11fc6:	2b6f      	cmp	r3, #111	; 0x6f
   11fc8:	d00f      	beq.n	11fea <encode_uint+0x3c>
   11fca:	d906      	bls.n	11fda <encode_uint+0x2c>
   11fcc:	2b70      	cmp	r3, #112	; 0x70
   11fce:	d00f      	beq.n	11ff0 <encode_uint+0x42>
   11fd0:	2b78      	cmp	r3, #120	; 0x78
   11fd2:	d110      	bne.n	11ff6 <encode_uint+0x48>
		return 16;
   11fd4:	f04f 0910 	mov.w	r9, #16
   11fd8:	e026      	b.n	12028 <encode_uint+0x7a>
	switch (specifier) {
   11fda:	2b58      	cmp	r3, #88	; 0x58
   11fdc:	d002      	beq.n	11fe4 <encode_uint+0x36>
   11fde:	f04f 090a 	mov.w	r9, #10
   11fe2:	e021      	b.n	12028 <encode_uint+0x7a>
		return 16;
   11fe4:	f04f 0910 	mov.w	r9, #16
   11fe8:	e01e      	b.n	12028 <encode_uint+0x7a>
		return 8;
   11fea:	f04f 0908 	mov.w	r9, #8
   11fee:	e01b      	b.n	12028 <encode_uint+0x7a>
		return 16;
   11ff0:	f04f 0910 	mov.w	r9, #16
   11ff4:	e018      	b.n	12028 <encode_uint+0x7a>
	switch (specifier) {
   11ff6:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
   11ffa:	e015      	b.n	12028 <encode_uint+0x7a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   11ffc:	f1bb 0f19 	cmp.w	fp, #25
   12000:	d820      	bhi.n	12044 <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   12002:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   12004:	3237      	adds	r2, #55	; 0x37
   12006:	b2d2      	uxtb	r2, r2
   12008:	f808 2d01 	strb.w	r2, [r8, #-1]!
		value /= radix;
   1200c:	4632      	mov	r2, r6
   1200e:	463b      	mov	r3, r7
   12010:	4620      	mov	r0, r4
   12012:	4629      	mov	r1, r5
   12014:	f7ef f814 	bl	1040 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   12018:	42bd      	cmp	r5, r7
   1201a:	bf08      	it	eq
   1201c:	42b4      	cmpeq	r4, r6
   1201e:	d315      	bcc.n	1204c <encode_uint+0x9e>
   12020:	45d0      	cmp	r8, sl
   12022:	d913      	bls.n	1204c <encode_uint+0x9e>
		value /= radix;
   12024:	4604      	mov	r4, r0
   12026:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
   12028:	464e      	mov	r6, r9
   1202a:	2700      	movs	r7, #0
   1202c:	464a      	mov	r2, r9
   1202e:	463b      	mov	r3, r7
   12030:	4620      	mov	r0, r4
   12032:	4629      	mov	r1, r5
   12034:	f7ef f804 	bl	1040 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   12038:	2a09      	cmp	r2, #9
   1203a:	d8df      	bhi.n	11ffc <encode_uint+0x4e>
   1203c:	b2d2      	uxtb	r2, r2
   1203e:	3230      	adds	r2, #48	; 0x30
   12040:	b2d2      	uxtb	r2, r2
   12042:	e7e1      	b.n	12008 <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   12044:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   12046:	3257      	adds	r2, #87	; 0x57
   12048:	b2d2      	uxtb	r2, r2
   1204a:	e7dd      	b.n	12008 <encode_uint+0x5a>
	if (conv->flag_hash) {
   1204c:	9b01      	ldr	r3, [sp, #4]
   1204e:	781b      	ldrb	r3, [r3, #0]
   12050:	f013 0f20 	tst.w	r3, #32
   12054:	d005      	beq.n	12062 <encode_uint+0xb4>
		if (radix == 8) {
   12056:	f1b9 0f08 	cmp.w	r9, #8
   1205a:	d006      	beq.n	1206a <encode_uint+0xbc>
		} else if (radix == 16) {
   1205c:	f1b9 0f10 	cmp.w	r9, #16
   12060:	d009      	beq.n	12076 <encode_uint+0xc8>
}
   12062:	4640      	mov	r0, r8
   12064:	b003      	add	sp, #12
   12066:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   1206a:	9a01      	ldr	r2, [sp, #4]
   1206c:	7893      	ldrb	r3, [r2, #2]
   1206e:	f043 0308 	orr.w	r3, r3, #8
   12072:	7093      	strb	r3, [r2, #2]
   12074:	e7f5      	b.n	12062 <encode_uint+0xb4>
			conv->altform_0c = true;
   12076:	9a01      	ldr	r2, [sp, #4]
   12078:	7893      	ldrb	r3, [r2, #2]
   1207a:	f043 0310 	orr.w	r3, r3, #16
   1207e:	7093      	strb	r3, [r2, #2]
   12080:	e7ef      	b.n	12062 <encode_uint+0xb4>

00012082 <outs>:
{
   12082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12086:	4607      	mov	r7, r0
   12088:	460e      	mov	r6, r1
   1208a:	4614      	mov	r4, r2
   1208c:	4698      	mov	r8, r3
	size_t count = 0;
   1208e:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   12090:	e006      	b.n	120a0 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   12092:	4631      	mov	r1, r6
   12094:	f814 0b01 	ldrb.w	r0, [r4], #1
   12098:	47b8      	blx	r7
		if (rc < 0) {
   1209a:	2800      	cmp	r0, #0
   1209c:	db09      	blt.n	120b2 <outs+0x30>
		++count;
   1209e:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   120a0:	4544      	cmp	r4, r8
   120a2:	d3f6      	bcc.n	12092 <outs+0x10>
   120a4:	f1b8 0f00 	cmp.w	r8, #0
   120a8:	d102      	bne.n	120b0 <outs+0x2e>
   120aa:	7823      	ldrb	r3, [r4, #0]
   120ac:	2b00      	cmp	r3, #0
   120ae:	d1f0      	bne.n	12092 <outs+0x10>
	return (int)count;
   120b0:	4628      	mov	r0, r5
}
   120b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000120b6 <get_rewind_value>:
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
}

static uint32_t get_rewind_value(uint32_t buf_size, uint32_t threshold)
{
	return buf_size * (threshold / buf_size);
   120b6:	fbb1 f1f0 	udiv	r1, r1, r0
}
   120ba:	fb00 f001 	mul.w	r0, r0, r1
   120be:	4770      	bx	lr

000120c0 <mod>:
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   120c0:	6983      	ldr	r3, [r0, #24]
   120c2:	b113      	cbz	r3, 120ca <mod+0xa>
   120c4:	ea03 0001 	and.w	r0, r3, r1
   120c8:	4770      	bx	lr
   120ca:	6900      	ldr	r0, [r0, #16]
   120cc:	fbb1 f3f0 	udiv	r3, r1, r0
   120d0:	fb00 1013 	mls	r0, r0, r3, r1
}
   120d4:	4770      	bx	lr

000120d6 <ring_buf_get_rewind_threshold>:
}
   120d6:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   120da:	4770      	bx	lr

000120dc <ring_buf_is_empty>:

int ring_buf_is_empty(struct ring_buf *buf)
{
   120dc:	b570      	push	{r4, r5, r6, lr}
	uint32_t tail = buf->tail;
   120de:	6844      	ldr	r4, [r0, #4]
	uint32_t head = buf->head;
   120e0:	6805      	ldr	r5, [r0, #0]

	if (tail < head) {
   120e2:	42ac      	cmp	r4, r5
   120e4:	d304      	bcc.n	120f0 <ring_buf_is_empty+0x14>
		tail += get_rewind_value(buf->size,
					 ring_buf_get_rewind_threshold());
	}

	return (head == tail);
}
   120e6:	42ac      	cmp	r4, r5
   120e8:	bf14      	ite	ne
   120ea:	2000      	movne	r0, #0
   120ec:	2001      	moveq	r0, #1
   120ee:	bd70      	pop	{r4, r5, r6, pc}
		tail += get_rewind_value(buf->size,
   120f0:	6906      	ldr	r6, [r0, #16]
   120f2:	f7ff fff0 	bl	120d6 <ring_buf_get_rewind_threshold>
   120f6:	4601      	mov	r1, r0
   120f8:	4630      	mov	r0, r6
   120fa:	f7ff ffdc 	bl	120b6 <get_rewind_value>
   120fe:	4404      	add	r4, r0
   12100:	e7f1      	b.n	120e6 <ring_buf_is_empty+0xa>

00012102 <ring_buf_size_get>:

uint32_t ring_buf_size_get(struct ring_buf *buf)
{
   12102:	b570      	push	{r4, r5, r6, lr}
	uint32_t tail = buf->tail;
   12104:	6844      	ldr	r4, [r0, #4]
	uint32_t head = buf->head;
   12106:	6805      	ldr	r5, [r0, #0]

	if (tail < head) {
   12108:	42ac      	cmp	r4, r5
   1210a:	d301      	bcc.n	12110 <ring_buf_size_get+0xe>
		tail += get_rewind_value(buf->size,
					 ring_buf_get_rewind_threshold());
	}

	return tail - head;
}
   1210c:	1b60      	subs	r0, r4, r5
   1210e:	bd70      	pop	{r4, r5, r6, pc}
		tail += get_rewind_value(buf->size,
   12110:	6906      	ldr	r6, [r0, #16]
   12112:	f7ff ffe0 	bl	120d6 <ring_buf_get_rewind_threshold>
   12116:	4601      	mov	r1, r0
   12118:	4630      	mov	r0, r6
   1211a:	f7ff ffcc 	bl	120b6 <get_rewind_value>
   1211e:	4404      	add	r4, r0
   12120:	e7f4      	b.n	1210c <ring_buf_size_get+0xa>

00012122 <ring_buf_space_get>:

uint32_t ring_buf_space_get(struct ring_buf *buf)
{
   12122:	b510      	push	{r4, lr}
	return buf->size - ring_buf_size_get(buf);
   12124:	6904      	ldr	r4, [r0, #16]
   12126:	f7ff ffec 	bl	12102 <ring_buf_size_get>
}
   1212a:	1a20      	subs	r0, r4, r0
   1212c:	bd10      	pop	{r4, pc}

0001212e <ring_buf_put_claim>:
{
	return val >= max ? (val - max) : val;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   1212e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12132:	4604      	mov	r4, r0
   12134:	460e      	mov	r6, r1
   12136:	4617      	mov	r7, r2
	uint32_t space, trail_size, allocated, tmp_trail_mod;

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
   12138:	f8d0 8008 	ldr.w	r8, [r0, #8]
   1213c:	4641      	mov	r1, r8
   1213e:	f7ff ffbf 	bl	120c0 <mod>
   12142:	4601      	mov	r1, r0
	space = (buf->head + buf->size) - buf->misc.byte_mode.tmp_tail;
   12144:	6825      	ldr	r5, [r4, #0]
   12146:	6920      	ldr	r0, [r4, #16]
   12148:	4405      	add	r5, r0
   1214a:	eba5 0208 	sub.w	r2, r5, r8
	trail_size = buf->size - tmp_trail_mod;
   1214e:	1a40      	subs	r0, r0, r1

	/* Limit requested size to available size. */
	size = MIN(size, space);
   12150:	42ba      	cmp	r2, r7
   12152:	bf28      	it	cs
   12154:	463a      	movcs	r2, r7

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
   12156:	4290      	cmp	r0, r2
   12158:	bf28      	it	cs
   1215a:	4610      	movcs	r0, r2
	*data = &buf->buf.buf8[tmp_trail_mod];
   1215c:	6963      	ldr	r3, [r4, #20]
   1215e:	4419      	add	r1, r3
   12160:	6031      	str	r1, [r6, #0]

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
   12162:	68a3      	ldr	r3, [r4, #8]
   12164:	4403      	add	r3, r0
	buf->misc.byte_mode.tmp_tail =
   12166:	60a3      	str	r3, [r4, #8]

	return allocated;
}
   12168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001216c <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
   1216c:	b570      	push	{r4, r5, r6, lr}
   1216e:	4604      	mov	r4, r0
   12170:	460d      	mov	r5, r1
	uint32_t rew;
	uint32_t threshold = ring_buf_get_rewind_threshold();
   12172:	f7ff ffb0 	bl	120d6 <ring_buf_get_rewind_threshold>
   12176:	4601      	mov	r1, r0

	if ((buf->tail + size) > (buf->head + buf->size)) {
   12178:	6866      	ldr	r6, [r4, #4]
   1217a:	1972      	adds	r2, r6, r5
   1217c:	6823      	ldr	r3, [r4, #0]
   1217e:	6920      	ldr	r0, [r4, #16]
   12180:	4403      	add	r3, r0
   12182:	429a      	cmp	r2, r3
   12184:	d80b      	bhi.n	1219e <ring_buf_put_finish+0x32>
		return -EINVAL;
	}

	/* Check if indexes shall be rewind. */
	if (buf->tail > threshold) {
   12186:	428e      	cmp	r6, r1
   12188:	d907      	bls.n	1219a <ring_buf_put_finish+0x2e>
		rew = get_rewind_value(buf->size, threshold);
   1218a:	f7ff ff94 	bl	120b6 <get_rewind_value>
	} else {
		rew = 0;
	}

	buf->tail += (size - rew);
   1218e:	1a2d      	subs	r5, r5, r0
   12190:	442e      	add	r6, r5
   12192:	6066      	str	r6, [r4, #4]
	buf->misc.byte_mode.tmp_tail = buf->tail;
   12194:	60a6      	str	r6, [r4, #8]

	return 0;
   12196:	2000      	movs	r0, #0
}
   12198:	bd70      	pop	{r4, r5, r6, pc}
		rew = 0;
   1219a:	2000      	movs	r0, #0
   1219c:	e7f7      	b.n	1218e <ring_buf_put_finish+0x22>
		return -EINVAL;
   1219e:	f06f 0015 	mvn.w	r0, #21
   121a2:	e7f9      	b.n	12198 <ring_buf_put_finish+0x2c>

000121a4 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
   121a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   121a8:	b082      	sub	sp, #8
   121aa:	4680      	mov	r8, r0
   121ac:	460e      	mov	r6, r1
   121ae:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   121b0:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
   121b2:	462a      	mov	r2, r5
   121b4:	a901      	add	r1, sp, #4
   121b6:	4640      	mov	r0, r8
   121b8:	f7ff ffb9 	bl	1212e <ring_buf_put_claim>
   121bc:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
   121be:	4602      	mov	r2, r0
   121c0:	4631      	mov	r1, r6
   121c2:	9801      	ldr	r0, [sp, #4]
   121c4:	f001 f814 	bl	131f0 <memcpy>
		total_size += partial_size;
   121c8:	4427      	add	r7, r4
		size -= partial_size;
		data += partial_size;
   121ca:	4426      	add	r6, r4
	} while (size && partial_size);
   121cc:	1b2d      	subs	r5, r5, r4
   121ce:	d001      	beq.n	121d4 <ring_buf_put+0x30>
   121d0:	2c00      	cmp	r4, #0
   121d2:	d1ee      	bne.n	121b2 <ring_buf_put+0xe>

	err = ring_buf_put_finish(buf, total_size);
   121d4:	4639      	mov	r1, r7
   121d6:	4640      	mov	r0, r8
   121d8:	f7ff ffc8 	bl	1216c <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   121dc:	4638      	mov	r0, r7
   121de:	b002      	add	sp, #8
   121e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000121e4 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   121e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   121e8:	4604      	mov	r4, r0
   121ea:	460e      	mov	r6, r1
   121ec:	4617      	mov	r7, r2
	uint32_t space, granted_size, trail_size, tmp_head_mod;
	uint32_t tail = buf->tail;
   121ee:	6845      	ldr	r5, [r0, #4]

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
   121f0:	68c3      	ldr	r3, [r0, #12]
   121f2:	42ab      	cmp	r3, r5
   121f4:	d818      	bhi.n	12228 <ring_buf_get_claim+0x44>
		/* Locally, increment it to pre-rewind value */
		tail += get_rewind_value(buf->size,
					 ring_buf_get_rewind_threshold());
	}

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
   121f6:	f8d4 800c 	ldr.w	r8, [r4, #12]
   121fa:	4641      	mov	r1, r8
   121fc:	4620      	mov	r0, r4
   121fe:	f7ff ff5f 	bl	120c0 <mod>
   12202:	4601      	mov	r1, r0
	space = tail - buf->misc.byte_mode.tmp_head;
   12204:	eba5 0508 	sub.w	r5, r5, r8
	trail_size = buf->size - tmp_head_mod;
   12208:	6923      	ldr	r3, [r4, #16]
   1220a:	1a18      	subs	r0, r3, r0

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
   1220c:	42bd      	cmp	r5, r7
   1220e:	bf28      	it	cs
   12210:	463d      	movcs	r5, r7

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
   12212:	42a8      	cmp	r0, r5
   12214:	bf28      	it	cs
   12216:	4628      	movcs	r0, r5

	*data = &buf->buf.buf8[tmp_head_mod];
   12218:	6963      	ldr	r3, [r4, #20]
   1221a:	4419      	add	r1, r3
   1221c:	6031      	str	r1, [r6, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
   1221e:	68e3      	ldr	r3, [r4, #12]
   12220:	4403      	add	r3, r0
   12222:	60e3      	str	r3, [r4, #12]

	return granted_size;
}
   12224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tail += get_rewind_value(buf->size,
   12228:	f8d0 8010 	ldr.w	r8, [r0, #16]
   1222c:	f7ff ff53 	bl	120d6 <ring_buf_get_rewind_threshold>
   12230:	4601      	mov	r1, r0
   12232:	4640      	mov	r0, r8
   12234:	f7ff ff3f 	bl	120b6 <get_rewind_value>
   12238:	4405      	add	r5, r0
   1223a:	e7dc      	b.n	121f6 <ring_buf_get_claim+0x12>

0001223c <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
   1223c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1223e:	4604      	mov	r4, r0
   12240:	460d      	mov	r5, r1
	uint32_t tail = buf->tail;
   12242:	6846      	ldr	r6, [r0, #4]
	uint32_t rew;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
   12244:	68c3      	ldr	r3, [r0, #12]
   12246:	42b3      	cmp	r3, r6
   12248:	d80a      	bhi.n	12260 <ring_buf_get_finish+0x24>
		/* tail was rewinded. Locally, increment it to pre-rewind value */
		rew = get_rewind_value(buf->size,
				       ring_buf_get_rewind_threshold());
		tail += rew;
	} else {
		rew = 0;
   1224a:	2000      	movs	r0, #0
	}

	if ((buf->head + size) > tail) {
   1224c:	6823      	ldr	r3, [r4, #0]
   1224e:	195a      	adds	r2, r3, r5
   12250:	42b2      	cmp	r2, r6
   12252:	d80e      	bhi.n	12272 <ring_buf_get_finish+0x36>
		return -EINVAL;
	}

	/* Include potential rewinding. */
	buf->head += (size - rew);
   12254:	1a2d      	subs	r5, r5, r0
   12256:	442b      	add	r3, r5
   12258:	6023      	str	r3, [r4, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
   1225a:	60e3      	str	r3, [r4, #12]

	return 0;
   1225c:	2000      	movs	r0, #0
}
   1225e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rew = get_rewind_value(buf->size,
   12260:	6907      	ldr	r7, [r0, #16]
   12262:	f7ff ff38 	bl	120d6 <ring_buf_get_rewind_threshold>
   12266:	4601      	mov	r1, r0
   12268:	4638      	mov	r0, r7
   1226a:	f7ff ff24 	bl	120b6 <get_rewind_value>
		tail += rew;
   1226e:	4406      	add	r6, r0
   12270:	e7ec      	b.n	1224c <ring_buf_get_finish+0x10>
		return -EINVAL;
   12272:	f06f 0015 	mvn.w	r0, #21
   12276:	e7f2      	b.n	1225e <ring_buf_get_finish+0x22>

00012278 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
   12278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1227c:	b082      	sub	sp, #8
   1227e:	4680      	mov	r8, r0
   12280:	460e      	mov	r6, r1
   12282:	4615      	mov	r5, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   12284:	2700      	movs	r7, #0
   12286:	e009      	b.n	1229c <ring_buf_get+0x24>
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
		if (data) {
			memcpy(data, src, partial_size);
   12288:	4602      	mov	r2, r0
   1228a:	9901      	ldr	r1, [sp, #4]
   1228c:	4630      	mov	r0, r6
   1228e:	f000 ffaf 	bl	131f0 <memcpy>
			data += partial_size;
   12292:	4426      	add	r6, r4
		}
		total_size += partial_size;
   12294:	4427      	add	r7, r4
		size -= partial_size;
	} while (size && partial_size);
   12296:	1b2d      	subs	r5, r5, r4
   12298:	d009      	beq.n	122ae <ring_buf_get+0x36>
   1229a:	b144      	cbz	r4, 122ae <ring_buf_get+0x36>
		partial_size = ring_buf_get_claim(buf, &src, size);
   1229c:	462a      	mov	r2, r5
   1229e:	a901      	add	r1, sp, #4
   122a0:	4640      	mov	r0, r8
   122a2:	f7ff ff9f 	bl	121e4 <ring_buf_get_claim>
   122a6:	4604      	mov	r4, r0
		if (data) {
   122a8:	2e00      	cmp	r6, #0
   122aa:	d1ed      	bne.n	12288 <ring_buf_get+0x10>
   122ac:	e7f2      	b.n	12294 <ring_buf_get+0x1c>

	err = ring_buf_get_finish(buf, total_size);
   122ae:	4639      	mov	r1, r7
   122b0:	4640      	mov	r0, r8
   122b2:	f7ff ffc3 	bl	1223c <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   122b6:	4638      	mov	r0, r7
   122b8:	b002      	add	sp, #8
   122ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000122be <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   122be:	4770      	bx	lr

000122c0 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   122c0:	2300      	movs	r3, #0
   122c2:	6043      	str	r3, [r0, #4]
	list->head = NULL;
   122c4:	6003      	str	r3, [r0, #0]
}
   122c6:	4770      	bx	lr

000122c8 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   122c8:	6803      	ldr	r3, [r0, #0]
   122ca:	b12b      	cbz	r3, 122d8 <log_list_add_tail+0x10>
		list->head = msg;
	} else {
		list->tail->next = msg;
   122cc:	6843      	ldr	r3, [r0, #4]
   122ce:	6019      	str	r1, [r3, #0]
	}

	list->tail = msg;
   122d0:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   122d2:	2300      	movs	r3, #0
   122d4:	600b      	str	r3, [r1, #0]
}
   122d6:	4770      	bx	lr
		list->head = msg;
   122d8:	6001      	str	r1, [r0, #0]
   122da:	e7f9      	b.n	122d0 <log_list_add_tail+0x8>

000122dc <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   122dc:	6800      	ldr	r0, [r0, #0]
   122de:	4770      	bx	lr

000122e0 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   122e0:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   122e2:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   122e4:	b108      	cbz	r0, 122ea <log_list_head_get+0xa>
		list->head = list->head->next;
   122e6:	6802      	ldr	r2, [r0, #0]
   122e8:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   122ea:	4770      	bx	lr

000122ec <dummy_timestamp>:
}
   122ec:	2000      	movs	r0, #0
   122ee:	4770      	bx	lr

000122f0 <msg_filter_check>:
}
   122f0:	2001      	movs	r0, #1
   122f2:	4770      	bx	lr

000122f4 <default_get_timestamp>:
{
   122f4:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   122f6:	f001 ffc7 	bl	14288 <sys_clock_cycle_get_32>
}
   122fa:	bd08      	pop	{r3, pc}

000122fc <z_log_get_s_mask>:
{
   122fc:	b470      	push	{r4, r5, r6}
   122fe:	4603      	mov	r3, r0
	uint32_t mask = 0U;
   12300:	2000      	movs	r0, #0
	uint32_t arg = 0U;
   12302:	4605      	mov	r5, r0
	bool arm = false;
   12304:	4604      	mov	r4, r0
	while ((curr = *str++) && arg < nargs) {
   12306:	e001      	b.n	1230c <z_log_get_s_mask+0x10>
			arm = !arm;
   12308:	f084 0401 	eor.w	r4, r4, #1
	while ((curr = *str++) && arg < nargs) {
   1230c:	f813 2b01 	ldrb.w	r2, [r3], #1
   12310:	b19a      	cbz	r2, 1233a <z_log_get_s_mask+0x3e>
   12312:	428d      	cmp	r5, r1
   12314:	d211      	bcs.n	1233a <z_log_get_s_mask+0x3e>
		if (curr == '%') {
   12316:	2a25      	cmp	r2, #37	; 0x25
   12318:	d0f6      	beq.n	12308 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   1231a:	2c00      	cmp	r4, #0
   1231c:	d0f6      	beq.n	1230c <z_log_get_s_mask+0x10>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1231e:	f042 0620 	orr.w	r6, r2, #32
   12322:	3e61      	subs	r6, #97	; 0x61
   12324:	2e19      	cmp	r6, #25
   12326:	d8f1      	bhi.n	1230c <z_log_get_s_mask+0x10>
			if (curr == 's') {
   12328:	2a73      	cmp	r2, #115	; 0x73
   1232a:	d002      	beq.n	12332 <z_log_get_s_mask+0x36>
			arg++;
   1232c:	3501      	adds	r5, #1
			arm = false;
   1232e:	2400      	movs	r4, #0
   12330:	e7ec      	b.n	1230c <z_log_get_s_mask+0x10>
				mask |= BIT(arg);
   12332:	2201      	movs	r2, #1
   12334:	40aa      	lsls	r2, r5
   12336:	4310      	orrs	r0, r2
   12338:	e7f8      	b.n	1232c <z_log_get_s_mask+0x30>
}
   1233a:	bc70      	pop	{r4, r5, r6}
   1233c:	4770      	bx	lr

0001233e <block_on_alloc>:
}
   1233e:	2000      	movs	r0, #0
   12340:	4770      	bx	lr

00012342 <cont_arg_get>:

static log_arg_t cont_arg_get(struct log_msg *msg, uint32_t arg_idx)
{
	struct log_msg_cont *cont;

	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   12342:	2901      	cmp	r1, #1
   12344:	d906      	bls.n	12354 <cont_arg_get+0x12>
		return msg->payload.ext.data.args[arg_idx];
	}


	cont = msg->payload.ext.next;
   12346:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   12348:	3902      	subs	r1, #2

	while (arg_idx >= ARGS_CONT_MSG) {
   1234a:	2906      	cmp	r1, #6
   1234c:	d907      	bls.n	1235e <cont_arg_get+0x1c>
		arg_idx -= ARGS_CONT_MSG;
   1234e:	3907      	subs	r1, #7
		cont = cont->next;
   12350:	681b      	ldr	r3, [r3, #0]
   12352:	e7fa      	b.n	1234a <cont_arg_get+0x8>
		return msg->payload.ext.data.args[arg_idx];
   12354:	3104      	adds	r1, #4
   12356:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1235a:	6888      	ldr	r0, [r1, #8]
   1235c:	4770      	bx	lr
	}

	return cont->payload.args[arg_idx];
   1235e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   12362:	6848      	ldr	r0, [r1, #4]
}
   12364:	4770      	bx	lr

00012366 <copy_args_to_msg>:

	return msg;
}

static void copy_args_to_msg(struct  log_msg *msg, log_arg_t *args, uint32_t nargs)
{
   12366:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1236a:	460d      	mov	r5, r1
   1236c:	4614      	mov	r4, r2
	struct log_msg_cont *cont = msg->payload.ext.next;
   1236e:	6946      	ldr	r6, [r0, #20]

	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   12370:	2a03      	cmp	r2, #3
   12372:	d917      	bls.n	123a4 <copy_args_to_msg+0x3e>
		(void)memcpy(msg->payload.ext.data.args, args,
   12374:	2208      	movs	r2, #8
   12376:	3018      	adds	r0, #24
   12378:	f000 ff3a 	bl	131f0 <memcpy>
		       LOG_MSG_NARGS_HEAD_CHUNK * sizeof(log_arg_t));
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   1237c:	3c02      	subs	r4, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1237e:	3508      	adds	r5, #8
		(void)memcpy(msg->payload.single.args, args,
			     nargs * sizeof(log_arg_t));
		nargs  = 0U;
	}

	while (nargs != 0U) {
   12380:	b1b4      	cbz	r4, 123b0 <copy_args_to_msg+0x4a>
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   12382:	46a0      	mov	r8, r4
   12384:	2c07      	cmp	r4, #7
   12386:	bf28      	it	cs
   12388:	f04f 0807 	movcs.w	r8, #7

		(void)memcpy(cont->payload.args, args,
   1238c:	ea4f 0788 	mov.w	r7, r8, lsl #2
   12390:	463a      	mov	r2, r7
   12392:	4629      	mov	r1, r5
   12394:	1d30      	adds	r0, r6, #4
   12396:	f000 ff2b 	bl	131f0 <memcpy>
			     cpy_args * sizeof(log_arg_t));
		nargs -= cpy_args;
   1239a:	eba4 0408 	sub.w	r4, r4, r8
		args += cpy_args;
   1239e:	443d      	add	r5, r7
		cont = cont->next;
   123a0:	6836      	ldr	r6, [r6, #0]
   123a2:	e7ed      	b.n	12380 <copy_args_to_msg+0x1a>
		(void)memcpy(msg->payload.single.args, args,
   123a4:	0092      	lsls	r2, r2, #2
   123a6:	3014      	adds	r0, #20
   123a8:	f000 ff22 	bl	131f0 <memcpy>
		nargs  = 0U;
   123ac:	2400      	movs	r4, #0
   123ae:	e7e7      	b.n	12380 <copy_args_to_msg+0x1a>
	}
}
   123b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000123b4 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   123b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   123b8:	461c      	mov	r4, r3
   123ba:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint32_t available_len = msg->hdr.params.hexdump.length;
   123be:	8903      	ldrh	r3, [r0, #8]
   123c0:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   123c4:	42a3      	cmp	r3, r4
   123c6:	d91f      	bls.n	12408 <log_msg_hexdump_data_op+0x54>
   123c8:	4688      	mov	r8, r1
		*length = 0;
		return;
	}

	if ((offset + *length) > available_len) {
   123ca:	6811      	ldr	r1, [r2, #0]
   123cc:	4421      	add	r1, r4
   123ce:	4299      	cmp	r1, r3
   123d0:	d901      	bls.n	123d6 <log_msg_hexdump_data_op+0x22>
		*length = available_len - offset;
   123d2:	1b19      	subs	r1, r3, r4
   123d4:	6011      	str	r1, [r2, #0]
	}

	req_len = *length;
   123d6:	6817      	ldr	r7, [r2, #0]

	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   123d8:	2b0c      	cmp	r3, #12
   123da:	d919      	bls.n	12410 <log_msg_hexdump_data_op+0x5c>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
		head_data = msg->payload.ext.data.bytes;
   123dc:	f100 0c18 	add.w	ip, r0, #24
		cont = msg->payload.ext.next;
   123e0:	6946      	ldr	r6, [r0, #20]
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   123e2:	2308      	movs	r3, #8
		head_data = msg->payload.single.bytes;
		chunk_len = available_len;

	}

	if (offset < chunk_len) {
   123e4:	42a3      	cmp	r3, r4
   123e6:	d91e      	bls.n	12426 <log_msg_hexdump_data_op+0x72>
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   123e8:	42bb      	cmp	r3, r7
   123ea:	bf28      	it	cs
   123ec:	463b      	movcs	r3, r7
   123ee:	461d      	mov	r5, r3

		if (put_op) {
   123f0:	f1b9 0f00 	cmp.w	r9, #0
   123f4:	d010      	beq.n	12418 <log_msg_hexdump_data_op+0x64>
			(void)memcpy(&head_data[offset], data, cpy_len);
   123f6:	461a      	mov	r2, r3
   123f8:	4641      	mov	r1, r8
   123fa:	eb0c 0004 	add.w	r0, ip, r4
   123fe:	f000 fef7 	bl	131f0 <memcpy>
		} else {
			(void)memcpy(data, &head_data[offset], cpy_len);
		}

		req_len -= cpy_len;
   12402:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
   12404:	44a8      	add	r8, r5
   12406:	e021      	b.n	1244c <log_msg_hexdump_data_op+0x98>
		*length = 0;
   12408:	2300      	movs	r3, #0
   1240a:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   1240c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		head_data = msg->payload.single.bytes;
   12410:	f100 0c14 	add.w	ip, r0, #20
	struct log_msg_cont *cont = NULL;
   12414:	2600      	movs	r6, #0
   12416:	e7e5      	b.n	123e4 <log_msg_hexdump_data_op+0x30>
			(void)memcpy(data, &head_data[offset], cpy_len);
   12418:	461a      	mov	r2, r3
   1241a:	eb0c 0104 	add.w	r1, ip, r4
   1241e:	4640      	mov	r0, r8
   12420:	f000 fee6 	bl	131f0 <memcpy>
   12424:	e7ed      	b.n	12402 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   12426:	1ae4      	subs	r4, r4, r3
		if (cont == NULL) {
   12428:	b91e      	cbnz	r6, 12432 <log_msg_hexdump_data_op+0x7e>
			cont = msg->payload.ext.next;
   1242a:	6946      	ldr	r6, [r0, #20]
   1242c:	e001      	b.n	12432 <log_msg_hexdump_data_op+0x7e>
			cont = cont->next;
   1242e:	6836      	ldr	r6, [r6, #0]
			offset -= chunk_len;
   12430:	3c1c      	subs	r4, #28
		while (offset >= chunk_len) {
   12432:	2c1b      	cmp	r4, #27
   12434:	d8fb      	bhi.n	1242e <log_msg_hexdump_data_op+0x7a>
   12436:	e009      	b.n	1244c <log_msg_hexdump_data_op+0x98>
			(void)memcpy(data, &cont->payload.bytes[offset],
   12438:	1931      	adds	r1, r6, r4
   1243a:	462a      	mov	r2, r5
   1243c:	3104      	adds	r1, #4
   1243e:	4640      	mov	r0, r8
   12440:	f000 fed6 	bl	131f0 <memcpy>
		cont = cont->next;
   12444:	6836      	ldr	r6, [r6, #0]
		req_len -= cpy_len;
   12446:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
   12448:	44a8      	add	r8, r5
		offset = 0;
   1244a:	2400      	movs	r4, #0
	while ((req_len > 0) && (cont != NULL)) {
   1244c:	2f00      	cmp	r7, #0
   1244e:	d0dd      	beq.n	1240c <log_msg_hexdump_data_op+0x58>
   12450:	2e00      	cmp	r6, #0
   12452:	d0db      	beq.n	1240c <log_msg_hexdump_data_op+0x58>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   12454:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   12458:	42bd      	cmp	r5, r7
   1245a:	bf28      	it	cs
   1245c:	463d      	movcs	r5, r7
		if (put_op) {
   1245e:	f1b9 0f00 	cmp.w	r9, #0
   12462:	d0e9      	beq.n	12438 <log_msg_hexdump_data_op+0x84>
			(void)memcpy(&cont->payload.bytes[offset],
   12464:	1930      	adds	r0, r6, r4
   12466:	462a      	mov	r2, r5
   12468:	4641      	mov	r1, r8
   1246a:	3004      	adds	r0, #4
   1246c:	f000 fec0 	bl	131f0 <memcpy>
   12470:	e7e8      	b.n	12444 <log_msg_hexdump_data_op+0x90>

00012472 <log_msg_get>:
	atomic_inc(&msg->hdr.ref_cnt);
   12472:	3004      	adds	r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   12474:	f3bf 8f5b 	dmb	ish
   12478:	e850 3f00 	ldrex	r3, [r0]
   1247c:	3301      	adds	r3, #1
   1247e:	e840 3200 	strex	r2, r3, [r0]
   12482:	2a00      	cmp	r2, #0
   12484:	d1f8      	bne.n	12478 <log_msg_get+0x6>
   12486:	f3bf 8f5b 	dmb	ish
}
   1248a:	4770      	bx	lr

0001248c <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   1248c:	7a40      	ldrb	r0, [r0, #9]
}
   1248e:	0900      	lsrs	r0, r0, #4
   12490:	4770      	bx	lr

00012492 <log_msg_arg_get>:
{
   12492:	b508      	push	{r3, lr}
	if (arg_idx >= msg->hdr.params.std.nargs) {
   12494:	7a43      	ldrb	r3, [r0, #9]
   12496:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   1249a:	d20a      	bcs.n	124b2 <log_msg_arg_get+0x20>
   1249c:	091a      	lsrs	r2, r3, #4
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1249e:	2a03      	cmp	r2, #3
   124a0:	d804      	bhi.n	124ac <log_msg_arg_get+0x1a>
		arg = msg->payload.single.args[arg_idx];
   124a2:	3104      	adds	r1, #4
   124a4:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   124a8:	6840      	ldr	r0, [r0, #4]
   124aa:	e003      	b.n	124b4 <log_msg_arg_get+0x22>
		arg = cont_arg_get(msg, arg_idx);
   124ac:	f7ff ff49 	bl	12342 <cont_arg_get>
   124b0:	e000      	b.n	124b4 <log_msg_arg_get+0x22>
		return 0;
   124b2:	2000      	movs	r0, #0
}
   124b4:	bd08      	pop	{r3, pc}

000124b6 <log_msg_str_get>:
}
   124b6:	6900      	ldr	r0, [r0, #16]
   124b8:	4770      	bx	lr

000124ba <log_msg_put>:
{
   124ba:	b508      	push	{r3, lr}
	atomic_dec(&msg->hdr.ref_cnt);
   124bc:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   124be:	f3bf 8f5b 	dmb	ish
   124c2:	e853 2f00 	ldrex	r2, [r3]
   124c6:	3a01      	subs	r2, #1
   124c8:	e843 2100 	strex	r1, r2, [r3]
   124cc:	2900      	cmp	r1, #0
   124ce:	d1f8      	bne.n	124c2 <log_msg_put+0x8>
   124d0:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   124d4:	6843      	ldr	r3, [r0, #4]
   124d6:	b103      	cbz	r3, 124da <log_msg_put+0x20>
}
   124d8:	bd08      	pop	{r3, pc}
		msg_free(msg);
   124da:	f7f1 f87f 	bl	35dc <msg_free>
}
   124de:	e7fb      	b.n	124d8 <log_msg_put+0x1e>

000124e0 <msg_alloc>:
{
   124e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   124e2:	4605      	mov	r5, r0
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   124e4:	f7f1 f85e 	bl	35a4 <log_msg_chunk_alloc>
	if (msg != NULL) {
   124e8:	4607      	mov	r7, r0
   124ea:	b140      	cbz	r0, 124fe <msg_alloc+0x1e>
		msg->hdr.ref_cnt = 1;
   124ec:	2301      	movs	r3, #1
   124ee:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   124f0:	2200      	movs	r2, #0
   124f2:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   124f4:	f04f 0300 	mov.w	r3, #0
   124f8:	f362 0300 	bfi	r3, r2, #0, #1
   124fc:	7203      	strb	r3, [r0, #8]
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   124fe:	b1f7      	cbz	r7, 1253e <msg_alloc+0x5e>
   12500:	2d03      	cmp	r5, #3
   12502:	d91c      	bls.n	1253e <msg_alloc+0x5e>
	msg->hdr.params.std.nargs = 0U;
   12504:	7a7b      	ldrb	r3, [r7, #9]
   12506:	f36f 1307 	bfc	r3, #4, #4
   1250a:	727b      	strb	r3, [r7, #9]
	msg->hdr.params.generic.ext = 1;
   1250c:	7a3b      	ldrb	r3, [r7, #8]
   1250e:	f043 0302 	orr.w	r3, r3, #2
   12512:	723b      	strb	r3, [r7, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   12514:	3d02      	subs	r5, #2
	next = &msg->payload.ext.next;
   12516:	f107 0614 	add.w	r6, r7, #20
	*next = NULL;
   1251a:	2300      	movs	r3, #0
   1251c:	617b      	str	r3, [r7, #20]
	while (n > 0) {
   1251e:	2d00      	cmp	r5, #0
   12520:	dd0d      	ble.n	1253e <msg_alloc+0x5e>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   12522:	f7f1 f83f 	bl	35a4 <log_msg_chunk_alloc>
		if (cont == NULL) {
   12526:	4604      	mov	r4, r0
   12528:	b128      	cbz	r0, 12536 <msg_alloc+0x56>
		*next = cont;
   1252a:	6030      	str	r0, [r6, #0]
		cont->next = NULL;
   1252c:	2300      	movs	r3, #0
   1252e:	6003      	str	r3, [r0, #0]
		next = &cont->next;
   12530:	4606      	mov	r6, r0
		n -= ARGS_CONT_MSG;
   12532:	3d07      	subs	r5, #7
   12534:	e7f3      	b.n	1251e <msg_alloc+0x3e>
			msg_free(msg);
   12536:	4638      	mov	r0, r7
   12538:	f7f1 f850 	bl	35dc <msg_free>
			return NULL;
   1253c:	4627      	mov	r7, r4
}
   1253e:	4638      	mov	r0, r7
   12540:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00012542 <log_msg_create_n>:
{
   12542:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12544:	4607      	mov	r7, r0
   12546:	460e      	mov	r6, r1
   12548:	4614      	mov	r4, r2
	msg = msg_alloc(nargs);
   1254a:	4610      	mov	r0, r2
   1254c:	f7ff ffc8 	bl	124e0 <msg_alloc>
	if (msg != NULL) {
   12550:	4605      	mov	r5, r0
   12552:	b140      	cbz	r0, 12566 <log_msg_create_n+0x24>
		msg->str = str;
   12554:	6107      	str	r7, [r0, #16]
		msg->hdr.params.std.nargs = nargs;
   12556:	7a43      	ldrb	r3, [r0, #9]
   12558:	f364 1307 	bfi	r3, r4, #4, #4
   1255c:	7243      	strb	r3, [r0, #9]
		copy_args_to_msg(msg, args, nargs);
   1255e:	4622      	mov	r2, r4
   12560:	4631      	mov	r1, r6
   12562:	f7ff ff00 	bl	12366 <copy_args_to_msg>
}
   12566:	4628      	mov	r0, r5
   12568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001256a <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   1256a:	b510      	push	{r4, lr}
   1256c:	b082      	sub	sp, #8
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   1256e:	2400      	movs	r4, #0
   12570:	9400      	str	r4, [sp, #0]
   12572:	f7ff ff1f 	bl	123b4 <log_msg_hexdump_data_op>
}
   12576:	b002      	add	sp, #8
   12578:	bd10      	pop	{r4, pc}

0001257a <buffer_write>:
{
   1257a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1257c:	4607      	mov	r7, r0
   1257e:	460d      	mov	r5, r1
   12580:	4614      	mov	r4, r2
   12582:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
   12584:	4632      	mov	r2, r6
   12586:	4621      	mov	r1, r4
   12588:	4628      	mov	r0, r5
   1258a:	47b8      	blx	r7
		buf += processed;
   1258c:	4405      	add	r5, r0
	} while (len != 0);
   1258e:	1a24      	subs	r4, r4, r0
   12590:	d1f8      	bne.n	12584 <buffer_write+0xa>
}
   12592:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00012594 <color_prefix>:
{
   12594:	b508      	push	{r3, lr}
   12596:	4613      	mov	r3, r2
	color_print(output, color, true, level);
   12598:	2201      	movs	r2, #1
   1259a:	f7f1 f8b7 	bl	370c <color_print>
}
   1259e:	bd08      	pop	{r3, pc}

000125a0 <color_postfix>:
{
   125a0:	b508      	push	{r3, lr}
   125a2:	4613      	mov	r3, r2
	color_print(output, color, false, level);
   125a4:	2200      	movs	r2, #0
   125a6:	f7f1 f8b1 	bl	370c <color_print>
}
   125aa:	bd08      	pop	{r3, pc}

000125ac <postfix_print>:
{
   125ac:	b538      	push	{r3, r4, r5, lr}
   125ae:	4605      	mov	r5, r0
   125b0:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
   125b2:	f001 0101 	and.w	r1, r1, #1
   125b6:	f7ff fff3 	bl	125a0 <color_postfix>
	newline_print(output, flags);
   125ba:	4621      	mov	r1, r4
   125bc:	4628      	mov	r0, r5
   125be:	f7f1 f8bb 	bl	3738 <newline_print>
}
   125c2:	bd38      	pop	{r3, r4, r5, pc}

000125c4 <prefix_print>:
{
   125c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   125c8:	b083      	sub	sp, #12
   125ca:	4604      	mov	r4, r0
   125cc:	4615      	mov	r5, r2
   125ce:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   125d2:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   125d6:	f3c1 08c0 	ubfx	r8, r1, #3, #1
	if (stamp) {
   125da:	f011 0702 	ands.w	r7, r1, #2
   125de:	d113      	bne.n	12608 <prefix_print+0x44>
		color_prefix(output, colors_on, level);
   125e0:	4632      	mov	r2, r6
   125e2:	4649      	mov	r1, r9
   125e4:	4620      	mov	r0, r4
   125e6:	f7ff ffd5 	bl	12594 <color_prefix>
	length += ids_print(output, level_on, func_on,
   125ea:	9601      	str	r6, [sp, #4]
   125ec:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
   125f0:	9300      	str	r3, [sp, #0]
   125f2:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   125f6:	462a      	mov	r2, r5
   125f8:	4641      	mov	r1, r8
   125fa:	4620      	mov	r0, r4
   125fc:	f7f1 f90e 	bl	381c <ids_print>
}
   12600:	4438      	add	r0, r7
   12602:	b003      	add	sp, #12
   12604:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		length += timestamp_print(output, flags, timestamp);
   12608:	461a      	mov	r2, r3
   1260a:	f7f1 f839 	bl	3680 <timestamp_print>
   1260e:	4607      	mov	r7, r0
   12610:	e7e6      	b.n	125e0 <prefix_print+0x1c>

00012612 <std_print>:
{
   12612:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12616:	b08e      	sub	sp, #56	; 0x38
   12618:	af0e      	add	r7, sp, #56	; 0x38
   1261a:	4606      	mov	r6, r0
   1261c:	4689      	mov	r9, r1
	const char *str = log_msg_str_get(msg);
   1261e:	f7ff ff4a 	bl	124b6 <log_msg_str_get>
   12622:	4682      	mov	sl, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   12624:	4630      	mov	r0, r6
   12626:	f7ff ff31 	bl	1248c <log_msg_nargs_get>
   1262a:	4680      	mov	r8, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   1262c:	0083      	lsls	r3, r0, #2
   1262e:	3307      	adds	r3, #7
   12630:	f023 0307 	bic.w	r3, r3, #7
   12634:	ebad 0d03 	sub.w	sp, sp, r3
   12638:	ad0e      	add	r5, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   1263a:	2400      	movs	r4, #0
   1263c:	4544      	cmp	r4, r8
   1263e:	d207      	bcs.n	12650 <std_print+0x3e>
		args[i] = log_msg_arg_get(msg, i);
   12640:	4621      	mov	r1, r4
   12642:	4630      	mov	r0, r6
   12644:	f7ff ff25 	bl	12492 <log_msg_arg_get>
   12648:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	for (i = 0; i < nargs; i++) {
   1264c:	3401      	adds	r4, #1
   1264e:	e7f5      	b.n	1263c <std_print+0x2a>
	switch (log_msg_nargs_get(msg)) {
   12650:	4630      	mov	r0, r6
   12652:	f7ff ff1b 	bl	1248c <log_msg_nargs_get>
   12656:	280f      	cmp	r0, #15
   12658:	d815      	bhi.n	12686 <std_print+0x74>
   1265a:	e8df f010 	tbh	[pc, r0, lsl #1]
   1265e:	0010      	.short	0x0010
   12660:	001d0017 	.word	0x001d0017
   12664:	002d0024 	.word	0x002d0024
   12668:	00450038 	.word	0x00450038
   1266c:	00650054 	.word	0x00650054
   12670:	008d0078 	.word	0x008d0078
   12674:	00bd00a4 	.word	0x00bd00a4
   12678:	00f500d8 	.word	0x00f500d8
   1267c:	0114      	.short	0x0114
		print_formatted(output, str);
   1267e:	4651      	mov	r1, sl
   12680:	4648      	mov	r0, r9
   12682:	f7f0 ffeb 	bl	365c <print_formatted>
}
   12686:	46bd      	mov	sp, r7
   12688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   1268c:	682a      	ldr	r2, [r5, #0]
   1268e:	4651      	mov	r1, sl
   12690:	4648      	mov	r0, r9
   12692:	f7f0 ffe3 	bl	365c <print_formatted>
		break;
   12696:	e7f6      	b.n	12686 <std_print+0x74>
		print_formatted(output, str, args[0], args[1]);
   12698:	686b      	ldr	r3, [r5, #4]
   1269a:	682a      	ldr	r2, [r5, #0]
   1269c:	4651      	mov	r1, sl
   1269e:	4648      	mov	r0, r9
   126a0:	f7f0 ffdc 	bl	365c <print_formatted>
		break;
   126a4:	e7ef      	b.n	12686 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2]);
   126a6:	686b      	ldr	r3, [r5, #4]
   126a8:	682a      	ldr	r2, [r5, #0]
   126aa:	68a9      	ldr	r1, [r5, #8]
   126ac:	9100      	str	r1, [sp, #0]
   126ae:	4651      	mov	r1, sl
   126b0:	4648      	mov	r0, r9
   126b2:	f7f0 ffd3 	bl	365c <print_formatted>
		break;
   126b6:	e7e6      	b.n	12686 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   126b8:	686b      	ldr	r3, [r5, #4]
   126ba:	682a      	ldr	r2, [r5, #0]
   126bc:	68e9      	ldr	r1, [r5, #12]
   126be:	9101      	str	r1, [sp, #4]
   126c0:	68a9      	ldr	r1, [r5, #8]
   126c2:	9100      	str	r1, [sp, #0]
   126c4:	4651      	mov	r1, sl
   126c6:	4648      	mov	r0, r9
   126c8:	f7f0 ffc8 	bl	365c <print_formatted>
		break;
   126cc:	e7db      	b.n	12686 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   126ce:	686b      	ldr	r3, [r5, #4]
   126d0:	682a      	ldr	r2, [r5, #0]
   126d2:	6929      	ldr	r1, [r5, #16]
   126d4:	9102      	str	r1, [sp, #8]
   126d6:	68e9      	ldr	r1, [r5, #12]
   126d8:	9101      	str	r1, [sp, #4]
   126da:	68a9      	ldr	r1, [r5, #8]
   126dc:	9100      	str	r1, [sp, #0]
   126de:	4651      	mov	r1, sl
   126e0:	4648      	mov	r0, r9
   126e2:	f7f0 ffbb 	bl	365c <print_formatted>
		break;
   126e6:	e7ce      	b.n	12686 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   126e8:	686b      	ldr	r3, [r5, #4]
   126ea:	682a      	ldr	r2, [r5, #0]
   126ec:	6969      	ldr	r1, [r5, #20]
   126ee:	9103      	str	r1, [sp, #12]
   126f0:	6929      	ldr	r1, [r5, #16]
   126f2:	9102      	str	r1, [sp, #8]
   126f4:	68e9      	ldr	r1, [r5, #12]
   126f6:	9101      	str	r1, [sp, #4]
   126f8:	68a9      	ldr	r1, [r5, #8]
   126fa:	9100      	str	r1, [sp, #0]
   126fc:	4651      	mov	r1, sl
   126fe:	4648      	mov	r0, r9
   12700:	f7f0 ffac 	bl	365c <print_formatted>
		break;
   12704:	e7bf      	b.n	12686 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   12706:	686b      	ldr	r3, [r5, #4]
   12708:	682a      	ldr	r2, [r5, #0]
   1270a:	69a9      	ldr	r1, [r5, #24]
   1270c:	9104      	str	r1, [sp, #16]
   1270e:	6969      	ldr	r1, [r5, #20]
   12710:	9103      	str	r1, [sp, #12]
   12712:	6929      	ldr	r1, [r5, #16]
   12714:	9102      	str	r1, [sp, #8]
   12716:	68e9      	ldr	r1, [r5, #12]
   12718:	9101      	str	r1, [sp, #4]
   1271a:	68a9      	ldr	r1, [r5, #8]
   1271c:	9100      	str	r1, [sp, #0]
   1271e:	4651      	mov	r1, sl
   12720:	4648      	mov	r0, r9
   12722:	f7f0 ff9b 	bl	365c <print_formatted>
		break;
   12726:	e7ae      	b.n	12686 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   12728:	686b      	ldr	r3, [r5, #4]
   1272a:	682a      	ldr	r2, [r5, #0]
   1272c:	69e9      	ldr	r1, [r5, #28]
   1272e:	9105      	str	r1, [sp, #20]
   12730:	69a9      	ldr	r1, [r5, #24]
   12732:	9104      	str	r1, [sp, #16]
   12734:	6969      	ldr	r1, [r5, #20]
   12736:	9103      	str	r1, [sp, #12]
   12738:	6929      	ldr	r1, [r5, #16]
   1273a:	9102      	str	r1, [sp, #8]
   1273c:	68e9      	ldr	r1, [r5, #12]
   1273e:	9101      	str	r1, [sp, #4]
   12740:	68a9      	ldr	r1, [r5, #8]
   12742:	9100      	str	r1, [sp, #0]
   12744:	4651      	mov	r1, sl
   12746:	4648      	mov	r0, r9
   12748:	f7f0 ff88 	bl	365c <print_formatted>
		break;
   1274c:	e79b      	b.n	12686 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   1274e:	686b      	ldr	r3, [r5, #4]
   12750:	682a      	ldr	r2, [r5, #0]
   12752:	6a29      	ldr	r1, [r5, #32]
   12754:	9106      	str	r1, [sp, #24]
   12756:	69e9      	ldr	r1, [r5, #28]
   12758:	9105      	str	r1, [sp, #20]
   1275a:	69a9      	ldr	r1, [r5, #24]
   1275c:	9104      	str	r1, [sp, #16]
   1275e:	6969      	ldr	r1, [r5, #20]
   12760:	9103      	str	r1, [sp, #12]
   12762:	6929      	ldr	r1, [r5, #16]
   12764:	9102      	str	r1, [sp, #8]
   12766:	68e9      	ldr	r1, [r5, #12]
   12768:	9101      	str	r1, [sp, #4]
   1276a:	68a9      	ldr	r1, [r5, #8]
   1276c:	9100      	str	r1, [sp, #0]
   1276e:	4651      	mov	r1, sl
   12770:	4648      	mov	r0, r9
   12772:	f7f0 ff73 	bl	365c <print_formatted>
		break;
   12776:	e786      	b.n	12686 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   12778:	686b      	ldr	r3, [r5, #4]
   1277a:	682a      	ldr	r2, [r5, #0]
   1277c:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1277e:	9107      	str	r1, [sp, #28]
   12780:	6a29      	ldr	r1, [r5, #32]
   12782:	9106      	str	r1, [sp, #24]
   12784:	69e9      	ldr	r1, [r5, #28]
   12786:	9105      	str	r1, [sp, #20]
   12788:	69a9      	ldr	r1, [r5, #24]
   1278a:	9104      	str	r1, [sp, #16]
   1278c:	6969      	ldr	r1, [r5, #20]
   1278e:	9103      	str	r1, [sp, #12]
   12790:	6929      	ldr	r1, [r5, #16]
   12792:	9102      	str	r1, [sp, #8]
   12794:	68e9      	ldr	r1, [r5, #12]
   12796:	9101      	str	r1, [sp, #4]
   12798:	68a9      	ldr	r1, [r5, #8]
   1279a:	9100      	str	r1, [sp, #0]
   1279c:	4651      	mov	r1, sl
   1279e:	4648      	mov	r0, r9
   127a0:	f7f0 ff5c 	bl	365c <print_formatted>
		break;
   127a4:	e76f      	b.n	12686 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   127a6:	686b      	ldr	r3, [r5, #4]
   127a8:	682a      	ldr	r2, [r5, #0]
   127aa:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   127ac:	9108      	str	r1, [sp, #32]
   127ae:	6a69      	ldr	r1, [r5, #36]	; 0x24
   127b0:	9107      	str	r1, [sp, #28]
   127b2:	6a29      	ldr	r1, [r5, #32]
   127b4:	9106      	str	r1, [sp, #24]
   127b6:	69e9      	ldr	r1, [r5, #28]
   127b8:	9105      	str	r1, [sp, #20]
   127ba:	69a9      	ldr	r1, [r5, #24]
   127bc:	9104      	str	r1, [sp, #16]
   127be:	6969      	ldr	r1, [r5, #20]
   127c0:	9103      	str	r1, [sp, #12]
   127c2:	6929      	ldr	r1, [r5, #16]
   127c4:	9102      	str	r1, [sp, #8]
   127c6:	68e9      	ldr	r1, [r5, #12]
   127c8:	9101      	str	r1, [sp, #4]
   127ca:	68a9      	ldr	r1, [r5, #8]
   127cc:	9100      	str	r1, [sp, #0]
   127ce:	4651      	mov	r1, sl
   127d0:	4648      	mov	r0, r9
   127d2:	f7f0 ff43 	bl	365c <print_formatted>
		break;
   127d6:	e756      	b.n	12686 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   127d8:	686b      	ldr	r3, [r5, #4]
   127da:	682a      	ldr	r2, [r5, #0]
   127dc:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   127de:	9109      	str	r1, [sp, #36]	; 0x24
   127e0:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   127e2:	9108      	str	r1, [sp, #32]
   127e4:	6a69      	ldr	r1, [r5, #36]	; 0x24
   127e6:	9107      	str	r1, [sp, #28]
   127e8:	6a29      	ldr	r1, [r5, #32]
   127ea:	9106      	str	r1, [sp, #24]
   127ec:	69e9      	ldr	r1, [r5, #28]
   127ee:	9105      	str	r1, [sp, #20]
   127f0:	69a9      	ldr	r1, [r5, #24]
   127f2:	9104      	str	r1, [sp, #16]
   127f4:	6969      	ldr	r1, [r5, #20]
   127f6:	9103      	str	r1, [sp, #12]
   127f8:	6929      	ldr	r1, [r5, #16]
   127fa:	9102      	str	r1, [sp, #8]
   127fc:	68e9      	ldr	r1, [r5, #12]
   127fe:	9101      	str	r1, [sp, #4]
   12800:	68a9      	ldr	r1, [r5, #8]
   12802:	9100      	str	r1, [sp, #0]
   12804:	4651      	mov	r1, sl
   12806:	4648      	mov	r0, r9
   12808:	f7f0 ff28 	bl	365c <print_formatted>
		break;
   1280c:	e73b      	b.n	12686 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   1280e:	686b      	ldr	r3, [r5, #4]
   12810:	682a      	ldr	r2, [r5, #0]
   12812:	6b29      	ldr	r1, [r5, #48]	; 0x30
   12814:	910a      	str	r1, [sp, #40]	; 0x28
   12816:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   12818:	9109      	str	r1, [sp, #36]	; 0x24
   1281a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   1281c:	9108      	str	r1, [sp, #32]
   1281e:	6a69      	ldr	r1, [r5, #36]	; 0x24
   12820:	9107      	str	r1, [sp, #28]
   12822:	6a29      	ldr	r1, [r5, #32]
   12824:	9106      	str	r1, [sp, #24]
   12826:	69e9      	ldr	r1, [r5, #28]
   12828:	9105      	str	r1, [sp, #20]
   1282a:	69a9      	ldr	r1, [r5, #24]
   1282c:	9104      	str	r1, [sp, #16]
   1282e:	6969      	ldr	r1, [r5, #20]
   12830:	9103      	str	r1, [sp, #12]
   12832:	6929      	ldr	r1, [r5, #16]
   12834:	9102      	str	r1, [sp, #8]
   12836:	68e9      	ldr	r1, [r5, #12]
   12838:	9101      	str	r1, [sp, #4]
   1283a:	68a9      	ldr	r1, [r5, #8]
   1283c:	9100      	str	r1, [sp, #0]
   1283e:	4651      	mov	r1, sl
   12840:	4648      	mov	r0, r9
   12842:	f7f0 ff0b 	bl	365c <print_formatted>
		break;
   12846:	e71e      	b.n	12686 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   12848:	686b      	ldr	r3, [r5, #4]
   1284a:	682a      	ldr	r2, [r5, #0]
   1284c:	6b69      	ldr	r1, [r5, #52]	; 0x34
   1284e:	910b      	str	r1, [sp, #44]	; 0x2c
   12850:	6b29      	ldr	r1, [r5, #48]	; 0x30
   12852:	910a      	str	r1, [sp, #40]	; 0x28
   12854:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   12856:	9109      	str	r1, [sp, #36]	; 0x24
   12858:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   1285a:	9108      	str	r1, [sp, #32]
   1285c:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1285e:	9107      	str	r1, [sp, #28]
   12860:	6a29      	ldr	r1, [r5, #32]
   12862:	9106      	str	r1, [sp, #24]
   12864:	69e9      	ldr	r1, [r5, #28]
   12866:	9105      	str	r1, [sp, #20]
   12868:	69a9      	ldr	r1, [r5, #24]
   1286a:	9104      	str	r1, [sp, #16]
   1286c:	6969      	ldr	r1, [r5, #20]
   1286e:	9103      	str	r1, [sp, #12]
   12870:	6929      	ldr	r1, [r5, #16]
   12872:	9102      	str	r1, [sp, #8]
   12874:	68e9      	ldr	r1, [r5, #12]
   12876:	9101      	str	r1, [sp, #4]
   12878:	68a9      	ldr	r1, [r5, #8]
   1287a:	9100      	str	r1, [sp, #0]
   1287c:	4651      	mov	r1, sl
   1287e:	4648      	mov	r0, r9
   12880:	f7f0 feec 	bl	365c <print_formatted>
		break;
   12884:	e6ff      	b.n	12686 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   12886:	686b      	ldr	r3, [r5, #4]
   12888:	682a      	ldr	r2, [r5, #0]
   1288a:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   1288c:	910c      	str	r1, [sp, #48]	; 0x30
   1288e:	6b69      	ldr	r1, [r5, #52]	; 0x34
   12890:	910b      	str	r1, [sp, #44]	; 0x2c
   12892:	6b29      	ldr	r1, [r5, #48]	; 0x30
   12894:	910a      	str	r1, [sp, #40]	; 0x28
   12896:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   12898:	9109      	str	r1, [sp, #36]	; 0x24
   1289a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   1289c:	9108      	str	r1, [sp, #32]
   1289e:	6a69      	ldr	r1, [r5, #36]	; 0x24
   128a0:	9107      	str	r1, [sp, #28]
   128a2:	6a29      	ldr	r1, [r5, #32]
   128a4:	9106      	str	r1, [sp, #24]
   128a6:	69e9      	ldr	r1, [r5, #28]
   128a8:	9105      	str	r1, [sp, #20]
   128aa:	69a9      	ldr	r1, [r5, #24]
   128ac:	9104      	str	r1, [sp, #16]
   128ae:	6969      	ldr	r1, [r5, #20]
   128b0:	9103      	str	r1, [sp, #12]
   128b2:	6929      	ldr	r1, [r5, #16]
   128b4:	9102      	str	r1, [sp, #8]
   128b6:	68e9      	ldr	r1, [r5, #12]
   128b8:	9101      	str	r1, [sp, #4]
   128ba:	68a9      	ldr	r1, [r5, #8]
   128bc:	9100      	str	r1, [sp, #0]
   128be:	4651      	mov	r1, sl
   128c0:	4648      	mov	r0, r9
   128c2:	f7f0 fecb 	bl	365c <print_formatted>
}
   128c6:	e6de      	b.n	12686 <std_print+0x74>

000128c8 <log_output_flush>:
{
   128c8:	b510      	push	{r4, lr}
   128ca:	4604      	mov	r4, r0
		     output->control_block->offset,
   128cc:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   128ce:	6853      	ldr	r3, [r2, #4]
   128d0:	6812      	ldr	r2, [r2, #0]
   128d2:	6881      	ldr	r1, [r0, #8]
   128d4:	6800      	ldr	r0, [r0, #0]
   128d6:	f7ff fe50 	bl	1257a <buffer_write>
	output->control_block->offset = 0;
   128da:	6863      	ldr	r3, [r4, #4]
   128dc:	2200      	movs	r2, #0
   128de:	601a      	str	r2, [r3, #0]
}
   128e0:	bd10      	pop	{r4, pc}

000128e2 <out_func>:
{
   128e2:	b538      	push	{r3, r4, r5, lr}
   128e4:	4605      	mov	r5, r0
   128e6:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   128e8:	684b      	ldr	r3, [r1, #4]
   128ea:	681a      	ldr	r2, [r3, #0]
   128ec:	68cb      	ldr	r3, [r1, #12]
   128ee:	429a      	cmp	r2, r3
   128f0:	d00f      	beq.n	12912 <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
   128f2:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   128f4:	f3bf 8f5b 	dmb	ish
   128f8:	e853 2f00 	ldrex	r2, [r3]
   128fc:	1c51      	adds	r1, r2, #1
   128fe:	e843 1000 	strex	r0, r1, [r3]
   12902:	2800      	cmp	r0, #0
   12904:	d1f8      	bne.n	128f8 <out_func+0x16>
   12906:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   1290a:	68a3      	ldr	r3, [r4, #8]
   1290c:	549d      	strb	r5, [r3, r2]
}
   1290e:	2000      	movs	r0, #0
   12910:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
   12912:	4608      	mov	r0, r1
   12914:	f7ff ffd8 	bl	128c8 <log_output_flush>
   12918:	e7eb      	b.n	128f2 <out_func+0x10>

0001291a <log_output_msg_process>:
{
   1291a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1291c:	b085      	sub	sp, #20
   1291e:	4606      	mov	r6, r0
   12920:	460c      	mov	r4, r1
   12922:	4617      	mov	r7, r2
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   12924:	7a0b      	ldrb	r3, [r1, #8]
   12926:	f083 0301 	eor.w	r3, r3, #1
   1292a:	f003 0201 	and.w	r2, r3, #1
	return msg->hdr.timestamp;
   1292e:	68cb      	ldr	r3, [r1, #12]
	return msg->hdr.ids.level;
   12930:	7a89      	ldrb	r1, [r1, #10]
	return msg->hdr.ids.domain_id;
   12932:	f3c1 0cc2 	ubfx	ip, r1, #3, #3
	return msg->hdr.ids.source_id;
   12936:	8960      	ldrh	r0, [r4, #10]
	int16_t source_id = (int16_t)log_msg_source_id_get(msg);
   12938:	f3c0 1089 	ubfx	r0, r0, #6, #10
			0 : prefix_print(output, flags, std_msg, timestamp,
   1293c:	f011 0507 	ands.w	r5, r1, #7
   12940:	d10f      	bne.n	12962 <log_output_msg_process+0x48>
   12942:	2200      	movs	r2, #0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   12944:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg)) {
   12946:	f013 0f01 	tst.w	r3, #1
   1294a:	d014      	beq.n	12976 <log_output_msg_process+0x5c>
	} else if (raw_string) {
   1294c:	b9c5      	cbnz	r5, 12980 <log_output_msg_process+0x66>
		raw_string_print(msg, output);
   1294e:	4631      	mov	r1, r6
   12950:	4620      	mov	r0, r4
   12952:	f7f0 ffc3 	bl	38dc <raw_string_print>
	if (!raw_string) {
   12956:	b9cd      	cbnz	r5, 1298c <log_output_msg_process+0x72>
	log_output_flush(output);
   12958:	4630      	mov	r0, r6
   1295a:	f7ff ffb5 	bl	128c8 <log_output_flush>
}
   1295e:	b005      	add	sp, #20
   12960:	bdf0      	pop	{r4, r5, r6, r7, pc}
			0 : prefix_print(output, flags, std_msg, timestamp,
   12962:	9002      	str	r0, [sp, #8]
   12964:	f8cd c004 	str.w	ip, [sp, #4]
   12968:	9500      	str	r5, [sp, #0]
   1296a:	4639      	mov	r1, r7
   1296c:	4630      	mov	r0, r6
   1296e:	f7ff fe29 	bl	125c4 <prefix_print>
   12972:	4602      	mov	r2, r0
   12974:	e7e6      	b.n	12944 <log_output_msg_process+0x2a>
		std_print(msg, output);
   12976:	4631      	mov	r1, r6
   12978:	4620      	mov	r0, r4
   1297a:	f7ff fe4a 	bl	12612 <std_print>
   1297e:	e7ea      	b.n	12956 <log_output_msg_process+0x3c>
		hexdump_print(msg, output, prefix_offset, flags);
   12980:	463b      	mov	r3, r7
   12982:	4631      	mov	r1, r6
   12984:	4620      	mov	r0, r4
   12986:	f7f0 ff7f 	bl	3888 <hexdump_print>
   1298a:	e7e4      	b.n	12956 <log_output_msg_process+0x3c>
		postfix_print(output, flags, level);
   1298c:	462a      	mov	r2, r5
   1298e:	4639      	mov	r1, r7
   12990:	4630      	mov	r0, r6
   12992:	f7ff fe0b 	bl	125ac <postfix_print>
   12996:	e7df      	b.n	12958 <log_output_msg_process+0x3e>

00012998 <usb_get_status>:
	uint8_t *data = *data_buf;
   12998:	6813      	ldr	r3, [r2, #0]
	data[1] = 0U;
   1299a:	2200      	movs	r2, #0
   1299c:	705a      	strb	r2, [r3, #1]
		data[0] |= USB_GET_STATUS_SELF_POWERED;
   1299e:	2001      	movs	r0, #1
   129a0:	7018      	strb	r0, [r3, #0]
	*len = 2;
   129a2:	2302      	movs	r3, #2
   129a4:	600b      	str	r3, [r1, #0]
}
   129a6:	4770      	bx	lr

000129a8 <usb_vbus_set>:
}
   129a8:	2000      	movs	r0, #0
   129aa:	4770      	bx	lr

000129ac <usb_eps_reconfigure>:
{
   129ac:	b508      	push	{r3, lr}
	if (cur_alt_setting != alt_setting) {
   129ae:	4291      	cmp	r1, r2
   129b0:	d002      	beq.n	129b8 <usb_eps_reconfigure+0xc>
		ret = reset_endpoint(ep_desc);
   129b2:	f7f1 fb9b 	bl	40ec <reset_endpoint>
}
   129b6:	bd08      	pop	{r3, pc}
		ret = set_endpoint(ep_desc);
   129b8:	f7f1 fabc 	bl	3f34 <set_endpoint>
   129bc:	e7fb      	b.n	129b6 <usb_eps_reconfigure+0xa>

000129be <usb_handle_std_interface_req>:
{
   129be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   129c0:	4604      	mov	r4, r0
   129c2:	460e      	mov	r6, r1
   129c4:	4615      	mov	r5, r2
	uint8_t *data = *data_buf;
   129c6:	6817      	ldr	r7, [r2, #0]
	if (!is_device_configured() ||
   129c8:	f7f1 f95a 	bl	3c80 <is_device_configured>
   129cc:	b900      	cbnz	r0, 129d0 <usb_handle_std_interface_req+0x12>
}
   129ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
   129d0:	7920      	ldrb	r0, [r4, #4]
   129d2:	f7f1 f95f 	bl	3c94 <is_interface_valid>
	if (!is_device_configured() ||
   129d6:	2800      	cmp	r0, #0
   129d8:	d0f9      	beq.n	129ce <usb_handle_std_interface_req+0x10>
	if (usb_reqtype_is_to_host(setup)) {
   129da:	f994 3000 	ldrsb.w	r3, [r4]
   129de:	2b00      	cmp	r3, #0
   129e0:	db04      	blt.n	129ec <usb_handle_std_interface_req+0x2e>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
   129e2:	7863      	ldrb	r3, [r4, #1]
   129e4:	2b0b      	cmp	r3, #11
   129e6:	d013      	beq.n	12a10 <usb_handle_std_interface_req+0x52>
	return false;
   129e8:	2000      	movs	r0, #0
   129ea:	e7f0      	b.n	129ce <usb_handle_std_interface_req+0x10>
		switch (setup->bRequest) {
   129ec:	7863      	ldrb	r3, [r4, #1]
   129ee:	b11b      	cbz	r3, 129f8 <usb_handle_std_interface_req+0x3a>
   129f0:	2b0a      	cmp	r3, #10
   129f2:	d007      	beq.n	12a04 <usb_handle_std_interface_req+0x46>
   129f4:	2000      	movs	r0, #0
   129f6:	e7ea      	b.n	129ce <usb_handle_std_interface_req+0x10>
			data[0] = 0U;
   129f8:	2300      	movs	r3, #0
   129fa:	703b      	strb	r3, [r7, #0]
			data[1] = 0U;
   129fc:	707b      	strb	r3, [r7, #1]
			*len = 2;
   129fe:	2302      	movs	r3, #2
   12a00:	6033      	str	r3, [r6, #0]
			return true;
   12a02:	e7e4      	b.n	129ce <usb_handle_std_interface_req+0x10>
			return usb_get_interface(setup, len, data_buf);
   12a04:	462a      	mov	r2, r5
   12a06:	4631      	mov	r1, r6
   12a08:	4620      	mov	r0, r4
   12a0a:	f7f1 f91b 	bl	3c44 <usb_get_interface>
   12a0e:	e7de      	b.n	129ce <usb_handle_std_interface_req+0x10>
			return usb_set_interface(setup);
   12a10:	4620      	mov	r0, r4
   12a12:	f7f1 fb95 	bl	4140 <usb_set_interface>
   12a16:	e7da      	b.n	129ce <usb_handle_std_interface_req+0x10>

00012a18 <disable_interface_ep>:
{
   12a18:	b508      	push	{r3, lr}
	return usb_dc_ep_disable(ep_data->ep_addr);
   12a1a:	7900      	ldrb	r0, [r0, #4]
   12a1c:	f7f5 fd66 	bl	84ec <usb_dc_ep_disable>
}
   12a20:	bd08      	pop	{r3, pc}

00012a22 <usb_get_status_endpoint>:
{
   12a22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12a24:	460e      	mov	r6, r1
	uint8_t ep = setup->wIndex;
   12a26:	7904      	ldrb	r4, [r0, #4]
	uint8_t *data = *data_buf;
   12a28:	6817      	ldr	r7, [r2, #0]
	if (!is_ep_valid(ep)) {
   12a2a:	4620      	mov	r0, r4
   12a2c:	f7f1 f944 	bl	3cb8 <is_ep_valid>
   12a30:	4605      	mov	r5, r0
   12a32:	b130      	cbz	r0, 12a42 <usb_get_status_endpoint+0x20>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   12a34:	f034 0380 	bics.w	r3, r4, #128	; 0x80
   12a38:	d005      	beq.n	12a46 <usb_get_status_endpoint+0x24>
   12a3a:	f7f1 f921 	bl	3c80 <is_device_configured>
   12a3e:	b910      	cbnz	r0, 12a46 <usb_get_status_endpoint+0x24>
	return false;
   12a40:	4605      	mov	r5, r0
}
   12a42:	4628      	mov	r0, r5
   12a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_dc_ep_is_stalled(ep, &data[0]);
   12a46:	4639      	mov	r1, r7
   12a48:	4620      	mov	r0, r4
   12a4a:	f7f5 fcfd 	bl	8448 <usb_dc_ep_is_stalled>
		data[1] = 0U;
   12a4e:	2300      	movs	r3, #0
   12a50:	707b      	strb	r3, [r7, #1]
		*len = 2;
   12a52:	2302      	movs	r3, #2
   12a54:	6033      	str	r3, [r6, #0]
		return true;
   12a56:	e7f4      	b.n	12a42 <usb_get_status_endpoint+0x20>

00012a58 <usb_handle_std_endpoint_req>:
{
   12a58:	b508      	push	{r3, lr}
	if (usb_reqtype_is_to_host(setup)) {
   12a5a:	f990 3000 	ldrsb.w	r3, [r0]
   12a5e:	2b00      	cmp	r3, #0
   12a60:	db06      	blt.n	12a70 <usb_handle_std_endpoint_req+0x18>
		switch (setup->bRequest) {
   12a62:	7843      	ldrb	r3, [r0, #1]
   12a64:	2b01      	cmp	r3, #1
   12a66:	d00a      	beq.n	12a7e <usb_handle_std_endpoint_req+0x26>
   12a68:	2b03      	cmp	r3, #3
   12a6a:	d010      	beq.n	12a8e <usb_handle_std_endpoint_req+0x36>
   12a6c:	2000      	movs	r0, #0
   12a6e:	e002      	b.n	12a76 <usb_handle_std_endpoint_req+0x1e>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
   12a70:	7843      	ldrb	r3, [r0, #1]
   12a72:	b10b      	cbz	r3, 12a78 <usb_handle_std_endpoint_req+0x20>
	return false;
   12a74:	2000      	movs	r0, #0
}
   12a76:	bd08      	pop	{r3, pc}
			return usb_get_status_endpoint(setup, len, data_buf);
   12a78:	f7ff ffd3 	bl	12a22 <usb_get_status_endpoint>
   12a7c:	e7fb      	b.n	12a76 <usb_handle_std_endpoint_req+0x1e>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   12a7e:	8843      	ldrh	r3, [r0, #2]
   12a80:	b10b      	cbz	r3, 12a86 <usb_handle_std_endpoint_req+0x2e>
	return false;
   12a82:	2000      	movs	r0, #0
   12a84:	e7f7      	b.n	12a76 <usb_handle_std_endpoint_req+0x1e>
				return usb_halt_endpoint_req(setup, false);
   12a86:	2100      	movs	r1, #0
   12a88:	f7f1 fa24 	bl	3ed4 <usb_halt_endpoint_req>
   12a8c:	e7f3      	b.n	12a76 <usb_handle_std_endpoint_req+0x1e>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   12a8e:	8843      	ldrh	r3, [r0, #2]
   12a90:	b10b      	cbz	r3, 12a96 <usb_handle_std_endpoint_req+0x3e>
	return false;
   12a92:	2000      	movs	r0, #0
   12a94:	e7ef      	b.n	12a76 <usb_handle_std_endpoint_req+0x1e>
				return usb_halt_endpoint_req(setup, true);
   12a96:	2101      	movs	r1, #1
   12a98:	f7f1 fa1c 	bl	3ed4 <usb_halt_endpoint_req>
   12a9c:	e7eb      	b.n	12a76 <usb_handle_std_endpoint_req+0x1e>

00012a9e <usb_write>:
{
   12a9e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12aa2:	4681      	mov	r9, r0
   12aa4:	4688      	mov	r8, r1
   12aa6:	4617      	mov	r7, r2
   12aa8:	461e      	mov	r6, r3
	int tries = CONFIG_USB_NUMOF_EP_WRITE_RETRIES;
   12aaa:	2503      	movs	r5, #3
   12aac:	e000      	b.n	12ab0 <usb_write+0x12>
	} while (ret == -EAGAIN && tries--);
   12aae:	461d      	mov	r5, r3
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   12ab0:	4633      	mov	r3, r6
   12ab2:	463a      	mov	r2, r7
   12ab4:	4641      	mov	r1, r8
   12ab6:	4648      	mov	r0, r9
   12ab8:	f7f5 fd42 	bl	8540 <usb_dc_ep_write>
   12abc:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
   12abe:	f110 0f0b 	cmn.w	r0, #11
   12ac2:	d008      	beq.n	12ad6 <usb_write+0x38>
	} while (ret == -EAGAIN && tries--);
   12ac4:	f114 0f0b 	cmn.w	r4, #11
   12ac8:	d102      	bne.n	12ad0 <usb_write+0x32>
   12aca:	1e6b      	subs	r3, r5, #1
   12acc:	2d00      	cmp	r5, #0
   12ace:	d1ee      	bne.n	12aae <usb_write+0x10>
}
   12ad0:	4620      	mov	r0, r4
   12ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_impl_k_yield();
   12ad6:	f7fd fee5 	bl	108a4 <z_impl_k_yield>
}
   12ada:	e7f3      	b.n	12ac4 <usb_write+0x26>

00012adc <ascii7_to_utf16le>:
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
   12adc:	f810 2b02 	ldrb.w	r2, [r0], #2
   12ae0:	1ed3      	subs	r3, r2, #3
	int ascii_idx_max = USB_BSTRING_ASCII_IDX_MAX(str_descr->bLength);
   12ae2:	0852      	lsrs	r2, r2, #1
   12ae4:	3a02      	subs	r2, #2
	for (int i = idx_max; i >= 0; i -= 2) {
   12ae6:	2b00      	cmp	r3, #0
   12ae8:	db0b      	blt.n	12b02 <ascii7_to_utf16le+0x26>
{
   12aea:	b410      	push	{r4}
		buf[i] = 0U;
   12aec:	2100      	movs	r1, #0
   12aee:	54c1      	strb	r1, [r0, r3]
		buf[i - 1] = buf[ascii_idx_max--];
   12af0:	1e59      	subs	r1, r3, #1
   12af2:	5c84      	ldrb	r4, [r0, r2]
   12af4:	5444      	strb	r4, [r0, r1]
	for (int i = idx_max; i >= 0; i -= 2) {
   12af6:	3b02      	subs	r3, #2
		buf[i - 1] = buf[ascii_idx_max--];
   12af8:	3a01      	subs	r2, #1
	for (int i = idx_max; i >= 0; i -= 2) {
   12afa:	2b00      	cmp	r3, #0
   12afc:	daf6      	bge.n	12aec <ascii7_to_utf16le+0x10>
}
   12afe:	bc10      	pop	{r4}
   12b00:	4770      	bx	lr
   12b02:	4770      	bx	lr

00012b04 <usb_validate_ep_cfg_data>:
{
   12b04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12b08:	b083      	sub	sp, #12
   12b0a:	4605      	mov	r5, r0
   12b0c:	4689      	mov	r9, r1
   12b0e:	4690      	mov	r8, r2
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   12b10:	2700      	movs	r7, #0
   12b12:	e04a      	b.n	12baa <usb_validate_ep_cfg_data+0xa6>
				if ((*requested_ep & (1U << (idx + 16U)))) {
   12b14:	f8d8 2000 	ldr.w	r2, [r8]
   12b18:	f104 0110 	add.w	r1, r4, #16
   12b1c:	2301      	movs	r3, #1
   12b1e:	408b      	lsls	r3, r1
   12b20:	421a      	tst	r2, r3
   12b22:	d108      	bne.n	12b36 <usb_validate_ep_cfg_data+0x32>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
   12b24:	f064 037f 	orn	r3, r4, #127	; 0x7f
   12b28:	f88d 3000 	strb.w	r3, [sp]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
   12b2c:	4668      	mov	r0, sp
   12b2e:	f7f5 fb9d 	bl	826c <usb_dc_ep_check_cap>
   12b32:	4603      	mov	r3, r0
   12b34:	b1d0      	cbz	r0, 12b6c <usb_validate_ep_cfg_data+0x68>
		for (uint8_t idx = 1; idx < 16U; idx++) {
   12b36:	3401      	adds	r4, #1
   12b38:	b2e4      	uxtb	r4, r4
   12b3a:	2c0f      	cmp	r4, #15
   12b3c:	d834      	bhi.n	12ba8 <usb_validate_ep_cfg_data+0xa4>
			ep_cfg.ep_type = (ep_descr->bmAttributes &
   12b3e:	78eb      	ldrb	r3, [r5, #3]
   12b40:	f003 0303 	and.w	r3, r3, #3
   12b44:	f88d 3004 	strb.w	r3, [sp, #4]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
   12b48:	88ab      	ldrh	r3, [r5, #4]
   12b4a:	f8ad 3002 	strh.w	r3, [sp, #2]
			ep_cfg.ep_addr = ep_descr->bEndpointAddress;
   12b4e:	78ab      	ldrb	r3, [r5, #2]
   12b50:	f88d 3000 	strb.w	r3, [sp]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   12b54:	f013 0f80 	tst.w	r3, #128	; 0x80
   12b58:	d1dc      	bne.n	12b14 <usb_validate_ep_cfg_data+0x10>
				if ((*requested_ep & (1U << (idx)))) {
   12b5a:	f8d8 2000 	ldr.w	r2, [r8]
   12b5e:	2301      	movs	r3, #1
   12b60:	40a3      	lsls	r3, r4
   12b62:	421a      	tst	r2, r3
   12b64:	d1e7      	bne.n	12b36 <usb_validate_ep_cfg_data+0x32>
				ep_cfg.ep_addr = idx;
   12b66:	f88d 4000 	strb.w	r4, [sp]
   12b6a:	e7df      	b.n	12b2c <usb_validate_ep_cfg_data+0x28>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
   12b6c:	f89d 2000 	ldrb.w	r2, [sp]
   12b70:	70aa      	strb	r2, [r5, #2]
				ep_data[i].ep_addr = ep_cfg.ep_addr;
   12b72:	7132      	strb	r2, [r6, #4]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   12b74:	f012 0f80 	tst.w	r2, #128	; 0x80
   12b78:	d10b      	bne.n	12b92 <usb_validate_ep_cfg_data+0x8e>
					*requested_ep |= (1U << idx);
   12b7a:	2201      	movs	r2, #1
   12b7c:	fa02 f404 	lsl.w	r4, r2, r4
   12b80:	f8d8 2000 	ldr.w	r2, [r8]
   12b84:	4322      	orrs	r2, r4
   12b86:	f8c8 2000 	str.w	r2, [r8]
}
   12b8a:	4618      	mov	r0, r3
   12b8c:	b003      	add	sp, #12
   12b8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					*requested_ep |= (1U << (idx + 16U));
   12b92:	f104 0110 	add.w	r1, r4, #16
   12b96:	2201      	movs	r2, #1
   12b98:	fa02 f101 	lsl.w	r1, r2, r1
   12b9c:	f8d8 2000 	ldr.w	r2, [r8]
   12ba0:	430a      	orrs	r2, r1
   12ba2:	f8c8 2000 	str.w	r2, [r8]
   12ba6:	e7f0      	b.n	12b8a <usb_validate_ep_cfg_data+0x86>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   12ba8:	3701      	adds	r7, #1
   12baa:	f899 301c 	ldrb.w	r3, [r9, #28]
   12bae:	429f      	cmp	r7, r3
   12bb0:	d209      	bcs.n	12bc6 <usb_validate_ep_cfg_data+0xc2>
		struct usb_ep_cfg_data *ep_data = cfg_data->endpoint;
   12bb2:	f8d9 6020 	ldr.w	r6, [r9, #32]
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
   12bb6:	78aa      	ldrb	r2, [r5, #2]
   12bb8:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
   12bbc:	7933      	ldrb	r3, [r6, #4]
   12bbe:	429a      	cmp	r2, r3
   12bc0:	d1f2      	bne.n	12ba8 <usb_validate_ep_cfg_data+0xa4>
		for (uint8_t idx = 1; idx < 16U; idx++) {
   12bc2:	2401      	movs	r4, #1
   12bc4:	e7b9      	b.n	12b3a <usb_validate_ep_cfg_data+0x36>
	return -1;
   12bc6:	f04f 33ff 	mov.w	r3, #4294967295
   12bca:	e7de      	b.n	12b8a <usb_validate_ep_cfg_data+0x86>

00012bcc <usb_get_dev_data_by_cfg>:
	return list->head;
   12bcc:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   12bce:	b110      	cbz	r0, 12bd6 <usb_get_dev_data_by_cfg+0xa>
   12bd0:	3804      	subs	r0, #4
   12bd2:	e000      	b.n	12bd6 <usb_get_dev_data_by_cfg+0xa>
   12bd4:	3804      	subs	r0, #4
   12bd6:	b140      	cbz	r0, 12bea <usb_get_dev_data_by_cfg+0x1e>
		const struct device *dev = dev_data->dev;
   12bd8:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg_cur = dev->config;
   12bda:	685b      	ldr	r3, [r3, #4]

		if (cfg_cur == cfg) {
   12bdc:	428b      	cmp	r3, r1
   12bde:	d004      	beq.n	12bea <usb_get_dev_data_by_cfg+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   12be0:	1d03      	adds	r3, r0, #4
   12be2:	d003      	beq.n	12bec <usb_get_dev_data_by_cfg+0x20>
	return node->next;
   12be4:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   12be6:	2800      	cmp	r0, #0
   12be8:	d1f4      	bne.n	12bd4 <usb_get_dev_data_by_cfg+0x8>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
   12bea:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   12bec:	4618      	mov	r0, r3
   12bee:	e7f2      	b.n	12bd6 <usb_get_dev_data_by_cfg+0xa>

00012bf0 <usb_get_dev_data_by_iface>:
	return list->head;
   12bf0:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   12bf2:	b110      	cbz	r0, 12bfa <usb_get_dev_data_by_iface+0xa>
   12bf4:	3804      	subs	r0, #4
   12bf6:	e000      	b.n	12bfa <usb_get_dev_data_by_iface+0xa>
   12bf8:	3804      	subs	r0, #4
   12bfa:	b150      	cbz	r0, 12c12 <usb_get_dev_data_by_iface+0x22>
		const struct device *dev = dev_data->dev;
   12bfc:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg = dev->config;
   12bfe:	685b      	ldr	r3, [r3, #4]
		const struct usb_if_descriptor *if_desc =
   12c00:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
   12c02:	789b      	ldrb	r3, [r3, #2]
   12c04:	428b      	cmp	r3, r1
   12c06:	d004      	beq.n	12c12 <usb_get_dev_data_by_iface+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   12c08:	1d03      	adds	r3, r0, #4
   12c0a:	d003      	beq.n	12c14 <usb_get_dev_data_by_iface+0x24>
	return node->next;
   12c0c:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   12c0e:	2800      	cmp	r0, #0
   12c10:	d1f2      	bne.n	12bf8 <usb_get_dev_data_by_iface+0x8>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
   12c12:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   12c14:	4618      	mov	r0, r3
   12c16:	e7f0      	b.n	12bfa <usb_get_dev_data_by_iface+0xa>

00012c18 <usb_get_dev_data_by_ep>:
	return list->head;
   12c18:	6800      	ldr	r0, [r0, #0]

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   12c1a:	b100      	cbz	r0, 12c1e <usb_get_dev_data_by_ep+0x6>
   12c1c:	3804      	subs	r0, #4
   12c1e:	b1d0      	cbz	r0, 12c56 <usb_get_dev_data_by_ep+0x3e>
{
   12c20:	b430      	push	{r4, r5}
   12c22:	e005      	b.n	12c30 <usb_get_dev_data_by_ep+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   12c24:	1d03      	adds	r3, r0, #4
   12c26:	d012      	beq.n	12c4e <usb_get_dev_data_by_ep+0x36>
	return node->next;
   12c28:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   12c2a:	b190      	cbz	r0, 12c52 <usb_get_dev_data_by_ep+0x3a>
   12c2c:	3804      	subs	r0, #4
   12c2e:	b180      	cbz	r0, 12c52 <usb_get_dev_data_by_ep+0x3a>
		const struct device *dev = dev_data->dev;
   12c30:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg = dev->config;
   12c32:	685c      	ldr	r4, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
   12c34:	6a25      	ldr	r5, [r4, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   12c36:	2300      	movs	r3, #0
   12c38:	7f22      	ldrb	r2, [r4, #28]
   12c3a:	429a      	cmp	r2, r3
   12c3c:	d9f2      	bls.n	12c24 <usb_get_dev_data_by_ep+0xc>
			if (ep_data[i].ep_addr == ep) {
   12c3e:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
   12c42:	7912      	ldrb	r2, [r2, #4]
   12c44:	428a      	cmp	r2, r1
   12c46:	d004      	beq.n	12c52 <usb_get_dev_data_by_ep+0x3a>
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   12c48:	3301      	adds	r3, #1
   12c4a:	b2db      	uxtb	r3, r3
   12c4c:	e7f4      	b.n	12c38 <usb_get_dev_data_by_ep+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   12c4e:	4618      	mov	r0, r3
   12c50:	e7ed      	b.n	12c2e <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
   12c52:	bc30      	pop	{r4, r5}
   12c54:	4770      	bx	lr
   12c56:	4770      	bx	lr

00012c58 <usb_transfer_is_busy>:
{
   12c58:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
   12c5a:	f7f1 fe5b 	bl	4914 <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
   12c5e:	b128      	cbz	r0, 12c6c <usb_transfer_is_busy+0x14>
   12c60:	6843      	ldr	r3, [r0, #4]
   12c62:	f113 0f10 	cmn.w	r3, #16
   12c66:	d003      	beq.n	12c70 <usb_transfer_is_busy+0x18>
	return false;
   12c68:	2000      	movs	r0, #0
}
   12c6a:	bd08      	pop	{r3, pc}
	return false;
   12c6c:	2000      	movs	r0, #0
   12c6e:	e7fc      	b.n	12c6a <usb_transfer_is_busy+0x12>
		return true;
   12c70:	2001      	movs	r0, #1
   12c72:	e7fa      	b.n	12c6a <usb_transfer_is_busy+0x12>

00012c74 <cdc_interface_config>:
	desc->if0.bInterfaceNumber = bInterfaceNumber;
   12c74:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
   12c76:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
   12c78:	1c4b      	adds	r3, r1, #1
   12c7a:	b2db      	uxtb	r3, r3
   12c7c:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
   12c80:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
   12c82:	f800 1c06 	strb.w	r1, [r0, #-6]
}
   12c86:	4770      	bx	lr

00012c88 <cdc_acm_irq_callback_work_handler>:
{
   12c88:	b508      	push	{r3, lr}
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
   12c8a:	f850 3c08 	ldr.w	r3, [r0, #-8]
   12c8e:	f850 1c04 	ldr.w	r1, [r0, #-4]
   12c92:	6f80      	ldr	r0, [r0, #120]	; 0x78
   12c94:	4798      	blx	r3
}
   12c96:	bd08      	pop	{r3, pc}

00012c98 <cdc_acm_irq_tx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   12c98:	6903      	ldr	r3, [r0, #16]
	dev_data->tx_irq_ena = false;
   12c9a:	2200      	movs	r2, #0
   12c9c:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
   12ca0:	4770      	bx	lr

00012ca2 <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   12ca2:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
   12ca4:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
   12ca8:	b122      	cbz	r2, 12cb4 <cdc_acm_irq_tx_ready+0x12>
   12caa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   12cae:	b91b      	cbnz	r3, 12cb8 <cdc_acm_irq_tx_ready+0x16>
	return 0;
   12cb0:	2000      	movs	r0, #0
   12cb2:	4770      	bx	lr
   12cb4:	2000      	movs	r0, #0
   12cb6:	4770      	bx	lr
		return 1;
   12cb8:	2001      	movs	r0, #1
}
   12cba:	4770      	bx	lr

00012cbc <cdc_acm_irq_rx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   12cbc:	6903      	ldr	r3, [r0, #16]
	dev_data->rx_irq_ena = false;
   12cbe:	2200      	movs	r2, #0
   12cc0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
   12cc4:	4770      	bx	lr

00012cc6 <cdc_acm_irq_rx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   12cc6:	6903      	ldr	r3, [r0, #16]
	if (dev_data->rx_ready) {
   12cc8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
   12ccc:	b90b      	cbnz	r3, 12cd2 <cdc_acm_irq_rx_ready+0xc>
	return 0;
   12cce:	2000      	movs	r0, #0
   12cd0:	4770      	bx	lr
		return 1;
   12cd2:	2001      	movs	r0, #1
}
   12cd4:	4770      	bx	lr

00012cd6 <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   12cd6:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
   12cd8:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   12cdc:	b112      	cbz	r2, 12ce4 <cdc_acm_irq_is_pending+0xe>
   12cde:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
   12ce2:	b93a      	cbnz	r2, 12cf4 <cdc_acm_irq_is_pending+0x1e>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
   12ce4:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
   12ce8:	b132      	cbz	r2, 12cf8 <cdc_acm_irq_is_pending+0x22>
   12cea:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
   12cee:	b92b      	cbnz	r3, 12cfc <cdc_acm_irq_is_pending+0x26>
		return 0;
   12cf0:	2000      	movs	r0, #0
   12cf2:	4770      	bx	lr
		return 1;
   12cf4:	2001      	movs	r0, #1
   12cf6:	4770      	bx	lr
		return 0;
   12cf8:	2000      	movs	r0, #0
   12cfa:	4770      	bx	lr
		return 1;
   12cfc:	2001      	movs	r0, #1
}
   12cfe:	4770      	bx	lr

00012d00 <cdc_acm_irq_update>:
}
   12d00:	2001      	movs	r0, #1
   12d02:	4770      	bx	lr

00012d04 <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   12d04:	6903      	ldr	r3, [r0, #16]
	dev_data->cb = cb;
   12d06:	6019      	str	r1, [r3, #0]
	dev_data->cb_data = cb_data;
   12d08:	605a      	str	r2, [r3, #4]
}
   12d0a:	4770      	bx	lr

00012d0c <cdc_acm_baudrate_set>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   12d0c:	6903      	ldr	r3, [r0, #16]
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
   12d0e:	6759      	str	r1, [r3, #116]	; 0x74
}
   12d10:	4770      	bx	lr

00012d12 <cdc_acm_line_ctrl_get>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   12d12:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
   12d14:	2902      	cmp	r1, #2
   12d16:	d00a      	beq.n	12d2e <cdc_acm_line_ctrl_get+0x1c>
   12d18:	2904      	cmp	r1, #4
   12d1a:	d00f      	beq.n	12d3c <cdc_acm_line_ctrl_get+0x2a>
   12d1c:	2901      	cmp	r1, #1
   12d1e:	d002      	beq.n	12d26 <cdc_acm_line_ctrl_get+0x14>
   12d20:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   12d24:	4770      	bx	lr
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
   12d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   12d28:	6013      	str	r3, [r2, #0]
		return 0;
   12d2a:	2000      	movs	r0, #0
   12d2c:	4770      	bx	lr
		*val = (dev_data->line_state &
   12d2e:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
   12d32:	f3c3 0340 	ubfx	r3, r3, #1, #1
		*val = (dev_data->line_state &
   12d36:	6013      	str	r3, [r2, #0]
		return 0;
   12d38:	2000      	movs	r0, #0
   12d3a:	4770      	bx	lr
		*val = (dev_data->line_state &
   12d3c:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
   12d40:	f003 0301 	and.w	r3, r3, #1
		*val = (dev_data->line_state &
   12d44:	6013      	str	r3, [r2, #0]
		return 0;
   12d46:	2000      	movs	r0, #0
   12d48:	4770      	bx	lr

00012d4a <cdc_acm_line_ctrl_set>:
{
   12d4a:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   12d4c:	6904      	ldr	r4, [r0, #16]
	switch (ctrl) {
   12d4e:	2940      	cmp	r1, #64	; 0x40
   12d50:	f000 8081 	beq.w	12e56 <cdc_acm_line_ctrl_set+0x10c>
   12d54:	d81b      	bhi.n	12d8e <cdc_acm_line_ctrl_set+0x44>
   12d56:	2920      	cmp	r1, #32
   12d58:	f200 809f 	bhi.w	12e9a <cdc_acm_line_ctrl_set+0x150>
   12d5c:	2900      	cmp	r1, #0
   12d5e:	f000 809f 	beq.w	12ea0 <cdc_acm_line_ctrl_set+0x156>
   12d62:	1e4b      	subs	r3, r1, #1
   12d64:	2b1f      	cmp	r3, #31
   12d66:	f200 809e 	bhi.w	12ea6 <cdc_acm_line_ctrl_set+0x15c>
   12d6a:	e8df f003 	tbb	[pc, r3]
   12d6e:	9c3d      	.short	0x9c3d
   12d70:	9c9c9c9c 	.word	0x9c9c9c9c
   12d74:	9c9c429c 	.word	0x9c9c429c
   12d78:	9c9c9c9c 	.word	0x9c9c9c9c
   12d7c:	9c9c529c 	.word	0x9c9c529c
   12d80:	9c9c9c9c 	.word	0x9c9c9c9c
   12d84:	9c9c9c9c 	.word	0x9c9c9c9c
   12d88:	9c9c9c9c 	.word	0x9c9c9c9c
   12d8c:	639c      	.short	0x639c
   12d8e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   12d92:	d071      	beq.n	12e78 <cdc_acm_line_ctrl_set+0x12e>
   12d94:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   12d98:	d110      	bne.n	12dbc <cdc_acm_line_ctrl_set+0x72>
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
   12d9a:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   12d9e:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
   12da2:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   12da6:	b11a      	cbz	r2, 12db0 <cdc_acm_line_ctrl_set+0x66>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
   12da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   12dac:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   12db0:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
   12db4:	f7f2 f9ec 	bl	5190 <cdc_acm_send_notification>
		return 0;
   12db8:	2000      	movs	r0, #0
   12dba:	e019      	b.n	12df0 <cdc_acm_line_ctrl_set+0xa6>
	switch (ctrl) {
   12dbc:	2980      	cmp	r1, #128	; 0x80
   12dbe:	d110      	bne.n	12de2 <cdc_acm_line_ctrl_set+0x98>
		dev_data->serial_state &= ~SERIAL_STATE_FRAMING;
   12dc0:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   12dc4:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   12dc8:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   12dcc:	b11a      	cbz	r2, 12dd6 <cdc_acm_line_ctrl_set+0x8c>
			dev_data->serial_state |= SERIAL_STATE_FRAMING;
   12dce:	f043 0310 	orr.w	r3, r3, #16
   12dd2:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   12dd6:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
   12dda:	f7f2 f9d9 	bl	5190 <cdc_acm_send_notification>
		return 0;
   12dde:	2000      	movs	r0, #0
   12de0:	e006      	b.n	12df0 <cdc_acm_line_ctrl_set+0xa6>
	switch (ctrl) {
   12de2:	f06f 0012 	mvn.w	r0, #18
   12de6:	e003      	b.n	12df0 <cdc_acm_line_ctrl_set+0xa6>
		cdc_acm_baudrate_set(dev, val);
   12de8:	4611      	mov	r1, r2
   12dea:	f7ff ff8f 	bl	12d0c <cdc_acm_baudrate_set>
		return 0;
   12dee:	2000      	movs	r0, #0
}
   12df0:	bd10      	pop	{r4, pc}
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
   12df2:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   12df6:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   12dfa:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   12dfe:	b11a      	cbz	r2, 12e08 <cdc_acm_line_ctrl_set+0xbe>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
   12e00:	f043 0301 	orr.w	r3, r3, #1
   12e04:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
   12e08:	2101      	movs	r1, #1
   12e0a:	f7f2 f9c1 	bl	5190 <cdc_acm_send_notification>
		return 0;
   12e0e:	2000      	movs	r0, #0
   12e10:	e7ee      	b.n	12df0 <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
   12e12:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   12e16:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   12e1a:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   12e1e:	b11a      	cbz	r2, 12e28 <cdc_acm_line_ctrl_set+0xde>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
   12e20:	f043 0302 	orr.w	r3, r3, #2
   12e24:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   12e28:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
   12e2c:	f7f2 f9b0 	bl	5190 <cdc_acm_send_notification>
		return 0;
   12e30:	2000      	movs	r0, #0
   12e32:	e7dd      	b.n	12df0 <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_BREAK;
   12e34:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   12e38:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   12e3c:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   12e40:	b11a      	cbz	r2, 12e4a <cdc_acm_line_ctrl_set+0x100>
			dev_data->serial_state |= SERIAL_STATE_BREAK;
   12e42:	f043 0304 	orr.w	r3, r3, #4
   12e46:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   12e4a:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
   12e4e:	f7f2 f99f 	bl	5190 <cdc_acm_send_notification>
		return 0;
   12e52:	2000      	movs	r0, #0
   12e54:	e7cc      	b.n	12df0 <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_RING_SIGNAL;
   12e56:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   12e5a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   12e5e:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   12e62:	b11a      	cbz	r2, 12e6c <cdc_acm_line_ctrl_set+0x122>
			dev_data->serial_state |= SERIAL_STATE_RING_SIGNAL;
   12e64:	f043 0308 	orr.w	r3, r3, #8
   12e68:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   12e6c:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
   12e70:	f7f2 f98e 	bl	5190 <cdc_acm_send_notification>
		return 0;
   12e74:	2000      	movs	r0, #0
   12e76:	e7bb      	b.n	12df0 <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_PARITY;
   12e78:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   12e7c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   12e80:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   12e84:	b11a      	cbz	r2, 12e8e <cdc_acm_line_ctrl_set+0x144>
			dev_data->serial_state |= SERIAL_STATE_PARITY;
   12e86:	f043 0320 	orr.w	r3, r3, #32
   12e8a:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   12e8e:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
   12e92:	f7f2 f97d 	bl	5190 <cdc_acm_send_notification>
		return 0;
   12e96:	2000      	movs	r0, #0
   12e98:	e7aa      	b.n	12df0 <cdc_acm_line_ctrl_set+0xa6>
	switch (ctrl) {
   12e9a:	f06f 0012 	mvn.w	r0, #18
   12e9e:	e7a7      	b.n	12df0 <cdc_acm_line_ctrl_set+0xa6>
   12ea0:	f06f 0012 	mvn.w	r0, #18
   12ea4:	e7a4      	b.n	12df0 <cdc_acm_line_ctrl_set+0xa6>
   12ea6:	f06f 0012 	mvn.w	r0, #18
   12eaa:	e7a1      	b.n	12df0 <cdc_acm_line_ctrl_set+0xa6>

00012eac <cdc_acm_fifo_read>:
{
   12eac:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   12eae:	6905      	ldr	r5, [r0, #16]
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
   12eb0:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
   12eb2:	f7ff f9e1 	bl	12278 <ring_buf_get>
   12eb6:	4604      	mov	r4, r0
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
   12eb8:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
   12eba:	f7ff f90f 	bl	120dc <ring_buf_is_empty>
   12ebe:	b110      	cbz	r0, 12ec6 <cdc_acm_fifo_read+0x1a>
		dev_data->rx_ready = false;
   12ec0:	2300      	movs	r3, #0
   12ec2:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
}
   12ec6:	4620      	mov	r0, r4
   12ec8:	bd38      	pop	{r3, r4, r5, pc}

00012eca <cdc_acm_poll_in>:
{
   12eca:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
   12ecc:	2201      	movs	r2, #1
   12ece:	f7ff ffed 	bl	12eac <cdc_acm_fifo_read>
	return ret == 1 ? 0 : -1;
   12ed2:	2801      	cmp	r0, #1
   12ed4:	d101      	bne.n	12eda <cdc_acm_poll_in+0x10>
   12ed6:	2000      	movs	r0, #0
}
   12ed8:	bd08      	pop	{r3, pc}
	return ret == 1 ? 0 : -1;
   12eda:	f04f 30ff 	mov.w	r0, #4294967295
   12ede:	e7fb      	b.n	12ed8 <cdc_acm_poll_in+0xe>

00012ee0 <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   12ee0:	4770      	bx	lr

00012ee2 <flash_area_read>:
}
#endif /* CONFIG_FLASH_PAGE_LAYOUT */

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   12ee2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12ee6:	4680      	mov	r8, r0
   12ee8:	4617      	mov	r7, r2
   12eea:	461e      	mov	r6, r3
	return (off >= 0) && ((off + len) <= fa->fa_size);
   12eec:	1e0d      	subs	r5, r1, #0
   12eee:	db05      	blt.n	12efc <flash_area_read+0x1a>
   12ef0:	18eb      	adds	r3, r5, r3
   12ef2:	6882      	ldr	r2, [r0, #8]
   12ef4:	4293      	cmp	r3, r2
   12ef6:	d911      	bls.n	12f1c <flash_area_read+0x3a>
   12ef8:	2300      	movs	r3, #0
   12efa:	e000      	b.n	12efe <flash_area_read+0x1c>
   12efc:	2300      	movs	r3, #0
	const struct device *dev;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   12efe:	b17b      	cbz	r3, 12f20 <flash_area_read+0x3e>
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
   12f00:	f8d8 000c 	ldr.w	r0, [r8, #12]
   12f04:	f7fc fbd2 	bl	f6ac <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
   12f08:	f8d8 1004 	ldr.w	r1, [r8, #4]
   12f0c:	4429      	add	r1, r5

static inline int z_impl_flash_read(const struct device *dev, off_t offset,
				    void *data,
				    size_t len)
{
	const struct flash_driver_api *api =
   12f0e:	6883      	ldr	r3, [r0, #8]
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
   12f10:	681c      	ldr	r4, [r3, #0]
   12f12:	4633      	mov	r3, r6
   12f14:	463a      	mov	r2, r7
   12f16:	47a0      	blx	r4
}
   12f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (off >= 0) && ((off + len) <= fa->fa_size);
   12f1c:	2301      	movs	r3, #1
   12f1e:	e7ee      	b.n	12efe <flash_area_read+0x1c>
		return -EINVAL;
   12f20:	f06f 0015 	mvn.w	r0, #21
   12f24:	e7f8      	b.n	12f18 <flash_area_read+0x36>

00012f26 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   12f26:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   12f2a:	4606      	mov	r6, r0
   12f2c:	4690      	mov	r8, r2
   12f2e:	461f      	mov	r7, r3
	return (off >= 0) && ((off + len) <= fa->fa_size);
   12f30:	f1b1 0900 	subs.w	r9, r1, #0
   12f34:	db05      	blt.n	12f42 <flash_area_write+0x1c>
   12f36:	444b      	add	r3, r9
   12f38:	6882      	ldr	r2, [r0, #8]
   12f3a:	4293      	cmp	r3, r2
   12f3c:	d91f      	bls.n	12f7e <flash_area_write+0x58>
   12f3e:	2300      	movs	r3, #0
   12f40:	e000      	b.n	12f44 <flash_area_write+0x1e>
   12f42:	2300      	movs	r3, #0
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   12f44:	b1eb      	cbz	r3, 12f82 <flash_area_write+0x5c>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   12f46:	68f0      	ldr	r0, [r6, #12]
   12f48:	f7fc fbb0 	bl	f6ac <z_impl_device_get_binding>
   12f4c:	4604      	mov	r4, r0

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
   12f4e:	6871      	ldr	r1, [r6, #4]
   12f50:	4489      	add	r9, r1
			  size_t len);

static inline int z_impl_flash_write(const struct device *dev, off_t offset,
				     const void *data, size_t len)
{
	const struct flash_driver_api *api =
   12f52:	6886      	ldr	r6, [r0, #8]
	/* write protection management in this function exists for keeping
	 * compatibility with out-of-tree drivers which are not aligned jet
	 * with write-protection API depreciation.
	 * This will be removed with flash_api_write_protection handler type.
	 */
	if (api->write_protection != NULL) {
   12f54:	68f3      	ldr	r3, [r6, #12]
   12f56:	b11b      	cbz	r3, 12f60 <flash_area_write+0x3a>
		rc = api->write_protection(dev, false);
   12f58:	2100      	movs	r1, #0
   12f5a:	4798      	blx	r3
		if (rc) {
   12f5c:	4605      	mov	r5, r0
   12f5e:	b958      	cbnz	r0, 12f78 <flash_area_write+0x52>
			return rc;
		}
	}

	rc = api->write(dev, offset, data, len);
   12f60:	6875      	ldr	r5, [r6, #4]
   12f62:	463b      	mov	r3, r7
   12f64:	4642      	mov	r2, r8
   12f66:	4649      	mov	r1, r9
   12f68:	4620      	mov	r0, r4
   12f6a:	47a8      	blx	r5
   12f6c:	4605      	mov	r5, r0

	if (api->write_protection != NULL) {
   12f6e:	68f3      	ldr	r3, [r6, #12]
   12f70:	b113      	cbz	r3, 12f78 <flash_area_write+0x52>
		(void) api->write_protection(dev, true);
   12f72:	2101      	movs	r1, #1
   12f74:	4620      	mov	r0, r4
   12f76:	4798      	blx	r3

	return rc;
}
   12f78:	4628      	mov	r0, r5
   12f7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (off >= 0) && ((off + len) <= fa->fa_size);
   12f7e:	2301      	movs	r3, #1
   12f80:	e7e0      	b.n	12f44 <flash_area_write+0x1e>
		return -EINVAL;
   12f82:	f06f 0515 	mvn.w	r5, #21
   12f86:	e7f7      	b.n	12f78 <flash_area_write+0x52>

00012f88 <flash_area_erase>:

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
   12f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12f8c:	4605      	mov	r5, r0
   12f8e:	4690      	mov	r8, r2
	return (off >= 0) && ((off + len) <= fa->fa_size);
   12f90:	1e0e      	subs	r6, r1, #0
   12f92:	db05      	blt.n	12fa0 <flash_area_erase+0x18>
   12f94:	18b3      	adds	r3, r6, r2
   12f96:	6882      	ldr	r2, [r0, #8]
   12f98:	4293      	cmp	r3, r2
   12f9a:	d91e      	bls.n	12fda <flash_area_erase+0x52>
   12f9c:	2300      	movs	r3, #0
   12f9e:	e000      	b.n	12fa2 <flash_area_erase+0x1a>
   12fa0:	2300      	movs	r3, #0
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   12fa2:	b1e3      	cbz	r3, 12fde <flash_area_erase+0x56>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   12fa4:	68e8      	ldr	r0, [r5, #12]
   12fa6:	f7fc fb81 	bl	f6ac <z_impl_device_get_binding>
   12faa:	4604      	mov	r4, r0

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
   12fac:	686b      	ldr	r3, [r5, #4]
   12fae:	441e      	add	r6, r3
__syscall int flash_erase(const struct device *dev, off_t offset, size_t size);

static inline int z_impl_flash_erase(const struct device *dev, off_t offset,
				     size_t size)
{
	const struct flash_driver_api *api =
   12fb0:	6887      	ldr	r7, [r0, #8]
	/* write protection management in this function exists for keeping
	 * compatibility with out-of-tree drivers which are not aligned jet
	 * with write-protection API depreciation.
	 * This will be removed with flash_api_write_protection handler type.
	 */
	if (api->write_protection != NULL) {
   12fb2:	68fb      	ldr	r3, [r7, #12]
   12fb4:	b11b      	cbz	r3, 12fbe <flash_area_erase+0x36>
		rc = api->write_protection(dev, false);
   12fb6:	2100      	movs	r1, #0
   12fb8:	4798      	blx	r3
		if (rc) {
   12fba:	4605      	mov	r5, r0
   12fbc:	b950      	cbnz	r0, 12fd4 <flash_area_erase+0x4c>
			return rc;
		}
	}

	rc = api->erase(dev, offset, size);
   12fbe:	68bb      	ldr	r3, [r7, #8]
   12fc0:	4642      	mov	r2, r8
   12fc2:	4631      	mov	r1, r6
   12fc4:	4620      	mov	r0, r4
   12fc6:	4798      	blx	r3
   12fc8:	4605      	mov	r5, r0

	if (api->write_protection != NULL) {
   12fca:	68fb      	ldr	r3, [r7, #12]
   12fcc:	b113      	cbz	r3, 12fd4 <flash_area_erase+0x4c>
		(void) api->write_protection(dev, true);
   12fce:	2101      	movs	r1, #1
   12fd0:	4620      	mov	r0, r4
   12fd2:	4798      	blx	r3

	return rc;
}
   12fd4:	4628      	mov	r0, r5
   12fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (off >= 0) && ((off + len) <= fa->fa_size);
   12fda:	2301      	movs	r3, #1
   12fdc:	e7e1      	b.n	12fa2 <flash_area_erase+0x1a>
		return -EINVAL;
   12fde:	f06f 0515 	mvn.w	r5, #21
   12fe2:	e7f7      	b.n	12fd4 <flash_area_erase+0x4c>

00012fe4 <flash_area_get_device>:

	return 1;
}

const struct device *flash_area_get_device(const struct flash_area *fa)
{
   12fe4:	b508      	push	{r3, lr}
	return device_get_binding(fa->fa_dev_name);
   12fe6:	68c0      	ldr	r0, [r0, #12]
   12fe8:	f7fc fb60 	bl	f6ac <z_impl_device_get_binding>
}
   12fec:	bd08      	pop	{r3, pc}

00012fee <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   12fee:	2200      	movs	r2, #0
   12ff0:	6002      	str	r2, [r0, #0]
   12ff2:	6042      	str	r2, [r0, #4]
   12ff4:	6082      	str	r2, [r0, #8]
}
   12ff6:	4770      	bx	lr

00012ff8 <abort_function>:
	while(1);
   12ff8:	e7fe      	b.n	12ff8 <abort_function>

00012ffa <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   12ffa:	b538      	push	{r3, r4, r5, lr}
   12ffc:	4604      	mov	r4, r0

	if (esf != NULL) {
   12ffe:	460d      	mov	r5, r1
   13000:	b111      	cbz	r1, 13008 <z_arm_fatal_error+0xe>
		esf_dump(esf);
   13002:	4608      	mov	r0, r1
   13004:	f7f2 fba6 	bl	5754 <esf_dump>
	}
	z_fatal_error(reason, esf);
   13008:	4629      	mov	r1, r5
   1300a:	4620      	mov	r0, r4
   1300c:	f7fc fbd4 	bl	f7b8 <z_fatal_error>
}
   13010:	bd38      	pop	{r3, r4, r5, pc}

00013012 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   13012:	b508      	push	{r3, lr}
   13014:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   13016:	6800      	ldr	r0, [r0, #0]
   13018:	f7ff ffef 	bl	12ffa <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   1301c:	bd08      	pop	{r3, pc}

0001301e <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
   1301e:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   13020:	2100      	movs	r1, #0
   13022:	2001      	movs	r0, #1
   13024:	f7ff ffe9 	bl	12ffa <z_arm_fatal_error>
}
   13028:	bd08      	pop	{r3, pc}

0001302a <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1302a:	b508      	push	{r3, lr}
	handler();
   1302c:	f7f2 fc28 	bl	5880 <z_SysNmiOnReset>
	z_arm_int_exit();
   13030:	f7f2 fd24 	bl	5a7c <z_arm_exc_exit>
}
   13034:	bd08      	pop	{r3, pc}

00013036 <memory_fault_recoverable>:
}
   13036:	2000      	movs	r0, #0
   13038:	4770      	bx	lr

0001303a <fault_handle>:
{
   1303a:	b508      	push	{r3, lr}
	*recoverable = false;
   1303c:	2300      	movs	r3, #0
   1303e:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   13040:	1ecb      	subs	r3, r1, #3
   13042:	2b09      	cmp	r3, #9
   13044:	d81a      	bhi.n	1307c <fault_handle+0x42>
   13046:	e8df f003 	tbb	[pc, r3]
   1304a:	0905      	.short	0x0905
   1304c:	1919110d 	.word	0x1919110d
   13050:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
   13054:	4611      	mov	r1, r2
   13056:	f7f2 ffa5 	bl	5fa4 <hard_fault>
}
   1305a:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   1305c:	2100      	movs	r1, #0
   1305e:	f7f2 febf 	bl	5de0 <mem_manage_fault>
		break;
   13062:	e7fa      	b.n	1305a <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
   13064:	2100      	movs	r1, #0
   13066:	f7f2 fde3 	bl	5c30 <bus_fault>
		break;
   1306a:	e7f6      	b.n	1305a <fault_handle+0x20>
		reason = usage_fault(esf);
   1306c:	f7f2 fd14 	bl	5a98 <usage_fault>
		break;
   13070:	e7f3      	b.n	1305a <fault_handle+0x20>
		debug_monitor(esf, recoverable);
   13072:	4611      	mov	r1, r2
   13074:	f7f2 fdc2 	bl	5bfc <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   13078:	2000      	movs	r0, #0
		break;
   1307a:	e7ee      	b.n	1305a <fault_handle+0x20>
		reserved_exception(esf, fault);
   1307c:	f7f3 f838 	bl	60f0 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   13080:	2000      	movs	r0, #0
	return reason;
   13082:	e7ea      	b.n	1305a <fault_handle+0x20>

00013084 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   13084:	6843      	ldr	r3, [r0, #4]
   13086:	1e5a      	subs	r2, r3, #1
		&&
   13088:	4213      	tst	r3, r2
   1308a:	d106      	bne.n	1309a <mpu_partition_is_valid+0x16>
		&&
   1308c:	2b1f      	cmp	r3, #31
   1308e:	d906      	bls.n	1309e <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   13090:	6803      	ldr	r3, [r0, #0]
		&&
   13092:	421a      	tst	r2, r3
   13094:	d005      	beq.n	130a2 <mpu_partition_is_valid+0x1e>
   13096:	2000      	movs	r0, #0
   13098:	4770      	bx	lr
   1309a:	2000      	movs	r0, #0
   1309c:	4770      	bx	lr
   1309e:	2000      	movs	r0, #0
   130a0:	4770      	bx	lr
   130a2:	2001      	movs	r0, #1
}
   130a4:	4770      	bx	lr

000130a6 <mpu_configure_region>:
{
   130a6:	b500      	push	{lr}
   130a8:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   130aa:	680b      	ldr	r3, [r1, #0]
   130ac:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   130ae:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   130b0:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   130b2:	2b20      	cmp	r3, #32
   130b4:	d912      	bls.n	130dc <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   130b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   130ba:	d811      	bhi.n	130e0 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   130bc:	3b01      	subs	r3, #1
   130be:	fab3 f383 	clz	r3, r3
   130c2:	f1c3 031f 	rsb	r3, r3, #31
   130c6:	005b      	lsls	r3, r3, #1
   130c8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   130cc:	4313      	orrs	r3, r2
   130ce:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   130d0:	a901      	add	r1, sp, #4
   130d2:	f7f3 f969 	bl	63a8 <region_allocate_and_init>
}
   130d6:	b005      	add	sp, #20
   130d8:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   130dc:	2308      	movs	r3, #8
   130de:	e7f5      	b.n	130cc <mpu_configure_region+0x26>
		return REGION_4G;
   130e0:	233e      	movs	r3, #62	; 0x3e
   130e2:	e7f3      	b.n	130cc <mpu_configure_region+0x26>

000130e4 <arm_core_mpu_configure_static_mpu_regions>:
{
   130e4:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   130e6:	f7f3 f9c1 	bl	646c <mpu_configure_static_mpu_regions>
}
   130ea:	bd08      	pop	{r3, pc}

000130ec <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   130ec:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   130ee:	f7f3 f9c7 	bl	6480 <mpu_configure_dynamic_mpu_regions>
}
   130f2:	bd08      	pop	{r3, pc}

000130f4 <free>:

void free(void *ptr)
{
	ARG_UNUSED(ptr);
}
   130f4:	4770      	bx	lr

000130f6 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   130f6:	4602      	mov	r2, r0
   130f8:	780b      	ldrb	r3, [r1, #0]
   130fa:	b11b      	cbz	r3, 13104 <strcpy+0xe>
		*d = *s;
   130fc:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
   13100:	3101      	adds	r1, #1
   13102:	e7f9      	b.n	130f8 <strcpy+0x2>
	}

	*d = '\0';
   13104:	7013      	strb	r3, [r2, #0]

	return dest;
}
   13106:	4770      	bx	lr

00013108 <strncpy>:

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   13108:	4603      	mov	r3, r0
   1310a:	b1a2      	cbz	r2, 13136 <strncpy+0x2e>
{
   1310c:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
   1310e:	780c      	ldrb	r4, [r1, #0]
   13110:	b12c      	cbz	r4, 1311e <strncpy+0x16>
		*d = *s;
   13112:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
   13116:	3101      	adds	r1, #1
		d++;
		n--;
   13118:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
   1311a:	2a00      	cmp	r2, #0
   1311c:	d1f7      	bne.n	1310e <strncpy+0x6>
	}

	while (n > 0) {
   1311e:	b122      	cbz	r2, 1312a <strncpy+0x22>
		*d = '\0';
   13120:	2100      	movs	r1, #0
   13122:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
   13126:	3a01      	subs	r2, #1
   13128:	e7f9      	b.n	1311e <strncpy+0x16>
	}

	return dest;
}
   1312a:	bc10      	pop	{r4}
   1312c:	4770      	bx	lr
		*d = '\0';
   1312e:	2100      	movs	r1, #0
   13130:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   13134:	3a01      	subs	r2, #1
	while (n > 0) {
   13136:	2a00      	cmp	r2, #0
   13138:	d1f9      	bne.n	1312e <strncpy+0x26>
   1313a:	4770      	bx	lr

0001313c <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   1313c:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   1313e:	7803      	ldrb	r3, [r0, #0]
   13140:	428b      	cmp	r3, r1
   13142:	d002      	beq.n	1314a <strchr+0xe>
   13144:	b10b      	cbz	r3, 1314a <strchr+0xe>
		s++;
   13146:	3001      	adds	r0, #1
   13148:	e7f9      	b.n	1313e <strchr+0x2>
	}

	return (*s == tmp) ? (char *) s : NULL;
   1314a:	428b      	cmp	r3, r1
   1314c:	d100      	bne.n	13150 <strchr+0x14>
}
   1314e:	4770      	bx	lr
	return (*s == tmp) ? (char *) s : NULL;
   13150:	2000      	movs	r0, #0
   13152:	e7fc      	b.n	1314e <strchr+0x12>

00013154 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   13154:	4603      	mov	r3, r0
	size_t n = 0;
   13156:	2000      	movs	r0, #0

	while (*s != '\0') {
   13158:	781a      	ldrb	r2, [r3, #0]
   1315a:	b112      	cbz	r2, 13162 <strlen+0xe>
		s++;
   1315c:	3301      	adds	r3, #1
		n++;
   1315e:	3001      	adds	r0, #1
   13160:	e7fa      	b.n	13158 <strlen+0x4>
	}

	return n;
}
   13162:	4770      	bx	lr

00013164 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   13164:	4603      	mov	r3, r0
	size_t n = 0;
   13166:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   13168:	781a      	ldrb	r2, [r3, #0]
   1316a:	b122      	cbz	r2, 13176 <strnlen+0x12>
   1316c:	4288      	cmp	r0, r1
   1316e:	d202      	bcs.n	13176 <strnlen+0x12>
		s++;
   13170:	3301      	adds	r3, #1
		n++;
   13172:	3001      	adds	r0, #1
   13174:	e7f8      	b.n	13168 <strnlen+0x4>
	}

	return n;
}
   13176:	4770      	bx	lr

00013178 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   13178:	7803      	ldrb	r3, [r0, #0]
   1317a:	780a      	ldrb	r2, [r1, #0]
   1317c:	4293      	cmp	r3, r2
   1317e:	d103      	bne.n	13188 <strcmp+0x10>
   13180:	b113      	cbz	r3, 13188 <strcmp+0x10>
		s1++;
   13182:	3001      	adds	r0, #1
		s2++;
   13184:	3101      	adds	r1, #1
   13186:	e7f7      	b.n	13178 <strcmp>
	}

	return *s1 - *s2;
}
   13188:	1a98      	subs	r0, r3, r2
   1318a:	4770      	bx	lr

0001318c <strncmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1318c:	b192      	cbz	r2, 131b4 <strncmp+0x28>
{
   1318e:	b410      	push	{r4}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   13190:	7803      	ldrb	r3, [r0, #0]
   13192:	780c      	ldrb	r4, [r1, #0]
   13194:	42a3      	cmp	r3, r4
   13196:	d105      	bne.n	131a4 <strncmp+0x18>
   13198:	b123      	cbz	r3, 131a4 <strncmp+0x18>
		s1++;
   1319a:	3001      	adds	r0, #1
		s2++;
   1319c:	3101      	adds	r1, #1
		n--;
   1319e:	3a01      	subs	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   131a0:	2a00      	cmp	r2, #0
   131a2:	d1f5      	bne.n	13190 <strncmp+0x4>
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   131a4:	b122      	cbz	r2, 131b0 <strncmp+0x24>
   131a6:	7800      	ldrb	r0, [r0, #0]
   131a8:	780b      	ldrb	r3, [r1, #0]
   131aa:	1ac0      	subs	r0, r0, r3
}
   131ac:	bc10      	pop	{r4}
   131ae:	4770      	bx	lr
	return (n == 0) ? 0 : (*s1 - *s2);
   131b0:	2000      	movs	r0, #0
   131b2:	e7fb      	b.n	131ac <strncmp+0x20>
   131b4:	b11a      	cbz	r2, 131be <strncmp+0x32>
   131b6:	7800      	ldrb	r0, [r0, #0]
   131b8:	780b      	ldrb	r3, [r1, #0]
   131ba:	1ac0      	subs	r0, r0, r3
   131bc:	4770      	bx	lr
   131be:	2000      	movs	r0, #0
}
   131c0:	4770      	bx	lr

000131c2 <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   131c2:	b17a      	cbz	r2, 131e4 <memcmp+0x22>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   131c4:	1e53      	subs	r3, r2, #1
   131c6:	d00f      	beq.n	131e8 <memcmp+0x26>
{
   131c8:	b410      	push	{r4}
	while ((--n > 0) && (*c1 == *c2)) {
   131ca:	7804      	ldrb	r4, [r0, #0]
   131cc:	780a      	ldrb	r2, [r1, #0]
   131ce:	4294      	cmp	r4, r2
   131d0:	d103      	bne.n	131da <memcmp+0x18>
		c1++;
   131d2:	3001      	adds	r0, #1
		c2++;
   131d4:	3101      	adds	r1, #1
	while ((--n > 0) && (*c1 == *c2)) {
   131d6:	3b01      	subs	r3, #1
   131d8:	d1f7      	bne.n	131ca <memcmp+0x8>
	}

	return *c1 - *c2;
   131da:	7800      	ldrb	r0, [r0, #0]
   131dc:	780b      	ldrb	r3, [r1, #0]
   131de:	1ac0      	subs	r0, r0, r3
}
   131e0:	bc10      	pop	{r4}
   131e2:	4770      	bx	lr
		return 0;
   131e4:	2000      	movs	r0, #0
   131e6:	4770      	bx	lr
	return *c1 - *c2;
   131e8:	7800      	ldrb	r0, [r0, #0]
   131ea:	780b      	ldrb	r3, [r1, #0]
   131ec:	1ac0      	subs	r0, r0, r3
}
   131ee:	4770      	bx	lr

000131f0 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   131f0:	b410      	push	{r4}
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   131f2:	ea80 0301 	eor.w	r3, r0, r1
   131f6:	f013 0f03 	tst.w	r3, #3
   131fa:	d001      	beq.n	13200 <memcpy+0x10>
	unsigned char *d_byte = (unsigned char *)d;
   131fc:	4603      	mov	r3, r0
   131fe:	e017      	b.n	13230 <memcpy+0x40>
   13200:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
   13202:	f013 0f03 	tst.w	r3, #3
   13206:	d00b      	beq.n	13220 <memcpy+0x30>
			if (n == 0) {
   13208:	b1a2      	cbz	r2, 13234 <memcpy+0x44>
				return d;
			}
			*(d_byte++) = *(s_byte++);
   1320a:	f811 4b01 	ldrb.w	r4, [r1], #1
   1320e:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   13212:	3a01      	subs	r2, #1
   13214:	e7f5      	b.n	13202 <memcpy+0x12>

		mem_word_t *d_word = (mem_word_t *)d_byte;
		const mem_word_t *s_word = (const mem_word_t *)s_byte;

		while (n >= sizeof(mem_word_t)) {
			*(d_word++) = *(s_word++);
   13216:	f851 4b04 	ldr.w	r4, [r1], #4
   1321a:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
   1321e:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
   13220:	2a03      	cmp	r2, #3
   13222:	d8f8      	bhi.n	13216 <memcpy+0x26>
   13224:	e004      	b.n	13230 <memcpy+0x40>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
   13226:	f811 4b01 	ldrb.w	r4, [r1], #1
   1322a:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   1322e:	3a01      	subs	r2, #1
	while (n > 0) {
   13230:	2a00      	cmp	r2, #0
   13232:	d1f8      	bne.n	13226 <memcpy+0x36>
	}

	return d;
}
   13234:	bc10      	pop	{r4}
   13236:	4770      	bx	lr

00013238 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   13238:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   1323a:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
   1323c:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1323e:	f013 0f03 	tst.w	r3, #3
   13242:	d004      	beq.n	1324e <memset+0x16>
		if (n == 0) {
   13244:	b19a      	cbz	r2, 1326e <memset+0x36>
			return buf;
		}
		*(d_byte++) = c_byte;
   13246:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   1324a:	3a01      	subs	r2, #1
   1324c:	e7f7      	b.n	1323e <memset+0x6>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
   1324e:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
   13250:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
   13254:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   13258:	2a03      	cmp	r2, #3
   1325a:	d906      	bls.n	1326a <memset+0x32>
		*(d_word++) = c_word;
   1325c:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
   13260:	3a04      	subs	r2, #4
   13262:	e7f9      	b.n	13258 <memset+0x20>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
   13264:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   13268:	3a01      	subs	r2, #1
	while (n > 0) {
   1326a:	2a00      	cmp	r2, #0
   1326c:	d1fa      	bne.n	13264 <memset+0x2c>
	}

	return buf;
}
   1326e:	bc10      	pop	{r4}
   13270:	4770      	bx	lr

00013272 <strspn>:
#include <string.h>
#include <string.h>

size_t strspn(const char *s,
	      const char *accept)
{
   13272:	b570      	push	{r4, r5, r6, lr}
   13274:	4606      	mov	r6, r0
   13276:	460d      	mov	r5, r1
	const char *ins = s;

	while ((*s != '\0') && (strchr(accept, *s) != NULL)) {
   13278:	4604      	mov	r4, r0
   1327a:	7821      	ldrb	r1, [r4, #0]
   1327c:	b129      	cbz	r1, 1328a <strspn+0x18>
   1327e:	4628      	mov	r0, r5
   13280:	f7ff ff5c 	bl	1313c <strchr>
   13284:	b108      	cbz	r0, 1328a <strspn+0x18>
		++s;
   13286:	3401      	adds	r4, #1
   13288:	e7f7      	b.n	1327a <strspn+0x8>
	}

	return s - ins;
}
   1328a:	1ba0      	subs	r0, r4, r6
   1328c:	bd70      	pop	{r4, r5, r6, pc}

0001328e <strcspn>:

size_t strcspn(const char *s,
	       const char *reject)
{
   1328e:	b570      	push	{r4, r5, r6, lr}
   13290:	4606      	mov	r6, r0
   13292:	460d      	mov	r5, r1
	const char *ins = s;

	while ((*s != '\0') && (strchr(reject, *s) == NULL)) {
   13294:	4604      	mov	r4, r0
   13296:	7821      	ldrb	r1, [r4, #0]
   13298:	b129      	cbz	r1, 132a6 <strcspn+0x18>
   1329a:	4628      	mov	r0, r5
   1329c:	f7ff ff4e 	bl	1313c <strchr>
   132a0:	b908      	cbnz	r0, 132a6 <strcspn+0x18>
		++s;
   132a2:	3401      	adds	r4, #1
   132a4:	e7f7      	b.n	13296 <strcspn+0x8>
	}

	return s - ins;
}
   132a6:	1ba0      	subs	r0, r4, r6
   132a8:	bd70      	pop	{r4, r5, r6, pc}

000132aa <_stdout_hook_default>:
}
   132aa:	f04f 30ff 	mov.w	r0, #4294967295
   132ae:	4770      	bx	lr

000132b0 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   132b0:	684b      	ldr	r3, [r1, #4]
   132b2:	2b01      	cmp	r3, #1
   132b4:	dd07      	ble.n	132c6 <sprintf_out+0x16>
		*(p->ptr) = c;
   132b6:	680b      	ldr	r3, [r1, #0]
   132b8:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   132ba:	680b      	ldr	r3, [r1, #0]
   132bc:	3301      	adds	r3, #1
   132be:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   132c0:	684b      	ldr	r3, [r1, #4]
   132c2:	3b01      	subs	r3, #1
   132c4:	604b      	str	r3, [r1, #4]
}
   132c6:	2000      	movs	r0, #0
   132c8:	4770      	bx	lr

000132ca <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   132ca:	b084      	sub	sp, #16
   132cc:	ab04      	add	r3, sp, #16
   132ce:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   132d2:	f89d 3004 	ldrb.w	r3, [sp, #4]
   132d6:	2b06      	cmp	r3, #6
   132d8:	d001      	beq.n	132de <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   132da:	b004      	add	sp, #16
   132dc:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   132de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   132e2:	2201      	movs	r2, #1
   132e4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   132e8:	f3bf 8f4f 	dsb	sy
        __WFE();
   132ec:	bf20      	wfe
    while (true)
   132ee:	e7fd      	b.n	132ec <pm_power_state_set+0x22>

000132f0 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   132f0:	b084      	sub	sp, #16
   132f2:	ab04      	add	r3, sp, #16
   132f4:	e903 0007 	stmdb	r3, {r0, r1, r2}
   132f8:	2300      	movs	r3, #0
   132fa:	f383 8811 	msr	BASEPRI, r3
   132fe:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   13302:	b004      	add	sp, #16
   13304:	4770      	bx	lr

00013306 <fs_type_get>:
{
   13306:	b508      	push	{r3, lr}
	struct registry_entry *ep = registry_find(type);
   13308:	f7f3 f980 	bl	660c <registry_find>
	return (ep != NULL) ? ep->fstp : NULL;
   1330c:	4603      	mov	r3, r0
   1330e:	b100      	cbz	r0, 13312 <fs_type_get+0xc>
   13310:	6843      	ldr	r3, [r0, #4]
}
   13312:	4618      	mov	r0, r3
   13314:	bd08      	pop	{r3, pc}

00013316 <lfs_to_errno>:
	if (error >= 0) {
   13316:	2800      	cmp	r0, #0
   13318:	da37      	bge.n	1338a <lfs_to_errno+0x74>
	switch (error) {
   1331a:	f100 0354 	add.w	r3, r0, #84	; 0x54
   1331e:	2b52      	cmp	r3, #82	; 0x52
   13320:	d82b      	bhi.n	1337a <lfs_to_errno+0x64>
   13322:	e8df f003 	tbb	[pc, r3]
   13326:	2a30      	.short	0x2a30
   13328:	2a2a2a2a 	.word	0x2a2a2a2a
   1332c:	2a2a2a2a 	.word	0x2a2a2a2a
   13330:	2a2a2a2a 	.word	0x2a2a2a2a
   13334:	2a2a2a2a 	.word	0x2a2a2a2a
   13338:	2a2a2a2a 	.word	0x2a2a2a2a
   1333c:	2a2a2a2a 	.word	0x2a2a2a2a
   13340:	2a2a2a2a 	.word	0x2a2a2a2a
   13344:	2a2a2a2a 	.word	0x2a2a2a2a
   13348:	2a2a2a2a 	.word	0x2a2a2a2a
   1334c:	2a2a2a2a 	.word	0x2a2a2a2a
   13350:	2d2a2a2a 	.word	0x2d2a2a2a
   13354:	2a2a2a2a 	.word	0x2a2a2a2a
   13358:	2a2a2a2a 	.word	0x2a2a2a2a
   1335c:	32322a2a 	.word	0x32322a2a
   13360:	2a2a2a2a 	.word	0x2a2a2a2a
   13364:	2a323232 	.word	0x2a323232
   13368:	2a2a322a 	.word	0x2a2a322a
   1336c:	2a322a2a 	.word	0x2a322a2a
   13370:	2a2a322a 	.word	0x2a2a322a
   13374:	2a2a2a2a 	.word	0x2a2a2a2a
   13378:	32          	.byte	0x32
   13379:	00          	.byte	0x00
	if (error >= 0) {
   1337a:	f06f 0004 	mvn.w	r0, #4
   1337e:	4770      	bx	lr
		return -ENOTEMPTY;
   13380:	f06f 0059 	mvn.w	r0, #89	; 0x59
   13384:	4770      	bx	lr
		return -EFAULT;
   13386:	f06f 000d 	mvn.w	r0, #13
}
   1338a:	4770      	bx	lr

0001338c <errno_to_lfs>:
	if (error >= 0) {
   1338c:	2800      	cmp	r0, #0
   1338e:	da20      	bge.n	133d2 <errno_to_lfs+0x46>
	switch (error) {
   13390:	f110 0f5a 	cmn.w	r0, #90	; 0x5a
   13394:	d01f      	beq.n	133d6 <errno_to_lfs+0x4a>
   13396:	db21      	blt.n	133dc <errno_to_lfs+0x50>
   13398:	f110 0f02 	cmn.w	r0, #2
   1339c:	dc21      	bgt.n	133e2 <errno_to_lfs+0x56>
   1339e:	f110 0f1c 	cmn.w	r0, #28
   133a2:	db21      	blt.n	133e8 <errno_to_lfs+0x5c>
   133a4:	f100 031c 	add.w	r3, r0, #28
   133a8:	2b1a      	cmp	r3, #26
   133aa:	d80f      	bhi.n	133cc <errno_to_lfs+0x40>
   133ac:	e8df f003 	tbb	[pc, r3]
   133b0:	0e0e2121 	.word	0x0e0e2121
   133b4:	21210e0e 	.word	0x21210e0e
   133b8:	210e0e21 	.word	0x210e0e21
   133bc:	0e1f0e0e 	.word	0x0e1f0e0e
   133c0:	210e0e21 	.word	0x210e0e21
   133c4:	0e0e0e0e 	.word	0x0e0e0e0e
   133c8:	0e0e      	.short	0x0e0e
   133ca:	21          	.byte	0x21
   133cb:	00          	.byte	0x00
   133cc:	f06f 0004 	mvn.w	r0, #4
   133d0:	4770      	bx	lr
		return LFS_ERR_OK;
   133d2:	2000      	movs	r0, #0
   133d4:	4770      	bx	lr
		return LFS_ERR_NOTEMPTY;
   133d6:	f06f 0026 	mvn.w	r0, #38	; 0x26
   133da:	4770      	bx	lr
	switch (error) {
   133dc:	f06f 0004 	mvn.w	r0, #4
   133e0:	4770      	bx	lr
   133e2:	f06f 0004 	mvn.w	r0, #4
   133e6:	4770      	bx	lr
   133e8:	f06f 0004 	mvn.w	r0, #4
   133ec:	4770      	bx	lr
		return LFS_ERR_CORRUPT;
   133ee:	f06f 0053 	mvn.w	r0, #83	; 0x53
}
   133f2:	4770      	bx	lr

000133f4 <lfs_api_sync>:
}
   133f4:	2000      	movs	r0, #0
   133f6:	4770      	bx	lr

000133f8 <lfs_flags_from_zephyr>:
	int flags = (zflags & FS_O_CREATE) ? LFS_O_CREAT : 0;
   133f8:	0102      	lsls	r2, r0, #4
   133fa:	f402 7280 	and.w	r2, r2, #256	; 0x100
	flags |= (zflags & FS_O_READ) ? LFS_O_RDONLY : 0;
   133fe:	f000 0301 	and.w	r3, r0, #1
   13402:	431a      	orrs	r2, r3
	flags |= (zflags & FS_O_WRITE) ? LFS_O_WRONLY : 0;
   13404:	f000 0302 	and.w	r3, r0, #2
   13408:	4313      	orrs	r3, r2
	flags |= (zflags & FS_O_APPEND) ? LFS_O_APPEND : 0;
   1340a:	0180      	lsls	r0, r0, #6
   1340c:	f400 6000 	and.w	r0, r0, #2048	; 0x800
}
   13410:	4318      	orrs	r0, r3
   13412:	4770      	bx	lr

00013414 <get_page_cb>:
{
   13414:	b430      	push	{r4, r5}
	size_t info_start = info->start_offset;
   13416:	6804      	ldr	r4, [r0, #0]
	size_t info_end = info_start + info->size - 1U;
   13418:	6845      	ldr	r5, [r0, #4]
   1341a:	192a      	adds	r2, r5, r4
   1341c:	3a01      	subs	r2, #1
	size_t area_start = ctx->area->fa_off;
   1341e:	680b      	ldr	r3, [r1, #0]
   13420:	6858      	ldr	r0, [r3, #4]
	size_t area_end = area_start + ctx->area->fa_size - 1U;
   13422:	689b      	ldr	r3, [r3, #8]
   13424:	4403      	add	r3, r0
	if (info_end < area_start) {
   13426:	4282      	cmp	r2, r0
   13428:	d308      	bcc.n	1343c <get_page_cb+0x28>
   1342a:	3b01      	subs	r3, #1
	if (info_start > area_end) {
   1342c:	429c      	cmp	r4, r3
   1342e:	d808      	bhi.n	13442 <get_page_cb+0x2e>
	if (info->size > ctx->max_size) {
   13430:	684b      	ldr	r3, [r1, #4]
   13432:	429d      	cmp	r5, r3
   13434:	d907      	bls.n	13446 <get_page_cb+0x32>
		ctx->max_size = info->size;
   13436:	604d      	str	r5, [r1, #4]
	return true;
   13438:	2001      	movs	r0, #1
   1343a:	e000      	b.n	1343e <get_page_cb+0x2a>
		return true;
   1343c:	2001      	movs	r0, #1
}
   1343e:	bc30      	pop	{r4, r5}
   13440:	4770      	bx	lr
		return false;
   13442:	2000      	movs	r0, #0
   13444:	e7fb      	b.n	1343e <get_page_cb+0x2a>
	return true;
   13446:	2001      	movs	r0, #1
   13448:	e7f9      	b.n	1343e <get_page_cb+0x2a>

0001344a <info_to_dirent>:
{
   1344a:	b510      	push	{r4, lr}
   1344c:	460c      	mov	r4, r1
	entry->type = ((info->type == LFS_TYPE_DIR) ?
   1344e:	7803      	ldrb	r3, [r0, #0]
		       FS_DIR_ENTRY_DIR : FS_DIR_ENTRY_FILE);
   13450:	2b02      	cmp	r3, #2
   13452:	bf14      	ite	ne
   13454:	2300      	movne	r3, #0
   13456:	2301      	moveq	r3, #1
	entry->type = ((info->type == LFS_TYPE_DIR) ?
   13458:	700b      	strb	r3, [r1, #0]
	entry->size = info->size;
   1345a:	6843      	ldr	r3, [r0, #4]
   1345c:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
	strncpy(entry->name, info->name, sizeof(entry->name));
   13460:	f240 1201 	movw	r2, #257	; 0x101
   13464:	f100 0108 	add.w	r1, r0, #8
   13468:	1c60      	adds	r0, r4, #1
   1346a:	f7ff fe4d 	bl	13108 <strncpy>
	entry->name[sizeof(entry->name) - 1] = '\0';
   1346e:	2300      	movs	r3, #0
   13470:	f884 3101 	strb.w	r3, [r4, #257]	; 0x101
}
   13474:	bd10      	pop	{r4, pc}

00013476 <lfs_api_erase>:
{
   13476:	b508      	push	{r3, lr}
	size_t offset = block * c->block_size;
   13478:	69c2      	ldr	r2, [r0, #28]
	int rc = flash_area_erase(fa, offset, c->block_size);
   1347a:	fb01 f102 	mul.w	r1, r1, r2
   1347e:	6800      	ldr	r0, [r0, #0]
   13480:	f7ff fd82 	bl	12f88 <flash_area_erase>
	return errno_to_lfs(rc);
   13484:	f7ff ff82 	bl	1338c <errno_to_lfs>
}
   13488:	bd08      	pop	{r3, pc}

0001348a <lfs_api_prog>:
{
   1348a:	b538      	push	{r3, r4, r5, lr}
   1348c:	4614      	mov	r4, r2
   1348e:	461a      	mov	r2, r3
	size_t offset = block * c->block_size + off;
   13490:	69c5      	ldr	r5, [r0, #28]
	int rc = flash_area_write(fa, offset, buffer, size);
   13492:	9b04      	ldr	r3, [sp, #16]
   13494:	fb01 4105 	mla	r1, r1, r5, r4
   13498:	6800      	ldr	r0, [r0, #0]
   1349a:	f7ff fd44 	bl	12f26 <flash_area_write>
	return errno_to_lfs(rc);
   1349e:	f7ff ff75 	bl	1338c <errno_to_lfs>
}
   134a2:	bd38      	pop	{r3, r4, r5, pc}

000134a4 <lfs_api_read>:
{
   134a4:	b538      	push	{r3, r4, r5, lr}
   134a6:	4614      	mov	r4, r2
   134a8:	461a      	mov	r2, r3
	size_t offset = block * c->block_size + off;
   134aa:	69c5      	ldr	r5, [r0, #28]
	int rc = flash_area_read(fa, offset, buffer, size);
   134ac:	9b04      	ldr	r3, [sp, #16]
   134ae:	fb01 4105 	mla	r1, r1, r5, r4
   134b2:	6800      	ldr	r0, [r0, #0]
   134b4:	f7ff fd15 	bl	12ee2 <flash_area_read>
	return errno_to_lfs(rc);
   134b8:	f7ff ff68 	bl	1338c <errno_to_lfs>
}
   134bc:	bd38      	pop	{r3, r4, r5, pc}

000134be <littlefs_tell>:
{
   134be:	b570      	push	{r4, r5, r6, lr}
   134c0:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   134c2:	6843      	ldr	r3, [r0, #4]
   134c4:	691e      	ldr	r6, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   134c6:	f106 05ec 	add.w	r5, r6, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   134ca:	f04f 32ff 	mov.w	r2, #4294967295
   134ce:	f04f 33ff 	mov.w	r3, #4294967295
   134d2:	4628      	mov	r0, r5
   134d4:	f7fc fc32 	bl	fd3c <z_impl_k_mutex_lock>
	off_t ret = lfs_file_tell(&fs->lfs, LFS_FILEP(fp));
   134d8:	6821      	ldr	r1, [r4, #0]
   134da:	f106 0070 	add.w	r0, r6, #112	; 0x70
   134de:	f001 fec6 	bl	1526e <lfs_file_tell>
   134e2:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   134e4:	4628      	mov	r0, r5
   134e6:	f7fc fcb3 	bl	fe50 <z_impl_k_mutex_unlock>
}
   134ea:	4620      	mov	r0, r4
   134ec:	bd70      	pop	{r4, r5, r6, pc}

000134ee <littlefs_sync>:
{
   134ee:	b570      	push	{r4, r5, r6, lr}
   134f0:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   134f2:	6843      	ldr	r3, [r0, #4]
   134f4:	691e      	ldr	r6, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   134f6:	f106 05ec 	add.w	r5, r6, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   134fa:	f04f 32ff 	mov.w	r2, #4294967295
   134fe:	f04f 33ff 	mov.w	r3, #4294967295
   13502:	4628      	mov	r0, r5
   13504:	f7fc fc1a 	bl	fd3c <z_impl_k_mutex_lock>
	int ret = lfs_file_sync(&fs->lfs, LFS_FILEP(fp));
   13508:	6821      	ldr	r1, [r4, #0]
   1350a:	f106 0070 	add.w	r0, r6, #112	; 0x70
   1350e:	f002 f965 	bl	157dc <lfs_file_sync>
   13512:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   13514:	4628      	mov	r0, r5
   13516:	f7fc fc9b 	bl	fe50 <z_impl_k_mutex_unlock>
	return lfs_to_errno(ret);
   1351a:	4620      	mov	r0, r4
   1351c:	f7ff fefb 	bl	13316 <lfs_to_errno>
}
   13520:	bd70      	pop	{r4, r5, r6, pc}

00013522 <littlefs_truncate>:
{
   13522:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13524:	4604      	mov	r4, r0
   13526:	460d      	mov	r5, r1
	struct fs_littlefs *fs = fp->mp->fs_data;
   13528:	6843      	ldr	r3, [r0, #4]
   1352a:	691f      	ldr	r7, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   1352c:	f107 06ec 	add.w	r6, r7, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   13530:	f04f 32ff 	mov.w	r2, #4294967295
   13534:	f04f 33ff 	mov.w	r3, #4294967295
   13538:	4630      	mov	r0, r6
   1353a:	f7fc fbff 	bl	fd3c <z_impl_k_mutex_lock>
	int ret = lfs_file_truncate(&fs->lfs, LFS_FILEP(fp), length);
   1353e:	462a      	mov	r2, r5
   13540:	6821      	ldr	r1, [r4, #0]
   13542:	f107 0070 	add.w	r0, r7, #112	; 0x70
   13546:	f002 f8c2 	bl	156ce <lfs_file_truncate>
   1354a:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   1354c:	4630      	mov	r0, r6
   1354e:	f7fc fc7f 	bl	fe50 <z_impl_k_mutex_unlock>
	return lfs_to_errno(ret);
   13552:	4620      	mov	r0, r4
   13554:	f7ff fedf 	bl	13316 <lfs_to_errno>
}
   13558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001355a <littlefs_mkdir>:
{
   1355a:	b570      	push	{r4, r5, r6, lr}
   1355c:	4603      	mov	r3, r0
   1355e:	4608      	mov	r0, r1
	struct fs_littlefs *fs = mountp->fs_data;
   13560:	691e      	ldr	r6, [r3, #16]
	path = fs_impl_strip_prefix(path, mountp);
   13562:	4619      	mov	r1, r3
   13564:	f7f3 fbbc 	bl	6ce0 <fs_impl_strip_prefix>
   13568:	4604      	mov	r4, r0
	k_mutex_lock(&fs->mutex, K_FOREVER);
   1356a:	f106 05ec 	add.w	r5, r6, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   1356e:	f04f 32ff 	mov.w	r2, #4294967295
   13572:	f04f 33ff 	mov.w	r3, #4294967295
   13576:	4628      	mov	r0, r5
   13578:	f7fc fbe0 	bl	fd3c <z_impl_k_mutex_lock>
	int ret = lfs_mkdir(&fs->lfs, path);
   1357c:	4621      	mov	r1, r4
   1357e:	f106 0070 	add.w	r0, r6, #112	; 0x70
   13582:	f7fb faa7 	bl	ead4 <lfs_mkdir>
   13586:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   13588:	4628      	mov	r0, r5
   1358a:	f7fc fc61 	bl	fe50 <z_impl_k_mutex_unlock>
	return lfs_to_errno(ret);
   1358e:	4620      	mov	r0, r4
   13590:	f7ff fec1 	bl	13316 <lfs_to_errno>
}
   13594:	bd70      	pop	{r4, r5, r6, pc}

00013596 <littlefs_close>:
{
   13596:	b570      	push	{r4, r5, r6, lr}
   13598:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   1359a:	6843      	ldr	r3, [r0, #4]
   1359c:	691d      	ldr	r5, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   1359e:	f105 06ec 	add.w	r6, r5, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   135a2:	f04f 32ff 	mov.w	r2, #4294967295
   135a6:	f04f 33ff 	mov.w	r3, #4294967295
   135aa:	4630      	mov	r0, r6
   135ac:	f7fc fbc6 	bl	fd3c <z_impl_k_mutex_lock>
	int ret = lfs_file_close(&fs->lfs, LFS_FILEP(fp));
   135b0:	6821      	ldr	r1, [r4, #0]
   135b2:	f105 0070 	add.w	r0, r5, #112	; 0x70
   135b6:	f002 f96b 	bl	15890 <lfs_file_close>
   135ba:	4605      	mov	r5, r0
	return z_impl_k_mutex_unlock(mutex);
   135bc:	4630      	mov	r0, r6
   135be:	f7fc fc47 	bl	fe50 <z_impl_k_mutex_unlock>
	release_file_data(fp);
   135c2:	4620      	mov	r0, r4
   135c4:	f7f3 fd64 	bl	7090 <release_file_data>
	return lfs_to_errno(ret);
   135c8:	4628      	mov	r0, r5
   135ca:	f7ff fea4 	bl	13316 <lfs_to_errno>
}
   135ce:	bd70      	pop	{r4, r5, r6, pc}

000135d0 <littlefs_unlink>:
{
   135d0:	b570      	push	{r4, r5, r6, lr}
   135d2:	4603      	mov	r3, r0
   135d4:	4608      	mov	r0, r1
	struct fs_littlefs *fs = mountp->fs_data;
   135d6:	691e      	ldr	r6, [r3, #16]
	path = fs_impl_strip_prefix(path, mountp);
   135d8:	4619      	mov	r1, r3
   135da:	f7f3 fb81 	bl	6ce0 <fs_impl_strip_prefix>
   135de:	4604      	mov	r4, r0
	k_mutex_lock(&fs->mutex, K_FOREVER);
   135e0:	f106 05ec 	add.w	r5, r6, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   135e4:	f04f 32ff 	mov.w	r2, #4294967295
   135e8:	f04f 33ff 	mov.w	r3, #4294967295
   135ec:	4628      	mov	r0, r5
   135ee:	f7fc fba5 	bl	fd3c <z_impl_k_mutex_lock>
	int ret = lfs_remove(&fs->lfs, path);
   135f2:	4621      	mov	r1, r4
   135f4:	f106 0070 	add.w	r0, r6, #112	; 0x70
   135f8:	f7fb fd38 	bl	f06c <lfs_remove>
   135fc:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   135fe:	4628      	mov	r0, r5
   13600:	f7fc fc26 	bl	fe50 <z_impl_k_mutex_unlock>
	return lfs_to_errno(ret);
   13604:	4620      	mov	r0, r4
   13606:	f7ff fe86 	bl	13316 <lfs_to_errno>
}
   1360a:	bd70      	pop	{r4, r5, r6, pc}

0001360c <littlefs_read>:
{
   1360c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13610:	4604      	mov	r4, r0
   13612:	460d      	mov	r5, r1
   13614:	4616      	mov	r6, r2
	struct fs_littlefs *fs = fp->mp->fs_data;
   13616:	6843      	ldr	r3, [r0, #4]
   13618:	f8d3 8010 	ldr.w	r8, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   1361c:	f108 07ec 	add.w	r7, r8, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   13620:	f04f 32ff 	mov.w	r2, #4294967295
   13624:	f04f 33ff 	mov.w	r3, #4294967295
   13628:	4638      	mov	r0, r7
   1362a:	f7fc fb87 	bl	fd3c <z_impl_k_mutex_lock>
	ssize_t ret = lfs_file_read(&fs->lfs, LFS_FILEP(fp), ptr, len);
   1362e:	4633      	mov	r3, r6
   13630:	462a      	mov	r2, r5
   13632:	6821      	ldr	r1, [r4, #0]
   13634:	f108 0070 	add.w	r0, r8, #112	; 0x70
   13638:	f7fa fce8 	bl	e00c <lfs_file_read>
   1363c:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   1363e:	4638      	mov	r0, r7
   13640:	f7fc fc06 	bl	fe50 <z_impl_k_mutex_unlock>
	return lfs_to_errno(ret);
   13644:	4620      	mov	r0, r4
   13646:	f7ff fe66 	bl	13316 <lfs_to_errno>
}
   1364a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001364e <littlefs_write>:
{
   1364e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13652:	4604      	mov	r4, r0
   13654:	460d      	mov	r5, r1
   13656:	4616      	mov	r6, r2
	struct fs_littlefs *fs = fp->mp->fs_data;
   13658:	6843      	ldr	r3, [r0, #4]
   1365a:	f8d3 8010 	ldr.w	r8, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   1365e:	f108 07ec 	add.w	r7, r8, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   13662:	f04f 32ff 	mov.w	r2, #4294967295
   13666:	f04f 33ff 	mov.w	r3, #4294967295
   1366a:	4638      	mov	r0, r7
   1366c:	f7fc fb66 	bl	fd3c <z_impl_k_mutex_lock>
	ssize_t ret = lfs_file_write(&fs->lfs, LFS_FILEP(fp), ptr, len);
   13670:	4633      	mov	r3, r6
   13672:	462a      	mov	r2, r5
   13674:	6821      	ldr	r1, [r4, #0]
   13676:	f108 0070 	add.w	r0, r8, #112	; 0x70
   1367a:	f001 ff13 	bl	154a4 <lfs_file_write>
   1367e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   13680:	4638      	mov	r0, r7
   13682:	f7fc fbe5 	bl	fe50 <z_impl_k_mutex_unlock>
	return lfs_to_errno(ret);
   13686:	4620      	mov	r0, r4
   13688:	f7ff fe45 	bl	13316 <lfs_to_errno>
}
   1368c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00013690 <littlefs_seek>:
{
   13690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13694:	4604      	mov	r4, r0
   13696:	460d      	mov	r5, r1
   13698:	4616      	mov	r6, r2
	struct fs_littlefs *fs = fp->mp->fs_data;
   1369a:	6843      	ldr	r3, [r0, #4]
   1369c:	f8d3 8010 	ldr.w	r8, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   136a0:	f108 07ec 	add.w	r7, r8, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   136a4:	f04f 32ff 	mov.w	r2, #4294967295
   136a8:	f04f 33ff 	mov.w	r3, #4294967295
   136ac:	4638      	mov	r0, r7
   136ae:	f7fc fb45 	bl	fd3c <z_impl_k_mutex_lock>
	off_t ret = lfs_file_seek(&fs->lfs, LFS_FILEP(fp), off, whence);
   136b2:	4633      	mov	r3, r6
   136b4:	462a      	mov	r2, r5
   136b6:	6821      	ldr	r1, [r4, #0]
   136b8:	f108 0070 	add.w	r0, r8, #112	; 0x70
   136bc:	f001 ffeb 	bl	15696 <lfs_file_seek>
   136c0:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   136c2:	4638      	mov	r0, r7
   136c4:	f7fc fbc4 	bl	fe50 <z_impl_k_mutex_unlock>
	if (ret >= 0) {
   136c8:	2c00      	cmp	r4, #0
   136ca:	db00      	blt.n	136ce <littlefs_seek+0x3e>
		ret = 0;
   136cc:	2400      	movs	r4, #0
	return lfs_to_errno(ret);
   136ce:	4620      	mov	r0, r4
   136d0:	f7ff fe21 	bl	13316 <lfs_to_errno>
}
   136d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000136d8 <littlefs_rename>:
{
   136d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   136da:	4604      	mov	r4, r0
   136dc:	4608      	mov	r0, r1
   136de:	4616      	mov	r6, r2
	struct fs_littlefs *fs = mountp->fs_data;
   136e0:	6927      	ldr	r7, [r4, #16]
	from = fs_impl_strip_prefix(from, mountp);
   136e2:	4621      	mov	r1, r4
   136e4:	f7f3 fafc 	bl	6ce0 <fs_impl_strip_prefix>
   136e8:	4605      	mov	r5, r0
	to = fs_impl_strip_prefix(to, mountp);
   136ea:	4621      	mov	r1, r4
   136ec:	4630      	mov	r0, r6
   136ee:	f7f3 faf7 	bl	6ce0 <fs_impl_strip_prefix>
   136f2:	4604      	mov	r4, r0
	k_mutex_lock(&fs->mutex, K_FOREVER);
   136f4:	f107 06ec 	add.w	r6, r7, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   136f8:	f04f 32ff 	mov.w	r2, #4294967295
   136fc:	f04f 33ff 	mov.w	r3, #4294967295
   13700:	4630      	mov	r0, r6
   13702:	f7fc fb1b 	bl	fd3c <z_impl_k_mutex_lock>
	int ret = lfs_rename(&fs->lfs, from, to);
   13706:	4622      	mov	r2, r4
   13708:	4629      	mov	r1, r5
   1370a:	f107 0070 	add.w	r0, r7, #112	; 0x70
   1370e:	f7fb fd29 	bl	f164 <lfs_rename>
   13712:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   13714:	4630      	mov	r0, r6
   13716:	f7fc fb9b 	bl	fe50 <z_impl_k_mutex_unlock>
	return lfs_to_errno(ret);
   1371a:	4620      	mov	r0, r4
   1371c:	f7ff fdfb 	bl	13316 <lfs_to_errno>
}
   13720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013722 <littlefs_stat>:
{
   13722:	b5f0      	push	{r4, r5, r6, r7, lr}
   13724:	b0c3      	sub	sp, #268	; 0x10c
   13726:	4603      	mov	r3, r0
   13728:	4608      	mov	r0, r1
   1372a:	4615      	mov	r5, r2
	struct fs_littlefs *fs = mountp->fs_data;
   1372c:	691f      	ldr	r7, [r3, #16]
	path = fs_impl_strip_prefix(path, mountp);
   1372e:	4619      	mov	r1, r3
   13730:	f7f3 fad6 	bl	6ce0 <fs_impl_strip_prefix>
   13734:	4604      	mov	r4, r0
	k_mutex_lock(&fs->mutex, K_FOREVER);
   13736:	f107 06ec 	add.w	r6, r7, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   1373a:	f04f 32ff 	mov.w	r2, #4294967295
   1373e:	f04f 33ff 	mov.w	r3, #4294967295
   13742:	4630      	mov	r0, r6
   13744:	f7fc fafa 	bl	fd3c <z_impl_k_mutex_lock>
	int ret = lfs_stat(&fs->lfs, path, &info);
   13748:	466a      	mov	r2, sp
   1374a:	4621      	mov	r1, r4
   1374c:	f107 0070 	add.w	r0, r7, #112	; 0x70
   13750:	f001 fd9b 	bl	1528a <lfs_stat>
   13754:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   13756:	4630      	mov	r0, r6
   13758:	f7fc fb7a 	bl	fe50 <z_impl_k_mutex_unlock>
	if (ret >= 0) {
   1375c:	2c00      	cmp	r4, #0
   1375e:	da04      	bge.n	1376a <littlefs_stat+0x48>
	return lfs_to_errno(ret);
   13760:	4620      	mov	r0, r4
   13762:	f7ff fdd8 	bl	13316 <lfs_to_errno>
}
   13766:	b043      	add	sp, #268	; 0x10c
   13768:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info_to_dirent(&info, entry);
   1376a:	4629      	mov	r1, r5
   1376c:	4668      	mov	r0, sp
   1376e:	f7ff fe6c 	bl	1344a <info_to_dirent>
		ret = 0;
   13772:	2400      	movs	r4, #0
   13774:	e7f4      	b.n	13760 <littlefs_stat+0x3e>

00013776 <littlefs_readdir>:
{
   13776:	b5f0      	push	{r4, r5, r6, r7, lr}
   13778:	b0c3      	sub	sp, #268	; 0x10c
   1377a:	4604      	mov	r4, r0
   1377c:	460d      	mov	r5, r1
	struct fs_littlefs *fs = dp->mp->fs_data;
   1377e:	6843      	ldr	r3, [r0, #4]
   13780:	691f      	ldr	r7, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   13782:	f107 06ec 	add.w	r6, r7, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   13786:	f04f 32ff 	mov.w	r2, #4294967295
   1378a:	f04f 33ff 	mov.w	r3, #4294967295
   1378e:	4630      	mov	r0, r6
   13790:	f7fc fad4 	bl	fd3c <z_impl_k_mutex_lock>
	int ret = lfs_dir_read(&fs->lfs, dp->dirp, &info);
   13794:	466a      	mov	r2, sp
   13796:	6821      	ldr	r1, [r4, #0]
   13798:	f107 0070 	add.w	r0, r7, #112	; 0x70
   1379c:	f7fa f85e 	bl	d85c <lfs_dir_read>
   137a0:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   137a2:	4630      	mov	r0, r6
   137a4:	f7fc fb54 	bl	fe50 <z_impl_k_mutex_unlock>
	if (ret > 0) {
   137a8:	2c00      	cmp	r4, #0
   137aa:	dc03      	bgt.n	137b4 <littlefs_readdir+0x3e>
	} else if (ret == 0) {
   137ac:	b93c      	cbnz	r4, 137be <littlefs_readdir+0x48>
		entry->name[0] = 0;
   137ae:	2300      	movs	r3, #0
   137b0:	706b      	strb	r3, [r5, #1]
   137b2:	e004      	b.n	137be <littlefs_readdir+0x48>
		info_to_dirent(&info, entry);
   137b4:	4629      	mov	r1, r5
   137b6:	4668      	mov	r0, sp
   137b8:	f7ff fe47 	bl	1344a <info_to_dirent>
		ret = 0;
   137bc:	2400      	movs	r4, #0
	return lfs_to_errno(ret);
   137be:	4620      	mov	r0, r4
   137c0:	f7ff fda9 	bl	13316 <lfs_to_errno>
}
   137c4:	b043      	add	sp, #268	; 0x10c
   137c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000137c8 <littlefs_statvfs>:
{
   137c8:	b570      	push	{r4, r5, r6, lr}
   137ca:	4603      	mov	r3, r0
   137cc:	4608      	mov	r0, r1
   137ce:	4615      	mov	r5, r2
	struct fs_littlefs *fs = mountp->fs_data;
   137d0:	691c      	ldr	r4, [r3, #16]
	struct lfs *lfs = &fs->lfs;
   137d2:	f104 0670 	add.w	r6, r4, #112	; 0x70
	stat->f_bsize = lfs->cfg->prog_size;
   137d6:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
   137da:	6992      	ldr	r2, [r2, #24]
   137dc:	602a      	str	r2, [r5, #0]
	stat->f_frsize = lfs->cfg->block_size;
   137de:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
   137e2:	69d2      	ldr	r2, [r2, #28]
   137e4:	606a      	str	r2, [r5, #4]
	stat->f_blocks = lfs->cfg->block_count;
   137e6:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
   137ea:	6a12      	ldr	r2, [r2, #32]
   137ec:	60aa      	str	r2, [r5, #8]
	path = fs_impl_strip_prefix(path, mountp);
   137ee:	4619      	mov	r1, r3
   137f0:	f7f3 fa76 	bl	6ce0 <fs_impl_strip_prefix>
	k_mutex_lock(&fs->mutex, K_FOREVER);
   137f4:	34ec      	adds	r4, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   137f6:	f04f 32ff 	mov.w	r2, #4294967295
   137fa:	f04f 33ff 	mov.w	r3, #4294967295
   137fe:	4620      	mov	r0, r4
   13800:	f7fc fa9c 	bl	fd3c <z_impl_k_mutex_lock>
	ssize_t ret = lfs_fs_size(lfs);
   13804:	4630      	mov	r0, r6
   13806:	f7fa fc8f 	bl	e128 <lfs_fs_size>
   1380a:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
   1380c:	4620      	mov	r0, r4
   1380e:	f7fc fb1f 	bl	fe50 <z_impl_k_mutex_unlock>
	if (ret >= 0) {
   13812:	2e00      	cmp	r6, #0
   13814:	db03      	blt.n	1381e <littlefs_statvfs+0x56>
		stat->f_bfree = stat->f_blocks - ret;
   13816:	68a8      	ldr	r0, [r5, #8]
   13818:	1b80      	subs	r0, r0, r6
   1381a:	60e8      	str	r0, [r5, #12]
		ret = 0;
   1381c:	2600      	movs	r6, #0
	return lfs_to_errno(ret);
   1381e:	4630      	mov	r0, r6
   13820:	f7ff fd79 	bl	13316 <lfs_to_errno>
}
   13824:	bd70      	pop	{r4, r5, r6, pc}

00013826 <in_endpoint_ctx>:
{
   13826:	b508      	push	{r3, lr}
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   13828:	f040 0080 	orr.w	r0, r0, #128	; 0x80
   1382c:	f7f3 fd2e 	bl	728c <endpoint_ctx>
}
   13830:	bd08      	pop	{r3, pc}

00013832 <out_endpoint_ctx>:
{
   13832:	b508      	push	{r3, lr}
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   13834:	f7f3 fd2a 	bl	728c <endpoint_ctx>
}
   13838:	bd08      	pop	{r3, pc}

0001383a <ep_ctx_reset>:
{
   1383a:	b510      	push	{r4, lr}
   1383c:	4604      	mov	r4, r0
	ep_ctx->buf.data = ep_ctx->buf.block.data;
   1383e:	6903      	ldr	r3, [r0, #16]
   13840:	6143      	str	r3, [r0, #20]
	ep_ctx->buf.curr = ep_ctx->buf.data;
   13842:	6183      	str	r3, [r0, #24]
	ep_ctx->buf.len  = 0U;
   13844:	2300      	movs	r3, #0
   13846:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
   13848:	7f83      	ldrb	r3, [r0, #30]
   1384a:	b933      	cbnz	r3, 1385a <ep_ctx_reset+0x20>
	ep_ctx->read_complete = true;
   1384c:	2301      	movs	r3, #1
   1384e:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
   13850:	2300      	movs	r3, #0
   13852:	7763      	strb	r3, [r4, #29]
	ep_ctx->write_in_progress = false;
   13854:	77a3      	strb	r3, [r4, #30]
	ep_ctx->trans_zlp = false;
   13856:	77e3      	strb	r3, [r4, #31]
}
   13858:	bd10      	pop	{r4, pc}
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   1385a:	7a40      	ldrb	r0, [r0, #9]
   1385c:	f7f8 ffd4 	bl	c808 <nrfx_usbd_ep_abort>
   13860:	e7f4      	b.n	1384c <ep_ctx_reset+0x12>

00013862 <hfxo_stop>:
{
   13862:	b510      	push	{r4, lr}
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
   13864:	f100 0320 	add.w	r3, r0, #32
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   13868:	2200      	movs	r2, #0
   1386a:	f3bf 8f5b 	dmb	ish
   1386e:	e853 1f00 	ldrex	r1, [r3]
   13872:	2901      	cmp	r1, #1
   13874:	d103      	bne.n	1387e <hfxo_stop+0x1c>
   13876:	e843 2400 	strex	r4, r2, [r3]
   1387a:	2c00      	cmp	r4, #0
   1387c:	d1f7      	bne.n	1386e <hfxo_stop+0xc>
   1387e:	f3bf 8f5b 	dmb	ish
   13882:	d10d      	bne.n	138a0 <hfxo_stop+0x3e>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
   13884:	69c4      	ldr	r4, [r0, #28]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
   13886:	f100 010c 	add.w	r1, r0, #12
   1388a:	4620      	mov	r0, r4
   1388c:	f7fd ffcb 	bl	11826 <onoff_cancel>

	if (rv == -EALREADY) {
   13890:	f110 0f78 	cmn.w	r0, #120	; 0x78
   13894:	d000      	beq.n	13898 <hfxo_stop+0x36>
}
   13896:	bd10      	pop	{r4, pc}
		rv = onoff_release(mgr);
   13898:	4620      	mov	r0, r4
   1389a:	f7fd ff9e 	bl	117da <onoff_release>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
   1389e:	e7fa      	b.n	13896 <hfxo_stop+0x34>
	return 0;
   138a0:	2000      	movs	r0, #0
   138a2:	e7f8      	b.n	13896 <hfxo_stop+0x34>

000138a4 <usbd_enable_endpoints>:
{
   138a4:	b510      	push	{r4, lr}
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   138a6:	2400      	movs	r4, #0
   138a8:	e003      	b.n	138b2 <usbd_enable_endpoints+0xe>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   138aa:	7a40      	ldrb	r0, [r0, #9]
   138ac:	f7f8 fe06 	bl	c4bc <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   138b0:	3401      	adds	r4, #1
   138b2:	2c07      	cmp	r4, #7
   138b4:	dc06      	bgt.n	138c4 <usbd_enable_endpoints+0x20>
		ep_ctx = in_endpoint_ctx(i);
   138b6:	b2e0      	uxtb	r0, r4
   138b8:	f7ff ffb5 	bl	13826 <in_endpoint_ctx>
		if (ep_ctx->cfg.en) {
   138bc:	7a03      	ldrb	r3, [r0, #8]
   138be:	2b00      	cmp	r3, #0
   138c0:	d0f6      	beq.n	138b0 <usbd_enable_endpoints+0xc>
   138c2:	e7f2      	b.n	138aa <usbd_enable_endpoints+0x6>
		ep_ctx = in_endpoint_ctx(NRF_USBD_EPIN(8));
   138c4:	2088      	movs	r0, #136	; 0x88
   138c6:	f7ff ffae 	bl	13826 <in_endpoint_ctx>
		if (ep_ctx->cfg.en) {
   138ca:	7a03      	ldrb	r3, [r0, #8]
   138cc:	b90b      	cbnz	r3, 138d2 <usbd_enable_endpoints+0x2e>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   138ce:	2400      	movs	r4, #0
   138d0:	e007      	b.n	138e2 <usbd_enable_endpoints+0x3e>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   138d2:	7a40      	ldrb	r0, [r0, #9]
   138d4:	f7f8 fdf2 	bl	c4bc <nrfx_usbd_ep_enable>
   138d8:	e7f9      	b.n	138ce <usbd_enable_endpoints+0x2a>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   138da:	7a40      	ldrb	r0, [r0, #9]
   138dc:	f7f8 fdee 	bl	c4bc <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
   138e0:	3401      	adds	r4, #1
   138e2:	2c07      	cmp	r4, #7
   138e4:	dc06      	bgt.n	138f4 <usbd_enable_endpoints+0x50>
		ep_ctx = out_endpoint_ctx(i);
   138e6:	b2e0      	uxtb	r0, r4
   138e8:	f7ff ffa3 	bl	13832 <out_endpoint_ctx>
		if (ep_ctx->cfg.en) {
   138ec:	7a03      	ldrb	r3, [r0, #8]
   138ee:	2b00      	cmp	r3, #0
   138f0:	d0f6      	beq.n	138e0 <usbd_enable_endpoints+0x3c>
   138f2:	e7f2      	b.n	138da <usbd_enable_endpoints+0x36>
		ep_ctx = out_endpoint_ctx(NRF_USBD_EPOUT(8));
   138f4:	2008      	movs	r0, #8
   138f6:	f7ff ff9c 	bl	13832 <out_endpoint_ctx>
		if (ep_ctx->cfg.en) {
   138fa:	7a03      	ldrb	r3, [r0, #8]
   138fc:	b903      	cbnz	r3, 13900 <usbd_enable_endpoints+0x5c>
}
   138fe:	bd10      	pop	{r4, pc}
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   13900:	7a40      	ldrb	r0, [r0, #9]
   13902:	f7f8 fddb 	bl	c4bc <nrfx_usbd_ep_enable>
}
   13906:	e7fa      	b.n	138fe <usbd_enable_endpoints+0x5a>

00013908 <hfxo_start>:
{
   13908:	b508      	push	{r3, lr}
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
   1390a:	f100 0320 	add.w	r3, r0, #32
   1390e:	2201      	movs	r2, #1
   13910:	f3bf 8f5b 	dmb	ish
   13914:	e853 1f00 	ldrex	r1, [r3]
   13918:	2900      	cmp	r1, #0
   1391a:	d104      	bne.n	13926 <hfxo_start+0x1e>
   1391c:	e843 2c00 	strex	ip, r2, [r3]
   13920:	f1bc 0f00 	cmp.w	ip, #0
   13924:	d1f6      	bne.n	13914 <hfxo_start+0xc>
   13926:	f3bf 8f5b 	dmb	ish
   1392a:	d10a      	bne.n	13942 <hfxo_start+0x3a>
	*notify = (struct sys_notify){
   1392c:	2300      	movs	r3, #0
   1392e:	6103      	str	r3, [r0, #16]
   13930:	6183      	str	r3, [r0, #24]
   13932:	2301      	movs	r3, #1
   13934:	6143      	str	r3, [r0, #20]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
   13936:	f100 010c 	add.w	r1, r0, #12
   1393a:	69c0      	ldr	r0, [r0, #28]
   1393c:	f7fd fef1 	bl	11722 <onoff_request>
}
   13940:	bd08      	pop	{r3, pc}
	return 0;
   13942:	2000      	movs	r0, #0
   13944:	e7fc      	b.n	13940 <hfxo_start+0x38>

00013946 <usb_dc_ep_read>:
{
   13946:	b570      	push	{r4, r5, r6, lr}
   13948:	4605      	mov	r5, r0
   1394a:	460c      	mov	r4, r1
   1394c:	4616      	mov	r6, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
   1394e:	f7f4 fea7 	bl	86a0 <usb_dc_ep_read_wait>
	if (ret) {
   13952:	b918      	cbnz	r0, 1395c <usb_dc_ep_read+0x16>
	if (!data && !max_data_len) {
   13954:	b11c      	cbz	r4, 1395e <usb_dc_ep_read+0x18>
	ret = usb_dc_ep_read_continue(ep);
   13956:	4628      	mov	r0, r5
   13958:	f7f4 ff1c 	bl	8794 <usb_dc_ep_read_continue>
}
   1395c:	bd70      	pop	{r4, r5, r6, pc}
	if (!data && !max_data_len) {
   1395e:	2e00      	cmp	r6, #0
   13960:	d1f9      	bne.n	13956 <usb_dc_ep_read+0x10>
   13962:	e7fb      	b.n	1395c <usb_dc_ep_read+0x16>

00013964 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   13964:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   13966:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   1396a:	0089      	lsls	r1, r1, #2
   1396c:	3138      	adds	r1, #56	; 0x38
}
   1396e:	4408      	add	r0, r1
   13970:	4770      	bx	lr

00013972 <get_sub_config>:
	const struct nrf_clock_control_config *config =
   13972:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
   13974:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   13978:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   1397c:	4770      	bx	lr

0001397e <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   1397e:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   13980:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   13984:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   13988:	4770      	bx	lr

0001398a <get_status>:
{
   1398a:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1398c:	b2c9      	uxtb	r1, r1
   1398e:	f7ff ffe9 	bl	13964 <get_sub_data>
   13992:	6880      	ldr	r0, [r0, #8]
}
   13994:	f000 0007 	and.w	r0, r0, #7
   13998:	bd08      	pop	{r3, pc}

0001399a <set_off_state>:
	__asm__ volatile(
   1399a:	f04f 0320 	mov.w	r3, #32
   1399e:	f3ef 8211 	mrs	r2, BASEPRI
   139a2:	f383 8812 	msr	BASEPRI_MAX, r3
   139a6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   139aa:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   139ac:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   139b0:	d001      	beq.n	139b6 <set_off_state+0x1c>
   139b2:	428b      	cmp	r3, r1
   139b4:	d107      	bne.n	139c6 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   139b6:	2301      	movs	r3, #1
   139b8:	6003      	str	r3, [r0, #0]
	int err = 0;
   139ba:	2000      	movs	r0, #0
	__asm__ volatile(
   139bc:	f382 8811 	msr	BASEPRI, r2
   139c0:	f3bf 8f6f 	isb	sy
}
   139c4:	4770      	bx	lr
		err = -EPERM;
   139c6:	f04f 30ff 	mov.w	r0, #4294967295
   139ca:	e7f7      	b.n	139bc <set_off_state+0x22>

000139cc <set_starting_state>:
{
   139cc:	b410      	push	{r4}
	__asm__ volatile(
   139ce:	f04f 0320 	mov.w	r3, #32
   139d2:	f3ef 8211 	mrs	r2, BASEPRI
   139d6:	f383 8812 	msr	BASEPRI_MAX, r3
   139da:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   139de:	6803      	ldr	r3, [r0, #0]
   139e0:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   139e4:	f003 0307 	and.w	r3, r3, #7
   139e8:	2b01      	cmp	r3, #1
   139ea:	d009      	beq.n	13a00 <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
   139ec:	428c      	cmp	r4, r1
   139ee:	d00a      	beq.n	13a06 <set_starting_state+0x3a>
		err = -EPERM;
   139f0:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   139f4:	f382 8811 	msr	BASEPRI, r2
   139f8:	f3bf 8f6f 	isb	sy
}
   139fc:	bc10      	pop	{r4}
   139fe:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   13a00:	6001      	str	r1, [r0, #0]
	int err = 0;
   13a02:	2000      	movs	r0, #0
   13a04:	e7f6      	b.n	139f4 <set_starting_state+0x28>
		err = -EALREADY;
   13a06:	f06f 0077 	mvn.w	r0, #119	; 0x77
   13a0a:	e7f3      	b.n	139f4 <set_starting_state+0x28>

00013a0c <set_on_state>:
	__asm__ volatile(
   13a0c:	f04f 0320 	mov.w	r3, #32
   13a10:	f3ef 8211 	mrs	r2, BASEPRI
   13a14:	f383 8812 	msr	BASEPRI_MAX, r3
   13a18:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   13a1c:	6803      	ldr	r3, [r0, #0]
   13a1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   13a22:	f043 0302 	orr.w	r3, r3, #2
   13a26:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   13a28:	f382 8811 	msr	BASEPRI, r2
   13a2c:	f3bf 8f6f 	isb	sy
}
   13a30:	4770      	bx	lr

00013a32 <clkstarted_handle>:
{
   13a32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13a34:	4606      	mov	r6, r0
   13a36:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   13a38:	f7ff ff94 	bl	13964 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   13a3c:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   13a3e:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   13a40:	2300      	movs	r3, #0
   13a42:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   13a46:	f7ff ffe1 	bl	13a0c <set_on_state>
	if (callback) {
   13a4a:	b11d      	cbz	r5, 13a54 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   13a4c:	463a      	mov	r2, r7
   13a4e:	4621      	mov	r1, r4
   13a50:	4630      	mov	r0, r6
   13a52:	47a8      	blx	r5
}
   13a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013a56 <stop>:
{
   13a56:	b570      	push	{r4, r5, r6, lr}
   13a58:	4606      	mov	r6, r0
   13a5a:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   13a5c:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   13a5e:	4621      	mov	r1, r4
   13a60:	f7ff ff80 	bl	13964 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   13a64:	4629      	mov	r1, r5
   13a66:	3008      	adds	r0, #8
   13a68:	f7ff ff97 	bl	1399a <set_off_state>
	if (err < 0) {
   13a6c:	2800      	cmp	r0, #0
   13a6e:	db06      	blt.n	13a7e <stop+0x28>
	get_sub_config(dev, type)->stop();
   13a70:	4621      	mov	r1, r4
   13a72:	4630      	mov	r0, r6
   13a74:	f7ff ff7d 	bl	13972 <get_sub_config>
   13a78:	6843      	ldr	r3, [r0, #4]
   13a7a:	4798      	blx	r3
	return 0;
   13a7c:	2000      	movs	r0, #0
}
   13a7e:	bd70      	pop	{r4, r5, r6, pc}

00013a80 <api_stop>:
{
   13a80:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   13a82:	2280      	movs	r2, #128	; 0x80
   13a84:	f7ff ffe7 	bl	13a56 <stop>
}
   13a88:	bd08      	pop	{r3, pc}

00013a8a <async_start>:
{
   13a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13a8e:	4606      	mov	r6, r0
   13a90:	4690      	mov	r8, r2
   13a92:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   13a94:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   13a96:	4629      	mov	r1, r5
   13a98:	f7ff ff64 	bl	13964 <get_sub_data>
   13a9c:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   13a9e:	9906      	ldr	r1, [sp, #24]
   13aa0:	3008      	adds	r0, #8
   13aa2:	f7ff ff93 	bl	139cc <set_starting_state>
	if (err < 0) {
   13aa6:	2800      	cmp	r0, #0
   13aa8:	db09      	blt.n	13abe <async_start+0x34>
	subdata->cb = cb;
   13aaa:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   13aae:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   13ab0:	4629      	mov	r1, r5
   13ab2:	4630      	mov	r0, r6
   13ab4:	f7ff ff5d 	bl	13972 <get_sub_config>
   13ab8:	6803      	ldr	r3, [r0, #0]
   13aba:	4798      	blx	r3
	return 0;
   13abc:	2000      	movs	r0, #0
}
   13abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00013ac2 <api_start>:
{
   13ac2:	b510      	push	{r4, lr}
   13ac4:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   13ac6:	2480      	movs	r4, #128	; 0x80
   13ac8:	9400      	str	r4, [sp, #0]
   13aca:	f7ff ffde 	bl	13a8a <async_start>
}
   13ace:	b002      	add	sp, #8
   13ad0:	bd10      	pop	{r4, pc}

00013ad2 <onoff_started_callback>:
{
   13ad2:	b510      	push	{r4, lr}
   13ad4:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   13ad6:	b2c9      	uxtb	r1, r1
   13ad8:	f7ff ff51 	bl	1397e <get_onoff_manager>
	notify(mgr, 0);
   13adc:	2100      	movs	r1, #0
   13ade:	47a0      	blx	r4
}
   13ae0:	bd10      	pop	{r4, pc}

00013ae2 <hfclk_start>:
{
   13ae2:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   13ae4:	2001      	movs	r0, #1
   13ae6:	f7f6 fc63 	bl	a3b0 <nrfx_clock_start>
}
   13aea:	bd08      	pop	{r3, pc}

00013aec <lfclk_start>:
{
   13aec:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   13aee:	2000      	movs	r0, #0
   13af0:	f7f6 fc5e 	bl	a3b0 <nrfx_clock_start>
}
   13af4:	bd08      	pop	{r3, pc}

00013af6 <hfclk_stop>:
{
   13af6:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   13af8:	2001      	movs	r0, #1
   13afa:	f7f6 fc91 	bl	a420 <nrfx_clock_stop>
}
   13afe:	bd08      	pop	{r3, pc}

00013b00 <lfclk_stop>:
{
   13b00:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   13b02:	2000      	movs	r0, #0
   13b04:	f7f6 fc8c 	bl	a420 <nrfx_clock_stop>
}
   13b08:	bd08      	pop	{r3, pc}

00013b0a <blocking_start_callback>:
{
   13b0a:	b508      	push	{r3, lr}
   13b0c:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   13b0e:	f7fc fa1f 	bl	ff50 <z_impl_k_sem_give>
}
   13b12:	bd08      	pop	{r3, pc}

00013b14 <gpio_nrfx_port_get_raw>:
	return port->config;
   13b14:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   13b16:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   13b18:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   13b1c:	600b      	str	r3, [r1, #0]
}
   13b1e:	2000      	movs	r0, #0
   13b20:	4770      	bx	lr

00013b22 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   13b22:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   13b24:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   13b26:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   13b2a:	4042      	eors	r2, r0
   13b2c:	400a      	ands	r2, r1
   13b2e:	4042      	eors	r2, r0
    p_reg->OUT = value;
   13b30:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   13b34:	2000      	movs	r0, #0
   13b36:	4770      	bx	lr

00013b38 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   13b38:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   13b3a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   13b3c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
   13b40:	2000      	movs	r0, #0
   13b42:	4770      	bx	lr

00013b44 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   13b44:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   13b46:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   13b48:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   13b4c:	2000      	movs	r0, #0
   13b4e:	4770      	bx	lr

00013b50 <gpio_nrfx_port_toggle_bits>:
	return port->config;
   13b50:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   13b52:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   13b54:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   13b58:	404b      	eors	r3, r1
    p_reg->OUT = value;
   13b5a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   13b5e:	2000      	movs	r0, #0
   13b60:	4770      	bx	lr

00013b62 <gpio_nrfx_manage_callback>:
{
   13b62:	b470      	push	{r4, r5, r6}
	return port->data;
   13b64:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   13b66:	1d05      	adds	r5, r0, #4
	return list->head;
   13b68:	6843      	ldr	r3, [r0, #4]
	if (!sys_slist_is_empty(callbacks)) {
   13b6a:	b1db      	cbz	r3, 13ba4 <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   13b6c:	460e      	mov	r6, r1
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   13b6e:	2400      	movs	r4, #0
   13b70:	e00a      	b.n	13b88 <gpio_nrfx_manage_callback+0x26>
	return node->next;
   13b72:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   13b74:	6043      	str	r3, [r0, #4]
	return list->tail;
   13b76:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   13b78:	42a1      	cmp	r1, r4
   13b7a:	d10f      	bne.n	13b9c <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   13b7c:	606b      	str	r3, [r5, #4]
}
   13b7e:	e00d      	b.n	13b9c <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   13b80:	606c      	str	r4, [r5, #4]
}
   13b82:	e00b      	b.n	13b9c <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   13b84:	461c      	mov	r4, r3
   13b86:	681b      	ldr	r3, [r3, #0]
   13b88:	b15b      	cbz	r3, 13ba2 <gpio_nrfx_manage_callback+0x40>
   13b8a:	429e      	cmp	r6, r3
   13b8c:	d1fa      	bne.n	13b84 <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
   13b8e:	2c00      	cmp	r4, #0
   13b90:	d0ef      	beq.n	13b72 <gpio_nrfx_manage_callback+0x10>
	return node->next;
   13b92:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
   13b94:	6023      	str	r3, [r4, #0]
	return list->tail;
   13b96:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   13b98:	4299      	cmp	r1, r3
   13b9a:	d0f1      	beq.n	13b80 <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
   13b9c:	2300      	movs	r3, #0
   13b9e:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   13ba0:	e000      	b.n	13ba4 <gpio_nrfx_manage_callback+0x42>
			if (!set) {
   13ba2:	b152      	cbz	r2, 13bba <gpio_nrfx_manage_callback+0x58>
	if (set) {
   13ba4:	b162      	cbz	r2, 13bc0 <gpio_nrfx_manage_callback+0x5e>
	return list->head;
   13ba6:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
   13ba8:	600b      	str	r3, [r1, #0]
	list->head = node;
   13baa:	6041      	str	r1, [r0, #4]
	return list->tail;
   13bac:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   13bae:	b10b      	cbz	r3, 13bb4 <gpio_nrfx_manage_callback+0x52>
	return 0;
   13bb0:	2000      	movs	r0, #0
   13bb2:	e006      	b.n	13bc2 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   13bb4:	6069      	str	r1, [r5, #4]
   13bb6:	2000      	movs	r0, #0
}
   13bb8:	e003      	b.n	13bc2 <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
   13bba:	f06f 0015 	mvn.w	r0, #21
   13bbe:	e000      	b.n	13bc2 <gpio_nrfx_manage_callback+0x60>
	return 0;
   13bc0:	2000      	movs	r0, #0
}
   13bc2:	bc70      	pop	{r4, r5, r6}
   13bc4:	4770      	bx	lr

00013bc6 <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
   13bc6:	b510      	push	{r4, lr}
   13bc8:	4604      	mov	r4, r0
   13bca:	2200      	movs	r2, #0
   13bcc:	2101      	movs	r1, #1
   13bce:	2003      	movs	r0, #3
   13bd0:	f7f1 fe40 	bl	5854 <z_arm_irq_priority_set>
   13bd4:	4620      	mov	r0, r4
   13bd6:	f7f5 fc8b 	bl	94f0 <init_twi>
   13bda:	bd10      	pop	{r4, pc}

00013bdc <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
   13bdc:	b510      	push	{r4, lr}
   13bde:	b082      	sub	sp, #8
   13be0:	460c      	mov	r4, r1
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
   13be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   13be6:	6e51      	ldr	r1, [r2, #100]	; 0x64
   13be8:	6e53      	ldr	r3, [r2, #100]	; 0x64
	struct nrf_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
   13bea:	0a1b      	lsrs	r3, r3, #8
   13bec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   13bf0:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
   13bf4:	6e51      	ldr	r1, [r2, #100]	; 0x64
   13bf6:	0209      	lsls	r1, r1, #8
   13bf8:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   13bfc:	430b      	orrs	r3, r1
   13bfe:	6e51      	ldr	r1, [r2, #100]	; 0x64
   13c00:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   13c04:	9300      	str	r3, [sp, #0]
   13c06:	6e11      	ldr	r1, [r2, #96]	; 0x60
   13c08:	6e13      	ldr	r3, [r2, #96]	; 0x60
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   13c0a:	0a1b      	lsrs	r3, r3, #8
   13c0c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   13c10:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
   13c14:	6e11      	ldr	r1, [r2, #96]	; 0x60
   13c16:	0209      	lsls	r1, r1, #8
   13c18:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   13c1c:	430b      	orrs	r3, r1
   13c1e:	6e12      	ldr	r2, [r2, #96]	; 0x60
   13c20:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   13c24:	9301      	str	r3, [sp, #4]

	if (length > sizeof(dev_id.id)) {
   13c26:	2c08      	cmp	r4, #8
   13c28:	d900      	bls.n	13c2c <z_impl_hwinfo_get_device_id+0x50>
		length = sizeof(dev_id.id);
   13c2a:	2408      	movs	r4, #8
	}

	memcpy(buffer, dev_id.id, length);
   13c2c:	4622      	mov	r2, r4
   13c2e:	4669      	mov	r1, sp
   13c30:	f7ff fade 	bl	131f0 <memcpy>

	return length;
}
   13c34:	4620      	mov	r0, r4
   13c36:	b002      	add	sp, #8
   13c38:	bd10      	pop	{r4, pc}

00013c3a <shift_write_context>:
	w_ctx->flash_addr += shift;
   13c3a:	684b      	ldr	r3, [r1, #4]
   13c3c:	4403      	add	r3, r0
   13c3e:	604b      	str	r3, [r1, #4]
	w_ctx->data_addr += shift;
   13c40:	680b      	ldr	r3, [r1, #0]
   13c42:	4403      	add	r3, r0
   13c44:	600b      	str	r3, [r1, #0]
	w_ctx->len -= shift;
   13c46:	688b      	ldr	r3, [r1, #8]
   13c48:	1a18      	subs	r0, r3, r0
   13c4a:	6088      	str	r0, [r1, #8]
}
   13c4c:	4770      	bx	lr

00013c4e <erase_op>:
{
   13c4e:	b570      	push	{r4, r5, r6, lr}
   13c50:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   13c52:	f000 fb67 	bl	14324 <nrfx_nvmc_flash_page_size_get>
   13c56:	4605      	mov	r5, r0
		if (SUSPEND_POFWARN()) {
   13c58:	f7f5 fc96 	bl	9588 <suspend_pofwarn>
   13c5c:	4606      	mov	r6, r0
   13c5e:	b970      	cbnz	r0, 13c7e <erase_op+0x30>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   13c60:	6860      	ldr	r0, [r4, #4]
   13c62:	f7f6 fd41 	bl	a6e8 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   13c66:	68a3      	ldr	r3, [r4, #8]
   13c68:	1b5b      	subs	r3, r3, r5
   13c6a:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   13c6c:	6863      	ldr	r3, [r4, #4]
   13c6e:	442b      	add	r3, r5
   13c70:	6063      	str	r3, [r4, #4]
		RESUME_POFWARN();
   13c72:	f7f5 fcbb 	bl	95ec <restore_pofwarn>
	} while (e_ctx->len > 0);
   13c76:	68a3      	ldr	r3, [r4, #8]
   13c78:	2b00      	cmp	r3, #0
   13c7a:	d1ed      	bne.n	13c58 <erase_op+0xa>
   13c7c:	e001      	b.n	13c82 <erase_op+0x34>
			return -ECANCELED;
   13c7e:	f06f 068b 	mvn.w	r6, #139	; 0x8b
}
   13c82:	4630      	mov	r0, r6
   13c84:	bd70      	pop	{r4, r5, r6, pc}

00013c86 <erase>:
{
   13c86:	b500      	push	{lr}
   13c88:	b085      	sub	sp, #20
	struct flash_context context = {
   13c8a:	2300      	movs	r3, #0
   13c8c:	9301      	str	r3, [sp, #4]
   13c8e:	9002      	str	r0, [sp, #8]
   13c90:	9103      	str	r1, [sp, #12]
	return	erase_op(&context);
   13c92:	a801      	add	r0, sp, #4
   13c94:	f7ff ffdb 	bl	13c4e <erase_op>
}
   13c98:	b005      	add	sp, #20
   13c9a:	f85d fb04 	ldr.w	pc, [sp], #4

00013c9e <write_op>:
{
   13c9e:	b510      	push	{r4, lr}
   13ca0:	4604      	mov	r4, r0
	while (w_ctx->len >= sizeof(uint32_t)) {
   13ca2:	68a3      	ldr	r3, [r4, #8]
   13ca4:	2b03      	cmp	r3, #3
   13ca6:	d90e      	bls.n	13cc6 <write_op+0x28>
		if (SUSPEND_POFWARN()) {
   13ca8:	f7f5 fc6e 	bl	9588 <suspend_pofwarn>
   13cac:	b978      	cbnz	r0, 13cce <write_op+0x30>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   13cae:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   13cb0:	6819      	ldr	r1, [r3, #0]
   13cb2:	6860      	ldr	r0, [r4, #4]
   13cb4:	f000 fb26 	bl	14304 <nrfx_nvmc_word_write>
		RESUME_POFWARN();
   13cb8:	f7f5 fc98 	bl	95ec <restore_pofwarn>
		shift_write_context(sizeof(uint32_t), w_ctx);
   13cbc:	4621      	mov	r1, r4
   13cbe:	2004      	movs	r0, #4
   13cc0:	f7ff ffbb 	bl	13c3a <shift_write_context>
   13cc4:	e7ed      	b.n	13ca2 <write_op+0x4>
	nvmc_wait_ready();
   13cc6:	f7f5 fc49 	bl	955c <nvmc_wait_ready>
	return FLASH_OP_DONE;
   13cca:	2000      	movs	r0, #0
}
   13ccc:	bd10      	pop	{r4, pc}
			return -ECANCELED;
   13cce:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   13cd2:	e7fb      	b.n	13ccc <write_op+0x2e>

00013cd4 <write>:
{
   13cd4:	b500      	push	{lr}
   13cd6:	b085      	sub	sp, #20
	struct flash_context context = {
   13cd8:	9101      	str	r1, [sp, #4]
   13cda:	9002      	str	r0, [sp, #8]
   13cdc:	9203      	str	r2, [sp, #12]
	return write_op(&context);
   13cde:	a801      	add	r0, sp, #4
   13ce0:	f7ff ffdd 	bl	13c9e <write_op>
}
   13ce4:	b005      	add	sp, #20
   13ce6:	f85d fb04 	ldr.w	pc, [sp], #4

00013cea <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   13cea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13cee:	b086      	sub	sp, #24
   13cf0:	4689      	mov	r9, r1
   13cf2:	4690      	mov	r8, r2
	const struct flash_driver_api *api = dev->api;
   13cf4:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   13cf6:	695b      	ldr	r3, [r3, #20]
   13cf8:	aa01      	add	r2, sp, #4
   13cfa:	a905      	add	r1, sp, #20
   13cfc:	4798      	blx	r3
	off_t off = 0;
   13cfe:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   13d00:	4626      	mov	r6, r4

	for (block = 0; block < num_blocks; block++) {
   13d02:	46a2      	mov	sl, r4
   13d04:	9b01      	ldr	r3, [sp, #4]
   13d06:	4553      	cmp	r3, sl
   13d08:	d916      	bls.n	13d38 <flash_page_foreach+0x4e>
		const struct flash_pages_layout *l = &layout[block];
   13d0a:	9f05      	ldr	r7, [sp, #20]
   13d0c:	eb07 07ca 	add.w	r7, r7, sl, lsl #3
		page_info.size = l->pages_size;
   13d10:	687b      	ldr	r3, [r7, #4]
   13d12:	9303      	str	r3, [sp, #12]

		for (i = 0; i < l->pages_count; i++) {
   13d14:	2500      	movs	r5, #0
   13d16:	683b      	ldr	r3, [r7, #0]
   13d18:	42ab      	cmp	r3, r5
   13d1a:	d90a      	bls.n	13d32 <flash_page_foreach+0x48>
			page_info.start_offset = off;
   13d1c:	9402      	str	r4, [sp, #8]
			page_info.index = page;
   13d1e:	9604      	str	r6, [sp, #16]

			if (!cb(&page_info, data)) {
   13d20:	4641      	mov	r1, r8
   13d22:	a802      	add	r0, sp, #8
   13d24:	47c8      	blx	r9
   13d26:	b138      	cbz	r0, 13d38 <flash_page_foreach+0x4e>
				return;
			}

			off += page_info.size;
   13d28:	9b03      	ldr	r3, [sp, #12]
   13d2a:	441c      	add	r4, r3
			page++;
   13d2c:	3601      	adds	r6, #1
		for (i = 0; i < l->pages_count; i++) {
   13d2e:	3501      	adds	r5, #1
   13d30:	e7f1      	b.n	13d16 <flash_page_foreach+0x2c>
	for (block = 0; block < num_blocks; block++) {
   13d32:	f10a 0a01 	add.w	sl, sl, #1
   13d36:	e7e5      	b.n	13d04 <flash_page_foreach+0x1a>
		}
	}
}
   13d38:	b006      	add	sp, #24
   13d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00013d3e <endtx_isr>:
	return dev->config;
   13d3e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   13d40:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   13d42:	f04f 0120 	mov.w	r1, #32
   13d46:	f3ef 8211 	mrs	r2, BASEPRI
   13d4a:	f381 8812 	msr	BASEPRI_MAX, r1
   13d4e:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13d52:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   13d56:	b131      	cbz	r1, 13d66 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13d58:	2100      	movs	r1, #0
   13d5a:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   13d5e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13d62:	2101      	movs	r1, #1
   13d64:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   13d66:	f382 8811 	msr	BASEPRI, r2
   13d6a:	f3bf 8f6f 	isb	sy
}
   13d6e:	4770      	bx	lr

00013d70 <uarte_nrfx_isr_int>:
{
   13d70:	b538      	push	{r3, r4, r5, lr}
   13d72:	4604      	mov	r4, r0
	return dev->config;
   13d74:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   13d76:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   13d78:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   13d7c:	f413 7f80 	tst.w	r3, #256	; 0x100
   13d80:	d003      	beq.n	13d8a <uarte_nrfx_isr_int+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13d82:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   13d86:	2b00      	cmp	r3, #0
   13d88:	d139      	bne.n	13dfe <uarte_nrfx_isr_int+0x8e>
	return dev->config;
   13d8a:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   13d8c:	685b      	ldr	r3, [r3, #4]
   13d8e:	f013 0f10 	tst.w	r3, #16
   13d92:	d01a      	beq.n	13dca <uarte_nrfx_isr_int+0x5a>
	__asm__ volatile(
   13d94:	f04f 0320 	mov.w	r3, #32
   13d98:	f3ef 8211 	mrs	r2, BASEPRI
   13d9c:	f383 8812 	msr	BASEPRI_MAX, r3
   13da0:	f3bf 8f6f 	isb	sy
   13da4:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   13da8:	b113      	cbz	r3, 13db0 <uarte_nrfx_isr_int+0x40>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   13daa:	2300      	movs	r3, #0
   13dac:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	return dev->data;
   13db0:	6923      	ldr	r3, [r4, #16]
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   13db2:	68db      	ldr	r3, [r3, #12]
   13db4:	b10b      	cbz	r3, 13dba <uarte_nrfx_isr_int+0x4a>
   13db6:	691b      	ldr	r3, [r3, #16]
   13db8:	b91b      	cbnz	r3, 13dc2 <uarte_nrfx_isr_int+0x52>
    p_reg->INTENCLR = mask;
   13dba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   13dbe:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
	__asm__ volatile(
   13dc2:	f382 8811 	msr	BASEPRI, r2
   13dc6:	f3bf 8f6f 	isb	sy
	return dev->data;
   13dca:	6923      	ldr	r3, [r4, #16]
	if (!data->int_driven) {
   13dcc:	68da      	ldr	r2, [r3, #12]
   13dce:	b1aa      	cbz	r2, 13dfc <uarte_nrfx_isr_int+0x8c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13dd0:	f8d5 1158 	ldr.w	r1, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   13dd4:	b121      	cbz	r1, 13de0 <uarte_nrfx_isr_int+0x70>
		data->int_driven->fifo_fill_lock = 0;
   13dd6:	2100      	movs	r1, #0
   13dd8:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   13dda:	68da      	ldr	r2, [r3, #12]
   13ddc:	7b92      	ldrb	r2, [r2, #14]
   13dde:	b98a      	cbnz	r2, 13e04 <uarte_nrfx_isr_int+0x94>
   13de0:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   13de4:	b122      	cbz	r2, 13df0 <uarte_nrfx_isr_int+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13de6:	2200      	movs	r2, #0
   13de8:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
   13dec:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (data->int_driven->cb) {
   13df0:	68da      	ldr	r2, [r3, #12]
   13df2:	6813      	ldr	r3, [r2, #0]
   13df4:	b113      	cbz	r3, 13dfc <uarte_nrfx_isr_int+0x8c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   13df6:	6851      	ldr	r1, [r2, #4]
   13df8:	4620      	mov	r0, r4
   13dfa:	4798      	blx	r3
}
   13dfc:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   13dfe:	f7ff ff9e 	bl	13d3e <endtx_isr>
   13e02:	e7c2      	b.n	13d8a <uarte_nrfx_isr_int+0x1a>
    p_reg->INTENCLR = mask;
   13e04:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   13e08:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   13e0c:	68db      	ldr	r3, [r3, #12]
   13e0e:	7399      	strb	r1, [r3, #14]
			return;
   13e10:	e7f4      	b.n	13dfc <uarte_nrfx_isr_int+0x8c>

00013e12 <uarte_nrfx_configure>:
{
   13e12:	b570      	push	{r4, r5, r6, lr}
   13e14:	b082      	sub	sp, #8
   13e16:	4605      	mov	r5, r0
   13e18:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
   13e1a:	794b      	ldrb	r3, [r1, #5]
   13e1c:	2b01      	cmp	r3, #1
   13e1e:	d006      	beq.n	13e2e <uarte_nrfx_configure+0x1c>
   13e20:	2b03      	cmp	r3, #3
   13e22:	d011      	beq.n	13e48 <uarte_nrfx_configure+0x36>
   13e24:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   13e28:	4618      	mov	r0, r3
   13e2a:	b002      	add	sp, #8
   13e2c:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   13e2e:	2300      	movs	r3, #0
   13e30:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   13e34:	79a3      	ldrb	r3, [r4, #6]
   13e36:	2b03      	cmp	r3, #3
   13e38:	d140      	bne.n	13ebc <uarte_nrfx_configure+0xaa>
	switch (cfg->flow_ctrl) {
   13e3a:	79e3      	ldrb	r3, [r4, #7]
   13e3c:	b143      	cbz	r3, 13e50 <uarte_nrfx_configure+0x3e>
   13e3e:	2b01      	cmp	r3, #1
   13e40:	d010      	beq.n	13e64 <uarte_nrfx_configure+0x52>
   13e42:	f06f 0385 	mvn.w	r3, #133	; 0x85
   13e46:	e7ef      	b.n	13e28 <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   13e48:	2310      	movs	r3, #16
   13e4a:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   13e4e:	e7f1      	b.n	13e34 <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   13e50:	2300      	movs	r3, #0
   13e52:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
   13e56:	7923      	ldrb	r3, [r4, #4]
   13e58:	b183      	cbz	r3, 13e7c <uarte_nrfx_configure+0x6a>
   13e5a:	2b02      	cmp	r3, #2
   13e5c:	d02a      	beq.n	13eb4 <uarte_nrfx_configure+0xa2>
   13e5e:	f06f 0385 	mvn.w	r3, #133	; 0x85
   13e62:	e7e1      	b.n	13e28 <uarte_nrfx_configure+0x16>
	return dev->config;
   13e64:	686b      	ldr	r3, [r5, #4]
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
   13e66:	685b      	ldr	r3, [r3, #4]
   13e68:	f003 0201 	and.w	r2, r3, #1
   13e6c:	f003 0302 	and.w	r3, r3, #2
   13e70:	4313      	orrs	r3, r2
   13e72:	d026      	beq.n	13ec2 <uarte_nrfx_configure+0xb0>
			uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   13e74:	2301      	movs	r3, #1
   13e76:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   13e7a:	e7ec      	b.n	13e56 <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   13e7c:	2300      	movs	r3, #0
   13e7e:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   13e82:	6821      	ldr	r1, [r4, #0]
   13e84:	4628      	mov	r0, r5
   13e86:	f7f5 fcd7 	bl	9838 <baudrate_set>
   13e8a:	4603      	mov	r3, r0
   13e8c:	b9e0      	cbnz	r0, 13ec8 <uarte_nrfx_configure+0xb6>
	return dev->config;
   13e8e:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
   13e90:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   13e92:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
   13e96:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
   13e9a:	f89d 2004 	ldrb.w	r2, [sp, #4]
   13e9e:	4331      	orrs	r1, r6
   13ea0:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   13ea2:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	return dev->data;
   13ea6:	692a      	ldr	r2, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
   13ea8:	3204      	adds	r2, #4
   13eaa:	e894 0003 	ldmia.w	r4, {r0, r1}
   13eae:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
   13eb2:	e7b9      	b.n	13e28 <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   13eb4:	230e      	movs	r3, #14
   13eb6:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
   13eba:	e7e2      	b.n	13e82 <uarte_nrfx_configure+0x70>
		return -ENOTSUP;
   13ebc:	f06f 0385 	mvn.w	r3, #133	; 0x85
   13ec0:	e7b2      	b.n	13e28 <uarte_nrfx_configure+0x16>
			return -ENOTSUP;
   13ec2:	f06f 0385 	mvn.w	r3, #133	; 0x85
   13ec6:	e7af      	b.n	13e28 <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
   13ec8:	f06f 0385 	mvn.w	r3, #133	; 0x85
   13ecc:	e7ac      	b.n	13e28 <uarte_nrfx_configure+0x16>

00013ece <uarte_nrfx_config_get>:
{
   13ece:	460b      	mov	r3, r1
	return dev->data;
   13ed0:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
   13ed2:	6891      	ldr	r1, [r2, #8]
   13ed4:	6850      	ldr	r0, [r2, #4]
   13ed6:	e883 0003 	stmia.w	r3, {r0, r1}
}
   13eda:	2000      	movs	r0, #0
   13edc:	4770      	bx	lr

00013ede <uarte_nrfx_err_check>:
	return dev->config;
   13ede:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   13ee0:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   13ee2:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   13ee6:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   13eea:	4770      	bx	lr

00013eec <is_tx_ready>:
	return dev->config;
   13eec:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   13eee:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   13ef0:	685b      	ldr	r3, [r3, #4]
   13ef2:	f003 0308 	and.w	r3, r3, #8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13ef6:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   13efa:	b929      	cbnz	r1, 13f08 <is_tx_ready+0x1c>
   13efc:	b933      	cbnz	r3, 13f0c <is_tx_ready+0x20>
   13efe:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   13f02:	b92b      	cbnz	r3, 13f10 <is_tx_ready+0x24>
   13f04:	2000      	movs	r0, #0
   13f06:	4770      	bx	lr
   13f08:	2001      	movs	r0, #1
   13f0a:	4770      	bx	lr
   13f0c:	2000      	movs	r0, #0
   13f0e:	4770      	bx	lr
   13f10:	2001      	movs	r0, #1
}
   13f12:	4770      	bx	lr

00013f14 <uarte_enable>:
	return dev->config;
   13f14:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   13f16:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   13f18:	2208      	movs	r2, #8
   13f1a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   13f1e:	4770      	bx	lr

00013f20 <tx_start>:
{
   13f20:	b510      	push	{r4, lr}
	return dev->config;
   13f22:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   13f24:	681c      	ldr	r4, [r3, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   13f26:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   13f2a:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13f2e:	2300      	movs	r3, #0
   13f30:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   13f34:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   13f38:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   13f3c:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
   13f40:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   13f42:	685b      	ldr	r3, [r3, #4]
   13f44:	f013 0f10 	tst.w	r3, #16
   13f48:	d102      	bne.n	13f50 <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13f4a:	2301      	movs	r3, #1
   13f4c:	60a3      	str	r3, [r4, #8]
}
   13f4e:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   13f50:	2101      	movs	r1, #1
   13f52:	f7ff ffdf 	bl	13f14 <uarte_enable>
    p_reg->INTENSET = mask;
   13f56:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   13f5a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   13f5e:	e7f4      	b.n	13f4a <tx_start+0x2a>

00013f60 <uarte_nrfx_poll_in>:
{
   13f60:	b410      	push	{r4}
	return dev->data;
   13f62:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   13f64:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   13f66:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   13f68:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   13f6c:	b152      	cbz	r2, 13f84 <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
   13f6e:	7d62      	ldrb	r2, [r4, #21]
   13f70:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   13f72:	2000      	movs	r0, #0
   13f74:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   13f78:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   13f7c:	2201      	movs	r2, #1
   13f7e:	601a      	str	r2, [r3, #0]
}
   13f80:	bc10      	pop	{r4}
   13f82:	4770      	bx	lr
		return -1;
   13f84:	f04f 30ff 	mov.w	r0, #4294967295
   13f88:	e7fa      	b.n	13f80 <uarte_nrfx_poll_in+0x20>

00013f8a <uarte_nrfx_fifo_fill>:
{
   13f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13f8e:	4680      	mov	r8, r0
	return dev->data;
   13f90:	6907      	ldr	r7, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   13f92:	68fb      	ldr	r3, [r7, #12]
   13f94:	899e      	ldrh	r6, [r3, #12]
   13f96:	4296      	cmp	r6, r2
   13f98:	bfa8      	it	ge
   13f9a:	4616      	movge	r6, r2
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   13f9c:	3310      	adds	r3, #16
   13f9e:	2201      	movs	r2, #1
   13fa0:	f3bf 8f5b 	dmb	ish
   13fa4:	e853 0f00 	ldrex	r0, [r3]
   13fa8:	2800      	cmp	r0, #0
   13faa:	d103      	bne.n	13fb4 <uarte_nrfx_fifo_fill+0x2a>
   13fac:	e843 2400 	strex	r4, r2, [r3]
   13fb0:	2c00      	cmp	r4, #0
   13fb2:	d1f7      	bne.n	13fa4 <uarte_nrfx_fifo_fill+0x1a>
   13fb4:	f3bf 8f5b 	dmb	ish
   13fb8:	d101      	bne.n	13fbe <uarte_nrfx_fifo_fill+0x34>
	for (int i = 0; i < len; i++) {
   13fba:	2300      	movs	r3, #0
   13fbc:	e006      	b.n	13fcc <uarte_nrfx_fifo_fill+0x42>
		return 0;
   13fbe:	2600      	movs	r6, #0
   13fc0:	e019      	b.n	13ff6 <uarte_nrfx_fifo_fill+0x6c>
		data->int_driven->tx_buffer[i] = tx_data[i];
   13fc2:	68fc      	ldr	r4, [r7, #12]
   13fc4:	68a4      	ldr	r4, [r4, #8]
   13fc6:	5ccd      	ldrb	r5, [r1, r3]
   13fc8:	54e5      	strb	r5, [r4, r3]
	for (int i = 0; i < len; i++) {
   13fca:	3301      	adds	r3, #1
   13fcc:	42b3      	cmp	r3, r6
   13fce:	dbf8      	blt.n	13fc2 <uarte_nrfx_fifo_fill+0x38>
	__asm__ volatile(
   13fd0:	f04f 0320 	mov.w	r3, #32
   13fd4:	f3ef 8411 	mrs	r4, BASEPRI
   13fd8:	f383 8812 	msr	BASEPRI_MAX, r3
   13fdc:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   13fe0:	4640      	mov	r0, r8
   13fe2:	f7ff ff83 	bl	13eec <is_tx_ready>
   13fe6:	b948      	cbnz	r0, 13ffc <uarte_nrfx_fifo_fill+0x72>
		data->int_driven->fifo_fill_lock = 0;
   13fe8:	68fb      	ldr	r3, [r7, #12]
   13fea:	2600      	movs	r6, #0
   13fec:	611e      	str	r6, [r3, #16]
	__asm__ volatile(
   13fee:	f384 8811 	msr	BASEPRI, r4
   13ff2:	f3bf 8f6f 	isb	sy
}
   13ff6:	4630      	mov	r0, r6
   13ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
   13ffc:	68fb      	ldr	r3, [r7, #12]
   13ffe:	4632      	mov	r2, r6
   14000:	6899      	ldr	r1, [r3, #8]
   14002:	4640      	mov	r0, r8
   14004:	f7ff ff8c 	bl	13f20 <tx_start>
   14008:	e7f1      	b.n	13fee <uarte_nrfx_fifo_fill+0x64>

0001400a <uarte_nrfx_fifo_read>:
	return dev->config;
   1400a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1400c:	681b      	ldr	r3, [r3, #0]
	return dev->data;
   1400e:	6900      	ldr	r0, [r0, #16]
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   14010:	2a00      	cmp	r2, #0
   14012:	dd0c      	ble.n	1402e <uarte_nrfx_fifo_read+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14014:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   14018:	b15a      	cbz	r2, 14032 <uarte_nrfx_fifo_read+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1401a:	2200      	movs	r2, #0
   1401c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   14020:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   14024:	7d42      	ldrb	r2, [r0, #21]
   14026:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   14028:	2001      	movs	r0, #1
   1402a:	6018      	str	r0, [r3, #0]
}
   1402c:	4770      	bx	lr
	int num_rx = 0;
   1402e:	2000      	movs	r0, #0
   14030:	4770      	bx	lr
   14032:	2000      	movs	r0, #0
}
   14034:	4770      	bx	lr

00014036 <uarte_nrfx_irq_tx_enable>:
	return dev->config;
   14036:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   14038:	681a      	ldr	r2, [r3, #0]
	return dev->data;
   1403a:	6901      	ldr	r1, [r0, #16]
	__asm__ volatile(
   1403c:	f04f 0020 	mov.w	r0, #32
   14040:	f3ef 8311 	mrs	r3, BASEPRI
   14044:	f380 8812 	msr	BASEPRI_MAX, r0
   14048:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   1404c:	68c9      	ldr	r1, [r1, #12]
   1404e:	2000      	movs	r0, #0
   14050:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   14052:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   14056:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   1405a:	f383 8811 	msr	BASEPRI, r3
   1405e:	f3bf 8f6f 	isb	sy
}
   14062:	4770      	bx	lr

00014064 <uarte_nrfx_irq_tx_disable>:
	return dev->data;
   14064:	6903      	ldr	r3, [r0, #16]
	data->int_driven->disable_tx_irq = true;
   14066:	68db      	ldr	r3, [r3, #12]
   14068:	2201      	movs	r2, #1
   1406a:	739a      	strb	r2, [r3, #14]
}
   1406c:	4770      	bx	lr

0001406e <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config;
   1406e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   14070:	6819      	ldr	r1, [r3, #0]
	return dev->data;
   14072:	6903      	ldr	r3, [r0, #16]
	bool ready = !data->int_driven->disable_tx_irq &&
   14074:	68db      	ldr	r3, [r3, #12]
   14076:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   14078:	b94a      	cbnz	r2, 1408e <uarte_nrfx_irq_tx_ready_complete+0x20>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1407a:	f8d1 2158 	ldr.w	r2, [r1, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   1407e:	b15a      	cbz	r2, 14098 <uarte_nrfx_irq_tx_ready_complete+0x2a>
    return p_reg->INTENSET & mask;
   14080:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   14084:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
   14088:	d008      	beq.n	1409c <uarte_nrfx_irq_tx_ready_complete+0x2e>
   1408a:	2001      	movs	r0, #1
   1408c:	e000      	b.n	14090 <uarte_nrfx_irq_tx_ready_complete+0x22>
   1408e:	2000      	movs	r0, #0
	if (ready) {
   14090:	b108      	cbz	r0, 14096 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
   14092:	2200      	movs	r2, #0
   14094:	611a      	str	r2, [r3, #16]
}
   14096:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   14098:	2000      	movs	r0, #0
   1409a:	e7f9      	b.n	14090 <uarte_nrfx_irq_tx_ready_complete+0x22>
   1409c:	2000      	movs	r0, #0
   1409e:	e7f7      	b.n	14090 <uarte_nrfx_irq_tx_ready_complete+0x22>

000140a0 <uarte_nrfx_irq_rx_ready>:
	return dev->config;
   140a0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   140a2:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   140a4:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   140a8:	3800      	subs	r0, #0
   140aa:	bf18      	it	ne
   140ac:	2001      	movne	r0, #1
   140ae:	4770      	bx	lr

000140b0 <uarte_nrfx_irq_rx_enable>:
	return dev->config;
   140b0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   140b2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   140b4:	2210      	movs	r2, #16
   140b6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   140ba:	4770      	bx	lr

000140bc <uarte_nrfx_irq_rx_disable>:
	return dev->config;
   140bc:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   140be:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   140c0:	2210      	movs	r2, #16
   140c2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   140c6:	4770      	bx	lr

000140c8 <uarte_nrfx_irq_err_enable>:
	return dev->config;
   140c8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   140ca:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   140cc:	f44f 7200 	mov.w	r2, #512	; 0x200
   140d0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   140d4:	4770      	bx	lr

000140d6 <uarte_nrfx_irq_err_disable>:
	return dev->config;
   140d6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   140d8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   140da:	f44f 7200 	mov.w	r2, #512	; 0x200
   140de:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   140e2:	4770      	bx	lr

000140e4 <uarte_nrfx_irq_is_pending>:
{
   140e4:	b538      	push	{r3, r4, r5, lr}
   140e6:	4604      	mov	r4, r0
	return dev->config;
   140e8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   140ea:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   140ec:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   140f0:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
   140f4:	d106      	bne.n	14104 <uarte_nrfx_irq_is_pending+0x20>
   140f6:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   140fa:	f013 0f10 	tst.w	r3, #16
   140fe:	d107      	bne.n	14110 <uarte_nrfx_irq_is_pending+0x2c>
   14100:	2000      	movs	r0, #0
}
   14102:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   14104:	f7ff ffb3 	bl	1406e <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   14108:	2800      	cmp	r0, #0
   1410a:	d0f4      	beq.n	140f6 <uarte_nrfx_irq_is_pending+0x12>
		||
   1410c:	2001      	movs	r0, #1
   1410e:	e7f8      	b.n	14102 <uarte_nrfx_irq_is_pending+0x1e>
		 uarte_nrfx_irq_rx_ready(dev)));
   14110:	4620      	mov	r0, r4
   14112:	f7ff ffc5 	bl	140a0 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   14116:	2800      	cmp	r0, #0
   14118:	d0f3      	beq.n	14102 <uarte_nrfx_irq_is_pending+0x1e>
		||
   1411a:	2001      	movs	r0, #1
   1411c:	e7f1      	b.n	14102 <uarte_nrfx_irq_is_pending+0x1e>

0001411e <uarte_nrfx_irq_update>:
}
   1411e:	2001      	movs	r0, #1
   14120:	4770      	bx	lr

00014122 <uarte_nrfx_irq_callback_set>:
	return dev->data;
   14122:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
   14124:	68d8      	ldr	r0, [r3, #12]
   14126:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
   14128:	68db      	ldr	r3, [r3, #12]
   1412a:	605a      	str	r2, [r3, #4]
}
   1412c:	4770      	bx	lr

0001412e <wait_tx_ready>:
{
   1412e:	b570      	push	{r4, r5, r6, lr}
   14130:	4606      	mov	r6, r0
   14132:	e014      	b.n	1415e <wait_tx_ready+0x30>
		if (res) {
   14134:	b17d      	cbz	r5, 14156 <wait_tx_ready+0x28>
	__asm__ volatile(
   14136:	f04f 0320 	mov.w	r3, #32
   1413a:	f3ef 8411 	mrs	r4, BASEPRI
   1413e:	f383 8812 	msr	BASEPRI_MAX, r3
   14142:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   14146:	4630      	mov	r0, r6
   14148:	f7ff fed0 	bl	13eec <is_tx_ready>
   1414c:	b9a0      	cbnz	r0, 14178 <wait_tx_ready+0x4a>
	__asm__ volatile(
   1414e:	f384 8811 	msr	BASEPRI, r4
   14152:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
   14156:	2021      	movs	r0, #33	; 0x21
   14158:	2100      	movs	r1, #0
   1415a:	f7fc fc37 	bl	109cc <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1415e:	2464      	movs	r4, #100	; 0x64
   14160:	4630      	mov	r0, r6
   14162:	f7ff fec3 	bl	13eec <is_tx_ready>
   14166:	4605      	mov	r5, r0
   14168:	2800      	cmp	r0, #0
   1416a:	d1e3      	bne.n	14134 <wait_tx_ready+0x6>
   1416c:	2001      	movs	r0, #1
   1416e:	f000 f8a0 	bl	142b2 <nrfx_busy_wait>
   14172:	3c01      	subs	r4, #1
   14174:	d1f4      	bne.n	14160 <wait_tx_ready+0x32>
   14176:	e7dd      	b.n	14134 <wait_tx_ready+0x6>
}
   14178:	4620      	mov	r0, r4
   1417a:	bd70      	pop	{r4, r5, r6, pc}

0001417c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   1417c:	b510      	push	{r4, lr}
   1417e:	4604      	mov	r4, r0
   14180:	2200      	movs	r2, #0
   14182:	2101      	movs	r1, #1
   14184:	2002      	movs	r0, #2
   14186:	f7f1 fb65 	bl	5854 <z_arm_irq_priority_set>
   1418a:	2002      	movs	r0, #2
   1418c:	f7f1 fb30 	bl	57f0 <arch_irq_enable>
   14190:	2101      	movs	r1, #1
   14192:	4620      	mov	r0, r4
   14194:	f7f5 fc6a 	bl	9a6c <uarte_instance_init>
   14198:	bd10      	pop	{r4, pc}

0001419a <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1419a:	4770      	bx	lr

0001419c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   1419c:	4770      	bx	lr

0001419e <counter_sub>:
	return (a - b) & COUNTER_MAX;
   1419e:	1a40      	subs	r0, r0, r1
}
   141a0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   141a4:	4770      	bx	lr

000141a6 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   141a6:	f100 0350 	add.w	r3, r0, #80	; 0x50
   141aa:	009b      	lsls	r3, r3, #2
   141ac:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   141ae:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   141b2:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   141b6:	2200      	movs	r2, #0
   141b8:	601a      	str	r2, [r3, #0]
   141ba:	681b      	ldr	r3, [r3, #0]
}
   141bc:	4770      	bx	lr

000141be <absolute_time_to_cc>:
}
   141be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   141c2:	4770      	bx	lr

000141c4 <full_int_lock>:
	__asm__ volatile(
   141c4:	f04f 0320 	mov.w	r3, #32
   141c8:	f3ef 8011 	mrs	r0, BASEPRI
   141cc:	f383 8812 	msr	BASEPRI_MAX, r3
   141d0:	f3bf 8f6f 	isb	sy
}
   141d4:	4770      	bx	lr

000141d6 <full_int_unlock>:
	__asm__ volatile(
   141d6:	f380 8811 	msr	BASEPRI, r0
   141da:	f3bf 8f6f 	isb	sy
}
   141de:	4770      	bx	lr

000141e0 <set_absolute_alarm>:
{
   141e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   141e2:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   141e4:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   141e8:	f7f5 fd06 	bl	9bf8 <get_comparator>
   141ec:	4607      	mov	r7, r0
   141ee:	e019      	b.n	14224 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   141f0:	2013      	movs	r0, #19
   141f2:	f001 fff1 	bl	161d8 <z_impl_k_busy_wait>
}
   141f6:	e022      	b.n	1423e <set_absolute_alarm+0x5e>
		event_clear(chan);
   141f8:	4630      	mov	r0, r6
   141fa:	f7ff ffd4 	bl	141a6 <event_clear>
		event_enable(chan);
   141fe:	4630      	mov	r0, r6
   14200:	f7f5 fd02 	bl	9c08 <event_enable>
		set_comparator(chan, cc_val);
   14204:	4629      	mov	r1, r5
   14206:	4630      	mov	r0, r6
   14208:	f7f5 fcec 	bl	9be4 <set_comparator>
		now2 = counter();
   1420c:	f7f5 fd10 	bl	9c30 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   14210:	4284      	cmp	r4, r0
   14212:	d01e      	beq.n	14252 <set_absolute_alarm+0x72>
   14214:	1c81      	adds	r1, r0, #2
   14216:	4628      	mov	r0, r5
   14218:	f7ff ffc1 	bl	1419e <counter_sub>
	} while ((now2 != now) &&
   1421c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   14220:	d917      	bls.n	14252 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   14222:	462f      	mov	r7, r5
		now = counter();
   14224:	f7f5 fd04 	bl	9c30 <counter>
   14228:	4604      	mov	r4, r0
		set_comparator(chan, now);
   1422a:	4601      	mov	r1, r0
   1422c:	4630      	mov	r0, r6
   1422e:	f7f5 fcd9 	bl	9be4 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   14232:	4621      	mov	r1, r4
   14234:	4638      	mov	r0, r7
   14236:	f7ff ffb2 	bl	1419e <counter_sub>
   1423a:	2801      	cmp	r0, #1
   1423c:	d0d8      	beq.n	141f0 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   1423e:	1ca7      	adds	r7, r4, #2
   14240:	4639      	mov	r1, r7
   14242:	4628      	mov	r0, r5
   14244:	f7ff ffab 	bl	1419e <counter_sub>
   14248:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   1424c:	d9d4      	bls.n	141f8 <set_absolute_alarm+0x18>
			cc_val = now + 2;
   1424e:	463d      	mov	r5, r7
   14250:	e7d2      	b.n	141f8 <set_absolute_alarm+0x18>
}
   14252:	4628      	mov	r0, r5
   14254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00014256 <compare_set>:
{
   14256:	b5f0      	push	{r4, r5, r6, r7, lr}
   14258:	b083      	sub	sp, #12
   1425a:	4604      	mov	r4, r0
   1425c:	4617      	mov	r7, r2
   1425e:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   14260:	f7f5 fcec 	bl	9c3c <compare_int_lock>
   14264:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   14266:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14268:	9301      	str	r3, [sp, #4]
   1426a:	9b08      	ldr	r3, [sp, #32]
   1426c:	9300      	str	r3, [sp, #0]
   1426e:	463a      	mov	r2, r7
   14270:	462b      	mov	r3, r5
   14272:	4620      	mov	r0, r4
   14274:	f7f5 fdd0 	bl	9e18 <compare_set_nolocks>
   14278:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   1427a:	4631      	mov	r1, r6
   1427c:	4620      	mov	r0, r4
   1427e:	f7f5 fd41 	bl	9d04 <compare_int_unlock>
}
   14282:	4628      	mov	r0, r5
   14284:	b003      	add	sp, #12
   14286:	bdf0      	pop	{r4, r5, r6, r7, pc}

00014288 <sys_clock_cycle_get_32>:

uint32_t sys_clock_cycle_get_32(void)
{
   14288:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   1428a:	f7f5 fda5 	bl	9dd8 <z_nrf_rtc_timer_read>
}
   1428e:	bd08      	pop	{r3, pc}

00014290 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
   14290:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
   14292:	f7fc fec3 	bl	1101c <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
   14296:	bd08      	pop	{r3, pc}

00014298 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
   14298:	b510      	push	{r4, lr}
   1429a:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   1429c:	f7f1 f96a 	bl	5574 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   142a0:	f7f1 fa26 	bl	56f0 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
   142a4:	4620      	mov	r0, r4
   142a6:	f7ff fff3 	bl	14290 <hw_cc3xx_init_internal>
	return res;
}
   142aa:	bd10      	pop	{r4, pc}

000142ac <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
   142ac:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   142ae:	4780      	blx	r0
}
   142b0:	bd08      	pop	{r3, pc}

000142b2 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   142b2:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   142b4:	f001 ff90 	bl	161d8 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
   142b8:	bd08      	pop	{r3, pc}

000142ba <is_app_channel>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   142ba:	2301      	movs	r3, #1
   142bc:	4083      	lsls	r3, r0
   142be:	f013 0fff 	tst.w	r3, #255	; 0xff
}
   142c2:	bf14      	ite	ne
   142c4:	2001      	movne	r0, #1
   142c6:	2000      	moveq	r0, #0
   142c8:	4770      	bx	lr

000142ca <flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   142ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   142ce:	6918      	ldr	r0, [r3, #16]
}
   142d0:	4770      	bx	lr

000142d2 <flash_page_count_get>:
    return p_reg->CODESIZE;
   142d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   142d6:	6958      	ldr	r0, [r3, #20]
}
   142d8:	4770      	bx	lr

000142da <flash_total_size_get>:
{
   142da:	b510      	push	{r4, lr}
    return flash_page_size_get() * flash_page_count_get();
   142dc:	f7ff fff5 	bl	142ca <flash_page_size_get>
   142e0:	4604      	mov	r4, r0
   142e2:	f7ff fff6 	bl	142d2 <flash_page_count_get>
}
   142e6:	fb00 f004 	mul.w	r0, r0, r4
   142ea:	bd10      	pop	{r4, pc}

000142ec <is_page_aligned_check>:
{
   142ec:	b510      	push	{r4, lr}
   142ee:	4604      	mov	r4, r0
    return !(addr % flash_page_size_get());
   142f0:	f7ff ffeb 	bl	142ca <flash_page_size_get>
   142f4:	fbb4 f3f0 	udiv	r3, r4, r0
   142f8:	fb00 4013 	mls	r0, r0, r3, r4
}
   142fc:	fab0 f080 	clz	r0, r0
   14300:	0940      	lsrs	r0, r0, #5
   14302:	bd10      	pop	{r4, pc}

00014304 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   14304:	b538      	push	{r3, r4, r5, lr}
   14306:	4604      	mov	r4, r0
   14308:	460d      	mov	r5, r1
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();
   1430a:	f7f6 f9d1 	bl	a6b0 <nvmc_write_mode_set>

    nvmc_word_write(addr, value);
   1430e:	4629      	mov	r1, r5
   14310:	4620      	mov	r0, r4
   14312:	f7f6 f9dd 	bl	a6d0 <nvmc_word_write>

    nvmc_readonly_mode_set();
   14316:	f7f6 f9c3 	bl	a6a0 <nvmc_readonly_mode_set>
}
   1431a:	bd38      	pop	{r3, r4, r5, pc}

0001431c <nrfx_nvmc_flash_size_get>:
    return (nrfx_is_word_aligned((void const *)addr) ? (uint16_t)(val32)
                                                     : (uint16_t)(val32 >> 16));
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
   1431c:	b508      	push	{r3, lr}
    return flash_total_size_get();
   1431e:	f7ff ffdc 	bl	142da <flash_total_size_get>
}
   14322:	bd08      	pop	{r3, pc}

00014324 <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
   14324:	b508      	push	{r3, lr}
    return flash_page_size_get();
   14326:	f7ff ffd0 	bl	142ca <flash_page_size_get>
}
   1432a:	bd08      	pop	{r3, pc}

0001432c <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
   1432c:	b508      	push	{r3, lr}
    return flash_page_count_get();
   1432e:	f7ff ffd0 	bl	142d2 <flash_page_count_get>
}
   14332:	bd08      	pop	{r3, pc}

00014334 <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
   14334:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14338:	f44f 7260 	mov.w	r2, #896	; 0x380
   1433c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   14340:	4770      	bx	lr

00014342 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
   14342:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   14346:	f44f 7260 	mov.w	r2, #896	; 0x380
   1434a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   1434e:	4770      	bx	lr

00014350 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
   14350:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
   14352:	f7f6 fa47 	bl	a7e4 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
   14356:	f7f6 f8ef 	bl	a538 <nrfx_clock_irq_handler>
}
   1435a:	bd08      	pop	{r3, pc}

0001435c <xfer_completeness_check>:
    if (p_cb->bytes_transferred != p_cb->curr_length)
   1435c:	6b4a      	ldr	r2, [r1, #52]	; 0x34
   1435e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   14360:	429a      	cmp	r2, r3
   14362:	d007      	beq.n	14374 <xfer_completeness_check+0x18>
   14364:	2300      	movs	r3, #0
   14366:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   1436a:	2205      	movs	r2, #5
   1436c:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
        return false;
   14370:	4618      	mov	r0, r3
   14372:	4770      	bx	lr
        return true;
   14374:	2001      	movs	r0, #1
}
   14376:	4770      	bx	lr

00014378 <twi_send_byte>:
{
   14378:	4603      	mov	r3, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
   1437a:	6b4a      	ldr	r2, [r1, #52]	; 0x34
   1437c:	6a88      	ldr	r0, [r1, #40]	; 0x28
   1437e:	4282      	cmp	r2, r0
   14380:	d205      	bcs.n	1438e <twi_send_byte+0x16>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
   14382:	6a49      	ldr	r1, [r1, #36]	; 0x24
   14384:	5c8a      	ldrb	r2, [r1, r2]
    p_reg->TXD = data;
   14386:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    return true;
   1438a:	2001      	movs	r0, #1
}
   1438c:	4770      	bx	lr
        if (p_cb->curr_tx_no_stop)
   1438e:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
   14392:	b930      	cbnz	r0, 143a2 <twi_send_byte+0x2a>
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
   14394:	6a0a      	ldr	r2, [r1, #32]
   14396:	f012 0f40 	tst.w	r2, #64	; 0x40
   1439a:	d106      	bne.n	143aa <twi_send_byte+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1439c:	2001      	movs	r0, #1
   1439e:	6158      	str	r0, [r3, #20]
}
   143a0:	4770      	bx	lr
   143a2:	2201      	movs	r2, #1
   143a4:	61da      	str	r2, [r3, #28]
            return false;
   143a6:	2000      	movs	r0, #0
   143a8:	4770      	bx	lr
   143aa:	2201      	movs	r2, #1
   143ac:	61da      	str	r2, [r3, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
   143ae:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
            return false;
   143b2:	4770      	bx	lr

000143b4 <twi_receive_byte>:
    if (p_cb->bytes_transferred < p_cb->curr_length)
   143b4:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   143b6:	6a8a      	ldr	r2, [r1, #40]	; 0x28
   143b8:	4293      	cmp	r3, r2
   143ba:	d22b      	bcs.n	14414 <twi_receive_byte+0x60>
{
   143bc:	b410      	push	{r4}
   143be:	4604      	mov	r4, r0
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
   143c0:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
   143c2:	f8d0 0518 	ldr.w	r0, [r0, #1304]	; 0x518
   143c6:	54d0      	strb	r0, [r2, r3]
        ++(p_cb->bytes_transferred);
   143c8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   143ca:	3301      	adds	r3, #1
   143cc:	634b      	str	r3, [r1, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   143ce:	6a8a      	ldr	r2, [r1, #40]	; 0x28
   143d0:	1e50      	subs	r0, r2, #1
   143d2:	4283      	cmp	r3, r0
   143d4:	d007      	beq.n	143e6 <twi_receive_byte+0x32>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   143d6:	4293      	cmp	r3, r2
   143d8:	d00d      	beq.n	143f6 <twi_receive_byte+0x42>
        else if (p_cb->bytes_transferred == p_cb->curr_length && TWI_FLAG_SUSPEND(p_cb->flags))
   143da:	4293      	cmp	r3, r2
   143dc:	d011      	beq.n	14402 <twi_receive_byte+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   143de:	2001      	movs	r0, #1
   143e0:	6220      	str	r0, [r4, #32]
}
   143e2:	bc10      	pop	{r4}
   143e4:	4770      	bx	lr
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   143e6:	6a08      	ldr	r0, [r1, #32]
   143e8:	f010 0f40 	tst.w	r0, #64	; 0x40
   143ec:	d1f3      	bne.n	143d6 <twi_receive_byte+0x22>
    p_reg->SHORTS = mask;
   143ee:	2302      	movs	r3, #2
   143f0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
}
   143f4:	e7f3      	b.n	143de <twi_receive_byte+0x2a>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   143f6:	6a08      	ldr	r0, [r1, #32]
   143f8:	f010 0f40 	tst.w	r0, #64	; 0x40
   143fc:	d1ed      	bne.n	143da <twi_receive_byte+0x26>
            return true;
   143fe:	2001      	movs	r0, #1
   14400:	e7ef      	b.n	143e2 <twi_receive_byte+0x2e>
        else if (p_cb->bytes_transferred == p_cb->curr_length && TWI_FLAG_SUSPEND(p_cb->flags))
   14402:	6a0b      	ldr	r3, [r1, #32]
   14404:	f013 0f40 	tst.w	r3, #64	; 0x40
   14408:	d0e9      	beq.n	143de <twi_receive_byte+0x2a>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
   1440a:	2302      	movs	r3, #2
   1440c:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
   14410:	2000      	movs	r0, #0
   14412:	e7e6      	b.n	143e2 <twi_receive_byte+0x2e>
    return true;
   14414:	2001      	movs	r0, #1
}
   14416:	4770      	bx	lr

00014418 <twi_transfer>:
{
   14418:	b570      	push	{r4, r5, r6, lr}
   1441a:	4604      	mov	r4, r0
   1441c:	460d      	mov	r5, r1
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1441e:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
   14422:	b1cb      	cbz	r3, 14458 <twi_transfer+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14424:	2300      	movs	r3, #0
   14426:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   1442a:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
   1442e:	2601      	movs	r6, #1
    if (p_cb->error)
   14430:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   14434:	b193      	cbz	r3, 1445c <twi_transfer+0x44>
   14436:	2300      	movs	r3, #0
   14438:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1443c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   14440:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   14444:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
   14448:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   1444c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    if (stopped)
   14450:	2e00      	cmp	r6, #0
   14452:	d14c      	bne.n	144ee <twi_transfer+0xd6>
    return true;
   14454:	2001      	movs	r0, #1
}
   14456:	bd70      	pop	{r4, r5, r6, pc}
    bool stopped = false;
   14458:	2600      	movs	r6, #0
   1445a:	e7e9      	b.n	14430 <twi_transfer+0x18>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1445c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   14460:	b14b      	cbz	r3, 14476 <twi_transfer+0x5e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14462:	2300      	movs	r3, #0
   14464:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   14468:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1446c:	2301      	movs	r3, #1
   1446e:	6163      	str	r3, [r4, #20]
        p_cb->error = true;
   14470:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   14474:	e7ec      	b.n	14450 <twi_transfer+0x38>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   14476:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
   1447a:	b1db      	cbz	r3, 144b4 <twi_transfer+0x9c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1447c:	2300      	movs	r3, #0
   1447e:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   14482:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
   14486:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   14488:	3301      	adds	r3, #1
   1448a:	636b      	str	r3, [r5, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1448c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   14490:	b14b      	cbz	r3, 144a6 <twi_transfer+0x8e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   14492:	2300      	movs	r3, #0
   14494:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   14498:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1449c:	2301      	movs	r3, #1
   1449e:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
   144a0:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   144a4:	e7d4      	b.n	14450 <twi_transfer+0x38>
                if (!twi_send_byte(p_twi, p_cb))
   144a6:	4629      	mov	r1, r5
   144a8:	4620      	mov	r0, r4
   144aa:	f7ff ff65 	bl	14378 <twi_send_byte>
   144ae:	2800      	cmp	r0, #0
   144b0:	d1ce      	bne.n	14450 <twi_transfer+0x38>
   144b2:	e7d0      	b.n	14456 <twi_transfer+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   144b4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
   144b8:	2b00      	cmp	r3, #0
   144ba:	d0c9      	beq.n	14450 <twi_transfer+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   144bc:	2300      	movs	r3, #0
   144be:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   144c2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   144c6:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   144ca:	b14b      	cbz	r3, 144e0 <twi_transfer+0xc8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   144cc:	2300      	movs	r3, #0
   144ce:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   144d2:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   144d6:	2301      	movs	r3, #1
   144d8:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
   144da:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   144de:	e7b7      	b.n	14450 <twi_transfer+0x38>
                if (!twi_receive_byte(p_twi, p_cb))
   144e0:	4629      	mov	r1, r5
   144e2:	4620      	mov	r0, r4
   144e4:	f7ff ff66 	bl	143b4 <twi_receive_byte>
   144e8:	2800      	cmp	r0, #0
   144ea:	d1b1      	bne.n	14450 <twi_transfer+0x38>
   144ec:	e7b3      	b.n	14456 <twi_transfer+0x3e>
        p_cb->prev_suspend = TWI_NO_SUSPEND;
   144ee:	2300      	movs	r3, #0
   144f0:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
        if (!p_cb->error)
   144f4:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   144f8:	b10b      	cbz	r3, 144fe <twi_transfer+0xe6>
        return false;
   144fa:	2000      	movs	r0, #0
   144fc:	e7ab      	b.n	14456 <twi_transfer+0x3e>
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
   144fe:	4629      	mov	r1, r5
   14500:	4620      	mov	r0, r4
   14502:	f7ff ff2b 	bl	1435c <xfer_completeness_check>
   14506:	f080 0001 	eor.w	r0, r0, #1
   1450a:	f885 002f 	strb.w	r0, [r5, #47]	; 0x2f
   1450e:	e7f4      	b.n	144fa <twi_transfer+0xe2>

00014510 <twi_irq_handler>:
{
   14510:	b5f0      	push	{r4, r5, r6, r7, lr}
   14512:	b087      	sub	sp, #28
   14514:	4607      	mov	r7, r0
   14516:	460c      	mov	r4, r1
    if (twi_transfer(p_twi, p_cb))
   14518:	f7ff ff7e 	bl	14418 <twi_transfer>
   1451c:	2800      	cmp	r0, #0
   1451e:	d15d      	bne.n	145dc <twi_irq_handler+0xcc>
    if (!p_cb->error &&
   14520:	f894 c02f 	ldrb.w	ip, [r4, #47]	; 0x2f
   14524:	f1bc 0f00 	cmp.w	ip, #0
   14528:	d104      	bne.n	14534 <twi_irq_handler+0x24>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
   1452a:	7b22      	ldrb	r2, [r4, #12]
   1452c:	1e93      	subs	r3, r2, #2
   1452e:	b2db      	uxtb	r3, r3
    if (!p_cb->error &&
   14530:	2b01      	cmp	r3, #1
   14532:	d914      	bls.n	1455e <twi_irq_handler+0x4e>
        event.xfer_desc = p_cb->xfer_desc;
   14534:	ad01      	add	r5, sp, #4
   14536:	f104 060c 	add.w	r6, r4, #12
   1453a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1453c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1453e:	6833      	ldr	r3, [r6, #0]
   14540:	602b      	str	r3, [r5, #0]
        if (p_cb->error)
   14542:	f1bc 0f00 	cmp.w	ip, #0
   14546:	d038      	beq.n	145ba <twi_irq_handler+0xaa>
    uint32_t error_source = p_reg->ERRORSRC;
   14548:	f8d7 34c4 	ldr.w	r3, [r7, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1454c:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
   14550:	f013 0f02 	tst.w	r3, #2
   14554:	d01f      	beq.n	14596 <twi_irq_handler+0x86>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
   14556:	2301      	movs	r3, #1
   14558:	f88d 3000 	strb.w	r3, [sp]
                NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_ADDRESS_NACK));
   1455c:	e030      	b.n	145c0 <twi_irq_handler+0xb0>
        p_cb->p_curr_buf == p_cb->xfer_desc.p_primary_buf)
   1455e:	6a61      	ldr	r1, [r4, #36]	; 0x24
   14560:	69a3      	ldr	r3, [r4, #24]
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
   14562:	4299      	cmp	r1, r3
   14564:	d1e6      	bne.n	14534 <twi_irq_handler+0x24>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
   14566:	69e3      	ldr	r3, [r4, #28]
   14568:	6263      	str	r3, [r4, #36]	; 0x24
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
   1456a:	6963      	ldr	r3, [r4, #20]
   1456c:	62a3      	str	r3, [r4, #40]	; 0x28
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   1456e:	6a23      	ldr	r3, [r4, #32]
   14570:	f3c3 1340 	ubfx	r3, r3, #5, #1
   14574:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
   14578:	2300      	movs	r3, #0
   1457a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   1457e:	2a03      	cmp	r2, #3
   14580:	d004      	beq.n	1458c <twi_irq_handler+0x7c>
            (void)twi_rx_start_transfer(p_twi, p_cb);
   14582:	4621      	mov	r1, r4
   14584:	4638      	mov	r0, r7
   14586:	f7f6 fa63 	bl	aa50 <twi_rx_start_transfer>
   1458a:	e027      	b.n	145dc <twi_irq_handler+0xcc>
            (void)twi_tx_start_transfer(p_twi, p_cb);
   1458c:	4621      	mov	r1, r4
   1458e:	4638      	mov	r0, r7
   14590:	f7f6 fa00 	bl	a994 <twi_tx_start_transfer>
   14594:	e022      	b.n	145dc <twi_irq_handler+0xcc>
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
   14596:	f013 0f04 	tst.w	r3, #4
   1459a:	d003      	beq.n	145a4 <twi_irq_handler+0x94>
                event.type = NRFX_TWI_EVT_DATA_NACK;
   1459c:	2302      	movs	r3, #2
   1459e:	f88d 3000 	strb.w	r3, [sp]
                NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_DATA_NACK));
   145a2:	e00d      	b.n	145c0 <twi_irq_handler+0xb0>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
   145a4:	f013 0f01 	tst.w	r3, #1
   145a8:	d003      	beq.n	145b2 <twi_irq_handler+0xa2>
                event.type = NRFX_TWI_EVT_OVERRUN;
   145aa:	2303      	movs	r3, #3
   145ac:	f88d 3000 	strb.w	r3, [sp]
                NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_OVERRUN));
   145b0:	e006      	b.n	145c0 <twi_irq_handler+0xb0>
                event.type = NRFX_TWI_EVT_BUS_ERROR;
   145b2:	2304      	movs	r3, #4
   145b4:	f88d 3000 	strb.w	r3, [sp]
                NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_BUS_ERROR));
   145b8:	e002      	b.n	145c0 <twi_irq_handler+0xb0>
            event.type = NRFX_TWI_EVT_DONE;
   145ba:	2300      	movs	r3, #0
   145bc:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
   145c0:	2300      	movs	r3, #0
   145c2:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   145c6:	6a23      	ldr	r3, [r4, #32]
   145c8:	f013 0f04 	tst.w	r3, #4
   145cc:	d002      	beq.n	145d4 <twi_irq_handler+0xc4>
   145ce:	f894 302f 	ldrb.w	r3, [r4, #47]	; 0x2f
   145d2:	b11b      	cbz	r3, 145dc <twi_irq_handler+0xcc>
            p_cb->handler(&event, p_cb->p_context);
   145d4:	6823      	ldr	r3, [r4, #0]
   145d6:	6861      	ldr	r1, [r4, #4]
   145d8:	4668      	mov	r0, sp
   145da:	4798      	blx	r3
}
   145dc:	b007      	add	sp, #28
   145de:	bdf0      	pop	{r4, r5, r6, r7, pc}

000145e0 <nrf52_errata_223>:
}
   145e0:	2000      	movs	r0, #0
   145e2:	4770      	bx	lr

000145e4 <nrfx_usbd_consumer>:
{
   145e4:	b430      	push	{r4, r5}
    size_t size = p_transfer->size;
   145e6:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
   145e8:	42a3      	cmp	r3, r4
   145ea:	d908      	bls.n	145fe <nrfx_usbd_consumer+0x1a>
        p_next->size = 0;
   145ec:	2500      	movs	r5, #0
   145ee:	6045      	str	r5, [r0, #4]
        p_next->p_data = p_transfer->p_data;
   145f0:	6809      	ldr	r1, [r1, #0]
   145f2:	6001      	str	r1, [r0, #0]
    return (ep_size == data_size) && (size != 0);
   145f4:	429a      	cmp	r2, r3
   145f6:	d00b      	beq.n	14610 <nrfx_usbd_consumer+0x2c>
   145f8:	2000      	movs	r0, #0
}
   145fa:	bc30      	pop	{r4, r5}
   145fc:	4770      	bx	lr
        p_next->size = data_size;
   145fe:	6043      	str	r3, [r0, #4]
        p_next->p_data = p_transfer->p_data;
   14600:	680d      	ldr	r5, [r1, #0]
   14602:	6005      	str	r5, [r0, #0]
        size -= data_size;
   14604:	1ae4      	subs	r4, r4, r3
        p_transfer->size = size;
   14606:	604c      	str	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
   14608:	6808      	ldr	r0, [r1, #0]
   1460a:	4418      	add	r0, r3
   1460c:	6008      	str	r0, [r1, #0]
   1460e:	e7f1      	b.n	145f4 <nrfx_usbd_consumer+0x10>
    return (ep_size == data_size) && (size != 0);
   14610:	b90c      	cbnz	r4, 14616 <nrfx_usbd_consumer+0x32>
   14612:	2000      	movs	r0, #0
   14614:	e7f1      	b.n	145fa <nrfx_usbd_consumer+0x16>
   14616:	2001      	movs	r0, #1
   14618:	e7ef      	b.n	145fa <nrfx_usbd_consumer+0x16>

0001461a <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
   1461a:	684b      	ldr	r3, [r1, #4]
    if (tx_size > ep_size)
   1461c:	4293      	cmp	r3, r2
   1461e:	d800      	bhi.n	14622 <nrfx_usbd_feeder_ram+0x8>
    size_t tx_size = p_transfer->size;
   14620:	461a      	mov	r2, r3
    p_next->p_data = p_transfer->p_data;
   14622:	680b      	ldr	r3, [r1, #0]
   14624:	6003      	str	r3, [r0, #0]
    p_next->size = tx_size;
   14626:	6042      	str	r2, [r0, #4]
    p_transfer->size -= tx_size;
   14628:	6848      	ldr	r0, [r1, #4]
   1462a:	1a80      	subs	r0, r0, r2
   1462c:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   1462e:	680b      	ldr	r3, [r1, #0]
   14630:	441a      	add	r2, r3
   14632:	600a      	str	r2, [r1, #0]
}
   14634:	3800      	subs	r0, #0
   14636:	bf18      	it	ne
   14638:	2001      	movne	r0, #1
   1463a:	4770      	bx	lr

0001463c <nrfx_usbd_feeder_ram_zlp>:
    size_t tx_size = p_transfer->size;
   1463c:	684b      	ldr	r3, [r1, #4]
    if (tx_size > ep_size)
   1463e:	4293      	cmp	r3, r2
   14640:	d800      	bhi.n	14644 <nrfx_usbd_feeder_ram_zlp+0x8>
    size_t tx_size = p_transfer->size;
   14642:	461a      	mov	r2, r3
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   14644:	b162      	cbz	r2, 14660 <nrfx_usbd_feeder_ram_zlp+0x24>
   14646:	680b      	ldr	r3, [r1, #0]
   14648:	6003      	str	r3, [r0, #0]
    p_next->size = tx_size;
   1464a:	6042      	str	r2, [r0, #4]
    p_transfer->size -= tx_size;
   1464c:	684b      	ldr	r3, [r1, #4]
   1464e:	1a9b      	subs	r3, r3, r2
   14650:	604b      	str	r3, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   14652:	680b      	ldr	r3, [r1, #0]
   14654:	4413      	add	r3, r2
   14656:	600b      	str	r3, [r1, #0]
}
   14658:	1e10      	subs	r0, r2, #0
   1465a:	bf18      	it	ne
   1465c:	2001      	movne	r0, #1
   1465e:	4770      	bx	lr
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   14660:	2300      	movs	r3, #0
   14662:	e7f1      	b.n	14648 <nrfx_usbd_feeder_ram_zlp+0xc>

00014664 <ev_started_handler>:
}
   14664:	4770      	bx	lr

00014666 <usbd_dma_scheduler_algorithm>:
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   14666:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
   1466a:	b110      	cbz	r0, 14672 <usbd_dma_scheduler_algorithm+0xc>
  return __builtin_clz(value);
   1466c:	fab0 f080 	clz	r0, r0
   14670:	4770      	bx	lr
    return 32U;
   14672:	2020      	movs	r0, #32
}
   14674:	4770      	bx	lr

00014676 <nrfx_usbd_feeder_flash>:
{
   14676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1467a:	4606      	mov	r6, r0
   1467c:	460c      	mov	r4, r1
   1467e:	4615      	mov	r5, r2
    size_t tx_size  = p_transfer->size;
   14680:	f8d1 8004 	ldr.w	r8, [r1, #4]
    void * p_buffer = nrfx_usbd_feeder_buffer_get();
   14684:	f7f7 f9a8 	bl	b9d8 <nrfx_usbd_feeder_buffer_get>
   14688:	4607      	mov	r7, r0
    if (tx_size > ep_size)
   1468a:	45a8      	cmp	r8, r5
   1468c:	d800      	bhi.n	14690 <nrfx_usbd_feeder_flash+0x1a>
    size_t tx_size  = p_transfer->size;
   1468e:	4645      	mov	r5, r8
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   14690:	462a      	mov	r2, r5
   14692:	6821      	ldr	r1, [r4, #0]
   14694:	4638      	mov	r0, r7
   14696:	f7fe fdab 	bl	131f0 <memcpy>
    p_next->p_data.tx = p_buffer;
   1469a:	6037      	str	r7, [r6, #0]
    p_next->size = tx_size;
   1469c:	6075      	str	r5, [r6, #4]
    p_transfer->size -= tx_size;
   1469e:	6860      	ldr	r0, [r4, #4]
   146a0:	1b40      	subs	r0, r0, r5
   146a2:	6060      	str	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
   146a4:	6822      	ldr	r2, [r4, #0]
   146a6:	442a      	add	r2, r5
   146a8:	6022      	str	r2, [r4, #0]
}
   146aa:	3800      	subs	r0, #0
   146ac:	bf18      	it	ne
   146ae:	2001      	movne	r0, #1
   146b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000146b4 <nrfx_usbd_feeder_flash_zlp>:
{
   146b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   146b8:	4606      	mov	r6, r0
   146ba:	460d      	mov	r5, r1
   146bc:	4614      	mov	r4, r2
    size_t tx_size  = p_transfer->size;
   146be:	f8d1 8004 	ldr.w	r8, [r1, #4]
    void * p_buffer = nrfx_usbd_feeder_buffer_get();
   146c2:	f7f7 f989 	bl	b9d8 <nrfx_usbd_feeder_buffer_get>
   146c6:	4607      	mov	r7, r0
    if (tx_size > ep_size)
   146c8:	45a0      	cmp	r8, r4
   146ca:	d800      	bhi.n	146ce <nrfx_usbd_feeder_flash_zlp+0x1a>
    size_t tx_size  = p_transfer->size;
   146cc:	4644      	mov	r4, r8
    if (tx_size != 0)
   146ce:	b96c      	cbnz	r4, 146ec <nrfx_usbd_feeder_flash_zlp+0x38>
        p_next->p_data.tx = NULL;
   146d0:	2300      	movs	r3, #0
   146d2:	6033      	str	r3, [r6, #0]
    p_next->size = tx_size;
   146d4:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
   146d6:	686b      	ldr	r3, [r5, #4]
   146d8:	1b1b      	subs	r3, r3, r4
   146da:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
   146dc:	682b      	ldr	r3, [r5, #0]
   146de:	4423      	add	r3, r4
   146e0:	602b      	str	r3, [r5, #0]
}
   146e2:	1e20      	subs	r0, r4, #0
   146e4:	bf18      	it	ne
   146e6:	2001      	movne	r0, #1
   146e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   146ec:	4622      	mov	r2, r4
   146ee:	6829      	ldr	r1, [r5, #0]
   146f0:	4638      	mov	r0, r7
   146f2:	f7fe fd7d 	bl	131f0 <memcpy>
        p_next->p_data.tx = p_buffer;
   146f6:	6037      	str	r7, [r6, #0]
   146f8:	e7ec      	b.n	146d4 <nrfx_usbd_feeder_flash_zlp+0x20>

000146fa <lfs_bd_erase>:
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
   146fa:	b508      	push	{r3, lr}
    int err = lfs->cfg->erase(lfs->cfg, block);
   146fc:	6e80      	ldr	r0, [r0, #104]	; 0x68
   146fe:	68c3      	ldr	r3, [r0, #12]
   14700:	4798      	blx	r3
}
   14702:	bd08      	pop	{r3, pc}

00014704 <lfs_alloc_lookahead>:
    lfs_block_t off = ((block - lfs->free.off)
   14704:	6d43      	ldr	r3, [r0, #84]	; 0x54
   14706:	1ac9      	subs	r1, r1, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
   14708:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1470a:	6a1a      	ldr	r2, [r3, #32]
   1470c:	4411      	add	r1, r2
    lfs_block_t off = ((block - lfs->free.off)
   1470e:	fbb1 f3f2 	udiv	r3, r1, r2
   14712:	fb02 1113 	mls	r1, r2, r3, r1
    if (off < lfs->free.size) {
   14716:	6d83      	ldr	r3, [r0, #88]	; 0x58
   14718:	428b      	cmp	r3, r1
   1471a:	d90b      	bls.n	14734 <lfs_alloc_lookahead+0x30>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
   1471c:	6e42      	ldr	r2, [r0, #100]	; 0x64
   1471e:	0948      	lsrs	r0, r1, #5
   14720:	f001 011f 	and.w	r1, r1, #31
   14724:	2301      	movs	r3, #1
   14726:	fa03 f101 	lsl.w	r1, r3, r1
   1472a:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   1472e:	430b      	orrs	r3, r1
   14730:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
   14734:	2000      	movs	r0, #0
   14736:	4770      	bx	lr

00014738 <lfs_alloc_ack>:
    lfs->free.ack = lfs->cfg->block_count;
   14738:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1473a:	6a1b      	ldr	r3, [r3, #32]
   1473c:	6603      	str	r3, [r0, #96]	; 0x60
}
   1473e:	4770      	bx	lr

00014740 <lfs_alloc_reset>:
static void lfs_alloc_reset(lfs_t *lfs) {
   14740:	b510      	push	{r4, lr}
    lfs->free.off = lfs->seed % lfs->cfg->block_size;
   14742:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
   14744:	6e82      	ldr	r2, [r0, #104]	; 0x68
   14746:	69d1      	ldr	r1, [r2, #28]
   14748:	fbb4 f2f1 	udiv	r2, r4, r1
   1474c:	fb01 4212 	mls	r2, r1, r2, r4
   14750:	6542      	str	r2, [r0, #84]	; 0x54
    lfs->free.size = 0;
   14752:	2200      	movs	r2, #0
   14754:	6582      	str	r2, [r0, #88]	; 0x58
    lfs->free.i = 0;
   14756:	65c2      	str	r2, [r0, #92]	; 0x5c
    lfs_alloc_ack(lfs);
   14758:	f7ff ffee 	bl	14738 <lfs_alloc_ack>
}
   1475c:	bd10      	pop	{r4, pc}

0001475e <lfs_dir_commit_size>:
    return ((int32_t)(tag << 22) >> 22) == -1;
   1475e:	f341 0309 	sbfx	r3, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
   14762:	f1b3 3fff 	cmp.w	r3, #4294967295
   14766:	bf08      	it	eq
   14768:	3101      	addeq	r1, #1
    return tag & 0x000003ff;
   1476a:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
   1476e:	3104      	adds	r1, #4
    *size += lfs_tag_dsize(tag);
   14770:	6803      	ldr	r3, [r0, #0]
   14772:	4419      	add	r1, r3
   14774:	6001      	str	r1, [r0, #0]
}
   14776:	2000      	movs	r0, #0
   14778:	4770      	bx	lr

0001477a <lfs_fs_preporphans>:
    lfs->gstate.tag += orphans;
   1477a:	6b03      	ldr	r3, [r0, #48]	; 0x30
   1477c:	4419      	add	r1, r3
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
   1477e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    return tag & 0x000003ff;
   14782:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return lfs_tag_size(a->tag);
   14786:	3900      	subs	r1, #0
   14788:	bf18      	it	ne
   1478a:	2101      	movne	r1, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
   1478c:	ea43 71c1 	orr.w	r1, r3, r1, lsl #31
   14790:	6301      	str	r1, [r0, #48]	; 0x30
}
   14792:	4770      	bx	lr

00014794 <lfs_fs_size_count>:
    *size += 1;
   14794:	6803      	ldr	r3, [r0, #0]
   14796:	3301      	adds	r3, #1
   14798:	6003      	str	r3, [r0, #0]
}
   1479a:	2000      	movs	r0, #0
   1479c:	4770      	bx	lr

0001479e <lfs_bd_read>:
        void *buffer, lfs_size_t size) {
   1479e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147a2:	b087      	sub	sp, #28
   147a4:	4615      	mov	r5, r2
   147a6:	469a      	mov	sl, r3
   147a8:	9e10      	ldr	r6, [sp, #64]	; 0x40
   147aa:	9c11      	ldr	r4, [sp, #68]	; 0x44
   147ac:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
    if (block >= lfs->cfg->block_count ||
   147b0:	6e82      	ldr	r2, [r0, #104]	; 0x68
   147b2:	6a13      	ldr	r3, [r2, #32]
   147b4:	42b3      	cmp	r3, r6
   147b6:	f240 80b8 	bls.w	1492a <lfs_bd_read+0x18c>
   147ba:	4689      	mov	r9, r1
            off+size > lfs->cfg->block_size) {
   147bc:	eb04 030b 	add.w	r3, r4, fp
   147c0:	69d2      	ldr	r2, [r2, #28]
    if (block >= lfs->cfg->block_count ||
   147c2:	4293      	cmp	r3, r2
   147c4:	f200 80b4 	bhi.w	14930 <lfs_bd_read+0x192>
   147c8:	9003      	str	r0, [sp, #12]
   147ca:	e07a      	b.n	148c2 <lfs_bd_read+0x124>
                off < pcache->off + pcache->size) {
   147cc:	f8d9 3004 	ldr.w	r3, [r9, #4]
   147d0:	f8d9 2008 	ldr.w	r2, [r9, #8]
   147d4:	1899      	adds	r1, r3, r2
        if (pcache && block == pcache->block &&
   147d6:	42a1      	cmp	r1, r4
   147d8:	d91e      	bls.n	14818 <lfs_bd_read+0x7a>
            if (off >= pcache->off) {
   147da:	42a3      	cmp	r3, r4
   147dc:	d905      	bls.n	147ea <lfs_bd_read+0x4c>
            diff = lfs_min(diff, pcache->off-off);
   147de:	1b1b      	subs	r3, r3, r4
   147e0:	455b      	cmp	r3, fp
   147e2:	bf28      	it	cs
   147e4:	465b      	movcs	r3, fp
   147e6:	4698      	mov	r8, r3
   147e8:	e077      	b.n	148da <lfs_bd_read+0x13c>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
   147ea:	eba3 0804 	sub.w	r8, r3, r4
   147ee:	4490      	add	r8, r2
   147f0:	45d8      	cmp	r8, fp
   147f2:	bf28      	it	cs
   147f4:	46d8      	movcs	r8, fp
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
   147f6:	f8d9 100c 	ldr.w	r1, [r9, #12]
   147fa:	1ae3      	subs	r3, r4, r3
   147fc:	4642      	mov	r2, r8
   147fe:	4419      	add	r1, r3
   14800:	9812      	ldr	r0, [sp, #72]	; 0x48
   14802:	f7fe fcf5 	bl	131f0 <memcpy>
                data += diff;
   14806:	9b12      	ldr	r3, [sp, #72]	; 0x48
   14808:	4443      	add	r3, r8
   1480a:	9312      	str	r3, [sp, #72]	; 0x48
                off += diff;
   1480c:	4444      	add	r4, r8
                size -= diff;
   1480e:	ebab 0b08 	sub.w	fp, fp, r8
                continue;
   14812:	e056      	b.n	148c2 <lfs_bd_read+0x124>
        lfs_size_t diff = size;
   14814:	46d8      	mov	r8, fp
   14816:	e060      	b.n	148da <lfs_bd_read+0x13c>
   14818:	46d8      	mov	r8, fp
   1481a:	e05e      	b.n	148da <lfs_bd_read+0x13c>
                off < rcache->off + rcache->size) {
   1481c:	686b      	ldr	r3, [r5, #4]
   1481e:	68aa      	ldr	r2, [r5, #8]
   14820:	1899      	adds	r1, r3, r2
        if (block == rcache->block &&
   14822:	42a1      	cmp	r1, r4
   14824:	d95c      	bls.n	148e0 <lfs_bd_read+0x142>
            if (off >= rcache->off) {
   14826:	42a3      	cmp	r3, r4
   14828:	d904      	bls.n	14834 <lfs_bd_read+0x96>
            diff = lfs_min(diff, rcache->off-off);
   1482a:	1b1b      	subs	r3, r3, r4
   1482c:	4598      	cmp	r8, r3
   1482e:	bf28      	it	cs
   14830:	4698      	movcs	r8, r3
   14832:	e055      	b.n	148e0 <lfs_bd_read+0x142>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
   14834:	1b19      	subs	r1, r3, r4
   14836:	440a      	add	r2, r1
   14838:	4590      	cmp	r8, r2
   1483a:	bf28      	it	cs
   1483c:	4690      	movcs	r8, r2
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
   1483e:	68e9      	ldr	r1, [r5, #12]
   14840:	1ae3      	subs	r3, r4, r3
   14842:	4642      	mov	r2, r8
   14844:	4419      	add	r1, r3
   14846:	9812      	ldr	r0, [sp, #72]	; 0x48
   14848:	f7fe fcd2 	bl	131f0 <memcpy>
                data += diff;
   1484c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1484e:	4443      	add	r3, r8
   14850:	9312      	str	r3, [sp, #72]	; 0x48
                off += diff;
   14852:	4444      	add	r4, r8
                size -= diff;
   14854:	ebab 0b08 	sub.w	fp, fp, r8
                continue;
   14858:	e033      	b.n	148c2 <lfs_bd_read+0x124>
            data += diff;
   1485a:	9912      	ldr	r1, [sp, #72]	; 0x48
   1485c:	9b04      	ldr	r3, [sp, #16]
   1485e:	4419      	add	r1, r3
   14860:	9112      	str	r1, [sp, #72]	; 0x48
            off += diff;
   14862:	441c      	add	r4, r3
            size -= diff;
   14864:	9a05      	ldr	r2, [sp, #20]
   14866:	eba2 0308 	sub.w	r3, r2, r8
   1486a:	449b      	add	fp, r3
            continue;
   1486c:	e029      	b.n	148c2 <lfs_bd_read+0x124>
        rcache->block = block;
   1486e:	602e      	str	r6, [r5, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
   14870:	9f03      	ldr	r7, [sp, #12]
   14872:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   14874:	695b      	ldr	r3, [r3, #20]
    return a - (a % alignment);
   14876:	fbb4 f2f3 	udiv	r2, r4, r3
   1487a:	fb03 4212 	mls	r2, r3, r2, r4
   1487e:	1aa2      	subs	r2, r4, r2
   14880:	606a      	str	r2, [r5, #4]
                lfs_min(
   14882:	eb04 030a 	add.w	r3, r4, sl
                    lfs_alignup(off+hint, lfs->cfg->read_size),
   14886:	6eb9      	ldr	r1, [r7, #104]	; 0x68
                lfs_min(
   14888:	6948      	ldr	r0, [r1, #20]
    return lfs_aligndown(a + alignment-1, alignment);
   1488a:	4403      	add	r3, r0
   1488c:	3b01      	subs	r3, #1
    return a - (a % alignment);
   1488e:	fbb3 fcf0 	udiv	ip, r3, r0
   14892:	fb00 301c 	mls	r0, r0, ip, r3
   14896:	1a1b      	subs	r3, r3, r0
   14898:	69c8      	ldr	r0, [r1, #28]
        rcache->size = lfs_min(
   1489a:	4298      	cmp	r0, r3
   1489c:	bf94      	ite	ls
   1489e:	ebc2 0300 	rsbls	r3, r2, r0
   148a2:	ebc2 0303 	rsbhi	r3, r2, r3
   148a6:	6a89      	ldr	r1, [r1, #40]	; 0x28
    return (a < b) ? a : b;
   148a8:	428b      	cmp	r3, r1
   148aa:	bf28      	it	cs
   148ac:	460b      	movcs	r3, r1
   148ae:	60ab      	str	r3, [r5, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
   148b0:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   148b2:	f8d0 8004 	ldr.w	r8, [r0, #4]
   148b6:	9300      	str	r3, [sp, #0]
   148b8:	68eb      	ldr	r3, [r5, #12]
   148ba:	4631      	mov	r1, r6
   148bc:	47c0      	blx	r8
        if (err) {
   148be:	4603      	mov	r3, r0
   148c0:	bb68      	cbnz	r0, 1491e <lfs_bd_read+0x180>
    while (size > 0) {
   148c2:	f1bb 0f00 	cmp.w	fp, #0
   148c6:	d02e      	beq.n	14926 <lfs_bd_read+0x188>
        if (pcache && block == pcache->block &&
   148c8:	f1b9 0f00 	cmp.w	r9, #0
   148cc:	d0a2      	beq.n	14814 <lfs_bd_read+0x76>
   148ce:	f8d9 3000 	ldr.w	r3, [r9]
   148d2:	42b3      	cmp	r3, r6
   148d4:	f43f af7a 	beq.w	147cc <lfs_bd_read+0x2e>
        lfs_size_t diff = size;
   148d8:	46d8      	mov	r8, fp
        if (block == rcache->block &&
   148da:	682b      	ldr	r3, [r5, #0]
   148dc:	42b3      	cmp	r3, r6
   148de:	d09d      	beq.n	1481c <lfs_bd_read+0x7e>
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
   148e0:	45d3      	cmp	fp, sl
   148e2:	d3c4      	bcc.n	1486e <lfs_bd_read+0xd0>
   148e4:	9b03      	ldr	r3, [sp, #12]
   148e6:	6e98      	ldr	r0, [r3, #104]	; 0x68
   148e8:	6942      	ldr	r2, [r0, #20]
   148ea:	fbb4 f3f2 	udiv	r3, r4, r2
   148ee:	fb02 4313 	mls	r3, r2, r3, r4
   148f2:	2b00      	cmp	r3, #0
   148f4:	d1bb      	bne.n	1486e <lfs_bd_read+0xd0>
   148f6:	455a      	cmp	r2, fp
   148f8:	d8b9      	bhi.n	1486e <lfs_bd_read+0xd0>
    return a - (a % alignment);
   148fa:	fbb8 f3f2 	udiv	r3, r8, r2
   148fe:	fb02 8313 	mls	r3, r2, r3, r8
   14902:	9305      	str	r3, [sp, #20]
   14904:	eba8 0303 	sub.w	r3, r8, r3
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
   14908:	6841      	ldr	r1, [r0, #4]
   1490a:	460f      	mov	r7, r1
   1490c:	9304      	str	r3, [sp, #16]
   1490e:	9300      	str	r3, [sp, #0]
   14910:	9b12      	ldr	r3, [sp, #72]	; 0x48
   14912:	4622      	mov	r2, r4
   14914:	4631      	mov	r1, r6
   14916:	47b8      	blx	r7
            if (err) {
   14918:	4603      	mov	r3, r0
   1491a:	2800      	cmp	r0, #0
   1491c:	d09d      	beq.n	1485a <lfs_bd_read+0xbc>
}
   1491e:	4618      	mov	r0, r3
   14920:	b007      	add	sp, #28
   14922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return 0;
   14926:	2300      	movs	r3, #0
   14928:	e7f9      	b.n	1491e <lfs_bd_read+0x180>
        return LFS_ERR_CORRUPT;
   1492a:	f06f 0353 	mvn.w	r3, #83	; 0x53
   1492e:	e7f6      	b.n	1491e <lfs_bd_read+0x180>
   14930:	f06f 0353 	mvn.w	r3, #83	; 0x53
   14934:	e7f3      	b.n	1491e <lfs_bd_read+0x180>

00014936 <lfs_fs_parent_match>:
        lfs_tag_t tag, const void *buffer) {
   14936:	b530      	push	{r4, r5, lr}
   14938:	b087      	sub	sp, #28
   1493a:	4604      	mov	r4, r0
    lfs_t *lfs = find->lfs;
   1493c:	6800      	ldr	r0, [r0, #0]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
   1493e:	6e83      	ldr	r3, [r0, #104]	; 0x68
    int err = lfs_bd_read(lfs,
   14940:	69db      	ldr	r3, [r3, #28]
   14942:	2108      	movs	r1, #8
   14944:	9103      	str	r1, [sp, #12]
   14946:	a904      	add	r1, sp, #16
   14948:	9102      	str	r1, [sp, #8]
   1494a:	6851      	ldr	r1, [r2, #4]
   1494c:	9101      	str	r1, [sp, #4]
   1494e:	6812      	ldr	r2, [r2, #0]
   14950:	9200      	str	r2, [sp, #0]
   14952:	4602      	mov	r2, r0
   14954:	f100 0110 	add.w	r1, r0, #16
   14958:	f7ff ff21 	bl	1479e <lfs_bd_read>
    if (err) {
   1495c:	4603      	mov	r3, r0
   1495e:	b978      	cbnz	r0, 14980 <lfs_fs_parent_match+0x4a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   14960:	9a04      	ldr	r2, [sp, #16]
   14962:	6861      	ldr	r1, [r4, #4]
   14964:	4291      	cmp	r1, r2
   14966:	d008      	beq.n	1497a <lfs_fs_parent_match+0x44>
   14968:	9d05      	ldr	r5, [sp, #20]
   1496a:	68a0      	ldr	r0, [r4, #8]
   1496c:	4285      	cmp	r5, r0
   1496e:	d004      	beq.n	1497a <lfs_fs_parent_match+0x44>
   14970:	4282      	cmp	r2, r0
   14972:	d002      	beq.n	1497a <lfs_fs_parent_match+0x44>
   14974:	42a9      	cmp	r1, r5
   14976:	d000      	beq.n	1497a <lfs_fs_parent_match+0x44>
   14978:	2301      	movs	r3, #1
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
   1497a:	3b00      	subs	r3, #0
   1497c:	bf18      	it	ne
   1497e:	2301      	movne	r3, #1
}
   14980:	4618      	mov	r0, r3
   14982:	b007      	add	sp, #28
   14984:	bd30      	pop	{r4, r5, pc}

00014986 <lfs_bd_cmp>:
        const void *buffer, lfs_size_t size) {
   14986:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1498a:	b087      	sub	sp, #28
   1498c:	4607      	mov	r7, r0
   1498e:	460e      	mov	r6, r1
   14990:	4692      	mov	sl, r2
   14992:	461d      	mov	r5, r3
   14994:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
   14998:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
   1499c:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
    for (lfs_off_t i = 0; i < size; i++) {
   149a0:	2400      	movs	r4, #0
   149a2:	e002      	b.n	149aa <lfs_bd_cmp+0x24>
            return (dat < data[i]) ? LFS_CMP_LT : LFS_CMP_GT;
   149a4:	2302      	movs	r3, #2
   149a6:	e01e      	b.n	149e6 <lfs_bd_cmp+0x60>
    for (lfs_off_t i = 0; i < size; i++) {
   149a8:	3401      	adds	r4, #1
   149aa:	4544      	cmp	r4, r8
   149ac:	d21a      	bcs.n	149e4 <lfs_bd_cmp+0x5e>
        int err = lfs_bd_read(lfs,
   149ae:	2301      	movs	r3, #1
   149b0:	9303      	str	r3, [sp, #12]
   149b2:	f10d 0317 	add.w	r3, sp, #23
   149b6:	9302      	str	r3, [sp, #8]
   149b8:	eb04 0309 	add.w	r3, r4, r9
   149bc:	9301      	str	r3, [sp, #4]
   149be:	9b10      	ldr	r3, [sp, #64]	; 0x40
   149c0:	9300      	str	r3, [sp, #0]
   149c2:	1b2b      	subs	r3, r5, r4
   149c4:	4652      	mov	r2, sl
   149c6:	4631      	mov	r1, r6
   149c8:	4638      	mov	r0, r7
   149ca:	f7ff fee8 	bl	1479e <lfs_bd_read>
        if (err) {
   149ce:	4603      	mov	r3, r0
   149d0:	b948      	cbnz	r0, 149e6 <lfs_bd_cmp+0x60>
        if (dat != data[i]) {
   149d2:	f81b 2004 	ldrb.w	r2, [fp, r4]
   149d6:	f89d 3017 	ldrb.w	r3, [sp, #23]
   149da:	429a      	cmp	r2, r3
   149dc:	d0e4      	beq.n	149a8 <lfs_bd_cmp+0x22>
            return (dat < data[i]) ? LFS_CMP_LT : LFS_CMP_GT;
   149de:	d9e1      	bls.n	149a4 <lfs_bd_cmp+0x1e>
   149e0:	2301      	movs	r3, #1
   149e2:	e000      	b.n	149e6 <lfs_bd_cmp+0x60>
    return LFS_CMP_EQ;
   149e4:	2300      	movs	r3, #0
}
   149e6:	4618      	mov	r0, r3
   149e8:	b007      	add	sp, #28
   149ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000149ee <lfs_dir_find_match>:
        lfs_tag_t tag, const void *buffer) {
   149ee:	b570      	push	{r4, r5, r6, lr}
   149f0:	b084      	sub	sp, #16
   149f2:	4604      	mov	r4, r0
   149f4:	4615      	mov	r5, r2
    lfs_t *lfs = name->lfs;
   149f6:	6800      	ldr	r0, [r0, #0]
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
   149f8:	68a3      	ldr	r3, [r4, #8]
    return tag & 0x000003ff;
   149fa:	f3c1 0609 	ubfx	r6, r1, #0, #10
    return (a < b) ? a : b;
   149fe:	42b3      	cmp	r3, r6
   14a00:	bf28      	it	cs
   14a02:	4633      	movcs	r3, r6
    int res = lfs_bd_cmp(lfs,
   14a04:	9303      	str	r3, [sp, #12]
   14a06:	6862      	ldr	r2, [r4, #4]
   14a08:	9202      	str	r2, [sp, #8]
   14a0a:	686a      	ldr	r2, [r5, #4]
   14a0c:	9201      	str	r2, [sp, #4]
   14a0e:	682a      	ldr	r2, [r5, #0]
   14a10:	9200      	str	r2, [sp, #0]
   14a12:	4602      	mov	r2, r0
   14a14:	2100      	movs	r1, #0
   14a16:	f7ff ffb6 	bl	14986 <lfs_bd_cmp>
    if (res != LFS_CMP_EQ) {
   14a1a:	b920      	cbnz	r0, 14a26 <lfs_dir_find_match+0x38>
    if (name->size != lfs_tag_size(tag)) {
   14a1c:	68a3      	ldr	r3, [r4, #8]
   14a1e:	42b3      	cmp	r3, r6
   14a20:	d001      	beq.n	14a26 <lfs_dir_find_match+0x38>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
   14a22:	d202      	bcs.n	14a2a <lfs_dir_find_match+0x3c>
   14a24:	2001      	movs	r0, #1
}
   14a26:	b004      	add	sp, #16
   14a28:	bd70      	pop	{r4, r5, r6, pc}
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
   14a2a:	2002      	movs	r0, #2
   14a2c:	e7fb      	b.n	14a26 <lfs_dir_find_match+0x38>

00014a2e <lfs_dir_fetch>:
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
   14a2e:	b500      	push	{lr}
   14a30:	b085      	sub	sp, #20
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
   14a32:	2300      	movs	r3, #0
   14a34:	9303      	str	r3, [sp, #12]
   14a36:	9302      	str	r3, [sp, #8]
   14a38:	9301      	str	r3, [sp, #4]
   14a3a:	f04f 33ff 	mov.w	r3, #4294967295
   14a3e:	9300      	str	r3, [sp, #0]
   14a40:	f7f8 f8ea 	bl	cc18 <lfs_dir_fetchmatch>
}
   14a44:	b005      	add	sp, #20
   14a46:	f85d fb04 	ldr.w	pc, [sp], #4

00014a4a <lfs_fs_pred>:
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
   14a4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   14a4c:	4607      	mov	r7, r0
   14a4e:	460e      	mov	r6, r1
   14a50:	4614      	mov	r4, r2
    pdir->tail[0] = 0;
   14a52:	2500      	movs	r5, #0
   14a54:	6195      	str	r5, [r2, #24]
    pdir->tail[1] = 1;
   14a56:	2301      	movs	r3, #1
   14a58:	61d3      	str	r3, [r2, #28]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
   14a5a:	69a3      	ldr	r3, [r4, #24]
   14a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
   14a60:	d021      	beq.n	14aa6 <lfs_fs_pred+0x5c>
   14a62:	69e2      	ldr	r2, [r4, #28]
   14a64:	f1b2 3fff 	cmp.w	r2, #4294967295
   14a68:	d01b      	beq.n	14aa2 <lfs_fs_pred+0x58>
   14a6a:	2200      	movs	r2, #0
    while (!lfs_pair_isnull(pdir->tail)) {
   14a6c:	b9ea      	cbnz	r2, 14aaa <lfs_fs_pred+0x60>
        if (cycle >= lfs->cfg->block_count/2) {
   14a6e:	6eba      	ldr	r2, [r7, #104]	; 0x68
   14a70:	6a12      	ldr	r2, [r2, #32]
   14a72:	ebb5 0f52 	cmp.w	r5, r2, lsr #1
   14a76:	d21b      	bcs.n	14ab0 <lfs_fs_pred+0x66>
        cycle += 1;
   14a78:	3501      	adds	r5, #1
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   14a7a:	6832      	ldr	r2, [r6, #0]
   14a7c:	429a      	cmp	r2, r3
   14a7e:	d01a      	beq.n	14ab6 <lfs_fs_pred+0x6c>
   14a80:	69e0      	ldr	r0, [r4, #28]
   14a82:	6871      	ldr	r1, [r6, #4]
   14a84:	4288      	cmp	r0, r1
   14a86:	d018      	beq.n	14aba <lfs_fs_pred+0x70>
   14a88:	4299      	cmp	r1, r3
   14a8a:	d018      	beq.n	14abe <lfs_fs_pred+0x74>
   14a8c:	4282      	cmp	r2, r0
   14a8e:	d018      	beq.n	14ac2 <lfs_fs_pred+0x78>
        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
   14a90:	f104 0218 	add.w	r2, r4, #24
   14a94:	4621      	mov	r1, r4
   14a96:	4638      	mov	r0, r7
   14a98:	f7ff ffc9 	bl	14a2e <lfs_dir_fetch>
        if (err) {
   14a9c:	2800      	cmp	r0, #0
   14a9e:	d0dc      	beq.n	14a5a <lfs_fs_pred+0x10>
   14aa0:	e00a      	b.n	14ab8 <lfs_fs_pred+0x6e>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
   14aa2:	2201      	movs	r2, #1
   14aa4:	e7e2      	b.n	14a6c <lfs_fs_pred+0x22>
   14aa6:	2201      	movs	r2, #1
   14aa8:	e7e0      	b.n	14a6c <lfs_fs_pred+0x22>
    return LFS_ERR_NOENT;
   14aaa:	f06f 0001 	mvn.w	r0, #1
   14aae:	e003      	b.n	14ab8 <lfs_fs_pred+0x6e>
            return LFS_ERR_CORRUPT;
   14ab0:	f06f 0053 	mvn.w	r0, #83	; 0x53
   14ab4:	e000      	b.n	14ab8 <lfs_fs_pred+0x6e>
            return 0;
   14ab6:	2000      	movs	r0, #0
}
   14ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return 0;
   14aba:	2000      	movs	r0, #0
   14abc:	e7fc      	b.n	14ab8 <lfs_fs_pred+0x6e>
   14abe:	2000      	movs	r0, #0
   14ac0:	e7fa      	b.n	14ab8 <lfs_fs_pred+0x6e>
   14ac2:	2000      	movs	r0, #0
   14ac4:	e7f8      	b.n	14ab8 <lfs_fs_pred+0x6e>

00014ac6 <lfs_dir_get>:
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
   14ac6:	b510      	push	{r4, lr}
   14ac8:	b084      	sub	sp, #16
    return tag & 0x000003ff;
   14aca:	f3c3 0409 	ubfx	r4, r3, #0, #10
    return lfs_dir_getslice(lfs, dir,
   14ace:	9402      	str	r4, [sp, #8]
   14ad0:	9c06      	ldr	r4, [sp, #24]
   14ad2:	9401      	str	r4, [sp, #4]
   14ad4:	2400      	movs	r4, #0
   14ad6:	9400      	str	r4, [sp, #0]
   14ad8:	f7f8 fc7c 	bl	d3d4 <lfs_dir_getslice>
}
   14adc:	b004      	add	sp, #16
   14ade:	bd10      	pop	{r4, pc}

00014ae0 <lfs_dir_getread>:
        lfs_off_t off, void *buffer, lfs_size_t size) {
   14ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ae4:	b085      	sub	sp, #20
   14ae6:	4606      	mov	r6, r0
   14ae8:	468a      	mov	sl, r1
   14aea:	4617      	mov	r7, r2
   14aec:	461c      	mov	r4, r3
   14aee:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   14af2:	9d11      	ldr	r5, [sp, #68]	; 0x44
   14af4:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
    if (off+size > lfs->cfg->block_size) {
   14af8:	eb05 0208 	add.w	r2, r5, r8
   14afc:	6e83      	ldr	r3, [r0, #104]	; 0x68
   14afe:	69db      	ldr	r3, [r3, #28]
   14b00:	429a      	cmp	r2, r3
   14b02:	d94e      	bls.n	14ba2 <lfs_dir_getread+0xc2>
        return LFS_ERR_CORRUPT;
   14b04:	f06f 0053 	mvn.w	r0, #83	; 0x53
   14b08:	e075      	b.n	14bf6 <lfs_dir_getread+0x116>
                off < pcache->off + pcache->size) {
   14b0a:	6879      	ldr	r1, [r7, #4]
   14b0c:	68bb      	ldr	r3, [r7, #8]
   14b0e:	18ca      	adds	r2, r1, r3
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
   14b10:	42aa      	cmp	r2, r5
   14b12:	d91c      	bls.n	14b4e <lfs_dir_getread+0x6e>
            if (off >= pcache->off) {
   14b14:	42a9      	cmp	r1, r5
   14b16:	d904      	bls.n	14b22 <lfs_dir_getread+0x42>
            diff = lfs_min(diff, pcache->off-off);
   14b18:	1b49      	subs	r1, r1, r5
   14b1a:	4541      	cmp	r1, r8
   14b1c:	bf28      	it	cs
   14b1e:	4641      	movcs	r1, r8
   14b20:	e049      	b.n	14bb6 <lfs_dir_getread+0xd6>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
   14b22:	eba1 0905 	sub.w	r9, r1, r5
   14b26:	4499      	add	r9, r3
   14b28:	45c1      	cmp	r9, r8
   14b2a:	bf28      	it	cs
   14b2c:	46c1      	movcs	r9, r8
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
   14b2e:	68fb      	ldr	r3, [r7, #12]
   14b30:	1a69      	subs	r1, r5, r1
   14b32:	464a      	mov	r2, r9
   14b34:	4419      	add	r1, r3
   14b36:	9812      	ldr	r0, [sp, #72]	; 0x48
   14b38:	f7fe fb5a 	bl	131f0 <memcpy>
                data += diff;
   14b3c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   14b3e:	444b      	add	r3, r9
   14b40:	9312      	str	r3, [sp, #72]	; 0x48
                off += diff;
   14b42:	444d      	add	r5, r9
                size -= diff;
   14b44:	eba8 0809 	sub.w	r8, r8, r9
                continue;
   14b48:	e02b      	b.n	14ba2 <lfs_dir_getread+0xc2>
        lfs_size_t diff = size;
   14b4a:	4641      	mov	r1, r8
   14b4c:	e033      	b.n	14bb6 <lfs_dir_getread+0xd6>
   14b4e:	4641      	mov	r1, r8
   14b50:	e031      	b.n	14bb6 <lfs_dir_getread+0xd6>
        rcache->block = LFS_BLOCK_INLINE;
   14b52:	f06f 0301 	mvn.w	r3, #1
   14b56:	6023      	str	r3, [r4, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
   14b58:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   14b5a:	695b      	ldr	r3, [r3, #20]
    return a - (a % alignment);
   14b5c:	fbb5 f2f3 	udiv	r2, r5, r3
   14b60:	fb03 5212 	mls	r2, r3, r2, r5
   14b64:	1aaa      	subs	r2, r5, r2
   14b66:	6062      	str	r2, [r4, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
   14b68:	eb05 030b 	add.w	r3, r5, fp
   14b6c:	6eb0      	ldr	r0, [r6, #104]	; 0x68
   14b6e:	f8d0 c014 	ldr.w	ip, [r0, #20]
    return lfs_aligndown(a + alignment-1, alignment);
   14b72:	4463      	add	r3, ip
   14b74:	3b01      	subs	r3, #1
    return a - (a % alignment);
   14b76:	fbb3 f1fc 	udiv	r1, r3, ip
   14b7a:	fb0c 3111 	mls	r1, ip, r1, r3
   14b7e:	1a5b      	subs	r3, r3, r1
   14b80:	6a81      	ldr	r1, [r0, #40]	; 0x28
    return (a < b) ? a : b;
   14b82:	428b      	cmp	r3, r1
   14b84:	bf28      	it	cs
   14b86:	460b      	movcs	r3, r1
   14b88:	60a3      	str	r3, [r4, #8]
                rcache->off, rcache->buffer, rcache->size);
   14b8a:	68e1      	ldr	r1, [r4, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
   14b8c:	9302      	str	r3, [sp, #8]
   14b8e:	9101      	str	r1, [sp, #4]
   14b90:	9200      	str	r2, [sp, #0]
   14b92:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14b94:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   14b96:	4651      	mov	r1, sl
   14b98:	4630      	mov	r0, r6
   14b9a:	f7f8 fc1b 	bl	d3d4 <lfs_dir_getslice>
        if (err < 0) {
   14b9e:	2800      	cmp	r0, #0
   14ba0:	db29      	blt.n	14bf6 <lfs_dir_getread+0x116>
    while (size > 0) {
   14ba2:	f1b8 0f00 	cmp.w	r8, #0
   14ba6:	d025      	beq.n	14bf4 <lfs_dir_getread+0x114>
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
   14ba8:	2f00      	cmp	r7, #0
   14baa:	d0ce      	beq.n	14b4a <lfs_dir_getread+0x6a>
   14bac:	683b      	ldr	r3, [r7, #0]
   14bae:	f113 0f02 	cmn.w	r3, #2
   14bb2:	d0aa      	beq.n	14b0a <lfs_dir_getread+0x2a>
        lfs_size_t diff = size;
   14bb4:	4641      	mov	r1, r8
        if (rcache->block == LFS_BLOCK_INLINE &&
   14bb6:	6823      	ldr	r3, [r4, #0]
   14bb8:	f113 0f02 	cmn.w	r3, #2
   14bbc:	d1c9      	bne.n	14b52 <lfs_dir_getread+0x72>
                off < rcache->off + rcache->size) {
   14bbe:	6863      	ldr	r3, [r4, #4]
   14bc0:	68a2      	ldr	r2, [r4, #8]
   14bc2:	1898      	adds	r0, r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
   14bc4:	42a8      	cmp	r0, r5
   14bc6:	d9c4      	bls.n	14b52 <lfs_dir_getread+0x72>
            if (off >= rcache->off) {
   14bc8:	42ab      	cmp	r3, r5
   14bca:	d8c2      	bhi.n	14b52 <lfs_dir_getread+0x72>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
   14bcc:	eba3 0905 	sub.w	r9, r3, r5
   14bd0:	4491      	add	r9, r2
   14bd2:	4589      	cmp	r9, r1
   14bd4:	bf28      	it	cs
   14bd6:	4689      	movcs	r9, r1
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
   14bd8:	68e1      	ldr	r1, [r4, #12]
   14bda:	1aeb      	subs	r3, r5, r3
   14bdc:	464a      	mov	r2, r9
   14bde:	4419      	add	r1, r3
   14be0:	9812      	ldr	r0, [sp, #72]	; 0x48
   14be2:	f7fe fb05 	bl	131f0 <memcpy>
                data += diff;
   14be6:	9b12      	ldr	r3, [sp, #72]	; 0x48
   14be8:	444b      	add	r3, r9
   14bea:	9312      	str	r3, [sp, #72]	; 0x48
                off += diff;
   14bec:	444d      	add	r5, r9
                size -= diff;
   14bee:	eba8 0809 	sub.w	r8, r8, r9
                continue;
   14bf2:	e7d6      	b.n	14ba2 <lfs_dir_getread+0xc2>
    return 0;
   14bf4:	2000      	movs	r0, #0
}
   14bf6:	b005      	add	sp, #20
   14bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00014bfc <lfs_bd_flush>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
   14bfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14c00:	b085      	sub	sp, #20
   14c02:	460c      	mov	r4, r1
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
   14c04:	6809      	ldr	r1, [r1, #0]
   14c06:	f111 0f03 	cmn.w	r1, #3
   14c0a:	d834      	bhi.n	14c76 <lfs_bd_flush+0x7a>
   14c0c:	4606      	mov	r6, r0
   14c0e:	4617      	mov	r7, r2
   14c10:	4698      	mov	r8, r3
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
   14c12:	68a5      	ldr	r5, [r4, #8]
   14c14:	6e80      	ldr	r0, [r0, #104]	; 0x68
   14c16:	6982      	ldr	r2, [r0, #24]
    return lfs_aligndown(a + alignment-1, alignment);
   14c18:	4415      	add	r5, r2
   14c1a:	3d01      	subs	r5, #1
    return a - (a % alignment);
   14c1c:	fbb5 f3f2 	udiv	r3, r5, r2
   14c20:	fb02 5313 	mls	r3, r2, r3, r5
   14c24:	1aed      	subs	r5, r5, r3
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
   14c26:	f8d0 9008 	ldr.w	r9, [r0, #8]
   14c2a:	9500      	str	r5, [sp, #0]
   14c2c:	68e3      	ldr	r3, [r4, #12]
   14c2e:	6862      	ldr	r2, [r4, #4]
   14c30:	47c8      	blx	r9
        if (err) {
   14c32:	4681      	mov	r9, r0
   14c34:	bb08      	cbnz	r0, 14c7a <lfs_bd_flush+0x7e>
        if (validate) {
   14c36:	f1b8 0f00 	cmp.w	r8, #0
   14c3a:	d012      	beq.n	14c62 <lfs_bd_flush+0x66>
    rcache->block = LFS_BLOCK_NULL;
   14c3c:	f04f 33ff 	mov.w	r3, #4294967295
   14c40:	603b      	str	r3, [r7, #0]
                    pcache->block, pcache->off, pcache->buffer, diff);
   14c42:	68e3      	ldr	r3, [r4, #12]
            int res = lfs_bd_cmp(lfs,
   14c44:	9503      	str	r5, [sp, #12]
   14c46:	9302      	str	r3, [sp, #8]
   14c48:	6863      	ldr	r3, [r4, #4]
   14c4a:	9301      	str	r3, [sp, #4]
   14c4c:	6823      	ldr	r3, [r4, #0]
   14c4e:	9300      	str	r3, [sp, #0]
   14c50:	462b      	mov	r3, r5
   14c52:	463a      	mov	r2, r7
   14c54:	2100      	movs	r1, #0
   14c56:	4630      	mov	r0, r6
   14c58:	f7ff fe95 	bl	14986 <lfs_bd_cmp>
            if (res < 0) {
   14c5c:	2800      	cmp	r0, #0
   14c5e:	db10      	blt.n	14c82 <lfs_bd_flush+0x86>
            if (res != LFS_CMP_EQ) {
   14c60:	b988      	cbnz	r0, 14c86 <lfs_bd_flush+0x8a>
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
   14c62:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   14c64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   14c66:	21ff      	movs	r1, #255	; 0xff
   14c68:	68e0      	ldr	r0, [r4, #12]
   14c6a:	f7fe fae5 	bl	13238 <memset>
    pcache->block = LFS_BLOCK_NULL;
   14c6e:	f04f 33ff 	mov.w	r3, #4294967295
   14c72:	6023      	str	r3, [r4, #0]
}
   14c74:	e001      	b.n	14c7a <lfs_bd_flush+0x7e>
    return 0;
   14c76:	f04f 0900 	mov.w	r9, #0
}
   14c7a:	4648      	mov	r0, r9
   14c7c:	b005      	add	sp, #20
   14c7e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return res;
   14c82:	4681      	mov	r9, r0
   14c84:	e7f9      	b.n	14c7a <lfs_bd_flush+0x7e>
                return LFS_ERR_CORRUPT;
   14c86:	f06f 0953 	mvn.w	r9, #83	; 0x53
   14c8a:	e7f6      	b.n	14c7a <lfs_bd_flush+0x7e>

00014c8c <lfs_bd_prog>:
        const void *buffer, lfs_size_t size) {
   14c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c90:	b083      	sub	sp, #12
   14c92:	4607      	mov	r7, r0
   14c94:	460c      	mov	r4, r1
   14c96:	4693      	mov	fp, r2
   14c98:	9301      	str	r3, [sp, #4]
   14c9a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   14c9c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   14c9e:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   14ca2:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    while (size > 0) {
   14ca6:	e00a      	b.n	14cbe <lfs_bd_prog+0x32>
        pcache->block = block;
   14ca8:	6026      	str	r6, [r4, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
   14caa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   14cac:	699a      	ldr	r2, [r3, #24]
   14cae:	fbb5 f3f2 	udiv	r3, r5, r2
   14cb2:	fb02 5313 	mls	r3, r2, r3, r5
   14cb6:	1aeb      	subs	r3, r5, r3
   14cb8:	6063      	str	r3, [r4, #4]
        pcache->size = 0;
   14cba:	2300      	movs	r3, #0
   14cbc:	60a3      	str	r3, [r4, #8]
    while (size > 0) {
   14cbe:	f1b8 0f00 	cmp.w	r8, #0
   14cc2:	d02e      	beq.n	14d22 <lfs_bd_prog+0x96>
        if (block == pcache->block &&
   14cc4:	6823      	ldr	r3, [r4, #0]
   14cc6:	42b3      	cmp	r3, r6
   14cc8:	d1ee      	bne.n	14ca8 <lfs_bd_prog+0x1c>
                off >= pcache->off &&
   14cca:	6860      	ldr	r0, [r4, #4]
        if (block == pcache->block &&
   14ccc:	42a8      	cmp	r0, r5
   14cce:	d8eb      	bhi.n	14ca8 <lfs_bd_prog+0x1c>
                off < pcache->off + lfs->cfg->cache_size) {
   14cd0:	6eba      	ldr	r2, [r7, #104]	; 0x68
   14cd2:	6a92      	ldr	r2, [r2, #40]	; 0x28
   14cd4:	1881      	adds	r1, r0, r2
                off >= pcache->off &&
   14cd6:	42a9      	cmp	r1, r5
   14cd8:	d9e6      	bls.n	14ca8 <lfs_bd_prog+0x1c>
                    lfs->cfg->cache_size - (off-pcache->off));
   14cda:	eba0 0905 	sub.w	r9, r0, r5
            lfs_size_t diff = lfs_min(size,
   14cde:	4491      	add	r9, r2
    return (a < b) ? a : b;
   14ce0:	45c1      	cmp	r9, r8
   14ce2:	bf28      	it	cs
   14ce4:	46c1      	movcs	r9, r8
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
   14ce6:	1a28      	subs	r0, r5, r0
   14ce8:	464a      	mov	r2, r9
   14cea:	4651      	mov	r1, sl
   14cec:	68e3      	ldr	r3, [r4, #12]
   14cee:	4418      	add	r0, r3
   14cf0:	f7fe fa7e 	bl	131f0 <memcpy>
            data += diff;
   14cf4:	44ca      	add	sl, r9
            off += diff;
   14cf6:	444d      	add	r5, r9
            size -= diff;
   14cf8:	eba8 0809 	sub.w	r8, r8, r9
            pcache->size = lfs_max(pcache->size, off - pcache->off);
   14cfc:	68a3      	ldr	r3, [r4, #8]
   14cfe:	6862      	ldr	r2, [r4, #4]
   14d00:	1aaa      	subs	r2, r5, r2
    return (a > b) ? a : b;
   14d02:	4293      	cmp	r3, r2
   14d04:	bf38      	it	cc
   14d06:	4613      	movcc	r3, r2
   14d08:	60a3      	str	r3, [r4, #8]
            if (pcache->size == lfs->cfg->cache_size) {
   14d0a:	6eba      	ldr	r2, [r7, #104]	; 0x68
   14d0c:	6a92      	ldr	r2, [r2, #40]	; 0x28
   14d0e:	429a      	cmp	r2, r3
   14d10:	d1d5      	bne.n	14cbe <lfs_bd_prog+0x32>
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
   14d12:	9b01      	ldr	r3, [sp, #4]
   14d14:	465a      	mov	r2, fp
   14d16:	4621      	mov	r1, r4
   14d18:	4638      	mov	r0, r7
   14d1a:	f7ff ff6f 	bl	14bfc <lfs_bd_flush>
                if (err) {
   14d1e:	b908      	cbnz	r0, 14d24 <lfs_bd_prog+0x98>
   14d20:	e7cd      	b.n	14cbe <lfs_bd_prog+0x32>
    return 0;
   14d22:	2000      	movs	r0, #0
}
   14d24:	b003      	add	sp, #12
   14d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00014d2a <lfs_dir_commitprog>:
        const void *buffer, lfs_size_t size) {
   14d2a:	b5f0      	push	{r4, r5, r6, r7, lr}
   14d2c:	b085      	sub	sp, #20
   14d2e:	460c      	mov	r4, r1
   14d30:	4617      	mov	r7, r2
   14d32:	461e      	mov	r6, r3
    int err = lfs_bd_prog(lfs,
   14d34:	9303      	str	r3, [sp, #12]
   14d36:	9202      	str	r2, [sp, #8]
   14d38:	684b      	ldr	r3, [r1, #4]
   14d3a:	9301      	str	r3, [sp, #4]
   14d3c:	680b      	ldr	r3, [r1, #0]
   14d3e:	9300      	str	r3, [sp, #0]
   14d40:	2300      	movs	r3, #0
   14d42:	4602      	mov	r2, r0
   14d44:	f100 0110 	add.w	r1, r0, #16
   14d48:	f7ff ffa0 	bl	14c8c <lfs_bd_prog>
    if (err) {
   14d4c:	4605      	mov	r5, r0
   14d4e:	b110      	cbz	r0, 14d56 <lfs_dir_commitprog+0x2c>
}
   14d50:	4628      	mov	r0, r5
   14d52:	b005      	add	sp, #20
   14d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
    commit->crc = lfs_crc(commit->crc, buffer, size);
   14d56:	4632      	mov	r2, r6
   14d58:	4639      	mov	r1, r7
   14d5a:	68e0      	ldr	r0, [r4, #12]
   14d5c:	f7fa fbb2 	bl	f4c4 <lfs_crc>
   14d60:	60e0      	str	r0, [r4, #12]
    commit->off += size;
   14d62:	6863      	ldr	r3, [r4, #4]
   14d64:	4433      	add	r3, r6
   14d66:	6063      	str	r3, [r4, #4]
    return 0;
   14d68:	e7f2      	b.n	14d50 <lfs_dir_commitprog+0x26>

00014d6a <lfs_dir_commitattr>:
        lfs_tag_t tag, const void *buffer) {
   14d6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d6e:	b087      	sub	sp, #28
   14d70:	4614      	mov	r4, r2
   14d72:	461f      	mov	r7, r3
    return ((int32_t)(tag << 22) >> 22) == -1;
   14d74:	f342 0809 	sbfx	r8, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
   14d78:	f1b8 3fff 	cmp.w	r8, #4294967295
   14d7c:	bf14      	ite	ne
   14d7e:	4690      	movne	r8, r2
   14d80:	f102 0801 	addeq.w	r8, r2, #1
    return tag & 0x000003ff;
   14d84:	f3c8 0809 	ubfx	r8, r8, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
   14d88:	f108 0904 	add.w	r9, r8, #4
    if (commit->off + dsize > commit->end) {
   14d8c:	684b      	ldr	r3, [r1, #4]
   14d8e:	444b      	add	r3, r9
   14d90:	694a      	ldr	r2, [r1, #20]
   14d92:	4293      	cmp	r3, r2
   14d94:	d842      	bhi.n	14e1c <lfs_dir_commitattr+0xb2>
   14d96:	4605      	mov	r5, r0
   14d98:	460e      	mov	r6, r1
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
   14d9a:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
   14d9e:	688b      	ldr	r3, [r1, #8]
   14da0:	ea8b 0303 	eor.w	r3, fp, r3
    return __builtin_bswap32(a);
   14da4:	ba1b      	rev	r3, r3
   14da6:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
   14da8:	2304      	movs	r3, #4
   14daa:	aa05      	add	r2, sp, #20
   14dac:	f7ff ffbd 	bl	14d2a <lfs_dir_commitprog>
    if (err) {
   14db0:	4682      	mov	sl, r0
   14db2:	b960      	cbnz	r0, 14dce <lfs_dir_commitattr+0x64>
    if (!(tag & 0x80000000)) {
   14db4:	2c00      	cmp	r4, #0
   14db6:	da01      	bge.n	14dbc <lfs_dir_commitattr+0x52>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
   14db8:	2400      	movs	r4, #0
   14dba:	e00d      	b.n	14dd8 <lfs_dir_commitattr+0x6e>
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
   14dbc:	4643      	mov	r3, r8
   14dbe:	463a      	mov	r2, r7
   14dc0:	4631      	mov	r1, r6
   14dc2:	4628      	mov	r0, r5
   14dc4:	f7ff ffb1 	bl	14d2a <lfs_dir_commitprog>
        if (err) {
   14dc8:	bb58      	cbnz	r0, 14e22 <lfs_dir_commitattr+0xb8>
    commit->ptag = tag & 0x7fffffff;
   14dca:	f8c6 b008 	str.w	fp, [r6, #8]
}
   14dce:	4650      	mov	r0, sl
   14dd0:	b007      	add	sp, #28
   14dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
   14dd6:	3401      	adds	r4, #1
   14dd8:	4544      	cmp	r4, r8
   14dda:	d2f6      	bcs.n	14dca <lfs_dir_commitattr+0x60>
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
   14ddc:	eba9 0304 	sub.w	r3, r9, r4
                    disk->block, disk->off+i, &dat, 1);
   14de0:	687a      	ldr	r2, [r7, #4]
            err = lfs_bd_read(lfs,
   14de2:	2101      	movs	r1, #1
   14de4:	9103      	str	r1, [sp, #12]
   14de6:	f10d 0113 	add.w	r1, sp, #19
   14dea:	9102      	str	r1, [sp, #8]
   14dec:	4422      	add	r2, r4
   14dee:	9201      	str	r2, [sp, #4]
   14df0:	683a      	ldr	r2, [r7, #0]
   14df2:	9200      	str	r2, [sp, #0]
   14df4:	3b04      	subs	r3, #4
   14df6:	462a      	mov	r2, r5
   14df8:	2100      	movs	r1, #0
   14dfa:	4628      	mov	r0, r5
   14dfc:	f7ff fccf 	bl	1479e <lfs_bd_read>
            if (err) {
   14e00:	4603      	mov	r3, r0
   14e02:	b948      	cbnz	r0, 14e18 <lfs_dir_commitattr+0xae>
            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
   14e04:	2301      	movs	r3, #1
   14e06:	f10d 0213 	add.w	r2, sp, #19
   14e0a:	4631      	mov	r1, r6
   14e0c:	4628      	mov	r0, r5
   14e0e:	f7ff ff8c 	bl	14d2a <lfs_dir_commitprog>
            if (err) {
   14e12:	4603      	mov	r3, r0
   14e14:	2800      	cmp	r0, #0
   14e16:	d0de      	beq.n	14dd6 <lfs_dir_commitattr+0x6c>
                return err;
   14e18:	469a      	mov	sl, r3
   14e1a:	e7d8      	b.n	14dce <lfs_dir_commitattr+0x64>
        return LFS_ERR_NOSPC;
   14e1c:	f06f 0a1b 	mvn.w	sl, #27
   14e20:	e7d5      	b.n	14dce <lfs_dir_commitattr+0x64>
            return err;
   14e22:	4682      	mov	sl, r0
   14e24:	e7d3      	b.n	14dce <lfs_dir_commitattr+0x64>

00014e26 <lfs_dir_commit_commit>:
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
   14e26:	b508      	push	{r3, lr}
   14e28:	4613      	mov	r3, r2
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
   14e2a:	460a      	mov	r2, r1
   14e2c:	6841      	ldr	r1, [r0, #4]
   14e2e:	6800      	ldr	r0, [r0, #0]
   14e30:	f7ff ff9b 	bl	14d6a <lfs_dir_commitattr>
}
   14e34:	bd08      	pop	{r3, pc}

00014e36 <lfs_bd_sync>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
   14e36:	b538      	push	{r3, r4, r5, lr}
   14e38:	4604      	mov	r4, r0
    rcache->block = LFS_BLOCK_NULL;
   14e3a:	f04f 35ff 	mov.w	r5, #4294967295
   14e3e:	6015      	str	r5, [r2, #0]
    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
   14e40:	f7ff fedc 	bl	14bfc <lfs_bd_flush>
    if (err) {
   14e44:	b910      	cbnz	r0, 14e4c <lfs_bd_sync+0x16>
    err = lfs->cfg->sync(lfs->cfg);
   14e46:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   14e48:	6903      	ldr	r3, [r0, #16]
   14e4a:	4798      	blx	r3
}
   14e4c:	bd38      	pop	{r3, r4, r5, pc}

00014e4e <lfs_dir_commitcrc>:
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
   14e4e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e52:	b08b      	sub	sp, #44	; 0x2c
   14e54:	4605      	mov	r5, r0
   14e56:	460c      	mov	r4, r1
    const lfs_off_t off1 = commit->off;
   14e58:	f8d1 b004 	ldr.w	fp, [r1, #4]
    const uint32_t crc1 = commit->crc;
   14e5c:	68cb      	ldr	r3, [r1, #12]
   14e5e:	9304      	str	r3, [sp, #16]
    const lfs_off_t end = lfs_alignup(off1 + 2*sizeof(uint32_t),
   14e60:	f10b 0608 	add.w	r6, fp, #8
            lfs->cfg->prog_size);
   14e64:	6e83      	ldr	r3, [r0, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(off1 + 2*sizeof(uint32_t),
   14e66:	699a      	ldr	r2, [r3, #24]
    return lfs_aligndown(a + alignment-1, alignment);
   14e68:	4416      	add	r6, r2
   14e6a:	3e01      	subs	r6, #1
    return a - (a % alignment);
   14e6c:	fbb6 f3f2 	udiv	r3, r6, r2
   14e70:	fb02 6313 	mls	r3, r2, r3, r6
   14e74:	1af6      	subs	r6, r6, r3
    while (commit->off < end) {
   14e76:	e04d      	b.n	14f14 <lfs_dir_commitcrc+0xc6>
        lfs_tag_t tag = 0xffffffff;
   14e78:	f04f 33ff 	mov.w	r3, #4294967295
   14e7c:	9307      	str	r3, [sp, #28]
        int err = lfs_bd_read(lfs,
   14e7e:	2304      	movs	r3, #4
   14e80:	9303      	str	r3, [sp, #12]
   14e82:	aa07      	add	r2, sp, #28
   14e84:	9202      	str	r2, [sp, #8]
   14e86:	9701      	str	r7, [sp, #4]
   14e88:	6822      	ldr	r2, [r4, #0]
   14e8a:	9200      	str	r2, [sp, #0]
   14e8c:	462a      	mov	r2, r5
   14e8e:	2100      	movs	r1, #0
   14e90:	4628      	mov	r0, r5
   14e92:	f7ff fc84 	bl	1479e <lfs_bd_read>
        if (err && err != LFS_ERR_CORRUPT) {
   14e96:	b118      	cbz	r0, 14ea0 <lfs_dir_commitcrc+0x52>
   14e98:	f110 0f54 	cmn.w	r0, #84	; 0x54
   14e9c:	f040 80aa 	bne.w	14ff4 <lfs_dir_commitcrc+0x1a6>
        bool reset = ~lfs_frombe32(tag) >> 31;
   14ea0:	9b07      	ldr	r3, [sp, #28]
    return __builtin_bswap32(a);
   14ea2:	ba1b      	rev	r3, r3
   14ea4:	ea6f 0803 	mvn.w	r8, r3
   14ea8:	ea4f 78d8 	mov.w	r8, r8, lsr #31
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
   14eac:	f508 63a0 	add.w	r3, r8, #1280	; 0x500
   14eb0:	eba7 0709 	sub.w	r7, r7, r9
   14eb4:	ea47 5703 	orr.w	r7, r7, r3, lsl #20
   14eb8:	f447 277f 	orr.w	r7, r7, #1044480	; 0xff000
   14ebc:	f447 6740 	orr.w	r7, r7, #3072	; 0xc00
   14ec0:	9707      	str	r7, [sp, #28]
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
   14ec2:	68a3      	ldr	r3, [r4, #8]
   14ec4:	405f      	eors	r7, r3
   14ec6:	ba3f      	rev	r7, r7
   14ec8:	9708      	str	r7, [sp, #32]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
   14eca:	af08      	add	r7, sp, #32
   14ecc:	2204      	movs	r2, #4
   14ece:	4639      	mov	r1, r7
   14ed0:	68e0      	ldr	r0, [r4, #12]
   14ed2:	f7fa faf7 	bl	f4c4 <lfs_crc>
   14ed6:	60e0      	str	r0, [r4, #12]
        footer[1] = lfs_tole32(commit->crc);
   14ed8:	9009      	str	r0, [sp, #36]	; 0x24
        err = lfs_bd_prog(lfs,
   14eda:	2308      	movs	r3, #8
   14edc:	9303      	str	r3, [sp, #12]
   14ede:	9702      	str	r7, [sp, #8]
   14ee0:	6863      	ldr	r3, [r4, #4]
   14ee2:	9301      	str	r3, [sp, #4]
   14ee4:	6823      	ldr	r3, [r4, #0]
   14ee6:	9300      	str	r3, [sp, #0]
   14ee8:	2300      	movs	r3, #0
   14eea:	462a      	mov	r2, r5
   14eec:	f105 0110 	add.w	r1, r5, #16
   14ef0:	4628      	mov	r0, r5
   14ef2:	f7ff fecb 	bl	14c8c <lfs_bd_prog>
        if (err) {
   14ef6:	2800      	cmp	r0, #0
   14ef8:	d17e      	bne.n	14ff8 <lfs_dir_commitcrc+0x1aa>
        commit->off += sizeof(tag)+lfs_tag_size(tag);
   14efa:	9b07      	ldr	r3, [sp, #28]
    return tag & 0x000003ff;
   14efc:	f3c3 0209 	ubfx	r2, r3, #0, #10
        commit->off += sizeof(tag)+lfs_tag_size(tag);
   14f00:	1d11      	adds	r1, r2, #4
   14f02:	6862      	ldr	r2, [r4, #4]
   14f04:	440a      	add	r2, r1
   14f06:	6062      	str	r2, [r4, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
   14f08:	ea83 73c8 	eor.w	r3, r3, r8, lsl #31
   14f0c:	60a3      	str	r3, [r4, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
   14f0e:	f04f 33ff 	mov.w	r3, #4294967295
   14f12:	60e3      	str	r3, [r4, #12]
    while (commit->off < end) {
   14f14:	6867      	ldr	r7, [r4, #4]
   14f16:	42b7      	cmp	r7, r6
   14f18:	d212      	bcs.n	14f40 <lfs_dir_commitcrc+0xf2>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
   14f1a:	f107 0904 	add.w	r9, r7, #4
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
   14f1e:	eba6 0709 	sub.w	r7, r6, r9
   14f22:	f240 33fe 	movw	r3, #1022	; 0x3fe
   14f26:	429f      	cmp	r7, r3
   14f28:	bf94      	ite	ls
   14f2a:	444f      	addls	r7, r9
   14f2c:	eb09 0703 	addhi.w	r7, r9, r3
        if (noff < end) {
   14f30:	42b7      	cmp	r7, r6
   14f32:	d2a1      	bcs.n	14e78 <lfs_dir_commitcrc+0x2a>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
   14f34:	f1a6 0308 	sub.w	r3, r6, #8
    return (a < b) ? a : b;
   14f38:	429f      	cmp	r7, r3
   14f3a:	bf28      	it	cs
   14f3c:	461f      	movcs	r7, r3
   14f3e:	e79b      	b.n	14e78 <lfs_dir_commitcrc+0x2a>
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
   14f40:	9505      	str	r5, [sp, #20]
   14f42:	2300      	movs	r3, #0
   14f44:	462a      	mov	r2, r5
   14f46:	f105 0110 	add.w	r1, r5, #16
   14f4a:	4628      	mov	r0, r5
   14f4c:	f7ff ff73 	bl	14e36 <lfs_bd_sync>
    if (err) {
   14f50:	4607      	mov	r7, r0
   14f52:	2800      	cmp	r0, #0
   14f54:	d151      	bne.n	14ffa <lfs_dir_commitcrc+0x1ac>
    lfs_off_t off = commit->begin;
   14f56:	f8d4 8010 	ldr.w	r8, [r4, #16]
    lfs_off_t noff = off1 + sizeof(uint32_t);
   14f5a:	f10b 0a04 	add.w	sl, fp, #4
    while (off < end) {
   14f5e:	f8dd 9010 	ldr.w	r9, [sp, #16]
   14f62:	9604      	str	r6, [sp, #16]
   14f64:	4646      	mov	r6, r8
   14f66:	f8dd 8014 	ldr.w	r8, [sp, #20]
   14f6a:	9005      	str	r0, [sp, #20]
   14f6c:	9b04      	ldr	r3, [sp, #16]
   14f6e:	429e      	cmp	r6, r3
   14f70:	d23b      	bcs.n	14fea <lfs_dir_commitcrc+0x19c>
        uint32_t crc = 0xffffffff;
   14f72:	f04f 37ff 	mov.w	r7, #4294967295
   14f76:	e017      	b.n	14fa8 <lfs_dir_commitcrc+0x15a>
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
   14f78:	ebaa 0306 	sub.w	r3, sl, r6
            err = lfs_bd_read(lfs,
   14f7c:	2201      	movs	r2, #1
   14f7e:	9203      	str	r2, [sp, #12]
   14f80:	aa08      	add	r2, sp, #32
   14f82:	9202      	str	r2, [sp, #8]
   14f84:	9601      	str	r6, [sp, #4]
   14f86:	6822      	ldr	r2, [r4, #0]
   14f88:	9200      	str	r2, [sp, #0]
   14f8a:	3304      	adds	r3, #4
   14f8c:	4642      	mov	r2, r8
   14f8e:	2100      	movs	r1, #0
   14f90:	4628      	mov	r0, r5
   14f92:	f7ff fc04 	bl	1479e <lfs_bd_read>
            if (err) {
   14f96:	4603      	mov	r3, r0
   14f98:	b980      	cbnz	r0, 14fbc <lfs_dir_commitcrc+0x16e>
            crc = lfs_crc(crc, &dat, 1);
   14f9a:	2201      	movs	r2, #1
   14f9c:	a908      	add	r1, sp, #32
   14f9e:	4638      	mov	r0, r7
   14fa0:	f7fa fa90 	bl	f4c4 <lfs_crc>
   14fa4:	4607      	mov	r7, r0
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
   14fa6:	3601      	adds	r6, #1
   14fa8:	f10a 0304 	add.w	r3, sl, #4
   14fac:	42b3      	cmp	r3, r6
   14fae:	d907      	bls.n	14fc0 <lfs_dir_commitcrc+0x172>
            if (i == off1 && crc != crc1) {
   14fb0:	455e      	cmp	r6, fp
   14fb2:	d1e1      	bne.n	14f78 <lfs_dir_commitcrc+0x12a>
   14fb4:	454f      	cmp	r7, r9
   14fb6:	d0df      	beq.n	14f78 <lfs_dir_commitcrc+0x12a>
                return LFS_ERR_CORRUPT;
   14fb8:	f06f 0353 	mvn.w	r3, #83	; 0x53
   14fbc:	461f      	mov	r7, r3
   14fbe:	e01c      	b.n	14ffa <lfs_dir_commitcrc+0x1ac>
        if (crc != 0) {
   14fc0:	b9af      	cbnz	r7, 14fee <lfs_dir_commitcrc+0x1a0>
        off = lfs_min(end - noff, 0x3fe) + noff;
   14fc2:	9a04      	ldr	r2, [sp, #16]
   14fc4:	eba2 060a 	sub.w	r6, r2, sl
   14fc8:	f240 33fe 	movw	r3, #1022	; 0x3fe
   14fcc:	429e      	cmp	r6, r3
   14fce:	bf94      	ite	ls
   14fd0:	4456      	addls	r6, sl
   14fd2:	eb0a 0603 	addhi.w	r6, sl, r3
        if (off < end) {
   14fd6:	4296      	cmp	r6, r2
   14fd8:	d204      	bcs.n	14fe4 <lfs_dir_commitcrc+0x196>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
   14fda:	f1a2 0308 	sub.w	r3, r2, #8
   14fde:	429e      	cmp	r6, r3
   14fe0:	bf28      	it	cs
   14fe2:	461e      	movcs	r6, r3
        noff = off + sizeof(uint32_t);
   14fe4:	f106 0a04 	add.w	sl, r6, #4
   14fe8:	e7c0      	b.n	14f6c <lfs_dir_commitcrc+0x11e>
   14fea:	9f05      	ldr	r7, [sp, #20]
   14fec:	e005      	b.n	14ffa <lfs_dir_commitcrc+0x1ac>
            return LFS_ERR_CORRUPT;
   14fee:	f06f 0753 	mvn.w	r7, #83	; 0x53
   14ff2:	e002      	b.n	14ffa <lfs_dir_commitcrc+0x1ac>
   14ff4:	4607      	mov	r7, r0
   14ff6:	e000      	b.n	14ffa <lfs_dir_commitcrc+0x1ac>
   14ff8:	4607      	mov	r7, r0
}
   14ffa:	4638      	mov	r0, r7
   14ffc:	b00b      	add	sp, #44	; 0x2c
   14ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015002 <lfs_deinit>:
static int lfs_deinit(lfs_t *lfs) {
   15002:	b510      	push	{r4, lr}
   15004:	4604      	mov	r4, r0
    if (!lfs->cfg->read_buffer) {
   15006:	6e83      	ldr	r3, [r0, #104]	; 0x68
   15008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1500a:	b13b      	cbz	r3, 1501c <lfs_deinit+0x1a>
    if (!lfs->cfg->prog_buffer) {
   1500c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   1500e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   15010:	b143      	cbz	r3, 15024 <lfs_deinit+0x22>
    if (!lfs->cfg->lookahead_buffer) {
   15012:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   15014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   15016:	b14b      	cbz	r3, 1502c <lfs_deinit+0x2a>
}
   15018:	2000      	movs	r0, #0
   1501a:	bd10      	pop	{r4, pc}
}

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
#ifndef LFS_NO_MALLOC
    free(p);
   1501c:	68c0      	ldr	r0, [r0, #12]
   1501e:	f7fe f869 	bl	130f4 <free>
#else
    (void)p;
#endif
}
   15022:	e7f3      	b.n	1500c <lfs_deinit+0xa>
    free(p);
   15024:	69e0      	ldr	r0, [r4, #28]
   15026:	f7fe f865 	bl	130f4 <free>
}
   1502a:	e7f2      	b.n	15012 <lfs_deinit+0x10>
    free(p);
   1502c:	6e60      	ldr	r0, [r4, #100]	; 0x64
   1502e:	f7fe f861 	bl	130f4 <free>
}
   15032:	e7f1      	b.n	15018 <lfs_deinit+0x16>

00015034 <lfs_init>:
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
   15034:	b538      	push	{r3, r4, r5, lr}
   15036:	4604      	mov	r4, r0
    lfs->cfg = cfg;
   15038:	6681      	str	r1, [r0, #104]	; 0x68
    if (lfs->cfg->read_buffer) {
   1503a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   1503c:	2b00      	cmp	r3, #0
   1503e:	d03d      	beq.n	150bc <lfs_init+0x88>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
   15040:	60c3      	str	r3, [r0, #12]
    if (lfs->cfg->prog_buffer) {
   15042:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   15044:	6b53      	ldr	r3, [r2, #52]	; 0x34
   15046:	2b00      	cmp	r3, #0
   15048:	d044      	beq.n	150d4 <lfs_init+0xa0>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
   1504a:	61e3      	str	r3, [r4, #28]
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
   1504c:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   1504e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   15050:	21ff      	movs	r1, #255	; 0xff
   15052:	68e0      	ldr	r0, [r4, #12]
   15054:	f7fe f8f0 	bl	13238 <memset>
    pcache->block = LFS_BLOCK_NULL;
   15058:	f04f 35ff 	mov.w	r5, #4294967295
   1505c:	6025      	str	r5, [r4, #0]
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
   1505e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   15060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   15062:	21ff      	movs	r1, #255	; 0xff
   15064:	69e0      	ldr	r0, [r4, #28]
   15066:	f7fe f8e7 	bl	13238 <memset>
    pcache->block = LFS_BLOCK_NULL;
   1506a:	6125      	str	r5, [r4, #16]
    if (lfs->cfg->lookahead_buffer) {
   1506c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   1506e:	6b93      	ldr	r3, [r2, #56]	; 0x38
   15070:	2b00      	cmp	r3, #0
   15072:	d036      	beq.n	150e2 <lfs_init+0xae>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
   15074:	6663      	str	r3, [r4, #100]	; 0x64
    lfs->name_max = lfs->cfg->name_max;
   15076:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   15078:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1507a:	66e2      	str	r2, [r4, #108]	; 0x6c
    if (!lfs->name_max) {
   1507c:	b90a      	cbnz	r2, 15082 <lfs_init+0x4e>
        lfs->name_max = LFS_NAME_MAX;
   1507e:	22ff      	movs	r2, #255	; 0xff
   15080:	66e2      	str	r2, [r4, #108]	; 0x6c
    lfs->file_max = lfs->cfg->file_max;
   15082:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   15084:	6722      	str	r2, [r4, #112]	; 0x70
    if (!lfs->file_max) {
   15086:	b912      	cbnz	r2, 1508e <lfs_init+0x5a>
        lfs->file_max = LFS_FILE_MAX;
   15088:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   1508c:	6722      	str	r2, [r4, #112]	; 0x70
    lfs->attr_max = lfs->cfg->attr_max;
   1508e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   15090:	6763      	str	r3, [r4, #116]	; 0x74
    if (!lfs->attr_max) {
   15092:	b913      	cbnz	r3, 1509a <lfs_init+0x66>
        lfs->attr_max = LFS_ATTR_MAX;
   15094:	f240 33fe 	movw	r3, #1022	; 0x3fe
   15098:	6763      	str	r3, [r4, #116]	; 0x74
    lfs->root[0] = LFS_BLOCK_NULL;
   1509a:	f04f 33ff 	mov.w	r3, #4294967295
   1509e:	6223      	str	r3, [r4, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
   150a0:	6263      	str	r3, [r4, #36]	; 0x24
    lfs->mlist = NULL;
   150a2:	2000      	movs	r0, #0
   150a4:	62a0      	str	r0, [r4, #40]	; 0x28
    lfs->seed = 0;
   150a6:	62e0      	str	r0, [r4, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
   150a8:	63e0      	str	r0, [r4, #60]	; 0x3c
   150aa:	6420      	str	r0, [r4, #64]	; 0x40
   150ac:	6460      	str	r0, [r4, #68]	; 0x44
    lfs->gstate = (lfs_gstate_t){0};
   150ae:	6320      	str	r0, [r4, #48]	; 0x30
   150b0:	6360      	str	r0, [r4, #52]	; 0x34
   150b2:	63a0      	str	r0, [r4, #56]	; 0x38
    lfs->gdelta = (lfs_gstate_t){0};
   150b4:	64a0      	str	r0, [r4, #72]	; 0x48
   150b6:	64e0      	str	r0, [r4, #76]	; 0x4c
   150b8:	6520      	str	r0, [r4, #80]	; 0x50
}
   150ba:	bd38      	pop	{r3, r4, r5, pc}
    return malloc(size);
   150bc:	6a88      	ldr	r0, [r1, #40]	; 0x28
   150be:	f7f1 fa2b 	bl	6518 <malloc>
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
   150c2:	60e0      	str	r0, [r4, #12]
        if (!lfs->rcache.buffer) {
   150c4:	2800      	cmp	r0, #0
   150c6:	d1bc      	bne.n	15042 <lfs_init+0xe>
    lfs_deinit(lfs);
   150c8:	4620      	mov	r0, r4
   150ca:	f7ff ff9a 	bl	15002 <lfs_deinit>
    return err;
   150ce:	f06f 000b 	mvn.w	r0, #11
   150d2:	e7f2      	b.n	150ba <lfs_init+0x86>
   150d4:	6a90      	ldr	r0, [r2, #40]	; 0x28
   150d6:	f7f1 fa1f 	bl	6518 <malloc>
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
   150da:	61e0      	str	r0, [r4, #28]
        if (!lfs->pcache.buffer) {
   150dc:	2800      	cmp	r0, #0
   150de:	d1b5      	bne.n	1504c <lfs_init+0x18>
   150e0:	e7f2      	b.n	150c8 <lfs_init+0x94>
   150e2:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
   150e4:	f7f1 fa18 	bl	6518 <malloc>
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
   150e8:	6660      	str	r0, [r4, #100]	; 0x64
        if (!lfs->free.buffer) {
   150ea:	2800      	cmp	r0, #0
   150ec:	d1c3      	bne.n	15076 <lfs_init+0x42>
   150ee:	e7eb      	b.n	150c8 <lfs_init+0x94>

000150f0 <lfs_ctz_index>:
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
   150f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lfs_off_t size = *off;
   150f2:	680f      	ldr	r7, [r1, #0]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
   150f4:	6e83      	ldr	r3, [r0, #104]	; 0x68
   150f6:	69dc      	ldr	r4, [r3, #28]
   150f8:	3c08      	subs	r4, #8
    lfs_off_t i = size / b;
   150fa:	fbb7 f0f4 	udiv	r0, r7, r4
    if (i == 0) {
   150fe:	42a7      	cmp	r7, r4
   15100:	d312      	bcc.n	15128 <lfs_ctz_index+0x38>
   15102:	460e      	mov	r6, r1
    return __builtin_popcount(a);
   15104:	3801      	subs	r0, #1
   15106:	f7eb ffb3 	bl	1070 <__popcountsi2>
    i = (size - 4*(lfs_popc(i-1)+2)) / b;
   1510a:	1c85      	adds	r5, r0, #2
   1510c:	eba7 0585 	sub.w	r5, r7, r5, lsl #2
   15110:	fbb5 f5f4 	udiv	r5, r5, r4
    *off = size - b*i - 4*lfs_popc(i);
   15114:	fb05 7414 	mls	r4, r5, r4, r7
   15118:	4628      	mov	r0, r5
   1511a:	f7eb ffa9 	bl	1070 <__popcountsi2>
   1511e:	eba4 0480 	sub.w	r4, r4, r0, lsl #2
   15122:	6034      	str	r4, [r6, #0]
    return i;
   15124:	4628      	mov	r0, r5
}
   15126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
   15128:	2000      	movs	r0, #0
   1512a:	e7fc      	b.n	15126 <lfs_ctz_index+0x36>

0001512c <lfs_ctz_traverse>:
        int (*cb)(void*, lfs_block_t), void *data) {
   1512c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15130:	b08b      	sub	sp, #44	; 0x2c
   15132:	9105      	str	r1, [sp, #20]
   15134:	461c      	mov	r4, r3
   15136:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15138:	9e15      	ldr	r6, [sp, #84]	; 0x54
   1513a:	9f16      	ldr	r7, [sp, #88]	; 0x58
    if (size == 0) {
   1513c:	b923      	cbnz	r3, 15148 <lfs_ctz_traverse+0x1c>
        return 0;
   1513e:	2300      	movs	r3, #0
}
   15140:	4618      	mov	r0, r3
   15142:	b00b      	add	sp, #44	; 0x2c
   15144:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15148:	4680      	mov	r8, r0
   1514a:	4692      	mov	sl, r2
    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
   1514c:	3b01      	subs	r3, #1
   1514e:	9309      	str	r3, [sp, #36]	; 0x24
   15150:	a909      	add	r1, sp, #36	; 0x24
   15152:	f7ff ffcd 	bl	150f0 <lfs_ctz_index>
   15156:	4681      	mov	r9, r0
        int err = cb(data, head);
   15158:	4621      	mov	r1, r4
   1515a:	4638      	mov	r0, r7
   1515c:	47b0      	blx	r6
        if (err) {
   1515e:	4603      	mov	r3, r0
   15160:	2800      	cmp	r0, #0
   15162:	d1ed      	bne.n	15140 <lfs_ctz_traverse+0x14>
        if (index == 0) {
   15164:	f1b9 0f00 	cmp.w	r9, #0
   15168:	d0ea      	beq.n	15140 <lfs_ctz_traverse+0x14>
        int count = 2 - (index & 1);
   1516a:	f009 0b01 	and.w	fp, r9, #1
   1516e:	f1cb 0502 	rsb	r5, fp, #2
        err = lfs_bd_read(lfs,
   15172:	00ab      	lsls	r3, r5, #2
   15174:	9303      	str	r3, [sp, #12]
   15176:	aa07      	add	r2, sp, #28
   15178:	9202      	str	r2, [sp, #8]
   1517a:	2200      	movs	r2, #0
   1517c:	9201      	str	r2, [sp, #4]
   1517e:	9400      	str	r4, [sp, #0]
   15180:	4652      	mov	r2, sl
   15182:	9905      	ldr	r1, [sp, #20]
   15184:	4640      	mov	r0, r8
   15186:	f7ff fb0a 	bl	1479e <lfs_bd_read>
        if (err) {
   1518a:	4604      	mov	r4, r0
   1518c:	b110      	cbz	r0, 15194 <lfs_ctz_traverse+0x68>
            return err;
   1518e:	4603      	mov	r3, r0
   15190:	e7d6      	b.n	15140 <lfs_ctz_traverse+0x14>
        for (int i = 0; i < count-1; i++) {
   15192:	3401      	adds	r4, #1
   15194:	1e6b      	subs	r3, r5, #1
   15196:	42a3      	cmp	r3, r4
   15198:	dd0a      	ble.n	151b0 <lfs_ctz_traverse+0x84>
            err = cb(data, heads[i]);
   1519a:	ab0a      	add	r3, sp, #40	; 0x28
   1519c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   151a0:	f853 1c0c 	ldr.w	r1, [r3, #-12]
   151a4:	4638      	mov	r0, r7
   151a6:	47b0      	blx	r6
            if (err) {
   151a8:	4603      	mov	r3, r0
   151aa:	2800      	cmp	r0, #0
   151ac:	d0f1      	beq.n	15192 <lfs_ctz_traverse+0x66>
   151ae:	e7c7      	b.n	15140 <lfs_ctz_traverse+0x14>
        head = heads[count-1];
   151b0:	aa0a      	add	r2, sp, #40	; 0x28
   151b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   151b6:	f853 4c0c 	ldr.w	r4, [r3, #-12]
        index -= count;
   151ba:	f1ab 0b02 	sub.w	fp, fp, #2
   151be:	44d9      	add	r9, fp
    while (true) {
   151c0:	e7ca      	b.n	15158 <lfs_ctz_traverse+0x2c>

000151c2 <lfs_ctz_find>:
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
   151c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   151c6:	b089      	sub	sp, #36	; 0x24
   151c8:	9305      	str	r3, [sp, #20]
   151ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
    if (size == 0) {
   151cc:	b953      	cbnz	r3, 151e4 <lfs_ctz_find+0x22>
        *block = LFS_BLOCK_NULL;
   151ce:	f04f 33ff 	mov.w	r3, #4294967295
   151d2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   151d4:	6013      	str	r3, [r2, #0]
        *off = 0;
   151d6:	2300      	movs	r3, #0
   151d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   151da:	6013      	str	r3, [r2, #0]
}
   151dc:	4618      	mov	r0, r3
   151de:	b009      	add	sp, #36	; 0x24
   151e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   151e4:	4607      	mov	r7, r0
   151e6:	4688      	mov	r8, r1
   151e8:	4691      	mov	r9, r2
    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
   151ea:	3b01      	subs	r3, #1
   151ec:	9307      	str	r3, [sp, #28]
   151ee:	a907      	add	r1, sp, #28
   151f0:	f7ff ff7e 	bl	150f0 <lfs_ctz_index>
   151f4:	4605      	mov	r5, r0
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
   151f6:	a911      	add	r1, sp, #68	; 0x44
   151f8:	4638      	mov	r0, r7
   151fa:	f7ff ff79 	bl	150f0 <lfs_ctz_index>
   151fe:	4606      	mov	r6, r0
    while (current > target) {
   15200:	e003      	b.n	1520a <lfs_ctz_find+0x48>
        current -= 1 << skip;
   15202:	2301      	movs	r3, #1
   15204:	fa03 f404 	lsl.w	r4, r3, r4
   15208:	1b2d      	subs	r5, r5, r4
    while (current > target) {
   1520a:	42b5      	cmp	r5, r6
   1520c:	d91c      	bls.n	15248 <lfs_ctz_find+0x86>
                lfs_npw2(current-target+1) - 1,
   1520e:	1bac      	subs	r4, r5, r6
    return 32 - __builtin_clz(a-1);
   15210:	fab4 f484 	clz	r4, r4
        lfs_size_t skip = lfs_min(
   15214:	f1c4 041f 	rsb	r4, r4, #31
    return __builtin_ctz(a);
   15218:	fa95 f3a5 	rbit	r3, r5
   1521c:	fab3 f383 	clz	r3, r3
    return (a < b) ? a : b;
   15220:	429c      	cmp	r4, r3
   15222:	bf28      	it	cs
   15224:	461c      	movcs	r4, r3
        int err = lfs_bd_read(lfs,
   15226:	2304      	movs	r3, #4
   15228:	9303      	str	r3, [sp, #12]
   1522a:	aa05      	add	r2, sp, #20
   1522c:	9202      	str	r2, [sp, #8]
   1522e:	00a2      	lsls	r2, r4, #2
   15230:	9201      	str	r2, [sp, #4]
   15232:	9a05      	ldr	r2, [sp, #20]
   15234:	9200      	str	r2, [sp, #0]
   15236:	464a      	mov	r2, r9
   15238:	4641      	mov	r1, r8
   1523a:	4638      	mov	r0, r7
   1523c:	f7ff faaf 	bl	1479e <lfs_bd_read>
        if (err) {
   15240:	4603      	mov	r3, r0
   15242:	2800      	cmp	r0, #0
   15244:	d0dd      	beq.n	15202 <lfs_ctz_find+0x40>
   15246:	e7c9      	b.n	151dc <lfs_ctz_find+0x1a>
    *block = head;
   15248:	9b05      	ldr	r3, [sp, #20]
   1524a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   1524c:	6013      	str	r3, [r2, #0]
    *off = pos;
   1524e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   15250:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   15252:	6013      	str	r3, [r2, #0]
    return 0;
   15254:	2300      	movs	r3, #0
   15256:	e7c1      	b.n	151dc <lfs_ctz_find+0x1a>

00015258 <lfs_dir_close>:
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   15258:	3028      	adds	r0, #40	; 0x28
   1525a:	6803      	ldr	r3, [r0, #0]
   1525c:	b12b      	cbz	r3, 1526a <lfs_dir_close+0x12>
        if (*p == (struct lfs_mlist*)dir) {
   1525e:	428b      	cmp	r3, r1
   15260:	d001      	beq.n	15266 <lfs_dir_close+0xe>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   15262:	4618      	mov	r0, r3
   15264:	e7f9      	b.n	1525a <lfs_dir_close+0x2>
            *p = (*p)->next;
   15266:	681b      	ldr	r3, [r3, #0]
   15268:	6003      	str	r3, [r0, #0]
}
   1526a:	2000      	movs	r0, #0
   1526c:	4770      	bx	lr

0001526e <lfs_file_tell>:
}
   1526e:	6b48      	ldr	r0, [r1, #52]	; 0x34
   15270:	4770      	bx	lr

00015272 <lfs_file_size>:
    if (file->flags & LFS_F_WRITING) {
   15272:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   15274:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   15278:	d005      	beq.n	15286 <lfs_file_size+0x14>
        return lfs_max(file->pos, file->ctz.size);
   1527a:	6b48      	ldr	r0, [r1, #52]	; 0x34
   1527c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   1527e:	4298      	cmp	r0, r3
   15280:	bf38      	it	cc
   15282:	4618      	movcc	r0, r3
   15284:	4770      	bx	lr
        return file->ctz.size;
   15286:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
}
   15288:	4770      	bx	lr

0001528a <lfs_stat>:
int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
   1528a:	b530      	push	{r4, r5, lr}
   1528c:	b08b      	sub	sp, #44	; 0x2c
   1528e:	4604      	mov	r4, r0
   15290:	9101      	str	r1, [sp, #4]
   15292:	4615      	mov	r5, r2
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
   15294:	2300      	movs	r3, #0
   15296:	aa01      	add	r2, sp, #4
   15298:	a902      	add	r1, sp, #8
   1529a:	f7f8 f989 	bl	d5b0 <lfs_dir_find>
    if (tag < 0) {
   1529e:	2800      	cmp	r0, #0
   152a0:	db06      	blt.n	152b0 <lfs_stat+0x26>
    int err = lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
   152a2:	462b      	mov	r3, r5
   152a4:	f3c0 2289 	ubfx	r2, r0, #10, #10
   152a8:	a902      	add	r1, sp, #8
   152aa:	4620      	mov	r0, r4
   152ac:	f7f8 fa44 	bl	d738 <lfs_dir_getinfo>
}
   152b0:	b00b      	add	sp, #44	; 0x2c
   152b2:	bd30      	pop	{r4, r5, pc}

000152b4 <lfs_unmount>:
int lfs_unmount(lfs_t *lfs) {
   152b4:	b508      	push	{r3, lr}
    int err = lfs_deinit(lfs);
   152b6:	f7ff fea4 	bl	15002 <lfs_deinit>
}
   152ba:	bd08      	pop	{r3, pc}

000152bc <lfs_dir_alloc>:
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
   152bc:	b570      	push	{r4, r5, r6, lr}
   152be:	b084      	sub	sp, #16
   152c0:	4606      	mov	r6, r0
   152c2:	460c      	mov	r4, r1
    for (int i = 0; i < 2; i++) {
   152c4:	2500      	movs	r5, #0
   152c6:	2d01      	cmp	r5, #1
   152c8:	dc0d      	bgt.n	152e6 <lfs_dir_alloc+0x2a>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
   152ca:	3501      	adds	r5, #1
   152cc:	f005 0101 	and.w	r1, r5, #1
   152d0:	bf48      	it	mi
   152d2:	4249      	negmi	r1, r1
   152d4:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   152d8:	4630      	mov	r0, r6
   152da:	f7f8 fd15 	bl	dd08 <lfs_alloc>
        if (err) {
   152de:	4603      	mov	r3, r0
   152e0:	2800      	cmp	r0, #0
   152e2:	d0f0      	beq.n	152c6 <lfs_dir_alloc+0xa>
   152e4:	e022      	b.n	1532c <lfs_dir_alloc+0x70>
    dir->rev = 0;
   152e6:	2100      	movs	r1, #0
   152e8:	4622      	mov	r2, r4
   152ea:	f842 1f08 	str.w	r1, [r2, #8]!
    int err = lfs_bd_read(lfs,
   152ee:	2304      	movs	r3, #4
   152f0:	9303      	str	r3, [sp, #12]
   152f2:	9202      	str	r2, [sp, #8]
   152f4:	9101      	str	r1, [sp, #4]
   152f6:	6822      	ldr	r2, [r4, #0]
   152f8:	9200      	str	r2, [sp, #0]
   152fa:	4632      	mov	r2, r6
   152fc:	4630      	mov	r0, r6
   152fe:	f7ff fa4e 	bl	1479e <lfs_bd_read>
    dir->rev = lfs_fromle32(dir->rev);
   15302:	68a2      	ldr	r2, [r4, #8]
    if (err && err != LFS_ERR_CORRUPT) {
   15304:	4603      	mov	r3, r0
   15306:	b110      	cbz	r0, 1530e <lfs_dir_alloc+0x52>
   15308:	f110 0f54 	cmn.w	r0, #84	; 0x54
   1530c:	d10e      	bne.n	1532c <lfs_dir_alloc+0x70>
    dir->rev += dir->rev & 1;
   1530e:	3201      	adds	r2, #1
   15310:	f022 0201 	bic.w	r2, r2, #1
   15314:	60a2      	str	r2, [r4, #8]
    dir->off = sizeof(dir->rev);
   15316:	2304      	movs	r3, #4
   15318:	60e3      	str	r3, [r4, #12]
    dir->etag = 0xffffffff;
   1531a:	f04f 32ff 	mov.w	r2, #4294967295
   1531e:	6122      	str	r2, [r4, #16]
    dir->count = 0;
   15320:	2300      	movs	r3, #0
   15322:	82a3      	strh	r3, [r4, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
   15324:	61a2      	str	r2, [r4, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
   15326:	61e2      	str	r2, [r4, #28]
    dir->erased = false;
   15328:	75a3      	strb	r3, [r4, #22]
    dir->split = false;
   1532a:	75e3      	strb	r3, [r4, #23]
}
   1532c:	4618      	mov	r0, r3
   1532e:	b004      	add	sp, #16
   15330:	bd70      	pop	{r4, r5, r6, pc}

00015332 <lfs_file_outline>:
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
   15332:	b538      	push	{r3, r4, r5, lr}
   15334:	4605      	mov	r5, r0
   15336:	460c      	mov	r4, r1
    file->off = file->pos;
   15338:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   1533a:	63cb      	str	r3, [r1, #60]	; 0x3c
    lfs_alloc_ack(lfs);
   1533c:	f7ff f9fc 	bl	14738 <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
   15340:	4621      	mov	r1, r4
   15342:	4628      	mov	r0, r5
   15344:	f7f8 fd62 	bl	de0c <lfs_file_relocate>
    if (err) {
   15348:	b918      	cbnz	r0, 15352 <lfs_file_outline+0x20>
    file->flags &= ~LFS_F_INLINE;
   1534a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1534c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   15350:	6323      	str	r3, [r4, #48]	; 0x30
}
   15352:	bd38      	pop	{r3, r4, r5, pc}

00015354 <lfs_ctz_extend>:
        lfs_block_t *block, lfs_off_t *off) {
   15354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15358:	b08b      	sub	sp, #44	; 0x2c
   1535a:	4604      	mov	r4, r0
   1535c:	460f      	mov	r7, r1
   1535e:	4615      	mov	r5, r2
   15360:	4699      	mov	r9, r3
   15362:	e043      	b.n	153ec <lfs_ctz_extend+0x98>
            if (size == 0) {
   15364:	9b14      	ldr	r3, [sp, #80]	; 0x50
   15366:	b18b      	cbz	r3, 1538c <lfs_ctz_extend+0x38>
            lfs_size_t noff = size - 1;
   15368:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1536a:	3b01      	subs	r3, #1
   1536c:	9308      	str	r3, [sp, #32]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
   1536e:	a908      	add	r1, sp, #32
   15370:	4620      	mov	r0, r4
   15372:	f7ff febd 	bl	150f0 <lfs_ctz_index>
            noff = noff + 1;
   15376:	9b08      	ldr	r3, [sp, #32]
   15378:	3301      	adds	r3, #1
   1537a:	9308      	str	r3, [sp, #32]
            if (noff != lfs->cfg->block_size) {
   1537c:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   1537e:	69d2      	ldr	r2, [r2, #28]
   15380:	4293      	cmp	r3, r2
   15382:	d050      	beq.n	15426 <lfs_ctz_extend+0xd2>
                for (lfs_off_t i = 0; i < noff; i++) {
   15384:	2600      	movs	r6, #0
   15386:	46b8      	mov	r8, r7
   15388:	464f      	mov	r7, r9
   1538a:	e007      	b.n	1539c <lfs_ctz_extend+0x48>
                *block = nblock;
   1538c:	9b07      	ldr	r3, [sp, #28]
   1538e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   15390:	6013      	str	r3, [r2, #0]
                *off = 0;
   15392:	2300      	movs	r3, #0
   15394:	9a16      	ldr	r2, [sp, #88]	; 0x58
   15396:	6013      	str	r3, [r2, #0]
                return 0;
   15398:	e041      	b.n	1541e <lfs_ctz_extend+0xca>
                for (lfs_off_t i = 0; i < noff; i++) {
   1539a:	3601      	adds	r6, #1
   1539c:	9b08      	ldr	r3, [sp, #32]
   1539e:	42b3      	cmp	r3, r6
   153a0:	d937      	bls.n	15412 <lfs_ctz_extend+0xbe>
                    err = lfs_bd_read(lfs,
   153a2:	2201      	movs	r2, #1
   153a4:	9203      	str	r2, [sp, #12]
   153a6:	aa09      	add	r2, sp, #36	; 0x24
   153a8:	9202      	str	r2, [sp, #8]
   153aa:	9601      	str	r6, [sp, #4]
   153ac:	9700      	str	r7, [sp, #0]
   153ae:	1b9b      	subs	r3, r3, r6
   153b0:	462a      	mov	r2, r5
   153b2:	2100      	movs	r1, #0
   153b4:	4620      	mov	r0, r4
   153b6:	f7ff f9f2 	bl	1479e <lfs_bd_read>
                    if (err) {
   153ba:	4603      	mov	r3, r0
   153bc:	bb38      	cbnz	r0, 1540e <lfs_ctz_extend+0xba>
                    err = lfs_bd_prog(lfs,
   153be:	2301      	movs	r3, #1
   153c0:	9303      	str	r3, [sp, #12]
   153c2:	aa09      	add	r2, sp, #36	; 0x24
   153c4:	9202      	str	r2, [sp, #8]
   153c6:	9601      	str	r6, [sp, #4]
   153c8:	9a07      	ldr	r2, [sp, #28]
   153ca:	9200      	str	r2, [sp, #0]
   153cc:	462a      	mov	r2, r5
   153ce:	4641      	mov	r1, r8
   153d0:	4620      	mov	r0, r4
   153d2:	f7ff fc5b 	bl	14c8c <lfs_bd_prog>
                    if (err) {
   153d6:	4603      	mov	r3, r0
   153d8:	2800      	cmp	r0, #0
   153da:	d0de      	beq.n	1539a <lfs_ctz_extend+0x46>
   153dc:	46b9      	mov	r9, r7
   153de:	4647      	mov	r7, r8
                        if (err == LFS_ERR_CORRUPT) {
   153e0:	f110 0f54 	cmn.w	r0, #84	; 0x54
   153e4:	d113      	bne.n	1540e <lfs_ctz_extend+0xba>
    rcache->block = LFS_BLOCK_NULL;
   153e6:	f04f 33ff 	mov.w	r3, #4294967295
   153ea:	603b      	str	r3, [r7, #0]
        int err = lfs_alloc(lfs, &nblock);
   153ec:	a907      	add	r1, sp, #28
   153ee:	4620      	mov	r0, r4
   153f0:	f7f8 fc8a 	bl	dd08 <lfs_alloc>
        if (err) {
   153f4:	9005      	str	r0, [sp, #20]
   153f6:	b990      	cbnz	r0, 1541e <lfs_ctz_extend+0xca>
            err = lfs_bd_erase(lfs, nblock);
   153f8:	9907      	ldr	r1, [sp, #28]
   153fa:	4620      	mov	r0, r4
   153fc:	f7ff f97d 	bl	146fa <lfs_bd_erase>
            if (err) {
   15400:	9005      	str	r0, [sp, #20]
   15402:	2800      	cmp	r0, #0
   15404:	d0ae      	beq.n	15364 <lfs_ctz_extend+0x10>
                if (err == LFS_ERR_CORRUPT) {
   15406:	f110 0f54 	cmn.w	r0, #84	; 0x54
   1540a:	d0ec      	beq.n	153e6 <lfs_ctz_extend+0x92>
   1540c:	e007      	b.n	1541e <lfs_ctz_extend+0xca>
                        return err;
   1540e:	9305      	str	r3, [sp, #20]
   15410:	e005      	b.n	1541e <lfs_ctz_extend+0xca>
                *block = nblock;
   15412:	9b07      	ldr	r3, [sp, #28]
   15414:	9a15      	ldr	r2, [sp, #84]	; 0x54
   15416:	6013      	str	r3, [r2, #0]
                *off = noff;
   15418:	9b08      	ldr	r3, [sp, #32]
   1541a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1541c:	6013      	str	r3, [r2, #0]
}
   1541e:	9805      	ldr	r0, [sp, #20]
   15420:	b00b      	add	sp, #44	; 0x2c
   15422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            index += 1;
   15426:	3001      	adds	r0, #1
    return __builtin_ctz(a);
   15428:	fa90 faa0 	rbit	sl, r0
   1542c:	faba fa8a 	clz	sl, sl
            lfs_size_t skips = lfs_ctz(index) + 1;
   15430:	f10a 0b01 	add.w	fp, sl, #1
            lfs_block_t nhead = head;
   15434:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
            for (lfs_off_t i = 0; i < skips; i++) {
   15438:	2600      	movs	r6, #0
   1543a:	46a0      	mov	r8, r4
   1543c:	e006      	b.n	1544c <lfs_ctz_extend+0xf8>
   1543e:	4644      	mov	r4, r8
                    if (err == LFS_ERR_CORRUPT) {
   15440:	f110 0f54 	cmn.w	r0, #84	; 0x54
   15444:	d0cf      	beq.n	153e6 <lfs_ctz_extend+0x92>
                    return err;
   15446:	9005      	str	r0, [sp, #20]
   15448:	e7e9      	b.n	1541e <lfs_ctz_extend+0xca>
            for (lfs_off_t i = 0; i < skips; i++) {
   1544a:	3601      	adds	r6, #1
   1544c:	45b3      	cmp	fp, r6
   1544e:	d921      	bls.n	15494 <lfs_ctz_extend+0x140>
                err = lfs_bd_prog(lfs, pcache, rcache, true,
   15450:	00b4      	lsls	r4, r6, #2
   15452:	2304      	movs	r3, #4
   15454:	9303      	str	r3, [sp, #12]
   15456:	ab09      	add	r3, sp, #36	; 0x24
   15458:	9302      	str	r3, [sp, #8]
   1545a:	9401      	str	r4, [sp, #4]
   1545c:	9b07      	ldr	r3, [sp, #28]
   1545e:	9300      	str	r3, [sp, #0]
   15460:	2301      	movs	r3, #1
   15462:	462a      	mov	r2, r5
   15464:	4639      	mov	r1, r7
   15466:	4640      	mov	r0, r8
   15468:	f7ff fc10 	bl	14c8c <lfs_bd_prog>
                nhead = lfs_fromle32(nhead);
   1546c:	9a09      	ldr	r2, [sp, #36]	; 0x24
                if (err) {
   1546e:	2800      	cmp	r0, #0
   15470:	d1e5      	bne.n	1543e <lfs_ctz_extend+0xea>
                if (i != skips-1) {
   15472:	45b2      	cmp	sl, r6
   15474:	d0e9      	beq.n	1544a <lfs_ctz_extend+0xf6>
                    err = lfs_bd_read(lfs,
   15476:	2304      	movs	r3, #4
   15478:	9303      	str	r3, [sp, #12]
   1547a:	a909      	add	r1, sp, #36	; 0x24
   1547c:	9102      	str	r1, [sp, #8]
   1547e:	9401      	str	r4, [sp, #4]
   15480:	9200      	str	r2, [sp, #0]
   15482:	462a      	mov	r2, r5
   15484:	2100      	movs	r1, #0
   15486:	4640      	mov	r0, r8
   15488:	f7ff f989 	bl	1479e <lfs_bd_read>
                    if (err) {
   1548c:	2800      	cmp	r0, #0
   1548e:	d0dc      	beq.n	1544a <lfs_ctz_extend+0xf6>
                        return err;
   15490:	9005      	str	r0, [sp, #20]
   15492:	e7c4      	b.n	1541e <lfs_ctz_extend+0xca>
            *block = nblock;
   15494:	9b07      	ldr	r3, [sp, #28]
   15496:	9a15      	ldr	r2, [sp, #84]	; 0x54
   15498:	6013      	str	r3, [r2, #0]
            *off = 4*skips;
   1549a:	ea4f 038b 	mov.w	r3, fp, lsl #2
   1549e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   154a0:	6013      	str	r3, [r2, #0]
            return 0;
   154a2:	e7bc      	b.n	1541e <lfs_ctz_extend+0xca>

000154a4 <lfs_file_write>:
        const void *buffer, lfs_size_t size) {
   154a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   154a8:	b087      	sub	sp, #28
   154aa:	4605      	mov	r5, r0
   154ac:	460c      	mov	r4, r1
   154ae:	4617      	mov	r7, r2
   154b0:	4698      	mov	r8, r3
    if (file->flags & LFS_F_READING) {
   154b2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   154b4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   154b8:	d126      	bne.n	15508 <lfs_file_write+0x64>
    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
   154ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
   154bc:	f413 6f00 	tst.w	r3, #2048	; 0x800
   154c0:	d004      	beq.n	154cc <lfs_file_write+0x28>
   154c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   154c4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   154c6:	4291      	cmp	r1, r2
   154c8:	d200      	bcs.n	154cc <lfs_file_write+0x28>
        file->pos = file->ctz.size;
   154ca:	6362      	str	r2, [r4, #52]	; 0x34
    if (file->pos + size > lfs->file_max) {
   154cc:	6b66      	ldr	r6, [r4, #52]	; 0x34
   154ce:	eb06 0108 	add.w	r1, r6, r8
   154d2:	6f2a      	ldr	r2, [r5, #112]	; 0x70
   154d4:	4291      	cmp	r1, r2
   154d6:	f200 80db 	bhi.w	15690 <lfs_file_write+0x1ec>
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
   154da:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   154de:	d119      	bne.n	15514 <lfs_file_write+0x70>
   154e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   154e2:	429e      	cmp	r6, r3
   154e4:	d916      	bls.n	15514 <lfs_file_write+0x70>
        file->pos = file->ctz.size;
   154e6:	6363      	str	r3, [r4, #52]	; 0x34
        while (file->pos < pos) {
   154e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
   154ea:	429e      	cmp	r6, r3
   154ec:	d912      	bls.n	15514 <lfs_file_write+0x70>
            lfs_ssize_t res = lfs_file_write(lfs, file, &(uint8_t){0}, 1);
   154ee:	2300      	movs	r3, #0
   154f0:	f88d 3017 	strb.w	r3, [sp, #23]
   154f4:	2301      	movs	r3, #1
   154f6:	f10d 0217 	add.w	r2, sp, #23
   154fa:	4621      	mov	r1, r4
   154fc:	4628      	mov	r0, r5
   154fe:	f7ff ffd1 	bl	154a4 <lfs_file_write>
            if (res < 0) {
   15502:	1e01      	subs	r1, r0, #0
   15504:	daf0      	bge.n	154e8 <lfs_file_write+0x44>
   15506:	e0ac      	b.n	15662 <lfs_file_write+0x1be>
        int err = lfs_file_flush(lfs, file);
   15508:	f7f8 fd06 	bl	df18 <lfs_file_flush>
        if (err) {
   1550c:	4601      	mov	r1, r0
   1550e:	2800      	cmp	r0, #0
   15510:	d0d3      	beq.n	154ba <lfs_file_write+0x16>
   15512:	e0a6      	b.n	15662 <lfs_file_write+0x1be>
    if ((file->flags & LFS_F_INLINE) &&
   15514:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15516:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1551a:	d014      	beq.n	15546 <lfs_file_write+0xa2>
            lfs_max(file->pos+nsize, file->ctz.size) >
   1551c:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1551e:	eb03 0208 	add.w	r2, r3, r8
   15522:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (a > b) ? a : b;
   15524:	429a      	cmp	r2, r3
   15526:	bf38      	it	cc
   15528:	461a      	movcc	r2, r3
                lfs->cfg->cache_size, lfs->cfg->block_size/8))) {
   1552a:	6ea9      	ldr	r1, [r5, #104]	; 0x68
            lfs_min(0x3fe, lfs_min(
   1552c:	6a8b      	ldr	r3, [r1, #40]	; 0x28
                lfs->cfg->cache_size, lfs->cfg->block_size/8))) {
   1552e:	69c9      	ldr	r1, [r1, #28]
            lfs_min(0x3fe, lfs_min(
   15530:	08c9      	lsrs	r1, r1, #3
    return (a < b) ? a : b;
   15532:	428b      	cmp	r3, r1
   15534:	bf28      	it	cs
   15536:	460b      	movcs	r3, r1
   15538:	f240 31fe 	movw	r1, #1022	; 0x3fe
   1553c:	428b      	cmp	r3, r1
   1553e:	bf28      	it	cs
   15540:	460b      	movcs	r3, r1
    if ((file->flags & LFS_F_INLINE) &&
   15542:	429a      	cmp	r2, r3
   15544:	d82d      	bhi.n	155a2 <lfs_file_write+0xfe>
        const void *buffer, lfs_size_t size) {
   15546:	46c1      	mov	r9, r8
    while (nsize > 0) {
   15548:	f1b9 0f00 	cmp.w	r9, #0
   1554c:	f000 809a 	beq.w	15684 <lfs_file_write+0x1e0>
        if (!(file->flags & LFS_F_WRITING) ||
   15550:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15552:	f413 3200 	ands.w	r2, r3, #131072	; 0x20000
   15556:	d004      	beq.n	15562 <lfs_file_write+0xbe>
                file->off == lfs->cfg->block_size) {
   15558:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   1555a:	6ea9      	ldr	r1, [r5, #104]	; 0x68
   1555c:	69c9      	ldr	r1, [r1, #28]
        if (!(file->flags & LFS_F_WRITING) ||
   1555e:	4288      	cmp	r0, r1
   15560:	d156      	bne.n	15610 <lfs_file_write+0x16c>
            if (!(file->flags & LFS_F_INLINE)) {
   15562:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   15566:	d14a      	bne.n	155fe <lfs_file_write+0x15a>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
   15568:	b90a      	cbnz	r2, 1556e <lfs_file_write+0xca>
   1556a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1556c:	bb2b      	cbnz	r3, 155ba <lfs_file_write+0x116>
                lfs_alloc_ack(lfs);
   1556e:	4628      	mov	r0, r5
   15570:	f7ff f8e2 	bl	14738 <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
   15574:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   15578:	9302      	str	r3, [sp, #8]
   1557a:	f104 0338 	add.w	r3, r4, #56	; 0x38
   1557e:	9301      	str	r3, [sp, #4]
   15580:	6b63      	ldr	r3, [r4, #52]	; 0x34
   15582:	9300      	str	r3, [sp, #0]
   15584:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   15586:	462a      	mov	r2, r5
   15588:	f104 0140 	add.w	r1, r4, #64	; 0x40
   1558c:	4628      	mov	r0, r5
   1558e:	f7ff fee1 	bl	15354 <lfs_ctz_extend>
                if (err) {
   15592:	4601      	mov	r1, r0
   15594:	2800      	cmp	r0, #0
   15596:	d037      	beq.n	15608 <lfs_file_write+0x164>
                    file->flags |= LFS_F_ERRED;
   15598:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1559a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   1559e:	6323      	str	r3, [r4, #48]	; 0x30
                    return err;
   155a0:	e05f      	b.n	15662 <lfs_file_write+0x1be>
        int err = lfs_file_outline(lfs, file);
   155a2:	4621      	mov	r1, r4
   155a4:	4628      	mov	r0, r5
   155a6:	f7ff fec4 	bl	15332 <lfs_file_outline>
        if (err) {
   155aa:	4601      	mov	r1, r0
   155ac:	2800      	cmp	r0, #0
   155ae:	d0ca      	beq.n	15546 <lfs_file_write+0xa2>
            file->flags |= LFS_F_ERRED;
   155b0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   155b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   155b6:	6323      	str	r3, [r4, #48]	; 0x30
            return err;
   155b8:	e053      	b.n	15662 <lfs_file_write+0x1be>
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
   155ba:	f104 023c 	add.w	r2, r4, #60	; 0x3c
   155be:	9203      	str	r2, [sp, #12]
   155c0:	f104 0238 	add.w	r2, r4, #56	; 0x38
   155c4:	9202      	str	r2, [sp, #8]
   155c6:	3b01      	subs	r3, #1
   155c8:	9301      	str	r3, [sp, #4]
   155ca:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   155cc:	9300      	str	r3, [sp, #0]
   155ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   155d0:	f104 0240 	add.w	r2, r4, #64	; 0x40
   155d4:	2100      	movs	r1, #0
   155d6:	4628      	mov	r0, r5
   155d8:	f7ff fdf3 	bl	151c2 <lfs_ctz_find>
                    if (err) {
   155dc:	4601      	mov	r1, r0
   155de:	b948      	cbnz	r0, 155f4 <lfs_file_write+0x150>
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
   155e0:	6eab      	ldr	r3, [r5, #104]	; 0x68
   155e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   155e4:	21ff      	movs	r1, #255	; 0xff
   155e6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   155e8:	f7fd fe26 	bl	13238 <memset>
    pcache->block = LFS_BLOCK_NULL;
   155ec:	f04f 33ff 	mov.w	r3, #4294967295
   155f0:	6423      	str	r3, [r4, #64]	; 0x40
}
   155f2:	e7bc      	b.n	1556e <lfs_file_write+0xca>
                        file->flags |= LFS_F_ERRED;
   155f4:	6b23      	ldr	r3, [r4, #48]	; 0x30
   155f6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   155fa:	6323      	str	r3, [r4, #48]	; 0x30
                        return err;
   155fc:	e031      	b.n	15662 <lfs_file_write+0x1be>
                file->block = LFS_BLOCK_INLINE;
   155fe:	f06f 0301 	mvn.w	r3, #1
   15602:	63a3      	str	r3, [r4, #56]	; 0x38
                file->off = file->pos;
   15604:	6b63      	ldr	r3, [r4, #52]	; 0x34
   15606:	63e3      	str	r3, [r4, #60]	; 0x3c
            file->flags |= LFS_F_WRITING;
   15608:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1560a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   1560e:	6323      	str	r3, [r4, #48]	; 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
   15610:	6eab      	ldr	r3, [r5, #104]	; 0x68
   15612:	69de      	ldr	r6, [r3, #28]
   15614:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   15616:	1af6      	subs	r6, r6, r3
   15618:	454e      	cmp	r6, r9
   1561a:	bf28      	it	cs
   1561c:	464e      	movcs	r6, r9
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
   1561e:	9603      	str	r6, [sp, #12]
   15620:	9702      	str	r7, [sp, #8]
   15622:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   15624:	9301      	str	r3, [sp, #4]
   15626:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   15628:	9300      	str	r3, [sp, #0]
   1562a:	2301      	movs	r3, #1
   1562c:	462a      	mov	r2, r5
   1562e:	f104 0140 	add.w	r1, r4, #64	; 0x40
   15632:	4628      	mov	r0, r5
   15634:	f7ff fb2a 	bl	14c8c <lfs_bd_prog>
            if (err) {
   15638:	4601      	mov	r1, r0
   1563a:	b1b0      	cbz	r0, 1566a <lfs_file_write+0x1c6>
                if (err == LFS_ERR_CORRUPT) {
   1563c:	f110 0f54 	cmn.w	r0, #84	; 0x54
   15640:	d10b      	bne.n	1565a <lfs_file_write+0x1b6>
            err = lfs_file_relocate(lfs, file);
   15642:	4621      	mov	r1, r4
   15644:	4628      	mov	r0, r5
   15646:	f7f8 fbe1 	bl	de0c <lfs_file_relocate>
            if (err) {
   1564a:	4601      	mov	r1, r0
   1564c:	2800      	cmp	r0, #0
   1564e:	d0e6      	beq.n	1561e <lfs_file_write+0x17a>
                file->flags |= LFS_F_ERRED;
   15650:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15652:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   15656:	6323      	str	r3, [r4, #48]	; 0x30
                return err;
   15658:	e003      	b.n	15662 <lfs_file_write+0x1be>
                file->flags |= LFS_F_ERRED;
   1565a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1565c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   15660:	6323      	str	r3, [r4, #48]	; 0x30
}
   15662:	4608      	mov	r0, r1
   15664:	b007      	add	sp, #28
   15666:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        file->pos += diff;
   1566a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1566c:	4433      	add	r3, r6
   1566e:	6363      	str	r3, [r4, #52]	; 0x34
        file->off += diff;
   15670:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   15672:	4433      	add	r3, r6
   15674:	63e3      	str	r3, [r4, #60]	; 0x3c
        data += diff;
   15676:	4437      	add	r7, r6
        nsize -= diff;
   15678:	eba9 0906 	sub.w	r9, r9, r6
        lfs_alloc_ack(lfs);
   1567c:	4628      	mov	r0, r5
   1567e:	f7ff f85b 	bl	14738 <lfs_alloc_ack>
   15682:	e761      	b.n	15548 <lfs_file_write+0xa4>
    file->flags &= ~LFS_F_ERRED;
   15684:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15686:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
   1568a:	6323      	str	r3, [r4, #48]	; 0x30
    return size;
   1568c:	4641      	mov	r1, r8
   1568e:	e7e8      	b.n	15662 <lfs_file_write+0x1be>
        return LFS_ERR_FBIG;
   15690:	f06f 011a 	mvn.w	r1, #26
   15694:	e7e5      	b.n	15662 <lfs_file_write+0x1be>

00015696 <lfs_file_seek>:
        lfs_soff_t off, int whence) {
   15696:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15698:	4606      	mov	r6, r0
   1569a:	460c      	mov	r4, r1
   1569c:	4617      	mov	r7, r2
   1569e:	461d      	mov	r5, r3
    int err = lfs_file_flush(lfs, file);
   156a0:	f7f8 fc3a 	bl	df18 <lfs_file_flush>
    if (err) {
   156a4:	b930      	cbnz	r0, 156b4 <lfs_file_seek+0x1e>
    lfs_off_t npos = file->pos;
   156a6:	6b60      	ldr	r0, [r4, #52]	; 0x34
    if (whence == LFS_SEEK_SET) {
   156a8:	b92d      	cbnz	r5, 156b6 <lfs_file_seek+0x20>
        npos = off;
   156aa:	4638      	mov	r0, r7
    if (npos > lfs->file_max) {
   156ac:	6f33      	ldr	r3, [r6, #112]	; 0x70
   156ae:	4283      	cmp	r3, r0
   156b0:	d30a      	bcc.n	156c8 <lfs_file_seek+0x32>
    file->pos = npos;
   156b2:	6360      	str	r0, [r4, #52]	; 0x34
}
   156b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (whence == LFS_SEEK_CUR) {
   156b6:	2d01      	cmp	r5, #1
   156b8:	d004      	beq.n	156c4 <lfs_file_seek+0x2e>
    } else if (whence == LFS_SEEK_END) {
   156ba:	2d02      	cmp	r5, #2
   156bc:	d1f6      	bne.n	156ac <lfs_file_seek+0x16>
        npos = file->ctz.size + off;
   156be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   156c0:	19d8      	adds	r0, r3, r7
   156c2:	e7f3      	b.n	156ac <lfs_file_seek+0x16>
        npos = file->pos + off;
   156c4:	4438      	add	r0, r7
   156c6:	e7f1      	b.n	156ac <lfs_file_seek+0x16>
        return LFS_ERR_INVAL;
   156c8:	f06f 0015 	mvn.w	r0, #21
   156cc:	e7f2      	b.n	156b4 <lfs_file_seek+0x1e>

000156ce <lfs_file_truncate>:
int lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {
   156ce:	b5f0      	push	{r4, r5, r6, r7, lr}
   156d0:	b087      	sub	sp, #28
    if (size > LFS_FILE_MAX) {
   156d2:	1e15      	subs	r5, r2, #0
   156d4:	db4b      	blt.n	1576e <lfs_file_truncate+0xa0>
   156d6:	4606      	mov	r6, r0
   156d8:	460c      	mov	r4, r1
    lfs_off_t pos = file->pos;
   156da:	6b4f      	ldr	r7, [r1, #52]	; 0x34
    lfs_off_t oldsize = lfs_file_size(lfs, file);
   156dc:	f7ff fdc9 	bl	15272 <lfs_file_size>
    if (size < oldsize) {
   156e0:	4285      	cmp	r5, r0
   156e2:	d313      	bcc.n	1570c <lfs_file_truncate+0x3e>
    } else if (size > oldsize) {
   156e4:	4285      	cmp	r5, r0
   156e6:	d92e      	bls.n	15746 <lfs_file_truncate+0x78>
        if (file->pos != oldsize) {
   156e8:	4287      	cmp	r7, r0
   156ea:	d137      	bne.n	1575c <lfs_file_truncate+0x8e>
        while (file->pos < size) {
   156ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
   156ee:	42ab      	cmp	r3, r5
   156f0:	d229      	bcs.n	15746 <lfs_file_truncate+0x78>
            lfs_ssize_t res = lfs_file_write(lfs, file, &(uint8_t){0}, 1);
   156f2:	2300      	movs	r3, #0
   156f4:	f88d 3017 	strb.w	r3, [sp, #23]
   156f8:	2301      	movs	r3, #1
   156fa:	f10d 0217 	add.w	r2, sp, #23
   156fe:	4621      	mov	r1, r4
   15700:	4630      	mov	r0, r6
   15702:	f7ff fecf 	bl	154a4 <lfs_file_write>
            if (res < 0) {
   15706:	2800      	cmp	r0, #0
   15708:	daf0      	bge.n	156ec <lfs_file_truncate+0x1e>
   1570a:	e025      	b.n	15758 <lfs_file_truncate+0x8a>
        int err = lfs_file_flush(lfs, file);
   1570c:	4621      	mov	r1, r4
   1570e:	4630      	mov	r0, r6
   15710:	f7f8 fc02 	bl	df18 <lfs_file_flush>
        if (err) {
   15714:	bb00      	cbnz	r0, 15758 <lfs_file_truncate+0x8a>
        err = lfs_ctz_find(lfs, NULL, &file->cache,
   15716:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   1571a:	9303      	str	r3, [sp, #12]
   1571c:	f104 0338 	add.w	r3, r4, #56	; 0x38
   15720:	9302      	str	r3, [sp, #8]
   15722:	9501      	str	r5, [sp, #4]
   15724:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   15726:	9300      	str	r3, [sp, #0]
   15728:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1572a:	f104 0240 	add.w	r2, r4, #64	; 0x40
   1572e:	2100      	movs	r1, #0
   15730:	4630      	mov	r0, r6
   15732:	f7ff fd46 	bl	151c2 <lfs_ctz_find>
        if (err) {
   15736:	b978      	cbnz	r0, 15758 <lfs_file_truncate+0x8a>
        file->ctz.head = file->block;
   15738:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1573a:	62a3      	str	r3, [r4, #40]	; 0x28
        file->ctz.size = size;
   1573c:	62e5      	str	r5, [r4, #44]	; 0x2c
        file->flags |= LFS_F_DIRTY | LFS_F_READING;
   1573e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15740:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
   15744:	6323      	str	r3, [r4, #48]	; 0x30
    lfs_soff_t res = lfs_file_seek(lfs, file, pos, LFS_SEEK_SET);
   15746:	2300      	movs	r3, #0
   15748:	463a      	mov	r2, r7
   1574a:	4621      	mov	r1, r4
   1574c:	4630      	mov	r0, r6
   1574e:	f7ff ffa2 	bl	15696 <lfs_file_seek>
    if (res < 0) {
   15752:	2800      	cmp	r0, #0
   15754:	db00      	blt.n	15758 <lfs_file_truncate+0x8a>
    return 0;
   15756:	2000      	movs	r0, #0
}
   15758:	b007      	add	sp, #28
   1575a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            lfs_soff_t res = lfs_file_seek(lfs, file, 0, LFS_SEEK_END);
   1575c:	2302      	movs	r3, #2
   1575e:	2200      	movs	r2, #0
   15760:	4621      	mov	r1, r4
   15762:	4630      	mov	r0, r6
   15764:	f7ff ff97 	bl	15696 <lfs_file_seek>
            if (res < 0) {
   15768:	2800      	cmp	r0, #0
   1576a:	dabf      	bge.n	156ec <lfs_file_truncate+0x1e>
   1576c:	e7f4      	b.n	15758 <lfs_file_truncate+0x8a>
        return LFS_ERR_INVAL;
   1576e:	f06f 0015 	mvn.w	r0, #21
   15772:	e7f1      	b.n	15758 <lfs_file_truncate+0x8a>

00015774 <lfs_fs_demove>:
    return lfs_tag_type1(a->tag);
   15774:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    return (tag & 0x70000000) >> 20;
   15776:	0d1b      	lsrs	r3, r3, #20
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
   15778:	f413 6fe0 	tst.w	r3, #1792	; 0x700
   1577c:	d101      	bne.n	15782 <lfs_fs_demove+0xe>
        return 0;
   1577e:	2000      	movs	r0, #0
}
   15780:	4770      	bx	lr
static int lfs_fs_demove(lfs_t *lfs) {
   15782:	b530      	push	{r4, r5, lr}
   15784:	b08b      	sub	sp, #44	; 0x2c
   15786:	4604      	mov	r4, r0
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
   15788:	f100 0240 	add.w	r2, r0, #64	; 0x40
   1578c:	4669      	mov	r1, sp
   1578e:	f7ff f94e 	bl	14a2e <lfs_dir_fetch>
    if (err) {
   15792:	b108      	cbz	r0, 15798 <lfs_fs_demove+0x24>
}
   15794:	b00b      	add	sp, #44	; 0x2c
   15796:	bd30      	pop	{r4, r5, pc}
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
   15798:	6be5      	ldr	r5, [r4, #60]	; 0x3c
    return (tag & 0x000ffc00) >> 10;
   1579a:	f3c5 2589 	ubfx	r5, r5, #10, #10
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
   1579e:	2200      	movs	r2, #0
   157a0:	f240 31ff 	movw	r1, #1023	; 0x3ff
   157a4:	4620      	mov	r0, r4
   157a6:	f7f7 fa11 	bl	cbcc <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
   157aa:	2300      	movs	r3, #0
   157ac:	9309      	str	r3, [sp, #36]	; 0x24
   157ae:	02ab      	lsls	r3, r5, #10
   157b0:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
   157b4:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
   157b8:	9308      	str	r3, [sp, #32]
   157ba:	2301      	movs	r3, #1
   157bc:	aa08      	add	r2, sp, #32
   157be:	4669      	mov	r1, sp
   157c0:	4620      	mov	r0, r4
   157c2:	f7f8 febb 	bl	e53c <lfs_dir_commit>
    if (err) {
   157c6:	e7e5      	b.n	15794 <lfs_fs_demove+0x20>

000157c8 <lfs_fs_forceconsistency>:
static int lfs_fs_forceconsistency(lfs_t *lfs) {
   157c8:	b510      	push	{r4, lr}
   157ca:	4604      	mov	r4, r0
    int err = lfs_fs_demove(lfs);
   157cc:	f7ff ffd2 	bl	15774 <lfs_fs_demove>
    if (err) {
   157d0:	b100      	cbz	r0, 157d4 <lfs_fs_forceconsistency+0xc>
}
   157d2:	bd10      	pop	{r4, pc}
    err = lfs_fs_deorphan(lfs);
   157d4:	4620      	mov	r0, r4
   157d6:	f7f9 f8ef 	bl	e9b8 <lfs_fs_deorphan>
    if (err) {
   157da:	e7fa      	b.n	157d2 <lfs_fs_forceconsistency+0xa>

000157dc <lfs_file_sync>:
    if (file->flags & LFS_F_ERRED) {
   157dc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   157de:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   157e2:	d001      	beq.n	157e8 <lfs_file_sync+0xc>
        return 0;
   157e4:	2000      	movs	r0, #0
}
   157e6:	4770      	bx	lr
int lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {
   157e8:	b530      	push	{r4, r5, lr}
   157ea:	b087      	sub	sp, #28
   157ec:	4605      	mov	r5, r0
   157ee:	460c      	mov	r4, r1
    int err = lfs_file_flush(lfs, file);
   157f0:	f7f8 fb92 	bl	df18 <lfs_file_flush>
    if (err) {
   157f4:	2800      	cmp	r0, #0
   157f6:	d132      	bne.n	1585e <lfs_file_sync+0x82>
    if ((file->flags & LFS_F_DIRTY) &&
   157f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   157fa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   157fe:	d032      	beq.n	15866 <lfs_file_sync+0x8a>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
   15800:	68a2      	ldr	r2, [r4, #8]
   15802:	f1b2 3fff 	cmp.w	r2, #4294967295
   15806:	d032      	beq.n	1586e <lfs_file_sync+0x92>
   15808:	68e2      	ldr	r2, [r4, #12]
   1580a:	f1b2 3fff 	cmp.w	r2, #4294967295
   1580e:	d02c      	beq.n	1586a <lfs_file_sync+0x8e>
   15810:	4602      	mov	r2, r0
    if ((file->flags & LFS_F_DIRTY) &&
   15812:	f012 0f01 	tst.w	r2, #1
   15816:	d126      	bne.n	15866 <lfs_file_sync+0x8a>
        if (file->flags & LFS_F_INLINE) {
   15818:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1581c:	d029      	beq.n	15872 <lfs_file_sync+0x96>
            buffer = file->cache.buffer;
   1581e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
            size = file->ctz.size;
   15820:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
            type = LFS_TYPE_INLINESTRUCT;
   15822:	f240 2201 	movw	r2, #513	; 0x201
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
   15826:	88a3      	ldrh	r3, [r4, #4]
   15828:	029b      	lsls	r3, r3, #10
   1582a:	ea43 5202 	orr.w	r2, r3, r2, lsl #20
   1582e:	4302      	orrs	r2, r0
   15830:	9202      	str	r2, [sp, #8]
   15832:	9103      	str	r1, [sp, #12]
   15834:	6d22      	ldr	r2, [r4, #80]	; 0x50
   15836:	6891      	ldr	r1, [r2, #8]
   15838:	430b      	orrs	r3, r1
   1583a:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
   1583e:	9304      	str	r3, [sp, #16]
   15840:	6853      	ldr	r3, [r2, #4]
   15842:	9305      	str	r3, [sp, #20]
   15844:	2302      	movs	r3, #2
   15846:	aa02      	add	r2, sp, #8
   15848:	f104 0108 	add.w	r1, r4, #8
   1584c:	4628      	mov	r0, r5
   1584e:	f7f8 fe75 	bl	e53c <lfs_dir_commit>
        if (err) {
   15852:	b9c0      	cbnz	r0, 15886 <lfs_file_sync+0xaa>
        file->flags &= ~LFS_F_DIRTY;
   15854:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15856:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   1585a:	6323      	str	r3, [r4, #48]	; 0x30
   1585c:	e003      	b.n	15866 <lfs_file_sync+0x8a>
        file->flags |= LFS_F_ERRED;
   1585e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15860:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   15864:	6323      	str	r3, [r4, #48]	; 0x30
}
   15866:	b007      	add	sp, #28
   15868:	bd30      	pop	{r4, r5, pc}
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
   1586a:	2201      	movs	r2, #1
   1586c:	e7d1      	b.n	15812 <lfs_file_sync+0x36>
   1586e:	2201      	movs	r2, #1
   15870:	e7cf      	b.n	15812 <lfs_file_sync+0x36>
            ctz = file->ctz;
   15872:	466b      	mov	r3, sp
   15874:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   15876:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   15878:	e883 0003 	stmia.w	r3, {r0, r1}
            size = sizeof(ctz);
   1587c:	2008      	movs	r0, #8
            buffer = &ctz;
   1587e:	4619      	mov	r1, r3
            type = LFS_TYPE_CTZSTRUCT;
   15880:	f240 2202 	movw	r2, #514	; 0x202
   15884:	e7cf      	b.n	15826 <lfs_file_sync+0x4a>
            file->flags |= LFS_F_ERRED;
   15886:	6b23      	ldr	r3, [r4, #48]	; 0x30
   15888:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   1588c:	6323      	str	r3, [r4, #48]	; 0x30
            return err;
   1588e:	e7ea      	b.n	15866 <lfs_file_sync+0x8a>

00015890 <lfs_file_close>:
int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
   15890:	b570      	push	{r4, r5, r6, lr}
   15892:	4604      	mov	r4, r0
   15894:	460d      	mov	r5, r1
    int err = lfs_file_sync(lfs, file);
   15896:	f7ff ffa1 	bl	157dc <lfs_file_sync>
   1589a:	4606      	mov	r6, r0
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   1589c:	f104 0228 	add.w	r2, r4, #40	; 0x28
   158a0:	6813      	ldr	r3, [r2, #0]
   158a2:	b12b      	cbz	r3, 158b0 <lfs_file_close+0x20>
        if (*p == (struct lfs_mlist*)file) {
   158a4:	42ab      	cmp	r3, r5
   158a6:	d001      	beq.n	158ac <lfs_file_close+0x1c>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   158a8:	461a      	mov	r2, r3
   158aa:	e7f9      	b.n	158a0 <lfs_file_close+0x10>
            *p = (*p)->next;
   158ac:	681b      	ldr	r3, [r3, #0]
   158ae:	6013      	str	r3, [r2, #0]
    if (!file->cfg->buffer) {
   158b0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   158b2:	681b      	ldr	r3, [r3, #0]
   158b4:	b12b      	cbz	r3, 158c2 <lfs_file_close+0x32>
    file->flags &= ~LFS_F_OPENED;
   158b6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   158b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   158bc:	632b      	str	r3, [r5, #48]	; 0x30
}
   158be:	4630      	mov	r0, r6
   158c0:	bd70      	pop	{r4, r5, r6, pc}
    free(p);
   158c2:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   158c4:	f7fd fc16 	bl	130f4 <free>
}
   158c8:	e7f5      	b.n	158b6 <lfs_file_close+0x26>

000158ca <lfs_dir_split>:
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
   158ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   158ce:	b08c      	sub	sp, #48	; 0x30
   158d0:	4605      	mov	r5, r0
   158d2:	460c      	mov	r4, r1
   158d4:	4617      	mov	r7, r2
   158d6:	461e      	mov	r6, r3
   158d8:	f8bd 804c 	ldrh.w	r8, [sp, #76]	; 0x4c
    lfs_alloc_ack(lfs);
   158dc:	f7fe ff2c 	bl	14738 <lfs_alloc_ack>
    int err = lfs_dir_alloc(lfs, &tail);
   158e0:	a904      	add	r1, sp, #16
   158e2:	4628      	mov	r0, r5
   158e4:	f7ff fcea 	bl	152bc <lfs_dir_alloc>
    if (err) {
   158e8:	b110      	cbz	r0, 158f0 <lfs_dir_split+0x26>
}
   158ea:	b00c      	add	sp, #48	; 0x30
   158ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tail.split = dir->split;
   158f0:	7de3      	ldrb	r3, [r4, #23]
   158f2:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
   158f6:	69a3      	ldr	r3, [r4, #24]
   158f8:	930a      	str	r3, [sp, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
   158fa:	69e3      	ldr	r3, [r4, #28]
   158fc:	930b      	str	r3, [sp, #44]	; 0x2c
    err = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
   158fe:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
   15902:	9302      	str	r3, [sp, #8]
   15904:	f8cd 8004 	str.w	r8, [sp, #4]
   15908:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1590a:	9300      	str	r3, [sp, #0]
   1590c:	4633      	mov	r3, r6
   1590e:	463a      	mov	r2, r7
   15910:	a904      	add	r1, sp, #16
   15912:	4628      	mov	r0, r5
   15914:	f7f8 fc18 	bl	e148 <lfs_dir_compact>
    if (err) {
   15918:	2800      	cmp	r0, #0
   1591a:	d1e6      	bne.n	158ea <lfs_dir_split+0x20>
    dir->tail[0] = tail.pair[0];
   1591c:	9904      	ldr	r1, [sp, #16]
   1591e:	61a1      	str	r1, [r4, #24]
    dir->tail[1] = tail.pair[1];
   15920:	9a05      	ldr	r2, [sp, #20]
   15922:	61e2      	str	r2, [r4, #28]
    dir->split = true;
   15924:	2301      	movs	r3, #1
   15926:	75e3      	strb	r3, [r4, #23]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   15928:	6823      	ldr	r3, [r4, #0]
   1592a:	6a2e      	ldr	r6, [r5, #32]
   1592c:	42b3      	cmp	r3, r6
   1592e:	d007      	beq.n	15940 <lfs_dir_split+0x76>
   15930:	6867      	ldr	r7, [r4, #4]
   15932:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   15934:	42a7      	cmp	r7, r4
   15936:	d003      	beq.n	15940 <lfs_dir_split+0x76>
   15938:	42a3      	cmp	r3, r4
   1593a:	d001      	beq.n	15940 <lfs_dir_split+0x76>
   1593c:	42be      	cmp	r6, r7
   1593e:	d1d4      	bne.n	158ea <lfs_dir_split+0x20>
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
   15940:	f1b8 0f00 	cmp.w	r8, #0
   15944:	d1d1      	bne.n	158ea <lfs_dir_split+0x20>
        lfs->root[0] = tail.pair[0];
   15946:	6229      	str	r1, [r5, #32]
        lfs->root[1] = tail.pair[1];
   15948:	626a      	str	r2, [r5, #36]	; 0x24
   1594a:	e7ce      	b.n	158ea <lfs_dir_split+0x20>

0001594c <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   1594c:	b508      	push	{r3, lr}
  _DoInit();
   1594e:	f7f9 fdd5 	bl	f4fc <_DoInit>
}
   15952:	bd08      	pop	{r3, pc}

00015954 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   15954:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   15956:	f7ff fff9 	bl	1594c <SEGGER_RTT_Init>

	return 0;
}
   1595a:	2000      	movs	r0, #0
   1595c:	bd08      	pop	{r3, pc}

0001595e <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   1595e:	b148      	cbz	r0, 15974 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   15960:	68c3      	ldr	r3, [r0, #12]
   15962:	8818      	ldrh	r0, [r3, #0]
   15964:	f3c0 0008 	ubfx	r0, r0, #0, #9
   15968:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   1596c:	bf14      	ite	ne
   1596e:	2000      	movne	r0, #0
   15970:	2001      	moveq	r0, #1
   15972:	4770      	bx	lr
		return false;
   15974:	2000      	movs	r0, #0
}
   15976:	4770      	bx	lr

00015978 <arch_system_halt>:
	__asm__ volatile(
   15978:	f04f 0220 	mov.w	r2, #32
   1597c:	f3ef 8311 	mrs	r3, BASEPRI
   15980:	f382 8812 	msr	BASEPRI_MAX, r2
   15984:	f3bf 8f6f 	isb	sy
	for (;;) {
   15988:	e7fe      	b.n	15988 <arch_system_halt+0x10>

0001598a <k_heap_init>:
{
   1598a:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
   1598c:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   15990:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   15992:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   15994:	f7fc fa74 	bl	11e80 <sys_heap_init>
}
   15998:	bd10      	pop	{r4, pc}

0001599a <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   1599a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1599e:	b087      	sub	sp, #28
   159a0:	4680      	mov	r8, r0
   159a2:	9103      	str	r1, [sp, #12]
   159a4:	9204      	str	r2, [sp, #16]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   159a6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   159aa:	f000 fc1b 	bl	161e4 <sys_clock_timeout_end_calc>
   159ae:	4681      	mov	r9, r0
   159b0:	468b      	mov	fp, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   159b2:	f108 0314 	add.w	r3, r8, #20
   159b6:	9305      	str	r3, [sp, #20]
   159b8:	f04f 0320 	mov.w	r3, #32
   159bc:	f3ef 8511 	mrs	r5, BASEPRI
   159c0:	f383 8812 	msr	BASEPRI_MAX, r3
   159c4:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
   159c8:	f04f 0a00 	mov.w	sl, #0
	void *ret = NULL;
   159cc:	4654      	mov	r4, sl

	while (ret == NULL) {
   159ce:	e00f      	b.n	159f0 <k_heap_aligned_alloc+0x56>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   159d0:	e9cd 6700 	strd	r6, r7, [sp]
   159d4:	f108 020c 	add.w	r2, r8, #12
   159d8:	4629      	mov	r1, r5
   159da:	9805      	ldr	r0, [sp, #20]
   159dc:	f7fa fe2a 	bl	10634 <z_pend_curr>
   159e0:	f04f 0320 	mov.w	r3, #32
   159e4:	f3ef 8511 	mrs	r5, BASEPRI
   159e8:	f383 8812 	msr	BASEPRI_MAX, r3
   159ec:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
   159f0:	b9b4      	cbnz	r4, 15a20 <k_heap_aligned_alloc+0x86>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   159f2:	9a04      	ldr	r2, [sp, #16]
   159f4:	9903      	ldr	r1, [sp, #12]
   159f6:	4640      	mov	r0, r8
   159f8:	f7fc f9b4 	bl	11d64 <sys_heap_aligned_alloc>
   159fc:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   159fe:	f7fb fa03 	bl	10e08 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   15a02:	b96c      	cbnz	r4, 15a20 <k_heap_aligned_alloc+0x86>
		    (ret != NULL) || ((end - now) <= 0)) {
   15a04:	ebb9 0600 	subs.w	r6, r9, r0
   15a08:	eb6b 0701 	sbc.w	r7, fp, r1
   15a0c:	2e01      	cmp	r6, #1
   15a0e:	f177 0300 	sbcs.w	r3, r7, #0
   15a12:	db05      	blt.n	15a20 <k_heap_aligned_alloc+0x86>
		if (!blocked_alloc) {
   15a14:	f1ba 0f00 	cmp.w	sl, #0
   15a18:	d1da      	bne.n	159d0 <k_heap_aligned_alloc+0x36>
			blocked_alloc = true;
   15a1a:	f04f 0a01 	mov.w	sl, #1
   15a1e:	e7d7      	b.n	159d0 <k_heap_aligned_alloc+0x36>
	__asm__ volatile(
   15a20:	f385 8811 	msr	BASEPRI, r5
   15a24:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   15a28:	4620      	mov	r0, r4
   15a2a:	b007      	add	sp, #28
   15a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00015a30 <k_heap_alloc>:

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   15a30:	b500      	push	{lr}
   15a32:	b083      	sub	sp, #12
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, alloc, h, timeout);

	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   15a34:	e9cd 2300 	strd	r2, r3, [sp]
   15a38:	460a      	mov	r2, r1
   15a3a:	2104      	movs	r1, #4
   15a3c:	f7ff ffad 	bl	1599a <k_heap_aligned_alloc>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, alloc, h, timeout, ret);

	return ret;
}
   15a40:	b003      	add	sp, #12
   15a42:	f85d fb04 	ldr.w	pc, [sp], #4

00015a46 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   15a46:	b570      	push	{r4, r5, r6, lr}
   15a48:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   15a4a:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
   15a4e:	f04f 0320 	mov.w	r3, #32
   15a52:	f3ef 8511 	mrs	r5, BASEPRI
   15a56:	f383 8812 	msr	BASEPRI_MAX, r3
   15a5a:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
   15a5e:	f7fc f91f 	bl	11ca0 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   15a62:	f104 000c 	add.w	r0, r4, #12
   15a66:	f000 faf5 	bl	16054 <z_unpend_all>
   15a6a:	b920      	cbnz	r0, 15a76 <k_heap_free+0x30>
	__asm__ volatile(
   15a6c:	f385 8811 	msr	BASEPRI, r5
   15a70:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   15a74:	bd70      	pop	{r4, r5, r6, pc}
		z_reschedule(&h->lock, key);
   15a76:	4629      	mov	r1, r5
   15a78:	4630      	mov	r0, r6
   15a7a:	f7fa fc77 	bl	1036c <z_reschedule>
   15a7e:	e7f9      	b.n	15a74 <k_heap_free+0x2e>

00015a80 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   15a80:	68c2      	ldr	r2, [r0, #12]
   15a82:	6903      	ldr	r3, [r0, #16]
   15a84:	431a      	orrs	r2, r3
   15a86:	f012 0203 	ands.w	r2, r2, #3
   15a8a:	d10d      	bne.n	15aa8 <create_free_list+0x28>
	slab->free_list = NULL;
   15a8c:	2100      	movs	r1, #0
   15a8e:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   15a90:	e005      	b.n	15a9e <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   15a92:	6941      	ldr	r1, [r0, #20]
   15a94:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   15a96:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   15a98:	68c1      	ldr	r1, [r0, #12]
   15a9a:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   15a9c:	3201      	adds	r2, #1
   15a9e:	6881      	ldr	r1, [r0, #8]
   15aa0:	4291      	cmp	r1, r2
   15aa2:	d8f6      	bhi.n	15a92 <create_free_list+0x12>
	return 0;
   15aa4:	2000      	movs	r0, #0
   15aa6:	4770      	bx	lr
		return -EINVAL;
   15aa8:	f06f 0015 	mvn.w	r0, #21
}
   15aac:	4770      	bx	lr

00015aae <k_mem_slab_init>:
{
   15aae:	b510      	push	{r4, lr}
   15ab0:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
   15ab2:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
   15ab4:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
   15ab6:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
   15ab8:	2300      	movs	r3, #0
   15aba:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
   15abc:	f7ff ffe0 	bl	15a80 <create_free_list>
	if (rc < 0) {
   15ac0:	2800      	cmp	r0, #0
   15ac2:	db01      	blt.n	15ac8 <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
   15ac4:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
   15ac6:	6064      	str	r4, [r4, #4]
}
   15ac8:	bd10      	pop	{r4, pc}

00015aca <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   15aca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15acc:	4604      	mov	r4, r0
   15ace:	460d      	mov	r5, r1
	__asm__ volatile(
   15ad0:	f04f 0320 	mov.w	r3, #32
   15ad4:	f3ef 8611 	mrs	r6, BASEPRI
   15ad8:	f383 8812 	msr	BASEPRI_MAX, r3
   15adc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   15ae0:	6943      	ldr	r3, [r0, #20]
   15ae2:	b163      	cbz	r3, 15afe <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   15ae4:	682b      	ldr	r3, [r5, #0]
   15ae6:	6962      	ldr	r2, [r4, #20]
   15ae8:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   15aea:	682b      	ldr	r3, [r5, #0]
   15aec:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   15aee:	69a3      	ldr	r3, [r4, #24]
   15af0:	3b01      	subs	r3, #1
   15af2:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   15af4:	f386 8811 	msr	BASEPRI, r6
   15af8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   15afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15afe:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   15b02:	f000 fa7c 	bl	15ffe <z_unpend_first_thread>
		if (pending_thread != NULL) {
   15b06:	2800      	cmp	r0, #0
   15b08:	d0ec      	beq.n	15ae4 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   15b0a:	682a      	ldr	r2, [r5, #0]
   15b0c:	2100      	movs	r1, #0
   15b0e:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   15b12:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   15b14:	f000 f9b1 	bl	15e7a <z_ready_thread>
			z_reschedule(&slab->lock, key);
   15b18:	4631      	mov	r1, r6
   15b1a:	4638      	mov	r0, r7
   15b1c:	f7fa fc26 	bl	1036c <z_reschedule>
			return;
   15b20:	e7ec      	b.n	15afc <k_mem_slab_free+0x32>

00015b22 <setup_thread_stack>:
{
   15b22:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   15b24:	3207      	adds	r2, #7
   15b26:	f022 0207 	bic.w	r2, r2, #7
   15b2a:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   15b2e:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   15b32:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
   15b36:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
   15b3a:	2200      	movs	r2, #0
   15b3c:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
   15b40:	18c8      	adds	r0, r1, r3
   15b42:	bc10      	pop	{r4}
   15b44:	4770      	bx	lr

00015b46 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   15b46:	f3ef 8005 	mrs	r0, IPSR
}
   15b4a:	3800      	subs	r0, #0
   15b4c:	bf18      	it	ne
   15b4e:	2001      	movne	r0, #1
   15b50:	4770      	bx	lr

00015b52 <k_thread_name_get>:
}
   15b52:	3074      	adds	r0, #116	; 0x74
   15b54:	4770      	bx	lr

00015b56 <z_impl_k_thread_start>:
{
   15b56:	b508      	push	{r3, lr}
	z_sched_start(thread);
   15b58:	f7fa fd32 	bl	105c0 <z_sched_start>
}
   15b5c:	bd08      	pop	{r3, pc}

00015b5e <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   15b5e:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   15b60:	2400      	movs	r4, #0
   15b62:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   15b64:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   15b66:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   15b68:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   15b6a:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   15b6c:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   15b6e:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   15b70:	bc10      	pop	{r4}
   15b72:	4770      	bx	lr

00015b74 <z_impl_k_thread_create>:
{
   15b74:	b5f0      	push	{r4, r5, r6, r7, lr}
   15b76:	b087      	sub	sp, #28
   15b78:	4604      	mov	r4, r0
   15b7a:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   15b7e:	2500      	movs	r5, #0
   15b80:	9505      	str	r5, [sp, #20]
   15b82:	9d10      	ldr	r5, [sp, #64]	; 0x40
   15b84:	9504      	str	r5, [sp, #16]
   15b86:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   15b88:	9503      	str	r5, [sp, #12]
   15b8a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   15b8c:	9502      	str	r5, [sp, #8]
   15b8e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   15b90:	9501      	str	r5, [sp, #4]
   15b92:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   15b94:	9500      	str	r5, [sp, #0]
   15b96:	f7fa f811 	bl	fbbc <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   15b9a:	f1b7 3fff 	cmp.w	r7, #4294967295
   15b9e:	bf08      	it	eq
   15ba0:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   15ba4:	d102      	bne.n	15bac <z_impl_k_thread_create+0x38>
}
   15ba6:	4620      	mov	r0, r4
   15ba8:	b007      	add	sp, #28
   15baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
   15bac:	4632      	mov	r2, r6
   15bae:	463b      	mov	r3, r7
   15bb0:	4620      	mov	r0, r4
   15bb2:	f7f9 fff1 	bl	fb98 <schedule_new_thread>
   15bb6:	e7f6      	b.n	15ba6 <z_impl_k_thread_create+0x32>

00015bb8 <z_pm_save_idle_exit>:

void z_pm_save_idle_exit(int32_t ticks)
{
   15bb8:	b508      	push	{r3, lr}
	/* Some CPU low power states require notification at the ISR
	 * to allow any operations that needs to be done before kernel
	 * switches task or processes nested interrupts.
	 * This can be simply ignored if not required.
	 */
	pm_system_resume();
   15bba:	f7ef fc37 	bl	542c <pm_system_resume>
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
   15bbe:	f7fe faed 	bl	1419c <sys_clock_idle_exit>
}
   15bc2:	bd08      	pop	{r3, pc}

00015bc4 <idle>:

void idle(void *unused1, void *unused2, void *unused3)
{
   15bc4:	b508      	push	{r3, lr}
	__asm__ volatile(
   15bc6:	f04f 0220 	mov.w	r2, #32
   15bca:	f3ef 8311 	mrs	r3, BASEPRI
   15bce:	f382 8812 	msr	BASEPRI_MAX, r2
   15bd2:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

		if (IS_ENABLED(CONFIG_PM)) {
			pm_save_idle();
   15bd6:	f7fa f8a3 	bl	fd20 <pm_save_idle>
   15bda:	e7f4      	b.n	15bc6 <idle+0x2>

00015bdc <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   15bdc:	4288      	cmp	r0, r1
   15bde:	da00      	bge.n	15be2 <new_prio_for_inheritance+0x6>
   15be0:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   15be2:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   15be6:	db01      	blt.n	15bec <new_prio_for_inheritance+0x10>
   15be8:	4608      	mov	r0, r1
   15bea:	4770      	bx	lr
   15bec:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   15bf0:	4770      	bx	lr

00015bf2 <adjust_owner_prio>:
{
   15bf2:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   15bf4:	6880      	ldr	r0, [r0, #8]
   15bf6:	f990 300e 	ldrsb.w	r3, [r0, #14]
   15bfa:	428b      	cmp	r3, r1
   15bfc:	d101      	bne.n	15c02 <adjust_owner_prio+0x10>
	return false;
   15bfe:	2000      	movs	r0, #0
}
   15c00:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   15c02:	f7fa fd2b 	bl	1065c <z_set_prio>
   15c06:	e7fb      	b.n	15c00 <adjust_owner_prio+0xe>

00015c08 <z_impl_k_mutex_init>:
{
   15c08:	4603      	mov	r3, r0
	mutex->owner = NULL;
   15c0a:	2000      	movs	r0, #0
   15c0c:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   15c0e:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   15c10:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   15c12:	605b      	str	r3, [r3, #4]
}
   15c14:	4770      	bx	lr

00015c16 <prepare_thread_to_run>:
{
   15c16:	b508      	push	{r3, lr}
   15c18:	2200      	movs	r2, #0
   15c1a:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
   15c1e:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   15c20:	f000 f92b 	bl	15e7a <z_ready_thread>
}
   15c24:	bd08      	pop	{r3, pc}

00015c26 <queue_insert>:
{
   15c26:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15c2a:	4605      	mov	r5, r0
   15c2c:	460e      	mov	r6, r1
   15c2e:	4614      	mov	r4, r2
   15c30:	461f      	mov	r7, r3
   15c32:	f89d 2020 	ldrb.w	r2, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   15c36:	f100 0808 	add.w	r8, r0, #8
   15c3a:	f04f 0320 	mov.w	r3, #32
   15c3e:	f3ef 8911 	mrs	r9, BASEPRI
   15c42:	f383 8812 	msr	BASEPRI_MAX, r3
   15c46:	f3bf 8f6f 	isb	sy
	if (is_append) {
   15c4a:	b102      	cbz	r2, 15c4e <queue_insert+0x28>
	return list->tail;
   15c4c:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   15c4e:	4640      	mov	r0, r8
   15c50:	f000 f9d5 	bl	15ffe <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   15c54:	b9a0      	cbnz	r0, 15c80 <queue_insert+0x5a>
	if (alloc) {
   15c56:	b9e7      	cbnz	r7, 15c92 <queue_insert+0x6c>
	node->next_and_flags = flags;
   15c58:	2300      	movs	r3, #0
   15c5a:	6023      	str	r3, [r4, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   15c5c:	b356      	cbz	r6, 15cb4 <queue_insert+0x8e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   15c5e:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   15c60:	f033 0303 	bics.w	r3, r3, #3
   15c64:	d134      	bne.n	15cd0 <queue_insert+0xaa>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   15c66:	6823      	ldr	r3, [r4, #0]
   15c68:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   15c6c:	6023      	str	r3, [r4, #0]
	return list->tail;
   15c6e:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   15c70:	b35a      	cbz	r2, 15cca <queue_insert+0xa4>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   15c72:	6813      	ldr	r3, [r2, #0]
   15c74:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   15c78:	4323      	orrs	r3, r4
   15c7a:	6013      	str	r3, [r2, #0]
	list->tail = node;
   15c7c:	606c      	str	r4, [r5, #4]
}
   15c7e:	e031      	b.n	15ce4 <queue_insert+0xbe>
		prepare_thread_to_run(first_pending_thread, data);
   15c80:	4621      	mov	r1, r4
   15c82:	f7ff ffc8 	bl	15c16 <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   15c86:	4649      	mov	r1, r9
   15c88:	4640      	mov	r0, r8
   15c8a:	f7fa fb6f 	bl	1036c <z_reschedule>
		return 0;
   15c8e:	2000      	movs	r0, #0
   15c90:	e02d      	b.n	15cee <queue_insert+0xc8>
	return z_thread_aligned_alloc(0, size);
   15c92:	2108      	movs	r1, #8
   15c94:	2000      	movs	r0, #0
   15c96:	f7fb f983 	bl	10fa0 <z_thread_aligned_alloc>
		if (anode == NULL) {
   15c9a:	b120      	cbz	r0, 15ca6 <queue_insert+0x80>
		anode->data = data;
   15c9c:	6044      	str	r4, [r0, #4]
	node->next_and_flags = flags;
   15c9e:	2201      	movs	r2, #1
   15ca0:	6002      	str	r2, [r0, #0]
		data = anode;
   15ca2:	4604      	mov	r4, r0
   15ca4:	e7da      	b.n	15c5c <queue_insert+0x36>
	__asm__ volatile(
   15ca6:	f389 8811 	msr	BASEPRI, r9
   15caa:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   15cae:	f06f 000b 	mvn.w	r0, #11
   15cb2:	e01c      	b.n	15cee <queue_insert+0xc8>
	return list->head;
   15cb4:	682a      	ldr	r2, [r5, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   15cb6:	6823      	ldr	r3, [r4, #0]
   15cb8:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   15cbc:	4313      	orrs	r3, r2
   15cbe:	6023      	str	r3, [r4, #0]
	list->head = node;
   15cc0:	602c      	str	r4, [r5, #0]
	return list->tail;
   15cc2:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   15cc4:	b973      	cbnz	r3, 15ce4 <queue_insert+0xbe>
	list->tail = node;
   15cc6:	606c      	str	r4, [r5, #4]
}
   15cc8:	e00c      	b.n	15ce4 <queue_insert+0xbe>
	list->tail = node;
   15cca:	606c      	str	r4, [r5, #4]
	list->head = node;
   15ccc:	602c      	str	r4, [r5, #0]
}
   15cce:	e009      	b.n	15ce4 <queue_insert+0xbe>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   15cd0:	6822      	ldr	r2, [r4, #0]
   15cd2:	f002 0203 	and.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   15cd6:	4313      	orrs	r3, r2
   15cd8:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   15cda:	6833      	ldr	r3, [r6, #0]
   15cdc:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   15ce0:	431c      	orrs	r4, r3
   15ce2:	6034      	str	r4, [r6, #0]
	z_reschedule(&queue->lock, key);
   15ce4:	4649      	mov	r1, r9
   15ce6:	4640      	mov	r0, r8
   15ce8:	f7fa fb40 	bl	1036c <z_reschedule>
	return 0;
   15cec:	2000      	movs	r0, #0
}
   15cee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00015cf2 <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   15cf2:	b160      	cbz	r0, 15d0e <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   15cf4:	6803      	ldr	r3, [r0, #0]
   15cf6:	f013 0f03 	tst.w	r3, #3
   15cfa:	d008      	beq.n	15d0e <z_queue_node_peek+0x1c>
{
   15cfc:	b510      	push	{r4, lr}
		ret = anode->data;
   15cfe:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   15d00:	b909      	cbnz	r1, 15d06 <z_queue_node_peek+0x14>
		ret = anode->data;
   15d02:	4620      	mov	r0, r4
}
   15d04:	bd10      	pop	{r4, pc}
			k_free(anode);
   15d06:	f000 fade 	bl	162c6 <k_free>
		ret = anode->data;
   15d0a:	4620      	mov	r0, r4
   15d0c:	e7fa      	b.n	15d04 <z_queue_node_peek+0x12>
}
   15d0e:	4770      	bx	lr

00015d10 <k_queue_append>:
{
   15d10:	b500      	push	{lr}
   15d12:	b083      	sub	sp, #12
   15d14:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   15d16:	2301      	movs	r3, #1
   15d18:	9300      	str	r3, [sp, #0]
   15d1a:	2300      	movs	r3, #0
   15d1c:	4619      	mov	r1, r3
   15d1e:	f7ff ff82 	bl	15c26 <queue_insert>
}
   15d22:	b003      	add	sp, #12
   15d24:	f85d fb04 	ldr.w	pc, [sp], #4

00015d28 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   15d28:	b13a      	cbz	r2, 15d3a <z_impl_k_sem_init+0x12>
   15d2a:	428a      	cmp	r2, r1
   15d2c:	d308      	bcc.n	15d40 <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
   15d2e:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   15d30:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   15d32:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   15d34:	6040      	str	r0, [r0, #4]
	return 0;
   15d36:	2000      	movs	r0, #0
   15d38:	4770      	bx	lr
		return -EINVAL;
   15d3a:	f06f 0015 	mvn.w	r0, #21
   15d3e:	4770      	bx	lr
   15d40:	f06f 0015 	mvn.w	r0, #21
}
   15d44:	4770      	bx	lr

00015d46 <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   15d46:	2300      	movs	r3, #0
   15d48:	6003      	str	r3, [r0, #0]
   15d4a:	6083      	str	r3, [r0, #8]
   15d4c:	60c3      	str	r3, [r0, #12]
   15d4e:	6041      	str	r1, [r0, #4]
}
   15d50:	4770      	bx	lr

00015d52 <k_work_submit_to_queue>:
{
   15d52:	b530      	push	{r4, r5, lr}
   15d54:	b083      	sub	sp, #12
   15d56:	9001      	str	r0, [sp, #4]
   15d58:	4608      	mov	r0, r1
	__asm__ volatile(
   15d5a:	f04f 0320 	mov.w	r3, #32
   15d5e:	f3ef 8511 	mrs	r5, BASEPRI
   15d62:	f383 8812 	msr	BASEPRI_MAX, r3
   15d66:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   15d6a:	a901      	add	r1, sp, #4
   15d6c:	f7fa f93e 	bl	ffec <submit_to_queue_locked>
   15d70:	4604      	mov	r4, r0
	__asm__ volatile(
   15d72:	f385 8811 	msr	BASEPRI, r5
   15d76:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   15d7a:	2800      	cmp	r0, #0
   15d7c:	dc02      	bgt.n	15d84 <k_work_submit_to_queue+0x32>
}
   15d7e:	4620      	mov	r0, r4
   15d80:	b003      	add	sp, #12
   15d82:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
   15d84:	f7fa fe88 	bl	10a98 <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   15d88:	2800      	cmp	r0, #0
   15d8a:	d0f8      	beq.n	15d7e <k_work_submit_to_queue+0x2c>
	z_impl_k_yield();
   15d8c:	f7fa fd8a 	bl	108a4 <z_impl_k_yield>
	return ret;
   15d90:	e7f5      	b.n	15d7e <k_work_submit_to_queue+0x2c>

00015d92 <thread_active_elsewhere>:
}
   15d92:	2000      	movs	r0, #0
   15d94:	4770      	bx	lr

00015d96 <pended_on_thread>:
}
   15d96:	6880      	ldr	r0, [r0, #8]
   15d98:	4770      	bx	lr

00015d9a <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   15d9a:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   15d9e:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   15da2:	4283      	cmp	r3, r0
   15da4:	d001      	beq.n	15daa <z_sched_prio_cmp+0x10>
		return b2 - b1;
   15da6:	1ac0      	subs	r0, r0, r3
   15da8:	4770      	bx	lr
	return 0;
   15daa:	2000      	movs	r0, #0
}
   15dac:	4770      	bx	lr

00015dae <z_unpend_thread_no_timeout>:
{
   15dae:	b538      	push	{r3, r4, r5, lr}
   15db0:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   15db2:	2300      	movs	r3, #0
	__asm__ volatile(
   15db4:	f04f 0220 	mov.w	r2, #32
   15db8:	f3ef 8511 	mrs	r5, BASEPRI
   15dbc:	f382 8812 	msr	BASEPRI_MAX, r2
   15dc0:	f3bf 8f6f 	isb	sy
   15dc4:	b98b      	cbnz	r3, 15dea <z_unpend_thread_no_timeout+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   15dc6:	4620      	mov	r0, r4
   15dc8:	f7ff ffe5 	bl	15d96 <pended_on_thread>
   15dcc:	4621      	mov	r1, r4
   15dce:	f000 f822 	bl	15e16 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   15dd2:	7b63      	ldrb	r3, [r4, #13]
   15dd4:	f023 0302 	bic.w	r3, r3, #2
   15dd8:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   15dda:	2300      	movs	r3, #0
   15ddc:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   15dde:	f385 8811 	msr	BASEPRI, r5
   15de2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   15de6:	2301      	movs	r3, #1
   15de8:	e7ec      	b.n	15dc4 <z_unpend_thread_no_timeout+0x16>
}
   15dea:	bd38      	pop	{r3, r4, r5, pc}

00015dec <z_reschedule_irqlock>:
{
   15dec:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   15dee:	4603      	mov	r3, r0
   15df0:	b920      	cbnz	r0, 15dfc <z_reschedule_irqlock+0x10>
   15df2:	f3ef 8205 	mrs	r2, IPSR
   15df6:	b942      	cbnz	r2, 15e0a <z_reschedule_irqlock+0x1e>
   15df8:	2201      	movs	r2, #1
   15dfa:	e000      	b.n	15dfe <z_reschedule_irqlock+0x12>
   15dfc:	2200      	movs	r2, #0
	if (resched(key)) {
   15dfe:	b932      	cbnz	r2, 15e0e <z_reschedule_irqlock+0x22>
   15e00:	f383 8811 	msr	BASEPRI, r3
   15e04:	f3bf 8f6f 	isb	sy
}
   15e08:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   15e0a:	2200      	movs	r2, #0
   15e0c:	e7f7      	b.n	15dfe <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   15e0e:	4618      	mov	r0, r3
   15e10:	f7ef fd56 	bl	58c0 <arch_swap>
	return ret;
   15e14:	e7f8      	b.n	15e08 <z_reschedule_irqlock+0x1c>

00015e16 <z_priq_dumb_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   15e16:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   15e18:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
   15e1a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   15e1c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   15e1e:	2300      	movs	r3, #0
   15e20:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   15e22:	604b      	str	r3, [r1, #4]
}
   15e24:	4770      	bx	lr

00015e26 <z_unpend_thread>:
{
   15e26:	b538      	push	{r3, r4, r5, lr}
   15e28:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   15e2a:	2300      	movs	r3, #0
	__asm__ volatile(
   15e2c:	f04f 0220 	mov.w	r2, #32
   15e30:	f3ef 8511 	mrs	r5, BASEPRI
   15e34:	f382 8812 	msr	BASEPRI_MAX, r2
   15e38:	f3bf 8f6f 	isb	sy
   15e3c:	b98b      	cbnz	r3, 15e62 <z_unpend_thread+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   15e3e:	4620      	mov	r0, r4
   15e40:	f7ff ffa9 	bl	15d96 <pended_on_thread>
   15e44:	4621      	mov	r1, r4
   15e46:	f7ff ffe6 	bl	15e16 <z_priq_dumb_remove>
   15e4a:	7b63      	ldrb	r3, [r4, #13]
   15e4c:	f023 0302 	bic.w	r3, r3, #2
   15e50:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   15e52:	2300      	movs	r3, #0
   15e54:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   15e56:	f385 8811 	msr	BASEPRI, r5
   15e5a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   15e5e:	2301      	movs	r3, #1
   15e60:	e7ec      	b.n	15e3c <z_unpend_thread+0x16>
	return z_abort_timeout(&thread->base.timeout);
   15e62:	f104 0018 	add.w	r0, r4, #24
   15e66:	f000 f954 	bl	16112 <z_abort_timeout>
}
   15e6a:	bd38      	pop	{r3, r4, r5, pc}

00015e6c <z_priq_dumb_best>:
{
   15e6c:	4603      	mov	r3, r0
	return list->head == list;
   15e6e:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15e70:	4283      	cmp	r3, r0
   15e72:	d000      	beq.n	15e76 <z_priq_dumb_best+0xa>
}
   15e74:	4770      	bx	lr
	struct k_thread *thread = NULL;
   15e76:	2000      	movs	r0, #0
	return thread;
   15e78:	e7fc      	b.n	15e74 <z_priq_dumb_best+0x8>

00015e7a <z_ready_thread>:
{
   15e7a:	b538      	push	{r3, r4, r5, lr}
   15e7c:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   15e7e:	2300      	movs	r3, #0
	__asm__ volatile(
   15e80:	f04f 0220 	mov.w	r2, #32
   15e84:	f3ef 8511 	mrs	r5, BASEPRI
   15e88:	f382 8812 	msr	BASEPRI_MAX, r2
   15e8c:	f3bf 8f6f 	isb	sy
   15e90:	e007      	b.n	15ea2 <z_ready_thread+0x28>
			ready_thread(thread);
   15e92:	4620      	mov	r0, r4
   15e94:	f7fa fb54 	bl	10540 <ready_thread>
	__asm__ volatile(
   15e98:	f385 8811 	msr	BASEPRI, r5
   15e9c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   15ea0:	2301      	movs	r3, #1
   15ea2:	b92b      	cbnz	r3, 15eb0 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   15ea4:	4620      	mov	r0, r4
   15ea6:	f7ff ff74 	bl	15d92 <thread_active_elsewhere>
   15eaa:	2800      	cmp	r0, #0
   15eac:	d1f4      	bne.n	15e98 <z_ready_thread+0x1e>
   15eae:	e7f0      	b.n	15e92 <z_ready_thread+0x18>
}
   15eb0:	bd38      	pop	{r3, r4, r5, pc}

00015eb2 <z_thread_timeout>:
{
   15eb2:	b570      	push	{r4, r5, r6, lr}
   15eb4:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   15eb6:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
   15eba:	2300      	movs	r3, #0
	__asm__ volatile(
   15ebc:	f04f 0220 	mov.w	r2, #32
   15ec0:	f3ef 8611 	mrs	r6, BASEPRI
   15ec4:	f382 8812 	msr	BASEPRI_MAX, r2
   15ec8:	f3bf 8f6f 	isb	sy
   15ecc:	e019      	b.n	15f02 <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   15ece:	4628      	mov	r0, r5
   15ed0:	f7ff ff61 	bl	15d96 <pended_on_thread>
   15ed4:	4629      	mov	r1, r5
   15ed6:	f7ff ff9e 	bl	15e16 <z_priq_dumb_remove>
   15eda:	7b6b      	ldrb	r3, [r5, #13]
   15edc:	f023 0302 	bic.w	r3, r3, #2
   15ee0:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   15ee2:	2300      	movs	r3, #0
   15ee4:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   15ee6:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   15eea:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
   15eee:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   15ef2:	4628      	mov	r0, r5
   15ef4:	f7fa fb24 	bl	10540 <ready_thread>
	__asm__ volatile(
   15ef8:	f386 8811 	msr	BASEPRI, r6
   15efc:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   15f00:	2301      	movs	r3, #1
   15f02:	b94b      	cbnz	r3, 15f18 <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   15f04:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   15f08:	f013 0f28 	tst.w	r3, #40	; 0x28
   15f0c:	d1f4      	bne.n	15ef8 <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
   15f0e:	f854 3c10 	ldr.w	r3, [r4, #-16]
   15f12:	2b00      	cmp	r3, #0
   15f14:	d1db      	bne.n	15ece <z_thread_timeout+0x1c>
   15f16:	e7e6      	b.n	15ee6 <z_thread_timeout+0x34>
}
   15f18:	bd70      	pop	{r4, r5, r6, pc}

00015f1a <add_to_waitq_locked>:
{
   15f1a:	b570      	push	{r4, r5, r6, lr}
   15f1c:	4605      	mov	r5, r0
   15f1e:	460e      	mov	r6, r1
	unready_thread(thread);
   15f20:	f7fa fb6c 	bl	105fc <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   15f24:	7b6b      	ldrb	r3, [r5, #13]
   15f26:	f043 0302 	orr.w	r3, r3, #2
   15f2a:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   15f2c:	b1b6      	cbz	r6, 15f5c <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
   15f2e:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   15f30:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   15f32:	42a6      	cmp	r6, r4
   15f34:	d019      	beq.n	15f6a <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15f36:	b164      	cbz	r4, 15f52 <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
   15f38:	4621      	mov	r1, r4
   15f3a:	4628      	mov	r0, r5
   15f3c:	f7ff ff2d 	bl	15d9a <z_sched_prio_cmp>
   15f40:	2800      	cmp	r0, #0
   15f42:	dc0c      	bgt.n	15f5e <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   15f44:	b12c      	cbz	r4, 15f52 <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
   15f46:	6873      	ldr	r3, [r6, #4]
   15f48:	429c      	cmp	r4, r3
   15f4a:	d002      	beq.n	15f52 <add_to_waitq_locked+0x38>
   15f4c:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15f4e:	2c00      	cmp	r4, #0
   15f50:	d1f1      	bne.n	15f36 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
   15f52:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   15f54:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   15f56:	606b      	str	r3, [r5, #4]
	tail->next = node;
   15f58:	601d      	str	r5, [r3, #0]
	list->tail = node;
   15f5a:	6075      	str	r5, [r6, #4]
}
   15f5c:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
   15f5e:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   15f60:	606b      	str	r3, [r5, #4]
	node->next = successor;
   15f62:	602c      	str	r4, [r5, #0]
	prev->next = node;
   15f64:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   15f66:	6065      	str	r5, [r4, #4]
}
   15f68:	e7f8      	b.n	15f5c <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   15f6a:	2400      	movs	r4, #0
   15f6c:	e7e3      	b.n	15f36 <add_to_waitq_locked+0x1c>

00015f6e <pend>:
{
   15f6e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15f72:	4605      	mov	r5, r0
   15f74:	460f      	mov	r7, r1
   15f76:	4691      	mov	r9, r2
   15f78:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
   15f7a:	2400      	movs	r4, #0
	__asm__ volatile(
   15f7c:	f04f 0320 	mov.w	r3, #32
   15f80:	f3ef 8611 	mrs	r6, BASEPRI
   15f84:	f383 8812 	msr	BASEPRI_MAX, r3
   15f88:	f3bf 8f6f 	isb	sy
   15f8c:	b94c      	cbnz	r4, 15fa2 <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
   15f8e:	4639      	mov	r1, r7
   15f90:	4628      	mov	r0, r5
   15f92:	f7ff ffc2 	bl	15f1a <add_to_waitq_locked>
	__asm__ volatile(
   15f96:	f386 8811 	msr	BASEPRI, r6
   15f9a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   15f9e:	2401      	movs	r4, #1
   15fa0:	e7f4      	b.n	15f8c <pend+0x1e>
	add_thread_timeout(thread, timeout);
   15fa2:	464a      	mov	r2, r9
   15fa4:	4643      	mov	r3, r8
   15fa6:	4628      	mov	r0, r5
   15fa8:	f7fa f97e 	bl	102a8 <add_thread_timeout>
}
   15fac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00015fb0 <z_unpend1_no_timeout>:
{
   15fb0:	b570      	push	{r4, r5, r6, lr}
   15fb2:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   15fb4:	2300      	movs	r3, #0
	__asm__ volatile(
   15fb6:	f04f 0220 	mov.w	r2, #32
   15fba:	f3ef 8511 	mrs	r5, BASEPRI
   15fbe:	f382 8812 	msr	BASEPRI_MAX, r2
   15fc2:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   15fc6:	461c      	mov	r4, r3
   15fc8:	e00f      	b.n	15fea <z_unpend1_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   15fca:	f7ff fee4 	bl	15d96 <pended_on_thread>
   15fce:	4621      	mov	r1, r4
   15fd0:	f7ff ff21 	bl	15e16 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   15fd4:	7b63      	ldrb	r3, [r4, #13]
   15fd6:	f023 0302 	bic.w	r3, r3, #2
   15fda:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   15fdc:	2300      	movs	r3, #0
   15fde:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   15fe0:	f385 8811 	msr	BASEPRI, r5
   15fe4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   15fe8:	2301      	movs	r3, #1
   15fea:	b933      	cbnz	r3, 15ffa <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
   15fec:	4630      	mov	r0, r6
   15fee:	f7ff ff3d 	bl	15e6c <z_priq_dumb_best>
		if (thread != NULL) {
   15ff2:	4604      	mov	r4, r0
   15ff4:	2800      	cmp	r0, #0
   15ff6:	d1e8      	bne.n	15fca <z_unpend1_no_timeout+0x1a>
   15ff8:	e7f2      	b.n	15fe0 <z_unpend1_no_timeout+0x30>
}
   15ffa:	4620      	mov	r0, r4
   15ffc:	bd70      	pop	{r4, r5, r6, pc}

00015ffe <z_unpend_first_thread>:
{
   15ffe:	b570      	push	{r4, r5, r6, lr}
   16000:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   16002:	2300      	movs	r3, #0
	__asm__ volatile(
   16004:	f04f 0220 	mov.w	r2, #32
   16008:	f3ef 8511 	mrs	r5, BASEPRI
   1600c:	f382 8812 	msr	BASEPRI_MAX, r2
   16010:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   16014:	461c      	mov	r4, r3
   16016:	e013      	b.n	16040 <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   16018:	f7ff febd 	bl	15d96 <pended_on_thread>
   1601c:	4621      	mov	r1, r4
   1601e:	f7ff fefa 	bl	15e16 <z_priq_dumb_remove>
   16022:	7b63      	ldrb	r3, [r4, #13]
   16024:	f023 0302 	bic.w	r3, r3, #2
   16028:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   1602a:	2300      	movs	r3, #0
   1602c:	60a3      	str	r3, [r4, #8]
   1602e:	f104 0018 	add.w	r0, r4, #24
   16032:	f000 f86e 	bl	16112 <z_abort_timeout>
	__asm__ volatile(
   16036:	f385 8811 	msr	BASEPRI, r5
   1603a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   1603e:	2301      	movs	r3, #1
   16040:	b933      	cbnz	r3, 16050 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
   16042:	4630      	mov	r0, r6
   16044:	f7ff ff12 	bl	15e6c <z_priq_dumb_best>
		if (thread != NULL) {
   16048:	4604      	mov	r4, r0
   1604a:	2800      	cmp	r0, #0
   1604c:	d1e4      	bne.n	16018 <z_unpend_first_thread+0x1a>
   1604e:	e7f2      	b.n	16036 <z_unpend_first_thread+0x38>
}
   16050:	4620      	mov	r0, r4
   16052:	bd70      	pop	{r4, r5, r6, pc}

00016054 <z_unpend_all>:
{
   16054:	b538      	push	{r3, r4, r5, lr}
   16056:	4605      	mov	r5, r0
	int need_sched = 0;
   16058:	2000      	movs	r0, #0
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1605a:	e006      	b.n	1606a <z_unpend_all+0x16>
		z_unpend_thread(thread);
   1605c:	4620      	mov	r0, r4
   1605e:	f7ff fee2 	bl	15e26 <z_unpend_thread>
		z_ready_thread(thread);
   16062:	4620      	mov	r0, r4
   16064:	f7ff ff09 	bl	15e7a <z_ready_thread>
		need_sched = 1;
   16068:	2001      	movs	r0, #1
	return list->head == list;
   1606a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1606c:	42a5      	cmp	r5, r4
   1606e:	d001      	beq.n	16074 <z_unpend_all+0x20>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   16070:	2c00      	cmp	r4, #0
   16072:	d1f3      	bne.n	1605c <z_unpend_all+0x8>
}
   16074:	bd38      	pop	{r3, r4, r5, pc}

00016076 <z_sched_wake>:
{
   16076:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1607a:	4606      	mov	r6, r0
   1607c:	4688      	mov	r8, r1
   1607e:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
   16080:	2300      	movs	r3, #0
	__asm__ volatile(
   16082:	f04f 0220 	mov.w	r2, #32
   16086:	f3ef 8511 	mrs	r5, BASEPRI
   1608a:	f382 8812 	msr	BASEPRI_MAX, r2
   1608e:	f3bf 8f6f 	isb	sy
	bool ret = false;
   16092:	4699      	mov	r9, r3
   16094:	e01b      	b.n	160ce <z_sched_wake+0x58>
   16096:	f8c0 80ac 	str.w	r8, [r0, #172]	; 0xac
	thread->base.swap_data = data;
   1609a:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   1609c:	f7ff fe7b 	bl	15d96 <pended_on_thread>
   160a0:	4621      	mov	r1, r4
   160a2:	f7ff feb8 	bl	15e16 <z_priq_dumb_remove>
   160a6:	7b63      	ldrb	r3, [r4, #13]
   160a8:	f023 0302 	bic.w	r3, r3, #2
   160ac:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   160ae:	2300      	movs	r3, #0
   160b0:	60a3      	str	r3, [r4, #8]
   160b2:	f104 0018 	add.w	r0, r4, #24
   160b6:	f000 f82c 	bl	16112 <z_abort_timeout>
			ready_thread(thread);
   160ba:	4620      	mov	r0, r4
   160bc:	f7fa fa40 	bl	10540 <ready_thread>
			ret = true;
   160c0:	f04f 0901 	mov.w	r9, #1
	__asm__ volatile(
   160c4:	f385 8811 	msr	BASEPRI, r5
   160c8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   160cc:	2301      	movs	r3, #1
   160ce:	b933      	cbnz	r3, 160de <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
   160d0:	4630      	mov	r0, r6
   160d2:	f7ff fecb 	bl	15e6c <z_priq_dumb_best>
		if (thread != NULL) {
   160d6:	4604      	mov	r4, r0
   160d8:	2800      	cmp	r0, #0
   160da:	d1dc      	bne.n	16096 <z_sched_wake+0x20>
   160dc:	e7f2      	b.n	160c4 <z_sched_wake+0x4e>
}
   160de:	4648      	mov	r0, r9
   160e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000160e4 <remove_timeout>:
{
   160e4:	b538      	push	{r3, r4, r5, lr}
   160e6:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   160e8:	f7fa fd44 	bl	10b74 <next>
   160ec:	b148      	cbz	r0, 16102 <remove_timeout+0x1e>
   160ee:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   160f0:	6920      	ldr	r0, [r4, #16]
   160f2:	6965      	ldr	r5, [r4, #20]
   160f4:	6913      	ldr	r3, [r2, #16]
   160f6:	6951      	ldr	r1, [r2, #20]
   160f8:	181b      	adds	r3, r3, r0
   160fa:	eb45 0101 	adc.w	r1, r5, r1
   160fe:	6113      	str	r3, [r2, #16]
   16100:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   16102:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   16104:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   16106:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   16108:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1610a:	2300      	movs	r3, #0
   1610c:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   1610e:	6063      	str	r3, [r4, #4]
}
   16110:	bd38      	pop	{r3, r4, r5, pc}

00016112 <z_abort_timeout>:
{
   16112:	b570      	push	{r4, r5, r6, lr}
   16114:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   16116:	2300      	movs	r3, #0
	__asm__ volatile(
   16118:	f04f 0220 	mov.w	r2, #32
   1611c:	f3ef 8611 	mrs	r6, BASEPRI
   16120:	f382 8812 	msr	BASEPRI_MAX, r2
   16124:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   16128:	f06f 0015 	mvn.w	r0, #21
   1612c:	e008      	b.n	16140 <z_abort_timeout+0x2e>
			remove_timeout(to);
   1612e:	4620      	mov	r0, r4
   16130:	f7ff ffd8 	bl	160e4 <remove_timeout>
			ret = 0;
   16134:	4628      	mov	r0, r5
	__asm__ volatile(
   16136:	f386 8811 	msr	BASEPRI, r6
   1613a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   1613e:	2301      	movs	r3, #1
   16140:	461d      	mov	r5, r3
   16142:	b91b      	cbnz	r3, 1614c <z_abort_timeout+0x3a>
	return node->next != NULL;
   16144:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   16146:	2b00      	cmp	r3, #0
   16148:	d1f1      	bne.n	1612e <z_abort_timeout+0x1c>
   1614a:	e7f4      	b.n	16136 <z_abort_timeout+0x24>
}
   1614c:	bd70      	pop	{r4, r5, r6, pc}

0001614e <z_get_next_timeout_expiry>:
{
   1614e:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   16150:	2300      	movs	r3, #0
	__asm__ volatile(
   16152:	f04f 0220 	mov.w	r2, #32
   16156:	f3ef 8411 	mrs	r4, BASEPRI
   1615a:	f382 8812 	msr	BASEPRI_MAX, r2
   1615e:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   16162:	f04f 30ff 	mov.w	r0, #4294967295
	LOCKED(&timeout_lock) {
   16166:	b93b      	cbnz	r3, 16178 <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
   16168:	f7fa fd1c 	bl	10ba4 <next_timeout>
	__asm__ volatile(
   1616c:	f384 8811 	msr	BASEPRI, r4
   16170:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   16174:	2301      	movs	r3, #1
   16176:	e7f6      	b.n	16166 <z_get_next_timeout_expiry+0x18>
}
   16178:	bd10      	pop	{r4, pc}

0001617a <z_set_timeout_expiry>:
{
   1617a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1617c:	4606      	mov	r6, r0
   1617e:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   16180:	2300      	movs	r3, #0
	__asm__ volatile(
   16182:	f04f 0220 	mov.w	r2, #32
   16186:	f3ef 8511 	mrs	r5, BASEPRI
   1618a:	f382 8812 	msr	BASEPRI_MAX, r2
   1618e:	f3bf 8f6f 	isb	sy
   16192:	e00a      	b.n	161aa <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
   16194:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   16196:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1619a:	2801      	cmp	r0, #1
   1619c:	dd00      	ble.n	161a0 <z_set_timeout_expiry+0x26>
   1619e:	b97c      	cbnz	r4, 161c0 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   161a0:	f385 8811 	msr	BASEPRI, r5
   161a4:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   161a8:	2301      	movs	r3, #1
   161aa:	461c      	mov	r4, r3
   161ac:	b97b      	cbnz	r3, 161ce <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
   161ae:	f7fa fcf9 	bl	10ba4 <next_timeout>
			      || (ticks <= next_to);
   161b2:	f1b0 3fff 	cmp.w	r0, #4294967295
   161b6:	d0ed      	beq.n	16194 <z_set_timeout_expiry+0x1a>
   161b8:	42b0      	cmp	r0, r6
   161ba:	dbec      	blt.n	16196 <z_set_timeout_expiry+0x1c>
   161bc:	2401      	movs	r4, #1
   161be:	e7ea      	b.n	16196 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   161c0:	4639      	mov	r1, r7
   161c2:	42b0      	cmp	r0, r6
   161c4:	bfa8      	it	ge
   161c6:	4630      	movge	r0, r6
   161c8:	f7f3 ff24 	bl	a014 <sys_clock_set_timeout>
   161cc:	e7e8      	b.n	161a0 <z_set_timeout_expiry+0x26>
}
   161ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000161d0 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   161d0:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   161d2:	f7fa fe19 	bl	10e08 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   161d6:	bd08      	pop	{r3, pc}

000161d8 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   161d8:	b900      	cbnz	r0, 161dc <z_impl_k_busy_wait+0x4>
   161da:	4770      	bx	lr
{
   161dc:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   161de:	f7f0 f9f1 	bl	65c4 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   161e2:	bd08      	pop	{r3, pc}

000161e4 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   161e4:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   161e6:	f1b1 3fff 	cmp.w	r1, #4294967295
   161ea:	bf08      	it	eq
   161ec:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   161f0:	d024      	beq.n	1623c <sys_clock_timeout_end_calc+0x58>
   161f2:	4604      	mov	r4, r0
   161f4:	460d      	mov	r5, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   161f6:	ea54 0105 	orrs.w	r1, r4, r5
   161fa:	d00d      	beq.n	16218 <sys_clock_timeout_end_calc+0x34>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   161fc:	f06f 0101 	mvn.w	r1, #1
   16200:	1a0a      	subs	r2, r1, r0
   16202:	f04f 31ff 	mov.w	r1, #4294967295
   16206:	eb61 0305 	sbc.w	r3, r1, r5
   1620a:	2a00      	cmp	r2, #0
   1620c:	f173 0100 	sbcs.w	r1, r3, #0
   16210:	db05      	blt.n	1621e <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   16212:	4610      	mov	r0, r2
   16214:	4619      	mov	r1, r3
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   16216:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   16218:	f7fa fdf6 	bl	10e08 <sys_clock_tick_get>
   1621c:	e7fb      	b.n	16216 <sys_clock_timeout_end_calc+0x32>
		return sys_clock_tick_get() + MAX(1, dt);
   1621e:	f7fa fdf3 	bl	10e08 <sys_clock_tick_get>
   16222:	4623      	mov	r3, r4
   16224:	462a      	mov	r2, r5
   16226:	2c01      	cmp	r4, #1
   16228:	f175 0400 	sbcs.w	r4, r5, #0
   1622c:	db03      	blt.n	16236 <sys_clock_timeout_end_calc+0x52>
   1622e:	18c0      	adds	r0, r0, r3
   16230:	eb42 0101 	adc.w	r1, r2, r1
   16234:	e7ef      	b.n	16216 <sys_clock_timeout_end_calc+0x32>
   16236:	2301      	movs	r3, #1
   16238:	2200      	movs	r2, #0
   1623a:	e7f8      	b.n	1622e <sys_clock_timeout_end_calc+0x4a>
		return UINT64_MAX;
   1623c:	f04f 30ff 	mov.w	r0, #4294967295
   16240:	4601      	mov	r1, r0
   16242:	e7e8      	b.n	16216 <sys_clock_timeout_end_calc+0x32>

00016244 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
   16244:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   16246:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
   16248:	2300      	movs	r3, #0
   1624a:	6303      	str	r3, [r0, #48]	; 0x30
   1624c:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   16250:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   16252:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
   16254:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   16256:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
   16258:	6343      	str	r3, [r0, #52]	; 0x34
}
   1625a:	4770      	bx	lr

0001625c <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1625c:	b510      	push	{r4, lr}
   1625e:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   16260:	f7ff ff57 	bl	16112 <z_abort_timeout>

	if (inactive) {
   16264:	b9a0      	cbnz	r0, 16290 <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
   16266:	6a63      	ldr	r3, [r4, #36]	; 0x24
   16268:	b10b      	cbz	r3, 1626e <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1626a:	4620      	mov	r0, r4
   1626c:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   1626e:	f104 0018 	add.w	r0, r4, #24
   16272:	f7ff fe9d 	bl	15fb0 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   16276:	b158      	cbz	r0, 16290 <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
   16278:	f7ff fdff 	bl	15e7a <z_ready_thread>
	__asm__ volatile(
   1627c:	f04f 0320 	mov.w	r3, #32
   16280:	f3ef 8011 	mrs	r0, BASEPRI
   16284:	f383 8812 	msr	BASEPRI_MAX, r3
   16288:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1628c:	f7ff fdae 	bl	15dec <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
   16290:	bd10      	pop	{r4, pc}

00016292 <z_heap_aligned_alloc>:
{
   16292:	b5d0      	push	{r4, r6, r7, lr}
   16294:	b082      	sub	sp, #8
   16296:	4604      	mov	r4, r0
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   16298:	2000      	movs	r0, #0
   1629a:	2304      	movs	r3, #4
   1629c:	18d2      	adds	r2, r2, r3
   1629e:	d20e      	bcs.n	162be <z_heap_aligned_alloc+0x2c>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   162a0:	b978      	cbnz	r0, 162c2 <z_heap_aligned_alloc+0x30>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   162a2:	2600      	movs	r6, #0
   162a4:	2700      	movs	r7, #0
   162a6:	e9cd 6700 	strd	r6, r7, [sp]
   162aa:	f041 0104 	orr.w	r1, r1, #4
   162ae:	4620      	mov	r0, r4
   162b0:	f7ff fb73 	bl	1599a <k_heap_aligned_alloc>
	if (mem == NULL) {
   162b4:	b108      	cbz	r0, 162ba <z_heap_aligned_alloc+0x28>
	*heap_ref = heap;
   162b6:	f840 4b04 	str.w	r4, [r0], #4
}
   162ba:	b002      	add	sp, #8
   162bc:	bdd0      	pop	{r4, r6, r7, pc}
   162be:	2001      	movs	r0, #1
   162c0:	e7ee      	b.n	162a0 <z_heap_aligned_alloc+0xe>
		return NULL;
   162c2:	2000      	movs	r0, #0
   162c4:	e7f9      	b.n	162ba <z_heap_aligned_alloc+0x28>

000162c6 <k_free>:
	if (ptr != NULL) {
   162c6:	b130      	cbz	r0, 162d6 <k_free+0x10>
{
   162c8:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   162ca:	1f01      	subs	r1, r0, #4
   162cc:	f850 0c04 	ldr.w	r0, [r0, #-4]
   162d0:	f7ff fbb9 	bl	15a46 <k_heap_free>
}
   162d4:	bd08      	pop	{r3, pc}
   162d6:	4770      	bx	lr

000162d8 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   162d8:	4770      	bx	lr
	...

000162dc <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   162dc:	f7f3 bf72 	b.w	a1c4 <SystemInit>
