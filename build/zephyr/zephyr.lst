
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20003660 	.word	0x20003660
}
   4:	00004685 	.word	0x00004685
   8:	0000d271 	.word	0x0000d271
   c:	0000463d 	.word	0x0000463d
  10:	0000463d 	.word	0x0000463d
  14:	0000463d 	.word	0x0000463d
  18:	0000463d 	.word	0x0000463d
	...
  2c:	00003d81 	.word	0x00003d81
  30:	0000463d 	.word	0x0000463d
  34:	00000000 	.word	0x00000000
  38:	00003d29 	.word	0x00003d29
  3c:	0000463d 	.word	0x0000463d

00000040 <_irq_vector_table>:
  40:	00003e6d 00003e6d 00003e6d 00003e6d     m>..m>..m>..m>..
  50:	00003e6d 00003e6d 00003e6d 00003e6d     m>..m>..m>..m>..
  60:	00003e6d 00003e6d 00003e6d 00003e6d     m>..m>..m>..m>..
  70:	00003e6d 00003e6d 00003e6d 00003e6d     m>..m>..m>..m>..
  80:	00003e6d 00003e6d 00003e6d 00003e6d     m>..m>..m>..m>..
  90:	00003e6d 00003e6d 00003e6d 00003e6d     m>..m>..m>..m>..
  a0:	00003e6d 00003e6d 00003e6d 00003e6d     m>..m>..m>..m>..
  b0:	00003e6d 00003e6d 00003e6d 00003e6d     m>..m>..m>..m>..
  c0:	00003e6d 00003e6d 00003e6d 00003e6d     m>..m>..m>..m>..
  d0:	00003e6d 00003e6d 00003e6d 00003e6d     m>..m>..m>..m>..
  e0:	00003e6d 00003e6d 00003e6d 00003e6d     m>..m>..m>..m>..
  f0:	00003e6d 00003e6d 00003e6d 00003e6d     m>..m>..m>..m>..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b96c 	b.w	3f0 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9e08      	ldr	r6, [sp, #32]
     136:	460d      	mov	r5, r1
     138:	4604      	mov	r4, r0
     13a:	468e      	mov	lr, r1
     13c:	2b00      	cmp	r3, #0
     13e:	f040 8082 	bne.w	246 <__data_size+0x29>
     142:	428a      	cmp	r2, r1
     144:	4617      	mov	r7, r2
     146:	d946      	bls.n	1d6 <CONFIG_IDLE_STACK_SIZE+0x96>
     148:	fab2 f282 	clz	r2, r2
     14c:	b14a      	cbz	r2, 162 <CONFIG_IDLE_STACK_SIZE+0x22>
     14e:	f1c2 0120 	rsb	r1, r2, #32
     152:	fa05 f302 	lsl.w	r3, r5, r2
     156:	fa20 f101 	lsr.w	r1, r0, r1
     15a:	4097      	lsls	r7, r2
     15c:	ea41 0e03 	orr.w	lr, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 4817 	mov.w	r8, r7, lsr #16
     166:	0c23      	lsrs	r3, r4, #16
     168:	fbbe fcf8 	udiv	ip, lr, r8
     16c:	b2b9      	uxth	r1, r7
     16e:	fb08 ee1c 	mls	lr, r8, ip, lr
     172:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     176:	fb0c f001 	mul.w	r0, ip, r1
     17a:	4298      	cmp	r0, r3
     17c:	d90a      	bls.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     17e:	18fb      	adds	r3, r7, r3
     180:	f10c 35ff 	add.w	r5, ip, #4294967295
     184:	f080 8116 	bcs.w	3b4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb4>
     188:	4298      	cmp	r0, r3
     18a:	f240 8113 	bls.w	3b4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb4>
     18e:	f1ac 0c02 	sub.w	ip, ip, #2
     192:	443b      	add	r3, r7
     194:	1a1b      	subs	r3, r3, r0
     196:	b2a4      	uxth	r4, r4
     198:	fbb3 f0f8 	udiv	r0, r3, r8
     19c:	fb08 3310 	mls	r3, r8, r0, r3
     1a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a4:	fb00 f101 	mul.w	r1, r0, r1
     1a8:	42a1      	cmp	r1, r4
     1aa:	d909      	bls.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     1ac:	193c      	adds	r4, r7, r4
     1ae:	f100 33ff 	add.w	r3, r0, #4294967295
     1b2:	f080 8101 	bcs.w	3b8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb8>
     1b6:	42a1      	cmp	r1, r4
     1b8:	f240 80fe 	bls.w	3b8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb8>
     1bc:	3802      	subs	r0, #2
     1be:	443c      	add	r4, r7
     1c0:	1a64      	subs	r4, r4, r1
     1c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1c6:	2100      	movs	r1, #0
     1c8:	b11e      	cbz	r6, 1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     1ca:	40d4      	lsrs	r4, r2
     1cc:	2300      	movs	r3, #0
     1ce:	e9c6 4300 	strd	r4, r3, [r6]
     1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d6:	b902      	cbnz	r2, 1da <CONFIG_IDLE_STACK_SIZE+0x9a>
     1d8:	deff      	udf	#255	; 0xff
     1da:	fab2 f282 	clz	r2, r2
     1de:	2a00      	cmp	r2, #0
     1e0:	d14f      	bne.n	282 <__data_size+0x65>
     1e2:	1bcb      	subs	r3, r1, r7
     1e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e8:	fa1f f887 	uxth.w	r8, r7
     1ec:	2101      	movs	r1, #1
     1ee:	fbb3 fcfe 	udiv	ip, r3, lr
     1f2:	0c25      	lsrs	r5, r4, #16
     1f4:	fb0e 331c 	mls	r3, lr, ip, r3
     1f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1fc:	fb08 f30c 	mul.w	r3, r8, ip
     200:	42ab      	cmp	r3, r5
     202:	d907      	bls.n	214 <CONFIG_IDLE_STACK_SIZE+0xd4>
     204:	197d      	adds	r5, r7, r5
     206:	f10c 30ff 	add.w	r0, ip, #4294967295
     20a:	d202      	bcs.n	212 <CONFIG_IDLE_STACK_SIZE+0xd2>
     20c:	42ab      	cmp	r3, r5
     20e:	f200 80e7 	bhi.w	3e0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe0>
     212:	4684      	mov	ip, r0
     214:	1aed      	subs	r5, r5, r3
     216:	b2a3      	uxth	r3, r4
     218:	fbb5 f0fe 	udiv	r0, r5, lr
     21c:	fb0e 5510 	mls	r5, lr, r0, r5
     220:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     224:	fb08 f800 	mul.w	r8, r8, r0
     228:	45a0      	cmp	r8, r4
     22a:	d907      	bls.n	23c <__data_size+0x1f>
     22c:	193c      	adds	r4, r7, r4
     22e:	f100 33ff 	add.w	r3, r0, #4294967295
     232:	d202      	bcs.n	23a <__data_size+0x1d>
     234:	45a0      	cmp	r8, r4
     236:	f200 80d7 	bhi.w	3e8 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS>
     23a:	4618      	mov	r0, r3
     23c:	eba4 0408 	sub.w	r4, r4, r8
     240:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     244:	e7c0      	b.n	1c8 <CONFIG_IDLE_STACK_SIZE+0x88>
     246:	428b      	cmp	r3, r1
     248:	d908      	bls.n	25c <__data_size+0x3f>
     24a:	2e00      	cmp	r6, #0
     24c:	f000 80af 	beq.w	3ae <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xae>
     250:	2100      	movs	r1, #0
     252:	e9c6 0500 	strd	r0, r5, [r6]
     256:	4608      	mov	r0, r1
     258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25c:	fab3 f183 	clz	r1, r3
     260:	2900      	cmp	r1, #0
     262:	d14b      	bne.n	2fc <__data_size+0xdf>
     264:	42ab      	cmp	r3, r5
     266:	d302      	bcc.n	26e <__data_size+0x51>
     268:	4282      	cmp	r2, r0
     26a:	f200 80b7 	bhi.w	3dc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xdc>
     26e:	1a84      	subs	r4, r0, r2
     270:	eb65 0303 	sbc.w	r3, r5, r3
     274:	2001      	movs	r0, #1
     276:	469e      	mov	lr, r3
     278:	2e00      	cmp	r6, #0
     27a:	d0aa      	beq.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     27c:	e9c6 4e00 	strd	r4, lr, [r6]
     280:	e7a7      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     282:	f1c2 0c20 	rsb	ip, r2, #32
     286:	fa01 f302 	lsl.w	r3, r1, r2
     28a:	4097      	lsls	r7, r2
     28c:	fa20 f00c 	lsr.w	r0, r0, ip
     290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     294:	fa21 fc0c 	lsr.w	ip, r1, ip
     298:	4318      	orrs	r0, r3
     29a:	fbbc f1fe 	udiv	r1, ip, lr
     29e:	0c05      	lsrs	r5, r0, #16
     2a0:	fb0e cc11 	mls	ip, lr, r1, ip
     2a4:	fa1f f887 	uxth.w	r8, r7
     2a8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ac:	fb01 f308 	mul.w	r3, r1, r8
     2b0:	42ab      	cmp	r3, r5
     2b2:	fa04 f402 	lsl.w	r4, r4, r2
     2b6:	d909      	bls.n	2cc <__data_size+0xaf>
     2b8:	197d      	adds	r5, r7, r5
     2ba:	f101 3cff 	add.w	ip, r1, #4294967295
     2be:	f080 808b 	bcs.w	3d8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd8>
     2c2:	42ab      	cmp	r3, r5
     2c4:	f240 8088 	bls.w	3d8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd8>
     2c8:	3902      	subs	r1, #2
     2ca:	443d      	add	r5, r7
     2cc:	1aeb      	subs	r3, r5, r3
     2ce:	b285      	uxth	r5, r0
     2d0:	fbb3 f0fe 	udiv	r0, r3, lr
     2d4:	fb0e 3310 	mls	r3, lr, r0, r3
     2d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2dc:	fb00 f308 	mul.w	r3, r0, r8
     2e0:	42ab      	cmp	r3, r5
     2e2:	d907      	bls.n	2f4 <__data_size+0xd7>
     2e4:	197d      	adds	r5, r7, r5
     2e6:	f100 3cff 	add.w	ip, r0, #4294967295
     2ea:	d271      	bcs.n	3d0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd0>
     2ec:	42ab      	cmp	r3, r5
     2ee:	d96f      	bls.n	3d0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd0>
     2f0:	3802      	subs	r0, #2
     2f2:	443d      	add	r5, r7
     2f4:	1aeb      	subs	r3, r5, r3
     2f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2fa:	e778      	b.n	1ee <CONFIG_IDLE_STACK_SIZE+0xae>
     2fc:	f1c1 0c20 	rsb	ip, r1, #32
     300:	408b      	lsls	r3, r1
     302:	fa22 f70c 	lsr.w	r7, r2, ip
     306:	431f      	orrs	r7, r3
     308:	fa20 f40c 	lsr.w	r4, r0, ip
     30c:	fa05 f301 	lsl.w	r3, r5, r1
     310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     314:	fa25 f50c 	lsr.w	r5, r5, ip
     318:	431c      	orrs	r4, r3
     31a:	0c23      	lsrs	r3, r4, #16
     31c:	fbb5 f9fe 	udiv	r9, r5, lr
     320:	fa1f f887 	uxth.w	r8, r7
     324:	fb0e 5519 	mls	r5, lr, r9, r5
     328:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     32c:	fb09 fa08 	mul.w	sl, r9, r8
     330:	45aa      	cmp	sl, r5
     332:	fa02 f201 	lsl.w	r2, r2, r1
     336:	fa00 f301 	lsl.w	r3, r0, r1
     33a:	d908      	bls.n	34e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4e>
     33c:	197d      	adds	r5, r7, r5
     33e:	f109 30ff 	add.w	r0, r9, #4294967295
     342:	d247      	bcs.n	3d4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd4>
     344:	45aa      	cmp	sl, r5
     346:	d945      	bls.n	3d4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd4>
     348:	f1a9 0902 	sub.w	r9, r9, #2
     34c:	443d      	add	r5, r7
     34e:	eba5 050a 	sub.w	r5, r5, sl
     352:	b2a4      	uxth	r4, r4
     354:	fbb5 f0fe 	udiv	r0, r5, lr
     358:	fb0e 5510 	mls	r5, lr, r0, r5
     35c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     360:	fb00 f808 	mul.w	r8, r0, r8
     364:	45a0      	cmp	r8, r4
     366:	d907      	bls.n	378 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x78>
     368:	193c      	adds	r4, r7, r4
     36a:	f100 35ff 	add.w	r5, r0, #4294967295
     36e:	d22d      	bcs.n	3cc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xcc>
     370:	45a0      	cmp	r8, r4
     372:	d92b      	bls.n	3cc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xcc>
     374:	3802      	subs	r0, #2
     376:	443c      	add	r4, r7
     378:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     37c:	eba4 0408 	sub.w	r4, r4, r8
     380:	fba0 8902 	umull	r8, r9, r0, r2
     384:	454c      	cmp	r4, r9
     386:	46c6      	mov	lr, r8
     388:	464d      	mov	r5, r9
     38a:	d319      	bcc.n	3c0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc0>
     38c:	d016      	beq.n	3bc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbc>
     38e:	b15e      	cbz	r6, 3a8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa8>
     390:	ebb3 020e 	subs.w	r2, r3, lr
     394:	eb64 0405 	sbc.w	r4, r4, r5
     398:	fa04 fc0c 	lsl.w	ip, r4, ip
     39c:	40ca      	lsrs	r2, r1
     39e:	ea4c 0202 	orr.w	r2, ip, r2
     3a2:	40cc      	lsrs	r4, r1
     3a4:	e9c6 2400 	strd	r2, r4, [r6]
     3a8:	2100      	movs	r1, #0
     3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3ae:	4631      	mov	r1, r6
     3b0:	4630      	mov	r0, r6
     3b2:	e70e      	b.n	1d2 <CONFIG_IDLE_STACK_SIZE+0x92>
     3b4:	46ac      	mov	ip, r5
     3b6:	e6ed      	b.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     3b8:	4618      	mov	r0, r3
     3ba:	e701      	b.n	1c0 <CONFIG_IDLE_STACK_SIZE+0x80>
     3bc:	4543      	cmp	r3, r8
     3be:	d2e6      	bcs.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     3c0:	ebb8 0e02 	subs.w	lr, r8, r2
     3c4:	eb69 0507 	sbc.w	r5, r9, r7
     3c8:	3801      	subs	r0, #1
     3ca:	e7e0      	b.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     3cc:	4628      	mov	r0, r5
     3ce:	e7d3      	b.n	378 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x78>
     3d0:	4660      	mov	r0, ip
     3d2:	e78f      	b.n	2f4 <__data_size+0xd7>
     3d4:	4681      	mov	r9, r0
     3d6:	e7ba      	b.n	34e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4e>
     3d8:	4661      	mov	r1, ip
     3da:	e777      	b.n	2cc <__data_size+0xaf>
     3dc:	4608      	mov	r0, r1
     3de:	e74b      	b.n	278 <__data_size+0x5b>
     3e0:	f1ac 0c02 	sub.w	ip, ip, #2
     3e4:	443d      	add	r5, r7
     3e6:	e715      	b.n	214 <CONFIG_IDLE_STACK_SIZE+0xd4>
     3e8:	3802      	subs	r0, #2
     3ea:	443c      	add	r4, r7
     3ec:	e726      	b.n	23c <__data_size+0x1f>
     3ee:	bf00      	nop

000003f0 <__aeabi_idiv0>:
     3f0:	4770      	bx	lr
     3f2:	bf00      	nop

000003f4 <interrupt_handler>:
struct ring_buf ringbuf;
uint8_t ring_buffer[RING_BUF_SIZE];


static void interrupt_handler(const struct device *dev, void *user_data)
{
     3f4:	b510      	push	{r4, lr}
     3f6:	b090      	sub	sp, #64	; 0x40
     3f8:	4604      	mov	r4, r0
	ARG_UNUSED(user_data);

	while (uart_irq_update(dev) && uart_irq_is_pending(dev)) {
     3fa:	e01b      	b.n	434 <CONFIG_FLASH_SIZE+0x34>
		if (uart_irq_rx_ready(dev)) {
			int recv_len, rb_len;
			uint8_t buffer[64];
			size_t len = MIN(ring_buf_space_get(&ringbuf),
     3fc:	4826      	ldr	r0, [pc, #152]	; (498 <CONFIG_FLASH_SIZE+0x98>)
     3fe:	f00c f8d0 	bl	c5a2 <ring_buf_space_get>
     402:	4602      	mov	r2, r0
     404:	e02f      	b.n	466 <CONFIG_FLASH_SIZE+0x66>
					 sizeof(buffer));

			recv_len = uart_fifo_read(dev, buffer, len);
			if (recv_len < 0/*Substituir pelo menor valor do protocolo*/) {
                //NACK  /()
				recv_len = 0;
     406:	2200      	movs	r2, #0
     408:	e036      	b.n	478 <CONFIG_FLASH_SIZE+0x78>
     40a:	2200      	movs	r2, #0
     40c:	e034      	b.n	478 <CONFIG_FLASH_SIZE+0x78>
 * @retval -ENOTSUP if API is not enabled.
 */
static inline int uart_irq_tx_ready(const struct device *dev)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
     40e:	68a3      	ldr	r3, [r4, #8]
		(const struct uart_driver_api *)dev->api;

	if (api->irq_tx_ready == NULL) {
     410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     412:	b113      	cbz	r3, 41a <CONFIG_FLASH_SIZE+0x1a>
		return -ENOSYS;
	}

	return api->irq_tx_ready(dev);
     414:	4620      	mov	r0, r4
     416:	4798      	blx	r3
				uart_irq_tx_enable(dev);
			}
		}


		if (uart_irq_tx_ready(dev)) {
     418:	b160      	cbz	r0, 434 <CONFIG_FLASH_SIZE+0x34>
			uint8_t buffer[64];
			int rb_len, send_len;

			rb_len = ring_buf_get(&ringbuf, buffer, sizeof(buffer));
     41a:	2240      	movs	r2, #64	; 0x40
     41c:	4669      	mov	r1, sp
     41e:	481e      	ldr	r0, [pc, #120]	; (498 <CONFIG_FLASH_SIZE+0x98>)
     420:	f00c f96a 	bl	c6f8 <ring_buf_get>
			if (!rb_len) {
     424:	4602      	mov	r2, r0
     426:	b128      	cbz	r0, 434 <CONFIG_FLASH_SIZE+0x34>
	const struct uart_driver_api *api =
     428:	68a3      	ldr	r3, [r4, #8]
	if (api->fifo_fill == NULL) {
     42a:	695b      	ldr	r3, [r3, #20]
     42c:	b113      	cbz	r3, 434 <CONFIG_FLASH_SIZE+0x34>
	return api->fifo_fill(dev, tx_data, size);
     42e:	4669      	mov	r1, sp
     430:	4620      	mov	r0, r4
     432:	4798      	blx	r3
__syscall int uart_irq_update(const struct device *dev);

static inline int z_impl_uart_irq_update(const struct device *dev)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
     434:	68a3      	ldr	r3, [r4, #8]
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
     436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     438:	b113      	cbz	r3, 440 <CONFIG_FLASH_SIZE+0x40>
		return -ENOSYS;
	}
	return api->irq_update(dev);
     43a:	4620      	mov	r0, r4
     43c:	4798      	blx	r3
	while (uart_irq_update(dev) && uart_irq_is_pending(dev)) {
     43e:	b340      	cbz	r0, 492 <CONFIG_FLASH_SIZE+0x92>
	const struct uart_driver_api *api =
     440:	68a3      	ldr	r3, [r4, #8]
	if (api->irq_is_pending == NULL) {
     442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     444:	b113      	cbz	r3, 44c <CONFIG_FLASH_SIZE+0x4c>
	return api->irq_is_pending(dev);
     446:	4620      	mov	r0, r4
     448:	4798      	blx	r3
     44a:	b310      	cbz	r0, 492 <CONFIG_FLASH_SIZE+0x92>
	const struct uart_driver_api *api =
     44c:	68a3      	ldr	r3, [r4, #8]
	if (api->irq_rx_ready == NULL) {
     44e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     450:	b11b      	cbz	r3, 45a <CONFIG_FLASH_SIZE+0x5a>
	return api->irq_rx_ready(dev);
     452:	4620      	mov	r0, r4
     454:	4798      	blx	r3
		if (uart_irq_rx_ready(dev)) {
     456:	2800      	cmp	r0, #0
     458:	d0d9      	beq.n	40e <CONFIG_FLASH_SIZE+0xe>
			size_t len = MIN(ring_buf_space_get(&ringbuf),
     45a:	480f      	ldr	r0, [pc, #60]	; (498 <CONFIG_FLASH_SIZE+0x98>)
     45c:	f00c f8a1 	bl	c5a2 <ring_buf_space_get>
     460:	283f      	cmp	r0, #63	; 0x3f
     462:	d9cb      	bls.n	3fc <interrupt_handler+0x8>
     464:	2240      	movs	r2, #64	; 0x40
	const struct uart_driver_api *api =
     466:	68a3      	ldr	r3, [r4, #8]
	if (api->fifo_read == NULL) {
     468:	699b      	ldr	r3, [r3, #24]
     46a:	2b00      	cmp	r3, #0
     46c:	d0cb      	beq.n	406 <CONFIG_FLASH_SIZE+0x6>
	return api->fifo_read(dev, rx_data, size);
     46e:	4669      	mov	r1, sp
     470:	4620      	mov	r0, r4
     472:	4798      	blx	r3
			if (recv_len < 0/*Substituir pelo menor valor do protocolo*/) {
     474:	1e02      	subs	r2, r0, #0
     476:	dbc8      	blt.n	40a <CONFIG_FLASH_SIZE+0xa>
			rb_len = ring_buf_put(&ringbuf, buffer, recv_len);
     478:	4669      	mov	r1, sp
     47a:	4807      	ldr	r0, [pc, #28]	; (498 <CONFIG_FLASH_SIZE+0x98>)
     47c:	f00c f8d2 	bl	c624 <ring_buf_put>
			if (rb_len) {
     480:	2800      	cmp	r0, #0
     482:	d0c4      	beq.n	40e <CONFIG_FLASH_SIZE+0xe>
	const struct uart_driver_api *api =
     484:	68a3      	ldr	r3, [r4, #8]
	if (api->irq_tx_enable != NULL) {
     486:	69db      	ldr	r3, [r3, #28]
     488:	2b00      	cmp	r3, #0
     48a:	d0c0      	beq.n	40e <CONFIG_FLASH_SIZE+0xe>
		api->irq_tx_enable(dev);
     48c:	4620      	mov	r0, r4
     48e:	4798      	blx	r3
     490:	e7bd      	b.n	40e <CONFIG_FLASH_SIZE+0xe>
            
			/*ECO PARA TESTES*/ send_len = uart_fifo_fill(dev, buffer, rb_len);
            /*tratar a resposta e encamiar para os estados*/
		}
	}
}
     492:	b010      	add	sp, #64	; 0x40
     494:	bd10      	pop	{r4, pc}
     496:	bf00      	nop
     498:	20000cb0 	.word	0x20000cb0

0000049c <configureUSB>:



void configureUSB(){
     49c:	b510      	push	{r4, lr}
     49e:	b082      	sub	sp, #8
    const struct device *dev;
	uint32_t baudrate, dtr = 0U;
     4a0:	2300      	movs	r3, #0
     4a2:	9300      	str	r3, [sp, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
     4a4:	4828      	ldr	r0, [pc, #160]	; (548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>)
     4a6:	f00d fde4 	bl	e072 <z_device_ready>
     4aa:	b118      	cbz	r0, 4b4 <configureUSB+0x18>
	int ret;
	dev = DEVICE_DT_GET_ONE(zephyr_cdc_acm_uart);
	if (!device_is_ready(dev)) {
		return;
	}
	ret = usb_enable(NULL);
     4ac:	2000      	movs	r0, #0
     4ae:	f002 fa31 	bl	2914 <usb_enable>
	if (ret != 0) {
     4b2:	b108      	cbz	r0, 4b8 <configureUSB+0x1c>

	ret = uart_line_ctrl_get(dev, UART_LINE_CTRL_BAUD_RATE, &baudrate);
	uart_irq_callback_set(dev, interrupt_handler);
	/* Enable rx interrupts */
	uart_irq_rx_enable(dev);
     4b4:	b002      	add	sp, #8
     4b6:	bd10      	pop	{r4, pc}
				 uint32_t size,
				 void *data)
{
	__ASSERT(size < RING_BUFFER_MAX_SIZE, RING_BUFFER_SIZE_ASSERT_MSG);

	memset(buf, 0, sizeof(struct ring_buf));
     4b8:	4c24      	ldr	r4, [pc, #144]	; (54c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x64>)
     4ba:	221c      	movs	r2, #28
     4bc:	2100      	movs	r1, #0
     4be:	4620      	mov	r0, r4
     4c0:	f00c ff94 	bl	d3ec <memset>
	buf->size = size;
     4c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
     4c8:	6123      	str	r3, [r4, #16]
	buf->buf.buf32 = (uint32_t *)data;
     4ca:	4b21      	ldr	r3, [pc, #132]	; (550 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x68>)
     4cc:	6163      	str	r3, [r4, #20]
	if (is_power_of_two(size)) {
		buf->mask = size - 1U;
     4ce:	f240 33ff 	movw	r3, #1023	; 0x3ff
     4d2:	61a3      	str	r3, [r4, #24]

static inline int z_impl_uart_line_ctrl_get(const struct device *dev,
					    uint32_t ctrl, uint32_t *val)
{
#ifdef CONFIG_UART_LINE_CTRL
	const struct uart_driver_api *api =
     4d4:	4b1c      	ldr	r3, [pc, #112]	; (548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>)
     4d6:	689b      	ldr	r3, [r3, #8]
		(const struct uart_driver_api *)dev->api;

	if (api->line_ctrl_get == NULL) {
     4d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
     4da:	b11b      	cbz	r3, 4e4 <configureUSB+0x48>
		return -ENOSYS;
	}
	return api->line_ctrl_get(dev, ctrl, val);
     4dc:	466a      	mov	r2, sp
     4de:	2104      	movs	r1, #4
     4e0:	4819      	ldr	r0, [pc, #100]	; (548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>)
     4e2:	4798      	blx	r3
		if (dtr) {
     4e4:	9b00      	ldr	r3, [sp, #0]
     4e6:	b92b      	cbnz	r3, 4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     4e8:	f640 40cd 	movw	r0, #3277	; 0xccd
     4ec:	2100      	movs	r1, #0
     4ee:	f00a fe95 	bl	b21c <z_impl_k_sleep>
		uart_line_ctrl_get(dev, UART_LINE_CTRL_DTR, &dtr);
     4f2:	e7ef      	b.n	4d4 <configureUSB+0x38>
	const struct uart_driver_api *api =
     4f4:	4b14      	ldr	r3, [pc, #80]	; (548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>)
     4f6:	689b      	ldr	r3, [r3, #8]
	if (api->line_ctrl_set == NULL) {
     4f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
     4fa:	b11b      	cbz	r3, 504 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x1c>
	return api->line_ctrl_set(dev, ctrl, val);
     4fc:	2201      	movs	r2, #1
     4fe:	2108      	movs	r1, #8
     500:	4811      	ldr	r0, [pc, #68]	; (548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>)
     502:	4798      	blx	r3
	const struct uart_driver_api *api =
     504:	4b10      	ldr	r3, [pc, #64]	; (548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>)
     506:	689b      	ldr	r3, [r3, #8]
	if (api->line_ctrl_set == NULL) {
     508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
     50a:	b11b      	cbz	r3, 514 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c>
	return api->line_ctrl_set(dev, ctrl, val);
     50c:	2201      	movs	r2, #1
     50e:	2110      	movs	r1, #16
     510:	480d      	ldr	r0, [pc, #52]	; (548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>)
     512:	4798      	blx	r3
		arch_syscall_invoke1(*(uintptr_t *)&usec_to_wait, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
     514:	480f      	ldr	r0, [pc, #60]	; (554 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6c>)
     516:	f00e f95d 	bl	e7d4 <z_impl_k_busy_wait>
	const struct uart_driver_api *api =
     51a:	4b0b      	ldr	r3, [pc, #44]	; (548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>)
     51c:	689c      	ldr	r4, [r3, #8]
	if (api->line_ctrl_get == NULL) {
     51e:	6d23      	ldr	r3, [r4, #80]	; 0x50
     520:	b11b      	cbz	r3, 52a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x42>
	return api->line_ctrl_get(dev, ctrl, val);
     522:	aa01      	add	r2, sp, #4
     524:	2101      	movs	r1, #1
     526:	4808      	ldr	r0, [pc, #32]	; (548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>)
     528:	4798      	blx	r3
	if ((api != NULL) && (api->irq_callback_set != NULL)) {
     52a:	b12c      	cbz	r4, 538 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x50>
     52c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     52e:	b11b      	cbz	r3, 538 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x50>
		api->irq_callback_set(dev, cb, user_data);
     530:	2200      	movs	r2, #0
     532:	4909      	ldr	r1, [pc, #36]	; (558 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x70>)
     534:	4804      	ldr	r0, [pc, #16]	; (548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>)
     536:	4798      	blx	r3
	const struct uart_driver_api *api =
     538:	4b03      	ldr	r3, [pc, #12]	; (548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>)
     53a:	689b      	ldr	r3, [r3, #8]
	if (api->irq_rx_enable != NULL) {
     53c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     53e:	2b00      	cmp	r3, #0
     540:	d0b8      	beq.n	4b4 <configureUSB+0x18>
		api->irq_rx_enable(dev);
     542:	4801      	ldr	r0, [pc, #4]	; (548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>)
     544:	4798      	blx	r3
     546:	e7b5      	b.n	4b4 <configureUSB+0x18>
     548:	0000ea9c 	.word	0x0000ea9c
     54c:	20000cb0 	.word	0x20000cb0
     550:	200008b0 	.word	0x200008b0
     554:	000f4240 	.word	0x000f4240
     558:	000003f5 	.word	0x000003f5

0000055c <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
     55c:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
     55e:	680b      	ldr	r3, [r1, #0]
     560:	3301      	adds	r3, #1
     562:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     564:	4b01      	ldr	r3, [pc, #4]	; (56c <char_out+0x10>)
     566:	681b      	ldr	r3, [r3, #0]
     568:	4798      	blx	r3
}
     56a:	bd08      	pop	{r3, pc}
     56c:	20000000 	.word	0x20000000

00000570 <__printk_hook_install>:
	_char_out = fn;
     570:	4b01      	ldr	r3, [pc, #4]	; (578 <__printk_hook_install+0x8>)
     572:	6018      	str	r0, [r3, #0]
}
     574:	4770      	bx	lr
     576:	bf00      	nop
     578:	20000000 	.word	0x20000000

0000057c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     57c:	b500      	push	{lr}
     57e:	b083      	sub	sp, #12
     580:	4602      	mov	r2, r0
     582:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     584:	2100      	movs	r1, #0
     586:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     588:	a901      	add	r1, sp, #4
     58a:	4803      	ldr	r0, [pc, #12]	; (598 <vprintk+0x1c>)
     58c:	f000 f8c8 	bl	720 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     590:	b003      	add	sp, #12
     592:	f85d fb04 	ldr.w	pc, [sp], #4
     596:	bf00      	nop
     598:	0000055d 	.word	0x0000055d

0000059c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     59c:	b510      	push	{r4, lr}
     59e:	b084      	sub	sp, #16
     5a0:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
     5a2:	9001      	str	r0, [sp, #4]
     5a4:	9102      	str	r1, [sp, #8]
     5a6:	2100      	movs	r1, #0
     5a8:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
     5aa:	a901      	add	r1, sp, #4
     5ac:	4805      	ldr	r0, [pc, #20]	; (5c4 <vsnprintk+0x28>)
     5ae:	f000 f8b7 	bl	720 <cbvprintf>

	if (ctx.count < ctx.max) {
     5b2:	9b03      	ldr	r3, [sp, #12]
     5b4:	9a02      	ldr	r2, [sp, #8]
     5b6:	4293      	cmp	r3, r2
     5b8:	da01      	bge.n	5be <vsnprintk+0x22>
		str[ctx.count] = '\0';
     5ba:	2200      	movs	r2, #0
     5bc:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
     5be:	9803      	ldr	r0, [sp, #12]
     5c0:	b004      	add	sp, #16
     5c2:	bd10      	pop	{r4, pc}
     5c4:	0000bc55 	.word	0x0000bc55

000005c8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     5c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     5cc:	b083      	sub	sp, #12
     5ce:	4604      	mov	r4, r0
     5d0:	4608      	mov	r0, r1
     5d2:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     5d4:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     5d6:	f013 0f08 	tst.w	r3, #8
     5da:	d105      	bne.n	5e8 <process_event+0x20>
     5dc:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     5e0:	2300      	movs	r3, #0
     5e2:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     5e4:	9301      	str	r3, [sp, #4]
}
     5e6:	e069      	b.n	6bc <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
     5e8:	2901      	cmp	r1, #1
     5ea:	d009      	beq.n	600 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     5ec:	f043 0320 	orr.w	r3, r3, #32
     5f0:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     5f2:	f385 8811 	msr	BASEPRI, r5
     5f6:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     5fa:	b003      	add	sp, #12
     5fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     600:	f043 0310 	orr.w	r3, r3, #16
     604:	8323      	strh	r3, [r4, #24]
     606:	e7f4      	b.n	5f2 <process_event+0x2a>
			evt = process_recheck(mgr);
     608:	4620      	mov	r0, r4
     60a:	f00b fb7e 	bl	bd0a <process_recheck>
     60e:	e057      	b.n	6c0 <process_event+0xf8>
			res = mgr->last_res;
     610:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
     614:	464a      	mov	r2, r9
     616:	4669      	mov	r1, sp
     618:	4620      	mov	r0, r4
     61a:	f00b fb8f 	bl	bd3c <process_complete>
		onoff_transition_fn transit = NULL;
     61e:	2700      	movs	r7, #0
     620:	e05a      	b.n	6d8 <process_event+0x110>
			transit = mgr->transitions->start;
     622:	6923      	ldr	r3, [r4, #16]
     624:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
     626:	2106      	movs	r1, #6
     628:	4620      	mov	r0, r4
     62a:	f00b fb47 	bl	bcbc <set_state>
		res = 0;
     62e:	f04f 0900 	mov.w	r9, #0
     632:	e051      	b.n	6d8 <process_event+0x110>
			transit = mgr->transitions->stop;
     634:	6923      	ldr	r3, [r4, #16]
     636:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
     638:	2104      	movs	r1, #4
     63a:	4620      	mov	r0, r4
     63c:	f00b fb3e 	bl	bcbc <set_state>
		res = 0;
     640:	f04f 0900 	mov.w	r9, #0
     644:	e048      	b.n	6d8 <process_event+0x110>
			transit = mgr->transitions->reset;
     646:	6923      	ldr	r3, [r4, #16]
     648:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
     64a:	2105      	movs	r1, #5
     64c:	4620      	mov	r0, r4
     64e:	f00b fb35 	bl	bcbc <set_state>
		res = 0;
     652:	f04f 0900 	mov.w	r9, #0
     656:	e03f      	b.n	6d8 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
     658:	2200      	movs	r2, #0
     65a:	e046      	b.n	6ea <process_event+0x122>
     65c:	2200      	movs	r2, #0
     65e:	e044      	b.n	6ea <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     660:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     664:	8323      	strh	r3, [r4, #24]
     666:	f385 8811 	msr	BASEPRI, r5
     66a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     66e:	2900      	cmp	r1, #0
     670:	d144      	bne.n	6fc <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     672:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     674:	b12b      	cbz	r3, 682 <process_event+0xba>
				notify_all(mgr, &clients, state, res);
     676:	464b      	mov	r3, r9
     678:	4642      	mov	r2, r8
     67a:	4669      	mov	r1, sp
     67c:	4620      	mov	r0, r4
     67e:	f00b fbd3 	bl	be28 <notify_all>
			if (transit != NULL) {
     682:	b117      	cbz	r7, 68a <process_event+0xc2>
				transit(mgr, transition_complete);
     684:	4925      	ldr	r1, [pc, #148]	; (71c <process_event+0x154>)
     686:	4620      	mov	r0, r4
     688:	47b8      	blx	r7
	__asm__ volatile(
     68a:	f04f 0320 	mov.w	r3, #32
     68e:	f3ef 8511 	mrs	r5, BASEPRI
     692:	f383 8812 	msr	BASEPRI_MAX, r3
     696:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     69a:	8b23      	ldrh	r3, [r4, #24]
     69c:	f023 0308 	bic.w	r3, r3, #8
     6a0:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     6a2:	8b23      	ldrh	r3, [r4, #24]
     6a4:	f013 0f10 	tst.w	r3, #16
     6a8:	d02e      	beq.n	708 <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     6aa:	f023 0310 	bic.w	r3, r3, #16
     6ae:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     6b0:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     6b2:	8b26      	ldrh	r6, [r4, #24]
     6b4:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
     6b8:	2800      	cmp	r0, #0
     6ba:	d09a      	beq.n	5f2 <process_event+0x2a>
		if (evt == EVT_RECHECK) {
     6bc:	2802      	cmp	r0, #2
     6be:	d0a3      	beq.n	608 <process_event+0x40>
		if (evt == EVT_NOP) {
     6c0:	2800      	cmp	r0, #0
     6c2:	d096      	beq.n	5f2 <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
     6c4:	2801      	cmp	r0, #1
     6c6:	d0a3      	beq.n	610 <process_event+0x48>
		} else if (evt == EVT_START) {
     6c8:	2803      	cmp	r0, #3
     6ca:	d0aa      	beq.n	622 <process_event+0x5a>
		} else if (evt == EVT_STOP) {
     6cc:	2804      	cmp	r0, #4
     6ce:	d0b1      	beq.n	634 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
     6d0:	2805      	cmp	r0, #5
     6d2:	d0b8      	beq.n	646 <process_event+0x7e>
		onoff_transition_fn transit = NULL;
     6d4:	2700      	movs	r7, #0
		res = 0;
     6d6:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     6d8:	8b23      	ldrh	r3, [r4, #24]
     6da:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     6de:	45b0      	cmp	r8, r6
     6e0:	d0ba      	beq.n	658 <process_event+0x90>
     6e2:	68a2      	ldr	r2, [r4, #8]
     6e4:	2a00      	cmp	r2, #0
     6e6:	d0b9      	beq.n	65c <process_event+0x94>
     6e8:	2201      	movs	r2, #1
		if (do_monitors
     6ea:	4611      	mov	r1, r2
     6ec:	2a00      	cmp	r2, #0
     6ee:	d1b7      	bne.n	660 <process_event+0x98>
     6f0:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     6f2:	2a00      	cmp	r2, #0
     6f4:	d1b4      	bne.n	660 <process_event+0x98>
		    || (transit != NULL)) {
     6f6:	2f00      	cmp	r7, #0
     6f8:	d1b2      	bne.n	660 <process_event+0x98>
     6fa:	e7d2      	b.n	6a2 <process_event+0xda>
				notify_monitors(mgr, state, res);
     6fc:	464a      	mov	r2, r9
     6fe:	4641      	mov	r1, r8
     700:	4620      	mov	r0, r4
     702:	f00b fae3 	bl	bccc <notify_monitors>
     706:	e7b4      	b.n	672 <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     708:	f013 0f20 	tst.w	r3, #32
     70c:	d004      	beq.n	718 <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     70e:	f023 0320 	bic.w	r3, r3, #32
     712:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
     714:	2002      	movs	r0, #2
     716:	e7cc      	b.n	6b2 <process_event+0xea>
		evt = EVT_NOP;
     718:	2000      	movs	r0, #0
     71a:	e7ca      	b.n	6b2 <process_event+0xea>
     71c:	0000be57 	.word	0x0000be57

00000720 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     724:	b093      	sub	sp, #76	; 0x4c
     726:	4606      	mov	r6, r0
     728:	460d      	mov	r5, r1
     72a:	4692      	mov	sl, r2
     72c:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     72e:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     730:	f89a 0000 	ldrb.w	r0, [sl]
     734:	2800      	cmp	r0, #0
     736:	f000 84d6 	beq.w	10e6 <CONFIG_FPROTECT_BLOCK_SIZE+0xe6>
		if (*fp != '%') {
     73a:	2825      	cmp	r0, #37	; 0x25
     73c:	d008      	beq.n	750 <cbvprintf+0x30>
			OUTC(*fp++);
     73e:	f10a 0a01 	add.w	sl, sl, #1
     742:	4629      	mov	r1, r5
     744:	47b0      	blx	r6
     746:	2800      	cmp	r0, #0
     748:	f2c0 84ce 	blt.w	10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>
     74c:	3401      	adds	r4, #1
			continue;
     74e:	e7ef      	b.n	730 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
     750:	2300      	movs	r3, #0
     752:	9306      	str	r3, [sp, #24]
     754:	9307      	str	r3, [sp, #28]
     756:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
     758:	9308      	str	r3, [sp, #32]
     75a:	9309      	str	r3, [sp, #36]	; 0x24
     75c:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
     75e:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
     762:	f89a 3001 	ldrb.w	r3, [sl, #1]
     766:	2b25      	cmp	r3, #37	; 0x25
     768:	d001      	beq.n	76e <cbvprintf+0x4e>
	bool loop = true;
     76a:	2701      	movs	r7, #1
     76c:	e02c      	b.n	7c8 <cbvprintf+0xa8>
		conv->specifier = *sp++;
     76e:	f10a 0802 	add.w	r8, sl, #2
     772:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
     776:	e1a8      	b.n	aca <CONFIG_ISR_STACK_SIZE+0x2ca>
			conv->flag_dash = true;
     778:	f89d 3020 	ldrb.w	r3, [sp, #32]
     77c:	f043 0304 	orr.w	r3, r3, #4
     780:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
     784:	b1ff      	cbz	r7, 7c6 <cbvprintf+0xa6>
			++sp;
     786:	f108 0801 	add.w	r8, r8, #1
     78a:	e01c      	b.n	7c6 <cbvprintf+0xa6>
			conv->flag_plus = true;
     78c:	f89d 3020 	ldrb.w	r3, [sp, #32]
     790:	f043 0308 	orr.w	r3, r3, #8
     794:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     798:	e7f4      	b.n	784 <cbvprintf+0x64>
			conv->flag_space = true;
     79a:	f89d 3020 	ldrb.w	r3, [sp, #32]
     79e:	f043 0310 	orr.w	r3, r3, #16
     7a2:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     7a6:	e7ed      	b.n	784 <cbvprintf+0x64>
			conv->flag_hash = true;
     7a8:	f89d 3020 	ldrb.w	r3, [sp, #32]
     7ac:	f043 0320 	orr.w	r3, r3, #32
     7b0:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     7b4:	e7e6      	b.n	784 <cbvprintf+0x64>
			conv->flag_zero = true;
     7b6:	f89d 3020 	ldrb.w	r3, [sp, #32]
     7ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     7be:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     7c2:	e7df      	b.n	784 <cbvprintf+0x64>
		switch (*sp) {
     7c4:	2700      	movs	r7, #0
	} while (loop);
     7c6:	b34f      	cbz	r7, 81c <CONFIG_ISR_STACK_SIZE+0x1c>
		switch (*sp) {
     7c8:	f898 3000 	ldrb.w	r3, [r8]
     7cc:	3b20      	subs	r3, #32
     7ce:	2b10      	cmp	r3, #16
     7d0:	d8f8      	bhi.n	7c4 <cbvprintf+0xa4>
     7d2:	a201      	add	r2, pc, #4	; (adr r2, 7d8 <cbvprintf+0xb8>)
     7d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     7d8:	0000079b 	.word	0x0000079b
     7dc:	000007c5 	.word	0x000007c5
     7e0:	000007c5 	.word	0x000007c5
     7e4:	000007a9 	.word	0x000007a9
     7e8:	000007c5 	.word	0x000007c5
     7ec:	000007c5 	.word	0x000007c5
     7f0:	000007c5 	.word	0x000007c5
     7f4:	000007c5 	.word	0x000007c5
     7f8:	000007c5 	.word	0x000007c5
     7fc:	000007c5 	.word	0x000007c5
     800:	000007c5 	.word	0x000007c5
     804:	0000078d 	.word	0x0000078d
     808:	000007c5 	.word	0x000007c5
     80c:	00000779 	.word	0x00000779
     810:	000007c5 	.word	0x000007c5
     814:	000007c5 	.word	0x000007c5
     818:	000007b7 	.word	0x000007b7
	if (conv->flag_zero && conv->flag_dash) {
     81c:	f89d 3020 	ldrb.w	r3, [sp, #32]
     820:	f003 0344 	and.w	r3, r3, #68	; 0x44
     824:	2b44      	cmp	r3, #68	; 0x44
     826:	d06d      	beq.n	904 <CONFIG_ISR_STACK_SIZE+0x104>
	sp = extract_width(conv, sp);
     828:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
     82c:	f89d 3020 	ldrb.w	r3, [sp, #32]
     830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     834:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
     838:	f898 3000 	ldrb.w	r3, [r8]
     83c:	2b2a      	cmp	r3, #42	; 0x2a
     83e:	d068      	beq.n	912 <CONFIG_ISR_STACK_SIZE+0x112>
	size_t width = extract_decimal(&sp);
     840:	a805      	add	r0, sp, #20
     842:	f00b fde1 	bl	c408 <extract_decimal>
	if (sp != wp) {
     846:	9b05      	ldr	r3, [sp, #20]
     848:	4598      	cmp	r8, r3
     84a:	d012      	beq.n	872 <CONFIG_ISR_STACK_SIZE+0x72>
		conv->width_present = true;
     84c:	f89d 3020 	ldrb.w	r3, [sp, #32]
     850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     854:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
     858:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
     85a:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
     85e:	2800      	cmp	r0, #0
     860:	db60      	blt.n	924 <CONFIG_ISR_STACK_SIZE+0x124>
     862:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
     864:	4313      	orrs	r3, r2
     866:	f89d 2020 	ldrb.w	r2, [sp, #32]
     86a:	f363 0241 	bfi	r2, r3, #1, #1
     86e:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
     872:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
     874:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
     876:	781b      	ldrb	r3, [r3, #0]
     878:	2b2e      	cmp	r3, #46	; 0x2e
     87a:	bf14      	ite	ne
     87c:	2300      	movne	r3, #0
     87e:	2301      	moveq	r3, #1
     880:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     884:	f363 0241 	bfi	r2, r3, #1, #1
     888:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
     88c:	2b00      	cmp	r3, #0
     88e:	d04b      	beq.n	928 <CONFIG_ISR_STACK_SIZE+0x128>
	++sp;
     890:	9b05      	ldr	r3, [sp, #20]
     892:	1c5a      	adds	r2, r3, #1
     894:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
     896:	785b      	ldrb	r3, [r3, #1]
     898:	2b2a      	cmp	r3, #42	; 0x2a
     89a:	d048      	beq.n	92e <CONFIG_ISR_STACK_SIZE+0x12e>
	size_t prec = extract_decimal(&sp);
     89c:	a805      	add	r0, sp, #20
     89e:	f00b fdb3 	bl	c408 <extract_decimal>
	conv->prec_value = prec;
     8a2:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
     8a4:	f89d 3020 	ldrb.w	r3, [sp, #32]
     8a8:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
     8ac:	2800      	cmp	r0, #0
     8ae:	db47      	blt.n	940 <CONFIG_ISR_STACK_SIZE+0x140>
     8b0:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
     8b2:	4313      	orrs	r3, r2
     8b4:	f89d 2020 	ldrb.w	r2, [sp, #32]
     8b8:	f363 0241 	bfi	r2, r3, #1, #1
     8bc:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
     8c0:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
     8c4:	f898 3000 	ldrb.w	r3, [r8]
     8c8:	3b4c      	subs	r3, #76	; 0x4c
     8ca:	2b2e      	cmp	r3, #46	; 0x2e
     8cc:	f200 80dc 	bhi.w	a88 <CONFIG_ISR_STACK_SIZE+0x288>
     8d0:	e8df f003 	tbb	[pc, r3]
     8d4:	dadadaca 	.word	0xdadadaca
     8d8:	dadadada 	.word	0xdadadada
     8dc:	dadadada 	.word	0xdadadada
     8e0:	dadadada 	.word	0xdadadada
     8e4:	dadadada 	.word	0xdadadada
     8e8:	dadadada 	.word	0xdadadada
     8ec:	dadadada 	.word	0xdadadada
     8f0:	da6ada38 	.word	0xda6ada38
     8f4:	dadada51 	.word	0xdadada51
     8f8:	dadadada 	.word	0xdadadada
     8fc:	dadadac0 	.word	0xdadadac0
     900:	dada      	.short	0xdada
     902:	b6          	.byte	0xb6
     903:	00          	.byte	0x00
		conv->flag_zero = false;
     904:	f89d 3020 	ldrb.w	r3, [sp, #32]
     908:	f36f 1386 	bfc	r3, #6, #1
     90c:	f88d 3020 	strb.w	r3, [sp, #32]
     910:	e78a      	b.n	828 <CONFIG_ISR_STACK_SIZE+0x28>
		conv->width_star = true;
     912:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     916:	f043 0301 	orr.w	r3, r3, #1
     91a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
     91e:	4643      	mov	r3, r8
     920:	3301      	adds	r3, #1
     922:	e7a7      	b.n	874 <CONFIG_ISR_STACK_SIZE+0x74>
				      || (width != (size_t)conv->width_value));
     924:	2201      	movs	r2, #1
     926:	e79d      	b.n	864 <CONFIG_ISR_STACK_SIZE+0x64>
		return sp;
     928:	f8dd 8014 	ldr.w	r8, [sp, #20]
     92c:	e7ca      	b.n	8c4 <CONFIG_ISR_STACK_SIZE+0xc4>
		conv->prec_star = true;
     92e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     932:	f043 0304 	orr.w	r3, r3, #4
     936:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
     93a:	f102 0801 	add.w	r8, r2, #1
     93e:	e7c1      	b.n	8c4 <CONFIG_ISR_STACK_SIZE+0xc4>
			      || (prec != (size_t)conv->prec_value));
     940:	2201      	movs	r2, #1
     942:	e7b6      	b.n	8b2 <CONFIG_ISR_STACK_SIZE+0xb2>
		if (*++sp == 'h') {
     944:	f108 0201 	add.w	r2, r8, #1
     948:	f898 3001 	ldrb.w	r3, [r8, #1]
     94c:	2b68      	cmp	r3, #104	; 0x68
     94e:	d008      	beq.n	962 <CONFIG_ISR_STACK_SIZE+0x162>
			conv->length_mod = LENGTH_H;
     950:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     954:	2102      	movs	r1, #2
     956:	f361 03c6 	bfi	r3, r1, #3, #4
     95a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
     95e:	4690      	mov	r8, r2
     960:	e02b      	b.n	9ba <CONFIG_ISR_STACK_SIZE+0x1ba>
			conv->length_mod = LENGTH_HH;
     962:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     966:	2201      	movs	r2, #1
     968:	f362 03c6 	bfi	r3, r2, #3, #4
     96c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
     970:	f108 0802 	add.w	r8, r8, #2
     974:	e021      	b.n	9ba <CONFIG_ISR_STACK_SIZE+0x1ba>
		if (*++sp == 'l') {
     976:	f108 0201 	add.w	r2, r8, #1
     97a:	f898 3001 	ldrb.w	r3, [r8, #1]
     97e:	2b6c      	cmp	r3, #108	; 0x6c
     980:	d008      	beq.n	994 <CONFIG_ISR_STACK_SIZE+0x194>
			conv->length_mod = LENGTH_L;
     982:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     986:	2103      	movs	r1, #3
     988:	f361 03c6 	bfi	r3, r1, #3, #4
     98c:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
     990:	4690      	mov	r8, r2
     992:	e012      	b.n	9ba <CONFIG_ISR_STACK_SIZE+0x1ba>
			conv->length_mod = LENGTH_LL;
     994:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     998:	2204      	movs	r2, #4
     99a:	f362 03c6 	bfi	r3, r2, #3, #4
     99e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
     9a2:	f108 0802 	add.w	r8, r8, #2
     9a6:	e008      	b.n	9ba <CONFIG_ISR_STACK_SIZE+0x1ba>
		conv->length_mod = LENGTH_J;
     9a8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     9ac:	2205      	movs	r2, #5
     9ae:	f362 03c6 	bfi	r3, r2, #3, #4
     9b2:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     9b6:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
     9ba:	f818 3b01 	ldrb.w	r3, [r8], #1
     9be:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
     9c2:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
     9c6:	2a37      	cmp	r2, #55	; 0x37
     9c8:	f200 8150 	bhi.w	c6c <CONFIG_ISR_STACK_SIZE+0x46c>
     9cc:	e8df f012 	tbh	[pc, r2, lsl #1]
     9d0:	014e0126 	.word	0x014e0126
     9d4:	014e014e 	.word	0x014e014e
     9d8:	01260126 	.word	0x01260126
     9dc:	014e0126 	.word	0x014e0126
     9e0:	014e014e 	.word	0x014e014e
     9e4:	014e014e 	.word	0x014e014e
     9e8:	014e014e 	.word	0x014e014e
     9ec:	014e014e 	.word	0x014e014e
     9f0:	014e014e 	.word	0x014e014e
     9f4:	014e014e 	.word	0x014e014e
     9f8:	014e014e 	.word	0x014e014e
     9fc:	0113014e 	.word	0x0113014e
     a00:	014e014e 	.word	0x014e014e
     a04:	014e014e 	.word	0x014e014e
     a08:	014e014e 	.word	0x014e014e
     a0c:	014e014e 	.word	0x014e014e
     a10:	014e0126 	.word	0x014e0126
     a14:	00630113 	.word	0x00630113
     a18:	01260126 	.word	0x01260126
     a1c:	014e0126 	.word	0x014e0126
     a20:	014e0063 	.word	0x014e0063
     a24:	014e014e 	.word	0x014e014e
     a28:	012f014e 	.word	0x012f014e
     a2c:	013f0113 	.word	0x013f0113
     a30:	014e014e 	.word	0x014e014e
     a34:	014e013f 	.word	0x014e013f
     a38:	014e0113 	.word	0x014e0113
     a3c:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
     a40:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     a44:	2206      	movs	r2, #6
     a46:	f362 03c6 	bfi	r3, r2, #3, #4
     a4a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     a4e:	f108 0801 	add.w	r8, r8, #1
		break;
     a52:	e7b2      	b.n	9ba <CONFIG_ISR_STACK_SIZE+0x1ba>
		conv->length_mod = LENGTH_T;
     a54:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     a58:	2207      	movs	r2, #7
     a5a:	f362 03c6 	bfi	r3, r2, #3, #4
     a5e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     a62:	f108 0801 	add.w	r8, r8, #1
		break;
     a66:	e7a8      	b.n	9ba <CONFIG_ISR_STACK_SIZE+0x1ba>
		conv->length_mod = LENGTH_UPPER_L;
     a68:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     a6c:	2208      	movs	r2, #8
     a6e:	f362 03c6 	bfi	r3, r2, #3, #4
     a72:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     a76:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
     a7a:	f89d 3020 	ldrb.w	r3, [sp, #32]
     a7e:	f043 0302 	orr.w	r3, r3, #2
     a82:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
     a86:	e798      	b.n	9ba <CONFIG_ISR_STACK_SIZE+0x1ba>
		conv->length_mod = LENGTH_NONE;
     a88:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     a8c:	f36f 03c6 	bfc	r3, #3, #4
     a90:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
     a94:	e791      	b.n	9ba <CONFIG_ISR_STACK_SIZE+0x1ba>
		conv->specifier_cat = SPECIFIER_SINT;
     a96:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
     a9a:	2101      	movs	r1, #1
     a9c:	f361 0202 	bfi	r2, r1, #0, #3
     aa0:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
     aa4:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     aa8:	f002 0278 	and.w	r2, r2, #120	; 0x78
     aac:	2a40      	cmp	r2, #64	; 0x40
     aae:	f000 80aa 	beq.w	c06 <CONFIG_ISR_STACK_SIZE+0x406>
		if (conv->specifier == 'c') {
     ab2:	2b63      	cmp	r3, #99	; 0x63
     ab4:	f000 80ae 	beq.w	c14 <CONFIG_ISR_STACK_SIZE+0x414>
	conv->unsupported |= unsupported;
     ab8:	f89d 3020 	ldrb.w	r3, [sp, #32]
     abc:	f3c3 0240 	ubfx	r2, r3, #1, #1
     ac0:	4317      	orrs	r7, r2
     ac2:	f367 0341 	bfi	r3, r7, #1, #1
     ac6:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
     aca:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     ace:	f013 0f01 	tst.w	r3, #1
     ad2:	f000 80da 	beq.w	c8a <CONFIG_ISR_STACK_SIZE+0x48a>
			width = va_arg(ap, int);
     ad6:	9b03      	ldr	r3, [sp, #12]
     ad8:	1d1a      	adds	r2, r3, #4
     ada:	9203      	str	r2, [sp, #12]
     adc:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
     ade:	2f00      	cmp	r7, #0
     ae0:	f2c0 80cb 	blt.w	c7a <CONFIG_ISR_STACK_SIZE+0x47a>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
     ae4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     ae8:	f013 0f04 	tst.w	r3, #4
     aec:	f000 80df 	beq.w	cae <CONFIG_ISR_STACK_SIZE+0x4ae>
			int arg = va_arg(ap, int);
     af0:	9b03      	ldr	r3, [sp, #12]
     af2:	1d1a      	adds	r2, r3, #4
     af4:	9203      	str	r2, [sp, #12]
     af6:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
     afa:	f1bb 0f00 	cmp.w	fp, #0
     afe:	f2c0 80cd 	blt.w	c9c <CONFIG_ISR_STACK_SIZE+0x49c>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
     b02:	2300      	movs	r3, #0
     b04:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
     b06:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
     b08:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     b0c:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
     b10:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
     b14:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
     b18:	2b01      	cmp	r3, #1
     b1a:	f000 80d1 	beq.w	cc0 <CONFIG_ISR_STACK_SIZE+0x4c0>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
     b1e:	2b02      	cmp	r3, #2
     b20:	f000 8116 	beq.w	d50 <CONFIG_ISR_STACK_SIZE+0x550>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
     b24:	2b04      	cmp	r3, #4
     b26:	f000 8167 	beq.w	df8 <CONFIG_ISR_STACK_SIZE+0x5f8>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
     b2a:	2b03      	cmp	r3, #3
     b2c:	f000 817e 	beq.w	e2c <CONFIG_ISR_STACK_SIZE+0x62c>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
     b30:	f89d 9020 	ldrb.w	r9, [sp, #32]
     b34:	f019 0303 	ands.w	r3, r9, #3
     b38:	9302      	str	r3, [sp, #8]
     b3a:	f040 817d 	bne.w	e38 <CONFIG_ISR_STACK_SIZE+0x638>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
     b3e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
     b42:	3b25      	subs	r3, #37	; 0x25
     b44:	2b53      	cmp	r3, #83	; 0x53
     b46:	f200 8233 	bhi.w	fb0 <CONFIG_ISR_STACK_SIZE+0x7b0>
     b4a:	e8df f013 	tbh	[pc, r3, lsl #1]
     b4e:	0181      	.short	0x0181
     b50:	02310231 	.word	0x02310231
     b54:	02310231 	.word	0x02310231
     b58:	02310231 	.word	0x02310231
     b5c:	02310231 	.word	0x02310231
     b60:	02310231 	.word	0x02310231
     b64:	02310231 	.word	0x02310231
     b68:	02310231 	.word	0x02310231
     b6c:	02310231 	.word	0x02310231
     b70:	02310231 	.word	0x02310231
     b74:	02310231 	.word	0x02310231
     b78:	02310231 	.word	0x02310231
     b7c:	02310231 	.word	0x02310231
     b80:	02310231 	.word	0x02310231
     b84:	02310231 	.word	0x02310231
     b88:	02310231 	.word	0x02310231
     b8c:	02310231 	.word	0x02310231
     b90:	02310231 	.word	0x02310231
     b94:	02310231 	.word	0x02310231
     b98:	02310231 	.word	0x02310231
     b9c:	02310231 	.word	0x02310231
     ba0:	02310231 	.word	0x02310231
     ba4:	02310231 	.word	0x02310231
     ba8:	02310231 	.word	0x02310231
     bac:	02310231 	.word	0x02310231
     bb0:	02310231 	.word	0x02310231
     bb4:	023101c7 	.word	0x023101c7
     bb8:	02310231 	.word	0x02310231
     bbc:	02310231 	.word	0x02310231
     bc0:	02310231 	.word	0x02310231
     bc4:	02310231 	.word	0x02310231
     bc8:	01a10231 	.word	0x01a10231
     bcc:	023101ab 	.word	0x023101ab
     bd0:	02310231 	.word	0x02310231
     bd4:	01ab0231 	.word	0x01ab0231
     bd8:	02310231 	.word	0x02310231
     bdc:	02310231 	.word	0x02310231
     be0:	01c70208 	.word	0x01c70208
     be4:	023101ea 	.word	0x023101ea
     be8:	018f0231 	.word	0x018f0231
     bec:	01c70231 	.word	0x01c70231
     bf0:	02310231 	.word	0x02310231
     bf4:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
     bf6:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
     bfa:	2102      	movs	r1, #2
     bfc:	f361 0202 	bfi	r2, r1, #0, #3
     c00:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
     c04:	e74e      	b.n	aa4 <CONFIG_ISR_STACK_SIZE+0x2a4>
			conv->invalid = true;
     c06:	f89d 1020 	ldrb.w	r1, [sp, #32]
     c0a:	f041 0101 	orr.w	r1, r1, #1
     c0e:	f88d 1020 	strb.w	r1, [sp, #32]
     c12:	e74e      	b.n	ab2 <CONFIG_ISR_STACK_SIZE+0x2b2>
			unsupported = (conv->length_mod != LENGTH_NONE);
     c14:	1e17      	subs	r7, r2, #0
     c16:	bf18      	it	ne
     c18:	2701      	movne	r7, #1
     c1a:	e74d      	b.n	ab8 <CONFIG_ISR_STACK_SIZE+0x2b8>
		conv->specifier_cat = SPECIFIER_FP;
     c1c:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     c20:	2204      	movs	r2, #4
     c22:	f362 0302 	bfi	r3, r2, #0, #3
     c26:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
     c2a:	2701      	movs	r7, #1
			break;
     c2c:	e744      	b.n	ab8 <CONFIG_ISR_STACK_SIZE+0x2b8>
		conv->specifier_cat = SPECIFIER_PTR;
     c2e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     c32:	2203      	movs	r2, #3
     c34:	f362 0302 	bfi	r3, r2, #0, #3
     c38:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
     c3c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     c40:	f003 0378 	and.w	r3, r3, #120	; 0x78
     c44:	2b40      	cmp	r3, #64	; 0x40
     c46:	f47f af37 	bne.w	ab8 <CONFIG_ISR_STACK_SIZE+0x2b8>
			unsupported = true;
     c4a:	2701      	movs	r7, #1
     c4c:	e734      	b.n	ab8 <CONFIG_ISR_STACK_SIZE+0x2b8>
		conv->specifier_cat = SPECIFIER_PTR;
     c4e:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     c52:	2203      	movs	r2, #3
     c54:	f362 0302 	bfi	r3, r2, #0, #3
     c58:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
     c5c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     c60:	f013 0f78 	tst.w	r3, #120	; 0x78
     c64:	f43f af28 	beq.w	ab8 <CONFIG_ISR_STACK_SIZE+0x2b8>
			unsupported = true;
     c68:	2701      	movs	r7, #1
     c6a:	e725      	b.n	ab8 <CONFIG_ISR_STACK_SIZE+0x2b8>
		conv->invalid = true;
     c6c:	f89d 3020 	ldrb.w	r3, [sp, #32]
     c70:	f043 0301 	orr.w	r3, r3, #1
     c74:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
     c78:	e71e      	b.n	ab8 <CONFIG_ISR_STACK_SIZE+0x2b8>
				conv->flag_dash = true;
     c7a:	f89d 3020 	ldrb.w	r3, [sp, #32]
     c7e:	f043 0304 	orr.w	r3, r3, #4
     c82:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
     c86:	427f      	negs	r7, r7
     c88:	e72c      	b.n	ae4 <CONFIG_ISR_STACK_SIZE+0x2e4>
		} else if (conv->width_present) {
     c8a:	f99d 3020 	ldrsb.w	r3, [sp, #32]
     c8e:	2b00      	cmp	r3, #0
     c90:	db02      	blt.n	c98 <CONFIG_ISR_STACK_SIZE+0x498>
		int width = -1;
     c92:	f04f 37ff 	mov.w	r7, #4294967295
     c96:	e725      	b.n	ae4 <CONFIG_ISR_STACK_SIZE+0x2e4>
			width = conv->width_value;
     c98:	9f09      	ldr	r7, [sp, #36]	; 0x24
     c9a:	e723      	b.n	ae4 <CONFIG_ISR_STACK_SIZE+0x2e4>
				conv->prec_present = false;
     c9c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     ca0:	f36f 0341 	bfc	r3, #1, #1
     ca4:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
     ca8:	f04f 3bff 	mov.w	fp, #4294967295
     cac:	e729      	b.n	b02 <CONFIG_ISR_STACK_SIZE+0x302>
		} else if (conv->prec_present) {
     cae:	f013 0f02 	tst.w	r3, #2
     cb2:	d002      	beq.n	cba <CONFIG_ISR_STACK_SIZE+0x4ba>
			precision = conv->prec_value;
     cb4:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
     cb8:	e723      	b.n	b02 <CONFIG_ISR_STACK_SIZE+0x302>
		int precision = -1;
     cba:	f04f 3bff 	mov.w	fp, #4294967295
     cbe:	e720      	b.n	b02 <CONFIG_ISR_STACK_SIZE+0x302>
			switch (length_mod) {
     cc0:	1ecb      	subs	r3, r1, #3
     cc2:	2b04      	cmp	r3, #4
     cc4:	d804      	bhi.n	cd0 <CONFIG_ISR_STACK_SIZE+0x4d0>
     cc6:	e8df f003 	tbb	[pc, r3]
     cca:	1d0b      	.short	0x1d0b
     ccc:	3529      	.short	0x3529
     cce:	35          	.byte	0x35
     ccf:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     cd0:	9b03      	ldr	r3, [sp, #12]
     cd2:	1d1a      	adds	r2, r3, #4
     cd4:	9203      	str	r2, [sp, #12]
     cd6:	681a      	ldr	r2, [r3, #0]
     cd8:	17d3      	asrs	r3, r2, #31
     cda:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     cde:	e006      	b.n	cee <CONFIG_ISR_STACK_SIZE+0x4ee>
					value->sint = va_arg(ap, long);
     ce0:	9b03      	ldr	r3, [sp, #12]
     ce2:	1d1a      	adds	r2, r3, #4
     ce4:	9203      	str	r2, [sp, #12]
     ce6:	681a      	ldr	r2, [r3, #0]
     ce8:	17d3      	asrs	r3, r2, #31
     cea:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
     cee:	2901      	cmp	r1, #1
     cf0:	d028      	beq.n	d44 <CONFIG_ISR_STACK_SIZE+0x544>
			} else if (length_mod == LENGTH_H) {
     cf2:	2902      	cmp	r1, #2
     cf4:	f47f af1c 	bne.w	b30 <CONFIG_ISR_STACK_SIZE+0x330>
				value->sint = (short)value->sint;
     cf8:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
     cfc:	17d3      	asrs	r3, r2, #31
     cfe:	e9cd 2306 	strd	r2, r3, [sp, #24]
     d02:	e715      	b.n	b30 <CONFIG_ISR_STACK_SIZE+0x330>
					(sint_value_type)va_arg(ap, long long);
     d04:	9b03      	ldr	r3, [sp, #12]
     d06:	3307      	adds	r3, #7
     d08:	f023 0307 	bic.w	r3, r3, #7
     d0c:	f103 0208 	add.w	r2, r3, #8
     d10:	9203      	str	r2, [sp, #12]
     d12:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     d16:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     d1a:	e7e8      	b.n	cee <CONFIG_ISR_STACK_SIZE+0x4ee>
					(sint_value_type)va_arg(ap, intmax_t);
     d1c:	9b03      	ldr	r3, [sp, #12]
     d1e:	3307      	adds	r3, #7
     d20:	f023 0307 	bic.w	r3, r3, #7
     d24:	f103 0208 	add.w	r2, r3, #8
     d28:	9203      	str	r2, [sp, #12]
     d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     d2e:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     d32:	e7dc      	b.n	cee <CONFIG_ISR_STACK_SIZE+0x4ee>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     d34:	9b03      	ldr	r3, [sp, #12]
     d36:	1d1a      	adds	r2, r3, #4
     d38:	9203      	str	r2, [sp, #12]
     d3a:	681a      	ldr	r2, [r3, #0]
     d3c:	17d3      	asrs	r3, r2, #31
				value->sint =
     d3e:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     d42:	e7d4      	b.n	cee <CONFIG_ISR_STACK_SIZE+0x4ee>
				value->sint = (char)value->sint;
     d44:	f89d 3018 	ldrb.w	r3, [sp, #24]
     d48:	9306      	str	r3, [sp, #24]
     d4a:	2300      	movs	r3, #0
     d4c:	9307      	str	r3, [sp, #28]
     d4e:	e6ef      	b.n	b30 <CONFIG_ISR_STACK_SIZE+0x330>
			switch (length_mod) {
     d50:	1ecb      	subs	r3, r1, #3
     d52:	2b04      	cmp	r3, #4
     d54:	d804      	bhi.n	d60 <CONFIG_ISR_STACK_SIZE+0x560>
     d56:	e8df f003 	tbb	[pc, r3]
     d5a:	1f0b      	.short	0x1f0b
     d5c:	4135      	.short	0x4135
     d5e:	41          	.byte	0x41
     d5f:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
     d60:	9b03      	ldr	r3, [sp, #12]
     d62:	1d1a      	adds	r2, r3, #4
     d64:	9203      	str	r2, [sp, #12]
     d66:	681b      	ldr	r3, [r3, #0]
     d68:	9306      	str	r3, [sp, #24]
     d6a:	2300      	movs	r3, #0
     d6c:	9307      	str	r3, [sp, #28]
				break;
     d6e:	e01e      	b.n	dae <CONFIG_ISR_STACK_SIZE+0x5ae>
				    && (conv->specifier == 'c')) {
     d70:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
     d74:	2b63      	cmp	r3, #99	; 0x63
     d76:	d007      	beq.n	d88 <CONFIG_ISR_STACK_SIZE+0x588>
					value->uint = va_arg(ap, unsigned long);
     d78:	9b03      	ldr	r3, [sp, #12]
     d7a:	1d1a      	adds	r2, r3, #4
     d7c:	9203      	str	r2, [sp, #12]
     d7e:	681b      	ldr	r3, [r3, #0]
     d80:	9306      	str	r3, [sp, #24]
     d82:	2300      	movs	r3, #0
     d84:	9307      	str	r3, [sp, #28]
     d86:	e012      	b.n	dae <CONFIG_ISR_STACK_SIZE+0x5ae>
					value->uint = (wchar_t)va_arg(ap,
     d88:	9b03      	ldr	r3, [sp, #12]
     d8a:	1d1a      	adds	r2, r3, #4
     d8c:	9203      	str	r2, [sp, #12]
     d8e:	681b      	ldr	r3, [r3, #0]
     d90:	9306      	str	r3, [sp, #24]
     d92:	2300      	movs	r3, #0
     d94:	9307      	str	r3, [sp, #28]
     d96:	e00a      	b.n	dae <CONFIG_ISR_STACK_SIZE+0x5ae>
					(uint_value_type)va_arg(ap,
     d98:	9b03      	ldr	r3, [sp, #12]
     d9a:	3307      	adds	r3, #7
     d9c:	f023 0307 	bic.w	r3, r3, #7
     da0:	f103 0208 	add.w	r2, r3, #8
     da4:	9203      	str	r2, [sp, #12]
     da6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     daa:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
     dae:	2901      	cmp	r1, #1
     db0:	d01c      	beq.n	dec <CONFIG_ISR_STACK_SIZE+0x5ec>
			} else if (length_mod == LENGTH_H) {
     db2:	2902      	cmp	r1, #2
     db4:	f47f aebc 	bne.w	b30 <CONFIG_ISR_STACK_SIZE+0x330>
				value->uint = (unsigned short)value->uint;
     db8:	f8bd 3018 	ldrh.w	r3, [sp, #24]
     dbc:	9306      	str	r3, [sp, #24]
     dbe:	2300      	movs	r3, #0
     dc0:	9307      	str	r3, [sp, #28]
     dc2:	e6b5      	b.n	b30 <CONFIG_ISR_STACK_SIZE+0x330>
					(uint_value_type)va_arg(ap,
     dc4:	9b03      	ldr	r3, [sp, #12]
     dc6:	3307      	adds	r3, #7
     dc8:	f023 0307 	bic.w	r3, r3, #7
     dcc:	f103 0208 	add.w	r2, r3, #8
     dd0:	9203      	str	r2, [sp, #12]
     dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     dd6:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     dda:	e7e8      	b.n	dae <CONFIG_ISR_STACK_SIZE+0x5ae>
					(uint_value_type)va_arg(ap, size_t);
     ddc:	9b03      	ldr	r3, [sp, #12]
     dde:	1d1a      	adds	r2, r3, #4
     de0:	9203      	str	r2, [sp, #12]
     de2:	681b      	ldr	r3, [r3, #0]
				value->uint =
     de4:	9306      	str	r3, [sp, #24]
     de6:	2300      	movs	r3, #0
     de8:	9307      	str	r3, [sp, #28]
				break;
     dea:	e7e0      	b.n	dae <CONFIG_ISR_STACK_SIZE+0x5ae>
				value->uint = (unsigned char)value->uint;
     dec:	f89d 3018 	ldrb.w	r3, [sp, #24]
     df0:	9306      	str	r3, [sp, #24]
     df2:	2300      	movs	r3, #0
     df4:	9307      	str	r3, [sp, #28]
     df6:	e69b      	b.n	b30 <CONFIG_ISR_STACK_SIZE+0x330>
			if (length_mod == LENGTH_UPPER_L) {
     df8:	2908      	cmp	r1, #8
     dfa:	d00b      	beq.n	e14 <CONFIG_ISR_STACK_SIZE+0x614>
				value->dbl = va_arg(ap, double);
     dfc:	9b03      	ldr	r3, [sp, #12]
     dfe:	3307      	adds	r3, #7
     e00:	f023 0307 	bic.w	r3, r3, #7
     e04:	f103 0208 	add.w	r2, r3, #8
     e08:	9203      	str	r2, [sp, #12]
     e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
     e0e:	e9cd 2306 	strd	r2, r3, [sp, #24]
     e12:	e68d      	b.n	b30 <CONFIG_ISR_STACK_SIZE+0x330>
				value->ldbl = va_arg(ap, long double);
     e14:	9b03      	ldr	r3, [sp, #12]
     e16:	3307      	adds	r3, #7
     e18:	f023 0307 	bic.w	r3, r3, #7
     e1c:	f103 0208 	add.w	r2, r3, #8
     e20:	9203      	str	r2, [sp, #12]
     e22:	e9d3 2300 	ldrd	r2, r3, [r3]
     e26:	e9cd 2306 	strd	r2, r3, [sp, #24]
     e2a:	e681      	b.n	b30 <CONFIG_ISR_STACK_SIZE+0x330>
			value->ptr = va_arg(ap, void *);
     e2c:	9b03      	ldr	r3, [sp, #12]
     e2e:	1d1a      	adds	r2, r3, #4
     e30:	9203      	str	r2, [sp, #12]
     e32:	681b      	ldr	r3, [r3, #0]
     e34:	9306      	str	r3, [sp, #24]
     e36:	e67b      	b.n	b30 <CONFIG_ISR_STACK_SIZE+0x330>
			OUTS(sp, fp);
     e38:	4643      	mov	r3, r8
     e3a:	4652      	mov	r2, sl
     e3c:	4629      	mov	r1, r5
     e3e:	4630      	mov	r0, r6
     e40:	f00b fb5f 	bl	c502 <outs>
     e44:	2800      	cmp	r0, #0
     e46:	f2c0 814f 	blt.w	10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>
     e4a:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
     e4c:	46c2      	mov	sl, r8
			continue;
     e4e:	e46f      	b.n	730 <cbvprintf+0x10>
		case '%':
			OUTC('%');
     e50:	4629      	mov	r1, r5
     e52:	2025      	movs	r0, #37	; 0x25
     e54:	47b0      	blx	r6
     e56:	2800      	cmp	r0, #0
     e58:	f2c0 8146 	blt.w	10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>
     e5c:	3401      	adds	r4, #1
		char sign = 0;
     e5e:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
     e62:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
     e66:	f04f 0a00 	mov.w	sl, #0
			break;
     e6a:	e0a7      	b.n	fbc <CONFIG_ISR_STACK_SIZE+0x7bc>
		case 's': {
			bps = (const char *)value->ptr;
     e6c:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
     e70:	f1bb 0f00 	cmp.w	fp, #0
     e74:	db08      	blt.n	e88 <CONFIG_ISR_STACK_SIZE+0x688>
				len = strnlen(bps, precision);
     e76:	4659      	mov	r1, fp
     e78:	4650      	mov	r0, sl
     e7a:	f00c fa89 	bl	d390 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
     e7e:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
     e82:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
     e86:	e099      	b.n	fbc <CONFIG_ISR_STACK_SIZE+0x7bc>
				len = strlen(bps);
     e88:	4650      	mov	r0, sl
     e8a:	f00c fa79 	bl	d380 <strlen>
     e8e:	e7f6      	b.n	e7e <CONFIG_ISR_STACK_SIZE+0x67e>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     e90:	9b06      	ldr	r3, [sp, #24]
     e92:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
     e96:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
     e9a:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
     e9e:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
     ea2:	e08b      	b.n	fbc <CONFIG_ISR_STACK_SIZE+0x7bc>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
     ea4:	f019 0f08 	tst.w	r9, #8
     ea8:	d105      	bne.n	eb6 <CONFIG_ISR_STACK_SIZE+0x6b6>
				sign = '+';
			} else if (conv->flag_space) {
     eaa:	f019 0910 	ands.w	r9, r9, #16
     eae:	d004      	beq.n	eba <CONFIG_ISR_STACK_SIZE+0x6ba>
				sign = ' ';
     eb0:	f04f 0920 	mov.w	r9, #32
     eb4:	e001      	b.n	eba <CONFIG_ISR_STACK_SIZE+0x6ba>
				sign = '+';
     eb6:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
     eba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
     ebe:	2a00      	cmp	r2, #0
     ec0:	f173 0100 	sbcs.w	r1, r3, #0
     ec4:	db02      	blt.n	ecc <CONFIG_ISR_STACK_SIZE+0x6cc>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
     ec6:	e9cd 2306 	strd	r2, r3, [sp, #24]
     eca:	e009      	b.n	ee0 <CONFIG_ISR_STACK_SIZE+0x6e0>
				value->uint = (uint_value_type)-sint;
     ecc:	4252      	negs	r2, r2
     ece:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     ed2:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
     ed6:	f04f 092d 	mov.w	r9, #45	; 0x2d
     eda:	e001      	b.n	ee0 <CONFIG_ISR_STACK_SIZE+0x6e0>
		switch (conv->specifier) {
     edc:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
     ee0:	f10d 0346 	add.w	r3, sp, #70	; 0x46
     ee4:	9300      	str	r3, [sp, #0]
     ee6:	ab0c      	add	r3, sp, #48	; 0x30
     ee8:	aa08      	add	r2, sp, #32
     eea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
     eee:	f00b fa9e 	bl	c42e <encode_uint>
     ef2:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
     ef4:	f1bb 0f00 	cmp.w	fp, #0
     ef8:	f2c0 8090 	blt.w	101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
				size_t len = bpe - bps;
     efc:	f10d 0346 	add.w	r3, sp, #70	; 0x46
     f00:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
     f04:	f89d 2020 	ldrb.w	r2, [sp, #32]
     f08:	f36f 1286 	bfc	r2, #6, #1
     f0c:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
     f10:	459b      	cmp	fp, r3
     f12:	f240 8086 	bls.w	1022 <CONFIG_FPROTECT_BLOCK_SIZE+0x22>
					conv->pad0_value = precision - (int)len;
     f16:	ebab 0303 	sub.w	r3, fp, r3
     f1a:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
     f1c:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
     f20:	e04c      	b.n	fbc <CONFIG_ISR_STACK_SIZE+0x7bc>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
     f22:	9806      	ldr	r0, [sp, #24]
     f24:	b930      	cbnz	r0, f34 <CONFIG_ISR_STACK_SIZE+0x734>
		char sign = 0;
     f26:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
     f2a:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 10f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>
			bps = "(nil)";
     f2e:	f1ab 0a05 	sub.w	sl, fp, #5
     f32:	e043      	b.n	fbc <CONFIG_ISR_STACK_SIZE+0x7bc>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     f34:	f10d 0346 	add.w	r3, sp, #70	; 0x46
     f38:	9300      	str	r3, [sp, #0]
     f3a:	ab0c      	add	r3, sp, #48	; 0x30
     f3c:	aa08      	add	r2, sp, #32
     f3e:	2100      	movs	r1, #0
     f40:	f00b fa75 	bl	c42e <encode_uint>
     f44:	4682      	mov	sl, r0
				conv->altform_0c = true;
     f46:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     f4a:	f043 0310 	orr.w	r3, r3, #16
     f4e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
     f52:	2378      	movs	r3, #120	; 0x78
     f54:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
     f58:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
     f5c:	e7ca      	b.n	ef4 <CONFIG_ISR_STACK_SIZE+0x6f4>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
     f5e:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
     f60:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     f64:	f3c3 03c3 	ubfx	r3, r3, #3, #4
     f68:	2b07      	cmp	r3, #7
     f6a:	d806      	bhi.n	f7a <CONFIG_ISR_STACK_SIZE+0x77a>
     f6c:	e8df f003 	tbb	[pc, r3]
     f70:	100e0c04 	.word	0x100e0c04
     f74:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
     f78:	6014      	str	r4, [r2, #0]
		char sign = 0;
     f7a:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
     f7e:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
     f82:	f04f 0a00 	mov.w	sl, #0
}
     f86:	e019      	b.n	fbc <CONFIG_ISR_STACK_SIZE+0x7bc>
		*(signed char *)dp = (signed char)count;
     f88:	7014      	strb	r4, [r2, #0]
		break;
     f8a:	e7f6      	b.n	f7a <CONFIG_ISR_STACK_SIZE+0x77a>
		*(short *)dp = (short)count;
     f8c:	8014      	strh	r4, [r2, #0]
		break;
     f8e:	e7f4      	b.n	f7a <CONFIG_ISR_STACK_SIZE+0x77a>
		*(long *)dp = (long)count;
     f90:	6014      	str	r4, [r2, #0]
		break;
     f92:	e7f2      	b.n	f7a <CONFIG_ISR_STACK_SIZE+0x77a>
		*(long long *)dp = (long long)count;
     f94:	4620      	mov	r0, r4
     f96:	17e1      	asrs	r1, r4, #31
     f98:	e9c2 0100 	strd	r0, r1, [r2]
		break;
     f9c:	e7ed      	b.n	f7a <CONFIG_ISR_STACK_SIZE+0x77a>
		*(intmax_t *)dp = (intmax_t)count;
     f9e:	4620      	mov	r0, r4
     fa0:	17e1      	asrs	r1, r4, #31
     fa2:	e9c2 0100 	strd	r0, r1, [r2]
		break;
     fa6:	e7e8      	b.n	f7a <CONFIG_ISR_STACK_SIZE+0x77a>
		*(size_t *)dp = (size_t)count;
     fa8:	6014      	str	r4, [r2, #0]
		break;
     faa:	e7e6      	b.n	f7a <CONFIG_ISR_STACK_SIZE+0x77a>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     fac:	6014      	str	r4, [r2, #0]
		break;
     fae:	e7e4      	b.n	f7a <CONFIG_ISR_STACK_SIZE+0x77a>
		switch (conv->specifier) {
     fb0:	f8dd 9008 	ldr.w	r9, [sp, #8]
     fb4:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
     fb8:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
     fbc:	f1ba 0f00 	cmp.w	sl, #0
     fc0:	f000 808e 	beq.w	10e0 <CONFIG_FPROTECT_BLOCK_SIZE+0xe0>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
     fc4:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
     fc8:	f1b9 0f00 	cmp.w	r9, #0
     fcc:	d000      	beq.n	fd0 <CONFIG_ISR_STACK_SIZE+0x7d0>
			nj_len += 1U;
     fce:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
     fd0:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
     fd4:	f011 0f10 	tst.w	r1, #16
     fd8:	d026      	beq.n	1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
			nj_len += 2U;
     fda:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
     fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
     fde:	4413      	add	r3, r2
		if (conv->pad_fp) {
     fe0:	f011 0f40 	tst.w	r1, #64	; 0x40
     fe4:	d001      	beq.n	fea <CONFIG_ISR_STACK_SIZE+0x7ea>
			nj_len += conv->pad0_pre_exp;
     fe6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
     fe8:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
     fea:	2f00      	cmp	r7, #0
     fec:	dd32      	ble.n	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
			width -= (int)nj_len;
     fee:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
     ff0:	f89d 3020 	ldrb.w	r3, [sp, #32]
     ff4:	f013 0f04 	tst.w	r3, #4
     ff8:	d12c      	bne.n	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
     ffa:	f013 0f40 	tst.w	r3, #64	; 0x40
     ffe:	d018      	beq.n	1032 <CONFIG_FPROTECT_BLOCK_SIZE+0x32>
					if (sign != 0) {
    1000:	f1b9 0f00 	cmp.w	r9, #0
    1004:	d018      	beq.n	1038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>
						OUTC(sign);
    1006:	4629      	mov	r1, r5
    1008:	4648      	mov	r0, r9
    100a:	47b0      	blx	r6
    100c:	2800      	cmp	r0, #0
    100e:	db6b      	blt.n	10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>
    1010:	3401      	adds	r4, #1
						sign = 0;
    1012:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
    1016:	2330      	movs	r3, #48	; 0x30
    1018:	9302      	str	r3, [sp, #8]
    101a:	e00f      	b.n	103c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>
		const char *bpe = buf + sizeof(buf);
    101c:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    1020:	e7cc      	b.n	fbc <CONFIG_ISR_STACK_SIZE+0x7bc>
    1022:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    1026:	e7c9      	b.n	fbc <CONFIG_ISR_STACK_SIZE+0x7bc>
		} else if (conv->altform_0) {
    1028:	f011 0f08 	tst.w	r1, #8
    102c:	d0d6      	beq.n	fdc <CONFIG_ISR_STACK_SIZE+0x7dc>
			nj_len += 1U;
    102e:	3201      	adds	r2, #1
    1030:	e7d4      	b.n	fdc <CONFIG_ISR_STACK_SIZE+0x7dc>
				char pad = ' ';
    1032:	2320      	movs	r3, #32
    1034:	9302      	str	r3, [sp, #8]
    1036:	e001      	b.n	103c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>
					pad = '0';
    1038:	2330      	movs	r3, #48	; 0x30
    103a:	9302      	str	r3, [sp, #8]
    103c:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    103e:	1e5f      	subs	r7, r3, #1
    1040:	2b00      	cmp	r3, #0
    1042:	dd07      	ble.n	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
					OUTC(pad);
    1044:	4629      	mov	r1, r5
    1046:	9802      	ldr	r0, [sp, #8]
    1048:	47b0      	blx	r6
    104a:	2800      	cmp	r0, #0
    104c:	db4c      	blt.n	10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>
    104e:	3401      	adds	r4, #1
				while (width-- > 0) {
    1050:	463b      	mov	r3, r7
    1052:	e7f4      	b.n	103e <CONFIG_FPROTECT_BLOCK_SIZE+0x3e>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    1054:	f1b9 0f00 	cmp.w	r9, #0
    1058:	d005      	beq.n	1066 <CONFIG_FPROTECT_BLOCK_SIZE+0x66>
			OUTC(sign);
    105a:	4629      	mov	r1, r5
    105c:	4648      	mov	r0, r9
    105e:	47b0      	blx	r6
    1060:	2800      	cmp	r0, #0
    1062:	db41      	blt.n	10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>
    1064:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    1066:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    106a:	f3c3 1200 	ubfx	r2, r3, #4, #1
    106e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    1072:	4313      	orrs	r3, r2
    1074:	d005      	beq.n	1082 <CONFIG_FPROTECT_BLOCK_SIZE+0x82>
				OUTC('0');
    1076:	4629      	mov	r1, r5
    1078:	2030      	movs	r0, #48	; 0x30
    107a:	47b0      	blx	r6
    107c:	2800      	cmp	r0, #0
    107e:	db33      	blt.n	10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>
    1080:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    1082:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    1086:	f013 0f10 	tst.w	r3, #16
    108a:	d006      	beq.n	109a <CONFIG_FPROTECT_BLOCK_SIZE+0x9a>
				OUTC(conv->specifier);
    108c:	4629      	mov	r1, r5
    108e:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    1092:	47b0      	blx	r6
    1094:	2800      	cmp	r0, #0
    1096:	db27      	blt.n	10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>
    1098:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    109a:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
    109c:	f103 39ff 	add.w	r9, r3, #4294967295
    10a0:	2b00      	cmp	r3, #0
    10a2:	dd07      	ble.n	10b4 <CONFIG_FPROTECT_BLOCK_SIZE+0xb4>
				OUTC('0');
    10a4:	4629      	mov	r1, r5
    10a6:	2030      	movs	r0, #48	; 0x30
    10a8:	47b0      	blx	r6
    10aa:	2800      	cmp	r0, #0
    10ac:	db1c      	blt.n	10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>
    10ae:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    10b0:	464b      	mov	r3, r9
    10b2:	e7f3      	b.n	109c <CONFIG_FPROTECT_BLOCK_SIZE+0x9c>
			}

			OUTS(bps, bpe);
    10b4:	465b      	mov	r3, fp
    10b6:	4652      	mov	r2, sl
    10b8:	4629      	mov	r1, r5
    10ba:	4630      	mov	r0, r6
    10bc:	f00b fa21 	bl	c502 <outs>
    10c0:	2800      	cmp	r0, #0
    10c2:	db11      	blt.n	10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>
    10c4:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    10c6:	2f00      	cmp	r7, #0
    10c8:	dd07      	ble.n	10da <CONFIG_FPROTECT_BLOCK_SIZE+0xda>
			OUTC(' ');
    10ca:	4629      	mov	r1, r5
    10cc:	2020      	movs	r0, #32
    10ce:	47b0      	blx	r6
    10d0:	2800      	cmp	r0, #0
    10d2:	db09      	blt.n	10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>
    10d4:	3401      	adds	r4, #1
			--width;
    10d6:	3f01      	subs	r7, #1
    10d8:	e7f5      	b.n	10c6 <CONFIG_FPROTECT_BLOCK_SIZE+0xc6>
		fp = extract_conversion(conv, sp);
    10da:	46c2      	mov	sl, r8
    10dc:	f7ff bb28 	b.w	730 <cbvprintf+0x10>
    10e0:	46c2      	mov	sl, r8
    10e2:	f7ff bb25 	b.w	730 <cbvprintf+0x10>
		}
	}

	return count;
    10e6:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    10e8:	b013      	add	sp, #76	; 0x4c
    10ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    10ee:	bf00      	nop
    10f0:	0000ed5d 	.word	0x0000ed5d

000010f4 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    10f4:	b508      	push	{r3, lr}
    10f6:	f04f 0220 	mov.w	r2, #32
    10fa:	f3ef 8311 	mrs	r3, BASEPRI
    10fe:	f382 8812 	msr	BASEPRI_MAX, r2
    1102:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    1106:	f003 fc3d 	bl	4984 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    110a:	4803      	ldr	r0, [pc, #12]	; (1118 <sys_reboot+0x24>)
    110c:	f00a fdba 	bl	bc84 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1110:	f002 fd20 	bl	3b54 <arch_cpu_idle>
    1114:	e7fc      	b.n	1110 <sys_reboot+0x1c>
    1116:	bf00      	nop
    1118:	0000ed60 	.word	0x0000ed60

0000111c <is_rodata>:
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    111c:	4b05      	ldr	r3, [pc, #20]	; (1134 <is_rodata+0x18>)
    111e:	4298      	cmp	r0, r3
    1120:	d304      	bcc.n	112c <is_rodata+0x10>
    1122:	4b05      	ldr	r3, [pc, #20]	; (1138 <is_rodata+0x1c>)
    1124:	4298      	cmp	r0, r3
    1126:	d303      	bcc.n	1130 <is_rodata+0x14>
    1128:	2000      	movs	r0, #0
    112a:	4770      	bx	lr
    112c:	2000      	movs	r0, #0
    112e:	4770      	bx	lr
    1130:	2001      	movs	r0, #1
		((const char *)addr < (const char *)RO_END));
}
    1132:	4770      	bx	lr
    1134:	0000e9c4 	.word	0x0000e9c4
    1138:	0000ff20 	.word	0x0000ff20

0000113c <thread_set>:
		}
	}
}

static void thread_set(k_tid_t process_tid)
{
    113c:	b508      	push	{r3, lr}
	proc_tid = process_tid;
    113e:	4b06      	ldr	r3, [pc, #24]	; (1158 <thread_set+0x1c>)
    1140:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    1142:	b118      	cbz	r0, 114c <thread_set+0x10>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    1144:	4b05      	ldr	r3, [pc, #20]	; (115c <thread_set+0x20>)
    1146:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
    1148:	2b09      	cmp	r3, #9
    114a:	dc00      	bgt.n	114e <thread_set+0x12>
		k_sem_give(&log_process_thread_sem);
	}
}
    114c:	bd08      	pop	{r3, pc}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    114e:	4804      	ldr	r0, [pc, #16]	; (1160 <thread_set+0x24>)
    1150:	f009 fb28 	bl	a7a4 <z_impl_k_sem_give>
}
    1154:	e7fa      	b.n	114c <thread_set+0x10>
    1156:	bf00      	nop
    1158:	20000cfc 	.word	0x20000cfc
    115c:	20000ccc 	.word	0x20000ccc
    1160:	200002c8 	.word	0x200002c8

00001164 <log_process_thread_timer_expiry_fn>:

	return 0;
}

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
    1164:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
    1166:	4802      	ldr	r0, [pc, #8]	; (1170 <log_process_thread_timer_expiry_fn+0xc>)
    1168:	f009 fb1c 	bl	a7a4 <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
    116c:	bd08      	pop	{r3, pc}
    116e:	bf00      	nop
    1170:	200002c8 	.word	0x200002c8

00001174 <next_pending>:
{
    1174:	b508      	push	{r3, lr}
	return (log_list_head_peek(&list) != NULL);
    1176:	4803      	ldr	r0, [pc, #12]	; (1184 <next_pending+0x10>)
    1178:	f00b faf0 	bl	c75c <log_list_head_peek>
}
    117c:	3800      	subs	r0, #0
    117e:	bf18      	it	ne
    1180:	2001      	movne	r0, #1
    1182:	bd08      	pop	{r3, pc}
    1184:	20000cd8 	.word	0x20000cd8

00001188 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    1188:	b530      	push	{r4, r5, lr}
    118a:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    118c:	2200      	movs	r2, #0
    118e:	490f      	ldr	r1, [pc, #60]	; (11cc <enable_logger+0x44>)
    1190:	480f      	ldr	r0, [pc, #60]	; (11d0 <enable_logger+0x48>)
    1192:	f00d fb55 	bl	e840 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    1196:	4d0f      	ldr	r5, [pc, #60]	; (11d4 <enable_logger+0x4c>)
    1198:	2200      	movs	r2, #0
    119a:	2300      	movs	r3, #0
    119c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    11a0:	2400      	movs	r4, #0
    11a2:	9404      	str	r4, [sp, #16]
    11a4:	230e      	movs	r3, #14
    11a6:	9303      	str	r3, [sp, #12]
    11a8:	9402      	str	r4, [sp, #8]
    11aa:	9401      	str	r4, [sp, #4]
    11ac:	9400      	str	r4, [sp, #0]
    11ae:	4b0a      	ldr	r3, [pc, #40]	; (11d8 <enable_logger+0x50>)
    11b0:	f44f 7240 	mov.w	r2, #768	; 0x300
    11b4:	4909      	ldr	r1, [pc, #36]	; (11dc <enable_logger+0x54>)
    11b6:	4628      	mov	r0, r5
    11b8:	f00c ffe2 	bl	e180 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    11bc:	4908      	ldr	r1, [pc, #32]	; (11e0 <enable_logger+0x58>)
    11be:	4628      	mov	r0, r5
    11c0:	f009 f8f8 	bl	a3b4 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    11c4:	4620      	mov	r0, r4
    11c6:	b009      	add	sp, #36	; 0x24
    11c8:	bd30      	pop	{r4, r5, pc}
    11ca:	bf00      	nop
    11cc:	00001165 	.word	0x00001165
    11d0:	200003d0 	.word	0x200003d0
    11d4:	20000408 	.word	0x20000408
    11d8:	00001841 	.word	0x00001841
    11dc:	20002700 	.word	0x20002700
    11e0:	0000ed8c 	.word	0x0000ed8c

000011e4 <log_init>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    11e4:	4b18      	ldr	r3, [pc, #96]	; (1248 <log_init+0x64>)
    11e6:	f3bf 8f5b 	dmb	ish
    11ea:	e853 2f00 	ldrex	r2, [r3]
    11ee:	1c51      	adds	r1, r2, #1
    11f0:	e843 1000 	strex	r0, r1, [r3]
    11f4:	2800      	cmp	r0, #0
    11f6:	d1f8      	bne.n	11ea <log_init+0x6>
    11f8:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    11fc:	bb1a      	cbnz	r2, 1246 <log_init+0x62>
{
    11fe:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < log_backend_count_get(); i++) {
    1200:	2400      	movs	r4, #0
    1202:	e009      	b.n	1218 <log_init+0x34>
					   backend->cb->ctx,
    1204:	4b11      	ldr	r3, [pc, #68]	; (124c <log_init+0x68>)
    1206:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    120a:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
    120c:	2204      	movs	r2, #4
    120e:	6819      	ldr	r1, [r3, #0]
    1210:	4628      	mov	r0, r5
    1212:	f000 fb59 	bl	18c8 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    1216:	3401      	adds	r4, #1
    1218:	4b0d      	ldr	r3, [pc, #52]	; (1250 <log_init+0x6c>)
    121a:	4a0c      	ldr	r2, [pc, #48]	; (124c <log_init+0x68>)
    121c:	1a9b      	subs	r3, r3, r2
    121e:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1222:	da0f      	bge.n	1244 <log_init+0x60>
		const struct log_backend *backend = log_backend_get(i);
    1224:	4626      	mov	r6, r4
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
    1226:	4d09      	ldr	r5, [pc, #36]	; (124c <log_init+0x68>)
    1228:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
    122c:	7b2b      	ldrb	r3, [r5, #12]
    122e:	2b00      	cmp	r3, #0
    1230:	d0f1      	beq.n	1216 <log_init+0x32>
			if (backend->api->init != NULL) {
    1232:	0123      	lsls	r3, r4, #4
    1234:	4a05      	ldr	r2, [pc, #20]	; (124c <log_init+0x68>)
    1236:	58d3      	ldr	r3, [r2, r3]
    1238:	699b      	ldr	r3, [r3, #24]
    123a:	2b00      	cmp	r3, #0
    123c:	d0e2      	beq.n	1204 <log_init+0x20>
				backend->api->init(backend);
    123e:	4628      	mov	r0, r5
    1240:	4798      	blx	r3
    1242:	e7df      	b.n	1204 <log_init+0x20>
}
    1244:	bd70      	pop	{r4, r5, r6, pc}
    1246:	4770      	bx	lr
    1248:	20000cd4 	.word	0x20000cd4
    124c:	0000ecbc 	.word	0x0000ecbc
    1250:	0000ecdc 	.word	0x0000ecdc

00001254 <log_set_timestamp_func>:
	if (timestamp_getter == NULL) {
    1254:	b138      	cbz	r0, 1266 <log_set_timestamp_func+0x12>
{
    1256:	b508      	push	{r3, lr}
	timestamp_func = timestamp_getter;
    1258:	4a04      	ldr	r2, [pc, #16]	; (126c <log_set_timestamp_func+0x18>)
    125a:	6010      	str	r0, [r2, #0]
	log_output_timestamp_freq_set(freq);
    125c:	4608      	mov	r0, r1
    125e:	f000 fdab 	bl	1db8 <log_output_timestamp_freq_set>
	return 0;
    1262:	2000      	movs	r0, #0
}
    1264:	bd08      	pop	{r3, pc}
		return -EINVAL;
    1266:	f06f 0015 	mvn.w	r0, #21
}
    126a:	4770      	bx	lr
    126c:	20000004 	.word	0x20000004

00001270 <log_core_init>:
{
    1270:	b508      	push	{r3, lr}
	panic_mode = false;
    1272:	2300      	movs	r3, #0
    1274:	4a0a      	ldr	r2, [pc, #40]	; (12a0 <log_core_init+0x30>)
    1276:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    1278:	4a0a      	ldr	r2, [pc, #40]	; (12a4 <log_core_init+0x34>)
    127a:	6013      	str	r3, [r2, #0]
	log_set_timestamp_func(_timestamp_func, freq);
    127c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    1280:	4809      	ldr	r0, [pc, #36]	; (12a8 <log_core_init+0x38>)
    1282:	f7ff ffe7 	bl	1254 <log_set_timestamp_func>
		log_msg_pool_init();
    1286:	f000 fb41 	bl	190c <log_msg_pool_init>
		log_list_init(&list);
    128a:	4808      	ldr	r0, [pc, #32]	; (12ac <log_core_init+0x3c>)
    128c:	f00b fa58 	bl	c740 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    1290:	2304      	movs	r3, #4
    1292:	2228      	movs	r2, #40	; 0x28
    1294:	4906      	ldr	r1, [pc, #24]	; (12b0 <log_core_init+0x40>)
    1296:	4807      	ldr	r0, [pc, #28]	; (12b4 <log_core_init+0x44>)
    1298:	f00c ff0f 	bl	e0ba <k_mem_slab_init>
}
    129c:	bd08      	pop	{r3, pc}
    129e:	bf00      	nop
    12a0:	20002535 	.word	0x20002535
    12a4:	20000cd0 	.word	0x20000cd0
    12a8:	0000c775 	.word	0x0000c775
    12ac:	20000cd8 	.word	0x20000cd8
    12b0:	20004420 	.word	0x20004420
    12b4:	20000ce0 	.word	0x20000ce0

000012b8 <get_msg>:
{
    12b8:	b510      	push	{r4, lr}
    12ba:	f04f 0320 	mov.w	r3, #32
    12be:	f3ef 8411 	mrs	r4, BASEPRI
    12c2:	f383 8812 	msr	BASEPRI_MAX, r3
    12c6:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
    12ca:	4804      	ldr	r0, [pc, #16]	; (12dc <get_msg+0x24>)
    12cc:	f00b fa48 	bl	c760 <log_list_head_get>
	__asm__ volatile(
    12d0:	f384 8811 	msr	BASEPRI, r4
    12d4:	f3bf 8f6f 	isb	sy
}
    12d8:	bd10      	pop	{r4, pc}
    12da:	bf00      	nop
    12dc:	20000cd8 	.word	0x20000cd8

000012e0 <z_log_notify_backend_enabled>:
{
    12e0:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    12e2:	4b05      	ldr	r3, [pc, #20]	; (12f8 <z_log_notify_backend_enabled+0x18>)
    12e4:	781b      	ldrb	r3, [r3, #0]
    12e6:	b11b      	cbz	r3, 12f0 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
    12e8:	4b03      	ldr	r3, [pc, #12]	; (12f8 <z_log_notify_backend_enabled+0x18>)
    12ea:	2201      	movs	r2, #1
    12ec:	701a      	strb	r2, [r3, #0]
}
    12ee:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
    12f0:	4802      	ldr	r0, [pc, #8]	; (12fc <z_log_notify_backend_enabled+0x1c>)
    12f2:	f009 fa57 	bl	a7a4 <z_impl_k_sem_give>
}
    12f6:	e7f7      	b.n	12e8 <z_log_notify_backend_enabled+0x8>
    12f8:	20002534 	.word	0x20002534
    12fc:	200002c8 	.word	0x200002c8

00001300 <z_log_dropped>:
    1300:	4b0c      	ldr	r3, [pc, #48]	; (1334 <z_log_dropped+0x34>)
    1302:	f3bf 8f5b 	dmb	ish
    1306:	e853 2f00 	ldrex	r2, [r3]
    130a:	3201      	adds	r2, #1
    130c:	e843 2100 	strex	r1, r2, [r3]
    1310:	2900      	cmp	r1, #0
    1312:	d1f8      	bne.n	1306 <z_log_dropped+0x6>
    1314:	f3bf 8f5b 	dmb	ish
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1318:	4b07      	ldr	r3, [pc, #28]	; (1338 <z_log_dropped+0x38>)
    131a:	f3bf 8f5b 	dmb	ish
    131e:	e853 2f00 	ldrex	r2, [r3]
    1322:	3a01      	subs	r2, #1
    1324:	e843 2100 	strex	r1, r2, [r3]
    1328:	2900      	cmp	r1, #0
    132a:	d1f8      	bne.n	131e <z_log_dropped+0x1e>
    132c:	f3bf 8f5b 	dmb	ish
}
    1330:	4770      	bx	lr
    1332:	bf00      	nop
    1334:	20000cd0 	.word	0x20000cd0
    1338:	20000ccc 	.word	0x20000ccc

0000133c <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    133c:	4b06      	ldr	r3, [pc, #24]	; (1358 <z_log_dropped_read_and_clear+0x1c>)
}
    133e:	2000      	movs	r0, #0
    1340:	4602      	mov	r2, r0
    1342:	f3bf 8f5b 	dmb	ish
    1346:	e853 0f00 	ldrex	r0, [r3]
    134a:	e843 2100 	strex	r1, r2, [r3]
    134e:	2900      	cmp	r1, #0
    1350:	d1f9      	bne.n	1346 <z_log_dropped_read_and_clear+0xa>
    1352:	f3bf 8f5b 	dmb	ish
    1356:	4770      	bx	lr
    1358:	20000cd0 	.word	0x20000cd0

0000135c <dropped_notify>:
{
    135c:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    135e:	f7ff ffed 	bl	133c <z_log_dropped_read_and_clear>
    1362:	4605      	mov	r5, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
    1364:	2400      	movs	r4, #0
    1366:	e000      	b.n	136a <dropped_notify+0xe>
    1368:	3401      	adds	r4, #1
    136a:	4b0b      	ldr	r3, [pc, #44]	; (1398 <dropped_notify+0x3c>)
    136c:	4a0b      	ldr	r2, [pc, #44]	; (139c <dropped_notify+0x40>)
    136e:	1a9b      	subs	r3, r3, r2
    1370:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1374:	da0f      	bge.n	1396 <dropped_notify+0x3a>
    1376:	4809      	ldr	r0, [pc, #36]	; (139c <dropped_notify+0x40>)
    1378:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    137c:	6843      	ldr	r3, [r0, #4]
    137e:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    1380:	2b00      	cmp	r3, #0
    1382:	d0f1      	beq.n	1368 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
    1384:	0123      	lsls	r3, r4, #4
    1386:	4a05      	ldr	r2, [pc, #20]	; (139c <dropped_notify+0x40>)
    1388:	58d3      	ldr	r3, [r2, r3]
    138a:	691b      	ldr	r3, [r3, #16]
    138c:	2b00      	cmp	r3, #0
    138e:	d0eb      	beq.n	1368 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
    1390:	4629      	mov	r1, r5
    1392:	4798      	blx	r3
    1394:	e7e8      	b.n	1368 <dropped_notify+0xc>
}
    1396:	bd38      	pop	{r3, r4, r5, pc}
    1398:	0000ecdc 	.word	0x0000ecdc
    139c:	0000ecbc 	.word	0x0000ecbc

000013a0 <z_log_dropped_pending>:
	return dropped_cnt > 0;
    13a0:	4b03      	ldr	r3, [pc, #12]	; (13b0 <z_log_dropped_pending+0x10>)
    13a2:	6818      	ldr	r0, [r3, #0]
}
    13a4:	2800      	cmp	r0, #0
    13a6:	bfd4      	ite	le
    13a8:	2000      	movle	r0, #0
    13aa:	2001      	movgt	r0, #1
    13ac:	4770      	bx	lr
    13ae:	bf00      	nop
    13b0:	20000cd0 	.word	0x20000cd0

000013b4 <z_log_strdup>:
{
    13b4:	b510      	push	{r4, lr}
    13b6:	b082      	sub	sp, #8
    13b8:	4604      	mov	r4, r0
	    is_rodata(str) || k_is_user_context()) {
    13ba:	f7ff feaf 	bl	111c <is_rodata>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    13be:	bb10      	cbnz	r0, 1406 <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    13c0:	2200      	movs	r2, #0
    13c2:	2300      	movs	r3, #0
    13c4:	a901      	add	r1, sp, #4
    13c6:	4811      	ldr	r0, [pc, #68]	; (140c <z_log_strdup+0x58>)
    13c8:	f008 ff9e 	bl	a308 <k_mem_slab_alloc>
	if (err != 0) {
    13cc:	b108      	cbz	r0, 13d2 <z_log_strdup+0x1e>
		return (char *)log_strdup_fail_msg;
    13ce:	4c10      	ldr	r4, [pc, #64]	; (1410 <z_log_strdup+0x5c>)
    13d0:	e019      	b.n	1406 <z_log_strdup+0x52>
	(void)atomic_set(&dup->refcount, 1);
    13d2:	9b01      	ldr	r3, [sp, #4]
    13d4:	2201      	movs	r2, #1
    13d6:	f3bf 8f5b 	dmb	ish
    13da:	e853 1f00 	ldrex	r1, [r3]
    13de:	e843 2000 	strex	r0, r2, [r3]
    13e2:	2800      	cmp	r0, #0
    13e4:	d1f9      	bne.n	13da <z_log_strdup+0x26>
    13e6:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    13ea:	221f      	movs	r2, #31
    13ec:	4621      	mov	r1, r4
    13ee:	9801      	ldr	r0, [sp, #4]
    13f0:	3004      	adds	r0, #4
    13f2:	f00b ffab 	bl	d34c <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    13f6:	9c01      	ldr	r4, [sp, #4]
    13f8:	237e      	movs	r3, #126	; 0x7e
    13fa:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    13fe:	2300      	movs	r3, #0
    1400:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	return dup->buf;
    1404:	3404      	adds	r4, #4
}
    1406:	4620      	mov	r0, r4
    1408:	b002      	add	sp, #8
    140a:	bd10      	pop	{r4, pc}
    140c:	20000ce0 	.word	0x20000ce0
    1410:	0000ed94 	.word	0x0000ed94

00001414 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    1414:	b138      	cbz	r0, 1426 <log_is_strdup+0x12>
    1416:	4a07      	ldr	r2, [pc, #28]	; (1434 <log_is_strdup+0x20>)
    1418:	4290      	cmp	r0, r2
    141a:	d306      	bcc.n	142a <log_is_strdup+0x16>
    141c:	32a0      	adds	r2, #160	; 0xa0
    141e:	4290      	cmp	r0, r2
    1420:	d305      	bcc.n	142e <log_is_strdup+0x1a>
    1422:	2000      	movs	r0, #0
    1424:	4770      	bx	lr
    1426:	2000      	movs	r0, #0
    1428:	4770      	bx	lr
    142a:	2000      	movs	r0, #0
    142c:	4770      	bx	lr
    142e:	2001      	movs	r0, #1
}
    1430:	4770      	bx	lr
    1432:	bf00      	nop
    1434:	20004420 	.word	0x20004420

00001438 <detect_missed_strdup>:
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    1438:	7a03      	ldrb	r3, [r0, #8]
	if (!log_msg_is_std(msg)) {
    143a:	f013 0f01 	tst.w	r3, #1
    143e:	d000      	beq.n	1442 <detect_missed_strdup+0xa>
    1440:	4770      	bx	lr
{
    1442:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1446:	b083      	sub	sp, #12
    1448:	4606      	mov	r6, r0
	msg_str = log_msg_str_get(msg);
    144a:	f00b fa4f 	bl	c8ec <log_msg_str_get>
    144e:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    1450:	4630      	mov	r0, r6
    1452:	f00b fa36 	bl	c8c2 <log_msg_nargs_get>
    1456:	4601      	mov	r1, r0
    1458:	4638      	mov	r0, r7
    145a:	f00b f98f 	bl	c77c <z_log_get_s_mask>
    145e:	4605      	mov	r5, r0
	while (mask) {
    1460:	e004      	b.n	146c <detect_missed_strdup+0x34>
		mask &= ~BIT(idx);
    1462:	2301      	movs	r3, #1
    1464:	fa03 f404 	lsl.w	r4, r3, r4
    1468:	ea25 0504 	bic.w	r5, r5, r4
	while (mask) {
    146c:	b36d      	cbz	r5, 14ca <detect_missed_strdup+0x92>
		idx = 31 - __builtin_clz(mask);
    146e:	fab5 f485 	clz	r4, r5
    1472:	f1c4 041f 	rsb	r4, r4, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    1476:	4621      	mov	r1, r4
    1478:	4630      	mov	r0, r6
    147a:	f00b fa25 	bl	c8c8 <log_msg_arg_get>
    147e:	4681      	mov	r9, r0
		if (!is_rodata(str) && !log_is_strdup(str) &&
    1480:	f7ff fe4c 	bl	111c <is_rodata>
    1484:	2800      	cmp	r0, #0
    1486:	d1ec      	bne.n	1462 <detect_missed_strdup+0x2a>
    1488:	4648      	mov	r0, r9
    148a:	f7ff ffc3 	bl	1414 <log_is_strdup>
    148e:	2800      	cmp	r0, #0
    1490:	d1e7      	bne.n	1462 <detect_missed_strdup+0x2a>
    1492:	4b0f      	ldr	r3, [pc, #60]	; (14d0 <detect_missed_strdup+0x98>)
    1494:	4599      	cmp	r9, r3
    1496:	d0e4      	beq.n	1462 <detect_missed_strdup+0x2a>
	return msg->hdr.ids.source_id;
    1498:	8971      	ldrh	r1, [r6, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
    149a:	f3c1 1189 	ubfx	r1, r1, #6, #10
    149e:	f000 fa03 	bl	18a8 <log_source_name_get>
    14a2:	4602      	mov	r2, r0
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    14a4:	4b0b      	ldr	r3, [pc, #44]	; (14d4 <detect_missed_strdup+0x9c>)
    14a6:	490c      	ldr	r1, [pc, #48]	; (14d8 <detect_missed_strdup+0xa0>)
    14a8:	1a5b      	subs	r3, r3, r1
    14aa:	08db      	lsrs	r3, r3, #3
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    14ac:	2101      	movs	r1, #1
    14ae:	f361 0802 	bfi	r8, r1, #0, #3
    14b2:	f36f 08c5 	bfc	r8, #3, #3
    14b6:	f363 188f 	bfi	r8, r3, #6, #10
    14ba:	f8ad 8000 	strh.w	r8, [sp]
    14be:	463b      	mov	r3, r7
    14c0:	4621      	mov	r1, r4
    14c2:	4806      	ldr	r0, [pc, #24]	; (14dc <detect_missed_strdup+0xa4>)
    14c4:	f000 f8b0 	bl	1628 <log_3>
    14c8:	e7cb      	b.n	1462 <detect_missed_strdup+0x2a>
}
    14ca:	b003      	add	sp, #12
    14cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    14d0:	0000ed94 	.word	0x0000ed94
    14d4:	0000ec5c 	.word	0x0000ec5c
    14d8:	0000ec4c 	.word	0x0000ec4c
    14dc:	0000edb0 	.word	0x0000edb0

000014e0 <msg_process>:
{
    14e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14e2:	4606      	mov	r6, r0
	if (!bypass) {
    14e4:	bb19      	cbnz	r1, 152e <msg_process+0x4e>
		    !panic_mode) {
    14e6:	4b14      	ldr	r3, [pc, #80]	; (1538 <msg_process+0x58>)
    14e8:	781b      	ldrb	r3, [r3, #0]
		if (!IS_ENABLED(CONFIG_LOG2) &&
    14ea:	b10b      	cbz	r3, 14f0 <msg_process+0x10>
{
    14ec:	2400      	movs	r4, #0
    14ee:	e003      	b.n	14f8 <msg_process+0x18>
			detect_missed_strdup(msg.msg);
    14f0:	f7ff ffa2 	bl	1438 <detect_missed_strdup>
    14f4:	e7fa      	b.n	14ec <msg_process+0xc>
		for (int i = 0; i < log_backend_count_get(); i++) {
    14f6:	3401      	adds	r4, #1
    14f8:	4b10      	ldr	r3, [pc, #64]	; (153c <msg_process+0x5c>)
    14fa:	4a11      	ldr	r2, [pc, #68]	; (1540 <msg_process+0x60>)
    14fc:	1a9b      	subs	r3, r3, r2
    14fe:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1502:	da14      	bge.n	152e <msg_process+0x4e>
	return &__log_backends_start[idx];
    1504:	4d0e      	ldr	r5, [pc, #56]	; (1540 <msg_process+0x60>)
    1506:	eb05 1504 	add.w	r5, r5, r4, lsl #4
	return backend->cb->active;
    150a:	686b      	ldr	r3, [r5, #4]
    150c:	795b      	ldrb	r3, [r3, #5]
			if (log_backend_is_active(backend) &&
    150e:	2b00      	cmp	r3, #0
    1510:	d0f1      	beq.n	14f6 <msg_process+0x16>
			    msg_filter_check(backend, msg)) {
    1512:	4631      	mov	r1, r6
    1514:	4628      	mov	r0, r5
    1516:	f00b f92b 	bl	c770 <msg_filter_check>
			if (log_backend_is_active(backend) &&
    151a:	2800      	cmp	r0, #0
    151c:	d0eb      	beq.n	14f6 <msg_process+0x16>
	backend->api->put(backend, msg);
    151e:	0127      	lsls	r7, r4, #4
    1520:	4b07      	ldr	r3, [pc, #28]	; (1540 <msg_process+0x60>)
    1522:	59db      	ldr	r3, [r3, r7]
    1524:	685b      	ldr	r3, [r3, #4]
    1526:	4631      	mov	r1, r6
    1528:	4628      	mov	r0, r5
    152a:	4798      	blx	r3
}
    152c:	e7e3      	b.n	14f6 <msg_process+0x16>
			log_msg_put(msg.msg);
    152e:	4630      	mov	r0, r6
    1530:	f00b f9de 	bl	c8f0 <log_msg_put>
}
    1534:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1536:	bf00      	nop
    1538:	20002535 	.word	0x20002535
    153c:	0000ecdc 	.word	0x0000ecdc
    1540:	0000ecbc 	.word	0x0000ecbc

00001544 <z_impl_log_process>:
{
    1544:	b510      	push	{r4, lr}
    1546:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    1548:	4b11      	ldr	r3, [pc, #68]	; (1590 <z_impl_log_process+0x4c>)
    154a:	781b      	ldrb	r3, [r3, #0]
    154c:	b903      	cbnz	r3, 1550 <z_impl_log_process+0xc>
    154e:	b1d0      	cbz	r0, 1586 <z_impl_log_process+0x42>
	msg = get_msg();
    1550:	f7ff feb2 	bl	12b8 <get_msg>
	if (msg.msg) {
    1554:	4603      	mov	r3, r0
    1556:	b180      	cbz	r0, 157a <z_impl_log_process+0x36>
		if (!bypass) {
    1558:	b95c      	cbnz	r4, 1572 <z_impl_log_process+0x2e>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    155a:	4a0e      	ldr	r2, [pc, #56]	; (1594 <z_impl_log_process+0x50>)
    155c:	f3bf 8f5b 	dmb	ish
    1560:	e852 1f00 	ldrex	r1, [r2]
    1564:	3901      	subs	r1, #1
    1566:	e842 1000 	strex	r0, r1, [r2]
    156a:	2800      	cmp	r0, #0
    156c:	d1f8      	bne.n	1560 <z_impl_log_process+0x1c>
    156e:	f3bf 8f5b 	dmb	ish
		msg_process(msg, bypass);
    1572:	4621      	mov	r1, r4
    1574:	4618      	mov	r0, r3
    1576:	f7ff ffb3 	bl	14e0 <msg_process>
	if (!bypass && z_log_dropped_pending()) {
    157a:	b914      	cbnz	r4, 1582 <z_impl_log_process+0x3e>
    157c:	f7ff ff10 	bl	13a0 <z_log_dropped_pending>
    1580:	b910      	cbnz	r0, 1588 <z_impl_log_process+0x44>
	return next_pending();
    1582:	f7ff fdf7 	bl	1174 <next_pending>
}
    1586:	bd10      	pop	{r4, pc}
		dropped_notify();
    1588:	f7ff fee8 	bl	135c <dropped_notify>
    158c:	e7f9      	b.n	1582 <z_impl_log_process+0x3e>
    158e:	bf00      	nop
    1590:	20002534 	.word	0x20002534
    1594:	20000ccc 	.word	0x20000ccc

00001598 <z_log_msg_post_finalize>:
{
    1598:	b510      	push	{r4, lr}
    159a:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    159c:	4b1d      	ldr	r3, [pc, #116]	; (1614 <z_log_msg_post_finalize+0x7c>)
    159e:	f3bf 8f5b 	dmb	ish
    15a2:	e853 2f00 	ldrex	r2, [r3]
    15a6:	1c51      	adds	r1, r2, #1
    15a8:	e843 1000 	strex	r0, r1, [r3]
    15ac:	2800      	cmp	r0, #0
    15ae:	d1f8      	bne.n	15a2 <z_log_msg_post_finalize+0xa>
    15b0:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    15b4:	4b18      	ldr	r3, [pc, #96]	; (1618 <z_log_msg_post_finalize+0x80>)
    15b6:	781b      	ldrb	r3, [r3, #0]
    15b8:	b93b      	cbnz	r3, 15ca <z_log_msg_post_finalize+0x32>
	} else if (proc_tid != NULL && cnt == 0) {
    15ba:	4b18      	ldr	r3, [pc, #96]	; (161c <z_log_msg_post_finalize+0x84>)
    15bc:	681b      	ldr	r3, [r3, #0]
    15be:	b103      	cbz	r3, 15c2 <z_log_msg_post_finalize+0x2a>
    15c0:	b19a      	cbz	r2, 15ea <z_log_msg_post_finalize+0x52>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    15c2:	2a0a      	cmp	r2, #10
    15c4:	d01c      	beq.n	1600 <z_log_msg_post_finalize+0x68>
}
    15c6:	b002      	add	sp, #8
    15c8:	bd10      	pop	{r4, pc}
	__asm__ volatile(
    15ca:	f04f 0320 	mov.w	r3, #32
    15ce:	f3ef 8411 	mrs	r4, BASEPRI
    15d2:	f383 8812 	msr	BASEPRI_MAX, r3
    15d6:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    15da:	2000      	movs	r0, #0
    15dc:	f7ff ffb2 	bl	1544 <z_impl_log_process>
	__asm__ volatile(
    15e0:	f384 8811 	msr	BASEPRI, r4
    15e4:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    15e8:	e7ed      	b.n	15c6 <z_log_msg_post_finalize+0x2e>
	z_impl_k_timer_start(timer, duration, period);
    15ea:	2200      	movs	r2, #0
    15ec:	2300      	movs	r3, #0
    15ee:	e9cd 2300 	strd	r2, r3, [sp]
    15f2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    15f6:	2300      	movs	r3, #0
    15f8:	4809      	ldr	r0, [pc, #36]	; (1620 <z_log_msg_post_finalize+0x88>)
    15fa:	f00a f863 	bl	b6c4 <z_impl_k_timer_start>
	} else if (proc_tid != NULL && cnt == 0) {
    15fe:	e7e2      	b.n	15c6 <z_log_msg_post_finalize+0x2e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    1600:	2b00      	cmp	r3, #0
    1602:	d0e0      	beq.n	15c6 <z_log_msg_post_finalize+0x2e>
	z_impl_k_timer_stop(timer);
    1604:	4806      	ldr	r0, [pc, #24]	; (1620 <z_log_msg_post_finalize+0x88>)
    1606:	f00d f927 	bl	e858 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    160a:	4806      	ldr	r0, [pc, #24]	; (1624 <z_log_msg_post_finalize+0x8c>)
    160c:	f009 f8ca 	bl	a7a4 <z_impl_k_sem_give>
}
    1610:	e7d9      	b.n	15c6 <z_log_msg_post_finalize+0x2e>
    1612:	bf00      	nop
    1614:	20000ccc 	.word	0x20000ccc
    1618:	20002535 	.word	0x20002535
    161c:	20000cfc 	.word	0x20000cfc
    1620:	200003d0 	.word	0x200003d0
    1624:	200002c8 	.word	0x200002c8

00001628 <log_3>:
{
    1628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    162c:	4680      	mov	r8, r0
    162e:	460f      	mov	r7, r1
    1630:	4616      	mov	r6, r2
    1632:	461d      	mov	r5, r3
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    1634:	f000 f98e 	bl	1954 <log_msg_chunk_alloc>

	if (msg != NULL) {
    1638:	4604      	mov	r4, r0
    163a:	b140      	cbz	r0, 164e <log_3+0x26>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
    163c:	2301      	movs	r3, #1
    163e:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    1640:	2200      	movs	r2, #0
    1642:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    1644:	f04f 0300 	mov.w	r3, #0
    1648:	f362 0300 	bfi	r3, r2, #0, #1
    164c:	7203      	strb	r3, [r0, #8]
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
    164e:	b14c      	cbz	r4, 1664 <log_3+0x3c>
		msg->str = str;
    1650:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = 3U;
    1654:	7a63      	ldrb	r3, [r4, #9]
    1656:	2203      	movs	r2, #3
    1658:	f362 1307 	bfi	r3, r2, #4, #4
    165c:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    165e:	6167      	str	r7, [r4, #20]
		msg->payload.single.args[1] = arg2;
    1660:	61a6      	str	r6, [r4, #24]
		msg->payload.single.args[2] = arg3;
    1662:	61e5      	str	r5, [r4, #28]
		if (msg == NULL) {
    1664:	b1c4      	cbz	r4, 1698 <log_3+0x70>
	msg->hdr.ids = src_level;
    1666:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    166a:	8163      	strh	r3, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    166c:	4b0b      	ldr	r3, [pc, #44]	; (169c <log_3+0x74>)
    166e:	681b      	ldr	r3, [r3, #0]
    1670:	4798      	blx	r3
    1672:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    1674:	f04f 0320 	mov.w	r3, #32
    1678:	f3ef 8511 	mrs	r5, BASEPRI
    167c:	f383 8812 	msr	BASEPRI_MAX, r3
    1680:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    1684:	4621      	mov	r1, r4
    1686:	4806      	ldr	r0, [pc, #24]	; (16a0 <log_3+0x78>)
    1688:	f00b f85e 	bl	c748 <log_list_add_tail>
	__asm__ volatile(
    168c:	f385 8811 	msr	BASEPRI, r5
    1690:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    1694:	f7ff ff80 	bl	1598 <z_log_msg_post_finalize>
}
    1698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    169c:	20000004 	.word	0x20000004
    16a0:	20000cd8 	.word	0x20000cd8

000016a4 <log_1>:
{
    16a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16a6:	4606      	mov	r6, r0
    16a8:	460d      	mov	r5, r1
    16aa:	4617      	mov	r7, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    16ac:	f000 f952 	bl	1954 <log_msg_chunk_alloc>
	if (msg != NULL) {
    16b0:	4604      	mov	r4, r0
    16b2:	b140      	cbz	r0, 16c6 <log_1+0x22>
		msg->hdr.ref_cnt = 1;
    16b4:	2301      	movs	r3, #1
    16b6:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    16b8:	2100      	movs	r1, #0
    16ba:	8101      	strh	r1, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    16bc:	f04f 0300 	mov.w	r3, #0
    16c0:	f361 0300 	bfi	r3, r1, #0, #1
    16c4:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
    16c6:	b134      	cbz	r4, 16d6 <log_1+0x32>
		msg->str = str;
    16c8:	6126      	str	r6, [r4, #16]
		msg->hdr.params.std.nargs = 1U;
    16ca:	7a63      	ldrb	r3, [r4, #9]
    16cc:	2201      	movs	r2, #1
    16ce:	f362 1307 	bfi	r3, r2, #4, #4
    16d2:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    16d4:	6165      	str	r5, [r4, #20]
		if (msg == NULL) {
    16d6:	b1b4      	cbz	r4, 1706 <log_1+0x62>
	msg->hdr.ids = src_level;
    16d8:	8167      	strh	r7, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    16da:	4b0b      	ldr	r3, [pc, #44]	; (1708 <log_1+0x64>)
    16dc:	681b      	ldr	r3, [r3, #0]
    16de:	4798      	blx	r3
    16e0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    16e2:	f04f 0320 	mov.w	r3, #32
    16e6:	f3ef 8511 	mrs	r5, BASEPRI
    16ea:	f383 8812 	msr	BASEPRI_MAX, r3
    16ee:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    16f2:	4621      	mov	r1, r4
    16f4:	4805      	ldr	r0, [pc, #20]	; (170c <log_1+0x68>)
    16f6:	f00b f827 	bl	c748 <log_list_add_tail>
	__asm__ volatile(
    16fa:	f385 8811 	msr	BASEPRI, r5
    16fe:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    1702:	f7ff ff49 	bl	1598 <z_log_msg_post_finalize>
}
    1706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1708:	20000004 	.word	0x20000004
    170c:	20000cd8 	.word	0x20000cd8

00001710 <log_2>:
{
    1710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1714:	4607      	mov	r7, r0
    1716:	460e      	mov	r6, r1
    1718:	4615      	mov	r5, r2
    171a:	4698      	mov	r8, r3
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    171c:	f000 f91a 	bl	1954 <log_msg_chunk_alloc>
	if (msg != NULL) {
    1720:	4604      	mov	r4, r0
    1722:	b140      	cbz	r0, 1736 <log_2+0x26>
		msg->hdr.ref_cnt = 1;
    1724:	2301      	movs	r3, #1
    1726:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    1728:	2200      	movs	r2, #0
    172a:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    172c:	f04f 0300 	mov.w	r3, #0
    1730:	f362 0300 	bfi	r3, r2, #0, #1
    1734:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
    1736:	b13c      	cbz	r4, 1748 <log_2+0x38>
		msg->str = str;
    1738:	6127      	str	r7, [r4, #16]
		msg->hdr.params.std.nargs = 2U;
    173a:	7a63      	ldrb	r3, [r4, #9]
    173c:	2202      	movs	r2, #2
    173e:	f362 1307 	bfi	r3, r2, #4, #4
    1742:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    1744:	6166      	str	r6, [r4, #20]
		msg->payload.single.args[1] = arg2;
    1746:	61a5      	str	r5, [r4, #24]
		if (msg == NULL) {
    1748:	b1bc      	cbz	r4, 177a <log_2+0x6a>
	msg->hdr.ids = src_level;
    174a:	f8a4 800a 	strh.w	r8, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    174e:	4b0c      	ldr	r3, [pc, #48]	; (1780 <log_2+0x70>)
    1750:	681b      	ldr	r3, [r3, #0]
    1752:	4798      	blx	r3
    1754:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    1756:	f04f 0320 	mov.w	r3, #32
    175a:	f3ef 8511 	mrs	r5, BASEPRI
    175e:	f383 8812 	msr	BASEPRI_MAX, r3
    1762:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    1766:	4621      	mov	r1, r4
    1768:	4806      	ldr	r0, [pc, #24]	; (1784 <log_2+0x74>)
    176a:	f00a ffed 	bl	c748 <log_list_add_tail>
	__asm__ volatile(
    176e:	f385 8811 	msr	BASEPRI, r5
    1772:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    1776:	f7ff ff0f 	bl	1598 <z_log_msg_post_finalize>
}
    177a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    177e:	bf00      	nop
    1780:	20000004 	.word	0x20000004
    1784:	20000cd8 	.word	0x20000cd8

00001788 <log_0>:
{
    1788:	b570      	push	{r4, r5, r6, lr}
    178a:	4605      	mov	r5, r0
    178c:	460e      	mov	r6, r1
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    178e:	f000 f8e1 	bl	1954 <log_msg_chunk_alloc>
	if (msg != NULL) {
    1792:	4604      	mov	r4, r0
    1794:	b140      	cbz	r0, 17a8 <log_0+0x20>
		msg->hdr.ref_cnt = 1;
    1796:	2301      	movs	r3, #1
    1798:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    179a:	2200      	movs	r2, #0
    179c:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    179e:	f04f 0300 	mov.w	r3, #0
    17a2:	f362 0300 	bfi	r3, r2, #0, #1
    17a6:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
    17a8:	b104      	cbz	r4, 17ac <log_0+0x24>
		msg->str = str;
    17aa:	6125      	str	r5, [r4, #16]
		if (msg == NULL) {
    17ac:	b1b4      	cbz	r4, 17dc <log_0+0x54>
	msg->hdr.ids = src_level;
    17ae:	8166      	strh	r6, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    17b0:	4b0b      	ldr	r3, [pc, #44]	; (17e0 <log_0+0x58>)
    17b2:	681b      	ldr	r3, [r3, #0]
    17b4:	4798      	blx	r3
    17b6:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    17b8:	f04f 0320 	mov.w	r3, #32
    17bc:	f3ef 8511 	mrs	r5, BASEPRI
    17c0:	f383 8812 	msr	BASEPRI_MAX, r3
    17c4:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    17c8:	4621      	mov	r1, r4
    17ca:	4806      	ldr	r0, [pc, #24]	; (17e4 <log_0+0x5c>)
    17cc:	f00a ffbc 	bl	c748 <log_list_add_tail>
	__asm__ volatile(
    17d0:	f385 8811 	msr	BASEPRI, r5
    17d4:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    17d8:	f7ff fede 	bl	1598 <z_log_msg_post_finalize>
}
    17dc:	bd70      	pop	{r4, r5, r6, pc}
    17de:	bf00      	nop
    17e0:	20000004 	.word	0x20000004
    17e4:	20000cd8 	.word	0x20000cd8

000017e8 <z_impl_log_panic>:
	if (panic_mode) {
    17e8:	4b12      	ldr	r3, [pc, #72]	; (1834 <z_impl_log_panic+0x4c>)
    17ea:	781b      	ldrb	r3, [r3, #0]
    17ec:	b103      	cbz	r3, 17f0 <z_impl_log_panic+0x8>
    17ee:	4770      	bx	lr
{
    17f0:	b510      	push	{r4, lr}
	log_init();
    17f2:	f7ff fcf7 	bl	11e4 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    17f6:	2400      	movs	r4, #0
    17f8:	e000      	b.n	17fc <z_impl_log_panic+0x14>
    17fa:	3401      	adds	r4, #1
    17fc:	4b0e      	ldr	r3, [pc, #56]	; (1838 <z_impl_log_panic+0x50>)
    17fe:	4a0f      	ldr	r2, [pc, #60]	; (183c <z_impl_log_panic+0x54>)
    1800:	1a9b      	subs	r3, r3, r2
    1802:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1806:	da0c      	bge.n	1822 <z_impl_log_panic+0x3a>
	return &__log_backends_start[idx];
    1808:	480c      	ldr	r0, [pc, #48]	; (183c <z_impl_log_panic+0x54>)
    180a:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
    180e:	6843      	ldr	r3, [r0, #4]
    1810:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    1812:	2b00      	cmp	r3, #0
    1814:	d0f1      	beq.n	17fa <z_impl_log_panic+0x12>
	backend->api->panic(backend);
    1816:	0123      	lsls	r3, r4, #4
    1818:	4a08      	ldr	r2, [pc, #32]	; (183c <z_impl_log_panic+0x54>)
    181a:	58d3      	ldr	r3, [r2, r3]
    181c:	695b      	ldr	r3, [r3, #20]
    181e:	4798      	blx	r3
}
    1820:	e7eb      	b.n	17fa <z_impl_log_panic+0x12>
    1822:	2000      	movs	r0, #0
    1824:	f7ff fe8e 	bl	1544 <z_impl_log_process>
		while (log_process(false) == true) {
    1828:	2800      	cmp	r0, #0
    182a:	d1fa      	bne.n	1822 <z_impl_log_panic+0x3a>
	panic_mode = true;
    182c:	4b01      	ldr	r3, [pc, #4]	; (1834 <z_impl_log_panic+0x4c>)
    182e:	2201      	movs	r2, #1
    1830:	701a      	strb	r2, [r3, #0]
}
    1832:	bd10      	pop	{r4, pc}
    1834:	20002535 	.word	0x20002535
    1838:	0000ecdc 	.word	0x0000ecdc
    183c:	0000ecbc 	.word	0x0000ecbc

00001840 <log_process_thread_func>:
{
    1840:	b508      	push	{r3, lr}
	log_init();
    1842:	f7ff fccf 	bl	11e4 <log_init>
	return z_impl_z_current_get();
    1846:	f009 fd15 	bl	b274 <z_impl_z_current_get>
	thread_set(k_current_get());
    184a:	f7ff fc77 	bl	113c <thread_set>
    184e:	e006      	b.n	185e <log_process_thread_func+0x1e>
	return z_impl_k_sem_take(sem, timeout);
    1850:	f04f 32ff 	mov.w	r2, #4294967295
    1854:	f04f 33ff 	mov.w	r3, #4294967295
    1858:	4804      	ldr	r0, [pc, #16]	; (186c <log_process_thread_func+0x2c>)
    185a:	f008 ffc7 	bl	a7ec <z_impl_k_sem_take>
    185e:	2000      	movs	r0, #0
    1860:	f7ff fe70 	bl	1544 <z_impl_log_process>
		if (log_process(false) == false) {
    1864:	2800      	cmp	r0, #0
    1866:	d1fa      	bne.n	185e <log_process_thread_func+0x1e>
    1868:	e7f2      	b.n	1850 <log_process_thread_func+0x10>
    186a:	bf00      	nop
    186c:	200002c8 	.word	0x200002c8

00001870 <z_log_free>:
{
    1870:	b500      	push	{lr}
    1872:	b083      	sub	sp, #12
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    1874:	3804      	subs	r0, #4
    1876:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1878:	f3bf 8f5b 	dmb	ish
    187c:	e850 3f00 	ldrex	r3, [r0]
    1880:	1e5a      	subs	r2, r3, #1
    1882:	e840 2100 	strex	r1, r2, [r0]
    1886:	2900      	cmp	r1, #0
    1888:	d1f8      	bne.n	187c <z_log_free+0xc>
    188a:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    188e:	2b01      	cmp	r3, #1
    1890:	d002      	beq.n	1898 <z_log_free+0x28>
}
    1892:	b003      	add	sp, #12
    1894:	f85d fb04 	ldr.w	pc, [sp], #4
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    1898:	a901      	add	r1, sp, #4
    189a:	4802      	ldr	r0, [pc, #8]	; (18a4 <z_log_free+0x34>)
    189c:	f00c fc1b 	bl	e0d6 <k_mem_slab_free>
}
    18a0:	e7f7      	b.n	1892 <z_log_free+0x22>
    18a2:	bf00      	nop
    18a4:	20000ce0 	.word	0x20000ce0

000018a8 <log_source_name_get>:
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    18a8:	4b05      	ldr	r3, [pc, #20]	; (18c0 <log_source_name_get+0x18>)
    18aa:	4a06      	ldr	r2, [pc, #24]	; (18c4 <log_source_name_get+0x1c>)
    18ac:	1a9b      	subs	r3, r3, r2
    18ae:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    18b2:	d202      	bcs.n	18ba <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
    18b4:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    18b8:	4770      	bx	lr
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    18ba:	2000      	movs	r0, #0
}
    18bc:	4770      	bx	lr
    18be:	bf00      	nop
    18c0:	0000ecbc 	.word	0x0000ecbc
    18c4:	0000ec4c 	.word	0x0000ec4c

000018c8 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    18c8:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    18ca:	4b07      	ldr	r3, [pc, #28]	; (18e8 <log_backend_enable+0x20>)
    18cc:	1ac3      	subs	r3, r0, r3
    18ce:	111b      	asrs	r3, r3, #4
    18d0:	3301      	adds	r3, #1
	backend->cb->id = id;
    18d2:	6842      	ldr	r2, [r0, #4]
    18d4:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
    18d6:	6843      	ldr	r3, [r0, #4]
    18d8:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    18da:	6843      	ldr	r3, [r0, #4]
    18dc:	2201      	movs	r2, #1
    18de:	715a      	strb	r2, [r3, #5]

	log_backend_id_set(backend, id);
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    18e0:	f7ff fcfe 	bl	12e0 <z_log_notify_backend_enabled>
}
    18e4:	bd08      	pop	{r3, pc}
    18e6:	bf00      	nop
    18e8:	0000ecbc 	.word	0x0000ecbc

000018ec <cont_free>:
{
	atomic_inc(&msg->hdr.ref_cnt);
}

static void cont_free(struct log_msg_cont *cont)
{
    18ec:	b510      	push	{r4, lr}
    18ee:	b082      	sub	sp, #8
    18f0:	9001      	str	r0, [sp, #4]
	struct log_msg_cont *next;

	while (cont != NULL) {
    18f2:	9b01      	ldr	r3, [sp, #4]
    18f4:	b133      	cbz	r3, 1904 <cont_free+0x18>
		next = cont->next;
    18f6:	681c      	ldr	r4, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    18f8:	a901      	add	r1, sp, #4
    18fa:	4803      	ldr	r0, [pc, #12]	; (1908 <cont_free+0x1c>)
    18fc:	f00c fbeb 	bl	e0d6 <k_mem_slab_free>
		cont = next;
    1900:	9401      	str	r4, [sp, #4]
    1902:	e7f6      	b.n	18f2 <cont_free+0x6>
	}
}
    1904:	b002      	add	sp, #8
    1906:	bd10      	pop	{r4, pc}
    1908:	20000d00 	.word	0x20000d00

0000190c <log_msg_pool_init>:
{
    190c:	b508      	push	{r3, lr}
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    190e:	2320      	movs	r3, #32
    1910:	461a      	mov	r2, r3
    1912:	4902      	ldr	r1, [pc, #8]	; (191c <log_msg_pool_init+0x10>)
    1914:	4802      	ldr	r0, [pc, #8]	; (1920 <log_msg_pool_init+0x14>)
    1916:	f00c fbd0 	bl	e0ba <k_mem_slab_init>
}
    191a:	bd08      	pop	{r3, pc}
    191c:	200044c0 	.word	0x200044c0
    1920:	20000d00 	.word	0x20000d00

00001924 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    1924:	b510      	push	{r4, lr}
    1926:	b082      	sub	sp, #8
	union log_msg_chunk *msg = NULL;
    1928:	2300      	movs	r3, #0
    192a:	9301      	str	r3, [sp, #4]
    192c:	2001      	movs	r0, #1
    192e:	f7ff fe09 	bl	1544 <z_impl_log_process>
    1932:	4604      	mov	r4, r0
	int err;

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
    1934:	f7ff fce4 	bl	1300 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    1938:	2200      	movs	r2, #0
    193a:	2300      	movs	r3, #0
    193c:	a901      	add	r1, sp, #4
    193e:	4804      	ldr	r0, [pc, #16]	; (1950 <log_msg_no_space_handle+0x2c>)
    1940:	f008 fce2 	bl	a308 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    1944:	b108      	cbz	r0, 194a <log_msg_no_space_handle+0x26>
    1946:	2c00      	cmp	r4, #0
    1948:	d1f0      	bne.n	192c <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
    194a:	9801      	ldr	r0, [sp, #4]
    194c:	b002      	add	sp, #8
    194e:	bd10      	pop	{r4, pc}
    1950:	20000d00 	.word	0x20000d00

00001954 <log_msg_chunk_alloc>:
{
    1954:	b500      	push	{lr}
    1956:	b083      	sub	sp, #12
	union log_msg_chunk *msg = NULL;
    1958:	2300      	movs	r3, #0
    195a:	9301      	str	r3, [sp, #4]
		   block_on_alloc()
    195c:	f00a ff31 	bl	c7c2 <block_on_alloc>
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    1960:	b150      	cbz	r0, 1978 <log_msg_chunk_alloc+0x24>
    1962:	2200      	movs	r2, #0
    1964:	2300      	movs	r3, #0
    1966:	a901      	add	r1, sp, #4
    1968:	4807      	ldr	r0, [pc, #28]	; (1988 <log_msg_chunk_alloc+0x34>)
    196a:	f008 fccd 	bl	a308 <k_mem_slab_alloc>
	if (err != 0) {
    196e:	b930      	cbnz	r0, 197e <log_msg_chunk_alloc+0x2a>
}
    1970:	9801      	ldr	r0, [sp, #4]
    1972:	b003      	add	sp, #12
    1974:	f85d fb04 	ldr.w	pc, [sp], #4
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    1978:	2200      	movs	r2, #0
    197a:	2300      	movs	r3, #0
    197c:	e7f3      	b.n	1966 <log_msg_chunk_alloc+0x12>
		msg = log_msg_no_space_handle();
    197e:	f7ff ffd1 	bl	1924 <log_msg_no_space_handle>
    1982:	9001      	str	r0, [sp, #4]
    1984:	e7f4      	b.n	1970 <log_msg_chunk_alloc+0x1c>
    1986:	bf00      	nop
    1988:	20000d00 	.word	0x20000d00

0000198c <msg_free>:
{
    198c:	b5f0      	push	{r4, r5, r6, r7, lr}
    198e:	b083      	sub	sp, #12
    1990:	9001      	str	r0, [sp, #4]
	uint32_t nargs = log_msg_nargs_get(msg);
    1992:	4604      	mov	r4, r0
    1994:	f00a ff95 	bl	c8c2 <log_msg_nargs_get>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    1998:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg) && nargs) {
    199a:	f013 0f01 	tst.w	r3, #1
    199e:	d101      	bne.n	19a4 <msg_free+0x18>
    19a0:	4606      	mov	r6, r0
    19a2:	bb50      	cbnz	r0, 19fa <msg_free+0x6e>
	if (msg->hdr.params.generic.ext == 1) {
    19a4:	9b01      	ldr	r3, [sp, #4]
    19a6:	7a1a      	ldrb	r2, [r3, #8]
    19a8:	f012 0f02 	tst.w	r2, #2
    19ac:	d128      	bne.n	1a00 <msg_free+0x74>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    19ae:	a901      	add	r1, sp, #4
    19b0:	4815      	ldr	r0, [pc, #84]	; (1a08 <msg_free+0x7c>)
    19b2:	f00c fb90 	bl	e0d6 <k_mem_slab_free>
}
    19b6:	b003      	add	sp, #12
    19b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					smask = z_log_get_s_mask(
    19ba:	9801      	ldr	r0, [sp, #4]
    19bc:	f00a ff96 	bl	c8ec <log_msg_str_get>
    19c0:	4631      	mov	r1, r6
    19c2:	f00a fedb 	bl	c77c <z_log_get_s_mask>
					if (smask == 0U) {
    19c6:	4607      	mov	r7, r0
    19c8:	b988      	cbnz	r0, 19ee <msg_free+0x62>
    19ca:	e7eb      	b.n	19a4 <msg_free+0x18>
					z_log_free(buf);
    19cc:	4628      	mov	r0, r5
    19ce:	f7ff ff4f 	bl	1870 <z_log_free>
		for (i = 0U; i < nargs; i++) {
    19d2:	3401      	adds	r4, #1
    19d4:	42b4      	cmp	r4, r6
    19d6:	d2e5      	bcs.n	19a4 <msg_free+0x18>
			void *buf = (void *)log_msg_arg_get(msg, i);
    19d8:	4621      	mov	r1, r4
    19da:	9801      	ldr	r0, [sp, #4]
    19dc:	f00a ff74 	bl	c8c8 <log_msg_arg_get>
    19e0:	4605      	mov	r5, r0
			if (log_is_strdup(buf)) {
    19e2:	f7ff fd17 	bl	1414 <log_is_strdup>
    19e6:	2800      	cmp	r0, #0
    19e8:	d0f3      	beq.n	19d2 <msg_free+0x46>
				if (smask == 0U) {
    19ea:	2f00      	cmp	r7, #0
    19ec:	d0e5      	beq.n	19ba <msg_free+0x2e>
				if (smask & BIT(i)) {
    19ee:	fa27 f304 	lsr.w	r3, r7, r4
    19f2:	f013 0f01 	tst.w	r3, #1
    19f6:	d0ec      	beq.n	19d2 <msg_free+0x46>
    19f8:	e7e8      	b.n	19cc <msg_free+0x40>
		uint32_t smask = 0U;
    19fa:	2700      	movs	r7, #0
		for (i = 0U; i < nargs; i++) {
    19fc:	463c      	mov	r4, r7
    19fe:	e7e9      	b.n	19d4 <msg_free+0x48>
		cont_free(msg->payload.ext.next);
    1a00:	6958      	ldr	r0, [r3, #20]
    1a02:	f7ff ff73 	bl	18ec <cont_free>
    1a06:	e7d2      	b.n	19ae <msg_free+0x22>
    1a08:	20000d00 	.word	0x20000d00

00001a0c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    1a0c:	b40e      	push	{r1, r2, r3}
    1a0e:	b500      	push	{lr}
    1a10:	b082      	sub	sp, #8
    1a12:	4601      	mov	r1, r0
    1a14:	ab03      	add	r3, sp, #12
    1a16:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    1a1a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1a1c:	4803      	ldr	r0, [pc, #12]	; (1a2c <print_formatted+0x20>)
    1a1e:	f7fe fe7f 	bl	720 <cbvprintf>
	va_end(args);

	return length;
}
    1a22:	b002      	add	sp, #8
    1a24:	f85d eb04 	ldr.w	lr, [sp], #4
    1a28:	b003      	add	sp, #12
    1a2a:	4770      	bx	lr
    1a2c:	0000cc41 	.word	0x0000cc41

00001a30 <timestamp_print>:
	output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, uint32_t timestamp)
{
    1a30:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a32:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
    1a34:	f011 0f44 	tst.w	r1, #68	; 0x44
    1a38:	d005      	beq.n	1a46 <timestamp_print+0x16>
		length = print_formatted(output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
    1a3a:	4b1a      	ldr	r3, [pc, #104]	; (1aa4 <timestamp_print+0x74>)
    1a3c:	681c      	ldr	r4, [r3, #0]
    1a3e:	b934      	cbnz	r4, 1a4e <timestamp_print+0x1e>
			length = print_formatted(output,
						 "[%02u:%02u:%02u.%03u,%03u] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
    1a40:	2000      	movs	r0, #0
	}

	return length;
}
    1a42:	b005      	add	sp, #20
    1a44:	bdf0      	pop	{r4, r5, r6, r7, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
    1a46:	4918      	ldr	r1, [pc, #96]	; (1aa8 <timestamp_print+0x78>)
    1a48:	f7ff ffe0 	bl	1a0c <print_formatted>
    1a4c:	e7f9      	b.n	1a42 <timestamp_print+0x12>
		timestamp /= timestamp_div;
    1a4e:	4b17      	ldr	r3, [pc, #92]	; (1aac <timestamp_print+0x7c>)
    1a50:	6819      	ldr	r1, [r3, #0]
    1a52:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    1a56:	fbb1 f5f4 	udiv	r5, r1, r4
		hours = seconds / 3600U;
    1a5a:	4a15      	ldr	r2, [pc, #84]	; (1ab0 <timestamp_print+0x80>)
    1a5c:	fba2 3205 	umull	r3, r2, r2, r5
    1a60:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    1a62:	f44f 6661 	mov.w	r6, #3600	; 0xe10
    1a66:	fb06 5612 	mls	r6, r6, r2, r5
		mins = seconds / 60U;
    1a6a:	4b12      	ldr	r3, [pc, #72]	; (1ab4 <timestamp_print+0x84>)
    1a6c:	fba3 7306 	umull	r7, r3, r3, r6
    1a70:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    1a72:	fb04 1115 	mls	r1, r4, r5, r1
		ms = (remainder * 1000U) / freq;
    1a76:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    1a7a:	fb05 f101 	mul.w	r1, r5, r1
    1a7e:	fbb1 f7f4 	udiv	r7, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1a82:	fb07 1114 	mls	r1, r7, r4, r1
    1a86:	fb05 f101 	mul.w	r1, r5, r1
    1a8a:	fbb1 f4f4 	udiv	r4, r1, r4
			length = print_formatted(output,
    1a8e:	9402      	str	r4, [sp, #8]
    1a90:	9701      	str	r7, [sp, #4]
    1a92:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    1a96:	eba6 0181 	sub.w	r1, r6, r1, lsl #2
    1a9a:	9100      	str	r1, [sp, #0]
    1a9c:	4906      	ldr	r1, [pc, #24]	; (1ab8 <timestamp_print+0x88>)
    1a9e:	f7ff ffb5 	bl	1a0c <print_formatted>
    1aa2:	e7ce      	b.n	1a42 <timestamp_print+0x12>
    1aa4:	20000d1c 	.word	0x20000d1c
    1aa8:	0000edf4 	.word	0x0000edf4
    1aac:	20000d20 	.word	0x20000d20
    1ab0:	91a2b3c5 	.word	0x91a2b3c5
    1ab4:	88888889 	.word	0x88888889
    1ab8:	0000ee00 	.word	0x0000ee00

00001abc <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    1abc:	b161      	cbz	r1, 1ad8 <color_print+0x1c>
{
    1abe:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    1ac0:	b12a      	cbz	r2, 1ace <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    1ac2:	4a06      	ldr	r2, [pc, #24]	; (1adc <color_print+0x20>)
    1ac4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1ac8:	b912      	cbnz	r2, 1ad0 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    1aca:	4a05      	ldr	r2, [pc, #20]	; (1ae0 <color_print+0x24>)
    1acc:	e000      	b.n	1ad0 <color_print+0x14>
    1ace:	4a04      	ldr	r2, [pc, #16]	; (1ae0 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
    1ad0:	4904      	ldr	r1, [pc, #16]	; (1ae4 <color_print+0x28>)
    1ad2:	f7ff ff9b 	bl	1a0c <print_formatted>
	}
}
    1ad6:	bd08      	pop	{r3, pc}
    1ad8:	4770      	bx	lr
    1ada:	bf00      	nop
    1adc:	0000ee78 	.word	0x0000ee78
    1ae0:	0000ee1c 	.word	0x0000ee1c
    1ae4:	0000ee24 	.word	0x0000ee24

00001ae8 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1ae8:	f011 0f10 	tst.w	r1, #16
    1aec:	d10b      	bne.n	1b06 <newline_print+0x1e>
{
    1aee:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1af0:	f011 0f20 	tst.w	r1, #32
    1af4:	d003      	beq.n	1afe <newline_print+0x16>
		print_formatted(ctx, "\n");
    1af6:	4904      	ldr	r1, [pc, #16]	; (1b08 <newline_print+0x20>)
    1af8:	f7ff ff88 	bl	1a0c <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
    1afc:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    1afe:	4903      	ldr	r1, [pc, #12]	; (1b0c <newline_print+0x24>)
    1b00:	f7ff ff84 	bl	1a0c <print_formatted>
    1b04:	e7fa      	b.n	1afc <newline_print+0x14>
    1b06:	4770      	bx	lr
    1b08:	0000f894 	.word	0x0000f894
    1b0c:	0000fefc 	.word	0x0000fefc

00001b10 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    1b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1b14:	4605      	mov	r5, r0
    1b16:	460f      	mov	r7, r1
    1b18:	4616      	mov	r6, r2
    1b1a:	4698      	mov	r8, r3
	newline_print(output, flags);
    1b1c:	9906      	ldr	r1, [sp, #24]
    1b1e:	f7ff ffe3 	bl	1ae8 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
    1b22:	2400      	movs	r4, #0
    1b24:	4544      	cmp	r4, r8
    1b26:	da05      	bge.n	1b34 <hexdump_line_print+0x24>
		print_formatted(output, " ");
    1b28:	4923      	ldr	r1, [pc, #140]	; (1bb8 <hexdump_line_print+0xa8>)
    1b2a:	4628      	mov	r0, r5
    1b2c:	f7ff ff6e 	bl	1a0c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    1b30:	3401      	adds	r4, #1
    1b32:	e7f7      	b.n	1b24 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1b34:	2400      	movs	r4, #0
    1b36:	e009      	b.n	1b4c <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    1b38:	491f      	ldr	r1, [pc, #124]	; (1bb8 <hexdump_line_print+0xa8>)
    1b3a:	4628      	mov	r0, r5
    1b3c:	f7ff ff66 	bl	1a0c <print_formatted>
    1b40:	e00b      	b.n	1b5a <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    1b42:	491e      	ldr	r1, [pc, #120]	; (1bbc <hexdump_line_print+0xac>)
    1b44:	4628      	mov	r0, r5
    1b46:	f7ff ff61 	bl	1a0c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1b4a:	3401      	adds	r4, #1
    1b4c:	2c0f      	cmp	r4, #15
    1b4e:	dc0c      	bgt.n	1b6a <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    1b50:	2c00      	cmp	r4, #0
    1b52:	dd02      	ble.n	1b5a <hexdump_line_print+0x4a>
    1b54:	f014 0f07 	tst.w	r4, #7
    1b58:	d0ee      	beq.n	1b38 <hexdump_line_print+0x28>
		if (i < length) {
    1b5a:	42b4      	cmp	r4, r6
    1b5c:	d2f1      	bcs.n	1b42 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
    1b5e:	5d3a      	ldrb	r2, [r7, r4]
    1b60:	4917      	ldr	r1, [pc, #92]	; (1bc0 <hexdump_line_print+0xb0>)
    1b62:	4628      	mov	r0, r5
    1b64:	f7ff ff52 	bl	1a0c <print_formatted>
    1b68:	e7ef      	b.n	1b4a <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
    1b6a:	4916      	ldr	r1, [pc, #88]	; (1bc4 <hexdump_line_print+0xb4>)
    1b6c:	4628      	mov	r0, r5
    1b6e:	f7ff ff4d 	bl	1a0c <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1b72:	2400      	movs	r4, #0
    1b74:	e009      	b.n	1b8a <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    1b76:	4910      	ldr	r1, [pc, #64]	; (1bb8 <hexdump_line_print+0xa8>)
    1b78:	4628      	mov	r0, r5
    1b7a:	f7ff ff47 	bl	1a0c <print_formatted>
    1b7e:	e00b      	b.n	1b98 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
    1b80:	4911      	ldr	r1, [pc, #68]	; (1bc8 <hexdump_line_print+0xb8>)
    1b82:	4628      	mov	r0, r5
    1b84:	f7ff ff42 	bl	1a0c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1b88:	3401      	adds	r4, #1
    1b8a:	2c0f      	cmp	r4, #15
    1b8c:	dc12      	bgt.n	1bb4 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
    1b8e:	2c00      	cmp	r4, #0
    1b90:	dd02      	ble.n	1b98 <hexdump_line_print+0x88>
    1b92:	f014 0f07 	tst.w	r4, #7
    1b96:	d0ee      	beq.n	1b76 <hexdump_line_print+0x66>
		if (i < length) {
    1b98:	42b4      	cmp	r4, r6
    1b9a:	d206      	bcs.n	1baa <hexdump_line_print+0x9a>
			char c = (char)data[i];
    1b9c:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    1b9e:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
    1ba2:	2b5e      	cmp	r3, #94	; 0x5e
    1ba4:	d9ec      	bls.n	1b80 <hexdump_line_print+0x70>
    1ba6:	222e      	movs	r2, #46	; 0x2e
    1ba8:	e7ea      	b.n	1b80 <hexdump_line_print+0x70>
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    1baa:	4903      	ldr	r1, [pc, #12]	; (1bb8 <hexdump_line_print+0xa8>)
    1bac:	4628      	mov	r0, r5
    1bae:	f7ff ff2d 	bl	1a0c <print_formatted>
    1bb2:	e7e9      	b.n	1b88 <hexdump_line_print+0x78>
		}
	}
}
    1bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1bb8:	0000ee4c 	.word	0x0000ee4c
    1bbc:	0000ee30 	.word	0x0000ee30
    1bc0:	0000ee28 	.word	0x0000ee28
    1bc4:	0000ee34 	.word	0x0000ee34
    1bc8:	0000ee38 	.word	0x0000ee38

00001bcc <ids_print>:
{
    1bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1bd0:	4680      	mov	r8, r0
    1bd2:	4616      	mov	r6, r2
    1bd4:	461d      	mov	r5, r3
    1bd6:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
    1bda:	b959      	cbnz	r1, 1bf4 <ids_print+0x28>
	int total = 0;
    1bdc:	2400      	movs	r4, #0
	if (source_id >= 0) {
    1bde:	2f00      	cmp	r7, #0
    1be0:	db1c      	blt.n	1c1c <ids_print+0x50>
		total += print_formatted(output,
    1be2:	b186      	cbz	r6, 1c06 <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    1be4:	2301      	movs	r3, #1
    1be6:	9a07      	ldr	r2, [sp, #28]
    1be8:	4093      	lsls	r3, r2
				(func_on &&
    1bea:	f013 0f10 	tst.w	r3, #16
    1bee:	d118      	bne.n	1c22 <ids_print+0x56>
		total += print_formatted(output,
    1bf0:	4e0d      	ldr	r6, [pc, #52]	; (1c28 <ids_print+0x5c>)
    1bf2:	e009      	b.n	1c08 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
    1bf4:	4b0d      	ldr	r3, [pc, #52]	; (1c2c <ids_print+0x60>)
    1bf6:	9a07      	ldr	r2, [sp, #28]
    1bf8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1bfc:	490c      	ldr	r1, [pc, #48]	; (1c30 <ids_print+0x64>)
    1bfe:	f7ff ff05 	bl	1a0c <print_formatted>
    1c02:	4604      	mov	r4, r0
    1c04:	e7eb      	b.n	1bde <ids_print+0x12>
		total += print_formatted(output,
    1c06:	4e08      	ldr	r6, [pc, #32]	; (1c28 <ids_print+0x5c>)
    1c08:	4639      	mov	r1, r7
    1c0a:	4628      	mov	r0, r5
    1c0c:	f7ff fe4c 	bl	18a8 <log_source_name_get>
    1c10:	4602      	mov	r2, r0
    1c12:	4631      	mov	r1, r6
    1c14:	4640      	mov	r0, r8
    1c16:	f7ff fef9 	bl	1a0c <print_formatted>
    1c1a:	4404      	add	r4, r0
}
    1c1c:	4620      	mov	r0, r4
    1c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
    1c22:	4e04      	ldr	r6, [pc, #16]	; (1c34 <ids_print+0x68>)
    1c24:	e7f0      	b.n	1c08 <ids_print+0x3c>
    1c26:	bf00      	nop
    1c28:	0000ee3c 	.word	0x0000ee3c
    1c2c:	0000eeb4 	.word	0x0000eeb4
    1c30:	0000ee48 	.word	0x0000ee48
    1c34:	0000ee44 	.word	0x0000ee44

00001c38 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    1c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c3c:	b085      	sub	sp, #20
    1c3e:	4605      	mov	r5, r0
    1c40:	460c      	mov	r4, r1
    1c42:	4616      	mov	r6, r2
    1c44:	9303      	str	r3, [sp, #12]
    1c46:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    1c4a:	f001 0b02 	and.w	fp, r1, #2
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    1c4e:	f001 0a01 	and.w	sl, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    1c52:	f3c1 09c0 	ubfx	r9, r1, #3, #1
	const char *tag = z_log_get_tag();
    1c56:	f00a fdb2 	bl	c7be <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    1c5a:	b1e8      	cbz	r0, 1c98 <prefix_print+0x60>
    1c5c:	4602      	mov	r2, r0
		length += print_formatted(output, "%s ", tag);
    1c5e:	4913      	ldr	r1, [pc, #76]	; (1cac <prefix_print+0x74>)
    1c60:	4628      	mov	r0, r5
    1c62:	f7ff fed3 	bl	1a0c <print_formatted>
    1c66:	4607      	mov	r7, r0
	}

	if (stamp) {
    1c68:	f1bb 0f00 	cmp.w	fp, #0
    1c6c:	d116      	bne.n	1c9c <prefix_print+0x64>
			output, "%s - - - - ",
			output->control_block->hostname ?
			output->control_block->hostname :
			"zephyr");
	} else {
		color_prefix(output, colors_on, level);
    1c6e:	4642      	mov	r2, r8
    1c70:	4651      	mov	r1, sl
    1c72:	4628      	mov	r0, r5
    1c74:	f00a fe64 	bl	c940 <color_prefix>
	}

	length += ids_print(output, level_on, func_on,
    1c78:	f8cd 8004 	str.w	r8, [sp, #4]
    1c7c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
    1c80:	9300      	str	r3, [sp, #0]
    1c82:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    1c86:	4632      	mov	r2, r6
    1c88:	4649      	mov	r1, r9
    1c8a:	4628      	mov	r0, r5
    1c8c:	f7ff ff9e 	bl	1bcc <ids_print>
			domain_id, source_id, level);


	return length;
}
    1c90:	4438      	add	r0, r7
    1c92:	b005      	add	sp, #20
    1c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    1c98:	2700      	movs	r7, #0
    1c9a:	e7e5      	b.n	1c68 <prefix_print+0x30>
		length += timestamp_print(output, flags, timestamp);
    1c9c:	9a03      	ldr	r2, [sp, #12]
    1c9e:	4621      	mov	r1, r4
    1ca0:	4628      	mov	r0, r5
    1ca2:	f7ff fec5 	bl	1a30 <timestamp_print>
    1ca6:	4407      	add	r7, r0
    1ca8:	e7e1      	b.n	1c6e <prefix_print+0x36>
    1caa:	bf00      	nop
    1cac:	0000ee50 	.word	0x0000ee50

00001cb0 <hexdump_print>:
{
    1cb0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1cb4:	b089      	sub	sp, #36	; 0x24
    1cb6:	4607      	mov	r7, r0
    1cb8:	460e      	mov	r6, r1
    1cba:	4691      	mov	r9, r2
    1cbc:	4698      	mov	r8, r3
	print_formatted(output, "%s", log_msg_str_get(msg));
    1cbe:	f00a fe15 	bl	c8ec <log_msg_str_get>
    1cc2:	4602      	mov	r2, r0
    1cc4:	490e      	ldr	r1, [pc, #56]	; (1d00 <hexdump_print+0x50>)
    1cc6:	4630      	mov	r0, r6
    1cc8:	f7ff fea0 	bl	1a0c <print_formatted>
	uint32_t offset = 0U;
    1ccc:	2400      	movs	r4, #0
		length = sizeof(buf);
    1cce:	2510      	movs	r5, #16
    1cd0:	9503      	str	r5, [sp, #12]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    1cd2:	4623      	mov	r3, r4
    1cd4:	aa03      	add	r2, sp, #12
    1cd6:	eb0d 0105 	add.w	r1, sp, r5
    1cda:	4638      	mov	r0, r7
    1cdc:	f00a fe1b 	bl	c916 <log_msg_hexdump_data_get>
		if (length) {
    1ce0:	9a03      	ldr	r2, [sp, #12]
    1ce2:	b152      	cbz	r2, 1cfa <hexdump_print+0x4a>
			hexdump_line_print(output, buf, length,
    1ce4:	f8cd 8000 	str.w	r8, [sp]
    1ce8:	464b      	mov	r3, r9
    1cea:	eb0d 0105 	add.w	r1, sp, r5
    1cee:	4630      	mov	r0, r6
    1cf0:	f7ff ff0e 	bl	1b10 <hexdump_line_print>
			offset += length;
    1cf4:	9d03      	ldr	r5, [sp, #12]
    1cf6:	442c      	add	r4, r5
		length = sizeof(buf);
    1cf8:	e7e9      	b.n	1cce <hexdump_print+0x1e>
}
    1cfa:	b009      	add	sp, #36	; 0x24
    1cfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1d00:	0000ee24 	.word	0x0000ee24

00001d04 <raw_string_print>:
{
    1d04:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d06:	b083      	sub	sp, #12
    1d08:	4606      	mov	r6, r0
    1d0a:	460c      	mov	r4, r1
	bool eol = false;
    1d0c:	2700      	movs	r7, #0
	size_t offset = 0;
    1d0e:	463d      	mov	r5, r7
    1d10:	e00d      	b.n	1d2e <raw_string_print+0x2a>
			eol = (output->buf[length - 1] == '\n');
    1d12:	68a2      	ldr	r2, [r4, #8]
    1d14:	4413      	add	r3, r2
    1d16:	f813 7c01 	ldrb.w	r7, [r3, #-1]
    1d1a:	2f0a      	cmp	r7, #10
    1d1c:	bf14      	ite	ne
    1d1e:	2700      	movne	r7, #0
    1d20:	2701      	moveq	r7, #1
		log_output_flush(output);
    1d22:	4620      	mov	r0, r4
    1d24:	f00a ff7f 	bl	cc26 <log_output_flush>
		offset += length;
    1d28:	9b01      	ldr	r3, [sp, #4]
    1d2a:	441d      	add	r5, r3
	} while (length > 0);
    1d2c:	b173      	cbz	r3, 1d4c <raw_string_print+0x48>
		length = output->size;
    1d2e:	68e3      	ldr	r3, [r4, #12]
    1d30:	9301      	str	r3, [sp, #4]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
    1d32:	462b      	mov	r3, r5
    1d34:	aa01      	add	r2, sp, #4
    1d36:	68a1      	ldr	r1, [r4, #8]
    1d38:	4630      	mov	r0, r6
    1d3a:	f00a fdec 	bl	c916 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
    1d3e:	6863      	ldr	r3, [r4, #4]
    1d40:	9a01      	ldr	r2, [sp, #4]
    1d42:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    1d44:	9b01      	ldr	r3, [sp, #4]
    1d46:	2b00      	cmp	r3, #0
    1d48:	d0eb      	beq.n	1d22 <raw_string_print+0x1e>
    1d4a:	e7e2      	b.n	1d12 <raw_string_print+0xe>
	if (eol) {
    1d4c:	b90f      	cbnz	r7, 1d52 <raw_string_print+0x4e>
}
    1d4e:	b003      	add	sp, #12
    1d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(output, "\r");
    1d52:	4902      	ldr	r1, [pc, #8]	; (1d5c <raw_string_print+0x58>)
    1d54:	4620      	mov	r0, r4
    1d56:	f7ff fe59 	bl	1a0c <print_formatted>
}
    1d5a:	e7f8      	b.n	1d4e <raw_string_print+0x4a>
    1d5c:	0000ee54 	.word	0x0000ee54

00001d60 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    1d60:	b570      	push	{r4, r5, r6, lr}
    1d62:	b082      	sub	sp, #8
    1d64:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
    1d66:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1d68:	f242 730f 	movw	r3, #9999	; 0x270f
    1d6c:	428b      	cmp	r3, r1
    1d6e:	bf28      	it	cs
    1d70:	460b      	movcs	r3, r1
    1d72:	4a0e      	ldr	r2, [pc, #56]	; (1dac <log_output_dropped_process+0x4c>)
    1d74:	2105      	movs	r1, #5
    1d76:	4668      	mov	r0, sp
    1d78:	f009 ff92 	bl	bca0 <snprintk>
    1d7c:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
    1d7e:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    1d80:	685b      	ldr	r3, [r3, #4]
    1d82:	220b      	movs	r2, #11
    1d84:	490a      	ldr	r1, [pc, #40]	; (1db0 <log_output_dropped_process+0x50>)
    1d86:	4628      	mov	r0, r5
    1d88:	f00a fdcd 	bl	c926 <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
    1d8c:	6863      	ldr	r3, [r4, #4]
    1d8e:	685b      	ldr	r3, [r3, #4]
    1d90:	4632      	mov	r2, r6
    1d92:	4669      	mov	r1, sp
    1d94:	4628      	mov	r0, r5
    1d96:	f00a fdc6 	bl	c926 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
    1d9a:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    1d9c:	685b      	ldr	r3, [r3, #4]
    1d9e:	221b      	movs	r2, #27
    1da0:	4904      	ldr	r1, [pc, #16]	; (1db4 <log_output_dropped_process+0x54>)
    1da2:	4628      	mov	r0, r5
    1da4:	f00a fdbf 	bl	c926 <buffer_write>
}
    1da8:	b002      	add	sp, #8
    1daa:	bd70      	pop	{r4, r5, r6, pc}
    1dac:	0000f9ec 	.word	0x0000f9ec
    1db0:	0000eea8 	.word	0x0000eea8
    1db4:	0000ee8c 	.word	0x0000ee8c

00001db8 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    1db8:	4b07      	ldr	r3, [pc, #28]	; (1dd8 <log_output_timestamp_freq_set+0x20>)
    1dba:	2201      	movs	r2, #1
    1dbc:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    1dbe:	4b07      	ldr	r3, [pc, #28]	; (1ddc <log_output_timestamp_freq_set+0x24>)
    1dc0:	4298      	cmp	r0, r3
    1dc2:	d905      	bls.n	1dd0 <log_output_timestamp_freq_set+0x18>
		frequency /= 2U;
    1dc4:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    1dc6:	4a04      	ldr	r2, [pc, #16]	; (1dd8 <log_output_timestamp_freq_set+0x20>)
    1dc8:	6813      	ldr	r3, [r2, #0]
    1dca:	005b      	lsls	r3, r3, #1
    1dcc:	6013      	str	r3, [r2, #0]
    1dce:	e7f6      	b.n	1dbe <log_output_timestamp_freq_set+0x6>
	}

	freq = frequency;
    1dd0:	4b03      	ldr	r3, [pc, #12]	; (1de0 <log_output_timestamp_freq_set+0x28>)
    1dd2:	6018      	str	r0, [r3, #0]
}
    1dd4:	4770      	bx	lr
    1dd6:	bf00      	nop
    1dd8:	20000d20 	.word	0x20000d20
    1ddc:	000f4240 	.word	0x000f4240
    1de0:	20000d1c 	.word	0x20000d1c

00001de4 <char_out>:
		uart_poll_out(uart_dev, c);
	}
}

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    1de4:	b570      	push	{r4, r5, r6, lr}
    1de6:	4606      	mov	r6, r0
    1de8:	460d      	mov	r5, r1
		dict_char_out_hex(data, length);
		return length;
	}

	if (!IS_ENABLED(CONFIG_LOG_BACKEND_UART_ASYNC) || in_panic || !use_async) {
		for (size_t i = 0; i < length; i++) {
    1dea:	2400      	movs	r4, #0
    1dec:	42ac      	cmp	r4, r5
    1dee:	d207      	bcs.n	1e00 <char_out+0x1c>
			uart_poll_out(uart_dev, data[i]);
    1df0:	4b04      	ldr	r3, [pc, #16]	; (1e04 <char_out+0x20>)
    1df2:	6818      	ldr	r0, [r3, #0]
    1df4:	5d31      	ldrb	r1, [r6, r4]
	const struct uart_driver_api *api =
    1df6:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    1df8:	685b      	ldr	r3, [r3, #4]
    1dfa:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
    1dfc:	3401      	adds	r4, #1
    1dfe:	e7f5      	b.n	1dec <char_out+0x8>
	__ASSERT_NO_MSG(err == 0);

	(void)err;

	return length;
}
    1e00:	4628      	mov	r0, r5
    1e02:	bd70      	pop	{r4, r5, r6, pc}
    1e04:	20000d38 	.word	0x20000d38

00001e08 <log_backend_uart_init>:
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    1e08:	4b01      	ldr	r3, [pc, #4]	; (1e10 <log_backend_uart_init+0x8>)
    1e0a:	4a02      	ldr	r2, [pc, #8]	; (1e14 <log_backend_uart_init+0xc>)
    1e0c:	601a      	str	r2, [r3, #0]
		} else {
			LOG_WRN("Failed to initialize asynchronous mode (err:%d). "
				"Fallback to polling.", err);
		}
	}
}
    1e0e:	4770      	bx	lr
    1e10:	20000d38 	.word	0x20000d38
    1e14:	0000eab4 	.word	0x0000eab4

00001e18 <panic>:

static void panic(struct log_backend const *const backend)
{
    1e18:	b508      	push	{r3, lr}
	in_panic = true;
    1e1a:	4b03      	ldr	r3, [pc, #12]	; (1e28 <panic+0x10>)
    1e1c:	2201      	movs	r2, #1
    1e1e:	701a      	strb	r2, [r3, #0]
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    1e20:	4802      	ldr	r0, [pc, #8]	; (1e2c <panic+0x14>)
    1e22:	f00a ff00 	bl	cc26 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
    1e26:	bd08      	pop	{r3, pc}
    1e28:	20002536 	.word	0x20002536
    1e2c:	0000ef04 	.word	0x0000ef04

00001e30 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
    1e30:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    1e32:	4802      	ldr	r0, [pc, #8]	; (1e3c <dropped+0xc>)
    1e34:	f7ff ff94 	bl	1d60 <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
    1e38:	bd08      	pop	{r3, pc}
    1e3a:	bf00      	nop
    1e3c:	0000ef04 	.word	0x0000ef04

00001e40 <put>:
{
    1e40:	b510      	push	{r4, lr}
    1e42:	460c      	mov	r4, r1
	log_msg_get(msg);
    1e44:	4608      	mov	r0, r1
    1e46:	f00a fd2f 	bl	c8a8 <log_msg_get>
	log_output_msg_process(output, msg, flags);
    1e4a:	220f      	movs	r2, #15
    1e4c:	4621      	mov	r1, r4
    1e4e:	4803      	ldr	r0, [pc, #12]	; (1e5c <put+0x1c>)
    1e50:	f00a ff12 	bl	cc78 <log_output_msg_process>
	log_msg_put(msg);
    1e54:	4620      	mov	r0, r4
    1e56:	f00a fd4b 	bl	c8f0 <log_msg_put>
}
    1e5a:	bd10      	pop	{r4, pc}
    1e5c:	0000ef04 	.word	0x0000ef04

00001e60 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    1e60:	4b01      	ldr	r3, [pc, #4]	; (1e68 <log_backend_rtt_init+0x8>)
    1e62:	2201      	movs	r2, #1
    1e64:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    1e66:	4770      	bx	lr
    1e68:	20002537 	.word	0x20002537

00001e6c <on_failed_write>:
{
    1e6c:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
    1e6e:	b918      	cbnz	r0, 1e78 <on_failed_write+0xc>
		host_present = false;
    1e70:	4b08      	ldr	r3, [pc, #32]	; (1e94 <on_failed_write+0x28>)
    1e72:	2200      	movs	r2, #0
    1e74:	701a      	strb	r2, [r3, #0]
}
    1e76:	bd08      	pop	{r3, pc}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    1e78:	4b07      	ldr	r3, [pc, #28]	; (1e98 <on_failed_write+0x2c>)
    1e7a:	781b      	ldrb	r3, [r3, #0]
	} else if (is_sync_mode()) {
    1e7c:	b123      	cbz	r3, 1e88 <on_failed_write+0x1c>
	z_impl_k_busy_wait(usec_to_wait);
    1e7e:	f241 3088 	movw	r0, #5000	; 0x1388
    1e82:	f00c fca7 	bl	e7d4 <z_impl_k_busy_wait>
}
    1e86:	e7f6      	b.n	1e76 <on_failed_write+0xa>
	return z_impl_k_sleep(timeout);
    1e88:	20a4      	movs	r0, #164	; 0xa4
    1e8a:	2100      	movs	r1, #0
    1e8c:	f009 f9c6 	bl	b21c <z_impl_k_sleep>
}
    1e90:	e7f1      	b.n	1e76 <on_failed_write+0xa>
    1e92:	bf00      	nop
    1e94:	20002537 	.word	0x20002537
    1e98:	20002538 	.word	0x20002538

00001e9c <on_write>:
{
    1e9c:	b538      	push	{r3, r4, r5, lr}
    1e9e:	4604      	mov	r4, r0
	host_present = true;
    1ea0:	4b0a      	ldr	r3, [pc, #40]	; (1ecc <on_write+0x30>)
    1ea2:	2201      	movs	r2, #1
    1ea4:	701a      	strb	r2, [r3, #0]
	return panic_mode;
    1ea6:	4b0a      	ldr	r3, [pc, #40]	; (1ed0 <on_write+0x34>)
    1ea8:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
    1eaa:	b903      	cbnz	r3, 1eae <on_write+0x12>
}
    1eac:	bd38      	pop	{r3, r4, r5, pc}
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    1eae:	2000      	movs	r0, #0
    1eb0:	f008 f840 	bl	9f34 <SEGGER_RTT_HasDataUp>
    1eb4:	2800      	cmp	r0, #0
    1eb6:	d0f9      	beq.n	1eac <on_write+0x10>
    1eb8:	4b04      	ldr	r3, [pc, #16]	; (1ecc <on_write+0x30>)
    1eba:	781b      	ldrb	r3, [r3, #0]
    1ebc:	2b00      	cmp	r3, #0
    1ebe:	d0f5      	beq.n	1eac <on_write+0x10>
			on_failed_write(retry_cnt--);
    1ec0:	1e65      	subs	r5, r4, #1
    1ec2:	4620      	mov	r0, r4
    1ec4:	f7ff ffd2 	bl	1e6c <on_failed_write>
    1ec8:	462c      	mov	r4, r5
    1eca:	e7f0      	b.n	1eae <on_write+0x12>
    1ecc:	20002537 	.word	0x20002537
    1ed0:	20002538 	.word	0x20002538

00001ed4 <data_out_block_mode>:
{
    1ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1ed8:	4606      	mov	r6, r0
    1eda:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    1edc:	2704      	movs	r7, #4
    1ede:	e00d      	b.n	1efc <data_out_block_mode+0x28>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    1ee0:	462a      	mov	r2, r5
    1ee2:	4631      	mov	r1, r6
    1ee4:	2000      	movs	r0, #0
    1ee6:	f007 ffc1 	bl	9e6c <SEGGER_RTT_WriteSkipNoLock>
    1eea:	4604      	mov	r4, r0
    1eec:	e01c      	b.n	1f28 <data_out_block_mode+0x54>
			on_write(retry_cnt);
    1eee:	4638      	mov	r0, r7
    1ef0:	f7ff ffd4 	bl	1e9c <on_write>
	} while ((ret == 0) && host_present);
    1ef4:	bb1c      	cbnz	r4, 1f3e <data_out_block_mode+0x6a>
    1ef6:	4b16      	ldr	r3, [pc, #88]	; (1f50 <data_out_block_mode+0x7c>)
    1ef8:	781b      	ldrb	r3, [r3, #0]
    1efa:	b303      	cbz	r3, 1f3e <data_out_block_mode+0x6a>
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    1efc:	4b15      	ldr	r3, [pc, #84]	; (1f54 <data_out_block_mode+0x80>)
    1efe:	781b      	ldrb	r3, [r3, #0]
		if (!is_sync_mode()) {
    1f00:	2b00      	cmp	r3, #0
    1f02:	d1ed      	bne.n	1ee0 <data_out_block_mode+0xc>
	return z_impl_k_mutex_lock(mutex, timeout);
    1f04:	f8df 8050 	ldr.w	r8, [pc, #80]	; 1f58 <data_out_block_mode+0x84>
    1f08:	f04f 32ff 	mov.w	r2, #4294967295
    1f0c:	f04f 33ff 	mov.w	r3, #4294967295
    1f10:	4640      	mov	r0, r8
    1f12:	f008 fb3d 	bl	a590 <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    1f16:	462a      	mov	r2, r5
    1f18:	4631      	mov	r1, r6
    1f1a:	2000      	movs	r0, #0
    1f1c:	f007 ffa6 	bl	9e6c <SEGGER_RTT_WriteSkipNoLock>
    1f20:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    1f22:	4640      	mov	r0, r8
    1f24:	f008 fbbe 	bl	a6a4 <z_impl_k_mutex_unlock>
		if (ret) {
    1f28:	2c00      	cmp	r4, #0
    1f2a:	d1e0      	bne.n	1eee <data_out_block_mode+0x1a>
		} else if (host_present) {
    1f2c:	4b08      	ldr	r3, [pc, #32]	; (1f50 <data_out_block_mode+0x7c>)
    1f2e:	781b      	ldrb	r3, [r3, #0]
    1f30:	2b00      	cmp	r3, #0
    1f32:	d0df      	beq.n	1ef4 <data_out_block_mode+0x20>
			retry_cnt--;
    1f34:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
    1f36:	4638      	mov	r0, r7
    1f38:	f7ff ff98 	bl	1e6c <on_failed_write>
    1f3c:	e7da      	b.n	1ef4 <data_out_block_mode+0x20>
	return ((ret == 0) && host_present) ? 0 : length;
    1f3e:	b914      	cbnz	r4, 1f46 <data_out_block_mode+0x72>
    1f40:	4b03      	ldr	r3, [pc, #12]	; (1f50 <data_out_block_mode+0x7c>)
    1f42:	781b      	ldrb	r3, [r3, #0]
    1f44:	b903      	cbnz	r3, 1f48 <data_out_block_mode+0x74>
    1f46:	462c      	mov	r4, r5
}
    1f48:	4620      	mov	r0, r4
    1f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1f4e:	bf00      	nop
    1f50:	20002537 	.word	0x20002537
    1f54:	20002538 	.word	0x20002538
    1f58:	2000028c 	.word	0x2000028c

00001f5c <panic>:

static void panic(struct log_backend const *const backend)
{
    1f5c:	b508      	push	{r3, lr}
	panic_mode = true;
    1f5e:	4b03      	ldr	r3, [pc, #12]	; (1f6c <panic+0x10>)
    1f60:	2201      	movs	r2, #1
    1f62:	701a      	strb	r2, [r3, #0]
	log_output_flush(output);
    1f64:	4802      	ldr	r0, [pc, #8]	; (1f70 <panic+0x14>)
    1f66:	f00a fe5e 	bl	cc26 <log_output_flush>
	log_backend_std_panic(&log_output_rtt);
}
    1f6a:	bd08      	pop	{r3, pc}
    1f6c:	20002538 	.word	0x20002538
    1f70:	0000ef40 	.word	0x0000ef40

00001f74 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
    1f74:	b508      	push	{r3, lr}
	log_output_dropped_process(output, cnt);
    1f76:	4802      	ldr	r0, [pc, #8]	; (1f80 <dropped+0xc>)
    1f78:	f7ff fef2 	bl	1d60 <log_output_dropped_process>
	ARG_UNUSED(backend);

	log_backend_std_dropped(&log_output_rtt, cnt);
}
    1f7c:	bd08      	pop	{r3, pc}
    1f7e:	bf00      	nop
    1f80:	0000ef40 	.word	0x0000ef40

00001f84 <put>:
{
    1f84:	b510      	push	{r4, lr}
    1f86:	460c      	mov	r4, r1
	log_msg_get(msg);
    1f88:	4608      	mov	r0, r1
    1f8a:	f00a fc8d 	bl	c8a8 <log_msg_get>
	log_output_msg_process(output, msg, flags);
    1f8e:	220f      	movs	r2, #15
    1f90:	4621      	mov	r1, r4
    1f92:	4803      	ldr	r0, [pc, #12]	; (1fa0 <put+0x1c>)
    1f94:	f00a fe70 	bl	cc78 <log_output_msg_process>
	log_msg_put(msg);
    1f98:	4620      	mov	r0, r4
    1f9a:	f00a fca9 	bl	c8f0 <log_msg_put>
}
    1f9e:	bd10      	pop	{r4, pc}
    1fa0:	0000ef40 	.word	0x0000ef40

00001fa4 <usb_set_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
}

static bool usb_set_alt_setting(uint8_t iface, uint8_t alt_setting)
{
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    1fa4:	2807      	cmp	r0, #7
    1fa6:	d901      	bls.n	1fac <usb_set_alt_setting+0x8>
		usb_dev.alt_setting[iface] = alt_setting;
		return true;
	}

	return false;
    1fa8:	2000      	movs	r0, #0
}
    1faa:	4770      	bx	lr
		usb_dev.alt_setting[iface] = alt_setting;
    1fac:	4b02      	ldr	r3, [pc, #8]	; (1fb8 <usb_set_alt_setting+0x14>)
    1fae:	4418      	add	r0, r3
    1fb0:	f880 10bb 	strb.w	r1, [r0, #187]	; 0xbb
		return true;
    1fb4:	2001      	movs	r0, #1
    1fb6:	4770      	bx	lr
    1fb8:	20000d64 	.word	0x20000d64

00001fbc <usb_get_alt_setting>:

static uint8_t usb_get_alt_setting(uint8_t iface)
{
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    1fbc:	2807      	cmp	r0, #7
    1fbe:	d901      	bls.n	1fc4 <usb_get_alt_setting+0x8>
		return usb_dev.alt_setting[iface];
	}

	return 0;
    1fc0:	2000      	movs	r0, #0
}
    1fc2:	4770      	bx	lr
		return usb_dev.alt_setting[iface];
    1fc4:	4b02      	ldr	r3, [pc, #8]	; (1fd0 <usb_get_alt_setting+0x14>)
    1fc6:	4418      	add	r0, r3
    1fc8:	f890 00bb 	ldrb.w	r0, [r0, #187]	; 0xbb
    1fcc:	4770      	bx	lr
    1fce:	bf00      	nop
    1fd0:	20000d64 	.word	0x20000d64

00001fd4 <usb_handle_request>:
 *
 * @return true if the request was handles successfully
 */
static bool usb_handle_request(struct usb_setup_packet *setup,
			       int32_t *len, uint8_t **data)
{
    1fd4:	b510      	push	{r4, lr}
	uint32_t type = setup->RequestType.type;
    1fd6:	7803      	ldrb	r3, [r0, #0]
    1fd8:	f3c3 1341 	ubfx	r3, r3, #5, #2
	if (type >= MAX_NUM_REQ_HANDLERS) {
		LOG_DBG("Error Incorrect iType %d", type);
		return false;
	}

	handler = usb_dev.req_handlers[type];
    1fdc:	330a      	adds	r3, #10
    1fde:	4c06      	ldr	r4, [pc, #24]	; (1ff8 <usb_handle_request+0x24>)
    1fe0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
	if (handler == NULL) {
    1fe4:	b123      	cbz	r3, 1ff0 <usb_handle_request+0x1c>
		LOG_DBG("No handler for reqtype %d", type);
		return false;
	}

	if ((*handler)(setup, len, data) < 0) {
    1fe6:	4798      	blx	r3
    1fe8:	2800      	cmp	r0, #0
    1fea:	db03      	blt.n	1ff4 <usb_handle_request+0x20>
		LOG_DBG("Handler Error %d", type);
		usb_print_setup(setup);
		return false;
	}

	return true;
    1fec:	2001      	movs	r0, #1
}
    1fee:	bd10      	pop	{r4, pc}
		return false;
    1ff0:	2000      	movs	r0, #0
    1ff2:	e7fc      	b.n	1fee <usb_handle_request+0x1a>
		return false;
    1ff4:	2000      	movs	r0, #0
    1ff6:	e7fa      	b.n	1fee <usb_handle_request+0x1a>
    1ff8:	20000d64 	.word	0x20000d64

00001ffc <usb_register_request_handler>:
 * @return N/A
 */
static void usb_register_request_handler(int32_t type,
					 usb_request_handler handler)
{
	usb_dev.req_handlers[type] = handler;
    1ffc:	300a      	adds	r0, #10
    1ffe:	4b02      	ldr	r3, [pc, #8]	; (2008 <usb_register_request_handler+0xc>)
    2000:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    2004:	4770      	bx	lr
    2006:	bf00      	nop
    2008:	20000d64 	.word	0x20000d64

0000200c <usb_register_descriptors>:
 *
 * @param [in] usb_descriptors The descriptor byte array
 */
static void usb_register_descriptors(const uint8_t *usb_descriptors)
{
	usb_dev.descriptors = usb_descriptors;
    200c:	4b01      	ldr	r3, [pc, #4]	; (2014 <usb_register_descriptors+0x8>)
    200e:	6258      	str	r0, [r3, #36]	; 0x24
}
    2010:	4770      	bx	lr
    2012:	bf00      	nop
    2014:	20000d64 	.word	0x20000d64

00002018 <usb_get_status>:

static bool usb_get_status(struct usb_setup_packet *setup,
			   int32_t *len, uint8_t **data_buf)
{
	uint8_t *data = *data_buf;
    2018:	6813      	ldr	r3, [r2, #0]

	LOG_DBG("Get Status request");
	data[0] = 0U;
	data[1] = 0U;
    201a:	2200      	movs	r2, #0
    201c:	705a      	strb	r2, [r3, #1]

	if (IS_ENABLED(CONFIG_USB_SELF_POWERED)) {
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    201e:	2201      	movs	r2, #1
    2020:	701a      	strb	r2, [r3, #0]
	}

	if (IS_ENABLED(CONFIG_USB_DEVICE_REMOTE_WAKEUP)) {
		data[0] |= (usb_dev.remote_wakeup ?
    2022:	4a07      	ldr	r2, [pc, #28]	; (2040 <usb_get_status+0x28>)
    2024:	f892 20c3 	ldrb.w	r2, [r2, #195]	; 0xc3
    2028:	b13a      	cbz	r2, 203a <usb_get_status+0x22>
    202a:	2202      	movs	r2, #2
    202c:	f042 0201 	orr.w	r2, r2, #1
    2030:	701a      	strb	r2, [r3, #0]
			    USB_GET_STATUS_REMOTE_WAKEUP : 0);
	}

	*len = 2;
    2032:	2302      	movs	r3, #2
    2034:	600b      	str	r3, [r1, #0]

	return true;
}
    2036:	2001      	movs	r0, #1
    2038:	4770      	bx	lr
		data[0] |= (usb_dev.remote_wakeup ?
    203a:	2200      	movs	r2, #0
    203c:	e7f6      	b.n	202c <usb_get_status+0x14>
    203e:	bf00      	nop
    2040:	20000d64 	.word	0x20000d64

00002044 <usb_get_descriptor>:
 *
 * @return true if the descriptor was found, false otherwise
 */
static bool usb_get_descriptor(struct usb_setup_packet *setup,
			       int32_t *len, uint8_t **data)
{
    2044:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t *p = NULL;
	uint32_t cur_index = 0U;
	bool found = false;

	LOG_DBG("Get Descriptor request");
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    2046:	8847      	ldrh	r7, [r0, #2]
    2048:	0a3d      	lsrs	r5, r7, #8

	/*
	 * Invalid types of descriptors,
	 * see USB Spec. Revision 2.0, 9.4.3 Get Descriptor
	 */
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    204a:	1f2b      	subs	r3, r5, #4
    204c:	b2db      	uxtb	r3, r3
    204e:	2b01      	cmp	r3, #1
    2050:	d91e      	bls.n	2090 <usb_get_descriptor+0x4c>
    2052:	b2ff      	uxtb	r7, r7
    2054:	2d07      	cmp	r5, #7
    2056:	d81e      	bhi.n	2096 <usb_get_descriptor+0x52>
	    (type > USB_DESC_OTHER_SPEED)) {
		return false;
	}

	p = (uint8_t *)usb_dev.descriptors;
    2058:	4b10      	ldr	r3, [pc, #64]	; (209c <usb_get_descriptor+0x58>)
    205a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	cur_index = 0U;
    205c:	2600      	movs	r6, #0

	while (p[DESC_bLength] != 0U) {
    205e:	e000      	b.n	2062 <usb_get_descriptor+0x1e>
				break;
			}
			cur_index++;
		}
		/* skip to next descriptor */
		p += p[DESC_bLength];
    2060:	4403      	add	r3, r0
	while (p[DESC_bLength] != 0U) {
    2062:	7818      	ldrb	r0, [r3, #0]
    2064:	b138      	cbz	r0, 2076 <usb_get_descriptor+0x32>
		if (p[DESC_bDescriptorType] == type) {
    2066:	785c      	ldrb	r4, [r3, #1]
    2068:	42ac      	cmp	r4, r5
    206a:	d1f9      	bne.n	2060 <usb_get_descriptor+0x1c>
			if (cur_index == index) {
    206c:	42b7      	cmp	r7, r6
    206e:	d001      	beq.n	2074 <usb_get_descriptor+0x30>
			cur_index++;
    2070:	3601      	adds	r6, #1
    2072:	e7f5      	b.n	2060 <usb_get_descriptor+0x1c>
				found = true;
    2074:	2001      	movs	r0, #1
	}

	if (found) {
    2076:	b160      	cbz	r0, 2092 <usb_get_descriptor+0x4e>
		/* set data pointer */
		*data = p;
    2078:	6013      	str	r3, [r2, #0]
		/* get length from structure */
		if (type == USB_DESC_CONFIGURATION) {
    207a:	2d02      	cmp	r5, #2
    207c:	d002      	beq.n	2084 <usb_get_descriptor+0x40>
			 */
			*len = (p[CONF_DESC_wTotalLength]) |
			    (p[CONF_DESC_wTotalLength + 1] << 8);
		} else {
			/* normally length is at offset 0 */
			*len = p[DESC_bLength];
    207e:	781b      	ldrb	r3, [r3, #0]
    2080:	600b      	str	r3, [r1, #0]
    2082:	e006      	b.n	2092 <usb_get_descriptor+0x4e>
			*len = (p[CONF_DESC_wTotalLength]) |
    2084:	789a      	ldrb	r2, [r3, #2]
			    (p[CONF_DESC_wTotalLength + 1] << 8);
    2086:	78db      	ldrb	r3, [r3, #3]
			*len = (p[CONF_DESC_wTotalLength]) |
    2088:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    208c:	600b      	str	r3, [r1, #0]
    208e:	e000      	b.n	2092 <usb_get_descriptor+0x4e>
		return false;
    2090:	2000      	movs	r0, #0
	} else {
		/* nothing found */
		LOG_DBG("Desc %x not found!", setup->wValue);
	}
	return found;
}
    2092:	bcf0      	pop	{r4, r5, r6, r7}
    2094:	4770      	bx	lr
		return false;
    2096:	2000      	movs	r0, #0
    2098:	e7fb      	b.n	2092 <usb_get_descriptor+0x4e>
    209a:	bf00      	nop
    209c:	20000d64 	.word	0x20000d64

000020a0 <usb_get_interface>:
	return ret;
}

static bool usb_get_interface(struct usb_setup_packet *setup,
			      int32_t *len, uint8_t **data_buf)
{
    20a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    20a2:	4684      	mov	ip, r0
    20a4:	460e      	mov	r6, r1
	const uint8_t *p = usb_dev.descriptors;
    20a6:	4b0c      	ldr	r3, [pc, #48]	; (20d8 <usb_get_interface+0x38>)
    20a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	uint8_t *data = *data_buf;
    20aa:	6817      	ldr	r7, [r2, #0]
	uint8_t cur_iface;

	while (p[DESC_bLength] != 0U) {
    20ac:	e000      	b.n	20b0 <usb_get_interface+0x10>
				return true;
			}
		}

		/* skip to next descriptor */
		p += p[DESC_bLength];
    20ae:	4413      	add	r3, r2
	while (p[DESC_bLength] != 0U) {
    20b0:	781a      	ldrb	r2, [r3, #0]
    20b2:	b172      	cbz	r2, 20d2 <usb_get_interface+0x32>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    20b4:	785c      	ldrb	r4, [r3, #1]
    20b6:	2c04      	cmp	r4, #4
    20b8:	d1f9      	bne.n	20ae <usb_get_interface+0xe>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    20ba:	7898      	ldrb	r0, [r3, #2]
			if (cur_iface == setup->wIndex) {
    20bc:	b285      	uxth	r5, r0
    20be:	f8bc 4004 	ldrh.w	r4, [ip, #4]
    20c2:	42a5      	cmp	r5, r4
    20c4:	d1f3      	bne.n	20ae <usb_get_interface+0xe>
				data[0] = usb_get_alt_setting(cur_iface);
    20c6:	f7ff ff79 	bl	1fbc <usb_get_alt_setting>
    20ca:	7038      	strb	r0, [r7, #0]
				*len = 1;
    20cc:	2001      	movs	r0, #1
    20ce:	6030      	str	r0, [r6, #0]
				return true;
    20d0:	e000      	b.n	20d4 <usb_get_interface+0x34>
	}

	return false;
    20d2:	2000      	movs	r0, #0
}
    20d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    20d6:	bf00      	nop
    20d8:	20000d64 	.word	0x20000d64

000020dc <is_device_configured>:
 *
 * @return true if Configured, false otherwise.
 */
static bool is_device_configured(void)
{
	return (usb_dev.configuration != 0);
    20dc:	4b03      	ldr	r3, [pc, #12]	; (20ec <is_device_configured+0x10>)
    20de:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
}
    20e2:	3800      	subs	r0, #0
    20e4:	bf18      	it	ne
    20e6:	2001      	movne	r0, #1
    20e8:	4770      	bx	lr
    20ea:	bf00      	nop
    20ec:	20000d64 	.word	0x20000d64

000020f0 <is_interface_valid>:
 *
 * @return true if interface exists - valid
 */
static bool is_interface_valid(uint8_t interface)
{
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    20f0:	4b07      	ldr	r3, [pc, #28]	; (2110 <is_interface_valid+0x20>)
    20f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	const struct usb_cfg_descriptor *cfg_descr;

	/* Search through descriptor for matching interface */
	while (p[DESC_bLength] != 0U) {
    20f4:	e000      	b.n	20f8 <is_interface_valid+0x8>
			cfg_descr = (const struct usb_cfg_descriptor *)p;
			if (interface < cfg_descr->bNumInterfaces) {
				return true;
			}
		}
		p += p[DESC_bLength];
    20f6:	4413      	add	r3, r2
	while (p[DESC_bLength] != 0U) {
    20f8:	781a      	ldrb	r2, [r3, #0]
    20fa:	b13a      	cbz	r2, 210c <is_interface_valid+0x1c>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    20fc:	7859      	ldrb	r1, [r3, #1]
    20fe:	2902      	cmp	r1, #2
    2100:	d1f9      	bne.n	20f6 <is_interface_valid+0x6>
			if (interface < cfg_descr->bNumInterfaces) {
    2102:	7919      	ldrb	r1, [r3, #4]
    2104:	4281      	cmp	r1, r0
    2106:	d9f6      	bls.n	20f6 <is_interface_valid+0x6>
				return true;
    2108:	2001      	movs	r0, #1
	}

	return false;
}
    210a:	4770      	bx	lr
	return false;
    210c:	2000      	movs	r0, #0
    210e:	4770      	bx	lr
    2110:	20000d64 	.word	0x20000d64

00002114 <is_ep_valid>:
static bool is_ep_valid(uint8_t ep)
{
	const struct usb_ep_cfg_data *ep_data;

	/* Check if its Endpoint 0 */
	if (USB_EP_GET_IDX(ep) == 0) {
    2114:	f030 0380 	bics.w	r3, r0, #128	; 0x80
    2118:	d018      	beq.n	214c <is_ep_valid+0x38>
		return true;
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    211a:	4910      	ldr	r1, [pc, #64]	; (215c <is_ep_valid+0x48>)
    211c:	4b10      	ldr	r3, [pc, #64]	; (2160 <is_ep_valid+0x4c>)
    211e:	4299      	cmp	r1, r3
    2120:	d219      	bcs.n	2156 <is_ep_valid+0x42>
{
    2122:	b410      	push	{r4}
    2124:	e003      	b.n	212e <is_ep_valid+0x1a>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2126:	3124      	adds	r1, #36	; 0x24
    2128:	4b0d      	ldr	r3, [pc, #52]	; (2160 <is_ep_valid+0x4c>)
    212a:	4299      	cmp	r1, r3
    212c:	d20c      	bcs.n	2148 <is_ep_valid+0x34>
		ep_data = cfg_data->endpoint;
    212e:	6a0c      	ldr	r4, [r1, #32]

		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    2130:	2300      	movs	r3, #0
    2132:	7f0a      	ldrb	r2, [r1, #28]
    2134:	429a      	cmp	r2, r3
    2136:	d9f6      	bls.n	2126 <is_ep_valid+0x12>
			if (ep_data[n].ep_addr == ep) {
    2138:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    213c:	7912      	ldrb	r2, [r2, #4]
    213e:	4282      	cmp	r2, r0
    2140:	d006      	beq.n	2150 <is_ep_valid+0x3c>
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    2142:	3301      	adds	r3, #1
    2144:	b2db      	uxtb	r3, r3
    2146:	e7f4      	b.n	2132 <is_ep_valid+0x1e>
				return true;
			}
		}
	}

	return false;
    2148:	2000      	movs	r0, #0
    214a:	e002      	b.n	2152 <is_ep_valid+0x3e>
		return true;
    214c:	2001      	movs	r0, #1
    214e:	4770      	bx	lr
				return true;
    2150:	2001      	movs	r0, #1
}
    2152:	bc10      	pop	{r4}
    2154:	4770      	bx	lr
	return false;
    2156:	2000      	movs	r0, #0
}
    2158:	4770      	bx	lr
    215a:	bf00      	nop
    215c:	200003a8 	.word	0x200003a8
    2160:	200003cc 	.word	0x200003cc

00002164 <usb_register_custom_req_handler>:
 *
 * @param [in] handler Callback function pointer
 */
static void usb_register_custom_req_handler(usb_request_handler handler)
{
	usb_dev.custom_req_handler = handler;
    2164:	4b01      	ldr	r3, [pc, #4]	; (216c <usb_register_custom_req_handler+0x8>)
    2166:	6198      	str	r0, [r3, #24]
}
    2168:	4770      	bx	lr
    216a:	bf00      	nop
    216c:	20000d64 	.word	0x20000d64

00002170 <usb_register_status_callback>:
 *
 * @param [in] cb Callback function pointer
 */
static void usb_register_status_callback(usb_dc_status_callback cb)
{
	usb_dev.status_callback = cb;
    2170:	4b01      	ldr	r3, [pc, #4]	; (2178 <usb_register_status_callback+0x8>)
    2172:	61d8      	str	r0, [r3, #28]
}
    2174:	4770      	bx	lr
    2176:	bf00      	nop
    2178:	20000d64 	.word	0x20000d64

0000217c <foreach_ep>:

static int foreach_ep(int (* endpoint_callback)(const struct usb_ep_cfg_data *))
{
    217c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    217e:	4606      	mov	r6, r0
	struct usb_ep_cfg_data *ep_data;

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2180:	4d0a      	ldr	r5, [pc, #40]	; (21ac <foreach_ep+0x30>)
    2182:	4b0b      	ldr	r3, [pc, #44]	; (21b0 <foreach_ep+0x34>)
    2184:	429d      	cmp	r5, r3
    2186:	d20e      	bcs.n	21a6 <foreach_ep+0x2a>
		ep_data = cfg_data->endpoint;
    2188:	6a2f      	ldr	r7, [r5, #32]

		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    218a:	2400      	movs	r4, #0
    218c:	7f2b      	ldrb	r3, [r5, #28]
    218e:	42a3      	cmp	r3, r4
    2190:	d907      	bls.n	21a2 <foreach_ep+0x26>
			int ret;

			ret = endpoint_callback(&ep_data[n]);
    2192:	eb07 00c4 	add.w	r0, r7, r4, lsl #3
    2196:	47b0      	blx	r6
			if (ret < 0) {
    2198:	2800      	cmp	r0, #0
    219a:	db05      	blt.n	21a8 <foreach_ep+0x2c>
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    219c:	3401      	adds	r4, #1
    219e:	b2e4      	uxtb	r4, r4
    21a0:	e7f4      	b.n	218c <foreach_ep+0x10>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    21a2:	3524      	adds	r5, #36	; 0x24
    21a4:	e7ed      	b.n	2182 <foreach_ep+0x6>
				return ret;
			}
		}
	}

	return 0;
    21a6:	2000      	movs	r0, #0
}
    21a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    21aa:	bf00      	nop
    21ac:	200003a8 	.word	0x200003a8
    21b0:	200003cc 	.word	0x200003cc

000021b4 <class_handler>:
 * usb_enable() is no longer needed.
 */

static int class_handler(struct usb_setup_packet *pSetup,
			 int32_t *len, uint8_t **data)
{
    21b4:	b570      	push	{r4, r5, r6, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    21b6:	4b0b      	ldr	r3, [pc, #44]	; (21e4 <class_handler+0x30>)
    21b8:	e000      	b.n	21bc <class_handler+0x8>
    21ba:	3324      	adds	r3, #36	; 0x24
    21bc:	4c0a      	ldr	r4, [pc, #40]	; (21e8 <class_handler+0x34>)
    21be:	42a3      	cmp	r3, r4
    21c0:	d20d      	bcs.n	21de <class_handler+0x2a>
		iface = &cfg_data->interface;
		if_descr = cfg_data->interface_descriptor;
    21c2:	685c      	ldr	r4, [r3, #4]
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    21c4:	4d09      	ldr	r5, [pc, #36]	; (21ec <class_handler+0x38>)
    21c6:	6a6d      	ldr	r5, [r5, #36]	; 0x24
    21c8:	42ac      	cmp	r4, r5
    21ca:	d3f6      	bcc.n	21ba <class_handler+0x6>
			continue;
		}

		if (iface->class_handler &&
    21cc:	691d      	ldr	r5, [r3, #16]
    21ce:	2d00      	cmp	r5, #0
    21d0:	d0f3      	beq.n	21ba <class_handler+0x6>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    21d2:	78a6      	ldrb	r6, [r4, #2]
    21d4:	7904      	ldrb	r4, [r0, #4]
		if (iface->class_handler &&
    21d6:	42a6      	cmp	r6, r4
    21d8:	d1ef      	bne.n	21ba <class_handler+0x6>
			return iface->class_handler(pSetup, len, data);
    21da:	47a8      	blx	r5
    21dc:	e001      	b.n	21e2 <class_handler+0x2e>
		}
	}

	return -ENOTSUP;
    21de:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    21e2:	bd70      	pop	{r4, r5, r6, pc}
    21e4:	200003a8 	.word	0x200003a8
    21e8:	200003cc 	.word	0x200003cc
    21ec:	20000d64 	.word	0x20000d64

000021f0 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    21f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    21f4:	4606      	mov	r6, r0
    21f6:	460f      	mov	r7, r1
    21f8:	4690      	mov	r8, r2
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    21fa:	4c11      	ldr	r4, [pc, #68]	; (2240 <custom_handler+0x50>)
    21fc:	e005      	b.n	220a <custom_handler+0x1a>
		if (iface->custom_handler == NULL) {
			continue;
		}

		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
			return iface->custom_handler(pSetup, len, data);
    21fe:	4642      	mov	r2, r8
    2200:	4639      	mov	r1, r7
    2202:	4630      	mov	r0, r6
    2204:	47a8      	blx	r5
    2206:	e019      	b.n	223c <custom_handler+0x4c>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2208:	3424      	adds	r4, #36	; 0x24
    220a:	4b0e      	ldr	r3, [pc, #56]	; (2244 <custom_handler+0x54>)
    220c:	429c      	cmp	r4, r3
    220e:	d213      	bcs.n	2238 <custom_handler+0x48>
		if_descr = cfg_data->interface_descriptor;
    2210:	6863      	ldr	r3, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    2212:	4d0d      	ldr	r5, [pc, #52]	; (2248 <custom_handler+0x58>)
    2214:	6a6d      	ldr	r5, [r5, #36]	; 0x24
    2216:	42ab      	cmp	r3, r5
    2218:	d3f6      	bcc.n	2208 <custom_handler+0x18>
		if (iface->custom_handler == NULL) {
    221a:	69a5      	ldr	r5, [r4, #24]
    221c:	2d00      	cmp	r5, #0
    221e:	d0f3      	beq.n	2208 <custom_handler+0x18>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    2220:	7899      	ldrb	r1, [r3, #2]
    2222:	7932      	ldrb	r2, [r6, #4]
    2224:	4291      	cmp	r1, r2
    2226:	d0ea      	beq.n	21fe <custom_handler+0xe>
			 * the first interface, but the request may be for
			 * subsequent ones, so forward each request to audio.
			 * The class does not actively engage in request
			 * handling and therefore we can ignore return value.
			 */
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    2228:	795b      	ldrb	r3, [r3, #5]
    222a:	2b01      	cmp	r3, #1
    222c:	d1ec      	bne.n	2208 <custom_handler+0x18>
				(void)iface->custom_handler(pSetup, len, data);
    222e:	4642      	mov	r2, r8
    2230:	4639      	mov	r1, r7
    2232:	4630      	mov	r0, r6
    2234:	47a8      	blx	r5
    2236:	e7e7      	b.n	2208 <custom_handler+0x18>
			}
		}
	}

	return -ENOTSUP;
    2238:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    223c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2240:	200003a8 	.word	0x200003a8
    2244:	200003cc 	.word	0x200003cc
    2248:	20000d64 	.word	0x20000d64

0000224c <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    224c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    224e:	4607      	mov	r7, r0
    2250:	460e      	mov	r6, r1
    2252:	4615      	mov	r5, r2
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2254:	4c0a      	ldr	r4, [pc, #40]	; (2280 <vendor_handler+0x34>)
    2256:	e000      	b.n	225a <vendor_handler+0xe>
    2258:	3424      	adds	r4, #36	; 0x24
    225a:	4b0a      	ldr	r3, [pc, #40]	; (2284 <vendor_handler+0x38>)
    225c:	429c      	cmp	r4, r3
    225e:	d20a      	bcs.n	2276 <vendor_handler+0x2a>
		iface = &cfg_data->interface;
		if (iface->vendor_handler) {
    2260:	6963      	ldr	r3, [r4, #20]
    2262:	2b00      	cmp	r3, #0
    2264:	d0f8      	beq.n	2258 <vendor_handler+0xc>
			if (!iface->vendor_handler(pSetup, len, data)) {
    2266:	462a      	mov	r2, r5
    2268:	4631      	mov	r1, r6
    226a:	4638      	mov	r0, r7
    226c:	4798      	blx	r3
    226e:	4603      	mov	r3, r0
    2270:	2800      	cmp	r0, #0
    2272:	d1f1      	bne.n	2258 <vendor_handler+0xc>
    2274:	e001      	b.n	227a <vendor_handler+0x2e>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    2276:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    227a:	4618      	mov	r0, r3
    227c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    227e:	bf00      	nop
    2280:	200003a8 	.word	0x200003a8
    2284:	200003cc 	.word	0x200003cc

00002288 <usb_halt_endpoint_req>:
{
    2288:	b570      	push	{r4, r5, r6, lr}
    228a:	b082      	sub	sp, #8
    228c:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    228e:	7904      	ldrb	r4, [r0, #4]
    2290:	f88d 4007 	strb.w	r4, [sp, #7]
	if (!is_ep_valid(ep)) {
    2294:	4620      	mov	r0, r4
    2296:	f7ff ff3d 	bl	2114 <is_ep_valid>
    229a:	4606      	mov	r6, r0
    229c:	b130      	cbz	r0, 22ac <usb_halt_endpoint_req+0x24>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    229e:	f034 0380 	bics.w	r3, r4, #128	; 0x80
    22a2:	d006      	beq.n	22b2 <usb_halt_endpoint_req+0x2a>
    22a4:	f7ff ff1a 	bl	20dc <is_device_configured>
    22a8:	b918      	cbnz	r0, 22b2 <usb_halt_endpoint_req+0x2a>
	return false;
    22aa:	4606      	mov	r6, r0
}
    22ac:	4630      	mov	r0, r6
    22ae:	b002      	add	sp, #8
    22b0:	bd70      	pop	{r4, r5, r6, pc}
		if (halt) {
    22b2:	b15d      	cbz	r5, 22cc <usb_halt_endpoint_req+0x44>
			usb_dc_ep_set_stall(ep);
    22b4:	4620      	mov	r0, r4
    22b6:	f003 fbf9 	bl	5aac <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    22ba:	4b0a      	ldr	r3, [pc, #40]	; (22e4 <usb_halt_endpoint_req+0x5c>)
    22bc:	69db      	ldr	r3, [r3, #28]
    22be:	2b00      	cmp	r3, #0
    22c0:	d0f4      	beq.n	22ac <usb_halt_endpoint_req+0x24>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    22c2:	f10d 0107 	add.w	r1, sp, #7
    22c6:	2008      	movs	r0, #8
    22c8:	4798      	blx	r3
    22ca:	e7ef      	b.n	22ac <usb_halt_endpoint_req+0x24>
			usb_dc_ep_clear_stall(ep);
    22cc:	4620      	mov	r0, r4
    22ce:	f003 fc33 	bl	5b38 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    22d2:	4b04      	ldr	r3, [pc, #16]	; (22e4 <usb_halt_endpoint_req+0x5c>)
    22d4:	69db      	ldr	r3, [r3, #28]
    22d6:	2b00      	cmp	r3, #0
    22d8:	d0e8      	beq.n	22ac <usb_halt_endpoint_req+0x24>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    22da:	f10d 0107 	add.w	r1, sp, #7
    22de:	2009      	movs	r0, #9
    22e0:	4798      	blx	r3
		return true;
    22e2:	e7e3      	b.n	22ac <usb_halt_endpoint_req+0x24>
    22e4:	20000d64 	.word	0x20000d64

000022e8 <set_endpoint>:
{
    22e8:	b500      	push	{lr}
    22ea:	b083      	sub	sp, #12
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    22ec:	7883      	ldrb	r3, [r0, #2]
    22ee:	f88d 3000 	strb.w	r3, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    22f2:	8883      	ldrh	r3, [r0, #4]
    22f4:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    22f8:	78c3      	ldrb	r3, [r0, #3]
    22fa:	f003 0303 	and.w	r3, r3, #3
    22fe:	f88d 3004 	strb.w	r3, [sp, #4]
	ret = usb_dc_ep_configure(&ep_cfg);
    2302:	4668      	mov	r0, sp
    2304:	f003 fb94 	bl	5a30 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    2308:	f110 0f78 	cmn.w	r0, #120	; 0x78
    230c:	d000      	beq.n	2310 <set_endpoint+0x28>
	} else if (ret) {
    230e:	b970      	cbnz	r0, 232e <set_endpoint+0x46>
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    2310:	f89d 0000 	ldrb.w	r0, [sp]
    2314:	f003 fc5a 	bl	5bcc <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    2318:	f110 0f78 	cmn.w	r0, #120	; 0x78
    231c:	d000      	beq.n	2320 <set_endpoint+0x38>
	} else if (ret) {
    231e:	b9d0      	cbnz	r0, 2356 <set_endpoint+0x6e>
	usb_dev.configured = true;
    2320:	2001      	movs	r0, #1
    2322:	4b17      	ldr	r3, [pc, #92]	; (2380 <set_endpoint+0x98>)
    2324:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
}
    2328:	b003      	add	sp, #12
    232a:	f85d fb04 	ldr.w	pc, [sp], #4
    232e:	4b15      	ldr	r3, [pc, #84]	; (2384 <set_endpoint+0x9c>)
    2330:	4a15      	ldr	r2, [pc, #84]	; (2388 <set_endpoint+0xa0>)
    2332:	1a9b      	subs	r3, r3, r2
    2334:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
    2336:	f04f 0200 	mov.w	r2, #0
    233a:	2101      	movs	r1, #1
    233c:	f361 0202 	bfi	r2, r1, #0, #3
    2340:	f36f 02c5 	bfc	r2, #3, #3
    2344:	f363 128f 	bfi	r2, r3, #6, #10
    2348:	f89d 1000 	ldrb.w	r1, [sp]
    234c:	480f      	ldr	r0, [pc, #60]	; (238c <set_endpoint+0xa4>)
    234e:	f7ff f9a9 	bl	16a4 <log_1>
		return false;
    2352:	2000      	movs	r0, #0
    2354:	e7e8      	b.n	2328 <set_endpoint+0x40>
    2356:	4b0b      	ldr	r3, [pc, #44]	; (2384 <set_endpoint+0x9c>)
    2358:	4a0b      	ldr	r2, [pc, #44]	; (2388 <set_endpoint+0xa0>)
    235a:	1a9b      	subs	r3, r3, r2
    235c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    235e:	f04f 0200 	mov.w	r2, #0
    2362:	2101      	movs	r1, #1
    2364:	f361 0202 	bfi	r2, r1, #0, #3
    2368:	f36f 02c5 	bfc	r2, #3, #3
    236c:	f363 128f 	bfi	r2, r3, #6, #10
    2370:	f89d 1000 	ldrb.w	r1, [sp]
    2374:	4806      	ldr	r0, [pc, #24]	; (2390 <set_endpoint+0xa8>)
    2376:	f7ff f995 	bl	16a4 <log_1>
		return false;
    237a:	2000      	movs	r0, #0
    237c:	e7d4      	b.n	2328 <set_endpoint+0x40>
    237e:	bf00      	nop
    2380:	20000d64 	.word	0x20000d64
    2384:	0000eca4 	.word	0x0000eca4
    2388:	0000ec4c 	.word	0x0000ec4c
    238c:	0000ef50 	.word	0x0000ef50
    2390:	0000ef74 	.word	0x0000ef74

00002394 <usb_reset_alt_setting>:
{
    2394:	b508      	push	{r3, lr}
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    2396:	2208      	movs	r2, #8
    2398:	2100      	movs	r1, #0
    239a:	4802      	ldr	r0, [pc, #8]	; (23a4 <usb_reset_alt_setting+0x10>)
    239c:	f00b f826 	bl	d3ec <memset>
}
    23a0:	bd08      	pop	{r3, pc}
    23a2:	bf00      	nop
    23a4:	20000e1f 	.word	0x20000e1f

000023a8 <usb_set_configuration>:
{
    23a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    23ac:	4605      	mov	r5, r0
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    23ae:	4b23      	ldr	r3, [pc, #140]	; (243c <usb_set_configuration+0x94>)
    23b0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	if (setup->wValue == 0U) {
    23b2:	8843      	ldrh	r3, [r0, #2]
    23b4:	b11b      	cbz	r3, 23be <usb_set_configuration+0x16>
	bool found = false;
    23b6:	2700      	movs	r7, #0
	uint8_t cur_config = 0xFF;
    23b8:	26ff      	movs	r6, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    23ba:	46b0      	mov	r8, r6
    23bc:	e010      	b.n	23e0 <usb_set_configuration+0x38>
		usb_reset_alt_setting();
    23be:	f7ff ffe9 	bl	2394 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    23c2:	886a      	ldrh	r2, [r5, #2]
    23c4:	4b1d      	ldr	r3, [pc, #116]	; (243c <usb_set_configuration+0x94>)
    23c6:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		if (usb_dev.status_callback) {
    23ca:	69db      	ldr	r3, [r3, #28]
    23cc:	b113      	cbz	r3, 23d4 <usb_set_configuration+0x2c>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    23ce:	491c      	ldr	r1, [pc, #112]	; (2440 <usb_set_configuration+0x98>)
    23d0:	2003      	movs	r0, #3
    23d2:	4798      	blx	r3
		return true;
    23d4:	2701      	movs	r7, #1
    23d6:	e020      	b.n	241a <usb_set_configuration+0x72>
			cur_alt_setting =
    23d8:	f894 8003 	ldrb.w	r8, [r4, #3]
		p += p[DESC_bLength];
    23dc:	7823      	ldrb	r3, [r4, #0]
    23de:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
    23e0:	7823      	ldrb	r3, [r4, #0]
    23e2:	b1cb      	cbz	r3, 2418 <usb_set_configuration+0x70>
		switch (p[DESC_bDescriptorType]) {
    23e4:	7863      	ldrb	r3, [r4, #1]
    23e6:	2b04      	cmp	r3, #4
    23e8:	d0f6      	beq.n	23d8 <usb_set_configuration+0x30>
    23ea:	2b05      	cmp	r3, #5
    23ec:	d008      	beq.n	2400 <usb_set_configuration+0x58>
    23ee:	2b02      	cmp	r3, #2
    23f0:	d1f4      	bne.n	23dc <usb_set_configuration+0x34>
			cur_config = p[CONF_DESC_bConfigurationValue];
    23f2:	7966      	ldrb	r6, [r4, #5]
			if (cur_config == setup->wValue) {
    23f4:	b2b2      	uxth	r2, r6
    23f6:	886b      	ldrh	r3, [r5, #2]
    23f8:	429a      	cmp	r2, r3
    23fa:	d1ef      	bne.n	23dc <usb_set_configuration+0x34>
				found = true;
    23fc:	2701      	movs	r7, #1
    23fe:	e7ed      	b.n	23dc <usb_set_configuration+0x34>
			if ((cur_config != setup->wValue) ||
    2400:	b2b3      	uxth	r3, r6
    2402:	886a      	ldrh	r2, [r5, #2]
    2404:	4293      	cmp	r3, r2
    2406:	d1e9      	bne.n	23dc <usb_set_configuration+0x34>
    2408:	f1b8 0f00 	cmp.w	r8, #0
    240c:	d1e6      	bne.n	23dc <usb_set_configuration+0x34>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    240e:	4620      	mov	r0, r4
    2410:	f7ff ff6a 	bl	22e8 <set_endpoint>
    2414:	4607      	mov	r7, r0
			break;
    2416:	e7e1      	b.n	23dc <usb_set_configuration+0x34>
	if (found) {
    2418:	b917      	cbnz	r7, 2420 <usb_set_configuration+0x78>
}
    241a:	4638      	mov	r0, r7
    241c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		usb_reset_alt_setting();
    2420:	f7ff ffb8 	bl	2394 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    2424:	886a      	ldrh	r2, [r5, #2]
    2426:	4b05      	ldr	r3, [pc, #20]	; (243c <usb_set_configuration+0x94>)
    2428:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		if (usb_dev.status_callback) {
    242c:	69db      	ldr	r3, [r3, #28]
    242e:	2b00      	cmp	r3, #0
    2430:	d0f3      	beq.n	241a <usb_set_configuration+0x72>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    2432:	4903      	ldr	r1, [pc, #12]	; (2440 <usb_set_configuration+0x98>)
    2434:	2003      	movs	r0, #3
    2436:	4798      	blx	r3
    2438:	e7ef      	b.n	241a <usb_set_configuration+0x72>
    243a:	bf00      	nop
    243c:	20000d64 	.word	0x20000d64
    2440:	20000e1e 	.word	0x20000e1e

00002444 <usb_handle_std_device_req>:
{
    2444:	b510      	push	{r4, lr}
	uint8_t *data = *data_buf;
    2446:	6814      	ldr	r4, [r2, #0]
	if (usb_reqtype_is_to_host(setup)) {
    2448:	f990 3000 	ldrsb.w	r3, [r0]
    244c:	2b00      	cmp	r3, #0
    244e:	db0a      	blt.n	2466 <usb_handle_std_device_req+0x22>
		switch (setup->bRequest) {
    2450:	7843      	ldrb	r3, [r0, #1]
    2452:	3b01      	subs	r3, #1
    2454:	2b08      	cmp	r3, #8
    2456:	d83a      	bhi.n	24ce <usb_handle_std_device_req+0x8a>
    2458:	e8df f003 	tbb	[pc, r3]
    245c:	392f3924 	.word	0x392f3924
    2460:	3939391a 	.word	0x3939391a
    2464:	21          	.byte	0x21
    2465:	00          	.byte	0x00
		switch (setup->bRequest) {
    2466:	7843      	ldrb	r3, [r0, #1]
    2468:	2b06      	cmp	r3, #6
    246a:	d007      	beq.n	247c <usb_handle_std_device_req+0x38>
    246c:	2b08      	cmp	r3, #8
    246e:	d008      	beq.n	2482 <usb_handle_std_device_req+0x3e>
    2470:	b10b      	cbz	r3, 2476 <usb_handle_std_device_req+0x32>
    2472:	2000      	movs	r0, #0
}
    2474:	bd10      	pop	{r4, pc}
			return usb_get_status(setup, len, data_buf);
    2476:	f7ff fdcf 	bl	2018 <usb_get_status>
    247a:	e7fb      	b.n	2474 <usb_handle_std_device_req+0x30>
			return usb_get_descriptor(setup, len, data_buf);
    247c:	f7ff fde2 	bl	2044 <usb_get_descriptor>
    2480:	e7f8      	b.n	2474 <usb_handle_std_device_req+0x30>
			data[0] = usb_dev.configuration;
    2482:	4b14      	ldr	r3, [pc, #80]	; (24d4 <usb_handle_std_device_req+0x90>)
    2484:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
    2488:	7023      	strb	r3, [r4, #0]
			*len = 1;
    248a:	2001      	movs	r0, #1
    248c:	6008      	str	r0, [r1, #0]
			return true;
    248e:	e7f1      	b.n	2474 <usb_handle_std_device_req+0x30>
			return !usb_dc_set_address(setup->wValue);
    2490:	7880      	ldrb	r0, [r0, #2]
    2492:	f003 fa77 	bl	5984 <usb_dc_set_address>
    2496:	fab0 f080 	clz	r0, r0
    249a:	0940      	lsrs	r0, r0, #5
    249c:	e7ea      	b.n	2474 <usb_handle_std_device_req+0x30>
			return usb_set_configuration(setup);
    249e:	f7ff ff83 	bl	23a8 <usb_set_configuration>
    24a2:	e7e7      	b.n	2474 <usb_handle_std_device_req+0x30>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    24a4:	8843      	ldrh	r3, [r0, #2]
    24a6:	2b01      	cmp	r3, #1
    24a8:	d001      	beq.n	24ae <usb_handle_std_device_req+0x6a>
	return false;
    24aa:	2000      	movs	r0, #0
    24ac:	e7e2      	b.n	2474 <usb_handle_std_device_req+0x30>
					usb_dev.remote_wakeup = false;
    24ae:	4b09      	ldr	r3, [pc, #36]	; (24d4 <usb_handle_std_device_req+0x90>)
    24b0:	2200      	movs	r2, #0
    24b2:	f883 20c3 	strb.w	r2, [r3, #195]	; 0xc3
					return true;
    24b6:	2001      	movs	r0, #1
    24b8:	e7dc      	b.n	2474 <usb_handle_std_device_req+0x30>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    24ba:	8843      	ldrh	r3, [r0, #2]
    24bc:	2b01      	cmp	r3, #1
    24be:	d001      	beq.n	24c4 <usb_handle_std_device_req+0x80>
	return false;
    24c0:	2000      	movs	r0, #0
    24c2:	e7d7      	b.n	2474 <usb_handle_std_device_req+0x30>
					usb_dev.remote_wakeup = true;
    24c4:	2001      	movs	r0, #1
    24c6:	4b03      	ldr	r3, [pc, #12]	; (24d4 <usb_handle_std_device_req+0x90>)
    24c8:	f883 00c3 	strb.w	r0, [r3, #195]	; 0xc3
					return true;
    24cc:	e7d2      	b.n	2474 <usb_handle_std_device_req+0x30>
		switch (setup->bRequest) {
    24ce:	2000      	movs	r0, #0
    24d0:	e7d0      	b.n	2474 <usb_handle_std_device_req+0x30>
    24d2:	bf00      	nop
    24d4:	20000d64 	.word	0x20000d64

000024d8 <reset_endpoint>:
{
    24d8:	b510      	push	{r4, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    24da:	7884      	ldrb	r4, [r0, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    24dc:	4620      	mov	r0, r4
    24de:	f000 fd99 	bl	3014 <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
    24e2:	4620      	mov	r0, r4
    24e4:	f003 fba0 	bl	5c28 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    24e8:	f110 0f78 	cmn.w	r0, #120	; 0x78
    24ec:	d015      	beq.n	251a <reset_endpoint+0x42>
	} else if (ret) {
    24ee:	b908      	cbnz	r0, 24f4 <reset_endpoint+0x1c>
	return true;
    24f0:	2001      	movs	r0, #1
}
    24f2:	bd10      	pop	{r4, pc}
    24f4:	4b0a      	ldr	r3, [pc, #40]	; (2520 <reset_endpoint+0x48>)
    24f6:	4a0b      	ldr	r2, [pc, #44]	; (2524 <reset_endpoint+0x4c>)
    24f8:	1a9b      	subs	r3, r3, r2
    24fa:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_cfg.ep_addr);
    24fc:	f04f 0200 	mov.w	r2, #0
    2500:	2101      	movs	r1, #1
    2502:	f361 0202 	bfi	r2, r1, #0, #3
    2506:	f36f 02c5 	bfc	r2, #3, #3
    250a:	f363 128f 	bfi	r2, r3, #6, #10
    250e:	4621      	mov	r1, r4
    2510:	4805      	ldr	r0, [pc, #20]	; (2528 <reset_endpoint+0x50>)
    2512:	f7ff f8c7 	bl	16a4 <log_1>
		return false;
    2516:	2000      	movs	r0, #0
    2518:	e7eb      	b.n	24f2 <reset_endpoint+0x1a>
	return true;
    251a:	2001      	movs	r0, #1
    251c:	e7e9      	b.n	24f2 <reset_endpoint+0x1a>
    251e:	bf00      	nop
    2520:	0000eca4 	.word	0x0000eca4
    2524:	0000ec4c 	.word	0x0000ec4c
    2528:	0000ef98 	.word	0x0000ef98

0000252c <usb_set_interface>:
{
    252c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2530:	4606      	mov	r6, r0
	const uint8_t *p = usb_dev.descriptors;
    2532:	4b1b      	ldr	r3, [pc, #108]	; (25a0 <usb_set_interface+0x74>)
    2534:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	bool ret = false;
    2536:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
    2538:	25ff      	movs	r5, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    253a:	46a8      	mov	r8, r5
	const uint8_t *if_desc = NULL;
    253c:	46b9      	mov	r9, r7
    253e:	e008      	b.n	2552 <usb_set_interface+0x26>
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    2540:	f894 8003 	ldrb.w	r8, [r4, #3]
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    2544:	78a5      	ldrb	r5, [r4, #2]
			if (cur_iface == setup->wIndex &&
    2546:	b2ab      	uxth	r3, r5
    2548:	88b0      	ldrh	r0, [r6, #4]
    254a:	4283      	cmp	r3, r0
    254c:	d013      	beq.n	2576 <usb_set_interface+0x4a>
		p += p[DESC_bLength];
    254e:	7823      	ldrb	r3, [r4, #0]
    2550:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
    2552:	7823      	ldrb	r3, [r4, #0]
    2554:	b1db      	cbz	r3, 258e <usb_set_interface+0x62>
		switch (p[DESC_bDescriptorType]) {
    2556:	7863      	ldrb	r3, [r4, #1]
    2558:	2b04      	cmp	r3, #4
    255a:	d0f1      	beq.n	2540 <usb_set_interface+0x14>
    255c:	2b05      	cmp	r3, #5
    255e:	d1f6      	bne.n	254e <usb_set_interface+0x22>
			if (cur_iface == setup->wIndex) {
    2560:	b2ab      	uxth	r3, r5
    2562:	88b2      	ldrh	r2, [r6, #4]
    2564:	4293      	cmp	r3, r2
    2566:	d1f2      	bne.n	254e <usb_set_interface+0x22>
				ret = usb_eps_reconfigure(ep, cur_alt_setting,
    2568:	78b2      	ldrb	r2, [r6, #2]
    256a:	4641      	mov	r1, r8
    256c:	4620      	mov	r0, r4
    256e:	f00a fbc4 	bl	ccfa <usb_eps_reconfigure>
    2572:	4607      	mov	r7, r0
    2574:	e7eb      	b.n	254e <usb_set_interface+0x22>
			    cur_alt_setting == setup->wValue) {
    2576:	fa1f f388 	uxth.w	r3, r8
    257a:	8871      	ldrh	r1, [r6, #2]
			if (cur_iface == setup->wIndex &&
    257c:	428b      	cmp	r3, r1
    257e:	d1e6      	bne.n	254e <usb_set_interface+0x22>
				ret = usb_set_alt_setting(setup->wIndex,
    2580:	b2c9      	uxtb	r1, r1
    2582:	b2c0      	uxtb	r0, r0
    2584:	f7ff fd0e 	bl	1fa4 <usb_set_alt_setting>
    2588:	4607      	mov	r7, r0
				if_desc = (void *)p;
    258a:	46a1      	mov	r9, r4
    258c:	e7df      	b.n	254e <usb_set_interface+0x22>
	if (usb_dev.status_callback) {
    258e:	4b04      	ldr	r3, [pc, #16]	; (25a0 <usb_set_interface+0x74>)
    2590:	69db      	ldr	r3, [r3, #28]
    2592:	b113      	cbz	r3, 259a <usb_set_interface+0x6e>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    2594:	4649      	mov	r1, r9
    2596:	2007      	movs	r0, #7
    2598:	4798      	blx	r3
}
    259a:	4638      	mov	r0, r7
    259c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    25a0:	20000d64 	.word	0x20000d64

000025a4 <usb_handle_standard_request>:
{
    25a4:	b570      	push	{r4, r5, r6, lr}
    25a6:	4604      	mov	r4, r0
    25a8:	460d      	mov	r5, r1
    25aa:	4616      	mov	r6, r2
	if (usb_dev.custom_req_handler &&
    25ac:	4b18      	ldr	r3, [pc, #96]	; (2610 <usb_handle_standard_request+0x6c>)
    25ae:	699b      	ldr	r3, [r3, #24]
    25b0:	b10b      	cbz	r3, 25b6 <usb_handle_standard_request+0x12>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    25b2:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    25b4:	b148      	cbz	r0, 25ca <usb_handle_standard_request+0x26>
	switch (setup->RequestType.recipient) {
    25b6:	7823      	ldrb	r3, [r4, #0]
    25b8:	f003 031f 	and.w	r3, r3, #31
    25bc:	2b01      	cmp	r3, #1
    25be:	d00d      	beq.n	25dc <usb_handle_standard_request+0x38>
    25c0:	2b02      	cmp	r3, #2
    25c2:	d013      	beq.n	25ec <usb_handle_standard_request+0x48>
    25c4:	b113      	cbz	r3, 25cc <usb_handle_standard_request+0x28>
    25c6:	f06f 0015 	mvn.w	r0, #21
}
    25ca:	bd70      	pop	{r4, r5, r6, pc}
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    25cc:	4632      	mov	r2, r6
    25ce:	4629      	mov	r1, r5
    25d0:	4620      	mov	r0, r4
    25d2:	f7ff ff37 	bl	2444 <usb_handle_std_device_req>
    25d6:	b188      	cbz	r0, 25fc <usb_handle_standard_request+0x58>
	int rc = 0;
    25d8:	2000      	movs	r0, #0
    25da:	e7f6      	b.n	25ca <usb_handle_standard_request+0x26>
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    25dc:	4632      	mov	r2, r6
    25de:	4629      	mov	r1, r5
    25e0:	4620      	mov	r0, r4
    25e2:	f00a fb93 	bl	cd0c <usb_handle_std_interface_req>
    25e6:	b160      	cbz	r0, 2602 <usb_handle_standard_request+0x5e>
	int rc = 0;
    25e8:	2000      	movs	r0, #0
    25ea:	e7ee      	b.n	25ca <usb_handle_standard_request+0x26>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    25ec:	4632      	mov	r2, r6
    25ee:	4629      	mov	r1, r5
    25f0:	4620      	mov	r0, r4
    25f2:	f00a fbd8 	bl	cda6 <usb_handle_std_endpoint_req>
    25f6:	b138      	cbz	r0, 2608 <usb_handle_standard_request+0x64>
	int rc = 0;
    25f8:	2000      	movs	r0, #0
    25fa:	e7e6      	b.n	25ca <usb_handle_standard_request+0x26>
			rc = -EINVAL;
    25fc:	f06f 0015 	mvn.w	r0, #21
    2600:	e7e3      	b.n	25ca <usb_handle_standard_request+0x26>
			rc = -EINVAL;
    2602:	f06f 0015 	mvn.w	r0, #21
    2606:	e7e0      	b.n	25ca <usb_handle_standard_request+0x26>
			rc = -EINVAL;
    2608:	f06f 0015 	mvn.w	r0, #21
    260c:	e7dd      	b.n	25ca <usb_handle_standard_request+0x26>
    260e:	bf00      	nop
    2610:	20000d64 	.word	0x20000d64

00002614 <composite_setup_ep_cb>:

static int composite_setup_ep_cb(void)
{
    2614:	b570      	push	{r4, r5, r6, lr}
	struct usb_ep_cfg_data *ep_data;

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2616:	4e0d      	ldr	r6, [pc, #52]	; (264c <composite_setup_ep_cb+0x38>)
    2618:	4b0d      	ldr	r3, [pc, #52]	; (2650 <composite_setup_ep_cb+0x3c>)
    261a:	429e      	cmp	r6, r3
    261c:	d211      	bcs.n	2642 <composite_setup_ep_cb+0x2e>
		ep_data = cfg_data->endpoint;
    261e:	6a35      	ldr	r5, [r6, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    2620:	2400      	movs	r4, #0
    2622:	7f33      	ldrb	r3, [r6, #28]
    2624:	429c      	cmp	r4, r3
    2626:	d20a      	bcs.n	263e <composite_setup_ep_cb+0x2a>
			LOG_DBG("set cb, ep: 0x%x", ep_data[n].ep_addr);
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    2628:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
    262c:	f855 1034 	ldr.w	r1, [r5, r4, lsl #3]
    2630:	7918      	ldrb	r0, [r3, #4]
    2632:	f003 fd15 	bl	6060 <usb_dc_ep_set_callback>
    2636:	b930      	cbnz	r0, 2646 <composite_setup_ep_cb+0x32>
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    2638:	3401      	adds	r4, #1
    263a:	b2e4      	uxtb	r4, r4
    263c:	e7f1      	b.n	2622 <composite_setup_ep_cb+0xe>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    263e:	3624      	adds	r6, #36	; 0x24
    2640:	e7ea      	b.n	2618 <composite_setup_ep_cb+0x4>
				return -1;
			}
		}
	}

	return 0;
    2642:	2000      	movs	r0, #0
    2644:	e001      	b.n	264a <composite_setup_ep_cb+0x36>
				return -1;
    2646:	f04f 30ff 	mov.w	r0, #4294967295
}
    264a:	bd70      	pop	{r4, r5, r6, pc}
    264c:	200003a8 	.word	0x200003a8
    2650:	200003cc 	.word	0x200003cc

00002654 <forward_status_cb>:
{
    2654:	b570      	push	{r4, r5, r6, lr}
    2656:	4605      	mov	r5, r0
    2658:	460e      	mov	r6, r1
	if (status == USB_DC_DISCONNECTED) {
    265a:	2804      	cmp	r0, #4
    265c:	d005      	beq.n	266a <forward_status_cb+0x16>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND) {
    265e:	1f2b      	subs	r3, r5, #4
    2660:	b2db      	uxtb	r3, r3
    2662:	2b01      	cmp	r3, #1
    2664:	d904      	bls.n	2670 <forward_status_cb+0x1c>
{
    2666:	4c14      	ldr	r4, [pc, #80]	; (26b8 <forward_status_cb+0x64>)
    2668:	e014      	b.n	2694 <forward_status_cb+0x40>
		usb_reset_alt_setting();
    266a:	f7ff fe93 	bl	2394 <usb_reset_alt_setting>
    266e:	e7f6      	b.n	265e <forward_status_cb+0xa>
		if (usb_dev.configured) {
    2670:	4b12      	ldr	r3, [pc, #72]	; (26bc <forward_status_cb+0x68>)
    2672:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
    2676:	2b00      	cmp	r3, #0
    2678:	d0f5      	beq.n	2666 <forward_status_cb+0x12>
			usb_cancel_transfers();
    267a:	f000 fceb 	bl	3054 <usb_cancel_transfers>
			if (status == USB_DC_DISCONNECTED) {
    267e:	2d04      	cmp	r5, #4
    2680:	d1f1      	bne.n	2666 <forward_status_cb+0x12>
				foreach_ep(disable_interface_ep);
    2682:	480f      	ldr	r0, [pc, #60]	; (26c0 <forward_status_cb+0x6c>)
    2684:	f7ff fd7a 	bl	217c <foreach_ep>
				usb_dev.configured = false;
    2688:	4b0c      	ldr	r3, [pc, #48]	; (26bc <forward_status_cb+0x68>)
    268a:	2200      	movs	r2, #0
    268c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
    2690:	e7e9      	b.n	2666 <forward_status_cb+0x12>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2692:	3424      	adds	r4, #36	; 0x24
    2694:	4b0b      	ldr	r3, [pc, #44]	; (26c4 <forward_status_cb+0x70>)
    2696:	429c      	cmp	r4, r3
    2698:	d207      	bcs.n	26aa <forward_status_cb+0x56>
		if (cfg_data->cb_usb_status) {
    269a:	68e3      	ldr	r3, [r4, #12]
    269c:	2b00      	cmp	r3, #0
    269e:	d0f8      	beq.n	2692 <forward_status_cb+0x3e>
			cfg_data->cb_usb_status(cfg_data, status, param);
    26a0:	4632      	mov	r2, r6
    26a2:	4629      	mov	r1, r5
    26a4:	4620      	mov	r0, r4
    26a6:	4798      	blx	r3
    26a8:	e7f3      	b.n	2692 <forward_status_cb+0x3e>
	if (usb_dev.user_status_callback) {
    26aa:	4b04      	ldr	r3, [pc, #16]	; (26bc <forward_status_cb+0x68>)
    26ac:	6a1b      	ldr	r3, [r3, #32]
    26ae:	b113      	cbz	r3, 26b6 <forward_status_cb+0x62>
		usb_dev.user_status_callback(status, param);
    26b0:	4631      	mov	r1, r6
    26b2:	4628      	mov	r0, r5
    26b4:	4798      	blx	r3
}
    26b6:	bd70      	pop	{r4, r5, r6, pc}
    26b8:	200003a8 	.word	0x200003a8
    26bc:	20000d64 	.word	0x20000d64
    26c0:	0000cd67 	.word	0x0000cd67
    26c4:	200003cc 	.word	0x200003cc

000026c8 <usb_data_to_host>:
{
    26c8:	b510      	push	{r4, lr}
    26ca:	b082      	sub	sp, #8
	if (usb_dev.zlp_flag == false) {
    26cc:	4b13      	ldr	r3, [pc, #76]	; (271c <usb_data_to_host+0x54>)
    26ce:	7d1b      	ldrb	r3, [r3, #20]
    26d0:	b9cb      	cbnz	r3, 2706 <usb_data_to_host+0x3e>
		uint32_t chunk = usb_dev.data_buf_residue;
    26d2:	4c12      	ldr	r4, [pc, #72]	; (271c <usb_data_to_host+0x54>)
    26d4:	68e2      	ldr	r2, [r4, #12]
    26d6:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    26d8:	ab01      	add	r3, sp, #4
    26da:	68a1      	ldr	r1, [r4, #8]
    26dc:	2080      	movs	r0, #128	; 0x80
    26de:	f00a fb85 	bl	cdec <usb_write>
		usb_dev.data_buf += chunk;
    26e2:	9901      	ldr	r1, [sp, #4]
    26e4:	68a2      	ldr	r2, [r4, #8]
    26e6:	440a      	add	r2, r1
    26e8:	60a2      	str	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    26ea:	68e3      	ldr	r3, [r4, #12]
    26ec:	1a5b      	subs	r3, r3, r1
    26ee:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue &&
    26f0:	b98b      	cbnz	r3, 2716 <usb_data_to_host+0x4e>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    26f2:	88e2      	ldrh	r2, [r4, #6]
    26f4:	6923      	ldr	r3, [r4, #16]
		if (!usb_dev.data_buf_residue &&
    26f6:	429a      	cmp	r2, r3
    26f8:	dd0d      	ble.n	2716 <usb_data_to_host+0x4e>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
    26fa:	f013 0f3f 	tst.w	r3, #63	; 0x3f
    26fe:	d10a      	bne.n	2716 <usb_data_to_host+0x4e>
				usb_dev.zlp_flag = true;
    2700:	2201      	movs	r2, #1
    2702:	7522      	strb	r2, [r4, #20]
    2704:	e007      	b.n	2716 <usb_data_to_host+0x4e>
		usb_dev.zlp_flag = false;
    2706:	2100      	movs	r1, #0
    2708:	4b04      	ldr	r3, [pc, #16]	; (271c <usb_data_to_host+0x54>)
    270a:	7519      	strb	r1, [r3, #20]
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    270c:	460b      	mov	r3, r1
    270e:	460a      	mov	r2, r1
    2710:	2080      	movs	r0, #128	; 0x80
    2712:	f003 fab3 	bl	5c7c <usb_dc_ep_write>
}
    2716:	b002      	add	sp, #8
    2718:	bd10      	pop	{r4, pc}
    271a:	bf00      	nop
    271c:	20000d64 	.word	0x20000d64

00002720 <usb_handle_control_transfer>:
{
    2720:	b510      	push	{r4, lr}
    2722:	b084      	sub	sp, #16
	uint32_t chunk = 0U;
    2724:	2300      	movs	r3, #0
    2726:	9303      	str	r3, [sp, #12]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    2728:	4604      	mov	r4, r0
    272a:	b900      	cbnz	r0, 272e <usb_handle_control_transfer+0xe>
    272c:	b331      	cbz	r1, 277c <usb_handle_control_transfer+0x5c>
	} else if (ep == USB_CONTROL_EP_OUT) {
    272e:	2c00      	cmp	r4, #0
    2730:	f040 8094 	bne.w	285c <usb_handle_control_transfer+0x13c>
		if (usb_dev.data_buf_residue <= 0) {
    2734:	4b50      	ldr	r3, [pc, #320]	; (2878 <usb_handle_control_transfer+0x158>)
    2736:	68da      	ldr	r2, [r3, #12]
    2738:	2a00      	cmp	r2, #0
    273a:	dd77      	ble.n	282c <usb_handle_control_transfer+0x10c>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    273c:	ab03      	add	r3, sp, #12
    273e:	494e      	ldr	r1, [pc, #312]	; (2878 <usb_handle_control_transfer+0x158>)
    2740:	6889      	ldr	r1, [r1, #8]
    2742:	2000      	movs	r0, #0
    2744:	f00a ff20 	bl	d588 <usb_dc_ep_read>
    2748:	2800      	cmp	r0, #0
    274a:	db7c      	blt.n	2846 <usb_handle_control_transfer+0x126>
		usb_dev.data_buf += chunk;
    274c:	9803      	ldr	r0, [sp, #12]
    274e:	4a4a      	ldr	r2, [pc, #296]	; (2878 <usb_handle_control_transfer+0x158>)
    2750:	6891      	ldr	r1, [r2, #8]
    2752:	4401      	add	r1, r0
    2754:	6091      	str	r1, [r2, #8]
		usb_dev.data_buf_residue -= chunk;
    2756:	68d3      	ldr	r3, [r2, #12]
    2758:	1a1b      	subs	r3, r3, r0
    275a:	60d3      	str	r3, [r2, #12]
		if (usb_dev.data_buf_residue == 0) {
    275c:	2b00      	cmp	r3, #0
    275e:	d17f      	bne.n	2860 <usb_handle_control_transfer+0x140>
			usb_dev.data_buf = usb_dev.req_data;
    2760:	4610      	mov	r0, r2
    2762:	f102 0338 	add.w	r3, r2, #56	; 0x38
    2766:	f842 3f08 	str.w	r3, [r2, #8]!
			if (!usb_handle_request(setup,
    276a:	f100 0110 	add.w	r1, r0, #16
    276e:	f7ff fc31 	bl	1fd4 <usb_handle_request>
    2772:	2800      	cmp	r0, #0
    2774:	d06e      	beq.n	2854 <usb_handle_control_transfer+0x134>
			usb_data_to_host();
    2776:	f7ff ffa7 	bl	26c8 <usb_data_to_host>
    277a:	e071      	b.n	2860 <usb_handle_control_transfer+0x140>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    277c:	2208      	movs	r2, #8
    277e:	a901      	add	r1, sp, #4
    2780:	f00a ff02 	bl	d588 <usb_dc_ep_read>
    2784:	2800      	cmp	r0, #0
    2786:	db2e      	blt.n	27e6 <usb_handle_control_transfer+0xc6>
		setup->bmRequestType = setup_raw.bmRequestType;
    2788:	f89d 0004 	ldrb.w	r0, [sp, #4]
    278c:	4b3a      	ldr	r3, [pc, #232]	; (2878 <usb_handle_control_transfer+0x158>)
    278e:	7018      	strb	r0, [r3, #0]
		setup->bRequest = setup_raw.bRequest;
    2790:	f89d 2005 	ldrb.w	r2, [sp, #5]
    2794:	705a      	strb	r2, [r3, #1]
		setup->wValue = sys_le16_to_cpu(setup_raw.wValue);
    2796:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    279a:	805a      	strh	r2, [r3, #2]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    279c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    27a0:	809a      	strh	r2, [r3, #4]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    27a2:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    27a6:	80d9      	strh	r1, [r3, #6]
		usb_dev.data_buf = usb_dev.req_data;
    27a8:	f103 0238 	add.w	r2, r3, #56	; 0x38
    27ac:	609a      	str	r2, [r3, #8]
		usb_dev.zlp_flag = false;
    27ae:	2200      	movs	r2, #0
    27b0:	751a      	strb	r2, [r3, #20]
		usb_dev.data_buf_len = 0;
    27b2:	611a      	str	r2, [r3, #16]
		usb_dev.data_buf_residue = 0;
    27b4:	60da      	str	r2, [r3, #12]
		if (usb_reqtype_is_to_device(setup)) {
    27b6:	f010 0f80 	tst.w	r0, #128	; 0x80
    27ba:	d102      	bne.n	27c2 <usb_handle_control_transfer+0xa2>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    27bc:	2980      	cmp	r1, #128	; 0x80
    27be:	d816      	bhi.n	27ee <usb_handle_control_transfer+0xce>
			if (setup->wLength) {
    27c0:	bb61      	cbnz	r1, 281c <usb_handle_control_transfer+0xfc>
		if (!usb_handle_request(setup,
    27c2:	482d      	ldr	r0, [pc, #180]	; (2878 <usb_handle_control_transfer+0x158>)
    27c4:	f100 0208 	add.w	r2, r0, #8
    27c8:	f100 0110 	add.w	r1, r0, #16
    27cc:	f7ff fc02 	bl	1fd4 <usb_handle_request>
    27d0:	b340      	cbz	r0, 2824 <usb_handle_control_transfer+0x104>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    27d2:	4b29      	ldr	r3, [pc, #164]	; (2878 <usb_handle_control_transfer+0x158>)
    27d4:	88da      	ldrh	r2, [r3, #6]
    27d6:	6919      	ldr	r1, [r3, #16]
    27d8:	428a      	cmp	r2, r1
    27da:	bfa8      	it	ge
    27dc:	460a      	movge	r2, r1
    27de:	60da      	str	r2, [r3, #12]
		usb_data_to_host();
    27e0:	f7ff ff72 	bl	26c8 <usb_data_to_host>
    27e4:	e03c      	b.n	2860 <usb_handle_control_transfer+0x140>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    27e6:	2080      	movs	r0, #128	; 0x80
    27e8:	f003 f960 	bl	5aac <usb_dc_ep_set_stall>
			return;
    27ec:	e038      	b.n	2860 <usb_handle_control_transfer+0x140>
    27ee:	4b23      	ldr	r3, [pc, #140]	; (287c <usb_handle_control_transfer+0x15c>)
    27f0:	4a23      	ldr	r2, [pc, #140]	; (2880 <usb_handle_control_transfer+0x160>)
    27f2:	1a9b      	subs	r3, r3, r2
    27f4:	08db      	lsrs	r3, r3, #3
				LOG_ERR("Request buffer too small");
    27f6:	f04f 0100 	mov.w	r1, #0
    27fa:	2201      	movs	r2, #1
    27fc:	f362 0102 	bfi	r1, r2, #0, #3
    2800:	f36f 01c5 	bfc	r1, #3, #3
    2804:	f363 118f 	bfi	r1, r3, #6, #10
    2808:	481e      	ldr	r0, [pc, #120]	; (2884 <usb_handle_control_transfer+0x164>)
    280a:	f7fe ffbd 	bl	1788 <log_0>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    280e:	2080      	movs	r0, #128	; 0x80
    2810:	f003 f94c 	bl	5aac <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    2814:	2000      	movs	r0, #0
    2816:	f003 f949 	bl	5aac <usb_dc_ep_set_stall>
				return;
    281a:	e021      	b.n	2860 <usb_handle_control_transfer+0x140>
				usb_dev.data_buf_len = setup->wLength;
    281c:	4b16      	ldr	r3, [pc, #88]	; (2878 <usb_handle_control_transfer+0x158>)
    281e:	6119      	str	r1, [r3, #16]
				usb_dev.data_buf_residue = setup->wLength;
    2820:	60d9      	str	r1, [r3, #12]
				return;
    2822:	e01d      	b.n	2860 <usb_handle_control_transfer+0x140>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2824:	2080      	movs	r0, #128	; 0x80
    2826:	f003 f941 	bl	5aac <usb_dc_ep_set_stall>
			return;
    282a:	e019      	b.n	2860 <usb_handle_control_transfer+0x140>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    282c:	ab03      	add	r3, sp, #12
    282e:	2200      	movs	r2, #0
    2830:	4911      	ldr	r1, [pc, #68]	; (2878 <usb_handle_control_transfer+0x158>)
    2832:	6889      	ldr	r1, [r1, #8]
    2834:	4610      	mov	r0, r2
    2836:	f00a fea7 	bl	d588 <usb_dc_ep_read>
    283a:	2800      	cmp	r0, #0
    283c:	da10      	bge.n	2860 <usb_handle_control_transfer+0x140>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    283e:	2080      	movs	r0, #128	; 0x80
    2840:	f003 f934 	bl	5aac <usb_dc_ep_set_stall>
			return;
    2844:	e00c      	b.n	2860 <usb_handle_control_transfer+0x140>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2846:	2080      	movs	r0, #128	; 0x80
    2848:	f003 f930 	bl	5aac <usb_dc_ep_set_stall>
			usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    284c:	2000      	movs	r0, #0
    284e:	f003 f92d 	bl	5aac <usb_dc_ep_set_stall>
			return;
    2852:	e005      	b.n	2860 <usb_handle_control_transfer+0x140>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2854:	2080      	movs	r0, #128	; 0x80
    2856:	f003 f929 	bl	5aac <usb_dc_ep_set_stall>
				return;
    285a:	e001      	b.n	2860 <usb_handle_control_transfer+0x140>
	} else if (ep == USB_CONTROL_EP_IN) {
    285c:	2c80      	cmp	r4, #128	; 0x80
    285e:	d001      	beq.n	2864 <usb_handle_control_transfer+0x144>
}
    2860:	b004      	add	sp, #16
    2862:	bd10      	pop	{r4, pc}
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    2864:	4b04      	ldr	r3, [pc, #16]	; (2878 <usb_handle_control_transfer+0x158>)
    2866:	68db      	ldr	r3, [r3, #12]
    2868:	b91b      	cbnz	r3, 2872 <usb_handle_control_transfer+0x152>
    286a:	4b03      	ldr	r3, [pc, #12]	; (2878 <usb_handle_control_transfer+0x158>)
    286c:	7d1b      	ldrb	r3, [r3, #20]
    286e:	2b00      	cmp	r3, #0
    2870:	d0f6      	beq.n	2860 <usb_handle_control_transfer+0x140>
			usb_data_to_host();
    2872:	f7ff ff29 	bl	26c8 <usb_data_to_host>
		__ASSERT_NO_MSG(false);
    2876:	e7f3      	b.n	2860 <usb_handle_control_transfer+0x140>
    2878:	20000d64 	.word	0x20000d64
    287c:	0000eca4 	.word	0x0000eca4
    2880:	0000ec4c 	.word	0x0000ec4c
    2884:	0000efbc 	.word	0x0000efbc

00002888 <usb_set_config>:

int usb_set_config(const uint8_t *device_descriptor)
{
    2888:	b508      	push	{r3, lr}
	/* register descriptors */
	usb_register_descriptors(device_descriptor);
    288a:	f7ff fbbf 	bl	200c <usb_register_descriptors>

	/* register standard request handler */
	usb_register_request_handler(USB_REQTYPE_TYPE_STANDARD,
    288e:	4908      	ldr	r1, [pc, #32]	; (28b0 <usb_set_config+0x28>)
    2890:	2000      	movs	r0, #0
    2892:	f7ff fbb3 	bl	1ffc <usb_register_request_handler>
				     usb_handle_standard_request);

	/* register class request handlers for each interface*/
	usb_register_request_handler(USB_REQTYPE_TYPE_CLASS, class_handler);
    2896:	4907      	ldr	r1, [pc, #28]	; (28b4 <usb_set_config+0x2c>)
    2898:	2001      	movs	r0, #1
    289a:	f7ff fbaf 	bl	1ffc <usb_register_request_handler>

	/* register vendor request handler */
	usb_register_request_handler(USB_REQTYPE_TYPE_VENDOR, vendor_handler);
    289e:	4906      	ldr	r1, [pc, #24]	; (28b8 <usb_set_config+0x30>)
    28a0:	2002      	movs	r0, #2
    28a2:	f7ff fbab 	bl	1ffc <usb_register_request_handler>

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);
    28a6:	4805      	ldr	r0, [pc, #20]	; (28bc <usb_set_config+0x34>)
    28a8:	f7ff fc5c 	bl	2164 <usb_register_custom_req_handler>

	return 0;
}
    28ac:	2000      	movs	r0, #0
    28ae:	bd08      	pop	{r3, pc}
    28b0:	000025a5 	.word	0x000025a5
    28b4:	000021b5 	.word	0x000021b5
    28b8:	0000224d 	.word	0x0000224d
    28bc:	000021f1 	.word	0x000021f1

000028c0 <usb_device_init>:
/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(const struct device *dev)
{
    28c0:	b508      	push	{r3, lr}
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
    28c2:	4b10      	ldr	r3, [pc, #64]	; (2904 <usb_device_init+0x44>)
    28c4:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
    28c8:	b10b      	cbz	r3, 28ce <usb_device_init+0xe>
		return 0;
    28ca:	2000      	movs	r0, #0
	}

	usb_set_config(device_descriptor);

	return 0;
}
    28cc:	bd08      	pop	{r3, pc}
	device_descriptor = usb_get_device_descriptor();
    28ce:	f000 f9c3 	bl	2c58 <usb_get_device_descriptor>
	if (!device_descriptor) {
    28d2:	b118      	cbz	r0, 28dc <usb_device_init+0x1c>
	usb_set_config(device_descriptor);
    28d4:	f7ff ffd8 	bl	2888 <usb_set_config>
	return 0;
    28d8:	2000      	movs	r0, #0
    28da:	e7f7      	b.n	28cc <usb_device_init+0xc>
    28dc:	4b0a      	ldr	r3, [pc, #40]	; (2908 <usb_device_init+0x48>)
    28de:	4a0b      	ldr	r2, [pc, #44]	; (290c <usb_device_init+0x4c>)
    28e0:	1a9b      	subs	r3, r3, r2
    28e2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to configure USB device stack");
    28e4:	f04f 0100 	mov.w	r1, #0
    28e8:	2201      	movs	r2, #1
    28ea:	f362 0102 	bfi	r1, r2, #0, #3
    28ee:	f36f 01c5 	bfc	r1, #3, #3
    28f2:	f363 118f 	bfi	r1, r3, #6, #10
    28f6:	4806      	ldr	r0, [pc, #24]	; (2910 <usb_device_init+0x50>)
    28f8:	f7fe ff46 	bl	1788 <log_0>
		return -1;
    28fc:	f04f 30ff 	mov.w	r0, #4294967295
    2900:	e7e4      	b.n	28cc <usb_device_init+0xc>
    2902:	bf00      	nop
    2904:	20000d64 	.word	0x20000d64
    2908:	0000eca4 	.word	0x0000eca4
    290c:	0000ec4c 	.word	0x0000ec4c
    2910:	0000efd8 	.word	0x0000efd8

00002914 <usb_enable>:
{
    2914:	b530      	push	{r4, r5, lr}
    2916:	b083      	sub	sp, #12
    2918:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
    291a:	f04f 32ff 	mov.w	r2, #4294967295
    291e:	f04f 33ff 	mov.w	r3, #4294967295
    2922:	482d      	ldr	r0, [pc, #180]	; (29d8 <usb_enable+0xc4>)
    2924:	f007 fe34 	bl	a590 <z_impl_k_mutex_lock>
	if (usb_dev.enabled == true) {
    2928:	4b2c      	ldr	r3, [pc, #176]	; (29dc <usb_enable+0xc8>)
    292a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
    292e:	2b00      	cmp	r3, #0
    2930:	d14a      	bne.n	29c8 <usb_enable+0xb4>
	ret = usb_vbus_set(true);
    2932:	2001      	movs	r0, #1
    2934:	f00a f9df 	bl	ccf6 <usb_vbus_set>
	if (ret < 0) {
    2938:	1e04      	subs	r4, r0, #0
    293a:	db46      	blt.n	29ca <usb_enable+0xb6>
	usb_dev.user_status_callback = status_cb;
    293c:	4b27      	ldr	r3, [pc, #156]	; (29dc <usb_enable+0xc8>)
    293e:	621d      	str	r5, [r3, #32]
	usb_register_status_callback(forward_status_cb);
    2940:	4c27      	ldr	r4, [pc, #156]	; (29e0 <usb_enable+0xcc>)
    2942:	4620      	mov	r0, r4
    2944:	f7ff fc14 	bl	2170 <usb_register_status_callback>
	usb_dc_set_status_callback(forward_status_cb);
    2948:	4620      	mov	r0, r4
    294a:	f003 fb9d 	bl	6088 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    294e:	f002 ffd1 	bl	58f4 <usb_dc_attach>
	if (ret < 0) {
    2952:	1e04      	subs	r4, r0, #0
    2954:	db39      	blt.n	29ca <usb_enable+0xb6>
	ret = usb_transfer_init();
    2956:	f000 fba9 	bl	30ac <usb_transfer_init>
	if (ret < 0) {
    295a:	1e04      	subs	r4, r0, #0
    295c:	db35      	blt.n	29ca <usb_enable+0xb6>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    295e:	2340      	movs	r3, #64	; 0x40
    2960:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    2964:	2300      	movs	r3, #0
    2966:	f88d 3004 	strb.w	r3, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    296a:	f88d 3000 	strb.w	r3, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    296e:	4668      	mov	r0, sp
    2970:	f003 f85e 	bl	5a30 <usb_dc_ep_configure>
	if (ret < 0) {
    2974:	1e04      	subs	r4, r0, #0
    2976:	db28      	blt.n	29ca <usb_enable+0xb6>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    2978:	2380      	movs	r3, #128	; 0x80
    297a:	f88d 3000 	strb.w	r3, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    297e:	4668      	mov	r0, sp
    2980:	f003 f856 	bl	5a30 <usb_dc_ep_configure>
	if (ret < 0) {
    2984:	1e04      	subs	r4, r0, #0
    2986:	db20      	blt.n	29ca <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    2988:	4916      	ldr	r1, [pc, #88]	; (29e4 <usb_enable+0xd0>)
    298a:	2000      	movs	r0, #0
    298c:	f003 fb68 	bl	6060 <usb_dc_ep_set_callback>
	if (ret < 0) {
    2990:	1e04      	subs	r4, r0, #0
    2992:	db1a      	blt.n	29ca <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    2994:	4913      	ldr	r1, [pc, #76]	; (29e4 <usb_enable+0xd0>)
    2996:	2080      	movs	r0, #128	; 0x80
    2998:	f003 fb62 	bl	6060 <usb_dc_ep_set_callback>
	if (ret < 0) {
    299c:	1e04      	subs	r4, r0, #0
    299e:	db14      	blt.n	29ca <usb_enable+0xb6>
	ret = composite_setup_ep_cb();
    29a0:	f7ff fe38 	bl	2614 <composite_setup_ep_cb>
	if (ret < 0) {
    29a4:	1e04      	subs	r4, r0, #0
    29a6:	db10      	blt.n	29ca <usb_enable+0xb6>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    29a8:	2000      	movs	r0, #0
    29aa:	f003 f90f 	bl	5bcc <usb_dc_ep_enable>
	if (ret < 0) {
    29ae:	1e04      	subs	r4, r0, #0
    29b0:	db0b      	blt.n	29ca <usb_enable+0xb6>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    29b2:	2080      	movs	r0, #128	; 0x80
    29b4:	f003 f90a 	bl	5bcc <usb_dc_ep_enable>
	if (ret < 0) {
    29b8:	1e04      	subs	r4, r0, #0
    29ba:	db06      	blt.n	29ca <usb_enable+0xb6>
	usb_dev.enabled = true;
    29bc:	4b07      	ldr	r3, [pc, #28]	; (29dc <usb_enable+0xc8>)
    29be:	2201      	movs	r2, #1
    29c0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	ret = 0;
    29c4:	2400      	movs	r4, #0
    29c6:	e000      	b.n	29ca <usb_enable+0xb6>
		ret = 0;
    29c8:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
    29ca:	4803      	ldr	r0, [pc, #12]	; (29d8 <usb_enable+0xc4>)
    29cc:	f007 fe6a 	bl	a6a4 <z_impl_k_mutex_unlock>
}
    29d0:	4620      	mov	r0, r4
    29d2:	b003      	add	sp, #12
    29d4:	bd30      	pop	{r4, r5, pc}
    29d6:	bf00      	nop
    29d8:	200002b4 	.word	0x200002b4
    29dc:	20000d64 	.word	0x20000d64
    29e0:	00002655 	.word	0x00002655
    29e4:	00002721 	.word	0x00002721

000029e8 <usb_get_cfg_data>:
 * The interface descriptor of a USB function must be assigned to the
 * usb_cfg_data so that usb_ep_cfg_data and matching endpoint descriptor
 * can be found.
 */
static struct usb_cfg_data *usb_get_cfg_data(struct usb_if_descriptor *iface)
{
    29e8:	4602      	mov	r2, r0
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    29ea:	4805      	ldr	r0, [pc, #20]	; (2a00 <usb_get_cfg_data+0x18>)
    29ec:	4b05      	ldr	r3, [pc, #20]	; (2a04 <usb_get_cfg_data+0x1c>)
    29ee:	4298      	cmp	r0, r3
    29f0:	d204      	bcs.n	29fc <usb_get_cfg_data+0x14>
		if (cfg_data->interface_descriptor == iface) {
    29f2:	6843      	ldr	r3, [r0, #4]
    29f4:	4293      	cmp	r3, r2
    29f6:	d002      	beq.n	29fe <usb_get_cfg_data+0x16>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    29f8:	3024      	adds	r0, #36	; 0x24
    29fa:	e7f7      	b.n	29ec <usb_get_cfg_data+0x4>
			return cfg_data;
		}
	}

	return NULL;
    29fc:	2000      	movs	r0, #0
}
    29fe:	4770      	bx	lr
    2a00:	200003a8 	.word	0x200003a8
    2a04:	200003cc 	.word	0x200003cc

00002a08 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    2a08:	b530      	push	{r4, r5, lr}
    2a0a:	b08b      	sub	sp, #44	; 0x2c
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    2a0c:	ac01      	add	r4, sp, #4
    2a0e:	4d1b      	ldr	r5, [pc, #108]	; (2a7c <usb_update_sn_string_descriptor+0x74>)
    2a10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2a12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2a14:	682b      	ldr	r3, [r5, #0]
    2a16:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    2a18:	2210      	movs	r2, #16
    2a1a:	2100      	movs	r1, #0
    2a1c:	a806      	add	r0, sp, #24
    2a1e:	f00a fce5 	bl	d3ec <memset>
	memset(sn, 0, sizeof(sn));
    2a22:	2212      	movs	r2, #18
    2a24:	2100      	movs	r1, #0
    2a26:	4816      	ldr	r0, [pc, #88]	; (2a80 <usb_update_sn_string_descriptor+0x78>)
    2a28:	f00a fce0 	bl	d3ec <memset>
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    2a2c:	2110      	movs	r1, #16
    2a2e:	a806      	add	r0, sp, #24
    2a30:	f00a ff30 	bl	d894 <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    2a34:	2800      	cmp	r0, #0
    2a36:	dd1d      	ble.n	2a74 <usb_update_sn_string_descriptor+0x6c>
		skip = MAX(0, hwlen - usblen);
    2a38:	3808      	subs	r0, #8
    2a3a:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    2a3e:	2200      	movs	r2, #0
    2a40:	e016      	b.n	2a70 <usb_update_sn_string_descriptor+0x68>
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    2a42:	18a3      	adds	r3, r4, r2
    2a44:	a90a      	add	r1, sp, #40	; 0x28
    2a46:	440b      	add	r3, r1
    2a48:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    2a4c:	0051      	lsls	r1, r2, #1
    2a4e:	a80a      	add	r0, sp, #40	; 0x28
    2a50:	eb00 1013 	add.w	r0, r0, r3, lsr #4
    2a54:	f810 5c24 	ldrb.w	r5, [r0, #-36]
    2a58:	4809      	ldr	r0, [pc, #36]	; (2a80 <usb_update_sn_string_descriptor+0x78>)
    2a5a:	f800 5012 	strb.w	r5, [r0, r2, lsl #1]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    2a5e:	f003 030f 	and.w	r3, r3, #15
    2a62:	3101      	adds	r1, #1
    2a64:	ad0a      	add	r5, sp, #40	; 0x28
    2a66:	442b      	add	r3, r5
    2a68:	f813 3c24 	ldrb.w	r3, [r3, #-36]
    2a6c:	5443      	strb	r3, [r0, r1]
		for (int i = 0; i < usblen; i++) {
    2a6e:	3201      	adds	r2, #1
    2a70:	2a07      	cmp	r2, #7
    2a72:	dde6      	ble.n	2a42 <usb_update_sn_string_descriptor+0x3a>
		}
	}

	return sn;
}
    2a74:	4802      	ldr	r0, [pc, #8]	; (2a80 <usb_update_sn_string_descriptor+0x78>)
    2a76:	b00b      	add	sp, #44	; 0x2c
    2a78:	bd30      	pop	{r4, r5, pc}
    2a7a:	bf00      	nop
    2a7c:	0000f00c 	.word	0x0000f00c
    2a80:	20000e28 	.word	0x20000e28

00002a84 <usb_fix_ascii_sn_string_descriptor>:

static void usb_fix_ascii_sn_string_descriptor(struct usb_sn_descriptor *sn)
{
    2a84:	b570      	push	{r4, r5, r6, lr}
    2a86:	4604      	mov	r4, r0
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    2a88:	f7ff ffbe 	bl	2a08 <usb_update_sn_string_descriptor>
	int runtime_sn_len, default_sn_len;

	if (!runtime_sn) {
    2a8c:	b120      	cbz	r0, 2a98 <usb_fix_ascii_sn_string_descriptor+0x14>
    2a8e:	4605      	mov	r5, r0
		return;
	}

	runtime_sn_len = strlen(runtime_sn);
    2a90:	f00a fc76 	bl	d380 <strlen>
	if (!runtime_sn_len) {
    2a94:	4606      	mov	r6, r0
    2a96:	b900      	cbnz	r0, 2a9a <usb_fix_ascii_sn_string_descriptor+0x16>
			"length as CONFIG_USB_DEVICE_SN");
		return;
	}

	memcpy(sn->bString, runtime_sn, runtime_sn_len);
}
    2a98:	bd70      	pop	{r4, r5, r6, pc}
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    2a9a:	480e      	ldr	r0, [pc, #56]	; (2ad4 <usb_fix_ascii_sn_string_descriptor+0x50>)
    2a9c:	f00a fc70 	bl	d380 <strlen>
	if (runtime_sn_len != default_sn_len) {
    2aa0:	4286      	cmp	r6, r0
    2aa2:	d010      	beq.n	2ac6 <usb_fix_ascii_sn_string_descriptor+0x42>
    2aa4:	4b0c      	ldr	r3, [pc, #48]	; (2ad8 <usb_fix_ascii_sn_string_descriptor+0x54>)
    2aa6:	4a0d      	ldr	r2, [pc, #52]	; (2adc <usb_fix_ascii_sn_string_descriptor+0x58>)
    2aa8:	1a9b      	subs	r3, r3, r2
    2aaa:	08db      	lsrs	r3, r3, #3
		LOG_ERR("the new SN descriptor doesn't have the same "
    2aac:	f04f 0100 	mov.w	r1, #0
    2ab0:	2201      	movs	r2, #1
    2ab2:	f362 0102 	bfi	r1, r2, #0, #3
    2ab6:	f36f 01c5 	bfc	r1, #3, #3
    2aba:	f363 118f 	bfi	r1, r3, #6, #10
    2abe:	4808      	ldr	r0, [pc, #32]	; (2ae0 <usb_fix_ascii_sn_string_descriptor+0x5c>)
    2ac0:	f7fe fe62 	bl	1788 <log_0>
		return;
    2ac4:	e7e8      	b.n	2a98 <usb_fix_ascii_sn_string_descriptor+0x14>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    2ac6:	4632      	mov	r2, r6
    2ac8:	4629      	mov	r1, r5
    2aca:	1ca0      	adds	r0, r4, #2
    2acc:	f00a fc6a 	bl	d3a4 <memcpy>
    2ad0:	e7e2      	b.n	2a98 <usb_fix_ascii_sn_string_descriptor+0x14>
    2ad2:	bf00      	nop
    2ad4:	0000f00c 	.word	0x0000f00c
    2ad8:	0000ec9c 	.word	0x0000ec9c
    2adc:	0000ec4c 	.word	0x0000ec4c
    2ae0:	0000f020 	.word	0x0000f020

00002ae4 <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
    2ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ae8:	b082      	sub	sp, #8
    2aea:	4604      	mov	r4, r0
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	uint8_t numof_ifaces = 0U;
	uint8_t str_descr_idx = 0U;
	uint32_t requested_ep = BIT(16) | BIT(0);
    2aec:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    2af0:	9301      	str	r3, [sp, #4]
	uint8_t str_descr_idx = 0U;
    2af2:	2500      	movs	r5, #0
	uint8_t numof_ifaces = 0U;
    2af4:	462f      	mov	r7, r5
	struct usb_cfg_data *cfg_data = NULL;
    2af6:	46a8      	mov	r8, r5
	struct usb_cfg_descriptor *cfg_descr = NULL;
    2af8:	462e      	mov	r6, r5

	while (head->bLength != 0U) {
    2afa:	e062      	b.n	2bc2 <usb_fix_descriptor+0xde>
			LOG_DBG("Association descriptor %p", head);
			break;
		case USB_DESC_INTERFACE:
			if_descr = (struct usb_if_descriptor *)head;
			LOG_DBG("Interface descriptor %p", head);
			if (if_descr->bAlternateSetting) {
    2afc:	78e3      	ldrb	r3, [r4, #3]
    2afe:	2b00      	cmp	r3, #0
    2b00:	d15d      	bne.n	2bbe <usb_fix_descriptor+0xda>
				LOG_DBG("Skip alternate interface");
				break;
			}

			if (if_descr->bInterfaceNumber == 0U) {
    2b02:	78a3      	ldrb	r3, [r4, #2]
    2b04:	b94b      	cbnz	r3, 2b1a <usb_fix_descriptor+0x36>
				cfg_data = usb_get_cfg_data(if_descr);
    2b06:	4620      	mov	r0, r4
    2b08:	f7ff ff6e 	bl	29e8 <usb_get_cfg_data>
				if (!cfg_data) {
    2b0c:	4680      	mov	r8, r0
    2b0e:	b138      	cbz	r0, 2b20 <usb_fix_descriptor+0x3c>
					LOG_ERR("There is no usb_cfg_data "
						"for %p", head);
					return -1;
				}

				if (cfg_data->interface_config) {
    2b10:	6883      	ldr	r3, [r0, #8]
    2b12:	b113      	cbz	r3, 2b1a <usb_fix_descriptor+0x36>
					cfg_data->interface_config(head,
    2b14:	4639      	mov	r1, r7
    2b16:	4620      	mov	r0, r4
    2b18:	4798      	blx	r3
							numof_ifaces);
				}
			}

			numof_ifaces++;
    2b1a:	3701      	adds	r7, #1
    2b1c:	b2ff      	uxtb	r7, r7
			break;
    2b1e:	e04e      	b.n	2bbe <usb_fix_descriptor+0xda>
    2b20:	4b46      	ldr	r3, [pc, #280]	; (2c3c <usb_fix_descriptor+0x158>)
    2b22:	4a47      	ldr	r2, [pc, #284]	; (2c40 <usb_fix_descriptor+0x15c>)
    2b24:	1a9b      	subs	r3, r3, r2
    2b26:	08db      	lsrs	r3, r3, #3
					LOG_ERR("There is no usb_cfg_data "
    2b28:	f04f 0200 	mov.w	r2, #0
    2b2c:	2101      	movs	r1, #1
    2b2e:	f361 0202 	bfi	r2, r1, #0, #3
    2b32:	f36f 02c5 	bfc	r2, #3, #3
    2b36:	f363 128f 	bfi	r2, r3, #6, #10
    2b3a:	4621      	mov	r1, r4
    2b3c:	4841      	ldr	r0, [pc, #260]	; (2c44 <usb_fix_descriptor+0x160>)
    2b3e:	f7fe fdb1 	bl	16a4 <log_1>
					return -1;
    2b42:	f04f 30ff 	mov.w	r0, #4294967295
    2b46:	e073      	b.n	2c30 <usb_fix_descriptor+0x14c>
		case USB_DESC_ENDPOINT:
			if (!cfg_data) {
    2b48:	f1b8 0f00 	cmp.w	r8, #0
    2b4c:	d018      	beq.n	2b80 <usb_fix_descriptor+0x9c>
				return -1;
			}

			LOG_DBG("Endpoint descriptor %p", head);
			ep_descr = (struct usb_ep_descriptor *)head;
			if (usb_validate_ep_cfg_data(ep_descr,
    2b4e:	aa01      	add	r2, sp, #4
    2b50:	4641      	mov	r1, r8
    2b52:	4620      	mov	r0, r4
    2b54:	f00a f97d 	bl	ce52 <usb_validate_ep_cfg_data>
    2b58:	b388      	cbz	r0, 2bbe <usb_fix_descriptor+0xda>
    2b5a:	4b38      	ldr	r3, [pc, #224]	; (2c3c <usb_fix_descriptor+0x158>)
    2b5c:	4a38      	ldr	r2, [pc, #224]	; (2c40 <usb_fix_descriptor+0x15c>)
    2b5e:	1a9b      	subs	r3, r3, r2
    2b60:	08db      	lsrs	r3, r3, #3
						     cfg_data,
						     &requested_ep)) {
				LOG_ERR("Failed to validate endpoints");
    2b62:	f04f 0100 	mov.w	r1, #0
    2b66:	2201      	movs	r2, #1
    2b68:	f362 0102 	bfi	r1, r2, #0, #3
    2b6c:	f36f 01c5 	bfc	r1, #3, #3
    2b70:	f363 118f 	bfi	r1, r3, #6, #10
    2b74:	4834      	ldr	r0, [pc, #208]	; (2c48 <usb_fix_descriptor+0x164>)
    2b76:	f7fe fe07 	bl	1788 <log_0>
				return -1;
    2b7a:	f04f 30ff 	mov.w	r0, #4294967295
    2b7e:	e057      	b.n	2c30 <usb_fix_descriptor+0x14c>
    2b80:	4b2e      	ldr	r3, [pc, #184]	; (2c3c <usb_fix_descriptor+0x158>)
    2b82:	4a2f      	ldr	r2, [pc, #188]	; (2c40 <usb_fix_descriptor+0x15c>)
    2b84:	1a9b      	subs	r3, r3, r2
    2b86:	08db      	lsrs	r3, r3, #3
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
    2b88:	f04f 0100 	mov.w	r1, #0
    2b8c:	2201      	movs	r2, #1
    2b8e:	f362 0102 	bfi	r1, r2, #0, #3
    2b92:	f36f 01c5 	bfc	r1, #3, #3
    2b96:	f363 118f 	bfi	r1, r3, #6, #10
    2b9a:	482c      	ldr	r0, [pc, #176]	; (2c4c <usb_fix_descriptor+0x168>)
    2b9c:	f7fe fdf4 	bl	1788 <log_0>
				return -1;
    2ba0:	f04f 30ff 	mov.w	r0, #4294967295
    2ba4:	e044      	b.n	2c30 <usb_fix_descriptor+0x14c>
		case 0:
		case USB_DESC_STRING:
			/*
			 * Copy runtime SN string descriptor first, if has
			 */
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    2ba6:	2d03      	cmp	r5, #3
    2ba8:	d020      	beq.n	2bec <usb_fix_descriptor+0x108>
			}
			/*
			 * Skip language descriptor but correct
			 * wTotalLength and bNumInterfaces once.
			 */
			if (str_descr_idx) {
    2baa:	bb1d      	cbnz	r5, 2bf4 <usb_fix_descriptor+0x110>
				ascii7_to_utf16le(head);
			} else {
				if (!cfg_descr) {
    2bac:	b336      	cbz	r6, 2bfc <usb_fix_descriptor+0x118>
					return -1;
				}

				LOG_DBG("Now the wTotalLength is %zd",
					(uint8_t *)head - (uint8_t *)cfg_descr);
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    2bae:	1ba3      	subs	r3, r4, r6
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    2bb0:	70b3      	strb	r3, [r6, #2]
	dst[1] = val >> 8;
    2bb2:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2bb6:	70f3      	strb	r3, [r6, #3]
					     (uint8_t *)&cfg_descr->wTotalLength);
				cfg_descr->bNumInterfaces = numof_ifaces;
    2bb8:	7137      	strb	r7, [r6, #4]
			}

			str_descr_idx += 1U;
    2bba:	3501      	adds	r5, #1
    2bbc:	b2ed      	uxtb	r5, r5
		default:
			break;
		}

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    2bbe:	7823      	ldrb	r3, [r4, #0]
    2bc0:	441c      	add	r4, r3
	while (head->bLength != 0U) {
    2bc2:	7823      	ldrb	r3, [r4, #0]
    2bc4:	b37b      	cbz	r3, 2c26 <usb_fix_descriptor+0x142>
		switch (head->bDescriptorType) {
    2bc6:	7863      	ldrb	r3, [r4, #1]
    2bc8:	2b05      	cmp	r3, #5
    2bca:	d8f8      	bhi.n	2bbe <usb_fix_descriptor+0xda>
    2bcc:	a201      	add	r2, pc, #4	; (adr r2, 2bd4 <usb_fix_descriptor+0xf0>)
    2bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2bd2:	bf00      	nop
    2bd4:	00002ba7 	.word	0x00002ba7
    2bd8:	00002bbf 	.word	0x00002bbf
    2bdc:	00002c23 	.word	0x00002c23
    2be0:	00002ba7 	.word	0x00002ba7
    2be4:	00002afd 	.word	0x00002afd
    2be8:	00002b49 	.word	0x00002b49
				usb_fix_ascii_sn_string_descriptor(sn);
    2bec:	4620      	mov	r0, r4
    2bee:	f7ff ff49 	bl	2a84 <usb_fix_ascii_sn_string_descriptor>
    2bf2:	e7da      	b.n	2baa <usb_fix_descriptor+0xc6>
				ascii7_to_utf16le(head);
    2bf4:	4620      	mov	r0, r4
    2bf6:	f00a f918 	bl	ce2a <ascii7_to_utf16le>
    2bfa:	e7de      	b.n	2bba <usb_fix_descriptor+0xd6>
    2bfc:	4b0f      	ldr	r3, [pc, #60]	; (2c3c <usb_fix_descriptor+0x158>)
    2bfe:	4a10      	ldr	r2, [pc, #64]	; (2c40 <usb_fix_descriptor+0x15c>)
    2c00:	1a9b      	subs	r3, r3, r2
    2c02:	08db      	lsrs	r3, r3, #3
					LOG_ERR("Incomplete device descriptor");
    2c04:	f04f 0100 	mov.w	r1, #0
    2c08:	2201      	movs	r2, #1
    2c0a:	f362 0102 	bfi	r1, r2, #0, #3
    2c0e:	f36f 01c5 	bfc	r1, #3, #3
    2c12:	f363 118f 	bfi	r1, r3, #6, #10
    2c16:	480e      	ldr	r0, [pc, #56]	; (2c50 <usb_fix_descriptor+0x16c>)
    2c18:	f7fe fdb6 	bl	1788 <log_0>
					return -1;
    2c1c:	f04f 30ff 	mov.w	r0, #4294967295
    2c20:	e006      	b.n	2c30 <usb_fix_descriptor+0x14c>
			cfg_descr = (struct usb_cfg_descriptor *)head;
    2c22:	4626      	mov	r6, r4
    2c24:	e7cb      	b.n	2bbe <usb_fix_descriptor+0xda>
	}

	if ((head + 1) != __usb_descriptor_end) {
    2c26:	1ca0      	adds	r0, r4, #2
    2c28:	4b0a      	ldr	r3, [pc, #40]	; (2c54 <usb_fix_descriptor+0x170>)
    2c2a:	4298      	cmp	r0, r3
    2c2c:	d103      	bne.n	2c36 <usb_fix_descriptor+0x152>
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
	}

	return 0;
    2c2e:	2000      	movs	r0, #0
}
    2c30:	b002      	add	sp, #8
    2c32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return usb_fix_descriptor(head + 1);
    2c36:	f7ff ff55 	bl	2ae4 <usb_fix_descriptor>
    2c3a:	e7f9      	b.n	2c30 <usb_fix_descriptor+0x14c>
    2c3c:	0000ec9c 	.word	0x0000ec9c
    2c40:	0000ec4c 	.word	0x0000ec4c
    2c44:	0000f06c 	.word	0x0000f06c
    2c48:	0000f0d0 	.word	0x0000f0d0
    2c4c:	0000f08c 	.word	0x0000f08c
    2c50:	0000f0f0 	.word	0x0000f0f0
    2c54:	200003a7 	.word	0x200003a7

00002c58 <usb_get_device_descriptor>:


uint8_t *usb_get_device_descriptor(void)
{
    2c58:	b508      	push	{r3, lr}
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
    2c5a:	480c      	ldr	r0, [pc, #48]	; (2c8c <usb_get_device_descriptor+0x34>)
    2c5c:	f7ff ff42 	bl	2ae4 <usb_fix_descriptor>
    2c60:	b908      	cbnz	r0, 2c66 <usb_get_device_descriptor+0xe>
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
    2c62:	480a      	ldr	r0, [pc, #40]	; (2c8c <usb_get_device_descriptor+0x34>)
}
    2c64:	bd08      	pop	{r3, pc}
    2c66:	4b0a      	ldr	r3, [pc, #40]	; (2c90 <usb_get_device_descriptor+0x38>)
    2c68:	4a0a      	ldr	r2, [pc, #40]	; (2c94 <usb_get_device_descriptor+0x3c>)
    2c6a:	1a9b      	subs	r3, r3, r2
    2c6c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to fixup USB descriptor");
    2c6e:	f04f 0100 	mov.w	r1, #0
    2c72:	2201      	movs	r2, #1
    2c74:	f362 0102 	bfi	r1, r2, #0, #3
    2c78:	f36f 01c5 	bfc	r1, #3, #3
    2c7c:	f363 118f 	bfi	r1, r3, #6, #10
    2c80:	4805      	ldr	r0, [pc, #20]	; (2c98 <usb_get_device_descriptor+0x40>)
    2c82:	f7fe fd81 	bl	1788 <log_0>
		return NULL;
    2c86:	2000      	movs	r0, #0
    2c88:	e7ec      	b.n	2c64 <usb_get_device_descriptor+0xc>
    2c8a:	bf00      	nop
    2c8c:	200002e8 	.word	0x200002e8
    2c90:	0000ec9c 	.word	0x0000ec9c
    2c94:	0000ec4c 	.word	0x0000ec4c
    2c98:	0000f110 	.word	0x0000f110

00002c9c <usb_ep_get_transfer>:
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2c9c:	2300      	movs	r3, #0
    2c9e:	e000      	b.n	2ca2 <usb_ep_get_transfer+0x6>
    2ca0:	3301      	adds	r3, #1
    2ca2:	2b03      	cmp	r3, #3
    2ca4:	dc0c      	bgt.n	2cc0 <usb_ep_get_transfer+0x24>
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    2ca6:	019a      	lsls	r2, r3, #6
    2ca8:	4906      	ldr	r1, [pc, #24]	; (2cc4 <usb_ep_get_transfer+0x28>)
    2caa:	5c8a      	ldrb	r2, [r1, r2]
    2cac:	4282      	cmp	r2, r0
    2cae:	d1f7      	bne.n	2ca0 <usb_ep_get_transfer+0x4>
    2cb0:	eb01 1283 	add.w	r2, r1, r3, lsl #6
    2cb4:	6852      	ldr	r2, [r2, #4]
    2cb6:	2a00      	cmp	r2, #0
    2cb8:	d0f2      	beq.n	2ca0 <usb_ep_get_transfer+0x4>
			return &ut_data[i];
    2cba:	eb01 1083 	add.w	r0, r1, r3, lsl #6
    2cbe:	4770      	bx	lr
		}
	}

	return NULL;
    2cc0:	2000      	movs	r0, #0
}
    2cc2:	4770      	bx	lr
    2cc4:	20000e3c 	.word	0x20000e3c

00002cc8 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    2cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ccc:	b082      	sub	sp, #8
    2cce:	4604      	mov	r4, r0
	int ret = 0;
	uint32_t bytes;
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;
    2cd0:	f810 5c2c 	ldrb.w	r5, [r0, #-44]

	if (trans->status != -EBUSY) {
    2cd4:	f850 3c28 	ldr.w	r3, [r0, #-40]
    2cd8:	f113 0f10 	cmn.w	r3, #16
    2cdc:	d10c      	bne.n	2cf8 <usb_transfer_work+0x30>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    2cde:	6903      	ldr	r3, [r0, #16]
    2ce0:	f013 0f02 	tst.w	r3, #2
    2ce4:	d062      	beq.n	2dac <usb_transfer_work+0xe4>
		if (!trans->bsize) {
    2ce6:	f850 2c20 	ldr.w	r2, [r0, #-32]
    2cea:	bb82      	cbnz	r2, 2d4e <usb_transfer_work+0x86>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    2cec:	f013 0f04 	tst.w	r3, #4
    2cf0:	d026      	beq.n	2d40 <usb_transfer_work+0x78>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
			}
			trans->status = 0;
    2cf2:	2300      	movs	r3, #0
    2cf4:	f844 3c28 	str.w	r3, [r4, #-40]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    2cf8:	f854 3c28 	ldr.w	r3, [r4, #-40]
    2cfc:	f113 0f10 	cmn.w	r3, #16
    2d00:	d01b      	beq.n	2d3a <usb_transfer_work+0x72>
    2d02:	f854 6c18 	ldr.w	r6, [r4, #-24]
    2d06:	b1c6      	cbz	r6, 2d3a <usb_transfer_work+0x72>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    2d08:	f854 7c1c 	ldr.w	r7, [r4, #-28]
		void *priv = trans->priv;
    2d0c:	f854 8c14 	ldr.w	r8, [r4, #-20]

		if (k_is_in_isr()) {
    2d10:	f00b fa1f 	bl	e152 <k_is_in_isr>
    2d14:	2800      	cmp	r0, #0
    2d16:	f040 808f 	bne.w	2e38 <usb_transfer_work+0x170>
		}

		LOG_DBG("Transfer done, ep 0x%02x, status %d, size %zu",
			trans->ep, trans->status, trans->tsize);

		trans->cb = NULL;
    2d1a:	2300      	movs	r3, #0
    2d1c:	f844 3c18 	str.w	r3, [r4, #-24]
		k_sem_give(&trans->sem);
    2d20:	f1a4 0010 	sub.w	r0, r4, #16
	z_impl_k_sem_give(sem);
    2d24:	f007 fd3e 	bl	a7a4 <z_impl_k_sem_give>

		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
    2d28:	f854 3c28 	ldr.w	r3, [r4, #-40]
    2d2c:	f113 0f8c 	cmn.w	r3, #140	; 0x8c
    2d30:	d003      	beq.n	2d3a <usb_transfer_work+0x72>
			cb(ep, tsize, priv);
    2d32:	4642      	mov	r2, r8
    2d34:	4639      	mov	r1, r7
    2d36:	4628      	mov	r0, r5
    2d38:	47b0      	blx	r6
		}
	}
}
    2d3a:	b002      	add	sp, #8
    2d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_write(ep, NULL, 0, NULL);
    2d40:	2300      	movs	r3, #0
    2d42:	461a      	mov	r2, r3
    2d44:	4619      	mov	r1, r3
    2d46:	4628      	mov	r0, r5
    2d48:	f00a f850 	bl	cdec <usb_write>
    2d4c:	e7d1      	b.n	2cf2 <usb_transfer_work+0x2a>
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    2d4e:	ab01      	add	r3, sp, #4
    2d50:	f850 1c24 	ldr.w	r1, [r0, #-36]
    2d54:	4628      	mov	r0, r5
    2d56:	f00a f849 	bl	cdec <usb_write>
		if (ret) {
    2d5a:	4601      	mov	r1, r0
    2d5c:	b980      	cbnz	r0, 2d80 <usb_transfer_work+0xb8>
		trans->buffer += bytes;
    2d5e:	f854 3c24 	ldr.w	r3, [r4, #-36]
    2d62:	9a01      	ldr	r2, [sp, #4]
    2d64:	4413      	add	r3, r2
    2d66:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    2d6a:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2d6e:	1a9b      	subs	r3, r3, r2
    2d70:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    2d74:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    2d78:	4413      	add	r3, r2
    2d7a:	f844 3c1c 	str.w	r3, [r4, #-28]
    2d7e:	e7bb      	b.n	2cf8 <usb_transfer_work+0x30>
    2d80:	4a30      	ldr	r2, [pc, #192]	; (2e44 <usb_transfer_work+0x17c>)
    2d82:	4b31      	ldr	r3, [pc, #196]	; (2e48 <usb_transfer_work+0x180>)
    2d84:	1ad2      	subs	r2, r2, r3
    2d86:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    2d88:	f04f 0300 	mov.w	r3, #0
    2d8c:	2001      	movs	r0, #1
    2d8e:	f360 0302 	bfi	r3, r0, #0, #3
    2d92:	f36f 03c5 	bfc	r3, #3, #3
    2d96:	f362 138f 	bfi	r3, r2, #6, #10
    2d9a:	462a      	mov	r2, r5
    2d9c:	482b      	ldr	r0, [pc, #172]	; (2e4c <usb_transfer_work+0x184>)
    2d9e:	f7fe fcb7 	bl	1710 <log_2>
			trans->status = -EINVAL;
    2da2:	f06f 0315 	mvn.w	r3, #21
    2da6:	f844 3c28 	str.w	r3, [r4, #-40]
			goto done;
    2daa:	e7a5      	b.n	2cf8 <usb_transfer_work+0x30>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    2dac:	ab01      	add	r3, sp, #4
    2dae:	f850 2c20 	ldr.w	r2, [r0, #-32]
    2db2:	f850 1c24 	ldr.w	r1, [r0, #-36]
    2db6:	4628      	mov	r0, r5
    2db8:	f003 f810 	bl	5ddc <usb_dc_ep_read_wait>
		if (ret) {
    2dbc:	4601      	mov	r1, r0
    2dbe:	b9a0      	cbnz	r0, 2dea <usb_transfer_work+0x122>
		trans->buffer += bytes;
    2dc0:	f854 3c24 	ldr.w	r3, [r4, #-36]
    2dc4:	9e01      	ldr	r6, [sp, #4]
    2dc6:	4433      	add	r3, r6
    2dc8:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    2dcc:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2dd0:	1b9b      	subs	r3, r3, r6
    2dd2:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    2dd6:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    2dda:	4433      	add	r3, r6
    2ddc:	f844 3c1c 	str.w	r3, [r4, #-28]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    2de0:	b9ce      	cbnz	r6, 2e16 <usb_transfer_work+0x14e>
			trans->status = 0;
    2de2:	2300      	movs	r3, #0
    2de4:	f844 3c28 	str.w	r3, [r4, #-40]
			goto done;
    2de8:	e786      	b.n	2cf8 <usb_transfer_work+0x30>
    2dea:	4a16      	ldr	r2, [pc, #88]	; (2e44 <usb_transfer_work+0x17c>)
    2dec:	4b16      	ldr	r3, [pc, #88]	; (2e48 <usb_transfer_work+0x180>)
    2dee:	1ad2      	subs	r2, r2, r3
    2df0:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    2df2:	f04f 0300 	mov.w	r3, #0
    2df6:	2001      	movs	r0, #1
    2df8:	f360 0302 	bfi	r3, r0, #0, #3
    2dfc:	f36f 03c5 	bfc	r3, #3, #3
    2e00:	f362 138f 	bfi	r3, r2, #6, #10
    2e04:	462a      	mov	r2, r5
    2e06:	4811      	ldr	r0, [pc, #68]	; (2e4c <usb_transfer_work+0x184>)
    2e08:	f7fe fc82 	bl	1710 <log_2>
			trans->status = -EINVAL;
    2e0c:	f06f 0315 	mvn.w	r3, #21
    2e10:	f844 3c28 	str.w	r3, [r4, #-40]
			goto done;
    2e14:	e770      	b.n	2cf8 <usb_transfer_work+0x30>
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    2e16:	4628      	mov	r0, r5
    2e18:	f003 f93c 	bl	6094 <usb_dc_ep_mps>
    2e1c:	fbb6 f3f0 	udiv	r3, r6, r0
    2e20:	fb00 6013 	mls	r0, r0, r3, r6
    2e24:	2800      	cmp	r0, #0
    2e26:	d1dc      	bne.n	2de2 <usb_transfer_work+0x11a>
    2e28:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2e2c:	2b00      	cmp	r3, #0
    2e2e:	d0d8      	beq.n	2de2 <usb_transfer_work+0x11a>
		usb_dc_ep_read_continue(ep);
    2e30:	4628      	mov	r0, r5
    2e32:	f003 f84d 	bl	5ed0 <usb_dc_ep_read_continue>
    2e36:	e75f      	b.n	2cf8 <usb_transfer_work+0x30>
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2e38:	4621      	mov	r1, r4
    2e3a:	4805      	ldr	r0, [pc, #20]	; (2e50 <usb_transfer_work+0x188>)
    2e3c:	f00b fa83 	bl	e346 <k_work_submit_to_queue>
			return;
    2e40:	e77b      	b.n	2d3a <usb_transfer_work+0x72>
    2e42:	bf00      	nop
    2e44:	0000ecb4 	.word	0x0000ecb4
    2e48:	0000ec4c 	.word	0x0000ec4c
    2e4c:	0000f140 	.word	0x0000f140
    2e50:	200004b8 	.word	0x200004b8

00002e54 <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
    2e54:	b570      	push	{r4, r5, r6, lr}
    2e56:	b082      	sub	sp, #8
    2e58:	4606      	mov	r6, r0
    2e5a:	460c      	mov	r4, r1
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    2e5c:	f7ff ff1e 	bl	2c9c <usb_ep_get_transfer>

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    2e60:	1e63      	subs	r3, r4, #1
    2e62:	b2db      	uxtb	r3, r3
    2e64:	2b01      	cmp	r3, #1
    2e66:	d80a      	bhi.n	2e7e <usb_transfer_ep_callback+0x2a>
    2e68:	4605      	mov	r5, r0
		return;
	}

	if (!trans) {
    2e6a:	b150      	cbz	r0, 2e82 <usb_transfer_ep_callback+0x2e>
			LOG_ERR("RX data lost, no transfer");
		}
		return;
	}

	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    2e6c:	f00b f971 	bl	e152 <k_is_in_isr>
    2e70:	b108      	cbz	r0, 2e76 <usb_transfer_ep_callback+0x22>
    2e72:	2c01      	cmp	r4, #1
    2e74:	d122      	bne.n	2ebc <usb_transfer_ep_callback+0x68>
		/* If we are not in IRQ context, no need to defer work */
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
    2e76:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    2e7a:	f7ff ff25 	bl	2cc8 <usb_transfer_work>
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
    2e7e:	b002      	add	sp, #8
    2e80:	bd70      	pop	{r4, r5, r6, pc}
		if (status == USB_DC_EP_DATA_OUT) {
    2e82:	2c01      	cmp	r4, #1
    2e84:	d1fb      	bne.n	2e7e <usb_transfer_ep_callback+0x2a>
				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
    2e86:	ab01      	add	r3, sp, #4
    2e88:	2201      	movs	r2, #1
    2e8a:	f10d 0103 	add.w	r1, sp, #3
    2e8e:	4630      	mov	r0, r6
    2e90:	f002 ffa4 	bl	5ddc <usb_dc_ep_read_wait>
			} while (bytes);
    2e94:	9b01      	ldr	r3, [sp, #4]
    2e96:	2b00      	cmp	r3, #0
    2e98:	d1f5      	bne.n	2e86 <usb_transfer_ep_callback+0x32>
    2e9a:	4b0b      	ldr	r3, [pc, #44]	; (2ec8 <usb_transfer_ep_callback+0x74>)
    2e9c:	4a0b      	ldr	r2, [pc, #44]	; (2ecc <usb_transfer_ep_callback+0x78>)
    2e9e:	1a9b      	subs	r3, r3, r2
    2ea0:	08db      	lsrs	r3, r3, #3
			LOG_ERR("RX data lost, no transfer");
    2ea2:	f04f 0100 	mov.w	r1, #0
    2ea6:	2201      	movs	r2, #1
    2ea8:	f362 0102 	bfi	r1, r2, #0, #3
    2eac:	f36f 01c5 	bfc	r1, #3, #3
    2eb0:	f363 118f 	bfi	r1, r3, #6, #10
    2eb4:	4806      	ldr	r0, [pc, #24]	; (2ed0 <usb_transfer_ep_callback+0x7c>)
    2eb6:	f7fe fc67 	bl	1788 <log_0>
		return;
    2eba:	e7e0      	b.n	2e7e <usb_transfer_ep_callback+0x2a>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2ebc:	f105 012c 	add.w	r1, r5, #44	; 0x2c
    2ec0:	4804      	ldr	r0, [pc, #16]	; (2ed4 <usb_transfer_ep_callback+0x80>)
    2ec2:	f00b fa40 	bl	e346 <k_work_submit_to_queue>
    2ec6:	e7da      	b.n	2e7e <usb_transfer_ep_callback+0x2a>
    2ec8:	0000ecb4 	.word	0x0000ecb4
    2ecc:	0000ec4c 	.word	0x0000ec4c
    2ed0:	0000f160 	.word	0x0000f160
    2ed4:	200004b8 	.word	0x200004b8

00002ed8 <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
    2ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2edc:	4605      	mov	r5, r0
    2ede:	4688      	mov	r8, r1
    2ee0:	4617      	mov	r7, r2
    2ee2:	461e      	mov	r6, r3
	struct usb_transfer_data *trans = NULL;
	int i, key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
    2ee4:	f00a f85f 	bl	cfa6 <usb_transfer_is_busy>
    2ee8:	2800      	cmp	r0, #0
    2eea:	f040 8083 	bne.w	2ff4 <CONFIG_USB_DEVICE_VID+0x11>
	__asm__ volatile(
    2eee:	f04f 0320 	mov.w	r3, #32
    2ef2:	f3ef 8911 	mrs	r9, BASEPRI
    2ef6:	f383 8812 	msr	BASEPRI_MAX, r3
    2efa:	f3bf 8f6f 	isb	sy
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2efe:	2400      	movs	r4, #0
    2f00:	2c03      	cmp	r4, #3
    2f02:	dc10      	bgt.n	2f26 <usb_transfer+0x4e>
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
    2f04:	01a0      	lsls	r0, r4, #6
    2f06:	f100 0318 	add.w	r3, r0, #24
    2f0a:	483c      	ldr	r0, [pc, #240]	; (2ffc <CONFIG_USB_DEVICE_VID+0x19>)
    2f0c:	4418      	add	r0, r3
    2f0e:	3004      	adds	r0, #4
	return z_impl_k_sem_take(sem, timeout);
    2f10:	2200      	movs	r2, #0
    2f12:	2300      	movs	r3, #0
    2f14:	f007 fc6a 	bl	a7ec <z_impl_k_sem_take>
    2f18:	b108      	cbz	r0, 2f1e <usb_transfer+0x46>
	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2f1a:	3401      	adds	r4, #1
    2f1c:	e7f0      	b.n	2f00 <usb_transfer+0x28>
			trans = &ut_data[i];
    2f1e:	4837      	ldr	r0, [pc, #220]	; (2ffc <CONFIG_USB_DEVICE_VID+0x19>)
    2f20:	eb00 1484 	add.w	r4, r0, r4, lsl #6
			break;
    2f24:	e000      	b.n	2f28 <usb_transfer+0x50>
	struct usb_transfer_data *trans = NULL;
    2f26:	2400      	movs	r4, #0
		}
	}

	if (!trans) {
    2f28:	b344      	cbz	r4, 2f7c <usb_transfer+0xa4>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
    2f2a:	f8d4 a004 	ldr.w	sl, [r4, #4]
    2f2e:	f11a 0f10 	cmn.w	sl, #16
    2f32:	d036      	beq.n	2fa2 <usb_transfer+0xca>
		ret = -EBUSY;
		goto done;
	}

	/* Configure new transfer */
	trans->ep = ep;
    2f34:	7025      	strb	r5, [r4, #0]
	trans->buffer = data;
    2f36:	f8c4 8008 	str.w	r8, [r4, #8]
	trans->bsize = dlen;
    2f3a:	60e7      	str	r7, [r4, #12]
	trans->tsize = 0;
    2f3c:	2300      	movs	r3, #0
    2f3e:	6123      	str	r3, [r4, #16]
	trans->cb = cb;
    2f40:	9b08      	ldr	r3, [sp, #32]
    2f42:	6163      	str	r3, [r4, #20]
	trans->flags = flags;
    2f44:	63e6      	str	r6, [r4, #60]	; 0x3c
	trans->priv = cb_data;
    2f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2f48:	61a3      	str	r3, [r4, #24]
	trans->status = -EBUSY;
    2f4a:	f06f 030f 	mvn.w	r3, #15
    2f4e:	6063      	str	r3, [r4, #4]

	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    2f50:	4628      	mov	r0, r5
    2f52:	f003 f89f 	bl	6094 <usb_dc_ep_mps>
    2f56:	2800      	cmp	r0, #0
    2f58:	d139      	bne.n	2fce <usb_transfer+0xf6>
		/* no need to send ZLP since last packet will be a short one */
		trans->flags |= USB_TRANS_NO_ZLP;
	}

	if (flags & USB_TRANS_WRITE) {
    2f5a:	f016 0f02 	tst.w	r6, #2
    2f5e:	d044      	beq.n	2fea <CONFIG_USB_DEVICE_VID+0x7>
		/* start writing first chunk */
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2f60:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    2f64:	4826      	ldr	r0, [pc, #152]	; (3000 <CONFIG_USB_DEVICE_VID+0x1d>)
    2f66:	f00b f9ee 	bl	e346 <k_work_submit_to_queue>
	int i, key, ret = 0;
    2f6a:	f04f 0a00 	mov.w	sl, #0
	__asm__ volatile(
    2f6e:	f389 8811 	msr	BASEPRI, r9
    2f72:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
    2f76:	4650      	mov	r0, sl
    2f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2f7c:	4b21      	ldr	r3, [pc, #132]	; (3004 <CONFIG_USB_DEVICE_VID+0x21>)
    2f7e:	4a22      	ldr	r2, [pc, #136]	; (3008 <CONFIG_USB_DEVICE_VID+0x25>)
    2f80:	1a9b      	subs	r3, r3, r2
    2f82:	08db      	lsrs	r3, r3, #3
		LOG_ERR("No transfer slot available");
    2f84:	f04f 0100 	mov.w	r1, #0
    2f88:	2201      	movs	r2, #1
    2f8a:	f362 0102 	bfi	r1, r2, #0, #3
    2f8e:	f36f 01c5 	bfc	r1, #3, #3
    2f92:	f363 118f 	bfi	r1, r3, #6, #10
    2f96:	481d      	ldr	r0, [pc, #116]	; (300c <CONFIG_USB_DEVICE_VID+0x29>)
    2f98:	f7fe fbf6 	bl	1788 <log_0>
		ret = -ENOMEM;
    2f9c:	f06f 0a0b 	mvn.w	sl, #11
		goto done;
    2fa0:	e7e5      	b.n	2f6e <usb_transfer+0x96>
    2fa2:	4b18      	ldr	r3, [pc, #96]	; (3004 <CONFIG_USB_DEVICE_VID+0x21>)
    2fa4:	4a18      	ldr	r2, [pc, #96]	; (3008 <CONFIG_USB_DEVICE_VID+0x25>)
    2fa6:	1a9b      	subs	r3, r3, r2
    2fa8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
    2faa:	f04f 0200 	mov.w	r2, #0
    2fae:	2101      	movs	r1, #1
    2fb0:	f361 0202 	bfi	r2, r1, #0, #3
    2fb4:	f36f 02c5 	bfc	r2, #3, #3
    2fb8:	f363 128f 	bfi	r2, r3, #6, #10
    2fbc:	4629      	mov	r1, r5
    2fbe:	4814      	ldr	r0, [pc, #80]	; (3010 <CONFIG_USB_DEVICE_VID+0x2d>)
    2fc0:	f7fe fb70 	bl	16a4 <log_1>
		k_sem_give(&trans->sem);
    2fc4:	f104 001c 	add.w	r0, r4, #28
	z_impl_k_sem_give(sem);
    2fc8:	f007 fbec 	bl	a7a4 <z_impl_k_sem_give>
		goto done;
    2fcc:	e7cf      	b.n	2f6e <usb_transfer+0x96>
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    2fce:	4628      	mov	r0, r5
    2fd0:	f003 f860 	bl	6094 <usb_dc_ep_mps>
    2fd4:	fbb7 f3f0 	udiv	r3, r7, r0
    2fd8:	fb00 7013 	mls	r0, r0, r3, r7
    2fdc:	2800      	cmp	r0, #0
    2fde:	d0bc      	beq.n	2f5a <usb_transfer+0x82>
		trans->flags |= USB_TRANS_NO_ZLP;
    2fe0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    2fe2:	f043 0304 	orr.w	r3, r3, #4
    2fe6:	63e3      	str	r3, [r4, #60]	; 0x3c
    2fe8:	e7b7      	b.n	2f5a <usb_transfer+0x82>
		ret = usb_dc_ep_read_continue(ep);
    2fea:	4628      	mov	r0, r5
    2fec:	f002 ff70 	bl	5ed0 <usb_dc_ep_read_continue>
    2ff0:	4682      	mov	sl, r0
    2ff2:	e7bc      	b.n	2f6e <usb_transfer+0x96>
		return -EBUSY;
    2ff4:	f06f 0a0f 	mvn.w	sl, #15
    2ff8:	e7bd      	b.n	2f76 <usb_transfer+0x9e>
    2ffa:	bf00      	nop
    2ffc:	20000e3c 	.word	0x20000e3c
    3000:	200004b8 	.word	0x200004b8
    3004:	0000ecb4 	.word	0x0000ecb4
    3008:	0000ec4c 	.word	0x0000ec4c
    300c:	0000f17c 	.word	0x0000f17c
    3010:	0000f198 	.word	0x0000f198

00003014 <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
    3014:	b510      	push	{r4, lr}
	__asm__ volatile(
    3016:	f04f 0320 	mov.w	r3, #32
    301a:	f3ef 8411 	mrs	r4, BASEPRI
    301e:	f383 8812 	msr	BASEPRI_MAX, r3
    3022:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    3026:	f7ff fe39 	bl	2c9c <usb_ep_get_transfer>
	if (!trans) {
    302a:	b120      	cbz	r0, 3036 <usb_cancel_transfer+0x22>
    302c:	4601      	mov	r1, r0
		goto done;
	}

	if (trans->status != -EBUSY) {
    302e:	6843      	ldr	r3, [r0, #4]
    3030:	f113 0f10 	cmn.w	r3, #16
    3034:	d004      	beq.n	3040 <usb_cancel_transfer+0x2c>
	__asm__ volatile(
    3036:	f384 8811 	msr	BASEPRI, r4
    303a:	f3bf 8f6f 	isb	sy
	trans->status = -ECANCELED;
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);

done:
	irq_unlock(key);
}
    303e:	bd10      	pop	{r4, pc}
	trans->status = -ECANCELED;
    3040:	f06f 038b 	mvn.w	r3, #139	; 0x8b
    3044:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    3046:	312c      	adds	r1, #44	; 0x2c
    3048:	4801      	ldr	r0, [pc, #4]	; (3050 <usb_cancel_transfer+0x3c>)
    304a:	f00b f97c 	bl	e346 <k_work_submit_to_queue>
    304e:	e7f2      	b.n	3036 <usb_cancel_transfer+0x22>
    3050:	200004b8 	.word	0x200004b8

00003054 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    3054:	b538      	push	{r3, r4, r5, lr}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    3056:	2400      	movs	r4, #0
    3058:	e011      	b.n	307e <usb_cancel_transfers+0x2a>
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
			trans->status = -ECANCELED;
    305a:	4b12      	ldr	r3, [pc, #72]	; (30a4 <usb_cancel_transfers+0x50>)
    305c:	01a1      	lsls	r1, r4, #6
    305e:	eb03 1284 	add.w	r2, r3, r4, lsl #6
    3062:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    3066:	6050      	str	r0, [r2, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    3068:	3128      	adds	r1, #40	; 0x28
    306a:	4419      	add	r1, r3
    306c:	3104      	adds	r1, #4
    306e:	480e      	ldr	r0, [pc, #56]	; (30a8 <usb_cancel_transfers+0x54>)
    3070:	f00b f969 	bl	e346 <k_work_submit_to_queue>
    3074:	f385 8811 	msr	BASEPRI, r5
    3078:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    307c:	3401      	adds	r4, #1
    307e:	2c03      	cmp	r4, #3
    3080:	dc0f      	bgt.n	30a2 <usb_cancel_transfers+0x4e>
	__asm__ volatile(
    3082:	f04f 0320 	mov.w	r3, #32
    3086:	f3ef 8511 	mrs	r5, BASEPRI
    308a:	f383 8812 	msr	BASEPRI_MAX, r3
    308e:	f3bf 8f6f 	isb	sy
		if (trans->status == -EBUSY) {
    3092:	4b04      	ldr	r3, [pc, #16]	; (30a4 <usb_cancel_transfers+0x50>)
    3094:	eb03 1384 	add.w	r3, r3, r4, lsl #6
    3098:	685b      	ldr	r3, [r3, #4]
    309a:	f113 0f10 	cmn.w	r3, #16
    309e:	d1e9      	bne.n	3074 <usb_cancel_transfers+0x20>
    30a0:	e7db      	b.n	305a <usb_cancel_transfers+0x6>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    30a2:	bd38      	pop	{r3, r4, r5, pc}
    30a4:	20000e3c 	.word	0x20000e3c
    30a8:	200004b8 	.word	0x200004b8

000030ac <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    30ac:	b570      	push	{r4, r5, r6, lr}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    30ae:	2600      	movs	r6, #0
    30b0:	e011      	b.n	30d6 <usb_transfer_init+0x2a>
		k_work_init(&ut_data[i].work, usb_transfer_work);
    30b2:	4c0b      	ldr	r4, [pc, #44]	; (30e0 <usb_transfer_init+0x34>)
    30b4:	01b5      	lsls	r5, r6, #6
    30b6:	f105 0028 	add.w	r0, r5, #40	; 0x28
    30ba:	4420      	add	r0, r4
    30bc:	4909      	ldr	r1, [pc, #36]	; (30e4 <usb_transfer_init+0x38>)
    30be:	3004      	adds	r0, #4
    30c0:	f00b f93b 	bl	e33a <k_work_init>
		k_sem_init(&ut_data[i].sem, 1, 1);
    30c4:	f105 0018 	add.w	r0, r5, #24
    30c8:	4420      	add	r0, r4
    30ca:	3004      	adds	r0, #4
	return z_impl_k_sem_init(sem, initial_count, limit);
    30cc:	2201      	movs	r2, #1
    30ce:	4611      	mov	r1, r2
    30d0:	f00b f924 	bl	e31c <z_impl_k_sem_init>
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    30d4:	3601      	adds	r6, #1
    30d6:	2e03      	cmp	r6, #3
    30d8:	ddeb      	ble.n	30b2 <usb_transfer_init+0x6>
	}

	return 0;
}
    30da:	2000      	movs	r0, #0
    30dc:	bd70      	pop	{r4, r5, r6, pc}
    30de:	bf00      	nop
    30e0:	20000e3c 	.word	0x20000e3c
    30e4:	00002cc9 	.word	0x00002cc9

000030e8 <cdc_acm_class_handle_req>:
 *
 * @return  0 on success, negative errno code on fail.
 */
int cdc_acm_class_handle_req(struct usb_setup_packet *setup,
			     int32_t *len, uint8_t **data)
{
    30e8:	b570      	push	{r4, r5, r6, lr}
    30ea:	4604      	mov	r4, r0
    30ec:	460e      	mov	r6, r1
    30ee:	4615      	mov	r5, r2
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;
	uint32_t rate;
	uint32_t new_rate;

	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    30f0:	7901      	ldrb	r1, [r0, #4]
    30f2:	481e      	ldr	r0, [pc, #120]	; (316c <cdc_acm_class_handle_req+0x84>)
    30f4:	f009 ff23 	bl	cf3e <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
    30f8:	b158      	cbz	r0, 3112 <cdc_acm_class_handle_req+0x2a>
		return -ENODEV;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	if (usb_reqtype_is_to_device(setup)) {
    30fa:	f994 2000 	ldrsb.w	r2, [r4]
    30fe:	2a00      	cmp	r2, #0
    3100:	db27      	blt.n	3152 <cdc_acm_class_handle_req+0x6a>
		switch (setup->bRequest) {
    3102:	7862      	ldrb	r2, [r4, #1]
    3104:	2a20      	cmp	r2, #32
    3106:	d018      	beq.n	313a <cdc_acm_class_handle_req+0x52>
    3108:	2a22      	cmp	r2, #34	; 0x22
    310a:	d01d      	beq.n	3148 <cdc_acm_class_handle_req+0x60>
    310c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3110:	e028      	b.n	3164 <cdc_acm_class_handle_req+0x7c>
    3112:	4b17      	ldr	r3, [pc, #92]	; (3170 <cdc_acm_class_handle_req+0x88>)
    3114:	4a17      	ldr	r2, [pc, #92]	; (3174 <cdc_acm_class_handle_req+0x8c>)
    3116:	1a9b      	subs	r3, r3, r2
    3118:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Device data not found for interface %u",
    311a:	f04f 0200 	mov.w	r2, #0
    311e:	2102      	movs	r1, #2
    3120:	f361 0202 	bfi	r2, r1, #0, #3
    3124:	f36f 02c5 	bfc	r2, #3, #3
    3128:	f363 128f 	bfi	r2, r3, #6, #10
    312c:	88a1      	ldrh	r1, [r4, #4]
    312e:	4812      	ldr	r0, [pc, #72]	; (3178 <cdc_acm_class_handle_req+0x90>)
    3130:	f7fe fab8 	bl	16a4 <log_1>
		return -ENODEV;
    3134:	f06f 0012 	mvn.w	r0, #18
    3138:	e014      	b.n	3164 <cdc_acm_class_handle_req+0x7c>
		case SET_LINE_CODING:
			rate = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
			memcpy(&dev_data->line_coding, *data,
    313a:	2207      	movs	r2, #7
    313c:	6829      	ldr	r1, [r5, #0]
    313e:	380c      	subs	r0, #12
    3140:	f00a f930 	bl	d3a4 <memcpy>
#if defined(CONFIG_CDC_ACM_DTE_RATE_CALLBACK_SUPPORT)
			if (rate != new_rate && dev_data->rate_cb != NULL) {
				dev_data->rate_cb(common->dev, new_rate);
			}
#endif
			return 0;
    3144:	2000      	movs	r0, #0
    3146:	e00d      	b.n	3164 <cdc_acm_class_handle_req+0x7c>

		case SET_CONTROL_LINE_STATE:
			dev_data->line_state = (uint8_t)setup->wValue;
    3148:	78a2      	ldrb	r2, [r4, #2]
    314a:	f800 2c05 	strb.w	r2, [r0, #-5]
			LOG_DBG("CDC_SET_CONTROL_LINE_STATE 0x%x",
				dev_data->line_state);
			return 0;
    314e:	2000      	movs	r0, #0
    3150:	e008      	b.n	3164 <cdc_acm_class_handle_req+0x7c>

		default:
			break;
		}
	} else {
		if (setup->bRequest == GET_LINE_CODING) {
    3152:	7862      	ldrb	r2, [r4, #1]
    3154:	2a21      	cmp	r2, #33	; 0x21
    3156:	d106      	bne.n	3166 <cdc_acm_class_handle_req+0x7e>
			*data = (uint8_t *)(&dev_data->line_coding);
    3158:	f1a0 030c 	sub.w	r3, r0, #12
    315c:	602b      	str	r3, [r5, #0]
			*len = sizeof(dev_data->line_coding);
    315e:	2307      	movs	r3, #7
    3160:	6033      	str	r3, [r6, #0]
			LOG_DBG("CDC_GET_LINE_CODING %d %d %d %d",
				sys_le32_to_cpu(dev_data->line_coding.dwDTERate),
				dev_data->line_coding.bCharFormat,
				dev_data->line_coding.bParityType,
				dev_data->line_coding.bDataBits);
			return 0;
    3162:	2000      	movs	r0, #0
	}

	LOG_DBG("CDC ACM bmRequestType 0x%02x bRequest 0x%02x unsupported",
		setup->bmRequestType, setup->bRequest);
	return -ENOTSUP;
}
    3164:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOTSUP;
    3166:	f06f 0085 	mvn.w	r0, #133	; 0x85
    316a:	e7fb      	b.n	3164 <cdc_acm_class_handle_req+0x7c>
    316c:	20000f3c 	.word	0x20000f3c
    3170:	0000ec94 	.word	0x0000ec94
    3174:	0000ec4c 	.word	0x0000ec4c
    3178:	0000f1d4 	.word	0x0000f1d4

0000317c <cdc_acm_int_in>:
 * @param ep_status Endpoint status code.
 *
 * @return  N/A.
 */
static void cdc_acm_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
    317c:	b510      	push	{r4, lr}
    317e:	4604      	mov	r4, r0
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    3180:	4601      	mov	r1, r0
    3182:	480d      	ldr	r0, [pc, #52]	; (31b8 <cdc_acm_int_in+0x3c>)
    3184:	f009 feef 	bl	cf66 <usb_get_dev_data_by_ep>
	if (common == NULL) {
    3188:	b118      	cbz	r0, 3192 <cdc_acm_int_in+0x16>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
    318a:	2201      	movs	r2, #1
    318c:	f800 2c03 	strb.w	r2, [r0, #-3]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
    3190:	bd10      	pop	{r4, pc}
    3192:	4b0a      	ldr	r3, [pc, #40]	; (31bc <cdc_acm_int_in+0x40>)
    3194:	4a0a      	ldr	r2, [pc, #40]	; (31c0 <cdc_acm_int_in+0x44>)
    3196:	1a9b      	subs	r3, r3, r2
    3198:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Device data not found for endpoint %u", ep);
    319a:	f04f 0200 	mov.w	r2, #0
    319e:	2102      	movs	r1, #2
    31a0:	f361 0202 	bfi	r2, r1, #0, #3
    31a4:	f36f 02c5 	bfc	r2, #3, #3
    31a8:	f363 128f 	bfi	r2, r3, #6, #10
    31ac:	4621      	mov	r1, r4
    31ae:	4805      	ldr	r0, [pc, #20]	; (31c4 <cdc_acm_int_in+0x48>)
    31b0:	f7fe fa78 	bl	16a4 <log_1>
		return;
    31b4:	e7ec      	b.n	3190 <cdc_acm_int_in+0x14>
    31b6:	bf00      	nop
    31b8:	20000f3c 	.word	0x20000f3c
    31bc:	0000ec94 	.word	0x0000ec94
    31c0:	0000ec4c 	.word	0x0000ec4c
    31c4:	0000f1fc 	.word	0x0000f1fc

000031c8 <cdc_acm_irq_rx_enable>:
 * @param dev CDC ACM device struct.
 *
 * @return N/A
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
    31c8:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    31ca:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
    31cc:	2301      	movs	r3, #1
    31ce:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b

	if (dev_data->cb && dev_data->rx_ready) {
    31d2:	680b      	ldr	r3, [r1, #0]
    31d4:	b113      	cbz	r3, 31dc <cdc_acm_irq_rx_enable+0x14>
    31d6:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
    31da:	b903      	cbnz	r3, 31de <cdc_acm_irq_rx_enable+0x16>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
	}
}
    31dc:	bd08      	pop	{r3, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    31de:	3108      	adds	r1, #8
    31e0:	4801      	ldr	r0, [pc, #4]	; (31e8 <cdc_acm_irq_rx_enable+0x20>)
    31e2:	f00b f8b0 	bl	e346 <k_work_submit_to_queue>
}
    31e6:	e7f9      	b.n	31dc <cdc_acm_irq_rx_enable+0x14>
    31e8:	200004b8 	.word	0x200004b8

000031ec <cdc_acm_irq_tx_enable>:
{
    31ec:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    31ee:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
    31f0:	2301      	movs	r3, #1
    31f2:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
	if (dev_data->cb && dev_data->tx_ready) {
    31f6:	680b      	ldr	r3, [r1, #0]
    31f8:	b113      	cbz	r3, 3200 <cdc_acm_irq_tx_enable+0x14>
    31fa:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    31fe:	b903      	cbnz	r3, 3202 <cdc_acm_irq_tx_enable+0x16>
}
    3200:	bd08      	pop	{r3, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    3202:	3108      	adds	r1, #8
    3204:	4801      	ldr	r0, [pc, #4]	; (320c <cdc_acm_irq_tx_enable+0x20>)
    3206:	f00b f89e 	bl	e346 <k_work_submit_to_queue>
}
    320a:	e7f9      	b.n	3200 <cdc_acm_irq_tx_enable+0x14>
    320c:	200004b8 	.word	0x200004b8

00003210 <cdc_acm_reset_port>:
{
    3210:	b510      	push	{r4, lr}
    3212:	4603      	mov	r3, r0
	dev_data->configured = false;
    3214:	2400      	movs	r4, #0
    3216:	f880 407e 	strb.w	r4, [r0, #126]	; 0x7e
	dev_data->suspended = false;
    321a:	f880 407f 	strb.w	r4, [r0, #127]	; 0x7f
	dev_data->rx_ready = false;
    321e:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
	dev_data->tx_ready = false;
    3222:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
	dev_data->line_coding = (struct cdc_acm_line_coding)
    3226:	4a0a      	ldr	r2, [pc, #40]	; (3250 <cdc_acm_reset_port+0x40>)
    3228:	e892 0003 	ldmia.w	r2, {r0, r1}
    322c:	6758      	str	r0, [r3, #116]	; 0x74
    322e:	f8a3 1078 	strh.w	r1, [r3, #120]	; 0x78
    3232:	0c09      	lsrs	r1, r1, #16
    3234:	f883 107a 	strb.w	r1, [r3, #122]	; 0x7a
	dev_data->serial_state = 0;
    3238:	f883 407c 	strb.w	r4, [r3, #124]	; 0x7c
	dev_data->line_state = 0;
    323c:	f883 407b 	strb.w	r4, [r3, #123]	; 0x7b
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    3240:	2240      	movs	r2, #64	; 0x40
    3242:	4621      	mov	r1, r4
    3244:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    3248:	f00a f8d0 	bl	d3ec <memset>
}
    324c:	bd10      	pop	{r4, pc}
    324e:	bf00      	nop
    3250:	0000ed40 	.word	0x0000ed40

00003254 <cdc_acm_fifo_fill>:
{
    3254:	b570      	push	{r4, r5, r6, lr}
    3256:	4614      	mov	r4, r2
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    3258:	6906      	ldr	r6, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
    325a:	f896 307e 	ldrb.w	r3, [r6, #126]	; 0x7e
    325e:	b113      	cbz	r3, 3266 <cdc_acm_fifo_fill+0x12>
    3260:	f896 307f 	ldrb.w	r3, [r6, #127]	; 0x7f
    3264:	b193      	cbz	r3, 328c <cdc_acm_fifo_fill+0x38>
    3266:	4b1a      	ldr	r3, [pc, #104]	; (32d0 <cdc_acm_fifo_fill+0x7c>)
    3268:	4a1a      	ldr	r2, [pc, #104]	; (32d4 <cdc_acm_fifo_fill+0x80>)
    326a:	1a9b      	subs	r3, r3, r2
    326c:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Device not configured or suspended, drop %d bytes",
    326e:	f04f 0200 	mov.w	r2, #0
    3272:	2102      	movs	r1, #2
    3274:	f361 0202 	bfi	r2, r1, #0, #3
    3278:	f36f 02c5 	bfc	r2, #3, #3
    327c:	f363 128f 	bfi	r2, r3, #6, #10
    3280:	4621      	mov	r1, r4
    3282:	4815      	ldr	r0, [pc, #84]	; (32d8 <cdc_acm_fifo_fill+0x84>)
    3284:	f7fe fa0e 	bl	16a4 <log_1>
		return 0;
    3288:	2000      	movs	r0, #0
}
    328a:	bd70      	pop	{r4, r5, r6, pc}
	dev_data->tx_ready = false;
    328c:	2300      	movs	r3, #0
    328e:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    3292:	6f30      	ldr	r0, [r6, #112]	; 0x70
    3294:	f009 f9c6 	bl	c624 <ring_buf_put>
    3298:	4605      	mov	r5, r0
	if (wrote < len) {
    329a:	4284      	cmp	r4, r0
    329c:	d806      	bhi.n	32ac <cdc_acm_fifo_fill+0x58>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    329e:	f106 0118 	add.w	r1, r6, #24
    32a2:	480e      	ldr	r0, [pc, #56]	; (32dc <cdc_acm_fifo_fill+0x88>)
    32a4:	f00b f84f 	bl	e346 <k_work_submit_to_queue>
	return wrote;
    32a8:	4628      	mov	r0, r5
    32aa:	e7ee      	b.n	328a <cdc_acm_fifo_fill+0x36>
    32ac:	4b08      	ldr	r3, [pc, #32]	; (32d0 <cdc_acm_fifo_fill+0x7c>)
    32ae:	4a09      	ldr	r2, [pc, #36]	; (32d4 <cdc_acm_fifo_fill+0x80>)
    32b0:	1a9b      	subs	r3, r3, r2
    32b2:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Ring buffer full, drop %zd bytes", len - wrote);
    32b4:	f04f 0200 	mov.w	r2, #0
    32b8:	2102      	movs	r1, #2
    32ba:	f361 0202 	bfi	r2, r1, #0, #3
    32be:	f36f 02c5 	bfc	r2, #3, #3
    32c2:	f363 128f 	bfi	r2, r3, #6, #10
    32c6:	1a21      	subs	r1, r4, r0
    32c8:	4805      	ldr	r0, [pc, #20]	; (32e0 <cdc_acm_fifo_fill+0x8c>)
    32ca:	f7fe f9eb 	bl	16a4 <log_1>
    32ce:	e7e6      	b.n	329e <cdc_acm_fifo_fill+0x4a>
    32d0:	0000ec94 	.word	0x0000ec94
    32d4:	0000ec4c 	.word	0x0000ec4c
    32d8:	0000f224 	.word	0x0000f224
    32dc:	200004b8 	.word	0x200004b8
    32e0:	0000f258 	.word	0x0000f258

000032e4 <cdc_acm_read_cb>:
{
    32e4:	b570      	push	{r4, r5, r6, lr}
    32e6:	b082      	sub	sp, #8
    32e8:	4606      	mov	r6, r0
    32ea:	4614      	mov	r4, r2
	if (size <= 0) {
    32ec:	1e0d      	subs	r5, r1, #0
    32ee:	dd0f      	ble.n	3310 <cdc_acm_read_cb+0x2c>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    32f0:	462a      	mov	r2, r5
    32f2:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    32f6:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    32f8:	f009 f994 	bl	c624 <ring_buf_put>
	if (wrote < size) {
    32fc:	4285      	cmp	r5, r0
    32fe:	d813      	bhi.n	3328 <cdc_acm_read_cb+0x44>
	dev_data->rx_ready = true;
    3300:	2301      	movs	r3, #1
    3302:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	if (dev_data->cb && dev_data->rx_irq_ena) {
    3306:	6823      	ldr	r3, [r4, #0]
    3308:	b113      	cbz	r3, 3310 <cdc_acm_read_cb+0x2c>
    330a:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    330e:	b9eb      	cbnz	r3, 334c <cdc_acm_read_cb+0x68>
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
    3310:	9401      	str	r4, [sp, #4]
    3312:	4b11      	ldr	r3, [pc, #68]	; (3358 <cdc_acm_read_cb+0x74>)
    3314:	9300      	str	r3, [sp, #0]
    3316:	2301      	movs	r3, #1
    3318:	2240      	movs	r2, #64	; 0x40
    331a:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    331e:	4630      	mov	r0, r6
    3320:	f7ff fdda 	bl	2ed8 <usb_transfer>
}
    3324:	b002      	add	sp, #8
    3326:	bd70      	pop	{r4, r5, r6, pc}
    3328:	4b0c      	ldr	r3, [pc, #48]	; (335c <cdc_acm_read_cb+0x78>)
    332a:	4a0d      	ldr	r2, [pc, #52]	; (3360 <cdc_acm_read_cb+0x7c>)
    332c:	1a9b      	subs	r3, r3, r2
    332e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Ring buffer full, drop %zd bytes", size - wrote);
    3330:	f04f 0200 	mov.w	r2, #0
    3334:	2101      	movs	r1, #1
    3336:	f361 0202 	bfi	r2, r1, #0, #3
    333a:	f36f 02c5 	bfc	r2, #3, #3
    333e:	f363 128f 	bfi	r2, r3, #6, #10
    3342:	1a29      	subs	r1, r5, r0
    3344:	4807      	ldr	r0, [pc, #28]	; (3364 <cdc_acm_read_cb+0x80>)
    3346:	f7fe f9ad 	bl	16a4 <log_1>
    334a:	e7d9      	b.n	3300 <cdc_acm_read_cb+0x1c>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    334c:	f104 0108 	add.w	r1, r4, #8
    3350:	4805      	ldr	r0, [pc, #20]	; (3368 <cdc_acm_read_cb+0x84>)
    3352:	f00a fff8 	bl	e346 <k_work_submit_to_queue>
    3356:	e7db      	b.n	3310 <cdc_acm_read_cb+0x2c>
    3358:	000032e5 	.word	0x000032e5
    335c:	0000ec94 	.word	0x0000ec94
    3360:	0000ec4c 	.word	0x0000ec4c
    3364:	0000f258 	.word	0x0000f258
    3368:	200004b8 	.word	0x200004b8

0000336c <cdc_acm_do_cb>:
{
    336c:	b538      	push	{r3, r4, r5, lr}
    336e:	4604      	mov	r4, r0
	const struct device *dev = dev_data->common.dev;
    3370:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
	struct usb_cfg_data *cfg = (void *)dev->config;
    3374:	685d      	ldr	r5, [r3, #4]
	switch (status) {
    3376:	3901      	subs	r1, #1
    3378:	2905      	cmp	r1, #5
    337a:	d806      	bhi.n	338a <cdc_acm_do_cb+0x1e>
    337c:	e8df f001 	tbb	[pc, r1]
    3380:	37060503 	.word	0x37060503
    3384:	5f4b      	.short	0x5f4b
		cdc_acm_reset_port(dev_data);
    3386:	f7ff ff43 	bl	3210 <cdc_acm_reset_port>
}
    338a:	bd38      	pop	{r3, r4, r5, pc}
    338c:	4b45      	ldr	r3, [pc, #276]	; (34a4 <cdc_acm_do_cb+0x138>)
    338e:	4a46      	ldr	r2, [pc, #280]	; (34a8 <cdc_acm_do_cb+0x13c>)
    3390:	1a9b      	subs	r3, r3, r2
    3392:	08db      	lsrs	r3, r3, #3
		LOG_INF("Device configured");
    3394:	f04f 0100 	mov.w	r1, #0
    3398:	2203      	movs	r2, #3
    339a:	f362 0102 	bfi	r1, r2, #0, #3
    339e:	f36f 01c5 	bfc	r1, #3, #3
    33a2:	f363 118f 	bfi	r1, r3, #6, #10
    33a6:	4841      	ldr	r0, [pc, #260]	; (34ac <cdc_acm_do_cb+0x140>)
    33a8:	f7fe f9ee 	bl	1788 <log_0>
		if (!dev_data->configured) {
    33ac:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    33b0:	b19b      	cbz	r3, 33da <cdc_acm_do_cb+0x6e>
		if (!dev_data->tx_ready) {
    33b2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    33b6:	2b00      	cmp	r3, #0
    33b8:	d1e7      	bne.n	338a <cdc_acm_do_cb+0x1e>
			dev_data->tx_ready = true;
    33ba:	2301      	movs	r3, #1
    33bc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
    33c0:	6823      	ldr	r3, [r4, #0]
    33c2:	2b00      	cmp	r3, #0
    33c4:	d0e1      	beq.n	338a <cdc_acm_do_cb+0x1e>
    33c6:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    33ca:	2b00      	cmp	r3, #0
    33cc:	d0dd      	beq.n	338a <cdc_acm_do_cb+0x1e>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    33ce:	f104 0108 	add.w	r1, r4, #8
    33d2:	4837      	ldr	r0, [pc, #220]	; (34b0 <cdc_acm_do_cb+0x144>)
    33d4:	f00a ffb7 	bl	e346 <k_work_submit_to_queue>
    33d8:	e7d7      	b.n	338a <cdc_acm_do_cb+0x1e>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
    33da:	6a2b      	ldr	r3, [r5, #32]
    33dc:	4622      	mov	r2, r4
    33de:	2100      	movs	r1, #0
    33e0:	7b18      	ldrb	r0, [r3, #12]
    33e2:	f7ff ff7f 	bl	32e4 <cdc_acm_read_cb>
			dev_data->configured = true;
    33e6:	2301      	movs	r3, #1
    33e8:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
    33ec:	e7e1      	b.n	33b2 <cdc_acm_do_cb+0x46>
    33ee:	4b2d      	ldr	r3, [pc, #180]	; (34a4 <cdc_acm_do_cb+0x138>)
    33f0:	4a2d      	ldr	r2, [pc, #180]	; (34a8 <cdc_acm_do_cb+0x13c>)
    33f2:	1a9b      	subs	r3, r3, r2
    33f4:	08db      	lsrs	r3, r3, #3
		LOG_INF("Device disconnected");
    33f6:	f04f 0100 	mov.w	r1, #0
    33fa:	2203      	movs	r2, #3
    33fc:	f362 0102 	bfi	r1, r2, #0, #3
    3400:	f36f 01c5 	bfc	r1, #3, #3
    3404:	f363 118f 	bfi	r1, r3, #6, #10
    3408:	482a      	ldr	r0, [pc, #168]	; (34b4 <cdc_acm_do_cb+0x148>)
    340a:	f7fe f9bd 	bl	1788 <log_0>
		cdc_acm_reset_port(dev_data);
    340e:	4620      	mov	r0, r4
    3410:	f7ff fefe 	bl	3210 <cdc_acm_reset_port>
		break;
    3414:	e7b9      	b.n	338a <cdc_acm_do_cb+0x1e>
    3416:	4b23      	ldr	r3, [pc, #140]	; (34a4 <cdc_acm_do_cb+0x138>)
    3418:	4a23      	ldr	r2, [pc, #140]	; (34a8 <cdc_acm_do_cb+0x13c>)
    341a:	1a9b      	subs	r3, r3, r2
    341c:	08db      	lsrs	r3, r3, #3
		LOG_INF("Device suspended");
    341e:	f04f 0100 	mov.w	r1, #0
    3422:	2203      	movs	r2, #3
    3424:	f362 0102 	bfi	r1, r2, #0, #3
    3428:	f36f 01c5 	bfc	r1, #3, #3
    342c:	f363 118f 	bfi	r1, r3, #6, #10
    3430:	4821      	ldr	r0, [pc, #132]	; (34b8 <cdc_acm_do_cb+0x14c>)
    3432:	f7fe f9a9 	bl	1788 <log_0>
		dev_data->suspended = true;
    3436:	2301      	movs	r3, #1
    3438:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
		break;
    343c:	e7a5      	b.n	338a <cdc_acm_do_cb+0x1e>
    343e:	4b19      	ldr	r3, [pc, #100]	; (34a4 <cdc_acm_do_cb+0x138>)
    3440:	4a19      	ldr	r2, [pc, #100]	; (34a8 <cdc_acm_do_cb+0x13c>)
    3442:	1a9b      	subs	r3, r3, r2
    3444:	08db      	lsrs	r3, r3, #3
		LOG_INF("Device resumed");
    3446:	f04f 0100 	mov.w	r1, #0
    344a:	2203      	movs	r2, #3
    344c:	f362 0102 	bfi	r1, r2, #0, #3
    3450:	f36f 01c5 	bfc	r1, #3, #3
    3454:	f363 118f 	bfi	r1, r3, #6, #10
    3458:	4818      	ldr	r0, [pc, #96]	; (34bc <cdc_acm_do_cb+0x150>)
    345a:	f7fe f995 	bl	1788 <log_0>
		if (dev_data->suspended) {
    345e:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
    3462:	2b00      	cmp	r3, #0
    3464:	d091      	beq.n	338a <cdc_acm_do_cb+0x1e>
    3466:	4b0f      	ldr	r3, [pc, #60]	; (34a4 <cdc_acm_do_cb+0x138>)
    3468:	4a0f      	ldr	r2, [pc, #60]	; (34a8 <cdc_acm_do_cb+0x13c>)
    346a:	1a9b      	subs	r3, r3, r2
    346c:	08db      	lsrs	r3, r3, #3
			LOG_INF("from suspend");
    346e:	f04f 0100 	mov.w	r1, #0
    3472:	2203      	movs	r2, #3
    3474:	f362 0102 	bfi	r1, r2, #0, #3
    3478:	f36f 01c5 	bfc	r1, #3, #3
    347c:	f363 118f 	bfi	r1, r3, #6, #10
    3480:	480f      	ldr	r0, [pc, #60]	; (34c0 <cdc_acm_do_cb+0x154>)
    3482:	f7fe f981 	bl	1788 <log_0>
			dev_data->suspended = false;
    3486:	2300      	movs	r3, #0
    3488:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
			if (dev_data->configured) {
    348c:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    3490:	2b00      	cmp	r3, #0
    3492:	f43f af7a 	beq.w	338a <cdc_acm_do_cb+0x1e>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    3496:	6a2b      	ldr	r3, [r5, #32]
    3498:	4622      	mov	r2, r4
    349a:	2100      	movs	r1, #0
    349c:	7b18      	ldrb	r0, [r3, #12]
    349e:	f7ff ff21 	bl	32e4 <cdc_acm_read_cb>
}
    34a2:	e772      	b.n	338a <cdc_acm_do_cb+0x1e>
    34a4:	0000ec94 	.word	0x0000ec94
    34a8:	0000ec4c 	.word	0x0000ec4c
    34ac:	0000f27c 	.word	0x0000f27c
    34b0:	200004b8 	.word	0x200004b8
    34b4:	0000f290 	.word	0x0000f290
    34b8:	0000f2a4 	.word	0x0000f2a4
    34bc:	0000f2b8 	.word	0x0000f2b8
    34c0:	0000f2c8 	.word	0x0000f2c8

000034c4 <cdc_acm_dev_status_cb>:
{
    34c4:	b570      	push	{r4, r5, r6, lr}
    34c6:	4604      	mov	r4, r0
    34c8:	460d      	mov	r5, r1
    34ca:	4616      	mov	r6, r2
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
    34cc:	4601      	mov	r1, r0
    34ce:	480e      	ldr	r0, [pc, #56]	; (3508 <cdc_acm_dev_status_cb+0x44>)
    34d0:	f009 fd23 	bl	cf1a <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    34d4:	b128      	cbz	r0, 34e2 <cdc_acm_dev_status_cb+0x1e>
	cdc_acm_do_cb(dev_data, status, param);
    34d6:	4632      	mov	r2, r6
    34d8:	4629      	mov	r1, r5
    34da:	3880      	subs	r0, #128	; 0x80
    34dc:	f7ff ff46 	bl	336c <cdc_acm_do_cb>
}
    34e0:	bd70      	pop	{r4, r5, r6, pc}
    34e2:	4b0a      	ldr	r3, [pc, #40]	; (350c <cdc_acm_dev_status_cb+0x48>)
    34e4:	4a0a      	ldr	r2, [pc, #40]	; (3510 <cdc_acm_dev_status_cb+0x4c>)
    34e6:	1a9b      	subs	r3, r3, r2
    34e8:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Device data not found for cfg %p", cfg);
    34ea:	f04f 0200 	mov.w	r2, #0
    34ee:	2102      	movs	r1, #2
    34f0:	f361 0202 	bfi	r2, r1, #0, #3
    34f4:	f36f 02c5 	bfc	r2, #3, #3
    34f8:	f363 128f 	bfi	r2, r3, #6, #10
    34fc:	4621      	mov	r1, r4
    34fe:	4805      	ldr	r0, [pc, #20]	; (3514 <cdc_acm_dev_status_cb+0x50>)
    3500:	f7fe f8d0 	bl	16a4 <log_1>
		return;
    3504:	e7ec      	b.n	34e0 <cdc_acm_dev_status_cb+0x1c>
    3506:	bf00      	nop
    3508:	20000f3c 	.word	0x20000f3c
    350c:	0000ec94 	.word	0x0000ec94
    3510:	0000ec4c 	.word	0x0000ec4c
    3514:	0000f2d8 	.word	0x0000f2d8

00003518 <cdc_acm_send_notification>:
 *
 * @return  N/A.
 */
static int cdc_acm_send_notification(const struct device *dev,
				     uint16_t serial_state)
{
    3518:	b530      	push	{r4, r5, lr}
    351a:	b085      	sub	sp, #20
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    351c:	6905      	ldr	r5, [r0, #16]
	struct usb_cfg_data * const cfg = (void *)dev->config;
    351e:	6843      	ldr	r3, [r0, #4]
	struct cdc_acm_notification notification;
	uint32_t cnt = 0U;

	notification.bmRequestType = 0xA1;
    3520:	22a1      	movs	r2, #161	; 0xa1
    3522:	f88d 2004 	strb.w	r2, [sp, #4]
	notification.bNotificationType = 0x20;
    3526:	2220      	movs	r2, #32
    3528:	f88d 2005 	strb.w	r2, [sp, #5]
	notification.wValue = 0U;
    352c:	2400      	movs	r4, #0
    352e:	f8ad 4006 	strh.w	r4, [sp, #6]
	notification.wIndex = 0U;
    3532:	f8ad 4008 	strh.w	r4, [sp, #8]
	notification.wLength = sys_cpu_to_le16(sizeof(serial_state));
    3536:	2202      	movs	r2, #2
    3538:	f8ad 200a 	strh.w	r2, [sp, #10]
	notification.data = sys_cpu_to_le16(serial_state);
    353c:	f8ad 100c 	strh.w	r1, [sp, #12]

	dev_data->notification_sent = 0U;
    3540:	f885 407d 	strb.w	r4, [r5, #125]	; 0x7d

	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    3544:	6a18      	ldr	r0, [r3, #32]
    3546:	4623      	mov	r3, r4
    3548:	220a      	movs	r2, #10
    354a:	a901      	add	r1, sp, #4
    354c:	7900      	ldrb	r0, [r0, #4]
    354e:	f009 fc4d 	bl	cdec <usb_write>
		  (const uint8_t *)&notification, sizeof(notification), NULL);

	/* Wait for notification to be sent */
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    3552:	f895 307d 	ldrb.w	r3, [r5, #125]	; 0x7d
    3556:	b94b      	cbnz	r3, 356c <cdc_acm_send_notification+0x54>
	z_impl_k_busy_wait(usec_to_wait);
    3558:	2001      	movs	r0, #1
    355a:	f00b f93b 	bl	e7d4 <z_impl_k_busy_wait>
		k_busy_wait(1);

		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
    355e:	3401      	adds	r4, #1
    3560:	4b04      	ldr	r3, [pc, #16]	; (3574 <cdc_acm_send_notification+0x5c>)
    3562:	429c      	cmp	r4, r3
    3564:	d9f5      	bls.n	3552 <cdc_acm_send_notification+0x3a>
			LOG_DBG("CDC ACM notification timeout!");
			return -EIO;
    3566:	f06f 0004 	mvn.w	r0, #4
    356a:	e000      	b.n	356e <cdc_acm_send_notification+0x56>
		}
	}

	return 0;
    356c:	2000      	movs	r0, #0
}
    356e:	b005      	add	sp, #20
    3570:	bd30      	pop	{r4, r5, pc}
    3572:	bf00      	nop
    3574:	000186a0 	.word	0x000186a0

00003578 <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
    3578:	b510      	push	{r4, lr}
    357a:	b082      	sub	sp, #8
    357c:	f88d 1007 	strb.w	r1, [sp, #7]
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    3580:	6904      	ldr	r4, [r0, #16]

	if (!dev_data->configured || dev_data->suspended) {
    3582:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    3586:	b113      	cbz	r3, 358e <cdc_acm_poll_out+0x16>
    3588:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
    358c:	b18b      	cbz	r3, 35b2 <cdc_acm_poll_out+0x3a>
    358e:	4b28      	ldr	r3, [pc, #160]	; (3630 <cdc_acm_poll_out+0xb8>)
    3590:	4a28      	ldr	r2, [pc, #160]	; (3634 <cdc_acm_poll_out+0xbc>)
    3592:	1a9b      	subs	r3, r3, r2
    3594:	08db      	lsrs	r3, r3, #3
		LOG_INF("USB device not ready, drop data");
    3596:	f04f 0100 	mov.w	r1, #0
    359a:	2203      	movs	r2, #3
    359c:	f362 0102 	bfi	r1, r2, #0, #3
    35a0:	f36f 01c5 	bfc	r1, #3, #3
    35a4:	f363 118f 	bfi	r1, r3, #6, #10
    35a8:	4823      	ldr	r0, [pc, #140]	; (3638 <cdc_acm_poll_out+0xc0>)
    35aa:	f7fe f8ed 	bl	1788 <log_0>
			return;
		}
	}

	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
}
    35ae:	b002      	add	sp, #8
    35b0:	bd10      	pop	{r4, pc}
	dev_data->tx_ready = false;
    35b2:	2300      	movs	r3, #0
    35b4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    35b8:	2201      	movs	r2, #1
    35ba:	f10d 0107 	add.w	r1, sp, #7
    35be:	6f20      	ldr	r0, [r4, #112]	; 0x70
    35c0:	f009 f830 	bl	c624 <ring_buf_put>
    35c4:	b9e0      	cbnz	r0, 3600 <cdc_acm_poll_out+0x88>
    35c6:	4b1a      	ldr	r3, [pc, #104]	; (3630 <cdc_acm_poll_out+0xb8>)
    35c8:	4a1a      	ldr	r2, [pc, #104]	; (3634 <cdc_acm_poll_out+0xbc>)
    35ca:	1a9b      	subs	r3, r3, r2
    35cc:	08db      	lsrs	r3, r3, #3
		LOG_INF("Ring buffer full, drain buffer");
    35ce:	f04f 0100 	mov.w	r1, #0
    35d2:	2203      	movs	r2, #3
    35d4:	f362 0102 	bfi	r1, r2, #0, #3
    35d8:	f36f 01c5 	bfc	r1, #3, #3
    35dc:	f363 118f 	bfi	r1, r3, #6, #10
    35e0:	4816      	ldr	r0, [pc, #88]	; (363c <cdc_acm_poll_out+0xc4>)
    35e2:	f7fe f8d1 	bl	1788 <log_0>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    35e6:	2201      	movs	r2, #1
    35e8:	2100      	movs	r1, #0
    35ea:	6f20      	ldr	r0, [r4, #112]	; 0x70
    35ec:	f009 f884 	bl	c6f8 <ring_buf_get>
    35f0:	b160      	cbz	r0, 360c <cdc_acm_poll_out+0x94>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    35f2:	2201      	movs	r2, #1
    35f4:	f10d 0107 	add.w	r1, sp, #7
    35f8:	6f20      	ldr	r0, [r4, #112]	; 0x70
    35fa:	f009 f813 	bl	c624 <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    35fe:	b128      	cbz	r0, 360c <cdc_acm_poll_out+0x94>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    3600:	f104 0118 	add.w	r1, r4, #24
    3604:	480e      	ldr	r0, [pc, #56]	; (3640 <cdc_acm_poll_out+0xc8>)
    3606:	f00a fe9e 	bl	e346 <k_work_submit_to_queue>
    360a:	e7d0      	b.n	35ae <cdc_acm_poll_out+0x36>
    360c:	4b08      	ldr	r3, [pc, #32]	; (3630 <cdc_acm_poll_out+0xb8>)
    360e:	4a09      	ldr	r2, [pc, #36]	; (3634 <cdc_acm_poll_out+0xbc>)
    3610:	1a9b      	subs	r3, r3, r2
    3612:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Failed to drain buffer");
    3614:	f04f 0100 	mov.w	r1, #0
    3618:	2201      	movs	r2, #1
    361a:	f362 0102 	bfi	r1, r2, #0, #3
    361e:	f36f 01c5 	bfc	r1, #3, #3
    3622:	f363 118f 	bfi	r1, r3, #6, #10
    3626:	4807      	ldr	r0, [pc, #28]	; (3644 <cdc_acm_poll_out+0xcc>)
    3628:	f7fe f8ae 	bl	1788 <log_0>
			return;
    362c:	e7bf      	b.n	35ae <cdc_acm_poll_out+0x36>
    362e:	bf00      	nop
    3630:	0000ec94 	.word	0x0000ec94
    3634:	0000ec4c 	.word	0x0000ec4c
    3638:	0000f2fc 	.word	0x0000f2fc
    363c:	0000f31c 	.word	0x0000f31c
    3640:	200004b8 	.word	0x200004b8
    3644:	0000f33c 	.word	0x0000f33c

00003648 <cdc_acm_write_cb>:
{
    3648:	b510      	push	{r4, lr}
    364a:	4614      	mov	r4, r2
	dev_data->tx_ready = true;
    364c:	2301      	movs	r3, #1
    364e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	if (dev_data->cb && dev_data->tx_irq_ena) {
    3652:	6813      	ldr	r3, [r2, #0]
    3654:	b113      	cbz	r3, 365c <cdc_acm_write_cb+0x14>
    3656:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
    365a:	b923      	cbnz	r3, 3666 <cdc_acm_write_cb+0x1e>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
    365c:	6f20      	ldr	r0, [r4, #112]	; 0x70
    365e:	f008 ff7d 	bl	c55c <ring_buf_is_empty>
    3662:	b130      	cbz	r0, 3672 <cdc_acm_write_cb+0x2a>
}
    3664:	bd10      	pop	{r4, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    3666:	f102 0108 	add.w	r1, r2, #8
    366a:	4805      	ldr	r0, [pc, #20]	; (3680 <cdc_acm_write_cb+0x38>)
    366c:	f00a fe6b 	bl	e346 <k_work_submit_to_queue>
    3670:	e7f4      	b.n	365c <cdc_acm_write_cb+0x14>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    3672:	f104 0118 	add.w	r1, r4, #24
    3676:	4802      	ldr	r0, [pc, #8]	; (3680 <cdc_acm_write_cb+0x38>)
    3678:	f00a fe65 	bl	e346 <k_work_submit_to_queue>
    367c:	e7f2      	b.n	3664 <cdc_acm_write_cb+0x1c>
    367e:	bf00      	nop
    3680:	200004b8 	.word	0x200004b8

00003684 <cdc_acm_init>:
{
    3684:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    3686:	6904      	ldr	r4, [r0, #16]
	dev_data->common.dev = dev;
    3688:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
    368c:	f104 0384 	add.w	r3, r4, #132	; 0x84
	parent->next = child;
    3690:	2200      	movs	r2, #0
    3692:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    3696:	4a0b      	ldr	r2, [pc, #44]	; (36c4 <cdc_acm_init+0x40>)
    3698:	6852      	ldr	r2, [r2, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    369a:	b172      	cbz	r2, 36ba <cdc_acm_init+0x36>
	parent->next = child;
    369c:	6013      	str	r3, [r2, #0]
	list->tail = node;
    369e:	4a09      	ldr	r2, [pc, #36]	; (36c4 <cdc_acm_init+0x40>)
    36a0:	6053      	str	r3, [r2, #4]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
    36a2:	4909      	ldr	r1, [pc, #36]	; (36c8 <cdc_acm_init+0x44>)
    36a4:	f104 0008 	add.w	r0, r4, #8
    36a8:	f00a fe47 	bl	e33a <k_work_init>
	k_work_init(&dev_data->tx_work, tx_work_handler);
    36ac:	4907      	ldr	r1, [pc, #28]	; (36cc <cdc_acm_init+0x48>)
    36ae:	f104 0018 	add.w	r0, r4, #24
    36b2:	f00a fe42 	bl	e33a <k_work_init>
}
    36b6:	2000      	movs	r0, #0
    36b8:	bd10      	pop	{r4, pc}
    36ba:	4a02      	ldr	r2, [pc, #8]	; (36c4 <cdc_acm_init+0x40>)
    36bc:	6053      	str	r3, [r2, #4]
	list->head = node;
    36be:	6013      	str	r3, [r2, #0]
}
    36c0:	e7ef      	b.n	36a2 <cdc_acm_init+0x1e>
    36c2:	bf00      	nop
    36c4:	20000f3c 	.word	0x20000f3c
    36c8:	0000cfd7 	.word	0x0000cfd7
    36cc:	000036d1 	.word	0x000036d1

000036d0 <tx_work_handler>:
{
    36d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    36d2:	b085      	sub	sp, #20
    36d4:	4604      	mov	r4, r0
	struct cdc_acm_dev_data_t *dev_data =
    36d6:	f1a0 0718 	sub.w	r7, r0, #24
	const struct device *dev = dev_data->common.dev;
    36da:	6e83      	ldr	r3, [r0, #104]	; 0x68
	struct usb_cfg_data *cfg = (void *)dev->config;
    36dc:	685b      	ldr	r3, [r3, #4]
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    36de:	6a1b      	ldr	r3, [r3, #32]
    36e0:	7d1d      	ldrb	r5, [r3, #20]
	if (usb_transfer_is_busy(ep)) {
    36e2:	4628      	mov	r0, r5
    36e4:	f009 fc5f 	bl	cfa6 <usb_transfer_is_busy>
    36e8:	b108      	cbz	r0, 36ee <tx_work_handler+0x1e>
}
    36ea:	b005      	add	sp, #20
    36ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
    36ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
    36f2:	a903      	add	r1, sp, #12
    36f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
    36f6:	f008 ffb5 	bl	c664 <ring_buf_get_claim>
	if (!len) {
    36fa:	4606      	mov	r6, r0
    36fc:	2800      	cmp	r0, #0
    36fe:	d0f4      	beq.n	36ea <tx_work_handler+0x1a>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
    3700:	f010 0f3f 	tst.w	r0, #63	; 0x3f
    3704:	d100      	bne.n	3708 <tx_work_handler+0x38>
		len -= 1;
    3706:	1e46      	subs	r6, r0, #1
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    3708:	9701      	str	r7, [sp, #4]
    370a:	4b06      	ldr	r3, [pc, #24]	; (3724 <tx_work_handler+0x54>)
    370c:	9300      	str	r3, [sp, #0]
    370e:	2302      	movs	r3, #2
    3710:	4632      	mov	r2, r6
    3712:	9903      	ldr	r1, [sp, #12]
    3714:	4628      	mov	r0, r5
    3716:	f7ff fbdf 	bl	2ed8 <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
    371a:	4631      	mov	r1, r6
    371c:	6da0      	ldr	r0, [r4, #88]	; 0x58
    371e:	f008 ffcd 	bl	c6bc <ring_buf_get_finish>
    3722:	e7e2      	b.n	36ea <tx_work_handler+0x1a>
    3724:	00003649 	.word	0x00003649

00003728 <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(const struct device *dev)
{
    3728:	b530      	push	{r4, r5, lr}
    372a:	b083      	sub	sp, #12
	ARG_UNUSED(dev);

	k_work_queue_start(&z_usb_work_q,
    372c:	4d08      	ldr	r5, [pc, #32]	; (3750 <z_usb_work_q_init+0x28>)
    372e:	2400      	movs	r4, #0
    3730:	9400      	str	r4, [sp, #0]
    3732:	f04f 33ff 	mov.w	r3, #4294967295
    3736:	f44f 6280 	mov.w	r2, #1024	; 0x400
    373a:	4906      	ldr	r1, [pc, #24]	; (3754 <z_usb_work_q_init+0x2c>)
    373c:	4628      	mov	r0, r5
    373e:	f007 f99f 	bl	aa80 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    3742:	4905      	ldr	r1, [pc, #20]	; (3758 <z_usb_work_q_init+0x30>)
    3744:	4628      	mov	r0, r5
    3746:	f006 fe35 	bl	a3b4 <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
    374a:	4620      	mov	r0, r4
    374c:	b003      	add	sp, #12
    374e:	bd30      	pop	{r4, r5, pc}
    3750:	200004b8 	.word	0x200004b8
    3754:	20002a20 	.word	0x20002a20
    3758:	0000f3c0 	.word	0x0000f3c0

0000375c <pm_system_resume>:
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}

void pm_system_resume(void)
{
    375c:	b570      	push	{r4, r5, r6, lr}
    375e:	b084      	sub	sp, #16
	uint8_t id = _current_cpu->id;
    3760:	4b2c      	ldr	r3, [pc, #176]	; (3814 <pm_system_resume+0xb8>)
    3762:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    3764:	f004 031f 	and.w	r3, r4, #31
    3768:	2201      	movs	r2, #1
    376a:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    376c:	0961      	lsrs	r1, r4, #5
    376e:	4b2a      	ldr	r3, [pc, #168]	; (3818 <pm_system_resume+0xbc>)
    3770:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3774:	43d0      	mvns	r0, r2
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3776:	f3bf 8f5b 	dmb	ish
    377a:	e853 1f00 	ldrex	r1, [r3]
    377e:	ea01 0500 	and.w	r5, r1, r0
    3782:	e843 5600 	strex	r6, r5, [r3]
    3786:	2e00      	cmp	r6, #0
    3788:	d1f7      	bne.n	377a <pm_system_resume+0x1e>
    378a:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    378e:	420a      	tst	r2, r1
    3790:	d03d      	beq.n	380e <pm_system_resume+0xb2>
		exit_pos_ops(z_power_states[id]);
    3792:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    3796:	009a      	lsls	r2, r3, #2
    3798:	4b20      	ldr	r3, [pc, #128]	; (381c <pm_system_resume+0xc0>)
    379a:	4413      	add	r3, r2
    379c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    37a0:	ab04      	add	r3, sp, #16
    37a2:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    37a6:	4b1e      	ldr	r3, [pc, #120]	; (3820 <pm_system_resume+0xc4>)
    37a8:	b163      	cbz	r3, 37c4 <pm_system_resume+0x68>
		pm_power_state_exit_post_ops(info);
    37aa:	f009 fe52 	bl	d452 <pm_power_state_exit_post_ops>
    37ae:	f04f 0320 	mov.w	r3, #32
    37b2:	f3ef 8611 	mrs	r6, BASEPRI
    37b6:	f383 8812 	msr	BASEPRI_MAX, r3
    37ba:	f3bf 8f6f 	isb	sy
	return list->head;
    37be:	4b19      	ldr	r3, [pc, #100]	; (3824 <pm_system_resume+0xc8>)
    37c0:	681d      	ldr	r5, [r3, #0]
    37c2:	e00a      	b.n	37da <pm_system_resume+0x7e>
	__asm__ volatile(
    37c4:	2300      	movs	r3, #0
    37c6:	f383 8811 	msr	BASEPRI, r3
    37ca:	f3bf 8f6f 	isb	sy
}
    37ce:	e7ee      	b.n	37ae <pm_system_resume+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    37d0:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    37d2:	b10d      	cbz	r5, 37d8 <pm_system_resume+0x7c>
	return node->next;
    37d4:	682b      	ldr	r3, [r5, #0]
    37d6:	b16b      	cbz	r3, 37f4 <pm_system_resume+0x98>
{
    37d8:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    37da:	b15d      	cbz	r5, 37f4 <pm_system_resume+0x98>
			callback = notifier->state_exit;
    37dc:	68aa      	ldr	r2, [r5, #8]
		if (callback) {
    37de:	2a00      	cmp	r2, #0
    37e0:	d0f6      	beq.n	37d0 <pm_system_resume+0x74>
			callback(z_power_states[_current_cpu->id].state);
    37e2:	4b0c      	ldr	r3, [pc, #48]	; (3814 <pm_system_resume+0xb8>)
    37e4:	7d1b      	ldrb	r3, [r3, #20]
    37e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    37ea:	0099      	lsls	r1, r3, #2
    37ec:	4b0b      	ldr	r3, [pc, #44]	; (381c <pm_system_resume+0xc0>)
    37ee:	5c58      	ldrb	r0, [r3, r1]
    37f0:	4790      	blx	r2
    37f2:	e7ed      	b.n	37d0 <pm_system_resume+0x74>
	__asm__ volatile(
    37f4:	f386 8811 	msr	BASEPRI, r6
    37f8:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    37fc:	4807      	ldr	r0, [pc, #28]	; (381c <pm_system_resume+0xc0>)
    37fe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    3802:	00a2      	lsls	r2, r4, #2
    3804:	1881      	adds	r1, r0, r2
    3806:	2300      	movs	r3, #0
    3808:	5083      	str	r3, [r0, r2]
    380a:	604b      	str	r3, [r1, #4]
    380c:	608b      	str	r3, [r1, #8]
			0, 0};
	}
}
    380e:	b004      	add	sp, #16
    3810:	bd70      	pop	{r4, r5, r6, pc}
    3812:	bf00      	nop
    3814:	200024d8 	.word	0x200024d8
    3818:	20000f4c 	.word	0x20000f4c
    381c:	20000f50 	.word	0x20000f50
    3820:	0000d453 	.word	0x0000d453
    3824:	20000f44 	.word	0x20000f44

00003828 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    3828:	b5f0      	push	{r4, r5, r6, r7, lr}
    382a:	b089      	sub	sp, #36	; 0x24
    382c:	4605      	mov	r5, r0
	bool ret = true;
	uint8_t id = _current_cpu->id;
    382e:	4b55      	ldr	r3, [pc, #340]	; (3984 <pm_system_suspend+0x15c>)
    3830:	7d1c      	ldrb	r4, [r3, #20]
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    3832:	f004 031f 	and.w	r3, r4, #31
    3836:	2201      	movs	r2, #1
    3838:	409a      	lsls	r2, r3
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    383a:	0961      	lsrs	r1, r4, #5
    383c:	4b52      	ldr	r3, [pc, #328]	; (3988 <pm_system_suspend+0x160>)
    383e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3842:	f3bf 8f5b 	dmb	ish
    3846:	e853 1f00 	ldrex	r1, [r3]
    384a:	ea41 0002 	orr.w	r0, r1, r2
    384e:	e843 0600 	strex	r6, r0, [r3]
    3852:	2e00      	cmp	r6, #0
    3854:	d1f7      	bne.n	3846 <pm_system_suspend+0x1e>
    3856:	f3bf 8f5b 	dmb	ish

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    385a:	420a      	tst	r2, r1
    385c:	d017      	beq.n	388e <pm_system_suspend+0x66>
		z_power_states[id] = pm_policy_next_state(id, ticks);
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    385e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    3862:	4a4a      	ldr	r2, [pc, #296]	; (398c <pm_system_suspend+0x164>)
    3864:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
    3868:	2b00      	cmp	r3, #0
    386a:	f000 8088 	beq.w	397e <pm_system_suspend+0x156>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    386e:	f1b5 3fff 	cmp.w	r5, #4294967295
    3872:	d11c      	bne.n	38ae <pm_system_suspend+0x86>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    3874:	f007 f9c0 	bl	abf8 <k_sched_lock>
	__asm__ volatile(
    3878:	f04f 0320 	mov.w	r3, #32
    387c:	f3ef 8611 	mrs	r6, BASEPRI
    3880:	f383 8812 	msr	BASEPRI_MAX, r3
    3884:	f3bf 8f6f 	isb	sy
	return list->head;
    3888:	4b41      	ldr	r3, [pc, #260]	; (3990 <pm_system_suspend+0x168>)
    388a:	681d      	ldr	r5, [r3, #0]
    388c:	e02a      	b.n	38e4 <pm_system_suspend+0xbc>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    388e:	eb04 0644 	add.w	r6, r4, r4, lsl #1
    3892:	4b3e      	ldr	r3, [pc, #248]	; (398c <pm_system_suspend+0x164>)
    3894:	eb03 0686 	add.w	r6, r3, r6, lsl #2
    3898:	466f      	mov	r7, sp
    389a:	462a      	mov	r2, r5
    389c:	4621      	mov	r1, r4
    389e:	4638      	mov	r0, r7
    38a0:	f009 fcc5 	bl	d22e <pm_policy_next_state>
    38a4:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
    38a8:	e886 0007 	stmia.w	r6, {r0, r1, r2}
    38ac:	e7d7      	b.n	385e <pm_system_suspend+0x36>
		     k_us_to_ticks_ceil32(
    38ae:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    38b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    38b6:	689b      	ldr	r3, [r3, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    38b8:	0c59      	lsrs	r1, r3, #17
    38ba:	03d8      	lsls	r0, r3, #15
    38bc:	4e35      	ldr	r6, [pc, #212]	; (3994 <pm_system_suspend+0x16c>)
    38be:	4a36      	ldr	r2, [pc, #216]	; (3998 <pm_system_suspend+0x170>)
    38c0:	2300      	movs	r3, #0
    38c2:	1980      	adds	r0, r0, r6
    38c4:	f04f 0600 	mov.w	r6, #0
    38c8:	eb46 0101 	adc.w	r1, r6, r1
    38cc:	f7fc fc18 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    38d0:	2101      	movs	r1, #1
    38d2:	1a28      	subs	r0, r5, r0
    38d4:	f00a ff4f 	bl	e776 <z_set_timeout_expiry>
    38d8:	e7cc      	b.n	3874 <pm_system_suspend+0x4c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    38da:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    38dc:	b10d      	cbz	r5, 38e2 <pm_system_suspend+0xba>
	return node->next;
    38de:	682b      	ldr	r3, [r5, #0]
    38e0:	b16b      	cbz	r3, 38fe <pm_system_suspend+0xd6>
{
    38e2:	461d      	mov	r5, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    38e4:	b15d      	cbz	r5, 38fe <pm_system_suspend+0xd6>
			callback = notifier->state_entry;
    38e6:	686a      	ldr	r2, [r5, #4]
		if (callback) {
    38e8:	2a00      	cmp	r2, #0
    38ea:	d0f6      	beq.n	38da <pm_system_suspend+0xb2>
			callback(z_power_states[_current_cpu->id].state);
    38ec:	4b25      	ldr	r3, [pc, #148]	; (3984 <pm_system_suspend+0x15c>)
    38ee:	7d1b      	ldrb	r3, [r3, #20]
    38f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    38f4:	4925      	ldr	r1, [pc, #148]	; (398c <pm_system_suspend+0x164>)
    38f6:	f811 0023 	ldrb.w	r0, [r1, r3, lsl #2]
    38fa:	4790      	blx	r2
    38fc:	e7ed      	b.n	38da <pm_system_suspend+0xb2>
	__asm__ volatile(
    38fe:	f386 8811 	msr	BASEPRI, r6
    3902:	f3bf 8f6f 	isb	sy
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    3906:	f004 031f 	and.w	r3, r4, #31
    390a:	2101      	movs	r1, #1
    390c:	4099      	lsls	r1, r3

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    390e:	0963      	lsrs	r3, r4, #5
    3910:	4a22      	ldr	r2, [pc, #136]	; (399c <pm_system_suspend+0x174>)
    3912:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3916:	f3bf 8f5b 	dmb	ish
    391a:	e853 2f00 	ldrex	r2, [r3]
    391e:	430a      	orrs	r2, r1
    3920:	e843 2000 	strex	r0, r2, [r3]
    3924:	2800      	cmp	r0, #0
    3926:	d1f8      	bne.n	391a <pm_system_suspend+0xf2>
    3928:	f3bf 8f5b 	dmb	ish
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    392c:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    3930:	4a16      	ldr	r2, [pc, #88]	; (398c <pm_system_suspend+0x164>)
    3932:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    3936:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    393a:	ab08      	add	r3, sp, #32
    393c:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    3940:	4b17      	ldr	r3, [pc, #92]	; (39a0 <pm_system_suspend+0x178>)
    3942:	b10b      	cbz	r3, 3948 <pm_system_suspend+0x120>
		pm_power_state_set(info);
    3944:	f009 fd72 	bl	d42c <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    3948:	f7ff ff08 	bl	375c <pm_system_resume>
	k_sched_unlock();
    394c:	f007 fb52 	bl	aff4 <k_sched_unlock>
	bool ret = true;
    3950:	2001      	movs	r0, #1
	atomic_val_t mask = ATOMIC_MASK(bit);
    3952:	f004 021f 	and.w	r2, r4, #31
    3956:	2301      	movs	r3, #1
    3958:	4093      	lsls	r3, r2
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    395a:	0964      	lsrs	r4, r4, #5
    395c:	4a0a      	ldr	r2, [pc, #40]	; (3988 <pm_system_suspend+0x160>)
    395e:	eb02 0484 	add.w	r4, r2, r4, lsl #2
    3962:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3964:	f3bf 8f5b 	dmb	ish
    3968:	e854 2f00 	ldrex	r2, [r4]
    396c:	401a      	ands	r2, r3
    396e:	e844 2100 	strex	r1, r2, [r4]
    3972:	2900      	cmp	r1, #0
    3974:	d1f8      	bne.n	3968 <pm_system_suspend+0x140>
    3976:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    397a:	b009      	add	sp, #36	; 0x24
    397c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		ret = false;
    397e:	2000      	movs	r0, #0
    3980:	e7e7      	b.n	3952 <pm_system_suspend+0x12a>
    3982:	bf00      	nop
    3984:	200024d8 	.word	0x200024d8
    3988:	20000f5c 	.word	0x20000f5c
    398c:	20000f50 	.word	0x20000f50
    3990:	20000f44 	.word	0x20000f44
    3994:	000f423f 	.word	0x000f423f
    3998:	000f4240 	.word	0x000f4240
    399c:	20000f4c 	.word	0x20000f4c
    39a0:	0000d42d 	.word	0x0000d42d

000039a4 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    39a4:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    39a6:	4802      	ldr	r0, [pc, #8]	; (39b0 <nrf_cc3xx_platform_abort_init+0xc>)
    39a8:	f007 ff98 	bl	b8dc <nrf_cc3xx_platform_set_abort>
}
    39ac:	bd08      	pop	{r3, pc}
    39ae:	bf00      	nop
    39b0:	0000f3d0 	.word	0x0000f3d0

000039b4 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    39b4:	b1d0      	cbz	r0, 39ec <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    39b6:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    39b8:	6842      	ldr	r2, [r0, #4]
    39ba:	2a04      	cmp	r2, #4
    39bc:	d005      	beq.n	39ca <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    39be:	b1d2      	cbz	r2, 39f6 <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    39c0:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    39c2:	f006 fe6f 	bl	a6a4 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    39c6:	2000      	movs	r0, #0
    }
}
    39c8:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    39ca:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    39cc:	2200      	movs	r2, #0
    39ce:	f3bf 8f5b 	dmb	ish
    39d2:	e853 1f00 	ldrex	r1, [r3]
    39d6:	2901      	cmp	r1, #1
    39d8:	d103      	bne.n	39e2 <mutex_unlock_platform+0x2e>
    39da:	e843 2000 	strex	r0, r2, [r3]
    39de:	2800      	cmp	r0, #0
    39e0:	d1f7      	bne.n	39d2 <mutex_unlock_platform+0x1e>
    39e2:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    39e6:	d104      	bne.n	39f2 <mutex_unlock_platform+0x3e>
    39e8:	4610      	mov	r0, r2
    39ea:	e7ed      	b.n	39c8 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    39ec:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    39f0:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    39f2:	4802      	ldr	r0, [pc, #8]	; (39fc <mutex_unlock_platform+0x48>)
    39f4:	e7e8      	b.n	39c8 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    39f6:	4802      	ldr	r0, [pc, #8]	; (3a00 <mutex_unlock_platform+0x4c>)
    39f8:	e7e6      	b.n	39c8 <mutex_unlock_platform+0x14>
    39fa:	bf00      	nop
    39fc:	ffff8fe9 	.word	0xffff8fe9
    3a00:	ffff8fea 	.word	0xffff8fea

00003a04 <mutex_lock_platform>:
    if(mutex == NULL) {
    3a04:	b320      	cbz	r0, 3a50 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3a06:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    3a08:	6842      	ldr	r2, [r0, #4]
    3a0a:	2a04      	cmp	r2, #4
    3a0c:	d002      	beq.n	3a14 <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3a0e:	b992      	cbnz	r2, 3a36 <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3a10:	4811      	ldr	r0, [pc, #68]	; (3a58 <mutex_lock_platform+0x54>)
    3a12:	e00f      	b.n	3a34 <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    3a14:	6803      	ldr	r3, [r0, #0]
    3a16:	2201      	movs	r2, #1
    3a18:	f3bf 8f5b 	dmb	ish
    3a1c:	e853 1f00 	ldrex	r1, [r3]
    3a20:	2900      	cmp	r1, #0
    3a22:	d103      	bne.n	3a2c <mutex_lock_platform+0x28>
    3a24:	e843 2000 	strex	r0, r2, [r3]
    3a28:	2800      	cmp	r0, #0
    3a2a:	d1f7      	bne.n	3a1c <mutex_lock_platform+0x18>
    3a2c:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3a30:	d10c      	bne.n	3a4c <mutex_lock_platform+0x48>
    3a32:	2000      	movs	r0, #0
}
    3a34:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
    3a36:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    3a38:	f04f 32ff 	mov.w	r2, #4294967295
    3a3c:	f04f 33ff 	mov.w	r3, #4294967295
    3a40:	f006 fda6 	bl	a590 <z_impl_k_mutex_lock>
        if (ret == 0) {
    3a44:	2800      	cmp	r0, #0
    3a46:	d0f5      	beq.n	3a34 <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    3a48:	4804      	ldr	r0, [pc, #16]	; (3a5c <mutex_lock_platform+0x58>)
    3a4a:	e7f3      	b.n	3a34 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3a4c:	4803      	ldr	r0, [pc, #12]	; (3a5c <mutex_lock_platform+0x58>)
    3a4e:	e7f1      	b.n	3a34 <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3a50:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    3a54:	4770      	bx	lr
    3a56:	bf00      	nop
    3a58:	ffff8fea 	.word	0xffff8fea
    3a5c:	ffff8fe9 	.word	0xffff8fe9

00003a60 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3a60:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    3a62:	4604      	mov	r4, r0
    3a64:	b188      	cbz	r0, 3a8a <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3a66:	6863      	ldr	r3, [r4, #4]
    3a68:	2b04      	cmp	r3, #4
    3a6a:	d00d      	beq.n	3a88 <mutex_free_platform+0x28>
    3a6c:	2b08      	cmp	r3, #8
    3a6e:	d00b      	beq.n	3a88 <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3a70:	b153      	cbz	r3, 3a88 <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    3a72:	f013 0f02 	tst.w	r3, #2
    3a76:	d00d      	beq.n	3a94 <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    3a78:	4621      	mov	r1, r4
    3a7a:	4809      	ldr	r0, [pc, #36]	; (3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>)
    3a7c:	f00a fb2b 	bl	e0d6 <k_mem_slab_free>
        mutex->mutex = NULL;
    3a80:	2300      	movs	r3, #0
    3a82:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    3a84:	2300      	movs	r3, #0
    3a86:	6063      	str	r3, [r4, #4]
}
    3a88:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    3a8a:	4b06      	ldr	r3, [pc, #24]	; (3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>)
    3a8c:	685b      	ldr	r3, [r3, #4]
    3a8e:	4806      	ldr	r0, [pc, #24]	; (3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>)
    3a90:	4798      	blx	r3
    3a92:	e7e8      	b.n	3a66 <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    3a94:	2214      	movs	r2, #20
    3a96:	2100      	movs	r1, #0
    3a98:	6820      	ldr	r0, [r4, #0]
    3a9a:	f009 fca7 	bl	d3ec <memset>
    3a9e:	e7f1      	b.n	3a84 <mutex_free_platform+0x24>
    3aa0:	20000f60 	.word	0x20000f60
    3aa4:	200001bc 	.word	0x200001bc
    3aa8:	0000f3d8 	.word	0x0000f3d8

00003aac <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3aac:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    3aae:	4604      	mov	r4, r0
    3ab0:	b178      	cbz	r0, 3ad2 <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3ab2:	6863      	ldr	r3, [r4, #4]
    3ab4:	2b04      	cmp	r3, #4
    3ab6:	d00b      	beq.n	3ad0 <mutex_init_platform+0x24>
    3ab8:	2b08      	cmp	r3, #8
    3aba:	d009      	beq.n	3ad0 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    3abc:	b90b      	cbnz	r3, 3ac2 <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    3abe:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    3ac0:	b163      	cbz	r3, 3adc <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    3ac2:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    3ac4:	f00a fb9a 	bl	e1fc <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    3ac8:	6863      	ldr	r3, [r4, #4]
    3aca:	f043 0301 	orr.w	r3, r3, #1
    3ace:	6063      	str	r3, [r4, #4]
}
    3ad0:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    3ad2:	4b0f      	ldr	r3, [pc, #60]	; (3b10 <mutex_init_platform+0x64>)
    3ad4:	685b      	ldr	r3, [r3, #4]
    3ad6:	480f      	ldr	r0, [pc, #60]	; (3b14 <mutex_init_platform+0x68>)
    3ad8:	4798      	blx	r3
    3ada:	e7ea      	b.n	3ab2 <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    3adc:	f04f 32ff 	mov.w	r2, #4294967295
    3ae0:	f04f 33ff 	mov.w	r3, #4294967295
    3ae4:	4621      	mov	r1, r4
    3ae6:	480c      	ldr	r0, [pc, #48]	; (3b18 <mutex_init_platform+0x6c>)
    3ae8:	f006 fc0e 	bl	a308 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    3aec:	b908      	cbnz	r0, 3af2 <mutex_init_platform+0x46>
    3aee:	6823      	ldr	r3, [r4, #0]
    3af0:	b91b      	cbnz	r3, 3afa <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    3af2:	4b07      	ldr	r3, [pc, #28]	; (3b10 <mutex_init_platform+0x64>)
    3af4:	685b      	ldr	r3, [r3, #4]
    3af6:	4809      	ldr	r0, [pc, #36]	; (3b1c <mutex_init_platform+0x70>)
    3af8:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    3afa:	2214      	movs	r2, #20
    3afc:	2100      	movs	r1, #0
    3afe:	6820      	ldr	r0, [r4, #0]
    3b00:	f009 fc74 	bl	d3ec <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    3b04:	6863      	ldr	r3, [r4, #4]
    3b06:	f043 0302 	orr.w	r3, r3, #2
    3b0a:	6063      	str	r3, [r4, #4]
    3b0c:	e7d9      	b.n	3ac2 <mutex_init_platform+0x16>
    3b0e:	bf00      	nop
    3b10:	200001bc 	.word	0x200001bc
    3b14:	0000f3d8 	.word	0x0000f3d8
    3b18:	20000f60 	.word	0x20000f60
    3b1c:	0000f400 	.word	0x0000f400

00003b20 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    3b20:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    3b22:	2340      	movs	r3, #64	; 0x40
    3b24:	2214      	movs	r2, #20
    3b26:	4904      	ldr	r1, [pc, #16]	; (3b38 <nrf_cc3xx_platform_mutex_init+0x18>)
    3b28:	4804      	ldr	r0, [pc, #16]	; (3b3c <nrf_cc3xx_platform_mutex_init+0x1c>)
    3b2a:	f00a fac6 	bl	e0ba <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    3b2e:	4904      	ldr	r1, [pc, #16]	; (3b40 <nrf_cc3xx_platform_mutex_init+0x20>)
    3b30:	4804      	ldr	r0, [pc, #16]	; (3b44 <nrf_cc3xx_platform_mutex_init+0x24>)
    3b32:	f007 ff35 	bl	b9a0 <nrf_cc3xx_platform_set_mutexes>
}
    3b36:	bd08      	pop	{r3, pc}
    3b38:	20000f7c 	.word	0x20000f7c
    3b3c:	20000f60 	.word	0x20000f60
    3b40:	0000f440 	.word	0x0000f440
    3b44:	0000f430 	.word	0x0000f430

00003b48 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    3b48:	4901      	ldr	r1, [pc, #4]	; (3b50 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    3b4a:	2210      	movs	r2, #16
	str	r2, [r1]
    3b4c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    3b4e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    3b50:	e000ed10 	.word	0xe000ed10

00003b54 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    3b54:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    3b56:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    3b58:	f380 8811 	msr	BASEPRI, r0
	isb
    3b5c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    3b60:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    3b64:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    3b66:	b662      	cpsie	i
	isb
    3b68:	f3bf 8f6f 	isb	sy

	bx	lr
    3b6c:	4770      	bx	lr
    3b6e:	bf00      	nop

00003b70 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    3b70:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    3b72:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    3b74:	f381 8811 	msr	BASEPRI, r1

	wfe
    3b78:	bf20      	wfe

	msr	BASEPRI, r0
    3b7a:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    3b7e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    3b80:	4770      	bx	lr
    3b82:	bf00      	nop

00003b84 <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    3b84:	b570      	push	{r4, r5, r6, lr}
    3b86:	b082      	sub	sp, #8
    3b88:	4604      	mov	r4, r0
    3b8a:	4d1f      	ldr	r5, [pc, #124]	; (3c08 <esf_dump+0x84>)
    3b8c:	4b1f      	ldr	r3, [pc, #124]	; (3c0c <esf_dump+0x88>)
    3b8e:	1aed      	subs	r5, r5, r3
    3b90:	08ed      	lsrs	r5, r5, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    3b92:	2601      	movs	r6, #1
    3b94:	f04f 0300 	mov.w	r3, #0
    3b98:	f366 0302 	bfi	r3, r6, #0, #3
    3b9c:	f36f 03c5 	bfc	r3, #3, #3
    3ba0:	f365 138f 	bfi	r3, r5, #6, #10
    3ba4:	f8ad 3000 	strh.w	r3, [sp]
    3ba8:	6883      	ldr	r3, [r0, #8]
    3baa:	6842      	ldr	r2, [r0, #4]
    3bac:	6801      	ldr	r1, [r0, #0]
    3bae:	4818      	ldr	r0, [pc, #96]	; (3c10 <esf_dump+0x8c>)
    3bb0:	f7fd fd3a 	bl	1628 <log_3>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    3bb4:	f04f 0300 	mov.w	r3, #0
    3bb8:	f366 0302 	bfi	r3, r6, #0, #3
    3bbc:	f36f 03c5 	bfc	r3, #3, #3
    3bc0:	f365 138f 	bfi	r3, r5, #6, #10
    3bc4:	f8ad 3000 	strh.w	r3, [sp]
    3bc8:	6963      	ldr	r3, [r4, #20]
    3bca:	6922      	ldr	r2, [r4, #16]
    3bcc:	68e1      	ldr	r1, [r4, #12]
    3bce:	4811      	ldr	r0, [pc, #68]	; (3c14 <esf_dump+0x90>)
    3bd0:	f7fd fd2a 	bl	1628 <log_3>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    3bd4:	f04f 0200 	mov.w	r2, #0
    3bd8:	f366 0202 	bfi	r2, r6, #0, #3
    3bdc:	f36f 02c5 	bfc	r2, #3, #3
    3be0:	f365 128f 	bfi	r2, r5, #6, #10
    3be4:	69e1      	ldr	r1, [r4, #28]
    3be6:	480c      	ldr	r0, [pc, #48]	; (3c18 <esf_dump+0x94>)
    3be8:	f7fd fd5c 	bl	16a4 <log_1>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    3bec:	f04f 0200 	mov.w	r2, #0
    3bf0:	f366 0202 	bfi	r2, r6, #0, #3
    3bf4:	f36f 02c5 	bfc	r2, #3, #3
    3bf8:	f365 128f 	bfi	r2, r5, #6, #10
    3bfc:	69a1      	ldr	r1, [r4, #24]
    3bfe:	4807      	ldr	r0, [pc, #28]	; (3c1c <esf_dump+0x98>)
    3c00:	f7fd fd50 	bl	16a4 <log_1>
		esf->basic.pc);
}
    3c04:	b002      	add	sp, #8
    3c06:	bd70      	pop	{r4, r5, r6, pc}
    3c08:	0000ec74 	.word	0x0000ec74
    3c0c:	0000ec4c 	.word	0x0000ec4c
    3c10:	0000f454 	.word	0x0000f454
    3c14:	0000f484 	.word	0x0000f484
    3c18:	0000f4b4 	.word	0x0000f4b4
    3c1c:	0000f4c4 	.word	0x0000f4c4

00003c20 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    3c20:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3c22:	2b00      	cmp	r3, #0
    3c24:	db08      	blt.n	3c38 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3c26:	f000 001f 	and.w	r0, r0, #31
    3c2a:	095b      	lsrs	r3, r3, #5
    3c2c:	2201      	movs	r2, #1
    3c2e:	fa02 f000 	lsl.w	r0, r2, r0
    3c32:	4a02      	ldr	r2, [pc, #8]	; (3c3c <arch_irq_enable+0x1c>)
    3c34:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    3c38:	4770      	bx	lr
    3c3a:	bf00      	nop
    3c3c:	e000e100 	.word	0xe000e100

00003c40 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    3c40:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3c42:	2b00      	cmp	r3, #0
    3c44:	db0d      	blt.n	3c62 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3c46:	f000 001f 	and.w	r0, r0, #31
    3c4a:	095b      	lsrs	r3, r3, #5
    3c4c:	2201      	movs	r2, #1
    3c4e:	fa02 f000 	lsl.w	r0, r2, r0
    3c52:	3320      	adds	r3, #32
    3c54:	4a03      	ldr	r2, [pc, #12]	; (3c64 <arch_irq_disable+0x24>)
    3c56:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3c5a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3c5e:	f3bf 8f6f 	isb	sy
}
    3c62:	4770      	bx	lr
    3c64:	e000e100 	.word	0xe000e100

00003c68 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    3c68:	0942      	lsrs	r2, r0, #5
    3c6a:	4b05      	ldr	r3, [pc, #20]	; (3c80 <arch_irq_is_enabled+0x18>)
    3c6c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3c70:	f000 001f 	and.w	r0, r0, #31
    3c74:	2301      	movs	r3, #1
    3c76:	fa03 f000 	lsl.w	r0, r3, r0
}
    3c7a:	4010      	ands	r0, r2
    3c7c:	4770      	bx	lr
    3c7e:	bf00      	nop
    3c80:	e000e100 	.word	0xe000e100

00003c84 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    3c84:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    3c86:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    3c88:	2b00      	cmp	r3, #0
    3c8a:	db08      	blt.n	3c9e <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c8c:	0149      	lsls	r1, r1, #5
    3c8e:	b2c9      	uxtb	r1, r1
    3c90:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3c94:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    3c98:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    3c9c:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c9e:	f000 000f 	and.w	r0, r0, #15
    3ca2:	0149      	lsls	r1, r1, #5
    3ca4:	b2c9      	uxtb	r1, r1
    3ca6:	4b01      	ldr	r3, [pc, #4]	; (3cac <z_arm_irq_priority_set+0x28>)
    3ca8:	5419      	strb	r1, [r3, r0]
}
    3caa:	4770      	bx	lr
    3cac:	e000ed14 	.word	0xe000ed14

00003cb0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    3cb0:	bf30      	wfi
    b z_SysNmiOnReset
    3cb2:	f7ff bffd 	b.w	3cb0 <z_SysNmiOnReset>
    3cb6:	bf00      	nop

00003cb8 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    3cb8:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3cba:	4b0b      	ldr	r3, [pc, #44]	; (3ce8 <z_arm_prep_c+0x30>)
    3cbc:	4a0b      	ldr	r2, [pc, #44]	; (3cec <z_arm_prep_c+0x34>)
    3cbe:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    3cc2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    3cc4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3cc8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    3ccc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3cd0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    3cd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    3cd8:	f006 fab4 	bl	a244 <z_bss_zero>
	z_data_copy();
    3cdc:	f007 fb1a 	bl	b314 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    3ce0:	f000 fcb6 	bl	4650 <z_arm_interrupt_init>
	z_cstart();
    3ce4:	f006 faba 	bl	a25c <z_cstart>
    3ce8:	e000ed00 	.word	0xe000ed00
    3cec:	00000000 	.word	0x00000000

00003cf0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    3cf0:	4a0a      	ldr	r2, [pc, #40]	; (3d1c <arch_swap+0x2c>)
    3cf2:	6893      	ldr	r3, [r2, #8]
    3cf4:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    3cf8:	4909      	ldr	r1, [pc, #36]	; (3d20 <arch_swap+0x30>)
    3cfa:	6809      	ldr	r1, [r1, #0]
    3cfc:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3d00:	4908      	ldr	r1, [pc, #32]	; (3d24 <arch_swap+0x34>)
    3d02:	684b      	ldr	r3, [r1, #4]
    3d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3d08:	604b      	str	r3, [r1, #4]
    3d0a:	2300      	movs	r3, #0
    3d0c:	f383 8811 	msr	BASEPRI, r3
    3d10:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3d14:	6893      	ldr	r3, [r2, #8]
}
    3d16:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    3d1a:	4770      	bx	lr
    3d1c:	200024d8 	.word	0x200024d8
    3d20:	0000fd6c 	.word	0x0000fd6c
    3d24:	e000ed00 	.word	0xe000ed00

00003d28 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3d28:	4913      	ldr	r1, [pc, #76]	; (3d78 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3d2a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3d2c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3d30:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    3d32:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    3d36:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3d3a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    3d3c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3d40:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    3d44:	4f0d      	ldr	r7, [pc, #52]	; (3d7c <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    3d46:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3d4a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    3d4c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    3d4e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3d50:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    3d54:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    3d56:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    3d5a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    3d5e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    3d60:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    3d62:	f000 fd17 	bl	4794 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    3d66:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    3d6a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    3d6e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    3d72:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    3d76:	4770      	bx	lr
    ldr r1, =_kernel
    3d78:	200024d8 	.word	0x200024d8
    ldr v4, =_SCS_ICSR
    3d7c:	e000ed04 	.word	0xe000ed04

00003d80 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    3d80:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    3d84:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    3d86:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    3d8a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    3d8e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    3d90:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    3d94:	2902      	cmp	r1, #2
    beq _oops
    3d96:	d0ff      	beq.n	3d98 <_oops>

00003d98 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    3d98:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    3d9a:	f009 fa5d 	bl	d258 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    3d9e:	bd01      	pop	{r0, pc}

00003da0 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    3da0:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    3da2:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    3da6:	490d      	ldr	r1, [pc, #52]	; (3ddc <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    3da8:	f021 0101 	bic.w	r1, r1, #1
    3dac:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    3db0:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    3db4:	9b01      	ldr	r3, [sp, #4]
    3db6:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    3dba:	9b02      	ldr	r3, [sp, #8]
    3dbc:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    3dc0:	9b03      	ldr	r3, [sp, #12]
    3dc2:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    3dc6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3dca:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    3dce:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    3dd0:	2300      	movs	r3, #0
    3dd2:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    3dd6:	bc10      	pop	{r4}
    3dd8:	4770      	bx	lr
    3dda:	bf00      	nop
    3ddc:	0000c023 	.word	0x0000c023

00003de0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    3de0:	4b16      	ldr	r3, [pc, #88]	; (3e3c <z_check_thread_stack_fail+0x5c>)
    3de2:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    3de4:	b1da      	cbz	r2, 3e1e <z_check_thread_stack_fail+0x3e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    3de6:	f110 0f16 	cmn.w	r0, #22
    3dea:	d01a      	beq.n	3e22 <z_check_thread_stack_fail+0x42>
{
    3dec:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    3dee:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    3df2:	f1a3 0420 	sub.w	r4, r3, #32
    3df6:	4284      	cmp	r4, r0
    3df8:	d805      	bhi.n	3e06 <z_check_thread_stack_fail+0x26>
    3dfa:	4283      	cmp	r3, r0
    3dfc:	d908      	bls.n	3e10 <z_check_thread_stack_fail+0x30>
    3dfe:	428b      	cmp	r3, r1
    3e00:	d808      	bhi.n	3e14 <z_check_thread_stack_fail+0x34>
    3e02:	2100      	movs	r1, #0
    3e04:	e000      	b.n	3e08 <z_check_thread_stack_fail+0x28>
    3e06:	2100      	movs	r1, #0
    3e08:	b931      	cbnz	r1, 3e18 <z_check_thread_stack_fail+0x38>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    3e0a:	2000      	movs	r0, #0
}
    3e0c:	bc10      	pop	{r4}
    3e0e:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    3e10:	2100      	movs	r1, #0
    3e12:	e7f9      	b.n	3e08 <z_check_thread_stack_fail+0x28>
    3e14:	2101      	movs	r1, #1
    3e16:	e7f7      	b.n	3e08 <z_check_thread_stack_fail+0x28>
		return thread->stack_info.start;
    3e18:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    3e1c:	e7f6      	b.n	3e0c <z_check_thread_stack_fail+0x2c>
		return 0;
    3e1e:	2000      	movs	r0, #0
    3e20:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    3e22:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    3e26:	428b      	cmp	r3, r1
    3e28:	bf94      	ite	ls
    3e2a:	2100      	movls	r1, #0
    3e2c:	2101      	movhi	r1, #1
    3e2e:	b909      	cbnz	r1, 3e34 <z_check_thread_stack_fail+0x54>
	return 0;
    3e30:	2000      	movs	r0, #0
}
    3e32:	4770      	bx	lr
		return thread->stack_info.start;
    3e34:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    3e38:	4770      	bx	lr
    3e3a:	bf00      	nop
    3e3c:	200024d8 	.word	0x200024d8

00003e40 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    3e40:	b508      	push	{r3, lr}
    3e42:	460d      	mov	r5, r1
    3e44:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    3e46:	4b08      	ldr	r3, [pc, #32]	; (3e68 <arch_switch_to_main_thread+0x28>)
    3e48:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    3e4a:	f000 fca3 	bl	4794 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3e4e:	4620      	mov	r0, r4
    3e50:	f385 8809 	msr	PSP, r5
    3e54:	2100      	movs	r1, #0
    3e56:	b663      	cpsie	if
    3e58:	f381 8811 	msr	BASEPRI, r1
    3e5c:	f3bf 8f6f 	isb	sy
    3e60:	2200      	movs	r2, #0
    3e62:	2300      	movs	r3, #0
    3e64:	f008 f8dd 	bl	c022 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    3e68:	200024d8 	.word	0x200024d8

00003e6c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3e6c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    3e6e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    3e70:	4a0b      	ldr	r2, [pc, #44]	; (3ea0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    3e72:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    3e74:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    3e76:	bf1e      	ittt	ne
	movne	r1, #0
    3e78:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    3e7a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    3e7c:	f00a f9a2 	blne	e1c4 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    3e80:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    3e82:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3e86:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3e8a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    3e8e:	4905      	ldr	r1, [pc, #20]	; (3ea4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3e90:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    3e92:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3e94:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3e96:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3e9a:	4903      	ldr	r1, [pc, #12]	; (3ea8 <_isr_wrapper+0x3c>)
	bx r1
    3e9c:	4708      	bx	r1
    3e9e:	0000      	.short	0x0000
	ldr r2, =_kernel
    3ea0:	200024d8 	.word	0x200024d8
	ldr r1, =_sw_isr_table
    3ea4:	0000eacc 	.word	0x0000eacc
	ldr r1, =z_arm_int_exit
    3ea8:	00003ead 	.word	0x00003ead

00003eac <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3eac:	4b04      	ldr	r3, [pc, #16]	; (3ec0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    3eae:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3eb0:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    3eb2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3eb4:	d003      	beq.n	3ebe <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    3eb6:	4903      	ldr	r1, [pc, #12]	; (3ec4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3eb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3ebc:	600a      	str	r2, [r1, #0]

00003ebe <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    3ebe:	4770      	bx	lr
	ldr r3, =_kernel
    3ec0:	200024d8 	.word	0x200024d8
	ldr r1, =_SCS_ICSR
    3ec4:	e000ed04 	.word	0xe000ed04

00003ec8 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
    3ec8:	b508      	push	{r3, lr}
    3eca:	4b4e      	ldr	r3, [pc, #312]	; (4004 <usage_fault+0x13c>)
    3ecc:	4a4e      	ldr	r2, [pc, #312]	; (4008 <usage_fault+0x140>)
    3ece:	1a9b      	subs	r3, r3, r2
    3ed0:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    3ed2:	f04f 0100 	mov.w	r1, #0
    3ed6:	2201      	movs	r2, #1
    3ed8:	f362 0102 	bfi	r1, r2, #0, #3
    3edc:	f36f 01c5 	bfc	r1, #3, #3
    3ee0:	f363 118f 	bfi	r1, r3, #6, #10
    3ee4:	4849      	ldr	r0, [pc, #292]	; (400c <usage_fault+0x144>)
    3ee6:	f7fd fc4f 	bl	1788 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3eea:	4b49      	ldr	r3, [pc, #292]	; (4010 <usage_fault+0x148>)
    3eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3eee:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    3ef2:	d121      	bne.n	3f38 <usage_fault+0x70>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3ef4:	4b46      	ldr	r3, [pc, #280]	; (4010 <usage_fault+0x148>)
    3ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3ef8:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    3efc:	d12d      	bne.n	3f5a <usage_fault+0x92>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3efe:	4b44      	ldr	r3, [pc, #272]	; (4010 <usage_fault+0x148>)
    3f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3f02:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    3f06:	d139      	bne.n	3f7c <usage_fault+0xb4>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3f08:	4b41      	ldr	r3, [pc, #260]	; (4010 <usage_fault+0x148>)
    3f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3f0c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    3f10:	d145      	bne.n	3f9e <usage_fault+0xd6>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3f12:	4b3f      	ldr	r3, [pc, #252]	; (4010 <usage_fault+0x148>)
    3f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3f16:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    3f1a:	d151      	bne.n	3fc0 <usage_fault+0xf8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3f1c:	4b3c      	ldr	r3, [pc, #240]	; (4010 <usage_fault+0x148>)
    3f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3f20:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3f24:	d15d      	bne.n	3fe2 <usage_fault+0x11a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3f26:	4a3a      	ldr	r2, [pc, #232]	; (4010 <usage_fault+0x148>)
    3f28:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3f2a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    3f2e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    3f32:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    3f34:	2000      	movs	r0, #0
    3f36:	bd08      	pop	{r3, pc}
    3f38:	4b32      	ldr	r3, [pc, #200]	; (4004 <usage_fault+0x13c>)
    3f3a:	4a33      	ldr	r2, [pc, #204]	; (4008 <usage_fault+0x140>)
    3f3c:	1a9b      	subs	r3, r3, r2
    3f3e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Division by zero");
    3f40:	f04f 0100 	mov.w	r1, #0
    3f44:	2201      	movs	r2, #1
    3f46:	f362 0102 	bfi	r1, r2, #0, #3
    3f4a:	f36f 01c5 	bfc	r1, #3, #3
    3f4e:	f363 118f 	bfi	r1, r3, #6, #10
    3f52:	4830      	ldr	r0, [pc, #192]	; (4014 <usage_fault+0x14c>)
    3f54:	f7fd fc18 	bl	1788 <log_0>
    3f58:	e7cc      	b.n	3ef4 <usage_fault+0x2c>
    3f5a:	4b2a      	ldr	r3, [pc, #168]	; (4004 <usage_fault+0x13c>)
    3f5c:	4a2a      	ldr	r2, [pc, #168]	; (4008 <usage_fault+0x140>)
    3f5e:	1a9b      	subs	r3, r3, r2
    3f60:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unaligned memory access");
    3f62:	f04f 0100 	mov.w	r1, #0
    3f66:	2201      	movs	r2, #1
    3f68:	f362 0102 	bfi	r1, r2, #0, #3
    3f6c:	f36f 01c5 	bfc	r1, #3, #3
    3f70:	f363 118f 	bfi	r1, r3, #6, #10
    3f74:	4828      	ldr	r0, [pc, #160]	; (4018 <usage_fault+0x150>)
    3f76:	f7fd fc07 	bl	1788 <log_0>
    3f7a:	e7c0      	b.n	3efe <usage_fault+0x36>
    3f7c:	4b21      	ldr	r3, [pc, #132]	; (4004 <usage_fault+0x13c>)
    3f7e:	4a22      	ldr	r2, [pc, #136]	; (4008 <usage_fault+0x140>)
    3f80:	1a9b      	subs	r3, r3, r2
    3f82:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  No coprocessor instructions");
    3f84:	f04f 0100 	mov.w	r1, #0
    3f88:	2201      	movs	r2, #1
    3f8a:	f362 0102 	bfi	r1, r2, #0, #3
    3f8e:	f36f 01c5 	bfc	r1, #3, #3
    3f92:	f363 118f 	bfi	r1, r3, #6, #10
    3f96:	4821      	ldr	r0, [pc, #132]	; (401c <usage_fault+0x154>)
    3f98:	f7fd fbf6 	bl	1788 <log_0>
    3f9c:	e7b4      	b.n	3f08 <usage_fault+0x40>
    3f9e:	4b19      	ldr	r3, [pc, #100]	; (4004 <usage_fault+0x13c>)
    3fa0:	4a19      	ldr	r2, [pc, #100]	; (4008 <usage_fault+0x140>)
    3fa2:	1a9b      	subs	r3, r3, r2
    3fa4:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    3fa6:	f04f 0100 	mov.w	r1, #0
    3faa:	2201      	movs	r2, #1
    3fac:	f362 0102 	bfi	r1, r2, #0, #3
    3fb0:	f36f 01c5 	bfc	r1, #3, #3
    3fb4:	f363 118f 	bfi	r1, r3, #6, #10
    3fb8:	4819      	ldr	r0, [pc, #100]	; (4020 <usage_fault+0x158>)
    3fba:	f7fd fbe5 	bl	1788 <log_0>
    3fbe:	e7a8      	b.n	3f12 <usage_fault+0x4a>
    3fc0:	4b10      	ldr	r3, [pc, #64]	; (4004 <usage_fault+0x13c>)
    3fc2:	4a11      	ldr	r2, [pc, #68]	; (4008 <usage_fault+0x140>)
    3fc4:	1a9b      	subs	r3, r3, r2
    3fc6:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal use of the EPSR");
    3fc8:	f04f 0100 	mov.w	r1, #0
    3fcc:	2201      	movs	r2, #1
    3fce:	f362 0102 	bfi	r1, r2, #0, #3
    3fd2:	f36f 01c5 	bfc	r1, #3, #3
    3fd6:	f363 118f 	bfi	r1, r3, #6, #10
    3fda:	4812      	ldr	r0, [pc, #72]	; (4024 <usage_fault+0x15c>)
    3fdc:	f7fd fbd4 	bl	1788 <log_0>
    3fe0:	e79c      	b.n	3f1c <usage_fault+0x54>
    3fe2:	4b08      	ldr	r3, [pc, #32]	; (4004 <usage_fault+0x13c>)
    3fe4:	4a08      	ldr	r2, [pc, #32]	; (4008 <usage_fault+0x140>)
    3fe6:	1a9b      	subs	r3, r3, r2
    3fe8:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    3fea:	f04f 0100 	mov.w	r1, #0
    3fee:	2201      	movs	r2, #1
    3ff0:	f362 0102 	bfi	r1, r2, #0, #3
    3ff4:	f36f 01c5 	bfc	r1, #3, #3
    3ff8:	f363 118f 	bfi	r1, r3, #6, #10
    3ffc:	480a      	ldr	r0, [pc, #40]	; (4028 <usage_fault+0x160>)
    3ffe:	f7fd fbc3 	bl	1788 <log_0>
    4002:	e790      	b.n	3f26 <usage_fault+0x5e>
    4004:	0000ec74 	.word	0x0000ec74
    4008:	0000ec4c 	.word	0x0000ec4c
    400c:	0000f4f4 	.word	0x0000f4f4
    4010:	e000ed00 	.word	0xe000ed00
    4014:	0000f50c 	.word	0x0000f50c
    4018:	0000f520 	.word	0x0000f520
    401c:	0000f53c 	.word	0x0000f53c
    4020:	0000f55c 	.word	0x0000f55c
    4024:	0000f584 	.word	0x0000f584
    4028:	0000f5a0 	.word	0x0000f5a0

0000402c <debug_monitor>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
    402c:	b508      	push	{r3, lr}
	*recoverable = false;
    402e:	2200      	movs	r2, #0
    4030:	700a      	strb	r2, [r1, #0]
    4032:	4b08      	ldr	r3, [pc, #32]	; (4054 <debug_monitor+0x28>)
    4034:	4908      	ldr	r1, [pc, #32]	; (4058 <debug_monitor+0x2c>)
    4036:	1a5b      	subs	r3, r3, r1
    4038:	08db      	lsrs	r3, r3, #3

	PR_FAULT_INFO(
    403a:	f04f 0100 	mov.w	r1, #0
    403e:	2001      	movs	r0, #1
    4040:	f360 0102 	bfi	r1, r0, #0, #3
    4044:	f362 01c5 	bfi	r1, r2, #3, #3
    4048:	f363 118f 	bfi	r1, r3, #6, #10
    404c:	4803      	ldr	r0, [pc, #12]	; (405c <debug_monitor+0x30>)
    404e:	f7fd fb9b 	bl	1788 <log_0>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
    4052:	bd08      	pop	{r3, pc}
    4054:	0000ec74 	.word	0x0000ec74
    4058:	0000ec4c 	.word	0x0000ec4c
    405c:	0000f5cc 	.word	0x0000f5cc

00004060 <bus_fault>:
{
    4060:	b570      	push	{r4, r5, r6, lr}
    4062:	4605      	mov	r5, r0
    4064:	460e      	mov	r6, r1
    4066:	4614      	mov	r4, r2
    4068:	4b5e      	ldr	r3, [pc, #376]	; (41e4 <bus_fault+0x184>)
    406a:	4a5f      	ldr	r2, [pc, #380]	; (41e8 <bus_fault+0x188>)
    406c:	1a9b      	subs	r3, r3, r2
    406e:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    4070:	f04f 0100 	mov.w	r1, #0
    4074:	2201      	movs	r2, #1
    4076:	f362 0102 	bfi	r1, r2, #0, #3
    407a:	f36f 01c5 	bfc	r1, #3, #3
    407e:	f363 118f 	bfi	r1, r3, #6, #10
    4082:	485a      	ldr	r0, [pc, #360]	; (41ec <bus_fault+0x18c>)
    4084:	f7fd fb80 	bl	1788 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    4088:	4b59      	ldr	r3, [pc, #356]	; (41f0 <bus_fault+0x190>)
    408a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    408c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    4090:	d124      	bne.n	40dc <bus_fault+0x7c>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    4092:	4b57      	ldr	r3, [pc, #348]	; (41f0 <bus_fault+0x190>)
    4094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4096:	f413 6f00 	tst.w	r3, #2048	; 0x800
    409a:	d130      	bne.n	40fe <bus_fault+0x9e>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    409c:	4b54      	ldr	r3, [pc, #336]	; (41f0 <bus_fault+0x190>)
    409e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    40a0:	f413 7f00 	tst.w	r3, #512	; 0x200
    40a4:	d13c      	bne.n	4120 <bus_fault+0xc0>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    40a6:	4b52      	ldr	r3, [pc, #328]	; (41f0 <bus_fault+0x190>)
    40a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    40aa:	f413 6f80 	tst.w	r3, #1024	; 0x400
    40ae:	d165      	bne.n	417c <bus_fault+0x11c>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    40b0:	4b4f      	ldr	r3, [pc, #316]	; (41f0 <bus_fault+0x190>)
    40b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    40b4:	f413 7f80 	tst.w	r3, #256	; 0x100
    40b8:	d171      	bne.n	419e <bus_fault+0x13e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    40ba:	4b4d      	ldr	r3, [pc, #308]	; (41f0 <bus_fault+0x190>)
    40bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    40be:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    40c2:	d17d      	bne.n	41c0 <bus_fault+0x160>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    40c4:	4a4a      	ldr	r2, [pc, #296]	; (41f0 <bus_fault+0x190>)
    40c6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    40c8:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    40cc:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    40ce:	2101      	movs	r1, #1
    40d0:	4628      	mov	r0, r5
    40d2:	f009 f8d3 	bl	d27c <memory_fault_recoverable>
    40d6:	7020      	strb	r0, [r4, #0]
}
    40d8:	2000      	movs	r0, #0
    40da:	bd70      	pop	{r4, r5, r6, pc}
    40dc:	4b41      	ldr	r3, [pc, #260]	; (41e4 <bus_fault+0x184>)
    40de:	4a42      	ldr	r2, [pc, #264]	; (41e8 <bus_fault+0x188>)
    40e0:	1a9b      	subs	r3, r3, r2
    40e2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error");
    40e4:	f04f 0100 	mov.w	r1, #0
    40e8:	2201      	movs	r2, #1
    40ea:	f362 0102 	bfi	r1, r2, #0, #3
    40ee:	f36f 01c5 	bfc	r1, #3, #3
    40f2:	f363 118f 	bfi	r1, r3, #6, #10
    40f6:	483f      	ldr	r0, [pc, #252]	; (41f4 <bus_fault+0x194>)
    40f8:	f7fd fb46 	bl	1788 <log_0>
    40fc:	e7c9      	b.n	4092 <bus_fault+0x32>
    40fe:	4b39      	ldr	r3, [pc, #228]	; (41e4 <bus_fault+0x184>)
    4100:	4a39      	ldr	r2, [pc, #228]	; (41e8 <bus_fault+0x188>)
    4102:	1a9b      	subs	r3, r3, r2
    4104:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
    4106:	f04f 0100 	mov.w	r1, #0
    410a:	2201      	movs	r2, #1
    410c:	f362 0102 	bfi	r1, r2, #0, #3
    4110:	f36f 01c5 	bfc	r1, #3, #3
    4114:	f363 118f 	bfi	r1, r3, #6, #10
    4118:	4837      	ldr	r0, [pc, #220]	; (41f8 <bus_fault+0x198>)
    411a:	f7fd fb35 	bl	1788 <log_0>
    411e:	e7bd      	b.n	409c <bus_fault+0x3c>
    4120:	4b30      	ldr	r3, [pc, #192]	; (41e4 <bus_fault+0x184>)
    4122:	4a31      	ldr	r2, [pc, #196]	; (41e8 <bus_fault+0x188>)
    4124:	1a9b      	subs	r3, r3, r2
    4126:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Precise data bus error");
    4128:	f04f 0100 	mov.w	r1, #0
    412c:	2201      	movs	r2, #1
    412e:	f362 0102 	bfi	r1, r2, #0, #3
    4132:	f36f 01c5 	bfc	r1, #3, #3
    4136:	f363 118f 	bfi	r1, r3, #6, #10
    413a:	4830      	ldr	r0, [pc, #192]	; (41fc <bus_fault+0x19c>)
    413c:	f7fd fb24 	bl	1788 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    4140:	4b2b      	ldr	r3, [pc, #172]	; (41f0 <bus_fault+0x190>)
    4142:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    4144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4146:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    414a:	d0ac      	beq.n	40a6 <bus_fault+0x46>
    414c:	4b25      	ldr	r3, [pc, #148]	; (41e4 <bus_fault+0x184>)
    414e:	4a26      	ldr	r2, [pc, #152]	; (41e8 <bus_fault+0x188>)
    4150:	1a9b      	subs	r3, r3, r2
    4152:	08db      	lsrs	r3, r3, #3
			PR_EXC("  BFAR Address: 0x%x", bfar);
    4154:	f04f 0200 	mov.w	r2, #0
    4158:	2001      	movs	r0, #1
    415a:	f360 0202 	bfi	r2, r0, #0, #3
    415e:	f36f 02c5 	bfc	r2, #3, #3
    4162:	f363 128f 	bfi	r2, r3, #6, #10
    4166:	4826      	ldr	r0, [pc, #152]	; (4200 <bus_fault+0x1a0>)
    4168:	f7fd fa9c 	bl	16a4 <log_1>
			if (from_hard_fault != 0) {
    416c:	2e00      	cmp	r6, #0
    416e:	d09a      	beq.n	40a6 <bus_fault+0x46>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    4170:	4a1f      	ldr	r2, [pc, #124]	; (41f0 <bus_fault+0x190>)
    4172:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4174:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    4178:	6293      	str	r3, [r2, #40]	; 0x28
    417a:	e794      	b.n	40a6 <bus_fault+0x46>
    417c:	4b19      	ldr	r3, [pc, #100]	; (41e4 <bus_fault+0x184>)
    417e:	4a1a      	ldr	r2, [pc, #104]	; (41e8 <bus_fault+0x188>)
    4180:	1a9b      	subs	r3, r3, r2
    4182:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Imprecise data bus error");
    4184:	f04f 0100 	mov.w	r1, #0
    4188:	2201      	movs	r2, #1
    418a:	f362 0102 	bfi	r1, r2, #0, #3
    418e:	f36f 01c5 	bfc	r1, #3, #3
    4192:	f363 118f 	bfi	r1, r3, #6, #10
    4196:	481b      	ldr	r0, [pc, #108]	; (4204 <bus_fault+0x1a4>)
    4198:	f7fd faf6 	bl	1788 <log_0>
    419c:	e788      	b.n	40b0 <bus_fault+0x50>
    419e:	4b11      	ldr	r3, [pc, #68]	; (41e4 <bus_fault+0x184>)
    41a0:	4a11      	ldr	r2, [pc, #68]	; (41e8 <bus_fault+0x188>)
    41a2:	1a9b      	subs	r3, r3, r2
    41a4:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction bus error");
    41a6:	f04f 0100 	mov.w	r1, #0
    41aa:	2201      	movs	r2, #1
    41ac:	f362 0102 	bfi	r1, r2, #0, #3
    41b0:	f36f 01c5 	bfc	r1, #3, #3
    41b4:	f363 118f 	bfi	r1, r3, #6, #10
    41b8:	4813      	ldr	r0, [pc, #76]	; (4208 <bus_fault+0x1a8>)
    41ba:	f7fd fae5 	bl	1788 <log_0>
    41be:	e781      	b.n	40c4 <bus_fault+0x64>
    41c0:	4b08      	ldr	r3, [pc, #32]	; (41e4 <bus_fault+0x184>)
    41c2:	4a09      	ldr	r2, [pc, #36]	; (41e8 <bus_fault+0x188>)
    41c4:	1a9b      	subs	r3, r3, r2
    41c6:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    41c8:	f04f 0100 	mov.w	r1, #0
    41cc:	2201      	movs	r2, #1
    41ce:	f362 0102 	bfi	r1, r2, #0, #3
    41d2:	f36f 01c5 	bfc	r1, #3, #3
    41d6:	f363 118f 	bfi	r1, r3, #6, #10
    41da:	480c      	ldr	r0, [pc, #48]	; (420c <bus_fault+0x1ac>)
    41dc:	f7fd fad4 	bl	1788 <log_0>
    41e0:	e770      	b.n	40c4 <bus_fault+0x64>
    41e2:	bf00      	nop
    41e4:	0000ec74 	.word	0x0000ec74
    41e8:	0000ec4c 	.word	0x0000ec4c
    41ec:	0000f5f0 	.word	0x0000f5f0
    41f0:	e000ed00 	.word	0xe000ed00
    41f4:	0000f608 	.word	0x0000f608
    41f8:	0000f61c 	.word	0x0000f61c
    41fc:	0000f630 	.word	0x0000f630
    4200:	0000f64c 	.word	0x0000f64c
    4204:	0000f664 	.word	0x0000f664
    4208:	0000f680 	.word	0x0000f680
    420c:	0000f698 	.word	0x0000f698

00004210 <mem_manage_fault>:
{
    4210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4212:	4605      	mov	r5, r0
    4214:	460c      	mov	r4, r1
    4216:	4616      	mov	r6, r2
    4218:	4b64      	ldr	r3, [pc, #400]	; (43ac <mem_manage_fault+0x19c>)
    421a:	4a65      	ldr	r2, [pc, #404]	; (43b0 <mem_manage_fault+0x1a0>)
    421c:	1a9b      	subs	r3, r3, r2
    421e:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    4220:	f04f 0100 	mov.w	r1, #0
    4224:	2201      	movs	r2, #1
    4226:	f362 0102 	bfi	r1, r2, #0, #3
    422a:	f36f 01c5 	bfc	r1, #3, #3
    422e:	f363 118f 	bfi	r1, r3, #6, #10
    4232:	4860      	ldr	r0, [pc, #384]	; (43b4 <mem_manage_fault+0x1a4>)
    4234:	f7fd faa8 	bl	1788 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    4238:	4b5f      	ldr	r3, [pc, #380]	; (43b8 <mem_manage_fault+0x1a8>)
    423a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    423c:	f013 0f10 	tst.w	r3, #16
    4240:	d132      	bne.n	42a8 <mem_manage_fault+0x98>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    4242:	4b5d      	ldr	r3, [pc, #372]	; (43b8 <mem_manage_fault+0x1a8>)
    4244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4246:	f013 0f08 	tst.w	r3, #8
    424a:	d13e      	bne.n	42ca <mem_manage_fault+0xba>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    424c:	4b5a      	ldr	r3, [pc, #360]	; (43b8 <mem_manage_fault+0x1a8>)
    424e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4250:	f013 0f02 	tst.w	r3, #2
    4254:	d14a      	bne.n	42ec <mem_manage_fault+0xdc>
	uint32_t mmfar = -EINVAL;
    4256:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    425a:	4b57      	ldr	r3, [pc, #348]	; (43b8 <mem_manage_fault+0x1a8>)
    425c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    425e:	f013 0f01 	tst.w	r3, #1
    4262:	d175      	bne.n	4350 <mem_manage_fault+0x140>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    4264:	4b54      	ldr	r3, [pc, #336]	; (43b8 <mem_manage_fault+0x1a8>)
    4266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4268:	f013 0f20 	tst.w	r3, #32
    426c:	f040 8081 	bne.w	4372 <mem_manage_fault+0x162>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    4270:	4b51      	ldr	r3, [pc, #324]	; (43b8 <mem_manage_fault+0x1a8>)
    4272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4274:	f013 0f10 	tst.w	r3, #16
    4278:	d104      	bne.n	4284 <mem_manage_fault+0x74>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    427a:	4b4f      	ldr	r3, [pc, #316]	; (43b8 <mem_manage_fault+0x1a8>)
    427c:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    427e:	f014 0402 	ands.w	r4, r4, #2
    4282:	d005      	beq.n	4290 <mem_manage_fault+0x80>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    4284:	4b4c      	ldr	r3, [pc, #304]	; (43b8 <mem_manage_fault+0x1a8>)
    4286:	685c      	ldr	r4, [r3, #4]
    4288:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    428c:	f040 8082 	bne.w	4394 <mem_manage_fault+0x184>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4290:	4a49      	ldr	r2, [pc, #292]	; (43b8 <mem_manage_fault+0x1a8>)
    4292:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4294:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    4298:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    429a:	2101      	movs	r1, #1
    429c:	4628      	mov	r0, r5
    429e:	f008 ffed 	bl	d27c <memory_fault_recoverable>
    42a2:	7030      	strb	r0, [r6, #0]
}
    42a4:	4620      	mov	r0, r4
    42a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    42a8:	4b40      	ldr	r3, [pc, #256]	; (43ac <mem_manage_fault+0x19c>)
    42aa:	4a41      	ldr	r2, [pc, #260]	; (43b0 <mem_manage_fault+0x1a0>)
    42ac:	1a9b      	subs	r3, r3, r2
    42ae:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error (context area might be"
    42b0:	f04f 0100 	mov.w	r1, #0
    42b4:	2201      	movs	r2, #1
    42b6:	f362 0102 	bfi	r1, r2, #0, #3
    42ba:	f36f 01c5 	bfc	r1, #3, #3
    42be:	f363 118f 	bfi	r1, r3, #6, #10
    42c2:	483e      	ldr	r0, [pc, #248]	; (43bc <mem_manage_fault+0x1ac>)
    42c4:	f7fd fa60 	bl	1788 <log_0>
    42c8:	e7bb      	b.n	4242 <mem_manage_fault+0x32>
    42ca:	4b38      	ldr	r3, [pc, #224]	; (43ac <mem_manage_fault+0x19c>)
    42cc:	4a38      	ldr	r2, [pc, #224]	; (43b0 <mem_manage_fault+0x1a0>)
    42ce:	1a9b      	subs	r3, r3, r2
    42d0:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
    42d2:	f04f 0100 	mov.w	r1, #0
    42d6:	2201      	movs	r2, #1
    42d8:	f362 0102 	bfi	r1, r2, #0, #3
    42dc:	f36f 01c5 	bfc	r1, #3, #3
    42e0:	f363 118f 	bfi	r1, r3, #6, #10
    42e4:	4836      	ldr	r0, [pc, #216]	; (43c0 <mem_manage_fault+0x1b0>)
    42e6:	f7fd fa4f 	bl	1788 <log_0>
    42ea:	e7af      	b.n	424c <mem_manage_fault+0x3c>
    42ec:	4b2f      	ldr	r3, [pc, #188]	; (43ac <mem_manage_fault+0x19c>)
    42ee:	4a30      	ldr	r2, [pc, #192]	; (43b0 <mem_manage_fault+0x1a0>)
    42f0:	1a9b      	subs	r3, r3, r2
    42f2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Data Access Violation");
    42f4:	f04f 0100 	mov.w	r1, #0
    42f8:	2201      	movs	r2, #1
    42fa:	f362 0102 	bfi	r1, r2, #0, #3
    42fe:	f36f 01c5 	bfc	r1, #3, #3
    4302:	f363 118f 	bfi	r1, r3, #6, #10
    4306:	482f      	ldr	r0, [pc, #188]	; (43c4 <mem_manage_fault+0x1b4>)
    4308:	f7fd fa3e 	bl	1788 <log_0>
		uint32_t temp = SCB->MMFAR;
    430c:	4b2a      	ldr	r3, [pc, #168]	; (43b8 <mem_manage_fault+0x1a8>)
    430e:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    4310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4312:	f013 0f80 	tst.w	r3, #128	; 0x80
    4316:	d102      	bne.n	431e <mem_manage_fault+0x10e>
	uint32_t mmfar = -EINVAL;
    4318:	f06f 0715 	mvn.w	r7, #21
    431c:	e79d      	b.n	425a <mem_manage_fault+0x4a>
    431e:	4b23      	ldr	r3, [pc, #140]	; (43ac <mem_manage_fault+0x19c>)
    4320:	4a23      	ldr	r2, [pc, #140]	; (43b0 <mem_manage_fault+0x1a0>)
    4322:	1a9b      	subs	r3, r3, r2
    4324:	08db      	lsrs	r3, r3, #3
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    4326:	f04f 0200 	mov.w	r2, #0
    432a:	2101      	movs	r1, #1
    432c:	f361 0202 	bfi	r2, r1, #0, #3
    4330:	f36f 02c5 	bfc	r2, #3, #3
    4334:	f363 128f 	bfi	r2, r3, #6, #10
    4338:	4639      	mov	r1, r7
    433a:	4823      	ldr	r0, [pc, #140]	; (43c8 <mem_manage_fault+0x1b8>)
    433c:	f7fd f9b2 	bl	16a4 <log_1>
			if (from_hard_fault != 0) {
    4340:	2c00      	cmp	r4, #0
    4342:	d08a      	beq.n	425a <mem_manage_fault+0x4a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    4344:	4a1c      	ldr	r2, [pc, #112]	; (43b8 <mem_manage_fault+0x1a8>)
    4346:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4348:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    434c:	6293      	str	r3, [r2, #40]	; 0x28
    434e:	e784      	b.n	425a <mem_manage_fault+0x4a>
    4350:	4b16      	ldr	r3, [pc, #88]	; (43ac <mem_manage_fault+0x19c>)
    4352:	4a17      	ldr	r2, [pc, #92]	; (43b0 <mem_manage_fault+0x1a0>)
    4354:	1a9b      	subs	r3, r3, r2
    4356:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction Access Violation");
    4358:	f04f 0100 	mov.w	r1, #0
    435c:	2201      	movs	r2, #1
    435e:	f362 0102 	bfi	r1, r2, #0, #3
    4362:	f36f 01c5 	bfc	r1, #3, #3
    4366:	f363 118f 	bfi	r1, r3, #6, #10
    436a:	4818      	ldr	r0, [pc, #96]	; (43cc <mem_manage_fault+0x1bc>)
    436c:	f7fd fa0c 	bl	1788 <log_0>
    4370:	e778      	b.n	4264 <mem_manage_fault+0x54>
    4372:	4b0e      	ldr	r3, [pc, #56]	; (43ac <mem_manage_fault+0x19c>)
    4374:	4a0e      	ldr	r2, [pc, #56]	; (43b0 <mem_manage_fault+0x1a0>)
    4376:	1a9b      	subs	r3, r3, r2
    4378:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO(
    437a:	f04f 0100 	mov.w	r1, #0
    437e:	2201      	movs	r2, #1
    4380:	f362 0102 	bfi	r1, r2, #0, #3
    4384:	f36f 01c5 	bfc	r1, #3, #3
    4388:	f363 118f 	bfi	r1, r3, #6, #10
    438c:	4810      	ldr	r0, [pc, #64]	; (43d0 <mem_manage_fault+0x1c0>)
    438e:	f7fd f9fb 	bl	1788 <log_0>
    4392:	e76d      	b.n	4270 <mem_manage_fault+0x60>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    4394:	4629      	mov	r1, r5
    4396:	4638      	mov	r0, r7
    4398:	f7ff fd22 	bl	3de0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    439c:	4604      	mov	r4, r0
    439e:	2800      	cmp	r0, #0
    43a0:	f43f af76 	beq.w	4290 <mem_manage_fault+0x80>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    43a4:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    43a8:	2402      	movs	r4, #2
    43aa:	e771      	b.n	4290 <mem_manage_fault+0x80>
    43ac:	0000ec74 	.word	0x0000ec74
    43b0:	0000ec4c 	.word	0x0000ec4c
    43b4:	0000f6c8 	.word	0x0000f6c8
    43b8:	e000ed00 	.word	0xe000ed00
    43bc:	0000f6e0 	.word	0x0000f6e0
    43c0:	0000f61c 	.word	0x0000f61c
    43c4:	0000f714 	.word	0x0000f714
    43c8:	0000f72c 	.word	0x0000f72c
    43cc:	0000f744 	.word	0x0000f744
    43d0:	0000f698 	.word	0x0000f698

000043d4 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    43d4:	b570      	push	{r4, r5, r6, lr}
    43d6:	4605      	mov	r5, r0
    43d8:	460c      	mov	r4, r1
    43da:	4b47      	ldr	r3, [pc, #284]	; (44f8 <hard_fault+0x124>)
    43dc:	4a47      	ldr	r2, [pc, #284]	; (44fc <hard_fault+0x128>)
    43de:	1a9b      	subs	r3, r3, r2
    43e0:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** HARD FAULT *****");
    43e2:	f04f 0100 	mov.w	r1, #0
    43e6:	2201      	movs	r2, #1
    43e8:	f362 0102 	bfi	r1, r2, #0, #3
    43ec:	f36f 01c5 	bfc	r1, #3, #3
    43f0:	f363 118f 	bfi	r1, r3, #6, #10
    43f4:	4842      	ldr	r0, [pc, #264]	; (4500 <hard_fault+0x12c>)
    43f6:	f7fd f9c7 	bl	1788 <log_0>
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    43fa:	2300      	movs	r3, #0
    43fc:	7023      	strb	r3, [r4, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    43fe:	4b41      	ldr	r3, [pc, #260]	; (4504 <hard_fault+0x130>)
    4400:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    4402:	f016 0602 	ands.w	r6, r6, #2
    4406:	d109      	bne.n	441c <hard_fault+0x48>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    4408:	4b3e      	ldr	r3, [pc, #248]	; (4504 <hard_fault+0x130>)
    440a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    440c:	2b00      	cmp	r3, #0
    440e:	db17      	blt.n	4440 <hard_fault+0x6c>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    4410:	4b3c      	ldr	r3, [pc, #240]	; (4504 <hard_fault+0x130>)
    4412:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    4414:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    4418:	d124      	bne.n	4464 <hard_fault+0x90>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    441a:	bd70      	pop	{r4, r5, r6, pc}
    441c:	4b36      	ldr	r3, [pc, #216]	; (44f8 <hard_fault+0x124>)
    441e:	4a37      	ldr	r2, [pc, #220]	; (44fc <hard_fault+0x128>)
    4420:	1a9b      	subs	r3, r3, r2
    4422:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Bus fault on vector table read");
    4424:	f04f 0100 	mov.w	r1, #0
    4428:	2201      	movs	r2, #1
    442a:	f362 0102 	bfi	r1, r2, #0, #3
    442e:	f36f 01c5 	bfc	r1, #3, #3
    4432:	f363 118f 	bfi	r1, r3, #6, #10
    4436:	4834      	ldr	r0, [pc, #208]	; (4508 <hard_fault+0x134>)
    4438:	f7fd f9a6 	bl	1788 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    443c:	2000      	movs	r0, #0
    443e:	e7ec      	b.n	441a <hard_fault+0x46>
    4440:	4b2d      	ldr	r3, [pc, #180]	; (44f8 <hard_fault+0x124>)
    4442:	4a2e      	ldr	r2, [pc, #184]	; (44fc <hard_fault+0x128>)
    4444:	1a9b      	subs	r3, r3, r2
    4446:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Debug event");
    4448:	f04f 0100 	mov.w	r1, #0
    444c:	2201      	movs	r2, #1
    444e:	f362 0102 	bfi	r1, r2, #0, #3
    4452:	f36f 01c5 	bfc	r1, #3, #3
    4456:	f363 118f 	bfi	r1, r3, #6, #10
    445a:	482c      	ldr	r0, [pc, #176]	; (450c <hard_fault+0x138>)
    445c:	f7fd f994 	bl	1788 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4460:	4630      	mov	r0, r6
    4462:	e7da      	b.n	441a <hard_fault+0x46>
    4464:	4b24      	ldr	r3, [pc, #144]	; (44f8 <hard_fault+0x124>)
    4466:	4a25      	ldr	r2, [pc, #148]	; (44fc <hard_fault+0x128>)
    4468:	1a9b      	subs	r3, r3, r2
    446a:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Fault escalation (see below)");
    446c:	f04f 0100 	mov.w	r1, #0
    4470:	2201      	movs	r2, #1
    4472:	f362 0102 	bfi	r1, r2, #0, #3
    4476:	f36f 01c5 	bfc	r1, #3, #3
    447a:	f363 118f 	bfi	r1, r3, #6, #10
    447e:	4824      	ldr	r0, [pc, #144]	; (4510 <hard_fault+0x13c>)
    4480:	f7fd f982 	bl	1788 <log_0>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    4484:	69ab      	ldr	r3, [r5, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    4486:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    448a:	f64d 7302 	movw	r3, #57090	; 0xdf02
    448e:	429a      	cmp	r2, r3
    4490:	d00e      	beq.n	44b0 <hard_fault+0xdc>
		} else if (SCB_MMFSR != 0) {
    4492:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4496:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    449a:	781b      	ldrb	r3, [r3, #0]
    449c:	b9db      	cbnz	r3, 44d6 <hard_fault+0x102>
		} else if (SCB_BFSR != 0) {
    449e:	4b1d      	ldr	r3, [pc, #116]	; (4514 <hard_fault+0x140>)
    44a0:	781b      	ldrb	r3, [r3, #0]
    44a2:	b9f3      	cbnz	r3, 44e2 <hard_fault+0x10e>
		} else if (SCB_UFSR != 0) {
    44a4:	4b1c      	ldr	r3, [pc, #112]	; (4518 <hard_fault+0x144>)
    44a6:	881b      	ldrh	r3, [r3, #0]
    44a8:	b29b      	uxth	r3, r3
    44aa:	bb03      	cbnz	r3, 44ee <hard_fault+0x11a>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    44ac:	4630      	mov	r0, r6
	return reason;
    44ae:	e7b4      	b.n	441a <hard_fault+0x46>
    44b0:	4b11      	ldr	r3, [pc, #68]	; (44f8 <hard_fault+0x124>)
    44b2:	4a12      	ldr	r2, [pc, #72]	; (44fc <hard_fault+0x128>)
    44b4:	1a9b      	subs	r3, r3, r2
    44b6:	08db      	lsrs	r3, r3, #3
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    44b8:	f04f 0200 	mov.w	r2, #0
    44bc:	2101      	movs	r1, #1
    44be:	f361 0202 	bfi	r2, r1, #0, #3
    44c2:	f36f 02c5 	bfc	r2, #3, #3
    44c6:	f363 128f 	bfi	r2, r3, #6, #10
    44ca:	6829      	ldr	r1, [r5, #0]
    44cc:	4813      	ldr	r0, [pc, #76]	; (451c <hard_fault+0x148>)
    44ce:	f7fd f8e9 	bl	16a4 <log_1>
			reason = esf->basic.r0;
    44d2:	6828      	ldr	r0, [r5, #0]
    44d4:	e7a1      	b.n	441a <hard_fault+0x46>
			reason = mem_manage_fault(esf, 1, recoverable);
    44d6:	4622      	mov	r2, r4
    44d8:	2101      	movs	r1, #1
    44da:	4628      	mov	r0, r5
    44dc:	f7ff fe98 	bl	4210 <mem_manage_fault>
    44e0:	e79b      	b.n	441a <hard_fault+0x46>
			reason = bus_fault(esf, 1, recoverable);
    44e2:	4622      	mov	r2, r4
    44e4:	2101      	movs	r1, #1
    44e6:	4628      	mov	r0, r5
    44e8:	f7ff fdba 	bl	4060 <bus_fault>
    44ec:	e795      	b.n	441a <hard_fault+0x46>
			reason = usage_fault(esf);
    44ee:	4628      	mov	r0, r5
    44f0:	f7ff fcea 	bl	3ec8 <usage_fault>
    44f4:	e791      	b.n	441a <hard_fault+0x46>
    44f6:	bf00      	nop
    44f8:	0000ec74 	.word	0x0000ec74
    44fc:	0000ec4c 	.word	0x0000ec4c
    4500:	0000f764 	.word	0x0000f764
    4504:	e000ed00 	.word	0xe000ed00
    4508:	0000f77c 	.word	0x0000f77c
    450c:	0000f7a0 	.word	0x0000f7a0
    4510:	0000f7b0 	.word	0x0000f7b0
    4514:	e000ed29 	.word	0xe000ed29
    4518:	e000ed2a 	.word	0xe000ed2a
    451c:	0000f7d0 	.word	0x0000f7d0

00004520 <reserved_exception>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
    4520:	b508      	push	{r3, lr}
    4522:	460a      	mov	r2, r1
    4524:	480b      	ldr	r0, [pc, #44]	; (4554 <reserved_exception+0x34>)
    4526:	4b0c      	ldr	r3, [pc, #48]	; (4558 <reserved_exception+0x38>)
    4528:	1ac0      	subs	r0, r0, r3
    452a:	08c0      	lsrs	r0, r0, #3
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
    452c:	f04f 0300 	mov.w	r3, #0
    4530:	2101      	movs	r1, #1
    4532:	f361 0302 	bfi	r3, r1, #0, #3
    4536:	f36f 03c5 	bfc	r3, #3, #3
    453a:	f360 138f 	bfi	r3, r0, #6, #10
    453e:	2a0f      	cmp	r2, #15
    4540:	dc05      	bgt.n	454e <reserved_exception+0x2e>
    4542:	4906      	ldr	r1, [pc, #24]	; (455c <reserved_exception+0x3c>)
    4544:	3a10      	subs	r2, #16
    4546:	4806      	ldr	r0, [pc, #24]	; (4560 <reserved_exception+0x40>)
    4548:	f7fd f8e2 	bl	1710 <log_2>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
    454c:	bd08      	pop	{r3, pc}
	PR_FAULT_INFO("***** %s %d) *****",
    454e:	4905      	ldr	r1, [pc, #20]	; (4564 <reserved_exception+0x44>)
    4550:	e7f8      	b.n	4544 <reserved_exception+0x24>
    4552:	bf00      	nop
    4554:	0000ec74 	.word	0x0000ec74
    4558:	0000ec4c 	.word	0x0000ec4c
    455c:	0000f7ec 	.word	0x0000f7ec
    4560:	0000f820 	.word	0x0000f820
    4564:	0000f804 	.word	0x0000f804

00004568 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    4568:	b570      	push	{r4, r5, r6, lr}
    456a:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    456c:	4b2b      	ldr	r3, [pc, #172]	; (461c <z_arm_fault+0xb4>)
    456e:	685d      	ldr	r5, [r3, #4]
    4570:	f3c5 0508 	ubfx	r5, r5, #0, #9
    4574:	2300      	movs	r3, #0
    4576:	f383 8811 	msr	BASEPRI, r3
    457a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    457e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    4582:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    4586:	d12a      	bne.n	45de <z_arm_fault+0x76>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    4588:	f002 030c 	and.w	r3, r2, #12
    458c:	2b08      	cmp	r3, #8
    458e:	d010      	beq.n	45b2 <z_arm_fault+0x4a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    4590:	f012 0f08 	tst.w	r2, #8
    4594:	d020      	beq.n	45d8 <z_arm_fault+0x70>
			ptr_esf =  (z_arch_esf_t *)psp;
    4596:	460c      	mov	r4, r1
	*nested_exc = false;
    4598:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    459a:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    459e:	4629      	mov	r1, r5
    45a0:	4620      	mov	r0, r4
    45a2:	f008 fe6d 	bl	d280 <fault_handle>
    45a6:	4605      	mov	r5, r0
	if (recoverable) {
    45a8:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    45ac:	b1d3      	cbz	r3, 45e4 <z_arm_fault+0x7c>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    45ae:	b00a      	add	sp, #40	; 0x28
    45b0:	bd70      	pop	{r4, r5, r6, pc}
    45b2:	4b1b      	ldr	r3, [pc, #108]	; (4620 <z_arm_fault+0xb8>)
    45b4:	4a1b      	ldr	r2, [pc, #108]	; (4624 <z_arm_fault+0xbc>)
    45b6:	1a9b      	subs	r3, r3, r2
    45b8:	08db      	lsrs	r3, r3, #3
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    45ba:	f04f 0100 	mov.w	r1, #0
    45be:	2201      	movs	r2, #1
    45c0:	f362 0102 	bfi	r1, r2, #0, #3
    45c4:	f36f 01c5 	bfc	r1, #3, #3
    45c8:	f363 118f 	bfi	r1, r3, #6, #10
    45cc:	4816      	ldr	r0, [pc, #88]	; (4628 <z_arm_fault+0xc0>)
    45ce:	f7fd f8db 	bl	1788 <log_0>
	*nested_exc = false;
    45d2:	2600      	movs	r6, #0
		return NULL;
    45d4:	4634      	mov	r4, r6
    45d6:	e7e0      	b.n	459a <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    45d8:	4604      	mov	r4, r0
			*nested_exc = true;
    45da:	2601      	movs	r6, #1
    45dc:	e7dd      	b.n	459a <z_arm_fault+0x32>
	*nested_exc = false;
    45de:	2600      	movs	r6, #0
		return NULL;
    45e0:	4634      	mov	r4, r6
    45e2:	e7da      	b.n	459a <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    45e4:	2220      	movs	r2, #32
    45e6:	4621      	mov	r1, r4
    45e8:	a801      	add	r0, sp, #4
    45ea:	f008 fedb 	bl	d3a4 <memcpy>
	if (nested_exc) {
    45ee:	b14e      	cbz	r6, 4604 <z_arm_fault+0x9c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    45f0:	9b08      	ldr	r3, [sp, #32]
    45f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
    45f6:	b95a      	cbnz	r2, 4610 <z_arm_fault+0xa8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    45f8:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    45fc:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    4600:	9308      	str	r3, [sp, #32]
    4602:	e005      	b.n	4610 <z_arm_fault+0xa8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4604:	9b08      	ldr	r3, [sp, #32]
    4606:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    460a:	f023 0301 	bic.w	r3, r3, #1
    460e:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    4610:	a901      	add	r1, sp, #4
    4612:	4628      	mov	r0, r5
    4614:	f008 fe14 	bl	d240 <z_arm_fatal_error>
    4618:	e7c9      	b.n	45ae <z_arm_fault+0x46>
    461a:	bf00      	nop
    461c:	e000ed00 	.word	0xe000ed00
    4620:	0000ec74 	.word	0x0000ec74
    4624:	0000ec4c 	.word	0x0000ec4c
    4628:	0000f834 	.word	0x0000f834

0000462c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    462c:	4a02      	ldr	r2, [pc, #8]	; (4638 <z_arm_fault_init+0xc>)
    462e:	6953      	ldr	r3, [r2, #20]
    4630:	f043 0310 	orr.w	r3, r3, #16
    4634:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    4636:	4770      	bx	lr
    4638:	e000ed00 	.word	0xe000ed00

0000463c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    463c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    4640:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    4644:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    4646:	4672      	mov	r2, lr
	bl z_arm_fault
    4648:	f7ff ff8e 	bl	4568 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    464c:	bd01      	pop	{r0, pc}
    464e:	bf00      	nop

00004650 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    4650:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    4652:	e006      	b.n	4662 <z_arm_interrupt_init+0x12>
    4654:	f002 010f 	and.w	r1, r2, #15
    4658:	4b09      	ldr	r3, [pc, #36]	; (4680 <z_arm_interrupt_init+0x30>)
    465a:	440b      	add	r3, r1
    465c:	2120      	movs	r1, #32
    465e:	7619      	strb	r1, [r3, #24]
    4660:	3201      	adds	r2, #1
    4662:	2a2f      	cmp	r2, #47	; 0x2f
    4664:	dc0a      	bgt.n	467c <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    4666:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    4668:	2b00      	cmp	r3, #0
    466a:	dbf3      	blt.n	4654 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    466c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    4670:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    4674:	2120      	movs	r1, #32
    4676:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    467a:	e7f1      	b.n	4660 <z_arm_interrupt_init+0x10>
	}
}
    467c:	4770      	bx	lr
    467e:	bf00      	nop
    4680:	e000ecfc 	.word	0xe000ecfc

00004684 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    4684:	2000      	movs	r0, #0
    msr CONTROL, r0
    4686:	f380 8814 	msr	CONTROL, r0
    isb
    468a:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    468e:	f00a f993 	bl	e9b8 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    4692:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    4694:	490d      	ldr	r1, [pc, #52]	; (46cc <__start+0x48>)
    str r0, [r1]
    4696:	6008      	str	r0, [r1, #0]
    dsb
    4698:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    469c:	480c      	ldr	r0, [pc, #48]	; (46d0 <__start+0x4c>)
    msr msp, r0
    469e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    46a2:	f000 f829 	bl	46f8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    46a6:	2020      	movs	r0, #32
    msr BASEPRI, r0
    46a8:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    46ac:	4809      	ldr	r0, [pc, #36]	; (46d4 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    46ae:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    46b2:	1840      	adds	r0, r0, r1
    msr PSP, r0
    46b4:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    46b8:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    46bc:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    46be:	4308      	orrs	r0, r1
    msr CONTROL, r0
    46c0:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    46c4:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    46c8:	f7ff faf6 	bl	3cb8 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    46cc:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    46d0:	20003660 	.word	0x20003660
    ldr r0, =z_interrupt_stacks
    46d4:	200037e0 	.word	0x200037e0

000046d8 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    46d8:	4b06      	ldr	r3, [pc, #24]	; (46f4 <z_arm_clear_arm_mpu_config+0x1c>)
    46da:	6818      	ldr	r0, [r3, #0]
	int num_regions =
    46dc:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    46e0:	2300      	movs	r3, #0
    46e2:	4283      	cmp	r3, r0
    46e4:	da05      	bge.n	46f2 <z_arm_clear_arm_mpu_config+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    46e6:	4a03      	ldr	r2, [pc, #12]	; (46f4 <z_arm_clear_arm_mpu_config+0x1c>)
    46e8:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    46ea:	2100      	movs	r1, #0
    46ec:	6111      	str	r1, [r2, #16]
    46ee:	3301      	adds	r3, #1
    46f0:	e7f7      	b.n	46e2 <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
    46f2:	4770      	bx	lr
    46f4:	e000ed90 	.word	0xe000ed90

000046f8 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    46f8:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    46fa:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    46fc:	2400      	movs	r4, #0
    46fe:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    4702:	f7ff ffe9 	bl	46d8 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    4706:	4623      	mov	r3, r4
    4708:	e008      	b.n	471c <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    470a:	f103 0120 	add.w	r1, r3, #32
    470e:	4a0e      	ldr	r2, [pc, #56]	; (4748 <z_arm_init_arch_hw_at_boot+0x50>)
    4710:	f04f 30ff 	mov.w	r0, #4294967295
    4714:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    4718:	3301      	adds	r3, #1
    471a:	b2db      	uxtb	r3, r3
    471c:	2b07      	cmp	r3, #7
    471e:	d9f4      	bls.n	470a <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    4720:	2300      	movs	r3, #0
    4722:	e008      	b.n	4736 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    4724:	f103 0160 	add.w	r1, r3, #96	; 0x60
    4728:	4a07      	ldr	r2, [pc, #28]	; (4748 <z_arm_init_arch_hw_at_boot+0x50>)
    472a:	f04f 30ff 	mov.w	r0, #4294967295
    472e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    4732:	3301      	adds	r3, #1
    4734:	b2db      	uxtb	r3, r3
    4736:	2b07      	cmp	r3, #7
    4738:	d9f4      	bls.n	4724 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    473a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    473c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4740:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    4744:	bd10      	pop	{r4, pc}
    4746:	bf00      	nop
    4748:	e000e100 	.word	0xe000e100

0000474c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    474c:	b508      	push	{r3, lr}
	if (_current == thread) {
    474e:	4b08      	ldr	r3, [pc, #32]	; (4770 <z_impl_k_thread_abort+0x24>)
    4750:	689b      	ldr	r3, [r3, #8]
    4752:	4283      	cmp	r3, r0
    4754:	d002      	beq.n	475c <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
    4756:	f006 fda3 	bl	b2a0 <z_thread_abort>
}
    475a:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    475c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    4760:	2b00      	cmp	r3, #0
    4762:	d0f8      	beq.n	4756 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4764:	4a03      	ldr	r2, [pc, #12]	; (4774 <z_impl_k_thread_abort+0x28>)
    4766:	6853      	ldr	r3, [r2, #4]
    4768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    476c:	6053      	str	r3, [r2, #4]
    476e:	e7f2      	b.n	4756 <z_impl_k_thread_abort+0xa>
    4770:	200024d8 	.word	0x200024d8
    4774:	e000ed00 	.word	0xe000ed00

00004778 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    4778:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    477a:	4b03      	ldr	r3, [pc, #12]	; (4788 <z_arm_configure_static_mpu_regions+0x10>)
    477c:	4a03      	ldr	r2, [pc, #12]	; (478c <z_arm_configure_static_mpu_regions+0x14>)
    477e:	2101      	movs	r1, #1
    4780:	4803      	ldr	r0, [pc, #12]	; (4790 <z_arm_configure_static_mpu_regions+0x18>)
    4782:	f008 fdd2 	bl	d32a <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    4786:	bd08      	pop	{r3, pc}
    4788:	20040000 	.word	0x20040000
    478c:	20000000 	.word	0x20000000
    4790:	0000f864 	.word	0x0000f864

00004794 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    4794:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    4796:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    479a:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    479c:	4804      	ldr	r0, [pc, #16]	; (47b0 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    479e:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    47a0:	2320      	movs	r3, #32
    47a2:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    47a4:	4b03      	ldr	r3, [pc, #12]	; (47b4 <z_arm_configure_dynamic_mpu_regions+0x20>)
    47a6:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    47a8:	2101      	movs	r1, #1
    47aa:	f008 fdc2 	bl	d332 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    47ae:	bd08      	pop	{r3, pc}
    47b0:	2000147c 	.word	0x2000147c
    47b4:	150b0000 	.word	0x150b0000

000047b8 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    47b8:	4a06      	ldr	r2, [pc, #24]	; (47d4 <region_init+0x1c>)
    47ba:	6090      	str	r0, [r2, #8]

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    47bc:	680b      	ldr	r3, [r1, #0]
    47be:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    47c2:	4303      	orrs	r3, r0
    47c4:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    47c8:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    47ca:	688b      	ldr	r3, [r1, #8]
    47cc:	f043 0301 	orr.w	r3, r3, #1
    47d0:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    47d2:	4770      	bx	lr
    47d4:	e000ed90 	.word	0xe000ed90

000047d8 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    47d8:	b510      	push	{r4, lr}
    47da:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    47dc:	2807      	cmp	r0, #7
    47de:	d803      	bhi.n	47e8 <region_allocate_and_init+0x10>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    47e0:	f7ff ffea 	bl	47b8 <region_init>

	return index;
    47e4:	4620      	mov	r0, r4
}
    47e6:	bd10      	pop	{r4, pc}
    47e8:	4b09      	ldr	r3, [pc, #36]	; (4810 <region_allocate_and_init+0x38>)
    47ea:	4a0a      	ldr	r2, [pc, #40]	; (4814 <region_allocate_and_init+0x3c>)
    47ec:	1a9b      	subs	r3, r3, r2
    47ee:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    47f0:	f04f 0200 	mov.w	r2, #0
    47f4:	2101      	movs	r1, #1
    47f6:	f361 0202 	bfi	r2, r1, #0, #3
    47fa:	f36f 02c5 	bfc	r2, #3, #3
    47fe:	f363 128f 	bfi	r2, r3, #6, #10
    4802:	4601      	mov	r1, r0
    4804:	4804      	ldr	r0, [pc, #16]	; (4818 <region_allocate_and_init+0x40>)
    4806:	f7fc ff4d 	bl	16a4 <log_1>
		return -EINVAL;
    480a:	f06f 0015 	mvn.w	r0, #21
    480e:	e7ea      	b.n	47e6 <region_allocate_and_init+0xe>
    4810:	0000ec6c 	.word	0x0000ec6c
    4814:	0000ec4c 	.word	0x0000ec4c
    4818:	0000f870 	.word	0x0000f870

0000481c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    481c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4820:	4680      	mov	r8, r0
    4822:	460f      	mov	r7, r1
    4824:	469a      	mov	sl, r3
	int i;
	int reg_index = start_reg_index;
    4826:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
    4828:	2400      	movs	r4, #0
    482a:	e009      	b.n	4840 <mpu_configure_regions+0x24>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    482c:	4629      	mov	r1, r5
    482e:	b2f0      	uxtb	r0, r6
    4830:	f008 fd5c 	bl	d2ec <mpu_configure_region>
    4834:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
    4836:	f110 0f16 	cmn.w	r0, #22
    483a:	d025      	beq.n	4888 <mpu_configure_regions+0x6c>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    483c:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    483e:	3401      	adds	r4, #1
    4840:	42bc      	cmp	r4, r7
    4842:	da21      	bge.n	4888 <mpu_configure_regions+0x6c>
		if (regions[i].size == 0U) {
    4844:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    4848:	eb08 0585 	add.w	r5, r8, r5, lsl #2
    484c:	686a      	ldr	r2, [r5, #4]
    484e:	2a00      	cmp	r2, #0
    4850:	d0f5      	beq.n	483e <mpu_configure_regions+0x22>
		if (do_sanity_check &&
    4852:	f1ba 0f00 	cmp.w	sl, #0
    4856:	d0e9      	beq.n	482c <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
    4858:	4628      	mov	r0, r5
    485a:	f008 fd36 	bl	d2ca <mpu_partition_is_valid>
		if (do_sanity_check &&
    485e:	2800      	cmp	r0, #0
    4860:	d1e4      	bne.n	482c <mpu_configure_regions+0x10>
    4862:	4b0b      	ldr	r3, [pc, #44]	; (4890 <mpu_configure_regions+0x74>)
    4864:	4a0b      	ldr	r2, [pc, #44]	; (4894 <mpu_configure_regions+0x78>)
    4866:	1a9b      	subs	r3, r3, r2
    4868:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Partition %u: sanity check failed.", i);
    486a:	f04f 0200 	mov.w	r2, #0
    486e:	2101      	movs	r1, #1
    4870:	f361 0202 	bfi	r2, r1, #0, #3
    4874:	f36f 02c5 	bfc	r2, #3, #3
    4878:	f363 128f 	bfi	r2, r3, #6, #10
    487c:	4621      	mov	r1, r4
    487e:	4806      	ldr	r0, [pc, #24]	; (4898 <mpu_configure_regions+0x7c>)
    4880:	f7fc ff10 	bl	16a4 <log_1>
			return -EINVAL;
    4884:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
    4888:	4630      	mov	r0, r6
    488a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    488e:	bf00      	nop
    4890:	0000ec6c 	.word	0x0000ec6c
    4894:	0000ec4c 	.word	0x0000ec4c
    4898:	0000f898 	.word	0x0000f898

0000489c <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    489c:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    489e:	4c03      	ldr	r4, [pc, #12]	; (48ac <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    48a0:	2301      	movs	r3, #1
    48a2:	7822      	ldrb	r2, [r4, #0]
    48a4:	f7ff ffba 	bl	481c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    48a8:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    48aa:	bd10      	pop	{r4, pc}
    48ac:	20002539 	.word	0x20002539

000048b0 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    48b0:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    48b2:	2300      	movs	r3, #0
    48b4:	4a08      	ldr	r2, [pc, #32]	; (48d8 <mpu_configure_dynamic_mpu_regions+0x28>)
    48b6:	7812      	ldrb	r2, [r2, #0]
    48b8:	f7ff ffb0 	bl	481c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    48bc:	f110 0f16 	cmn.w	r0, #22
    48c0:	d008      	beq.n	48d4 <mpu_configure_dynamic_mpu_regions+0x24>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    48c2:	4603      	mov	r3, r0
    48c4:	2b07      	cmp	r3, #7
    48c6:	dc05      	bgt.n	48d4 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    48c8:	4a04      	ldr	r2, [pc, #16]	; (48dc <mpu_configure_dynamic_mpu_regions+0x2c>)
    48ca:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    48cc:	2100      	movs	r1, #0
    48ce:	6111      	str	r1, [r2, #16]
    48d0:	3301      	adds	r3, #1
    48d2:	e7f7      	b.n	48c4 <mpu_configure_dynamic_mpu_regions+0x14>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    48d4:	bd08      	pop	{r3, pc}
    48d6:	bf00      	nop
    48d8:	20002539 	.word	0x20002539
    48dc:	e000ed90 	.word	0xe000ed90

000048e0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    48e0:	4b03      	ldr	r3, [pc, #12]	; (48f0 <arm_core_mpu_enable+0x10>)
    48e2:	2205      	movs	r2, #5
    48e4:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    48e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    48ea:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    48ee:	4770      	bx	lr
    48f0:	e000ed90 	.word	0xe000ed90

000048f4 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    48f4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    48f8:	4b01      	ldr	r3, [pc, #4]	; (4900 <arm_core_mpu_disable+0xc>)
    48fa:	2200      	movs	r2, #0
    48fc:	605a      	str	r2, [r3, #4]
}
    48fe:	4770      	bx	lr
    4900:	e000ed90 	.word	0xe000ed90

00004904 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    4904:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    4906:	4b0e      	ldr	r3, [pc, #56]	; (4940 <z_arm_mpu_init+0x3c>)
    4908:	681d      	ldr	r5, [r3, #0]
    490a:	2d08      	cmp	r5, #8
    490c:	d815      	bhi.n	493a <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    490e:	f7ff fff1 	bl	48f4 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4912:	2400      	movs	r4, #0
    4914:	42a5      	cmp	r5, r4
    4916:	d90a      	bls.n	492e <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    4918:	4b09      	ldr	r3, [pc, #36]	; (4940 <z_arm_mpu_init+0x3c>)
    491a:	6859      	ldr	r1, [r3, #4]
    491c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    4920:	0093      	lsls	r3, r2, #2
    4922:	4419      	add	r1, r3
    4924:	4620      	mov	r0, r4
    4926:	f7ff ff47 	bl	47b8 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    492a:	3401      	adds	r4, #1
    492c:	e7f2      	b.n	4914 <z_arm_mpu_init+0x10>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    492e:	4b05      	ldr	r3, [pc, #20]	; (4944 <z_arm_mpu_init+0x40>)
    4930:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    4932:	f7ff ffd5 	bl	48e0 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    4936:	2000      	movs	r0, #0
}
    4938:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    493a:	f04f 30ff 	mov.w	r0, #4294967295
    493e:	e7fb      	b.n	4938 <z_arm_mpu_init+0x34>
    4940:	0000f8cc 	.word	0x0000f8cc
    4944:	20002539 	.word	0x20002539

00004948 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    4948:	4b01      	ldr	r3, [pc, #4]	; (4950 <__stdout_hook_install+0x8>)
    494a:	6018      	str	r0, [r3, #0]
}
    494c:	4770      	bx	lr
    494e:	bf00      	nop
    4950:	20000100 	.word	0x20000100

00004954 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    4954:	f04f 0320 	mov.w	r3, #32
    4958:	f3ef 8211 	mrs	r2, BASEPRI
    495c:	f383 8812 	msr	BASEPRI_MAX, r3
    4960:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    4964:	2301      	movs	r3, #1
    4966:	4906      	ldr	r1, [pc, #24]	; (4980 <nordicsemi_nrf52_init+0x2c>)
    4968:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    496c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    4970:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    4974:	f382 8811 	msr	BASEPRI, r2
    4978:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    497c:	2000      	movs	r0, #0
    497e:	4770      	bx	lr
    4980:	4001e000 	.word	0x4001e000

00004984 <sys_arch_reboot>:
    *p_gpregret = val;
    4984:	b2c0      	uxtb	r0, r0
    4986:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    498a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    498e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4992:	4905      	ldr	r1, [pc, #20]	; (49a8 <sys_arch_reboot+0x24>)
    4994:	68ca      	ldr	r2, [r1, #12]
    4996:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    499a:	4b04      	ldr	r3, [pc, #16]	; (49ac <sys_arch_reboot+0x28>)
    499c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    499e:	60cb      	str	r3, [r1, #12]
    49a0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    49a4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    49a6:	e7fd      	b.n	49a4 <sys_arch_reboot+0x20>
    49a8:	e000ed00 	.word	0xe000ed00
    49ac:	05fa0004 	.word	0x05fa0004

000049b0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    49b0:	b130      	cbz	r0, 49c0 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    49b2:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    49b4:	0180      	lsls	r0, r0, #6
    49b6:	4b03      	ldr	r3, [pc, #12]	; (49c4 <arch_busy_wait+0x14>)
    49b8:	f043 0301 	orr.w	r3, r3, #1
    49bc:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    49be:	bd08      	pop	{r3, pc}
    49c0:	4770      	bx	lr
    49c2:	bf00      	nop
    49c4:	0000ed50 	.word	0x0000ed50

000049c8 <endpoint_ctx>:
	return (uint8_t)ep;
}

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);
    49c8:	f000 037f 	and.w	r3, r0, #127	; 0x7f

	if (NRF_USBD_EPIN_CHECK(ep)) {
    49cc:	b242      	sxtb	r2, r0
    49ce:	2a00      	cmp	r2, #0
    49d0:	db12      	blt.n	49f8 <endpoint_ctx+0x30>
			if (ep_num >= CFG_EPIN_CNT) {
				return false;
			}
		}
	} else {
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    49d2:	2b08      	cmp	r3, #8
    49d4:	d002      	beq.n	49dc <endpoint_ctx+0x14>
			if (CFG_EP_ISOOUT_CNT == 0) {
				return false;
			}
		} else {
			if (ep_num >= CFG_EPOUT_CNT) {
    49d6:	f010 0f78 	tst.w	r0, #120	; 0x78
    49da:	d11d      	bne.n	4a18 <endpoint_ctx+0x50>
	if (!ep_is_valid(ep)) {
		return NULL;
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);
    49dc:	f000 030f 	and.w	r3, r0, #15

	if (NRF_USBD_EPIN_CHECK(ep)) {
    49e0:	2a00      	cmp	r2, #0
    49e2:	db10      	blt.n	4a06 <endpoint_ctx+0x3e>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    49e4:	f010 0f08 	tst.w	r0, #8
    49e8:	d11a      	bne.n	4a20 <endpoint_ctx+0x58>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
					    CFG_EP_ISOIN_CNT +
    49ea:	3309      	adds	r3, #9
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    49ec:	015b      	lsls	r3, r3, #5
    49ee:	3348      	adds	r3, #72	; 0x48
    49f0:	480c      	ldr	r0, [pc, #48]	; (4a24 <endpoint_ctx+0x5c>)
    49f2:	4403      	add	r3, r0
    49f4:	1d18      	adds	r0, r3, #4
    49f6:	4770      	bx	lr
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    49f8:	2b08      	cmp	r3, #8
    49fa:	d0ef      	beq.n	49dc <endpoint_ctx+0x14>
			if (ep_num >= CFG_EPIN_CNT) {
    49fc:	f010 0f78 	tst.w	r0, #120	; 0x78
    4a00:	d0ec      	beq.n	49dc <endpoint_ctx+0x14>
		return NULL;
    4a02:	2000      	movs	r0, #0
    4a04:	4770      	bx	lr
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    4a06:	f010 0f08 	tst.w	r0, #8
    4a0a:	d107      	bne.n	4a1c <endpoint_ctx+0x54>
			return &ctx->ep_ctx[ep_num];
    4a0c:	015b      	lsls	r3, r3, #5
    4a0e:	3348      	adds	r3, #72	; 0x48
    4a10:	4804      	ldr	r0, [pc, #16]	; (4a24 <endpoint_ctx+0x5c>)
    4a12:	4403      	add	r3, r0
    4a14:	1d18      	adds	r0, r3, #4
    4a16:	4770      	bx	lr
		return NULL;
    4a18:	2000      	movs	r0, #0
    4a1a:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    4a1c:	4802      	ldr	r0, [pc, #8]	; (4a28 <endpoint_ctx+0x60>)
    4a1e:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    4a20:	4802      	ldr	r0, [pc, #8]	; (4a2c <endpoint_ctx+0x64>)
					    ep_num];
		}
	}

	return NULL;
}
    4a22:	4770      	bx	lr
    4a24:	20001a88 	.word	0x20001a88
    4a28:	20001bd4 	.word	0x20001bd4
    4a2c:	20001cf4 	.word	0x20001cf4

00004a30 <eps_ctx_init>:
 * Endpoint buffers are allocated during the first call of this function.
 * This function may also be called again on every USB reset event
 * to reinitialize the state of all endpoints.
 */
static int eps_ctx_init(void)
{
    4a30:	b510      	push	{r4, lr}
	struct nrf_usbd_ep_ctx *ep_ctx;
	uint32_t i;

	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    4a32:	2400      	movs	r4, #0
    4a34:	e005      	b.n	4a42 <eps_ctx_init+0x12>
		ep_ctx = in_endpoint_ctx(i);
    4a36:	b2e0      	uxtb	r0, r4
    4a38:	f008 fd16 	bl	d468 <in_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);
		ep_ctx_reset(ep_ctx);
    4a3c:	f008 fd1e 	bl	d47c <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    4a40:	3401      	adds	r4, #1
    4a42:	2c07      	cmp	r4, #7
    4a44:	d9f7      	bls.n	4a36 <eps_ctx_init+0x6>
	}

	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    4a46:	2400      	movs	r4, #0
    4a48:	e006      	b.n	4a58 <eps_ctx_init+0x28>
		ep_ctx = out_endpoint_ctx(i);
		__ASSERT_NO_MSG(ep_ctx);

		if (!ep_ctx->buf.block.data) {
			ep_ctx->buf.block.data = ep_out_bufs[i];
    4a4a:	4b10      	ldr	r3, [pc, #64]	; (4a8c <eps_ctx_init+0x5c>)
    4a4c:	eb03 1384 	add.w	r3, r3, r4, lsl #6
    4a50:	6103      	str	r3, [r0, #16]
		}

		ep_ctx_reset(ep_ctx);
    4a52:	f008 fd13 	bl	d47c <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    4a56:	3401      	adds	r4, #1
    4a58:	2c07      	cmp	r4, #7
    4a5a:	d806      	bhi.n	4a6a <eps_ctx_init+0x3a>
		ep_ctx = out_endpoint_ctx(i);
    4a5c:	b2e0      	uxtb	r0, r4
    4a5e:	f008 fd09 	bl	d474 <out_endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    4a62:	6903      	ldr	r3, [r0, #16]
    4a64:	2b00      	cmp	r3, #0
    4a66:	d1f4      	bne.n	4a52 <eps_ctx_init+0x22>
    4a68:	e7ef      	b.n	4a4a <eps_ctx_init+0x1a>
	}

	if (CFG_EP_ISOIN_CNT) {
		ep_ctx = in_endpoint_ctx(NRF_USBD_EPIN(8));
    4a6a:	2088      	movs	r0, #136	; 0x88
    4a6c:	f008 fcfc 	bl	d468 <in_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);
		ep_ctx_reset(ep_ctx);
    4a70:	f008 fd04 	bl	d47c <ep_ctx_reset>
	}

	if (CFG_EP_ISOOUT_CNT) {
		BUILD_ASSERT(CFG_EP_ISOOUT_CNT <= 1);

		ep_ctx = out_endpoint_ctx(NRF_USBD_EPOUT(8));
    4a74:	2008      	movs	r0, #8
    4a76:	f008 fcfd 	bl	d474 <out_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);

		if (!ep_ctx->buf.block.data) {
    4a7a:	6903      	ldr	r3, [r0, #16]
    4a7c:	b11b      	cbz	r3, 4a86 <eps_ctx_init+0x56>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
		}

		ep_ctx_reset(ep_ctx);
    4a7e:	f008 fcfd 	bl	d47c <ep_ctx_reset>
	}

	return 0;
}
    4a82:	2000      	movs	r0, #0
    4a84:	bd10      	pop	{r4, pc}
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
    4a86:	4b02      	ldr	r3, [pc, #8]	; (4a90 <eps_ctx_init+0x60>)
    4a88:	6103      	str	r3, [r0, #16]
    4a8a:	e7f8      	b.n	4a7e <eps_ctx_init+0x4e>
    4a8c:	20001888 	.word	0x20001888
    4a90:	20001488 	.word	0x20001488

00004a94 <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
    4a94:	b510      	push	{r4, lr}
    4a96:	b082      	sub	sp, #8
	};

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
    4a98:	480b      	ldr	r0, [pc, #44]	; (4ac8 <usb_init+0x34>)
    4a9a:	f003 fa5b 	bl	7f54 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);
    4a9e:	480b      	ldr	r0, [pc, #44]	; (4acc <usb_init+0x38>)
    4aa0:	f003 fa9c 	bl	7fdc <nrfx_power_usbevt_init>

	k_work_queue_start(&usbd_work_queue,
    4aa4:	2400      	movs	r4, #0
    4aa6:	9400      	str	r4, [sp, #0]
    4aa8:	f04f 33ff 	mov.w	r3, #4294967295
    4aac:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4ab0:	4907      	ldr	r1, [pc, #28]	; (4ad0 <usb_init+0x3c>)
    4ab2:	4808      	ldr	r0, [pc, #32]	; (4ad4 <usb_init+0x40>)
    4ab4:	f005 ffe4 	bl	aa80 <k_work_queue_start>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_work_init(&ctx->usb_work, usbd_work_handler);
    4ab8:	4907      	ldr	r1, [pc, #28]	; (4ad8 <usb_init+0x44>)
    4aba:	4808      	ldr	r0, [pc, #32]	; (4adc <usb_init+0x48>)
    4abc:	f009 fc3d 	bl	e33a <k_work_init>

	return 0;
}
    4ac0:	4620      	mov	r0, r4
    4ac2:	b002      	add	sp, #8
    4ac4:	bd10      	pop	{r4, pc}
    4ac6:	bf00      	nop
    4ac8:	0000fb10 	.word	0x0000fb10
    4acc:	0000fb14 	.word	0x0000fb14
    4ad0:	20002e40 	.word	0x20002e40
    4ad4:	20000588 	.word	0x20000588
    4ad8:	00004d55 	.word	0x00004d55
    4adc:	20001ab0 	.word	0x20001ab0

00004ae0 <submit_dc_power_event>:
{
    4ae0:	b530      	push	{r4, r5, lr}
    4ae2:	b083      	sub	sp, #12
    4ae4:	4605      	mov	r5, r0
	if (k_mem_slab_alloc(&fifo_elem_slab,
    4ae6:	2200      	movs	r2, #0
    4ae8:	2300      	movs	r3, #0
    4aea:	a901      	add	r1, sp, #4
    4aec:	482e      	ldr	r0, [pc, #184]	; (4ba8 <submit_dc_power_event+0xc8>)
    4aee:	f005 fc0b 	bl	a308 <k_mem_slab_alloc>
    4af2:	b980      	cbnz	r0, 4b16 <submit_dc_power_event+0x36>
	ev = (struct usbd_event *)block.data;
    4af4:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    4af6:	6064      	str	r4, [r4, #4]
	if (!ev) {
    4af8:	b15c      	cbz	r4, 4b12 <submit_dc_power_event+0x32>
	ev->evt_type = USBD_EVT_POWER;
    4afa:	2300      	movs	r3, #0
    4afc:	7423      	strb	r3, [r4, #16]
	ev->evt.pwr_evt.state = state;
    4afe:	7225      	strb	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    4b00:	4621      	mov	r1, r4
    4b02:	482a      	ldr	r0, [pc, #168]	; (4bac <submit_dc_power_event+0xcc>)
    4b04:	f009 fbfe 	bl	e304 <k_queue_append>
	if (usbd_ctx.attached) {
    4b08:	4b29      	ldr	r3, [pc, #164]	; (4bb0 <submit_dc_power_event+0xd0>)
    4b0a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    4b0e:	2b00      	cmp	r3, #0
    4b10:	d144      	bne.n	4b9c <submit_dc_power_event+0xbc>
}
    4b12:	b003      	add	sp, #12
    4b14:	bd30      	pop	{r4, r5, pc}
    4b16:	4b27      	ldr	r3, [pc, #156]	; (4bb4 <submit_dc_power_event+0xd4>)
    4b18:	4a27      	ldr	r2, [pc, #156]	; (4bb8 <submit_dc_power_event+0xd8>)
    4b1a:	1a9b      	subs	r3, r3, r2
    4b1c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    4b1e:	f04f 0100 	mov.w	r1, #0
    4b22:	2201      	movs	r2, #1
    4b24:	f362 0102 	bfi	r1, r2, #0, #3
    4b28:	f36f 01c5 	bfc	r1, #3, #3
    4b2c:	f363 118f 	bfi	r1, r3, #6, #10
    4b30:	4822      	ldr	r0, [pc, #136]	; (4bbc <submit_dc_power_event+0xdc>)
    4b32:	f7fc fe29 	bl	1788 <log_0>
static inline void usbd_evt_flush(void)
    4b36:	e004      	b.n	4b42 <submit_dc_power_event+0x62>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4b38:	1d01      	adds	r1, r0, #4
    4b3a:	481b      	ldr	r0, [pc, #108]	; (4ba8 <submit_dc_power_event+0xc8>)
    4b3c:	f009 facb 	bl	e0d6 <k_mem_slab_free>
	} while (ev != NULL);
    4b40:	b144      	cbz	r4, 4b54 <submit_dc_power_event+0x74>
	return z_impl_k_queue_get(queue, timeout);
    4b42:	2200      	movs	r2, #0
    4b44:	2300      	movs	r3, #0
    4b46:	4819      	ldr	r0, [pc, #100]	; (4bac <submit_dc_power_event+0xcc>)
    4b48:	f005 fdf0 	bl	a72c <z_impl_k_queue_get>
		if (ev) {
    4b4c:	4604      	mov	r4, r0
    4b4e:	2800      	cmp	r0, #0
    4b50:	d1f2      	bne.n	4b38 <submit_dc_power_event+0x58>
    4b52:	e7f5      	b.n	4b40 <submit_dc_power_event+0x60>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    4b54:	2200      	movs	r2, #0
    4b56:	2300      	movs	r3, #0
    4b58:	a901      	add	r1, sp, #4
    4b5a:	4813      	ldr	r0, [pc, #76]	; (4ba8 <submit_dc_power_event+0xc8>)
    4b5c:	f005 fbd4 	bl	a308 <k_mem_slab_alloc>
    4b60:	b180      	cbz	r0, 4b84 <submit_dc_power_event+0xa4>
    4b62:	4b14      	ldr	r3, [pc, #80]	; (4bb4 <submit_dc_power_event+0xd4>)
    4b64:	4a14      	ldr	r2, [pc, #80]	; (4bb8 <submit_dc_power_event+0xd8>)
    4b66:	1a9b      	subs	r3, r3, r2
    4b68:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    4b6a:	f04f 0100 	mov.w	r1, #0
    4b6e:	2201      	movs	r2, #1
    4b70:	f362 0102 	bfi	r1, r2, #0, #3
    4b74:	f36f 01c5 	bfc	r1, #3, #3
    4b78:	f363 118f 	bfi	r1, r3, #6, #10
    4b7c:	4810      	ldr	r0, [pc, #64]	; (4bc0 <submit_dc_power_event+0xe0>)
    4b7e:	f7fc fe03 	bl	1788 <log_0>
			return NULL;
    4b82:	e7b9      	b.n	4af8 <submit_dc_power_event+0x18>
		ev = (struct usbd_event *)block.data;
    4b84:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    4b86:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    4b88:	2304      	movs	r3, #4
    4b8a:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    4b8c:	4807      	ldr	r0, [pc, #28]	; (4bac <submit_dc_power_event+0xcc>)
    4b8e:	f009 fbb9 	bl	e304 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    4b92:	490c      	ldr	r1, [pc, #48]	; (4bc4 <submit_dc_power_event+0xe4>)
    4b94:	480c      	ldr	r0, [pc, #48]	; (4bc8 <submit_dc_power_event+0xe8>)
    4b96:	f009 fbd6 	bl	e346 <k_work_submit_to_queue>
		return NULL;
    4b9a:	e7ad      	b.n	4af8 <submit_dc_power_event+0x18>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    4b9c:	4909      	ldr	r1, [pc, #36]	; (4bc4 <submit_dc_power_event+0xe4>)
    4b9e:	480a      	ldr	r0, [pc, #40]	; (4bc8 <submit_dc_power_event+0xe8>)
    4ba0:	f009 fbd1 	bl	e346 <k_work_submit_to_queue>
}
    4ba4:	e7b5      	b.n	4b12 <submit_dc_power_event+0x32>
    4ba6:	bf00      	nop
    4ba8:	20000234 	.word	0x20000234
    4bac:	200002d8 	.word	0x200002d8
    4bb0:	20001a88 	.word	0x20001a88
    4bb4:	0000ecac 	.word	0x0000ecac
    4bb8:	0000ec4c 	.word	0x0000ec4c
    4bbc:	0000f8f0 	.word	0x0000f8f0
    4bc0:	0000f910 	.word	0x0000f910
    4bc4:	20001ab0 	.word	0x20001ab0
    4bc8:	20000588 	.word	0x20000588

00004bcc <usb_dc_power_event_handler>:
{
    4bcc:	b508      	push	{r3, lr}
	switch (event) {
    4bce:	2801      	cmp	r0, #1
    4bd0:	d014      	beq.n	4bfc <usb_dc_power_event_handler+0x30>
    4bd2:	2802      	cmp	r0, #2
    4bd4:	d015      	beq.n	4c02 <usb_dc_power_event_handler+0x36>
    4bd6:	b198      	cbz	r0, 4c00 <usb_dc_power_event_handler+0x34>
    4bd8:	4b0b      	ldr	r3, [pc, #44]	; (4c08 <usb_dc_power_event_handler+0x3c>)
    4bda:	4a0c      	ldr	r2, [pc, #48]	; (4c0c <usb_dc_power_event_handler+0x40>)
    4bdc:	1a9b      	subs	r3, r3, r2
    4bde:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unknown USB power event %d", event);
    4be0:	f04f 0200 	mov.w	r2, #0
    4be4:	2101      	movs	r1, #1
    4be6:	f361 0202 	bfi	r2, r1, #0, #3
    4bea:	f36f 02c5 	bfc	r2, #3, #3
    4bee:	f363 128f 	bfi	r2, r3, #6, #10
    4bf2:	4601      	mov	r1, r0
    4bf4:	4806      	ldr	r0, [pc, #24]	; (4c10 <usb_dc_power_event_handler+0x44>)
    4bf6:	f7fc fd55 	bl	16a4 <log_1>
    4bfa:	e004      	b.n	4c06 <usb_dc_power_event_handler+0x3a>
		new_state = USBD_DETACHED;
    4bfc:	2000      	movs	r0, #0
    4bfe:	e000      	b.n	4c02 <usb_dc_power_event_handler+0x36>
	switch (event) {
    4c00:	2001      	movs	r0, #1
	submit_dc_power_event(new_state);
    4c02:	f7ff ff6d 	bl	4ae0 <submit_dc_power_event>
}
    4c06:	bd08      	pop	{r3, pc}
    4c08:	0000ecac 	.word	0x0000ecac
    4c0c:	0000ec4c 	.word	0x0000ec4c
    4c10:	0000f92c 	.word	0x0000f92c

00004c14 <usbd_sof_trigger_iso_read>:
{
    4c14:	b530      	push	{r4, r5, lr}
    4c16:	b083      	sub	sp, #12
	ep_ctx = endpoint_ctx(NRFX_USBD_EPOUT8);
    4c18:	2008      	movs	r0, #8
    4c1a:	f7ff fed5 	bl	49c8 <endpoint_ctx>
	if (!ep_ctx) {
    4c1e:	b120      	cbz	r0, 4c2a <usbd_sof_trigger_iso_read+0x16>
    4c20:	4605      	mov	r5, r0
	if (ep_ctx->cfg.en) {
    4c22:	7a03      	ldrb	r3, [r0, #8]
    4c24:	b993      	cbnz	r3, 4c4c <usbd_sof_trigger_iso_read+0x38>
}
    4c26:	b003      	add	sp, #12
    4c28:	bd30      	pop	{r4, r5, pc}
    4c2a:	4b40      	ldr	r3, [pc, #256]	; (4d2c <usbd_sof_trigger_iso_read+0x118>)
    4c2c:	4a40      	ldr	r2, [pc, #256]	; (4d30 <usbd_sof_trigger_iso_read+0x11c>)
    4c2e:	1a9b      	subs	r3, r3, r2
    4c30:	08db      	lsrs	r3, r3, #3
		LOG_ERR("There is no ISO ep");
    4c32:	f04f 0100 	mov.w	r1, #0
    4c36:	2201      	movs	r2, #1
    4c38:	f362 0102 	bfi	r1, r2, #0, #3
    4c3c:	f36f 01c5 	bfc	r1, #3, #3
    4c40:	f363 118f 	bfi	r1, r3, #6, #10
    4c44:	483b      	ldr	r0, [pc, #236]	; (4d34 <usbd_sof_trigger_iso_read+0x120>)
    4c46:	f7fc fd9f 	bl	1788 <log_0>
		return;
    4c4a:	e7ec      	b.n	4c26 <usbd_sof_trigger_iso_read+0x12>
		ep_ctx->read_pending = true;
    4c4c:	2301      	movs	r3, #1
    4c4e:	7743      	strb	r3, [r0, #29]
		ep_ctx->read_complete = true;
    4c50:	7703      	strb	r3, [r0, #28]
	if (k_mem_slab_alloc(&fifo_elem_slab,
    4c52:	2200      	movs	r2, #0
    4c54:	2300      	movs	r3, #0
    4c56:	a901      	add	r1, sp, #4
    4c58:	4837      	ldr	r0, [pc, #220]	; (4d38 <usbd_sof_trigger_iso_read+0x124>)
    4c5a:	f005 fb55 	bl	a308 <k_mem_slab_alloc>
    4c5e:	b980      	cbnz	r0, 4c82 <usbd_sof_trigger_iso_read+0x6e>
	ev = (struct usbd_event *)block.data;
    4c60:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    4c62:	6064      	str	r4, [r4, #4]
		if (!ev) {
    4c64:	2c00      	cmp	r4, #0
    4c66:	d04f      	beq.n	4d08 <usbd_sof_trigger_iso_read+0xf4>
		ev->evt_type = USBD_EVT_EP;
    4c68:	2301      	movs	r3, #1
    4c6a:	7423      	strb	r3, [r4, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    4c6c:	7323      	strb	r3, [r4, #12]
		ev->evt.ep_evt.ep = ep_ctx;
    4c6e:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    4c70:	4621      	mov	r1, r4
    4c72:	4832      	ldr	r0, [pc, #200]	; (4d3c <usbd_sof_trigger_iso_read+0x128>)
    4c74:	f009 fb46 	bl	e304 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    4c78:	4931      	ldr	r1, [pc, #196]	; (4d40 <usbd_sof_trigger_iso_read+0x12c>)
    4c7a:	4832      	ldr	r0, [pc, #200]	; (4d44 <usbd_sof_trigger_iso_read+0x130>)
    4c7c:	f009 fb63 	bl	e346 <k_work_submit_to_queue>
}
    4c80:	e7d1      	b.n	4c26 <usbd_sof_trigger_iso_read+0x12>
    4c82:	4b2a      	ldr	r3, [pc, #168]	; (4d2c <usbd_sof_trigger_iso_read+0x118>)
    4c84:	4a2a      	ldr	r2, [pc, #168]	; (4d30 <usbd_sof_trigger_iso_read+0x11c>)
    4c86:	1a9b      	subs	r3, r3, r2
    4c88:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    4c8a:	f04f 0100 	mov.w	r1, #0
    4c8e:	2201      	movs	r2, #1
    4c90:	f362 0102 	bfi	r1, r2, #0, #3
    4c94:	f36f 01c5 	bfc	r1, #3, #3
    4c98:	f363 118f 	bfi	r1, r3, #6, #10
    4c9c:	482a      	ldr	r0, [pc, #168]	; (4d48 <usbd_sof_trigger_iso_read+0x134>)
    4c9e:	f7fc fd73 	bl	1788 <log_0>
static inline void usbd_evt_flush(void)
    4ca2:	e000      	b.n	4ca6 <usbd_sof_trigger_iso_read+0x92>
	} while (ev != NULL);
    4ca4:	b164      	cbz	r4, 4cc0 <usbd_sof_trigger_iso_read+0xac>
    4ca6:	2200      	movs	r2, #0
    4ca8:	2300      	movs	r3, #0
    4caa:	4824      	ldr	r0, [pc, #144]	; (4d3c <usbd_sof_trigger_iso_read+0x128>)
    4cac:	f005 fd3e 	bl	a72c <z_impl_k_queue_get>
		if (ev) {
    4cb0:	4604      	mov	r4, r0
    4cb2:	2800      	cmp	r0, #0
    4cb4:	d0f6      	beq.n	4ca4 <usbd_sof_trigger_iso_read+0x90>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4cb6:	1d01      	adds	r1, r0, #4
    4cb8:	481f      	ldr	r0, [pc, #124]	; (4d38 <usbd_sof_trigger_iso_read+0x124>)
    4cba:	f009 fa0c 	bl	e0d6 <k_mem_slab_free>
}
    4cbe:	e7f1      	b.n	4ca4 <usbd_sof_trigger_iso_read+0x90>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    4cc0:	2200      	movs	r2, #0
    4cc2:	2300      	movs	r3, #0
    4cc4:	a901      	add	r1, sp, #4
    4cc6:	481c      	ldr	r0, [pc, #112]	; (4d38 <usbd_sof_trigger_iso_read+0x124>)
    4cc8:	f005 fb1e 	bl	a308 <k_mem_slab_alloc>
    4ccc:	b180      	cbz	r0, 4cf0 <usbd_sof_trigger_iso_read+0xdc>
    4cce:	4b17      	ldr	r3, [pc, #92]	; (4d2c <usbd_sof_trigger_iso_read+0x118>)
    4cd0:	4a17      	ldr	r2, [pc, #92]	; (4d30 <usbd_sof_trigger_iso_read+0x11c>)
    4cd2:	1a9b      	subs	r3, r3, r2
    4cd4:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    4cd6:	f04f 0100 	mov.w	r1, #0
    4cda:	2201      	movs	r2, #1
    4cdc:	f362 0102 	bfi	r1, r2, #0, #3
    4ce0:	f36f 01c5 	bfc	r1, #3, #3
    4ce4:	f363 118f 	bfi	r1, r3, #6, #10
    4ce8:	4818      	ldr	r0, [pc, #96]	; (4d4c <usbd_sof_trigger_iso_read+0x138>)
    4cea:	f7fc fd4d 	bl	1788 <log_0>
			return NULL;
    4cee:	e7b9      	b.n	4c64 <usbd_sof_trigger_iso_read+0x50>
		ev = (struct usbd_event *)block.data;
    4cf0:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    4cf2:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    4cf4:	2304      	movs	r3, #4
    4cf6:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    4cf8:	4810      	ldr	r0, [pc, #64]	; (4d3c <usbd_sof_trigger_iso_read+0x128>)
    4cfa:	f009 fb03 	bl	e304 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    4cfe:	4910      	ldr	r1, [pc, #64]	; (4d40 <usbd_sof_trigger_iso_read+0x12c>)
    4d00:	4810      	ldr	r0, [pc, #64]	; (4d44 <usbd_sof_trigger_iso_read+0x130>)
    4d02:	f009 fb20 	bl	e346 <k_work_submit_to_queue>
		return NULL;
    4d06:	e7ad      	b.n	4c64 <usbd_sof_trigger_iso_read+0x50>
    4d08:	4b08      	ldr	r3, [pc, #32]	; (4d2c <usbd_sof_trigger_iso_read+0x118>)
    4d0a:	4a09      	ldr	r2, [pc, #36]	; (4d30 <usbd_sof_trigger_iso_read+0x11c>)
    4d0c:	1a9b      	subs	r3, r3, r2
    4d0e:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Failed to alloc evt");
    4d10:	f04f 0100 	mov.w	r1, #0
    4d14:	2201      	movs	r2, #1
    4d16:	f362 0102 	bfi	r1, r2, #0, #3
    4d1a:	f36f 01c5 	bfc	r1, #3, #3
    4d1e:	f363 118f 	bfi	r1, r3, #6, #10
    4d22:	480b      	ldr	r0, [pc, #44]	; (4d50 <usbd_sof_trigger_iso_read+0x13c>)
    4d24:	f7fc fd30 	bl	1788 <log_0>
			return;
    4d28:	e77d      	b.n	4c26 <usbd_sof_trigger_iso_read+0x12>
    4d2a:	bf00      	nop
    4d2c:	0000ecac 	.word	0x0000ecac
    4d30:	0000ec4c 	.word	0x0000ec4c
    4d34:	0000f948 	.word	0x0000f948
    4d38:	20000234 	.word	0x20000234
    4d3c:	200002d8 	.word	0x200002d8
    4d40:	20001ab0 	.word	0x20001ab0
    4d44:	20000588 	.word	0x20000588
    4d48:	0000f8f0 	.word	0x0000f8f0
    4d4c:	0000f910 	.word	0x0000f910
    4d50:	0000f95c 	.word	0x0000f95c

00004d54 <usbd_work_handler>:
{
    4d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4d58:	b085      	sub	sp, #20
    4d5a:	4605      	mov	r5, r0
	while ((ev = usbd_evt_get()) != NULL) {
    4d5c:	e18f      	b.n	507e <usbd_work_handler+0x32a>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4d5e:	1d21      	adds	r1, r4, #4
    4d60:	48b5      	ldr	r0, [pc, #724]	; (5038 <usbd_work_handler+0x2e4>)
    4d62:	f009 f9b8 	bl	e0d6 <k_mem_slab_free>
			continue;
    4d66:	e18a      	b.n	507e <usbd_work_handler+0x32a>
			if (!ctx->attached) {
    4d68:	f815 3c04 	ldrb.w	r3, [r5, #-4]
    4d6c:	b14b      	cbz	r3, 4d82 <usbd_work_handler+0x2e>
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    4d6e:	f8d4 a008 	ldr.w	sl, [r4, #8]
	switch (ep_evt->evt_type) {
    4d72:	7b23      	ldrb	r3, [r4, #12]
    4d74:	2b03      	cmp	r3, #3
    4d76:	f200 817e 	bhi.w	5076 <usbd_work_handler+0x322>
    4d7a:	e8df f003 	tbb	[pc, r3]
    4d7e:	6114      	.short	0x6114
    4d80:	a49d      	.short	0xa49d
    4d82:	4bae      	ldr	r3, [pc, #696]	; (503c <usbd_work_handler+0x2e8>)
    4d84:	4aae      	ldr	r2, [pc, #696]	; (5040 <usbd_work_handler+0x2ec>)
    4d86:	1a9b      	subs	r3, r3, r2
    4d88:	08db      	lsrs	r3, r3, #3
				LOG_ERR("not attached, EP 0x%02x event dropped",
    4d8a:	2201      	movs	r2, #1
    4d8c:	f362 0702 	bfi	r7, r2, #0, #3
    4d90:	f36f 07c5 	bfc	r7, #3, #3
    4d94:	f363 178f 	bfi	r7, r3, #6, #10
    4d98:	68a3      	ldr	r3, [r4, #8]
    4d9a:	463a      	mov	r2, r7
    4d9c:	7a59      	ldrb	r1, [r3, #9]
    4d9e:	48a9      	ldr	r0, [pc, #676]	; (5044 <usbd_work_handler+0x2f0>)
    4da0:	f7fc fc80 	bl	16a4 <log_1>
    4da4:	e7e3      	b.n	4d6e <usbd_work_handler+0x1a>
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    4da6:	f8da b014 	ldr.w	fp, [sl, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
    4daa:	2208      	movs	r2, #8
    4dac:	2100      	movs	r1, #0
    4dae:	4658      	mov	r0, fp
    4db0:	f008 fb1c 	bl	d3ec <memset>
    return ret;
}

NRF_STATIC_INLINE uint8_t nrf_usbd_setup_bmrequesttype_get(NRF_USBD_Type const * p_reg)
{
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    4db4:	4ba4      	ldr	r3, [pc, #656]	; (5048 <usbd_work_handler+0x2f4>)
    4db6:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
	usbd_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    4dba:	f88b 2000 	strb.w	r2, [fp]
}

NRF_STATIC_INLINE uint8_t nrf_usbd_setup_brequest_get(NRF_USBD_Type const * p_reg)
{
    return (uint8_t)(p_reg->BREQUEST);
    4dbe:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
	usbd_setup->bRequest = nrf_usbd_setup_brequest_get(NRF_USBD);
    4dc2:	f88b 2001 	strb.w	r2, [fp, #1]
}

NRF_STATIC_INLINE uint16_t nrf_usbd_setup_wvalue_get(NRF_USBD_Type const * p_reg)
{
    const uint16_t val = p_reg->WVALUEL;
    4dc6:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    4dca:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    4dcc:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    4dd0:	0209      	lsls	r1, r1, #8
    4dd2:	b289      	uxth	r1, r1
    4dd4:	430a      	orrs	r2, r1
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
    4dd6:	f8ab 2002 	strh.w	r2, [fp, #2]
}

NRF_STATIC_INLINE uint16_t nrf_usbd_setup_windex_get(NRF_USBD_Type const * p_reg)
{
    const uint16_t val = p_reg->WINDEXL;
    4dda:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    4dde:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    4de0:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    4de4:	0209      	lsls	r1, r1, #8
    4de6:	b289      	uxth	r1, r1
    4de8:	430a      	orrs	r2, r1
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
    4dea:	f8ab 2004 	strh.w	r2, [fp, #4]
}

NRF_STATIC_INLINE uint16_t nrf_usbd_setup_wlength_get(NRF_USBD_Type const * p_reg)
{
    const uint16_t val = p_reg->WLENGTHL;
    4dee:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    4df2:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    4df4:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    4df8:	021b      	lsls	r3, r3, #8
    4dfa:	b29b      	uxth	r3, r3
    4dfc:	4313      	orrs	r3, r2
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
    4dfe:	f8ab 3006 	strh.w	r3, [fp, #6]
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    4e02:	2208      	movs	r2, #8
    4e04:	f8ca 200c 	str.w	r2, [sl, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    4e08:	4659      	mov	r1, fp
    4e0a:	4890      	ldr	r0, [pc, #576]	; (504c <usbd_work_handler+0x2f8>)
    4e0c:	f008 faca 	bl	d3a4 <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    4e10:	f8da 3000 	ldr.w	r3, [sl]
    4e14:	2100      	movs	r1, #0
    4e16:	f89a 0009 	ldrb.w	r0, [sl, #9]
    4e1a:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
    4e1c:	f99b 3000 	ldrsb.w	r3, [fp]
    4e20:	2b00      	cmp	r3, #0
    4e22:	db02      	blt.n	4e2a <usbd_work_handler+0xd6>
    4e24:	f8bb 3006 	ldrh.w	r3, [fp, #6]
    4e28:	b923      	cbnz	r3, 4e34 <usbd_work_handler+0xe0>
		ctx->ctrl_read_len = 0U;
    4e2a:	4b89      	ldr	r3, [pc, #548]	; (5050 <usbd_work_handler+0x2fc>)
    4e2c:	2200      	movs	r2, #0
    4e2e:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
}
    4e32:	e120      	b.n	5076 <usbd_work_handler+0x322>
		ctx->ctrl_read_len = usbd_setup->wLength;
    4e34:	4a86      	ldr	r2, [pc, #536]	; (5050 <usbd_work_handler+0x2fc>)
    4e36:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
    4e3a:	f004 fb5f 	bl	94fc <nrfx_usbd_setup_data_clear>
    4e3e:	e11a      	b.n	5076 <usbd_work_handler+0x322>
	if (!ep_ctx->read_pending) {
    4e40:	f89a 301d 	ldrb.w	r3, [sl, #29]
    4e44:	2b00      	cmp	r3, #0
    4e46:	f000 8116 	beq.w	5076 <usbd_work_handler+0x322>
	if (!ep_ctx->read_complete) {
    4e4a:	f89a 301c 	ldrb.w	r3, [sl, #28]
    4e4e:	2b00      	cmp	r3, #0
    4e50:	f000 8111 	beq.w	5076 <usbd_work_handler+0x322>
	ep_ctx->read_pending = false;
    4e54:	f04f 0b00 	mov.w	fp, #0
    4e58:	f88a b01d 	strb.w	fp, [sl, #29]
	ep_ctx->read_complete = false;
    4e5c:	f88a b01c 	strb.w	fp, [sl, #28]
	return z_impl_k_mutex_lock(mutex, timeout);
    4e60:	f04f 32ff 	mov.w	r2, #4294967295
    4e64:	f04f 33ff 	mov.w	r3, #4294967295
    4e68:	487a      	ldr	r0, [pc, #488]	; (5054 <usbd_work_handler+0x300>)
    4e6a:	f005 fb91 	bl	a590 <z_impl_k_mutex_lock>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    4e6e:	f8da 3014 	ldr.w	r3, [sl, #20]
    4e72:	9301      	str	r3, [sp, #4]
    4e74:	f8da 3004 	ldr.w	r3, [sl, #4]
    4e78:	9302      	str	r3, [sp, #8]
    4e7a:	f8cd b00c 	str.w	fp, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    4e7e:	a901      	add	r1, sp, #4
    4e80:	f89a 0009 	ldrb.w	r0, [sl, #9]
    4e84:	f003 feee 	bl	8c64 <nrfx_usbd_ep_transfer>
    4e88:	4601      	mov	r1, r0
	if (err != NRFX_SUCCESS) {
    4e8a:	4b73      	ldr	r3, [pc, #460]	; (5058 <usbd_work_handler+0x304>)
    4e8c:	4298      	cmp	r0, r3
    4e8e:	d103      	bne.n	4e98 <usbd_work_handler+0x144>
	return z_impl_k_mutex_unlock(mutex);
    4e90:	4870      	ldr	r0, [pc, #448]	; (5054 <usbd_work_handler+0x300>)
    4e92:	f005 fc07 	bl	a6a4 <z_impl_k_mutex_unlock>
    4e96:	e0ee      	b.n	5076 <usbd_work_handler+0x322>
    4e98:	4b68      	ldr	r3, [pc, #416]	; (503c <usbd_work_handler+0x2e8>)
    4e9a:	4a69      	ldr	r2, [pc, #420]	; (5040 <usbd_work_handler+0x2ec>)
    4e9c:	1a9b      	subs	r3, r3, r2
    4e9e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("nRF USBD transfer error (OUT): 0x%02x", err);
    4ea0:	2201      	movs	r2, #1
    4ea2:	f362 0802 	bfi	r8, r2, #0, #3
    4ea6:	f36f 08c5 	bfc	r8, #3, #3
    4eaa:	f363 188f 	bfi	r8, r3, #6, #10
    4eae:	4642      	mov	r2, r8
    4eb0:	486a      	ldr	r0, [pc, #424]	; (505c <usbd_work_handler+0x308>)
    4eb2:	f7fc fbf7 	bl	16a4 <log_1>
    4eb6:	e7eb      	b.n	4e90 <usbd_work_handler+0x13c>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    4eb8:	f8da 3000 	ldr.w	r3, [sl]
    4ebc:	2101      	movs	r1, #1
    4ebe:	f89a 0009 	ldrb.w	r0, [sl, #9]
    4ec2:	4798      	blx	r3
		break;
    4ec4:	e0d7      	b.n	5076 <usbd_work_handler+0x322>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    4ec6:	f89a 300a 	ldrb.w	r3, [sl, #10]
    4eca:	b913      	cbnz	r3, 4ed2 <usbd_work_handler+0x17e>
		    !ep_ctx->trans_zlp) {
    4ecc:	f89a 301f 	ldrb.w	r3, [sl, #31]
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    4ed0:	b133      	cbz	r3, 4ee0 <usbd_work_handler+0x18c>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    4ed2:	f8da 3000 	ldr.w	r3, [sl]
    4ed6:	2102      	movs	r1, #2
    4ed8:	f89a 0009 	ldrb.w	r0, [sl, #9]
    4edc:	4798      	blx	r3
}
    4ede:	e0ca      	b.n	5076 <usbd_work_handler+0x322>
	return z_impl_k_mutex_lock(mutex, timeout);
    4ee0:	f8df b170 	ldr.w	fp, [pc, #368]	; 5054 <usbd_work_handler+0x300>
    4ee4:	f04f 32ff 	mov.w	r2, #4294967295
    4ee8:	f04f 33ff 	mov.w	r3, #4294967295
    4eec:	4658      	mov	r0, fp
    4eee:	f005 fb4f 	bl	a590 <z_impl_k_mutex_lock>
			nrfx_usbd_setup_clear();
    4ef2:	f004 fb55 	bl	95a0 <nrfx_usbd_setup_clear>
	return z_impl_k_mutex_unlock(mutex);
    4ef6:	4658      	mov	r0, fp
    4ef8:	f005 fbd4 	bl	a6a4 <z_impl_k_mutex_unlock>
    4efc:	e7e9      	b.n	4ed2 <usbd_work_handler+0x17e>
	switch (pwr_evt->state) {
    4efe:	7a23      	ldrb	r3, [r4, #8]
    4f00:	2b04      	cmp	r3, #4
    4f02:	f200 80b8 	bhi.w	5076 <usbd_work_handler+0x322>
    4f06:	e8df f003 	tbb	[pc, r3]
    4f0a:	0322      	.short	0x0322
    4f0c:	350e      	.short	0x350e
    4f0e:	44          	.byte	0x44
    4f0f:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
    4f10:	f003 fe36 	bl	8b80 <nrfx_usbd_is_enabled>
    4f14:	2800      	cmp	r0, #0
    4f16:	f040 80ae 	bne.w	5076 <usbd_work_handler+0x322>
			nrfx_usbd_enable();
    4f1a:	f003 fd7b 	bl	8a14 <nrfx_usbd_enable>
			err = hfxo_start(ctx);
    4f1e:	484c      	ldr	r0, [pc, #304]	; (5050 <usbd_work_handler+0x2fc>)
    4f20:	f008 fb13 	bl	d54a <hfxo_start>
    4f24:	e0a7      	b.n	5076 <usbd_work_handler+0x322>
		usbd_enable_endpoints(ctx);
    4f26:	f8df a128 	ldr.w	sl, [pc, #296]	; 5050 <usbd_work_handler+0x2fc>
    4f2a:	4650      	mov	r0, sl
    4f2c:	f008 fadb 	bl	d4e6 <usbd_enable_endpoints>
		nrfx_usbd_start(true);
    4f30:	2001      	movs	r0, #1
    4f32:	f003 fe09 	bl	8b48 <nrfx_usbd_start>
		ctx->ready = true;
    4f36:	2301      	movs	r3, #1
    4f38:	f88a 3025 	strb.w	r3, [sl, #37]	; 0x25
		if (ctx->status_cb) {
    4f3c:	f8da 3000 	ldr.w	r3, [sl]
    4f40:	2b00      	cmp	r3, #0
    4f42:	f000 8098 	beq.w	5076 <usbd_work_handler+0x322>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    4f46:	2100      	movs	r1, #0
    4f48:	2002      	movs	r0, #2
    4f4a:	4798      	blx	r3
    4f4c:	e093      	b.n	5076 <usbd_work_handler+0x322>
		ctx->ready = false;
    4f4e:	f8df a100 	ldr.w	sl, [pc, #256]	; 5050 <usbd_work_handler+0x2fc>
    4f52:	2300      	movs	r3, #0
    4f54:	f88a 3025 	strb.w	r3, [sl, #37]	; 0x25
		nrfx_usbd_disable();
    4f58:	f004 fdc0 	bl	9adc <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
    4f5c:	4650      	mov	r0, sl
    4f5e:	f008 faa1 	bl	d4a4 <hfxo_stop>
		if (ctx->status_cb) {
    4f62:	f8da 3000 	ldr.w	r3, [sl]
    4f66:	2b00      	cmp	r3, #0
    4f68:	f000 8085 	beq.w	5076 <usbd_work_handler+0x322>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    4f6c:	2100      	movs	r1, #0
    4f6e:	2004      	movs	r0, #4
    4f70:	4798      	blx	r3
    4f72:	e080      	b.n	5076 <usbd_work_handler+0x322>
	return get_usbd_ctx()->ready;
    4f74:	4b36      	ldr	r3, [pc, #216]	; (5050 <usbd_work_handler+0x2fc>)
    4f76:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		if (dev_ready()) {
    4f7a:	2b00      	cmp	r3, #0
    4f7c:	d07b      	beq.n	5076 <usbd_work_handler+0x322>
			nrfx_usbd_suspend();
    4f7e:	f004 fdcf 	bl	9b20 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    4f82:	4b33      	ldr	r3, [pc, #204]	; (5050 <usbd_work_handler+0x2fc>)
    4f84:	681b      	ldr	r3, [r3, #0]
    4f86:	2b00      	cmp	r3, #0
    4f88:	d075      	beq.n	5076 <usbd_work_handler+0x322>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    4f8a:	2100      	movs	r1, #0
    4f8c:	2005      	movs	r0, #5
    4f8e:	4798      	blx	r3
    4f90:	e071      	b.n	5076 <usbd_work_handler+0x322>
		if (ctx->status_cb && dev_ready()) {
    4f92:	4b2f      	ldr	r3, [pc, #188]	; (5050 <usbd_work_handler+0x2fc>)
    4f94:	681b      	ldr	r3, [r3, #0]
    4f96:	2b00      	cmp	r3, #0
    4f98:	d06d      	beq.n	5076 <usbd_work_handler+0x322>
	return get_usbd_ctx()->ready;
    4f9a:	4a2d      	ldr	r2, [pc, #180]	; (5050 <usbd_work_handler+0x2fc>)
    4f9c:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
		if (ctx->status_cb && dev_ready()) {
    4fa0:	2a00      	cmp	r2, #0
    4fa2:	d068      	beq.n	5076 <usbd_work_handler+0x322>
			ctx->status_cb(USB_DC_RESUME, NULL);
    4fa4:	2100      	movs	r1, #0
    4fa6:	2006      	movs	r0, #6
    4fa8:	4798      	blx	r3
}
    4faa:	e064      	b.n	5076 <usbd_work_handler+0x322>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4fac:	f105 0a10 	add.w	sl, r5, #16
	return z_impl_k_mutex_lock(mutex, timeout);
    4fb0:	f04f 32ff 	mov.w	r2, #4294967295
    4fb4:	f04f 33ff 	mov.w	r3, #4294967295
    4fb8:	4650      	mov	r0, sl
    4fba:	f005 fae9 	bl	a590 <z_impl_k_mutex_lock>
			eps_ctx_init();
    4fbe:	f7ff fd37 	bl	4a30 <eps_ctx_init>
	return z_impl_k_mutex_unlock(mutex);
    4fc2:	4650      	mov	r0, sl
    4fc4:	f005 fb6e 	bl	a6a4 <z_impl_k_mutex_unlock>
			if (ctx->status_cb) {
    4fc8:	f855 3c28 	ldr.w	r3, [r5, #-40]
    4fcc:	2b00      	cmp	r3, #0
    4fce:	d052      	beq.n	5076 <usbd_work_handler+0x322>
				ctx->status_cb(USB_DC_RESET, NULL);
    4fd0:	2100      	movs	r1, #0
    4fd2:	2001      	movs	r0, #1
    4fd4:	4798      	blx	r3
    4fd6:	e04e      	b.n	5076 <usbd_work_handler+0x322>
			usbd_sof_trigger_iso_read();
    4fd8:	f7ff fe1c 	bl	4c14 <usbd_sof_trigger_iso_read>
			if (ctx->status_cb) {
    4fdc:	f855 3c28 	ldr.w	r3, [r5, #-40]
    4fe0:	2b00      	cmp	r3, #0
    4fe2:	d048      	beq.n	5076 <usbd_work_handler+0x322>
				ctx->status_cb(USB_DC_SOF, NULL);
    4fe4:	2100      	movs	r1, #0
    4fe6:	200a      	movs	r0, #10
    4fe8:	4798      	blx	r3
    4fea:	e044      	b.n	5076 <usbd_work_handler+0x322>
    4fec:	4b13      	ldr	r3, [pc, #76]	; (503c <usbd_work_handler+0x2e8>)
    4fee:	4a14      	ldr	r2, [pc, #80]	; (5040 <usbd_work_handler+0x2ec>)
    4ff0:	1a9b      	subs	r3, r3, r2
    4ff2:	08db      	lsrs	r3, r3, #3
				LOG_ERR("USBD event queue full!");
    4ff4:	2201      	movs	r2, #1
    4ff6:	f362 0602 	bfi	r6, r2, #0, #3
    4ffa:	f36f 06c5 	bfc	r6, #3, #3
    4ffe:	f363 168f 	bfi	r6, r3, #6, #10
    5002:	4631      	mov	r1, r6
    5004:	4816      	ldr	r0, [pc, #88]	; (5060 <usbd_work_handler+0x30c>)
    5006:	f7fc fbbf 	bl	1788 <log_0>
	nrfx_power_usbevt_disable();
    500a:	f008 ff92 	bl	df32 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
    500e:	f004 fd65 	bl	9adc <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    5012:	f003 fcf5 	bl	8a00 <nrfx_usbd_uninit>
static inline void usbd_evt_flush(void)
    5016:	e006      	b.n	5026 <usbd_work_handler+0x2d2>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    5018:	1d01      	adds	r1, r0, #4
    501a:	4807      	ldr	r0, [pc, #28]	; (5038 <usbd_work_handler+0x2e4>)
    501c:	f009 f85b 	bl	e0d6 <k_mem_slab_free>
	} while (ev != NULL);
    5020:	f1ba 0f00 	cmp.w	sl, #0
    5024:	d020      	beq.n	5068 <usbd_work_handler+0x314>
	return z_impl_k_queue_get(queue, timeout);
    5026:	2200      	movs	r2, #0
    5028:	2300      	movs	r3, #0
    502a:	480e      	ldr	r0, [pc, #56]	; (5064 <usbd_work_handler+0x310>)
    502c:	f005 fb7e 	bl	a72c <z_impl_k_queue_get>
		if (ev) {
    5030:	4682      	mov	sl, r0
    5032:	2800      	cmp	r0, #0
    5034:	d1f0      	bne.n	5018 <usbd_work_handler+0x2c4>
    5036:	e7f3      	b.n	5020 <usbd_work_handler+0x2cc>
    5038:	20000234 	.word	0x20000234
    503c:	0000ecac 	.word	0x0000ecac
    5040:	0000ec4c 	.word	0x0000ec4c
    5044:	0000f970 	.word	0x0000f970
    5048:	40027000 	.word	0x40027000
    504c:	20001a8c 	.word	0x20001a8c
    5050:	20001a88 	.word	0x20001a88
    5054:	20001ac0 	.word	0x20001ac0
    5058:	0bad0000 	.word	0x0bad0000
    505c:	0000f998 	.word	0x0000f998
    5060:	0000f9c0 	.word	0x0000f9c0
    5064:	200002d8 	.word	0x200002d8
	ret = eps_ctx_init();
    5068:	f7ff fce2 	bl	4a30 <eps_ctx_init>
	nrfx_power_usbevt_enable();
    506c:	f008 ff5a 	bl	df24 <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    5070:	481c      	ldr	r0, [pc, #112]	; (50e4 <usbd_work_handler+0x390>)
    5072:	f003 fd9f 	bl	8bb4 <nrfx_usbd_init>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    5076:	1d21      	adds	r1, r4, #4
    5078:	481b      	ldr	r0, [pc, #108]	; (50e8 <usbd_work_handler+0x394>)
    507a:	f009 f82c 	bl	e0d6 <k_mem_slab_free>
    507e:	2200      	movs	r2, #0
    5080:	2300      	movs	r3, #0
    5082:	481a      	ldr	r0, [pc, #104]	; (50ec <usbd_work_handler+0x398>)
    5084:	f005 fb52 	bl	a72c <z_impl_k_queue_get>
	while ((ev = usbd_evt_get()) != NULL) {
    5088:	4604      	mov	r4, r0
    508a:	b338      	cbz	r0, 50dc <usbd_work_handler+0x388>
	return get_usbd_ctx()->ready;
    508c:	4b18      	ldr	r3, [pc, #96]	; (50f0 <usbd_work_handler+0x39c>)
    508e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    5092:	b91b      	cbnz	r3, 509c <usbd_work_handler+0x348>
    5094:	7c23      	ldrb	r3, [r4, #16]
    5096:	2b00      	cmp	r3, #0
    5098:	f47f ae61 	bne.w	4d5e <usbd_work_handler+0xa>
		switch (ev->evt_type) {
    509c:	7c21      	ldrb	r1, [r4, #16]
    509e:	2904      	cmp	r1, #4
    50a0:	d80c      	bhi.n	50bc <usbd_work_handler+0x368>
    50a2:	a301      	add	r3, pc, #4	; (adr r3, 50a8 <usbd_work_handler+0x354>)
    50a4:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    50a8:	00004eff 	.word	0x00004eff
    50ac:	00004d69 	.word	0x00004d69
    50b0:	00004fad 	.word	0x00004fad
    50b4:	00004fd9 	.word	0x00004fd9
    50b8:	00004fed 	.word	0x00004fed
    50bc:	4b0d      	ldr	r3, [pc, #52]	; (50f4 <usbd_work_handler+0x3a0>)
    50be:	4a0e      	ldr	r2, [pc, #56]	; (50f8 <usbd_work_handler+0x3a4>)
    50c0:	1a9b      	subs	r3, r3, r2
    50c2:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    50c4:	2201      	movs	r2, #1
    50c6:	f362 0902 	bfi	r9, r2, #0, #3
    50ca:	f36f 09c5 	bfc	r9, #3, #3
    50ce:	f363 198f 	bfi	r9, r3, #6, #10
    50d2:	464a      	mov	r2, r9
    50d4:	4809      	ldr	r0, [pc, #36]	; (50fc <usbd_work_handler+0x3a8>)
    50d6:	f7fc fae5 	bl	16a4 <log_1>
    50da:	e7cc      	b.n	5076 <usbd_work_handler+0x322>
}
    50dc:	b005      	add	sp, #20
    50de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    50e2:	bf00      	nop
    50e4:	0000575d 	.word	0x0000575d
    50e8:	20000234 	.word	0x20000234
    50ec:	200002d8 	.word	0x200002d8
    50f0:	20001a88 	.word	0x20001a88
    50f4:	0000ecac 	.word	0x0000ecac
    50f8:	0000ec4c 	.word	0x0000ec4c
    50fc:	0000f9d8 	.word	0x0000f9d8

00005100 <usbd_event_transfer_ctrl>:
{
    5100:	b570      	push	{r4, r5, r6, lr}
    5102:	b082      	sub	sp, #8
    5104:	4604      	mov	r4, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
    5106:	7886      	ldrb	r6, [r0, #2]
    5108:	4630      	mov	r0, r6
    510a:	f7ff fc5d 	bl	49c8 <endpoint_ctx>
    510e:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    5110:	f016 0f80 	tst.w	r6, #128	; 0x80
    5114:	d122      	bne.n	515c <usbd_event_transfer_ctrl+0x5c>
		switch (p_event->data.eptransfer.status) {
    5116:	78e1      	ldrb	r1, [r4, #3]
    5118:	2900      	cmp	r1, #0
    511a:	f000 80d8 	beq.w	52ce <usbd_event_transfer_ctrl+0x1ce>
    511e:	2901      	cmp	r1, #1
    5120:	f040 815c 	bne.w	53dc <usbd_event_transfer_ctrl+0x2dc>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    5124:	2200      	movs	r2, #0
    5126:	2300      	movs	r3, #0
    5128:	a901      	add	r1, sp, #4
    512a:	48b6      	ldr	r0, [pc, #728]	; (5404 <usbd_event_transfer_ctrl+0x304>)
    512c:	f005 f8ec 	bl	a308 <k_mem_slab_alloc>
    5130:	2800      	cmp	r0, #0
    5132:	f040 8089 	bne.w	5248 <usbd_event_transfer_ctrl+0x148>
	ev = (struct usbd_event *)block.data;
    5136:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    5138:	6064      	str	r4, [r4, #4]
			if (!ev) {
    513a:	2c00      	cmp	r4, #0
    513c:	f000 815f 	beq.w	53fe <usbd_event_transfer_ctrl+0x2fe>
			ep_ctx->read_pending = true;
    5140:	2301      	movs	r3, #1
    5142:	776b      	strb	r3, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    5144:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    5146:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    5148:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    514a:	4621      	mov	r1, r4
    514c:	48ae      	ldr	r0, [pc, #696]	; (5408 <usbd_event_transfer_ctrl+0x308>)
    514e:	f009 f8d9 	bl	e304 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    5152:	49ae      	ldr	r1, [pc, #696]	; (540c <usbd_event_transfer_ctrl+0x30c>)
    5154:	48ae      	ldr	r0, [pc, #696]	; (5410 <usbd_event_transfer_ctrl+0x310>)
    5156:	f009 f8f6 	bl	e346 <k_work_submit_to_queue>
}
    515a:	e150      	b.n	53fe <usbd_event_transfer_ctrl+0x2fe>
		switch (p_event->data.eptransfer.status) {
    515c:	78e1      	ldrb	r1, [r4, #3]
    515e:	b1a1      	cbz	r1, 518a <usbd_event_transfer_ctrl+0x8a>
    5160:	2903      	cmp	r1, #3
    5162:	f000 814c 	beq.w	53fe <usbd_event_transfer_ctrl+0x2fe>
    5166:	4aab      	ldr	r2, [pc, #684]	; (5414 <usbd_event_transfer_ctrl+0x314>)
    5168:	4bab      	ldr	r3, [pc, #684]	; (5418 <usbd_event_transfer_ctrl+0x318>)
    516a:	1ad2      	subs	r2, r2, r3
    516c:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    516e:	f04f 0300 	mov.w	r3, #0
    5172:	2001      	movs	r0, #1
    5174:	f360 0302 	bfi	r3, r0, #0, #3
    5178:	f36f 03c5 	bfc	r3, #3, #3
    517c:	f362 138f 	bfi	r3, r2, #6, #10
    5180:	4632      	mov	r2, r6
    5182:	48a6      	ldr	r0, [pc, #664]	; (541c <usbd_event_transfer_ctrl+0x31c>)
    5184:	f7fc fac4 	bl	1710 <log_2>
    5188:	e139      	b.n	53fe <usbd_event_transfer_ctrl+0x2fe>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    518a:	2200      	movs	r2, #0
    518c:	2300      	movs	r3, #0
    518e:	a901      	add	r1, sp, #4
    5190:	489c      	ldr	r0, [pc, #624]	; (5404 <usbd_event_transfer_ctrl+0x304>)
    5192:	f005 f8b9 	bl	a308 <k_mem_slab_alloc>
    5196:	b9a0      	cbnz	r0, 51c2 <usbd_event_transfer_ctrl+0xc2>
	ev = (struct usbd_event *)block.data;
    5198:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    519a:	6064      	str	r4, [r4, #4]
			if (!ev) {
    519c:	2c00      	cmp	r4, #0
    519e:	f000 812e 	beq.w	53fe <usbd_event_transfer_ctrl+0x2fe>
			ep_ctx->write_in_progress = false;
    51a2:	2300      	movs	r3, #0
    51a4:	77ab      	strb	r3, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    51a6:	2301      	movs	r3, #1
    51a8:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    51aa:	2303      	movs	r3, #3
    51ac:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    51ae:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    51b0:	4621      	mov	r1, r4
    51b2:	4895      	ldr	r0, [pc, #596]	; (5408 <usbd_event_transfer_ctrl+0x308>)
    51b4:	f009 f8a6 	bl	e304 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    51b8:	4994      	ldr	r1, [pc, #592]	; (540c <usbd_event_transfer_ctrl+0x30c>)
    51ba:	4895      	ldr	r0, [pc, #596]	; (5410 <usbd_event_transfer_ctrl+0x310>)
    51bc:	f009 f8c3 	bl	e346 <k_work_submit_to_queue>
}
    51c0:	e11d      	b.n	53fe <usbd_event_transfer_ctrl+0x2fe>
    51c2:	4b94      	ldr	r3, [pc, #592]	; (5414 <usbd_event_transfer_ctrl+0x314>)
    51c4:	4a94      	ldr	r2, [pc, #592]	; (5418 <usbd_event_transfer_ctrl+0x318>)
    51c6:	1a9b      	subs	r3, r3, r2
    51c8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    51ca:	f04f 0100 	mov.w	r1, #0
    51ce:	2201      	movs	r2, #1
    51d0:	f362 0102 	bfi	r1, r2, #0, #3
    51d4:	f36f 01c5 	bfc	r1, #3, #3
    51d8:	f363 118f 	bfi	r1, r3, #6, #10
    51dc:	4890      	ldr	r0, [pc, #576]	; (5420 <usbd_event_transfer_ctrl+0x320>)
    51de:	f7fc fad3 	bl	1788 <log_0>
static inline void usbd_evt_flush(void)
    51e2:	e000      	b.n	51e6 <usbd_event_transfer_ctrl+0xe6>
	} while (ev != NULL);
    51e4:	b164      	cbz	r4, 5200 <usbd_event_transfer_ctrl+0x100>
    51e6:	2200      	movs	r2, #0
    51e8:	2300      	movs	r3, #0
    51ea:	4887      	ldr	r0, [pc, #540]	; (5408 <usbd_event_transfer_ctrl+0x308>)
    51ec:	f005 fa9e 	bl	a72c <z_impl_k_queue_get>
		if (ev) {
    51f0:	4604      	mov	r4, r0
    51f2:	2800      	cmp	r0, #0
    51f4:	d0f6      	beq.n	51e4 <usbd_event_transfer_ctrl+0xe4>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    51f6:	1d01      	adds	r1, r0, #4
    51f8:	4882      	ldr	r0, [pc, #520]	; (5404 <usbd_event_transfer_ctrl+0x304>)
    51fa:	f008 ff6c 	bl	e0d6 <k_mem_slab_free>
}
    51fe:	e7f1      	b.n	51e4 <usbd_event_transfer_ctrl+0xe4>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    5200:	2200      	movs	r2, #0
    5202:	2300      	movs	r3, #0
    5204:	a901      	add	r1, sp, #4
    5206:	487f      	ldr	r0, [pc, #508]	; (5404 <usbd_event_transfer_ctrl+0x304>)
    5208:	f005 f87e 	bl	a308 <k_mem_slab_alloc>
    520c:	b180      	cbz	r0, 5230 <usbd_event_transfer_ctrl+0x130>
    520e:	4b81      	ldr	r3, [pc, #516]	; (5414 <usbd_event_transfer_ctrl+0x314>)
    5210:	4a81      	ldr	r2, [pc, #516]	; (5418 <usbd_event_transfer_ctrl+0x318>)
    5212:	1a9b      	subs	r3, r3, r2
    5214:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    5216:	f04f 0100 	mov.w	r1, #0
    521a:	2201      	movs	r2, #1
    521c:	f362 0102 	bfi	r1, r2, #0, #3
    5220:	f36f 01c5 	bfc	r1, #3, #3
    5224:	f363 118f 	bfi	r1, r3, #6, #10
    5228:	487e      	ldr	r0, [pc, #504]	; (5424 <usbd_event_transfer_ctrl+0x324>)
    522a:	f7fc faad 	bl	1788 <log_0>
			return NULL;
    522e:	e7b5      	b.n	519c <usbd_event_transfer_ctrl+0x9c>
		ev = (struct usbd_event *)block.data;
    5230:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    5232:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    5234:	2304      	movs	r3, #4
    5236:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    5238:	4873      	ldr	r0, [pc, #460]	; (5408 <usbd_event_transfer_ctrl+0x308>)
    523a:	f009 f863 	bl	e304 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    523e:	4973      	ldr	r1, [pc, #460]	; (540c <usbd_event_transfer_ctrl+0x30c>)
    5240:	4873      	ldr	r0, [pc, #460]	; (5410 <usbd_event_transfer_ctrl+0x310>)
    5242:	f009 f880 	bl	e346 <k_work_submit_to_queue>
		return NULL;
    5246:	e7a9      	b.n	519c <usbd_event_transfer_ctrl+0x9c>
    5248:	4b72      	ldr	r3, [pc, #456]	; (5414 <usbd_event_transfer_ctrl+0x314>)
    524a:	4a73      	ldr	r2, [pc, #460]	; (5418 <usbd_event_transfer_ctrl+0x318>)
    524c:	1a9b      	subs	r3, r3, r2
    524e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    5250:	f04f 0100 	mov.w	r1, #0
    5254:	2201      	movs	r2, #1
    5256:	f362 0102 	bfi	r1, r2, #0, #3
    525a:	f36f 01c5 	bfc	r1, #3, #3
    525e:	f363 118f 	bfi	r1, r3, #6, #10
    5262:	486f      	ldr	r0, [pc, #444]	; (5420 <usbd_event_transfer_ctrl+0x320>)
    5264:	f7fc fa90 	bl	1788 <log_0>
static inline void usbd_evt_flush(void)
    5268:	e004      	b.n	5274 <usbd_event_transfer_ctrl+0x174>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    526a:	1d01      	adds	r1, r0, #4
    526c:	4865      	ldr	r0, [pc, #404]	; (5404 <usbd_event_transfer_ctrl+0x304>)
    526e:	f008 ff32 	bl	e0d6 <k_mem_slab_free>
	} while (ev != NULL);
    5272:	b144      	cbz	r4, 5286 <usbd_event_transfer_ctrl+0x186>
    5274:	2200      	movs	r2, #0
    5276:	2300      	movs	r3, #0
    5278:	4863      	ldr	r0, [pc, #396]	; (5408 <usbd_event_transfer_ctrl+0x308>)
    527a:	f005 fa57 	bl	a72c <z_impl_k_queue_get>
		if (ev) {
    527e:	4604      	mov	r4, r0
    5280:	2800      	cmp	r0, #0
    5282:	d1f2      	bne.n	526a <usbd_event_transfer_ctrl+0x16a>
    5284:	e7f5      	b.n	5272 <usbd_event_transfer_ctrl+0x172>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    5286:	2200      	movs	r2, #0
    5288:	2300      	movs	r3, #0
    528a:	a901      	add	r1, sp, #4
    528c:	485d      	ldr	r0, [pc, #372]	; (5404 <usbd_event_transfer_ctrl+0x304>)
    528e:	f005 f83b 	bl	a308 <k_mem_slab_alloc>
    5292:	b180      	cbz	r0, 52b6 <usbd_event_transfer_ctrl+0x1b6>
    5294:	4b5f      	ldr	r3, [pc, #380]	; (5414 <usbd_event_transfer_ctrl+0x314>)
    5296:	4a60      	ldr	r2, [pc, #384]	; (5418 <usbd_event_transfer_ctrl+0x318>)
    5298:	1a9b      	subs	r3, r3, r2
    529a:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    529c:	f04f 0100 	mov.w	r1, #0
    52a0:	2201      	movs	r2, #1
    52a2:	f362 0102 	bfi	r1, r2, #0, #3
    52a6:	f36f 01c5 	bfc	r1, #3, #3
    52aa:	f363 118f 	bfi	r1, r3, #6, #10
    52ae:	485d      	ldr	r0, [pc, #372]	; (5424 <usbd_event_transfer_ctrl+0x324>)
    52b0:	f7fc fa6a 	bl	1788 <log_0>
			return NULL;
    52b4:	e741      	b.n	513a <usbd_event_transfer_ctrl+0x3a>
		ev = (struct usbd_event *)block.data;
    52b6:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    52b8:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    52ba:	2304      	movs	r3, #4
    52bc:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    52be:	4852      	ldr	r0, [pc, #328]	; (5408 <usbd_event_transfer_ctrl+0x308>)
    52c0:	f009 f820 	bl	e304 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    52c4:	4951      	ldr	r1, [pc, #324]	; (540c <usbd_event_transfer_ctrl+0x30c>)
    52c6:	4852      	ldr	r0, [pc, #328]	; (5410 <usbd_event_transfer_ctrl+0x310>)
    52c8:	f009 f83d 	bl	e346 <k_work_submit_to_queue>
		return NULL;
    52cc:	e735      	b.n	513a <usbd_event_transfer_ctrl+0x3a>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    52ce:	2200      	movs	r2, #0
    52d0:	2300      	movs	r3, #0
    52d2:	a901      	add	r1, sp, #4
    52d4:	484b      	ldr	r0, [pc, #300]	; (5404 <usbd_event_transfer_ctrl+0x304>)
    52d6:	f005 f817 	bl	a308 <k_mem_slab_alloc>
    52da:	bb20      	cbnz	r0, 5326 <usbd_event_transfer_ctrl+0x226>
	ev = (struct usbd_event *)block.data;
    52dc:	9e01      	ldr	r6, [sp, #4]
	ev->block = block;
    52de:	6076      	str	r6, [r6, #4]
			if (!ev) {
    52e0:	2e00      	cmp	r6, #0
    52e2:	f000 808c 	beq.w	53fe <usbd_event_transfer_ctrl+0x2fe>
			ev->evt_type = USBD_EVT_EP;
    52e6:	2301      	movs	r3, #1
    52e8:	7433      	strb	r3, [r6, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    52ea:	2302      	movs	r3, #2
    52ec:	7333      	strb	r3, [r6, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    52ee:	60b5      	str	r5, [r6, #8]
			err_code = nrfx_usbd_ep_status_get(
    52f0:	f105 010c 	add.w	r1, r5, #12
    52f4:	78a0      	ldrb	r0, [r4, #2]
    52f6:	f003 fd4b 	bl	8d90 <nrfx_usbd_ep_status_get>
			if (err_code != NRFX_USBD_EP_OK) {
    52fa:	4601      	mov	r1, r0
    52fc:	2800      	cmp	r0, #0
    52fe:	d155      	bne.n	53ac <usbd_event_transfer_ctrl+0x2ac>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    5300:	4b49      	ldr	r3, [pc, #292]	; (5428 <usbd_event_transfer_ctrl+0x328>)
    5302:	f8b3 328c 	ldrh.w	r3, [r3, #652]	; 0x28c
    5306:	68ea      	ldr	r2, [r5, #12]
    5308:	4293      	cmp	r3, r2
    530a:	d860      	bhi.n	53ce <usbd_event_transfer_ctrl+0x2ce>
				ctx->ctrl_read_len = 0U;
    530c:	4b46      	ldr	r3, [pc, #280]	; (5428 <usbd_event_transfer_ctrl+0x328>)
    530e:	2200      	movs	r2, #0
    5310:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
	k_fifo_put(&usbd_evt_fifo, ev);
    5314:	4631      	mov	r1, r6
    5316:	483c      	ldr	r0, [pc, #240]	; (5408 <usbd_event_transfer_ctrl+0x308>)
    5318:	f008 fff4 	bl	e304 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    531c:	493b      	ldr	r1, [pc, #236]	; (540c <usbd_event_transfer_ctrl+0x30c>)
    531e:	483c      	ldr	r0, [pc, #240]	; (5410 <usbd_event_transfer_ctrl+0x310>)
    5320:	f009 f811 	bl	e346 <k_work_submit_to_queue>
}
    5324:	e06b      	b.n	53fe <usbd_event_transfer_ctrl+0x2fe>
    5326:	4b3b      	ldr	r3, [pc, #236]	; (5414 <usbd_event_transfer_ctrl+0x314>)
    5328:	4a3b      	ldr	r2, [pc, #236]	; (5418 <usbd_event_transfer_ctrl+0x318>)
    532a:	1a9b      	subs	r3, r3, r2
    532c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    532e:	f04f 0100 	mov.w	r1, #0
    5332:	2201      	movs	r2, #1
    5334:	f362 0102 	bfi	r1, r2, #0, #3
    5338:	f36f 01c5 	bfc	r1, #3, #3
    533c:	f363 118f 	bfi	r1, r3, #6, #10
    5340:	4837      	ldr	r0, [pc, #220]	; (5420 <usbd_event_transfer_ctrl+0x320>)
    5342:	f7fc fa21 	bl	1788 <log_0>
static inline void usbd_evt_flush(void)
    5346:	e004      	b.n	5352 <usbd_event_transfer_ctrl+0x252>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    5348:	1d01      	adds	r1, r0, #4
    534a:	482e      	ldr	r0, [pc, #184]	; (5404 <usbd_event_transfer_ctrl+0x304>)
    534c:	f008 fec3 	bl	e0d6 <k_mem_slab_free>
	} while (ev != NULL);
    5350:	b146      	cbz	r6, 5364 <usbd_event_transfer_ctrl+0x264>
    5352:	2200      	movs	r2, #0
    5354:	2300      	movs	r3, #0
    5356:	482c      	ldr	r0, [pc, #176]	; (5408 <usbd_event_transfer_ctrl+0x308>)
    5358:	f005 f9e8 	bl	a72c <z_impl_k_queue_get>
		if (ev) {
    535c:	4606      	mov	r6, r0
    535e:	2800      	cmp	r0, #0
    5360:	d1f2      	bne.n	5348 <usbd_event_transfer_ctrl+0x248>
    5362:	e7f5      	b.n	5350 <usbd_event_transfer_ctrl+0x250>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    5364:	2200      	movs	r2, #0
    5366:	2300      	movs	r3, #0
    5368:	a901      	add	r1, sp, #4
    536a:	4826      	ldr	r0, [pc, #152]	; (5404 <usbd_event_transfer_ctrl+0x304>)
    536c:	f004 ffcc 	bl	a308 <k_mem_slab_alloc>
    5370:	b180      	cbz	r0, 5394 <usbd_event_transfer_ctrl+0x294>
    5372:	4b28      	ldr	r3, [pc, #160]	; (5414 <usbd_event_transfer_ctrl+0x314>)
    5374:	4a28      	ldr	r2, [pc, #160]	; (5418 <usbd_event_transfer_ctrl+0x318>)
    5376:	1a9b      	subs	r3, r3, r2
    5378:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    537a:	f04f 0100 	mov.w	r1, #0
    537e:	2201      	movs	r2, #1
    5380:	f362 0102 	bfi	r1, r2, #0, #3
    5384:	f36f 01c5 	bfc	r1, #3, #3
    5388:	f363 118f 	bfi	r1, r3, #6, #10
    538c:	4825      	ldr	r0, [pc, #148]	; (5424 <usbd_event_transfer_ctrl+0x324>)
    538e:	f7fc f9fb 	bl	1788 <log_0>
			return NULL;
    5392:	e7a5      	b.n	52e0 <usbd_event_transfer_ctrl+0x1e0>
		ev = (struct usbd_event *)block.data;
    5394:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    5396:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    5398:	2304      	movs	r3, #4
    539a:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    539c:	481a      	ldr	r0, [pc, #104]	; (5408 <usbd_event_transfer_ctrl+0x308>)
    539e:	f008 ffb1 	bl	e304 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    53a2:	491a      	ldr	r1, [pc, #104]	; (540c <usbd_event_transfer_ctrl+0x30c>)
    53a4:	481a      	ldr	r0, [pc, #104]	; (5410 <usbd_event_transfer_ctrl+0x310>)
    53a6:	f008 ffce 	bl	e346 <k_work_submit_to_queue>
		return NULL;
    53aa:	e799      	b.n	52e0 <usbd_event_transfer_ctrl+0x1e0>
    53ac:	4b19      	ldr	r3, [pc, #100]	; (5414 <usbd_event_transfer_ctrl+0x314>)
    53ae:	4a1a      	ldr	r2, [pc, #104]	; (5418 <usbd_event_transfer_ctrl+0x318>)
    53b0:	1a9b      	subs	r3, r3, r2
    53b2:	08db      	lsrs	r3, r3, #3
				LOG_ERR("_ep_status_get failed! Code: %d",
    53b4:	f04f 0200 	mov.w	r2, #0
    53b8:	2001      	movs	r0, #1
    53ba:	f360 0202 	bfi	r2, r0, #0, #3
    53be:	f36f 02c5 	bfc	r2, #3, #3
    53c2:	f363 128f 	bfi	r2, r3, #6, #10
    53c6:	4819      	ldr	r0, [pc, #100]	; (542c <usbd_event_transfer_ctrl+0x32c>)
    53c8:	f7fc f96c 	bl	16a4 <log_1>
    53cc:	e798      	b.n	5300 <usbd_event_transfer_ctrl+0x200>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    53ce:	1a9b      	subs	r3, r3, r2
    53d0:	4a15      	ldr	r2, [pc, #84]	; (5428 <usbd_event_transfer_ctrl+0x328>)
    53d2:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
    53d6:	f004 f891 	bl	94fc <nrfx_usbd_setup_data_clear>
    53da:	e79b      	b.n	5314 <usbd_event_transfer_ctrl+0x214>
    53dc:	4a0d      	ldr	r2, [pc, #52]	; (5414 <usbd_event_transfer_ctrl+0x314>)
    53de:	4b0e      	ldr	r3, [pc, #56]	; (5418 <usbd_event_transfer_ctrl+0x318>)
    53e0:	1ad2      	subs	r2, r2, r3
    53e2:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    53e4:	f04f 0300 	mov.w	r3, #0
    53e8:	2001      	movs	r0, #1
    53ea:	f360 0302 	bfi	r3, r0, #0, #3
    53ee:	f36f 03c5 	bfc	r3, #3, #3
    53f2:	f362 138f 	bfi	r3, r2, #6, #10
    53f6:	4632      	mov	r2, r6
    53f8:	4808      	ldr	r0, [pc, #32]	; (541c <usbd_event_transfer_ctrl+0x31c>)
    53fa:	f7fc f989 	bl	1710 <log_2>
}
    53fe:	b002      	add	sp, #8
    5400:	bd70      	pop	{r4, r5, r6, pc}
    5402:	bf00      	nop
    5404:	20000234 	.word	0x20000234
    5408:	200002d8 	.word	0x200002d8
    540c:	20001ab0 	.word	0x20001ab0
    5410:	20000588 	.word	0x20000588
    5414:	0000ecac 	.word	0x0000ecac
    5418:	0000ec4c 	.word	0x0000ec4c
    541c:	0000f9f0 	.word	0x0000f9f0
    5420:	0000f8f0 	.word	0x0000f8f0
    5424:	0000f910 	.word	0x0000f910
    5428:	20001a88 	.word	0x20001a88
    542c:	0000fa1c 	.word	0x0000fa1c

00005430 <usbd_event_transfer_data>:
{
    5430:	b570      	push	{r4, r5, r6, lr}
    5432:	b082      	sub	sp, #8
    5434:	4604      	mov	r4, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
    5436:	7886      	ldrb	r6, [r0, #2]
    5438:	4630      	mov	r0, r6
    543a:	f7ff fac5 	bl	49c8 <endpoint_ctx>
    543e:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    5440:	f016 0f80 	tst.w	r6, #128	; 0x80
    5444:	d122      	bne.n	548c <usbd_event_transfer_data+0x5c>
		switch (p_event->data.eptransfer.status) {
    5446:	78e1      	ldrb	r1, [r4, #3]
    5448:	2900      	cmp	r1, #0
    544a:	f000 80d8 	beq.w	55fe <usbd_event_transfer_data+0x1ce>
    544e:	2901      	cmp	r1, #1
    5450:	f040 815d 	bne.w	570e <usbd_event_transfer_data+0x2de>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    5454:	2200      	movs	r2, #0
    5456:	2300      	movs	r3, #0
    5458:	a901      	add	r1, sp, #4
    545a:	48b6      	ldr	r0, [pc, #728]	; (5734 <usbd_event_transfer_data+0x304>)
    545c:	f004 ff54 	bl	a308 <k_mem_slab_alloc>
    5460:	2800      	cmp	r0, #0
    5462:	f040 8089 	bne.w	5578 <usbd_event_transfer_data+0x148>
	ev = (struct usbd_event *)block.data;
    5466:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    5468:	6064      	str	r4, [r4, #4]
			if (!ev) {
    546a:	2c00      	cmp	r4, #0
    546c:	f000 8160 	beq.w	5730 <usbd_event_transfer_data+0x300>
			ep_ctx->read_pending = true;
    5470:	2301      	movs	r3, #1
    5472:	776b      	strb	r3, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    5474:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    5476:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    5478:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    547a:	4621      	mov	r1, r4
    547c:	48ae      	ldr	r0, [pc, #696]	; (5738 <usbd_event_transfer_data+0x308>)
    547e:	f008 ff41 	bl	e304 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    5482:	49ae      	ldr	r1, [pc, #696]	; (573c <usbd_event_transfer_data+0x30c>)
    5484:	48ae      	ldr	r0, [pc, #696]	; (5740 <usbd_event_transfer_data+0x310>)
    5486:	f008 ff5e 	bl	e346 <k_work_submit_to_queue>
}
    548a:	e151      	b.n	5730 <usbd_event_transfer_data+0x300>
		switch (p_event->data.eptransfer.status) {
    548c:	78e1      	ldrb	r1, [r4, #3]
    548e:	b1a1      	cbz	r1, 54ba <usbd_event_transfer_data+0x8a>
    5490:	2903      	cmp	r1, #3
    5492:	f000 814d 	beq.w	5730 <usbd_event_transfer_data+0x300>
    5496:	4aab      	ldr	r2, [pc, #684]	; (5744 <usbd_event_transfer_data+0x314>)
    5498:	4bab      	ldr	r3, [pc, #684]	; (5748 <usbd_event_transfer_data+0x318>)
    549a:	1ad2      	subs	r2, r2, r3
    549c:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    549e:	f04f 0300 	mov.w	r3, #0
    54a2:	2001      	movs	r0, #1
    54a4:	f360 0302 	bfi	r3, r0, #0, #3
    54a8:	f36f 03c5 	bfc	r3, #3, #3
    54ac:	f362 138f 	bfi	r3, r2, #6, #10
    54b0:	4632      	mov	r2, r6
    54b2:	48a6      	ldr	r0, [pc, #664]	; (574c <usbd_event_transfer_data+0x31c>)
    54b4:	f7fc f92c 	bl	1710 <log_2>
    54b8:	e13a      	b.n	5730 <usbd_event_transfer_data+0x300>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    54ba:	2200      	movs	r2, #0
    54bc:	2300      	movs	r3, #0
    54be:	a901      	add	r1, sp, #4
    54c0:	489c      	ldr	r0, [pc, #624]	; (5734 <usbd_event_transfer_data+0x304>)
    54c2:	f004 ff21 	bl	a308 <k_mem_slab_alloc>
    54c6:	b9a0      	cbnz	r0, 54f2 <usbd_event_transfer_data+0xc2>
	ev = (struct usbd_event *)block.data;
    54c8:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    54ca:	6064      	str	r4, [r4, #4]
			if (!ev) {
    54cc:	2c00      	cmp	r4, #0
    54ce:	f000 812f 	beq.w	5730 <usbd_event_transfer_data+0x300>
			ep_ctx->write_in_progress = false;
    54d2:	2300      	movs	r3, #0
    54d4:	77ab      	strb	r3, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    54d6:	2301      	movs	r3, #1
    54d8:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    54da:	2303      	movs	r3, #3
    54dc:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    54de:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    54e0:	4621      	mov	r1, r4
    54e2:	4895      	ldr	r0, [pc, #596]	; (5738 <usbd_event_transfer_data+0x308>)
    54e4:	f008 ff0e 	bl	e304 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    54e8:	4994      	ldr	r1, [pc, #592]	; (573c <usbd_event_transfer_data+0x30c>)
    54ea:	4895      	ldr	r0, [pc, #596]	; (5740 <usbd_event_transfer_data+0x310>)
    54ec:	f008 ff2b 	bl	e346 <k_work_submit_to_queue>
}
    54f0:	e11e      	b.n	5730 <usbd_event_transfer_data+0x300>
    54f2:	4b94      	ldr	r3, [pc, #592]	; (5744 <usbd_event_transfer_data+0x314>)
    54f4:	4a94      	ldr	r2, [pc, #592]	; (5748 <usbd_event_transfer_data+0x318>)
    54f6:	1a9b      	subs	r3, r3, r2
    54f8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    54fa:	f04f 0100 	mov.w	r1, #0
    54fe:	2201      	movs	r2, #1
    5500:	f362 0102 	bfi	r1, r2, #0, #3
    5504:	f36f 01c5 	bfc	r1, #3, #3
    5508:	f363 118f 	bfi	r1, r3, #6, #10
    550c:	4890      	ldr	r0, [pc, #576]	; (5750 <usbd_event_transfer_data+0x320>)
    550e:	f7fc f93b 	bl	1788 <log_0>
static inline void usbd_evt_flush(void)
    5512:	e000      	b.n	5516 <usbd_event_transfer_data+0xe6>
	} while (ev != NULL);
    5514:	b164      	cbz	r4, 5530 <usbd_event_transfer_data+0x100>
    5516:	2200      	movs	r2, #0
    5518:	2300      	movs	r3, #0
    551a:	4887      	ldr	r0, [pc, #540]	; (5738 <usbd_event_transfer_data+0x308>)
    551c:	f005 f906 	bl	a72c <z_impl_k_queue_get>
		if (ev) {
    5520:	4604      	mov	r4, r0
    5522:	2800      	cmp	r0, #0
    5524:	d0f6      	beq.n	5514 <usbd_event_transfer_data+0xe4>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    5526:	1d01      	adds	r1, r0, #4
    5528:	4882      	ldr	r0, [pc, #520]	; (5734 <usbd_event_transfer_data+0x304>)
    552a:	f008 fdd4 	bl	e0d6 <k_mem_slab_free>
}
    552e:	e7f1      	b.n	5514 <usbd_event_transfer_data+0xe4>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    5530:	2200      	movs	r2, #0
    5532:	2300      	movs	r3, #0
    5534:	a901      	add	r1, sp, #4
    5536:	487f      	ldr	r0, [pc, #508]	; (5734 <usbd_event_transfer_data+0x304>)
    5538:	f004 fee6 	bl	a308 <k_mem_slab_alloc>
    553c:	b180      	cbz	r0, 5560 <usbd_event_transfer_data+0x130>
    553e:	4b81      	ldr	r3, [pc, #516]	; (5744 <usbd_event_transfer_data+0x314>)
    5540:	4a81      	ldr	r2, [pc, #516]	; (5748 <usbd_event_transfer_data+0x318>)
    5542:	1a9b      	subs	r3, r3, r2
    5544:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    5546:	f04f 0100 	mov.w	r1, #0
    554a:	2201      	movs	r2, #1
    554c:	f362 0102 	bfi	r1, r2, #0, #3
    5550:	f36f 01c5 	bfc	r1, #3, #3
    5554:	f363 118f 	bfi	r1, r3, #6, #10
    5558:	487e      	ldr	r0, [pc, #504]	; (5754 <usbd_event_transfer_data+0x324>)
    555a:	f7fc f915 	bl	1788 <log_0>
			return NULL;
    555e:	e7b5      	b.n	54cc <usbd_event_transfer_data+0x9c>
		ev = (struct usbd_event *)block.data;
    5560:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    5562:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    5564:	2304      	movs	r3, #4
    5566:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    5568:	4873      	ldr	r0, [pc, #460]	; (5738 <usbd_event_transfer_data+0x308>)
    556a:	f008 fecb 	bl	e304 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    556e:	4973      	ldr	r1, [pc, #460]	; (573c <usbd_event_transfer_data+0x30c>)
    5570:	4873      	ldr	r0, [pc, #460]	; (5740 <usbd_event_transfer_data+0x310>)
    5572:	f008 fee8 	bl	e346 <k_work_submit_to_queue>
		return NULL;
    5576:	e7a9      	b.n	54cc <usbd_event_transfer_data+0x9c>
    5578:	4b72      	ldr	r3, [pc, #456]	; (5744 <usbd_event_transfer_data+0x314>)
    557a:	4a73      	ldr	r2, [pc, #460]	; (5748 <usbd_event_transfer_data+0x318>)
    557c:	1a9b      	subs	r3, r3, r2
    557e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    5580:	f04f 0100 	mov.w	r1, #0
    5584:	2201      	movs	r2, #1
    5586:	f362 0102 	bfi	r1, r2, #0, #3
    558a:	f36f 01c5 	bfc	r1, #3, #3
    558e:	f363 118f 	bfi	r1, r3, #6, #10
    5592:	486f      	ldr	r0, [pc, #444]	; (5750 <usbd_event_transfer_data+0x320>)
    5594:	f7fc f8f8 	bl	1788 <log_0>
static inline void usbd_evt_flush(void)
    5598:	e004      	b.n	55a4 <usbd_event_transfer_data+0x174>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    559a:	1d01      	adds	r1, r0, #4
    559c:	4865      	ldr	r0, [pc, #404]	; (5734 <usbd_event_transfer_data+0x304>)
    559e:	f008 fd9a 	bl	e0d6 <k_mem_slab_free>
	} while (ev != NULL);
    55a2:	b144      	cbz	r4, 55b6 <usbd_event_transfer_data+0x186>
    55a4:	2200      	movs	r2, #0
    55a6:	2300      	movs	r3, #0
    55a8:	4863      	ldr	r0, [pc, #396]	; (5738 <usbd_event_transfer_data+0x308>)
    55aa:	f005 f8bf 	bl	a72c <z_impl_k_queue_get>
		if (ev) {
    55ae:	4604      	mov	r4, r0
    55b0:	2800      	cmp	r0, #0
    55b2:	d1f2      	bne.n	559a <usbd_event_transfer_data+0x16a>
    55b4:	e7f5      	b.n	55a2 <usbd_event_transfer_data+0x172>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    55b6:	2200      	movs	r2, #0
    55b8:	2300      	movs	r3, #0
    55ba:	a901      	add	r1, sp, #4
    55bc:	485d      	ldr	r0, [pc, #372]	; (5734 <usbd_event_transfer_data+0x304>)
    55be:	f004 fea3 	bl	a308 <k_mem_slab_alloc>
    55c2:	b180      	cbz	r0, 55e6 <usbd_event_transfer_data+0x1b6>
    55c4:	4b5f      	ldr	r3, [pc, #380]	; (5744 <usbd_event_transfer_data+0x314>)
    55c6:	4a60      	ldr	r2, [pc, #384]	; (5748 <usbd_event_transfer_data+0x318>)
    55c8:	1a9b      	subs	r3, r3, r2
    55ca:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    55cc:	f04f 0100 	mov.w	r1, #0
    55d0:	2201      	movs	r2, #1
    55d2:	f362 0102 	bfi	r1, r2, #0, #3
    55d6:	f36f 01c5 	bfc	r1, #3, #3
    55da:	f363 118f 	bfi	r1, r3, #6, #10
    55de:	485d      	ldr	r0, [pc, #372]	; (5754 <usbd_event_transfer_data+0x324>)
    55e0:	f7fc f8d2 	bl	1788 <log_0>
			return NULL;
    55e4:	e741      	b.n	546a <usbd_event_transfer_data+0x3a>
		ev = (struct usbd_event *)block.data;
    55e6:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    55e8:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    55ea:	2304      	movs	r3, #4
    55ec:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    55ee:	4852      	ldr	r0, [pc, #328]	; (5738 <usbd_event_transfer_data+0x308>)
    55f0:	f008 fe88 	bl	e304 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    55f4:	4951      	ldr	r1, [pc, #324]	; (573c <usbd_event_transfer_data+0x30c>)
    55f6:	4852      	ldr	r0, [pc, #328]	; (5740 <usbd_event_transfer_data+0x310>)
    55f8:	f008 fea5 	bl	e346 <k_work_submit_to_queue>
		return NULL;
    55fc:	e735      	b.n	546a <usbd_event_transfer_data+0x3a>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    55fe:	2200      	movs	r2, #0
    5600:	2300      	movs	r3, #0
    5602:	a901      	add	r1, sp, #4
    5604:	484b      	ldr	r0, [pc, #300]	; (5734 <usbd_event_transfer_data+0x304>)
    5606:	f004 fe7f 	bl	a308 <k_mem_slab_alloc>
    560a:	b9f0      	cbnz	r0, 564a <usbd_event_transfer_data+0x21a>
	ev = (struct usbd_event *)block.data;
    560c:	9e01      	ldr	r6, [sp, #4]
	ev->block = block;
    560e:	6076      	str	r6, [r6, #4]
			if (!ev) {
    5610:	2e00      	cmp	r6, #0
    5612:	f000 808d 	beq.w	5730 <usbd_event_transfer_data+0x300>
				p_event->data.eptransfer.ep);
    5616:	78a3      	ldrb	r3, [r4, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    5618:	f994 2002 	ldrsb.w	r2, [r4, #2]
    561c:	2a00      	cmp	r2, #0
    561e:	db57      	blt.n	56d0 <usbd_event_transfer_data+0x2a0>
            ret = p_reg->EPIN[epnr].AMOUNT;
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    5620:	f013 0f08 	tst.w	r3, #8
    5624:	d067      	beq.n	56f6 <usbd_event_transfer_data+0x2c6>
        {
            ret = p_reg->ISOOUT.AMOUNT;
    5626:	4b4c      	ldr	r3, [pc, #304]	; (5758 <usbd_event_transfer_data+0x328>)
    5628:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
    562c:	60eb      	str	r3, [r5, #12]
			ev->evt_type = USBD_EVT_EP;
    562e:	2301      	movs	r3, #1
    5630:	7433      	strb	r3, [r6, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    5632:	2302      	movs	r3, #2
    5634:	7333      	strb	r3, [r6, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    5636:	60b5      	str	r5, [r6, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    5638:	4631      	mov	r1, r6
    563a:	483f      	ldr	r0, [pc, #252]	; (5738 <usbd_event_transfer_data+0x308>)
    563c:	f008 fe62 	bl	e304 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    5640:	493e      	ldr	r1, [pc, #248]	; (573c <usbd_event_transfer_data+0x30c>)
    5642:	483f      	ldr	r0, [pc, #252]	; (5740 <usbd_event_transfer_data+0x310>)
    5644:	f008 fe7f 	bl	e346 <k_work_submit_to_queue>
}
    5648:	e072      	b.n	5730 <usbd_event_transfer_data+0x300>
    564a:	4b3e      	ldr	r3, [pc, #248]	; (5744 <usbd_event_transfer_data+0x314>)
    564c:	4a3e      	ldr	r2, [pc, #248]	; (5748 <usbd_event_transfer_data+0x318>)
    564e:	1a9b      	subs	r3, r3, r2
    5650:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    5652:	f04f 0100 	mov.w	r1, #0
    5656:	2201      	movs	r2, #1
    5658:	f362 0102 	bfi	r1, r2, #0, #3
    565c:	f36f 01c5 	bfc	r1, #3, #3
    5660:	f363 118f 	bfi	r1, r3, #6, #10
    5664:	483a      	ldr	r0, [pc, #232]	; (5750 <usbd_event_transfer_data+0x320>)
    5666:	f7fc f88f 	bl	1788 <log_0>
static inline void usbd_evt_flush(void)
    566a:	e004      	b.n	5676 <usbd_event_transfer_data+0x246>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    566c:	1d01      	adds	r1, r0, #4
    566e:	4831      	ldr	r0, [pc, #196]	; (5734 <usbd_event_transfer_data+0x304>)
    5670:	f008 fd31 	bl	e0d6 <k_mem_slab_free>
	} while (ev != NULL);
    5674:	b146      	cbz	r6, 5688 <usbd_event_transfer_data+0x258>
    5676:	2200      	movs	r2, #0
    5678:	2300      	movs	r3, #0
    567a:	482f      	ldr	r0, [pc, #188]	; (5738 <usbd_event_transfer_data+0x308>)
    567c:	f005 f856 	bl	a72c <z_impl_k_queue_get>
		if (ev) {
    5680:	4606      	mov	r6, r0
    5682:	2800      	cmp	r0, #0
    5684:	d1f2      	bne.n	566c <usbd_event_transfer_data+0x23c>
    5686:	e7f5      	b.n	5674 <usbd_event_transfer_data+0x244>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    5688:	2200      	movs	r2, #0
    568a:	2300      	movs	r3, #0
    568c:	a901      	add	r1, sp, #4
    568e:	4829      	ldr	r0, [pc, #164]	; (5734 <usbd_event_transfer_data+0x304>)
    5690:	f004 fe3a 	bl	a308 <k_mem_slab_alloc>
    5694:	b180      	cbz	r0, 56b8 <usbd_event_transfer_data+0x288>
    5696:	4b2b      	ldr	r3, [pc, #172]	; (5744 <usbd_event_transfer_data+0x314>)
    5698:	4a2b      	ldr	r2, [pc, #172]	; (5748 <usbd_event_transfer_data+0x318>)
    569a:	1a9b      	subs	r3, r3, r2
    569c:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    569e:	f04f 0100 	mov.w	r1, #0
    56a2:	2201      	movs	r2, #1
    56a4:	f362 0102 	bfi	r1, r2, #0, #3
    56a8:	f36f 01c5 	bfc	r1, #3, #3
    56ac:	f363 118f 	bfi	r1, r3, #6, #10
    56b0:	4828      	ldr	r0, [pc, #160]	; (5754 <usbd_event_transfer_data+0x324>)
    56b2:	f7fc f869 	bl	1788 <log_0>
			return NULL;
    56b6:	e7ab      	b.n	5610 <usbd_event_transfer_data+0x1e0>
		ev = (struct usbd_event *)block.data;
    56b8:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    56ba:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    56bc:	2304      	movs	r3, #4
    56be:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    56c0:	481d      	ldr	r0, [pc, #116]	; (5738 <usbd_event_transfer_data+0x308>)
    56c2:	f008 fe1f 	bl	e304 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    56c6:	491d      	ldr	r1, [pc, #116]	; (573c <usbd_event_transfer_data+0x30c>)
    56c8:	481d      	ldr	r0, [pc, #116]	; (5740 <usbd_event_transfer_data+0x310>)
    56ca:	f008 fe3c 	bl	e346 <k_work_submit_to_queue>
		return NULL;
    56ce:	e79f      	b.n	5610 <usbd_event_transfer_data+0x1e0>
        if (NRF_USBD_EPISO_CHECK(ep))
    56d0:	f013 0f08 	tst.w	r3, #8
    56d4:	d003      	beq.n	56de <usbd_event_transfer_data+0x2ae>
            ret = p_reg->ISOIN.AMOUNT;
    56d6:	4b20      	ldr	r3, [pc, #128]	; (5758 <usbd_event_transfer_data+0x328>)
    56d8:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
    56dc:	e7a6      	b.n	562c <usbd_event_transfer_data+0x1fc>
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    56de:	f003 030f 	and.w	r3, r3, #15
            ret = p_reg->EPIN[epnr].AMOUNT;
    56e2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    56e6:	009b      	lsls	r3, r3, #2
    56e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    56ec:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    56f0:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    56f4:	e79a      	b.n	562c <usbd_event_transfer_data+0x1fc>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    56f6:	f003 030f 	and.w	r3, r3, #15
            ret = p_reg->EPOUT[epnr].AMOUNT;
    56fa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    56fe:	009b      	lsls	r3, r3, #2
    5700:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5704:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    5708:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    570c:	e78e      	b.n	562c <usbd_event_transfer_data+0x1fc>
    570e:	4a0d      	ldr	r2, [pc, #52]	; (5744 <usbd_event_transfer_data+0x314>)
    5710:	4b0d      	ldr	r3, [pc, #52]	; (5748 <usbd_event_transfer_data+0x318>)
    5712:	1ad2      	subs	r2, r2, r3
    5714:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    5716:	f04f 0300 	mov.w	r3, #0
    571a:	2001      	movs	r0, #1
    571c:	f360 0302 	bfi	r3, r0, #0, #3
    5720:	f36f 03c5 	bfc	r3, #3, #3
    5724:	f362 138f 	bfi	r3, r2, #6, #10
    5728:	4632      	mov	r2, r6
    572a:	4808      	ldr	r0, [pc, #32]	; (574c <usbd_event_transfer_data+0x31c>)
    572c:	f7fb fff0 	bl	1710 <log_2>
}
    5730:	b002      	add	sp, #8
    5732:	bd70      	pop	{r4, r5, r6, pc}
    5734:	20000234 	.word	0x20000234
    5738:	200002d8 	.word	0x200002d8
    573c:	20001ab0 	.word	0x20001ab0
    5740:	20000588 	.word	0x20000588
    5744:	0000ecac 	.word	0x0000ecac
    5748:	0000ec4c 	.word	0x0000ec4c
    574c:	0000f9f0 	.word	0x0000f9f0
    5750:	0000f8f0 	.word	0x0000f8f0
    5754:	0000f910 	.word	0x0000f910
    5758:	40027000 	.word	0x40027000

0000575c <usbd_event_handler>:
{
    575c:	b510      	push	{r4, lr}
    575e:	b088      	sub	sp, #32
	struct usbd_event evt = {0};
    5760:	2300      	movs	r3, #0
    5762:	9303      	str	r3, [sp, #12]
    5764:	9304      	str	r3, [sp, #16]
    5766:	9305      	str	r3, [sp, #20]
    5768:	9306      	str	r3, [sp, #24]
    576a:	9307      	str	r3, [sp, #28]
	switch (p_event->type) {
    576c:	7803      	ldrb	r3, [r0, #0]
    576e:	3b01      	subs	r3, #1
    5770:	2b05      	cmp	r3, #5
    5772:	d826      	bhi.n	57c2 <usbd_event_handler+0x66>
    5774:	e8df f003 	tbb	[pc, r3]
    5778:	2e270335 	.word	0x2e270335
    577c:	3953      	.short	0x3953
		evt.evt_type = USBD_EVT_POWER;
    577e:	2300      	movs	r3, #0
    5780:	f88d 301c 	strb.w	r3, [sp, #28]
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    5784:	2303      	movs	r3, #3
    5786:	f88d 3014 	strb.w	r3, [sp, #20]
	if (k_mem_slab_alloc(&fifo_elem_slab,
    578a:	2200      	movs	r2, #0
    578c:	2300      	movs	r3, #0
    578e:	a901      	add	r1, sp, #4
    5790:	4850      	ldr	r0, [pc, #320]	; (58d4 <usbd_event_handler+0x178>)
    5792:	f004 fdb9 	bl	a308 <k_mem_slab_alloc>
    5796:	2800      	cmp	r0, #0
    5798:	d159      	bne.n	584e <usbd_event_handler+0xf2>
	ev = (struct usbd_event *)block.data;
    579a:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    579c:	6064      	str	r4, [r4, #4]
		if (!ev) {
    579e:	b184      	cbz	r4, 57c2 <usbd_event_handler+0x66>
		ev->evt_type = evt.evt_type;
    57a0:	f89d 301c 	ldrb.w	r3, [sp, #28]
    57a4:	7423      	strb	r3, [r4, #16]
		ev->evt = evt.evt;
    57a6:	f104 0308 	add.w	r3, r4, #8
    57aa:	9906      	ldr	r1, [sp, #24]
    57ac:	9805      	ldr	r0, [sp, #20]
    57ae:	e883 0003 	stmia.w	r3, {r0, r1}
	k_fifo_put(&usbd_evt_fifo, ev);
    57b2:	4621      	mov	r1, r4
    57b4:	4848      	ldr	r0, [pc, #288]	; (58d8 <usbd_event_handler+0x17c>)
    57b6:	f008 fda5 	bl	e304 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    57ba:	4948      	ldr	r1, [pc, #288]	; (58dc <usbd_event_handler+0x180>)
    57bc:	4848      	ldr	r0, [pc, #288]	; (58e0 <usbd_event_handler+0x184>)
    57be:	f008 fdc2 	bl	e346 <k_work_submit_to_queue>
}
    57c2:	b008      	add	sp, #32
    57c4:	bd10      	pop	{r4, pc}
		evt.evt_type = USBD_EVT_POWER;
    57c6:	2300      	movs	r3, #0
    57c8:	f88d 301c 	strb.w	r3, [sp, #28]
		evt.evt.pwr_evt.state = USBD_RESUMED;
    57cc:	2304      	movs	r3, #4
    57ce:	f88d 3014 	strb.w	r3, [sp, #20]
	if (put_evt) {
    57d2:	e7da      	b.n	578a <usbd_event_handler+0x2e>
		evt.evt_type = USBD_EVT_POWER;
    57d4:	2300      	movs	r3, #0
    57d6:	f88d 301c 	strb.w	r3, [sp, #28]
		evt.evt.pwr_evt.state = USBD_RESUMED;
    57da:	2304      	movs	r3, #4
    57dc:	f88d 3014 	strb.w	r3, [sp, #20]
	if (put_evt) {
    57e0:	e7d3      	b.n	578a <usbd_event_handler+0x2e>
		evt.evt_type = USBD_EVT_RESET;
    57e2:	2302      	movs	r3, #2
    57e4:	f88d 301c 	strb.w	r3, [sp, #28]
	if (put_evt) {
    57e8:	e7cf      	b.n	578a <usbd_event_handler+0x2e>
    57ea:	4604      	mov	r4, r0
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    57ec:	7880      	ldrb	r0, [r0, #2]
    57ee:	f7ff f8eb 	bl	49c8 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    57f2:	7a83      	ldrb	r3, [r0, #10]
    57f4:	2b01      	cmp	r3, #1
    57f6:	d00e      	beq.n	5816 <usbd_event_handler+0xba>
    57f8:	d805      	bhi.n	5806 <usbd_event_handler+0xaa>
    57fa:	2b00      	cmp	r3, #0
    57fc:	d1e1      	bne.n	57c2 <usbd_event_handler+0x66>
			usbd_event_transfer_ctrl(p_event);
    57fe:	4620      	mov	r0, r4
    5800:	f7ff fc7e 	bl	5100 <usbd_event_transfer_ctrl>
	if (put_evt) {
    5804:	e7dd      	b.n	57c2 <usbd_event_handler+0x66>
    5806:	3b02      	subs	r3, #2
    5808:	b2db      	uxtb	r3, r3
    580a:	2b01      	cmp	r3, #1
    580c:	d8d9      	bhi.n	57c2 <usbd_event_handler+0x66>
			usbd_event_transfer_data(p_event);
    580e:	4620      	mov	r0, r4
    5810:	f7ff fe0e 	bl	5430 <usbd_event_transfer_data>
	if (put_evt) {
    5814:	e7d5      	b.n	57c2 <usbd_event_handler+0x66>
			usbd_event_transfer_data(p_event);
    5816:	4620      	mov	r0, r4
    5818:	f7ff fe0a 	bl	5430 <usbd_event_transfer_data>
	if (put_evt) {
    581c:	e7d1      	b.n	57c2 <usbd_event_handler+0x66>
		nrfx_usbd_setup_get(&drv_setup);
    581e:	a801      	add	r0, sp, #4
    5820:	f003 fe40 	bl	94a4 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
    5824:	f89d 3005 	ldrb.w	r3, [sp, #5]
    5828:	2b05      	cmp	r3, #5
    582a:	d00a      	beq.n	5842 <usbd_event_handler+0xe6>
				endpoint_ctx(NRF_USBD_EPOUT(0));
    582c:	2000      	movs	r0, #0
    582e:	f7ff f8cb 	bl	49c8 <endpoint_ctx>
			evt.evt_type = USBD_EVT_EP;
    5832:	2301      	movs	r3, #1
    5834:	f88d 301c 	strb.w	r3, [sp, #28]
			evt.evt.ep_evt.ep = ep_ctx;
    5838:	9005      	str	r0, [sp, #20]
			evt.evt.ep_evt.evt_type = EP_EVT_SETUP_RECV;
    583a:	2300      	movs	r3, #0
    583c:	f88d 3018 	strb.w	r3, [sp, #24]
	if (put_evt) {
    5840:	e7a3      	b.n	578a <usbd_event_handler+0x2e>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
    5842:	f89d 3004 	ldrb.w	r3, [sp, #4]
    5846:	f013 0f60 	tst.w	r3, #96	; 0x60
    584a:	d0ba      	beq.n	57c2 <usbd_event_handler+0x66>
    584c:	e7ee      	b.n	582c <usbd_event_handler+0xd0>
    584e:	4b25      	ldr	r3, [pc, #148]	; (58e4 <usbd_event_handler+0x188>)
    5850:	4a25      	ldr	r2, [pc, #148]	; (58e8 <usbd_event_handler+0x18c>)
    5852:	1a9b      	subs	r3, r3, r2
    5854:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    5856:	f04f 0100 	mov.w	r1, #0
    585a:	2201      	movs	r2, #1
    585c:	f362 0102 	bfi	r1, r2, #0, #3
    5860:	f36f 01c5 	bfc	r1, #3, #3
    5864:	f363 118f 	bfi	r1, r3, #6, #10
    5868:	4820      	ldr	r0, [pc, #128]	; (58ec <usbd_event_handler+0x190>)
    586a:	f7fb ff8d 	bl	1788 <log_0>
static inline void usbd_evt_flush(void)
    586e:	e004      	b.n	587a <usbd_event_handler+0x11e>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    5870:	1d01      	adds	r1, r0, #4
    5872:	4818      	ldr	r0, [pc, #96]	; (58d4 <usbd_event_handler+0x178>)
    5874:	f008 fc2f 	bl	e0d6 <k_mem_slab_free>
	} while (ev != NULL);
    5878:	b144      	cbz	r4, 588c <usbd_event_handler+0x130>
    587a:	2200      	movs	r2, #0
    587c:	2300      	movs	r3, #0
    587e:	4816      	ldr	r0, [pc, #88]	; (58d8 <usbd_event_handler+0x17c>)
    5880:	f004 ff54 	bl	a72c <z_impl_k_queue_get>
		if (ev) {
    5884:	4604      	mov	r4, r0
    5886:	2800      	cmp	r0, #0
    5888:	d1f2      	bne.n	5870 <usbd_event_handler+0x114>
    588a:	e7f5      	b.n	5878 <usbd_event_handler+0x11c>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    588c:	2200      	movs	r2, #0
    588e:	2300      	movs	r3, #0
    5890:	a901      	add	r1, sp, #4
    5892:	4810      	ldr	r0, [pc, #64]	; (58d4 <usbd_event_handler+0x178>)
    5894:	f004 fd38 	bl	a308 <k_mem_slab_alloc>
    5898:	b180      	cbz	r0, 58bc <usbd_event_handler+0x160>
    589a:	4b12      	ldr	r3, [pc, #72]	; (58e4 <usbd_event_handler+0x188>)
    589c:	4a12      	ldr	r2, [pc, #72]	; (58e8 <usbd_event_handler+0x18c>)
    589e:	1a9b      	subs	r3, r3, r2
    58a0:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    58a2:	f04f 0100 	mov.w	r1, #0
    58a6:	2201      	movs	r2, #1
    58a8:	f362 0102 	bfi	r1, r2, #0, #3
    58ac:	f36f 01c5 	bfc	r1, #3, #3
    58b0:	f363 118f 	bfi	r1, r3, #6, #10
    58b4:	480e      	ldr	r0, [pc, #56]	; (58f0 <usbd_event_handler+0x194>)
    58b6:	f7fb ff67 	bl	1788 <log_0>
			return NULL;
    58ba:	e770      	b.n	579e <usbd_event_handler+0x42>
		ev = (struct usbd_event *)block.data;
    58bc:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    58be:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    58c0:	2304      	movs	r3, #4
    58c2:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    58c4:	4804      	ldr	r0, [pc, #16]	; (58d8 <usbd_event_handler+0x17c>)
    58c6:	f008 fd1d 	bl	e304 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    58ca:	4904      	ldr	r1, [pc, #16]	; (58dc <usbd_event_handler+0x180>)
    58cc:	4804      	ldr	r0, [pc, #16]	; (58e0 <usbd_event_handler+0x184>)
    58ce:	f008 fd3a 	bl	e346 <k_work_submit_to_queue>
		return NULL;
    58d2:	e764      	b.n	579e <usbd_event_handler+0x42>
    58d4:	20000234 	.word	0x20000234
    58d8:	200002d8 	.word	0x200002d8
    58dc:	20001ab0 	.word	0x20001ab0
    58e0:	20000588 	.word	0x20000588
    58e4:	0000ecac 	.word	0x0000ecac
    58e8:	0000ec4c 	.word	0x0000ec4c
    58ec:	0000f8f0 	.word	0x0000f8f0
    58f0:	0000f910 	.word	0x0000f910

000058f4 <usb_dc_attach>:
{
    58f4:	b510      	push	{r4, lr}
	if (ctx->attached) {
    58f6:	4b1d      	ldr	r3, [pc, #116]	; (596c <usb_dc_attach+0x78>)
    58f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    58fc:	b113      	cbz	r3, 5904 <usb_dc_attach+0x10>
		return 0;
    58fe:	2400      	movs	r4, #0
}
    5900:	4620      	mov	r0, r4
    5902:	bd10      	pop	{r4, pc}
	return z_impl_k_mutex_init(mutex);
    5904:	4c19      	ldr	r4, [pc, #100]	; (596c <usb_dc_attach+0x78>)
    5906:	f104 0038 	add.w	r0, r4, #56	; 0x38
    590a:	f008 fc77 	bl	e1fc <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
    590e:	2000      	movs	r0, #0
    5910:	f000 fd36 	bl	6380 <z_nrf_clock_control_get_onoff>
	ctx->hfxo_mgr =
    5914:	61e0      	str	r0, [r4, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5916:	2200      	movs	r2, #0
    5918:	2101      	movs	r1, #1
    591a:	2027      	movs	r0, #39	; 0x27
    591c:	f7fe f9b2 	bl	3c84 <z_arm_irq_priority_set>
	err = nrfx_usbd_init(usbd_event_handler);
    5920:	4813      	ldr	r0, [pc, #76]	; (5970 <usb_dc_attach+0x7c>)
    5922:	f003 f947 	bl	8bb4 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
    5926:	4b13      	ldr	r3, [pc, #76]	; (5974 <usb_dc_attach+0x80>)
    5928:	4298      	cmp	r0, r3
    592a:	d11b      	bne.n	5964 <usb_dc_attach+0x70>
	nrfx_power_usbevt_enable();
    592c:	f008 fafa 	bl	df24 <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
    5930:	f7ff f87e 	bl	4a30 <eps_ctx_init>
	if (ret == 0) {
    5934:	4604      	mov	r4, r0
    5936:	b918      	cbnz	r0, 5940 <usb_dc_attach+0x4c>
		ctx->attached = true;
    5938:	4b0c      	ldr	r3, [pc, #48]	; (596c <usb_dc_attach+0x78>)
    593a:	2201      	movs	r2, #1
    593c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
    5940:	4b0d      	ldr	r3, [pc, #52]	; (5978 <usb_dc_attach+0x84>)
    5942:	681b      	ldr	r3, [r3, #0]
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
    5944:	b11b      	cbz	r3, 594e <usb_dc_attach+0x5a>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    5946:	490d      	ldr	r1, [pc, #52]	; (597c <usb_dc_attach+0x88>)
    5948:	480d      	ldr	r0, [pc, #52]	; (5980 <usb_dc_attach+0x8c>)
    594a:	f008 fcfc 	bl	e346 <k_work_submit_to_queue>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
    594e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5952:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
    5956:	f013 0f01 	tst.w	r3, #1
    595a:	d0d1      	beq.n	5900 <usb_dc_attach+0xc>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
    595c:	2000      	movs	r0, #0
    595e:	f7ff f935 	bl	4bcc <usb_dc_power_event_handler>
    5962:	e7cd      	b.n	5900 <usb_dc_attach+0xc>
		return -EIO;
    5964:	f06f 0404 	mvn.w	r4, #4
    5968:	e7ca      	b.n	5900 <usb_dc_attach+0xc>
    596a:	bf00      	nop
    596c:	20001a88 	.word	0x20001a88
    5970:	0000575d 	.word	0x0000575d
    5974:	0bad0000 	.word	0x0bad0000
    5978:	200002d8 	.word	0x200002d8
    597c:	20001ab0 	.word	0x20001ab0
    5980:	20000588 	.word	0x20000588

00005984 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
    5984:	4b07      	ldr	r3, [pc, #28]	; (59a4 <usb_dc_set_address+0x20>)
    5986:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    598a:	b12b      	cbz	r3, 5998 <usb_dc_set_address+0x14>
	return get_usbd_ctx()->ready;
    598c:	4b05      	ldr	r3, [pc, #20]	; (59a4 <usb_dc_set_address+0x20>)
    598e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    5992:	b123      	cbz	r3, 599e <usb_dc_set_address+0x1a>
	return 0;
    5994:	2000      	movs	r0, #0
    5996:	4770      	bx	lr
		return -ENODEV;
    5998:	f06f 0012 	mvn.w	r0, #18
    599c:	4770      	bx	lr
    599e:	f06f 0012 	mvn.w	r0, #18
}
    59a2:	4770      	bx	lr
    59a4:	20001a88 	.word	0x20001a88

000059a8 <usb_dc_ep_check_cap>:
{
    59a8:	b508      	push	{r3, lr}
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    59aa:	7801      	ldrb	r1, [r0, #0]
    59ac:	f001 020f 	and.w	r2, r1, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    59b0:	7903      	ldrb	r3, [r0, #4]
    59b2:	b903      	cbnz	r3, 59b6 <usb_dc_ep_check_cap+0xe>
    59b4:	b92a      	cbnz	r2, 59c2 <usb_dc_ep_check_cap+0x1a>
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    59b6:	2a08      	cmp	r2, #8
    59b8:	d816      	bhi.n	59e8 <usb_dc_ep_check_cap+0x40>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    59ba:	2b01      	cmp	r3, #1
    59bc:	d027      	beq.n	5a0e <usb_dc_ep_check_cap+0x66>
	return 0;
    59be:	2000      	movs	r0, #0
}
    59c0:	bd08      	pop	{r3, pc}
    59c2:	4b17      	ldr	r3, [pc, #92]	; (5a20 <usb_dc_ep_check_cap+0x78>)
    59c4:	4a17      	ldr	r2, [pc, #92]	; (5a24 <usb_dc_ep_check_cap+0x7c>)
    59c6:	1a9b      	subs	r3, r3, r2
    59c8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("invalid endpoint configuration");
    59ca:	f04f 0100 	mov.w	r1, #0
    59ce:	2201      	movs	r2, #1
    59d0:	f362 0102 	bfi	r1, r2, #0, #3
    59d4:	f36f 01c5 	bfc	r1, #3, #3
    59d8:	f363 118f 	bfi	r1, r3, #6, #10
    59dc:	4812      	ldr	r0, [pc, #72]	; (5a28 <usb_dc_ep_check_cap+0x80>)
    59de:	f7fb fed3 	bl	1788 <log_0>
		return -1;
    59e2:	f04f 30ff 	mov.w	r0, #4294967295
    59e6:	e7eb      	b.n	59c0 <usb_dc_ep_check_cap+0x18>
    59e8:	4b0d      	ldr	r3, [pc, #52]	; (5a20 <usb_dc_ep_check_cap+0x78>)
    59ea:	4a0e      	ldr	r2, [pc, #56]	; (5a24 <usb_dc_ep_check_cap+0x7c>)
    59ec:	1a9b      	subs	r3, r3, r2
    59ee:	08db      	lsrs	r3, r3, #3
		LOG_ERR("invalid endpoint index/address");
    59f0:	f04f 0100 	mov.w	r1, #0
    59f4:	2201      	movs	r2, #1
    59f6:	f362 0102 	bfi	r1, r2, #0, #3
    59fa:	f36f 01c5 	bfc	r1, #3, #3
    59fe:	f363 118f 	bfi	r1, r3, #6, #10
    5a02:	480a      	ldr	r0, [pc, #40]	; (5a2c <usb_dc_ep_check_cap+0x84>)
    5a04:	f7fb fec0 	bl	1788 <log_0>
		return -1;
    5a08:	f04f 30ff 	mov.w	r0, #4294967295
    5a0c:	e7d8      	b.n	59c0 <usb_dc_ep_check_cap+0x18>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    5a0e:	f011 0f08 	tst.w	r1, #8
    5a12:	d001      	beq.n	5a18 <usb_dc_ep_check_cap+0x70>
	return 0;
    5a14:	2000      	movs	r0, #0
    5a16:	e7d3      	b.n	59c0 <usb_dc_ep_check_cap+0x18>
		return -1;
    5a18:	f04f 30ff 	mov.w	r0, #4294967295
    5a1c:	e7d0      	b.n	59c0 <usb_dc_ep_check_cap+0x18>
    5a1e:	bf00      	nop
    5a20:	0000ecac 	.word	0x0000ecac
    5a24:	0000ec4c 	.word	0x0000ec4c
    5a28:	0000fa3c 	.word	0x0000fa3c
    5a2c:	0000fa5c 	.word	0x0000fa5c

00005a30 <usb_dc_ep_configure>:
{
    5a30:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    5a32:	4b1a      	ldr	r3, [pc, #104]	; (5a9c <usb_dc_ep_configure+0x6c>)
    5a34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
    5a38:	b353      	cbz	r3, 5a90 <usb_dc_ep_configure+0x60>
    5a3a:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    5a3c:	7805      	ldrb	r5, [r0, #0]
    5a3e:	4628      	mov	r0, r5
    5a40:	f7fe ffc2 	bl	49c8 <endpoint_ctx>
	if (!ep_ctx) {
    5a44:	b338      	cbz	r0, 5a96 <usb_dc_ep_configure+0x66>
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    5a46:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    5a48:	7922      	ldrb	r2, [r4, #4]
    5a4a:	7282      	strb	r2, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    5a4c:	8862      	ldrh	r2, [r4, #2]
    5a4e:	6042      	str	r2, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    5a50:	7820      	ldrb	r0, [r4, #0]
    5a52:	f010 0f08 	tst.w	r0, #8
    5a56:	d103      	bne.n	5a60 <usb_dc_ep_configure+0x30>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    5a58:	8863      	ldrh	r3, [r4, #2]
    5a5a:	1e5a      	subs	r2, r3, #1
    5a5c:	4213      	tst	r3, r2
    5a5e:	d104      	bne.n	5a6a <usb_dc_ep_configure+0x3a>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    5a60:	8861      	ldrh	r1, [r4, #2]
    5a62:	f003 f897 	bl	8b94 <nrfx_usbd_ep_max_packet_size_set>
	return 0;
    5a66:	2000      	movs	r0, #0
}
    5a68:	bd38      	pop	{r3, r4, r5, pc}
    5a6a:	4b0d      	ldr	r3, [pc, #52]	; (5aa0 <usb_dc_ep_configure+0x70>)
    5a6c:	4a0d      	ldr	r2, [pc, #52]	; (5aa4 <usb_dc_ep_configure+0x74>)
    5a6e:	1a9b      	subs	r3, r3, r2
    5a70:	08db      	lsrs	r3, r3, #3
			LOG_ERR("EP max packet size must be a power of 2");
    5a72:	f04f 0100 	mov.w	r1, #0
    5a76:	2201      	movs	r2, #1
    5a78:	f362 0102 	bfi	r1, r2, #0, #3
    5a7c:	f36f 01c5 	bfc	r1, #3, #3
    5a80:	f363 118f 	bfi	r1, r3, #6, #10
    5a84:	4808      	ldr	r0, [pc, #32]	; (5aa8 <usb_dc_ep_configure+0x78>)
    5a86:	f7fb fe7f 	bl	1788 <log_0>
			return -EINVAL;
    5a8a:	f06f 0015 	mvn.w	r0, #21
    5a8e:	e7eb      	b.n	5a68 <usb_dc_ep_configure+0x38>
		return -ENODEV;
    5a90:	f06f 0012 	mvn.w	r0, #18
    5a94:	e7e8      	b.n	5a68 <usb_dc_ep_configure+0x38>
		return -EINVAL;
    5a96:	f06f 0015 	mvn.w	r0, #21
    5a9a:	e7e5      	b.n	5a68 <usb_dc_ep_configure+0x38>
    5a9c:	20001a88 	.word	0x20001a88
    5aa0:	0000ecac 	.word	0x0000ecac
    5aa4:	0000ec4c 	.word	0x0000ec4c
    5aa8:	0000fa7c 	.word	0x0000fa7c

00005aac <usb_dc_ep_set_stall>:
{
    5aac:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    5aae:	4b1e      	ldr	r3, [pc, #120]	; (5b28 <usb_dc_ep_set_stall+0x7c>)
    5ab0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    5ab4:	b37b      	cbz	r3, 5b16 <usb_dc_ep_set_stall+0x6a>
    5ab6:	4604      	mov	r4, r0
	return get_usbd_ctx()->ready;
    5ab8:	4b1b      	ldr	r3, [pc, #108]	; (5b28 <usb_dc_ep_set_stall+0x7c>)
    5aba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    5abe:	b36b      	cbz	r3, 5b1c <usb_dc_ep_set_stall+0x70>
	ep_ctx = endpoint_ctx(ep);
    5ac0:	f7fe ff82 	bl	49c8 <endpoint_ctx>
	if (!ep_ctx) {
    5ac4:	4605      	mov	r5, r0
    5ac6:	b360      	cbz	r0, 5b22 <usb_dc_ep_set_stall+0x76>
	switch (ep_ctx->cfg.type) {
    5ac8:	7a83      	ldrb	r3, [r0, #10]
    5aca:	2b01      	cmp	r3, #1
    5acc:	d010      	beq.n	5af0 <usb_dc_ep_set_stall+0x44>
    5ace:	d807      	bhi.n	5ae0 <usb_dc_ep_set_stall+0x34>
    5ad0:	b90b      	cbnz	r3, 5ad6 <usb_dc_ep_set_stall+0x2a>
		nrfx_usbd_setup_stall();
    5ad2:	f003 fd6d 	bl	95b0 <nrfx_usbd_setup_stall>
	ep_ctx->buf.len = 0U;
    5ad6:	2000      	movs	r0, #0
    5ad8:	60e8      	str	r0, [r5, #12]
	ep_ctx->buf.curr = ep_ctx->buf.data;
    5ada:	696b      	ldr	r3, [r5, #20]
    5adc:	61ab      	str	r3, [r5, #24]
}
    5ade:	bd38      	pop	{r3, r4, r5, pc}
	switch (ep_ctx->cfg.type) {
    5ae0:	3b02      	subs	r3, #2
    5ae2:	b2db      	uxtb	r3, r3
    5ae4:	2b01      	cmp	r3, #1
    5ae6:	d8f6      	bhi.n	5ad6 <usb_dc_ep_set_stall+0x2a>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    5ae8:	4620      	mov	r0, r4
    5aea:	f003 fca7 	bl	943c <nrfx_usbd_ep_stall>
		break;
    5aee:	e7f2      	b.n	5ad6 <usb_dc_ep_set_stall+0x2a>
    5af0:	4b0e      	ldr	r3, [pc, #56]	; (5b2c <usb_dc_ep_set_stall+0x80>)
    5af2:	4a0f      	ldr	r2, [pc, #60]	; (5b30 <usb_dc_ep_set_stall+0x84>)
    5af4:	1a9b      	subs	r3, r3, r2
    5af6:	08db      	lsrs	r3, r3, #3
		LOG_ERR("STALL unsupported on ISO endpoint");
    5af8:	f04f 0100 	mov.w	r1, #0
    5afc:	2201      	movs	r2, #1
    5afe:	f362 0102 	bfi	r1, r2, #0, #3
    5b02:	f36f 01c5 	bfc	r1, #3, #3
    5b06:	f363 118f 	bfi	r1, r3, #6, #10
    5b0a:	480a      	ldr	r0, [pc, #40]	; (5b34 <usb_dc_ep_set_stall+0x88>)
    5b0c:	f7fb fe3c 	bl	1788 <log_0>
		return -EINVAL;
    5b10:	f06f 0015 	mvn.w	r0, #21
    5b14:	e7e3      	b.n	5ade <usb_dc_ep_set_stall+0x32>
		return -ENODEV;
    5b16:	f06f 0012 	mvn.w	r0, #18
    5b1a:	e7e0      	b.n	5ade <usb_dc_ep_set_stall+0x32>
    5b1c:	f06f 0012 	mvn.w	r0, #18
    5b20:	e7dd      	b.n	5ade <usb_dc_ep_set_stall+0x32>
		return -EINVAL;
    5b22:	f06f 0015 	mvn.w	r0, #21
    5b26:	e7da      	b.n	5ade <usb_dc_ep_set_stall+0x32>
    5b28:	20001a88 	.word	0x20001a88
    5b2c:	0000ecac 	.word	0x0000ecac
    5b30:	0000ec4c 	.word	0x0000ec4c
    5b34:	0000faa4 	.word	0x0000faa4

00005b38 <usb_dc_ep_clear_stall>:
	return get_usbd_ctx()->attached;
    5b38:	4b11      	ldr	r3, [pc, #68]	; (5b80 <usb_dc_ep_clear_stall+0x48>)
    5b3a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    5b3e:	b19b      	cbz	r3, 5b68 <usb_dc_ep_clear_stall+0x30>
{
    5b40:	b510      	push	{r4, lr}
    5b42:	4604      	mov	r4, r0
	return get_usbd_ctx()->ready;
    5b44:	4b0e      	ldr	r3, [pc, #56]	; (5b80 <usb_dc_ep_clear_stall+0x48>)
    5b46:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    5b4a:	b183      	cbz	r3, 5b6e <usb_dc_ep_clear_stall+0x36>
	ep_ctx = endpoint_ctx(ep);
    5b4c:	f7fe ff3c 	bl	49c8 <endpoint_ctx>
	if (!ep_ctx) {
    5b50:	b180      	cbz	r0, 5b74 <usb_dc_ep_clear_stall+0x3c>
	if (NRF_USBD_EPISO_CHECK(ep)) {
    5b52:	f014 0f08 	tst.w	r4, #8
    5b56:	d110      	bne.n	5b7a <usb_dc_ep_clear_stall+0x42>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    5b58:	4620      	mov	r0, r4
    5b5a:	f003 fc97 	bl	948c <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    5b5e:	4620      	mov	r0, r4
    5b60:	f003 fed2 	bl	9908 <nrfx_usbd_ep_stall_clear>
	return 0;
    5b64:	2000      	movs	r0, #0
}
    5b66:	bd10      	pop	{r4, pc}
		return -ENODEV;
    5b68:	f06f 0012 	mvn.w	r0, #18
}
    5b6c:	4770      	bx	lr
		return -ENODEV;
    5b6e:	f06f 0012 	mvn.w	r0, #18
    5b72:	e7f8      	b.n	5b66 <usb_dc_ep_clear_stall+0x2e>
		return -EINVAL;
    5b74:	f06f 0015 	mvn.w	r0, #21
    5b78:	e7f5      	b.n	5b66 <usb_dc_ep_clear_stall+0x2e>
		return -EINVAL;
    5b7a:	f06f 0015 	mvn.w	r0, #21
    5b7e:	e7f2      	b.n	5b66 <usb_dc_ep_clear_stall+0x2e>
    5b80:	20001a88 	.word	0x20001a88

00005b84 <usb_dc_ep_is_stalled>:
{
    5b84:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    5b86:	4b10      	ldr	r3, [pc, #64]	; (5bc8 <usb_dc_ep_is_stalled+0x44>)
    5b88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    5b8c:	b17b      	cbz	r3, 5bae <usb_dc_ep_is_stalled+0x2a>
    5b8e:	4604      	mov	r4, r0
    5b90:	460d      	mov	r5, r1
	return get_usbd_ctx()->ready;
    5b92:	4b0d      	ldr	r3, [pc, #52]	; (5bc8 <usb_dc_ep_is_stalled+0x44>)
    5b94:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    5b98:	b163      	cbz	r3, 5bb4 <usb_dc_ep_is_stalled+0x30>
	ep_ctx = endpoint_ctx(ep);
    5b9a:	f7fe ff15 	bl	49c8 <endpoint_ctx>
	if (!ep_ctx) {
    5b9e:	b160      	cbz	r0, 5bba <usb_dc_ep_is_stalled+0x36>
	if (!stalled) {
    5ba0:	b175      	cbz	r5, 5bc0 <usb_dc_ep_is_stalled+0x3c>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    5ba2:	4620      	mov	r0, r4
    5ba4:	f003 fc52 	bl	944c <nrfx_usbd_ep_stall_check>
    5ba8:	7028      	strb	r0, [r5, #0]
	return 0;
    5baa:	2000      	movs	r0, #0
}
    5bac:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    5bae:	f06f 0012 	mvn.w	r0, #18
    5bb2:	e7fb      	b.n	5bac <usb_dc_ep_is_stalled+0x28>
    5bb4:	f06f 0012 	mvn.w	r0, #18
    5bb8:	e7f8      	b.n	5bac <usb_dc_ep_is_stalled+0x28>
		return -EINVAL;
    5bba:	f06f 0015 	mvn.w	r0, #21
    5bbe:	e7f5      	b.n	5bac <usb_dc_ep_is_stalled+0x28>
		return -EINVAL;
    5bc0:	f06f 0015 	mvn.w	r0, #21
    5bc4:	e7f2      	b.n	5bac <usb_dc_ep_is_stalled+0x28>
    5bc6:	bf00      	nop
    5bc8:	20001a88 	.word	0x20001a88

00005bcc <usb_dc_ep_enable>:
{
    5bcc:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    5bce:	4b15      	ldr	r3, [pc, #84]	; (5c24 <usb_dc_ep_enable+0x58>)
    5bd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
    5bd4:	b1eb      	cbz	r3, 5c12 <usb_dc_ep_enable+0x46>
    5bd6:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep);
    5bd8:	f7fe fef6 	bl	49c8 <endpoint_ctx>
	if (!ep_ctx) {
    5bdc:	4605      	mov	r5, r0
    5bde:	b1d8      	cbz	r0, 5c18 <usb_dc_ep_enable+0x4c>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
    5be0:	f014 0f08 	tst.w	r4, #8
    5be4:	d009      	beq.n	5bfa <usb_dc_ep_enable+0x2e>
	if (ep_ctx->cfg.en) {
    5be6:	7a2b      	ldrb	r3, [r5, #8]
    5be8:	b9cb      	cbnz	r3, 5c1e <usb_dc_ep_enable+0x52>
	ep_ctx->cfg.en = true;
    5bea:	2301      	movs	r3, #1
    5bec:	722b      	strb	r3, [r5, #8]
	return get_usbd_ctx()->ready;
    5bee:	4b0d      	ldr	r3, [pc, #52]	; (5c24 <usb_dc_ep_enable+0x58>)
    5bf0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (dev_ready()) {
    5bf4:	b943      	cbnz	r3, 5c08 <usb_dc_ep_enable+0x3c>
	return 0;
    5bf6:	2000      	movs	r0, #0
}
    5bf8:	bd38      	pop	{r3, r4, r5, pc}
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    5bfa:	4620      	mov	r0, r4
    5bfc:	f003 fc46 	bl	948c <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    5c00:	4620      	mov	r0, r4
    5c02:	f003 fe81 	bl	9908 <nrfx_usbd_ep_stall_clear>
    5c06:	e7ee      	b.n	5be6 <usb_dc_ep_enable+0x1a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    5c08:	4620      	mov	r0, r4
    5c0a:	f003 fe23 	bl	9854 <nrfx_usbd_ep_enable>
	return 0;
    5c0e:	2000      	movs	r0, #0
    5c10:	e7f2      	b.n	5bf8 <usb_dc_ep_enable+0x2c>
		return -ENODEV;
    5c12:	f06f 0012 	mvn.w	r0, #18
    5c16:	e7ef      	b.n	5bf8 <usb_dc_ep_enable+0x2c>
		return -EINVAL;
    5c18:	f06f 0015 	mvn.w	r0, #21
    5c1c:	e7ec      	b.n	5bf8 <usb_dc_ep_enable+0x2c>
		return -EALREADY;
    5c1e:	f06f 0077 	mvn.w	r0, #119	; 0x77
    5c22:	e7e9      	b.n	5bf8 <usb_dc_ep_enable+0x2c>
    5c24:	20001a88 	.word	0x20001a88

00005c28 <usb_dc_ep_disable>:
{
    5c28:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    5c2a:	4b13      	ldr	r3, [pc, #76]	; (5c78 <usb_dc_ep_disable+0x50>)
    5c2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    5c30:	b1ab      	cbz	r3, 5c5e <usb_dc_ep_disable+0x36>
    5c32:	4604      	mov	r4, r0
	return get_usbd_ctx()->ready;
    5c34:	4b10      	ldr	r3, [pc, #64]	; (5c78 <usb_dc_ep_disable+0x50>)
    5c36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    5c3a:	b19b      	cbz	r3, 5c64 <usb_dc_ep_disable+0x3c>
	ep_ctx = endpoint_ctx(ep);
    5c3c:	f7fe fec4 	bl	49c8 <endpoint_ctx>
	if (!ep_ctx) {
    5c40:	4605      	mov	r5, r0
    5c42:	b190      	cbz	r0, 5c6a <usb_dc_ep_disable+0x42>
	if (!ep_ctx->cfg.en) {
    5c44:	7a03      	ldrb	r3, [r0, #8]
    5c46:	b19b      	cbz	r3, 5c70 <usb_dc_ep_disable+0x48>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    5c48:	4620      	mov	r0, r4
    5c4a:	f004 f829 	bl	9ca0 <nrfx_usbd_ep_disable>
	ep_ctx->write_in_progress = false;
    5c4e:	2400      	movs	r4, #0
    5c50:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
    5c52:	4628      	mov	r0, r5
    5c54:	f007 fc12 	bl	d47c <ep_ctx_reset>
	ep_ctx->cfg.en = false;
    5c58:	722c      	strb	r4, [r5, #8]
	return 0;
    5c5a:	4620      	mov	r0, r4
}
    5c5c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    5c5e:	f06f 0012 	mvn.w	r0, #18
    5c62:	e7fb      	b.n	5c5c <usb_dc_ep_disable+0x34>
    5c64:	f06f 0012 	mvn.w	r0, #18
    5c68:	e7f8      	b.n	5c5c <usb_dc_ep_disable+0x34>
		return -EINVAL;
    5c6a:	f06f 0015 	mvn.w	r0, #21
    5c6e:	e7f5      	b.n	5c5c <usb_dc_ep_disable+0x34>
		return -EALREADY;
    5c70:	f06f 0077 	mvn.w	r0, #119	; 0x77
    5c74:	e7f2      	b.n	5c5c <usb_dc_ep_disable+0x34>
    5c76:	bf00      	nop
    5c78:	20001a88 	.word	0x20001a88

00005c7c <usb_dc_ep_write>:
{
    5c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5c80:	b084      	sub	sp, #16
    5c82:	461f      	mov	r7, r3
	return get_usbd_ctx()->attached;
    5c84:	4b4e      	ldr	r3, [pc, #312]	; (5dc0 <usb_dc_ep_write+0x144>)
    5c86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    5c8a:	2b00      	cmp	r3, #0
    5c8c:	f000 808c 	beq.w	5da8 <usb_dc_ep_write+0x12c>
    5c90:	4604      	mov	r4, r0
    5c92:	4688      	mov	r8, r1
    5c94:	4616      	mov	r6, r2
	return get_usbd_ctx()->ready;
    5c96:	4b4a      	ldr	r3, [pc, #296]	; (5dc0 <usb_dc_ep_write+0x144>)
    5c98:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    5c9c:	2b00      	cmp	r3, #0
    5c9e:	f000 8086 	beq.w	5dae <usb_dc_ep_write+0x132>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
    5ca2:	f010 0f80 	tst.w	r0, #128	; 0x80
    5ca6:	f000 8085 	beq.w	5db4 <usb_dc_ep_write+0x138>
	ep_ctx = endpoint_ctx(ep);
    5caa:	f7fe fe8d 	bl	49c8 <endpoint_ctx>
	if (!ep_ctx) {
    5cae:	4605      	mov	r5, r0
    5cb0:	2800      	cmp	r0, #0
    5cb2:	f000 8082 	beq.w	5dba <usb_dc_ep_write+0x13e>
	if (!ep_ctx->cfg.en) {
    5cb6:	7a03      	ldrb	r3, [r0, #8]
    5cb8:	2b00      	cmp	r3, #0
    5cba:	d04e      	beq.n	5d5a <usb_dc_ep_write+0xde>
	return z_impl_k_mutex_lock(mutex, timeout);
    5cbc:	f04f 32ff 	mov.w	r2, #4294967295
    5cc0:	f04f 33ff 	mov.w	r3, #4294967295
    5cc4:	483f      	ldr	r0, [pc, #252]	; (5dc4 <usb_dc_ep_write+0x148>)
    5cc6:	f004 fc63 	bl	a590 <z_impl_k_mutex_lock>
	if (ep_ctx->write_in_progress) {
    5cca:	7fab      	ldrb	r3, [r5, #30]
    5ccc:	2b00      	cmp	r3, #0
    5cce:	d158      	bne.n	5d82 <usb_dc_ep_write+0x106>
	if (!data_len && ep_ctx->trans_zlp) {
    5cd0:	b91e      	cbnz	r6, 5cda <usb_dc_ep_write+0x5e>
    5cd2:	7feb      	ldrb	r3, [r5, #31]
    5cd4:	b10b      	cbz	r3, 5cda <usb_dc_ep_write+0x5e>
		ep_ctx->trans_zlp = false;
    5cd6:	2300      	movs	r3, #0
    5cd8:	77eb      	strb	r3, [r5, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    5cda:	7aab      	ldrb	r3, [r5, #10]
    5cdc:	b963      	cbnz	r3, 5cf8 <usb_dc_ep_write+0x7c>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    5cde:	b15e      	cbz	r6, 5cf8 <usb_dc_ep_write+0x7c>
    5ce0:	4a37      	ldr	r2, [pc, #220]	; (5dc0 <usb_dc_ep_write+0x144>)
    5ce2:	8952      	ldrh	r2, [r2, #10]
    5ce4:	42b2      	cmp	r2, r6
    5ce6:	d907      	bls.n	5cf8 <usb_dc_ep_write+0x7c>
		    !(data_len % ep_ctx->cfg.max_sz)) {
    5ce8:	6869      	ldr	r1, [r5, #4]
    5cea:	fbb6 f2f1 	udiv	r2, r6, r1
    5cee:	fb01 6212 	mls	r2, r1, r2, r6
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    5cf2:	b90a      	cbnz	r2, 5cf8 <usb_dc_ep_write+0x7c>
			ep_ctx->trans_zlp = true;
    5cf4:	2201      	movs	r2, #1
    5cf6:	77ea      	strb	r2, [r5, #31]
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
    5cf8:	b91b      	cbnz	r3, 5d02 <usb_dc_ep_write+0x86>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    5cfa:	f003 fc61 	bl	95c0 <nrfx_usbd_last_setup_dir_get>
    5cfe:	42a0      	cmp	r0, r4
    5d00:	d145      	bne.n	5d8e <usb_dc_ep_write+0x112>
	ep_ctx->write_in_progress = true;
    5d02:	2301      	movs	r3, #1
    5d04:	77ab      	strb	r3, [r5, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    5d06:	f8cd 8004 	str.w	r8, [sp, #4]
    5d0a:	9602      	str	r6, [sp, #8]
    5d0c:	2300      	movs	r3, #0
    5d0e:	9303      	str	r3, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    5d10:	a901      	add	r1, sp, #4
    5d12:	4620      	mov	r0, r4
    5d14:	f002 ffa6 	bl	8c64 <nrfx_usbd_ep_transfer>
    5d18:	4601      	mov	r1, r0
	if (err != NRFX_SUCCESS) {
    5d1a:	4b2b      	ldr	r3, [pc, #172]	; (5dc8 <usb_dc_ep_write+0x14c>)
    5d1c:	4298      	cmp	r0, r3
    5d1e:	d03d      	beq.n	5d9c <usb_dc_ep_write+0x120>
		ep_ctx->write_in_progress = false;
    5d20:	2300      	movs	r3, #0
    5d22:	77ab      	strb	r3, [r5, #30]
		if (ret_bytes) {
    5d24:	b107      	cbz	r7, 5d28 <usb_dc_ep_write+0xac>
			*ret_bytes = 0;
    5d26:	603b      	str	r3, [r7, #0]
    5d28:	4b28      	ldr	r3, [pc, #160]	; (5dcc <usb_dc_ep_write+0x150>)
    5d2a:	4a29      	ldr	r2, [pc, #164]	; (5dd0 <usb_dc_ep_write+0x154>)
    5d2c:	1a9b      	subs	r3, r3, r2
    5d2e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("nRF USBD write error: %d", (uint32_t)err);
    5d30:	f04f 0200 	mov.w	r2, #0
    5d34:	2001      	movs	r0, #1
    5d36:	f360 0202 	bfi	r2, r0, #0, #3
    5d3a:	f36f 02c5 	bfc	r2, #3, #3
    5d3e:	f363 128f 	bfi	r2, r3, #6, #10
    5d42:	4824      	ldr	r0, [pc, #144]	; (5dd4 <usb_dc_ep_write+0x158>)
    5d44:	f7fb fcae 	bl	16a4 <log_1>
		result = -EIO;
    5d48:	f06f 0404 	mvn.w	r4, #4
	return z_impl_k_mutex_unlock(mutex);
    5d4c:	481d      	ldr	r0, [pc, #116]	; (5dc4 <usb_dc_ep_write+0x148>)
    5d4e:	f004 fca9 	bl	a6a4 <z_impl_k_mutex_unlock>
}
    5d52:	4620      	mov	r0, r4
    5d54:	b004      	add	sp, #16
    5d56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d5a:	4b1c      	ldr	r3, [pc, #112]	; (5dcc <usb_dc_ep_write+0x150>)
    5d5c:	4a1c      	ldr	r2, [pc, #112]	; (5dd0 <usb_dc_ep_write+0x154>)
    5d5e:	1a9b      	subs	r3, r3, r2
    5d60:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    5d62:	f04f 0200 	mov.w	r2, #0
    5d66:	2101      	movs	r1, #1
    5d68:	f361 0202 	bfi	r2, r1, #0, #3
    5d6c:	f36f 02c5 	bfc	r2, #3, #3
    5d70:	f363 128f 	bfi	r2, r3, #6, #10
    5d74:	4621      	mov	r1, r4
    5d76:	4818      	ldr	r0, [pc, #96]	; (5dd8 <usb_dc_ep_write+0x15c>)
    5d78:	f7fb fc94 	bl	16a4 <log_1>
		return -EINVAL;
    5d7c:	f06f 0415 	mvn.w	r4, #21
    5d80:	e7e7      	b.n	5d52 <usb_dc_ep_write+0xd6>
    5d82:	4810      	ldr	r0, [pc, #64]	; (5dc4 <usb_dc_ep_write+0x148>)
    5d84:	f004 fc8e 	bl	a6a4 <z_impl_k_mutex_unlock>
		return -EAGAIN;
    5d88:	f06f 040a 	mvn.w	r4, #10
    5d8c:	e7e1      	b.n	5d52 <usb_dc_ep_write+0xd6>
		nrfx_usbd_setup_clear();
    5d8e:	f003 fc07 	bl	95a0 <nrfx_usbd_setup_clear>
    5d92:	480c      	ldr	r0, [pc, #48]	; (5dc4 <usb_dc_ep_write+0x148>)
    5d94:	f004 fc86 	bl	a6a4 <z_impl_k_mutex_unlock>
		return 0;
    5d98:	2400      	movs	r4, #0
    5d9a:	e7da      	b.n	5d52 <usb_dc_ep_write+0xd6>
		if (ret_bytes) {
    5d9c:	b117      	cbz	r7, 5da4 <usb_dc_ep_write+0x128>
			*ret_bytes = data_len;
    5d9e:	603e      	str	r6, [r7, #0]
	int result = 0;
    5da0:	2400      	movs	r4, #0
    5da2:	e7d3      	b.n	5d4c <usb_dc_ep_write+0xd0>
    5da4:	2400      	movs	r4, #0
    5da6:	e7d1      	b.n	5d4c <usb_dc_ep_write+0xd0>
		return -ENODEV;
    5da8:	f06f 0412 	mvn.w	r4, #18
    5dac:	e7d1      	b.n	5d52 <usb_dc_ep_write+0xd6>
    5dae:	f06f 0412 	mvn.w	r4, #18
    5db2:	e7ce      	b.n	5d52 <usb_dc_ep_write+0xd6>
		return -EINVAL;
    5db4:	f06f 0415 	mvn.w	r4, #21
    5db8:	e7cb      	b.n	5d52 <usb_dc_ep_write+0xd6>
		return -EINVAL;
    5dba:	f06f 0415 	mvn.w	r4, #21
    5dbe:	e7c8      	b.n	5d52 <usb_dc_ep_write+0xd6>
    5dc0:	20001a88 	.word	0x20001a88
    5dc4:	20001ac0 	.word	0x20001ac0
    5dc8:	0bad0000 	.word	0x0bad0000
    5dcc:	0000ecac 	.word	0x0000ecac
    5dd0:	0000ec4c 	.word	0x0000ec4c
    5dd4:	0000fae8 	.word	0x0000fae8
    5dd8:	0000fac8 	.word	0x0000fac8

00005ddc <usb_dc_ep_read_wait>:
{
    5ddc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5de0:	4698      	mov	r8, r3
	return get_usbd_ctx()->attached;
    5de2:	4b36      	ldr	r3, [pc, #216]	; (5ebc <usb_dc_ep_read_wait+0xe0>)
    5de4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    5de8:	2b00      	cmp	r3, #0
    5dea:	d05b      	beq.n	5ea4 <usb_dc_ep_read_wait+0xc8>
    5dec:	4606      	mov	r6, r0
    5dee:	460d      	mov	r5, r1
    5df0:	4617      	mov	r7, r2
	return get_usbd_ctx()->ready;
    5df2:	4b32      	ldr	r3, [pc, #200]	; (5ebc <usb_dc_ep_read_wait+0xe0>)
    5df4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    5df8:	2b00      	cmp	r3, #0
    5dfa:	d056      	beq.n	5eaa <usb_dc_ep_read_wait+0xce>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    5dfc:	f010 0f80 	tst.w	r0, #128	; 0x80
    5e00:	d156      	bne.n	5eb0 <usb_dc_ep_read_wait+0xd4>
	if (!data && max_data_len) {
    5e02:	b351      	cbz	r1, 5e5a <usb_dc_ep_read_wait+0x7e>
	ep_ctx = endpoint_ctx(ep);
    5e04:	4630      	mov	r0, r6
    5e06:	f7fe fddf 	bl	49c8 <endpoint_ctx>
	if (!ep_ctx) {
    5e0a:	4604      	mov	r4, r0
    5e0c:	2800      	cmp	r0, #0
    5e0e:	d052      	beq.n	5eb6 <usb_dc_ep_read_wait+0xda>
	if (!ep_ctx->cfg.en) {
    5e10:	7a03      	ldrb	r3, [r0, #8]
    5e12:	b33b      	cbz	r3, 5e64 <usb_dc_ep_read_wait+0x88>
	return z_impl_k_mutex_lock(mutex, timeout);
    5e14:	f04f 32ff 	mov.w	r2, #4294967295
    5e18:	f04f 33ff 	mov.w	r3, #4294967295
    5e1c:	4828      	ldr	r0, [pc, #160]	; (5ec0 <usb_dc_ep_read_wait+0xe4>)
    5e1e:	f004 fbb7 	bl	a590 <z_impl_k_mutex_lock>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
    5e22:	68e3      	ldr	r3, [r4, #12]
    5e24:	463e      	mov	r6, r7
    5e26:	429f      	cmp	r7, r3
    5e28:	bf28      	it	cs
    5e2a:	461e      	movcs	r6, r3
	if (!data && !max_data_len) {
    5e2c:	b375      	cbz	r5, 5e8c <usb_dc_ep_read_wait+0xb0>
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
    5e2e:	4632      	mov	r2, r6
    5e30:	69a1      	ldr	r1, [r4, #24]
    5e32:	4628      	mov	r0, r5
    5e34:	f007 fab6 	bl	d3a4 <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
    5e38:	69a3      	ldr	r3, [r4, #24]
    5e3a:	4433      	add	r3, r6
    5e3c:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
    5e3e:	68e3      	ldr	r3, [r4, #12]
    5e40:	1b9b      	subs	r3, r3, r6
    5e42:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
    5e44:	f1b8 0f00 	cmp.w	r8, #0
    5e48:	d001      	beq.n	5e4e <usb_dc_ep_read_wait+0x72>
		*read_bytes = bytes_to_copy;
    5e4a:	f8c8 6000 	str.w	r6, [r8]
	return z_impl_k_mutex_unlock(mutex);
    5e4e:	481c      	ldr	r0, [pc, #112]	; (5ec0 <usb_dc_ep_read_wait+0xe4>)
    5e50:	f004 fc28 	bl	a6a4 <z_impl_k_mutex_unlock>
	return 0;
    5e54:	2000      	movs	r0, #0
}
    5e56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!data && max_data_len) {
    5e5a:	2a00      	cmp	r2, #0
    5e5c:	d0d2      	beq.n	5e04 <usb_dc_ep_read_wait+0x28>
		return -EINVAL;
    5e5e:	f06f 0015 	mvn.w	r0, #21
    5e62:	e7f8      	b.n	5e56 <usb_dc_ep_read_wait+0x7a>
    5e64:	4b17      	ldr	r3, [pc, #92]	; (5ec4 <usb_dc_ep_read_wait+0xe8>)
    5e66:	4a18      	ldr	r2, [pc, #96]	; (5ec8 <usb_dc_ep_read_wait+0xec>)
    5e68:	1a9b      	subs	r3, r3, r2
    5e6a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    5e6c:	f04f 0200 	mov.w	r2, #0
    5e70:	2101      	movs	r1, #1
    5e72:	f361 0202 	bfi	r2, r1, #0, #3
    5e76:	f36f 02c5 	bfc	r2, #3, #3
    5e7a:	f363 128f 	bfi	r2, r3, #6, #10
    5e7e:	4631      	mov	r1, r6
    5e80:	4812      	ldr	r0, [pc, #72]	; (5ecc <usb_dc_ep_read_wait+0xf0>)
    5e82:	f7fb fc0f 	bl	16a4 <log_1>
		return -EINVAL;
    5e86:	f06f 0015 	mvn.w	r0, #21
    5e8a:	e7e4      	b.n	5e56 <usb_dc_ep_read_wait+0x7a>
	if (!data && !max_data_len) {
    5e8c:	2f00      	cmp	r7, #0
    5e8e:	d1ce      	bne.n	5e2e <usb_dc_ep_read_wait+0x52>
		if (read_bytes) {
    5e90:	f1b8 0f00 	cmp.w	r8, #0
    5e94:	d001      	beq.n	5e9a <usb_dc_ep_read_wait+0xbe>
			*read_bytes = ep_ctx->buf.len;
    5e96:	f8c8 3000 	str.w	r3, [r8]
    5e9a:	4809      	ldr	r0, [pc, #36]	; (5ec0 <usb_dc_ep_read_wait+0xe4>)
    5e9c:	f004 fc02 	bl	a6a4 <z_impl_k_mutex_unlock>
		return 0;
    5ea0:	2000      	movs	r0, #0
    5ea2:	e7d8      	b.n	5e56 <usb_dc_ep_read_wait+0x7a>
		return -ENODEV;
    5ea4:	f06f 0012 	mvn.w	r0, #18
    5ea8:	e7d5      	b.n	5e56 <usb_dc_ep_read_wait+0x7a>
    5eaa:	f06f 0012 	mvn.w	r0, #18
    5eae:	e7d2      	b.n	5e56 <usb_dc_ep_read_wait+0x7a>
		return -EINVAL;
    5eb0:	f06f 0015 	mvn.w	r0, #21
    5eb4:	e7cf      	b.n	5e56 <usb_dc_ep_read_wait+0x7a>
		return -EINVAL;
    5eb6:	f06f 0015 	mvn.w	r0, #21
    5eba:	e7cc      	b.n	5e56 <usb_dc_ep_read_wait+0x7a>
    5ebc:	20001a88 	.word	0x20001a88
    5ec0:	20001ac0 	.word	0x20001ac0
    5ec4:	0000ecac 	.word	0x0000ecac
    5ec8:	0000ec4c 	.word	0x0000ec4c
    5ecc:	0000fac8 	.word	0x0000fac8

00005ed0 <usb_dc_ep_read_continue>:
	return get_usbd_ctx()->attached;
    5ed0:	4b58      	ldr	r3, [pc, #352]	; (6034 <usb_dc_ep_read_continue+0x164>)
    5ed2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    5ed6:	2b00      	cmp	r3, #0
    5ed8:	f000 809f 	beq.w	601a <usb_dc_ep_read_continue+0x14a>
{
    5edc:	b530      	push	{r4, r5, lr}
    5ede:	b083      	sub	sp, #12
    5ee0:	4605      	mov	r5, r0
	return get_usbd_ctx()->ready;
    5ee2:	4b54      	ldr	r3, [pc, #336]	; (6034 <usb_dc_ep_read_continue+0x164>)
    5ee4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    5ee8:	2b00      	cmp	r3, #0
    5eea:	f000 8099 	beq.w	6020 <usb_dc_ep_read_continue+0x150>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    5eee:	f010 0f80 	tst.w	r0, #128	; 0x80
    5ef2:	f040 8098 	bne.w	6026 <usb_dc_ep_read_continue+0x156>
	ep_ctx = endpoint_ctx(ep);
    5ef6:	f7fe fd67 	bl	49c8 <endpoint_ctx>
	if (!ep_ctx) {
    5efa:	4604      	mov	r4, r0
    5efc:	2800      	cmp	r0, #0
    5efe:	f000 8095 	beq.w	602c <usb_dc_ep_read_continue+0x15c>
	if (!ep_ctx->cfg.en) {
    5f02:	7a03      	ldrb	r3, [r0, #8]
    5f04:	b1a3      	cbz	r3, 5f30 <usb_dc_ep_read_continue+0x60>
	return z_impl_k_mutex_lock(mutex, timeout);
    5f06:	f04f 32ff 	mov.w	r2, #4294967295
    5f0a:	f04f 33ff 	mov.w	r3, #4294967295
    5f0e:	484a      	ldr	r0, [pc, #296]	; (6038 <usb_dc_ep_read_continue+0x168>)
    5f10:	f004 fb3e 	bl	a590 <z_impl_k_mutex_lock>
	if (!ep_ctx->buf.len) {
    5f14:	68e3      	ldr	r3, [r4, #12]
    5f16:	b92b      	cbnz	r3, 5f24 <usb_dc_ep_read_continue+0x54>
		ep_ctx->buf.curr = ep_ctx->buf.data;
    5f18:	6963      	ldr	r3, [r4, #20]
    5f1a:	61a3      	str	r3, [r4, #24]
		ep_ctx->read_complete = true;
    5f1c:	2301      	movs	r3, #1
    5f1e:	7723      	strb	r3, [r4, #28]
		if (ep_ctx->read_pending) {
    5f20:	7f63      	ldrb	r3, [r4, #29]
    5f22:	b9cb      	cbnz	r3, 5f58 <usb_dc_ep_read_continue+0x88>
	return z_impl_k_mutex_unlock(mutex);
    5f24:	4844      	ldr	r0, [pc, #272]	; (6038 <usb_dc_ep_read_continue+0x168>)
    5f26:	f004 fbbd 	bl	a6a4 <z_impl_k_mutex_unlock>
	return 0;
    5f2a:	2000      	movs	r0, #0
}
    5f2c:	b003      	add	sp, #12
    5f2e:	bd30      	pop	{r4, r5, pc}
    5f30:	4b42      	ldr	r3, [pc, #264]	; (603c <usb_dc_ep_read_continue+0x16c>)
    5f32:	4a43      	ldr	r2, [pc, #268]	; (6040 <usb_dc_ep_read_continue+0x170>)
    5f34:	1a9b      	subs	r3, r3, r2
    5f36:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    5f38:	f04f 0200 	mov.w	r2, #0
    5f3c:	2101      	movs	r1, #1
    5f3e:	f361 0202 	bfi	r2, r1, #0, #3
    5f42:	f36f 02c5 	bfc	r2, #3, #3
    5f46:	f363 128f 	bfi	r2, r3, #6, #10
    5f4a:	4629      	mov	r1, r5
    5f4c:	483d      	ldr	r0, [pc, #244]	; (6044 <usb_dc_ep_read_continue+0x174>)
    5f4e:	f7fb fba9 	bl	16a4 <log_1>
		return -EINVAL;
    5f52:	f06f 0015 	mvn.w	r0, #21
    5f56:	e7e9      	b.n	5f2c <usb_dc_ep_read_continue+0x5c>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    5f58:	2200      	movs	r2, #0
    5f5a:	2300      	movs	r3, #0
    5f5c:	a901      	add	r1, sp, #4
    5f5e:	483a      	ldr	r0, [pc, #232]	; (6048 <usb_dc_ep_read_continue+0x178>)
    5f60:	f004 f9d2 	bl	a308 <k_mem_slab_alloc>
    5f64:	b980      	cbnz	r0, 5f88 <usb_dc_ep_read_continue+0xb8>
	ev = (struct usbd_event *)block.data;
    5f66:	9d01      	ldr	r5, [sp, #4]
	ev->block = block;
    5f68:	606d      	str	r5, [r5, #4]
			if (!ev) {
    5f6a:	2d00      	cmp	r5, #0
    5f6c:	d04f      	beq.n	600e <usb_dc_ep_read_continue+0x13e>
			ev->evt_type = USBD_EVT_EP;
    5f6e:	2301      	movs	r3, #1
    5f70:	742b      	strb	r3, [r5, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    5f72:	60ac      	str	r4, [r5, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    5f74:	732b      	strb	r3, [r5, #12]
	k_fifo_put(&usbd_evt_fifo, ev);
    5f76:	4629      	mov	r1, r5
    5f78:	4834      	ldr	r0, [pc, #208]	; (604c <usb_dc_ep_read_continue+0x17c>)
    5f7a:	f008 f9c3 	bl	e304 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    5f7e:	4934      	ldr	r1, [pc, #208]	; (6050 <usb_dc_ep_read_continue+0x180>)
    5f80:	4834      	ldr	r0, [pc, #208]	; (6054 <usb_dc_ep_read_continue+0x184>)
    5f82:	f008 f9e0 	bl	e346 <k_work_submit_to_queue>
}
    5f86:	e7cd      	b.n	5f24 <usb_dc_ep_read_continue+0x54>
    5f88:	4b2c      	ldr	r3, [pc, #176]	; (603c <usb_dc_ep_read_continue+0x16c>)
    5f8a:	4a2d      	ldr	r2, [pc, #180]	; (6040 <usb_dc_ep_read_continue+0x170>)
    5f8c:	1a9b      	subs	r3, r3, r2
    5f8e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    5f90:	f04f 0100 	mov.w	r1, #0
    5f94:	2201      	movs	r2, #1
    5f96:	f362 0102 	bfi	r1, r2, #0, #3
    5f9a:	f36f 01c5 	bfc	r1, #3, #3
    5f9e:	f363 118f 	bfi	r1, r3, #6, #10
    5fa2:	482d      	ldr	r0, [pc, #180]	; (6058 <usb_dc_ep_read_continue+0x188>)
    5fa4:	f7fb fbf0 	bl	1788 <log_0>
static inline void usbd_evt_flush(void)
    5fa8:	e004      	b.n	5fb4 <usb_dc_ep_read_continue+0xe4>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    5faa:	1d01      	adds	r1, r0, #4
    5fac:	4826      	ldr	r0, [pc, #152]	; (6048 <usb_dc_ep_read_continue+0x178>)
    5fae:	f008 f892 	bl	e0d6 <k_mem_slab_free>
	} while (ev != NULL);
    5fb2:	b145      	cbz	r5, 5fc6 <usb_dc_ep_read_continue+0xf6>
	return z_impl_k_queue_get(queue, timeout);
    5fb4:	2200      	movs	r2, #0
    5fb6:	2300      	movs	r3, #0
    5fb8:	4824      	ldr	r0, [pc, #144]	; (604c <usb_dc_ep_read_continue+0x17c>)
    5fba:	f004 fbb7 	bl	a72c <z_impl_k_queue_get>
		if (ev) {
    5fbe:	4605      	mov	r5, r0
    5fc0:	2800      	cmp	r0, #0
    5fc2:	d1f2      	bne.n	5faa <usb_dc_ep_read_continue+0xda>
    5fc4:	e7f5      	b.n	5fb2 <usb_dc_ep_read_continue+0xe2>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    5fc6:	2200      	movs	r2, #0
    5fc8:	2300      	movs	r3, #0
    5fca:	a901      	add	r1, sp, #4
    5fcc:	481e      	ldr	r0, [pc, #120]	; (6048 <usb_dc_ep_read_continue+0x178>)
    5fce:	f004 f99b 	bl	a308 <k_mem_slab_alloc>
    5fd2:	b180      	cbz	r0, 5ff6 <usb_dc_ep_read_continue+0x126>
    5fd4:	4b19      	ldr	r3, [pc, #100]	; (603c <usb_dc_ep_read_continue+0x16c>)
    5fd6:	4a1a      	ldr	r2, [pc, #104]	; (6040 <usb_dc_ep_read_continue+0x170>)
    5fd8:	1a9b      	subs	r3, r3, r2
    5fda:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    5fdc:	f04f 0100 	mov.w	r1, #0
    5fe0:	2201      	movs	r2, #1
    5fe2:	f362 0102 	bfi	r1, r2, #0, #3
    5fe6:	f36f 01c5 	bfc	r1, #3, #3
    5fea:	f363 118f 	bfi	r1, r3, #6, #10
    5fee:	481b      	ldr	r0, [pc, #108]	; (605c <usb_dc_ep_read_continue+0x18c>)
    5ff0:	f7fb fbca 	bl	1788 <log_0>
			return NULL;
    5ff4:	e7b9      	b.n	5f6a <usb_dc_ep_read_continue+0x9a>
		ev = (struct usbd_event *)block.data;
    5ff6:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    5ff8:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    5ffa:	2304      	movs	r3, #4
    5ffc:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    5ffe:	4813      	ldr	r0, [pc, #76]	; (604c <usb_dc_ep_read_continue+0x17c>)
    6000:	f008 f980 	bl	e304 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    6004:	4912      	ldr	r1, [pc, #72]	; (6050 <usb_dc_ep_read_continue+0x180>)
    6006:	4813      	ldr	r0, [pc, #76]	; (6054 <usb_dc_ep_read_continue+0x184>)
    6008:	f008 f99d 	bl	e346 <k_work_submit_to_queue>
		return NULL;
    600c:	e7ad      	b.n	5f6a <usb_dc_ep_read_continue+0x9a>
	return z_impl_k_mutex_unlock(mutex);
    600e:	480a      	ldr	r0, [pc, #40]	; (6038 <usb_dc_ep_read_continue+0x168>)
    6010:	f004 fb48 	bl	a6a4 <z_impl_k_mutex_unlock>
				return -ENOMEM;
    6014:	f06f 000b 	mvn.w	r0, #11
    6018:	e788      	b.n	5f2c <usb_dc_ep_read_continue+0x5c>
		return -ENODEV;
    601a:	f06f 0012 	mvn.w	r0, #18
}
    601e:	4770      	bx	lr
		return -ENODEV;
    6020:	f06f 0012 	mvn.w	r0, #18
    6024:	e782      	b.n	5f2c <usb_dc_ep_read_continue+0x5c>
		return -EINVAL;
    6026:	f06f 0015 	mvn.w	r0, #21
    602a:	e77f      	b.n	5f2c <usb_dc_ep_read_continue+0x5c>
		return -EINVAL;
    602c:	f06f 0015 	mvn.w	r0, #21
    6030:	e77c      	b.n	5f2c <usb_dc_ep_read_continue+0x5c>
    6032:	bf00      	nop
    6034:	20001a88 	.word	0x20001a88
    6038:	20001ac0 	.word	0x20001ac0
    603c:	0000ecac 	.word	0x0000ecac
    6040:	0000ec4c 	.word	0x0000ec4c
    6044:	0000fac8 	.word	0x0000fac8
    6048:	20000234 	.word	0x20000234
    604c:	200002d8 	.word	0x200002d8
    6050:	20001ab0 	.word	0x20001ab0
    6054:	20000588 	.word	0x20000588
    6058:	0000f8f0 	.word	0x0000f8f0
    605c:	0000f910 	.word	0x0000f910

00006060 <usb_dc_ep_set_callback>:
	return get_usbd_ctx()->attached;
    6060:	4b08      	ldr	r3, [pc, #32]	; (6084 <usb_dc_ep_set_callback+0x24>)
    6062:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
    6066:	b13b      	cbz	r3, 6078 <usb_dc_ep_set_callback+0x18>
{
    6068:	b510      	push	{r4, lr}
    606a:	460c      	mov	r4, r1
	ep_ctx = endpoint_ctx(ep);
    606c:	f7fe fcac 	bl	49c8 <endpoint_ctx>
	if (!ep_ctx) {
    6070:	b128      	cbz	r0, 607e <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
    6072:	6004      	str	r4, [r0, #0]
	return 0;
    6074:	2000      	movs	r0, #0
}
    6076:	bd10      	pop	{r4, pc}
		return -ENODEV;
    6078:	f06f 0012 	mvn.w	r0, #18
}
    607c:	4770      	bx	lr
		return -EINVAL;
    607e:	f06f 0015 	mvn.w	r0, #21
    6082:	e7f8      	b.n	6076 <usb_dc_ep_set_callback+0x16>
    6084:	20001a88 	.word	0x20001a88

00006088 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
    6088:	4b01      	ldr	r3, [pc, #4]	; (6090 <usb_dc_set_status_callback+0x8>)
    608a:	6018      	str	r0, [r3, #0]
}
    608c:	4770      	bx	lr
    608e:	bf00      	nop
    6090:	20001a88 	.word	0x20001a88

00006094 <usb_dc_ep_mps>:
{
    6094:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    6096:	4b07      	ldr	r3, [pc, #28]	; (60b4 <usb_dc_ep_mps+0x20>)
    6098:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
    609c:	b123      	cbz	r3, 60a8 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
    609e:	f7fe fc93 	bl	49c8 <endpoint_ctx>
	if (!ep_ctx) {
    60a2:	b120      	cbz	r0, 60ae <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
    60a4:	6840      	ldr	r0, [r0, #4]
}
    60a6:	bd08      	pop	{r3, pc}
		return -ENODEV;
    60a8:	f06f 0012 	mvn.w	r0, #18
    60ac:	e7fb      	b.n	60a6 <usb_dc_ep_mps+0x12>
		return -EINVAL;
    60ae:	f06f 0015 	mvn.w	r0, #21
    60b2:	e7f8      	b.n	60a6 <usb_dc_ep_mps+0x12>
    60b4:	20001a88 	.word	0x20001a88

000060b8 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    60b8:	4800      	ldr	r0, [pc, #0]	; (60bc <get_hf_flags+0x4>)
    60ba:	4770      	bx	lr
    60bc:	20001d68 	.word	0x20001d68

000060c0 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    60c0:	4b03      	ldr	r3, [pc, #12]	; (60d0 <get_subsys+0x10>)
    60c2:	1ac0      	subs	r0, r0, r3
    60c4:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    60c6:	4b03      	ldr	r3, [pc, #12]	; (60d4 <get_subsys+0x14>)
    60c8:	fb03 f000 	mul.w	r0, r3, r0
    60cc:	4770      	bx	lr
    60ce:	bf00      	nop
    60d0:	20001d28 	.word	0x20001d28
    60d4:	b6db6db7 	.word	0xb6db6db7

000060d8 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    60d8:	b538      	push	{r3, r4, r5, lr}
    60da:	4605      	mov	r5, r0
    60dc:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    60de:	f7ff ffef 	bl	60c0 <get_subsys>
    60e2:	4601      	mov	r1, r0
    60e4:	2240      	movs	r2, #64	; 0x40
    60e6:	4803      	ldr	r0, [pc, #12]	; (60f4 <onoff_stop+0x1c>)
    60e8:	f007 fad6 	bl	d698 <stop>
    60ec:	4601      	mov	r1, r0
	notify(mgr, res);
    60ee:	4628      	mov	r0, r5
    60f0:	47a0      	blx	r4
}
    60f2:	bd38      	pop	{r3, r4, r5, pc}
    60f4:	0000ea54 	.word	0x0000ea54

000060f8 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    60f8:	b530      	push	{r4, r5, lr}
    60fa:	b083      	sub	sp, #12
    60fc:	4605      	mov	r5, r0
    60fe:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    6100:	f7ff ffde 	bl	60c0 <get_subsys>
    6104:	4601      	mov	r1, r0
    6106:	2340      	movs	r3, #64	; 0x40
    6108:	9300      	str	r3, [sp, #0]
    610a:	4623      	mov	r3, r4
    610c:	4a05      	ldr	r2, [pc, #20]	; (6124 <onoff_start+0x2c>)
    610e:	4806      	ldr	r0, [pc, #24]	; (6128 <onoff_start+0x30>)
    6110:	f007 fadc 	bl	d6cc <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    6114:	1e01      	subs	r1, r0, #0
    6116:	db01      	blt.n	611c <onoff_start+0x24>
		notify(mgr, err);
	}
}
    6118:	b003      	add	sp, #12
    611a:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    611c:	4628      	mov	r0, r5
    611e:	47a0      	blx	r4
}
    6120:	e7fa      	b.n	6118 <onoff_start+0x20>
    6122:	bf00      	nop
    6124:	0000d715 	.word	0x0000d715
    6128:	0000ea54 	.word	0x0000ea54

0000612c <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    612c:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    612e:	b110      	cbz	r0, 6136 <clock_event_handler+0xa>
    6130:	2801      	cmp	r0, #1
    6132:	d00d      	beq.n	6150 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    6134:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    6136:	2100      	movs	r1, #0
    6138:	4808      	ldr	r0, [pc, #32]	; (615c <clock_event_handler+0x30>)
    613a:	f007 fa34 	bl	d5a6 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    613e:	6883      	ldr	r3, [r0, #8]
    6140:	f013 0f07 	tst.w	r3, #7
    6144:	d1f6      	bne.n	6134 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    6146:	2100      	movs	r1, #0
    6148:	4804      	ldr	r0, [pc, #16]	; (615c <clock_event_handler+0x30>)
    614a:	f007 fa93 	bl	d674 <clkstarted_handle>
    614e:	e7f1      	b.n	6134 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    6150:	2101      	movs	r1, #1
    6152:	4802      	ldr	r0, [pc, #8]	; (615c <clock_event_handler+0x30>)
    6154:	f007 fa8e 	bl	d674 <clkstarted_handle>
}
    6158:	e7ec      	b.n	6134 <clock_event_handler+0x8>
    615a:	bf00      	nop
    615c:	0000ea54 	.word	0x0000ea54

00006160 <generic_hfclk_start>:
{
    6160:	b510      	push	{r4, lr}
	__asm__ volatile(
    6162:	f04f 0320 	mov.w	r3, #32
    6166:	f3ef 8411 	mrs	r4, BASEPRI
    616a:	f383 8812 	msr	BASEPRI_MAX, r3
    616e:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    6172:	4a13      	ldr	r2, [pc, #76]	; (61c0 <generic_hfclk_start+0x60>)
    6174:	6813      	ldr	r3, [r2, #0]
    6176:	f043 0302 	orr.w	r3, r3, #2
    617a:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    617c:	f013 0f01 	tst.w	r3, #1
    6180:	d108      	bne.n	6194 <generic_hfclk_start+0x34>
	bool already_started = false;
    6182:	2300      	movs	r3, #0
	__asm__ volatile(
    6184:	f384 8811 	msr	BASEPRI, r4
    6188:	f3bf 8f6f 	isb	sy
	if (already_started) {
    618c:	b99b      	cbnz	r3, 61b6 <generic_hfclk_start+0x56>
	hfclk_start();
    618e:	f007 fac9 	bl	d724 <hfclk_start>
}
    6192:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    6194:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6198:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    619c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    61a0:	f012 0f01 	tst.w	r2, #1
    61a4:	d101      	bne.n	61aa <generic_hfclk_start+0x4a>
	bool already_started = false;
    61a6:	2300      	movs	r3, #0
    61a8:	e7ec      	b.n	6184 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    61aa:	f7ff ff85 	bl	60b8 <get_hf_flags>
    61ae:	f007 fa4e 	bl	d64e <set_on_state>
			already_started = true;
    61b2:	2301      	movs	r3, #1
    61b4:	e7e6      	b.n	6184 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    61b6:	2100      	movs	r1, #0
    61b8:	4802      	ldr	r0, [pc, #8]	; (61c4 <generic_hfclk_start+0x64>)
    61ba:	f007 fa5b 	bl	d674 <clkstarted_handle>
		return;
    61be:	e7e8      	b.n	6192 <generic_hfclk_start+0x32>
    61c0:	20001d78 	.word	0x20001d78
    61c4:	0000ea54 	.word	0x0000ea54

000061c8 <generic_hfclk_stop>:
{
    61c8:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    61ca:	4b0a      	ldr	r3, [pc, #40]	; (61f4 <generic_hfclk_stop+0x2c>)
    61cc:	f3bf 8f5b 	dmb	ish
    61d0:	e853 2f00 	ldrex	r2, [r3]
    61d4:	f022 0102 	bic.w	r1, r2, #2
    61d8:	e843 1000 	strex	r0, r1, [r3]
    61dc:	2800      	cmp	r0, #0
    61de:	d1f7      	bne.n	61d0 <generic_hfclk_stop+0x8>
    61e0:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    61e4:	f012 0f01 	tst.w	r2, #1
    61e8:	d000      	beq.n	61ec <generic_hfclk_stop+0x24>
}
    61ea:	bd08      	pop	{r3, pc}
	hfclk_stop();
    61ec:	f007 faa4 	bl	d738 <hfclk_stop>
    61f0:	e7fb      	b.n	61ea <generic_hfclk_stop+0x22>
    61f2:	bf00      	nop
    61f4:	20001d78 	.word	0x20001d78

000061f8 <api_blocking_start>:
{
    61f8:	b500      	push	{lr}
    61fa:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    61fc:	f8cd d000 	str.w	sp, [sp]
    6200:	f8cd d004 	str.w	sp, [sp, #4]
    6204:	2300      	movs	r3, #0
    6206:	9302      	str	r3, [sp, #8]
    6208:	2301      	movs	r3, #1
    620a:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    620c:	466b      	mov	r3, sp
    620e:	4a07      	ldr	r2, [pc, #28]	; (622c <api_blocking_start+0x34>)
    6210:	f007 fa78 	bl	d704 <api_start>
	if (err < 0) {
    6214:	2800      	cmp	r0, #0
    6216:	db05      	blt.n	6224 <api_blocking_start+0x2c>
	return z_impl_k_sem_take(sem, timeout);
    6218:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    621c:	2300      	movs	r3, #0
    621e:	4668      	mov	r0, sp
    6220:	f004 fae4 	bl	a7ec <z_impl_k_sem_take>
}
    6224:	b005      	add	sp, #20
    6226:	f85d fb04 	ldr.w	pc, [sp], #4
    622a:	bf00      	nop
    622c:	0000d74d 	.word	0x0000d74d

00006230 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    6230:	b570      	push	{r4, r5, r6, lr}
    6232:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6234:	2200      	movs	r2, #0
    6236:	2101      	movs	r1, #1
    6238:	4610      	mov	r0, r2
    623a:	f7fd fd23 	bl	3c84 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    623e:	2000      	movs	r0, #0
    6240:	f7fd fcee 	bl	3c20 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    6244:	4811      	ldr	r0, [pc, #68]	; (628c <clk_init+0x5c>)
    6246:	f001 f88b 	bl	7360 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    624a:	4b11      	ldr	r3, [pc, #68]	; (6290 <clk_init+0x60>)
    624c:	4298      	cmp	r0, r3
    624e:	d11a      	bne.n	6286 <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    6250:	f001 f89a 	bl	7388 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    6254:	2400      	movs	r4, #0
    6256:	e003      	b.n	6260 <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    6258:	2301      	movs	r3, #1
    625a:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    625c:	441c      	add	r4, r3
    625e:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
    6260:	2c01      	cmp	r4, #1
    6262:	d80e      	bhi.n	6282 <clk_init+0x52>
						get_sub_data(dev, i);
    6264:	4621      	mov	r1, r4
    6266:	4630      	mov	r0, r6
    6268:	f007 f99d 	bl	d5a6 <get_sub_data>
    626c:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
    626e:	4621      	mov	r1, r4
    6270:	4630      	mov	r0, r6
    6272:	f007 f9a5 	bl	d5c0 <get_onoff_manager>
    6276:	4907      	ldr	r1, [pc, #28]	; (6294 <clk_init+0x64>)
    6278:	f005 fdfb 	bl	be72 <onoff_manager_init>
		if (err < 0) {
    627c:	2800      	cmp	r0, #0
    627e:	daeb      	bge.n	6258 <clk_init+0x28>
    6280:	e000      	b.n	6284 <clk_init+0x54>
	}

	return 0;
    6282:	2000      	movs	r0, #0
}
    6284:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    6286:	f06f 0004 	mvn.w	r0, #4
    628a:	e7fb      	b.n	6284 <clk_init+0x54>
    628c:	0000612d 	.word	0x0000612d
    6290:	0bad0000 	.word	0x0bad0000
    6294:	0000fb70 	.word	0x0000fb70

00006298 <lfclk_spinwait>:
{
    6298:	b570      	push	{r4, r5, r6, lr}
    629a:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    629c:	2801      	cmp	r0, #1
    629e:	d107      	bne.n	62b0 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    62a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    62a4:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    62a8:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    62ac:	2b01      	cmp	r3, #1
    62ae:	d058      	beq.n	6362 <lfclk_spinwait+0xca>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    62b0:	f007 ff4f 	bl	e152 <k_is_in_isr>
    62b4:	b928      	cbnz	r0, 62c2 <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
    62b6:	4b2e      	ldr	r3, [pc, #184]	; (6370 <lfclk_spinwait+0xd8>)
    62b8:	781b      	ldrb	r3, [r3, #0]
    62ba:	2b00      	cmp	r3, #0
    62bc:	d041      	beq.n	6342 <lfclk_spinwait+0xaa>
    62be:	2300      	movs	r3, #0
    62c0:	e000      	b.n	62c4 <lfclk_spinwait+0x2c>
    62c2:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    62c4:	461c      	mov	r4, r3
    62c6:	2b00      	cmp	r3, #0
    62c8:	d03d      	beq.n	6346 <lfclk_spinwait+0xae>
	__asm__ volatile(
    62ca:	f04f 0320 	mov.w	r3, #32
    62ce:	f3ef 8611 	mrs	r6, BASEPRI
    62d2:	f383 8812 	msr	BASEPRI_MAX, r3
    62d6:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    62da:	b924      	cbnz	r4, 62e6 <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    62dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    62e0:	2202      	movs	r2, #2
    62e2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    62e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    62ea:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    62ee:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    62f2:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    62f6:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    62fa:	d12b      	bne.n	6354 <lfclk_spinwait+0xbc>
    return false;
    62fc:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    62fe:	b11a      	cbz	r2, 6308 <lfclk_spinwait+0x70>
    6300:	2b01      	cmp	r3, #1
    6302:	d029      	beq.n	6358 <lfclk_spinwait+0xc0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    6304:	2d01      	cmp	r5, #1
    6306:	d027      	beq.n	6358 <lfclk_spinwait+0xc0>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    6308:	b1fc      	cbz	r4, 634a <lfclk_spinwait+0xb2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    630a:	4630      	mov	r0, r6
    630c:	f7fd fc30 	bl	3b70 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    6310:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6314:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    6318:	2b00      	cmp	r3, #0
    631a:	d1e4      	bne.n	62e6 <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    631c:	4b15      	ldr	r3, [pc, #84]	; (6374 <lfclk_spinwait+0xdc>)
    631e:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    6320:	2b00      	cmp	r3, #0
    6322:	d0e0      	beq.n	62e6 <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6324:	4b13      	ldr	r3, [pc, #76]	; (6374 <lfclk_spinwait+0xdc>)
    6326:	2200      	movs	r2, #0
    6328:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    632a:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    632c:	2301      	movs	r3, #1
    632e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6332:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6336:	4a10      	ldr	r2, [pc, #64]	; (6378 <lfclk_spinwait+0xe0>)
    6338:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    633c:	4a0f      	ldr	r2, [pc, #60]	; (637c <lfclk_spinwait+0xe4>)
    633e:	6013      	str	r3, [r2, #0]
}
    6340:	e7d1      	b.n	62e6 <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    6342:	2301      	movs	r3, #1
    6344:	e7be      	b.n	62c4 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    6346:	2600      	movs	r6, #0
    6348:	e7c7      	b.n	62da <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    634a:	2021      	movs	r0, #33	; 0x21
    634c:	2100      	movs	r1, #0
    634e:	f004 ff65 	bl	b21c <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    6352:	e7dd      	b.n	6310 <lfclk_spinwait+0x78>
                return true;
    6354:	2201      	movs	r2, #1
    6356:	e7d2      	b.n	62fe <lfclk_spinwait+0x66>
	if (isr_mode) {
    6358:	b124      	cbz	r4, 6364 <lfclk_spinwait+0xcc>
	__asm__ volatile(
    635a:	f386 8811 	msr	BASEPRI, r6
    635e:	f3bf 8f6f 	isb	sy
}
    6362:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    6364:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6368:	2202      	movs	r2, #2
    636a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    636e:	e7f8      	b.n	6362 <lfclk_spinwait+0xca>
    6370:	20002540 	.word	0x20002540
    6374:	40000104 	.word	0x40000104
    6378:	e000e100 	.word	0xe000e100
    637c:	40000008 	.word	0x40000008

00006380 <z_nrf_clock_control_get_onoff>:
{
    6380:	b508      	push	{r3, lr}
	return get_onoff_manager(CLOCK_DEVICE,
    6382:	b2c1      	uxtb	r1, r0
    6384:	4801      	ldr	r0, [pc, #4]	; (638c <z_nrf_clock_control_get_onoff+0xc>)
    6386:	f007 f91b 	bl	d5c0 <get_onoff_manager>
}
    638a:	bd08      	pop	{r3, pc}
    638c:	0000ea54 	.word	0x0000ea54

00006390 <z_nrf_clock_control_lf_on>:
{
    6390:	b510      	push	{r4, lr}
    6392:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6394:	4b10      	ldr	r3, [pc, #64]	; (63d8 <z_nrf_clock_control_lf_on+0x48>)
    6396:	2101      	movs	r1, #1
    6398:	f3bf 8f5b 	dmb	ish
    639c:	e853 2f00 	ldrex	r2, [r3]
    63a0:	e843 1000 	strex	r0, r1, [r3]
    63a4:	2800      	cmp	r0, #0
    63a6:	d1f9      	bne.n	639c <z_nrf_clock_control_lf_on+0xc>
    63a8:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    63ac:	b11a      	cbz	r2, 63b6 <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
    63ae:	1e63      	subs	r3, r4, #1
    63b0:	2b01      	cmp	r3, #1
    63b2:	d90c      	bls.n	63ce <z_nrf_clock_control_lf_on+0x3e>
}
    63b4:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    63b6:	4809      	ldr	r0, [pc, #36]	; (63dc <z_nrf_clock_control_lf_on+0x4c>)
    63b8:	f007 f902 	bl	d5c0 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    63bc:	4908      	ldr	r1, [pc, #32]	; (63e0 <z_nrf_clock_control_lf_on+0x50>)
    63be:	2300      	movs	r3, #0
    63c0:	604b      	str	r3, [r1, #4]
    63c2:	60cb      	str	r3, [r1, #12]
    63c4:	2301      	movs	r3, #1
    63c6:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    63c8:	f005 fd6f 	bl	beaa <onoff_request>
    63cc:	e7ef      	b.n	63ae <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
    63ce:	4620      	mov	r0, r4
    63d0:	f7ff ff62 	bl	6298 <lfclk_spinwait>
		break;
    63d4:	e7ee      	b.n	63b4 <z_nrf_clock_control_lf_on+0x24>
    63d6:	bf00      	nop
    63d8:	20001d7c 	.word	0x20001d7c
    63dc:	0000ea54 	.word	0x0000ea54
    63e0:	20001d18 	.word	0x20001d18

000063e4 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    63e4:	b510      	push	{r4, lr}
    63e6:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    63e8:	280a      	cmp	r0, #10
    63ea:	d007      	beq.n	63fc <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    63ec:	4b07      	ldr	r3, [pc, #28]	; (640c <console_out+0x28>)
    63ee:	6818      	ldr	r0, [r3, #0]
    63f0:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    63f2:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    63f4:	685b      	ldr	r3, [r3, #4]
    63f6:	4798      	blx	r3

	return c;
}
    63f8:	4620      	mov	r0, r4
    63fa:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    63fc:	4b03      	ldr	r3, [pc, #12]	; (640c <console_out+0x28>)
    63fe:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    6400:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    6402:	685b      	ldr	r3, [r3, #4]
    6404:	210d      	movs	r1, #13
    6406:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    6408:	e7f0      	b.n	63ec <console_out+0x8>
    640a:	bf00      	nop
    640c:	20001d80 	.word	0x20001d80

00006410 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
    6410:	b510      	push	{r4, lr}
#if defined(CONFIG_STDOUT_CONSOLE)
	__stdout_hook_install(console_out);
    6412:	4c04      	ldr	r4, [pc, #16]	; (6424 <uart_console_hook_install+0x14>)
    6414:	4620      	mov	r0, r4
    6416:	f7fe fa97 	bl	4948 <__stdout_hook_install>
#endif
#if defined(CONFIG_PRINTK)
	__printk_hook_install(console_out);
    641a:	4620      	mov	r0, r4
    641c:	f7fa f8a8 	bl	570 <__printk_hook_install>
#endif
}
    6420:	bd10      	pop	{r4, pc}
    6422:	bf00      	nop
    6424:	000063e5 	.word	0x000063e5

00006428 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    6428:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    642a:	4806      	ldr	r0, [pc, #24]	; (6444 <uart_console_init+0x1c>)
    642c:	4b06      	ldr	r3, [pc, #24]	; (6448 <uart_console_init+0x20>)
    642e:	6018      	str	r0, [r3, #0]
    6430:	f007 fe1f 	bl	e072 <z_device_ready>
    6434:	b118      	cbz	r0, 643e <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
    6436:	f7ff ffeb 	bl	6410 <uart_console_hook_install>

	return 0;
    643a:	2000      	movs	r0, #0
}
    643c:	bd08      	pop	{r3, pc}
		return -ENODEV;
    643e:	f06f 0012 	mvn.w	r0, #18
    6442:	e7fb      	b.n	643c <uart_console_init+0x14>
    6444:	0000eab4 	.word	0x0000eab4
    6448:	20001d80 	.word	0x20001d80

0000644c <get_drive>:

static int get_drive(gpio_flags_t flags, nrf_gpio_pin_drive_t *drive)
{
	int err = 0;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    644c:	4b1f      	ldr	r3, [pc, #124]	; (64cc <get_drive+0x80>)
    644e:	4003      	ands	r3, r0
    6450:	4a1f      	ldr	r2, [pc, #124]	; (64d0 <get_drive+0x84>)
    6452:	4293      	cmp	r3, r2
    6454:	d032      	beq.n	64bc <get_drive+0x70>
    6456:	d816      	bhi.n	6486 <get_drive+0x3a>
    6458:	2b06      	cmp	r3, #6
    645a:	d02b      	beq.n	64b4 <get_drive+0x68>
    645c:	d906      	bls.n	646c <get_drive+0x20>
    645e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    6462:	d10d      	bne.n	6480 <get_drive+0x34>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		*drive = NRF_GPIO_PIN_H0S1;
    6464:	2301      	movs	r3, #1
    6466:	700b      	strb	r3, [r1, #0]
	int err = 0;
    6468:	2000      	movs	r0, #0
		break;
    646a:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    646c:	b1fb      	cbz	r3, 64ae <get_drive+0x62>
    646e:	2b02      	cmp	r3, #2
    6470:	d103      	bne.n	647a <get_drive+0x2e>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		*drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0S1;
    6472:	2304      	movs	r3, #4
    6474:	700b      	strb	r3, [r1, #0]
	int err = 0;
    6476:	2000      	movs	r0, #0
		break;
    6478:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    647a:	f06f 0015 	mvn.w	r0, #21
    647e:	4770      	bx	lr
    6480:	f06f 0015 	mvn.w	r0, #21
    6484:	4770      	bx	lr
    6486:	4a13      	ldr	r2, [pc, #76]	; (64d4 <get_drive+0x88>)
    6488:	4293      	cmp	r3, r2
    648a:	d01b      	beq.n	64c4 <get_drive+0x78>
    648c:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    6490:	d103      	bne.n	649a <get_drive+0x4e>
		*drive = NRF_GPIO_PIN_H0H1;
    6492:	2303      	movs	r3, #3
    6494:	700b      	strb	r3, [r1, #0]
	int err = 0;
    6496:	2000      	movs	r0, #0
		break;
    6498:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    649a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    649e:	d103      	bne.n	64a8 <get_drive+0x5c>
		*drive = NRF_GPIO_PIN_S0H1;
    64a0:	2302      	movs	r3, #2
    64a2:	700b      	strb	r3, [r1, #0]
	int err = 0;
    64a4:	2000      	movs	r0, #0
		break;
    64a6:	4770      	bx	lr
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    64a8:	f06f 0015 	mvn.w	r0, #21
    64ac:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0S1;
    64ae:	2000      	movs	r0, #0
    64b0:	7008      	strb	r0, [r1, #0]
		break;
    64b2:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_S0D1;
    64b4:	2306      	movs	r3, #6
    64b6:	700b      	strb	r3, [r1, #0]
	int err = 0;
    64b8:	2000      	movs	r0, #0
		break;
    64ba:	4770      	bx	lr
		*drive = NRF_GPIO_PIN_H0D1;
    64bc:	2307      	movs	r3, #7
    64be:	700b      	strb	r3, [r1, #0]
	int err = 0;
    64c0:	2000      	movs	r0, #0
		break;
    64c2:	4770      	bx	lr
	case GPIO_DS_ALT_HIGH | GPIO_OPEN_SOURCE:
		*drive = NRF_GPIO_PIN_D0H1;
    64c4:	2305      	movs	r3, #5
    64c6:	700b      	strb	r3, [r1, #0]
	int err = 0;
    64c8:	2000      	movs	r0, #0
		err = -EINVAL;
		break;
	}

	return err;
}
    64ca:	4770      	bx	lr
    64cc:	00f00006 	.word	0x00f00006
    64d0:	00100006 	.word	0x00100006
    64d4:	00400002 	.word	0x00400002

000064d8 <get_dev>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    64d8:	b128      	cbz	r0, 64e6 <get_dev+0xe>
    64da:	2801      	cmp	r0, #1
    64dc:	d101      	bne.n	64e2 <get_dev+0xa>
    64de:	4803      	ldr	r0, [pc, #12]	; (64ec <get_dev+0x14>)
	#undef GPIO_NRF_GET_DEV

	return dev;
}
    64e0:	4770      	bx	lr
	const struct device *dev = NULL;
    64e2:	2000      	movs	r0, #0
    64e4:	4770      	bx	lr
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    64e6:	4802      	ldr	r0, [pc, #8]	; (64f0 <get_dev+0x18>)
    64e8:	4770      	bx	lr
    64ea:	bf00      	nop
    64ec:	0000ea6c 	.word	0x0000ea6c
    64f0:	0000ea84 	.word	0x0000ea84

000064f4 <gpio_nrfx_pin_interrupt_configure>:
{
    64f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    64f6:	b085      	sub	sp, #20
    64f8:	460e      	mov	r6, r1
    64fa:	4619      	mov	r1, r3
	return port->config;
    64fc:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    64fe:	7b1b      	ldrb	r3, [r3, #12]
    6500:	f006 051f 	and.w	r5, r6, #31
    6504:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    6508:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    650c:	d022      	beq.n	6554 <gpio_nrfx_pin_interrupt_configure+0x60>
    650e:	4607      	mov	r7, r0
    6510:	4614      	mov	r4, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    6512:	2300      	movs	r3, #0
    6514:	9302      	str	r3, [sp, #8]
    6516:	9303      	str	r3, [sp, #12]
		.trigger = get_trigger(mode, trig),
    6518:	4610      	mov	r0, r2
    651a:	f007 f94f 	bl	d7bc <get_trigger>
	nrfx_gpiote_trigger_config_t trigger_config = {
    651e:	f88d 0008 	strb.w	r0, [sp, #8]
	return port->config;
    6522:	687b      	ldr	r3, [r7, #4]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    6524:	6899      	ldr	r1, [r3, #8]
    6526:	40f1      	lsrs	r1, r6
    6528:	f011 0f01 	tst.w	r1, #1
    652c:	d102      	bne.n	6534 <gpio_nrfx_pin_interrupt_configure+0x40>
    652e:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
    6532:	d014      	beq.n	655e <gpio_nrfx_pin_interrupt_configure+0x6a>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    6534:	2300      	movs	r3, #0
    6536:	aa02      	add	r2, sp, #8
    6538:	4619      	mov	r1, r3
    653a:	4628      	mov	r0, r5
    653c:	f001 fa38 	bl	79b0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    6540:	4b1b      	ldr	r3, [pc, #108]	; (65b0 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    6542:	4298      	cmp	r0, r3
    6544:	d131      	bne.n	65aa <gpio_nrfx_pin_interrupt_configure+0xb6>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    6546:	2101      	movs	r1, #1
    6548:	4628      	mov	r0, r5
    654a:	f001 fc09 	bl	7d60 <nrfx_gpiote_trigger_enable>
	return 0;
    654e:	2000      	movs	r0, #0
}
    6550:	b005      	add	sp, #20
    6552:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrfx_gpiote_trigger_disable(abs_pin);
    6554:	4628      	mov	r0, r5
    6556:	f001 fc67 	bl	7e28 <nrfx_gpiote_trigger_disable>
		return 0;
    655a:	2000      	movs	r0, #0
    655c:	e7f8      	b.n	6550 <gpio_nrfx_pin_interrupt_configure+0x5c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    655e:	f005 031f 	and.w	r3, r5, #31

    return pin_number >> 5;
    6562:	096a      	lsrs	r2, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6564:	2a01      	cmp	r2, #1
    6566:	d014      	beq.n	6592 <gpio_nrfx_pin_interrupt_configure+0x9e>
        case 0: return NRF_P0;
    6568:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    656c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6570:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    6574:	f013 0f01 	tst.w	r3, #1
    6578:	d1dc      	bne.n	6534 <gpio_nrfx_pin_interrupt_configure+0x40>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    657a:	f10d 0107 	add.w	r1, sp, #7
    657e:	4628      	mov	r0, r5
    6580:	f001 fb92 	bl	7ca8 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    6584:	4b0b      	ldr	r3, [pc, #44]	; (65b4 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    6586:	4298      	cmp	r0, r3
    6588:	d005      	beq.n	6596 <gpio_nrfx_pin_interrupt_configure+0xa2>
		trigger_config.p_in_channel = &ch;
    658a:	f10d 0307 	add.w	r3, sp, #7
    658e:	9303      	str	r3, [sp, #12]
    6590:	e7d0      	b.n	6534 <gpio_nrfx_pin_interrupt_configure+0x40>
        case 1: return NRF_P1;
    6592:	4a09      	ldr	r2, [pc, #36]	; (65b8 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    6594:	e7ea      	b.n	656c <gpio_nrfx_pin_interrupt_configure+0x78>
			err = nrfx_gpiote_channel_alloc(&ch);
    6596:	f10d 0007 	add.w	r0, sp, #7
    659a:	f001 fbd9 	bl	7d50 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    659e:	4b04      	ldr	r3, [pc, #16]	; (65b0 <gpio_nrfx_pin_interrupt_configure+0xbc>)
    65a0:	4298      	cmp	r0, r3
    65a2:	d0f2      	beq.n	658a <gpio_nrfx_pin_interrupt_configure+0x96>
				return -ENOMEM;
    65a4:	f06f 000b 	mvn.w	r0, #11
    65a8:	e7d2      	b.n	6550 <gpio_nrfx_pin_interrupt_configure+0x5c>
		return -EIO;
    65aa:	f06f 0004 	mvn.w	r0, #4
    65ae:	e7cf      	b.n	6550 <gpio_nrfx_pin_interrupt_configure+0x5c>
    65b0:	0bad0000 	.word	0x0bad0000
    65b4:	0bad0004 	.word	0x0bad0004
    65b8:	50000300 	.word	0x50000300

000065bc <pin_uninit>:
{
    65bc:	b530      	push	{r4, r5, lr}
    65be:	b083      	sub	sp, #12
    65c0:	4604      	mov	r4, r0
	err = nrfx_gpiote_channel_get(pin, &ch);
    65c2:	f10d 0107 	add.w	r1, sp, #7
    65c6:	f001 fb6f 	bl	7ca8 <nrfx_gpiote_channel_get>
    65ca:	4605      	mov	r5, r0
	err = nrfx_gpiote_pin_uninit(pin);
    65cc:	4620      	mov	r0, r4
    65ce:	f001 fc5b 	bl	7e88 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    65d2:	4b0b      	ldr	r3, [pc, #44]	; (6600 <pin_uninit+0x44>)
    65d4:	4298      	cmp	r0, r3
    65d6:	d10f      	bne.n	65f8 <pin_uninit+0x3c>
	if (free_ch) {
    65d8:	429d      	cmp	r5, r3
    65da:	d005      	beq.n	65e8 <pin_uninit+0x2c>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    65dc:	4b08      	ldr	r3, [pc, #32]	; (6600 <pin_uninit+0x44>)
    65de:	4298      	cmp	r0, r3
    65e0:	d107      	bne.n	65f2 <pin_uninit+0x36>
    65e2:	2000      	movs	r0, #0
}
    65e4:	b003      	add	sp, #12
    65e6:	bd30      	pop	{r4, r5, pc}
		err = nrfx_gpiote_channel_free(ch);
    65e8:	f89d 0007 	ldrb.w	r0, [sp, #7]
    65ec:	f001 fba8 	bl	7d40 <nrfx_gpiote_channel_free>
    65f0:	e7f4      	b.n	65dc <pin_uninit+0x20>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    65f2:	f06f 0004 	mvn.w	r0, #4
    65f6:	e7f5      	b.n	65e4 <pin_uninit+0x28>
		return -EIO;
    65f8:	f06f 0004 	mvn.w	r0, #4
    65fc:	e7f2      	b.n	65e4 <pin_uninit+0x28>
    65fe:	bf00      	nop
    6600:	0bad0000 	.word	0x0bad0000

00006604 <gpio_nrfx_pin_configure>:
{
    6604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6608:	b087      	sub	sp, #28
	return port->config;
    660a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    660e:	f898 300c 	ldrb.w	r3, [r8, #12]
    6612:	f001 051f 	and.w	r5, r1, #31
    6616:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    661a:	2a00      	cmp	r2, #0
    661c:	d044      	beq.n	66a8 <gpio_nrfx_pin_configure+0xa4>
    661e:	460c      	mov	r4, r1
    6620:	4617      	mov	r7, r2
	nrfx_gpiote_trigger_config_t trigger_config = {
    6622:	2600      	movs	r6, #0
    6624:	9603      	str	r6, [sp, #12]
    6626:	9604      	str	r6, [sp, #16]
	err = nrfx_gpiote_channel_get(pin, &ch);
    6628:	f10d 0117 	add.w	r1, sp, #23
    662c:	4620      	mov	r0, r4
    662e:	f001 fb3b 	bl	7ca8 <nrfx_gpiote_channel_get>
    6632:	4681      	mov	r9, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    6634:	4633      	mov	r3, r6
    6636:	aa03      	add	r2, sp, #12
    6638:	4631      	mov	r1, r6
    663a:	4628      	mov	r0, r5
    663c:	f001 f9b8 	bl	79b0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    6640:	4b30      	ldr	r3, [pc, #192]	; (6704 <gpio_nrfx_pin_configure+0x100>)
    6642:	4298      	cmp	r0, r3
    6644:	d15b      	bne.n	66fe <gpio_nrfx_pin_configure+0xfa>
	if (free_ch) {
    6646:	4599      	cmp	r9, r3
    6648:	d036      	beq.n	66b8 <gpio_nrfx_pin_configure+0xb4>
	if (flags & GPIO_OUTPUT) {
    664a:	f417 7f00 	tst.w	r7, #512	; 0x200
    664e:	d043      	beq.n	66d8 <gpio_nrfx_pin_configure+0xd4>
		int rv = get_drive(flags, &drive);
    6650:	f10d 0103 	add.w	r1, sp, #3
    6654:	4638      	mov	r0, r7
    6656:	f7ff fef9 	bl	644c <get_drive>
		if (rv != 0) {
    665a:	4606      	mov	r6, r0
    665c:	bb40      	cbnz	r0, 66b0 <gpio_nrfx_pin_configure+0xac>
		nrfx_gpiote_output_config_t output_config = {
    665e:	f89d 3003 	ldrb.w	r3, [sp, #3]
    6662:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    6666:	f417 7f80 	tst.w	r7, #256	; 0x100
    666a:	bf0c      	ite	eq
    666c:	2301      	moveq	r3, #1
    666e:	2300      	movne	r3, #0
		nrfx_gpiote_output_config_t output_config = {
    6670:	f88d 3005 	strb.w	r3, [sp, #5]
			.pull = get_pull(flags)
    6674:	4638      	mov	r0, r7
    6676:	f007 f86e 	bl	d756 <get_pull>
		nrfx_gpiote_output_config_t output_config = {
    667a:	f88d 0006 	strb.w	r0, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    667e:	f417 6f00 	tst.w	r7, #2048	; 0x800
    6682:	d01e      	beq.n	66c2 <gpio_nrfx_pin_configure+0xbe>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    6684:	f8d8 3004 	ldr.w	r3, [r8, #4]
    6688:	2101      	movs	r1, #1
    668a:	fa01 f404 	lsl.w	r4, r1, r4
    p_reg->OUTSET = set_mask;
    668e:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    6692:	2200      	movs	r2, #0
    6694:	a901      	add	r1, sp, #4
    6696:	4628      	mov	r0, r5
    6698:	f001 fa40 	bl	7b1c <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    669c:	4b19      	ldr	r3, [pc, #100]	; (6704 <gpio_nrfx_pin_configure+0x100>)
    669e:	4298      	cmp	r0, r3
    66a0:	d006      	beq.n	66b0 <gpio_nrfx_pin_configure+0xac>
    66a2:	f06f 0615 	mvn.w	r6, #21
    66a6:	e003      	b.n	66b0 <gpio_nrfx_pin_configure+0xac>
		return pin_uninit(abs_pin);
    66a8:	4628      	mov	r0, r5
    66aa:	f7ff ff87 	bl	65bc <pin_uninit>
    66ae:	4606      	mov	r6, r0
}
    66b0:	4630      	mov	r0, r6
    66b2:	b007      	add	sp, #28
    66b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		err = nrfx_gpiote_channel_free(ch);
    66b8:	f89d 0017 	ldrb.w	r0, [sp, #23]
    66bc:	f001 fb40 	bl	7d40 <nrfx_gpiote_channel_free>
    66c0:	e7c3      	b.n	664a <gpio_nrfx_pin_configure+0x46>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    66c2:	f417 6f80 	tst.w	r7, #1024	; 0x400
    66c6:	d0e4      	beq.n	6692 <gpio_nrfx_pin_configure+0x8e>
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    66c8:	f8d8 2004 	ldr.w	r2, [r8, #4]
    66cc:	2301      	movs	r3, #1
    66ce:	fa03 f404 	lsl.w	r4, r3, r4
    p_reg->OUTCLR = clr_mask;
    66d2:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
}
    66d6:	e7dc      	b.n	6692 <gpio_nrfx_pin_configure+0x8e>
		.pull = get_pull(flags)
    66d8:	4638      	mov	r0, r7
    66da:	f007 f83c 	bl	d756 <get_pull>
	nrfx_gpiote_input_config_t input_config = {
    66de:	f88d 0008 	strb.w	r0, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    66e2:	2300      	movs	r3, #0
    66e4:	461a      	mov	r2, r3
    66e6:	a902      	add	r1, sp, #8
    66e8:	4628      	mov	r0, r5
    66ea:	f001 f961 	bl	79b0 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    66ee:	4b05      	ldr	r3, [pc, #20]	; (6704 <gpio_nrfx_pin_configure+0x100>)
    66f0:	4298      	cmp	r0, r3
    66f2:	d101      	bne.n	66f8 <gpio_nrfx_pin_configure+0xf4>
    66f4:	2600      	movs	r6, #0
    66f6:	e7db      	b.n	66b0 <gpio_nrfx_pin_configure+0xac>
    66f8:	f06f 0615 	mvn.w	r6, #21
    66fc:	e7d8      	b.n	66b0 <gpio_nrfx_pin_configure+0xac>
		return -EINVAL;
    66fe:	f06f 0615 	mvn.w	r6, #21
    6702:	e7d5      	b.n	66b0 <gpio_nrfx_pin_configure+0xac>
    6704:	0bad0000 	.word	0x0bad0000

00006708 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    6708:	b508      	push	{r3, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    670a:	f001 fb0f 	bl	7d2c <nrfx_gpiote_is_init>
    670e:	b108      	cbz	r0, 6714 <gpio_nrfx_init+0xc>
		return 0;
    6710:	2000      	movs	r0, #0

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    6712:	bd08      	pop	{r3, pc}
	err = nrfx_gpiote_init(0/*not used*/);
    6714:	f001 fae0 	bl	7cd8 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    6718:	4b08      	ldr	r3, [pc, #32]	; (673c <gpio_nrfx_init+0x34>)
    671a:	4298      	cmp	r0, r3
    671c:	d10a      	bne.n	6734 <gpio_nrfx_init+0x2c>
	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    671e:	2100      	movs	r1, #0
    6720:	4807      	ldr	r0, [pc, #28]	; (6740 <gpio_nrfx_init+0x38>)
    6722:	f001 fabb 	bl	7c9c <nrfx_gpiote_global_callback_set>
	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    6726:	2200      	movs	r2, #0
    6728:	2105      	movs	r1, #5
    672a:	2006      	movs	r0, #6
    672c:	f7fd faaa 	bl	3c84 <z_arm_irq_priority_set>
	return 0;
    6730:	2000      	movs	r0, #0
    6732:	e7ee      	b.n	6712 <gpio_nrfx_init+0xa>
		return -EIO;
    6734:	f06f 0004 	mvn.w	r0, #4
    6738:	e7eb      	b.n	6712 <gpio_nrfx_init+0xa>
    673a:	bf00      	nop
    673c:	0bad0000 	.word	0x0bad0000
    6740:	0000d84d 	.word	0x0000d84d

00006744 <uarte_nrfx_pins_configure>:
	return config->uarte_regs;
}

#ifndef CONFIG_PINCTRL
static void uarte_nrfx_pins_configure(const struct device *dev, bool sleep)
{
    6744:	b410      	push	{r4}
	return dev->config;
    6746:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	if (!sleep) {
    6748:	2900      	cmp	r1, #0
    674a:	d17e      	bne.n	684a <uarte_nrfx_pins_configure+0x106>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    674c:	68da      	ldr	r2, [r3, #12]
    674e:	f1b2 3fff 	cmp.w	r2, #4294967295
    6752:	d017      	beq.n	6784 <uarte_nrfx_pins_configure+0x40>
    *p_pin = pin_number & 0x1F;
    6754:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    6758:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    675a:	2a01      	cmp	r2, #1
    675c:	d065      	beq.n	682a <uarte_nrfx_pins_configure+0xe6>
        case 0: return NRF_P0;
    675e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6762:	2201      	movs	r2, #1
    6764:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    6766:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
			nrf_gpio_pin_write(cfg->tx_pin, 1);
			nrf_gpio_cfg_output(cfg->tx_pin);
    676a:	68da      	ldr	r2, [r3, #12]
    *p_pin = pin_number & 0x1F;
    676c:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    6770:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6772:	2a01      	cmp	r2, #1
    6774:	d05b      	beq.n	682e <uarte_nrfx_pins_configure+0xea>
        case 0: return NRF_P0;
    6776:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    677a:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    677e:	2103      	movs	r1, #3
    6780:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		}

		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    6784:	691a      	ldr	r2, [r3, #16]
    6786:	f1b2 3fff 	cmp.w	r2, #4294967295
    678a:	d00f      	beq.n	67ac <uarte_nrfx_pins_configure+0x68>
			nrf_gpio_cfg_input(cfg->rx_pin,
					   (cfg->rx_pull_up ?
    678c:	7f19      	ldrb	r1, [r3, #28]
			nrf_gpio_cfg_input(cfg->rx_pin,
    678e:	2900      	cmp	r1, #0
    6790:	d04f      	beq.n	6832 <uarte_nrfx_pins_configure+0xee>
    6792:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
    6794:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    6798:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    679a:	2a01      	cmp	r2, #1
    679c:	d04b      	beq.n	6836 <uarte_nrfx_pins_configure+0xf2>
        case 0: return NRF_P0;
    679e:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    67a2:	0080      	lsls	r0, r0, #2
    reg->PIN_CNF[pin_number] = cnf;
    67a4:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    67a8:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
					    NRF_GPIO_PIN_PULLUP :
					    NRF_GPIO_PIN_NOPULL));
		}

		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    67ac:	695a      	ldr	r2, [r3, #20]
    67ae:	f1b2 3fff 	cmp.w	r2, #4294967295
    67b2:	d017      	beq.n	67e4 <uarte_nrfx_pins_configure+0xa0>
    *p_pin = pin_number & 0x1F;
    67b4:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    67b8:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    67ba:	2a01      	cmp	r2, #1
    67bc:	d03d      	beq.n	683a <uarte_nrfx_pins_configure+0xf6>
        case 0: return NRF_P0;
    67be:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    67c2:	2201      	movs	r2, #1
    67c4:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    67c6:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
			nrf_gpio_pin_write(cfg->rts_pin, 1);
			nrf_gpio_cfg_output(cfg->rts_pin);
    67ca:	695a      	ldr	r2, [r3, #20]
    *p_pin = pin_number & 0x1F;
    67cc:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    67d0:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    67d2:	2a01      	cmp	r2, #1
    67d4:	d033      	beq.n	683e <uarte_nrfx_pins_configure+0xfa>
        case 0: return NRF_P0;
    67d6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    67da:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    67de:	2103      	movs	r1, #3
    67e0:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		}

		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    67e4:	699a      	ldr	r2, [r3, #24]
    67e6:	f1b2 3fff 	cmp.w	r2, #4294967295
    67ea:	d00e      	beq.n	680a <uarte_nrfx_pins_configure+0xc6>
			nrf_gpio_cfg_input(cfg->cts_pin,
					   (cfg->cts_pull_up ?
    67ec:	7f59      	ldrb	r1, [r3, #29]
			nrf_gpio_cfg_input(cfg->cts_pin,
    67ee:	b341      	cbz	r1, 6842 <uarte_nrfx_pins_configure+0xfe>
    67f0:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
    67f2:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    67f6:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    67f8:	2a01      	cmp	r2, #1
    67fa:	d024      	beq.n	6846 <uarte_nrfx_pins_configure+0x102>
        case 0: return NRF_P0;
    67fc:	f04f 44a0 	mov.w	r4, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    6800:	0080      	lsls	r0, r0, #2
    reg->PIN_CNF[pin_number] = cnf;
    6802:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    6806:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
			nrf_gpio_cfg_default(cfg->cts_pin);
		}
	}

	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    680a:	681a      	ldr	r2, [r3, #0]
    680c:	68d8      	ldr	r0, [r3, #12]
    680e:	6919      	ldr	r1, [r3, #16]

NRF_STATIC_INLINE void nrf_uarte_txrx_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pseltxd,
                                               uint32_t         pselrxd)
{
    p_reg->PSEL.TXD = pseltxd;
    6810:	f8c2 050c 	str.w	r0, [r2, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    6814:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    6818:	681a      	ldr	r2, [r3, #0]
    681a:	6959      	ldr	r1, [r3, #20]
    681c:	699b      	ldr	r3, [r3, #24]

NRF_STATIC_INLINE void nrf_uarte_hwfc_pins_set(NRF_UARTE_Type * p_reg,
                                               uint32_t         pselrts,
                                               uint32_t         pselcts)
{
    p_reg->PSEL.RTS = pselrts;
    681e:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    6822:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
    6826:	bc10      	pop	{r4}
    6828:	4770      	bx	lr
        case 1: return NRF_P1;
    682a:	482c      	ldr	r0, [pc, #176]	; (68dc <uarte_nrfx_pins_configure+0x198>)
    682c:	e799      	b.n	6762 <uarte_nrfx_pins_configure+0x1e>
    682e:	482b      	ldr	r0, [pc, #172]	; (68dc <uarte_nrfx_pins_configure+0x198>)
    6830:	e7a3      	b.n	677a <uarte_nrfx_pins_configure+0x36>
			nrf_gpio_cfg_input(cfg->rx_pin,
    6832:	2000      	movs	r0, #0
    6834:	e7ae      	b.n	6794 <uarte_nrfx_pins_configure+0x50>
    6836:	4c29      	ldr	r4, [pc, #164]	; (68dc <uarte_nrfx_pins_configure+0x198>)
    6838:	e7b3      	b.n	67a2 <uarte_nrfx_pins_configure+0x5e>
    683a:	4828      	ldr	r0, [pc, #160]	; (68dc <uarte_nrfx_pins_configure+0x198>)
    683c:	e7c1      	b.n	67c2 <uarte_nrfx_pins_configure+0x7e>
    683e:	4827      	ldr	r0, [pc, #156]	; (68dc <uarte_nrfx_pins_configure+0x198>)
    6840:	e7cb      	b.n	67da <uarte_nrfx_pins_configure+0x96>
			nrf_gpio_cfg_input(cfg->cts_pin,
    6842:	2000      	movs	r0, #0
    6844:	e7d5      	b.n	67f2 <uarte_nrfx_pins_configure+0xae>
    6846:	4c25      	ldr	r4, [pc, #148]	; (68dc <uarte_nrfx_pins_configure+0x198>)
    6848:	e7da      	b.n	6800 <uarte_nrfx_pins_configure+0xbc>
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    684a:	68da      	ldr	r2, [r3, #12]
    684c:	f1b2 3fff 	cmp.w	r2, #4294967295
    6850:	d00b      	beq.n	686a <uarte_nrfx_pins_configure+0x126>
    *p_pin = pin_number & 0x1F;
    6852:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    6856:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6858:	2a01      	cmp	r2, #1
    685a:	d037      	beq.n	68cc <uarte_nrfx_pins_configure+0x188>
        case 0: return NRF_P0;
    685c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    6860:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    6864:	2102      	movs	r1, #2
    6866:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    686a:	691a      	ldr	r2, [r3, #16]
    686c:	f1b2 3fff 	cmp.w	r2, #4294967295
    6870:	d00b      	beq.n	688a <uarte_nrfx_pins_configure+0x146>
    *p_pin = pin_number & 0x1F;
    6872:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    6876:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6878:	2a01      	cmp	r2, #1
    687a:	d029      	beq.n	68d0 <uarte_nrfx_pins_configure+0x18c>
        case 0: return NRF_P0;
    687c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    6880:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    6884:	2102      	movs	r1, #2
    6886:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    688a:	695a      	ldr	r2, [r3, #20]
    688c:	f1b2 3fff 	cmp.w	r2, #4294967295
    6890:	d00b      	beq.n	68aa <uarte_nrfx_pins_configure+0x166>
    *p_pin = pin_number & 0x1F;
    6892:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    6896:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6898:	2a01      	cmp	r2, #1
    689a:	d01b      	beq.n	68d4 <uarte_nrfx_pins_configure+0x190>
        case 0: return NRF_P0;
    689c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    68a0:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    68a4:	2102      	movs	r1, #2
    68a6:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    68aa:	699a      	ldr	r2, [r3, #24]
    68ac:	f1b2 3fff 	cmp.w	r2, #4294967295
    68b0:	d0ab      	beq.n	680a <uarte_nrfx_pins_configure+0xc6>
    *p_pin = pin_number & 0x1F;
    68b2:	f002 011f 	and.w	r1, r2, #31
    return pin_number >> 5;
    68b6:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    68b8:	2a01      	cmp	r2, #1
    68ba:	d00d      	beq.n	68d8 <uarte_nrfx_pins_configure+0x194>
        case 0: return NRF_P0;
    68bc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    68c0:	f501 72e0 	add.w	r2, r1, #448	; 0x1c0
    68c4:	2102      	movs	r1, #2
    68c6:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
}
    68ca:	e79e      	b.n	680a <uarte_nrfx_pins_configure+0xc6>
        case 1: return NRF_P1;
    68cc:	4803      	ldr	r0, [pc, #12]	; (68dc <uarte_nrfx_pins_configure+0x198>)
    68ce:	e7c7      	b.n	6860 <uarte_nrfx_pins_configure+0x11c>
    68d0:	4802      	ldr	r0, [pc, #8]	; (68dc <uarte_nrfx_pins_configure+0x198>)
    68d2:	e7d5      	b.n	6880 <uarte_nrfx_pins_configure+0x13c>
    68d4:	4801      	ldr	r0, [pc, #4]	; (68dc <uarte_nrfx_pins_configure+0x198>)
    68d6:	e7e3      	b.n	68a0 <uarte_nrfx_pins_configure+0x15c>
    68d8:	4800      	ldr	r0, [pc, #0]	; (68dc <uarte_nrfx_pins_configure+0x198>)
    68da:	e7f1      	b.n	68c0 <uarte_nrfx_pins_configure+0x17c>
    68dc:	50000300 	.word	0x50000300

000068e0 <baudrate_set>:
	return dev->config;
    68e0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    68e2:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    68e4:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    68e8:	d06f      	beq.n	69ca <baudrate_set+0xea>
    68ea:	d83a      	bhi.n	6962 <baudrate_set+0x82>
    68ec:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    68f0:	d06e      	beq.n	69d0 <baudrate_set+0xf0>
    68f2:	d90a      	bls.n	690a <baudrate_set+0x2a>
    68f4:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    68f8:	d075      	beq.n	69e6 <baudrate_set+0x106>
    68fa:	d924      	bls.n	6946 <baudrate_set+0x66>
    68fc:	f647 2312 	movw	r3, #31250	; 0x7a12
    6900:	4299      	cmp	r1, r3
    6902:	d12b      	bne.n	695c <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    6904:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    6908:	e013      	b.n	6932 <baudrate_set+0x52>
	switch (baudrate) {
    690a:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    690e:	d061      	beq.n	69d4 <baudrate_set+0xf4>
    6910:	d907      	bls.n	6922 <baudrate_set+0x42>
    6912:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    6916:	d063      	beq.n	69e0 <baudrate_set+0x100>
    6918:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    691c:	d110      	bne.n	6940 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    691e:	4b3c      	ldr	r3, [pc, #240]	; (6a10 <baudrate_set+0x130>)
    6920:	e007      	b.n	6932 <baudrate_set+0x52>
	switch (baudrate) {
    6922:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    6926:	d058      	beq.n	69da <baudrate_set+0xfa>
    6928:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    692c:	d105      	bne.n	693a <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    692e:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    6932:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    6936:	2000      	movs	r0, #0
    6938:	4770      	bx	lr
	switch (baudrate) {
    693a:	f06f 0015 	mvn.w	r0, #21
    693e:	4770      	bx	lr
    6940:	f06f 0015 	mvn.w	r0, #21
    6944:	4770      	bx	lr
    6946:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    694a:	d04e      	beq.n	69ea <baudrate_set+0x10a>
    694c:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    6950:	d101      	bne.n	6956 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    6952:	4b30      	ldr	r3, [pc, #192]	; (6a14 <baudrate_set+0x134>)
    6954:	e7ed      	b.n	6932 <baudrate_set+0x52>
	switch (baudrate) {
    6956:	f06f 0015 	mvn.w	r0, #21
    695a:	4770      	bx	lr
    695c:	f06f 0015 	mvn.w	r0, #21
    6960:	4770      	bx	lr
    6962:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    6966:	d042      	beq.n	69ee <baudrate_set+0x10e>
    6968:	d909      	bls.n	697e <baudrate_set+0x9e>
    696a:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    696e:	d046      	beq.n	69fe <baudrate_set+0x11e>
    6970:	d91f      	bls.n	69b2 <baudrate_set+0xd2>
    6972:	4b29      	ldr	r3, [pc, #164]	; (6a18 <baudrate_set+0x138>)
    6974:	4299      	cmp	r1, r3
    6976:	d148      	bne.n	6a0a <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    6978:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    697c:	e7d9      	b.n	6932 <baudrate_set+0x52>
	switch (baudrate) {
    697e:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    6982:	d037      	beq.n	69f4 <baudrate_set+0x114>
    6984:	d905      	bls.n	6992 <baudrate_set+0xb2>
    6986:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    698a:	d10f      	bne.n	69ac <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    698c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    6990:	e7cf      	b.n	6932 <baudrate_set+0x52>
	switch (baudrate) {
    6992:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    6996:	4299      	cmp	r1, r3
    6998:	d02e      	beq.n	69f8 <baudrate_set+0x118>
    699a:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    699e:	d102      	bne.n	69a6 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    69a0:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    69a4:	e7c5      	b.n	6932 <baudrate_set+0x52>
	switch (baudrate) {
    69a6:	f06f 0015 	mvn.w	r0, #21
    69aa:	4770      	bx	lr
    69ac:	f06f 0015 	mvn.w	r0, #21
    69b0:	4770      	bx	lr
    69b2:	4b1a      	ldr	r3, [pc, #104]	; (6a1c <baudrate_set+0x13c>)
    69b4:	4299      	cmp	r1, r3
    69b6:	d025      	beq.n	6a04 <baudrate_set+0x124>
    69b8:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    69bc:	d102      	bne.n	69c4 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    69be:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    69c2:	e7b6      	b.n	6932 <baudrate_set+0x52>
	switch (baudrate) {
    69c4:	f06f 0015 	mvn.w	r0, #21
    69c8:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    69ca:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    69ce:	e7b0      	b.n	6932 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    69d0:	4b13      	ldr	r3, [pc, #76]	; (6a20 <baudrate_set+0x140>)
    69d2:	e7ae      	b.n	6932 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    69d4:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    69d8:	e7ab      	b.n	6932 <baudrate_set+0x52>
	switch (baudrate) {
    69da:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    69de:	e7a8      	b.n	6932 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    69e0:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    69e4:	e7a5      	b.n	6932 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    69e6:	4b0f      	ldr	r3, [pc, #60]	; (6a24 <baudrate_set+0x144>)
    69e8:	e7a3      	b.n	6932 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    69ea:	4b0f      	ldr	r3, [pc, #60]	; (6a28 <baudrate_set+0x148>)
    69ec:	e7a1      	b.n	6932 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    69ee:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    69f2:	e79e      	b.n	6932 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    69f4:	4b0d      	ldr	r3, [pc, #52]	; (6a2c <baudrate_set+0x14c>)
    69f6:	e79c      	b.n	6932 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    69f8:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    69fc:	e799      	b.n	6932 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    69fe:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    6a02:	e796      	b.n	6932 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    6a04:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    6a08:	e793      	b.n	6932 <baudrate_set+0x52>
	switch (baudrate) {
    6a0a:	f06f 0015 	mvn.w	r0, #21
}
    6a0e:	4770      	bx	lr
    6a10:	0013b000 	.word	0x0013b000
    6a14:	004ea000 	.word	0x004ea000
    6a18:	000f4240 	.word	0x000f4240
    6a1c:	0003d090 	.word	0x0003d090
    6a20:	00275000 	.word	0x00275000
    6a24:	0075c000 	.word	0x0075c000
    6a28:	003af000 	.word	0x003af000
    6a2c:	013a9000 	.word	0x013a9000

00006a30 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    6a30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a34:	4605      	mov	r5, r0
    6a36:	460f      	mov	r7, r1
	return dev->data;
    6a38:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    6a3c:	f007 fb89 	bl	e152 <k_is_in_isr>
    6a40:	b920      	cbnz	r0, 6a4c <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    6a42:	4b16      	ldr	r3, [pc, #88]	; (6a9c <uarte_nrfx_poll_out+0x6c>)
    6a44:	781b      	ldrb	r3, [r3, #0]
    6a46:	b1ab      	cbz	r3, 6a74 <uarte_nrfx_poll_out+0x44>
    6a48:	2300      	movs	r3, #0
    6a4a:	e000      	b.n	6a4e <uarte_nrfx_poll_out+0x1e>
    6a4c:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    6a4e:	b19b      	cbz	r3, 6a78 <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
    6a50:	f04f 0320 	mov.w	r3, #32
    6a54:	f3ef 8411 	mrs	r4, BASEPRI
    6a58:	f383 8812 	msr	BASEPRI_MAX, r3
    6a5c:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
    6a60:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    6a62:	4628      	mov	r0, r5
    6a64:	f007 f811 	bl	da8a <is_tx_ready>
    6a68:	b950      	cbnz	r0, 6a80 <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
    6a6a:	f384 8811 	msr	BASEPRI, r4
    6a6e:	f3bf 8f6f 	isb	sy
}
    6a72:	e7ed      	b.n	6a50 <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    6a74:	2301      	movs	r3, #1
    6a76:	e7ea      	b.n	6a4e <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    6a78:	4628      	mov	r0, r5
    6a7a:	f007 f927 	bl	dccc <wait_tx_ready>
    6a7e:	4606      	mov	r6, r0
	}

	data->char_out = c;
    6a80:	4641      	mov	r1, r8
    6a82:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    6a86:	2201      	movs	r2, #1
    6a88:	4628      	mov	r0, r5
    6a8a:	f007 f818 	bl	dabe <tx_start>
	__asm__ volatile(
    6a8e:	f386 8811 	msr	BASEPRI, r6
    6a92:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    6a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a9a:	bf00      	nop
    6a9c:	20002540 	.word	0x20002540

00006aa0 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    6aa0:	b538      	push	{r3, r4, r5, lr}
    6aa2:	4604      	mov	r4, r0
    6aa4:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    6aa6:	f101 0016 	add.w	r0, r1, #22
    6aaa:	f001 fb15 	bl	80d8 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    6aae:	4b14      	ldr	r3, [pc, #80]	; (6b00 <endtx_stoptx_ppi_init+0x60>)
    6ab0:	4298      	cmp	r0, r3
    6ab2:	d111      	bne.n	6ad8 <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    6ab4:	7dab      	ldrb	r3, [r5, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    6ab6:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    6aba:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    6abc:	4a11      	ldr	r2, [pc, #68]	; (6b04 <endtx_stoptx_ppi_init+0x64>)
    6abe:	33a2      	adds	r3, #162	; 0xa2
    6ac0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    6ac4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6ac8:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    6aca:	7da9      	ldrb	r1, [r5, #22]
    6acc:	2301      	movs	r3, #1
    6ace:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    6ad0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    6ad4:	2000      	movs	r0, #0
}
    6ad6:	bd38      	pop	{r3, r4, r5, pc}
    6ad8:	4b0b      	ldr	r3, [pc, #44]	; (6b08 <endtx_stoptx_ppi_init+0x68>)
    6ada:	4a0c      	ldr	r2, [pc, #48]	; (6b0c <endtx_stoptx_ppi_init+0x6c>)
    6adc:	1a9b      	subs	r3, r3, r2
    6ade:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate PPI Channel");
    6ae0:	f04f 0100 	mov.w	r1, #0
    6ae4:	2201      	movs	r2, #1
    6ae6:	f362 0102 	bfi	r1, r2, #0, #3
    6aea:	f36f 01c5 	bfc	r1, #3, #3
    6aee:	f363 118f 	bfi	r1, r3, #6, #10
    6af2:	4807      	ldr	r0, [pc, #28]	; (6b10 <endtx_stoptx_ppi_init+0x70>)
    6af4:	f7fa fe48 	bl	1788 <log_0>
		return -EIO;
    6af8:	f06f 0004 	mvn.w	r0, #4
    6afc:	e7eb      	b.n	6ad6 <endtx_stoptx_ppi_init+0x36>
    6afe:	bf00      	nop
    6b00:	0bad0000 	.word	0x0bad0000
    6b04:	4001f000 	.word	0x4001f000
    6b08:	0000ec8c 	.word	0x0000ec8c
    6b0c:	0000ec4c 	.word	0x0000ec4c
    6b10:	0000fbd0 	.word	0x0000fbd0

00006b14 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    6b14:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    6b18:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    6b1c:	4b01      	ldr	r3, [pc, #4]	; (6b24 <set_comparator+0x10>)
    6b1e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    6b22:	4770      	bx	lr
    6b24:	40011000 	.word	0x40011000

00006b28 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    6b28:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    6b2c:	4b01      	ldr	r3, [pc, #4]	; (6b34 <get_comparator+0xc>)
    6b2e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    6b32:	4770      	bx	lr
    6b34:	40011000 	.word	0x40011000

00006b38 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6b38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6b3c:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    6b3e:	4a02      	ldr	r2, [pc, #8]	; (6b48 <event_enable+0x10>)
    6b40:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    6b44:	4770      	bx	lr
    6b46:	bf00      	nop
    6b48:	40011000 	.word	0x40011000

00006b4c <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6b4c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6b50:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    6b52:	4a02      	ldr	r2, [pc, #8]	; (6b5c <event_disable+0x10>)
    6b54:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    6b58:	4770      	bx	lr
    6b5a:	bf00      	nop
    6b5c:	40011000 	.word	0x40011000

00006b60 <counter>:
     return p_reg->COUNTER;
    6b60:	4b01      	ldr	r3, [pc, #4]	; (6b68 <counter+0x8>)
    6b62:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    6b66:	4770      	bx	lr
    6b68:	40011000 	.word	0x40011000

00006b6c <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
    6b6c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    6b6e:	2301      	movs	r3, #1
    6b70:	4083      	lsls	r3, r0
    6b72:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6b74:	4a10      	ldr	r2, [pc, #64]	; (6bb8 <compare_int_lock+0x4c>)
    6b76:	f3bf 8f5b 	dmb	ish
    6b7a:	e852 1f00 	ldrex	r1, [r2]
    6b7e:	ea01 0c04 	and.w	ip, r1, r4
    6b82:	e842 ce00 	strex	lr, ip, [r2]
    6b86:	f1be 0f00 	cmp.w	lr, #0
    6b8a:	d1f6      	bne.n	6b7a <compare_int_lock+0xe>
    6b8c:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6b90:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    6b94:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    6b98:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    6b9c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    6ba0:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    6ba4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6ba8:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    6bac:	420b      	tst	r3, r1
}
    6bae:	bf14      	ite	ne
    6bb0:	2001      	movne	r0, #1
    6bb2:	2000      	moveq	r0, #0
    6bb4:	bd10      	pop	{r4, pc}
    6bb6:	bf00      	nop
    6bb8:	20001dc0 	.word	0x20001dc0

00006bbc <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    6bbc:	b570      	push	{r4, r5, r6, lr}
    6bbe:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    6bc0:	f007 f918 	bl	ddf4 <full_int_lock>
    6bc4:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    6bc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6bca:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    6bcc:	4a17      	ldr	r2, [pc, #92]	; (6c2c <channel_processing_check_and_clear+0x70>)
    6bce:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    6bd2:	4213      	tst	r3, r2
    6bd4:	d105      	bne.n	6be2 <channel_processing_check_and_clear+0x26>
	bool result = false;
    6bd6:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    6bd8:	4628      	mov	r0, r5
    6bda:	f007 f914 	bl	de06 <full_int_unlock>

	return result;
}
    6bde:	4630      	mov	r0, r6
    6be0:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    6be2:	2301      	movs	r3, #1
    6be4:	40a3      	lsls	r3, r4
    6be6:	43db      	mvns	r3, r3
    6be8:	4a11      	ldr	r2, [pc, #68]	; (6c30 <channel_processing_check_and_clear+0x74>)
    6bea:	f3bf 8f5b 	dmb	ish
    6bee:	e852 1f00 	ldrex	r1, [r2]
    6bf2:	ea01 0003 	and.w	r0, r1, r3
    6bf6:	e842 0600 	strex	r6, r0, [r2]
    6bfa:	2e00      	cmp	r6, #0
    6bfc:	d1f7      	bne.n	6bee <channel_processing_check_and_clear+0x32>
    6bfe:	f3bf 8f5b 	dmb	ish
    6c02:	b959      	cbnz	r1, 6c1c <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    6c04:	f104 0350 	add.w	r3, r4, #80	; 0x50
    6c08:	009b      	lsls	r3, r3, #2
    6c0a:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6c0c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6c10:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    6c14:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    6c16:	b113      	cbz	r3, 6c1e <channel_processing_check_and_clear+0x62>
    6c18:	2301      	movs	r3, #1
    6c1a:	e000      	b.n	6c1e <channel_processing_check_and_clear+0x62>
    6c1c:	2301      	movs	r3, #1
		if (result) {
    6c1e:	461e      	mov	r6, r3
    6c20:	2b00      	cmp	r3, #0
    6c22:	d0d9      	beq.n	6bd8 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    6c24:	4620      	mov	r0, r4
    6c26:	f007 f8d6 	bl	ddd6 <event_clear>
    6c2a:	e7d5      	b.n	6bd8 <channel_processing_check_and_clear+0x1c>
    6c2c:	40011000 	.word	0x40011000
    6c30:	20001dbc 	.word	0x20001dbc

00006c34 <compare_int_unlock>:
	if (key) {
    6c34:	b901      	cbnz	r1, 6c38 <compare_int_unlock+0x4>
}
    6c36:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    6c38:	2301      	movs	r3, #1
    6c3a:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6c3c:	4a11      	ldr	r2, [pc, #68]	; (6c84 <compare_int_unlock+0x50>)
    6c3e:	f3bf 8f5b 	dmb	ish
    6c42:	e852 1f00 	ldrex	r1, [r2]
    6c46:	4319      	orrs	r1, r3
    6c48:	e842 1c00 	strex	ip, r1, [r2]
    6c4c:	f1bc 0f00 	cmp.w	ip, #0
    6c50:	d1f7      	bne.n	6c42 <compare_int_unlock+0xe>
    6c52:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6c56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6c5a:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    6c5c:	4a0a      	ldr	r2, [pc, #40]	; (6c88 <compare_int_unlock+0x54>)
    6c5e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6c62:	f3bf 8f5b 	dmb	ish
    6c66:	4b09      	ldr	r3, [pc, #36]	; (6c8c <compare_int_unlock+0x58>)
    6c68:	681b      	ldr	r3, [r3, #0]
    6c6a:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    6c6e:	fa23 f000 	lsr.w	r0, r3, r0
    6c72:	f010 0f01 	tst.w	r0, #1
    6c76:	d0de      	beq.n	6c36 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6c78:	4b05      	ldr	r3, [pc, #20]	; (6c90 <compare_int_unlock+0x5c>)
    6c7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    6c7e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    6c82:	e7d8      	b.n	6c36 <compare_int_unlock+0x2>
    6c84:	20001dc0 	.word	0x20001dc0
    6c88:	40011000 	.word	0x40011000
    6c8c:	20001dbc 	.word	0x20001dbc
    6c90:	e000e100 	.word	0xe000e100

00006c94 <sys_clock_timeout_handler>:
{
    6c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6c96:	4607      	mov	r7, r0
    6c98:	4614      	mov	r4, r2
    6c9a:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    6c9c:	4610      	mov	r0, r2
    6c9e:	4619      	mov	r1, r3
    6ca0:	f007 f8a5 	bl	ddee <absolute_time_to_cc>
    6ca4:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    6ca6:	4b15      	ldr	r3, [pc, #84]	; (6cfc <sys_clock_timeout_handler+0x68>)
    6ca8:	681a      	ldr	r2, [r3, #0]
    6caa:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    6cac:	601c      	str	r4, [r3, #0]
    6cae:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    6cb0:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    6cb4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    6cb8:	d308      	bcc.n	6ccc <sys_clock_timeout_handler+0x38>
	return false;
    6cba:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    6cbc:	f004 fc36 	bl	b52c <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    6cc0:	4638      	mov	r0, r7
    6cc2:	f7ff ff31 	bl	6b28 <get_comparator>
    6cc6:	42a8      	cmp	r0, r5
    6cc8:	d00c      	beq.n	6ce4 <sys_clock_timeout_handler+0x50>
}
    6cca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    6ccc:	4b0c      	ldr	r3, [pc, #48]	; (6d00 <sys_clock_timeout_handler+0x6c>)
    6cce:	6819      	ldr	r1, [r3, #0]
    6cd0:	0a0b      	lsrs	r3, r1, #8
    6cd2:	060a      	lsls	r2, r1, #24
    6cd4:	1952      	adds	r2, r2, r5
    6cd6:	f143 0300 	adc.w	r3, r3, #0
    6cda:	490a      	ldr	r1, [pc, #40]	; (6d04 <sys_clock_timeout_handler+0x70>)
    6cdc:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    6ce0:	2401      	movs	r4, #1
    6ce2:	e7eb      	b.n	6cbc <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
    6ce4:	b11c      	cbz	r4, 6cee <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
    6ce6:	4638      	mov	r0, r7
    6ce8:	f7ff ff26 	bl	6b38 <event_enable>
}
    6cec:	e7ed      	b.n	6cca <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
    6cee:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    6cf2:	4638      	mov	r0, r7
    6cf4:	f7ff ff0e 	bl	6b14 <set_comparator>
    6cf8:	e7f5      	b.n	6ce6 <sys_clock_timeout_handler+0x52>
    6cfa:	bf00      	nop
    6cfc:	20000670 	.word	0x20000670
    6d00:	20001dc4 	.word	0x20001dc4
    6d04:	20000658 	.word	0x20000658

00006d08 <z_nrf_rtc_timer_read>:
{
    6d08:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    6d0a:	4b0d      	ldr	r3, [pc, #52]	; (6d40 <z_nrf_rtc_timer_read+0x38>)
    6d0c:	681b      	ldr	r3, [r3, #0]
    6d0e:	0a1d      	lsrs	r5, r3, #8
    6d10:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    6d12:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    6d16:	f7ff ff23 	bl	6b60 <counter>
    6d1a:	4603      	mov	r3, r0
	val += cntr;
    6d1c:	1820      	adds	r0, r4, r0
    6d1e:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    6d22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    6d26:	d20a      	bcs.n	6d3e <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    6d28:	4b06      	ldr	r3, [pc, #24]	; (6d44 <z_nrf_rtc_timer_read+0x3c>)
    6d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
    6d2e:	4299      	cmp	r1, r3
    6d30:	bf08      	it	eq
    6d32:	4290      	cmpeq	r0, r2
    6d34:	d203      	bcs.n	6d3e <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    6d36:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    6d3a:	f141 0100 	adc.w	r1, r1, #0
}
    6d3e:	bd38      	pop	{r3, r4, r5, pc}
    6d40:	20001dc4 	.word	0x20001dc4
    6d44:	20000658 	.word	0x20000658

00006d48 <compare_set_nolocks>:
{
    6d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6d4c:	4606      	mov	r6, r0
    6d4e:	4614      	mov	r4, r2
    6d50:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    6d52:	4610      	mov	r0, r2
    6d54:	4619      	mov	r1, r3
    6d56:	f007 f84a 	bl	ddee <absolute_time_to_cc>
    6d5a:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    6d5c:	f7ff ffd4 	bl	6d08 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    6d60:	42a9      	cmp	r1, r5
    6d62:	bf08      	it	eq
    6d64:	42a0      	cmpeq	r0, r4
    6d66:	d21e      	bcs.n	6da6 <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
    6d68:	ebb4 0800 	subs.w	r8, r4, r0
    6d6c:	eb65 0901 	sbc.w	r9, r5, r1
    6d70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6d74:	2300      	movs	r3, #0
    6d76:	454b      	cmp	r3, r9
    6d78:	bf08      	it	eq
    6d7a:	4542      	cmpeq	r2, r8
    6d7c:	d32e      	bcc.n	6ddc <compare_set_nolocks+0x94>
		if (target_time != cc_data[chan].target_time) {
    6d7e:	4b19      	ldr	r3, [pc, #100]	; (6de4 <compare_set_nolocks+0x9c>)
    6d80:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    6d84:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    6d88:	42ab      	cmp	r3, r5
    6d8a:	bf08      	it	eq
    6d8c:	42a2      	cmpeq	r2, r4
    6d8e:	d018      	beq.n	6dc2 <compare_set_nolocks+0x7a>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    6d90:	4639      	mov	r1, r7
    6d92:	4630      	mov	r0, r6
    6d94:	f007 f83c 	bl	de10 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    6d98:	4639      	mov	r1, r7
    6d9a:	f007 f818 	bl	ddce <counter_sub>
    6d9e:	1824      	adds	r4, r4, r0
    6da0:	f145 0500 	adc.w	r5, r5, #0
    6da4:	e00d      	b.n	6dc2 <compare_set_nolocks+0x7a>
		atomic_or(&force_isr_mask, BIT(chan));
    6da6:	2301      	movs	r3, #1
    6da8:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6daa:	4a0f      	ldr	r2, [pc, #60]	; (6de8 <compare_set_nolocks+0xa0>)
    6dac:	f3bf 8f5b 	dmb	ish
    6db0:	e852 1f00 	ldrex	r1, [r2]
    6db4:	4319      	orrs	r1, r3
    6db6:	e842 1000 	strex	r0, r1, [r2]
    6dba:	2800      	cmp	r0, #0
    6dbc:	d1f8      	bne.n	6db0 <compare_set_nolocks+0x68>
    6dbe:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    6dc2:	4b08      	ldr	r3, [pc, #32]	; (6de4 <compare_set_nolocks+0x9c>)
    6dc4:	0132      	lsls	r2, r6, #4
    6dc6:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    6dca:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    6dce:	9908      	ldr	r1, [sp, #32]
    6dd0:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    6dd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6dd4:	6073      	str	r3, [r6, #4]
	return ret;
    6dd6:	2000      	movs	r0, #0
}
    6dd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    6ddc:	f06f 0015 	mvn.w	r0, #21
    6de0:	e7fa      	b.n	6dd8 <compare_set_nolocks+0x90>
    6de2:	bf00      	nop
    6de4:	20000660 	.word	0x20000660
    6de8:	20001dbc 	.word	0x20001dbc

00006dec <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    6dec:	b530      	push	{r4, r5, lr}
    6dee:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    6df0:	2300      	movs	r3, #0
    6df2:	4a1e      	ldr	r2, [pc, #120]	; (6e6c <sys_clock_driver_init+0x80>)
    6df4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    6df8:	2b00      	cmp	r3, #0
    6dfa:	dd25      	ble.n	6e48 <sys_clock_driver_init+0x5c>
    p_reg->INTENSET = mask;
    6dfc:	4c1b      	ldr	r4, [pc, #108]	; (6e6c <sys_clock_driver_init+0x80>)
    6dfe:	2502      	movs	r5, #2
    6e00:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6e04:	4b1a      	ldr	r3, [pc, #104]	; (6e70 <sys_clock_driver_init+0x84>)
    6e06:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    6e0a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    6e0e:	2200      	movs	r2, #0
    6e10:	2101      	movs	r1, #1
    6e12:	2011      	movs	r0, #17
    6e14:	f7fc ff36 	bl	3c84 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    6e18:	2011      	movs	r0, #17
    6e1a:	f7fc ff01 	bl	3c20 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    6e1e:	2301      	movs	r3, #1
    6e20:	4a14      	ldr	r2, [pc, #80]	; (6e74 <sys_clock_driver_init+0x88>)
    6e22:	6013      	str	r3, [r2, #0]
    6e24:	6023      	str	r3, [r4, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    6e26:	4a14      	ldr	r2, [pc, #80]	; (6e78 <sys_clock_driver_init+0x8c>)
    6e28:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    6e2a:	2400      	movs	r4, #0
    6e2c:	9401      	str	r4, [sp, #4]
    6e2e:	4b13      	ldr	r3, [pc, #76]	; (6e7c <sys_clock_driver_init+0x90>)
    6e30:	9300      	str	r3, [sp, #0]
    6e32:	4a13      	ldr	r2, [pc, #76]	; (6e80 <sys_clock_driver_init+0x94>)
    6e34:	2300      	movs	r3, #0
    6e36:	4620      	mov	r0, r4
    6e38:	f007 f825 	bl	de86 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    6e3c:	4628      	mov	r0, r5
    6e3e:	f7ff faa7 	bl	6390 <z_nrf_clock_control_lf_on>

	return 0;
}
    6e42:	4620      	mov	r0, r4
    6e44:	b003      	add	sp, #12
    6e46:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    6e48:	4a0e      	ldr	r2, [pc, #56]	; (6e84 <sys_clock_driver_init+0x98>)
    6e4a:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    6e4e:	f04f 30ff 	mov.w	r0, #4294967295
    6e52:	f04f 31ff 	mov.w	r1, #4294967295
    6e56:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6e5a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    6e5e:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    6e60:	4902      	ldr	r1, [pc, #8]	; (6e6c <sys_clock_driver_init+0x80>)
    6e62:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    6e66:	3301      	adds	r3, #1
    6e68:	e7c6      	b.n	6df8 <sys_clock_driver_init+0xc>
    6e6a:	bf00      	nop
    6e6c:	40011000 	.word	0x40011000
    6e70:	e000e100 	.word	0xe000e100
    6e74:	40011008 	.word	0x40011008
    6e78:	20001dc0 	.word	0x20001dc0
    6e7c:	00006c95 	.word	0x00006c95
    6e80:	007fffff 	.word	0x007fffff
    6e84:	20000660 	.word	0x20000660

00006e88 <process_channel>:
{
    6e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6e8c:	b082      	sub	sp, #8
    6e8e:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    6e90:	f7ff fe94 	bl	6bbc <channel_processing_check_and_clear>
    6e94:	b910      	cbnz	r0, 6e9c <process_channel+0x14>
}
    6e96:	b002      	add	sp, #8
    6e98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    6e9c:	f7ff ff34 	bl	6d08 <z_nrf_rtc_timer_read>
    6ea0:	4606      	mov	r6, r0
    6ea2:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
    6ea4:	f006 ffa6 	bl	ddf4 <full_int_lock>
    6ea8:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
    6eaa:	4b13      	ldr	r3, [pc, #76]	; (6ef8 <process_channel+0x70>)
    6eac:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    6eb0:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    6eb4:	454f      	cmp	r7, r9
    6eb6:	bf08      	it	eq
    6eb8:	4546      	cmpeq	r6, r8
    6eba:	d20b      	bcs.n	6ed4 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    6ebc:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    6ebe:	4650      	mov	r0, sl
    6ec0:	f006 ffa1 	bl	de06 <full_int_unlock>
		if (handler) {
    6ec4:	2e00      	cmp	r6, #0
    6ec6:	d0e6      	beq.n	6e96 <process_channel+0xe>
			handler(chan, expire_time, user_context);
    6ec8:	9500      	str	r5, [sp, #0]
    6eca:	4642      	mov	r2, r8
    6ecc:	464b      	mov	r3, r9
    6ece:	4620      	mov	r0, r4
    6ed0:	47b0      	blx	r6
}
    6ed2:	e7e0      	b.n	6e96 <process_channel+0xe>
			handler = cc_data[chan].callback;
    6ed4:	4a08      	ldr	r2, [pc, #32]	; (6ef8 <process_channel+0x70>)
    6ed6:	0123      	lsls	r3, r4, #4
    6ed8:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    6edc:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    6ede:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
    6ee0:	2000      	movs	r0, #0
    6ee2:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    6ee4:	f04f 32ff 	mov.w	r2, #4294967295
    6ee8:	f04f 33ff 	mov.w	r3, #4294967295
    6eec:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    6ef0:	4620      	mov	r0, r4
    6ef2:	f7ff fe2b 	bl	6b4c <event_disable>
    6ef6:	e7e2      	b.n	6ebe <process_channel+0x36>
    6ef8:	20000660 	.word	0x20000660

00006efc <rtc_nrf_isr>:
{
    6efc:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    6efe:	4b0d      	ldr	r3, [pc, #52]	; (6f34 <rtc_nrf_isr+0x38>)
    6f00:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    6f04:	f013 0f02 	tst.w	r3, #2
    6f08:	d00a      	beq.n	6f20 <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6f0a:	4b0b      	ldr	r3, [pc, #44]	; (6f38 <rtc_nrf_isr+0x3c>)
    6f0c:	681b      	ldr	r3, [r3, #0]
    6f0e:	b13b      	cbz	r3, 6f20 <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    6f10:	4b09      	ldr	r3, [pc, #36]	; (6f38 <rtc_nrf_isr+0x3c>)
    6f12:	2200      	movs	r2, #0
    6f14:	601a      	str	r2, [r3, #0]
    6f16:	681b      	ldr	r3, [r3, #0]
		overflow_cnt++;
    6f18:	4a08      	ldr	r2, [pc, #32]	; (6f3c <rtc_nrf_isr+0x40>)
    6f1a:	6813      	ldr	r3, [r2, #0]
    6f1c:	3301      	adds	r3, #1
    6f1e:	6013      	str	r3, [r2, #0]
{
    6f20:	2400      	movs	r4, #0
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    6f22:	2c00      	cmp	r4, #0
    6f24:	dd00      	ble.n	6f28 <rtc_nrf_isr+0x2c>
}
    6f26:	bd10      	pop	{r4, pc}
		process_channel(chan);
    6f28:	4620      	mov	r0, r4
    6f2a:	f7ff ffad 	bl	6e88 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    6f2e:	3401      	adds	r4, #1
    6f30:	e7f7      	b.n	6f22 <rtc_nrf_isr+0x26>
    6f32:	bf00      	nop
    6f34:	40011000 	.word	0x40011000
    6f38:	40011104 	.word	0x40011104
    6f3c:	20001dc4 	.word	0x20001dc4

00006f40 <sys_clock_set_timeout>:
{
    6f40:	b510      	push	{r4, lr}
    6f42:	b082      	sub	sp, #8
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    6f44:	f1b0 3fff 	cmp.w	r0, #4294967295
    6f48:	d007      	beq.n	6f5a <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    6f4a:	1e44      	subs	r4, r0, #1
    6f4c:	2c00      	cmp	r4, #0
    6f4e:	dd07      	ble.n	6f60 <sys_clock_set_timeout+0x20>
    6f50:	4b11      	ldr	r3, [pc, #68]	; (6f98 <sys_clock_set_timeout+0x58>)
    6f52:	429c      	cmp	r4, r3
    6f54:	dd05      	ble.n	6f62 <sys_clock_set_timeout+0x22>
    6f56:	4c11      	ldr	r4, [pc, #68]	; (6f9c <sys_clock_set_timeout+0x5c>)
    6f58:	e003      	b.n	6f62 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    6f5a:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
    6f5e:	e7f4      	b.n	6f4a <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    6f60:	2400      	movs	r4, #0
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    6f62:	f7ff fed1 	bl	6d08 <z_nrf_rtc_timer_read>
    6f66:	4b0e      	ldr	r3, [pc, #56]	; (6fa0 <sys_clock_set_timeout+0x60>)
    6f68:	e9d3 2300 	ldrd	r2, r3, [r3]
    6f6c:	1a80      	subs	r0, r0, r2
	if (unannounced >= COUNTER_HALF_SPAN) {
    6f6e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    6f72:	d300      	bcc.n	6f76 <sys_clock_set_timeout+0x36>
		ticks = 0;
    6f74:	2400      	movs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    6f76:	4404      	add	r4, r0
    6f78:	3401      	adds	r4, #1
	if (cyc > MAX_CYCLES) {
    6f7a:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    6f7e:	d300      	bcc.n	6f82 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    6f80:	4c06      	ldr	r4, [pc, #24]	; (6f9c <sys_clock_set_timeout+0x5c>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    6f82:	2000      	movs	r0, #0
    6f84:	9001      	str	r0, [sp, #4]
    6f86:	4907      	ldr	r1, [pc, #28]	; (6fa4 <sys_clock_set_timeout+0x64>)
    6f88:	9100      	str	r1, [sp, #0]
    6f8a:	1912      	adds	r2, r2, r4
    6f8c:	f143 0300 	adc.w	r3, r3, #0
    6f90:	f006 ff79 	bl	de86 <compare_set>
}
    6f94:	b002      	add	sp, #8
    6f96:	bd10      	pop	{r4, pc}
    6f98:	007ffffe 	.word	0x007ffffe
    6f9c:	007fffff 	.word	0x007fffff
    6fa0:	20000670 	.word	0x20000670
    6fa4:	00006c95 	.word	0x00006c95

00006fa8 <sys_clock_elapsed>:
{
    6fa8:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    6faa:	f7ff fead 	bl	6d08 <z_nrf_rtc_timer_read>
    6fae:	4b02      	ldr	r3, [pc, #8]	; (6fb8 <sys_clock_elapsed+0x10>)
    6fb0:	681b      	ldr	r3, [r3, #0]
}
    6fb2:	1ac0      	subs	r0, r0, r3
    6fb4:	bd08      	pop	{r3, pc}
    6fb6:	bf00      	nop
    6fb8:	20000670 	.word	0x20000670

00006fbc <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    6fbc:	b508      	push	{r3, lr}
	z_impl_log_panic();
    6fbe:	f7fa fc13 	bl	17e8 <z_impl_log_panic>
    6fc2:	4b09      	ldr	r3, [pc, #36]	; (6fe8 <k_sys_fatal_error_handler+0x2c>)
    6fc4:	4a09      	ldr	r2, [pc, #36]	; (6fec <k_sys_fatal_error_handler+0x30>)
    6fc6:	1a9b      	subs	r3, r3, r2
    6fc8:	08db      	lsrs	r3, r3, #3
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    6fca:	f04f 0100 	mov.w	r1, #0
    6fce:	2201      	movs	r2, #1
    6fd0:	f362 0102 	bfi	r1, r2, #0, #3
    6fd4:	f36f 01c5 	bfc	r1, #3, #3
    6fd8:	f363 118f 	bfi	r1, r3, #6, #10
    6fdc:	4804      	ldr	r0, [pc, #16]	; (6ff0 <k_sys_fatal_error_handler+0x34>)
    6fde:	f7fa fbd3 	bl	1788 <log_0>
		sys_arch_reboot(0);
    6fe2:	2000      	movs	r0, #0
    6fe4:	f7fd fcce 	bl	4984 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    6fe8:	0000ec54 	.word	0x0000ec54
    6fec:	0000ec4c 	.word	0x0000ec4c
    6ff0:	0000fc7c 	.word	0x0000fc7c

00006ff4 <nrf52_errata_36>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6ff4:	4b03      	ldr	r3, [pc, #12]	; (7004 <nrf52_errata_36+0x10>)
    6ff6:	681b      	ldr	r3, [r3, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    6ff8:	2b08      	cmp	r3, #8
    6ffa:	d001      	beq.n	7000 <nrf52_errata_36+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    6ffc:	2000      	movs	r0, #0
    6ffe:	4770      	bx	lr
                        return true;
    7000:	2001      	movs	r0, #1
    #endif
}
    7002:	4770      	bx	lr
    7004:	10000130 	.word	0x10000130

00007008 <nrf52_errata_66>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7008:	4b03      	ldr	r3, [pc, #12]	; (7018 <nrf52_errata_66+0x10>)
    700a:	681b      	ldr	r3, [r3, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    700c:	2b08      	cmp	r3, #8
    700e:	d001      	beq.n	7014 <nrf52_errata_66+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    7010:	2000      	movs	r0, #0
    7012:	4770      	bx	lr
                        return true;
    7014:	2001      	movs	r0, #1
    #endif
}
    7016:	4770      	bx	lr
    7018:	10000130 	.word	0x10000130

0000701c <nrf52_errata_98>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    701c:	4b08      	ldr	r3, [pc, #32]	; (7040 <nrf52_errata_98+0x24>)
    701e:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    7020:	3304      	adds	r3, #4
    7022:	681b      	ldr	r3, [r3, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    7024:	2a08      	cmp	r2, #8
    7026:	d001      	beq.n	702c <nrf52_errata_98+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    7028:	2000      	movs	r0, #0
    702a:	4770      	bx	lr
                switch(var2)
    702c:	2b00      	cmp	r3, #0
    702e:	d804      	bhi.n	703a <nrf52_errata_98+0x1e>
    7030:	e8df f003 	tbb	[pc, r3]
    7034:	01          	.byte	0x01
    7035:	00          	.byte	0x00
            if (var1 == 0x08)
    7036:	2001      	movs	r0, #1
    7038:	4770      	bx	lr
                        return false;
    703a:	2000      	movs	r0, #0
    #endif
}
    703c:	4770      	bx	lr
    703e:	bf00      	nop
    7040:	10000130 	.word	0x10000130

00007044 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7044:	4b08      	ldr	r3, [pc, #32]	; (7068 <nrf52_errata_103+0x24>)
    7046:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    7048:	3304      	adds	r3, #4
    704a:	681b      	ldr	r3, [r3, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    704c:	2a08      	cmp	r2, #8
    704e:	d001      	beq.n	7054 <nrf52_errata_103+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    7050:	2000      	movs	r0, #0
    7052:	4770      	bx	lr
                switch(var2)
    7054:	2b00      	cmp	r3, #0
    7056:	d804      	bhi.n	7062 <nrf52_errata_103+0x1e>
    7058:	e8df f003 	tbb	[pc, r3]
    705c:	01          	.byte	0x01
    705d:	00          	.byte	0x00
            if (var1 == 0x08)
    705e:	2001      	movs	r0, #1
    7060:	4770      	bx	lr
                        return false;
    7062:	2000      	movs	r0, #0
    #endif
}
    7064:	4770      	bx	lr
    7066:	bf00      	nop
    7068:	10000130 	.word	0x10000130

0000706c <nrf52_errata_115>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    706c:	4b08      	ldr	r3, [pc, #32]	; (7090 <nrf52_errata_115+0x24>)
    706e:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    7070:	3304      	adds	r3, #4
    7072:	681b      	ldr	r3, [r3, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    7074:	2a08      	cmp	r2, #8
    7076:	d001      	beq.n	707c <nrf52_errata_115+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    7078:	2000      	movs	r0, #0
    707a:	4770      	bx	lr
                switch(var2)
    707c:	2b00      	cmp	r3, #0
    707e:	d804      	bhi.n	708a <nrf52_errata_115+0x1e>
    7080:	e8df f003 	tbb	[pc, r3]
    7084:	01          	.byte	0x01
    7085:	00          	.byte	0x00
            if (var1 == 0x08)
    7086:	2001      	movs	r0, #1
    7088:	4770      	bx	lr
                        return false;
    708a:	2000      	movs	r0, #0
    #endif
}
    708c:	4770      	bx	lr
    708e:	bf00      	nop
    7090:	10000130 	.word	0x10000130

00007094 <nrf52_errata_120>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7094:	4b08      	ldr	r3, [pc, #32]	; (70b8 <nrf52_errata_120+0x24>)
    7096:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    7098:	3304      	adds	r3, #4
    709a:	681b      	ldr	r3, [r3, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    709c:	2a08      	cmp	r2, #8
    709e:	d001      	beq.n	70a4 <nrf52_errata_120+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    70a0:	2000      	movs	r0, #0
    70a2:	4770      	bx	lr
                switch(var2)
    70a4:	2b00      	cmp	r3, #0
    70a6:	d804      	bhi.n	70b2 <nrf52_errata_120+0x1e>
    70a8:	e8df f003 	tbb	[pc, r3]
    70ac:	01          	.byte	0x01
    70ad:	00          	.byte	0x00
            if (var1 == 0x08)
    70ae:	2001      	movs	r0, #1
    70b0:	4770      	bx	lr
                        return false;
    70b2:	2000      	movs	r0, #0
    #endif
}
    70b4:	4770      	bx	lr
    70b6:	bf00      	nop
    70b8:	10000130 	.word	0x10000130

000070bc <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    70bc:	4b03      	ldr	r3, [pc, #12]	; (70cc <nrf52_errata_136+0x10>)
    70be:	681b      	ldr	r3, [r3, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    70c0:	2b08      	cmp	r3, #8
    70c2:	d001      	beq.n	70c8 <nrf52_errata_136+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    70c4:	2000      	movs	r0, #0
    70c6:	4770      	bx	lr
                        return true;
    70c8:	2001      	movs	r0, #1
    #endif
}
    70ca:	4770      	bx	lr
    70cc:	10000130 	.word	0x10000130

000070d0 <nrf52_configuration_249>:
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    70d0:	4b06      	ldr	r3, [pc, #24]	; (70ec <nrf52_configuration_249+0x1c>)
    70d2:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    70d4:	4a06      	ldr	r2, [pc, #24]	; (70f0 <nrf52_configuration_249+0x20>)
    70d6:	6812      	ldr	r2, [r2, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    70d8:	2b08      	cmp	r3, #8
    70da:	d001      	beq.n	70e0 <nrf52_configuration_249+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    70dc:	2000      	movs	r0, #0
    70de:	4770      	bx	lr
                switch(var2)
    70e0:	2a04      	cmp	r2, #4
    70e2:	d801      	bhi.n	70e8 <nrf52_configuration_249+0x18>
    70e4:	2000      	movs	r0, #0
    70e6:	4770      	bx	lr
                        return true;
    70e8:	2001      	movs	r0, #1
    #endif
}
    70ea:	4770      	bx	lr
    70ec:	10000130 	.word	0x10000130
    70f0:	10000134 	.word	0x10000134

000070f4 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    70f4:	4b02      	ldr	r3, [pc, #8]	; (7100 <nvmc_wait+0xc>)
    70f6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    70fa:	2b00      	cmp	r3, #0
    70fc:	d0fa      	beq.n	70f4 <nvmc_wait>
}
    70fe:	4770      	bx	lr
    7100:	4001e000 	.word	0x4001e000

00007104 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    7104:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    7106:	4b03      	ldr	r3, [pc, #12]	; (7114 <nvmc_config+0x10>)
    7108:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    710c:	f7ff fff2 	bl	70f4 <nvmc_wait>
}
    7110:	bd08      	pop	{r3, pc}
    7112:	bf00      	nop
    7114:	4001e000 	.word	0x4001e000

00007118 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    7118:	4b01      	ldr	r3, [pc, #4]	; (7120 <SystemCoreClockUpdate+0x8>)
    711a:	4a02      	ldr	r2, [pc, #8]	; (7124 <SystemCoreClockUpdate+0xc>)
    711c:	601a      	str	r2, [r3, #0]
}
    711e:	4770      	bx	lr
    7120:	20000130 	.word	0x20000130
    7124:	03d09000 	.word	0x03d09000

00007128 <SystemInit>:

void SystemInit(void)
{
    7128:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    712a:	f7ff ff63 	bl	6ff4 <nrf52_errata_36>
    712e:	b140      	cbz	r0, 7142 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    7130:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7134:	2200      	movs	r2, #0
    7136:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    713a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    713e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    7142:	f7ff ff61 	bl	7008 <nrf52_errata_66>
    7146:	2800      	cmp	r0, #0
    7148:	d046      	beq.n	71d8 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    714a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    714e:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    7152:	4b56      	ldr	r3, [pc, #344]	; (72ac <SystemInit+0x184>)
    7154:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    7158:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    715c:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    7160:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    7164:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    7168:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    716c:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    7170:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    7174:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    7178:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    717c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    7180:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    7184:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    7188:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    718c:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    7190:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    7194:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    7198:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    719c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    71a0:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    71a4:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    71a8:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    71ac:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    71b0:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    71b4:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    71b8:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    71bc:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    71c0:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    71c4:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    71c8:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    71cc:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    71d0:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    71d4:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    71d8:	f7ff ff20 	bl	701c <nrf52_errata_98>
    71dc:	b110      	cbz	r0, 71e4 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    71de:	4b34      	ldr	r3, [pc, #208]	; (72b0 <SystemInit+0x188>)
    71e0:	4a34      	ldr	r2, [pc, #208]	; (72b4 <SystemInit+0x18c>)
    71e2:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    71e4:	f7ff ff2e 	bl	7044 <nrf52_errata_103>
    71e8:	b118      	cbz	r0, 71f2 <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    71ea:	4b33      	ldr	r3, [pc, #204]	; (72b8 <SystemInit+0x190>)
    71ec:	22fb      	movs	r2, #251	; 0xfb
    71ee:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    71f2:	f7ff ff3b 	bl	706c <nrf52_errata_115>
    71f6:	b148      	cbz	r0, 720c <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    71f8:	4930      	ldr	r1, [pc, #192]	; (72bc <SystemInit+0x194>)
    71fa:	680b      	ldr	r3, [r1, #0]
    71fc:	f023 030f 	bic.w	r3, r3, #15
    7200:	4a2f      	ldr	r2, [pc, #188]	; (72c0 <SystemInit+0x198>)
    7202:	6812      	ldr	r2, [r2, #0]
    7204:	f002 020f 	and.w	r2, r2, #15
    7208:	4313      	orrs	r3, r2
    720a:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    720c:	f7ff ff42 	bl	7094 <nrf52_errata_120>
    7210:	b118      	cbz	r0, 721a <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    7212:	4b2c      	ldr	r3, [pc, #176]	; (72c4 <SystemInit+0x19c>)
    7214:	f44f 7200 	mov.w	r2, #512	; 0x200
    7218:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    721a:	f7ff ff4f 	bl	70bc <nrf52_errata_136>
    721e:	b160      	cbz	r0, 723a <SystemInit+0x112>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    7220:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7224:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    7228:	f013 0f01 	tst.w	r3, #1
    722c:	d005      	beq.n	723a <SystemInit+0x112>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    722e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7232:	f06f 0201 	mvn.w	r2, #1
    7236:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    723a:	f7ff ff49 	bl	70d0 <nrf52_configuration_249>
    723e:	b138      	cbz	r0, 7250 <SystemInit+0x128>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    7240:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    7244:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    7248:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    724c:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    7250:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    7254:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    7258:	2b00      	cmp	r3, #0
    725a:	db08      	blt.n	726e <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    725c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    7260:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    7264:	2b00      	cmp	r3, #0
    7266:	db02      	blt.n	726e <SystemInit+0x146>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    7268:	f7ff ff56 	bl	7118 <SystemCoreClockUpdate>
}
    726c:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    726e:	2001      	movs	r0, #1
    7270:	f7ff ff48 	bl	7104 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    7274:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    7278:	2512      	movs	r5, #18
    727a:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    727e:	f7ff ff39 	bl	70f4 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    7282:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    7286:	f7ff ff35 	bl	70f4 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    728a:	2000      	movs	r0, #0
    728c:	f7ff ff3a 	bl	7104 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    7290:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    7294:	490c      	ldr	r1, [pc, #48]	; (72c8 <SystemInit+0x1a0>)
    7296:	68ca      	ldr	r2, [r1, #12]
    7298:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    729c:	4b0b      	ldr	r3, [pc, #44]	; (72cc <SystemInit+0x1a4>)
    729e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    72a0:	60cb      	str	r3, [r1, #12]
    72a2:	f3bf 8f4f 	dsb	sy
    __NOP();
    72a6:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    72a8:	e7fd      	b.n	72a6 <SystemInit+0x17e>
    72aa:	bf00      	nop
    72ac:	4000c000 	.word	0x4000c000
    72b0:	4000568c 	.word	0x4000568c
    72b4:	00038148 	.word	0x00038148
    72b8:	4000f000 	.word	0x4000f000
    72bc:	40000ee4 	.word	0x40000ee4
    72c0:	10000258 	.word	0x10000258
    72c4:	40029640 	.word	0x40029640
    72c8:	e000ed00 	.word	0xe000ed00
    72cc:	05fa0004 	.word	0x05fa0004

000072d0 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    72d0:	b430      	push	{r4, r5}
    int8_t idx;
    uint32_t new_mask, prev_mask;

    do {
        prev_mask = *p_mask;
    72d2:	6804      	ldr	r4, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    72d4:	fab4 f384 	clz	r3, r4
        if (idx < 0) {
    72d8:	f1d3 031f 	rsbs	r3, r3, #31
    72dc:	d415      	bmi.n	730a <nrfx_flag32_alloc+0x3a>
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    72de:	2201      	movs	r2, #1
    72e0:	409a      	lsls	r2, r3
    72e2:	ea24 0202 	bic.w	r2, r4, r2
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    72e6:	f3bf 8f5b 	dmb	ish
    72ea:	e850 5f00 	ldrex	r5, [r0]
    72ee:	42a5      	cmp	r5, r4
    72f0:	d104      	bne.n	72fc <nrfx_flag32_alloc+0x2c>
    72f2:	e840 2c00 	strex	ip, r2, [r0]
    72f6:	f1bc 0f00 	cmp.w	ip, #0
    72fa:	d1f6      	bne.n	72ea <nrfx_flag32_alloc+0x1a>
    72fc:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    7300:	d1e7      	bne.n	72d2 <nrfx_flag32_alloc+0x2>

    *p_flag = idx;
    7302:	700b      	strb	r3, [r1, #0]

    return NRFX_SUCCESS;
    7304:	4802      	ldr	r0, [pc, #8]	; (7310 <nrfx_flag32_alloc+0x40>)
}
    7306:	bc30      	pop	{r4, r5}
    7308:	4770      	bx	lr
            return NRFX_ERROR_NO_MEM;
    730a:	4802      	ldr	r0, [pc, #8]	; (7314 <nrfx_flag32_alloc+0x44>)
    730c:	e7fb      	b.n	7306 <nrfx_flag32_alloc+0x36>
    730e:	bf00      	nop
    7310:	0bad0000 	.word	0x0bad0000
    7314:	0bad0002 	.word	0x0bad0002

00007318 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    7318:	b410      	push	{r4}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    731a:	6803      	ldr	r3, [r0, #0]
    731c:	460c      	mov	r4, r1
    731e:	fa23 f101 	lsr.w	r1, r3, r1
    7322:	f011 0f01 	tst.w	r1, #1
    7326:	d114      	bne.n	7352 <nrfx_flag32_free+0x3a>
    {
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
    7328:	6802      	ldr	r2, [r0, #0]
        new_mask = prev_mask | NRFX_BIT(flag);
    732a:	2301      	movs	r3, #1
    732c:	40a3      	lsls	r3, r4
    732e:	4313      	orrs	r3, r2
    7330:	f3bf 8f5b 	dmb	ish
    7334:	e850 1f00 	ldrex	r1, [r0]
    7338:	4291      	cmp	r1, r2
    733a:	d104      	bne.n	7346 <nrfx_flag32_free+0x2e>
    733c:	e840 3c00 	strex	ip, r3, [r0]
    7340:	f1bc 0f00 	cmp.w	ip, #0
    7344:	d1f6      	bne.n	7334 <nrfx_flag32_free+0x1c>
    7346:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    734a:	d1ed      	bne.n	7328 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    734c:	4802      	ldr	r0, [pc, #8]	; (7358 <nrfx_flag32_free+0x40>)
}
    734e:	bc10      	pop	{r4}
    7350:	4770      	bx	lr
        return NRFX_ERROR_INVALID_PARAM;
    7352:	4802      	ldr	r0, [pc, #8]	; (735c <nrfx_flag32_free+0x44>)
    7354:	e7fb      	b.n	734e <nrfx_flag32_free+0x36>
    7356:	bf00      	nop
    7358:	0bad0000 	.word	0x0bad0000
    735c:	0bad0004 	.word	0x0bad0004

00007360 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    7360:	4b06      	ldr	r3, [pc, #24]	; (737c <nrfx_clock_init+0x1c>)
    7362:	791b      	ldrb	r3, [r3, #4]
    7364:	b93b      	cbnz	r3, 7376 <nrfx_clock_init+0x16>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    7366:	4b05      	ldr	r3, [pc, #20]	; (737c <nrfx_clock_init+0x1c>)
    7368:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    736a:	2201      	movs	r2, #1
    736c:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    736e:	2200      	movs	r2, #0
    7370:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    7372:	4803      	ldr	r0, [pc, #12]	; (7380 <nrfx_clock_init+0x20>)
    7374:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    7376:	4803      	ldr	r0, [pc, #12]	; (7384 <nrfx_clock_init+0x24>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    7378:	4770      	bx	lr
    737a:	bf00      	nop
    737c:	20001dc8 	.word	0x20001dc8
    7380:	0bad0000 	.word	0x0bad0000
    7384:	0bad000c 	.word	0x0bad000c

00007388 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    7388:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    738a:	2000      	movs	r0, #0
    738c:	f7fc fc6c 	bl	3c68 <arch_irq_is_enabled>
    7390:	b118      	cbz	r0, 739a <nrfx_clock_enable+0x12>
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
    7392:	4b03      	ldr	r3, [pc, #12]	; (73a0 <nrfx_clock_enable+0x18>)
    7394:	2201      	movs	r2, #1
    7396:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    7398:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    739a:	f7fc fc41 	bl	3c20 <arch_irq_enable>
    739e:	e7f8      	b.n	7392 <nrfx_clock_enable+0xa>
    73a0:	2000253a 	.word	0x2000253a

000073a4 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    73a4:	b110      	cbz	r0, 73ac <nrfx_clock_start+0x8>
    73a6:	2801      	cmp	r0, #1
    73a8:	d025      	beq.n	73f6 <nrfx_clock_start+0x52>
    73aa:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    73ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    73b0:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    73b4:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    73b8:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    73bc:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    73c0:	d111      	bne.n	73e6 <nrfx_clock_start+0x42>
    p_reg->LFCLKSRC = (uint32_t)(source);
    73c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    73c6:	2200      	movs	r2, #0
    73c8:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    73cc:	4b0f      	ldr	r3, [pc, #60]	; (740c <nrfx_clock_start+0x68>)
    73ce:	2200      	movs	r2, #0
    73d0:	601a      	str	r2, [r3, #0]
    73d2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    73d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    73d8:	2202      	movs	r2, #2
    73da:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    73de:	3308      	adds	r3, #8
    73e0:	2201      	movs	r2, #1
    73e2:	601a      	str	r2, [r3, #0]
}
    73e4:	4770      	bx	lr
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    73e6:	2b01      	cmp	r3, #1
    73e8:	d1eb      	bne.n	73c2 <nrfx_clock_start+0x1e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    73ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    73ee:	2201      	movs	r2, #1
    73f0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    73f4:	e7ea      	b.n	73cc <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    73f6:	4b06      	ldr	r3, [pc, #24]	; (7410 <nrfx_clock_start+0x6c>)
    73f8:	2200      	movs	r2, #0
    73fa:	601a      	str	r2, [r3, #0]
    73fc:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    73fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7402:	2201      	movs	r2, #1
    7404:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7408:	601a      	str	r2, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    740a:	4770      	bx	lr
    740c:	40000104 	.word	0x40000104
    7410:	40000100 	.word	0x40000100

00007414 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    7414:	b530      	push	{r4, r5, lr}
    7416:	b083      	sub	sp, #12
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    7418:	4604      	mov	r4, r0
    741a:	b118      	cbz	r0, 7424 <nrfx_clock_stop+0x10>
    741c:	2801      	cmp	r0, #1
    741e:	d013      	beq.n	7448 <nrfx_clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    7420:	b003      	add	sp, #12
    7422:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
    7424:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7428:	2202      	movs	r2, #2
    742a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    742e:	f503 7382 	add.w	r3, r3, #260	; 0x104
    7432:	2200      	movs	r2, #0
    7434:	601a      	str	r2, [r3, #0]
    7436:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7438:	4b39      	ldr	r3, [pc, #228]	; (7520 <nrfx_clock_stop+0x10c>)
    743a:	2201      	movs	r2, #1
    743c:	601a      	str	r2, [r3, #0]
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    743e:	2c01      	cmp	r4, #1
    7440:	d00f      	beq.n	7462 <nrfx_clock_stop+0x4e>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    7442:	f242 7510 	movw	r5, #10000	; 0x2710
    7446:	e052      	b.n	74ee <nrfx_clock_stop+0xda>
    p_reg->INTENCLR = mask;
    7448:	2301      	movs	r3, #1
    744a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    744e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7452:	f502 7280 	add.w	r2, r2, #256	; 0x100
    7456:	2100      	movs	r1, #0
    7458:	6011      	str	r1, [r2, #0]
    745a:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    745c:	4a31      	ldr	r2, [pc, #196]	; (7524 <nrfx_clock_stop+0x110>)
    745e:	6013      	str	r3, [r2, #0]
}
    7460:	e7ed      	b.n	743e <nrfx_clock_stop+0x2a>
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    7462:	2301      	movs	r3, #1
    7464:	f88d 3007 	strb.w	r3, [sp, #7]
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    7468:	f242 7510 	movw	r5, #10000	; 0x2710
    746c:	e018      	b.n	74a0 <nrfx_clock_stop+0x8c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    746e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    7472:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    7476:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    747a:	f8cd 3007 	str.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    747e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    7482:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7486:	d120      	bne.n	74ca <nrfx_clock_stop+0xb6>
    return false;
    7488:	2300      	movs	r3, #0
    748a:	2b00      	cmp	r3, #0
    748c:	d042      	beq.n	7514 <nrfx_clock_stop+0x100>
    748e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7492:	2b01      	cmp	r3, #1
    7494:	d13e      	bne.n	7514 <nrfx_clock_stop+0x100>
    7496:	2001      	movs	r0, #1
    7498:	f006 fd23 	bl	dee2 <nrfx_busy_wait>
    749c:	3d01      	subs	r5, #1
    749e:	d039      	beq.n	7514 <nrfx_clock_stop+0x100>
    switch (domain)
    74a0:	2c00      	cmp	r4, #0
    74a2:	d0e4      	beq.n	746e <nrfx_clock_stop+0x5a>
    74a4:	2c01      	cmp	r4, #1
    74a6:	d001      	beq.n	74ac <nrfx_clock_stop+0x98>
    74a8:	2300      	movs	r3, #0
    74aa:	e7ee      	b.n	748a <nrfx_clock_stop+0x76>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    74ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    74b0:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    74b4:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    74b8:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    74bc:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    74c0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    74c4:	d103      	bne.n	74ce <nrfx_clock_stop+0xba>
    return false;
    74c6:	2300      	movs	r3, #0
    74c8:	e7df      	b.n	748a <nrfx_clock_stop+0x76>
                return true;
    74ca:	2301      	movs	r3, #1
    74cc:	e7dd      	b.n	748a <nrfx_clock_stop+0x76>
                return true;
    74ce:	2301      	movs	r3, #1
    74d0:	e7db      	b.n	748a <nrfx_clock_stop+0x76>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    74d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    74d6:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    74da:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    74de:	d115      	bne.n	750c <nrfx_clock_stop+0xf8>
    return false;
    74e0:	2300      	movs	r3, #0
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    74e2:	b1bb      	cbz	r3, 7514 <nrfx_clock_stop+0x100>
    74e4:	2001      	movs	r0, #1
    74e6:	f006 fcfc 	bl	dee2 <nrfx_busy_wait>
    74ea:	3d01      	subs	r5, #1
    74ec:	d012      	beq.n	7514 <nrfx_clock_stop+0x100>
    switch (domain)
    74ee:	2c00      	cmp	r4, #0
    74f0:	d0ef      	beq.n	74d2 <nrfx_clock_stop+0xbe>
    74f2:	2c01      	cmp	r4, #1
    74f4:	d001      	beq.n	74fa <nrfx_clock_stop+0xe6>
    74f6:	2300      	movs	r3, #0
    74f8:	e7f3      	b.n	74e2 <nrfx_clock_stop+0xce>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    74fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    74fe:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    7502:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7506:	d103      	bne.n	7510 <nrfx_clock_stop+0xfc>
    return false;
    7508:	2300      	movs	r3, #0
    750a:	e7ea      	b.n	74e2 <nrfx_clock_stop+0xce>
                return true;
    750c:	2301      	movs	r3, #1
    750e:	e7e8      	b.n	74e2 <nrfx_clock_stop+0xce>
                return true;
    7510:	2301      	movs	r3, #1
    7512:	e7e6      	b.n	74e2 <nrfx_clock_stop+0xce>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    7514:	2c01      	cmp	r4, #1
    7516:	d183      	bne.n	7420 <nrfx_clock_stop+0xc>
            m_clock_cb.hfclk_started = false;
    7518:	4b03      	ldr	r3, [pc, #12]	; (7528 <nrfx_clock_stop+0x114>)
    751a:	2200      	movs	r2, #0
    751c:	715a      	strb	r2, [r3, #5]
    751e:	e77f      	b.n	7420 <nrfx_clock_stop+0xc>
    7520:	4000000c 	.word	0x4000000c
    7524:	40000004 	.word	0x40000004
    7528:	20001dc8 	.word	0x20001dc8

0000752c <nrfx_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    752c:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    752e:	4b1b      	ldr	r3, [pc, #108]	; (759c <nrfx_clock_irq_handler+0x70>)
    7530:	681b      	ldr	r3, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    7532:	b183      	cbz	r3, 7556 <nrfx_clock_irq_handler+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7534:	4b19      	ldr	r3, [pc, #100]	; (759c <nrfx_clock_irq_handler+0x70>)
    7536:	2200      	movs	r2, #0
    7538:	601a      	str	r2, [r3, #0]
    753a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    753c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7540:	2201      	movs	r2, #1
    7542:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    7546:	4b16      	ldr	r3, [pc, #88]	; (75a0 <nrfx_clock_irq_handler+0x74>)
    7548:	795b      	ldrb	r3, [r3, #5]
    754a:	b923      	cbnz	r3, 7556 <nrfx_clock_irq_handler+0x2a>
        {
            m_clock_cb.hfclk_started = true;
    754c:	4b14      	ldr	r3, [pc, #80]	; (75a0 <nrfx_clock_irq_handler+0x74>)
    754e:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    7550:	681b      	ldr	r3, [r3, #0]
    7552:	2000      	movs	r0, #0
    7554:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    7556:	4b13      	ldr	r3, [pc, #76]	; (75a4 <nrfx_clock_irq_handler+0x78>)
    7558:	681b      	ldr	r3, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    755a:	b19b      	cbz	r3, 7584 <nrfx_clock_irq_handler+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    755c:	4b11      	ldr	r3, [pc, #68]	; (75a4 <nrfx_clock_irq_handler+0x78>)
    755e:	2200      	movs	r2, #0
    7560:	601a      	str	r2, [r3, #0]
    7562:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    7564:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7568:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    756c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    7570:	f012 0f03 	tst.w	r2, #3
    7574:	d107      	bne.n	7586 <nrfx_clock_irq_handler+0x5a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    7576:	2301      	movs	r3, #1
    7578:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    757c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7580:	3208      	adds	r2, #8
    7582:	6013      	str	r3, [r2, #0]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    7584:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    7586:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    758a:	2202      	movs	r2, #2
    758c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    7590:	4b03      	ldr	r3, [pc, #12]	; (75a0 <nrfx_clock_irq_handler+0x74>)
    7592:	681b      	ldr	r3, [r3, #0]
    7594:	2001      	movs	r0, #1
    7596:	4798      	blx	r3
}
    7598:	e7f4      	b.n	7584 <nrfx_clock_irq_handler+0x58>
    759a:	bf00      	nop
    759c:	40000100 	.word	0x40000100
    75a0:	20001dc8 	.word	0x20001dc8
    75a4:	40000104 	.word	0x40000104

000075a8 <pin_in_use>:
 *
 * @return True if pin is in use.
 */
static bool pin_in_use(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    75a8:	3008      	adds	r0, #8
    75aa:	4b03      	ldr	r3, [pc, #12]	; (75b8 <pin_in_use+0x10>)
    75ac:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    75b0:	f000 0001 	and.w	r0, r0, #1
    75b4:	4770      	bx	lr
    75b6:	bf00      	nop
    75b8:	20000134 	.word	0x20000134

000075bc <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    75bc:	3008      	adds	r0, #8
    75be:	4b03      	ldr	r3, [pc, #12]	; (75cc <pin_in_use_by_te+0x10>)
    75c0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    75c4:	f3c0 1040 	ubfx	r0, r0, #5, #1
    75c8:	4770      	bx	lr
    75ca:	bf00      	nop
    75cc:	20000134 	.word	0x20000134

000075d0 <pin_has_trigger>:
 *
 * @return True if pin has trigger.
 */
static bool pin_has_trigger(uint32_t pin)
{
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    75d0:	3008      	adds	r0, #8
    75d2:	4b04      	ldr	r3, [pc, #16]	; (75e4 <pin_has_trigger+0x14>)
    75d4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    75d8:	f010 001c 	ands.w	r0, r0, #28
    75dc:	bf18      	it	ne
    75de:	2001      	movne	r0, #1
    75e0:	4770      	bx	lr
    75e2:	bf00      	nop
    75e4:	20000134 	.word	0x20000134

000075e8 <pin_is_output>:
 *
 * @return True if pin is output.
 */
static bool pin_is_output(uint32_t pin)
{
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    75e8:	3008      	adds	r0, #8
    75ea:	4b03      	ldr	r3, [pc, #12]	; (75f8 <pin_is_output+0x10>)
    75ec:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    75f0:	f3c0 0040 	ubfx	r0, r0, #1, #1
    75f4:	4770      	bx	lr
    75f6:	bf00      	nop
    75f8:	20000134 	.word	0x20000134

000075fc <pin_te_get>:
}

/* Returns gpiote TE channel associated with the pin */
static uint8_t pin_te_get(nrfx_gpiote_pin_t pin)
{
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    75fc:	3008      	adds	r0, #8
    75fe:	4b02      	ldr	r3, [pc, #8]	; (7608 <pin_te_get+0xc>)
    7600:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    7604:	0b40      	lsrs	r0, r0, #13
    7606:	4770      	bx	lr
    7608:	20000134 	.word	0x20000134

0000760c <handler_in_use>:
}

static bool handler_in_use(int32_t handler_id)
{

    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    760c:	2200      	movs	r2, #0
    760e:	e004      	b.n	761a <handler_in_use+0xe>
    {
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    7610:	f04f 33ff 	mov.w	r3, #4294967295
    7614:	4283      	cmp	r3, r0
    7616:	d00f      	beq.n	7638 <handler_in_use+0x2c>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    7618:	3201      	adds	r2, #1
    761a:	2a2f      	cmp	r2, #47	; 0x2f
    761c:	d80a      	bhi.n	7634 <handler_in_use+0x28>
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    761e:	f102 0308 	add.w	r3, r2, #8
    7622:	4906      	ldr	r1, [pc, #24]	; (763c <handler_in_use+0x30>)
    7624:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    7628:	f413 7f80 	tst.w	r3, #256	; 0x100
    762c:	d0f0      	beq.n	7610 <handler_in_use+0x4>
    762e:	f3c3 2343 	ubfx	r3, r3, #9, #4
    7632:	e7ef      	b.n	7614 <handler_in_use+0x8>
        {
            return true;
        }
    }

    return false;
    7634:	2000      	movs	r0, #0
    7636:	4770      	bx	lr
            return true;
    7638:	2001      	movs	r0, #1
}
    763a:	4770      	bx	lr
    763c:	20000134 	.word	0x20000134

00007640 <find_handler>:
    return NRFX_SUCCESS;
}

static int32_t find_handler(nrfx_gpiote_interrupt_handler_t handler, void * p_context)
{
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    7640:	2300      	movs	r3, #0
    7642:	b113      	cbz	r3, 764a <find_handler+0xa>
        {
            return i;
        }
    }

    return -1;
    7644:	f04f 30ff 	mov.w	r0, #4294967295
}
    7648:	4770      	bx	lr
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    764a:	4a07      	ldr	r2, [pc, #28]	; (7668 <find_handler+0x28>)
    764c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    7650:	4282      	cmp	r2, r0
    7652:	d001      	beq.n	7658 <find_handler+0x18>
    for (uint32_t i = 0; i < NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS; i++)
    7654:	3301      	adds	r3, #1
    7656:	e7f4      	b.n	7642 <find_handler+0x2>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    7658:	4a03      	ldr	r2, [pc, #12]	; (7668 <find_handler+0x28>)
    765a:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    765e:	6852      	ldr	r2, [r2, #4]
    7660:	428a      	cmp	r2, r1
    7662:	d1f7      	bne.n	7654 <find_handler+0x14>
            return i;
    7664:	4618      	mov	r0, r3
    7666:	4770      	bx	lr
    7668:	20000134 	.word	0x20000134

0000766c <channel_handler_get>:
}

/* Return handler associated with given pin or null. */
static nrfx_gpiote_handler_config_t const * channel_handler_get(nrfx_gpiote_pin_t pin)
{
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    766c:	3008      	adds	r0, #8
    766e:	4b06      	ldr	r3, [pc, #24]	; (7688 <channel_handler_get+0x1c>)
    7670:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    7674:	f410 7f80 	tst.w	r0, #256	; 0x100
    7678:	d004      	beq.n	7684 <channel_handler_get+0x18>
    767a:	f3c0 2043 	ubfx	r0, r0, #9, #4
    if (handler_id == PIN_FLAG_NO_HANDLER)
    {
        return NULL;
    }

    return &m_cb.handlers[handler_id];
    767e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    7682:	4770      	bx	lr
        return NULL;
    7684:	2000      	movs	r0, #0
}
    7686:	4770      	bx	lr
    7688:	20000134 	.word	0x20000134

0000768c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    768c:	b570      	push	{r4, r5, r6, lr}
    768e:	4604      	mov	r4, r0
    7690:	460d      	mov	r5, r1
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);
    7692:	f7ff ffeb 	bl	766c <channel_handler_get>

    if (handler)
    7696:	b120      	cbz	r0, 76a2 <call_handler+0x16>
    {
        handler->handler(pin, trigger, handler->p_context);
    7698:	6806      	ldr	r6, [r0, #0]
    769a:	6842      	ldr	r2, [r0, #4]
    769c:	4629      	mov	r1, r5
    769e:	4620      	mov	r0, r4
    76a0:	47b0      	blx	r6
    }
    if (m_cb.global_handler.handler)
    76a2:	4b04      	ldr	r3, [pc, #16]	; (76b4 <call_handler+0x28>)
    76a4:	689b      	ldr	r3, [r3, #8]
    76a6:	b123      	cbz	r3, 76b2 <call_handler+0x26>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    76a8:	4a02      	ldr	r2, [pc, #8]	; (76b4 <call_handler+0x28>)
    76aa:	68d2      	ldr	r2, [r2, #12]
    76ac:	4629      	mov	r1, r5
    76ae:	4620      	mov	r0, r4
    76b0:	4798      	blx	r3
    }
}
    76b2:	bd70      	pop	{r4, r5, r6, pc}
    76b4:	20000134 	.word	0x20000134

000076b8 <next_sense_cond_call_handler>:

static void next_sense_cond_call_handler(nrfx_gpiote_pin_t     pin,
                                         nrfx_gpiote_trigger_t trigger,
                                         nrf_gpio_pin_sense_t  sense)
{
    76b8:	b570      	push	{r4, r5, r6, lr}
    76ba:	4604      	mov	r4, r0
    76bc:	460d      	mov	r5, r1
    76be:	4616      	mov	r6, r2
    if (is_level(trigger))
    76c0:	4608      	mov	r0, r1
    76c2:	f006 fc2a 	bl	df1a <is_level>
    76c6:	b9d0      	cbnz	r0, 76fe <next_sense_cond_call_handler+0x46>
    {
        /* Reconfigure sense to the opposite level, so the internal PINx.DETECT signal
         * can be deasserted. Therefore PORT event can be generated again,
         * unless some other PINx.DETECT signal is still active. */
        nrf_gpio_pin_sense_t next_sense = (sense == NRF_GPIO_PIN_SENSE_HIGH) ?
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    76c8:	2e02      	cmp	r6, #2
    76ca:	d03e      	beq.n	774a <next_sense_cond_call_handler+0x92>
    76cc:	2002      	movs	r0, #2
    *p_pin = pin_number & 0x1F;
    76ce:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    76d2:	0961      	lsrs	r1, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    76d4:	2901      	cmp	r1, #1
    76d6:	d03a      	beq.n	774e <next_sense_cond_call_handler+0x96>
        case 0: return NRF_P0;
    76d8:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    76dc:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    76e0:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    76e4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    76e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    76ec:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        nrf_gpio_cfg_sense_set(pin, next_sense);

        /* Invoke user handler only if the sensed pin level matches its polarity
         * configuration. Call handler unconditionally in case of toggle trigger or
         * level trigger. */
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    76f0:	2d03      	cmp	r5, #3
    76f2:	d030      	beq.n	7756 <next_sense_cond_call_handler+0x9e>
    76f4:	2e02      	cmp	r6, #2
    76f6:	d02c      	beq.n	7752 <next_sense_cond_call_handler+0x9a>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    76f8:	2e03      	cmp	r6, #3
    76fa:	d031      	beq.n	7760 <next_sense_cond_call_handler+0xa8>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
        {
            call_handler(pin, trigger);
        }
    }
}
    76fc:	bd70      	pop	{r4, r5, r6, pc}
        call_handler(pin, trigger);
    76fe:	4629      	mov	r1, r5
    7700:	4620      	mov	r0, r4
    7702:	f7ff ffc3 	bl	768c <call_handler>
    *p_pin = pin_number & 0x1F;
    7706:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    770a:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    770c:	2c01      	cmp	r4, #1
    770e:	d01a      	beq.n	7746 <next_sense_cond_call_handler+0x8e>
        case 0: return NRF_P0;
    7710:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    7714:	f503 72e0 	add.w	r2, r3, #448	; 0x1c0
    7718:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    771c:	f3c2 4201 	ubfx	r2, r2, #16, #2
        if (nrf_gpio_pin_sense_get(pin) == sense)
    7720:	4296      	cmp	r6, r2
    7722:	d1eb      	bne.n	76fc <next_sense_cond_call_handler+0x44>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7724:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7728:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    772c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    7730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7734:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    7738:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    773c:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    7740:	f841 6023 	str.w	r6, [r1, r3, lsl #2]
}
    7744:	e7da      	b.n	76fc <next_sense_cond_call_handler+0x44>
        case 1: return NRF_P1;
    7746:	4908      	ldr	r1, [pc, #32]	; (7768 <next_sense_cond_call_handler+0xb0>)
    7748:	e7e4      	b.n	7714 <next_sense_cond_call_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    774a:	2003      	movs	r0, #3
    774c:	e7bf      	b.n	76ce <next_sense_cond_call_handler+0x16>
    774e:	4906      	ldr	r1, [pc, #24]	; (7768 <next_sense_cond_call_handler+0xb0>)
    7750:	e7c4      	b.n	76dc <next_sense_cond_call_handler+0x24>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    7752:	2d01      	cmp	r5, #1
    7754:	d1d0      	bne.n	76f8 <next_sense_cond_call_handler+0x40>
            call_handler(pin, trigger);
    7756:	4629      	mov	r1, r5
    7758:	4620      	mov	r0, r4
    775a:	f7ff ff97 	bl	768c <call_handler>
}
    775e:	e7cd      	b.n	76fc <next_sense_cond_call_handler+0x44>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    7760:	2d02      	cmp	r5, #2
    7762:	d1cb      	bne.n	76fc <next_sense_cond_call_handler+0x44>
    7764:	e7f7      	b.n	7756 <next_sense_cond_call_handler+0x9e>
    7766:	bf00      	nop
    7768:	50000300 	.word	0x50000300

0000776c <latch_pending_read_and_check>:

#if defined(NRF_GPIO_LATCH_PRESENT)
static bool latch_pending_read_and_check(uint32_t * latch)
{
    776c:	b410      	push	{r4}
    776e:	b083      	sub	sp, #12
    7770:	4604      	mov	r4, r0
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    7772:	4b12      	ldr	r3, [pc, #72]	; (77bc <latch_pending_read_and_check+0x50>)
    7774:	e893 0003 	ldmia.w	r3, {r0, r1}
    7778:	ab02      	add	r3, sp, #8
    777a:	e903 0003 	stmdb	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    777e:	4620      	mov	r0, r4
    7780:	2300      	movs	r3, #0
    7782:	e00b      	b.n	779c <latch_pending_read_and_check+0x30>
        *p_masks = gpio_regs[i]->LATCH;
    7784:	aa02      	add	r2, sp, #8
    7786:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    778a:	f852 2c08 	ldr.w	r2, [r2, #-8]
    778e:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    7792:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    7796:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    779a:	3301      	adds	r3, #1
    779c:	2b01      	cmp	r3, #1
    779e:	d9f1      	bls.n	7784 <latch_pending_read_and_check+0x18>
    nrf_gpio_latches_read_and_clear(0, GPIO_COUNT, latch);

    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    77a0:	2300      	movs	r3, #0
    77a2:	2b01      	cmp	r3, #1
    77a4:	d804      	bhi.n	77b0 <latch_pending_read_and_check+0x44>
    {
        if (latch[port_idx])
    77a6:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
    77aa:	b92a      	cbnz	r2, 77b8 <latch_pending_read_and_check+0x4c>
    for (uint32_t port_idx = 0; port_idx < GPIO_COUNT; port_idx++)
    77ac:	3301      	adds	r3, #1
    77ae:	e7f8      	b.n	77a2 <latch_pending_read_and_check+0x36>
             * before or during the interrupt processing. Therefore event-processing loop
             * should be executed again. */
            return true;
        }
    }
    return false;
    77b0:	2000      	movs	r0, #0
}
    77b2:	b003      	add	sp, #12
    77b4:	bc10      	pop	{r4}
    77b6:	4770      	bx	lr
            return true;
    77b8:	2001      	movs	r0, #1
    77ba:	e7fa      	b.n	77b2 <latch_pending_read_and_check+0x46>
    77bc:	0000ed48 	.word	0x0000ed48

000077c0 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    77c0:	f100 0208 	add.w	r2, r0, #8
    77c4:	4b0e      	ldr	r3, [pc, #56]	; (7800 <release_handler+0x40>)
    77c6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    77ca:	f413 7f80 	tst.w	r3, #256	; 0x100
    77ce:	d016      	beq.n	77fe <release_handler+0x3e>
{
    77d0:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    77d2:	f3c3 2443 	ubfx	r4, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    77d6:	4610      	mov	r0, r2
    77d8:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    77dc:	4a08      	ldr	r2, [pc, #32]	; (7800 <release_handler+0x40>)
    77de:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    if (!handler_in_use(handler_id))
    77e2:	4620      	mov	r0, r4
    77e4:	f7ff ff12 	bl	760c <handler_in_use>
    77e8:	b100      	cbz	r0, 77ec <release_handler+0x2c>
}
    77ea:	bd10      	pop	{r4, pc}
        m_cb.handlers[handler_id].handler = NULL;
    77ec:	4804      	ldr	r0, [pc, #16]	; (7800 <release_handler+0x40>)
    77ee:	2300      	movs	r3, #0
    77f0:	f840 3034 	str.w	r3, [r0, r4, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    77f4:	4621      	mov	r1, r4
    77f6:	3074      	adds	r0, #116	; 0x74
    77f8:	f7ff fd8e 	bl	7318 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    77fc:	e7f5      	b.n	77ea <release_handler+0x2a>
    77fe:	4770      	bx	lr
    7800:	20000134 	.word	0x20000134

00007804 <pin_handler_trigger_uninit>:
{
    7804:	b510      	push	{r4, lr}
    7806:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin))
    7808:	f7ff fed8 	bl	75bc <pin_in_use_by_te>
    780c:	b140      	cbz	r0, 7820 <pin_handler_trigger_uninit+0x1c>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    780e:	4620      	mov	r0, r4
    7810:	f7ff fef4 	bl	75fc <pin_te_get>
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    7814:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    7818:	4b06      	ldr	r3, [pc, #24]	; (7834 <pin_handler_trigger_uninit+0x30>)
    781a:	2200      	movs	r2, #0
    781c:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    release_handler(pin);
    7820:	4620      	mov	r0, r4
    7822:	f7ff ffcd 	bl	77c0 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    7826:	3408      	adds	r4, #8
    7828:	4b03      	ldr	r3, [pc, #12]	; (7838 <pin_handler_trigger_uninit+0x34>)
    782a:	2200      	movs	r2, #0
    782c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
}
    7830:	bd10      	pop	{r4, pc}
    7832:	bf00      	nop
    7834:	40006000 	.word	0x40006000
    7838:	20000134 	.word	0x20000134

0000783c <pin_handler_set>:
{
    783c:	b570      	push	{r4, r5, r6, lr}
    783e:	b082      	sub	sp, #8
    7840:	4606      	mov	r6, r0
    7842:	460c      	mov	r4, r1
    7844:	4615      	mov	r5, r2
    release_handler(pin);
    7846:	f7ff ffbb 	bl	77c0 <release_handler>
    if (!handler)
    784a:	b324      	cbz	r4, 7896 <pin_handler_set+0x5a>
    handler_id = find_handler(handler, p_context);
    784c:	4629      	mov	r1, r5
    784e:	4620      	mov	r0, r4
    7850:	f7ff fef6 	bl	7640 <find_handler>
    if (handler_id < 0)
    7854:	1e03      	subs	r3, r0, #0
    7856:	db13      	blt.n	7880 <pin_handler_set+0x44>
    m_cb.handlers[handler_id].handler = handler;
    7858:	4a10      	ldr	r2, [pc, #64]	; (789c <pin_handler_set+0x60>)
    785a:	f842 4033 	str.w	r4, [r2, r3, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    785e:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    7862:	604d      	str	r5, [r1, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    7864:	025b      	lsls	r3, r3, #9
    7866:	b29b      	uxth	r3, r3
    7868:	f106 0008 	add.w	r0, r6, #8
    786c:	f832 1010 	ldrh.w	r1, [r2, r0, lsl #1]
    7870:	430b      	orrs	r3, r1
    7872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    7876:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    return NRFX_SUCCESS;
    787a:	4809      	ldr	r0, [pc, #36]	; (78a0 <pin_handler_set+0x64>)
}
    787c:	b002      	add	sp, #8
    787e:	bd70      	pop	{r4, r5, r6, pc}
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    7880:	f10d 0107 	add.w	r1, sp, #7
    7884:	4807      	ldr	r0, [pc, #28]	; (78a4 <pin_handler_set+0x68>)
    7886:	f7ff fd23 	bl	72d0 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    788a:	4b05      	ldr	r3, [pc, #20]	; (78a0 <pin_handler_set+0x64>)
    788c:	4298      	cmp	r0, r3
    788e:	d1f5      	bne.n	787c <pin_handler_set+0x40>
        handler_id = (int32_t)id;
    7890:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7894:	e7e0      	b.n	7858 <pin_handler_set+0x1c>
        return NRFX_SUCCESS;
    7896:	4802      	ldr	r0, [pc, #8]	; (78a0 <pin_handler_set+0x64>)
    7898:	e7f0      	b.n	787c <pin_handler_set+0x40>
    789a:	bf00      	nop
    789c:	20000134 	.word	0x20000134
    78a0:	0bad0000 	.word	0x0bad0000
    78a4:	200001a8 	.word	0x200001a8

000078a8 <port_event_handle>:

static void port_event_handle(void)
{
    78a8:	b570      	push	{r4, r5, r6, lr}
    78aa:	b084      	sub	sp, #16
    NRF_GPIO_Type * gpio_regs[GPIO_COUNT] = GPIO_REG_LIST;
    78ac:	4a2c      	ldr	r2, [pc, #176]	; (7960 <port_event_handle+0xb8>)
    78ae:	466b      	mov	r3, sp
    78b0:	e892 0003 	ldmia.w	r2, {r0, r1}
    78b4:	e883 0003 	stmia.w	r3, {r0, r1}
    for (i = start_port; i < (start_port + length); i++)
    78b8:	2300      	movs	r3, #0
    78ba:	a802      	add	r0, sp, #8
    78bc:	e00b      	b.n	78d6 <port_event_handle+0x2e>
        *p_masks = gpio_regs[i]->LATCH;
    78be:	aa04      	add	r2, sp, #16
    78c0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    78c4:	f852 2c10 	ldr.w	r2, [r2, #-16]
    78c8:	f8d2 1520 	ldr.w	r1, [r2, #1312]	; 0x520
    78cc:	f840 1b04 	str.w	r1, [r0], #4
        gpio_regs[i]->LATCH = *p_masks;
    78d0:	f8c2 1520 	str.w	r1, [r2, #1312]	; 0x520
    for (i = start_port; i < (start_port + length); i++)
    78d4:	3301      	adds	r3, #1
    78d6:	2b01      	cmp	r3, #1
    78d8:	d9f1      	bls.n	78be <port_event_handle+0x16>
    78da:	e03d      	b.n	7958 <port_event_handle+0xb0>
        case 1: return NRF_P1;
    78dc:	4e21      	ldr	r6, [pc, #132]	; (7964 <port_event_handle+0xbc>)
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    78de:	f505 73e0 	add.w	r3, r5, #448	; 0x1c0
    78e2:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);

                nrf_bitmask_bit_clear(pin, latch);
                sense = nrf_gpio_pin_sense_get(pin);

                next_sense_cond_call_handler(pin, trigger, sense);
    78e6:	f3c2 4201 	ubfx	r2, r2, #16, #2
    78ea:	f7ff fee5 	bl	76b8 <next_sense_cond_call_handler>
    reg->LATCH = (1 << pin_number);
    78ee:	2301      	movs	r3, #1
    78f0:	40ab      	lsls	r3, r5
    78f2:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
            while (latch[i])
    78f6:	ab04      	add	r3, sp, #16
    78f8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    78fc:	f853 0c08 	ldr.w	r0, [r3, #-8]
    7900:	b1f8      	cbz	r0, 7942 <port_event_handle+0x9a>
                uint32_t pin = NRF_CTZ(latch[i]);
    7902:	fa90 f0a0 	rbit	r0, r0
    7906:	fab0 f080 	clz	r0, r0
                pin += 32 * i;
    790a:	eb00 1044 	add.w	r0, r0, r4, lsl #5
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    790e:	f100 0208 	add.w	r2, r0, #8
    7912:	4b15      	ldr	r3, [pc, #84]	; (7968 <port_event_handle+0xc0>)
    7914:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
    7918:	f3c1 0182 	ubfx	r1, r1, #2, #3
 * @param[in,out] p_mask Pointer to mask with bit fields.
 */
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    791c:	08c5      	lsrs	r5, r0, #3
    bit = BITMASK_RELBIT_GET(bit);
    791e:	f000 0207 	and.w	r2, r0, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    7922:	ae02      	add	r6, sp, #8
    7924:	2301      	movs	r3, #1
    7926:	fa03 f202 	lsl.w	r2, r3, r2
    792a:	5d73      	ldrb	r3, [r6, r5]
    792c:	ea23 0302 	bic.w	r3, r3, r2
    7930:	5573      	strb	r3, [r6, r5]
    *p_pin = pin_number & 0x1F;
    7932:	f000 051f 	and.w	r5, r0, #31
    return pin_number >> 5;
    7936:	0943      	lsrs	r3, r0, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7938:	2b01      	cmp	r3, #1
    793a:	d0cf      	beq.n	78dc <port_event_handle+0x34>
        case 0: return NRF_P0;
    793c:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    7940:	e7cd      	b.n	78de <port_event_handle+0x36>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    7942:	3401      	adds	r4, #1
    7944:	2c01      	cmp	r4, #1
    7946:	d9d6      	bls.n	78f6 <port_event_handle+0x4e>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7948:	4b08      	ldr	r3, [pc, #32]	; (796c <port_event_handle+0xc4>)
    794a:	2200      	movs	r2, #0
    794c:	601a      	str	r2, [r3, #0]
    794e:	681b      	ldr	r3, [r3, #0]
        }

        /* All pins have been handled, clear PORT, check latch again in case
         * something came between deciding to exit and clearing PORT event. */
        nrf_gpiote_event_clear(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT);
    } while (latch_pending_read_and_check(latch));
    7950:	a802      	add	r0, sp, #8
    7952:	f7ff ff0b 	bl	776c <latch_pending_read_and_check>
    7956:	b108      	cbz	r0, 795c <port_event_handle+0xb4>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    7958:	2400      	movs	r4, #0
    795a:	e7f3      	b.n	7944 <port_event_handle+0x9c>
}
    795c:	b004      	add	sp, #16
    795e:	bd70      	pop	{r4, r5, r6, pc}
    7960:	0000ed48 	.word	0x0000ed48
    7964:	50000300 	.word	0x50000300
    7968:	20000134 	.word	0x20000134
    796c:	4000617c 	.word	0x4000617c

00007970 <gpiote_evt_handle>:
    } while (input_read_and_check(input, pins_to_check));
}
#endif // defined(NRF_GPIO_LATCH_PRESENT)

static void gpiote_evt_handle(uint32_t mask)
{
    7970:	b538      	push	{r3, r4, r5, lr}
    7972:	4604      	mov	r4, r0
    while (mask)
    7974:	b1cc      	cbz	r4, 79aa <gpiote_evt_handle+0x3a>
    {
        uint32_t ch = NRF_CTZ(mask);
    7976:	fa94 f3a4 	rbit	r3, r4
    797a:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    797e:	2201      	movs	r2, #1
    7980:	409a      	lsls	r2, r3
    7982:	ea24 0402 	bic.w	r4, r4, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    7986:	4a09      	ldr	r2, [pc, #36]	; (79ac <gpiote_evt_handle+0x3c>)
    7988:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    798c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    7990:	f3c5 2505 	ubfx	r5, r5, #8, #6
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    7994:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
        nrfx_gpiote_pin_t pin = nrf_gpiote_event_pin_get(NRF_GPIOTE, ch);
        nrf_gpiote_polarity_t polarity = nrf_gpiote_event_polarity_get(NRF_GPIOTE, ch);

        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    7998:	f3c0 4001 	ubfx	r0, r0, #16, #2
    799c:	f006 fabb 	bl	df16 <gpiote_polarity_to_trigger>
    79a0:	4601      	mov	r1, r0
    79a2:	4628      	mov	r0, r5
    79a4:	f7ff fe72 	bl	768c <call_handler>
    79a8:	e7e4      	b.n	7974 <gpiote_evt_handle+0x4>
    }
}
    79aa:	bd38      	pop	{r3, r4, r5, pc}
    79ac:	40006000 	.word	0x40006000

000079b0 <nrfx_gpiote_input_configure>:
{
    79b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    79b4:	4604      	mov	r4, r0
    79b6:	4615      	mov	r5, r2
    79b8:	461e      	mov	r6, r3
    if (p_input_config)
    79ba:	b361      	cbz	r1, 7a16 <nrfx_gpiote_input_configure+0x66>
    79bc:	460f      	mov	r7, r1
        if (pin_is_task_output(pin))
    79be:	f006 fa94 	bl	deea <pin_is_task_output>
    79c2:	2800      	cmp	r0, #0
    79c4:	f040 8097 	bne.w	7af6 <nrfx_gpiote_input_configure+0x146>
    *p_pin = pin_number & 0x1F;
    79c8:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    79cc:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    79ce:	2b01      	cmp	r3, #1
    79d0:	d042      	beq.n	7a58 <nrfx_gpiote_input_configure+0xa8>
        case 0: return NRF_P0;
    79d2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    79d6:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    79da:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    79de:	2f00      	cmp	r7, #0
    79e0:	d03c      	beq.n	7a5c <nrfx_gpiote_input_configure+0xac>
    79e2:	210c      	movs	r1, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    79e4:	f041 0103 	orr.w	r1, r1, #3
    cnf &= ~to_update;
    79e8:	ea23 0301 	bic.w	r3, r3, r1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    79ec:	2f00      	cmp	r7, #0
    79ee:	d037      	beq.n	7a60 <nrfx_gpiote_input_configure+0xb0>
    79f0:	7839      	ldrb	r1, [r7, #0]
    79f2:	0089      	lsls	r1, r1, #2
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    79f4:	430b      	orrs	r3, r1
    reg->PIN_CNF[pin_number] = cnf;
    79f6:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    79fa:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    79fe:	4a42      	ldr	r2, [pc, #264]	; (7b08 <nrfx_gpiote_input_configure+0x158>)
    7a00:	f104 0108 	add.w	r1, r4, #8
    7a04:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    7a08:	f023 0302 	bic.w	r3, r3, #2
    7a0c:	b29b      	uxth	r3, r3
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    7a0e:	f043 0301 	orr.w	r3, r3, #1
    7a12:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    7a16:	b1b5      	cbz	r5, 7a46 <nrfx_gpiote_input_configure+0x96>
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    7a18:	f895 8000 	ldrb.w	r8, [r5]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    7a1c:	f8d5 9004 	ldr.w	r9, [r5, #4]
        if (pin_is_output(pin))
    7a20:	4620      	mov	r0, r4
    7a22:	f7ff fde1 	bl	75e8 <pin_is_output>
    7a26:	b1e8      	cbz	r0, 7a64 <nrfx_gpiote_input_configure+0xb4>
            if (use_evt)
    7a28:	f1b9 0f00 	cmp.w	r9, #0
    7a2c:	d165      	bne.n	7afa <nrfx_gpiote_input_configure+0x14a>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    7a2e:	4b36      	ldr	r3, [pc, #216]	; (7b08 <nrfx_gpiote_input_configure+0x158>)
    7a30:	f104 0208 	add.w	r2, r4, #8
    7a34:	f833 0012 	ldrh.w	r0, [r3, r2, lsl #1]
    7a38:	f020 001c 	bic.w	r0, r0, #28
    7a3c:	b280      	uxth	r0, r0
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    7a3e:	ea40 0088 	orr.w	r0, r0, r8, lsl #2
    7a42:	f823 0012 	strh.w	r0, [r3, r2, lsl #1]
    if (p_handler_config)
    7a46:	2e00      	cmp	r6, #0
    7a48:	d05b      	beq.n	7b02 <nrfx_gpiote_input_configure+0x152>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    7a4a:	6872      	ldr	r2, [r6, #4]
    7a4c:	6831      	ldr	r1, [r6, #0]
    7a4e:	4620      	mov	r0, r4
    7a50:	f7ff fef4 	bl	783c <pin_handler_set>
}
    7a54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        case 1: return NRF_P1;
    7a58:	482c      	ldr	r0, [pc, #176]	; (7b0c <nrfx_gpiote_input_configure+0x15c>)
    7a5a:	e7bc      	b.n	79d6 <nrfx_gpiote_input_configure+0x26>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7a5c:	2100      	movs	r1, #0
    7a5e:	e7c1      	b.n	79e4 <nrfx_gpiote_input_configure+0x34>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    7a60:	2100      	movs	r1, #0
    7a62:	e7c7      	b.n	79f4 <nrfx_gpiote_input_configure+0x44>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    7a64:	4b28      	ldr	r3, [pc, #160]	; (7b08 <nrfx_gpiote_input_configure+0x158>)
    7a66:	f104 0208 	add.w	r2, r4, #8
    7a6a:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
    7a6e:	f027 0720 	bic.w	r7, r7, #32
    7a72:	04ff      	lsls	r7, r7, #19
    7a74:	0cff      	lsrs	r7, r7, #19
    7a76:	f823 7012 	strh.w	r7, [r3, r2, lsl #1]
            if (use_evt)
    7a7a:	f1b9 0f00 	cmp.w	r9, #0
    7a7e:	d0d6      	beq.n	7a2e <nrfx_gpiote_input_configure+0x7e>
                if (!edge)
    7a80:	f1b8 0f03 	cmp.w	r8, #3
    7a84:	d83b      	bhi.n	7afe <nrfx_gpiote_input_configure+0x14e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    7a86:	686b      	ldr	r3, [r5, #4]
    7a88:	781d      	ldrb	r5, [r3, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    7a8a:	f1b8 0f00 	cmp.w	r8, #0
    7a8e:	d106      	bne.n	7a9e <nrfx_gpiote_input_configure+0xee>
    p_reg->CONFIG[idx] = 0;
    7a90:	f505 75a2 	add.w	r5, r5, #324	; 0x144
    7a94:	4b1e      	ldr	r3, [pc, #120]	; (7b10 <nrfx_gpiote_input_configure+0x160>)
    7a96:	2200      	movs	r2, #0
    7a98:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    7a9c:	e7c7      	b.n	7a2e <nrfx_gpiote_input_configure+0x7e>
                    nrf_gpiote_polarity_t polarity = gpiote_trigger_to_polarity(trigger);
    7a9e:	4640      	mov	r0, r8
    7aa0:	f006 fa3a 	bl	df18 <gpiote_trigger_to_polarity>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    7aa4:	4b1a      	ldr	r3, [pc, #104]	; (7b10 <nrfx_gpiote_input_configure+0x160>)
    7aa6:	f505 72a2 	add.w	r2, r5, #324	; 0x144
    7aaa:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    7aae:	f021 0103 	bic.w	r1, r1, #3
    7ab2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    7ab6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    7aba:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    7abe:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    7ac2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7ac6:	f853 c022 	ldr.w	ip, [r3, r2, lsl #2]
    7aca:	0221      	lsls	r1, r4, #8
    7acc:	f401 517c 	and.w	r1, r1, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    7ad0:	0400      	lsls	r0, r0, #16
    7ad2:	f400 3040 	and.w	r0, r0, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7ad6:	4301      	orrs	r1, r0
    7ad8:	ea4c 0101 	orr.w	r1, ip, r1
    7adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    7ae0:	036d      	lsls	r5, r5, #13
    7ae2:	b2ad      	uxth	r5, r5
    7ae4:	f104 0308 	add.w	r3, r4, #8
    7ae8:	432f      	orrs	r7, r5
    7aea:	f047 0720 	orr.w	r7, r7, #32
    7aee:	4a06      	ldr	r2, [pc, #24]	; (7b08 <nrfx_gpiote_input_configure+0x158>)
    7af0:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
    7af4:	e79b      	b.n	7a2e <nrfx_gpiote_input_configure+0x7e>
            return NRFX_ERROR_INVALID_PARAM;
    7af6:	4807      	ldr	r0, [pc, #28]	; (7b14 <nrfx_gpiote_input_configure+0x164>)
    7af8:	e7ac      	b.n	7a54 <nrfx_gpiote_input_configure+0xa4>
                return NRFX_ERROR_INVALID_PARAM;
    7afa:	4806      	ldr	r0, [pc, #24]	; (7b14 <nrfx_gpiote_input_configure+0x164>)
    7afc:	e7aa      	b.n	7a54 <nrfx_gpiote_input_configure+0xa4>
                    return NRFX_ERROR_INVALID_PARAM;
    7afe:	4805      	ldr	r0, [pc, #20]	; (7b14 <nrfx_gpiote_input_configure+0x164>)
    7b00:	e7a8      	b.n	7a54 <nrfx_gpiote_input_configure+0xa4>
        err = NRFX_SUCCESS;
    7b02:	4805      	ldr	r0, [pc, #20]	; (7b18 <nrfx_gpiote_input_configure+0x168>)
    7b04:	e7a6      	b.n	7a54 <nrfx_gpiote_input_configure+0xa4>
    7b06:	bf00      	nop
    7b08:	20000134 	.word	0x20000134
    7b0c:	50000300 	.word	0x50000300
    7b10:	40006000 	.word	0x40006000
    7b14:	0bad0004 	.word	0x0bad0004
    7b18:	0bad0000 	.word	0x0bad0000

00007b1c <nrfx_gpiote_output_configure>:
{
    7b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7b1e:	4604      	mov	r4, r0
    7b20:	4615      	mov	r5, r2
    if (p_config)
    7b22:	2900      	cmp	r1, #0
    7b24:	d052      	beq.n	7bcc <nrfx_gpiote_output_configure+0xb0>
    7b26:	460e      	mov	r6, r1
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    7b28:	f006 f9ee 	bl	df08 <pin_is_input>
    7b2c:	b128      	cbz	r0, 7b3a <nrfx_gpiote_output_configure+0x1e>
    7b2e:	4620      	mov	r0, r4
    7b30:	f7ff fd44 	bl	75bc <pin_in_use_by_te>
    7b34:	2800      	cmp	r0, #0
    7b36:	f040 809d 	bne.w	7c74 <nrfx_gpiote_output_configure+0x158>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    7b3a:	4620      	mov	r0, r4
    7b3c:	f7ff fd48 	bl	75d0 <pin_has_trigger>
    7b40:	b118      	cbz	r0, 7b4a <nrfx_gpiote_output_configure+0x2e>
    7b42:	7873      	ldrb	r3, [r6, #1]
    7b44:	2b01      	cmp	r3, #1
    7b46:	f000 8097 	beq.w	7c78 <nrfx_gpiote_output_configure+0x15c>
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    7b4a:	f106 0c01 	add.w	ip, r6, #1
    7b4e:	1cb7      	adds	r7, r6, #2
    *p_pin = pin_number & 0x1F;
    7b50:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    7b54:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7b56:	2b01      	cmp	r3, #1
    7b58:	d07c      	beq.n	7c54 <nrfx_gpiote_output_configure+0x138>
        case 0: return NRF_P0;
    7b5a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7b5e:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    7b62:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    7b66:	f1bc 0f00 	cmp.w	ip, #0
    7b6a:	d075      	beq.n	7c58 <nrfx_gpiote_output_configure+0x13c>
    7b6c:	2302      	movs	r3, #2
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    7b6e:	f043 0301 	orr.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7b72:	2f00      	cmp	r7, #0
    7b74:	d072      	beq.n	7c5c <nrfx_gpiote_output_configure+0x140>
    7b76:	f04f 0e0c 	mov.w	lr, #12
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    7b7a:	ea43 030e 	orr.w	r3, r3, lr
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    7b7e:	2e00      	cmp	r6, #0
    7b80:	d06f      	beq.n	7c62 <nrfx_gpiote_output_configure+0x146>
    7b82:	f44f 6ee0 	mov.w	lr, #1792	; 0x700
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7b86:	ea43 030e 	orr.w	r3, r3, lr
    cnf &= ~to_update;
    7b8a:	ea20 0003 	bic.w	r0, r0, r3
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    7b8e:	f1bc 0f00 	cmp.w	ip, #0
    7b92:	d069      	beq.n	7c68 <nrfx_gpiote_output_configure+0x14c>
    7b94:	7873      	ldrb	r3, [r6, #1]
    7b96:	005b      	lsls	r3, r3, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7b98:	f043 0301 	orr.w	r3, r3, #1
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    7b9c:	2f00      	cmp	r7, #0
    7b9e:	d065      	beq.n	7c6c <nrfx_gpiote_output_configure+0x150>
    7ba0:	78b7      	ldrb	r7, [r6, #2]
    7ba2:	00bf      	lsls	r7, r7, #2
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    7ba4:	433b      	orrs	r3, r7
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    7ba6:	2e00      	cmp	r6, #0
    7ba8:	d062      	beq.n	7c70 <nrfx_gpiote_output_configure+0x154>
    7baa:	7836      	ldrb	r6, [r6, #0]
    7bac:	0236      	lsls	r6, r6, #8
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    7bae:	4333      	orrs	r3, r6
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7bb0:	4303      	orrs	r3, r0
    reg->PIN_CNF[pin_number] = cnf;
    7bb2:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    7bb6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    7bba:	4a33      	ldr	r2, [pc, #204]	; (7c88 <nrfx_gpiote_output_configure+0x16c>)
    7bbc:	f104 0108 	add.w	r1, r4, #8
    7bc0:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    7bc4:	f043 0303 	orr.w	r3, r3, #3
    7bc8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_task_config)
    7bcc:	2d00      	cmp	r5, #0
    7bce:	d055      	beq.n	7c7c <nrfx_gpiote_output_configure+0x160>
        if (pin_is_input(pin))
    7bd0:	4620      	mov	r0, r4
    7bd2:	f006 f999 	bl	df08 <pin_is_input>
    7bd6:	2800      	cmp	r0, #0
    7bd8:	d152      	bne.n	7c80 <nrfx_gpiote_output_configure+0x164>
        uint32_t ch = p_task_config->task_ch;
    7bda:	782a      	ldrb	r2, [r5, #0]
    p_reg->CONFIG[idx] = 0;
    7bdc:	f502 71a2 	add.w	r1, r2, #324	; 0x144
    7be0:	4b2a      	ldr	r3, [pc, #168]	; (7c8c <nrfx_gpiote_output_configure+0x170>)
    7be2:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    7be6:	4928      	ldr	r1, [pc, #160]	; (7c88 <nrfx_gpiote_output_configure+0x16c>)
    7be8:	f104 0008 	add.w	r0, r4, #8
    7bec:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
    7bf0:	f023 0320 	bic.w	r3, r3, #32
    7bf4:	04db      	lsls	r3, r3, #19
    7bf6:	0cdb      	lsrs	r3, r3, #19
    7bf8:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    7bfc:	7869      	ldrb	r1, [r5, #1]
    7bfe:	2900      	cmp	r1, #0
    7c00:	d040      	beq.n	7c84 <nrfx_gpiote_output_configure+0x168>
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    7c02:	f895 c002 	ldrb.w	ip, [r5, #2]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    7c06:	4d21      	ldr	r5, [pc, #132]	; (7c8c <nrfx_gpiote_output_configure+0x170>)
    7c08:	f502 76a2 	add.w	r6, r2, #324	; 0x144
    7c0c:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
    7c10:	f420 1099 	bic.w	r0, r0, #1253376	; 0x132000
    7c14:	f420 50f8 	bic.w	r0, r0, #7936	; 0x1f00
    7c18:	f845 0026 	str.w	r0, [r5, r6, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7c1c:	f855 7026 	ldr.w	r7, [r5, r6, lsl #2]
    7c20:	0220      	lsls	r0, r4, #8
    7c22:	f400 507c 	and.w	r0, r0, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    7c26:	0409      	lsls	r1, r1, #16
    7c28:	f401 3140 	and.w	r1, r1, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7c2c:	4301      	orrs	r1, r0
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    7c2e:	ea4f 500c 	mov.w	r0, ip, lsl #20
    7c32:	f400 1080 	and.w	r0, r0, #1048576	; 0x100000
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    7c36:	4301      	orrs	r1, r0
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7c38:	4339      	orrs	r1, r7
    7c3a:	f845 1026 	str.w	r1, [r5, r6, lsl #2]
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    7c3e:	0352      	lsls	r2, r2, #13
    7c40:	b292      	uxth	r2, r2
    7c42:	3408      	adds	r4, #8
    7c44:	431a      	orrs	r2, r3
    7c46:	f042 0220 	orr.w	r2, r2, #32
    7c4a:	4b0f      	ldr	r3, [pc, #60]	; (7c88 <nrfx_gpiote_output_configure+0x16c>)
    7c4c:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
    return NRFX_SUCCESS;
    7c50:	480f      	ldr	r0, [pc, #60]	; (7c90 <nrfx_gpiote_output_configure+0x174>)
    7c52:	e014      	b.n	7c7e <nrfx_gpiote_output_configure+0x162>
        case 1: return NRF_P1;
    7c54:	490f      	ldr	r1, [pc, #60]	; (7c94 <nrfx_gpiote_output_configure+0x178>)
    7c56:	e782      	b.n	7b5e <nrfx_gpiote_output_configure+0x42>
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    7c58:	2300      	movs	r3, #0
    7c5a:	e788      	b.n	7b6e <nrfx_gpiote_output_configure+0x52>
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    7c5c:	f04f 0e00 	mov.w	lr, #0
    7c60:	e78b      	b.n	7b7a <nrfx_gpiote_output_configure+0x5e>
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    7c62:	f04f 0e00 	mov.w	lr, #0
    7c66:	e78e      	b.n	7b86 <nrfx_gpiote_output_configure+0x6a>
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    7c68:	2300      	movs	r3, #0
    7c6a:	e795      	b.n	7b98 <nrfx_gpiote_output_configure+0x7c>
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    7c6c:	2700      	movs	r7, #0
    7c6e:	e799      	b.n	7ba4 <nrfx_gpiote_output_configure+0x88>
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    7c70:	2600      	movs	r6, #0
    7c72:	e79c      	b.n	7bae <nrfx_gpiote_output_configure+0x92>
    7c74:	4808      	ldr	r0, [pc, #32]	; (7c98 <nrfx_gpiote_output_configure+0x17c>)
    7c76:	e002      	b.n	7c7e <nrfx_gpiote_output_configure+0x162>
    7c78:	4807      	ldr	r0, [pc, #28]	; (7c98 <nrfx_gpiote_output_configure+0x17c>)
    7c7a:	e000      	b.n	7c7e <nrfx_gpiote_output_configure+0x162>
    7c7c:	4804      	ldr	r0, [pc, #16]	; (7c90 <nrfx_gpiote_output_configure+0x174>)
}
    7c7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return NRFX_ERROR_INVALID_PARAM;
    7c80:	4805      	ldr	r0, [pc, #20]	; (7c98 <nrfx_gpiote_output_configure+0x17c>)
    7c82:	e7fc      	b.n	7c7e <nrfx_gpiote_output_configure+0x162>
    return NRFX_SUCCESS;
    7c84:	4802      	ldr	r0, [pc, #8]	; (7c90 <nrfx_gpiote_output_configure+0x174>)
    7c86:	e7fa      	b.n	7c7e <nrfx_gpiote_output_configure+0x162>
    7c88:	20000134 	.word	0x20000134
    7c8c:	40006000 	.word	0x40006000
    7c90:	0bad0000 	.word	0x0bad0000
    7c94:	50000300 	.word	0x50000300
    7c98:	0bad0004 	.word	0x0bad0004

00007c9c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    7c9c:	4b01      	ldr	r3, [pc, #4]	; (7ca4 <nrfx_gpiote_global_callback_set+0x8>)
    7c9e:	6098      	str	r0, [r3, #8]
    m_cb.global_handler.p_context = p_context;
    7ca0:	60d9      	str	r1, [r3, #12]
}
    7ca2:	4770      	bx	lr
    7ca4:	20000134 	.word	0x20000134

00007ca8 <nrfx_gpiote_channel_get>:
{
    7ca8:	b538      	push	{r3, r4, r5, lr}
    7caa:	4604      	mov	r4, r0
    7cac:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin))
    7cae:	f7ff fc85 	bl	75bc <pin_in_use_by_te>
    7cb2:	b140      	cbz	r0, 7cc6 <nrfx_gpiote_channel_get+0x1e>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    7cb4:	f104 0008 	add.w	r0, r4, #8
    7cb8:	4b04      	ldr	r3, [pc, #16]	; (7ccc <nrfx_gpiote_channel_get+0x24>)
    7cba:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
    7cbe:	0b5b      	lsrs	r3, r3, #13
    7cc0:	702b      	strb	r3, [r5, #0]
        return NRFX_SUCCESS;
    7cc2:	4803      	ldr	r0, [pc, #12]	; (7cd0 <nrfx_gpiote_channel_get+0x28>)
}
    7cc4:	bd38      	pop	{r3, r4, r5, pc}
        return NRFX_ERROR_INVALID_PARAM;
    7cc6:	4803      	ldr	r0, [pc, #12]	; (7cd4 <nrfx_gpiote_channel_get+0x2c>)
    7cc8:	e7fc      	b.n	7cc4 <nrfx_gpiote_channel_get+0x1c>
    7cca:	bf00      	nop
    7ccc:	20000134 	.word	0x20000134
    7cd0:	0bad0000 	.word	0x0bad0000
    7cd4:	0bad0004 	.word	0x0bad0004

00007cd8 <nrfx_gpiote_init>:
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    7cd8:	4b0f      	ldr	r3, [pc, #60]	; (7d18 <nrfx_gpiote_init+0x40>)
    7cda:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    7cde:	b10b      	cbz	r3, 7ce4 <nrfx_gpiote_init+0xc>
        return err_code;
    7ce0:	480e      	ldr	r0, [pc, #56]	; (7d1c <nrfx_gpiote_init+0x44>)
}
    7ce2:	4770      	bx	lr
{
    7ce4:	b510      	push	{r4, lr}
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    7ce6:	4c0c      	ldr	r4, [pc, #48]	; (7d18 <nrfx_gpiote_init+0x40>)
    7ce8:	2260      	movs	r2, #96	; 0x60
    7cea:	2100      	movs	r1, #0
    7cec:	f104 0010 	add.w	r0, r4, #16
    7cf0:	f005 fb7c 	bl	d3ec <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    7cf4:	2006      	movs	r0, #6
    7cf6:	f7fb ff93 	bl	3c20 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7cfa:	4b09      	ldr	r3, [pc, #36]	; (7d20 <nrfx_gpiote_init+0x48>)
    7cfc:	2200      	movs	r2, #0
    7cfe:	601a      	str	r2, [r3, #0]
    7d00:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    7d02:	4b08      	ldr	r3, [pc, #32]	; (7d24 <nrfx_gpiote_init+0x4c>)
    7d04:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    7d08:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    7d0c:	2301      	movs	r3, #1
    7d0e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    7d12:	6763      	str	r3, [r4, #116]	; 0x74
    return err_code;
    7d14:	4804      	ldr	r0, [pc, #16]	; (7d28 <nrfx_gpiote_init+0x50>)
}
    7d16:	bd10      	pop	{r4, pc}
    7d18:	20000134 	.word	0x20000134
    7d1c:	0bad0005 	.word	0x0bad0005
    7d20:	4000617c 	.word	0x4000617c
    7d24:	40006000 	.word	0x40006000
    7d28:	0bad0000 	.word	0x0bad0000

00007d2c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    7d2c:	4b03      	ldr	r3, [pc, #12]	; (7d3c <nrfx_gpiote_is_init+0x10>)
    7d2e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    7d32:	3800      	subs	r0, #0
    7d34:	bf18      	it	ne
    7d36:	2001      	movne	r0, #1
    7d38:	4770      	bx	lr
    7d3a:	bf00      	nop
    7d3c:	20000134 	.word	0x20000134

00007d40 <nrfx_gpiote_channel_free>:
{
    7d40:	b508      	push	{r3, lr}
    7d42:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    7d44:	4801      	ldr	r0, [pc, #4]	; (7d4c <nrfx_gpiote_channel_free+0xc>)
    7d46:	f7ff fae7 	bl	7318 <nrfx_flag32_free>
}
    7d4a:	bd08      	pop	{r3, pc}
    7d4c:	200001a4 	.word	0x200001a4

00007d50 <nrfx_gpiote_channel_alloc>:
{
    7d50:	b508      	push	{r3, lr}
    7d52:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    7d54:	4801      	ldr	r0, [pc, #4]	; (7d5c <nrfx_gpiote_channel_alloc+0xc>)
    7d56:	f7ff fabb 	bl	72d0 <nrfx_flag32_alloc>
}
    7d5a:	bd08      	pop	{r3, pc}
    7d5c:	200001a4 	.word	0x200001a4

00007d60 <nrfx_gpiote_trigger_enable>:
{
    7d60:	b538      	push	{r3, r4, r5, lr}
    7d62:	4604      	mov	r4, r0
    7d64:	460d      	mov	r5, r1
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    7d66:	f7ff fc29 	bl	75bc <pin_in_use_by_te>
    7d6a:	b308      	cbz	r0, 7db0 <nrfx_gpiote_trigger_enable+0x50>
    7d6c:	4620      	mov	r0, r4
    7d6e:	f006 f8cb 	bl	df08 <pin_is_input>
    7d72:	b1e8      	cbz	r0, 7db0 <nrfx_gpiote_trigger_enable+0x50>
        uint8_t ch = pin_te_get(pin);
    7d74:	4620      	mov	r0, r4
    7d76:	f7ff fc41 	bl	75fc <pin_te_get>
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    7d7a:	0083      	lsls	r3, r0, #2
    7d7c:	f503 7380 	add.w	r3, r3, #256	; 0x100
    return ((uint32_t)p_reg + event);
    7d80:	b29b      	uxth	r3, r3
    7d82:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7d86:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7d8a:	2200      	movs	r2, #0
    7d8c:	601a      	str	r2, [r3, #0]
    7d8e:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    7d90:	4a22      	ldr	r2, [pc, #136]	; (7e1c <nrfx_gpiote_trigger_enable+0xbc>)
    7d92:	f500 71a2 	add.w	r1, r0, #324	; 0x144
    7d96:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    7d9a:	f043 0301 	orr.w	r3, r3, #1
    7d9e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
        if (int_enable)
    7da2:	b39d      	cbz	r5, 7e0c <nrfx_gpiote_trigger_enable+0xac>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    7da4:	2301      	movs	r3, #1
    7da6:	fa03 f000 	lsl.w	r0, r3, r0
    p_reg->INTENSET = mask;
    7daa:	f8c2 0304 	str.w	r0, [r2, #772]	; 0x304
}
    7dae:	e02d      	b.n	7e0c <nrfx_gpiote_trigger_enable+0xac>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    7db0:	f104 0308 	add.w	r3, r4, #8
    7db4:	4a1a      	ldr	r2, [pc, #104]	; (7e20 <nrfx_gpiote_trigger_enable+0xc0>)
    7db6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    7dba:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    7dbe:	2b04      	cmp	r3, #4
    7dc0:	d012      	beq.n	7de8 <nrfx_gpiote_trigger_enable+0x88>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    7dc2:	2b05      	cmp	r3, #5
    7dc4:	d023      	beq.n	7e0e <nrfx_gpiote_trigger_enable+0xae>
    *p_pin = pin_number & 0x1F;
    7dc6:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    7dca:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7dcc:	2b01      	cmp	r3, #1
    7dce:	d009      	beq.n	7de4 <nrfx_gpiote_trigger_enable+0x84>
        case 0: return NRF_P0;
    7dd0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return p_reg->IN;
    7dd4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    7dd8:	40d3      	lsrs	r3, r2
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    7dda:	f013 0f01 	tst.w	r3, #1
    7dde:	d018      	beq.n	7e12 <nrfx_gpiote_trigger_enable+0xb2>
    7de0:	2003      	movs	r0, #3
    7de2:	e002      	b.n	7dea <nrfx_gpiote_trigger_enable+0x8a>
        case 1: return NRF_P1;
    7de4:	4b0f      	ldr	r3, [pc, #60]	; (7e24 <nrfx_gpiote_trigger_enable+0xc4>)
    7de6:	e7f5      	b.n	7dd4 <nrfx_gpiote_trigger_enable+0x74>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    7de8:	2003      	movs	r0, #3
    *p_pin = pin_number & 0x1F;
    7dea:	f004 021f 	and.w	r2, r4, #31
    return pin_number >> 5;
    7dee:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7df0:	2c01      	cmp	r4, #1
    7df2:	d010      	beq.n	7e16 <nrfx_gpiote_trigger_enable+0xb6>
        case 0: return NRF_P0;
    7df4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7df8:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    7dfc:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
    cnf &= ~to_update;
    7e00:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7e04:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    7e08:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
}
    7e0c:	bd38      	pop	{r3, r4, r5, pc}
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    7e0e:	2002      	movs	r0, #2
    7e10:	e7eb      	b.n	7dea <nrfx_gpiote_trigger_enable+0x8a>
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    7e12:	2002      	movs	r0, #2
    7e14:	e7e9      	b.n	7dea <nrfx_gpiote_trigger_enable+0x8a>
        case 1: return NRF_P1;
    7e16:	4903      	ldr	r1, [pc, #12]	; (7e24 <nrfx_gpiote_trigger_enable+0xc4>)
    7e18:	e7ee      	b.n	7df8 <nrfx_gpiote_trigger_enable+0x98>
    7e1a:	bf00      	nop
    7e1c:	40006000 	.word	0x40006000
    7e20:	20000134 	.word	0x20000134
    7e24:	50000300 	.word	0x50000300

00007e28 <nrfx_gpiote_trigger_disable>:
{
    7e28:	b510      	push	{r4, lr}
    7e2a:	4604      	mov	r4, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    7e2c:	f7ff fbc6 	bl	75bc <pin_in_use_by_te>
    7e30:	b1a0      	cbz	r0, 7e5c <nrfx_gpiote_trigger_disable+0x34>
    7e32:	4620      	mov	r0, r4
    7e34:	f006 f868 	bl	df08 <pin_is_input>
    7e38:	b180      	cbz	r0, 7e5c <nrfx_gpiote_trigger_disable+0x34>
        uint8_t ch = pin_te_get(pin);
    7e3a:	4620      	mov	r0, r4
    7e3c:	f7ff fbde 	bl	75fc <pin_te_get>
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    7e40:	2201      	movs	r2, #1
    7e42:	4082      	lsls	r2, r0
    p_reg->INTENCLR = mask;
    7e44:	4b0e      	ldr	r3, [pc, #56]	; (7e80 <nrfx_gpiote_trigger_disable+0x58>)
    7e46:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    7e4a:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    7e4e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
    7e52:	f022 0203 	bic.w	r2, r2, #3
    7e56:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    7e5a:	e00e      	b.n	7e7a <nrfx_gpiote_trigger_disable+0x52>
    *p_pin = pin_number & 0x1F;
    7e5c:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    7e60:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7e62:	2c01      	cmp	r4, #1
    7e64:	d00a      	beq.n	7e7c <nrfx_gpiote_trigger_disable+0x54>
        case 0: return NRF_P0;
    7e66:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7e6a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7e6e:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    cnf &= ~to_update;
    7e72:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf;
    7e76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    7e7a:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    7e7c:	4901      	ldr	r1, [pc, #4]	; (7e84 <nrfx_gpiote_trigger_disable+0x5c>)
    7e7e:	e7f4      	b.n	7e6a <nrfx_gpiote_trigger_disable+0x42>
    7e80:	40006000 	.word	0x40006000
    7e84:	50000300 	.word	0x50000300

00007e88 <nrfx_gpiote_pin_uninit>:
{
    7e88:	b510      	push	{r4, lr}
    7e8a:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    7e8c:	f7ff fb8c 	bl	75a8 <pin_in_use>
    7e90:	b908      	cbnz	r0, 7e96 <nrfx_gpiote_pin_uninit+0xe>
        return NRFX_ERROR_INVALID_PARAM;
    7e92:	480c      	ldr	r0, [pc, #48]	; (7ec4 <nrfx_gpiote_pin_uninit+0x3c>)
}
    7e94:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_disable(pin);
    7e96:	4620      	mov	r0, r4
    7e98:	f7ff ffc6 	bl	7e28 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    7e9c:	4620      	mov	r0, r4
    7e9e:	f7ff fcb1 	bl	7804 <pin_handler_trigger_uninit>
    *p_pin = pin_number & 0x1F;
    7ea2:	f004 031f 	and.w	r3, r4, #31
    return pin_number >> 5;
    7ea6:	0964      	lsrs	r4, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7ea8:	2c01      	cmp	r4, #1
    7eaa:	d008      	beq.n	7ebe <nrfx_gpiote_pin_uninit+0x36>
        case 0: return NRF_P0;
    7eac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    7eb0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7eb4:	2102      	movs	r1, #2
    7eb6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    return NRFX_SUCCESS;
    7eba:	4803      	ldr	r0, [pc, #12]	; (7ec8 <nrfx_gpiote_pin_uninit+0x40>)
    7ebc:	e7ea      	b.n	7e94 <nrfx_gpiote_pin_uninit+0xc>
        case 1: return NRF_P1;
    7ebe:	4a03      	ldr	r2, [pc, #12]	; (7ecc <nrfx_gpiote_pin_uninit+0x44>)
    7ec0:	e7f6      	b.n	7eb0 <nrfx_gpiote_pin_uninit+0x28>
    7ec2:	bf00      	nop
    7ec4:	0bad0004 	.word	0x0bad0004
    7ec8:	0bad0000 	.word	0x0bad0000
    7ecc:	50000300 	.word	0x50000300

00007ed0 <nrfx_gpiote_irq_handler>:

void nrfx_gpiote_irq_handler(void)
{
    7ed0:	b538      	push	{r3, r4, r5, lr}
    uint32_t status = 0;
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    7ed2:	2001      	movs	r0, #1
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    7ed4:	f44f 7380 	mov.w	r3, #256	; 0x100

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7ed8:	2100      	movs	r1, #0
    uint32_t status = 0;
    7eda:	460d      	mov	r5, r1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7edc:	e003      	b.n	7ee6 <nrfx_gpiote_irq_handler+0x16>
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
        }
        mask <<= 1;
    7ede:	0040      	lsls	r0, r0, #1
        /* Incrementing to next event, utilizing the fact that events are grouped together
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    7ee0:	3304      	adds	r3, #4
    7ee2:	b29b      	uxth	r3, r3
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7ee4:	3101      	adds	r1, #1
    7ee6:	2907      	cmp	r1, #7
    7ee8:	d814      	bhi.n	7f14 <nrfx_gpiote_irq_handler+0x44>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7eea:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    7eee:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    7ef2:	6812      	ldr	r2, [r2, #0]
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    7ef4:	2a00      	cmp	r2, #0
    7ef6:	d0f2      	beq.n	7ede <nrfx_gpiote_irq_handler+0xe>
    return p_reg->INTENSET & mask;
    7ef8:	4a0b      	ldr	r2, [pc, #44]	; (7f28 <nrfx_gpiote_irq_handler+0x58>)
    7efa:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    7efe:	4210      	tst	r0, r2
    7f00:	d0ed      	beq.n	7ede <nrfx_gpiote_irq_handler+0xe>
    return ((uint32_t)p_reg + event);
    7f02:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
    7f06:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7f0a:	2400      	movs	r4, #0
    7f0c:	6014      	str	r4, [r2, #0]
    7f0e:	6812      	ldr	r2, [r2, #0]
            status |= mask;
    7f10:	4305      	orrs	r5, r0
    7f12:	e7e4      	b.n	7ede <nrfx_gpiote_irq_handler+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7f14:	4b05      	ldr	r3, [pc, #20]	; (7f2c <nrfx_gpiote_irq_handler+0x5c>)
    7f16:	681b      	ldr	r3, [r3, #0]
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    7f18:	b91b      	cbnz	r3, 7f22 <nrfx_gpiote_irq_handler+0x52>
    {
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
    7f1a:	4628      	mov	r0, r5
    7f1c:	f7ff fd28 	bl	7970 <gpiote_evt_handle>
}
    7f20:	bd38      	pop	{r3, r4, r5, pc}
        port_event_handle();
    7f22:	f7ff fcc1 	bl	78a8 <port_event_handle>
    7f26:	e7f8      	b.n	7f1a <nrfx_gpiote_irq_handler+0x4a>
    7f28:	40006000 	.word	0x40006000
    7f2c:	4000617c 	.word	0x4000617c

00007f30 <nrf52_errata_197>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7f30:	4b06      	ldr	r3, [pc, #24]	; (7f4c <nrf52_errata_197+0x1c>)
    7f32:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    7f34:	4a06      	ldr	r2, [pc, #24]	; (7f50 <nrf52_errata_197+0x20>)
    7f36:	6812      	ldr	r2, [r2, #0]
            if (var1 == 0x08)
    7f38:	2b08      	cmp	r3, #8
    7f3a:	d001      	beq.n	7f40 <nrf52_errata_197+0x10>
        return false;
    7f3c:	2000      	movs	r0, #0
    7f3e:	4770      	bx	lr
                switch(var2)
    7f40:	2a02      	cmp	r2, #2
    7f42:	d001      	beq.n	7f48 <nrf52_errata_197+0x18>
                        return false;
    7f44:	2000      	movs	r0, #0
    7f46:	4770      	bx	lr
                        return true;
    7f48:	2001      	movs	r0, #1
}
    7f4a:	4770      	bx	lr
    7f4c:	10000130 	.word	0x10000130
    7f50:	10000134 	.word	0x10000134

00007f54 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
    7f54:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
    7f56:	4b18      	ldr	r3, [pc, #96]	; (7fb8 <nrfx_power_init+0x64>)
    7f58:	781b      	ldrb	r3, [r3, #0]
    7f5a:	bb5b      	cbnz	r3, 7fb4 <nrfx_power_init+0x60>
    7f5c:	4604      	mov	r4, r0
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
    7f5e:	7803      	ldrb	r3, [r0, #0]
    7f60:	f3c3 0540 	ubfx	r5, r3, #1, #1
    if (enable && nrf52_errata_197())
    7f64:	f013 0f02 	tst.w	r3, #2
    7f68:	d005      	beq.n	7f76 <nrfx_power_init+0x22>
    7f6a:	f7ff ffe1 	bl	7f30 <nrf52_errata_197>
    7f6e:	b110      	cbz	r0, 7f76 <nrfx_power_init+0x22>
        *(volatile uint32_t *)0x40000638ul = 1ul;
    7f70:	4b12      	ldr	r3, [pc, #72]	; (7fbc <nrfx_power_init+0x68>)
    7f72:	2201      	movs	r2, #1
    7f74:	601a      	str	r2, [r3, #0]
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    7f76:	b1b5      	cbz	r5, 7fa6 <nrfx_power_init+0x52>
    7f78:	2201      	movs	r2, #1
    7f7a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7f7e:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#elif NRF_REGULATORS_HAS_DCDCEN_VDDH
    nrf_regulators_dcdcen_vddh_set(NRF_REGULATORS, p_config->dcdcenhv);
#endif

#if NRF_POWER_HAS_DCDCEN
    nrf_power_dcdcen_set(NRF_POWER, p_config->dcdcen);
    7f82:	7823      	ldrb	r3, [r4, #0]
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    7f84:	f013 0f01 	tst.w	r3, #1
    7f88:	d00f      	beq.n	7faa <nrfx_power_init+0x56>
    7f8a:	2201      	movs	r2, #1
    7f8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7f90:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    7f94:	2000      	movs	r0, #0
    7f96:	f7fb fe67 	bl	3c68 <arch_irq_is_enabled>
    7f9a:	b140      	cbz	r0, 7fae <nrfx_power_init+0x5a>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
    7f9c:	4b06      	ldr	r3, [pc, #24]	; (7fb8 <nrfx_power_init+0x64>)
    7f9e:	2201      	movs	r2, #1
    7fa0:	701a      	strb	r2, [r3, #0]
    return NRFX_SUCCESS;
    7fa2:	4807      	ldr	r0, [pc, #28]	; (7fc0 <nrfx_power_init+0x6c>)
}
    7fa4:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    7fa6:	2200      	movs	r2, #0
    7fa8:	e7e7      	b.n	7f7a <nrfx_power_init+0x26>
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    7faa:	2200      	movs	r2, #0
    7fac:	e7ee      	b.n	7f8c <nrfx_power_init+0x38>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    7fae:	f7fb fe37 	bl	3c20 <arch_irq_enable>
    7fb2:	e7f3      	b.n	7f9c <nrfx_power_init+0x48>
        return NRFX_ERROR_ALREADY_INITIALIZED;
    7fb4:	4803      	ldr	r0, [pc, #12]	; (7fc4 <nrfx_power_init+0x70>)
    7fb6:	e7f5      	b.n	7fa4 <nrfx_power_init+0x50>
    7fb8:	2000253b 	.word	0x2000253b
    7fbc:	40000638 	.word	0x40000638
    7fc0:	0bad0000 	.word	0x0bad0000
    7fc4:	0bad000c 	.word	0x0bad000c

00007fc8 <nrfx_power_usbevt_uninit>:
                                     NRF_POWER_INT_USBREMOVED_MASK  |
                                     NRF_POWER_INT_USBPWRRDY_MASK);
}

void nrfx_power_usbevt_uninit(void)
{
    7fc8:	b508      	push	{r3, lr}
    nrfx_power_usbevt_disable();
    7fca:	f005 ffb2 	bl	df32 <nrfx_power_usbevt_disable>
    m_usbevt_handler = NULL;
    7fce:	4b02      	ldr	r3, [pc, #8]	; (7fd8 <nrfx_power_usbevt_uninit+0x10>)
    7fd0:	2200      	movs	r2, #0
    7fd2:	601a      	str	r2, [r3, #0]
}
    7fd4:	bd08      	pop	{r3, pc}
    7fd6:	bf00      	nop
    7fd8:	20001dd8 	.word	0x20001dd8

00007fdc <nrfx_power_usbevt_init>:
{
    7fdc:	b510      	push	{r4, lr}
    7fde:	4604      	mov	r4, r0
    nrfx_power_usbevt_uninit();
    7fe0:	f7ff fff2 	bl	7fc8 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
    7fe4:	6823      	ldr	r3, [r4, #0]
    7fe6:	b10b      	cbz	r3, 7fec <nrfx_power_usbevt_init+0x10>
        m_usbevt_handler = p_config->handler;
    7fe8:	4a01      	ldr	r2, [pc, #4]	; (7ff0 <nrfx_power_usbevt_init+0x14>)
    7fea:	6013      	str	r3, [r2, #0]
}
    7fec:	bd10      	pop	{r4, pc}
    7fee:	bf00      	nop
    7ff0:	20001dd8 	.word	0x20001dd8

00007ff4 <nrfx_power_irq_handler>:

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    7ff4:	b510      	push	{r4, lr}
    return p_reg->INTENSET;
    7ff6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7ffa:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    7ffe:	f014 0f04 	tst.w	r4, #4
    8002:	d00b      	beq.n	801c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8004:	f503 7384 	add.w	r3, r3, #264	; 0x108
    8008:	681b      	ldr	r3, [r3, #0]
    if (ret)
    800a:	b11b      	cbz	r3, 8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    800c:	4a29      	ldr	r2, [pc, #164]	; (80b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb4>)
    800e:	2100      	movs	r1, #0
    8010:	6011      	str	r1, [r2, #0]
    8012:	6812      	ldr	r2, [r2, #0]
    8014:	b113      	cbz	r3, 801c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    8016:	4b28      	ldr	r3, [pc, #160]	; (80b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb8>)
    8018:	681b      	ldr	r3, [r3, #0]
    801a:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    801c:	f014 0f20 	tst.w	r4, #32
    8020:	d00b      	beq.n	803a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8022:	4b26      	ldr	r3, [pc, #152]	; (80bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbc>)
    8024:	681b      	ldr	r3, [r3, #0]
    if (ret)
    8026:	b11b      	cbz	r3, 8030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8028:	4a24      	ldr	r2, [pc, #144]	; (80bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xbc>)
    802a:	2100      	movs	r1, #0
    802c:	6011      	str	r1, [r2, #0]
    802e:	6812      	ldr	r2, [r2, #0]
    8030:	b11b      	cbz	r3, 803a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    8032:	4b23      	ldr	r3, [pc, #140]	; (80c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc0>)
    8034:	681b      	ldr	r3, [r3, #0]
    8036:	2000      	movs	r0, #0
    8038:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    803a:	f014 0f40 	tst.w	r4, #64	; 0x40
    803e:	d00b      	beq.n	8058 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8040:	4b20      	ldr	r3, [pc, #128]	; (80c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>)
    8042:	681b      	ldr	r3, [r3, #0]
    if (ret)
    8044:	b11b      	cbz	r3, 804e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8046:	4a1f      	ldr	r2, [pc, #124]	; (80c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc4>)
    8048:	2100      	movs	r1, #0
    804a:	6011      	str	r1, [r2, #0]
    804c:	6812      	ldr	r2, [r2, #0]
    804e:	b11b      	cbz	r3, 8058 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    8050:	4b1b      	ldr	r3, [pc, #108]	; (80c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc0>)
    8052:	681b      	ldr	r3, [r3, #0]
    8054:	2001      	movs	r0, #1
    8056:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    8058:	f014 0f80 	tst.w	r4, #128	; 0x80
    805c:	d00b      	beq.n	8076 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x76>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    805e:	4b1a      	ldr	r3, [pc, #104]	; (80c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc8>)
    8060:	681b      	ldr	r3, [r3, #0]
    if (ret)
    8062:	b11b      	cbz	r3, 806c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8064:	4a18      	ldr	r2, [pc, #96]	; (80c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc8>)
    8066:	2100      	movs	r1, #0
    8068:	6011      	str	r1, [r2, #0]
    806a:	6812      	ldr	r2, [r2, #0]
    806c:	b11b      	cbz	r3, 8076 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
    806e:	4b17      	ldr	r3, [pc, #92]	; (80cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcc>)
    8070:	681b      	ldr	r3, [r3, #0]
    8072:	2000      	movs	r0, #0
    8074:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    8076:	f414 7f80 	tst.w	r4, #256	; 0x100
    807a:	d00b      	beq.n	8094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    807c:	4b14      	ldr	r3, [pc, #80]	; (80d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd0>)
    807e:	681b      	ldr	r3, [r3, #0]
    if (ret)
    8080:	b11b      	cbz	r3, 808a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8082:	4a13      	ldr	r2, [pc, #76]	; (80d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd0>)
    8084:	2100      	movs	r1, #0
    8086:	6011      	str	r1, [r2, #0]
    8088:	6812      	ldr	r2, [r2, #0]
    808a:	b11b      	cbz	r3, 8094 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x94>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
    808c:	4b0f      	ldr	r3, [pc, #60]	; (80cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcc>)
    808e:	681b      	ldr	r3, [r3, #0]
    8090:	2001      	movs	r0, #1
    8092:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    8094:	f414 7f00 	tst.w	r4, #512	; 0x200
    8098:	d00b      	beq.n	80b2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb2>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    809a:	4b0e      	ldr	r3, [pc, #56]	; (80d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd4>)
    809c:	681b      	ldr	r3, [r3, #0]
    if (ret)
    809e:	b11b      	cbz	r3, 80a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    80a0:	4a0c      	ldr	r2, [pc, #48]	; (80d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd4>)
    80a2:	2100      	movs	r1, #0
    80a4:	6011      	str	r1, [r2, #0]
    80a6:	6812      	ldr	r2, [r2, #0]
    80a8:	b11b      	cbz	r3, 80b2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb2>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    80aa:	4b08      	ldr	r3, [pc, #32]	; (80cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xcc>)
    80ac:	681b      	ldr	r3, [r3, #0]
    80ae:	2002      	movs	r0, #2
    80b0:	4798      	blx	r3
    }
#endif
}
    80b2:	bd10      	pop	{r4, pc}
    80b4:	40000108 	.word	0x40000108
    80b8:	20001dd0 	.word	0x20001dd0
    80bc:	40000114 	.word	0x40000114
    80c0:	20001dd4 	.word	0x20001dd4
    80c4:	40000118 	.word	0x40000118
    80c8:	4000011c 	.word	0x4000011c
    80cc:	20001dd8 	.word	0x20001dd8
    80d0:	40000120 	.word	0x40000120
    80d4:	40000124 	.word	0x40000124

000080d8 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    80d8:	b508      	push	{r3, lr}
    80da:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    80dc:	4801      	ldr	r0, [pc, #4]	; (80e4 <nrfx_ppi_channel_alloc+0xc>)
    80de:	f7ff f8f7 	bl	72d0 <nrfx_flag32_alloc>
}
    80e2:	bd08      	pop	{r3, pc}
    80e4:	200001b0 	.word	0x200001b0

000080e8 <nrf52_errata_166>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    80e8:	4b03      	ldr	r3, [pc, #12]	; (80f8 <nrf52_errata_166+0x10>)
    80ea:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    80ec:	2b08      	cmp	r3, #8
    80ee:	d001      	beq.n	80f4 <nrf52_errata_166+0xc>
        return false;
    80f0:	2000      	movs	r0, #0
    80f2:	4770      	bx	lr
                        return true;
    80f4:	2001      	movs	r0, #1
}
    80f6:	4770      	bx	lr
    80f8:	10000130 	.word	0x10000130

000080fc <nrf52_errata_171>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    80fc:	4b03      	ldr	r3, [pc, #12]	; (810c <nrf52_errata_171+0x10>)
    80fe:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    8100:	2b08      	cmp	r3, #8
    8102:	d001      	beq.n	8108 <nrf52_errata_171+0xc>
        return false;
    8104:	2000      	movs	r0, #0
    8106:	4770      	bx	lr
                        return true;
    8108:	2001      	movs	r0, #1
}
    810a:	4770      	bx	lr
    810c:	10000130 	.word	0x10000130

00008110 <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8110:	4b08      	ldr	r3, [pc, #32]	; (8134 <nrf52_errata_187+0x24>)
    8112:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    8114:	3304      	adds	r3, #4
    8116:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    8118:	2a08      	cmp	r2, #8
    811a:	d001      	beq.n	8120 <nrf52_errata_187+0x10>
        return false;
    811c:	2000      	movs	r0, #0
    811e:	4770      	bx	lr
                switch(var2)
    8120:	2b00      	cmp	r3, #0
    8122:	d804      	bhi.n	812e <nrf52_errata_187+0x1e>
    8124:	e8df f003 	tbb	[pc, r3]
    8128:	01          	.byte	0x01
    8129:	00          	.byte	0x00
            if (var1 == 0x08)
    812a:	2000      	movs	r0, #0
    812c:	4770      	bx	lr
                        return true;
    812e:	2001      	movs	r0, #1
}
    8130:	4770      	bx	lr
    8132:	bf00      	nop
    8134:	10000130 	.word	0x10000130

00008138 <nrf52_errata_199>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8138:	4b03      	ldr	r3, [pc, #12]	; (8148 <nrf52_errata_199+0x10>)
    813a:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    813c:	2b08      	cmp	r3, #8
    813e:	d001      	beq.n	8144 <nrf52_errata_199+0xc>
        return false;
    8140:	2000      	movs	r0, #0
    8142:	4770      	bx	lr
                        return true;
    8144:	2001      	movs	r0, #1
}
    8146:	4770      	bx	lr
    8148:	10000130 	.word	0x10000130

0000814c <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
    814c:	b500      	push	{lr}
    814e:	b083      	sub	sp, #12
    m_bus_suspend = false;
    8150:	2300      	movs	r3, #0
    8152:	4a09      	ldr	r2, [pc, #36]	; (8178 <ev_usbreset_handler+0x2c>)
    8154:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    8156:	4a09      	ldr	r2, [pc, #36]	; (817c <ev_usbreset_handler+0x30>)
    8158:	7013      	strb	r3, [r2, #0]

    const nrfx_usbd_evt_t evt = {
    815a:	f8ad 3005 	strh.w	r3, [sp, #5]
    815e:	f88d 3007 	strb.w	r3, [sp, #7]
    8162:	2301      	movs	r3, #1
    8164:	f88d 3004 	strb.w	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    8168:	4b05      	ldr	r3, [pc, #20]	; (8180 <ev_usbreset_handler+0x34>)
    816a:	681b      	ldr	r3, [r3, #0]
    816c:	a801      	add	r0, sp, #4
    816e:	4798      	blx	r3
}
    8170:	b003      	add	sp, #12
    8172:	f85d fb04 	ldr.w	pc, [sp], #4
    8176:	bf00      	nop
    8178:	2000253c 	.word	0x2000253c
    817c:	2000253f 	.word	0x2000253f
    8180:	20001fdc 	.word	0x20001fdc

00008184 <ev_sof_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }

static void ev_sof_handler(void)
{
    8184:	b500      	push	{lr}
    8186:	b083      	sub	sp, #12
    nrfx_usbd_evt_t evt =  {
    8188:	2300      	movs	r3, #0
    818a:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
    818e:	4b12      	ldr	r3, [pc, #72]	; (81d8 <ev_sof_handler+0x54>)
    8190:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    8194:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
    8198:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    if (size_isoout == 0)
    819c:	b15b      	cbz	r3, 81b6 <ev_sof_handler+0x32>
    else if ((size_isoout & USBD_SIZE_ISOOUT_ZERO_Msk) ==
    819e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    81a2:	d115      	bne.n	81d0 <ev_sof_handler+0x4c>
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
    };

    /* Process isochronous endpoints */
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    if (nrf_usbd_episoout_size_get(NRF_USBD, NRFX_USBD_EPOUT8) != NRF_USBD_EPISOOUT_NO_DATA)
    81a4:	f1b3 3fff 	cmp.w	r3, #4294967295
    81a8:	d002      	beq.n	81b0 <ev_sof_handler+0x2c>
    {
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    81aa:	f04f 2101 	mov.w	r1, #16777472	; 0x1000100
    81ae:	e004      	b.n	81ba <ev_sof_handler+0x36>
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    81b0:	f44f 7180 	mov.w	r1, #256	; 0x100
    81b4:	e001      	b.n	81ba <ev_sof_handler+0x36>
    81b6:	f44f 7180 	mov.w	r1, #256	; 0x100
    }
    m_ep_ready |= iso_ready_mask;
    81ba:	4a08      	ldr	r2, [pc, #32]	; (81dc <ev_sof_handler+0x58>)
    81bc:	6813      	ldr	r3, [r2, #0]
    81be:	430b      	orrs	r3, r1
    81c0:	6013      	str	r3, [r2, #0]

    m_event_handler(&evt);
    81c2:	4b07      	ldr	r3, [pc, #28]	; (81e0 <ev_sof_handler+0x5c>)
    81c4:	681b      	ldr	r3, [r3, #0]
    81c6:	a801      	add	r0, sp, #4
    81c8:	4798      	blx	r3
}
    81ca:	b003      	add	sp, #12
    81cc:	f85d fb04 	ldr.w	pc, [sp], #4
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    81d0:	f04f 2101 	mov.w	r1, #16777472	; 0x1000100
    81d4:	e7f1      	b.n	81ba <ev_sof_handler+0x36>
    81d6:	bf00      	nop
    81d8:	40027000 	.word	0x40027000
    81dc:	20001eb8 	.word	0x20001eb8
    81e0:	20001fdc 	.word	0x20001fdc

000081e4 <ev_usbevent_handler>:
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
    81e4:	b510      	push	{r4, lr}
    81e6:	b082      	sub	sp, #8
    return p_reg->EVENTCAUSE;
    81e8:	4b23      	ldr	r3, [pc, #140]	; (8278 <ev_usbevent_handler+0x94>)
    81ea:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
    81ee:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    81f2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    81f6:	f414 7f80 	tst.w	r4, #256	; 0x100
    81fa:	d00e      	beq.n	821a <ev_usbevent_handler+0x36>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
    81fc:	4b1f      	ldr	r3, [pc, #124]	; (827c <ev_usbevent_handler+0x98>)
    81fe:	2201      	movs	r2, #1
    8200:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    8202:	2300      	movs	r3, #0
    8204:	f8ad 3005 	strh.w	r3, [sp, #5]
    8208:	f88d 3007 	strb.w	r3, [sp, #7]
    820c:	2302      	movs	r3, #2
    820e:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
    8212:	4b1b      	ldr	r3, [pc, #108]	; (8280 <ev_usbevent_handler+0x9c>)
    8214:	681b      	ldr	r3, [r3, #0]
    8216:	a801      	add	r0, sp, #4
    8218:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    821a:	f414 7f00 	tst.w	r4, #512	; 0x200
    821e:	d00d      	beq.n	823c <ev_usbevent_handler+0x58>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
    8220:	2300      	movs	r3, #0
    8222:	4a16      	ldr	r2, [pc, #88]	; (827c <ev_usbevent_handler+0x98>)
    8224:	7013      	strb	r3, [r2, #0]
        const nrfx_usbd_evt_t evt = {
    8226:	f8ad 3005 	strh.w	r3, [sp, #5]
    822a:	f88d 3007 	strb.w	r3, [sp, #7]
    822e:	2303      	movs	r3, #3
    8230:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
    8234:	4b12      	ldr	r3, [pc, #72]	; (8280 <ev_usbevent_handler+0x9c>)
    8236:	681b      	ldr	r3, [r3, #0]
    8238:	a801      	add	r0, sp, #4
    823a:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    823c:	f414 6f80 	tst.w	r4, #1024	; 0x400
    8240:	d017      	beq.n	8272 <ev_usbevent_handler+0x8e>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
    8242:	4b0e      	ldr	r3, [pc, #56]	; (827c <ev_usbevent_handler+0x98>)
    8244:	781b      	ldrb	r3, [r3, #0]
    8246:	b1a3      	cbz	r3, 8272 <ev_usbevent_handler+0x8e>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
    8248:	2300      	movs	r3, #0
    824a:	4a0c      	ldr	r2, [pc, #48]	; (827c <ev_usbevent_handler+0x98>)
    824c:	7013      	strb	r3, [r2, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    824e:	2101      	movs	r1, #1
    8250:	4a09      	ldr	r2, [pc, #36]	; (8278 <ev_usbevent_handler+0x94>)
    8252:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    8256:	3258      	adds	r2, #88	; 0x58
    8258:	6011      	str	r1, [r2, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    825a:	6812      	ldr	r2, [r2, #0]

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
    825c:	f8ad 3005 	strh.w	r3, [sp, #5]
    8260:	f88d 3007 	strb.w	r3, [sp, #7]
    8264:	2304      	movs	r3, #4
    8266:	f88d 3004 	strb.w	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
    826a:	4b05      	ldr	r3, [pc, #20]	; (8280 <ev_usbevent_handler+0x9c>)
    826c:	681b      	ldr	r3, [r3, #0]
    826e:	a801      	add	r0, sp, #4
    8270:	4798      	blx	r3
        }
    }
}
    8272:	b002      	add	sp, #8
    8274:	bd10      	pop	{r4, pc}
    8276:	bf00      	nop
    8278:	40027000 	.word	0x40027000
    827c:	2000253c 	.word	0x2000253c
    8280:	20001fdc 	.word	0x20001fdc

00008284 <usbd_enable>:

/**
 * @brief Enable USBD peripheral.
 */
static void usbd_enable(void)
{
    8284:	b510      	push	{r4, lr}
}

/* Errata: USB cannot be enabled. **/
static inline bool nrfx_usbd_errata_187(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    8286:	f7ff ff43 	bl	8110 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    828a:	b1b8      	cbz	r0, 82bc <usbd_enable+0x38>
	__asm__ volatile(
    828c:	f04f 0220 	mov.w	r2, #32
    8290:	f3ef 8311 	mrs	r3, BASEPRI
    8294:	f382 8812 	msr	BASEPRI_MAX, r2
    8298:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    829c:	4a41      	ldr	r2, [pc, #260]	; (83a4 <usbd_enable+0x120>)
    829e:	6812      	ldr	r2, [r2, #0]
    82a0:	2a00      	cmp	r2, #0
    82a2:	d16f      	bne.n	8384 <usbd_enable+0x100>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    82a4:	4a3f      	ldr	r2, [pc, #252]	; (83a4 <usbd_enable+0x120>)
    82a6:	f249 3175 	movw	r1, #37749	; 0x9375
    82aa:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    82ac:	483e      	ldr	r0, [pc, #248]	; (83a8 <usbd_enable+0x124>)
    82ae:	2403      	movs	r4, #3
    82b0:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    82b2:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    82b4:	f383 8811 	msr	BASEPRI, r3
    82b8:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_171();
    82bc:	f7ff ff1e 	bl	80fc <nrf52_errata_171>
    {
        usbd_errata_187_211_begin();
    }

    if (nrfx_usbd_errata_171())
    82c0:	b1b8      	cbz	r0, 82f2 <usbd_enable+0x6e>
	__asm__ volatile(
    82c2:	f04f 0220 	mov.w	r2, #32
    82c6:	f3ef 8311 	mrs	r3, BASEPRI
    82ca:	f382 8812 	msr	BASEPRI_MAX, r2
    82ce:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    82d2:	4a34      	ldr	r2, [pc, #208]	; (83a4 <usbd_enable+0x120>)
    82d4:	6812      	ldr	r2, [r2, #0]
    82d6:	2a00      	cmp	r2, #0
    82d8:	d158      	bne.n	838c <usbd_enable+0x108>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    82da:	4a32      	ldr	r2, [pc, #200]	; (83a4 <usbd_enable+0x120>)
    82dc:	f249 3175 	movw	r1, #37749	; 0x9375
    82e0:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    82e2:	4832      	ldr	r0, [pc, #200]	; (83ac <usbd_enable+0x128>)
    82e4:	24c0      	movs	r4, #192	; 0xc0
    82e6:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    82e8:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    82ea:	f383 8811 	msr	BASEPRI, r3
    82ee:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    82f2:	4b2f      	ldr	r3, [pc, #188]	; (83b0 <usbd_enable+0x12c>)
    82f4:	2201      	movs	r2, #1
    82f6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    82fa:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
    82fe:	4b2c      	ldr	r3, [pc, #176]	; (83b0 <usbd_enable+0x12c>)
    8300:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
    8304:	f413 6f00 	tst.w	r3, #2048	; 0x800
    8308:	d0f9      	beq.n	82fe <usbd_enable+0x7a>
    p_reg->EVENTCAUSE = flags;
    830a:	4b29      	ldr	r3, [pc, #164]	; (83b0 <usbd_enable+0x12c>)
    830c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    8310:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    8314:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    8318:	f7ff fef0 	bl	80fc <nrf52_errata_171>
    nrf_usbd_enable(NRF_USBD);

    /* Waiting for peripheral to enable, this should take a few us */
    usbd_eventcause_wait_and_clear(NRF_USBD_EVENTCAUSE_READY_MASK);

    if (nrfx_usbd_errata_171())
    831c:	b1b8      	cbz	r0, 834e <usbd_enable+0xca>
	__asm__ volatile(
    831e:	f04f 0220 	mov.w	r2, #32
    8322:	f3ef 8311 	mrs	r3, BASEPRI
    8326:	f382 8812 	msr	BASEPRI_MAX, r2
    832a:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    832e:	4a1d      	ldr	r2, [pc, #116]	; (83a4 <usbd_enable+0x120>)
    8330:	6812      	ldr	r2, [r2, #0]
    8332:	2a00      	cmp	r2, #0
    8334:	d12e      	bne.n	8394 <usbd_enable+0x110>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    8336:	4a1b      	ldr	r2, [pc, #108]	; (83a4 <usbd_enable+0x120>)
    8338:	f249 3175 	movw	r1, #37749	; 0x9375
    833c:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    833e:	481b      	ldr	r0, [pc, #108]	; (83ac <usbd_enable+0x128>)
    8340:	2400      	movs	r4, #0
    8342:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    8344:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    8346:	f383 8811 	msr	BASEPRI, r3
    834a:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    834e:	f7ff fedf 	bl	8110 <nrf52_errata_187>
    {
        usbd_errata_171_end();
    }

    if (nrfx_usbd_errata_187())
    8352:	b1b0      	cbz	r0, 8382 <usbd_enable+0xfe>
	__asm__ volatile(
    8354:	f04f 0220 	mov.w	r2, #32
    8358:	f3ef 8311 	mrs	r3, BASEPRI
    835c:	f382 8812 	msr	BASEPRI_MAX, r2
    8360:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    8364:	4a0f      	ldr	r2, [pc, #60]	; (83a4 <usbd_enable+0x120>)
    8366:	6812      	ldr	r2, [r2, #0]
    8368:	b9c2      	cbnz	r2, 839c <usbd_enable+0x118>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    836a:	4a0e      	ldr	r2, [pc, #56]	; (83a4 <usbd_enable+0x120>)
    836c:	f249 3175 	movw	r1, #37749	; 0x9375
    8370:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    8372:	480d      	ldr	r0, [pc, #52]	; (83a8 <usbd_enable+0x124>)
    8374:	2400      	movs	r4, #0
    8376:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    8378:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    837a:	f383 8811 	msr	BASEPRI, r3
    837e:	f3bf 8f6f 	isb	sy
    {
        usbd_errata_187_211_end();
    }
}
    8382:	bd10      	pop	{r4, pc}
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    8384:	4a08      	ldr	r2, [pc, #32]	; (83a8 <usbd_enable+0x124>)
    8386:	2103      	movs	r1, #3
    8388:	6011      	str	r1, [r2, #0]
    838a:	e793      	b.n	82b4 <usbd_enable+0x30>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    838c:	4a07      	ldr	r2, [pc, #28]	; (83ac <usbd_enable+0x128>)
    838e:	21c0      	movs	r1, #192	; 0xc0
    8390:	6011      	str	r1, [r2, #0]
    8392:	e7aa      	b.n	82ea <usbd_enable+0x66>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    8394:	4a05      	ldr	r2, [pc, #20]	; (83ac <usbd_enable+0x128>)
    8396:	2100      	movs	r1, #0
    8398:	6011      	str	r1, [r2, #0]
    839a:	e7d4      	b.n	8346 <usbd_enable+0xc2>
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    839c:	4a02      	ldr	r2, [pc, #8]	; (83a8 <usbd_enable+0x124>)
    839e:	2100      	movs	r1, #0
    83a0:	6011      	str	r1, [r2, #0]
    83a2:	e7ea      	b.n	837a <usbd_enable+0xf6>
    83a4:	4006ec00 	.word	0x4006ec00
    83a8:	4006ed14 	.word	0x4006ed14
    83ac:	4006ec14 	.word	0x4006ec14
    83b0:	40027000 	.word	0x40027000

000083b4 <usbd_ep_data_handler>:
{
    83b4:	b530      	push	{r4, r5, lr}
    83b6:	b083      	sub	sp, #12
    83b8:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
    83ba:	2501      	movs	r5, #1
    83bc:	408d      	lsls	r5, r1
    83be:	4a59      	ldr	r2, [pc, #356]	; (8524 <usbd_ep_data_handler+0x170>)
    83c0:	6813      	ldr	r3, [r2, #0]
    83c2:	432b      	orrs	r3, r5
    83c4:	6013      	str	r3, [r2, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    83c6:	f010 0f80 	tst.w	r0, #128	; 0x80
    83ca:	d111      	bne.n	83f0 <usbd_ep_data_handler+0x3c>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    83cc:	4b56      	ldr	r3, [pc, #344]	; (8528 <usbd_ep_data_handler+0x174>)
    83ce:	681b      	ldr	r3, [r3, #0]
    83d0:	421d      	tst	r5, r3
    83d2:	d10b      	bne.n	83ec <usbd_ep_data_handler+0x38>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    83d4:	2306      	movs	r3, #6
    83d6:	f88d 3004 	strb.w	r3, [sp, #4]
    83da:	f88d 0006 	strb.w	r0, [sp, #6]
    83de:	2301      	movs	r3, #1
    83e0:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    83e4:	4b51      	ldr	r3, [pc, #324]	; (852c <usbd_ep_data_handler+0x178>)
    83e6:	681b      	ldr	r3, [r3, #0]
    83e8:	a801      	add	r0, sp, #4
    83ea:	4798      	blx	r3
}
    83ec:	b003      	add	sp, #12
    83ee:	bd30      	pop	{r4, r5, pc}
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    83f0:	f000 030f 	and.w	r3, r0, #15
    83f4:	4a4e      	ldr	r2, [pc, #312]	; (8530 <usbd_ep_data_handler+0x17c>)
    83f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    83fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    83fe:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    8402:	681a      	ldr	r2, [r3, #0]
    if (ret)
    8404:	b112      	cbz	r2, 840c <usbd_ep_data_handler+0x58>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    8406:	2100      	movs	r1, #0
    8408:	6019      	str	r1, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    840a:	681b      	ldr	r3, [r3, #0]
        if (nrf_usbd_event_get_and_clear(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)))
    840c:	2a00      	cmp	r2, #0
    840e:	d047      	beq.n	84a0 <usbd_ep_data_handler+0xec>
            if (ep != NRFX_USBD_EPIN0)
    8410:	2c80      	cmp	r4, #128	; 0x80
    8412:	d058      	beq.n	84c6 <usbd_ep_data_handler+0x112>
}

/* Errata: USBD cannot receive tasks during DMA. **/
static inline bool nrfx_usbd_errata_199(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
    8414:	f7ff fe90 	bl	8138 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    8418:	b110      	cbz	r0, 8420 <usbd_ep_data_handler+0x6c>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    841a:	4b46      	ldr	r3, [pc, #280]	; (8534 <usbd_ep_data_handler+0x180>)
    841c:	2200      	movs	r2, #0
    841e:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    8420:	4b45      	ldr	r3, [pc, #276]	; (8538 <usbd_ep_data_handler+0x184>)
    8422:	2200      	movs	r2, #0
    8424:	701a      	strb	r2, [r3, #0]
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8426:	b263      	sxtb	r3, r4
    8428:	4293      	cmp	r3, r2
    842a:	db21      	blt.n	8470 <usbd_ep_data_handler+0xbc>
    842c:	4943      	ldr	r1, [pc, #268]	; (853c <usbd_ep_data_handler+0x188>)
        NRF_USBD_EP_NR_GET(ep));
    842e:	f004 020f 	and.w	r2, r4, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8432:	0110      	lsls	r0, r2, #4
    8434:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8438:	7b92      	ldrb	r2, [r2, #14]
    843a:	2a03      	cmp	r2, #3
    843c:	d01a      	beq.n	8474 <usbd_ep_data_handler+0xc0>
    else if (p_state->handler.feeder == NULL)
    843e:	580a      	ldr	r2, [r1, r0]
    8440:	bb72      	cbnz	r2, 84a0 <usbd_ep_data_handler+0xec>
    return NRFX_USBD_EP_BITPOS(ep);
    8442:	2b00      	cmp	r3, #0
    8444:	db00      	blt.n	8448 <usbd_ep_data_handler+0x94>
    8446:	2210      	movs	r2, #16
    8448:	f003 030f 	and.w	r3, r3, #15
    844c:	4413      	add	r3, r2
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    844e:	2201      	movs	r2, #1
    8450:	fa02 f303 	lsl.w	r3, r2, r3
    8454:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8456:	4a34      	ldr	r2, [pc, #208]	; (8528 <usbd_ep_data_handler+0x174>)
    8458:	f3bf 8f5b 	dmb	ish
    845c:	e852 1f00 	ldrex	r1, [r2]
    8460:	4019      	ands	r1, r3
    8462:	e842 1000 	strex	r0, r1, [r2]
    8466:	2800      	cmp	r0, #0
    8468:	d1f8      	bne.n	845c <usbd_ep_data_handler+0xa8>
    846a:	f3bf 8f5b 	dmb	ish
}
    846e:	e017      	b.n	84a0 <usbd_ep_data_handler+0xec>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8470:	4933      	ldr	r1, [pc, #204]	; (8540 <usbd_ep_data_handler+0x18c>)
    8472:	e7dc      	b.n	842e <usbd_ep_data_handler+0x7a>
    return NRFX_USBD_EP_BITPOS(ep);
    8474:	2b00      	cmp	r3, #0
    8476:	db24      	blt.n	84c2 <usbd_ep_data_handler+0x10e>
    8478:	2210      	movs	r2, #16
    847a:	f003 030f 	and.w	r3, r3, #15
    847e:	4413      	add	r3, r2
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8480:	2201      	movs	r2, #1
    8482:	fa02 f303 	lsl.w	r3, r2, r3
    8486:	43db      	mvns	r3, r3
    8488:	4a27      	ldr	r2, [pc, #156]	; (8528 <usbd_ep_data_handler+0x174>)
    848a:	f3bf 8f5b 	dmb	ish
    848e:	e852 1f00 	ldrex	r1, [r2]
    8492:	4019      	ands	r1, r3
    8494:	e842 1000 	strex	r0, r1, [r2]
    8498:	2800      	cmp	r0, #0
    849a:	d1f8      	bne.n	848e <usbd_ep_data_handler+0xda>
    849c:	f3bf 8f5b 	dmb	ish
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    84a0:	4b21      	ldr	r3, [pc, #132]	; (8528 <usbd_ep_data_handler+0x174>)
    84a2:	681b      	ldr	r3, [r3, #0]
    84a4:	421d      	tst	r5, r3
    84a6:	d1a1      	bne.n	83ec <usbd_ep_data_handler+0x38>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    84a8:	2306      	movs	r3, #6
    84aa:	f88d 3004 	strb.w	r3, [sp, #4]
    84ae:	f88d 4006 	strb.w	r4, [sp, #6]
    84b2:	2300      	movs	r3, #0
    84b4:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    84b8:	4b1c      	ldr	r3, [pc, #112]	; (852c <usbd_ep_data_handler+0x178>)
    84ba:	681b      	ldr	r3, [r3, #0]
    84bc:	a801      	add	r0, sp, #4
    84be:	4798      	blx	r3
    84c0:	e794      	b.n	83ec <usbd_ep_data_handler+0x38>
    return NRFX_USBD_EP_BITPOS(ep);
    84c2:	2200      	movs	r2, #0
    84c4:	e7d9      	b.n	847a <usbd_ep_data_handler+0xc6>
    84c6:	f7ff fe37 	bl	8138 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    84ca:	b110      	cbz	r0, 84d2 <usbd_ep_data_handler+0x11e>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    84cc:	4b19      	ldr	r3, [pc, #100]	; (8534 <usbd_ep_data_handler+0x180>)
    84ce:	2200      	movs	r2, #0
    84d0:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    84d2:	4b19      	ldr	r3, [pc, #100]	; (8538 <usbd_ep_data_handler+0x184>)
    84d4:	2200      	movs	r2, #0
    84d6:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    84d8:	4b18      	ldr	r3, [pc, #96]	; (853c <usbd_ep_data_handler+0x188>)
    84da:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
    84de:	2b03      	cmp	r3, #3
    84e0:	d012      	beq.n	8508 <usbd_ep_data_handler+0x154>
    else if (p_state->handler.feeder == NULL)
    84e2:	4b16      	ldr	r3, [pc, #88]	; (853c <usbd_ep_data_handler+0x188>)
    84e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    84e8:	2b00      	cmp	r3, #0
    84ea:	d1d9      	bne.n	84a0 <usbd_ep_data_handler+0xec>
    84ec:	4b0e      	ldr	r3, [pc, #56]	; (8528 <usbd_ep_data_handler+0x174>)
    84ee:	f3bf 8f5b 	dmb	ish
    84f2:	e853 2f00 	ldrex	r2, [r3]
    84f6:	f022 0201 	bic.w	r2, r2, #1
    84fa:	e843 2100 	strex	r1, r2, [r3]
    84fe:	2900      	cmp	r1, #0
    8500:	d1f7      	bne.n	84f2 <usbd_ep_data_handler+0x13e>
    8502:	f3bf 8f5b 	dmb	ish
}
    8506:	e7cb      	b.n	84a0 <usbd_ep_data_handler+0xec>
    8508:	4b07      	ldr	r3, [pc, #28]	; (8528 <usbd_ep_data_handler+0x174>)
    850a:	f3bf 8f5b 	dmb	ish
    850e:	e853 2f00 	ldrex	r2, [r3]
    8512:	f022 0201 	bic.w	r2, r2, #1
    8516:	e843 2100 	strex	r1, r2, [r3]
    851a:	2900      	cmp	r1, #0
    851c:	d1f7      	bne.n	850e <usbd_ep_data_handler+0x15a>
    851e:	f3bf 8f5b 	dmb	ish
    8522:	e7bd      	b.n	84a0 <usbd_ep_data_handler+0xec>
    8524:	20001eb8 	.word	0x20001eb8
    8528:	20001e48 	.word	0x20001e48
    852c:	20001fdc 	.word	0x20001fdc
    8530:	0000fca8 	.word	0x0000fca8
    8534:	40027c1c 	.word	0x40027c1c
    8538:	2000253d 	.word	0x2000253d
    853c:	20001ebc 	.word	0x20001ebc
    8540:	20001f4c 	.word	0x20001f4c

00008544 <ev_setup_data_handler>:
{
    8544:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    8546:	4b07      	ldr	r3, [pc, #28]	; (8564 <ev_setup_data_handler+0x20>)
    8548:	7818      	ldrb	r0, [r3, #0]
    return NRFX_USBD_EP_BITPOS(ep);
    854a:	f993 3000 	ldrsb.w	r3, [r3]
    854e:	2b00      	cmp	r3, #0
    8550:	db06      	blt.n	8560 <ev_setup_data_handler+0x1c>
    8552:	2110      	movs	r1, #16
    8554:	f003 030f 	and.w	r3, r3, #15
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    8558:	4419      	add	r1, r3
    855a:	f7ff ff2b 	bl	83b4 <usbd_ep_data_handler>
}
    855e:	bd08      	pop	{r3, pc}
    return NRFX_USBD_EP_BITPOS(ep);
    8560:	2100      	movs	r1, #0
    8562:	e7f7      	b.n	8554 <ev_setup_data_handler+0x10>
    8564:	2000253f 	.word	0x2000253f

00008568 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    8568:	b500      	push	{lr}
    856a:	b083      	sub	sp, #12
    856c:	f7ff fde4 	bl	8138 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    8570:	b110      	cbz	r0, 8578 <ev_dma_epout8_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    8572:	4b16      	ldr	r3, [pc, #88]	; (85cc <ev_dma_epout8_handler+0x64>)
    8574:	2200      	movs	r2, #0
    8576:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    8578:	4b15      	ldr	r3, [pc, #84]	; (85d0 <ev_dma_epout8_handler+0x68>)
    857a:	2200      	movs	r2, #0
    857c:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    857e:	4b15      	ldr	r3, [pc, #84]	; (85d4 <ev_dma_epout8_handler+0x6c>)
    8580:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
    8584:	2b03      	cmp	r3, #3
    8586:	d01d      	beq.n	85c4 <ev_dma_epout8_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
    8588:	4b12      	ldr	r3, [pc, #72]	; (85d4 <ev_dma_epout8_handler+0x6c>)
    858a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    858e:	b9cb      	cbnz	r3, 85c4 <ev_dma_epout8_handler+0x5c>
    8590:	4b11      	ldr	r3, [pc, #68]	; (85d8 <ev_dma_epout8_handler+0x70>)
    8592:	f3bf 8f5b 	dmb	ish
    8596:	e853 2f00 	ldrex	r2, [r3]
    859a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    859e:	e843 2100 	strex	r1, r2, [r3]
    85a2:	2900      	cmp	r1, #0
    85a4:	d1f7      	bne.n	8596 <ev_dma_epout8_handler+0x2e>
    85a6:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    85aa:	2306      	movs	r3, #6
    85ac:	f88d 3004 	strb.w	r3, [sp, #4]
    85b0:	2308      	movs	r3, #8
    85b2:	f88d 3006 	strb.w	r3, [sp, #6]
    85b6:	2300      	movs	r3, #0
    85b8:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    85bc:	4b07      	ldr	r3, [pc, #28]	; (85dc <ev_dma_epout8_handler+0x74>)
    85be:	681b      	ldr	r3, [r3, #0]
    85c0:	a801      	add	r0, sp, #4
    85c2:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    85c4:	b003      	add	sp, #12
    85c6:	f85d fb04 	ldr.w	pc, [sp], #4
    85ca:	bf00      	nop
    85cc:	40027c1c 	.word	0x40027c1c
    85d0:	2000253d 	.word	0x2000253d
    85d4:	20001ebc 	.word	0x20001ebc
    85d8:	20001e48 	.word	0x20001e48
    85dc:	20001fdc 	.word	0x20001fdc

000085e0 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    85e0:	b500      	push	{lr}
    85e2:	b083      	sub	sp, #12
    85e4:	f7ff fda8 	bl	8138 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    85e8:	b110      	cbz	r0, 85f0 <ev_dma_epin8_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    85ea:	4b1d      	ldr	r3, [pc, #116]	; (8660 <ev_dma_epin8_handler+0x80>)
    85ec:	2200      	movs	r2, #0
    85ee:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    85f0:	4b1c      	ldr	r3, [pc, #112]	; (8664 <ev_dma_epin8_handler+0x84>)
    85f2:	2200      	movs	r2, #0
    85f4:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    85f6:	4b1c      	ldr	r3, [pc, #112]	; (8668 <ev_dma_epin8_handler+0x88>)
    85f8:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
    85fc:	2b03      	cmp	r3, #3
    85fe:	d01e      	beq.n	863e <ev_dma_epin8_handler+0x5e>
    else if (p_state->handler.feeder == NULL)
    8600:	4b19      	ldr	r3, [pc, #100]	; (8668 <ev_dma_epin8_handler+0x88>)
    8602:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    8606:	bb3b      	cbnz	r3, 8658 <ev_dma_epin8_handler+0x78>
    8608:	4b18      	ldr	r3, [pc, #96]	; (866c <ev_dma_epin8_handler+0x8c>)
    860a:	f3bf 8f5b 	dmb	ish
    860e:	e853 2f00 	ldrex	r2, [r3]
    8612:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    8616:	e843 2100 	strex	r1, r2, [r3]
    861a:	2900      	cmp	r1, #0
    861c:	d1f7      	bne.n	860e <ev_dma_epin8_handler+0x2e>
    861e:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8622:	2306      	movs	r3, #6
    8624:	f88d 3004 	strb.w	r3, [sp, #4]
    8628:	2388      	movs	r3, #136	; 0x88
    862a:	f88d 3006 	strb.w	r3, [sp, #6]
    862e:	2300      	movs	r3, #0
    8630:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    8634:	4b0e      	ldr	r3, [pc, #56]	; (8670 <ev_dma_epin8_handler+0x90>)
    8636:	681b      	ldr	r3, [r3, #0]
    8638:	a801      	add	r0, sp, #4
    863a:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    863c:	e00c      	b.n	8658 <ev_dma_epin8_handler+0x78>
    863e:	4b0b      	ldr	r3, [pc, #44]	; (866c <ev_dma_epin8_handler+0x8c>)
    8640:	f3bf 8f5b 	dmb	ish
    8644:	e853 2f00 	ldrex	r2, [r3]
    8648:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    864c:	e843 2100 	strex	r1, r2, [r3]
    8650:	2900      	cmp	r1, #0
    8652:	d1f7      	bne.n	8644 <ev_dma_epin8_handler+0x64>
    8654:	f3bf 8f5b 	dmb	ish
    8658:	b003      	add	sp, #12
    865a:	f85d fb04 	ldr.w	pc, [sp], #4
    865e:	bf00      	nop
    8660:	40027c1c 	.word	0x40027c1c
    8664:	2000253d 	.word	0x2000253d
    8668:	20001ebc 	.word	0x20001ebc
    866c:	20001e48 	.word	0x20001e48
    8670:	20001fdc 	.word	0x20001fdc

00008674 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    8674:	b508      	push	{r3, lr}
    8676:	f7ff fd5f 	bl	8138 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    867a:	b110      	cbz	r0, 8682 <ev_dma_epin0_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    867c:	4b15      	ldr	r3, [pc, #84]	; (86d4 <ev_dma_epin0_handler+0x60>)
    867e:	2200      	movs	r2, #0
    8680:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    8682:	4b15      	ldr	r3, [pc, #84]	; (86d8 <ev_dma_epin0_handler+0x64>)
    8684:	2200      	movs	r2, #0
    8686:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8688:	4b14      	ldr	r3, [pc, #80]	; (86dc <ev_dma_epin0_handler+0x68>)
    868a:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
    868e:	2b03      	cmp	r3, #3
    8690:	d004      	beq.n	869c <ev_dma_epin0_handler+0x28>
    else if (p_state->handler.feeder == NULL)
    8692:	4b12      	ldr	r3, [pc, #72]	; (86dc <ev_dma_epin0_handler+0x68>)
    8694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8698:	b173      	cbz	r3, 86b8 <ev_dma_epin0_handler+0x44>
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    869a:	bd08      	pop	{r3, pc}
    869c:	4b10      	ldr	r3, [pc, #64]	; (86e0 <ev_dma_epin0_handler+0x6c>)
    869e:	f3bf 8f5b 	dmb	ish
    86a2:	e853 2f00 	ldrex	r2, [r3]
    86a6:	f022 0201 	bic.w	r2, r2, #1
    86aa:	e843 2100 	strex	r1, r2, [r3]
    86ae:	2900      	cmp	r1, #0
    86b0:	d1f7      	bne.n	86a2 <ev_dma_epin0_handler+0x2e>
    86b2:	f3bf 8f5b 	dmb	ish
    86b6:	e7f0      	b.n	869a <ev_dma_epin0_handler+0x26>
    86b8:	4b09      	ldr	r3, [pc, #36]	; (86e0 <ev_dma_epin0_handler+0x6c>)
    86ba:	f3bf 8f5b 	dmb	ish
    86be:	e853 2f00 	ldrex	r2, [r3]
    86c2:	f022 0201 	bic.w	r2, r2, #1
    86c6:	e843 2100 	strex	r1, r2, [r3]
    86ca:	2900      	cmp	r1, #0
    86cc:	d1f7      	bne.n	86be <ev_dma_epin0_handler+0x4a>
    86ce:	f3bf 8f5b 	dmb	ish
    86d2:	e7e2      	b.n	869a <ev_dma_epin0_handler+0x26>
    86d4:	40027c1c 	.word	0x40027c1c
    86d8:	2000253d 	.word	0x2000253d
    86dc:	20001ebc 	.word	0x20001ebc
    86e0:	20001e48 	.word	0x20001e48

000086e4 <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    86e4:	b508      	push	{r3, lr}
    86e6:	f7ff fd27 	bl	8138 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    86ea:	b110      	cbz	r0, 86f2 <ev_dma_epin7_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    86ec:	4b15      	ldr	r3, [pc, #84]	; (8744 <ev_dma_epin7_handler+0x60>)
    86ee:	2200      	movs	r2, #0
    86f0:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    86f2:	4b15      	ldr	r3, [pc, #84]	; (8748 <ev_dma_epin7_handler+0x64>)
    86f4:	2200      	movs	r2, #0
    86f6:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    86f8:	4b14      	ldr	r3, [pc, #80]	; (874c <ev_dma_epin7_handler+0x68>)
    86fa:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
    86fe:	2b03      	cmp	r3, #3
    8700:	d011      	beq.n	8726 <ev_dma_epin7_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    8702:	4b12      	ldr	r3, [pc, #72]	; (874c <ev_dma_epin7_handler+0x68>)
    8704:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    8708:	b9d3      	cbnz	r3, 8740 <ev_dma_epin7_handler+0x5c>
    870a:	4b11      	ldr	r3, [pc, #68]	; (8750 <ev_dma_epin7_handler+0x6c>)
    870c:	f3bf 8f5b 	dmb	ish
    8710:	e853 2f00 	ldrex	r2, [r3]
    8714:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    8718:	e843 2100 	strex	r1, r2, [r3]
    871c:	2900      	cmp	r1, #0
    871e:	d1f7      	bne.n	8710 <ev_dma_epin7_handler+0x2c>
    8720:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    8724:	e00c      	b.n	8740 <ev_dma_epin7_handler+0x5c>
    8726:	4b0a      	ldr	r3, [pc, #40]	; (8750 <ev_dma_epin7_handler+0x6c>)
    8728:	f3bf 8f5b 	dmb	ish
    872c:	e853 2f00 	ldrex	r2, [r3]
    8730:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    8734:	e843 2100 	strex	r1, r2, [r3]
    8738:	2900      	cmp	r1, #0
    873a:	d1f7      	bne.n	872c <ev_dma_epin7_handler+0x48>
    873c:	f3bf 8f5b 	dmb	ish
    8740:	bd08      	pop	{r3, pc}
    8742:	bf00      	nop
    8744:	40027c1c 	.word	0x40027c1c
    8748:	2000253d 	.word	0x2000253d
    874c:	20001ebc 	.word	0x20001ebc
    8750:	20001e48 	.word	0x20001e48

00008754 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    8754:	b508      	push	{r3, lr}
    8756:	f7ff fcef 	bl	8138 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    875a:	b110      	cbz	r0, 8762 <ev_dma_epin5_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    875c:	4b15      	ldr	r3, [pc, #84]	; (87b4 <ev_dma_epin5_handler+0x60>)
    875e:	2200      	movs	r2, #0
    8760:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    8762:	4b15      	ldr	r3, [pc, #84]	; (87b8 <ev_dma_epin5_handler+0x64>)
    8764:	2200      	movs	r2, #0
    8766:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8768:	4b14      	ldr	r3, [pc, #80]	; (87bc <ev_dma_epin5_handler+0x68>)
    876a:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
    876e:	2b03      	cmp	r3, #3
    8770:	d011      	beq.n	8796 <ev_dma_epin5_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    8772:	4b12      	ldr	r3, [pc, #72]	; (87bc <ev_dma_epin5_handler+0x68>)
    8774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    8778:	b9d3      	cbnz	r3, 87b0 <ev_dma_epin5_handler+0x5c>
    877a:	4b11      	ldr	r3, [pc, #68]	; (87c0 <ev_dma_epin5_handler+0x6c>)
    877c:	f3bf 8f5b 	dmb	ish
    8780:	e853 2f00 	ldrex	r2, [r3]
    8784:	f022 0220 	bic.w	r2, r2, #32
    8788:	e843 2100 	strex	r1, r2, [r3]
    878c:	2900      	cmp	r1, #0
    878e:	d1f7      	bne.n	8780 <ev_dma_epin5_handler+0x2c>
    8790:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    8794:	e00c      	b.n	87b0 <ev_dma_epin5_handler+0x5c>
    8796:	4b0a      	ldr	r3, [pc, #40]	; (87c0 <ev_dma_epin5_handler+0x6c>)
    8798:	f3bf 8f5b 	dmb	ish
    879c:	e853 2f00 	ldrex	r2, [r3]
    87a0:	f022 0220 	bic.w	r2, r2, #32
    87a4:	e843 2100 	strex	r1, r2, [r3]
    87a8:	2900      	cmp	r1, #0
    87aa:	d1f7      	bne.n	879c <ev_dma_epin5_handler+0x48>
    87ac:	f3bf 8f5b 	dmb	ish
    87b0:	bd08      	pop	{r3, pc}
    87b2:	bf00      	nop
    87b4:	40027c1c 	.word	0x40027c1c
    87b8:	2000253d 	.word	0x2000253d
    87bc:	20001ebc 	.word	0x20001ebc
    87c0:	20001e48 	.word	0x20001e48

000087c4 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    87c4:	b508      	push	{r3, lr}
    87c6:	f7ff fcb7 	bl	8138 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    87ca:	b110      	cbz	r0, 87d2 <ev_dma_epin6_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    87cc:	4b15      	ldr	r3, [pc, #84]	; (8824 <ev_dma_epin6_handler+0x60>)
    87ce:	2200      	movs	r2, #0
    87d0:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    87d2:	4b15      	ldr	r3, [pc, #84]	; (8828 <ev_dma_epin6_handler+0x64>)
    87d4:	2200      	movs	r2, #0
    87d6:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    87d8:	4b14      	ldr	r3, [pc, #80]	; (882c <ev_dma_epin6_handler+0x68>)
    87da:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
    87de:	2b03      	cmp	r3, #3
    87e0:	d011      	beq.n	8806 <ev_dma_epin6_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    87e2:	4b12      	ldr	r3, [pc, #72]	; (882c <ev_dma_epin6_handler+0x68>)
    87e4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    87e8:	b9d3      	cbnz	r3, 8820 <ev_dma_epin6_handler+0x5c>
    87ea:	4b11      	ldr	r3, [pc, #68]	; (8830 <ev_dma_epin6_handler+0x6c>)
    87ec:	f3bf 8f5b 	dmb	ish
    87f0:	e853 2f00 	ldrex	r2, [r3]
    87f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    87f8:	e843 2100 	strex	r1, r2, [r3]
    87fc:	2900      	cmp	r1, #0
    87fe:	d1f7      	bne.n	87f0 <ev_dma_epin6_handler+0x2c>
    8800:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    8804:	e00c      	b.n	8820 <ev_dma_epin6_handler+0x5c>
    8806:	4b0a      	ldr	r3, [pc, #40]	; (8830 <ev_dma_epin6_handler+0x6c>)
    8808:	f3bf 8f5b 	dmb	ish
    880c:	e853 2f00 	ldrex	r2, [r3]
    8810:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    8814:	e843 2100 	strex	r1, r2, [r3]
    8818:	2900      	cmp	r1, #0
    881a:	d1f7      	bne.n	880c <ev_dma_epin6_handler+0x48>
    881c:	f3bf 8f5b 	dmb	ish
    8820:	bd08      	pop	{r3, pc}
    8822:	bf00      	nop
    8824:	40027c1c 	.word	0x40027c1c
    8828:	2000253d 	.word	0x2000253d
    882c:	20001ebc 	.word	0x20001ebc
    8830:	20001e48 	.word	0x20001e48

00008834 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    8834:	b508      	push	{r3, lr}
    8836:	f7ff fc7f 	bl	8138 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    883a:	b110      	cbz	r0, 8842 <ev_dma_epin1_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    883c:	4b15      	ldr	r3, [pc, #84]	; (8894 <ev_dma_epin1_handler+0x60>)
    883e:	2200      	movs	r2, #0
    8840:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    8842:	4b15      	ldr	r3, [pc, #84]	; (8898 <ev_dma_epin1_handler+0x64>)
    8844:	2200      	movs	r2, #0
    8846:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8848:	4b14      	ldr	r3, [pc, #80]	; (889c <ev_dma_epin1_handler+0x68>)
    884a:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
    884e:	2b03      	cmp	r3, #3
    8850:	d011      	beq.n	8876 <ev_dma_epin1_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    8852:	4b12      	ldr	r3, [pc, #72]	; (889c <ev_dma_epin1_handler+0x68>)
    8854:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    8858:	b9d3      	cbnz	r3, 8890 <ev_dma_epin1_handler+0x5c>
    885a:	4b11      	ldr	r3, [pc, #68]	; (88a0 <ev_dma_epin1_handler+0x6c>)
    885c:	f3bf 8f5b 	dmb	ish
    8860:	e853 2f00 	ldrex	r2, [r3]
    8864:	f022 0202 	bic.w	r2, r2, #2
    8868:	e843 2100 	strex	r1, r2, [r3]
    886c:	2900      	cmp	r1, #0
    886e:	d1f7      	bne.n	8860 <ev_dma_epin1_handler+0x2c>
    8870:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    8874:	e00c      	b.n	8890 <ev_dma_epin1_handler+0x5c>
    8876:	4b0a      	ldr	r3, [pc, #40]	; (88a0 <ev_dma_epin1_handler+0x6c>)
    8878:	f3bf 8f5b 	dmb	ish
    887c:	e853 2f00 	ldrex	r2, [r3]
    8880:	f022 0202 	bic.w	r2, r2, #2
    8884:	e843 2100 	strex	r1, r2, [r3]
    8888:	2900      	cmp	r1, #0
    888a:	d1f7      	bne.n	887c <ev_dma_epin1_handler+0x48>
    888c:	f3bf 8f5b 	dmb	ish
    8890:	bd08      	pop	{r3, pc}
    8892:	bf00      	nop
    8894:	40027c1c 	.word	0x40027c1c
    8898:	2000253d 	.word	0x2000253d
    889c:	20001ebc 	.word	0x20001ebc
    88a0:	20001e48 	.word	0x20001e48

000088a4 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    88a4:	b508      	push	{r3, lr}
    88a6:	f7ff fc47 	bl	8138 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    88aa:	b110      	cbz	r0, 88b2 <ev_dma_epin2_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    88ac:	4b15      	ldr	r3, [pc, #84]	; (8904 <ev_dma_epin2_handler+0x60>)
    88ae:	2200      	movs	r2, #0
    88b0:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    88b2:	4b15      	ldr	r3, [pc, #84]	; (8908 <ev_dma_epin2_handler+0x64>)
    88b4:	2200      	movs	r2, #0
    88b6:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    88b8:	4b14      	ldr	r3, [pc, #80]	; (890c <ev_dma_epin2_handler+0x68>)
    88ba:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
    88be:	2b03      	cmp	r3, #3
    88c0:	d011      	beq.n	88e6 <ev_dma_epin2_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    88c2:	4b12      	ldr	r3, [pc, #72]	; (890c <ev_dma_epin2_handler+0x68>)
    88c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    88c8:	b9d3      	cbnz	r3, 8900 <ev_dma_epin2_handler+0x5c>
    88ca:	4b11      	ldr	r3, [pc, #68]	; (8910 <ev_dma_epin2_handler+0x6c>)
    88cc:	f3bf 8f5b 	dmb	ish
    88d0:	e853 2f00 	ldrex	r2, [r3]
    88d4:	f022 0204 	bic.w	r2, r2, #4
    88d8:	e843 2100 	strex	r1, r2, [r3]
    88dc:	2900      	cmp	r1, #0
    88de:	d1f7      	bne.n	88d0 <ev_dma_epin2_handler+0x2c>
    88e0:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    88e4:	e00c      	b.n	8900 <ev_dma_epin2_handler+0x5c>
    88e6:	4b0a      	ldr	r3, [pc, #40]	; (8910 <ev_dma_epin2_handler+0x6c>)
    88e8:	f3bf 8f5b 	dmb	ish
    88ec:	e853 2f00 	ldrex	r2, [r3]
    88f0:	f022 0204 	bic.w	r2, r2, #4
    88f4:	e843 2100 	strex	r1, r2, [r3]
    88f8:	2900      	cmp	r1, #0
    88fa:	d1f7      	bne.n	88ec <ev_dma_epin2_handler+0x48>
    88fc:	f3bf 8f5b 	dmb	ish
    8900:	bd08      	pop	{r3, pc}
    8902:	bf00      	nop
    8904:	40027c1c 	.word	0x40027c1c
    8908:	2000253d 	.word	0x2000253d
    890c:	20001ebc 	.word	0x20001ebc
    8910:	20001e48 	.word	0x20001e48

00008914 <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    8914:	b508      	push	{r3, lr}
    8916:	f7ff fc0f 	bl	8138 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    891a:	b110      	cbz	r0, 8922 <ev_dma_epin3_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    891c:	4b15      	ldr	r3, [pc, #84]	; (8974 <ev_dma_epin3_handler+0x60>)
    891e:	2200      	movs	r2, #0
    8920:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    8922:	4b15      	ldr	r3, [pc, #84]	; (8978 <ev_dma_epin3_handler+0x64>)
    8924:	2200      	movs	r2, #0
    8926:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8928:	4b14      	ldr	r3, [pc, #80]	; (897c <ev_dma_epin3_handler+0x68>)
    892a:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
    892e:	2b03      	cmp	r3, #3
    8930:	d011      	beq.n	8956 <ev_dma_epin3_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    8932:	4b12      	ldr	r3, [pc, #72]	; (897c <ev_dma_epin3_handler+0x68>)
    8934:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    8938:	b9d3      	cbnz	r3, 8970 <ev_dma_epin3_handler+0x5c>
    893a:	4b11      	ldr	r3, [pc, #68]	; (8980 <ev_dma_epin3_handler+0x6c>)
    893c:	f3bf 8f5b 	dmb	ish
    8940:	e853 2f00 	ldrex	r2, [r3]
    8944:	f022 0208 	bic.w	r2, r2, #8
    8948:	e843 2100 	strex	r1, r2, [r3]
    894c:	2900      	cmp	r1, #0
    894e:	d1f7      	bne.n	8940 <ev_dma_epin3_handler+0x2c>
    8950:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    8954:	e00c      	b.n	8970 <ev_dma_epin3_handler+0x5c>
    8956:	4b0a      	ldr	r3, [pc, #40]	; (8980 <ev_dma_epin3_handler+0x6c>)
    8958:	f3bf 8f5b 	dmb	ish
    895c:	e853 2f00 	ldrex	r2, [r3]
    8960:	f022 0208 	bic.w	r2, r2, #8
    8964:	e843 2100 	strex	r1, r2, [r3]
    8968:	2900      	cmp	r1, #0
    896a:	d1f7      	bne.n	895c <ev_dma_epin3_handler+0x48>
    896c:	f3bf 8f5b 	dmb	ish
    8970:	bd08      	pop	{r3, pc}
    8972:	bf00      	nop
    8974:	40027c1c 	.word	0x40027c1c
    8978:	2000253d 	.word	0x2000253d
    897c:	20001ebc 	.word	0x20001ebc
    8980:	20001e48 	.word	0x20001e48

00008984 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    8984:	b508      	push	{r3, lr}
    8986:	f7ff fbd7 	bl	8138 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    898a:	b110      	cbz	r0, 8992 <ev_dma_epin4_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    898c:	4b15      	ldr	r3, [pc, #84]	; (89e4 <ev_dma_epin4_handler+0x60>)
    898e:	2200      	movs	r2, #0
    8990:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    8992:	4b15      	ldr	r3, [pc, #84]	; (89e8 <ev_dma_epin4_handler+0x64>)
    8994:	2200      	movs	r2, #0
    8996:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8998:	4b14      	ldr	r3, [pc, #80]	; (89ec <ev_dma_epin4_handler+0x68>)
    899a:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
    899e:	2b03      	cmp	r3, #3
    89a0:	d011      	beq.n	89c6 <ev_dma_epin4_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    89a2:	4b12      	ldr	r3, [pc, #72]	; (89ec <ev_dma_epin4_handler+0x68>)
    89a4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    89a8:	b9d3      	cbnz	r3, 89e0 <ev_dma_epin4_handler+0x5c>
    89aa:	4b11      	ldr	r3, [pc, #68]	; (89f0 <ev_dma_epin4_handler+0x6c>)
    89ac:	f3bf 8f5b 	dmb	ish
    89b0:	e853 2f00 	ldrex	r2, [r3]
    89b4:	f022 0210 	bic.w	r2, r2, #16
    89b8:	e843 2100 	strex	r1, r2, [r3]
    89bc:	2900      	cmp	r1, #0
    89be:	d1f7      	bne.n	89b0 <ev_dma_epin4_handler+0x2c>
    89c0:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    89c4:	e00c      	b.n	89e0 <ev_dma_epin4_handler+0x5c>
    89c6:	4b0a      	ldr	r3, [pc, #40]	; (89f0 <ev_dma_epin4_handler+0x6c>)
    89c8:	f3bf 8f5b 	dmb	ish
    89cc:	e853 2f00 	ldrex	r2, [r3]
    89d0:	f022 0210 	bic.w	r2, r2, #16
    89d4:	e843 2100 	strex	r1, r2, [r3]
    89d8:	2900      	cmp	r1, #0
    89da:	d1f7      	bne.n	89cc <ev_dma_epin4_handler+0x48>
    89dc:	f3bf 8f5b 	dmb	ish
    89e0:	bd08      	pop	{r3, pc}
    89e2:	bf00      	nop
    89e4:	40027c1c 	.word	0x40027c1c
    89e8:	2000253d 	.word	0x2000253d
    89ec:	20001ebc 	.word	0x20001ebc
    89f0:	20001e48 	.word	0x20001e48

000089f4 <nrfx_usbd_isoinconfig_set>:
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    89f4:	4b01      	ldr	r3, [pc, #4]	; (89fc <nrfx_usbd_isoinconfig_set+0x8>)
    89f6:	f8c3 0530 	str.w	r0, [r3, #1328]	; 0x530
}
    89fa:	4770      	bx	lr
    89fc:	40027000 	.word	0x40027000

00008a00 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
    8a00:	2300      	movs	r3, #0
    8a02:	4a02      	ldr	r2, [pc, #8]	; (8a0c <nrfx_usbd_uninit+0xc>)
    8a04:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    8a06:	4a02      	ldr	r2, [pc, #8]	; (8a10 <nrfx_usbd_uninit+0x10>)
    8a08:	7013      	strb	r3, [r2, #0]
    return;
}
    8a0a:	4770      	bx	lr
    8a0c:	20001fdc 	.word	0x20001fdc
    8a10:	2000253e 	.word	0x2000253e

00008a14 <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
    8a14:	b510      	push	{r4, lr}
    p_reg->EVENTCAUSE = flags;
    8a16:	4b41      	ldr	r3, [pc, #260]	; (8b1c <nrfx_usbd_enable+0x108>)
    8a18:	f44f 6200 	mov.w	r2, #2048	; 0x800
    8a1c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    8a20:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    /* Prepare for READY event receiving */
    nrf_usbd_eventcause_clear(NRF_USBD, NRF_USBD_EVENTCAUSE_READY_MASK);

    usbd_enable();
    8a24:	f7ff fc2e 	bl	8284 <usbd_enable>
}

/* Errata: Unexpected behavior after reset. **/
static inline bool nrfx_usbd_errata_223(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_223();
    8a28:	f005 fa90 	bl	df4c <nrf52_errata_223>

    if (nrfx_usbd_errata_223() && m_first_enable)
    8a2c:	b118      	cbz	r0, 8a36 <nrfx_usbd_enable+0x22>
    8a2e:	4b3c      	ldr	r3, [pc, #240]	; (8b20 <nrfx_usbd_enable+0x10c>)
    8a30:	781b      	ldrb	r3, [r3, #0]
    8a32:	2b00      	cmp	r3, #0
    8a34:	d15f      	bne.n	8af6 <nrfx_usbd_enable+0xe2>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    8a36:	f7ff fb6b 	bl	8110 <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    8a3a:	b1b8      	cbz	r0, 8a6c <nrfx_usbd_enable+0x58>
	__asm__ volatile(
    8a3c:	f04f 0220 	mov.w	r2, #32
    8a40:	f3ef 8311 	mrs	r3, BASEPRI
    8a44:	f382 8812 	msr	BASEPRI_MAX, r2
    8a48:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    8a4c:	4a35      	ldr	r2, [pc, #212]	; (8b24 <nrfx_usbd_enable+0x110>)
    8a4e:	6812      	ldr	r2, [r2, #0]
    8a50:	2a00      	cmp	r2, #0
    8a52:	d15b      	bne.n	8b0c <nrfx_usbd_enable+0xf8>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    8a54:	4a33      	ldr	r2, [pc, #204]	; (8b24 <nrfx_usbd_enable+0x110>)
    8a56:	f249 3175 	movw	r1, #37749	; 0x9375
    8a5a:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    8a5c:	4832      	ldr	r0, [pc, #200]	; (8b28 <nrfx_usbd_enable+0x114>)
    8a5e:	2403      	movs	r4, #3
    8a60:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    8a62:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    8a64:	f383 8811 	msr	BASEPRI, r3
    8a68:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_166();
    8a6c:	f7ff fb3c 	bl	80e8 <nrf52_errata_166>
#endif
    {
        usbd_errata_187_211_begin();
    }

    if (nrfx_usbd_errata_166())
    8a70:	b150      	cbz	r0, 8a88 <nrfx_usbd_enable+0x74>
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
    8a72:	4b2e      	ldr	r3, [pc, #184]	; (8b2c <nrfx_usbd_enable+0x118>)
    8a74:	f240 72e3 	movw	r2, #2019	; 0x7e3
    8a78:	601a      	str	r2, [r3, #0]
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
    8a7a:	3304      	adds	r3, #4
    8a7c:	2240      	movs	r2, #64	; 0x40
    8a7e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
    8a80:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    8a84:	f3bf 8f4f 	dsb	sy
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    8a88:	4b24      	ldr	r3, [pc, #144]	; (8b1c <nrfx_usbd_enable+0x108>)
    8a8a:	2280      	movs	r2, #128	; 0x80
    8a8c:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_ZERODATA);
    }
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    8a90:	2000      	movs	r0, #0
    8a92:	f7ff ffaf 	bl	89f4 <nrfx_usbd_isoinconfig_set>
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    8a96:	4b26      	ldr	r3, [pc, #152]	; (8b30 <nrfx_usbd_enable+0x11c>)
    8a98:	f240 12ff 	movw	r2, #511	; 0x1ff
    8a9c:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
    8a9e:	4b25      	ldr	r3, [pc, #148]	; (8b34 <nrfx_usbd_enable+0x120>)
    8aa0:	2200      	movs	r2, #0
    8aa2:	601a      	str	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
    8aa4:	f7ff fb48 	bl	8138 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    8aa8:	b110      	cbz	r0, 8ab0 <nrfx_usbd_enable+0x9c>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    8aaa:	4b23      	ldr	r3, [pc, #140]	; (8b38 <nrfx_usbd_enable+0x124>)
    8aac:	2200      	movs	r2, #0
    8aae:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    8ab0:	2300      	movs	r3, #0
    8ab2:	4a22      	ldr	r2, [pc, #136]	; (8b3c <nrfx_usbd_enable+0x128>)
    8ab4:	7013      	strb	r3, [r2, #0]
    usbd_dma_pending_clear();
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    8ab6:	4a22      	ldr	r2, [pc, #136]	; (8b40 <nrfx_usbd_enable+0x12c>)
    8ab8:	7013      	strb	r3, [r2, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    8aba:	4b22      	ldr	r3, [pc, #136]	; (8b44 <nrfx_usbd_enable+0x130>)
    8abc:	2202      	movs	r2, #2
    8abe:	701a      	strb	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    8ac0:	f7ff fb26 	bl	8110 <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    8ac4:	b1b0      	cbz	r0, 8af4 <nrfx_usbd_enable+0xe0>
	__asm__ volatile(
    8ac6:	f04f 0220 	mov.w	r2, #32
    8aca:	f3ef 8311 	mrs	r3, BASEPRI
    8ace:	f382 8812 	msr	BASEPRI_MAX, r2
    8ad2:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    8ad6:	4a13      	ldr	r2, [pc, #76]	; (8b24 <nrfx_usbd_enable+0x110>)
    8ad8:	6812      	ldr	r2, [r2, #0]
    8ada:	b9da      	cbnz	r2, 8b14 <nrfx_usbd_enable+0x100>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    8adc:	4a11      	ldr	r2, [pc, #68]	; (8b24 <nrfx_usbd_enable+0x110>)
    8ade:	f249 3175 	movw	r1, #37749	; 0x9375
    8ae2:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    8ae4:	4810      	ldr	r0, [pc, #64]	; (8b28 <nrfx_usbd_enable+0x114>)
    8ae6:	2400      	movs	r4, #0
    8ae8:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    8aea:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    8aec:	f383 8811 	msr	BASEPRI, r3
    8af0:	f3bf 8f6f 	isb	sy
#endif
    {
        usbd_errata_187_211_end();
    }
}
    8af4:	bd10      	pop	{r4, pc}
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    8af6:	4b09      	ldr	r3, [pc, #36]	; (8b1c <nrfx_usbd_enable+0x108>)
    8af8:	2400      	movs	r4, #0
    8afa:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    8afe:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
         usbd_enable();
    8b02:	f7ff fbbf 	bl	8284 <usbd_enable>
         m_first_enable = false;
    8b06:	4b06      	ldr	r3, [pc, #24]	; (8b20 <nrfx_usbd_enable+0x10c>)
    8b08:	701c      	strb	r4, [r3, #0]
    8b0a:	e794      	b.n	8a36 <nrfx_usbd_enable+0x22>
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    8b0c:	4a06      	ldr	r2, [pc, #24]	; (8b28 <nrfx_usbd_enable+0x114>)
    8b0e:	2103      	movs	r1, #3
    8b10:	6011      	str	r1, [r2, #0]
    8b12:	e7a7      	b.n	8a64 <nrfx_usbd_enable+0x50>
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    8b14:	4a04      	ldr	r2, [pc, #16]	; (8b28 <nrfx_usbd_enable+0x114>)
    8b16:	2100      	movs	r1, #0
    8b18:	6011      	str	r1, [r2, #0]
    8b1a:	e7e7      	b.n	8aec <nrfx_usbd_enable+0xd8>
    8b1c:	40027000 	.word	0x40027000
    8b20:	2000021c 	.word	0x2000021c
    8b24:	4006ec00 	.word	0x4006ec00
    8b28:	4006ed14 	.word	0x4006ed14
    8b2c:	40027800 	.word	0x40027800
    8b30:	20001eb8 	.word	0x20001eb8
    8b34:	20001e48 	.word	0x20001e48
    8b38:	40027c1c 	.word	0x40027c1c
    8b3c:	2000253d 	.word	0x2000253d
    8b40:	2000253f 	.word	0x2000253f
    8b44:	2000253e 	.word	0x2000253e

00008b48 <nrfx_usbd_start>:
    }
#endif
}

void nrfx_usbd_start(bool enable_sof)
{
    8b48:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
    8b4a:	4b09      	ldr	r3, [pc, #36]	; (8b70 <nrfx_usbd_start+0x28>)
    8b4c:	2200      	movs	r2, #0
    8b4e:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_ENDEPOUT0_MASK    |
       NRF_USBD_INT_USBEVENT_MASK     |
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof)
    8b50:	b960      	cbnz	r0, 8b6c <nrfx_usbd_start+0x24>
    uint32_t ints_to_enable =
    8b52:	4b08      	ldr	r3, [pc, #32]	; (8b74 <nrfx_usbd_start+0x2c>)
    p_reg->INTENSET = mask;
    8b54:	4c08      	ldr	r4, [pc, #32]	; (8b78 <nrfx_usbd_start+0x30>)
    8b56:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    8b5a:	2027      	movs	r0, #39	; 0x27
    8b5c:	f7fb f860 	bl	3c20 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    8b60:	2301      	movs	r3, #1
    8b62:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    8b66:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
    8b6a:	bd10      	pop	{r4, pc}
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
    8b6c:	4b03      	ldr	r3, [pc, #12]	; (8b7c <nrfx_usbd_start+0x34>)
    8b6e:	e7f1      	b.n	8b54 <nrfx_usbd_start+0xc>
    8b70:	2000253c 	.word	0x2000253c
    8b74:	01c01407 	.word	0x01c01407
    8b78:	40027000 	.word	0x40027000
    8b7c:	01e01407 	.word	0x01e01407

00008b80 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    8b80:	4b03      	ldr	r3, [pc, #12]	; (8b90 <nrfx_usbd_is_enabled+0x10>)
    8b82:	7818      	ldrb	r0, [r3, #0]
}
    8b84:	2801      	cmp	r0, #1
    8b86:	bf94      	ite	ls
    8b88:	2000      	movls	r0, #0
    8b8a:	2001      	movhi	r0, #1
    8b8c:	4770      	bx	lr
    8b8e:	bf00      	nop
    8b90:	2000253e 	.word	0x2000253e

00008b94 <nrfx_usbd_ep_max_packet_size_set>:
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8b94:	f010 0f80 	tst.w	r0, #128	; 0x80
    8b98:	d106      	bne.n	8ba8 <nrfx_usbd_ep_max_packet_size_set+0x14>
    8b9a:	4b04      	ldr	r3, [pc, #16]	; (8bac <nrfx_usbd_ep_max_packet_size_set+0x18>)
        NRF_USBD_EP_NR_GET(ep));
    8b9c:	f000 000f 	and.w	r0, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8ba0:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    /* Packet size cannot be higher than maximum buffer size */
    NRFX_ASSERT((NRF_USBD_EPISO_CHECK(ep) && (size <= usbd_ep_iso_capacity(ep))) ||
                (!NRF_USBD_EPISO_CHECK(ep) && (size <= NRFX_USBD_EPSIZE)));

    usbd_ep_state_t * p_state = ep_state_access(ep);
    p_state->max_packet_size = size;
    8ba4:	8181      	strh	r1, [r0, #12]
}
    8ba6:	4770      	bx	lr
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8ba8:	4b01      	ldr	r3, [pc, #4]	; (8bb0 <nrfx_usbd_ep_max_packet_size_set+0x1c>)
    8baa:	e7f7      	b.n	8b9c <nrfx_usbd_ep_max_packet_size_set+0x8>
    8bac:	20001ebc 	.word	0x20001ebc
    8bb0:	20001f4c 	.word	0x20001f4c

00008bb4 <nrfx_usbd_init>:
{
    8bb4:	b570      	push	{r4, r5, r6, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    8bb6:	4b25      	ldr	r3, [pc, #148]	; (8c4c <nrfx_usbd_init+0x98>)
    8bb8:	781c      	ldrb	r4, [r3, #0]
    8bba:	2c00      	cmp	r4, #0
    8bbc:	d144      	bne.n	8c48 <nrfx_usbd_init+0x94>
    m_event_handler = event_handler;
    8bbe:	4b24      	ldr	r3, [pc, #144]	; (8c50 <nrfx_usbd_init+0x9c>)
    8bc0:	6018      	str	r0, [r3, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    8bc2:	4b22      	ldr	r3, [pc, #136]	; (8c4c <nrfx_usbd_init+0x98>)
    8bc4:	2201      	movs	r2, #1
    8bc6:	701a      	strb	r2, [r3, #0]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    8bc8:	4625      	mov	r5, r4
    8bca:	e012      	b.n	8bf2 <nrfx_usbd_init+0x3e>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    8bcc:	2140      	movs	r1, #64	; 0x40
    8bce:	4630      	mov	r0, r6
    8bd0:	f7ff ffe0 	bl	8b94 <nrfx_usbd_ep_max_packet_size_set>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8bd4:	f016 0f80 	tst.w	r6, #128	; 0x80
    8bd8:	d115      	bne.n	8c06 <nrfx_usbd_init+0x52>
    8bda:	491e      	ldr	r1, [pc, #120]	; (8c54 <nrfx_usbd_init+0xa0>)
        NRF_USBD_EP_NR_GET(ep));
    8bdc:	f005 030f 	and.w	r3, r5, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8be0:	0118      	lsls	r0, r3, #4
    8be2:	eb01 1303 	add.w	r3, r1, r3, lsl #4
        p_state->status = NRFX_USBD_EP_OK;
    8be6:	2200      	movs	r2, #0
    8be8:	739a      	strb	r2, [r3, #14]
        p_state->handler.feeder = NULL;
    8bea:	500a      	str	r2, [r1, r0]
        p_state->transfer_cnt = 0;
    8bec:	609a      	str	r2, [r3, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    8bee:	3501      	adds	r5, #1
    8bf0:	b2ed      	uxtb	r5, r5
    8bf2:	2d08      	cmp	r5, #8
    8bf4:	d81c      	bhi.n	8c30 <nrfx_usbd_init+0x7c>
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    8bf6:	f045 0680 	orr.w	r6, r5, #128	; 0x80
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    8bfa:	f015 0f08 	tst.w	r5, #8
    8bfe:	d0e5      	beq.n	8bcc <nrfx_usbd_init+0x18>
    8c00:	f240 11ff 	movw	r1, #511	; 0x1ff
    8c04:	e7e3      	b.n	8bce <nrfx_usbd_init+0x1a>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8c06:	4914      	ldr	r1, [pc, #80]	; (8c58 <nrfx_usbd_init+0xa4>)
    8c08:	e7e8      	b.n	8bdc <nrfx_usbd_init+0x28>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    8c0a:	2140      	movs	r1, #64	; 0x40
    8c0c:	4620      	mov	r0, r4
    8c0e:	f7ff ffc1 	bl	8b94 <nrfx_usbd_ep_max_packet_size_set>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8c12:	f014 0f80 	tst.w	r4, #128	; 0x80
    8c16:	d113      	bne.n	8c40 <nrfx_usbd_init+0x8c>
    8c18:	490e      	ldr	r1, [pc, #56]	; (8c54 <nrfx_usbd_init+0xa0>)
        NRF_USBD_EP_NR_GET(ep));
    8c1a:	f004 030f 	and.w	r3, r4, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8c1e:	0118      	lsls	r0, r3, #4
    8c20:	eb01 1303 	add.w	r3, r1, r3, lsl #4
        p_state->status = NRFX_USBD_EP_OK;
    8c24:	2200      	movs	r2, #0
    8c26:	739a      	strb	r2, [r3, #14]
        p_state->handler.consumer = NULL;
    8c28:	500a      	str	r2, [r1, r0]
        p_state->transfer_cnt = 0;
    8c2a:	609a      	str	r2, [r3, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    8c2c:	3401      	adds	r4, #1
    8c2e:	b2e4      	uxtb	r4, r4
    8c30:	2c08      	cmp	r4, #8
    8c32:	d807      	bhi.n	8c44 <nrfx_usbd_init+0x90>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    8c34:	f014 0f08 	tst.w	r4, #8
    8c38:	d0e7      	beq.n	8c0a <nrfx_usbd_init+0x56>
    8c3a:	f240 11ff 	movw	r1, #511	; 0x1ff
    8c3e:	e7e5      	b.n	8c0c <nrfx_usbd_init+0x58>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8c40:	4905      	ldr	r1, [pc, #20]	; (8c58 <nrfx_usbd_init+0xa4>)
    8c42:	e7ea      	b.n	8c1a <nrfx_usbd_init+0x66>
    return NRFX_SUCCESS;
    8c44:	4805      	ldr	r0, [pc, #20]	; (8c5c <nrfx_usbd_init+0xa8>)
}
    8c46:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_INVALID_STATE;
    8c48:	4805      	ldr	r0, [pc, #20]	; (8c60 <nrfx_usbd_init+0xac>)
    8c4a:	e7fc      	b.n	8c46 <nrfx_usbd_init+0x92>
    8c4c:	2000253e 	.word	0x2000253e
    8c50:	20001fdc 	.word	0x20001fdc
    8c54:	20001ebc 	.word	0x20001ebc
    8c58:	20001f4c 	.word	0x20001f4c
    8c5c:	0bad0000 	.word	0x0bad0000
    8c60:	0bad0005 	.word	0x0bad0005

00008c64 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    8c64:	b4f0      	push	{r4, r5, r6, r7}
    return NRFX_USBD_EP_BITPOS(ep);
    8c66:	b242      	sxtb	r2, r0
    8c68:	2a00      	cmp	r2, #0
    8c6a:	db14      	blt.n	8c96 <nrfx_usbd_ep_transfer+0x32>
    8c6c:	2410      	movs	r4, #16
    8c6e:	f002 030f 	and.w	r3, r2, #15
    8c72:	441c      	add	r4, r3
	__asm__ volatile(
    8c74:	f04f 0320 	mov.w	r3, #32
    8c78:	f3ef 8511 	mrs	r5, BASEPRI
    8c7c:	f383 8812 	msr	BASEPRI_MAX, r3
    8c80:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    8c84:	f010 070f 	ands.w	r7, r0, #15
    8c88:	d107      	bne.n	8c9a <nrfx_usbd_ep_transfer+0x36>
    8c8a:	4b2f      	ldr	r3, [pc, #188]	; (8d48 <nrfx_usbd_ep_transfer+0xe4>)
    8c8c:	781b      	ldrb	r3, [r3, #0]
    8c8e:	4283      	cmp	r3, r0
    8c90:	d003      	beq.n	8c9a <nrfx_usbd_ep_transfer+0x36>
    {
        ret = NRFX_ERROR_INVALID_ADDR;
    8c92:	482e      	ldr	r0, [pc, #184]	; (8d4c <nrfx_usbd_ep_transfer+0xe8>)
    8c94:	e051      	b.n	8d3a <nrfx_usbd_ep_transfer+0xd6>
    return NRFX_USBD_EP_BITPOS(ep);
    8c96:	2400      	movs	r4, #0
    8c98:	e7e9      	b.n	8c6e <nrfx_usbd_ep_transfer+0xa>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    8c9a:	4b2d      	ldr	r3, [pc, #180]	; (8d50 <nrfx_usbd_ep_transfer+0xec>)
    8c9c:	681b      	ldr	r3, [r3, #0]
    8c9e:	43db      	mvns	r3, r3
    8ca0:	b29b      	uxth	r3, r3
    8ca2:	482c      	ldr	r0, [pc, #176]	; (8d54 <nrfx_usbd_ep_transfer+0xf0>)
    8ca4:	6800      	ldr	r0, [r0, #0]
    8ca6:	4303      	orrs	r3, r0
    8ca8:	2001      	movs	r0, #1
    8caa:	fa00 f404 	lsl.w	r4, r0, r4
    8cae:	4223      	tst	r3, r4
    8cb0:	d142      	bne.n	8d38 <nrfx_usbd_ep_transfer+0xd4>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8cb2:	2a00      	cmp	r2, #0
    8cb4:	db1f      	blt.n	8cf6 <nrfx_usbd_ep_transfer+0x92>
    8cb6:	4828      	ldr	r0, [pc, #160]	; (8d58 <nrfx_usbd_ep_transfer+0xf4>)
    8cb8:	ea4f 1c07 	mov.w	ip, r7, lsl #4
    8cbc:	eb00 1607 	add.w	r6, r0, r7, lsl #4
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
    8cc0:	2a00      	cmp	r2, #0
    8cc2:	db1a      	blt.n	8cfa <nrfx_usbd_ep_transfer+0x96>
                }
            }
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    8cc4:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    8cc8:	4a24      	ldr	r2, [pc, #144]	; (8d5c <nrfx_usbd_ep_transfer+0xf8>)
    8cca:	eb02 0383 	add.w	r3, r2, r3, lsl #2
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
    8cce:	4a24      	ldr	r2, [pc, #144]	; (8d60 <nrfx_usbd_ep_transfer+0xfc>)
    8cd0:	f840 200c 	str.w	r2, [r0, ip]
        }
        *p_context = *p_transfer;
    8cd4:	c907      	ldmia	r1, {r0, r1, r2}
    8cd6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
    8cda:	6073      	str	r3, [r6, #4]

        p_state->transfer_cnt = 0;
    8cdc:	2300      	movs	r3, #0
    8cde:	60b3      	str	r3, [r6, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    8ce0:	73b3      	strb	r3, [r6, #14]
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    8ce2:	4a1c      	ldr	r2, [pc, #112]	; (8d54 <nrfx_usbd_ep_transfer+0xf0>)
    8ce4:	6813      	ldr	r3, [r2, #0]
    8ce6:	431c      	orrs	r4, r3
    8ce8:	6014      	str	r4, [r2, #0]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8cea:	4b1e      	ldr	r3, [pc, #120]	; (8d64 <nrfx_usbd_ep_transfer+0x100>)
    8cec:	2280      	movs	r2, #128	; 0x80
    8cee:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        ret = NRFX_SUCCESS;
    8cf2:	481d      	ldr	r0, [pc, #116]	; (8d68 <nrfx_usbd_ep_transfer+0x104>)
}
    8cf4:	e021      	b.n	8d3a <nrfx_usbd_ep_transfer+0xd6>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8cf6:	481d      	ldr	r0, [pc, #116]	; (8d6c <nrfx_usbd_ep_transfer+0x108>)
    8cf8:	e7de      	b.n	8cb8 <nrfx_usbd_ep_transfer+0x54>
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    8cfa:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    8cfe:	4a1c      	ldr	r2, [pc, #112]	; (8d70 <nrfx_usbd_ep_transfer+0x10c>)
    8d00:	eb02 0383 	add.w	r3, r2, r3, lsl #2
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    8d04:	680a      	ldr	r2, [r1, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    8d06:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
    8d0a:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    8d0e:	d006      	beq.n	8d1e <nrfx_usbd_ep_transfer+0xba>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    8d10:	688a      	ldr	r2, [r1, #8]
    8d12:	f012 0f01 	tst.w	r2, #1
    8d16:	d10c      	bne.n	8d32 <nrfx_usbd_ep_transfer+0xce>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
    8d18:	4a16      	ldr	r2, [pc, #88]	; (8d74 <nrfx_usbd_ep_transfer+0x110>)
    8d1a:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
    8d1c:	e7da      	b.n	8cd4 <nrfx_usbd_ep_transfer+0x70>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    8d1e:	688a      	ldr	r2, [r1, #8]
    8d20:	f012 0f01 	tst.w	r2, #1
    8d24:	d102      	bne.n	8d2c <nrfx_usbd_ep_transfer+0xc8>
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
    8d26:	4a14      	ldr	r2, [pc, #80]	; (8d78 <nrfx_usbd_ep_transfer+0x114>)
    8d28:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
    8d2a:	e7d3      	b.n	8cd4 <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
    8d2c:	4a13      	ldr	r2, [pc, #76]	; (8d7c <nrfx_usbd_ep_transfer+0x118>)
    8d2e:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
    8d30:	e7d0      	b.n	8cd4 <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
    8d32:	4a13      	ldr	r2, [pc, #76]	; (8d80 <nrfx_usbd_ep_transfer+0x11c>)
    8d34:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
    8d36:	e7cd      	b.n	8cd4 <nrfx_usbd_ep_transfer+0x70>
        ret = NRFX_ERROR_BUSY;
    8d38:	4812      	ldr	r0, [pc, #72]	; (8d84 <nrfx_usbd_ep_transfer+0x120>)
	__asm__ volatile(
    8d3a:	f385 8811 	msr	BASEPRI, r5
    8d3e:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    8d42:	bcf0      	pop	{r4, r5, r6, r7}
    8d44:	4770      	bx	lr
    8d46:	bf00      	nop
    8d48:	2000253f 	.word	0x2000253f
    8d4c:	0bad000a 	.word	0x0bad000a
    8d50:	20001eb8 	.word	0x20001eb8
    8d54:	20001e48 	.word	0x20001e48
    8d58:	20001ebc 	.word	0x20001ebc
    8d5c:	20001ddc 	.word	0x20001ddc
    8d60:	0000df51 	.word	0x0000df51
    8d64:	e000e100 	.word	0xe000e100
    8d68:	0bad0000 	.word	0x0bad0000
    8d6c:	20001f4c 	.word	0x20001f4c
    8d70:	20001e4c 	.word	0x20001e4c
    8d74:	0000dfdd 	.word	0x0000dfdd
    8d78:	0000df87 	.word	0x0000df87
    8d7c:	0000dfa9 	.word	0x0000dfa9
    8d80:	0000e01b 	.word	0x0000e01b
    8d84:	0bad000b 	.word	0x0bad000b

00008d88 <nrfx_usbd_feeder_buffer_get>:
}

void * nrfx_usbd_feeder_buffer_get(void)
{
    return m_tx_buffer;
}
    8d88:	4800      	ldr	r0, [pc, #0]	; (8d8c <nrfx_usbd_feeder_buffer_get+0x4>)
    8d8a:	4770      	bx	lr
    8d8c:	20001fe0 	.word	0x20001fe0

00008d90 <nrfx_usbd_ep_status_get>:

nrfx_usbd_ep_status_t nrfx_usbd_ep_status_get(nrfx_usbd_ep_t ep, size_t * p_size)
{
    8d90:	b430      	push	{r4, r5}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8d92:	f010 0f80 	tst.w	r0, #128	; 0x80
    8d96:	d118      	bne.n	8dca <nrfx_usbd_ep_status_get+0x3a>
    8d98:	4b0e      	ldr	r3, [pc, #56]	; (8dd4 <nrfx_usbd_ep_status_get+0x44>)
        NRF_USBD_EP_NR_GET(ep));
    8d9a:	f000 000f 	and.w	r0, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8d9e:	0104      	lsls	r4, r0, #4
    8da0:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	__asm__ volatile(
    8da4:	f04f 0520 	mov.w	r5, #32
    8da8:	f3ef 8211 	mrs	r2, BASEPRI
    8dac:	f385 8812 	msr	BASEPRI_MAX, r5
    8db0:	f3bf 8f6f 	isb	sy
    nrfx_usbd_ep_status_t ret;

    usbd_ep_state_t const * p_state = ep_state_access(ep);
    NRFX_CRITICAL_SECTION_ENTER();
    *p_size = p_state->transfer_cnt;
    8db4:	6885      	ldr	r5, [r0, #8]
    8db6:	600d      	str	r5, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    8db8:	591b      	ldr	r3, [r3, r4]
    8dba:	b143      	cbz	r3, 8dce <nrfx_usbd_ep_status_get+0x3e>
    8dbc:	2004      	movs	r0, #4
	__asm__ volatile(
    8dbe:	f382 8811 	msr	BASEPRI, r2
    8dc2:	f3bf 8f6f 	isb	sy
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    8dc6:	bc30      	pop	{r4, r5}
    8dc8:	4770      	bx	lr
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8dca:	4b03      	ldr	r3, [pc, #12]	; (8dd8 <nrfx_usbd_ep_status_get+0x48>)
    8dcc:	e7e5      	b.n	8d9a <nrfx_usbd_ep_status_get+0xa>
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    8dce:	7b80      	ldrb	r0, [r0, #14]
    8dd0:	e7f5      	b.n	8dbe <nrfx_usbd_ep_status_get+0x2e>
    8dd2:	bf00      	nop
    8dd4:	20001ebc 	.word	0x20001ebc
    8dd8:	20001f4c 	.word	0x20001f4c

00008ddc <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
    8ddc:	f010 0f08 	tst.w	r0, #8
    8de0:	d107      	bne.n	8df2 <nrfx_usbd_epout_size_get+0x16>
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    8de2:	f000 000f 	and.w	r0, r0, #15
    8de6:	f500 7094 	add.w	r0, r0, #296	; 0x128
    8dea:	4b06      	ldr	r3, [pc, #24]	; (8e04 <nrfx_usbd_epout_size_get+0x28>)
    8dec:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    8df0:	4770      	bx	lr
        size_t size_isoout = p_reg->SIZE.ISOOUT;
    8df2:	4b04      	ldr	r3, [pc, #16]	; (8e04 <nrfx_usbd_epout_size_get+0x28>)
    8df4:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
        if ((size_isoout & USBD_SIZE_ISOOUT_ZERO_Msk) ==
    8df8:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    8dfc:	d100      	bne.n	8e00 <nrfx_usbd_epout_size_get+0x24>
    8dfe:	4770      	bx	lr
            size_isoout = 0;
    8e00:	2000      	movs	r0, #0

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
    8e02:	4770      	bx	lr
    8e04:	40027000 	.word	0x40027000

00008e08 <usbd_dmareq_process>:
    if (!m_dma_pending)
    8e08:	4b6d      	ldr	r3, [pc, #436]	; (8fc0 <usbd_dmareq_process+0x1b8>)
    8e0a:	781b      	ldrb	r3, [r3, #0]
    8e0c:	2b00      	cmp	r3, #0
    8e0e:	f040 80d5 	bne.w	8fbc <usbd_dmareq_process+0x1b4>
{
    8e12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8e16:	b085      	sub	sp, #20
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    8e18:	4b6a      	ldr	r3, [pc, #424]	; (8fc4 <usbd_dmareq_process+0x1bc>)
    8e1a:	681b      	ldr	r3, [r3, #0]
    8e1c:	4a6a      	ldr	r2, [pc, #424]	; (8fc8 <usbd_dmareq_process+0x1c0>)
    8e1e:	6810      	ldr	r0, [r2, #0]
    8e20:	4003      	ands	r3, r0
    8e22:	f000 80c8 	beq.w	8fb6 <usbd_dmareq_process+0x1ae>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    8e26:	f013 2001 	ands.w	r0, r3, #16777472	; 0x1000100
    8e2a:	d05a      	beq.n	8ee2 <usbd_dmareq_process+0xda>
                pos = usbd_dma_scheduler_algorithm(req & USBD_EPISO_BIT_MASK);
    8e2c:	f005 f8d1 	bl	dfd2 <usbd_dma_scheduler_algorithm>
    8e30:	4680      	mov	r8, r0
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    8e32:	f1b8 0f0f 	cmp.w	r8, #15
    8e36:	d959      	bls.n	8eec <usbd_dmareq_process+0xe4>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    8e38:	f1a8 0610 	sub.w	r6, r8, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    8e3c:	b2f6      	uxtb	r6, r6
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8e3e:	b274      	sxtb	r4, r6
    8e40:	2c00      	cmp	r4, #0
    8e42:	db57      	blt.n	8ef4 <usbd_dmareq_process+0xec>
    8e44:	f8df a19c 	ldr.w	sl, [pc, #412]	; 8fe4 <usbd_dmareq_process+0x1dc>
    8e48:	f006 070f 	and.w	r7, r6, #15
        NRF_USBD_EP_NR_GET(ep));
    8e4c:	463d      	mov	r5, r7
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8e4e:	ea4f 1b07 	mov.w	fp, r7, lsl #4
    8e52:	eb0a 1907 	add.w	r9, sl, r7, lsl #4
            if (NRF_USBD_EPIN_CHECK(ep))
    8e56:	2c00      	cmp	r4, #0
    8e58:	db4f      	blt.n	8efa <usbd_dmareq_process+0xf2>
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    8e5a:	4630      	mov	r0, r6
    8e5c:	f7ff ffbe 	bl	8ddc <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
    8e60:	f85a a00b 	ldr.w	sl, [sl, fp]
    8e64:	4683      	mov	fp, r0
    8e66:	4603      	mov	r3, r0
    8e68:	f8b9 200c 	ldrh.w	r2, [r9, #12]
    8e6c:	f8d9 1004 	ldr.w	r1, [r9, #4]
    8e70:	a802      	add	r0, sp, #8
    8e72:	47d0      	blx	sl
                if (transfer.p_data.rx == NULL)
    8e74:	9b02      	ldr	r3, [sp, #8]
    8e76:	b113      	cbz	r3, 8e7e <usbd_dmareq_process+0x76>
                else if (transfer.size < rx_size)
    8e78:	9b03      	ldr	r3, [sp, #12]
    8e7a:	455b      	cmp	r3, fp
    8e7c:	d34b      	bcc.n	8f16 <usbd_dmareq_process+0x10e>
                if (!continue_transfer)
    8e7e:	b910      	cbnz	r0, 8e86 <usbd_dmareq_process+0x7e>
                    p_state->handler.consumer = NULL;
    8e80:	2300      	movs	r3, #0
    8e82:	f8c9 3000 	str.w	r3, [r9]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
    8e86:	f7ff f957 	bl	8138 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    8e8a:	b110      	cbz	r0, 8e92 <usbd_dmareq_process+0x8a>
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
    8e8c:	4b4f      	ldr	r3, [pc, #316]	; (8fcc <usbd_dmareq_process+0x1c4>)
    8e8e:	2282      	movs	r2, #130	; 0x82
    8e90:	601a      	str	r2, [r3, #0]
    m_dma_pending = true;
    8e92:	2001      	movs	r0, #1
    8e94:	4b4a      	ldr	r3, [pc, #296]	; (8fc0 <usbd_dmareq_process+0x1b8>)
    8e96:	7018      	strb	r0, [r3, #0]
            m_ep_ready &= ~(1U << pos);
    8e98:	fa00 f008 	lsl.w	r0, r0, r8
    8e9c:	4a4a      	ldr	r2, [pc, #296]	; (8fc8 <usbd_dmareq_process+0x1c0>)
    8e9e:	6813      	ldr	r3, [r2, #0]
    8ea0:	ea23 0000 	bic.w	r0, r3, r0
    8ea4:	6010      	str	r0, [r2, #0]
            p_state->transfer_cnt += transfer.size;
    8ea6:	9a03      	ldr	r2, [sp, #12]
    8ea8:	f8d9 3008 	ldr.w	r3, [r9, #8]
    8eac:	4413      	add	r3, r2
    8eae:	f8c9 3008 	str.w	r3, [r9, #8]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
    8eb2:	9b02      	ldr	r3, [sp, #8]
    if (NRF_USBD_EPIN_CHECK(ep))
    8eb4:	2c00      	cmp	r4, #0
    8eb6:	db4f      	blt.n	8f58 <usbd_dmareq_process+0x150>
        if (NRF_USBD_EPISO_CHECK(ep))
    8eb8:	f016 0f08 	tst.w	r6, #8
    8ebc:	d05f      	beq.n	8f7e <usbd_dmareq_process+0x176>
            p_reg->ISOOUT.PTR    = ptr;
    8ebe:	4944      	ldr	r1, [pc, #272]	; (8fd0 <usbd_dmareq_process+0x1c8>)
    8ec0:	f8c1 37a0 	str.w	r3, [r1, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
    8ec4:	f8c1 27a4 	str.w	r2, [r1, #1956]	; 0x7a4
    return (nrf_usbd_task_t)(
    8ec8:	2c00      	cmp	r4, #0
    8eca:	db62      	blt.n	8f92 <usbd_dmareq_process+0x18a>
    8ecc:	2328      	movs	r3, #40	; 0x28
    8ece:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    8ed2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
    8ed6:	f507 371c 	add.w	r7, r7, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    8eda:	2301      	movs	r3, #1
    8edc:	603b      	str	r3, [r7, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    8ede:	683b      	ldr	r3, [r7, #0]
}
    8ee0:	e065      	b.n	8fae <usbd_dmareq_process+0x1a6>
                pos = usbd_dma_scheduler_algorithm(req);
    8ee2:	4618      	mov	r0, r3
    8ee4:	f005 f875 	bl	dfd2 <usbd_dma_scheduler_algorithm>
    8ee8:	4680      	mov	r8, r0
    8eea:	e7a2      	b.n	8e32 <usbd_dmareq_process+0x2a>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    8eec:	f068 067f 	orn	r6, r8, #127	; 0x7f
    8ef0:	b2f6      	uxtb	r6, r6
    8ef2:	e7a4      	b.n	8e3e <usbd_dmareq_process+0x36>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8ef4:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 8fe8 <usbd_dmareq_process+0x1e0>
    8ef8:	e7a6      	b.n	8e48 <usbd_dmareq_process+0x40>
                continue_transfer = p_state->handler.feeder(
    8efa:	f8d9 3000 	ldr.w	r3, [r9]
    8efe:	f8b9 200c 	ldrh.w	r2, [r9, #12]
    8f02:	f8d9 1004 	ldr.w	r1, [r9, #4]
    8f06:	a802      	add	r0, sp, #8
    8f08:	4798      	blx	r3
                if (!continue_transfer)
    8f0a:	2800      	cmp	r0, #0
    8f0c:	d1bb      	bne.n	8e86 <usbd_dmareq_process+0x7e>
                    p_state->handler.feeder = NULL;
    8f0e:	2300      	movs	r3, #0
    8f10:	f8c9 3000 	str.w	r3, [r9]
    8f14:	e7b7      	b.n	8e86 <usbd_dmareq_process+0x7e>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    8f16:	2202      	movs	r2, #2
    8f18:	f889 200e 	strb.w	r2, [r9, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    8f1c:	2301      	movs	r3, #1
    8f1e:	fa03 f808 	lsl.w	r8, r3, r8
    8f22:	ea6f 0808 	mvn.w	r8, r8
    8f26:	4b27      	ldr	r3, [pc, #156]	; (8fc4 <usbd_dmareq_process+0x1bc>)
    8f28:	f3bf 8f5b 	dmb	ish
    8f2c:	e853 1f00 	ldrex	r1, [r3]
    8f30:	ea01 0108 	and.w	r1, r1, r8
    8f34:	e843 1000 	strex	r0, r1, [r3]
    8f38:	2800      	cmp	r0, #0
    8f3a:	d1f7      	bne.n	8f2c <usbd_dmareq_process+0x124>
    8f3c:	f3bf 8f5b 	dmb	ish
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    8f40:	2306      	movs	r3, #6
    8f42:	f88d 3004 	strb.w	r3, [sp, #4]
    8f46:	f88d 6006 	strb.w	r6, [sp, #6]
    8f4a:	f88d 2007 	strb.w	r2, [sp, #7]
                    m_event_handler(&evt);
    8f4e:	4b21      	ldr	r3, [pc, #132]	; (8fd4 <usbd_dmareq_process+0x1cc>)
    8f50:	681b      	ldr	r3, [r3, #0]
    8f52:	a801      	add	r0, sp, #4
    8f54:	4798      	blx	r3
                    continue;
    8f56:	e75f      	b.n	8e18 <usbd_dmareq_process+0x10>
        if (NRF_USBD_EPISO_CHECK(ep))
    8f58:	f016 0f08 	tst.w	r6, #8
    8f5c:	d005      	beq.n	8f6a <usbd_dmareq_process+0x162>
            p_reg->ISOIN.PTR    = ptr;
    8f5e:	491c      	ldr	r1, [pc, #112]	; (8fd0 <usbd_dmareq_process+0x1c8>)
    8f60:	f8c1 36a0 	str.w	r3, [r1, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
    8f64:	f8c1 26a4 	str.w	r2, [r1, #1700]	; 0x6a4
    8f68:	e7ae      	b.n	8ec8 <usbd_dmareq_process+0xc0>
            p_reg->EPIN[epnr].PTR    = ptr;
    8f6a:	4919      	ldr	r1, [pc, #100]	; (8fd0 <usbd_dmareq_process+0x1c8>)
    8f6c:	eb07 0087 	add.w	r0, r7, r7, lsl #2
    8f70:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    8f74:	f8c0 3600 	str.w	r3, [r0, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
    8f78:	f8c0 2604 	str.w	r2, [r0, #1540]	; 0x604
    8f7c:	e7a4      	b.n	8ec8 <usbd_dmareq_process+0xc0>
            p_reg->EPOUT[epnr].PTR    = ptr;
    8f7e:	4914      	ldr	r1, [pc, #80]	; (8fd0 <usbd_dmareq_process+0x1c8>)
    8f80:	eb07 0087 	add.w	r0, r7, r7, lsl #2
    8f84:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    8f88:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
    8f8c:	f8c0 2704 	str.w	r2, [r0, #1796]	; 0x704
    8f90:	e79a      	b.n	8ec8 <usbd_dmareq_process+0xc0>
    return (nrf_usbd_task_t)(
    8f92:	2304      	movs	r3, #4
    8f94:	e79b      	b.n	8ece <usbd_dmareq_process+0xc6>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    8f96:	4b10      	ldr	r3, [pc, #64]	; (8fd8 <usbd_dmareq_process+0x1d0>)
    8f98:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    8f9c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8fa0:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    8fa4:	681b      	ldr	r3, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
    8fa6:	b933      	cbnz	r3, 8fb6 <usbd_dmareq_process+0x1ae>
    8fa8:	4b0c      	ldr	r3, [pc, #48]	; (8fdc <usbd_dmareq_process+0x1d4>)
    8faa:	681b      	ldr	r3, [r3, #0]
    8fac:	b91b      	cbnz	r3, 8fb6 <usbd_dmareq_process+0x1ae>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    8fae:	2c00      	cmp	r4, #0
    8fb0:	dbf1      	blt.n	8f96 <usbd_dmareq_process+0x18e>
    8fb2:	4b0b      	ldr	r3, [pc, #44]	; (8fe0 <usbd_dmareq_process+0x1d8>)
    8fb4:	e7f0      	b.n	8f98 <usbd_dmareq_process+0x190>
}
    8fb6:	b005      	add	sp, #20
    8fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8fbc:	4770      	bx	lr
    8fbe:	bf00      	nop
    8fc0:	2000253d 	.word	0x2000253d
    8fc4:	20001e48 	.word	0x20001e48
    8fc8:	20001eb8 	.word	0x20001eb8
    8fcc:	40027c1c 	.word	0x40027c1c
    8fd0:	40027000 	.word	0x40027000
    8fd4:	20001fdc 	.word	0x20001fdc
    8fd8:	0000fca8 	.word	0x0000fca8
    8fdc:	40027100 	.word	0x40027100
    8fe0:	0000fcc8 	.word	0x0000fcc8
    8fe4:	20001ebc 	.word	0x20001ebc
    8fe8:	20001f4c 	.word	0x20001f4c

00008fec <ev_epdata_handler>:
{
    8fec:	b510      	push	{r4, lr}
    return p_reg->EPDATASTATUS;
    8fee:	4b0f      	ldr	r3, [pc, #60]	; (902c <ev_epdata_handler+0x40>)
    8ff0:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
    8ff4:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
    NRFX_LOG_DEBUG("USBD event: EndpointEPStatus: %x", dataepstatus);
    8ff8:	e009      	b.n	900e <ev_epdata_handler+0x22>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    8ffa:	f043 0080 	orr.w	r0, r3, #128	; 0x80
        dataepstatus &= ~(1UL << bitpos);
    8ffe:	b2db      	uxtb	r3, r3
    9000:	2201      	movs	r2, #1
    9002:	fa02 f303 	lsl.w	r3, r2, r3
    9006:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    900a:	f7ff f9d3 	bl	83b4 <usbd_ep_data_handler>
    while (dataepstatus)
    900e:	b154      	cbz	r4, 9026 <ev_epdata_handler+0x3a>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    9010:	fa94 f3a4 	rbit	r3, r4
    9014:	fab3 f383 	clz	r3, r3
    9018:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    901a:	2b0f      	cmp	r3, #15
    901c:	d9ed      	bls.n	8ffa <ev_epdata_handler+0xe>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    901e:	f1a3 0010 	sub.w	r0, r3, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9022:	b2c0      	uxtb	r0, r0
    9024:	e7eb      	b.n	8ffe <ev_epdata_handler+0x12>
        usbd_dmareq_process();
    9026:	f7ff feef 	bl	8e08 <usbd_dmareq_process>
}
    902a:	bd10      	pop	{r4, pc}
    902c:	40027000 	.word	0x40027000

00009030 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    9030:	b500      	push	{lr}
    9032:	b083      	sub	sp, #12
    9034:	f7ff f880 	bl	8138 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9038:	b110      	cbz	r0, 9040 <ev_dma_epout7_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    903a:	4b1d      	ldr	r3, [pc, #116]	; (90b0 <ev_dma_epout7_handler+0x80>)
    903c:	2200      	movs	r2, #0
    903e:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    9040:	4b1c      	ldr	r3, [pc, #112]	; (90b4 <ev_dma_epout7_handler+0x84>)
    9042:	2200      	movs	r2, #0
    9044:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9046:	4b1c      	ldr	r3, [pc, #112]	; (90b8 <ev_dma_epout7_handler+0x88>)
    9048:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
    904c:	2b03      	cmp	r3, #3
    904e:	d01d      	beq.n	908c <ev_dma_epout7_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
    9050:	4b19      	ldr	r3, [pc, #100]	; (90b8 <ev_dma_epout7_handler+0x88>)
    9052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    9054:	bb3b      	cbnz	r3, 90a6 <ev_dma_epout7_handler+0x76>
    9056:	4b19      	ldr	r3, [pc, #100]	; (90bc <ev_dma_epout7_handler+0x8c>)
    9058:	f3bf 8f5b 	dmb	ish
    905c:	e853 2f00 	ldrex	r2, [r3]
    9060:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
    9064:	e843 2100 	strex	r1, r2, [r3]
    9068:	2900      	cmp	r1, #0
    906a:	d1f7      	bne.n	905c <ev_dma_epout7_handler+0x2c>
    906c:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9070:	2306      	movs	r3, #6
    9072:	f88d 3004 	strb.w	r3, [sp, #4]
    9076:	2307      	movs	r3, #7
    9078:	f88d 3006 	strb.w	r3, [sp, #6]
    907c:	2300      	movs	r3, #0
    907e:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    9082:	4b0f      	ldr	r3, [pc, #60]	; (90c0 <ev_dma_epout7_handler+0x90>)
    9084:	681b      	ldr	r3, [r3, #0]
    9086:	a801      	add	r0, sp, #4
    9088:	4798      	blx	r3
    908a:	e00c      	b.n	90a6 <ev_dma_epout7_handler+0x76>
    908c:	4b0b      	ldr	r3, [pc, #44]	; (90bc <ev_dma_epout7_handler+0x8c>)
    908e:	f3bf 8f5b 	dmb	ish
    9092:	e853 2f00 	ldrex	r2, [r3]
    9096:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
    909a:	e843 2100 	strex	r1, r2, [r3]
    909e:	2900      	cmp	r1, #0
    90a0:	d1f7      	bne.n	9092 <ev_dma_epout7_handler+0x62>
    90a2:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    90a6:	f7ff feaf 	bl	8e08 <usbd_dmareq_process>
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    90aa:	b003      	add	sp, #12
    90ac:	f85d fb04 	ldr.w	pc, [sp], #4
    90b0:	40027c1c 	.word	0x40027c1c
    90b4:	2000253d 	.word	0x2000253d
    90b8:	20001ebc 	.word	0x20001ebc
    90bc:	20001e48 	.word	0x20001e48
    90c0:	20001fdc 	.word	0x20001fdc

000090c4 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    90c4:	b500      	push	{lr}
    90c6:	b083      	sub	sp, #12
    90c8:	f7ff f836 	bl	8138 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    90cc:	b110      	cbz	r0, 90d4 <ev_dma_epout1_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    90ce:	4b1d      	ldr	r3, [pc, #116]	; (9144 <ev_dma_epout1_handler+0x80>)
    90d0:	2200      	movs	r2, #0
    90d2:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    90d4:	4b1c      	ldr	r3, [pc, #112]	; (9148 <ev_dma_epout1_handler+0x84>)
    90d6:	2200      	movs	r2, #0
    90d8:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    90da:	4b1c      	ldr	r3, [pc, #112]	; (914c <ev_dma_epout1_handler+0x88>)
    90dc:	7f9b      	ldrb	r3, [r3, #30]
    90de:	2b03      	cmp	r3, #3
    90e0:	d01d      	beq.n	911e <ev_dma_epout1_handler+0x5a>
    else if (p_state->handler.consumer == NULL)
    90e2:	4b1a      	ldr	r3, [pc, #104]	; (914c <ev_dma_epout1_handler+0x88>)
    90e4:	691b      	ldr	r3, [r3, #16]
    90e6:	bb3b      	cbnz	r3, 9138 <ev_dma_epout1_handler+0x74>
    90e8:	4b19      	ldr	r3, [pc, #100]	; (9150 <ev_dma_epout1_handler+0x8c>)
    90ea:	f3bf 8f5b 	dmb	ish
    90ee:	e853 2f00 	ldrex	r2, [r3]
    90f2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
    90f6:	e843 2100 	strex	r1, r2, [r3]
    90fa:	2900      	cmp	r1, #0
    90fc:	d1f7      	bne.n	90ee <ev_dma_epout1_handler+0x2a>
    90fe:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9102:	2306      	movs	r3, #6
    9104:	f88d 3004 	strb.w	r3, [sp, #4]
    9108:	2301      	movs	r3, #1
    910a:	f88d 3006 	strb.w	r3, [sp, #6]
    910e:	2300      	movs	r3, #0
    9110:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    9114:	4b0f      	ldr	r3, [pc, #60]	; (9154 <ev_dma_epout1_handler+0x90>)
    9116:	681b      	ldr	r3, [r3, #0]
    9118:	a801      	add	r0, sp, #4
    911a:	4798      	blx	r3
    911c:	e00c      	b.n	9138 <ev_dma_epout1_handler+0x74>
    911e:	4b0c      	ldr	r3, [pc, #48]	; (9150 <ev_dma_epout1_handler+0x8c>)
    9120:	f3bf 8f5b 	dmb	ish
    9124:	e853 2f00 	ldrex	r2, [r3]
    9128:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
    912c:	e843 2100 	strex	r1, r2, [r3]
    9130:	2900      	cmp	r1, #0
    9132:	d1f7      	bne.n	9124 <ev_dma_epout1_handler+0x60>
    9134:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    9138:	f7ff fe66 	bl	8e08 <usbd_dmareq_process>
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    913c:	b003      	add	sp, #12
    913e:	f85d fb04 	ldr.w	pc, [sp], #4
    9142:	bf00      	nop
    9144:	40027c1c 	.word	0x40027c1c
    9148:	2000253d 	.word	0x2000253d
    914c:	20001ebc 	.word	0x20001ebc
    9150:	20001e48 	.word	0x20001e48
    9154:	20001fdc 	.word	0x20001fdc

00009158 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    9158:	b500      	push	{lr}
    915a:	b083      	sub	sp, #12
    915c:	f7fe ffec 	bl	8138 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9160:	b110      	cbz	r0, 9168 <ev_dma_epout2_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    9162:	4b1d      	ldr	r3, [pc, #116]	; (91d8 <ev_dma_epout2_handler+0x80>)
    9164:	2200      	movs	r2, #0
    9166:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    9168:	4b1c      	ldr	r3, [pc, #112]	; (91dc <ev_dma_epout2_handler+0x84>)
    916a:	2200      	movs	r2, #0
    916c:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    916e:	4b1c      	ldr	r3, [pc, #112]	; (91e0 <ev_dma_epout2_handler+0x88>)
    9170:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    9174:	2b03      	cmp	r3, #3
    9176:	d01d      	beq.n	91b4 <ev_dma_epout2_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
    9178:	4b19      	ldr	r3, [pc, #100]	; (91e0 <ev_dma_epout2_handler+0x88>)
    917a:	6a1b      	ldr	r3, [r3, #32]
    917c:	bb3b      	cbnz	r3, 91ce <ev_dma_epout2_handler+0x76>
    917e:	4b19      	ldr	r3, [pc, #100]	; (91e4 <ev_dma_epout2_handler+0x8c>)
    9180:	f3bf 8f5b 	dmb	ish
    9184:	e853 2f00 	ldrex	r2, [r3]
    9188:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
    918c:	e843 2100 	strex	r1, r2, [r3]
    9190:	2900      	cmp	r1, #0
    9192:	d1f7      	bne.n	9184 <ev_dma_epout2_handler+0x2c>
    9194:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9198:	2306      	movs	r3, #6
    919a:	f88d 3004 	strb.w	r3, [sp, #4]
    919e:	2302      	movs	r3, #2
    91a0:	f88d 3006 	strb.w	r3, [sp, #6]
    91a4:	2300      	movs	r3, #0
    91a6:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    91aa:	4b0f      	ldr	r3, [pc, #60]	; (91e8 <ev_dma_epout2_handler+0x90>)
    91ac:	681b      	ldr	r3, [r3, #0]
    91ae:	a801      	add	r0, sp, #4
    91b0:	4798      	blx	r3
    91b2:	e00c      	b.n	91ce <ev_dma_epout2_handler+0x76>
    91b4:	4b0b      	ldr	r3, [pc, #44]	; (91e4 <ev_dma_epout2_handler+0x8c>)
    91b6:	f3bf 8f5b 	dmb	ish
    91ba:	e853 2f00 	ldrex	r2, [r3]
    91be:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
    91c2:	e843 2100 	strex	r1, r2, [r3]
    91c6:	2900      	cmp	r1, #0
    91c8:	d1f7      	bne.n	91ba <ev_dma_epout2_handler+0x62>
    91ca:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    91ce:	f7ff fe1b 	bl	8e08 <usbd_dmareq_process>
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    91d2:	b003      	add	sp, #12
    91d4:	f85d fb04 	ldr.w	pc, [sp], #4
    91d8:	40027c1c 	.word	0x40027c1c
    91dc:	2000253d 	.word	0x2000253d
    91e0:	20001ebc 	.word	0x20001ebc
    91e4:	20001e48 	.word	0x20001e48
    91e8:	20001fdc 	.word	0x20001fdc

000091ec <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    91ec:	b500      	push	{lr}
    91ee:	b083      	sub	sp, #12
    91f0:	f7fe ffa2 	bl	8138 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    91f4:	b110      	cbz	r0, 91fc <ev_dma_epout3_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    91f6:	4b1d      	ldr	r3, [pc, #116]	; (926c <ev_dma_epout3_handler+0x80>)
    91f8:	2200      	movs	r2, #0
    91fa:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    91fc:	4b1c      	ldr	r3, [pc, #112]	; (9270 <ev_dma_epout3_handler+0x84>)
    91fe:	2200      	movs	r2, #0
    9200:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9202:	4b1c      	ldr	r3, [pc, #112]	; (9274 <ev_dma_epout3_handler+0x88>)
    9204:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
    9208:	2b03      	cmp	r3, #3
    920a:	d01d      	beq.n	9248 <ev_dma_epout3_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
    920c:	4b19      	ldr	r3, [pc, #100]	; (9274 <ev_dma_epout3_handler+0x88>)
    920e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9210:	bb3b      	cbnz	r3, 9262 <ev_dma_epout3_handler+0x76>
    9212:	4b19      	ldr	r3, [pc, #100]	; (9278 <ev_dma_epout3_handler+0x8c>)
    9214:	f3bf 8f5b 	dmb	ish
    9218:	e853 2f00 	ldrex	r2, [r3]
    921c:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
    9220:	e843 2100 	strex	r1, r2, [r3]
    9224:	2900      	cmp	r1, #0
    9226:	d1f7      	bne.n	9218 <ev_dma_epout3_handler+0x2c>
    9228:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    922c:	2306      	movs	r3, #6
    922e:	f88d 3004 	strb.w	r3, [sp, #4]
    9232:	2303      	movs	r3, #3
    9234:	f88d 3006 	strb.w	r3, [sp, #6]
    9238:	2300      	movs	r3, #0
    923a:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    923e:	4b0f      	ldr	r3, [pc, #60]	; (927c <ev_dma_epout3_handler+0x90>)
    9240:	681b      	ldr	r3, [r3, #0]
    9242:	a801      	add	r0, sp, #4
    9244:	4798      	blx	r3
    9246:	e00c      	b.n	9262 <ev_dma_epout3_handler+0x76>
    9248:	4b0b      	ldr	r3, [pc, #44]	; (9278 <ev_dma_epout3_handler+0x8c>)
    924a:	f3bf 8f5b 	dmb	ish
    924e:	e853 2f00 	ldrex	r2, [r3]
    9252:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
    9256:	e843 2100 	strex	r1, r2, [r3]
    925a:	2900      	cmp	r1, #0
    925c:	d1f7      	bne.n	924e <ev_dma_epout3_handler+0x62>
    925e:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    9262:	f7ff fdd1 	bl	8e08 <usbd_dmareq_process>
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    9266:	b003      	add	sp, #12
    9268:	f85d fb04 	ldr.w	pc, [sp], #4
    926c:	40027c1c 	.word	0x40027c1c
    9270:	2000253d 	.word	0x2000253d
    9274:	20001ebc 	.word	0x20001ebc
    9278:	20001e48 	.word	0x20001e48
    927c:	20001fdc 	.word	0x20001fdc

00009280 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    9280:	b500      	push	{lr}
    9282:	b083      	sub	sp, #12
    9284:	f7fe ff58 	bl	8138 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9288:	b110      	cbz	r0, 9290 <ev_dma_epout4_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    928a:	4b1d      	ldr	r3, [pc, #116]	; (9300 <ev_dma_epout4_handler+0x80>)
    928c:	2200      	movs	r2, #0
    928e:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    9290:	4b1c      	ldr	r3, [pc, #112]	; (9304 <ev_dma_epout4_handler+0x84>)
    9292:	2200      	movs	r2, #0
    9294:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9296:	4b1c      	ldr	r3, [pc, #112]	; (9308 <ev_dma_epout4_handler+0x88>)
    9298:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
    929c:	2b03      	cmp	r3, #3
    929e:	d01d      	beq.n	92dc <ev_dma_epout4_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
    92a0:	4b19      	ldr	r3, [pc, #100]	; (9308 <ev_dma_epout4_handler+0x88>)
    92a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    92a4:	bb3b      	cbnz	r3, 92f6 <ev_dma_epout4_handler+0x76>
    92a6:	4b19      	ldr	r3, [pc, #100]	; (930c <ev_dma_epout4_handler+0x8c>)
    92a8:	f3bf 8f5b 	dmb	ish
    92ac:	e853 2f00 	ldrex	r2, [r3]
    92b0:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    92b4:	e843 2100 	strex	r1, r2, [r3]
    92b8:	2900      	cmp	r1, #0
    92ba:	d1f7      	bne.n	92ac <ev_dma_epout4_handler+0x2c>
    92bc:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    92c0:	2306      	movs	r3, #6
    92c2:	f88d 3004 	strb.w	r3, [sp, #4]
    92c6:	2304      	movs	r3, #4
    92c8:	f88d 3006 	strb.w	r3, [sp, #6]
    92cc:	2300      	movs	r3, #0
    92ce:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    92d2:	4b0f      	ldr	r3, [pc, #60]	; (9310 <ev_dma_epout4_handler+0x90>)
    92d4:	681b      	ldr	r3, [r3, #0]
    92d6:	a801      	add	r0, sp, #4
    92d8:	4798      	blx	r3
    92da:	e00c      	b.n	92f6 <ev_dma_epout4_handler+0x76>
    92dc:	4b0b      	ldr	r3, [pc, #44]	; (930c <ev_dma_epout4_handler+0x8c>)
    92de:	f3bf 8f5b 	dmb	ish
    92e2:	e853 2f00 	ldrex	r2, [r3]
    92e6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    92ea:	e843 2100 	strex	r1, r2, [r3]
    92ee:	2900      	cmp	r1, #0
    92f0:	d1f7      	bne.n	92e2 <ev_dma_epout4_handler+0x62>
    92f2:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    92f6:	f7ff fd87 	bl	8e08 <usbd_dmareq_process>
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    92fa:	b003      	add	sp, #12
    92fc:	f85d fb04 	ldr.w	pc, [sp], #4
    9300:	40027c1c 	.word	0x40027c1c
    9304:	2000253d 	.word	0x2000253d
    9308:	20001ebc 	.word	0x20001ebc
    930c:	20001e48 	.word	0x20001e48
    9310:	20001fdc 	.word	0x20001fdc

00009314 <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    9314:	b500      	push	{lr}
    9316:	b083      	sub	sp, #12
    9318:	f7fe ff0e 	bl	8138 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    931c:	b110      	cbz	r0, 9324 <ev_dma_epout5_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    931e:	4b1d      	ldr	r3, [pc, #116]	; (9394 <ev_dma_epout5_handler+0x80>)
    9320:	2200      	movs	r2, #0
    9322:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    9324:	4b1c      	ldr	r3, [pc, #112]	; (9398 <ev_dma_epout5_handler+0x84>)
    9326:	2200      	movs	r2, #0
    9328:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    932a:	4b1c      	ldr	r3, [pc, #112]	; (939c <ev_dma_epout5_handler+0x88>)
    932c:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
    9330:	2b03      	cmp	r3, #3
    9332:	d01d      	beq.n	9370 <ev_dma_epout5_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
    9334:	4b19      	ldr	r3, [pc, #100]	; (939c <ev_dma_epout5_handler+0x88>)
    9336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    9338:	bb3b      	cbnz	r3, 938a <ev_dma_epout5_handler+0x76>
    933a:	4b19      	ldr	r3, [pc, #100]	; (93a0 <ev_dma_epout5_handler+0x8c>)
    933c:	f3bf 8f5b 	dmb	ish
    9340:	e853 2f00 	ldrex	r2, [r3]
    9344:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
    9348:	e843 2100 	strex	r1, r2, [r3]
    934c:	2900      	cmp	r1, #0
    934e:	d1f7      	bne.n	9340 <ev_dma_epout5_handler+0x2c>
    9350:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9354:	2306      	movs	r3, #6
    9356:	f88d 3004 	strb.w	r3, [sp, #4]
    935a:	2305      	movs	r3, #5
    935c:	f88d 3006 	strb.w	r3, [sp, #6]
    9360:	2300      	movs	r3, #0
    9362:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    9366:	4b0f      	ldr	r3, [pc, #60]	; (93a4 <ev_dma_epout5_handler+0x90>)
    9368:	681b      	ldr	r3, [r3, #0]
    936a:	a801      	add	r0, sp, #4
    936c:	4798      	blx	r3
    936e:	e00c      	b.n	938a <ev_dma_epout5_handler+0x76>
    9370:	4b0b      	ldr	r3, [pc, #44]	; (93a0 <ev_dma_epout5_handler+0x8c>)
    9372:	f3bf 8f5b 	dmb	ish
    9376:	e853 2f00 	ldrex	r2, [r3]
    937a:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
    937e:	e843 2100 	strex	r1, r2, [r3]
    9382:	2900      	cmp	r1, #0
    9384:	d1f7      	bne.n	9376 <ev_dma_epout5_handler+0x62>
    9386:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    938a:	f7ff fd3d 	bl	8e08 <usbd_dmareq_process>
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    938e:	b003      	add	sp, #12
    9390:	f85d fb04 	ldr.w	pc, [sp], #4
    9394:	40027c1c 	.word	0x40027c1c
    9398:	2000253d 	.word	0x2000253d
    939c:	20001ebc 	.word	0x20001ebc
    93a0:	20001e48 	.word	0x20001e48
    93a4:	20001fdc 	.word	0x20001fdc

000093a8 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    93a8:	b500      	push	{lr}
    93aa:	b083      	sub	sp, #12
    93ac:	f7fe fec4 	bl	8138 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    93b0:	b110      	cbz	r0, 93b8 <ev_dma_epout6_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    93b2:	4b1d      	ldr	r3, [pc, #116]	; (9428 <ev_dma_epout6_handler+0x80>)
    93b4:	2200      	movs	r2, #0
    93b6:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    93b8:	4b1c      	ldr	r3, [pc, #112]	; (942c <ev_dma_epout6_handler+0x84>)
    93ba:	2200      	movs	r2, #0
    93bc:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    93be:	4b1c      	ldr	r3, [pc, #112]	; (9430 <ev_dma_epout6_handler+0x88>)
    93c0:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
    93c4:	2b03      	cmp	r3, #3
    93c6:	d01c      	beq.n	9402 <ev_dma_epout6_handler+0x5a>
    else if (p_state->handler.consumer == NULL)
    93c8:	4b19      	ldr	r3, [pc, #100]	; (9430 <ev_dma_epout6_handler+0x88>)
    93ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    93cc:	bb33      	cbnz	r3, 941c <ev_dma_epout6_handler+0x74>
    93ce:	4b19      	ldr	r3, [pc, #100]	; (9434 <ev_dma_epout6_handler+0x8c>)
    93d0:	f3bf 8f5b 	dmb	ish
    93d4:	e853 2f00 	ldrex	r2, [r3]
    93d8:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
    93dc:	e843 2100 	strex	r1, r2, [r3]
    93e0:	2900      	cmp	r1, #0
    93e2:	d1f7      	bne.n	93d4 <ev_dma_epout6_handler+0x2c>
    93e4:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    93e8:	2306      	movs	r3, #6
    93ea:	f88d 3004 	strb.w	r3, [sp, #4]
    93ee:	f88d 3006 	strb.w	r3, [sp, #6]
    93f2:	2300      	movs	r3, #0
    93f4:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    93f8:	4b0f      	ldr	r3, [pc, #60]	; (9438 <ev_dma_epout6_handler+0x90>)
    93fa:	681b      	ldr	r3, [r3, #0]
    93fc:	a801      	add	r0, sp, #4
    93fe:	4798      	blx	r3
    9400:	e00c      	b.n	941c <ev_dma_epout6_handler+0x74>
    9402:	4b0c      	ldr	r3, [pc, #48]	; (9434 <ev_dma_epout6_handler+0x8c>)
    9404:	f3bf 8f5b 	dmb	ish
    9408:	e853 2f00 	ldrex	r2, [r3]
    940c:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
    9410:	e843 2100 	strex	r1, r2, [r3]
    9414:	2900      	cmp	r1, #0
    9416:	d1f7      	bne.n	9408 <ev_dma_epout6_handler+0x60>
    9418:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    941c:	f7ff fcf4 	bl	8e08 <usbd_dmareq_process>
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    9420:	b003      	add	sp, #12
    9422:	f85d fb04 	ldr.w	pc, [sp], #4
    9426:	bf00      	nop
    9428:	40027c1c 	.word	0x40027c1c
    942c:	2000253d 	.word	0x2000253d
    9430:	20001ebc 	.word	0x20001ebc
    9434:	20001e48 	.word	0x20001e48
    9438:	20001fdc 	.word	0x20001fdc

0000943c <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    943c:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    9440:	4b01      	ldr	r3, [pc, #4]	; (9448 <nrfx_usbd_ep_stall+0xc>)
    9442:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
    9446:	4770      	bx	lr
    9448:	40027000 	.word	0x40027000

0000944c <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
    944c:	f010 0f08 	tst.w	r0, #8
    9450:	d117      	bne.n	9482 <nrfx_usbd_ep_stall_check+0x36>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    9452:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    9456:	f010 0f80 	tst.w	r0, #128	; 0x80
    945a:	d10c      	bne.n	9476 <nrfx_usbd_ep_stall_check+0x2a>
        return p_reg->HALTED.EPOUT[epnr];
    945c:	f503 7388 	add.w	r3, r3, #272	; 0x110
    9460:	009b      	lsls	r3, r3, #2
    9462:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9466:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    946a:	6858      	ldr	r0, [r3, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
    946c:	2801      	cmp	r0, #1
    946e:	bf14      	ite	ne
    9470:	2000      	movne	r0, #0
    9472:	2001      	moveq	r0, #1
    9474:	4770      	bx	lr
        return p_reg->HALTED.EPIN[epnr];
    9476:	f503 7384 	add.w	r3, r3, #264	; 0x108
    947a:	4a03      	ldr	r2, [pc, #12]	; (9488 <nrfx_usbd_ep_stall_check+0x3c>)
    947c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    9480:	e7f4      	b.n	946c <nrfx_usbd_ep_stall_check+0x20>
        return false;
    9482:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
    9484:	4770      	bx	lr
    9486:	bf00      	nop
    9488:	40027000 	.word	0x40027000

0000948c <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
    948c:	4b04      	ldr	r3, [pc, #16]	; (94a0 <nrfx_usbd_ep_dtoggle_clear+0x14>)
    948e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
    9492:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    9496:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
    949a:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
    949e:	4770      	bx	lr
    94a0:	40027000 	.word	0x40027000

000094a4 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    94a4:	b510      	push	{r4, lr}
    94a6:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    94a8:	2208      	movs	r2, #8
    94aa:	2100      	movs	r1, #0
    94ac:	f003 ff9e 	bl	d3ec <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    94b0:	4b11      	ldr	r3, [pc, #68]	; (94f8 <nrfx_usbd_setup_get+0x54>)
    94b2:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    94b6:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
    94b8:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    94bc:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
    94be:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    94c2:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    94c4:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    94c8:	0209      	lsls	r1, r1, #8
    94ca:	b289      	uxth	r1, r1
    94cc:	430a      	orrs	r2, r1
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
    94ce:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
    94d0:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    94d4:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    94d6:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    94da:	0209      	lsls	r1, r1, #8
    94dc:	b289      	uxth	r1, r1
    94de:	430a      	orrs	r2, r1
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
    94e0:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
    94e2:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    94e6:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    94e8:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    94ec:	021b      	lsls	r3, r3, #8
    94ee:	b29b      	uxth	r3, r3
    94f0:	4313      	orrs	r3, r2
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
    94f2:	80e3      	strh	r3, [r4, #6]
}
    94f4:	bd10      	pop	{r4, pc}
    94f6:	bf00      	nop
    94f8:	40027000 	.word	0x40027000

000094fc <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    94fc:	4b02      	ldr	r3, [pc, #8]	; (9508 <nrfx_usbd_setup_data_clear+0xc>)
    94fe:	2201      	movs	r2, #1
    9500:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    9502:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
    9504:	4770      	bx	lr
    9506:	bf00      	nop
    9508:	4002704c 	.word	0x4002704c

0000950c <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    950c:	b500      	push	{lr}
    950e:	b083      	sub	sp, #12
    9510:	f7fe fe12 	bl	8138 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9514:	b110      	cbz	r0, 951c <ev_dma_epout0_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    9516:	4b1d      	ldr	r3, [pc, #116]	; (958c <ev_dma_epout0_handler+0x80>)
    9518:	2200      	movs	r2, #0
    951a:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    951c:	4b1c      	ldr	r3, [pc, #112]	; (9590 <ev_dma_epout0_handler+0x84>)
    951e:	2200      	movs	r2, #0
    9520:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9522:	4b1c      	ldr	r3, [pc, #112]	; (9594 <ev_dma_epout0_handler+0x88>)
    9524:	7b9b      	ldrb	r3, [r3, #14]
    9526:	2b03      	cmp	r3, #3
    9528:	d005      	beq.n	9536 <ev_dma_epout0_handler+0x2a>
    else if (p_state->handler.consumer == NULL)
    952a:	4b1a      	ldr	r3, [pc, #104]	; (9594 <ev_dma_epout0_handler+0x88>)
    952c:	681b      	ldr	r3, [r3, #0]
    952e:	b183      	cbz	r3, 9552 <ev_dma_epout0_handler+0x46>
        nrfx_usbd_setup_data_clear();
    9530:	f7ff ffe4 	bl	94fc <nrfx_usbd_setup_data_clear>
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    9534:	e026      	b.n	9584 <ev_dma_epout0_handler+0x78>
    9536:	4b18      	ldr	r3, [pc, #96]	; (9598 <ev_dma_epout0_handler+0x8c>)
    9538:	f3bf 8f5b 	dmb	ish
    953c:	e853 2f00 	ldrex	r2, [r3]
    9540:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    9544:	e843 2100 	strex	r1, r2, [r3]
    9548:	2900      	cmp	r1, #0
    954a:	d1f7      	bne.n	953c <ev_dma_epout0_handler+0x30>
    954c:	f3bf 8f5b 	dmb	ish
    9550:	e018      	b.n	9584 <ev_dma_epout0_handler+0x78>
    9552:	4b11      	ldr	r3, [pc, #68]	; (9598 <ev_dma_epout0_handler+0x8c>)
    9554:	f3bf 8f5b 	dmb	ish
    9558:	e853 2f00 	ldrex	r2, [r3]
    955c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    9560:	e843 2100 	strex	r1, r2, [r3]
    9564:	2900      	cmp	r1, #0
    9566:	d1f7      	bne.n	9558 <ev_dma_epout0_handler+0x4c>
    9568:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    956c:	2306      	movs	r3, #6
    956e:	f88d 3004 	strb.w	r3, [sp, #4]
    9572:	2300      	movs	r3, #0
    9574:	f88d 3006 	strb.w	r3, [sp, #6]
    9578:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    957c:	4b07      	ldr	r3, [pc, #28]	; (959c <ev_dma_epout0_handler+0x90>)
    957e:	681b      	ldr	r3, [r3, #0]
    9580:	a801      	add	r0, sp, #4
    9582:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    9584:	b003      	add	sp, #12
    9586:	f85d fb04 	ldr.w	pc, [sp], #4
    958a:	bf00      	nop
    958c:	40027c1c 	.word	0x40027c1c
    9590:	2000253d 	.word	0x2000253d
    9594:	20001ebc 	.word	0x20001ebc
    9598:	20001e48 	.word	0x20001e48
    959c:	20001fdc 	.word	0x20001fdc

000095a0 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    95a0:	4b02      	ldr	r3, [pc, #8]	; (95ac <nrfx_usbd_setup_clear+0xc>)
    95a2:	2201      	movs	r2, #1
    95a4:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    95a6:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
    95a8:	4770      	bx	lr
    95aa:	bf00      	nop
    95ac:	40027050 	.word	0x40027050

000095b0 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    95b0:	4b02      	ldr	r3, [pc, #8]	; (95bc <nrfx_usbd_setup_stall+0xc>)
    95b2:	2201      	movs	r2, #1
    95b4:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    95b6:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
    95b8:	4770      	bx	lr
    95ba:	bf00      	nop
    95bc:	40027054 	.word	0x40027054

000095c0 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
    95c0:	4b01      	ldr	r3, [pc, #4]	; (95c8 <nrfx_usbd_last_setup_dir_get+0x8>)
    95c2:	7818      	ldrb	r0, [r3, #0]
    95c4:	4770      	bx	lr
    95c6:	bf00      	nop
    95c8:	2000253f 	.word	0x2000253f

000095cc <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    95cc:	b410      	push	{r4}
	__asm__ volatile(
    95ce:	f04f 0320 	mov.w	r3, #32
    95d2:	f3ef 8411 	mrs	r4, BASEPRI
    95d6:	f383 8812 	msr	BASEPRI_MAX, r3
    95da:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_EP_BITPOS(ep);
    95de:	b243      	sxtb	r3, r0
    95e0:	2b00      	cmp	r3, #0
    95e2:	db1e      	blt.n	9622 <nrfx_usbd_transfer_out_drop+0x56>
    95e4:	2210      	movs	r2, #16
    95e6:	f003 030f 	and.w	r3, r3, #15
    95ea:	4413      	add	r3, r2
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
    95ec:	2201      	movs	r2, #1
    95ee:	fa02 f303 	lsl.w	r3, r2, r3
    95f2:	490d      	ldr	r1, [pc, #52]	; (9628 <nrfx_usbd_transfer_out_drop+0x5c>)
    95f4:	680a      	ldr	r2, [r1, #0]
    95f6:	ea22 0203 	bic.w	r2, r2, r3
    95fa:	600a      	str	r2, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
    95fc:	f010 0f08 	tst.w	r0, #8
    9600:	d109      	bne.n	9616 <nrfx_usbd_transfer_out_drop+0x4a>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    9602:	f000 000f 	and.w	r0, r0, #15
    9606:	4b09      	ldr	r3, [pc, #36]	; (962c <nrfx_usbd_transfer_out_drop+0x60>)
    9608:	f500 7094 	add.w	r0, r0, #296	; 0x128
    960c:	2200      	movs	r2, #0
    960e:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    9612:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	__asm__ volatile(
    9616:	f384 8811 	msr	BASEPRI, r4
    961a:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    961e:	bc10      	pop	{r4}
    9620:	4770      	bx	lr
    return NRFX_USBD_EP_BITPOS(ep);
    9622:	2200      	movs	r2, #0
    9624:	e7df      	b.n	95e6 <nrfx_usbd_transfer_out_drop+0x1a>
    9626:	bf00      	nop
    9628:	20001eb8 	.word	0x20001eb8
    962c:	40027000 	.word	0x40027000

00009630 <ev_setup_handler>:
{
    9630:	b5f0      	push	{r4, r5, r6, r7, lr}
    9632:	b083      	sub	sp, #12
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    9634:	4b5e      	ldr	r3, [pc, #376]	; (97b0 <ev_setup_handler+0x180>)
    9636:	f8d3 4480 	ldr.w	r4, [r3, #1152]	; 0x480
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    963a:	4b5e      	ldr	r3, [pc, #376]	; (97b4 <ev_setup_handler+0x184>)
    963c:	681b      	ldr	r3, [r3, #0]
    963e:	43db      	mvns	r3, r3
    9640:	b29b      	uxth	r3, r3
    9642:	4a5d      	ldr	r2, [pc, #372]	; (97b8 <ev_setup_handler+0x188>)
    9644:	6812      	ldr	r2, [r2, #0]
    9646:	4313      	orrs	r3, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    9648:	4a5c      	ldr	r2, [pc, #368]	; (97bc <ev_setup_handler+0x18c>)
    964a:	7810      	ldrb	r0, [r2, #0]
    return NRFX_USBD_EP_BITPOS(ep);
    964c:	f992 2000 	ldrsb.w	r2, [r2]
    9650:	2a00      	cmp	r2, #0
    9652:	db2e      	blt.n	96b2 <ev_setup_handler+0x82>
    9654:	2110      	movs	r1, #16
    9656:	f002 020f 	and.w	r2, r2, #15
    965a:	4411      	add	r1, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    965c:	2201      	movs	r2, #1
    965e:	408a      	lsls	r2, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    9660:	4213      	tst	r3, r2
    9662:	d128      	bne.n	96b6 <ev_setup_handler+0x86>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    9664:	f014 0f80 	tst.w	r4, #128	; 0x80
    9668:	f040 80a0 	bne.w	97ac <ev_setup_handler+0x17c>
    966c:	2200      	movs	r2, #0
    m_last_setup_dir =
    966e:	4b53      	ldr	r3, [pc, #332]	; (97bc <ev_setup_handler+0x18c>)
    9670:	701a      	strb	r2, [r3, #0]
    9672:	4b51      	ldr	r3, [pc, #324]	; (97b8 <ev_setup_handler+0x188>)
    9674:	f3bf 8f5b 	dmb	ish
    9678:	e853 2f00 	ldrex	r2, [r3]
    967c:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
    9680:	e843 2100 	strex	r1, r2, [r3]
    9684:	2900      	cmp	r1, #0
    9686:	d1f7      	bne.n	9678 <ev_setup_handler+0x48>
    9688:	f3bf 8f5b 	dmb	ish
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    968c:	4a49      	ldr	r2, [pc, #292]	; (97b4 <ev_setup_handler+0x184>)
    968e:	6813      	ldr	r3, [r2, #0]
    9690:	f043 0301 	orr.w	r3, r3, #1
    9694:	6013      	str	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
    9696:	2300      	movs	r3, #0
    9698:	f8ad 3005 	strh.w	r3, [sp, #5]
    969c:	f88d 3007 	strb.w	r3, [sp, #7]
    96a0:	2305      	movs	r3, #5
    96a2:	f88d 3004 	strb.w	r3, [sp, #4]
    m_event_handler(&evt);
    96a6:	4b46      	ldr	r3, [pc, #280]	; (97c0 <ev_setup_handler+0x190>)
    96a8:	681b      	ldr	r3, [r3, #0]
    96aa:	a801      	add	r0, sp, #4
    96ac:	4798      	blx	r3
}
    96ae:	b003      	add	sp, #12
    96b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NRFX_USBD_EP_BITPOS(ep);
    96b2:	2100      	movs	r1, #0
    96b4:	e7cf      	b.n	9656 <ev_setup_handler+0x26>
	__asm__ volatile(
    96b6:	f04f 0320 	mov.w	r3, #32
    96ba:	f3ef 8611 	mrs	r6, BASEPRI
    96be:	f383 8812 	msr	BASEPRI_MAX, r3
    96c2:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    96c6:	b243      	sxtb	r3, r0
    96c8:	2b00      	cmp	r3, #0
    96ca:	db24      	blt.n	9716 <ev_setup_handler+0xe6>
    96cc:	4d3d      	ldr	r5, [pc, #244]	; (97c4 <ev_setup_handler+0x194>)
        NRF_USBD_EP_NR_GET(ep));
    96ce:	f000 020f 	and.w	r2, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    96d2:	eb05 1502 	add.w	r5, r5, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
    96d6:	2b00      	cmp	r3, #0
    96d8:	db22      	blt.n	9720 <ev_setup_handler+0xf0>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    96da:	4a37      	ldr	r2, [pc, #220]	; (97b8 <ev_setup_handler+0x188>)
    96dc:	6811      	ldr	r1, [r2, #0]
    return NRFX_USBD_EP_BITPOS(ep);
    96de:	f003 030f 	and.w	r3, r3, #15
    96e2:	f103 0210 	add.w	r2, r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    96e6:	2301      	movs	r3, #1
    96e8:	4093      	lsls	r3, r2
    96ea:	ea33 0201 	bics.w	r2, r3, r1
    96ee:	d114      	bne.n	971a <ev_setup_handler+0xea>
            p_state->handler.consumer = NULL;
    96f0:	2200      	movs	r2, #0
    96f2:	602a      	str	r2, [r5, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    96f4:	4930      	ldr	r1, [pc, #192]	; (97b8 <ev_setup_handler+0x188>)
    96f6:	680a      	ldr	r2, [r1, #0]
    96f8:	ea22 0203 	bic.w	r2, r2, r3
    96fc:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    96fe:	492d      	ldr	r1, [pc, #180]	; (97b4 <ev_setup_handler+0x184>)
    9700:	680a      	ldr	r2, [r1, #0]
    9702:	ea22 0303 	bic.w	r3, r2, r3
    9706:	600b      	str	r3, [r1, #0]
        p_state->status = NRFX_USBD_EP_ABORTED;
    9708:	2303      	movs	r3, #3
    970a:	73ab      	strb	r3, [r5, #14]
	__asm__ volatile(
    970c:	f386 8811 	msr	BASEPRI, r6
    9710:	f3bf 8f6f 	isb	sy
}
    9714:	e7a6      	b.n	9664 <ev_setup_handler+0x34>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9716:	4d2c      	ldr	r5, [pc, #176]	; (97c8 <ev_setup_handler+0x198>)
    9718:	e7d9      	b.n	96ce <ev_setup_handler+0x9e>
            nrfx_usbd_transfer_out_drop(ep);
    971a:	f7ff ff57 	bl	95cc <nrfx_usbd_transfer_out_drop>
    971e:	e7f3      	b.n	9708 <ev_setup_handler+0xd8>
        if(!NRF_USBD_EPISO_CHECK(ep))
    9720:	f010 0f08 	tst.w	r0, #8
    9724:	d10f      	bne.n	9746 <ev_setup_handler+0x116>
            if(ep != NRFX_USBD_EPIN0)
    9726:	2880      	cmp	r0, #128	; 0x80
    9728:	d032      	beq.n	9790 <ev_setup_handler+0x160>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    972a:	f202 32da 	addw	r2, r2, #986	; 0x3da
    972e:	0052      	lsls	r2, r2, #1
    9730:	4926      	ldr	r1, [pc, #152]	; (97cc <ev_setup_handler+0x19c>)
    9732:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    9734:	3104      	adds	r1, #4
    9736:	680a      	ldr	r2, [r1, #0]
    9738:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
    973a:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    973e:	680f      	ldr	r7, [r1, #0]
    9740:	433a      	orrs	r2, r7
    9742:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    9744:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    9746:	4a1b      	ldr	r2, [pc, #108]	; (97b4 <ev_setup_handler+0x184>)
    9748:	6811      	ldr	r1, [r2, #0]
    974a:	4a1b      	ldr	r2, [pc, #108]	; (97b8 <ev_setup_handler+0x188>)
    974c:	6817      	ldr	r7, [r2, #0]
    974e:	ea67 0c01 	orn	ip, r7, r1
    return NRFX_USBD_EP_BITPOS(ep);
    9752:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    9756:	2201      	movs	r2, #1
    9758:	fa02 f303 	lsl.w	r3, r2, r3
    975c:	ea1c 0f03 	tst.w	ip, r3
    9760:	d0d4      	beq.n	970c <ev_setup_handler+0xdc>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    9762:	ea27 0703 	bic.w	r7, r7, r3
    9766:	4a14      	ldr	r2, [pc, #80]	; (97b8 <ev_setup_handler+0x188>)
    9768:	6017      	str	r7, [r2, #0]
            m_ep_ready       |=   1U << ep2bit(ep) ;
    976a:	430b      	orrs	r3, r1
    976c:	4a11      	ldr	r2, [pc, #68]	; (97b4 <ev_setup_handler+0x184>)
    976e:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
    9770:	2300      	movs	r3, #0
    9772:	602b      	str	r3, [r5, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    9774:	2303      	movs	r3, #3
    9776:	73ab      	strb	r3, [r5, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    9778:	2206      	movs	r2, #6
    977a:	f88d 2000 	strb.w	r2, [sp]
    977e:	f88d 0002 	strb.w	r0, [sp, #2]
    9782:	f88d 3003 	strb.w	r3, [sp, #3]
            m_event_handler(&evt);
    9786:	4b0e      	ldr	r3, [pc, #56]	; (97c0 <ev_setup_handler+0x190>)
    9788:	681b      	ldr	r3, [r3, #0]
    978a:	4668      	mov	r0, sp
    978c:	4798      	blx	r3
    978e:	e7bd      	b.n	970c <ev_setup_handler+0xdc>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    9790:	4a0e      	ldr	r2, [pc, #56]	; (97cc <ev_setup_handler+0x19c>)
    9792:	f240 71b4 	movw	r1, #1972	; 0x7b4
    9796:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    9798:	490d      	ldr	r1, [pc, #52]	; (97d0 <ev_setup_handler+0x1a0>)
    979a:	680a      	ldr	r2, [r1, #0]
    979c:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
    979e:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    97a2:	680f      	ldr	r7, [r1, #0]
    97a4:	433a      	orrs	r2, r7
    97a6:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    97a8:	680a      	ldr	r2, [r1, #0]
    97aa:	e7cc      	b.n	9746 <ev_setup_handler+0x116>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    97ac:	2280      	movs	r2, #128	; 0x80
    97ae:	e75e      	b.n	966e <ev_setup_handler+0x3e>
    97b0:	40027000 	.word	0x40027000
    97b4:	20001eb8 	.word	0x20001eb8
    97b8:	20001e48 	.word	0x20001e48
    97bc:	2000253f 	.word	0x2000253f
    97c0:	20001fdc 	.word	0x20001fdc
    97c4:	20001ebc 	.word	0x20001ebc
    97c8:	20001f4c 	.word	0x20001f4c
    97cc:	40027800 	.word	0x40027800
    97d0:	40027804 	.word	0x40027804

000097d4 <nrfx_usbd_irq_handler>:
{
    97d4:	b570      	push	{r4, r5, r6, lr}
    return p_reg->INTENSET;
    97d6:	4b1d      	ldr	r3, [pc, #116]	; (984c <nrfx_usbd_irq_handler+0x78>)
    97d8:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    uint32_t active = 0;
    97dc:	2400      	movs	r4, #0
    while (to_process)
    97de:	e003      	b.n	97e8 <nrfx_usbd_irq_handler+0x14>
        to_process &= ~(1UL << event_nr);
    97e0:	2301      	movs	r3, #1
    97e2:	408b      	lsls	r3, r1
    97e4:	ea22 0203 	bic.w	r2, r2, r3
    while (to_process)
    97e8:	b1aa      	cbz	r2, 9816 <nrfx_usbd_irq_handler+0x42>
        if (nrf_usbd_event_get_and_clear(NRF_USBD,
    97ea:	fa92 f1a2 	rbit	r1, r2
    97ee:	fab1 f181 	clz	r1, r1
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    97f2:	f101 0340 	add.w	r3, r1, #64	; 0x40
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    97f6:	009b      	lsls	r3, r3, #2
    97f8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    97fc:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    9800:	6818      	ldr	r0, [r3, #0]
    if (ret)
    9802:	b110      	cbz	r0, 980a <nrfx_usbd_irq_handler+0x36>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    9804:	2500      	movs	r5, #0
    9806:	601d      	str	r5, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    9808:	681b      	ldr	r3, [r3, #0]
    980a:	2800      	cmp	r0, #0
    980c:	d0e8      	beq.n	97e0 <nrfx_usbd_irq_handler+0xc>
            active |= 1UL << event_nr;
    980e:	2301      	movs	r3, #1
    9810:	408b      	lsls	r3, r1
    9812:	431c      	orrs	r4, r3
    9814:	e7e4      	b.n	97e0 <nrfx_usbd_irq_handler+0xc>
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    9816:	f404 0600 	and.w	r6, r4, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    981a:	f424 0400 	bic.w	r4, r4, #8388608	; 0x800000
    while (active)
    981e:	e00b      	b.n	9838 <nrfx_usbd_irq_handler+0x64>
        m_isr[event_nr]();
    9820:	fa94 f5a4 	rbit	r5, r4
    9824:	fab5 f585 	clz	r5, r5
    9828:	4b09      	ldr	r3, [pc, #36]	; (9850 <nrfx_usbd_irq_handler+0x7c>)
    982a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
    982e:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    9830:	2301      	movs	r3, #1
    9832:	40ab      	lsls	r3, r5
    9834:	ea24 0403 	bic.w	r4, r4, r3
    while (active)
    9838:	2c00      	cmp	r4, #0
    983a:	d1f1      	bne.n	9820 <nrfx_usbd_irq_handler+0x4c>
    usbd_dmareq_process();
    983c:	f7ff fae4 	bl	8e08 <usbd_dmareq_process>
    if (setup_active)
    9840:	b906      	cbnz	r6, 9844 <nrfx_usbd_irq_handler+0x70>
}
    9842:	bd70      	pop	{r4, r5, r6, pc}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    9844:	f7ff fef4 	bl	9630 <ev_setup_handler>
}
    9848:	e7fb      	b.n	9842 <nrfx_usbd_irq_handler+0x6e>
    984a:	bf00      	nop
    984c:	40027000 	.word	0x40027000
    9850:	0000fcdc 	.word	0x0000fcdc

00009854 <nrfx_usbd_ep_enable>:
{
    9854:	b538      	push	{r3, r4, r5, lr}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    9856:	b244      	sxtb	r4, r0
    9858:	2c00      	cmp	r4, #0
    985a:	db22      	blt.n	98a2 <nrfx_usbd_ep_enable+0x4e>
    985c:	4b26      	ldr	r3, [pc, #152]	; (98f8 <nrfx_usbd_ep_enable+0xa4>)
    985e:	f000 010f 	and.w	r1, r0, #15
    9862:	5c5a      	ldrb	r2, [r3, r1]
    9864:	2301      	movs	r3, #1
    9866:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
    9868:	4a24      	ldr	r2, [pc, #144]	; (98fc <nrfx_usbd_ep_enable+0xa8>)
    986a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    if (NRF_USBD_EPIN_CHECK(ep))
    986e:	2c00      	cmp	r4, #0
    9870:	db19      	blt.n	98a6 <nrfx_usbd_ep_enable+0x52>
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
    9872:	4b22      	ldr	r3, [pc, #136]	; (98fc <nrfx_usbd_ep_enable+0xa8>)
    9874:	f8d3 3514 	ldr.w	r3, [r3, #1300]	; 0x514
    9878:	40cb      	lsrs	r3, r1
    987a:	f003 0301 	and.w	r3, r3, #1
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    987e:	b97b      	cbnz	r3, 98a0 <nrfx_usbd_ep_enable+0x4c>
    if (NRF_USBD_EPIN_CHECK(ep))
    9880:	2c00      	cmp	r4, #0
    9882:	db16      	blt.n	98b2 <nrfx_usbd_ep_enable+0x5e>
        p_reg->EPOUTEN |= 1UL << epnr;
    9884:	4d1d      	ldr	r5, [pc, #116]	; (98fc <nrfx_usbd_ep_enable+0xa8>)
    9886:	f8d5 3514 	ldr.w	r3, [r5, #1300]	; 0x514
    988a:	2201      	movs	r2, #1
    988c:	408a      	lsls	r2, r1
    988e:	4313      	orrs	r3, r2
    9890:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    9894:	b121      	cbz	r1, 98a0 <nrfx_usbd_ep_enable+0x4c>
    9896:	2c00      	cmp	r4, #0
    9898:	db02      	blt.n	98a0 <nrfx_usbd_ep_enable+0x4c>
        NRF_USBD_EPOUT_CHECK(ep) &&
    989a:	f010 0f08 	tst.w	r0, #8
    989e:	d011      	beq.n	98c4 <nrfx_usbd_ep_enable+0x70>
}
    98a0:	bd38      	pop	{r3, r4, r5, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    98a2:	4b17      	ldr	r3, [pc, #92]	; (9900 <nrfx_usbd_ep_enable+0xac>)
    98a4:	e7db      	b.n	985e <nrfx_usbd_ep_enable+0xa>
        return 0 != (p_reg->EPINEN & (1UL << epnr));
    98a6:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    98aa:	40cb      	lsrs	r3, r1
    98ac:	f003 0301 	and.w	r3, r3, #1
    98b0:	e7e5      	b.n	987e <nrfx_usbd_ep_enable+0x2a>
        p_reg->EPINEN |= 1UL << epnr;
    98b2:	4d12      	ldr	r5, [pc, #72]	; (98fc <nrfx_usbd_ep_enable+0xa8>)
    98b4:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510
    98b8:	2201      	movs	r2, #1
    98ba:	408a      	lsls	r2, r1
    98bc:	4313      	orrs	r3, r2
    98be:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
    98c2:	e7e7      	b.n	9894 <nrfx_usbd_ep_enable+0x40>
	__asm__ volatile(
    98c4:	f04f 0320 	mov.w	r3, #32
    98c8:	f3ef 8511 	mrs	r5, BASEPRI
    98cc:	f383 8812 	msr	BASEPRI_MAX, r3
    98d0:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    98d4:	f7ff fe7a 	bl	95cc <nrfx_usbd_transfer_out_drop>
    return NRFX_USBD_EP_BITPOS(ep);
    98d8:	f004 040f 	and.w	r4, r4, #15
    98dc:	3410      	adds	r4, #16
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    98de:	2301      	movs	r3, #1
    98e0:	fa03 f404 	lsl.w	r4, r3, r4
    98e4:	4a07      	ldr	r2, [pc, #28]	; (9904 <nrfx_usbd_ep_enable+0xb0>)
    98e6:	6813      	ldr	r3, [r2, #0]
    98e8:	ea23 0304 	bic.w	r3, r3, r4
    98ec:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    98ee:	f385 8811 	msr	BASEPRI, r5
    98f2:	f3bf 8f6f 	isb	sy
}
    98f6:	e7d3      	b.n	98a0 <nrfx_usbd_ep_enable+0x4c>
    98f8:	0000fcbc 	.word	0x0000fcbc
    98fc:	40027000 	.word	0x40027000
    9900:	0000fc9c 	.word	0x0000fc9c
    9904:	20001e48 	.word	0x20001e48

00009908 <nrfx_usbd_ep_stall_clear>:
{
    9908:	b510      	push	{r4, lr}
    990a:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    990c:	f010 0f80 	tst.w	r0, #128	; 0x80
    9910:	d003      	beq.n	991a <nrfx_usbd_ep_stall_clear+0x12>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    9912:	4b06      	ldr	r3, [pc, #24]	; (992c <nrfx_usbd_ep_stall_clear+0x24>)
    9914:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
    9918:	bd10      	pop	{r4, pc}
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    991a:	f7ff fd97 	bl	944c <nrfx_usbd_ep_stall_check>
    991e:	2800      	cmp	r0, #0
    9920:	d0f7      	beq.n	9912 <nrfx_usbd_ep_stall_clear+0xa>
        nrfx_usbd_transfer_out_drop(ep);
    9922:	4620      	mov	r0, r4
    9924:	f7ff fe52 	bl	95cc <nrfx_usbd_transfer_out_drop>
    9928:	e7f3      	b.n	9912 <nrfx_usbd_ep_stall_clear+0xa>
    992a:	bf00      	nop
    992c:	40027000 	.word	0x40027000

00009930 <usbd_ep_abort_all>:
{
    9930:	b5f0      	push	{r4, r5, r6, r7, lr}
    9932:	b083      	sub	sp, #12
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    9934:	4b53      	ldr	r3, [pc, #332]	; (9a84 <usbd_ep_abort_all+0x154>)
    9936:	885b      	ldrh	r3, [r3, #2]
    9938:	4a53      	ldr	r2, [pc, #332]	; (9a88 <usbd_ep_abort_all+0x158>)
    993a:	6814      	ldr	r4, [r2, #0]
    993c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    while (0 != ep_waiting)
    9940:	e00a      	b.n	9958 <usbd_ep_abort_all+0x28>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9942:	f045 0080 	orr.w	r0, r5, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    9946:	f010 0f08 	tst.w	r0, #8
    994a:	d012      	beq.n	9972 <usbd_ep_abort_all+0x42>
        ep_waiting &= ~(1U << bitpos);
    994c:	b2eb      	uxtb	r3, r5
    994e:	2201      	movs	r2, #1
    9950:	fa02 f303 	lsl.w	r3, r2, r3
    9954:	ea24 0403 	bic.w	r4, r4, r3
    while (0 != ep_waiting)
    9958:	2c00      	cmp	r4, #0
    995a:	f000 808c 	beq.w	9a76 <usbd_ep_abort_all+0x146>
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    995e:	fa94 f5a4 	rbit	r5, r4
    9962:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9966:	2d0f      	cmp	r5, #15
    9968:	d9eb      	bls.n	9942 <usbd_ep_abort_all+0x12>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    996a:	f1a5 0010 	sub.w	r0, r5, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    996e:	b2c0      	uxtb	r0, r0
    9970:	e7e9      	b.n	9946 <usbd_ep_abort_all+0x16>
	__asm__ volatile(
    9972:	f04f 0320 	mov.w	r3, #32
    9976:	f3ef 8711 	mrs	r7, BASEPRI
    997a:	f383 8812 	msr	BASEPRI_MAX, r3
    997e:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9982:	b243      	sxtb	r3, r0
    9984:	2b00      	cmp	r3, #0
    9986:	db24      	blt.n	99d2 <usbd_ep_abort_all+0xa2>
    9988:	4e40      	ldr	r6, [pc, #256]	; (9a8c <usbd_ep_abort_all+0x15c>)
        NRF_USBD_EP_NR_GET(ep));
    998a:	f000 020f 	and.w	r2, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    998e:	eb06 1602 	add.w	r6, r6, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
    9992:	2b00      	cmp	r3, #0
    9994:	db22      	blt.n	99dc <usbd_ep_abort_all+0xac>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    9996:	4a3c      	ldr	r2, [pc, #240]	; (9a88 <usbd_ep_abort_all+0x158>)
    9998:	6811      	ldr	r1, [r2, #0]
    return NRFX_USBD_EP_BITPOS(ep);
    999a:	f003 030f 	and.w	r3, r3, #15
    999e:	f103 0210 	add.w	r2, r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    99a2:	2301      	movs	r3, #1
    99a4:	4093      	lsls	r3, r2
    99a6:	ea33 0201 	bics.w	r2, r3, r1
    99aa:	d114      	bne.n	99d6 <usbd_ep_abort_all+0xa6>
            p_state->handler.consumer = NULL;
    99ac:	2200      	movs	r2, #0
    99ae:	6032      	str	r2, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    99b0:	4935      	ldr	r1, [pc, #212]	; (9a88 <usbd_ep_abort_all+0x158>)
    99b2:	680a      	ldr	r2, [r1, #0]
    99b4:	ea22 0203 	bic.w	r2, r2, r3
    99b8:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    99ba:	4932      	ldr	r1, [pc, #200]	; (9a84 <usbd_ep_abort_all+0x154>)
    99bc:	680a      	ldr	r2, [r1, #0]
    99be:	ea22 0303 	bic.w	r3, r2, r3
    99c2:	600b      	str	r3, [r1, #0]
        p_state->status = NRFX_USBD_EP_ABORTED;
    99c4:	2303      	movs	r3, #3
    99c6:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
    99c8:	f387 8811 	msr	BASEPRI, r7
    99cc:	f3bf 8f6f 	isb	sy
}
    99d0:	e7bc      	b.n	994c <usbd_ep_abort_all+0x1c>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    99d2:	4e2f      	ldr	r6, [pc, #188]	; (9a90 <usbd_ep_abort_all+0x160>)
    99d4:	e7d9      	b.n	998a <usbd_ep_abort_all+0x5a>
            nrfx_usbd_transfer_out_drop(ep);
    99d6:	f7ff fdf9 	bl	95cc <nrfx_usbd_transfer_out_drop>
    99da:	e7f3      	b.n	99c4 <usbd_ep_abort_all+0x94>
        if(!NRF_USBD_EPISO_CHECK(ep))
    99dc:	f010 0f08 	tst.w	r0, #8
    99e0:	d111      	bne.n	9a06 <usbd_ep_abort_all+0xd6>
            if(ep != NRFX_USBD_EPIN0)
    99e2:	2880      	cmp	r0, #128	; 0x80
    99e4:	d037      	beq.n	9a56 <usbd_ep_abort_all+0x126>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    99e6:	f202 32da 	addw	r2, r2, #986	; 0x3da
    99ea:	0052      	lsls	r2, r2, #1
    99ec:	4929      	ldr	r1, [pc, #164]	; (9a94 <usbd_ep_abort_all+0x164>)
    99ee:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    99f0:	3104      	adds	r1, #4
    99f2:	680a      	ldr	r2, [r1, #0]
    99f4:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
    99f6:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    99fa:	f8d1 c000 	ldr.w	ip, [r1]
    99fe:	ea42 020c 	orr.w	r2, r2, ip
    9a02:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    9a04:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    9a06:	4a1f      	ldr	r2, [pc, #124]	; (9a84 <usbd_ep_abort_all+0x154>)
    9a08:	6811      	ldr	r1, [r2, #0]
    9a0a:	4a1f      	ldr	r2, [pc, #124]	; (9a88 <usbd_ep_abort_all+0x158>)
    9a0c:	f8d2 c000 	ldr.w	ip, [r2]
    9a10:	ea6c 0e01 	orn	lr, ip, r1
    return NRFX_USBD_EP_BITPOS(ep);
    9a14:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    9a18:	2201      	movs	r2, #1
    9a1a:	fa02 f303 	lsl.w	r3, r2, r3
    9a1e:	ea1e 0f03 	tst.w	lr, r3
    9a22:	d0d1      	beq.n	99c8 <usbd_ep_abort_all+0x98>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    9a24:	ea2c 0203 	bic.w	r2, ip, r3
    9a28:	f8df c05c 	ldr.w	ip, [pc, #92]	; 9a88 <usbd_ep_abort_all+0x158>
    9a2c:	f8cc 2000 	str.w	r2, [ip]
            m_ep_ready       |=   1U << ep2bit(ep) ;
    9a30:	430b      	orrs	r3, r1
    9a32:	4a14      	ldr	r2, [pc, #80]	; (9a84 <usbd_ep_abort_all+0x154>)
    9a34:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
    9a36:	2300      	movs	r3, #0
    9a38:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    9a3a:	2303      	movs	r3, #3
    9a3c:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    9a3e:	2206      	movs	r2, #6
    9a40:	f88d 2004 	strb.w	r2, [sp, #4]
    9a44:	f88d 0006 	strb.w	r0, [sp, #6]
    9a48:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    9a4c:	4b12      	ldr	r3, [pc, #72]	; (9a98 <usbd_ep_abort_all+0x168>)
    9a4e:	681b      	ldr	r3, [r3, #0]
    9a50:	a801      	add	r0, sp, #4
    9a52:	4798      	blx	r3
    9a54:	e7b8      	b.n	99c8 <usbd_ep_abort_all+0x98>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    9a56:	4a0f      	ldr	r2, [pc, #60]	; (9a94 <usbd_ep_abort_all+0x164>)
    9a58:	f240 71b4 	movw	r1, #1972	; 0x7b4
    9a5c:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    9a5e:	490f      	ldr	r1, [pc, #60]	; (9a9c <usbd_ep_abort_all+0x16c>)
    9a60:	680a      	ldr	r2, [r1, #0]
    9a62:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
    9a64:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    9a68:	f8d1 c000 	ldr.w	ip, [r1]
    9a6c:	ea42 020c 	orr.w	r2, r2, ip
    9a70:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    9a72:	680a      	ldr	r2, [r1, #0]
    9a74:	e7c7      	b.n	9a06 <usbd_ep_abort_all+0xd6>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    9a76:	4b03      	ldr	r3, [pc, #12]	; (9a84 <usbd_ep_abort_all+0x154>)
    9a78:	f240 12ff 	movw	r2, #511	; 0x1ff
    9a7c:	601a      	str	r2, [r3, #0]
}
    9a7e:	b003      	add	sp, #12
    9a80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9a82:	bf00      	nop
    9a84:	20001eb8 	.word	0x20001eb8
    9a88:	20001e48 	.word	0x20001e48
    9a8c:	20001ebc 	.word	0x20001ebc
    9a90:	20001f4c 	.word	0x20001f4c
    9a94:	40027800 	.word	0x40027800
    9a98:	20001fdc 	.word	0x20001fdc
    9a9c:	40027804 	.word	0x40027804

00009aa0 <nrfx_usbd_stop>:
{
    9aa0:	b510      	push	{r4, lr}
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9aa2:	4b0c      	ldr	r3, [pc, #48]	; (9ad4 <nrfx_usbd_stop+0x34>)
    9aa4:	2280      	movs	r2, #128	; 0x80
    9aa6:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    9aaa:	2027      	movs	r0, #39	; 0x27
    9aac:	f7fa f8dc 	bl	3c68 <arch_irq_is_enabled>
    9ab0:	b900      	cbnz	r0, 9ab4 <nrfx_usbd_stop+0x14>
}
    9ab2:	bd10      	pop	{r4, pc}
        usbd_ep_abort_all();
    9ab4:	f7ff ff3c 	bl	9930 <usbd_ep_abort_all>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    9ab8:	4c07      	ldr	r4, [pc, #28]	; (9ad8 <nrfx_usbd_stop+0x38>)
    9aba:	2300      	movs	r3, #0
    9abc:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    9ac0:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
    9ac4:	2027      	movs	r0, #39	; 0x27
    9ac6:	f7fa f8bb 	bl	3c40 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    9aca:	f04f 33ff 	mov.w	r3, #4294967295
    9ace:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
    9ad2:	e7ee      	b.n	9ab2 <nrfx_usbd_stop+0x12>
    9ad4:	e000e100 	.word	0xe000e100
    9ad8:	40027000 	.word	0x40027000

00009adc <nrfx_usbd_disable>:
{
    9adc:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
    9ade:	f7ff ffdf 	bl	9aa0 <nrfx_usbd_stop>
    return p_reg->INTENSET;
    9ae2:	4b0b      	ldr	r3, [pc, #44]	; (9b10 <nrfx_usbd_disable+0x34>)
    9ae4:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
    9ae8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    9aec:	2200      	movs	r2, #0
    9aee:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    9af2:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    9af6:	f7fe fb1f 	bl	8138 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9afa:	b110      	cbz	r0, 9b02 <nrfx_usbd_disable+0x26>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    9afc:	4b05      	ldr	r3, [pc, #20]	; (9b14 <nrfx_usbd_disable+0x38>)
    9afe:	2200      	movs	r2, #0
    9b00:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    9b02:	4b05      	ldr	r3, [pc, #20]	; (9b18 <nrfx_usbd_disable+0x3c>)
    9b04:	2200      	movs	r2, #0
    9b06:	701a      	strb	r2, [r3, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    9b08:	4b04      	ldr	r3, [pc, #16]	; (9b1c <nrfx_usbd_disable+0x40>)
    9b0a:	2201      	movs	r2, #1
    9b0c:	701a      	strb	r2, [r3, #0]
}
    9b0e:	bd08      	pop	{r3, pc}
    9b10:	40027000 	.word	0x40027000
    9b14:	40027c1c 	.word	0x40027c1c
    9b18:	2000253d 	.word	0x2000253d
    9b1c:	2000253e 	.word	0x2000253e

00009b20 <nrfx_usbd_suspend>:
{
    9b20:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    9b22:	f04f 0320 	mov.w	r3, #32
    9b26:	f3ef 8511 	mrs	r5, BASEPRI
    9b2a:	f383 8812 	msr	BASEPRI_MAX, r3
    9b2e:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
    9b32:	4b13      	ldr	r3, [pc, #76]	; (9b80 <nrfx_usbd_suspend+0x60>)
    9b34:	781b      	ldrb	r3, [r3, #0]
    9b36:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    9b3a:	b92b      	cbnz	r3, 9b48 <nrfx_usbd_suspend+0x28>
	__asm__ volatile(
    9b3c:	f385 8811 	msr	BASEPRI, r5
    9b40:	f3bf 8f6f 	isb	sy
}
    9b44:	4620      	mov	r0, r4
    9b46:	bd38      	pop	{r3, r4, r5, pc}
        usbd_ep_abort_all();
    9b48:	f7ff fef2 	bl	9930 <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
    9b4c:	4b0d      	ldr	r3, [pc, #52]	; (9b84 <nrfx_usbd_suspend+0x64>)
    9b4e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    9b52:	f413 7f00 	tst.w	r3, #512	; 0x200
    9b56:	d111      	bne.n	9b7c <nrfx_usbd_suspend+0x5c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    9b58:	4b0a      	ldr	r3, [pc, #40]	; (9b84 <nrfx_usbd_suspend+0x64>)
    9b5a:	2201      	movs	r2, #1
    9b5c:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    9b60:	f8d3 252c 	ldr.w	r2, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
    9b64:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    9b68:	f413 7f00 	tst.w	r3, #512	; 0x200
    9b6c:	d0e6      	beq.n	9b3c <nrfx_usbd_suspend+0x1c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    9b6e:	4b05      	ldr	r3, [pc, #20]	; (9b84 <nrfx_usbd_suspend+0x64>)
    9b70:	2400      	movs	r4, #0
    9b72:	f8c3 452c 	str.w	r4, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    9b76:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
}
    9b7a:	e7df      	b.n	9b3c <nrfx_usbd_suspend+0x1c>
    bool suspended = false;
    9b7c:	2400      	movs	r4, #0
    9b7e:	e7dd      	b.n	9b3c <nrfx_usbd_suspend+0x1c>
    9b80:	2000253c 	.word	0x2000253c
    9b84:	40027000 	.word	0x40027000

00009b88 <nrfx_usbd_ep_abort>:
{
    9b88:	b5f0      	push	{r4, r5, r6, r7, lr}
    9b8a:	b083      	sub	sp, #12
	__asm__ volatile(
    9b8c:	f04f 0320 	mov.w	r3, #32
    9b90:	f3ef 8511 	mrs	r5, BASEPRI
    9b94:	f383 8812 	msr	BASEPRI_MAX, r3
    9b98:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9b9c:	b243      	sxtb	r3, r0
    9b9e:	2b00      	cmp	r3, #0
    9ba0:	db25      	blt.n	9bee <nrfx_usbd_ep_abort+0x66>
    9ba2:	4c38      	ldr	r4, [pc, #224]	; (9c84 <nrfx_usbd_ep_abort+0xfc>)
        NRF_USBD_EP_NR_GET(ep));
    9ba4:	f000 020f 	and.w	r2, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9ba8:	eb04 1402 	add.w	r4, r4, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
    9bac:	2b00      	cmp	r3, #0
    9bae:	db23      	blt.n	9bf8 <nrfx_usbd_ep_abort+0x70>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    9bb0:	4a35      	ldr	r2, [pc, #212]	; (9c88 <nrfx_usbd_ep_abort+0x100>)
    9bb2:	6811      	ldr	r1, [r2, #0]
    return NRFX_USBD_EP_BITPOS(ep);
    9bb4:	f003 030f 	and.w	r3, r3, #15
    9bb8:	f103 0210 	add.w	r2, r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    9bbc:	2301      	movs	r3, #1
    9bbe:	4093      	lsls	r3, r2
    9bc0:	ea33 0201 	bics.w	r2, r3, r1
    9bc4:	d115      	bne.n	9bf2 <nrfx_usbd_ep_abort+0x6a>
            p_state->handler.consumer = NULL;
    9bc6:	2200      	movs	r2, #0
    9bc8:	6022      	str	r2, [r4, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    9bca:	492f      	ldr	r1, [pc, #188]	; (9c88 <nrfx_usbd_ep_abort+0x100>)
    9bcc:	680a      	ldr	r2, [r1, #0]
    9bce:	ea22 0203 	bic.w	r2, r2, r3
    9bd2:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    9bd4:	492d      	ldr	r1, [pc, #180]	; (9c8c <nrfx_usbd_ep_abort+0x104>)
    9bd6:	680a      	ldr	r2, [r1, #0]
    9bd8:	ea22 0303 	bic.w	r3, r2, r3
    9bdc:	600b      	str	r3, [r1, #0]
        p_state->status = NRFX_USBD_EP_ABORTED;
    9bde:	2303      	movs	r3, #3
    9be0:	73a3      	strb	r3, [r4, #14]
	__asm__ volatile(
    9be2:	f385 8811 	msr	BASEPRI, r5
    9be6:	f3bf 8f6f 	isb	sy
}
    9bea:	b003      	add	sp, #12
    9bec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9bee:	4c28      	ldr	r4, [pc, #160]	; (9c90 <nrfx_usbd_ep_abort+0x108>)
    9bf0:	e7d8      	b.n	9ba4 <nrfx_usbd_ep_abort+0x1c>
            nrfx_usbd_transfer_out_drop(ep);
    9bf2:	f7ff fceb 	bl	95cc <nrfx_usbd_transfer_out_drop>
    9bf6:	e7f2      	b.n	9bde <nrfx_usbd_ep_abort+0x56>
        if(!NRF_USBD_EPISO_CHECK(ep))
    9bf8:	f010 0f08 	tst.w	r0, #8
    9bfc:	d10f      	bne.n	9c1e <nrfx_usbd_ep_abort+0x96>
            if(ep != NRFX_USBD_EPIN0)
    9bfe:	2880      	cmp	r0, #128	; 0x80
    9c00:	d031      	beq.n	9c66 <nrfx_usbd_ep_abort+0xde>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    9c02:	f202 32da 	addw	r2, r2, #986	; 0x3da
    9c06:	0052      	lsls	r2, r2, #1
    9c08:	4922      	ldr	r1, [pc, #136]	; (9c94 <nrfx_usbd_ep_abort+0x10c>)
    9c0a:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    9c0c:	3104      	adds	r1, #4
    9c0e:	680a      	ldr	r2, [r1, #0]
    9c10:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
    9c12:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    9c16:	680e      	ldr	r6, [r1, #0]
    9c18:	4332      	orrs	r2, r6
    9c1a:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    9c1c:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    9c1e:	4a1b      	ldr	r2, [pc, #108]	; (9c8c <nrfx_usbd_ep_abort+0x104>)
    9c20:	6811      	ldr	r1, [r2, #0]
    9c22:	4a19      	ldr	r2, [pc, #100]	; (9c88 <nrfx_usbd_ep_abort+0x100>)
    9c24:	6816      	ldr	r6, [r2, #0]
    9c26:	ea66 0701 	orn	r7, r6, r1
    return NRFX_USBD_EP_BITPOS(ep);
    9c2a:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    9c2e:	2201      	movs	r2, #1
    9c30:	fa02 f303 	lsl.w	r3, r2, r3
    9c34:	421f      	tst	r7, r3
    9c36:	d0d4      	beq.n	9be2 <nrfx_usbd_ep_abort+0x5a>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    9c38:	ea26 0603 	bic.w	r6, r6, r3
    9c3c:	4a12      	ldr	r2, [pc, #72]	; (9c88 <nrfx_usbd_ep_abort+0x100>)
    9c3e:	6016      	str	r6, [r2, #0]
            m_ep_ready       |=   1U << ep2bit(ep) ;
    9c40:	430b      	orrs	r3, r1
    9c42:	4a12      	ldr	r2, [pc, #72]	; (9c8c <nrfx_usbd_ep_abort+0x104>)
    9c44:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
    9c46:	2300      	movs	r3, #0
    9c48:	6023      	str	r3, [r4, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    9c4a:	2303      	movs	r3, #3
    9c4c:	73a3      	strb	r3, [r4, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    9c4e:	2206      	movs	r2, #6
    9c50:	f88d 2004 	strb.w	r2, [sp, #4]
    9c54:	f88d 0006 	strb.w	r0, [sp, #6]
    9c58:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    9c5c:	4b0e      	ldr	r3, [pc, #56]	; (9c98 <nrfx_usbd_ep_abort+0x110>)
    9c5e:	681b      	ldr	r3, [r3, #0]
    9c60:	a801      	add	r0, sp, #4
    9c62:	4798      	blx	r3
    9c64:	e7bd      	b.n	9be2 <nrfx_usbd_ep_abort+0x5a>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    9c66:	4a0b      	ldr	r2, [pc, #44]	; (9c94 <nrfx_usbd_ep_abort+0x10c>)
    9c68:	f240 71b4 	movw	r1, #1972	; 0x7b4
    9c6c:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    9c6e:	490b      	ldr	r1, [pc, #44]	; (9c9c <nrfx_usbd_ep_abort+0x114>)
    9c70:	680a      	ldr	r2, [r1, #0]
    9c72:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
    9c74:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    9c78:	680e      	ldr	r6, [r1, #0]
    9c7a:	4332      	orrs	r2, r6
    9c7c:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    9c7e:	680a      	ldr	r2, [r1, #0]
    9c80:	e7cd      	b.n	9c1e <nrfx_usbd_ep_abort+0x96>
    9c82:	bf00      	nop
    9c84:	20001ebc 	.word	0x20001ebc
    9c88:	20001e48 	.word	0x20001e48
    9c8c:	20001eb8 	.word	0x20001eb8
    9c90:	20001f4c 	.word	0x20001f4c
    9c94:	40027800 	.word	0x40027800
    9c98:	20001fdc 	.word	0x20001fdc
    9c9c:	40027804 	.word	0x40027804

00009ca0 <nrfx_usbd_ep_disable>:
{
    9ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
    9ca2:	b083      	sub	sp, #12
    9ca4:	4604      	mov	r4, r0
	__asm__ volatile(
    9ca6:	f04f 0320 	mov.w	r3, #32
    9caa:	f3ef 8611 	mrs	r6, BASEPRI
    9cae:	f383 8812 	msr	BASEPRI_MAX, r3
    9cb2:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9cb6:	b243      	sxtb	r3, r0
    9cb8:	2b00      	cmp	r3, #0
    9cba:	db3c      	blt.n	9d36 <nrfx_usbd_ep_disable+0x96>
    9cbc:	4d49      	ldr	r5, [pc, #292]	; (9de4 <nrfx_usbd_ep_disable+0x144>)
        NRF_USBD_EP_NR_GET(ep));
    9cbe:	f004 020f 	and.w	r2, r4, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9cc2:	eb05 1502 	add.w	r5, r5, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
    9cc6:	2b00      	cmp	r3, #0
    9cc8:	db3b      	blt.n	9d42 <nrfx_usbd_ep_disable+0xa2>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    9cca:	4a47      	ldr	r2, [pc, #284]	; (9de8 <nrfx_usbd_ep_disable+0x148>)
    9ccc:	6811      	ldr	r1, [r2, #0]
    return NRFX_USBD_EP_BITPOS(ep);
    9cce:	f003 030f 	and.w	r3, r3, #15
    9cd2:	f103 0210 	add.w	r2, r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    9cd6:	2301      	movs	r3, #1
    9cd8:	4093      	lsls	r3, r2
    9cda:	ea33 0201 	bics.w	r2, r3, r1
    9cde:	d12c      	bne.n	9d3a <nrfx_usbd_ep_disable+0x9a>
            p_state->handler.consumer = NULL;
    9ce0:	2200      	movs	r2, #0
    9ce2:	602a      	str	r2, [r5, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    9ce4:	4940      	ldr	r1, [pc, #256]	; (9de8 <nrfx_usbd_ep_disable+0x148>)
    9ce6:	680a      	ldr	r2, [r1, #0]
    9ce8:	ea22 0203 	bic.w	r2, r2, r3
    9cec:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    9cee:	493f      	ldr	r1, [pc, #252]	; (9dec <nrfx_usbd_ep_disable+0x14c>)
    9cf0:	680a      	ldr	r2, [r1, #0]
    9cf2:	ea22 0303 	bic.w	r3, r2, r3
    9cf6:	600b      	str	r3, [r1, #0]
        p_state->status = NRFX_USBD_EP_ABORTED;
    9cf8:	2303      	movs	r3, #3
    9cfa:	73ab      	strb	r3, [r5, #14]
	__asm__ volatile(
    9cfc:	f386 8811 	msr	BASEPRI, r6
    9d00:	f3bf 8f6f 	isb	sy
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    9d04:	f004 030f 	and.w	r3, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    9d08:	b264      	sxtb	r4, r4
    9d0a:	2c00      	cmp	r4, #0
    9d0c:	db5e      	blt.n	9dcc <nrfx_usbd_ep_disable+0x12c>
        p_reg->EPOUTEN &= ~(1UL << epnr);
    9d0e:	4838      	ldr	r0, [pc, #224]	; (9df0 <nrfx_usbd_ep_disable+0x150>)
    9d10:	f8d0 2514 	ldr.w	r2, [r0, #1300]	; 0x514
    9d14:	2101      	movs	r1, #1
    9d16:	4099      	lsls	r1, r3
    9d18:	ea22 0201 	bic.w	r2, r2, r1
    9d1c:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    9d20:	2c00      	cmp	r4, #0
    9d22:	db5d      	blt.n	9de0 <nrfx_usbd_ep_disable+0x140>
    9d24:	4a33      	ldr	r2, [pc, #204]	; (9df4 <nrfx_usbd_ep_disable+0x154>)
    9d26:	5cd2      	ldrb	r2, [r2, r3]
    9d28:	2301      	movs	r3, #1
    9d2a:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
    9d2c:	4a30      	ldr	r2, [pc, #192]	; (9df0 <nrfx_usbd_ep_disable+0x150>)
    9d2e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    9d32:	b003      	add	sp, #12
    9d34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9d36:	4d30      	ldr	r5, [pc, #192]	; (9df8 <nrfx_usbd_ep_disable+0x158>)
    9d38:	e7c1      	b.n	9cbe <nrfx_usbd_ep_disable+0x1e>
            nrfx_usbd_transfer_out_drop(ep);
    9d3a:	4620      	mov	r0, r4
    9d3c:	f7ff fc46 	bl	95cc <nrfx_usbd_transfer_out_drop>
    9d40:	e7da      	b.n	9cf8 <nrfx_usbd_ep_disable+0x58>
        if(!NRF_USBD_EPISO_CHECK(ep))
    9d42:	f014 0f08 	tst.w	r4, #8
    9d46:	d10f      	bne.n	9d68 <nrfx_usbd_ep_disable+0xc8>
            if(ep != NRFX_USBD_EPIN0)
    9d48:	2c80      	cmp	r4, #128	; 0x80
    9d4a:	d031      	beq.n	9db0 <nrfx_usbd_ep_disable+0x110>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    9d4c:	f202 32da 	addw	r2, r2, #986	; 0x3da
    9d50:	0052      	lsls	r2, r2, #1
    9d52:	492a      	ldr	r1, [pc, #168]	; (9dfc <nrfx_usbd_ep_disable+0x15c>)
    9d54:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    9d56:	3104      	adds	r1, #4
    9d58:	680a      	ldr	r2, [r1, #0]
    9d5a:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
    9d5c:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    9d60:	6808      	ldr	r0, [r1, #0]
    9d62:	4302      	orrs	r2, r0
    9d64:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    9d66:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    9d68:	4a20      	ldr	r2, [pc, #128]	; (9dec <nrfx_usbd_ep_disable+0x14c>)
    9d6a:	6811      	ldr	r1, [r2, #0]
    9d6c:	4a1e      	ldr	r2, [pc, #120]	; (9de8 <nrfx_usbd_ep_disable+0x148>)
    9d6e:	6810      	ldr	r0, [r2, #0]
    9d70:	ea60 0701 	orn	r7, r0, r1
    return NRFX_USBD_EP_BITPOS(ep);
    9d74:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    9d78:	2201      	movs	r2, #1
    9d7a:	fa02 f303 	lsl.w	r3, r2, r3
    9d7e:	421f      	tst	r7, r3
    9d80:	d0bc      	beq.n	9cfc <nrfx_usbd_ep_disable+0x5c>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    9d82:	ea20 0003 	bic.w	r0, r0, r3
    9d86:	4a18      	ldr	r2, [pc, #96]	; (9de8 <nrfx_usbd_ep_disable+0x148>)
    9d88:	6010      	str	r0, [r2, #0]
            m_ep_ready       |=   1U << ep2bit(ep) ;
    9d8a:	430b      	orrs	r3, r1
    9d8c:	4a17      	ldr	r2, [pc, #92]	; (9dec <nrfx_usbd_ep_disable+0x14c>)
    9d8e:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
    9d90:	2300      	movs	r3, #0
    9d92:	602b      	str	r3, [r5, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    9d94:	2303      	movs	r3, #3
    9d96:	73ab      	strb	r3, [r5, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    9d98:	2206      	movs	r2, #6
    9d9a:	f88d 2004 	strb.w	r2, [sp, #4]
    9d9e:	f88d 4006 	strb.w	r4, [sp, #6]
    9da2:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    9da6:	4b16      	ldr	r3, [pc, #88]	; (9e00 <nrfx_usbd_ep_disable+0x160>)
    9da8:	681b      	ldr	r3, [r3, #0]
    9daa:	a801      	add	r0, sp, #4
    9dac:	4798      	blx	r3
    9dae:	e7a5      	b.n	9cfc <nrfx_usbd_ep_disable+0x5c>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    9db0:	4a12      	ldr	r2, [pc, #72]	; (9dfc <nrfx_usbd_ep_disable+0x15c>)
    9db2:	f240 71b4 	movw	r1, #1972	; 0x7b4
    9db6:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    9db8:	4912      	ldr	r1, [pc, #72]	; (9e04 <nrfx_usbd_ep_disable+0x164>)
    9dba:	680a      	ldr	r2, [r1, #0]
    9dbc:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
    9dbe:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    9dc2:	6808      	ldr	r0, [r1, #0]
    9dc4:	4302      	orrs	r2, r0
    9dc6:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    9dc8:	680a      	ldr	r2, [r1, #0]
    9dca:	e7cd      	b.n	9d68 <nrfx_usbd_ep_disable+0xc8>
        p_reg->EPINEN &= ~(1UL << epnr);
    9dcc:	4808      	ldr	r0, [pc, #32]	; (9df0 <nrfx_usbd_ep_disable+0x150>)
    9dce:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    9dd2:	2101      	movs	r1, #1
    9dd4:	4099      	lsls	r1, r3
    9dd6:	ea22 0201 	bic.w	r2, r2, r1
    9dda:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    9dde:	e79f      	b.n	9d20 <nrfx_usbd_ep_disable+0x80>
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    9de0:	4a09      	ldr	r2, [pc, #36]	; (9e08 <nrfx_usbd_ep_disable+0x168>)
    9de2:	e7a0      	b.n	9d26 <nrfx_usbd_ep_disable+0x86>
    9de4:	20001ebc 	.word	0x20001ebc
    9de8:	20001e48 	.word	0x20001e48
    9dec:	20001eb8 	.word	0x20001eb8
    9df0:	40027000 	.word	0x40027000
    9df4:	0000fcbc 	.word	0x0000fcbc
    9df8:	20001f4c 	.word	0x20001f4c
    9dfc:	40027800 	.word	0x40027800
    9e00:	20001fdc 	.word	0x20001fdc
    9e04:	40027804 	.word	0x40027804
    9e08:	0000fc9c 	.word	0x0000fc9c

00009e0c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    9e0c:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    9e0e:	4c11      	ldr	r4, [pc, #68]	; (9e54 <_DoInit+0x48>)
    9e10:	2303      	movs	r3, #3
    9e12:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    9e14:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    9e16:	4a10      	ldr	r2, [pc, #64]	; (9e58 <_DoInit+0x4c>)
    9e18:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    9e1a:	4b10      	ldr	r3, [pc, #64]	; (9e5c <_DoInit+0x50>)
    9e1c:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    9e1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
    9e22:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    9e24:	2300      	movs	r3, #0
    9e26:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    9e28:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    9e2a:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    9e2c:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    9e2e:	4a0c      	ldr	r2, [pc, #48]	; (9e60 <_DoInit+0x54>)
    9e30:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    9e32:	2210      	movs	r2, #16
    9e34:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    9e36:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    9e38:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    9e3a:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    9e3c:	4909      	ldr	r1, [pc, #36]	; (9e64 <_DoInit+0x58>)
    9e3e:	1de0      	adds	r0, r4, #7
    9e40:	f003 fa7b 	bl	d33a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    9e44:	4908      	ldr	r1, [pc, #32]	; (9e68 <_DoInit+0x5c>)
    9e46:	4620      	mov	r0, r4
    9e48:	f003 fa77 	bl	d33a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    9e4c:	2320      	movs	r3, #32
    9e4e:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    9e50:	bd10      	pop	{r4, pc}
    9e52:	bf00      	nop
    9e54:	20002020 	.word	0x20002020
    9e58:	0000fd40 	.word	0x0000fd40
    9e5c:	200020d8 	.word	0x200020d8
    9e60:	200020c8 	.word	0x200020c8
    9e64:	0000fd4c 	.word	0x0000fd4c
    9e68:	0000fd50 	.word	0x0000fd50

00009e6c <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    9e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9e70:	4604      	mov	r4, r0
    9e72:	460e      	mov	r6, r1
    9e74:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    9e76:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    9e7a:	4a2d      	ldr	r2, [pc, #180]	; (9f30 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    9e7c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    9e80:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    9e82:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    9e84:	42bb      	cmp	r3, r7
    9e86:	d84b      	bhi.n	9f20 <SEGGER_RTT_WriteSkipNoLock+0xb4>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    9e88:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    9e8c:	4928      	ldr	r1, [pc, #160]	; (9f30 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    9e8e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    9e92:	f8d2 8020 	ldr.w	r8, [r2, #32]
    9e96:	eba8 0907 	sub.w	r9, r8, r7
    9e9a:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
    9e9e:	4295      	cmp	r5, r2
    9ea0:	d904      	bls.n	9eac <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
    9ea2:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    9ea4:	429d      	cmp	r5, r3
    9ea6:	d916      	bls.n	9ed6 <SEGGER_RTT_WriteSkipNoLock+0x6a>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
    9ea8:	2000      	movs	r0, #0
    9eaa:	e03e      	b.n	9f2a <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    9eac:	f8df 8080 	ldr.w	r8, [pc, #128]	; 9f30 <SEGGER_RTT_WriteSkipNoLock+0xc4>
    9eb0:	1c63      	adds	r3, r4, #1
    9eb2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9eb6:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    9eba:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    9ebc:	462a      	mov	r2, r5
    9ebe:	4631      	mov	r1, r6
    9ec0:	4438      	add	r0, r7
    9ec2:	f003 fa6f 	bl	d3a4 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    9ec6:	443d      	add	r5, r7
    9ec8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    9ecc:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
    9ed0:	6265      	str	r5, [r4, #36]	; 0x24
      return 1;
    9ed2:	2001      	movs	r0, #1
    9ed4:	e029      	b.n	9f2a <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    9ed6:	1c43      	adds	r3, r0, #1
    9ed8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9edc:	4a14      	ldr	r2, [pc, #80]	; (9f30 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    9ede:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    9ee2:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    9ee4:	464a      	mov	r2, r9
    9ee6:	4631      	mov	r1, r6
    9ee8:	4438      	add	r0, r7
    9eea:	f003 fa5b 	bl	d3a4 <memcpy>
      NumBytes -= Rem;
    9eee:	eba7 0708 	sub.w	r7, r7, r8
      if (NumBytes) {
    9ef2:	197f      	adds	r7, r7, r5
    9ef4:	d107      	bne.n	9f06 <SEGGER_RTT_WriteSkipNoLock+0x9a>
      pRing->WrOff = NumBytes;
    9ef6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    9efa:	4b0d      	ldr	r3, [pc, #52]	; (9f30 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    9efc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    9f00:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
    9f02:	2001      	movs	r0, #1
    9f04:	e011      	b.n	9f2a <SEGGER_RTT_WriteSkipNoLock+0xbe>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    9f06:	1c63      	adds	r3, r4, #1
    9f08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9f0c:	4a08      	ldr	r2, [pc, #32]	; (9f30 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    9f0e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
        memcpy((void*)pDst, pData + Rem, NumBytes);
    9f12:	463a      	mov	r2, r7
    9f14:	eb06 0109 	add.w	r1, r6, r9
    9f18:	6858      	ldr	r0, [r3, #4]
    9f1a:	f003 fa43 	bl	d3a4 <memcpy>
    9f1e:	e7ea      	b.n	9ef6 <SEGGER_RTT_WriteSkipNoLock+0x8a>
    Avail = RdOff - WrOff - 1u;
    9f20:	1bdb      	subs	r3, r3, r7
    9f22:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    9f24:	42ab      	cmp	r3, r5
    9f26:	d2c1      	bcs.n	9eac <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
    9f28:	2000      	movs	r0, #0
}
    9f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9f2e:	bf00      	nop
    9f30:	20002020 	.word	0x20002020

00009f34 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    9f34:	4b06      	ldr	r3, [pc, #24]	; (9f50 <SEGGER_RTT_HasDataUp+0x1c>)
    9f36:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    9f3a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    9f3e:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
    9f40:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    9f44:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    9f48:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    9f4a:	1a80      	subs	r0, r0, r2
    9f4c:	4770      	bx	lr
    9f4e:	bf00      	nop
    9f50:	20002020 	.word	0x20002020

00009f54 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    9f54:	4b03      	ldr	r3, [pc, #12]	; (9f64 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    9f56:	4a04      	ldr	r2, [pc, #16]	; (9f68 <z_device_state_init+0x14>)
    9f58:	4293      	cmp	r3, r2
    9f5a:	d201      	bcs.n	9f60 <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
    9f5c:	3318      	adds	r3, #24
    9f5e:	e7fa      	b.n	9f56 <z_device_state_init+0x2>
	}
}
    9f60:	4770      	bx	lr
    9f62:	bf00      	nop
    9f64:	0000ea54 	.word	0x0000ea54
    9f68:	0000eacc 	.word	0x0000eacc

00009f6c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    9f6c:	b570      	push	{r4, r5, r6, lr}
    9f6e:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    9f70:	4b11      	ldr	r3, [pc, #68]	; (9fb8 <z_sys_init_run_level+0x4c>)
    9f72:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    9f76:	e009      	b.n	9f8c <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    9f78:	4240      	negs	r0, r0
    9f7a:	e017      	b.n	9fac <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    9f7c:	68eb      	ldr	r3, [r5, #12]
    9f7e:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    9f80:	68ea      	ldr	r2, [r5, #12]
    9f82:	7853      	ldrb	r3, [r2, #1]
    9f84:	f043 0301 	orr.w	r3, r3, #1
    9f88:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    9f8a:	3408      	adds	r4, #8
    9f8c:	1c73      	adds	r3, r6, #1
    9f8e:	4a0a      	ldr	r2, [pc, #40]	; (9fb8 <z_sys_init_run_level+0x4c>)
    9f90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9f94:	42a3      	cmp	r3, r4
    9f96:	d90d      	bls.n	9fb4 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    9f98:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    9f9a:	6823      	ldr	r3, [r4, #0]
    9f9c:	4628      	mov	r0, r5
    9f9e:	4798      	blx	r3
		if (dev != NULL) {
    9fa0:	2d00      	cmp	r5, #0
    9fa2:	d0f2      	beq.n	9f8a <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    9fa4:	2800      	cmp	r0, #0
    9fa6:	d0eb      	beq.n	9f80 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    9fa8:	2800      	cmp	r0, #0
    9faa:	dbe5      	blt.n	9f78 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    9fac:	28ff      	cmp	r0, #255	; 0xff
    9fae:	dde5      	ble.n	9f7c <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    9fb0:	20ff      	movs	r0, #255	; 0xff
    9fb2:	e7e3      	b.n	9f7c <z_sys_init_run_level+0x10>
		}
	}
}
    9fb4:	bd70      	pop	{r4, r5, r6, pc}
    9fb6:	bf00      	nop
    9fb8:	0000fd58 	.word	0x0000fd58

00009fbc <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
    9fbc:	2804      	cmp	r0, #4
    9fbe:	d80c      	bhi.n	9fda <reason_to_str+0x1e>
    9fc0:	e8df f000 	tbb	[pc, r0]
    9fc4:	07050d03 	.word	0x07050d03
    9fc8:	09          	.byte	0x09
    9fc9:	00          	.byte	0x00
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
    9fca:	4806      	ldr	r0, [pc, #24]	; (9fe4 <reason_to_str+0x28>)
    9fcc:	4770      	bx	lr
		return "Stack overflow";
    9fce:	4806      	ldr	r0, [pc, #24]	; (9fe8 <reason_to_str+0x2c>)
    9fd0:	4770      	bx	lr
		return "Kernel oops";
    9fd2:	4806      	ldr	r0, [pc, #24]	; (9fec <reason_to_str+0x30>)
    9fd4:	4770      	bx	lr
		return "Kernel panic";
    9fd6:	4806      	ldr	r0, [pc, #24]	; (9ff0 <reason_to_str+0x34>)
    9fd8:	4770      	bx	lr
	default:
		return "Unknown error";
    9fda:	4806      	ldr	r0, [pc, #24]	; (9ff4 <reason_to_str+0x38>)
    9fdc:	4770      	bx	lr
		return "Unhandled interrupt";
    9fde:	4806      	ldr	r0, [pc, #24]	; (9ff8 <reason_to_str+0x3c>)
	}
}
    9fe0:	4770      	bx	lr
    9fe2:	bf00      	nop
    9fe4:	0000fdc0 	.word	0x0000fdc0
    9fe8:	0000fd94 	.word	0x0000fd94
    9fec:	0000fda4 	.word	0x0000fda4
    9ff0:	0000fdb0 	.word	0x0000fdb0
    9ff4:	0000fd70 	.word	0x0000fd70
    9ff8:	0000fd80 	.word	0x0000fd80

00009ffc <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    9ffc:	b130      	cbz	r0, a00c <thread_name_get+0x10>
{
    9ffe:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    a000:	f004 f8ad 	bl	e15e <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    a004:	b120      	cbz	r0, a010 <thread_name_get+0x14>
    a006:	7803      	ldrb	r3, [r0, #0]
    a008:	b123      	cbz	r3, a014 <thread_name_get+0x18>
}
    a00a:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
    a00c:	4802      	ldr	r0, [pc, #8]	; (a018 <thread_name_get+0x1c>)
}
    a00e:	4770      	bx	lr
		thread_name = "unknown";
    a010:	4801      	ldr	r0, [pc, #4]	; (a018 <thread_name_get+0x1c>)
    a012:	e7fa      	b.n	a00a <thread_name_get+0xe>
    a014:	4800      	ldr	r0, [pc, #0]	; (a018 <thread_name_get+0x1c>)
	return thread_name;
    a016:	e7f8      	b.n	a00a <thread_name_get+0xe>
    a018:	0000fdd0 	.word	0x0000fdd0

0000a01c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    a01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a020:	b082      	sub	sp, #8
    a022:	4605      	mov	r5, r0
    a024:	460e      	mov	r6, r1
	__asm__ volatile(
    a026:	f04f 0320 	mov.w	r3, #32
    a02a:	f3ef 8711 	mrs	r7, BASEPRI
    a02e:	f383 8812 	msr	BASEPRI_MAX, r3
    a032:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    a036:	f001 f91d 	bl	b274 <z_impl_z_current_get>
    a03a:	4604      	mov	r4, r0
    a03c:	4b29      	ldr	r3, [pc, #164]	; (a0e4 <z_fatal_error+0xc8>)
    a03e:	4a2a      	ldr	r2, [pc, #168]	; (a0e8 <z_fatal_error+0xcc>)
    a040:	1a9b      	subs	r3, r3, r2
    a042:	08db      	lsrs	r3, r3, #3
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    a044:	f04f 0800 	mov.w	r8, #0
    a048:	2201      	movs	r2, #1
    a04a:	f362 0802 	bfi	r8, r2, #0, #3
    a04e:	f36f 08c5 	bfc	r8, #3, #3
    a052:	f363 188f 	bfi	r8, r3, #6, #10
    a056:	4628      	mov	r0, r5
    a058:	f7ff ffb0 	bl	9fbc <reason_to_str>
    a05c:	4602      	mov	r2, r0
    a05e:	f8ad 8000 	strh.w	r8, [sp]
    a062:	2300      	movs	r3, #0
    a064:	4629      	mov	r1, r5
    a066:	4821      	ldr	r0, [pc, #132]	; (a0ec <z_fatal_error+0xd0>)
    a068:	f7f7 fade 	bl	1628 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    a06c:	b11e      	cbz	r6, a076 <z_fatal_error+0x5a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    a06e:	69f3      	ldr	r3, [r6, #28]
    a070:	f3c3 0308 	ubfx	r3, r3, #0, #9
    a074:	bb2b      	cbnz	r3, a0c2 <z_fatal_error+0xa6>
    a076:	4b1b      	ldr	r3, [pc, #108]	; (a0e4 <z_fatal_error+0xc8>)
    a078:	4a1b      	ldr	r2, [pc, #108]	; (a0e8 <z_fatal_error+0xcc>)
    a07a:	1a9b      	subs	r3, r3, r2
    a07c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    a07e:	f04f 0800 	mov.w	r8, #0
    a082:	2201      	movs	r2, #1
    a084:	f362 0802 	bfi	r8, r2, #0, #3
    a088:	f36f 08c5 	bfc	r8, #3, #3
    a08c:	f363 188f 	bfi	r8, r3, #6, #10
    a090:	4620      	mov	r0, r4
    a092:	f7ff ffb3 	bl	9ffc <thread_name_get>
{
	if (IS_ENABLED(CONFIG_LOG_MODE_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
    a096:	f7f7 f98d 	bl	13b4 <z_log_strdup>
    a09a:	4602      	mov	r2, r0
    a09c:	4643      	mov	r3, r8
    a09e:	4621      	mov	r1, r4
    a0a0:	4813      	ldr	r0, [pc, #76]	; (a0f0 <z_fatal_error+0xd4>)
    a0a2:	f7f7 fb35 	bl	1710 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    a0a6:	4631      	mov	r1, r6
    a0a8:	4628      	mov	r0, r5
    a0aa:	f7fc ff87 	bl	6fbc <k_sys_fatal_error_handler>
	__asm__ volatile(
    a0ae:	f387 8811 	msr	BASEPRI, r7
    a0b2:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    a0b6:	4620      	mov	r0, r4
    a0b8:	f7fa fb48 	bl	474c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    a0bc:	b002      	add	sp, #8
    a0be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a0c2:	4b08      	ldr	r3, [pc, #32]	; (a0e4 <z_fatal_error+0xc8>)
    a0c4:	4a08      	ldr	r2, [pc, #32]	; (a0e8 <z_fatal_error+0xcc>)
    a0c6:	1a9b      	subs	r3, r3, r2
    a0c8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
    a0ca:	f04f 0100 	mov.w	r1, #0
    a0ce:	2201      	movs	r2, #1
    a0d0:	f362 0102 	bfi	r1, r2, #0, #3
    a0d4:	f36f 01c5 	bfc	r1, #3, #3
    a0d8:	f363 118f 	bfi	r1, r3, #6, #10
    a0dc:	4805      	ldr	r0, [pc, #20]	; (a0f4 <z_fatal_error+0xd8>)
    a0de:	f7f7 fb53 	bl	1788 <log_0>
    a0e2:	e7c8      	b.n	a076 <z_fatal_error+0x5a>
    a0e4:	0000ec74 	.word	0x0000ec74
    a0e8:	0000ec4c 	.word	0x0000ec4c
    a0ec:	0000fdd8 	.word	0x0000fdd8
    a0f0:	0000fe24 	.word	0x0000fe24
    a0f4:	0000fe00 	.word	0x0000fe00

0000a0f8 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    a0f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a0fa:	b089      	sub	sp, #36	; 0x24
    a0fc:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
    a0fe:	4b15      	ldr	r3, [pc, #84]	; (a154 <init_idle_thread+0x5c>)
    a100:	25b0      	movs	r5, #176	; 0xb0
    a102:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
    a106:	4b14      	ldr	r3, [pc, #80]	; (a158 <init_idle_thread+0x60>)
    a108:	f44f 76b0 	mov.w	r6, #352	; 0x160
    a10c:	fb06 3600 	mla	r6, r6, r0, r3

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
    a110:	af06      	add	r7, sp, #24
    a112:	4603      	mov	r3, r0
    a114:	4a11      	ldr	r2, [pc, #68]	; (a15c <init_idle_thread+0x64>)
    a116:	2108      	movs	r1, #8
    a118:	4638      	mov	r0, r7
    a11a:	f001 fdc1 	bl	bca0 <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    a11e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    a122:	480f      	ldr	r0, [pc, #60]	; (a160 <init_idle_thread+0x68>)
    a124:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
    a128:	9705      	str	r7, [sp, #20]
    a12a:	2301      	movs	r3, #1
    a12c:	9304      	str	r3, [sp, #16]
    a12e:	230f      	movs	r3, #15
    a130:	9303      	str	r3, [sp, #12]
    a132:	2300      	movs	r3, #0
    a134:	9302      	str	r3, [sp, #8]
    a136:	9301      	str	r3, [sp, #4]
    a138:	9400      	str	r4, [sp, #0]
    a13a:	4b0a      	ldr	r3, [pc, #40]	; (a164 <init_idle_thread+0x6c>)
    a13c:	f44f 72a0 	mov.w	r2, #320	; 0x140
    a140:	4631      	mov	r1, r6
    a142:	4628      	mov	r0, r5
    a144:	f000 f95a 	bl	a3fc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a148:	7b6b      	ldrb	r3, [r5, #13]
    a14a:	f023 0304 	bic.w	r3, r3, #4
    a14e:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    a150:	b009      	add	sp, #36	; 0x24
    a152:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a154:	20000678 	.word	0x20000678
    a158:	20003680 	.word	0x20003680
    a15c:	0000fe3c 	.word	0x0000fe3c
    a160:	200024d8 	.word	0x200024d8
    a164:	0000a561 	.word	0x0000a561

0000a168 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
    a168:	b570      	push	{r4, r5, r6, lr}
    a16a:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
    a16c:	f000 ffb6 	bl	b0dc <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
    a170:	4d1b      	ldr	r5, [pc, #108]	; (a1e0 <prepare_multithreading+0x78>)
    a172:	4b1c      	ldr	r3, [pc, #112]	; (a1e4 <prepare_multithreading+0x7c>)
    a174:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    a176:	4b1c      	ldr	r3, [pc, #112]	; (a1e8 <prepare_multithreading+0x80>)
    a178:	9305      	str	r3, [sp, #20]
    a17a:	2301      	movs	r3, #1
    a17c:	9304      	str	r3, [sp, #16]
    a17e:	2400      	movs	r4, #0
    a180:	9403      	str	r4, [sp, #12]
    a182:	9402      	str	r4, [sp, #8]
    a184:	9401      	str	r4, [sp, #4]
    a186:	9400      	str	r4, [sp, #0]
    a188:	4b18      	ldr	r3, [pc, #96]	; (a1ec <prepare_multithreading+0x84>)
    a18a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    a18e:	4918      	ldr	r1, [pc, #96]	; (a1f0 <prepare_multithreading+0x88>)
    a190:	4628      	mov	r0, r5
    a192:	f000 f933 	bl	a3fc <z_setup_new_thread>
    a196:	4606      	mov	r6, r0
    a198:	7b6b      	ldrb	r3, [r5, #13]
    a19a:	f023 0304 	bic.w	r3, r3, #4
    a19e:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
    a1a0:	4628      	mov	r0, r5
    a1a2:	f004 f964 	bl	e46e <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    a1a6:	2c00      	cmp	r4, #0
    a1a8:	dd02      	ble.n	a1b0 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
    a1aa:	4630      	mov	r0, r6
    a1ac:	b006      	add	sp, #24
    a1ae:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
    a1b0:	4620      	mov	r0, r4
    a1b2:	f7ff ffa1 	bl	a0f8 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    a1b6:	4b0f      	ldr	r3, [pc, #60]	; (a1f4 <prepare_multithreading+0x8c>)
    a1b8:	22b0      	movs	r2, #176	; 0xb0
    a1ba:	fb02 3204 	mla	r2, r2, r4, r3
    a1be:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    a1c2:	4b08      	ldr	r3, [pc, #32]	; (a1e4 <prepare_multithreading+0x7c>)
    a1c4:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    a1c8:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
    a1ca:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
    a1cc:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    a1d0:	4a09      	ldr	r2, [pc, #36]	; (a1f8 <prepare_multithreading+0x90>)
    a1d2:	eb02 1241 	add.w	r2, r2, r1, lsl #5
    a1d6:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
    a1da:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    a1dc:	3401      	adds	r4, #1
    a1de:	e7e2      	b.n	a1a6 <prepare_multithreading+0x3e>
    a1e0:	20000728 	.word	0x20000728
    a1e4:	200024d8 	.word	0x200024d8
    a1e8:	0000fe48 	.word	0x0000fe48
    a1ec:	0000a1fd 	.word	0x0000a1fd
    a1f0:	20003260 	.word	0x20003260
    a1f4:	20000678 	.word	0x20000678
    a1f8:	200037e0 	.word	0x200037e0

0000a1fc <bg_thread_main>:
{
    a1fc:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    a1fe:	4b0a      	ldr	r3, [pc, #40]	; (a228 <bg_thread_main+0x2c>)
    a200:	2201      	movs	r2, #1
    a202:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    a204:	2002      	movs	r0, #2
    a206:	f7ff feb1 	bl	9f6c <z_sys_init_run_level>
	boot_banner();
    a20a:	f001 fadf 	bl	b7cc <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    a20e:	2003      	movs	r0, #3
    a210:	f7ff feac 	bl	9f6c <z_sys_init_run_level>
	z_init_static_threads();
    a214:	f000 f956 	bl	a4c4 <z_init_static_threads>
	main();
    a218:	f001 fcf2 	bl	bc00 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    a21c:	4a03      	ldr	r2, [pc, #12]	; (a22c <bg_thread_main+0x30>)
    a21e:	7b13      	ldrb	r3, [r2, #12]
    a220:	f023 0301 	bic.w	r3, r3, #1
    a224:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    a226:	bd08      	pop	{r3, pc}
    a228:	20002540 	.word	0x20002540
    a22c:	20000728 	.word	0x20000728

0000a230 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    a230:	b508      	push	{r3, lr}
    a232:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    a234:	4a01      	ldr	r2, [pc, #4]	; (a23c <switch_to_main_thread+0xc>)
    a236:	4802      	ldr	r0, [pc, #8]	; (a240 <switch_to_main_thread+0x10>)
    a238:	f7f9 fe02 	bl	3e40 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    a23c:	0000a1fd 	.word	0x0000a1fd
    a240:	20000728 	.word	0x20000728

0000a244 <z_bss_zero>:
{
    a244:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    a246:	4803      	ldr	r0, [pc, #12]	; (a254 <z_bss_zero+0x10>)
    a248:	4a03      	ldr	r2, [pc, #12]	; (a258 <z_bss_zero+0x14>)
    a24a:	1a12      	subs	r2, r2, r0
    a24c:	2100      	movs	r1, #0
    a24e:	f003 f8cd 	bl	d3ec <memset>
}
    a252:	bd08      	pop	{r3, pc}
    a254:	200003d0 	.word	0x200003d0
    a258:	20002700 	.word	0x20002700

0000a25c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    a25c:	b500      	push	{lr}
    a25e:	b0ad      	sub	sp, #180	; 0xb4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    a260:	f7f7 f806 	bl	1270 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    a264:	4b1c      	ldr	r3, [pc, #112]	; (a2d8 <z_cstart+0x7c>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    a266:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    a26a:	4c1c      	ldr	r4, [pc, #112]	; (a2dc <z_cstart+0x80>)
    a26c:	6963      	ldr	r3, [r4, #20]
    a26e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    a272:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a274:	23e0      	movs	r3, #224	; 0xe0
    a276:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    a27a:	2500      	movs	r5, #0
    a27c:	77e5      	strb	r5, [r4, #31]
    a27e:	7625      	strb	r5, [r4, #24]
    a280:	7665      	strb	r5, [r4, #25]
    a282:	76a5      	strb	r5, [r4, #26]
    a284:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    a288:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a28a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    a28e:	6263      	str	r3, [r4, #36]	; 0x24
    a290:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    a294:	f7fa f9ca 	bl	462c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    a298:	f7f9 fc56 	bl	3b48 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    a29c:	f04f 33ff 	mov.w	r3, #4294967295
    a2a0:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    a2a2:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    a2a4:	f7fa fb2e 	bl	4904 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    a2a8:	f7fa fa66 	bl	4778 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    a2ac:	2401      	movs	r4, #1
    a2ae:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    a2b2:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    a2b6:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    a2b8:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    a2ba:	4b09      	ldr	r3, [pc, #36]	; (a2e0 <z_cstart+0x84>)
    a2bc:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    a2c0:	f7ff fe48 	bl	9f54 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    a2c4:	4628      	mov	r0, r5
    a2c6:	f7ff fe51 	bl	9f6c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    a2ca:	4620      	mov	r0, r4
    a2cc:	f7ff fe4e 	bl	9f6c <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    a2d0:	f7ff ff4a 	bl	a168 <prepare_multithreading>
    a2d4:	f7ff ffac 	bl	a230 <switch_to_main_thread>
    a2d8:	20004000 	.word	0x20004000
    a2dc:	e000ed00 	.word	0xe000ed00
    a2e0:	200024d8 	.word	0x200024d8

0000a2e4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    a2e4:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    a2e6:	4c06      	ldr	r4, [pc, #24]	; (a300 <init_mem_slab_module+0x1c>)
	int rc = 0;
    a2e8:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    a2ea:	4b06      	ldr	r3, [pc, #24]	; (a304 <init_mem_slab_module+0x20>)
    a2ec:	429c      	cmp	r4, r3
    a2ee:	d206      	bcs.n	a2fe <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    a2f0:	4620      	mov	r0, r4
    a2f2:	f003 fecb 	bl	e08c <create_free_list>
		if (rc < 0) {
    a2f6:	2800      	cmp	r0, #0
    a2f8:	db01      	blt.n	a2fe <init_mem_slab_module+0x1a>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    a2fa:	341c      	adds	r4, #28
    a2fc:	e7f5      	b.n	a2ea <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
    a2fe:	bd10      	pop	{r4, pc}
    a300:	20000234 	.word	0x20000234
    a304:	20000250 	.word	0x20000250

0000a308 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    a308:	b5f0      	push	{r4, r5, r6, r7, lr}
    a30a:	b083      	sub	sp, #12
    a30c:	460c      	mov	r4, r1
    a30e:	461f      	mov	r7, r3
	__asm__ volatile(
    a310:	f04f 0320 	mov.w	r3, #32
    a314:	f3ef 8111 	mrs	r1, BASEPRI
    a318:	f383 8812 	msr	BASEPRI_MAX, r3
    a31c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    a320:	6943      	ldr	r3, [r0, #20]
    a322:	b16b      	cbz	r3, a340 <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
    a324:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    a326:	6943      	ldr	r3, [r0, #20]
    a328:	681b      	ldr	r3, [r3, #0]
    a32a:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    a32c:	6983      	ldr	r3, [r0, #24]
    a32e:	3301      	adds	r3, #1
    a330:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    a332:	2000      	movs	r0, #0
	__asm__ volatile(
    a334:	f381 8811 	msr	BASEPRI, r1
    a338:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    a33c:	b003      	add	sp, #12
    a33e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a340:	4616      	mov	r6, r2
    a342:	f100 0508 	add.w	r5, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    a346:	ea56 0307 	orrs.w	r3, r6, r7
    a34a:	d104      	bne.n	a356 <k_mem_slab_alloc+0x4e>
		*mem = NULL;
    a34c:	2300      	movs	r3, #0
    a34e:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    a350:	f06f 000b 	mvn.w	r0, #11
    a354:	e7ee      	b.n	a334 <k_mem_slab_alloc+0x2c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    a356:	e9cd 6700 	strd	r6, r7, [sp]
    a35a:	4602      	mov	r2, r0
    a35c:	4628      	mov	r0, r5
    a35e:	f000 fd93 	bl	ae88 <z_pend_curr>
		if (result == 0) {
    a362:	2800      	cmp	r0, #0
    a364:	d1ea      	bne.n	a33c <k_mem_slab_alloc+0x34>
			*mem = _current->base.swap_data;
    a366:	4b02      	ldr	r3, [pc, #8]	; (a370 <k_mem_slab_alloc+0x68>)
    a368:	689b      	ldr	r3, [r3, #8]
    a36a:	695b      	ldr	r3, [r3, #20]
    a36c:	6023      	str	r3, [r4, #0]
		return result;
    a36e:	e7e5      	b.n	a33c <k_mem_slab_alloc+0x34>
    a370:	200024d8 	.word	0x200024d8

0000a374 <z_thread_monitor_exit>:
	__asm__ volatile(
    a374:	f04f 0320 	mov.w	r3, #32
    a378:	f3ef 8111 	mrs	r1, BASEPRI
    a37c:	f383 8812 	msr	BASEPRI_MAX, r3
    a380:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    a384:	4b0a      	ldr	r3, [pc, #40]	; (a3b0 <z_thread_monitor_exit+0x3c>)
    a386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    a388:	4283      	cmp	r3, r0
    a38a:	d104      	bne.n	a396 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    a38c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    a38e:	4b08      	ldr	r3, [pc, #32]	; (a3b0 <z_thread_monitor_exit+0x3c>)
    a390:	629a      	str	r2, [r3, #40]	; 0x28
    a392:	e007      	b.n	a3a4 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    a394:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    a396:	b113      	cbz	r3, a39e <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    a398:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    a39a:	4282      	cmp	r2, r0
    a39c:	d1fa      	bne.n	a394 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    a39e:	b10b      	cbz	r3, a3a4 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    a3a0:	6f02      	ldr	r2, [r0, #112]	; 0x70
    a3a2:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    a3a4:	f381 8811 	msr	BASEPRI, r1
    a3a8:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    a3ac:	4770      	bx	lr
    a3ae:	bf00      	nop
    a3b0:	200024d8 	.word	0x200024d8

0000a3b4 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    a3b4:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    a3b6:	4604      	mov	r4, r0
    a3b8:	b140      	cbz	r0, a3cc <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
    a3ba:	2220      	movs	r2, #32
    a3bc:	f104 0074 	add.w	r0, r4, #116	; 0x74
    a3c0:	f002 ffc4 	bl	d34c <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    a3c4:	2000      	movs	r0, #0
    a3c6:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    a3ca:	bd10      	pop	{r4, pc}
		thread = _current;
    a3cc:	4b01      	ldr	r3, [pc, #4]	; (a3d4 <z_impl_k_thread_name_set+0x20>)
    a3ce:	689c      	ldr	r4, [r3, #8]
    a3d0:	e7f3      	b.n	a3ba <z_impl_k_thread_name_set+0x6>
    a3d2:	bf00      	nop
    a3d4:	200024d8 	.word	0x200024d8

0000a3d8 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    a3d8:	b538      	push	{r3, r4, r5, lr}
    a3da:	4614      	mov	r4, r2
    a3dc:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    a3de:	ea54 0305 	orrs.w	r3, r4, r5
    a3e2:	d102      	bne.n	a3ea <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
    a3e4:	f003 febd 	bl	e162 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    a3e8:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    a3ea:	462b      	mov	r3, r5
    a3ec:	4902      	ldr	r1, [pc, #8]	; (a3f8 <schedule_new_thread+0x20>)
    a3ee:	3018      	adds	r0, #24
    a3f0:	f000 fff2 	bl	b3d8 <z_add_timeout>
    a3f4:	e7f8      	b.n	a3e8 <schedule_new_thread+0x10>
    a3f6:	bf00      	nop
    a3f8:	0000e4a7 	.word	0x0000e4a7

0000a3fc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    a3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a400:	b085      	sub	sp, #20
    a402:	4604      	mov	r4, r0
    a404:	460f      	mov	r7, r1
    a406:	4615      	mov	r5, r2
    a408:	461e      	mov	r6, r3
    a40a:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    a40e:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    a412:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    a416:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    a41a:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    a41e:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    a420:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    a422:	9b12      	ldr	r3, [sp, #72]	; 0x48
    a424:	2204      	movs	r2, #4
    a426:	9911      	ldr	r1, [sp, #68]	; 0x44
    a428:	f003 fe9f 	bl	e16a <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    a42c:	462a      	mov	r2, r5
    a42e:	4639      	mov	r1, r7
    a430:	4620      	mov	r0, r4
    a432:	f003 fe7c 	bl	e12e <setup_thread_stack>
    a436:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    a438:	f8cd 8008 	str.w	r8, [sp, #8]
    a43c:	f8cd 9004 	str.w	r9, [sp, #4]
    a440:	f8cd a000 	str.w	sl, [sp]
    a444:	4633      	mov	r3, r6
    a446:	4602      	mov	r2, r0
    a448:	4639      	mov	r1, r7
    a44a:	4620      	mov	r0, r4
    a44c:	f7f9 fca8 	bl	3da0 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    a450:	2300      	movs	r3, #0
    a452:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    a454:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    a456:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    a45a:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    a45e:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    a462:	f04f 0320 	mov.w	r3, #32
    a466:	f3ef 8211 	mrs	r2, BASEPRI
    a46a:	f383 8812 	msr	BASEPRI_MAX, r3
    a46e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    a472:	4b13      	ldr	r3, [pc, #76]	; (a4c0 <z_setup_new_thread+0xc4>)
    a474:	6a99      	ldr	r1, [r3, #40]	; 0x28
    a476:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    a478:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    a47a:	f382 8811 	msr	BASEPRI, r2
    a47e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    a482:	f1bb 0f00 	cmp.w	fp, #0
    a486:	d013      	beq.n	a4b0 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
    a488:	221f      	movs	r2, #31
    a48a:	4659      	mov	r1, fp
    a48c:	f104 0074 	add.w	r0, r4, #116	; 0x74
    a490:	f002 ff5c 	bl	d34c <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    a494:	2300      	movs	r3, #0
    a496:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
		new_thread->base.cpu_mask = -1; /* allow all cpus */
	}
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    a49a:	4b09      	ldr	r3, [pc, #36]	; (a4c0 <z_setup_new_thread+0xc4>)
    a49c:	689b      	ldr	r3, [r3, #8]
    a49e:	b15b      	cbz	r3, a4b8 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    a4a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    a4a4:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, create, new_thread);

	return stack_ptr;
}
    a4a8:	4628      	mov	r0, r5
    a4aa:	b005      	add	sp, #20
    a4ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    a4b0:	2300      	movs	r3, #0
    a4b2:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    a4b6:	e7f0      	b.n	a49a <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    a4b8:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    a4bc:	e7f4      	b.n	a4a8 <z_setup_new_thread+0xac>
    a4be:	bf00      	nop
    a4c0:	200024d8 	.word	0x200024d8

0000a4c4 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    a4c4:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    a4c8:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    a4ca:	4c23      	ldr	r4, [pc, #140]	; (a558 <z_init_static_threads+0x94>)
    a4cc:	4b23      	ldr	r3, [pc, #140]	; (a55c <z_init_static_threads+0x98>)
    a4ce:	429c      	cmp	r4, r3
    a4d0:	d215      	bcs.n	a4fe <z_init_static_threads+0x3a>
		z_setup_new_thread(
    a4d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    a4d4:	9305      	str	r3, [sp, #20]
    a4d6:	6a23      	ldr	r3, [r4, #32]
    a4d8:	9304      	str	r3, [sp, #16]
    a4da:	69e3      	ldr	r3, [r4, #28]
    a4dc:	9303      	str	r3, [sp, #12]
    a4de:	69a3      	ldr	r3, [r4, #24]
    a4e0:	9302      	str	r3, [sp, #8]
    a4e2:	6963      	ldr	r3, [r4, #20]
    a4e4:	9301      	str	r3, [sp, #4]
    a4e6:	6923      	ldr	r3, [r4, #16]
    a4e8:	9300      	str	r3, [sp, #0]
    a4ea:	68e3      	ldr	r3, [r4, #12]
    a4ec:	68a2      	ldr	r2, [r4, #8]
    a4ee:	6861      	ldr	r1, [r4, #4]
    a4f0:	6820      	ldr	r0, [r4, #0]
    a4f2:	f7ff ff83 	bl	a3fc <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    a4f6:	6823      	ldr	r3, [r4, #0]
    a4f8:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    a4fa:	3430      	adds	r4, #48	; 0x30
    a4fc:	e7e6      	b.n	a4cc <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    a4fe:	f000 fb7b 	bl	abf8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    a502:	4c15      	ldr	r4, [pc, #84]	; (a558 <z_init_static_threads+0x94>)
    a504:	e01b      	b.n	a53e <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
    a506:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    a508:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    a50c:	ea4f 79e3 	mov.w	r9, r3, asr #31
		} else {
			return (t * to_hz + off) / from_hz;
    a510:	ea4f 31c9 	mov.w	r1, r9, lsl #15
    a514:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    a518:	03d8      	lsls	r0, r3, #15
    a51a:	f240 35e7 	movw	r5, #999	; 0x3e7
    a51e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a522:	2300      	movs	r3, #0
    a524:	1940      	adds	r0, r0, r5
    a526:	f04f 0500 	mov.w	r5, #0
    a52a:	eb45 0101 	adc.w	r1, r5, r1
    a52e:	f7f5 fde7 	bl	100 <__aeabi_uldivmod>
    a532:	4602      	mov	r2, r0
    a534:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    a536:	4630      	mov	r0, r6
    a538:	f7ff ff4e 	bl	a3d8 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
    a53c:	3430      	adds	r4, #48	; 0x30
    a53e:	4b07      	ldr	r3, [pc, #28]	; (a55c <z_init_static_threads+0x98>)
    a540:	429c      	cmp	r4, r3
    a542:	d204      	bcs.n	a54e <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    a544:	6a63      	ldr	r3, [r4, #36]	; 0x24
    a546:	f1b3 3fff 	cmp.w	r3, #4294967295
    a54a:	d0f7      	beq.n	a53c <z_init_static_threads+0x78>
    a54c:	e7db      	b.n	a506 <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
    a54e:	f000 fd51 	bl	aff4 <k_sched_unlock>
}
    a552:	b006      	add	sp, #24
    a554:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    a558:	20000234 	.word	0x20000234
    a55c:	20000234 	.word	0x20000234

0000a560 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    a560:	b508      	push	{r3, lr}
    a562:	e001      	b.n	a568 <idle+0x8>
	arch_cpu_idle();
    a564:	f7f9 faf6 	bl	3b54 <arch_cpu_idle>
	__asm__ volatile(
    a568:	f04f 0220 	mov.w	r2, #32
    a56c:	f3ef 8311 	mrs	r3, BASEPRI
    a570:	f382 8812 	msr	BASEPRI_MAX, r2
    a574:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    a578:	f004 f8e7 	bl	e74a <z_get_next_timeout_expiry>
    a57c:	4b03      	ldr	r3, [pc, #12]	; (a58c <idle+0x2c>)
    a57e:	6198      	str	r0, [r3, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    a580:	f7f9 f952 	bl	3828 <pm_system_suspend>
    a584:	2800      	cmp	r0, #0
    a586:	d1ef      	bne.n	a568 <idle+0x8>
    a588:	e7ec      	b.n	a564 <idle+0x4>
    a58a:	bf00      	nop
    a58c:	200024d8 	.word	0x200024d8

0000a590 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    a590:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a594:	b083      	sub	sp, #12
    a596:	4604      	mov	r4, r0
    a598:	461d      	mov	r5, r3
    a59a:	f04f 0320 	mov.w	r3, #32
    a59e:	f3ef 8711 	mrs	r7, BASEPRI
    a5a2:	f383 8812 	msr	BASEPRI_MAX, r3
    a5a6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    a5aa:	68c1      	ldr	r1, [r0, #12]
    a5ac:	b999      	cbnz	r1, a5d6 <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    a5ae:	2900      	cmp	r1, #0
    a5b0:	d14f      	bne.n	a652 <z_impl_k_mutex_lock+0xc2>
    a5b2:	4b3a      	ldr	r3, [pc, #232]	; (a69c <z_impl_k_mutex_lock+0x10c>)
    a5b4:	689b      	ldr	r3, [r3, #8]
    a5b6:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    a5ba:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    a5bc:	3101      	adds	r1, #1
    a5be:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    a5c0:	4b36      	ldr	r3, [pc, #216]	; (a69c <z_impl_k_mutex_lock+0x10c>)
    a5c2:	689b      	ldr	r3, [r3, #8]
    a5c4:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    a5c6:	f387 8811 	msr	BASEPRI, r7
    a5ca:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    a5ce:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    a5d0:	b003      	add	sp, #12
    a5d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    a5d6:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    a5d8:	6882      	ldr	r2, [r0, #8]
    a5da:	4b30      	ldr	r3, [pc, #192]	; (a69c <z_impl_k_mutex_lock+0x10c>)
    a5dc:	689b      	ldr	r3, [r3, #8]
    a5de:	429a      	cmp	r2, r3
    a5e0:	d0e5      	beq.n	a5ae <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    a5e2:	ea55 0106 	orrs.w	r1, r5, r6
    a5e6:	bf0c      	ite	eq
    a5e8:	f04f 0801 	moveq.w	r8, #1
    a5ec:	f04f 0800 	movne.w	r8, #0
    a5f0:	d031      	beq.n	a656 <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
    a5f2:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    a5f6:	4649      	mov	r1, r9
    a5f8:	f993 000e 	ldrsb.w	r0, [r3, #14]
    a5fc:	f003 fde8 	bl	e1d0 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    a600:	4581      	cmp	r9, r0
    a602:	dc2f      	bgt.n	a664 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
    a604:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    a608:	9600      	str	r6, [sp, #0]
    a60a:	9501      	str	r5, [sp, #4]
    a60c:	4622      	mov	r2, r4
    a60e:	4639      	mov	r1, r7
    a610:	4823      	ldr	r0, [pc, #140]	; (a6a0 <z_impl_k_mutex_lock+0x110>)
    a612:	f000 fc39 	bl	ae88 <z_pend_curr>
	if (got_mutex == 0) {
    a616:	2800      	cmp	r0, #0
    a618:	d0da      	beq.n	a5d0 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
    a61a:	f04f 0320 	mov.w	r3, #32
    a61e:	f3ef 8511 	mrs	r5, BASEPRI
    a622:	f383 8812 	msr	BASEPRI_MAX, r3
    a626:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    a62a:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a62c:	42a3      	cmp	r3, r4
    a62e:	d01f      	beq.n	a670 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    a630:	b1f3      	cbz	r3, a670 <z_impl_k_mutex_lock+0xe0>
    a632:	6921      	ldr	r1, [r4, #16]
    a634:	f993 000e 	ldrsb.w	r0, [r3, #14]
    a638:	f003 fdca 	bl	e1d0 <new_prio_for_inheritance>
    a63c:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    a63e:	4620      	mov	r0, r4
    a640:	f003 fdd1 	bl	e1e6 <adjust_owner_prio>
    a644:	b9b0      	cbnz	r0, a674 <z_impl_k_mutex_lock+0xe4>
    a646:	f1b9 0f00 	cmp.w	r9, #0
    a64a:	d015      	beq.n	a678 <z_impl_k_mutex_lock+0xe8>
    a64c:	f04f 0801 	mov.w	r8, #1
    a650:	e012      	b.n	a678 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    a652:	6923      	ldr	r3, [r4, #16]
    a654:	e7b1      	b.n	a5ba <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
    a656:	f387 8811 	msr	BASEPRI, r7
    a65a:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    a65e:	f06f 000f 	mvn.w	r0, #15
    a662:	e7b5      	b.n	a5d0 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
    a664:	4601      	mov	r1, r0
    a666:	4620      	mov	r0, r4
    a668:	f003 fdbd 	bl	e1e6 <adjust_owner_prio>
    a66c:	4681      	mov	r9, r0
    a66e:	e7cb      	b.n	a608 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    a670:	6921      	ldr	r1, [r4, #16]
    a672:	e7e4      	b.n	a63e <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    a674:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    a678:	f1b8 0f00 	cmp.w	r8, #0
    a67c:	d106      	bne.n	a68c <z_impl_k_mutex_lock+0xfc>
    a67e:	f385 8811 	msr	BASEPRI, r5
    a682:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    a686:	f06f 000a 	mvn.w	r0, #10
    a68a:	e7a1      	b.n	a5d0 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
    a68c:	4629      	mov	r1, r5
    a68e:	4804      	ldr	r0, [pc, #16]	; (a6a0 <z_impl_k_mutex_lock+0x110>)
    a690:	f000 fa96 	bl	abc0 <z_reschedule>
	return -EAGAIN;
    a694:	f06f 000a 	mvn.w	r0, #10
    a698:	e79a      	b.n	a5d0 <z_impl_k_mutex_lock+0x40>
    a69a:	bf00      	nop
    a69c:	200024d8 	.word	0x200024d8
    a6a0:	20002504 	.word	0x20002504

0000a6a4 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    a6a4:	6882      	ldr	r2, [r0, #8]
    a6a6:	2a00      	cmp	r2, #0
    a6a8:	d035      	beq.n	a716 <z_impl_k_mutex_unlock+0x72>
{
    a6aa:	b538      	push	{r3, r4, r5, lr}
    a6ac:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    a6ae:	4b1d      	ldr	r3, [pc, #116]	; (a724 <z_impl_k_mutex_unlock+0x80>)
    a6b0:	689b      	ldr	r3, [r3, #8]
    a6b2:	429a      	cmp	r2, r3
    a6b4:	d132      	bne.n	a71c <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    a6b6:	7bda      	ldrb	r2, [r3, #15]
    a6b8:	3a01      	subs	r2, #1
    a6ba:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    a6bc:	68c3      	ldr	r3, [r0, #12]
    a6be:	2b01      	cmp	r3, #1
    a6c0:	d905      	bls.n	a6ce <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    a6c2:	3b01      	subs	r3, #1
    a6c4:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    a6c6:	f000 fc95 	bl	aff4 <k_sched_unlock>

	return 0;
    a6ca:	2000      	movs	r0, #0
}
    a6cc:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    a6ce:	f04f 0320 	mov.w	r3, #32
    a6d2:	f3ef 8511 	mrs	r5, BASEPRI
    a6d6:	f383 8812 	msr	BASEPRI_MAX, r3
    a6da:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    a6de:	6901      	ldr	r1, [r0, #16]
    a6e0:	f003 fd81 	bl	e1e6 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    a6e4:	4620      	mov	r0, r4
    a6e6:	f003 ff84 	bl	e5f2 <z_unpend_first_thread>
	mutex->owner = new_owner;
    a6ea:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    a6ec:	b160      	cbz	r0, a708 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    a6ee:	f990 300e 	ldrsb.w	r3, [r0, #14]
    a6f2:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    a6f4:	2300      	movs	r3, #0
    a6f6:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    a6fa:	f003 feb8 	bl	e46e <z_ready_thread>
		z_reschedule(&lock, key);
    a6fe:	4629      	mov	r1, r5
    a700:	4809      	ldr	r0, [pc, #36]	; (a728 <z_impl_k_mutex_unlock+0x84>)
    a702:	f000 fa5d 	bl	abc0 <z_reschedule>
    a706:	e7de      	b.n	a6c6 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    a708:	2300      	movs	r3, #0
    a70a:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
    a70c:	f385 8811 	msr	BASEPRI, r5
    a710:	f3bf 8f6f 	isb	sy
    a714:	e7d7      	b.n	a6c6 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    a716:	f06f 0015 	mvn.w	r0, #21
}
    a71a:	4770      	bx	lr
		return -EPERM;
    a71c:	f04f 30ff 	mov.w	r0, #4294967295
    a720:	e7d4      	b.n	a6cc <z_impl_k_mutex_unlock+0x28>
    a722:	bf00      	nop
    a724:	200024d8 	.word	0x200024d8
    a728:	20002504 	.word	0x20002504

0000a72c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    a72c:	b5d0      	push	{r4, r6, r7, lr}
    a72e:	b082      	sub	sp, #8
    a730:	4601      	mov	r1, r0
    a732:	4616      	mov	r6, r2
    a734:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    a736:	4602      	mov	r2, r0
	__asm__ volatile(
    a738:	f04f 0320 	mov.w	r3, #32
    a73c:	f3ef 8411 	mrs	r4, BASEPRI
    a740:	f383 8812 	msr	BASEPRI_MAX, r3
    a744:	f3bf 8f6f 	isb	sy
    a748:	f852 0b08 	ldr.w	r0, [r2], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    a74c:	b188      	cbz	r0, a772 <z_impl_k_queue_get+0x46>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    a74e:	6803      	ldr	r3, [r0, #0]
    a750:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
    a754:	600b      	str	r3, [r1, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
    a756:	684a      	ldr	r2, [r1, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    a758:	4290      	cmp	r0, r2
    a75a:	d008      	beq.n	a76e <z_impl_k_queue_get+0x42>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    a75c:	2101      	movs	r1, #1
    a75e:	f003 fdc2 	bl	e2e6 <z_queue_node_peek>
	__asm__ volatile(
    a762:	f384 8811 	msr	BASEPRI, r4
    a766:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    a76a:	b002      	add	sp, #8
    a76c:	bdd0      	pop	{r4, r6, r7, pc}
	list->tail = node;
    a76e:	604b      	str	r3, [r1, #4]
}
    a770:	e7f4      	b.n	a75c <z_impl_k_queue_get+0x30>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    a772:	ea56 0307 	orrs.w	r3, r6, r7
    a776:	d00a      	beq.n	a78e <z_impl_k_queue_get+0x62>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    a778:	e9cd 6700 	strd	r6, r7, [sp]
    a77c:	4621      	mov	r1, r4
    a77e:	4610      	mov	r0, r2
    a780:	f000 fb82 	bl	ae88 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    a784:	b948      	cbnz	r0, a79a <z_impl_k_queue_get+0x6e>
    a786:	4b06      	ldr	r3, [pc, #24]	; (a7a0 <z_impl_k_queue_get+0x74>)
    a788:	689b      	ldr	r3, [r3, #8]
    a78a:	6958      	ldr	r0, [r3, #20]
    a78c:	e7ed      	b.n	a76a <z_impl_k_queue_get+0x3e>
    a78e:	f384 8811 	msr	BASEPRI, r4
    a792:	f3bf 8f6f 	isb	sy
		return NULL;
    a796:	2000      	movs	r0, #0
    a798:	e7e7      	b.n	a76a <z_impl_k_queue_get+0x3e>
	return (ret != 0) ? NULL : _current->base.swap_data;
    a79a:	2000      	movs	r0, #0
    a79c:	e7e5      	b.n	a76a <z_impl_k_queue_get+0x3e>
    a79e:	bf00      	nop
    a7a0:	200024d8 	.word	0x200024d8

0000a7a4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    a7a4:	b538      	push	{r3, r4, r5, lr}
    a7a6:	4604      	mov	r4, r0
	__asm__ volatile(
    a7a8:	f04f 0320 	mov.w	r3, #32
    a7ac:	f3ef 8511 	mrs	r5, BASEPRI
    a7b0:	f383 8812 	msr	BASEPRI_MAX, r3
    a7b4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    a7b8:	f003 ff1b 	bl	e5f2 <z_unpend_first_thread>

	if (thread != NULL) {
    a7bc:	b148      	cbz	r0, a7d2 <z_impl_k_sem_give+0x2e>
    a7be:	2200      	movs	r2, #0
    a7c0:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    a7c4:	f003 fe53 	bl	e46e <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    a7c8:	4629      	mov	r1, r5
    a7ca:	4807      	ldr	r0, [pc, #28]	; (a7e8 <z_impl_k_sem_give+0x44>)
    a7cc:	f000 f9f8 	bl	abc0 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    a7d0:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    a7d2:	68a3      	ldr	r3, [r4, #8]
    a7d4:	68e2      	ldr	r2, [r4, #12]
    a7d6:	4293      	cmp	r3, r2
    a7d8:	d003      	beq.n	a7e2 <z_impl_k_sem_give+0x3e>
    a7da:	2201      	movs	r2, #1
    a7dc:	4413      	add	r3, r2
    a7de:	60a3      	str	r3, [r4, #8]
}
    a7e0:	e7f2      	b.n	a7c8 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    a7e2:	2200      	movs	r2, #0
    a7e4:	e7fa      	b.n	a7dc <z_impl_k_sem_give+0x38>
    a7e6:	bf00      	nop
    a7e8:	20002504 	.word	0x20002504

0000a7ec <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    a7ec:	b530      	push	{r4, r5, lr}
    a7ee:	b083      	sub	sp, #12
    a7f0:	461d      	mov	r5, r3
    a7f2:	f04f 0320 	mov.w	r3, #32
    a7f6:	f3ef 8111 	mrs	r1, BASEPRI
    a7fa:	f383 8812 	msr	BASEPRI_MAX, r3
    a7fe:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    a802:	6883      	ldr	r3, [r0, #8]
    a804:	b143      	cbz	r3, a818 <z_impl_k_sem_take+0x2c>
		sem->count--;
    a806:	3b01      	subs	r3, #1
    a808:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    a80a:	f381 8811 	msr	BASEPRI, r1
    a80e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    a812:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    a814:	b003      	add	sp, #12
    a816:	bd30      	pop	{r4, r5, pc}
    a818:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    a81a:	ea54 0305 	orrs.w	r3, r4, r5
    a81e:	d006      	beq.n	a82e <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    a820:	e9cd 4500 	strd	r4, r5, [sp]
    a824:	4602      	mov	r2, r0
    a826:	4805      	ldr	r0, [pc, #20]	; (a83c <z_impl_k_sem_take+0x50>)
    a828:	f000 fb2e 	bl	ae88 <z_pend_curr>
	return ret;
    a82c:	e7f2      	b.n	a814 <z_impl_k_sem_take+0x28>
    a82e:	f381 8811 	msr	BASEPRI, r1
    a832:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    a836:	f06f 000f 	mvn.w	r0, #15
    a83a:	e7eb      	b.n	a814 <z_impl_k_sem_take+0x28>
    a83c:	20002504 	.word	0x20002504

0000a840 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
    a840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a842:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
    a844:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    a846:	f013 0f02 	tst.w	r3, #2
    a84a:	d15b      	bne.n	a904 <submit_to_queue_locked+0xc4>
    a84c:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    a84e:	f013 0f04 	tst.w	r3, #4
    a852:	d15c      	bne.n	a90e <submit_to_queue_locked+0xce>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
    a854:	680b      	ldr	r3, [r1, #0]
    a856:	2b00      	cmp	r3, #0
    a858:	d037      	beq.n	a8ca <submit_to_queue_locked+0x8a>
	return (*flagp & BIT(bit)) != 0U;
    a85a:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    a85c:	f013 0f01 	tst.w	r3, #1
    a860:	d036      	beq.n	a8d0 <submit_to_queue_locked+0x90>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
    a862:	68a3      	ldr	r3, [r4, #8]
    a864:	602b      	str	r3, [r5, #0]
			ret = 2;
    a866:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
    a868:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
    a86a:	2e00      	cmp	r6, #0
    a86c:	d03e      	beq.n	a8ec <submit_to_queue_locked+0xac>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    a86e:	4b29      	ldr	r3, [pc, #164]	; (a914 <submit_to_queue_locked+0xd4>)
    a870:	689b      	ldr	r3, [r3, #8]
    a872:	42b3      	cmp	r3, r6
    a874:	d02e      	beq.n	a8d4 <submit_to_queue_locked+0x94>
    a876:	2300      	movs	r3, #0
    a878:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
    a87a:	f8d6 30c8 	ldr.w	r3, [r6, #200]	; 0xc8
    a87e:	f3c3 0180 	ubfx	r1, r3, #2, #1
    a882:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    a886:	f013 0f01 	tst.w	r3, #1
    a88a:	d032      	beq.n	a8f2 <submit_to_queue_locked+0xb2>
	} else if (draining && !chained) {
    a88c:	b101      	cbz	r1, a890 <submit_to_queue_locked+0x50>
    a88e:	b39a      	cbz	r2, a8f8 <submit_to_queue_locked+0xb8>
	} else if (plugged && !draining) {
    a890:	b100      	cbz	r0, a894 <submit_to_queue_locked+0x54>
    a892:	b3a1      	cbz	r1, a8fe <submit_to_queue_locked+0xbe>
	parent->next = child;
    a894:	2300      	movs	r3, #0
    a896:	6023      	str	r3, [r4, #0]
	return list->tail;
    a898:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
Z_GENLIST_APPEND(slist, snode)
    a89c:	b30b      	cbz	r3, a8e2 <submit_to_queue_locked+0xa2>
	parent->next = child;
    a89e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    a8a0:	f8c6 40b4 	str.w	r4, [r6, #180]	; 0xb4
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    a8a4:	2200      	movs	r2, #0
    a8a6:	4611      	mov	r1, r2
    a8a8:	f106 00b8 	add.w	r0, r6, #184	; 0xb8
    a8ac:	f003 fee1 	bl	e672 <z_sched_wake>
		ret = 1;
    a8b0:	2001      	movs	r0, #1

		if (rc < 0) {
    a8b2:	2800      	cmp	r0, #0
    a8b4:	db06      	blt.n	a8c4 <submit_to_queue_locked+0x84>
	*flagp |= BIT(bit);
    a8b6:	68e3      	ldr	r3, [r4, #12]
    a8b8:	f043 0304 	orr.w	r3, r3, #4
    a8bc:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
    a8be:	682b      	ldr	r3, [r5, #0]
    a8c0:	60a3      	str	r3, [r4, #8]
    a8c2:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
    a8c4:	2800      	cmp	r0, #0
    a8c6:	dc21      	bgt.n	a90c <submit_to_queue_locked+0xcc>
    a8c8:	e01e      	b.n	a908 <submit_to_queue_locked+0xc8>
			*queuep = work->queue;
    a8ca:	6883      	ldr	r3, [r0, #8]
    a8cc:	600b      	str	r3, [r1, #0]
    a8ce:	e7c4      	b.n	a85a <submit_to_queue_locked+0x1a>
		ret = 1;
    a8d0:	2701      	movs	r7, #1
    a8d2:	e7c9      	b.n	a868 <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    a8d4:	f003 fc3d 	bl	e152 <k_is_in_isr>
    a8d8:	b908      	cbnz	r0, a8de <submit_to_queue_locked+0x9e>
    a8da:	2301      	movs	r3, #1
    a8dc:	e7cc      	b.n	a878 <submit_to_queue_locked+0x38>
    a8de:	2300      	movs	r3, #0
    a8e0:	e7ca      	b.n	a878 <submit_to_queue_locked+0x38>
    a8e2:	f8c6 40b4 	str.w	r4, [r6, #180]	; 0xb4
	list->head = node;
    a8e6:	f8c6 40b0 	str.w	r4, [r6, #176]	; 0xb0
}
    a8ea:	e7db      	b.n	a8a4 <submit_to_queue_locked+0x64>
		return -EINVAL;
    a8ec:	f06f 0015 	mvn.w	r0, #21
    a8f0:	e7df      	b.n	a8b2 <submit_to_queue_locked+0x72>
		ret = -ENODEV;
    a8f2:	f06f 0012 	mvn.w	r0, #18
    a8f6:	e7dc      	b.n	a8b2 <submit_to_queue_locked+0x72>
		ret = -EBUSY;
    a8f8:	f06f 000f 	mvn.w	r0, #15
    a8fc:	e7d9      	b.n	a8b2 <submit_to_queue_locked+0x72>
		ret = -EBUSY;
    a8fe:	f06f 000f 	mvn.w	r0, #15
    a902:	e7d6      	b.n	a8b2 <submit_to_queue_locked+0x72>
		ret = -EBUSY;
    a904:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
    a908:	2300      	movs	r3, #0
    a90a:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
    a90c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
    a90e:	2000      	movs	r0, #0
    a910:	e7fa      	b.n	a908 <submit_to_queue_locked+0xc8>
    a912:	bf00      	nop
    a914:	200024d8 	.word	0x200024d8

0000a918 <finalize_cancel_locked>:
{
    a918:	b570      	push	{r4, r5, r6, lr}
    a91a:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
    a91c:	68c3      	ldr	r3, [r0, #12]
    a91e:	f023 0302 	bic.w	r3, r3, #2
    a922:	60c3      	str	r3, [r0, #12]
	return list->head;
    a924:	4b19      	ldr	r3, [pc, #100]	; (a98c <finalize_cancel_locked+0x74>)
    a926:	6818      	ldr	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    a928:	b1e8      	cbz	r0, a966 <finalize_cancel_locked+0x4e>
    a92a:	4604      	mov	r4, r0
Z_GENLIST_PEEK_NEXT(slist, snode)
    a92c:	b100      	cbz	r0, a930 <finalize_cancel_locked+0x18>
	return node->next;
    a92e:	6804      	ldr	r4, [r0, #0]
    a930:	2600      	movs	r6, #0
    a932:	e01d      	b.n	a970 <finalize_cancel_locked+0x58>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    a934:	b15e      	cbz	r6, a94e <finalize_cancel_locked+0x36>
	return node->next;
    a936:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
    a938:	6033      	str	r3, [r6, #0]
	return list->tail;
    a93a:	4b14      	ldr	r3, [pc, #80]	; (a98c <finalize_cancel_locked+0x74>)
    a93c:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    a93e:	4298      	cmp	r0, r3
    a940:	d00e      	beq.n	a960 <finalize_cancel_locked+0x48>
	parent->next = child;
    a942:	2300      	movs	r3, #0
    a944:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    a948:	f7ff ff2c 	bl	a7a4 <z_impl_k_sem_give>
}
    a94c:	e015      	b.n	a97a <finalize_cancel_locked+0x62>
	return node->next;
    a94e:	6802      	ldr	r2, [r0, #0]
	list->head = node;
    a950:	4b0e      	ldr	r3, [pc, #56]	; (a98c <finalize_cancel_locked+0x74>)
    a952:	601a      	str	r2, [r3, #0]
	return list->tail;
    a954:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    a956:	4298      	cmp	r0, r3
    a958:	d1f3      	bne.n	a942 <finalize_cancel_locked+0x2a>
	list->tail = node;
    a95a:	4b0c      	ldr	r3, [pc, #48]	; (a98c <finalize_cancel_locked+0x74>)
    a95c:	605a      	str	r2, [r3, #4]
}
    a95e:	e7f0      	b.n	a942 <finalize_cancel_locked+0x2a>
	list->tail = node;
    a960:	4b0a      	ldr	r3, [pc, #40]	; (a98c <finalize_cancel_locked+0x74>)
    a962:	605e      	str	r6, [r3, #4]
}
    a964:	e7ed      	b.n	a942 <finalize_cancel_locked+0x2a>
    a966:	4604      	mov	r4, r0
    a968:	e7e2      	b.n	a930 <finalize_cancel_locked+0x18>
    a96a:	4623      	mov	r3, r4
    a96c:	4620      	mov	r0, r4
    a96e:	461c      	mov	r4, r3
    a970:	b150      	cbz	r0, a988 <finalize_cancel_locked+0x70>
		if (wc->work == work) {
    a972:	6843      	ldr	r3, [r0, #4]
    a974:	42ab      	cmp	r3, r5
    a976:	d0dd      	beq.n	a934 <finalize_cancel_locked+0x1c>
			prev = &wc->node;
    a978:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    a97a:	2c00      	cmp	r4, #0
    a97c:	d0f5      	beq.n	a96a <finalize_cancel_locked+0x52>
    a97e:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    a980:	2c00      	cmp	r4, #0
    a982:	d0f3      	beq.n	a96c <finalize_cancel_locked+0x54>
	return node->next;
    a984:	6823      	ldr	r3, [r4, #0]
    a986:	e7f1      	b.n	a96c <finalize_cancel_locked+0x54>
}
    a988:	bd70      	pop	{r4, r5, r6, pc}
    a98a:	bf00      	nop
    a98c:	20002504 	.word	0x20002504

0000a990 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    a990:	b5f0      	push	{r4, r5, r6, r7, lr}
    a992:	b085      	sub	sp, #20
    a994:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
    a996:	e016      	b.n	a9c6 <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
    a998:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
	*flagp &= ~BIT(bit);
    a99c:	f023 0204 	bic.w	r2, r3, #4
    a9a0:	f8c5 20c8 	str.w	r2, [r5, #200]	; 0xc8
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
    a9a4:	f013 0f04 	tst.w	r3, #4
    a9a8:	d158      	bne.n	aa5c <work_queue_main+0xcc>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
    a9aa:	2300      	movs	r3, #0
    a9ac:	9302      	str	r3, [sp, #8]
    a9ae:	f04f 32ff 	mov.w	r2, #4294967295
    a9b2:	f04f 33ff 	mov.w	r3, #4294967295
    a9b6:	e9cd 2300 	strd	r2, r3, [sp]
    a9ba:	f105 02b8 	add.w	r2, r5, #184	; 0xb8
    a9be:	4631      	mov	r1, r6
    a9c0:	482e      	ldr	r0, [pc, #184]	; (aa7c <work_queue_main+0xec>)
    a9c2:	f000 fc95 	bl	b2f0 <z_sched_wait>
	__asm__ volatile(
    a9c6:	f04f 0320 	mov.w	r3, #32
    a9ca:	f3ef 8611 	mrs	r6, BASEPRI
    a9ce:	f383 8812 	msr	BASEPRI_MAX, r3
    a9d2:	f3bf 8f6f 	isb	sy
	return list->head;
    a9d6:	f8d5 40b0 	ldr.w	r4, [r5, #176]	; 0xb0
Z_GENLIST_GET(slist, snode)
    a9da:	2c00      	cmp	r4, #0
    a9dc:	d0dc      	beq.n	a998 <work_queue_main+0x8>
	return node->next;
    a9de:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    a9e0:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
	return list->tail;
    a9e4:	f8d5 20b4 	ldr.w	r2, [r5, #180]	; 0xb4
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    a9e8:	4294      	cmp	r4, r2
    a9ea:	d034      	beq.n	aa56 <work_queue_main+0xc6>
	*flagp |= BIT(bit);
    a9ec:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    a9f0:	f043 0302 	orr.w	r3, r3, #2
    a9f4:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
    a9f8:	68e3      	ldr	r3, [r4, #12]
    a9fa:	f043 0301 	orr.w	r3, r3, #1
	*flagp &= ~BIT(bit);
    a9fe:	f023 0304 	bic.w	r3, r3, #4
    aa02:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
    aa04:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
    aa06:	2c00      	cmp	r4, #0
    aa08:	d0cf      	beq.n	a9aa <work_queue_main+0x1a>
	__asm__ volatile(
    aa0a:	f386 8811 	msr	BASEPRI, r6
    aa0e:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    aa12:	4620      	mov	r0, r4
    aa14:	4798      	blx	r3
	__asm__ volatile(
    aa16:	f04f 0320 	mov.w	r3, #32
    aa1a:	f3ef 8611 	mrs	r6, BASEPRI
    aa1e:	f383 8812 	msr	BASEPRI_MAX, r3
    aa22:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    aa26:	68e3      	ldr	r3, [r4, #12]
    aa28:	f023 0301 	bic.w	r3, r3, #1
    aa2c:	60e3      	str	r3, [r4, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    aa2e:	f013 0f02 	tst.w	r3, #2
    aa32:	d11e      	bne.n	aa72 <work_queue_main+0xe2>
	*flagp &= ~BIT(bit);
    aa34:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    aa38:	f023 0302 	bic.w	r3, r3, #2
    aa3c:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
	return (*flagp & BIT(bit)) != 0U;
    aa40:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
    aa44:	f386 8811 	msr	BASEPRI, r6
    aa48:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    aa4c:	2b00      	cmp	r3, #0
    aa4e:	d1ba      	bne.n	a9c6 <work_queue_main+0x36>
	z_impl_k_yield();
    aa50:	f000 fb50 	bl	b0f4 <z_impl_k_yield>
}
    aa54:	e7b7      	b.n	a9c6 <work_queue_main+0x36>
	list->tail = node;
    aa56:	f8c5 30b4 	str.w	r3, [r5, #180]	; 0xb4
}
    aa5a:	e7c7      	b.n	a9ec <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    aa5c:	f105 07c0 	add.w	r7, r5, #192	; 0xc0
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    aa60:	2200      	movs	r2, #0
    aa62:	2101      	movs	r1, #1
    aa64:	4638      	mov	r0, r7
    aa66:	f003 fe04 	bl	e672 <z_sched_wake>
    aa6a:	2800      	cmp	r0, #0
    aa6c:	d1f8      	bne.n	aa60 <work_queue_main+0xd0>
		k_work_handler_t handler = NULL;
    aa6e:	2300      	movs	r3, #0
    aa70:	e7c9      	b.n	aa06 <work_queue_main+0x76>
			finalize_cancel_locked(work);
    aa72:	4620      	mov	r0, r4
    aa74:	f7ff ff50 	bl	a918 <finalize_cancel_locked>
    aa78:	e7dc      	b.n	aa34 <work_queue_main+0xa4>
    aa7a:	bf00      	nop
    aa7c:	20002504 	.word	0x20002504

0000aa80 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    aa80:	b5f0      	push	{r4, r5, r6, r7, lr}
    aa82:	b089      	sub	sp, #36	; 0x24
    aa84:	4604      	mov	r4, r0
    aa86:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
    aa88:	2000      	movs	r0, #0
    aa8a:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
	list->tail = NULL;
    aa8e:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    aa92:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
	list->head = (sys_dnode_t *)list;
    aa96:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = (sys_dnode_t *)list;
    aa9a:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    aa9e:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
    aaa2:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
    aaa6:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    aaaa:	b1fd      	cbz	r5, aaec <k_work_queue_start+0x6c>
    aaac:	7928      	ldrb	r0, [r5, #4]
    aaae:	b9f8      	cbnz	r0, aaf0 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    aab0:	2001      	movs	r0, #1
	*flagp = flags;
    aab2:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    aab6:	f04f 36ff 	mov.w	r6, #4294967295
    aaba:	f04f 37ff 	mov.w	r7, #4294967295
    aabe:	e9cd 6706 	strd	r6, r7, [sp, #24]
    aac2:	2000      	movs	r0, #0
    aac4:	9004      	str	r0, [sp, #16]
    aac6:	9303      	str	r3, [sp, #12]
    aac8:	9002      	str	r0, [sp, #8]
    aaca:	9001      	str	r0, [sp, #4]
    aacc:	9400      	str	r4, [sp, #0]
    aace:	4b0a      	ldr	r3, [pc, #40]	; (aaf8 <k_work_queue_start+0x78>)
    aad0:	4620      	mov	r0, r4
    aad2:	f003 fb55 	bl	e180 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    aad6:	b125      	cbz	r5, aae2 <k_work_queue_start+0x62>
    aad8:	6829      	ldr	r1, [r5, #0]
    aada:	b111      	cbz	r1, aae2 <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
    aadc:	4620      	mov	r0, r4
    aade:	f7ff fc69 	bl	a3b4 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    aae2:	4620      	mov	r0, r4
    aae4:	f003 fb3d 	bl	e162 <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    aae8:	b009      	add	sp, #36	; 0x24
    aaea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
    aaec:	2001      	movs	r0, #1
    aaee:	e7e0      	b.n	aab2 <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
    aaf0:	f240 1001 	movw	r0, #257	; 0x101
    aaf4:	e7dd      	b.n	aab2 <k_work_queue_start+0x32>
    aaf6:	bf00      	nop
    aaf8:	0000a991 	.word	0x0000a991

0000aafc <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
    aafc:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    aafe:	f1b3 3fff 	cmp.w	r3, #4294967295
    ab02:	bf08      	it	eq
    ab04:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    ab08:	d100      	bne.n	ab0c <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
    ab0a:	bd38      	pop	{r3, r4, r5, pc}
    ab0c:	4902      	ldr	r1, [pc, #8]	; (ab18 <add_thread_timeout+0x1c>)
    ab0e:	3018      	adds	r0, #24
    ab10:	f000 fc62 	bl	b3d8 <z_add_timeout>
    ab14:	e7f9      	b.n	ab0a <add_thread_timeout+0xe>
    ab16:	bf00      	nop
    ab18:	0000e4a7 	.word	0x0000e4a7

0000ab1c <z_reset_time_slice>:
{
    ab1c:	b508      	push	{r3, lr}
	if (slice_time != 0) {
    ab1e:	4b08      	ldr	r3, [pc, #32]	; (ab40 <z_reset_time_slice+0x24>)
    ab20:	681b      	ldr	r3, [r3, #0]
    ab22:	b903      	cbnz	r3, ab26 <z_reset_time_slice+0xa>
}
    ab24:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    ab26:	f7fc fa3f 	bl	6fa8 <sys_clock_elapsed>
    ab2a:	4603      	mov	r3, r0
    ab2c:	4a04      	ldr	r2, [pc, #16]	; (ab40 <z_reset_time_slice+0x24>)
    ab2e:	6810      	ldr	r0, [r2, #0]
    ab30:	4403      	add	r3, r0
    ab32:	4a04      	ldr	r2, [pc, #16]	; (ab44 <z_reset_time_slice+0x28>)
    ab34:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    ab36:	2100      	movs	r1, #0
    ab38:	f003 fe1d 	bl	e776 <z_set_timeout_expiry>
}
    ab3c:	e7f2      	b.n	ab24 <z_reset_time_slice+0x8>
    ab3e:	bf00      	nop
    ab40:	20002514 	.word	0x20002514
    ab44:	200024d8 	.word	0x200024d8

0000ab48 <k_sched_time_slice_set>:
{
    ab48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ab4c:	4606      	mov	r6, r0
    ab4e:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
    ab50:	2300      	movs	r3, #0
	__asm__ volatile(
    ab52:	f04f 0220 	mov.w	r2, #32
    ab56:	f3ef 8711 	mrs	r7, BASEPRI
    ab5a:	f382 8812 	msr	BASEPRI_MAX, r2
    ab5e:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    ab62:	e009      	b.n	ab78 <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
    ab64:	4b13      	ldr	r3, [pc, #76]	; (abb4 <k_sched_time_slice_set+0x6c>)
    ab66:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
    ab6a:	f7ff ffd7 	bl	ab1c <z_reset_time_slice>
	__asm__ volatile(
    ab6e:	f387 8811 	msr	BASEPRI, r7
    ab72:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    ab76:	2301      	movs	r3, #1
    ab78:	b9cb      	cbnz	r3, abae <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
    ab7a:	2300      	movs	r3, #0
    ab7c:	4a0e      	ldr	r2, [pc, #56]	; (abb8 <k_sched_time_slice_set+0x70>)
    ab7e:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    ab80:	0c75      	lsrs	r5, r6, #17
    ab82:	03f4      	lsls	r4, r6, #15
    ab84:	f240 30e7 	movw	r0, #999	; 0x3e7
    ab88:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    ab8c:	2300      	movs	r3, #0
    ab8e:	1820      	adds	r0, r4, r0
    ab90:	f04f 0100 	mov.w	r1, #0
    ab94:	eb45 0101 	adc.w	r1, r5, r1
    ab98:	f7f5 fab2 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    ab9c:	4b07      	ldr	r3, [pc, #28]	; (abbc <k_sched_time_slice_set+0x74>)
    ab9e:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    aba0:	2e00      	cmp	r6, #0
    aba2:	dddf      	ble.n	ab64 <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
    aba4:	2802      	cmp	r0, #2
    aba6:	bfb8      	it	lt
    aba8:	2002      	movlt	r0, #2
    abaa:	6018      	str	r0, [r3, #0]
    abac:	e7da      	b.n	ab64 <k_sched_time_slice_set+0x1c>
}
    abae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    abb2:	bf00      	nop
    abb4:	20002510 	.word	0x20002510
    abb8:	200024d8 	.word	0x200024d8
    abbc:	20002514 	.word	0x20002514

0000abc0 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    abc0:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    abc2:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    abc4:	b921      	cbnz	r1, abd0 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    abc6:	f3ef 8305 	mrs	r3, IPSR
    abca:	b913      	cbnz	r3, abd2 <z_reschedule+0x12>
    abcc:	2101      	movs	r1, #1
    abce:	e000      	b.n	abd2 <z_reschedule+0x12>
    abd0:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    abd2:	f011 0f01 	tst.w	r1, #1
    abd6:	d007      	beq.n	abe8 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
    abd8:	4b06      	ldr	r3, [pc, #24]	; (abf4 <z_reschedule+0x34>)
    abda:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    abdc:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    abde:	429a      	cmp	r2, r3
    abe0:	d002      	beq.n	abe8 <z_reschedule+0x28>
	ret = arch_swap(key);
    abe2:	f7f9 f885 	bl	3cf0 <arch_swap>
		z_swap(lock, key);
    abe6:	e003      	b.n	abf0 <z_reschedule+0x30>
    abe8:	f380 8811 	msr	BASEPRI, r0
    abec:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    abf0:	bd08      	pop	{r3, pc}
    abf2:	bf00      	nop
    abf4:	200024d8 	.word	0x200024d8

0000abf8 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    abf8:	2300      	movs	r3, #0
	__asm__ volatile(
    abfa:	f04f 0220 	mov.w	r2, #32
    abfe:	f3ef 8111 	mrs	r1, BASEPRI
    ac02:	f382 8812 	msr	BASEPRI_MAX, r2
    ac06:	f3bf 8f6f 	isb	sy
    ac0a:	b953      	cbnz	r3, ac22 <k_sched_lock+0x2a>
	--_current->base.sched_locked;
    ac0c:	4b05      	ldr	r3, [pc, #20]	; (ac24 <k_sched_lock+0x2c>)
    ac0e:	689a      	ldr	r2, [r3, #8]
    ac10:	7bd3      	ldrb	r3, [r2, #15]
    ac12:	3b01      	subs	r3, #1
    ac14:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    ac16:	f381 8811 	msr	BASEPRI, r1
    ac1a:	f3bf 8f6f 	isb	sy
    ac1e:	2301      	movs	r3, #1
    ac20:	e7f3      	b.n	ac0a <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    ac22:	4770      	bx	lr
    ac24:	200024d8 	.word	0x200024d8

0000ac28 <update_cache>:
{
    ac28:	b538      	push	{r3, r4, r5, lr}
    ac2a:	4604      	mov	r4, r0
	return _priq_run_best(curr_cpu_runq());
    ac2c:	480f      	ldr	r0, [pc, #60]	; (ac6c <update_cache+0x44>)
    ac2e:	f003 fc17 	bl	e460 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    ac32:	4605      	mov	r5, r0
    ac34:	b170      	cbz	r0, ac54 <update_cache+0x2c>
	if (preempt_ok != 0) {
    ac36:	b984      	cbnz	r4, ac5a <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    ac38:	4b0d      	ldr	r3, [pc, #52]	; (ac70 <update_cache+0x48>)
    ac3a:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    ac3c:	7b5a      	ldrb	r2, [r3, #13]
    ac3e:	f012 0f1f 	tst.w	r2, #31
    ac42:	d10a      	bne.n	ac5a <update_cache+0x32>
	return node->next != NULL;
    ac44:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    ac46:	b942      	cbnz	r2, ac5a <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    ac48:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    ac4a:	2a7f      	cmp	r2, #127	; 0x7f
    ac4c:	d905      	bls.n	ac5a <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    ac4e:	4a08      	ldr	r2, [pc, #32]	; (ac70 <update_cache+0x48>)
    ac50:	61d3      	str	r3, [r2, #28]
    ac52:	e00a      	b.n	ac6a <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    ac54:	4b06      	ldr	r3, [pc, #24]	; (ac70 <update_cache+0x48>)
    ac56:	68dd      	ldr	r5, [r3, #12]
    ac58:	e7ed      	b.n	ac36 <update_cache+0xe>
		if (thread != _current) {
    ac5a:	4b05      	ldr	r3, [pc, #20]	; (ac70 <update_cache+0x48>)
    ac5c:	689b      	ldr	r3, [r3, #8]
    ac5e:	42ab      	cmp	r3, r5
    ac60:	d001      	beq.n	ac66 <update_cache+0x3e>
			z_reset_time_slice();
    ac62:	f7ff ff5b 	bl	ab1c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    ac66:	4b02      	ldr	r3, [pc, #8]	; (ac70 <update_cache+0x48>)
    ac68:	61dd      	str	r5, [r3, #28]
}
    ac6a:	bd38      	pop	{r3, r4, r5, pc}
    ac6c:	200024f8 	.word	0x200024f8
    ac70:	200024d8 	.word	0x200024d8

0000ac74 <move_thread_to_end_of_prio_q>:
{
    ac74:	b538      	push	{r3, r4, r5, lr}
    ac76:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    ac78:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    ac7a:	f990 300d 	ldrsb.w	r3, [r0, #13]
    ac7e:	2b00      	cmp	r3, #0
    ac80:	db28      	blt.n	acd4 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
    ac82:	7b6b      	ldrb	r3, [r5, #13]
    ac84:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ac88:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    ac8a:	4b1a      	ldr	r3, [pc, #104]	; (acf4 <move_thread_to_end_of_prio_q+0x80>)
    ac8c:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ac90:	429c      	cmp	r4, r3
    ac92:	d02d      	beq.n	acf0 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ac94:	b16c      	cbz	r4, acb2 <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    ac96:	4621      	mov	r1, r4
    ac98:	4628      	mov	r0, r5
    ac9a:	f003 fb78 	bl	e38e <z_sched_prio_cmp>
    ac9e:	2800      	cmp	r0, #0
    aca0:	dc20      	bgt.n	ace4 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    aca2:	b134      	cbz	r4, acb2 <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    aca4:	4b13      	ldr	r3, [pc, #76]	; (acf4 <move_thread_to_end_of_prio_q+0x80>)
    aca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    aca8:	429c      	cmp	r4, r3
    acaa:	d002      	beq.n	acb2 <move_thread_to_end_of_prio_q+0x3e>
    acac:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    acae:	2c00      	cmp	r4, #0
    acb0:	d1f0      	bne.n	ac94 <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
    acb2:	4b10      	ldr	r3, [pc, #64]	; (acf4 <move_thread_to_end_of_prio_q+0x80>)
    acb4:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
    acb6:	f103 0120 	add.w	r1, r3, #32
    acba:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    acbc:	606a      	str	r2, [r5, #4]

	tail->next = node;
    acbe:	6015      	str	r5, [r2, #0]
	list->tail = node;
    acc0:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    acc2:	4b0c      	ldr	r3, [pc, #48]	; (acf4 <move_thread_to_end_of_prio_q+0x80>)
    acc4:	6898      	ldr	r0, [r3, #8]
    acc6:	42a8      	cmp	r0, r5
    acc8:	bf14      	ite	ne
    acca:	2000      	movne	r0, #0
    accc:	2001      	moveq	r0, #1
    acce:	f7ff ffab 	bl	ac28 <update_cache>
}
    acd2:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    acd4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    acd8:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    acda:	4601      	mov	r1, r0
    acdc:	4806      	ldr	r0, [pc, #24]	; (acf8 <move_thread_to_end_of_prio_q+0x84>)
    acde:	f003 fb94 	bl	e40a <z_priq_dumb_remove>
}
    ace2:	e7ce      	b.n	ac82 <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    ace4:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    ace6:	606b      	str	r3, [r5, #4]
	node->next = successor;
    ace8:	602c      	str	r4, [r5, #0]
	prev->next = node;
    acea:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    acec:	6065      	str	r5, [r4, #4]
}
    acee:	e7e8      	b.n	acc2 <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    acf0:	2400      	movs	r4, #0
    acf2:	e7cf      	b.n	ac94 <move_thread_to_end_of_prio_q+0x20>
    acf4:	200024d8 	.word	0x200024d8
    acf8:	200024f8 	.word	0x200024f8

0000acfc <z_time_slice>:
{
    acfc:	b510      	push	{r4, lr}
	__asm__ volatile(
    acfe:	f04f 0320 	mov.w	r3, #32
    ad02:	f3ef 8411 	mrs	r4, BASEPRI
    ad06:	f383 8812 	msr	BASEPRI_MAX, r3
    ad0a:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    ad0e:	4b1c      	ldr	r3, [pc, #112]	; (ad80 <z_time_slice+0x84>)
    ad10:	689b      	ldr	r3, [r3, #8]
    ad12:	4a1c      	ldr	r2, [pc, #112]	; (ad84 <z_time_slice+0x88>)
    ad14:	6812      	ldr	r2, [r2, #0]
    ad16:	4293      	cmp	r3, r2
    ad18:	d01d      	beq.n	ad56 <z_time_slice+0x5a>
	pending_current = NULL;
    ad1a:	4a1a      	ldr	r2, [pc, #104]	; (ad84 <z_time_slice+0x88>)
    ad1c:	2100      	movs	r1, #0
    ad1e:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
    ad20:	4a19      	ldr	r2, [pc, #100]	; (ad88 <z_time_slice+0x8c>)
    ad22:	6812      	ldr	r2, [r2, #0]
    ad24:	b322      	cbz	r2, ad70 <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    ad26:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
    ad28:	2a7f      	cmp	r2, #127	; 0x7f
    ad2a:	d821      	bhi.n	ad70 <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
    ad2c:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
    ad2e:	f012 0f1f 	tst.w	r2, #31
    ad32:	d11d      	bne.n	ad70 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    ad34:	f993 100e 	ldrsb.w	r1, [r3, #14]
    ad38:	4a14      	ldr	r2, [pc, #80]	; (ad8c <z_time_slice+0x90>)
    ad3a:	6812      	ldr	r2, [r2, #0]
    ad3c:	4291      	cmp	r1, r2
    ad3e:	db17      	blt.n	ad70 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
    ad40:	4a13      	ldr	r2, [pc, #76]	; (ad90 <z_time_slice+0x94>)
    ad42:	4293      	cmp	r3, r2
    ad44:	d014      	beq.n	ad70 <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
    ad46:	4a0e      	ldr	r2, [pc, #56]	; (ad80 <z_time_slice+0x84>)
    ad48:	6912      	ldr	r2, [r2, #16]
    ad4a:	4282      	cmp	r2, r0
    ad4c:	dd0a      	ble.n	ad64 <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
    ad4e:	1a10      	subs	r0, r2, r0
    ad50:	4b0b      	ldr	r3, [pc, #44]	; (ad80 <z_time_slice+0x84>)
    ad52:	6118      	str	r0, [r3, #16]
    ad54:	e00f      	b.n	ad76 <z_time_slice+0x7a>
		z_reset_time_slice();
    ad56:	f7ff fee1 	bl	ab1c <z_reset_time_slice>
	__asm__ volatile(
    ad5a:	f384 8811 	msr	BASEPRI, r4
    ad5e:	f3bf 8f6f 	isb	sy
		return;
    ad62:	e00c      	b.n	ad7e <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
    ad64:	4618      	mov	r0, r3
    ad66:	f7ff ff85 	bl	ac74 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
    ad6a:	f7ff fed7 	bl	ab1c <z_reset_time_slice>
    ad6e:	e002      	b.n	ad76 <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
    ad70:	4b03      	ldr	r3, [pc, #12]	; (ad80 <z_time_slice+0x84>)
    ad72:	2200      	movs	r2, #0
    ad74:	611a      	str	r2, [r3, #16]
    ad76:	f384 8811 	msr	BASEPRI, r4
    ad7a:	f3bf 8f6f 	isb	sy
}
    ad7e:	bd10      	pop	{r4, pc}
    ad80:	200024d8 	.word	0x200024d8
    ad84:	2000250c 	.word	0x2000250c
    ad88:	20002514 	.word	0x20002514
    ad8c:	20002510 	.word	0x20002510
    ad90:	20000678 	.word	0x20000678

0000ad94 <ready_thread>:
{
    ad94:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    ad96:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    ad98:	f990 200d 	ldrsb.w	r2, [r0, #13]
    ad9c:	2a00      	cmp	r2, #0
    ad9e:	db2d      	blt.n	adfc <ready_thread+0x68>
    ada0:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    ada2:	f013 0f1f 	tst.w	r3, #31
    ada6:	d105      	bne.n	adb4 <ready_thread+0x20>
	return node->next != NULL;
    ada8:	6982      	ldr	r2, [r0, #24]
    adaa:	b10a      	cbz	r2, adb0 <ready_thread+0x1c>
    adac:	2200      	movs	r2, #0
    adae:	e002      	b.n	adb6 <ready_thread+0x22>
    adb0:	2201      	movs	r2, #1
    adb2:	e000      	b.n	adb6 <ready_thread+0x22>
    adb4:	2200      	movs	r2, #0
    adb6:	b30a      	cbz	r2, adfc <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
    adb8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    adbc:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    adbe:	4b14      	ldr	r3, [pc, #80]	; (ae10 <ready_thread+0x7c>)
    adc0:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    adc4:	429d      	cmp	r5, r3
    adc6:	d020      	beq.n	ae0a <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    adc8:	b16d      	cbz	r5, ade6 <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
    adca:	4629      	mov	r1, r5
    adcc:	4620      	mov	r0, r4
    adce:	f003 fade 	bl	e38e <z_sched_prio_cmp>
    add2:	2800      	cmp	r0, #0
    add4:	dc13      	bgt.n	adfe <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    add6:	b135      	cbz	r5, ade6 <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
    add8:	4b0d      	ldr	r3, [pc, #52]	; (ae10 <ready_thread+0x7c>)
    adda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    addc:	429d      	cmp	r5, r3
    adde:	d002      	beq.n	ade6 <ready_thread+0x52>
    ade0:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ade2:	2d00      	cmp	r5, #0
    ade4:	d1f0      	bne.n	adc8 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
    ade6:	4b0a      	ldr	r3, [pc, #40]	; (ae10 <ready_thread+0x7c>)
    ade8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    adea:	f103 0120 	add.w	r1, r3, #32
    adee:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    adf0:	6062      	str	r2, [r4, #4]
	tail->next = node;
    adf2:	6014      	str	r4, [r2, #0]
	list->tail = node;
    adf4:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    adf6:	2000      	movs	r0, #0
    adf8:	f7ff ff16 	bl	ac28 <update_cache>
}
    adfc:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
    adfe:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    ae00:	6063      	str	r3, [r4, #4]
	node->next = successor;
    ae02:	6025      	str	r5, [r4, #0]
	prev->next = node;
    ae04:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    ae06:	606c      	str	r4, [r5, #4]
}
    ae08:	e7f5      	b.n	adf6 <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ae0a:	2500      	movs	r5, #0
    ae0c:	e7dc      	b.n	adc8 <ready_thread+0x34>
    ae0e:	bf00      	nop
    ae10:	200024d8 	.word	0x200024d8

0000ae14 <z_sched_start>:
{
    ae14:	b510      	push	{r4, lr}
	__asm__ volatile(
    ae16:	f04f 0320 	mov.w	r3, #32
    ae1a:	f3ef 8411 	mrs	r4, BASEPRI
    ae1e:	f383 8812 	msr	BASEPRI_MAX, r3
    ae22:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    ae26:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    ae28:	f013 0f04 	tst.w	r3, #4
    ae2c:	d104      	bne.n	ae38 <z_sched_start+0x24>
	__asm__ volatile(
    ae2e:	f384 8811 	msr	BASEPRI, r4
    ae32:	f3bf 8f6f 	isb	sy
}
    ae36:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ae38:	f023 0304 	bic.w	r3, r3, #4
    ae3c:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    ae3e:	f7ff ffa9 	bl	ad94 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    ae42:	4621      	mov	r1, r4
    ae44:	4801      	ldr	r0, [pc, #4]	; (ae4c <z_sched_start+0x38>)
    ae46:	f7ff febb 	bl	abc0 <z_reschedule>
    ae4a:	e7f4      	b.n	ae36 <z_sched_start+0x22>
    ae4c:	20002510 	.word	0x20002510

0000ae50 <unready_thread>:
{
    ae50:	b510      	push	{r4, lr}
    ae52:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    ae54:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    ae56:	f990 300d 	ldrsb.w	r3, [r0, #13]
    ae5a:	2b00      	cmp	r3, #0
    ae5c:	db08      	blt.n	ae70 <unready_thread+0x20>
	update_cache(thread == _current);
    ae5e:	4b08      	ldr	r3, [pc, #32]	; (ae80 <unready_thread+0x30>)
    ae60:	6898      	ldr	r0, [r3, #8]
    ae62:	42a0      	cmp	r0, r4
    ae64:	bf14      	ite	ne
    ae66:	2000      	movne	r0, #0
    ae68:	2001      	moveq	r0, #1
    ae6a:	f7ff fedd 	bl	ac28 <update_cache>
}
    ae6e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    ae70:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    ae74:	7342      	strb	r2, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    ae76:	4601      	mov	r1, r0
    ae78:	4802      	ldr	r0, [pc, #8]	; (ae84 <unready_thread+0x34>)
    ae7a:	f003 fac6 	bl	e40a <z_priq_dumb_remove>
}
    ae7e:	e7ee      	b.n	ae5e <unready_thread+0xe>
    ae80:	200024d8 	.word	0x200024d8
    ae84:	200024f8 	.word	0x200024f8

0000ae88 <z_pend_curr>:
{
    ae88:	b510      	push	{r4, lr}
    ae8a:	460c      	mov	r4, r1
    ae8c:	4611      	mov	r1, r2
	pending_current = _current;
    ae8e:	4b06      	ldr	r3, [pc, #24]	; (aea8 <z_pend_curr+0x20>)
    ae90:	6898      	ldr	r0, [r3, #8]
    ae92:	4b06      	ldr	r3, [pc, #24]	; (aeac <z_pend_curr+0x24>)
    ae94:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    ae96:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    ae9a:	f003 fb62 	bl	e562 <pend>
    ae9e:	4620      	mov	r0, r4
    aea0:	f7f8 ff26 	bl	3cf0 <arch_swap>
}
    aea4:	bd10      	pop	{r4, pc}
    aea6:	bf00      	nop
    aea8:	200024d8 	.word	0x200024d8
    aeac:	2000250c 	.word	0x2000250c

0000aeb0 <z_set_prio>:
{
    aeb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    aeb4:	4604      	mov	r4, r0
    aeb6:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    aeb8:	2300      	movs	r3, #0
	__asm__ volatile(
    aeba:	f04f 0220 	mov.w	r2, #32
    aebe:	f3ef 8611 	mrs	r6, BASEPRI
    aec2:	f382 8812 	msr	BASEPRI_MAX, r2
    aec6:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    aeca:	4698      	mov	r8, r3
    aecc:	e008      	b.n	aee0 <z_set_prio+0x30>
		if (need_sched) {
    aece:	f012 0801 	ands.w	r8, r2, #1
    aed2:	d111      	bne.n	aef8 <z_set_prio+0x48>
			thread->base.prio = prio;
    aed4:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
    aed6:	f386 8811 	msr	BASEPRI, r6
    aeda:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    aede:	2301      	movs	r3, #1
    aee0:	461a      	mov	r2, r3
    aee2:	2b00      	cmp	r3, #0
    aee4:	d13d      	bne.n	af62 <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
    aee6:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    aee8:	f013 0f1f 	tst.w	r3, #31
    aeec:	d1ef      	bne.n	aece <z_set_prio+0x1e>
	return node->next != NULL;
    aeee:	69a1      	ldr	r1, [r4, #24]
    aef0:	2900      	cmp	r1, #0
    aef2:	d1ec      	bne.n	aece <z_set_prio+0x1e>
    aef4:	2201      	movs	r2, #1
    aef6:	e7ea      	b.n	aece <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    aef8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    aefc:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    aefe:	f8df 906c 	ldr.w	r9, [pc, #108]	; af6c <z_set_prio+0xbc>
    af02:	4621      	mov	r1, r4
    af04:	4648      	mov	r0, r9
    af06:	f003 fa80 	bl	e40a <z_priq_dumb_remove>
				thread->base.prio = prio;
    af0a:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    af0c:	7b63      	ldrb	r3, [r4, #13]
    af0e:	f063 037f 	orn	r3, r3, #127	; 0x7f
    af12:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    af14:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    af18:	454d      	cmp	r5, r9
    af1a:	d020      	beq.n	af5e <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    af1c:	b16d      	cbz	r5, af3a <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    af1e:	4629      	mov	r1, r5
    af20:	4620      	mov	r0, r4
    af22:	f003 fa34 	bl	e38e <z_sched_prio_cmp>
    af26:	2800      	cmp	r0, #0
    af28:	dc13      	bgt.n	af52 <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    af2a:	b135      	cbz	r5, af3a <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
    af2c:	4b0e      	ldr	r3, [pc, #56]	; (af68 <z_set_prio+0xb8>)
    af2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    af30:	429d      	cmp	r5, r3
    af32:	d002      	beq.n	af3a <z_set_prio+0x8a>
    af34:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    af36:	2d00      	cmp	r5, #0
    af38:	d1f0      	bne.n	af1c <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
    af3a:	4b0b      	ldr	r3, [pc, #44]	; (af68 <z_set_prio+0xb8>)
    af3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    af3e:	f103 0120 	add.w	r1, r3, #32
    af42:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    af44:	6062      	str	r2, [r4, #4]
	tail->next = node;
    af46:	6014      	str	r4, [r2, #0]
	list->tail = node;
    af48:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    af4a:	2001      	movs	r0, #1
    af4c:	f7ff fe6c 	bl	ac28 <update_cache>
    af50:	e7c1      	b.n	aed6 <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
    af52:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    af54:	6063      	str	r3, [r4, #4]
	node->next = successor;
    af56:	6025      	str	r5, [r4, #0]
	prev->next = node;
    af58:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    af5a:	606c      	str	r4, [r5, #4]
}
    af5c:	e7f5      	b.n	af4a <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    af5e:	2500      	movs	r5, #0
    af60:	e7dc      	b.n	af1c <z_set_prio+0x6c>
}
    af62:	4640      	mov	r0, r8
    af64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    af68:	200024d8 	.word	0x200024d8
    af6c:	200024f8 	.word	0x200024f8

0000af70 <z_impl_k_thread_suspend>:
{
    af70:	b538      	push	{r3, r4, r5, lr}
    af72:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    af74:	3018      	adds	r0, #24
    af76:	f003 fbca 	bl	e70e <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    af7a:	2300      	movs	r3, #0
	__asm__ volatile(
    af7c:	f04f 0220 	mov.w	r2, #32
    af80:	f3ef 8511 	mrs	r5, BASEPRI
    af84:	f382 8812 	msr	BASEPRI_MAX, r2
    af88:	f3bf 8f6f 	isb	sy
    af8c:	e010      	b.n	afb0 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    af8e:	7b63      	ldrb	r3, [r4, #13]
    af90:	f043 0310 	orr.w	r3, r3, #16
    af94:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    af96:	4b15      	ldr	r3, [pc, #84]	; (afec <z_impl_k_thread_suspend+0x7c>)
    af98:	6898      	ldr	r0, [r3, #8]
    af9a:	42a0      	cmp	r0, r4
    af9c:	bf14      	ite	ne
    af9e:	2000      	movne	r0, #0
    afa0:	2001      	moveq	r0, #1
    afa2:	f7ff fe41 	bl	ac28 <update_cache>
	__asm__ volatile(
    afa6:	f385 8811 	msr	BASEPRI, r5
    afaa:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    afae:	2301      	movs	r3, #1
    afb0:	b963      	cbnz	r3, afcc <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    afb2:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    afb4:	f994 300d 	ldrsb.w	r3, [r4, #13]
    afb8:	2b00      	cmp	r3, #0
    afba:	dae8      	bge.n	af8e <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    afbc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    afc0:	7362      	strb	r2, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    afc2:	4621      	mov	r1, r4
    afc4:	480a      	ldr	r0, [pc, #40]	; (aff0 <z_impl_k_thread_suspend+0x80>)
    afc6:	f003 fa20 	bl	e40a <z_priq_dumb_remove>
}
    afca:	e7e0      	b.n	af8e <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    afcc:	4b07      	ldr	r3, [pc, #28]	; (afec <z_impl_k_thread_suspend+0x7c>)
    afce:	689b      	ldr	r3, [r3, #8]
    afd0:	42a3      	cmp	r3, r4
    afd2:	d000      	beq.n	afd6 <z_impl_k_thread_suspend+0x66>
}
    afd4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    afd6:	f04f 0320 	mov.w	r3, #32
    afda:	f3ef 8011 	mrs	r0, BASEPRI
    afde:	f383 8812 	msr	BASEPRI_MAX, r3
    afe2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    afe6:	f003 f9fb 	bl	e3e0 <z_reschedule_irqlock>
    afea:	e7f3      	b.n	afd4 <z_impl_k_thread_suspend+0x64>
    afec:	200024d8 	.word	0x200024d8
    aff0:	200024f8 	.word	0x200024f8

0000aff4 <k_sched_unlock>:

void k_sched_unlock(void)
{
    aff4:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    aff6:	2300      	movs	r3, #0
    aff8:	f04f 0220 	mov.w	r2, #32
    affc:	f3ef 8411 	mrs	r4, BASEPRI
    b000:	f382 8812 	msr	BASEPRI_MAX, r2
    b004:	f3bf 8f6f 	isb	sy
    b008:	b96b      	cbnz	r3, b026 <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    b00a:	4b0c      	ldr	r3, [pc, #48]	; (b03c <k_sched_unlock+0x48>)
    b00c:	689a      	ldr	r2, [r3, #8]
    b00e:	7bd3      	ldrb	r3, [r2, #15]
    b010:	3301      	adds	r3, #1
    b012:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    b014:	2000      	movs	r0, #0
    b016:	f7ff fe07 	bl	ac28 <update_cache>
	__asm__ volatile(
    b01a:	f384 8811 	msr	BASEPRI, r4
    b01e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    b022:	2301      	movs	r3, #1
    b024:	e7f0      	b.n	b008 <k_sched_unlock+0x14>
	__asm__ volatile(
    b026:	f04f 0320 	mov.w	r3, #32
    b02a:	f3ef 8011 	mrs	r0, BASEPRI
    b02e:	f383 8812 	msr	BASEPRI_MAX, r3
    b032:	f3bf 8f6f 	isb	sy
    b036:	f003 f9d3 	bl	e3e0 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
    b03a:	bd10      	pop	{r4, pc}
    b03c:	200024d8 	.word	0x200024d8

0000b040 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    b040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    b042:	7b43      	ldrb	r3, [r0, #13]
    b044:	f013 0f08 	tst.w	r3, #8
    b048:	d145      	bne.n	b0d6 <end_thread+0x96>
    b04a:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    b04c:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
    b050:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    b054:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    b056:	f013 0f80 	tst.w	r3, #128	; 0x80
    b05a:	d114      	bne.n	b086 <end_thread+0x46>
			dequeue_thread(thread);
		}
		if (thread->base.pended_on != NULL) {
    b05c:	68ab      	ldr	r3, [r5, #8]
    b05e:	b15b      	cbz	r3, b078 <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    b060:	4628      	mov	r0, r5
    b062:	f003 f992 	bl	e38a <pended_on_thread>
    b066:	4629      	mov	r1, r5
    b068:	f003 f9cf 	bl	e40a <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    b06c:	7b6b      	ldrb	r3, [r5, #13]
    b06e:	f023 0302 	bic.w	r3, r3, #2
    b072:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    b074:	2300      	movs	r3, #0
    b076:	60ab      	str	r3, [r5, #8]
    b078:	f105 0018 	add.w	r0, r5, #24
    b07c:	f003 fb47 	bl	e70e <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    b080:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    b084:	e01c      	b.n	b0c0 <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b086:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b08a:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    b08c:	4601      	mov	r1, r0
    b08e:	4812      	ldr	r0, [pc, #72]	; (b0d8 <end_thread+0x98>)
    b090:	f003 f9bb 	bl	e40a <z_priq_dumb_remove>
}
    b094:	e7e2      	b.n	b05c <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    b096:	4620      	mov	r0, r4
    b098:	f003 f977 	bl	e38a <pended_on_thread>
    b09c:	4621      	mov	r1, r4
    b09e:	f003 f9b4 	bl	e40a <z_priq_dumb_remove>
    b0a2:	7b63      	ldrb	r3, [r4, #13]
    b0a4:	f023 0302 	bic.w	r3, r3, #2
    b0a8:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    b0aa:	2600      	movs	r6, #0
    b0ac:	60a6      	str	r6, [r4, #8]
    b0ae:	f104 0018 	add.w	r0, r4, #24
    b0b2:	f003 fb2c 	bl	e70e <z_abort_timeout>
    b0b6:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    b0ba:	4620      	mov	r0, r4
    b0bc:	f7ff fe6a 	bl	ad94 <ready_thread>
	return list->head == list;
    b0c0:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b0c2:	42bc      	cmp	r4, r7
    b0c4:	d001      	beq.n	b0ca <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    b0c6:	2c00      	cmp	r4, #0
    b0c8:	d1e5      	bne.n	b096 <end_thread+0x56>
		update_cache(1);
    b0ca:	2001      	movs	r0, #1
    b0cc:	f7ff fdac 	bl	ac28 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    b0d0:	4628      	mov	r0, r5
    b0d2:	f7ff f94f 	bl	a374 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    b0d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b0d8:	200024f8 	.word	0x200024f8

0000b0dc <z_sched_init>:
{
    b0dc:	b508      	push	{r3, lr}
	init_ready_q(&_kernel.ready_q);
    b0de:	4804      	ldr	r0, [pc, #16]	; (b0f0 <z_sched_init+0x14>)
    b0e0:	f003 fac3 	bl	e66a <init_ready_q>
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    b0e4:	2100      	movs	r1, #0
    b0e6:	4608      	mov	r0, r1
    b0e8:	f7ff fd2e 	bl	ab48 <k_sched_time_slice_set>
}
    b0ec:	bd08      	pop	{r3, pc}
    b0ee:	bf00      	nop
    b0f0:	200024f4 	.word	0x200024f4

0000b0f4 <z_impl_k_yield>:
{
    b0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b0f6:	f04f 0320 	mov.w	r3, #32
    b0fa:	f3ef 8611 	mrs	r6, BASEPRI
    b0fe:	f383 8812 	msr	BASEPRI_MAX, r3
    b102:	f3bf 8f6f 	isb	sy
		dequeue_thread(_current);
    b106:	4c1c      	ldr	r4, [pc, #112]	; (b178 <z_impl_k_yield+0x84>)
    b108:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b10a:	7b4b      	ldrb	r3, [r1, #13]
    b10c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b110:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    b112:	f104 0720 	add.w	r7, r4, #32
    b116:	4638      	mov	r0, r7
    b118:	f003 f977 	bl	e40a <z_priq_dumb_remove>
	queue_thread(_current);
    b11c:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    b11e:	7b6b      	ldrb	r3, [r5, #13]
    b120:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b124:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    b126:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b128:	42bc      	cmp	r4, r7
    b12a:	d023      	beq.n	b174 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b12c:	b16c      	cbz	r4, b14a <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
    b12e:	4621      	mov	r1, r4
    b130:	4628      	mov	r0, r5
    b132:	f003 f92c 	bl	e38e <z_sched_prio_cmp>
    b136:	2800      	cmp	r0, #0
    b138:	dc16      	bgt.n	b168 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    b13a:	b134      	cbz	r4, b14a <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
    b13c:	4b0e      	ldr	r3, [pc, #56]	; (b178 <z_impl_k_yield+0x84>)
    b13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    b140:	429c      	cmp	r4, r3
    b142:	d002      	beq.n	b14a <z_impl_k_yield+0x56>
    b144:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b146:	2c00      	cmp	r4, #0
    b148:	d1f0      	bne.n	b12c <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
    b14a:	4b0b      	ldr	r3, [pc, #44]	; (b178 <z_impl_k_yield+0x84>)
    b14c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    b14e:	f103 0120 	add.w	r1, r3, #32
    b152:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    b154:	606a      	str	r2, [r5, #4]
	tail->next = node;
    b156:	6015      	str	r5, [r2, #0]
	list->tail = node;
    b158:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    b15a:	2001      	movs	r0, #1
    b15c:	f7ff fd64 	bl	ac28 <update_cache>
    b160:	4630      	mov	r0, r6
    b162:	f7f8 fdc5 	bl	3cf0 <arch_swap>
}
    b166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
    b168:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    b16a:	606b      	str	r3, [r5, #4]
	node->next = successor;
    b16c:	602c      	str	r4, [r5, #0]
	prev->next = node;
    b16e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    b170:	6065      	str	r5, [r4, #4]
}
    b172:	e7f2      	b.n	b15a <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b174:	2400      	movs	r4, #0
    b176:	e7d9      	b.n	b12c <z_impl_k_yield+0x38>
    b178:	200024d8 	.word	0x200024d8

0000b17c <z_tick_sleep>:
{
    b17c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b180:	4604      	mov	r4, r0
    b182:	460d      	mov	r5, r1
	if (ticks == 0) {
    b184:	ea54 0105 	orrs.w	r1, r4, r5
    b188:	d037      	beq.n	b1fa <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    b18a:	f06f 0101 	mvn.w	r1, #1
    b18e:	1a0a      	subs	r2, r1, r0
    b190:	f04f 31ff 	mov.w	r1, #4294967295
    b194:	eb61 0305 	sbc.w	r3, r1, r5
    b198:	2a01      	cmp	r2, #1
    b19a:	f173 0300 	sbcs.w	r3, r3, #0
    b19e:	db30      	blt.n	b202 <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    b1a0:	f06f 0601 	mvn.w	r6, #1
    b1a4:	1a36      	subs	r6, r6, r0
    b1a6:	f04f 0320 	mov.w	r3, #32
    b1aa:	f3ef 8811 	mrs	r8, BASEPRI
    b1ae:	f383 8812 	msr	BASEPRI_MAX, r3
    b1b2:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    b1b6:	4f16      	ldr	r7, [pc, #88]	; (b210 <z_tick_sleep+0x94>)
    b1b8:	68b8      	ldr	r0, [r7, #8]
    b1ba:	4b16      	ldr	r3, [pc, #88]	; (b214 <z_tick_sleep+0x98>)
    b1bc:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    b1be:	f7ff fe47 	bl	ae50 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    b1c2:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    b1c4:	4622      	mov	r2, r4
    b1c6:	462b      	mov	r3, r5
    b1c8:	4913      	ldr	r1, [pc, #76]	; (b218 <z_tick_sleep+0x9c>)
    b1ca:	3018      	adds	r0, #24
    b1cc:	f000 f904 	bl	b3d8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    b1d0:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    b1d2:	7b53      	ldrb	r3, [r2, #13]
    b1d4:	f043 0310 	orr.w	r3, r3, #16
    b1d8:	7353      	strb	r3, [r2, #13]
    b1da:	4640      	mov	r0, r8
    b1dc:	f7f8 fd88 	bl	3cf0 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    b1e0:	2500      	movs	r5, #0
    b1e2:	f003 faf3 	bl	e7cc <sys_clock_tick_get_32>
    b1e6:	1a34      	subs	r4, r6, r0
    b1e8:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
    b1ec:	2c01      	cmp	r4, #1
    b1ee:	f175 0300 	sbcs.w	r3, r5, #0
    b1f2:	da0a      	bge.n	b20a <z_tick_sleep+0x8e>
	return 0;
    b1f4:	2000      	movs	r0, #0
}
    b1f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    b1fa:	f7ff ff7b 	bl	b0f4 <z_impl_k_yield>
		return 0;
    b1fe:	2000      	movs	r0, #0
    b200:	e7f9      	b.n	b1f6 <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    b202:	f003 fae3 	bl	e7cc <sys_clock_tick_get_32>
    b206:	1906      	adds	r6, r0, r4
    b208:	e7cd      	b.n	b1a6 <z_tick_sleep+0x2a>
		return ticks;
    b20a:	4620      	mov	r0, r4
    b20c:	e7f3      	b.n	b1f6 <z_tick_sleep+0x7a>
    b20e:	bf00      	nop
    b210:	200024d8 	.word	0x200024d8
    b214:	2000250c 	.word	0x2000250c
    b218:	0000e4a7 	.word	0x0000e4a7

0000b21c <z_impl_k_sleep>:
{
    b21c:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b21e:	f1b1 3fff 	cmp.w	r1, #4294967295
    b222:	bf08      	it	eq
    b224:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    b228:	d01a      	beq.n	b260 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
    b22a:	f7ff ffa7 	bl	b17c <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    b22e:	4604      	mov	r4, r0
    b230:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
    b232:	0169      	lsls	r1, r5, #5
    b234:	0143      	lsls	r3, r0, #5
    b236:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
    b23a:	1a18      	subs	r0, r3, r0
    b23c:	eb62 0305 	sbc.w	r3, r2, r5
    b240:	009a      	lsls	r2, r3, #2
    b242:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    b246:	0081      	lsls	r1, r0, #2
    b248:	4613      	mov	r3, r2
    b24a:	1908      	adds	r0, r1, r4
    b24c:	eb45 0303 	adc.w	r3, r5, r3
    b250:	00da      	lsls	r2, r3, #3
    b252:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
    b256:	00c1      	lsls	r1, r0, #3
    b258:	0bc8      	lsrs	r0, r1, #15
    b25a:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
    b25e:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
    b260:	4b03      	ldr	r3, [pc, #12]	; (b270 <z_impl_k_sleep+0x54>)
    b262:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    b264:	f7ff fe84 	bl	af70 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    b268:	f04f 30ff 	mov.w	r0, #4294967295
    b26c:	e7f7      	b.n	b25e <z_impl_k_sleep+0x42>
    b26e:	bf00      	nop
    b270:	200024d8 	.word	0x200024d8

0000b274 <z_impl_z_current_get>:
}
    b274:	4b01      	ldr	r3, [pc, #4]	; (b27c <z_impl_z_current_get+0x8>)
    b276:	6898      	ldr	r0, [r3, #8]
    b278:	4770      	bx	lr
    b27a:	bf00      	nop
    b27c:	200024d8 	.word	0x200024d8

0000b280 <z_impl_k_is_preempt_thread>:
    b280:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
    b284:	b933      	cbnz	r3, b294 <z_impl_k_is_preempt_thread+0x14>
    b286:	4b05      	ldr	r3, [pc, #20]	; (b29c <z_impl_k_is_preempt_thread+0x1c>)
    b288:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    b28a:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
    b28c:	2b7f      	cmp	r3, #127	; 0x7f
    b28e:	d803      	bhi.n	b298 <z_impl_k_is_preempt_thread+0x18>
    b290:	2001      	movs	r0, #1
    b292:	4770      	bx	lr
    b294:	2000      	movs	r0, #0
    b296:	4770      	bx	lr
    b298:	2000      	movs	r0, #0
}
    b29a:	4770      	bx	lr
    b29c:	200024d8 	.word	0x200024d8

0000b2a0 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    b2a0:	b538      	push	{r3, r4, r5, lr}
    b2a2:	f04f 0320 	mov.w	r3, #32
    b2a6:	f3ef 8511 	mrs	r5, BASEPRI
    b2aa:	f383 8812 	msr	BASEPRI_MAX, r3
    b2ae:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    b2b2:	7b43      	ldrb	r3, [r0, #13]
    b2b4:	f013 0f08 	tst.w	r3, #8
    b2b8:	d004      	beq.n	b2c4 <z_thread_abort+0x24>
	__asm__ volatile(
    b2ba:	f385 8811 	msr	BASEPRI, r5
    b2be:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    b2c2:	bd38      	pop	{r3, r4, r5, pc}
    b2c4:	4604      	mov	r4, r0
	end_thread(thread);
    b2c6:	f7ff febb 	bl	b040 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    b2ca:	4b08      	ldr	r3, [pc, #32]	; (b2ec <z_thread_abort+0x4c>)
    b2cc:	689b      	ldr	r3, [r3, #8]
    b2ce:	42a3      	cmp	r3, r4
    b2d0:	d004      	beq.n	b2dc <z_thread_abort+0x3c>
    b2d2:	f385 8811 	msr	BASEPRI, r5
    b2d6:	f3bf 8f6f 	isb	sy
    b2da:	e7f2      	b.n	b2c2 <z_thread_abort+0x22>
    b2dc:	f3ef 8305 	mrs	r3, IPSR
    b2e0:	2b00      	cmp	r3, #0
    b2e2:	d1f6      	bne.n	b2d2 <z_thread_abort+0x32>
    b2e4:	4628      	mov	r0, r5
    b2e6:	f7f8 fd03 	bl	3cf0 <arch_swap>
	return ret;
    b2ea:	e7f2      	b.n	b2d2 <z_thread_abort+0x32>
    b2ec:	200024d8 	.word	0x200024d8

0000b2f0 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    b2f0:	b5d0      	push	{r4, r6, r7, lr}
    b2f2:	b082      	sub	sp, #8
    b2f4:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    b2f6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
    b2fa:	e9cd 6700 	strd	r6, r7, [sp]
    b2fe:	f7ff fdc3 	bl	ae88 <z_pend_curr>

	if (data != NULL) {
    b302:	b11c      	cbz	r4, b30c <z_sched_wait+0x1c>
		*data = _current->base.swap_data;
    b304:	4b02      	ldr	r3, [pc, #8]	; (b310 <z_sched_wait+0x20>)
    b306:	689b      	ldr	r3, [r3, #8]
    b308:	695b      	ldr	r3, [r3, #20]
    b30a:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    b30c:	b002      	add	sp, #8
    b30e:	bdd0      	pop	{r4, r6, r7, pc}
    b310:	200024d8 	.word	0x200024d8

0000b314 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    b314:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    b316:	4806      	ldr	r0, [pc, #24]	; (b330 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    b318:	4a06      	ldr	r2, [pc, #24]	; (b334 <z_data_copy+0x20>)
    b31a:	1a12      	subs	r2, r2, r0
    b31c:	4906      	ldr	r1, [pc, #24]	; (b338 <z_data_copy+0x24>)
    b31e:	f002 f841 	bl	d3a4 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    b322:	4a06      	ldr	r2, [pc, #24]	; (b33c <z_data_copy+0x28>)
    b324:	4906      	ldr	r1, [pc, #24]	; (b340 <z_data_copy+0x2c>)
    b326:	4807      	ldr	r0, [pc, #28]	; (b344 <z_data_copy+0x30>)
    b328:	f002 f83c 	bl	d3a4 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    b32c:	bd08      	pop	{r3, pc}
    b32e:	bf00      	nop
    b330:	20000000 	.word	0x20000000
    b334:	200003cc 	.word	0x200003cc
    b338:	0000ff20 	.word	0x0000ff20
    b33c:	00000000 	.word	0x00000000
    b340:	0000ff20 	.word	0x0000ff20
    b344:	20000000 	.word	0x20000000

0000b348 <first>:
	return list->head == list;
    b348:	4b03      	ldr	r3, [pc, #12]	; (b358 <first+0x10>)
    b34a:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b34c:	4298      	cmp	r0, r3
    b34e:	d000      	beq.n	b352 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    b350:	4770      	bx	lr
    b352:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    b354:	e7fc      	b.n	b350 <first+0x8>
    b356:	bf00      	nop
    b358:	200001b4 	.word	0x200001b4

0000b35c <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    b35c:	b130      	cbz	r0, b36c <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    b35e:	4a04      	ldr	r2, [pc, #16]	; (b370 <next+0x14>)
    b360:	6852      	ldr	r2, [r2, #4]
    b362:	4290      	cmp	r0, r2
    b364:	d001      	beq.n	b36a <next+0xe>
    b366:	6800      	ldr	r0, [r0, #0]
    b368:	4770      	bx	lr
    b36a:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    b36c:	4770      	bx	lr
    b36e:	bf00      	nop
    b370:	200001b4 	.word	0x200001b4

0000b374 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    b374:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    b376:	4b04      	ldr	r3, [pc, #16]	; (b388 <elapsed+0x14>)
    b378:	681b      	ldr	r3, [r3, #0]
    b37a:	b10b      	cbz	r3, b380 <elapsed+0xc>
    b37c:	2000      	movs	r0, #0
}
    b37e:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    b380:	f7fb fe12 	bl	6fa8 <sys_clock_elapsed>
    b384:	e7fb      	b.n	b37e <elapsed+0xa>
    b386:	bf00      	nop
    b388:	20002518 	.word	0x20002518

0000b38c <next_timeout>:

static int32_t next_timeout(void)
{
    b38c:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    b38e:	f7ff ffdb 	bl	b348 <first>
    b392:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    b394:	f7ff ffee 	bl	b374 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    b398:	b18c      	cbz	r4, b3be <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    b39a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    b39e:	1a12      	subs	r2, r2, r0
    b3a0:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    b3a4:	2a01      	cmp	r2, #1
    b3a6:	f173 0100 	sbcs.w	r1, r3, #0
    b3aa:	db11      	blt.n	b3d0 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    b3ac:	4610      	mov	r0, r2
    b3ae:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    b3b2:	f173 0300 	sbcs.w	r3, r3, #0
    b3b6:	db04      	blt.n	b3c2 <next_timeout+0x36>
    b3b8:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    b3bc:	e001      	b.n	b3c2 <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
    b3be:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    b3c2:	4b04      	ldr	r3, [pc, #16]	; (b3d4 <next_timeout+0x48>)
    b3c4:	691b      	ldr	r3, [r3, #16]
    b3c6:	b113      	cbz	r3, b3ce <next_timeout+0x42>
    b3c8:	4283      	cmp	r3, r0
    b3ca:	da00      	bge.n	b3ce <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
    b3cc:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    b3ce:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    b3d0:	2000      	movs	r0, #0
    b3d2:	e7f6      	b.n	b3c2 <next_timeout+0x36>
    b3d4:	200024d8 	.word	0x200024d8

0000b3d8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    b3d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b3dc:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b3de:	f1b3 3fff 	cmp.w	r3, #4294967295
    b3e2:	bf08      	it	eq
    b3e4:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    b3e8:	f000 8096 	beq.w	b518 <z_add_timeout+0x140>
    b3ec:	4682      	mov	sl, r0
    b3ee:	4614      	mov	r4, r2
    b3f0:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    b3f2:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    b3f4:	2300      	movs	r3, #0
	__asm__ volatile(
    b3f6:	f04f 0220 	mov.w	r2, #32
    b3fa:	f3ef 8b11 	mrs	fp, BASEPRI
    b3fe:	f382 8812 	msr	BASEPRI_MAX, r2
    b402:	f3bf 8f6f 	isb	sy
    b406:	e02e      	b.n	b466 <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
    b408:	2201      	movs	r2, #1
    b40a:	2300      	movs	r3, #0
    b40c:	e04b      	b.n	b4a6 <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    b40e:	f7ff ffb1 	bl	b374 <elapsed>
    b412:	1822      	adds	r2, r4, r0
    b414:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
    b418:	3201      	adds	r2, #1
    b41a:	f143 0300 	adc.w	r3, r3, #0
    b41e:	f8ca 2010 	str.w	r2, [sl, #16]
    b422:	f8ca 3014 	str.w	r3, [sl, #20]
    b426:	e042      	b.n	b4ae <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    b428:	9b00      	ldr	r3, [sp, #0]
    b42a:	1ac2      	subs	r2, r0, r3
    b42c:	9b01      	ldr	r3, [sp, #4]
    b42e:	eb61 0303 	sbc.w	r3, r1, r3
    b432:	f8cc 2010 	str.w	r2, [ip, #16]
    b436:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
    b43a:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
    b43e:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
    b442:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
    b446:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
    b44a:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    b44e:	f1bc 0f00 	cmp.w	ip, #0
    b452:	d049      	beq.n	b4e8 <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    b454:	f7ff ff78 	bl	b348 <first>
    b458:	4582      	cmp	sl, r0
    b45a:	d050      	beq.n	b4fe <z_add_timeout+0x126>
	__asm__ volatile(
    b45c:	f38b 8811 	msr	BASEPRI, fp
    b460:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    b464:	2301      	movs	r3, #1
    b466:	2b00      	cmp	r3, #0
    b468:	d156      	bne.n	b518 <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    b46a:	f06f 0301 	mvn.w	r3, #1
    b46e:	ebb3 0804 	subs.w	r8, r3, r4
    b472:	f04f 30ff 	mov.w	r0, #4294967295
    b476:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    b47a:	f1b8 0f00 	cmp.w	r8, #0
    b47e:	f179 0300 	sbcs.w	r3, r9, #0
    b482:	dbc4      	blt.n	b40e <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    b484:	4a26      	ldr	r2, [pc, #152]	; (b520 <z_add_timeout+0x148>)
    b486:	6813      	ldr	r3, [r2, #0]
    b488:	6852      	ldr	r2, [r2, #4]
    b48a:	18e3      	adds	r3, r4, r3
    b48c:	eb45 0202 	adc.w	r2, r5, r2
    b490:	f06f 0101 	mvn.w	r1, #1
    b494:	1ace      	subs	r6, r1, r3
    b496:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
    b49a:	4632      	mov	r2, r6
    b49c:	463b      	mov	r3, r7
    b49e:	2e01      	cmp	r6, #1
    b4a0:	f177 0100 	sbcs.w	r1, r7, #0
    b4a4:	dbb0      	blt.n	b408 <z_add_timeout+0x30>
    b4a6:	f8ca 2010 	str.w	r2, [sl, #16]
    b4aa:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
    b4ae:	f7ff ff4b 	bl	b348 <first>
    b4b2:	4684      	mov	ip, r0
    b4b4:	f1bc 0f00 	cmp.w	ip, #0
    b4b8:	d0c9      	beq.n	b44e <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
    b4ba:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
    b4be:	e9da 2304 	ldrd	r2, r3, [sl, #16]
    b4c2:	e9cd 2300 	strd	r2, r3, [sp]
    b4c6:	4282      	cmp	r2, r0
    b4c8:	418b      	sbcs	r3, r1
    b4ca:	dbad      	blt.n	b428 <z_add_timeout+0x50>
			to->dticks -= t->dticks;
    b4cc:	9b00      	ldr	r3, [sp, #0]
    b4ce:	1a1a      	subs	r2, r3, r0
    b4d0:	9b01      	ldr	r3, [sp, #4]
    b4d2:	eb63 0301 	sbc.w	r3, r3, r1
    b4d6:	f8ca 2010 	str.w	r2, [sl, #16]
    b4da:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
    b4de:	4660      	mov	r0, ip
    b4e0:	f7ff ff3c 	bl	b35c <next>
    b4e4:	4684      	mov	ip, r0
    b4e6:	e7e5      	b.n	b4b4 <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
    b4e8:	4b0e      	ldr	r3, [pc, #56]	; (b524 <z_add_timeout+0x14c>)
    b4ea:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    b4ec:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
    b4f0:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
    b4f4:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    b4f8:	f8c3 a004 	str.w	sl, [r3, #4]
}
    b4fc:	e7aa      	b.n	b454 <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    b4fe:	f7ff ff45 	bl	b38c <next_timeout>

			if (next_time == 0 ||
    b502:	4603      	mov	r3, r0
    b504:	b118      	cbz	r0, b50e <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
    b506:	4a08      	ldr	r2, [pc, #32]	; (b528 <z_add_timeout+0x150>)
    b508:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    b50a:	4282      	cmp	r2, r0
    b50c:	d0a6      	beq.n	b45c <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
    b50e:	2100      	movs	r1, #0
    b510:	4618      	mov	r0, r3
    b512:	f7fb fd15 	bl	6f40 <sys_clock_set_timeout>
    b516:	e7a1      	b.n	b45c <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    b518:	b003      	add	sp, #12
    b51a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b51e:	bf00      	nop
    b520:	200007d8 	.word	0x200007d8
    b524:	200001b4 	.word	0x200001b4
    b528:	200024d8 	.word	0x200024d8

0000b52c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    b52c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b52e:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    b530:	f7ff fbe4 	bl	acfc <z_time_slice>
	__asm__ volatile(
    b534:	f04f 0320 	mov.w	r3, #32
    b538:	f3ef 8511 	mrs	r5, BASEPRI
    b53c:	f383 8812 	msr	BASEPRI_MAX, r3
    b540:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    b544:	4b28      	ldr	r3, [pc, #160]	; (b5e8 <sys_clock_announce+0xbc>)
    b546:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    b548:	f7ff fefe 	bl	b348 <first>
    b54c:	4604      	mov	r4, r0
    b54e:	b350      	cbz	r0, b5a6 <sys_clock_announce+0x7a>
    b550:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    b554:	4b24      	ldr	r3, [pc, #144]	; (b5e8 <sys_clock_announce+0xbc>)
    b556:	681b      	ldr	r3, [r3, #0]
    b558:	17d9      	asrs	r1, r3, #31
    b55a:	42b3      	cmp	r3, r6
    b55c:	eb71 0207 	sbcs.w	r2, r1, r7
    b560:	db21      	blt.n	b5a6 <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    b562:	4a22      	ldr	r2, [pc, #136]	; (b5ec <sys_clock_announce+0xc0>)
    b564:	e9d2 0100 	ldrd	r0, r1, [r2]
    b568:	1980      	adds	r0, r0, r6
    b56a:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
    b56e:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
    b572:	1b9b      	subs	r3, r3, r6
    b574:	4a1c      	ldr	r2, [pc, #112]	; (b5e8 <sys_clock_announce+0xbc>)
    b576:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    b578:	2200      	movs	r2, #0
    b57a:	2300      	movs	r3, #0
    b57c:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    b580:	4620      	mov	r0, r4
    b582:	f003 f8ad 	bl	e6e0 <remove_timeout>
	__asm__ volatile(
    b586:	f385 8811 	msr	BASEPRI, r5
    b58a:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    b58e:	68a3      	ldr	r3, [r4, #8]
    b590:	4620      	mov	r0, r4
    b592:	4798      	blx	r3
	__asm__ volatile(
    b594:	f04f 0320 	mov.w	r3, #32
    b598:	f3ef 8511 	mrs	r5, BASEPRI
    b59c:	f383 8812 	msr	BASEPRI_MAX, r3
    b5a0:	f3bf 8f6f 	isb	sy
    b5a4:	e7d0      	b.n	b548 <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    b5a6:	b144      	cbz	r4, b5ba <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
    b5a8:	4b0f      	ldr	r3, [pc, #60]	; (b5e8 <sys_clock_announce+0xbc>)
    b5aa:	6819      	ldr	r1, [r3, #0]
    b5ac:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    b5b0:	1a52      	subs	r2, r2, r1
    b5b2:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
    b5b6:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
    b5ba:	480c      	ldr	r0, [pc, #48]	; (b5ec <sys_clock_announce+0xc0>)
    b5bc:	490a      	ldr	r1, [pc, #40]	; (b5e8 <sys_clock_announce+0xbc>)
    b5be:	680c      	ldr	r4, [r1, #0]
    b5c0:	e9d0 2300 	ldrd	r2, r3, [r0]
    b5c4:	1912      	adds	r2, r2, r4
    b5c6:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
    b5ca:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
    b5ce:	2400      	movs	r4, #0
    b5d0:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
    b5d2:	f7ff fedb 	bl	b38c <next_timeout>
    b5d6:	4621      	mov	r1, r4
    b5d8:	f7fb fcb2 	bl	6f40 <sys_clock_set_timeout>
	__asm__ volatile(
    b5dc:	f385 8811 	msr	BASEPRI, r5
    b5e0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    b5e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b5e6:	bf00      	nop
    b5e8:	20002518 	.word	0x20002518
    b5ec:	200007d8 	.word	0x200007d8

0000b5f0 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    b5f0:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    b5f2:	2100      	movs	r1, #0
	__asm__ volatile(
    b5f4:	f04f 0320 	mov.w	r3, #32
    b5f8:	f3ef 8411 	mrs	r4, BASEPRI
    b5fc:	f383 8812 	msr	BASEPRI_MAX, r3
    b600:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    b604:	2200      	movs	r2, #0
    b606:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
    b608:	b969      	cbnz	r1, b626 <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
    b60a:	f7fb fccd 	bl	6fa8 <sys_clock_elapsed>
    b60e:	4b07      	ldr	r3, [pc, #28]	; (b62c <sys_clock_tick_get+0x3c>)
    b610:	e9d3 2300 	ldrd	r2, r3, [r3]
    b614:	1812      	adds	r2, r2, r0
    b616:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    b61a:	f384 8811 	msr	BASEPRI, r4
    b61e:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    b622:	2101      	movs	r1, #1
    b624:	e7f0      	b.n	b608 <sys_clock_tick_get+0x18>
	}
	return t;
}
    b626:	4610      	mov	r0, r2
    b628:	4619      	mov	r1, r3
    b62a:	bd10      	pop	{r4, pc}
    b62c:	200007d8 	.word	0x200007d8

0000b630 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    b630:	b570      	push	{r4, r5, r6, lr}
    b632:	4604      	mov	r4, r0
	__asm__ volatile(
    b634:	f04f 0320 	mov.w	r3, #32
    b638:	f3ef 8611 	mrs	r6, BASEPRI
    b63c:	f383 8812 	msr	BASEPRI_MAX, r3
    b640:	f3bf 8f6f 	isb	sy
    b644:	4635      	mov	r5, r6

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    b646:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    b64a:	ea52 0103 	orrs.w	r1, r2, r3
    b64e:	d005      	beq.n	b65c <z_timer_expiration_handler+0x2c>
    b650:	f1b3 3fff 	cmp.w	r3, #4294967295
    b654:	bf08      	it	eq
    b656:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    b65a:	d127      	bne.n	b6ac <z_timer_expiration_handler+0x7c>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    b65c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    b65e:	3301      	adds	r3, #1
    b660:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    b662:	6a23      	ldr	r3, [r4, #32]
    b664:	b173      	cbz	r3, b684 <z_timer_expiration_handler+0x54>
	__asm__ volatile(
    b666:	f386 8811 	msr	BASEPRI, r6
    b66a:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    b66e:	6a23      	ldr	r3, [r4, #32]
    b670:	4620      	mov	r0, r4
    b672:	4798      	blx	r3
	__asm__ volatile(
    b674:	f04f 0320 	mov.w	r3, #32
    b678:	f3ef 8511 	mrs	r5, BASEPRI
    b67c:	f383 8812 	msr	BASEPRI_MAX, r3
    b680:	f3bf 8f6f 	isb	sy
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    b684:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
    b688:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b68a:	42a3      	cmp	r3, r4
    b68c:	d012      	beq.n	b6b4 <z_timer_expiration_handler+0x84>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    b68e:	b18c      	cbz	r4, b6b4 <z_timer_expiration_handler+0x84>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
    b690:	4620      	mov	r0, r4
    b692:	f002 fe86 	bl	e3a2 <z_unpend_thread_no_timeout>
    b696:	2300      	movs	r3, #0
    b698:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	__asm__ volatile(
    b69c:	f385 8811 	msr	BASEPRI, r5
    b6a0:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
    b6a4:	4620      	mov	r0, r4
    b6a6:	f002 fee2 	bl	e46e <z_ready_thread>
}
    b6aa:	bd70      	pop	{r4, r5, r6, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    b6ac:	4904      	ldr	r1, [pc, #16]	; (b6c0 <z_timer_expiration_handler+0x90>)
    b6ae:	f7ff fe93 	bl	b3d8 <z_add_timeout>
    b6b2:	e7d3      	b.n	b65c <z_timer_expiration_handler+0x2c>
    b6b4:	f385 8811 	msr	BASEPRI, r5
    b6b8:	f3bf 8f6f 	isb	sy
		return;
    b6bc:	e7f5      	b.n	b6aa <z_timer_expiration_handler+0x7a>
    b6be:	bf00      	nop
    b6c0:	0000b631 	.word	0x0000b631

0000b6c4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    b6c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b6c8:	b087      	sub	sp, #28
    b6ca:	4614      	mov	r4, r2
    b6cc:	461d      	mov	r5, r3
    b6ce:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    b6d2:	f1b3 3fff 	cmp.w	r3, #4294967295
    b6d6:	bf08      	it	eq
    b6d8:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    b6dc:	d035      	beq.n	b74a <z_impl_k_timer_start+0x86>
    b6de:	4606      	mov	r6, r0
    b6e0:	4613      	mov	r3, r2
    b6e2:	462a      	mov	r2, r5
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    b6e4:	f1b9 3fff 	cmp.w	r9, #4294967295
    b6e8:	bf08      	it	eq
    b6ea:	f1b8 3fff 	cmpeq.w	r8, #4294967295
    b6ee:	d012      	beq.n	b716 <z_impl_k_timer_start+0x52>
    b6f0:	ea58 0109 	orrs.w	r1, r8, r9
    b6f4:	d00f      	beq.n	b716 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
    b6f6:	f06f 0701 	mvn.w	r7, #1
    b6fa:	ebb7 0708 	subs.w	r7, r7, r8
    b6fe:	9702      	str	r7, [sp, #8]
    b700:	f04f 31ff 	mov.w	r1, #4294967295
    b704:	eb61 0709 	sbc.w	r7, r1, r9
    b708:	9703      	str	r7, [sp, #12]
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    b70a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    b70e:	2800      	cmp	r0, #0
    b710:	f171 0100 	sbcs.w	r1, r1, #0
    b714:	db1c      	blt.n	b750 <z_impl_k_timer_start+0x8c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    b716:	f06f 0101 	mvn.w	r1, #1
    b71a:	ebb1 0a03 	subs.w	sl, r1, r3
    b71e:	f04f 31ff 	mov.w	r1, #4294967295
    b722:	eb61 0b02 	sbc.w	fp, r1, r2
    b726:	f1ba 0f00 	cmp.w	sl, #0
    b72a:	f17b 0100 	sbcs.w	r1, fp, #0
    b72e:	db23      	blt.n	b778 <z_impl_k_timer_start+0xb4>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
    b730:	4630      	mov	r0, r6
    b732:	f002 ffec 	bl	e70e <z_abort_timeout>
	timer->period = period;
    b736:	e9c6 890a 	strd	r8, r9, [r6, #40]	; 0x28
	timer->status = 0U;
    b73a:	2300      	movs	r3, #0
    b73c:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    b73e:	4622      	mov	r2, r4
    b740:	462b      	mov	r3, r5
    b742:	4917      	ldr	r1, [pc, #92]	; (b7a0 <z_impl_k_timer_start+0xdc>)
    b744:	4630      	mov	r0, r6
    b746:	f7ff fe47 	bl	b3d8 <z_add_timeout>
		     duration);
}
    b74a:	b007      	add	sp, #28
    b74c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		period.ticks = MAX(period.ticks - 1, 1);
    b750:	f118 31ff 	adds.w	r1, r8, #4294967295
    b754:	9104      	str	r1, [sp, #16]
    b756:	f149 31ff 	adc.w	r1, r9, #4294967295
    b75a:	9105      	str	r1, [sp, #20]
    b75c:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
    b760:	4638      	mov	r0, r7
    b762:	4641      	mov	r1, r8
    b764:	2f01      	cmp	r7, #1
    b766:	f178 0700 	sbcs.w	r7, r8, #0
    b76a:	db02      	blt.n	b772 <z_impl_k_timer_start+0xae>
    b76c:	4680      	mov	r8, r0
    b76e:	4689      	mov	r9, r1
    b770:	e7d1      	b.n	b716 <z_impl_k_timer_start+0x52>
    b772:	2001      	movs	r0, #1
    b774:	2100      	movs	r1, #0
    b776:	e7f9      	b.n	b76c <z_impl_k_timer_start+0xa8>
		duration.ticks = MAX(duration.ticks - 1, 0);
    b778:	f113 33ff 	adds.w	r3, r3, #4294967295
    b77c:	9300      	str	r3, [sp, #0]
    b77e:	f142 33ff 	adc.w	r3, r2, #4294967295
    b782:	9301      	str	r3, [sp, #4]
    b784:	e9dd 0100 	ldrd	r0, r1, [sp]
    b788:	4602      	mov	r2, r0
    b78a:	460b      	mov	r3, r1
    b78c:	2800      	cmp	r0, #0
    b78e:	f171 0100 	sbcs.w	r1, r1, #0
    b792:	db02      	blt.n	b79a <z_impl_k_timer_start+0xd6>
    b794:	4614      	mov	r4, r2
    b796:	461d      	mov	r5, r3
    b798:	e7ca      	b.n	b730 <z_impl_k_timer_start+0x6c>
    b79a:	2200      	movs	r2, #0
    b79c:	4613      	mov	r3, r2
    b79e:	e7f9      	b.n	b794 <z_impl_k_timer_start+0xd0>
    b7a0:	0000b631 	.word	0x0000b631

0000b7a4 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    b7a4:	b538      	push	{r3, r4, r5, lr}
    b7a6:	4604      	mov	r4, r0
    b7a8:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    b7aa:	f002 fcd2 	bl	e152 <k_is_in_isr>
    b7ae:	b948      	cbnz	r0, b7c4 <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    b7b0:	4b05      	ldr	r3, [pc, #20]	; (b7c8 <z_thread_aligned_alloc+0x24>)
    b7b2:	689b      	ldr	r3, [r3, #8]
    b7b4:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
	}

	if (heap != NULL) {
    b7b8:	b118      	cbz	r0, b7c2 <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
    b7ba:	462a      	mov	r2, r5
    b7bc:	4621      	mov	r1, r4
    b7be:	f003 f866 	bl	e88e <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
    b7c2:	bd38      	pop	{r3, r4, r5, pc}
		ret = NULL;
    b7c4:	2000      	movs	r0, #0
	return ret;
    b7c6:	e7fc      	b.n	b7c2 <z_thread_aligned_alloc+0x1e>
    b7c8:	200024d8 	.word	0x200024d8

0000b7cc <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    b7cc:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    b7ce:	4a03      	ldr	r2, [pc, #12]	; (b7dc <boot_banner+0x10>)
    b7d0:	4903      	ldr	r1, [pc, #12]	; (b7e0 <boot_banner+0x14>)
    b7d2:	4804      	ldr	r0, [pc, #16]	; (b7e4 <boot_banner+0x18>)
    b7d4:	f000 fa56 	bl	bc84 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    b7d8:	bd08      	pop	{r3, pc}
    b7da:	bf00      	nop
    b7dc:	0000ed88 	.word	0x0000ed88
    b7e0:	0000fe54 	.word	0x0000fe54
    b7e4:	0000fe64 	.word	0x0000fe64

0000b7e8 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    b7e8:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    b7ea:	4c06      	ldr	r4, [pc, #24]	; (b804 <statics_init+0x1c>)
    b7ec:	4b06      	ldr	r3, [pc, #24]	; (b808 <statics_init+0x20>)
    b7ee:	429c      	cmp	r4, r3
    b7f0:	d206      	bcs.n	b800 <statics_init+0x18>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    b7f2:	68a2      	ldr	r2, [r4, #8]
    b7f4:	6861      	ldr	r1, [r4, #4]
    b7f6:	4620      	mov	r0, r4
    b7f8:	f003 f86c 	bl	e8d4 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    b7fc:	3414      	adds	r4, #20
    b7fe:	e7f5      	b.n	b7ec <statics_init+0x4>
		}
	}
	return 0;
}
    b800:	2000      	movs	r0, #0
    b802:	bd10      	pop	{r4, pc}
    b804:	20000250 	.word	0x20000250
    b808:	20000250 	.word	0x20000250

0000b80c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    b80c:	b510      	push	{r4, lr}
    b80e:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    b810:	4b08      	ldr	r3, [pc, #32]	; (b834 <k_sys_work_q_init+0x28>)
    b812:	9302      	str	r3, [sp, #8]
    b814:	2400      	movs	r4, #0
    b816:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    b81a:	ab02      	add	r3, sp, #8
    b81c:	9300      	str	r3, [sp, #0]
    b81e:	f04f 33ff 	mov.w	r3, #4294967295
    b822:	f44f 6280 	mov.w	r2, #1024	; 0x400
    b826:	4904      	ldr	r1, [pc, #16]	; (b838 <k_sys_work_q_init+0x2c>)
    b828:	4804      	ldr	r0, [pc, #16]	; (b83c <k_sys_work_q_init+0x30>)
    b82a:	f7ff f929 	bl	aa80 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    b82e:	4620      	mov	r0, r4
    b830:	b004      	add	sp, #16
    b832:	bd10      	pop	{r4, pc}
    b834:	0000fe8c 	.word	0x0000fe8c
    b838:	20004000 	.word	0x20004000
    b83c:	200007e0 	.word	0x200007e0

0000b840 <nrf_cc3xx_platform_init_no_rng>:
    b840:	b510      	push	{r4, lr}
    b842:	4c0a      	ldr	r4, [pc, #40]	; (b86c <nrf_cc3xx_platform_init_no_rng+0x2c>)
    b844:	6823      	ldr	r3, [r4, #0]
    b846:	b11b      	cbz	r3, b850 <nrf_cc3xx_platform_init_no_rng+0x10>
    b848:	2301      	movs	r3, #1
    b84a:	6023      	str	r3, [r4, #0]
    b84c:	2000      	movs	r0, #0
    b84e:	bd10      	pop	{r4, pc}
    b850:	f000 f8d6 	bl	ba00 <CC_LibInitNoRng>
    b854:	2800      	cmp	r0, #0
    b856:	d0f7      	beq.n	b848 <nrf_cc3xx_platform_init_no_rng+0x8>
    b858:	3801      	subs	r0, #1
    b85a:	2806      	cmp	r0, #6
    b85c:	d803      	bhi.n	b866 <nrf_cc3xx_platform_init_no_rng+0x26>
    b85e:	4b04      	ldr	r3, [pc, #16]	; (b870 <nrf_cc3xx_platform_init_no_rng+0x30>)
    b860:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    b864:	bd10      	pop	{r4, pc}
    b866:	4803      	ldr	r0, [pc, #12]	; (b874 <nrf_cc3xx_platform_init_no_rng+0x34>)
    b868:	bd10      	pop	{r4, pc}
    b86a:	bf00      	nop
    b86c:	2000251c 	.word	0x2000251c
    b870:	0000fe98 	.word	0x0000fe98
    b874:	ffff8ffe 	.word	0xffff8ffe

0000b878 <nrf_cc3xx_platform_abort>:
    b878:	f3bf 8f4f 	dsb	sy
    b87c:	4905      	ldr	r1, [pc, #20]	; (b894 <nrf_cc3xx_platform_abort+0x1c>)
    b87e:	4b06      	ldr	r3, [pc, #24]	; (b898 <nrf_cc3xx_platform_abort+0x20>)
    b880:	68ca      	ldr	r2, [r1, #12]
    b882:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    b886:	4313      	orrs	r3, r2
    b888:	60cb      	str	r3, [r1, #12]
    b88a:	f3bf 8f4f 	dsb	sy
    b88e:	bf00      	nop
    b890:	e7fd      	b.n	b88e <nrf_cc3xx_platform_abort+0x16>
    b892:	bf00      	nop
    b894:	e000ed00 	.word	0xe000ed00
    b898:	05fa0004 	.word	0x05fa0004

0000b89c <CC_PalAbort>:
    b89c:	b4f0      	push	{r4, r5, r6, r7}
    b89e:	4f09      	ldr	r7, [pc, #36]	; (b8c4 <CC_PalAbort+0x28>)
    b8a0:	4e09      	ldr	r6, [pc, #36]	; (b8c8 <CC_PalAbort+0x2c>)
    b8a2:	4c0a      	ldr	r4, [pc, #40]	; (b8cc <CC_PalAbort+0x30>)
    b8a4:	4a0a      	ldr	r2, [pc, #40]	; (b8d0 <CC_PalAbort+0x34>)
    b8a6:	4d0b      	ldr	r5, [pc, #44]	; (b8d4 <CC_PalAbort+0x38>)
    b8a8:	490b      	ldr	r1, [pc, #44]	; (b8d8 <CC_PalAbort+0x3c>)
    b8aa:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    b8ae:	603b      	str	r3, [r7, #0]
    b8b0:	6852      	ldr	r2, [r2, #4]
    b8b2:	6033      	str	r3, [r6, #0]
    b8b4:	6023      	str	r3, [r4, #0]
    b8b6:	2400      	movs	r4, #0
    b8b8:	602b      	str	r3, [r5, #0]
    b8ba:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    b8be:	bcf0      	pop	{r4, r5, r6, r7}
    b8c0:	4710      	bx	r2
    b8c2:	bf00      	nop
    b8c4:	5002b400 	.word	0x5002b400
    b8c8:	5002b404 	.word	0x5002b404
    b8cc:	5002b408 	.word	0x5002b408
    b8d0:	200001bc 	.word	0x200001bc
    b8d4:	5002b40c 	.word	0x5002b40c
    b8d8:	5002a000 	.word	0x5002a000

0000b8dc <nrf_cc3xx_platform_set_abort>:
    b8dc:	e9d0 1200 	ldrd	r1, r2, [r0]
    b8e0:	4b01      	ldr	r3, [pc, #4]	; (b8e8 <nrf_cc3xx_platform_set_abort+0xc>)
    b8e2:	e9c3 1200 	strd	r1, r2, [r3]
    b8e6:	4770      	bx	lr
    b8e8:	200001bc 	.word	0x200001bc

0000b8ec <mutex_free>:
    b8ec:	b510      	push	{r4, lr}
    b8ee:	4604      	mov	r4, r0
    b8f0:	b130      	cbz	r0, b900 <mutex_free+0x14>
    b8f2:	6863      	ldr	r3, [r4, #4]
    b8f4:	06db      	lsls	r3, r3, #27
    b8f6:	d502      	bpl.n	b8fe <mutex_free+0x12>
    b8f8:	2300      	movs	r3, #0
    b8fa:	6023      	str	r3, [r4, #0]
    b8fc:	6063      	str	r3, [r4, #4]
    b8fe:	bd10      	pop	{r4, pc}
    b900:	4b02      	ldr	r3, [pc, #8]	; (b90c <mutex_free+0x20>)
    b902:	4803      	ldr	r0, [pc, #12]	; (b910 <mutex_free+0x24>)
    b904:	685b      	ldr	r3, [r3, #4]
    b906:	4798      	blx	r3
    b908:	e7f3      	b.n	b8f2 <mutex_free+0x6>
    b90a:	bf00      	nop
    b90c:	200001bc 	.word	0x200001bc
    b910:	0000feb4 	.word	0x0000feb4

0000b914 <mutex_unlock>:
    b914:	b168      	cbz	r0, b932 <mutex_unlock+0x1e>
    b916:	6843      	ldr	r3, [r0, #4]
    b918:	b13b      	cbz	r3, b92a <mutex_unlock+0x16>
    b91a:	06db      	lsls	r3, r3, #27
    b91c:	d507      	bpl.n	b92e <mutex_unlock+0x1a>
    b91e:	f3bf 8f5f 	dmb	sy
    b922:	2300      	movs	r3, #0
    b924:	6003      	str	r3, [r0, #0]
    b926:	4618      	mov	r0, r3
    b928:	4770      	bx	lr
    b92a:	4803      	ldr	r0, [pc, #12]	; (b938 <mutex_unlock+0x24>)
    b92c:	4770      	bx	lr
    b92e:	4803      	ldr	r0, [pc, #12]	; (b93c <mutex_unlock+0x28>)
    b930:	4770      	bx	lr
    b932:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    b936:	4770      	bx	lr
    b938:	ffff8fea 	.word	0xffff8fea
    b93c:	ffff8fe9 	.word	0xffff8fe9

0000b940 <mutex_init>:
    b940:	b510      	push	{r4, lr}
    b942:	4604      	mov	r4, r0
    b944:	b120      	cbz	r0, b950 <mutex_init+0x10>
    b946:	2200      	movs	r2, #0
    b948:	2311      	movs	r3, #17
    b94a:	6022      	str	r2, [r4, #0]
    b94c:	6063      	str	r3, [r4, #4]
    b94e:	bd10      	pop	{r4, pc}
    b950:	4801      	ldr	r0, [pc, #4]	; (b958 <mutex_init+0x18>)
    b952:	f7ff ffa3 	bl	b89c <CC_PalAbort>
    b956:	e7f6      	b.n	b946 <mutex_init+0x6>
    b958:	0000fedc 	.word	0x0000fedc

0000b95c <mutex_lock>:
    b95c:	b1c0      	cbz	r0, b990 <mutex_lock+0x34>
    b95e:	6843      	ldr	r3, [r0, #4]
    b960:	b1a3      	cbz	r3, b98c <mutex_lock+0x30>
    b962:	06db      	lsls	r3, r3, #27
    b964:	d510      	bpl.n	b988 <mutex_lock+0x2c>
    b966:	2201      	movs	r2, #1
    b968:	f3bf 8f5b 	dmb	ish
    b96c:	e850 3f00 	ldrex	r3, [r0]
    b970:	e840 2100 	strex	r1, r2, [r0]
    b974:	2900      	cmp	r1, #0
    b976:	d1f9      	bne.n	b96c <mutex_lock+0x10>
    b978:	f3bf 8f5b 	dmb	ish
    b97c:	2b01      	cmp	r3, #1
    b97e:	d0f3      	beq.n	b968 <mutex_lock+0xc>
    b980:	f3bf 8f5f 	dmb	sy
    b984:	2000      	movs	r0, #0
    b986:	4770      	bx	lr
    b988:	4803      	ldr	r0, [pc, #12]	; (b998 <mutex_lock+0x3c>)
    b98a:	4770      	bx	lr
    b98c:	4803      	ldr	r0, [pc, #12]	; (b99c <mutex_lock+0x40>)
    b98e:	4770      	bx	lr
    b990:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    b994:	4770      	bx	lr
    b996:	bf00      	nop
    b998:	ffff8fe9 	.word	0xffff8fe9
    b99c:	ffff8fea 	.word	0xffff8fea

0000b9a0 <nrf_cc3xx_platform_set_mutexes>:
    b9a0:	b570      	push	{r4, r5, r6, lr}
    b9a2:	e9d0 2300 	ldrd	r2, r3, [r0]
    b9a6:	4c13      	ldr	r4, [pc, #76]	; (b9f4 <nrf_cc3xx_platform_set_mutexes+0x54>)
    b9a8:	4d13      	ldr	r5, [pc, #76]	; (b9f8 <nrf_cc3xx_platform_set_mutexes+0x58>)
    b9aa:	e9c4 2300 	strd	r2, r3, [r4]
    b9ae:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    b9b2:	e9c4 6302 	strd	r6, r3, [r4, #8]
    b9b6:	4b11      	ldr	r3, [pc, #68]	; (b9fc <nrf_cc3xx_platform_set_mutexes+0x5c>)
    b9b8:	6808      	ldr	r0, [r1, #0]
    b9ba:	6018      	str	r0, [r3, #0]
    b9bc:	6848      	ldr	r0, [r1, #4]
    b9be:	6058      	str	r0, [r3, #4]
    b9c0:	6888      	ldr	r0, [r1, #8]
    b9c2:	6098      	str	r0, [r3, #8]
    b9c4:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    b9c8:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    b9cc:	60de      	str	r6, [r3, #12]
    b9ce:	6118      	str	r0, [r3, #16]
    b9d0:	06cb      	lsls	r3, r1, #27
    b9d2:	d50d      	bpl.n	b9f0 <nrf_cc3xx_platform_set_mutexes+0x50>
    b9d4:	2300      	movs	r3, #0
    b9d6:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    b9da:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    b9de:	f505 7088 	add.w	r0, r5, #272	; 0x110
    b9e2:	4790      	blx	r2
    b9e4:	6823      	ldr	r3, [r4, #0]
    b9e6:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    b9ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b9ee:	4718      	bx	r3
    b9f0:	bd70      	pop	{r4, r5, r6, pc}
    b9f2:	bf00      	nop
    b9f4:	200001cc 	.word	0x200001cc
    b9f8:	20002544 	.word	0x20002544
    b9fc:	200001dc 	.word	0x200001dc

0000ba00 <CC_LibInitNoRng>:
    ba00:	b510      	push	{r4, lr}
    ba02:	f000 f833 	bl	ba6c <CC_HalInit>
    ba06:	b120      	cbz	r0, ba12 <CC_LibInitNoRng+0x12>
    ba08:	2403      	movs	r4, #3
    ba0a:	f000 f867 	bl	badc <CC_PalTerminate>
    ba0e:	4620      	mov	r0, r4
    ba10:	bd10      	pop	{r4, pc}
    ba12:	f000 f835 	bl	ba80 <CC_PalInit>
    ba16:	b990      	cbnz	r0, ba3e <CC_LibInitNoRng+0x3e>
    ba18:	f000 f8b0 	bl	bb7c <CC_PalPowerSaveModeSelect>
    ba1c:	b990      	cbnz	r0, ba44 <CC_LibInitNoRng+0x44>
    ba1e:	4b0f      	ldr	r3, [pc, #60]	; (ba5c <CC_LibInitNoRng+0x5c>)
    ba20:	681b      	ldr	r3, [r3, #0]
    ba22:	0e1b      	lsrs	r3, r3, #24
    ba24:	2bf0      	cmp	r3, #240	; 0xf0
    ba26:	d108      	bne.n	ba3a <CC_LibInitNoRng+0x3a>
    ba28:	4a0d      	ldr	r2, [pc, #52]	; (ba60 <CC_LibInitNoRng+0x60>)
    ba2a:	4b0e      	ldr	r3, [pc, #56]	; (ba64 <CC_LibInitNoRng+0x64>)
    ba2c:	6812      	ldr	r2, [r2, #0]
    ba2e:	429a      	cmp	r2, r3
    ba30:	d00a      	beq.n	ba48 <CC_LibInitNoRng+0x48>
    ba32:	2407      	movs	r4, #7
    ba34:	f000 f81c 	bl	ba70 <CC_HalTerminate>
    ba38:	e7e7      	b.n	ba0a <CC_LibInitNoRng+0xa>
    ba3a:	2406      	movs	r4, #6
    ba3c:	e7fa      	b.n	ba34 <CC_LibInitNoRng+0x34>
    ba3e:	2404      	movs	r4, #4
    ba40:	4620      	mov	r0, r4
    ba42:	bd10      	pop	{r4, pc}
    ba44:	2400      	movs	r4, #0
    ba46:	e7f5      	b.n	ba34 <CC_LibInitNoRng+0x34>
    ba48:	2001      	movs	r0, #1
    ba4a:	f000 f897 	bl	bb7c <CC_PalPowerSaveModeSelect>
    ba4e:	4604      	mov	r4, r0
    ba50:	2800      	cmp	r0, #0
    ba52:	d1f7      	bne.n	ba44 <CC_LibInitNoRng+0x44>
    ba54:	4b04      	ldr	r3, [pc, #16]	; (ba68 <CC_LibInitNoRng+0x68>)
    ba56:	6018      	str	r0, [r3, #0]
    ba58:	e7d9      	b.n	ba0e <CC_LibInitNoRng+0xe>
    ba5a:	bf00      	nop
    ba5c:	5002b928 	.word	0x5002b928
    ba60:	5002ba24 	.word	0x5002ba24
    ba64:	20e00000 	.word	0x20e00000
    ba68:	5002ba0c 	.word	0x5002ba0c

0000ba6c <CC_HalInit>:
    ba6c:	2000      	movs	r0, #0
    ba6e:	4770      	bx	lr

0000ba70 <CC_HalTerminate>:
    ba70:	2000      	movs	r0, #0
    ba72:	4770      	bx	lr

0000ba74 <CC_HalMaskInterrupt>:
    ba74:	4b01      	ldr	r3, [pc, #4]	; (ba7c <CC_HalMaskInterrupt+0x8>)
    ba76:	6018      	str	r0, [r3, #0]
    ba78:	4770      	bx	lr
    ba7a:	bf00      	nop
    ba7c:	5002ba04 	.word	0x5002ba04

0000ba80 <CC_PalInit>:
    ba80:	b510      	push	{r4, lr}
    ba82:	4811      	ldr	r0, [pc, #68]	; (bac8 <CC_PalInit+0x48>)
    ba84:	f000 f848 	bl	bb18 <CC_PalMutexCreate>
    ba88:	b100      	cbz	r0, ba8c <CC_PalInit+0xc>
    ba8a:	bd10      	pop	{r4, pc}
    ba8c:	480f      	ldr	r0, [pc, #60]	; (bacc <CC_PalInit+0x4c>)
    ba8e:	f000 f843 	bl	bb18 <CC_PalMutexCreate>
    ba92:	2800      	cmp	r0, #0
    ba94:	d1f9      	bne.n	ba8a <CC_PalInit+0xa>
    ba96:	4c0e      	ldr	r4, [pc, #56]	; (bad0 <CC_PalInit+0x50>)
    ba98:	4620      	mov	r0, r4
    ba9a:	f000 f83d 	bl	bb18 <CC_PalMutexCreate>
    ba9e:	2800      	cmp	r0, #0
    baa0:	d1f3      	bne.n	ba8a <CC_PalInit+0xa>
    baa2:	4b0c      	ldr	r3, [pc, #48]	; (bad4 <CC_PalInit+0x54>)
    baa4:	480c      	ldr	r0, [pc, #48]	; (bad8 <CC_PalInit+0x58>)
    baa6:	601c      	str	r4, [r3, #0]
    baa8:	f000 f836 	bl	bb18 <CC_PalMutexCreate>
    baac:	4601      	mov	r1, r0
    baae:	2800      	cmp	r0, #0
    bab0:	d1eb      	bne.n	ba8a <CC_PalInit+0xa>
    bab2:	f000 f82d 	bl	bb10 <CC_PalDmaInit>
    bab6:	4604      	mov	r4, r0
    bab8:	b108      	cbz	r0, babe <CC_PalInit+0x3e>
    baba:	4620      	mov	r0, r4
    babc:	bd10      	pop	{r4, pc}
    babe:	f000 f83f 	bl	bb40 <CC_PalPowerSaveModeInit>
    bac2:	4620      	mov	r0, r4
    bac4:	e7fa      	b.n	babc <CC_PalInit+0x3c>
    bac6:	bf00      	nop
    bac8:	20000214 	.word	0x20000214
    bacc:	20000208 	.word	0x20000208
    bad0:	20000210 	.word	0x20000210
    bad4:	20000218 	.word	0x20000218
    bad8:	2000020c 	.word	0x2000020c

0000badc <CC_PalTerminate>:
    badc:	b508      	push	{r3, lr}
    bade:	4808      	ldr	r0, [pc, #32]	; (bb00 <CC_PalTerminate+0x24>)
    bae0:	f000 f824 	bl	bb2c <CC_PalMutexDestroy>
    bae4:	4807      	ldr	r0, [pc, #28]	; (bb04 <CC_PalTerminate+0x28>)
    bae6:	f000 f821 	bl	bb2c <CC_PalMutexDestroy>
    baea:	4807      	ldr	r0, [pc, #28]	; (bb08 <CC_PalTerminate+0x2c>)
    baec:	f000 f81e 	bl	bb2c <CC_PalMutexDestroy>
    baf0:	4806      	ldr	r0, [pc, #24]	; (bb0c <CC_PalTerminate+0x30>)
    baf2:	f000 f81b 	bl	bb2c <CC_PalMutexDestroy>
    baf6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    bafa:	f000 b80b 	b.w	bb14 <CC_PalDmaTerminate>
    bafe:	bf00      	nop
    bb00:	20000214 	.word	0x20000214
    bb04:	20000208 	.word	0x20000208
    bb08:	20000210 	.word	0x20000210
    bb0c:	2000020c 	.word	0x2000020c

0000bb10 <CC_PalDmaInit>:
    bb10:	2000      	movs	r0, #0
    bb12:	4770      	bx	lr

0000bb14 <CC_PalDmaTerminate>:
    bb14:	4770      	bx	lr
    bb16:	bf00      	nop

0000bb18 <CC_PalMutexCreate>:
    bb18:	b508      	push	{r3, lr}
    bb1a:	4b03      	ldr	r3, [pc, #12]	; (bb28 <CC_PalMutexCreate+0x10>)
    bb1c:	6802      	ldr	r2, [r0, #0]
    bb1e:	681b      	ldr	r3, [r3, #0]
    bb20:	6810      	ldr	r0, [r2, #0]
    bb22:	4798      	blx	r3
    bb24:	2000      	movs	r0, #0
    bb26:	bd08      	pop	{r3, pc}
    bb28:	200001cc 	.word	0x200001cc

0000bb2c <CC_PalMutexDestroy>:
    bb2c:	b508      	push	{r3, lr}
    bb2e:	4b03      	ldr	r3, [pc, #12]	; (bb3c <CC_PalMutexDestroy+0x10>)
    bb30:	6802      	ldr	r2, [r0, #0]
    bb32:	685b      	ldr	r3, [r3, #4]
    bb34:	6810      	ldr	r0, [r2, #0]
    bb36:	4798      	blx	r3
    bb38:	2000      	movs	r0, #0
    bb3a:	bd08      	pop	{r3, pc}
    bb3c:	200001cc 	.word	0x200001cc

0000bb40 <CC_PalPowerSaveModeInit>:
    bb40:	b570      	push	{r4, r5, r6, lr}
    bb42:	4c09      	ldr	r4, [pc, #36]	; (bb68 <CC_PalPowerSaveModeInit+0x28>)
    bb44:	4d09      	ldr	r5, [pc, #36]	; (bb6c <CC_PalPowerSaveModeInit+0x2c>)
    bb46:	6920      	ldr	r0, [r4, #16]
    bb48:	68ab      	ldr	r3, [r5, #8]
    bb4a:	4798      	blx	r3
    bb4c:	b118      	cbz	r0, bb56 <CC_PalPowerSaveModeInit+0x16>
    bb4e:	4b08      	ldr	r3, [pc, #32]	; (bb70 <CC_PalPowerSaveModeInit+0x30>)
    bb50:	4808      	ldr	r0, [pc, #32]	; (bb74 <CC_PalPowerSaveModeInit+0x34>)
    bb52:	685b      	ldr	r3, [r3, #4]
    bb54:	4798      	blx	r3
    bb56:	4a08      	ldr	r2, [pc, #32]	; (bb78 <CC_PalPowerSaveModeInit+0x38>)
    bb58:	68eb      	ldr	r3, [r5, #12]
    bb5a:	6920      	ldr	r0, [r4, #16]
    bb5c:	2100      	movs	r1, #0
    bb5e:	6011      	str	r1, [r2, #0]
    bb60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bb64:	4718      	bx	r3
    bb66:	bf00      	nop
    bb68:	200001dc 	.word	0x200001dc
    bb6c:	200001cc 	.word	0x200001cc
    bb70:	200001bc 	.word	0x200001bc
    bb74:	0000ff00 	.word	0x0000ff00
    bb78:	20002530 	.word	0x20002530

0000bb7c <CC_PalPowerSaveModeSelect>:
    bb7c:	b570      	push	{r4, r5, r6, lr}
    bb7e:	4d1a      	ldr	r5, [pc, #104]	; (bbe8 <CC_PalPowerSaveModeSelect+0x6c>)
    bb80:	4e1a      	ldr	r6, [pc, #104]	; (bbec <CC_PalPowerSaveModeSelect+0x70>)
    bb82:	4604      	mov	r4, r0
    bb84:	68b2      	ldr	r2, [r6, #8]
    bb86:	6928      	ldr	r0, [r5, #16]
    bb88:	4790      	blx	r2
    bb8a:	b9f0      	cbnz	r0, bbca <CC_PalPowerSaveModeSelect+0x4e>
    bb8c:	b15c      	cbz	r4, bba6 <CC_PalPowerSaveModeSelect+0x2a>
    bb8e:	4c18      	ldr	r4, [pc, #96]	; (bbf0 <CC_PalPowerSaveModeSelect+0x74>)
    bb90:	6823      	ldr	r3, [r4, #0]
    bb92:	b1ab      	cbz	r3, bbc0 <CC_PalPowerSaveModeSelect+0x44>
    bb94:	2b01      	cmp	r3, #1
    bb96:	d01a      	beq.n	bbce <CC_PalPowerSaveModeSelect+0x52>
    bb98:	3b01      	subs	r3, #1
    bb9a:	6023      	str	r3, [r4, #0]
    bb9c:	6928      	ldr	r0, [r5, #16]
    bb9e:	68f3      	ldr	r3, [r6, #12]
    bba0:	4798      	blx	r3
    bba2:	2000      	movs	r0, #0
    bba4:	bd70      	pop	{r4, r5, r6, pc}
    bba6:	4c12      	ldr	r4, [pc, #72]	; (bbf0 <CC_PalPowerSaveModeSelect+0x74>)
    bba8:	6821      	ldr	r1, [r4, #0]
    bbaa:	b939      	cbnz	r1, bbbc <CC_PalPowerSaveModeSelect+0x40>
    bbac:	4b11      	ldr	r3, [pc, #68]	; (bbf4 <CC_PalPowerSaveModeSelect+0x78>)
    bbae:	4a12      	ldr	r2, [pc, #72]	; (bbf8 <CC_PalPowerSaveModeSelect+0x7c>)
    bbb0:	2001      	movs	r0, #1
    bbb2:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    bbb6:	6813      	ldr	r3, [r2, #0]
    bbb8:	2b00      	cmp	r3, #0
    bbba:	d1fc      	bne.n	bbb6 <CC_PalPowerSaveModeSelect+0x3a>
    bbbc:	3101      	adds	r1, #1
    bbbe:	6021      	str	r1, [r4, #0]
    bbc0:	68f3      	ldr	r3, [r6, #12]
    bbc2:	6928      	ldr	r0, [r5, #16]
    bbc4:	4798      	blx	r3
    bbc6:	2000      	movs	r0, #0
    bbc8:	bd70      	pop	{r4, r5, r6, pc}
    bbca:	480c      	ldr	r0, [pc, #48]	; (bbfc <CC_PalPowerSaveModeSelect+0x80>)
    bbcc:	bd70      	pop	{r4, r5, r6, pc}
    bbce:	4a0a      	ldr	r2, [pc, #40]	; (bbf8 <CC_PalPowerSaveModeSelect+0x7c>)
    bbd0:	6813      	ldr	r3, [r2, #0]
    bbd2:	2b00      	cmp	r3, #0
    bbd4:	d1fc      	bne.n	bbd0 <CC_PalPowerSaveModeSelect+0x54>
    bbd6:	4a07      	ldr	r2, [pc, #28]	; (bbf4 <CC_PalPowerSaveModeSelect+0x78>)
    bbd8:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    bbdc:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    bbe0:	f7ff ff48 	bl	ba74 <CC_HalMaskInterrupt>
    bbe4:	6823      	ldr	r3, [r4, #0]
    bbe6:	e7d7      	b.n	bb98 <CC_PalPowerSaveModeSelect+0x1c>
    bbe8:	200001dc 	.word	0x200001dc
    bbec:	200001cc 	.word	0x200001cc
    bbf0:	20002530 	.word	0x20002530
    bbf4:	5002a000 	.word	0x5002a000
    bbf8:	5002b910 	.word	0x5002b910
    bbfc:	ffff8fe9 	.word	0xffff8fe9

0000bc00 <main>:

#include <zephyr.h>
#include  "protocol-usb.h"

void main(void)
{
    bc00:	b508      	push	{r3, lr}
	configureUSB();
    bc02:	f7f4 fc4b 	bl	49c <configureUSB>
}
    bc06:	bd08      	pop	{r3, pc}

0000bc08 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    bc08:	4602      	mov	r2, r0
    bc0a:	b158      	cbz	r0, bc24 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    bc0c:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    bc0e:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    bc12:	2b01      	cmp	r3, #1
    bc14:	d003      	beq.n	bc1e <sys_notify_validate+0x16>
    bc16:	2b03      	cmp	r3, #3
    bc18:	d107      	bne.n	bc2a <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    bc1a:	6803      	ldr	r3, [r0, #0]
    bc1c:	b143      	cbz	r3, bc30 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    bc1e:	2000      	movs	r0, #0
    bc20:	6090      	str	r0, [r2, #8]
    bc22:	4770      	bx	lr
		return -EINVAL;
    bc24:	f06f 0015 	mvn.w	r0, #21
    bc28:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    bc2a:	f06f 0015 	mvn.w	r0, #21
    bc2e:	4770      	bx	lr
			rv = -EINVAL;
    bc30:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    bc34:	4770      	bx	lr

0000bc36 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    bc36:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    bc38:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    bc3a:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    bc3e:	6081      	str	r1, [r0, #8]
	switch (method) {
    bc40:	2a03      	cmp	r2, #3
    bc42:	d103      	bne.n	bc4c <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    bc44:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    bc46:	2200      	movs	r2, #0
    bc48:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    bc4a:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
    bc4c:	2000      	movs	r0, #0
    bc4e:	e7fa      	b.n	bc46 <sys_notify_finalize+0x10>

0000bc50 <arch_printk_char_out>:
}
    bc50:	2000      	movs	r0, #0
    bc52:	4770      	bx	lr

0000bc54 <str_out>:
{
    bc54:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    bc56:	680c      	ldr	r4, [r1, #0]
    bc58:	b154      	cbz	r4, bc70 <str_out+0x1c>
    bc5a:	688a      	ldr	r2, [r1, #8]
    bc5c:	684b      	ldr	r3, [r1, #4]
    bc5e:	429a      	cmp	r2, r3
    bc60:	da06      	bge.n	bc70 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
    bc62:	3b01      	subs	r3, #1
    bc64:	429a      	cmp	r2, r3
    bc66:	d008      	beq.n	bc7a <str_out+0x26>
		ctx->str[ctx->count++] = c;
    bc68:	1c53      	adds	r3, r2, #1
    bc6a:	608b      	str	r3, [r1, #8]
    bc6c:	54a0      	strb	r0, [r4, r2]
    bc6e:	e002      	b.n	bc76 <str_out+0x22>
		ctx->count++;
    bc70:	688b      	ldr	r3, [r1, #8]
    bc72:	3301      	adds	r3, #1
    bc74:	608b      	str	r3, [r1, #8]
}
    bc76:	bc10      	pop	{r4}
    bc78:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    bc7a:	1c53      	adds	r3, r2, #1
    bc7c:	608b      	str	r3, [r1, #8]
    bc7e:	2300      	movs	r3, #0
    bc80:	54a3      	strb	r3, [r4, r2]
    bc82:	e7f8      	b.n	bc76 <str_out+0x22>

0000bc84 <printk>:
{
    bc84:	b40f      	push	{r0, r1, r2, r3}
    bc86:	b500      	push	{lr}
    bc88:	b083      	sub	sp, #12
    bc8a:	a904      	add	r1, sp, #16
    bc8c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    bc90:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    bc92:	f7f4 fc73 	bl	57c <vprintk>
}
    bc96:	b003      	add	sp, #12
    bc98:	f85d eb04 	ldr.w	lr, [sp], #4
    bc9c:	b004      	add	sp, #16
    bc9e:	4770      	bx	lr

0000bca0 <snprintk>:
{
    bca0:	b40c      	push	{r2, r3}
    bca2:	b500      	push	{lr}
    bca4:	b083      	sub	sp, #12
    bca6:	ab04      	add	r3, sp, #16
    bca8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    bcac:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    bcae:	f7f4 fc75 	bl	59c <vsnprintk>
}
    bcb2:	b003      	add	sp, #12
    bcb4:	f85d eb04 	ldr.w	lr, [sp], #4
    bcb8:	b002      	add	sp, #8
    bcba:	4770      	bx	lr

0000bcbc <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    bcbc:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    bcc0:	8b01      	ldrh	r1, [r0, #24]
    bcc2:	f021 0107 	bic.w	r1, r1, #7
    bcc6:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    bcc8:	8301      	strh	r1, [r0, #24]
}
    bcca:	4770      	bx	lr

0000bccc <notify_monitors>:
{
    bccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bcd0:	4606      	mov	r6, r0
    bcd2:	460f      	mov	r7, r1
    bcd4:	4690      	mov	r8, r2
	return list->head;
    bcd6:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    bcd8:	b119      	cbz	r1, bce2 <notify_monitors+0x16>
    bcda:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    bcdc:	b131      	cbz	r1, bcec <notify_monitors+0x20>
	return node->next;
    bcde:	680c      	ldr	r4, [r1, #0]
    bce0:	e004      	b.n	bcec <notify_monitors+0x20>
    bce2:	460c      	mov	r4, r1
    bce4:	e002      	b.n	bcec <notify_monitors+0x20>
    bce6:	4623      	mov	r3, r4
    bce8:	4621      	mov	r1, r4
    bcea:	461c      	mov	r4, r3
    bcec:	b159      	cbz	r1, bd06 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    bcee:	684d      	ldr	r5, [r1, #4]
    bcf0:	4643      	mov	r3, r8
    bcf2:	463a      	mov	r2, r7
    bcf4:	4630      	mov	r0, r6
    bcf6:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    bcf8:	2c00      	cmp	r4, #0
    bcfa:	d0f4      	beq.n	bce6 <notify_monitors+0x1a>
    bcfc:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    bcfe:	2c00      	cmp	r4, #0
    bd00:	d0f2      	beq.n	bce8 <notify_monitors+0x1c>
	return node->next;
    bd02:	6823      	ldr	r3, [r4, #0]
    bd04:	e7f0      	b.n	bce8 <notify_monitors+0x1c>
}
    bd06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000bd0a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    bd0a:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    bd0c:	f013 0307 	ands.w	r3, r3, #7
    bd10:	d103      	bne.n	bd1a <process_recheck+0x10>
	return list->head;
    bd12:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    bd14:	b10a      	cbz	r2, bd1a <process_recheck+0x10>
		evt = EVT_START;
    bd16:	2003      	movs	r0, #3
    bd18:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    bd1a:	2b02      	cmp	r3, #2
    bd1c:	d003      	beq.n	bd26 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    bd1e:	2b01      	cmp	r3, #1
    bd20:	d006      	beq.n	bd30 <process_recheck+0x26>
	int evt = EVT_NOP;
    bd22:	2000      	movs	r0, #0
    bd24:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    bd26:	8b42      	ldrh	r2, [r0, #26]
    bd28:	2a00      	cmp	r2, #0
    bd2a:	d1f8      	bne.n	bd1e <process_recheck+0x14>
		evt = EVT_STOP;
    bd2c:	2004      	movs	r0, #4
    bd2e:	4770      	bx	lr
    bd30:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    bd32:	b10b      	cbz	r3, bd38 <process_recheck+0x2e>
		evt = EVT_RESET;
    bd34:	2005      	movs	r0, #5
}
    bd36:	4770      	bx	lr
	int evt = EVT_NOP;
    bd38:	2000      	movs	r0, #0
    bd3a:	4770      	bx	lr

0000bd3c <process_complete>:
{
    bd3c:	b538      	push	{r3, r4, r5, lr}
    bd3e:	4604      	mov	r4, r0
    bd40:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    bd42:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    bd44:	2a00      	cmp	r2, #0
    bd46:	db07      	blt.n	bd58 <process_complete+0x1c>
    bd48:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    bd4c:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    bd4e:	2a01      	cmp	r2, #1
    bd50:	d90e      	bls.n	bd70 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    bd52:	2b04      	cmp	r3, #4
    bd54:	d032      	beq.n	bdbc <process_complete+0x80>
}
    bd56:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
    bd58:	e9d0 0100 	ldrd	r0, r1, [r0]
    bd5c:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    bd60:	2300      	movs	r3, #0
    bd62:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    bd64:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    bd66:	2101      	movs	r1, #1
    bd68:	4620      	mov	r0, r4
    bd6a:	f7ff ffa7 	bl	bcbc <set_state>
    bd6e:	e7f2      	b.n	bd56 <process_complete+0x1a>
		*clients = mgr->clients;
    bd70:	e9d0 0100 	ldrd	r0, r1, [r0]
    bd74:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    bd78:	2200      	movs	r2, #0
    bd7a:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    bd7c:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    bd7e:	2b06      	cmp	r3, #6
    bd80:	d117      	bne.n	bdb2 <process_complete+0x76>
	return list->head;
    bd82:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    bd84:	b13b      	cbz	r3, bd96 <process_complete+0x5a>
				mgr->refs += 1U;
    bd86:	8b62      	ldrh	r2, [r4, #26]
    bd88:	3201      	adds	r2, #1
    bd8a:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
    bd8c:	2b00      	cmp	r3, #0
    bd8e:	d0f9      	beq.n	bd84 <process_complete+0x48>
	return node->next;
    bd90:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    bd92:	2b00      	cmp	r3, #0
    bd94:	d1f6      	bne.n	bd84 <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
    bd96:	2102      	movs	r1, #2
    bd98:	4620      	mov	r0, r4
    bd9a:	f7ff ff8f 	bl	bcbc <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    bd9e:	4620      	mov	r0, r4
    bda0:	f7ff ffb3 	bl	bd0a <process_recheck>
    bda4:	2800      	cmp	r0, #0
    bda6:	d0d6      	beq.n	bd56 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    bda8:	8b23      	ldrh	r3, [r4, #24]
    bdaa:	f043 0320 	orr.w	r3, r3, #32
    bdae:	8323      	strh	r3, [r4, #24]
    bdb0:	e7d1      	b.n	bd56 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    bdb2:	2100      	movs	r1, #0
    bdb4:	4620      	mov	r0, r4
    bdb6:	f7ff ff81 	bl	bcbc <set_state>
    bdba:	e7f0      	b.n	bd9e <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
    bdbc:	2100      	movs	r1, #0
    bdbe:	f7ff ff7d 	bl	bcbc <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    bdc2:	4620      	mov	r0, r4
    bdc4:	f7ff ffa1 	bl	bd0a <process_recheck>
    bdc8:	2800      	cmp	r0, #0
    bdca:	d0c4      	beq.n	bd56 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    bdcc:	8b23      	ldrh	r3, [r4, #24]
    bdce:	f043 0320 	orr.w	r3, r3, #32
    bdd2:	8323      	strh	r3, [r4, #24]
}
    bdd4:	e7bf      	b.n	bd56 <process_complete+0x1a>

0000bdd6 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    bdd6:	b158      	cbz	r0, bdf0 <validate_args+0x1a>
{
    bdd8:	b510      	push	{r4, lr}
    bdda:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    bddc:	b159      	cbz	r1, bdf6 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    bdde:	1d08      	adds	r0, r1, #4
    bde0:	f7ff ff12 	bl	bc08 <sys_notify_validate>
	if ((rv == 0)
    bde4:	b918      	cbnz	r0, bdee <validate_args+0x18>
	    && ((cli->notify.flags
    bde6:	68a3      	ldr	r3, [r4, #8]
    bde8:	f033 0303 	bics.w	r3, r3, #3
    bdec:	d106      	bne.n	bdfc <validate_args+0x26>
}
    bdee:	bd10      	pop	{r4, pc}
		return -EINVAL;
    bdf0:	f06f 0015 	mvn.w	r0, #21
}
    bdf4:	4770      	bx	lr
		return -EINVAL;
    bdf6:	f06f 0015 	mvn.w	r0, #21
    bdfa:	e7f8      	b.n	bdee <validate_args+0x18>
		rv = -EINVAL;
    bdfc:	f06f 0015 	mvn.w	r0, #21
    be00:	e7f5      	b.n	bdee <validate_args+0x18>

0000be02 <notify_one>:
{
    be02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be06:	4607      	mov	r7, r0
    be08:	460c      	mov	r4, r1
    be0a:	4616      	mov	r6, r2
    be0c:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    be0e:	4619      	mov	r1, r3
    be10:	1d20      	adds	r0, r4, #4
    be12:	f7ff ff10 	bl	bc36 <sys_notify_finalize>
	if (cb) {
    be16:	b128      	cbz	r0, be24 <notify_one+0x22>
    be18:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    be1a:	462b      	mov	r3, r5
    be1c:	4632      	mov	r2, r6
    be1e:	4621      	mov	r1, r4
    be20:	4638      	mov	r0, r7
    be22:	47c0      	blx	r8
}
    be24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000be28 <notify_all>:
{
    be28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    be2c:	4681      	mov	r9, r0
    be2e:	460c      	mov	r4, r1
    be30:	4690      	mov	r8, r2
    be32:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
    be34:	e005      	b.n	be42 <notify_all+0x1a>
	list->tail = node;
    be36:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
    be38:	463b      	mov	r3, r7
    be3a:	4642      	mov	r2, r8
    be3c:	4648      	mov	r0, r9
    be3e:	f7ff ffe0 	bl	be02 <notify_one>
	return list->head;
    be42:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    be44:	b129      	cbz	r1, be52 <notify_all+0x2a>
	return node->next;
    be46:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    be48:	6025      	str	r5, [r4, #0]
	return list->tail;
    be4a:	6866      	ldr	r6, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    be4c:	428e      	cmp	r6, r1
    be4e:	d1f3      	bne.n	be38 <notify_all+0x10>
    be50:	e7f1      	b.n	be36 <notify_all+0xe>
}
    be52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000be56 <transition_complete>:
{
    be56:	b510      	push	{r4, lr}
	__asm__ volatile(
    be58:	f04f 0420 	mov.w	r4, #32
    be5c:	f3ef 8211 	mrs	r2, BASEPRI
    be60:	f384 8812 	msr	BASEPRI_MAX, r4
    be64:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    be68:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    be6a:	2101      	movs	r1, #1
    be6c:	f7f4 fbac 	bl	5c8 <process_event>
}
    be70:	bd10      	pop	{r4, pc}

0000be72 <onoff_manager_init>:
	if ((mgr == NULL)
    be72:	4603      	mov	r3, r0
    be74:	b168      	cbz	r0, be92 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    be76:	b179      	cbz	r1, be98 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    be78:	680a      	ldr	r2, [r1, #0]
    be7a:	b182      	cbz	r2, be9e <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    be7c:	684a      	ldr	r2, [r1, #4]
    be7e:	b18a      	cbz	r2, bea4 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    be80:	2000      	movs	r0, #0
    be82:	6018      	str	r0, [r3, #0]
    be84:	6058      	str	r0, [r3, #4]
    be86:	6098      	str	r0, [r3, #8]
    be88:	60d8      	str	r0, [r3, #12]
    be8a:	6158      	str	r0, [r3, #20]
    be8c:	6198      	str	r0, [r3, #24]
    be8e:	6119      	str	r1, [r3, #16]
	return 0;
    be90:	4770      	bx	lr
		return -EINVAL;
    be92:	f06f 0015 	mvn.w	r0, #21
    be96:	4770      	bx	lr
    be98:	f06f 0015 	mvn.w	r0, #21
    be9c:	4770      	bx	lr
    be9e:	f06f 0015 	mvn.w	r0, #21
    bea2:	4770      	bx	lr
    bea4:	f06f 0015 	mvn.w	r0, #21
}
    bea8:	4770      	bx	lr

0000beaa <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    beaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    beac:	4604      	mov	r4, r0
    beae:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    beb0:	f7ff ff91 	bl	bdd6 <validate_args>

	if (rv < 0) {
    beb4:	1e06      	subs	r6, r0, #0
    beb6:	db37      	blt.n	bf28 <onoff_request+0x7e>
    beb8:	f04f 0320 	mov.w	r3, #32
    bebc:	f3ef 8211 	mrs	r2, BASEPRI
    bec0:	f383 8812 	msr	BASEPRI_MAX, r3
    bec4:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    bec8:	8b25      	ldrh	r5, [r4, #24]
    beca:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    bece:	8b63      	ldrh	r3, [r4, #26]
    bed0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    bed4:	428b      	cmp	r3, r1
    bed6:	d02f      	beq.n	bf38 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    bed8:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    beda:	2d02      	cmp	r5, #2
    bedc:	d00c      	beq.n	bef8 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    bede:	b18d      	cbz	r5, bf04 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
    bee0:	2d04      	cmp	r5, #4
    bee2:	d00f      	beq.n	bf04 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
    bee4:	2d06      	cmp	r5, #6
    bee6:	d00d      	beq.n	bf04 <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    bee8:	2d05      	cmp	r5, #5
    beea:	d01f      	beq.n	bf2c <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
    beec:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    bef0:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    bef2:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    bef4:	4608      	mov	r0, r1
    bef6:	e00a      	b.n	bf0e <onoff_request+0x64>
		mgr->refs += 1U;
    bef8:	3301      	adds	r3, #1
    befa:	8363      	strh	r3, [r4, #26]
		notify = true;
    befc:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
    befe:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    bf00:	4618      	mov	r0, r3
    bf02:	e004      	b.n	bf0e <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
    bf04:	fab5 f385 	clz	r3, r5
    bf08:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    bf0a:	2100      	movs	r1, #0
		add_client = true;
    bf0c:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
    bf0e:	b128      	cbz	r0, bf1c <onoff_request+0x72>
	parent->next = child;
    bf10:	2000      	movs	r0, #0
    bf12:	6038      	str	r0, [r7, #0]
	return list->tail;
    bf14:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    bf16:	b1a8      	cbz	r0, bf44 <onoff_request+0x9a>
	parent->next = child;
    bf18:	6007      	str	r7, [r0, #0]
	list->tail = node;
    bf1a:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    bf1c:	b9ab      	cbnz	r3, bf4a <onoff_request+0xa0>
	__asm__ volatile(
    bf1e:	f382 8811 	msr	BASEPRI, r2
    bf22:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    bf26:	b9a9      	cbnz	r1, bf54 <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    bf28:	4630      	mov	r0, r6
    bf2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
    bf2c:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    bf30:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    bf32:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    bf34:	4608      	mov	r0, r1
    bf36:	e7ea      	b.n	bf0e <onoff_request+0x64>
		rv = -EAGAIN;
    bf38:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    bf3c:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    bf3e:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    bf40:	4608      	mov	r0, r1
    bf42:	e7e4      	b.n	bf0e <onoff_request+0x64>
    bf44:	6067      	str	r7, [r4, #4]
	list->head = node;
    bf46:	6027      	str	r7, [r4, #0]
}
    bf48:	e7e8      	b.n	bf1c <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
    bf4a:	2102      	movs	r1, #2
    bf4c:	4620      	mov	r0, r4
    bf4e:	f7f4 fb3b 	bl	5c8 <process_event>
    bf52:	e7e9      	b.n	bf28 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
    bf54:	2300      	movs	r3, #0
    bf56:	462a      	mov	r2, r5
    bf58:	4639      	mov	r1, r7
    bf5a:	4620      	mov	r0, r4
    bf5c:	f7ff ff51 	bl	be02 <notify_one>
    bf60:	e7e2      	b.n	bf28 <onoff_request+0x7e>

0000bf62 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    bf62:	b510      	push	{r4, lr}
	__asm__ volatile(
    bf64:	f04f 0320 	mov.w	r3, #32
    bf68:	f3ef 8211 	mrs	r2, BASEPRI
    bf6c:	f383 8812 	msr	BASEPRI_MAX, r3
    bf70:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    bf74:	8b03      	ldrh	r3, [r0, #24]
    bf76:	f003 0307 	and.w	r3, r3, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    bf7a:	2b02      	cmp	r3, #2
    bf7c:	d007      	beq.n	bf8e <onoff_release+0x2c>
		if (state == ONOFF_STATE_ERROR) {
    bf7e:	2b01      	cmp	r3, #1
    bf80:	d002      	beq.n	bf88 <onoff_release+0x26>
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    bf82:	f06f 0485 	mvn.w	r4, #133	; 0x85
	__ASSERT_NO_MSG(mgr->refs > 0);
	mgr->refs -= 1U;
	stop = (mgr->refs == 0);

out:
	if (stop) {
    bf86:	e008      	b.n	bf9a <onoff_release+0x38>
			rv = -EIO;
    bf88:	f06f 0404 	mvn.w	r4, #4
    bf8c:	e005      	b.n	bf9a <onoff_release+0x38>
    bf8e:	461c      	mov	r4, r3
	mgr->refs -= 1U;
    bf90:	8b43      	ldrh	r3, [r0, #26]
    bf92:	3b01      	subs	r3, #1
    bf94:	b29b      	uxth	r3, r3
    bf96:	8343      	strh	r3, [r0, #26]
	if (stop) {
    bf98:	b12b      	cbz	r3, bfa6 <onoff_release+0x44>
	__asm__ volatile(
    bf9a:	f382 8811 	msr	BASEPRI, r2
    bf9e:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
}
    bfa2:	4620      	mov	r0, r4
    bfa4:	bd10      	pop	{r4, pc}
		process_event(mgr, EVT_RECHECK, key);
    bfa6:	2102      	movs	r1, #2
    bfa8:	f7f4 fb0e 	bl	5c8 <process_event>
    bfac:	e7f9      	b.n	bfa2 <onoff_release+0x40>

0000bfae <onoff_cancel>:
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
	if ((mgr == NULL) || (cli == NULL)) {
    bfae:	2800      	cmp	r0, #0
    bfb0:	d031      	beq.n	c016 <onoff_cancel+0x68>
{
    bfb2:	b470      	push	{r4, r5, r6}
    bfb4:	4605      	mov	r5, r0
	if ((mgr == NULL) || (cli == NULL)) {
    bfb6:	2900      	cmp	r1, #0
    bfb8:	d030      	beq.n	c01c <onoff_cancel+0x6e>
	__asm__ volatile(
    bfba:	f04f 0320 	mov.w	r3, #32
    bfbe:	f3ef 8611 	mrs	r6, BASEPRI
    bfc2:	f383 8812 	msr	BASEPRI_MAX, r3
    bfc6:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    bfca:	8b00      	ldrh	r0, [r0, #24]
    bfcc:	f000 0007 	and.w	r0, r0, #7

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
    bfd0:	460c      	mov	r4, r1
	return list->head;
    bfd2:	682b      	ldr	r3, [r5, #0]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    bfd4:	2200      	movs	r2, #0
    bfd6:	b1b3      	cbz	r3, c006 <onoff_cancel+0x58>
    bfd8:	429c      	cmp	r4, r3
    bfda:	d002      	beq.n	bfe2 <onoff_cancel+0x34>
    bfdc:	461a      	mov	r2, r3
    bfde:	681b      	ldr	r3, [r3, #0]
    bfe0:	e7f9      	b.n	bfd6 <onoff_cancel+0x28>
Z_GENLIST_REMOVE(slist, snode)
    bfe2:	b13a      	cbz	r2, bff4 <onoff_cancel+0x46>
	return node->next;
    bfe4:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
    bfe6:	6013      	str	r3, [r2, #0]
	return list->tail;
    bfe8:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    bfea:	4299      	cmp	r1, r3
    bfec:	d009      	beq.n	c002 <onoff_cancel+0x54>
	parent->next = child;
    bfee:	2300      	movs	r3, #0
    bff0:	600b      	str	r3, [r1, #0]
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
    bff2:	e00a      	b.n	c00a <onoff_cancel+0x5c>
	return node->next;
    bff4:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    bff6:	602b      	str	r3, [r5, #0]
	return list->tail;
    bff8:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    bffa:	4291      	cmp	r1, r2
    bffc:	d1f7      	bne.n	bfee <onoff_cancel+0x40>
	list->tail = node;
    bffe:	606b      	str	r3, [r5, #4]
}
    c000:	e7f5      	b.n	bfee <onoff_cancel+0x40>
	list->tail = node;
    c002:	606a      	str	r2, [r5, #4]
}
    c004:	e7f3      	b.n	bfee <onoff_cancel+0x40>
	int rv = -EALREADY;
    c006:	f06f 0077 	mvn.w	r0, #119	; 0x77
	__asm__ volatile(
    c00a:	f386 8811 	msr	BASEPRI, r6
    c00e:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
    c012:	bc70      	pop	{r4, r5, r6}
    c014:	4770      	bx	lr
		return -EINVAL;
    c016:	f06f 0015 	mvn.w	r0, #21
}
    c01a:	4770      	bx	lr
		return -EINVAL;
    c01c:	f06f 0015 	mvn.w	r0, #21
    c020:	e7f7      	b.n	c012 <onoff_cancel+0x64>

0000c022 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    c022:	b508      	push	{r3, lr}
    c024:	4604      	mov	r4, r0
    c026:	4608      	mov	r0, r1
    c028:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    c02a:	461a      	mov	r2, r3
    c02c:	47a0      	blx	r4
	return z_impl_z_current_get();
    c02e:	f7ff f921 	bl	b274 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    c032:	f7f8 fb8b 	bl	474c <z_impl_k_thread_abort>

0000c036 <chunk_mem>:
#include "heap.h"

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    c036:	00c9      	lsls	r1, r1, #3
    c038:	3104      	adds	r1, #4

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
    c03a:	4408      	add	r0, r1
    c03c:	4770      	bx	lr

0000c03e <free_list_remove_bidx>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    c03e:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
    c042:	88db      	ldrh	r3, [r3, #6]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & BIT(bidx));

	if (next_free_chunk(h, c) == c) {
    c044:	4299      	cmp	r1, r3
    c046:	d00e      	beq.n	c066 <free_list_remove_bidx+0x28>
{
    c048:	b410      	push	{r4}
    c04a:	00cc      	lsls	r4, r1, #3
    c04c:	4404      	add	r4, r0
    c04e:	88a1      	ldrh	r1, [r4, #4]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
    c050:	3204      	adds	r2, #4
    c052:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->end_chunk);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
    c056:	00ca      	lsls	r2, r1, #3
	if (big_heap(h)) {
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
    c058:	3206      	adds	r2, #6
    c05a:	5283      	strh	r3, [r0, r2]
	void *cmem = &buf[c];
    c05c:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
    c05e:	3304      	adds	r3, #4
    c060:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
    c062:	bc10      	pop	{r4}
    c064:	4770      	bx	lr
		h->avail_buckets &= ~BIT(bidx);
    c066:	2301      	movs	r3, #1
    c068:	fa03 f102 	lsl.w	r1, r3, r2
    c06c:	68c3      	ldr	r3, [r0, #12]
    c06e:	ea23 0301 	bic.w	r3, r3, r1
    c072:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    c074:	3204      	adds	r2, #4
    c076:	2300      	movs	r3, #0
    c078:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    c07c:	4770      	bx	lr

0000c07e <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
    c07e:	b470      	push	{r4, r5, r6}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
    c080:	1d13      	adds	r3, r2, #4
    c082:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    c086:	b984      	cbnz	r4, c0aa <free_list_add_bidx+0x2c>
		CHECK((h->avail_buckets & BIT(bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= BIT(bidx);
    c088:	2301      	movs	r3, #1
    c08a:	fa03 f402 	lsl.w	r4, r3, r2
    c08e:	68c3      	ldr	r3, [r0, #12]
    c090:	4323      	orrs	r3, r4
    c092:	60c3      	str	r3, [r0, #12]
		b->next = c;
    c094:	3204      	adds	r2, #4
    c096:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
    c09a:	00cb      	lsls	r3, r1, #3
		((uint16_t *)cmem)[f] = val;
    c09c:	1d1a      	adds	r2, r3, #4
    c09e:	b289      	uxth	r1, r1
    c0a0:	5281      	strh	r1, [r0, r2]
    c0a2:	3306      	adds	r3, #6
    c0a4:	52c1      	strh	r1, [r0, r3]
	}

#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}
    c0a6:	bc70      	pop	{r4, r5, r6}
    c0a8:	4770      	bx	lr
	void *cmem = &buf[c];
    c0aa:	00e2      	lsls	r2, r4, #3
		return ((uint16_t *)cmem)[f];
    c0ac:	3204      	adds	r2, #4
    c0ae:	5a83      	ldrh	r3, [r0, r2]
	void *cmem = &buf[c];
    c0b0:	00cd      	lsls	r5, r1, #3
		((uint16_t *)cmem)[f] = val;
    c0b2:	1d2e      	adds	r6, r5, #4
    c0b4:	5383      	strh	r3, [r0, r6]
    c0b6:	3506      	adds	r5, #6
    c0b8:	5344      	strh	r4, [r0, r5]
	void *cmem = &buf[c];
    c0ba:	00db      	lsls	r3, r3, #3
		((uint16_t *)cmem)[f] = val;
    c0bc:	3306      	adds	r3, #6
    c0be:	b289      	uxth	r1, r1
    c0c0:	52c1      	strh	r1, [r0, r3]
    c0c2:	5281      	strh	r1, [r0, r2]
    c0c4:	e7ef      	b.n	c0a6 <free_list_add_bidx+0x28>

0000c0c6 <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
    c0c6:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
    c0c8:	00cb      	lsls	r3, r1, #3
		return ((uint16_t *)cmem)[f];
    c0ca:	3302      	adds	r3, #2
    c0cc:	5ac4      	ldrh	r4, [r0, r3]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
    c0ce:	1a55      	subs	r5, r2, r1
	chunksz_t rsz = sz0 - lsz;
    c0d0:	1a89      	subs	r1, r1, r2
    c0d2:	eb01 0154 	add.w	r1, r1, r4, lsr #1
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, chunksz_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    c0d6:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
    c0d8:	52c4      	strh	r4, [r0, r3]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    c0da:	004b      	lsls	r3, r1, #1
	void *cmem = &buf[c];
    c0dc:	00d4      	lsls	r4, r2, #3
		((uint16_t *)cmem)[f] = val;
    c0de:	3402      	adds	r4, #2
    c0e0:	5303      	strh	r3, [r0, r4]
    c0e2:	f820 5032 	strh.w	r5, [r0, r2, lsl #3]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    c0e6:	f3c3 034e 	ubfx	r3, r3, #1, #15
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
    c0ea:	441a      	add	r2, r3
		((uint16_t *)cmem)[f] = val;
    c0ec:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
    c0f0:	bc30      	pop	{r4, r5}
    c0f2:	4770      	bx	lr

0000c0f4 <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
    c0f4:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
    c0f6:	00c9      	lsls	r1, r1, #3
		return ((uint16_t *)cmem)[f];
    c0f8:	3102      	adds	r1, #2
    c0fa:	5a45      	ldrh	r5, [r0, r1]
	void *cmem = &buf[c];
    c0fc:	00d4      	lsls	r4, r2, #3
		return ((uint16_t *)cmem)[f];
    c0fe:	3402      	adds	r4, #2
    c100:	5b03      	ldrh	r3, [r0, r4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    c102:	085b      	lsrs	r3, r3, #1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    c104:	eb03 0355 	add.w	r3, r3, r5, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    c108:	005d      	lsls	r5, r3, #1
		((uint16_t *)cmem)[f] = val;
    c10a:	5245      	strh	r5, [r0, r1]
		return ((uint16_t *)cmem)[f];
    c10c:	5b01      	ldrh	r1, [r0, r4]
	return c + chunk_size(h, c);
    c10e:	eb02 0251 	add.w	r2, r2, r1, lsr #1
		((uint16_t *)cmem)[f] = val;
    c112:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
    c116:	bc30      	pop	{r4, r5}
    c118:	4770      	bx	lr

0000c11a <mem_to_chunkid>:
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    c11a:	3904      	subs	r1, #4
    c11c:	1a08      	subs	r0, r1, r0
}
    c11e:	08c0      	lsrs	r0, r0, #3
    c120:	4770      	bx	lr

0000c122 <free_list_remove>:
{
    c122:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
    c124:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
    c128:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    c12a:	0852      	lsrs	r2, r2, #1
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    c12c:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
    c130:	f1c2 021f 	rsb	r2, r2, #31
    c134:	f7ff ff83 	bl	c03e <free_list_remove_bidx>
}
    c138:	bd08      	pop	{r3, pc}

0000c13a <free_list_add>:
{
    c13a:	b508      	push	{r3, lr}
		return ((uint16_t *)cmem)[f];
    c13c:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
    c140:	885a      	ldrh	r2, [r3, #2]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    c142:	0852      	lsrs	r2, r2, #1
	return 31 - __builtin_clz(usable_sz);
    c144:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
    c148:	f1c2 021f 	rsb	r2, r2, #31
    c14c:	f7ff ff97 	bl	c07e <free_list_add_bidx>
}
    c150:	bd08      	pop	{r3, pc}

0000c152 <free_chunk>:
{
    c152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c154:	4604      	mov	r4, r0
    c156:	460d      	mov	r5, r1
	void *cmem = &buf[c];
    c158:	00ce      	lsls	r6, r1, #3
		return ((uint16_t *)cmem)[f];
    c15a:	1cb7      	adds	r7, r6, #2
    c15c:	5bc1      	ldrh	r1, [r0, r7]
	return c + chunk_size(h, c);
    c15e:	eb05 0151 	add.w	r1, r5, r1, lsr #1
		return ((uint16_t *)cmem)[f];
    c162:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
    c166:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
    c168:	f013 0f01 	tst.w	r3, #1
    c16c:	d00c      	beq.n	c188 <free_chunk+0x36>
    c16e:	5ba1      	ldrh	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
    c170:	1a69      	subs	r1, r5, r1
		return ((uint16_t *)cmem)[f];
    c172:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
    c176:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
    c178:	f013 0f01 	tst.w	r3, #1
    c17c:	d00e      	beq.n	c19c <free_chunk+0x4a>
	free_list_add(h, c);
    c17e:	4629      	mov	r1, r5
    c180:	4620      	mov	r0, r4
    c182:	f7ff ffda 	bl	c13a <free_list_add>
}
    c186:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		free_list_remove(h, right_chunk(h, c));
    c188:	f7ff ffcb 	bl	c122 <free_list_remove>
    c18c:	5be2      	ldrh	r2, [r4, r7]
		merge_chunks(h, c, right_chunk(h, c));
    c18e:	eb05 0252 	add.w	r2, r5, r2, lsr #1
    c192:	4629      	mov	r1, r5
    c194:	4620      	mov	r0, r4
    c196:	f7ff ffad 	bl	c0f4 <merge_chunks>
    c19a:	e7e8      	b.n	c16e <free_chunk+0x1c>
		free_list_remove(h, left_chunk(h, c));
    c19c:	4620      	mov	r0, r4
    c19e:	f7ff ffc0 	bl	c122 <free_list_remove>
    c1a2:	5ba1      	ldrh	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
    c1a4:	462a      	mov	r2, r5
    c1a6:	1a69      	subs	r1, r5, r1
    c1a8:	4620      	mov	r0, r4
    c1aa:	f7ff ffa3 	bl	c0f4 <merge_chunks>
    c1ae:	5ba3      	ldrh	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
    c1b0:	1aed      	subs	r5, r5, r3
    c1b2:	e7e4      	b.n	c17e <free_chunk+0x2c>

0000c1b4 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    c1b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return 31 - __builtin_clz(usable_sz);
    c1b6:	fab1 f381 	clz	r3, r1
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    c1ba:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
    c1be:	f850 7024 	ldr.w	r7, [r0, r4, lsl #2]
    c1c2:	b1b7      	cbz	r7, c1f2 <alloc_chunk+0x3e>
    c1c4:	f1c3 021f 	rsb	r2, r3, #31
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
    c1c8:	2603      	movs	r6, #3
		do {
			chunkid_t c = b->next;
    c1ca:	1d14      	adds	r4, r2, #4
    c1cc:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
    c1d0:	00e5      	lsls	r5, r4, #3
		return ((uint16_t *)cmem)[f];
    c1d2:	eb00 0cc4 	add.w	ip, r0, r4, lsl #3
    c1d6:	f8bc c002 	ldrh.w	ip, [ip, #2]
			if (chunk_size(h, c) >= sz) {
    c1da:	ebb1 0f5c 	cmp.w	r1, ip, lsr #1
    c1de:	d912      	bls.n	c206 <alloc_chunk+0x52>
    c1e0:	4405      	add	r5, r0
    c1e2:	88ec      	ldrh	r4, [r5, #6]
				free_list_remove_bidx(h, c, bi);
				return c;
			}
			b->next = next_free_chunk(h, c);
    c1e4:	1d15      	adds	r5, r2, #4
    c1e6:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
    c1ea:	3e01      	subs	r6, #1
    c1ec:	d001      	beq.n	c1f2 <alloc_chunk+0x3e>
    c1ee:	42a7      	cmp	r7, r4
    c1f0:	d1eb      	bne.n	c1ca <alloc_chunk+0x16>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    c1f2:	68c4      	ldr	r4, [r0, #12]
    c1f4:	f1c3 0220 	rsb	r2, r3, #32
    c1f8:	2301      	movs	r3, #1
    c1fa:	4093      	lsls	r3, r2
    c1fc:	425b      	negs	r3, r3

	if (bmask != 0U) {
    c1fe:	401c      	ands	r4, r3
    c200:	d105      	bne.n	c20e <alloc_chunk+0x5a>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    c202:	4620      	mov	r0, r4
    c204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				free_list_remove_bidx(h, c, bi);
    c206:	4621      	mov	r1, r4
    c208:	f7ff ff19 	bl	c03e <free_list_remove_bidx>
				return c;
    c20c:	e7f9      	b.n	c202 <alloc_chunk+0x4e>
		int minbucket = __builtin_ctz(bmask);
    c20e:	fa94 f2a4 	rbit	r2, r4
    c212:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    c216:	1d13      	adds	r3, r2, #4
    c218:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    c21c:	4621      	mov	r1, r4
    c21e:	f7ff ff0e 	bl	c03e <free_list_remove_bidx>
		return c;
    c222:	e7ee      	b.n	c202 <alloc_chunk+0x4e>

0000c224 <sys_heap_free>:
	if (mem == NULL) {
    c224:	b179      	cbz	r1, c246 <sys_heap_free+0x22>
{
    c226:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
    c228:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
    c22a:	4620      	mov	r0, r4
    c22c:	f7ff ff75 	bl	c11a <mem_to_chunkid>
    c230:	4601      	mov	r1, r0
	void *cmem = &buf[c];
    c232:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    c236:	8853      	ldrh	r3, [r2, #2]
    c238:	f023 0301 	bic.w	r3, r3, #1
    c23c:	8053      	strh	r3, [r2, #2]
	free_chunk(h, c);
    c23e:	4620      	mov	r0, r4
    c240:	f7ff ff87 	bl	c152 <free_chunk>
}
    c244:	bd10      	pop	{r4, pc}
    c246:	4770      	bx	lr

0000c248 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    c248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
    c24a:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
    c24c:	b341      	cbz	r1, c2a0 <sys_heap_alloc+0x58>
    c24e:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
    c250:	68aa      	ldr	r2, [r5, #8]
    c252:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
    c256:	d925      	bls.n	c2a4 <sys_heap_alloc+0x5c>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    c258:	330b      	adds	r3, #11
    c25a:	08dc      	lsrs	r4, r3, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
    c25c:	4621      	mov	r1, r4
    c25e:	4628      	mov	r0, r5
    c260:	f7ff ffa8 	bl	c1b4 <alloc_chunk>
	if (c == 0U) {
    c264:	4607      	mov	r7, r0
    c266:	b1f8      	cbz	r0, c2a8 <sys_heap_alloc+0x60>
	void *cmem = &buf[c];
    c268:	00c6      	lsls	r6, r0, #3
		return ((uint16_t *)cmem)[f];
    c26a:	eb05 03c0 	add.w	r3, r5, r0, lsl #3
    c26e:	885b      	ldrh	r3, [r3, #2]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
    c270:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
    c274:	d309      	bcc.n	c28a <sys_heap_alloc+0x42>
	void *cmem = &buf[c];
    c276:	19ab      	adds	r3, r5, r6
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    c278:	885a      	ldrh	r2, [r3, #2]
    c27a:	f042 0201 	orr.w	r2, r2, #1
    c27e:	805a      	strh	r2, [r3, #2]

	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return chunk_mem(h, c);
    c280:	4639      	mov	r1, r7
    c282:	4628      	mov	r0, r5
    c284:	f7ff fed7 	bl	c036 <chunk_mem>
}
    c288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		split_chunks(h, c, c + chunk_sz);
    c28a:	4404      	add	r4, r0
    c28c:	4622      	mov	r2, r4
    c28e:	4601      	mov	r1, r0
    c290:	4628      	mov	r0, r5
    c292:	f7ff ff18 	bl	c0c6 <split_chunks>
		free_list_add(h, c + chunk_sz);
    c296:	4621      	mov	r1, r4
    c298:	4628      	mov	r0, r5
    c29a:	f7ff ff4e 	bl	c13a <free_list_add>
    c29e:	e7ea      	b.n	c276 <sys_heap_alloc+0x2e>
		return NULL;
    c2a0:	2000      	movs	r0, #0
    c2a2:	e7f1      	b.n	c288 <sys_heap_alloc+0x40>
    c2a4:	2000      	movs	r0, #0
    c2a6:	e7ef      	b.n	c288 <sys_heap_alloc+0x40>
		return NULL;
    c2a8:	2000      	movs	r0, #0
    c2aa:	e7ed      	b.n	c288 <sys_heap_alloc+0x40>

0000c2ac <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    c2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c2b0:	460d      	mov	r5, r1
    c2b2:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    c2b4:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
    c2b6:	424b      	negs	r3, r1
    c2b8:	ea03 0801 	and.w	r8, r3, r1
	if (align != rew) {
    c2bc:	ea31 0303 	bics.w	r3, r1, r3
    c2c0:	d03e      	beq.n	c340 <sys_heap_aligned_alloc+0x94>
		align -= rew;
    c2c2:	eba1 0508 	sub.w	r5, r1, r8
		gap = MIN(rew, chunk_header_bytes(h));
    c2c6:	f1b8 0f03 	cmp.w	r8, #3
    c2ca:	d844      	bhi.n	c356 <sys_heap_aligned_alloc+0xaa>
    c2cc:	4642      	mov	r2, r8
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    c2ce:	2c00      	cmp	r4, #0
    c2d0:	d057      	beq.n	c382 <sys_heap_aligned_alloc+0xd6>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
    c2d2:	68b3      	ldr	r3, [r6, #8]
    c2d4:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    c2d8:	d955      	bls.n	c386 <sys_heap_aligned_alloc+0xda>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
    c2da:	1929      	adds	r1, r5, r4
    c2dc:	1a89      	subs	r1, r1, r2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    c2de:	310b      	adds	r1, #11
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    c2e0:	08c9      	lsrs	r1, r1, #3
    c2e2:	4630      	mov	r0, r6
    c2e4:	f7ff ff66 	bl	c1b4 <alloc_chunk>

	if (c0 == 0) {
    c2e8:	4607      	mov	r7, r0
    c2ea:	2800      	cmp	r0, #0
    c2ec:	d04d      	beq.n	c38a <sys_heap_aligned_alloc+0xde>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
    c2ee:	4601      	mov	r1, r0
    c2f0:	4630      	mov	r0, r6
    c2f2:	f7ff fea0 	bl	c036 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    c2f6:	4440      	add	r0, r8
    c2f8:	4428      	add	r0, r5
    c2fa:	3801      	subs	r0, #1
    c2fc:	426d      	negs	r5, r5
    c2fe:	4005      	ands	r5, r0
    c300:	eba5 0508 	sub.w	r5, r5, r8
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    c304:	442c      	add	r4, r5
    c306:	3407      	adds	r4, #7
    c308:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
    c30c:	4629      	mov	r1, r5
    c30e:	4630      	mov	r0, r6
    c310:	f7ff ff03 	bl	c11a <mem_to_chunkid>
    c314:	4680      	mov	r8, r0
	chunkid_t c_end = end - chunk_buf(h);
    c316:	1ba4      	subs	r4, r4, r6
    c318:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
    c31a:	4287      	cmp	r7, r0
    c31c:	d31d      	bcc.n	c35a <sys_heap_aligned_alloc+0xae>
	void *cmem = &buf[c];
    c31e:	ea4f 07c8 	mov.w	r7, r8, lsl #3
		return ((uint16_t *)cmem)[f];
    c322:	eb06 03c8 	add.w	r3, r6, r8, lsl #3
    c326:	885b      	ldrh	r3, [r3, #2]
	return c + chunk_size(h, c);
    c328:	eb08 0353 	add.w	r3, r8, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
    c32c:	429c      	cmp	r4, r3
    c32e:	d31e      	bcc.n	c36e <sys_heap_aligned_alloc+0xc2>
	void *cmem = &buf[c];
    c330:	443e      	add	r6, r7
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    c332:	8873      	ldrh	r3, [r6, #2]
    c334:	f043 0301 	orr.w	r3, r3, #1
    c338:	8073      	strh	r3, [r6, #2]
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return mem;
}
    c33a:	4628      	mov	r0, r5
    c33c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (align <= chunk_header_bytes(h)) {
    c340:	2904      	cmp	r1, #4
    c342:	d903      	bls.n	c34c <sys_heap_aligned_alloc+0xa0>
		rew = 0;
    c344:	f04f 0800 	mov.w	r8, #0
		gap = chunk_header_bytes(h);
    c348:	2204      	movs	r2, #4
    c34a:	e7c0      	b.n	c2ce <sys_heap_aligned_alloc+0x22>
			return sys_heap_alloc(heap, bytes);
    c34c:	4611      	mov	r1, r2
    c34e:	f7ff ff7b 	bl	c248 <sys_heap_alloc>
    c352:	4605      	mov	r5, r0
    c354:	e7f1      	b.n	c33a <sys_heap_aligned_alloc+0x8e>
		gap = MIN(rew, chunk_header_bytes(h));
    c356:	2204      	movs	r2, #4
    c358:	e7b9      	b.n	c2ce <sys_heap_aligned_alloc+0x22>
		split_chunks(h, c0, c);
    c35a:	4602      	mov	r2, r0
    c35c:	4639      	mov	r1, r7
    c35e:	4630      	mov	r0, r6
    c360:	f7ff feb1 	bl	c0c6 <split_chunks>
		free_list_add(h, c0);
    c364:	4639      	mov	r1, r7
    c366:	4630      	mov	r0, r6
    c368:	f7ff fee7 	bl	c13a <free_list_add>
    c36c:	e7d7      	b.n	c31e <sys_heap_aligned_alloc+0x72>
		split_chunks(h, c, c_end);
    c36e:	4622      	mov	r2, r4
    c370:	4641      	mov	r1, r8
    c372:	4630      	mov	r0, r6
    c374:	f7ff fea7 	bl	c0c6 <split_chunks>
		free_list_add(h, c_end);
    c378:	4621      	mov	r1, r4
    c37a:	4630      	mov	r0, r6
    c37c:	f7ff fedd 	bl	c13a <free_list_add>
    c380:	e7d6      	b.n	c330 <sys_heap_aligned_alloc+0x84>
		return NULL;
    c382:	2500      	movs	r5, #0
    c384:	e7d9      	b.n	c33a <sys_heap_aligned_alloc+0x8e>
    c386:	2500      	movs	r5, #0
    c388:	e7d7      	b.n	c33a <sys_heap_aligned_alloc+0x8e>
		return NULL;
    c38a:	2500      	movs	r5, #0
    c38c:	e7d5      	b.n	c33a <sys_heap_aligned_alloc+0x8e>

0000c38e <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    c38e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c390:	4603      	mov	r3, r0
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    c392:	1f15      	subs	r5, r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    c394:	1dc8      	adds	r0, r1, #7
    c396:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    c39a:	440d      	add	r5, r1
    c39c:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    c3a0:	1a2d      	subs	r5, r5, r0
    c3a2:	ea4f 0ed5 	mov.w	lr, r5, lsr #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
    c3a6:	4607      	mov	r7, r0
	heap->heap = h;
    c3a8:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
    c3aa:	f8c0 e008 	str.w	lr, [r0, #8]
	h->avail_buckets = 0;
    c3ae:	2300      	movs	r3, #0
    c3b0:	60c3      	str	r3, [r0, #12]
	return 31 - __builtin_clz(usable_sz);
    c3b2:	fabe f28e 	clz	r2, lr
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    c3b6:	f1c2 0620 	rsb	r6, r2, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    c3ba:	f1c2 0224 	rsb	r2, r2, #36	; 0x24
    c3be:	0092      	lsls	r2, r2, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    c3c0:	f102 0c07 	add.w	ip, r2, #7
    c3c4:	ea4f 01dc 	mov.w	r1, ip, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    c3c8:	42b3      	cmp	r3, r6
    c3ca:	da05      	bge.n	c3d8 <sys_heap_init+0x4a>
		h->buckets[i].next = 0;
    c3cc:	1d1a      	adds	r2, r3, #4
    c3ce:	2400      	movs	r4, #0
    c3d0:	f847 4022 	str.w	r4, [r7, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
    c3d4:	3301      	adds	r3, #1
    c3d6:	e7f7      	b.n	c3c8 <sys_heap_init+0x3a>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    c3d8:	004b      	lsls	r3, r1, #1
		((uint16_t *)cmem)[f] = val;
    c3da:	b29b      	uxth	r3, r3
    c3dc:	2200      	movs	r2, #0
    c3de:	8002      	strh	r2, [r0, #0]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    c3e0:	f043 0301 	orr.w	r3, r3, #1
    c3e4:	8043      	strh	r3, [r0, #2]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    c3e6:	ebae 0301 	sub.w	r3, lr, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    c3ea:	005e      	lsls	r6, r3, #1
	void *cmem = &buf[c];
    c3ec:	f02c 0207 	bic.w	r2, ip, #7
		((uint16_t *)cmem)[f] = val;
    c3f0:	1c94      	adds	r4, r2, #2
    c3f2:	5306      	strh	r6, [r0, r4]
    c3f4:	5281      	strh	r1, [r0, r2]
	void *cmem = &buf[c];
    c3f6:	f025 0207 	bic.w	r2, r5, #7
		((uint16_t *)cmem)[f] = val;
    c3fa:	4405      	add	r5, r0
    c3fc:	5283      	strh	r3, [r0, r2]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    c3fe:	2301      	movs	r3, #1
    c400:	806b      	strh	r3, [r5, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    c402:	f7ff fe9a 	bl	c13a <free_list_add>
}
    c406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000c408 <extract_decimal>:
{
    c408:	b410      	push	{r4}
    c40a:	4604      	mov	r4, r0
	const char *sp = *str;
    c40c:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    c40e:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    c410:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    c412:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    c416:	2909      	cmp	r1, #9
    c418:	d806      	bhi.n	c428 <extract_decimal+0x20>
		val = 10U * val + *sp++ - '0';
    c41a:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    c41e:	3201      	adds	r2, #1
    c420:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    c424:	3830      	subs	r0, #48	; 0x30
    c426:	e7f3      	b.n	c410 <extract_decimal+0x8>
	*str = sp;
    c428:	6022      	str	r2, [r4, #0]
}
    c42a:	bc10      	pop	{r4}
    c42c:	4770      	bx	lr

0000c42e <encode_uint>:
{
    c42e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c432:	b083      	sub	sp, #12
    c434:	4604      	mov	r4, r0
    c436:	460d      	mov	r5, r1
    c438:	9201      	str	r2, [sp, #4]
    c43a:	469a      	mov	sl, r3
    c43c:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    c440:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    c442:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    c446:	2b6f      	cmp	r3, #111	; 0x6f
    c448:	d00f      	beq.n	c46a <encode_uint+0x3c>
    c44a:	d906      	bls.n	c45a <encode_uint+0x2c>
    c44c:	2b70      	cmp	r3, #112	; 0x70
    c44e:	d00f      	beq.n	c470 <encode_uint+0x42>
    c450:	2b78      	cmp	r3, #120	; 0x78
    c452:	d110      	bne.n	c476 <encode_uint+0x48>
		return 16;
    c454:	f04f 0910 	mov.w	r9, #16
    c458:	e026      	b.n	c4a8 <encode_uint+0x7a>
	switch (specifier) {
    c45a:	2b58      	cmp	r3, #88	; 0x58
    c45c:	d002      	beq.n	c464 <encode_uint+0x36>
    c45e:	f04f 090a 	mov.w	r9, #10
    c462:	e021      	b.n	c4a8 <encode_uint+0x7a>
		return 16;
    c464:	f04f 0910 	mov.w	r9, #16
    c468:	e01e      	b.n	c4a8 <encode_uint+0x7a>
		return 8;
    c46a:	f04f 0908 	mov.w	r9, #8
    c46e:	e01b      	b.n	c4a8 <encode_uint+0x7a>
		return 16;
    c470:	f04f 0910 	mov.w	r9, #16
    c474:	e018      	b.n	c4a8 <encode_uint+0x7a>
	switch (specifier) {
    c476:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
    c47a:	e015      	b.n	c4a8 <encode_uint+0x7a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c47c:	f1bb 0f19 	cmp.w	fp, #25
    c480:	d820      	bhi.n	c4c4 <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    c482:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c484:	3237      	adds	r2, #55	; 0x37
    c486:	b2d2      	uxtb	r2, r2
    c488:	f808 2d01 	strb.w	r2, [r8, #-1]!
		value /= radix;
    c48c:	4632      	mov	r2, r6
    c48e:	463b      	mov	r3, r7
    c490:	4620      	mov	r0, r4
    c492:	4629      	mov	r1, r5
    c494:	f7f3 fe34 	bl	100 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    c498:	42bd      	cmp	r5, r7
    c49a:	bf08      	it	eq
    c49c:	42b4      	cmpeq	r4, r6
    c49e:	d315      	bcc.n	c4cc <encode_uint+0x9e>
    c4a0:	45d0      	cmp	r8, sl
    c4a2:	d913      	bls.n	c4cc <encode_uint+0x9e>
		value /= radix;
    c4a4:	4604      	mov	r4, r0
    c4a6:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    c4a8:	464e      	mov	r6, r9
    c4aa:	2700      	movs	r7, #0
    c4ac:	464a      	mov	r2, r9
    c4ae:	463b      	mov	r3, r7
    c4b0:	4620      	mov	r0, r4
    c4b2:	4629      	mov	r1, r5
    c4b4:	f7f3 fe24 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c4b8:	2a09      	cmp	r2, #9
    c4ba:	d8df      	bhi.n	c47c <encode_uint+0x4e>
    c4bc:	b2d2      	uxtb	r2, r2
    c4be:	3230      	adds	r2, #48	; 0x30
    c4c0:	b2d2      	uxtb	r2, r2
    c4c2:	e7e1      	b.n	c488 <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    c4c4:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c4c6:	3257      	adds	r2, #87	; 0x57
    c4c8:	b2d2      	uxtb	r2, r2
    c4ca:	e7dd      	b.n	c488 <encode_uint+0x5a>
	if (conv->flag_hash) {
    c4cc:	9b01      	ldr	r3, [sp, #4]
    c4ce:	781b      	ldrb	r3, [r3, #0]
    c4d0:	f013 0f20 	tst.w	r3, #32
    c4d4:	d005      	beq.n	c4e2 <encode_uint+0xb4>
		if (radix == 8) {
    c4d6:	f1b9 0f08 	cmp.w	r9, #8
    c4da:	d006      	beq.n	c4ea <encode_uint+0xbc>
		} else if (radix == 16) {
    c4dc:	f1b9 0f10 	cmp.w	r9, #16
    c4e0:	d009      	beq.n	c4f6 <encode_uint+0xc8>
}
    c4e2:	4640      	mov	r0, r8
    c4e4:	b003      	add	sp, #12
    c4e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    c4ea:	9a01      	ldr	r2, [sp, #4]
    c4ec:	7893      	ldrb	r3, [r2, #2]
    c4ee:	f043 0308 	orr.w	r3, r3, #8
    c4f2:	7093      	strb	r3, [r2, #2]
    c4f4:	e7f5      	b.n	c4e2 <encode_uint+0xb4>
			conv->altform_0c = true;
    c4f6:	9a01      	ldr	r2, [sp, #4]
    c4f8:	7893      	ldrb	r3, [r2, #2]
    c4fa:	f043 0310 	orr.w	r3, r3, #16
    c4fe:	7093      	strb	r3, [r2, #2]
    c500:	e7ef      	b.n	c4e2 <encode_uint+0xb4>

0000c502 <outs>:
{
    c502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c506:	4607      	mov	r7, r0
    c508:	460e      	mov	r6, r1
    c50a:	4614      	mov	r4, r2
    c50c:	4698      	mov	r8, r3
	size_t count = 0;
    c50e:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    c510:	e006      	b.n	c520 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    c512:	4631      	mov	r1, r6
    c514:	f814 0b01 	ldrb.w	r0, [r4], #1
    c518:	47b8      	blx	r7
		if (rc < 0) {
    c51a:	2800      	cmp	r0, #0
    c51c:	db09      	blt.n	c532 <outs+0x30>
		++count;
    c51e:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    c520:	4544      	cmp	r4, r8
    c522:	d3f6      	bcc.n	c512 <outs+0x10>
    c524:	f1b8 0f00 	cmp.w	r8, #0
    c528:	d102      	bne.n	c530 <outs+0x2e>
    c52a:	7823      	ldrb	r3, [r4, #0]
    c52c:	2b00      	cmp	r3, #0
    c52e:	d1f0      	bne.n	c512 <outs+0x10>
	return (int)count;
    c530:	4628      	mov	r0, r5
}
    c532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c536 <get_rewind_value>:
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
}

static uint32_t get_rewind_value(uint32_t buf_size, uint32_t threshold)
{
	return buf_size * (threshold / buf_size);
    c536:	fbb1 f1f0 	udiv	r1, r1, r0
}
    c53a:	fb00 f001 	mul.w	r0, r0, r1
    c53e:	4770      	bx	lr

0000c540 <mod>:
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    c540:	6983      	ldr	r3, [r0, #24]
    c542:	b113      	cbz	r3, c54a <mod+0xa>
    c544:	ea03 0001 	and.w	r0, r3, r1
    c548:	4770      	bx	lr
    c54a:	6900      	ldr	r0, [r0, #16]
    c54c:	fbb1 f3f0 	udiv	r3, r1, r0
    c550:	fb00 1013 	mls	r0, r0, r3, r1
}
    c554:	4770      	bx	lr

0000c556 <ring_buf_get_rewind_threshold>:
}
    c556:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    c55a:	4770      	bx	lr

0000c55c <ring_buf_is_empty>:

int ring_buf_is_empty(struct ring_buf *buf)
{
    c55c:	b570      	push	{r4, r5, r6, lr}
	uint32_t tail = buf->tail;
    c55e:	6844      	ldr	r4, [r0, #4]
	uint32_t head = buf->head;
    c560:	6805      	ldr	r5, [r0, #0]

	if (tail < head) {
    c562:	42ac      	cmp	r4, r5
    c564:	d304      	bcc.n	c570 <ring_buf_is_empty+0x14>
		tail += get_rewind_value(buf->size,
					 ring_buf_get_rewind_threshold());
	}

	return (head == tail);
}
    c566:	42ac      	cmp	r4, r5
    c568:	bf14      	ite	ne
    c56a:	2000      	movne	r0, #0
    c56c:	2001      	moveq	r0, #1
    c56e:	bd70      	pop	{r4, r5, r6, pc}
		tail += get_rewind_value(buf->size,
    c570:	6906      	ldr	r6, [r0, #16]
    c572:	f7ff fff0 	bl	c556 <ring_buf_get_rewind_threshold>
    c576:	4601      	mov	r1, r0
    c578:	4630      	mov	r0, r6
    c57a:	f7ff ffdc 	bl	c536 <get_rewind_value>
    c57e:	4404      	add	r4, r0
    c580:	e7f1      	b.n	c566 <ring_buf_is_empty+0xa>

0000c582 <ring_buf_size_get>:

uint32_t ring_buf_size_get(struct ring_buf *buf)
{
    c582:	b570      	push	{r4, r5, r6, lr}
	uint32_t tail = buf->tail;
    c584:	6844      	ldr	r4, [r0, #4]
	uint32_t head = buf->head;
    c586:	6805      	ldr	r5, [r0, #0]

	if (tail < head) {
    c588:	42ac      	cmp	r4, r5
    c58a:	d301      	bcc.n	c590 <ring_buf_size_get+0xe>
		tail += get_rewind_value(buf->size,
					 ring_buf_get_rewind_threshold());
	}

	return tail - head;
}
    c58c:	1b60      	subs	r0, r4, r5
    c58e:	bd70      	pop	{r4, r5, r6, pc}
		tail += get_rewind_value(buf->size,
    c590:	6906      	ldr	r6, [r0, #16]
    c592:	f7ff ffe0 	bl	c556 <ring_buf_get_rewind_threshold>
    c596:	4601      	mov	r1, r0
    c598:	4630      	mov	r0, r6
    c59a:	f7ff ffcc 	bl	c536 <get_rewind_value>
    c59e:	4404      	add	r4, r0
    c5a0:	e7f4      	b.n	c58c <ring_buf_size_get+0xa>

0000c5a2 <ring_buf_space_get>:

uint32_t ring_buf_space_get(struct ring_buf *buf)
{
    c5a2:	b510      	push	{r4, lr}
	return buf->size - ring_buf_size_get(buf);
    c5a4:	6904      	ldr	r4, [r0, #16]
    c5a6:	f7ff ffec 	bl	c582 <ring_buf_size_get>
}
    c5aa:	1a20      	subs	r0, r4, r0
    c5ac:	bd10      	pop	{r4, pc}

0000c5ae <ring_buf_put_claim>:

	return 0;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    c5ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c5b2:	4604      	mov	r4, r0
    c5b4:	460e      	mov	r6, r1
    c5b6:	4617      	mov	r7, r2
	uint32_t space, trail_size, allocated, tmp_trail_mod;

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
    c5b8:	f8d0 8008 	ldr.w	r8, [r0, #8]
    c5bc:	4641      	mov	r1, r8
    c5be:	f7ff ffbf 	bl	c540 <mod>
    c5c2:	4601      	mov	r1, r0
	space = (buf->head + buf->size) - buf->misc.byte_mode.tmp_tail;
    c5c4:	6825      	ldr	r5, [r4, #0]
    c5c6:	6920      	ldr	r0, [r4, #16]
    c5c8:	4405      	add	r5, r0
    c5ca:	eba5 0208 	sub.w	r2, r5, r8
	trail_size = buf->size - tmp_trail_mod;
    c5ce:	1a40      	subs	r0, r0, r1

	/* Limit requested size to available size. */
	size = MIN(size, space);
    c5d0:	42ba      	cmp	r2, r7
    c5d2:	bf28      	it	cs
    c5d4:	463a      	movcs	r2, r7

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
    c5d6:	4290      	cmp	r0, r2
    c5d8:	bf28      	it	cs
    c5da:	4610      	movcs	r0, r2
	*data = &buf->buf.buf8[tmp_trail_mod];
    c5dc:	6963      	ldr	r3, [r4, #20]
    c5de:	4419      	add	r1, r3
    c5e0:	6031      	str	r1, [r6, #0]

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
    c5e2:	68a3      	ldr	r3, [r4, #8]
    c5e4:	4403      	add	r3, r0
	buf->misc.byte_mode.tmp_tail =
    c5e6:	60a3      	str	r3, [r4, #8]

	return allocated;
}
    c5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c5ec <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
    c5ec:	b570      	push	{r4, r5, r6, lr}
    c5ee:	4604      	mov	r4, r0
    c5f0:	460d      	mov	r5, r1
	uint32_t rew;
	uint32_t threshold = ring_buf_get_rewind_threshold();
    c5f2:	f7ff ffb0 	bl	c556 <ring_buf_get_rewind_threshold>
    c5f6:	4601      	mov	r1, r0

	if ((buf->tail + size) > (buf->head + buf->size)) {
    c5f8:	6866      	ldr	r6, [r4, #4]
    c5fa:	1972      	adds	r2, r6, r5
    c5fc:	6823      	ldr	r3, [r4, #0]
    c5fe:	6920      	ldr	r0, [r4, #16]
    c600:	4403      	add	r3, r0
    c602:	429a      	cmp	r2, r3
    c604:	d80b      	bhi.n	c61e <ring_buf_put_finish+0x32>
		return -EINVAL;
	}

	/* Check if indexes shall be rewind. */
	if (buf->tail > threshold) {
    c606:	428e      	cmp	r6, r1
    c608:	d907      	bls.n	c61a <ring_buf_put_finish+0x2e>
		rew = get_rewind_value(buf->size, threshold);
    c60a:	f7ff ff94 	bl	c536 <get_rewind_value>
	} else {
		rew = 0;
	}

	buf->tail += (size - rew);
    c60e:	1a2d      	subs	r5, r5, r0
    c610:	442e      	add	r6, r5
    c612:	6066      	str	r6, [r4, #4]
	buf->misc.byte_mode.tmp_tail = buf->tail;
    c614:	60a6      	str	r6, [r4, #8]

	return 0;
    c616:	2000      	movs	r0, #0
}
    c618:	bd70      	pop	{r4, r5, r6, pc}
		rew = 0;
    c61a:	2000      	movs	r0, #0
    c61c:	e7f7      	b.n	c60e <ring_buf_put_finish+0x22>
		return -EINVAL;
    c61e:	f06f 0015 	mvn.w	r0, #21
    c622:	e7f9      	b.n	c618 <ring_buf_put_finish+0x2c>

0000c624 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
    c624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c628:	b082      	sub	sp, #8
    c62a:	4680      	mov	r8, r0
    c62c:	460e      	mov	r6, r1
    c62e:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    c630:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
    c632:	462a      	mov	r2, r5
    c634:	a901      	add	r1, sp, #4
    c636:	4640      	mov	r0, r8
    c638:	f7ff ffb9 	bl	c5ae <ring_buf_put_claim>
    c63c:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
    c63e:	4602      	mov	r2, r0
    c640:	4631      	mov	r1, r6
    c642:	9801      	ldr	r0, [sp, #4]
    c644:	f000 feae 	bl	d3a4 <memcpy>
		total_size += partial_size;
    c648:	4427      	add	r7, r4
		size -= partial_size;
		data += partial_size;
    c64a:	4426      	add	r6, r4
	} while (size && partial_size);
    c64c:	1b2d      	subs	r5, r5, r4
    c64e:	d001      	beq.n	c654 <ring_buf_put+0x30>
    c650:	2c00      	cmp	r4, #0
    c652:	d1ee      	bne.n	c632 <ring_buf_put+0xe>

	err = ring_buf_put_finish(buf, total_size);
    c654:	4639      	mov	r1, r7
    c656:	4640      	mov	r0, r8
    c658:	f7ff ffc8 	bl	c5ec <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
    c65c:	4638      	mov	r0, r7
    c65e:	b002      	add	sp, #8
    c660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c664 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    c664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c668:	4604      	mov	r4, r0
    c66a:	460e      	mov	r6, r1
    c66c:	4617      	mov	r7, r2
	uint32_t space, granted_size, trail_size, tmp_head_mod;
	uint32_t tail = buf->tail;
    c66e:	6845      	ldr	r5, [r0, #4]

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
    c670:	68c3      	ldr	r3, [r0, #12]
    c672:	42ab      	cmp	r3, r5
    c674:	d818      	bhi.n	c6a8 <ring_buf_get_claim+0x44>
		/* Locally, increment it to pre-rewind value */
		tail += get_rewind_value(buf->size,
					 ring_buf_get_rewind_threshold());
	}

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
    c676:	f8d4 800c 	ldr.w	r8, [r4, #12]
    c67a:	4641      	mov	r1, r8
    c67c:	4620      	mov	r0, r4
    c67e:	f7ff ff5f 	bl	c540 <mod>
    c682:	4601      	mov	r1, r0
	space = tail - buf->misc.byte_mode.tmp_head;
    c684:	eba5 0508 	sub.w	r5, r5, r8
	trail_size = buf->size - tmp_head_mod;
    c688:	6923      	ldr	r3, [r4, #16]
    c68a:	1a18      	subs	r0, r3, r0

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
    c68c:	42bd      	cmp	r5, r7
    c68e:	bf28      	it	cs
    c690:	463d      	movcs	r5, r7

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
    c692:	42a8      	cmp	r0, r5
    c694:	bf28      	it	cs
    c696:	4628      	movcs	r0, r5

	*data = &buf->buf.buf8[tmp_head_mod];
    c698:	6963      	ldr	r3, [r4, #20]
    c69a:	4419      	add	r1, r3
    c69c:	6031      	str	r1, [r6, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
    c69e:	68e3      	ldr	r3, [r4, #12]
    c6a0:	4403      	add	r3, r0
    c6a2:	60e3      	str	r3, [r4, #12]

	return granted_size;
}
    c6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tail += get_rewind_value(buf->size,
    c6a8:	f8d0 8010 	ldr.w	r8, [r0, #16]
    c6ac:	f7ff ff53 	bl	c556 <ring_buf_get_rewind_threshold>
    c6b0:	4601      	mov	r1, r0
    c6b2:	4640      	mov	r0, r8
    c6b4:	f7ff ff3f 	bl	c536 <get_rewind_value>
    c6b8:	4405      	add	r5, r0
    c6ba:	e7dc      	b.n	c676 <ring_buf_get_claim+0x12>

0000c6bc <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
    c6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c6be:	4604      	mov	r4, r0
    c6c0:	460d      	mov	r5, r1
	uint32_t tail = buf->tail;
    c6c2:	6846      	ldr	r6, [r0, #4]
	uint32_t rew;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
    c6c4:	68c3      	ldr	r3, [r0, #12]
    c6c6:	42b3      	cmp	r3, r6
    c6c8:	d80a      	bhi.n	c6e0 <ring_buf_get_finish+0x24>
		/* tail was rewinded. Locally, increment it to pre-rewind value */
		rew = get_rewind_value(buf->size,
				       ring_buf_get_rewind_threshold());
		tail += rew;
	} else {
		rew = 0;
    c6ca:	2000      	movs	r0, #0
	}

	if ((buf->head + size) > tail) {
    c6cc:	6823      	ldr	r3, [r4, #0]
    c6ce:	195a      	adds	r2, r3, r5
    c6d0:	42b2      	cmp	r2, r6
    c6d2:	d80e      	bhi.n	c6f2 <ring_buf_get_finish+0x36>
		return -EINVAL;
	}

	/* Include potential rewinding. */
	buf->head += (size - rew);
    c6d4:	1a2d      	subs	r5, r5, r0
    c6d6:	442b      	add	r3, r5
    c6d8:	6023      	str	r3, [r4, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
    c6da:	60e3      	str	r3, [r4, #12]

	return 0;
    c6dc:	2000      	movs	r0, #0
}
    c6de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rew = get_rewind_value(buf->size,
    c6e0:	6907      	ldr	r7, [r0, #16]
    c6e2:	f7ff ff38 	bl	c556 <ring_buf_get_rewind_threshold>
    c6e6:	4601      	mov	r1, r0
    c6e8:	4638      	mov	r0, r7
    c6ea:	f7ff ff24 	bl	c536 <get_rewind_value>
		tail += rew;
    c6ee:	4406      	add	r6, r0
    c6f0:	e7ec      	b.n	c6cc <ring_buf_get_finish+0x10>
		return -EINVAL;
    c6f2:	f06f 0015 	mvn.w	r0, #21
    c6f6:	e7f2      	b.n	c6de <ring_buf_get_finish+0x22>

0000c6f8 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
    c6f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c6fc:	b082      	sub	sp, #8
    c6fe:	4680      	mov	r8, r0
    c700:	460e      	mov	r6, r1
    c702:	4615      	mov	r5, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    c704:	2700      	movs	r7, #0
    c706:	e009      	b.n	c71c <ring_buf_get+0x24>
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
		if (data) {
			memcpy(data, src, partial_size);
    c708:	4602      	mov	r2, r0
    c70a:	9901      	ldr	r1, [sp, #4]
    c70c:	4630      	mov	r0, r6
    c70e:	f000 fe49 	bl	d3a4 <memcpy>
			data += partial_size;
    c712:	4426      	add	r6, r4
		}
		total_size += partial_size;
    c714:	4427      	add	r7, r4
		size -= partial_size;
	} while (size && partial_size);
    c716:	1b2d      	subs	r5, r5, r4
    c718:	d009      	beq.n	c72e <ring_buf_get+0x36>
    c71a:	b144      	cbz	r4, c72e <ring_buf_get+0x36>
		partial_size = ring_buf_get_claim(buf, &src, size);
    c71c:	462a      	mov	r2, r5
    c71e:	a901      	add	r1, sp, #4
    c720:	4640      	mov	r0, r8
    c722:	f7ff ff9f 	bl	c664 <ring_buf_get_claim>
    c726:	4604      	mov	r4, r0
		if (data) {
    c728:	2e00      	cmp	r6, #0
    c72a:	d1ed      	bne.n	c708 <ring_buf_get+0x10>
    c72c:	e7f2      	b.n	c714 <ring_buf_get+0x1c>

	err = ring_buf_get_finish(buf, total_size);
    c72e:	4639      	mov	r1, r7
    c730:	4640      	mov	r0, r8
    c732:	f7ff ffc3 	bl	c6bc <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
    c736:	4638      	mov	r0, r7
    c738:	b002      	add	sp, #8
    c73a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c73e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    c73e:	4770      	bx	lr

0000c740 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
    c740:	2300      	movs	r3, #0
    c742:	6043      	str	r3, [r0, #4]
	list->head = NULL;
    c744:	6003      	str	r3, [r0, #0]
}
    c746:	4770      	bx	lr

0000c748 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
    c748:	6803      	ldr	r3, [r0, #0]
    c74a:	b12b      	cbz	r3, c758 <log_list_add_tail+0x10>
		list->head = msg;
	} else {
		list->tail->next = msg;
    c74c:	6843      	ldr	r3, [r0, #4]
    c74e:	6019      	str	r1, [r3, #0]
	}

	list->tail = msg;
    c750:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
    c752:	2300      	movs	r3, #0
    c754:	600b      	str	r3, [r1, #0]
}
    c756:	4770      	bx	lr
		list->head = msg;
    c758:	6001      	str	r1, [r0, #0]
    c75a:	e7f9      	b.n	c750 <log_list_add_tail+0x8>

0000c75c <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
    c75c:	6800      	ldr	r0, [r0, #0]
    c75e:	4770      	bx	lr

0000c760 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
    c760:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
    c762:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
    c764:	b108      	cbz	r0, c76a <log_list_head_get+0xa>
		list->head = list->head->next;
    c766:	6802      	ldr	r2, [r0, #0]
    c768:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
    c76a:	4770      	bx	lr

0000c76c <dummy_timestamp>:
}
    c76c:	2000      	movs	r0, #0
    c76e:	4770      	bx	lr

0000c770 <msg_filter_check>:
}
    c770:	2001      	movs	r0, #1
    c772:	4770      	bx	lr

0000c774 <default_get_timestamp>:
{
    c774:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    c776:	f001 fb9f 	bl	deb8 <sys_clock_cycle_get_32>
}
    c77a:	bd08      	pop	{r3, pc}

0000c77c <z_log_get_s_mask>:
{
    c77c:	b470      	push	{r4, r5, r6}
    c77e:	4603      	mov	r3, r0
	uint32_t mask = 0U;
    c780:	2000      	movs	r0, #0
	uint32_t arg = 0U;
    c782:	4605      	mov	r5, r0
	bool arm = false;
    c784:	4604      	mov	r4, r0
	while ((curr = *str++) && arg < nargs) {
    c786:	e001      	b.n	c78c <z_log_get_s_mask+0x10>
			arm = !arm;
    c788:	f084 0401 	eor.w	r4, r4, #1
	while ((curr = *str++) && arg < nargs) {
    c78c:	f813 2b01 	ldrb.w	r2, [r3], #1
    c790:	b19a      	cbz	r2, c7ba <z_log_get_s_mask+0x3e>
    c792:	428d      	cmp	r5, r1
    c794:	d211      	bcs.n	c7ba <z_log_get_s_mask+0x3e>
		if (curr == '%') {
    c796:	2a25      	cmp	r2, #37	; 0x25
    c798:	d0f6      	beq.n	c788 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
    c79a:	2c00      	cmp	r4, #0
    c79c:	d0f6      	beq.n	c78c <z_log_get_s_mask+0x10>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    c79e:	f042 0620 	orr.w	r6, r2, #32
    c7a2:	3e61      	subs	r6, #97	; 0x61
    c7a4:	2e19      	cmp	r6, #25
    c7a6:	d8f1      	bhi.n	c78c <z_log_get_s_mask+0x10>
			if (curr == 's') {
    c7a8:	2a73      	cmp	r2, #115	; 0x73
    c7aa:	d002      	beq.n	c7b2 <z_log_get_s_mask+0x36>
			arg++;
    c7ac:	3501      	adds	r5, #1
			arm = false;
    c7ae:	2400      	movs	r4, #0
    c7b0:	e7ec      	b.n	c78c <z_log_get_s_mask+0x10>
				mask |= BIT(arg);
    c7b2:	2201      	movs	r2, #1
    c7b4:	40aa      	lsls	r2, r5
    c7b6:	4310      	orrs	r0, r2
    c7b8:	e7f8      	b.n	c7ac <z_log_get_s_mask+0x30>
}
    c7ba:	bc70      	pop	{r4, r5, r6}
    c7bc:	4770      	bx	lr

0000c7be <z_log_get_tag>:
}
    c7be:	2000      	movs	r0, #0
    c7c0:	4770      	bx	lr

0000c7c2 <block_on_alloc>:
}
    c7c2:	2000      	movs	r0, #0
    c7c4:	4770      	bx	lr

0000c7c6 <cont_arg_get>:

static log_arg_t cont_arg_get(struct log_msg *msg, uint32_t arg_idx)
{
	struct log_msg_cont *cont;

	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
    c7c6:	2901      	cmp	r1, #1
    c7c8:	d906      	bls.n	c7d8 <cont_arg_get+0x12>
		return msg->payload.ext.data.args[arg_idx];
	}


	cont = msg->payload.ext.next;
    c7ca:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
    c7cc:	3902      	subs	r1, #2

	while (arg_idx >= ARGS_CONT_MSG) {
    c7ce:	2906      	cmp	r1, #6
    c7d0:	d907      	bls.n	c7e2 <cont_arg_get+0x1c>
		arg_idx -= ARGS_CONT_MSG;
    c7d2:	3907      	subs	r1, #7
		cont = cont->next;
    c7d4:	681b      	ldr	r3, [r3, #0]
    c7d6:	e7fa      	b.n	c7ce <cont_arg_get+0x8>
		return msg->payload.ext.data.args[arg_idx];
    c7d8:	3104      	adds	r1, #4
    c7da:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    c7de:	6888      	ldr	r0, [r1, #8]
    c7e0:	4770      	bx	lr
	}

	return cont->payload.args[arg_idx];
    c7e2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    c7e6:	6848      	ldr	r0, [r1, #4]
}
    c7e8:	4770      	bx	lr

0000c7ea <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
    c7ea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c7ee:	461c      	mov	r4, r3
    c7f0:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint32_t available_len = msg->hdr.params.hexdump.length;
    c7f4:	8903      	ldrh	r3, [r0, #8]
    c7f6:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
    c7fa:	42a3      	cmp	r3, r4
    c7fc:	d91f      	bls.n	c83e <log_msg_hexdump_data_op+0x54>
    c7fe:	4688      	mov	r8, r1
		*length = 0;
		return;
	}

	if ((offset + *length) > available_len) {
    c800:	6811      	ldr	r1, [r2, #0]
    c802:	4421      	add	r1, r4
    c804:	4299      	cmp	r1, r3
    c806:	d901      	bls.n	c80c <log_msg_hexdump_data_op+0x22>
		*length = available_len - offset;
    c808:	1b19      	subs	r1, r3, r4
    c80a:	6011      	str	r1, [r2, #0]
	}

	req_len = *length;
    c80c:	6817      	ldr	r7, [r2, #0]

	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    c80e:	2b0c      	cmp	r3, #12
    c810:	d919      	bls.n	c846 <log_msg_hexdump_data_op+0x5c>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
		head_data = msg->payload.ext.data.bytes;
    c812:	f100 0c18 	add.w	ip, r0, #24
		cont = msg->payload.ext.next;
    c816:	6946      	ldr	r6, [r0, #20]
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    c818:	2308      	movs	r3, #8
		head_data = msg->payload.single.bytes;
		chunk_len = available_len;

	}

	if (offset < chunk_len) {
    c81a:	42a3      	cmp	r3, r4
    c81c:	d91e      	bls.n	c85c <log_msg_hexdump_data_op+0x72>
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    c81e:	42bb      	cmp	r3, r7
    c820:	bf28      	it	cs
    c822:	463b      	movcs	r3, r7
    c824:	461d      	mov	r5, r3

		if (put_op) {
    c826:	f1b9 0f00 	cmp.w	r9, #0
    c82a:	d010      	beq.n	c84e <log_msg_hexdump_data_op+0x64>
			(void)memcpy(&head_data[offset], data, cpy_len);
    c82c:	461a      	mov	r2, r3
    c82e:	4641      	mov	r1, r8
    c830:	eb0c 0004 	add.w	r0, ip, r4
    c834:	f000 fdb6 	bl	d3a4 <memcpy>
		} else {
			(void)memcpy(data, &head_data[offset], cpy_len);
		}

		req_len -= cpy_len;
    c838:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
    c83a:	44a8      	add	r8, r5
    c83c:	e021      	b.n	c882 <log_msg_hexdump_data_op+0x98>
		*length = 0;
    c83e:	2300      	movs	r3, #0
    c840:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
    c842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		head_data = msg->payload.single.bytes;
    c846:	f100 0c14 	add.w	ip, r0, #20
	struct log_msg_cont *cont = NULL;
    c84a:	2600      	movs	r6, #0
    c84c:	e7e5      	b.n	c81a <log_msg_hexdump_data_op+0x30>
			(void)memcpy(data, &head_data[offset], cpy_len);
    c84e:	461a      	mov	r2, r3
    c850:	eb0c 0104 	add.w	r1, ip, r4
    c854:	4640      	mov	r0, r8
    c856:	f000 fda5 	bl	d3a4 <memcpy>
    c85a:	e7ed      	b.n	c838 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
    c85c:	1ae4      	subs	r4, r4, r3
		if (cont == NULL) {
    c85e:	b91e      	cbnz	r6, c868 <log_msg_hexdump_data_op+0x7e>
			cont = msg->payload.ext.next;
    c860:	6946      	ldr	r6, [r0, #20]
    c862:	e001      	b.n	c868 <log_msg_hexdump_data_op+0x7e>
			cont = cont->next;
    c864:	6836      	ldr	r6, [r6, #0]
			offset -= chunk_len;
    c866:	3c1c      	subs	r4, #28
		while (offset >= chunk_len) {
    c868:	2c1b      	cmp	r4, #27
    c86a:	d8fb      	bhi.n	c864 <log_msg_hexdump_data_op+0x7a>
    c86c:	e009      	b.n	c882 <log_msg_hexdump_data_op+0x98>
			(void)memcpy(data, &cont->payload.bytes[offset],
    c86e:	1931      	adds	r1, r6, r4
    c870:	462a      	mov	r2, r5
    c872:	3104      	adds	r1, #4
    c874:	4640      	mov	r0, r8
    c876:	f000 fd95 	bl	d3a4 <memcpy>
		cont = cont->next;
    c87a:	6836      	ldr	r6, [r6, #0]
		req_len -= cpy_len;
    c87c:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
    c87e:	44a8      	add	r8, r5
		offset = 0;
    c880:	2400      	movs	r4, #0
	while ((req_len > 0) && (cont != NULL)) {
    c882:	2f00      	cmp	r7, #0
    c884:	d0dd      	beq.n	c842 <log_msg_hexdump_data_op+0x58>
    c886:	2e00      	cmp	r6, #0
    c888:	d0db      	beq.n	c842 <log_msg_hexdump_data_op+0x58>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
    c88a:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    c88e:	42bd      	cmp	r5, r7
    c890:	bf28      	it	cs
    c892:	463d      	movcs	r5, r7
		if (put_op) {
    c894:	f1b9 0f00 	cmp.w	r9, #0
    c898:	d0e9      	beq.n	c86e <log_msg_hexdump_data_op+0x84>
			(void)memcpy(&cont->payload.bytes[offset],
    c89a:	1930      	adds	r0, r6, r4
    c89c:	462a      	mov	r2, r5
    c89e:	4641      	mov	r1, r8
    c8a0:	3004      	adds	r0, #4
    c8a2:	f000 fd7f 	bl	d3a4 <memcpy>
    c8a6:	e7e8      	b.n	c87a <log_msg_hexdump_data_op+0x90>

0000c8a8 <log_msg_get>:
	atomic_inc(&msg->hdr.ref_cnt);
    c8a8:	3004      	adds	r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    c8aa:	f3bf 8f5b 	dmb	ish
    c8ae:	e850 3f00 	ldrex	r3, [r0]
    c8b2:	3301      	adds	r3, #1
    c8b4:	e840 3200 	strex	r2, r3, [r0]
    c8b8:	2a00      	cmp	r2, #0
    c8ba:	d1f8      	bne.n	c8ae <log_msg_get+0x6>
    c8bc:	f3bf 8f5b 	dmb	ish
}
    c8c0:	4770      	bx	lr

0000c8c2 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
    c8c2:	7a40      	ldrb	r0, [r0, #9]
}
    c8c4:	0900      	lsrs	r0, r0, #4
    c8c6:	4770      	bx	lr

0000c8c8 <log_msg_arg_get>:
{
    c8c8:	b508      	push	{r3, lr}
	if (arg_idx >= msg->hdr.params.std.nargs) {
    c8ca:	7a43      	ldrb	r3, [r0, #9]
    c8cc:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
    c8d0:	d20a      	bcs.n	c8e8 <log_msg_arg_get+0x20>
    c8d2:	091a      	lsrs	r2, r3, #4
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
    c8d4:	2a03      	cmp	r2, #3
    c8d6:	d804      	bhi.n	c8e2 <log_msg_arg_get+0x1a>
		arg = msg->payload.single.args[arg_idx];
    c8d8:	3104      	adds	r1, #4
    c8da:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    c8de:	6840      	ldr	r0, [r0, #4]
    c8e0:	e003      	b.n	c8ea <log_msg_arg_get+0x22>
		arg = cont_arg_get(msg, arg_idx);
    c8e2:	f7ff ff70 	bl	c7c6 <cont_arg_get>
    c8e6:	e000      	b.n	c8ea <log_msg_arg_get+0x22>
		return 0;
    c8e8:	2000      	movs	r0, #0
}
    c8ea:	bd08      	pop	{r3, pc}

0000c8ec <log_msg_str_get>:
}
    c8ec:	6900      	ldr	r0, [r0, #16]
    c8ee:	4770      	bx	lr

0000c8f0 <log_msg_put>:
{
    c8f0:	b508      	push	{r3, lr}
	atomic_dec(&msg->hdr.ref_cnt);
    c8f2:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    c8f4:	f3bf 8f5b 	dmb	ish
    c8f8:	e853 2f00 	ldrex	r2, [r3]
    c8fc:	3a01      	subs	r2, #1
    c8fe:	e843 2100 	strex	r1, r2, [r3]
    c902:	2900      	cmp	r1, #0
    c904:	d1f8      	bne.n	c8f8 <log_msg_put+0x8>
    c906:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
    c90a:	6843      	ldr	r3, [r0, #4]
    c90c:	b103      	cbz	r3, c910 <log_msg_put+0x20>
}
    c90e:	bd08      	pop	{r3, pc}
		msg_free(msg);
    c910:	f7f5 f83c 	bl	198c <msg_free>
}
    c914:	e7fb      	b.n	c90e <log_msg_put+0x1e>

0000c916 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
    c916:	b510      	push	{r4, lr}
    c918:	b082      	sub	sp, #8
	log_msg_hexdump_data_op(msg, data, length, offset, false);
    c91a:	2400      	movs	r4, #0
    c91c:	9400      	str	r4, [sp, #0]
    c91e:	f7ff ff64 	bl	c7ea <log_msg_hexdump_data_op>
}
    c922:	b002      	add	sp, #8
    c924:	bd10      	pop	{r4, pc}

0000c926 <buffer_write>:
{
    c926:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c928:	4607      	mov	r7, r0
    c92a:	460d      	mov	r5, r1
    c92c:	4614      	mov	r4, r2
    c92e:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
    c930:	4632      	mov	r2, r6
    c932:	4621      	mov	r1, r4
    c934:	4628      	mov	r0, r5
    c936:	47b8      	blx	r7
		buf += processed;
    c938:	4405      	add	r5, r0
	} while (len != 0);
    c93a:	1a24      	subs	r4, r4, r0
    c93c:	d1f8      	bne.n	c930 <buffer_write+0xa>
}
    c93e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000c940 <color_prefix>:
{
    c940:	b508      	push	{r3, lr}
    c942:	4613      	mov	r3, r2
	color_print(output, color, true, level);
    c944:	2201      	movs	r2, #1
    c946:	f7f5 f8b9 	bl	1abc <color_print>
}
    c94a:	bd08      	pop	{r3, pc}

0000c94c <color_postfix>:
{
    c94c:	b508      	push	{r3, lr}
    c94e:	4613      	mov	r3, r2
	color_print(output, color, false, level);
    c950:	2200      	movs	r2, #0
    c952:	f7f5 f8b3 	bl	1abc <color_print>
}
    c956:	bd08      	pop	{r3, pc}

0000c958 <postfix_print>:
{
    c958:	b538      	push	{r3, r4, r5, lr}
    c95a:	4605      	mov	r5, r0
    c95c:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
    c95e:	f001 0101 	and.w	r1, r1, #1
    c962:	f7ff fff3 	bl	c94c <color_postfix>
	newline_print(output, flags);
    c966:	4621      	mov	r1, r4
    c968:	4628      	mov	r0, r5
    c96a:	f7f5 f8bd 	bl	1ae8 <newline_print>
}
    c96e:	bd38      	pop	{r3, r4, r5, pc}

0000c970 <std_print>:
{
    c970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c974:	b08e      	sub	sp, #56	; 0x38
    c976:	af0e      	add	r7, sp, #56	; 0x38
    c978:	4606      	mov	r6, r0
    c97a:	4689      	mov	r9, r1
	const char *str = log_msg_str_get(msg);
    c97c:	f7ff ffb6 	bl	c8ec <log_msg_str_get>
    c980:	4682      	mov	sl, r0
	uint32_t nargs = log_msg_nargs_get(msg);
    c982:	4630      	mov	r0, r6
    c984:	f7ff ff9d 	bl	c8c2 <log_msg_nargs_get>
    c988:	4680      	mov	r8, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
    c98a:	0083      	lsls	r3, r0, #2
    c98c:	3307      	adds	r3, #7
    c98e:	f023 0307 	bic.w	r3, r3, #7
    c992:	ebad 0d03 	sub.w	sp, sp, r3
    c996:	ad0e      	add	r5, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
    c998:	2400      	movs	r4, #0
    c99a:	4544      	cmp	r4, r8
    c99c:	d207      	bcs.n	c9ae <std_print+0x3e>
		args[i] = log_msg_arg_get(msg, i);
    c99e:	4621      	mov	r1, r4
    c9a0:	4630      	mov	r0, r6
    c9a2:	f7ff ff91 	bl	c8c8 <log_msg_arg_get>
    c9a6:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	for (i = 0; i < nargs; i++) {
    c9aa:	3401      	adds	r4, #1
    c9ac:	e7f5      	b.n	c99a <std_print+0x2a>
	switch (log_msg_nargs_get(msg)) {
    c9ae:	4630      	mov	r0, r6
    c9b0:	f7ff ff87 	bl	c8c2 <log_msg_nargs_get>
    c9b4:	280f      	cmp	r0, #15
    c9b6:	d815      	bhi.n	c9e4 <std_print+0x74>
    c9b8:	e8df f010 	tbh	[pc, r0, lsl #1]
    c9bc:	00170010 	.word	0x00170010
    c9c0:	0024001d 	.word	0x0024001d
    c9c4:	0038002d 	.word	0x0038002d
    c9c8:	00540045 	.word	0x00540045
    c9cc:	00780065 	.word	0x00780065
    c9d0:	00a4008d 	.word	0x00a4008d
    c9d4:	00d800bd 	.word	0x00d800bd
    c9d8:	011400f5 	.word	0x011400f5
		print_formatted(output, str);
    c9dc:	4651      	mov	r1, sl
    c9de:	4648      	mov	r0, r9
    c9e0:	f7f5 f814 	bl	1a0c <print_formatted>
}
    c9e4:	46bd      	mov	sp, r7
    c9e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
    c9ea:	682a      	ldr	r2, [r5, #0]
    c9ec:	4651      	mov	r1, sl
    c9ee:	4648      	mov	r0, r9
    c9f0:	f7f5 f80c 	bl	1a0c <print_formatted>
		break;
    c9f4:	e7f6      	b.n	c9e4 <std_print+0x74>
		print_formatted(output, str, args[0], args[1]);
    c9f6:	686b      	ldr	r3, [r5, #4]
    c9f8:	682a      	ldr	r2, [r5, #0]
    c9fa:	4651      	mov	r1, sl
    c9fc:	4648      	mov	r0, r9
    c9fe:	f7f5 f805 	bl	1a0c <print_formatted>
		break;
    ca02:	e7ef      	b.n	c9e4 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2]);
    ca04:	686b      	ldr	r3, [r5, #4]
    ca06:	682a      	ldr	r2, [r5, #0]
    ca08:	68a9      	ldr	r1, [r5, #8]
    ca0a:	9100      	str	r1, [sp, #0]
    ca0c:	4651      	mov	r1, sl
    ca0e:	4648      	mov	r0, r9
    ca10:	f7f4 fffc 	bl	1a0c <print_formatted>
		break;
    ca14:	e7e6      	b.n	c9e4 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    ca16:	686b      	ldr	r3, [r5, #4]
    ca18:	682a      	ldr	r2, [r5, #0]
    ca1a:	68e9      	ldr	r1, [r5, #12]
    ca1c:	9101      	str	r1, [sp, #4]
    ca1e:	68a9      	ldr	r1, [r5, #8]
    ca20:	9100      	str	r1, [sp, #0]
    ca22:	4651      	mov	r1, sl
    ca24:	4648      	mov	r0, r9
    ca26:	f7f4 fff1 	bl	1a0c <print_formatted>
		break;
    ca2a:	e7db      	b.n	c9e4 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    ca2c:	686b      	ldr	r3, [r5, #4]
    ca2e:	682a      	ldr	r2, [r5, #0]
    ca30:	6929      	ldr	r1, [r5, #16]
    ca32:	9102      	str	r1, [sp, #8]
    ca34:	68e9      	ldr	r1, [r5, #12]
    ca36:	9101      	str	r1, [sp, #4]
    ca38:	68a9      	ldr	r1, [r5, #8]
    ca3a:	9100      	str	r1, [sp, #0]
    ca3c:	4651      	mov	r1, sl
    ca3e:	4648      	mov	r0, r9
    ca40:	f7f4 ffe4 	bl	1a0c <print_formatted>
		break;
    ca44:	e7ce      	b.n	c9e4 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    ca46:	686b      	ldr	r3, [r5, #4]
    ca48:	682a      	ldr	r2, [r5, #0]
    ca4a:	6969      	ldr	r1, [r5, #20]
    ca4c:	9103      	str	r1, [sp, #12]
    ca4e:	6929      	ldr	r1, [r5, #16]
    ca50:	9102      	str	r1, [sp, #8]
    ca52:	68e9      	ldr	r1, [r5, #12]
    ca54:	9101      	str	r1, [sp, #4]
    ca56:	68a9      	ldr	r1, [r5, #8]
    ca58:	9100      	str	r1, [sp, #0]
    ca5a:	4651      	mov	r1, sl
    ca5c:	4648      	mov	r0, r9
    ca5e:	f7f4 ffd5 	bl	1a0c <print_formatted>
		break;
    ca62:	e7bf      	b.n	c9e4 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    ca64:	686b      	ldr	r3, [r5, #4]
    ca66:	682a      	ldr	r2, [r5, #0]
    ca68:	69a9      	ldr	r1, [r5, #24]
    ca6a:	9104      	str	r1, [sp, #16]
    ca6c:	6969      	ldr	r1, [r5, #20]
    ca6e:	9103      	str	r1, [sp, #12]
    ca70:	6929      	ldr	r1, [r5, #16]
    ca72:	9102      	str	r1, [sp, #8]
    ca74:	68e9      	ldr	r1, [r5, #12]
    ca76:	9101      	str	r1, [sp, #4]
    ca78:	68a9      	ldr	r1, [r5, #8]
    ca7a:	9100      	str	r1, [sp, #0]
    ca7c:	4651      	mov	r1, sl
    ca7e:	4648      	mov	r0, r9
    ca80:	f7f4 ffc4 	bl	1a0c <print_formatted>
		break;
    ca84:	e7ae      	b.n	c9e4 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    ca86:	686b      	ldr	r3, [r5, #4]
    ca88:	682a      	ldr	r2, [r5, #0]
    ca8a:	69e9      	ldr	r1, [r5, #28]
    ca8c:	9105      	str	r1, [sp, #20]
    ca8e:	69a9      	ldr	r1, [r5, #24]
    ca90:	9104      	str	r1, [sp, #16]
    ca92:	6969      	ldr	r1, [r5, #20]
    ca94:	9103      	str	r1, [sp, #12]
    ca96:	6929      	ldr	r1, [r5, #16]
    ca98:	9102      	str	r1, [sp, #8]
    ca9a:	68e9      	ldr	r1, [r5, #12]
    ca9c:	9101      	str	r1, [sp, #4]
    ca9e:	68a9      	ldr	r1, [r5, #8]
    caa0:	9100      	str	r1, [sp, #0]
    caa2:	4651      	mov	r1, sl
    caa4:	4648      	mov	r0, r9
    caa6:	f7f4 ffb1 	bl	1a0c <print_formatted>
		break;
    caaa:	e79b      	b.n	c9e4 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    caac:	686b      	ldr	r3, [r5, #4]
    caae:	682a      	ldr	r2, [r5, #0]
    cab0:	6a29      	ldr	r1, [r5, #32]
    cab2:	9106      	str	r1, [sp, #24]
    cab4:	69e9      	ldr	r1, [r5, #28]
    cab6:	9105      	str	r1, [sp, #20]
    cab8:	69a9      	ldr	r1, [r5, #24]
    caba:	9104      	str	r1, [sp, #16]
    cabc:	6969      	ldr	r1, [r5, #20]
    cabe:	9103      	str	r1, [sp, #12]
    cac0:	6929      	ldr	r1, [r5, #16]
    cac2:	9102      	str	r1, [sp, #8]
    cac4:	68e9      	ldr	r1, [r5, #12]
    cac6:	9101      	str	r1, [sp, #4]
    cac8:	68a9      	ldr	r1, [r5, #8]
    caca:	9100      	str	r1, [sp, #0]
    cacc:	4651      	mov	r1, sl
    cace:	4648      	mov	r0, r9
    cad0:	f7f4 ff9c 	bl	1a0c <print_formatted>
		break;
    cad4:	e786      	b.n	c9e4 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    cad6:	686b      	ldr	r3, [r5, #4]
    cad8:	682a      	ldr	r2, [r5, #0]
    cada:	6a69      	ldr	r1, [r5, #36]	; 0x24
    cadc:	9107      	str	r1, [sp, #28]
    cade:	6a29      	ldr	r1, [r5, #32]
    cae0:	9106      	str	r1, [sp, #24]
    cae2:	69e9      	ldr	r1, [r5, #28]
    cae4:	9105      	str	r1, [sp, #20]
    cae6:	69a9      	ldr	r1, [r5, #24]
    cae8:	9104      	str	r1, [sp, #16]
    caea:	6969      	ldr	r1, [r5, #20]
    caec:	9103      	str	r1, [sp, #12]
    caee:	6929      	ldr	r1, [r5, #16]
    caf0:	9102      	str	r1, [sp, #8]
    caf2:	68e9      	ldr	r1, [r5, #12]
    caf4:	9101      	str	r1, [sp, #4]
    caf6:	68a9      	ldr	r1, [r5, #8]
    caf8:	9100      	str	r1, [sp, #0]
    cafa:	4651      	mov	r1, sl
    cafc:	4648      	mov	r0, r9
    cafe:	f7f4 ff85 	bl	1a0c <print_formatted>
		break;
    cb02:	e76f      	b.n	c9e4 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    cb04:	686b      	ldr	r3, [r5, #4]
    cb06:	682a      	ldr	r2, [r5, #0]
    cb08:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    cb0a:	9108      	str	r1, [sp, #32]
    cb0c:	6a69      	ldr	r1, [r5, #36]	; 0x24
    cb0e:	9107      	str	r1, [sp, #28]
    cb10:	6a29      	ldr	r1, [r5, #32]
    cb12:	9106      	str	r1, [sp, #24]
    cb14:	69e9      	ldr	r1, [r5, #28]
    cb16:	9105      	str	r1, [sp, #20]
    cb18:	69a9      	ldr	r1, [r5, #24]
    cb1a:	9104      	str	r1, [sp, #16]
    cb1c:	6969      	ldr	r1, [r5, #20]
    cb1e:	9103      	str	r1, [sp, #12]
    cb20:	6929      	ldr	r1, [r5, #16]
    cb22:	9102      	str	r1, [sp, #8]
    cb24:	68e9      	ldr	r1, [r5, #12]
    cb26:	9101      	str	r1, [sp, #4]
    cb28:	68a9      	ldr	r1, [r5, #8]
    cb2a:	9100      	str	r1, [sp, #0]
    cb2c:	4651      	mov	r1, sl
    cb2e:	4648      	mov	r0, r9
    cb30:	f7f4 ff6c 	bl	1a0c <print_formatted>
		break;
    cb34:	e756      	b.n	c9e4 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    cb36:	686b      	ldr	r3, [r5, #4]
    cb38:	682a      	ldr	r2, [r5, #0]
    cb3a:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    cb3c:	9109      	str	r1, [sp, #36]	; 0x24
    cb3e:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    cb40:	9108      	str	r1, [sp, #32]
    cb42:	6a69      	ldr	r1, [r5, #36]	; 0x24
    cb44:	9107      	str	r1, [sp, #28]
    cb46:	6a29      	ldr	r1, [r5, #32]
    cb48:	9106      	str	r1, [sp, #24]
    cb4a:	69e9      	ldr	r1, [r5, #28]
    cb4c:	9105      	str	r1, [sp, #20]
    cb4e:	69a9      	ldr	r1, [r5, #24]
    cb50:	9104      	str	r1, [sp, #16]
    cb52:	6969      	ldr	r1, [r5, #20]
    cb54:	9103      	str	r1, [sp, #12]
    cb56:	6929      	ldr	r1, [r5, #16]
    cb58:	9102      	str	r1, [sp, #8]
    cb5a:	68e9      	ldr	r1, [r5, #12]
    cb5c:	9101      	str	r1, [sp, #4]
    cb5e:	68a9      	ldr	r1, [r5, #8]
    cb60:	9100      	str	r1, [sp, #0]
    cb62:	4651      	mov	r1, sl
    cb64:	4648      	mov	r0, r9
    cb66:	f7f4 ff51 	bl	1a0c <print_formatted>
		break;
    cb6a:	e73b      	b.n	c9e4 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    cb6c:	686b      	ldr	r3, [r5, #4]
    cb6e:	682a      	ldr	r2, [r5, #0]
    cb70:	6b29      	ldr	r1, [r5, #48]	; 0x30
    cb72:	910a      	str	r1, [sp, #40]	; 0x28
    cb74:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    cb76:	9109      	str	r1, [sp, #36]	; 0x24
    cb78:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    cb7a:	9108      	str	r1, [sp, #32]
    cb7c:	6a69      	ldr	r1, [r5, #36]	; 0x24
    cb7e:	9107      	str	r1, [sp, #28]
    cb80:	6a29      	ldr	r1, [r5, #32]
    cb82:	9106      	str	r1, [sp, #24]
    cb84:	69e9      	ldr	r1, [r5, #28]
    cb86:	9105      	str	r1, [sp, #20]
    cb88:	69a9      	ldr	r1, [r5, #24]
    cb8a:	9104      	str	r1, [sp, #16]
    cb8c:	6969      	ldr	r1, [r5, #20]
    cb8e:	9103      	str	r1, [sp, #12]
    cb90:	6929      	ldr	r1, [r5, #16]
    cb92:	9102      	str	r1, [sp, #8]
    cb94:	68e9      	ldr	r1, [r5, #12]
    cb96:	9101      	str	r1, [sp, #4]
    cb98:	68a9      	ldr	r1, [r5, #8]
    cb9a:	9100      	str	r1, [sp, #0]
    cb9c:	4651      	mov	r1, sl
    cb9e:	4648      	mov	r0, r9
    cba0:	f7f4 ff34 	bl	1a0c <print_formatted>
		break;
    cba4:	e71e      	b.n	c9e4 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    cba6:	686b      	ldr	r3, [r5, #4]
    cba8:	682a      	ldr	r2, [r5, #0]
    cbaa:	6b69      	ldr	r1, [r5, #52]	; 0x34
    cbac:	910b      	str	r1, [sp, #44]	; 0x2c
    cbae:	6b29      	ldr	r1, [r5, #48]	; 0x30
    cbb0:	910a      	str	r1, [sp, #40]	; 0x28
    cbb2:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    cbb4:	9109      	str	r1, [sp, #36]	; 0x24
    cbb6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    cbb8:	9108      	str	r1, [sp, #32]
    cbba:	6a69      	ldr	r1, [r5, #36]	; 0x24
    cbbc:	9107      	str	r1, [sp, #28]
    cbbe:	6a29      	ldr	r1, [r5, #32]
    cbc0:	9106      	str	r1, [sp, #24]
    cbc2:	69e9      	ldr	r1, [r5, #28]
    cbc4:	9105      	str	r1, [sp, #20]
    cbc6:	69a9      	ldr	r1, [r5, #24]
    cbc8:	9104      	str	r1, [sp, #16]
    cbca:	6969      	ldr	r1, [r5, #20]
    cbcc:	9103      	str	r1, [sp, #12]
    cbce:	6929      	ldr	r1, [r5, #16]
    cbd0:	9102      	str	r1, [sp, #8]
    cbd2:	68e9      	ldr	r1, [r5, #12]
    cbd4:	9101      	str	r1, [sp, #4]
    cbd6:	68a9      	ldr	r1, [r5, #8]
    cbd8:	9100      	str	r1, [sp, #0]
    cbda:	4651      	mov	r1, sl
    cbdc:	4648      	mov	r0, r9
    cbde:	f7f4 ff15 	bl	1a0c <print_formatted>
		break;
    cbe2:	e6ff      	b.n	c9e4 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    cbe4:	686b      	ldr	r3, [r5, #4]
    cbe6:	682a      	ldr	r2, [r5, #0]
    cbe8:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    cbea:	910c      	str	r1, [sp, #48]	; 0x30
    cbec:	6b69      	ldr	r1, [r5, #52]	; 0x34
    cbee:	910b      	str	r1, [sp, #44]	; 0x2c
    cbf0:	6b29      	ldr	r1, [r5, #48]	; 0x30
    cbf2:	910a      	str	r1, [sp, #40]	; 0x28
    cbf4:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    cbf6:	9109      	str	r1, [sp, #36]	; 0x24
    cbf8:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    cbfa:	9108      	str	r1, [sp, #32]
    cbfc:	6a69      	ldr	r1, [r5, #36]	; 0x24
    cbfe:	9107      	str	r1, [sp, #28]
    cc00:	6a29      	ldr	r1, [r5, #32]
    cc02:	9106      	str	r1, [sp, #24]
    cc04:	69e9      	ldr	r1, [r5, #28]
    cc06:	9105      	str	r1, [sp, #20]
    cc08:	69a9      	ldr	r1, [r5, #24]
    cc0a:	9104      	str	r1, [sp, #16]
    cc0c:	6969      	ldr	r1, [r5, #20]
    cc0e:	9103      	str	r1, [sp, #12]
    cc10:	6929      	ldr	r1, [r5, #16]
    cc12:	9102      	str	r1, [sp, #8]
    cc14:	68e9      	ldr	r1, [r5, #12]
    cc16:	9101      	str	r1, [sp, #4]
    cc18:	68a9      	ldr	r1, [r5, #8]
    cc1a:	9100      	str	r1, [sp, #0]
    cc1c:	4651      	mov	r1, sl
    cc1e:	4648      	mov	r0, r9
    cc20:	f7f4 fef4 	bl	1a0c <print_formatted>
}
    cc24:	e6de      	b.n	c9e4 <std_print+0x74>

0000cc26 <log_output_flush>:
{
    cc26:	b510      	push	{r4, lr}
    cc28:	4604      	mov	r4, r0
		     output->control_block->offset,
    cc2a:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    cc2c:	6853      	ldr	r3, [r2, #4]
    cc2e:	6812      	ldr	r2, [r2, #0]
    cc30:	6881      	ldr	r1, [r0, #8]
    cc32:	6800      	ldr	r0, [r0, #0]
    cc34:	f7ff fe77 	bl	c926 <buffer_write>
	output->control_block->offset = 0;
    cc38:	6863      	ldr	r3, [r4, #4]
    cc3a:	2200      	movs	r2, #0
    cc3c:	601a      	str	r2, [r3, #0]
}
    cc3e:	bd10      	pop	{r4, pc}

0000cc40 <out_func>:
{
    cc40:	b538      	push	{r3, r4, r5, lr}
    cc42:	4605      	mov	r5, r0
    cc44:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    cc46:	684b      	ldr	r3, [r1, #4]
    cc48:	681a      	ldr	r2, [r3, #0]
    cc4a:	68cb      	ldr	r3, [r1, #12]
    cc4c:	429a      	cmp	r2, r3
    cc4e:	d00f      	beq.n	cc70 <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
    cc50:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    cc52:	f3bf 8f5b 	dmb	ish
    cc56:	e853 2f00 	ldrex	r2, [r3]
    cc5a:	1c51      	adds	r1, r2, #1
    cc5c:	e843 1000 	strex	r0, r1, [r3]
    cc60:	2800      	cmp	r0, #0
    cc62:	d1f8      	bne.n	cc56 <out_func+0x16>
    cc64:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    cc68:	68a3      	ldr	r3, [r4, #8]
    cc6a:	549d      	strb	r5, [r3, r2]
}
    cc6c:	2000      	movs	r0, #0
    cc6e:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
    cc70:	4608      	mov	r0, r1
    cc72:	f7ff ffd8 	bl	cc26 <log_output_flush>
    cc76:	e7eb      	b.n	cc50 <out_func+0x10>

0000cc78 <log_output_msg_process>:
{
    cc78:	b5f0      	push	{r4, r5, r6, r7, lr}
    cc7a:	b085      	sub	sp, #20
    cc7c:	4606      	mov	r6, r0
    cc7e:	460c      	mov	r4, r1
    cc80:	4617      	mov	r7, r2
    cc82:	7a0b      	ldrb	r3, [r1, #8]
    cc84:	f083 0301 	eor.w	r3, r3, #1
    cc88:	f003 0201 	and.w	r2, r3, #1
	return msg->hdr.timestamp;
    cc8c:	68cb      	ldr	r3, [r1, #12]
	return msg->hdr.ids.level;
    cc8e:	7a89      	ldrb	r1, [r1, #10]
	return msg->hdr.ids.domain_id;
    cc90:	f3c1 0cc2 	ubfx	ip, r1, #3, #3
	return msg->hdr.ids.source_id;
    cc94:	8960      	ldrh	r0, [r4, #10]
	int16_t source_id = (int16_t)log_msg_source_id_get(msg);
    cc96:	f3c0 1089 	ubfx	r0, r0, #6, #10
			0 : prefix_print(output, flags, std_msg, timestamp,
    cc9a:	f011 0507 	ands.w	r5, r1, #7
    cc9e:	d10f      	bne.n	ccc0 <log_output_msg_process+0x48>
    cca0:	2200      	movs	r2, #0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    cca2:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg)) {
    cca4:	f013 0f01 	tst.w	r3, #1
    cca8:	d014      	beq.n	ccd4 <log_output_msg_process+0x5c>
	} else if (raw_string) {
    ccaa:	b9c5      	cbnz	r5, ccde <log_output_msg_process+0x66>
		raw_string_print(msg, output);
    ccac:	4631      	mov	r1, r6
    ccae:	4620      	mov	r0, r4
    ccb0:	f7f5 f828 	bl	1d04 <raw_string_print>
	if (!raw_string) {
    ccb4:	b9cd      	cbnz	r5, ccea <log_output_msg_process+0x72>
	log_output_flush(output);
    ccb6:	4630      	mov	r0, r6
    ccb8:	f7ff ffb5 	bl	cc26 <log_output_flush>
}
    ccbc:	b005      	add	sp, #20
    ccbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
			0 : prefix_print(output, flags, std_msg, timestamp,
    ccc0:	9002      	str	r0, [sp, #8]
    ccc2:	f8cd c004 	str.w	ip, [sp, #4]
    ccc6:	9500      	str	r5, [sp, #0]
    ccc8:	4639      	mov	r1, r7
    ccca:	4630      	mov	r0, r6
    cccc:	f7f4 ffb4 	bl	1c38 <prefix_print>
    ccd0:	4602      	mov	r2, r0
    ccd2:	e7e6      	b.n	cca2 <log_output_msg_process+0x2a>
		std_print(msg, output);
    ccd4:	4631      	mov	r1, r6
    ccd6:	4620      	mov	r0, r4
    ccd8:	f7ff fe4a 	bl	c970 <std_print>
    ccdc:	e7ea      	b.n	ccb4 <log_output_msg_process+0x3c>
		hexdump_print(msg, output, prefix_offset, flags);
    ccde:	463b      	mov	r3, r7
    cce0:	4631      	mov	r1, r6
    cce2:	4620      	mov	r0, r4
    cce4:	f7f4 ffe4 	bl	1cb0 <hexdump_print>
    cce8:	e7e4      	b.n	ccb4 <log_output_msg_process+0x3c>
		postfix_print(output, flags, level);
    ccea:	462a      	mov	r2, r5
    ccec:	4639      	mov	r1, r7
    ccee:	4630      	mov	r0, r6
    ccf0:	f7ff fe32 	bl	c958 <postfix_print>
    ccf4:	e7df      	b.n	ccb6 <log_output_msg_process+0x3e>

0000ccf6 <usb_vbus_set>:
}
    ccf6:	2000      	movs	r0, #0
    ccf8:	4770      	bx	lr

0000ccfa <usb_eps_reconfigure>:
{
    ccfa:	b508      	push	{r3, lr}
	if (cur_alt_setting != alt_setting) {
    ccfc:	4291      	cmp	r1, r2
    ccfe:	d002      	beq.n	cd06 <usb_eps_reconfigure+0xc>
		ret = reset_endpoint(ep_desc);
    cd00:	f7f5 fbea 	bl	24d8 <reset_endpoint>
}
    cd04:	bd08      	pop	{r3, pc}
		ret = set_endpoint(ep_desc);
    cd06:	f7f5 faef 	bl	22e8 <set_endpoint>
    cd0a:	e7fb      	b.n	cd04 <usb_eps_reconfigure+0xa>

0000cd0c <usb_handle_std_interface_req>:
{
    cd0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cd0e:	4604      	mov	r4, r0
    cd10:	460e      	mov	r6, r1
    cd12:	4615      	mov	r5, r2
	uint8_t *data = *data_buf;
    cd14:	6817      	ldr	r7, [r2, #0]
	if (!is_device_configured() ||
    cd16:	f7f5 f9e1 	bl	20dc <is_device_configured>
    cd1a:	b900      	cbnz	r0, cd1e <usb_handle_std_interface_req+0x12>
}
    cd1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    cd1e:	7920      	ldrb	r0, [r4, #4]
    cd20:	f7f5 f9e6 	bl	20f0 <is_interface_valid>
	if (!is_device_configured() ||
    cd24:	2800      	cmp	r0, #0
    cd26:	d0f9      	beq.n	cd1c <usb_handle_std_interface_req+0x10>
	if (usb_reqtype_is_to_host(setup)) {
    cd28:	f994 3000 	ldrsb.w	r3, [r4]
    cd2c:	2b00      	cmp	r3, #0
    cd2e:	db04      	blt.n	cd3a <usb_handle_std_interface_req+0x2e>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
    cd30:	7863      	ldrb	r3, [r4, #1]
    cd32:	2b0b      	cmp	r3, #11
    cd34:	d013      	beq.n	cd5e <usb_handle_std_interface_req+0x52>
	return false;
    cd36:	2000      	movs	r0, #0
    cd38:	e7f0      	b.n	cd1c <usb_handle_std_interface_req+0x10>
		switch (setup->bRequest) {
    cd3a:	7863      	ldrb	r3, [r4, #1]
    cd3c:	b11b      	cbz	r3, cd46 <usb_handle_std_interface_req+0x3a>
    cd3e:	2b0a      	cmp	r3, #10
    cd40:	d007      	beq.n	cd52 <usb_handle_std_interface_req+0x46>
    cd42:	2000      	movs	r0, #0
    cd44:	e7ea      	b.n	cd1c <usb_handle_std_interface_req+0x10>
			data[0] = 0U;
    cd46:	2300      	movs	r3, #0
    cd48:	703b      	strb	r3, [r7, #0]
			data[1] = 0U;
    cd4a:	707b      	strb	r3, [r7, #1]
			*len = 2;
    cd4c:	2302      	movs	r3, #2
    cd4e:	6033      	str	r3, [r6, #0]
			return true;
    cd50:	e7e4      	b.n	cd1c <usb_handle_std_interface_req+0x10>
			return usb_get_interface(setup, len, data_buf);
    cd52:	462a      	mov	r2, r5
    cd54:	4631      	mov	r1, r6
    cd56:	4620      	mov	r0, r4
    cd58:	f7f5 f9a2 	bl	20a0 <usb_get_interface>
    cd5c:	e7de      	b.n	cd1c <usb_handle_std_interface_req+0x10>
			return usb_set_interface(setup);
    cd5e:	4620      	mov	r0, r4
    cd60:	f7f5 fbe4 	bl	252c <usb_set_interface>
    cd64:	e7da      	b.n	cd1c <usb_handle_std_interface_req+0x10>

0000cd66 <disable_interface_ep>:
{
    cd66:	b508      	push	{r3, lr}
	return usb_dc_ep_disable(ep_data->ep_addr);
    cd68:	7900      	ldrb	r0, [r0, #4]
    cd6a:	f7f8 ff5d 	bl	5c28 <usb_dc_ep_disable>
}
    cd6e:	bd08      	pop	{r3, pc}

0000cd70 <usb_get_status_endpoint>:
{
    cd70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cd72:	460e      	mov	r6, r1
	uint8_t ep = setup->wIndex;
    cd74:	7904      	ldrb	r4, [r0, #4]
	uint8_t *data = *data_buf;
    cd76:	6817      	ldr	r7, [r2, #0]
	if (!is_ep_valid(ep)) {
    cd78:	4620      	mov	r0, r4
    cd7a:	f7f5 f9cb 	bl	2114 <is_ep_valid>
    cd7e:	4605      	mov	r5, r0
    cd80:	b130      	cbz	r0, cd90 <usb_get_status_endpoint+0x20>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    cd82:	f034 0380 	bics.w	r3, r4, #128	; 0x80
    cd86:	d005      	beq.n	cd94 <usb_get_status_endpoint+0x24>
    cd88:	f7f5 f9a8 	bl	20dc <is_device_configured>
    cd8c:	b910      	cbnz	r0, cd94 <usb_get_status_endpoint+0x24>
	return false;
    cd8e:	4605      	mov	r5, r0
}
    cd90:	4628      	mov	r0, r5
    cd92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_dc_ep_is_stalled(ep, &data[0]);
    cd94:	4639      	mov	r1, r7
    cd96:	4620      	mov	r0, r4
    cd98:	f7f8 fef4 	bl	5b84 <usb_dc_ep_is_stalled>
		data[1] = 0U;
    cd9c:	2300      	movs	r3, #0
    cd9e:	707b      	strb	r3, [r7, #1]
		*len = 2;
    cda0:	2302      	movs	r3, #2
    cda2:	6033      	str	r3, [r6, #0]
		return true;
    cda4:	e7f4      	b.n	cd90 <usb_get_status_endpoint+0x20>

0000cda6 <usb_handle_std_endpoint_req>:
{
    cda6:	b508      	push	{r3, lr}
	if (usb_reqtype_is_to_host(setup)) {
    cda8:	f990 3000 	ldrsb.w	r3, [r0]
    cdac:	2b00      	cmp	r3, #0
    cdae:	db06      	blt.n	cdbe <usb_handle_std_endpoint_req+0x18>
		switch (setup->bRequest) {
    cdb0:	7843      	ldrb	r3, [r0, #1]
    cdb2:	2b01      	cmp	r3, #1
    cdb4:	d00a      	beq.n	cdcc <usb_handle_std_endpoint_req+0x26>
    cdb6:	2b03      	cmp	r3, #3
    cdb8:	d010      	beq.n	cddc <usb_handle_std_endpoint_req+0x36>
    cdba:	2000      	movs	r0, #0
    cdbc:	e002      	b.n	cdc4 <usb_handle_std_endpoint_req+0x1e>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
    cdbe:	7843      	ldrb	r3, [r0, #1]
    cdc0:	b10b      	cbz	r3, cdc6 <usb_handle_std_endpoint_req+0x20>
	return false;
    cdc2:	2000      	movs	r0, #0
}
    cdc4:	bd08      	pop	{r3, pc}
			return usb_get_status_endpoint(setup, len, data_buf);
    cdc6:	f7ff ffd3 	bl	cd70 <usb_get_status_endpoint>
    cdca:	e7fb      	b.n	cdc4 <usb_handle_std_endpoint_req+0x1e>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    cdcc:	8843      	ldrh	r3, [r0, #2]
    cdce:	b10b      	cbz	r3, cdd4 <usb_handle_std_endpoint_req+0x2e>
	return false;
    cdd0:	2000      	movs	r0, #0
    cdd2:	e7f7      	b.n	cdc4 <usb_handle_std_endpoint_req+0x1e>
				return usb_halt_endpoint_req(setup, false);
    cdd4:	2100      	movs	r1, #0
    cdd6:	f7f5 fa57 	bl	2288 <usb_halt_endpoint_req>
    cdda:	e7f3      	b.n	cdc4 <usb_handle_std_endpoint_req+0x1e>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    cddc:	8843      	ldrh	r3, [r0, #2]
    cdde:	b10b      	cbz	r3, cde4 <usb_handle_std_endpoint_req+0x3e>
	return false;
    cde0:	2000      	movs	r0, #0
    cde2:	e7ef      	b.n	cdc4 <usb_handle_std_endpoint_req+0x1e>
				return usb_halt_endpoint_req(setup, true);
    cde4:	2101      	movs	r1, #1
    cde6:	f7f5 fa4f 	bl	2288 <usb_halt_endpoint_req>
    cdea:	e7eb      	b.n	cdc4 <usb_handle_std_endpoint_req+0x1e>

0000cdec <usb_write>:
{
    cdec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cdf0:	4681      	mov	r9, r0
    cdf2:	4688      	mov	r8, r1
    cdf4:	4617      	mov	r7, r2
    cdf6:	461e      	mov	r6, r3
	int tries = CONFIG_USB_NUMOF_EP_WRITE_RETRIES;
    cdf8:	2503      	movs	r5, #3
    cdfa:	e000      	b.n	cdfe <usb_write+0x12>
	} while (ret == -EAGAIN && tries--);
    cdfc:	461d      	mov	r5, r3
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    cdfe:	4633      	mov	r3, r6
    ce00:	463a      	mov	r2, r7
    ce02:	4641      	mov	r1, r8
    ce04:	4648      	mov	r0, r9
    ce06:	f7f8 ff39 	bl	5c7c <usb_dc_ep_write>
    ce0a:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
    ce0c:	f110 0f0b 	cmn.w	r0, #11
    ce10:	d008      	beq.n	ce24 <usb_write+0x38>
	} while (ret == -EAGAIN && tries--);
    ce12:	f114 0f0b 	cmn.w	r4, #11
    ce16:	d102      	bne.n	ce1e <usb_write+0x32>
    ce18:	1e6b      	subs	r3, r5, #1
    ce1a:	2d00      	cmp	r5, #0
    ce1c:	d1ee      	bne.n	cdfc <usb_write+0x10>
}
    ce1e:	4620      	mov	r0, r4
    ce20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_impl_k_yield();
    ce24:	f7fe f966 	bl	b0f4 <z_impl_k_yield>
}
    ce28:	e7f3      	b.n	ce12 <usb_write+0x26>

0000ce2a <ascii7_to_utf16le>:
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    ce2a:	f810 2b02 	ldrb.w	r2, [r0], #2
    ce2e:	1ed3      	subs	r3, r2, #3
	int ascii_idx_max = USB_BSTRING_ASCII_IDX_MAX(str_descr->bLength);
    ce30:	0852      	lsrs	r2, r2, #1
    ce32:	3a02      	subs	r2, #2
	for (int i = idx_max; i >= 0; i -= 2) {
    ce34:	2b00      	cmp	r3, #0
    ce36:	db0b      	blt.n	ce50 <ascii7_to_utf16le+0x26>
{
    ce38:	b410      	push	{r4}
		buf[i] = 0U;
    ce3a:	2100      	movs	r1, #0
    ce3c:	54c1      	strb	r1, [r0, r3]
		buf[i - 1] = buf[ascii_idx_max--];
    ce3e:	1e59      	subs	r1, r3, #1
    ce40:	5c84      	ldrb	r4, [r0, r2]
    ce42:	5444      	strb	r4, [r0, r1]
	for (int i = idx_max; i >= 0; i -= 2) {
    ce44:	3b02      	subs	r3, #2
		buf[i - 1] = buf[ascii_idx_max--];
    ce46:	3a01      	subs	r2, #1
	for (int i = idx_max; i >= 0; i -= 2) {
    ce48:	2b00      	cmp	r3, #0
    ce4a:	daf6      	bge.n	ce3a <ascii7_to_utf16le+0x10>
}
    ce4c:	bc10      	pop	{r4}
    ce4e:	4770      	bx	lr
    ce50:	4770      	bx	lr

0000ce52 <usb_validate_ep_cfg_data>:
{
    ce52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ce56:	b083      	sub	sp, #12
    ce58:	4605      	mov	r5, r0
    ce5a:	4689      	mov	r9, r1
    ce5c:	4690      	mov	r8, r2
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    ce5e:	2700      	movs	r7, #0
    ce60:	e04a      	b.n	cef8 <usb_validate_ep_cfg_data+0xa6>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    ce62:	f8d8 2000 	ldr.w	r2, [r8]
    ce66:	f104 0110 	add.w	r1, r4, #16
    ce6a:	2301      	movs	r3, #1
    ce6c:	408b      	lsls	r3, r1
    ce6e:	421a      	tst	r2, r3
    ce70:	d108      	bne.n	ce84 <usb_validate_ep_cfg_data+0x32>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    ce72:	f064 037f 	orn	r3, r4, #127	; 0x7f
    ce76:	f88d 3000 	strb.w	r3, [sp]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    ce7a:	4668      	mov	r0, sp
    ce7c:	f7f8 fd94 	bl	59a8 <usb_dc_ep_check_cap>
    ce80:	4603      	mov	r3, r0
    ce82:	b1d0      	cbz	r0, ceba <usb_validate_ep_cfg_data+0x68>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    ce84:	3401      	adds	r4, #1
    ce86:	b2e4      	uxtb	r4, r4
    ce88:	2c0f      	cmp	r4, #15
    ce8a:	d834      	bhi.n	cef6 <usb_validate_ep_cfg_data+0xa4>
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    ce8c:	78eb      	ldrb	r3, [r5, #3]
    ce8e:	f003 0303 	and.w	r3, r3, #3
    ce92:	f88d 3004 	strb.w	r3, [sp, #4]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    ce96:	88ab      	ldrh	r3, [r5, #4]
    ce98:	f8ad 3002 	strh.w	r3, [sp, #2]
			ep_cfg.ep_addr = ep_descr->bEndpointAddress;
    ce9c:	78ab      	ldrb	r3, [r5, #2]
    ce9e:	f88d 3000 	strb.w	r3, [sp]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    cea2:	f013 0f80 	tst.w	r3, #128	; 0x80
    cea6:	d1dc      	bne.n	ce62 <usb_validate_ep_cfg_data+0x10>
				if ((*requested_ep & (1U << (idx)))) {
    cea8:	f8d8 2000 	ldr.w	r2, [r8]
    ceac:	2301      	movs	r3, #1
    ceae:	40a3      	lsls	r3, r4
    ceb0:	421a      	tst	r2, r3
    ceb2:	d1e7      	bne.n	ce84 <usb_validate_ep_cfg_data+0x32>
				ep_cfg.ep_addr = idx;
    ceb4:	f88d 4000 	strb.w	r4, [sp]
    ceb8:	e7df      	b.n	ce7a <usb_validate_ep_cfg_data+0x28>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    ceba:	f89d 2000 	ldrb.w	r2, [sp]
    cebe:	70aa      	strb	r2, [r5, #2]
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    cec0:	7132      	strb	r2, [r6, #4]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    cec2:	f012 0f80 	tst.w	r2, #128	; 0x80
    cec6:	d10b      	bne.n	cee0 <usb_validate_ep_cfg_data+0x8e>
					*requested_ep |= (1U << idx);
    cec8:	2201      	movs	r2, #1
    ceca:	fa02 f404 	lsl.w	r4, r2, r4
    cece:	f8d8 2000 	ldr.w	r2, [r8]
    ced2:	4322      	orrs	r2, r4
    ced4:	f8c8 2000 	str.w	r2, [r8]
}
    ced8:	4618      	mov	r0, r3
    ceda:	b003      	add	sp, #12
    cedc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					*requested_ep |= (1U << (idx + 16U));
    cee0:	f104 0110 	add.w	r1, r4, #16
    cee4:	2201      	movs	r2, #1
    cee6:	fa02 f101 	lsl.w	r1, r2, r1
    ceea:	f8d8 2000 	ldr.w	r2, [r8]
    ceee:	430a      	orrs	r2, r1
    cef0:	f8c8 2000 	str.w	r2, [r8]
    cef4:	e7f0      	b.n	ced8 <usb_validate_ep_cfg_data+0x86>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    cef6:	3701      	adds	r7, #1
    cef8:	f899 301c 	ldrb.w	r3, [r9, #28]
    cefc:	429f      	cmp	r7, r3
    cefe:	d209      	bcs.n	cf14 <usb_validate_ep_cfg_data+0xc2>
		struct usb_ep_cfg_data *ep_data = cfg_data->endpoint;
    cf00:	f8d9 6020 	ldr.w	r6, [r9, #32]
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    cf04:	78aa      	ldrb	r2, [r5, #2]
    cf06:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
    cf0a:	7933      	ldrb	r3, [r6, #4]
    cf0c:	429a      	cmp	r2, r3
    cf0e:	d1f2      	bne.n	cef6 <usb_validate_ep_cfg_data+0xa4>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    cf10:	2401      	movs	r4, #1
    cf12:	e7b9      	b.n	ce88 <usb_validate_ep_cfg_data+0x36>
	return -1;
    cf14:	f04f 33ff 	mov.w	r3, #4294967295
    cf18:	e7de      	b.n	ced8 <usb_validate_ep_cfg_data+0x86>

0000cf1a <usb_get_dev_data_by_cfg>:
	return list->head;
    cf1a:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    cf1c:	b110      	cbz	r0, cf24 <usb_get_dev_data_by_cfg+0xa>
    cf1e:	3804      	subs	r0, #4
    cf20:	e000      	b.n	cf24 <usb_get_dev_data_by_cfg+0xa>
    cf22:	3804      	subs	r0, #4
    cf24:	b140      	cbz	r0, cf38 <usb_get_dev_data_by_cfg+0x1e>
		const struct device *dev = dev_data->dev;
    cf26:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg_cur = dev->config;
    cf28:	685b      	ldr	r3, [r3, #4]

		if (cfg_cur == cfg) {
    cf2a:	428b      	cmp	r3, r1
    cf2c:	d004      	beq.n	cf38 <usb_get_dev_data_by_cfg+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    cf2e:	1d03      	adds	r3, r0, #4
    cf30:	d003      	beq.n	cf3a <usb_get_dev_data_by_cfg+0x20>
	return node->next;
    cf32:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    cf34:	2800      	cmp	r0, #0
    cf36:	d1f4      	bne.n	cf22 <usb_get_dev_data_by_cfg+0x8>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
    cf38:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    cf3a:	4618      	mov	r0, r3
    cf3c:	e7f2      	b.n	cf24 <usb_get_dev_data_by_cfg+0xa>

0000cf3e <usb_get_dev_data_by_iface>:
	return list->head;
    cf3e:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    cf40:	b110      	cbz	r0, cf48 <usb_get_dev_data_by_iface+0xa>
    cf42:	3804      	subs	r0, #4
    cf44:	e000      	b.n	cf48 <usb_get_dev_data_by_iface+0xa>
    cf46:	3804      	subs	r0, #4
    cf48:	b150      	cbz	r0, cf60 <usb_get_dev_data_by_iface+0x22>
		const struct device *dev = dev_data->dev;
    cf4a:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg = dev->config;
    cf4c:	685b      	ldr	r3, [r3, #4]
		const struct usb_if_descriptor *if_desc =
    cf4e:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
    cf50:	789b      	ldrb	r3, [r3, #2]
    cf52:	428b      	cmp	r3, r1
    cf54:	d004      	beq.n	cf60 <usb_get_dev_data_by_iface+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
    cf56:	1d03      	adds	r3, r0, #4
    cf58:	d003      	beq.n	cf62 <usb_get_dev_data_by_iface+0x24>
	return node->next;
    cf5a:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    cf5c:	2800      	cmp	r0, #0
    cf5e:	d1f2      	bne.n	cf46 <usb_get_dev_data_by_iface+0x8>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
    cf60:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    cf62:	4618      	mov	r0, r3
    cf64:	e7f0      	b.n	cf48 <usb_get_dev_data_by_iface+0xa>

0000cf66 <usb_get_dev_data_by_ep>:
	return list->head;
    cf66:	6800      	ldr	r0, [r0, #0]

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    cf68:	b100      	cbz	r0, cf6c <usb_get_dev_data_by_ep+0x6>
    cf6a:	3804      	subs	r0, #4
    cf6c:	b1d0      	cbz	r0, cfa4 <usb_get_dev_data_by_ep+0x3e>
{
    cf6e:	b430      	push	{r4, r5}
    cf70:	e005      	b.n	cf7e <usb_get_dev_data_by_ep+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
    cf72:	1d03      	adds	r3, r0, #4
    cf74:	d012      	beq.n	cf9c <usb_get_dev_data_by_ep+0x36>
	return node->next;
    cf76:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    cf78:	b190      	cbz	r0, cfa0 <usb_get_dev_data_by_ep+0x3a>
    cf7a:	3804      	subs	r0, #4
    cf7c:	b180      	cbz	r0, cfa0 <usb_get_dev_data_by_ep+0x3a>
		const struct device *dev = dev_data->dev;
    cf7e:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg = dev->config;
    cf80:	685c      	ldr	r4, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
    cf82:	6a25      	ldr	r5, [r4, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    cf84:	2300      	movs	r3, #0
    cf86:	7f22      	ldrb	r2, [r4, #28]
    cf88:	429a      	cmp	r2, r3
    cf8a:	d9f2      	bls.n	cf72 <usb_get_dev_data_by_ep+0xc>
			if (ep_data[i].ep_addr == ep) {
    cf8c:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    cf90:	7912      	ldrb	r2, [r2, #4]
    cf92:	428a      	cmp	r2, r1
    cf94:	d004      	beq.n	cfa0 <usb_get_dev_data_by_ep+0x3a>
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    cf96:	3301      	adds	r3, #1
    cf98:	b2db      	uxtb	r3, r3
    cf9a:	e7f4      	b.n	cf86 <usb_get_dev_data_by_ep+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    cf9c:	4618      	mov	r0, r3
    cf9e:	e7ed      	b.n	cf7c <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
    cfa0:	bc30      	pop	{r4, r5}
    cfa2:	4770      	bx	lr
    cfa4:	4770      	bx	lr

0000cfa6 <usb_transfer_is_busy>:
{
    cfa6:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    cfa8:	f7f5 fe78 	bl	2c9c <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
    cfac:	b128      	cbz	r0, cfba <usb_transfer_is_busy+0x14>
    cfae:	6843      	ldr	r3, [r0, #4]
    cfb0:	f113 0f10 	cmn.w	r3, #16
    cfb4:	d003      	beq.n	cfbe <usb_transfer_is_busy+0x18>
	return false;
    cfb6:	2000      	movs	r0, #0
}
    cfb8:	bd08      	pop	{r3, pc}
	return false;
    cfba:	2000      	movs	r0, #0
    cfbc:	e7fc      	b.n	cfb8 <usb_transfer_is_busy+0x12>
		return true;
    cfbe:	2001      	movs	r0, #1
    cfc0:	e7fa      	b.n	cfb8 <usb_transfer_is_busy+0x12>

0000cfc2 <cdc_interface_config>:
	desc->if0.bInterfaceNumber = bInterfaceNumber;
    cfc2:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
    cfc4:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    cfc6:	1c4b      	adds	r3, r1, #1
    cfc8:	b2db      	uxtb	r3, r3
    cfca:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
    cfce:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
    cfd0:	f800 1c06 	strb.w	r1, [r0, #-6]
}
    cfd4:	4770      	bx	lr

0000cfd6 <cdc_acm_irq_callback_work_handler>:
{
    cfd6:	b508      	push	{r3, lr}
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
    cfd8:	f850 3c08 	ldr.w	r3, [r0, #-8]
    cfdc:	f850 1c04 	ldr.w	r1, [r0, #-4]
    cfe0:	6f80      	ldr	r0, [r0, #120]	; 0x78
    cfe2:	4798      	blx	r3
}
    cfe4:	bd08      	pop	{r3, pc}

0000cfe6 <cdc_acm_irq_tx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    cfe6:	6903      	ldr	r3, [r0, #16]
	dev_data->tx_irq_ena = false;
    cfe8:	2200      	movs	r2, #0
    cfea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
    cfee:	4770      	bx	lr

0000cff0 <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    cff0:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
    cff2:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    cff6:	b122      	cbz	r2, d002 <cdc_acm_irq_tx_ready+0x12>
    cff8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    cffc:	b91b      	cbnz	r3, d006 <cdc_acm_irq_tx_ready+0x16>
	return 0;
    cffe:	2000      	movs	r0, #0
    d000:	4770      	bx	lr
    d002:	2000      	movs	r0, #0
    d004:	4770      	bx	lr
		return 1;
    d006:	2001      	movs	r0, #1
}
    d008:	4770      	bx	lr

0000d00a <cdc_acm_irq_rx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    d00a:	6903      	ldr	r3, [r0, #16]
	dev_data->rx_irq_ena = false;
    d00c:	2200      	movs	r2, #0
    d00e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
    d012:	4770      	bx	lr

0000d014 <cdc_acm_irq_rx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    d014:	6903      	ldr	r3, [r0, #16]
	if (dev_data->rx_ready) {
    d016:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    d01a:	b90b      	cbnz	r3, d020 <cdc_acm_irq_rx_ready+0xc>
	return 0;
    d01c:	2000      	movs	r0, #0
    d01e:	4770      	bx	lr
		return 1;
    d020:	2001      	movs	r0, #1
}
    d022:	4770      	bx	lr

0000d024 <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    d024:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
    d026:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    d02a:	b112      	cbz	r2, d032 <cdc_acm_irq_is_pending+0xe>
    d02c:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    d030:	b93a      	cbnz	r2, d042 <cdc_acm_irq_is_pending+0x1e>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
    d032:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    d036:	b132      	cbz	r2, d046 <cdc_acm_irq_is_pending+0x22>
    d038:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
    d03c:	b92b      	cbnz	r3, d04a <cdc_acm_irq_is_pending+0x26>
		return 0;
    d03e:	2000      	movs	r0, #0
    d040:	4770      	bx	lr
		return 1;
    d042:	2001      	movs	r0, #1
    d044:	4770      	bx	lr
		return 0;
    d046:	2000      	movs	r0, #0
    d048:	4770      	bx	lr
		return 1;
    d04a:	2001      	movs	r0, #1
}
    d04c:	4770      	bx	lr

0000d04e <cdc_acm_irq_update>:
}
    d04e:	2001      	movs	r0, #1
    d050:	4770      	bx	lr

0000d052 <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    d052:	6903      	ldr	r3, [r0, #16]
	dev_data->cb = cb;
    d054:	6019      	str	r1, [r3, #0]
	dev_data->cb_data = cb_data;
    d056:	605a      	str	r2, [r3, #4]
}
    d058:	4770      	bx	lr

0000d05a <cdc_acm_baudrate_set>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    d05a:	6903      	ldr	r3, [r0, #16]
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
    d05c:	6759      	str	r1, [r3, #116]	; 0x74
}
    d05e:	4770      	bx	lr

0000d060 <cdc_acm_line_ctrl_get>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    d060:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
    d062:	2902      	cmp	r1, #2
    d064:	d00a      	beq.n	d07c <cdc_acm_line_ctrl_get+0x1c>
    d066:	2904      	cmp	r1, #4
    d068:	d00f      	beq.n	d08a <cdc_acm_line_ctrl_get+0x2a>
    d06a:	2901      	cmp	r1, #1
    d06c:	d002      	beq.n	d074 <cdc_acm_line_ctrl_get+0x14>
    d06e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    d072:	4770      	bx	lr
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
    d074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    d076:	6013      	str	r3, [r2, #0]
		return 0;
    d078:	2000      	movs	r0, #0
    d07a:	4770      	bx	lr
		*val = (dev_data->line_state &
    d07c:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
    d080:	f3c3 0340 	ubfx	r3, r3, #1, #1
		*val = (dev_data->line_state &
    d084:	6013      	str	r3, [r2, #0]
		return 0;
    d086:	2000      	movs	r0, #0
    d088:	4770      	bx	lr
		*val = (dev_data->line_state &
    d08a:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
    d08e:	f003 0301 	and.w	r3, r3, #1
		*val = (dev_data->line_state &
    d092:	6013      	str	r3, [r2, #0]
		return 0;
    d094:	2000      	movs	r0, #0
    d096:	4770      	bx	lr

0000d098 <cdc_acm_line_ctrl_set>:
{
    d098:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    d09a:	6904      	ldr	r4, [r0, #16]
	switch (ctrl) {
    d09c:	2940      	cmp	r1, #64	; 0x40
    d09e:	f000 8081 	beq.w	d1a4 <cdc_acm_line_ctrl_set+0x10c>
    d0a2:	d81b      	bhi.n	d0dc <cdc_acm_line_ctrl_set+0x44>
    d0a4:	2920      	cmp	r1, #32
    d0a6:	f200 809f 	bhi.w	d1e8 <cdc_acm_line_ctrl_set+0x150>
    d0aa:	2900      	cmp	r1, #0
    d0ac:	f000 809f 	beq.w	d1ee <cdc_acm_line_ctrl_set+0x156>
    d0b0:	1e4b      	subs	r3, r1, #1
    d0b2:	2b1f      	cmp	r3, #31
    d0b4:	f200 809e 	bhi.w	d1f4 <cdc_acm_line_ctrl_set+0x15c>
    d0b8:	e8df f003 	tbb	[pc, r3]
    d0bc:	9c9c9c3d 	.word	0x9c9c9c3d
    d0c0:	429c9c9c 	.word	0x429c9c9c
    d0c4:	9c9c9c9c 	.word	0x9c9c9c9c
    d0c8:	529c9c9c 	.word	0x529c9c9c
    d0cc:	9c9c9c9c 	.word	0x9c9c9c9c
    d0d0:	9c9c9c9c 	.word	0x9c9c9c9c
    d0d4:	9c9c9c9c 	.word	0x9c9c9c9c
    d0d8:	639c9c9c 	.word	0x639c9c9c
    d0dc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    d0e0:	d071      	beq.n	d1c6 <cdc_acm_line_ctrl_set+0x12e>
    d0e2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    d0e6:	d110      	bne.n	d10a <cdc_acm_line_ctrl_set+0x72>
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
    d0e8:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    d0ec:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
    d0f0:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
    d0f4:	b11a      	cbz	r2, d0fe <cdc_acm_line_ctrl_set+0x66>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
    d0f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    d0fa:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    d0fe:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
    d102:	f7f6 fa09 	bl	3518 <cdc_acm_send_notification>
		return 0;
    d106:	2000      	movs	r0, #0
    d108:	e019      	b.n	d13e <cdc_acm_line_ctrl_set+0xa6>
	switch (ctrl) {
    d10a:	2980      	cmp	r1, #128	; 0x80
    d10c:	d110      	bne.n	d130 <cdc_acm_line_ctrl_set+0x98>
		dev_data->serial_state &= ~SERIAL_STATE_FRAMING;
    d10e:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    d112:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    d116:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
    d11a:	b11a      	cbz	r2, d124 <cdc_acm_line_ctrl_set+0x8c>
			dev_data->serial_state |= SERIAL_STATE_FRAMING;
    d11c:	f043 0310 	orr.w	r3, r3, #16
    d120:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    d124:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
    d128:	f7f6 f9f6 	bl	3518 <cdc_acm_send_notification>
		return 0;
    d12c:	2000      	movs	r0, #0
    d12e:	e006      	b.n	d13e <cdc_acm_line_ctrl_set+0xa6>
	switch (ctrl) {
    d130:	f06f 0012 	mvn.w	r0, #18
    d134:	e003      	b.n	d13e <cdc_acm_line_ctrl_set+0xa6>
		cdc_acm_baudrate_set(dev, val);
    d136:	4611      	mov	r1, r2
    d138:	f7ff ff8f 	bl	d05a <cdc_acm_baudrate_set>
		return 0;
    d13c:	2000      	movs	r0, #0
}
    d13e:	bd10      	pop	{r4, pc}
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
    d140:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    d144:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    d148:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
    d14c:	b11a      	cbz	r2, d156 <cdc_acm_line_ctrl_set+0xbe>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
    d14e:	f043 0301 	orr.w	r3, r3, #1
    d152:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
    d156:	2101      	movs	r1, #1
    d158:	f7f6 f9de 	bl	3518 <cdc_acm_send_notification>
		return 0;
    d15c:	2000      	movs	r0, #0
    d15e:	e7ee      	b.n	d13e <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
    d160:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    d164:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    d168:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
    d16c:	b11a      	cbz	r2, d176 <cdc_acm_line_ctrl_set+0xde>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
    d16e:	f043 0302 	orr.w	r3, r3, #2
    d172:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    d176:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
    d17a:	f7f6 f9cd 	bl	3518 <cdc_acm_send_notification>
		return 0;
    d17e:	2000      	movs	r0, #0
    d180:	e7dd      	b.n	d13e <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_BREAK;
    d182:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    d186:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    d18a:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
    d18e:	b11a      	cbz	r2, d198 <cdc_acm_line_ctrl_set+0x100>
			dev_data->serial_state |= SERIAL_STATE_BREAK;
    d190:	f043 0304 	orr.w	r3, r3, #4
    d194:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    d198:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
    d19c:	f7f6 f9bc 	bl	3518 <cdc_acm_send_notification>
		return 0;
    d1a0:	2000      	movs	r0, #0
    d1a2:	e7cc      	b.n	d13e <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_RING_SIGNAL;
    d1a4:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    d1a8:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    d1ac:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
    d1b0:	b11a      	cbz	r2, d1ba <cdc_acm_line_ctrl_set+0x122>
			dev_data->serial_state |= SERIAL_STATE_RING_SIGNAL;
    d1b2:	f043 0308 	orr.w	r3, r3, #8
    d1b6:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    d1ba:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
    d1be:	f7f6 f9ab 	bl	3518 <cdc_acm_send_notification>
		return 0;
    d1c2:	2000      	movs	r0, #0
    d1c4:	e7bb      	b.n	d13e <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_PARITY;
    d1c6:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    d1ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    d1ce:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
    d1d2:	b11a      	cbz	r2, d1dc <cdc_acm_line_ctrl_set+0x144>
			dev_data->serial_state |= SERIAL_STATE_PARITY;
    d1d4:	f043 0320 	orr.w	r3, r3, #32
    d1d8:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    d1dc:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
    d1e0:	f7f6 f99a 	bl	3518 <cdc_acm_send_notification>
		return 0;
    d1e4:	2000      	movs	r0, #0
    d1e6:	e7aa      	b.n	d13e <cdc_acm_line_ctrl_set+0xa6>
	switch (ctrl) {
    d1e8:	f06f 0012 	mvn.w	r0, #18
    d1ec:	e7a7      	b.n	d13e <cdc_acm_line_ctrl_set+0xa6>
    d1ee:	f06f 0012 	mvn.w	r0, #18
    d1f2:	e7a4      	b.n	d13e <cdc_acm_line_ctrl_set+0xa6>
    d1f4:	f06f 0012 	mvn.w	r0, #18
    d1f8:	e7a1      	b.n	d13e <cdc_acm_line_ctrl_set+0xa6>

0000d1fa <cdc_acm_fifo_read>:
{
    d1fa:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    d1fc:	6905      	ldr	r5, [r0, #16]
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
    d1fe:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    d200:	f7ff fa7a 	bl	c6f8 <ring_buf_get>
    d204:	4604      	mov	r4, r0
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
    d206:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    d208:	f7ff f9a8 	bl	c55c <ring_buf_is_empty>
    d20c:	b110      	cbz	r0, d214 <cdc_acm_fifo_read+0x1a>
		dev_data->rx_ready = false;
    d20e:	2300      	movs	r3, #0
    d210:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
}
    d214:	4620      	mov	r0, r4
    d216:	bd38      	pop	{r3, r4, r5, pc}

0000d218 <cdc_acm_poll_in>:
{
    d218:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
    d21a:	2201      	movs	r2, #1
    d21c:	f7ff ffed 	bl	d1fa <cdc_acm_fifo_read>
	return ret == 1 ? 0 : -1;
    d220:	2801      	cmp	r0, #1
    d222:	d101      	bne.n	d228 <cdc_acm_poll_in+0x10>
    d224:	2000      	movs	r0, #0
}
    d226:	bd08      	pop	{r3, pc}
	return ret == 1 ? 0 : -1;
    d228:	f04f 30ff 	mov.w	r0, #4294967295
    d22c:	e7fb      	b.n	d226 <cdc_acm_poll_in+0xe>

0000d22e <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    d22e:	2200      	movs	r2, #0
    d230:	6002      	str	r2, [r0, #0]
    d232:	6042      	str	r2, [r0, #4]
    d234:	6082      	str	r2, [r0, #8]
}
    d236:	4770      	bx	lr

0000d238 <abort_function>:
{
    d238:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    d23a:	2000      	movs	r0, #0
    d23c:	f7f3 ff5a 	bl	10f4 <sys_reboot>

0000d240 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    d240:	b538      	push	{r3, r4, r5, lr}
    d242:	4604      	mov	r4, r0

	if (esf != NULL) {
    d244:	460d      	mov	r5, r1
    d246:	b111      	cbz	r1, d24e <z_arm_fatal_error+0xe>
		esf_dump(esf);
    d248:	4608      	mov	r0, r1
    d24a:	f7f6 fc9b 	bl	3b84 <esf_dump>
	}
	z_fatal_error(reason, esf);
    d24e:	4629      	mov	r1, r5
    d250:	4620      	mov	r0, r4
    d252:	f7fc fee3 	bl	a01c <z_fatal_error>
}
    d256:	bd38      	pop	{r3, r4, r5, pc}

0000d258 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    d258:	b508      	push	{r3, lr}
    d25a:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    d25c:	6800      	ldr	r0, [r0, #0]
    d25e:	f7ff ffef 	bl	d240 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    d262:	bd08      	pop	{r3, pc}

0000d264 <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
    d264:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    d266:	2100      	movs	r1, #0
    d268:	2001      	movs	r0, #1
    d26a:	f7ff ffe9 	bl	d240 <z_arm_fatal_error>
}
    d26e:	bd08      	pop	{r3, pc}

0000d270 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    d270:	b508      	push	{r3, lr}
	handler();
    d272:	f7f6 fd1d 	bl	3cb0 <z_SysNmiOnReset>
	z_arm_int_exit();
    d276:	f7f6 fe19 	bl	3eac <z_arm_exc_exit>
}
    d27a:	bd08      	pop	{r3, pc}

0000d27c <memory_fault_recoverable>:
}
    d27c:	2000      	movs	r0, #0
    d27e:	4770      	bx	lr

0000d280 <fault_handle>:
{
    d280:	b508      	push	{r3, lr}
	*recoverable = false;
    d282:	2300      	movs	r3, #0
    d284:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    d286:	1ecb      	subs	r3, r1, #3
    d288:	2b09      	cmp	r3, #9
    d28a:	d81a      	bhi.n	d2c2 <fault_handle+0x42>
    d28c:	e8df f003 	tbb	[pc, r3]
    d290:	110d0905 	.word	0x110d0905
    d294:	19191919 	.word	0x19191919
    d298:	1419      	.short	0x1419
		reason = hard_fault(esf, recoverable);
    d29a:	4611      	mov	r1, r2
    d29c:	f7f7 f89a 	bl	43d4 <hard_fault>
}
    d2a0:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    d2a2:	2100      	movs	r1, #0
    d2a4:	f7f6 ffb4 	bl	4210 <mem_manage_fault>
		break;
    d2a8:	e7fa      	b.n	d2a0 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
    d2aa:	2100      	movs	r1, #0
    d2ac:	f7f6 fed8 	bl	4060 <bus_fault>
		break;
    d2b0:	e7f6      	b.n	d2a0 <fault_handle+0x20>
		reason = usage_fault(esf);
    d2b2:	f7f6 fe09 	bl	3ec8 <usage_fault>
		break;
    d2b6:	e7f3      	b.n	d2a0 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
    d2b8:	4611      	mov	r1, r2
    d2ba:	f7f6 feb7 	bl	402c <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    d2be:	2000      	movs	r0, #0
		break;
    d2c0:	e7ee      	b.n	d2a0 <fault_handle+0x20>
		reserved_exception(esf, fault);
    d2c2:	f7f7 f92d 	bl	4520 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    d2c6:	2000      	movs	r0, #0
	return reason;
    d2c8:	e7ea      	b.n	d2a0 <fault_handle+0x20>

0000d2ca <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    d2ca:	6843      	ldr	r3, [r0, #4]
    d2cc:	1e5a      	subs	r2, r3, #1
		&&
    d2ce:	4213      	tst	r3, r2
    d2d0:	d106      	bne.n	d2e0 <mpu_partition_is_valid+0x16>
		&&
    d2d2:	2b1f      	cmp	r3, #31
    d2d4:	d906      	bls.n	d2e4 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    d2d6:	6803      	ldr	r3, [r0, #0]
		&&
    d2d8:	421a      	tst	r2, r3
    d2da:	d005      	beq.n	d2e8 <mpu_partition_is_valid+0x1e>
    d2dc:	2000      	movs	r0, #0
    d2de:	4770      	bx	lr
    d2e0:	2000      	movs	r0, #0
    d2e2:	4770      	bx	lr
    d2e4:	2000      	movs	r0, #0
    d2e6:	4770      	bx	lr
    d2e8:	2001      	movs	r0, #1
}
    d2ea:	4770      	bx	lr

0000d2ec <mpu_configure_region>:
{
    d2ec:	b500      	push	{lr}
    d2ee:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    d2f0:	680b      	ldr	r3, [r1, #0]
    d2f2:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    d2f4:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    d2f6:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    d2f8:	2b20      	cmp	r3, #32
    d2fa:	d912      	bls.n	d322 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    d2fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    d300:	d811      	bhi.n	d326 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    d302:	3b01      	subs	r3, #1
    d304:	fab3 f383 	clz	r3, r3
    d308:	f1c3 031f 	rsb	r3, r3, #31
    d30c:	005b      	lsls	r3, r3, #1
    d30e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    d312:	4313      	orrs	r3, r2
    d314:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    d316:	a901      	add	r1, sp, #4
    d318:	f7f7 fa5e 	bl	47d8 <region_allocate_and_init>
}
    d31c:	b005      	add	sp, #20
    d31e:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    d322:	2308      	movs	r3, #8
    d324:	e7f5      	b.n	d312 <mpu_configure_region+0x26>
		return REGION_4G;
    d326:	233e      	movs	r3, #62	; 0x3e
    d328:	e7f3      	b.n	d312 <mpu_configure_region+0x26>

0000d32a <arm_core_mpu_configure_static_mpu_regions>:
{
    d32a:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    d32c:	f7f7 fab6 	bl	489c <mpu_configure_static_mpu_regions>
}
    d330:	bd08      	pop	{r3, pc}

0000d332 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    d332:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    d334:	f7f7 fabc 	bl	48b0 <mpu_configure_dynamic_mpu_regions>
}
    d338:	bd08      	pop	{r3, pc}

0000d33a <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    d33a:	4602      	mov	r2, r0
    d33c:	780b      	ldrb	r3, [r1, #0]
    d33e:	b11b      	cbz	r3, d348 <strcpy+0xe>
		*d = *s;
    d340:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
    d344:	3101      	adds	r1, #1
    d346:	e7f9      	b.n	d33c <strcpy+0x2>
	}

	*d = '\0';
    d348:	7013      	strb	r3, [r2, #0]

	return dest;
}
    d34a:	4770      	bx	lr

0000d34c <strncpy>:

char *strncpy(char *ZRESTRICT d, const char *ZRESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    d34c:	4603      	mov	r3, r0
    d34e:	b1a2      	cbz	r2, d37a <strncpy+0x2e>
{
    d350:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    d352:	780c      	ldrb	r4, [r1, #0]
    d354:	b12c      	cbz	r4, d362 <strncpy+0x16>
		*d = *s;
    d356:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    d35a:	3101      	adds	r1, #1
		d++;
		n--;
    d35c:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    d35e:	2a00      	cmp	r2, #0
    d360:	d1f7      	bne.n	d352 <strncpy+0x6>
	}

	while (n > 0) {
    d362:	b122      	cbz	r2, d36e <strncpy+0x22>
		*d = '\0';
    d364:	2100      	movs	r1, #0
    d366:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    d36a:	3a01      	subs	r2, #1
    d36c:	e7f9      	b.n	d362 <strncpy+0x16>
	}

	return dest;
}
    d36e:	bc10      	pop	{r4}
    d370:	4770      	bx	lr
		*d = '\0';
    d372:	2100      	movs	r1, #0
    d374:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    d378:	3a01      	subs	r2, #1
	while (n > 0) {
    d37a:	2a00      	cmp	r2, #0
    d37c:	d1f9      	bne.n	d372 <strncpy+0x26>
    d37e:	4770      	bx	lr

0000d380 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    d380:	4603      	mov	r3, r0
	size_t n = 0;
    d382:	2000      	movs	r0, #0

	while (*s != '\0') {
    d384:	781a      	ldrb	r2, [r3, #0]
    d386:	b112      	cbz	r2, d38e <strlen+0xe>
		s++;
    d388:	3301      	adds	r3, #1
		n++;
    d38a:	3001      	adds	r0, #1
    d38c:	e7fa      	b.n	d384 <strlen+0x4>
	}

	return n;
}
    d38e:	4770      	bx	lr

0000d390 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    d390:	4603      	mov	r3, r0
	size_t n = 0;
    d392:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    d394:	781a      	ldrb	r2, [r3, #0]
    d396:	b122      	cbz	r2, d3a2 <strnlen+0x12>
    d398:	4288      	cmp	r0, r1
    d39a:	d202      	bcs.n	d3a2 <strnlen+0x12>
		s++;
    d39c:	3301      	adds	r3, #1
		n++;
    d39e:	3001      	adds	r0, #1
    d3a0:	e7f8      	b.n	d394 <strnlen+0x4>
	}

	return n;
}
    d3a2:	4770      	bx	lr

0000d3a4 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    d3a4:	b410      	push	{r4}
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    d3a6:	ea80 0301 	eor.w	r3, r0, r1
    d3aa:	f013 0f03 	tst.w	r3, #3
    d3ae:	d001      	beq.n	d3b4 <memcpy+0x10>
	unsigned char *d_byte = (unsigned char *)d;
    d3b0:	4603      	mov	r3, r0
    d3b2:	e017      	b.n	d3e4 <memcpy+0x40>
    d3b4:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    d3b6:	f013 0f03 	tst.w	r3, #3
    d3ba:	d00b      	beq.n	d3d4 <memcpy+0x30>
			if (n == 0) {
    d3bc:	b1a2      	cbz	r2, d3e8 <memcpy+0x44>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    d3be:	f811 4b01 	ldrb.w	r4, [r1], #1
    d3c2:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    d3c6:	3a01      	subs	r2, #1
    d3c8:	e7f5      	b.n	d3b6 <memcpy+0x12>

		mem_word_t *d_word = (mem_word_t *)d_byte;
		const mem_word_t *s_word = (const mem_word_t *)s_byte;

		while (n >= sizeof(mem_word_t)) {
			*(d_word++) = *(s_word++);
    d3ca:	f851 4b04 	ldr.w	r4, [r1], #4
    d3ce:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    d3d2:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    d3d4:	2a03      	cmp	r2, #3
    d3d6:	d8f8      	bhi.n	d3ca <memcpy+0x26>
    d3d8:	e004      	b.n	d3e4 <memcpy+0x40>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    d3da:	f811 4b01 	ldrb.w	r4, [r1], #1
    d3de:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    d3e2:	3a01      	subs	r2, #1
	while (n > 0) {
    d3e4:	2a00      	cmp	r2, #0
    d3e6:	d1f8      	bne.n	d3da <memcpy+0x36>
	}

	return d;
}
    d3e8:	bc10      	pop	{r4}
    d3ea:	4770      	bx	lr

0000d3ec <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    d3ec:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    d3ee:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
    d3f0:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    d3f2:	f013 0f03 	tst.w	r3, #3
    d3f6:	d004      	beq.n	d402 <memset+0x16>
		if (n == 0) {
    d3f8:	b19a      	cbz	r2, d422 <memset+0x36>
			return buf;
		}
		*(d_byte++) = c_byte;
    d3fa:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    d3fe:	3a01      	subs	r2, #1
    d400:	e7f7      	b.n	d3f2 <memset+0x6>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    d402:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    d404:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    d408:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    d40c:	2a03      	cmp	r2, #3
    d40e:	d906      	bls.n	d41e <memset+0x32>
		*(d_word++) = c_word;
    d410:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    d414:	3a04      	subs	r2, #4
    d416:	e7f9      	b.n	d40c <memset+0x20>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    d418:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    d41c:	3a01      	subs	r2, #1
	while (n > 0) {
    d41e:	2a00      	cmp	r2, #0
    d420:	d1fa      	bne.n	d418 <memset+0x2c>
	}

	return buf;
}
    d422:	bc10      	pop	{r4}
    d424:	4770      	bx	lr

0000d426 <_stdout_hook_default>:
}
    d426:	f04f 30ff 	mov.w	r0, #4294967295
    d42a:	4770      	bx	lr

0000d42c <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    d42c:	b084      	sub	sp, #16
    d42e:	ab04      	add	r3, sp, #16
    d430:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    d434:	f89d 3004 	ldrb.w	r3, [sp, #4]
    d438:	2b06      	cmp	r3, #6
    d43a:	d001      	beq.n	d440 <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    d43c:	b004      	add	sp, #16
    d43e:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    d440:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d444:	2201      	movs	r2, #1
    d446:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    d44a:	f3bf 8f4f 	dsb	sy
        __WFE();
    d44e:	bf20      	wfe
    while (true)
    d450:	e7fd      	b.n	d44e <pm_power_state_set+0x22>

0000d452 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    d452:	b084      	sub	sp, #16
    d454:	ab04      	add	r3, sp, #16
    d456:	e903 0007 	stmdb	r3, {r0, r1, r2}
    d45a:	2300      	movs	r3, #0
    d45c:	f383 8811 	msr	BASEPRI, r3
    d460:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    d464:	b004      	add	sp, #16
    d466:	4770      	bx	lr

0000d468 <in_endpoint_ctx>:
{
    d468:	b508      	push	{r3, lr}
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    d46a:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    d46e:	f7f7 faab 	bl	49c8 <endpoint_ctx>
}
    d472:	bd08      	pop	{r3, pc}

0000d474 <out_endpoint_ctx>:
{
    d474:	b508      	push	{r3, lr}
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    d476:	f7f7 faa7 	bl	49c8 <endpoint_ctx>
}
    d47a:	bd08      	pop	{r3, pc}

0000d47c <ep_ctx_reset>:
{
    d47c:	b510      	push	{r4, lr}
    d47e:	4604      	mov	r4, r0
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    d480:	6903      	ldr	r3, [r0, #16]
    d482:	6143      	str	r3, [r0, #20]
	ep_ctx->buf.curr = ep_ctx->buf.data;
    d484:	6183      	str	r3, [r0, #24]
	ep_ctx->buf.len  = 0U;
    d486:	2300      	movs	r3, #0
    d488:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
    d48a:	7f83      	ldrb	r3, [r0, #30]
    d48c:	b933      	cbnz	r3, d49c <ep_ctx_reset+0x20>
	ep_ctx->read_complete = true;
    d48e:	2301      	movs	r3, #1
    d490:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
    d492:	2300      	movs	r3, #0
    d494:	7763      	strb	r3, [r4, #29]
	ep_ctx->write_in_progress = false;
    d496:	77a3      	strb	r3, [r4, #30]
	ep_ctx->trans_zlp = false;
    d498:	77e3      	strb	r3, [r4, #31]
}
    d49a:	bd10      	pop	{r4, pc}
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    d49c:	7a40      	ldrb	r0, [r0, #9]
    d49e:	f7fc fb73 	bl	9b88 <nrfx_usbd_ep_abort>
    d4a2:	e7f4      	b.n	d48e <ep_ctx_reset+0x12>

0000d4a4 <hfxo_stop>:
{
    d4a4:	b510      	push	{r4, lr}
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
    d4a6:	f100 0320 	add.w	r3, r0, #32
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    d4aa:	2200      	movs	r2, #0
    d4ac:	f3bf 8f5b 	dmb	ish
    d4b0:	e853 1f00 	ldrex	r1, [r3]
    d4b4:	2901      	cmp	r1, #1
    d4b6:	d103      	bne.n	d4c0 <hfxo_stop+0x1c>
    d4b8:	e843 2400 	strex	r4, r2, [r3]
    d4bc:	2c00      	cmp	r4, #0
    d4be:	d1f7      	bne.n	d4b0 <hfxo_stop+0xc>
    d4c0:	f3bf 8f5b 	dmb	ish
    d4c4:	d10d      	bne.n	d4e2 <hfxo_stop+0x3e>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
    d4c6:	69c4      	ldr	r4, [r0, #28]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
    d4c8:	f100 010c 	add.w	r1, r0, #12
    d4cc:	4620      	mov	r0, r4
    d4ce:	f7fe fd6e 	bl	bfae <onoff_cancel>

	if (rv == -EALREADY) {
    d4d2:	f110 0f78 	cmn.w	r0, #120	; 0x78
    d4d6:	d000      	beq.n	d4da <hfxo_stop+0x36>
}
    d4d8:	bd10      	pop	{r4, pc}
		rv = onoff_release(mgr);
    d4da:	4620      	mov	r0, r4
    d4dc:	f7fe fd41 	bl	bf62 <onoff_release>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
    d4e0:	e7fa      	b.n	d4d8 <hfxo_stop+0x34>
	return 0;
    d4e2:	2000      	movs	r0, #0
    d4e4:	e7f8      	b.n	d4d8 <hfxo_stop+0x34>

0000d4e6 <usbd_enable_endpoints>:
{
    d4e6:	b510      	push	{r4, lr}
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    d4e8:	2400      	movs	r4, #0
    d4ea:	e003      	b.n	d4f4 <usbd_enable_endpoints+0xe>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    d4ec:	7a40      	ldrb	r0, [r0, #9]
    d4ee:	f7fc f9b1 	bl	9854 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    d4f2:	3401      	adds	r4, #1
    d4f4:	2c07      	cmp	r4, #7
    d4f6:	dc06      	bgt.n	d506 <usbd_enable_endpoints+0x20>
		ep_ctx = in_endpoint_ctx(i);
    d4f8:	b2e0      	uxtb	r0, r4
    d4fa:	f7ff ffb5 	bl	d468 <in_endpoint_ctx>
		if (ep_ctx->cfg.en) {
    d4fe:	7a03      	ldrb	r3, [r0, #8]
    d500:	2b00      	cmp	r3, #0
    d502:	d0f6      	beq.n	d4f2 <usbd_enable_endpoints+0xc>
    d504:	e7f2      	b.n	d4ec <usbd_enable_endpoints+0x6>
		ep_ctx = in_endpoint_ctx(NRF_USBD_EPIN(8));
    d506:	2088      	movs	r0, #136	; 0x88
    d508:	f7ff ffae 	bl	d468 <in_endpoint_ctx>
		if (ep_ctx->cfg.en) {
    d50c:	7a03      	ldrb	r3, [r0, #8]
    d50e:	b90b      	cbnz	r3, d514 <usbd_enable_endpoints+0x2e>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    d510:	2400      	movs	r4, #0
    d512:	e007      	b.n	d524 <usbd_enable_endpoints+0x3e>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    d514:	7a40      	ldrb	r0, [r0, #9]
    d516:	f7fc f99d 	bl	9854 <nrfx_usbd_ep_enable>
    d51a:	e7f9      	b.n	d510 <usbd_enable_endpoints+0x2a>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    d51c:	7a40      	ldrb	r0, [r0, #9]
    d51e:	f7fc f999 	bl	9854 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
    d522:	3401      	adds	r4, #1
    d524:	2c07      	cmp	r4, #7
    d526:	dc06      	bgt.n	d536 <usbd_enable_endpoints+0x50>
		ep_ctx = out_endpoint_ctx(i);
    d528:	b2e0      	uxtb	r0, r4
    d52a:	f7ff ffa3 	bl	d474 <out_endpoint_ctx>
		if (ep_ctx->cfg.en) {
    d52e:	7a03      	ldrb	r3, [r0, #8]
    d530:	2b00      	cmp	r3, #0
    d532:	d0f6      	beq.n	d522 <usbd_enable_endpoints+0x3c>
    d534:	e7f2      	b.n	d51c <usbd_enable_endpoints+0x36>
		ep_ctx = out_endpoint_ctx(NRF_USBD_EPOUT(8));
    d536:	2008      	movs	r0, #8
    d538:	f7ff ff9c 	bl	d474 <out_endpoint_ctx>
		if (ep_ctx->cfg.en) {
    d53c:	7a03      	ldrb	r3, [r0, #8]
    d53e:	b903      	cbnz	r3, d542 <usbd_enable_endpoints+0x5c>
}
    d540:	bd10      	pop	{r4, pc}
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    d542:	7a40      	ldrb	r0, [r0, #9]
    d544:	f7fc f986 	bl	9854 <nrfx_usbd_ep_enable>
}
    d548:	e7fa      	b.n	d540 <usbd_enable_endpoints+0x5a>

0000d54a <hfxo_start>:
{
    d54a:	b508      	push	{r3, lr}
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
    d54c:	f100 0320 	add.w	r3, r0, #32
    d550:	2201      	movs	r2, #1
    d552:	f3bf 8f5b 	dmb	ish
    d556:	e853 1f00 	ldrex	r1, [r3]
    d55a:	2900      	cmp	r1, #0
    d55c:	d104      	bne.n	d568 <hfxo_start+0x1e>
    d55e:	e843 2c00 	strex	ip, r2, [r3]
    d562:	f1bc 0f00 	cmp.w	ip, #0
    d566:	d1f6      	bne.n	d556 <hfxo_start+0xc>
    d568:	f3bf 8f5b 	dmb	ish
    d56c:	d10a      	bne.n	d584 <hfxo_start+0x3a>
	*notify = (struct sys_notify){
    d56e:	2300      	movs	r3, #0
    d570:	6103      	str	r3, [r0, #16]
    d572:	6183      	str	r3, [r0, #24]
    d574:	2301      	movs	r3, #1
    d576:	6143      	str	r3, [r0, #20]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
    d578:	f100 010c 	add.w	r1, r0, #12
    d57c:	69c0      	ldr	r0, [r0, #28]
    d57e:	f7fe fc94 	bl	beaa <onoff_request>
}
    d582:	bd08      	pop	{r3, pc}
	return 0;
    d584:	2000      	movs	r0, #0
    d586:	e7fc      	b.n	d582 <hfxo_start+0x38>

0000d588 <usb_dc_ep_read>:
{
    d588:	b570      	push	{r4, r5, r6, lr}
    d58a:	4605      	mov	r5, r0
    d58c:	460c      	mov	r4, r1
    d58e:	4616      	mov	r6, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
    d590:	f7f8 fc24 	bl	5ddc <usb_dc_ep_read_wait>
	if (ret) {
    d594:	b918      	cbnz	r0, d59e <usb_dc_ep_read+0x16>
	if (!data && !max_data_len) {
    d596:	b11c      	cbz	r4, d5a0 <usb_dc_ep_read+0x18>
	ret = usb_dc_ep_read_continue(ep);
    d598:	4628      	mov	r0, r5
    d59a:	f7f8 fc99 	bl	5ed0 <usb_dc_ep_read_continue>
}
    d59e:	bd70      	pop	{r4, r5, r6, pc}
	if (!data && !max_data_len) {
    d5a0:	2e00      	cmp	r6, #0
    d5a2:	d1f9      	bne.n	d598 <usb_dc_ep_read+0x10>
    d5a4:	e7fb      	b.n	d59e <usb_dc_ep_read+0x16>

0000d5a6 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    d5a6:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    d5a8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    d5ac:	0089      	lsls	r1, r1, #2
    d5ae:	3138      	adds	r1, #56	; 0x38
}
    d5b0:	4408      	add	r0, r1
    d5b2:	4770      	bx	lr

0000d5b4 <get_sub_config>:
	const struct nrf_clock_control_config *config =
    d5b4:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
    d5b6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
    d5ba:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    d5be:	4770      	bx	lr

0000d5c0 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    d5c0:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
    d5c2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
    d5c6:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    d5ca:	4770      	bx	lr

0000d5cc <get_status>:
{
    d5cc:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    d5ce:	b2c9      	uxtb	r1, r1
    d5d0:	f7ff ffe9 	bl	d5a6 <get_sub_data>
    d5d4:	6880      	ldr	r0, [r0, #8]
}
    d5d6:	f000 0007 	and.w	r0, r0, #7
    d5da:	bd08      	pop	{r3, pc}

0000d5dc <set_off_state>:
	__asm__ volatile(
    d5dc:	f04f 0320 	mov.w	r3, #32
    d5e0:	f3ef 8211 	mrs	r2, BASEPRI
    d5e4:	f383 8812 	msr	BASEPRI_MAX, r3
    d5e8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    d5ec:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    d5ee:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    d5f2:	d001      	beq.n	d5f8 <set_off_state+0x1c>
    d5f4:	428b      	cmp	r3, r1
    d5f6:	d107      	bne.n	d608 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    d5f8:	2301      	movs	r3, #1
    d5fa:	6003      	str	r3, [r0, #0]
	int err = 0;
    d5fc:	2000      	movs	r0, #0
	__asm__ volatile(
    d5fe:	f382 8811 	msr	BASEPRI, r2
    d602:	f3bf 8f6f 	isb	sy
}
    d606:	4770      	bx	lr
		err = -EPERM;
    d608:	f04f 30ff 	mov.w	r0, #4294967295
    d60c:	e7f7      	b.n	d5fe <set_off_state+0x22>

0000d60e <set_starting_state>:
{
    d60e:	b410      	push	{r4}
	__asm__ volatile(
    d610:	f04f 0320 	mov.w	r3, #32
    d614:	f3ef 8211 	mrs	r2, BASEPRI
    d618:	f383 8812 	msr	BASEPRI_MAX, r3
    d61c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    d620:	6803      	ldr	r3, [r0, #0]
    d622:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    d626:	f003 0307 	and.w	r3, r3, #7
    d62a:	2b01      	cmp	r3, #1
    d62c:	d009      	beq.n	d642 <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
    d62e:	428c      	cmp	r4, r1
    d630:	d00a      	beq.n	d648 <set_starting_state+0x3a>
		err = -EPERM;
    d632:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
    d636:	f382 8811 	msr	BASEPRI, r2
    d63a:	f3bf 8f6f 	isb	sy
}
    d63e:	bc10      	pop	{r4}
    d640:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    d642:	6001      	str	r1, [r0, #0]
	int err = 0;
    d644:	2000      	movs	r0, #0
    d646:	e7f6      	b.n	d636 <set_starting_state+0x28>
		err = -EALREADY;
    d648:	f06f 0077 	mvn.w	r0, #119	; 0x77
    d64c:	e7f3      	b.n	d636 <set_starting_state+0x28>

0000d64e <set_on_state>:
	__asm__ volatile(
    d64e:	f04f 0320 	mov.w	r3, #32
    d652:	f3ef 8211 	mrs	r2, BASEPRI
    d656:	f383 8812 	msr	BASEPRI_MAX, r3
    d65a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    d65e:	6803      	ldr	r3, [r0, #0]
    d660:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    d664:	f043 0302 	orr.w	r3, r3, #2
    d668:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    d66a:	f382 8811 	msr	BASEPRI, r2
    d66e:	f3bf 8f6f 	isb	sy
}
    d672:	4770      	bx	lr

0000d674 <clkstarted_handle>:
{
    d674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d676:	4606      	mov	r6, r0
    d678:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    d67a:	f7ff ff94 	bl	d5a6 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    d67e:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    d680:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    d682:	2300      	movs	r3, #0
    d684:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    d688:	f7ff ffe1 	bl	d64e <set_on_state>
	if (callback) {
    d68c:	b11d      	cbz	r5, d696 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    d68e:	463a      	mov	r2, r7
    d690:	4621      	mov	r1, r4
    d692:	4630      	mov	r0, r6
    d694:	47a8      	blx	r5
}
    d696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d698 <stop>:
{
    d698:	b570      	push	{r4, r5, r6, lr}
    d69a:	4606      	mov	r6, r0
    d69c:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    d69e:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    d6a0:	4621      	mov	r1, r4
    d6a2:	f7ff ff80 	bl	d5a6 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    d6a6:	4629      	mov	r1, r5
    d6a8:	3008      	adds	r0, #8
    d6aa:	f7ff ff97 	bl	d5dc <set_off_state>
	if (err < 0) {
    d6ae:	2800      	cmp	r0, #0
    d6b0:	db06      	blt.n	d6c0 <stop+0x28>
	get_sub_config(dev, type)->stop();
    d6b2:	4621      	mov	r1, r4
    d6b4:	4630      	mov	r0, r6
    d6b6:	f7ff ff7d 	bl	d5b4 <get_sub_config>
    d6ba:	6843      	ldr	r3, [r0, #4]
    d6bc:	4798      	blx	r3
	return 0;
    d6be:	2000      	movs	r0, #0
}
    d6c0:	bd70      	pop	{r4, r5, r6, pc}

0000d6c2 <api_stop>:
{
    d6c2:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    d6c4:	2280      	movs	r2, #128	; 0x80
    d6c6:	f7ff ffe7 	bl	d698 <stop>
}
    d6ca:	bd08      	pop	{r3, pc}

0000d6cc <async_start>:
{
    d6cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d6d0:	4606      	mov	r6, r0
    d6d2:	4690      	mov	r8, r2
    d6d4:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    d6d6:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    d6d8:	4629      	mov	r1, r5
    d6da:	f7ff ff64 	bl	d5a6 <get_sub_data>
    d6de:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    d6e0:	9906      	ldr	r1, [sp, #24]
    d6e2:	3008      	adds	r0, #8
    d6e4:	f7ff ff93 	bl	d60e <set_starting_state>
	if (err < 0) {
    d6e8:	2800      	cmp	r0, #0
    d6ea:	db09      	blt.n	d700 <async_start+0x34>
	subdata->cb = cb;
    d6ec:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    d6f0:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    d6f2:	4629      	mov	r1, r5
    d6f4:	4630      	mov	r0, r6
    d6f6:	f7ff ff5d 	bl	d5b4 <get_sub_config>
    d6fa:	6803      	ldr	r3, [r0, #0]
    d6fc:	4798      	blx	r3
	return 0;
    d6fe:	2000      	movs	r0, #0
}
    d700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d704 <api_start>:
{
    d704:	b510      	push	{r4, lr}
    d706:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    d708:	2480      	movs	r4, #128	; 0x80
    d70a:	9400      	str	r4, [sp, #0]
    d70c:	f7ff ffde 	bl	d6cc <async_start>
}
    d710:	b002      	add	sp, #8
    d712:	bd10      	pop	{r4, pc}

0000d714 <onoff_started_callback>:
{
    d714:	b510      	push	{r4, lr}
    d716:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    d718:	b2c9      	uxtb	r1, r1
    d71a:	f7ff ff51 	bl	d5c0 <get_onoff_manager>
	notify(mgr, 0);
    d71e:	2100      	movs	r1, #0
    d720:	47a0      	blx	r4
}
    d722:	bd10      	pop	{r4, pc}

0000d724 <hfclk_start>:
{
    d724:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    d726:	2001      	movs	r0, #1
    d728:	f7f9 fe3c 	bl	73a4 <nrfx_clock_start>
}
    d72c:	bd08      	pop	{r3, pc}

0000d72e <lfclk_start>:
{
    d72e:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    d730:	2000      	movs	r0, #0
    d732:	f7f9 fe37 	bl	73a4 <nrfx_clock_start>
}
    d736:	bd08      	pop	{r3, pc}

0000d738 <hfclk_stop>:
{
    d738:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    d73a:	2001      	movs	r0, #1
    d73c:	f7f9 fe6a 	bl	7414 <nrfx_clock_stop>
}
    d740:	bd08      	pop	{r3, pc}

0000d742 <lfclk_stop>:
{
    d742:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    d744:	2000      	movs	r0, #0
    d746:	f7f9 fe65 	bl	7414 <nrfx_clock_stop>
}
    d74a:	bd08      	pop	{r3, pc}

0000d74c <blocking_start_callback>:
{
    d74c:	b508      	push	{r3, lr}
    d74e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    d750:	f7fd f828 	bl	a7a4 <z_impl_k_sem_give>
}
    d754:	bd08      	pop	{r3, pc}

0000d756 <get_pull>:
	if (flags & GPIO_PULL_UP) {
    d756:	f010 0f10 	tst.w	r0, #16
    d75a:	d104      	bne.n	d766 <get_pull+0x10>
	} else if (flags & GPIO_PULL_DOWN) {
    d75c:	f010 0f20 	tst.w	r0, #32
    d760:	d103      	bne.n	d76a <get_pull+0x14>
	return NRF_GPIO_PIN_NOPULL;
    d762:	2000      	movs	r0, #0
    d764:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLUP;
    d766:	2003      	movs	r0, #3
    d768:	4770      	bx	lr
		return NRF_GPIO_PIN_PULLDOWN;
    d76a:	2001      	movs	r0, #1
}
    d76c:	4770      	bx	lr

0000d76e <gpio_nrfx_port_get_raw>:
	return port->config;
    d76e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d770:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    d772:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    d776:	600b      	str	r3, [r1, #0]
}
    d778:	2000      	movs	r0, #0
    d77a:	4770      	bx	lr

0000d77c <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    d77c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d77e:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    d780:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    d784:	4042      	eors	r2, r0
    d786:	400a      	ands	r2, r1
    d788:	4042      	eors	r2, r0
    p_reg->OUT = value;
    d78a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    d78e:	2000      	movs	r0, #0
    d790:	4770      	bx	lr

0000d792 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    d792:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d794:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    d796:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    d79a:	2000      	movs	r0, #0
    d79c:	4770      	bx	lr

0000d79e <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    d79e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d7a0:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    d7a2:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    d7a6:	2000      	movs	r0, #0
    d7a8:	4770      	bx	lr

0000d7aa <gpio_nrfx_port_toggle_bits>:
	return port->config;
    d7aa:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d7ac:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    d7ae:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    d7b2:	404b      	eors	r3, r1
    p_reg->OUT = value;
    d7b4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    d7b8:	2000      	movs	r0, #0
    d7ba:	4770      	bx	lr

0000d7bc <get_trigger>:
	if (mode == GPIO_INT_MODE_LEVEL) {
    d7bc:	f5b0 4f80 	cmp.w	r0, #16384	; 0x4000
    d7c0:	d007      	beq.n	d7d2 <get_trigger+0x16>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    d7c2:	f5b1 2fc0 	cmp.w	r1, #393216	; 0x60000
    d7c6:	d00d      	beq.n	d7e4 <get_trigger+0x28>
    d7c8:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
    d7cc:	d008      	beq.n	d7e0 <get_trigger+0x24>
    d7ce:	2001      	movs	r0, #1
}
    d7d0:	4770      	bx	lr
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    d7d2:	f5b1 3f00 	cmp.w	r1, #131072	; 0x20000
    d7d6:	d001      	beq.n	d7dc <get_trigger+0x20>
    d7d8:	2005      	movs	r0, #5
    d7da:	4770      	bx	lr
    d7dc:	2004      	movs	r0, #4
    d7de:	4770      	bx	lr
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    d7e0:	2002      	movs	r0, #2
    d7e2:	4770      	bx	lr
    d7e4:	2003      	movs	r0, #3
    d7e6:	4770      	bx	lr

0000d7e8 <gpio_nrfx_manage_callback>:
{
    d7e8:	b470      	push	{r4, r5, r6}
	return port->data;
    d7ea:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    d7ec:	1d05      	adds	r5, r0, #4
	return list->head;
    d7ee:	6843      	ldr	r3, [r0, #4]
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
    d7f0:	b1db      	cbz	r3, d82a <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    d7f2:	460e      	mov	r6, r1
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    d7f4:	2400      	movs	r4, #0
    d7f6:	e00a      	b.n	d80e <gpio_nrfx_manage_callback+0x26>
	return node->next;
    d7f8:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    d7fa:	6043      	str	r3, [r0, #4]
	return list->tail;
    d7fc:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    d7fe:	42a1      	cmp	r1, r4
    d800:	d10f      	bne.n	d822 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
    d802:	606b      	str	r3, [r5, #4]
}
    d804:	e00d      	b.n	d822 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
    d806:	606c      	str	r4, [r5, #4]
}
    d808:	e00b      	b.n	d822 <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    d80a:	461c      	mov	r4, r3
    d80c:	681b      	ldr	r3, [r3, #0]
    d80e:	b15b      	cbz	r3, d828 <gpio_nrfx_manage_callback+0x40>
    d810:	429e      	cmp	r6, r3
    d812:	d1fa      	bne.n	d80a <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
    d814:	2c00      	cmp	r4, #0
    d816:	d0ef      	beq.n	d7f8 <gpio_nrfx_manage_callback+0x10>
	return node->next;
    d818:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
    d81a:	6023      	str	r3, [r4, #0]
	return list->tail;
    d81c:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    d81e:	4299      	cmp	r1, r3
    d820:	d0f1      	beq.n	d806 <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
    d822:	2300      	movs	r3, #0
    d824:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    d826:	e000      	b.n	d82a <gpio_nrfx_manage_callback+0x42>
			if (!set) {
    d828:	b152      	cbz	r2, d840 <gpio_nrfx_manage_callback+0x58>
				return -EINVAL;
			}
		}
	}

	if (set) {
    d82a:	b162      	cbz	r2, d846 <gpio_nrfx_manage_callback+0x5e>
	return list->head;
    d82c:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
    d82e:	600b      	str	r3, [r1, #0]
	list->head = node;
    d830:	6041      	str	r1, [r0, #4]
	return list->tail;
    d832:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    d834:	b10b      	cbz	r3, d83a <gpio_nrfx_manage_callback+0x52>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    d836:	2000      	movs	r0, #0
    d838:	e006      	b.n	d848 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    d83a:	6069      	str	r1, [r5, #4]
    d83c:	2000      	movs	r0, #0
}
    d83e:	e003      	b.n	d848 <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
    d840:	f06f 0015 	mvn.w	r0, #21
    d844:	e000      	b.n	d848 <gpio_nrfx_manage_callback+0x60>
	return 0;
    d846:	2000      	movs	r0, #0
}
    d848:	bc70      	pop	{r4, r5, r6}
    d84a:	4770      	bx	lr

0000d84c <nrfx_gpio_handler>:
{
    d84c:	b570      	push	{r4, r5, r6, lr}
    *p_pin = pin_number & 0x1F;
    d84e:	f000 041f 	and.w	r4, r0, #31
	const struct device *port = get_dev(port_id);
    d852:	0940      	lsrs	r0, r0, #5
    d854:	f7f8 fe40 	bl	64d8 <get_dev>
	if (port == NULL) {
    d858:	b1d8      	cbz	r0, d892 <nrfx_gpio_handler+0x46>
    d85a:	4606      	mov	r6, r0
	return port->data;
    d85c:	6903      	ldr	r3, [r0, #16]
	gpio_fire_callbacks(list, port, BIT(pin));
    d85e:	2501      	movs	r5, #1
    d860:	40a5      	lsls	r5, r4
	return list->head;
    d862:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    d864:	b119      	cbz	r1, d86e <nrfx_gpio_handler+0x22>
    d866:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    d868:	b149      	cbz	r1, d87e <nrfx_gpio_handler+0x32>
	return node->next;
    d86a:	680c      	ldr	r4, [r1, #0]
    d86c:	e007      	b.n	d87e <nrfx_gpio_handler+0x32>
    d86e:	460c      	mov	r4, r1
    d870:	e005      	b.n	d87e <nrfx_gpio_handler+0x32>
    d872:	b164      	cbz	r4, d88e <nrfx_gpio_handler+0x42>
    d874:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    d876:	b104      	cbz	r4, d87a <nrfx_gpio_handler+0x2e>
	return node->next;
    d878:	6823      	ldr	r3, [r4, #0]
    d87a:	4621      	mov	r1, r4
    d87c:	461c      	mov	r4, r3
    d87e:	b141      	cbz	r1, d892 <nrfx_gpio_handler+0x46>
		if (cb->pin_mask & pins) {
    d880:	688a      	ldr	r2, [r1, #8]
    d882:	402a      	ands	r2, r5
    d884:	d0f5      	beq.n	d872 <nrfx_gpio_handler+0x26>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    d886:	684b      	ldr	r3, [r1, #4]
    d888:	4630      	mov	r0, r6
    d88a:	4798      	blx	r3
    d88c:	e7f1      	b.n	d872 <nrfx_gpio_handler+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    d88e:	4623      	mov	r3, r4
    d890:	e7f3      	b.n	d87a <nrfx_gpio_handler+0x2e>
}
    d892:	bd70      	pop	{r4, r5, r6, pc}

0000d894 <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
    d894:	b510      	push	{r4, lr}
    d896:	b082      	sub	sp, #8
    d898:	460c      	mov	r4, r1
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
    d89a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    d89e:	6e51      	ldr	r1, [r2, #100]	; 0x64
    d8a0:	6e53      	ldr	r3, [r2, #100]	; 0x64
	struct nrf_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
    d8a2:	0a1b      	lsrs	r3, r3, #8
    d8a4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    d8a8:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
    d8ac:	6e51      	ldr	r1, [r2, #100]	; 0x64
    d8ae:	0209      	lsls	r1, r1, #8
    d8b0:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    d8b4:	430b      	orrs	r3, r1
    d8b6:	6e51      	ldr	r1, [r2, #100]	; 0x64
    d8b8:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    d8bc:	9300      	str	r3, [sp, #0]
    d8be:	6e11      	ldr	r1, [r2, #96]	; 0x60
    d8c0:	6e13      	ldr	r3, [r2, #96]	; 0x60
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
    d8c2:	0a1b      	lsrs	r3, r3, #8
    d8c4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    d8c8:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
    d8cc:	6e11      	ldr	r1, [r2, #96]	; 0x60
    d8ce:	0209      	lsls	r1, r1, #8
    d8d0:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    d8d4:	430b      	orrs	r3, r1
    d8d6:	6e12      	ldr	r2, [r2, #96]	; 0x60
    d8d8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    d8dc:	9301      	str	r3, [sp, #4]

	if (length > sizeof(dev_id.id)) {
    d8de:	2c08      	cmp	r4, #8
    d8e0:	d900      	bls.n	d8e4 <z_impl_hwinfo_get_device_id+0x50>
		length = sizeof(dev_id.id);
    d8e2:	2408      	movs	r4, #8
	}

	memcpy(buffer, dev_id.id, length);
    d8e4:	4622      	mov	r2, r4
    d8e6:	4669      	mov	r1, sp
    d8e8:	f7ff fd5c 	bl	d3a4 <memcpy>

	return length;
}
    d8ec:	4620      	mov	r0, r4
    d8ee:	b002      	add	sp, #8
    d8f0:	bd10      	pop	{r4, pc}

0000d8f2 <endtx_isr>:
	return dev->config;
    d8f2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    d8f4:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    d8f6:	f04f 0120 	mov.w	r1, #32
    d8fa:	f3ef 8211 	mrs	r2, BASEPRI
    d8fe:	f381 8812 	msr	BASEPRI_MAX, r1
    d902:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d906:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    d90a:	b131      	cbz	r1, d91a <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d90c:	2100      	movs	r1, #0
    d90e:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    d912:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d916:	2101      	movs	r1, #1
    d918:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    d91a:	f382 8811 	msr	BASEPRI, r2
    d91e:	f3bf 8f6f 	isb	sy
}
    d922:	4770      	bx	lr

0000d924 <uarte_nrfx_isr_int>:
{
    d924:	b538      	push	{r3, r4, r5, lr}
    d926:	4604      	mov	r4, r0
	return dev->config;
    d928:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    d92a:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    d92c:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    d930:	f413 7f80 	tst.w	r3, #256	; 0x100
    d934:	d003      	beq.n	d93e <uarte_nrfx_isr_int+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d936:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    d93a:	2b00      	cmp	r3, #0
    d93c:	d139      	bne.n	d9b2 <uarte_nrfx_isr_int+0x8e>
	return dev->config;
    d93e:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    d940:	685b      	ldr	r3, [r3, #4]
    d942:	f013 0f10 	tst.w	r3, #16
    d946:	d01a      	beq.n	d97e <uarte_nrfx_isr_int+0x5a>
	__asm__ volatile(
    d948:	f04f 0320 	mov.w	r3, #32
    d94c:	f3ef 8211 	mrs	r2, BASEPRI
    d950:	f383 8812 	msr	BASEPRI_MAX, r3
    d954:	f3bf 8f6f 	isb	sy
    d958:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    d95c:	b113      	cbz	r3, d964 <uarte_nrfx_isr_int+0x40>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    d95e:	2300      	movs	r3, #0
    d960:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	return dev->data;
    d964:	6923      	ldr	r3, [r4, #16]
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
    d966:	68db      	ldr	r3, [r3, #12]
    d968:	b10b      	cbz	r3, d96e <uarte_nrfx_isr_int+0x4a>
    d96a:	691b      	ldr	r3, [r3, #16]
    d96c:	b91b      	cbnz	r3, d976 <uarte_nrfx_isr_int+0x52>
    p_reg->INTENCLR = mask;
    d96e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    d972:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
	__asm__ volatile(
    d976:	f382 8811 	msr	BASEPRI, r2
    d97a:	f3bf 8f6f 	isb	sy
	return dev->data;
    d97e:	6923      	ldr	r3, [r4, #16]
	if (!data->int_driven) {
    d980:	68da      	ldr	r2, [r3, #12]
    d982:	b1aa      	cbz	r2, d9b0 <uarte_nrfx_isr_int+0x8c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d984:	f8d5 1158 	ldr.w	r1, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    d988:	b121      	cbz	r1, d994 <uarte_nrfx_isr_int+0x70>
		data->int_driven->fifo_fill_lock = 0;
    d98a:	2100      	movs	r1, #0
    d98c:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
    d98e:	68da      	ldr	r2, [r3, #12]
    d990:	7b92      	ldrb	r2, [r2, #14]
    d992:	b98a      	cbnz	r2, d9b8 <uarte_nrfx_isr_int+0x94>
    d994:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    d998:	b122      	cbz	r2, d9a4 <uarte_nrfx_isr_int+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d99a:	2200      	movs	r2, #0
    d99c:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
    d9a0:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (data->int_driven->cb) {
    d9a4:	68da      	ldr	r2, [r3, #12]
    d9a6:	6813      	ldr	r3, [r2, #0]
    d9a8:	b113      	cbz	r3, d9b0 <uarte_nrfx_isr_int+0x8c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    d9aa:	6851      	ldr	r1, [r2, #4]
    d9ac:	4620      	mov	r0, r4
    d9ae:	4798      	blx	r3
}
    d9b0:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    d9b2:	f7ff ff9e 	bl	d8f2 <endtx_isr>
    d9b6:	e7c2      	b.n	d93e <uarte_nrfx_isr_int+0x1a>
    p_reg->INTENCLR = mask;
    d9b8:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    d9bc:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    d9c0:	68db      	ldr	r3, [r3, #12]
    d9c2:	7399      	strb	r1, [r3, #14]
			return;
    d9c4:	e7f4      	b.n	d9b0 <uarte_nrfx_isr_int+0x8c>

0000d9c6 <uarte_nrfx_configure>:
{
    d9c6:	b570      	push	{r4, r5, r6, lr}
    d9c8:	b082      	sub	sp, #8
    d9ca:	4605      	mov	r5, r0
    d9cc:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
    d9ce:	794b      	ldrb	r3, [r1, #5]
    d9d0:	2b01      	cmp	r3, #1
    d9d2:	d006      	beq.n	d9e2 <uarte_nrfx_configure+0x1c>
    d9d4:	2b03      	cmp	r3, #3
    d9d6:	d011      	beq.n	d9fc <uarte_nrfx_configure+0x36>
    d9d8:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    d9dc:	4618      	mov	r0, r3
    d9de:	b002      	add	sp, #8
    d9e0:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    d9e2:	2300      	movs	r3, #0
    d9e4:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    d9e8:	79a3      	ldrb	r3, [r4, #6]
    d9ea:	2b03      	cmp	r3, #3
    d9ec:	d138      	bne.n	da60 <uarte_nrfx_configure+0x9a>
	switch (cfg->flow_ctrl) {
    d9ee:	79e3      	ldrb	r3, [r4, #7]
    d9f0:	b143      	cbz	r3, da04 <uarte_nrfx_configure+0x3e>
    d9f2:	2b01      	cmp	r3, #1
    d9f4:	d010      	beq.n	da18 <uarte_nrfx_configure+0x52>
    d9f6:	f06f 0385 	mvn.w	r3, #133	; 0x85
    d9fa:	e7ef      	b.n	d9dc <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    d9fc:	2310      	movs	r3, #16
    d9fe:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
    da02:	e7f1      	b.n	d9e8 <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    da04:	2300      	movs	r3, #0
    da06:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    da0a:	7923      	ldrb	r3, [r4, #4]
    da0c:	b143      	cbz	r3, da20 <uarte_nrfx_configure+0x5a>
    da0e:	2b02      	cmp	r3, #2
    da10:	d022      	beq.n	da58 <uarte_nrfx_configure+0x92>
    da12:	f06f 0385 	mvn.w	r3, #133	; 0x85
    da16:	e7e1      	b.n	d9dc <uarte_nrfx_configure+0x16>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    da18:	2301      	movs	r3, #1
    da1a:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    da1e:	e7f4      	b.n	da0a <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    da20:	2300      	movs	r3, #0
    da22:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    da26:	6821      	ldr	r1, [r4, #0]
    da28:	4628      	mov	r0, r5
    da2a:	f7f8 ff59 	bl	68e0 <baudrate_set>
    da2e:	4603      	mov	r3, r0
    da30:	b9c8      	cbnz	r0, da66 <uarte_nrfx_configure+0xa0>
	return dev->config;
    da32:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
    da34:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    da36:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
    da3a:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
    da3e:	f89d 2004 	ldrb.w	r2, [sp, #4]
    da42:	4331      	orrs	r1, r6
    da44:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    da46:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	return dev->data;
    da4a:	692a      	ldr	r2, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
    da4c:	3204      	adds	r2, #4
    da4e:	e894 0003 	ldmia.w	r4, {r0, r1}
    da52:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
    da56:	e7c1      	b.n	d9dc <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    da58:	230e      	movs	r3, #14
    da5a:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    da5e:	e7e2      	b.n	da26 <uarte_nrfx_configure+0x60>
		return -ENOTSUP;
    da60:	f06f 0385 	mvn.w	r3, #133	; 0x85
    da64:	e7ba      	b.n	d9dc <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
    da66:	f06f 0385 	mvn.w	r3, #133	; 0x85
    da6a:	e7b7      	b.n	d9dc <uarte_nrfx_configure+0x16>

0000da6c <uarte_nrfx_config_get>:
{
    da6c:	460b      	mov	r3, r1
	return dev->data;
    da6e:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
    da70:	6891      	ldr	r1, [r2, #8]
    da72:	6850      	ldr	r0, [r2, #4]
    da74:	e883 0003 	stmia.w	r3, {r0, r1}
}
    da78:	2000      	movs	r0, #0
    da7a:	4770      	bx	lr

0000da7c <uarte_nrfx_err_check>:
	return dev->config;
    da7c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    da7e:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    da80:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    da84:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    da88:	4770      	bx	lr

0000da8a <is_tx_ready>:
	return dev->config;
    da8a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    da8c:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    da8e:	685b      	ldr	r3, [r3, #4]
    da90:	f003 0302 	and.w	r3, r3, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    da94:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    da98:	b929      	cbnz	r1, daa6 <is_tx_ready+0x1c>
    da9a:	b933      	cbnz	r3, daaa <is_tx_ready+0x20>
    da9c:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    daa0:	b92b      	cbnz	r3, daae <is_tx_ready+0x24>
    daa2:	2000      	movs	r0, #0
    daa4:	4770      	bx	lr
    daa6:	2001      	movs	r0, #1
    daa8:	4770      	bx	lr
    daaa:	2000      	movs	r0, #0
    daac:	4770      	bx	lr
    daae:	2001      	movs	r0, #1
}
    dab0:	4770      	bx	lr

0000dab2 <uarte_enable>:
	return dev->config;
    dab2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    dab4:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    dab6:	2208      	movs	r2, #8
    dab8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    dabc:	4770      	bx	lr

0000dabe <tx_start>:
{
    dabe:	b510      	push	{r4, lr}
	return dev->config;
    dac0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    dac2:	681c      	ldr	r4, [r3, #0]

NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    dac4:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    dac8:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dacc:	2300      	movs	r3, #0
    dace:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    dad2:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    dad6:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
    dada:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
    dade:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    dae0:	685b      	ldr	r3, [r3, #4]
    dae2:	f013 0f10 	tst.w	r3, #16
    dae6:	d102      	bne.n	daee <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dae8:	2301      	movs	r3, #1
    daea:	60a3      	str	r3, [r4, #8]
}
    daec:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    daee:	2101      	movs	r1, #1
    daf0:	f7ff ffdf 	bl	dab2 <uarte_enable>
    p_reg->INTENSET = mask;
    daf4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    daf8:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    dafc:	e7f4      	b.n	dae8 <tx_start+0x2a>

0000dafe <uarte_nrfx_poll_in>:
{
    dafe:	b410      	push	{r4}
	return dev->data;
    db00:	6904      	ldr	r4, [r0, #16]
	return dev->config;
    db02:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    db04:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    db06:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    db0a:	b152      	cbz	r2, db22 <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
    db0c:	7d62      	ldrb	r2, [r4, #21]
    db0e:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    db10:	2000      	movs	r0, #0
    db12:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    db16:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    db1a:	2201      	movs	r2, #1
    db1c:	601a      	str	r2, [r3, #0]
}
    db1e:	bc10      	pop	{r4}
    db20:	4770      	bx	lr
		return -1;
    db22:	f04f 30ff 	mov.w	r0, #4294967295
    db26:	e7fa      	b.n	db1e <uarte_nrfx_poll_in+0x20>

0000db28 <uarte_nrfx_fifo_fill>:
{
    db28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    db2c:	4680      	mov	r8, r0
	return dev->data;
    db2e:	6907      	ldr	r7, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
    db30:	68fb      	ldr	r3, [r7, #12]
    db32:	899e      	ldrh	r6, [r3, #12]
    db34:	4296      	cmp	r6, r2
    db36:	bfa8      	it	ge
    db38:	4616      	movge	r6, r2
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    db3a:	3310      	adds	r3, #16
    db3c:	2201      	movs	r2, #1
    db3e:	f3bf 8f5b 	dmb	ish
    db42:	e853 0f00 	ldrex	r0, [r3]
    db46:	2800      	cmp	r0, #0
    db48:	d103      	bne.n	db52 <uarte_nrfx_fifo_fill+0x2a>
    db4a:	e843 2400 	strex	r4, r2, [r3]
    db4e:	2c00      	cmp	r4, #0
    db50:	d1f7      	bne.n	db42 <uarte_nrfx_fifo_fill+0x1a>
    db52:	f3bf 8f5b 	dmb	ish
    db56:	d101      	bne.n	db5c <uarte_nrfx_fifo_fill+0x34>
	for (int i = 0; i < len; i++) {
    db58:	2300      	movs	r3, #0
    db5a:	e006      	b.n	db6a <uarte_nrfx_fifo_fill+0x42>
		return 0;
    db5c:	2600      	movs	r6, #0
    db5e:	e019      	b.n	db94 <uarte_nrfx_fifo_fill+0x6c>
		data->int_driven->tx_buffer[i] = tx_data[i];
    db60:	68fc      	ldr	r4, [r7, #12]
    db62:	68a4      	ldr	r4, [r4, #8]
    db64:	5ccd      	ldrb	r5, [r1, r3]
    db66:	54e5      	strb	r5, [r4, r3]
	for (int i = 0; i < len; i++) {
    db68:	3301      	adds	r3, #1
    db6a:	42b3      	cmp	r3, r6
    db6c:	dbf8      	blt.n	db60 <uarte_nrfx_fifo_fill+0x38>
	__asm__ volatile(
    db6e:	f04f 0320 	mov.w	r3, #32
    db72:	f3ef 8411 	mrs	r4, BASEPRI
    db76:	f383 8812 	msr	BASEPRI_MAX, r3
    db7a:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    db7e:	4640      	mov	r0, r8
    db80:	f7ff ff83 	bl	da8a <is_tx_ready>
    db84:	b948      	cbnz	r0, db9a <uarte_nrfx_fifo_fill+0x72>
		data->int_driven->fifo_fill_lock = 0;
    db86:	68fb      	ldr	r3, [r7, #12]
    db88:	2600      	movs	r6, #0
    db8a:	611e      	str	r6, [r3, #16]
	__asm__ volatile(
    db8c:	f384 8811 	msr	BASEPRI, r4
    db90:	f3bf 8f6f 	isb	sy
}
    db94:	4630      	mov	r0, r6
    db96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
    db9a:	68fb      	ldr	r3, [r7, #12]
    db9c:	4632      	mov	r2, r6
    db9e:	6899      	ldr	r1, [r3, #8]
    dba0:	4640      	mov	r0, r8
    dba2:	f7ff ff8c 	bl	dabe <tx_start>
    dba6:	e7f1      	b.n	db8c <uarte_nrfx_fifo_fill+0x64>

0000dba8 <uarte_nrfx_fifo_read>:
	return dev->config;
    dba8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    dbaa:	681b      	ldr	r3, [r3, #0]
	return dev->data;
    dbac:	6900      	ldr	r0, [r0, #16]
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    dbae:	2a00      	cmp	r2, #0
    dbb0:	dd0c      	ble.n	dbcc <uarte_nrfx_fifo_read+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    dbb2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    dbb6:	b15a      	cbz	r2, dbd0 <uarte_nrfx_fifo_read+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dbb8:	2200      	movs	r2, #0
    dbba:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    dbbe:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
    dbc2:	7d42      	ldrb	r2, [r0, #21]
    dbc4:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dbc6:	2001      	movs	r0, #1
    dbc8:	6018      	str	r0, [r3, #0]
}
    dbca:	4770      	bx	lr
	int num_rx = 0;
    dbcc:	2000      	movs	r0, #0
    dbce:	4770      	bx	lr
    dbd0:	2000      	movs	r0, #0
}
    dbd2:	4770      	bx	lr

0000dbd4 <uarte_nrfx_irq_tx_enable>:
	return dev->config;
    dbd4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    dbd6:	681a      	ldr	r2, [r3, #0]
	return dev->data;
    dbd8:	6901      	ldr	r1, [r0, #16]
	__asm__ volatile(
    dbda:	f04f 0020 	mov.w	r0, #32
    dbde:	f3ef 8311 	mrs	r3, BASEPRI
    dbe2:	f380 8812 	msr	BASEPRI_MAX, r0
    dbe6:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    dbea:	68c9      	ldr	r1, [r1, #12]
    dbec:	2000      	movs	r0, #0
    dbee:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    dbf0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    dbf4:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    dbf8:	f383 8811 	msr	BASEPRI, r3
    dbfc:	f3bf 8f6f 	isb	sy
}
    dc00:	4770      	bx	lr

0000dc02 <uarte_nrfx_irq_tx_disable>:
	return dev->data;
    dc02:	6903      	ldr	r3, [r0, #16]
	data->int_driven->disable_tx_irq = true;
    dc04:	68db      	ldr	r3, [r3, #12]
    dc06:	2201      	movs	r2, #1
    dc08:	739a      	strb	r2, [r3, #14]
}
    dc0a:	4770      	bx	lr

0000dc0c <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config;
    dc0c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    dc0e:	6819      	ldr	r1, [r3, #0]
	return dev->data;
    dc10:	6903      	ldr	r3, [r0, #16]
	bool ready = !data->int_driven->disable_tx_irq &&
    dc12:	68db      	ldr	r3, [r3, #12]
    dc14:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    dc16:	b94a      	cbnz	r2, dc2c <uarte_nrfx_irq_tx_ready_complete+0x20>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    dc18:	f8d1 2158 	ldr.w	r2, [r1, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    dc1c:	b15a      	cbz	r2, dc36 <uarte_nrfx_irq_tx_ready_complete+0x2a>
    return p_reg->INTENSET & mask;
    dc1e:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    dc22:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
    dc26:	d008      	beq.n	dc3a <uarte_nrfx_irq_tx_ready_complete+0x2e>
    dc28:	2001      	movs	r0, #1
    dc2a:	e000      	b.n	dc2e <uarte_nrfx_irq_tx_ready_complete+0x22>
    dc2c:	2000      	movs	r0, #0
	if (ready) {
    dc2e:	b108      	cbz	r0, dc34 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
    dc30:	2200      	movs	r2, #0
    dc32:	611a      	str	r2, [r3, #16]
}
    dc34:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    dc36:	2000      	movs	r0, #0
    dc38:	e7f9      	b.n	dc2e <uarte_nrfx_irq_tx_ready_complete+0x22>
    dc3a:	2000      	movs	r0, #0
    dc3c:	e7f7      	b.n	dc2e <uarte_nrfx_irq_tx_ready_complete+0x22>

0000dc3e <uarte_nrfx_irq_rx_ready>:
	return dev->config;
    dc3e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    dc40:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    dc42:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    dc46:	3800      	subs	r0, #0
    dc48:	bf18      	it	ne
    dc4a:	2001      	movne	r0, #1
    dc4c:	4770      	bx	lr

0000dc4e <uarte_nrfx_irq_rx_enable>:
	return dev->config;
    dc4e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    dc50:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    dc52:	2210      	movs	r2, #16
    dc54:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    dc58:	4770      	bx	lr

0000dc5a <uarte_nrfx_irq_rx_disable>:
	return dev->config;
    dc5a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    dc5c:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    dc5e:	2210      	movs	r2, #16
    dc60:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    dc64:	4770      	bx	lr

0000dc66 <uarte_nrfx_irq_err_enable>:
	return dev->config;
    dc66:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    dc68:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    dc6a:	f44f 7200 	mov.w	r2, #512	; 0x200
    dc6e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    dc72:	4770      	bx	lr

0000dc74 <uarte_nrfx_irq_err_disable>:
	return dev->config;
    dc74:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    dc76:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    dc78:	f44f 7200 	mov.w	r2, #512	; 0x200
    dc7c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    dc80:	4770      	bx	lr

0000dc82 <uarte_nrfx_irq_is_pending>:
{
    dc82:	b538      	push	{r3, r4, r5, lr}
    dc84:	4604      	mov	r4, r0
	return dev->config;
    dc86:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    dc88:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    dc8a:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    dc8e:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
    dc92:	d106      	bne.n	dca2 <uarte_nrfx_irq_is_pending+0x20>
    dc94:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
    dc98:	f013 0f10 	tst.w	r3, #16
    dc9c:	d107      	bne.n	dcae <uarte_nrfx_irq_is_pending+0x2c>
    dc9e:	2000      	movs	r0, #0
}
    dca0:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    dca2:	f7ff ffb3 	bl	dc0c <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    dca6:	2800      	cmp	r0, #0
    dca8:	d0f4      	beq.n	dc94 <uarte_nrfx_irq_is_pending+0x12>
		||
    dcaa:	2001      	movs	r0, #1
    dcac:	e7f8      	b.n	dca0 <uarte_nrfx_irq_is_pending+0x1e>
		 uarte_nrfx_irq_rx_ready(dev)));
    dcae:	4620      	mov	r0, r4
    dcb0:	f7ff ffc5 	bl	dc3e <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    dcb4:	2800      	cmp	r0, #0
    dcb6:	d0f3      	beq.n	dca0 <uarte_nrfx_irq_is_pending+0x1e>
		||
    dcb8:	2001      	movs	r0, #1
    dcba:	e7f1      	b.n	dca0 <uarte_nrfx_irq_is_pending+0x1e>

0000dcbc <uarte_nrfx_irq_update>:
}
    dcbc:	2001      	movs	r0, #1
    dcbe:	4770      	bx	lr

0000dcc0 <uarte_nrfx_irq_callback_set>:
	return dev->data;
    dcc0:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
    dcc2:	68d8      	ldr	r0, [r3, #12]
    dcc4:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
    dcc6:	68db      	ldr	r3, [r3, #12]
    dcc8:	605a      	str	r2, [r3, #4]
}
    dcca:	4770      	bx	lr

0000dccc <wait_tx_ready>:
{
    dccc:	b570      	push	{r4, r5, r6, lr}
    dcce:	4606      	mov	r6, r0
    dcd0:	e014      	b.n	dcfc <wait_tx_ready+0x30>
		if (res) {
    dcd2:	b17d      	cbz	r5, dcf4 <wait_tx_ready+0x28>
	__asm__ volatile(
    dcd4:	f04f 0320 	mov.w	r3, #32
    dcd8:	f3ef 8411 	mrs	r4, BASEPRI
    dcdc:	f383 8812 	msr	BASEPRI_MAX, r3
    dce0:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    dce4:	4630      	mov	r0, r6
    dce6:	f7ff fed0 	bl	da8a <is_tx_ready>
    dcea:	b9a0      	cbnz	r0, dd16 <wait_tx_ready+0x4a>
	__asm__ volatile(
    dcec:	f384 8811 	msr	BASEPRI, r4
    dcf0:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    dcf4:	2021      	movs	r0, #33	; 0x21
    dcf6:	2100      	movs	r1, #0
    dcf8:	f7fd fa90 	bl	b21c <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    dcfc:	2464      	movs	r4, #100	; 0x64
    dcfe:	4630      	mov	r0, r6
    dd00:	f7ff fec3 	bl	da8a <is_tx_ready>
    dd04:	4605      	mov	r5, r0
    dd06:	2800      	cmp	r0, #0
    dd08:	d1e3      	bne.n	dcd2 <wait_tx_ready+0x6>
    dd0a:	2001      	movs	r0, #1
    dd0c:	f000 f8e9 	bl	dee2 <nrfx_busy_wait>
    dd10:	3c01      	subs	r4, #1
    dd12:	d1f4      	bne.n	dcfe <wait_tx_ready+0x32>
    dd14:	e7dd      	b.n	dcd2 <wait_tx_ready+0x6>
}
    dd16:	4620      	mov	r0, r4
    dd18:	bd70      	pop	{r4, r5, r6, pc}

0000dd1a <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    dd1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dd1c:	4604      	mov	r4, r0
	return dev->config;
    dd1e:	6846      	ldr	r6, [r0, #4]
	return config->uarte_regs;
    dd20:	6835      	ldr	r5, [r6, #0]
	return dev->data;
    dd22:	6907      	ldr	r7, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    dd24:	2100      	movs	r1, #0
    dd26:	f8c5 1500 	str.w	r1, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    dd2a:	6038      	str	r0, [r7, #0]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
	if (err < 0) {
		return err;
	}
#else
	uarte_nrfx_pins_configure(dev, false);
    dd2c:	f7f8 fd0a 	bl	6744 <uarte_nrfx_pins_configure>
	return dev->data;
    dd30:	6921      	ldr	r1, [r4, #16]
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    dd32:	3104      	adds	r1, #4
    dd34:	4620      	mov	r0, r4
    dd36:	f7ff fe46 	bl	d9c6 <uarte_nrfx_configure>
	if (err) {
    dd3a:	4604      	mov	r4, r0
    dd3c:	bb68      	cbnz	r0, dd9a <uarte_instance_init+0x80>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    dd3e:	6873      	ldr	r3, [r6, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    dd40:	f013 0f02 	tst.w	r3, #2
    dd44:	d12b      	bne.n	dd9e <uarte_instance_init+0x84>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    dd46:	2308      	movs	r3, #8
    dd48:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    dd4c:	7a33      	ldrb	r3, [r6, #8]
    dd4e:	b95b      	cbnz	r3, dd68 <uarte_instance_init+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dd50:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    dd54:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    dd58:	f107 0315 	add.w	r3, r7, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    dd5c:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    dd60:	2301      	movs	r3, #1
    dd62:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dd66:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    dd68:	6873      	ldr	r3, [r6, #4]
    dd6a:	f013 0f02 	tst.w	r3, #2
    dd6e:	d103      	bne.n	dd78 <uarte_instance_init+0x5e>
    p_reg->INTENSET = mask;
    dd70:	f44f 7380 	mov.w	r3, #256	; 0x100
    dd74:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    dd78:	6873      	ldr	r3, [r6, #4]
    dd7a:	f013 0f10 	tst.w	r3, #16
    dd7e:	d003      	beq.n	dd88 <uarte_instance_init+0x6e>
    dd80:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    dd84:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    dd88:	3714      	adds	r7, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    dd8a:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    dd8e:	2300      	movs	r3, #0
    dd90:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dd94:	2301      	movs	r3, #1
    dd96:	60ab      	str	r3, [r5, #8]
    dd98:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    dd9a:	4620      	mov	r0, r4
    dd9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = endtx_stoptx_ppi_init(uarte, data);
    dd9e:	4639      	mov	r1, r7
    dda0:	4628      	mov	r0, r5
    dda2:	f7f8 fe7d 	bl	6aa0 <endtx_stoptx_ppi_init>
		if (err < 0) {
    dda6:	2800      	cmp	r0, #0
    dda8:	dacd      	bge.n	dd46 <uarte_instance_init+0x2c>
			return err;
    ddaa:	4604      	mov	r4, r0
    ddac:	e7f5      	b.n	dd9a <uarte_instance_init+0x80>

0000ddae <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    ddae:	b510      	push	{r4, lr}
    ddb0:	4604      	mov	r4, r0
    ddb2:	2200      	movs	r2, #0
    ddb4:	2101      	movs	r1, #1
    ddb6:	2002      	movs	r0, #2
    ddb8:	f7f5 ff64 	bl	3c84 <z_arm_irq_priority_set>
    ddbc:	2002      	movs	r0, #2
    ddbe:	f7f5 ff2f 	bl	3c20 <arch_irq_enable>
    ddc2:	2101      	movs	r1, #1
    ddc4:	4620      	mov	r0, r4
    ddc6:	f7ff ffa8 	bl	dd1a <uarte_instance_init>
    ddca:	bd10      	pop	{r4, pc}

0000ddcc <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    ddcc:	4770      	bx	lr

0000ddce <counter_sub>:
	return (a - b) & COUNTER_MAX;
    ddce:	1a40      	subs	r0, r0, r1
}
    ddd0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ddd4:	4770      	bx	lr

0000ddd6 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    ddd6:	f100 0350 	add.w	r3, r0, #80	; 0x50
    ddda:	009b      	lsls	r3, r3, #2
    dddc:	b29b      	uxth	r3, r3
    ddde:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    dde2:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    dde6:	2200      	movs	r2, #0
    dde8:	601a      	str	r2, [r3, #0]
    ddea:	681b      	ldr	r3, [r3, #0]
}
    ddec:	4770      	bx	lr

0000ddee <absolute_time_to_cc>:
}
    ddee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    ddf2:	4770      	bx	lr

0000ddf4 <full_int_lock>:
	__asm__ volatile(
    ddf4:	f04f 0320 	mov.w	r3, #32
    ddf8:	f3ef 8011 	mrs	r0, BASEPRI
    ddfc:	f383 8812 	msr	BASEPRI_MAX, r3
    de00:	f3bf 8f6f 	isb	sy
}
    de04:	4770      	bx	lr

0000de06 <full_int_unlock>:
	__asm__ volatile(
    de06:	f380 8811 	msr	BASEPRI, r0
    de0a:	f3bf 8f6f 	isb	sy
}
    de0e:	4770      	bx	lr

0000de10 <set_absolute_alarm>:
{
    de10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    de12:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    de14:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    de18:	f7f8 fe86 	bl	6b28 <get_comparator>
    de1c:	4607      	mov	r7, r0
    de1e:	e019      	b.n	de54 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    de20:	2013      	movs	r0, #19
    de22:	f000 fcd7 	bl	e7d4 <z_impl_k_busy_wait>
}
    de26:	e022      	b.n	de6e <set_absolute_alarm+0x5e>
		event_clear(chan);
    de28:	4630      	mov	r0, r6
    de2a:	f7ff ffd4 	bl	ddd6 <event_clear>
		event_enable(chan);
    de2e:	4630      	mov	r0, r6
    de30:	f7f8 fe82 	bl	6b38 <event_enable>
		set_comparator(chan, cc_val);
    de34:	4629      	mov	r1, r5
    de36:	4630      	mov	r0, r6
    de38:	f7f8 fe6c 	bl	6b14 <set_comparator>
		now2 = counter();
    de3c:	f7f8 fe90 	bl	6b60 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    de40:	4284      	cmp	r4, r0
    de42:	d01e      	beq.n	de82 <set_absolute_alarm+0x72>
    de44:	1c81      	adds	r1, r0, #2
    de46:	4628      	mov	r0, r5
    de48:	f7ff ffc1 	bl	ddce <counter_sub>
	} while ((now2 != now) &&
    de4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    de50:	d917      	bls.n	de82 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    de52:	462f      	mov	r7, r5
		now = counter();
    de54:	f7f8 fe84 	bl	6b60 <counter>
    de58:	4604      	mov	r4, r0
		set_comparator(chan, now);
    de5a:	4601      	mov	r1, r0
    de5c:	4630      	mov	r0, r6
    de5e:	f7f8 fe59 	bl	6b14 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    de62:	4621      	mov	r1, r4
    de64:	4638      	mov	r0, r7
    de66:	f7ff ffb2 	bl	ddce <counter_sub>
    de6a:	2801      	cmp	r0, #1
    de6c:	d0d8      	beq.n	de20 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    de6e:	1ca7      	adds	r7, r4, #2
    de70:	4639      	mov	r1, r7
    de72:	4628      	mov	r0, r5
    de74:	f7ff ffab 	bl	ddce <counter_sub>
    de78:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    de7c:	d9d4      	bls.n	de28 <set_absolute_alarm+0x18>
			cc_val = now + 2;
    de7e:	463d      	mov	r5, r7
    de80:	e7d2      	b.n	de28 <set_absolute_alarm+0x18>
}
    de82:	4628      	mov	r0, r5
    de84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000de86 <compare_set>:
{
    de86:	b5f0      	push	{r4, r5, r6, r7, lr}
    de88:	b083      	sub	sp, #12
    de8a:	4604      	mov	r4, r0
    de8c:	4617      	mov	r7, r2
    de8e:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    de90:	f7f8 fe6c 	bl	6b6c <compare_int_lock>
    de94:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    de96:	9b09      	ldr	r3, [sp, #36]	; 0x24
    de98:	9301      	str	r3, [sp, #4]
    de9a:	9b08      	ldr	r3, [sp, #32]
    de9c:	9300      	str	r3, [sp, #0]
    de9e:	463a      	mov	r2, r7
    dea0:	462b      	mov	r3, r5
    dea2:	4620      	mov	r0, r4
    dea4:	f7f8 ff50 	bl	6d48 <compare_set_nolocks>
    dea8:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    deaa:	4631      	mov	r1, r6
    deac:	4620      	mov	r0, r4
    deae:	f7f8 fec1 	bl	6c34 <compare_int_unlock>
}
    deb2:	4628      	mov	r0, r5
    deb4:	b003      	add	sp, #12
    deb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000deb8 <sys_clock_cycle_get_32>:
{
    deb8:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    deba:	f7f8 ff25 	bl	6d08 <z_nrf_rtc_timer_read>
}
    debe:	bd08      	pop	{r3, pc}

0000dec0 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    dec0:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    dec2:	f7fd fcbd 	bl	b840 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    dec6:	bd08      	pop	{r3, pc}

0000dec8 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    dec8:	b510      	push	{r4, lr}
    deca:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    decc:	f7f5 fd6a 	bl	39a4 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    ded0:	f7f5 fe26 	bl	3b20 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    ded4:	4620      	mov	r0, r4
    ded6:	f7ff fff3 	bl	dec0 <hw_cc3xx_init_internal>
	return res;
}
    deda:	bd10      	pop	{r4, pc}

0000dedc <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    dedc:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    dede:	4780      	blx	r0
}
    dee0:	bd08      	pop	{r3, pc}

0000dee2 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    dee2:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    dee4:	f000 fc76 	bl	e7d4 <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    dee8:	bd08      	pop	{r3, pc}

0000deea <pin_is_task_output>:
{
    deea:	b510      	push	{r4, lr}
    deec:	4604      	mov	r4, r0
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    deee:	f7f9 fb7b 	bl	75e8 <pin_is_output>
    def2:	b128      	cbz	r0, df00 <pin_is_task_output+0x16>
    def4:	4620      	mov	r0, r4
    def6:	f7f9 fb61 	bl	75bc <pin_in_use_by_te>
    defa:	b118      	cbz	r0, df04 <pin_is_task_output+0x1a>
    defc:	2001      	movs	r0, #1
    defe:	e000      	b.n	df02 <pin_is_task_output+0x18>
    df00:	2000      	movs	r0, #0
}
    df02:	bd10      	pop	{r4, pc}
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    df04:	2000      	movs	r0, #0
    df06:	e7fc      	b.n	df02 <pin_is_task_output+0x18>

0000df08 <pin_is_input>:
{
    df08:	b508      	push	{r3, lr}
    return !pin_is_output(pin);
    df0a:	f7f9 fb6d 	bl	75e8 <pin_is_output>
    df0e:	f080 0001 	eor.w	r0, r0, #1
}
    df12:	b2c0      	uxtb	r0, r0
    df14:	bd08      	pop	{r3, pc}

0000df16 <gpiote_polarity_to_trigger>:
}
    df16:	4770      	bx	lr

0000df18 <gpiote_trigger_to_polarity>:
}
    df18:	4770      	bx	lr

0000df1a <is_level>:
}
    df1a:	2803      	cmp	r0, #3
    df1c:	bf94      	ite	ls
    df1e:	2000      	movls	r0, #0
    df20:	2001      	movhi	r0, #1
    df22:	4770      	bx	lr

0000df24 <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
    df24:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    df28:	f44f 7260 	mov.w	r2, #896	; 0x380
    df2c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    df30:	4770      	bx	lr

0000df32 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
    df32:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    df36:	f44f 7260 	mov.w	r2, #896	; 0x380
    df3a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    df3e:	4770      	bx	lr

0000df40 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
    df40:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
    df42:	f7fa f857 	bl	7ff4 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
    df46:	f7f9 faf1 	bl	752c <nrfx_clock_irq_handler>
}
    df4a:	bd08      	pop	{r3, pc}

0000df4c <nrf52_errata_223>:
}
    df4c:	2000      	movs	r0, #0
    df4e:	4770      	bx	lr

0000df50 <nrfx_usbd_consumer>:
{
    df50:	b430      	push	{r4, r5}
    size_t size = p_transfer->size;
    df52:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
    df54:	42a3      	cmp	r3, r4
    df56:	d908      	bls.n	df6a <nrfx_usbd_consumer+0x1a>
        p_next->size = 0;
    df58:	2500      	movs	r5, #0
    df5a:	6045      	str	r5, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    df5c:	6809      	ldr	r1, [r1, #0]
    df5e:	6001      	str	r1, [r0, #0]
    return (ep_size == data_size) && (size != 0);
    df60:	429a      	cmp	r2, r3
    df62:	d00b      	beq.n	df7c <nrfx_usbd_consumer+0x2c>
    df64:	2000      	movs	r0, #0
}
    df66:	bc30      	pop	{r4, r5}
    df68:	4770      	bx	lr
        p_next->size = data_size;
    df6a:	6043      	str	r3, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    df6c:	680d      	ldr	r5, [r1, #0]
    df6e:	6005      	str	r5, [r0, #0]
        size -= data_size;
    df70:	1ae4      	subs	r4, r4, r3
        p_transfer->size = size;
    df72:	604c      	str	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
    df74:	6808      	ldr	r0, [r1, #0]
    df76:	4418      	add	r0, r3
    df78:	6008      	str	r0, [r1, #0]
    df7a:	e7f1      	b.n	df60 <nrfx_usbd_consumer+0x10>
    return (ep_size == data_size) && (size != 0);
    df7c:	b90c      	cbnz	r4, df82 <nrfx_usbd_consumer+0x32>
    df7e:	2000      	movs	r0, #0
    df80:	e7f1      	b.n	df66 <nrfx_usbd_consumer+0x16>
    df82:	2001      	movs	r0, #1
    df84:	e7ef      	b.n	df66 <nrfx_usbd_consumer+0x16>

0000df86 <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
    df86:	684b      	ldr	r3, [r1, #4]
    if (tx_size > ep_size)
    df88:	4293      	cmp	r3, r2
    df8a:	d800      	bhi.n	df8e <nrfx_usbd_feeder_ram+0x8>
    size_t tx_size = p_transfer->size;
    df8c:	461a      	mov	r2, r3
    p_next->p_data = p_transfer->p_data;
    df8e:	680b      	ldr	r3, [r1, #0]
    df90:	6003      	str	r3, [r0, #0]
    p_next->size = tx_size;
    df92:	6042      	str	r2, [r0, #4]
    p_transfer->size -= tx_size;
    df94:	6848      	ldr	r0, [r1, #4]
    df96:	1a80      	subs	r0, r0, r2
    df98:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    df9a:	680b      	ldr	r3, [r1, #0]
    df9c:	441a      	add	r2, r3
    df9e:	600a      	str	r2, [r1, #0]
}
    dfa0:	3800      	subs	r0, #0
    dfa2:	bf18      	it	ne
    dfa4:	2001      	movne	r0, #1
    dfa6:	4770      	bx	lr

0000dfa8 <nrfx_usbd_feeder_ram_zlp>:
    size_t tx_size = p_transfer->size;
    dfa8:	684b      	ldr	r3, [r1, #4]
    if (tx_size > ep_size)
    dfaa:	4293      	cmp	r3, r2
    dfac:	d800      	bhi.n	dfb0 <nrfx_usbd_feeder_ram_zlp+0x8>
    size_t tx_size = p_transfer->size;
    dfae:	461a      	mov	r2, r3
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    dfb0:	b162      	cbz	r2, dfcc <nrfx_usbd_feeder_ram_zlp+0x24>
    dfb2:	680b      	ldr	r3, [r1, #0]
    dfb4:	6003      	str	r3, [r0, #0]
    p_next->size = tx_size;
    dfb6:	6042      	str	r2, [r0, #4]
    p_transfer->size -= tx_size;
    dfb8:	684b      	ldr	r3, [r1, #4]
    dfba:	1a9b      	subs	r3, r3, r2
    dfbc:	604b      	str	r3, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    dfbe:	680b      	ldr	r3, [r1, #0]
    dfc0:	4413      	add	r3, r2
    dfc2:	600b      	str	r3, [r1, #0]
}
    dfc4:	1e10      	subs	r0, r2, #0
    dfc6:	bf18      	it	ne
    dfc8:	2001      	movne	r0, #1
    dfca:	4770      	bx	lr
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    dfcc:	2300      	movs	r3, #0
    dfce:	e7f1      	b.n	dfb4 <nrfx_usbd_feeder_ram_zlp+0xc>

0000dfd0 <ev_started_handler>:
}
    dfd0:	4770      	bx	lr

0000dfd2 <usbd_dma_scheduler_algorithm>:
}
    dfd2:	fa90 f0a0 	rbit	r0, r0
    dfd6:	fab0 f080 	clz	r0, r0
    dfda:	4770      	bx	lr

0000dfdc <nrfx_usbd_feeder_flash>:
{
    dfdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dfe0:	4606      	mov	r6, r0
    dfe2:	460c      	mov	r4, r1
    dfe4:	4615      	mov	r5, r2
    size_t tx_size  = p_transfer->size;
    dfe6:	f8d1 8004 	ldr.w	r8, [r1, #4]
    void * p_buffer = nrfx_usbd_feeder_buffer_get();
    dfea:	f7fa fecd 	bl	8d88 <nrfx_usbd_feeder_buffer_get>
    dfee:	4607      	mov	r7, r0
    if (tx_size > ep_size)
    dff0:	45a8      	cmp	r8, r5
    dff2:	d800      	bhi.n	dff6 <nrfx_usbd_feeder_flash+0x1a>
    size_t tx_size  = p_transfer->size;
    dff4:	4645      	mov	r5, r8
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    dff6:	462a      	mov	r2, r5
    dff8:	6821      	ldr	r1, [r4, #0]
    dffa:	4638      	mov	r0, r7
    dffc:	f7ff f9d2 	bl	d3a4 <memcpy>
    p_next->p_data.tx = p_buffer;
    e000:	6037      	str	r7, [r6, #0]
    p_next->size = tx_size;
    e002:	6075      	str	r5, [r6, #4]
    p_transfer->size -= tx_size;
    e004:	6860      	ldr	r0, [r4, #4]
    e006:	1b40      	subs	r0, r0, r5
    e008:	6060      	str	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    e00a:	6822      	ldr	r2, [r4, #0]
    e00c:	442a      	add	r2, r5
    e00e:	6022      	str	r2, [r4, #0]
}
    e010:	3800      	subs	r0, #0
    e012:	bf18      	it	ne
    e014:	2001      	movne	r0, #1
    e016:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e01a <nrfx_usbd_feeder_flash_zlp>:
{
    e01a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e01e:	4606      	mov	r6, r0
    e020:	460d      	mov	r5, r1
    e022:	4614      	mov	r4, r2
    size_t tx_size  = p_transfer->size;
    e024:	f8d1 8004 	ldr.w	r8, [r1, #4]
    void * p_buffer = nrfx_usbd_feeder_buffer_get();
    e028:	f7fa feae 	bl	8d88 <nrfx_usbd_feeder_buffer_get>
    e02c:	4607      	mov	r7, r0
    if (tx_size > ep_size)
    e02e:	45a0      	cmp	r8, r4
    e030:	d800      	bhi.n	e034 <nrfx_usbd_feeder_flash_zlp+0x1a>
    size_t tx_size  = p_transfer->size;
    e032:	4644      	mov	r4, r8
    if (tx_size != 0)
    e034:	b96c      	cbnz	r4, e052 <nrfx_usbd_feeder_flash_zlp+0x38>
        p_next->p_data.tx = NULL;
    e036:	2300      	movs	r3, #0
    e038:	6033      	str	r3, [r6, #0]
    p_next->size = tx_size;
    e03a:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
    e03c:	686b      	ldr	r3, [r5, #4]
    e03e:	1b1b      	subs	r3, r3, r4
    e040:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
    e042:	682b      	ldr	r3, [r5, #0]
    e044:	4423      	add	r3, r4
    e046:	602b      	str	r3, [r5, #0]
}
    e048:	1e20      	subs	r0, r4, #0
    e04a:	bf18      	it	ne
    e04c:	2001      	movne	r0, #1
    e04e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    e052:	4622      	mov	r2, r4
    e054:	6829      	ldr	r1, [r5, #0]
    e056:	4638      	mov	r0, r7
    e058:	f7ff f9a4 	bl	d3a4 <memcpy>
        p_next->p_data.tx = p_buffer;
    e05c:	6037      	str	r7, [r6, #0]
    e05e:	e7ec      	b.n	e03a <nrfx_usbd_feeder_flash_zlp+0x20>

0000e060 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    e060:	b508      	push	{r3, lr}
  _DoInit();
    e062:	f7fb fed3 	bl	9e0c <_DoInit>
}
    e066:	bd08      	pop	{r3, pc}

0000e068 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    e068:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    e06a:	f7ff fff9 	bl	e060 <SEGGER_RTT_Init>

	return 0;
}
    e06e:	2000      	movs	r0, #0
    e070:	bd08      	pop	{r3, pc}

0000e072 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    e072:	b148      	cbz	r0, e088 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    e074:	68c3      	ldr	r3, [r0, #12]
    e076:	8818      	ldrh	r0, [r3, #0]
    e078:	f3c0 0008 	ubfx	r0, r0, #0, #9
    e07c:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    e080:	bf14      	ite	ne
    e082:	2000      	movne	r0, #0
    e084:	2001      	moveq	r0, #1
    e086:	4770      	bx	lr
		return false;
    e088:	2000      	movs	r0, #0
}
    e08a:	4770      	bx	lr

0000e08c <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    e08c:	68c2      	ldr	r2, [r0, #12]
    e08e:	6903      	ldr	r3, [r0, #16]
    e090:	431a      	orrs	r2, r3
    e092:	f012 0203 	ands.w	r2, r2, #3
    e096:	d10d      	bne.n	e0b4 <create_free_list+0x28>
	slab->free_list = NULL;
    e098:	2100      	movs	r1, #0
    e09a:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    e09c:	e005      	b.n	e0aa <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    e09e:	6941      	ldr	r1, [r0, #20]
    e0a0:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    e0a2:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
    e0a4:	68c1      	ldr	r1, [r0, #12]
    e0a6:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    e0a8:	3201      	adds	r2, #1
    e0aa:	6881      	ldr	r1, [r0, #8]
    e0ac:	4291      	cmp	r1, r2
    e0ae:	d8f6      	bhi.n	e09e <create_free_list+0x12>
	return 0;
    e0b0:	2000      	movs	r0, #0
    e0b2:	4770      	bx	lr
		return -EINVAL;
    e0b4:	f06f 0015 	mvn.w	r0, #21
}
    e0b8:	4770      	bx	lr

0000e0ba <k_mem_slab_init>:
{
    e0ba:	b510      	push	{r4, lr}
    e0bc:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    e0be:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
    e0c0:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
    e0c2:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    e0c4:	2300      	movs	r3, #0
    e0c6:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
    e0c8:	f7ff ffe0 	bl	e08c <create_free_list>
	if (rc < 0) {
    e0cc:	2800      	cmp	r0, #0
    e0ce:	db01      	blt.n	e0d4 <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
    e0d0:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    e0d2:	6064      	str	r4, [r4, #4]
}
    e0d4:	bd10      	pop	{r4, pc}

0000e0d6 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    e0d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e0d8:	4604      	mov	r4, r0
    e0da:	460d      	mov	r5, r1
	__asm__ volatile(
    e0dc:	f04f 0320 	mov.w	r3, #32
    e0e0:	f3ef 8611 	mrs	r6, BASEPRI
    e0e4:	f383 8812 	msr	BASEPRI_MAX, r3
    e0e8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    e0ec:	6943      	ldr	r3, [r0, #20]
    e0ee:	b163      	cbz	r3, e10a <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    e0f0:	682b      	ldr	r3, [r5, #0]
    e0f2:	6962      	ldr	r2, [r4, #20]
    e0f4:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    e0f6:	682b      	ldr	r3, [r5, #0]
    e0f8:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    e0fa:	69a3      	ldr	r3, [r4, #24]
    e0fc:	3b01      	subs	r3, #1
    e0fe:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    e100:	f386 8811 	msr	BASEPRI, r6
    e104:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    e108:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e10a:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    e10e:	f000 fa70 	bl	e5f2 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    e112:	2800      	cmp	r0, #0
    e114:	d0ec      	beq.n	e0f0 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    e116:	682a      	ldr	r2, [r5, #0]
    e118:	2100      	movs	r1, #0
    e11a:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    e11e:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    e120:	f000 f9a5 	bl	e46e <z_ready_thread>
			z_reschedule(&slab->lock, key);
    e124:	4631      	mov	r1, r6
    e126:	4638      	mov	r0, r7
    e128:	f7fc fd4a 	bl	abc0 <z_reschedule>
			return;
    e12c:	e7ec      	b.n	e108 <k_mem_slab_free+0x32>

0000e12e <setup_thread_stack>:
{
    e12e:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    e130:	3207      	adds	r2, #7
    e132:	f022 0207 	bic.w	r2, r2, #7
    e136:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    e13a:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    e13e:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    e142:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    e146:	2200      	movs	r2, #0
    e148:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
    e14c:	18c8      	adds	r0, r1, r3
    e14e:	bc10      	pop	{r4}
    e150:	4770      	bx	lr

0000e152 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    e152:	f3ef 8005 	mrs	r0, IPSR
}
    e156:	3800      	subs	r0, #0
    e158:	bf18      	it	ne
    e15a:	2001      	movne	r0, #1
    e15c:	4770      	bx	lr

0000e15e <k_thread_name_get>:
}
    e15e:	3074      	adds	r0, #116	; 0x74
    e160:	4770      	bx	lr

0000e162 <z_impl_k_thread_start>:
{
    e162:	b508      	push	{r3, lr}
	z_sched_start(thread);
    e164:	f7fc fe56 	bl	ae14 <z_sched_start>
}
    e168:	bd08      	pop	{r3, pc}

0000e16a <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    e16a:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    e16c:	2400      	movs	r4, #0
    e16e:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    e170:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    e172:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
    e174:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    e176:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    e178:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    e17a:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    e17c:	bc10      	pop	{r4}
    e17e:	4770      	bx	lr

0000e180 <z_impl_k_thread_create>:
{
    e180:	b5f0      	push	{r4, r5, r6, r7, lr}
    e182:	b087      	sub	sp, #28
    e184:	4604      	mov	r4, r0
    e186:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    e18a:	2500      	movs	r5, #0
    e18c:	9505      	str	r5, [sp, #20]
    e18e:	9d10      	ldr	r5, [sp, #64]	; 0x40
    e190:	9504      	str	r5, [sp, #16]
    e192:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    e194:	9503      	str	r5, [sp, #12]
    e196:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    e198:	9502      	str	r5, [sp, #8]
    e19a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    e19c:	9501      	str	r5, [sp, #4]
    e19e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    e1a0:	9500      	str	r5, [sp, #0]
    e1a2:	f7fc f92b 	bl	a3fc <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    e1a6:	f1b7 3fff 	cmp.w	r7, #4294967295
    e1aa:	bf08      	it	eq
    e1ac:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    e1b0:	d102      	bne.n	e1b8 <z_impl_k_thread_create+0x38>
}
    e1b2:	4620      	mov	r0, r4
    e1b4:	b007      	add	sp, #28
    e1b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
    e1b8:	4632      	mov	r2, r6
    e1ba:	463b      	mov	r3, r7
    e1bc:	4620      	mov	r0, r4
    e1be:	f7fc f90b 	bl	a3d8 <schedule_new_thread>
    e1c2:	e7f6      	b.n	e1b2 <z_impl_k_thread_create+0x32>

0000e1c4 <z_pm_save_idle_exit>:
{
    e1c4:	b508      	push	{r3, lr}
	pm_system_resume();
    e1c6:	f7f5 fac9 	bl	375c <pm_system_resume>
	sys_clock_idle_exit();
    e1ca:	f7ff fdff 	bl	ddcc <sys_clock_idle_exit>
}
    e1ce:	bd08      	pop	{r3, pc}

0000e1d0 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    e1d0:	4288      	cmp	r0, r1
    e1d2:	da00      	bge.n	e1d6 <new_prio_for_inheritance+0x6>
    e1d4:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    e1d6:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    e1da:	db01      	blt.n	e1e0 <new_prio_for_inheritance+0x10>
    e1dc:	4608      	mov	r0, r1
    e1de:	4770      	bx	lr
    e1e0:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    e1e4:	4770      	bx	lr

0000e1e6 <adjust_owner_prio>:
{
    e1e6:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    e1e8:	6880      	ldr	r0, [r0, #8]
    e1ea:	f990 300e 	ldrsb.w	r3, [r0, #14]
    e1ee:	428b      	cmp	r3, r1
    e1f0:	d101      	bne.n	e1f6 <adjust_owner_prio+0x10>
	return false;
    e1f2:	2000      	movs	r0, #0
}
    e1f4:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    e1f6:	f7fc fe5b 	bl	aeb0 <z_set_prio>
    e1fa:	e7fb      	b.n	e1f4 <adjust_owner_prio+0xe>

0000e1fc <z_impl_k_mutex_init>:
{
    e1fc:	4603      	mov	r3, r0
	mutex->owner = NULL;
    e1fe:	2000      	movs	r0, #0
    e200:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    e202:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    e204:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    e206:	605b      	str	r3, [r3, #4]
}
    e208:	4770      	bx	lr

0000e20a <prepare_thread_to_run>:
{
    e20a:	b508      	push	{r3, lr}
    e20c:	2200      	movs	r2, #0
    e20e:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
    e212:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
    e214:	f000 f92b 	bl	e46e <z_ready_thread>
}
    e218:	bd08      	pop	{r3, pc}

0000e21a <queue_insert>:
{
    e21a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e21e:	4605      	mov	r5, r0
    e220:	460e      	mov	r6, r1
    e222:	4614      	mov	r4, r2
    e224:	461f      	mov	r7, r3
    e226:	f89d 2020 	ldrb.w	r2, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    e22a:	f100 0808 	add.w	r8, r0, #8
	__asm__ volatile(
    e22e:	f04f 0320 	mov.w	r3, #32
    e232:	f3ef 8911 	mrs	r9, BASEPRI
    e236:	f383 8812 	msr	BASEPRI_MAX, r3
    e23a:	f3bf 8f6f 	isb	sy
	if (is_append) {
    e23e:	b102      	cbz	r2, e242 <queue_insert+0x28>
	return list->tail;
    e240:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    e242:	4640      	mov	r0, r8
    e244:	f000 f9d5 	bl	e5f2 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
    e248:	b9a0      	cbnz	r0, e274 <queue_insert+0x5a>
	if (alloc) {
    e24a:	b9e7      	cbnz	r7, e286 <queue_insert+0x6c>
	node->next_and_flags = flags;
    e24c:	2300      	movs	r3, #0
    e24e:	6023      	str	r3, [r4, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    e250:	b356      	cbz	r6, e2a8 <queue_insert+0x8e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    e252:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    e254:	f033 0303 	bics.w	r3, r3, #3
    e258:	d134      	bne.n	e2c4 <queue_insert+0xaa>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    e25a:	6823      	ldr	r3, [r4, #0]
    e25c:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    e260:	6023      	str	r3, [r4, #0]
	return list->tail;
    e262:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND(sflist, sfnode)
    e264:	b35a      	cbz	r2, e2be <queue_insert+0xa4>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    e266:	6813      	ldr	r3, [r2, #0]
    e268:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    e26c:	4323      	orrs	r3, r4
    e26e:	6013      	str	r3, [r2, #0]
	list->tail = node;
    e270:	606c      	str	r4, [r5, #4]
}
    e272:	e031      	b.n	e2d8 <queue_insert+0xbe>
		prepare_thread_to_run(first_pending_thread, data);
    e274:	4621      	mov	r1, r4
    e276:	f7ff ffc8 	bl	e20a <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
    e27a:	4649      	mov	r1, r9
    e27c:	4640      	mov	r0, r8
    e27e:	f7fc fc9f 	bl	abc0 <z_reschedule>
		return 0;
    e282:	2000      	movs	r0, #0
    e284:	e02d      	b.n	e2e2 <queue_insert+0xc8>
	return z_thread_aligned_alloc(0, size);
    e286:	2108      	movs	r1, #8
    e288:	2000      	movs	r0, #0
    e28a:	f7fd fa8b 	bl	b7a4 <z_thread_aligned_alloc>
		if (anode == NULL) {
    e28e:	b120      	cbz	r0, e29a <queue_insert+0x80>
		anode->data = data;
    e290:	6044      	str	r4, [r0, #4]
	node->next_and_flags = flags;
    e292:	2201      	movs	r2, #1
    e294:	6002      	str	r2, [r0, #0]
		data = anode;
    e296:	4604      	mov	r4, r0
    e298:	e7da      	b.n	e250 <queue_insert+0x36>
	__asm__ volatile(
    e29a:	f389 8811 	msr	BASEPRI, r9
    e29e:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    e2a2:	f06f 000b 	mvn.w	r0, #11
    e2a6:	e01c      	b.n	e2e2 <queue_insert+0xc8>
	return list->head;
    e2a8:	682a      	ldr	r2, [r5, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    e2aa:	6823      	ldr	r3, [r4, #0]
    e2ac:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    e2b0:	4313      	orrs	r3, r2
    e2b2:	6023      	str	r3, [r4, #0]
	list->head = node;
    e2b4:	602c      	str	r4, [r5, #0]
	return list->tail;
    e2b6:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
    e2b8:	b973      	cbnz	r3, e2d8 <queue_insert+0xbe>
	list->tail = node;
    e2ba:	606c      	str	r4, [r5, #4]
}
    e2bc:	e00c      	b.n	e2d8 <queue_insert+0xbe>
	list->tail = node;
    e2be:	606c      	str	r4, [r5, #4]
	list->head = node;
    e2c0:	602c      	str	r4, [r5, #0]
}
    e2c2:	e009      	b.n	e2d8 <queue_insert+0xbe>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    e2c4:	6822      	ldr	r2, [r4, #0]
    e2c6:	f002 0203 	and.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    e2ca:	4313      	orrs	r3, r2
    e2cc:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    e2ce:	6833      	ldr	r3, [r6, #0]
    e2d0:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    e2d4:	431c      	orrs	r4, r3
    e2d6:	6034      	str	r4, [r6, #0]
	z_reschedule(&queue->lock, key);
    e2d8:	4649      	mov	r1, r9
    e2da:	4640      	mov	r0, r8
    e2dc:	f7fc fc70 	bl	abc0 <z_reschedule>
	return 0;
    e2e0:	2000      	movs	r0, #0
}
    e2e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000e2e6 <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
    e2e6:	b160      	cbz	r0, e302 <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    e2e8:	6803      	ldr	r3, [r0, #0]
    e2ea:	f013 0f03 	tst.w	r3, #3
    e2ee:	d008      	beq.n	e302 <z_queue_node_peek+0x1c>
{
    e2f0:	b510      	push	{r4, lr}
		ret = anode->data;
    e2f2:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    e2f4:	b909      	cbnz	r1, e2fa <z_queue_node_peek+0x14>
		ret = anode->data;
    e2f6:	4620      	mov	r0, r4
}
    e2f8:	bd10      	pop	{r4, pc}
			k_free(anode);
    e2fa:	f000 fae2 	bl	e8c2 <k_free>
		ret = anode->data;
    e2fe:	4620      	mov	r0, r4
    e300:	e7fa      	b.n	e2f8 <z_queue_node_peek+0x12>
}
    e302:	4770      	bx	lr

0000e304 <k_queue_append>:
{
    e304:	b500      	push	{lr}
    e306:	b083      	sub	sp, #12
    e308:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
    e30a:	2301      	movs	r3, #1
    e30c:	9300      	str	r3, [sp, #0]
    e30e:	2300      	movs	r3, #0
    e310:	4619      	mov	r1, r3
    e312:	f7ff ff82 	bl	e21a <queue_insert>
}
    e316:	b003      	add	sp, #12
    e318:	f85d fb04 	ldr.w	pc, [sp], #4

0000e31c <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    e31c:	b13a      	cbz	r2, e32e <z_impl_k_sem_init+0x12>
    e31e:	428a      	cmp	r2, r1
    e320:	d308      	bcc.n	e334 <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
    e322:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    e324:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    e326:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    e328:	6040      	str	r0, [r0, #4]
	return 0;
    e32a:	2000      	movs	r0, #0
    e32c:	4770      	bx	lr
		return -EINVAL;
    e32e:	f06f 0015 	mvn.w	r0, #21
    e332:	4770      	bx	lr
    e334:	f06f 0015 	mvn.w	r0, #21
}
    e338:	4770      	bx	lr

0000e33a <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    e33a:	2300      	movs	r3, #0
    e33c:	6003      	str	r3, [r0, #0]
    e33e:	6083      	str	r3, [r0, #8]
    e340:	60c3      	str	r3, [r0, #12]
    e342:	6041      	str	r1, [r0, #4]
}
    e344:	4770      	bx	lr

0000e346 <k_work_submit_to_queue>:
{
    e346:	b530      	push	{r4, r5, lr}
    e348:	b083      	sub	sp, #12
    e34a:	9001      	str	r0, [sp, #4]
    e34c:	4608      	mov	r0, r1
	__asm__ volatile(
    e34e:	f04f 0320 	mov.w	r3, #32
    e352:	f3ef 8511 	mrs	r5, BASEPRI
    e356:	f383 8812 	msr	BASEPRI_MAX, r3
    e35a:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    e35e:	a901      	add	r1, sp, #4
    e360:	f7fc fa6e 	bl	a840 <submit_to_queue_locked>
    e364:	4604      	mov	r4, r0
	__asm__ volatile(
    e366:	f385 8811 	msr	BASEPRI, r5
    e36a:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
    e36e:	2800      	cmp	r0, #0
    e370:	dc02      	bgt.n	e378 <k_work_submit_to_queue+0x32>
}
    e372:	4620      	mov	r0, r4
    e374:	b003      	add	sp, #12
    e376:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
    e378:	f7fc ff82 	bl	b280 <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
    e37c:	2800      	cmp	r0, #0
    e37e:	d0f8      	beq.n	e372 <k_work_submit_to_queue+0x2c>
	z_impl_k_yield();
    e380:	f7fc feb8 	bl	b0f4 <z_impl_k_yield>
	return ret;
    e384:	e7f5      	b.n	e372 <k_work_submit_to_queue+0x2c>

0000e386 <thread_active_elsewhere>:
}
    e386:	2000      	movs	r0, #0
    e388:	4770      	bx	lr

0000e38a <pended_on_thread>:
}
    e38a:	6880      	ldr	r0, [r0, #8]
    e38c:	4770      	bx	lr

0000e38e <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    e38e:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    e392:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    e396:	4283      	cmp	r3, r0
    e398:	d001      	beq.n	e39e <z_sched_prio_cmp+0x10>
		return b2 - b1;
    e39a:	1ac0      	subs	r0, r0, r3
    e39c:	4770      	bx	lr
	return 0;
    e39e:	2000      	movs	r0, #0
}
    e3a0:	4770      	bx	lr

0000e3a2 <z_unpend_thread_no_timeout>:
{
    e3a2:	b538      	push	{r3, r4, r5, lr}
    e3a4:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    e3a6:	2300      	movs	r3, #0
	__asm__ volatile(
    e3a8:	f04f 0220 	mov.w	r2, #32
    e3ac:	f3ef 8511 	mrs	r5, BASEPRI
    e3b0:	f382 8812 	msr	BASEPRI_MAX, r2
    e3b4:	f3bf 8f6f 	isb	sy
    e3b8:	b98b      	cbnz	r3, e3de <z_unpend_thread_no_timeout+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    e3ba:	4620      	mov	r0, r4
    e3bc:	f7ff ffe5 	bl	e38a <pended_on_thread>
    e3c0:	4621      	mov	r1, r4
    e3c2:	f000 f822 	bl	e40a <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    e3c6:	7b63      	ldrb	r3, [r4, #13]
    e3c8:	f023 0302 	bic.w	r3, r3, #2
    e3cc:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    e3ce:	2300      	movs	r3, #0
    e3d0:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    e3d2:	f385 8811 	msr	BASEPRI, r5
    e3d6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    e3da:	2301      	movs	r3, #1
    e3dc:	e7ec      	b.n	e3b8 <z_unpend_thread_no_timeout+0x16>
}
    e3de:	bd38      	pop	{r3, r4, r5, pc}

0000e3e0 <z_reschedule_irqlock>:
{
    e3e0:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    e3e2:	4603      	mov	r3, r0
    e3e4:	b920      	cbnz	r0, e3f0 <z_reschedule_irqlock+0x10>
    e3e6:	f3ef 8205 	mrs	r2, IPSR
    e3ea:	b942      	cbnz	r2, e3fe <z_reschedule_irqlock+0x1e>
    e3ec:	2201      	movs	r2, #1
    e3ee:	e000      	b.n	e3f2 <z_reschedule_irqlock+0x12>
    e3f0:	2200      	movs	r2, #0
	if (resched(key)) {
    e3f2:	b932      	cbnz	r2, e402 <z_reschedule_irqlock+0x22>
    e3f4:	f383 8811 	msr	BASEPRI, r3
    e3f8:	f3bf 8f6f 	isb	sy
}
    e3fc:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    e3fe:	2200      	movs	r2, #0
    e400:	e7f7      	b.n	e3f2 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    e402:	4618      	mov	r0, r3
    e404:	f7f5 fc74 	bl	3cf0 <arch_swap>
	return ret;
    e408:	e7f8      	b.n	e3fc <z_reschedule_irqlock+0x1c>

0000e40a <z_priq_dumb_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    e40a:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
    e40c:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
    e40e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    e410:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    e412:	2300      	movs	r3, #0
    e414:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    e416:	604b      	str	r3, [r1, #4]
}
    e418:	4770      	bx	lr

0000e41a <z_unpend_thread>:
{
    e41a:	b538      	push	{r3, r4, r5, lr}
    e41c:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    e41e:	2300      	movs	r3, #0
	__asm__ volatile(
    e420:	f04f 0220 	mov.w	r2, #32
    e424:	f3ef 8511 	mrs	r5, BASEPRI
    e428:	f382 8812 	msr	BASEPRI_MAX, r2
    e42c:	f3bf 8f6f 	isb	sy
    e430:	b98b      	cbnz	r3, e456 <z_unpend_thread+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    e432:	4620      	mov	r0, r4
    e434:	f7ff ffa9 	bl	e38a <pended_on_thread>
    e438:	4621      	mov	r1, r4
    e43a:	f7ff ffe6 	bl	e40a <z_priq_dumb_remove>
    e43e:	7b63      	ldrb	r3, [r4, #13]
    e440:	f023 0302 	bic.w	r3, r3, #2
    e444:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    e446:	2300      	movs	r3, #0
    e448:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    e44a:	f385 8811 	msr	BASEPRI, r5
    e44e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    e452:	2301      	movs	r3, #1
    e454:	e7ec      	b.n	e430 <z_unpend_thread+0x16>
	return z_abort_timeout(&thread->base.timeout);
    e456:	f104 0018 	add.w	r0, r4, #24
    e45a:	f000 f958 	bl	e70e <z_abort_timeout>
}
    e45e:	bd38      	pop	{r3, r4, r5, pc}

0000e460 <z_priq_dumb_best>:
{
    e460:	4603      	mov	r3, r0
	return list->head == list;
    e462:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e464:	4283      	cmp	r3, r0
    e466:	d000      	beq.n	e46a <z_priq_dumb_best+0xa>
}
    e468:	4770      	bx	lr
	struct k_thread *thread = NULL;
    e46a:	2000      	movs	r0, #0
	return thread;
    e46c:	e7fc      	b.n	e468 <z_priq_dumb_best+0x8>

0000e46e <z_ready_thread>:
{
    e46e:	b538      	push	{r3, r4, r5, lr}
    e470:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    e472:	2300      	movs	r3, #0
	__asm__ volatile(
    e474:	f04f 0220 	mov.w	r2, #32
    e478:	f3ef 8511 	mrs	r5, BASEPRI
    e47c:	f382 8812 	msr	BASEPRI_MAX, r2
    e480:	f3bf 8f6f 	isb	sy
    e484:	e007      	b.n	e496 <z_ready_thread+0x28>
			ready_thread(thread);
    e486:	4620      	mov	r0, r4
    e488:	f7fc fc84 	bl	ad94 <ready_thread>
	__asm__ volatile(
    e48c:	f385 8811 	msr	BASEPRI, r5
    e490:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    e494:	2301      	movs	r3, #1
    e496:	b92b      	cbnz	r3, e4a4 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
    e498:	4620      	mov	r0, r4
    e49a:	f7ff ff74 	bl	e386 <thread_active_elsewhere>
    e49e:	2800      	cmp	r0, #0
    e4a0:	d1f4      	bne.n	e48c <z_ready_thread+0x1e>
    e4a2:	e7f0      	b.n	e486 <z_ready_thread+0x18>
}
    e4a4:	bd38      	pop	{r3, r4, r5, pc}

0000e4a6 <z_thread_timeout>:
{
    e4a6:	b570      	push	{r4, r5, r6, lr}
    e4a8:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    e4aa:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
    e4ae:	2300      	movs	r3, #0
	__asm__ volatile(
    e4b0:	f04f 0220 	mov.w	r2, #32
    e4b4:	f3ef 8611 	mrs	r6, BASEPRI
    e4b8:	f382 8812 	msr	BASEPRI_MAX, r2
    e4bc:	f3bf 8f6f 	isb	sy
    e4c0:	e019      	b.n	e4f6 <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    e4c2:	4628      	mov	r0, r5
    e4c4:	f7ff ff61 	bl	e38a <pended_on_thread>
    e4c8:	4629      	mov	r1, r5
    e4ca:	f7ff ff9e 	bl	e40a <z_priq_dumb_remove>
    e4ce:	7b6b      	ldrb	r3, [r5, #13]
    e4d0:	f023 0302 	bic.w	r3, r3, #2
    e4d4:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    e4d6:	2300      	movs	r3, #0
    e4d8:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    e4da:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    e4de:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
    e4e2:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    e4e6:	4628      	mov	r0, r5
    e4e8:	f7fc fc54 	bl	ad94 <ready_thread>
	__asm__ volatile(
    e4ec:	f386 8811 	msr	BASEPRI, r6
    e4f0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    e4f4:	2301      	movs	r3, #1
    e4f6:	b94b      	cbnz	r3, e50c <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    e4f8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    e4fc:	f013 0f28 	tst.w	r3, #40	; 0x28
    e500:	d1f4      	bne.n	e4ec <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
    e502:	f854 3c10 	ldr.w	r3, [r4, #-16]
    e506:	2b00      	cmp	r3, #0
    e508:	d1db      	bne.n	e4c2 <z_thread_timeout+0x1c>
    e50a:	e7e6      	b.n	e4da <z_thread_timeout+0x34>
}
    e50c:	bd70      	pop	{r4, r5, r6, pc}

0000e50e <add_to_waitq_locked>:
{
    e50e:	b570      	push	{r4, r5, r6, lr}
    e510:	4605      	mov	r5, r0
    e512:	460e      	mov	r6, r1
	unready_thread(thread);
    e514:	f7fc fc9c 	bl	ae50 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    e518:	7b6b      	ldrb	r3, [r5, #13]
    e51a:	f043 0302 	orr.w	r3, r3, #2
    e51e:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    e520:	b1b6      	cbz	r6, e550 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
    e522:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    e524:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e526:	42a6      	cmp	r6, r4
    e528:	d019      	beq.n	e55e <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e52a:	b164      	cbz	r4, e546 <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
    e52c:	4621      	mov	r1, r4
    e52e:	4628      	mov	r0, r5
    e530:	f7ff ff2d 	bl	e38e <z_sched_prio_cmp>
    e534:	2800      	cmp	r0, #0
    e536:	dc0c      	bgt.n	e552 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    e538:	b12c      	cbz	r4, e546 <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
    e53a:	6873      	ldr	r3, [r6, #4]
    e53c:	429c      	cmp	r4, r3
    e53e:	d002      	beq.n	e546 <add_to_waitq_locked+0x38>
    e540:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e542:	2c00      	cmp	r4, #0
    e544:	d1f1      	bne.n	e52a <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
    e546:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    e548:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    e54a:	606b      	str	r3, [r5, #4]
	tail->next = node;
    e54c:	601d      	str	r5, [r3, #0]
	list->tail = node;
    e54e:	6075      	str	r5, [r6, #4]
}
    e550:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
    e552:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    e554:	606b      	str	r3, [r5, #4]
	node->next = successor;
    e556:	602c      	str	r4, [r5, #0]
	prev->next = node;
    e558:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    e55a:	6065      	str	r5, [r4, #4]
}
    e55c:	e7f8      	b.n	e550 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e55e:	2400      	movs	r4, #0
    e560:	e7e3      	b.n	e52a <add_to_waitq_locked+0x1c>

0000e562 <pend>:
{
    e562:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e566:	4605      	mov	r5, r0
    e568:	460f      	mov	r7, r1
    e56a:	4691      	mov	r9, r2
    e56c:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    e56e:	2400      	movs	r4, #0
	__asm__ volatile(
    e570:	f04f 0320 	mov.w	r3, #32
    e574:	f3ef 8611 	mrs	r6, BASEPRI
    e578:	f383 8812 	msr	BASEPRI_MAX, r3
    e57c:	f3bf 8f6f 	isb	sy
    e580:	b94c      	cbnz	r4, e596 <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
    e582:	4639      	mov	r1, r7
    e584:	4628      	mov	r0, r5
    e586:	f7ff ffc2 	bl	e50e <add_to_waitq_locked>
	__asm__ volatile(
    e58a:	f386 8811 	msr	BASEPRI, r6
    e58e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    e592:	2401      	movs	r4, #1
    e594:	e7f4      	b.n	e580 <pend+0x1e>
	add_thread_timeout(thread, timeout);
    e596:	464a      	mov	r2, r9
    e598:	4643      	mov	r3, r8
    e59a:	4628      	mov	r0, r5
    e59c:	f7fc faae 	bl	aafc <add_thread_timeout>
}
    e5a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000e5a4 <z_unpend1_no_timeout>:
{
    e5a4:	b570      	push	{r4, r5, r6, lr}
    e5a6:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    e5a8:	2300      	movs	r3, #0
	__asm__ volatile(
    e5aa:	f04f 0220 	mov.w	r2, #32
    e5ae:	f3ef 8511 	mrs	r5, BASEPRI
    e5b2:	f382 8812 	msr	BASEPRI_MAX, r2
    e5b6:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    e5ba:	461c      	mov	r4, r3
    e5bc:	e00f      	b.n	e5de <z_unpend1_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    e5be:	f7ff fee4 	bl	e38a <pended_on_thread>
    e5c2:	4621      	mov	r1, r4
    e5c4:	f7ff ff21 	bl	e40a <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    e5c8:	7b63      	ldrb	r3, [r4, #13]
    e5ca:	f023 0302 	bic.w	r3, r3, #2
    e5ce:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    e5d0:	2300      	movs	r3, #0
    e5d2:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    e5d4:	f385 8811 	msr	BASEPRI, r5
    e5d8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    e5dc:	2301      	movs	r3, #1
    e5de:	b933      	cbnz	r3, e5ee <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
    e5e0:	4630      	mov	r0, r6
    e5e2:	f7ff ff3d 	bl	e460 <z_priq_dumb_best>
		if (thread != NULL) {
    e5e6:	4604      	mov	r4, r0
    e5e8:	2800      	cmp	r0, #0
    e5ea:	d1e8      	bne.n	e5be <z_unpend1_no_timeout+0x1a>
    e5ec:	e7f2      	b.n	e5d4 <z_unpend1_no_timeout+0x30>
}
    e5ee:	4620      	mov	r0, r4
    e5f0:	bd70      	pop	{r4, r5, r6, pc}

0000e5f2 <z_unpend_first_thread>:
{
    e5f2:	b570      	push	{r4, r5, r6, lr}
    e5f4:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    e5f6:	2300      	movs	r3, #0
	__asm__ volatile(
    e5f8:	f04f 0220 	mov.w	r2, #32
    e5fc:	f3ef 8511 	mrs	r5, BASEPRI
    e600:	f382 8812 	msr	BASEPRI_MAX, r2
    e604:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    e608:	461c      	mov	r4, r3
    e60a:	e013      	b.n	e634 <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    e60c:	f7ff febd 	bl	e38a <pended_on_thread>
    e610:	4621      	mov	r1, r4
    e612:	f7ff fefa 	bl	e40a <z_priq_dumb_remove>
    e616:	7b63      	ldrb	r3, [r4, #13]
    e618:	f023 0302 	bic.w	r3, r3, #2
    e61c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    e61e:	2300      	movs	r3, #0
    e620:	60a3      	str	r3, [r4, #8]
    e622:	f104 0018 	add.w	r0, r4, #24
    e626:	f000 f872 	bl	e70e <z_abort_timeout>
	__asm__ volatile(
    e62a:	f385 8811 	msr	BASEPRI, r5
    e62e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    e632:	2301      	movs	r3, #1
    e634:	b933      	cbnz	r3, e644 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
    e636:	4630      	mov	r0, r6
    e638:	f7ff ff12 	bl	e460 <z_priq_dumb_best>
		if (thread != NULL) {
    e63c:	4604      	mov	r4, r0
    e63e:	2800      	cmp	r0, #0
    e640:	d1e4      	bne.n	e60c <z_unpend_first_thread+0x1a>
    e642:	e7f2      	b.n	e62a <z_unpend_first_thread+0x38>
}
    e644:	4620      	mov	r0, r4
    e646:	bd70      	pop	{r4, r5, r6, pc}

0000e648 <z_unpend_all>:
{
    e648:	b538      	push	{r3, r4, r5, lr}
    e64a:	4605      	mov	r5, r0
	int need_sched = 0;
    e64c:	2000      	movs	r0, #0
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    e64e:	e006      	b.n	e65e <z_unpend_all+0x16>
		z_unpend_thread(thread);
    e650:	4620      	mov	r0, r4
    e652:	f7ff fee2 	bl	e41a <z_unpend_thread>
		z_ready_thread(thread);
    e656:	4620      	mov	r0, r4
    e658:	f7ff ff09 	bl	e46e <z_ready_thread>
		need_sched = 1;
    e65c:	2001      	movs	r0, #1
	return list->head == list;
    e65e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e660:	42a5      	cmp	r5, r4
    e662:	d001      	beq.n	e668 <z_unpend_all+0x20>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    e664:	2c00      	cmp	r4, #0
    e666:	d1f3      	bne.n	e650 <z_unpend_all+0x8>
}
    e668:	bd38      	pop	{r3, r4, r5, pc}

0000e66a <init_ready_q>:
	sys_dlist_init(&rq->runq);
    e66a:	1d03      	adds	r3, r0, #4
	list->head = (sys_dnode_t *)list;
    e66c:	6043      	str	r3, [r0, #4]
	list->tail = (sys_dnode_t *)list;
    e66e:	6083      	str	r3, [r0, #8]
}
    e670:	4770      	bx	lr

0000e672 <z_sched_wake>:
{
    e672:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e676:	4606      	mov	r6, r0
    e678:	4688      	mov	r8, r1
    e67a:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
    e67c:	2300      	movs	r3, #0
	__asm__ volatile(
    e67e:	f04f 0220 	mov.w	r2, #32
    e682:	f3ef 8511 	mrs	r5, BASEPRI
    e686:	f382 8812 	msr	BASEPRI_MAX, r2
    e68a:	f3bf 8f6f 	isb	sy
	bool ret = false;
    e68e:	4699      	mov	r9, r3
    e690:	e01b      	b.n	e6ca <z_sched_wake+0x58>
    e692:	f8c0 80ac 	str.w	r8, [r0, #172]	; 0xac
	thread->base.swap_data = data;
    e696:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    e698:	f7ff fe77 	bl	e38a <pended_on_thread>
    e69c:	4621      	mov	r1, r4
    e69e:	f7ff feb4 	bl	e40a <z_priq_dumb_remove>
    e6a2:	7b63      	ldrb	r3, [r4, #13]
    e6a4:	f023 0302 	bic.w	r3, r3, #2
    e6a8:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    e6aa:	2300      	movs	r3, #0
    e6ac:	60a3      	str	r3, [r4, #8]
    e6ae:	f104 0018 	add.w	r0, r4, #24
    e6b2:	f000 f82c 	bl	e70e <z_abort_timeout>
			ready_thread(thread);
    e6b6:	4620      	mov	r0, r4
    e6b8:	f7fc fb6c 	bl	ad94 <ready_thread>
			ret = true;
    e6bc:	f04f 0901 	mov.w	r9, #1
	__asm__ volatile(
    e6c0:	f385 8811 	msr	BASEPRI, r5
    e6c4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    e6c8:	2301      	movs	r3, #1
    e6ca:	b933      	cbnz	r3, e6da <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
    e6cc:	4630      	mov	r0, r6
    e6ce:	f7ff fec7 	bl	e460 <z_priq_dumb_best>
		if (thread != NULL) {
    e6d2:	4604      	mov	r4, r0
    e6d4:	2800      	cmp	r0, #0
    e6d6:	d1dc      	bne.n	e692 <z_sched_wake+0x20>
    e6d8:	e7f2      	b.n	e6c0 <z_sched_wake+0x4e>
}
    e6da:	4648      	mov	r0, r9
    e6dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000e6e0 <remove_timeout>:
{
    e6e0:	b538      	push	{r3, r4, r5, lr}
    e6e2:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    e6e4:	f7fc fe3a 	bl	b35c <next>
    e6e8:	b148      	cbz	r0, e6fe <remove_timeout+0x1e>
    e6ea:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    e6ec:	6920      	ldr	r0, [r4, #16]
    e6ee:	6965      	ldr	r5, [r4, #20]
    e6f0:	6913      	ldr	r3, [r2, #16]
    e6f2:	6951      	ldr	r1, [r2, #20]
    e6f4:	181b      	adds	r3, r3, r0
    e6f6:	eb45 0101 	adc.w	r1, r5, r1
    e6fa:	6113      	str	r3, [r2, #16]
    e6fc:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    e6fe:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    e700:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    e702:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    e704:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    e706:	2300      	movs	r3, #0
    e708:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    e70a:	6063      	str	r3, [r4, #4]
}
    e70c:	bd38      	pop	{r3, r4, r5, pc}

0000e70e <z_abort_timeout>:
{
    e70e:	b570      	push	{r4, r5, r6, lr}
    e710:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    e712:	2300      	movs	r3, #0
	__asm__ volatile(
    e714:	f04f 0220 	mov.w	r2, #32
    e718:	f3ef 8611 	mrs	r6, BASEPRI
    e71c:	f382 8812 	msr	BASEPRI_MAX, r2
    e720:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    e724:	f06f 0015 	mvn.w	r0, #21
    e728:	e008      	b.n	e73c <z_abort_timeout+0x2e>
			remove_timeout(to);
    e72a:	4620      	mov	r0, r4
    e72c:	f7ff ffd8 	bl	e6e0 <remove_timeout>
			ret = 0;
    e730:	4628      	mov	r0, r5
	__asm__ volatile(
    e732:	f386 8811 	msr	BASEPRI, r6
    e736:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    e73a:	2301      	movs	r3, #1
    e73c:	461d      	mov	r5, r3
    e73e:	b91b      	cbnz	r3, e748 <z_abort_timeout+0x3a>
	return node->next != NULL;
    e740:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    e742:	2b00      	cmp	r3, #0
    e744:	d1f1      	bne.n	e72a <z_abort_timeout+0x1c>
    e746:	e7f4      	b.n	e732 <z_abort_timeout+0x24>
}
    e748:	bd70      	pop	{r4, r5, r6, pc}

0000e74a <z_get_next_timeout_expiry>:
{
    e74a:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
    e74c:	2300      	movs	r3, #0
	__asm__ volatile(
    e74e:	f04f 0220 	mov.w	r2, #32
    e752:	f3ef 8411 	mrs	r4, BASEPRI
    e756:	f382 8812 	msr	BASEPRI_MAX, r2
    e75a:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    e75e:	f04f 30ff 	mov.w	r0, #4294967295
	LOCKED(&timeout_lock) {
    e762:	b93b      	cbnz	r3, e774 <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
    e764:	f7fc fe12 	bl	b38c <next_timeout>
	__asm__ volatile(
    e768:	f384 8811 	msr	BASEPRI, r4
    e76c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    e770:	2301      	movs	r3, #1
    e772:	e7f6      	b.n	e762 <z_get_next_timeout_expiry+0x18>
}
    e774:	bd10      	pop	{r4, pc}

0000e776 <z_set_timeout_expiry>:
{
    e776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e778:	4606      	mov	r6, r0
    e77a:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
    e77c:	2300      	movs	r3, #0
	__asm__ volatile(
    e77e:	f04f 0220 	mov.w	r2, #32
    e782:	f3ef 8511 	mrs	r5, BASEPRI
    e786:	f382 8812 	msr	BASEPRI_MAX, r2
    e78a:	f3bf 8f6f 	isb	sy
    e78e:	e00a      	b.n	e7a6 <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
    e790:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    e792:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    e796:	2801      	cmp	r0, #1
    e798:	dd00      	ble.n	e79c <z_set_timeout_expiry+0x26>
    e79a:	b97c      	cbnz	r4, e7bc <z_set_timeout_expiry+0x46>
	__asm__ volatile(
    e79c:	f385 8811 	msr	BASEPRI, r5
    e7a0:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    e7a4:	2301      	movs	r3, #1
    e7a6:	461c      	mov	r4, r3
    e7a8:	b97b      	cbnz	r3, e7ca <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
    e7aa:	f7fc fdef 	bl	b38c <next_timeout>
			      || (ticks <= next_to);
    e7ae:	f1b0 3fff 	cmp.w	r0, #4294967295
    e7b2:	d0ed      	beq.n	e790 <z_set_timeout_expiry+0x1a>
    e7b4:	42b0      	cmp	r0, r6
    e7b6:	dbec      	blt.n	e792 <z_set_timeout_expiry+0x1c>
    e7b8:	2401      	movs	r4, #1
    e7ba:	e7ea      	b.n	e792 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    e7bc:	4639      	mov	r1, r7
    e7be:	42b0      	cmp	r0, r6
    e7c0:	bfa8      	it	ge
    e7c2:	4630      	movge	r0, r6
    e7c4:	f7f8 fbbc 	bl	6f40 <sys_clock_set_timeout>
    e7c8:	e7e8      	b.n	e79c <z_set_timeout_expiry+0x26>
}
    e7ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e7cc <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    e7cc:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    e7ce:	f7fc ff0f 	bl	b5f0 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    e7d2:	bd08      	pop	{r3, pc}

0000e7d4 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    e7d4:	b900      	cbnz	r0, e7d8 <z_impl_k_busy_wait+0x4>
    e7d6:	4770      	bx	lr
{
    e7d8:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    e7da:	f7f6 f8e9 	bl	49b0 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    e7de:	bd08      	pop	{r3, pc}

0000e7e0 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
    e7e0:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    e7e2:	f1b1 3fff 	cmp.w	r1, #4294967295
    e7e6:	bf08      	it	eq
    e7e8:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    e7ec:	d024      	beq.n	e838 <sys_clock_timeout_end_calc+0x58>
    e7ee:	4604      	mov	r4, r0
    e7f0:	460d      	mov	r5, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    e7f2:	ea54 0105 	orrs.w	r1, r4, r5
    e7f6:	d00d      	beq.n	e814 <sys_clock_timeout_end_calc+0x34>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    e7f8:	f06f 0101 	mvn.w	r1, #1
    e7fc:	1a0a      	subs	r2, r1, r0
    e7fe:	f04f 31ff 	mov.w	r1, #4294967295
    e802:	eb61 0305 	sbc.w	r3, r1, r5
    e806:	2a00      	cmp	r2, #0
    e808:	f173 0100 	sbcs.w	r1, r3, #0
    e80c:	db05      	blt.n	e81a <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
    e80e:	4610      	mov	r0, r2
    e810:	4619      	mov	r1, r3
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    e812:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
    e814:	f7fc feec 	bl	b5f0 <sys_clock_tick_get>
    e818:	e7fb      	b.n	e812 <sys_clock_timeout_end_calc+0x32>
		return sys_clock_tick_get() + MAX(1, dt);
    e81a:	f7fc fee9 	bl	b5f0 <sys_clock_tick_get>
    e81e:	4623      	mov	r3, r4
    e820:	462a      	mov	r2, r5
    e822:	2c01      	cmp	r4, #1
    e824:	f175 0400 	sbcs.w	r4, r5, #0
    e828:	db03      	blt.n	e832 <sys_clock_timeout_end_calc+0x52>
    e82a:	18c0      	adds	r0, r0, r3
    e82c:	eb42 0101 	adc.w	r1, r2, r1
    e830:	e7ef      	b.n	e812 <sys_clock_timeout_end_calc+0x32>
    e832:	2301      	movs	r3, #1
    e834:	2200      	movs	r2, #0
    e836:	e7f8      	b.n	e82a <sys_clock_timeout_end_calc+0x4a>
		return UINT64_MAX;
    e838:	f04f 30ff 	mov.w	r0, #4294967295
    e83c:	4601      	mov	r1, r0
    e83e:	e7e8      	b.n	e812 <sys_clock_timeout_end_calc+0x32>

0000e840 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
    e840:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
    e842:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
    e844:	2300      	movs	r3, #0
    e846:	6303      	str	r3, [r0, #48]	; 0x30
	sys_dlist_init(&w->waitq);
    e848:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
    e84c:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
    e84e:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
    e850:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
    e852:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
    e854:	6343      	str	r3, [r0, #52]	; 0x34
}
    e856:	4770      	bx	lr

0000e858 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    e858:	b510      	push	{r4, lr}
    e85a:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    e85c:	f7ff ff57 	bl	e70e <z_abort_timeout>

	if (inactive) {
    e860:	b9a0      	cbnz	r0, e88c <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
    e862:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e864:	b10b      	cbz	r3, e86a <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    e866:	4620      	mov	r0, r4
    e868:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    e86a:	f104 0018 	add.w	r0, r4, #24
    e86e:	f7ff fe99 	bl	e5a4 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    e872:	b158      	cbz	r0, e88c <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
    e874:	f7ff fdfb 	bl	e46e <z_ready_thread>
	__asm__ volatile(
    e878:	f04f 0320 	mov.w	r3, #32
    e87c:	f3ef 8011 	mrs	r0, BASEPRI
    e880:	f383 8812 	msr	BASEPRI_MAX, r3
    e884:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    e888:	f7ff fdaa 	bl	e3e0 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
    e88c:	bd10      	pop	{r4, pc}

0000e88e <z_heap_aligned_alloc>:
{
    e88e:	b5d0      	push	{r4, r6, r7, lr}
    e890:	b082      	sub	sp, #8
    e892:	4604      	mov	r4, r0
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    e894:	2000      	movs	r0, #0
    e896:	2304      	movs	r3, #4
    e898:	18d2      	adds	r2, r2, r3
    e89a:	d20e      	bcs.n	e8ba <z_heap_aligned_alloc+0x2c>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
    e89c:	b978      	cbnz	r0, e8be <z_heap_aligned_alloc+0x30>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    e89e:	2600      	movs	r6, #0
    e8a0:	2700      	movs	r7, #0
    e8a2:	e9cd 6700 	strd	r6, r7, [sp]
    e8a6:	f041 0104 	orr.w	r1, r1, #4
    e8aa:	4620      	mov	r0, r4
    e8ac:	f000 f81a 	bl	e8e4 <k_heap_aligned_alloc>
	if (mem == NULL) {
    e8b0:	b108      	cbz	r0, e8b6 <z_heap_aligned_alloc+0x28>
	*heap_ref = heap;
    e8b2:	f840 4b04 	str.w	r4, [r0], #4
}
    e8b6:	b002      	add	sp, #8
    e8b8:	bdd0      	pop	{r4, r6, r7, pc}
    e8ba:	2001      	movs	r0, #1
    e8bc:	e7ee      	b.n	e89c <z_heap_aligned_alloc+0xe>
		return NULL;
    e8be:	2000      	movs	r0, #0
    e8c0:	e7f9      	b.n	e8b6 <z_heap_aligned_alloc+0x28>

0000e8c2 <k_free>:
	if (ptr != NULL) {
    e8c2:	b130      	cbz	r0, e8d2 <k_free+0x10>
{
    e8c4:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
    e8c6:	1f01      	subs	r1, r0, #4
    e8c8:	f850 0c04 	ldr.w	r0, [r0, #-4]
    e8cc:	f000 f855 	bl	e97a <k_heap_free>
}
    e8d0:	bd08      	pop	{r3, pc}
    e8d2:	4770      	bx	lr

0000e8d4 <k_heap_init>:
{
    e8d4:	b510      	push	{r4, lr}
    e8d6:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
    e8da:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
    e8dc:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
    e8de:	f7fd fd56 	bl	c38e <sys_heap_init>
}
    e8e2:	bd10      	pop	{r4, pc}

0000e8e4 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    e8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e8e8:	b087      	sub	sp, #28
    e8ea:	4680      	mov	r8, r0
    e8ec:	9103      	str	r1, [sp, #12]
    e8ee:	9204      	str	r2, [sp, #16]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    e8f0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    e8f4:	f7ff ff74 	bl	e7e0 <sys_clock_timeout_end_calc>
    e8f8:	4681      	mov	r9, r0
    e8fa:	468b      	mov	fp, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    e8fc:	f108 0314 	add.w	r3, r8, #20
    e900:	9305      	str	r3, [sp, #20]
    e902:	f04f 0320 	mov.w	r3, #32
    e906:	f3ef 8511 	mrs	r5, BASEPRI
    e90a:	f383 8812 	msr	BASEPRI_MAX, r3
    e90e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
    e912:	f04f 0a00 	mov.w	sl, #0
	void *ret = NULL;
    e916:	4654      	mov	r4, sl

	while (ret == NULL) {
    e918:	e00f      	b.n	e93a <k_heap_aligned_alloc+0x56>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    e91a:	e9cd 6700 	strd	r6, r7, [sp]
    e91e:	f108 020c 	add.w	r2, r8, #12
    e922:	4629      	mov	r1, r5
    e924:	9805      	ldr	r0, [sp, #20]
    e926:	f7fc faaf 	bl	ae88 <z_pend_curr>
    e92a:	f04f 0320 	mov.w	r3, #32
    e92e:	f3ef 8511 	mrs	r5, BASEPRI
    e932:	f383 8812 	msr	BASEPRI_MAX, r3
    e936:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
    e93a:	b9b4      	cbnz	r4, e96a <k_heap_aligned_alloc+0x86>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    e93c:	9a04      	ldr	r2, [sp, #16]
    e93e:	9903      	ldr	r1, [sp, #12]
    e940:	4640      	mov	r0, r8
    e942:	f7fd fcb3 	bl	c2ac <sys_heap_aligned_alloc>
    e946:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
    e948:	f7fc fe52 	bl	b5f0 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    e94c:	b96c      	cbnz	r4, e96a <k_heap_aligned_alloc+0x86>
		    (ret != NULL) || ((end - now) <= 0)) {
    e94e:	ebb9 0600 	subs.w	r6, r9, r0
    e952:	eb6b 0701 	sbc.w	r7, fp, r1
    e956:	2e01      	cmp	r6, #1
    e958:	f177 0300 	sbcs.w	r3, r7, #0
    e95c:	db05      	blt.n	e96a <k_heap_aligned_alloc+0x86>
		if (!blocked_alloc) {
    e95e:	f1ba 0f00 	cmp.w	sl, #0
    e962:	d1da      	bne.n	e91a <k_heap_aligned_alloc+0x36>
			blocked_alloc = true;
    e964:	f04f 0a01 	mov.w	sl, #1
    e968:	e7d7      	b.n	e91a <k_heap_aligned_alloc+0x36>
	__asm__ volatile(
    e96a:	f385 8811 	msr	BASEPRI, r5
    e96e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    e972:	4620      	mov	r0, r4
    e974:	b007      	add	sp, #28
    e976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000e97a <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
    e97a:	b570      	push	{r4, r5, r6, lr}
    e97c:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    e97e:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
    e982:	f04f 0320 	mov.w	r3, #32
    e986:	f3ef 8511 	mrs	r5, BASEPRI
    e98a:	f383 8812 	msr	BASEPRI_MAX, r3
    e98e:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
    e992:	f7fd fc47 	bl	c224 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    e996:	f104 000c 	add.w	r0, r4, #12
    e99a:	f7ff fe55 	bl	e648 <z_unpend_all>
    e99e:	b920      	cbnz	r0, e9aa <k_heap_free+0x30>
	__asm__ volatile(
    e9a0:	f385 8811 	msr	BASEPRI, r5
    e9a4:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    e9a8:	bd70      	pop	{r4, r5, r6, pc}
		z_reschedule(&h->lock, key);
    e9aa:	4629      	mov	r1, r5
    e9ac:	4630      	mov	r0, r6
    e9ae:	f7fc f907 	bl	abc0 <z_reschedule>
    e9b2:	e7f9      	b.n	e9a8 <k_heap_free+0x2e>

0000e9b4 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    e9b4:	4770      	bx	lr
	...

0000e9b8 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    e9b8:	f7f8 bbb6 	b.w	7128 <SystemInit>
