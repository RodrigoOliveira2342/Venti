
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
   0:	20004080 	.word	0x20004080
   4:	000049e5 	.word	0x000049e5
   8:	00011027 	.word	0x00011027
   c:	0000499d 	.word	0x0000499d
  10:	0000499d 	.word	0x0000499d
  14:	0000499d 	.word	0x0000499d
  18:	0000499d 	.word	0x0000499d
	...
  2c:	000040e1 	.word	0x000040e1
  30:	0000499d 	.word	0x0000499d
  34:	00000000 	.word	0x00000000
  38:	00004089 	.word	0x00004089
  3c:	00012181 	.word	0x00012181

00000040 <_irq_vector_table>:
  40:	000041cd 000041cd 000041cd 000041cd     .A...A...A...A..
  50:	000041cd 000041cd 000041cd 000041cd     .A...A...A...A..
  60:	000041cd 000041cd 000041cd 000041cd     .A...A...A...A..
  70:	000041cd 000041cd 000041cd 000041cd     .A...A...A...A..
  80:	000041cd 000041cd 000041cd 000041cd     .A...A...A...A..
  90:	000041cd 000041cd 000041cd 000041cd     .A...A...A...A..
  a0:	000041cd 000041cd 000041cd 000041cd     .A...A...A...A..
  b0:	000041cd 000041cd 000041cd 000041cd     .A...A...A...A..
  c0:	000041cd 000041cd 000041cd 000041cd     .A...A...A...A..
  d0:	000041cd 000041cd 000041cd 000041cd     .A...A...A...A..
  e0:	000041cd 000041cd 000041cd 000041cd     .A...A...A...A..
  f0:	000041cd 000041cd 000041cd 000041cd     .A...A...A...A..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b980 	b.w	418 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f81a 	bl	158 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__popcountsi2>:
     130:	0843      	lsrs	r3, r0, #1
     132:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     136:	1ac0      	subs	r0, r0, r3
     138:	0883      	lsrs	r3, r0, #2
     13a:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     13e:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     142:	4418      	add	r0, r3
     144:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     148:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     14c:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     150:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     154:	0e00      	lsrs	r0, r0, #24
     156:	4770      	bx	lr

00000158 <__udivmoddi4>:
     158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     15c:	9e08      	ldr	r6, [sp, #32]
     15e:	460d      	mov	r5, r1
     160:	4604      	mov	r4, r0
     162:	468e      	mov	lr, r1
     164:	2b00      	cmp	r3, #0
     166:	f040 8082 	bne.w	26e <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0x6e>
     16a:	428a      	cmp	r2, r1
     16c:	4617      	mov	r7, r2
     16e:	d946      	bls.n	1fe <__udivmoddi4+0xa6>
     170:	fab2 f282 	clz	r2, r2
     174:	b14a      	cbz	r2, 18a <__udivmoddi4+0x32>
     176:	f1c2 0120 	rsb	r1, r2, #32
     17a:	fa05 f302 	lsl.w	r3, r5, r2
     17e:	fa20 f101 	lsr.w	r1, r0, r1
     182:	4097      	lsls	r7, r2
     184:	ea41 0e03 	orr.w	lr, r1, r3
     188:	4094      	lsls	r4, r2
     18a:	ea4f 4817 	mov.w	r8, r7, lsr #16
     18e:	0c23      	lsrs	r3, r4, #16
     190:	fbbe fcf8 	udiv	ip, lr, r8
     194:	b2b9      	uxth	r1, r7
     196:	fb08 ee1c 	mls	lr, r8, ip, lr
     19a:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     19e:	fb0c f001 	mul.w	r0, ip, r1
     1a2:	4298      	cmp	r0, r3
     1a4:	d90a      	bls.n	1bc <__udivmoddi4+0x64>
     1a6:	18fb      	adds	r3, r7, r3
     1a8:	f10c 35ff 	add.w	r5, ip, #4294967295
     1ac:	f080 8116 	bcs.w	3dc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xdc>
     1b0:	4298      	cmp	r0, r3
     1b2:	f240 8113 	bls.w	3dc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xdc>
     1b6:	f1ac 0c02 	sub.w	ip, ip, #2
     1ba:	443b      	add	r3, r7
     1bc:	1a1b      	subs	r3, r3, r0
     1be:	b2a4      	uxth	r4, r4
     1c0:	fbb3 f0f8 	udiv	r0, r3, r8
     1c4:	fb08 3310 	mls	r3, r8, r0, r3
     1c8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1cc:	fb00 f101 	mul.w	r1, r0, r1
     1d0:	42a1      	cmp	r1, r4
     1d2:	d909      	bls.n	1e8 <__udivmoddi4+0x90>
     1d4:	193c      	adds	r4, r7, r4
     1d6:	f100 33ff 	add.w	r3, r0, #4294967295
     1da:	f080 8101 	bcs.w	3e0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe0>
     1de:	42a1      	cmp	r1, r4
     1e0:	f240 80fe 	bls.w	3e0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe0>
     1e4:	3802      	subs	r0, #2
     1e6:	443c      	add	r4, r7
     1e8:	1a64      	subs	r4, r4, r1
     1ea:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1ee:	2100      	movs	r1, #0
     1f0:	b11e      	cbz	r6, 1fa <__udivmoddi4+0xa2>
     1f2:	40d4      	lsrs	r4, r2
     1f4:	2300      	movs	r3, #0
     1f6:	e9c6 4300 	strd	r4, r3, [r6]
     1fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1fe:	b902      	cbnz	r2, 202 <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0x2>
     200:	deff      	udf	#255	; 0xff
     202:	fab2 f282 	clz	r2, r2
     206:	2a00      	cmp	r2, #0
     208:	d14f      	bne.n	2aa <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0xaa>
     20a:	1bcb      	subs	r3, r1, r7
     20c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     210:	fa1f f887 	uxth.w	r8, r7
     214:	2101      	movs	r1, #1
     216:	fbb3 fcfe 	udiv	ip, r3, lr
     21a:	0c25      	lsrs	r5, r4, #16
     21c:	fb0e 331c 	mls	r3, lr, ip, r3
     220:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     224:	fb08 f30c 	mul.w	r3, r8, ip
     228:	42ab      	cmp	r3, r5
     22a:	d907      	bls.n	23c <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0x3c>
     22c:	197d      	adds	r5, r7, r5
     22e:	f10c 30ff 	add.w	r0, ip, #4294967295
     232:	d202      	bcs.n	23a <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0x3a>
     234:	42ab      	cmp	r3, r5
     236:	f200 80e7 	bhi.w	408 <CONFIG_FLASH_SIZE+0x8>
     23a:	4684      	mov	ip, r0
     23c:	1aed      	subs	r5, r5, r3
     23e:	b2a3      	uxth	r3, r4
     240:	fbb5 f0fe 	udiv	r0, r5, lr
     244:	fb0e 5510 	mls	r5, lr, r0, r5
     248:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     24c:	fb08 f800 	mul.w	r8, r8, r0
     250:	45a0      	cmp	r8, r4
     252:	d907      	bls.n	264 <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0x64>
     254:	193c      	adds	r4, r7, r4
     256:	f100 33ff 	add.w	r3, r0, #4294967295
     25a:	d202      	bcs.n	262 <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0x62>
     25c:	45a0      	cmp	r8, r4
     25e:	f200 80d7 	bhi.w	410 <CONFIG_FLASH_SIZE+0x10>
     262:	4618      	mov	r0, r3
     264:	eba4 0408 	sub.w	r4, r4, r8
     268:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     26c:	e7c0      	b.n	1f0 <__udivmoddi4+0x98>
     26e:	428b      	cmp	r3, r1
     270:	d908      	bls.n	284 <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0x84>
     272:	2e00      	cmp	r6, #0
     274:	f000 80af 	beq.w	3d6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd6>
     278:	2100      	movs	r1, #0
     27a:	e9c6 0500 	strd	r0, r5, [r6]
     27e:	4608      	mov	r0, r1
     280:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     284:	fab3 f183 	clz	r1, r3
     288:	2900      	cmp	r1, #0
     28a:	d14b      	bne.n	324 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x24>
     28c:	42ab      	cmp	r3, r5
     28e:	d302      	bcc.n	296 <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0x96>
     290:	4282      	cmp	r2, r0
     292:	f200 80b7 	bhi.w	404 <CONFIG_FLASH_SIZE+0x4>
     296:	1a84      	subs	r4, r0, r2
     298:	eb65 0303 	sbc.w	r3, r5, r3
     29c:	2001      	movs	r0, #1
     29e:	469e      	mov	lr, r3
     2a0:	2e00      	cmp	r6, #0
     2a2:	d0aa      	beq.n	1fa <__udivmoddi4+0xa2>
     2a4:	e9c6 4e00 	strd	r4, lr, [r6]
     2a8:	e7a7      	b.n	1fa <__udivmoddi4+0xa2>
     2aa:	f1c2 0c20 	rsb	ip, r2, #32
     2ae:	fa01 f302 	lsl.w	r3, r1, r2
     2b2:	4097      	lsls	r7, r2
     2b4:	fa20 f00c 	lsr.w	r0, r0, ip
     2b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     2bc:	fa21 fc0c 	lsr.w	ip, r1, ip
     2c0:	4318      	orrs	r0, r3
     2c2:	fbbc f1fe 	udiv	r1, ip, lr
     2c6:	0c05      	lsrs	r5, r0, #16
     2c8:	fb0e cc11 	mls	ip, lr, r1, ip
     2cc:	fa1f f887 	uxth.w	r8, r7
     2d0:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2d4:	fb01 f308 	mul.w	r3, r1, r8
     2d8:	42ab      	cmp	r3, r5
     2da:	fa04 f402 	lsl.w	r4, r4, r2
     2de:	d909      	bls.n	2f4 <__data_size+0x2b>
     2e0:	197d      	adds	r5, r7, r5
     2e2:	f101 3cff 	add.w	ip, r1, #4294967295
     2e6:	f080 808b 	bcs.w	400 <CONFIG_FLASH_SIZE>
     2ea:	42ab      	cmp	r3, r5
     2ec:	f240 8088 	bls.w	400 <CONFIG_FLASH_SIZE>
     2f0:	3902      	subs	r1, #2
     2f2:	443d      	add	r5, r7
     2f4:	1aeb      	subs	r3, r5, r3
     2f6:	b285      	uxth	r5, r0
     2f8:	fbb3 f0fe 	udiv	r0, r3, lr
     2fc:	fb0e 3310 	mls	r3, lr, r0, r3
     300:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     304:	fb00 f308 	mul.w	r3, r0, r8
     308:	42ab      	cmp	r3, r5
     30a:	d907      	bls.n	31c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1c>
     30c:	197d      	adds	r5, r7, r5
     30e:	f100 3cff 	add.w	ip, r0, #4294967295
     312:	d271      	bcs.n	3f8 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x10>
     314:	42ab      	cmp	r3, r5
     316:	d96f      	bls.n	3f8 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x10>
     318:	3802      	subs	r0, #2
     31a:	443d      	add	r5, r7
     31c:	1aeb      	subs	r3, r5, r3
     31e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     322:	e778      	b.n	216 <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0x16>
     324:	f1c1 0c20 	rsb	ip, r1, #32
     328:	408b      	lsls	r3, r1
     32a:	fa22 f70c 	lsr.w	r7, r2, ip
     32e:	431f      	orrs	r7, r3
     330:	fa20 f40c 	lsr.w	r4, r0, ip
     334:	fa05 f301 	lsl.w	r3, r5, r1
     338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     33c:	fa25 f50c 	lsr.w	r5, r5, ip
     340:	431c      	orrs	r4, r3
     342:	0c23      	lsrs	r3, r4, #16
     344:	fbb5 f9fe 	udiv	r9, r5, lr
     348:	fa1f f887 	uxth.w	r8, r7
     34c:	fb0e 5519 	mls	r5, lr, r9, r5
     350:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     354:	fb09 fa08 	mul.w	sl, r9, r8
     358:	45aa      	cmp	sl, r5
     35a:	fa02 f201 	lsl.w	r2, r2, r1
     35e:	fa00 f301 	lsl.w	r3, r0, r1
     362:	d908      	bls.n	376 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x76>
     364:	197d      	adds	r5, r7, r5
     366:	f109 30ff 	add.w	r0, r9, #4294967295
     36a:	d247      	bcs.n	3fc <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x14>
     36c:	45aa      	cmp	sl, r5
     36e:	d945      	bls.n	3fc <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x14>
     370:	f1a9 0902 	sub.w	r9, r9, #2
     374:	443d      	add	r5, r7
     376:	eba5 050a 	sub.w	r5, r5, sl
     37a:	b2a4      	uxth	r4, r4
     37c:	fbb5 f0fe 	udiv	r0, r5, lr
     380:	fb0e 5510 	mls	r5, lr, r0, r5
     384:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     388:	fb00 f808 	mul.w	r8, r0, r8
     38c:	45a0      	cmp	r8, r4
     38e:	d907      	bls.n	3a0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa0>
     390:	193c      	adds	r4, r7, r4
     392:	f100 35ff 	add.w	r5, r0, #4294967295
     396:	d22d      	bcs.n	3f4 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0xc>
     398:	45a0      	cmp	r8, r4
     39a:	d92b      	bls.n	3f4 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0xc>
     39c:	3802      	subs	r0, #2
     39e:	443c      	add	r4, r7
     3a0:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     3a4:	eba4 0408 	sub.w	r4, r4, r8
     3a8:	fba0 8902 	umull	r8, r9, r0, r2
     3ac:	454c      	cmp	r4, r9
     3ae:	46c6      	mov	lr, r8
     3b0:	464d      	mov	r5, r9
     3b2:	d319      	bcc.n	3e8 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS>
     3b4:	d016      	beq.n	3e4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe4>
     3b6:	b15e      	cbz	r6, 3d0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd0>
     3b8:	ebb3 020e 	subs.w	r2, r3, lr
     3bc:	eb64 0405 	sbc.w	r4, r4, r5
     3c0:	fa04 fc0c 	lsl.w	ip, r4, ip
     3c4:	40ca      	lsrs	r2, r1
     3c6:	ea4c 0202 	orr.w	r2, ip, r2
     3ca:	40cc      	lsrs	r4, r1
     3cc:	e9c6 2400 	strd	r2, r4, [r6]
     3d0:	2100      	movs	r1, #0
     3d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3d6:	4631      	mov	r1, r6
     3d8:	4630      	mov	r0, r6
     3da:	e70e      	b.n	1fa <__udivmoddi4+0xa2>
     3dc:	46ac      	mov	ip, r5
     3de:	e6ed      	b.n	1bc <__udivmoddi4+0x64>
     3e0:	4618      	mov	r0, r3
     3e2:	e701      	b.n	1e8 <__udivmoddi4+0x90>
     3e4:	4543      	cmp	r3, r8
     3e6:	d2e6      	bcs.n	3b6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb6>
     3e8:	ebb8 0e02 	subs.w	lr, r8, r2
     3ec:	eb69 0507 	sbc.w	r5, r9, r7
     3f0:	3801      	subs	r0, #1
     3f2:	e7e0      	b.n	3b6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb6>
     3f4:	4628      	mov	r0, r5
     3f6:	e7d3      	b.n	3a0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa0>
     3f8:	4660      	mov	r0, ip
     3fa:	e78f      	b.n	31c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1c>
     3fc:	4681      	mov	r9, r0
     3fe:	e7ba      	b.n	376 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x76>
     400:	4661      	mov	r1, ip
     402:	e777      	b.n	2f4 <__data_size+0x2b>
     404:	4608      	mov	r0, r1
     406:	e74b      	b.n	2a0 <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0xa0>
     408:	f1ac 0c02 	sub.w	ip, ip, #2
     40c:	443d      	add	r5, r7
     40e:	e715      	b.n	23c <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0x3c>
     410:	3802      	subs	r0, #2
     412:	443c      	add	r4, r7
     414:	e726      	b.n	264 <CONFIG_FS_LITTLEFS_BLOCK_CYCLES+0x64>
     416:	bf00      	nop

00000418 <__aeabi_idiv0>:
     418:	4770      	bx	lr
     41a:	bf00      	nop

0000041c <main>:
#include <zephyr.h>
#include  "protocol-usb.h"
#include  "tablesFS.h"

void main(void)
{
     41c:	b500      	push	{lr}
     41e:	b083      	sub	sp, #12
	configureUSB();
     420:	f000 f824 	bl	46c <configureUSB>
	configureLFS();
     424:	f000 f9f2 	bl	80c <configureLFS>

	uint32_t lFSC =  cFSTEST();
     428:	f000 fa3c 	bl	8a4 <cFSTEST>
     42c:	9001      	str	r0, [sp, #4]
	uint8_t lFSCV[4];
	
	memcpy(lFSCV,&lFSC,4); 
     42e:	2204      	movs	r2, #4
     430:	eb0d 0102 	add.w	r1, sp, r2
     434:	4668      	mov	r0, sp
     436:	f010 fed9 	bl	111ec <memcpy>
	SendMsg(lFSCV,4);
     43a:	2104      	movs	r1, #4
     43c:	4668      	mov	r0, sp
     43e:	f000 f877 	bl	530 <SendMsg>
     442:	e006      	b.n	452 <main+0x36>
	while(1){
		if(uart_irq_rx_ready(uart_dev)){
			ReadMsg();
     444:	f000 f984 	bl	750 <ReadMsg>
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     448:	f640 40cd 	movw	r0, #3277	; 0xccd
     44c:	2100      	movs	r1, #0
     44e:	f00e fb0b 	bl	ea68 <z_impl_k_sleep>
		if(uart_irq_rx_ready(uart_dev)){
     452:	4b05      	ldr	r3, [pc, #20]	; (468 <main+0x4c>)
     454:	6818      	ldr	r0, [r3, #0]
 * @retval -ENOTSUP if API is not enabled.
 */
static inline int uart_irq_rx_ready(const struct device *dev)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
     456:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if (api->irq_rx_ready == NULL) {
     458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     45a:	2b00      	cmp	r3, #0
     45c:	d0f2      	beq.n	444 <main+0x28>
		return -ENOSYS;
	}
	return api->irq_rx_ready(dev);
     45e:	4798      	blx	r3
     460:	2800      	cmp	r0, #0
     462:	d0f1      	beq.n	448 <main+0x2c>
     464:	e7ee      	b.n	444 <main+0x28>
     466:	bf00      	nop
     468:	20000e5c 	.word	0x20000e5c

0000046c <configureUSB>:
		}
    }
}


void configureUSB(){
     46c:	b510      	push	{r4, lr}
     46e:	b082      	sub	sp, #8
    const struct device *dev;
	dev = DEVICE_DT_GET_ONE(zephyr_cdc_acm_uart);
	uart_dev = dev;
     470:	482a      	ldr	r0, [pc, #168]	; (51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>)
     472:	4b2b      	ldr	r3, [pc, #172]	; (520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>)
     474:	6018      	str	r0, [r3, #0]
	uint32_t baudrate, dtr = 0U;
     476:	2300      	movs	r3, #0
     478:	9300      	str	r3, [sp, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
     47a:	f013 f921 	bl	136c0 <z_device_ready>
     47e:	b118      	cbz	r0, 488 <configureUSB+0x1c>
	int ret;

	if (!device_is_ready(dev)) {
		return;
	}
	ret = usb_enable(NULL);
     480:	2000      	movs	r0, #0
     482:	f002 fc37 	bl	2cf4 <usb_enable>
	if (ret != 0) {
     486:	b108      	cbz	r0, 48c <configureUSB+0x20>
	ret = uart_line_ctrl_get(dev, UART_LINE_CTRL_BAUD_RATE, &baudrate);
	// uart_irq_callback_set(dev, interrupt_handler); // MOD
	/* Enable rx interrupts */
	uart_irq_rx_enable(dev);
	uart_irq_tx_enable(dev); // MOD
}
     488:	b002      	add	sp, #8
     48a:	bd10      	pop	{r4, pc}
				 uint32_t size,
				 void *data)
{
	__ASSERT(size < RING_BUFFER_MAX_SIZE, RING_BUFFER_SIZE_ASSERT_MSG);

	memset(buf, 0, sizeof(struct ring_buf));
     48c:	4c25      	ldr	r4, [pc, #148]	; (524 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3c>)
     48e:	221c      	movs	r2, #28
     490:	2100      	movs	r1, #0
     492:	4620      	mov	r0, r4
     494:	f010 fece 	bl	11234 <memset>
	buf->size = size;
     498:	f44f 6380 	mov.w	r3, #1024	; 0x400
     49c:	6123      	str	r3, [r4, #16]
	buf->buf.buf32 = (uint32_t *)data;
     49e:	4b22      	ldr	r3, [pc, #136]	; (528 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x40>)
     4a0:	6163      	str	r3, [r4, #20]
	if (is_power_of_two(size)) {
		buf->mask = size - 1U;
     4a2:	f240 33ff 	movw	r3, #1023	; 0x3ff
     4a6:	61a3      	str	r3, [r4, #24]

static inline int z_impl_uart_line_ctrl_get(const struct device *dev,
					    uint32_t ctrl, uint32_t *val)
{
#ifdef CONFIG_UART_LINE_CTRL
	const struct uart_driver_api *api =
     4a8:	4b1c      	ldr	r3, [pc, #112]	; (51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>)
     4aa:	689b      	ldr	r3, [r3, #8]
		(const struct uart_driver_api *)dev->api;

	if (api->line_ctrl_get == NULL) {
     4ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
     4ae:	b11b      	cbz	r3, 4b8 <configureUSB+0x4c>
		return -ENOSYS;
	}
	return api->line_ctrl_get(dev, ctrl, val);
     4b0:	466a      	mov	r2, sp
     4b2:	2104      	movs	r1, #4
     4b4:	4819      	ldr	r0, [pc, #100]	; (51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>)
     4b6:	4798      	blx	r3
		if (dtr) {
     4b8:	9b00      	ldr	r3, [sp, #0]
     4ba:	b92b      	cbnz	r3, 4c8 <configureUSB+0x5c>
     4bc:	f640 40cd 	movw	r0, #3277	; 0xccd
     4c0:	2100      	movs	r1, #0
     4c2:	f00e fad1 	bl	ea68 <z_impl_k_sleep>
		uart_line_ctrl_get(dev, UART_LINE_CTRL_DTR, &dtr);
     4c6:	e7ef      	b.n	4a8 <configureUSB+0x3c>
	const struct uart_driver_api *api =
     4c8:	4b14      	ldr	r3, [pc, #80]	; (51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>)
     4ca:	689b      	ldr	r3, [r3, #8]
	if (api->line_ctrl_set == NULL) {
     4cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
     4ce:	b11b      	cbz	r3, 4d8 <configureUSB+0x6c>
	return api->line_ctrl_set(dev, ctrl, val);
     4d0:	2201      	movs	r2, #1
     4d2:	2108      	movs	r1, #8
     4d4:	4811      	ldr	r0, [pc, #68]	; (51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>)
     4d6:	4798      	blx	r3
	const struct uart_driver_api *api =
     4d8:	4b10      	ldr	r3, [pc, #64]	; (51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>)
     4da:	689b      	ldr	r3, [r3, #8]
	if (api->line_ctrl_set == NULL) {
     4dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
     4de:	b11b      	cbz	r3, 4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>
	return api->line_ctrl_set(dev, ctrl, val);
     4e0:	2201      	movs	r2, #1
     4e2:	2110      	movs	r1, #16
     4e4:	480d      	ldr	r0, [pc, #52]	; (51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>)
     4e6:	4798      	blx	r3
		arch_syscall_invoke1(*(uintptr_t *)&usec_to_wait, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
     4e8:	4810      	ldr	r0, [pc, #64]	; (52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>)
     4ea:	f013 fd26 	bl	13f3a <z_impl_k_busy_wait>
	const struct uart_driver_api *api =
     4ee:	4b0b      	ldr	r3, [pc, #44]	; (51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>)
     4f0:	689b      	ldr	r3, [r3, #8]
	if (api->line_ctrl_get == NULL) {
     4f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
     4f4:	b11b      	cbz	r3, 4fe <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x16>
	return api->line_ctrl_get(dev, ctrl, val);
     4f6:	aa01      	add	r2, sp, #4
     4f8:	2101      	movs	r1, #1
     4fa:	4808      	ldr	r0, [pc, #32]	; (51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>)
     4fc:	4798      	blx	r3
	const struct uart_driver_api *api =
     4fe:	4b07      	ldr	r3, [pc, #28]	; (51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>)
     500:	689b      	ldr	r3, [r3, #8]
	if (api->irq_rx_enable != NULL) {
     502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     504:	b10b      	cbz	r3, 50a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x22>
		api->irq_rx_enable(dev);
     506:	4805      	ldr	r0, [pc, #20]	; (51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>)
     508:	4798      	blx	r3
	const struct uart_driver_api *api =
     50a:	4b04      	ldr	r3, [pc, #16]	; (51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>)
     50c:	689b      	ldr	r3, [r3, #8]
	if (api->irq_tx_enable != NULL) {
     50e:	69db      	ldr	r3, [r3, #28]
     510:	2b00      	cmp	r3, #0
     512:	d0b9      	beq.n	488 <configureUSB+0x1c>
		api->irq_tx_enable(dev);
     514:	4801      	ldr	r0, [pc, #4]	; (51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>)
     516:	4798      	blx	r3
     518:	e7b6      	b.n	488 <configureUSB+0x1c>
     51a:	bf00      	nop
     51c:	000140f0 	.word	0x000140f0
     520:	20000e5c 	.word	0x20000e5c
     524:	20000e40 	.word	0x20000e40
     528:	20000a40 	.word	0x20000a40
     52c:	000f4240 	.word	0x000f4240

00000530 <SendMsg>:
 *
 * @param msg1, recebe o ponteiro dos dados que serão enviados
 *
 * @param len, recebe o tamanho dos dados em bytes.
 */
void SendMsg(char*msg1,int len){
     530:	b510      	push	{r4, lr}
     532:	b0a0      	sub	sp, #128	; 0x80
     534:	460c      	mov	r4, r1
	  char msg3[128];
	  EncapsulationMsgs(msg1,msg3,len);
     536:	460a      	mov	r2, r1
     538:	4669      	mov	r1, sp
     53a:	f00e ff87 	bl	f44c <EncapsulationMsgs>
	  uart_fifo_fill(uart_dev, msg3, len + 4);
     53e:	4b05      	ldr	r3, [pc, #20]	; (554 <SendMsg+0x24>)
     540:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
     542:	6883      	ldr	r3, [r0, #8]
	if (api->fifo_fill == NULL) {
     544:	695b      	ldr	r3, [r3, #20]
     546:	b113      	cbz	r3, 54e <SendMsg+0x1e>
     548:	1d22      	adds	r2, r4, #4
	return api->fifo_fill(dev, tx_data, size);
     54a:	4669      	mov	r1, sp
     54c:	4798      	blx	r3
}
     54e:	b020      	add	sp, #128	; 0x80
     550:	bd10      	pop	{r4, pc}
     552:	bf00      	nop
     554:	20000e5c 	.word	0x20000e5c

00000558 <CMD1>:
		lenBufferACK = 0;
	}
}

//testes
void CMD1(char *data){
     558:	b500      	push	{lr}
     55a:	b083      	sub	sp, #12
	char MSG[] = {0x40,data[1],data[2]};
     55c:	2340      	movs	r3, #64	; 0x40
     55e:	f88d 3004 	strb.w	r3, [sp, #4]
     562:	7843      	ldrb	r3, [r0, #1]
     564:	f88d 3005 	strb.w	r3, [sp, #5]
     568:	7883      	ldrb	r3, [r0, #2]
     56a:	f88d 3006 	strb.w	r3, [sp, #6]
	SendMsg(MSG,3);
     56e:	2103      	movs	r1, #3
     570:	a801      	add	r0, sp, #4
     572:	f7ff ffdd 	bl	530 <SendMsg>
    lenBufferACK = sizeof(MSG);
     576:	2203      	movs	r2, #3
     578:	4b04      	ldr	r3, [pc, #16]	; (58c <CMD1+0x34>)
     57a:	701a      	strb	r2, [r3, #0]
	memcpy(bufferACK,MSG,sizeof(MSG));
     57c:	a901      	add	r1, sp, #4
     57e:	4804      	ldr	r0, [pc, #16]	; (590 <CMD1+0x38>)
     580:	f010 fe34 	bl	111ec <memcpy>
}
     584:	b003      	add	sp, #12
     586:	f85d fb04 	ldr.w	pc, [sp], #4
     58a:	bf00      	nop
     58c:	20002b48 	.word	0x20002b48
     590:	200009c0 	.word	0x200009c0

00000594 <CMD2>:

void CMD2(char *data){
     594:	b500      	push	{lr}
     596:	b083      	sub	sp, #12
	char MSG[] = {0x50,data[1],data[2]};
     598:	2350      	movs	r3, #80	; 0x50
     59a:	f88d 3004 	strb.w	r3, [sp, #4]
     59e:	7843      	ldrb	r3, [r0, #1]
     5a0:	f88d 3005 	strb.w	r3, [sp, #5]
     5a4:	7883      	ldrb	r3, [r0, #2]
     5a6:	f88d 3006 	strb.w	r3, [sp, #6]
	SendMsg(MSG,3);
     5aa:	2103      	movs	r1, #3
     5ac:	a801      	add	r0, sp, #4
     5ae:	f7ff ffbf 	bl	530 <SendMsg>
    lenBufferACK = sizeof(MSG);
     5b2:	2203      	movs	r2, #3
     5b4:	4b04      	ldr	r3, [pc, #16]	; (5c8 <CMD2+0x34>)
     5b6:	701a      	strb	r2, [r3, #0]
	memcpy(bufferACK,MSG,sizeof(MSG));
     5b8:	a901      	add	r1, sp, #4
     5ba:	4804      	ldr	r0, [pc, #16]	; (5cc <CMD2+0x38>)
     5bc:	f010 fe16 	bl	111ec <memcpy>
}
     5c0:	b003      	add	sp, #12
     5c2:	f85d fb04 	ldr.w	pc, [sp], #4
     5c6:	bf00      	nop
     5c8:	20002b48 	.word	0x20002b48
     5cc:	200009c0 	.word	0x200009c0

000005d0 <CMD3>:

void CMD3(char *data){
     5d0:	b500      	push	{lr}
     5d2:	b083      	sub	sp, #12
	char MSG[] = {0x60,data[1],data[2]};
     5d4:	2360      	movs	r3, #96	; 0x60
     5d6:	f88d 3004 	strb.w	r3, [sp, #4]
     5da:	7843      	ldrb	r3, [r0, #1]
     5dc:	f88d 3005 	strb.w	r3, [sp, #5]
     5e0:	7883      	ldrb	r3, [r0, #2]
     5e2:	f88d 3006 	strb.w	r3, [sp, #6]
	SendMsg(MSG,3);
     5e6:	2103      	movs	r1, #3
     5e8:	a801      	add	r0, sp, #4
     5ea:	f7ff ffa1 	bl	530 <SendMsg>
    lenBufferACK = sizeof(MSG);
     5ee:	2203      	movs	r2, #3
     5f0:	4b04      	ldr	r3, [pc, #16]	; (604 <CMD3+0x34>)
     5f2:	701a      	strb	r2, [r3, #0]
	memcpy(bufferACK,MSG,sizeof(MSG));
     5f4:	a901      	add	r1, sp, #4
     5f6:	4804      	ldr	r0, [pc, #16]	; (608 <CMD3+0x38>)
     5f8:	f010 fdf8 	bl	111ec <memcpy>
}
     5fc:	b003      	add	sp, #12
     5fe:	f85d fb04 	ldr.w	pc, [sp], #4
     602:	bf00      	nop
     604:	20002b48 	.word	0x20002b48
     608:	200009c0 	.word	0x200009c0

0000060c <CMD4>:

// Zerar os transdutores
void CMD4(char *data){
     60c:	b500      	push	{lr}
     60e:	b083      	sub	sp, #12
	char MSG[] = {0x65,data[1],data[2]};
     610:	2365      	movs	r3, #101	; 0x65
     612:	f88d 3004 	strb.w	r3, [sp, #4]
     616:	7843      	ldrb	r3, [r0, #1]
     618:	f88d 3005 	strb.w	r3, [sp, #5]
     61c:	7883      	ldrb	r3, [r0, #2]
     61e:	f88d 3006 	strb.w	r3, [sp, #6]
	SendMsg(MSG,3);
     622:	2103      	movs	r1, #3
     624:	a801      	add	r0, sp, #4
     626:	f7ff ff83 	bl	530 <SendMsg>
    lenBufferACK = sizeof(MSG);
     62a:	2203      	movs	r2, #3
     62c:	4b04      	ldr	r3, [pc, #16]	; (640 <CMD4+0x34>)
     62e:	701a      	strb	r2, [r3, #0]
	memcpy(bufferACK,MSG,sizeof(MSG));
     630:	a901      	add	r1, sp, #4
     632:	4804      	ldr	r0, [pc, #16]	; (644 <CMD4+0x38>)
     634:	f010 fdda 	bl	111ec <memcpy>

}
     638:	b003      	add	sp, #12
     63a:	f85d fb04 	ldr.w	pc, [sp], #4
     63e:	bf00      	nop
     640:	20002b48 	.word	0x20002b48
     644:	200009c0 	.word	0x200009c0

00000648 <CMD5>:


void CMD5(char *data){
     648:	b500      	push	{lr}
     64a:	b083      	sub	sp, #12
	char MSG[] = {0x70,data[1],data[2]};
     64c:	2370      	movs	r3, #112	; 0x70
     64e:	f88d 3004 	strb.w	r3, [sp, #4]
     652:	7843      	ldrb	r3, [r0, #1]
     654:	f88d 3005 	strb.w	r3, [sp, #5]
     658:	7883      	ldrb	r3, [r0, #2]
     65a:	f88d 3006 	strb.w	r3, [sp, #6]
	SendMsg(MSG,3);
     65e:	2103      	movs	r1, #3
     660:	a801      	add	r0, sp, #4
     662:	f7ff ff65 	bl	530 <SendMsg>
    lenBufferACK = sizeof(MSG);
     666:	2203      	movs	r2, #3
     668:	4b04      	ldr	r3, [pc, #16]	; (67c <CMD5+0x34>)
     66a:	701a      	strb	r2, [r3, #0]
	memcpy(bufferACK,MSG,sizeof(MSG));
     66c:	a901      	add	r1, sp, #4
     66e:	4804      	ldr	r0, [pc, #16]	; (680 <CMD5+0x38>)
     670:	f010 fdbc 	bl	111ec <memcpy>
}
     674:	b003      	add	sp, #12
     676:	f85d fb04 	ldr.w	pc, [sp], #4
     67a:	bf00      	nop
     67c:	20002b48 	.word	0x20002b48
     680:	200009c0 	.word	0x200009c0

00000684 <CMD6>:

void CMD6(char *data){
     684:	b500      	push	{lr}
     686:	b083      	sub	sp, #12
	char MSG[] = {0x80,data[1],data[2]};
     688:	2380      	movs	r3, #128	; 0x80
     68a:	f88d 3004 	strb.w	r3, [sp, #4]
     68e:	7843      	ldrb	r3, [r0, #1]
     690:	f88d 3005 	strb.w	r3, [sp, #5]
     694:	7883      	ldrb	r3, [r0, #2]
     696:	f88d 3006 	strb.w	r3, [sp, #6]
	SendMsg(MSG,3);
     69a:	2103      	movs	r1, #3
     69c:	a801      	add	r0, sp, #4
     69e:	f7ff ff47 	bl	530 <SendMsg>
    lenBufferACK = sizeof(MSG);
     6a2:	2203      	movs	r2, #3
     6a4:	4b04      	ldr	r3, [pc, #16]	; (6b8 <CMD6+0x34>)
     6a6:	701a      	strb	r2, [r3, #0]
	memcpy(bufferACK,MSG,sizeof(MSG));
     6a8:	a901      	add	r1, sp, #4
     6aa:	4804      	ldr	r0, [pc, #16]	; (6bc <CMD6+0x38>)
     6ac:	f010 fd9e 	bl	111ec <memcpy>
     6b0:	b003      	add	sp, #12
     6b2:	f85d fb04 	ldr.w	pc, [sp], #4
     6b6:	bf00      	nop
     6b8:	20002b48 	.word	0x20002b48
     6bc:	200009c0 	.word	0x200009c0

000006c0 <ProceduresMsg>:
void ProceduresMsg(char *data) {
     6c0:	b510      	push	{r4, lr}
     6c2:	b082      	sub	sp, #8
	char NAKMSG[] = { 0x15, data[1], data[1] };
     6c4:	2315      	movs	r3, #21
     6c6:	f88d 3004 	strb.w	r3, [sp, #4]
     6ca:	7843      	ldrb	r3, [r0, #1]
     6cc:	f88d 3005 	strb.w	r3, [sp, #5]
     6d0:	461a      	mov	r2, r3
     6d2:	f88d 3006 	strb.w	r3, [sp, #6]
	switch (data[0]) {
     6d6:	7803      	ldrb	r3, [r0, #0]
     6d8:	2b20      	cmp	r3, #32
     6da:	d022      	beq.n	722 <ProceduresMsg+0x62>
     6dc:	d80a      	bhi.n	6f4 <ProceduresMsg+0x34>
     6de:	2b06      	cmp	r3, #6
     6e0:	d021      	beq.n	726 <ProceduresMsg+0x66>
     6e2:	2b15      	cmp	r3, #21
     6e4:	d124      	bne.n	730 <ProceduresMsg+0x70>
		if (lenBufferACK != 0)
     6e6:	4b16      	ldr	r3, [pc, #88]	; (740 <ProceduresMsg+0x80>)
     6e8:	781b      	ldrb	r3, [r3, #0]
     6ea:	b1fb      	cbz	r3, 72c <ProceduresMsg+0x6c>
			ProceduresMsg(bufferACK);
     6ec:	4815      	ldr	r0, [pc, #84]	; (744 <ProceduresMsg+0x84>)
     6ee:	f7ff ffe7 	bl	6c0 <ProceduresMsg>
     6f2:	e01b      	b.n	72c <ProceduresMsg+0x6c>
	switch (data[0]) {
     6f4:	2b40      	cmp	r3, #64	; 0x40
     6f6:	d11b      	bne.n	730 <ProceduresMsg+0x70>
		if (lenBufferACK != 0)
     6f8:	4b11      	ldr	r3, [pc, #68]	; (740 <ProceduresMsg+0x80>)
     6fa:	7819      	ldrb	r1, [r3, #0]
     6fc:	b1b1      	cbz	r1, 72c <ProceduresMsg+0x6c>
			SendMsg(bufferACK,lenBufferACK);
     6fe:	4811      	ldr	r0, [pc, #68]	; (744 <ProceduresMsg+0x84>)
     700:	f7ff ff16 	bl	530 <SendMsg>
     704:	e012      	b.n	72c <ProceduresMsg+0x6c>
		for (uint8_t f = 0; f < 5; f++) {
     706:	3301      	adds	r3, #1
     708:	b2db      	uxtb	r3, r3
     70a:	2b04      	cmp	r3, #4
     70c:	d80e      	bhi.n	72c <ProceduresMsg+0x6c>
			if (data[1] == idCMD[f]) {
     70e:	461c      	mov	r4, r3
     710:	490d      	ldr	r1, [pc, #52]	; (748 <ProceduresMsg+0x88>)
     712:	5cc9      	ldrb	r1, [r1, r3]
     714:	428a      	cmp	r2, r1
     716:	d1f6      	bne.n	706 <ProceduresMsg+0x46>
				FUNC[f](data);
     718:	4b0c      	ldr	r3, [pc, #48]	; (74c <ProceduresMsg+0x8c>)
     71a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
     71e:	4798      	blx	r3
				break;
     720:	e004      	b.n	72c <ProceduresMsg+0x6c>
	switch (data[0]) {
     722:	2300      	movs	r3, #0
     724:	e7f1      	b.n	70a <ProceduresMsg+0x4a>
		lenBufferACK = 0;
     726:	4b06      	ldr	r3, [pc, #24]	; (740 <ProceduresMsg+0x80>)
     728:	2200      	movs	r2, #0
     72a:	701a      	strb	r2, [r3, #0]
}
     72c:	b002      	add	sp, #8
     72e:	bd10      	pop	{r4, pc}
		SendMsg(NAKMSG, 3);
     730:	2103      	movs	r1, #3
     732:	a801      	add	r0, sp, #4
     734:	f7ff fefc 	bl	530 <SendMsg>
		lenBufferACK = 0;
     738:	4b01      	ldr	r3, [pc, #4]	; (740 <ProceduresMsg+0x80>)
     73a:	2200      	movs	r2, #0
     73c:	701a      	strb	r2, [r3, #0]
}
     73e:	e7f5      	b.n	72c <ProceduresMsg+0x6c>
     740:	20002b48 	.word	0x20002b48
     744:	200009c0 	.word	0x200009c0
     748:	00014460 	.word	0x00014460
     74c:	00014448 	.word	0x00014448

00000750 <ReadMsg>:
void ReadMsg(){
     750:	b530      	push	{r4, r5, lr}
     752:	b097      	sub	sp, #92	; 0x5c
	size_t len = MIN(ring_buf_space_get(&ringbuf),
     754:	482a      	ldr	r0, [pc, #168]	; (800 <CONFIG_ISR_STACK_SIZE>)
     756:	f00f fce2 	bl	1011e <ring_buf_space_get>
     75a:	283f      	cmp	r0, #63	; 0x3f
     75c:	d90e      	bls.n	77c <ReadMsg+0x2c>
     75e:	2240      	movs	r2, #64	; 0x40
	rb_len = uart_fifo_read(uart_dev, buffer, len);
     760:	4b28      	ldr	r3, [pc, #160]	; (804 <CONFIG_ISR_STACK_SIZE+0x4>)
     762:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
     764:	6883      	ldr	r3, [r0, #8]
	if (api->fifo_read == NULL) {
     766:	699b      	ldr	r3, [r3, #24]
     768:	b16b      	cbz	r3, 786 <ReadMsg+0x36>
	return api->fifo_read(dev, rx_data, size);
     76a:	a906      	add	r1, sp, #24
     76c:	4798      	blx	r3
     76e:	4604      	mov	r4, r0
	if(buffer[0]== 0x7E && buffer[rb_len-1] == 0xFF && rb_len >6){
     770:	f89d 3018 	ldrb.w	r3, [sp, #24]
     774:	2b7e      	cmp	r3, #126	; 0x7e
     776:	d009      	beq.n	78c <ReadMsg+0x3c>
}
     778:	b017      	add	sp, #92	; 0x5c
     77a:	bd30      	pop	{r4, r5, pc}
	size_t len = MIN(ring_buf_space_get(&ringbuf),
     77c:	4820      	ldr	r0, [pc, #128]	; (800 <CONFIG_ISR_STACK_SIZE>)
     77e:	f00f fcce 	bl	1011e <ring_buf_space_get>
     782:	4602      	mov	r2, r0
     784:	e7ec      	b.n	760 <ReadMsg+0x10>
		return -ENOSYS;
     786:	f06f 0457 	mvn.w	r4, #87	; 0x57
     78a:	e7f1      	b.n	770 <ReadMsg+0x20>
	if(buffer[0]== 0x7E && buffer[rb_len-1] == 0xFF && rb_len >6){
     78c:	1e63      	subs	r3, r4, #1
     78e:	aa16      	add	r2, sp, #88	; 0x58
     790:	4413      	add	r3, r2
     792:	f813 3c40 	ldrb.w	r3, [r3, #-64]
     796:	2bff      	cmp	r3, #255	; 0xff
     798:	d1ee      	bne.n	778 <ReadMsg+0x28>
     79a:	2c06      	cmp	r4, #6
     79c:	ddec      	ble.n	778 <ReadMsg+0x28>
		memcpy(commandAPayload,&buffer[1],rb_len -4);
     79e:	1f25      	subs	r5, r4, #4
     7a0:	462a      	mov	r2, r5
     7a2:	f10d 0119 	add.w	r1, sp, #25
     7a6:	a802      	add	r0, sp, #8
     7a8:	f010 fd20 	bl	111ec <memcpy>
		memcpy(crc,&buffer[rb_len-3],2);
     7ac:	1ee1      	subs	r1, r4, #3
     7ae:	2202      	movs	r2, #2
     7b0:	ab06      	add	r3, sp, #24
     7b2:	4419      	add	r1, r3
     7b4:	a801      	add	r0, sp, #4
     7b6:	f010 fd19 	bl	111ec <memcpy>
		if( crc16calc(commandAPayload,rb_len -4 ) == (crc[0]<<8 | crc[1])){
     7ba:	4629      	mov	r1, r5
     7bc:	a802      	add	r0, sp, #8
     7be:	f00e fe27 	bl	f410 <crc16calc>
     7c2:	f89d 2004 	ldrb.w	r2, [sp, #4]
     7c6:	f89d 3005 	ldrb.w	r3, [sp, #5]
     7ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
     7ce:	4298      	cmp	r0, r3
     7d0:	d011      	beq.n	7f6 <ReadMsg+0xa6>
			char NAKMSG[] = {NACK,commandAPayload[1],0x0A};
     7d2:	2315      	movs	r3, #21
     7d4:	f88d 3000 	strb.w	r3, [sp]
     7d8:	f89d 3009 	ldrb.w	r3, [sp, #9]
     7dc:	f88d 3001 	strb.w	r3, [sp, #1]
     7e0:	230a      	movs	r3, #10
     7e2:	f88d 3002 	strb.w	r3, [sp, #2]
			SendMsg(NAKMSG,3);
     7e6:	2103      	movs	r1, #3
     7e8:	4668      	mov	r0, sp
     7ea:	f7ff fea1 	bl	530 <SendMsg>
			lenBufferACK = 0;
     7ee:	4b06      	ldr	r3, [pc, #24]	; (808 <CONFIG_ISR_STACK_SIZE+0x8>)
     7f0:	2200      	movs	r2, #0
     7f2:	701a      	strb	r2, [r3, #0]
}
     7f4:	e7c0      	b.n	778 <ReadMsg+0x28>
			ProceduresMsg(commandAPayload);
     7f6:	a802      	add	r0, sp, #8
     7f8:	f7ff ff62 	bl	6c0 <ProceduresMsg>
     7fc:	e7bc      	b.n	778 <ReadMsg+0x28>
     7fe:	bf00      	nop
     800:	20000e40 	.word	0x20000e40
     804:	20000e5c 	.word	0x20000e5c
     808:	20002b48 	.word	0x20002b48

0000080c <configureLFS>:
struct fs_dirent dirent;



void configureLFS(void)
{
     80c:	b570      	push	{r4, r5, r6, lr}
     80e:	b086      	sub	sp, #24
		&FS_FSTAB_ENTRY(PARTITION_NODE)
#else
		&lfs_storage_mnt
#endif
		;
	unsigned int id = (uintptr_t)mp->storage_dev;
     810:	4c1b      	ldr	r4, [pc, #108]	; (880 <configureLFS+0x74>)
     812:	6965      	ldr	r5, [r4, #20]

	struct fs_statvfs sbuf;
	const struct flash_area *pfa;
	int rc;

	snprintf(fnameLPS, sizeof(fnameLPS), "%s/boot_count", mp->mnt_point);
     814:	68e3      	ldr	r3, [r4, #12]
     816:	4a1b      	ldr	r2, [pc, #108]	; (884 <configureLFS+0x78>)
     818:	21ff      	movs	r1, #255	; 0xff
     81a:	481b      	ldr	r0, [pc, #108]	; (888 <configureLFS+0x7c>)
     81c:	f004 fa68 	bl	4cf0 <snprintf>
	snprintf(fnameHSC, sizeof(fnameHSC), "%s/boot_count2", mp->mnt_point);
     820:	68e3      	ldr	r3, [r4, #12]
     822:	4a1a      	ldr	r2, [pc, #104]	; (88c <configureLFS+0x80>)
     824:	21ff      	movs	r1, #255	; 0xff
     826:	481a      	ldr	r0, [pc, #104]	; (890 <configureLFS+0x84>)
     828:	f004 fa62 	bl	4cf0 <snprintf>

	rc = flash_area_open(id, &pfa);
     82c:	a901      	add	r1, sp, #4
     82e:	b2e8      	uxtb	r0, r5
     830:	f003 f9b0 	bl	3b94 <flash_area_open>
	if (rc < 0)return;
     834:	2800      	cmp	r0, #0
     836:	db20      	blt.n	87a <configureLFS+0x6e>
	/* Optional wipe flash contents */
	if (IS_ENABLED(CONFIG_APP_WIPE_STORAGE)) {
		rc = flash_area_erase(pfa, 0, pfa->fa_size);
	}

	flash_area_close(pfa);
     838:	9801      	ldr	r0, [sp, #4]
     83a:	f010 fb4f 	bl	10edc <flash_area_close>

	/* Do not mount if auto-mount has been enabled */
#if !DT_NODE_EXISTS(PARTITION_NODE) ||						\
	!(FSTAB_ENTRY_DT_MOUNT_FLAGS(PARTITION_NODE) & FS_MOUNT_FLAG_AUTOMOUNT)
	rc = fs_mount(mp);
     83e:	4620      	mov	r0, r4
     840:	f004 fd12 	bl	5268 <fs_mount>
	if (rc < 0) {
     844:	2800      	cmp	r0, #0
     846:	db18      	blt.n	87a <configureLFS+0x6e>
	// printk("%s mount: %d\n", mp->mnt_point, rc);
#else
	// printk("%s automounted\n", mp->mnt_point);
#endif

	rc = fs_statvfs(mp->mnt_point, &sbuf);
     848:	a902      	add	r1, sp, #8
     84a:	68e0      	ldr	r0, [r4, #12]
     84c:	f004 fcac 	bl	51a8 <fs_statvfs>
	fREF = mp;
     850:	4b10      	ldr	r3, [pc, #64]	; (894 <configureLFS+0x88>)
     852:	601c      	str	r4, [r3, #0]
 * @param zfp Pointer to file object
 *
 */
static inline void fs_file_t_init(struct fs_file_t *zfp)
{
	*zfp = (struct fs_file_t){ 0 };
     854:	4b10      	ldr	r3, [pc, #64]	; (898 <configureLFS+0x8c>)
     856:	2400      	movs	r4, #0
     858:	601c      	str	r4, [r3, #0]
     85a:	605c      	str	r4, [r3, #4]
     85c:	609c      	str	r4, [r3, #8]

	fs_file_t_init(&fLPS);

	rc = fs_stat(fnameLPS, &dirent);
     85e:	4e0f      	ldr	r6, [pc, #60]	; (89c <configureLFS+0x90>)
     860:	4d09      	ldr	r5, [pc, #36]	; (888 <configureLFS+0x7c>)
     862:	4631      	mov	r1, r6
     864:	4628      	mov	r0, r5
     866:	f004 fc37 	bl	50d8 <fs_stat>
     86a:	4b0d      	ldr	r3, [pc, #52]	; (8a0 <configureLFS+0x94>)
     86c:	601c      	str	r4, [r3, #0]
     86e:	605c      	str	r4, [r3, #4]
     870:	609c      	str	r4, [r3, #8]

	fs_file_t_init(&fHSC);

	rc = fs_stat(fnameLPS, &dirent);
     872:	4631      	mov	r1, r6
     874:	4628      	mov	r0, r5
     876:	f004 fc2f 	bl	50d8 <fs_stat>

}
     87a:	b006      	add	sp, #24
     87c:	bd70      	pop	{r4, r5, r6, pc}
     87e:	bf00      	nop
     880:	20000000 	.word	0x20000000
     884:	00014468 	.word	0x00014468
     888:	20001084 	.word	0x20001084
     88c:	00014478 	.word	0x00014478
     890:	20000f84 	.word	0x20000f84
     894:	20000f80 	.word	0x20000f80
     898:	20000f74 	.word	0x20000f74
     89c:	20000e60 	.word	0x20000e60
     8a0:	20000f68 	.word	0x20000f68

000008a4 <cFSTEST>:


uint32_t cFSTEST(){
     8a4:	b510      	push	{r4, lr}
     8a6:	b082      	sub	sp, #8
	int rc;
	uint32_t boot_count = 0;
     8a8:	2300      	movs	r3, #0
     8aa:	9301      	str	r3, [sp, #4]

	if (rc >= 0) {
		rc = fs_read(&fLPS, &boot_count, sizeof(boot_count));
     8ac:	4c1d      	ldr	r4, [pc, #116]	; (924 <cFSTEST+0x80>)
     8ae:	2204      	movs	r2, #4
     8b0:	eb0d 0102 	add.w	r1, sp, r2
     8b4:	4620      	mov	r0, r4
     8b6:	f004 fb91 	bl	4fdc <fs_read>
		rc = fs_seek(&fLPS, 0, FS_SEEK_SET);
     8ba:	2200      	movs	r2, #0
     8bc:	4611      	mov	r1, r2
     8be:	4620      	mov	r0, r4
     8c0:	f004 fbe0 	bl	5084 <fs_seek>
	}
	boot_count += 1;
     8c4:	9b01      	ldr	r3, [sp, #4]
     8c6:	3301      	adds	r3, #1
     8c8:	9301      	str	r3, [sp, #4]
	rc = fs_write(&fLPS, &boot_count, sizeof(boot_count));
     8ca:	2204      	movs	r2, #4
     8cc:	eb0d 0102 	add.w	r1, sp, r2
     8d0:	4620      	mov	r0, r4
     8d2:	f004 fbad 	bl	5030 <fs_write>
	rc = fs_close(&fLPS);
     8d6:	4620      	mov	r0, r4
     8d8:	f004 fb54 	bl	4f84 <fs_close>

	//BEGIN MOD

	rc = fs_open(&fHSC, fnameHSC, FS_O_CREATE | FS_O_RDWR);
     8dc:	2213      	movs	r2, #19
     8de:	4912      	ldr	r1, [pc, #72]	; (928 <cFSTEST+0x84>)
     8e0:	4812      	ldr	r0, [pc, #72]	; (92c <cFSTEST+0x88>)
     8e2:	f004 fad1 	bl	4e88 <fs_open>

	uint32_t boot_count2 = 0;
     8e6:	2300      	movs	r3, #0
     8e8:	9300      	str	r3, [sp, #0]
	if (rc >= 0) {
     8ea:	4298      	cmp	r0, r3
     8ec:	da0e      	bge.n	90c <cFSTEST+0x68>
		rc = fs_read(&fHSC, &boot_count2, sizeof(boot_count2));
		rc = fs_seek(&fHSC, 0, FS_SEEK_SET);
	}
	boot_count2 += 2;
     8ee:	9b00      	ldr	r3, [sp, #0]
     8f0:	3302      	adds	r3, #2
     8f2:	9300      	str	r3, [sp, #0]
	rc = fs_write(&fHSC, &boot_count2, sizeof(boot_count2));
     8f4:	4c0d      	ldr	r4, [pc, #52]	; (92c <cFSTEST+0x88>)
     8f6:	2204      	movs	r2, #4
     8f8:	4669      	mov	r1, sp
     8fa:	4620      	mov	r0, r4
     8fc:	f004 fb98 	bl	5030 <fs_write>
	rc = fs_close(&fHSC);
     900:	4620      	mov	r0, r4
     902:	f004 fb3f 	bl	4f84 <fs_close>

	//END MOD
	return  boot_count2;

}
     906:	9800      	ldr	r0, [sp, #0]
     908:	b002      	add	sp, #8
     90a:	bd10      	pop	{r4, pc}
		rc = fs_read(&fHSC, &boot_count2, sizeof(boot_count2));
     90c:	4c07      	ldr	r4, [pc, #28]	; (92c <cFSTEST+0x88>)
     90e:	2204      	movs	r2, #4
     910:	4669      	mov	r1, sp
     912:	4620      	mov	r0, r4
     914:	f004 fb62 	bl	4fdc <fs_read>
		rc = fs_seek(&fHSC, 0, FS_SEEK_SET);
     918:	2200      	movs	r2, #0
     91a:	4611      	mov	r1, r2
     91c:	4620      	mov	r0, r4
     91e:	f004 fbb1 	bl	5084 <fs_seek>
     922:	e7e4      	b.n	8ee <cFSTEST+0x4a>
     924:	20000f74 	.word	0x20000f74
     928:	20000f84 	.word	0x20000f84
     92c:	20000f68 	.word	0x20000f68

00000930 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
     930:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
     932:	680b      	ldr	r3, [r1, #0]
     934:	3301      	adds	r3, #1
     936:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     938:	4b01      	ldr	r3, [pc, #4]	; (940 <char_out+0x10>)
     93a:	681b      	ldr	r3, [r3, #0]
     93c:	4798      	blx	r3
}
     93e:	bd08      	pop	{r3, pc}
     940:	20000124 	.word	0x20000124

00000944 <__printk_hook_install>:
	_char_out = fn;
     944:	4b01      	ldr	r3, [pc, #4]	; (94c <__printk_hook_install+0x8>)
     946:	6018      	str	r0, [r3, #0]
}
     948:	4770      	bx	lr
     94a:	bf00      	nop
     94c:	20000124 	.word	0x20000124

00000950 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     950:	b500      	push	{lr}
     952:	b083      	sub	sp, #12
     954:	4602      	mov	r2, r0
     956:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     958:	2100      	movs	r1, #0
     95a:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     95c:	a901      	add	r1, sp, #4
     95e:	4803      	ldr	r0, [pc, #12]	; (96c <vprintk+0x1c>)
     960:	f000 f8c8 	bl	af4 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     964:	b003      	add	sp, #12
     966:	f85d fb04 	ldr.w	pc, [sp], #4
     96a:	bf00      	nop
     96c:	00000931 	.word	0x00000931

00000970 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     970:	b510      	push	{r4, lr}
     972:	b084      	sub	sp, #16
     974:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
     976:	9001      	str	r0, [sp, #4]
     978:	9102      	str	r1, [sp, #8]
     97a:	2100      	movs	r1, #0
     97c:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
     97e:	a901      	add	r1, sp, #4
     980:	4805      	ldr	r0, [pc, #20]	; (998 <vsnprintk+0x28>)
     982:	f000 f8b7 	bl	af4 <cbvprintf>

	if (ctx.count < ctx.max) {
     986:	9b03      	ldr	r3, [sp, #12]
     988:	9a02      	ldr	r2, [sp, #8]
     98a:	4293      	cmp	r3, r2
     98c:	da01      	bge.n	992 <vsnprintk+0x22>
		str[ctx.count] = '\0';
     98e:	2200      	movs	r2, #0
     990:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
     992:	9803      	ldr	r0, [sp, #12]
     994:	b004      	add	sp, #16
     996:	bd10      	pop	{r4, pc}
     998:	0000f4c9 	.word	0x0000f4c9

0000099c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     99c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     9a0:	b083      	sub	sp, #12
     9a2:	4604      	mov	r4, r0
     9a4:	4608      	mov	r0, r1
     9a6:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     9a8:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     9aa:	f013 0f08 	tst.w	r3, #8
     9ae:	d105      	bne.n	9bc <process_event+0x20>
     9b0:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     9b4:	2300      	movs	r3, #0
     9b6:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     9b8:	9301      	str	r3, [sp, #4]
}
     9ba:	e069      	b.n	a90 <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
     9bc:	2901      	cmp	r1, #1
     9be:	d009      	beq.n	9d4 <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     9c0:	f043 0320 	orr.w	r3, r3, #32
     9c4:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     9c6:	f385 8811 	msr	BASEPRI, r5
     9ca:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     9ce:	b003      	add	sp, #12
     9d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     9d4:	f043 0310 	orr.w	r3, r3, #16
     9d8:	8323      	strh	r3, [r4, #24]
     9da:	e7f4      	b.n	9c6 <process_event+0x2a>
			evt = process_recheck(mgr);
     9dc:	4620      	mov	r0, r4
     9de:	f00e fdce 	bl	f57e <process_recheck>
     9e2:	e057      	b.n	a94 <process_event+0xf8>
			res = mgr->last_res;
     9e4:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
     9e8:	464a      	mov	r2, r9
     9ea:	4669      	mov	r1, sp
     9ec:	4620      	mov	r0, r4
     9ee:	f00e fddf 	bl	f5b0 <process_complete>
		onoff_transition_fn transit = NULL;
     9f2:	2700      	movs	r7, #0
     9f4:	e05a      	b.n	aac <process_event+0x110>
			transit = mgr->transitions->start;
     9f6:	6923      	ldr	r3, [r4, #16]
     9f8:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
     9fa:	2106      	movs	r1, #6
     9fc:	4620      	mov	r0, r4
     9fe:	f00e fd97 	bl	f530 <set_state>
		res = 0;
     a02:	f04f 0900 	mov.w	r9, #0
     a06:	e051      	b.n	aac <process_event+0x110>
			transit = mgr->transitions->stop;
     a08:	6923      	ldr	r3, [r4, #16]
     a0a:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
     a0c:	2104      	movs	r1, #4
     a0e:	4620      	mov	r0, r4
     a10:	f00e fd8e 	bl	f530 <set_state>
		res = 0;
     a14:	f04f 0900 	mov.w	r9, #0
     a18:	e048      	b.n	aac <process_event+0x110>
			transit = mgr->transitions->reset;
     a1a:	6923      	ldr	r3, [r4, #16]
     a1c:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
     a1e:	2105      	movs	r1, #5
     a20:	4620      	mov	r0, r4
     a22:	f00e fd85 	bl	f530 <set_state>
		res = 0;
     a26:	f04f 0900 	mov.w	r9, #0
     a2a:	e03f      	b.n	aac <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
     a2c:	2200      	movs	r2, #0
     a2e:	e046      	b.n	abe <process_event+0x122>
     a30:	2200      	movs	r2, #0
     a32:	e044      	b.n	abe <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     a34:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     a38:	8323      	strh	r3, [r4, #24]
     a3a:	f385 8811 	msr	BASEPRI, r5
     a3e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     a42:	2900      	cmp	r1, #0
     a44:	d144      	bne.n	ad0 <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     a46:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     a48:	b12b      	cbz	r3, a56 <process_event+0xba>
				notify_all(mgr, &clients, state, res);
     a4a:	464b      	mov	r3, r9
     a4c:	4642      	mov	r2, r8
     a4e:	4669      	mov	r1, sp
     a50:	4620      	mov	r0, r4
     a52:	f00e fe23 	bl	f69c <notify_all>
			if (transit != NULL) {
     a56:	b117      	cbz	r7, a5e <process_event+0xc2>
				transit(mgr, transition_complete);
     a58:	4925      	ldr	r1, [pc, #148]	; (af0 <process_event+0x154>)
     a5a:	4620      	mov	r0, r4
     a5c:	47b8      	blx	r7
	__asm__ volatile(
     a5e:	f04f 0320 	mov.w	r3, #32
     a62:	f3ef 8511 	mrs	r5, BASEPRI
     a66:	f383 8812 	msr	BASEPRI_MAX, r3
     a6a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     a6e:	8b23      	ldrh	r3, [r4, #24]
     a70:	f023 0308 	bic.w	r3, r3, #8
     a74:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     a76:	8b23      	ldrh	r3, [r4, #24]
     a78:	f013 0f10 	tst.w	r3, #16
     a7c:	d02e      	beq.n	adc <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     a7e:	f023 0310 	bic.w	r3, r3, #16
     a82:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     a84:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     a86:	8b26      	ldrh	r6, [r4, #24]
     a88:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
     a8c:	2800      	cmp	r0, #0
     a8e:	d09a      	beq.n	9c6 <process_event+0x2a>
		if (evt == EVT_RECHECK) {
     a90:	2802      	cmp	r0, #2
     a92:	d0a3      	beq.n	9dc <process_event+0x40>
		if (evt == EVT_NOP) {
     a94:	2800      	cmp	r0, #0
     a96:	d096      	beq.n	9c6 <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
     a98:	2801      	cmp	r0, #1
     a9a:	d0a3      	beq.n	9e4 <process_event+0x48>
		} else if (evt == EVT_START) {
     a9c:	2803      	cmp	r0, #3
     a9e:	d0aa      	beq.n	9f6 <process_event+0x5a>
		} else if (evt == EVT_STOP) {
     aa0:	2804      	cmp	r0, #4
     aa2:	d0b1      	beq.n	a08 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
     aa4:	2805      	cmp	r0, #5
     aa6:	d0b8      	beq.n	a1a <process_event+0x7e>
		onoff_transition_fn transit = NULL;
     aa8:	2700      	movs	r7, #0
		res = 0;
     aaa:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     aac:	8b23      	ldrh	r3, [r4, #24]
     aae:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     ab2:	45b0      	cmp	r8, r6
     ab4:	d0ba      	beq.n	a2c <process_event+0x90>
     ab6:	68a2      	ldr	r2, [r4, #8]
     ab8:	2a00      	cmp	r2, #0
     aba:	d0b9      	beq.n	a30 <process_event+0x94>
     abc:	2201      	movs	r2, #1
		if (do_monitors
     abe:	4611      	mov	r1, r2
     ac0:	2a00      	cmp	r2, #0
     ac2:	d1b7      	bne.n	a34 <process_event+0x98>
     ac4:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     ac6:	2a00      	cmp	r2, #0
     ac8:	d1b4      	bne.n	a34 <process_event+0x98>
		    || (transit != NULL)) {
     aca:	2f00      	cmp	r7, #0
     acc:	d1b2      	bne.n	a34 <process_event+0x98>
     ace:	e7d2      	b.n	a76 <process_event+0xda>
				notify_monitors(mgr, state, res);
     ad0:	464a      	mov	r2, r9
     ad2:	4641      	mov	r1, r8
     ad4:	4620      	mov	r0, r4
     ad6:	f00e fd33 	bl	f540 <notify_monitors>
     ada:	e7b4      	b.n	a46 <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     adc:	f013 0f20 	tst.w	r3, #32
     ae0:	d004      	beq.n	aec <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     ae2:	f023 0320 	bic.w	r3, r3, #32
     ae6:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
     ae8:	2002      	movs	r0, #2
     aea:	e7cc      	b.n	a86 <process_event+0xea>
		evt = EVT_NOP;
     aec:	2000      	movs	r0, #0
     aee:	e7ca      	b.n	a86 <process_event+0xea>
     af0:	0000f6cb 	.word	0x0000f6cb

00000af4 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     af8:	b093      	sub	sp, #76	; 0x4c
     afa:	4606      	mov	r6, r0
     afc:	460d      	mov	r5, r1
     afe:	4692      	mov	sl, r2
     b00:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     b02:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     b04:	f89a 0000 	ldrb.w	r0, [sl]
     b08:	2800      	cmp	r0, #0
     b0a:	f000 84d6 	beq.w	14ba <CONFIG_FPROTECT_BLOCK_SIZE+0x4ba>
		if (*fp != '%') {
     b0e:	2825      	cmp	r0, #37	; 0x25
     b10:	d008      	beq.n	b24 <cbvprintf+0x30>
			OUTC(*fp++);
     b12:	f10a 0a01 	add.w	sl, sl, #1
     b16:	4629      	mov	r1, r5
     b18:	47b0      	blx	r6
     b1a:	2800      	cmp	r0, #0
     b1c:	f2c0 84ce 	blt.w	14bc <CONFIG_FPROTECT_BLOCK_SIZE+0x4bc>
     b20:	3401      	adds	r4, #1
			continue;
     b22:	e7ef      	b.n	b04 <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
     b24:	2300      	movs	r3, #0
     b26:	9306      	str	r3, [sp, #24]
     b28:	9307      	str	r3, [sp, #28]
     b2a:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
     b2c:	9308      	str	r3, [sp, #32]
     b2e:	9309      	str	r3, [sp, #36]	; 0x24
     b30:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
     b32:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
     b36:	f89a 3001 	ldrb.w	r3, [sl, #1]
     b3a:	2b25      	cmp	r3, #37	; 0x25
     b3c:	d001      	beq.n	b42 <cbvprintf+0x4e>
	bool loop = true;
     b3e:	2701      	movs	r7, #1
     b40:	e02c      	b.n	b9c <cbvprintf+0xa8>
		conv->specifier = *sp++;
     b42:	f10a 0802 	add.w	r8, sl, #2
     b46:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
     b4a:	e1a8      	b.n	e9e <cbvprintf+0x3aa>
			conv->flag_dash = true;
     b4c:	f89d 3020 	ldrb.w	r3, [sp, #32]
     b50:	f043 0304 	orr.w	r3, r3, #4
     b54:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
     b58:	b1ff      	cbz	r7, b9a <cbvprintf+0xa6>
			++sp;
     b5a:	f108 0801 	add.w	r8, r8, #1
     b5e:	e01c      	b.n	b9a <cbvprintf+0xa6>
			conv->flag_plus = true;
     b60:	f89d 3020 	ldrb.w	r3, [sp, #32]
     b64:	f043 0308 	orr.w	r3, r3, #8
     b68:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     b6c:	e7f4      	b.n	b58 <cbvprintf+0x64>
			conv->flag_space = true;
     b6e:	f89d 3020 	ldrb.w	r3, [sp, #32]
     b72:	f043 0310 	orr.w	r3, r3, #16
     b76:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     b7a:	e7ed      	b.n	b58 <cbvprintf+0x64>
			conv->flag_hash = true;
     b7c:	f89d 3020 	ldrb.w	r3, [sp, #32]
     b80:	f043 0320 	orr.w	r3, r3, #32
     b84:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     b88:	e7e6      	b.n	b58 <cbvprintf+0x64>
			conv->flag_zero = true;
     b8a:	f89d 3020 	ldrb.w	r3, [sp, #32]
     b8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     b92:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     b96:	e7df      	b.n	b58 <cbvprintf+0x64>
		switch (*sp) {
     b98:	2700      	movs	r7, #0
	} while (loop);
     b9a:	b34f      	cbz	r7, bf0 <cbvprintf+0xfc>
		switch (*sp) {
     b9c:	f898 3000 	ldrb.w	r3, [r8]
     ba0:	3b20      	subs	r3, #32
     ba2:	2b10      	cmp	r3, #16
     ba4:	d8f8      	bhi.n	b98 <cbvprintf+0xa4>
     ba6:	a201      	add	r2, pc, #4	; (adr r2, bac <cbvprintf+0xb8>)
     ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     bac:	00000b6f 	.word	0x00000b6f
     bb0:	00000b99 	.word	0x00000b99
     bb4:	00000b99 	.word	0x00000b99
     bb8:	00000b7d 	.word	0x00000b7d
     bbc:	00000b99 	.word	0x00000b99
     bc0:	00000b99 	.word	0x00000b99
     bc4:	00000b99 	.word	0x00000b99
     bc8:	00000b99 	.word	0x00000b99
     bcc:	00000b99 	.word	0x00000b99
     bd0:	00000b99 	.word	0x00000b99
     bd4:	00000b99 	.word	0x00000b99
     bd8:	00000b61 	.word	0x00000b61
     bdc:	00000b99 	.word	0x00000b99
     be0:	00000b4d 	.word	0x00000b4d
     be4:	00000b99 	.word	0x00000b99
     be8:	00000b99 	.word	0x00000b99
     bec:	00000b8b 	.word	0x00000b8b
	if (conv->flag_zero && conv->flag_dash) {
     bf0:	f89d 3020 	ldrb.w	r3, [sp, #32]
     bf4:	f003 0344 	and.w	r3, r3, #68	; 0x44
     bf8:	2b44      	cmp	r3, #68	; 0x44
     bfa:	d06d      	beq.n	cd8 <cbvprintf+0x1e4>
	sp = extract_width(conv, sp);
     bfc:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
     c00:	f89d 3020 	ldrb.w	r3, [sp, #32]
     c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     c08:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
     c0c:	f898 3000 	ldrb.w	r3, [r8]
     c10:	2b2a      	cmp	r3, #42	; 0x2a
     c12:	d068      	beq.n	ce6 <cbvprintf+0x1f2>
	size_t width = extract_decimal(&sp);
     c14:	a805      	add	r0, sp, #20
     c16:	f00f f9b5 	bl	ff84 <extract_decimal>
	if (sp != wp) {
     c1a:	9b05      	ldr	r3, [sp, #20]
     c1c:	4598      	cmp	r8, r3
     c1e:	d012      	beq.n	c46 <cbvprintf+0x152>
		conv->width_present = true;
     c20:	f89d 3020 	ldrb.w	r3, [sp, #32]
     c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     c28:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
     c2c:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
     c2e:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
     c32:	2800      	cmp	r0, #0
     c34:	db60      	blt.n	cf8 <cbvprintf+0x204>
     c36:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
     c38:	4313      	orrs	r3, r2
     c3a:	f89d 2020 	ldrb.w	r2, [sp, #32]
     c3e:	f363 0241 	bfi	r2, r3, #1, #1
     c42:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
     c46:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
     c48:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
     c4a:	781b      	ldrb	r3, [r3, #0]
     c4c:	2b2e      	cmp	r3, #46	; 0x2e
     c4e:	bf14      	ite	ne
     c50:	2300      	movne	r3, #0
     c52:	2301      	moveq	r3, #1
     c54:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     c58:	f363 0241 	bfi	r2, r3, #1, #1
     c5c:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
     c60:	2b00      	cmp	r3, #0
     c62:	d04b      	beq.n	cfc <cbvprintf+0x208>
	++sp;
     c64:	9b05      	ldr	r3, [sp, #20]
     c66:	1c5a      	adds	r2, r3, #1
     c68:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
     c6a:	785b      	ldrb	r3, [r3, #1]
     c6c:	2b2a      	cmp	r3, #42	; 0x2a
     c6e:	d048      	beq.n	d02 <cbvprintf+0x20e>
	size_t prec = extract_decimal(&sp);
     c70:	a805      	add	r0, sp, #20
     c72:	f00f f987 	bl	ff84 <extract_decimal>
	conv->prec_value = prec;
     c76:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
     c78:	f89d 3020 	ldrb.w	r3, [sp, #32]
     c7c:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
     c80:	2800      	cmp	r0, #0
     c82:	db47      	blt.n	d14 <cbvprintf+0x220>
     c84:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
     c86:	4313      	orrs	r3, r2
     c88:	f89d 2020 	ldrb.w	r2, [sp, #32]
     c8c:	f363 0241 	bfi	r2, r3, #1, #1
     c90:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
     c94:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
     c98:	f898 3000 	ldrb.w	r3, [r8]
     c9c:	3b4c      	subs	r3, #76	; 0x4c
     c9e:	2b2e      	cmp	r3, #46	; 0x2e
     ca0:	f200 80dc 	bhi.w	e5c <cbvprintf+0x368>
     ca4:	e8df f003 	tbb	[pc, r3]
     ca8:	dadadaca 	.word	0xdadadaca
     cac:	dadadada 	.word	0xdadadada
     cb0:	dadadada 	.word	0xdadadada
     cb4:	dadadada 	.word	0xdadadada
     cb8:	dadadada 	.word	0xdadadada
     cbc:	dadadada 	.word	0xdadadada
     cc0:	dadadada 	.word	0xdadadada
     cc4:	da6ada38 	.word	0xda6ada38
     cc8:	dadada51 	.word	0xdadada51
     ccc:	dadadada 	.word	0xdadadada
     cd0:	dadadac0 	.word	0xdadadac0
     cd4:	dada      	.short	0xdada
     cd6:	b6          	.byte	0xb6
     cd7:	00          	.byte	0x00
		conv->flag_zero = false;
     cd8:	f89d 3020 	ldrb.w	r3, [sp, #32]
     cdc:	f36f 1386 	bfc	r3, #6, #1
     ce0:	f88d 3020 	strb.w	r3, [sp, #32]
     ce4:	e78a      	b.n	bfc <cbvprintf+0x108>
		conv->width_star = true;
     ce6:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     cea:	f043 0301 	orr.w	r3, r3, #1
     cee:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
     cf2:	4643      	mov	r3, r8
     cf4:	3301      	adds	r3, #1
     cf6:	e7a7      	b.n	c48 <cbvprintf+0x154>
				      || (width != (size_t)conv->width_value));
     cf8:	2201      	movs	r2, #1
     cfa:	e79d      	b.n	c38 <cbvprintf+0x144>
		return sp;
     cfc:	f8dd 8014 	ldr.w	r8, [sp, #20]
     d00:	e7ca      	b.n	c98 <cbvprintf+0x1a4>
		conv->prec_star = true;
     d02:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     d06:	f043 0304 	orr.w	r3, r3, #4
     d0a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
     d0e:	f102 0801 	add.w	r8, r2, #1
     d12:	e7c1      	b.n	c98 <cbvprintf+0x1a4>
			      || (prec != (size_t)conv->prec_value));
     d14:	2201      	movs	r2, #1
     d16:	e7b6      	b.n	c86 <cbvprintf+0x192>
		if (*++sp == 'h') {
     d18:	f108 0201 	add.w	r2, r8, #1
     d1c:	f898 3001 	ldrb.w	r3, [r8, #1]
     d20:	2b68      	cmp	r3, #104	; 0x68
     d22:	d008      	beq.n	d36 <cbvprintf+0x242>
			conv->length_mod = LENGTH_H;
     d24:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     d28:	2102      	movs	r1, #2
     d2a:	f361 03c6 	bfi	r3, r1, #3, #4
     d2e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
     d32:	4690      	mov	r8, r2
     d34:	e02b      	b.n	d8e <cbvprintf+0x29a>
			conv->length_mod = LENGTH_HH;
     d36:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     d3a:	2201      	movs	r2, #1
     d3c:	f362 03c6 	bfi	r3, r2, #3, #4
     d40:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
     d44:	f108 0802 	add.w	r8, r8, #2
     d48:	e021      	b.n	d8e <cbvprintf+0x29a>
		if (*++sp == 'l') {
     d4a:	f108 0201 	add.w	r2, r8, #1
     d4e:	f898 3001 	ldrb.w	r3, [r8, #1]
     d52:	2b6c      	cmp	r3, #108	; 0x6c
     d54:	d008      	beq.n	d68 <cbvprintf+0x274>
			conv->length_mod = LENGTH_L;
     d56:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     d5a:	2103      	movs	r1, #3
     d5c:	f361 03c6 	bfi	r3, r1, #3, #4
     d60:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
     d64:	4690      	mov	r8, r2
     d66:	e012      	b.n	d8e <cbvprintf+0x29a>
			conv->length_mod = LENGTH_LL;
     d68:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     d6c:	2204      	movs	r2, #4
     d6e:	f362 03c6 	bfi	r3, r2, #3, #4
     d72:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
     d76:	f108 0802 	add.w	r8, r8, #2
     d7a:	e008      	b.n	d8e <cbvprintf+0x29a>
		conv->length_mod = LENGTH_J;
     d7c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     d80:	2205      	movs	r2, #5
     d82:	f362 03c6 	bfi	r3, r2, #3, #4
     d86:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     d8a:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
     d8e:	f818 3b01 	ldrb.w	r3, [r8], #1
     d92:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
     d96:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
     d9a:	2a37      	cmp	r2, #55	; 0x37
     d9c:	f200 8150 	bhi.w	1040 <CONFIG_FPROTECT_BLOCK_SIZE+0x40>
     da0:	e8df f012 	tbh	[pc, r2, lsl #1]
     da4:	014e0126 	.word	0x014e0126
     da8:	014e014e 	.word	0x014e014e
     dac:	01260126 	.word	0x01260126
     db0:	014e0126 	.word	0x014e0126
     db4:	014e014e 	.word	0x014e014e
     db8:	014e014e 	.word	0x014e014e
     dbc:	014e014e 	.word	0x014e014e
     dc0:	014e014e 	.word	0x014e014e
     dc4:	014e014e 	.word	0x014e014e
     dc8:	014e014e 	.word	0x014e014e
     dcc:	014e014e 	.word	0x014e014e
     dd0:	0113014e 	.word	0x0113014e
     dd4:	014e014e 	.word	0x014e014e
     dd8:	014e014e 	.word	0x014e014e
     ddc:	014e014e 	.word	0x014e014e
     de0:	014e014e 	.word	0x014e014e
     de4:	014e0126 	.word	0x014e0126
     de8:	00630113 	.word	0x00630113
     dec:	01260126 	.word	0x01260126
     df0:	014e0126 	.word	0x014e0126
     df4:	014e0063 	.word	0x014e0063
     df8:	014e014e 	.word	0x014e014e
     dfc:	012f014e 	.word	0x012f014e
     e00:	013f0113 	.word	0x013f0113
     e04:	014e014e 	.word	0x014e014e
     e08:	014e013f 	.word	0x014e013f
     e0c:	014e0113 	.word	0x014e0113
     e10:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
     e14:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     e18:	2206      	movs	r2, #6
     e1a:	f362 03c6 	bfi	r3, r2, #3, #4
     e1e:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     e22:	f108 0801 	add.w	r8, r8, #1
		break;
     e26:	e7b2      	b.n	d8e <cbvprintf+0x29a>
		conv->length_mod = LENGTH_T;
     e28:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     e2c:	2207      	movs	r2, #7
     e2e:	f362 03c6 	bfi	r3, r2, #3, #4
     e32:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     e36:	f108 0801 	add.w	r8, r8, #1
		break;
     e3a:	e7a8      	b.n	d8e <cbvprintf+0x29a>
		conv->length_mod = LENGTH_UPPER_L;
     e3c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     e40:	2208      	movs	r2, #8
     e42:	f362 03c6 	bfi	r3, r2, #3, #4
     e46:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     e4a:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
     e4e:	f89d 3020 	ldrb.w	r3, [sp, #32]
     e52:	f043 0302 	orr.w	r3, r3, #2
     e56:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
     e5a:	e798      	b.n	d8e <cbvprintf+0x29a>
		conv->length_mod = LENGTH_NONE;
     e5c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     e60:	f36f 03c6 	bfc	r3, #3, #4
     e64:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
     e68:	e791      	b.n	d8e <cbvprintf+0x29a>
		conv->specifier_cat = SPECIFIER_SINT;
     e6a:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
     e6e:	2101      	movs	r1, #1
     e70:	f361 0202 	bfi	r2, r1, #0, #3
     e74:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
     e78:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     e7c:	f002 0278 	and.w	r2, r2, #120	; 0x78
     e80:	2a40      	cmp	r2, #64	; 0x40
     e82:	f000 80aa 	beq.w	fda <cbvprintf+0x4e6>
		if (conv->specifier == 'c') {
     e86:	2b63      	cmp	r3, #99	; 0x63
     e88:	f000 80ae 	beq.w	fe8 <cbvprintf+0x4f4>
	conv->unsupported |= unsupported;
     e8c:	f89d 3020 	ldrb.w	r3, [sp, #32]
     e90:	f3c3 0240 	ubfx	r2, r3, #1, #1
     e94:	4317      	orrs	r7, r2
     e96:	f367 0341 	bfi	r3, r7, #1, #1
     e9a:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
     e9e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     ea2:	f013 0f01 	tst.w	r3, #1
     ea6:	f000 80da 	beq.w	105e <CONFIG_FPROTECT_BLOCK_SIZE+0x5e>
			width = va_arg(ap, int);
     eaa:	9b03      	ldr	r3, [sp, #12]
     eac:	1d1a      	adds	r2, r3, #4
     eae:	9203      	str	r2, [sp, #12]
     eb0:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
     eb2:	2f00      	cmp	r7, #0
     eb4:	f2c0 80cb 	blt.w	104e <CONFIG_FPROTECT_BLOCK_SIZE+0x4e>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
     eb8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     ebc:	f013 0f04 	tst.w	r3, #4
     ec0:	f000 80df 	beq.w	1082 <CONFIG_FPROTECT_BLOCK_SIZE+0x82>
			int arg = va_arg(ap, int);
     ec4:	9b03      	ldr	r3, [sp, #12]
     ec6:	1d1a      	adds	r2, r3, #4
     ec8:	9203      	str	r2, [sp, #12]
     eca:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
     ece:	f1bb 0f00 	cmp.w	fp, #0
     ed2:	f2c0 80cd 	blt.w	1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
     ed6:	2300      	movs	r3, #0
     ed8:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
     eda:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
     edc:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     ee0:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
     ee4:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
     ee8:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
     eec:	2b01      	cmp	r3, #1
     eee:	f000 80d1 	beq.w	1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
     ef2:	2b02      	cmp	r3, #2
     ef4:	f000 8116 	beq.w	1124 <CONFIG_FPROTECT_BLOCK_SIZE+0x124>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
     ef8:	2b04      	cmp	r3, #4
     efa:	f000 8167 	beq.w	11cc <CONFIG_FPROTECT_BLOCK_SIZE+0x1cc>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
     efe:	2b03      	cmp	r3, #3
     f00:	f000 817e 	beq.w	1200 <CONFIG_FPROTECT_BLOCK_SIZE+0x200>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
     f04:	f89d 9020 	ldrb.w	r9, [sp, #32]
     f08:	f019 0303 	ands.w	r3, r9, #3
     f0c:	9302      	str	r3, [sp, #8]
     f0e:	f040 817d 	bne.w	120c <CONFIG_FPROTECT_BLOCK_SIZE+0x20c>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
     f12:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
     f16:	3b25      	subs	r3, #37	; 0x25
     f18:	2b53      	cmp	r3, #83	; 0x53
     f1a:	f200 8233 	bhi.w	1384 <CONFIG_FPROTECT_BLOCK_SIZE+0x384>
     f1e:	e8df f013 	tbh	[pc, r3, lsl #1]
     f22:	0181      	.short	0x0181
     f24:	02310231 	.word	0x02310231
     f28:	02310231 	.word	0x02310231
     f2c:	02310231 	.word	0x02310231
     f30:	02310231 	.word	0x02310231
     f34:	02310231 	.word	0x02310231
     f38:	02310231 	.word	0x02310231
     f3c:	02310231 	.word	0x02310231
     f40:	02310231 	.word	0x02310231
     f44:	02310231 	.word	0x02310231
     f48:	02310231 	.word	0x02310231
     f4c:	02310231 	.word	0x02310231
     f50:	02310231 	.word	0x02310231
     f54:	02310231 	.word	0x02310231
     f58:	02310231 	.word	0x02310231
     f5c:	02310231 	.word	0x02310231
     f60:	02310231 	.word	0x02310231
     f64:	02310231 	.word	0x02310231
     f68:	02310231 	.word	0x02310231
     f6c:	02310231 	.word	0x02310231
     f70:	02310231 	.word	0x02310231
     f74:	02310231 	.word	0x02310231
     f78:	02310231 	.word	0x02310231
     f7c:	02310231 	.word	0x02310231
     f80:	02310231 	.word	0x02310231
     f84:	02310231 	.word	0x02310231
     f88:	023101c7 	.word	0x023101c7
     f8c:	02310231 	.word	0x02310231
     f90:	02310231 	.word	0x02310231
     f94:	02310231 	.word	0x02310231
     f98:	02310231 	.word	0x02310231
     f9c:	01a10231 	.word	0x01a10231
     fa0:	023101ab 	.word	0x023101ab
     fa4:	02310231 	.word	0x02310231
     fa8:	01ab0231 	.word	0x01ab0231
     fac:	02310231 	.word	0x02310231
     fb0:	02310231 	.word	0x02310231
     fb4:	01c70208 	.word	0x01c70208
     fb8:	023101ea 	.word	0x023101ea
     fbc:	018f0231 	.word	0x018f0231
     fc0:	01c70231 	.word	0x01c70231
     fc4:	02310231 	.word	0x02310231
     fc8:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
     fca:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
     fce:	2102      	movs	r1, #2
     fd0:	f361 0202 	bfi	r2, r1, #0, #3
     fd4:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
     fd8:	e74e      	b.n	e78 <cbvprintf+0x384>
			conv->invalid = true;
     fda:	f89d 1020 	ldrb.w	r1, [sp, #32]
     fde:	f041 0101 	orr.w	r1, r1, #1
     fe2:	f88d 1020 	strb.w	r1, [sp, #32]
     fe6:	e74e      	b.n	e86 <cbvprintf+0x392>
			unsupported = (conv->length_mod != LENGTH_NONE);
     fe8:	1e17      	subs	r7, r2, #0
     fea:	bf18      	it	ne
     fec:	2701      	movne	r7, #1
     fee:	e74d      	b.n	e8c <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_FP;
     ff0:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     ff4:	2204      	movs	r2, #4
     ff6:	f362 0302 	bfi	r3, r2, #0, #3
     ffa:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
     ffe:	2701      	movs	r7, #1
			break;
    1000:	e744      	b.n	e8c <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
    1002:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    1006:	2203      	movs	r2, #3
    1008:	f362 0302 	bfi	r3, r2, #0, #3
    100c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
    1010:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    1014:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1018:	2b40      	cmp	r3, #64	; 0x40
    101a:	f47f af37 	bne.w	e8c <cbvprintf+0x398>
			unsupported = true;
    101e:	2701      	movs	r7, #1
    1020:	e734      	b.n	e8c <cbvprintf+0x398>
		conv->specifier_cat = SPECIFIER_PTR;
    1022:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    1026:	2203      	movs	r2, #3
    1028:	f362 0302 	bfi	r3, r2, #0, #3
    102c:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
    1030:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    1034:	f013 0f78 	tst.w	r3, #120	; 0x78
    1038:	f43f af28 	beq.w	e8c <cbvprintf+0x398>
			unsupported = true;
    103c:	2701      	movs	r7, #1
    103e:	e725      	b.n	e8c <cbvprintf+0x398>
		conv->invalid = true;
    1040:	f89d 3020 	ldrb.w	r3, [sp, #32]
    1044:	f043 0301 	orr.w	r3, r3, #1
    1048:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
    104c:	e71e      	b.n	e8c <cbvprintf+0x398>
				conv->flag_dash = true;
    104e:	f89d 3020 	ldrb.w	r3, [sp, #32]
    1052:	f043 0304 	orr.w	r3, r3, #4
    1056:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
    105a:	427f      	negs	r7, r7
    105c:	e72c      	b.n	eb8 <cbvprintf+0x3c4>
		} else if (conv->width_present) {
    105e:	f99d 3020 	ldrsb.w	r3, [sp, #32]
    1062:	2b00      	cmp	r3, #0
    1064:	db02      	blt.n	106c <CONFIG_FPROTECT_BLOCK_SIZE+0x6c>
		int width = -1;
    1066:	f04f 37ff 	mov.w	r7, #4294967295
    106a:	e725      	b.n	eb8 <cbvprintf+0x3c4>
			width = conv->width_value;
    106c:	9f09      	ldr	r7, [sp, #36]	; 0x24
    106e:	e723      	b.n	eb8 <cbvprintf+0x3c4>
				conv->prec_present = false;
    1070:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    1074:	f36f 0341 	bfc	r3, #1, #1
    1078:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
    107c:	f04f 3bff 	mov.w	fp, #4294967295
    1080:	e729      	b.n	ed6 <cbvprintf+0x3e2>
		} else if (conv->prec_present) {
    1082:	f013 0f02 	tst.w	r3, #2
    1086:	d002      	beq.n	108e <CONFIG_FPROTECT_BLOCK_SIZE+0x8e>
			precision = conv->prec_value;
    1088:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    108c:	e723      	b.n	ed6 <cbvprintf+0x3e2>
		int precision = -1;
    108e:	f04f 3bff 	mov.w	fp, #4294967295
    1092:	e720      	b.n	ed6 <cbvprintf+0x3e2>
			switch (length_mod) {
    1094:	1ecb      	subs	r3, r1, #3
    1096:	2b04      	cmp	r3, #4
    1098:	d804      	bhi.n	10a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>
    109a:	e8df f003 	tbb	[pc, r3]
    109e:	1d0b      	.short	0x1d0b
    10a0:	3529      	.short	0x3529
    10a2:	35          	.byte	0x35
    10a3:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    10a4:	9b03      	ldr	r3, [sp, #12]
    10a6:	1d1a      	adds	r2, r3, #4
    10a8:	9203      	str	r2, [sp, #12]
    10aa:	681a      	ldr	r2, [r3, #0]
    10ac:	17d3      	asrs	r3, r2, #31
    10ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    10b2:	e006      	b.n	10c2 <CONFIG_FPROTECT_BLOCK_SIZE+0xc2>
					value->sint = va_arg(ap, long);
    10b4:	9b03      	ldr	r3, [sp, #12]
    10b6:	1d1a      	adds	r2, r3, #4
    10b8:	9203      	str	r2, [sp, #12]
    10ba:	681a      	ldr	r2, [r3, #0]
    10bc:	17d3      	asrs	r3, r2, #31
    10be:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    10c2:	2901      	cmp	r1, #1
    10c4:	d028      	beq.n	1118 <CONFIG_FPROTECT_BLOCK_SIZE+0x118>
			} else if (length_mod == LENGTH_H) {
    10c6:	2902      	cmp	r1, #2
    10c8:	f47f af1c 	bne.w	f04 <cbvprintf+0x410>
				value->sint = (short)value->sint;
    10cc:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
    10d0:	17d3      	asrs	r3, r2, #31
    10d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    10d6:	e715      	b.n	f04 <cbvprintf+0x410>
					(sint_value_type)va_arg(ap, long long);
    10d8:	9b03      	ldr	r3, [sp, #12]
    10da:	3307      	adds	r3, #7
    10dc:	f023 0307 	bic.w	r3, r3, #7
    10e0:	f103 0208 	add.w	r2, r3, #8
    10e4:	9203      	str	r2, [sp, #12]
    10e6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    10ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    10ee:	e7e8      	b.n	10c2 <CONFIG_FPROTECT_BLOCK_SIZE+0xc2>
					(sint_value_type)va_arg(ap, intmax_t);
    10f0:	9b03      	ldr	r3, [sp, #12]
    10f2:	3307      	adds	r3, #7
    10f4:	f023 0307 	bic.w	r3, r3, #7
    10f8:	f103 0208 	add.w	r2, r3, #8
    10fc:	9203      	str	r2, [sp, #12]
    10fe:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
    1102:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    1106:	e7dc      	b.n	10c2 <CONFIG_FPROTECT_BLOCK_SIZE+0xc2>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1108:	9b03      	ldr	r3, [sp, #12]
    110a:	1d1a      	adds	r2, r3, #4
    110c:	9203      	str	r2, [sp, #12]
    110e:	681a      	ldr	r2, [r3, #0]
    1110:	17d3      	asrs	r3, r2, #31
				value->sint =
    1112:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    1116:	e7d4      	b.n	10c2 <CONFIG_FPROTECT_BLOCK_SIZE+0xc2>
				value->sint = (char)value->sint;
    1118:	f89d 3018 	ldrb.w	r3, [sp, #24]
    111c:	9306      	str	r3, [sp, #24]
    111e:	2300      	movs	r3, #0
    1120:	9307      	str	r3, [sp, #28]
    1122:	e6ef      	b.n	f04 <cbvprintf+0x410>
			switch (length_mod) {
    1124:	1ecb      	subs	r3, r1, #3
    1126:	2b04      	cmp	r3, #4
    1128:	d804      	bhi.n	1134 <CONFIG_FPROTECT_BLOCK_SIZE+0x134>
    112a:	e8df f003 	tbb	[pc, r3]
    112e:	1f0b      	.short	0x1f0b
    1130:	4135      	.short	0x4135
    1132:	41          	.byte	0x41
    1133:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
    1134:	9b03      	ldr	r3, [sp, #12]
    1136:	1d1a      	adds	r2, r3, #4
    1138:	9203      	str	r2, [sp, #12]
    113a:	681b      	ldr	r3, [r3, #0]
    113c:	9306      	str	r3, [sp, #24]
    113e:	2300      	movs	r3, #0
    1140:	9307      	str	r3, [sp, #28]
				break;
    1142:	e01e      	b.n	1182 <CONFIG_FPROTECT_BLOCK_SIZE+0x182>
				    && (conv->specifier == 'c')) {
    1144:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
    1148:	2b63      	cmp	r3, #99	; 0x63
    114a:	d007      	beq.n	115c <CONFIG_FPROTECT_BLOCK_SIZE+0x15c>
					value->uint = va_arg(ap, unsigned long);
    114c:	9b03      	ldr	r3, [sp, #12]
    114e:	1d1a      	adds	r2, r3, #4
    1150:	9203      	str	r2, [sp, #12]
    1152:	681b      	ldr	r3, [r3, #0]
    1154:	9306      	str	r3, [sp, #24]
    1156:	2300      	movs	r3, #0
    1158:	9307      	str	r3, [sp, #28]
    115a:	e012      	b.n	1182 <CONFIG_FPROTECT_BLOCK_SIZE+0x182>
					value->uint = (wchar_t)va_arg(ap,
    115c:	9b03      	ldr	r3, [sp, #12]
    115e:	1d1a      	adds	r2, r3, #4
    1160:	9203      	str	r2, [sp, #12]
    1162:	681b      	ldr	r3, [r3, #0]
    1164:	9306      	str	r3, [sp, #24]
    1166:	2300      	movs	r3, #0
    1168:	9307      	str	r3, [sp, #28]
    116a:	e00a      	b.n	1182 <CONFIG_FPROTECT_BLOCK_SIZE+0x182>
					(uint_value_type)va_arg(ap,
    116c:	9b03      	ldr	r3, [sp, #12]
    116e:	3307      	adds	r3, #7
    1170:	f023 0307 	bic.w	r3, r3, #7
    1174:	f103 0208 	add.w	r2, r3, #8
    1178:	9203      	str	r2, [sp, #12]
    117a:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    117e:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
    1182:	2901      	cmp	r1, #1
    1184:	d01c      	beq.n	11c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1c0>
			} else if (length_mod == LENGTH_H) {
    1186:	2902      	cmp	r1, #2
    1188:	f47f aebc 	bne.w	f04 <cbvprintf+0x410>
				value->uint = (unsigned short)value->uint;
    118c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    1190:	9306      	str	r3, [sp, #24]
    1192:	2300      	movs	r3, #0
    1194:	9307      	str	r3, [sp, #28]
    1196:	e6b5      	b.n	f04 <cbvprintf+0x410>
					(uint_value_type)va_arg(ap,
    1198:	9b03      	ldr	r3, [sp, #12]
    119a:	3307      	adds	r3, #7
    119c:	f023 0307 	bic.w	r3, r3, #7
    11a0:	f103 0208 	add.w	r2, r3, #8
    11a4:	9203      	str	r2, [sp, #12]
    11a6:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
    11aa:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
    11ae:	e7e8      	b.n	1182 <CONFIG_FPROTECT_BLOCK_SIZE+0x182>
					(uint_value_type)va_arg(ap, size_t);
    11b0:	9b03      	ldr	r3, [sp, #12]
    11b2:	1d1a      	adds	r2, r3, #4
    11b4:	9203      	str	r2, [sp, #12]
    11b6:	681b      	ldr	r3, [r3, #0]
				value->uint =
    11b8:	9306      	str	r3, [sp, #24]
    11ba:	2300      	movs	r3, #0
    11bc:	9307      	str	r3, [sp, #28]
				break;
    11be:	e7e0      	b.n	1182 <CONFIG_FPROTECT_BLOCK_SIZE+0x182>
				value->uint = (unsigned char)value->uint;
    11c0:	f89d 3018 	ldrb.w	r3, [sp, #24]
    11c4:	9306      	str	r3, [sp, #24]
    11c6:	2300      	movs	r3, #0
    11c8:	9307      	str	r3, [sp, #28]
    11ca:	e69b      	b.n	f04 <cbvprintf+0x410>
			if (length_mod == LENGTH_UPPER_L) {
    11cc:	2908      	cmp	r1, #8
    11ce:	d00b      	beq.n	11e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e8>
				value->dbl = va_arg(ap, double);
    11d0:	9b03      	ldr	r3, [sp, #12]
    11d2:	3307      	adds	r3, #7
    11d4:	f023 0307 	bic.w	r3, r3, #7
    11d8:	f103 0208 	add.w	r2, r3, #8
    11dc:	9203      	str	r2, [sp, #12]
    11de:	e9d3 2300 	ldrd	r2, r3, [r3]
    11e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    11e6:	e68d      	b.n	f04 <cbvprintf+0x410>
				value->ldbl = va_arg(ap, long double);
    11e8:	9b03      	ldr	r3, [sp, #12]
    11ea:	3307      	adds	r3, #7
    11ec:	f023 0307 	bic.w	r3, r3, #7
    11f0:	f103 0208 	add.w	r2, r3, #8
    11f4:	9203      	str	r2, [sp, #12]
    11f6:	e9d3 2300 	ldrd	r2, r3, [r3]
    11fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
    11fe:	e681      	b.n	f04 <cbvprintf+0x410>
			value->ptr = va_arg(ap, void *);
    1200:	9b03      	ldr	r3, [sp, #12]
    1202:	1d1a      	adds	r2, r3, #4
    1204:	9203      	str	r2, [sp, #12]
    1206:	681b      	ldr	r3, [r3, #0]
    1208:	9306      	str	r3, [sp, #24]
    120a:	e67b      	b.n	f04 <cbvprintf+0x410>
			OUTS(sp, fp);
    120c:	4643      	mov	r3, r8
    120e:	4652      	mov	r2, sl
    1210:	4629      	mov	r1, r5
    1212:	4630      	mov	r0, r6
    1214:	f00e ff33 	bl	1007e <outs>
    1218:	2800      	cmp	r0, #0
    121a:	f2c0 814f 	blt.w	14bc <CONFIG_FPROTECT_BLOCK_SIZE+0x4bc>
    121e:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
    1220:	46c2      	mov	sl, r8
			continue;
    1222:	e46f      	b.n	b04 <cbvprintf+0x10>
		case '%':
			OUTC('%');
    1224:	4629      	mov	r1, r5
    1226:	2025      	movs	r0, #37	; 0x25
    1228:	47b0      	blx	r6
    122a:	2800      	cmp	r0, #0
    122c:	f2c0 8146 	blt.w	14bc <CONFIG_FPROTECT_BLOCK_SIZE+0x4bc>
    1230:	3401      	adds	r4, #1
		char sign = 0;
    1232:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    1236:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    123a:	f04f 0a00 	mov.w	sl, #0
			break;
    123e:	e0a7      	b.n	1390 <CONFIG_FPROTECT_BLOCK_SIZE+0x390>
		case 's': {
			bps = (const char *)value->ptr;
    1240:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
    1244:	f1bb 0f00 	cmp.w	fp, #0
    1248:	db08      	blt.n	125c <CONFIG_FPROTECT_BLOCK_SIZE+0x25c>
				len = strnlen(bps, precision);
    124a:	4659      	mov	r1, fp
    124c:	4650      	mov	r0, sl
    124e:	f00f ff87 	bl	11160 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
    1252:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
    1256:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
    125a:	e099      	b.n	1390 <CONFIG_FPROTECT_BLOCK_SIZE+0x390>
				len = strlen(bps);
    125c:	4650      	mov	r0, sl
    125e:	f00f ff77 	bl	11150 <strlen>
    1262:	e7f6      	b.n	1252 <CONFIG_FPROTECT_BLOCK_SIZE+0x252>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1264:	9b06      	ldr	r3, [sp, #24]
    1266:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
    126a:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
    126e:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
    1272:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
    1276:	e08b      	b.n	1390 <CONFIG_FPROTECT_BLOCK_SIZE+0x390>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
    1278:	f019 0f08 	tst.w	r9, #8
    127c:	d105      	bne.n	128a <CONFIG_FPROTECT_BLOCK_SIZE+0x28a>
				sign = '+';
			} else if (conv->flag_space) {
    127e:	f019 0910 	ands.w	r9, r9, #16
    1282:	d004      	beq.n	128e <CONFIG_FPROTECT_BLOCK_SIZE+0x28e>
				sign = ' ';
    1284:	f04f 0920 	mov.w	r9, #32
    1288:	e001      	b.n	128e <CONFIG_FPROTECT_BLOCK_SIZE+0x28e>
				sign = '+';
    128a:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
    128e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
    1292:	2a00      	cmp	r2, #0
    1294:	f173 0100 	sbcs.w	r1, r3, #0
    1298:	db02      	blt.n	12a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a0>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
    129a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    129e:	e009      	b.n	12b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b4>
				value->uint = (uint_value_type)-sint;
    12a0:	4252      	negs	r2, r2
    12a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    12a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
    12aa:	f04f 092d 	mov.w	r9, #45	; 0x2d
    12ae:	e001      	b.n	12b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b4>
		switch (conv->specifier) {
    12b0:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
    12b4:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    12b8:	9300      	str	r3, [sp, #0]
    12ba:	ab0c      	add	r3, sp, #48	; 0x30
    12bc:	aa08      	add	r2, sp, #32
    12be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
    12c2:	f00e fe72 	bl	ffaa <encode_uint>
    12c6:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
    12c8:	f1bb 0f00 	cmp.w	fp, #0
    12cc:	f2c0 8090 	blt.w	13f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f0>
				size_t len = bpe - bps;
    12d0:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    12d4:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
    12d8:	f89d 2020 	ldrb.w	r2, [sp, #32]
    12dc:	f36f 1286 	bfc	r2, #6, #1
    12e0:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
    12e4:	459b      	cmp	fp, r3
    12e6:	f240 8086 	bls.w	13f6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f6>
					conv->pad0_value = precision - (int)len;
    12ea:	ebab 0303 	sub.w	r3, fp, r3
    12ee:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
    12f0:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    12f4:	e04c      	b.n	1390 <CONFIG_FPROTECT_BLOCK_SIZE+0x390>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
    12f6:	9806      	ldr	r0, [sp, #24]
    12f8:	b930      	cbnz	r0, 1308 <CONFIG_FPROTECT_BLOCK_SIZE+0x308>
		char sign = 0;
    12fa:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
    12fe:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 14c4 <CONFIG_FPROTECT_BLOCK_SIZE+0x4c4>
			bps = "(nil)";
    1302:	f1ab 0a05 	sub.w	sl, fp, #5
    1306:	e043      	b.n	1390 <CONFIG_FPROTECT_BLOCK_SIZE+0x390>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1308:	f10d 0346 	add.w	r3, sp, #70	; 0x46
    130c:	9300      	str	r3, [sp, #0]
    130e:	ab0c      	add	r3, sp, #48	; 0x30
    1310:	aa08      	add	r2, sp, #32
    1312:	2100      	movs	r1, #0
    1314:	f00e fe49 	bl	ffaa <encode_uint>
    1318:	4682      	mov	sl, r0
				conv->altform_0c = true;
    131a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    131e:	f043 0310 	orr.w	r3, r3, #16
    1322:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
    1326:	2378      	movs	r3, #120	; 0x78
    1328:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
    132c:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
    1330:	e7ca      	b.n	12c8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c8>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
    1332:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
    1334:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
    1338:	f3c3 03c3 	ubfx	r3, r3, #3, #4
    133c:	2b07      	cmp	r3, #7
    133e:	d806      	bhi.n	134e <CONFIG_FPROTECT_BLOCK_SIZE+0x34e>
    1340:	e8df f003 	tbb	[pc, r3]
    1344:	100e0c04 	.word	0x100e0c04
    1348:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
    134c:	6014      	str	r4, [r2, #0]
		char sign = 0;
    134e:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
    1352:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
    1356:	f04f 0a00 	mov.w	sl, #0
}
    135a:	e019      	b.n	1390 <CONFIG_FPROTECT_BLOCK_SIZE+0x390>
		*(signed char *)dp = (signed char)count;
    135c:	7014      	strb	r4, [r2, #0]
		break;
    135e:	e7f6      	b.n	134e <CONFIG_FPROTECT_BLOCK_SIZE+0x34e>
		*(short *)dp = (short)count;
    1360:	8014      	strh	r4, [r2, #0]
		break;
    1362:	e7f4      	b.n	134e <CONFIG_FPROTECT_BLOCK_SIZE+0x34e>
		*(long *)dp = (long)count;
    1364:	6014      	str	r4, [r2, #0]
		break;
    1366:	e7f2      	b.n	134e <CONFIG_FPROTECT_BLOCK_SIZE+0x34e>
		*(long long *)dp = (long long)count;
    1368:	4620      	mov	r0, r4
    136a:	17e1      	asrs	r1, r4, #31
    136c:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    1370:	e7ed      	b.n	134e <CONFIG_FPROTECT_BLOCK_SIZE+0x34e>
		*(intmax_t *)dp = (intmax_t)count;
    1372:	4620      	mov	r0, r4
    1374:	17e1      	asrs	r1, r4, #31
    1376:	e9c2 0100 	strd	r0, r1, [r2]
		break;
    137a:	e7e8      	b.n	134e <CONFIG_FPROTECT_BLOCK_SIZE+0x34e>
		*(size_t *)dp = (size_t)count;
    137c:	6014      	str	r4, [r2, #0]
		break;
    137e:	e7e6      	b.n	134e <CONFIG_FPROTECT_BLOCK_SIZE+0x34e>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1380:	6014      	str	r4, [r2, #0]
		break;
    1382:	e7e4      	b.n	134e <CONFIG_FPROTECT_BLOCK_SIZE+0x34e>
		switch (conv->specifier) {
    1384:	f8dd 9008 	ldr.w	r9, [sp, #8]
    1388:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    138c:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
    1390:	f1ba 0f00 	cmp.w	sl, #0
    1394:	f000 808e 	beq.w	14b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x4b4>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    1398:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
    139c:	f1b9 0f00 	cmp.w	r9, #0
    13a0:	d000      	beq.n	13a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3a4>
			nj_len += 1U;
    13a2:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
    13a4:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
    13a8:	f011 0f10 	tst.w	r1, #16
    13ac:	d026      	beq.n	13fc <CONFIG_FPROTECT_BLOCK_SIZE+0x3fc>
			nj_len += 2U;
    13ae:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    13b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
    13b2:	4413      	add	r3, r2
		if (conv->pad_fp) {
    13b4:	f011 0f40 	tst.w	r1, #64	; 0x40
    13b8:	d001      	beq.n	13be <CONFIG_FPROTECT_BLOCK_SIZE+0x3be>
			nj_len += conv->pad0_pre_exp;
    13ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    13bc:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    13be:	2f00      	cmp	r7, #0
    13c0:	dd32      	ble.n	1428 <CONFIG_FPROTECT_BLOCK_SIZE+0x428>
			width -= (int)nj_len;
    13c2:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    13c4:	f89d 3020 	ldrb.w	r3, [sp, #32]
    13c8:	f013 0f04 	tst.w	r3, #4
    13cc:	d12c      	bne.n	1428 <CONFIG_FPROTECT_BLOCK_SIZE+0x428>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    13ce:	f013 0f40 	tst.w	r3, #64	; 0x40
    13d2:	d018      	beq.n	1406 <CONFIG_FPROTECT_BLOCK_SIZE+0x406>
					if (sign != 0) {
    13d4:	f1b9 0f00 	cmp.w	r9, #0
    13d8:	d018      	beq.n	140c <CONFIG_FPROTECT_BLOCK_SIZE+0x40c>
						OUTC(sign);
    13da:	4629      	mov	r1, r5
    13dc:	4648      	mov	r0, r9
    13de:	47b0      	blx	r6
    13e0:	2800      	cmp	r0, #0
    13e2:	db6b      	blt.n	14bc <CONFIG_FPROTECT_BLOCK_SIZE+0x4bc>
    13e4:	3401      	adds	r4, #1
						sign = 0;
    13e6:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
    13ea:	2330      	movs	r3, #48	; 0x30
    13ec:	9302      	str	r3, [sp, #8]
    13ee:	e00f      	b.n	1410 <CONFIG_FPROTECT_BLOCK_SIZE+0x410>
		const char *bpe = buf + sizeof(buf);
    13f0:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    13f4:	e7cc      	b.n	1390 <CONFIG_FPROTECT_BLOCK_SIZE+0x390>
    13f6:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    13fa:	e7c9      	b.n	1390 <CONFIG_FPROTECT_BLOCK_SIZE+0x390>
		} else if (conv->altform_0) {
    13fc:	f011 0f08 	tst.w	r1, #8
    1400:	d0d6      	beq.n	13b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b0>
			nj_len += 1U;
    1402:	3201      	adds	r2, #1
    1404:	e7d4      	b.n	13b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b0>
				char pad = ' ';
    1406:	2320      	movs	r3, #32
    1408:	9302      	str	r3, [sp, #8]
    140a:	e001      	b.n	1410 <CONFIG_FPROTECT_BLOCK_SIZE+0x410>
					pad = '0';
    140c:	2330      	movs	r3, #48	; 0x30
    140e:	9302      	str	r3, [sp, #8]
    1410:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    1412:	1e5f      	subs	r7, r3, #1
    1414:	2b00      	cmp	r3, #0
    1416:	dd07      	ble.n	1428 <CONFIG_FPROTECT_BLOCK_SIZE+0x428>
					OUTC(pad);
    1418:	4629      	mov	r1, r5
    141a:	9802      	ldr	r0, [sp, #8]
    141c:	47b0      	blx	r6
    141e:	2800      	cmp	r0, #0
    1420:	db4c      	blt.n	14bc <CONFIG_FPROTECT_BLOCK_SIZE+0x4bc>
    1422:	3401      	adds	r4, #1
				while (width-- > 0) {
    1424:	463b      	mov	r3, r7
    1426:	e7f4      	b.n	1412 <CONFIG_FPROTECT_BLOCK_SIZE+0x412>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    1428:	f1b9 0f00 	cmp.w	r9, #0
    142c:	d005      	beq.n	143a <CONFIG_FPROTECT_BLOCK_SIZE+0x43a>
			OUTC(sign);
    142e:	4629      	mov	r1, r5
    1430:	4648      	mov	r0, r9
    1432:	47b0      	blx	r6
    1434:	2800      	cmp	r0, #0
    1436:	db41      	blt.n	14bc <CONFIG_FPROTECT_BLOCK_SIZE+0x4bc>
    1438:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    143a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    143e:	f3c3 1200 	ubfx	r2, r3, #4, #1
    1442:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    1446:	4313      	orrs	r3, r2
    1448:	d005      	beq.n	1456 <CONFIG_FPROTECT_BLOCK_SIZE+0x456>
				OUTC('0');
    144a:	4629      	mov	r1, r5
    144c:	2030      	movs	r0, #48	; 0x30
    144e:	47b0      	blx	r6
    1450:	2800      	cmp	r0, #0
    1452:	db33      	blt.n	14bc <CONFIG_FPROTECT_BLOCK_SIZE+0x4bc>
    1454:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    1456:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    145a:	f013 0f10 	tst.w	r3, #16
    145e:	d006      	beq.n	146e <CONFIG_FPROTECT_BLOCK_SIZE+0x46e>
				OUTC(conv->specifier);
    1460:	4629      	mov	r1, r5
    1462:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    1466:	47b0      	blx	r6
    1468:	2800      	cmp	r0, #0
    146a:	db27      	blt.n	14bc <CONFIG_FPROTECT_BLOCK_SIZE+0x4bc>
    146c:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    146e:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
    1470:	f103 39ff 	add.w	r9, r3, #4294967295
    1474:	2b00      	cmp	r3, #0
    1476:	dd07      	ble.n	1488 <CONFIG_FPROTECT_BLOCK_SIZE+0x488>
				OUTC('0');
    1478:	4629      	mov	r1, r5
    147a:	2030      	movs	r0, #48	; 0x30
    147c:	47b0      	blx	r6
    147e:	2800      	cmp	r0, #0
    1480:	db1c      	blt.n	14bc <CONFIG_FPROTECT_BLOCK_SIZE+0x4bc>
    1482:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    1484:	464b      	mov	r3, r9
    1486:	e7f3      	b.n	1470 <CONFIG_FPROTECT_BLOCK_SIZE+0x470>
			}

			OUTS(bps, bpe);
    1488:	465b      	mov	r3, fp
    148a:	4652      	mov	r2, sl
    148c:	4629      	mov	r1, r5
    148e:	4630      	mov	r0, r6
    1490:	f00e fdf5 	bl	1007e <outs>
    1494:	2800      	cmp	r0, #0
    1496:	db11      	blt.n	14bc <CONFIG_FPROTECT_BLOCK_SIZE+0x4bc>
    1498:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    149a:	2f00      	cmp	r7, #0
    149c:	dd07      	ble.n	14ae <CONFIG_FPROTECT_BLOCK_SIZE+0x4ae>
			OUTC(' ');
    149e:	4629      	mov	r1, r5
    14a0:	2020      	movs	r0, #32
    14a2:	47b0      	blx	r6
    14a4:	2800      	cmp	r0, #0
    14a6:	db09      	blt.n	14bc <CONFIG_FPROTECT_BLOCK_SIZE+0x4bc>
    14a8:	3401      	adds	r4, #1
			--width;
    14aa:	3f01      	subs	r7, #1
    14ac:	e7f5      	b.n	149a <CONFIG_FPROTECT_BLOCK_SIZE+0x49a>
		fp = extract_conversion(conv, sp);
    14ae:	46c2      	mov	sl, r8
    14b0:	f7ff bb28 	b.w	b04 <cbvprintf+0x10>
    14b4:	46c2      	mov	sl, r8
    14b6:	f7ff bb25 	b.w	b04 <cbvprintf+0x10>
		}
	}

	return count;
    14ba:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    14bc:	b013      	add	sp, #76	; 0x4c
    14be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    14c2:	bf00      	nop
    14c4:	00014495 	.word	0x00014495

000014c8 <is_rodata>:
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    14c8:	4b05      	ldr	r3, [pc, #20]	; (14e0 <is_rodata+0x18>)
    14ca:	4298      	cmp	r0, r3
    14cc:	d304      	bcc.n	14d8 <is_rodata+0x10>
    14ce:	4b05      	ldr	r3, [pc, #20]	; (14e4 <is_rodata+0x1c>)
    14d0:	4298      	cmp	r0, r3
    14d2:	d303      	bcc.n	14dc <is_rodata+0x14>
    14d4:	2000      	movs	r0, #0
    14d6:	4770      	bx	lr
    14d8:	2000      	movs	r0, #0
    14da:	4770      	bx	lr
    14dc:	2001      	movs	r0, #1
		((const char *)addr < (const char *)RO_END));
}
    14de:	4770      	bx	lr
    14e0:	00014048 	.word	0x00014048
    14e4:	00015c10 	.word	0x00015c10

000014e8 <thread_set>:
		}
	}
}

static void thread_set(k_tid_t process_tid)
{
    14e8:	b508      	push	{r3, lr}
	proc_tid = process_tid;
    14ea:	4b06      	ldr	r3, [pc, #24]	; (1504 <thread_set+0x1c>)
    14ec:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    14ee:	b118      	cbz	r0, 14f8 <thread_set+0x10>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    14f0:	4b05      	ldr	r3, [pc, #20]	; (1508 <thread_set+0x20>)
    14f2:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
    14f4:	2b09      	cmp	r3, #9
    14f6:	dc00      	bgt.n	14fa <thread_set+0x12>
		k_sem_give(&log_process_thread_sem);
	}
}
    14f8:	bd08      	pop	{r3, pc}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    14fa:	4804      	ldr	r0, [pc, #16]	; (150c <thread_set+0x24>)
    14fc:	f00c fd76 	bl	dfec <z_impl_k_sem_give>
}
    1500:	e7fa      	b.n	14f8 <thread_set+0x10>
    1502:	bf00      	nop
    1504:	20001254 	.word	0x20001254
    1508:	20001224 	.word	0x20001224
    150c:	200003dc 	.word	0x200003dc

00001510 <log_process_thread_timer_expiry_fn>:
{
	return mpsc_pbuf_is_pending(&log_buffer);
}

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
    1510:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
    1512:	4802      	ldr	r0, [pc, #8]	; (151c <log_process_thread_timer_expiry_fn+0xc>)
    1514:	f00c fd6a 	bl	dfec <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
    1518:	bd08      	pop	{r3, pc}
    151a:	bf00      	nop
    151c:	200003dc 	.word	0x200003dc

00001520 <next_pending>:
{
    1520:	b508      	push	{r3, lr}
	return (log_list_head_peek(&list) != NULL);
    1522:	4803      	ldr	r0, [pc, #12]	; (1530 <next_pending+0x10>)
    1524:	f00e fed8 	bl	102d8 <log_list_head_peek>
}
    1528:	3800      	subs	r0, #0
    152a:	bf18      	it	ne
    152c:	2001      	movne	r0, #1
    152e:	bd08      	pop	{r3, pc}
    1530:	20001230 	.word	0x20001230

00001534 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    1534:	b530      	push	{r4, r5, lr}
    1536:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    1538:	2200      	movs	r2, #0
    153a:	490f      	ldr	r1, [pc, #60]	; (1578 <enable_logger+0x44>)
    153c:	480f      	ldr	r0, [pc, #60]	; (157c <enable_logger+0x48>)
    153e:	f012 fd32 	bl	13fa6 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    1542:	4d0f      	ldr	r5, [pc, #60]	; (1580 <enable_logger+0x4c>)
    1544:	2200      	movs	r2, #0
    1546:	2300      	movs	r3, #0
    1548:	e9cd 2306 	strd	r2, r3, [sp, #24]
    154c:	2400      	movs	r4, #0
    154e:	9404      	str	r4, [sp, #16]
    1550:	230e      	movs	r3, #14
    1552:	9303      	str	r3, [sp, #12]
    1554:	9402      	str	r4, [sp, #8]
    1556:	9401      	str	r4, [sp, #4]
    1558:	9400      	str	r4, [sp, #0]
    155a:	4b0a      	ldr	r3, [pc, #40]	; (1584 <enable_logger+0x50>)
    155c:	f44f 7240 	mov.w	r2, #768	; 0x300
    1560:	4909      	ldr	r1, [pc, #36]	; (1588 <enable_logger+0x54>)
    1562:	4628      	mov	r0, r5
    1564:	f012 f9b7 	bl	138d6 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    1568:	4908      	ldr	r1, [pc, #32]	; (158c <enable_logger+0x58>)
    156a:	4628      	mov	r0, r5
    156c:	f00c fb50 	bl	dc10 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    1570:	4620      	mov	r0, r4
    1572:	b009      	add	sp, #36	; 0x24
    1574:	bd30      	pop	{r4, r5, pc}
    1576:	bf00      	nop
    1578:	00001511 	.word	0x00001511
    157c:	200004e0 	.word	0x200004e0
    1580:	20000518 	.word	0x20000518
    1584:	00001c21 	.word	0x00001c21
    1588:	20002d20 	.word	0x20002d20
    158c:	00014498 	.word	0x00014498

00001590 <log_core_init>:
{
    1590:	b508      	push	{r3, lr}
	panic_mode = false;
    1592:	2300      	movs	r3, #0
    1594:	4a0b      	ldr	r2, [pc, #44]	; (15c4 <log_core_init+0x34>)
    1596:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    1598:	4a0b      	ldr	r2, [pc, #44]	; (15c8 <log_core_init+0x38>)
    159a:	6013      	str	r3, [r2, #0]
		timestamp_func = default_get_timestamp;
    159c:	4b0b      	ldr	r3, [pc, #44]	; (15cc <log_core_init+0x3c>)
    159e:	4a0c      	ldr	r2, [pc, #48]	; (15d0 <log_core_init+0x40>)
    15a0:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    15a2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    15a6:	f000 fdbb 	bl	2120 <log_output_timestamp_freq_set>
		log_msg_pool_init();
    15aa:	f000 fb9f 	bl	1cec <log_msg_pool_init>
		log_list_init(&list);
    15ae:	4809      	ldr	r0, [pc, #36]	; (15d4 <log_core_init+0x44>)
    15b0:	f00e fe84 	bl	102bc <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    15b4:	2304      	movs	r3, #4
    15b6:	2228      	movs	r2, #40	; 0x28
    15b8:	4907      	ldr	r1, [pc, #28]	; (15d8 <log_core_init+0x48>)
    15ba:	4808      	ldr	r0, [pc, #32]	; (15dc <log_core_init+0x4c>)
    15bc:	f012 f928 	bl	13810 <k_mem_slab_init>
}
    15c0:	bd08      	pop	{r3, pc}
    15c2:	bf00      	nop
    15c4:	20002b4a 	.word	0x20002b4a
    15c8:	20001228 	.word	0x20001228
    15cc:	20000128 	.word	0x20000128
    15d0:	000102f1 	.word	0x000102f1
    15d4:	20001230 	.word	0x20001230
    15d8:	200053a0 	.word	0x200053a0
    15dc:	20001238 	.word	0x20001238

000015e0 <log_init>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    15e0:	4b18      	ldr	r3, [pc, #96]	; (1644 <log_init+0x64>)
    15e2:	f3bf 8f5b 	dmb	ish
    15e6:	e853 2f00 	ldrex	r2, [r3]
    15ea:	1c51      	adds	r1, r2, #1
    15ec:	e843 1000 	strex	r0, r1, [r3]
    15f0:	2800      	cmp	r0, #0
    15f2:	d1f8      	bne.n	15e6 <log_init+0x6>
    15f4:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    15f8:	bb1a      	cbnz	r2, 1642 <log_init+0x62>
{
    15fa:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < log_backend_count_get(); i++) {
    15fc:	2400      	movs	r4, #0
    15fe:	e009      	b.n	1614 <log_init+0x34>
					   backend->cb->ctx,
    1600:	4b11      	ldr	r3, [pc, #68]	; (1648 <log_init+0x68>)
    1602:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    1606:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
    1608:	2204      	movs	r2, #4
    160a:	6819      	ldr	r1, [r3, #0]
    160c:	4628      	mov	r0, r5
    160e:	f000 fb4b 	bl	1ca8 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    1612:	3401      	adds	r4, #1
    1614:	4b0d      	ldr	r3, [pc, #52]	; (164c <log_init+0x6c>)
    1616:	4a0c      	ldr	r2, [pc, #48]	; (1648 <log_init+0x68>)
    1618:	1a9b      	subs	r3, r3, r2
    161a:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    161e:	da0f      	bge.n	1640 <log_init+0x60>
		const struct log_backend *backend = log_backend_get(i);
    1620:	4626      	mov	r6, r4
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
    1622:	4d09      	ldr	r5, [pc, #36]	; (1648 <log_init+0x68>)
    1624:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
    1628:	7b2b      	ldrb	r3, [r5, #12]
    162a:	2b00      	cmp	r3, #0
    162c:	d0f1      	beq.n	1612 <log_init+0x32>
			if (backend->api->init != NULL) {
    162e:	0123      	lsls	r3, r4, #4
    1630:	4a05      	ldr	r2, [pc, #20]	; (1648 <log_init+0x68>)
    1632:	58d3      	ldr	r3, [r2, r3]
    1634:	699b      	ldr	r3, [r3, #24]
    1636:	2b00      	cmp	r3, #0
    1638:	d0e2      	beq.n	1600 <log_init+0x20>
				backend->api->init(backend);
    163a:	4628      	mov	r0, r5
    163c:	4798      	blx	r3
    163e:	e7df      	b.n	1600 <log_init+0x20>
}
    1640:	bd70      	pop	{r4, r5, r6, pc}
    1642:	4770      	bx	lr
    1644:	2000122c 	.word	0x2000122c
    1648:	00014390 	.word	0x00014390
    164c:	000143b0 	.word	0x000143b0

00001650 <get_msg>:
{
    1650:	b510      	push	{r4, lr}
    1652:	f04f 0320 	mov.w	r3, #32
    1656:	f3ef 8411 	mrs	r4, BASEPRI
    165a:	f383 8812 	msr	BASEPRI_MAX, r3
    165e:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
    1662:	4804      	ldr	r0, [pc, #16]	; (1674 <get_msg+0x24>)
    1664:	f00e fe3a 	bl	102dc <log_list_head_get>
	__asm__ volatile(
    1668:	f384 8811 	msr	BASEPRI, r4
    166c:	f3bf 8f6f 	isb	sy
}
    1670:	bd10      	pop	{r4, pc}
    1672:	bf00      	nop
    1674:	20001230 	.word	0x20001230

00001678 <z_log_notify_backend_enabled>:
{
    1678:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    167a:	4b05      	ldr	r3, [pc, #20]	; (1690 <z_log_notify_backend_enabled+0x18>)
    167c:	781b      	ldrb	r3, [r3, #0]
    167e:	b11b      	cbz	r3, 1688 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
    1680:	4b03      	ldr	r3, [pc, #12]	; (1690 <z_log_notify_backend_enabled+0x18>)
    1682:	2201      	movs	r2, #1
    1684:	701a      	strb	r2, [r3, #0]
}
    1686:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
    1688:	4802      	ldr	r0, [pc, #8]	; (1694 <z_log_notify_backend_enabled+0x1c>)
    168a:	f00c fcaf 	bl	dfec <z_impl_k_sem_give>
}
    168e:	e7f7      	b.n	1680 <z_log_notify_backend_enabled+0x8>
    1690:	20002b49 	.word	0x20002b49
    1694:	200003dc 	.word	0x200003dc

00001698 <z_log_dropped>:
    1698:	4b0c      	ldr	r3, [pc, #48]	; (16cc <z_log_dropped+0x34>)
    169a:	f3bf 8f5b 	dmb	ish
    169e:	e853 2f00 	ldrex	r2, [r3]
    16a2:	3201      	adds	r2, #1
    16a4:	e843 2100 	strex	r1, r2, [r3]
    16a8:	2900      	cmp	r1, #0
    16aa:	d1f8      	bne.n	169e <z_log_dropped+0x6>
    16ac:	f3bf 8f5b 	dmb	ish
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    16b0:	4b07      	ldr	r3, [pc, #28]	; (16d0 <z_log_dropped+0x38>)
    16b2:	f3bf 8f5b 	dmb	ish
    16b6:	e853 2f00 	ldrex	r2, [r3]
    16ba:	3a01      	subs	r2, #1
    16bc:	e843 2100 	strex	r1, r2, [r3]
    16c0:	2900      	cmp	r1, #0
    16c2:	d1f8      	bne.n	16b6 <z_log_dropped+0x1e>
    16c4:	f3bf 8f5b 	dmb	ish
}
    16c8:	4770      	bx	lr
    16ca:	bf00      	nop
    16cc:	20001228 	.word	0x20001228
    16d0:	20001224 	.word	0x20001224

000016d4 <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    16d4:	4b06      	ldr	r3, [pc, #24]	; (16f0 <z_log_dropped_read_and_clear+0x1c>)
}
    16d6:	2000      	movs	r0, #0
    16d8:	4602      	mov	r2, r0
    16da:	f3bf 8f5b 	dmb	ish
    16de:	e853 0f00 	ldrex	r0, [r3]
    16e2:	e843 2100 	strex	r1, r2, [r3]
    16e6:	2900      	cmp	r1, #0
    16e8:	d1f9      	bne.n	16de <z_log_dropped_read_and_clear+0xa>
    16ea:	f3bf 8f5b 	dmb	ish
    16ee:	4770      	bx	lr
    16f0:	20001228 	.word	0x20001228

000016f4 <dropped_notify>:
{
    16f4:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    16f6:	f7ff ffed 	bl	16d4 <z_log_dropped_read_and_clear>
    16fa:	4605      	mov	r5, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
    16fc:	2400      	movs	r4, #0
    16fe:	e000      	b.n	1702 <dropped_notify+0xe>
    1700:	3401      	adds	r4, #1
    1702:	4b0b      	ldr	r3, [pc, #44]	; (1730 <dropped_notify+0x3c>)
    1704:	4a0b      	ldr	r2, [pc, #44]	; (1734 <dropped_notify+0x40>)
    1706:	1a9b      	subs	r3, r3, r2
    1708:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    170c:	da0f      	bge.n	172e <dropped_notify+0x3a>
    170e:	4809      	ldr	r0, [pc, #36]	; (1734 <dropped_notify+0x40>)
    1710:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    1714:	6843      	ldr	r3, [r0, #4]
    1716:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    1718:	2b00      	cmp	r3, #0
    171a:	d0f1      	beq.n	1700 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
    171c:	0123      	lsls	r3, r4, #4
    171e:	4a05      	ldr	r2, [pc, #20]	; (1734 <dropped_notify+0x40>)
    1720:	58d3      	ldr	r3, [r2, r3]
    1722:	691b      	ldr	r3, [r3, #16]
    1724:	2b00      	cmp	r3, #0
    1726:	d0eb      	beq.n	1700 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
    1728:	4629      	mov	r1, r5
    172a:	4798      	blx	r3
    172c:	e7e8      	b.n	1700 <dropped_notify+0xc>
}
    172e:	bd38      	pop	{r3, r4, r5, pc}
    1730:	000143b0 	.word	0x000143b0
    1734:	00014390 	.word	0x00014390

00001738 <z_log_dropped_pending>:
	return dropped_cnt > 0;
    1738:	4b03      	ldr	r3, [pc, #12]	; (1748 <z_log_dropped_pending+0x10>)
    173a:	6818      	ldr	r0, [r3, #0]
}
    173c:	2800      	cmp	r0, #0
    173e:	bfd4      	ite	le
    1740:	2000      	movle	r0, #0
    1742:	2001      	movgt	r0, #1
    1744:	4770      	bx	lr
    1746:	bf00      	nop
    1748:	20001228 	.word	0x20001228

0000174c <z_log_strdup>:
{
    174c:	b510      	push	{r4, lr}
    174e:	b082      	sub	sp, #8
    1750:	4604      	mov	r4, r0
	    is_rodata(str) || k_is_user_context()) {
    1752:	f7ff feb9 	bl	14c8 <is_rodata>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    1756:	bb10      	cbnz	r0, 179e <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    1758:	2200      	movs	r2, #0
    175a:	2300      	movs	r3, #0
    175c:	a901      	add	r1, sp, #4
    175e:	4811      	ldr	r0, [pc, #68]	; (17a4 <z_log_strdup+0x58>)
    1760:	f00c fa00 	bl	db64 <k_mem_slab_alloc>
	if (err != 0) {
    1764:	b108      	cbz	r0, 176a <z_log_strdup+0x1e>
		return (char *)log_strdup_fail_msg;
    1766:	4c10      	ldr	r4, [pc, #64]	; (17a8 <z_log_strdup+0x5c>)
    1768:	e019      	b.n	179e <z_log_strdup+0x52>
	(void)atomic_set(&dup->refcount, 1);
    176a:	9b01      	ldr	r3, [sp, #4]
    176c:	2201      	movs	r2, #1
    176e:	f3bf 8f5b 	dmb	ish
    1772:	e853 1f00 	ldrex	r1, [r3]
    1776:	e843 2000 	strex	r0, r2, [r3]
    177a:	2800      	cmp	r0, #0
    177c:	d1f9      	bne.n	1772 <z_log_strdup+0x26>
    177e:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    1782:	221f      	movs	r2, #31
    1784:	4621      	mov	r1, r4
    1786:	9801      	ldr	r0, [sp, #4]
    1788:	3004      	adds	r0, #4
    178a:	f00f fcbb 	bl	11104 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    178e:	9c01      	ldr	r4, [sp, #4]
    1790:	237e      	movs	r3, #126	; 0x7e
    1792:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    1796:	2300      	movs	r3, #0
    1798:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	return dup->buf;
    179c:	3404      	adds	r4, #4
}
    179e:	4620      	mov	r0, r4
    17a0:	b002      	add	sp, #8
    17a2:	bd10      	pop	{r4, pc}
    17a4:	20001238 	.word	0x20001238
    17a8:	000144a0 	.word	0x000144a0

000017ac <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    17ac:	b138      	cbz	r0, 17be <log_is_strdup+0x12>
    17ae:	4a07      	ldr	r2, [pc, #28]	; (17cc <log_is_strdup+0x20>)
    17b0:	4290      	cmp	r0, r2
    17b2:	d306      	bcc.n	17c2 <log_is_strdup+0x16>
    17b4:	32a0      	adds	r2, #160	; 0xa0
    17b6:	4290      	cmp	r0, r2
    17b8:	d305      	bcc.n	17c6 <log_is_strdup+0x1a>
    17ba:	2000      	movs	r0, #0
    17bc:	4770      	bx	lr
    17be:	2000      	movs	r0, #0
    17c0:	4770      	bx	lr
    17c2:	2000      	movs	r0, #0
    17c4:	4770      	bx	lr
    17c6:	2001      	movs	r0, #1
}
    17c8:	4770      	bx	lr
    17ca:	bf00      	nop
    17cc:	200053a0 	.word	0x200053a0

000017d0 <detect_missed_strdup>:
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    17d0:	7a03      	ldrb	r3, [r0, #8]
	if (!log_msg_is_std(msg)) {
    17d2:	f013 0f01 	tst.w	r3, #1
    17d6:	d000      	beq.n	17da <detect_missed_strdup+0xa>
    17d8:	4770      	bx	lr
{
    17da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    17de:	b083      	sub	sp, #12
    17e0:	4606      	mov	r6, r0
	msg_str = log_msg_str_get(msg);
    17e2:	f00e fe66 	bl	104b2 <log_msg_str_get>
    17e6:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    17e8:	4630      	mov	r0, r6
    17ea:	f00e fe4d 	bl	10488 <log_msg_nargs_get>
    17ee:	4601      	mov	r1, r0
    17f0:	4638      	mov	r0, r7
    17f2:	f00e fd81 	bl	102f8 <z_log_get_s_mask>
    17f6:	4605      	mov	r5, r0
	while (mask) {
    17f8:	e004      	b.n	1804 <detect_missed_strdup+0x34>
		mask &= ~BIT(idx);
    17fa:	2301      	movs	r3, #1
    17fc:	fa03 f404 	lsl.w	r4, r3, r4
    1800:	ea25 0504 	bic.w	r5, r5, r4
	while (mask) {
    1804:	b36d      	cbz	r5, 1862 <detect_missed_strdup+0x92>
		idx = 31 - __builtin_clz(mask);
    1806:	fab5 f485 	clz	r4, r5
    180a:	f1c4 041f 	rsb	r4, r4, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    180e:	4621      	mov	r1, r4
    1810:	4630      	mov	r0, r6
    1812:	f00e fe3c 	bl	1048e <log_msg_arg_get>
    1816:	4681      	mov	r9, r0
		if (!is_rodata(str) && !log_is_strdup(str) &&
    1818:	f7ff fe56 	bl	14c8 <is_rodata>
    181c:	2800      	cmp	r0, #0
    181e:	d1ec      	bne.n	17fa <detect_missed_strdup+0x2a>
    1820:	4648      	mov	r0, r9
    1822:	f7ff ffc3 	bl	17ac <log_is_strdup>
    1826:	2800      	cmp	r0, #0
    1828:	d1e7      	bne.n	17fa <detect_missed_strdup+0x2a>
    182a:	4b0f      	ldr	r3, [pc, #60]	; (1868 <detect_missed_strdup+0x98>)
    182c:	4599      	cmp	r9, r3
    182e:	d0e4      	beq.n	17fa <detect_missed_strdup+0x2a>
	return msg->hdr.ids.source_id;
    1830:	8971      	ldrh	r1, [r6, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
    1832:	f3c1 1189 	ubfx	r1, r1, #6, #10
    1836:	f000 fa27 	bl	1c88 <log_source_name_get>
    183a:	4602      	mov	r2, r0
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    183c:	4b0b      	ldr	r3, [pc, #44]	; (186c <detect_missed_strdup+0x9c>)
    183e:	490c      	ldr	r1, [pc, #48]	; (1870 <detect_missed_strdup+0xa0>)
    1840:	1a5b      	subs	r3, r3, r1
    1842:	08db      	lsrs	r3, r3, #3
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    1844:	2101      	movs	r1, #1
    1846:	f361 0802 	bfi	r8, r1, #0, #3
    184a:	f36f 08c5 	bfc	r8, #3, #3
    184e:	f363 188f 	bfi	r8, r3, #6, #10
    1852:	f8ad 8000 	strh.w	r8, [sp]
    1856:	463b      	mov	r3, r7
    1858:	4621      	mov	r1, r4
    185a:	4806      	ldr	r0, [pc, #24]	; (1874 <detect_missed_strdup+0xa4>)
    185c:	f000 f8b2 	bl	19c4 <log_3>
    1860:	e7cb      	b.n	17fa <detect_missed_strdup+0x2a>
}
    1862:	b003      	add	sp, #12
    1864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1868:	000144a0 	.word	0x000144a0
    186c:	00014338 	.word	0x00014338
    1870:	00014318 	.word	0x00014318
    1874:	000144bc 	.word	0x000144bc

00001878 <msg_process>:
{
    1878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    187a:	4606      	mov	r6, r0
	if (!bypass) {
    187c:	bb19      	cbnz	r1, 18c6 <msg_process+0x4e>
		    !panic_mode) {
    187e:	4b14      	ldr	r3, [pc, #80]	; (18d0 <msg_process+0x58>)
    1880:	781b      	ldrb	r3, [r3, #0]
		if (!IS_ENABLED(CONFIG_LOG2) &&
    1882:	b10b      	cbz	r3, 1888 <msg_process+0x10>
{
    1884:	2400      	movs	r4, #0
    1886:	e003      	b.n	1890 <msg_process+0x18>
			detect_missed_strdup(msg.msg);
    1888:	f7ff ffa2 	bl	17d0 <detect_missed_strdup>
    188c:	e7fa      	b.n	1884 <msg_process+0xc>
		for (int i = 0; i < log_backend_count_get(); i++) {
    188e:	3401      	adds	r4, #1
    1890:	4b10      	ldr	r3, [pc, #64]	; (18d4 <msg_process+0x5c>)
    1892:	4a11      	ldr	r2, [pc, #68]	; (18d8 <msg_process+0x60>)
    1894:	1a9b      	subs	r3, r3, r2
    1896:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    189a:	da14      	bge.n	18c6 <msg_process+0x4e>
	return &__log_backends_start[idx];
    189c:	4d0e      	ldr	r5, [pc, #56]	; (18d8 <msg_process+0x60>)
    189e:	eb05 1504 	add.w	r5, r5, r4, lsl #4
	return backend->cb->active;
    18a2:	686b      	ldr	r3, [r5, #4]
    18a4:	795b      	ldrb	r3, [r3, #5]
			if (log_backend_is_active(backend) &&
    18a6:	2b00      	cmp	r3, #0
    18a8:	d0f1      	beq.n	188e <msg_process+0x16>
			    msg_filter_check(backend, msg)) {
    18aa:	4631      	mov	r1, r6
    18ac:	4628      	mov	r0, r5
    18ae:	f00e fd1d 	bl	102ec <msg_filter_check>
			if (log_backend_is_active(backend) &&
    18b2:	2800      	cmp	r0, #0
    18b4:	d0eb      	beq.n	188e <msg_process+0x16>
	backend->api->put(backend, msg);
    18b6:	0127      	lsls	r7, r4, #4
    18b8:	4b07      	ldr	r3, [pc, #28]	; (18d8 <msg_process+0x60>)
    18ba:	59db      	ldr	r3, [r3, r7]
    18bc:	685b      	ldr	r3, [r3, #4]
    18be:	4631      	mov	r1, r6
    18c0:	4628      	mov	r0, r5
    18c2:	4798      	blx	r3
}
    18c4:	e7e3      	b.n	188e <msg_process+0x16>
			log_msg_put(msg.msg);
    18c6:	4630      	mov	r0, r6
    18c8:	f00e fdf5 	bl	104b6 <log_msg_put>
}
    18cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    18ce:	bf00      	nop
    18d0:	20002b4a 	.word	0x20002b4a
    18d4:	000143b0 	.word	0x000143b0
    18d8:	00014390 	.word	0x00014390

000018dc <z_impl_log_process>:
{
    18dc:	b510      	push	{r4, lr}
    18de:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    18e0:	4b10      	ldr	r3, [pc, #64]	; (1924 <z_impl_log_process+0x48>)
    18e2:	781b      	ldrb	r3, [r3, #0]
    18e4:	b903      	cbnz	r3, 18e8 <z_impl_log_process+0xc>
    18e6:	b1c8      	cbz	r0, 191c <z_impl_log_process+0x40>
	msg = get_msg();
    18e8:	f7ff feb2 	bl	1650 <get_msg>
	if (msg.msg) {
    18ec:	4602      	mov	r2, r0
    18ee:	b178      	cbz	r0, 1910 <z_impl_log_process+0x34>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    18f0:	4b0d      	ldr	r3, [pc, #52]	; (1928 <z_impl_log_process+0x4c>)
    18f2:	f3bf 8f5b 	dmb	ish
    18f6:	e853 1f00 	ldrex	r1, [r3]
    18fa:	3901      	subs	r1, #1
    18fc:	e843 1000 	strex	r0, r1, [r3]
    1900:	2800      	cmp	r0, #0
    1902:	d1f8      	bne.n	18f6 <z_impl_log_process+0x1a>
    1904:	f3bf 8f5b 	dmb	ish
		msg_process(msg, bypass);
    1908:	4621      	mov	r1, r4
    190a:	4610      	mov	r0, r2
    190c:	f7ff ffb4 	bl	1878 <msg_process>
	if (!bypass && z_log_dropped_pending()) {
    1910:	b914      	cbnz	r4, 1918 <z_impl_log_process+0x3c>
    1912:	f7ff ff11 	bl	1738 <z_log_dropped_pending>
    1916:	b910      	cbnz	r0, 191e <z_impl_log_process+0x42>
	return next_pending();
    1918:	f7ff fe02 	bl	1520 <next_pending>
}
    191c:	bd10      	pop	{r4, pc}
		dropped_notify();
    191e:	f7ff fee9 	bl	16f4 <dropped_notify>
    1922:	e7f9      	b.n	1918 <z_impl_log_process+0x3c>
    1924:	20002b49 	.word	0x20002b49
    1928:	20001224 	.word	0x20001224

0000192c <z_log_msg_post_finalize>:
{
    192c:	b510      	push	{r4, lr}
    192e:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1930:	4b1f      	ldr	r3, [pc, #124]	; (19b0 <z_log_msg_post_finalize+0x84>)
    1932:	f3bf 8f5b 	dmb	ish
    1936:	e853 2f00 	ldrex	r2, [r3]
    193a:	3201      	adds	r2, #1
    193c:	e843 2100 	strex	r1, r2, [r3]
    1940:	2900      	cmp	r1, #0
    1942:	d1f8      	bne.n	1936 <z_log_msg_post_finalize+0xa>
    1944:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    1948:	4b1a      	ldr	r3, [pc, #104]	; (19b4 <z_log_msg_post_finalize+0x88>)
    194a:	781b      	ldrb	r3, [r3, #0]
    194c:	b963      	cbnz	r3, 1968 <z_log_msg_post_finalize+0x3c>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    194e:	4b1a      	ldr	r3, [pc, #104]	; (19b8 <z_log_msg_post_finalize+0x8c>)
    1950:	681b      	ldr	r3, [r3, #0]
    1952:	b11b      	cbz	r3, 195c <z_log_msg_post_finalize+0x30>
    1954:	4a16      	ldr	r2, [pc, #88]	; (19b0 <z_log_msg_post_finalize+0x84>)
    1956:	6812      	ldr	r2, [r2, #0]
    1958:	2a01      	cmp	r2, #1
    195a:	d015      	beq.n	1988 <z_log_msg_post_finalize+0x5c>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    195c:	4a14      	ldr	r2, [pc, #80]	; (19b0 <z_log_msg_post_finalize+0x84>)
    195e:	6812      	ldr	r2, [r2, #0]
    1960:	2a0a      	cmp	r2, #10
    1962:	d01c      	beq.n	199e <z_log_msg_post_finalize+0x72>
}
    1964:	b002      	add	sp, #8
    1966:	bd10      	pop	{r4, pc}
	__asm__ volatile(
    1968:	f04f 0320 	mov.w	r3, #32
    196c:	f3ef 8411 	mrs	r4, BASEPRI
    1970:	f383 8812 	msr	BASEPRI_MAX, r3
    1974:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    1978:	2000      	movs	r0, #0
    197a:	f7ff ffaf 	bl	18dc <z_impl_log_process>
	__asm__ volatile(
    197e:	f384 8811 	msr	BASEPRI, r4
    1982:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    1986:	e7ed      	b.n	1964 <z_log_msg_post_finalize+0x38>
	z_impl_k_timer_start(timer, duration, period);
    1988:	2200      	movs	r2, #0
    198a:	2300      	movs	r3, #0
    198c:	e9cd 2300 	strd	r2, r3, [sp]
    1990:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1994:	2300      	movs	r3, #0
    1996:	4809      	ldr	r0, [pc, #36]	; (19bc <z_log_msg_post_finalize+0x90>)
    1998:	f00d faac 	bl	eef4 <z_impl_k_timer_start>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    199c:	e7e2      	b.n	1964 <z_log_msg_post_finalize+0x38>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    199e:	2b00      	cmp	r3, #0
    19a0:	d0e0      	beq.n	1964 <z_log_msg_post_finalize+0x38>
	z_impl_k_timer_stop(timer);
    19a2:	4806      	ldr	r0, [pc, #24]	; (19bc <z_log_msg_post_finalize+0x90>)
    19a4:	f012 fb0b 	bl	13fbe <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    19a8:	4805      	ldr	r0, [pc, #20]	; (19c0 <z_log_msg_post_finalize+0x94>)
    19aa:	f00c fb1f 	bl	dfec <z_impl_k_sem_give>
}
    19ae:	e7d9      	b.n	1964 <z_log_msg_post_finalize+0x38>
    19b0:	20001224 	.word	0x20001224
    19b4:	20002b4a 	.word	0x20002b4a
    19b8:	20001254 	.word	0x20001254
    19bc:	200004e0 	.word	0x200004e0
    19c0:	200003dc 	.word	0x200003dc

000019c4 <log_3>:
{
    19c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    19c8:	4680      	mov	r8, r0
    19ca:	460f      	mov	r7, r1
    19cc:	4616      	mov	r6, r2
    19ce:	461d      	mov	r5, r3
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    19d0:	f000 f9b0 	bl	1d34 <log_msg_chunk_alloc>

	if (msg != NULL) {
    19d4:	4604      	mov	r4, r0
    19d6:	b140      	cbz	r0, 19ea <log_3+0x26>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
    19d8:	2301      	movs	r3, #1
    19da:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    19dc:	2200      	movs	r2, #0
    19de:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    19e0:	f04f 0300 	mov.w	r3, #0
    19e4:	f362 0300 	bfi	r3, r2, #0, #1
    19e8:	7203      	strb	r3, [r0, #8]
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
    19ea:	b14c      	cbz	r4, 1a00 <log_3+0x3c>
		msg->str = str;
    19ec:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = 3U;
    19f0:	7a63      	ldrb	r3, [r4, #9]
    19f2:	2203      	movs	r2, #3
    19f4:	f362 1307 	bfi	r3, r2, #4, #4
    19f8:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    19fa:	6167      	str	r7, [r4, #20]
		msg->payload.single.args[1] = arg2;
    19fc:	61a6      	str	r6, [r4, #24]
		msg->payload.single.args[2] = arg3;
    19fe:	61e5      	str	r5, [r4, #28]
		if (msg == NULL) {
    1a00:	b1c4      	cbz	r4, 1a34 <log_3+0x70>
	msg->hdr.ids = src_level;
    1a02:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    1a06:	8163      	strh	r3, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    1a08:	4b0b      	ldr	r3, [pc, #44]	; (1a38 <log_3+0x74>)
    1a0a:	681b      	ldr	r3, [r3, #0]
    1a0c:	4798      	blx	r3
    1a0e:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    1a10:	f04f 0320 	mov.w	r3, #32
    1a14:	f3ef 8511 	mrs	r5, BASEPRI
    1a18:	f383 8812 	msr	BASEPRI_MAX, r3
    1a1c:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    1a20:	4621      	mov	r1, r4
    1a22:	4806      	ldr	r0, [pc, #24]	; (1a3c <log_3+0x78>)
    1a24:	f00e fc4e 	bl	102c4 <log_list_add_tail>
	__asm__ volatile(
    1a28:	f385 8811 	msr	BASEPRI, r5
    1a2c:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    1a30:	f7ff ff7c 	bl	192c <z_log_msg_post_finalize>
}
    1a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1a38:	20000128 	.word	0x20000128
    1a3c:	20001230 	.word	0x20001230

00001a40 <log_1>:
{
    1a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1a42:	4606      	mov	r6, r0
    1a44:	460d      	mov	r5, r1
    1a46:	4617      	mov	r7, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    1a48:	f000 f974 	bl	1d34 <log_msg_chunk_alloc>
	if (msg != NULL) {
    1a4c:	4604      	mov	r4, r0
    1a4e:	b140      	cbz	r0, 1a62 <log_1+0x22>
		msg->hdr.ref_cnt = 1;
    1a50:	2301      	movs	r3, #1
    1a52:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    1a54:	2100      	movs	r1, #0
    1a56:	8101      	strh	r1, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    1a58:	f04f 0300 	mov.w	r3, #0
    1a5c:	f361 0300 	bfi	r3, r1, #0, #1
    1a60:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
    1a62:	b134      	cbz	r4, 1a72 <log_1+0x32>
		msg->str = str;
    1a64:	6126      	str	r6, [r4, #16]
		msg->hdr.params.std.nargs = 1U;
    1a66:	7a63      	ldrb	r3, [r4, #9]
    1a68:	2201      	movs	r2, #1
    1a6a:	f362 1307 	bfi	r3, r2, #4, #4
    1a6e:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    1a70:	6165      	str	r5, [r4, #20]
		if (msg == NULL) {
    1a72:	b1b4      	cbz	r4, 1aa2 <log_1+0x62>
	msg->hdr.ids = src_level;
    1a74:	8167      	strh	r7, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    1a76:	4b0b      	ldr	r3, [pc, #44]	; (1aa4 <log_1+0x64>)
    1a78:	681b      	ldr	r3, [r3, #0]
    1a7a:	4798      	blx	r3
    1a7c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    1a7e:	f04f 0320 	mov.w	r3, #32
    1a82:	f3ef 8511 	mrs	r5, BASEPRI
    1a86:	f383 8812 	msr	BASEPRI_MAX, r3
    1a8a:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    1a8e:	4621      	mov	r1, r4
    1a90:	4805      	ldr	r0, [pc, #20]	; (1aa8 <log_1+0x68>)
    1a92:	f00e fc17 	bl	102c4 <log_list_add_tail>
	__asm__ volatile(
    1a96:	f385 8811 	msr	BASEPRI, r5
    1a9a:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    1a9e:	f7ff ff45 	bl	192c <z_log_msg_post_finalize>
}
    1aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1aa4:	20000128 	.word	0x20000128
    1aa8:	20001230 	.word	0x20001230

00001aac <log_2>:
{
    1aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1ab0:	4607      	mov	r7, r0
    1ab2:	460e      	mov	r6, r1
    1ab4:	4615      	mov	r5, r2
    1ab6:	4698      	mov	r8, r3
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    1ab8:	f000 f93c 	bl	1d34 <log_msg_chunk_alloc>
	if (msg != NULL) {
    1abc:	4604      	mov	r4, r0
    1abe:	b140      	cbz	r0, 1ad2 <log_2+0x26>
		msg->hdr.ref_cnt = 1;
    1ac0:	2301      	movs	r3, #1
    1ac2:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    1ac4:	2200      	movs	r2, #0
    1ac6:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    1ac8:	f04f 0300 	mov.w	r3, #0
    1acc:	f362 0300 	bfi	r3, r2, #0, #1
    1ad0:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
    1ad2:	b13c      	cbz	r4, 1ae4 <log_2+0x38>
		msg->str = str;
    1ad4:	6127      	str	r7, [r4, #16]
		msg->hdr.params.std.nargs = 2U;
    1ad6:	7a63      	ldrb	r3, [r4, #9]
    1ad8:	2202      	movs	r2, #2
    1ada:	f362 1307 	bfi	r3, r2, #4, #4
    1ade:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    1ae0:	6166      	str	r6, [r4, #20]
		msg->payload.single.args[1] = arg2;
    1ae2:	61a5      	str	r5, [r4, #24]
		if (msg == NULL) {
    1ae4:	b1bc      	cbz	r4, 1b16 <log_2+0x6a>
	msg->hdr.ids = src_level;
    1ae6:	f8a4 800a 	strh.w	r8, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    1aea:	4b0c      	ldr	r3, [pc, #48]	; (1b1c <log_2+0x70>)
    1aec:	681b      	ldr	r3, [r3, #0]
    1aee:	4798      	blx	r3
    1af0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    1af2:	f04f 0320 	mov.w	r3, #32
    1af6:	f3ef 8511 	mrs	r5, BASEPRI
    1afa:	f383 8812 	msr	BASEPRI_MAX, r3
    1afe:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    1b02:	4621      	mov	r1, r4
    1b04:	4806      	ldr	r0, [pc, #24]	; (1b20 <log_2+0x74>)
    1b06:	f00e fbdd 	bl	102c4 <log_list_add_tail>
	__asm__ volatile(
    1b0a:	f385 8811 	msr	BASEPRI, r5
    1b0e:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    1b12:	f7ff ff0b 	bl	192c <z_log_msg_post_finalize>
}
    1b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1b1a:	bf00      	nop
    1b1c:	20000128 	.word	0x20000128
    1b20:	20001230 	.word	0x20001230

00001b24 <log_n>:
{
    1b24:	b538      	push	{r3, r4, r5, lr}
    1b26:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
    1b28:	f00e fd09 	bl	1053e <log_msg_create_n>
		if (msg == NULL) {
    1b2c:	b1b8      	cbz	r0, 1b5e <log_n+0x3a>
    1b2e:	4605      	mov	r5, r0
	msg->hdr.ids = src_level;
    1b30:	8144      	strh	r4, [r0, #10]
	msg->hdr.timestamp = timestamp_func();
    1b32:	4b0b      	ldr	r3, [pc, #44]	; (1b60 <log_n+0x3c>)
    1b34:	681b      	ldr	r3, [r3, #0]
    1b36:	4798      	blx	r3
    1b38:	60e8      	str	r0, [r5, #12]
	__asm__ volatile(
    1b3a:	f04f 0320 	mov.w	r3, #32
    1b3e:	f3ef 8411 	mrs	r4, BASEPRI
    1b42:	f383 8812 	msr	BASEPRI_MAX, r3
    1b46:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    1b4a:	4629      	mov	r1, r5
    1b4c:	4805      	ldr	r0, [pc, #20]	; (1b64 <log_n+0x40>)
    1b4e:	f00e fbb9 	bl	102c4 <log_list_add_tail>
	__asm__ volatile(
    1b52:	f384 8811 	msr	BASEPRI, r4
    1b56:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    1b5a:	f7ff fee7 	bl	192c <z_log_msg_post_finalize>
}
    1b5e:	bd38      	pop	{r3, r4, r5, pc}
    1b60:	20000128 	.word	0x20000128
    1b64:	20001230 	.word	0x20001230

00001b68 <log_0>:
{
    1b68:	b570      	push	{r4, r5, r6, lr}
    1b6a:	4605      	mov	r5, r0
    1b6c:	460e      	mov	r6, r1
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    1b6e:	f000 f8e1 	bl	1d34 <log_msg_chunk_alloc>
	if (msg != NULL) {
    1b72:	4604      	mov	r4, r0
    1b74:	b140      	cbz	r0, 1b88 <log_0+0x20>
		msg->hdr.ref_cnt = 1;
    1b76:	2301      	movs	r3, #1
    1b78:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    1b7a:	2200      	movs	r2, #0
    1b7c:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    1b7e:	f04f 0300 	mov.w	r3, #0
    1b82:	f362 0300 	bfi	r3, r2, #0, #1
    1b86:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
    1b88:	b104      	cbz	r4, 1b8c <log_0+0x24>
		msg->str = str;
    1b8a:	6125      	str	r5, [r4, #16]
		if (msg == NULL) {
    1b8c:	b1b4      	cbz	r4, 1bbc <log_0+0x54>
	msg->hdr.ids = src_level;
    1b8e:	8166      	strh	r6, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    1b90:	4b0b      	ldr	r3, [pc, #44]	; (1bc0 <log_0+0x58>)
    1b92:	681b      	ldr	r3, [r3, #0]
    1b94:	4798      	blx	r3
    1b96:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    1b98:	f04f 0320 	mov.w	r3, #32
    1b9c:	f3ef 8511 	mrs	r5, BASEPRI
    1ba0:	f383 8812 	msr	BASEPRI_MAX, r3
    1ba4:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    1ba8:	4621      	mov	r1, r4
    1baa:	4806      	ldr	r0, [pc, #24]	; (1bc4 <log_0+0x5c>)
    1bac:	f00e fb8a 	bl	102c4 <log_list_add_tail>
	__asm__ volatile(
    1bb0:	f385 8811 	msr	BASEPRI, r5
    1bb4:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    1bb8:	f7ff feb8 	bl	192c <z_log_msg_post_finalize>
}
    1bbc:	bd70      	pop	{r4, r5, r6, pc}
    1bbe:	bf00      	nop
    1bc0:	20000128 	.word	0x20000128
    1bc4:	20001230 	.word	0x20001230

00001bc8 <z_impl_log_panic>:
	if (panic_mode) {
    1bc8:	4b12      	ldr	r3, [pc, #72]	; (1c14 <z_impl_log_panic+0x4c>)
    1bca:	781b      	ldrb	r3, [r3, #0]
    1bcc:	b103      	cbz	r3, 1bd0 <z_impl_log_panic+0x8>
    1bce:	4770      	bx	lr
{
    1bd0:	b510      	push	{r4, lr}
	log_init();
    1bd2:	f7ff fd05 	bl	15e0 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    1bd6:	2400      	movs	r4, #0
    1bd8:	e000      	b.n	1bdc <z_impl_log_panic+0x14>
    1bda:	3401      	adds	r4, #1
    1bdc:	4b0e      	ldr	r3, [pc, #56]	; (1c18 <z_impl_log_panic+0x50>)
    1bde:	4a0f      	ldr	r2, [pc, #60]	; (1c1c <z_impl_log_panic+0x54>)
    1be0:	1a9b      	subs	r3, r3, r2
    1be2:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1be6:	da0c      	bge.n	1c02 <z_impl_log_panic+0x3a>
	return &__log_backends_start[idx];
    1be8:	480c      	ldr	r0, [pc, #48]	; (1c1c <z_impl_log_panic+0x54>)
    1bea:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
    1bee:	6843      	ldr	r3, [r0, #4]
    1bf0:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    1bf2:	2b00      	cmp	r3, #0
    1bf4:	d0f1      	beq.n	1bda <z_impl_log_panic+0x12>
	backend->api->panic(backend);
    1bf6:	0123      	lsls	r3, r4, #4
    1bf8:	4a08      	ldr	r2, [pc, #32]	; (1c1c <z_impl_log_panic+0x54>)
    1bfa:	58d3      	ldr	r3, [r2, r3]
    1bfc:	695b      	ldr	r3, [r3, #20]
    1bfe:	4798      	blx	r3
}
    1c00:	e7eb      	b.n	1bda <z_impl_log_panic+0x12>
    1c02:	2000      	movs	r0, #0
    1c04:	f7ff fe6a 	bl	18dc <z_impl_log_process>
		while (log_process(false) == true) {
    1c08:	2800      	cmp	r0, #0
    1c0a:	d1fa      	bne.n	1c02 <z_impl_log_panic+0x3a>
	panic_mode = true;
    1c0c:	4b01      	ldr	r3, [pc, #4]	; (1c14 <z_impl_log_panic+0x4c>)
    1c0e:	2201      	movs	r2, #1
    1c10:	701a      	strb	r2, [r3, #0]
}
    1c12:	bd10      	pop	{r4, pc}
    1c14:	20002b4a 	.word	0x20002b4a
    1c18:	000143b0 	.word	0x000143b0
    1c1c:	00014390 	.word	0x00014390

00001c20 <log_process_thread_func>:
{
    1c20:	b508      	push	{r3, lr}
	log_init();
    1c22:	f7ff fcdd 	bl	15e0 <log_init>
	return z_impl_z_current_get();
    1c26:	f00c ff4b 	bl	eac0 <z_impl_z_current_get>
	thread_set(k_current_get());
    1c2a:	f7ff fc5d 	bl	14e8 <thread_set>
    1c2e:	e006      	b.n	1c3e <log_process_thread_func+0x1e>
	return z_impl_k_sem_take(sem, timeout);
    1c30:	f04f 32ff 	mov.w	r2, #4294967295
    1c34:	f04f 33ff 	mov.w	r3, #4294967295
    1c38:	4804      	ldr	r0, [pc, #16]	; (1c4c <log_process_thread_func+0x2c>)
    1c3a:	f00c f9fb 	bl	e034 <z_impl_k_sem_take>
    1c3e:	2000      	movs	r0, #0
    1c40:	f7ff fe4c 	bl	18dc <z_impl_log_process>
		if (log_process(false) == false) {
    1c44:	2800      	cmp	r0, #0
    1c46:	d1fa      	bne.n	1c3e <log_process_thread_func+0x1e>
    1c48:	e7f2      	b.n	1c30 <log_process_thread_func+0x10>
    1c4a:	bf00      	nop
    1c4c:	200003dc 	.word	0x200003dc

00001c50 <log_free>:
{
    1c50:	b500      	push	{lr}
    1c52:	b083      	sub	sp, #12
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    1c54:	3804      	subs	r0, #4
    1c56:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1c58:	f3bf 8f5b 	dmb	ish
    1c5c:	e850 3f00 	ldrex	r3, [r0]
    1c60:	1e5a      	subs	r2, r3, #1
    1c62:	e840 2100 	strex	r1, r2, [r0]
    1c66:	2900      	cmp	r1, #0
    1c68:	d1f8      	bne.n	1c5c <log_free+0xc>
    1c6a:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    1c6e:	2b01      	cmp	r3, #1
    1c70:	d002      	beq.n	1c78 <log_free+0x28>
}
    1c72:	b003      	add	sp, #12
    1c74:	f85d fb04 	ldr.w	pc, [sp], #4
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    1c78:	a901      	add	r1, sp, #4
    1c7a:	4802      	ldr	r0, [pc, #8]	; (1c84 <log_free+0x34>)
    1c7c:	f011 fdd6 	bl	1382c <k_mem_slab_free>
}
    1c80:	e7f7      	b.n	1c72 <log_free+0x22>
    1c82:	bf00      	nop
    1c84:	20001238 	.word	0x20001238

00001c88 <log_source_name_get>:
	return log_sources_count();
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    1c88:	4b05      	ldr	r3, [pc, #20]	; (1ca0 <log_source_name_get+0x18>)
    1c8a:	4a06      	ldr	r2, [pc, #24]	; (1ca4 <log_source_name_get+0x1c>)
    1c8c:	1a9b      	subs	r3, r3, r2
    1c8e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    1c92:	d202      	bcs.n	1c9a <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
    1c94:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    1c98:	4770      	bx	lr
    1c9a:	2000      	movs	r0, #0
}
    1c9c:	4770      	bx	lr
    1c9e:	bf00      	nop
    1ca0:	00014390 	.word	0x00014390
    1ca4:	00014318 	.word	0x00014318

00001ca8 <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    1ca8:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    1caa:	4b07      	ldr	r3, [pc, #28]	; (1cc8 <log_backend_enable+0x20>)
    1cac:	1ac3      	subs	r3, r0, r3
    1cae:	111b      	asrs	r3, r3, #4
    1cb0:	3301      	adds	r3, #1
	backend->cb->id = id;
    1cb2:	6842      	ldr	r2, [r0, #4]
    1cb4:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
    1cb6:	6843      	ldr	r3, [r0, #4]
    1cb8:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    1cba:	6843      	ldr	r3, [r0, #4]
    1cbc:	2201      	movs	r2, #1
    1cbe:	715a      	strb	r2, [r3, #5]

	log_backend_id_set(backend, id);
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    1cc0:	f7ff fcda 	bl	1678 <z_log_notify_backend_enabled>
}
    1cc4:	bd08      	pop	{r3, pc}
    1cc6:	bf00      	nop
    1cc8:	00014390 	.word	0x00014390

00001ccc <cont_free>:
{
	atomic_inc(&msg->hdr.ref_cnt);
}

static void cont_free(struct log_msg_cont *cont)
{
    1ccc:	b510      	push	{r4, lr}
    1cce:	b082      	sub	sp, #8
    1cd0:	9001      	str	r0, [sp, #4]
	struct log_msg_cont *next;

	while (cont != NULL) {
    1cd2:	9b01      	ldr	r3, [sp, #4]
    1cd4:	b133      	cbz	r3, 1ce4 <cont_free+0x18>
		next = cont->next;
    1cd6:	681c      	ldr	r4, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    1cd8:	a901      	add	r1, sp, #4
    1cda:	4803      	ldr	r0, [pc, #12]	; (1ce8 <cont_free+0x1c>)
    1cdc:	f011 fda6 	bl	1382c <k_mem_slab_free>
		cont = next;
    1ce0:	9401      	str	r4, [sp, #4]
    1ce2:	e7f6      	b.n	1cd2 <cont_free+0x6>
	}
}
    1ce4:	b002      	add	sp, #8
    1ce6:	bd10      	pop	{r4, pc}
    1ce8:	20001258 	.word	0x20001258

00001cec <log_msg_pool_init>:
{
    1cec:	b508      	push	{r3, lr}
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    1cee:	2320      	movs	r3, #32
    1cf0:	461a      	mov	r2, r3
    1cf2:	4902      	ldr	r1, [pc, #8]	; (1cfc <log_msg_pool_init+0x10>)
    1cf4:	4802      	ldr	r0, [pc, #8]	; (1d00 <log_msg_pool_init+0x14>)
    1cf6:	f011 fd8b 	bl	13810 <k_mem_slab_init>
}
    1cfa:	bd08      	pop	{r3, pc}
    1cfc:	20005440 	.word	0x20005440
    1d00:	20001258 	.word	0x20001258

00001d04 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    1d04:	b510      	push	{r4, lr}
    1d06:	b082      	sub	sp, #8
	union log_msg_chunk *msg = NULL;
    1d08:	2300      	movs	r3, #0
    1d0a:	9301      	str	r3, [sp, #4]
    1d0c:	2001      	movs	r0, #1
    1d0e:	f7ff fde5 	bl	18dc <z_impl_log_process>
    1d12:	4604      	mov	r4, r0
	int err;

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
    1d14:	f7ff fcc0 	bl	1698 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    1d18:	2200      	movs	r2, #0
    1d1a:	2300      	movs	r3, #0
    1d1c:	a901      	add	r1, sp, #4
    1d1e:	4804      	ldr	r0, [pc, #16]	; (1d30 <log_msg_no_space_handle+0x2c>)
    1d20:	f00b ff20 	bl	db64 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    1d24:	b108      	cbz	r0, 1d2a <log_msg_no_space_handle+0x26>
    1d26:	2c00      	cmp	r4, #0
    1d28:	d1f0      	bne.n	1d0c <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
    1d2a:	9801      	ldr	r0, [sp, #4]
    1d2c:	b002      	add	sp, #8
    1d2e:	bd10      	pop	{r4, pc}
    1d30:	20001258 	.word	0x20001258

00001d34 <log_msg_chunk_alloc>:
{
    1d34:	b500      	push	{lr}
    1d36:	b083      	sub	sp, #12
	union log_msg_chunk *msg = NULL;
    1d38:	2300      	movs	r3, #0
    1d3a:	9301      	str	r3, [sp, #4]
		   block_on_alloc()
    1d3c:	f00e fafd 	bl	1033a <block_on_alloc>
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    1d40:	b150      	cbz	r0, 1d58 <log_msg_chunk_alloc+0x24>
    1d42:	2200      	movs	r2, #0
    1d44:	2300      	movs	r3, #0
    1d46:	a901      	add	r1, sp, #4
    1d48:	4807      	ldr	r0, [pc, #28]	; (1d68 <log_msg_chunk_alloc+0x34>)
    1d4a:	f00b ff0b 	bl	db64 <k_mem_slab_alloc>
	if (err != 0) {
    1d4e:	b930      	cbnz	r0, 1d5e <log_msg_chunk_alloc+0x2a>
}
    1d50:	9801      	ldr	r0, [sp, #4]
    1d52:	b003      	add	sp, #12
    1d54:	f85d fb04 	ldr.w	pc, [sp], #4
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    1d58:	2200      	movs	r2, #0
    1d5a:	2300      	movs	r3, #0
    1d5c:	e7f3      	b.n	1d46 <log_msg_chunk_alloc+0x12>
		msg = log_msg_no_space_handle();
    1d5e:	f7ff ffd1 	bl	1d04 <log_msg_no_space_handle>
    1d62:	9001      	str	r0, [sp, #4]
    1d64:	e7f4      	b.n	1d50 <log_msg_chunk_alloc+0x1c>
    1d66:	bf00      	nop
    1d68:	20001258 	.word	0x20001258

00001d6c <msg_free>:
{
    1d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d6e:	b083      	sub	sp, #12
    1d70:	9001      	str	r0, [sp, #4]
	uint32_t nargs = log_msg_nargs_get(msg);
    1d72:	4604      	mov	r4, r0
    1d74:	f00e fb88 	bl	10488 <log_msg_nargs_get>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    1d78:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg) && nargs) {
    1d7a:	f013 0f01 	tst.w	r3, #1
    1d7e:	d101      	bne.n	1d84 <msg_free+0x18>
    1d80:	4606      	mov	r6, r0
    1d82:	bb50      	cbnz	r0, 1dda <msg_free+0x6e>
	if (msg->hdr.params.generic.ext == 1) {
    1d84:	9b01      	ldr	r3, [sp, #4]
    1d86:	7a1a      	ldrb	r2, [r3, #8]
    1d88:	f012 0f02 	tst.w	r2, #2
    1d8c:	d128      	bne.n	1de0 <msg_free+0x74>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    1d8e:	a901      	add	r1, sp, #4
    1d90:	4815      	ldr	r0, [pc, #84]	; (1de8 <msg_free+0x7c>)
    1d92:	f011 fd4b 	bl	1382c <k_mem_slab_free>
}
    1d96:	b003      	add	sp, #12
    1d98:	bdf0      	pop	{r4, r5, r6, r7, pc}
					smask = z_log_get_s_mask(
    1d9a:	9801      	ldr	r0, [sp, #4]
    1d9c:	f00e fb89 	bl	104b2 <log_msg_str_get>
    1da0:	4631      	mov	r1, r6
    1da2:	f00e faa9 	bl	102f8 <z_log_get_s_mask>
					if (smask == 0U) {
    1da6:	4607      	mov	r7, r0
    1da8:	b988      	cbnz	r0, 1dce <msg_free+0x62>
    1daa:	e7eb      	b.n	1d84 <msg_free+0x18>
					log_free(buf);
    1dac:	4628      	mov	r0, r5
    1dae:	f7ff ff4f 	bl	1c50 <log_free>
		for (i = 0U; i < nargs; i++) {
    1db2:	3401      	adds	r4, #1
    1db4:	42b4      	cmp	r4, r6
    1db6:	d2e5      	bcs.n	1d84 <msg_free+0x18>
			void *buf = (void *)log_msg_arg_get(msg, i);
    1db8:	4621      	mov	r1, r4
    1dba:	9801      	ldr	r0, [sp, #4]
    1dbc:	f00e fb67 	bl	1048e <log_msg_arg_get>
    1dc0:	4605      	mov	r5, r0
			if (log_is_strdup(buf)) {
    1dc2:	f7ff fcf3 	bl	17ac <log_is_strdup>
    1dc6:	2800      	cmp	r0, #0
    1dc8:	d0f3      	beq.n	1db2 <msg_free+0x46>
				if (smask == 0U) {
    1dca:	2f00      	cmp	r7, #0
    1dcc:	d0e5      	beq.n	1d9a <msg_free+0x2e>
				if (smask & BIT(i)) {
    1dce:	fa27 f304 	lsr.w	r3, r7, r4
    1dd2:	f013 0f01 	tst.w	r3, #1
    1dd6:	d0ec      	beq.n	1db2 <msg_free+0x46>
    1dd8:	e7e8      	b.n	1dac <msg_free+0x40>
		uint32_t smask = 0U;
    1dda:	2700      	movs	r7, #0
		for (i = 0U; i < nargs; i++) {
    1ddc:	463c      	mov	r4, r7
    1dde:	e7e9      	b.n	1db4 <msg_free+0x48>
		cont_free(msg->payload.ext.next);
    1de0:	6958      	ldr	r0, [r3, #20]
    1de2:	f7ff ff73 	bl	1ccc <cont_free>
    1de6:	e7d2      	b.n	1d8e <msg_free+0x22>
    1de8:	20001258 	.word	0x20001258

00001dec <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    1dec:	b40e      	push	{r1, r2, r3}
    1dee:	b500      	push	{lr}
    1df0:	b082      	sub	sp, #8
    1df2:	4601      	mov	r1, r0
    1df4:	ab03      	add	r3, sp, #12
    1df6:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    1dfa:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1dfc:	4803      	ldr	r0, [pc, #12]	; (1e0c <print_formatted+0x20>)
    1dfe:	f7fe fe79 	bl	af4 <cbvprintf>
	va_end(args);

	return length;
}
    1e02:	b002      	add	sp, #8
    1e04:	f85d eb04 	ldr.w	lr, [sp], #4
    1e08:	b003      	add	sp, #12
    1e0a:	4770      	bx	lr
    1e0c:	000108df 	.word	0x000108df

00001e10 <timestamp_print>:
	output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, uint32_t timestamp)
{
    1e10:	b5f0      	push	{r4, r5, r6, r7, lr}
    1e12:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
    1e14:	f011 0f44 	tst.w	r1, #68	; 0x44
    1e18:	d005      	beq.n	1e26 <timestamp_print+0x16>
		length = print_formatted(output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
    1e1a:	4b1a      	ldr	r3, [pc, #104]	; (1e84 <timestamp_print+0x74>)
    1e1c:	681c      	ldr	r4, [r3, #0]
    1e1e:	b934      	cbnz	r4, 1e2e <timestamp_print+0x1e>
			length = print_formatted(output,
						 "[%02u:%02u:%02u.%03u,%03u] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
    1e20:	2000      	movs	r0, #0
	}

	return length;
}
    1e22:	b005      	add	sp, #20
    1e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
    1e26:	4918      	ldr	r1, [pc, #96]	; (1e88 <timestamp_print+0x78>)
    1e28:	f7ff ffe0 	bl	1dec <print_formatted>
    1e2c:	e7f9      	b.n	1e22 <timestamp_print+0x12>
		timestamp /= timestamp_div;
    1e2e:	4b17      	ldr	r3, [pc, #92]	; (1e8c <timestamp_print+0x7c>)
    1e30:	6819      	ldr	r1, [r3, #0]
    1e32:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    1e36:	fbb1 f5f4 	udiv	r5, r1, r4
		hours = seconds / 3600U;
    1e3a:	4a15      	ldr	r2, [pc, #84]	; (1e90 <timestamp_print+0x80>)
    1e3c:	fba2 3205 	umull	r3, r2, r2, r5
    1e40:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    1e42:	f44f 6661 	mov.w	r6, #3600	; 0xe10
    1e46:	fb06 5612 	mls	r6, r6, r2, r5
		mins = seconds / 60U;
    1e4a:	4b12      	ldr	r3, [pc, #72]	; (1e94 <timestamp_print+0x84>)
    1e4c:	fba3 7306 	umull	r7, r3, r3, r6
    1e50:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    1e52:	fb04 1115 	mls	r1, r4, r5, r1
		ms = (remainder * 1000U) / freq;
    1e56:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    1e5a:	fb05 f101 	mul.w	r1, r5, r1
    1e5e:	fbb1 f7f4 	udiv	r7, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1e62:	fb07 1114 	mls	r1, r7, r4, r1
    1e66:	fb05 f101 	mul.w	r1, r5, r1
    1e6a:	fbb1 f4f4 	udiv	r4, r1, r4
			length = print_formatted(output,
    1e6e:	9402      	str	r4, [sp, #8]
    1e70:	9701      	str	r7, [sp, #4]
    1e72:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    1e76:	eba6 0181 	sub.w	r1, r6, r1, lsl #2
    1e7a:	9100      	str	r1, [sp, #0]
    1e7c:	4906      	ldr	r1, [pc, #24]	; (1e98 <timestamp_print+0x88>)
    1e7e:	f7ff ffb5 	bl	1dec <print_formatted>
    1e82:	e7ce      	b.n	1e22 <timestamp_print+0x12>
    1e84:	20001274 	.word	0x20001274
    1e88:	00014500 	.word	0x00014500
    1e8c:	20001278 	.word	0x20001278
    1e90:	91a2b3c5 	.word	0x91a2b3c5
    1e94:	88888889 	.word	0x88888889
    1e98:	0001450c 	.word	0x0001450c

00001e9c <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    1e9c:	b161      	cbz	r1, 1eb8 <color_print+0x1c>
{
    1e9e:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    1ea0:	b12a      	cbz	r2, 1eae <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    1ea2:	4a06      	ldr	r2, [pc, #24]	; (1ebc <color_print+0x20>)
    1ea4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1ea8:	b912      	cbnz	r2, 1eb0 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    1eaa:	4a05      	ldr	r2, [pc, #20]	; (1ec0 <color_print+0x24>)
    1eac:	e000      	b.n	1eb0 <color_print+0x14>
    1eae:	4a04      	ldr	r2, [pc, #16]	; (1ec0 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
    1eb0:	4904      	ldr	r1, [pc, #16]	; (1ec4 <color_print+0x28>)
    1eb2:	f7ff ff9b 	bl	1dec <print_formatted>
	}
}
    1eb6:	bd08      	pop	{r3, pc}
    1eb8:	4770      	bx	lr
    1eba:	bf00      	nop
    1ebc:	0001457c 	.word	0x0001457c
    1ec0:	00014528 	.word	0x00014528
    1ec4:	00015294 	.word	0x00015294

00001ec8 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1ec8:	f011 0f10 	tst.w	r1, #16
    1ecc:	d10b      	bne.n	1ee6 <newline_print+0x1e>
{
    1ece:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1ed0:	f011 0f20 	tst.w	r1, #32
    1ed4:	d003      	beq.n	1ede <newline_print+0x16>
		print_formatted(ctx, "\n");
    1ed6:	4904      	ldr	r1, [pc, #16]	; (1ee8 <newline_print+0x20>)
    1ed8:	f7ff ff88 	bl	1dec <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
    1edc:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    1ede:	4903      	ldr	r1, [pc, #12]	; (1eec <newline_print+0x24>)
    1ee0:	f7ff ff84 	bl	1dec <print_formatted>
    1ee4:	e7fa      	b.n	1edc <newline_print+0x14>
    1ee6:	4770      	bx	lr
    1ee8:	00014ff8 	.word	0x00014ff8
    1eec:	00015bec 	.word	0x00015bec

00001ef0 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    1ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1ef4:	4605      	mov	r5, r0
    1ef6:	460f      	mov	r7, r1
    1ef8:	4616      	mov	r6, r2
    1efa:	4698      	mov	r8, r3
	newline_print(output, flags);
    1efc:	9906      	ldr	r1, [sp, #24]
    1efe:	f7ff ffe3 	bl	1ec8 <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
    1f02:	2400      	movs	r4, #0
    1f04:	4544      	cmp	r4, r8
    1f06:	da05      	bge.n	1f14 <hexdump_line_print+0x24>
		print_formatted(output, " ");
    1f08:	4923      	ldr	r1, [pc, #140]	; (1f98 <hexdump_line_print+0xa8>)
    1f0a:	4628      	mov	r0, r5
    1f0c:	f7ff ff6e 	bl	1dec <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    1f10:	3401      	adds	r4, #1
    1f12:	e7f7      	b.n	1f04 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1f14:	2400      	movs	r4, #0
    1f16:	e009      	b.n	1f2c <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    1f18:	491f      	ldr	r1, [pc, #124]	; (1f98 <hexdump_line_print+0xa8>)
    1f1a:	4628      	mov	r0, r5
    1f1c:	f7ff ff66 	bl	1dec <print_formatted>
    1f20:	e00b      	b.n	1f3a <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    1f22:	491e      	ldr	r1, [pc, #120]	; (1f9c <hexdump_line_print+0xac>)
    1f24:	4628      	mov	r0, r5
    1f26:	f7ff ff61 	bl	1dec <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1f2a:	3401      	adds	r4, #1
    1f2c:	2c0f      	cmp	r4, #15
    1f2e:	dc0c      	bgt.n	1f4a <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    1f30:	2c00      	cmp	r4, #0
    1f32:	dd02      	ble.n	1f3a <hexdump_line_print+0x4a>
    1f34:	f014 0f07 	tst.w	r4, #7
    1f38:	d0ee      	beq.n	1f18 <hexdump_line_print+0x28>
		if (i < length) {
    1f3a:	42b4      	cmp	r4, r6
    1f3c:	d2f1      	bcs.n	1f22 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
    1f3e:	5d3a      	ldrb	r2, [r7, r4]
    1f40:	4917      	ldr	r1, [pc, #92]	; (1fa0 <hexdump_line_print+0xb0>)
    1f42:	4628      	mov	r0, r5
    1f44:	f7ff ff52 	bl	1dec <print_formatted>
    1f48:	e7ef      	b.n	1f2a <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
    1f4a:	4916      	ldr	r1, [pc, #88]	; (1fa4 <hexdump_line_print+0xb4>)
    1f4c:	4628      	mov	r0, r5
    1f4e:	f7ff ff4d 	bl	1dec <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1f52:	2400      	movs	r4, #0
    1f54:	e009      	b.n	1f6a <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    1f56:	4910      	ldr	r1, [pc, #64]	; (1f98 <hexdump_line_print+0xa8>)
    1f58:	4628      	mov	r0, r5
    1f5a:	f7ff ff47 	bl	1dec <print_formatted>
    1f5e:	e00b      	b.n	1f78 <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
    1f60:	4911      	ldr	r1, [pc, #68]	; (1fa8 <hexdump_line_print+0xb8>)
    1f62:	4628      	mov	r0, r5
    1f64:	f7ff ff42 	bl	1dec <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1f68:	3401      	adds	r4, #1
    1f6a:	2c0f      	cmp	r4, #15
    1f6c:	dc12      	bgt.n	1f94 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
    1f6e:	2c00      	cmp	r4, #0
    1f70:	dd02      	ble.n	1f78 <hexdump_line_print+0x88>
    1f72:	f014 0f07 	tst.w	r4, #7
    1f76:	d0ee      	beq.n	1f56 <hexdump_line_print+0x66>
		if (i < length) {
    1f78:	42b4      	cmp	r4, r6
    1f7a:	d206      	bcs.n	1f8a <hexdump_line_print+0x9a>
			char c = (char)data[i];
    1f7c:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    1f7e:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
    1f82:	2b5e      	cmp	r3, #94	; 0x5e
    1f84:	d9ec      	bls.n	1f60 <hexdump_line_print+0x70>
    1f86:	222e      	movs	r2, #46	; 0x2e
    1f88:	e7ea      	b.n	1f60 <hexdump_line_print+0x70>
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    1f8a:	4903      	ldr	r1, [pc, #12]	; (1f98 <hexdump_line_print+0xa8>)
    1f8c:	4628      	mov	r0, r5
    1f8e:	f7ff ff2d 	bl	1dec <print_formatted>
    1f92:	e7e9      	b.n	1f68 <hexdump_line_print+0x78>
		}
	}
}
    1f94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1f98:	00014554 	.word	0x00014554
    1f9c:	00014538 	.word	0x00014538
    1fa0:	00014530 	.word	0x00014530
    1fa4:	0001453c 	.word	0x0001453c
    1fa8:	00014540 	.word	0x00014540

00001fac <ids_print>:
{
    1fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1fb0:	4680      	mov	r8, r0
    1fb2:	4616      	mov	r6, r2
    1fb4:	461d      	mov	r5, r3
    1fb6:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
    1fba:	b959      	cbnz	r1, 1fd4 <ids_print+0x28>
	int total = 0;
    1fbc:	2400      	movs	r4, #0
	if (source_id >= 0) {
    1fbe:	2f00      	cmp	r7, #0
    1fc0:	db1c      	blt.n	1ffc <ids_print+0x50>
		total += print_formatted(output,
    1fc2:	b186      	cbz	r6, 1fe6 <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    1fc4:	2301      	movs	r3, #1
    1fc6:	9a07      	ldr	r2, [sp, #28]
    1fc8:	4093      	lsls	r3, r2
				(func_on &&
    1fca:	f013 0f10 	tst.w	r3, #16
    1fce:	d118      	bne.n	2002 <ids_print+0x56>
		total += print_formatted(output,
    1fd0:	4e0d      	ldr	r6, [pc, #52]	; (2008 <ids_print+0x5c>)
    1fd2:	e009      	b.n	1fe8 <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
    1fd4:	4b0d      	ldr	r3, [pc, #52]	; (200c <ids_print+0x60>)
    1fd6:	9a07      	ldr	r2, [sp, #28]
    1fd8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1fdc:	490c      	ldr	r1, [pc, #48]	; (2010 <ids_print+0x64>)
    1fde:	f7ff ff05 	bl	1dec <print_formatted>
    1fe2:	4604      	mov	r4, r0
    1fe4:	e7eb      	b.n	1fbe <ids_print+0x12>
		total += print_formatted(output,
    1fe6:	4e08      	ldr	r6, [pc, #32]	; (2008 <ids_print+0x5c>)
    1fe8:	4639      	mov	r1, r7
    1fea:	4628      	mov	r0, r5
    1fec:	f7ff fe4c 	bl	1c88 <log_source_name_get>
    1ff0:	4602      	mov	r2, r0
    1ff2:	4631      	mov	r1, r6
    1ff4:	4640      	mov	r0, r8
    1ff6:	f7ff fef9 	bl	1dec <print_formatted>
    1ffa:	4404      	add	r4, r0
}
    1ffc:	4620      	mov	r0, r4
    1ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
    2002:	4e04      	ldr	r6, [pc, #16]	; (2014 <ids_print+0x68>)
    2004:	e7f0      	b.n	1fe8 <ids_print+0x3c>
    2006:	bf00      	nop
    2008:	00014544 	.word	0x00014544
    200c:	000145b8 	.word	0x000145b8
    2010:	00014550 	.word	0x00014550
    2014:	0001454c 	.word	0x0001454c

00002018 <hexdump_print>:

static void hexdump_print(struct log_msg *msg,
			  const struct log_output *output,
			  int prefix_offset, uint32_t flags)
{
    2018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    201c:	b089      	sub	sp, #36	; 0x24
    201e:	4607      	mov	r7, r0
    2020:	460e      	mov	r6, r1
    2022:	4691      	mov	r9, r2
    2024:	4698      	mov	r8, r3
	uint32_t offset = 0U;
	uint8_t buf[HEXDUMP_BYTES_IN_LINE];
	size_t length;

	print_formatted(output, "%s", log_msg_str_get(msg));
    2026:	f00e fa44 	bl	104b2 <log_msg_str_get>
    202a:	4602      	mov	r2, r0
    202c:	490e      	ldr	r1, [pc, #56]	; (2068 <hexdump_print+0x50>)
    202e:	4630      	mov	r0, r6
    2030:	f7ff fedc 	bl	1dec <print_formatted>
	uint32_t offset = 0U;
    2034:	2400      	movs	r4, #0

	do {
		length = sizeof(buf);
    2036:	2510      	movs	r5, #16
    2038:	9503      	str	r5, [sp, #12]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    203a:	4623      	mov	r3, r4
    203c:	aa03      	add	r2, sp, #12
    203e:	eb0d 0105 	add.w	r1, sp, r5
    2042:	4638      	mov	r0, r7
    2044:	f00e fa8f 	bl	10566 <log_msg_hexdump_data_get>

		if (length) {
    2048:	9a03      	ldr	r2, [sp, #12]
    204a:	b152      	cbz	r2, 2062 <hexdump_print+0x4a>
			hexdump_line_print(output, buf, length,
    204c:	f8cd 8000 	str.w	r8, [sp]
    2050:	464b      	mov	r3, r9
    2052:	eb0d 0105 	add.w	r1, sp, r5
    2056:	4630      	mov	r0, r6
    2058:	f7ff ff4a 	bl	1ef0 <hexdump_line_print>
					   prefix_offset, flags);
			offset += length;
    205c:	9d03      	ldr	r5, [sp, #12]
    205e:	442c      	add	r4, r5
		length = sizeof(buf);
    2060:	e7e9      	b.n	2036 <hexdump_print+0x1e>
		} else {
			break;
		}
	} while (true);
}
    2062:	b009      	add	sp, #36	; 0x24
    2064:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2068:	00015294 	.word	0x00015294

0000206c <raw_string_print>:
}


static void raw_string_print(struct log_msg *msg,
			     const struct log_output *output)
{
    206c:	b5f0      	push	{r4, r5, r6, r7, lr}
    206e:	b083      	sub	sp, #12
    2070:	4606      	mov	r6, r0
    2072:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(output->size);

	size_t offset = 0;
	size_t length;
	bool eol = false;
    2074:	2700      	movs	r7, #0
	size_t offset = 0;
    2076:	463d      	mov	r5, r7
    2078:	e00d      	b.n	2096 <raw_string_print+0x2a>
		/* Sting is stored in a hexdump message. */
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
		output->control_block->offset = length;

		if (length != 0) {
			eol = (output->buf[length - 1] == '\n');
    207a:	68a2      	ldr	r2, [r4, #8]
    207c:	4413      	add	r3, r2
    207e:	f813 7c01 	ldrb.w	r7, [r3, #-1]
    2082:	2f0a      	cmp	r7, #10
    2084:	bf14      	ite	ne
    2086:	2700      	movne	r7, #0
    2088:	2701      	moveq	r7, #1
		}

		log_output_flush(output);
    208a:	4620      	mov	r0, r4
    208c:	f00e fc1a 	bl	108c4 <log_output_flush>
		offset += length;
    2090:	9b01      	ldr	r3, [sp, #4]
    2092:	441d      	add	r5, r3
	} while (length > 0);
    2094:	b173      	cbz	r3, 20b4 <raw_string_print+0x48>
		length = output->size;
    2096:	68e3      	ldr	r3, [r4, #12]
    2098:	9301      	str	r3, [sp, #4]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
    209a:	462b      	mov	r3, r5
    209c:	aa01      	add	r2, sp, #4
    209e:	68a1      	ldr	r1, [r4, #8]
    20a0:	4630      	mov	r0, r6
    20a2:	f00e fa60 	bl	10566 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
    20a6:	6863      	ldr	r3, [r4, #4]
    20a8:	9a01      	ldr	r2, [sp, #4]
    20aa:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    20ac:	9b01      	ldr	r3, [sp, #4]
    20ae:	2b00      	cmp	r3, #0
    20b0:	d0eb      	beq.n	208a <raw_string_print+0x1e>
    20b2:	e7e2      	b.n	207a <raw_string_print+0xe>

	if (eol) {
    20b4:	b90f      	cbnz	r7, 20ba <raw_string_print+0x4e>
		print_formatted(output, "\r");
	}
}
    20b6:	b003      	add	sp, #12
    20b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(output, "\r");
    20ba:	4902      	ldr	r1, [pc, #8]	; (20c4 <raw_string_print+0x58>)
    20bc:	4620      	mov	r0, r4
    20be:	f7ff fe95 	bl	1dec <print_formatted>
}
    20c2:	e7f8      	b.n	20b6 <raw_string_print+0x4a>
    20c4:	00014558 	.word	0x00014558

000020c8 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    20c8:	b570      	push	{r4, r5, r6, lr}
    20ca:	b082      	sub	sp, #8
    20cc:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
    20ce:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    20d0:	f242 730f 	movw	r3, #9999	; 0x270f
    20d4:	428b      	cmp	r3, r1
    20d6:	bf28      	it	cs
    20d8:	460b      	movcs	r3, r1
    20da:	4a0e      	ldr	r2, [pc, #56]	; (2114 <log_output_dropped_process+0x4c>)
    20dc:	2105      	movs	r1, #5
    20de:	4668      	mov	r0, sp
    20e0:	f00d fa18 	bl	f514 <snprintk>
    20e4:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
    20e6:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    20e8:	685b      	ldr	r3, [r3, #4]
    20ea:	220b      	movs	r2, #11
    20ec:	490a      	ldr	r1, [pc, #40]	; (2118 <log_output_dropped_process+0x50>)
    20ee:	4628      	mov	r0, r5
    20f0:	f00e fa41 	bl	10576 <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
    20f4:	6863      	ldr	r3, [r4, #4]
    20f6:	685b      	ldr	r3, [r3, #4]
    20f8:	4632      	mov	r2, r6
    20fa:	4669      	mov	r1, sp
    20fc:	4628      	mov	r0, r5
    20fe:	f00e fa3a 	bl	10576 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
    2102:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    2104:	685b      	ldr	r3, [r3, #4]
    2106:	221b      	movs	r2, #27
    2108:	4904      	ldr	r1, [pc, #16]	; (211c <log_output_dropped_process+0x54>)
    210a:	4628      	mov	r0, r5
    210c:	f00e fa33 	bl	10576 <buffer_write>
}
    2110:	b002      	add	sp, #8
    2112:	bd70      	pop	{r4, r5, r6, pc}
    2114:	000154e4 	.word	0x000154e4
    2118:	000145ac 	.word	0x000145ac
    211c:	00014590 	.word	0x00014590

00002120 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    2120:	4b07      	ldr	r3, [pc, #28]	; (2140 <log_output_timestamp_freq_set+0x20>)
    2122:	2201      	movs	r2, #1
    2124:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    2126:	4b07      	ldr	r3, [pc, #28]	; (2144 <log_output_timestamp_freq_set+0x24>)
    2128:	4298      	cmp	r0, r3
    212a:	d905      	bls.n	2138 <log_output_timestamp_freq_set+0x18>
		frequency /= 2U;
    212c:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    212e:	4a04      	ldr	r2, [pc, #16]	; (2140 <log_output_timestamp_freq_set+0x20>)
    2130:	6813      	ldr	r3, [r2, #0]
    2132:	005b      	lsls	r3, r3, #1
    2134:	6013      	str	r3, [r2, #0]
    2136:	e7f6      	b.n	2126 <log_output_timestamp_freq_set+0x6>
	}

	freq = frequency;
    2138:	4b03      	ldr	r3, [pc, #12]	; (2148 <log_output_timestamp_freq_set+0x28>)
    213a:	6018      	str	r0, [r3, #0]
}
    213c:	4770      	bx	lr
    213e:	bf00      	nop
    2140:	20001278 	.word	0x20001278
    2144:	000f4240 	.word	0x000f4240
    2148:	20001274 	.word	0x20001274

0000214c <char_out>:
static const char LOG_HEX_SEP[10] = "##ZLOGV1##";

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    214c:	b570      	push	{r4, r5, r6, lr}
    214e:	4606      	mov	r6, r0
    2150:	460d      	mov	r5, r1
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
    2152:	2400      	movs	r4, #0
    2154:	42ac      	cmp	r4, r5
    2156:	d207      	bcs.n	2168 <char_out+0x1c>
		/* lower 8-bit */
		x = data[i] & 0x0FU;
		(void)hex2char(x, &c);
		uart_poll_out(uart_dev, c);
#else
		uart_poll_out(uart_dev, data[i]);
    2158:	4b04      	ldr	r3, [pc, #16]	; (216c <char_out+0x20>)
    215a:	6818      	ldr	r0, [r3, #0]
    215c:	5d31      	ldrb	r1, [r6, r4]
	const struct uart_driver_api *api =
    215e:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    2160:	685b      	ldr	r3, [r3, #4]
    2162:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
    2164:	3401      	adds	r4, #1
    2166:	e7f5      	b.n	2154 <char_out+0x8>
#endif
	}

	return length;
}
    2168:	4628      	mov	r0, r5
    216a:	bd70      	pop	{r4, r5, r6, pc}
    216c:	20001290 	.word	0x20001290

00002170 <log_backend_uart_init>:
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    2170:	4b01      	ldr	r3, [pc, #4]	; (2178 <log_backend_uart_init+0x8>)
    2172:	4a02      	ldr	r2, [pc, #8]	; (217c <log_backend_uart_init+0xc>)
    2174:	601a      	str	r2, [r3, #0]
		 */
		for (int i = 0; i < sizeof(LOG_HEX_SEP); i++) {
			uart_poll_out(uart_dev, LOG_HEX_SEP[i]);
		}
	}
}
    2176:	4770      	bx	lr
    2178:	20001290 	.word	0x20001290
    217c:	00014120 	.word	0x00014120

00002180 <panic>:

static void panic(struct log_backend const *const backend)
{
    2180:	b508      	push	{r3, lr}
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    2182:	4802      	ldr	r0, [pc, #8]	; (218c <panic+0xc>)
    2184:	f00e fb9e 	bl	108c4 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
    2188:	bd08      	pop	{r3, pc}
    218a:	bf00      	nop
    218c:	000145fc 	.word	0x000145fc

00002190 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
    2190:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    2192:	4802      	ldr	r0, [pc, #8]	; (219c <dropped+0xc>)
    2194:	f7ff ff98 	bl	20c8 <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
    2198:	bd08      	pop	{r3, pc}
    219a:	bf00      	nop
    219c:	000145fc 	.word	0x000145fc

000021a0 <put>:
{
    21a0:	b510      	push	{r4, lr}
    21a2:	460c      	mov	r4, r1
	log_msg_get(msg);
    21a4:	4608      	mov	r0, r1
    21a6:	f00e f962 	bl	1046e <log_msg_get>
	log_output_msg_process(output, msg, flags);
    21aa:	220f      	movs	r2, #15
    21ac:	4621      	mov	r1, r4
    21ae:	4803      	ldr	r0, [pc, #12]	; (21bc <put+0x1c>)
    21b0:	f00e fbb1 	bl	10916 <log_output_msg_process>
	log_msg_put(msg);
    21b4:	4620      	mov	r0, r4
    21b6:	f00e f97e 	bl	104b6 <log_msg_put>
}
    21ba:	bd10      	pop	{r4, pc}
    21bc:	000145fc 	.word	0x000145fc

000021c0 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    21c0:	4b01      	ldr	r3, [pc, #4]	; (21c8 <log_backend_rtt_init+0x8>)
    21c2:	2201      	movs	r2, #1
    21c4:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    21c6:	4770      	bx	lr
    21c8:	20002b4c 	.word	0x20002b4c

000021cc <on_failed_write>:
{
    21cc:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
    21ce:	b918      	cbnz	r0, 21d8 <on_failed_write+0xc>
		host_present = false;
    21d0:	4b08      	ldr	r3, [pc, #32]	; (21f4 <on_failed_write+0x28>)
    21d2:	2200      	movs	r2, #0
    21d4:	701a      	strb	r2, [r3, #0]
}
    21d6:	bd08      	pop	{r3, pc}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    21d8:	4b07      	ldr	r3, [pc, #28]	; (21f8 <on_failed_write+0x2c>)
    21da:	781b      	ldrb	r3, [r3, #0]
	} else if (is_sync_mode()) {
    21dc:	b123      	cbz	r3, 21e8 <on_failed_write+0x1c>
	z_impl_k_busy_wait(usec_to_wait);
    21de:	f241 3088 	movw	r0, #5000	; 0x1388
    21e2:	f011 feaa 	bl	13f3a <z_impl_k_busy_wait>
}
    21e6:	e7f6      	b.n	21d6 <on_failed_write+0xa>
	return z_impl_k_sleep(timeout);
    21e8:	20a4      	movs	r0, #164	; 0xa4
    21ea:	2100      	movs	r1, #0
    21ec:	f00c fc3c 	bl	ea68 <z_impl_k_sleep>
}
    21f0:	e7f1      	b.n	21d6 <on_failed_write+0xa>
    21f2:	bf00      	nop
    21f4:	20002b4c 	.word	0x20002b4c
    21f8:	20002b4d 	.word	0x20002b4d

000021fc <on_write>:
{
    21fc:	b538      	push	{r3, r4, r5, lr}
    21fe:	4604      	mov	r4, r0
	host_present = true;
    2200:	4b0a      	ldr	r3, [pc, #40]	; (222c <on_write+0x30>)
    2202:	2201      	movs	r2, #1
    2204:	701a      	strb	r2, [r3, #0]
	return panic_mode;
    2206:	4b0a      	ldr	r3, [pc, #40]	; (2230 <on_write+0x34>)
    2208:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
    220a:	b903      	cbnz	r3, 220e <on_write+0x12>
}
    220c:	bd38      	pop	{r3, r4, r5, pc}
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    220e:	2000      	movs	r0, #0
    2210:	f00b fa56 	bl	d6c0 <SEGGER_RTT_HasDataUp>
    2214:	2800      	cmp	r0, #0
    2216:	d0f9      	beq.n	220c <on_write+0x10>
    2218:	4b04      	ldr	r3, [pc, #16]	; (222c <on_write+0x30>)
    221a:	781b      	ldrb	r3, [r3, #0]
    221c:	2b00      	cmp	r3, #0
    221e:	d0f5      	beq.n	220c <on_write+0x10>
			on_failed_write(retry_cnt--);
    2220:	1e65      	subs	r5, r4, #1
    2222:	4620      	mov	r0, r4
    2224:	f7ff ffd2 	bl	21cc <on_failed_write>
    2228:	462c      	mov	r4, r5
    222a:	e7f0      	b.n	220e <on_write+0x12>
    222c:	20002b4c 	.word	0x20002b4c
    2230:	20002b4d 	.word	0x20002b4d

00002234 <data_out_block_mode>:
{
    2234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2238:	4606      	mov	r6, r0
    223a:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    223c:	2704      	movs	r7, #4
    223e:	e00d      	b.n	225c <data_out_block_mode+0x28>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    2240:	462a      	mov	r2, r5
    2242:	4631      	mov	r1, r6
    2244:	2000      	movs	r0, #0
    2246:	f00b f9d7 	bl	d5f8 <SEGGER_RTT_WriteSkipNoLock>
    224a:	4604      	mov	r4, r0
    224c:	e01c      	b.n	2288 <data_out_block_mode+0x54>
			on_write(retry_cnt);
    224e:	4638      	mov	r0, r7
    2250:	f7ff ffd4 	bl	21fc <on_write>
	} while ((ret == 0) && host_present);
    2254:	bb1c      	cbnz	r4, 229e <data_out_block_mode+0x6a>
    2256:	4b16      	ldr	r3, [pc, #88]	; (22b0 <data_out_block_mode+0x7c>)
    2258:	781b      	ldrb	r3, [r3, #0]
    225a:	b303      	cbz	r3, 229e <data_out_block_mode+0x6a>
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    225c:	4b15      	ldr	r3, [pc, #84]	; (22b4 <data_out_block_mode+0x80>)
    225e:	781b      	ldrb	r3, [r3, #0]
		if (!is_sync_mode()) {
    2260:	2b00      	cmp	r3, #0
    2262:	d1ed      	bne.n	2240 <data_out_block_mode+0xc>
	return z_impl_k_mutex_lock(mutex, timeout);
    2264:	f8df 8050 	ldr.w	r8, [pc, #80]	; 22b8 <data_out_block_mode+0x84>
    2268:	f04f 32ff 	mov.w	r2, #4294967295
    226c:	f04f 33ff 	mov.w	r3, #4294967295
    2270:	4640      	mov	r0, r8
    2272:	f00b fdb1 	bl	ddd8 <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    2276:	462a      	mov	r2, r5
    2278:	4631      	mov	r1, r6
    227a:	2000      	movs	r0, #0
    227c:	f00b f9bc 	bl	d5f8 <SEGGER_RTT_WriteSkipNoLock>
    2280:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    2282:	4640      	mov	r0, r8
    2284:	f00b fe32 	bl	deec <z_impl_k_mutex_unlock>
		if (ret) {
    2288:	2c00      	cmp	r4, #0
    228a:	d1e0      	bne.n	224e <data_out_block_mode+0x1a>
		} else if (host_present) {
    228c:	4b08      	ldr	r3, [pc, #32]	; (22b0 <data_out_block_mode+0x7c>)
    228e:	781b      	ldrb	r3, [r3, #0]
    2290:	2b00      	cmp	r3, #0
    2292:	d0df      	beq.n	2254 <data_out_block_mode+0x20>
			retry_cnt--;
    2294:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
    2296:	4638      	mov	r0, r7
    2298:	f7ff ff98 	bl	21cc <on_failed_write>
    229c:	e7da      	b.n	2254 <data_out_block_mode+0x20>
	return ((ret == 0) && host_present) ? 0 : length;
    229e:	b914      	cbnz	r4, 22a6 <data_out_block_mode+0x72>
    22a0:	4b03      	ldr	r3, [pc, #12]	; (22b0 <data_out_block_mode+0x7c>)
    22a2:	781b      	ldrb	r3, [r3, #0]
    22a4:	b903      	cbnz	r3, 22a8 <data_out_block_mode+0x74>
    22a6:	462c      	mov	r4, r5
}
    22a8:	4620      	mov	r0, r4
    22aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    22ae:	bf00      	nop
    22b0:	20002b4c 	.word	0x20002b4c
    22b4:	20002b4d 	.word	0x20002b4d
    22b8:	200003a0 	.word	0x200003a0

000022bc <panic>:

static void panic(struct log_backend const *const backend)
{
    22bc:	b508      	push	{r3, lr}
	panic_mode = true;
    22be:	4b03      	ldr	r3, [pc, #12]	; (22cc <panic+0x10>)
    22c0:	2201      	movs	r2, #1
    22c2:	701a      	strb	r2, [r3, #0]
	log_output_flush(output);
    22c4:	4802      	ldr	r0, [pc, #8]	; (22d0 <panic+0x14>)
    22c6:	f00e fafd 	bl	108c4 <log_output_flush>
	log_backend_std_panic(&log_output_rtt);
}
    22ca:	bd08      	pop	{r3, pc}
    22cc:	20002b4d 	.word	0x20002b4d
    22d0:	00014638 	.word	0x00014638

000022d4 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
    22d4:	b508      	push	{r3, lr}
	log_output_dropped_process(output, cnt);
    22d6:	4802      	ldr	r0, [pc, #8]	; (22e0 <dropped+0xc>)
    22d8:	f7ff fef6 	bl	20c8 <log_output_dropped_process>
	ARG_UNUSED(backend);

	log_backend_std_dropped(&log_output_rtt, cnt);
}
    22dc:	bd08      	pop	{r3, pc}
    22de:	bf00      	nop
    22e0:	00014638 	.word	0x00014638

000022e4 <put>:
{
    22e4:	b510      	push	{r4, lr}
    22e6:	460c      	mov	r4, r1
	log_msg_get(msg);
    22e8:	4608      	mov	r0, r1
    22ea:	f00e f8c0 	bl	1046e <log_msg_get>
	log_output_msg_process(output, msg, flags);
    22ee:	220f      	movs	r2, #15
    22f0:	4621      	mov	r1, r4
    22f2:	4803      	ldr	r0, [pc, #12]	; (2300 <put+0x1c>)
    22f4:	f00e fb0f 	bl	10916 <log_output_msg_process>
	log_msg_put(msg);
    22f8:	4620      	mov	r0, r4
    22fa:	f00e f8dc 	bl	104b6 <log_msg_put>
}
    22fe:	bd10      	pop	{r4, pc}
    2300:	00014638 	.word	0x00014638

00002304 <usb_set_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
}

static bool usb_set_alt_setting(uint8_t iface, uint8_t alt_setting)
{
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    2304:	2807      	cmp	r0, #7
    2306:	d901      	bls.n	230c <usb_set_alt_setting+0x8>
		usb_dev.alt_setting[iface] = alt_setting;
		return true;
	}

	return false;
    2308:	2000      	movs	r0, #0
}
    230a:	4770      	bx	lr
		usb_dev.alt_setting[iface] = alt_setting;
    230c:	4b02      	ldr	r3, [pc, #8]	; (2318 <usb_set_alt_setting+0x14>)
    230e:	4418      	add	r0, r3
    2310:	f880 10bb 	strb.w	r1, [r0, #187]	; 0xbb
		return true;
    2314:	2001      	movs	r0, #1
    2316:	4770      	bx	lr
    2318:	200012b8 	.word	0x200012b8

0000231c <usb_get_alt_setting>:

static uint8_t usb_get_alt_setting(uint8_t iface)
{
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    231c:	2807      	cmp	r0, #7
    231e:	d901      	bls.n	2324 <usb_get_alt_setting+0x8>
		return usb_dev.alt_setting[iface];
	}

	return 0;
    2320:	2000      	movs	r0, #0
}
    2322:	4770      	bx	lr
		return usb_dev.alt_setting[iface];
    2324:	4b02      	ldr	r3, [pc, #8]	; (2330 <usb_get_alt_setting+0x14>)
    2326:	4418      	add	r0, r3
    2328:	f890 00bb 	ldrb.w	r0, [r0, #187]	; 0xbb
    232c:	4770      	bx	lr
    232e:	bf00      	nop
    2330:	200012b8 	.word	0x200012b8

00002334 <usb_handle_request>:
 *
 * @return true if the request was handles successfully
 */
static bool usb_handle_request(struct usb_setup_packet *setup,
			       int32_t *len, uint8_t **data)
{
    2334:	b510      	push	{r4, lr}
	uint32_t type = setup->RequestType.type;
    2336:	7803      	ldrb	r3, [r0, #0]
    2338:	f3c3 1341 	ubfx	r3, r3, #5, #2
	if (type >= MAX_NUM_REQ_HANDLERS) {
		LOG_DBG("Error Incorrect iType %d", type);
		return false;
	}

	handler = usb_dev.req_handlers[type];
    233c:	330a      	adds	r3, #10
    233e:	4c06      	ldr	r4, [pc, #24]	; (2358 <usb_handle_request+0x24>)
    2340:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
	if (handler == NULL) {
    2344:	b123      	cbz	r3, 2350 <usb_handle_request+0x1c>
		LOG_DBG("No handler for reqtype %d", type);
		return false;
	}

	if ((*handler)(setup, len, data) < 0) {
    2346:	4798      	blx	r3
    2348:	2800      	cmp	r0, #0
    234a:	db03      	blt.n	2354 <usb_handle_request+0x20>
		LOG_DBG("Handler Error %d", type);
		usb_print_setup(setup);
		return false;
	}

	return true;
    234c:	2001      	movs	r0, #1
}
    234e:	bd10      	pop	{r4, pc}
		return false;
    2350:	2000      	movs	r0, #0
    2352:	e7fc      	b.n	234e <usb_handle_request+0x1a>
		return false;
    2354:	2000      	movs	r0, #0
    2356:	e7fa      	b.n	234e <usb_handle_request+0x1a>
    2358:	200012b8 	.word	0x200012b8

0000235c <usb_register_request_handler>:
 * @return N/A
 */
static void usb_register_request_handler(int32_t type,
					 usb_request_handler handler)
{
	usb_dev.req_handlers[type] = handler;
    235c:	300a      	adds	r0, #10
    235e:	4b02      	ldr	r3, [pc, #8]	; (2368 <usb_register_request_handler+0xc>)
    2360:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    2364:	4770      	bx	lr
    2366:	bf00      	nop
    2368:	200012b8 	.word	0x200012b8

0000236c <usb_register_descriptors>:
 *
 * @param [in] usb_descriptors The descriptor byte array
 */
static void usb_register_descriptors(const uint8_t *usb_descriptors)
{
	usb_dev.descriptors = usb_descriptors;
    236c:	4b01      	ldr	r3, [pc, #4]	; (2374 <usb_register_descriptors+0x8>)
    236e:	6258      	str	r0, [r3, #36]	; 0x24
}
    2370:	4770      	bx	lr
    2372:	bf00      	nop
    2374:	200012b8 	.word	0x200012b8

00002378 <usb_get_descriptor>:
 *
 * @return true if the descriptor was found, false otherwise
 */
static bool usb_get_descriptor(struct usb_setup_packet *setup,
			       int32_t *len, uint8_t **data)
{
    2378:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t *p = NULL;
	uint32_t cur_index = 0U;
	bool found = false;

	LOG_DBG("Get Descriptor request");
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    237a:	8847      	ldrh	r7, [r0, #2]
    237c:	0a3d      	lsrs	r5, r7, #8

	/*
	 * Invalid types of descriptors,
	 * see USB Spec. Revision 2.0, 9.4.3 Get Descriptor
	 */
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    237e:	1f2b      	subs	r3, r5, #4
    2380:	b2db      	uxtb	r3, r3
    2382:	2b01      	cmp	r3, #1
    2384:	d91e      	bls.n	23c4 <usb_get_descriptor+0x4c>
    2386:	b2ff      	uxtb	r7, r7
    2388:	2d07      	cmp	r5, #7
    238a:	d81e      	bhi.n	23ca <usb_get_descriptor+0x52>
	    (type > USB_DESC_OTHER_SPEED)) {
		return false;
	}

	p = (uint8_t *)usb_dev.descriptors;
    238c:	4b10      	ldr	r3, [pc, #64]	; (23d0 <usb_get_descriptor+0x58>)
    238e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	cur_index = 0U;
    2390:	2600      	movs	r6, #0

	while (p[DESC_bLength] != 0U) {
    2392:	e000      	b.n	2396 <usb_get_descriptor+0x1e>
				break;
			}
			cur_index++;
		}
		/* skip to next descriptor */
		p += p[DESC_bLength];
    2394:	4403      	add	r3, r0
	while (p[DESC_bLength] != 0U) {
    2396:	7818      	ldrb	r0, [r3, #0]
    2398:	b138      	cbz	r0, 23aa <usb_get_descriptor+0x32>
		if (p[DESC_bDescriptorType] == type) {
    239a:	785c      	ldrb	r4, [r3, #1]
    239c:	42ac      	cmp	r4, r5
    239e:	d1f9      	bne.n	2394 <usb_get_descriptor+0x1c>
			if (cur_index == index) {
    23a0:	42b7      	cmp	r7, r6
    23a2:	d001      	beq.n	23a8 <usb_get_descriptor+0x30>
			cur_index++;
    23a4:	3601      	adds	r6, #1
    23a6:	e7f5      	b.n	2394 <usb_get_descriptor+0x1c>
				found = true;
    23a8:	2001      	movs	r0, #1
	}

	if (found) {
    23aa:	b160      	cbz	r0, 23c6 <usb_get_descriptor+0x4e>
		/* set data pointer */
		*data = p;
    23ac:	6013      	str	r3, [r2, #0]
		/* get length from structure */
		if (type == USB_DESC_CONFIGURATION) {
    23ae:	2d02      	cmp	r5, #2
    23b0:	d002      	beq.n	23b8 <usb_get_descriptor+0x40>
			 */
			*len = (p[CONF_DESC_wTotalLength]) |
			    (p[CONF_DESC_wTotalLength + 1] << 8);
		} else {
			/* normally length is at offset 0 */
			*len = p[DESC_bLength];
    23b2:	781b      	ldrb	r3, [r3, #0]
    23b4:	600b      	str	r3, [r1, #0]
    23b6:	e006      	b.n	23c6 <usb_get_descriptor+0x4e>
			*len = (p[CONF_DESC_wTotalLength]) |
    23b8:	789a      	ldrb	r2, [r3, #2]
			    (p[CONF_DESC_wTotalLength + 1] << 8);
    23ba:	78db      	ldrb	r3, [r3, #3]
			*len = (p[CONF_DESC_wTotalLength]) |
    23bc:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    23c0:	600b      	str	r3, [r1, #0]
    23c2:	e000      	b.n	23c6 <usb_get_descriptor+0x4e>
		return false;
    23c4:	2000      	movs	r0, #0
	} else {
		/* nothing found */
		LOG_DBG("Desc %x not found!", setup->wValue);
	}
	return found;
}
    23c6:	bcf0      	pop	{r4, r5, r6, r7}
    23c8:	4770      	bx	lr
		return false;
    23ca:	2000      	movs	r0, #0
    23cc:	e7fb      	b.n	23c6 <usb_get_descriptor+0x4e>
    23ce:	bf00      	nop
    23d0:	200012b8 	.word	0x200012b8

000023d4 <usb_get_interface>:
	return ret;
}

static bool usb_get_interface(struct usb_setup_packet *setup,
			      int32_t *len, uint8_t **data_buf)
{
    23d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23d6:	4684      	mov	ip, r0
    23d8:	460e      	mov	r6, r1
	const uint8_t *p = usb_dev.descriptors;
    23da:	4b0c      	ldr	r3, [pc, #48]	; (240c <usb_get_interface+0x38>)
    23dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	uint8_t *data = *data_buf;
    23de:	6817      	ldr	r7, [r2, #0]
	uint8_t cur_iface;

	while (p[DESC_bLength] != 0U) {
    23e0:	e000      	b.n	23e4 <usb_get_interface+0x10>
				return true;
			}
		}

		/* skip to next descriptor */
		p += p[DESC_bLength];
    23e2:	4413      	add	r3, r2
	while (p[DESC_bLength] != 0U) {
    23e4:	781a      	ldrb	r2, [r3, #0]
    23e6:	b172      	cbz	r2, 2406 <usb_get_interface+0x32>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    23e8:	785c      	ldrb	r4, [r3, #1]
    23ea:	2c04      	cmp	r4, #4
    23ec:	d1f9      	bne.n	23e2 <usb_get_interface+0xe>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    23ee:	7898      	ldrb	r0, [r3, #2]
			if (cur_iface == setup->wIndex) {
    23f0:	b285      	uxth	r5, r0
    23f2:	f8bc 4004 	ldrh.w	r4, [ip, #4]
    23f6:	42a5      	cmp	r5, r4
    23f8:	d1f3      	bne.n	23e2 <usb_get_interface+0xe>
				data[0] = usb_get_alt_setting(cur_iface);
    23fa:	f7ff ff8f 	bl	231c <usb_get_alt_setting>
    23fe:	7038      	strb	r0, [r7, #0]
				*len = 1;
    2400:	2001      	movs	r0, #1
    2402:	6030      	str	r0, [r6, #0]
				return true;
    2404:	e000      	b.n	2408 <usb_get_interface+0x34>
	}

	return false;
    2406:	2000      	movs	r0, #0
}
    2408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    240a:	bf00      	nop
    240c:	200012b8 	.word	0x200012b8

00002410 <is_device_configured>:
 *
 * @return true if Configured, false otherwise.
 */
static bool is_device_configured(void)
{
	return (usb_dev.configuration != 0);
    2410:	4b03      	ldr	r3, [pc, #12]	; (2420 <is_device_configured+0x10>)
    2412:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
}
    2416:	3800      	subs	r0, #0
    2418:	bf18      	it	ne
    241a:	2001      	movne	r0, #1
    241c:	4770      	bx	lr
    241e:	bf00      	nop
    2420:	200012b8 	.word	0x200012b8

00002424 <is_interface_valid>:
 *
 * @return true if interface exists - valid
 */
static bool is_interface_valid(uint8_t interface)
{
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    2424:	4b07      	ldr	r3, [pc, #28]	; (2444 <is_interface_valid+0x20>)
    2426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	const struct usb_cfg_descriptor *cfg_descr;

	/* Search through descriptor for matching interface */
	while (p[DESC_bLength] != 0U) {
    2428:	e000      	b.n	242c <is_interface_valid+0x8>
			cfg_descr = (const struct usb_cfg_descriptor *)p;
			if (interface < cfg_descr->bNumInterfaces) {
				return true;
			}
		}
		p += p[DESC_bLength];
    242a:	4413      	add	r3, r2
	while (p[DESC_bLength] != 0U) {
    242c:	781a      	ldrb	r2, [r3, #0]
    242e:	b13a      	cbz	r2, 2440 <is_interface_valid+0x1c>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    2430:	7859      	ldrb	r1, [r3, #1]
    2432:	2902      	cmp	r1, #2
    2434:	d1f9      	bne.n	242a <is_interface_valid+0x6>
			if (interface < cfg_descr->bNumInterfaces) {
    2436:	7919      	ldrb	r1, [r3, #4]
    2438:	4281      	cmp	r1, r0
    243a:	d9f6      	bls.n	242a <is_interface_valid+0x6>
				return true;
    243c:	2001      	movs	r0, #1
	}

	return false;
}
    243e:	4770      	bx	lr
	return false;
    2440:	2000      	movs	r0, #0
    2442:	4770      	bx	lr
    2444:	200012b8 	.word	0x200012b8

00002448 <is_ep_valid>:
 * either Control Endpoint or one used by the device.
 *
 * @return true if endpoint exists - valid
 */
static bool is_ep_valid(uint8_t ep)
{
    2448:	b470      	push	{r4, r5, r6}
	size_t size = (__usb_data_end - __usb_data_start);
    244a:	4b16      	ldr	r3, [pc, #88]	; (24a4 <is_ep_valid+0x5c>)
    244c:	4a16      	ldr	r2, [pc, #88]	; (24a8 <is_ep_valid+0x60>)
    244e:	1a9b      	subs	r3, r3, r2
    2450:	109b      	asrs	r3, r3, #2
    2452:	4e16      	ldr	r6, [pc, #88]	; (24ac <is_ep_valid+0x64>)
    2454:	fb06 f603 	mul.w	r6, r6, r3
	const struct usb_ep_cfg_data *ep_data;
	const struct usb_cfg_data *cfg;

	/* Check if its Endpoint 0 */
	if (USB_EP_GET_IDX(ep) == 0) {
    2458:	f030 0380 	bics.w	r3, r0, #128	; 0x80
    245c:	d01d      	beq.n	249a <is_ep_valid+0x52>
		return true;
	}

	for (size_t i = 0; i < size; i++) {
    245e:	2400      	movs	r4, #0
    2460:	42b4      	cmp	r4, r6
    2462:	d218      	bcs.n	2496 <is_ep_valid+0x4e>
		cfg = &__usb_data_start[i];
		ep_data = cfg->endpoint;
    2464:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    2468:	4b0f      	ldr	r3, [pc, #60]	; (24a8 <is_ep_valid+0x60>)
    246a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    246e:	6a15      	ldr	r5, [r2, #32]

		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
    2470:	2300      	movs	r3, #0
    2472:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    2476:	490c      	ldr	r1, [pc, #48]	; (24a8 <is_ep_valid+0x60>)
    2478:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    247c:	7f12      	ldrb	r2, [r2, #28]
    247e:	429a      	cmp	r2, r3
    2480:	d907      	bls.n	2492 <is_ep_valid+0x4a>
			if (ep_data[n].ep_addr == ep) {
    2482:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    2486:	7912      	ldrb	r2, [r2, #4]
    2488:	4282      	cmp	r2, r0
    248a:	d008      	beq.n	249e <is_ep_valid+0x56>
		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
    248c:	3301      	adds	r3, #1
    248e:	b2db      	uxtb	r3, r3
    2490:	e7ef      	b.n	2472 <is_ep_valid+0x2a>
	for (size_t i = 0; i < size; i++) {
    2492:	3401      	adds	r4, #1
    2494:	e7e4      	b.n	2460 <is_ep_valid+0x18>
				return true;
			}
		}
	}

	return false;
    2496:	2000      	movs	r0, #0
    2498:	e002      	b.n	24a0 <is_ep_valid+0x58>
		return true;
    249a:	2001      	movs	r0, #1
    249c:	e000      	b.n	24a0 <is_ep_valid+0x58>
				return true;
    249e:	2001      	movs	r0, #1
}
    24a0:	bc70      	pop	{r4, r5, r6}
    24a2:	4770      	bx	lr
    24a4:	200004e0 	.word	0x200004e0
    24a8:	200004bc 	.word	0x200004bc
    24ac:	38e38e39 	.word	0x38e38e39

000024b0 <usb_register_custom_req_handler>:
 *
 * @param [in] handler Callback function pointer
 */
static void usb_register_custom_req_handler(usb_request_handler handler)
{
	usb_dev.custom_req_handler = handler;
    24b0:	4b01      	ldr	r3, [pc, #4]	; (24b8 <usb_register_custom_req_handler+0x8>)
    24b2:	6198      	str	r0, [r3, #24]
}
    24b4:	4770      	bx	lr
    24b6:	bf00      	nop
    24b8:	200012b8 	.word	0x200012b8

000024bc <usb_register_status_callback>:
 *
 * @param [in] cb Callback function pointer
 */
static void usb_register_status_callback(usb_dc_status_callback cb)
{
	usb_dev.status_callback = cb;
    24bc:	4b01      	ldr	r3, [pc, #4]	; (24c4 <usb_register_status_callback+0x8>)
    24be:	61d8      	str	r0, [r3, #28]
}
    24c0:	4770      	bx	lr
    24c2:	bf00      	nop
    24c4:	200012b8 	.word	0x200012b8

000024c8 <foreach_ep>:

static int foreach_ep(int (* endpoint_callback)(const struct usb_ep_cfg_data *))
{
    24c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    24cc:	4606      	mov	r6, r0
	size_t size = (__usb_data_end - __usb_data_start);
    24ce:	4b14      	ldr	r3, [pc, #80]	; (2520 <foreach_ep+0x58>)
    24d0:	4a14      	ldr	r2, [pc, #80]	; (2524 <foreach_ep+0x5c>)
    24d2:	eba3 0802 	sub.w	r8, r3, r2
    24d6:	ea4f 03a8 	mov.w	r3, r8, asr #2
    24da:	4a13      	ldr	r2, [pc, #76]	; (2528 <foreach_ep+0x60>)
    24dc:	fb02 f803 	mul.w	r8, r2, r3

	for (size_t i = 0; i < size; i++) {
    24e0:	2500      	movs	r5, #0
    24e2:	4545      	cmp	r5, r8
    24e4:	d218      	bcs.n	2518 <foreach_ep+0x50>
		struct usb_cfg_data *cfg = &__usb_data_start[i];
		struct usb_ep_cfg_data *ep_data = cfg->endpoint;
    24e6:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    24ea:	4a0e      	ldr	r2, [pc, #56]	; (2524 <foreach_ep+0x5c>)
    24ec:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    24f0:	6a1f      	ldr	r7, [r3, #32]

		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
    24f2:	2400      	movs	r4, #0
    24f4:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    24f8:	4a0a      	ldr	r2, [pc, #40]	; (2524 <foreach_ep+0x5c>)
    24fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    24fe:	7f1b      	ldrb	r3, [r3, #28]
    2500:	42a3      	cmp	r3, r4
    2502:	d907      	bls.n	2514 <foreach_ep+0x4c>
			int ret;

			ret = endpoint_callback(&ep_data[n]);
    2504:	eb07 00c4 	add.w	r0, r7, r4, lsl #3
    2508:	47b0      	blx	r6
			if (ret < 0) {
    250a:	2800      	cmp	r0, #0
    250c:	db05      	blt.n	251a <foreach_ep+0x52>
		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
    250e:	3401      	adds	r4, #1
    2510:	b2e4      	uxtb	r4, r4
    2512:	e7ef      	b.n	24f4 <foreach_ep+0x2c>
	for (size_t i = 0; i < size; i++) {
    2514:	3501      	adds	r5, #1
    2516:	e7e4      	b.n	24e2 <foreach_ep+0x1a>
				return ret;
			}
		}
	}

	return 0;
    2518:	2000      	movs	r0, #0
}
    251a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    251e:	bf00      	nop
    2520:	200004e0 	.word	0x200004e0
    2524:	200004bc 	.word	0x200004bc
    2528:	38e38e39 	.word	0x38e38e39

0000252c <class_handler>:
 * usb_enable() is no longer needed.
 */

static int class_handler(struct usb_setup_packet *pSetup,
			 int32_t *len, uint8_t **data)
{
    252c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	size_t size = (__usb_data_end - __usb_data_start);
    252e:	4f13      	ldr	r7, [pc, #76]	; (257c <class_handler+0x50>)
    2530:	4b13      	ldr	r3, [pc, #76]	; (2580 <class_handler+0x54>)
    2532:	1aff      	subs	r7, r7, r3
    2534:	10bb      	asrs	r3, r7, #2
    2536:	4f13      	ldr	r7, [pc, #76]	; (2584 <class_handler+0x58>)
    2538:	fb07 f703 	mul.w	r7, r7, r3
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	for (size_t i = 0; i < size; i++) {
    253c:	2300      	movs	r3, #0
    253e:	e000      	b.n	2542 <class_handler+0x16>
    2540:	3301      	adds	r3, #1
    2542:	42bb      	cmp	r3, r7
    2544:	d216      	bcs.n	2574 <class_handler+0x48>
		iface = &(__usb_data_start[i].interface);
		if_descr = __usb_data_start[i].interface_descriptor;
    2546:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
    254a:	4d0d      	ldr	r5, [pc, #52]	; (2580 <class_handler+0x54>)
    254c:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    2550:	6866      	ldr	r6, [r4, #4]
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    2552:	4c0d      	ldr	r4, [pc, #52]	; (2588 <class_handler+0x5c>)
    2554:	6a64      	ldr	r4, [r4, #36]	; 0x24
    2556:	42a6      	cmp	r6, r4
    2558:	d3f2      	bcc.n	2540 <class_handler+0x14>
			continue;
		}

		if (iface->class_handler &&
    255a:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
    255e:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    2562:	6924      	ldr	r4, [r4, #16]
    2564:	2c00      	cmp	r4, #0
    2566:	d0eb      	beq.n	2540 <class_handler+0x14>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    2568:	78b6      	ldrb	r6, [r6, #2]
    256a:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
    256c:	42ae      	cmp	r6, r5
    256e:	d1e7      	bne.n	2540 <class_handler+0x14>
			return iface->class_handler(pSetup, len, data);
    2570:	47a0      	blx	r4
    2572:	e001      	b.n	2578 <class_handler+0x4c>
		}
	}

	return -ENOTSUP;
    2574:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    2578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    257a:	bf00      	nop
    257c:	200004e0 	.word	0x200004e0
    2580:	200004bc 	.word	0x200004bc
    2584:	38e38e39 	.word	0x38e38e39
    2588:	200012b8 	.word	0x200012b8

0000258c <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    258c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2590:	4607      	mov	r7, r0
    2592:	4688      	mov	r8, r1
    2594:	4691      	mov	r9, r2
	size_t size = (__usb_data_end - __usb_data_start);
    2596:	4e19      	ldr	r6, [pc, #100]	; (25fc <custom_handler+0x70>)
    2598:	4b19      	ldr	r3, [pc, #100]	; (2600 <custom_handler+0x74>)
    259a:	1af6      	subs	r6, r6, r3
    259c:	10b3      	asrs	r3, r6, #2
    259e:	4e19      	ldr	r6, [pc, #100]	; (2604 <custom_handler+0x78>)
    25a0:	fb06 f603 	mul.w	r6, r6, r3
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	for (size_t i = 0; i < size; i++) {
    25a4:	2400      	movs	r4, #0
    25a6:	e005      	b.n	25b4 <custom_handler+0x28>
		if (iface->custom_handler == NULL) {
			continue;
		}

		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
			return iface->custom_handler(pSetup, len, data);
    25a8:	464a      	mov	r2, r9
    25aa:	4641      	mov	r1, r8
    25ac:	4638      	mov	r0, r7
    25ae:	47a8      	blx	r5
    25b0:	e021      	b.n	25f6 <custom_handler+0x6a>
	for (size_t i = 0; i < size; i++) {
    25b2:	3401      	adds	r4, #1
    25b4:	42a6      	cmp	r6, r4
    25b6:	d91c      	bls.n	25f2 <custom_handler+0x66>
		if_descr = __usb_data_start[i].interface_descriptor;
    25b8:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    25bc:	4d10      	ldr	r5, [pc, #64]	; (2600 <custom_handler+0x74>)
    25be:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    25c2:	685b      	ldr	r3, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    25c4:	4a10      	ldr	r2, [pc, #64]	; (2608 <custom_handler+0x7c>)
    25c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
    25c8:	4293      	cmp	r3, r2
    25ca:	d3f2      	bcc.n	25b2 <custom_handler+0x26>
		if (iface->custom_handler == NULL) {
    25cc:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    25d0:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    25d4:	6995      	ldr	r5, [r2, #24]
    25d6:	2d00      	cmp	r5, #0
    25d8:	d0eb      	beq.n	25b2 <custom_handler+0x26>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    25da:	7899      	ldrb	r1, [r3, #2]
    25dc:	793a      	ldrb	r2, [r7, #4]
    25de:	4291      	cmp	r1, r2
    25e0:	d0e2      	beq.n	25a8 <custom_handler+0x1c>
			 * the first interface, but the request may be for
			 * subsequent ones, so forward each request to audio.
			 * The class does not actively engage in request
			 * handling and therefore we can ignore return value.
			 */
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    25e2:	795b      	ldrb	r3, [r3, #5]
    25e4:	2b01      	cmp	r3, #1
    25e6:	d1e4      	bne.n	25b2 <custom_handler+0x26>
				(void)iface->custom_handler(pSetup, len, data);
    25e8:	464a      	mov	r2, r9
    25ea:	4641      	mov	r1, r8
    25ec:	4638      	mov	r0, r7
    25ee:	47a8      	blx	r5
    25f0:	e7df      	b.n	25b2 <custom_handler+0x26>
			}
		}
	}

	return -ENOTSUP;
    25f2:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    25f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    25fa:	bf00      	nop
    25fc:	200004e0 	.word	0x200004e0
    2600:	200004bc 	.word	0x200004bc
    2604:	38e38e39 	.word	0x38e38e39
    2608:	200012b8 	.word	0x200012b8

0000260c <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    260c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2610:	4681      	mov	r9, r0
    2612:	4688      	mov	r8, r1
    2614:	4617      	mov	r7, r2
	size_t size = (__usb_data_end - __usb_data_start);
    2616:	4e10      	ldr	r6, [pc, #64]	; (2658 <vendor_handler+0x4c>)
    2618:	4b10      	ldr	r3, [pc, #64]	; (265c <vendor_handler+0x50>)
    261a:	1af6      	subs	r6, r6, r3
    261c:	10b3      	asrs	r3, r6, #2
    261e:	4e10      	ldr	r6, [pc, #64]	; (2660 <vendor_handler+0x54>)
    2620:	fb06 f603 	mul.w	r6, r6, r3
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	for (size_t i = 0; i < size; i++) {
    2624:	2400      	movs	r4, #0
    2626:	e000      	b.n	262a <vendor_handler+0x1e>
    2628:	3401      	adds	r4, #1
    262a:	42a6      	cmp	r6, r4
    262c:	d90f      	bls.n	264e <vendor_handler+0x42>
		iface = &(__usb_data_start[i].interface);
		if (iface->vendor_handler) {
    262e:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    2632:	4d0a      	ldr	r5, [pc, #40]	; (265c <vendor_handler+0x50>)
    2634:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    2638:	695b      	ldr	r3, [r3, #20]
    263a:	2b00      	cmp	r3, #0
    263c:	d0f4      	beq.n	2628 <vendor_handler+0x1c>
			if (!iface->vendor_handler(pSetup, len, data)) {
    263e:	463a      	mov	r2, r7
    2640:	4641      	mov	r1, r8
    2642:	4648      	mov	r0, r9
    2644:	4798      	blx	r3
    2646:	4603      	mov	r3, r0
    2648:	2800      	cmp	r0, #0
    264a:	d1ed      	bne.n	2628 <vendor_handler+0x1c>
    264c:	e001      	b.n	2652 <vendor_handler+0x46>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    264e:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    2652:	4618      	mov	r0, r3
    2654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2658:	200004e0 	.word	0x200004e0
    265c:	200004bc 	.word	0x200004bc
    2660:	38e38e39 	.word	0x38e38e39

00002664 <usb_halt_endpoint_req>:
{
    2664:	b570      	push	{r4, r5, r6, lr}
    2666:	b082      	sub	sp, #8
    2668:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    266a:	7904      	ldrb	r4, [r0, #4]
    266c:	f88d 4007 	strb.w	r4, [sp, #7]
	if (!is_ep_valid(ep)) {
    2670:	4620      	mov	r0, r4
    2672:	f7ff fee9 	bl	2448 <is_ep_valid>
    2676:	4606      	mov	r6, r0
    2678:	b130      	cbz	r0, 2688 <usb_halt_endpoint_req+0x24>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    267a:	f034 0380 	bics.w	r3, r4, #128	; 0x80
    267e:	d006      	beq.n	268e <usb_halt_endpoint_req+0x2a>
    2680:	f7ff fec6 	bl	2410 <is_device_configured>
    2684:	b918      	cbnz	r0, 268e <usb_halt_endpoint_req+0x2a>
	return false;
    2686:	4606      	mov	r6, r0
}
    2688:	4630      	mov	r0, r6
    268a:	b002      	add	sp, #8
    268c:	bd70      	pop	{r4, r5, r6, pc}
		if (halt) {
    268e:	b15d      	cbz	r5, 26a8 <usb_halt_endpoint_req+0x44>
			usb_dc_ep_set_stall(ep);
    2690:	4620      	mov	r0, r4
    2692:	f004 fa35 	bl	6b00 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    2696:	4b0a      	ldr	r3, [pc, #40]	; (26c0 <usb_halt_endpoint_req+0x5c>)
    2698:	69db      	ldr	r3, [r3, #28]
    269a:	2b00      	cmp	r3, #0
    269c:	d0f4      	beq.n	2688 <usb_halt_endpoint_req+0x24>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    269e:	f10d 0107 	add.w	r1, sp, #7
    26a2:	2008      	movs	r0, #8
    26a4:	4798      	blx	r3
    26a6:	e7ef      	b.n	2688 <usb_halt_endpoint_req+0x24>
			usb_dc_ep_clear_stall(ep);
    26a8:	4620      	mov	r0, r4
    26aa:	f004 fa6f 	bl	6b8c <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    26ae:	4b04      	ldr	r3, [pc, #16]	; (26c0 <usb_halt_endpoint_req+0x5c>)
    26b0:	69db      	ldr	r3, [r3, #28]
    26b2:	2b00      	cmp	r3, #0
    26b4:	d0e8      	beq.n	2688 <usb_halt_endpoint_req+0x24>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    26b6:	f10d 0107 	add.w	r1, sp, #7
    26ba:	2009      	movs	r0, #9
    26bc:	4798      	blx	r3
		return true;
    26be:	e7e3      	b.n	2688 <usb_halt_endpoint_req+0x24>
    26c0:	200012b8 	.word	0x200012b8

000026c4 <set_endpoint>:
{
    26c4:	b500      	push	{lr}
    26c6:	b083      	sub	sp, #12
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    26c8:	7883      	ldrb	r3, [r0, #2]
    26ca:	f88d 3000 	strb.w	r3, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    26ce:	8883      	ldrh	r3, [r0, #4]
    26d0:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    26d4:	78c3      	ldrb	r3, [r0, #3]
    26d6:	f003 0303 	and.w	r3, r3, #3
    26da:	f88d 3004 	strb.w	r3, [sp, #4]
	ret = usb_dc_ep_configure(&ep_cfg);
    26de:	4668      	mov	r0, sp
    26e0:	f004 f9d0 	bl	6a84 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    26e4:	f110 0f78 	cmn.w	r0, #120	; 0x78
    26e8:	d000      	beq.n	26ec <set_endpoint+0x28>
	} else if (ret) {
    26ea:	b970      	cbnz	r0, 270a <set_endpoint+0x46>
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    26ec:	f89d 0000 	ldrb.w	r0, [sp]
    26f0:	f004 fa96 	bl	6c20 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    26f4:	f110 0f78 	cmn.w	r0, #120	; 0x78
    26f8:	d000      	beq.n	26fc <set_endpoint+0x38>
	} else if (ret) {
    26fa:	b9d0      	cbnz	r0, 2732 <set_endpoint+0x6e>
	usb_dev.configured = true;
    26fc:	2001      	movs	r0, #1
    26fe:	4b17      	ldr	r3, [pc, #92]	; (275c <set_endpoint+0x98>)
    2700:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
}
    2704:	b003      	add	sp, #12
    2706:	f85d fb04 	ldr.w	pc, [sp], #4
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    270a:	4b15      	ldr	r3, [pc, #84]	; (2760 <set_endpoint+0x9c>)
    270c:	4a15      	ldr	r2, [pc, #84]	; (2764 <set_endpoint+0xa0>)
    270e:	1a9b      	subs	r3, r3, r2
    2710:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
    2712:	f04f 0200 	mov.w	r2, #0
    2716:	2101      	movs	r1, #1
    2718:	f361 0202 	bfi	r2, r1, #0, #3
    271c:	f36f 02c5 	bfc	r2, #3, #3
    2720:	f363 128f 	bfi	r2, r3, #6, #10
    2724:	f89d 1000 	ldrb.w	r1, [sp]
    2728:	480f      	ldr	r0, [pc, #60]	; (2768 <set_endpoint+0xa4>)
    272a:	f7ff f989 	bl	1a40 <log_1>
		return false;
    272e:	2000      	movs	r0, #0
    2730:	e7e8      	b.n	2704 <set_endpoint+0x40>
    2732:	4b0b      	ldr	r3, [pc, #44]	; (2760 <set_endpoint+0x9c>)
    2734:	4a0b      	ldr	r2, [pc, #44]	; (2764 <set_endpoint+0xa0>)
    2736:	1a9b      	subs	r3, r3, r2
    2738:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    273a:	f04f 0200 	mov.w	r2, #0
    273e:	2101      	movs	r1, #1
    2740:	f361 0202 	bfi	r2, r1, #0, #3
    2744:	f36f 02c5 	bfc	r2, #3, #3
    2748:	f363 128f 	bfi	r2, r3, #6, #10
    274c:	f89d 1000 	ldrb.w	r1, [sp]
    2750:	4806      	ldr	r0, [pc, #24]	; (276c <set_endpoint+0xa8>)
    2752:	f7ff f975 	bl	1a40 <log_1>
		return false;
    2756:	2000      	movs	r0, #0
    2758:	e7d4      	b.n	2704 <set_endpoint+0x40>
    275a:	bf00      	nop
    275c:	200012b8 	.word	0x200012b8
    2760:	00014378 	.word	0x00014378
    2764:	00014318 	.word	0x00014318
    2768:	00014648 	.word	0x00014648
    276c:	0001466c 	.word	0x0001466c

00002770 <usb_reset_alt_setting>:
{
    2770:	b508      	push	{r3, lr}
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    2772:	2208      	movs	r2, #8
    2774:	2100      	movs	r1, #0
    2776:	4802      	ldr	r0, [pc, #8]	; (2780 <usb_reset_alt_setting+0x10>)
    2778:	f00e fd5c 	bl	11234 <memset>
}
    277c:	bd08      	pop	{r3, pc}
    277e:	bf00      	nop
    2780:	20001373 	.word	0x20001373

00002784 <usb_set_configuration>:
{
    2784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2788:	4605      	mov	r5, r0
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    278a:	4b23      	ldr	r3, [pc, #140]	; (2818 <usb_set_configuration+0x94>)
    278c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	if (setup->wValue == 0U) {
    278e:	8843      	ldrh	r3, [r0, #2]
    2790:	b11b      	cbz	r3, 279a <usb_set_configuration+0x16>
	bool found = false;
    2792:	2700      	movs	r7, #0
	uint8_t cur_config = 0xFF;
    2794:	26ff      	movs	r6, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    2796:	46b0      	mov	r8, r6
    2798:	e010      	b.n	27bc <usb_set_configuration+0x38>
		usb_reset_alt_setting();
    279a:	f7ff ffe9 	bl	2770 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    279e:	886a      	ldrh	r2, [r5, #2]
    27a0:	4b1d      	ldr	r3, [pc, #116]	; (2818 <usb_set_configuration+0x94>)
    27a2:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		if (usb_dev.status_callback) {
    27a6:	69db      	ldr	r3, [r3, #28]
    27a8:	b113      	cbz	r3, 27b0 <usb_set_configuration+0x2c>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    27aa:	491c      	ldr	r1, [pc, #112]	; (281c <usb_set_configuration+0x98>)
    27ac:	2003      	movs	r0, #3
    27ae:	4798      	blx	r3
		return true;
    27b0:	2701      	movs	r7, #1
    27b2:	e020      	b.n	27f6 <usb_set_configuration+0x72>
			cur_alt_setting =
    27b4:	f894 8003 	ldrb.w	r8, [r4, #3]
		p += p[DESC_bLength];
    27b8:	7823      	ldrb	r3, [r4, #0]
    27ba:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
    27bc:	7823      	ldrb	r3, [r4, #0]
    27be:	b1cb      	cbz	r3, 27f4 <usb_set_configuration+0x70>
		switch (p[DESC_bDescriptorType]) {
    27c0:	7863      	ldrb	r3, [r4, #1]
    27c2:	2b04      	cmp	r3, #4
    27c4:	d0f6      	beq.n	27b4 <usb_set_configuration+0x30>
    27c6:	2b05      	cmp	r3, #5
    27c8:	d008      	beq.n	27dc <usb_set_configuration+0x58>
    27ca:	2b02      	cmp	r3, #2
    27cc:	d1f4      	bne.n	27b8 <usb_set_configuration+0x34>
			cur_config = p[CONF_DESC_bConfigurationValue];
    27ce:	7966      	ldrb	r6, [r4, #5]
			if (cur_config == setup->wValue) {
    27d0:	b2b2      	uxth	r2, r6
    27d2:	886b      	ldrh	r3, [r5, #2]
    27d4:	429a      	cmp	r2, r3
    27d6:	d1ef      	bne.n	27b8 <usb_set_configuration+0x34>
				found = true;
    27d8:	2701      	movs	r7, #1
    27da:	e7ed      	b.n	27b8 <usb_set_configuration+0x34>
			if ((cur_config != setup->wValue) ||
    27dc:	b2b3      	uxth	r3, r6
    27de:	886a      	ldrh	r2, [r5, #2]
    27e0:	4293      	cmp	r3, r2
    27e2:	d1e9      	bne.n	27b8 <usb_set_configuration+0x34>
    27e4:	f1b8 0f00 	cmp.w	r8, #0
    27e8:	d1e6      	bne.n	27b8 <usb_set_configuration+0x34>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    27ea:	4620      	mov	r0, r4
    27ec:	f7ff ff6a 	bl	26c4 <set_endpoint>
    27f0:	4607      	mov	r7, r0
			break;
    27f2:	e7e1      	b.n	27b8 <usb_set_configuration+0x34>
	if (found) {
    27f4:	b917      	cbnz	r7, 27fc <usb_set_configuration+0x78>
}
    27f6:	4638      	mov	r0, r7
    27f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		usb_reset_alt_setting();
    27fc:	f7ff ffb8 	bl	2770 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    2800:	886a      	ldrh	r2, [r5, #2]
    2802:	4b05      	ldr	r3, [pc, #20]	; (2818 <usb_set_configuration+0x94>)
    2804:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		if (usb_dev.status_callback) {
    2808:	69db      	ldr	r3, [r3, #28]
    280a:	2b00      	cmp	r3, #0
    280c:	d0f3      	beq.n	27f6 <usb_set_configuration+0x72>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    280e:	4903      	ldr	r1, [pc, #12]	; (281c <usb_set_configuration+0x98>)
    2810:	2003      	movs	r0, #3
    2812:	4798      	blx	r3
    2814:	e7ef      	b.n	27f6 <usb_set_configuration+0x72>
    2816:	bf00      	nop
    2818:	200012b8 	.word	0x200012b8
    281c:	20001372 	.word	0x20001372

00002820 <usb_handle_std_device_req>:
{
    2820:	b510      	push	{r4, lr}
	uint8_t *data = *data_buf;
    2822:	6814      	ldr	r4, [r2, #0]
	if (usb_reqtype_is_to_host(setup)) {
    2824:	f990 3000 	ldrsb.w	r3, [r0]
    2828:	2b00      	cmp	r3, #0
    282a:	db06      	blt.n	283a <usb_handle_std_device_req+0x1a>
		switch (setup->bRequest) {
    282c:	7843      	ldrb	r3, [r0, #1]
    282e:	2b05      	cmp	r3, #5
    2830:	d018      	beq.n	2864 <usb_handle_std_device_req+0x44>
    2832:	2b09      	cmp	r3, #9
    2834:	d01d      	beq.n	2872 <usb_handle_std_device_req+0x52>
    2836:	2000      	movs	r0, #0
}
    2838:	bd10      	pop	{r4, pc}
		switch (setup->bRequest) {
    283a:	7843      	ldrb	r3, [r0, #1]
    283c:	2b06      	cmp	r3, #6
    283e:	d007      	beq.n	2850 <usb_handle_std_device_req+0x30>
    2840:	2b08      	cmp	r3, #8
    2842:	d008      	beq.n	2856 <usb_handle_std_device_req+0x36>
    2844:	b10b      	cbz	r3, 284a <usb_handle_std_device_req+0x2a>
    2846:	2000      	movs	r0, #0
    2848:	e7f6      	b.n	2838 <usb_handle_std_device_req+0x18>
			return usb_get_status(setup, len, data_buf);
    284a:	f00e f8a3 	bl	10994 <usb_get_status>
    284e:	e7f3      	b.n	2838 <usb_handle_std_device_req+0x18>
			return usb_get_descriptor(setup, len, data_buf);
    2850:	f7ff fd92 	bl	2378 <usb_get_descriptor>
    2854:	e7f0      	b.n	2838 <usb_handle_std_device_req+0x18>
			data[0] = usb_dev.configuration;
    2856:	4b08      	ldr	r3, [pc, #32]	; (2878 <usb_handle_std_device_req+0x58>)
    2858:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
    285c:	7023      	strb	r3, [r4, #0]
			*len = 1;
    285e:	2001      	movs	r0, #1
    2860:	6008      	str	r0, [r1, #0]
			return true;
    2862:	e7e9      	b.n	2838 <usb_handle_std_device_req+0x18>
			return !usb_dc_set_address(setup->wValue);
    2864:	7880      	ldrb	r0, [r0, #2]
    2866:	f004 f8b7 	bl	69d8 <usb_dc_set_address>
    286a:	fab0 f080 	clz	r0, r0
    286e:	0940      	lsrs	r0, r0, #5
    2870:	e7e2      	b.n	2838 <usb_handle_std_device_req+0x18>
			return usb_set_configuration(setup);
    2872:	f7ff ff87 	bl	2784 <usb_set_configuration>
    2876:	e7df      	b.n	2838 <usb_handle_std_device_req+0x18>
    2878:	200012b8 	.word	0x200012b8

0000287c <reset_endpoint>:
{
    287c:	b510      	push	{r4, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    287e:	7884      	ldrb	r4, [r0, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    2880:	4620      	mov	r0, r4
    2882:	f000 fdcb 	bl	341c <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
    2886:	4620      	mov	r0, r4
    2888:	f004 f9f8 	bl	6c7c <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    288c:	f110 0f78 	cmn.w	r0, #120	; 0x78
    2890:	d015      	beq.n	28be <reset_endpoint+0x42>
	} else if (ret) {
    2892:	b908      	cbnz	r0, 2898 <reset_endpoint+0x1c>
	return true;
    2894:	2001      	movs	r0, #1
}
    2896:	bd10      	pop	{r4, pc}
    2898:	4b0a      	ldr	r3, [pc, #40]	; (28c4 <reset_endpoint+0x48>)
    289a:	4a0b      	ldr	r2, [pc, #44]	; (28c8 <reset_endpoint+0x4c>)
    289c:	1a9b      	subs	r3, r3, r2
    289e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_cfg.ep_addr);
    28a0:	f04f 0200 	mov.w	r2, #0
    28a4:	2101      	movs	r1, #1
    28a6:	f361 0202 	bfi	r2, r1, #0, #3
    28aa:	f36f 02c5 	bfc	r2, #3, #3
    28ae:	f363 128f 	bfi	r2, r3, #6, #10
    28b2:	4621      	mov	r1, r4
    28b4:	4805      	ldr	r0, [pc, #20]	; (28cc <reset_endpoint+0x50>)
    28b6:	f7ff f8c3 	bl	1a40 <log_1>
		return false;
    28ba:	2000      	movs	r0, #0
    28bc:	e7eb      	b.n	2896 <reset_endpoint+0x1a>
	return true;
    28be:	2001      	movs	r0, #1
    28c0:	e7e9      	b.n	2896 <reset_endpoint+0x1a>
    28c2:	bf00      	nop
    28c4:	00014378 	.word	0x00014378
    28c8:	00014318 	.word	0x00014318
    28cc:	00014690 	.word	0x00014690

000028d0 <usb_set_interface>:
{
    28d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    28d4:	4606      	mov	r6, r0
	const uint8_t *p = usb_dev.descriptors;
    28d6:	4b1b      	ldr	r3, [pc, #108]	; (2944 <usb_set_interface+0x74>)
    28d8:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	bool ret = false;
    28da:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
    28dc:	25ff      	movs	r5, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    28de:	46a8      	mov	r8, r5
	const uint8_t *if_desc = NULL;
    28e0:	46b9      	mov	r9, r7
    28e2:	e008      	b.n	28f6 <usb_set_interface+0x26>
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    28e4:	f894 8003 	ldrb.w	r8, [r4, #3]
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    28e8:	78a5      	ldrb	r5, [r4, #2]
			if (cur_iface == setup->wIndex &&
    28ea:	b2ab      	uxth	r3, r5
    28ec:	88b0      	ldrh	r0, [r6, #4]
    28ee:	4283      	cmp	r3, r0
    28f0:	d013      	beq.n	291a <usb_set_interface+0x4a>
		p += p[DESC_bLength];
    28f2:	7823      	ldrb	r3, [r4, #0]
    28f4:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
    28f6:	7823      	ldrb	r3, [r4, #0]
    28f8:	b1db      	cbz	r3, 2932 <usb_set_interface+0x62>
		switch (p[DESC_bDescriptorType]) {
    28fa:	7863      	ldrb	r3, [r4, #1]
    28fc:	2b04      	cmp	r3, #4
    28fe:	d0f1      	beq.n	28e4 <usb_set_interface+0x14>
    2900:	2b05      	cmp	r3, #5
    2902:	d1f6      	bne.n	28f2 <usb_set_interface+0x22>
			if (cur_iface == setup->wIndex) {
    2904:	b2ab      	uxth	r3, r5
    2906:	88b2      	ldrh	r2, [r6, #4]
    2908:	4293      	cmp	r3, r2
    290a:	d1f2      	bne.n	28f2 <usb_set_interface+0x22>
				ret = usb_eps_reconfigure(ep, cur_alt_setting,
    290c:	78b2      	ldrb	r2, [r6, #2]
    290e:	4641      	mov	r1, r8
    2910:	4620      	mov	r0, r4
    2912:	f00e f849 	bl	109a8 <usb_eps_reconfigure>
    2916:	4607      	mov	r7, r0
    2918:	e7eb      	b.n	28f2 <usb_set_interface+0x22>
			    cur_alt_setting == setup->wValue) {
    291a:	fa1f f388 	uxth.w	r3, r8
    291e:	8871      	ldrh	r1, [r6, #2]
			if (cur_iface == setup->wIndex &&
    2920:	428b      	cmp	r3, r1
    2922:	d1e6      	bne.n	28f2 <usb_set_interface+0x22>
				ret = usb_set_alt_setting(setup->wIndex,
    2924:	b2c9      	uxtb	r1, r1
    2926:	b2c0      	uxtb	r0, r0
    2928:	f7ff fcec 	bl	2304 <usb_set_alt_setting>
    292c:	4607      	mov	r7, r0
				if_desc = (void *)p;
    292e:	46a1      	mov	r9, r4
    2930:	e7df      	b.n	28f2 <usb_set_interface+0x22>
	if (usb_dev.status_callback) {
    2932:	4b04      	ldr	r3, [pc, #16]	; (2944 <usb_set_interface+0x74>)
    2934:	69db      	ldr	r3, [r3, #28]
    2936:	b113      	cbz	r3, 293e <usb_set_interface+0x6e>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    2938:	4649      	mov	r1, r9
    293a:	2007      	movs	r0, #7
    293c:	4798      	blx	r3
}
    293e:	4638      	mov	r0, r7
    2940:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2944:	200012b8 	.word	0x200012b8

00002948 <usb_handle_standard_request>:
{
    2948:	b570      	push	{r4, r5, r6, lr}
    294a:	4604      	mov	r4, r0
    294c:	460d      	mov	r5, r1
    294e:	4616      	mov	r6, r2
	if (usb_dev.custom_req_handler &&
    2950:	4b18      	ldr	r3, [pc, #96]	; (29b4 <usb_handle_standard_request+0x6c>)
    2952:	699b      	ldr	r3, [r3, #24]
    2954:	b10b      	cbz	r3, 295a <usb_handle_standard_request+0x12>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    2956:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    2958:	b148      	cbz	r0, 296e <usb_handle_standard_request+0x26>
	switch (setup->RequestType.recipient) {
    295a:	7823      	ldrb	r3, [r4, #0]
    295c:	f003 031f 	and.w	r3, r3, #31
    2960:	2b01      	cmp	r3, #1
    2962:	d00d      	beq.n	2980 <usb_handle_standard_request+0x38>
    2964:	2b02      	cmp	r3, #2
    2966:	d013      	beq.n	2990 <usb_handle_standard_request+0x48>
    2968:	b113      	cbz	r3, 2970 <usb_handle_standard_request+0x28>
    296a:	f06f 0015 	mvn.w	r0, #21
}
    296e:	bd70      	pop	{r4, r5, r6, pc}
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    2970:	4632      	mov	r2, r6
    2972:	4629      	mov	r1, r5
    2974:	4620      	mov	r0, r4
    2976:	f7ff ff53 	bl	2820 <usb_handle_std_device_req>
    297a:	b188      	cbz	r0, 29a0 <usb_handle_standard_request+0x58>
	int rc = 0;
    297c:	2000      	movs	r0, #0
    297e:	e7f6      	b.n	296e <usb_handle_standard_request+0x26>
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    2980:	4632      	mov	r2, r6
    2982:	4629      	mov	r1, r5
    2984:	4620      	mov	r0, r4
    2986:	f00e f818 	bl	109ba <usb_handle_std_interface_req>
    298a:	b160      	cbz	r0, 29a6 <usb_handle_standard_request+0x5e>
	int rc = 0;
    298c:	2000      	movs	r0, #0
    298e:	e7ee      	b.n	296e <usb_handle_standard_request+0x26>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    2990:	4632      	mov	r2, r6
    2992:	4629      	mov	r1, r5
    2994:	4620      	mov	r0, r4
    2996:	f00e f85d 	bl	10a54 <usb_handle_std_endpoint_req>
    299a:	b138      	cbz	r0, 29ac <usb_handle_standard_request+0x64>
	int rc = 0;
    299c:	2000      	movs	r0, #0
    299e:	e7e6      	b.n	296e <usb_handle_standard_request+0x26>
			rc = -EINVAL;
    29a0:	f06f 0015 	mvn.w	r0, #21
    29a4:	e7e3      	b.n	296e <usb_handle_standard_request+0x26>
			rc = -EINVAL;
    29a6:	f06f 0015 	mvn.w	r0, #21
    29aa:	e7e0      	b.n	296e <usb_handle_standard_request+0x26>
			rc = -EINVAL;
    29ac:	f06f 0015 	mvn.w	r0, #21
    29b0:	e7dd      	b.n	296e <usb_handle_standard_request+0x26>
    29b2:	bf00      	nop
    29b4:	200012b8 	.word	0x200012b8

000029b8 <composite_setup_ep_cb>:

static int composite_setup_ep_cb(void)
{
    29b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	size_t size = (__usb_data_end - __usb_data_start);
    29ba:	4f15      	ldr	r7, [pc, #84]	; (2a10 <composite_setup_ep_cb+0x58>)
    29bc:	4b15      	ldr	r3, [pc, #84]	; (2a14 <composite_setup_ep_cb+0x5c>)
    29be:	1aff      	subs	r7, r7, r3
    29c0:	10bb      	asrs	r3, r7, #2
    29c2:	4f15      	ldr	r7, [pc, #84]	; (2a18 <composite_setup_ep_cb+0x60>)
    29c4:	fb07 f703 	mul.w	r7, r7, r3
	struct usb_ep_cfg_data *ep_data;

	for (size_t i = 0; i < size; i++) {
    29c8:	2500      	movs	r5, #0
    29ca:	42af      	cmp	r7, r5
    29cc:	d91b      	bls.n	2a06 <composite_setup_ep_cb+0x4e>
		ep_data = __usb_data_start[i].endpoint;
    29ce:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    29d2:	4a10      	ldr	r2, [pc, #64]	; (2a14 <composite_setup_ep_cb+0x5c>)
    29d4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    29d8:	6a1e      	ldr	r6, [r3, #32]
		for (uint8_t n = 0; n < __usb_data_start[i].num_endpoints; n++) {
    29da:	2400      	movs	r4, #0
    29dc:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    29e0:	4a0c      	ldr	r2, [pc, #48]	; (2a14 <composite_setup_ep_cb+0x5c>)
    29e2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    29e6:	7f1b      	ldrb	r3, [r3, #28]
    29e8:	429c      	cmp	r4, r3
    29ea:	d20a      	bcs.n	2a02 <composite_setup_ep_cb+0x4a>
			LOG_DBG("set cb, ep: 0x%x", ep_data[n].ep_addr);
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    29ec:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
    29f0:	f856 1034 	ldr.w	r1, [r6, r4, lsl #3]
    29f4:	7918      	ldrb	r0, [r3, #4]
    29f6:	f004 fb5d 	bl	70b4 <usb_dc_ep_set_callback>
    29fa:	b930      	cbnz	r0, 2a0a <composite_setup_ep_cb+0x52>
		for (uint8_t n = 0; n < __usb_data_start[i].num_endpoints; n++) {
    29fc:	3401      	adds	r4, #1
    29fe:	b2e4      	uxtb	r4, r4
    2a00:	e7ec      	b.n	29dc <composite_setup_ep_cb+0x24>
	for (size_t i = 0; i < size; i++) {
    2a02:	3501      	adds	r5, #1
    2a04:	e7e1      	b.n	29ca <composite_setup_ep_cb+0x12>
				return -1;
			}
		}
	}

	return 0;
    2a06:	2000      	movs	r0, #0
    2a08:	e001      	b.n	2a0e <composite_setup_ep_cb+0x56>
				return -1;
    2a0a:	f04f 30ff 	mov.w	r0, #4294967295
}
    2a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a10:	200004e0 	.word	0x200004e0
    2a14:	200004bc 	.word	0x200004bc
    2a18:	38e38e39 	.word	0x38e38e39

00002a1c <forward_status_cb>:
{
    2a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a1e:	4606      	mov	r6, r0
    2a20:	460f      	mov	r7, r1
	size_t size = (__usb_data_end - __usb_data_start);
    2a22:	4d1c      	ldr	r5, [pc, #112]	; (2a94 <forward_status_cb+0x78>)
    2a24:	4b1c      	ldr	r3, [pc, #112]	; (2a98 <forward_status_cb+0x7c>)
    2a26:	1aed      	subs	r5, r5, r3
    2a28:	10ab      	asrs	r3, r5, #2
    2a2a:	4d1c      	ldr	r5, [pc, #112]	; (2a9c <forward_status_cb+0x80>)
    2a2c:	fb05 f503 	mul.w	r5, r5, r3
	if (status == USB_DC_DISCONNECTED) {
    2a30:	2804      	cmp	r0, #4
    2a32:	d005      	beq.n	2a40 <forward_status_cb+0x24>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND) {
    2a34:	1f33      	subs	r3, r6, #4
    2a36:	b2db      	uxtb	r3, r3
    2a38:	2b01      	cmp	r3, #1
    2a3a:	d904      	bls.n	2a46 <forward_status_cb+0x2a>
{
    2a3c:	2400      	movs	r4, #0
    2a3e:	e014      	b.n	2a6a <forward_status_cb+0x4e>
		usb_reset_alt_setting();
    2a40:	f7ff fe96 	bl	2770 <usb_reset_alt_setting>
    2a44:	e7f6      	b.n	2a34 <forward_status_cb+0x18>
		if (usb_dev.configured) {
    2a46:	4b16      	ldr	r3, [pc, #88]	; (2aa0 <forward_status_cb+0x84>)
    2a48:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
    2a4c:	2b00      	cmp	r3, #0
    2a4e:	d0f5      	beq.n	2a3c <forward_status_cb+0x20>
			usb_cancel_transfers();
    2a50:	f000 fd04 	bl	345c <usb_cancel_transfers>
			if (status == USB_DC_DISCONNECTED) {
    2a54:	2e04      	cmp	r6, #4
    2a56:	d1f1      	bne.n	2a3c <forward_status_cb+0x20>
				foreach_ep(disable_interface_ep);
    2a58:	4812      	ldr	r0, [pc, #72]	; (2aa4 <forward_status_cb+0x88>)
    2a5a:	f7ff fd35 	bl	24c8 <foreach_ep>
				usb_dev.configured = false;
    2a5e:	4b10      	ldr	r3, [pc, #64]	; (2aa0 <forward_status_cb+0x84>)
    2a60:	2200      	movs	r2, #0
    2a62:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
    2a66:	e7e9      	b.n	2a3c <forward_status_cb+0x20>
	for (size_t i = 0; i < size; i++) {
    2a68:	3401      	adds	r4, #1
    2a6a:	42ac      	cmp	r4, r5
    2a6c:	d20b      	bcs.n	2a86 <forward_status_cb+0x6a>
		struct usb_cfg_data *cfg = &__usb_data_start[i];
    2a6e:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
    2a72:	4b09      	ldr	r3, [pc, #36]	; (2a98 <forward_status_cb+0x7c>)
    2a74:	eb03 0080 	add.w	r0, r3, r0, lsl #2
		if (cfg->cb_usb_status) {
    2a78:	68c3      	ldr	r3, [r0, #12]
    2a7a:	2b00      	cmp	r3, #0
    2a7c:	d0f4      	beq.n	2a68 <forward_status_cb+0x4c>
			cfg->cb_usb_status(cfg, status, param);
    2a7e:	463a      	mov	r2, r7
    2a80:	4631      	mov	r1, r6
    2a82:	4798      	blx	r3
    2a84:	e7f0      	b.n	2a68 <forward_status_cb+0x4c>
	if (usb_dev.user_status_callback) {
    2a86:	4b06      	ldr	r3, [pc, #24]	; (2aa0 <forward_status_cb+0x84>)
    2a88:	6a1b      	ldr	r3, [r3, #32]
    2a8a:	b113      	cbz	r3, 2a92 <forward_status_cb+0x76>
		usb_dev.user_status_callback(status, param);
    2a8c:	4639      	mov	r1, r7
    2a8e:	4630      	mov	r0, r6
    2a90:	4798      	blx	r3
}
    2a92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a94:	200004e0 	.word	0x200004e0
    2a98:	200004bc 	.word	0x200004bc
    2a9c:	38e38e39 	.word	0x38e38e39
    2aa0:	200012b8 	.word	0x200012b8
    2aa4:	00010a15 	.word	0x00010a15

00002aa8 <usb_data_to_host>:
{
    2aa8:	b510      	push	{r4, lr}
    2aaa:	b082      	sub	sp, #8
	if (usb_dev.zlp_flag == false) {
    2aac:	4b13      	ldr	r3, [pc, #76]	; (2afc <usb_data_to_host+0x54>)
    2aae:	7d1b      	ldrb	r3, [r3, #20]
    2ab0:	b9cb      	cbnz	r3, 2ae6 <usb_data_to_host+0x3e>
		uint32_t chunk = usb_dev.data_buf_residue;
    2ab2:	4c12      	ldr	r4, [pc, #72]	; (2afc <usb_data_to_host+0x54>)
    2ab4:	68e2      	ldr	r2, [r4, #12]
    2ab6:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    2ab8:	ab01      	add	r3, sp, #4
    2aba:	68a1      	ldr	r1, [r4, #8]
    2abc:	2080      	movs	r0, #128	; 0x80
    2abe:	f00d ffec 	bl	10a9a <usb_write>
		usb_dev.data_buf += chunk;
    2ac2:	9901      	ldr	r1, [sp, #4]
    2ac4:	68a2      	ldr	r2, [r4, #8]
    2ac6:	440a      	add	r2, r1
    2ac8:	60a2      	str	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    2aca:	68e3      	ldr	r3, [r4, #12]
    2acc:	1a5b      	subs	r3, r3, r1
    2ace:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue &&
    2ad0:	b98b      	cbnz	r3, 2af6 <usb_data_to_host+0x4e>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    2ad2:	88e2      	ldrh	r2, [r4, #6]
    2ad4:	6923      	ldr	r3, [r4, #16]
		if (!usb_dev.data_buf_residue &&
    2ad6:	429a      	cmp	r2, r3
    2ad8:	dd0d      	ble.n	2af6 <usb_data_to_host+0x4e>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
    2ada:	f013 0f3f 	tst.w	r3, #63	; 0x3f
    2ade:	d10a      	bne.n	2af6 <usb_data_to_host+0x4e>
				usb_dev.zlp_flag = true;
    2ae0:	2201      	movs	r2, #1
    2ae2:	7522      	strb	r2, [r4, #20]
    2ae4:	e007      	b.n	2af6 <usb_data_to_host+0x4e>
		usb_dev.zlp_flag = false;
    2ae6:	2100      	movs	r1, #0
    2ae8:	4b04      	ldr	r3, [pc, #16]	; (2afc <usb_data_to_host+0x54>)
    2aea:	7519      	strb	r1, [r3, #20]
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    2aec:	460b      	mov	r3, r1
    2aee:	460a      	mov	r2, r1
    2af0:	2080      	movs	r0, #128	; 0x80
    2af2:	f004 f8ed 	bl	6cd0 <usb_dc_ep_write>
}
    2af6:	b002      	add	sp, #8
    2af8:	bd10      	pop	{r4, pc}
    2afa:	bf00      	nop
    2afc:	200012b8 	.word	0x200012b8

00002b00 <usb_handle_control_transfer>:
{
    2b00:	b510      	push	{r4, lr}
    2b02:	b084      	sub	sp, #16
	uint32_t chunk = 0U;
    2b04:	2300      	movs	r3, #0
    2b06:	9303      	str	r3, [sp, #12]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    2b08:	4604      	mov	r4, r0
    2b0a:	b900      	cbnz	r0, 2b0e <usb_handle_control_transfer+0xe>
    2b0c:	b331      	cbz	r1, 2b5c <usb_handle_control_transfer+0x5c>
	} else if (ep == USB_CONTROL_EP_OUT) {
    2b0e:	2c00      	cmp	r4, #0
    2b10:	f040 8094 	bne.w	2c3c <usb_handle_control_transfer+0x13c>
		if (usb_dev.data_buf_residue <= 0) {
    2b14:	4b50      	ldr	r3, [pc, #320]	; (2c58 <usb_handle_control_transfer+0x158>)
    2b16:	68da      	ldr	r2, [r3, #12]
    2b18:	2a00      	cmp	r2, #0
    2b1a:	dd77      	ble.n	2c0c <usb_handle_control_transfer+0x10c>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    2b1c:	ab03      	add	r3, sp, #12
    2b1e:	494e      	ldr	r1, [pc, #312]	; (2c58 <usb_handle_control_transfer+0x158>)
    2b20:	6889      	ldr	r1, [r1, #8]
    2b22:	2000      	movs	r0, #0
    2b24:	f00e ff0d 	bl	11942 <usb_dc_ep_read>
    2b28:	2800      	cmp	r0, #0
    2b2a:	db7c      	blt.n	2c26 <usb_handle_control_transfer+0x126>
		usb_dev.data_buf += chunk;
    2b2c:	9803      	ldr	r0, [sp, #12]
    2b2e:	4a4a      	ldr	r2, [pc, #296]	; (2c58 <usb_handle_control_transfer+0x158>)
    2b30:	6891      	ldr	r1, [r2, #8]
    2b32:	4401      	add	r1, r0
    2b34:	6091      	str	r1, [r2, #8]
		usb_dev.data_buf_residue -= chunk;
    2b36:	68d3      	ldr	r3, [r2, #12]
    2b38:	1a1b      	subs	r3, r3, r0
    2b3a:	60d3      	str	r3, [r2, #12]
		if (usb_dev.data_buf_residue == 0) {
    2b3c:	2b00      	cmp	r3, #0
    2b3e:	d17f      	bne.n	2c40 <usb_handle_control_transfer+0x140>
			usb_dev.data_buf = usb_dev.req_data;
    2b40:	4610      	mov	r0, r2
    2b42:	f102 0338 	add.w	r3, r2, #56	; 0x38
    2b46:	f842 3f08 	str.w	r3, [r2, #8]!
			if (!usb_handle_request(setup,
    2b4a:	f100 0110 	add.w	r1, r0, #16
    2b4e:	f7ff fbf1 	bl	2334 <usb_handle_request>
    2b52:	2800      	cmp	r0, #0
    2b54:	d06e      	beq.n	2c34 <usb_handle_control_transfer+0x134>
			usb_data_to_host();
    2b56:	f7ff ffa7 	bl	2aa8 <usb_data_to_host>
    2b5a:	e071      	b.n	2c40 <usb_handle_control_transfer+0x140>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    2b5c:	2208      	movs	r2, #8
    2b5e:	a901      	add	r1, sp, #4
    2b60:	f00e feef 	bl	11942 <usb_dc_ep_read>
    2b64:	2800      	cmp	r0, #0
    2b66:	db2e      	blt.n	2bc6 <usb_handle_control_transfer+0xc6>
		setup->bmRequestType = setup_raw.bmRequestType;
    2b68:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2b6c:	4b3a      	ldr	r3, [pc, #232]	; (2c58 <usb_handle_control_transfer+0x158>)
    2b6e:	7018      	strb	r0, [r3, #0]
		setup->bRequest = setup_raw.bRequest;
    2b70:	f89d 2005 	ldrb.w	r2, [sp, #5]
    2b74:	705a      	strb	r2, [r3, #1]
		setup->wValue = sys_le16_to_cpu(setup_raw.wValue);
    2b76:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    2b7a:	805a      	strh	r2, [r3, #2]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    2b7c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    2b80:	809a      	strh	r2, [r3, #4]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    2b82:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    2b86:	80d9      	strh	r1, [r3, #6]
		usb_dev.data_buf = usb_dev.req_data;
    2b88:	f103 0238 	add.w	r2, r3, #56	; 0x38
    2b8c:	609a      	str	r2, [r3, #8]
		usb_dev.zlp_flag = false;
    2b8e:	2200      	movs	r2, #0
    2b90:	751a      	strb	r2, [r3, #20]
		usb_dev.data_buf_len = 0;
    2b92:	611a      	str	r2, [r3, #16]
		usb_dev.data_buf_residue = 0;
    2b94:	60da      	str	r2, [r3, #12]
		if (usb_reqtype_is_to_device(setup)) {
    2b96:	f010 0f80 	tst.w	r0, #128	; 0x80
    2b9a:	d102      	bne.n	2ba2 <usb_handle_control_transfer+0xa2>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    2b9c:	2980      	cmp	r1, #128	; 0x80
    2b9e:	d816      	bhi.n	2bce <usb_handle_control_transfer+0xce>
			if (setup->wLength) {
    2ba0:	bb61      	cbnz	r1, 2bfc <usb_handle_control_transfer+0xfc>
		if (!usb_handle_request(setup,
    2ba2:	482d      	ldr	r0, [pc, #180]	; (2c58 <usb_handle_control_transfer+0x158>)
    2ba4:	f100 0208 	add.w	r2, r0, #8
    2ba8:	f100 0110 	add.w	r1, r0, #16
    2bac:	f7ff fbc2 	bl	2334 <usb_handle_request>
    2bb0:	b340      	cbz	r0, 2c04 <usb_handle_control_transfer+0x104>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    2bb2:	4b29      	ldr	r3, [pc, #164]	; (2c58 <usb_handle_control_transfer+0x158>)
    2bb4:	88da      	ldrh	r2, [r3, #6]
    2bb6:	6919      	ldr	r1, [r3, #16]
    2bb8:	428a      	cmp	r2, r1
    2bba:	bfa8      	it	ge
    2bbc:	460a      	movge	r2, r1
    2bbe:	60da      	str	r2, [r3, #12]
		usb_data_to_host();
    2bc0:	f7ff ff72 	bl	2aa8 <usb_data_to_host>
    2bc4:	e03c      	b.n	2c40 <usb_handle_control_transfer+0x140>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2bc6:	2080      	movs	r0, #128	; 0x80
    2bc8:	f003 ff9a 	bl	6b00 <usb_dc_ep_set_stall>
			return;
    2bcc:	e038      	b.n	2c40 <usb_handle_control_transfer+0x140>
    2bce:	4b23      	ldr	r3, [pc, #140]	; (2c5c <usb_handle_control_transfer+0x15c>)
    2bd0:	4a23      	ldr	r2, [pc, #140]	; (2c60 <usb_handle_control_transfer+0x160>)
    2bd2:	1a9b      	subs	r3, r3, r2
    2bd4:	08db      	lsrs	r3, r3, #3
				LOG_ERR("Request buffer too small");
    2bd6:	f04f 0100 	mov.w	r1, #0
    2bda:	2201      	movs	r2, #1
    2bdc:	f362 0102 	bfi	r1, r2, #0, #3
    2be0:	f36f 01c5 	bfc	r1, #3, #3
    2be4:	f363 118f 	bfi	r1, r3, #6, #10
    2be8:	481e      	ldr	r0, [pc, #120]	; (2c64 <usb_handle_control_transfer+0x164>)
    2bea:	f7fe ffbd 	bl	1b68 <log_0>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2bee:	2080      	movs	r0, #128	; 0x80
    2bf0:	f003 ff86 	bl	6b00 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    2bf4:	2000      	movs	r0, #0
    2bf6:	f003 ff83 	bl	6b00 <usb_dc_ep_set_stall>
				return;
    2bfa:	e021      	b.n	2c40 <usb_handle_control_transfer+0x140>
				usb_dev.data_buf_len = setup->wLength;
    2bfc:	4b16      	ldr	r3, [pc, #88]	; (2c58 <usb_handle_control_transfer+0x158>)
    2bfe:	6119      	str	r1, [r3, #16]
				usb_dev.data_buf_residue = setup->wLength;
    2c00:	60d9      	str	r1, [r3, #12]
				return;
    2c02:	e01d      	b.n	2c40 <usb_handle_control_transfer+0x140>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2c04:	2080      	movs	r0, #128	; 0x80
    2c06:	f003 ff7b 	bl	6b00 <usb_dc_ep_set_stall>
			return;
    2c0a:	e019      	b.n	2c40 <usb_handle_control_transfer+0x140>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    2c0c:	ab03      	add	r3, sp, #12
    2c0e:	2200      	movs	r2, #0
    2c10:	4911      	ldr	r1, [pc, #68]	; (2c58 <usb_handle_control_transfer+0x158>)
    2c12:	6889      	ldr	r1, [r1, #8]
    2c14:	4610      	mov	r0, r2
    2c16:	f00e fe94 	bl	11942 <usb_dc_ep_read>
    2c1a:	2800      	cmp	r0, #0
    2c1c:	da10      	bge.n	2c40 <usb_handle_control_transfer+0x140>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2c1e:	2080      	movs	r0, #128	; 0x80
    2c20:	f003 ff6e 	bl	6b00 <usb_dc_ep_set_stall>
			return;
    2c24:	e00c      	b.n	2c40 <usb_handle_control_transfer+0x140>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2c26:	2080      	movs	r0, #128	; 0x80
    2c28:	f003 ff6a 	bl	6b00 <usb_dc_ep_set_stall>
			usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    2c2c:	2000      	movs	r0, #0
    2c2e:	f003 ff67 	bl	6b00 <usb_dc_ep_set_stall>
			return;
    2c32:	e005      	b.n	2c40 <usb_handle_control_transfer+0x140>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2c34:	2080      	movs	r0, #128	; 0x80
    2c36:	f003 ff63 	bl	6b00 <usb_dc_ep_set_stall>
				return;
    2c3a:	e001      	b.n	2c40 <usb_handle_control_transfer+0x140>
	} else if (ep == USB_CONTROL_EP_IN) {
    2c3c:	2c80      	cmp	r4, #128	; 0x80
    2c3e:	d001      	beq.n	2c44 <usb_handle_control_transfer+0x144>
}
    2c40:	b004      	add	sp, #16
    2c42:	bd10      	pop	{r4, pc}
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    2c44:	4b04      	ldr	r3, [pc, #16]	; (2c58 <usb_handle_control_transfer+0x158>)
    2c46:	68db      	ldr	r3, [r3, #12]
    2c48:	b91b      	cbnz	r3, 2c52 <usb_handle_control_transfer+0x152>
    2c4a:	4b03      	ldr	r3, [pc, #12]	; (2c58 <usb_handle_control_transfer+0x158>)
    2c4c:	7d1b      	ldrb	r3, [r3, #20]
    2c4e:	2b00      	cmp	r3, #0
    2c50:	d0f6      	beq.n	2c40 <usb_handle_control_transfer+0x140>
			usb_data_to_host();
    2c52:	f7ff ff29 	bl	2aa8 <usb_data_to_host>
		__ASSERT_NO_MSG(false);
    2c56:	e7f3      	b.n	2c40 <usb_handle_control_transfer+0x140>
    2c58:	200012b8 	.word	0x200012b8
    2c5c:	00014378 	.word	0x00014378
    2c60:	00014318 	.word	0x00014318
    2c64:	000146b4 	.word	0x000146b4

00002c68 <usb_set_config>:

int usb_set_config(const uint8_t *device_descriptor)
{
    2c68:	b508      	push	{r3, lr}
	/* register descriptors */
	usb_register_descriptors(device_descriptor);
    2c6a:	f7ff fb7f 	bl	236c <usb_register_descriptors>

	/* register standard request handler */
	usb_register_request_handler(USB_REQTYPE_TYPE_STANDARD,
    2c6e:	4908      	ldr	r1, [pc, #32]	; (2c90 <usb_set_config+0x28>)
    2c70:	2000      	movs	r0, #0
    2c72:	f7ff fb73 	bl	235c <usb_register_request_handler>
				     usb_handle_standard_request);

	/* register class request handlers for each interface*/
	usb_register_request_handler(USB_REQTYPE_TYPE_CLASS, class_handler);
    2c76:	4907      	ldr	r1, [pc, #28]	; (2c94 <usb_set_config+0x2c>)
    2c78:	2001      	movs	r0, #1
    2c7a:	f7ff fb6f 	bl	235c <usb_register_request_handler>

	/* register vendor request handler */
	usb_register_request_handler(USB_REQTYPE_TYPE_VENDOR, vendor_handler);
    2c7e:	4906      	ldr	r1, [pc, #24]	; (2c98 <usb_set_config+0x30>)
    2c80:	2002      	movs	r0, #2
    2c82:	f7ff fb6b 	bl	235c <usb_register_request_handler>

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);
    2c86:	4805      	ldr	r0, [pc, #20]	; (2c9c <usb_set_config+0x34>)
    2c88:	f7ff fc12 	bl	24b0 <usb_register_custom_req_handler>

	return 0;
}
    2c8c:	2000      	movs	r0, #0
    2c8e:	bd08      	pop	{r3, pc}
    2c90:	00002949 	.word	0x00002949
    2c94:	0000252d 	.word	0x0000252d
    2c98:	0000260d 	.word	0x0000260d
    2c9c:	0000258d 	.word	0x0000258d

00002ca0 <usb_device_init>:
/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(const struct device *dev)
{
    2ca0:	b508      	push	{r3, lr}
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
    2ca2:	4b10      	ldr	r3, [pc, #64]	; (2ce4 <usb_device_init+0x44>)
    2ca4:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
    2ca8:	b10b      	cbz	r3, 2cae <usb_device_init+0xe>
		return 0;
    2caa:	2000      	movs	r0, #0
	}

	usb_set_config(device_descriptor);

	return 0;
}
    2cac:	bd08      	pop	{r3, pc}
	device_descriptor = usb_get_device_descriptor();
    2cae:	f000 f9d7 	bl	3060 <usb_get_device_descriptor>
	if (!device_descriptor) {
    2cb2:	b118      	cbz	r0, 2cbc <usb_device_init+0x1c>
	usb_set_config(device_descriptor);
    2cb4:	f7ff ffd8 	bl	2c68 <usb_set_config>
	return 0;
    2cb8:	2000      	movs	r0, #0
    2cba:	e7f7      	b.n	2cac <usb_device_init+0xc>
    2cbc:	4b0a      	ldr	r3, [pc, #40]	; (2ce8 <usb_device_init+0x48>)
    2cbe:	4a0b      	ldr	r2, [pc, #44]	; (2cec <usb_device_init+0x4c>)
    2cc0:	1a9b      	subs	r3, r3, r2
    2cc2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to configure USB device stack");
    2cc4:	f04f 0100 	mov.w	r1, #0
    2cc8:	2201      	movs	r2, #1
    2cca:	f362 0102 	bfi	r1, r2, #0, #3
    2cce:	f36f 01c5 	bfc	r1, #3, #3
    2cd2:	f363 118f 	bfi	r1, r3, #6, #10
    2cd6:	4806      	ldr	r0, [pc, #24]	; (2cf0 <usb_device_init+0x50>)
    2cd8:	f7fe ff46 	bl	1b68 <log_0>
		return -1;
    2cdc:	f04f 30ff 	mov.w	r0, #4294967295
    2ce0:	e7e4      	b.n	2cac <usb_device_init+0xc>
    2ce2:	bf00      	nop
    2ce4:	200012b8 	.word	0x200012b8
    2ce8:	00014378 	.word	0x00014378
    2cec:	00014318 	.word	0x00014318
    2cf0:	000146d0 	.word	0x000146d0

00002cf4 <usb_enable>:
{
    2cf4:	b530      	push	{r4, r5, lr}
    2cf6:	b083      	sub	sp, #12
    2cf8:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
    2cfa:	f04f 32ff 	mov.w	r2, #4294967295
    2cfe:	f04f 33ff 	mov.w	r3, #4294967295
    2d02:	482d      	ldr	r0, [pc, #180]	; (2db8 <usb_enable+0xc4>)
    2d04:	f00b f868 	bl	ddd8 <z_impl_k_mutex_lock>
	if (usb_dev.enabled == true) {
    2d08:	4b2c      	ldr	r3, [pc, #176]	; (2dbc <usb_enable+0xc8>)
    2d0a:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
    2d0e:	2b00      	cmp	r3, #0
    2d10:	d14a      	bne.n	2da8 <usb_enable+0xb4>
	ret = usb_vbus_set(true);
    2d12:	2001      	movs	r0, #1
    2d14:	f00d fe46 	bl	109a4 <usb_vbus_set>
	if (ret < 0) {
    2d18:	1e04      	subs	r4, r0, #0
    2d1a:	db46      	blt.n	2daa <usb_enable+0xb6>
	usb_dev.user_status_callback = status_cb;
    2d1c:	4b27      	ldr	r3, [pc, #156]	; (2dbc <usb_enable+0xc8>)
    2d1e:	621d      	str	r5, [r3, #32]
	usb_register_status_callback(forward_status_cb);
    2d20:	4c27      	ldr	r4, [pc, #156]	; (2dc0 <usb_enable+0xcc>)
    2d22:	4620      	mov	r0, r4
    2d24:	f7ff fbca 	bl	24bc <usb_register_status_callback>
	usb_dc_set_status_callback(forward_status_cb);
    2d28:	4620      	mov	r0, r4
    2d2a:	f004 f9d7 	bl	70dc <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    2d2e:	f003 fe0b 	bl	6948 <usb_dc_attach>
	if (ret < 0) {
    2d32:	1e04      	subs	r4, r0, #0
    2d34:	db39      	blt.n	2daa <usb_enable+0xb6>
	ret = usb_transfer_init();
    2d36:	f000 fbbd 	bl	34b4 <usb_transfer_init>
	if (ret < 0) {
    2d3a:	1e04      	subs	r4, r0, #0
    2d3c:	db35      	blt.n	2daa <usb_enable+0xb6>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    2d3e:	2340      	movs	r3, #64	; 0x40
    2d40:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    2d44:	2300      	movs	r3, #0
    2d46:	f88d 3004 	strb.w	r3, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    2d4a:	f88d 3000 	strb.w	r3, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    2d4e:	4668      	mov	r0, sp
    2d50:	f003 fe98 	bl	6a84 <usb_dc_ep_configure>
	if (ret < 0) {
    2d54:	1e04      	subs	r4, r0, #0
    2d56:	db28      	blt.n	2daa <usb_enable+0xb6>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    2d58:	2380      	movs	r3, #128	; 0x80
    2d5a:	f88d 3000 	strb.w	r3, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    2d5e:	4668      	mov	r0, sp
    2d60:	f003 fe90 	bl	6a84 <usb_dc_ep_configure>
	if (ret < 0) {
    2d64:	1e04      	subs	r4, r0, #0
    2d66:	db20      	blt.n	2daa <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    2d68:	4916      	ldr	r1, [pc, #88]	; (2dc4 <usb_enable+0xd0>)
    2d6a:	2000      	movs	r0, #0
    2d6c:	f004 f9a2 	bl	70b4 <usb_dc_ep_set_callback>
	if (ret < 0) {
    2d70:	1e04      	subs	r4, r0, #0
    2d72:	db1a      	blt.n	2daa <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    2d74:	4913      	ldr	r1, [pc, #76]	; (2dc4 <usb_enable+0xd0>)
    2d76:	2080      	movs	r0, #128	; 0x80
    2d78:	f004 f99c 	bl	70b4 <usb_dc_ep_set_callback>
	if (ret < 0) {
    2d7c:	1e04      	subs	r4, r0, #0
    2d7e:	db14      	blt.n	2daa <usb_enable+0xb6>
	ret = composite_setup_ep_cb();
    2d80:	f7ff fe1a 	bl	29b8 <composite_setup_ep_cb>
	if (ret < 0) {
    2d84:	1e04      	subs	r4, r0, #0
    2d86:	db10      	blt.n	2daa <usb_enable+0xb6>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    2d88:	2000      	movs	r0, #0
    2d8a:	f003 ff49 	bl	6c20 <usb_dc_ep_enable>
	if (ret < 0) {
    2d8e:	1e04      	subs	r4, r0, #0
    2d90:	db0b      	blt.n	2daa <usb_enable+0xb6>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    2d92:	2080      	movs	r0, #128	; 0x80
    2d94:	f003 ff44 	bl	6c20 <usb_dc_ep_enable>
	if (ret < 0) {
    2d98:	1e04      	subs	r4, r0, #0
    2d9a:	db06      	blt.n	2daa <usb_enable+0xb6>
	usb_dev.enabled = true;
    2d9c:	4b07      	ldr	r3, [pc, #28]	; (2dbc <usb_enable+0xc8>)
    2d9e:	2201      	movs	r2, #1
    2da0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	ret = 0;
    2da4:	2400      	movs	r4, #0
    2da6:	e000      	b.n	2daa <usb_enable+0xb6>
		ret = 0;
    2da8:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
    2daa:	4803      	ldr	r0, [pc, #12]	; (2db8 <usb_enable+0xc4>)
    2dac:	f00b f89e 	bl	deec <z_impl_k_mutex_unlock>
}
    2db0:	4620      	mov	r0, r4
    2db2:	b003      	add	sp, #12
    2db4:	bd30      	pop	{r4, r5, pc}
    2db6:	bf00      	nop
    2db8:	200003c8 	.word	0x200003c8
    2dbc:	200012b8 	.word	0x200012b8
    2dc0:	00002a1d 	.word	0x00002a1d
    2dc4:	00002b01 	.word	0x00002b01

00002dc8 <usb_get_cfg_data>:
 * The interface descriptor of a USB function must be assigned to the
 * usb_cfg_data so that usb_ep_cfg_data and matching endpoint descriptor
 * can be found.
 */
static struct usb_cfg_data *usb_get_cfg_data(struct usb_if_descriptor *iface)
{
    2dc8:	b410      	push	{r4}
	size_t length = (__usb_data_end - __usb_data_start);
    2dca:	4c0e      	ldr	r4, [pc, #56]	; (2e04 <usb_get_cfg_data+0x3c>)
    2dcc:	4b0e      	ldr	r3, [pc, #56]	; (2e08 <usb_get_cfg_data+0x40>)
    2dce:	1ae4      	subs	r4, r4, r3
    2dd0:	10a3      	asrs	r3, r4, #2
    2dd2:	4c0e      	ldr	r4, [pc, #56]	; (2e0c <usb_get_cfg_data+0x44>)
    2dd4:	fb04 f403 	mul.w	r4, r4, r3

	for (size_t i = 0; i < length; i++) {
    2dd8:	2300      	movs	r3, #0
    2dda:	42a3      	cmp	r3, r4
    2ddc:	d20e      	bcs.n	2dfc <usb_get_cfg_data+0x34>
		if (__usb_data_start[i].interface_descriptor == iface) {
    2dde:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
    2de2:	4909      	ldr	r1, [pc, #36]	; (2e08 <usb_get_cfg_data+0x40>)
    2de4:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2de8:	6852      	ldr	r2, [r2, #4]
    2dea:	4282      	cmp	r2, r0
    2dec:	d001      	beq.n	2df2 <usb_get_cfg_data+0x2a>
	for (size_t i = 0; i < length; i++) {
    2dee:	3301      	adds	r3, #1
    2df0:	e7f3      	b.n	2dda <usb_get_cfg_data+0x12>
			return &__usb_data_start[i];
    2df2:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    2df6:	eb01 0083 	add.w	r0, r1, r3, lsl #2
    2dfa:	e000      	b.n	2dfe <usb_get_cfg_data+0x36>
		}
	}

	return NULL;
    2dfc:	2000      	movs	r0, #0
}
    2dfe:	bc10      	pop	{r4}
    2e00:	4770      	bx	lr
    2e02:	bf00      	nop
    2e04:	200004e0 	.word	0x200004e0
    2e08:	200004bc 	.word	0x200004bc
    2e0c:	38e38e39 	.word	0x38e38e39

00002e10 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    2e10:	b530      	push	{r4, r5, lr}
    2e12:	b08b      	sub	sp, #44	; 0x2c
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    2e14:	ac01      	add	r4, sp, #4
    2e16:	4d1b      	ldr	r5, [pc, #108]	; (2e84 <usb_update_sn_string_descriptor+0x74>)
    2e18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2e1c:	682b      	ldr	r3, [r5, #0]
    2e1e:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    2e20:	2210      	movs	r2, #16
    2e22:	2100      	movs	r1, #0
    2e24:	a806      	add	r0, sp, #24
    2e26:	f00e fa05 	bl	11234 <memset>
	memset(sn, 0, sizeof(sn));
    2e2a:	2212      	movs	r2, #18
    2e2c:	2100      	movs	r1, #0
    2e2e:	4816      	ldr	r0, [pc, #88]	; (2e88 <usb_update_sn_string_descriptor+0x78>)
    2e30:	f00e fa00 	bl	11234 <memset>
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    2e34:	2110      	movs	r1, #16
    2e36:	a806      	add	r0, sp, #24
    2e38:	f00e fec3 	bl	11bc2 <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    2e3c:	2800      	cmp	r0, #0
    2e3e:	dd1d      	ble.n	2e7c <usb_update_sn_string_descriptor+0x6c>
		skip = MAX(0, hwlen - usblen);
    2e40:	3808      	subs	r0, #8
    2e42:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    2e46:	2200      	movs	r2, #0
    2e48:	e016      	b.n	2e78 <usb_update_sn_string_descriptor+0x68>
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    2e4a:	18a3      	adds	r3, r4, r2
    2e4c:	a90a      	add	r1, sp, #40	; 0x28
    2e4e:	440b      	add	r3, r1
    2e50:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    2e54:	0051      	lsls	r1, r2, #1
    2e56:	a80a      	add	r0, sp, #40	; 0x28
    2e58:	eb00 1013 	add.w	r0, r0, r3, lsr #4
    2e5c:	f810 5c24 	ldrb.w	r5, [r0, #-36]
    2e60:	4809      	ldr	r0, [pc, #36]	; (2e88 <usb_update_sn_string_descriptor+0x78>)
    2e62:	f800 5012 	strb.w	r5, [r0, r2, lsl #1]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    2e66:	f003 030f 	and.w	r3, r3, #15
    2e6a:	3101      	adds	r1, #1
    2e6c:	ad0a      	add	r5, sp, #40	; 0x28
    2e6e:	442b      	add	r3, r5
    2e70:	f813 3c24 	ldrb.w	r3, [r3, #-36]
    2e74:	5443      	strb	r3, [r0, r1]
		for (int i = 0; i < usblen; i++) {
    2e76:	3201      	adds	r2, #1
    2e78:	2a07      	cmp	r2, #7
    2e7a:	dde6      	ble.n	2e4a <usb_update_sn_string_descriptor+0x3a>
		}
	}

	return sn;
}
    2e7c:	4802      	ldr	r0, [pc, #8]	; (2e88 <usb_update_sn_string_descriptor+0x78>)
    2e7e:	b00b      	add	sp, #44	; 0x2c
    2e80:	bd30      	pop	{r4, r5, pc}
    2e82:	bf00      	nop
    2e84:	00014704 	.word	0x00014704
    2e88:	2000137c 	.word	0x2000137c

00002e8c <usb_fix_ascii_sn_string_descriptor>:

static void usb_fix_ascii_sn_string_descriptor(struct usb_sn_descriptor *sn)
{
    2e8c:	b570      	push	{r4, r5, r6, lr}
    2e8e:	4604      	mov	r4, r0
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    2e90:	f7ff ffbe 	bl	2e10 <usb_update_sn_string_descriptor>
	int runtime_sn_len, default_sn_len;

	if (!runtime_sn) {
    2e94:	b120      	cbz	r0, 2ea0 <usb_fix_ascii_sn_string_descriptor+0x14>
    2e96:	4605      	mov	r5, r0
		return;
	}

	runtime_sn_len = strlen(runtime_sn);
    2e98:	f00e f95a 	bl	11150 <strlen>
	if (!runtime_sn_len) {
    2e9c:	4606      	mov	r6, r0
    2e9e:	b900      	cbnz	r0, 2ea2 <usb_fix_ascii_sn_string_descriptor+0x16>
			"length as CONFIG_USB_DEVICE_SN");
		return;
	}

	memcpy(sn->bString, runtime_sn, runtime_sn_len);
}
    2ea0:	bd70      	pop	{r4, r5, r6, pc}
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    2ea2:	480e      	ldr	r0, [pc, #56]	; (2edc <usb_fix_ascii_sn_string_descriptor+0x50>)
    2ea4:	f00e f954 	bl	11150 <strlen>
	if (runtime_sn_len != default_sn_len) {
    2ea8:	4286      	cmp	r6, r0
    2eaa:	d010      	beq.n	2ece <usb_fix_ascii_sn_string_descriptor+0x42>
    2eac:	4b0c      	ldr	r3, [pc, #48]	; (2ee0 <usb_fix_ascii_sn_string_descriptor+0x54>)
    2eae:	4a0d      	ldr	r2, [pc, #52]	; (2ee4 <usb_fix_ascii_sn_string_descriptor+0x58>)
    2eb0:	1a9b      	subs	r3, r3, r2
    2eb2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("the new SN descriptor doesn't have the same "
    2eb4:	f04f 0100 	mov.w	r1, #0
    2eb8:	2201      	movs	r2, #1
    2eba:	f362 0102 	bfi	r1, r2, #0, #3
    2ebe:	f36f 01c5 	bfc	r1, #3, #3
    2ec2:	f363 118f 	bfi	r1, r3, #6, #10
    2ec6:	4808      	ldr	r0, [pc, #32]	; (2ee8 <usb_fix_ascii_sn_string_descriptor+0x5c>)
    2ec8:	f7fe fe4e 	bl	1b68 <log_0>
		return;
    2ecc:	e7e8      	b.n	2ea0 <usb_fix_ascii_sn_string_descriptor+0x14>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    2ece:	4632      	mov	r2, r6
    2ed0:	4629      	mov	r1, r5
    2ed2:	1ca0      	adds	r0, r4, #2
    2ed4:	f00e f98a 	bl	111ec <memcpy>
    2ed8:	e7e2      	b.n	2ea0 <usb_fix_ascii_sn_string_descriptor+0x14>
    2eda:	bf00      	nop
    2edc:	00014704 	.word	0x00014704
    2ee0:	00014370 	.word	0x00014370
    2ee4:	00014318 	.word	0x00014318
    2ee8:	00014718 	.word	0x00014718

00002eec <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
    2eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2ef0:	b082      	sub	sp, #8
    2ef2:	4604      	mov	r4, r0
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	uint8_t numof_ifaces = 0U;
	uint8_t str_descr_idx = 0U;
	uint32_t requested_ep = BIT(16) | BIT(0);
    2ef4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    2ef8:	9301      	str	r3, [sp, #4]
	uint8_t str_descr_idx = 0U;
    2efa:	2500      	movs	r5, #0
	uint8_t numof_ifaces = 0U;
    2efc:	462f      	mov	r7, r5
	struct usb_cfg_data *cfg_data = NULL;
    2efe:	46a8      	mov	r8, r5
	struct usb_cfg_descriptor *cfg_descr = NULL;
    2f00:	462e      	mov	r6, r5

	while (head->bLength != 0U) {
    2f02:	e062      	b.n	2fca <usb_fix_descriptor+0xde>
			LOG_DBG("Association descriptor %p", head);
			break;
		case USB_DESC_INTERFACE:
			if_descr = (struct usb_if_descriptor *)head;
			LOG_DBG("Interface descriptor %p", head);
			if (if_descr->bAlternateSetting) {
    2f04:	78e3      	ldrb	r3, [r4, #3]
    2f06:	2b00      	cmp	r3, #0
    2f08:	d15d      	bne.n	2fc6 <usb_fix_descriptor+0xda>
				LOG_DBG("Skip alternate interface");
				break;
			}

			if (if_descr->bInterfaceNumber == 0U) {
    2f0a:	78a3      	ldrb	r3, [r4, #2]
    2f0c:	b94b      	cbnz	r3, 2f22 <usb_fix_descriptor+0x36>
				cfg_data = usb_get_cfg_data(if_descr);
    2f0e:	4620      	mov	r0, r4
    2f10:	f7ff ff5a 	bl	2dc8 <usb_get_cfg_data>
				if (!cfg_data) {
    2f14:	4680      	mov	r8, r0
    2f16:	b138      	cbz	r0, 2f28 <usb_fix_descriptor+0x3c>
					LOG_ERR("There is no usb_cfg_data "
						"for %p", head);
					return -1;
				}

				if (cfg_data->interface_config) {
    2f18:	6883      	ldr	r3, [r0, #8]
    2f1a:	b113      	cbz	r3, 2f22 <usb_fix_descriptor+0x36>
					cfg_data->interface_config(head,
    2f1c:	4639      	mov	r1, r7
    2f1e:	4620      	mov	r0, r4
    2f20:	4798      	blx	r3
							numof_ifaces);
				}
			}

			numof_ifaces++;
    2f22:	3701      	adds	r7, #1
    2f24:	b2ff      	uxtb	r7, r7
			break;
    2f26:	e04e      	b.n	2fc6 <usb_fix_descriptor+0xda>
    2f28:	4b46      	ldr	r3, [pc, #280]	; (3044 <CONFIG_USB_DEVICE_VID+0x61>)
    2f2a:	4a47      	ldr	r2, [pc, #284]	; (3048 <CONFIG_USB_DEVICE_VID+0x65>)
    2f2c:	1a9b      	subs	r3, r3, r2
    2f2e:	08db      	lsrs	r3, r3, #3
					LOG_ERR("There is no usb_cfg_data "
    2f30:	f04f 0200 	mov.w	r2, #0
    2f34:	2101      	movs	r1, #1
    2f36:	f361 0202 	bfi	r2, r1, #0, #3
    2f3a:	f36f 02c5 	bfc	r2, #3, #3
    2f3e:	f363 128f 	bfi	r2, r3, #6, #10
    2f42:	4621      	mov	r1, r4
    2f44:	4841      	ldr	r0, [pc, #260]	; (304c <CONFIG_USB_DEVICE_VID+0x69>)
    2f46:	f7fe fd7b 	bl	1a40 <log_1>
					return -1;
    2f4a:	f04f 30ff 	mov.w	r0, #4294967295
    2f4e:	e073      	b.n	3038 <CONFIG_USB_DEVICE_VID+0x55>
		case USB_DESC_ENDPOINT:
			if (!cfg_data) {
    2f50:	f1b8 0f00 	cmp.w	r8, #0
    2f54:	d018      	beq.n	2f88 <usb_fix_descriptor+0x9c>
				return -1;
			}

			LOG_DBG("Endpoint descriptor %p", head);
			ep_descr = (struct usb_ep_descriptor *)head;
			if (usb_validate_ep_cfg_data(ep_descr,
    2f56:	aa01      	add	r2, sp, #4
    2f58:	4641      	mov	r1, r8
    2f5a:	4620      	mov	r0, r4
    2f5c:	f00d fdd0 	bl	10b00 <usb_validate_ep_cfg_data>
    2f60:	b388      	cbz	r0, 2fc6 <usb_fix_descriptor+0xda>
    2f62:	4b38      	ldr	r3, [pc, #224]	; (3044 <CONFIG_USB_DEVICE_VID+0x61>)
    2f64:	4a38      	ldr	r2, [pc, #224]	; (3048 <CONFIG_USB_DEVICE_VID+0x65>)
    2f66:	1a9b      	subs	r3, r3, r2
    2f68:	08db      	lsrs	r3, r3, #3
						     cfg_data,
						     &requested_ep)) {
				LOG_ERR("Failed to validate endpoints");
    2f6a:	f04f 0100 	mov.w	r1, #0
    2f6e:	2201      	movs	r2, #1
    2f70:	f362 0102 	bfi	r1, r2, #0, #3
    2f74:	f36f 01c5 	bfc	r1, #3, #3
    2f78:	f363 118f 	bfi	r1, r3, #6, #10
    2f7c:	4834      	ldr	r0, [pc, #208]	; (3050 <CONFIG_USB_DEVICE_VID+0x6d>)
    2f7e:	f7fe fdf3 	bl	1b68 <log_0>
				return -1;
    2f82:	f04f 30ff 	mov.w	r0, #4294967295
    2f86:	e057      	b.n	3038 <CONFIG_USB_DEVICE_VID+0x55>
    2f88:	4b2e      	ldr	r3, [pc, #184]	; (3044 <CONFIG_USB_DEVICE_VID+0x61>)
    2f8a:	4a2f      	ldr	r2, [pc, #188]	; (3048 <CONFIG_USB_DEVICE_VID+0x65>)
    2f8c:	1a9b      	subs	r3, r3, r2
    2f8e:	08db      	lsrs	r3, r3, #3
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
    2f90:	f04f 0100 	mov.w	r1, #0
    2f94:	2201      	movs	r2, #1
    2f96:	f362 0102 	bfi	r1, r2, #0, #3
    2f9a:	f36f 01c5 	bfc	r1, #3, #3
    2f9e:	f363 118f 	bfi	r1, r3, #6, #10
    2fa2:	482c      	ldr	r0, [pc, #176]	; (3054 <CONFIG_USB_DEVICE_VID+0x71>)
    2fa4:	f7fe fde0 	bl	1b68 <log_0>
				return -1;
    2fa8:	f04f 30ff 	mov.w	r0, #4294967295
    2fac:	e044      	b.n	3038 <CONFIG_USB_DEVICE_VID+0x55>
		case 0:
		case USB_DESC_STRING:
			/*
			 * Copy runtime SN string descriptor first, if has
			 */
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    2fae:	2d03      	cmp	r5, #3
    2fb0:	d020      	beq.n	2ff4 <CONFIG_USB_DEVICE_VID+0x11>
			}
			/*
			 * Skip language descriptor but correct
			 * wTotalLength and bNumInterfaces once.
			 */
			if (str_descr_idx) {
    2fb2:	bb1d      	cbnz	r5, 2ffc <CONFIG_USB_DEVICE_VID+0x19>
				ascii7_to_utf16le(head);
			} else {
				if (!cfg_descr) {
    2fb4:	b336      	cbz	r6, 3004 <CONFIG_USB_DEVICE_VID+0x21>
					return -1;
				}

				LOG_DBG("Now the wTotalLength is %zd",
					(uint8_t *)head - (uint8_t *)cfg_descr);
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    2fb6:	1ba3      	subs	r3, r4, r6
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    2fb8:	70b3      	strb	r3, [r6, #2]
	dst[1] = val >> 8;
    2fba:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2fbe:	70f3      	strb	r3, [r6, #3]
					     (uint8_t *)&cfg_descr->wTotalLength);
				cfg_descr->bNumInterfaces = numof_ifaces;
    2fc0:	7137      	strb	r7, [r6, #4]
			}

			str_descr_idx += 1U;
    2fc2:	3501      	adds	r5, #1
    2fc4:	b2ed      	uxtb	r5, r5
		default:
			break;
		}

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    2fc6:	7823      	ldrb	r3, [r4, #0]
    2fc8:	441c      	add	r4, r3
	while (head->bLength != 0U) {
    2fca:	7823      	ldrb	r3, [r4, #0]
    2fcc:	b37b      	cbz	r3, 302e <CONFIG_USB_DEVICE_VID+0x4b>
		switch (head->bDescriptorType) {
    2fce:	7863      	ldrb	r3, [r4, #1]
    2fd0:	2b05      	cmp	r3, #5
    2fd2:	d8f8      	bhi.n	2fc6 <usb_fix_descriptor+0xda>
    2fd4:	a201      	add	r2, pc, #4	; (adr r2, 2fdc <usb_fix_descriptor+0xf0>)
    2fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2fda:	bf00      	nop
    2fdc:	00002faf 	.word	0x00002faf
    2fe0:	00002fc7 	.word	0x00002fc7
    2fe4:	0000302b 	.word	0x0000302b
    2fe8:	00002faf 	.word	0x00002faf
    2fec:	00002f05 	.word	0x00002f05
    2ff0:	00002f51 	.word	0x00002f51
				usb_fix_ascii_sn_string_descriptor(sn);
    2ff4:	4620      	mov	r0, r4
    2ff6:	f7ff ff49 	bl	2e8c <usb_fix_ascii_sn_string_descriptor>
    2ffa:	e7da      	b.n	2fb2 <usb_fix_descriptor+0xc6>
				ascii7_to_utf16le(head);
    2ffc:	4620      	mov	r0, r4
    2ffe:	f00d fd6b 	bl	10ad8 <ascii7_to_utf16le>
    3002:	e7de      	b.n	2fc2 <usb_fix_descriptor+0xd6>
    3004:	4b0f      	ldr	r3, [pc, #60]	; (3044 <CONFIG_USB_DEVICE_VID+0x61>)
    3006:	4a10      	ldr	r2, [pc, #64]	; (3048 <CONFIG_USB_DEVICE_VID+0x65>)
    3008:	1a9b      	subs	r3, r3, r2
    300a:	08db      	lsrs	r3, r3, #3
					LOG_ERR("Incomplete device descriptor");
    300c:	f04f 0100 	mov.w	r1, #0
    3010:	2201      	movs	r2, #1
    3012:	f362 0102 	bfi	r1, r2, #0, #3
    3016:	f36f 01c5 	bfc	r1, #3, #3
    301a:	f363 118f 	bfi	r1, r3, #6, #10
    301e:	480e      	ldr	r0, [pc, #56]	; (3058 <CONFIG_USB_DEVICE_VID+0x75>)
    3020:	f7fe fda2 	bl	1b68 <log_0>
					return -1;
    3024:	f04f 30ff 	mov.w	r0, #4294967295
    3028:	e006      	b.n	3038 <CONFIG_USB_DEVICE_VID+0x55>
			cfg_descr = (struct usb_cfg_descriptor *)head;
    302a:	4626      	mov	r6, r4
    302c:	e7cb      	b.n	2fc6 <usb_fix_descriptor+0xda>
	}

	if ((head + 1) != __usb_descriptor_end) {
    302e:	1ca0      	adds	r0, r4, #2
    3030:	4b0a      	ldr	r3, [pc, #40]	; (305c <CONFIG_USB_DEVICE_VID+0x79>)
    3032:	4298      	cmp	r0, r3
    3034:	d103      	bne.n	303e <CONFIG_USB_DEVICE_VID+0x5b>
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
	}

	return 0;
    3036:	2000      	movs	r0, #0
}
    3038:	b002      	add	sp, #8
    303a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return usb_fix_descriptor(head + 1);
    303e:	f7ff ff55 	bl	2eec <usb_fix_descriptor>
    3042:	e7f9      	b.n	3038 <CONFIG_USB_DEVICE_VID+0x55>
    3044:	00014370 	.word	0x00014370
    3048:	00014318 	.word	0x00014318
    304c:	00014764 	.word	0x00014764
    3050:	000147c8 	.word	0x000147c8
    3054:	00014784 	.word	0x00014784
    3058:	000147e8 	.word	0x000147e8
    305c:	200004bb 	.word	0x200004bb

00003060 <usb_get_device_descriptor>:


uint8_t *usb_get_device_descriptor(void)
{
    3060:	b508      	push	{r3, lr}
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
    3062:	480c      	ldr	r0, [pc, #48]	; (3094 <usb_get_device_descriptor+0x34>)
    3064:	f7ff ff42 	bl	2eec <usb_fix_descriptor>
    3068:	b908      	cbnz	r0, 306e <usb_get_device_descriptor+0xe>
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
    306a:	480a      	ldr	r0, [pc, #40]	; (3094 <usb_get_device_descriptor+0x34>)
}
    306c:	bd08      	pop	{r3, pc}
    306e:	4b0a      	ldr	r3, [pc, #40]	; (3098 <usb_get_device_descriptor+0x38>)
    3070:	4a0a      	ldr	r2, [pc, #40]	; (309c <usb_get_device_descriptor+0x3c>)
    3072:	1a9b      	subs	r3, r3, r2
    3074:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to fixup USB descriptor");
    3076:	f04f 0100 	mov.w	r1, #0
    307a:	2201      	movs	r2, #1
    307c:	f362 0102 	bfi	r1, r2, #0, #3
    3080:	f36f 01c5 	bfc	r1, #3, #3
    3084:	f363 118f 	bfi	r1, r3, #6, #10
    3088:	4805      	ldr	r0, [pc, #20]	; (30a0 <usb_get_device_descriptor+0x40>)
    308a:	f7fe fd6d 	bl	1b68 <log_0>
		return NULL;
    308e:	2000      	movs	r0, #0
    3090:	e7ec      	b.n	306c <usb_get_device_descriptor+0xc>
    3092:	bf00      	nop
    3094:	200003fc 	.word	0x200003fc
    3098:	00014370 	.word	0x00014370
    309c:	00014318 	.word	0x00014318
    30a0:	00014808 	.word	0x00014808

000030a4 <usb_ep_get_transfer>:
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    30a4:	2300      	movs	r3, #0
    30a6:	e000      	b.n	30aa <usb_ep_get_transfer+0x6>
    30a8:	3301      	adds	r3, #1
    30aa:	2b03      	cmp	r3, #3
    30ac:	dc0c      	bgt.n	30c8 <usb_ep_get_transfer+0x24>
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    30ae:	019a      	lsls	r2, r3, #6
    30b0:	4906      	ldr	r1, [pc, #24]	; (30cc <usb_ep_get_transfer+0x28>)
    30b2:	5c8a      	ldrb	r2, [r1, r2]
    30b4:	4282      	cmp	r2, r0
    30b6:	d1f7      	bne.n	30a8 <usb_ep_get_transfer+0x4>
    30b8:	eb01 1283 	add.w	r2, r1, r3, lsl #6
    30bc:	6852      	ldr	r2, [r2, #4]
    30be:	2a00      	cmp	r2, #0
    30c0:	d0f2      	beq.n	30a8 <usb_ep_get_transfer+0x4>
			return &ut_data[i];
    30c2:	eb01 1083 	add.w	r0, r1, r3, lsl #6
    30c6:	4770      	bx	lr
		}
	}

	return NULL;
    30c8:	2000      	movs	r0, #0
}
    30ca:	4770      	bx	lr
    30cc:	20001390 	.word	0x20001390

000030d0 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    30d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    30d4:	b082      	sub	sp, #8
    30d6:	4604      	mov	r4, r0
	int ret = 0;
	uint32_t bytes;
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;
    30d8:	f810 5c2c 	ldrb.w	r5, [r0, #-44]

	if (trans->status != -EBUSY) {
    30dc:	f850 3c28 	ldr.w	r3, [r0, #-40]
    30e0:	f113 0f10 	cmn.w	r3, #16
    30e4:	d10c      	bne.n	3100 <usb_transfer_work+0x30>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    30e6:	6903      	ldr	r3, [r0, #16]
    30e8:	f013 0f02 	tst.w	r3, #2
    30ec:	d062      	beq.n	31b4 <usb_transfer_work+0xe4>
		if (!trans->bsize) {
    30ee:	f850 2c20 	ldr.w	r2, [r0, #-32]
    30f2:	bb82      	cbnz	r2, 3156 <usb_transfer_work+0x86>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    30f4:	f013 0f04 	tst.w	r3, #4
    30f8:	d026      	beq.n	3148 <usb_transfer_work+0x78>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
			}
			trans->status = 0;
    30fa:	2300      	movs	r3, #0
    30fc:	f844 3c28 	str.w	r3, [r4, #-40]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    3100:	f854 3c28 	ldr.w	r3, [r4, #-40]
    3104:	f113 0f10 	cmn.w	r3, #16
    3108:	d01b      	beq.n	3142 <usb_transfer_work+0x72>
    310a:	f854 6c18 	ldr.w	r6, [r4, #-24]
    310e:	b1c6      	cbz	r6, 3142 <usb_transfer_work+0x72>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    3110:	f854 7c1c 	ldr.w	r7, [r4, #-28]
		void *priv = trans->priv;
    3114:	f854 8c14 	ldr.w	r8, [r4, #-20]

		if (k_is_in_isr()) {
    3118:	f010 fbc6 	bl	138a8 <k_is_in_isr>
    311c:	2800      	cmp	r0, #0
    311e:	f040 808f 	bne.w	3240 <usb_transfer_work+0x170>
		}

		LOG_DBG("Transfer done, ep 0x%02x, status %d, size %zu",
			trans->ep, trans->status, trans->tsize);

		trans->cb = NULL;
    3122:	2300      	movs	r3, #0
    3124:	f844 3c18 	str.w	r3, [r4, #-24]
		k_sem_give(&trans->sem);
    3128:	f1a4 0010 	sub.w	r0, r4, #16
	z_impl_k_sem_give(sem);
    312c:	f00a ff5e 	bl	dfec <z_impl_k_sem_give>

		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
    3130:	f854 3c28 	ldr.w	r3, [r4, #-40]
    3134:	f113 0f8c 	cmn.w	r3, #140	; 0x8c
    3138:	d003      	beq.n	3142 <usb_transfer_work+0x72>
			cb(ep, tsize, priv);
    313a:	4642      	mov	r2, r8
    313c:	4639      	mov	r1, r7
    313e:	4628      	mov	r0, r5
    3140:	47b0      	blx	r6
		}
	}
}
    3142:	b002      	add	sp, #8
    3144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_write(ep, NULL, 0, NULL);
    3148:	2300      	movs	r3, #0
    314a:	461a      	mov	r2, r3
    314c:	4619      	mov	r1, r3
    314e:	4628      	mov	r0, r5
    3150:	f00d fca3 	bl	10a9a <usb_write>
    3154:	e7d1      	b.n	30fa <usb_transfer_work+0x2a>
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    3156:	ab01      	add	r3, sp, #4
    3158:	f850 1c24 	ldr.w	r1, [r0, #-36]
    315c:	4628      	mov	r0, r5
    315e:	f00d fc9c 	bl	10a9a <usb_write>
		if (ret) {
    3162:	4601      	mov	r1, r0
    3164:	b980      	cbnz	r0, 3188 <usb_transfer_work+0xb8>
		trans->buffer += bytes;
    3166:	f854 3c24 	ldr.w	r3, [r4, #-36]
    316a:	9a01      	ldr	r2, [sp, #4]
    316c:	4413      	add	r3, r2
    316e:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    3172:	f854 3c20 	ldr.w	r3, [r4, #-32]
    3176:	1a9b      	subs	r3, r3, r2
    3178:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    317c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    3180:	4413      	add	r3, r2
    3182:	f844 3c1c 	str.w	r3, [r4, #-28]
    3186:	e7bb      	b.n	3100 <usb_transfer_work+0x30>
    3188:	4a30      	ldr	r2, [pc, #192]	; (324c <usb_transfer_work+0x17c>)
    318a:	4b31      	ldr	r3, [pc, #196]	; (3250 <usb_transfer_work+0x180>)
    318c:	1ad2      	subs	r2, r2, r3
    318e:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    3190:	f04f 0300 	mov.w	r3, #0
    3194:	2001      	movs	r0, #1
    3196:	f360 0302 	bfi	r3, r0, #0, #3
    319a:	f36f 03c5 	bfc	r3, #3, #3
    319e:	f362 138f 	bfi	r3, r2, #6, #10
    31a2:	462a      	mov	r2, r5
    31a4:	482b      	ldr	r0, [pc, #172]	; (3254 <usb_transfer_work+0x184>)
    31a6:	f7fe fc81 	bl	1aac <log_2>
			trans->status = -EINVAL;
    31aa:	f06f 0315 	mvn.w	r3, #21
    31ae:	f844 3c28 	str.w	r3, [r4, #-40]
			goto done;
    31b2:	e7a5      	b.n	3100 <usb_transfer_work+0x30>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    31b4:	ab01      	add	r3, sp, #4
    31b6:	f850 2c20 	ldr.w	r2, [r0, #-32]
    31ba:	f850 1c24 	ldr.w	r1, [r0, #-36]
    31be:	4628      	mov	r0, r5
    31c0:	f003 fe36 	bl	6e30 <usb_dc_ep_read_wait>
		if (ret) {
    31c4:	4601      	mov	r1, r0
    31c6:	b9a0      	cbnz	r0, 31f2 <usb_transfer_work+0x122>
		trans->buffer += bytes;
    31c8:	f854 3c24 	ldr.w	r3, [r4, #-36]
    31cc:	9e01      	ldr	r6, [sp, #4]
    31ce:	4433      	add	r3, r6
    31d0:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    31d4:	f854 3c20 	ldr.w	r3, [r4, #-32]
    31d8:	1b9b      	subs	r3, r3, r6
    31da:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    31de:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    31e2:	4433      	add	r3, r6
    31e4:	f844 3c1c 	str.w	r3, [r4, #-28]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    31e8:	b9ce      	cbnz	r6, 321e <usb_transfer_work+0x14e>
			trans->status = 0;
    31ea:	2300      	movs	r3, #0
    31ec:	f844 3c28 	str.w	r3, [r4, #-40]
			goto done;
    31f0:	e786      	b.n	3100 <usb_transfer_work+0x30>
    31f2:	4a16      	ldr	r2, [pc, #88]	; (324c <usb_transfer_work+0x17c>)
    31f4:	4b16      	ldr	r3, [pc, #88]	; (3250 <usb_transfer_work+0x180>)
    31f6:	1ad2      	subs	r2, r2, r3
    31f8:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    31fa:	f04f 0300 	mov.w	r3, #0
    31fe:	2001      	movs	r0, #1
    3200:	f360 0302 	bfi	r3, r0, #0, #3
    3204:	f36f 03c5 	bfc	r3, #3, #3
    3208:	f362 138f 	bfi	r3, r2, #6, #10
    320c:	462a      	mov	r2, r5
    320e:	4811      	ldr	r0, [pc, #68]	; (3254 <usb_transfer_work+0x184>)
    3210:	f7fe fc4c 	bl	1aac <log_2>
			trans->status = -EINVAL;
    3214:	f06f 0315 	mvn.w	r3, #21
    3218:	f844 3c28 	str.w	r3, [r4, #-40]
			goto done;
    321c:	e770      	b.n	3100 <usb_transfer_work+0x30>
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    321e:	4628      	mov	r0, r5
    3220:	f003 ff62 	bl	70e8 <usb_dc_ep_mps>
    3224:	fbb6 f3f0 	udiv	r3, r6, r0
    3228:	fb00 6013 	mls	r0, r0, r3, r6
    322c:	2800      	cmp	r0, #0
    322e:	d1dc      	bne.n	31ea <usb_transfer_work+0x11a>
    3230:	f854 3c20 	ldr.w	r3, [r4, #-32]
    3234:	2b00      	cmp	r3, #0
    3236:	d0d8      	beq.n	31ea <usb_transfer_work+0x11a>
		usb_dc_ep_read_continue(ep);
    3238:	4628      	mov	r0, r5
    323a:	f003 fe73 	bl	6f24 <usb_dc_ep_read_continue>
    323e:	e75f      	b.n	3100 <usb_transfer_work+0x30>
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    3240:	4621      	mov	r1, r4
    3242:	4805      	ldr	r0, [pc, #20]	; (3258 <usb_transfer_work+0x188>)
    3244:	f010 fc36 	bl	13ab4 <k_work_submit_to_queue>
			return;
    3248:	e77b      	b.n	3142 <usb_transfer_work+0x72>
    324a:	bf00      	nop
    324c:	00014388 	.word	0x00014388
    3250:	00014318 	.word	0x00014318
    3254:	00014838 	.word	0x00014838
    3258:	200005c8 	.word	0x200005c8

0000325c <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
    325c:	b570      	push	{r4, r5, r6, lr}
    325e:	b082      	sub	sp, #8
    3260:	4606      	mov	r6, r0
    3262:	460c      	mov	r4, r1
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    3264:	f7ff ff1e 	bl	30a4 <usb_ep_get_transfer>

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    3268:	1e63      	subs	r3, r4, #1
    326a:	b2db      	uxtb	r3, r3
    326c:	2b01      	cmp	r3, #1
    326e:	d80a      	bhi.n	3286 <usb_transfer_ep_callback+0x2a>
    3270:	4605      	mov	r5, r0
		return;
	}

	if (!trans) {
    3272:	b150      	cbz	r0, 328a <usb_transfer_ep_callback+0x2e>
			LOG_ERR("RX data lost, no transfer");
		}
		return;
	}

	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    3274:	f010 fb18 	bl	138a8 <k_is_in_isr>
    3278:	b108      	cbz	r0, 327e <usb_transfer_ep_callback+0x22>
    327a:	2c01      	cmp	r4, #1
    327c:	d122      	bne.n	32c4 <usb_transfer_ep_callback+0x68>
		/* If we are not in IRQ context, no need to defer work */
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
    327e:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    3282:	f7ff ff25 	bl	30d0 <usb_transfer_work>
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
    3286:	b002      	add	sp, #8
    3288:	bd70      	pop	{r4, r5, r6, pc}
		if (status == USB_DC_EP_DATA_OUT) {
    328a:	2c01      	cmp	r4, #1
    328c:	d1fb      	bne.n	3286 <usb_transfer_ep_callback+0x2a>
				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
    328e:	ab01      	add	r3, sp, #4
    3290:	2201      	movs	r2, #1
    3292:	f10d 0103 	add.w	r1, sp, #3
    3296:	4630      	mov	r0, r6
    3298:	f003 fdca 	bl	6e30 <usb_dc_ep_read_wait>
			} while (bytes);
    329c:	9b01      	ldr	r3, [sp, #4]
    329e:	2b00      	cmp	r3, #0
    32a0:	d1f5      	bne.n	328e <usb_transfer_ep_callback+0x32>
    32a2:	4b0b      	ldr	r3, [pc, #44]	; (32d0 <usb_transfer_ep_callback+0x74>)
    32a4:	4a0b      	ldr	r2, [pc, #44]	; (32d4 <usb_transfer_ep_callback+0x78>)
    32a6:	1a9b      	subs	r3, r3, r2
    32a8:	08db      	lsrs	r3, r3, #3
			LOG_ERR("RX data lost, no transfer");
    32aa:	f04f 0100 	mov.w	r1, #0
    32ae:	2201      	movs	r2, #1
    32b0:	f362 0102 	bfi	r1, r2, #0, #3
    32b4:	f36f 01c5 	bfc	r1, #3, #3
    32b8:	f363 118f 	bfi	r1, r3, #6, #10
    32bc:	4806      	ldr	r0, [pc, #24]	; (32d8 <usb_transfer_ep_callback+0x7c>)
    32be:	f7fe fc53 	bl	1b68 <log_0>
		return;
    32c2:	e7e0      	b.n	3286 <usb_transfer_ep_callback+0x2a>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    32c4:	f105 012c 	add.w	r1, r5, #44	; 0x2c
    32c8:	4804      	ldr	r0, [pc, #16]	; (32dc <usb_transfer_ep_callback+0x80>)
    32ca:	f010 fbf3 	bl	13ab4 <k_work_submit_to_queue>
    32ce:	e7da      	b.n	3286 <usb_transfer_ep_callback+0x2a>
    32d0:	00014388 	.word	0x00014388
    32d4:	00014318 	.word	0x00014318
    32d8:	00014858 	.word	0x00014858
    32dc:	200005c8 	.word	0x200005c8

000032e0 <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
    32e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    32e4:	4605      	mov	r5, r0
    32e6:	4688      	mov	r8, r1
    32e8:	4617      	mov	r7, r2
    32ea:	461e      	mov	r6, r3
	struct usb_transfer_data *trans = NULL;
	int i, key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
    32ec:	f00d fcb2 	bl	10c54 <usb_transfer_is_busy>
    32f0:	2800      	cmp	r0, #0
    32f2:	f040 8083 	bne.w	33fc <usb_transfer+0x11c>
	__asm__ volatile(
    32f6:	f04f 0320 	mov.w	r3, #32
    32fa:	f3ef 8911 	mrs	r9, BASEPRI
    32fe:	f383 8812 	msr	BASEPRI_MAX, r3
    3302:	f3bf 8f6f 	isb	sy
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    3306:	2400      	movs	r4, #0
    3308:	2c03      	cmp	r4, #3
    330a:	dc10      	bgt.n	332e <usb_transfer+0x4e>
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
    330c:	01a0      	lsls	r0, r4, #6
    330e:	f100 0318 	add.w	r3, r0, #24
    3312:	483c      	ldr	r0, [pc, #240]	; (3404 <usb_transfer+0x124>)
    3314:	4418      	add	r0, r3
    3316:	3004      	adds	r0, #4
	return z_impl_k_sem_take(sem, timeout);
    3318:	2200      	movs	r2, #0
    331a:	2300      	movs	r3, #0
    331c:	f00a fe8a 	bl	e034 <z_impl_k_sem_take>
    3320:	b108      	cbz	r0, 3326 <usb_transfer+0x46>
	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    3322:	3401      	adds	r4, #1
    3324:	e7f0      	b.n	3308 <usb_transfer+0x28>
			trans = &ut_data[i];
    3326:	4837      	ldr	r0, [pc, #220]	; (3404 <usb_transfer+0x124>)
    3328:	eb00 1484 	add.w	r4, r0, r4, lsl #6
			break;
    332c:	e000      	b.n	3330 <usb_transfer+0x50>
	struct usb_transfer_data *trans = NULL;
    332e:	2400      	movs	r4, #0
		}
	}

	if (!trans) {
    3330:	b344      	cbz	r4, 3384 <usb_transfer+0xa4>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
    3332:	f8d4 a004 	ldr.w	sl, [r4, #4]
    3336:	f11a 0f10 	cmn.w	sl, #16
    333a:	d036      	beq.n	33aa <usb_transfer+0xca>
		ret = -EBUSY;
		goto done;
	}

	/* Configure new transfer */
	trans->ep = ep;
    333c:	7025      	strb	r5, [r4, #0]
	trans->buffer = data;
    333e:	f8c4 8008 	str.w	r8, [r4, #8]
	trans->bsize = dlen;
    3342:	60e7      	str	r7, [r4, #12]
	trans->tsize = 0;
    3344:	2300      	movs	r3, #0
    3346:	6123      	str	r3, [r4, #16]
	trans->cb = cb;
    3348:	9b08      	ldr	r3, [sp, #32]
    334a:	6163      	str	r3, [r4, #20]
	trans->flags = flags;
    334c:	63e6      	str	r6, [r4, #60]	; 0x3c
	trans->priv = cb_data;
    334e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3350:	61a3      	str	r3, [r4, #24]
	trans->status = -EBUSY;
    3352:	f06f 030f 	mvn.w	r3, #15
    3356:	6063      	str	r3, [r4, #4]

	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    3358:	4628      	mov	r0, r5
    335a:	f003 fec5 	bl	70e8 <usb_dc_ep_mps>
    335e:	2800      	cmp	r0, #0
    3360:	d139      	bne.n	33d6 <usb_transfer+0xf6>
		/* no need to send ZLP since last packet will be a short one */
		trans->flags |= USB_TRANS_NO_ZLP;
	}

	if (flags & USB_TRANS_WRITE) {
    3362:	f016 0f02 	tst.w	r6, #2
    3366:	d044      	beq.n	33f2 <usb_transfer+0x112>
		/* start writing first chunk */
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    3368:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    336c:	4826      	ldr	r0, [pc, #152]	; (3408 <usb_transfer+0x128>)
    336e:	f010 fba1 	bl	13ab4 <k_work_submit_to_queue>
	int i, key, ret = 0;
    3372:	f04f 0a00 	mov.w	sl, #0
	__asm__ volatile(
    3376:	f389 8811 	msr	BASEPRI, r9
    337a:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
    337e:	4650      	mov	r0, sl
    3380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3384:	4b21      	ldr	r3, [pc, #132]	; (340c <usb_transfer+0x12c>)
    3386:	4a22      	ldr	r2, [pc, #136]	; (3410 <usb_transfer+0x130>)
    3388:	1a9b      	subs	r3, r3, r2
    338a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("No transfer slot available");
    338c:	f04f 0100 	mov.w	r1, #0
    3390:	2201      	movs	r2, #1
    3392:	f362 0102 	bfi	r1, r2, #0, #3
    3396:	f36f 01c5 	bfc	r1, #3, #3
    339a:	f363 118f 	bfi	r1, r3, #6, #10
    339e:	481d      	ldr	r0, [pc, #116]	; (3414 <usb_transfer+0x134>)
    33a0:	f7fe fbe2 	bl	1b68 <log_0>
		ret = -ENOMEM;
    33a4:	f06f 0a0b 	mvn.w	sl, #11
		goto done;
    33a8:	e7e5      	b.n	3376 <usb_transfer+0x96>
    33aa:	4b18      	ldr	r3, [pc, #96]	; (340c <usb_transfer+0x12c>)
    33ac:	4a18      	ldr	r2, [pc, #96]	; (3410 <usb_transfer+0x130>)
    33ae:	1a9b      	subs	r3, r3, r2
    33b0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
    33b2:	f04f 0200 	mov.w	r2, #0
    33b6:	2101      	movs	r1, #1
    33b8:	f361 0202 	bfi	r2, r1, #0, #3
    33bc:	f36f 02c5 	bfc	r2, #3, #3
    33c0:	f363 128f 	bfi	r2, r3, #6, #10
    33c4:	4629      	mov	r1, r5
    33c6:	4814      	ldr	r0, [pc, #80]	; (3418 <usb_transfer+0x138>)
    33c8:	f7fe fb3a 	bl	1a40 <log_1>
		k_sem_give(&trans->sem);
    33cc:	f104 001c 	add.w	r0, r4, #28
	z_impl_k_sem_give(sem);
    33d0:	f00a fe0c 	bl	dfec <z_impl_k_sem_give>
		goto done;
    33d4:	e7cf      	b.n	3376 <usb_transfer+0x96>
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    33d6:	4628      	mov	r0, r5
    33d8:	f003 fe86 	bl	70e8 <usb_dc_ep_mps>
    33dc:	fbb7 f3f0 	udiv	r3, r7, r0
    33e0:	fb00 7013 	mls	r0, r0, r3, r7
    33e4:	2800      	cmp	r0, #0
    33e6:	d0bc      	beq.n	3362 <usb_transfer+0x82>
		trans->flags |= USB_TRANS_NO_ZLP;
    33e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    33ea:	f043 0304 	orr.w	r3, r3, #4
    33ee:	63e3      	str	r3, [r4, #60]	; 0x3c
    33f0:	e7b7      	b.n	3362 <usb_transfer+0x82>
		ret = usb_dc_ep_read_continue(ep);
    33f2:	4628      	mov	r0, r5
    33f4:	f003 fd96 	bl	6f24 <usb_dc_ep_read_continue>
    33f8:	4682      	mov	sl, r0
    33fa:	e7bc      	b.n	3376 <usb_transfer+0x96>
		return -EBUSY;
    33fc:	f06f 0a0f 	mvn.w	sl, #15
    3400:	e7bd      	b.n	337e <usb_transfer+0x9e>
    3402:	bf00      	nop
    3404:	20001390 	.word	0x20001390
    3408:	200005c8 	.word	0x200005c8
    340c:	00014388 	.word	0x00014388
    3410:	00014318 	.word	0x00014318
    3414:	00014874 	.word	0x00014874
    3418:	00014890 	.word	0x00014890

0000341c <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
    341c:	b510      	push	{r4, lr}
	__asm__ volatile(
    341e:	f04f 0320 	mov.w	r3, #32
    3422:	f3ef 8411 	mrs	r4, BASEPRI
    3426:	f383 8812 	msr	BASEPRI_MAX, r3
    342a:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    342e:	f7ff fe39 	bl	30a4 <usb_ep_get_transfer>
	if (!trans) {
    3432:	b120      	cbz	r0, 343e <usb_cancel_transfer+0x22>
    3434:	4601      	mov	r1, r0
		goto done;
	}

	if (trans->status != -EBUSY) {
    3436:	6843      	ldr	r3, [r0, #4]
    3438:	f113 0f10 	cmn.w	r3, #16
    343c:	d004      	beq.n	3448 <usb_cancel_transfer+0x2c>
	__asm__ volatile(
    343e:	f384 8811 	msr	BASEPRI, r4
    3442:	f3bf 8f6f 	isb	sy
	trans->status = -ECANCELED;
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);

done:
	irq_unlock(key);
}
    3446:	bd10      	pop	{r4, pc}
	trans->status = -ECANCELED;
    3448:	f06f 038b 	mvn.w	r3, #139	; 0x8b
    344c:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    344e:	312c      	adds	r1, #44	; 0x2c
    3450:	4801      	ldr	r0, [pc, #4]	; (3458 <usb_cancel_transfer+0x3c>)
    3452:	f010 fb2f 	bl	13ab4 <k_work_submit_to_queue>
    3456:	e7f2      	b.n	343e <usb_cancel_transfer+0x22>
    3458:	200005c8 	.word	0x200005c8

0000345c <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    345c:	b538      	push	{r3, r4, r5, lr}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    345e:	2400      	movs	r4, #0
    3460:	e011      	b.n	3486 <usb_cancel_transfers+0x2a>
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
			trans->status = -ECANCELED;
    3462:	4b12      	ldr	r3, [pc, #72]	; (34ac <usb_cancel_transfers+0x50>)
    3464:	01a1      	lsls	r1, r4, #6
    3466:	eb03 1284 	add.w	r2, r3, r4, lsl #6
    346a:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    346e:	6050      	str	r0, [r2, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    3470:	3128      	adds	r1, #40	; 0x28
    3472:	4419      	add	r1, r3
    3474:	3104      	adds	r1, #4
    3476:	480e      	ldr	r0, [pc, #56]	; (34b0 <usb_cancel_transfers+0x54>)
    3478:	f010 fb1c 	bl	13ab4 <k_work_submit_to_queue>
    347c:	f385 8811 	msr	BASEPRI, r5
    3480:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    3484:	3401      	adds	r4, #1
    3486:	2c03      	cmp	r4, #3
    3488:	dc0f      	bgt.n	34aa <usb_cancel_transfers+0x4e>
	__asm__ volatile(
    348a:	f04f 0320 	mov.w	r3, #32
    348e:	f3ef 8511 	mrs	r5, BASEPRI
    3492:	f383 8812 	msr	BASEPRI_MAX, r3
    3496:	f3bf 8f6f 	isb	sy
		if (trans->status == -EBUSY) {
    349a:	4b04      	ldr	r3, [pc, #16]	; (34ac <usb_cancel_transfers+0x50>)
    349c:	eb03 1384 	add.w	r3, r3, r4, lsl #6
    34a0:	685b      	ldr	r3, [r3, #4]
    34a2:	f113 0f10 	cmn.w	r3, #16
    34a6:	d1e9      	bne.n	347c <usb_cancel_transfers+0x20>
    34a8:	e7db      	b.n	3462 <usb_cancel_transfers+0x6>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    34aa:	bd38      	pop	{r3, r4, r5, pc}
    34ac:	20001390 	.word	0x20001390
    34b0:	200005c8 	.word	0x200005c8

000034b4 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    34b4:	b570      	push	{r4, r5, r6, lr}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    34b6:	2600      	movs	r6, #0
    34b8:	e011      	b.n	34de <usb_transfer_init+0x2a>
		k_work_init(&ut_data[i].work, usb_transfer_work);
    34ba:	4c0b      	ldr	r4, [pc, #44]	; (34e8 <usb_transfer_init+0x34>)
    34bc:	01b5      	lsls	r5, r6, #6
    34be:	f105 0028 	add.w	r0, r5, #40	; 0x28
    34c2:	4420      	add	r0, r4
    34c4:	4909      	ldr	r1, [pc, #36]	; (34ec <usb_transfer_init+0x38>)
    34c6:	3004      	adds	r0, #4
    34c8:	f010 faee 	bl	13aa8 <k_work_init>
		k_sem_init(&ut_data[i].sem, 1, 1);
    34cc:	f105 0018 	add.w	r0, r5, #24
    34d0:	4420      	add	r0, r4
    34d2:	3004      	adds	r0, #4
	return z_impl_k_sem_init(sem, initial_count, limit);
    34d4:	2201      	movs	r2, #1
    34d6:	4611      	mov	r1, r2
    34d8:	f010 fad7 	bl	13a8a <z_impl_k_sem_init>
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    34dc:	3601      	adds	r6, #1
    34de:	2e03      	cmp	r6, #3
    34e0:	ddeb      	ble.n	34ba <usb_transfer_init+0x6>
	}

	return 0;
}
    34e2:	2000      	movs	r0, #0
    34e4:	bd70      	pop	{r4, r5, r6, pc}
    34e6:	bf00      	nop
    34e8:	20001390 	.word	0x20001390
    34ec:	000030d1 	.word	0x000030d1

000034f0 <cdc_acm_class_handle_req>:
 *
 * @return  0 on success, negative errno code on fail.
 */
int cdc_acm_class_handle_req(struct usb_setup_packet *setup,
			     int32_t *len, uint8_t **data)
{
    34f0:	b570      	push	{r4, r5, r6, lr}
    34f2:	4604      	mov	r4, r0
    34f4:	460e      	mov	r6, r1
    34f6:	4615      	mov	r5, r2
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;
	uint32_t rate;
	uint32_t new_rate;

	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    34f8:	7901      	ldrb	r1, [r0, #4]
    34fa:	481e      	ldr	r0, [pc, #120]	; (3574 <cdc_acm_class_handle_req+0x84>)
    34fc:	f00d fb76 	bl	10bec <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
    3500:	b158      	cbz	r0, 351a <cdc_acm_class_handle_req+0x2a>
		return -ENODEV;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	if (usb_reqtype_is_to_device(setup)) {
    3502:	f994 2000 	ldrsb.w	r2, [r4]
    3506:	2a00      	cmp	r2, #0
    3508:	db27      	blt.n	355a <cdc_acm_class_handle_req+0x6a>
		switch (setup->bRequest) {
    350a:	7862      	ldrb	r2, [r4, #1]
    350c:	2a20      	cmp	r2, #32
    350e:	d018      	beq.n	3542 <cdc_acm_class_handle_req+0x52>
    3510:	2a22      	cmp	r2, #34	; 0x22
    3512:	d01d      	beq.n	3550 <cdc_acm_class_handle_req+0x60>
    3514:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3518:	e028      	b.n	356c <cdc_acm_class_handle_req+0x7c>
    351a:	4b17      	ldr	r3, [pc, #92]	; (3578 <cdc_acm_class_handle_req+0x88>)
    351c:	4a17      	ldr	r2, [pc, #92]	; (357c <cdc_acm_class_handle_req+0x8c>)
    351e:	1a9b      	subs	r3, r3, r2
    3520:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Device data not found for interface %u",
    3522:	f04f 0200 	mov.w	r2, #0
    3526:	2102      	movs	r1, #2
    3528:	f361 0202 	bfi	r2, r1, #0, #3
    352c:	f36f 02c5 	bfc	r2, #3, #3
    3530:	f363 128f 	bfi	r2, r3, #6, #10
    3534:	88a1      	ldrh	r1, [r4, #4]
    3536:	4812      	ldr	r0, [pc, #72]	; (3580 <cdc_acm_class_handle_req+0x90>)
    3538:	f7fe fa82 	bl	1a40 <log_1>
		return -ENODEV;
    353c:	f06f 0012 	mvn.w	r0, #18
    3540:	e014      	b.n	356c <cdc_acm_class_handle_req+0x7c>
		case SET_LINE_CODING:
			rate = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
			memcpy(&dev_data->line_coding, *data,
    3542:	2207      	movs	r2, #7
    3544:	6829      	ldr	r1, [r5, #0]
    3546:	380c      	subs	r0, #12
    3548:	f00d fe50 	bl	111ec <memcpy>
#if defined(CONFIG_CDC_ACM_DTE_RATE_CALLBACK_SUPPORT)
			if (rate != new_rate && dev_data->rate_cb != NULL) {
				dev_data->rate_cb(common->dev, new_rate);
			}
#endif
			return 0;
    354c:	2000      	movs	r0, #0
    354e:	e00d      	b.n	356c <cdc_acm_class_handle_req+0x7c>

		case SET_CONTROL_LINE_STATE:
			dev_data->line_state = (uint8_t)setup->wValue;
    3550:	78a2      	ldrb	r2, [r4, #2]
    3552:	f800 2c05 	strb.w	r2, [r0, #-5]
			LOG_DBG("CDC_SET_CONTROL_LINE_STATE 0x%x",
				dev_data->line_state);
			return 0;
    3556:	2000      	movs	r0, #0
    3558:	e008      	b.n	356c <cdc_acm_class_handle_req+0x7c>

		default:
			break;
		}
	} else {
		if (setup->bRequest == GET_LINE_CODING) {
    355a:	7862      	ldrb	r2, [r4, #1]
    355c:	2a21      	cmp	r2, #33	; 0x21
    355e:	d106      	bne.n	356e <cdc_acm_class_handle_req+0x7e>
			*data = (uint8_t *)(&dev_data->line_coding);
    3560:	f1a0 030c 	sub.w	r3, r0, #12
    3564:	602b      	str	r3, [r5, #0]
			*len = sizeof(dev_data->line_coding);
    3566:	2307      	movs	r3, #7
    3568:	6033      	str	r3, [r6, #0]
			LOG_DBG("CDC_GET_LINE_CODING %d %d %d %d",
				sys_le32_to_cpu(dev_data->line_coding.dwDTERate),
				dev_data->line_coding.bCharFormat,
				dev_data->line_coding.bParityType,
				dev_data->line_coding.bDataBits);
			return 0;
    356a:	2000      	movs	r0, #0
	}

	LOG_DBG("CDC ACM bmRequestType 0x%02x bRequest 0x%02x unsupported",
		setup->bmRequestType, setup->bRequest);
	return -ENOTSUP;
}
    356c:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOTSUP;
    356e:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3572:	e7fb      	b.n	356c <cdc_acm_class_handle_req+0x7c>
    3574:	20001490 	.word	0x20001490
    3578:	00014368 	.word	0x00014368
    357c:	00014318 	.word	0x00014318
    3580:	000148cc 	.word	0x000148cc

00003584 <cdc_acm_int_in>:
 * @param ep_status Endpoint status code.
 *
 * @return  N/A.
 */
static void cdc_acm_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
    3584:	b510      	push	{r4, lr}
    3586:	4604      	mov	r4, r0
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    3588:	4601      	mov	r1, r0
    358a:	480d      	ldr	r0, [pc, #52]	; (35c0 <cdc_acm_int_in+0x3c>)
    358c:	f00d fb42 	bl	10c14 <usb_get_dev_data_by_ep>
	if (common == NULL) {
    3590:	b118      	cbz	r0, 359a <cdc_acm_int_in+0x16>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
    3592:	2201      	movs	r2, #1
    3594:	f800 2c03 	strb.w	r2, [r0, #-3]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
    3598:	bd10      	pop	{r4, pc}
    359a:	4b0a      	ldr	r3, [pc, #40]	; (35c4 <cdc_acm_int_in+0x40>)
    359c:	4a0a      	ldr	r2, [pc, #40]	; (35c8 <cdc_acm_int_in+0x44>)
    359e:	1a9b      	subs	r3, r3, r2
    35a0:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Device data not found for endpoint %u", ep);
    35a2:	f04f 0200 	mov.w	r2, #0
    35a6:	2102      	movs	r1, #2
    35a8:	f361 0202 	bfi	r2, r1, #0, #3
    35ac:	f36f 02c5 	bfc	r2, #3, #3
    35b0:	f363 128f 	bfi	r2, r3, #6, #10
    35b4:	4621      	mov	r1, r4
    35b6:	4805      	ldr	r0, [pc, #20]	; (35cc <cdc_acm_int_in+0x48>)
    35b8:	f7fe fa42 	bl	1a40 <log_1>
		return;
    35bc:	e7ec      	b.n	3598 <cdc_acm_int_in+0x14>
    35be:	bf00      	nop
    35c0:	20001490 	.word	0x20001490
    35c4:	00014368 	.word	0x00014368
    35c8:	00014318 	.word	0x00014318
    35cc:	000148f4 	.word	0x000148f4

000035d0 <cdc_acm_irq_rx_enable>:
 * @param dev CDC ACM device struct.
 *
 * @return N/A
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
    35d0:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    35d2:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
    35d4:	2301      	movs	r3, #1
    35d6:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b

	if (dev_data->cb && dev_data->rx_ready) {
    35da:	680b      	ldr	r3, [r1, #0]
    35dc:	b113      	cbz	r3, 35e4 <cdc_acm_irq_rx_enable+0x14>
    35de:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
    35e2:	b903      	cbnz	r3, 35e6 <cdc_acm_irq_rx_enable+0x16>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
	}
}
    35e4:	bd08      	pop	{r3, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    35e6:	3108      	adds	r1, #8
    35e8:	4801      	ldr	r0, [pc, #4]	; (35f0 <cdc_acm_irq_rx_enable+0x20>)
    35ea:	f010 fa63 	bl	13ab4 <k_work_submit_to_queue>
}
    35ee:	e7f9      	b.n	35e4 <cdc_acm_irq_rx_enable+0x14>
    35f0:	200005c8 	.word	0x200005c8

000035f4 <cdc_acm_irq_tx_enable>:
{
    35f4:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    35f6:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
    35f8:	2301      	movs	r3, #1
    35fa:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
	if (dev_data->cb && dev_data->tx_ready) {
    35fe:	680b      	ldr	r3, [r1, #0]
    3600:	b113      	cbz	r3, 3608 <cdc_acm_irq_tx_enable+0x14>
    3602:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    3606:	b903      	cbnz	r3, 360a <cdc_acm_irq_tx_enable+0x16>
}
    3608:	bd08      	pop	{r3, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    360a:	3108      	adds	r1, #8
    360c:	4801      	ldr	r0, [pc, #4]	; (3614 <cdc_acm_irq_tx_enable+0x20>)
    360e:	f010 fa51 	bl	13ab4 <k_work_submit_to_queue>
}
    3612:	e7f9      	b.n	3608 <cdc_acm_irq_tx_enable+0x14>
    3614:	200005c8 	.word	0x200005c8

00003618 <cdc_acm_reset_port>:
{
    3618:	b510      	push	{r4, lr}
    361a:	4603      	mov	r3, r0
	dev_data->configured = false;
    361c:	2400      	movs	r4, #0
    361e:	f880 407e 	strb.w	r4, [r0, #126]	; 0x7e
	dev_data->suspended = false;
    3622:	f880 407f 	strb.w	r4, [r0, #127]	; 0x7f
	dev_data->rx_ready = false;
    3626:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
	dev_data->tx_ready = false;
    362a:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
	dev_data->line_coding = (struct cdc_acm_line_coding)
    362e:	4a0a      	ldr	r2, [pc, #40]	; (3658 <cdc_acm_reset_port+0x40>)
    3630:	e892 0003 	ldmia.w	r2, {r0, r1}
    3634:	6758      	str	r0, [r3, #116]	; 0x74
    3636:	f8a3 1078 	strh.w	r1, [r3, #120]	; 0x78
    363a:	0c09      	lsrs	r1, r1, #16
    363c:	f883 107a 	strb.w	r1, [r3, #122]	; 0x7a
	dev_data->serial_state = 0;
    3640:	f883 407c 	strb.w	r4, [r3, #124]	; 0x7c
	dev_data->line_state = 0;
    3644:	f883 407b 	strb.w	r4, [r3, #123]	; 0x7b
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    3648:	2240      	movs	r2, #64	; 0x40
    364a:	4621      	mov	r1, r4
    364c:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    3650:	f00d fdf0 	bl	11234 <memset>
}
    3654:	bd10      	pop	{r4, pc}
    3656:	bf00      	nop
    3658:	00014420 	.word	0x00014420

0000365c <cdc_acm_fifo_fill>:
{
    365c:	b570      	push	{r4, r5, r6, lr}
    365e:	4614      	mov	r4, r2
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    3660:	6906      	ldr	r6, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
    3662:	f896 307e 	ldrb.w	r3, [r6, #126]	; 0x7e
    3666:	b113      	cbz	r3, 366e <cdc_acm_fifo_fill+0x12>
    3668:	f896 307f 	ldrb.w	r3, [r6, #127]	; 0x7f
    366c:	b193      	cbz	r3, 3694 <cdc_acm_fifo_fill+0x38>
    366e:	4b1a      	ldr	r3, [pc, #104]	; (36d8 <cdc_acm_fifo_fill+0x7c>)
    3670:	4a1a      	ldr	r2, [pc, #104]	; (36dc <cdc_acm_fifo_fill+0x80>)
    3672:	1a9b      	subs	r3, r3, r2
    3674:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Device not configured or suspended, drop %d bytes",
    3676:	f04f 0200 	mov.w	r2, #0
    367a:	2102      	movs	r1, #2
    367c:	f361 0202 	bfi	r2, r1, #0, #3
    3680:	f36f 02c5 	bfc	r2, #3, #3
    3684:	f363 128f 	bfi	r2, r3, #6, #10
    3688:	4621      	mov	r1, r4
    368a:	4815      	ldr	r0, [pc, #84]	; (36e0 <cdc_acm_fifo_fill+0x84>)
    368c:	f7fe f9d8 	bl	1a40 <log_1>
		return 0;
    3690:	2000      	movs	r0, #0
}
    3692:	bd70      	pop	{r4, r5, r6, pc}
	dev_data->tx_ready = false;
    3694:	2300      	movs	r3, #0
    3696:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    369a:	6f30      	ldr	r0, [r6, #112]	; 0x70
    369c:	f00c fd80 	bl	101a0 <ring_buf_put>
    36a0:	4605      	mov	r5, r0
	if (wrote < len) {
    36a2:	4284      	cmp	r4, r0
    36a4:	d806      	bhi.n	36b4 <cdc_acm_fifo_fill+0x58>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    36a6:	f106 0118 	add.w	r1, r6, #24
    36aa:	480e      	ldr	r0, [pc, #56]	; (36e4 <cdc_acm_fifo_fill+0x88>)
    36ac:	f010 fa02 	bl	13ab4 <k_work_submit_to_queue>
	return wrote;
    36b0:	4628      	mov	r0, r5
    36b2:	e7ee      	b.n	3692 <cdc_acm_fifo_fill+0x36>
    36b4:	4b08      	ldr	r3, [pc, #32]	; (36d8 <cdc_acm_fifo_fill+0x7c>)
    36b6:	4a09      	ldr	r2, [pc, #36]	; (36dc <cdc_acm_fifo_fill+0x80>)
    36b8:	1a9b      	subs	r3, r3, r2
    36ba:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Ring buffer full, drop %zd bytes", len - wrote);
    36bc:	f04f 0200 	mov.w	r2, #0
    36c0:	2102      	movs	r1, #2
    36c2:	f361 0202 	bfi	r2, r1, #0, #3
    36c6:	f36f 02c5 	bfc	r2, #3, #3
    36ca:	f363 128f 	bfi	r2, r3, #6, #10
    36ce:	1a21      	subs	r1, r4, r0
    36d0:	4805      	ldr	r0, [pc, #20]	; (36e8 <cdc_acm_fifo_fill+0x8c>)
    36d2:	f7fe f9b5 	bl	1a40 <log_1>
    36d6:	e7e6      	b.n	36a6 <cdc_acm_fifo_fill+0x4a>
    36d8:	00014368 	.word	0x00014368
    36dc:	00014318 	.word	0x00014318
    36e0:	0001491c 	.word	0x0001491c
    36e4:	200005c8 	.word	0x200005c8
    36e8:	00014950 	.word	0x00014950

000036ec <cdc_acm_read_cb>:
{
    36ec:	b570      	push	{r4, r5, r6, lr}
    36ee:	b082      	sub	sp, #8
    36f0:	4606      	mov	r6, r0
    36f2:	4614      	mov	r4, r2
	if (size <= 0) {
    36f4:	1e0d      	subs	r5, r1, #0
    36f6:	dd0f      	ble.n	3718 <cdc_acm_read_cb+0x2c>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    36f8:	462a      	mov	r2, r5
    36fa:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    36fe:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    3700:	f00c fd4e 	bl	101a0 <ring_buf_put>
	if (wrote < size) {
    3704:	4285      	cmp	r5, r0
    3706:	d813      	bhi.n	3730 <cdc_acm_read_cb+0x44>
	dev_data->rx_ready = true;
    3708:	2301      	movs	r3, #1
    370a:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	if (dev_data->cb && dev_data->rx_irq_ena) {
    370e:	6823      	ldr	r3, [r4, #0]
    3710:	b113      	cbz	r3, 3718 <cdc_acm_read_cb+0x2c>
    3712:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    3716:	b9eb      	cbnz	r3, 3754 <cdc_acm_read_cb+0x68>
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
    3718:	9401      	str	r4, [sp, #4]
    371a:	4b11      	ldr	r3, [pc, #68]	; (3760 <cdc_acm_read_cb+0x74>)
    371c:	9300      	str	r3, [sp, #0]
    371e:	2301      	movs	r3, #1
    3720:	2240      	movs	r2, #64	; 0x40
    3722:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    3726:	4630      	mov	r0, r6
    3728:	f7ff fdda 	bl	32e0 <usb_transfer>
}
    372c:	b002      	add	sp, #8
    372e:	bd70      	pop	{r4, r5, r6, pc}
    3730:	4b0c      	ldr	r3, [pc, #48]	; (3764 <cdc_acm_read_cb+0x78>)
    3732:	4a0d      	ldr	r2, [pc, #52]	; (3768 <cdc_acm_read_cb+0x7c>)
    3734:	1a9b      	subs	r3, r3, r2
    3736:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Ring buffer full, drop %zd bytes", size - wrote);
    3738:	f04f 0200 	mov.w	r2, #0
    373c:	2101      	movs	r1, #1
    373e:	f361 0202 	bfi	r2, r1, #0, #3
    3742:	f36f 02c5 	bfc	r2, #3, #3
    3746:	f363 128f 	bfi	r2, r3, #6, #10
    374a:	1a29      	subs	r1, r5, r0
    374c:	4807      	ldr	r0, [pc, #28]	; (376c <cdc_acm_read_cb+0x80>)
    374e:	f7fe f977 	bl	1a40 <log_1>
    3752:	e7d9      	b.n	3708 <cdc_acm_read_cb+0x1c>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    3754:	f104 0108 	add.w	r1, r4, #8
    3758:	4805      	ldr	r0, [pc, #20]	; (3770 <cdc_acm_read_cb+0x84>)
    375a:	f010 f9ab 	bl	13ab4 <k_work_submit_to_queue>
    375e:	e7db      	b.n	3718 <cdc_acm_read_cb+0x2c>
    3760:	000036ed 	.word	0x000036ed
    3764:	00014368 	.word	0x00014368
    3768:	00014318 	.word	0x00014318
    376c:	00014950 	.word	0x00014950
    3770:	200005c8 	.word	0x200005c8

00003774 <cdc_acm_do_cb>:
{
    3774:	b538      	push	{r3, r4, r5, lr}
    3776:	4604      	mov	r4, r0
	const struct device *dev = dev_data->common.dev;
    3778:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
	struct usb_cfg_data *cfg = (void *)dev->config;
    377c:	685d      	ldr	r5, [r3, #4]
	switch (status) {
    377e:	3901      	subs	r1, #1
    3780:	2905      	cmp	r1, #5
    3782:	d806      	bhi.n	3792 <cdc_acm_do_cb+0x1e>
    3784:	e8df f001 	tbb	[pc, r1]
    3788:	37060503 	.word	0x37060503
    378c:	5f4b      	.short	0x5f4b
		cdc_acm_reset_port(dev_data);
    378e:	f7ff ff43 	bl	3618 <cdc_acm_reset_port>
}
    3792:	bd38      	pop	{r3, r4, r5, pc}
    3794:	4b45      	ldr	r3, [pc, #276]	; (38ac <cdc_acm_do_cb+0x138>)
    3796:	4a46      	ldr	r2, [pc, #280]	; (38b0 <cdc_acm_do_cb+0x13c>)
    3798:	1a9b      	subs	r3, r3, r2
    379a:	08db      	lsrs	r3, r3, #3
		LOG_INF("Device configured");
    379c:	f04f 0100 	mov.w	r1, #0
    37a0:	2203      	movs	r2, #3
    37a2:	f362 0102 	bfi	r1, r2, #0, #3
    37a6:	f36f 01c5 	bfc	r1, #3, #3
    37aa:	f363 118f 	bfi	r1, r3, #6, #10
    37ae:	4841      	ldr	r0, [pc, #260]	; (38b4 <cdc_acm_do_cb+0x140>)
    37b0:	f7fe f9da 	bl	1b68 <log_0>
		if (!dev_data->configured) {
    37b4:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    37b8:	b19b      	cbz	r3, 37e2 <cdc_acm_do_cb+0x6e>
		if (!dev_data->tx_ready) {
    37ba:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    37be:	2b00      	cmp	r3, #0
    37c0:	d1e7      	bne.n	3792 <cdc_acm_do_cb+0x1e>
			dev_data->tx_ready = true;
    37c2:	2301      	movs	r3, #1
    37c4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
    37c8:	6823      	ldr	r3, [r4, #0]
    37ca:	2b00      	cmp	r3, #0
    37cc:	d0e1      	beq.n	3792 <cdc_acm_do_cb+0x1e>
    37ce:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    37d2:	2b00      	cmp	r3, #0
    37d4:	d0dd      	beq.n	3792 <cdc_acm_do_cb+0x1e>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    37d6:	f104 0108 	add.w	r1, r4, #8
    37da:	4837      	ldr	r0, [pc, #220]	; (38b8 <cdc_acm_do_cb+0x144>)
    37dc:	f010 f96a 	bl	13ab4 <k_work_submit_to_queue>
    37e0:	e7d7      	b.n	3792 <cdc_acm_do_cb+0x1e>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
    37e2:	6a2b      	ldr	r3, [r5, #32]
    37e4:	4622      	mov	r2, r4
    37e6:	2100      	movs	r1, #0
    37e8:	7b18      	ldrb	r0, [r3, #12]
    37ea:	f7ff ff7f 	bl	36ec <cdc_acm_read_cb>
			dev_data->configured = true;
    37ee:	2301      	movs	r3, #1
    37f0:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
    37f4:	e7e1      	b.n	37ba <cdc_acm_do_cb+0x46>
    37f6:	4b2d      	ldr	r3, [pc, #180]	; (38ac <cdc_acm_do_cb+0x138>)
    37f8:	4a2d      	ldr	r2, [pc, #180]	; (38b0 <cdc_acm_do_cb+0x13c>)
    37fa:	1a9b      	subs	r3, r3, r2
    37fc:	08db      	lsrs	r3, r3, #3
		LOG_INF("Device disconnected");
    37fe:	f04f 0100 	mov.w	r1, #0
    3802:	2203      	movs	r2, #3
    3804:	f362 0102 	bfi	r1, r2, #0, #3
    3808:	f36f 01c5 	bfc	r1, #3, #3
    380c:	f363 118f 	bfi	r1, r3, #6, #10
    3810:	482a      	ldr	r0, [pc, #168]	; (38bc <cdc_acm_do_cb+0x148>)
    3812:	f7fe f9a9 	bl	1b68 <log_0>
		cdc_acm_reset_port(dev_data);
    3816:	4620      	mov	r0, r4
    3818:	f7ff fefe 	bl	3618 <cdc_acm_reset_port>
		break;
    381c:	e7b9      	b.n	3792 <cdc_acm_do_cb+0x1e>
    381e:	4b23      	ldr	r3, [pc, #140]	; (38ac <cdc_acm_do_cb+0x138>)
    3820:	4a23      	ldr	r2, [pc, #140]	; (38b0 <cdc_acm_do_cb+0x13c>)
    3822:	1a9b      	subs	r3, r3, r2
    3824:	08db      	lsrs	r3, r3, #3
		LOG_INF("Device suspended");
    3826:	f04f 0100 	mov.w	r1, #0
    382a:	2203      	movs	r2, #3
    382c:	f362 0102 	bfi	r1, r2, #0, #3
    3830:	f36f 01c5 	bfc	r1, #3, #3
    3834:	f363 118f 	bfi	r1, r3, #6, #10
    3838:	4821      	ldr	r0, [pc, #132]	; (38c0 <cdc_acm_do_cb+0x14c>)
    383a:	f7fe f995 	bl	1b68 <log_0>
		dev_data->suspended = true;
    383e:	2301      	movs	r3, #1
    3840:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
		break;
    3844:	e7a5      	b.n	3792 <cdc_acm_do_cb+0x1e>
    3846:	4b19      	ldr	r3, [pc, #100]	; (38ac <cdc_acm_do_cb+0x138>)
    3848:	4a19      	ldr	r2, [pc, #100]	; (38b0 <cdc_acm_do_cb+0x13c>)
    384a:	1a9b      	subs	r3, r3, r2
    384c:	08db      	lsrs	r3, r3, #3
		LOG_INF("Device resumed");
    384e:	f04f 0100 	mov.w	r1, #0
    3852:	2203      	movs	r2, #3
    3854:	f362 0102 	bfi	r1, r2, #0, #3
    3858:	f36f 01c5 	bfc	r1, #3, #3
    385c:	f363 118f 	bfi	r1, r3, #6, #10
    3860:	4818      	ldr	r0, [pc, #96]	; (38c4 <cdc_acm_do_cb+0x150>)
    3862:	f7fe f981 	bl	1b68 <log_0>
		if (dev_data->suspended) {
    3866:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
    386a:	2b00      	cmp	r3, #0
    386c:	d091      	beq.n	3792 <cdc_acm_do_cb+0x1e>
    386e:	4b0f      	ldr	r3, [pc, #60]	; (38ac <cdc_acm_do_cb+0x138>)
    3870:	4a0f      	ldr	r2, [pc, #60]	; (38b0 <cdc_acm_do_cb+0x13c>)
    3872:	1a9b      	subs	r3, r3, r2
    3874:	08db      	lsrs	r3, r3, #3
			LOG_INF("from suspend");
    3876:	f04f 0100 	mov.w	r1, #0
    387a:	2203      	movs	r2, #3
    387c:	f362 0102 	bfi	r1, r2, #0, #3
    3880:	f36f 01c5 	bfc	r1, #3, #3
    3884:	f363 118f 	bfi	r1, r3, #6, #10
    3888:	480f      	ldr	r0, [pc, #60]	; (38c8 <cdc_acm_do_cb+0x154>)
    388a:	f7fe f96d 	bl	1b68 <log_0>
			dev_data->suspended = false;
    388e:	2300      	movs	r3, #0
    3890:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
			if (dev_data->configured) {
    3894:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    3898:	2b00      	cmp	r3, #0
    389a:	f43f af7a 	beq.w	3792 <cdc_acm_do_cb+0x1e>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    389e:	6a2b      	ldr	r3, [r5, #32]
    38a0:	4622      	mov	r2, r4
    38a2:	2100      	movs	r1, #0
    38a4:	7b18      	ldrb	r0, [r3, #12]
    38a6:	f7ff ff21 	bl	36ec <cdc_acm_read_cb>
}
    38aa:	e772      	b.n	3792 <cdc_acm_do_cb+0x1e>
    38ac:	00014368 	.word	0x00014368
    38b0:	00014318 	.word	0x00014318
    38b4:	00014974 	.word	0x00014974
    38b8:	200005c8 	.word	0x200005c8
    38bc:	00014988 	.word	0x00014988
    38c0:	0001499c 	.word	0x0001499c
    38c4:	000149b0 	.word	0x000149b0
    38c8:	000149c0 	.word	0x000149c0

000038cc <cdc_acm_dev_status_cb>:
{
    38cc:	b570      	push	{r4, r5, r6, lr}
    38ce:	4604      	mov	r4, r0
    38d0:	460d      	mov	r5, r1
    38d2:	4616      	mov	r6, r2
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
    38d4:	4601      	mov	r1, r0
    38d6:	480e      	ldr	r0, [pc, #56]	; (3910 <cdc_acm_dev_status_cb+0x44>)
    38d8:	f00d f976 	bl	10bc8 <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    38dc:	b128      	cbz	r0, 38ea <cdc_acm_dev_status_cb+0x1e>
	cdc_acm_do_cb(dev_data, status, param);
    38de:	4632      	mov	r2, r6
    38e0:	4629      	mov	r1, r5
    38e2:	3880      	subs	r0, #128	; 0x80
    38e4:	f7ff ff46 	bl	3774 <cdc_acm_do_cb>
}
    38e8:	bd70      	pop	{r4, r5, r6, pc}
    38ea:	4b0a      	ldr	r3, [pc, #40]	; (3914 <cdc_acm_dev_status_cb+0x48>)
    38ec:	4a0a      	ldr	r2, [pc, #40]	; (3918 <cdc_acm_dev_status_cb+0x4c>)
    38ee:	1a9b      	subs	r3, r3, r2
    38f0:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Device data not found for cfg %p", cfg);
    38f2:	f04f 0200 	mov.w	r2, #0
    38f6:	2102      	movs	r1, #2
    38f8:	f361 0202 	bfi	r2, r1, #0, #3
    38fc:	f36f 02c5 	bfc	r2, #3, #3
    3900:	f363 128f 	bfi	r2, r3, #6, #10
    3904:	4621      	mov	r1, r4
    3906:	4805      	ldr	r0, [pc, #20]	; (391c <cdc_acm_dev_status_cb+0x50>)
    3908:	f7fe f89a 	bl	1a40 <log_1>
		return;
    390c:	e7ec      	b.n	38e8 <cdc_acm_dev_status_cb+0x1c>
    390e:	bf00      	nop
    3910:	20001490 	.word	0x20001490
    3914:	00014368 	.word	0x00014368
    3918:	00014318 	.word	0x00014318
    391c:	000149d0 	.word	0x000149d0

00003920 <cdc_acm_send_notification>:
 *
 * @return  N/A.
 */
static int cdc_acm_send_notification(const struct device *dev,
				     uint16_t serial_state)
{
    3920:	b530      	push	{r4, r5, lr}
    3922:	b085      	sub	sp, #20
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    3924:	6905      	ldr	r5, [r0, #16]
	struct usb_cfg_data * const cfg = (void *)dev->config;
    3926:	6843      	ldr	r3, [r0, #4]
	struct cdc_acm_notification notification;
	uint32_t cnt = 0U;

	notification.bmRequestType = 0xA1;
    3928:	22a1      	movs	r2, #161	; 0xa1
    392a:	f88d 2004 	strb.w	r2, [sp, #4]
	notification.bNotificationType = 0x20;
    392e:	2220      	movs	r2, #32
    3930:	f88d 2005 	strb.w	r2, [sp, #5]
	notification.wValue = 0U;
    3934:	2400      	movs	r4, #0
    3936:	f8ad 4006 	strh.w	r4, [sp, #6]
	notification.wIndex = 0U;
    393a:	f8ad 4008 	strh.w	r4, [sp, #8]
	notification.wLength = sys_cpu_to_le16(sizeof(serial_state));
    393e:	2202      	movs	r2, #2
    3940:	f8ad 200a 	strh.w	r2, [sp, #10]
	notification.data = sys_cpu_to_le16(serial_state);
    3944:	f8ad 100c 	strh.w	r1, [sp, #12]

	dev_data->notification_sent = 0U;
    3948:	f885 407d 	strb.w	r4, [r5, #125]	; 0x7d

	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    394c:	6a18      	ldr	r0, [r3, #32]
    394e:	4623      	mov	r3, r4
    3950:	220a      	movs	r2, #10
    3952:	a901      	add	r1, sp, #4
    3954:	7900      	ldrb	r0, [r0, #4]
    3956:	f00d f8a0 	bl	10a9a <usb_write>
		  (const uint8_t *)&notification, sizeof(notification), NULL);

	/* Wait for notification to be sent */
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    395a:	f895 307d 	ldrb.w	r3, [r5, #125]	; 0x7d
    395e:	b94b      	cbnz	r3, 3974 <cdc_acm_send_notification+0x54>
	z_impl_k_busy_wait(usec_to_wait);
    3960:	2001      	movs	r0, #1
    3962:	f010 faea 	bl	13f3a <z_impl_k_busy_wait>
		k_busy_wait(1);

		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
    3966:	3401      	adds	r4, #1
    3968:	4b04      	ldr	r3, [pc, #16]	; (397c <cdc_acm_send_notification+0x5c>)
    396a:	429c      	cmp	r4, r3
    396c:	d9f5      	bls.n	395a <cdc_acm_send_notification+0x3a>
			LOG_DBG("CDC ACM notification timeout!");
			return -EIO;
    396e:	f06f 0004 	mvn.w	r0, #4
    3972:	e000      	b.n	3976 <cdc_acm_send_notification+0x56>
		}
	}

	return 0;
    3974:	2000      	movs	r0, #0
}
    3976:	b005      	add	sp, #20
    3978:	bd30      	pop	{r4, r5, pc}
    397a:	bf00      	nop
    397c:	000186a0 	.word	0x000186a0

00003980 <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
    3980:	b510      	push	{r4, lr}
    3982:	b082      	sub	sp, #8
    3984:	f88d 1007 	strb.w	r1, [sp, #7]
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    3988:	6904      	ldr	r4, [r0, #16]

	if (!dev_data->configured || dev_data->suspended) {
    398a:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    398e:	b113      	cbz	r3, 3996 <cdc_acm_poll_out+0x16>
    3990:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
    3994:	b18b      	cbz	r3, 39ba <cdc_acm_poll_out+0x3a>
    3996:	4b28      	ldr	r3, [pc, #160]	; (3a38 <cdc_acm_poll_out+0xb8>)
    3998:	4a28      	ldr	r2, [pc, #160]	; (3a3c <cdc_acm_poll_out+0xbc>)
    399a:	1a9b      	subs	r3, r3, r2
    399c:	08db      	lsrs	r3, r3, #3
		LOG_INF("USB device not ready, drop data");
    399e:	f04f 0100 	mov.w	r1, #0
    39a2:	2203      	movs	r2, #3
    39a4:	f362 0102 	bfi	r1, r2, #0, #3
    39a8:	f36f 01c5 	bfc	r1, #3, #3
    39ac:	f363 118f 	bfi	r1, r3, #6, #10
    39b0:	4823      	ldr	r0, [pc, #140]	; (3a40 <cdc_acm_poll_out+0xc0>)
    39b2:	f7fe f8d9 	bl	1b68 <log_0>
			return;
		}
	}

	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
}
    39b6:	b002      	add	sp, #8
    39b8:	bd10      	pop	{r4, pc}
	dev_data->tx_ready = false;
    39ba:	2300      	movs	r3, #0
    39bc:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    39c0:	2201      	movs	r2, #1
    39c2:	f10d 0107 	add.w	r1, sp, #7
    39c6:	6f20      	ldr	r0, [r4, #112]	; 0x70
    39c8:	f00c fbea 	bl	101a0 <ring_buf_put>
    39cc:	b9e0      	cbnz	r0, 3a08 <cdc_acm_poll_out+0x88>
    39ce:	4b1a      	ldr	r3, [pc, #104]	; (3a38 <cdc_acm_poll_out+0xb8>)
    39d0:	4a1a      	ldr	r2, [pc, #104]	; (3a3c <cdc_acm_poll_out+0xbc>)
    39d2:	1a9b      	subs	r3, r3, r2
    39d4:	08db      	lsrs	r3, r3, #3
		LOG_INF("Ring buffer full, drain buffer");
    39d6:	f04f 0100 	mov.w	r1, #0
    39da:	2203      	movs	r2, #3
    39dc:	f362 0102 	bfi	r1, r2, #0, #3
    39e0:	f36f 01c5 	bfc	r1, #3, #3
    39e4:	f363 118f 	bfi	r1, r3, #6, #10
    39e8:	4816      	ldr	r0, [pc, #88]	; (3a44 <cdc_acm_poll_out+0xc4>)
    39ea:	f7fe f8bd 	bl	1b68 <log_0>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    39ee:	2201      	movs	r2, #1
    39f0:	2100      	movs	r1, #0
    39f2:	6f20      	ldr	r0, [r4, #112]	; 0x70
    39f4:	f00c fc3e 	bl	10274 <ring_buf_get>
    39f8:	b160      	cbz	r0, 3a14 <cdc_acm_poll_out+0x94>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    39fa:	2201      	movs	r2, #1
    39fc:	f10d 0107 	add.w	r1, sp, #7
    3a00:	6f20      	ldr	r0, [r4, #112]	; 0x70
    3a02:	f00c fbcd 	bl	101a0 <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    3a06:	b128      	cbz	r0, 3a14 <cdc_acm_poll_out+0x94>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    3a08:	f104 0118 	add.w	r1, r4, #24
    3a0c:	480e      	ldr	r0, [pc, #56]	; (3a48 <cdc_acm_poll_out+0xc8>)
    3a0e:	f010 f851 	bl	13ab4 <k_work_submit_to_queue>
    3a12:	e7d0      	b.n	39b6 <cdc_acm_poll_out+0x36>
    3a14:	4b08      	ldr	r3, [pc, #32]	; (3a38 <cdc_acm_poll_out+0xb8>)
    3a16:	4a09      	ldr	r2, [pc, #36]	; (3a3c <cdc_acm_poll_out+0xbc>)
    3a18:	1a9b      	subs	r3, r3, r2
    3a1a:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Failed to drain buffer");
    3a1c:	f04f 0100 	mov.w	r1, #0
    3a20:	2201      	movs	r2, #1
    3a22:	f362 0102 	bfi	r1, r2, #0, #3
    3a26:	f36f 01c5 	bfc	r1, #3, #3
    3a2a:	f363 118f 	bfi	r1, r3, #6, #10
    3a2e:	4807      	ldr	r0, [pc, #28]	; (3a4c <cdc_acm_poll_out+0xcc>)
    3a30:	f7fe f89a 	bl	1b68 <log_0>
			return;
    3a34:	e7bf      	b.n	39b6 <cdc_acm_poll_out+0x36>
    3a36:	bf00      	nop
    3a38:	00014368 	.word	0x00014368
    3a3c:	00014318 	.word	0x00014318
    3a40:	000149f4 	.word	0x000149f4
    3a44:	00014a14 	.word	0x00014a14
    3a48:	200005c8 	.word	0x200005c8
    3a4c:	00014a34 	.word	0x00014a34

00003a50 <cdc_acm_write_cb>:
{
    3a50:	b510      	push	{r4, lr}
    3a52:	4614      	mov	r4, r2
	dev_data->tx_ready = true;
    3a54:	2301      	movs	r3, #1
    3a56:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	if (dev_data->cb && dev_data->tx_irq_ena) {
    3a5a:	6813      	ldr	r3, [r2, #0]
    3a5c:	b113      	cbz	r3, 3a64 <cdc_acm_write_cb+0x14>
    3a5e:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
    3a62:	b923      	cbnz	r3, 3a6e <cdc_acm_write_cb+0x1e>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
    3a64:	6f20      	ldr	r0, [r4, #112]	; 0x70
    3a66:	f00c fb37 	bl	100d8 <ring_buf_is_empty>
    3a6a:	b130      	cbz	r0, 3a7a <cdc_acm_write_cb+0x2a>
}
    3a6c:	bd10      	pop	{r4, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    3a6e:	f102 0108 	add.w	r1, r2, #8
    3a72:	4805      	ldr	r0, [pc, #20]	; (3a88 <cdc_acm_write_cb+0x38>)
    3a74:	f010 f81e 	bl	13ab4 <k_work_submit_to_queue>
    3a78:	e7f4      	b.n	3a64 <cdc_acm_write_cb+0x14>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    3a7a:	f104 0118 	add.w	r1, r4, #24
    3a7e:	4802      	ldr	r0, [pc, #8]	; (3a88 <cdc_acm_write_cb+0x38>)
    3a80:	f010 f818 	bl	13ab4 <k_work_submit_to_queue>
    3a84:	e7f2      	b.n	3a6c <cdc_acm_write_cb+0x1c>
    3a86:	bf00      	nop
    3a88:	200005c8 	.word	0x200005c8

00003a8c <cdc_acm_init>:
{
    3a8c:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    3a8e:	6904      	ldr	r4, [r0, #16]
	dev_data->common.dev = dev;
    3a90:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
    3a94:	f104 0384 	add.w	r3, r4, #132	; 0x84
	parent->next = child;
    3a98:	2200      	movs	r2, #0
    3a9a:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    3a9e:	4a0b      	ldr	r2, [pc, #44]	; (3acc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34>)
    3aa0:	6852      	ldr	r2, [r2, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    3aa2:	b172      	cbz	r2, 3ac2 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x2a>
	parent->next = child;
    3aa4:	6013      	str	r3, [r2, #0]
	list->tail = node;
    3aa6:	4a09      	ldr	r2, [pc, #36]	; (3acc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34>)
    3aa8:	6053      	str	r3, [r2, #4]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
    3aaa:	4909      	ldr	r1, [pc, #36]	; (3ad0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x38>)
    3aac:	f104 0008 	add.w	r0, r4, #8
    3ab0:	f00f fffa 	bl	13aa8 <k_work_init>
	k_work_init(&dev_data->tx_work, tx_work_handler);
    3ab4:	4907      	ldr	r1, [pc, #28]	; (3ad4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x3c>)
    3ab6:	f104 0018 	add.w	r0, r4, #24
    3aba:	f00f fff5 	bl	13aa8 <k_work_init>
}
    3abe:	2000      	movs	r0, #0
    3ac0:	bd10      	pop	{r4, pc}
    3ac2:	4a02      	ldr	r2, [pc, #8]	; (3acc <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x34>)
    3ac4:	6053      	str	r3, [r2, #4]
	list->head = node;
    3ac6:	6013      	str	r3, [r2, #0]
}
    3ac8:	e7ef      	b.n	3aaa <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x12>
    3aca:	bf00      	nop
    3acc:	20001490 	.word	0x20001490
    3ad0:	00010c85 	.word	0x00010c85
    3ad4:	00003ad9 	.word	0x00003ad9

00003ad8 <tx_work_handler>:
{
    3ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
    3ada:	b085      	sub	sp, #20
    3adc:	4604      	mov	r4, r0
	struct cdc_acm_dev_data_t *dev_data =
    3ade:	f1a0 0718 	sub.w	r7, r0, #24
	const struct device *dev = dev_data->common.dev;
    3ae2:	6e83      	ldr	r3, [r0, #104]	; 0x68
	struct usb_cfg_data *cfg = (void *)dev->config;
    3ae4:	685b      	ldr	r3, [r3, #4]
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    3ae6:	6a1b      	ldr	r3, [r3, #32]
    3ae8:	7d1d      	ldrb	r5, [r3, #20]
	if (usb_transfer_is_busy(ep)) {
    3aea:	4628      	mov	r0, r5
    3aec:	f00d f8b2 	bl	10c54 <usb_transfer_is_busy>
    3af0:	b108      	cbz	r0, 3af6 <tx_work_handler+0x1e>
}
    3af2:	b005      	add	sp, #20
    3af4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
    3af6:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3afa:	a903      	add	r1, sp, #12
    3afc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    3afe:	f00c fb6f 	bl	101e0 <ring_buf_get_claim>
	if (!len) {
    3b02:	4606      	mov	r6, r0
    3b04:	2800      	cmp	r0, #0
    3b06:	d0f4      	beq.n	3af2 <tx_work_handler+0x1a>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
    3b08:	f010 0f3f 	tst.w	r0, #63	; 0x3f
    3b0c:	d100      	bne.n	3b10 <tx_work_handler+0x38>
		len -= 1;
    3b0e:	1e46      	subs	r6, r0, #1
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    3b10:	9701      	str	r7, [sp, #4]
    3b12:	4b06      	ldr	r3, [pc, #24]	; (3b2c <tx_work_handler+0x54>)
    3b14:	9300      	str	r3, [sp, #0]
    3b16:	2302      	movs	r3, #2
    3b18:	4632      	mov	r2, r6
    3b1a:	9903      	ldr	r1, [sp, #12]
    3b1c:	4628      	mov	r0, r5
    3b1e:	f7ff fbdf 	bl	32e0 <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
    3b22:	4631      	mov	r1, r6
    3b24:	6da0      	ldr	r0, [r4, #88]	; 0x58
    3b26:	f00c fb87 	bl	10238 <ring_buf_get_finish>
    3b2a:	e7e2      	b.n	3af2 <tx_work_handler+0x1a>
    3b2c:	00003a51 	.word	0x00003a51

00003b30 <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(const struct device *dev)
{
    3b30:	b530      	push	{r4, r5, lr}
    3b32:	b083      	sub	sp, #12
	ARG_UNUSED(dev);

	k_work_queue_start(&z_usb_work_q,
    3b34:	4d08      	ldr	r5, [pc, #32]	; (3b58 <z_usb_work_q_init+0x28>)
    3b36:	2400      	movs	r4, #0
    3b38:	9400      	str	r4, [sp, #0]
    3b3a:	f04f 33ff 	mov.w	r3, #4294967295
    3b3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3b42:	4906      	ldr	r1, [pc, #24]	; (3b5c <z_usb_work_q_init+0x2c>)
    3b44:	4628      	mov	r0, r5
    3b46:	f00a fbbf 	bl	e2c8 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    3b4a:	4905      	ldr	r1, [pc, #20]	; (3b60 <z_usb_work_q_init+0x30>)
    3b4c:	4628      	mov	r0, r5
    3b4e:	f00a f85f 	bl	dc10 <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
    3b52:	4620      	mov	r0, r4
    3b54:	b003      	add	sp, #12
    3b56:	bd30      	pop	{r4, r5, pc}
    3b58:	200005c8 	.word	0x200005c8
    3b5c:	20003040 	.word	0x20003040
    3b60:	00014ab8 	.word	0x00014ab8

00003b64 <get_flash_area_from_id>:

extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
    3b64:	b410      	push	{r4}
    3b66:	4604      	mov	r4, r0
	for (int i = 0; i < flash_map_entries; i++) {
    3b68:	2300      	movs	r3, #0
    3b6a:	4a08      	ldr	r2, [pc, #32]	; (3b8c <get_flash_area_from_id+0x28>)
    3b6c:	6812      	ldr	r2, [r2, #0]
    3b6e:	429a      	cmp	r2, r3
    3b70:	dd09      	ble.n	3b86 <get_flash_area_from_id+0x22>
		if (flash_map[i].fa_id == idx) {
    3b72:	011a      	lsls	r2, r3, #4
    3b74:	4906      	ldr	r1, [pc, #24]	; (3b90 <get_flash_area_from_id+0x2c>)
    3b76:	6809      	ldr	r1, [r1, #0]
    3b78:	eb01 1003 	add.w	r0, r1, r3, lsl #4
    3b7c:	5c8a      	ldrb	r2, [r1, r2]
    3b7e:	42a2      	cmp	r2, r4
    3b80:	d002      	beq.n	3b88 <get_flash_area_from_id+0x24>
	for (int i = 0; i < flash_map_entries; i++) {
    3b82:	3301      	adds	r3, #1
    3b84:	e7f1      	b.n	3b6a <get_flash_area_from_id+0x6>
			return &flash_map[i];
		}
	}

	return NULL;
    3b86:	2000      	movs	r0, #0
}
    3b88:	bc10      	pop	{r4}
    3b8a:	4770      	bx	lr
    3b8c:	00014b28 	.word	0x00014b28
    3b90:	20000204 	.word	0x20000204

00003b94 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    3b94:	4b08      	ldr	r3, [pc, #32]	; (3bb8 <flash_area_open+0x24>)
    3b96:	681b      	ldr	r3, [r3, #0]
    3b98:	b13b      	cbz	r3, 3baa <flash_area_open+0x16>
{
    3b9a:	b510      	push	{r4, lr}
    3b9c:	460c      	mov	r4, r1
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    3b9e:	f7ff ffe1 	bl	3b64 <get_flash_area_from_id>
	if (area == NULL) {
    3ba2:	b128      	cbz	r0, 3bb0 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    3ba4:	6020      	str	r0, [r4, #0]
	return 0;
    3ba6:	2000      	movs	r0, #0
}
    3ba8:	bd10      	pop	{r4, pc}
		return -EACCES;
    3baa:	f06f 000c 	mvn.w	r0, #12
}
    3bae:	4770      	bx	lr
		return -ENOENT;
    3bb0:	f06f 0001 	mvn.w	r0, #1
    3bb4:	e7f8      	b.n	3ba8 <flash_area_open+0x14>
    3bb6:	bf00      	nop
    3bb8:	20000204 	.word	0x20000204

00003bbc <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    3bbc:	4b1b      	ldr	r3, [pc, #108]	; (3c2c <pm_system_resume+0x70>)
    3bbe:	681b      	ldr	r3, [r3, #0]
    3bc0:	2b00      	cmp	r3, #0
    3bc2:	d132      	bne.n	3c2a <pm_system_resume+0x6e>
{
    3bc4:	b530      	push	{r4, r5, lr}
    3bc6:	b085      	sub	sp, #20
		post_ops_done = 1;
    3bc8:	4b18      	ldr	r3, [pc, #96]	; (3c2c <pm_system_resume+0x70>)
    3bca:	2201      	movs	r2, #1
    3bcc:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
    3bce:	4b18      	ldr	r3, [pc, #96]	; (3c30 <pm_system_resume+0x74>)
    3bd0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    3bd4:	ab04      	add	r3, sp, #16
    3bd6:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    3bda:	4b16      	ldr	r3, [pc, #88]	; (3c34 <pm_system_resume+0x78>)
    3bdc:	b163      	cbz	r3, 3bf8 <pm_system_resume+0x3c>
		pm_power_state_exit_post_ops(info);
    3bde:	f00d fb85 	bl	112ec <pm_power_state_exit_post_ops>
    3be2:	f04f 0320 	mov.w	r3, #32
    3be6:	f3ef 8511 	mrs	r5, BASEPRI
    3bea:	f383 8812 	msr	BASEPRI_MAX, r3
    3bee:	f3bf 8f6f 	isb	sy
	return list->head;
    3bf2:	4b11      	ldr	r3, [pc, #68]	; (3c38 <pm_system_resume+0x7c>)
    3bf4:	681c      	ldr	r4, [r3, #0]
    3bf6:	e00a      	b.n	3c0e <pm_system_resume+0x52>
	__asm__ volatile(
    3bf8:	2300      	movs	r3, #0
    3bfa:	f383 8811 	msr	BASEPRI, r3
    3bfe:	f3bf 8f6f 	isb	sy
}
    3c02:	e7ee      	b.n	3be2 <pm_system_resume+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3c04:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    3c06:	b10c      	cbz	r4, 3c0c <pm_system_resume+0x50>
	return node->next;
    3c08:	6823      	ldr	r3, [r4, #0]
    3c0a:	b143      	cbz	r3, 3c1e <pm_system_resume+0x62>
{
    3c0c:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3c0e:	b134      	cbz	r4, 3c1e <pm_system_resume+0x62>
			callback = notifier->state_exit;
    3c10:	68a3      	ldr	r3, [r4, #8]
		if (callback) {
    3c12:	2b00      	cmp	r3, #0
    3c14:	d0f6      	beq.n	3c04 <pm_system_resume+0x48>
			callback(z_power_state.state);
    3c16:	4a06      	ldr	r2, [pc, #24]	; (3c30 <pm_system_resume+0x74>)
    3c18:	7810      	ldrb	r0, [r2, #0]
    3c1a:	4798      	blx	r3
    3c1c:	e7f2      	b.n	3c04 <pm_system_resume+0x48>
	__asm__ volatile(
    3c1e:	f385 8811 	msr	BASEPRI, r5
    3c22:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
	}
}
    3c26:	b005      	add	sp, #20
    3c28:	bd30      	pop	{r4, r5, pc}
    3c2a:	4770      	bx	lr
    3c2c:	20000208 	.word	0x20000208
    3c30:	200014a0 	.word	0x200014a0
    3c34:	000112ed 	.word	0x000112ed
    3c38:	20001498 	.word	0x20001498

00003c3c <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    3c3c:	b570      	push	{r4, r5, r6, lr}
    3c3e:	b088      	sub	sp, #32
    3c40:	4606      	mov	r6, r0
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
    3c42:	4c2a      	ldr	r4, [pc, #168]	; (3cec <pm_system_suspend+0xb0>)
    3c44:	466d      	mov	r5, sp
    3c46:	4601      	mov	r1, r0
    3c48:	4628      	mov	r0, r5
    3c4a:	f00d f9ce 	bl	10fea <pm_policy_next_state>
    3c4e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    3c52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    3c56:	7820      	ldrb	r0, [r4, #0]
    3c58:	2800      	cmp	r0, #0
    3c5a:	d045      	beq.n	3ce8 <pm_system_suspend+0xac>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
    3c5c:	4b24      	ldr	r3, [pc, #144]	; (3cf0 <pm_system_suspend+0xb4>)
    3c5e:	2200      	movs	r2, #0
    3c60:	601a      	str	r2, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    3c62:	f1b6 3fff 	cmp.w	r6, #4294967295
    3c66:	d10c      	bne.n	3c82 <pm_system_suspend+0x46>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    3c68:	f00a fbea 	bl	e440 <k_sched_lock>
	__asm__ volatile(
    3c6c:	f04f 0320 	mov.w	r3, #32
    3c70:	f3ef 8511 	mrs	r5, BASEPRI
    3c74:	f383 8812 	msr	BASEPRI_MAX, r3
    3c78:	f3bf 8f6f 	isb	sy
	return list->head;
    3c7c:	4b1d      	ldr	r3, [pc, #116]	; (3cf4 <pm_system_suspend+0xb8>)
    3c7e:	681c      	ldr	r4, [r3, #0]
    3c80:	e016      	b.n	3cb0 <pm_system_suspend+0x74>
		     k_us_to_ticks_ceil32(z_power_state.exit_latency_us), true);
    3c82:	68a3      	ldr	r3, [r4, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    3c84:	0c59      	lsrs	r1, r3, #17
    3c86:	03d8      	lsls	r0, r3, #15
    3c88:	4c1b      	ldr	r4, [pc, #108]	; (3cf8 <pm_system_suspend+0xbc>)
    3c8a:	4a1c      	ldr	r2, [pc, #112]	; (3cfc <pm_system_suspend+0xc0>)
    3c8c:	2300      	movs	r3, #0
    3c8e:	1900      	adds	r0, r0, r4
    3c90:	f04f 0400 	mov.w	r4, #0
    3c94:	eb44 0101 	adc.w	r1, r4, r1
    3c98:	f7fc fa32 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    3c9c:	2101      	movs	r1, #1
    3c9e:	1a30      	subs	r0, r6, r0
    3ca0:	f010 f91c 	bl	13edc <z_set_timeout_expiry>
    3ca4:	e7e0      	b.n	3c68 <pm_system_suspend+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3ca6:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    3ca8:	b10c      	cbz	r4, 3cae <pm_system_suspend+0x72>
	return node->next;
    3caa:	6823      	ldr	r3, [r4, #0]
    3cac:	b143      	cbz	r3, 3cc0 <pm_system_suspend+0x84>
{
    3cae:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3cb0:	b134      	cbz	r4, 3cc0 <pm_system_suspend+0x84>
			callback = notifier->state_entry;
    3cb2:	6863      	ldr	r3, [r4, #4]
		if (callback) {
    3cb4:	2b00      	cmp	r3, #0
    3cb6:	d0f6      	beq.n	3ca6 <pm_system_suspend+0x6a>
			callback(z_power_state.state);
    3cb8:	4a0c      	ldr	r2, [pc, #48]	; (3cec <pm_system_suspend+0xb0>)
    3cba:	7810      	ldrb	r0, [r2, #0]
    3cbc:	4798      	blx	r3
    3cbe:	e7f2      	b.n	3ca6 <pm_system_suspend+0x6a>
	__asm__ volatile(
    3cc0:	f385 8811 	msr	BASEPRI, r5
    3cc4:	f3bf 8f6f 	isb	sy
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
	pm_state_set(z_power_state);
    3cc8:	4b08      	ldr	r3, [pc, #32]	; (3cec <pm_system_suspend+0xb0>)
    3cca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    3cce:	ab08      	add	r3, sp, #32
    3cd0:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    3cd4:	4b0a      	ldr	r3, [pc, #40]	; (3d00 <pm_system_suspend+0xc4>)
    3cd6:	b10b      	cbz	r3, 3cdc <pm_system_suspend+0xa0>
		pm_power_state_set(info);
    3cd8:	f00d faf5 	bl	112c6 <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    3cdc:	f7ff ff6e 	bl	3bbc <pm_system_resume>
	k_sched_unlock();
    3ce0:	f00a fdac 	bl	e83c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
    3ce4:	4b01      	ldr	r3, [pc, #4]	; (3cec <pm_system_suspend+0xb0>)
    3ce6:	7818      	ldrb	r0, [r3, #0]
}
    3ce8:	b008      	add	sp, #32
    3cea:	bd70      	pop	{r4, r5, r6, pc}
    3cec:	200014a0 	.word	0x200014a0
    3cf0:	20000208 	.word	0x20000208
    3cf4:	20001498 	.word	0x20001498
    3cf8:	000f423f 	.word	0x000f423f
    3cfc:	000f4240 	.word	0x000f4240
    3d00:	000112c7 	.word	0x000112c7

00003d04 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    3d04:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    3d06:	4802      	ldr	r0, [pc, #8]	; (3d10 <nrf_cc3xx_platform_abort_init+0xc>)
    3d08:	f00b f9f0 	bl	f0ec <nrf_cc3xx_platform_set_abort>
}
    3d0c:	bd08      	pop	{r3, pc}
    3d0e:	bf00      	nop
    3d10:	00014b34 	.word	0x00014b34

00003d14 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    3d14:	b1d0      	cbz	r0, 3d4c <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3d16:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    3d18:	6842      	ldr	r2, [r0, #4]
    3d1a:	2a04      	cmp	r2, #4
    3d1c:	d005      	beq.n	3d2a <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3d1e:	b1d2      	cbz	r2, 3d56 <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    3d20:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    3d22:	f00a f8e3 	bl	deec <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    3d26:	2000      	movs	r0, #0
    }
}
    3d28:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    3d2a:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3d2c:	2200      	movs	r2, #0
    3d2e:	f3bf 8f5b 	dmb	ish
    3d32:	e853 1f00 	ldrex	r1, [r3]
    3d36:	2901      	cmp	r1, #1
    3d38:	d103      	bne.n	3d42 <mutex_unlock_platform+0x2e>
    3d3a:	e843 2000 	strex	r0, r2, [r3]
    3d3e:	2800      	cmp	r0, #0
    3d40:	d1f7      	bne.n	3d32 <mutex_unlock_platform+0x1e>
    3d42:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3d46:	d104      	bne.n	3d52 <mutex_unlock_platform+0x3e>
    3d48:	4610      	mov	r0, r2
    3d4a:	e7ed      	b.n	3d28 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3d4c:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    3d50:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3d52:	4802      	ldr	r0, [pc, #8]	; (3d5c <mutex_unlock_platform+0x48>)
    3d54:	e7e8      	b.n	3d28 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3d56:	4802      	ldr	r0, [pc, #8]	; (3d60 <mutex_unlock_platform+0x4c>)
    3d58:	e7e6      	b.n	3d28 <mutex_unlock_platform+0x14>
    3d5a:	bf00      	nop
    3d5c:	ffff8fe9 	.word	0xffff8fe9
    3d60:	ffff8fea 	.word	0xffff8fea

00003d64 <mutex_lock_platform>:
    if(mutex == NULL) {
    3d64:	b320      	cbz	r0, 3db0 <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3d66:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    3d68:	6842      	ldr	r2, [r0, #4]
    3d6a:	2a04      	cmp	r2, #4
    3d6c:	d002      	beq.n	3d74 <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3d6e:	b992      	cbnz	r2, 3d96 <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3d70:	4811      	ldr	r0, [pc, #68]	; (3db8 <mutex_lock_platform+0x54>)
    3d72:	e00f      	b.n	3d94 <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    3d74:	6803      	ldr	r3, [r0, #0]
    3d76:	2201      	movs	r2, #1
    3d78:	f3bf 8f5b 	dmb	ish
    3d7c:	e853 1f00 	ldrex	r1, [r3]
    3d80:	2900      	cmp	r1, #0
    3d82:	d103      	bne.n	3d8c <mutex_lock_platform+0x28>
    3d84:	e843 2000 	strex	r0, r2, [r3]
    3d88:	2800      	cmp	r0, #0
    3d8a:	d1f7      	bne.n	3d7c <mutex_lock_platform+0x18>
    3d8c:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3d90:	d10c      	bne.n	3dac <mutex_lock_platform+0x48>
    3d92:	2000      	movs	r0, #0
}
    3d94:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
    3d96:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    3d98:	f04f 32ff 	mov.w	r2, #4294967295
    3d9c:	f04f 33ff 	mov.w	r3, #4294967295
    3da0:	f00a f81a 	bl	ddd8 <z_impl_k_mutex_lock>
        if (ret == 0) {
    3da4:	2800      	cmp	r0, #0
    3da6:	d0f5      	beq.n	3d94 <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    3da8:	4804      	ldr	r0, [pc, #16]	; (3dbc <mutex_lock_platform+0x58>)
    3daa:	e7f3      	b.n	3d94 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3dac:	4803      	ldr	r0, [pc, #12]	; (3dbc <mutex_lock_platform+0x58>)
    3dae:	e7f1      	b.n	3d94 <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3db0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    3db4:	4770      	bx	lr
    3db6:	bf00      	nop
    3db8:	ffff8fea 	.word	0xffff8fea
    3dbc:	ffff8fe9 	.word	0xffff8fe9

00003dc0 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3dc0:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    3dc2:	4604      	mov	r4, r0
    3dc4:	b188      	cbz	r0, 3dea <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3dc6:	6863      	ldr	r3, [r4, #4]
    3dc8:	2b04      	cmp	r3, #4
    3dca:	d00d      	beq.n	3de8 <mutex_free_platform+0x28>
    3dcc:	2b08      	cmp	r3, #8
    3dce:	d00b      	beq.n	3de8 <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    3dd0:	b153      	cbz	r3, 3de8 <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    3dd2:	f013 0f02 	tst.w	r3, #2
    3dd6:	d00d      	beq.n	3df4 <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    3dd8:	4621      	mov	r1, r4
    3dda:	4809      	ldr	r0, [pc, #36]	; (3e00 <mutex_free_platform+0x40>)
    3ddc:	f00f fd26 	bl	1382c <k_mem_slab_free>
        mutex->mutex = NULL;
    3de0:	2300      	movs	r3, #0
    3de2:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    3de4:	2300      	movs	r3, #0
    3de6:	6063      	str	r3, [r4, #4]
}
    3de8:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    3dea:	4b06      	ldr	r3, [pc, #24]	; (3e04 <mutex_free_platform+0x44>)
    3dec:	685b      	ldr	r3, [r3, #4]
    3dee:	4806      	ldr	r0, [pc, #24]	; (3e08 <mutex_free_platform+0x48>)
    3df0:	4798      	blx	r3
    3df2:	e7e8      	b.n	3dc6 <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    3df4:	2214      	movs	r2, #20
    3df6:	2100      	movs	r1, #0
    3df8:	6820      	ldr	r0, [r4, #0]
    3dfa:	f00d fa1b 	bl	11234 <memset>
    3dfe:	e7f1      	b.n	3de4 <mutex_free_platform+0x24>
    3e00:	200014ac 	.word	0x200014ac
    3e04:	20000268 	.word	0x20000268
    3e08:	00014b3c 	.word	0x00014b3c

00003e0c <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3e0c:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    3e0e:	4604      	mov	r4, r0
    3e10:	b178      	cbz	r0, 3e32 <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3e12:	6863      	ldr	r3, [r4, #4]
    3e14:	2b04      	cmp	r3, #4
    3e16:	d00b      	beq.n	3e30 <mutex_init_platform+0x24>
    3e18:	2b08      	cmp	r3, #8
    3e1a:	d009      	beq.n	3e30 <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    3e1c:	b90b      	cbnz	r3, 3e22 <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    3e1e:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    3e20:	b163      	cbz	r3, 3e3c <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    3e22:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    3e24:	f00f fda1 	bl	1396a <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    3e28:	6863      	ldr	r3, [r4, #4]
    3e2a:	f043 0301 	orr.w	r3, r3, #1
    3e2e:	6063      	str	r3, [r4, #4]
}
    3e30:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    3e32:	4b0f      	ldr	r3, [pc, #60]	; (3e70 <mutex_init_platform+0x64>)
    3e34:	685b      	ldr	r3, [r3, #4]
    3e36:	480f      	ldr	r0, [pc, #60]	; (3e74 <mutex_init_platform+0x68>)
    3e38:	4798      	blx	r3
    3e3a:	e7ea      	b.n	3e12 <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    3e3c:	f04f 32ff 	mov.w	r2, #4294967295
    3e40:	f04f 33ff 	mov.w	r3, #4294967295
    3e44:	4621      	mov	r1, r4
    3e46:	480c      	ldr	r0, [pc, #48]	; (3e78 <mutex_init_platform+0x6c>)
    3e48:	f009 fe8c 	bl	db64 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    3e4c:	b908      	cbnz	r0, 3e52 <mutex_init_platform+0x46>
    3e4e:	6823      	ldr	r3, [r4, #0]
    3e50:	b91b      	cbnz	r3, 3e5a <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    3e52:	4b07      	ldr	r3, [pc, #28]	; (3e70 <mutex_init_platform+0x64>)
    3e54:	685b      	ldr	r3, [r3, #4]
    3e56:	4809      	ldr	r0, [pc, #36]	; (3e7c <mutex_init_platform+0x70>)
    3e58:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    3e5a:	2214      	movs	r2, #20
    3e5c:	2100      	movs	r1, #0
    3e5e:	6820      	ldr	r0, [r4, #0]
    3e60:	f00d f9e8 	bl	11234 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    3e64:	6863      	ldr	r3, [r4, #4]
    3e66:	f043 0302 	orr.w	r3, r3, #2
    3e6a:	6063      	str	r3, [r4, #4]
    3e6c:	e7d9      	b.n	3e22 <mutex_init_platform+0x16>
    3e6e:	bf00      	nop
    3e70:	20000268 	.word	0x20000268
    3e74:	00014b3c 	.word	0x00014b3c
    3e78:	200014ac 	.word	0x200014ac
    3e7c:	00014b64 	.word	0x00014b64

00003e80 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    3e80:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    3e82:	2340      	movs	r3, #64	; 0x40
    3e84:	2214      	movs	r2, #20
    3e86:	4904      	ldr	r1, [pc, #16]	; (3e98 <nrf_cc3xx_platform_mutex_init+0x18>)
    3e88:	4804      	ldr	r0, [pc, #16]	; (3e9c <nrf_cc3xx_platform_mutex_init+0x1c>)
    3e8a:	f00f fcc1 	bl	13810 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    3e8e:	4904      	ldr	r1, [pc, #16]	; (3ea0 <nrf_cc3xx_platform_mutex_init+0x20>)
    3e90:	4804      	ldr	r0, [pc, #16]	; (3ea4 <nrf_cc3xx_platform_mutex_init+0x24>)
    3e92:	f00b f98d 	bl	f1b0 <nrf_cc3xx_platform_set_mutexes>
}
    3e96:	bd08      	pop	{r3, pc}
    3e98:	200014c8 	.word	0x200014c8
    3e9c:	200014ac 	.word	0x200014ac
    3ea0:	00014ba4 	.word	0x00014ba4
    3ea4:	00014b94 	.word	0x00014b94

00003ea8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    3ea8:	4901      	ldr	r1, [pc, #4]	; (3eb0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    3eaa:	2210      	movs	r2, #16
	str	r2, [r1]
    3eac:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    3eae:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    3eb0:	e000ed10 	.word	0xe000ed10

00003eb4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    3eb4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    3eb6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    3eb8:	f380 8811 	msr	BASEPRI, r0
	isb
    3ebc:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    3ec0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    3ec4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    3ec6:	b662      	cpsie	i
	isb
    3ec8:	f3bf 8f6f 	isb	sy

	bx	lr
    3ecc:	4770      	bx	lr
    3ece:	bf00      	nop

00003ed0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    3ed0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    3ed2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    3ed4:	f381 8811 	msr	BASEPRI, r1

	wfe
    3ed8:	bf20      	wfe

	msr	BASEPRI, r0
    3eda:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    3ede:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    3ee0:	4770      	bx	lr
    3ee2:	bf00      	nop

00003ee4 <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    3ee4:	b570      	push	{r4, r5, r6, lr}
    3ee6:	b082      	sub	sp, #8
    3ee8:	4604      	mov	r4, r0
    3eea:	4d1f      	ldr	r5, [pc, #124]	; (3f68 <esf_dump+0x84>)
    3eec:	4b1f      	ldr	r3, [pc, #124]	; (3f6c <esf_dump+0x88>)
    3eee:	1aed      	subs	r5, r5, r3
    3ef0:	08ed      	lsrs	r5, r5, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    3ef2:	2601      	movs	r6, #1
    3ef4:	f04f 0300 	mov.w	r3, #0
    3ef8:	f366 0302 	bfi	r3, r6, #0, #3
    3efc:	f36f 03c5 	bfc	r3, #3, #3
    3f00:	f365 138f 	bfi	r3, r5, #6, #10
    3f04:	f8ad 3000 	strh.w	r3, [sp]
    3f08:	6883      	ldr	r3, [r0, #8]
    3f0a:	6842      	ldr	r2, [r0, #4]
    3f0c:	6801      	ldr	r1, [r0, #0]
    3f0e:	4818      	ldr	r0, [pc, #96]	; (3f70 <esf_dump+0x8c>)
    3f10:	f7fd fd58 	bl	19c4 <log_3>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    3f14:	f04f 0300 	mov.w	r3, #0
    3f18:	f366 0302 	bfi	r3, r6, #0, #3
    3f1c:	f36f 03c5 	bfc	r3, #3, #3
    3f20:	f365 138f 	bfi	r3, r5, #6, #10
    3f24:	f8ad 3000 	strh.w	r3, [sp]
    3f28:	6963      	ldr	r3, [r4, #20]
    3f2a:	6922      	ldr	r2, [r4, #16]
    3f2c:	68e1      	ldr	r1, [r4, #12]
    3f2e:	4811      	ldr	r0, [pc, #68]	; (3f74 <esf_dump+0x90>)
    3f30:	f7fd fd48 	bl	19c4 <log_3>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    3f34:	f04f 0200 	mov.w	r2, #0
    3f38:	f366 0202 	bfi	r2, r6, #0, #3
    3f3c:	f36f 02c5 	bfc	r2, #3, #3
    3f40:	f365 128f 	bfi	r2, r5, #6, #10
    3f44:	69e1      	ldr	r1, [r4, #28]
    3f46:	480c      	ldr	r0, [pc, #48]	; (3f78 <esf_dump+0x94>)
    3f48:	f7fd fd7a 	bl	1a40 <log_1>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    3f4c:	f04f 0200 	mov.w	r2, #0
    3f50:	f366 0202 	bfi	r2, r6, #0, #3
    3f54:	f36f 02c5 	bfc	r2, #3, #3
    3f58:	f365 128f 	bfi	r2, r5, #6, #10
    3f5c:	69a1      	ldr	r1, [r4, #24]
    3f5e:	4807      	ldr	r0, [pc, #28]	; (3f7c <esf_dump+0x98>)
    3f60:	f7fd fd6e 	bl	1a40 <log_1>
		esf->basic.pc);
}
    3f64:	b002      	add	sp, #8
    3f66:	bd70      	pop	{r4, r5, r6, pc}
    3f68:	00014348 	.word	0x00014348
    3f6c:	00014318 	.word	0x00014318
    3f70:	00014bb8 	.word	0x00014bb8
    3f74:	00014be8 	.word	0x00014be8
    3f78:	00014c18 	.word	0x00014c18
    3f7c:	00014c28 	.word	0x00014c28

00003f80 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    3f80:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3f82:	2b00      	cmp	r3, #0
    3f84:	db08      	blt.n	3f98 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3f86:	f000 001f 	and.w	r0, r0, #31
    3f8a:	095b      	lsrs	r3, r3, #5
    3f8c:	2201      	movs	r2, #1
    3f8e:	fa02 f000 	lsl.w	r0, r2, r0
    3f92:	4a02      	ldr	r2, [pc, #8]	; (3f9c <arch_irq_enable+0x1c>)
    3f94:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    3f98:	4770      	bx	lr
    3f9a:	bf00      	nop
    3f9c:	e000e100 	.word	0xe000e100

00003fa0 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    3fa0:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3fa2:	2b00      	cmp	r3, #0
    3fa4:	db0d      	blt.n	3fc2 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3fa6:	f000 001f 	and.w	r0, r0, #31
    3faa:	095b      	lsrs	r3, r3, #5
    3fac:	2201      	movs	r2, #1
    3fae:	fa02 f000 	lsl.w	r0, r2, r0
    3fb2:	3320      	adds	r3, #32
    3fb4:	4a03      	ldr	r2, [pc, #12]	; (3fc4 <arch_irq_disable+0x24>)
    3fb6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3fba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3fbe:	f3bf 8f6f 	isb	sy
}
    3fc2:	4770      	bx	lr
    3fc4:	e000e100 	.word	0xe000e100

00003fc8 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    3fc8:	0942      	lsrs	r2, r0, #5
    3fca:	4b05      	ldr	r3, [pc, #20]	; (3fe0 <arch_irq_is_enabled+0x18>)
    3fcc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3fd0:	f000 001f 	and.w	r0, r0, #31
    3fd4:	2301      	movs	r3, #1
    3fd6:	fa03 f000 	lsl.w	r0, r3, r0
}
    3fda:	4010      	ands	r0, r2
    3fdc:	4770      	bx	lr
    3fde:	bf00      	nop
    3fe0:	e000e100 	.word	0xe000e100

00003fe4 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    3fe4:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    3fe6:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    3fe8:	2b00      	cmp	r3, #0
    3fea:	db08      	blt.n	3ffe <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3fec:	0149      	lsls	r1, r1, #5
    3fee:	b2c9      	uxtb	r1, r1
    3ff0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3ff4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    3ff8:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    3ffc:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3ffe:	f000 000f 	and.w	r0, r0, #15
    4002:	0149      	lsls	r1, r1, #5
    4004:	b2c9      	uxtb	r1, r1
    4006:	4b01      	ldr	r3, [pc, #4]	; (400c <z_arm_irq_priority_set+0x28>)
    4008:	5419      	strb	r1, [r3, r0]
}
    400a:	4770      	bx	lr
    400c:	e000ed14 	.word	0xe000ed14

00004010 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    4010:	bf30      	wfi
    b z_SysNmiOnReset
    4012:	f7ff bffd 	b.w	4010 <z_SysNmiOnReset>
    4016:	bf00      	nop

00004018 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    4018:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    401a:	4b0b      	ldr	r3, [pc, #44]	; (4048 <z_arm_prep_c+0x30>)
    401c:	4a0b      	ldr	r2, [pc, #44]	; (404c <z_arm_prep_c+0x34>)
    401e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    4022:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    4024:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4028:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    402c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    4030:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    4034:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    4038:	f009 fd20 	bl	da7c <z_bss_zero>
	z_data_copy();
    403c:	f00a fd90 	bl	eb60 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    4040:	f000 fcb6 	bl	49b0 <z_arm_interrupt_init>
	z_cstart();
    4044:	f009 fd26 	bl	da94 <z_cstart>
    4048:	e000ed00 	.word	0xe000ed00
    404c:	00000000 	.word	0x00000000

00004050 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    4050:	4a0a      	ldr	r2, [pc, #40]	; (407c <arch_swap+0x2c>)
    4052:	6893      	ldr	r3, [r2, #8]
    4054:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    4058:	4909      	ldr	r1, [pc, #36]	; (4080 <arch_swap+0x30>)
    405a:	6809      	ldr	r1, [r1, #0]
    405c:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4060:	4908      	ldr	r1, [pc, #32]	; (4084 <arch_swap+0x34>)
    4062:	684b      	ldr	r3, [r1, #4]
    4064:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4068:	604b      	str	r3, [r1, #4]
    406a:	2300      	movs	r3, #0
    406c:	f383 8811 	msr	BASEPRI, r3
    4070:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    4074:	6893      	ldr	r3, [r2, #8]
}
    4076:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    407a:	4770      	bx	lr
    407c:	20002aec 	.word	0x20002aec
    4080:	00015a50 	.word	0x00015a50
    4084:	e000ed00 	.word	0xe000ed00

00004088 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    4088:	4913      	ldr	r1, [pc, #76]	; (40d8 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    408a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    408c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    4090:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    4092:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    4096:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    409a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    409c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    40a0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    40a4:	4f0d      	ldr	r7, [pc, #52]	; (40dc <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    40a6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    40aa:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    40ac:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    40ae:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    40b0:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    40b4:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    40b6:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    40ba:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    40be:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    40c0:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    40c2:	f000 fd17 	bl	4af4 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    40c6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    40ca:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    40ce:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    40d2:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    40d6:	4770      	bx	lr
    ldr r1, =_kernel
    40d8:	20002aec 	.word	0x20002aec
    ldr v4, =_SCS_ICSR
    40dc:	e000ed04 	.word	0xe000ed04

000040e0 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    40e0:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    40e4:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    40e6:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    40ea:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    40ee:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    40f0:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    40f4:	2902      	cmp	r1, #2
    beq _oops
    40f6:	d0ff      	beq.n	40f8 <_oops>

000040f8 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    40f8:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    40fa:	f00c ff88 	bl	1100e <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    40fe:	bd01      	pop	{r0, pc}

00004100 <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    4100:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    4102:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    4106:	490d      	ldr	r1, [pc, #52]	; (413c <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    4108:	f021 0101 	bic.w	r1, r1, #1
    410c:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    4110:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    4114:	9b01      	ldr	r3, [sp, #4]
    4116:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    411a:	9b02      	ldr	r3, [sp, #8]
    411c:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    4120:	9b03      	ldr	r3, [sp, #12]
    4122:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    4126:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    412a:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    412e:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    4130:	2300      	movs	r3, #0
    4132:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    4136:	bc10      	pop	{r4}
    4138:	4770      	bx	lr
    413a:	bf00      	nop
    413c:	0000f897 	.word	0x0000f897

00004140 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    4140:	4b16      	ldr	r3, [pc, #88]	; (419c <z_check_thread_stack_fail+0x5c>)
    4142:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    4144:	b1da      	cbz	r2, 417e <z_check_thread_stack_fail+0x3e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    4146:	f110 0f16 	cmn.w	r0, #22
    414a:	d01a      	beq.n	4182 <z_check_thread_stack_fail+0x42>
{
    414c:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    414e:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    4152:	f1a3 0420 	sub.w	r4, r3, #32
    4156:	4284      	cmp	r4, r0
    4158:	d805      	bhi.n	4166 <z_check_thread_stack_fail+0x26>
    415a:	4283      	cmp	r3, r0
    415c:	d908      	bls.n	4170 <z_check_thread_stack_fail+0x30>
    415e:	428b      	cmp	r3, r1
    4160:	d808      	bhi.n	4174 <z_check_thread_stack_fail+0x34>
    4162:	2100      	movs	r1, #0
    4164:	e000      	b.n	4168 <z_check_thread_stack_fail+0x28>
    4166:	2100      	movs	r1, #0
    4168:	b931      	cbnz	r1, 4178 <z_check_thread_stack_fail+0x38>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    416a:	2000      	movs	r0, #0
}
    416c:	bc10      	pop	{r4}
    416e:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    4170:	2100      	movs	r1, #0
    4172:	e7f9      	b.n	4168 <z_check_thread_stack_fail+0x28>
    4174:	2101      	movs	r1, #1
    4176:	e7f7      	b.n	4168 <z_check_thread_stack_fail+0x28>
		return thread->stack_info.start;
    4178:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    417c:	e7f6      	b.n	416c <z_check_thread_stack_fail+0x2c>
		return 0;
    417e:	2000      	movs	r0, #0
    4180:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    4182:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    4186:	428b      	cmp	r3, r1
    4188:	bf94      	ite	ls
    418a:	2100      	movls	r1, #0
    418c:	2101      	movhi	r1, #1
    418e:	b909      	cbnz	r1, 4194 <z_check_thread_stack_fail+0x54>
	return 0;
    4190:	2000      	movs	r0, #0
}
    4192:	4770      	bx	lr
		return thread->stack_info.start;
    4194:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    4198:	4770      	bx	lr
    419a:	bf00      	nop
    419c:	20002aec 	.word	0x20002aec

000041a0 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    41a0:	b508      	push	{r3, lr}
    41a2:	460d      	mov	r5, r1
    41a4:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    41a6:	4b08      	ldr	r3, [pc, #32]	; (41c8 <arch_switch_to_main_thread+0x28>)
    41a8:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    41aa:	f000 fca3 	bl	4af4 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    41ae:	4620      	mov	r0, r4
    41b0:	f385 8809 	msr	PSP, r5
    41b4:	2100      	movs	r1, #0
    41b6:	b663      	cpsie	if
    41b8:	f381 8811 	msr	BASEPRI, r1
    41bc:	f3bf 8f6f 	isb	sy
    41c0:	2200      	movs	r2, #0
    41c2:	2300      	movs	r3, #0
    41c4:	f00b fb67 	bl	f896 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    41c8:	20002aec 	.word	0x20002aec

000041cc <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    41cc:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    41ce:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    41d0:	4a0b      	ldr	r2, [pc, #44]	; (4200 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    41d2:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    41d4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    41d6:	bf1e      	ittt	ne
	movne	r1, #0
    41d8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    41da:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    41dc:	f00f fb9d 	blne	1391a <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    41e0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    41e2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    41e6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    41ea:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    41ee:	4905      	ldr	r1, [pc, #20]	; (4204 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    41f0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    41f2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    41f4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    41f6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    41fa:	4903      	ldr	r1, [pc, #12]	; (4208 <_isr_wrapper+0x3c>)
	bx r1
    41fc:	4708      	bx	r1
    41fe:	0000      	.short	0x0000
	ldr r2, =_kernel
    4200:	20002aec 	.word	0x20002aec
	ldr r1, =_sw_isr_table
    4204:	00014198 	.word	0x00014198
	ldr r1, =z_arm_int_exit
    4208:	0000420d 	.word	0x0000420d

0000420c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    420c:	4b04      	ldr	r3, [pc, #16]	; (4220 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    420e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    4210:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    4212:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    4214:	d003      	beq.n	421e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    4216:	4903      	ldr	r1, [pc, #12]	; (4224 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    4218:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    421c:	600a      	str	r2, [r1, #0]

0000421e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    421e:	4770      	bx	lr
	ldr r3, =_kernel
    4220:	20002aec 	.word	0x20002aec
	ldr r1, =_SCS_ICSR
    4224:	e000ed04 	.word	0xe000ed04

00004228 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
    4228:	b508      	push	{r3, lr}
    422a:	4b4e      	ldr	r3, [pc, #312]	; (4364 <usage_fault+0x13c>)
    422c:	4a4e      	ldr	r2, [pc, #312]	; (4368 <usage_fault+0x140>)
    422e:	1a9b      	subs	r3, r3, r2
    4230:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    4232:	f04f 0100 	mov.w	r1, #0
    4236:	2201      	movs	r2, #1
    4238:	f362 0102 	bfi	r1, r2, #0, #3
    423c:	f36f 01c5 	bfc	r1, #3, #3
    4240:	f363 118f 	bfi	r1, r3, #6, #10
    4244:	4849      	ldr	r0, [pc, #292]	; (436c <usage_fault+0x144>)
    4246:	f7fd fc8f 	bl	1b68 <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    424a:	4b49      	ldr	r3, [pc, #292]	; (4370 <usage_fault+0x148>)
    424c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    424e:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    4252:	d121      	bne.n	4298 <usage_fault+0x70>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    4254:	4b46      	ldr	r3, [pc, #280]	; (4370 <usage_fault+0x148>)
    4256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4258:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    425c:	d12d      	bne.n	42ba <usage_fault+0x92>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    425e:	4b44      	ldr	r3, [pc, #272]	; (4370 <usage_fault+0x148>)
    4260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4262:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    4266:	d139      	bne.n	42dc <usage_fault+0xb4>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    4268:	4b41      	ldr	r3, [pc, #260]	; (4370 <usage_fault+0x148>)
    426a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    426c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    4270:	d145      	bne.n	42fe <usage_fault+0xd6>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    4272:	4b3f      	ldr	r3, [pc, #252]	; (4370 <usage_fault+0x148>)
    4274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4276:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    427a:	d151      	bne.n	4320 <usage_fault+0xf8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    427c:	4b3c      	ldr	r3, [pc, #240]	; (4370 <usage_fault+0x148>)
    427e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4280:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    4284:	d15d      	bne.n	4342 <usage_fault+0x11a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    4286:	4a3a      	ldr	r2, [pc, #232]	; (4370 <usage_fault+0x148>)
    4288:	6a93      	ldr	r3, [r2, #40]	; 0x28
    428a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    428e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    4292:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    4294:	2000      	movs	r0, #0
    4296:	bd08      	pop	{r3, pc}
    4298:	4b32      	ldr	r3, [pc, #200]	; (4364 <usage_fault+0x13c>)
    429a:	4a33      	ldr	r2, [pc, #204]	; (4368 <usage_fault+0x140>)
    429c:	1a9b      	subs	r3, r3, r2
    429e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Division by zero");
    42a0:	f04f 0100 	mov.w	r1, #0
    42a4:	2201      	movs	r2, #1
    42a6:	f362 0102 	bfi	r1, r2, #0, #3
    42aa:	f36f 01c5 	bfc	r1, #3, #3
    42ae:	f363 118f 	bfi	r1, r3, #6, #10
    42b2:	4830      	ldr	r0, [pc, #192]	; (4374 <usage_fault+0x14c>)
    42b4:	f7fd fc58 	bl	1b68 <log_0>
    42b8:	e7cc      	b.n	4254 <usage_fault+0x2c>
    42ba:	4b2a      	ldr	r3, [pc, #168]	; (4364 <usage_fault+0x13c>)
    42bc:	4a2a      	ldr	r2, [pc, #168]	; (4368 <usage_fault+0x140>)
    42be:	1a9b      	subs	r3, r3, r2
    42c0:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unaligned memory access");
    42c2:	f04f 0100 	mov.w	r1, #0
    42c6:	2201      	movs	r2, #1
    42c8:	f362 0102 	bfi	r1, r2, #0, #3
    42cc:	f36f 01c5 	bfc	r1, #3, #3
    42d0:	f363 118f 	bfi	r1, r3, #6, #10
    42d4:	4828      	ldr	r0, [pc, #160]	; (4378 <usage_fault+0x150>)
    42d6:	f7fd fc47 	bl	1b68 <log_0>
    42da:	e7c0      	b.n	425e <usage_fault+0x36>
    42dc:	4b21      	ldr	r3, [pc, #132]	; (4364 <usage_fault+0x13c>)
    42de:	4a22      	ldr	r2, [pc, #136]	; (4368 <usage_fault+0x140>)
    42e0:	1a9b      	subs	r3, r3, r2
    42e2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  No coprocessor instructions");
    42e4:	f04f 0100 	mov.w	r1, #0
    42e8:	2201      	movs	r2, #1
    42ea:	f362 0102 	bfi	r1, r2, #0, #3
    42ee:	f36f 01c5 	bfc	r1, #3, #3
    42f2:	f363 118f 	bfi	r1, r3, #6, #10
    42f6:	4821      	ldr	r0, [pc, #132]	; (437c <usage_fault+0x154>)
    42f8:	f7fd fc36 	bl	1b68 <log_0>
    42fc:	e7b4      	b.n	4268 <usage_fault+0x40>
    42fe:	4b19      	ldr	r3, [pc, #100]	; (4364 <usage_fault+0x13c>)
    4300:	4a19      	ldr	r2, [pc, #100]	; (4368 <usage_fault+0x140>)
    4302:	1a9b      	subs	r3, r3, r2
    4304:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    4306:	f04f 0100 	mov.w	r1, #0
    430a:	2201      	movs	r2, #1
    430c:	f362 0102 	bfi	r1, r2, #0, #3
    4310:	f36f 01c5 	bfc	r1, #3, #3
    4314:	f363 118f 	bfi	r1, r3, #6, #10
    4318:	4819      	ldr	r0, [pc, #100]	; (4380 <usage_fault+0x158>)
    431a:	f7fd fc25 	bl	1b68 <log_0>
    431e:	e7a8      	b.n	4272 <usage_fault+0x4a>
    4320:	4b10      	ldr	r3, [pc, #64]	; (4364 <usage_fault+0x13c>)
    4322:	4a11      	ldr	r2, [pc, #68]	; (4368 <usage_fault+0x140>)
    4324:	1a9b      	subs	r3, r3, r2
    4326:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal use of the EPSR");
    4328:	f04f 0100 	mov.w	r1, #0
    432c:	2201      	movs	r2, #1
    432e:	f362 0102 	bfi	r1, r2, #0, #3
    4332:	f36f 01c5 	bfc	r1, #3, #3
    4336:	f363 118f 	bfi	r1, r3, #6, #10
    433a:	4812      	ldr	r0, [pc, #72]	; (4384 <usage_fault+0x15c>)
    433c:	f7fd fc14 	bl	1b68 <log_0>
    4340:	e79c      	b.n	427c <usage_fault+0x54>
    4342:	4b08      	ldr	r3, [pc, #32]	; (4364 <usage_fault+0x13c>)
    4344:	4a08      	ldr	r2, [pc, #32]	; (4368 <usage_fault+0x140>)
    4346:	1a9b      	subs	r3, r3, r2
    4348:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    434a:	f04f 0100 	mov.w	r1, #0
    434e:	2201      	movs	r2, #1
    4350:	f362 0102 	bfi	r1, r2, #0, #3
    4354:	f36f 01c5 	bfc	r1, #3, #3
    4358:	f363 118f 	bfi	r1, r3, #6, #10
    435c:	480a      	ldr	r0, [pc, #40]	; (4388 <usage_fault+0x160>)
    435e:	f7fd fc03 	bl	1b68 <log_0>
    4362:	e790      	b.n	4286 <usage_fault+0x5e>
    4364:	00014348 	.word	0x00014348
    4368:	00014318 	.word	0x00014318
    436c:	00014c58 	.word	0x00014c58
    4370:	e000ed00 	.word	0xe000ed00
    4374:	00014c70 	.word	0x00014c70
    4378:	00014c84 	.word	0x00014c84
    437c:	00014ca0 	.word	0x00014ca0
    4380:	00014cc0 	.word	0x00014cc0
    4384:	00014ce8 	.word	0x00014ce8
    4388:	00014d04 	.word	0x00014d04

0000438c <debug_monitor>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
    438c:	b508      	push	{r3, lr}
	*recoverable = false;
    438e:	2200      	movs	r2, #0
    4390:	700a      	strb	r2, [r1, #0]
    4392:	4b08      	ldr	r3, [pc, #32]	; (43b4 <debug_monitor+0x28>)
    4394:	4908      	ldr	r1, [pc, #32]	; (43b8 <debug_monitor+0x2c>)
    4396:	1a5b      	subs	r3, r3, r1
    4398:	08db      	lsrs	r3, r3, #3

	PR_FAULT_INFO(
    439a:	f04f 0100 	mov.w	r1, #0
    439e:	2001      	movs	r0, #1
    43a0:	f360 0102 	bfi	r1, r0, #0, #3
    43a4:	f362 01c5 	bfi	r1, r2, #3, #3
    43a8:	f363 118f 	bfi	r1, r3, #6, #10
    43ac:	4803      	ldr	r0, [pc, #12]	; (43bc <debug_monitor+0x30>)
    43ae:	f7fd fbdb 	bl	1b68 <log_0>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
    43b2:	bd08      	pop	{r3, pc}
    43b4:	00014348 	.word	0x00014348
    43b8:	00014318 	.word	0x00014318
    43bc:	00014d30 	.word	0x00014d30

000043c0 <bus_fault>:
{
    43c0:	b570      	push	{r4, r5, r6, lr}
    43c2:	4605      	mov	r5, r0
    43c4:	460e      	mov	r6, r1
    43c6:	4614      	mov	r4, r2
    43c8:	4b5e      	ldr	r3, [pc, #376]	; (4544 <bus_fault+0x184>)
    43ca:	4a5f      	ldr	r2, [pc, #380]	; (4548 <bus_fault+0x188>)
    43cc:	1a9b      	subs	r3, r3, r2
    43ce:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    43d0:	f04f 0100 	mov.w	r1, #0
    43d4:	2201      	movs	r2, #1
    43d6:	f362 0102 	bfi	r1, r2, #0, #3
    43da:	f36f 01c5 	bfc	r1, #3, #3
    43de:	f363 118f 	bfi	r1, r3, #6, #10
    43e2:	485a      	ldr	r0, [pc, #360]	; (454c <bus_fault+0x18c>)
    43e4:	f7fd fbc0 	bl	1b68 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    43e8:	4b59      	ldr	r3, [pc, #356]	; (4550 <bus_fault+0x190>)
    43ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    43ec:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    43f0:	d124      	bne.n	443c <bus_fault+0x7c>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    43f2:	4b57      	ldr	r3, [pc, #348]	; (4550 <bus_fault+0x190>)
    43f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    43f6:	f413 6f00 	tst.w	r3, #2048	; 0x800
    43fa:	d130      	bne.n	445e <bus_fault+0x9e>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    43fc:	4b54      	ldr	r3, [pc, #336]	; (4550 <bus_fault+0x190>)
    43fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4400:	f413 7f00 	tst.w	r3, #512	; 0x200
    4404:	d13c      	bne.n	4480 <bus_fault+0xc0>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    4406:	4b52      	ldr	r3, [pc, #328]	; (4550 <bus_fault+0x190>)
    4408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    440a:	f413 6f80 	tst.w	r3, #1024	; 0x400
    440e:	d165      	bne.n	44dc <bus_fault+0x11c>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    4410:	4b4f      	ldr	r3, [pc, #316]	; (4550 <bus_fault+0x190>)
    4412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4414:	f413 7f80 	tst.w	r3, #256	; 0x100
    4418:	d171      	bne.n	44fe <bus_fault+0x13e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    441a:	4b4d      	ldr	r3, [pc, #308]	; (4550 <bus_fault+0x190>)
    441c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    441e:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    4422:	d17d      	bne.n	4520 <bus_fault+0x160>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    4424:	4a4a      	ldr	r2, [pc, #296]	; (4550 <bus_fault+0x190>)
    4426:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4428:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    442c:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    442e:	2101      	movs	r1, #1
    4430:	4628      	mov	r0, r5
    4432:	f00c fdfe 	bl	11032 <memory_fault_recoverable>
    4436:	7020      	strb	r0, [r4, #0]
}
    4438:	2000      	movs	r0, #0
    443a:	bd70      	pop	{r4, r5, r6, pc}
    443c:	4b41      	ldr	r3, [pc, #260]	; (4544 <bus_fault+0x184>)
    443e:	4a42      	ldr	r2, [pc, #264]	; (4548 <bus_fault+0x188>)
    4440:	1a9b      	subs	r3, r3, r2
    4442:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error");
    4444:	f04f 0100 	mov.w	r1, #0
    4448:	2201      	movs	r2, #1
    444a:	f362 0102 	bfi	r1, r2, #0, #3
    444e:	f36f 01c5 	bfc	r1, #3, #3
    4452:	f363 118f 	bfi	r1, r3, #6, #10
    4456:	483f      	ldr	r0, [pc, #252]	; (4554 <bus_fault+0x194>)
    4458:	f7fd fb86 	bl	1b68 <log_0>
    445c:	e7c9      	b.n	43f2 <bus_fault+0x32>
    445e:	4b39      	ldr	r3, [pc, #228]	; (4544 <bus_fault+0x184>)
    4460:	4a39      	ldr	r2, [pc, #228]	; (4548 <bus_fault+0x188>)
    4462:	1a9b      	subs	r3, r3, r2
    4464:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
    4466:	f04f 0100 	mov.w	r1, #0
    446a:	2201      	movs	r2, #1
    446c:	f362 0102 	bfi	r1, r2, #0, #3
    4470:	f36f 01c5 	bfc	r1, #3, #3
    4474:	f363 118f 	bfi	r1, r3, #6, #10
    4478:	4837      	ldr	r0, [pc, #220]	; (4558 <bus_fault+0x198>)
    447a:	f7fd fb75 	bl	1b68 <log_0>
    447e:	e7bd      	b.n	43fc <bus_fault+0x3c>
    4480:	4b30      	ldr	r3, [pc, #192]	; (4544 <bus_fault+0x184>)
    4482:	4a31      	ldr	r2, [pc, #196]	; (4548 <bus_fault+0x188>)
    4484:	1a9b      	subs	r3, r3, r2
    4486:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Precise data bus error");
    4488:	f04f 0100 	mov.w	r1, #0
    448c:	2201      	movs	r2, #1
    448e:	f362 0102 	bfi	r1, r2, #0, #3
    4492:	f36f 01c5 	bfc	r1, #3, #3
    4496:	f363 118f 	bfi	r1, r3, #6, #10
    449a:	4830      	ldr	r0, [pc, #192]	; (455c <bus_fault+0x19c>)
    449c:	f7fd fb64 	bl	1b68 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    44a0:	4b2b      	ldr	r3, [pc, #172]	; (4550 <bus_fault+0x190>)
    44a2:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    44a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    44a6:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    44aa:	d0ac      	beq.n	4406 <bus_fault+0x46>
    44ac:	4b25      	ldr	r3, [pc, #148]	; (4544 <bus_fault+0x184>)
    44ae:	4a26      	ldr	r2, [pc, #152]	; (4548 <bus_fault+0x188>)
    44b0:	1a9b      	subs	r3, r3, r2
    44b2:	08db      	lsrs	r3, r3, #3
			PR_EXC("  BFAR Address: 0x%x", bfar);
    44b4:	f04f 0200 	mov.w	r2, #0
    44b8:	2001      	movs	r0, #1
    44ba:	f360 0202 	bfi	r2, r0, #0, #3
    44be:	f36f 02c5 	bfc	r2, #3, #3
    44c2:	f363 128f 	bfi	r2, r3, #6, #10
    44c6:	4826      	ldr	r0, [pc, #152]	; (4560 <bus_fault+0x1a0>)
    44c8:	f7fd faba 	bl	1a40 <log_1>
			if (from_hard_fault != 0) {
    44cc:	2e00      	cmp	r6, #0
    44ce:	d09a      	beq.n	4406 <bus_fault+0x46>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    44d0:	4a1f      	ldr	r2, [pc, #124]	; (4550 <bus_fault+0x190>)
    44d2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    44d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    44d8:	6293      	str	r3, [r2, #40]	; 0x28
    44da:	e794      	b.n	4406 <bus_fault+0x46>
    44dc:	4b19      	ldr	r3, [pc, #100]	; (4544 <bus_fault+0x184>)
    44de:	4a1a      	ldr	r2, [pc, #104]	; (4548 <bus_fault+0x188>)
    44e0:	1a9b      	subs	r3, r3, r2
    44e2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Imprecise data bus error");
    44e4:	f04f 0100 	mov.w	r1, #0
    44e8:	2201      	movs	r2, #1
    44ea:	f362 0102 	bfi	r1, r2, #0, #3
    44ee:	f36f 01c5 	bfc	r1, #3, #3
    44f2:	f363 118f 	bfi	r1, r3, #6, #10
    44f6:	481b      	ldr	r0, [pc, #108]	; (4564 <bus_fault+0x1a4>)
    44f8:	f7fd fb36 	bl	1b68 <log_0>
    44fc:	e788      	b.n	4410 <bus_fault+0x50>
    44fe:	4b11      	ldr	r3, [pc, #68]	; (4544 <bus_fault+0x184>)
    4500:	4a11      	ldr	r2, [pc, #68]	; (4548 <bus_fault+0x188>)
    4502:	1a9b      	subs	r3, r3, r2
    4504:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction bus error");
    4506:	f04f 0100 	mov.w	r1, #0
    450a:	2201      	movs	r2, #1
    450c:	f362 0102 	bfi	r1, r2, #0, #3
    4510:	f36f 01c5 	bfc	r1, #3, #3
    4514:	f363 118f 	bfi	r1, r3, #6, #10
    4518:	4813      	ldr	r0, [pc, #76]	; (4568 <bus_fault+0x1a8>)
    451a:	f7fd fb25 	bl	1b68 <log_0>
    451e:	e781      	b.n	4424 <bus_fault+0x64>
    4520:	4b08      	ldr	r3, [pc, #32]	; (4544 <bus_fault+0x184>)
    4522:	4a09      	ldr	r2, [pc, #36]	; (4548 <bus_fault+0x188>)
    4524:	1a9b      	subs	r3, r3, r2
    4526:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    4528:	f04f 0100 	mov.w	r1, #0
    452c:	2201      	movs	r2, #1
    452e:	f362 0102 	bfi	r1, r2, #0, #3
    4532:	f36f 01c5 	bfc	r1, #3, #3
    4536:	f363 118f 	bfi	r1, r3, #6, #10
    453a:	480c      	ldr	r0, [pc, #48]	; (456c <bus_fault+0x1ac>)
    453c:	f7fd fb14 	bl	1b68 <log_0>
    4540:	e770      	b.n	4424 <bus_fault+0x64>
    4542:	bf00      	nop
    4544:	00014348 	.word	0x00014348
    4548:	00014318 	.word	0x00014318
    454c:	00014d54 	.word	0x00014d54
    4550:	e000ed00 	.word	0xe000ed00
    4554:	00014d6c 	.word	0x00014d6c
    4558:	00014d80 	.word	0x00014d80
    455c:	00014d94 	.word	0x00014d94
    4560:	00014db0 	.word	0x00014db0
    4564:	00014dc8 	.word	0x00014dc8
    4568:	00014de4 	.word	0x00014de4
    456c:	00014dfc 	.word	0x00014dfc

00004570 <mem_manage_fault>:
{
    4570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4572:	4605      	mov	r5, r0
    4574:	460c      	mov	r4, r1
    4576:	4616      	mov	r6, r2
    4578:	4b64      	ldr	r3, [pc, #400]	; (470c <mem_manage_fault+0x19c>)
    457a:	4a65      	ldr	r2, [pc, #404]	; (4710 <mem_manage_fault+0x1a0>)
    457c:	1a9b      	subs	r3, r3, r2
    457e:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    4580:	f04f 0100 	mov.w	r1, #0
    4584:	2201      	movs	r2, #1
    4586:	f362 0102 	bfi	r1, r2, #0, #3
    458a:	f36f 01c5 	bfc	r1, #3, #3
    458e:	f363 118f 	bfi	r1, r3, #6, #10
    4592:	4860      	ldr	r0, [pc, #384]	; (4714 <mem_manage_fault+0x1a4>)
    4594:	f7fd fae8 	bl	1b68 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    4598:	4b5f      	ldr	r3, [pc, #380]	; (4718 <mem_manage_fault+0x1a8>)
    459a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    459c:	f013 0f10 	tst.w	r3, #16
    45a0:	d132      	bne.n	4608 <mem_manage_fault+0x98>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    45a2:	4b5d      	ldr	r3, [pc, #372]	; (4718 <mem_manage_fault+0x1a8>)
    45a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    45a6:	f013 0f08 	tst.w	r3, #8
    45aa:	d13e      	bne.n	462a <mem_manage_fault+0xba>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    45ac:	4b5a      	ldr	r3, [pc, #360]	; (4718 <mem_manage_fault+0x1a8>)
    45ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    45b0:	f013 0f02 	tst.w	r3, #2
    45b4:	d14a      	bne.n	464c <mem_manage_fault+0xdc>
	uint32_t mmfar = -EINVAL;
    45b6:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    45ba:	4b57      	ldr	r3, [pc, #348]	; (4718 <mem_manage_fault+0x1a8>)
    45bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    45be:	f013 0f01 	tst.w	r3, #1
    45c2:	d175      	bne.n	46b0 <mem_manage_fault+0x140>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    45c4:	4b54      	ldr	r3, [pc, #336]	; (4718 <mem_manage_fault+0x1a8>)
    45c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    45c8:	f013 0f20 	tst.w	r3, #32
    45cc:	f040 8081 	bne.w	46d2 <mem_manage_fault+0x162>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    45d0:	4b51      	ldr	r3, [pc, #324]	; (4718 <mem_manage_fault+0x1a8>)
    45d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    45d4:	f013 0f10 	tst.w	r3, #16
    45d8:	d104      	bne.n	45e4 <mem_manage_fault+0x74>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    45da:	4b4f      	ldr	r3, [pc, #316]	; (4718 <mem_manage_fault+0x1a8>)
    45dc:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    45de:	f014 0402 	ands.w	r4, r4, #2
    45e2:	d005      	beq.n	45f0 <mem_manage_fault+0x80>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    45e4:	4b4c      	ldr	r3, [pc, #304]	; (4718 <mem_manage_fault+0x1a8>)
    45e6:	685c      	ldr	r4, [r3, #4]
    45e8:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    45ec:	f040 8082 	bne.w	46f4 <mem_manage_fault+0x184>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    45f0:	4a49      	ldr	r2, [pc, #292]	; (4718 <mem_manage_fault+0x1a8>)
    45f2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    45f4:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    45f8:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    45fa:	2101      	movs	r1, #1
    45fc:	4628      	mov	r0, r5
    45fe:	f00c fd18 	bl	11032 <memory_fault_recoverable>
    4602:	7030      	strb	r0, [r6, #0]
}
    4604:	4620      	mov	r0, r4
    4606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4608:	4b40      	ldr	r3, [pc, #256]	; (470c <mem_manage_fault+0x19c>)
    460a:	4a41      	ldr	r2, [pc, #260]	; (4710 <mem_manage_fault+0x1a0>)
    460c:	1a9b      	subs	r3, r3, r2
    460e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error (context area might be"
    4610:	f04f 0100 	mov.w	r1, #0
    4614:	2201      	movs	r2, #1
    4616:	f362 0102 	bfi	r1, r2, #0, #3
    461a:	f36f 01c5 	bfc	r1, #3, #3
    461e:	f363 118f 	bfi	r1, r3, #6, #10
    4622:	483e      	ldr	r0, [pc, #248]	; (471c <mem_manage_fault+0x1ac>)
    4624:	f7fd faa0 	bl	1b68 <log_0>
    4628:	e7bb      	b.n	45a2 <mem_manage_fault+0x32>
    462a:	4b38      	ldr	r3, [pc, #224]	; (470c <mem_manage_fault+0x19c>)
    462c:	4a38      	ldr	r2, [pc, #224]	; (4710 <mem_manage_fault+0x1a0>)
    462e:	1a9b      	subs	r3, r3, r2
    4630:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
    4632:	f04f 0100 	mov.w	r1, #0
    4636:	2201      	movs	r2, #1
    4638:	f362 0102 	bfi	r1, r2, #0, #3
    463c:	f36f 01c5 	bfc	r1, #3, #3
    4640:	f363 118f 	bfi	r1, r3, #6, #10
    4644:	4836      	ldr	r0, [pc, #216]	; (4720 <mem_manage_fault+0x1b0>)
    4646:	f7fd fa8f 	bl	1b68 <log_0>
    464a:	e7af      	b.n	45ac <mem_manage_fault+0x3c>
    464c:	4b2f      	ldr	r3, [pc, #188]	; (470c <mem_manage_fault+0x19c>)
    464e:	4a30      	ldr	r2, [pc, #192]	; (4710 <mem_manage_fault+0x1a0>)
    4650:	1a9b      	subs	r3, r3, r2
    4652:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Data Access Violation");
    4654:	f04f 0100 	mov.w	r1, #0
    4658:	2201      	movs	r2, #1
    465a:	f362 0102 	bfi	r1, r2, #0, #3
    465e:	f36f 01c5 	bfc	r1, #3, #3
    4662:	f363 118f 	bfi	r1, r3, #6, #10
    4666:	482f      	ldr	r0, [pc, #188]	; (4724 <mem_manage_fault+0x1b4>)
    4668:	f7fd fa7e 	bl	1b68 <log_0>
		uint32_t temp = SCB->MMFAR;
    466c:	4b2a      	ldr	r3, [pc, #168]	; (4718 <mem_manage_fault+0x1a8>)
    466e:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    4670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4672:	f013 0f80 	tst.w	r3, #128	; 0x80
    4676:	d102      	bne.n	467e <mem_manage_fault+0x10e>
	uint32_t mmfar = -EINVAL;
    4678:	f06f 0715 	mvn.w	r7, #21
    467c:	e79d      	b.n	45ba <mem_manage_fault+0x4a>
    467e:	4b23      	ldr	r3, [pc, #140]	; (470c <mem_manage_fault+0x19c>)
    4680:	4a23      	ldr	r2, [pc, #140]	; (4710 <mem_manage_fault+0x1a0>)
    4682:	1a9b      	subs	r3, r3, r2
    4684:	08db      	lsrs	r3, r3, #3
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    4686:	f04f 0200 	mov.w	r2, #0
    468a:	2101      	movs	r1, #1
    468c:	f361 0202 	bfi	r2, r1, #0, #3
    4690:	f36f 02c5 	bfc	r2, #3, #3
    4694:	f363 128f 	bfi	r2, r3, #6, #10
    4698:	4639      	mov	r1, r7
    469a:	4823      	ldr	r0, [pc, #140]	; (4728 <mem_manage_fault+0x1b8>)
    469c:	f7fd f9d0 	bl	1a40 <log_1>
			if (from_hard_fault != 0) {
    46a0:	2c00      	cmp	r4, #0
    46a2:	d08a      	beq.n	45ba <mem_manage_fault+0x4a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    46a4:	4a1c      	ldr	r2, [pc, #112]	; (4718 <mem_manage_fault+0x1a8>)
    46a6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    46a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    46ac:	6293      	str	r3, [r2, #40]	; 0x28
    46ae:	e784      	b.n	45ba <mem_manage_fault+0x4a>
    46b0:	4b16      	ldr	r3, [pc, #88]	; (470c <mem_manage_fault+0x19c>)
    46b2:	4a17      	ldr	r2, [pc, #92]	; (4710 <mem_manage_fault+0x1a0>)
    46b4:	1a9b      	subs	r3, r3, r2
    46b6:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction Access Violation");
    46b8:	f04f 0100 	mov.w	r1, #0
    46bc:	2201      	movs	r2, #1
    46be:	f362 0102 	bfi	r1, r2, #0, #3
    46c2:	f36f 01c5 	bfc	r1, #3, #3
    46c6:	f363 118f 	bfi	r1, r3, #6, #10
    46ca:	4818      	ldr	r0, [pc, #96]	; (472c <mem_manage_fault+0x1bc>)
    46cc:	f7fd fa4c 	bl	1b68 <log_0>
    46d0:	e778      	b.n	45c4 <mem_manage_fault+0x54>
    46d2:	4b0e      	ldr	r3, [pc, #56]	; (470c <mem_manage_fault+0x19c>)
    46d4:	4a0e      	ldr	r2, [pc, #56]	; (4710 <mem_manage_fault+0x1a0>)
    46d6:	1a9b      	subs	r3, r3, r2
    46d8:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO(
    46da:	f04f 0100 	mov.w	r1, #0
    46de:	2201      	movs	r2, #1
    46e0:	f362 0102 	bfi	r1, r2, #0, #3
    46e4:	f36f 01c5 	bfc	r1, #3, #3
    46e8:	f363 118f 	bfi	r1, r3, #6, #10
    46ec:	4810      	ldr	r0, [pc, #64]	; (4730 <mem_manage_fault+0x1c0>)
    46ee:	f7fd fa3b 	bl	1b68 <log_0>
    46f2:	e76d      	b.n	45d0 <mem_manage_fault+0x60>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    46f4:	4629      	mov	r1, r5
    46f6:	4638      	mov	r0, r7
    46f8:	f7ff fd22 	bl	4140 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    46fc:	4604      	mov	r4, r0
    46fe:	2800      	cmp	r0, #0
    4700:	f43f af76 	beq.w	45f0 <mem_manage_fault+0x80>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    4704:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    4708:	2402      	movs	r4, #2
    470a:	e771      	b.n	45f0 <mem_manage_fault+0x80>
    470c:	00014348 	.word	0x00014348
    4710:	00014318 	.word	0x00014318
    4714:	00014e2c 	.word	0x00014e2c
    4718:	e000ed00 	.word	0xe000ed00
    471c:	00014e44 	.word	0x00014e44
    4720:	00014d80 	.word	0x00014d80
    4724:	00014e78 	.word	0x00014e78
    4728:	00014e90 	.word	0x00014e90
    472c:	00014ea8 	.word	0x00014ea8
    4730:	00014dfc 	.word	0x00014dfc

00004734 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    4734:	b570      	push	{r4, r5, r6, lr}
    4736:	4605      	mov	r5, r0
    4738:	460c      	mov	r4, r1
    473a:	4b47      	ldr	r3, [pc, #284]	; (4858 <hard_fault+0x124>)
    473c:	4a47      	ldr	r2, [pc, #284]	; (485c <hard_fault+0x128>)
    473e:	1a9b      	subs	r3, r3, r2
    4740:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** HARD FAULT *****");
    4742:	f04f 0100 	mov.w	r1, #0
    4746:	2201      	movs	r2, #1
    4748:	f362 0102 	bfi	r1, r2, #0, #3
    474c:	f36f 01c5 	bfc	r1, #3, #3
    4750:	f363 118f 	bfi	r1, r3, #6, #10
    4754:	4842      	ldr	r0, [pc, #264]	; (4860 <hard_fault+0x12c>)
    4756:	f7fd fa07 	bl	1b68 <log_0>
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    475a:	2300      	movs	r3, #0
    475c:	7023      	strb	r3, [r4, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    475e:	4b41      	ldr	r3, [pc, #260]	; (4864 <hard_fault+0x130>)
    4760:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    4762:	f016 0602 	ands.w	r6, r6, #2
    4766:	d109      	bne.n	477c <hard_fault+0x48>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    4768:	4b3e      	ldr	r3, [pc, #248]	; (4864 <hard_fault+0x130>)
    476a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    476c:	2b00      	cmp	r3, #0
    476e:	db17      	blt.n	47a0 <hard_fault+0x6c>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    4770:	4b3c      	ldr	r3, [pc, #240]	; (4864 <hard_fault+0x130>)
    4772:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    4774:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    4778:	d124      	bne.n	47c4 <hard_fault+0x90>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    477a:	bd70      	pop	{r4, r5, r6, pc}
    477c:	4b36      	ldr	r3, [pc, #216]	; (4858 <hard_fault+0x124>)
    477e:	4a37      	ldr	r2, [pc, #220]	; (485c <hard_fault+0x128>)
    4780:	1a9b      	subs	r3, r3, r2
    4782:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Bus fault on vector table read");
    4784:	f04f 0100 	mov.w	r1, #0
    4788:	2201      	movs	r2, #1
    478a:	f362 0102 	bfi	r1, r2, #0, #3
    478e:	f36f 01c5 	bfc	r1, #3, #3
    4792:	f363 118f 	bfi	r1, r3, #6, #10
    4796:	4834      	ldr	r0, [pc, #208]	; (4868 <hard_fault+0x134>)
    4798:	f7fd f9e6 	bl	1b68 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    479c:	2000      	movs	r0, #0
    479e:	e7ec      	b.n	477a <hard_fault+0x46>
    47a0:	4b2d      	ldr	r3, [pc, #180]	; (4858 <hard_fault+0x124>)
    47a2:	4a2e      	ldr	r2, [pc, #184]	; (485c <hard_fault+0x128>)
    47a4:	1a9b      	subs	r3, r3, r2
    47a6:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Debug event");
    47a8:	f04f 0100 	mov.w	r1, #0
    47ac:	2201      	movs	r2, #1
    47ae:	f362 0102 	bfi	r1, r2, #0, #3
    47b2:	f36f 01c5 	bfc	r1, #3, #3
    47b6:	f363 118f 	bfi	r1, r3, #6, #10
    47ba:	482c      	ldr	r0, [pc, #176]	; (486c <hard_fault+0x138>)
    47bc:	f7fd f9d4 	bl	1b68 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    47c0:	4630      	mov	r0, r6
    47c2:	e7da      	b.n	477a <hard_fault+0x46>
    47c4:	4b24      	ldr	r3, [pc, #144]	; (4858 <hard_fault+0x124>)
    47c6:	4a25      	ldr	r2, [pc, #148]	; (485c <hard_fault+0x128>)
    47c8:	1a9b      	subs	r3, r3, r2
    47ca:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Fault escalation (see below)");
    47cc:	f04f 0100 	mov.w	r1, #0
    47d0:	2201      	movs	r2, #1
    47d2:	f362 0102 	bfi	r1, r2, #0, #3
    47d6:	f36f 01c5 	bfc	r1, #3, #3
    47da:	f363 118f 	bfi	r1, r3, #6, #10
    47de:	4824      	ldr	r0, [pc, #144]	; (4870 <hard_fault+0x13c>)
    47e0:	f7fd f9c2 	bl	1b68 <log_0>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    47e4:	69ab      	ldr	r3, [r5, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    47e6:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    47ea:	f64d 7302 	movw	r3, #57090	; 0xdf02
    47ee:	429a      	cmp	r2, r3
    47f0:	d00e      	beq.n	4810 <hard_fault+0xdc>
		} else if (SCB_MMFSR != 0) {
    47f2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    47f6:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    47fa:	781b      	ldrb	r3, [r3, #0]
    47fc:	b9db      	cbnz	r3, 4836 <hard_fault+0x102>
		} else if (SCB_BFSR != 0) {
    47fe:	4b1d      	ldr	r3, [pc, #116]	; (4874 <hard_fault+0x140>)
    4800:	781b      	ldrb	r3, [r3, #0]
    4802:	b9f3      	cbnz	r3, 4842 <hard_fault+0x10e>
		} else if (SCB_UFSR != 0) {
    4804:	4b1c      	ldr	r3, [pc, #112]	; (4878 <hard_fault+0x144>)
    4806:	881b      	ldrh	r3, [r3, #0]
    4808:	b29b      	uxth	r3, r3
    480a:	bb03      	cbnz	r3, 484e <hard_fault+0x11a>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    480c:	4630      	mov	r0, r6
	return reason;
    480e:	e7b4      	b.n	477a <hard_fault+0x46>
    4810:	4b11      	ldr	r3, [pc, #68]	; (4858 <hard_fault+0x124>)
    4812:	4a12      	ldr	r2, [pc, #72]	; (485c <hard_fault+0x128>)
    4814:	1a9b      	subs	r3, r3, r2
    4816:	08db      	lsrs	r3, r3, #3
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    4818:	f04f 0200 	mov.w	r2, #0
    481c:	2101      	movs	r1, #1
    481e:	f361 0202 	bfi	r2, r1, #0, #3
    4822:	f36f 02c5 	bfc	r2, #3, #3
    4826:	f363 128f 	bfi	r2, r3, #6, #10
    482a:	6829      	ldr	r1, [r5, #0]
    482c:	4813      	ldr	r0, [pc, #76]	; (487c <hard_fault+0x148>)
    482e:	f7fd f907 	bl	1a40 <log_1>
			reason = esf->basic.r0;
    4832:	6828      	ldr	r0, [r5, #0]
    4834:	e7a1      	b.n	477a <hard_fault+0x46>
			reason = mem_manage_fault(esf, 1, recoverable);
    4836:	4622      	mov	r2, r4
    4838:	2101      	movs	r1, #1
    483a:	4628      	mov	r0, r5
    483c:	f7ff fe98 	bl	4570 <mem_manage_fault>
    4840:	e79b      	b.n	477a <hard_fault+0x46>
			reason = bus_fault(esf, 1, recoverable);
    4842:	4622      	mov	r2, r4
    4844:	2101      	movs	r1, #1
    4846:	4628      	mov	r0, r5
    4848:	f7ff fdba 	bl	43c0 <bus_fault>
    484c:	e795      	b.n	477a <hard_fault+0x46>
			reason = usage_fault(esf);
    484e:	4628      	mov	r0, r5
    4850:	f7ff fcea 	bl	4228 <usage_fault>
    4854:	e791      	b.n	477a <hard_fault+0x46>
    4856:	bf00      	nop
    4858:	00014348 	.word	0x00014348
    485c:	00014318 	.word	0x00014318
    4860:	00014ec8 	.word	0x00014ec8
    4864:	e000ed00 	.word	0xe000ed00
    4868:	00014ee0 	.word	0x00014ee0
    486c:	00014f04 	.word	0x00014f04
    4870:	00014f14 	.word	0x00014f14
    4874:	e000ed29 	.word	0xe000ed29
    4878:	e000ed2a 	.word	0xe000ed2a
    487c:	00014f34 	.word	0x00014f34

00004880 <reserved_exception>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
    4880:	b508      	push	{r3, lr}
    4882:	460a      	mov	r2, r1
    4884:	480b      	ldr	r0, [pc, #44]	; (48b4 <reserved_exception+0x34>)
    4886:	4b0c      	ldr	r3, [pc, #48]	; (48b8 <reserved_exception+0x38>)
    4888:	1ac0      	subs	r0, r0, r3
    488a:	08c0      	lsrs	r0, r0, #3
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
    488c:	f04f 0300 	mov.w	r3, #0
    4890:	2101      	movs	r1, #1
    4892:	f361 0302 	bfi	r3, r1, #0, #3
    4896:	f36f 03c5 	bfc	r3, #3, #3
    489a:	f360 138f 	bfi	r3, r0, #6, #10
    489e:	2a0f      	cmp	r2, #15
    48a0:	dc05      	bgt.n	48ae <reserved_exception+0x2e>
    48a2:	4906      	ldr	r1, [pc, #24]	; (48bc <reserved_exception+0x3c>)
    48a4:	3a10      	subs	r2, #16
    48a6:	4806      	ldr	r0, [pc, #24]	; (48c0 <reserved_exception+0x40>)
    48a8:	f7fd f900 	bl	1aac <log_2>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
    48ac:	bd08      	pop	{r3, pc}
	PR_FAULT_INFO("***** %s %d) *****",
    48ae:	4905      	ldr	r1, [pc, #20]	; (48c4 <reserved_exception+0x44>)
    48b0:	e7f8      	b.n	48a4 <reserved_exception+0x24>
    48b2:	bf00      	nop
    48b4:	00014348 	.word	0x00014348
    48b8:	00014318 	.word	0x00014318
    48bc:	00014f50 	.word	0x00014f50
    48c0:	00014f84 	.word	0x00014f84
    48c4:	00014f68 	.word	0x00014f68

000048c8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    48c8:	b570      	push	{r4, r5, r6, lr}
    48ca:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    48cc:	4b2b      	ldr	r3, [pc, #172]	; (497c <z_arm_fault+0xb4>)
    48ce:	685d      	ldr	r5, [r3, #4]
    48d0:	f3c5 0508 	ubfx	r5, r5, #0, #9
    48d4:	2300      	movs	r3, #0
    48d6:	f383 8811 	msr	BASEPRI, r3
    48da:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    48de:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    48e2:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    48e6:	d12a      	bne.n	493e <z_arm_fault+0x76>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    48e8:	f002 030c 	and.w	r3, r2, #12
    48ec:	2b08      	cmp	r3, #8
    48ee:	d010      	beq.n	4912 <z_arm_fault+0x4a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    48f0:	f012 0f08 	tst.w	r2, #8
    48f4:	d020      	beq.n	4938 <z_arm_fault+0x70>
			ptr_esf =  (z_arch_esf_t *)psp;
    48f6:	460c      	mov	r4, r1
	*nested_exc = false;
    48f8:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    48fa:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    48fe:	4629      	mov	r1, r5
    4900:	4620      	mov	r0, r4
    4902:	f00c fb98 	bl	11036 <fault_handle>
    4906:	4605      	mov	r5, r0
	if (recoverable) {
    4908:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    490c:	b1d3      	cbz	r3, 4944 <z_arm_fault+0x7c>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    490e:	b00a      	add	sp, #40	; 0x28
    4910:	bd70      	pop	{r4, r5, r6, pc}
    4912:	4b1b      	ldr	r3, [pc, #108]	; (4980 <z_arm_fault+0xb8>)
    4914:	4a1b      	ldr	r2, [pc, #108]	; (4984 <z_arm_fault+0xbc>)
    4916:	1a9b      	subs	r3, r3, r2
    4918:	08db      	lsrs	r3, r3, #3
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    491a:	f04f 0100 	mov.w	r1, #0
    491e:	2201      	movs	r2, #1
    4920:	f362 0102 	bfi	r1, r2, #0, #3
    4924:	f36f 01c5 	bfc	r1, #3, #3
    4928:	f363 118f 	bfi	r1, r3, #6, #10
    492c:	4816      	ldr	r0, [pc, #88]	; (4988 <z_arm_fault+0xc0>)
    492e:	f7fd f91b 	bl	1b68 <log_0>
	*nested_exc = false;
    4932:	2600      	movs	r6, #0
		return NULL;
    4934:	4634      	mov	r4, r6
    4936:	e7e0      	b.n	48fa <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    4938:	4604      	mov	r4, r0
			*nested_exc = true;
    493a:	2601      	movs	r6, #1
    493c:	e7dd      	b.n	48fa <z_arm_fault+0x32>
	*nested_exc = false;
    493e:	2600      	movs	r6, #0
		return NULL;
    4940:	4634      	mov	r4, r6
    4942:	e7da      	b.n	48fa <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    4944:	2220      	movs	r2, #32
    4946:	4621      	mov	r1, r4
    4948:	a801      	add	r0, sp, #4
    494a:	f00c fc4f 	bl	111ec <memcpy>
	if (nested_exc) {
    494e:	b14e      	cbz	r6, 4964 <z_arm_fault+0x9c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    4950:	9b08      	ldr	r3, [sp, #32]
    4952:	f3c3 0208 	ubfx	r2, r3, #0, #9
    4956:	b95a      	cbnz	r2, 4970 <z_arm_fault+0xa8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    4958:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    495c:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    4960:	9308      	str	r3, [sp, #32]
    4962:	e005      	b.n	4970 <z_arm_fault+0xa8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4964:	9b08      	ldr	r3, [sp, #32]
    4966:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    496a:	f023 0301 	bic.w	r3, r3, #1
    496e:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    4970:	a901      	add	r1, sp, #4
    4972:	4628      	mov	r0, r5
    4974:	f00c fb3f 	bl	10ff6 <z_arm_fatal_error>
    4978:	e7c9      	b.n	490e <z_arm_fault+0x46>
    497a:	bf00      	nop
    497c:	e000ed00 	.word	0xe000ed00
    4980:	00014348 	.word	0x00014348
    4984:	00014318 	.word	0x00014318
    4988:	00014f98 	.word	0x00014f98

0000498c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    498c:	4a02      	ldr	r2, [pc, #8]	; (4998 <z_arm_fault_init+0xc>)
    498e:	6953      	ldr	r3, [r2, #20]
    4990:	f043 0310 	orr.w	r3, r3, #16
    4994:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    4996:	4770      	bx	lr
    4998:	e000ed00 	.word	0xe000ed00

0000499c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    499c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    49a0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    49a4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    49a6:	4672      	mov	r2, lr
	bl z_arm_fault
    49a8:	f7ff ff8e 	bl	48c8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    49ac:	bd01      	pop	{r0, pc}
    49ae:	bf00      	nop

000049b0 <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    49b0:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    49b2:	e006      	b.n	49c2 <z_arm_interrupt_init+0x12>
    49b4:	f002 010f 	and.w	r1, r2, #15
    49b8:	4b09      	ldr	r3, [pc, #36]	; (49e0 <z_arm_interrupt_init+0x30>)
    49ba:	440b      	add	r3, r1
    49bc:	2120      	movs	r1, #32
    49be:	7619      	strb	r1, [r3, #24]
    49c0:	3201      	adds	r2, #1
    49c2:	2a2f      	cmp	r2, #47	; 0x2f
    49c4:	dc0a      	bgt.n	49dc <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    49c6:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    49c8:	2b00      	cmp	r3, #0
    49ca:	dbf3      	blt.n	49b4 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    49cc:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    49d0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    49d4:	2120      	movs	r1, #32
    49d6:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    49da:	e7f1      	b.n	49c0 <z_arm_interrupt_init+0x10>
	}
}
    49dc:	4770      	bx	lr
    49de:	bf00      	nop
    49e0:	e000ecfc 	.word	0xe000ecfc

000049e4 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    49e4:	2000      	movs	r0, #0
    msr CONTROL, r0
    49e6:	f380 8814 	msr	CONTROL, r0
    isb
    49ea:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    49ee:	f00f fb25 	bl	1403c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    49f2:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    49f4:	490d      	ldr	r1, [pc, #52]	; (4a2c <__start+0x48>)
    str r0, [r1]
    49f6:	6008      	str	r0, [r1, #0]
    dsb
    49f8:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    49fc:	480c      	ldr	r0, [pc, #48]	; (4a30 <__start+0x4c>)
    msr msp, r0
    49fe:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    4a02:	f000 f829 	bl	4a58 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4a06:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4a08:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    4a0c:	4809      	ldr	r0, [pc, #36]	; (4a34 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    4a0e:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    4a12:	1840      	adds	r0, r0, r1
    msr PSP, r0
    4a14:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    4a18:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    4a1c:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    4a1e:	4308      	orrs	r0, r1
    msr CONTROL, r0
    4a20:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    4a24:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    4a28:	f7ff faf6 	bl	4018 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    4a2c:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4a30:	20004080 	.word	0x20004080
    ldr r0, =z_interrupt_stacks
    4a34:	20004200 	.word	0x20004200

00004a38 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    4a38:	4b06      	ldr	r3, [pc, #24]	; (4a54 <z_arm_clear_arm_mpu_config+0x1c>)
    4a3a:	6818      	ldr	r0, [r3, #0]
	int num_regions =
    4a3c:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    4a40:	2300      	movs	r3, #0
    4a42:	4283      	cmp	r3, r0
    4a44:	da05      	bge.n	4a52 <z_arm_clear_arm_mpu_config+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    4a46:	4a03      	ldr	r2, [pc, #12]	; (4a54 <z_arm_clear_arm_mpu_config+0x1c>)
    4a48:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    4a4a:	2100      	movs	r1, #0
    4a4c:	6111      	str	r1, [r2, #16]
    4a4e:	3301      	adds	r3, #1
    4a50:	e7f7      	b.n	4a42 <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
    4a52:	4770      	bx	lr
    4a54:	e000ed90 	.word	0xe000ed90

00004a58 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    4a58:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    4a5a:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    4a5c:	2400      	movs	r4, #0
    4a5e:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    4a62:	f7ff ffe9 	bl	4a38 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    4a66:	4623      	mov	r3, r4
    4a68:	e008      	b.n	4a7c <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    4a6a:	f103 0120 	add.w	r1, r3, #32
    4a6e:	4a0e      	ldr	r2, [pc, #56]	; (4aa8 <z_arm_init_arch_hw_at_boot+0x50>)
    4a70:	f04f 30ff 	mov.w	r0, #4294967295
    4a74:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    4a78:	3301      	adds	r3, #1
    4a7a:	b2db      	uxtb	r3, r3
    4a7c:	2b07      	cmp	r3, #7
    4a7e:	d9f4      	bls.n	4a6a <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    4a80:	2300      	movs	r3, #0
    4a82:	e008      	b.n	4a96 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    4a84:	f103 0160 	add.w	r1, r3, #96	; 0x60
    4a88:	4a07      	ldr	r2, [pc, #28]	; (4aa8 <z_arm_init_arch_hw_at_boot+0x50>)
    4a8a:	f04f 30ff 	mov.w	r0, #4294967295
    4a8e:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    4a92:	3301      	adds	r3, #1
    4a94:	b2db      	uxtb	r3, r3
    4a96:	2b07      	cmp	r3, #7
    4a98:	d9f4      	bls.n	4a84 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    4a9a:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    4a9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4aa0:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    4aa4:	bd10      	pop	{r4, pc}
    4aa6:	bf00      	nop
    4aa8:	e000e100 	.word	0xe000e100

00004aac <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    4aac:	b508      	push	{r3, lr}
	if (_current == thread) {
    4aae:	4b08      	ldr	r3, [pc, #32]	; (4ad0 <z_impl_k_thread_abort+0x24>)
    4ab0:	689b      	ldr	r3, [r3, #8]
    4ab2:	4283      	cmp	r3, r0
    4ab4:	d002      	beq.n	4abc <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
    4ab6:	f00a f819 	bl	eaec <z_thread_abort>
}
    4aba:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4abc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    4ac0:	2b00      	cmp	r3, #0
    4ac2:	d0f8      	beq.n	4ab6 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4ac4:	4a03      	ldr	r2, [pc, #12]	; (4ad4 <z_impl_k_thread_abort+0x28>)
    4ac6:	6853      	ldr	r3, [r2, #4]
    4ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4acc:	6053      	str	r3, [r2, #4]
    4ace:	e7f2      	b.n	4ab6 <z_impl_k_thread_abort+0xa>
    4ad0:	20002aec 	.word	0x20002aec
    4ad4:	e000ed00 	.word	0xe000ed00

00004ad8 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    4ad8:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    4ada:	4b03      	ldr	r3, [pc, #12]	; (4ae8 <z_arm_configure_static_mpu_regions+0x10>)
    4adc:	4a03      	ldr	r2, [pc, #12]	; (4aec <z_arm_configure_static_mpu_regions+0x14>)
    4ade:	2101      	movs	r1, #1
    4ae0:	4803      	ldr	r0, [pc, #12]	; (4af0 <z_arm_configure_static_mpu_regions+0x18>)
    4ae2:	f00c fafd 	bl	110e0 <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    4ae6:	bd08      	pop	{r3, pc}
    4ae8:	20040000 	.word	0x20040000
    4aec:	20000000 	.word	0x20000000
    4af0:	00014fc8 	.word	0x00014fc8

00004af4 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    4af4:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    4af6:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    4afa:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    4afc:	4804      	ldr	r0, [pc, #16]	; (4b10 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    4afe:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    4b00:	2320      	movs	r3, #32
    4b02:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    4b04:	4b03      	ldr	r3, [pc, #12]	; (4b14 <z_arm_configure_dynamic_mpu_regions+0x20>)
    4b06:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    4b08:	2101      	movs	r1, #1
    4b0a:	f00c faed 	bl	110e8 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    4b0e:	bd08      	pop	{r3, pc}
    4b10:	200019c8 	.word	0x200019c8
    4b14:	150b0000 	.word	0x150b0000

00004b18 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    4b18:	4a06      	ldr	r2, [pc, #24]	; (4b34 <region_init+0x1c>)
    4b1a:	6090      	str	r0, [r2, #8]

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4b1c:	680b      	ldr	r3, [r1, #0]
    4b1e:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    4b22:	4303      	orrs	r3, r0
    4b24:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4b28:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4b2a:	688b      	ldr	r3, [r1, #8]
    4b2c:	f043 0301 	orr.w	r3, r3, #1
    4b30:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    4b32:	4770      	bx	lr
    4b34:	e000ed90 	.word	0xe000ed90

00004b38 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    4b38:	b510      	push	{r4, lr}
    4b3a:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    4b3c:	2807      	cmp	r0, #7
    4b3e:	d803      	bhi.n	4b48 <region_allocate_and_init+0x10>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    4b40:	f7ff ffea 	bl	4b18 <region_init>

	return index;
    4b44:	4620      	mov	r0, r4
}
    4b46:	bd10      	pop	{r4, pc}
    4b48:	4b09      	ldr	r3, [pc, #36]	; (4b70 <region_allocate_and_init+0x38>)
    4b4a:	4a0a      	ldr	r2, [pc, #40]	; (4b74 <region_allocate_and_init+0x3c>)
    4b4c:	1a9b      	subs	r3, r3, r2
    4b4e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    4b50:	f04f 0200 	mov.w	r2, #0
    4b54:	2101      	movs	r1, #1
    4b56:	f361 0202 	bfi	r2, r1, #0, #3
    4b5a:	f36f 02c5 	bfc	r2, #3, #3
    4b5e:	f363 128f 	bfi	r2, r3, #6, #10
    4b62:	4601      	mov	r1, r0
    4b64:	4804      	ldr	r0, [pc, #16]	; (4b78 <region_allocate_and_init+0x40>)
    4b66:	f7fc ff6b 	bl	1a40 <log_1>
		return -EINVAL;
    4b6a:	f06f 0015 	mvn.w	r0, #21
    4b6e:	e7ea      	b.n	4b46 <region_allocate_and_init+0xe>
    4b70:	00014340 	.word	0x00014340
    4b74:	00014318 	.word	0x00014318
    4b78:	00014fd4 	.word	0x00014fd4

00004b7c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    4b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4b80:	4680      	mov	r8, r0
    4b82:	460f      	mov	r7, r1
    4b84:	469a      	mov	sl, r3
	int i;
	int reg_index = start_reg_index;
    4b86:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
    4b88:	2400      	movs	r4, #0
    4b8a:	e009      	b.n	4ba0 <mpu_configure_regions+0x24>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    4b8c:	4629      	mov	r1, r5
    4b8e:	b2f0      	uxtb	r0, r6
    4b90:	f00c fa87 	bl	110a2 <mpu_configure_region>
    4b94:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
    4b96:	f110 0f16 	cmn.w	r0, #22
    4b9a:	d025      	beq.n	4be8 <mpu_configure_regions+0x6c>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    4b9c:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    4b9e:	3401      	adds	r4, #1
    4ba0:	42bc      	cmp	r4, r7
    4ba2:	da21      	bge.n	4be8 <mpu_configure_regions+0x6c>
		if (regions[i].size == 0U) {
    4ba4:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    4ba8:	eb08 0585 	add.w	r5, r8, r5, lsl #2
    4bac:	686a      	ldr	r2, [r5, #4]
    4bae:	2a00      	cmp	r2, #0
    4bb0:	d0f5      	beq.n	4b9e <mpu_configure_regions+0x22>
		if (do_sanity_check &&
    4bb2:	f1ba 0f00 	cmp.w	sl, #0
    4bb6:	d0e9      	beq.n	4b8c <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
    4bb8:	4628      	mov	r0, r5
    4bba:	f00c fa61 	bl	11080 <mpu_partition_is_valid>
		if (do_sanity_check &&
    4bbe:	2800      	cmp	r0, #0
    4bc0:	d1e4      	bne.n	4b8c <mpu_configure_regions+0x10>
    4bc2:	4b0b      	ldr	r3, [pc, #44]	; (4bf0 <mpu_configure_regions+0x74>)
    4bc4:	4a0b      	ldr	r2, [pc, #44]	; (4bf4 <mpu_configure_regions+0x78>)
    4bc6:	1a9b      	subs	r3, r3, r2
    4bc8:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Partition %u: sanity check failed.", i);
    4bca:	f04f 0200 	mov.w	r2, #0
    4bce:	2101      	movs	r1, #1
    4bd0:	f361 0202 	bfi	r2, r1, #0, #3
    4bd4:	f36f 02c5 	bfc	r2, #3, #3
    4bd8:	f363 128f 	bfi	r2, r3, #6, #10
    4bdc:	4621      	mov	r1, r4
    4bde:	4806      	ldr	r0, [pc, #24]	; (4bf8 <mpu_configure_regions+0x7c>)
    4be0:	f7fc ff2e 	bl	1a40 <log_1>
			return -EINVAL;
    4be4:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
    4be8:	4630      	mov	r0, r6
    4bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4bee:	bf00      	nop
    4bf0:	00014340 	.word	0x00014340
    4bf4:	00014318 	.word	0x00014318
    4bf8:	00014ffc 	.word	0x00014ffc

00004bfc <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    4bfc:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    4bfe:	4c03      	ldr	r4, [pc, #12]	; (4c0c <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    4c00:	2301      	movs	r3, #1
    4c02:	7822      	ldrb	r2, [r4, #0]
    4c04:	f7ff ffba 	bl	4b7c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    4c08:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    4c0a:	bd10      	pop	{r4, pc}
    4c0c:	20002b4e 	.word	0x20002b4e

00004c10 <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    4c10:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    4c12:	2300      	movs	r3, #0
    4c14:	4a08      	ldr	r2, [pc, #32]	; (4c38 <mpu_configure_dynamic_mpu_regions+0x28>)
    4c16:	7812      	ldrb	r2, [r2, #0]
    4c18:	f7ff ffb0 	bl	4b7c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    4c1c:	f110 0f16 	cmn.w	r0, #22
    4c20:	d008      	beq.n	4c34 <mpu_configure_dynamic_mpu_regions+0x24>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    4c22:	4603      	mov	r3, r0
    4c24:	2b07      	cmp	r3, #7
    4c26:	dc05      	bgt.n	4c34 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    4c28:	4a04      	ldr	r2, [pc, #16]	; (4c3c <mpu_configure_dynamic_mpu_regions+0x2c>)
    4c2a:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    4c2c:	2100      	movs	r1, #0
    4c2e:	6111      	str	r1, [r2, #16]
    4c30:	3301      	adds	r3, #1
    4c32:	e7f7      	b.n	4c24 <mpu_configure_dynamic_mpu_regions+0x14>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    4c34:	bd08      	pop	{r3, pc}
    4c36:	bf00      	nop
    4c38:	20002b4e 	.word	0x20002b4e
    4c3c:	e000ed90 	.word	0xe000ed90

00004c40 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    4c40:	4b03      	ldr	r3, [pc, #12]	; (4c50 <arm_core_mpu_enable+0x10>)
    4c42:	2205      	movs	r2, #5
    4c44:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    4c46:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4c4a:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    4c4e:	4770      	bx	lr
    4c50:	e000ed90 	.word	0xe000ed90

00004c54 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    4c54:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    4c58:	4b01      	ldr	r3, [pc, #4]	; (4c60 <arm_core_mpu_disable+0xc>)
    4c5a:	2200      	movs	r2, #0
    4c5c:	605a      	str	r2, [r3, #4]
}
    4c5e:	4770      	bx	lr
    4c60:	e000ed90 	.word	0xe000ed90

00004c64 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    4c64:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    4c66:	4b0e      	ldr	r3, [pc, #56]	; (4ca0 <z_arm_mpu_init+0x3c>)
    4c68:	681d      	ldr	r5, [r3, #0]
    4c6a:	2d08      	cmp	r5, #8
    4c6c:	d815      	bhi.n	4c9a <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    4c6e:	f7ff fff1 	bl	4c54 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4c72:	2400      	movs	r4, #0
    4c74:	42a5      	cmp	r5, r4
    4c76:	d90a      	bls.n	4c8e <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    4c78:	4b09      	ldr	r3, [pc, #36]	; (4ca0 <z_arm_mpu_init+0x3c>)
    4c7a:	6859      	ldr	r1, [r3, #4]
    4c7c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    4c80:	0093      	lsls	r3, r2, #2
    4c82:	4419      	add	r1, r3
    4c84:	4620      	mov	r0, r4
    4c86:	f7ff ff47 	bl	4b18 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4c8a:	3401      	adds	r4, #1
    4c8c:	e7f2      	b.n	4c74 <z_arm_mpu_init+0x10>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    4c8e:	4b05      	ldr	r3, [pc, #20]	; (4ca4 <z_arm_mpu_init+0x40>)
    4c90:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    4c92:	f7ff ffd5 	bl	4c40 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    4c96:	2000      	movs	r0, #0
}
    4c98:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    4c9a:	f04f 30ff 	mov.w	r0, #4294967295
    4c9e:	e7fb      	b.n	4c98 <z_arm_mpu_init+0x34>
    4ca0:	0001505c 	.word	0x0001505c
    4ca4:	20002b4e 	.word	0x20002b4e

00004ca8 <malloc>:
}

SYS_INIT(malloc_prepare, APPLICATION, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT);
#else /* No malloc arena */
void *malloc(size_t size)
{
    4ca8:	b508      	push	{r3, lr}
    4caa:	4b0b      	ldr	r3, [pc, #44]	; (4cd8 <malloc+0x30>)
    4cac:	4a0b      	ldr	r2, [pc, #44]	; (4cdc <malloc+0x34>)
    4cae:	1a9b      	subs	r3, r3, r2
    4cb0:	08db      	lsrs	r3, r3, #3
	ARG_UNUSED(size);

	LOG_ERR("CONFIG_MINIMAL_LIBC_MALLOC_ARENA_SIZE is 0");
    4cb2:	f04f 0100 	mov.w	r1, #0
    4cb6:	2201      	movs	r2, #1
    4cb8:	f362 0102 	bfi	r1, r2, #0, #3
    4cbc:	f36f 01c5 	bfc	r1, #3, #3
    4cc0:	f363 118f 	bfi	r1, r3, #6, #10
    4cc4:	4806      	ldr	r0, [pc, #24]	; (4ce0 <malloc+0x38>)
    4cc6:	f7fc ff4f 	bl	1b68 <log_0>
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
    4cca:	f008 fd6f 	bl	d7ac <z_impl_z_errno>
	errno = ENOMEM;
    4cce:	230c      	movs	r3, #12
    4cd0:	6003      	str	r3, [r0, #0]

	return NULL;
}
    4cd2:	2000      	movs	r0, #0
    4cd4:	bd08      	pop	{r3, pc}
    4cd6:	bf00      	nop
    4cd8:	00014348 	.word	0x00014348
    4cdc:	00014318 	.word	0x00014318
    4ce0:	00015020 	.word	0x00015020

00004ce4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    4ce4:	4b01      	ldr	r3, [pc, #4]	; (4cec <__stdout_hook_install+0x8>)
    4ce6:	6018      	str	r0, [r3, #0]
}
    4ce8:	4770      	bx	lr
    4cea:	bf00      	nop
    4cec:	2000022c 	.word	0x2000022c

00004cf0 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT str, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
    4cf0:	b40c      	push	{r2, r3}
    4cf2:	b500      	push	{lr}
    4cf4:	b085      	sub	sp, #20

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    4cf6:	460b      	mov	r3, r1
    4cf8:	b909      	cbnz	r1, 4cfe <snprintf+0xe>
		str = &dummy; /* write final NUL to dummy, can't change *s */
    4cfa:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = str;
    4cfe:	9001      	str	r0, [sp, #4]
	p.len = (int) len;
    4d00:	9302      	str	r3, [sp, #8]

	va_start(vargs, format);
    4d02:	ab07      	add	r3, sp, #28
    4d04:	9303      	str	r3, [sp, #12]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    4d06:	9a06      	ldr	r2, [sp, #24]
    4d08:	a901      	add	r1, sp, #4
    4d0a:	4805      	ldr	r0, [pc, #20]	; (4d20 <snprintf+0x30>)
    4d0c:	f7fb fef2 	bl	af4 <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
    4d10:	9b01      	ldr	r3, [sp, #4]
    4d12:	2200      	movs	r2, #0
    4d14:	701a      	strb	r2, [r3, #0]
	return r;
}
    4d16:	b005      	add	sp, #20
    4d18:	f85d eb04 	ldr.w	lr, [sp], #4
    4d1c:	b002      	add	sp, #8
    4d1e:	4770      	bx	lr
    4d20:	000112ad 	.word	0x000112ad

00004d24 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    4d24:	f04f 0320 	mov.w	r3, #32
    4d28:	f3ef 8211 	mrs	r2, BASEPRI
    4d2c:	f383 8812 	msr	BASEPRI_MAX, r3
    4d30:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    4d34:	2301      	movs	r3, #1
    4d36:	4906      	ldr	r1, [pc, #24]	; (4d50 <nordicsemi_nrf52_init+0x2c>)
    4d38:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    4d3c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    4d40:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    4d44:	f382 8811 	msr	BASEPRI, r2
    4d48:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    4d4c:	2000      	movs	r0, #0
    4d4e:	4770      	bx	lr
    4d50:	4001e000 	.word	0x4001e000

00004d54 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    4d54:	b130      	cbz	r0, 4d64 <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    4d56:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    4d58:	0180      	lsls	r0, r0, #6
    4d5a:	4b03      	ldr	r3, [pc, #12]	; (4d68 <arch_busy_wait+0x14>)
    4d5c:	f043 0301 	orr.w	r3, r3, #1
    4d60:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    4d62:	bd08      	pop	{r3, pc}
    4d64:	4770      	bx	lr
    4d66:	bf00      	nop
    4d68:	00014440 	.word	0x00014440

00004d6c <registry_add>:
static int registry_add(int type,
			const struct fs_file_system_t *fstp)
{
	int rv = -ENOSPC;

	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
    4d6c:	2300      	movs	r3, #0
    4d6e:	2b01      	cmp	r3, #1
    4d70:	d80e      	bhi.n	4d90 <registry_add+0x24>
		struct registry_entry *ep = &registry[i];

		if (ep->fstp == NULL) {
    4d72:	4a09      	ldr	r2, [pc, #36]	; (4d98 <registry_add+0x2c>)
    4d74:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    4d78:	6852      	ldr	r2, [r2, #4]
    4d7a:	b10a      	cbz	r2, 4d80 <registry_add+0x14>
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
    4d7c:	3301      	adds	r3, #1
    4d7e:	e7f6      	b.n	4d6e <registry_add+0x2>
			ep->type = type;
    4d80:	4a05      	ldr	r2, [pc, #20]	; (4d98 <registry_add+0x2c>)
    4d82:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
			ep->fstp = fstp;
    4d86:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    4d8a:	6059      	str	r1, [r3, #4]
			rv = 0;
    4d8c:	2000      	movs	r0, #0
			break;
    4d8e:	4770      	bx	lr
	int rv = -ENOSPC;
    4d90:	f06f 001b 	mvn.w	r0, #27
		}
	}

	return rv;
}
    4d94:	4770      	bx	lr
    4d96:	bf00      	nop
    4d98:	200019f0 	.word	0x200019f0

00004d9c <registry_find>:

static struct registry_entry *registry_find(int type)
{
    4d9c:	4601      	mov	r1, r0
	for (size_t i = 0; i < ARRAY_SIZE(registry); ++i) {
    4d9e:	2300      	movs	r3, #0
    4da0:	e000      	b.n	4da4 <registry_find+0x8>
    4da2:	3301      	adds	r3, #1
    4da4:	2b01      	cmp	r3, #1
    4da6:	d80b      	bhi.n	4dc0 <registry_find+0x24>
		struct registry_entry *ep = &registry[i];
    4da8:	4806      	ldr	r0, [pc, #24]	; (4dc4 <registry_find+0x28>)
    4daa:	eb00 00c3 	add.w	r0, r0, r3, lsl #3

		if ((ep->fstp != NULL) && (ep->type == type)) {
    4dae:	6842      	ldr	r2, [r0, #4]
    4db0:	2a00      	cmp	r2, #0
    4db2:	d0f6      	beq.n	4da2 <registry_find+0x6>
    4db4:	4a03      	ldr	r2, [pc, #12]	; (4dc4 <registry_find+0x28>)
    4db6:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    4dba:	428a      	cmp	r2, r1
    4dbc:	d1f1      	bne.n	4da2 <registry_find+0x6>
    4dbe:	e000      	b.n	4dc2 <registry_find+0x26>
			return ep;
		}
	}
	return NULL;
    4dc0:	2000      	movs	r0, #0
}
    4dc2:	4770      	bx	lr
    4dc4:	200019f0 	.word	0x200019f0

00004dc8 <fs_get_mnt_point>:
	return (ep != NULL) ? ep->fstp : NULL;
}

static int fs_get_mnt_point(struct fs_mount_t **mnt_pntp,
			    const char *name, size_t *match_len)
{
    4dc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4dcc:	4683      	mov	fp, r0
    4dce:	460f      	mov	r7, r1
    4dd0:	4692      	mov	sl, r2
	struct fs_mount_t *mnt_p = NULL, *itr;
	size_t longest_match = 0;
	size_t len, name_len = strlen(name);
    4dd2:	4608      	mov	r0, r1
    4dd4:	f00c f9bc 	bl	11150 <strlen>
    4dd8:	4680      	mov	r8, r0
	return z_impl_k_mutex_lock(mutex, timeout);
    4dda:	f04f 32ff 	mov.w	r2, #4294967295
    4dde:	f04f 33ff 	mov.w	r3, #4294967295
    4de2:	4820      	ldr	r0, [pc, #128]	; (4e64 <fs_get_mnt_point+0x9c>)
    4de4:	f008 fff8 	bl	ddd8 <z_impl_k_mutex_lock>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    4de8:	4b1f      	ldr	r3, [pc, #124]	; (4e68 <fs_get_mnt_point+0xa0>)
    4dea:	681c      	ldr	r4, [r3, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4dec:	429c      	cmp	r4, r3
    4dee:	d01d      	beq.n	4e2c <fs_get_mnt_point+0x64>
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    4df0:	2600      	movs	r6, #0
    4df2:	46b1      	mov	r9, r6
    4df4:	e00c      	b.n	4e10 <fs_get_mnt_point+0x48>
		if ((len > 1) && (name[len] != '/') && (name[len] != '\0')) {
			continue;
		}

		/* Check for mount point match */
		if (strncmp(name, itr->mnt_point, len) == 0) {
    4df6:	462a      	mov	r2, r5
    4df8:	68e1      	ldr	r1, [r4, #12]
    4dfa:	4638      	mov	r0, r7
    4dfc:	f00c f9c4 	bl	11188 <strncmp>
    4e00:	b908      	cbnz	r0, 4e06 <fs_get_mnt_point+0x3e>
			mnt_p = itr;
			longest_match = len;
    4e02:	462e      	mov	r6, r5
			mnt_p = itr;
    4e04:	46a1      	mov	r9, r4
    4e06:	4b18      	ldr	r3, [pc, #96]	; (4e68 <fs_get_mnt_point+0xa0>)
    4e08:	685b      	ldr	r3, [r3, #4]
    4e0a:	429c      	cmp	r4, r3
    4e0c:	d010      	beq.n	4e30 <fs_get_mnt_point+0x68>
    4e0e:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
    4e10:	b184      	cbz	r4, 4e34 <fs_get_mnt_point+0x6c>
		len = itr->mountp_len;
    4e12:	69a5      	ldr	r5, [r4, #24]
		if ((len < longest_match) || (len > name_len)) {
    4e14:	42ae      	cmp	r6, r5
    4e16:	d8f6      	bhi.n	4e06 <fs_get_mnt_point+0x3e>
    4e18:	45a8      	cmp	r8, r5
    4e1a:	d3f4      	bcc.n	4e06 <fs_get_mnt_point+0x3e>
		if ((len > 1) && (name[len] != '/') && (name[len] != '\0')) {
    4e1c:	2d01      	cmp	r5, #1
    4e1e:	d9ea      	bls.n	4df6 <fs_get_mnt_point+0x2e>
    4e20:	5d7b      	ldrb	r3, [r7, r5]
    4e22:	2b2f      	cmp	r3, #47	; 0x2f
    4e24:	d0e7      	beq.n	4df6 <fs_get_mnt_point+0x2e>
    4e26:	2b00      	cmp	r3, #0
    4e28:	d0e5      	beq.n	4df6 <fs_get_mnt_point+0x2e>
    4e2a:	e7ec      	b.n	4e06 <fs_get_mnt_point+0x3e>
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4e2c:	2400      	movs	r4, #0
    4e2e:	e7df      	b.n	4df0 <fs_get_mnt_point+0x28>
	return (node == list->tail) ? NULL : node->next;
    4e30:	2400      	movs	r4, #0
    4e32:	e7ed      	b.n	4e10 <fs_get_mnt_point+0x48>
	return z_impl_k_mutex_unlock(mutex);
    4e34:	480b      	ldr	r0, [pc, #44]	; (4e64 <fs_get_mnt_point+0x9c>)
    4e36:	f009 f859 	bl	deec <z_impl_k_mutex_unlock>
		}
	}
	k_mutex_unlock(&mutex);

	if (mnt_p == NULL) {
    4e3a:	f1b9 0f00 	cmp.w	r9, #0
    4e3e:	d00b      	beq.n	4e58 <fs_get_mnt_point+0x90>
		return -ENOENT;
	}

	*mnt_pntp = mnt_p;
    4e40:	f8cb 9000 	str.w	r9, [fp]
	if (match_len)
    4e44:	f1ba 0f00 	cmp.w	sl, #0
    4e48:	d009      	beq.n	4e5e <fs_get_mnt_point+0x96>
		*match_len = mnt_p->mountp_len;
    4e4a:	f8d9 3018 	ldr.w	r3, [r9, #24]
    4e4e:	f8ca 3000 	str.w	r3, [sl]

	return 0;
    4e52:	2000      	movs	r0, #0
}
    4e54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return -ENOENT;
    4e58:	f06f 0001 	mvn.w	r0, #1
    4e5c:	e7fa      	b.n	4e54 <fs_get_mnt_point+0x8c>
	return 0;
    4e5e:	2000      	movs	r0, #0
    4e60:	e7f8      	b.n	4e54 <fs_get_mnt_point+0x8c>
    4e62:	bf00      	nop
    4e64:	200019dc 	.word	0x200019dc
    4e68:	200019d4 	.word	0x200019d4

00004e6c <fs_init>:
	LOG_DBG("fs unregister %d: %d", type, rc);
	return rc;
}

static int fs_init(const struct device *dev)
{
    4e6c:	b508      	push	{r3, lr}
	return z_impl_k_mutex_init(mutex);
    4e6e:	4804      	ldr	r0, [pc, #16]	; (4e80 <fs_init+0x14>)
    4e70:	f00e fd7b 	bl	1396a <z_impl_k_mutex_init>
	list->head = (sys_dnode_t *)list;
    4e74:	4b03      	ldr	r3, [pc, #12]	; (4e84 <fs_init+0x18>)
    4e76:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    4e78:	605b      	str	r3, [r3, #4]
	k_mutex_init(&mutex);
	sys_dlist_init(&fs_mnt_list);
	return 0;
}
    4e7a:	2000      	movs	r0, #0
    4e7c:	bd08      	pop	{r3, pc}
    4e7e:	bf00      	nop
    4e80:	200019dc 	.word	0x200019dc
    4e84:	200019d4 	.word	0x200019d4

00004e88 <fs_open>:
{
    4e88:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e8a:	b083      	sub	sp, #12
    4e8c:	4605      	mov	r5, r0
	zfp->flags = flags;
    4e8e:	7202      	strb	r2, [r0, #8]
	if ((file_name == NULL) ||
    4e90:	b361      	cbz	r1, 4eec <fs_open+0x64>
    4e92:	4616      	mov	r6, r2
    4e94:	460f      	mov	r7, r1
			(strlen(file_name) <= 1) || (file_name[0] != '/')) {
    4e96:	4608      	mov	r0, r1
    4e98:	f00c f95a 	bl	11150 <strlen>
	if ((file_name == NULL) ||
    4e9c:	2801      	cmp	r0, #1
    4e9e:	d925      	bls.n	4eec <fs_open+0x64>
			(strlen(file_name) <= 1) || (file_name[0] != '/')) {
    4ea0:	783b      	ldrb	r3, [r7, #0]
    4ea2:	2b2f      	cmp	r3, #47	; 0x2f
    4ea4:	d122      	bne.n	4eec <fs_open+0x64>
	if (zfp->mp != NULL) {
    4ea6:	686b      	ldr	r3, [r5, #4]
    4ea8:	2b00      	cmp	r3, #0
    4eaa:	d157      	bne.n	4f5c <fs_open+0xd4>
	rc = fs_get_mnt_point(&mp, file_name, NULL);
    4eac:	2200      	movs	r2, #0
    4eae:	4639      	mov	r1, r7
    4eb0:	a801      	add	r0, sp, #4
    4eb2:	f7ff ff89 	bl	4dc8 <fs_get_mnt_point>
	if (rc < 0) {
    4eb6:	1e04      	subs	r4, r0, #0
    4eb8:	db2b      	blt.n	4f12 <fs_open+0x8a>
	if (((mp->flags & FS_MOUNT_FLAG_READ_ONLY) != 0) &&
    4eba:	9b01      	ldr	r3, [sp, #4]
    4ebc:	f893 2020 	ldrb.w	r2, [r3, #32]
    4ec0:	f012 0f02 	tst.w	r2, #2
    4ec4:	d002      	beq.n	4ecc <fs_open+0x44>
    4ec6:	f016 0f12 	tst.w	r6, #18
    4eca:	d14a      	bne.n	4f62 <fs_open+0xda>
	CHECKIF(mp->fs->open == NULL) {
    4ecc:	69da      	ldr	r2, [r3, #28]
    4ece:	6812      	ldr	r2, [r2, #0]
    4ed0:	2a00      	cmp	r2, #0
    4ed2:	d049      	beq.n	4f68 <fs_open+0xe0>
	zfp->mp = mp;
    4ed4:	606b      	str	r3, [r5, #4]
	rc = mp->fs->open(zfp, file_name, flags);
    4ed6:	69db      	ldr	r3, [r3, #28]
    4ed8:	681b      	ldr	r3, [r3, #0]
    4eda:	4632      	mov	r2, r6
    4edc:	4639      	mov	r1, r7
    4ede:	4628      	mov	r0, r5
    4ee0:	4798      	blx	r3
	if (rc < 0) {
    4ee2:	1e04      	subs	r4, r0, #0
    4ee4:	db26      	blt.n	4f34 <fs_open+0xac>
}
    4ee6:	4620      	mov	r0, r4
    4ee8:	b003      	add	sp, #12
    4eea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4eec:	4b20      	ldr	r3, [pc, #128]	; (4f70 <fs_open+0xe8>)
    4eee:	4a21      	ldr	r2, [pc, #132]	; (4f74 <fs_open+0xec>)
    4ef0:	1a9b      	subs	r3, r3, r2
    4ef2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("invalid file name!!");
    4ef4:	f04f 0100 	mov.w	r1, #0
    4ef8:	2201      	movs	r2, #1
    4efa:	f362 0102 	bfi	r1, r2, #0, #3
    4efe:	f36f 01c5 	bfc	r1, #3, #3
    4f02:	f363 118f 	bfi	r1, r3, #6, #10
    4f06:	481c      	ldr	r0, [pc, #112]	; (4f78 <fs_open+0xf0>)
    4f08:	f7fc fe2e 	bl	1b68 <log_0>
		return -EINVAL;
    4f0c:	f06f 0415 	mvn.w	r4, #21
    4f10:	e7e9      	b.n	4ee6 <fs_open+0x5e>
    4f12:	4b17      	ldr	r3, [pc, #92]	; (4f70 <fs_open+0xe8>)
    4f14:	4a17      	ldr	r2, [pc, #92]	; (4f74 <fs_open+0xec>)
    4f16:	1a9b      	subs	r3, r3, r2
    4f18:	08db      	lsrs	r3, r3, #3
		LOG_ERR("mount point not found!!");
    4f1a:	f04f 0100 	mov.w	r1, #0
    4f1e:	2201      	movs	r2, #1
    4f20:	f362 0102 	bfi	r1, r2, #0, #3
    4f24:	f36f 01c5 	bfc	r1, #3, #3
    4f28:	f363 118f 	bfi	r1, r3, #6, #10
    4f2c:	4813      	ldr	r0, [pc, #76]	; (4f7c <fs_open+0xf4>)
    4f2e:	f7fc fe1b 	bl	1b68 <log_0>
		return rc;
    4f32:	e7d8      	b.n	4ee6 <fs_open+0x5e>
    4f34:	4b0e      	ldr	r3, [pc, #56]	; (4f70 <fs_open+0xe8>)
    4f36:	4a0f      	ldr	r2, [pc, #60]	; (4f74 <fs_open+0xec>)
    4f38:	1a9b      	subs	r3, r3, r2
    4f3a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("file open error (%d)", rc);
    4f3c:	f04f 0200 	mov.w	r2, #0
    4f40:	2101      	movs	r1, #1
    4f42:	f361 0202 	bfi	r2, r1, #0, #3
    4f46:	f36f 02c5 	bfc	r2, #3, #3
    4f4a:	f363 128f 	bfi	r2, r3, #6, #10
    4f4e:	4621      	mov	r1, r4
    4f50:	480b      	ldr	r0, [pc, #44]	; (4f80 <fs_open+0xf8>)
    4f52:	f7fc fd75 	bl	1a40 <log_1>
		zfp->mp = NULL;
    4f56:	2300      	movs	r3, #0
    4f58:	606b      	str	r3, [r5, #4]
		return rc;
    4f5a:	e7c4      	b.n	4ee6 <fs_open+0x5e>
		return -EBUSY;
    4f5c:	f06f 040f 	mvn.w	r4, #15
    4f60:	e7c1      	b.n	4ee6 <fs_open+0x5e>
		return -EROFS;
    4f62:	f06f 041d 	mvn.w	r4, #29
    4f66:	e7be      	b.n	4ee6 <fs_open+0x5e>
		return -ENOTSUP;
    4f68:	f06f 0485 	mvn.w	r4, #133	; 0x85
    4f6c:	e7bb      	b.n	4ee6 <fs_open+0x5e>
    4f6e:	bf00      	nop
    4f70:	00014328 	.word	0x00014328
    4f74:	00014318 	.word	0x00014318
    4f78:	00015080 	.word	0x00015080
    4f7c:	00015094 	.word	0x00015094
    4f80:	000150ac 	.word	0x000150ac

00004f84 <fs_close>:
{
    4f84:	b538      	push	{r3, r4, r5, lr}
	if (zfp->mp == NULL) {
    4f86:	6843      	ldr	r3, [r0, #4]
    4f88:	b1e3      	cbz	r3, 4fc4 <fs_close+0x40>
    4f8a:	4604      	mov	r4, r0
	CHECKIF(zfp->mp->fs->close == NULL) {
    4f8c:	69db      	ldr	r3, [r3, #28]
    4f8e:	69db      	ldr	r3, [r3, #28]
    4f90:	b1d3      	cbz	r3, 4fc8 <fs_close+0x44>
	rc = zfp->mp->fs->close(zfp);
    4f92:	4798      	blx	r3
	if (rc < 0) {
    4f94:	1e05      	subs	r5, r0, #0
    4f96:	db03      	blt.n	4fa0 <fs_close+0x1c>
	zfp->mp = NULL;
    4f98:	2300      	movs	r3, #0
    4f9a:	6063      	str	r3, [r4, #4]
}
    4f9c:	4628      	mov	r0, r5
    4f9e:	bd38      	pop	{r3, r4, r5, pc}
    4fa0:	4b0b      	ldr	r3, [pc, #44]	; (4fd0 <fs_close+0x4c>)
    4fa2:	4a0c      	ldr	r2, [pc, #48]	; (4fd4 <fs_close+0x50>)
    4fa4:	1a9b      	subs	r3, r3, r2
    4fa6:	08db      	lsrs	r3, r3, #3
		LOG_ERR("file close error (%d)", rc);
    4fa8:	f04f 0200 	mov.w	r2, #0
    4fac:	2101      	movs	r1, #1
    4fae:	f361 0202 	bfi	r2, r1, #0, #3
    4fb2:	f36f 02c5 	bfc	r2, #3, #3
    4fb6:	f363 128f 	bfi	r2, r3, #6, #10
    4fba:	4629      	mov	r1, r5
    4fbc:	4806      	ldr	r0, [pc, #24]	; (4fd8 <fs_close+0x54>)
    4fbe:	f7fc fd3f 	bl	1a40 <log_1>
		return rc;
    4fc2:	e7eb      	b.n	4f9c <fs_close+0x18>
		return 0;
    4fc4:	2500      	movs	r5, #0
    4fc6:	e7e9      	b.n	4f9c <fs_close+0x18>
		return -ENOTSUP;
    4fc8:	f06f 0585 	mvn.w	r5, #133	; 0x85
    4fcc:	e7e6      	b.n	4f9c <fs_close+0x18>
    4fce:	bf00      	nop
    4fd0:	00014328 	.word	0x00014328
    4fd4:	00014318 	.word	0x00014318
    4fd8:	000150c4 	.word	0x000150c4

00004fdc <fs_read>:
{
    4fdc:	b510      	push	{r4, lr}
	if (zfp->mp == NULL) {
    4fde:	6843      	ldr	r3, [r0, #4]
    4fe0:	b1cb      	cbz	r3, 5016 <fs_read+0x3a>
	CHECKIF(zfp->mp->fs->read == NULL) {
    4fe2:	69db      	ldr	r3, [r3, #28]
    4fe4:	685b      	ldr	r3, [r3, #4]
    4fe6:	b1cb      	cbz	r3, 501c <fs_read+0x40>
	rc = zfp->mp->fs->read(zfp, ptr, size);
    4fe8:	4798      	blx	r3
	if (rc < 0) {
    4fea:	1e04      	subs	r4, r0, #0
    4fec:	db01      	blt.n	4ff2 <fs_read+0x16>
}
    4fee:	4620      	mov	r0, r4
    4ff0:	bd10      	pop	{r4, pc}
    4ff2:	4b0c      	ldr	r3, [pc, #48]	; (5024 <fs_read+0x48>)
    4ff4:	4a0c      	ldr	r2, [pc, #48]	; (5028 <fs_read+0x4c>)
    4ff6:	1a9b      	subs	r3, r3, r2
    4ff8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("file read error (%d)", rc);
    4ffa:	f04f 0200 	mov.w	r2, #0
    4ffe:	2101      	movs	r1, #1
    5000:	f361 0202 	bfi	r2, r1, #0, #3
    5004:	f36f 02c5 	bfc	r2, #3, #3
    5008:	f363 128f 	bfi	r2, r3, #6, #10
    500c:	4621      	mov	r1, r4
    500e:	4807      	ldr	r0, [pc, #28]	; (502c <fs_read+0x50>)
    5010:	f7fc fd16 	bl	1a40 <log_1>
    5014:	e7eb      	b.n	4fee <fs_read+0x12>
		return -EBADF;
    5016:	f06f 0408 	mvn.w	r4, #8
    501a:	e7e8      	b.n	4fee <fs_read+0x12>
		return -ENOTSUP;
    501c:	f06f 0485 	mvn.w	r4, #133	; 0x85
    5020:	e7e5      	b.n	4fee <fs_read+0x12>
    5022:	bf00      	nop
    5024:	00014328 	.word	0x00014328
    5028:	00014318 	.word	0x00014318
    502c:	000150dc 	.word	0x000150dc

00005030 <fs_write>:
{
    5030:	b510      	push	{r4, lr}
	if (zfp->mp == NULL) {
    5032:	6843      	ldr	r3, [r0, #4]
    5034:	b1cb      	cbz	r3, 506a <fs_write+0x3a>
	CHECKIF(zfp->mp->fs->write == NULL) {
    5036:	69db      	ldr	r3, [r3, #28]
    5038:	689b      	ldr	r3, [r3, #8]
    503a:	b1cb      	cbz	r3, 5070 <fs_write+0x40>
	rc = zfp->mp->fs->write(zfp, ptr, size);
    503c:	4798      	blx	r3
	if (rc < 0) {
    503e:	1e04      	subs	r4, r0, #0
    5040:	db01      	blt.n	5046 <fs_write+0x16>
}
    5042:	4620      	mov	r0, r4
    5044:	bd10      	pop	{r4, pc}
    5046:	4b0c      	ldr	r3, [pc, #48]	; (5078 <fs_write+0x48>)
    5048:	4a0c      	ldr	r2, [pc, #48]	; (507c <fs_write+0x4c>)
    504a:	1a9b      	subs	r3, r3, r2
    504c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("file write error (%d)", rc);
    504e:	f04f 0200 	mov.w	r2, #0
    5052:	2101      	movs	r1, #1
    5054:	f361 0202 	bfi	r2, r1, #0, #3
    5058:	f36f 02c5 	bfc	r2, #3, #3
    505c:	f363 128f 	bfi	r2, r3, #6, #10
    5060:	4621      	mov	r1, r4
    5062:	4807      	ldr	r0, [pc, #28]	; (5080 <fs_write+0x50>)
    5064:	f7fc fcec 	bl	1a40 <log_1>
    5068:	e7eb      	b.n	5042 <fs_write+0x12>
		return -EBADF;
    506a:	f06f 0408 	mvn.w	r4, #8
    506e:	e7e8      	b.n	5042 <fs_write+0x12>
		return -ENOTSUP;
    5070:	f06f 0485 	mvn.w	r4, #133	; 0x85
    5074:	e7e5      	b.n	5042 <fs_write+0x12>
    5076:	bf00      	nop
    5078:	00014328 	.word	0x00014328
    507c:	00014318 	.word	0x00014318
    5080:	000150f4 	.word	0x000150f4

00005084 <fs_seek>:
{
    5084:	b510      	push	{r4, lr}
	if (zfp->mp == NULL) {
    5086:	6843      	ldr	r3, [r0, #4]
    5088:	b1cb      	cbz	r3, 50be <fs_seek+0x3a>
	CHECKIF(zfp->mp->fs->lseek == NULL) {
    508a:	69db      	ldr	r3, [r3, #28]
    508c:	68db      	ldr	r3, [r3, #12]
    508e:	b1cb      	cbz	r3, 50c4 <fs_seek+0x40>
	rc = zfp->mp->fs->lseek(zfp, offset, whence);
    5090:	4798      	blx	r3
	if (rc < 0) {
    5092:	1e04      	subs	r4, r0, #0
    5094:	db01      	blt.n	509a <fs_seek+0x16>
}
    5096:	4620      	mov	r0, r4
    5098:	bd10      	pop	{r4, pc}
    509a:	4b0c      	ldr	r3, [pc, #48]	; (50cc <fs_seek+0x48>)
    509c:	4a0c      	ldr	r2, [pc, #48]	; (50d0 <fs_seek+0x4c>)
    509e:	1a9b      	subs	r3, r3, r2
    50a0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("file seek error (%d)", rc);
    50a2:	f04f 0200 	mov.w	r2, #0
    50a6:	2101      	movs	r1, #1
    50a8:	f361 0202 	bfi	r2, r1, #0, #3
    50ac:	f36f 02c5 	bfc	r2, #3, #3
    50b0:	f363 128f 	bfi	r2, r3, #6, #10
    50b4:	4621      	mov	r1, r4
    50b6:	4807      	ldr	r0, [pc, #28]	; (50d4 <fs_seek+0x50>)
    50b8:	f7fc fcc2 	bl	1a40 <log_1>
    50bc:	e7eb      	b.n	5096 <fs_seek+0x12>
		return -EBADF;
    50be:	f06f 0408 	mvn.w	r4, #8
    50c2:	e7e8      	b.n	5096 <fs_seek+0x12>
		return -ENOTSUP;
    50c4:	f06f 0485 	mvn.w	r4, #133	; 0x85
    50c8:	e7e5      	b.n	5096 <fs_seek+0x12>
    50ca:	bf00      	nop
    50cc:	00014328 	.word	0x00014328
    50d0:	00014318 	.word	0x00014318
    50d4:	0001510c 	.word	0x0001510c

000050d8 <fs_stat>:
{
    50d8:	b570      	push	{r4, r5, r6, lr}
    50da:	b082      	sub	sp, #8
	if ((abs_path == NULL) ||
    50dc:	b300      	cbz	r0, 5120 <fs_stat+0x48>
    50de:	460e      	mov	r6, r1
    50e0:	4605      	mov	r5, r0
			(strlen(abs_path) <= 1) || (abs_path[0] != '/')) {
    50e2:	f00c f835 	bl	11150 <strlen>
	if ((abs_path == NULL) ||
    50e6:	2801      	cmp	r0, #1
    50e8:	d91a      	bls.n	5120 <fs_stat+0x48>
			(strlen(abs_path) <= 1) || (abs_path[0] != '/')) {
    50ea:	782b      	ldrb	r3, [r5, #0]
    50ec:	2b2f      	cmp	r3, #47	; 0x2f
    50ee:	d117      	bne.n	5120 <fs_stat+0x48>
	rc = fs_get_mnt_point(&mp, abs_path, NULL);
    50f0:	2200      	movs	r2, #0
    50f2:	4629      	mov	r1, r5
    50f4:	a801      	add	r0, sp, #4
    50f6:	f7ff fe67 	bl	4dc8 <fs_get_mnt_point>
	if (rc < 0) {
    50fa:	1e04      	subs	r4, r0, #0
    50fc:	db23      	blt.n	5146 <fs_stat+0x6e>
	CHECKIF(mp->fs->stat == NULL) {
    50fe:	9801      	ldr	r0, [sp, #4]
    5100:	69c3      	ldr	r3, [r0, #28]
    5102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5104:	2b00      	cmp	r3, #0
    5106:	d041      	beq.n	518c <fs_stat+0xb4>
	rc = mp->fs->stat(mp, abs_path, entry);
    5108:	4632      	mov	r2, r6
    510a:	4629      	mov	r1, r5
    510c:	4798      	blx	r3
    510e:	4604      	mov	r4, r0
	if (rc == -ENOENT) {
    5110:	f110 0f02 	cmn.w	r0, #2
    5114:	d001      	beq.n	511a <fs_stat+0x42>
	} else if (rc < 0) {
    5116:	2800      	cmp	r0, #0
    5118:	db26      	blt.n	5168 <fs_stat+0x90>
}
    511a:	4620      	mov	r0, r4
    511c:	b002      	add	sp, #8
    511e:	bd70      	pop	{r4, r5, r6, pc}
    5120:	4b1c      	ldr	r3, [pc, #112]	; (5194 <fs_stat+0xbc>)
    5122:	4a1d      	ldr	r2, [pc, #116]	; (5198 <fs_stat+0xc0>)
    5124:	1a9b      	subs	r3, r3, r2
    5126:	08db      	lsrs	r3, r3, #3
		LOG_ERR("invalid file name!!");
    5128:	f04f 0100 	mov.w	r1, #0
    512c:	2201      	movs	r2, #1
    512e:	f362 0102 	bfi	r1, r2, #0, #3
    5132:	f36f 01c5 	bfc	r1, #3, #3
    5136:	f363 118f 	bfi	r1, r3, #6, #10
    513a:	4818      	ldr	r0, [pc, #96]	; (519c <fs_stat+0xc4>)
    513c:	f7fc fd14 	bl	1b68 <log_0>
		return -EINVAL;
    5140:	f06f 0415 	mvn.w	r4, #21
    5144:	e7e9      	b.n	511a <fs_stat+0x42>
    5146:	4b13      	ldr	r3, [pc, #76]	; (5194 <fs_stat+0xbc>)
    5148:	4a13      	ldr	r2, [pc, #76]	; (5198 <fs_stat+0xc0>)
    514a:	1a9b      	subs	r3, r3, r2
    514c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("mount point not found!!");
    514e:	f04f 0100 	mov.w	r1, #0
    5152:	2201      	movs	r2, #1
    5154:	f362 0102 	bfi	r1, r2, #0, #3
    5158:	f36f 01c5 	bfc	r1, #3, #3
    515c:	f363 118f 	bfi	r1, r3, #6, #10
    5160:	480f      	ldr	r0, [pc, #60]	; (51a0 <fs_stat+0xc8>)
    5162:	f7fc fd01 	bl	1b68 <log_0>
		return rc;
    5166:	e7d8      	b.n	511a <fs_stat+0x42>
    5168:	4b0a      	ldr	r3, [pc, #40]	; (5194 <fs_stat+0xbc>)
    516a:	4a0b      	ldr	r2, [pc, #44]	; (5198 <fs_stat+0xc0>)
    516c:	1a9b      	subs	r3, r3, r2
    516e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("failed get file or dir stat (%d)", rc);
    5170:	f04f 0200 	mov.w	r2, #0
    5174:	2101      	movs	r1, #1
    5176:	f361 0202 	bfi	r2, r1, #0, #3
    517a:	f36f 02c5 	bfc	r2, #3, #3
    517e:	f363 128f 	bfi	r2, r3, #6, #10
    5182:	4601      	mov	r1, r0
    5184:	4807      	ldr	r0, [pc, #28]	; (51a4 <fs_stat+0xcc>)
    5186:	f7fc fc5b 	bl	1a40 <log_1>
    518a:	e7c6      	b.n	511a <fs_stat+0x42>
		return -ENOTSUP;
    518c:	f06f 0485 	mvn.w	r4, #133	; 0x85
    5190:	e7c3      	b.n	511a <fs_stat+0x42>
    5192:	bf00      	nop
    5194:	00014328 	.word	0x00014328
    5198:	00014318 	.word	0x00014318
    519c:	00015080 	.word	0x00015080
    51a0:	00015094 	.word	0x00015094
    51a4:	00015124 	.word	0x00015124

000051a8 <fs_statvfs>:
{
    51a8:	b570      	push	{r4, r5, r6, lr}
    51aa:	b082      	sub	sp, #8
	if ((abs_path == NULL) ||
    51ac:	b1d8      	cbz	r0, 51e6 <fs_statvfs+0x3e>
    51ae:	460e      	mov	r6, r1
    51b0:	4605      	mov	r5, r0
			(strlen(abs_path) <= 1) || (abs_path[0] != '/')) {
    51b2:	f00b ffcd 	bl	11150 <strlen>
	if ((abs_path == NULL) ||
    51b6:	2801      	cmp	r0, #1
    51b8:	d915      	bls.n	51e6 <fs_statvfs+0x3e>
			(strlen(abs_path) <= 1) || (abs_path[0] != '/')) {
    51ba:	782b      	ldrb	r3, [r5, #0]
    51bc:	2b2f      	cmp	r3, #47	; 0x2f
    51be:	d112      	bne.n	51e6 <fs_statvfs+0x3e>
	rc = fs_get_mnt_point(&mp, abs_path, NULL);
    51c0:	2200      	movs	r2, #0
    51c2:	4629      	mov	r1, r5
    51c4:	a801      	add	r0, sp, #4
    51c6:	f7ff fdff 	bl	4dc8 <fs_get_mnt_point>
	if (rc < 0) {
    51ca:	1e04      	subs	r4, r0, #0
    51cc:	db1e      	blt.n	520c <fs_statvfs+0x64>
	if (mp->fs->statvfs != NULL) {
    51ce:	9801      	ldr	r0, [sp, #4]
    51d0:	69c3      	ldr	r3, [r0, #28]
    51d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    51d4:	b123      	cbz	r3, 51e0 <fs_statvfs+0x38>
		rc = mp->fs->statvfs(mp, abs_path, stat);
    51d6:	4632      	mov	r2, r6
    51d8:	4629      	mov	r1, r5
    51da:	4798      	blx	r3
		if (rc < 0) {
    51dc:	1e04      	subs	r4, r0, #0
    51de:	db26      	blt.n	522e <fs_statvfs+0x86>
}
    51e0:	4620      	mov	r0, r4
    51e2:	b002      	add	sp, #8
    51e4:	bd70      	pop	{r4, r5, r6, pc}
    51e6:	4b1b      	ldr	r3, [pc, #108]	; (5254 <fs_statvfs+0xac>)
    51e8:	4a1b      	ldr	r2, [pc, #108]	; (5258 <fs_statvfs+0xb0>)
    51ea:	1a9b      	subs	r3, r3, r2
    51ec:	08db      	lsrs	r3, r3, #3
		LOG_ERR("invalid file name!!");
    51ee:	f04f 0100 	mov.w	r1, #0
    51f2:	2201      	movs	r2, #1
    51f4:	f362 0102 	bfi	r1, r2, #0, #3
    51f8:	f36f 01c5 	bfc	r1, #3, #3
    51fc:	f363 118f 	bfi	r1, r3, #6, #10
    5200:	4816      	ldr	r0, [pc, #88]	; (525c <fs_statvfs+0xb4>)
    5202:	f7fc fcb1 	bl	1b68 <log_0>
		return -EINVAL;
    5206:	f06f 0415 	mvn.w	r4, #21
    520a:	e7e9      	b.n	51e0 <fs_statvfs+0x38>
    520c:	4b11      	ldr	r3, [pc, #68]	; (5254 <fs_statvfs+0xac>)
    520e:	4a12      	ldr	r2, [pc, #72]	; (5258 <fs_statvfs+0xb0>)
    5210:	1a9b      	subs	r3, r3, r2
    5212:	08db      	lsrs	r3, r3, #3
		LOG_ERR("mount point not found!!");
    5214:	f04f 0100 	mov.w	r1, #0
    5218:	2201      	movs	r2, #1
    521a:	f362 0102 	bfi	r1, r2, #0, #3
    521e:	f36f 01c5 	bfc	r1, #3, #3
    5222:	f363 118f 	bfi	r1, r3, #6, #10
    5226:	480e      	ldr	r0, [pc, #56]	; (5260 <fs_statvfs+0xb8>)
    5228:	f7fc fc9e 	bl	1b68 <log_0>
		return rc;
    522c:	e7d8      	b.n	51e0 <fs_statvfs+0x38>
    522e:	4b09      	ldr	r3, [pc, #36]	; (5254 <fs_statvfs+0xac>)
    5230:	4a09      	ldr	r2, [pc, #36]	; (5258 <fs_statvfs+0xb0>)
    5232:	1a9b      	subs	r3, r3, r2
    5234:	08db      	lsrs	r3, r3, #3
			LOG_ERR("failed get file or dir stat (%d)", rc);
    5236:	f04f 0200 	mov.w	r2, #0
    523a:	2101      	movs	r1, #1
    523c:	f361 0202 	bfi	r2, r1, #0, #3
    5240:	f36f 02c5 	bfc	r2, #3, #3
    5244:	f363 128f 	bfi	r2, r3, #6, #10
    5248:	4621      	mov	r1, r4
    524a:	4806      	ldr	r0, [pc, #24]	; (5264 <fs_statvfs+0xbc>)
    524c:	f7fc fbf8 	bl	1a40 <log_1>
    5250:	e7c6      	b.n	51e0 <fs_statvfs+0x38>
    5252:	bf00      	nop
    5254:	00014328 	.word	0x00014328
    5258:	00014318 	.word	0x00014318
    525c:	00015080 	.word	0x00015080
    5260:	00015094 	.word	0x00015094
    5264:	00015124 	.word	0x00015124

00005268 <fs_mount>:
{
    5268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if ((mp == NULL) || (mp->mnt_point == NULL)) {
    526a:	b1c0      	cbz	r0, 529e <fs_mount+0x36>
    526c:	4606      	mov	r6, r0
    526e:	68c0      	ldr	r0, [r0, #12]
    5270:	b1a8      	cbz	r0, 529e <fs_mount+0x36>
	len = strlen(mp->mnt_point);
    5272:	f00b ff6d 	bl	11150 <strlen>
    5276:	4605      	mov	r5, r0
	if ((len <= 1) || (mp->mnt_point[0] != '/')) {
    5278:	2801      	cmp	r0, #1
    527a:	d923      	bls.n	52c4 <fs_mount+0x5c>
    527c:	68f3      	ldr	r3, [r6, #12]
    527e:	781b      	ldrb	r3, [r3, #0]
    5280:	2b2f      	cmp	r3, #47	; 0x2f
    5282:	d11f      	bne.n	52c4 <fs_mount+0x5c>
	return z_impl_k_mutex_lock(mutex, timeout);
    5284:	f04f 32ff 	mov.w	r2, #4294967295
    5288:	f04f 33ff 	mov.w	r3, #4294967295
    528c:	485e      	ldr	r0, [pc, #376]	; (5408 <fs_mount+0x1a0>)
    528e:	f008 fda3 	bl	ddd8 <z_impl_k_mutex_lock>
	return list->head == list;
    5292:	4b5e      	ldr	r3, [pc, #376]	; (540c <fs_mount+0x1a4>)
    5294:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5296:	429c      	cmp	r4, r3
    5298:	d12c      	bne.n	52f4 <fs_mount+0x8c>
    529a:	2400      	movs	r4, #0
    529c:	e02a      	b.n	52f4 <fs_mount+0x8c>
    529e:	4b5c      	ldr	r3, [pc, #368]	; (5410 <fs_mount+0x1a8>)
    52a0:	4a5c      	ldr	r2, [pc, #368]	; (5414 <fs_mount+0x1ac>)
    52a2:	1a9b      	subs	r3, r3, r2
    52a4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("mount point not initialized!!");
    52a6:	f04f 0100 	mov.w	r1, #0
    52aa:	2201      	movs	r2, #1
    52ac:	f362 0102 	bfi	r1, r2, #0, #3
    52b0:	f36f 01c5 	bfc	r1, #3, #3
    52b4:	f363 118f 	bfi	r1, r3, #6, #10
    52b8:	4857      	ldr	r0, [pc, #348]	; (5418 <fs_mount+0x1b0>)
    52ba:	f7fc fc55 	bl	1b68 <log_0>
		return -EINVAL;
    52be:	f06f 0415 	mvn.w	r4, #21
    52c2:	e050      	b.n	5366 <fs_mount+0xfe>
    52c4:	4b52      	ldr	r3, [pc, #328]	; (5410 <fs_mount+0x1a8>)
    52c6:	4a53      	ldr	r2, [pc, #332]	; (5414 <fs_mount+0x1ac>)
    52c8:	1a9b      	subs	r3, r3, r2
    52ca:	08db      	lsrs	r3, r3, #3
		LOG_ERR("invalid mount point!!");
    52cc:	f04f 0100 	mov.w	r1, #0
    52d0:	2201      	movs	r2, #1
    52d2:	f362 0102 	bfi	r1, r2, #0, #3
    52d6:	f36f 01c5 	bfc	r1, #3, #3
    52da:	f363 118f 	bfi	r1, r3, #6, #10
    52de:	484f      	ldr	r0, [pc, #316]	; (541c <fs_mount+0x1b4>)
    52e0:	f7fc fc42 	bl	1b68 <log_0>
		return -EINVAL;
    52e4:	f06f 0415 	mvn.w	r4, #21
    52e8:	e03d      	b.n	5366 <fs_mount+0xfe>
	return (node == list->tail) ? NULL : node->next;
    52ea:	4b48      	ldr	r3, [pc, #288]	; (540c <fs_mount+0x1a4>)
    52ec:	685b      	ldr	r3, [r3, #4]
    52ee:	42a3      	cmp	r3, r4
    52f0:	d01e      	beq.n	5330 <fs_mount+0xc8>
    52f2:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_NODE(&fs_mnt_list, node) {
    52f4:	b1e4      	cbz	r4, 5330 <fs_mount+0xc8>
		if (len != itr->mountp_len) {
    52f6:	69a3      	ldr	r3, [r4, #24]
    52f8:	42ab      	cmp	r3, r5
    52fa:	d1f6      	bne.n	52ea <fs_mount+0x82>
		if (strncmp(mp->mnt_point, itr->mnt_point, len) == 0) {
    52fc:	462a      	mov	r2, r5
    52fe:	68e1      	ldr	r1, [r4, #12]
    5300:	68f0      	ldr	r0, [r6, #12]
    5302:	f00b ff41 	bl	11188 <strncmp>
    5306:	2800      	cmp	r0, #0
    5308:	d1ef      	bne.n	52ea <fs_mount+0x82>
    530a:	4b41      	ldr	r3, [pc, #260]	; (5410 <fs_mount+0x1a8>)
    530c:	4a41      	ldr	r2, [pc, #260]	; (5414 <fs_mount+0x1ac>)
    530e:	1a9b      	subs	r3, r3, r2
    5310:	08db      	lsrs	r3, r3, #3
			LOG_ERR("mount point already exists!!");
    5312:	f04f 0100 	mov.w	r1, #0
    5316:	2201      	movs	r2, #1
    5318:	f362 0102 	bfi	r1, r2, #0, #3
    531c:	f36f 01c5 	bfc	r1, #3, #3
    5320:	f363 118f 	bfi	r1, r3, #6, #10
    5324:	483e      	ldr	r0, [pc, #248]	; (5420 <fs_mount+0x1b8>)
    5326:	f7fc fc1f 	bl	1b68 <log_0>
			rc = -EBUSY;
    532a:	f06f 040f 	mvn.w	r4, #15
			goto mount_err;
    532e:	e017      	b.n	5360 <fs_mount+0xf8>
	fs = fs_type_get(mp->type);
    5330:	68b4      	ldr	r4, [r6, #8]
    5332:	4620      	mov	r0, r4
    5334:	f00b ffe5 	bl	11302 <fs_type_get>
	if (fs == NULL) {
    5338:	4607      	mov	r7, r0
    533a:	b1b0      	cbz	r0, 536a <fs_mount+0x102>
	CHECKIF(fs->mount == NULL) {
    533c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    533e:	b33b      	cbz	r3, 5390 <fs_mount+0x128>
	if (fs->unmount == NULL) {
    5340:	6b03      	ldr	r3, [r0, #48]	; 0x30
    5342:	2b00      	cmp	r3, #0
    5344:	d038      	beq.n	53b8 <fs_mount+0x150>
	rc = fs->mount(mp);
    5346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    5348:	4630      	mov	r0, r6
    534a:	4798      	blx	r3
	if (rc < 0) {
    534c:	1e04      	subs	r4, r0, #0
    534e:	db49      	blt.n	53e4 <fs_mount+0x17c>
	mp->mountp_len = len;
    5350:	61b5      	str	r5, [r6, #24]
	mp->fs = fs;
    5352:	61f7      	str	r7, [r6, #28]
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
    5354:	4b2d      	ldr	r3, [pc, #180]	; (540c <fs_mount+0x1a4>)
    5356:	685a      	ldr	r2, [r3, #4]

	node->next = list;
    5358:	6033      	str	r3, [r6, #0]
	node->prev = tail;
    535a:	6072      	str	r2, [r6, #4]

	tail->next = node;
    535c:	6016      	str	r6, [r2, #0]
	list->tail = node;
    535e:	605e      	str	r6, [r3, #4]
	return z_impl_k_mutex_unlock(mutex);
    5360:	4829      	ldr	r0, [pc, #164]	; (5408 <fs_mount+0x1a0>)
    5362:	f008 fdc3 	bl	deec <z_impl_k_mutex_unlock>
}
    5366:	4620      	mov	r0, r4
    5368:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    536a:	4b29      	ldr	r3, [pc, #164]	; (5410 <fs_mount+0x1a8>)
    536c:	4a29      	ldr	r2, [pc, #164]	; (5414 <fs_mount+0x1ac>)
    536e:	1a9b      	subs	r3, r3, r2
    5370:	08db      	lsrs	r3, r3, #3
		LOG_ERR("requested file system type not registered!!");
    5372:	f04f 0100 	mov.w	r1, #0
    5376:	2201      	movs	r2, #1
    5378:	f362 0102 	bfi	r1, r2, #0, #3
    537c:	f36f 01c5 	bfc	r1, #3, #3
    5380:	f363 118f 	bfi	r1, r3, #6, #10
    5384:	4827      	ldr	r0, [pc, #156]	; (5424 <fs_mount+0x1bc>)
    5386:	f7fc fbef 	bl	1b68 <log_0>
		rc = -ENOENT;
    538a:	f06f 0401 	mvn.w	r4, #1
		goto mount_err;
    538e:	e7e7      	b.n	5360 <fs_mount+0xf8>
    5390:	4b1f      	ldr	r3, [pc, #124]	; (5410 <fs_mount+0x1a8>)
    5392:	4a20      	ldr	r2, [pc, #128]	; (5414 <fs_mount+0x1ac>)
    5394:	1a9b      	subs	r3, r3, r2
    5396:	08db      	lsrs	r3, r3, #3
		LOG_ERR("fs type %d does not support mounting", mp->type);
    5398:	f04f 0200 	mov.w	r2, #0
    539c:	2101      	movs	r1, #1
    539e:	f361 0202 	bfi	r2, r1, #0, #3
    53a2:	f36f 02c5 	bfc	r2, #3, #3
    53a6:	f363 128f 	bfi	r2, r3, #6, #10
    53aa:	4621      	mov	r1, r4
    53ac:	481e      	ldr	r0, [pc, #120]	; (5428 <fs_mount+0x1c0>)
    53ae:	f7fc fb47 	bl	1a40 <log_1>
		rc = -ENOTSUP;
    53b2:	f06f 0485 	mvn.w	r4, #133	; 0x85
		goto mount_err;
    53b6:	e7d3      	b.n	5360 <fs_mount+0xf8>
    53b8:	4b15      	ldr	r3, [pc, #84]	; (5410 <fs_mount+0x1a8>)
    53ba:	4a16      	ldr	r2, [pc, #88]	; (5414 <fs_mount+0x1ac>)
    53bc:	1a9b      	subs	r3, r3, r2
    53be:	08db      	lsrs	r3, r3, #3
		LOG_WRN("mount path %s is not unmountable",
    53c0:	f04f 0400 	mov.w	r4, #0
    53c4:	2202      	movs	r2, #2
    53c6:	f362 0402 	bfi	r4, r2, #0, #3
    53ca:	f36f 04c5 	bfc	r4, #3, #3
    53ce:	f363 148f 	bfi	r4, r3, #6, #10
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
    53d2:	68f0      	ldr	r0, [r6, #12]
    53d4:	f7fc f9ba 	bl	174c <z_log_strdup>
    53d8:	4601      	mov	r1, r0
    53da:	4622      	mov	r2, r4
    53dc:	4813      	ldr	r0, [pc, #76]	; (542c <fs_mount+0x1c4>)
    53de:	f7fc fb2f 	bl	1a40 <log_1>
    53e2:	e7b0      	b.n	5346 <fs_mount+0xde>
    53e4:	4b0a      	ldr	r3, [pc, #40]	; (5410 <fs_mount+0x1a8>)
    53e6:	4a0b      	ldr	r2, [pc, #44]	; (5414 <fs_mount+0x1ac>)
    53e8:	1a9b      	subs	r3, r3, r2
    53ea:	08db      	lsrs	r3, r3, #3
		LOG_ERR("fs mount error (%d)", rc);
    53ec:	f04f 0200 	mov.w	r2, #0
    53f0:	2101      	movs	r1, #1
    53f2:	f361 0202 	bfi	r2, r1, #0, #3
    53f6:	f36f 02c5 	bfc	r2, #3, #3
    53fa:	f363 128f 	bfi	r2, r3, #6, #10
    53fe:	4621      	mov	r1, r4
    5400:	480b      	ldr	r0, [pc, #44]	; (5430 <fs_mount+0x1c8>)
    5402:	f7fc fb1d 	bl	1a40 <log_1>
		goto mount_err;
    5406:	e7ab      	b.n	5360 <fs_mount+0xf8>
    5408:	200019dc 	.word	0x200019dc
    540c:	200019d4 	.word	0x200019d4
    5410:	00014328 	.word	0x00014328
    5414:	00014318 	.word	0x00014318
    5418:	00015148 	.word	0x00015148
    541c:	00015168 	.word	0x00015168
    5420:	00015180 	.word	0x00015180
    5424:	000151a0 	.word	0x000151a0
    5428:	000151cc 	.word	0x000151cc
    542c:	000151f4 	.word	0x000151f4
    5430:	00015218 	.word	0x00015218

00005434 <fs_register>:
{
    5434:	b538      	push	{r3, r4, r5, lr}
    5436:	4604      	mov	r4, r0
    5438:	460d      	mov	r5, r1
	return z_impl_k_mutex_lock(mutex, timeout);
    543a:	f04f 32ff 	mov.w	r2, #4294967295
    543e:	f04f 33ff 	mov.w	r3, #4294967295
    5442:	480a      	ldr	r0, [pc, #40]	; (546c <fs_register+0x38>)
    5444:	f008 fcc8 	bl	ddd8 <z_impl_k_mutex_lock>
	if (fs_type_get(type) != NULL) {
    5448:	4620      	mov	r0, r4
    544a:	f00b ff5a 	bl	11302 <fs_type_get>
    544e:	b948      	cbnz	r0, 5464 <fs_register+0x30>
		rc = registry_add(type, fs);
    5450:	4629      	mov	r1, r5
    5452:	4620      	mov	r0, r4
    5454:	f7ff fc8a 	bl	4d6c <registry_add>
    5458:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    545a:	4804      	ldr	r0, [pc, #16]	; (546c <fs_register+0x38>)
    545c:	f008 fd46 	bl	deec <z_impl_k_mutex_unlock>
}
    5460:	4620      	mov	r0, r4
    5462:	bd38      	pop	{r3, r4, r5, pc}
		rc = -EALREADY;
    5464:	f06f 0477 	mvn.w	r4, #119	; 0x77
    5468:	e7f7      	b.n	545a <fs_register+0x26>
    546a:	bf00      	nop
    546c:	200019dc 	.word	0x200019dc

00005470 <fs_impl_strip_prefix>:
const char *fs_impl_strip_prefix(const char *path,
				 const struct fs_mount_t *mp)
{
	static const char *const root = "/";

	if ((path == NULL) || (mp == NULL)) {
    5470:	4603      	mov	r3, r0
    5472:	b128      	cbz	r0, 5480 <fs_impl_strip_prefix+0x10>
    5474:	b129      	cbz	r1, 5482 <fs_impl_strip_prefix+0x12>
		return path;
	}

	path += mp->mountp_len;
    5476:	698a      	ldr	r2, [r1, #24]
    5478:	4410      	add	r0, r2
	return *path ? path : root;
    547a:	5c9b      	ldrb	r3, [r3, r2]
    547c:	b113      	cbz	r3, 5484 <fs_impl_strip_prefix+0x14>
    547e:	4770      	bx	lr
    5480:	4770      	bx	lr
    5482:	4770      	bx	lr
    5484:	4800      	ldr	r0, [pc, #0]	; (5488 <fs_impl_strip_prefix+0x18>)
}
    5486:	4770      	bx	lr
    5488:	00015230 	.word	0x00015230

0000548c <littlefs_init>:
		}
	}
}

static int littlefs_init(const struct device *dev)
{
    548c:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);
	static struct fs_mount_t *partitions[] = {
		DT_INST_FOREACH_STATUS_OKAY(REFERENCE_MOUNT)
	};

	int rc = fs_register(FS_LITTLEFS, &littlefs_fs);
    548e:	4902      	ldr	r1, [pc, #8]	; (5498 <littlefs_init+0xc>)
    5490:	2001      	movs	r0, #1
    5492:	f7ff ffcf 	bl	5434 <fs_register>
			mount_init(*mpi++);
		}
	}

	return rc;
}
    5496:	bd08      	pop	{r3, pc}
    5498:	000153a0 	.word	0x000153a0

0000549c <get_block_size>:
{
    549c:	b500      	push	{lr}
    549e:	b083      	sub	sp, #12
	struct get_page_ctx ctx = {
    54a0:	9000      	str	r0, [sp, #0]
    54a2:	2300      	movs	r3, #0
    54a4:	9301      	str	r3, [sp, #4]
	const struct device *dev = flash_area_get_device(fa);
    54a6:	f00b fd9b 	bl	10fe0 <flash_area_get_device>
	flash_page_foreach(dev, get_page_cb, &ctx);
    54aa:	466a      	mov	r2, sp
    54ac:	4903      	ldr	r1, [pc, #12]	; (54bc <get_block_size+0x20>)
    54ae:	f00c fc0f 	bl	11cd0 <flash_page_foreach>
}
    54b2:	9801      	ldr	r0, [sp, #4]
    54b4:	b003      	add	sp, #12
    54b6:	f85d fb04 	ldr.w	pc, [sp], #4
    54ba:	bf00      	nop
    54bc:	00011411 	.word	0x00011411

000054c0 <littlefs_mount>:
{
    54c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    54c4:	b08d      	sub	sp, #52	; 0x34
    54c6:	4605      	mov	r5, r0
	struct fs_littlefs *fs = mountp->fs_data;
    54c8:	6904      	ldr	r4, [r0, #16]
	unsigned int area_id = (uintptr_t)mountp->storage_dev;
    54ca:	6947      	ldr	r7, [r0, #20]
    54cc:	4bc3      	ldr	r3, [pc, #780]	; (57dc <littlefs_mount+0x31c>)
    54ce:	4ac4      	ldr	r2, [pc, #784]	; (57e0 <littlefs_mount+0x320>)
    54d0:	1a9b      	subs	r3, r3, r2
    54d2:	08db      	lsrs	r3, r3, #3
	LOG_INF("LittleFS version %u.%u, disk version %u.%u",
    54d4:	f04f 0c00 	mov.w	ip, #0
    54d8:	2203      	movs	r2, #3
    54da:	f362 0c02 	bfi	ip, r2, #0, #3
    54de:	f36f 0cc5 	bfc	ip, #3, #3
    54e2:	f363 1c8f 	bfi	ip, r3, #6, #10
    54e6:	4bbf      	ldr	r3, [pc, #764]	; (57e4 <littlefs_mount+0x324>)
    54e8:	ae07      	add	r6, sp, #28
    54ea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    54ec:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    54f0:	4663      	mov	r3, ip
    54f2:	2204      	movs	r2, #4
    54f4:	4631      	mov	r1, r6
    54f6:	48bc      	ldr	r0, [pc, #752]	; (57e8 <littlefs_mount+0x328>)
    54f8:	f7fc fb14 	bl	1b24 <log_n>
	if (fs->area) {
    54fc:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    5500:	2b00      	cmp	r3, #0
    5502:	f040 8167 	bne.w	57d4 <littlefs_mount+0x314>
	k_mutex_init(&fs->mutex);
    5506:	f104 06ec 	add.w	r6, r4, #236	; 0xec
	return z_impl_k_mutex_init(mutex);
    550a:	4630      	mov	r0, r6
    550c:	f00e fa2d 	bl	1396a <z_impl_k_mutex_init>
	return z_impl_k_mutex_lock(mutex, timeout);
    5510:	f04f 32ff 	mov.w	r2, #4294967295
    5514:	f04f 33ff 	mov.w	r3, #4294967295
    5518:	4630      	mov	r0, r6
    551a:	f008 fc5d 	bl	ddd8 <z_impl_k_mutex_lock>
	ret = flash_area_open(area_id, &fs->area);
    551e:	f104 01e8 	add.w	r1, r4, #232	; 0xe8
    5522:	b2f8      	uxtb	r0, r7
    5524:	f7fe fb36 	bl	3b94 <flash_area_open>
	if ((ret < 0) || (fs->area == NULL)) {
    5528:	2800      	cmp	r0, #0
    552a:	db26      	blt.n	557a <littlefs_mount+0xba>
    552c:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
    5530:	b318      	cbz	r0, 557a <littlefs_mount+0xba>
	dev = flash_area_get_device(fs->area);
    5532:	f00b fd55 	bl	10fe0 <flash_area_get_device>
	if (dev == NULL) {
    5536:	9004      	str	r0, [sp, #16]
    5538:	2800      	cmp	r0, #0
    553a:	d03b      	beq.n	55b4 <littlefs_mount+0xf4>
	lfs_size_t read_size = lcp->read_size;
    553c:	f8d4 9014 	ldr.w	r9, [r4, #20]
	if (read_size == 0) {
    5540:	f1b9 0f00 	cmp.w	r9, #0
    5544:	d101      	bne.n	554a <littlefs_mount+0x8a>
		read_size = CONFIG_FS_LITTLEFS_READ_SIZE;
    5546:	f04f 0910 	mov.w	r9, #16
	lfs_size_t prog_size = lcp->prog_size;
    554a:	f8d4 8018 	ldr.w	r8, [r4, #24]
	if (prog_size == 0) {
    554e:	f1b8 0f00 	cmp.w	r8, #0
    5552:	d101      	bne.n	5558 <littlefs_mount+0x98>
		prog_size = CONFIG_FS_LITTLEFS_PROG_SIZE;
    5554:	f04f 0810 	mov.w	r8, #16
	lfs_size_t block_size = lcp->block_size;
    5558:	69e7      	ldr	r7, [r4, #28]
	if (block_size == 0) {
    555a:	2f00      	cmp	r7, #0
    555c:	d044      	beq.n	55e8 <littlefs_mount+0x128>
	if (block_size == 0) {
    555e:	2f00      	cmp	r7, #0
    5560:	f000 8135 	beq.w	57ce <littlefs_mount+0x30e>
	int32_t block_cycles = lcp->block_cycles;
    5564:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
	if (block_cycles == 0) {
    5568:	f1bb 0f00 	cmp.w	fp, #0
    556c:	d042      	beq.n	55f4 <littlefs_mount+0x134>
	if (block_cycles <= 0) {
    556e:	f1bb 0f00 	cmp.w	fp, #0
    5572:	dc41      	bgt.n	55f8 <littlefs_mount+0x138>
		block_cycles = -1;
    5574:	f04f 3bff 	mov.w	fp, #4294967295
    5578:	e03e      	b.n	55f8 <littlefs_mount+0x138>
    557a:	4b98      	ldr	r3, [pc, #608]	; (57dc <littlefs_mount+0x31c>)
    557c:	4a98      	ldr	r2, [pc, #608]	; (57e0 <littlefs_mount+0x320>)
    557e:	1a9b      	subs	r3, r3, r2
    5580:	08db      	lsrs	r3, r3, #3
		LOG_ERR("can't open flash area %d", area_id);
    5582:	f04f 0200 	mov.w	r2, #0
    5586:	2101      	movs	r1, #1
    5588:	f361 0202 	bfi	r2, r1, #0, #3
    558c:	f36f 02c5 	bfc	r2, #3, #3
    5590:	f363 128f 	bfi	r2, r3, #6, #10
    5594:	4639      	mov	r1, r7
    5596:	4895      	ldr	r0, [pc, #596]	; (57ec <littlefs_mount+0x32c>)
    5598:	f7fc fa52 	bl	1a40 <log_1>
		ret = -ENODEV;
    559c:	f06f 0712 	mvn.w	r7, #18
		fs->area = NULL;
    55a0:	2300      	movs	r3, #0
    55a2:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8
	return z_impl_k_mutex_unlock(mutex);
    55a6:	4630      	mov	r0, r6
    55a8:	f008 fca0 	bl	deec <z_impl_k_mutex_unlock>
}
    55ac:	4638      	mov	r0, r7
    55ae:	b00d      	add	sp, #52	; 0x34
    55b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    55b4:	4b89      	ldr	r3, [pc, #548]	; (57dc <littlefs_mount+0x31c>)
    55b6:	4a8a      	ldr	r2, [pc, #552]	; (57e0 <littlefs_mount+0x320>)
    55b8:	1a9b      	subs	r3, r3, r2
    55ba:	08db      	lsrs	r3, r3, #3
		LOG_ERR("can't get flash device: %s", log_strdup(fs->area->fa_dev_name));
    55bc:	f04f 0500 	mov.w	r5, #0
    55c0:	2201      	movs	r2, #1
    55c2:	f362 0502 	bfi	r5, r2, #0, #3
    55c6:	f36f 05c5 	bfc	r5, #3, #3
    55ca:	f363 158f 	bfi	r5, r3, #6, #10
    55ce:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    55d2:	68d8      	ldr	r0, [r3, #12]
    55d4:	f7fc f8ba 	bl	174c <z_log_strdup>
    55d8:	4601      	mov	r1, r0
    55da:	462a      	mov	r2, r5
    55dc:	4884      	ldr	r0, [pc, #528]	; (57f0 <littlefs_mount+0x330>)
    55de:	f7fc fa2f 	bl	1a40 <log_1>
		ret = -ENODEV;
    55e2:	f06f 0712 	mvn.w	r7, #18
    55e6:	e7db      	b.n	55a0 <littlefs_mount+0xe0>
		block_size = get_block_size(fs->area);
    55e8:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
    55ec:	f7ff ff56 	bl	549c <get_block_size>
    55f0:	4607      	mov	r7, r0
    55f2:	e7b4      	b.n	555e <littlefs_mount+0x9e>
		block_cycles = CONFIG_FS_LITTLEFS_BLOCK_CYCLES;
    55f4:	f44f 7b00 	mov.w	fp, #512	; 0x200
	lfs_size_t cache_size = lcp->cache_size;
    55f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    55fa:	9302      	str	r3, [sp, #8]
	if (cache_size == 0) {
    55fc:	b90b      	cbnz	r3, 5602 <littlefs_mount+0x142>
		cache_size = CONFIG_FS_LITTLEFS_CACHE_SIZE;
    55fe:	2340      	movs	r3, #64	; 0x40
    5600:	9302      	str	r3, [sp, #8]
	lfs_size_t lookahead_size = lcp->lookahead_size;
    5602:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5604:	9301      	str	r3, [sp, #4]
	if (lookahead_size == 0) {
    5606:	b90b      	cbnz	r3, 560c <littlefs_mount+0x14c>
		lookahead_size = CONFIG_FS_LITTLEFS_LOOKAHEAD_SIZE;
    5608:	2320      	movs	r3, #32
    560a:	9301      	str	r3, [sp, #4]
	lfs_size_t block_count = fs->area->fa_size / block_size;
    560c:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    5610:	689b      	ldr	r3, [r3, #8]
    5612:	fbb3 f3f7 	udiv	r3, r3, r7
    5616:	9303      	str	r3, [sp, #12]
    5618:	4b70      	ldr	r3, [pc, #448]	; (57dc <littlefs_mount+0x31c>)
    561a:	4a71      	ldr	r2, [pc, #452]	; (57e0 <littlefs_mount+0x320>)
    561c:	1a9b      	subs	r3, r3, r2
    561e:	08da      	lsrs	r2, r3, #3
	LOG_INF("FS at %s:0x%x is %u 0x%x-byte blocks with %u cycle",
    5620:	f04f 0a00 	mov.w	sl, #0
    5624:	2103      	movs	r1, #3
    5626:	f361 0a02 	bfi	sl, r1, #0, #3
    562a:	f36f 0ac5 	bfc	sl, #3, #3
    562e:	9205      	str	r2, [sp, #20]
    5630:	f362 1a8f 	bfi	sl, r2, #6, #10
    5634:	9804      	ldr	r0, [sp, #16]
    5636:	6800      	ldr	r0, [r0, #0]
    5638:	f7fc f888 	bl	174c <z_log_strdup>
    563c:	9007      	str	r0, [sp, #28]
    563e:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    5642:	685b      	ldr	r3, [r3, #4]
    5644:	9308      	str	r3, [sp, #32]
    5646:	9b03      	ldr	r3, [sp, #12]
    5648:	9309      	str	r3, [sp, #36]	; 0x24
    564a:	970a      	str	r7, [sp, #40]	; 0x28
    564c:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    5650:	4653      	mov	r3, sl
    5652:	2205      	movs	r2, #5
    5654:	f10d 0c1c 	add.w	ip, sp, #28
    5658:	4661      	mov	r1, ip
    565a:	4866      	ldr	r0, [pc, #408]	; (57f4 <littlefs_mount+0x334>)
    565c:	f7fc fa62 	bl	1b24 <log_n>
	LOG_INF("sizes: rd %u ; pr %u ; ca %u ; la %u",
    5660:	f04f 0300 	mov.w	r3, #0
    5664:	2003      	movs	r0, #3
    5666:	f360 0302 	bfi	r3, r0, #0, #3
    566a:	f36f 03c5 	bfc	r3, #3, #3
    566e:	9905      	ldr	r1, [sp, #20]
    5670:	f361 138f 	bfi	r3, r1, #6, #10
    5674:	f8cd 901c 	str.w	r9, [sp, #28]
    5678:	f8cd 8020 	str.w	r8, [sp, #32]
    567c:	9a02      	ldr	r2, [sp, #8]
    567e:	9209      	str	r2, [sp, #36]	; 0x24
    5680:	9901      	ldr	r1, [sp, #4]
    5682:	910a      	str	r1, [sp, #40]	; 0x28
    5684:	2204      	movs	r2, #4
    5686:	a807      	add	r0, sp, #28
    5688:	4601      	mov	r1, r0
    568a:	485b      	ldr	r0, [pc, #364]	; (57f8 <littlefs_mount+0x338>)
    568c:	f7fc fa4a 	bl	1b24 <log_n>
	lcp->context = (void *)fs->area;
    5690:	f8d4 30e8 	ldr.w	r3, [r4, #232]	; 0xe8
    5694:	6023      	str	r3, [r4, #0]
	lcp->read = lfs_api_read;
    5696:	4b59      	ldr	r3, [pc, #356]	; (57fc <littlefs_mount+0x33c>)
    5698:	6063      	str	r3, [r4, #4]
	lcp->prog = lfs_api_prog;
    569a:	4b59      	ldr	r3, [pc, #356]	; (5800 <littlefs_mount+0x340>)
    569c:	60a3      	str	r3, [r4, #8]
	lcp->erase = lfs_api_erase;
    569e:	4b59      	ldr	r3, [pc, #356]	; (5804 <littlefs_mount+0x344>)
    56a0:	60e3      	str	r3, [r4, #12]
	lcp->sync = lfs_api_sync;
    56a2:	4b59      	ldr	r3, [pc, #356]	; (5808 <littlefs_mount+0x348>)
    56a4:	6123      	str	r3, [r4, #16]
	lcp->read_size = read_size;
    56a6:	f8c4 9014 	str.w	r9, [r4, #20]
	lcp->prog_size = prog_size;
    56aa:	f8c4 8018 	str.w	r8, [r4, #24]
	lcp->block_size = block_size;
    56ae:	61e7      	str	r7, [r4, #28]
	lcp->block_count = block_count;
    56b0:	9b03      	ldr	r3, [sp, #12]
    56b2:	6223      	str	r3, [r4, #32]
	lcp->block_cycles = block_cycles;
    56b4:	f8c4 b024 	str.w	fp, [r4, #36]	; 0x24
	lcp->cache_size = cache_size;
    56b8:	9a02      	ldr	r2, [sp, #8]
    56ba:	62a2      	str	r2, [r4, #40]	; 0x28
	lcp->lookahead_size = lookahead_size;
    56bc:	9901      	ldr	r1, [sp, #4]
    56be:	62e1      	str	r1, [r4, #44]	; 0x2c
	ret = lfs_mount(&fs->lfs, &fs->cfg);
    56c0:	f104 0870 	add.w	r8, r4, #112	; 0x70
    56c4:	4621      	mov	r1, r4
    56c6:	4640      	mov	r0, r8
    56c8:	f006 f96e 	bl	b9a8 <lfs_mount>
	if (ret < 0 &&
    56cc:	1e07      	subs	r7, r0, #0
    56ce:	da04      	bge.n	56da <littlefs_mount+0x21a>
	    (mountp->flags & FS_MOUNT_FLAG_NO_FORMAT) == 0) {
    56d0:	f895 3020 	ldrb.w	r3, [r5, #32]
	if (ret < 0 &&
    56d4:	f013 0f01 	tst.w	r3, #1
    56d8:	d018      	beq.n	570c <littlefs_mount+0x24c>
    56da:	4b40      	ldr	r3, [pc, #256]	; (57dc <littlefs_mount+0x31c>)
    56dc:	4a40      	ldr	r2, [pc, #256]	; (57e0 <littlefs_mount+0x320>)
    56de:	1a9b      	subs	r3, r3, r2
    56e0:	08db      	lsrs	r3, r3, #3
	LOG_INF("%s mounted", log_strdup(mountp->mnt_point));
    56e2:	f04f 0800 	mov.w	r8, #0
    56e6:	2203      	movs	r2, #3
    56e8:	f362 0802 	bfi	r8, r2, #0, #3
    56ec:	f36f 08c5 	bfc	r8, #3, #3
    56f0:	f363 188f 	bfi	r8, r3, #6, #10
    56f4:	68e8      	ldr	r0, [r5, #12]
    56f6:	f7fc f829 	bl	174c <z_log_strdup>
    56fa:	4601      	mov	r1, r0
    56fc:	4642      	mov	r2, r8
    56fe:	4843      	ldr	r0, [pc, #268]	; (580c <littlefs_mount+0x34c>)
    5700:	f7fc f99e 	bl	1a40 <log_1>
	if (ret < 0) {
    5704:	2f00      	cmp	r7, #0
    5706:	f6bf af4e 	bge.w	55a6 <littlefs_mount+0xe6>
    570a:	e749      	b.n	55a0 <littlefs_mount+0xe0>
    570c:	4b33      	ldr	r3, [pc, #204]	; (57dc <littlefs_mount+0x31c>)
    570e:	4a34      	ldr	r2, [pc, #208]	; (57e0 <littlefs_mount+0x320>)
    5710:	1a9b      	subs	r3, r3, r2
    5712:	08db      	lsrs	r3, r3, #3
		LOG_WRN("can't mount (LFS %d); formatting", ret);
    5714:	f04f 0200 	mov.w	r2, #0
    5718:	2102      	movs	r1, #2
    571a:	f361 0202 	bfi	r2, r1, #0, #3
    571e:	f36f 02c5 	bfc	r2, #3, #3
    5722:	f363 128f 	bfi	r2, r3, #6, #10
    5726:	4639      	mov	r1, r7
    5728:	4839      	ldr	r0, [pc, #228]	; (5810 <littlefs_mount+0x350>)
    572a:	f7fc f989 	bl	1a40 <log_1>
		if ((mountp->flags & FS_MOUNT_FLAG_READ_ONLY) == 0) {
    572e:	f895 3020 	ldrb.w	r3, [r5, #32]
    5732:	f013 0f02 	tst.w	r3, #2
    5736:	d137      	bne.n	57a8 <littlefs_mount+0x2e8>
			ret = lfs_format(&fs->lfs, &fs->cfg);
    5738:	4621      	mov	r1, r4
    573a:	4640      	mov	r0, r8
    573c:	f007 fea6 	bl	d48c <lfs_format>
			if (ret < 0) {
    5740:	1e07      	subs	r7, r0, #0
    5742:	db1b      	blt.n	577c <littlefs_mount+0x2bc>
		ret = lfs_mount(&fs->lfs, &fs->cfg);
    5744:	4621      	mov	r1, r4
    5746:	4640      	mov	r0, r8
    5748:	f006 f92e 	bl	b9a8 <lfs_mount>
		if (ret < 0) {
    574c:	1e07      	subs	r7, r0, #0
    574e:	dac4      	bge.n	56da <littlefs_mount+0x21a>
    5750:	4b22      	ldr	r3, [pc, #136]	; (57dc <littlefs_mount+0x31c>)
    5752:	4a23      	ldr	r2, [pc, #140]	; (57e0 <littlefs_mount+0x320>)
    5754:	1a9b      	subs	r3, r3, r2
    5756:	08db      	lsrs	r3, r3, #3
			LOG_ERR("remount after format failed (LFS %d)", ret);
    5758:	f04f 0200 	mov.w	r2, #0
    575c:	2101      	movs	r1, #1
    575e:	f361 0202 	bfi	r2, r1, #0, #3
    5762:	f36f 02c5 	bfc	r2, #3, #3
    5766:	f363 128f 	bfi	r2, r3, #6, #10
    576a:	4639      	mov	r1, r7
    576c:	4829      	ldr	r0, [pc, #164]	; (5814 <littlefs_mount+0x354>)
    576e:	f7fc f967 	bl	1a40 <log_1>
			ret = lfs_to_errno(ret);
    5772:	4638      	mov	r0, r7
    5774:	f00b fdcd 	bl	11312 <lfs_to_errno>
    5778:	4607      	mov	r7, r0
			goto out;
    577a:	e7c3      	b.n	5704 <littlefs_mount+0x244>
    577c:	4b17      	ldr	r3, [pc, #92]	; (57dc <littlefs_mount+0x31c>)
    577e:	4a18      	ldr	r2, [pc, #96]	; (57e0 <littlefs_mount+0x320>)
    5780:	1a9b      	subs	r3, r3, r2
    5782:	08db      	lsrs	r3, r3, #3
				LOG_ERR("format failed (LFS %d)", ret);
    5784:	f04f 0200 	mov.w	r2, #0
    5788:	2101      	movs	r1, #1
    578a:	f361 0202 	bfi	r2, r1, #0, #3
    578e:	f36f 02c5 	bfc	r2, #3, #3
    5792:	f363 128f 	bfi	r2, r3, #6, #10
    5796:	4639      	mov	r1, r7
    5798:	481f      	ldr	r0, [pc, #124]	; (5818 <littlefs_mount+0x358>)
    579a:	f7fc f951 	bl	1a40 <log_1>
				ret = lfs_to_errno(ret);
    579e:	4638      	mov	r0, r7
    57a0:	f00b fdb7 	bl	11312 <lfs_to_errno>
    57a4:	4607      	mov	r7, r0
				goto out;
    57a6:	e7ad      	b.n	5704 <littlefs_mount+0x244>
    57a8:	4b0c      	ldr	r3, [pc, #48]	; (57dc <littlefs_mount+0x31c>)
    57aa:	4a0d      	ldr	r2, [pc, #52]	; (57e0 <littlefs_mount+0x320>)
    57ac:	1a9b      	subs	r3, r3, r2
    57ae:	08db      	lsrs	r3, r3, #3
			LOG_ERR("can not format read-only system");
    57b0:	f04f 0100 	mov.w	r1, #0
    57b4:	2201      	movs	r2, #1
    57b6:	f362 0102 	bfi	r1, r2, #0, #3
    57ba:	f36f 01c5 	bfc	r1, #3, #3
    57be:	f363 118f 	bfi	r1, r3, #6, #10
    57c2:	4816      	ldr	r0, [pc, #88]	; (581c <littlefs_mount+0x35c>)
    57c4:	f7fc f9d0 	bl	1b68 <log_0>
			ret = -EROFS;
    57c8:	f06f 071d 	mvn.w	r7, #29
    57cc:	e6e8      	b.n	55a0 <littlefs_mount+0xe0>
		ret = -EINVAL;
    57ce:	f06f 0715 	mvn.w	r7, #21
    57d2:	e6e5      	b.n	55a0 <littlefs_mount+0xe0>
		return -EBUSY;
    57d4:	f06f 070f 	mvn.w	r7, #15
    57d8:	e6e8      	b.n	55ac <littlefs_mount+0xec>
    57da:	bf00      	nop
    57dc:	00014330 	.word	0x00014330
    57e0:	00014318 	.word	0x00014318
    57e4:	00014428 	.word	0x00014428
    57e8:	00015234 	.word	0x00015234
    57ec:	00015260 	.word	0x00015260
    57f0:	0001527c 	.word	0x0001527c
    57f4:	00015298 	.word	0x00015298
    57f8:	000152cc 	.word	0x000152cc
    57fc:	000114a1 	.word	0x000114a1
    5800:	00011487 	.word	0x00011487
    5804:	00011473 	.word	0x00011473
    5808:	000113f1 	.word	0x000113f1
    580c:	00015378 	.word	0x00015378
    5810:	000152f4 	.word	0x000152f4
    5814:	00015350 	.word	0x00015350
    5818:	00015318 	.word	0x00015318
    581c:	00015330 	.word	0x00015330

00005820 <release_file_data>:
{
    5820:	b510      	push	{r4, lr}
    5822:	4604      	mov	r4, r0
	struct lfs_file_data *fdp = fp->filep;
    5824:	6803      	ldr	r3, [r0, #0]
	if (fdp->config.buffer) {
    5826:	6d5a      	ldr	r2, [r3, #84]	; 0x54
    5828:	b11a      	cbz	r2, 5832 <release_file_data+0x12>
	k_heap_free(&file_cache_heap, buf);
    582a:	6e19      	ldr	r1, [r3, #96]	; 0x60
    582c:	4804      	ldr	r0, [pc, #16]	; (5840 <release_file_data+0x20>)
    582e:	f00d ffbb 	bl	137a8 <k_heap_free>
	k_mem_slab_free(&file_data_pool, &fp->filep);
    5832:	4621      	mov	r1, r4
    5834:	4803      	ldr	r0, [pc, #12]	; (5844 <release_file_data+0x24>)
    5836:	f00d fff9 	bl	1382c <k_mem_slab_free>
	fp->filep = NULL;
    583a:	2300      	movs	r3, #0
    583c:	6023      	str	r3, [r4, #0]
}
    583e:	bd10      	pop	{r4, pc}
    5840:	20000350 	.word	0x20000350
    5844:	20000304 	.word	0x20000304

00005848 <littlefs_closedir>:
{
    5848:	b570      	push	{r4, r5, r6, lr}
    584a:	4604      	mov	r4, r0
	struct fs_littlefs *fs = dp->mp->fs_data;
    584c:	6843      	ldr	r3, [r0, #4]
    584e:	691d      	ldr	r5, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
    5850:	f105 06ec 	add.w	r6, r5, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
    5854:	f04f 32ff 	mov.w	r2, #4294967295
    5858:	f04f 33ff 	mov.w	r3, #4294967295
    585c:	4630      	mov	r0, r6
    585e:	f008 fabb 	bl	ddd8 <z_impl_k_mutex_lock>
	int ret = lfs_dir_close(&fs->lfs, dp->dirp);
    5862:	6821      	ldr	r1, [r4, #0]
    5864:	f105 0070 	add.w	r0, r5, #112	; 0x70
    5868:	f00d fba7 	bl	12fba <lfs_dir_close>
    586c:	4605      	mov	r5, r0
	return z_impl_k_mutex_unlock(mutex);
    586e:	4630      	mov	r0, r6
    5870:	f008 fb3c 	bl	deec <z_impl_k_mutex_unlock>
	k_mem_slab_free(&lfs_dir_pool, &dp->dirp);
    5874:	4621      	mov	r1, r4
    5876:	4803      	ldr	r0, [pc, #12]	; (5884 <littlefs_closedir+0x3c>)
    5878:	f00d ffd8 	bl	1382c <k_mem_slab_free>
	return lfs_to_errno(ret);
    587c:	4628      	mov	r0, r5
    587e:	f00b fd48 	bl	11312 <lfs_to_errno>
}
    5882:	bd70      	pop	{r4, r5, r6, pc}
    5884:	20000320 	.word	0x20000320

00005888 <littlefs_unmount>:
{
    5888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    588a:	4605      	mov	r5, r0
	struct fs_littlefs *fs = mountp->fs_data;
    588c:	6904      	ldr	r4, [r0, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
    588e:	f104 07ec 	add.w	r7, r4, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
    5892:	f04f 32ff 	mov.w	r2, #4294967295
    5896:	f04f 33ff 	mov.w	r3, #4294967295
    589a:	4638      	mov	r0, r7
    589c:	f008 fa9c 	bl	ddd8 <z_impl_k_mutex_lock>
	lfs_unmount(&fs->lfs);
    58a0:	f104 0070 	add.w	r0, r4, #112	; 0x70
    58a4:	f00d fbb7 	bl	13016 <lfs_unmount>
	flash_area_close(fs->area);
    58a8:	f8d4 00e8 	ldr.w	r0, [r4, #232]	; 0xe8
    58ac:	f00b fb16 	bl	10edc <flash_area_close>
	fs->area = NULL;
    58b0:	2600      	movs	r6, #0
    58b2:	f8c4 60e8 	str.w	r6, [r4, #232]	; 0xe8
	return z_impl_k_mutex_unlock(mutex);
    58b6:	4638      	mov	r0, r7
    58b8:	f008 fb18 	bl	deec <z_impl_k_mutex_unlock>
    58bc:	4b0b      	ldr	r3, [pc, #44]	; (58ec <littlefs_unmount+0x64>)
    58be:	4a0c      	ldr	r2, [pc, #48]	; (58f0 <littlefs_unmount+0x68>)
    58c0:	1a9b      	subs	r3, r3, r2
    58c2:	08db      	lsrs	r3, r3, #3
	LOG_INF("%s unmounted", log_strdup(mountp->mnt_point));
    58c4:	f04f 0400 	mov.w	r4, #0
    58c8:	2203      	movs	r2, #3
    58ca:	f362 0402 	bfi	r4, r2, #0, #3
    58ce:	f366 04c5 	bfi	r4, r6, #3, #3
    58d2:	f363 148f 	bfi	r4, r3, #6, #10
    58d6:	68e8      	ldr	r0, [r5, #12]
    58d8:	f7fb ff38 	bl	174c <z_log_strdup>
    58dc:	4601      	mov	r1, r0
    58de:	4622      	mov	r2, r4
    58e0:	4804      	ldr	r0, [pc, #16]	; (58f4 <littlefs_unmount+0x6c>)
    58e2:	f7fc f8ad 	bl	1a40 <log_1>
}
    58e6:	4630      	mov	r0, r6
    58e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    58ea:	bf00      	nop
    58ec:	00014330 	.word	0x00014330
    58f0:	00014318 	.word	0x00014318
    58f4:	00015384 	.word	0x00015384

000058f8 <littlefs_opendir>:
{
    58f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    58fa:	4604      	mov	r4, r0
    58fc:	460d      	mov	r5, r1
	struct fs_littlefs *fs = dp->mp->fs_data;
    58fe:	6843      	ldr	r3, [r0, #4]
    5900:	691e      	ldr	r6, [r3, #16]
	if (k_mem_slab_alloc(&lfs_dir_pool, &dp->dirp, K_NO_WAIT) != 0) {
    5902:	2200      	movs	r2, #0
    5904:	2300      	movs	r3, #0
    5906:	4601      	mov	r1, r0
    5908:	4817      	ldr	r0, [pc, #92]	; (5968 <littlefs_opendir+0x70>)
    590a:	f008 f92b 	bl	db64 <k_mem_slab_alloc>
    590e:	bb10      	cbnz	r0, 5956 <littlefs_opendir+0x5e>
	memset(dp->dirp, 0, sizeof(struct lfs_dir));
    5910:	2234      	movs	r2, #52	; 0x34
    5912:	2100      	movs	r1, #0
    5914:	6820      	ldr	r0, [r4, #0]
    5916:	f00b fc8d 	bl	11234 <memset>
	path = fs_impl_strip_prefix(path, dp->mp);
    591a:	6861      	ldr	r1, [r4, #4]
    591c:	4628      	mov	r0, r5
    591e:	f7ff fda7 	bl	5470 <fs_impl_strip_prefix>
    5922:	4605      	mov	r5, r0
	k_mutex_lock(&fs->mutex, K_FOREVER);
    5924:	f106 07ec 	add.w	r7, r6, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
    5928:	f04f 32ff 	mov.w	r2, #4294967295
    592c:	f04f 33ff 	mov.w	r3, #4294967295
    5930:	4638      	mov	r0, r7
    5932:	f008 fa51 	bl	ddd8 <z_impl_k_mutex_lock>
	int ret = lfs_dir_open(&fs->lfs, dp->dirp, path);
    5936:	462a      	mov	r2, r5
    5938:	6821      	ldr	r1, [r4, #0]
    593a:	f106 0070 	add.w	r0, r6, #112	; 0x70
    593e:	f005 ff97 	bl	b870 <lfs_dir_open>
    5942:	4605      	mov	r5, r0
	return z_impl_k_mutex_unlock(mutex);
    5944:	4638      	mov	r0, r7
    5946:	f008 fad1 	bl	deec <z_impl_k_mutex_unlock>
	if (ret < 0) {
    594a:	2d00      	cmp	r5, #0
    594c:	db06      	blt.n	595c <littlefs_opendir+0x64>
	return lfs_to_errno(ret);
    594e:	4628      	mov	r0, r5
    5950:	f00b fcdf 	bl	11312 <lfs_to_errno>
}
    5954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOMEM;
    5956:	f06f 000b 	mvn.w	r0, #11
    595a:	e7fb      	b.n	5954 <littlefs_opendir+0x5c>
		k_mem_slab_free(&lfs_dir_pool, &dp->dirp);
    595c:	4621      	mov	r1, r4
    595e:	4802      	ldr	r0, [pc, #8]	; (5968 <littlefs_opendir+0x70>)
    5960:	f00d ff64 	bl	1382c <k_mem_slab_free>
    5964:	e7f3      	b.n	594e <littlefs_opendir+0x56>
    5966:	bf00      	nop
    5968:	20000320 	.word	0x20000320

0000596c <littlefs_open>:
{
    596c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5970:	b082      	sub	sp, #8
    5972:	4604      	mov	r4, r0
    5974:	460e      	mov	r6, r1
	struct fs_littlefs *fs = fp->mp->fs_data;
    5976:	6843      	ldr	r3, [r0, #4]
    5978:	691f      	ldr	r7, [r3, #16]
	int flags = lfs_flags_from_zephyr(zflags);
    597a:	4610      	mov	r0, r2
    597c:	f00b fd3a 	bl	113f4 <lfs_flags_from_zephyr>
    5980:	4605      	mov	r5, r0
	int ret = k_mem_slab_alloc(&file_data_pool, &fp->filep, K_NO_WAIT);
    5982:	2200      	movs	r2, #0
    5984:	2300      	movs	r3, #0
    5986:	4621      	mov	r1, r4
    5988:	4822      	ldr	r0, [pc, #136]	; (5a14 <littlefs_open+0xa8>)
    598a:	f008 f8eb 	bl	db64 <k_mem_slab_alloc>
	if (ret != 0) {
    598e:	4603      	mov	r3, r0
    5990:	b118      	cbz	r0, 599a <littlefs_open+0x2e>
}
    5992:	4618      	mov	r0, r3
    5994:	b002      	add	sp, #8
    5996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	struct lfs_file_data *fdp = fp->filep;
    599a:	f8d4 8000 	ldr.w	r8, [r4]
	memset(fdp, 0, sizeof(*fdp));
    599e:	2264      	movs	r2, #100	; 0x64
    59a0:	2100      	movs	r1, #0
    59a2:	4640      	mov	r0, r8
    59a4:	f00b fc46 	bl	11234 <memset>
	fdp->cache_block = fc_allocate(lfs->cfg->cache_size);
    59a8:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
	ret = k_heap_alloc(&file_cache_heap, size, K_NO_WAIT);
    59ac:	2200      	movs	r2, #0
    59ae:	2300      	movs	r3, #0
    59b0:	6a89      	ldr	r1, [r1, #40]	; 0x28
    59b2:	4819      	ldr	r0, [pc, #100]	; (5a18 <littlefs_open+0xac>)
    59b4:	f00d feed 	bl	13792 <k_heap_alloc>
	fdp->cache_block = fc_allocate(lfs->cfg->cache_size);
    59b8:	f8c8 0060 	str.w	r0, [r8, #96]	; 0x60
	if (fdp->cache_block == NULL) {
    59bc:	b300      	cbz	r0, 5a00 <littlefs_open+0x94>
	fdp->config.buffer = fdp->cache_block;
    59be:	46c1      	mov	r9, r8
    59c0:	f849 0f54 	str.w	r0, [r9, #84]!
	path = fs_impl_strip_prefix(path, fp->mp);
    59c4:	6861      	ldr	r1, [r4, #4]
    59c6:	4630      	mov	r0, r6
    59c8:	f7ff fd52 	bl	5470 <fs_impl_strip_prefix>
    59cc:	4682      	mov	sl, r0
	k_mutex_lock(&fs->mutex, K_FOREVER);
    59ce:	f107 06ec 	add.w	r6, r7, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
    59d2:	f04f 32ff 	mov.w	r2, #4294967295
    59d6:	f04f 33ff 	mov.w	r3, #4294967295
    59da:	4630      	mov	r0, r6
    59dc:	f008 f9fc 	bl	ddd8 <z_impl_k_mutex_lock>
	ret = lfs_file_opencfg(&fs->lfs, &fdp->file,
    59e0:	f8cd 9000 	str.w	r9, [sp]
    59e4:	462b      	mov	r3, r5
    59e6:	4652      	mov	r2, sl
    59e8:	4641      	mov	r1, r8
    59ea:	f107 0070 	add.w	r0, r7, #112	; 0x70
    59ee:	f007 fa61 	bl	ceb4 <lfs_file_opencfg>
    59f2:	4605      	mov	r5, r0
	return z_impl_k_mutex_unlock(mutex);
    59f4:	4630      	mov	r0, r6
    59f6:	f008 fa79 	bl	deec <z_impl_k_mutex_unlock>
	if (ret < 0) {
    59fa:	2d00      	cmp	r5, #0
    59fc:	da05      	bge.n	5a0a <littlefs_open+0x9e>
    59fe:	e001      	b.n	5a04 <littlefs_open+0x98>
		ret = -ENOMEM;
    5a00:	f06f 050b 	mvn.w	r5, #11
		release_file_data(fp);
    5a04:	4620      	mov	r0, r4
    5a06:	f7ff ff0b 	bl	5820 <release_file_data>
	return lfs_to_errno(ret);
    5a0a:	4628      	mov	r0, r5
    5a0c:	f00b fc81 	bl	11312 <lfs_to_errno>
    5a10:	4603      	mov	r3, r0
    5a12:	e7be      	b.n	5992 <littlefs_open+0x26>
    5a14:	20000304 	.word	0x20000304
    5a18:	20000350 	.word	0x20000350

00005a1c <endpoint_ctx>:
	return (uint8_t)ep;
}

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);
    5a1c:	f000 037f 	and.w	r3, r0, #127	; 0x7f

	if (NRF_USBD_EPIN_CHECK(ep)) {
    5a20:	b242      	sxtb	r2, r0
    5a22:	2a00      	cmp	r2, #0
    5a24:	db12      	blt.n	5a4c <endpoint_ctx+0x30>
			if (ep_num >= CFG_EPIN_CNT) {
				return false;
			}
		}
	} else {
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    5a26:	2b08      	cmp	r3, #8
    5a28:	d002      	beq.n	5a30 <endpoint_ctx+0x14>
			if (CFG_EP_ISOOUT_CNT == 0) {
				return false;
			}
		} else {
			if (ep_num >= CFG_EPOUT_CNT) {
    5a2a:	f010 0f78 	tst.w	r0, #120	; 0x78
    5a2e:	d11d      	bne.n	5a6c <endpoint_ctx+0x50>
	if (!ep_is_valid(ep)) {
		return NULL;
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);
    5a30:	f000 030f 	and.w	r3, r0, #15

	if (NRF_USBD_EPIN_CHECK(ep)) {
    5a34:	2a00      	cmp	r2, #0
    5a36:	db10      	blt.n	5a5a <endpoint_ctx+0x3e>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    5a38:	f010 0f08 	tst.w	r0, #8
    5a3c:	d11a      	bne.n	5a74 <endpoint_ctx+0x58>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
					    CFG_EP_ISOIN_CNT +
    5a3e:	3309      	adds	r3, #9
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    5a40:	015b      	lsls	r3, r3, #5
    5a42:	3348      	adds	r3, #72	; 0x48
    5a44:	480c      	ldr	r0, [pc, #48]	; (5a78 <endpoint_ctx+0x5c>)
    5a46:	4403      	add	r3, r0
    5a48:	1d18      	adds	r0, r3, #4
    5a4a:	4770      	bx	lr
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    5a4c:	2b08      	cmp	r3, #8
    5a4e:	d0ef      	beq.n	5a30 <endpoint_ctx+0x14>
			if (ep_num >= CFG_EPIN_CNT) {
    5a50:	f010 0f78 	tst.w	r0, #120	; 0x78
    5a54:	d0ec      	beq.n	5a30 <endpoint_ctx+0x14>
		return NULL;
    5a56:	2000      	movs	r0, #0
    5a58:	4770      	bx	lr
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    5a5a:	f010 0f08 	tst.w	r0, #8
    5a5e:	d107      	bne.n	5a70 <endpoint_ctx+0x54>
			return &ctx->ep_ctx[ep_num];
    5a60:	015b      	lsls	r3, r3, #5
    5a62:	3348      	adds	r3, #72	; 0x48
    5a64:	4804      	ldr	r0, [pc, #16]	; (5a78 <endpoint_ctx+0x5c>)
    5a66:	4403      	add	r3, r0
    5a68:	1d18      	adds	r0, r3, #4
    5a6a:	4770      	bx	lr
		return NULL;
    5a6c:	2000      	movs	r0, #0
    5a6e:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    5a70:	4802      	ldr	r0, [pc, #8]	; (5a7c <endpoint_ctx+0x60>)
    5a72:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    5a74:	4802      	ldr	r0, [pc, #8]	; (5a80 <endpoint_ctx+0x64>)
					    ep_num];
		}
	}

	return NULL;
}
    5a76:	4770      	bx	lr
    5a78:	20002000 	.word	0x20002000
    5a7c:	2000214c 	.word	0x2000214c
    5a80:	2000226c 	.word	0x2000226c

00005a84 <eps_ctx_init>:
 * Endpoint buffers are allocated during the first call of this function.
 * This function may also be called again on every USB reset event
 * to reinitialize the state of all endpoints.
 */
static int eps_ctx_init(void)
{
    5a84:	b510      	push	{r4, lr}
	struct nrf_usbd_ep_ctx *ep_ctx;
	uint32_t i;

	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    5a86:	2400      	movs	r4, #0
    5a88:	e005      	b.n	5a96 <eps_ctx_init+0x12>
		ep_ctx = in_endpoint_ctx(i);
    5a8a:	b2e0      	uxtb	r0, r4
    5a8c:	f00b fec9 	bl	11822 <in_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);
		ep_ctx_reset(ep_ctx);
    5a90:	f00b fed1 	bl	11836 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    5a94:	3401      	adds	r4, #1
    5a96:	2c07      	cmp	r4, #7
    5a98:	d9f7      	bls.n	5a8a <eps_ctx_init+0x6>
	}

	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    5a9a:	2400      	movs	r4, #0
    5a9c:	e006      	b.n	5aac <eps_ctx_init+0x28>
		ep_ctx = out_endpoint_ctx(i);
		__ASSERT_NO_MSG(ep_ctx);

		if (!ep_ctx->buf.block.data) {
			ep_ctx->buf.block.data = ep_out_bufs[i];
    5a9e:	4b10      	ldr	r3, [pc, #64]	; (5ae0 <eps_ctx_init+0x5c>)
    5aa0:	eb03 1384 	add.w	r3, r3, r4, lsl #6
    5aa4:	6103      	str	r3, [r0, #16]
		}

		ep_ctx_reset(ep_ctx);
    5aa6:	f00b fec6 	bl	11836 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    5aaa:	3401      	adds	r4, #1
    5aac:	2c07      	cmp	r4, #7
    5aae:	d806      	bhi.n	5abe <eps_ctx_init+0x3a>
		ep_ctx = out_endpoint_ctx(i);
    5ab0:	b2e0      	uxtb	r0, r4
    5ab2:	f00b febc 	bl	1182e <out_endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    5ab6:	6903      	ldr	r3, [r0, #16]
    5ab8:	2b00      	cmp	r3, #0
    5aba:	d1f4      	bne.n	5aa6 <eps_ctx_init+0x22>
    5abc:	e7ef      	b.n	5a9e <eps_ctx_init+0x1a>
	}

	if (CFG_EP_ISOIN_CNT) {
		ep_ctx = in_endpoint_ctx(NRF_USBD_EPIN(8));
    5abe:	2088      	movs	r0, #136	; 0x88
    5ac0:	f00b feaf 	bl	11822 <in_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);
		ep_ctx_reset(ep_ctx);
    5ac4:	f00b feb7 	bl	11836 <ep_ctx_reset>
	}

	if (CFG_EP_ISOOUT_CNT) {
		BUILD_ASSERT(CFG_EP_ISOOUT_CNT <= 1);

		ep_ctx = out_endpoint_ctx(NRF_USBD_EPOUT(8));
    5ac8:	2008      	movs	r0, #8
    5aca:	f00b feb0 	bl	1182e <out_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);

		if (!ep_ctx->buf.block.data) {
    5ace:	6903      	ldr	r3, [r0, #16]
    5ad0:	b11b      	cbz	r3, 5ada <eps_ctx_init+0x56>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
		}

		ep_ctx_reset(ep_ctx);
    5ad2:	f00b feb0 	bl	11836 <ep_ctx_reset>
	}

	return 0;
}
    5ad6:	2000      	movs	r0, #0
    5ad8:	bd10      	pop	{r4, pc}
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
    5ada:	4b02      	ldr	r3, [pc, #8]	; (5ae4 <eps_ctx_init+0x60>)
    5adc:	6103      	str	r3, [r0, #16]
    5ade:	e7f8      	b.n	5ad2 <eps_ctx_init+0x4e>
    5ae0:	20001e00 	.word	0x20001e00
    5ae4:	20001a00 	.word	0x20001a00

00005ae8 <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
    5ae8:	b510      	push	{r4, lr}
    5aea:	b082      	sub	sp, #8
	};

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
    5aec:	480b      	ldr	r0, [pc, #44]	; (5b1c <usb_init+0x34>)
    5aee:	f003 f8b9 	bl	8c64 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);
    5af2:	480b      	ldr	r0, [pc, #44]	; (5b20 <usb_init+0x38>)
    5af4:	f003 f8fa 	bl	8cec <nrfx_power_usbevt_init>

	k_work_queue_start(&usbd_work_queue,
    5af8:	2400      	movs	r4, #0
    5afa:	9400      	str	r4, [sp, #0]
    5afc:	f04f 33ff 	mov.w	r3, #4294967295
    5b00:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5b04:	4907      	ldr	r1, [pc, #28]	; (5b24 <usb_init+0x3c>)
    5b06:	4808      	ldr	r0, [pc, #32]	; (5b28 <usb_init+0x40>)
    5b08:	f008 fbde 	bl	e2c8 <k_work_queue_start>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_work_init(&ctx->usb_work, usbd_work_handler);
    5b0c:	4907      	ldr	r1, [pc, #28]	; (5b2c <usb_init+0x44>)
    5b0e:	4808      	ldr	r0, [pc, #32]	; (5b30 <usb_init+0x48>)
    5b10:	f00d ffca 	bl	13aa8 <k_work_init>

	return 0;
}
    5b14:	4620      	mov	r0, r4
    5b16:	b002      	add	sp, #8
    5b18:	bd10      	pop	{r4, pc}
    5b1a:	bf00      	nop
    5b1c:	00015608 	.word	0x00015608
    5b20:	0001560c 	.word	0x0001560c
    5b24:	20003460 	.word	0x20003460
    5b28:	20000698 	.word	0x20000698
    5b2c:	00005da9 	.word	0x00005da9
    5b30:	20002028 	.word	0x20002028

00005b34 <submit_dc_power_event>:
{
    5b34:	b530      	push	{r4, r5, lr}
    5b36:	b083      	sub	sp, #12
    5b38:	4605      	mov	r5, r0
	if (k_mem_slab_alloc(&fifo_elem_slab,
    5b3a:	2200      	movs	r2, #0
    5b3c:	2300      	movs	r3, #0
    5b3e:	a901      	add	r1, sp, #4
    5b40:	482e      	ldr	r0, [pc, #184]	; (5bfc <submit_dc_power_event+0xc8>)
    5b42:	f008 f80f 	bl	db64 <k_mem_slab_alloc>
    5b46:	b980      	cbnz	r0, 5b6a <submit_dc_power_event+0x36>
	ev = (struct usbd_event *)block.data;
    5b48:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    5b4a:	6064      	str	r4, [r4, #4]
	if (!ev) {
    5b4c:	b15c      	cbz	r4, 5b66 <submit_dc_power_event+0x32>
	ev->evt_type = USBD_EVT_POWER;
    5b4e:	2300      	movs	r3, #0
    5b50:	7423      	strb	r3, [r4, #16]
	ev->evt.pwr_evt.state = state;
    5b52:	7225      	strb	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    5b54:	4621      	mov	r1, r4
    5b56:	482a      	ldr	r0, [pc, #168]	; (5c00 <submit_dc_power_event+0xcc>)
    5b58:	f00d ff8b 	bl	13a72 <k_queue_append>
	if (usbd_ctx.attached) {
    5b5c:	4b29      	ldr	r3, [pc, #164]	; (5c04 <submit_dc_power_event+0xd0>)
    5b5e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    5b62:	2b00      	cmp	r3, #0
    5b64:	d144      	bne.n	5bf0 <submit_dc_power_event+0xbc>
}
    5b66:	b003      	add	sp, #12
    5b68:	bd30      	pop	{r4, r5, pc}
    5b6a:	4b27      	ldr	r3, [pc, #156]	; (5c08 <submit_dc_power_event+0xd4>)
    5b6c:	4a27      	ldr	r2, [pc, #156]	; (5c0c <submit_dc_power_event+0xd8>)
    5b6e:	1a9b      	subs	r3, r3, r2
    5b70:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    5b72:	f04f 0100 	mov.w	r1, #0
    5b76:	2201      	movs	r2, #1
    5b78:	f362 0102 	bfi	r1, r2, #0, #3
    5b7c:	f36f 01c5 	bfc	r1, #3, #3
    5b80:	f363 118f 	bfi	r1, r3, #6, #10
    5b84:	4822      	ldr	r0, [pc, #136]	; (5c10 <submit_dc_power_event+0xdc>)
    5b86:	f7fb ffef 	bl	1b68 <log_0>
static inline void usbd_evt_flush(void)
    5b8a:	e004      	b.n	5b96 <submit_dc_power_event+0x62>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    5b8c:	1d01      	adds	r1, r0, #4
    5b8e:	481b      	ldr	r0, [pc, #108]	; (5bfc <submit_dc_power_event+0xc8>)
    5b90:	f00d fe4c 	bl	1382c <k_mem_slab_free>
	} while (ev != NULL);
    5b94:	b144      	cbz	r4, 5ba8 <submit_dc_power_event+0x74>
	return z_impl_k_queue_get(queue, timeout);
    5b96:	2200      	movs	r2, #0
    5b98:	2300      	movs	r3, #0
    5b9a:	4819      	ldr	r0, [pc, #100]	; (5c00 <submit_dc_power_event+0xcc>)
    5b9c:	f008 f9ea 	bl	df74 <z_impl_k_queue_get>
		if (ev) {
    5ba0:	4604      	mov	r4, r0
    5ba2:	2800      	cmp	r0, #0
    5ba4:	d1f2      	bne.n	5b8c <submit_dc_power_event+0x58>
    5ba6:	e7f5      	b.n	5b94 <submit_dc_power_event+0x60>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    5ba8:	2200      	movs	r2, #0
    5baa:	2300      	movs	r3, #0
    5bac:	a901      	add	r1, sp, #4
    5bae:	4813      	ldr	r0, [pc, #76]	; (5bfc <submit_dc_power_event+0xc8>)
    5bb0:	f007 ffd8 	bl	db64 <k_mem_slab_alloc>
    5bb4:	b180      	cbz	r0, 5bd8 <submit_dc_power_event+0xa4>
    5bb6:	4b14      	ldr	r3, [pc, #80]	; (5c08 <submit_dc_power_event+0xd4>)
    5bb8:	4a14      	ldr	r2, [pc, #80]	; (5c0c <submit_dc_power_event+0xd8>)
    5bba:	1a9b      	subs	r3, r3, r2
    5bbc:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    5bbe:	f04f 0100 	mov.w	r1, #0
    5bc2:	2201      	movs	r2, #1
    5bc4:	f362 0102 	bfi	r1, r2, #0, #3
    5bc8:	f36f 01c5 	bfc	r1, #3, #3
    5bcc:	f363 118f 	bfi	r1, r3, #6, #10
    5bd0:	4810      	ldr	r0, [pc, #64]	; (5c14 <submit_dc_power_event+0xe0>)
    5bd2:	f7fb ffc9 	bl	1b68 <log_0>
			return NULL;
    5bd6:	e7b9      	b.n	5b4c <submit_dc_power_event+0x18>
		ev = (struct usbd_event *)block.data;
    5bd8:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    5bda:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    5bdc:	2304      	movs	r3, #4
    5bde:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    5be0:	4807      	ldr	r0, [pc, #28]	; (5c00 <submit_dc_power_event+0xcc>)
    5be2:	f00d ff46 	bl	13a72 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    5be6:	490c      	ldr	r1, [pc, #48]	; (5c18 <submit_dc_power_event+0xe4>)
    5be8:	480c      	ldr	r0, [pc, #48]	; (5c1c <submit_dc_power_event+0xe8>)
    5bea:	f00d ff63 	bl	13ab4 <k_work_submit_to_queue>
		return NULL;
    5bee:	e7ad      	b.n	5b4c <submit_dc_power_event+0x18>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    5bf0:	4909      	ldr	r1, [pc, #36]	; (5c18 <submit_dc_power_event+0xe4>)
    5bf2:	480a      	ldr	r0, [pc, #40]	; (5c1c <submit_dc_power_event+0xe8>)
    5bf4:	f00d ff5e 	bl	13ab4 <k_work_submit_to_queue>
}
    5bf8:	e7b5      	b.n	5b66 <submit_dc_power_event+0x32>
    5bfa:	bf00      	nop
    5bfc:	200002e8 	.word	0x200002e8
    5c00:	200003ec 	.word	0x200003ec
    5c04:	20002000 	.word	0x20002000
    5c08:	00014380 	.word	0x00014380
    5c0c:	00014318 	.word	0x00014318
    5c10:	000153e8 	.word	0x000153e8
    5c14:	00015408 	.word	0x00015408
    5c18:	20002028 	.word	0x20002028
    5c1c:	20000698 	.word	0x20000698

00005c20 <usb_dc_power_event_handler>:
{
    5c20:	b508      	push	{r3, lr}
	switch (event) {
    5c22:	2801      	cmp	r0, #1
    5c24:	d014      	beq.n	5c50 <usb_dc_power_event_handler+0x30>
    5c26:	2802      	cmp	r0, #2
    5c28:	d015      	beq.n	5c56 <usb_dc_power_event_handler+0x36>
    5c2a:	b198      	cbz	r0, 5c54 <usb_dc_power_event_handler+0x34>
    5c2c:	4b0b      	ldr	r3, [pc, #44]	; (5c5c <usb_dc_power_event_handler+0x3c>)
    5c2e:	4a0c      	ldr	r2, [pc, #48]	; (5c60 <usb_dc_power_event_handler+0x40>)
    5c30:	1a9b      	subs	r3, r3, r2
    5c32:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unknown USB power event %d", event);
    5c34:	f04f 0200 	mov.w	r2, #0
    5c38:	2101      	movs	r1, #1
    5c3a:	f361 0202 	bfi	r2, r1, #0, #3
    5c3e:	f36f 02c5 	bfc	r2, #3, #3
    5c42:	f363 128f 	bfi	r2, r3, #6, #10
    5c46:	4601      	mov	r1, r0
    5c48:	4806      	ldr	r0, [pc, #24]	; (5c64 <usb_dc_power_event_handler+0x44>)
    5c4a:	f7fb fef9 	bl	1a40 <log_1>
    5c4e:	e004      	b.n	5c5a <usb_dc_power_event_handler+0x3a>
		new_state = USBD_DETACHED;
    5c50:	2000      	movs	r0, #0
    5c52:	e000      	b.n	5c56 <usb_dc_power_event_handler+0x36>
	switch (event) {
    5c54:	2001      	movs	r0, #1
	submit_dc_power_event(new_state);
    5c56:	f7ff ff6d 	bl	5b34 <submit_dc_power_event>
}
    5c5a:	bd08      	pop	{r3, pc}
    5c5c:	00014380 	.word	0x00014380
    5c60:	00014318 	.word	0x00014318
    5c64:	00015424 	.word	0x00015424

00005c68 <usbd_sof_trigger_iso_read>:
{
    5c68:	b530      	push	{r4, r5, lr}
    5c6a:	b083      	sub	sp, #12
	ep_ctx = endpoint_ctx(NRFX_USBD_EPOUT8);
    5c6c:	2008      	movs	r0, #8
    5c6e:	f7ff fed5 	bl	5a1c <endpoint_ctx>
	if (!ep_ctx) {
    5c72:	b120      	cbz	r0, 5c7e <usbd_sof_trigger_iso_read+0x16>
    5c74:	4605      	mov	r5, r0
	if (ep_ctx->cfg.en) {
    5c76:	7a03      	ldrb	r3, [r0, #8]
    5c78:	b993      	cbnz	r3, 5ca0 <usbd_sof_trigger_iso_read+0x38>
}
    5c7a:	b003      	add	sp, #12
    5c7c:	bd30      	pop	{r4, r5, pc}
    5c7e:	4b40      	ldr	r3, [pc, #256]	; (5d80 <usbd_sof_trigger_iso_read+0x118>)
    5c80:	4a40      	ldr	r2, [pc, #256]	; (5d84 <usbd_sof_trigger_iso_read+0x11c>)
    5c82:	1a9b      	subs	r3, r3, r2
    5c84:	08db      	lsrs	r3, r3, #3
		LOG_ERR("There is no ISO ep");
    5c86:	f04f 0100 	mov.w	r1, #0
    5c8a:	2201      	movs	r2, #1
    5c8c:	f362 0102 	bfi	r1, r2, #0, #3
    5c90:	f36f 01c5 	bfc	r1, #3, #3
    5c94:	f363 118f 	bfi	r1, r3, #6, #10
    5c98:	483b      	ldr	r0, [pc, #236]	; (5d88 <usbd_sof_trigger_iso_read+0x120>)
    5c9a:	f7fb ff65 	bl	1b68 <log_0>
		return;
    5c9e:	e7ec      	b.n	5c7a <usbd_sof_trigger_iso_read+0x12>
		ep_ctx->read_pending = true;
    5ca0:	2301      	movs	r3, #1
    5ca2:	7743      	strb	r3, [r0, #29]
		ep_ctx->read_complete = true;
    5ca4:	7703      	strb	r3, [r0, #28]
	if (k_mem_slab_alloc(&fifo_elem_slab,
    5ca6:	2200      	movs	r2, #0
    5ca8:	2300      	movs	r3, #0
    5caa:	a901      	add	r1, sp, #4
    5cac:	4837      	ldr	r0, [pc, #220]	; (5d8c <usbd_sof_trigger_iso_read+0x124>)
    5cae:	f007 ff59 	bl	db64 <k_mem_slab_alloc>
    5cb2:	b980      	cbnz	r0, 5cd6 <usbd_sof_trigger_iso_read+0x6e>
	ev = (struct usbd_event *)block.data;
    5cb4:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    5cb6:	6064      	str	r4, [r4, #4]
		if (!ev) {
    5cb8:	2c00      	cmp	r4, #0
    5cba:	d04f      	beq.n	5d5c <usbd_sof_trigger_iso_read+0xf4>
		ev->evt_type = USBD_EVT_EP;
    5cbc:	2301      	movs	r3, #1
    5cbe:	7423      	strb	r3, [r4, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    5cc0:	7323      	strb	r3, [r4, #12]
		ev->evt.ep_evt.ep = ep_ctx;
    5cc2:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    5cc4:	4621      	mov	r1, r4
    5cc6:	4832      	ldr	r0, [pc, #200]	; (5d90 <usbd_sof_trigger_iso_read+0x128>)
    5cc8:	f00d fed3 	bl	13a72 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    5ccc:	4931      	ldr	r1, [pc, #196]	; (5d94 <usbd_sof_trigger_iso_read+0x12c>)
    5cce:	4832      	ldr	r0, [pc, #200]	; (5d98 <usbd_sof_trigger_iso_read+0x130>)
    5cd0:	f00d fef0 	bl	13ab4 <k_work_submit_to_queue>
}
    5cd4:	e7d1      	b.n	5c7a <usbd_sof_trigger_iso_read+0x12>
    5cd6:	4b2a      	ldr	r3, [pc, #168]	; (5d80 <usbd_sof_trigger_iso_read+0x118>)
    5cd8:	4a2a      	ldr	r2, [pc, #168]	; (5d84 <usbd_sof_trigger_iso_read+0x11c>)
    5cda:	1a9b      	subs	r3, r3, r2
    5cdc:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    5cde:	f04f 0100 	mov.w	r1, #0
    5ce2:	2201      	movs	r2, #1
    5ce4:	f362 0102 	bfi	r1, r2, #0, #3
    5ce8:	f36f 01c5 	bfc	r1, #3, #3
    5cec:	f363 118f 	bfi	r1, r3, #6, #10
    5cf0:	482a      	ldr	r0, [pc, #168]	; (5d9c <usbd_sof_trigger_iso_read+0x134>)
    5cf2:	f7fb ff39 	bl	1b68 <log_0>
static inline void usbd_evt_flush(void)
    5cf6:	e000      	b.n	5cfa <usbd_sof_trigger_iso_read+0x92>
	} while (ev != NULL);
    5cf8:	b164      	cbz	r4, 5d14 <usbd_sof_trigger_iso_read+0xac>
    5cfa:	2200      	movs	r2, #0
    5cfc:	2300      	movs	r3, #0
    5cfe:	4824      	ldr	r0, [pc, #144]	; (5d90 <usbd_sof_trigger_iso_read+0x128>)
    5d00:	f008 f938 	bl	df74 <z_impl_k_queue_get>
		if (ev) {
    5d04:	4604      	mov	r4, r0
    5d06:	2800      	cmp	r0, #0
    5d08:	d0f6      	beq.n	5cf8 <usbd_sof_trigger_iso_read+0x90>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    5d0a:	1d01      	adds	r1, r0, #4
    5d0c:	481f      	ldr	r0, [pc, #124]	; (5d8c <usbd_sof_trigger_iso_read+0x124>)
    5d0e:	f00d fd8d 	bl	1382c <k_mem_slab_free>
}
    5d12:	e7f1      	b.n	5cf8 <usbd_sof_trigger_iso_read+0x90>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    5d14:	2200      	movs	r2, #0
    5d16:	2300      	movs	r3, #0
    5d18:	a901      	add	r1, sp, #4
    5d1a:	481c      	ldr	r0, [pc, #112]	; (5d8c <usbd_sof_trigger_iso_read+0x124>)
    5d1c:	f007 ff22 	bl	db64 <k_mem_slab_alloc>
    5d20:	b180      	cbz	r0, 5d44 <usbd_sof_trigger_iso_read+0xdc>
    5d22:	4b17      	ldr	r3, [pc, #92]	; (5d80 <usbd_sof_trigger_iso_read+0x118>)
    5d24:	4a17      	ldr	r2, [pc, #92]	; (5d84 <usbd_sof_trigger_iso_read+0x11c>)
    5d26:	1a9b      	subs	r3, r3, r2
    5d28:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    5d2a:	f04f 0100 	mov.w	r1, #0
    5d2e:	2201      	movs	r2, #1
    5d30:	f362 0102 	bfi	r1, r2, #0, #3
    5d34:	f36f 01c5 	bfc	r1, #3, #3
    5d38:	f363 118f 	bfi	r1, r3, #6, #10
    5d3c:	4818      	ldr	r0, [pc, #96]	; (5da0 <usbd_sof_trigger_iso_read+0x138>)
    5d3e:	f7fb ff13 	bl	1b68 <log_0>
			return NULL;
    5d42:	e7b9      	b.n	5cb8 <usbd_sof_trigger_iso_read+0x50>
		ev = (struct usbd_event *)block.data;
    5d44:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    5d46:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    5d48:	2304      	movs	r3, #4
    5d4a:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    5d4c:	4810      	ldr	r0, [pc, #64]	; (5d90 <usbd_sof_trigger_iso_read+0x128>)
    5d4e:	f00d fe90 	bl	13a72 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    5d52:	4910      	ldr	r1, [pc, #64]	; (5d94 <usbd_sof_trigger_iso_read+0x12c>)
    5d54:	4810      	ldr	r0, [pc, #64]	; (5d98 <usbd_sof_trigger_iso_read+0x130>)
    5d56:	f00d fead 	bl	13ab4 <k_work_submit_to_queue>
		return NULL;
    5d5a:	e7ad      	b.n	5cb8 <usbd_sof_trigger_iso_read+0x50>
    5d5c:	4b08      	ldr	r3, [pc, #32]	; (5d80 <usbd_sof_trigger_iso_read+0x118>)
    5d5e:	4a09      	ldr	r2, [pc, #36]	; (5d84 <usbd_sof_trigger_iso_read+0x11c>)
    5d60:	1a9b      	subs	r3, r3, r2
    5d62:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Failed to alloc evt");
    5d64:	f04f 0100 	mov.w	r1, #0
    5d68:	2201      	movs	r2, #1
    5d6a:	f362 0102 	bfi	r1, r2, #0, #3
    5d6e:	f36f 01c5 	bfc	r1, #3, #3
    5d72:	f363 118f 	bfi	r1, r3, #6, #10
    5d76:	480b      	ldr	r0, [pc, #44]	; (5da4 <usbd_sof_trigger_iso_read+0x13c>)
    5d78:	f7fb fef6 	bl	1b68 <log_0>
			return;
    5d7c:	e77d      	b.n	5c7a <usbd_sof_trigger_iso_read+0x12>
    5d7e:	bf00      	nop
    5d80:	00014380 	.word	0x00014380
    5d84:	00014318 	.word	0x00014318
    5d88:	00015440 	.word	0x00015440
    5d8c:	200002e8 	.word	0x200002e8
    5d90:	200003ec 	.word	0x200003ec
    5d94:	20002028 	.word	0x20002028
    5d98:	20000698 	.word	0x20000698
    5d9c:	000153e8 	.word	0x000153e8
    5da0:	00015408 	.word	0x00015408
    5da4:	00015454 	.word	0x00015454

00005da8 <usbd_work_handler>:
{
    5da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5dac:	b085      	sub	sp, #20
    5dae:	4605      	mov	r5, r0
	while ((ev = usbd_evt_get()) != NULL) {
    5db0:	e18f      	b.n	60d2 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xd2>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    5db2:	1d21      	adds	r1, r4, #4
    5db4:	48b5      	ldr	r0, [pc, #724]	; (608c <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x8c>)
    5db6:	f00d fd39 	bl	1382c <k_mem_slab_free>
			continue;
    5dba:	e18a      	b.n	60d2 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xd2>
			if (!ctx->attached) {
    5dbc:	f815 3c04 	ldrb.w	r3, [r5, #-4]
    5dc0:	b14b      	cbz	r3, 5dd6 <usbd_work_handler+0x2e>
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    5dc2:	f8d4 a008 	ldr.w	sl, [r4, #8]
	switch (ep_evt->evt_type) {
    5dc6:	7b23      	ldrb	r3, [r4, #12]
    5dc8:	2b03      	cmp	r3, #3
    5dca:	f200 817e 	bhi.w	60ca <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xca>
    5dce:	e8df f003 	tbb	[pc, r3]
    5dd2:	6114      	.short	0x6114
    5dd4:	a49d      	.short	0xa49d
    5dd6:	4bae      	ldr	r3, [pc, #696]	; (6090 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x90>)
    5dd8:	4aae      	ldr	r2, [pc, #696]	; (6094 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x94>)
    5dda:	1a9b      	subs	r3, r3, r2
    5ddc:	08db      	lsrs	r3, r3, #3
				LOG_ERR("not attached, EP 0x%02x event dropped",
    5dde:	2201      	movs	r2, #1
    5de0:	f362 0702 	bfi	r7, r2, #0, #3
    5de4:	f36f 07c5 	bfc	r7, #3, #3
    5de8:	f363 178f 	bfi	r7, r3, #6, #10
    5dec:	68a3      	ldr	r3, [r4, #8]
    5dee:	463a      	mov	r2, r7
    5df0:	7a59      	ldrb	r1, [r3, #9]
    5df2:	48a9      	ldr	r0, [pc, #676]	; (6098 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x98>)
    5df4:	f7fb fe24 	bl	1a40 <log_1>
    5df8:	e7e3      	b.n	5dc2 <usbd_work_handler+0x1a>
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    5dfa:	f8da b014 	ldr.w	fp, [sl, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
    5dfe:	2208      	movs	r2, #8
    5e00:	2100      	movs	r1, #0
    5e02:	4658      	mov	r0, fp
    5e04:	f00b fa16 	bl	11234 <memset>
    return ret;
}

NRF_STATIC_INLINE uint8_t nrf_usbd_setup_bmrequesttype_get(NRF_USBD_Type const * p_reg)
{
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    5e08:	4ba4      	ldr	r3, [pc, #656]	; (609c <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x9c>)
    5e0a:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
	usbd_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    5e0e:	f88b 2000 	strb.w	r2, [fp]
}

NRF_STATIC_INLINE uint8_t nrf_usbd_setup_brequest_get(NRF_USBD_Type const * p_reg)
{
    return (uint8_t)(p_reg->BREQUEST);
    5e12:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
	usbd_setup->bRequest = nrf_usbd_setup_brequest_get(NRF_USBD);
    5e16:	f88b 2001 	strb.w	r2, [fp, #1]
}

NRF_STATIC_INLINE uint16_t nrf_usbd_setup_wvalue_get(NRF_USBD_Type const * p_reg)
{
    const uint16_t val = p_reg->WVALUEL;
    5e1a:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    5e1e:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    5e20:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    5e24:	0209      	lsls	r1, r1, #8
    5e26:	b289      	uxth	r1, r1
    5e28:	430a      	orrs	r2, r1
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
    5e2a:	f8ab 2002 	strh.w	r2, [fp, #2]
}

NRF_STATIC_INLINE uint16_t nrf_usbd_setup_windex_get(NRF_USBD_Type const * p_reg)
{
    const uint16_t val = p_reg->WINDEXL;
    5e2e:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    5e32:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    5e34:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    5e38:	0209      	lsls	r1, r1, #8
    5e3a:	b289      	uxth	r1, r1
    5e3c:	430a      	orrs	r2, r1
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
    5e3e:	f8ab 2004 	strh.w	r2, [fp, #4]
}

NRF_STATIC_INLINE uint16_t nrf_usbd_setup_wlength_get(NRF_USBD_Type const * p_reg)
{
    const uint16_t val = p_reg->WLENGTHL;
    5e42:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    5e46:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    5e48:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    5e4c:	021b      	lsls	r3, r3, #8
    5e4e:	b29b      	uxth	r3, r3
    5e50:	4313      	orrs	r3, r2
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
    5e52:	f8ab 3006 	strh.w	r3, [fp, #6]
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    5e56:	2208      	movs	r2, #8
    5e58:	f8ca 200c 	str.w	r2, [sl, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    5e5c:	4659      	mov	r1, fp
    5e5e:	4890      	ldr	r0, [pc, #576]	; (60a0 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xa0>)
    5e60:	f00b f9c4 	bl	111ec <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    5e64:	f8da 3000 	ldr.w	r3, [sl]
    5e68:	2100      	movs	r1, #0
    5e6a:	f89a 0009 	ldrb.w	r0, [sl, #9]
    5e6e:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
    5e70:	f99b 3000 	ldrsb.w	r3, [fp]
    5e74:	2b00      	cmp	r3, #0
    5e76:	db02      	blt.n	5e7e <usbd_work_handler+0xd6>
    5e78:	f8bb 3006 	ldrh.w	r3, [fp, #6]
    5e7c:	b923      	cbnz	r3, 5e88 <usbd_work_handler+0xe0>
		ctx->ctrl_read_len = 0U;
    5e7e:	4b89      	ldr	r3, [pc, #548]	; (60a4 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xa4>)
    5e80:	2200      	movs	r2, #0
    5e82:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
}
    5e86:	e120      	b.n	60ca <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xca>
		ctx->ctrl_read_len = usbd_setup->wLength;
    5e88:	4a86      	ldr	r2, [pc, #536]	; (60a4 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xa4>)
    5e8a:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
    5e8e:	f004 fa09 	bl	a2a4 <nrfx_usbd_setup_data_clear>
    5e92:	e11a      	b.n	60ca <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xca>
	if (!ep_ctx->read_pending) {
    5e94:	f89a 301d 	ldrb.w	r3, [sl, #29]
    5e98:	2b00      	cmp	r3, #0
    5e9a:	f000 8116 	beq.w	60ca <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xca>
	if (!ep_ctx->read_complete) {
    5e9e:	f89a 301c 	ldrb.w	r3, [sl, #28]
    5ea2:	2b00      	cmp	r3, #0
    5ea4:	f000 8111 	beq.w	60ca <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xca>
	ep_ctx->read_pending = false;
    5ea8:	f04f 0b00 	mov.w	fp, #0
    5eac:	f88a b01d 	strb.w	fp, [sl, #29]
	ep_ctx->read_complete = false;
    5eb0:	f88a b01c 	strb.w	fp, [sl, #28]
	return z_impl_k_mutex_lock(mutex, timeout);
    5eb4:	f04f 32ff 	mov.w	r2, #4294967295
    5eb8:	f04f 33ff 	mov.w	r3, #4294967295
    5ebc:	487a      	ldr	r0, [pc, #488]	; (60a8 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xa8>)
    5ebe:	f007 ff8b 	bl	ddd8 <z_impl_k_mutex_lock>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    5ec2:	f8da 3014 	ldr.w	r3, [sl, #20]
    5ec6:	9301      	str	r3, [sp, #4]
    5ec8:	f8da 3004 	ldr.w	r3, [sl, #4]
    5ecc:	9302      	str	r3, [sp, #8]
    5ece:	f8cd b00c 	str.w	fp, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    5ed2:	a901      	add	r1, sp, #4
    5ed4:	f89a 0009 	ldrb.w	r0, [sl, #9]
    5ed8:	f003 fd98 	bl	9a0c <nrfx_usbd_ep_transfer>
    5edc:	4601      	mov	r1, r0
	if (err != NRFX_SUCCESS) {
    5ede:	4b73      	ldr	r3, [pc, #460]	; (60ac <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xac>)
    5ee0:	4298      	cmp	r0, r3
    5ee2:	d103      	bne.n	5eec <usbd_work_handler+0x144>
	return z_impl_k_mutex_unlock(mutex);
    5ee4:	4870      	ldr	r0, [pc, #448]	; (60a8 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xa8>)
    5ee6:	f008 f801 	bl	deec <z_impl_k_mutex_unlock>
    5eea:	e0ee      	b.n	60ca <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xca>
    5eec:	4b68      	ldr	r3, [pc, #416]	; (6090 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x90>)
    5eee:	4a69      	ldr	r2, [pc, #420]	; (6094 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x94>)
    5ef0:	1a9b      	subs	r3, r3, r2
    5ef2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("nRF USBD transfer error (OUT): 0x%02x", err);
    5ef4:	2201      	movs	r2, #1
    5ef6:	f362 0802 	bfi	r8, r2, #0, #3
    5efa:	f36f 08c5 	bfc	r8, #3, #3
    5efe:	f363 188f 	bfi	r8, r3, #6, #10
    5f02:	4642      	mov	r2, r8
    5f04:	486a      	ldr	r0, [pc, #424]	; (60b0 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xb0>)
    5f06:	f7fb fd9b 	bl	1a40 <log_1>
    5f0a:	e7eb      	b.n	5ee4 <usbd_work_handler+0x13c>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    5f0c:	f8da 3000 	ldr.w	r3, [sl]
    5f10:	2101      	movs	r1, #1
    5f12:	f89a 0009 	ldrb.w	r0, [sl, #9]
    5f16:	4798      	blx	r3
		break;
    5f18:	e0d7      	b.n	60ca <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xca>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    5f1a:	f89a 300a 	ldrb.w	r3, [sl, #10]
    5f1e:	b913      	cbnz	r3, 5f26 <usbd_work_handler+0x17e>
		    !ep_ctx->trans_zlp) {
    5f20:	f89a 301f 	ldrb.w	r3, [sl, #31]
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    5f24:	b133      	cbz	r3, 5f34 <usbd_work_handler+0x18c>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    5f26:	f8da 3000 	ldr.w	r3, [sl]
    5f2a:	2102      	movs	r1, #2
    5f2c:	f89a 0009 	ldrb.w	r0, [sl, #9]
    5f30:	4798      	blx	r3
}
    5f32:	e0ca      	b.n	60ca <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xca>
	return z_impl_k_mutex_lock(mutex, timeout);
    5f34:	f8df b170 	ldr.w	fp, [pc, #368]	; 60a8 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xa8>
    5f38:	f04f 32ff 	mov.w	r2, #4294967295
    5f3c:	f04f 33ff 	mov.w	r3, #4294967295
    5f40:	4658      	mov	r0, fp
    5f42:	f007 ff49 	bl	ddd8 <z_impl_k_mutex_lock>
			nrfx_usbd_setup_clear();
    5f46:	f004 f9ff 	bl	a348 <nrfx_usbd_setup_clear>
	return z_impl_k_mutex_unlock(mutex);
    5f4a:	4658      	mov	r0, fp
    5f4c:	f007 ffce 	bl	deec <z_impl_k_mutex_unlock>
    5f50:	e7e9      	b.n	5f26 <usbd_work_handler+0x17e>
	switch (pwr_evt->state) {
    5f52:	7a23      	ldrb	r3, [r4, #8]
    5f54:	2b04      	cmp	r3, #4
    5f56:	f200 80b8 	bhi.w	60ca <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xca>
    5f5a:	e8df f003 	tbb	[pc, r3]
    5f5e:	0322      	.short	0x0322
    5f60:	350e      	.short	0x350e
    5f62:	44          	.byte	0x44
    5f63:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
    5f64:	f003 fce0 	bl	9928 <nrfx_usbd_is_enabled>
    5f68:	2800      	cmp	r0, #0
    5f6a:	f040 80ae 	bne.w	60ca <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xca>
			nrfx_usbd_enable();
    5f6e:	f003 fc25 	bl	97bc <nrfx_usbd_enable>
			err = hfxo_start(ctx);
    5f72:	484c      	ldr	r0, [pc, #304]	; (60a4 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xa4>)
    5f74:	f00b fcc6 	bl	11904 <hfxo_start>
    5f78:	e0a7      	b.n	60ca <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xca>
		usbd_enable_endpoints(ctx);
    5f7a:	f8df a128 	ldr.w	sl, [pc, #296]	; 60a4 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xa4>
    5f7e:	4650      	mov	r0, sl
    5f80:	f00b fc8e 	bl	118a0 <usbd_enable_endpoints>
		nrfx_usbd_start(true);
    5f84:	2001      	movs	r0, #1
    5f86:	f003 fcb3 	bl	98f0 <nrfx_usbd_start>
		ctx->ready = true;
    5f8a:	2301      	movs	r3, #1
    5f8c:	f88a 3025 	strb.w	r3, [sl, #37]	; 0x25
		if (ctx->status_cb) {
    5f90:	f8da 3000 	ldr.w	r3, [sl]
    5f94:	2b00      	cmp	r3, #0
    5f96:	f000 8098 	beq.w	60ca <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xca>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    5f9a:	2100      	movs	r1, #0
    5f9c:	2002      	movs	r0, #2
    5f9e:	4798      	blx	r3
    5fa0:	e093      	b.n	60ca <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xca>
		ctx->ready = false;
    5fa2:	f8df a100 	ldr.w	sl, [pc, #256]	; 60a4 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xa4>
    5fa6:	2300      	movs	r3, #0
    5fa8:	f88a 3025 	strb.w	r3, [sl, #37]	; 0x25
		nrfx_usbd_disable();
    5fac:	f004 fc82 	bl	a8b4 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
    5fb0:	4650      	mov	r0, sl
    5fb2:	f00b fc54 	bl	1185e <hfxo_stop>
		if (ctx->status_cb) {
    5fb6:	f8da 3000 	ldr.w	r3, [sl]
    5fba:	2b00      	cmp	r3, #0
    5fbc:	f000 8085 	beq.w	60ca <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xca>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    5fc0:	2100      	movs	r1, #0
    5fc2:	2004      	movs	r0, #4
    5fc4:	4798      	blx	r3
    5fc6:	e080      	b.n	60ca <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xca>
	return get_usbd_ctx()->ready;
    5fc8:	4b36      	ldr	r3, [pc, #216]	; (60a4 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xa4>)
    5fca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		if (dev_ready()) {
    5fce:	2b00      	cmp	r3, #0
    5fd0:	d07b      	beq.n	60ca <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xca>
			nrfx_usbd_suspend();
    5fd2:	f004 fc91 	bl	a8f8 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    5fd6:	4b33      	ldr	r3, [pc, #204]	; (60a4 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xa4>)
    5fd8:	681b      	ldr	r3, [r3, #0]
    5fda:	2b00      	cmp	r3, #0
    5fdc:	d075      	beq.n	60ca <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xca>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    5fde:	2100      	movs	r1, #0
    5fe0:	2005      	movs	r0, #5
    5fe2:	4798      	blx	r3
    5fe4:	e071      	b.n	60ca <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xca>
		if (ctx->status_cb && dev_ready()) {
    5fe6:	4b2f      	ldr	r3, [pc, #188]	; (60a4 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xa4>)
    5fe8:	681b      	ldr	r3, [r3, #0]
    5fea:	2b00      	cmp	r3, #0
    5fec:	d06d      	beq.n	60ca <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xca>
	return get_usbd_ctx()->ready;
    5fee:	4a2d      	ldr	r2, [pc, #180]	; (60a4 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xa4>)
    5ff0:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
		if (ctx->status_cb && dev_ready()) {
    5ff4:	2a00      	cmp	r2, #0
    5ff6:	d068      	beq.n	60ca <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xca>
			ctx->status_cb(USB_DC_RESUME, NULL);
    5ff8:	2100      	movs	r1, #0
    5ffa:	2006      	movs	r0, #6
    5ffc:	4798      	blx	r3
}
    5ffe:	e064      	b.n	60ca <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xca>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    6000:	f105 0a10 	add.w	sl, r5, #16
	return z_impl_k_mutex_lock(mutex, timeout);
    6004:	f04f 32ff 	mov.w	r2, #4294967295
    6008:	f04f 33ff 	mov.w	r3, #4294967295
    600c:	4650      	mov	r0, sl
    600e:	f007 fee3 	bl	ddd8 <z_impl_k_mutex_lock>
			eps_ctx_init();
    6012:	f7ff fd37 	bl	5a84 <eps_ctx_init>
	return z_impl_k_mutex_unlock(mutex);
    6016:	4650      	mov	r0, sl
    6018:	f007 ff68 	bl	deec <z_impl_k_mutex_unlock>
			if (ctx->status_cb) {
    601c:	f855 3c28 	ldr.w	r3, [r5, #-40]
    6020:	2b00      	cmp	r3, #0
    6022:	d052      	beq.n	60ca <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xca>
				ctx->status_cb(USB_DC_RESET, NULL);
    6024:	2100      	movs	r1, #0
    6026:	2001      	movs	r0, #1
    6028:	4798      	blx	r3
    602a:	e04e      	b.n	60ca <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xca>
			usbd_sof_trigger_iso_read();
    602c:	f7ff fe1c 	bl	5c68 <usbd_sof_trigger_iso_read>
			if (ctx->status_cb) {
    6030:	f855 3c28 	ldr.w	r3, [r5, #-40]
    6034:	2b00      	cmp	r3, #0
    6036:	d048      	beq.n	60ca <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xca>
				ctx->status_cb(USB_DC_SOF, NULL);
    6038:	2100      	movs	r1, #0
    603a:	200a      	movs	r0, #10
    603c:	4798      	blx	r3
    603e:	e044      	b.n	60ca <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xca>
    6040:	4b13      	ldr	r3, [pc, #76]	; (6090 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x90>)
    6042:	4a14      	ldr	r2, [pc, #80]	; (6094 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x94>)
    6044:	1a9b      	subs	r3, r3, r2
    6046:	08db      	lsrs	r3, r3, #3
				LOG_ERR("USBD event queue full!");
    6048:	2201      	movs	r2, #1
    604a:	f362 0602 	bfi	r6, r2, #0, #3
    604e:	f36f 06c5 	bfc	r6, #3, #3
    6052:	f363 168f 	bfi	r6, r3, #6, #10
    6056:	4631      	mov	r1, r6
    6058:	4816      	ldr	r0, [pc, #88]	; (60b4 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xb4>)
    605a:	f7fb fd85 	bl	1b68 <log_0>
	nrfx_power_usbevt_disable();
    605e:	f00c f963 	bl	12328 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
    6062:	f004 fc27 	bl	a8b4 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    6066:	f003 fb9f 	bl	97a8 <nrfx_usbd_uninit>
static inline void usbd_evt_flush(void)
    606a:	e006      	b.n	607a <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x7a>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    606c:	1d01      	adds	r1, r0, #4
    606e:	4807      	ldr	r0, [pc, #28]	; (608c <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x8c>)
    6070:	f00d fbdc 	bl	1382c <k_mem_slab_free>
	} while (ev != NULL);
    6074:	f1ba 0f00 	cmp.w	sl, #0
    6078:	d020      	beq.n	60bc <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xbc>
	return z_impl_k_queue_get(queue, timeout);
    607a:	2200      	movs	r2, #0
    607c:	2300      	movs	r3, #0
    607e:	480e      	ldr	r0, [pc, #56]	; (60b8 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xb8>)
    6080:	f007 ff78 	bl	df74 <z_impl_k_queue_get>
		if (ev) {
    6084:	4682      	mov	sl, r0
    6086:	2800      	cmp	r0, #0
    6088:	d1f0      	bne.n	606c <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x6c>
    608a:	e7f3      	b.n	6074 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x74>
    608c:	200002e8 	.word	0x200002e8
    6090:	00014380 	.word	0x00014380
    6094:	00014318 	.word	0x00014318
    6098:	00015468 	.word	0x00015468
    609c:	40027000 	.word	0x40027000
    60a0:	20002004 	.word	0x20002004
    60a4:	20002000 	.word	0x20002000
    60a8:	20002038 	.word	0x20002038
    60ac:	0bad0000 	.word	0x0bad0000
    60b0:	00015490 	.word	0x00015490
    60b4:	000154b8 	.word	0x000154b8
    60b8:	200003ec 	.word	0x200003ec
	ret = eps_ctx_init();
    60bc:	f7ff fce2 	bl	5a84 <eps_ctx_init>
	nrfx_power_usbevt_enable();
    60c0:	f00c f92b 	bl	1231a <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    60c4:	481c      	ldr	r0, [pc, #112]	; (6138 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x138>)
    60c6:	f003 fc49 	bl	995c <nrfx_usbd_init>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    60ca:	1d21      	adds	r1, r4, #4
    60cc:	481b      	ldr	r0, [pc, #108]	; (613c <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x13c>)
    60ce:	f00d fbad 	bl	1382c <k_mem_slab_free>
    60d2:	2200      	movs	r2, #0
    60d4:	2300      	movs	r3, #0
    60d6:	481a      	ldr	r0, [pc, #104]	; (6140 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x140>)
    60d8:	f007 ff4c 	bl	df74 <z_impl_k_queue_get>
	while ((ev = usbd_evt_get()) != NULL) {
    60dc:	4604      	mov	r4, r0
    60de:	b338      	cbz	r0, 6130 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x130>
	return get_usbd_ctx()->ready;
    60e0:	4b18      	ldr	r3, [pc, #96]	; (6144 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x144>)
    60e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    60e6:	b91b      	cbnz	r3, 60f0 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xf0>
    60e8:	7c23      	ldrb	r3, [r4, #16]
    60ea:	2b00      	cmp	r3, #0
    60ec:	f47f ae61 	bne.w	5db2 <usbd_work_handler+0xa>
		switch (ev->evt_type) {
    60f0:	7c21      	ldrb	r1, [r4, #16]
    60f2:	2904      	cmp	r1, #4
    60f4:	d80c      	bhi.n	6110 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x110>
    60f6:	a301      	add	r3, pc, #4	; (adr r3, 60fc <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xfc>)
    60f8:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    60fc:	00005f53 	.word	0x00005f53
    6100:	00005dbd 	.word	0x00005dbd
    6104:	00006001 	.word	0x00006001
    6108:	0000602d 	.word	0x0000602d
    610c:	00006041 	.word	0x00006041
    6110:	4b0d      	ldr	r3, [pc, #52]	; (6148 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x148>)
    6112:	4a0e      	ldr	r2, [pc, #56]	; (614c <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x14c>)
    6114:	1a9b      	subs	r3, r3, r2
    6116:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    6118:	2201      	movs	r2, #1
    611a:	f362 0902 	bfi	r9, r2, #0, #3
    611e:	f36f 09c5 	bfc	r9, #3, #3
    6122:	f363 198f 	bfi	r9, r3, #6, #10
    6126:	464a      	mov	r2, r9
    6128:	4809      	ldr	r0, [pc, #36]	; (6150 <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0x150>)
    612a:	f7fb fc89 	bl	1a40 <log_1>
    612e:	e7cc      	b.n	60ca <CONFIG_PM_PARTITION_SIZE_LITTLEFS+0xca>
}
    6130:	b005      	add	sp, #20
    6132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6136:	bf00      	nop
    6138:	000067b1 	.word	0x000067b1
    613c:	200002e8 	.word	0x200002e8
    6140:	200003ec 	.word	0x200003ec
    6144:	20002000 	.word	0x20002000
    6148:	00014380 	.word	0x00014380
    614c:	00014318 	.word	0x00014318
    6150:	000154d0 	.word	0x000154d0

00006154 <usbd_event_transfer_ctrl>:
{
    6154:	b570      	push	{r4, r5, r6, lr}
    6156:	b082      	sub	sp, #8
    6158:	4604      	mov	r4, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
    615a:	7886      	ldrb	r6, [r0, #2]
    615c:	4630      	mov	r0, r6
    615e:	f7ff fc5d 	bl	5a1c <endpoint_ctx>
    6162:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    6164:	f016 0f80 	tst.w	r6, #128	; 0x80
    6168:	d122      	bne.n	61b0 <usbd_event_transfer_ctrl+0x5c>
		switch (p_event->data.eptransfer.status) {
    616a:	78e1      	ldrb	r1, [r4, #3]
    616c:	2900      	cmp	r1, #0
    616e:	f000 80d8 	beq.w	6322 <usbd_event_transfer_ctrl+0x1ce>
    6172:	2901      	cmp	r1, #1
    6174:	f040 815c 	bne.w	6430 <usbd_event_transfer_ctrl+0x2dc>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    6178:	2200      	movs	r2, #0
    617a:	2300      	movs	r3, #0
    617c:	a901      	add	r1, sp, #4
    617e:	48b6      	ldr	r0, [pc, #728]	; (6458 <usbd_event_transfer_ctrl+0x304>)
    6180:	f007 fcf0 	bl	db64 <k_mem_slab_alloc>
    6184:	2800      	cmp	r0, #0
    6186:	f040 8089 	bne.w	629c <usbd_event_transfer_ctrl+0x148>
	ev = (struct usbd_event *)block.data;
    618a:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    618c:	6064      	str	r4, [r4, #4]
			if (!ev) {
    618e:	2c00      	cmp	r4, #0
    6190:	f000 815f 	beq.w	6452 <usbd_event_transfer_ctrl+0x2fe>
			ep_ctx->read_pending = true;
    6194:	2301      	movs	r3, #1
    6196:	776b      	strb	r3, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    6198:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    619a:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    619c:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    619e:	4621      	mov	r1, r4
    61a0:	48ae      	ldr	r0, [pc, #696]	; (645c <usbd_event_transfer_ctrl+0x308>)
    61a2:	f00d fc66 	bl	13a72 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    61a6:	49ae      	ldr	r1, [pc, #696]	; (6460 <usbd_event_transfer_ctrl+0x30c>)
    61a8:	48ae      	ldr	r0, [pc, #696]	; (6464 <usbd_event_transfer_ctrl+0x310>)
    61aa:	f00d fc83 	bl	13ab4 <k_work_submit_to_queue>
}
    61ae:	e150      	b.n	6452 <usbd_event_transfer_ctrl+0x2fe>
		switch (p_event->data.eptransfer.status) {
    61b0:	78e1      	ldrb	r1, [r4, #3]
    61b2:	b1a1      	cbz	r1, 61de <usbd_event_transfer_ctrl+0x8a>
    61b4:	2903      	cmp	r1, #3
    61b6:	f000 814c 	beq.w	6452 <usbd_event_transfer_ctrl+0x2fe>
    61ba:	4aab      	ldr	r2, [pc, #684]	; (6468 <usbd_event_transfer_ctrl+0x314>)
    61bc:	4bab      	ldr	r3, [pc, #684]	; (646c <usbd_event_transfer_ctrl+0x318>)
    61be:	1ad2      	subs	r2, r2, r3
    61c0:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    61c2:	f04f 0300 	mov.w	r3, #0
    61c6:	2001      	movs	r0, #1
    61c8:	f360 0302 	bfi	r3, r0, #0, #3
    61cc:	f36f 03c5 	bfc	r3, #3, #3
    61d0:	f362 138f 	bfi	r3, r2, #6, #10
    61d4:	4632      	mov	r2, r6
    61d6:	48a6      	ldr	r0, [pc, #664]	; (6470 <usbd_event_transfer_ctrl+0x31c>)
    61d8:	f7fb fc68 	bl	1aac <log_2>
    61dc:	e139      	b.n	6452 <usbd_event_transfer_ctrl+0x2fe>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    61de:	2200      	movs	r2, #0
    61e0:	2300      	movs	r3, #0
    61e2:	a901      	add	r1, sp, #4
    61e4:	489c      	ldr	r0, [pc, #624]	; (6458 <usbd_event_transfer_ctrl+0x304>)
    61e6:	f007 fcbd 	bl	db64 <k_mem_slab_alloc>
    61ea:	b9a0      	cbnz	r0, 6216 <usbd_event_transfer_ctrl+0xc2>
	ev = (struct usbd_event *)block.data;
    61ec:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    61ee:	6064      	str	r4, [r4, #4]
			if (!ev) {
    61f0:	2c00      	cmp	r4, #0
    61f2:	f000 812e 	beq.w	6452 <usbd_event_transfer_ctrl+0x2fe>
			ep_ctx->write_in_progress = false;
    61f6:	2300      	movs	r3, #0
    61f8:	77ab      	strb	r3, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    61fa:	2301      	movs	r3, #1
    61fc:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    61fe:	2303      	movs	r3, #3
    6200:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    6202:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    6204:	4621      	mov	r1, r4
    6206:	4895      	ldr	r0, [pc, #596]	; (645c <usbd_event_transfer_ctrl+0x308>)
    6208:	f00d fc33 	bl	13a72 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    620c:	4994      	ldr	r1, [pc, #592]	; (6460 <usbd_event_transfer_ctrl+0x30c>)
    620e:	4895      	ldr	r0, [pc, #596]	; (6464 <usbd_event_transfer_ctrl+0x310>)
    6210:	f00d fc50 	bl	13ab4 <k_work_submit_to_queue>
}
    6214:	e11d      	b.n	6452 <usbd_event_transfer_ctrl+0x2fe>
    6216:	4b94      	ldr	r3, [pc, #592]	; (6468 <usbd_event_transfer_ctrl+0x314>)
    6218:	4a94      	ldr	r2, [pc, #592]	; (646c <usbd_event_transfer_ctrl+0x318>)
    621a:	1a9b      	subs	r3, r3, r2
    621c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    621e:	f04f 0100 	mov.w	r1, #0
    6222:	2201      	movs	r2, #1
    6224:	f362 0102 	bfi	r1, r2, #0, #3
    6228:	f36f 01c5 	bfc	r1, #3, #3
    622c:	f363 118f 	bfi	r1, r3, #6, #10
    6230:	4890      	ldr	r0, [pc, #576]	; (6474 <usbd_event_transfer_ctrl+0x320>)
    6232:	f7fb fc99 	bl	1b68 <log_0>
static inline void usbd_evt_flush(void)
    6236:	e000      	b.n	623a <usbd_event_transfer_ctrl+0xe6>
	} while (ev != NULL);
    6238:	b164      	cbz	r4, 6254 <usbd_event_transfer_ctrl+0x100>
    623a:	2200      	movs	r2, #0
    623c:	2300      	movs	r3, #0
    623e:	4887      	ldr	r0, [pc, #540]	; (645c <usbd_event_transfer_ctrl+0x308>)
    6240:	f007 fe98 	bl	df74 <z_impl_k_queue_get>
		if (ev) {
    6244:	4604      	mov	r4, r0
    6246:	2800      	cmp	r0, #0
    6248:	d0f6      	beq.n	6238 <usbd_event_transfer_ctrl+0xe4>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    624a:	1d01      	adds	r1, r0, #4
    624c:	4882      	ldr	r0, [pc, #520]	; (6458 <usbd_event_transfer_ctrl+0x304>)
    624e:	f00d faed 	bl	1382c <k_mem_slab_free>
}
    6252:	e7f1      	b.n	6238 <usbd_event_transfer_ctrl+0xe4>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    6254:	2200      	movs	r2, #0
    6256:	2300      	movs	r3, #0
    6258:	a901      	add	r1, sp, #4
    625a:	487f      	ldr	r0, [pc, #508]	; (6458 <usbd_event_transfer_ctrl+0x304>)
    625c:	f007 fc82 	bl	db64 <k_mem_slab_alloc>
    6260:	b180      	cbz	r0, 6284 <usbd_event_transfer_ctrl+0x130>
    6262:	4b81      	ldr	r3, [pc, #516]	; (6468 <usbd_event_transfer_ctrl+0x314>)
    6264:	4a81      	ldr	r2, [pc, #516]	; (646c <usbd_event_transfer_ctrl+0x318>)
    6266:	1a9b      	subs	r3, r3, r2
    6268:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    626a:	f04f 0100 	mov.w	r1, #0
    626e:	2201      	movs	r2, #1
    6270:	f362 0102 	bfi	r1, r2, #0, #3
    6274:	f36f 01c5 	bfc	r1, #3, #3
    6278:	f363 118f 	bfi	r1, r3, #6, #10
    627c:	487e      	ldr	r0, [pc, #504]	; (6478 <usbd_event_transfer_ctrl+0x324>)
    627e:	f7fb fc73 	bl	1b68 <log_0>
			return NULL;
    6282:	e7b5      	b.n	61f0 <usbd_event_transfer_ctrl+0x9c>
		ev = (struct usbd_event *)block.data;
    6284:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    6286:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    6288:	2304      	movs	r3, #4
    628a:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    628c:	4873      	ldr	r0, [pc, #460]	; (645c <usbd_event_transfer_ctrl+0x308>)
    628e:	f00d fbf0 	bl	13a72 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    6292:	4973      	ldr	r1, [pc, #460]	; (6460 <usbd_event_transfer_ctrl+0x30c>)
    6294:	4873      	ldr	r0, [pc, #460]	; (6464 <usbd_event_transfer_ctrl+0x310>)
    6296:	f00d fc0d 	bl	13ab4 <k_work_submit_to_queue>
		return NULL;
    629a:	e7a9      	b.n	61f0 <usbd_event_transfer_ctrl+0x9c>
    629c:	4b72      	ldr	r3, [pc, #456]	; (6468 <usbd_event_transfer_ctrl+0x314>)
    629e:	4a73      	ldr	r2, [pc, #460]	; (646c <usbd_event_transfer_ctrl+0x318>)
    62a0:	1a9b      	subs	r3, r3, r2
    62a2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    62a4:	f04f 0100 	mov.w	r1, #0
    62a8:	2201      	movs	r2, #1
    62aa:	f362 0102 	bfi	r1, r2, #0, #3
    62ae:	f36f 01c5 	bfc	r1, #3, #3
    62b2:	f363 118f 	bfi	r1, r3, #6, #10
    62b6:	486f      	ldr	r0, [pc, #444]	; (6474 <usbd_event_transfer_ctrl+0x320>)
    62b8:	f7fb fc56 	bl	1b68 <log_0>
static inline void usbd_evt_flush(void)
    62bc:	e004      	b.n	62c8 <usbd_event_transfer_ctrl+0x174>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    62be:	1d01      	adds	r1, r0, #4
    62c0:	4865      	ldr	r0, [pc, #404]	; (6458 <usbd_event_transfer_ctrl+0x304>)
    62c2:	f00d fab3 	bl	1382c <k_mem_slab_free>
	} while (ev != NULL);
    62c6:	b144      	cbz	r4, 62da <usbd_event_transfer_ctrl+0x186>
    62c8:	2200      	movs	r2, #0
    62ca:	2300      	movs	r3, #0
    62cc:	4863      	ldr	r0, [pc, #396]	; (645c <usbd_event_transfer_ctrl+0x308>)
    62ce:	f007 fe51 	bl	df74 <z_impl_k_queue_get>
		if (ev) {
    62d2:	4604      	mov	r4, r0
    62d4:	2800      	cmp	r0, #0
    62d6:	d1f2      	bne.n	62be <usbd_event_transfer_ctrl+0x16a>
    62d8:	e7f5      	b.n	62c6 <usbd_event_transfer_ctrl+0x172>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    62da:	2200      	movs	r2, #0
    62dc:	2300      	movs	r3, #0
    62de:	a901      	add	r1, sp, #4
    62e0:	485d      	ldr	r0, [pc, #372]	; (6458 <usbd_event_transfer_ctrl+0x304>)
    62e2:	f007 fc3f 	bl	db64 <k_mem_slab_alloc>
    62e6:	b180      	cbz	r0, 630a <usbd_event_transfer_ctrl+0x1b6>
    62e8:	4b5f      	ldr	r3, [pc, #380]	; (6468 <usbd_event_transfer_ctrl+0x314>)
    62ea:	4a60      	ldr	r2, [pc, #384]	; (646c <usbd_event_transfer_ctrl+0x318>)
    62ec:	1a9b      	subs	r3, r3, r2
    62ee:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    62f0:	f04f 0100 	mov.w	r1, #0
    62f4:	2201      	movs	r2, #1
    62f6:	f362 0102 	bfi	r1, r2, #0, #3
    62fa:	f36f 01c5 	bfc	r1, #3, #3
    62fe:	f363 118f 	bfi	r1, r3, #6, #10
    6302:	485d      	ldr	r0, [pc, #372]	; (6478 <usbd_event_transfer_ctrl+0x324>)
    6304:	f7fb fc30 	bl	1b68 <log_0>
			return NULL;
    6308:	e741      	b.n	618e <usbd_event_transfer_ctrl+0x3a>
		ev = (struct usbd_event *)block.data;
    630a:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    630c:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    630e:	2304      	movs	r3, #4
    6310:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    6312:	4852      	ldr	r0, [pc, #328]	; (645c <usbd_event_transfer_ctrl+0x308>)
    6314:	f00d fbad 	bl	13a72 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    6318:	4951      	ldr	r1, [pc, #324]	; (6460 <usbd_event_transfer_ctrl+0x30c>)
    631a:	4852      	ldr	r0, [pc, #328]	; (6464 <usbd_event_transfer_ctrl+0x310>)
    631c:	f00d fbca 	bl	13ab4 <k_work_submit_to_queue>
		return NULL;
    6320:	e735      	b.n	618e <usbd_event_transfer_ctrl+0x3a>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    6322:	2200      	movs	r2, #0
    6324:	2300      	movs	r3, #0
    6326:	a901      	add	r1, sp, #4
    6328:	484b      	ldr	r0, [pc, #300]	; (6458 <usbd_event_transfer_ctrl+0x304>)
    632a:	f007 fc1b 	bl	db64 <k_mem_slab_alloc>
    632e:	bb20      	cbnz	r0, 637a <usbd_event_transfer_ctrl+0x226>
	ev = (struct usbd_event *)block.data;
    6330:	9e01      	ldr	r6, [sp, #4]
	ev->block = block;
    6332:	6076      	str	r6, [r6, #4]
			if (!ev) {
    6334:	2e00      	cmp	r6, #0
    6336:	f000 808c 	beq.w	6452 <usbd_event_transfer_ctrl+0x2fe>
			ev->evt_type = USBD_EVT_EP;
    633a:	2301      	movs	r3, #1
    633c:	7433      	strb	r3, [r6, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    633e:	2302      	movs	r3, #2
    6340:	7333      	strb	r3, [r6, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    6342:	60b5      	str	r5, [r6, #8]
			err_code = nrfx_usbd_ep_status_get(
    6344:	f105 010c 	add.w	r1, r5, #12
    6348:	78a0      	ldrb	r0, [r4, #2]
    634a:	f003 fbf5 	bl	9b38 <nrfx_usbd_ep_status_get>
			if (err_code != NRFX_USBD_EP_OK) {
    634e:	4601      	mov	r1, r0
    6350:	2800      	cmp	r0, #0
    6352:	d155      	bne.n	6400 <usbd_event_transfer_ctrl+0x2ac>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    6354:	4b49      	ldr	r3, [pc, #292]	; (647c <usbd_event_transfer_ctrl+0x328>)
    6356:	f8b3 328c 	ldrh.w	r3, [r3, #652]	; 0x28c
    635a:	68ea      	ldr	r2, [r5, #12]
    635c:	4293      	cmp	r3, r2
    635e:	d860      	bhi.n	6422 <usbd_event_transfer_ctrl+0x2ce>
				ctx->ctrl_read_len = 0U;
    6360:	4b46      	ldr	r3, [pc, #280]	; (647c <usbd_event_transfer_ctrl+0x328>)
    6362:	2200      	movs	r2, #0
    6364:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
	k_fifo_put(&usbd_evt_fifo, ev);
    6368:	4631      	mov	r1, r6
    636a:	483c      	ldr	r0, [pc, #240]	; (645c <usbd_event_transfer_ctrl+0x308>)
    636c:	f00d fb81 	bl	13a72 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    6370:	493b      	ldr	r1, [pc, #236]	; (6460 <usbd_event_transfer_ctrl+0x30c>)
    6372:	483c      	ldr	r0, [pc, #240]	; (6464 <usbd_event_transfer_ctrl+0x310>)
    6374:	f00d fb9e 	bl	13ab4 <k_work_submit_to_queue>
}
    6378:	e06b      	b.n	6452 <usbd_event_transfer_ctrl+0x2fe>
    637a:	4b3b      	ldr	r3, [pc, #236]	; (6468 <usbd_event_transfer_ctrl+0x314>)
    637c:	4a3b      	ldr	r2, [pc, #236]	; (646c <usbd_event_transfer_ctrl+0x318>)
    637e:	1a9b      	subs	r3, r3, r2
    6380:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    6382:	f04f 0100 	mov.w	r1, #0
    6386:	2201      	movs	r2, #1
    6388:	f362 0102 	bfi	r1, r2, #0, #3
    638c:	f36f 01c5 	bfc	r1, #3, #3
    6390:	f363 118f 	bfi	r1, r3, #6, #10
    6394:	4837      	ldr	r0, [pc, #220]	; (6474 <usbd_event_transfer_ctrl+0x320>)
    6396:	f7fb fbe7 	bl	1b68 <log_0>
static inline void usbd_evt_flush(void)
    639a:	e004      	b.n	63a6 <usbd_event_transfer_ctrl+0x252>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    639c:	1d01      	adds	r1, r0, #4
    639e:	482e      	ldr	r0, [pc, #184]	; (6458 <usbd_event_transfer_ctrl+0x304>)
    63a0:	f00d fa44 	bl	1382c <k_mem_slab_free>
	} while (ev != NULL);
    63a4:	b146      	cbz	r6, 63b8 <usbd_event_transfer_ctrl+0x264>
    63a6:	2200      	movs	r2, #0
    63a8:	2300      	movs	r3, #0
    63aa:	482c      	ldr	r0, [pc, #176]	; (645c <usbd_event_transfer_ctrl+0x308>)
    63ac:	f007 fde2 	bl	df74 <z_impl_k_queue_get>
		if (ev) {
    63b0:	4606      	mov	r6, r0
    63b2:	2800      	cmp	r0, #0
    63b4:	d1f2      	bne.n	639c <usbd_event_transfer_ctrl+0x248>
    63b6:	e7f5      	b.n	63a4 <usbd_event_transfer_ctrl+0x250>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    63b8:	2200      	movs	r2, #0
    63ba:	2300      	movs	r3, #0
    63bc:	a901      	add	r1, sp, #4
    63be:	4826      	ldr	r0, [pc, #152]	; (6458 <usbd_event_transfer_ctrl+0x304>)
    63c0:	f007 fbd0 	bl	db64 <k_mem_slab_alloc>
    63c4:	b180      	cbz	r0, 63e8 <usbd_event_transfer_ctrl+0x294>
    63c6:	4b28      	ldr	r3, [pc, #160]	; (6468 <usbd_event_transfer_ctrl+0x314>)
    63c8:	4a28      	ldr	r2, [pc, #160]	; (646c <usbd_event_transfer_ctrl+0x318>)
    63ca:	1a9b      	subs	r3, r3, r2
    63cc:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    63ce:	f04f 0100 	mov.w	r1, #0
    63d2:	2201      	movs	r2, #1
    63d4:	f362 0102 	bfi	r1, r2, #0, #3
    63d8:	f36f 01c5 	bfc	r1, #3, #3
    63dc:	f363 118f 	bfi	r1, r3, #6, #10
    63e0:	4825      	ldr	r0, [pc, #148]	; (6478 <usbd_event_transfer_ctrl+0x324>)
    63e2:	f7fb fbc1 	bl	1b68 <log_0>
			return NULL;
    63e6:	e7a5      	b.n	6334 <usbd_event_transfer_ctrl+0x1e0>
		ev = (struct usbd_event *)block.data;
    63e8:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    63ea:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    63ec:	2304      	movs	r3, #4
    63ee:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    63f0:	481a      	ldr	r0, [pc, #104]	; (645c <usbd_event_transfer_ctrl+0x308>)
    63f2:	f00d fb3e 	bl	13a72 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    63f6:	491a      	ldr	r1, [pc, #104]	; (6460 <usbd_event_transfer_ctrl+0x30c>)
    63f8:	481a      	ldr	r0, [pc, #104]	; (6464 <usbd_event_transfer_ctrl+0x310>)
    63fa:	f00d fb5b 	bl	13ab4 <k_work_submit_to_queue>
		return NULL;
    63fe:	e799      	b.n	6334 <usbd_event_transfer_ctrl+0x1e0>
    6400:	4b19      	ldr	r3, [pc, #100]	; (6468 <usbd_event_transfer_ctrl+0x314>)
    6402:	4a1a      	ldr	r2, [pc, #104]	; (646c <usbd_event_transfer_ctrl+0x318>)
    6404:	1a9b      	subs	r3, r3, r2
    6406:	08db      	lsrs	r3, r3, #3
				LOG_ERR("_ep_status_get failed! Code: %d",
    6408:	f04f 0200 	mov.w	r2, #0
    640c:	2001      	movs	r0, #1
    640e:	f360 0202 	bfi	r2, r0, #0, #3
    6412:	f36f 02c5 	bfc	r2, #3, #3
    6416:	f363 128f 	bfi	r2, r3, #6, #10
    641a:	4819      	ldr	r0, [pc, #100]	; (6480 <usbd_event_transfer_ctrl+0x32c>)
    641c:	f7fb fb10 	bl	1a40 <log_1>
    6420:	e798      	b.n	6354 <usbd_event_transfer_ctrl+0x200>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    6422:	1a9b      	subs	r3, r3, r2
    6424:	4a15      	ldr	r2, [pc, #84]	; (647c <usbd_event_transfer_ctrl+0x328>)
    6426:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
    642a:	f003 ff3b 	bl	a2a4 <nrfx_usbd_setup_data_clear>
    642e:	e79b      	b.n	6368 <usbd_event_transfer_ctrl+0x214>
    6430:	4a0d      	ldr	r2, [pc, #52]	; (6468 <usbd_event_transfer_ctrl+0x314>)
    6432:	4b0e      	ldr	r3, [pc, #56]	; (646c <usbd_event_transfer_ctrl+0x318>)
    6434:	1ad2      	subs	r2, r2, r3
    6436:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    6438:	f04f 0300 	mov.w	r3, #0
    643c:	2001      	movs	r0, #1
    643e:	f360 0302 	bfi	r3, r0, #0, #3
    6442:	f36f 03c5 	bfc	r3, #3, #3
    6446:	f362 138f 	bfi	r3, r2, #6, #10
    644a:	4632      	mov	r2, r6
    644c:	4808      	ldr	r0, [pc, #32]	; (6470 <usbd_event_transfer_ctrl+0x31c>)
    644e:	f7fb fb2d 	bl	1aac <log_2>
}
    6452:	b002      	add	sp, #8
    6454:	bd70      	pop	{r4, r5, r6, pc}
    6456:	bf00      	nop
    6458:	200002e8 	.word	0x200002e8
    645c:	200003ec 	.word	0x200003ec
    6460:	20002028 	.word	0x20002028
    6464:	20000698 	.word	0x20000698
    6468:	00014380 	.word	0x00014380
    646c:	00014318 	.word	0x00014318
    6470:	000154e8 	.word	0x000154e8
    6474:	000153e8 	.word	0x000153e8
    6478:	00015408 	.word	0x00015408
    647c:	20002000 	.word	0x20002000
    6480:	00015514 	.word	0x00015514

00006484 <usbd_event_transfer_data>:
{
    6484:	b570      	push	{r4, r5, r6, lr}
    6486:	b082      	sub	sp, #8
    6488:	4604      	mov	r4, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
    648a:	7886      	ldrb	r6, [r0, #2]
    648c:	4630      	mov	r0, r6
    648e:	f7ff fac5 	bl	5a1c <endpoint_ctx>
    6492:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    6494:	f016 0f80 	tst.w	r6, #128	; 0x80
    6498:	d122      	bne.n	64e0 <usbd_event_transfer_data+0x5c>
		switch (p_event->data.eptransfer.status) {
    649a:	78e1      	ldrb	r1, [r4, #3]
    649c:	2900      	cmp	r1, #0
    649e:	f000 80d8 	beq.w	6652 <usbd_event_transfer_data+0x1ce>
    64a2:	2901      	cmp	r1, #1
    64a4:	f040 815d 	bne.w	6762 <usbd_event_transfer_data+0x2de>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    64a8:	2200      	movs	r2, #0
    64aa:	2300      	movs	r3, #0
    64ac:	a901      	add	r1, sp, #4
    64ae:	48b6      	ldr	r0, [pc, #728]	; (6788 <usbd_event_transfer_data+0x304>)
    64b0:	f007 fb58 	bl	db64 <k_mem_slab_alloc>
    64b4:	2800      	cmp	r0, #0
    64b6:	f040 8089 	bne.w	65cc <usbd_event_transfer_data+0x148>
	ev = (struct usbd_event *)block.data;
    64ba:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    64bc:	6064      	str	r4, [r4, #4]
			if (!ev) {
    64be:	2c00      	cmp	r4, #0
    64c0:	f000 8160 	beq.w	6784 <usbd_event_transfer_data+0x300>
			ep_ctx->read_pending = true;
    64c4:	2301      	movs	r3, #1
    64c6:	776b      	strb	r3, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    64c8:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    64ca:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    64cc:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    64ce:	4621      	mov	r1, r4
    64d0:	48ae      	ldr	r0, [pc, #696]	; (678c <usbd_event_transfer_data+0x308>)
    64d2:	f00d face 	bl	13a72 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    64d6:	49ae      	ldr	r1, [pc, #696]	; (6790 <usbd_event_transfer_data+0x30c>)
    64d8:	48ae      	ldr	r0, [pc, #696]	; (6794 <usbd_event_transfer_data+0x310>)
    64da:	f00d faeb 	bl	13ab4 <k_work_submit_to_queue>
}
    64de:	e151      	b.n	6784 <usbd_event_transfer_data+0x300>
		switch (p_event->data.eptransfer.status) {
    64e0:	78e1      	ldrb	r1, [r4, #3]
    64e2:	b1a1      	cbz	r1, 650e <usbd_event_transfer_data+0x8a>
    64e4:	2903      	cmp	r1, #3
    64e6:	f000 814d 	beq.w	6784 <usbd_event_transfer_data+0x300>
    64ea:	4aab      	ldr	r2, [pc, #684]	; (6798 <usbd_event_transfer_data+0x314>)
    64ec:	4bab      	ldr	r3, [pc, #684]	; (679c <usbd_event_transfer_data+0x318>)
    64ee:	1ad2      	subs	r2, r2, r3
    64f0:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    64f2:	f04f 0300 	mov.w	r3, #0
    64f6:	2001      	movs	r0, #1
    64f8:	f360 0302 	bfi	r3, r0, #0, #3
    64fc:	f36f 03c5 	bfc	r3, #3, #3
    6500:	f362 138f 	bfi	r3, r2, #6, #10
    6504:	4632      	mov	r2, r6
    6506:	48a6      	ldr	r0, [pc, #664]	; (67a0 <usbd_event_transfer_data+0x31c>)
    6508:	f7fb fad0 	bl	1aac <log_2>
    650c:	e13a      	b.n	6784 <usbd_event_transfer_data+0x300>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    650e:	2200      	movs	r2, #0
    6510:	2300      	movs	r3, #0
    6512:	a901      	add	r1, sp, #4
    6514:	489c      	ldr	r0, [pc, #624]	; (6788 <usbd_event_transfer_data+0x304>)
    6516:	f007 fb25 	bl	db64 <k_mem_slab_alloc>
    651a:	b9a0      	cbnz	r0, 6546 <usbd_event_transfer_data+0xc2>
	ev = (struct usbd_event *)block.data;
    651c:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    651e:	6064      	str	r4, [r4, #4]
			if (!ev) {
    6520:	2c00      	cmp	r4, #0
    6522:	f000 812f 	beq.w	6784 <usbd_event_transfer_data+0x300>
			ep_ctx->write_in_progress = false;
    6526:	2300      	movs	r3, #0
    6528:	77ab      	strb	r3, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    652a:	2301      	movs	r3, #1
    652c:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    652e:	2303      	movs	r3, #3
    6530:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    6532:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    6534:	4621      	mov	r1, r4
    6536:	4895      	ldr	r0, [pc, #596]	; (678c <usbd_event_transfer_data+0x308>)
    6538:	f00d fa9b 	bl	13a72 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    653c:	4994      	ldr	r1, [pc, #592]	; (6790 <usbd_event_transfer_data+0x30c>)
    653e:	4895      	ldr	r0, [pc, #596]	; (6794 <usbd_event_transfer_data+0x310>)
    6540:	f00d fab8 	bl	13ab4 <k_work_submit_to_queue>
}
    6544:	e11e      	b.n	6784 <usbd_event_transfer_data+0x300>
    6546:	4b94      	ldr	r3, [pc, #592]	; (6798 <usbd_event_transfer_data+0x314>)
    6548:	4a94      	ldr	r2, [pc, #592]	; (679c <usbd_event_transfer_data+0x318>)
    654a:	1a9b      	subs	r3, r3, r2
    654c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    654e:	f04f 0100 	mov.w	r1, #0
    6552:	2201      	movs	r2, #1
    6554:	f362 0102 	bfi	r1, r2, #0, #3
    6558:	f36f 01c5 	bfc	r1, #3, #3
    655c:	f363 118f 	bfi	r1, r3, #6, #10
    6560:	4890      	ldr	r0, [pc, #576]	; (67a4 <usbd_event_transfer_data+0x320>)
    6562:	f7fb fb01 	bl	1b68 <log_0>
static inline void usbd_evt_flush(void)
    6566:	e000      	b.n	656a <usbd_event_transfer_data+0xe6>
	} while (ev != NULL);
    6568:	b164      	cbz	r4, 6584 <usbd_event_transfer_data+0x100>
    656a:	2200      	movs	r2, #0
    656c:	2300      	movs	r3, #0
    656e:	4887      	ldr	r0, [pc, #540]	; (678c <usbd_event_transfer_data+0x308>)
    6570:	f007 fd00 	bl	df74 <z_impl_k_queue_get>
		if (ev) {
    6574:	4604      	mov	r4, r0
    6576:	2800      	cmp	r0, #0
    6578:	d0f6      	beq.n	6568 <usbd_event_transfer_data+0xe4>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    657a:	1d01      	adds	r1, r0, #4
    657c:	4882      	ldr	r0, [pc, #520]	; (6788 <usbd_event_transfer_data+0x304>)
    657e:	f00d f955 	bl	1382c <k_mem_slab_free>
}
    6582:	e7f1      	b.n	6568 <usbd_event_transfer_data+0xe4>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    6584:	2200      	movs	r2, #0
    6586:	2300      	movs	r3, #0
    6588:	a901      	add	r1, sp, #4
    658a:	487f      	ldr	r0, [pc, #508]	; (6788 <usbd_event_transfer_data+0x304>)
    658c:	f007 faea 	bl	db64 <k_mem_slab_alloc>
    6590:	b180      	cbz	r0, 65b4 <usbd_event_transfer_data+0x130>
    6592:	4b81      	ldr	r3, [pc, #516]	; (6798 <usbd_event_transfer_data+0x314>)
    6594:	4a81      	ldr	r2, [pc, #516]	; (679c <usbd_event_transfer_data+0x318>)
    6596:	1a9b      	subs	r3, r3, r2
    6598:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    659a:	f04f 0100 	mov.w	r1, #0
    659e:	2201      	movs	r2, #1
    65a0:	f362 0102 	bfi	r1, r2, #0, #3
    65a4:	f36f 01c5 	bfc	r1, #3, #3
    65a8:	f363 118f 	bfi	r1, r3, #6, #10
    65ac:	487e      	ldr	r0, [pc, #504]	; (67a8 <usbd_event_transfer_data+0x324>)
    65ae:	f7fb fadb 	bl	1b68 <log_0>
			return NULL;
    65b2:	e7b5      	b.n	6520 <usbd_event_transfer_data+0x9c>
		ev = (struct usbd_event *)block.data;
    65b4:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    65b6:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    65b8:	2304      	movs	r3, #4
    65ba:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    65bc:	4873      	ldr	r0, [pc, #460]	; (678c <usbd_event_transfer_data+0x308>)
    65be:	f00d fa58 	bl	13a72 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    65c2:	4973      	ldr	r1, [pc, #460]	; (6790 <usbd_event_transfer_data+0x30c>)
    65c4:	4873      	ldr	r0, [pc, #460]	; (6794 <usbd_event_transfer_data+0x310>)
    65c6:	f00d fa75 	bl	13ab4 <k_work_submit_to_queue>
		return NULL;
    65ca:	e7a9      	b.n	6520 <usbd_event_transfer_data+0x9c>
    65cc:	4b72      	ldr	r3, [pc, #456]	; (6798 <usbd_event_transfer_data+0x314>)
    65ce:	4a73      	ldr	r2, [pc, #460]	; (679c <usbd_event_transfer_data+0x318>)
    65d0:	1a9b      	subs	r3, r3, r2
    65d2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    65d4:	f04f 0100 	mov.w	r1, #0
    65d8:	2201      	movs	r2, #1
    65da:	f362 0102 	bfi	r1, r2, #0, #3
    65de:	f36f 01c5 	bfc	r1, #3, #3
    65e2:	f363 118f 	bfi	r1, r3, #6, #10
    65e6:	486f      	ldr	r0, [pc, #444]	; (67a4 <usbd_event_transfer_data+0x320>)
    65e8:	f7fb fabe 	bl	1b68 <log_0>
static inline void usbd_evt_flush(void)
    65ec:	e004      	b.n	65f8 <usbd_event_transfer_data+0x174>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    65ee:	1d01      	adds	r1, r0, #4
    65f0:	4865      	ldr	r0, [pc, #404]	; (6788 <usbd_event_transfer_data+0x304>)
    65f2:	f00d f91b 	bl	1382c <k_mem_slab_free>
	} while (ev != NULL);
    65f6:	b144      	cbz	r4, 660a <usbd_event_transfer_data+0x186>
    65f8:	2200      	movs	r2, #0
    65fa:	2300      	movs	r3, #0
    65fc:	4863      	ldr	r0, [pc, #396]	; (678c <usbd_event_transfer_data+0x308>)
    65fe:	f007 fcb9 	bl	df74 <z_impl_k_queue_get>
		if (ev) {
    6602:	4604      	mov	r4, r0
    6604:	2800      	cmp	r0, #0
    6606:	d1f2      	bne.n	65ee <usbd_event_transfer_data+0x16a>
    6608:	e7f5      	b.n	65f6 <usbd_event_transfer_data+0x172>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    660a:	2200      	movs	r2, #0
    660c:	2300      	movs	r3, #0
    660e:	a901      	add	r1, sp, #4
    6610:	485d      	ldr	r0, [pc, #372]	; (6788 <usbd_event_transfer_data+0x304>)
    6612:	f007 faa7 	bl	db64 <k_mem_slab_alloc>
    6616:	b180      	cbz	r0, 663a <usbd_event_transfer_data+0x1b6>
    6618:	4b5f      	ldr	r3, [pc, #380]	; (6798 <usbd_event_transfer_data+0x314>)
    661a:	4a60      	ldr	r2, [pc, #384]	; (679c <usbd_event_transfer_data+0x318>)
    661c:	1a9b      	subs	r3, r3, r2
    661e:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    6620:	f04f 0100 	mov.w	r1, #0
    6624:	2201      	movs	r2, #1
    6626:	f362 0102 	bfi	r1, r2, #0, #3
    662a:	f36f 01c5 	bfc	r1, #3, #3
    662e:	f363 118f 	bfi	r1, r3, #6, #10
    6632:	485d      	ldr	r0, [pc, #372]	; (67a8 <usbd_event_transfer_data+0x324>)
    6634:	f7fb fa98 	bl	1b68 <log_0>
			return NULL;
    6638:	e741      	b.n	64be <usbd_event_transfer_data+0x3a>
		ev = (struct usbd_event *)block.data;
    663a:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    663c:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    663e:	2304      	movs	r3, #4
    6640:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    6642:	4852      	ldr	r0, [pc, #328]	; (678c <usbd_event_transfer_data+0x308>)
    6644:	f00d fa15 	bl	13a72 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    6648:	4951      	ldr	r1, [pc, #324]	; (6790 <usbd_event_transfer_data+0x30c>)
    664a:	4852      	ldr	r0, [pc, #328]	; (6794 <usbd_event_transfer_data+0x310>)
    664c:	f00d fa32 	bl	13ab4 <k_work_submit_to_queue>
		return NULL;
    6650:	e735      	b.n	64be <usbd_event_transfer_data+0x3a>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    6652:	2200      	movs	r2, #0
    6654:	2300      	movs	r3, #0
    6656:	a901      	add	r1, sp, #4
    6658:	484b      	ldr	r0, [pc, #300]	; (6788 <usbd_event_transfer_data+0x304>)
    665a:	f007 fa83 	bl	db64 <k_mem_slab_alloc>
    665e:	b9f0      	cbnz	r0, 669e <usbd_event_transfer_data+0x21a>
	ev = (struct usbd_event *)block.data;
    6660:	9e01      	ldr	r6, [sp, #4]
	ev->block = block;
    6662:	6076      	str	r6, [r6, #4]
			if (!ev) {
    6664:	2e00      	cmp	r6, #0
    6666:	f000 808d 	beq.w	6784 <usbd_event_transfer_data+0x300>
				p_event->data.eptransfer.ep);
    666a:	78a3      	ldrb	r3, [r4, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    666c:	f994 2002 	ldrsb.w	r2, [r4, #2]
    6670:	2a00      	cmp	r2, #0
    6672:	db57      	blt.n	6724 <usbd_event_transfer_data+0x2a0>
            ret = p_reg->EPIN[epnr].AMOUNT;
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    6674:	f013 0f08 	tst.w	r3, #8
    6678:	d067      	beq.n	674a <usbd_event_transfer_data+0x2c6>
        {
            ret = p_reg->ISOOUT.AMOUNT;
    667a:	4b4c      	ldr	r3, [pc, #304]	; (67ac <usbd_event_transfer_data+0x328>)
    667c:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
    6680:	60eb      	str	r3, [r5, #12]
			ev->evt_type = USBD_EVT_EP;
    6682:	2301      	movs	r3, #1
    6684:	7433      	strb	r3, [r6, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    6686:	2302      	movs	r3, #2
    6688:	7333      	strb	r3, [r6, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    668a:	60b5      	str	r5, [r6, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    668c:	4631      	mov	r1, r6
    668e:	483f      	ldr	r0, [pc, #252]	; (678c <usbd_event_transfer_data+0x308>)
    6690:	f00d f9ef 	bl	13a72 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    6694:	493e      	ldr	r1, [pc, #248]	; (6790 <usbd_event_transfer_data+0x30c>)
    6696:	483f      	ldr	r0, [pc, #252]	; (6794 <usbd_event_transfer_data+0x310>)
    6698:	f00d fa0c 	bl	13ab4 <k_work_submit_to_queue>
}
    669c:	e072      	b.n	6784 <usbd_event_transfer_data+0x300>
    669e:	4b3e      	ldr	r3, [pc, #248]	; (6798 <usbd_event_transfer_data+0x314>)
    66a0:	4a3e      	ldr	r2, [pc, #248]	; (679c <usbd_event_transfer_data+0x318>)
    66a2:	1a9b      	subs	r3, r3, r2
    66a4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    66a6:	f04f 0100 	mov.w	r1, #0
    66aa:	2201      	movs	r2, #1
    66ac:	f362 0102 	bfi	r1, r2, #0, #3
    66b0:	f36f 01c5 	bfc	r1, #3, #3
    66b4:	f363 118f 	bfi	r1, r3, #6, #10
    66b8:	483a      	ldr	r0, [pc, #232]	; (67a4 <usbd_event_transfer_data+0x320>)
    66ba:	f7fb fa55 	bl	1b68 <log_0>
static inline void usbd_evt_flush(void)
    66be:	e004      	b.n	66ca <usbd_event_transfer_data+0x246>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    66c0:	1d01      	adds	r1, r0, #4
    66c2:	4831      	ldr	r0, [pc, #196]	; (6788 <usbd_event_transfer_data+0x304>)
    66c4:	f00d f8b2 	bl	1382c <k_mem_slab_free>
	} while (ev != NULL);
    66c8:	b146      	cbz	r6, 66dc <usbd_event_transfer_data+0x258>
    66ca:	2200      	movs	r2, #0
    66cc:	2300      	movs	r3, #0
    66ce:	482f      	ldr	r0, [pc, #188]	; (678c <usbd_event_transfer_data+0x308>)
    66d0:	f007 fc50 	bl	df74 <z_impl_k_queue_get>
		if (ev) {
    66d4:	4606      	mov	r6, r0
    66d6:	2800      	cmp	r0, #0
    66d8:	d1f2      	bne.n	66c0 <usbd_event_transfer_data+0x23c>
    66da:	e7f5      	b.n	66c8 <usbd_event_transfer_data+0x244>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    66dc:	2200      	movs	r2, #0
    66de:	2300      	movs	r3, #0
    66e0:	a901      	add	r1, sp, #4
    66e2:	4829      	ldr	r0, [pc, #164]	; (6788 <usbd_event_transfer_data+0x304>)
    66e4:	f007 fa3e 	bl	db64 <k_mem_slab_alloc>
    66e8:	b180      	cbz	r0, 670c <usbd_event_transfer_data+0x288>
    66ea:	4b2b      	ldr	r3, [pc, #172]	; (6798 <usbd_event_transfer_data+0x314>)
    66ec:	4a2b      	ldr	r2, [pc, #172]	; (679c <usbd_event_transfer_data+0x318>)
    66ee:	1a9b      	subs	r3, r3, r2
    66f0:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    66f2:	f04f 0100 	mov.w	r1, #0
    66f6:	2201      	movs	r2, #1
    66f8:	f362 0102 	bfi	r1, r2, #0, #3
    66fc:	f36f 01c5 	bfc	r1, #3, #3
    6700:	f363 118f 	bfi	r1, r3, #6, #10
    6704:	4828      	ldr	r0, [pc, #160]	; (67a8 <usbd_event_transfer_data+0x324>)
    6706:	f7fb fa2f 	bl	1b68 <log_0>
			return NULL;
    670a:	e7ab      	b.n	6664 <usbd_event_transfer_data+0x1e0>
		ev = (struct usbd_event *)block.data;
    670c:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    670e:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    6710:	2304      	movs	r3, #4
    6712:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    6714:	481d      	ldr	r0, [pc, #116]	; (678c <usbd_event_transfer_data+0x308>)
    6716:	f00d f9ac 	bl	13a72 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    671a:	491d      	ldr	r1, [pc, #116]	; (6790 <usbd_event_transfer_data+0x30c>)
    671c:	481d      	ldr	r0, [pc, #116]	; (6794 <usbd_event_transfer_data+0x310>)
    671e:	f00d f9c9 	bl	13ab4 <k_work_submit_to_queue>
		return NULL;
    6722:	e79f      	b.n	6664 <usbd_event_transfer_data+0x1e0>
        if (NRF_USBD_EPISO_CHECK(ep))
    6724:	f013 0f08 	tst.w	r3, #8
    6728:	d003      	beq.n	6732 <usbd_event_transfer_data+0x2ae>
            ret = p_reg->ISOIN.AMOUNT;
    672a:	4b20      	ldr	r3, [pc, #128]	; (67ac <usbd_event_transfer_data+0x328>)
    672c:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
    6730:	e7a6      	b.n	6680 <usbd_event_transfer_data+0x1fc>
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    6732:	f003 030f 	and.w	r3, r3, #15
            ret = p_reg->EPIN[epnr].AMOUNT;
    6736:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    673a:	009b      	lsls	r3, r3, #2
    673c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6740:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    6744:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    6748:	e79a      	b.n	6680 <usbd_event_transfer_data+0x1fc>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    674a:	f003 030f 	and.w	r3, r3, #15
            ret = p_reg->EPOUT[epnr].AMOUNT;
    674e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6752:	009b      	lsls	r3, r3, #2
    6754:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6758:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    675c:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    6760:	e78e      	b.n	6680 <usbd_event_transfer_data+0x1fc>
    6762:	4a0d      	ldr	r2, [pc, #52]	; (6798 <usbd_event_transfer_data+0x314>)
    6764:	4b0d      	ldr	r3, [pc, #52]	; (679c <usbd_event_transfer_data+0x318>)
    6766:	1ad2      	subs	r2, r2, r3
    6768:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    676a:	f04f 0300 	mov.w	r3, #0
    676e:	2001      	movs	r0, #1
    6770:	f360 0302 	bfi	r3, r0, #0, #3
    6774:	f36f 03c5 	bfc	r3, #3, #3
    6778:	f362 138f 	bfi	r3, r2, #6, #10
    677c:	4632      	mov	r2, r6
    677e:	4808      	ldr	r0, [pc, #32]	; (67a0 <usbd_event_transfer_data+0x31c>)
    6780:	f7fb f994 	bl	1aac <log_2>
}
    6784:	b002      	add	sp, #8
    6786:	bd70      	pop	{r4, r5, r6, pc}
    6788:	200002e8 	.word	0x200002e8
    678c:	200003ec 	.word	0x200003ec
    6790:	20002028 	.word	0x20002028
    6794:	20000698 	.word	0x20000698
    6798:	00014380 	.word	0x00014380
    679c:	00014318 	.word	0x00014318
    67a0:	000154e8 	.word	0x000154e8
    67a4:	000153e8 	.word	0x000153e8
    67a8:	00015408 	.word	0x00015408
    67ac:	40027000 	.word	0x40027000

000067b0 <usbd_event_handler>:
{
    67b0:	b510      	push	{r4, lr}
    67b2:	b088      	sub	sp, #32
	struct usbd_event evt = {0};
    67b4:	2300      	movs	r3, #0
    67b6:	9303      	str	r3, [sp, #12]
    67b8:	9304      	str	r3, [sp, #16]
    67ba:	9305      	str	r3, [sp, #20]
    67bc:	9306      	str	r3, [sp, #24]
    67be:	9307      	str	r3, [sp, #28]
	switch (p_event->type) {
    67c0:	7803      	ldrb	r3, [r0, #0]
    67c2:	3b01      	subs	r3, #1
    67c4:	2b05      	cmp	r3, #5
    67c6:	d826      	bhi.n	6816 <usbd_event_handler+0x66>
    67c8:	e8df f003 	tbb	[pc, r3]
    67cc:	2e270335 	.word	0x2e270335
    67d0:	3953      	.short	0x3953
		evt.evt_type = USBD_EVT_POWER;
    67d2:	2300      	movs	r3, #0
    67d4:	f88d 301c 	strb.w	r3, [sp, #28]
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    67d8:	2303      	movs	r3, #3
    67da:	f88d 3014 	strb.w	r3, [sp, #20]
	if (k_mem_slab_alloc(&fifo_elem_slab,
    67de:	2200      	movs	r2, #0
    67e0:	2300      	movs	r3, #0
    67e2:	a901      	add	r1, sp, #4
    67e4:	4850      	ldr	r0, [pc, #320]	; (6928 <usbd_event_handler+0x178>)
    67e6:	f007 f9bd 	bl	db64 <k_mem_slab_alloc>
    67ea:	2800      	cmp	r0, #0
    67ec:	d159      	bne.n	68a2 <usbd_event_handler+0xf2>
	ev = (struct usbd_event *)block.data;
    67ee:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    67f0:	6064      	str	r4, [r4, #4]
		if (!ev) {
    67f2:	b184      	cbz	r4, 6816 <usbd_event_handler+0x66>
		ev->evt_type = evt.evt_type;
    67f4:	f89d 301c 	ldrb.w	r3, [sp, #28]
    67f8:	7423      	strb	r3, [r4, #16]
		ev->evt = evt.evt;
    67fa:	f104 0308 	add.w	r3, r4, #8
    67fe:	9906      	ldr	r1, [sp, #24]
    6800:	9805      	ldr	r0, [sp, #20]
    6802:	e883 0003 	stmia.w	r3, {r0, r1}
	k_fifo_put(&usbd_evt_fifo, ev);
    6806:	4621      	mov	r1, r4
    6808:	4848      	ldr	r0, [pc, #288]	; (692c <usbd_event_handler+0x17c>)
    680a:	f00d f932 	bl	13a72 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    680e:	4948      	ldr	r1, [pc, #288]	; (6930 <usbd_event_handler+0x180>)
    6810:	4848      	ldr	r0, [pc, #288]	; (6934 <usbd_event_handler+0x184>)
    6812:	f00d f94f 	bl	13ab4 <k_work_submit_to_queue>
}
    6816:	b008      	add	sp, #32
    6818:	bd10      	pop	{r4, pc}
		evt.evt_type = USBD_EVT_POWER;
    681a:	2300      	movs	r3, #0
    681c:	f88d 301c 	strb.w	r3, [sp, #28]
		evt.evt.pwr_evt.state = USBD_RESUMED;
    6820:	2304      	movs	r3, #4
    6822:	f88d 3014 	strb.w	r3, [sp, #20]
	if (put_evt) {
    6826:	e7da      	b.n	67de <usbd_event_handler+0x2e>
		evt.evt_type = USBD_EVT_POWER;
    6828:	2300      	movs	r3, #0
    682a:	f88d 301c 	strb.w	r3, [sp, #28]
		evt.evt.pwr_evt.state = USBD_RESUMED;
    682e:	2304      	movs	r3, #4
    6830:	f88d 3014 	strb.w	r3, [sp, #20]
	if (put_evt) {
    6834:	e7d3      	b.n	67de <usbd_event_handler+0x2e>
		evt.evt_type = USBD_EVT_RESET;
    6836:	2302      	movs	r3, #2
    6838:	f88d 301c 	strb.w	r3, [sp, #28]
	if (put_evt) {
    683c:	e7cf      	b.n	67de <usbd_event_handler+0x2e>
    683e:	4604      	mov	r4, r0
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    6840:	7880      	ldrb	r0, [r0, #2]
    6842:	f7ff f8eb 	bl	5a1c <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    6846:	7a83      	ldrb	r3, [r0, #10]
    6848:	2b01      	cmp	r3, #1
    684a:	d00e      	beq.n	686a <usbd_event_handler+0xba>
    684c:	d805      	bhi.n	685a <usbd_event_handler+0xaa>
    684e:	2b00      	cmp	r3, #0
    6850:	d1e1      	bne.n	6816 <usbd_event_handler+0x66>
			usbd_event_transfer_ctrl(p_event);
    6852:	4620      	mov	r0, r4
    6854:	f7ff fc7e 	bl	6154 <usbd_event_transfer_ctrl>
	if (put_evt) {
    6858:	e7dd      	b.n	6816 <usbd_event_handler+0x66>
    685a:	3b02      	subs	r3, #2
    685c:	b2db      	uxtb	r3, r3
    685e:	2b01      	cmp	r3, #1
    6860:	d8d9      	bhi.n	6816 <usbd_event_handler+0x66>
			usbd_event_transfer_data(p_event);
    6862:	4620      	mov	r0, r4
    6864:	f7ff fe0e 	bl	6484 <usbd_event_transfer_data>
	if (put_evt) {
    6868:	e7d5      	b.n	6816 <usbd_event_handler+0x66>
			usbd_event_transfer_data(p_event);
    686a:	4620      	mov	r0, r4
    686c:	f7ff fe0a 	bl	6484 <usbd_event_transfer_data>
	if (put_evt) {
    6870:	e7d1      	b.n	6816 <usbd_event_handler+0x66>
		nrfx_usbd_setup_get(&drv_setup);
    6872:	a801      	add	r0, sp, #4
    6874:	f003 fcea 	bl	a24c <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
    6878:	f89d 3005 	ldrb.w	r3, [sp, #5]
    687c:	2b05      	cmp	r3, #5
    687e:	d00a      	beq.n	6896 <usbd_event_handler+0xe6>
				endpoint_ctx(NRF_USBD_EPOUT(0));
    6880:	2000      	movs	r0, #0
    6882:	f7ff f8cb 	bl	5a1c <endpoint_ctx>
			evt.evt_type = USBD_EVT_EP;
    6886:	2301      	movs	r3, #1
    6888:	f88d 301c 	strb.w	r3, [sp, #28]
			evt.evt.ep_evt.ep = ep_ctx;
    688c:	9005      	str	r0, [sp, #20]
			evt.evt.ep_evt.evt_type = EP_EVT_SETUP_RECV;
    688e:	2300      	movs	r3, #0
    6890:	f88d 3018 	strb.w	r3, [sp, #24]
	if (put_evt) {
    6894:	e7a3      	b.n	67de <usbd_event_handler+0x2e>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
    6896:	f89d 3004 	ldrb.w	r3, [sp, #4]
    689a:	f013 0f60 	tst.w	r3, #96	; 0x60
    689e:	d0ba      	beq.n	6816 <usbd_event_handler+0x66>
    68a0:	e7ee      	b.n	6880 <usbd_event_handler+0xd0>
    68a2:	4b25      	ldr	r3, [pc, #148]	; (6938 <usbd_event_handler+0x188>)
    68a4:	4a25      	ldr	r2, [pc, #148]	; (693c <usbd_event_handler+0x18c>)
    68a6:	1a9b      	subs	r3, r3, r2
    68a8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    68aa:	f04f 0100 	mov.w	r1, #0
    68ae:	2201      	movs	r2, #1
    68b0:	f362 0102 	bfi	r1, r2, #0, #3
    68b4:	f36f 01c5 	bfc	r1, #3, #3
    68b8:	f363 118f 	bfi	r1, r3, #6, #10
    68bc:	4820      	ldr	r0, [pc, #128]	; (6940 <usbd_event_handler+0x190>)
    68be:	f7fb f953 	bl	1b68 <log_0>
static inline void usbd_evt_flush(void)
    68c2:	e004      	b.n	68ce <usbd_event_handler+0x11e>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    68c4:	1d01      	adds	r1, r0, #4
    68c6:	4818      	ldr	r0, [pc, #96]	; (6928 <usbd_event_handler+0x178>)
    68c8:	f00c ffb0 	bl	1382c <k_mem_slab_free>
	} while (ev != NULL);
    68cc:	b144      	cbz	r4, 68e0 <usbd_event_handler+0x130>
    68ce:	2200      	movs	r2, #0
    68d0:	2300      	movs	r3, #0
    68d2:	4816      	ldr	r0, [pc, #88]	; (692c <usbd_event_handler+0x17c>)
    68d4:	f007 fb4e 	bl	df74 <z_impl_k_queue_get>
		if (ev) {
    68d8:	4604      	mov	r4, r0
    68da:	2800      	cmp	r0, #0
    68dc:	d1f2      	bne.n	68c4 <usbd_event_handler+0x114>
    68de:	e7f5      	b.n	68cc <usbd_event_handler+0x11c>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    68e0:	2200      	movs	r2, #0
    68e2:	2300      	movs	r3, #0
    68e4:	a901      	add	r1, sp, #4
    68e6:	4810      	ldr	r0, [pc, #64]	; (6928 <usbd_event_handler+0x178>)
    68e8:	f007 f93c 	bl	db64 <k_mem_slab_alloc>
    68ec:	b180      	cbz	r0, 6910 <usbd_event_handler+0x160>
    68ee:	4b12      	ldr	r3, [pc, #72]	; (6938 <usbd_event_handler+0x188>)
    68f0:	4a12      	ldr	r2, [pc, #72]	; (693c <usbd_event_handler+0x18c>)
    68f2:	1a9b      	subs	r3, r3, r2
    68f4:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    68f6:	f04f 0100 	mov.w	r1, #0
    68fa:	2201      	movs	r2, #1
    68fc:	f362 0102 	bfi	r1, r2, #0, #3
    6900:	f36f 01c5 	bfc	r1, #3, #3
    6904:	f363 118f 	bfi	r1, r3, #6, #10
    6908:	480e      	ldr	r0, [pc, #56]	; (6944 <usbd_event_handler+0x194>)
    690a:	f7fb f92d 	bl	1b68 <log_0>
			return NULL;
    690e:	e770      	b.n	67f2 <usbd_event_handler+0x42>
		ev = (struct usbd_event *)block.data;
    6910:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    6912:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    6914:	2304      	movs	r3, #4
    6916:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    6918:	4804      	ldr	r0, [pc, #16]	; (692c <usbd_event_handler+0x17c>)
    691a:	f00d f8aa 	bl	13a72 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    691e:	4904      	ldr	r1, [pc, #16]	; (6930 <usbd_event_handler+0x180>)
    6920:	4804      	ldr	r0, [pc, #16]	; (6934 <usbd_event_handler+0x184>)
    6922:	f00d f8c7 	bl	13ab4 <k_work_submit_to_queue>
		return NULL;
    6926:	e764      	b.n	67f2 <usbd_event_handler+0x42>
    6928:	200002e8 	.word	0x200002e8
    692c:	200003ec 	.word	0x200003ec
    6930:	20002028 	.word	0x20002028
    6934:	20000698 	.word	0x20000698
    6938:	00014380 	.word	0x00014380
    693c:	00014318 	.word	0x00014318
    6940:	000153e8 	.word	0x000153e8
    6944:	00015408 	.word	0x00015408

00006948 <usb_dc_attach>:
{
    6948:	b510      	push	{r4, lr}
	if (ctx->attached) {
    694a:	4b1d      	ldr	r3, [pc, #116]	; (69c0 <usb_dc_attach+0x78>)
    694c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    6950:	b113      	cbz	r3, 6958 <usb_dc_attach+0x10>
		return 0;
    6952:	2400      	movs	r4, #0
}
    6954:	4620      	mov	r0, r4
    6956:	bd10      	pop	{r4, pc}
	return z_impl_k_mutex_init(mutex);
    6958:	4c19      	ldr	r4, [pc, #100]	; (69c0 <usb_dc_attach+0x78>)
    695a:	f104 0038 	add.w	r0, r4, #56	; 0x38
    695e:	f00d f804 	bl	1396a <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
    6962:	2000      	movs	r0, #0
    6964:	f000 fd36 	bl	73d4 <z_nrf_clock_control_get_onoff>
	ctx->hfxo_mgr =
    6968:	61e0      	str	r0, [r4, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    696a:	2200      	movs	r2, #0
    696c:	2101      	movs	r1, #1
    696e:	2027      	movs	r0, #39	; 0x27
    6970:	f7fd fb38 	bl	3fe4 <z_arm_irq_priority_set>
	err = nrfx_usbd_init(usbd_event_handler);
    6974:	4813      	ldr	r0, [pc, #76]	; (69c4 <usb_dc_attach+0x7c>)
    6976:	f002 fff1 	bl	995c <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
    697a:	4b13      	ldr	r3, [pc, #76]	; (69c8 <usb_dc_attach+0x80>)
    697c:	4298      	cmp	r0, r3
    697e:	d11b      	bne.n	69b8 <usb_dc_attach+0x70>
	nrfx_power_usbevt_enable();
    6980:	f00b fccb 	bl	1231a <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
    6984:	f7ff f87e 	bl	5a84 <eps_ctx_init>
	if (ret == 0) {
    6988:	4604      	mov	r4, r0
    698a:	b918      	cbnz	r0, 6994 <usb_dc_attach+0x4c>
		ctx->attached = true;
    698c:	4b0c      	ldr	r3, [pc, #48]	; (69c0 <usb_dc_attach+0x78>)
    698e:	2201      	movs	r2, #1
    6990:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
    6994:	4b0d      	ldr	r3, [pc, #52]	; (69cc <usb_dc_attach+0x84>)
    6996:	681b      	ldr	r3, [r3, #0]
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
    6998:	b11b      	cbz	r3, 69a2 <usb_dc_attach+0x5a>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    699a:	490d      	ldr	r1, [pc, #52]	; (69d0 <usb_dc_attach+0x88>)
    699c:	480d      	ldr	r0, [pc, #52]	; (69d4 <usb_dc_attach+0x8c>)
    699e:	f00d f889 	bl	13ab4 <k_work_submit_to_queue>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
    69a2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    69a6:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
    69aa:	f013 0f01 	tst.w	r3, #1
    69ae:	d0d1      	beq.n	6954 <usb_dc_attach+0xc>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
    69b0:	2000      	movs	r0, #0
    69b2:	f7ff f935 	bl	5c20 <usb_dc_power_event_handler>
    69b6:	e7cd      	b.n	6954 <usb_dc_attach+0xc>
		return -EIO;
    69b8:	f06f 0404 	mvn.w	r4, #4
    69bc:	e7ca      	b.n	6954 <usb_dc_attach+0xc>
    69be:	bf00      	nop
    69c0:	20002000 	.word	0x20002000
    69c4:	000067b1 	.word	0x000067b1
    69c8:	0bad0000 	.word	0x0bad0000
    69cc:	200003ec 	.word	0x200003ec
    69d0:	20002028 	.word	0x20002028
    69d4:	20000698 	.word	0x20000698

000069d8 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
    69d8:	4b07      	ldr	r3, [pc, #28]	; (69f8 <usb_dc_set_address+0x20>)
    69da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    69de:	b12b      	cbz	r3, 69ec <usb_dc_set_address+0x14>
	return get_usbd_ctx()->ready;
    69e0:	4b05      	ldr	r3, [pc, #20]	; (69f8 <usb_dc_set_address+0x20>)
    69e2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    69e6:	b123      	cbz	r3, 69f2 <usb_dc_set_address+0x1a>
	return 0;
    69e8:	2000      	movs	r0, #0
    69ea:	4770      	bx	lr
		return -ENODEV;
    69ec:	f06f 0012 	mvn.w	r0, #18
    69f0:	4770      	bx	lr
    69f2:	f06f 0012 	mvn.w	r0, #18
}
    69f6:	4770      	bx	lr
    69f8:	20002000 	.word	0x20002000

000069fc <usb_dc_ep_check_cap>:
{
    69fc:	b508      	push	{r3, lr}
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    69fe:	7801      	ldrb	r1, [r0, #0]
    6a00:	f001 020f 	and.w	r2, r1, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    6a04:	7903      	ldrb	r3, [r0, #4]
    6a06:	b903      	cbnz	r3, 6a0a <usb_dc_ep_check_cap+0xe>
    6a08:	b92a      	cbnz	r2, 6a16 <usb_dc_ep_check_cap+0x1a>
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    6a0a:	2a08      	cmp	r2, #8
    6a0c:	d816      	bhi.n	6a3c <usb_dc_ep_check_cap+0x40>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    6a0e:	2b01      	cmp	r3, #1
    6a10:	d027      	beq.n	6a62 <usb_dc_ep_check_cap+0x66>
	return 0;
    6a12:	2000      	movs	r0, #0
}
    6a14:	bd08      	pop	{r3, pc}
    6a16:	4b17      	ldr	r3, [pc, #92]	; (6a74 <usb_dc_ep_check_cap+0x78>)
    6a18:	4a17      	ldr	r2, [pc, #92]	; (6a78 <usb_dc_ep_check_cap+0x7c>)
    6a1a:	1a9b      	subs	r3, r3, r2
    6a1c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("invalid endpoint configuration");
    6a1e:	f04f 0100 	mov.w	r1, #0
    6a22:	2201      	movs	r2, #1
    6a24:	f362 0102 	bfi	r1, r2, #0, #3
    6a28:	f36f 01c5 	bfc	r1, #3, #3
    6a2c:	f363 118f 	bfi	r1, r3, #6, #10
    6a30:	4812      	ldr	r0, [pc, #72]	; (6a7c <usb_dc_ep_check_cap+0x80>)
    6a32:	f7fb f899 	bl	1b68 <log_0>
		return -1;
    6a36:	f04f 30ff 	mov.w	r0, #4294967295
    6a3a:	e7eb      	b.n	6a14 <usb_dc_ep_check_cap+0x18>
    6a3c:	4b0d      	ldr	r3, [pc, #52]	; (6a74 <usb_dc_ep_check_cap+0x78>)
    6a3e:	4a0e      	ldr	r2, [pc, #56]	; (6a78 <usb_dc_ep_check_cap+0x7c>)
    6a40:	1a9b      	subs	r3, r3, r2
    6a42:	08db      	lsrs	r3, r3, #3
		LOG_ERR("invalid endpoint index/address");
    6a44:	f04f 0100 	mov.w	r1, #0
    6a48:	2201      	movs	r2, #1
    6a4a:	f362 0102 	bfi	r1, r2, #0, #3
    6a4e:	f36f 01c5 	bfc	r1, #3, #3
    6a52:	f363 118f 	bfi	r1, r3, #6, #10
    6a56:	480a      	ldr	r0, [pc, #40]	; (6a80 <usb_dc_ep_check_cap+0x84>)
    6a58:	f7fb f886 	bl	1b68 <log_0>
		return -1;
    6a5c:	f04f 30ff 	mov.w	r0, #4294967295
    6a60:	e7d8      	b.n	6a14 <usb_dc_ep_check_cap+0x18>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    6a62:	f011 0f08 	tst.w	r1, #8
    6a66:	d001      	beq.n	6a6c <usb_dc_ep_check_cap+0x70>
	return 0;
    6a68:	2000      	movs	r0, #0
    6a6a:	e7d3      	b.n	6a14 <usb_dc_ep_check_cap+0x18>
		return -1;
    6a6c:	f04f 30ff 	mov.w	r0, #4294967295
    6a70:	e7d0      	b.n	6a14 <usb_dc_ep_check_cap+0x18>
    6a72:	bf00      	nop
    6a74:	00014380 	.word	0x00014380
    6a78:	00014318 	.word	0x00014318
    6a7c:	00015534 	.word	0x00015534
    6a80:	00015554 	.word	0x00015554

00006a84 <usb_dc_ep_configure>:
{
    6a84:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    6a86:	4b1a      	ldr	r3, [pc, #104]	; (6af0 <usb_dc_ep_configure+0x6c>)
    6a88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
    6a8c:	b353      	cbz	r3, 6ae4 <usb_dc_ep_configure+0x60>
    6a8e:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    6a90:	7805      	ldrb	r5, [r0, #0]
    6a92:	4628      	mov	r0, r5
    6a94:	f7fe ffc2 	bl	5a1c <endpoint_ctx>
	if (!ep_ctx) {
    6a98:	b338      	cbz	r0, 6aea <usb_dc_ep_configure+0x66>
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    6a9a:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    6a9c:	7922      	ldrb	r2, [r4, #4]
    6a9e:	7282      	strb	r2, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    6aa0:	8862      	ldrh	r2, [r4, #2]
    6aa2:	6042      	str	r2, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    6aa4:	7820      	ldrb	r0, [r4, #0]
    6aa6:	f010 0f08 	tst.w	r0, #8
    6aaa:	d103      	bne.n	6ab4 <usb_dc_ep_configure+0x30>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    6aac:	8863      	ldrh	r3, [r4, #2]
    6aae:	1e5a      	subs	r2, r3, #1
    6ab0:	4213      	tst	r3, r2
    6ab2:	d104      	bne.n	6abe <usb_dc_ep_configure+0x3a>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    6ab4:	8861      	ldrh	r1, [r4, #2]
    6ab6:	f002 ff41 	bl	993c <nrfx_usbd_ep_max_packet_size_set>
	return 0;
    6aba:	2000      	movs	r0, #0
}
    6abc:	bd38      	pop	{r3, r4, r5, pc}
    6abe:	4b0d      	ldr	r3, [pc, #52]	; (6af4 <usb_dc_ep_configure+0x70>)
    6ac0:	4a0d      	ldr	r2, [pc, #52]	; (6af8 <usb_dc_ep_configure+0x74>)
    6ac2:	1a9b      	subs	r3, r3, r2
    6ac4:	08db      	lsrs	r3, r3, #3
			LOG_ERR("EP max packet size must be a power of 2");
    6ac6:	f04f 0100 	mov.w	r1, #0
    6aca:	2201      	movs	r2, #1
    6acc:	f362 0102 	bfi	r1, r2, #0, #3
    6ad0:	f36f 01c5 	bfc	r1, #3, #3
    6ad4:	f363 118f 	bfi	r1, r3, #6, #10
    6ad8:	4808      	ldr	r0, [pc, #32]	; (6afc <usb_dc_ep_configure+0x78>)
    6ada:	f7fb f845 	bl	1b68 <log_0>
			return -EINVAL;
    6ade:	f06f 0015 	mvn.w	r0, #21
    6ae2:	e7eb      	b.n	6abc <usb_dc_ep_configure+0x38>
		return -ENODEV;
    6ae4:	f06f 0012 	mvn.w	r0, #18
    6ae8:	e7e8      	b.n	6abc <usb_dc_ep_configure+0x38>
		return -EINVAL;
    6aea:	f06f 0015 	mvn.w	r0, #21
    6aee:	e7e5      	b.n	6abc <usb_dc_ep_configure+0x38>
    6af0:	20002000 	.word	0x20002000
    6af4:	00014380 	.word	0x00014380
    6af8:	00014318 	.word	0x00014318
    6afc:	00015574 	.word	0x00015574

00006b00 <usb_dc_ep_set_stall>:
{
    6b00:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    6b02:	4b1e      	ldr	r3, [pc, #120]	; (6b7c <usb_dc_ep_set_stall+0x7c>)
    6b04:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    6b08:	b37b      	cbz	r3, 6b6a <usb_dc_ep_set_stall+0x6a>
    6b0a:	4604      	mov	r4, r0
	return get_usbd_ctx()->ready;
    6b0c:	4b1b      	ldr	r3, [pc, #108]	; (6b7c <usb_dc_ep_set_stall+0x7c>)
    6b0e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    6b12:	b36b      	cbz	r3, 6b70 <usb_dc_ep_set_stall+0x70>
	ep_ctx = endpoint_ctx(ep);
    6b14:	f7fe ff82 	bl	5a1c <endpoint_ctx>
	if (!ep_ctx) {
    6b18:	4605      	mov	r5, r0
    6b1a:	b360      	cbz	r0, 6b76 <usb_dc_ep_set_stall+0x76>
	switch (ep_ctx->cfg.type) {
    6b1c:	7a83      	ldrb	r3, [r0, #10]
    6b1e:	2b01      	cmp	r3, #1
    6b20:	d010      	beq.n	6b44 <usb_dc_ep_set_stall+0x44>
    6b22:	d807      	bhi.n	6b34 <usb_dc_ep_set_stall+0x34>
    6b24:	b90b      	cbnz	r3, 6b2a <usb_dc_ep_set_stall+0x2a>
		nrfx_usbd_setup_stall();
    6b26:	f003 fc17 	bl	a358 <nrfx_usbd_setup_stall>
	ep_ctx->buf.len = 0U;
    6b2a:	2000      	movs	r0, #0
    6b2c:	60e8      	str	r0, [r5, #12]
	ep_ctx->buf.curr = ep_ctx->buf.data;
    6b2e:	696b      	ldr	r3, [r5, #20]
    6b30:	61ab      	str	r3, [r5, #24]
}
    6b32:	bd38      	pop	{r3, r4, r5, pc}
	switch (ep_ctx->cfg.type) {
    6b34:	3b02      	subs	r3, #2
    6b36:	b2db      	uxtb	r3, r3
    6b38:	2b01      	cmp	r3, #1
    6b3a:	d8f6      	bhi.n	6b2a <usb_dc_ep_set_stall+0x2a>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    6b3c:	4620      	mov	r0, r4
    6b3e:	f003 fb51 	bl	a1e4 <nrfx_usbd_ep_stall>
		break;
    6b42:	e7f2      	b.n	6b2a <usb_dc_ep_set_stall+0x2a>
    6b44:	4b0e      	ldr	r3, [pc, #56]	; (6b80 <usb_dc_ep_set_stall+0x80>)
    6b46:	4a0f      	ldr	r2, [pc, #60]	; (6b84 <usb_dc_ep_set_stall+0x84>)
    6b48:	1a9b      	subs	r3, r3, r2
    6b4a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("STALL unsupported on ISO endpoint");
    6b4c:	f04f 0100 	mov.w	r1, #0
    6b50:	2201      	movs	r2, #1
    6b52:	f362 0102 	bfi	r1, r2, #0, #3
    6b56:	f36f 01c5 	bfc	r1, #3, #3
    6b5a:	f363 118f 	bfi	r1, r3, #6, #10
    6b5e:	480a      	ldr	r0, [pc, #40]	; (6b88 <usb_dc_ep_set_stall+0x88>)
    6b60:	f7fb f802 	bl	1b68 <log_0>
		return -EINVAL;
    6b64:	f06f 0015 	mvn.w	r0, #21
    6b68:	e7e3      	b.n	6b32 <usb_dc_ep_set_stall+0x32>
		return -ENODEV;
    6b6a:	f06f 0012 	mvn.w	r0, #18
    6b6e:	e7e0      	b.n	6b32 <usb_dc_ep_set_stall+0x32>
    6b70:	f06f 0012 	mvn.w	r0, #18
    6b74:	e7dd      	b.n	6b32 <usb_dc_ep_set_stall+0x32>
		return -EINVAL;
    6b76:	f06f 0015 	mvn.w	r0, #21
    6b7a:	e7da      	b.n	6b32 <usb_dc_ep_set_stall+0x32>
    6b7c:	20002000 	.word	0x20002000
    6b80:	00014380 	.word	0x00014380
    6b84:	00014318 	.word	0x00014318
    6b88:	0001559c 	.word	0x0001559c

00006b8c <usb_dc_ep_clear_stall>:
	return get_usbd_ctx()->attached;
    6b8c:	4b11      	ldr	r3, [pc, #68]	; (6bd4 <usb_dc_ep_clear_stall+0x48>)
    6b8e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    6b92:	b19b      	cbz	r3, 6bbc <usb_dc_ep_clear_stall+0x30>
{
    6b94:	b510      	push	{r4, lr}
    6b96:	4604      	mov	r4, r0
	return get_usbd_ctx()->ready;
    6b98:	4b0e      	ldr	r3, [pc, #56]	; (6bd4 <usb_dc_ep_clear_stall+0x48>)
    6b9a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    6b9e:	b183      	cbz	r3, 6bc2 <usb_dc_ep_clear_stall+0x36>
	ep_ctx = endpoint_ctx(ep);
    6ba0:	f7fe ff3c 	bl	5a1c <endpoint_ctx>
	if (!ep_ctx) {
    6ba4:	b180      	cbz	r0, 6bc8 <usb_dc_ep_clear_stall+0x3c>
	if (NRF_USBD_EPISO_CHECK(ep)) {
    6ba6:	f014 0f08 	tst.w	r4, #8
    6baa:	d110      	bne.n	6bce <usb_dc_ep_clear_stall+0x42>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    6bac:	4620      	mov	r0, r4
    6bae:	f003 fb41 	bl	a234 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    6bb2:	4620      	mov	r0, r4
    6bb4:	f003 fd88 	bl	a6c8 <nrfx_usbd_ep_stall_clear>
	return 0;
    6bb8:	2000      	movs	r0, #0
}
    6bba:	bd10      	pop	{r4, pc}
		return -ENODEV;
    6bbc:	f06f 0012 	mvn.w	r0, #18
}
    6bc0:	4770      	bx	lr
		return -ENODEV;
    6bc2:	f06f 0012 	mvn.w	r0, #18
    6bc6:	e7f8      	b.n	6bba <usb_dc_ep_clear_stall+0x2e>
		return -EINVAL;
    6bc8:	f06f 0015 	mvn.w	r0, #21
    6bcc:	e7f5      	b.n	6bba <usb_dc_ep_clear_stall+0x2e>
		return -EINVAL;
    6bce:	f06f 0015 	mvn.w	r0, #21
    6bd2:	e7f2      	b.n	6bba <usb_dc_ep_clear_stall+0x2e>
    6bd4:	20002000 	.word	0x20002000

00006bd8 <usb_dc_ep_is_stalled>:
{
    6bd8:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    6bda:	4b10      	ldr	r3, [pc, #64]	; (6c1c <usb_dc_ep_is_stalled+0x44>)
    6bdc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    6be0:	b17b      	cbz	r3, 6c02 <usb_dc_ep_is_stalled+0x2a>
    6be2:	4604      	mov	r4, r0
    6be4:	460d      	mov	r5, r1
	return get_usbd_ctx()->ready;
    6be6:	4b0d      	ldr	r3, [pc, #52]	; (6c1c <usb_dc_ep_is_stalled+0x44>)
    6be8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    6bec:	b163      	cbz	r3, 6c08 <usb_dc_ep_is_stalled+0x30>
	ep_ctx = endpoint_ctx(ep);
    6bee:	f7fe ff15 	bl	5a1c <endpoint_ctx>
	if (!ep_ctx) {
    6bf2:	b160      	cbz	r0, 6c0e <usb_dc_ep_is_stalled+0x36>
	if (!stalled) {
    6bf4:	b175      	cbz	r5, 6c14 <usb_dc_ep_is_stalled+0x3c>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    6bf6:	4620      	mov	r0, r4
    6bf8:	f003 fafc 	bl	a1f4 <nrfx_usbd_ep_stall_check>
    6bfc:	7028      	strb	r0, [r5, #0]
	return 0;
    6bfe:	2000      	movs	r0, #0
}
    6c00:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    6c02:	f06f 0012 	mvn.w	r0, #18
    6c06:	e7fb      	b.n	6c00 <usb_dc_ep_is_stalled+0x28>
    6c08:	f06f 0012 	mvn.w	r0, #18
    6c0c:	e7f8      	b.n	6c00 <usb_dc_ep_is_stalled+0x28>
		return -EINVAL;
    6c0e:	f06f 0015 	mvn.w	r0, #21
    6c12:	e7f5      	b.n	6c00 <usb_dc_ep_is_stalled+0x28>
		return -EINVAL;
    6c14:	f06f 0015 	mvn.w	r0, #21
    6c18:	e7f2      	b.n	6c00 <usb_dc_ep_is_stalled+0x28>
    6c1a:	bf00      	nop
    6c1c:	20002000 	.word	0x20002000

00006c20 <usb_dc_ep_enable>:
{
    6c20:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    6c22:	4b15      	ldr	r3, [pc, #84]	; (6c78 <usb_dc_ep_enable+0x58>)
    6c24:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
    6c28:	b1eb      	cbz	r3, 6c66 <usb_dc_ep_enable+0x46>
    6c2a:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep);
    6c2c:	f7fe fef6 	bl	5a1c <endpoint_ctx>
	if (!ep_ctx) {
    6c30:	4605      	mov	r5, r0
    6c32:	b1d8      	cbz	r0, 6c6c <usb_dc_ep_enable+0x4c>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
    6c34:	f014 0f08 	tst.w	r4, #8
    6c38:	d009      	beq.n	6c4e <usb_dc_ep_enable+0x2e>
	if (ep_ctx->cfg.en) {
    6c3a:	7a2b      	ldrb	r3, [r5, #8]
    6c3c:	b9cb      	cbnz	r3, 6c72 <usb_dc_ep_enable+0x52>
	ep_ctx->cfg.en = true;
    6c3e:	2301      	movs	r3, #1
    6c40:	722b      	strb	r3, [r5, #8]
	return get_usbd_ctx()->ready;
    6c42:	4b0d      	ldr	r3, [pc, #52]	; (6c78 <usb_dc_ep_enable+0x58>)
    6c44:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (dev_ready()) {
    6c48:	b943      	cbnz	r3, 6c5c <usb_dc_ep_enable+0x3c>
	return 0;
    6c4a:	2000      	movs	r0, #0
}
    6c4c:	bd38      	pop	{r3, r4, r5, pc}
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    6c4e:	4620      	mov	r0, r4
    6c50:	f003 faf0 	bl	a234 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    6c54:	4620      	mov	r0, r4
    6c56:	f003 fd37 	bl	a6c8 <nrfx_usbd_ep_stall_clear>
    6c5a:	e7ee      	b.n	6c3a <usb_dc_ep_enable+0x1a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    6c5c:	4620      	mov	r0, r4
    6c5e:	f003 fcd9 	bl	a614 <nrfx_usbd_ep_enable>
	return 0;
    6c62:	2000      	movs	r0, #0
    6c64:	e7f2      	b.n	6c4c <usb_dc_ep_enable+0x2c>
		return -ENODEV;
    6c66:	f06f 0012 	mvn.w	r0, #18
    6c6a:	e7ef      	b.n	6c4c <usb_dc_ep_enable+0x2c>
		return -EINVAL;
    6c6c:	f06f 0015 	mvn.w	r0, #21
    6c70:	e7ec      	b.n	6c4c <usb_dc_ep_enable+0x2c>
		return -EALREADY;
    6c72:	f06f 0077 	mvn.w	r0, #119	; 0x77
    6c76:	e7e9      	b.n	6c4c <usb_dc_ep_enable+0x2c>
    6c78:	20002000 	.word	0x20002000

00006c7c <usb_dc_ep_disable>:
{
    6c7c:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    6c7e:	4b13      	ldr	r3, [pc, #76]	; (6ccc <usb_dc_ep_disable+0x50>)
    6c80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    6c84:	b1ab      	cbz	r3, 6cb2 <usb_dc_ep_disable+0x36>
    6c86:	4604      	mov	r4, r0
	return get_usbd_ctx()->ready;
    6c88:	4b10      	ldr	r3, [pc, #64]	; (6ccc <usb_dc_ep_disable+0x50>)
    6c8a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    6c8e:	b19b      	cbz	r3, 6cb8 <usb_dc_ep_disable+0x3c>
	ep_ctx = endpoint_ctx(ep);
    6c90:	f7fe fec4 	bl	5a1c <endpoint_ctx>
	if (!ep_ctx) {
    6c94:	4605      	mov	r5, r0
    6c96:	b190      	cbz	r0, 6cbe <usb_dc_ep_disable+0x42>
	if (!ep_ctx->cfg.en) {
    6c98:	7a03      	ldrb	r3, [r0, #8]
    6c9a:	b19b      	cbz	r3, 6cc4 <usb_dc_ep_disable+0x48>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    6c9c:	4620      	mov	r0, r4
    6c9e:	f003 feed 	bl	aa7c <nrfx_usbd_ep_disable>
	ep_ctx->write_in_progress = false;
    6ca2:	2400      	movs	r4, #0
    6ca4:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
    6ca6:	4628      	mov	r0, r5
    6ca8:	f00a fdc5 	bl	11836 <ep_ctx_reset>
	ep_ctx->cfg.en = false;
    6cac:	722c      	strb	r4, [r5, #8]
	return 0;
    6cae:	4620      	mov	r0, r4
}
    6cb0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    6cb2:	f06f 0012 	mvn.w	r0, #18
    6cb6:	e7fb      	b.n	6cb0 <usb_dc_ep_disable+0x34>
    6cb8:	f06f 0012 	mvn.w	r0, #18
    6cbc:	e7f8      	b.n	6cb0 <usb_dc_ep_disable+0x34>
		return -EINVAL;
    6cbe:	f06f 0015 	mvn.w	r0, #21
    6cc2:	e7f5      	b.n	6cb0 <usb_dc_ep_disable+0x34>
		return -EALREADY;
    6cc4:	f06f 0077 	mvn.w	r0, #119	; 0x77
    6cc8:	e7f2      	b.n	6cb0 <usb_dc_ep_disable+0x34>
    6cca:	bf00      	nop
    6ccc:	20002000 	.word	0x20002000

00006cd0 <usb_dc_ep_write>:
{
    6cd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6cd4:	b084      	sub	sp, #16
    6cd6:	461f      	mov	r7, r3
	return get_usbd_ctx()->attached;
    6cd8:	4b4e      	ldr	r3, [pc, #312]	; (6e14 <usb_dc_ep_write+0x144>)
    6cda:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    6cde:	2b00      	cmp	r3, #0
    6ce0:	f000 808c 	beq.w	6dfc <usb_dc_ep_write+0x12c>
    6ce4:	4604      	mov	r4, r0
    6ce6:	4688      	mov	r8, r1
    6ce8:	4616      	mov	r6, r2
	return get_usbd_ctx()->ready;
    6cea:	4b4a      	ldr	r3, [pc, #296]	; (6e14 <usb_dc_ep_write+0x144>)
    6cec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    6cf0:	2b00      	cmp	r3, #0
    6cf2:	f000 8086 	beq.w	6e02 <usb_dc_ep_write+0x132>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
    6cf6:	f010 0f80 	tst.w	r0, #128	; 0x80
    6cfa:	f000 8085 	beq.w	6e08 <usb_dc_ep_write+0x138>
	ep_ctx = endpoint_ctx(ep);
    6cfe:	f7fe fe8d 	bl	5a1c <endpoint_ctx>
	if (!ep_ctx) {
    6d02:	4605      	mov	r5, r0
    6d04:	2800      	cmp	r0, #0
    6d06:	f000 8082 	beq.w	6e0e <usb_dc_ep_write+0x13e>
	if (!ep_ctx->cfg.en) {
    6d0a:	7a03      	ldrb	r3, [r0, #8]
    6d0c:	2b00      	cmp	r3, #0
    6d0e:	d04e      	beq.n	6dae <usb_dc_ep_write+0xde>
	return z_impl_k_mutex_lock(mutex, timeout);
    6d10:	f04f 32ff 	mov.w	r2, #4294967295
    6d14:	f04f 33ff 	mov.w	r3, #4294967295
    6d18:	483f      	ldr	r0, [pc, #252]	; (6e18 <usb_dc_ep_write+0x148>)
    6d1a:	f007 f85d 	bl	ddd8 <z_impl_k_mutex_lock>
	if (ep_ctx->write_in_progress) {
    6d1e:	7fab      	ldrb	r3, [r5, #30]
    6d20:	2b00      	cmp	r3, #0
    6d22:	d158      	bne.n	6dd6 <usb_dc_ep_write+0x106>
	if (!data_len && ep_ctx->trans_zlp) {
    6d24:	b91e      	cbnz	r6, 6d2e <usb_dc_ep_write+0x5e>
    6d26:	7feb      	ldrb	r3, [r5, #31]
    6d28:	b10b      	cbz	r3, 6d2e <usb_dc_ep_write+0x5e>
		ep_ctx->trans_zlp = false;
    6d2a:	2300      	movs	r3, #0
    6d2c:	77eb      	strb	r3, [r5, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    6d2e:	7aab      	ldrb	r3, [r5, #10]
    6d30:	b963      	cbnz	r3, 6d4c <usb_dc_ep_write+0x7c>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    6d32:	b15e      	cbz	r6, 6d4c <usb_dc_ep_write+0x7c>
    6d34:	4a37      	ldr	r2, [pc, #220]	; (6e14 <usb_dc_ep_write+0x144>)
    6d36:	8952      	ldrh	r2, [r2, #10]
    6d38:	42b2      	cmp	r2, r6
    6d3a:	d907      	bls.n	6d4c <usb_dc_ep_write+0x7c>
		    !(data_len % ep_ctx->cfg.max_sz)) {
    6d3c:	6869      	ldr	r1, [r5, #4]
    6d3e:	fbb6 f2f1 	udiv	r2, r6, r1
    6d42:	fb01 6212 	mls	r2, r1, r2, r6
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    6d46:	b90a      	cbnz	r2, 6d4c <usb_dc_ep_write+0x7c>
			ep_ctx->trans_zlp = true;
    6d48:	2201      	movs	r2, #1
    6d4a:	77ea      	strb	r2, [r5, #31]
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
    6d4c:	b91b      	cbnz	r3, 6d56 <usb_dc_ep_write+0x86>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    6d4e:	f003 fb0b 	bl	a368 <nrfx_usbd_last_setup_dir_get>
    6d52:	42a0      	cmp	r0, r4
    6d54:	d145      	bne.n	6de2 <usb_dc_ep_write+0x112>
	ep_ctx->write_in_progress = true;
    6d56:	2301      	movs	r3, #1
    6d58:	77ab      	strb	r3, [r5, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    6d5a:	f8cd 8004 	str.w	r8, [sp, #4]
    6d5e:	9602      	str	r6, [sp, #8]
    6d60:	2300      	movs	r3, #0
    6d62:	9303      	str	r3, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    6d64:	a901      	add	r1, sp, #4
    6d66:	4620      	mov	r0, r4
    6d68:	f002 fe50 	bl	9a0c <nrfx_usbd_ep_transfer>
    6d6c:	4601      	mov	r1, r0
	if (err != NRFX_SUCCESS) {
    6d6e:	4b2b      	ldr	r3, [pc, #172]	; (6e1c <usb_dc_ep_write+0x14c>)
    6d70:	4298      	cmp	r0, r3
    6d72:	d03d      	beq.n	6df0 <usb_dc_ep_write+0x120>
		ep_ctx->write_in_progress = false;
    6d74:	2300      	movs	r3, #0
    6d76:	77ab      	strb	r3, [r5, #30]
		if (ret_bytes) {
    6d78:	b107      	cbz	r7, 6d7c <usb_dc_ep_write+0xac>
			*ret_bytes = 0;
    6d7a:	603b      	str	r3, [r7, #0]
    6d7c:	4b28      	ldr	r3, [pc, #160]	; (6e20 <usb_dc_ep_write+0x150>)
    6d7e:	4a29      	ldr	r2, [pc, #164]	; (6e24 <usb_dc_ep_write+0x154>)
    6d80:	1a9b      	subs	r3, r3, r2
    6d82:	08db      	lsrs	r3, r3, #3
		LOG_ERR("nRF USBD write error: %d", (uint32_t)err);
    6d84:	f04f 0200 	mov.w	r2, #0
    6d88:	2001      	movs	r0, #1
    6d8a:	f360 0202 	bfi	r2, r0, #0, #3
    6d8e:	f36f 02c5 	bfc	r2, #3, #3
    6d92:	f363 128f 	bfi	r2, r3, #6, #10
    6d96:	4824      	ldr	r0, [pc, #144]	; (6e28 <usb_dc_ep_write+0x158>)
    6d98:	f7fa fe52 	bl	1a40 <log_1>
		result = -EIO;
    6d9c:	f06f 0404 	mvn.w	r4, #4
	return z_impl_k_mutex_unlock(mutex);
    6da0:	481d      	ldr	r0, [pc, #116]	; (6e18 <usb_dc_ep_write+0x148>)
    6da2:	f007 f8a3 	bl	deec <z_impl_k_mutex_unlock>
}
    6da6:	4620      	mov	r0, r4
    6da8:	b004      	add	sp, #16
    6daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6dae:	4b1c      	ldr	r3, [pc, #112]	; (6e20 <usb_dc_ep_write+0x150>)
    6db0:	4a1c      	ldr	r2, [pc, #112]	; (6e24 <usb_dc_ep_write+0x154>)
    6db2:	1a9b      	subs	r3, r3, r2
    6db4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    6db6:	f04f 0200 	mov.w	r2, #0
    6dba:	2101      	movs	r1, #1
    6dbc:	f361 0202 	bfi	r2, r1, #0, #3
    6dc0:	f36f 02c5 	bfc	r2, #3, #3
    6dc4:	f363 128f 	bfi	r2, r3, #6, #10
    6dc8:	4621      	mov	r1, r4
    6dca:	4818      	ldr	r0, [pc, #96]	; (6e2c <usb_dc_ep_write+0x15c>)
    6dcc:	f7fa fe38 	bl	1a40 <log_1>
		return -EINVAL;
    6dd0:	f06f 0415 	mvn.w	r4, #21
    6dd4:	e7e7      	b.n	6da6 <usb_dc_ep_write+0xd6>
    6dd6:	4810      	ldr	r0, [pc, #64]	; (6e18 <usb_dc_ep_write+0x148>)
    6dd8:	f007 f888 	bl	deec <z_impl_k_mutex_unlock>
		return -EAGAIN;
    6ddc:	f06f 040a 	mvn.w	r4, #10
    6de0:	e7e1      	b.n	6da6 <usb_dc_ep_write+0xd6>
		nrfx_usbd_setup_clear();
    6de2:	f003 fab1 	bl	a348 <nrfx_usbd_setup_clear>
    6de6:	480c      	ldr	r0, [pc, #48]	; (6e18 <usb_dc_ep_write+0x148>)
    6de8:	f007 f880 	bl	deec <z_impl_k_mutex_unlock>
		return 0;
    6dec:	2400      	movs	r4, #0
    6dee:	e7da      	b.n	6da6 <usb_dc_ep_write+0xd6>
		if (ret_bytes) {
    6df0:	b117      	cbz	r7, 6df8 <usb_dc_ep_write+0x128>
			*ret_bytes = data_len;
    6df2:	603e      	str	r6, [r7, #0]
	int result = 0;
    6df4:	2400      	movs	r4, #0
    6df6:	e7d3      	b.n	6da0 <usb_dc_ep_write+0xd0>
    6df8:	2400      	movs	r4, #0
    6dfa:	e7d1      	b.n	6da0 <usb_dc_ep_write+0xd0>
		return -ENODEV;
    6dfc:	f06f 0412 	mvn.w	r4, #18
    6e00:	e7d1      	b.n	6da6 <usb_dc_ep_write+0xd6>
    6e02:	f06f 0412 	mvn.w	r4, #18
    6e06:	e7ce      	b.n	6da6 <usb_dc_ep_write+0xd6>
		return -EINVAL;
    6e08:	f06f 0415 	mvn.w	r4, #21
    6e0c:	e7cb      	b.n	6da6 <usb_dc_ep_write+0xd6>
		return -EINVAL;
    6e0e:	f06f 0415 	mvn.w	r4, #21
    6e12:	e7c8      	b.n	6da6 <usb_dc_ep_write+0xd6>
    6e14:	20002000 	.word	0x20002000
    6e18:	20002038 	.word	0x20002038
    6e1c:	0bad0000 	.word	0x0bad0000
    6e20:	00014380 	.word	0x00014380
    6e24:	00014318 	.word	0x00014318
    6e28:	000155e0 	.word	0x000155e0
    6e2c:	000155c0 	.word	0x000155c0

00006e30 <usb_dc_ep_read_wait>:
{
    6e30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e34:	4698      	mov	r8, r3
	return get_usbd_ctx()->attached;
    6e36:	4b36      	ldr	r3, [pc, #216]	; (6f10 <usb_dc_ep_read_wait+0xe0>)
    6e38:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    6e3c:	2b00      	cmp	r3, #0
    6e3e:	d05b      	beq.n	6ef8 <usb_dc_ep_read_wait+0xc8>
    6e40:	4606      	mov	r6, r0
    6e42:	460d      	mov	r5, r1
    6e44:	4617      	mov	r7, r2
	return get_usbd_ctx()->ready;
    6e46:	4b32      	ldr	r3, [pc, #200]	; (6f10 <usb_dc_ep_read_wait+0xe0>)
    6e48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    6e4c:	2b00      	cmp	r3, #0
    6e4e:	d056      	beq.n	6efe <usb_dc_ep_read_wait+0xce>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    6e50:	f010 0f80 	tst.w	r0, #128	; 0x80
    6e54:	d156      	bne.n	6f04 <usb_dc_ep_read_wait+0xd4>
	if (!data && max_data_len) {
    6e56:	b351      	cbz	r1, 6eae <usb_dc_ep_read_wait+0x7e>
	ep_ctx = endpoint_ctx(ep);
    6e58:	4630      	mov	r0, r6
    6e5a:	f7fe fddf 	bl	5a1c <endpoint_ctx>
	if (!ep_ctx) {
    6e5e:	4604      	mov	r4, r0
    6e60:	2800      	cmp	r0, #0
    6e62:	d052      	beq.n	6f0a <usb_dc_ep_read_wait+0xda>
	if (!ep_ctx->cfg.en) {
    6e64:	7a03      	ldrb	r3, [r0, #8]
    6e66:	b33b      	cbz	r3, 6eb8 <usb_dc_ep_read_wait+0x88>
	return z_impl_k_mutex_lock(mutex, timeout);
    6e68:	f04f 32ff 	mov.w	r2, #4294967295
    6e6c:	f04f 33ff 	mov.w	r3, #4294967295
    6e70:	4828      	ldr	r0, [pc, #160]	; (6f14 <usb_dc_ep_read_wait+0xe4>)
    6e72:	f006 ffb1 	bl	ddd8 <z_impl_k_mutex_lock>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
    6e76:	68e3      	ldr	r3, [r4, #12]
    6e78:	463e      	mov	r6, r7
    6e7a:	429f      	cmp	r7, r3
    6e7c:	bf28      	it	cs
    6e7e:	461e      	movcs	r6, r3
	if (!data && !max_data_len) {
    6e80:	b375      	cbz	r5, 6ee0 <usb_dc_ep_read_wait+0xb0>
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
    6e82:	4632      	mov	r2, r6
    6e84:	69a1      	ldr	r1, [r4, #24]
    6e86:	4628      	mov	r0, r5
    6e88:	f00a f9b0 	bl	111ec <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
    6e8c:	69a3      	ldr	r3, [r4, #24]
    6e8e:	4433      	add	r3, r6
    6e90:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
    6e92:	68e3      	ldr	r3, [r4, #12]
    6e94:	1b9b      	subs	r3, r3, r6
    6e96:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
    6e98:	f1b8 0f00 	cmp.w	r8, #0
    6e9c:	d001      	beq.n	6ea2 <usb_dc_ep_read_wait+0x72>
		*read_bytes = bytes_to_copy;
    6e9e:	f8c8 6000 	str.w	r6, [r8]
	return z_impl_k_mutex_unlock(mutex);
    6ea2:	481c      	ldr	r0, [pc, #112]	; (6f14 <usb_dc_ep_read_wait+0xe4>)
    6ea4:	f007 f822 	bl	deec <z_impl_k_mutex_unlock>
	return 0;
    6ea8:	2000      	movs	r0, #0
}
    6eaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!data && max_data_len) {
    6eae:	2a00      	cmp	r2, #0
    6eb0:	d0d2      	beq.n	6e58 <usb_dc_ep_read_wait+0x28>
		return -EINVAL;
    6eb2:	f06f 0015 	mvn.w	r0, #21
    6eb6:	e7f8      	b.n	6eaa <usb_dc_ep_read_wait+0x7a>
    6eb8:	4b17      	ldr	r3, [pc, #92]	; (6f18 <usb_dc_ep_read_wait+0xe8>)
    6eba:	4a18      	ldr	r2, [pc, #96]	; (6f1c <usb_dc_ep_read_wait+0xec>)
    6ebc:	1a9b      	subs	r3, r3, r2
    6ebe:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    6ec0:	f04f 0200 	mov.w	r2, #0
    6ec4:	2101      	movs	r1, #1
    6ec6:	f361 0202 	bfi	r2, r1, #0, #3
    6eca:	f36f 02c5 	bfc	r2, #3, #3
    6ece:	f363 128f 	bfi	r2, r3, #6, #10
    6ed2:	4631      	mov	r1, r6
    6ed4:	4812      	ldr	r0, [pc, #72]	; (6f20 <usb_dc_ep_read_wait+0xf0>)
    6ed6:	f7fa fdb3 	bl	1a40 <log_1>
		return -EINVAL;
    6eda:	f06f 0015 	mvn.w	r0, #21
    6ede:	e7e4      	b.n	6eaa <usb_dc_ep_read_wait+0x7a>
	if (!data && !max_data_len) {
    6ee0:	2f00      	cmp	r7, #0
    6ee2:	d1ce      	bne.n	6e82 <usb_dc_ep_read_wait+0x52>
		if (read_bytes) {
    6ee4:	f1b8 0f00 	cmp.w	r8, #0
    6ee8:	d001      	beq.n	6eee <usb_dc_ep_read_wait+0xbe>
			*read_bytes = ep_ctx->buf.len;
    6eea:	f8c8 3000 	str.w	r3, [r8]
    6eee:	4809      	ldr	r0, [pc, #36]	; (6f14 <usb_dc_ep_read_wait+0xe4>)
    6ef0:	f006 fffc 	bl	deec <z_impl_k_mutex_unlock>
		return 0;
    6ef4:	2000      	movs	r0, #0
    6ef6:	e7d8      	b.n	6eaa <usb_dc_ep_read_wait+0x7a>
		return -ENODEV;
    6ef8:	f06f 0012 	mvn.w	r0, #18
    6efc:	e7d5      	b.n	6eaa <usb_dc_ep_read_wait+0x7a>
    6efe:	f06f 0012 	mvn.w	r0, #18
    6f02:	e7d2      	b.n	6eaa <usb_dc_ep_read_wait+0x7a>
		return -EINVAL;
    6f04:	f06f 0015 	mvn.w	r0, #21
    6f08:	e7cf      	b.n	6eaa <usb_dc_ep_read_wait+0x7a>
		return -EINVAL;
    6f0a:	f06f 0015 	mvn.w	r0, #21
    6f0e:	e7cc      	b.n	6eaa <usb_dc_ep_read_wait+0x7a>
    6f10:	20002000 	.word	0x20002000
    6f14:	20002038 	.word	0x20002038
    6f18:	00014380 	.word	0x00014380
    6f1c:	00014318 	.word	0x00014318
    6f20:	000155c0 	.word	0x000155c0

00006f24 <usb_dc_ep_read_continue>:
	return get_usbd_ctx()->attached;
    6f24:	4b58      	ldr	r3, [pc, #352]	; (7088 <usb_dc_ep_read_continue+0x164>)
    6f26:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    6f2a:	2b00      	cmp	r3, #0
    6f2c:	f000 809f 	beq.w	706e <usb_dc_ep_read_continue+0x14a>
{
    6f30:	b530      	push	{r4, r5, lr}
    6f32:	b083      	sub	sp, #12
    6f34:	4605      	mov	r5, r0
	return get_usbd_ctx()->ready;
    6f36:	4b54      	ldr	r3, [pc, #336]	; (7088 <usb_dc_ep_read_continue+0x164>)
    6f38:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    6f3c:	2b00      	cmp	r3, #0
    6f3e:	f000 8099 	beq.w	7074 <usb_dc_ep_read_continue+0x150>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    6f42:	f010 0f80 	tst.w	r0, #128	; 0x80
    6f46:	f040 8098 	bne.w	707a <usb_dc_ep_read_continue+0x156>
	ep_ctx = endpoint_ctx(ep);
    6f4a:	f7fe fd67 	bl	5a1c <endpoint_ctx>
	if (!ep_ctx) {
    6f4e:	4604      	mov	r4, r0
    6f50:	2800      	cmp	r0, #0
    6f52:	f000 8095 	beq.w	7080 <usb_dc_ep_read_continue+0x15c>
	if (!ep_ctx->cfg.en) {
    6f56:	7a03      	ldrb	r3, [r0, #8]
    6f58:	b1a3      	cbz	r3, 6f84 <usb_dc_ep_read_continue+0x60>
	return z_impl_k_mutex_lock(mutex, timeout);
    6f5a:	f04f 32ff 	mov.w	r2, #4294967295
    6f5e:	f04f 33ff 	mov.w	r3, #4294967295
    6f62:	484a      	ldr	r0, [pc, #296]	; (708c <usb_dc_ep_read_continue+0x168>)
    6f64:	f006 ff38 	bl	ddd8 <z_impl_k_mutex_lock>
	if (!ep_ctx->buf.len) {
    6f68:	68e3      	ldr	r3, [r4, #12]
    6f6a:	b92b      	cbnz	r3, 6f78 <usb_dc_ep_read_continue+0x54>
		ep_ctx->buf.curr = ep_ctx->buf.data;
    6f6c:	6963      	ldr	r3, [r4, #20]
    6f6e:	61a3      	str	r3, [r4, #24]
		ep_ctx->read_complete = true;
    6f70:	2301      	movs	r3, #1
    6f72:	7723      	strb	r3, [r4, #28]
		if (ep_ctx->read_pending) {
    6f74:	7f63      	ldrb	r3, [r4, #29]
    6f76:	b9cb      	cbnz	r3, 6fac <usb_dc_ep_read_continue+0x88>
	return z_impl_k_mutex_unlock(mutex);
    6f78:	4844      	ldr	r0, [pc, #272]	; (708c <usb_dc_ep_read_continue+0x168>)
    6f7a:	f006 ffb7 	bl	deec <z_impl_k_mutex_unlock>
	return 0;
    6f7e:	2000      	movs	r0, #0
}
    6f80:	b003      	add	sp, #12
    6f82:	bd30      	pop	{r4, r5, pc}
    6f84:	4b42      	ldr	r3, [pc, #264]	; (7090 <usb_dc_ep_read_continue+0x16c>)
    6f86:	4a43      	ldr	r2, [pc, #268]	; (7094 <usb_dc_ep_read_continue+0x170>)
    6f88:	1a9b      	subs	r3, r3, r2
    6f8a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    6f8c:	f04f 0200 	mov.w	r2, #0
    6f90:	2101      	movs	r1, #1
    6f92:	f361 0202 	bfi	r2, r1, #0, #3
    6f96:	f36f 02c5 	bfc	r2, #3, #3
    6f9a:	f363 128f 	bfi	r2, r3, #6, #10
    6f9e:	4629      	mov	r1, r5
    6fa0:	483d      	ldr	r0, [pc, #244]	; (7098 <usb_dc_ep_read_continue+0x174>)
    6fa2:	f7fa fd4d 	bl	1a40 <log_1>
		return -EINVAL;
    6fa6:	f06f 0015 	mvn.w	r0, #21
    6faa:	e7e9      	b.n	6f80 <usb_dc_ep_read_continue+0x5c>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    6fac:	2200      	movs	r2, #0
    6fae:	2300      	movs	r3, #0
    6fb0:	a901      	add	r1, sp, #4
    6fb2:	483a      	ldr	r0, [pc, #232]	; (709c <usb_dc_ep_read_continue+0x178>)
    6fb4:	f006 fdd6 	bl	db64 <k_mem_slab_alloc>
    6fb8:	b980      	cbnz	r0, 6fdc <usb_dc_ep_read_continue+0xb8>
	ev = (struct usbd_event *)block.data;
    6fba:	9d01      	ldr	r5, [sp, #4]
	ev->block = block;
    6fbc:	606d      	str	r5, [r5, #4]
			if (!ev) {
    6fbe:	2d00      	cmp	r5, #0
    6fc0:	d04f      	beq.n	7062 <usb_dc_ep_read_continue+0x13e>
			ev->evt_type = USBD_EVT_EP;
    6fc2:	2301      	movs	r3, #1
    6fc4:	742b      	strb	r3, [r5, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    6fc6:	60ac      	str	r4, [r5, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    6fc8:	732b      	strb	r3, [r5, #12]
	k_fifo_put(&usbd_evt_fifo, ev);
    6fca:	4629      	mov	r1, r5
    6fcc:	4834      	ldr	r0, [pc, #208]	; (70a0 <usb_dc_ep_read_continue+0x17c>)
    6fce:	f00c fd50 	bl	13a72 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    6fd2:	4934      	ldr	r1, [pc, #208]	; (70a4 <usb_dc_ep_read_continue+0x180>)
    6fd4:	4834      	ldr	r0, [pc, #208]	; (70a8 <usb_dc_ep_read_continue+0x184>)
    6fd6:	f00c fd6d 	bl	13ab4 <k_work_submit_to_queue>
}
    6fda:	e7cd      	b.n	6f78 <usb_dc_ep_read_continue+0x54>
    6fdc:	4b2c      	ldr	r3, [pc, #176]	; (7090 <usb_dc_ep_read_continue+0x16c>)
    6fde:	4a2d      	ldr	r2, [pc, #180]	; (7094 <usb_dc_ep_read_continue+0x170>)
    6fe0:	1a9b      	subs	r3, r3, r2
    6fe2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    6fe4:	f04f 0100 	mov.w	r1, #0
    6fe8:	2201      	movs	r2, #1
    6fea:	f362 0102 	bfi	r1, r2, #0, #3
    6fee:	f36f 01c5 	bfc	r1, #3, #3
    6ff2:	f363 118f 	bfi	r1, r3, #6, #10
    6ff6:	482d      	ldr	r0, [pc, #180]	; (70ac <usb_dc_ep_read_continue+0x188>)
    6ff8:	f7fa fdb6 	bl	1b68 <log_0>
static inline void usbd_evt_flush(void)
    6ffc:	e004      	b.n	7008 <usb_dc_ep_read_continue+0xe4>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    6ffe:	1d01      	adds	r1, r0, #4
    7000:	4826      	ldr	r0, [pc, #152]	; (709c <usb_dc_ep_read_continue+0x178>)
    7002:	f00c fc13 	bl	1382c <k_mem_slab_free>
	} while (ev != NULL);
    7006:	b145      	cbz	r5, 701a <usb_dc_ep_read_continue+0xf6>
	return z_impl_k_queue_get(queue, timeout);
    7008:	2200      	movs	r2, #0
    700a:	2300      	movs	r3, #0
    700c:	4824      	ldr	r0, [pc, #144]	; (70a0 <usb_dc_ep_read_continue+0x17c>)
    700e:	f006 ffb1 	bl	df74 <z_impl_k_queue_get>
		if (ev) {
    7012:	4605      	mov	r5, r0
    7014:	2800      	cmp	r0, #0
    7016:	d1f2      	bne.n	6ffe <usb_dc_ep_read_continue+0xda>
    7018:	e7f5      	b.n	7006 <usb_dc_ep_read_continue+0xe2>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    701a:	2200      	movs	r2, #0
    701c:	2300      	movs	r3, #0
    701e:	a901      	add	r1, sp, #4
    7020:	481e      	ldr	r0, [pc, #120]	; (709c <usb_dc_ep_read_continue+0x178>)
    7022:	f006 fd9f 	bl	db64 <k_mem_slab_alloc>
    7026:	b180      	cbz	r0, 704a <usb_dc_ep_read_continue+0x126>
    7028:	4b19      	ldr	r3, [pc, #100]	; (7090 <usb_dc_ep_read_continue+0x16c>)
    702a:	4a1a      	ldr	r2, [pc, #104]	; (7094 <usb_dc_ep_read_continue+0x170>)
    702c:	1a9b      	subs	r3, r3, r2
    702e:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    7030:	f04f 0100 	mov.w	r1, #0
    7034:	2201      	movs	r2, #1
    7036:	f362 0102 	bfi	r1, r2, #0, #3
    703a:	f36f 01c5 	bfc	r1, #3, #3
    703e:	f363 118f 	bfi	r1, r3, #6, #10
    7042:	481b      	ldr	r0, [pc, #108]	; (70b0 <usb_dc_ep_read_continue+0x18c>)
    7044:	f7fa fd90 	bl	1b68 <log_0>
			return NULL;
    7048:	e7b9      	b.n	6fbe <usb_dc_ep_read_continue+0x9a>
		ev = (struct usbd_event *)block.data;
    704a:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    704c:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    704e:	2304      	movs	r3, #4
    7050:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    7052:	4813      	ldr	r0, [pc, #76]	; (70a0 <usb_dc_ep_read_continue+0x17c>)
    7054:	f00c fd0d 	bl	13a72 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    7058:	4912      	ldr	r1, [pc, #72]	; (70a4 <usb_dc_ep_read_continue+0x180>)
    705a:	4813      	ldr	r0, [pc, #76]	; (70a8 <usb_dc_ep_read_continue+0x184>)
    705c:	f00c fd2a 	bl	13ab4 <k_work_submit_to_queue>
		return NULL;
    7060:	e7ad      	b.n	6fbe <usb_dc_ep_read_continue+0x9a>
	return z_impl_k_mutex_unlock(mutex);
    7062:	480a      	ldr	r0, [pc, #40]	; (708c <usb_dc_ep_read_continue+0x168>)
    7064:	f006 ff42 	bl	deec <z_impl_k_mutex_unlock>
				return -ENOMEM;
    7068:	f06f 000b 	mvn.w	r0, #11
    706c:	e788      	b.n	6f80 <usb_dc_ep_read_continue+0x5c>
		return -ENODEV;
    706e:	f06f 0012 	mvn.w	r0, #18
}
    7072:	4770      	bx	lr
		return -ENODEV;
    7074:	f06f 0012 	mvn.w	r0, #18
    7078:	e782      	b.n	6f80 <usb_dc_ep_read_continue+0x5c>
		return -EINVAL;
    707a:	f06f 0015 	mvn.w	r0, #21
    707e:	e77f      	b.n	6f80 <usb_dc_ep_read_continue+0x5c>
		return -EINVAL;
    7080:	f06f 0015 	mvn.w	r0, #21
    7084:	e77c      	b.n	6f80 <usb_dc_ep_read_continue+0x5c>
    7086:	bf00      	nop
    7088:	20002000 	.word	0x20002000
    708c:	20002038 	.word	0x20002038
    7090:	00014380 	.word	0x00014380
    7094:	00014318 	.word	0x00014318
    7098:	000155c0 	.word	0x000155c0
    709c:	200002e8 	.word	0x200002e8
    70a0:	200003ec 	.word	0x200003ec
    70a4:	20002028 	.word	0x20002028
    70a8:	20000698 	.word	0x20000698
    70ac:	000153e8 	.word	0x000153e8
    70b0:	00015408 	.word	0x00015408

000070b4 <usb_dc_ep_set_callback>:
	return get_usbd_ctx()->attached;
    70b4:	4b08      	ldr	r3, [pc, #32]	; (70d8 <usb_dc_ep_set_callback+0x24>)
    70b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
    70ba:	b13b      	cbz	r3, 70cc <usb_dc_ep_set_callback+0x18>
{
    70bc:	b510      	push	{r4, lr}
    70be:	460c      	mov	r4, r1
	ep_ctx = endpoint_ctx(ep);
    70c0:	f7fe fcac 	bl	5a1c <endpoint_ctx>
	if (!ep_ctx) {
    70c4:	b128      	cbz	r0, 70d2 <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
    70c6:	6004      	str	r4, [r0, #0]
	return 0;
    70c8:	2000      	movs	r0, #0
}
    70ca:	bd10      	pop	{r4, pc}
		return -ENODEV;
    70cc:	f06f 0012 	mvn.w	r0, #18
}
    70d0:	4770      	bx	lr
		return -EINVAL;
    70d2:	f06f 0015 	mvn.w	r0, #21
    70d6:	e7f8      	b.n	70ca <usb_dc_ep_set_callback+0x16>
    70d8:	20002000 	.word	0x20002000

000070dc <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
    70dc:	4b01      	ldr	r3, [pc, #4]	; (70e4 <usb_dc_set_status_callback+0x8>)
    70de:	6018      	str	r0, [r3, #0]
}
    70e0:	4770      	bx	lr
    70e2:	bf00      	nop
    70e4:	20002000 	.word	0x20002000

000070e8 <usb_dc_ep_mps>:
{
    70e8:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    70ea:	4b07      	ldr	r3, [pc, #28]	; (7108 <usb_dc_ep_mps+0x20>)
    70ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
    70f0:	b123      	cbz	r3, 70fc <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
    70f2:	f7fe fc93 	bl	5a1c <endpoint_ctx>
	if (!ep_ctx) {
    70f6:	b120      	cbz	r0, 7102 <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
    70f8:	6840      	ldr	r0, [r0, #4]
}
    70fa:	bd08      	pop	{r3, pc}
		return -ENODEV;
    70fc:	f06f 0012 	mvn.w	r0, #18
    7100:	e7fb      	b.n	70fa <usb_dc_ep_mps+0x12>
		return -EINVAL;
    7102:	f06f 0015 	mvn.w	r0, #21
    7106:	e7f8      	b.n	70fa <usb_dc_ep_mps+0x12>
    7108:	20002000 	.word	0x20002000

0000710c <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    710c:	4800      	ldr	r0, [pc, #0]	; (7110 <get_hf_flags+0x4>)
    710e:	4770      	bx	lr
    7110:	200022e0 	.word	0x200022e0

00007114 <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    7114:	4b03      	ldr	r3, [pc, #12]	; (7124 <get_subsys+0x10>)
    7116:	1ac0      	subs	r0, r0, r3
    7118:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    711a:	4b03      	ldr	r3, [pc, #12]	; (7128 <get_subsys+0x14>)
    711c:	fb03 f000 	mul.w	r0, r3, r0
    7120:	4770      	bx	lr
    7122:	bf00      	nop
    7124:	200022a0 	.word	0x200022a0
    7128:	b6db6db7 	.word	0xb6db6db7

0000712c <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    712c:	b538      	push	{r3, r4, r5, lr}
    712e:	4605      	mov	r5, r0
    7130:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    7132:	f7ff ffef 	bl	7114 <get_subsys>
    7136:	4601      	mov	r1, r0
    7138:	2240      	movs	r2, #64	; 0x40
    713a:	4803      	ldr	r0, [pc, #12]	; (7148 <onoff_stop+0x1c>)
    713c:	f00a fc89 	bl	11a52 <stop>
    7140:	4601      	mov	r1, r0
	notify(mgr, res);
    7142:	4628      	mov	r0, r5
    7144:	47a0      	blx	r4
}
    7146:	bd38      	pop	{r3, r4, r5, pc}
    7148:	00014108 	.word	0x00014108

0000714c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    714c:	b530      	push	{r4, r5, lr}
    714e:	b083      	sub	sp, #12
    7150:	4605      	mov	r5, r0
    7152:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    7154:	f7ff ffde 	bl	7114 <get_subsys>
    7158:	4601      	mov	r1, r0
    715a:	2340      	movs	r3, #64	; 0x40
    715c:	9300      	str	r3, [sp, #0]
    715e:	4623      	mov	r3, r4
    7160:	4a05      	ldr	r2, [pc, #20]	; (7178 <onoff_start+0x2c>)
    7162:	4806      	ldr	r0, [pc, #24]	; (717c <onoff_start+0x30>)
    7164:	f00a fc8f 	bl	11a86 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    7168:	1e01      	subs	r1, r0, #0
    716a:	db01      	blt.n	7170 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    716c:	b003      	add	sp, #12
    716e:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    7170:	4628      	mov	r0, r5
    7172:	47a0      	blx	r4
}
    7174:	e7fa      	b.n	716c <onoff_start+0x20>
    7176:	bf00      	nop
    7178:	00011acf 	.word	0x00011acf
    717c:	00014108 	.word	0x00014108

00007180 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    7180:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    7182:	b110      	cbz	r0, 718a <clock_event_handler+0xa>
    7184:	2801      	cmp	r0, #1
    7186:	d00d      	beq.n	71a4 <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    7188:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    718a:	2100      	movs	r1, #0
    718c:	4808      	ldr	r0, [pc, #32]	; (71b0 <clock_event_handler+0x30>)
    718e:	f00a fbe7 	bl	11960 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    7192:	6883      	ldr	r3, [r0, #8]
    7194:	f013 0f07 	tst.w	r3, #7
    7198:	d1f6      	bne.n	7188 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    719a:	2100      	movs	r1, #0
    719c:	4804      	ldr	r0, [pc, #16]	; (71b0 <clock_event_handler+0x30>)
    719e:	f00a fc46 	bl	11a2e <clkstarted_handle>
    71a2:	e7f1      	b.n	7188 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    71a4:	2101      	movs	r1, #1
    71a6:	4802      	ldr	r0, [pc, #8]	; (71b0 <clock_event_handler+0x30>)
    71a8:	f00a fc41 	bl	11a2e <clkstarted_handle>
}
    71ac:	e7ec      	b.n	7188 <clock_event_handler+0x8>
    71ae:	bf00      	nop
    71b0:	00014108 	.word	0x00014108

000071b4 <generic_hfclk_start>:
{
    71b4:	b510      	push	{r4, lr}
	__asm__ volatile(
    71b6:	f04f 0320 	mov.w	r3, #32
    71ba:	f3ef 8411 	mrs	r4, BASEPRI
    71be:	f383 8812 	msr	BASEPRI_MAX, r3
    71c2:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    71c6:	4a13      	ldr	r2, [pc, #76]	; (7214 <generic_hfclk_start+0x60>)
    71c8:	6813      	ldr	r3, [r2, #0]
    71ca:	f043 0302 	orr.w	r3, r3, #2
    71ce:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    71d0:	f013 0f01 	tst.w	r3, #1
    71d4:	d108      	bne.n	71e8 <generic_hfclk_start+0x34>
	bool already_started = false;
    71d6:	2300      	movs	r3, #0
	__asm__ volatile(
    71d8:	f384 8811 	msr	BASEPRI, r4
    71dc:	f3bf 8f6f 	isb	sy
	if (already_started) {
    71e0:	b99b      	cbnz	r3, 720a <generic_hfclk_start+0x56>
	hfclk_start();
    71e2:	f00a fc7c 	bl	11ade <hfclk_start>
}
    71e6:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    71e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    71ec:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    71f0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    71f4:	f012 0f01 	tst.w	r2, #1
    71f8:	d101      	bne.n	71fe <generic_hfclk_start+0x4a>
	bool already_started = false;
    71fa:	2300      	movs	r3, #0
    71fc:	e7ec      	b.n	71d8 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    71fe:	f7ff ff85 	bl	710c <get_hf_flags>
    7202:	f00a fc01 	bl	11a08 <set_on_state>
			already_started = true;
    7206:	2301      	movs	r3, #1
    7208:	e7e6      	b.n	71d8 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    720a:	2100      	movs	r1, #0
    720c:	4802      	ldr	r0, [pc, #8]	; (7218 <generic_hfclk_start+0x64>)
    720e:	f00a fc0e 	bl	11a2e <clkstarted_handle>
		return;
    7212:	e7e8      	b.n	71e6 <generic_hfclk_start+0x32>
    7214:	200022f0 	.word	0x200022f0
    7218:	00014108 	.word	0x00014108

0000721c <generic_hfclk_stop>:
{
    721c:	b508      	push	{r3, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    721e:	4b0a      	ldr	r3, [pc, #40]	; (7248 <generic_hfclk_stop+0x2c>)
    7220:	f3bf 8f5b 	dmb	ish
    7224:	e853 2f00 	ldrex	r2, [r3]
    7228:	f022 0102 	bic.w	r1, r2, #2
    722c:	e843 1000 	strex	r0, r1, [r3]
    7230:	2800      	cmp	r0, #0
    7232:	d1f7      	bne.n	7224 <generic_hfclk_stop+0x8>
    7234:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    7238:	f012 0f01 	tst.w	r2, #1
    723c:	d000      	beq.n	7240 <generic_hfclk_stop+0x24>
}
    723e:	bd08      	pop	{r3, pc}
	hfclk_stop();
    7240:	f00a fc57 	bl	11af2 <hfclk_stop>
    7244:	e7fb      	b.n	723e <generic_hfclk_stop+0x22>
    7246:	bf00      	nop
    7248:	200022f0 	.word	0x200022f0

0000724c <api_blocking_start>:
{
    724c:	b500      	push	{lr}
    724e:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    7250:	f8cd d000 	str.w	sp, [sp]
    7254:	f8cd d004 	str.w	sp, [sp, #4]
    7258:	2300      	movs	r3, #0
    725a:	9302      	str	r3, [sp, #8]
    725c:	2301      	movs	r3, #1
    725e:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    7260:	466b      	mov	r3, sp
    7262:	4a07      	ldr	r2, [pc, #28]	; (7280 <api_blocking_start+0x34>)
    7264:	f00a fc2b 	bl	11abe <api_start>
	if (err < 0) {
    7268:	2800      	cmp	r0, #0
    726a:	db05      	blt.n	7278 <api_blocking_start+0x2c>
	return z_impl_k_sem_take(sem, timeout);
    726c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    7270:	2300      	movs	r3, #0
    7272:	4668      	mov	r0, sp
    7274:	f006 fede 	bl	e034 <z_impl_k_sem_take>
}
    7278:	b005      	add	sp, #20
    727a:	f85d fb04 	ldr.w	pc, [sp], #4
    727e:	bf00      	nop
    7280:	00011b07 	.word	0x00011b07

00007284 <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    7284:	b570      	push	{r4, r5, r6, lr}
    7286:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    7288:	2200      	movs	r2, #0
    728a:	2101      	movs	r1, #1
    728c:	4610      	mov	r0, r2
    728e:	f7fc fea9 	bl	3fe4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    7292:	2000      	movs	r0, #0
    7294:	f7fc fe74 	bl	3f80 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    7298:	4811      	ldr	r0, [pc, #68]	; (72e0 <clk_init+0x5c>)
    729a:	f001 faf7 	bl	888c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    729e:	4b11      	ldr	r3, [pc, #68]	; (72e4 <clk_init+0x60>)
    72a0:	4298      	cmp	r0, r3
    72a2:	d11a      	bne.n	72da <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    72a4:	f001 fb06 	bl	88b4 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    72a8:	2400      	movs	r4, #0
    72aa:	e003      	b.n	72b4 <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    72ac:	2301      	movs	r3, #1
    72ae:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    72b0:	441c      	add	r4, r3
    72b2:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
    72b4:	2c01      	cmp	r4, #1
    72b6:	d80e      	bhi.n	72d6 <clk_init+0x52>
						get_sub_data(dev, i);
    72b8:	4621      	mov	r1, r4
    72ba:	4630      	mov	r0, r6
    72bc:	f00a fb50 	bl	11960 <get_sub_data>
    72c0:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
    72c2:	4621      	mov	r1, r4
    72c4:	4630      	mov	r0, r6
    72c6:	f00a fb58 	bl	1197a <get_onoff_manager>
    72ca:	4907      	ldr	r1, [pc, #28]	; (72e8 <clk_init+0x64>)
    72cc:	f008 fa0b 	bl	f6e6 <onoff_manager_init>
		if (err < 0) {
    72d0:	2800      	cmp	r0, #0
    72d2:	daeb      	bge.n	72ac <clk_init+0x28>
    72d4:	e000      	b.n	72d8 <clk_init+0x54>
	}

	return 0;
    72d6:	2000      	movs	r0, #0
}
    72d8:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    72da:	f06f 0004 	mvn.w	r0, #4
    72de:	e7fb      	b.n	72d8 <clk_init+0x54>
    72e0:	00007181 	.word	0x00007181
    72e4:	0bad0000 	.word	0x0bad0000
    72e8:	00015664 	.word	0x00015664

000072ec <lfclk_spinwait>:
{
    72ec:	b570      	push	{r4, r5, r6, lr}
    72ee:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    72f0:	2801      	cmp	r0, #1
    72f2:	d107      	bne.n	7304 <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    72f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    72f8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    72fc:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    7300:	2b01      	cmp	r3, #1
    7302:	d058      	beq.n	73b6 <lfclk_spinwait+0xca>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    7304:	f00c fad0 	bl	138a8 <k_is_in_isr>
    7308:	b928      	cbnz	r0, 7316 <lfclk_spinwait+0x2a>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    730a:	4b2e      	ldr	r3, [pc, #184]	; (73c4 <lfclk_spinwait+0xd8>)
    730c:	781b      	ldrb	r3, [r3, #0]
    730e:	2b00      	cmp	r3, #0
    7310:	d041      	beq.n	7396 <lfclk_spinwait+0xaa>
    7312:	2300      	movs	r3, #0
    7314:	e000      	b.n	7318 <lfclk_spinwait+0x2c>
    7316:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    7318:	461c      	mov	r4, r3
    731a:	2b00      	cmp	r3, #0
    731c:	d03d      	beq.n	739a <lfclk_spinwait+0xae>
	__asm__ volatile(
    731e:	f04f 0320 	mov.w	r3, #32
    7322:	f3ef 8611 	mrs	r6, BASEPRI
    7326:	f383 8812 	msr	BASEPRI_MAX, r3
    732a:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    732e:	b924      	cbnz	r4, 733a <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    7330:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7334:	2202      	movs	r2, #2
    7336:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    733a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    733e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    7342:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    7346:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    734a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    734e:	d12b      	bne.n	73a8 <lfclk_spinwait+0xbc>
    return false;
    7350:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    7352:	b11a      	cbz	r2, 735c <lfclk_spinwait+0x70>
    7354:	2b01      	cmp	r3, #1
    7356:	d029      	beq.n	73ac <lfclk_spinwait+0xc0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    7358:	2d01      	cmp	r5, #1
    735a:	d027      	beq.n	73ac <lfclk_spinwait+0xc0>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    735c:	b1fc      	cbz	r4, 739e <lfclk_spinwait+0xb2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    735e:	4630      	mov	r0, r6
    7360:	f7fc fdb6 	bl	3ed0 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    7364:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7368:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    736c:	2b00      	cmp	r3, #0
    736e:	d1e4      	bne.n	733a <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    7370:	4b15      	ldr	r3, [pc, #84]	; (73c8 <lfclk_spinwait+0xdc>)
    7372:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    7374:	2b00      	cmp	r3, #0
    7376:	d0e0      	beq.n	733a <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7378:	4b13      	ldr	r3, [pc, #76]	; (73c8 <lfclk_spinwait+0xdc>)
    737a:	2200      	movs	r2, #0
    737c:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    737e:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    7380:	2301      	movs	r3, #1
    7382:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    7386:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    738a:	4a10      	ldr	r2, [pc, #64]	; (73cc <lfclk_spinwait+0xe0>)
    738c:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7390:	4a0f      	ldr	r2, [pc, #60]	; (73d0 <lfclk_spinwait+0xe4>)
    7392:	6013      	str	r3, [r2, #0]
}
    7394:	e7d1      	b.n	733a <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    7396:	2301      	movs	r3, #1
    7398:	e7be      	b.n	7318 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    739a:	2600      	movs	r6, #0
    739c:	e7c7      	b.n	732e <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    739e:	2021      	movs	r0, #33	; 0x21
    73a0:	2100      	movs	r1, #0
    73a2:	f007 fb61 	bl	ea68 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    73a6:	e7dd      	b.n	7364 <lfclk_spinwait+0x78>
                return true;
    73a8:	2201      	movs	r2, #1
    73aa:	e7d2      	b.n	7352 <lfclk_spinwait+0x66>
	if (isr_mode) {
    73ac:	b124      	cbz	r4, 73b8 <lfclk_spinwait+0xcc>
	__asm__ volatile(
    73ae:	f386 8811 	msr	BASEPRI, r6
    73b2:	f3bf 8f6f 	isb	sy
}
    73b6:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    73b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    73bc:	2202      	movs	r2, #2
    73be:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    73c2:	e7f8      	b.n	73b6 <lfclk_spinwait+0xca>
    73c4:	20002b57 	.word	0x20002b57
    73c8:	40000104 	.word	0x40000104
    73cc:	e000e100 	.word	0xe000e100
    73d0:	40000008 	.word	0x40000008

000073d4 <z_nrf_clock_control_get_onoff>:
{
    73d4:	b508      	push	{r3, lr}
	return get_onoff_manager(CLOCK_DEVICE,
    73d6:	b2c1      	uxtb	r1, r0
    73d8:	4801      	ldr	r0, [pc, #4]	; (73e0 <z_nrf_clock_control_get_onoff+0xc>)
    73da:	f00a face 	bl	1197a <get_onoff_manager>
}
    73de:	bd08      	pop	{r3, pc}
    73e0:	00014108 	.word	0x00014108

000073e4 <z_nrf_clock_control_lf_on>:
{
    73e4:	b510      	push	{r4, lr}
    73e6:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    73e8:	4b10      	ldr	r3, [pc, #64]	; (742c <z_nrf_clock_control_lf_on+0x48>)
    73ea:	2101      	movs	r1, #1
    73ec:	f3bf 8f5b 	dmb	ish
    73f0:	e853 2f00 	ldrex	r2, [r3]
    73f4:	e843 1000 	strex	r0, r1, [r3]
    73f8:	2800      	cmp	r0, #0
    73fa:	d1f9      	bne.n	73f0 <z_nrf_clock_control_lf_on+0xc>
    73fc:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    7400:	b11a      	cbz	r2, 740a <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
    7402:	1e63      	subs	r3, r4, #1
    7404:	2b01      	cmp	r3, #1
    7406:	d90c      	bls.n	7422 <z_nrf_clock_control_lf_on+0x3e>
}
    7408:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    740a:	4809      	ldr	r0, [pc, #36]	; (7430 <z_nrf_clock_control_lf_on+0x4c>)
    740c:	f00a fab5 	bl	1197a <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    7410:	4908      	ldr	r1, [pc, #32]	; (7434 <z_nrf_clock_control_lf_on+0x50>)
    7412:	2300      	movs	r3, #0
    7414:	604b      	str	r3, [r1, #4]
    7416:	60cb      	str	r3, [r1, #12]
    7418:	2301      	movs	r3, #1
    741a:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    741c:	f008 f97f 	bl	f71e <onoff_request>
    7420:	e7ef      	b.n	7402 <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
    7422:	4620      	mov	r0, r4
    7424:	f7ff ff62 	bl	72ec <lfclk_spinwait>
		break;
    7428:	e7ee      	b.n	7408 <z_nrf_clock_control_lf_on+0x24>
    742a:	bf00      	nop
    742c:	200022f4 	.word	0x200022f4
    7430:	00014108 	.word	0x00014108
    7434:	20002290 	.word	0x20002290

00007438 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    7438:	b510      	push	{r4, lr}
    743a:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    743c:	280a      	cmp	r0, #10
    743e:	d007      	beq.n	7450 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    7440:	4b07      	ldr	r3, [pc, #28]	; (7460 <console_out+0x28>)
    7442:	6818      	ldr	r0, [r3, #0]
    7444:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    7446:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    7448:	685b      	ldr	r3, [r3, #4]
    744a:	4798      	blx	r3

	return c;
}
    744c:	4620      	mov	r0, r4
    744e:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    7450:	4b03      	ldr	r3, [pc, #12]	; (7460 <console_out+0x28>)
    7452:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    7454:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    7456:	685b      	ldr	r3, [r3, #4]
    7458:	210d      	movs	r1, #13
    745a:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    745c:	e7f0      	b.n	7440 <console_out+0x8>
    745e:	bf00      	nop
    7460:	200022f8 	.word	0x200022f8

00007464 <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
    7464:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    7466:	4c04      	ldr	r4, [pc, #16]	; (7478 <uart_console_hook_install+0x14>)
    7468:	4620      	mov	r0, r4
    746a:	f7fd fc3b 	bl	4ce4 <__stdout_hook_install>
	__printk_hook_install(console_out);
    746e:	4620      	mov	r0, r4
    7470:	f7f9 fa68 	bl	944 <__printk_hook_install>
}
    7474:	bd10      	pop	{r4, pc}
    7476:	bf00      	nop
    7478:	00007439 	.word	0x00007439

0000747c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    747c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    747e:	4806      	ldr	r0, [pc, #24]	; (7498 <uart_console_init+0x1c>)
    7480:	4b06      	ldr	r3, [pc, #24]	; (749c <uart_console_init+0x20>)
    7482:	6018      	str	r0, [r3, #0]
    7484:	f00c f91c 	bl	136c0 <z_device_ready>
    7488:	b118      	cbz	r0, 7492 <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
    748a:	f7ff ffeb 	bl	7464 <uart_console_hook_install>

	return 0;
    748e:	2000      	movs	r0, #0
}
    7490:	bd08      	pop	{r3, pc}
		return -ENODEV;
    7492:	f06f 0012 	mvn.w	r0, #18
    7496:	e7fb      	b.n	7490 <uart_console_init+0x14>
    7498:	00014120 	.word	0x00014120
    749c:	200022f8 	.word	0x200022f8

000074a0 <gpio_nrfx_config>:
	return res;
}

static int gpio_nrfx_config(const struct device *port,
			    gpio_pin_t pin, gpio_flags_t flags)
{
    74a0:	b4f0      	push	{r4, r5, r6, r7}
	return port->config;
    74a2:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    74a4:	685f      	ldr	r7, [r3, #4]
	nrf_gpio_pin_pull_t pull;
	nrf_gpio_pin_drive_t drive;
	nrf_gpio_pin_dir_t dir;
	nrf_gpio_pin_input_t input;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    74a6:	4b37      	ldr	r3, [pc, #220]	; (7584 <gpio_nrfx_config+0xe4>)
    74a8:	4013      	ands	r3, r2
    74aa:	4c37      	ldr	r4, [pc, #220]	; (7588 <gpio_nrfx_config+0xe8>)
    74ac:	42a3      	cmp	r3, r4
    74ae:	d027      	beq.n	7500 <gpio_nrfx_config+0x60>
    74b0:	d812      	bhi.n	74d8 <gpio_nrfx_config+0x38>
    74b2:	2b06      	cmp	r3, #6
    74b4:	d026      	beq.n	7504 <gpio_nrfx_config+0x64>
    74b6:	d904      	bls.n	74c2 <gpio_nrfx_config+0x22>
    74b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    74bc:	d109      	bne.n	74d2 <gpio_nrfx_config+0x32>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		drive = NRF_GPIO_PIN_H0S1;
    74be:	2401      	movs	r4, #1
    74c0:	e016      	b.n	74f0 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    74c2:	b30b      	cbz	r3, 7508 <gpio_nrfx_config+0x68>
    74c4:	2b02      	cmp	r3, #2
    74c6:	d101      	bne.n	74cc <gpio_nrfx_config+0x2c>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		drive = NRF_GPIO_PIN_D0S1;
    74c8:	2404      	movs	r4, #4
    74ca:	e011      	b.n	74f0 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    74cc:	f06f 0015 	mvn.w	r0, #21
    74d0:	e046      	b.n	7560 <gpio_nrfx_config+0xc0>
    74d2:	f06f 0015 	mvn.w	r0, #21
    74d6:	e043      	b.n	7560 <gpio_nrfx_config+0xc0>
    74d8:	4c2c      	ldr	r4, [pc, #176]	; (758c <gpio_nrfx_config+0xec>)
    74da:	42a3      	cmp	r3, r4
    74dc:	d016      	beq.n	750c <gpio_nrfx_config+0x6c>
    74de:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    74e2:	d101      	bne.n	74e8 <gpio_nrfx_config+0x48>
		drive = NRF_GPIO_PIN_H0H1;
    74e4:	2403      	movs	r4, #3
    74e6:	e003      	b.n	74f0 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    74e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    74ec:	d146      	bne.n	757c <gpio_nrfx_config+0xdc>
		drive = NRF_GPIO_PIN_S0H1;
    74ee:	2402      	movs	r4, #2

	default:
		return -EINVAL;
	}

	if ((flags & GPIO_PULL_UP) != 0) {
    74f0:	f012 0f10 	tst.w	r2, #16
    74f4:	d10c      	bne.n	7510 <gpio_nrfx_config+0x70>
		pull = NRF_GPIO_PIN_PULLUP;
	} else if ((flags & GPIO_PULL_DOWN) != 0) {
    74f6:	f012 0f20 	tst.w	r2, #32
    74fa:	d033      	beq.n	7564 <gpio_nrfx_config+0xc4>
		pull = NRF_GPIO_PIN_PULLDOWN;
    74fc:	2501      	movs	r5, #1
    74fe:	e008      	b.n	7512 <gpio_nrfx_config+0x72>
		drive = NRF_GPIO_PIN_H0D1;
    7500:	2407      	movs	r4, #7
    7502:	e7f5      	b.n	74f0 <gpio_nrfx_config+0x50>
		drive = NRF_GPIO_PIN_S0D1;
    7504:	2406      	movs	r4, #6
    7506:	e7f3      	b.n	74f0 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    7508:	2400      	movs	r4, #0
    750a:	e7f1      	b.n	74f0 <gpio_nrfx_config+0x50>
		drive = NRF_GPIO_PIN_D0H1;
    750c:	2405      	movs	r4, #5
    750e:	e7ef      	b.n	74f0 <gpio_nrfx_config+0x50>
		pull = NRF_GPIO_PIN_PULLUP;
    7510:	2503      	movs	r5, #3
	} else {
		pull = NRF_GPIO_PIN_NOPULL;
	}

	dir = ((flags & GPIO_OUTPUT) != 0)
    7512:	f3c2 2340 	ubfx	r3, r2, #9, #1
	      ? NRF_GPIO_PIN_DIR_OUTPUT
	      : NRF_GPIO_PIN_DIR_INPUT;

	input = ((flags & GPIO_INPUT) != 0)
		? NRF_GPIO_PIN_INPUT_CONNECT
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    7516:	f412 7f80 	tst.w	r2, #256	; 0x100
    751a:	bf0c      	ite	eq
    751c:	2601      	moveq	r6, #1
    751e:	2600      	movne	r6, #0

	if ((flags & GPIO_OUTPUT) != 0) {
    7520:	f412 7f00 	tst.w	r2, #512	; 0x200
    7524:	d006      	beq.n	7534 <gpio_nrfx_config+0x94>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    7526:	f412 6f00 	tst.w	r2, #2048	; 0x800
    752a:	d01d      	beq.n	7568 <gpio_nrfx_config+0xc8>
			nrf_gpio_port_out_set(reg, BIT(pin));
    752c:	2201      	movs	r2, #1
    752e:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    7530:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
	return port->config;
    7534:	6842      	ldr	r2, [r0, #4]
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
			nrf_gpio_port_out_clear(reg, BIT(pin));
		}
	}

	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
    7536:	7a12      	ldrb	r2, [r2, #8]
    7538:	f001 011f 	and.w	r1, r1, #31
    753c:	ea41 1242 	orr.w	r2, r1, r2, lsl #5
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    7540:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7542:	2a01      	cmp	r2, #1
    7544:	d018      	beq.n	7578 <gpio_nrfx_config+0xd8>
        case 0: return NRF_P0;
    7546:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    754a:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    754e:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    7552:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    7556:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
    755a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		     dir, input, pull, drive, NRF_GPIO_PIN_NOSENSE);

	return 0;
    755e:	2000      	movs	r0, #0
}
    7560:	bcf0      	pop	{r4, r5, r6, r7}
    7562:	4770      	bx	lr
		pull = NRF_GPIO_PIN_NOPULL;
    7564:	2500      	movs	r5, #0
    7566:	e7d4      	b.n	7512 <gpio_nrfx_config+0x72>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    7568:	f412 6f80 	tst.w	r2, #1024	; 0x400
    756c:	d0e2      	beq.n	7534 <gpio_nrfx_config+0x94>
			nrf_gpio_port_out_clear(reg, BIT(pin));
    756e:	2201      	movs	r2, #1
    7570:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    7572:	f8c7 250c 	str.w	r2, [r7, #1292]	; 0x50c
}
    7576:	e7dd      	b.n	7534 <gpio_nrfx_config+0x94>
        case 1: return NRF_P1;
    7578:	4a05      	ldr	r2, [pc, #20]	; (7590 <gpio_nrfx_config+0xf0>)
    757a:	e7e6      	b.n	754a <gpio_nrfx_config+0xaa>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    757c:	f06f 0015 	mvn.w	r0, #21
    7580:	e7ee      	b.n	7560 <gpio_nrfx_config+0xc0>
    7582:	bf00      	nop
    7584:	00f00006 	.word	0x00f00006
    7588:	00100006 	.word	0x00100006
    758c:	00400002 	.word	0x00400002
    7590:	50000300 	.word	0x50000300

00007594 <cfg_level_pins>:
	 */
	return out;
}

static void cfg_level_pins(const struct device *port)
{
    7594:	b4f0      	push	{r4, r5, r6, r7}
	return port->data;
    7596:	6905      	ldr	r5, [r0, #16]
	return port->config;
    7598:	6846      	ldr	r6, [r0, #4]
	uint32_t out = data->pin_int_en;
    759a:	68e9      	ldr	r1, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    759c:	696a      	ldr	r2, [r5, #20]
    759e:	69ab      	ldr	r3, [r5, #24]
    75a0:	4313      	orrs	r3, r2
    75a2:	ea21 0103 	bic.w	r1, r1, r3
	const struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;
    75a6:	2301      	movs	r3, #1
	uint32_t pin = 0U;
    75a8:	2000      	movs	r0, #0
	uint32_t level_pins = get_level_pins(port);

	/* Configure sense detection on all pins that use it. */
	while (level_pins) {
    75aa:	e011      	b.n	75d0 <cfg_level_pins+0x3c>
		return NRF_GPIO_PIN_SENSE_HIGH;
    75ac:	f04f 0c02 	mov.w	ip, #2
    75b0:	e01d      	b.n	75ee <cfg_level_pins+0x5a>
    75b2:	4f14      	ldr	r7, [pc, #80]	; (7604 <cfg_level_pins+0x70>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    75b4:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    75b8:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
    75bc:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    75c0:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
    75c4:	f847 2024 	str.w	r2, [r7, r4, lsl #2]
		if (level_pins & bit) {
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
			uint32_t sense = sense_for_pin(data, pin);

			nrf_gpio_cfg_sense_set(abs_pin, sense);
			level_pins &= ~bit;
    75c8:	ea21 0103 	bic.w	r1, r1, r3
		}
		++pin;
    75cc:	3001      	adds	r0, #1
		bit <<= 1;
    75ce:	005b      	lsls	r3, r3, #1
	while (level_pins) {
    75d0:	b1a9      	cbz	r1, 75fe <cfg_level_pins+0x6a>
		if (level_pins & bit) {
    75d2:	420b      	tst	r3, r1
    75d4:	d0fa      	beq.n	75cc <cfg_level_pins+0x38>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    75d6:	7a34      	ldrb	r4, [r6, #8]
    75d8:	f000 021f 	and.w	r2, r0, #31
    75dc:	ea42 1244 	orr.w	r2, r2, r4, lsl #5
	if ((BIT(pin) & data->int_active_level) != 0U) {
    75e0:	692c      	ldr	r4, [r5, #16]
    75e2:	40c4      	lsrs	r4, r0
    75e4:	f014 0f01 	tst.w	r4, #1
    75e8:	d1e0      	bne.n	75ac <cfg_level_pins+0x18>
	return NRF_GPIO_PIN_SENSE_LOW;
    75ea:	f04f 0c03 	mov.w	ip, #3
    *p_pin = pin_number & 0x1F;
    75ee:	f002 041f 	and.w	r4, r2, #31
    return pin_number >> 5;
    75f2:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    75f4:	2a01      	cmp	r2, #1
    75f6:	d0dc      	beq.n	75b2 <cfg_level_pins+0x1e>
        case 0: return NRF_P0;
    75f8:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    75fc:	e7da      	b.n	75b4 <cfg_level_pins+0x20>
	}
}
    75fe:	bcf0      	pop	{r4, r5, r6, r7}
    7600:	4770      	bx	lr
    7602:	bf00      	nop
    7604:	50000300 	.word	0x50000300

00007608 <check_level_trigger_pins>:
 *
 * @return Bitmask where 1 marks pin as trigger source.
 */
static uint32_t check_level_trigger_pins(const struct device *port,
					 uint32_t *sense_levels)
{
    7608:	b5f0      	push	{r4, r5, r6, r7, lr}
    760a:	468c      	mov	ip, r1
	return port->data;
    760c:	6903      	ldr	r3, [r0, #16]
	return port->config;
    760e:	6841      	ldr	r1, [r0, #4]
	uint32_t out = data->pin_int_en;
    7610:	68df      	ldr	r7, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    7612:	695a      	ldr	r2, [r3, #20]
    7614:	6998      	ldr	r0, [r3, #24]
    7616:	4302      	orrs	r2, r0
    7618:	ea27 0702 	bic.w	r7, r7, r2
	struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t level_pins = get_level_pins(port);
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
    761c:	684a      	ldr	r2, [r1, #4]
    return p_reg->IN;
    761e:	f8d2 2510 	ldr.w	r2, [r2, #1296]	; 0x510

	/* Extract which pins have logic level same as interrupt trigger level.
	 */
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    7622:	6918      	ldr	r0, [r3, #16]
    7624:	4050      	eors	r0, r2

	/* Discard pins that aren't configured for level. */
	uint32_t out = pin_states & level_pins;
    7626:	ea27 0000 	bic.w	r0, r7, r0
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;

	uint32_t port_latch = 0;

	uint32_t check_pins = level_pins;
    762a:	463c      	mov	r4, r7
	uint32_t bit = 1U << pin;
    762c:	2301      	movs	r3, #1
	uint32_t pin = 0U;
    762e:	2500      	movs	r5, #0
#if IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE)
	/* Read LATCH, which will tell us which pin has changed its state. */
	port_latch = cfg->port->LATCH;
#endif

	while (check_pins) {
    7630:	e015      	b.n	765e <check_level_trigger_pins+0x56>
        case 1: return NRF_P1;
    7632:	f8df e074 	ldr.w	lr, [pc, #116]	; 76a8 <check_level_trigger_pins+0xa0>
    7636:	e025      	b.n	7684 <check_level_trigger_pins+0x7c>
    *p_pin = pin_number & 0x1F;
    7638:	f002 061f 	and.w	r6, r2, #31
    return pin_number >> 5;
    763c:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    763e:	2a01      	cmp	r2, #1
    7640:	d02e      	beq.n	76a0 <check_level_trigger_pins+0x98>
        case 0: return NRF_P0;
    7642:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    7646:	f506 72e0 	add.w	r2, r6, #448	; 0x1c0
    764a:	f85e 6022 	ldr.w	r6, [lr, r2, lsl #2]
    764e:	f426 3640 	bic.w	r6, r6, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    7652:	f84e 6022 	str.w	r6, [lr, r2, lsl #2]
					*sense_levels |= bit;
				}
			}

			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
			check_pins &= ~bit;
    7656:	ea24 0403 	bic.w	r4, r4, r3
		}
		++pin;
    765a:	3501      	adds	r5, #1
		bit <<= 1;
    765c:	005b      	lsls	r3, r3, #1
	while (check_pins) {
    765e:	b314      	cbz	r4, 76a6 <check_level_trigger_pins+0x9e>
		if (check_pins & bit) {
    7660:	4223      	tst	r3, r4
    7662:	d0fa      	beq.n	765a <check_level_trigger_pins+0x52>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    7664:	7a0e      	ldrb	r6, [r1, #8]
    7666:	f005 021f 	and.w	r2, r5, #31
    766a:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
			if (!(level_pins & bit)) {
    766e:	423b      	tst	r3, r7
    7670:	d1e2      	bne.n	7638 <check_level_trigger_pins+0x30>
    *p_pin = pin_number & 0x1F;
    7672:	f002 061f 	and.w	r6, r2, #31
    return pin_number >> 5;
    7676:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    767a:	f1be 0f01 	cmp.w	lr, #1
    767e:	d0d8      	beq.n	7632 <check_level_trigger_pins+0x2a>
        case 0: return NRF_P0;
    7680:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    7684:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    7688:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    768c:	f3c6 4601 	ubfx	r6, r6, #16, #2
				if (high) {
    7690:	2e02      	cmp	r6, #2
    7692:	d1d1      	bne.n	7638 <check_level_trigger_pins+0x30>
					*sense_levels |= bit;
    7694:	f8dc 6000 	ldr.w	r6, [ip]
    7698:	431e      	orrs	r6, r3
    769a:	f8cc 6000 	str.w	r6, [ip]
    769e:	e7cb      	b.n	7638 <check_level_trigger_pins+0x30>
        case 1: return NRF_P1;
    76a0:	f8df e004 	ldr.w	lr, [pc, #4]	; 76a8 <check_level_trigger_pins+0xa0>
    76a4:	e7cf      	b.n	7646 <check_level_trigger_pins+0x3e>
	 */
	cfg->port->LATCH = port_latch;
#endif

	return out;
}
    76a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    76a8:	50000300 	.word	0x50000300

000076ac <gpiote_pin_cleanup>:
{
    76ac:	b510      	push	{r4, lr}
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    76ae:	4b14      	ldr	r3, [pc, #80]	; (7700 <gpiote_pin_cleanup+0x54>)
    76b0:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    76b4:	b2e4      	uxtb	r4, r4
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    76b6:	2300      	movs	r3, #0
    76b8:	e000      	b.n	76bc <gpiote_pin_cleanup+0x10>
    76ba:	3301      	adds	r3, #1
    76bc:	2b07      	cmp	r3, #7
    76be:	d81d      	bhi.n	76fc <gpiote_pin_cleanup+0x50>
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    76c0:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    76c4:	490e      	ldr	r1, [pc, #56]	; (7700 <gpiote_pin_cleanup+0x54>)
    76c6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    76ca:	f3c2 2205 	ubfx	r2, r2, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    76ce:	4290      	cmp	r0, r2
    76d0:	d1f3      	bne.n	76ba <gpiote_pin_cleanup+0xe>
		    && (intenset & BIT(i))) {
    76d2:	fa24 f203 	lsr.w	r2, r4, r3
    76d6:	f012 0f01 	tst.w	r2, #1
    76da:	d0ee      	beq.n	76ba <gpiote_pin_cleanup+0xe>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    76dc:	460a      	mov	r2, r1
    76de:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    76e2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    76e6:	f021 0101 	bic.w	r1, r1, #1
    76ea:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    76ee:	2101      	movs	r1, #1
    76f0:	4099      	lsls	r1, r3
    p_reg->INTENCLR = mask;
    76f2:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    76f6:	b2d8      	uxtb	r0, r3
    76f8:	f001 fa0e 	bl	8b18 <nrfx_gpiote_channel_free>
}
    76fc:	bd10      	pop	{r4, pc}
    76fe:	bf00      	nop
    7700:	40006000 	.word	0x40006000

00007704 <gpiote_channel_alloc>:
{
    7704:	b570      	push	{r4, r5, r6, lr}
    7706:	b082      	sub	sp, #8
    7708:	4604      	mov	r4, r0
    770a:	460d      	mov	r5, r1
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    770c:	f10d 0007 	add.w	r0, sp, #7
    7710:	f001 fa1e 	bl	8b50 <nrfx_gpiote_channel_alloc>
    7714:	4b1c      	ldr	r3, [pc, #112]	; (7788 <gpiote_channel_alloc+0x84>)
    7716:	4298      	cmp	r0, r3
    7718:	d132      	bne.n	7780 <gpiote_channel_alloc+0x7c>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    771a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    771e:	f103 0240 	add.w	r2, r3, #64	; 0x40
    7722:	0092      	lsls	r2, r2, #2
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    7724:	4e19      	ldr	r6, [pc, #100]	; (778c <gpiote_channel_alloc+0x88>)
    7726:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    772a:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    772e:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    7732:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    7736:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    773a:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    773e:	0224      	lsls	r4, r4, #8
    7740:	f404 547c 	and.w	r4, r4, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    7744:	042d      	lsls	r5, r5, #16
    7746:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    774a:	432c      	orrs	r4, r5
    774c:	430c      	orrs	r4, r1
    774e:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
    return ((uint32_t)p_reg + event);
    7752:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    7756:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    775a:	2000      	movs	r0, #0
    775c:	6018      	str	r0, [r3, #0]
    775e:	681b      	ldr	r3, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
    7760:	f89d 1007 	ldrb.w	r1, [sp, #7]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    7764:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    7768:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
    776c:	f042 0201 	orr.w	r2, r2, #1
    7770:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    7774:	2301      	movs	r3, #1
    7776:	408b      	lsls	r3, r1
    p_reg->INTENSET = mask;
    7778:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
}
    777c:	b002      	add	sp, #8
    777e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    7780:	f06f 0012 	mvn.w	r0, #18
    7784:	e7fa      	b.n	777c <gpiote_channel_alloc+0x78>
    7786:	bf00      	nop
    7788:	0bad0000 	.word	0x0bad0000
    778c:	40006000 	.word	0x40006000

00007790 <gpiote_pin_int_cfg>:
{
    7790:	b570      	push	{r4, r5, r6, lr}
    7792:	460d      	mov	r5, r1
	return port->data;
    7794:	6906      	ldr	r6, [r0, #16]
	return port->config;
    7796:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    7798:	7a1b      	ldrb	r3, [r3, #8]
    779a:	f001 041f 	and.w	r4, r1, #31
    779e:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	gpiote_pin_cleanup(abs_pin);
    77a2:	4620      	mov	r0, r4
    77a4:	f7ff ff82 	bl	76ac <gpiote_pin_cleanup>
    *p_pin = pin_number & 0x1F;
    77a8:	f004 001f 	and.w	r0, r4, #31
    return pin_number >> 5;
    77ac:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    77ae:	2b01      	cmp	r3, #1
    77b0:	d020      	beq.n	77f4 <gpiote_pin_int_cfg+0x64>
        case 0: return NRF_P0;
    77b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    77b6:	f500 71e0 	add.w	r1, r0, #448	; 0x1c0
    77ba:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    77be:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    77c2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	if (data->pin_int_en & BIT(pin)) {
    77c6:	68f3      	ldr	r3, [r6, #12]
    77c8:	40eb      	lsrs	r3, r5
    77ca:	f013 0f01 	tst.w	r3, #1
    77ce:	d02f      	beq.n	7830 <gpiote_pin_int_cfg+0xa0>
		if (data->trig_edge & BIT(pin)) {
    77d0:	6973      	ldr	r3, [r6, #20]
    77d2:	40eb      	lsrs	r3, r5
    77d4:	f013 0f01 	tst.w	r3, #1
    77d8:	d015      	beq.n	7806 <gpiote_pin_int_cfg+0x76>
				if (data->double_edge & BIT(pin)) {
    77da:	69b3      	ldr	r3, [r6, #24]
    77dc:	40eb      	lsrs	r3, r5
    77de:	f013 0f01 	tst.w	r3, #1
    77e2:	d109      	bne.n	77f8 <gpiote_pin_int_cfg+0x68>
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    77e4:	6931      	ldr	r1, [r6, #16]
    77e6:	fa21 f505 	lsr.w	r5, r1, r5
    77ea:	f015 0f01 	tst.w	r5, #1
    77ee:	d008      	beq.n	7802 <gpiote_pin_int_cfg+0x72>
					pol = NRF_GPIOTE_POLARITY_LOTOHI;
    77f0:	2101      	movs	r1, #1
    77f2:	e002      	b.n	77fa <gpiote_pin_int_cfg+0x6a>
        case 1: return NRF_P1;
    77f4:	4a0f      	ldr	r2, [pc, #60]	; (7834 <gpiote_pin_int_cfg+0xa4>)
    77f6:	e7de      	b.n	77b6 <gpiote_pin_int_cfg+0x26>
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
    77f8:	2103      	movs	r1, #3
				res = gpiote_channel_alloc(abs_pin, pol);
    77fa:	4620      	mov	r0, r4
    77fc:	f7ff ff82 	bl	7704 <gpiote_channel_alloc>
    7800:	e017      	b.n	7832 <gpiote_pin_int_cfg+0xa2>
					pol = NRF_GPIOTE_POLARITY_HITOLO;
    7802:	2102      	movs	r1, #2
    7804:	e7f9      	b.n	77fa <gpiote_pin_int_cfg+0x6a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    7806:	6931      	ldr	r1, [r6, #16]
    7808:	fa21 f505 	lsr.w	r5, r1, r5
    780c:	f015 0f01 	tst.w	r5, #1
    7810:	d10c      	bne.n	782c <gpiote_pin_int_cfg+0x9c>
	return NRF_GPIO_PIN_SENSE_LOW;
    7812:	2103      	movs	r1, #3
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    7814:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    7818:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    781c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    7820:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    7824:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	int res = 0;
    7828:	2000      	movs	r0, #0
}
    782a:	e002      	b.n	7832 <gpiote_pin_int_cfg+0xa2>
		return NRF_GPIO_PIN_SENSE_HIGH;
    782c:	2102      	movs	r1, #2
    782e:	e7f1      	b.n	7814 <gpiote_pin_int_cfg+0x84>
	int res = 0;
    7830:	2000      	movs	r0, #0
}
    7832:	bd70      	pop	{r4, r5, r6, pc}
    7834:	50000300 	.word	0x50000300

00007838 <gpio_nrfx_pin_interrupt_configure>:
{
    7838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return port->data;
    783a:	6904      	ldr	r4, [r0, #16]
	return port->config;
    783c:	6845      	ldr	r5, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    783e:	7a2e      	ldrb	r6, [r5, #8]
    7840:	f001 051f 	and.w	r5, r1, #31
    7844:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    7848:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    784c:	d025      	beq.n	789a <gpio_nrfx_pin_interrupt_configure+0x62>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    784e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    7852:	d035      	beq.n	78c0 <gpio_nrfx_pin_interrupt_configure+0x88>
    7854:	68e5      	ldr	r5, [r4, #12]
    7856:	2601      	movs	r6, #1
    7858:	408e      	lsls	r6, r1
    785a:	4335      	orrs	r5, r6
    785c:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    785e:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    7862:	d033      	beq.n	78cc <gpio_nrfx_pin_interrupt_configure+0x94>
    7864:	6962      	ldr	r2, [r4, #20]
    7866:	2501      	movs	r5, #1
    7868:	408d      	lsls	r5, r1
    786a:	ea22 0205 	bic.w	r2, r2, r5
    786e:	6162      	str	r2, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    7870:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    7874:	d02f      	beq.n	78d6 <gpio_nrfx_pin_interrupt_configure+0x9e>
    7876:	69a2      	ldr	r2, [r4, #24]
    7878:	2501      	movs	r5, #1
    787a:	408d      	lsls	r5, r1
    787c:	ea22 0205 	bic.w	r2, r2, r5
    7880:	61a2      	str	r2, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    7882:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    7886:	d02b      	beq.n	78e0 <gpio_nrfx_pin_interrupt_configure+0xa8>
    7888:	6923      	ldr	r3, [r4, #16]
    788a:	2201      	movs	r2, #1
    788c:	408a      	lsls	r2, r1
    788e:	ea23 0302 	bic.w	r3, r3, r2
    7892:	6123      	str	r3, [r4, #16]
	return gpiote_pin_int_cfg(port, pin);
    7894:	f7ff ff7c 	bl	7790 <gpiote_pin_int_cfg>
}
    7898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *p_pin = pin_number & 0x1F;
    789a:	f005 061f 	and.w	r6, r5, #31
    return pin_number >> 5;
    789e:	096d      	lsrs	r5, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    78a0:	2d01      	cmp	r5, #1
    78a2:	d00b      	beq.n	78bc <gpio_nrfx_pin_interrupt_configure+0x84>
        case 0: return NRF_P0;
    78a4:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    78a8:	f506 75e0 	add.w	r5, r6, #448	; 0x1c0
    78ac:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    78b0:	f015 0f01 	tst.w	r5, #1
    78b4:	d0cb      	beq.n	784e <gpio_nrfx_pin_interrupt_configure+0x16>
		return -ENOTSUP;
    78b6:	f06f 0085 	mvn.w	r0, #133	; 0x85
    78ba:	e7ed      	b.n	7898 <gpio_nrfx_pin_interrupt_configure+0x60>
        case 1: return NRF_P1;
    78bc:	4f0b      	ldr	r7, [pc, #44]	; (78ec <gpio_nrfx_pin_interrupt_configure+0xb4>)
    78be:	e7f3      	b.n	78a8 <gpio_nrfx_pin_interrupt_configure+0x70>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    78c0:	68e5      	ldr	r5, [r4, #12]
    78c2:	2601      	movs	r6, #1
    78c4:	408e      	lsls	r6, r1
    78c6:	ea25 0506 	bic.w	r5, r5, r6
    78ca:	e7c7      	b.n	785c <gpio_nrfx_pin_interrupt_configure+0x24>
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    78cc:	6962      	ldr	r2, [r4, #20]
    78ce:	2501      	movs	r5, #1
    78d0:	408d      	lsls	r5, r1
    78d2:	432a      	orrs	r2, r5
    78d4:	e7cb      	b.n	786e <gpio_nrfx_pin_interrupt_configure+0x36>
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    78d6:	69a2      	ldr	r2, [r4, #24]
    78d8:	2501      	movs	r5, #1
    78da:	408d      	lsls	r5, r1
    78dc:	432a      	orrs	r2, r5
    78de:	e7cf      	b.n	7880 <gpio_nrfx_pin_interrupt_configure+0x48>
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    78e0:	6923      	ldr	r3, [r4, #16]
    78e2:	2201      	movs	r2, #1
    78e4:	408a      	lsls	r2, r1
    78e6:	4313      	orrs	r3, r2
    78e8:	e7d3      	b.n	7892 <gpio_nrfx_pin_interrupt_configure+0x5a>
    78ea:	bf00      	nop
    78ec:	50000300 	.word	0x50000300

000078f0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    78f0:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    78f2:	4b0b      	ldr	r3, [pc, #44]	; (7920 <gpio_nrfx_init+0x30>)
    78f4:	781b      	ldrb	r3, [r3, #0]
    78f6:	b10b      	cbz	r3, 78fc <gpio_nrfx_init+0xc>
		irq_enable(DT_IRQN(GPIOTE_NODE));
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    78f8:	2000      	movs	r0, #0
    78fa:	bd08      	pop	{r3, pc}
		gpio_initialized = true;
    78fc:	4b08      	ldr	r3, [pc, #32]	; (7920 <gpio_nrfx_init+0x30>)
    78fe:	2201      	movs	r2, #1
    7900:	701a      	strb	r2, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    7902:	2200      	movs	r2, #0
    7904:	2105      	movs	r1, #5
    7906:	2006      	movs	r0, #6
    7908:	f7fc fb6c 	bl	3fe4 <z_arm_irq_priority_set>
		irq_enable(DT_IRQN(GPIOTE_NODE));
    790c:	2006      	movs	r0, #6
    790e:	f7fc fb37 	bl	3f80 <arch_irq_enable>
    7912:	4b04      	ldr	r3, [pc, #16]	; (7924 <gpio_nrfx_init+0x34>)
    7914:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    7918:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    791c:	e7ec      	b.n	78f8 <gpio_nrfx_init+0x8>
    791e:	bf00      	nop
    7920:	20002b4f 	.word	0x20002b4f
    7924:	40006000 	.word	0x40006000

00007928 <gpiote_event_handler>:
{
    7928:	b570      	push	{r4, r5, r6, lr}
    792a:	b084      	sub	sp, #16
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    792c:	2300      	movs	r3, #0
    792e:	9302      	str	r3, [sp, #8]
    7930:	9303      	str	r3, [sp, #12]
	uint32_t sense_levels[GPIO_COUNT] = {0};
    7932:	9300      	str	r3, [sp, #0]
    7934:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7936:	4b46      	ldr	r3, [pc, #280]	; (7a50 <gpiote_event_handler+0x128>)
    7938:	681c      	ldr	r4, [r3, #0]
	if (port_event) {
    793a:	b90c      	cbnz	r4, 7940 <gpiote_event_handler+0x18>
{
    793c:	2100      	movs	r1, #0
    793e:	e011      	b.n	7964 <gpiote_event_handler+0x3c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
    7940:	4d44      	ldr	r5, [pc, #272]	; (7a54 <gpiote_event_handler+0x12c>)
    7942:	4669      	mov	r1, sp
    7944:	4628      	mov	r0, r5
    7946:	f7ff fe5f 	bl	7608 <check_level_trigger_pins>
		fired_triggers[0] =
    794a:	9002      	str	r0, [sp, #8]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
    794c:	a901      	add	r1, sp, #4
    794e:	f105 0018 	add.w	r0, r5, #24
    7952:	f7ff fe59 	bl	7608 <check_level_trigger_pins>
		fired_triggers[1] =
    7956:	9003      	str	r0, [sp, #12]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7958:	4b3d      	ldr	r3, [pc, #244]	; (7a50 <gpiote_event_handler+0x128>)
    795a:	2200      	movs	r2, #0
    795c:	601a      	str	r2, [r3, #0]
    795e:	681b      	ldr	r3, [r3, #0]
}
    7960:	e7ec      	b.n	793c <gpiote_event_handler+0x14>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    7962:	3101      	adds	r1, #1
    7964:	2907      	cmp	r1, #7
    7966:	d82d      	bhi.n	79c4 <gpiote_event_handler+0x9c>
		nrf_gpiote_event_t evt =
    7968:	f101 0340 	add.w	r3, r1, #64	; 0x40
    796c:	009b      	lsls	r3, r3, #2
    796e:	b29a      	uxth	r2, r3
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    7970:	2301      	movs	r3, #1
    7972:	408b      	lsls	r3, r1
    return p_reg->INTENSET & mask;
    7974:	4838      	ldr	r0, [pc, #224]	; (7a58 <gpiote_event_handler+0x130>)
    7976:	f8d0 0304 	ldr.w	r0, [r0, #772]	; 0x304
    797a:	4203      	tst	r3, r0
    797c:	d0f1      	beq.n	7962 <gpiote_event_handler+0x3a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    797e:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    7982:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    7986:	681b      	ldr	r3, [r3, #0]
    7988:	2b00      	cmp	r3, #0
    798a:	d0ea      	beq.n	7962 <gpiote_event_handler+0x3a>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    798c:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    7990:	4831      	ldr	r0, [pc, #196]	; (7a58 <gpiote_event_handler+0x130>)
    7992:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    7996:	f3c0 3340 	ubfx	r3, r0, #13, #1
    799a:	f3c0 2004 	ubfx	r0, r0, #8, #5
    799e:	2501      	movs	r5, #1
    79a0:	fa05 f000 	lsl.w	r0, r5, r0
    79a4:	ad04      	add	r5, sp, #16
    79a6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    79aa:	f853 5c08 	ldr.w	r5, [r3, #-8]
    79ae:	4305      	orrs	r5, r0
    79b0:	f843 5c08 	str.w	r5, [r3, #-8]
    return ((uint32_t)p_reg + event);
    79b4:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    79b8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    79bc:	2200      	movs	r2, #0
    79be:	601a      	str	r2, [r3, #0]
    79c0:	681b      	ldr	r3, [r3, #0]
}
    79c2:	e7ce      	b.n	7962 <gpiote_event_handler+0x3a>
	if (fired_triggers[0]) {
    79c4:	9e02      	ldr	r6, [sp, #8]
    79c6:	b92e      	cbnz	r6, 79d4 <gpiote_event_handler+0xac>
	if (fired_triggers[1]) {
    79c8:	9e03      	ldr	r6, [sp, #12]
    79ca:	b9ee      	cbnz	r6, 7a08 <gpiote_event_handler+0xe0>
	if (port_event) {
    79cc:	2c00      	cmp	r4, #0
    79ce:	d135      	bne.n	7a3c <gpiote_event_handler+0x114>
}
    79d0:	b004      	add	sp, #16
    79d2:	bd70      	pop	{r4, r5, r6, pc}
	return list->head;
    79d4:	4b21      	ldr	r3, [pc, #132]	; (7a5c <gpiote_event_handler+0x134>)
    79d6:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    79d8:	b119      	cbz	r1, 79e2 <gpiote_event_handler+0xba>
    79da:	460d      	mov	r5, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    79dc:	b149      	cbz	r1, 79f2 <gpiote_event_handler+0xca>
	return node->next;
    79de:	680d      	ldr	r5, [r1, #0]
    79e0:	e007      	b.n	79f2 <gpiote_event_handler+0xca>
    79e2:	460d      	mov	r5, r1
    79e4:	e005      	b.n	79f2 <gpiote_event_handler+0xca>
    79e6:	b16d      	cbz	r5, 7a04 <gpiote_event_handler+0xdc>
    79e8:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    79ea:	b105      	cbz	r5, 79ee <gpiote_event_handler+0xc6>
	return node->next;
    79ec:	682b      	ldr	r3, [r5, #0]
    79ee:	4629      	mov	r1, r5
    79f0:	461d      	mov	r5, r3
    79f2:	2900      	cmp	r1, #0
    79f4:	d0e8      	beq.n	79c8 <gpiote_event_handler+0xa0>
		if (cb->pin_mask & pins) {
    79f6:	688a      	ldr	r2, [r1, #8]
    79f8:	4032      	ands	r2, r6
    79fa:	d0f4      	beq.n	79e6 <gpiote_event_handler+0xbe>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    79fc:	684b      	ldr	r3, [r1, #4]
    79fe:	4815      	ldr	r0, [pc, #84]	; (7a54 <gpiote_event_handler+0x12c>)
    7a00:	4798      	blx	r3
    7a02:	e7f0      	b.n	79e6 <gpiote_event_handler+0xbe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    7a04:	462b      	mov	r3, r5
    7a06:	e7f2      	b.n	79ee <gpiote_event_handler+0xc6>
	return list->head;
    7a08:	4b15      	ldr	r3, [pc, #84]	; (7a60 <gpiote_event_handler+0x138>)
    7a0a:	6859      	ldr	r1, [r3, #4]
    7a0c:	b119      	cbz	r1, 7a16 <gpiote_event_handler+0xee>
    7a0e:	460d      	mov	r5, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    7a10:	b149      	cbz	r1, 7a26 <gpiote_event_handler+0xfe>
	return node->next;
    7a12:	680d      	ldr	r5, [r1, #0]
    7a14:	e007      	b.n	7a26 <gpiote_event_handler+0xfe>
    7a16:	460d      	mov	r5, r1
    7a18:	e005      	b.n	7a26 <gpiote_event_handler+0xfe>
    7a1a:	b16d      	cbz	r5, 7a38 <gpiote_event_handler+0x110>
    7a1c:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    7a1e:	b105      	cbz	r5, 7a22 <gpiote_event_handler+0xfa>
	return node->next;
    7a20:	682b      	ldr	r3, [r5, #0]
    7a22:	4629      	mov	r1, r5
    7a24:	461d      	mov	r5, r3
    7a26:	2900      	cmp	r1, #0
    7a28:	d0d0      	beq.n	79cc <gpiote_event_handler+0xa4>
		if (cb->pin_mask & pins) {
    7a2a:	688a      	ldr	r2, [r1, #8]
    7a2c:	4032      	ands	r2, r6
    7a2e:	d0f4      	beq.n	7a1a <gpiote_event_handler+0xf2>
			cb->handler(port, cb, cb->pin_mask & pins);
    7a30:	684b      	ldr	r3, [r1, #4]
    7a32:	480c      	ldr	r0, [pc, #48]	; (7a64 <gpiote_event_handler+0x13c>)
    7a34:	4798      	blx	r3
    7a36:	e7f0      	b.n	7a1a <gpiote_event_handler+0xf2>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    7a38:	462b      	mov	r3, r5
    7a3a:	e7f2      	b.n	7a22 <gpiote_event_handler+0xfa>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
    7a3c:	4c05      	ldr	r4, [pc, #20]	; (7a54 <gpiote_event_handler+0x12c>)
    7a3e:	4620      	mov	r0, r4
    7a40:	f7ff fda8 	bl	7594 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
    7a44:	f104 0018 	add.w	r0, r4, #24
    7a48:	f7ff fda4 	bl	7594 <cfg_level_pins>
}
    7a4c:	e7c0      	b.n	79d0 <gpiote_event_handler+0xa8>
    7a4e:	bf00      	nop
    7a50:	4000617c 	.word	0x4000617c
    7a54:	00014150 	.word	0x00014150
    7a58:	40006000 	.word	0x40006000
    7a5c:	200022fc 	.word	0x200022fc
    7a60:	20002318 	.word	0x20002318
    7a64:	00014168 	.word	0x00014168

00007a68 <nrf52_errata_242>:
    #else
        #if defined (NRF52805_XXAA) || defined (DEVELOP_IN_NRF52805)\
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7a68:	4b03      	ldr	r3, [pc, #12]	; (7a78 <nrf52_errata_242+0x10>)
    7a6a:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    7a6c:	2b08      	cmp	r3, #8
    7a6e:	d001      	beq.n	7a74 <nrf52_errata_242+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    7a70:	2000      	movs	r0, #0
    7a72:	4770      	bx	lr
                        return true;
    7a74:	2001      	movs	r0, #1
    #endif
}
    7a76:	4770      	bx	lr
    7a78:	10000130 	.word	0x10000130

00007a7c <nvmc_wait_ready>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    7a7c:	4b03      	ldr	r3, [pc, #12]	; (7a8c <nvmc_wait_ready+0x10>)
    7a7e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
#endif /* CONFIG_SOC_FLASH_NRF_UICR */
}

static void nvmc_wait_ready(void)
{
	while (!nrfx_nvmc_write_done_check()) {
    7a82:	f013 0f01 	tst.w	r3, #1
    7a86:	d0f9      	beq.n	7a7c <nvmc_wait_ready>
	}
}
    7a88:	4770      	bx	lr
    7a8a:	bf00      	nop
    7a8c:	4001e000 	.word	0x4001e000

00007a90 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
    7a90:	4b02      	ldr	r3, [pc, #8]	; (7a9c <flash_nrf_pages_layout+0xc>)
    7a92:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
    7a94:	2301      	movs	r3, #1
    7a96:	6013      	str	r3, [r2, #0]
}
    7a98:	4770      	bx	lr
    7a9a:	bf00      	nop
    7a9c:	20002334 	.word	0x20002334

00007aa0 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
    7aa0:	4800      	ldr	r0, [pc, #0]	; (7aa4 <flash_nrf_get_parameters+0x4>)
    7aa2:	4770      	bx	lr
    7aa4:	00015740 	.word	0x00015740

00007aa8 <suspend_pofwarn>:
 * Do not attempt to write or erase if EVENTS_POFWARN is already asserted.
 */
static bool pofcon_enabled;

static int suspend_pofwarn(void)
{
    7aa8:	b508      	push	{r3, lr}
	if (!nrf52_errata_242()) {
    7aaa:	f7ff ffdd 	bl	7a68 <nrf52_errata_242>
    7aae:	b328      	cbz	r0, 7afc <suspend_pofwarn+0x54>
    uint32_t pofcon = p_reg->POFCON;
    7ab0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7ab4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
            == POWER_POFCON_POF_Enabled;
    7ab8:	f013 0201 	ands.w	r2, r3, #1
    7abc:	b2d2      	uxtb	r2, r2
	bool enabled;
	nrf_power_pof_thr_t pof_thr;

	pof_thr = nrf_power_pofcon_get(NRF_POWER, &enabled);

	if (enabled) {
    7abe:	d01f      	beq.n	7b00 <suspend_pofwarn+0x58>
    uint32_t pofcon = p_reg->POFCON;
    7ac0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    7ac4:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
    7ac8:	f021 011f 	bic.w	r1, r1, #31
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
    7acc:	f003 031e 	and.w	r3, r3, #30
    pofcon |=
    7ad0:	4319      	orrs	r1, r3
    p_reg->POFCON = pofcon;
    7ad2:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7ad6:	490b      	ldr	r1, [pc, #44]	; (7b04 <suspend_pofwarn+0x5c>)
    7ad8:	6809      	ldr	r1, [r1, #0]
		nrf_power_pofcon_set(NRF_POWER, false, pof_thr);

		/* This check need to be reworked once POFWARN event will be
		 * served by zephyr.
		 */
		if (nrf_power_event_check(NRF_POWER, NRF_POWER_EVENT_POFWARN)) {
    7ada:	b919      	cbnz	r1, 7ae4 <suspend_pofwarn+0x3c>
			nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
			return -ECANCELED;
		}

		pofcon_enabled = enabled;
    7adc:	4b0a      	ldr	r3, [pc, #40]	; (7b08 <suspend_pofwarn+0x60>)
    7ade:	701a      	strb	r2, [r3, #0]
	}

	return 0;
    7ae0:	2000      	movs	r0, #0
    7ae2:	e00c      	b.n	7afe <suspend_pofwarn+0x56>
    uint32_t pofcon = p_reg->POFCON;
    7ae4:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
    7ae8:	f022 021f 	bic.w	r2, r2, #31
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
    7aec:	f043 0301 	orr.w	r3, r3, #1
    pofcon |=
    7af0:	4313      	orrs	r3, r2
    p_reg->POFCON = pofcon;
    7af2:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
			return -ECANCELED;
    7af6:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    7afa:	e000      	b.n	7afe <suspend_pofwarn+0x56>
		return 0;
    7afc:	2000      	movs	r0, #0
}
    7afe:	bd08      	pop	{r3, pc}
	return 0;
    7b00:	2000      	movs	r0, #0
    7b02:	e7fc      	b.n	7afe <suspend_pofwarn+0x56>
    7b04:	40000108 	.word	0x40000108
    7b08:	20002b50 	.word	0x20002b50

00007b0c <restore_pofwarn>:

static void restore_pofwarn(void)
{
	nrf_power_pof_thr_t pof_thr;

	if (pofcon_enabled) {
    7b0c:	4b0a      	ldr	r3, [pc, #40]	; (7b38 <restore_pofwarn+0x2c>)
    7b0e:	781b      	ldrb	r3, [r3, #0]
    7b10:	b18b      	cbz	r3, 7b36 <restore_pofwarn+0x2a>
    uint32_t pofcon = p_reg->POFCON;
    7b12:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    7b16:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    uint32_t pofcon = p_reg->POFCON;
    7b1a:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
    pofcon &= ~(POWER_POFCON_THRESHOLD_Msk | POWER_POFCON_POF_Msk);
    7b1e:	f023 031f 	bic.w	r3, r3, #31
        (((uint32_t)thr) << POWER_POFCON_THRESHOLD_Pos) |
    7b22:	f002 021e 	and.w	r2, r2, #30
    7b26:	f042 0201 	orr.w	r2, r2, #1
    pofcon |=
    7b2a:	4313      	orrs	r3, r2
    p_reg->POFCON = pofcon;
    7b2c:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
		pof_thr = nrf_power_pofcon_get(NRF_POWER, NULL);

		nrf_power_pofcon_set(NRF_POWER, true, pof_thr);
		pofcon_enabled = false;
    7b30:	4b01      	ldr	r3, [pc, #4]	; (7b38 <restore_pofwarn+0x2c>)
    7b32:	2200      	movs	r2, #0
    7b34:	701a      	strb	r2, [r3, #0]
	}
}
    7b36:	4770      	bx	lr
    7b38:	20002b50 	.word	0x20002b50

00007b3c <flash_nrf_erase>:
{
    7b3c:	b570      	push	{r4, r5, r6, lr}
    7b3e:	460c      	mov	r4, r1
    7b40:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
    7b42:	f00a fbe2 	bl	1230a <nrfx_nvmc_flash_page_size_get>
    7b46:	4606      	mov	r6, r0
	size_t flash_size = nrfx_nvmc_flash_size_get();
    7b48:	f00a fbdb 	bl	12302 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
    7b4c:	42a0      	cmp	r0, r4
    7b4e:	d914      	bls.n	7b7a <flash_nrf_erase+0x3e>
    7b50:	2c00      	cmp	r4, #0
    7b52:	db12      	blt.n	7b7a <flash_nrf_erase+0x3e>
	    addr < 0 ||
    7b54:	42a8      	cmp	r0, r5
    7b56:	d310      	bcc.n	7b7a <flash_nrf_erase+0x3e>
	    (addr) + len > flash_size) {
    7b58:	1963      	adds	r3, r4, r5
	    len > flash_size ||
    7b5a:	4283      	cmp	r3, r0
    7b5c:	d80d      	bhi.n	7b7a <flash_nrf_erase+0x3e>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
    7b5e:	fbb4 f3f6 	udiv	r3, r4, r6
    7b62:	fb06 4313 	mls	r3, r6, r3, r4
    7b66:	b9f3      	cbnz	r3, 7ba6 <flash_nrf_erase+0x6a>
    7b68:	fbb5 f3f6 	udiv	r3, r5, r6
    7b6c:	fb06 5313 	mls	r3, r6, r3, r5
    7b70:	b9cb      	cbnz	r3, 7ba6 <flash_nrf_erase+0x6a>
		if (!n_pages) {
    7b72:	42b5      	cmp	r5, r6
    7b74:	d22c      	bcs.n	7bd0 <flash_nrf_erase+0x94>
			return 0;
    7b76:	2400      	movs	r4, #0
    7b78:	e013      	b.n	7ba2 <flash_nrf_erase+0x66>
    7b7a:	4a1e      	ldr	r2, [pc, #120]	; (7bf4 <flash_nrf_erase+0xb8>)
    7b7c:	4b1e      	ldr	r3, [pc, #120]	; (7bf8 <flash_nrf_erase+0xbc>)
    7b7e:	1ad2      	subs	r2, r2, r3
    7b80:	08d2      	lsrs	r2, r2, #3
		LOG_ERR("invalid address: 0x%08lx:%zu",
    7b82:	f04f 0300 	mov.w	r3, #0
    7b86:	2101      	movs	r1, #1
    7b88:	f361 0302 	bfi	r3, r1, #0, #3
    7b8c:	f36f 03c5 	bfc	r3, #3, #3
    7b90:	f362 138f 	bfi	r3, r2, #6, #10
    7b94:	462a      	mov	r2, r5
    7b96:	4621      	mov	r1, r4
    7b98:	4818      	ldr	r0, [pc, #96]	; (7bfc <flash_nrf_erase+0xc0>)
    7b9a:	f7f9 ff87 	bl	1aac <log_2>
		return -EINVAL;
    7b9e:	f06f 0415 	mvn.w	r4, #21
}
    7ba2:	4620      	mov	r0, r4
    7ba4:	bd70      	pop	{r4, r5, r6, pc}
    7ba6:	4a13      	ldr	r2, [pc, #76]	; (7bf4 <flash_nrf_erase+0xb8>)
    7ba8:	4b13      	ldr	r3, [pc, #76]	; (7bf8 <flash_nrf_erase+0xbc>)
    7baa:	1ad2      	subs	r2, r2, r3
    7bac:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("unaligned address: 0x%08lx:%zu",
    7bae:	f04f 0300 	mov.w	r3, #0
    7bb2:	2101      	movs	r1, #1
    7bb4:	f361 0302 	bfi	r3, r1, #0, #3
    7bb8:	f36f 03c5 	bfc	r3, #3, #3
    7bbc:	f362 138f 	bfi	r3, r2, #6, #10
    7bc0:	462a      	mov	r2, r5
    7bc2:	4621      	mov	r1, r4
    7bc4:	480e      	ldr	r0, [pc, #56]	; (7c00 <flash_nrf_erase+0xc4>)
    7bc6:	f7f9 ff71 	bl	1aac <log_2>
			return -EINVAL;
    7bca:	f06f 0415 	mvn.w	r4, #21
    7bce:	e7e8      	b.n	7ba2 <flash_nrf_erase+0x66>
	return z_impl_k_sem_take(sem, timeout);
    7bd0:	4e0c      	ldr	r6, [pc, #48]	; (7c04 <flash_nrf_erase+0xc8>)
    7bd2:	f04f 32ff 	mov.w	r2, #4294967295
    7bd6:	f04f 33ff 	mov.w	r3, #4294967295
    7bda:	4630      	mov	r0, r6
    7bdc:	f006 fa2a 	bl	e034 <z_impl_k_sem_take>
		ret = erase(addr, size);
    7be0:	4629      	mov	r1, r5
    7be2:	4620      	mov	r0, r4
    7be4:	f00a f842 	bl	11c6c <erase>
    7be8:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
    7bea:	4630      	mov	r0, r6
    7bec:	f006 f9fe 	bl	dfec <z_impl_k_sem_give>
	return ret;
    7bf0:	e7d7      	b.n	7ba2 <flash_nrf_erase+0x66>
    7bf2:	bf00      	nop
    7bf4:	00014320 	.word	0x00014320
    7bf8:	00014318 	.word	0x00014318
    7bfc:	000156bc 	.word	0x000156bc
    7c00:	000156dc 	.word	0x000156dc
    7c04:	2000233c 	.word	0x2000233c

00007c08 <flash_nrf_write>:
{
    7c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7c0a:	460c      	mov	r4, r1
    7c0c:	4616      	mov	r6, r2
    7c0e:	461d      	mov	r5, r3
	size_t flash_size = nrfx_nvmc_flash_size_get();
    7c10:	f00a fb77 	bl	12302 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
    7c14:	42a0      	cmp	r0, r4
    7c16:	d90f      	bls.n	7c38 <flash_nrf_write+0x30>
    7c18:	2c00      	cmp	r4, #0
    7c1a:	db0d      	blt.n	7c38 <flash_nrf_write+0x30>
	    addr < 0 ||
    7c1c:	42a8      	cmp	r0, r5
    7c1e:	d30b      	bcc.n	7c38 <flash_nrf_write+0x30>
	    (addr) + len > flash_size) {
    7c20:	1963      	adds	r3, r4, r5
	    len > flash_size ||
    7c22:	4298      	cmp	r0, r3
    7c24:	d308      	bcc.n	7c38 <flash_nrf_write+0x30>
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
    7c26:	f014 0f03 	tst.w	r4, #3
    7c2a:	d11b      	bne.n	7c64 <flash_nrf_write+0x5c>
    7c2c:	f015 0f03 	tst.w	r5, #3
    7c30:	d118      	bne.n	7c64 <flash_nrf_write+0x5c>
	if (!len) {
    7c32:	bb65      	cbnz	r5, 7c8e <flash_nrf_write+0x86>
		return 0;
    7c34:	2400      	movs	r4, #0
    7c36:	e013      	b.n	7c60 <flash_nrf_write+0x58>
    7c38:	4a1e      	ldr	r2, [pc, #120]	; (7cb4 <flash_nrf_write+0xac>)
    7c3a:	4b1f      	ldr	r3, [pc, #124]	; (7cb8 <flash_nrf_write+0xb0>)
    7c3c:	1ad2      	subs	r2, r2, r3
    7c3e:	08d2      	lsrs	r2, r2, #3
		LOG_ERR("invalid address: 0x%08lx:%zu",
    7c40:	f04f 0300 	mov.w	r3, #0
    7c44:	2101      	movs	r1, #1
    7c46:	f361 0302 	bfi	r3, r1, #0, #3
    7c4a:	f36f 03c5 	bfc	r3, #3, #3
    7c4e:	f362 138f 	bfi	r3, r2, #6, #10
    7c52:	462a      	mov	r2, r5
    7c54:	4621      	mov	r1, r4
    7c56:	4819      	ldr	r0, [pc, #100]	; (7cbc <flash_nrf_write+0xb4>)
    7c58:	f7f9 ff28 	bl	1aac <log_2>
		return -EINVAL;
    7c5c:	f06f 0415 	mvn.w	r4, #21
}
    7c60:	4620      	mov	r0, r4
    7c62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7c64:	4a13      	ldr	r2, [pc, #76]	; (7cb4 <flash_nrf_write+0xac>)
    7c66:	4b14      	ldr	r3, [pc, #80]	; (7cb8 <flash_nrf_write+0xb0>)
    7c68:	1ad2      	subs	r2, r2, r3
    7c6a:	08d2      	lsrs	r2, r2, #3
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
    7c6c:	f04f 0300 	mov.w	r3, #0
    7c70:	2101      	movs	r1, #1
    7c72:	f361 0302 	bfi	r3, r1, #0, #3
    7c76:	f36f 03c5 	bfc	r3, #3, #3
    7c7a:	f362 138f 	bfi	r3, r2, #6, #10
    7c7e:	462a      	mov	r2, r5
    7c80:	4621      	mov	r1, r4
    7c82:	480f      	ldr	r0, [pc, #60]	; (7cc0 <flash_nrf_write+0xb8>)
    7c84:	f7f9 ff12 	bl	1aac <log_2>
		return -EINVAL;
    7c88:	f06f 0415 	mvn.w	r4, #21
    7c8c:	e7e8      	b.n	7c60 <flash_nrf_write+0x58>
	return z_impl_k_sem_take(sem, timeout);
    7c8e:	4f0d      	ldr	r7, [pc, #52]	; (7cc4 <flash_nrf_write+0xbc>)
    7c90:	f04f 32ff 	mov.w	r2, #4294967295
    7c94:	f04f 33ff 	mov.w	r3, #4294967295
    7c98:	4638      	mov	r0, r7
    7c9a:	f006 f9cb 	bl	e034 <z_impl_k_sem_take>
		ret = write(addr, data, len);
    7c9e:	462a      	mov	r2, r5
    7ca0:	4631      	mov	r1, r6
    7ca2:	4620      	mov	r0, r4
    7ca4:	f00a f809 	bl	11cba <write>
    7ca8:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
    7caa:	4638      	mov	r0, r7
    7cac:	f006 f99e 	bl	dfec <z_impl_k_sem_give>
	return ret;
    7cb0:	e7d6      	b.n	7c60 <flash_nrf_write+0x58>
    7cb2:	bf00      	nop
    7cb4:	00014320 	.word	0x00014320
    7cb8:	00014318 	.word	0x00014318
    7cbc:	000156bc 	.word	0x000156bc
    7cc0:	000156fc 	.word	0x000156fc
    7cc4:	2000233c 	.word	0x2000233c

00007cc8 <flash_nrf_read>:
{
    7cc8:	b570      	push	{r4, r5, r6, lr}
    7cca:	460c      	mov	r4, r1
    7ccc:	4616      	mov	r6, r2
    7cce:	461d      	mov	r5, r3
	size_t flash_size = nrfx_nvmc_flash_size_get();
    7cd0:	f00a fb17 	bl	12302 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
    7cd4:	4284      	cmp	r4, r0
    7cd6:	d209      	bcs.n	7cec <flash_nrf_read+0x24>
    7cd8:	2c00      	cmp	r4, #0
    7cda:	db07      	blt.n	7cec <flash_nrf_read+0x24>
	    addr < 0 ||
    7cdc:	42a8      	cmp	r0, r5
    7cde:	d305      	bcc.n	7cec <flash_nrf_read+0x24>
	    (addr) + len > flash_size) {
    7ce0:	1963      	adds	r3, r4, r5
	    len > flash_size ||
    7ce2:	4283      	cmp	r3, r0
    7ce4:	d802      	bhi.n	7cec <flash_nrf_read+0x24>
	if (!len) {
    7ce6:	b9b5      	cbnz	r5, 7d16 <flash_nrf_read+0x4e>
		return 0;
    7ce8:	2000      	movs	r0, #0
    7cea:	e013      	b.n	7d14 <flash_nrf_read+0x4c>
    7cec:	4a0d      	ldr	r2, [pc, #52]	; (7d24 <flash_nrf_read+0x5c>)
    7cee:	4b0e      	ldr	r3, [pc, #56]	; (7d28 <flash_nrf_read+0x60>)
    7cf0:	1ad2      	subs	r2, r2, r3
    7cf2:	08d2      	lsrs	r2, r2, #3
		LOG_ERR("invalid address: 0x%08lx:%zu",
    7cf4:	f04f 0300 	mov.w	r3, #0
    7cf8:	2101      	movs	r1, #1
    7cfa:	f361 0302 	bfi	r3, r1, #0, #3
    7cfe:	f36f 03c5 	bfc	r3, #3, #3
    7d02:	f362 138f 	bfi	r3, r2, #6, #10
    7d06:	462a      	mov	r2, r5
    7d08:	4621      	mov	r1, r4
    7d0a:	4808      	ldr	r0, [pc, #32]	; (7d2c <flash_nrf_read+0x64>)
    7d0c:	f7f9 fece 	bl	1aac <log_2>
		return -EINVAL;
    7d10:	f06f 0015 	mvn.w	r0, #21
}
    7d14:	bd70      	pop	{r4, r5, r6, pc}
	memcpy(data, (void *)addr, len);
    7d16:	462a      	mov	r2, r5
    7d18:	4621      	mov	r1, r4
    7d1a:	4630      	mov	r0, r6
    7d1c:	f009 fa66 	bl	111ec <memcpy>
	return 0;
    7d20:	2000      	movs	r0, #0
    7d22:	e7f7      	b.n	7d14 <flash_nrf_read+0x4c>
    7d24:	00014320 	.word	0x00014320
    7d28:	00014318 	.word	0x00014318
    7d2c:	000156bc 	.word	0x000156bc

00007d30 <nrf_flash_init>:
{
    7d30:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
    7d32:	2201      	movs	r2, #1
    7d34:	4611      	mov	r1, r2
    7d36:	4806      	ldr	r0, [pc, #24]	; (7d50 <nrf_flash_init+0x20>)
    7d38:	f00b fea7 	bl	13a8a <z_impl_k_sem_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
    7d3c:	f00a fae9 	bl	12312 <nrfx_nvmc_flash_page_count_get>
    7d40:	4c04      	ldr	r4, [pc, #16]	; (7d54 <nrf_flash_init+0x24>)
    7d42:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
    7d44:	f00a fae1 	bl	1230a <nrfx_nvmc_flash_page_size_get>
    7d48:	6060      	str	r0, [r4, #4]
}
    7d4a:	2000      	movs	r0, #0
    7d4c:	bd10      	pop	{r4, pc}
    7d4e:	bf00      	nop
    7d50:	2000233c 	.word	0x2000233c
    7d54:	20002334 	.word	0x20002334

00007d58 <baudrate_set>:
	return dev->data;
}

static inline const struct uarte_nrfx_config *get_dev_config(const struct device *dev)
{
	return dev->config;
    7d58:	6843      	ldr	r3, [r0, #4]

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = get_dev_config(dev);

	return config->uarte_regs;
    7d5a:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    7d5c:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    7d60:	d06f      	beq.n	7e42 <baudrate_set+0xea>
    7d62:	d83a      	bhi.n	7dda <baudrate_set+0x82>
    7d64:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    7d68:	d06e      	beq.n	7e48 <baudrate_set+0xf0>
    7d6a:	d90a      	bls.n	7d82 <baudrate_set+0x2a>
    7d6c:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    7d70:	d075      	beq.n	7e5e <baudrate_set+0x106>
    7d72:	d924      	bls.n	7dbe <baudrate_set+0x66>
    7d74:	f647 2312 	movw	r3, #31250	; 0x7a12
    7d78:	4299      	cmp	r1, r3
    7d7a:	d12b      	bne.n	7dd4 <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    7d7c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    7d80:	e013      	b.n	7daa <baudrate_set+0x52>
	switch (baudrate) {
    7d82:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    7d86:	d061      	beq.n	7e4c <baudrate_set+0xf4>
    7d88:	d907      	bls.n	7d9a <baudrate_set+0x42>
    7d8a:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    7d8e:	d063      	beq.n	7e58 <baudrate_set+0x100>
    7d90:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    7d94:	d110      	bne.n	7db8 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    7d96:	4b3c      	ldr	r3, [pc, #240]	; (7e88 <baudrate_set+0x130>)
    7d98:	e007      	b.n	7daa <baudrate_set+0x52>
	switch (baudrate) {
    7d9a:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    7d9e:	d058      	beq.n	7e52 <baudrate_set+0xfa>
    7da0:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    7da4:	d105      	bne.n	7db2 <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    7da6:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    7daa:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    7dae:	2000      	movs	r0, #0
    7db0:	4770      	bx	lr
	switch (baudrate) {
    7db2:	f06f 0015 	mvn.w	r0, #21
    7db6:	4770      	bx	lr
    7db8:	f06f 0015 	mvn.w	r0, #21
    7dbc:	4770      	bx	lr
    7dbe:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    7dc2:	d04e      	beq.n	7e62 <baudrate_set+0x10a>
    7dc4:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    7dc8:	d101      	bne.n	7dce <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    7dca:	4b30      	ldr	r3, [pc, #192]	; (7e8c <baudrate_set+0x134>)
    7dcc:	e7ed      	b.n	7daa <baudrate_set+0x52>
	switch (baudrate) {
    7dce:	f06f 0015 	mvn.w	r0, #21
    7dd2:	4770      	bx	lr
    7dd4:	f06f 0015 	mvn.w	r0, #21
    7dd8:	4770      	bx	lr
    7dda:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    7dde:	d042      	beq.n	7e66 <baudrate_set+0x10e>
    7de0:	d909      	bls.n	7df6 <baudrate_set+0x9e>
    7de2:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    7de6:	d046      	beq.n	7e76 <baudrate_set+0x11e>
    7de8:	d91f      	bls.n	7e2a <baudrate_set+0xd2>
    7dea:	4b29      	ldr	r3, [pc, #164]	; (7e90 <baudrate_set+0x138>)
    7dec:	4299      	cmp	r1, r3
    7dee:	d148      	bne.n	7e82 <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    7df0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    7df4:	e7d9      	b.n	7daa <baudrate_set+0x52>
	switch (baudrate) {
    7df6:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    7dfa:	d037      	beq.n	7e6c <baudrate_set+0x114>
    7dfc:	d905      	bls.n	7e0a <baudrate_set+0xb2>
    7dfe:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    7e02:	d10f      	bne.n	7e24 <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    7e04:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    7e08:	e7cf      	b.n	7daa <baudrate_set+0x52>
	switch (baudrate) {
    7e0a:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    7e0e:	4299      	cmp	r1, r3
    7e10:	d02e      	beq.n	7e70 <baudrate_set+0x118>
    7e12:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    7e16:	d102      	bne.n	7e1e <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    7e18:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    7e1c:	e7c5      	b.n	7daa <baudrate_set+0x52>
	switch (baudrate) {
    7e1e:	f06f 0015 	mvn.w	r0, #21
    7e22:	4770      	bx	lr
    7e24:	f06f 0015 	mvn.w	r0, #21
    7e28:	4770      	bx	lr
    7e2a:	4b1a      	ldr	r3, [pc, #104]	; (7e94 <baudrate_set+0x13c>)
    7e2c:	4299      	cmp	r1, r3
    7e2e:	d025      	beq.n	7e7c <baudrate_set+0x124>
    7e30:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    7e34:	d102      	bne.n	7e3c <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    7e36:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    7e3a:	e7b6      	b.n	7daa <baudrate_set+0x52>
	switch (baudrate) {
    7e3c:	f06f 0015 	mvn.w	r0, #21
    7e40:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    7e42:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    7e46:	e7b0      	b.n	7daa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    7e48:	4b13      	ldr	r3, [pc, #76]	; (7e98 <baudrate_set+0x140>)
    7e4a:	e7ae      	b.n	7daa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    7e4c:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    7e50:	e7ab      	b.n	7daa <baudrate_set+0x52>
	switch (baudrate) {
    7e52:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    7e56:	e7a8      	b.n	7daa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    7e58:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    7e5c:	e7a5      	b.n	7daa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    7e5e:	4b0f      	ldr	r3, [pc, #60]	; (7e9c <baudrate_set+0x144>)
    7e60:	e7a3      	b.n	7daa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    7e62:	4b0f      	ldr	r3, [pc, #60]	; (7ea0 <baudrate_set+0x148>)
    7e64:	e7a1      	b.n	7daa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    7e66:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    7e6a:	e79e      	b.n	7daa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    7e6c:	4b0d      	ldr	r3, [pc, #52]	; (7ea4 <baudrate_set+0x14c>)
    7e6e:	e79c      	b.n	7daa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    7e70:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    7e74:	e799      	b.n	7daa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    7e76:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    7e7a:	e796      	b.n	7daa <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    7e7c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    7e80:	e793      	b.n	7daa <baudrate_set+0x52>
	switch (baudrate) {
    7e82:	f06f 0015 	mvn.w	r0, #21
}
    7e86:	4770      	bx	lr
    7e88:	0013b000 	.word	0x0013b000
    7e8c:	004ea000 	.word	0x004ea000
    7e90:	000f4240 	.word	0x000f4240
    7e94:	0003d090 	.word	0x0003d090
    7e98:	00275000 	.word	0x00275000
    7e9c:	0075c000 	.word	0x0075c000
    7ea0:	003af000 	.word	0x003af000
    7ea4:	013a9000 	.word	0x013a9000

00007ea8 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    7ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7eac:	4605      	mov	r5, r0
    7eae:	460f      	mov	r7, r1
	return dev->data;
    7eb0:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    7eb4:	f00b fcf8 	bl	138a8 <k_is_in_isr>
    7eb8:	b920      	cbnz	r0, 7ec4 <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    7eba:	4b16      	ldr	r3, [pc, #88]	; (7f14 <uarte_nrfx_poll_out+0x6c>)
    7ebc:	781b      	ldrb	r3, [r3, #0]
    7ebe:	b1ab      	cbz	r3, 7eec <uarte_nrfx_poll_out+0x44>
    7ec0:	2300      	movs	r3, #0
    7ec2:	e000      	b.n	7ec6 <uarte_nrfx_poll_out+0x1e>
    7ec4:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    7ec6:	b19b      	cbz	r3, 7ef0 <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
    7ec8:	f04f 0320 	mov.w	r3, #32
    7ecc:	f3ef 8411 	mrs	r4, BASEPRI
    7ed0:	f383 8812 	msr	BASEPRI_MAX, r3
    7ed4:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
    7ed8:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    7eda:	4628      	mov	r0, r5
    7edc:	f009 fff9 	bl	11ed2 <is_tx_ready>
    7ee0:	b950      	cbnz	r0, 7ef8 <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
    7ee2:	f384 8811 	msr	BASEPRI, r4
    7ee6:	f3bf 8f6f 	isb	sy
}
    7eea:	e7ed      	b.n	7ec8 <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    7eec:	2301      	movs	r3, #1
    7eee:	e7ea      	b.n	7ec6 <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    7ef0:	4628      	mov	r0, r5
    7ef2:	f00a f90f 	bl	12114 <wait_tx_ready>
    7ef6:	4606      	mov	r6, r0
	}

	data->char_out = c;
    7ef8:	4641      	mov	r1, r8
    7efa:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    7efe:	2201      	movs	r2, #1
    7f00:	4628      	mov	r0, r5
    7f02:	f00a f800 	bl	11f06 <tx_start>
	__asm__ volatile(
    7f06:	f386 8811 	msr	BASEPRI, r6
    7f0a:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    7f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7f12:	bf00      	nop
    7f14:	20002b57 	.word	0x20002b57

00007f18 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    7f18:	b538      	push	{r3, r4, r5, lr}
    7f1a:	4604      	mov	r4, r0
    7f1c:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    7f1e:	f101 0016 	add.w	r0, r1, #22
    7f22:	f000 ff77 	bl	8e14 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    7f26:	4b14      	ldr	r3, [pc, #80]	; (7f78 <endtx_stoptx_ppi_init+0x60>)
    7f28:	4298      	cmp	r0, r3
    7f2a:	d111      	bne.n	7f50 <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    7f2c:	7dab      	ldrb	r3, [r5, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    7f2e:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    7f32:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    7f34:	4a11      	ldr	r2, [pc, #68]	; (7f7c <endtx_stoptx_ppi_init+0x64>)
    7f36:	33a2      	adds	r3, #162	; 0xa2
    7f38:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    7f3c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    7f40:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    7f42:	7da9      	ldrb	r1, [r5, #22]
    7f44:	2301      	movs	r3, #1
    7f46:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    7f48:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    7f4c:	2000      	movs	r0, #0
}
    7f4e:	bd38      	pop	{r3, r4, r5, pc}
    7f50:	4b0b      	ldr	r3, [pc, #44]	; (7f80 <endtx_stoptx_ppi_init+0x68>)
    7f52:	4a0c      	ldr	r2, [pc, #48]	; (7f84 <endtx_stoptx_ppi_init+0x6c>)
    7f54:	1a9b      	subs	r3, r3, r2
    7f56:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate PPI Channel");
    7f58:	f04f 0100 	mov.w	r1, #0
    7f5c:	2201      	movs	r2, #1
    7f5e:	f362 0102 	bfi	r1, r2, #0, #3
    7f62:	f36f 01c5 	bfc	r1, #3, #3
    7f66:	f363 118f 	bfi	r1, r3, #6, #10
    7f6a:	4807      	ldr	r0, [pc, #28]	; (7f88 <endtx_stoptx_ppi_init+0x70>)
    7f6c:	f7f9 fdfc 	bl	1b68 <log_0>
		return -EIO;
    7f70:	f06f 0004 	mvn.w	r0, #4
    7f74:	e7eb      	b.n	7f4e <endtx_stoptx_ppi_init+0x36>
    7f76:	bf00      	nop
    7f78:	0bad0000 	.word	0x0bad0000
    7f7c:	4001f000 	.word	0x4001f000
    7f80:	00014360 	.word	0x00014360
    7f84:	00014318 	.word	0x00014318
    7f88:	00015748 	.word	0x00015748

00007f8c <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    7f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->config;
    7f8e:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
    7f90:	6825      	ldr	r5, [r4, #0]
	return dev->data;
    7f92:	6906      	ldr	r6, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    7f94:	2300      	movs	r3, #0
    7f96:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    7f9a:	6030      	str	r0, [r6, #0]

	nrf_gpio_pin_write(cfg->pseltxd, 1);
    7f9c:	68a3      	ldr	r3, [r4, #8]
    *p_pin = pin_number & 0x1F;
    7f9e:	f003 011f 	and.w	r1, r3, #31
    return pin_number >> 5;
    7fa2:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7fa4:	2b01      	cmp	r3, #1
    7fa6:	f000 8097 	beq.w	80d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd8>
        case 0: return NRF_P0;
    7faa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    7fae:	2301      	movs	r3, #1
    7fb0:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    7fb2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_gpio_cfg_output(cfg->pseltxd);
    7fb6:	68a3      	ldr	r3, [r4, #8]
    *p_pin = pin_number & 0x1F;
    7fb8:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    7fbc:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7fbe:	2b01      	cmp	r3, #1
    7fc0:	f000 808c 	beq.w	80dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xdc>
        case 0: return NRF_P0;
    7fc4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    7fc8:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    7fcc:	2203      	movs	r2, #3
    7fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (cfg->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    7fd2:	68e3      	ldr	r3, [r4, #12]
    7fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
    7fd8:	d00c      	beq.n	7ff4 <uarte_instance_init+0x68>
		nrf_gpio_cfg_input(cfg->pselrxd, cfg->rxd_pull);
    7fda:	7e21      	ldrb	r1, [r4, #24]
    *p_pin = pin_number & 0x1F;
    7fdc:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    7fe0:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    7fe2:	2b01      	cmp	r3, #1
    7fe4:	d07c      	beq.n	80e0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe0>
        case 0: return NRF_P0;
    7fe6:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    7fea:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    7fec:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    7ff0:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
	}

	nrf_uarte_txrx_pins_set(uarte, cfg->pseltxd, cfg->pselrxd);
    7ff4:	68a2      	ldr	r2, [r4, #8]
    7ff6:	68e3      	ldr	r3, [r4, #12]
    p_reg->PSEL.TXD = pseltxd;
    7ff8:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    7ffc:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514

	if (cfg->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    8000:	6923      	ldr	r3, [r4, #16]
    8002:	f1b3 3fff 	cmp.w	r3, #4294967295
    8006:	d00c      	beq.n	8022 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x22>
		nrf_gpio_cfg_input(cfg->pselcts, cfg->cts_pull);
    8008:	7e61      	ldrb	r1, [r4, #25]
    *p_pin = pin_number & 0x1F;
    800a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    800e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8010:	2b01      	cmp	r3, #1
    8012:	d067      	beq.n	80e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe4>
        case 0: return NRF_P0;
    8014:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    8018:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    801a:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    801e:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
	}

	if (cfg->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    8022:	6963      	ldr	r3, [r4, #20]
    8024:	f1b3 3fff 	cmp.w	r3, #4294967295
    8028:	d017      	beq.n	805a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a>
    *p_pin = pin_number & 0x1F;
    802a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    802e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8030:	2b01      	cmp	r3, #1
    8032:	d059      	beq.n	80e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xe8>
        case 0: return NRF_P0;
    8034:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    8038:	2301      	movs	r3, #1
    803a:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    803c:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
		nrf_gpio_pin_write(cfg->pselrts, 1);
		nrf_gpio_cfg_output(cfg->pselrts);
    8040:	6963      	ldr	r3, [r4, #20]
    *p_pin = pin_number & 0x1F;
    8042:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    8046:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    8048:	2b01      	cmp	r3, #1
    804a:	d04f      	beq.n	80ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xec>
        case 0: return NRF_P0;
    804c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    8050:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    8054:	2203      	movs	r2, #3
    8056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	nrf_uarte_hwfc_pins_set(uarte, cfg->pselrts, cfg->pselcts);
    805a:	6962      	ldr	r2, [r4, #20]
    805c:	6923      	ldr	r3, [r4, #16]
    p_reg->PSEL.RTS = pselrts;
    805e:	f8c5 2508 	str.w	r2, [r5, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    8062:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
	return dev->data;
    8066:	6901      	ldr	r1, [r0, #16]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    8068:	3104      	adds	r1, #4
    806a:	f009 fec5 	bl	11df8 <uarte_nrfx_configure>
	if (err) {
    806e:	4607      	mov	r7, r0
    8070:	bb80      	cbnz	r0, 80d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd4>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    8072:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    8074:	f013 0f08 	tst.w	r3, #8
    8078:	d13a      	bne.n	80f0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xf0>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    807a:	2308      	movs	r3, #8
    807c:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (cfg->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    8080:	68e3      	ldr	r3, [r4, #12]
    8082:	f1b3 3fff 	cmp.w	r3, #4294967295
    8086:	d00c      	beq.n	80a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8088:	2300      	movs	r3, #0
    808a:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    808e:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    8092:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    8096:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    809a:	2301      	movs	r3, #1
    809c:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    80a0:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    80a2:	6863      	ldr	r3, [r4, #4]
    80a4:	f013 0f08 	tst.w	r3, #8
    80a8:	d103      	bne.n	80b2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb2>
    p_reg->INTENSET = mask;
    80aa:	f44f 7380 	mov.w	r3, #256	; 0x100
    80ae:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    80b2:	6863      	ldr	r3, [r4, #4]
    80b4:	f013 0f10 	tst.w	r3, #16
    80b8:	d003      	beq.n	80c2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc2>
    80ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    80be:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    80c2:	3614      	adds	r6, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    80c4:	f8c5 6544 	str.w	r6, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    80c8:	2300      	movs	r3, #0
    80ca:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    80ce:	2301      	movs	r3, #1
    80d0:	60ab      	str	r3, [r5, #8]
    80d2:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    80d4:	4638      	mov	r0, r7
    80d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
    80d8:	4a09      	ldr	r2, [pc, #36]	; (8100 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x100>)
    80da:	e768      	b.n	7fae <uarte_instance_init+0x22>
    80dc:	4908      	ldr	r1, [pc, #32]	; (8100 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x100>)
    80de:	e773      	b.n	7fc8 <uarte_instance_init+0x3c>
    80e0:	4f07      	ldr	r7, [pc, #28]	; (8100 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x100>)
    80e2:	e782      	b.n	7fea <uarte_instance_init+0x5e>
    80e4:	4f06      	ldr	r7, [pc, #24]	; (8100 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x100>)
    80e6:	e797      	b.n	8018 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18>
    80e8:	4905      	ldr	r1, [pc, #20]	; (8100 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x100>)
    80ea:	e7a5      	b.n	8038 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38>
    80ec:	4904      	ldr	r1, [pc, #16]	; (8100 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x100>)
    80ee:	e7af      	b.n	8050 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50>
		err = endtx_stoptx_ppi_init(uarte, data);
    80f0:	4631      	mov	r1, r6
    80f2:	4628      	mov	r0, r5
    80f4:	f7ff ff10 	bl	7f18 <endtx_stoptx_ppi_init>
		if (err < 0) {
    80f8:	2800      	cmp	r0, #0
    80fa:	dabe      	bge.n	807a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7a>
			return err;
    80fc:	4607      	mov	r7, r0
    80fe:	e7e9      	b.n	80d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd4>
    8100:	50000300 	.word	0x50000300

00008104 <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    8104:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    8108:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    810c:	4b01      	ldr	r3, [pc, #4]	; (8114 <set_comparator+0x10>)
    810e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    8112:	4770      	bx	lr
    8114:	40011000 	.word	0x40011000

00008118 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    8118:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    811c:	4b01      	ldr	r3, [pc, #4]	; (8124 <get_comparator+0xc>)
    811e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    8122:	4770      	bx	lr
    8124:	40011000 	.word	0x40011000

00008128 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    8128:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    812c:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    812e:	4a02      	ldr	r2, [pc, #8]	; (8138 <event_enable+0x10>)
    8130:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    8134:	4770      	bx	lr
    8136:	bf00      	nop
    8138:	40011000 	.word	0x40011000

0000813c <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    813c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    8140:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    8142:	4a02      	ldr	r2, [pc, #8]	; (814c <event_disable+0x10>)
    8144:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    8148:	4770      	bx	lr
    814a:	bf00      	nop
    814c:	40011000 	.word	0x40011000

00008150 <counter>:
     return p_reg->COUNTER;
    8150:	4b01      	ldr	r3, [pc, #4]	; (8158 <counter+0x8>)
    8152:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    8156:	4770      	bx	lr
    8158:	40011000 	.word	0x40011000

0000815c <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
    815c:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    815e:	2301      	movs	r3, #1
    8160:	4083      	lsls	r3, r0
    8162:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8164:	4a10      	ldr	r2, [pc, #64]	; (81a8 <compare_int_lock+0x4c>)
    8166:	f3bf 8f5b 	dmb	ish
    816a:	e852 1f00 	ldrex	r1, [r2]
    816e:	ea01 0c04 	and.w	ip, r1, r4
    8172:	e842 ce00 	strex	lr, ip, [r2]
    8176:	f1be 0f00 	cmp.w	lr, #0
    817a:	d1f6      	bne.n	816a <compare_int_lock+0xe>
    817c:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    8180:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    8184:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    8188:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    818c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    8190:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
    8194:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    8198:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    819c:	420b      	tst	r3, r1
}
    819e:	bf14      	ite	ne
    81a0:	2001      	movne	r0, #1
    81a2:	2000      	moveq	r0, #0
    81a4:	bd10      	pop	{r4, pc}
    81a6:	bf00      	nop
    81a8:	20002370 	.word	0x20002370

000081ac <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    81ac:	b570      	push	{r4, r5, r6, lr}
    81ae:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    81b0:	f009 fffb 	bl	121aa <full_int_lock>
    81b4:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    81b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    81ba:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    81bc:	4a17      	ldr	r2, [pc, #92]	; (821c <channel_processing_check_and_clear+0x70>)
    81be:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    81c2:	4213      	tst	r3, r2
    81c4:	d105      	bne.n	81d2 <channel_processing_check_and_clear+0x26>
	bool result = false;
    81c6:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    81c8:	4628      	mov	r0, r5
    81ca:	f009 fff7 	bl	121bc <full_int_unlock>

	return result;
}
    81ce:	4630      	mov	r0, r6
    81d0:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    81d2:	2301      	movs	r3, #1
    81d4:	40a3      	lsls	r3, r4
    81d6:	43db      	mvns	r3, r3
    81d8:	4a11      	ldr	r2, [pc, #68]	; (8220 <channel_processing_check_and_clear+0x74>)
    81da:	f3bf 8f5b 	dmb	ish
    81de:	e852 1f00 	ldrex	r1, [r2]
    81e2:	ea01 0003 	and.w	r0, r1, r3
    81e6:	e842 0600 	strex	r6, r0, [r2]
    81ea:	2e00      	cmp	r6, #0
    81ec:	d1f7      	bne.n	81de <channel_processing_check_and_clear+0x32>
    81ee:	f3bf 8f5b 	dmb	ish
    81f2:	b959      	cbnz	r1, 820c <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    81f4:	f104 0350 	add.w	r3, r4, #80	; 0x50
    81f8:	009b      	lsls	r3, r3, #2
    81fa:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    81fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8200:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    8204:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    8206:	b113      	cbz	r3, 820e <channel_processing_check_and_clear+0x62>
    8208:	2301      	movs	r3, #1
    820a:	e000      	b.n	820e <channel_processing_check_and_clear+0x62>
    820c:	2301      	movs	r3, #1
		if (result) {
    820e:	461e      	mov	r6, r3
    8210:	2b00      	cmp	r3, #0
    8212:	d0d9      	beq.n	81c8 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    8214:	4620      	mov	r0, r4
    8216:	f009 ffb9 	bl	1218c <event_clear>
    821a:	e7d5      	b.n	81c8 <channel_processing_check_and_clear+0x1c>
    821c:	40011000 	.word	0x40011000
    8220:	2000236c 	.word	0x2000236c

00008224 <compare_int_unlock>:
	if (key) {
    8224:	b901      	cbnz	r1, 8228 <compare_int_unlock+0x4>
}
    8226:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    8228:	2301      	movs	r3, #1
    822a:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    822c:	4a11      	ldr	r2, [pc, #68]	; (8274 <compare_int_unlock+0x50>)
    822e:	f3bf 8f5b 	dmb	ish
    8232:	e852 1f00 	ldrex	r1, [r2]
    8236:	4319      	orrs	r1, r3
    8238:	e842 1c00 	strex	ip, r1, [r2]
    823c:	f1bc 0f00 	cmp.w	ip, #0
    8240:	d1f7      	bne.n	8232 <compare_int_unlock+0xe>
    8242:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    8246:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    824a:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    824c:	4a0a      	ldr	r2, [pc, #40]	; (8278 <compare_int_unlock+0x54>)
    824e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8252:	f3bf 8f5b 	dmb	ish
    8256:	4b09      	ldr	r3, [pc, #36]	; (827c <compare_int_unlock+0x58>)
    8258:	681b      	ldr	r3, [r3, #0]
    825a:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    825e:	fa23 f000 	lsr.w	r0, r3, r0
    8262:	f010 0f01 	tst.w	r0, #1
    8266:	d0de      	beq.n	8226 <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8268:	4b05      	ldr	r3, [pc, #20]	; (8280 <compare_int_unlock+0x5c>)
    826a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    826e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    8272:	e7d8      	b.n	8226 <compare_int_unlock+0x2>
    8274:	20002370 	.word	0x20002370
    8278:	40011000 	.word	0x40011000
    827c:	2000236c 	.word	0x2000236c
    8280:	e000e100 	.word	0xe000e100

00008284 <sys_clock_timeout_handler>:
{
    8284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8286:	4607      	mov	r7, r0
    8288:	4614      	mov	r4, r2
    828a:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    828c:	4610      	mov	r0, r2
    828e:	4619      	mov	r1, r3
    8290:	f009 ff88 	bl	121a4 <absolute_time_to_cc>
    8294:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    8296:	4b15      	ldr	r3, [pc, #84]	; (82ec <sys_clock_timeout_handler+0x68>)
    8298:	681a      	ldr	r2, [r3, #0]
    829a:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    829c:	601c      	str	r4, [r3, #0]
    829e:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    82a0:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    82a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    82a8:	d308      	bcc.n	82bc <sys_clock_timeout_handler+0x38>
	return false;
    82aa:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    82ac:	f006 fd64 	bl	ed78 <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    82b0:	4638      	mov	r0, r7
    82b2:	f7ff ff31 	bl	8118 <get_comparator>
    82b6:	42a8      	cmp	r0, r5
    82b8:	d00c      	beq.n	82d4 <sys_clock_timeout_handler+0x50>
}
    82ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    82bc:	4b0c      	ldr	r3, [pc, #48]	; (82f0 <sys_clock_timeout_handler+0x6c>)
    82be:	6819      	ldr	r1, [r3, #0]
    82c0:	0a0b      	lsrs	r3, r1, #8
    82c2:	060a      	lsls	r2, r1, #24
    82c4:	1952      	adds	r2, r2, r5
    82c6:	f143 0300 	adc.w	r3, r3, #0
    82ca:	490a      	ldr	r1, [pc, #40]	; (82f4 <sys_clock_timeout_handler+0x70>)
    82cc:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    82d0:	2401      	movs	r4, #1
    82d2:	e7eb      	b.n	82ac <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
    82d4:	b11c      	cbz	r4, 82de <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
    82d6:	4638      	mov	r0, r7
    82d8:	f7ff ff26 	bl	8128 <event_enable>
}
    82dc:	e7ed      	b.n	82ba <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
    82de:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    82e2:	4638      	mov	r0, r7
    82e4:	f7ff ff0e 	bl	8104 <set_comparator>
    82e8:	e7f5      	b.n	82d6 <sys_clock_timeout_handler+0x52>
    82ea:	bf00      	nop
    82ec:	20000780 	.word	0x20000780
    82f0:	20002374 	.word	0x20002374
    82f4:	20000768 	.word	0x20000768

000082f8 <z_nrf_rtc_timer_read>:
{
    82f8:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    82fa:	4b0d      	ldr	r3, [pc, #52]	; (8330 <z_nrf_rtc_timer_read+0x38>)
    82fc:	681b      	ldr	r3, [r3, #0]
    82fe:	0a1d      	lsrs	r5, r3, #8
    8300:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    8302:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    8306:	f7ff ff23 	bl	8150 <counter>
    830a:	4603      	mov	r3, r0
	val += cntr;
    830c:	1820      	adds	r0, r4, r0
    830e:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    8312:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    8316:	d20a      	bcs.n	832e <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    8318:	4b06      	ldr	r3, [pc, #24]	; (8334 <z_nrf_rtc_timer_read+0x3c>)
    831a:	e9d3 2300 	ldrd	r2, r3, [r3]
    831e:	4299      	cmp	r1, r3
    8320:	bf08      	it	eq
    8322:	4290      	cmpeq	r0, r2
    8324:	d203      	bcs.n	832e <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    8326:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    832a:	f141 0100 	adc.w	r1, r1, #0
}
    832e:	bd38      	pop	{r3, r4, r5, pc}
    8330:	20002374 	.word	0x20002374
    8334:	20000768 	.word	0x20000768

00008338 <compare_set_nolocks>:
{
    8338:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    833c:	4606      	mov	r6, r0
    833e:	4614      	mov	r4, r2
    8340:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    8342:	4610      	mov	r0, r2
    8344:	4619      	mov	r1, r3
    8346:	f009 ff2d 	bl	121a4 <absolute_time_to_cc>
    834a:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    834c:	f7ff ffd4 	bl	82f8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    8350:	42a9      	cmp	r1, r5
    8352:	bf08      	it	eq
    8354:	42a0      	cmpeq	r0, r4
    8356:	d21e      	bcs.n	8396 <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
    8358:	ebb4 0800 	subs.w	r8, r4, r0
    835c:	eb65 0901 	sbc.w	r9, r5, r1
    8360:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    8364:	2300      	movs	r3, #0
    8366:	454b      	cmp	r3, r9
    8368:	bf08      	it	eq
    836a:	4542      	cmpeq	r2, r8
    836c:	d32e      	bcc.n	83cc <compare_set_nolocks+0x94>
		if (target_time != cc_data[chan].target_time) {
    836e:	4b19      	ldr	r3, [pc, #100]	; (83d4 <compare_set_nolocks+0x9c>)
    8370:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    8374:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    8378:	42ab      	cmp	r3, r5
    837a:	bf08      	it	eq
    837c:	42a2      	cmpeq	r2, r4
    837e:	d018      	beq.n	83b2 <compare_set_nolocks+0x7a>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    8380:	4639      	mov	r1, r7
    8382:	4630      	mov	r0, r6
    8384:	f009 ff1f 	bl	121c6 <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    8388:	4639      	mov	r1, r7
    838a:	f009 fefb 	bl	12184 <counter_sub>
    838e:	1824      	adds	r4, r4, r0
    8390:	f145 0500 	adc.w	r5, r5, #0
    8394:	e00d      	b.n	83b2 <compare_set_nolocks+0x7a>
		atomic_or(&force_isr_mask, BIT(chan));
    8396:	2301      	movs	r3, #1
    8398:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    839a:	4a0f      	ldr	r2, [pc, #60]	; (83d8 <compare_set_nolocks+0xa0>)
    839c:	f3bf 8f5b 	dmb	ish
    83a0:	e852 1f00 	ldrex	r1, [r2]
    83a4:	4319      	orrs	r1, r3
    83a6:	e842 1000 	strex	r0, r1, [r2]
    83aa:	2800      	cmp	r0, #0
    83ac:	d1f8      	bne.n	83a0 <compare_set_nolocks+0x68>
    83ae:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    83b2:	4b08      	ldr	r3, [pc, #32]	; (83d4 <compare_set_nolocks+0x9c>)
    83b4:	0132      	lsls	r2, r6, #4
    83b6:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    83ba:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    83be:	9908      	ldr	r1, [sp, #32]
    83c0:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    83c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    83c4:	6073      	str	r3, [r6, #4]
	return ret;
    83c6:	2000      	movs	r0, #0
}
    83c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    83cc:	f06f 0015 	mvn.w	r0, #21
    83d0:	e7fa      	b.n	83c8 <compare_set_nolocks+0x90>
    83d2:	bf00      	nop
    83d4:	20000770 	.word	0x20000770
    83d8:	2000236c 	.word	0x2000236c

000083dc <process_channel>:

static void process_channel(int32_t chan)
{
    83dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    83e0:	b082      	sub	sp, #8
    83e2:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    83e4:	f7ff fee2 	bl	81ac <channel_processing_check_and_clear>
    83e8:	b910      	cbnz	r0, 83f0 <process_channel+0x14>

		if (handler) {
			handler(chan, expire_time, user_context);
		}
	}
}
    83ea:	b002      	add	sp, #8
    83ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    83f0:	f7ff ff82 	bl	82f8 <z_nrf_rtc_timer_read>
    83f4:	4606      	mov	r6, r0
    83f6:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
    83f8:	f009 fed7 	bl	121aa <full_int_lock>
    83fc:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
    83fe:	4b13      	ldr	r3, [pc, #76]	; (844c <process_channel+0x70>)
    8400:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    8404:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    8408:	454f      	cmp	r7, r9
    840a:	bf08      	it	eq
    840c:	4546      	cmpeq	r6, r8
    840e:	d20b      	bcs.n	8428 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    8410:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    8412:	4650      	mov	r0, sl
    8414:	f009 fed2 	bl	121bc <full_int_unlock>
		if (handler) {
    8418:	2e00      	cmp	r6, #0
    841a:	d0e6      	beq.n	83ea <process_channel+0xe>
			handler(chan, expire_time, user_context);
    841c:	9500      	str	r5, [sp, #0]
    841e:	4642      	mov	r2, r8
    8420:	464b      	mov	r3, r9
    8422:	4620      	mov	r0, r4
    8424:	47b0      	blx	r6
}
    8426:	e7e0      	b.n	83ea <process_channel+0xe>
			handler = cc_data[chan].callback;
    8428:	4a08      	ldr	r2, [pc, #32]	; (844c <process_channel+0x70>)
    842a:	0123      	lsls	r3, r4, #4
    842c:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    8430:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    8432:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
    8434:	2000      	movs	r0, #0
    8436:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    8438:	f04f 32ff 	mov.w	r2, #4294967295
    843c:	f04f 33ff 	mov.w	r3, #4294967295
    8440:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    8444:	4620      	mov	r0, r4
    8446:	f7ff fe79 	bl	813c <event_disable>
    844a:	e7e2      	b.n	8412 <process_channel+0x36>
    844c:	20000770 	.word	0x20000770

00008450 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    8450:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    8452:	4b0d      	ldr	r3, [pc, #52]	; (8488 <rtc_nrf_isr+0x38>)
    8454:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    8458:	f013 0f02 	tst.w	r3, #2
    845c:	d00a      	beq.n	8474 <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    845e:	4b0b      	ldr	r3, [pc, #44]	; (848c <rtc_nrf_isr+0x3c>)
    8460:	681b      	ldr	r3, [r3, #0]
    8462:	b13b      	cbz	r3, 8474 <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    8464:	4b09      	ldr	r3, [pc, #36]	; (848c <rtc_nrf_isr+0x3c>)
    8466:	2200      	movs	r2, #0
    8468:	601a      	str	r2, [r3, #0]
    846a:	681b      	ldr	r3, [r3, #0]
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
    846c:	4a08      	ldr	r2, [pc, #32]	; (8490 <rtc_nrf_isr+0x40>)
    846e:	6813      	ldr	r3, [r2, #0]
    8470:	3301      	adds	r3, #1
    8472:	6013      	str	r3, [r2, #0]
{
    8474:	2400      	movs	r4, #0
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    8476:	2c00      	cmp	r4, #0
    8478:	dd00      	ble.n	847c <rtc_nrf_isr+0x2c>
		process_channel(chan);
	}
}
    847a:	bd10      	pop	{r4, pc}
		process_channel(chan);
    847c:	4620      	mov	r0, r4
    847e:	f7ff ffad 	bl	83dc <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    8482:	3401      	adds	r4, #1
    8484:	e7f7      	b.n	8476 <rtc_nrf_isr+0x26>
    8486:	bf00      	nop
    8488:	40011000 	.word	0x40011000
    848c:	40011104 	.word	0x40011104
    8490:	20002374 	.word	0x20002374

00008494 <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    8494:	b530      	push	{r4, r5, lr}
    8496:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    8498:	2300      	movs	r3, #0
    849a:	4a1f      	ldr	r2, [pc, #124]	; (8518 <sys_clock_driver_init+0x84>)
    849c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    84a0:	2b00      	cmp	r3, #0
    84a2:	dd27      	ble.n	84f4 <sys_clock_driver_init+0x60>
    p_reg->INTENSET = mask;
    84a4:	4c1c      	ldr	r4, [pc, #112]	; (8518 <sys_clock_driver_init+0x84>)
    84a6:	2502      	movs	r5, #2
    84a8:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    84ac:	4b1b      	ldr	r3, [pc, #108]	; (851c <sys_clock_driver_init+0x88>)
    84ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    84b2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    84b6:	2200      	movs	r2, #0
    84b8:	2101      	movs	r1, #1
    84ba:	2011      	movs	r0, #17
    84bc:	f7fb fd92 	bl	3fe4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    84c0:	2011      	movs	r0, #17
    84c2:	f7fb fd5d 	bl	3f80 <arch_irq_enable>
    84c6:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    84ca:	2301      	movs	r3, #1
    84cc:	4a14      	ldr	r2, [pc, #80]	; (8520 <sys_clock_driver_init+0x8c>)
    84ce:	6013      	str	r3, [r2, #0]
    84d0:	6023      	str	r3, [r4, #0]

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    84d2:	4a14      	ldr	r2, [pc, #80]	; (8524 <sys_clock_driver_init+0x90>)
    84d4:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
				(COUNTER_HALF_SPAN - 1) :
				(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    84d6:	2400      	movs	r4, #0
    84d8:	9401      	str	r4, [sp, #4]
    84da:	4b13      	ldr	r3, [pc, #76]	; (8528 <sys_clock_driver_init+0x94>)
    84dc:	9300      	str	r3, [sp, #0]
    84de:	4a13      	ldr	r2, [pc, #76]	; (852c <sys_clock_driver_init+0x98>)
    84e0:	2300      	movs	r3, #0
    84e2:	4620      	mov	r0, r4
    84e4:	f009 feaa 	bl	1223c <compare_set>

	z_nrf_clock_control_lf_on(mode);
    84e8:	4628      	mov	r0, r5
    84ea:	f7fe ff7b 	bl	73e4 <z_nrf_clock_control_lf_on>

	return 0;
}
    84ee:	4620      	mov	r0, r4
    84f0:	b003      	add	sp, #12
    84f2:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    84f4:	4a0e      	ldr	r2, [pc, #56]	; (8530 <sys_clock_driver_init+0x9c>)
    84f6:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    84fa:	f04f 30ff 	mov.w	r0, #4294967295
    84fe:	f04f 31ff 	mov.w	r1, #4294967295
    8502:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    8506:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    850a:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    850c:	4902      	ldr	r1, [pc, #8]	; (8518 <sys_clock_driver_init+0x84>)
    850e:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    8512:	3301      	adds	r3, #1
    8514:	e7c4      	b.n	84a0 <sys_clock_driver_init+0xc>
    8516:	bf00      	nop
    8518:	40011000 	.word	0x40011000
    851c:	e000e100 	.word	0xe000e100
    8520:	40011008 	.word	0x40011008
    8524:	20002370 	.word	0x20002370
    8528:	00008285 	.word	0x00008285
    852c:	007fffff 	.word	0x007fffff
    8530:	20000770 	.word	0x20000770

00008534 <sys_clock_set_timeout>:

void sys_clock_set_timeout(int32_t ticks, bool idle)
{
    8534:	b510      	push	{r4, lr}
    8536:	b082      	sub	sp, #8

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    8538:	f1b0 3fff 	cmp.w	r0, #4294967295
    853c:	d007      	beq.n	854e <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    853e:	1e44      	subs	r4, r0, #1
    8540:	2c00      	cmp	r4, #0
    8542:	dd07      	ble.n	8554 <sys_clock_set_timeout+0x20>
    8544:	4b11      	ldr	r3, [pc, #68]	; (858c <sys_clock_set_timeout+0x58>)
    8546:	429c      	cmp	r4, r3
    8548:	dd05      	ble.n	8556 <sys_clock_set_timeout+0x22>
    854a:	4c11      	ldr	r4, [pc, #68]	; (8590 <sys_clock_set_timeout+0x5c>)
    854c:	e003      	b.n	8556 <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    854e:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
    8552:	e7f4      	b.n	853e <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    8554:	2400      	movs	r4, #0

	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    8556:	f7ff fecf 	bl	82f8 <z_nrf_rtc_timer_read>
    855a:	4b0e      	ldr	r3, [pc, #56]	; (8594 <sys_clock_set_timeout+0x60>)
    855c:	e9d3 2300 	ldrd	r2, r3, [r3]
    8560:	1a80      	subs	r0, r0, r2
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    8562:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    8566:	d300      	bcc.n	856a <sys_clock_set_timeout+0x36>
		ticks = 0;
    8568:	2400      	movs	r4, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    856a:	4404      	add	r4, r0
    856c:	3401      	adds	r4, #1
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;

	/* Due to elapsed time the calculation above might produce a
	 * duration that laps the counter.  Don't let it.
	 */
	if (cyc > MAX_CYCLES) {
    856e:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    8572:	d300      	bcc.n	8576 <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    8574:	4c06      	ldr	r4, [pc, #24]	; (8590 <sys_clock_set_timeout+0x5c>)
	}

	uint64_t target_time = cyc + last_count;

	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    8576:	2000      	movs	r0, #0
    8578:	9001      	str	r0, [sp, #4]
    857a:	4907      	ldr	r1, [pc, #28]	; (8598 <sys_clock_set_timeout+0x64>)
    857c:	9100      	str	r1, [sp, #0]
    857e:	1912      	adds	r2, r2, r4
    8580:	f143 0300 	adc.w	r3, r3, #0
    8584:	f009 fe5a 	bl	1223c <compare_set>
}
    8588:	b002      	add	sp, #8
    858a:	bd10      	pop	{r4, pc}
    858c:	007ffffe 	.word	0x007ffffe
    8590:	007fffff 	.word	0x007fffff
    8594:	20000780 	.word	0x20000780
    8598:	00008285 	.word	0x00008285

0000859c <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
    859c:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    859e:	f7ff feab 	bl	82f8 <z_nrf_rtc_timer_read>
    85a2:	4b02      	ldr	r3, [pc, #8]	; (85ac <sys_clock_elapsed+0x10>)
    85a4:	681b      	ldr	r3, [r3, #0]
}
    85a6:	1ac0      	subs	r0, r0, r3
    85a8:	bd08      	pop	{r3, pc}
    85aa:	bf00      	nop
    85ac:	20000780 	.word	0x20000780

000085b0 <nrf52_errata_36>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    85b0:	4b03      	ldr	r3, [pc, #12]	; (85c0 <nrf52_errata_36+0x10>)
    85b2:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    85b4:	2b08      	cmp	r3, #8
    85b6:	d001      	beq.n	85bc <nrf52_errata_36+0xc>
        return false;
    85b8:	2000      	movs	r0, #0
    85ba:	4770      	bx	lr
                        return true;
    85bc:	2001      	movs	r0, #1
}
    85be:	4770      	bx	lr
    85c0:	10000130 	.word	0x10000130

000085c4 <nrf52_errata_66>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    85c4:	4b03      	ldr	r3, [pc, #12]	; (85d4 <nrf52_errata_66+0x10>)
    85c6:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    85c8:	2b08      	cmp	r3, #8
    85ca:	d001      	beq.n	85d0 <nrf52_errata_66+0xc>
        return false;
    85cc:	2000      	movs	r0, #0
    85ce:	4770      	bx	lr
                        return true;
    85d0:	2001      	movs	r0, #1
}
    85d2:	4770      	bx	lr
    85d4:	10000130 	.word	0x10000130

000085d8 <nrf52_errata_98>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    85d8:	4b08      	ldr	r3, [pc, #32]	; (85fc <nrf52_errata_98+0x24>)
    85da:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    85dc:	3304      	adds	r3, #4
    85de:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    85e0:	2a08      	cmp	r2, #8
    85e2:	d001      	beq.n	85e8 <nrf52_errata_98+0x10>
        return false;
    85e4:	2000      	movs	r0, #0
    85e6:	4770      	bx	lr
                switch(var2)
    85e8:	2b00      	cmp	r3, #0
    85ea:	d804      	bhi.n	85f6 <nrf52_errata_98+0x1e>
    85ec:	e8df f003 	tbb	[pc, r3]
    85f0:	01          	.byte	0x01
    85f1:	00          	.byte	0x00
            if (var1 == 0x08)
    85f2:	2001      	movs	r0, #1
    85f4:	4770      	bx	lr
                        return false;
    85f6:	2000      	movs	r0, #0
}
    85f8:	4770      	bx	lr
    85fa:	bf00      	nop
    85fc:	10000130 	.word	0x10000130

00008600 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8600:	4b08      	ldr	r3, [pc, #32]	; (8624 <nrf52_errata_103+0x24>)
    8602:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    8604:	3304      	adds	r3, #4
    8606:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    8608:	2a08      	cmp	r2, #8
    860a:	d001      	beq.n	8610 <nrf52_errata_103+0x10>
        return false;
    860c:	2000      	movs	r0, #0
    860e:	4770      	bx	lr
                switch(var2)
    8610:	2b00      	cmp	r3, #0
    8612:	d804      	bhi.n	861e <nrf52_errata_103+0x1e>
    8614:	e8df f003 	tbb	[pc, r3]
    8618:	01          	.byte	0x01
    8619:	00          	.byte	0x00
            if (var1 == 0x08)
    861a:	2001      	movs	r0, #1
    861c:	4770      	bx	lr
                        return false;
    861e:	2000      	movs	r0, #0
}
    8620:	4770      	bx	lr
    8622:	bf00      	nop
    8624:	10000130 	.word	0x10000130

00008628 <nrf52_errata_115>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8628:	4b08      	ldr	r3, [pc, #32]	; (864c <nrf52_errata_115+0x24>)
    862a:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    862c:	3304      	adds	r3, #4
    862e:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    8630:	2a08      	cmp	r2, #8
    8632:	d001      	beq.n	8638 <nrf52_errata_115+0x10>
        return false;
    8634:	2000      	movs	r0, #0
    8636:	4770      	bx	lr
                switch(var2)
    8638:	2b00      	cmp	r3, #0
    863a:	d804      	bhi.n	8646 <nrf52_errata_115+0x1e>
    863c:	e8df f003 	tbb	[pc, r3]
    8640:	01          	.byte	0x01
    8641:	00          	.byte	0x00
            if (var1 == 0x08)
    8642:	2001      	movs	r0, #1
    8644:	4770      	bx	lr
                        return false;
    8646:	2000      	movs	r0, #0
}
    8648:	4770      	bx	lr
    864a:	bf00      	nop
    864c:	10000130 	.word	0x10000130

00008650 <nrf52_errata_120>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8650:	4b08      	ldr	r3, [pc, #32]	; (8674 <nrf52_errata_120+0x24>)
    8652:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    8654:	3304      	adds	r3, #4
    8656:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    8658:	2a08      	cmp	r2, #8
    865a:	d001      	beq.n	8660 <nrf52_errata_120+0x10>
        return false;
    865c:	2000      	movs	r0, #0
    865e:	4770      	bx	lr
                switch(var2)
    8660:	2b00      	cmp	r3, #0
    8662:	d804      	bhi.n	866e <nrf52_errata_120+0x1e>
    8664:	e8df f003 	tbb	[pc, r3]
    8668:	01          	.byte	0x01
    8669:	00          	.byte	0x00
            if (var1 == 0x08)
    866a:	2001      	movs	r0, #1
    866c:	4770      	bx	lr
                        return false;
    866e:	2000      	movs	r0, #0
}
    8670:	4770      	bx	lr
    8672:	bf00      	nop
    8674:	10000130 	.word	0x10000130

00008678 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8678:	4b03      	ldr	r3, [pc, #12]	; (8688 <nrf52_errata_136+0x10>)
    867a:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    867c:	2b08      	cmp	r3, #8
    867e:	d001      	beq.n	8684 <nrf52_errata_136+0xc>
        return false;
    8680:	2000      	movs	r0, #0
    8682:	4770      	bx	lr
                        return true;
    8684:	2001      	movs	r0, #1
}
    8686:	4770      	bx	lr
    8688:	10000130 	.word	0x10000130

0000868c <nrf52_errata_249>:
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    868c:	4b06      	ldr	r3, [pc, #24]	; (86a8 <nrf52_errata_249+0x1c>)
    868e:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    8690:	4a06      	ldr	r2, [pc, #24]	; (86ac <nrf52_errata_249+0x20>)
    8692:	6812      	ldr	r2, [r2, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    8694:	2b08      	cmp	r3, #8
    8696:	d001      	beq.n	869c <nrf52_errata_249+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    8698:	2000      	movs	r0, #0
    869a:	4770      	bx	lr
                switch(var2)
    869c:	2a03      	cmp	r2, #3
    869e:	d801      	bhi.n	86a4 <nrf52_errata_249+0x18>
    86a0:	2000      	movs	r0, #0
    86a2:	4770      	bx	lr
                        return true;
    86a4:	2001      	movs	r0, #1
    #endif
}
    86a6:	4770      	bx	lr
    86a8:	10000130 	.word	0x10000130
    86ac:	10000134 	.word	0x10000134

000086b0 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    86b0:	4b02      	ldr	r3, [pc, #8]	; (86bc <nvmc_wait+0xc>)
    86b2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    86b6:	2b00      	cmp	r3, #0
    86b8:	d0fa      	beq.n	86b0 <nvmc_wait>
}
    86ba:	4770      	bx	lr
    86bc:	4001e000 	.word	0x4001e000

000086c0 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    86c0:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    86c2:	4b03      	ldr	r3, [pc, #12]	; (86d0 <nvmc_config+0x10>)
    86c4:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    86c8:	f7ff fff2 	bl	86b0 <nvmc_wait>
}
    86cc:	bd08      	pop	{r3, pc}
    86ce:	bf00      	nop
    86d0:	4001e000 	.word	0x4001e000

000086d4 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    86d4:	4b01      	ldr	r3, [pc, #4]	; (86dc <SystemCoreClockUpdate+0x8>)
    86d6:	4a02      	ldr	r2, [pc, #8]	; (86e0 <SystemCoreClockUpdate+0xc>)
    86d8:	601a      	str	r2, [r3, #0]
}
    86da:	4770      	bx	lr
    86dc:	2000025c 	.word	0x2000025c
    86e0:	03d09000 	.word	0x03d09000

000086e4 <SystemInit>:

void SystemInit(void)
{
    86e4:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    86e6:	f7ff ff63 	bl	85b0 <nrf52_errata_36>
    86ea:	b140      	cbz	r0, 86fe <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    86ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    86f0:	2200      	movs	r2, #0
    86f2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    86f6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    86fa:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    86fe:	f7ff ff61 	bl	85c4 <nrf52_errata_66>
    8702:	2800      	cmp	r0, #0
    8704:	d046      	beq.n	8794 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    8706:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    870a:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    870e:	4b56      	ldr	r3, [pc, #344]	; (8868 <SystemInit+0x184>)
    8710:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    8714:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    8718:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    871c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    8720:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    8724:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    8728:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    872c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    8730:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    8734:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    8738:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    873c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    8740:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    8744:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    8748:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    874c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    8750:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    8754:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    8758:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    875c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    8760:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    8764:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    8768:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    876c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    8770:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    8774:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    8778:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    877c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    8780:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    8784:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    8788:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    878c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    8790:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    8794:	f7ff ff20 	bl	85d8 <nrf52_errata_98>
    8798:	b110      	cbz	r0, 87a0 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    879a:	4b34      	ldr	r3, [pc, #208]	; (886c <SystemInit+0x188>)
    879c:	4a34      	ldr	r2, [pc, #208]	; (8870 <SystemInit+0x18c>)
    879e:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    87a0:	f7ff ff2e 	bl	8600 <nrf52_errata_103>
    87a4:	b118      	cbz	r0, 87ae <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    87a6:	4b33      	ldr	r3, [pc, #204]	; (8874 <SystemInit+0x190>)
    87a8:	22fb      	movs	r2, #251	; 0xfb
    87aa:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    87ae:	f7ff ff3b 	bl	8628 <nrf52_errata_115>
    87b2:	b148      	cbz	r0, 87c8 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    87b4:	4930      	ldr	r1, [pc, #192]	; (8878 <SystemInit+0x194>)
    87b6:	680b      	ldr	r3, [r1, #0]
    87b8:	f023 030f 	bic.w	r3, r3, #15
    87bc:	4a2f      	ldr	r2, [pc, #188]	; (887c <SystemInit+0x198>)
    87be:	6812      	ldr	r2, [r2, #0]
    87c0:	f002 020f 	and.w	r2, r2, #15
    87c4:	4313      	orrs	r3, r2
    87c6:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    87c8:	f7ff ff42 	bl	8650 <nrf52_errata_120>
    87cc:	b118      	cbz	r0, 87d6 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    87ce:	4b2c      	ldr	r3, [pc, #176]	; (8880 <SystemInit+0x19c>)
    87d0:	f44f 7200 	mov.w	r2, #512	; 0x200
    87d4:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    87d6:	f7ff ff4f 	bl	8678 <nrf52_errata_136>
    87da:	b160      	cbz	r0, 87f6 <SystemInit+0x112>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    87dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    87e0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    87e4:	f013 0f01 	tst.w	r3, #1
    87e8:	d005      	beq.n	87f6 <SystemInit+0x112>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    87ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    87ee:	f06f 0201 	mvn.w	r2, #1
    87f2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
    87f6:	f7ff ff49 	bl	868c <nrf52_errata_249>
    87fa:	b138      	cbz	r0, 880c <SystemInit+0x128>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    87fc:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8800:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    8804:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8808:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    880c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8810:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    8814:	2b00      	cmp	r3, #0
    8816:	db08      	blt.n	882a <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    8818:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    881c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    8820:	2b00      	cmp	r3, #0
    8822:	db02      	blt.n	882a <SystemInit+0x146>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    8824:	f7ff ff56 	bl	86d4 <SystemCoreClockUpdate>
}
    8828:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    882a:	2001      	movs	r0, #1
    882c:	f7ff ff48 	bl	86c0 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    8830:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    8834:	2512      	movs	r5, #18
    8836:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    883a:	f7ff ff39 	bl	86b0 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    883e:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    8842:	f7ff ff35 	bl	86b0 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    8846:	2000      	movs	r0, #0
    8848:	f7ff ff3a 	bl	86c0 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    884c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    8850:	490c      	ldr	r1, [pc, #48]	; (8884 <SystemInit+0x1a0>)
    8852:	68ca      	ldr	r2, [r1, #12]
    8854:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    8858:	4b0b      	ldr	r3, [pc, #44]	; (8888 <SystemInit+0x1a4>)
    885a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    885c:	60cb      	str	r3, [r1, #12]
    885e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    8862:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    8864:	e7fd      	b.n	8862 <SystemInit+0x17e>
    8866:	bf00      	nop
    8868:	4000c000 	.word	0x4000c000
    886c:	4000568c 	.word	0x4000568c
    8870:	00038148 	.word	0x00038148
    8874:	4000f000 	.word	0x4000f000
    8878:	40000ee4 	.word	0x40000ee4
    887c:	10000258 	.word	0x10000258
    8880:	40029640 	.word	0x40029640
    8884:	e000ed00 	.word	0xe000ed00
    8888:	05fa0004 	.word	0x05fa0004

0000888c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    888c:	4b06      	ldr	r3, [pc, #24]	; (88a8 <nrfx_clock_init+0x1c>)
    888e:	791b      	ldrb	r3, [r3, #4]
    8890:	b93b      	cbnz	r3, 88a2 <nrfx_clock_init+0x16>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    8892:	4b05      	ldr	r3, [pc, #20]	; (88a8 <nrfx_clock_init+0x1c>)
    8894:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    8896:	2201      	movs	r2, #1
    8898:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    889a:	2200      	movs	r2, #0
    889c:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    889e:	4803      	ldr	r0, [pc, #12]	; (88ac <nrfx_clock_init+0x20>)
    88a0:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    88a2:	4803      	ldr	r0, [pc, #12]	; (88b0 <nrfx_clock_init+0x24>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    88a4:	4770      	bx	lr
    88a6:	bf00      	nop
    88a8:	20002378 	.word	0x20002378
    88ac:	0bad0000 	.word	0x0bad0000
    88b0:	0bad000c 	.word	0x0bad000c

000088b4 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    88b4:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    88b6:	2000      	movs	r0, #0
    88b8:	f7fb fb86 	bl	3fc8 <arch_irq_is_enabled>
    88bc:	b118      	cbz	r0, 88c6 <nrfx_clock_enable+0x12>
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
    88be:	4b03      	ldr	r3, [pc, #12]	; (88cc <nrfx_clock_enable+0x18>)
    88c0:	2201      	movs	r2, #1
    88c2:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    88c4:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    88c6:	f7fb fb5b 	bl	3f80 <arch_irq_enable>
    88ca:	e7f8      	b.n	88be <nrfx_clock_enable+0xa>
    88cc:	20002b51 	.word	0x20002b51

000088d0 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    88d0:	b110      	cbz	r0, 88d8 <nrfx_clock_start+0x8>
    88d2:	2801      	cmp	r0, #1
    88d4:	d025      	beq.n	8922 <nrfx_clock_start+0x52>
    88d6:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    88d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    88dc:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    88e0:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    88e4:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    88e8:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    88ec:	d111      	bne.n	8912 <nrfx_clock_start+0x42>
    p_reg->LFCLKSRC = (uint32_t)(source);
    88ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    88f2:	2200      	movs	r2, #0
    88f4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    88f8:	4b0f      	ldr	r3, [pc, #60]	; (8938 <nrfx_clock_start+0x68>)
    88fa:	2200      	movs	r2, #0
    88fc:	601a      	str	r2, [r3, #0]
    88fe:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    8900:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8904:	2202      	movs	r2, #2
    8906:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    890a:	3308      	adds	r3, #8
    890c:	2201      	movs	r2, #1
    890e:	601a      	str	r2, [r3, #0]
}
    8910:	4770      	bx	lr
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    8912:	2b01      	cmp	r3, #1
    8914:	d1eb      	bne.n	88ee <nrfx_clock_start+0x1e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    8916:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    891a:	2201      	movs	r2, #1
    891c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    8920:	e7ea      	b.n	88f8 <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8922:	4b06      	ldr	r3, [pc, #24]	; (893c <nrfx_clock_start+0x6c>)
    8924:	2200      	movs	r2, #0
    8926:	601a      	str	r2, [r3, #0]
    8928:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    892a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    892e:	2201      	movs	r2, #1
    8930:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8934:	601a      	str	r2, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    8936:	4770      	bx	lr
    8938:	40000104 	.word	0x40000104
    893c:	40000100 	.word	0x40000100

00008940 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    8940:	b530      	push	{r4, r5, lr}
    8942:	b083      	sub	sp, #12
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    8944:	4604      	mov	r4, r0
    8946:	b118      	cbz	r0, 8950 <nrfx_clock_stop+0x10>
    8948:	2801      	cmp	r0, #1
    894a:	d013      	beq.n	8974 <nrfx_clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    894c:	b003      	add	sp, #12
    894e:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
    8950:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8954:	2202      	movs	r2, #2
    8956:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    895a:	f503 7382 	add.w	r3, r3, #260	; 0x104
    895e:	2200      	movs	r2, #0
    8960:	601a      	str	r2, [r3, #0]
    8962:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8964:	4b39      	ldr	r3, [pc, #228]	; (8a4c <nrfx_clock_stop+0x10c>)
    8966:	2201      	movs	r2, #1
    8968:	601a      	str	r2, [r3, #0]
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    896a:	2c01      	cmp	r4, #1
    896c:	d00f      	beq.n	898e <nrfx_clock_stop+0x4e>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    896e:	f242 7510 	movw	r5, #10000	; 0x2710
    8972:	e052      	b.n	8a1a <nrfx_clock_stop+0xda>
    p_reg->INTENCLR = mask;
    8974:	2301      	movs	r3, #1
    8976:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    897a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    897e:	f502 7280 	add.w	r2, r2, #256	; 0x100
    8982:	2100      	movs	r1, #0
    8984:	6011      	str	r1, [r2, #0]
    8986:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8988:	4a31      	ldr	r2, [pc, #196]	; (8a50 <nrfx_clock_stop+0x110>)
    898a:	6013      	str	r3, [r2, #0]
}
    898c:	e7ed      	b.n	896a <nrfx_clock_stop+0x2a>
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    898e:	2301      	movs	r3, #1
    8990:	f88d 3007 	strb.w	r3, [sp, #7]
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    8994:	f242 7510 	movw	r5, #10000	; 0x2710
    8998:	e018      	b.n	89cc <nrfx_clock_stop+0x8c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    899a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    899e:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    89a2:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    89a6:	f8cd 3007 	str.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    89aa:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    89ae:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    89b2:	d120      	bne.n	89f6 <nrfx_clock_stop+0xb6>
    return false;
    89b4:	2300      	movs	r3, #0
    89b6:	2b00      	cmp	r3, #0
    89b8:	d042      	beq.n	8a40 <nrfx_clock_stop+0x100>
    89ba:	f89d 3007 	ldrb.w	r3, [sp, #7]
    89be:	2b01      	cmp	r3, #1
    89c0:	d13e      	bne.n	8a40 <nrfx_clock_stop+0x100>
    89c2:	2001      	movs	r0, #1
    89c4:	f009 fc68 	bl	12298 <nrfx_busy_wait>
    89c8:	3d01      	subs	r5, #1
    89ca:	d039      	beq.n	8a40 <nrfx_clock_stop+0x100>
    switch (domain)
    89cc:	2c00      	cmp	r4, #0
    89ce:	d0e4      	beq.n	899a <nrfx_clock_stop+0x5a>
    89d0:	2c01      	cmp	r4, #1
    89d2:	d001      	beq.n	89d8 <nrfx_clock_stop+0x98>
    89d4:	2300      	movs	r3, #0
    89d6:	e7ee      	b.n	89b6 <nrfx_clock_stop+0x76>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    89d8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    89dc:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    89e0:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    89e4:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    89e8:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    89ec:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    89f0:	d103      	bne.n	89fa <nrfx_clock_stop+0xba>
    return false;
    89f2:	2300      	movs	r3, #0
    89f4:	e7df      	b.n	89b6 <nrfx_clock_stop+0x76>
                return true;
    89f6:	2301      	movs	r3, #1
    89f8:	e7dd      	b.n	89b6 <nrfx_clock_stop+0x76>
                return true;
    89fa:	2301      	movs	r3, #1
    89fc:	e7db      	b.n	89b6 <nrfx_clock_stop+0x76>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    89fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8a02:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    8a06:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    8a0a:	d115      	bne.n	8a38 <nrfx_clock_stop+0xf8>
    return false;
    8a0c:	2300      	movs	r3, #0
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    8a0e:	b1bb      	cbz	r3, 8a40 <nrfx_clock_stop+0x100>
    8a10:	2001      	movs	r0, #1
    8a12:	f009 fc41 	bl	12298 <nrfx_busy_wait>
    8a16:	3d01      	subs	r5, #1
    8a18:	d012      	beq.n	8a40 <nrfx_clock_stop+0x100>
    switch (domain)
    8a1a:	2c00      	cmp	r4, #0
    8a1c:	d0ef      	beq.n	89fe <nrfx_clock_stop+0xbe>
    8a1e:	2c01      	cmp	r4, #1
    8a20:	d001      	beq.n	8a26 <nrfx_clock_stop+0xe6>
    8a22:	2300      	movs	r3, #0
    8a24:	e7f3      	b.n	8a0e <nrfx_clock_stop+0xce>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    8a26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8a2a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    8a2e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    8a32:	d103      	bne.n	8a3c <nrfx_clock_stop+0xfc>
    return false;
    8a34:	2300      	movs	r3, #0
    8a36:	e7ea      	b.n	8a0e <nrfx_clock_stop+0xce>
                return true;
    8a38:	2301      	movs	r3, #1
    8a3a:	e7e8      	b.n	8a0e <nrfx_clock_stop+0xce>
                return true;
    8a3c:	2301      	movs	r3, #1
    8a3e:	e7e6      	b.n	8a0e <nrfx_clock_stop+0xce>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    8a40:	2c01      	cmp	r4, #1
    8a42:	d183      	bne.n	894c <nrfx_clock_stop+0xc>
            m_clock_cb.hfclk_started = false;
    8a44:	4b03      	ldr	r3, [pc, #12]	; (8a54 <nrfx_clock_stop+0x114>)
    8a46:	2200      	movs	r2, #0
    8a48:	715a      	strb	r2, [r3, #5]
    8a4a:	e77f      	b.n	894c <nrfx_clock_stop+0xc>
    8a4c:	4000000c 	.word	0x4000000c
    8a50:	40000004 	.word	0x40000004
    8a54:	20002378 	.word	0x20002378

00008a58 <nrfx_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    8a58:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    8a5a:	4b1b      	ldr	r3, [pc, #108]	; (8ac8 <nrfx_clock_irq_handler+0x70>)
    8a5c:	681b      	ldr	r3, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    8a5e:	b183      	cbz	r3, 8a82 <nrfx_clock_irq_handler+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8a60:	4b19      	ldr	r3, [pc, #100]	; (8ac8 <nrfx_clock_irq_handler+0x70>)
    8a62:	2200      	movs	r2, #0
    8a64:	601a      	str	r2, [r3, #0]
    8a66:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    8a68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8a6c:	2201      	movs	r2, #1
    8a6e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    8a72:	4b16      	ldr	r3, [pc, #88]	; (8acc <nrfx_clock_irq_handler+0x74>)
    8a74:	795b      	ldrb	r3, [r3, #5]
    8a76:	b923      	cbnz	r3, 8a82 <nrfx_clock_irq_handler+0x2a>
        {
            m_clock_cb.hfclk_started = true;
    8a78:	4b14      	ldr	r3, [pc, #80]	; (8acc <nrfx_clock_irq_handler+0x74>)
    8a7a:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    8a7c:	681b      	ldr	r3, [r3, #0]
    8a7e:	2000      	movs	r0, #0
    8a80:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    8a82:	4b13      	ldr	r3, [pc, #76]	; (8ad0 <nrfx_clock_irq_handler+0x78>)
    8a84:	681b      	ldr	r3, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    8a86:	b19b      	cbz	r3, 8ab0 <nrfx_clock_irq_handler+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8a88:	4b11      	ldr	r3, [pc, #68]	; (8ad0 <nrfx_clock_irq_handler+0x78>)
    8a8a:	2200      	movs	r2, #0
    8a8c:	601a      	str	r2, [r3, #0]
    8a8e:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    8a90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8a94:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8a98:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    8a9c:	f012 0f03 	tst.w	r2, #3
    8aa0:	d107      	bne.n	8ab2 <nrfx_clock_irq_handler+0x5a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    8aa2:	2301      	movs	r3, #1
    8aa4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    8aa8:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8aac:	3208      	adds	r2, #8
    8aae:	6013      	str	r3, [r2, #0]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    8ab0:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    8ab2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8ab6:	2202      	movs	r2, #2
    8ab8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    8abc:	4b03      	ldr	r3, [pc, #12]	; (8acc <nrfx_clock_irq_handler+0x74>)
    8abe:	681b      	ldr	r3, [r3, #0]
    8ac0:	2001      	movs	r0, #1
    8ac2:	4798      	blx	r3
}
    8ac4:	e7f4      	b.n	8ab0 <nrfx_clock_irq_handler+0x58>
    8ac6:	bf00      	nop
    8ac8:	40000100 	.word	0x40000100
    8acc:	20002378 	.word	0x20002378
    8ad0:	40000104 	.word	0x40000104

00008ad4 <is_allocated_channel>:
    NRFX_LOG_INFO("Uninitialized.");
}

static bool is_allocated_channel(uint8_t index)
{
    return m_cb.allocated_channels_mask & (1UL << index);
    8ad4:	4b04      	ldr	r3, [pc, #16]	; (8ae8 <is_allocated_channel+0x14>)
    8ad6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    8ad8:	2301      	movs	r3, #1
    8ada:	4083      	lsls	r3, r0
    8adc:	421a      	tst	r2, r3
}
    8ade:	bf14      	ite	ne
    8ae0:	2001      	movne	r0, #1
    8ae2:	2000      	moveq	r0, #0
    8ae4:	4770      	bx	lr
    8ae6:	bf00      	nop
    8ae8:	20002380 	.word	0x20002380

00008aec <channel_allocated_set>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
}

static void channel_allocated_set(uint8_t index)
{
    m_cb.allocated_channels_mask |= (1UL << index);
    8aec:	2301      	movs	r3, #1
    8aee:	fa03 f000 	lsl.w	r0, r3, r0
    8af2:	4a02      	ldr	r2, [pc, #8]	; (8afc <channel_allocated_set+0x10>)
    8af4:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    8af6:	4303      	orrs	r3, r0
    8af8:	65d3      	str	r3, [r2, #92]	; 0x5c
}
    8afa:	4770      	bx	lr
    8afc:	20002380 	.word	0x20002380

00008b00 <channel_allocated_clr>:

static void channel_allocated_clr(uint8_t index)
{
    m_cb.allocated_channels_mask &= ~(1UL << index);
    8b00:	2301      	movs	r3, #1
    8b02:	fa03 f000 	lsl.w	r0, r3, r0
    8b06:	4a03      	ldr	r2, [pc, #12]	; (8b14 <channel_allocated_clr+0x14>)
    8b08:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    8b0a:	ea23 0300 	bic.w	r3, r3, r0
    8b0e:	65d3      	str	r3, [r2, #92]	; 0x5c
}
    8b10:	4770      	bx	lr
    8b12:	bf00      	nop
    8b14:	20002380 	.word	0x20002380

00008b18 <nrfx_gpiote_channel_free>:

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    8b18:	b538      	push	{r3, r4, r5, lr}
    8b1a:	4604      	mov	r4, r0
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    8b1c:	f009 fbc0 	bl	122a0 <is_app_channel>
    8b20:	b908      	cbnz	r0, 8b26 <nrfx_gpiote_channel_free+0xe>
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    8b22:	4809      	ldr	r0, [pc, #36]	; (8b48 <nrfx_gpiote_channel_free+0x30>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    8b24:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    8b26:	f04f 0320 	mov.w	r3, #32
    8b2a:	f3ef 8511 	mrs	r5, BASEPRI
    8b2e:	f383 8812 	msr	BASEPRI_MAX, r3
    8b32:	f3bf 8f6f 	isb	sy
        channel_allocated_clr(channel);
    8b36:	4620      	mov	r0, r4
    8b38:	f7ff ffe2 	bl	8b00 <channel_allocated_clr>
	__asm__ volatile(
    8b3c:	f385 8811 	msr	BASEPRI, r5
    8b40:	f3bf 8f6f 	isb	sy
    nrfx_err_t err_code = NRFX_SUCCESS;
    8b44:	4801      	ldr	r0, [pc, #4]	; (8b4c <nrfx_gpiote_channel_free+0x34>)
}
    8b46:	e7ed      	b.n	8b24 <nrfx_gpiote_channel_free+0xc>
    8b48:	0bad0004 	.word	0x0bad0004
    8b4c:	0bad0000 	.word	0x0bad0000

00008b50 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    8b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8b54:	4680      	mov	r8, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;

    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    8b56:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    8b58:	25ff      	movs	r5, #255	; 0xff
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    8b5a:	4f17      	ldr	r7, [pc, #92]	; (8bb8 <nrfx_gpiote_channel_alloc+0x68>)
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    8b5c:	e013      	b.n	8b86 <nrfx_gpiote_channel_alloc+0x36>
    {
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
    8b5e:	4620      	mov	r0, r4
    8b60:	f7ff ffc4 	bl	8aec <channel_allocated_set>
            *p_channel = ch_idx;
    8b64:	f888 4000 	strb.w	r4, [r8]
            err_code = NRFX_SUCCESS;
    8b68:	4f14      	ldr	r7, [pc, #80]	; (8bbc <nrfx_gpiote_channel_alloc+0x6c>)
	__asm__ volatile(
    8b6a:	f386 8811 	msr	BASEPRI, r6
    8b6e:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    8b72:	4b12      	ldr	r3, [pc, #72]	; (8bbc <nrfx_gpiote_channel_alloc+0x6c>)
    8b74:	429f      	cmp	r7, r3
    8b76:	d01b      	beq.n	8bb0 <nrfx_gpiote_channel_alloc+0x60>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    8b78:	2301      	movs	r3, #1
    8b7a:	fa03 f309 	lsl.w	r3, r3, r9
    8b7e:	ea25 0503 	bic.w	r5, r5, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    8b82:	3401      	adds	r4, #1
    8b84:	b2e4      	uxtb	r4, r4
    8b86:	b19d      	cbz	r5, 8bb0 <nrfx_gpiote_channel_alloc+0x60>
	__asm__ volatile(
    8b88:	f04f 0320 	mov.w	r3, #32
    8b8c:	f3ef 8611 	mrs	r6, BASEPRI
    8b90:	f383 8812 	msr	BASEPRI_MAX, r3
    8b94:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    8b98:	46a1      	mov	r9, r4
    8b9a:	fa25 f304 	lsr.w	r3, r5, r4
    8b9e:	f013 0f01 	tst.w	r3, #1
    8ba2:	d0e2      	beq.n	8b6a <nrfx_gpiote_channel_alloc+0x1a>
    8ba4:	4620      	mov	r0, r4
    8ba6:	f7ff ff95 	bl	8ad4 <is_allocated_channel>
    8baa:	2800      	cmp	r0, #0
    8bac:	d1dd      	bne.n	8b6a <nrfx_gpiote_channel_alloc+0x1a>
    8bae:	e7d6      	b.n	8b5e <nrfx_gpiote_channel_alloc+0xe>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    8bb0:	4638      	mov	r0, r7
    8bb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8bb6:	bf00      	nop
    8bb8:	0bad0002 	.word	0x0bad0002
    8bbc:	0bad0000 	.word	0x0bad0000

00008bc0 <nvmc_readonly_mode_set>:
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
    8bc0:	4b02      	ldr	r3, [pc, #8]	; (8bcc <nvmc_readonly_mode_set+0xc>)
    8bc2:	2200      	movs	r2, #0
    8bc4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_READONLY);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_READONLY);
#endif
}
    8bc8:	4770      	bx	lr
    8bca:	bf00      	nop
    8bcc:	4001e000 	.word	0x4001e000

00008bd0 <nvmc_write_mode_set>:
    8bd0:	4b02      	ldr	r3, [pc, #8]	; (8bdc <nvmc_write_mode_set+0xc>)
    8bd2:	2201      	movs	r2, #1
    8bd4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_WRITE);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_WRITE);
#endif
}
    8bd8:	4770      	bx	lr
    8bda:	bf00      	nop
    8bdc:	4001e000 	.word	0x4001e000

00008be0 <nvmc_erase_mode_set>:
    8be0:	4b02      	ldr	r3, [pc, #8]	; (8bec <nvmc_erase_mode_set+0xc>)
    8be2:	2202      	movs	r2, #2
    8be4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    nrf_nvmc_nonsecure_mode_set(NRF_NVMC, NRF_NVMC_NS_MODE_ERASE);
#endif
#if !defined(NRF_TRUSTZONE_NONSECURE)
    nrf_nvmc_mode_set(NRF_NVMC, NRF_NVMC_MODE_ERASE);
#endif
}
    8be8:	4770      	bx	lr
    8bea:	bf00      	nop
    8bec:	4001e000 	.word	0x4001e000

00008bf0 <nvmc_word_write>:
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    8bf0:	4b04      	ldr	r3, [pc, #16]	; (8c04 <nvmc_word_write+0x14>)
    8bf2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    8bf6:	f013 0f01 	tst.w	r3, #1
    8bfa:	d0f9      	beq.n	8bf0 <nvmc_word_write>
    {}
#endif

    *(volatile uint32_t *)addr = value;
    8bfc:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
    8bfe:	f3bf 8f5f 	dmb	sy
    __DMB();
}
    8c02:	4770      	bx	lr
    8c04:	4001e000 	.word	0x4001e000

00008c08 <nrfx_nvmc_page_erase>:
        nvmc_word_write(addr + (NVMC_BYTES_IN_WORD * i), ((uint32_t const *)src)[i]);
    }
}

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    8c08:	b510      	push	{r4, lr}
    8c0a:	4604      	mov	r4, r0
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
    8c0c:	f009 fb61 	bl	122d2 <is_page_aligned_check>
    8c10:	b908      	cbnz	r0, 8c16 <nrfx_nvmc_page_erase+0xe>
    {
        return NRFX_ERROR_INVALID_ADDR;
    8c12:	4808      	ldr	r0, [pc, #32]	; (8c34 <nrfx_nvmc_page_erase+0x2c>)
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
}
    8c14:	bd10      	pop	{r4, pc}
    nvmc_erase_mode_set();
    8c16:	f7ff ffe3 	bl	8be0 <nvmc_erase_mode_set>
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
    8c1a:	4b07      	ldr	r3, [pc, #28]	; (8c38 <nrfx_nvmc_page_erase+0x30>)
    8c1c:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
    8c20:	4b05      	ldr	r3, [pc, #20]	; (8c38 <nrfx_nvmc_page_erase+0x30>)
    8c22:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    while (!nrf_nvmc_ready_check(NRF_NVMC))
    8c26:	f013 0f01 	tst.w	r3, #1
    8c2a:	d0f9      	beq.n	8c20 <nrfx_nvmc_page_erase+0x18>
    nvmc_readonly_mode_set();
    8c2c:	f7ff ffc8 	bl	8bc0 <nvmc_readonly_mode_set>
    return NRFX_SUCCESS;
    8c30:	4802      	ldr	r0, [pc, #8]	; (8c3c <nrfx_nvmc_page_erase+0x34>)
    8c32:	e7ef      	b.n	8c14 <nrfx_nvmc_page_erase+0xc>
    8c34:	0bad000a 	.word	0x0bad000a
    8c38:	4001e000 	.word	0x4001e000
    8c3c:	0bad0000 	.word	0x0bad0000

00008c40 <nrf52_errata_197>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8c40:	4b06      	ldr	r3, [pc, #24]	; (8c5c <nrf52_errata_197+0x1c>)
    8c42:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    8c44:	4a06      	ldr	r2, [pc, #24]	; (8c60 <nrf52_errata_197+0x20>)
    8c46:	6812      	ldr	r2, [r2, #0]
            if (var1 == 0x08)
    8c48:	2b08      	cmp	r3, #8
    8c4a:	d001      	beq.n	8c50 <nrf52_errata_197+0x10>
        return false;
    8c4c:	2000      	movs	r0, #0
    8c4e:	4770      	bx	lr
                switch(var2)
    8c50:	2a02      	cmp	r2, #2
    8c52:	d001      	beq.n	8c58 <nrf52_errata_197+0x18>
                        return false;
    8c54:	2000      	movs	r0, #0
    8c56:	4770      	bx	lr
                        return true;
    8c58:	2001      	movs	r0, #1
}
    8c5a:	4770      	bx	lr
    8c5c:	10000130 	.word	0x10000130
    8c60:	10000134 	.word	0x10000134

00008c64 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
    8c64:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
    8c66:	4b18      	ldr	r3, [pc, #96]	; (8cc8 <nrfx_power_init+0x64>)
    8c68:	781b      	ldrb	r3, [r3, #0]
    8c6a:	bb5b      	cbnz	r3, 8cc4 <nrfx_power_init+0x60>
    8c6c:	4604      	mov	r4, r0
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
    8c6e:	7803      	ldrb	r3, [r0, #0]
    8c70:	f3c3 0540 	ubfx	r5, r3, #1, #1
    if (enable && nrf52_errata_197())
    8c74:	f013 0f02 	tst.w	r3, #2
    8c78:	d005      	beq.n	8c86 <nrfx_power_init+0x22>
    8c7a:	f7ff ffe1 	bl	8c40 <nrf52_errata_197>
    8c7e:	b110      	cbz	r0, 8c86 <nrfx_power_init+0x22>
        *(volatile uint32_t *)0x40000638ul = 1ul;
    8c80:	4b12      	ldr	r3, [pc, #72]	; (8ccc <nrfx_power_init+0x68>)
    8c82:	2201      	movs	r2, #1
    8c84:	601a      	str	r2, [r3, #0]
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    8c86:	b1b5      	cbz	r5, 8cb6 <nrfx_power_init+0x52>
    8c88:	2201      	movs	r2, #1
    8c8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8c8e:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#elif NRF_REGULATORS_HAS_DCDCEN_VDDH
    nrf_regulators_dcdcen_vddh_set(NRF_REGULATORS, p_config->dcdcenhv);
#endif

#if NRF_POWER_HAS_DCDCEN
    nrf_power_dcdcen_set(NRF_POWER, p_config->dcdcen);
    8c92:	7823      	ldrb	r3, [r4, #0]
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    8c94:	f013 0f01 	tst.w	r3, #1
    8c98:	d00f      	beq.n	8cba <nrfx_power_init+0x56>
    8c9a:	2201      	movs	r2, #1
    8c9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8ca0:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    8ca4:	2000      	movs	r0, #0
    8ca6:	f7fb f98f 	bl	3fc8 <arch_irq_is_enabled>
    8caa:	b140      	cbz	r0, 8cbe <nrfx_power_init+0x5a>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
    8cac:	4b06      	ldr	r3, [pc, #24]	; (8cc8 <nrfx_power_init+0x64>)
    8cae:	2201      	movs	r2, #1
    8cb0:	701a      	strb	r2, [r3, #0]
    return NRFX_SUCCESS;
    8cb2:	4807      	ldr	r0, [pc, #28]	; (8cd0 <nrfx_power_init+0x6c>)
}
    8cb4:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    8cb6:	2200      	movs	r2, #0
    8cb8:	e7e7      	b.n	8c8a <nrfx_power_init+0x26>
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    8cba:	2200      	movs	r2, #0
    8cbc:	e7ee      	b.n	8c9c <nrfx_power_init+0x38>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    8cbe:	f7fb f95f 	bl	3f80 <arch_irq_enable>
    8cc2:	e7f3      	b.n	8cac <nrfx_power_init+0x48>
        return NRFX_ERROR_ALREADY_INITIALIZED;
    8cc4:	4803      	ldr	r0, [pc, #12]	; (8cd4 <nrfx_power_init+0x70>)
    8cc6:	e7f5      	b.n	8cb4 <nrfx_power_init+0x50>
    8cc8:	20002b52 	.word	0x20002b52
    8ccc:	40000638 	.word	0x40000638
    8cd0:	0bad0000 	.word	0x0bad0000
    8cd4:	0bad000c 	.word	0x0bad000c

00008cd8 <nrfx_power_usbevt_uninit>:
                                     NRF_POWER_INT_USBREMOVED_MASK  |
                                     NRF_POWER_INT_USBPWRRDY_MASK);
}

void nrfx_power_usbevt_uninit(void)
{
    8cd8:	b508      	push	{r3, lr}
    nrfx_power_usbevt_disable();
    8cda:	f009 fb25 	bl	12328 <nrfx_power_usbevt_disable>
    m_usbevt_handler = NULL;
    8cde:	4b02      	ldr	r3, [pc, #8]	; (8ce8 <nrfx_power_usbevt_uninit+0x10>)
    8ce0:	2200      	movs	r2, #0
    8ce2:	601a      	str	r2, [r3, #0]
}
    8ce4:	bd08      	pop	{r3, pc}
    8ce6:	bf00      	nop
    8ce8:	200023e8 	.word	0x200023e8

00008cec <nrfx_power_usbevt_init>:
{
    8cec:	b510      	push	{r4, lr}
    8cee:	4604      	mov	r4, r0
    nrfx_power_usbevt_uninit();
    8cf0:	f7ff fff2 	bl	8cd8 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
    8cf4:	6823      	ldr	r3, [r4, #0]
    8cf6:	b10b      	cbz	r3, 8cfc <nrfx_power_usbevt_init+0x10>
        m_usbevt_handler = p_config->handler;
    8cf8:	4a01      	ldr	r2, [pc, #4]	; (8d00 <nrfx_power_usbevt_init+0x14>)
    8cfa:	6013      	str	r3, [r2, #0]
}
    8cfc:	bd10      	pop	{r4, pc}
    8cfe:	bf00      	nop
    8d00:	200023e8 	.word	0x200023e8

00008d04 <nrfx_power_irq_handler>:

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    8d04:	b510      	push	{r4, lr}
    return p_reg->INTENSET;
    8d06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8d0a:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    8d0e:	f014 0f04 	tst.w	r4, #4
    8d12:	d00b      	beq.n	8d2c <nrfx_power_irq_handler+0x28>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8d14:	f503 7384 	add.w	r3, r3, #264	; 0x108
    8d18:	681b      	ldr	r3, [r3, #0]
    if (ret)
    8d1a:	b11b      	cbz	r3, 8d24 <nrfx_power_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8d1c:	4a29      	ldr	r2, [pc, #164]	; (8dc4 <nrfx_power_irq_handler+0xc0>)
    8d1e:	2100      	movs	r1, #0
    8d20:	6011      	str	r1, [r2, #0]
    8d22:	6812      	ldr	r2, [r2, #0]
    8d24:	b113      	cbz	r3, 8d2c <nrfx_power_irq_handler+0x28>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    8d26:	4b28      	ldr	r3, [pc, #160]	; (8dc8 <nrfx_power_irq_handler+0xc4>)
    8d28:	681b      	ldr	r3, [r3, #0]
    8d2a:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    8d2c:	f014 0f20 	tst.w	r4, #32
    8d30:	d00b      	beq.n	8d4a <nrfx_power_irq_handler+0x46>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8d32:	4b26      	ldr	r3, [pc, #152]	; (8dcc <nrfx_power_irq_handler+0xc8>)
    8d34:	681b      	ldr	r3, [r3, #0]
    if (ret)
    8d36:	b11b      	cbz	r3, 8d40 <nrfx_power_irq_handler+0x3c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8d38:	4a24      	ldr	r2, [pc, #144]	; (8dcc <nrfx_power_irq_handler+0xc8>)
    8d3a:	2100      	movs	r1, #0
    8d3c:	6011      	str	r1, [r2, #0]
    8d3e:	6812      	ldr	r2, [r2, #0]
    8d40:	b11b      	cbz	r3, 8d4a <nrfx_power_irq_handler+0x46>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    8d42:	4b23      	ldr	r3, [pc, #140]	; (8dd0 <nrfx_power_irq_handler+0xcc>)
    8d44:	681b      	ldr	r3, [r3, #0]
    8d46:	2000      	movs	r0, #0
    8d48:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    8d4a:	f014 0f40 	tst.w	r4, #64	; 0x40
    8d4e:	d00b      	beq.n	8d68 <nrfx_power_irq_handler+0x64>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8d50:	4b20      	ldr	r3, [pc, #128]	; (8dd4 <nrfx_power_irq_handler+0xd0>)
    8d52:	681b      	ldr	r3, [r3, #0]
    if (ret)
    8d54:	b11b      	cbz	r3, 8d5e <nrfx_power_irq_handler+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8d56:	4a1f      	ldr	r2, [pc, #124]	; (8dd4 <nrfx_power_irq_handler+0xd0>)
    8d58:	2100      	movs	r1, #0
    8d5a:	6011      	str	r1, [r2, #0]
    8d5c:	6812      	ldr	r2, [r2, #0]
    8d5e:	b11b      	cbz	r3, 8d68 <nrfx_power_irq_handler+0x64>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    8d60:	4b1b      	ldr	r3, [pc, #108]	; (8dd0 <nrfx_power_irq_handler+0xcc>)
    8d62:	681b      	ldr	r3, [r3, #0]
    8d64:	2001      	movs	r0, #1
    8d66:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    8d68:	f014 0f80 	tst.w	r4, #128	; 0x80
    8d6c:	d00b      	beq.n	8d86 <nrfx_power_irq_handler+0x82>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8d6e:	4b1a      	ldr	r3, [pc, #104]	; (8dd8 <nrfx_power_irq_handler+0xd4>)
    8d70:	681b      	ldr	r3, [r3, #0]
    if (ret)
    8d72:	b11b      	cbz	r3, 8d7c <nrfx_power_irq_handler+0x78>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8d74:	4a18      	ldr	r2, [pc, #96]	; (8dd8 <nrfx_power_irq_handler+0xd4>)
    8d76:	2100      	movs	r1, #0
    8d78:	6011      	str	r1, [r2, #0]
    8d7a:	6812      	ldr	r2, [r2, #0]
    8d7c:	b11b      	cbz	r3, 8d86 <nrfx_power_irq_handler+0x82>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
    8d7e:	4b17      	ldr	r3, [pc, #92]	; (8ddc <nrfx_power_irq_handler+0xd8>)
    8d80:	681b      	ldr	r3, [r3, #0]
    8d82:	2000      	movs	r0, #0
    8d84:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    8d86:	f414 7f80 	tst.w	r4, #256	; 0x100
    8d8a:	d00b      	beq.n	8da4 <nrfx_power_irq_handler+0xa0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8d8c:	4b14      	ldr	r3, [pc, #80]	; (8de0 <nrfx_power_irq_handler+0xdc>)
    8d8e:	681b      	ldr	r3, [r3, #0]
    if (ret)
    8d90:	b11b      	cbz	r3, 8d9a <nrfx_power_irq_handler+0x96>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8d92:	4a13      	ldr	r2, [pc, #76]	; (8de0 <nrfx_power_irq_handler+0xdc>)
    8d94:	2100      	movs	r1, #0
    8d96:	6011      	str	r1, [r2, #0]
    8d98:	6812      	ldr	r2, [r2, #0]
    8d9a:	b11b      	cbz	r3, 8da4 <nrfx_power_irq_handler+0xa0>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
    8d9c:	4b0f      	ldr	r3, [pc, #60]	; (8ddc <nrfx_power_irq_handler+0xd8>)
    8d9e:	681b      	ldr	r3, [r3, #0]
    8da0:	2001      	movs	r0, #1
    8da2:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    8da4:	f414 7f00 	tst.w	r4, #512	; 0x200
    8da8:	d00b      	beq.n	8dc2 <nrfx_power_irq_handler+0xbe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8daa:	4b0e      	ldr	r3, [pc, #56]	; (8de4 <nrfx_power_irq_handler+0xe0>)
    8dac:	681b      	ldr	r3, [r3, #0]
    if (ret)
    8dae:	b11b      	cbz	r3, 8db8 <nrfx_power_irq_handler+0xb4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8db0:	4a0c      	ldr	r2, [pc, #48]	; (8de4 <nrfx_power_irq_handler+0xe0>)
    8db2:	2100      	movs	r1, #0
    8db4:	6011      	str	r1, [r2, #0]
    8db6:	6812      	ldr	r2, [r2, #0]
    8db8:	b11b      	cbz	r3, 8dc2 <nrfx_power_irq_handler+0xbe>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    8dba:	4b08      	ldr	r3, [pc, #32]	; (8ddc <nrfx_power_irq_handler+0xd8>)
    8dbc:	681b      	ldr	r3, [r3, #0]
    8dbe:	2002      	movs	r0, #2
    8dc0:	4798      	blx	r3
    }
#endif
}
    8dc2:	bd10      	pop	{r4, pc}
    8dc4:	40000108 	.word	0x40000108
    8dc8:	200023e0 	.word	0x200023e0
    8dcc:	40000114 	.word	0x40000114
    8dd0:	200023e4 	.word	0x200023e4
    8dd4:	40000118 	.word	0x40000118
    8dd8:	4000011c 	.word	0x4000011c
    8ddc:	200023e8 	.word	0x200023e8
    8de0:	40000120 	.word	0x40000120
    8de4:	40000124 	.word	0x40000124

00008de8 <is_allocated_channel>:
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
    8de8:	2301      	movs	r3, #1
    8dea:	4083      	lsls	r3, r0
 * @retval true  The channel is allocated.
 * @retval false The channel is not allocated.
 */
static bool is_allocated_channel(nrf_ppi_channel_t channel)
{
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    8dec:	4a03      	ldr	r2, [pc, #12]	; (8dfc <is_allocated_channel+0x14>)
    8dee:	6812      	ldr	r2, [r2, #0]
    8df0:	4213      	tst	r3, r2
}
    8df2:	bf14      	ite	ne
    8df4:	2001      	movne	r0, #1
    8df6:	2000      	moveq	r0, #0
    8df8:	4770      	bx	lr
    8dfa:	bf00      	nop
    8dfc:	200023ec 	.word	0x200023ec

00008e00 <channel_allocated_set>:
    8e00:	2301      	movs	r3, #1
    8e02:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @param[in] channel_num Specifies the channel to set the "allocated" indication.
 */
static void channel_allocated_set(nrf_ppi_channel_t channel)
{
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
    8e06:	4a02      	ldr	r2, [pc, #8]	; (8e10 <channel_allocated_set+0x10>)
    8e08:	6813      	ldr	r3, [r2, #0]
    8e0a:	4303      	orrs	r3, r0
    8e0c:	6013      	str	r3, [r2, #0]
}
    8e0e:	4770      	bx	lr
    8e10:	200023ec 	.word	0x200023ec

00008e14 <nrfx_ppi_channel_alloc>:
    group_allocated_clr_all();
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    8e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8e18:	4681      	mov	r9, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;

    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    8e1a:	2400      	movs	r4, #0
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
    8e1c:	4e15      	ldr	r6, [pc, #84]	; (8e74 <nrfx_ppi_channel_alloc+0x60>)
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    8e1e:	f8df 805c 	ldr.w	r8, [pc, #92]	; 8e7c <nrfx_ppi_channel_alloc+0x68>
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    8e22:	e011      	b.n	8e48 <nrfx_ppi_channel_alloc+0x34>
    {
        nrf_ppi_channel_t channel = (nrf_ppi_channel_t)ch_idx;
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
    8e24:	4620      	mov	r0, r4
    8e26:	f7ff ffeb 	bl	8e00 <channel_allocated_set>
            *p_channel = channel;
    8e2a:	f889 4000 	strb.w	r4, [r9]
            err_code   = NRFX_SUCCESS;
    8e2e:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8e78 <nrfx_ppi_channel_alloc+0x64>
	__asm__ volatile(
    8e32:	f387 8811 	msr	BASEPRI, r7
    8e36:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();
        if (err_code == NRFX_SUCCESS)
    8e3a:	4b0f      	ldr	r3, [pc, #60]	; (8e78 <nrfx_ppi_channel_alloc+0x64>)
    8e3c:	4598      	cmp	r8, r3
    8e3e:	d016      	beq.n	8e6e <nrfx_ppi_channel_alloc+0x5a>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", channel);
            break;
        }
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    8e40:	ea26 0605 	bic.w	r6, r6, r5
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    8e44:	3401      	adds	r4, #1
    8e46:	b2e4      	uxtb	r4, r4
    8e48:	b18e      	cbz	r6, 8e6e <nrfx_ppi_channel_alloc+0x5a>
	__asm__ volatile(
    8e4a:	f04f 0320 	mov.w	r3, #32
    8e4e:	f3ef 8711 	mrs	r7, BASEPRI
    8e52:	f383 8812 	msr	BASEPRI_MAX, r3
    8e56:	f3bf 8f6f 	isb	sy
    8e5a:	2501      	movs	r5, #1
    8e5c:	40a5      	lsls	r5, r4
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    8e5e:	4235      	tst	r5, r6
    8e60:	d0e7      	beq.n	8e32 <nrfx_ppi_channel_alloc+0x1e>
    8e62:	4620      	mov	r0, r4
    8e64:	f7ff ffc0 	bl	8de8 <is_allocated_channel>
    8e68:	2800      	cmp	r0, #0
    8e6a:	d1e2      	bne.n	8e32 <nrfx_ppi_channel_alloc+0x1e>
    8e6c:	e7da      	b.n	8e24 <nrfx_ppi_channel_alloc+0x10>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    8e6e:	4640      	mov	r0, r8
    8e70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8e74:	000fffff 	.word	0x000fffff
    8e78:	0bad0000 	.word	0x0bad0000
    8e7c:	0bad0002 	.word	0x0bad0002

00008e80 <nrf52_errata_166>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8e80:	4b03      	ldr	r3, [pc, #12]	; (8e90 <nrf52_errata_166+0x10>)
    8e82:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    8e84:	2b08      	cmp	r3, #8
    8e86:	d001      	beq.n	8e8c <nrf52_errata_166+0xc>
        return false;
    8e88:	2000      	movs	r0, #0
    8e8a:	4770      	bx	lr
                        return true;
    8e8c:	2001      	movs	r0, #1
}
    8e8e:	4770      	bx	lr
    8e90:	10000130 	.word	0x10000130

00008e94 <nrf52_errata_171>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8e94:	4b03      	ldr	r3, [pc, #12]	; (8ea4 <nrf52_errata_171+0x10>)
    8e96:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    8e98:	2b08      	cmp	r3, #8
    8e9a:	d001      	beq.n	8ea0 <nrf52_errata_171+0xc>
        return false;
    8e9c:	2000      	movs	r0, #0
    8e9e:	4770      	bx	lr
                        return true;
    8ea0:	2001      	movs	r0, #1
}
    8ea2:	4770      	bx	lr
    8ea4:	10000130 	.word	0x10000130

00008ea8 <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8ea8:	4b08      	ldr	r3, [pc, #32]	; (8ecc <nrf52_errata_187+0x24>)
    8eaa:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    8eac:	3304      	adds	r3, #4
    8eae:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    8eb0:	2a08      	cmp	r2, #8
    8eb2:	d001      	beq.n	8eb8 <nrf52_errata_187+0x10>
        return false;
    8eb4:	2000      	movs	r0, #0
    8eb6:	4770      	bx	lr
                switch(var2)
    8eb8:	2b00      	cmp	r3, #0
    8eba:	d804      	bhi.n	8ec6 <nrf52_errata_187+0x1e>
    8ebc:	e8df f003 	tbb	[pc, r3]
    8ec0:	01          	.byte	0x01
    8ec1:	00          	.byte	0x00
            if (var1 == 0x08)
    8ec2:	2000      	movs	r0, #0
    8ec4:	4770      	bx	lr
                        return true;
    8ec6:	2001      	movs	r0, #1
}
    8ec8:	4770      	bx	lr
    8eca:	bf00      	nop
    8ecc:	10000130 	.word	0x10000130

00008ed0 <nrf52_errata_199>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8ed0:	4b03      	ldr	r3, [pc, #12]	; (8ee0 <nrf52_errata_199+0x10>)
    8ed2:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    8ed4:	2b08      	cmp	r3, #8
    8ed6:	d001      	beq.n	8edc <nrf52_errata_199+0xc>
        return false;
    8ed8:	2000      	movs	r0, #0
    8eda:	4770      	bx	lr
                        return true;
    8edc:	2001      	movs	r0, #1
}
    8ede:	4770      	bx	lr
    8ee0:	10000130 	.word	0x10000130

00008ee4 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
    8ee4:	b500      	push	{lr}
    8ee6:	b083      	sub	sp, #12
    m_bus_suspend = false;
    8ee8:	2300      	movs	r3, #0
    8eea:	4a09      	ldr	r2, [pc, #36]	; (8f10 <ev_usbreset_handler+0x2c>)
    8eec:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    8eee:	4a09      	ldr	r2, [pc, #36]	; (8f14 <ev_usbreset_handler+0x30>)
    8ef0:	7013      	strb	r3, [r2, #0]

    const nrfx_usbd_evt_t evt = {
    8ef2:	f8ad 3005 	strh.w	r3, [sp, #5]
    8ef6:	f88d 3007 	strb.w	r3, [sp, #7]
    8efa:	2301      	movs	r3, #1
    8efc:	f88d 3004 	strb.w	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    8f00:	4b05      	ldr	r3, [pc, #20]	; (8f18 <ev_usbreset_handler+0x34>)
    8f02:	681b      	ldr	r3, [r3, #0]
    8f04:	a801      	add	r0, sp, #4
    8f06:	4798      	blx	r3
}
    8f08:	b003      	add	sp, #12
    8f0a:	f85d fb04 	ldr.w	pc, [sp], #4
    8f0e:	bf00      	nop
    8f10:	20002b53 	.word	0x20002b53
    8f14:	20002b56 	.word	0x20002b56
    8f18:	200025f0 	.word	0x200025f0

00008f1c <ev_sof_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }

static void ev_sof_handler(void)
{
    8f1c:	b500      	push	{lr}
    8f1e:	b083      	sub	sp, #12
    nrfx_usbd_evt_t evt =  {
    8f20:	2300      	movs	r3, #0
    8f22:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
    8f26:	4b12      	ldr	r3, [pc, #72]	; (8f70 <ev_sof_handler+0x54>)
    8f28:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    8f2c:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
    8f30:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    if (size_isoout == 0)
    8f34:	b15b      	cbz	r3, 8f4e <ev_sof_handler+0x32>
    else if ((size_isoout & USBD_SIZE_ISOOUT_ZERO_Msk) ==
    8f36:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    8f3a:	d115      	bne.n	8f68 <ev_sof_handler+0x4c>
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
    };

    /* Process isochronous endpoints */
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    if (nrf_usbd_episoout_size_get(NRF_USBD, NRFX_USBD_EPOUT8) != NRF_USBD_EPISOOUT_NO_DATA)
    8f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
    8f40:	d002      	beq.n	8f48 <ev_sof_handler+0x2c>
    {
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    8f42:	f04f 2101 	mov.w	r1, #16777472	; 0x1000100
    8f46:	e004      	b.n	8f52 <ev_sof_handler+0x36>
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    8f48:	f44f 7180 	mov.w	r1, #256	; 0x100
    8f4c:	e001      	b.n	8f52 <ev_sof_handler+0x36>
    8f4e:	f44f 7180 	mov.w	r1, #256	; 0x100
    }
    m_ep_ready |= iso_ready_mask;
    8f52:	4a08      	ldr	r2, [pc, #32]	; (8f74 <ev_sof_handler+0x58>)
    8f54:	6813      	ldr	r3, [r2, #0]
    8f56:	430b      	orrs	r3, r1
    8f58:	6013      	str	r3, [r2, #0]

    m_event_handler(&evt);
    8f5a:	4b07      	ldr	r3, [pc, #28]	; (8f78 <ev_sof_handler+0x5c>)
    8f5c:	681b      	ldr	r3, [r3, #0]
    8f5e:	a801      	add	r0, sp, #4
    8f60:	4798      	blx	r3
}
    8f62:	b003      	add	sp, #12
    8f64:	f85d fb04 	ldr.w	pc, [sp], #4
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    8f68:	f04f 2101 	mov.w	r1, #16777472	; 0x1000100
    8f6c:	e7f1      	b.n	8f52 <ev_sof_handler+0x36>
    8f6e:	bf00      	nop
    8f70:	40027000 	.word	0x40027000
    8f74:	200024cc 	.word	0x200024cc
    8f78:	200025f0 	.word	0x200025f0

00008f7c <ev_usbevent_handler>:
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
    8f7c:	b510      	push	{r4, lr}
    8f7e:	b082      	sub	sp, #8
    return p_reg->EVENTCAUSE;
    8f80:	4b23      	ldr	r3, [pc, #140]	; (9010 <ev_usbevent_handler+0x94>)
    8f82:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
    8f86:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    8f8a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    8f8e:	f414 7f80 	tst.w	r4, #256	; 0x100
    8f92:	d00e      	beq.n	8fb2 <ev_usbevent_handler+0x36>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
    8f94:	4b1f      	ldr	r3, [pc, #124]	; (9014 <ev_usbevent_handler+0x98>)
    8f96:	2201      	movs	r2, #1
    8f98:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    8f9a:	2300      	movs	r3, #0
    8f9c:	f8ad 3005 	strh.w	r3, [sp, #5]
    8fa0:	f88d 3007 	strb.w	r3, [sp, #7]
    8fa4:	2302      	movs	r3, #2
    8fa6:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
    8faa:	4b1b      	ldr	r3, [pc, #108]	; (9018 <ev_usbevent_handler+0x9c>)
    8fac:	681b      	ldr	r3, [r3, #0]
    8fae:	a801      	add	r0, sp, #4
    8fb0:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    8fb2:	f414 7f00 	tst.w	r4, #512	; 0x200
    8fb6:	d00d      	beq.n	8fd4 <ev_usbevent_handler+0x58>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
    8fb8:	2300      	movs	r3, #0
    8fba:	4a16      	ldr	r2, [pc, #88]	; (9014 <ev_usbevent_handler+0x98>)
    8fbc:	7013      	strb	r3, [r2, #0]
        const nrfx_usbd_evt_t evt = {
    8fbe:	f8ad 3005 	strh.w	r3, [sp, #5]
    8fc2:	f88d 3007 	strb.w	r3, [sp, #7]
    8fc6:	2303      	movs	r3, #3
    8fc8:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
    8fcc:	4b12      	ldr	r3, [pc, #72]	; (9018 <ev_usbevent_handler+0x9c>)
    8fce:	681b      	ldr	r3, [r3, #0]
    8fd0:	a801      	add	r0, sp, #4
    8fd2:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    8fd4:	f414 6f80 	tst.w	r4, #1024	; 0x400
    8fd8:	d017      	beq.n	900a <ev_usbevent_handler+0x8e>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
    8fda:	4b0e      	ldr	r3, [pc, #56]	; (9014 <ev_usbevent_handler+0x98>)
    8fdc:	781b      	ldrb	r3, [r3, #0]
    8fde:	b1a3      	cbz	r3, 900a <ev_usbevent_handler+0x8e>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
    8fe0:	2300      	movs	r3, #0
    8fe2:	4a0c      	ldr	r2, [pc, #48]	; (9014 <ev_usbevent_handler+0x98>)
    8fe4:	7013      	strb	r3, [r2, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    8fe6:	2101      	movs	r1, #1
    8fe8:	4a09      	ldr	r2, [pc, #36]	; (9010 <ev_usbevent_handler+0x94>)
    8fea:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    8fee:	3258      	adds	r2, #88	; 0x58
    8ff0:	6011      	str	r1, [r2, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    8ff2:	6812      	ldr	r2, [r2, #0]

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
    8ff4:	f8ad 3005 	strh.w	r3, [sp, #5]
    8ff8:	f88d 3007 	strb.w	r3, [sp, #7]
    8ffc:	2304      	movs	r3, #4
    8ffe:	f88d 3004 	strb.w	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
    9002:	4b05      	ldr	r3, [pc, #20]	; (9018 <ev_usbevent_handler+0x9c>)
    9004:	681b      	ldr	r3, [r3, #0]
    9006:	a801      	add	r0, sp, #4
    9008:	4798      	blx	r3
        }
    }
}
    900a:	b002      	add	sp, #8
    900c:	bd10      	pop	{r4, pc}
    900e:	bf00      	nop
    9010:	40027000 	.word	0x40027000
    9014:	20002b53 	.word	0x20002b53
    9018:	200025f0 	.word	0x200025f0

0000901c <usbd_enable>:

/**
 * @brief Enable USBD peripheral.
 */
static void usbd_enable(void)
{
    901c:	b510      	push	{r4, lr}
}

/* Errata: USB cannot be enabled. **/
static inline bool nrfx_usbd_errata_187(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    901e:	f7ff ff43 	bl	8ea8 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    9022:	b1b8      	cbz	r0, 9054 <usbd_enable+0x38>
    9024:	f04f 0220 	mov.w	r2, #32
    9028:	f3ef 8311 	mrs	r3, BASEPRI
    902c:	f382 8812 	msr	BASEPRI_MAX, r2
    9030:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    9034:	4a41      	ldr	r2, [pc, #260]	; (913c <usbd_enable+0x120>)
    9036:	6812      	ldr	r2, [r2, #0]
    9038:	2a00      	cmp	r2, #0
    903a:	d16f      	bne.n	911c <usbd_enable+0x100>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    903c:	4a3f      	ldr	r2, [pc, #252]	; (913c <usbd_enable+0x120>)
    903e:	f249 3175 	movw	r1, #37749	; 0x9375
    9042:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    9044:	483e      	ldr	r0, [pc, #248]	; (9140 <usbd_enable+0x124>)
    9046:	2403      	movs	r4, #3
    9048:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    904a:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    904c:	f383 8811 	msr	BASEPRI, r3
    9050:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_171();
    9054:	f7ff ff1e 	bl	8e94 <nrf52_errata_171>
    {
        usbd_errata_187_211_begin();
    }

    if (nrfx_usbd_errata_171())
    9058:	b1b8      	cbz	r0, 908a <usbd_enable+0x6e>
	__asm__ volatile(
    905a:	f04f 0220 	mov.w	r2, #32
    905e:	f3ef 8311 	mrs	r3, BASEPRI
    9062:	f382 8812 	msr	BASEPRI_MAX, r2
    9066:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    906a:	4a34      	ldr	r2, [pc, #208]	; (913c <usbd_enable+0x120>)
    906c:	6812      	ldr	r2, [r2, #0]
    906e:	2a00      	cmp	r2, #0
    9070:	d158      	bne.n	9124 <usbd_enable+0x108>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9072:	4a32      	ldr	r2, [pc, #200]	; (913c <usbd_enable+0x120>)
    9074:	f249 3175 	movw	r1, #37749	; 0x9375
    9078:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    907a:	4832      	ldr	r0, [pc, #200]	; (9144 <usbd_enable+0x128>)
    907c:	24c0      	movs	r4, #192	; 0xc0
    907e:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9080:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    9082:	f383 8811 	msr	BASEPRI, r3
    9086:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    908a:	4b2f      	ldr	r3, [pc, #188]	; (9148 <usbd_enable+0x12c>)
    908c:	2201      	movs	r2, #1
    908e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    9092:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
    9096:	4b2c      	ldr	r3, [pc, #176]	; (9148 <usbd_enable+0x12c>)
    9098:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
    909c:	f413 6f00 	tst.w	r3, #2048	; 0x800
    90a0:	d0f9      	beq.n	9096 <usbd_enable+0x7a>
    p_reg->EVENTCAUSE = flags;
    90a2:	4b29      	ldr	r3, [pc, #164]	; (9148 <usbd_enable+0x12c>)
    90a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
    90a8:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    90ac:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    90b0:	f7ff fef0 	bl	8e94 <nrf52_errata_171>
    nrf_usbd_enable(NRF_USBD);

    /* Waiting for peripheral to enable, this should take a few us */
    usbd_eventcause_wait_and_clear(NRF_USBD_EVENTCAUSE_READY_MASK);

    if (nrfx_usbd_errata_171())
    90b4:	b1b8      	cbz	r0, 90e6 <usbd_enable+0xca>
	__asm__ volatile(
    90b6:	f04f 0220 	mov.w	r2, #32
    90ba:	f3ef 8311 	mrs	r3, BASEPRI
    90be:	f382 8812 	msr	BASEPRI_MAX, r2
    90c2:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    90c6:	4a1d      	ldr	r2, [pc, #116]	; (913c <usbd_enable+0x120>)
    90c8:	6812      	ldr	r2, [r2, #0]
    90ca:	2a00      	cmp	r2, #0
    90cc:	d12e      	bne.n	912c <usbd_enable+0x110>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    90ce:	4a1b      	ldr	r2, [pc, #108]	; (913c <usbd_enable+0x120>)
    90d0:	f249 3175 	movw	r1, #37749	; 0x9375
    90d4:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    90d6:	481b      	ldr	r0, [pc, #108]	; (9144 <usbd_enable+0x128>)
    90d8:	2400      	movs	r4, #0
    90da:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    90dc:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    90de:	f383 8811 	msr	BASEPRI, r3
    90e2:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    90e6:	f7ff fedf 	bl	8ea8 <nrf52_errata_187>
    {
        usbd_errata_171_end();
    }

    if (nrfx_usbd_errata_187())
    90ea:	b1b0      	cbz	r0, 911a <usbd_enable+0xfe>
	__asm__ volatile(
    90ec:	f04f 0220 	mov.w	r2, #32
    90f0:	f3ef 8311 	mrs	r3, BASEPRI
    90f4:	f382 8812 	msr	BASEPRI_MAX, r2
    90f8:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    90fc:	4a0f      	ldr	r2, [pc, #60]	; (913c <usbd_enable+0x120>)
    90fe:	6812      	ldr	r2, [r2, #0]
    9100:	b9c2      	cbnz	r2, 9134 <usbd_enable+0x118>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9102:	4a0e      	ldr	r2, [pc, #56]	; (913c <usbd_enable+0x120>)
    9104:	f249 3175 	movw	r1, #37749	; 0x9375
    9108:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    910a:	480d      	ldr	r0, [pc, #52]	; (9140 <usbd_enable+0x124>)
    910c:	2400      	movs	r4, #0
    910e:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9110:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    9112:	f383 8811 	msr	BASEPRI, r3
    9116:	f3bf 8f6f 	isb	sy
    {
        usbd_errata_187_211_end();
    }
}
    911a:	bd10      	pop	{r4, pc}
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    911c:	4a08      	ldr	r2, [pc, #32]	; (9140 <usbd_enable+0x124>)
    911e:	2103      	movs	r1, #3
    9120:	6011      	str	r1, [r2, #0]
    9122:	e793      	b.n	904c <usbd_enable+0x30>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    9124:	4a07      	ldr	r2, [pc, #28]	; (9144 <usbd_enable+0x128>)
    9126:	21c0      	movs	r1, #192	; 0xc0
    9128:	6011      	str	r1, [r2, #0]
    912a:	e7aa      	b.n	9082 <usbd_enable+0x66>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    912c:	4a05      	ldr	r2, [pc, #20]	; (9144 <usbd_enable+0x128>)
    912e:	2100      	movs	r1, #0
    9130:	6011      	str	r1, [r2, #0]
    9132:	e7d4      	b.n	90de <usbd_enable+0xc2>
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    9134:	4a02      	ldr	r2, [pc, #8]	; (9140 <usbd_enable+0x124>)
    9136:	2100      	movs	r1, #0
    9138:	6011      	str	r1, [r2, #0]
    913a:	e7ea      	b.n	9112 <usbd_enable+0xf6>
    913c:	4006ec00 	.word	0x4006ec00
    9140:	4006ed14 	.word	0x4006ed14
    9144:	4006ec14 	.word	0x4006ec14
    9148:	40027000 	.word	0x40027000

0000914c <usbd_ep_data_handler>:
{
    914c:	b530      	push	{r4, r5, lr}
    914e:	b083      	sub	sp, #12
    9150:	4604      	mov	r4, r0
    9152:	460d      	mov	r5, r1
    m_ep_ready |= (1U << bitpos);
    9154:	2301      	movs	r3, #1
    9156:	fa03 f201 	lsl.w	r2, r3, r1
    915a:	495c      	ldr	r1, [pc, #368]	; (92cc <usbd_ep_data_handler+0x180>)
    915c:	680b      	ldr	r3, [r1, #0]
    915e:	4313      	orrs	r3, r2
    9160:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    9162:	f010 0f80 	tst.w	r0, #128	; 0x80
    9166:	d114      	bne.n	9192 <usbd_ep_data_handler+0x46>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    9168:	4b59      	ldr	r3, [pc, #356]	; (92d0 <usbd_ep_data_handler+0x184>)
    916a:	6819      	ldr	r1, [r3, #0]
    916c:	fa21 f505 	lsr.w	r5, r1, r5
    9170:	f015 0f01 	tst.w	r5, #1
    9174:	d10b      	bne.n	918e <usbd_ep_data_handler+0x42>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    9176:	2306      	movs	r3, #6
    9178:	f88d 3004 	strb.w	r3, [sp, #4]
    917c:	f88d 0006 	strb.w	r0, [sp, #6]
    9180:	2301      	movs	r3, #1
    9182:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    9186:	4b53      	ldr	r3, [pc, #332]	; (92d4 <usbd_ep_data_handler+0x188>)
    9188:	681b      	ldr	r3, [r3, #0]
    918a:	a801      	add	r0, sp, #4
    918c:	4798      	blx	r3
}
    918e:	b003      	add	sp, #12
    9190:	bd30      	pop	{r4, r5, pc}
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    9192:	f000 030f 	and.w	r3, r0, #15
    9196:	4a50      	ldr	r2, [pc, #320]	; (92d8 <usbd_ep_data_handler+0x18c>)
    9198:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    919c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    91a0:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    91a4:	681a      	ldr	r2, [r3, #0]
    if (ret)
    91a6:	b112      	cbz	r2, 91ae <usbd_ep_data_handler+0x62>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    91a8:	2100      	movs	r1, #0
    91aa:	6019      	str	r1, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    91ac:	681b      	ldr	r3, [r3, #0]
        if (nrf_usbd_event_get_and_clear(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)))
    91ae:	2a00      	cmp	r2, #0
    91b0:	d047      	beq.n	9242 <usbd_ep_data_handler+0xf6>
            if (ep != NRFX_USBD_EPIN0)
    91b2:	2c80      	cmp	r4, #128	; 0x80
    91b4:	d05b      	beq.n	926e <usbd_ep_data_handler+0x122>
}

/* Errata: USBD cannot receive tasks during DMA. **/
static inline bool nrfx_usbd_errata_199(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
    91b6:	f7ff fe8b 	bl	8ed0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    91ba:	b110      	cbz	r0, 91c2 <usbd_ep_data_handler+0x76>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    91bc:	4b47      	ldr	r3, [pc, #284]	; (92dc <usbd_ep_data_handler+0x190>)
    91be:	2200      	movs	r2, #0
    91c0:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    91c2:	4b47      	ldr	r3, [pc, #284]	; (92e0 <usbd_ep_data_handler+0x194>)
    91c4:	2200      	movs	r2, #0
    91c6:	701a      	strb	r2, [r3, #0]
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    91c8:	b263      	sxtb	r3, r4
    91ca:	4293      	cmp	r3, r2
    91cc:	db21      	blt.n	9212 <usbd_ep_data_handler+0xc6>
    91ce:	4945      	ldr	r1, [pc, #276]	; (92e4 <usbd_ep_data_handler+0x198>)
        NRF_USBD_EP_NR_GET(ep));
    91d0:	f004 020f 	and.w	r2, r4, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    91d4:	0110      	lsls	r0, r2, #4
    91d6:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    91da:	7b92      	ldrb	r2, [r2, #14]
    91dc:	2a03      	cmp	r2, #3
    91de:	d01a      	beq.n	9216 <usbd_ep_data_handler+0xca>
    else if (p_state->handler.feeder == NULL)
    91e0:	580a      	ldr	r2, [r1, r0]
    91e2:	bb72      	cbnz	r2, 9242 <usbd_ep_data_handler+0xf6>
    return NRFX_USBD_EP_BITPOS(ep);
    91e4:	2b00      	cmp	r3, #0
    91e6:	db00      	blt.n	91ea <usbd_ep_data_handler+0x9e>
    91e8:	2210      	movs	r2, #16
    91ea:	f003 030f 	and.w	r3, r3, #15
    91ee:	4413      	add	r3, r2
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    91f0:	2201      	movs	r2, #1
    91f2:	fa02 f303 	lsl.w	r3, r2, r3
    91f6:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    91f8:	4a35      	ldr	r2, [pc, #212]	; (92d0 <usbd_ep_data_handler+0x184>)
    91fa:	f3bf 8f5b 	dmb	ish
    91fe:	e852 1f00 	ldrex	r1, [r2]
    9202:	4019      	ands	r1, r3
    9204:	e842 1000 	strex	r0, r1, [r2]
    9208:	2800      	cmp	r0, #0
    920a:	d1f8      	bne.n	91fe <usbd_ep_data_handler+0xb2>
    920c:	f3bf 8f5b 	dmb	ish
}
    9210:	e017      	b.n	9242 <usbd_ep_data_handler+0xf6>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9212:	4935      	ldr	r1, [pc, #212]	; (92e8 <usbd_ep_data_handler+0x19c>)
    9214:	e7dc      	b.n	91d0 <usbd_ep_data_handler+0x84>
    return NRFX_USBD_EP_BITPOS(ep);
    9216:	2b00      	cmp	r3, #0
    9218:	db27      	blt.n	926a <usbd_ep_data_handler+0x11e>
    921a:	2210      	movs	r2, #16
    921c:	f003 030f 	and.w	r3, r3, #15
    9220:	4413      	add	r3, r2
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9222:	2201      	movs	r2, #1
    9224:	fa02 f303 	lsl.w	r3, r2, r3
    9228:	43db      	mvns	r3, r3
    922a:	4a29      	ldr	r2, [pc, #164]	; (92d0 <usbd_ep_data_handler+0x184>)
    922c:	f3bf 8f5b 	dmb	ish
    9230:	e852 1f00 	ldrex	r1, [r2]
    9234:	4019      	ands	r1, r3
    9236:	e842 1000 	strex	r0, r1, [r2]
    923a:	2800      	cmp	r0, #0
    923c:	d1f8      	bne.n	9230 <usbd_ep_data_handler+0xe4>
    923e:	f3bf 8f5b 	dmb	ish
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    9242:	4b23      	ldr	r3, [pc, #140]	; (92d0 <usbd_ep_data_handler+0x184>)
    9244:	6819      	ldr	r1, [r3, #0]
    9246:	fa21 f505 	lsr.w	r5, r1, r5
    924a:	f015 0f01 	tst.w	r5, #1
    924e:	d19e      	bne.n	918e <usbd_ep_data_handler+0x42>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9250:	2306      	movs	r3, #6
    9252:	f88d 3004 	strb.w	r3, [sp, #4]
    9256:	f88d 4006 	strb.w	r4, [sp, #6]
    925a:	2300      	movs	r3, #0
    925c:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    9260:	4b1c      	ldr	r3, [pc, #112]	; (92d4 <usbd_ep_data_handler+0x188>)
    9262:	681b      	ldr	r3, [r3, #0]
    9264:	a801      	add	r0, sp, #4
    9266:	4798      	blx	r3
    9268:	e791      	b.n	918e <usbd_ep_data_handler+0x42>
    return NRFX_USBD_EP_BITPOS(ep);
    926a:	2200      	movs	r2, #0
    926c:	e7d6      	b.n	921c <usbd_ep_data_handler+0xd0>
    926e:	f7ff fe2f 	bl	8ed0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9272:	b110      	cbz	r0, 927a <usbd_ep_data_handler+0x12e>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    9274:	4b19      	ldr	r3, [pc, #100]	; (92dc <usbd_ep_data_handler+0x190>)
    9276:	2200      	movs	r2, #0
    9278:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    927a:	4b19      	ldr	r3, [pc, #100]	; (92e0 <usbd_ep_data_handler+0x194>)
    927c:	2200      	movs	r2, #0
    927e:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9280:	4b18      	ldr	r3, [pc, #96]	; (92e4 <usbd_ep_data_handler+0x198>)
    9282:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
    9286:	2b03      	cmp	r3, #3
    9288:	d012      	beq.n	92b0 <usbd_ep_data_handler+0x164>
    else if (p_state->handler.feeder == NULL)
    928a:	4b16      	ldr	r3, [pc, #88]	; (92e4 <usbd_ep_data_handler+0x198>)
    928c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    9290:	2b00      	cmp	r3, #0
    9292:	d1d6      	bne.n	9242 <usbd_ep_data_handler+0xf6>
    9294:	4b0e      	ldr	r3, [pc, #56]	; (92d0 <usbd_ep_data_handler+0x184>)
    9296:	f3bf 8f5b 	dmb	ish
    929a:	e853 2f00 	ldrex	r2, [r3]
    929e:	f022 0201 	bic.w	r2, r2, #1
    92a2:	e843 2100 	strex	r1, r2, [r3]
    92a6:	2900      	cmp	r1, #0
    92a8:	d1f7      	bne.n	929a <usbd_ep_data_handler+0x14e>
    92aa:	f3bf 8f5b 	dmb	ish
}
    92ae:	e7c8      	b.n	9242 <usbd_ep_data_handler+0xf6>
    92b0:	4b07      	ldr	r3, [pc, #28]	; (92d0 <usbd_ep_data_handler+0x184>)
    92b2:	f3bf 8f5b 	dmb	ish
    92b6:	e853 2f00 	ldrex	r2, [r3]
    92ba:	f022 0201 	bic.w	r2, r2, #1
    92be:	e843 2100 	strex	r1, r2, [r3]
    92c2:	2900      	cmp	r1, #0
    92c4:	d1f7      	bne.n	92b6 <usbd_ep_data_handler+0x16a>
    92c6:	f3bf 8f5b 	dmb	ish
    92ca:	e7ba      	b.n	9242 <usbd_ep_data_handler+0xf6>
    92cc:	200024cc 	.word	0x200024cc
    92d0:	2000245c 	.word	0x2000245c
    92d4:	200025f0 	.word	0x200025f0
    92d8:	00015808 	.word	0x00015808
    92dc:	40027c1c 	.word	0x40027c1c
    92e0:	20002b54 	.word	0x20002b54
    92e4:	200024d0 	.word	0x200024d0
    92e8:	20002560 	.word	0x20002560

000092ec <ev_setup_data_handler>:
{
    92ec:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    92ee:	4b07      	ldr	r3, [pc, #28]	; (930c <ev_setup_data_handler+0x20>)
    92f0:	7818      	ldrb	r0, [r3, #0]
    return NRFX_USBD_EP_BITPOS(ep);
    92f2:	f993 3000 	ldrsb.w	r3, [r3]
    92f6:	2b00      	cmp	r3, #0
    92f8:	db06      	blt.n	9308 <ev_setup_data_handler+0x1c>
    92fa:	2110      	movs	r1, #16
    92fc:	f003 030f 	and.w	r3, r3, #15
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    9300:	4419      	add	r1, r3
    9302:	f7ff ff23 	bl	914c <usbd_ep_data_handler>
}
    9306:	bd08      	pop	{r3, pc}
    return NRFX_USBD_EP_BITPOS(ep);
    9308:	2100      	movs	r1, #0
    930a:	e7f7      	b.n	92fc <ev_setup_data_handler+0x10>
    930c:	20002b56 	.word	0x20002b56

00009310 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    9310:	b500      	push	{lr}
    9312:	b083      	sub	sp, #12
    9314:	f7ff fddc 	bl	8ed0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9318:	b110      	cbz	r0, 9320 <ev_dma_epout8_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    931a:	4b16      	ldr	r3, [pc, #88]	; (9374 <ev_dma_epout8_handler+0x64>)
    931c:	2200      	movs	r2, #0
    931e:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    9320:	4b15      	ldr	r3, [pc, #84]	; (9378 <ev_dma_epout8_handler+0x68>)
    9322:	2200      	movs	r2, #0
    9324:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9326:	4b15      	ldr	r3, [pc, #84]	; (937c <ev_dma_epout8_handler+0x6c>)
    9328:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
    932c:	2b03      	cmp	r3, #3
    932e:	d01d      	beq.n	936c <ev_dma_epout8_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
    9330:	4b12      	ldr	r3, [pc, #72]	; (937c <ev_dma_epout8_handler+0x6c>)
    9332:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    9336:	b9cb      	cbnz	r3, 936c <ev_dma_epout8_handler+0x5c>
    9338:	4b11      	ldr	r3, [pc, #68]	; (9380 <ev_dma_epout8_handler+0x70>)
    933a:	f3bf 8f5b 	dmb	ish
    933e:	e853 2f00 	ldrex	r2, [r3]
    9342:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    9346:	e843 2100 	strex	r1, r2, [r3]
    934a:	2900      	cmp	r1, #0
    934c:	d1f7      	bne.n	933e <ev_dma_epout8_handler+0x2e>
    934e:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9352:	2306      	movs	r3, #6
    9354:	f88d 3004 	strb.w	r3, [sp, #4]
    9358:	2308      	movs	r3, #8
    935a:	f88d 3006 	strb.w	r3, [sp, #6]
    935e:	2300      	movs	r3, #0
    9360:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    9364:	4b07      	ldr	r3, [pc, #28]	; (9384 <ev_dma_epout8_handler+0x74>)
    9366:	681b      	ldr	r3, [r3, #0]
    9368:	a801      	add	r0, sp, #4
    936a:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    936c:	b003      	add	sp, #12
    936e:	f85d fb04 	ldr.w	pc, [sp], #4
    9372:	bf00      	nop
    9374:	40027c1c 	.word	0x40027c1c
    9378:	20002b54 	.word	0x20002b54
    937c:	200024d0 	.word	0x200024d0
    9380:	2000245c 	.word	0x2000245c
    9384:	200025f0 	.word	0x200025f0

00009388 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    9388:	b500      	push	{lr}
    938a:	b083      	sub	sp, #12
    938c:	f7ff fda0 	bl	8ed0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9390:	b110      	cbz	r0, 9398 <ev_dma_epin8_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    9392:	4b1d      	ldr	r3, [pc, #116]	; (9408 <ev_dma_epin8_handler+0x80>)
    9394:	2200      	movs	r2, #0
    9396:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    9398:	4b1c      	ldr	r3, [pc, #112]	; (940c <ev_dma_epin8_handler+0x84>)
    939a:	2200      	movs	r2, #0
    939c:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    939e:	4b1c      	ldr	r3, [pc, #112]	; (9410 <ev_dma_epin8_handler+0x88>)
    93a0:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
    93a4:	2b03      	cmp	r3, #3
    93a6:	d01e      	beq.n	93e6 <ev_dma_epin8_handler+0x5e>
    else if (p_state->handler.feeder == NULL)
    93a8:	4b19      	ldr	r3, [pc, #100]	; (9410 <ev_dma_epin8_handler+0x88>)
    93aa:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    93ae:	bb3b      	cbnz	r3, 9400 <ev_dma_epin8_handler+0x78>
    93b0:	4b18      	ldr	r3, [pc, #96]	; (9414 <ev_dma_epin8_handler+0x8c>)
    93b2:	f3bf 8f5b 	dmb	ish
    93b6:	e853 2f00 	ldrex	r2, [r3]
    93ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    93be:	e843 2100 	strex	r1, r2, [r3]
    93c2:	2900      	cmp	r1, #0
    93c4:	d1f7      	bne.n	93b6 <ev_dma_epin8_handler+0x2e>
    93c6:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    93ca:	2306      	movs	r3, #6
    93cc:	f88d 3004 	strb.w	r3, [sp, #4]
    93d0:	2388      	movs	r3, #136	; 0x88
    93d2:	f88d 3006 	strb.w	r3, [sp, #6]
    93d6:	2300      	movs	r3, #0
    93d8:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    93dc:	4b0e      	ldr	r3, [pc, #56]	; (9418 <ev_dma_epin8_handler+0x90>)
    93de:	681b      	ldr	r3, [r3, #0]
    93e0:	a801      	add	r0, sp, #4
    93e2:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    93e4:	e00c      	b.n	9400 <ev_dma_epin8_handler+0x78>
    93e6:	4b0b      	ldr	r3, [pc, #44]	; (9414 <ev_dma_epin8_handler+0x8c>)
    93e8:	f3bf 8f5b 	dmb	ish
    93ec:	e853 2f00 	ldrex	r2, [r3]
    93f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    93f4:	e843 2100 	strex	r1, r2, [r3]
    93f8:	2900      	cmp	r1, #0
    93fa:	d1f7      	bne.n	93ec <ev_dma_epin8_handler+0x64>
    93fc:	f3bf 8f5b 	dmb	ish
    9400:	b003      	add	sp, #12
    9402:	f85d fb04 	ldr.w	pc, [sp], #4
    9406:	bf00      	nop
    9408:	40027c1c 	.word	0x40027c1c
    940c:	20002b54 	.word	0x20002b54
    9410:	200024d0 	.word	0x200024d0
    9414:	2000245c 	.word	0x2000245c
    9418:	200025f0 	.word	0x200025f0

0000941c <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    941c:	b508      	push	{r3, lr}
    941e:	f7ff fd57 	bl	8ed0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9422:	b110      	cbz	r0, 942a <ev_dma_epin0_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    9424:	4b15      	ldr	r3, [pc, #84]	; (947c <ev_dma_epin0_handler+0x60>)
    9426:	2200      	movs	r2, #0
    9428:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    942a:	4b15      	ldr	r3, [pc, #84]	; (9480 <ev_dma_epin0_handler+0x64>)
    942c:	2200      	movs	r2, #0
    942e:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9430:	4b14      	ldr	r3, [pc, #80]	; (9484 <ev_dma_epin0_handler+0x68>)
    9432:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
    9436:	2b03      	cmp	r3, #3
    9438:	d004      	beq.n	9444 <ev_dma_epin0_handler+0x28>
    else if (p_state->handler.feeder == NULL)
    943a:	4b12      	ldr	r3, [pc, #72]	; (9484 <ev_dma_epin0_handler+0x68>)
    943c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    9440:	b173      	cbz	r3, 9460 <ev_dma_epin0_handler+0x44>
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    9442:	bd08      	pop	{r3, pc}
    9444:	4b10      	ldr	r3, [pc, #64]	; (9488 <ev_dma_epin0_handler+0x6c>)
    9446:	f3bf 8f5b 	dmb	ish
    944a:	e853 2f00 	ldrex	r2, [r3]
    944e:	f022 0201 	bic.w	r2, r2, #1
    9452:	e843 2100 	strex	r1, r2, [r3]
    9456:	2900      	cmp	r1, #0
    9458:	d1f7      	bne.n	944a <ev_dma_epin0_handler+0x2e>
    945a:	f3bf 8f5b 	dmb	ish
    945e:	e7f0      	b.n	9442 <ev_dma_epin0_handler+0x26>
    9460:	4b09      	ldr	r3, [pc, #36]	; (9488 <ev_dma_epin0_handler+0x6c>)
    9462:	f3bf 8f5b 	dmb	ish
    9466:	e853 2f00 	ldrex	r2, [r3]
    946a:	f022 0201 	bic.w	r2, r2, #1
    946e:	e843 2100 	strex	r1, r2, [r3]
    9472:	2900      	cmp	r1, #0
    9474:	d1f7      	bne.n	9466 <ev_dma_epin0_handler+0x4a>
    9476:	f3bf 8f5b 	dmb	ish
    947a:	e7e2      	b.n	9442 <ev_dma_epin0_handler+0x26>
    947c:	40027c1c 	.word	0x40027c1c
    9480:	20002b54 	.word	0x20002b54
    9484:	200024d0 	.word	0x200024d0
    9488:	2000245c 	.word	0x2000245c

0000948c <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    948c:	b508      	push	{r3, lr}
    948e:	f7ff fd1f 	bl	8ed0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9492:	b110      	cbz	r0, 949a <ev_dma_epin7_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    9494:	4b15      	ldr	r3, [pc, #84]	; (94ec <ev_dma_epin7_handler+0x60>)
    9496:	2200      	movs	r2, #0
    9498:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    949a:	4b15      	ldr	r3, [pc, #84]	; (94f0 <ev_dma_epin7_handler+0x64>)
    949c:	2200      	movs	r2, #0
    949e:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    94a0:	4b14      	ldr	r3, [pc, #80]	; (94f4 <ev_dma_epin7_handler+0x68>)
    94a2:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
    94a6:	2b03      	cmp	r3, #3
    94a8:	d011      	beq.n	94ce <ev_dma_epin7_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    94aa:	4b12      	ldr	r3, [pc, #72]	; (94f4 <ev_dma_epin7_handler+0x68>)
    94ac:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    94b0:	b9d3      	cbnz	r3, 94e8 <ev_dma_epin7_handler+0x5c>
    94b2:	4b11      	ldr	r3, [pc, #68]	; (94f8 <ev_dma_epin7_handler+0x6c>)
    94b4:	f3bf 8f5b 	dmb	ish
    94b8:	e853 2f00 	ldrex	r2, [r3]
    94bc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    94c0:	e843 2100 	strex	r1, r2, [r3]
    94c4:	2900      	cmp	r1, #0
    94c6:	d1f7      	bne.n	94b8 <ev_dma_epin7_handler+0x2c>
    94c8:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    94cc:	e00c      	b.n	94e8 <ev_dma_epin7_handler+0x5c>
    94ce:	4b0a      	ldr	r3, [pc, #40]	; (94f8 <ev_dma_epin7_handler+0x6c>)
    94d0:	f3bf 8f5b 	dmb	ish
    94d4:	e853 2f00 	ldrex	r2, [r3]
    94d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    94dc:	e843 2100 	strex	r1, r2, [r3]
    94e0:	2900      	cmp	r1, #0
    94e2:	d1f7      	bne.n	94d4 <ev_dma_epin7_handler+0x48>
    94e4:	f3bf 8f5b 	dmb	ish
    94e8:	bd08      	pop	{r3, pc}
    94ea:	bf00      	nop
    94ec:	40027c1c 	.word	0x40027c1c
    94f0:	20002b54 	.word	0x20002b54
    94f4:	200024d0 	.word	0x200024d0
    94f8:	2000245c 	.word	0x2000245c

000094fc <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    94fc:	b508      	push	{r3, lr}
    94fe:	f7ff fce7 	bl	8ed0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9502:	b110      	cbz	r0, 950a <ev_dma_epin5_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    9504:	4b15      	ldr	r3, [pc, #84]	; (955c <ev_dma_epin5_handler+0x60>)
    9506:	2200      	movs	r2, #0
    9508:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    950a:	4b15      	ldr	r3, [pc, #84]	; (9560 <ev_dma_epin5_handler+0x64>)
    950c:	2200      	movs	r2, #0
    950e:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9510:	4b14      	ldr	r3, [pc, #80]	; (9564 <ev_dma_epin5_handler+0x68>)
    9512:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
    9516:	2b03      	cmp	r3, #3
    9518:	d011      	beq.n	953e <ev_dma_epin5_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    951a:	4b12      	ldr	r3, [pc, #72]	; (9564 <ev_dma_epin5_handler+0x68>)
    951c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    9520:	b9d3      	cbnz	r3, 9558 <ev_dma_epin5_handler+0x5c>
    9522:	4b11      	ldr	r3, [pc, #68]	; (9568 <ev_dma_epin5_handler+0x6c>)
    9524:	f3bf 8f5b 	dmb	ish
    9528:	e853 2f00 	ldrex	r2, [r3]
    952c:	f022 0220 	bic.w	r2, r2, #32
    9530:	e843 2100 	strex	r1, r2, [r3]
    9534:	2900      	cmp	r1, #0
    9536:	d1f7      	bne.n	9528 <ev_dma_epin5_handler+0x2c>
    9538:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    953c:	e00c      	b.n	9558 <ev_dma_epin5_handler+0x5c>
    953e:	4b0a      	ldr	r3, [pc, #40]	; (9568 <ev_dma_epin5_handler+0x6c>)
    9540:	f3bf 8f5b 	dmb	ish
    9544:	e853 2f00 	ldrex	r2, [r3]
    9548:	f022 0220 	bic.w	r2, r2, #32
    954c:	e843 2100 	strex	r1, r2, [r3]
    9550:	2900      	cmp	r1, #0
    9552:	d1f7      	bne.n	9544 <ev_dma_epin5_handler+0x48>
    9554:	f3bf 8f5b 	dmb	ish
    9558:	bd08      	pop	{r3, pc}
    955a:	bf00      	nop
    955c:	40027c1c 	.word	0x40027c1c
    9560:	20002b54 	.word	0x20002b54
    9564:	200024d0 	.word	0x200024d0
    9568:	2000245c 	.word	0x2000245c

0000956c <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    956c:	b508      	push	{r3, lr}
    956e:	f7ff fcaf 	bl	8ed0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9572:	b110      	cbz	r0, 957a <ev_dma_epin6_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    9574:	4b15      	ldr	r3, [pc, #84]	; (95cc <ev_dma_epin6_handler+0x60>)
    9576:	2200      	movs	r2, #0
    9578:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    957a:	4b15      	ldr	r3, [pc, #84]	; (95d0 <ev_dma_epin6_handler+0x64>)
    957c:	2200      	movs	r2, #0
    957e:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9580:	4b14      	ldr	r3, [pc, #80]	; (95d4 <ev_dma_epin6_handler+0x68>)
    9582:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
    9586:	2b03      	cmp	r3, #3
    9588:	d011      	beq.n	95ae <ev_dma_epin6_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    958a:	4b12      	ldr	r3, [pc, #72]	; (95d4 <ev_dma_epin6_handler+0x68>)
    958c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    9590:	b9d3      	cbnz	r3, 95c8 <ev_dma_epin6_handler+0x5c>
    9592:	4b11      	ldr	r3, [pc, #68]	; (95d8 <ev_dma_epin6_handler+0x6c>)
    9594:	f3bf 8f5b 	dmb	ish
    9598:	e853 2f00 	ldrex	r2, [r3]
    959c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    95a0:	e843 2100 	strex	r1, r2, [r3]
    95a4:	2900      	cmp	r1, #0
    95a6:	d1f7      	bne.n	9598 <ev_dma_epin6_handler+0x2c>
    95a8:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    95ac:	e00c      	b.n	95c8 <ev_dma_epin6_handler+0x5c>
    95ae:	4b0a      	ldr	r3, [pc, #40]	; (95d8 <ev_dma_epin6_handler+0x6c>)
    95b0:	f3bf 8f5b 	dmb	ish
    95b4:	e853 2f00 	ldrex	r2, [r3]
    95b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    95bc:	e843 2100 	strex	r1, r2, [r3]
    95c0:	2900      	cmp	r1, #0
    95c2:	d1f7      	bne.n	95b4 <ev_dma_epin6_handler+0x48>
    95c4:	f3bf 8f5b 	dmb	ish
    95c8:	bd08      	pop	{r3, pc}
    95ca:	bf00      	nop
    95cc:	40027c1c 	.word	0x40027c1c
    95d0:	20002b54 	.word	0x20002b54
    95d4:	200024d0 	.word	0x200024d0
    95d8:	2000245c 	.word	0x2000245c

000095dc <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    95dc:	b508      	push	{r3, lr}
    95de:	f7ff fc77 	bl	8ed0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    95e2:	b110      	cbz	r0, 95ea <ev_dma_epin1_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    95e4:	4b15      	ldr	r3, [pc, #84]	; (963c <ev_dma_epin1_handler+0x60>)
    95e6:	2200      	movs	r2, #0
    95e8:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    95ea:	4b15      	ldr	r3, [pc, #84]	; (9640 <ev_dma_epin1_handler+0x64>)
    95ec:	2200      	movs	r2, #0
    95ee:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    95f0:	4b14      	ldr	r3, [pc, #80]	; (9644 <ev_dma_epin1_handler+0x68>)
    95f2:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
    95f6:	2b03      	cmp	r3, #3
    95f8:	d011      	beq.n	961e <ev_dma_epin1_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    95fa:	4b12      	ldr	r3, [pc, #72]	; (9644 <ev_dma_epin1_handler+0x68>)
    95fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    9600:	b9d3      	cbnz	r3, 9638 <ev_dma_epin1_handler+0x5c>
    9602:	4b11      	ldr	r3, [pc, #68]	; (9648 <ev_dma_epin1_handler+0x6c>)
    9604:	f3bf 8f5b 	dmb	ish
    9608:	e853 2f00 	ldrex	r2, [r3]
    960c:	f022 0202 	bic.w	r2, r2, #2
    9610:	e843 2100 	strex	r1, r2, [r3]
    9614:	2900      	cmp	r1, #0
    9616:	d1f7      	bne.n	9608 <ev_dma_epin1_handler+0x2c>
    9618:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    961c:	e00c      	b.n	9638 <ev_dma_epin1_handler+0x5c>
    961e:	4b0a      	ldr	r3, [pc, #40]	; (9648 <ev_dma_epin1_handler+0x6c>)
    9620:	f3bf 8f5b 	dmb	ish
    9624:	e853 2f00 	ldrex	r2, [r3]
    9628:	f022 0202 	bic.w	r2, r2, #2
    962c:	e843 2100 	strex	r1, r2, [r3]
    9630:	2900      	cmp	r1, #0
    9632:	d1f7      	bne.n	9624 <ev_dma_epin1_handler+0x48>
    9634:	f3bf 8f5b 	dmb	ish
    9638:	bd08      	pop	{r3, pc}
    963a:	bf00      	nop
    963c:	40027c1c 	.word	0x40027c1c
    9640:	20002b54 	.word	0x20002b54
    9644:	200024d0 	.word	0x200024d0
    9648:	2000245c 	.word	0x2000245c

0000964c <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    964c:	b508      	push	{r3, lr}
    964e:	f7ff fc3f 	bl	8ed0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9652:	b110      	cbz	r0, 965a <ev_dma_epin2_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    9654:	4b15      	ldr	r3, [pc, #84]	; (96ac <ev_dma_epin2_handler+0x60>)
    9656:	2200      	movs	r2, #0
    9658:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    965a:	4b15      	ldr	r3, [pc, #84]	; (96b0 <ev_dma_epin2_handler+0x64>)
    965c:	2200      	movs	r2, #0
    965e:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9660:	4b14      	ldr	r3, [pc, #80]	; (96b4 <ev_dma_epin2_handler+0x68>)
    9662:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
    9666:	2b03      	cmp	r3, #3
    9668:	d011      	beq.n	968e <ev_dma_epin2_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    966a:	4b12      	ldr	r3, [pc, #72]	; (96b4 <ev_dma_epin2_handler+0x68>)
    966c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    9670:	b9d3      	cbnz	r3, 96a8 <ev_dma_epin2_handler+0x5c>
    9672:	4b11      	ldr	r3, [pc, #68]	; (96b8 <ev_dma_epin2_handler+0x6c>)
    9674:	f3bf 8f5b 	dmb	ish
    9678:	e853 2f00 	ldrex	r2, [r3]
    967c:	f022 0204 	bic.w	r2, r2, #4
    9680:	e843 2100 	strex	r1, r2, [r3]
    9684:	2900      	cmp	r1, #0
    9686:	d1f7      	bne.n	9678 <ev_dma_epin2_handler+0x2c>
    9688:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    968c:	e00c      	b.n	96a8 <ev_dma_epin2_handler+0x5c>
    968e:	4b0a      	ldr	r3, [pc, #40]	; (96b8 <ev_dma_epin2_handler+0x6c>)
    9690:	f3bf 8f5b 	dmb	ish
    9694:	e853 2f00 	ldrex	r2, [r3]
    9698:	f022 0204 	bic.w	r2, r2, #4
    969c:	e843 2100 	strex	r1, r2, [r3]
    96a0:	2900      	cmp	r1, #0
    96a2:	d1f7      	bne.n	9694 <ev_dma_epin2_handler+0x48>
    96a4:	f3bf 8f5b 	dmb	ish
    96a8:	bd08      	pop	{r3, pc}
    96aa:	bf00      	nop
    96ac:	40027c1c 	.word	0x40027c1c
    96b0:	20002b54 	.word	0x20002b54
    96b4:	200024d0 	.word	0x200024d0
    96b8:	2000245c 	.word	0x2000245c

000096bc <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    96bc:	b508      	push	{r3, lr}
    96be:	f7ff fc07 	bl	8ed0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    96c2:	b110      	cbz	r0, 96ca <ev_dma_epin3_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    96c4:	4b15      	ldr	r3, [pc, #84]	; (971c <ev_dma_epin3_handler+0x60>)
    96c6:	2200      	movs	r2, #0
    96c8:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    96ca:	4b15      	ldr	r3, [pc, #84]	; (9720 <ev_dma_epin3_handler+0x64>)
    96cc:	2200      	movs	r2, #0
    96ce:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    96d0:	4b14      	ldr	r3, [pc, #80]	; (9724 <ev_dma_epin3_handler+0x68>)
    96d2:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
    96d6:	2b03      	cmp	r3, #3
    96d8:	d011      	beq.n	96fe <ev_dma_epin3_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    96da:	4b12      	ldr	r3, [pc, #72]	; (9724 <ev_dma_epin3_handler+0x68>)
    96dc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    96e0:	b9d3      	cbnz	r3, 9718 <ev_dma_epin3_handler+0x5c>
    96e2:	4b11      	ldr	r3, [pc, #68]	; (9728 <ev_dma_epin3_handler+0x6c>)
    96e4:	f3bf 8f5b 	dmb	ish
    96e8:	e853 2f00 	ldrex	r2, [r3]
    96ec:	f022 0208 	bic.w	r2, r2, #8
    96f0:	e843 2100 	strex	r1, r2, [r3]
    96f4:	2900      	cmp	r1, #0
    96f6:	d1f7      	bne.n	96e8 <ev_dma_epin3_handler+0x2c>
    96f8:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    96fc:	e00c      	b.n	9718 <ev_dma_epin3_handler+0x5c>
    96fe:	4b0a      	ldr	r3, [pc, #40]	; (9728 <ev_dma_epin3_handler+0x6c>)
    9700:	f3bf 8f5b 	dmb	ish
    9704:	e853 2f00 	ldrex	r2, [r3]
    9708:	f022 0208 	bic.w	r2, r2, #8
    970c:	e843 2100 	strex	r1, r2, [r3]
    9710:	2900      	cmp	r1, #0
    9712:	d1f7      	bne.n	9704 <ev_dma_epin3_handler+0x48>
    9714:	f3bf 8f5b 	dmb	ish
    9718:	bd08      	pop	{r3, pc}
    971a:	bf00      	nop
    971c:	40027c1c 	.word	0x40027c1c
    9720:	20002b54 	.word	0x20002b54
    9724:	200024d0 	.word	0x200024d0
    9728:	2000245c 	.word	0x2000245c

0000972c <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    972c:	b508      	push	{r3, lr}
    972e:	f7ff fbcf 	bl	8ed0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9732:	b110      	cbz	r0, 973a <ev_dma_epin4_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    9734:	4b15      	ldr	r3, [pc, #84]	; (978c <ev_dma_epin4_handler+0x60>)
    9736:	2200      	movs	r2, #0
    9738:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    973a:	4b15      	ldr	r3, [pc, #84]	; (9790 <ev_dma_epin4_handler+0x64>)
    973c:	2200      	movs	r2, #0
    973e:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9740:	4b14      	ldr	r3, [pc, #80]	; (9794 <ev_dma_epin4_handler+0x68>)
    9742:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
    9746:	2b03      	cmp	r3, #3
    9748:	d011      	beq.n	976e <ev_dma_epin4_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    974a:	4b12      	ldr	r3, [pc, #72]	; (9794 <ev_dma_epin4_handler+0x68>)
    974c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    9750:	b9d3      	cbnz	r3, 9788 <ev_dma_epin4_handler+0x5c>
    9752:	4b11      	ldr	r3, [pc, #68]	; (9798 <ev_dma_epin4_handler+0x6c>)
    9754:	f3bf 8f5b 	dmb	ish
    9758:	e853 2f00 	ldrex	r2, [r3]
    975c:	f022 0210 	bic.w	r2, r2, #16
    9760:	e843 2100 	strex	r1, r2, [r3]
    9764:	2900      	cmp	r1, #0
    9766:	d1f7      	bne.n	9758 <ev_dma_epin4_handler+0x2c>
    9768:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    976c:	e00c      	b.n	9788 <ev_dma_epin4_handler+0x5c>
    976e:	4b0a      	ldr	r3, [pc, #40]	; (9798 <ev_dma_epin4_handler+0x6c>)
    9770:	f3bf 8f5b 	dmb	ish
    9774:	e853 2f00 	ldrex	r2, [r3]
    9778:	f022 0210 	bic.w	r2, r2, #16
    977c:	e843 2100 	strex	r1, r2, [r3]
    9780:	2900      	cmp	r1, #0
    9782:	d1f7      	bne.n	9774 <ev_dma_epin4_handler+0x48>
    9784:	f3bf 8f5b 	dmb	ish
    9788:	bd08      	pop	{r3, pc}
    978a:	bf00      	nop
    978c:	40027c1c 	.word	0x40027c1c
    9790:	20002b54 	.word	0x20002b54
    9794:	200024d0 	.word	0x200024d0
    9798:	2000245c 	.word	0x2000245c

0000979c <nrfx_usbd_isoinconfig_set>:
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    979c:	4b01      	ldr	r3, [pc, #4]	; (97a4 <nrfx_usbd_isoinconfig_set+0x8>)
    979e:	f8c3 0530 	str.w	r0, [r3, #1328]	; 0x530
}
    97a2:	4770      	bx	lr
    97a4:	40027000 	.word	0x40027000

000097a8 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
    97a8:	2300      	movs	r3, #0
    97aa:	4a02      	ldr	r2, [pc, #8]	; (97b4 <nrfx_usbd_uninit+0xc>)
    97ac:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    97ae:	4a02      	ldr	r2, [pc, #8]	; (97b8 <nrfx_usbd_uninit+0x10>)
    97b0:	7013      	strb	r3, [r2, #0]
    return;
}
    97b2:	4770      	bx	lr
    97b4:	200025f0 	.word	0x200025f0
    97b8:	20002b55 	.word	0x20002b55

000097bc <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
    97bc:	b510      	push	{r4, lr}
    p_reg->EVENTCAUSE = flags;
    97be:	4b41      	ldr	r3, [pc, #260]	; (98c4 <nrfx_usbd_enable+0x108>)
    97c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
    97c4:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    97c8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    /* Prepare for READY event receiving */
    nrf_usbd_eventcause_clear(NRF_USBD, NRF_USBD_EVENTCAUSE_READY_MASK);

    usbd_enable();
    97cc:	f7ff fc26 	bl	901c <usbd_enable>
}

/* Errata: Unexpected behavior after reset. **/
static inline bool nrfx_usbd_errata_223(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_223();
    97d0:	f008 fdb7 	bl	12342 <nrf52_errata_223>

    if (nrfx_usbd_errata_223() && m_first_enable)
    97d4:	b118      	cbz	r0, 97de <nrfx_usbd_enable+0x22>
    97d6:	4b3c      	ldr	r3, [pc, #240]	; (98c8 <nrfx_usbd_enable+0x10c>)
    97d8:	781b      	ldrb	r3, [r3, #0]
    97da:	2b00      	cmp	r3, #0
    97dc:	d15f      	bne.n	989e <nrfx_usbd_enable+0xe2>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    97de:	f7ff fb63 	bl	8ea8 <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    97e2:	b1b8      	cbz	r0, 9814 <nrfx_usbd_enable+0x58>
	__asm__ volatile(
    97e4:	f04f 0220 	mov.w	r2, #32
    97e8:	f3ef 8311 	mrs	r3, BASEPRI
    97ec:	f382 8812 	msr	BASEPRI_MAX, r2
    97f0:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    97f4:	4a35      	ldr	r2, [pc, #212]	; (98cc <nrfx_usbd_enable+0x110>)
    97f6:	6812      	ldr	r2, [r2, #0]
    97f8:	2a00      	cmp	r2, #0
    97fa:	d15b      	bne.n	98b4 <nrfx_usbd_enable+0xf8>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    97fc:	4a33      	ldr	r2, [pc, #204]	; (98cc <nrfx_usbd_enable+0x110>)
    97fe:	f249 3175 	movw	r1, #37749	; 0x9375
    9802:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    9804:	4832      	ldr	r0, [pc, #200]	; (98d0 <nrfx_usbd_enable+0x114>)
    9806:	2403      	movs	r4, #3
    9808:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    980a:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    980c:	f383 8811 	msr	BASEPRI, r3
    9810:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_166();
    9814:	f7ff fb34 	bl	8e80 <nrf52_errata_166>
#endif
    {
        usbd_errata_187_211_begin();
    }

    if (nrfx_usbd_errata_166())
    9818:	b150      	cbz	r0, 9830 <nrfx_usbd_enable+0x74>
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
    981a:	4b2e      	ldr	r3, [pc, #184]	; (98d4 <nrfx_usbd_enable+0x118>)
    981c:	f240 72e3 	movw	r2, #2019	; 0x7e3
    9820:	601a      	str	r2, [r3, #0]
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
    9822:	3304      	adds	r3, #4
    9824:	2240      	movs	r2, #64	; 0x40
    9826:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
    9828:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    982c:	f3bf 8f4f 	dsb	sy
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    9830:	4b24      	ldr	r3, [pc, #144]	; (98c4 <nrfx_usbd_enable+0x108>)
    9832:	2280      	movs	r2, #128	; 0x80
    9834:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_ZERODATA);
    }
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    9838:	2000      	movs	r0, #0
    983a:	f7ff ffaf 	bl	979c <nrfx_usbd_isoinconfig_set>
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    983e:	4b26      	ldr	r3, [pc, #152]	; (98d8 <nrfx_usbd_enable+0x11c>)
    9840:	f240 12ff 	movw	r2, #511	; 0x1ff
    9844:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
    9846:	4b25      	ldr	r3, [pc, #148]	; (98dc <nrfx_usbd_enable+0x120>)
    9848:	2200      	movs	r2, #0
    984a:	601a      	str	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
    984c:	f7ff fb40 	bl	8ed0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9850:	b110      	cbz	r0, 9858 <nrfx_usbd_enable+0x9c>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    9852:	4b23      	ldr	r3, [pc, #140]	; (98e0 <nrfx_usbd_enable+0x124>)
    9854:	2200      	movs	r2, #0
    9856:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    9858:	2300      	movs	r3, #0
    985a:	4a22      	ldr	r2, [pc, #136]	; (98e4 <nrfx_usbd_enable+0x128>)
    985c:	7013      	strb	r3, [r2, #0]
    usbd_dma_pending_clear();
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    985e:	4a22      	ldr	r2, [pc, #136]	; (98e8 <nrfx_usbd_enable+0x12c>)
    9860:	7013      	strb	r3, [r2, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    9862:	4b22      	ldr	r3, [pc, #136]	; (98ec <nrfx_usbd_enable+0x130>)
    9864:	2202      	movs	r2, #2
    9866:	701a      	strb	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    9868:	f7ff fb1e 	bl	8ea8 <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    986c:	b1b0      	cbz	r0, 989c <nrfx_usbd_enable+0xe0>
	__asm__ volatile(
    986e:	f04f 0220 	mov.w	r2, #32
    9872:	f3ef 8311 	mrs	r3, BASEPRI
    9876:	f382 8812 	msr	BASEPRI_MAX, r2
    987a:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    987e:	4a13      	ldr	r2, [pc, #76]	; (98cc <nrfx_usbd_enable+0x110>)
    9880:	6812      	ldr	r2, [r2, #0]
    9882:	b9da      	cbnz	r2, 98bc <nrfx_usbd_enable+0x100>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9884:	4a11      	ldr	r2, [pc, #68]	; (98cc <nrfx_usbd_enable+0x110>)
    9886:	f249 3175 	movw	r1, #37749	; 0x9375
    988a:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    988c:	4810      	ldr	r0, [pc, #64]	; (98d0 <nrfx_usbd_enable+0x114>)
    988e:	2400      	movs	r4, #0
    9890:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9892:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    9894:	f383 8811 	msr	BASEPRI, r3
    9898:	f3bf 8f6f 	isb	sy
#endif
    {
        usbd_errata_187_211_end();
    }
}
    989c:	bd10      	pop	{r4, pc}
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    989e:	4b09      	ldr	r3, [pc, #36]	; (98c4 <nrfx_usbd_enable+0x108>)
    98a0:	2400      	movs	r4, #0
    98a2:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    98a6:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
         usbd_enable();
    98aa:	f7ff fbb7 	bl	901c <usbd_enable>
         m_first_enable = false;
    98ae:	4b06      	ldr	r3, [pc, #24]	; (98c8 <nrfx_usbd_enable+0x10c>)
    98b0:	701c      	strb	r4, [r3, #0]
    98b2:	e794      	b.n	97de <nrfx_usbd_enable+0x22>
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    98b4:	4a06      	ldr	r2, [pc, #24]	; (98d0 <nrfx_usbd_enable+0x114>)
    98b6:	2103      	movs	r1, #3
    98b8:	6011      	str	r1, [r2, #0]
    98ba:	e7a7      	b.n	980c <nrfx_usbd_enable+0x50>
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    98bc:	4a04      	ldr	r2, [pc, #16]	; (98d0 <nrfx_usbd_enable+0x114>)
    98be:	2100      	movs	r1, #0
    98c0:	6011      	str	r1, [r2, #0]
    98c2:	e7e7      	b.n	9894 <nrfx_usbd_enable+0xd8>
    98c4:	40027000 	.word	0x40027000
    98c8:	200002c8 	.word	0x200002c8
    98cc:	4006ec00 	.word	0x4006ec00
    98d0:	4006ed14 	.word	0x4006ed14
    98d4:	40027800 	.word	0x40027800
    98d8:	200024cc 	.word	0x200024cc
    98dc:	2000245c 	.word	0x2000245c
    98e0:	40027c1c 	.word	0x40027c1c
    98e4:	20002b54 	.word	0x20002b54
    98e8:	20002b56 	.word	0x20002b56
    98ec:	20002b55 	.word	0x20002b55

000098f0 <nrfx_usbd_start>:
    }
#endif
}

void nrfx_usbd_start(bool enable_sof)
{
    98f0:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
    98f2:	4b09      	ldr	r3, [pc, #36]	; (9918 <nrfx_usbd_start+0x28>)
    98f4:	2200      	movs	r2, #0
    98f6:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_ENDEPOUT0_MASK    |
       NRF_USBD_INT_USBEVENT_MASK     |
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof)
    98f8:	b960      	cbnz	r0, 9914 <nrfx_usbd_start+0x24>
    uint32_t ints_to_enable =
    98fa:	4b08      	ldr	r3, [pc, #32]	; (991c <nrfx_usbd_start+0x2c>)
    p_reg->INTENSET = mask;
    98fc:	4c08      	ldr	r4, [pc, #32]	; (9920 <nrfx_usbd_start+0x30>)
    98fe:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    9902:	2027      	movs	r0, #39	; 0x27
    9904:	f7fa fb3c 	bl	3f80 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    9908:	2301      	movs	r3, #1
    990a:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    990e:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
    9912:	bd10      	pop	{r4, pc}
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
    9914:	4b03      	ldr	r3, [pc, #12]	; (9924 <nrfx_usbd_start+0x34>)
    9916:	e7f1      	b.n	98fc <nrfx_usbd_start+0xc>
    9918:	20002b53 	.word	0x20002b53
    991c:	01c01407 	.word	0x01c01407
    9920:	40027000 	.word	0x40027000
    9924:	01e01407 	.word	0x01e01407

00009928 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    9928:	4b03      	ldr	r3, [pc, #12]	; (9938 <nrfx_usbd_is_enabled+0x10>)
    992a:	7818      	ldrb	r0, [r3, #0]
}
    992c:	2801      	cmp	r0, #1
    992e:	bf94      	ite	ls
    9930:	2000      	movls	r0, #0
    9932:	2001      	movhi	r0, #1
    9934:	4770      	bx	lr
    9936:	bf00      	nop
    9938:	20002b55 	.word	0x20002b55

0000993c <nrfx_usbd_ep_max_packet_size_set>:
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    993c:	f010 0f80 	tst.w	r0, #128	; 0x80
    9940:	d106      	bne.n	9950 <nrfx_usbd_ep_max_packet_size_set+0x14>
    9942:	4b04      	ldr	r3, [pc, #16]	; (9954 <nrfx_usbd_ep_max_packet_size_set+0x18>)
        NRF_USBD_EP_NR_GET(ep));
    9944:	f000 000f 	and.w	r0, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9948:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    /* Packet size cannot be higher than maximum buffer size */
    NRFX_ASSERT((NRF_USBD_EPISO_CHECK(ep) && (size <= usbd_ep_iso_capacity(ep))) ||
                (!NRF_USBD_EPISO_CHECK(ep) && (size <= NRFX_USBD_EPSIZE)));

    usbd_ep_state_t * p_state = ep_state_access(ep);
    p_state->max_packet_size = size;
    994c:	8181      	strh	r1, [r0, #12]
}
    994e:	4770      	bx	lr
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9950:	4b01      	ldr	r3, [pc, #4]	; (9958 <nrfx_usbd_ep_max_packet_size_set+0x1c>)
    9952:	e7f7      	b.n	9944 <nrfx_usbd_ep_max_packet_size_set+0x8>
    9954:	200024d0 	.word	0x200024d0
    9958:	20002560 	.word	0x20002560

0000995c <nrfx_usbd_init>:
{
    995c:	b570      	push	{r4, r5, r6, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    995e:	4b25      	ldr	r3, [pc, #148]	; (99f4 <nrfx_usbd_init+0x98>)
    9960:	781c      	ldrb	r4, [r3, #0]
    9962:	2c00      	cmp	r4, #0
    9964:	d144      	bne.n	99f0 <nrfx_usbd_init+0x94>
    m_event_handler = event_handler;
    9966:	4b24      	ldr	r3, [pc, #144]	; (99f8 <nrfx_usbd_init+0x9c>)
    9968:	6018      	str	r0, [r3, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    996a:	4b22      	ldr	r3, [pc, #136]	; (99f4 <nrfx_usbd_init+0x98>)
    996c:	2201      	movs	r2, #1
    996e:	701a      	strb	r2, [r3, #0]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    9970:	4625      	mov	r5, r4
    9972:	e012      	b.n	999a <nrfx_usbd_init+0x3e>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    9974:	2140      	movs	r1, #64	; 0x40
    9976:	4630      	mov	r0, r6
    9978:	f7ff ffe0 	bl	993c <nrfx_usbd_ep_max_packet_size_set>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    997c:	f016 0f80 	tst.w	r6, #128	; 0x80
    9980:	d115      	bne.n	99ae <nrfx_usbd_init+0x52>
    9982:	491e      	ldr	r1, [pc, #120]	; (99fc <nrfx_usbd_init+0xa0>)
        NRF_USBD_EP_NR_GET(ep));
    9984:	f005 030f 	and.w	r3, r5, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9988:	0118      	lsls	r0, r3, #4
    998a:	eb01 1303 	add.w	r3, r1, r3, lsl #4
        p_state->status = NRFX_USBD_EP_OK;
    998e:	2200      	movs	r2, #0
    9990:	739a      	strb	r2, [r3, #14]
        p_state->handler.feeder = NULL;
    9992:	500a      	str	r2, [r1, r0]
        p_state->transfer_cnt = 0;
    9994:	609a      	str	r2, [r3, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    9996:	3501      	adds	r5, #1
    9998:	b2ed      	uxtb	r5, r5
    999a:	2d08      	cmp	r5, #8
    999c:	d81c      	bhi.n	99d8 <nrfx_usbd_init+0x7c>
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    999e:	f045 0680 	orr.w	r6, r5, #128	; 0x80
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    99a2:	f015 0f08 	tst.w	r5, #8
    99a6:	d0e5      	beq.n	9974 <nrfx_usbd_init+0x18>
    99a8:	f240 11ff 	movw	r1, #511	; 0x1ff
    99ac:	e7e3      	b.n	9976 <nrfx_usbd_init+0x1a>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    99ae:	4914      	ldr	r1, [pc, #80]	; (9a00 <nrfx_usbd_init+0xa4>)
    99b0:	e7e8      	b.n	9984 <nrfx_usbd_init+0x28>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    99b2:	2140      	movs	r1, #64	; 0x40
    99b4:	4620      	mov	r0, r4
    99b6:	f7ff ffc1 	bl	993c <nrfx_usbd_ep_max_packet_size_set>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    99ba:	f014 0f80 	tst.w	r4, #128	; 0x80
    99be:	d113      	bne.n	99e8 <nrfx_usbd_init+0x8c>
    99c0:	490e      	ldr	r1, [pc, #56]	; (99fc <nrfx_usbd_init+0xa0>)
        NRF_USBD_EP_NR_GET(ep));
    99c2:	f004 030f 	and.w	r3, r4, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    99c6:	0118      	lsls	r0, r3, #4
    99c8:	eb01 1303 	add.w	r3, r1, r3, lsl #4
        p_state->status = NRFX_USBD_EP_OK;
    99cc:	2200      	movs	r2, #0
    99ce:	739a      	strb	r2, [r3, #14]
        p_state->handler.consumer = NULL;
    99d0:	500a      	str	r2, [r1, r0]
        p_state->transfer_cnt = 0;
    99d2:	609a      	str	r2, [r3, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    99d4:	3401      	adds	r4, #1
    99d6:	b2e4      	uxtb	r4, r4
    99d8:	2c08      	cmp	r4, #8
    99da:	d807      	bhi.n	99ec <nrfx_usbd_init+0x90>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    99dc:	f014 0f08 	tst.w	r4, #8
    99e0:	d0e7      	beq.n	99b2 <nrfx_usbd_init+0x56>
    99e2:	f240 11ff 	movw	r1, #511	; 0x1ff
    99e6:	e7e5      	b.n	99b4 <nrfx_usbd_init+0x58>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    99e8:	4905      	ldr	r1, [pc, #20]	; (9a00 <nrfx_usbd_init+0xa4>)
    99ea:	e7ea      	b.n	99c2 <nrfx_usbd_init+0x66>
    return NRFX_SUCCESS;
    99ec:	4805      	ldr	r0, [pc, #20]	; (9a04 <nrfx_usbd_init+0xa8>)
}
    99ee:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_INVALID_STATE;
    99f0:	4805      	ldr	r0, [pc, #20]	; (9a08 <nrfx_usbd_init+0xac>)
    99f2:	e7fc      	b.n	99ee <nrfx_usbd_init+0x92>
    99f4:	20002b55 	.word	0x20002b55
    99f8:	200025f0 	.word	0x200025f0
    99fc:	200024d0 	.word	0x200024d0
    9a00:	20002560 	.word	0x20002560
    9a04:	0bad0000 	.word	0x0bad0000
    9a08:	0bad0005 	.word	0x0bad0005

00009a0c <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    9a0c:	b4f0      	push	{r4, r5, r6, r7}
    return NRFX_USBD_EP_BITPOS(ep);
    9a0e:	b242      	sxtb	r2, r0
    9a10:	2a00      	cmp	r2, #0
    9a12:	db14      	blt.n	9a3e <nrfx_usbd_ep_transfer+0x32>
    9a14:	2410      	movs	r4, #16
    9a16:	f002 030f 	and.w	r3, r2, #15
    9a1a:	441c      	add	r4, r3
	__asm__ volatile(
    9a1c:	f04f 0320 	mov.w	r3, #32
    9a20:	f3ef 8511 	mrs	r5, BASEPRI
    9a24:	f383 8812 	msr	BASEPRI_MAX, r3
    9a28:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    9a2c:	f010 070f 	ands.w	r7, r0, #15
    9a30:	d107      	bne.n	9a42 <nrfx_usbd_ep_transfer+0x36>
    9a32:	4b2f      	ldr	r3, [pc, #188]	; (9af0 <nrfx_usbd_ep_transfer+0xe4>)
    9a34:	781b      	ldrb	r3, [r3, #0]
    9a36:	4283      	cmp	r3, r0
    9a38:	d003      	beq.n	9a42 <nrfx_usbd_ep_transfer+0x36>
    {
        ret = NRFX_ERROR_INVALID_ADDR;
    9a3a:	482e      	ldr	r0, [pc, #184]	; (9af4 <nrfx_usbd_ep_transfer+0xe8>)
    9a3c:	e051      	b.n	9ae2 <nrfx_usbd_ep_transfer+0xd6>
    return NRFX_USBD_EP_BITPOS(ep);
    9a3e:	2400      	movs	r4, #0
    9a40:	e7e9      	b.n	9a16 <nrfx_usbd_ep_transfer+0xa>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    9a42:	4b2d      	ldr	r3, [pc, #180]	; (9af8 <nrfx_usbd_ep_transfer+0xec>)
    9a44:	681b      	ldr	r3, [r3, #0]
    9a46:	43db      	mvns	r3, r3
    9a48:	b29b      	uxth	r3, r3
    9a4a:	482c      	ldr	r0, [pc, #176]	; (9afc <nrfx_usbd_ep_transfer+0xf0>)
    9a4c:	6800      	ldr	r0, [r0, #0]
    9a4e:	4303      	orrs	r3, r0
    9a50:	2001      	movs	r0, #1
    9a52:	fa00 f404 	lsl.w	r4, r0, r4
    9a56:	4223      	tst	r3, r4
    9a58:	d142      	bne.n	9ae0 <nrfx_usbd_ep_transfer+0xd4>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9a5a:	2a00      	cmp	r2, #0
    9a5c:	db1f      	blt.n	9a9e <nrfx_usbd_ep_transfer+0x92>
    9a5e:	4828      	ldr	r0, [pc, #160]	; (9b00 <nrfx_usbd_ep_transfer+0xf4>)
    9a60:	ea4f 1c07 	mov.w	ip, r7, lsl #4
    9a64:	eb00 1607 	add.w	r6, r0, r7, lsl #4
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
    9a68:	2a00      	cmp	r2, #0
    9a6a:	db1a      	blt.n	9aa2 <nrfx_usbd_ep_transfer+0x96>
                }
            }
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    9a6c:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    9a70:	4a24      	ldr	r2, [pc, #144]	; (9b04 <nrfx_usbd_ep_transfer+0xf8>)
    9a72:	eb02 0383 	add.w	r3, r2, r3, lsl #2
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
    9a76:	4a24      	ldr	r2, [pc, #144]	; (9b08 <nrfx_usbd_ep_transfer+0xfc>)
    9a78:	f840 200c 	str.w	r2, [r0, ip]
        }
        *p_context = *p_transfer;
    9a7c:	c907      	ldmia	r1, {r0, r1, r2}
    9a7e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
    9a82:	6073      	str	r3, [r6, #4]

        p_state->transfer_cnt = 0;
    9a84:	2300      	movs	r3, #0
    9a86:	60b3      	str	r3, [r6, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    9a88:	73b3      	strb	r3, [r6, #14]
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    9a8a:	4a1c      	ldr	r2, [pc, #112]	; (9afc <nrfx_usbd_ep_transfer+0xf0>)
    9a8c:	6813      	ldr	r3, [r2, #0]
    9a8e:	431c      	orrs	r4, r3
    9a90:	6014      	str	r4, [r2, #0]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9a92:	4b1e      	ldr	r3, [pc, #120]	; (9b0c <nrfx_usbd_ep_transfer+0x100>)
    9a94:	2280      	movs	r2, #128	; 0x80
    9a96:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        ret = NRFX_SUCCESS;
    9a9a:	481d      	ldr	r0, [pc, #116]	; (9b10 <nrfx_usbd_ep_transfer+0x104>)
}
    9a9c:	e021      	b.n	9ae2 <nrfx_usbd_ep_transfer+0xd6>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9a9e:	481d      	ldr	r0, [pc, #116]	; (9b14 <nrfx_usbd_ep_transfer+0x108>)
    9aa0:	e7de      	b.n	9a60 <nrfx_usbd_ep_transfer+0x54>
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    9aa2:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    9aa6:	4a1c      	ldr	r2, [pc, #112]	; (9b18 <nrfx_usbd_ep_transfer+0x10c>)
    9aa8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    9aac:	680a      	ldr	r2, [r1, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    9aae:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
    9ab2:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    9ab6:	d006      	beq.n	9ac6 <nrfx_usbd_ep_transfer+0xba>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    9ab8:	688a      	ldr	r2, [r1, #8]
    9aba:	f012 0f01 	tst.w	r2, #1
    9abe:	d10c      	bne.n	9ada <nrfx_usbd_ep_transfer+0xce>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
    9ac0:	4a16      	ldr	r2, [pc, #88]	; (9b1c <nrfx_usbd_ep_transfer+0x110>)
    9ac2:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
    9ac4:	e7da      	b.n	9a7c <nrfx_usbd_ep_transfer+0x70>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    9ac6:	688a      	ldr	r2, [r1, #8]
    9ac8:	f012 0f01 	tst.w	r2, #1
    9acc:	d102      	bne.n	9ad4 <nrfx_usbd_ep_transfer+0xc8>
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
    9ace:	4a14      	ldr	r2, [pc, #80]	; (9b20 <nrfx_usbd_ep_transfer+0x114>)
    9ad0:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
    9ad2:	e7d3      	b.n	9a7c <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
    9ad4:	4a13      	ldr	r2, [pc, #76]	; (9b24 <nrfx_usbd_ep_transfer+0x118>)
    9ad6:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
    9ad8:	e7d0      	b.n	9a7c <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
    9ada:	4a13      	ldr	r2, [pc, #76]	; (9b28 <nrfx_usbd_ep_transfer+0x11c>)
    9adc:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
    9ade:	e7cd      	b.n	9a7c <nrfx_usbd_ep_transfer+0x70>
        ret = NRFX_ERROR_BUSY;
    9ae0:	4812      	ldr	r0, [pc, #72]	; (9b2c <nrfx_usbd_ep_transfer+0x120>)
	__asm__ volatile(
    9ae2:	f385 8811 	msr	BASEPRI, r5
    9ae6:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    9aea:	bcf0      	pop	{r4, r5, r6, r7}
    9aec:	4770      	bx	lr
    9aee:	bf00      	nop
    9af0:	20002b56 	.word	0x20002b56
    9af4:	0bad000a 	.word	0x0bad000a
    9af8:	200024cc 	.word	0x200024cc
    9afc:	2000245c 	.word	0x2000245c
    9b00:	200024d0 	.word	0x200024d0
    9b04:	200023f0 	.word	0x200023f0
    9b08:	00012347 	.word	0x00012347
    9b0c:	e000e100 	.word	0xe000e100
    9b10:	0bad0000 	.word	0x0bad0000
    9b14:	20002560 	.word	0x20002560
    9b18:	20002460 	.word	0x20002460
    9b1c:	000123d9 	.word	0x000123d9
    9b20:	0001237d 	.word	0x0001237d
    9b24:	0001239f 	.word	0x0001239f
    9b28:	00012417 	.word	0x00012417
    9b2c:	0bad000b 	.word	0x0bad000b

00009b30 <nrfx_usbd_feeder_buffer_get>:
}

void * nrfx_usbd_feeder_buffer_get(void)
{
    return m_tx_buffer;
}
    9b30:	4800      	ldr	r0, [pc, #0]	; (9b34 <nrfx_usbd_feeder_buffer_get+0x4>)
    9b32:	4770      	bx	lr
    9b34:	200025f4 	.word	0x200025f4

00009b38 <nrfx_usbd_ep_status_get>:

nrfx_usbd_ep_status_t nrfx_usbd_ep_status_get(nrfx_usbd_ep_t ep, size_t * p_size)
{
    9b38:	b430      	push	{r4, r5}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9b3a:	f010 0f80 	tst.w	r0, #128	; 0x80
    9b3e:	d118      	bne.n	9b72 <nrfx_usbd_ep_status_get+0x3a>
    9b40:	4b0e      	ldr	r3, [pc, #56]	; (9b7c <nrfx_usbd_ep_status_get+0x44>)
        NRF_USBD_EP_NR_GET(ep));
    9b42:	f000 000f 	and.w	r0, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9b46:	0104      	lsls	r4, r0, #4
    9b48:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	__asm__ volatile(
    9b4c:	f04f 0520 	mov.w	r5, #32
    9b50:	f3ef 8211 	mrs	r2, BASEPRI
    9b54:	f385 8812 	msr	BASEPRI_MAX, r5
    9b58:	f3bf 8f6f 	isb	sy
    nrfx_usbd_ep_status_t ret;

    usbd_ep_state_t const * p_state = ep_state_access(ep);
    NRFX_CRITICAL_SECTION_ENTER();
    *p_size = p_state->transfer_cnt;
    9b5c:	6885      	ldr	r5, [r0, #8]
    9b5e:	600d      	str	r5, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    9b60:	591b      	ldr	r3, [r3, r4]
    9b62:	b143      	cbz	r3, 9b76 <nrfx_usbd_ep_status_get+0x3e>
    9b64:	2004      	movs	r0, #4
	__asm__ volatile(
    9b66:	f382 8811 	msr	BASEPRI, r2
    9b6a:	f3bf 8f6f 	isb	sy
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    9b6e:	bc30      	pop	{r4, r5}
    9b70:	4770      	bx	lr
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9b72:	4b03      	ldr	r3, [pc, #12]	; (9b80 <nrfx_usbd_ep_status_get+0x48>)
    9b74:	e7e5      	b.n	9b42 <nrfx_usbd_ep_status_get+0xa>
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    9b76:	7b80      	ldrb	r0, [r0, #14]
    9b78:	e7f5      	b.n	9b66 <nrfx_usbd_ep_status_get+0x2e>
    9b7a:	bf00      	nop
    9b7c:	200024d0 	.word	0x200024d0
    9b80:	20002560 	.word	0x20002560

00009b84 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
    9b84:	f010 0f08 	tst.w	r0, #8
    9b88:	d107      	bne.n	9b9a <nrfx_usbd_epout_size_get+0x16>
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    9b8a:	f000 000f 	and.w	r0, r0, #15
    9b8e:	f500 7094 	add.w	r0, r0, #296	; 0x128
    9b92:	4b06      	ldr	r3, [pc, #24]	; (9bac <nrfx_usbd_epout_size_get+0x28>)
    9b94:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    9b98:	4770      	bx	lr
        size_t size_isoout = p_reg->SIZE.ISOOUT;
    9b9a:	4b04      	ldr	r3, [pc, #16]	; (9bac <nrfx_usbd_epout_size_get+0x28>)
    9b9c:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
        if ((size_isoout & USBD_SIZE_ISOOUT_ZERO_Msk) ==
    9ba0:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    9ba4:	d100      	bne.n	9ba8 <nrfx_usbd_epout_size_get+0x24>
    9ba6:	4770      	bx	lr
            size_isoout = 0;
    9ba8:	2000      	movs	r0, #0

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
    9baa:	4770      	bx	lr
    9bac:	40027000 	.word	0x40027000

00009bb0 <usbd_dmareq_process>:
    if (!m_dma_pending)
    9bb0:	4b6d      	ldr	r3, [pc, #436]	; (9d68 <usbd_dmareq_process+0x1b8>)
    9bb2:	781b      	ldrb	r3, [r3, #0]
    9bb4:	2b00      	cmp	r3, #0
    9bb6:	f040 80d5 	bne.w	9d64 <usbd_dmareq_process+0x1b4>
{
    9bba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9bbe:	b085      	sub	sp, #20
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    9bc0:	4b6a      	ldr	r3, [pc, #424]	; (9d6c <usbd_dmareq_process+0x1bc>)
    9bc2:	681b      	ldr	r3, [r3, #0]
    9bc4:	4a6a      	ldr	r2, [pc, #424]	; (9d70 <usbd_dmareq_process+0x1c0>)
    9bc6:	6810      	ldr	r0, [r2, #0]
    9bc8:	4003      	ands	r3, r0
    9bca:	f000 80c8 	beq.w	9d5e <usbd_dmareq_process+0x1ae>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    9bce:	f013 2001 	ands.w	r0, r3, #16777472	; 0x1000100
    9bd2:	d05a      	beq.n	9c8a <usbd_dmareq_process+0xda>
                pos = usbd_dma_scheduler_algorithm(req & USBD_EPISO_BIT_MASK);
    9bd4:	f008 fbf8 	bl	123c8 <usbd_dma_scheduler_algorithm>
    9bd8:	4680      	mov	r8, r0
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9bda:	f1b8 0f0f 	cmp.w	r8, #15
    9bde:	d959      	bls.n	9c94 <usbd_dmareq_process+0xe4>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    9be0:	f1a8 0610 	sub.w	r6, r8, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9be4:	b2f6      	uxtb	r6, r6
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9be6:	b274      	sxtb	r4, r6
    9be8:	2c00      	cmp	r4, #0
    9bea:	db57      	blt.n	9c9c <usbd_dmareq_process+0xec>
    9bec:	f8df a19c 	ldr.w	sl, [pc, #412]	; 9d8c <usbd_dmareq_process+0x1dc>
    9bf0:	f006 070f 	and.w	r7, r6, #15
        NRF_USBD_EP_NR_GET(ep));
    9bf4:	463d      	mov	r5, r7
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9bf6:	ea4f 1b07 	mov.w	fp, r7, lsl #4
    9bfa:	eb0a 1907 	add.w	r9, sl, r7, lsl #4
            if (NRF_USBD_EPIN_CHECK(ep))
    9bfe:	2c00      	cmp	r4, #0
    9c00:	db4f      	blt.n	9ca2 <usbd_dmareq_process+0xf2>
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    9c02:	4630      	mov	r0, r6
    9c04:	f7ff ffbe 	bl	9b84 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
    9c08:	f85a a00b 	ldr.w	sl, [sl, fp]
    9c0c:	4683      	mov	fp, r0
    9c0e:	4603      	mov	r3, r0
    9c10:	f8b9 200c 	ldrh.w	r2, [r9, #12]
    9c14:	f8d9 1004 	ldr.w	r1, [r9, #4]
    9c18:	a802      	add	r0, sp, #8
    9c1a:	47d0      	blx	sl
                if (transfer.p_data.rx == NULL)
    9c1c:	9b02      	ldr	r3, [sp, #8]
    9c1e:	b113      	cbz	r3, 9c26 <usbd_dmareq_process+0x76>
                else if (transfer.size < rx_size)
    9c20:	9b03      	ldr	r3, [sp, #12]
    9c22:	455b      	cmp	r3, fp
    9c24:	d34b      	bcc.n	9cbe <usbd_dmareq_process+0x10e>
                if (!continue_transfer)
    9c26:	b910      	cbnz	r0, 9c2e <usbd_dmareq_process+0x7e>
                    p_state->handler.consumer = NULL;
    9c28:	2300      	movs	r3, #0
    9c2a:	f8c9 3000 	str.w	r3, [r9]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
    9c2e:	f7ff f94f 	bl	8ed0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9c32:	b110      	cbz	r0, 9c3a <usbd_dmareq_process+0x8a>
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
    9c34:	4b4f      	ldr	r3, [pc, #316]	; (9d74 <usbd_dmareq_process+0x1c4>)
    9c36:	2282      	movs	r2, #130	; 0x82
    9c38:	601a      	str	r2, [r3, #0]
    m_dma_pending = true;
    9c3a:	2001      	movs	r0, #1
    9c3c:	4b4a      	ldr	r3, [pc, #296]	; (9d68 <usbd_dmareq_process+0x1b8>)
    9c3e:	7018      	strb	r0, [r3, #0]
            m_ep_ready &= ~(1U << pos);
    9c40:	fa00 f008 	lsl.w	r0, r0, r8
    9c44:	4a4a      	ldr	r2, [pc, #296]	; (9d70 <usbd_dmareq_process+0x1c0>)
    9c46:	6813      	ldr	r3, [r2, #0]
    9c48:	ea23 0000 	bic.w	r0, r3, r0
    9c4c:	6010      	str	r0, [r2, #0]
            p_state->transfer_cnt += transfer.size;
    9c4e:	9a03      	ldr	r2, [sp, #12]
    9c50:	f8d9 3008 	ldr.w	r3, [r9, #8]
    9c54:	4413      	add	r3, r2
    9c56:	f8c9 3008 	str.w	r3, [r9, #8]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
    9c5a:	9b02      	ldr	r3, [sp, #8]
    if (NRF_USBD_EPIN_CHECK(ep))
    9c5c:	2c00      	cmp	r4, #0
    9c5e:	db4f      	blt.n	9d00 <usbd_dmareq_process+0x150>
        if (NRF_USBD_EPISO_CHECK(ep))
    9c60:	f016 0f08 	tst.w	r6, #8
    9c64:	d05f      	beq.n	9d26 <usbd_dmareq_process+0x176>
            p_reg->ISOOUT.PTR    = ptr;
    9c66:	4944      	ldr	r1, [pc, #272]	; (9d78 <usbd_dmareq_process+0x1c8>)
    9c68:	f8c1 37a0 	str.w	r3, [r1, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
    9c6c:	f8c1 27a4 	str.w	r2, [r1, #1956]	; 0x7a4
    return (nrf_usbd_task_t)(
    9c70:	2c00      	cmp	r4, #0
    9c72:	db62      	blt.n	9d3a <usbd_dmareq_process+0x18a>
    9c74:	2328      	movs	r3, #40	; 0x28
    9c76:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    9c7a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
    9c7e:	f507 371c 	add.w	r7, r7, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    9c82:	2301      	movs	r3, #1
    9c84:	603b      	str	r3, [r7, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    9c86:	683b      	ldr	r3, [r7, #0]
}
    9c88:	e065      	b.n	9d56 <usbd_dmareq_process+0x1a6>
                pos = usbd_dma_scheduler_algorithm(req);
    9c8a:	4618      	mov	r0, r3
    9c8c:	f008 fb9c 	bl	123c8 <usbd_dma_scheduler_algorithm>
    9c90:	4680      	mov	r8, r0
    9c92:	e7a2      	b.n	9bda <usbd_dmareq_process+0x2a>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9c94:	f068 067f 	orn	r6, r8, #127	; 0x7f
    9c98:	b2f6      	uxtb	r6, r6
    9c9a:	e7a4      	b.n	9be6 <usbd_dmareq_process+0x36>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9c9c:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 9d90 <usbd_dmareq_process+0x1e0>
    9ca0:	e7a6      	b.n	9bf0 <usbd_dmareq_process+0x40>
                continue_transfer = p_state->handler.feeder(
    9ca2:	f8d9 3000 	ldr.w	r3, [r9]
    9ca6:	f8b9 200c 	ldrh.w	r2, [r9, #12]
    9caa:	f8d9 1004 	ldr.w	r1, [r9, #4]
    9cae:	a802      	add	r0, sp, #8
    9cb0:	4798      	blx	r3
                if (!continue_transfer)
    9cb2:	2800      	cmp	r0, #0
    9cb4:	d1bb      	bne.n	9c2e <usbd_dmareq_process+0x7e>
                    p_state->handler.feeder = NULL;
    9cb6:	2300      	movs	r3, #0
    9cb8:	f8c9 3000 	str.w	r3, [r9]
    9cbc:	e7b7      	b.n	9c2e <usbd_dmareq_process+0x7e>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    9cbe:	2202      	movs	r2, #2
    9cc0:	f889 200e 	strb.w	r2, [r9, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    9cc4:	2301      	movs	r3, #1
    9cc6:	fa03 f808 	lsl.w	r8, r3, r8
    9cca:	ea6f 0808 	mvn.w	r8, r8
    9cce:	4b27      	ldr	r3, [pc, #156]	; (9d6c <usbd_dmareq_process+0x1bc>)
    9cd0:	f3bf 8f5b 	dmb	ish
    9cd4:	e853 1f00 	ldrex	r1, [r3]
    9cd8:	ea01 0108 	and.w	r1, r1, r8
    9cdc:	e843 1000 	strex	r0, r1, [r3]
    9ce0:	2800      	cmp	r0, #0
    9ce2:	d1f7      	bne.n	9cd4 <usbd_dmareq_process+0x124>
    9ce4:	f3bf 8f5b 	dmb	ish
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    9ce8:	2306      	movs	r3, #6
    9cea:	f88d 3004 	strb.w	r3, [sp, #4]
    9cee:	f88d 6006 	strb.w	r6, [sp, #6]
    9cf2:	f88d 2007 	strb.w	r2, [sp, #7]
                    m_event_handler(&evt);
    9cf6:	4b21      	ldr	r3, [pc, #132]	; (9d7c <usbd_dmareq_process+0x1cc>)
    9cf8:	681b      	ldr	r3, [r3, #0]
    9cfa:	a801      	add	r0, sp, #4
    9cfc:	4798      	blx	r3
                    continue;
    9cfe:	e75f      	b.n	9bc0 <usbd_dmareq_process+0x10>
        if (NRF_USBD_EPISO_CHECK(ep))
    9d00:	f016 0f08 	tst.w	r6, #8
    9d04:	d005      	beq.n	9d12 <usbd_dmareq_process+0x162>
            p_reg->ISOIN.PTR    = ptr;
    9d06:	491c      	ldr	r1, [pc, #112]	; (9d78 <usbd_dmareq_process+0x1c8>)
    9d08:	f8c1 36a0 	str.w	r3, [r1, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
    9d0c:	f8c1 26a4 	str.w	r2, [r1, #1700]	; 0x6a4
    9d10:	e7ae      	b.n	9c70 <usbd_dmareq_process+0xc0>
            p_reg->EPIN[epnr].PTR    = ptr;
    9d12:	4919      	ldr	r1, [pc, #100]	; (9d78 <usbd_dmareq_process+0x1c8>)
    9d14:	eb07 0087 	add.w	r0, r7, r7, lsl #2
    9d18:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    9d1c:	f8c0 3600 	str.w	r3, [r0, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
    9d20:	f8c0 2604 	str.w	r2, [r0, #1540]	; 0x604
    9d24:	e7a4      	b.n	9c70 <usbd_dmareq_process+0xc0>
            p_reg->EPOUT[epnr].PTR    = ptr;
    9d26:	4914      	ldr	r1, [pc, #80]	; (9d78 <usbd_dmareq_process+0x1c8>)
    9d28:	eb07 0087 	add.w	r0, r7, r7, lsl #2
    9d2c:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    9d30:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
    9d34:	f8c0 2704 	str.w	r2, [r0, #1796]	; 0x704
    9d38:	e79a      	b.n	9c70 <usbd_dmareq_process+0xc0>
    return (nrf_usbd_task_t)(
    9d3a:	2304      	movs	r3, #4
    9d3c:	e79b      	b.n	9c76 <usbd_dmareq_process+0xc6>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    9d3e:	4b10      	ldr	r3, [pc, #64]	; (9d80 <usbd_dmareq_process+0x1d0>)
    9d40:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    9d44:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9d48:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    9d4c:	681b      	ldr	r3, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
    9d4e:	b933      	cbnz	r3, 9d5e <usbd_dmareq_process+0x1ae>
    9d50:	4b0c      	ldr	r3, [pc, #48]	; (9d84 <usbd_dmareq_process+0x1d4>)
    9d52:	681b      	ldr	r3, [r3, #0]
    9d54:	b91b      	cbnz	r3, 9d5e <usbd_dmareq_process+0x1ae>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    9d56:	2c00      	cmp	r4, #0
    9d58:	dbf1      	blt.n	9d3e <usbd_dmareq_process+0x18e>
    9d5a:	4b0b      	ldr	r3, [pc, #44]	; (9d88 <usbd_dmareq_process+0x1d8>)
    9d5c:	e7f0      	b.n	9d40 <usbd_dmareq_process+0x190>
}
    9d5e:	b005      	add	sp, #20
    9d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9d64:	4770      	bx	lr
    9d66:	bf00      	nop
    9d68:	20002b54 	.word	0x20002b54
    9d6c:	2000245c 	.word	0x2000245c
    9d70:	200024cc 	.word	0x200024cc
    9d74:	40027c1c 	.word	0x40027c1c
    9d78:	40027000 	.word	0x40027000
    9d7c:	200025f0 	.word	0x200025f0
    9d80:	00015808 	.word	0x00015808
    9d84:	40027100 	.word	0x40027100
    9d88:	00015828 	.word	0x00015828
    9d8c:	200024d0 	.word	0x200024d0
    9d90:	20002560 	.word	0x20002560

00009d94 <ev_epdata_handler>:
{
    9d94:	b510      	push	{r4, lr}
    return p_reg->EPDATASTATUS;
    9d96:	4b0f      	ldr	r3, [pc, #60]	; (9dd4 <ev_epdata_handler+0x40>)
    9d98:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
    9d9c:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
    NRFX_LOG_DEBUG("USBD event: EndpointEPStatus: %x", dataepstatus);
    9da0:	e009      	b.n	9db6 <ev_epdata_handler+0x22>
    return 32U;
    9da2:	2120      	movs	r1, #32
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    9da4:	f1a1 0010 	sub.w	r0, r1, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9da8:	b2c0      	uxtb	r0, r0
        dataepstatus &= ~(1UL << bitpos);
    9daa:	2301      	movs	r3, #1
    9dac:	408b      	lsls	r3, r1
    9dae:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    9db2:	f7ff f9cb 	bl	914c <usbd_ep_data_handler>
    while (dataepstatus)
    9db6:	b154      	cbz	r4, 9dce <ev_epdata_handler+0x3a>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    9db8:	fa94 f1a4 	rbit	r1, r4
  if (value == 0U)
    9dbc:	2900      	cmp	r1, #0
    9dbe:	d0f0      	beq.n	9da2 <ev_epdata_handler+0xe>
  return __builtin_clz(value);
    9dc0:	fab1 f181 	clz	r1, r1
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9dc4:	290f      	cmp	r1, #15
    9dc6:	d8ed      	bhi.n	9da4 <ev_epdata_handler+0x10>
    9dc8:	f041 0080 	orr.w	r0, r1, #128	; 0x80
    9dcc:	e7ed      	b.n	9daa <ev_epdata_handler+0x16>
        usbd_dmareq_process();
    9dce:	f7ff feef 	bl	9bb0 <usbd_dmareq_process>
}
    9dd2:	bd10      	pop	{r4, pc}
    9dd4:	40027000 	.word	0x40027000

00009dd8 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    9dd8:	b500      	push	{lr}
    9dda:	b083      	sub	sp, #12
    9ddc:	f7ff f878 	bl	8ed0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9de0:	b110      	cbz	r0, 9de8 <ev_dma_epout7_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    9de2:	4b1d      	ldr	r3, [pc, #116]	; (9e58 <ev_dma_epout7_handler+0x80>)
    9de4:	2200      	movs	r2, #0
    9de6:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    9de8:	4b1c      	ldr	r3, [pc, #112]	; (9e5c <ev_dma_epout7_handler+0x84>)
    9dea:	2200      	movs	r2, #0
    9dec:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9dee:	4b1c      	ldr	r3, [pc, #112]	; (9e60 <ev_dma_epout7_handler+0x88>)
    9df0:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
    9df4:	2b03      	cmp	r3, #3
    9df6:	d01d      	beq.n	9e34 <ev_dma_epout7_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
    9df8:	4b19      	ldr	r3, [pc, #100]	; (9e60 <ev_dma_epout7_handler+0x88>)
    9dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    9dfc:	bb3b      	cbnz	r3, 9e4e <ev_dma_epout7_handler+0x76>
    9dfe:	4b19      	ldr	r3, [pc, #100]	; (9e64 <ev_dma_epout7_handler+0x8c>)
    9e00:	f3bf 8f5b 	dmb	ish
    9e04:	e853 2f00 	ldrex	r2, [r3]
    9e08:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
    9e0c:	e843 2100 	strex	r1, r2, [r3]
    9e10:	2900      	cmp	r1, #0
    9e12:	d1f7      	bne.n	9e04 <ev_dma_epout7_handler+0x2c>
    9e14:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9e18:	2306      	movs	r3, #6
    9e1a:	f88d 3004 	strb.w	r3, [sp, #4]
    9e1e:	2307      	movs	r3, #7
    9e20:	f88d 3006 	strb.w	r3, [sp, #6]
    9e24:	2300      	movs	r3, #0
    9e26:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    9e2a:	4b0f      	ldr	r3, [pc, #60]	; (9e68 <ev_dma_epout7_handler+0x90>)
    9e2c:	681b      	ldr	r3, [r3, #0]
    9e2e:	a801      	add	r0, sp, #4
    9e30:	4798      	blx	r3
    9e32:	e00c      	b.n	9e4e <ev_dma_epout7_handler+0x76>
    9e34:	4b0b      	ldr	r3, [pc, #44]	; (9e64 <ev_dma_epout7_handler+0x8c>)
    9e36:	f3bf 8f5b 	dmb	ish
    9e3a:	e853 2f00 	ldrex	r2, [r3]
    9e3e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
    9e42:	e843 2100 	strex	r1, r2, [r3]
    9e46:	2900      	cmp	r1, #0
    9e48:	d1f7      	bne.n	9e3a <ev_dma_epout7_handler+0x62>
    9e4a:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    9e4e:	f7ff feaf 	bl	9bb0 <usbd_dmareq_process>
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    9e52:	b003      	add	sp, #12
    9e54:	f85d fb04 	ldr.w	pc, [sp], #4
    9e58:	40027c1c 	.word	0x40027c1c
    9e5c:	20002b54 	.word	0x20002b54
    9e60:	200024d0 	.word	0x200024d0
    9e64:	2000245c 	.word	0x2000245c
    9e68:	200025f0 	.word	0x200025f0

00009e6c <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    9e6c:	b500      	push	{lr}
    9e6e:	b083      	sub	sp, #12
    9e70:	f7ff f82e 	bl	8ed0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9e74:	b110      	cbz	r0, 9e7c <ev_dma_epout1_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    9e76:	4b1d      	ldr	r3, [pc, #116]	; (9eec <ev_dma_epout1_handler+0x80>)
    9e78:	2200      	movs	r2, #0
    9e7a:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    9e7c:	4b1c      	ldr	r3, [pc, #112]	; (9ef0 <ev_dma_epout1_handler+0x84>)
    9e7e:	2200      	movs	r2, #0
    9e80:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9e82:	4b1c      	ldr	r3, [pc, #112]	; (9ef4 <ev_dma_epout1_handler+0x88>)
    9e84:	7f9b      	ldrb	r3, [r3, #30]
    9e86:	2b03      	cmp	r3, #3
    9e88:	d01d      	beq.n	9ec6 <ev_dma_epout1_handler+0x5a>
    else if (p_state->handler.consumer == NULL)
    9e8a:	4b1a      	ldr	r3, [pc, #104]	; (9ef4 <ev_dma_epout1_handler+0x88>)
    9e8c:	691b      	ldr	r3, [r3, #16]
    9e8e:	bb3b      	cbnz	r3, 9ee0 <ev_dma_epout1_handler+0x74>
    9e90:	4b19      	ldr	r3, [pc, #100]	; (9ef8 <ev_dma_epout1_handler+0x8c>)
    9e92:	f3bf 8f5b 	dmb	ish
    9e96:	e853 2f00 	ldrex	r2, [r3]
    9e9a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
    9e9e:	e843 2100 	strex	r1, r2, [r3]
    9ea2:	2900      	cmp	r1, #0
    9ea4:	d1f7      	bne.n	9e96 <ev_dma_epout1_handler+0x2a>
    9ea6:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9eaa:	2306      	movs	r3, #6
    9eac:	f88d 3004 	strb.w	r3, [sp, #4]
    9eb0:	2301      	movs	r3, #1
    9eb2:	f88d 3006 	strb.w	r3, [sp, #6]
    9eb6:	2300      	movs	r3, #0
    9eb8:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    9ebc:	4b0f      	ldr	r3, [pc, #60]	; (9efc <ev_dma_epout1_handler+0x90>)
    9ebe:	681b      	ldr	r3, [r3, #0]
    9ec0:	a801      	add	r0, sp, #4
    9ec2:	4798      	blx	r3
    9ec4:	e00c      	b.n	9ee0 <ev_dma_epout1_handler+0x74>
    9ec6:	4b0c      	ldr	r3, [pc, #48]	; (9ef8 <ev_dma_epout1_handler+0x8c>)
    9ec8:	f3bf 8f5b 	dmb	ish
    9ecc:	e853 2f00 	ldrex	r2, [r3]
    9ed0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
    9ed4:	e843 2100 	strex	r1, r2, [r3]
    9ed8:	2900      	cmp	r1, #0
    9eda:	d1f7      	bne.n	9ecc <ev_dma_epout1_handler+0x60>
    9edc:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    9ee0:	f7ff fe66 	bl	9bb0 <usbd_dmareq_process>
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    9ee4:	b003      	add	sp, #12
    9ee6:	f85d fb04 	ldr.w	pc, [sp], #4
    9eea:	bf00      	nop
    9eec:	40027c1c 	.word	0x40027c1c
    9ef0:	20002b54 	.word	0x20002b54
    9ef4:	200024d0 	.word	0x200024d0
    9ef8:	2000245c 	.word	0x2000245c
    9efc:	200025f0 	.word	0x200025f0

00009f00 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    9f00:	b500      	push	{lr}
    9f02:	b083      	sub	sp, #12
    9f04:	f7fe ffe4 	bl	8ed0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9f08:	b110      	cbz	r0, 9f10 <ev_dma_epout2_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    9f0a:	4b1d      	ldr	r3, [pc, #116]	; (9f80 <ev_dma_epout2_handler+0x80>)
    9f0c:	2200      	movs	r2, #0
    9f0e:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    9f10:	4b1c      	ldr	r3, [pc, #112]	; (9f84 <ev_dma_epout2_handler+0x84>)
    9f12:	2200      	movs	r2, #0
    9f14:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9f16:	4b1c      	ldr	r3, [pc, #112]	; (9f88 <ev_dma_epout2_handler+0x88>)
    9f18:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    9f1c:	2b03      	cmp	r3, #3
    9f1e:	d01d      	beq.n	9f5c <ev_dma_epout2_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
    9f20:	4b19      	ldr	r3, [pc, #100]	; (9f88 <ev_dma_epout2_handler+0x88>)
    9f22:	6a1b      	ldr	r3, [r3, #32]
    9f24:	bb3b      	cbnz	r3, 9f76 <ev_dma_epout2_handler+0x76>
    9f26:	4b19      	ldr	r3, [pc, #100]	; (9f8c <ev_dma_epout2_handler+0x8c>)
    9f28:	f3bf 8f5b 	dmb	ish
    9f2c:	e853 2f00 	ldrex	r2, [r3]
    9f30:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
    9f34:	e843 2100 	strex	r1, r2, [r3]
    9f38:	2900      	cmp	r1, #0
    9f3a:	d1f7      	bne.n	9f2c <ev_dma_epout2_handler+0x2c>
    9f3c:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9f40:	2306      	movs	r3, #6
    9f42:	f88d 3004 	strb.w	r3, [sp, #4]
    9f46:	2302      	movs	r3, #2
    9f48:	f88d 3006 	strb.w	r3, [sp, #6]
    9f4c:	2300      	movs	r3, #0
    9f4e:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    9f52:	4b0f      	ldr	r3, [pc, #60]	; (9f90 <ev_dma_epout2_handler+0x90>)
    9f54:	681b      	ldr	r3, [r3, #0]
    9f56:	a801      	add	r0, sp, #4
    9f58:	4798      	blx	r3
    9f5a:	e00c      	b.n	9f76 <ev_dma_epout2_handler+0x76>
    9f5c:	4b0b      	ldr	r3, [pc, #44]	; (9f8c <ev_dma_epout2_handler+0x8c>)
    9f5e:	f3bf 8f5b 	dmb	ish
    9f62:	e853 2f00 	ldrex	r2, [r3]
    9f66:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
    9f6a:	e843 2100 	strex	r1, r2, [r3]
    9f6e:	2900      	cmp	r1, #0
    9f70:	d1f7      	bne.n	9f62 <ev_dma_epout2_handler+0x62>
    9f72:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    9f76:	f7ff fe1b 	bl	9bb0 <usbd_dmareq_process>
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    9f7a:	b003      	add	sp, #12
    9f7c:	f85d fb04 	ldr.w	pc, [sp], #4
    9f80:	40027c1c 	.word	0x40027c1c
    9f84:	20002b54 	.word	0x20002b54
    9f88:	200024d0 	.word	0x200024d0
    9f8c:	2000245c 	.word	0x2000245c
    9f90:	200025f0 	.word	0x200025f0

00009f94 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    9f94:	b500      	push	{lr}
    9f96:	b083      	sub	sp, #12
    9f98:	f7fe ff9a 	bl	8ed0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    9f9c:	b110      	cbz	r0, 9fa4 <ev_dma_epout3_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    9f9e:	4b1d      	ldr	r3, [pc, #116]	; (a014 <ev_dma_epout3_handler+0x80>)
    9fa0:	2200      	movs	r2, #0
    9fa2:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    9fa4:	4b1c      	ldr	r3, [pc, #112]	; (a018 <ev_dma_epout3_handler+0x84>)
    9fa6:	2200      	movs	r2, #0
    9fa8:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9faa:	4b1c      	ldr	r3, [pc, #112]	; (a01c <ev_dma_epout3_handler+0x88>)
    9fac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
    9fb0:	2b03      	cmp	r3, #3
    9fb2:	d01d      	beq.n	9ff0 <ev_dma_epout3_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
    9fb4:	4b19      	ldr	r3, [pc, #100]	; (a01c <ev_dma_epout3_handler+0x88>)
    9fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    9fb8:	bb3b      	cbnz	r3, a00a <ev_dma_epout3_handler+0x76>
    9fba:	4b19      	ldr	r3, [pc, #100]	; (a020 <ev_dma_epout3_handler+0x8c>)
    9fbc:	f3bf 8f5b 	dmb	ish
    9fc0:	e853 2f00 	ldrex	r2, [r3]
    9fc4:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
    9fc8:	e843 2100 	strex	r1, r2, [r3]
    9fcc:	2900      	cmp	r1, #0
    9fce:	d1f7      	bne.n	9fc0 <ev_dma_epout3_handler+0x2c>
    9fd0:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9fd4:	2306      	movs	r3, #6
    9fd6:	f88d 3004 	strb.w	r3, [sp, #4]
    9fda:	2303      	movs	r3, #3
    9fdc:	f88d 3006 	strb.w	r3, [sp, #6]
    9fe0:	2300      	movs	r3, #0
    9fe2:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    9fe6:	4b0f      	ldr	r3, [pc, #60]	; (a024 <ev_dma_epout3_handler+0x90>)
    9fe8:	681b      	ldr	r3, [r3, #0]
    9fea:	a801      	add	r0, sp, #4
    9fec:	4798      	blx	r3
    9fee:	e00c      	b.n	a00a <ev_dma_epout3_handler+0x76>
    9ff0:	4b0b      	ldr	r3, [pc, #44]	; (a020 <ev_dma_epout3_handler+0x8c>)
    9ff2:	f3bf 8f5b 	dmb	ish
    9ff6:	e853 2f00 	ldrex	r2, [r3]
    9ffa:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
    9ffe:	e843 2100 	strex	r1, r2, [r3]
    a002:	2900      	cmp	r1, #0
    a004:	d1f7      	bne.n	9ff6 <ev_dma_epout3_handler+0x62>
    a006:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    a00a:	f7ff fdd1 	bl	9bb0 <usbd_dmareq_process>
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    a00e:	b003      	add	sp, #12
    a010:	f85d fb04 	ldr.w	pc, [sp], #4
    a014:	40027c1c 	.word	0x40027c1c
    a018:	20002b54 	.word	0x20002b54
    a01c:	200024d0 	.word	0x200024d0
    a020:	2000245c 	.word	0x2000245c
    a024:	200025f0 	.word	0x200025f0

0000a028 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    a028:	b500      	push	{lr}
    a02a:	b083      	sub	sp, #12
    a02c:	f7fe ff50 	bl	8ed0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    a030:	b110      	cbz	r0, a038 <ev_dma_epout4_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    a032:	4b1d      	ldr	r3, [pc, #116]	; (a0a8 <ev_dma_epout4_handler+0x80>)
    a034:	2200      	movs	r2, #0
    a036:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    a038:	4b1c      	ldr	r3, [pc, #112]	; (a0ac <ev_dma_epout4_handler+0x84>)
    a03a:	2200      	movs	r2, #0
    a03c:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    a03e:	4b1c      	ldr	r3, [pc, #112]	; (a0b0 <ev_dma_epout4_handler+0x88>)
    a040:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
    a044:	2b03      	cmp	r3, #3
    a046:	d01d      	beq.n	a084 <ev_dma_epout4_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
    a048:	4b19      	ldr	r3, [pc, #100]	; (a0b0 <ev_dma_epout4_handler+0x88>)
    a04a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    a04c:	bb3b      	cbnz	r3, a09e <ev_dma_epout4_handler+0x76>
    a04e:	4b19      	ldr	r3, [pc, #100]	; (a0b4 <ev_dma_epout4_handler+0x8c>)
    a050:	f3bf 8f5b 	dmb	ish
    a054:	e853 2f00 	ldrex	r2, [r3]
    a058:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    a05c:	e843 2100 	strex	r1, r2, [r3]
    a060:	2900      	cmp	r1, #0
    a062:	d1f7      	bne.n	a054 <ev_dma_epout4_handler+0x2c>
    a064:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    a068:	2306      	movs	r3, #6
    a06a:	f88d 3004 	strb.w	r3, [sp, #4]
    a06e:	2304      	movs	r3, #4
    a070:	f88d 3006 	strb.w	r3, [sp, #6]
    a074:	2300      	movs	r3, #0
    a076:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    a07a:	4b0f      	ldr	r3, [pc, #60]	; (a0b8 <ev_dma_epout4_handler+0x90>)
    a07c:	681b      	ldr	r3, [r3, #0]
    a07e:	a801      	add	r0, sp, #4
    a080:	4798      	blx	r3
    a082:	e00c      	b.n	a09e <ev_dma_epout4_handler+0x76>
    a084:	4b0b      	ldr	r3, [pc, #44]	; (a0b4 <ev_dma_epout4_handler+0x8c>)
    a086:	f3bf 8f5b 	dmb	ish
    a08a:	e853 2f00 	ldrex	r2, [r3]
    a08e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    a092:	e843 2100 	strex	r1, r2, [r3]
    a096:	2900      	cmp	r1, #0
    a098:	d1f7      	bne.n	a08a <ev_dma_epout4_handler+0x62>
    a09a:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    a09e:	f7ff fd87 	bl	9bb0 <usbd_dmareq_process>
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    a0a2:	b003      	add	sp, #12
    a0a4:	f85d fb04 	ldr.w	pc, [sp], #4
    a0a8:	40027c1c 	.word	0x40027c1c
    a0ac:	20002b54 	.word	0x20002b54
    a0b0:	200024d0 	.word	0x200024d0
    a0b4:	2000245c 	.word	0x2000245c
    a0b8:	200025f0 	.word	0x200025f0

0000a0bc <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    a0bc:	b500      	push	{lr}
    a0be:	b083      	sub	sp, #12
    a0c0:	f7fe ff06 	bl	8ed0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    a0c4:	b110      	cbz	r0, a0cc <ev_dma_epout5_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    a0c6:	4b1d      	ldr	r3, [pc, #116]	; (a13c <ev_dma_epout5_handler+0x80>)
    a0c8:	2200      	movs	r2, #0
    a0ca:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    a0cc:	4b1c      	ldr	r3, [pc, #112]	; (a140 <ev_dma_epout5_handler+0x84>)
    a0ce:	2200      	movs	r2, #0
    a0d0:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    a0d2:	4b1c      	ldr	r3, [pc, #112]	; (a144 <ev_dma_epout5_handler+0x88>)
    a0d4:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
    a0d8:	2b03      	cmp	r3, #3
    a0da:	d01d      	beq.n	a118 <ev_dma_epout5_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
    a0dc:	4b19      	ldr	r3, [pc, #100]	; (a144 <ev_dma_epout5_handler+0x88>)
    a0de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    a0e0:	bb3b      	cbnz	r3, a132 <ev_dma_epout5_handler+0x76>
    a0e2:	4b19      	ldr	r3, [pc, #100]	; (a148 <ev_dma_epout5_handler+0x8c>)
    a0e4:	f3bf 8f5b 	dmb	ish
    a0e8:	e853 2f00 	ldrex	r2, [r3]
    a0ec:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
    a0f0:	e843 2100 	strex	r1, r2, [r3]
    a0f4:	2900      	cmp	r1, #0
    a0f6:	d1f7      	bne.n	a0e8 <ev_dma_epout5_handler+0x2c>
    a0f8:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    a0fc:	2306      	movs	r3, #6
    a0fe:	f88d 3004 	strb.w	r3, [sp, #4]
    a102:	2305      	movs	r3, #5
    a104:	f88d 3006 	strb.w	r3, [sp, #6]
    a108:	2300      	movs	r3, #0
    a10a:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    a10e:	4b0f      	ldr	r3, [pc, #60]	; (a14c <ev_dma_epout5_handler+0x90>)
    a110:	681b      	ldr	r3, [r3, #0]
    a112:	a801      	add	r0, sp, #4
    a114:	4798      	blx	r3
    a116:	e00c      	b.n	a132 <ev_dma_epout5_handler+0x76>
    a118:	4b0b      	ldr	r3, [pc, #44]	; (a148 <ev_dma_epout5_handler+0x8c>)
    a11a:	f3bf 8f5b 	dmb	ish
    a11e:	e853 2f00 	ldrex	r2, [r3]
    a122:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
    a126:	e843 2100 	strex	r1, r2, [r3]
    a12a:	2900      	cmp	r1, #0
    a12c:	d1f7      	bne.n	a11e <ev_dma_epout5_handler+0x62>
    a12e:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    a132:	f7ff fd3d 	bl	9bb0 <usbd_dmareq_process>
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    a136:	b003      	add	sp, #12
    a138:	f85d fb04 	ldr.w	pc, [sp], #4
    a13c:	40027c1c 	.word	0x40027c1c
    a140:	20002b54 	.word	0x20002b54
    a144:	200024d0 	.word	0x200024d0
    a148:	2000245c 	.word	0x2000245c
    a14c:	200025f0 	.word	0x200025f0

0000a150 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    a150:	b500      	push	{lr}
    a152:	b083      	sub	sp, #12
    a154:	f7fe febc 	bl	8ed0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    a158:	b110      	cbz	r0, a160 <ev_dma_epout6_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    a15a:	4b1d      	ldr	r3, [pc, #116]	; (a1d0 <ev_dma_epout6_handler+0x80>)
    a15c:	2200      	movs	r2, #0
    a15e:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    a160:	4b1c      	ldr	r3, [pc, #112]	; (a1d4 <ev_dma_epout6_handler+0x84>)
    a162:	2200      	movs	r2, #0
    a164:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    a166:	4b1c      	ldr	r3, [pc, #112]	; (a1d8 <ev_dma_epout6_handler+0x88>)
    a168:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
    a16c:	2b03      	cmp	r3, #3
    a16e:	d01c      	beq.n	a1aa <ev_dma_epout6_handler+0x5a>
    else if (p_state->handler.consumer == NULL)
    a170:	4b19      	ldr	r3, [pc, #100]	; (a1d8 <ev_dma_epout6_handler+0x88>)
    a172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    a174:	bb33      	cbnz	r3, a1c4 <ev_dma_epout6_handler+0x74>
    a176:	4b19      	ldr	r3, [pc, #100]	; (a1dc <ev_dma_epout6_handler+0x8c>)
    a178:	f3bf 8f5b 	dmb	ish
    a17c:	e853 2f00 	ldrex	r2, [r3]
    a180:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
    a184:	e843 2100 	strex	r1, r2, [r3]
    a188:	2900      	cmp	r1, #0
    a18a:	d1f7      	bne.n	a17c <ev_dma_epout6_handler+0x2c>
    a18c:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    a190:	2306      	movs	r3, #6
    a192:	f88d 3004 	strb.w	r3, [sp, #4]
    a196:	f88d 3006 	strb.w	r3, [sp, #6]
    a19a:	2300      	movs	r3, #0
    a19c:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    a1a0:	4b0f      	ldr	r3, [pc, #60]	; (a1e0 <ev_dma_epout6_handler+0x90>)
    a1a2:	681b      	ldr	r3, [r3, #0]
    a1a4:	a801      	add	r0, sp, #4
    a1a6:	4798      	blx	r3
    a1a8:	e00c      	b.n	a1c4 <ev_dma_epout6_handler+0x74>
    a1aa:	4b0c      	ldr	r3, [pc, #48]	; (a1dc <ev_dma_epout6_handler+0x8c>)
    a1ac:	f3bf 8f5b 	dmb	ish
    a1b0:	e853 2f00 	ldrex	r2, [r3]
    a1b4:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
    a1b8:	e843 2100 	strex	r1, r2, [r3]
    a1bc:	2900      	cmp	r1, #0
    a1be:	d1f7      	bne.n	a1b0 <ev_dma_epout6_handler+0x60>
    a1c0:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    a1c4:	f7ff fcf4 	bl	9bb0 <usbd_dmareq_process>
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    a1c8:	b003      	add	sp, #12
    a1ca:	f85d fb04 	ldr.w	pc, [sp], #4
    a1ce:	bf00      	nop
    a1d0:	40027c1c 	.word	0x40027c1c
    a1d4:	20002b54 	.word	0x20002b54
    a1d8:	200024d0 	.word	0x200024d0
    a1dc:	2000245c 	.word	0x2000245c
    a1e0:	200025f0 	.word	0x200025f0

0000a1e4 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    a1e4:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    a1e8:	4b01      	ldr	r3, [pc, #4]	; (a1f0 <nrfx_usbd_ep_stall+0xc>)
    a1ea:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
    a1ee:	4770      	bx	lr
    a1f0:	40027000 	.word	0x40027000

0000a1f4 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
    a1f4:	f010 0f08 	tst.w	r0, #8
    a1f8:	d117      	bne.n	a22a <nrfx_usbd_ep_stall_check+0x36>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    a1fa:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    a1fe:	f010 0f80 	tst.w	r0, #128	; 0x80
    a202:	d10c      	bne.n	a21e <nrfx_usbd_ep_stall_check+0x2a>
        return p_reg->HALTED.EPOUT[epnr];
    a204:	f503 7388 	add.w	r3, r3, #272	; 0x110
    a208:	009b      	lsls	r3, r3, #2
    a20a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a20e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    a212:	6858      	ldr	r0, [r3, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
    a214:	2801      	cmp	r0, #1
    a216:	bf14      	ite	ne
    a218:	2000      	movne	r0, #0
    a21a:	2001      	moveq	r0, #1
    a21c:	4770      	bx	lr
        return p_reg->HALTED.EPIN[epnr];
    a21e:	f503 7384 	add.w	r3, r3, #264	; 0x108
    a222:	4a03      	ldr	r2, [pc, #12]	; (a230 <nrfx_usbd_ep_stall_check+0x3c>)
    a224:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    a228:	e7f4      	b.n	a214 <nrfx_usbd_ep_stall_check+0x20>
        return false;
    a22a:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
    a22c:	4770      	bx	lr
    a22e:	bf00      	nop
    a230:	40027000 	.word	0x40027000

0000a234 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
    a234:	4b04      	ldr	r3, [pc, #16]	; (a248 <nrfx_usbd_ep_dtoggle_clear+0x14>)
    a236:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
    a23a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    a23e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
    a242:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
    a246:	4770      	bx	lr
    a248:	40027000 	.word	0x40027000

0000a24c <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    a24c:	b510      	push	{r4, lr}
    a24e:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    a250:	2208      	movs	r2, #8
    a252:	2100      	movs	r1, #0
    a254:	f006 ffee 	bl	11234 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    a258:	4b11      	ldr	r3, [pc, #68]	; (a2a0 <nrfx_usbd_setup_get+0x54>)
    a25a:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    a25e:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
    a260:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    a264:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
    a266:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    a26a:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    a26c:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    a270:	0209      	lsls	r1, r1, #8
    a272:	b289      	uxth	r1, r1
    a274:	430a      	orrs	r2, r1
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
    a276:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
    a278:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    a27c:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    a27e:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    a282:	0209      	lsls	r1, r1, #8
    a284:	b289      	uxth	r1, r1
    a286:	430a      	orrs	r2, r1
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
    a288:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
    a28a:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    a28e:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    a290:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    a294:	021b      	lsls	r3, r3, #8
    a296:	b29b      	uxth	r3, r3
    a298:	4313      	orrs	r3, r2
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
    a29a:	80e3      	strh	r3, [r4, #6]
}
    a29c:	bd10      	pop	{r4, pc}
    a29e:	bf00      	nop
    a2a0:	40027000 	.word	0x40027000

0000a2a4 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    a2a4:	4b02      	ldr	r3, [pc, #8]	; (a2b0 <nrfx_usbd_setup_data_clear+0xc>)
    a2a6:	2201      	movs	r2, #1
    a2a8:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    a2aa:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
    a2ac:	4770      	bx	lr
    a2ae:	bf00      	nop
    a2b0:	4002704c 	.word	0x4002704c

0000a2b4 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    a2b4:	b500      	push	{lr}
    a2b6:	b083      	sub	sp, #12
    a2b8:	f7fe fe0a 	bl	8ed0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    a2bc:	b110      	cbz	r0, a2c4 <ev_dma_epout0_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    a2be:	4b1d      	ldr	r3, [pc, #116]	; (a334 <ev_dma_epout0_handler+0x80>)
    a2c0:	2200      	movs	r2, #0
    a2c2:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    a2c4:	4b1c      	ldr	r3, [pc, #112]	; (a338 <ev_dma_epout0_handler+0x84>)
    a2c6:	2200      	movs	r2, #0
    a2c8:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    a2ca:	4b1c      	ldr	r3, [pc, #112]	; (a33c <ev_dma_epout0_handler+0x88>)
    a2cc:	7b9b      	ldrb	r3, [r3, #14]
    a2ce:	2b03      	cmp	r3, #3
    a2d0:	d005      	beq.n	a2de <ev_dma_epout0_handler+0x2a>
    else if (p_state->handler.consumer == NULL)
    a2d2:	4b1a      	ldr	r3, [pc, #104]	; (a33c <ev_dma_epout0_handler+0x88>)
    a2d4:	681b      	ldr	r3, [r3, #0]
    a2d6:	b183      	cbz	r3, a2fa <ev_dma_epout0_handler+0x46>
        nrfx_usbd_setup_data_clear();
    a2d8:	f7ff ffe4 	bl	a2a4 <nrfx_usbd_setup_data_clear>
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    a2dc:	e026      	b.n	a32c <ev_dma_epout0_handler+0x78>
    a2de:	4b18      	ldr	r3, [pc, #96]	; (a340 <ev_dma_epout0_handler+0x8c>)
    a2e0:	f3bf 8f5b 	dmb	ish
    a2e4:	e853 2f00 	ldrex	r2, [r3]
    a2e8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    a2ec:	e843 2100 	strex	r1, r2, [r3]
    a2f0:	2900      	cmp	r1, #0
    a2f2:	d1f7      	bne.n	a2e4 <ev_dma_epout0_handler+0x30>
    a2f4:	f3bf 8f5b 	dmb	ish
    a2f8:	e018      	b.n	a32c <ev_dma_epout0_handler+0x78>
    a2fa:	4b11      	ldr	r3, [pc, #68]	; (a340 <ev_dma_epout0_handler+0x8c>)
    a2fc:	f3bf 8f5b 	dmb	ish
    a300:	e853 2f00 	ldrex	r2, [r3]
    a304:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    a308:	e843 2100 	strex	r1, r2, [r3]
    a30c:	2900      	cmp	r1, #0
    a30e:	d1f7      	bne.n	a300 <ev_dma_epout0_handler+0x4c>
    a310:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    a314:	2306      	movs	r3, #6
    a316:	f88d 3004 	strb.w	r3, [sp, #4]
    a31a:	2300      	movs	r3, #0
    a31c:	f88d 3006 	strb.w	r3, [sp, #6]
    a320:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    a324:	4b07      	ldr	r3, [pc, #28]	; (a344 <ev_dma_epout0_handler+0x90>)
    a326:	681b      	ldr	r3, [r3, #0]
    a328:	a801      	add	r0, sp, #4
    a32a:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    a32c:	b003      	add	sp, #12
    a32e:	f85d fb04 	ldr.w	pc, [sp], #4
    a332:	bf00      	nop
    a334:	40027c1c 	.word	0x40027c1c
    a338:	20002b54 	.word	0x20002b54
    a33c:	200024d0 	.word	0x200024d0
    a340:	2000245c 	.word	0x2000245c
    a344:	200025f0 	.word	0x200025f0

0000a348 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    a348:	4b02      	ldr	r3, [pc, #8]	; (a354 <nrfx_usbd_setup_clear+0xc>)
    a34a:	2201      	movs	r2, #1
    a34c:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    a34e:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
    a350:	4770      	bx	lr
    a352:	bf00      	nop
    a354:	40027050 	.word	0x40027050

0000a358 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    a358:	4b02      	ldr	r3, [pc, #8]	; (a364 <nrfx_usbd_setup_stall+0xc>)
    a35a:	2201      	movs	r2, #1
    a35c:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    a35e:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
    a360:	4770      	bx	lr
    a362:	bf00      	nop
    a364:	40027054 	.word	0x40027054

0000a368 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
    a368:	4b01      	ldr	r3, [pc, #4]	; (a370 <nrfx_usbd_last_setup_dir_get+0x8>)
    a36a:	7818      	ldrb	r0, [r3, #0]
    a36c:	4770      	bx	lr
    a36e:	bf00      	nop
    a370:	20002b56 	.word	0x20002b56

0000a374 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    a374:	b410      	push	{r4}
	__asm__ volatile(
    a376:	f04f 0320 	mov.w	r3, #32
    a37a:	f3ef 8411 	mrs	r4, BASEPRI
    a37e:	f383 8812 	msr	BASEPRI_MAX, r3
    a382:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_EP_BITPOS(ep);
    a386:	b243      	sxtb	r3, r0
    a388:	2b00      	cmp	r3, #0
    a38a:	db1e      	blt.n	a3ca <nrfx_usbd_transfer_out_drop+0x56>
    a38c:	2210      	movs	r2, #16
    a38e:	f003 030f 	and.w	r3, r3, #15
    a392:	4413      	add	r3, r2
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
    a394:	2201      	movs	r2, #1
    a396:	fa02 f303 	lsl.w	r3, r2, r3
    a39a:	490d      	ldr	r1, [pc, #52]	; (a3d0 <nrfx_usbd_transfer_out_drop+0x5c>)
    a39c:	680a      	ldr	r2, [r1, #0]
    a39e:	ea22 0203 	bic.w	r2, r2, r3
    a3a2:	600a      	str	r2, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
    a3a4:	f010 0f08 	tst.w	r0, #8
    a3a8:	d109      	bne.n	a3be <nrfx_usbd_transfer_out_drop+0x4a>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    a3aa:	f000 000f 	and.w	r0, r0, #15
    a3ae:	4b09      	ldr	r3, [pc, #36]	; (a3d4 <nrfx_usbd_transfer_out_drop+0x60>)
    a3b0:	f500 7094 	add.w	r0, r0, #296	; 0x128
    a3b4:	2200      	movs	r2, #0
    a3b6:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    a3ba:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	__asm__ volatile(
    a3be:	f384 8811 	msr	BASEPRI, r4
    a3c2:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    a3c6:	bc10      	pop	{r4}
    a3c8:	4770      	bx	lr
    return NRFX_USBD_EP_BITPOS(ep);
    a3ca:	2200      	movs	r2, #0
    a3cc:	e7df      	b.n	a38e <nrfx_usbd_transfer_out_drop+0x1a>
    a3ce:	bf00      	nop
    a3d0:	200024cc 	.word	0x200024cc
    a3d4:	40027000 	.word	0x40027000

0000a3d8 <ev_setup_handler>:
{
    a3d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a3da:	b083      	sub	sp, #12
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    a3dc:	4b5f      	ldr	r3, [pc, #380]	; (a55c <ev_setup_handler+0x184>)
    a3de:	f8d3 4480 	ldr.w	r4, [r3, #1152]	; 0x480
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    a3e2:	4b5f      	ldr	r3, [pc, #380]	; (a560 <ev_setup_handler+0x188>)
    a3e4:	681b      	ldr	r3, [r3, #0]
    a3e6:	43db      	mvns	r3, r3
    a3e8:	b29b      	uxth	r3, r3
    a3ea:	4a5e      	ldr	r2, [pc, #376]	; (a564 <ev_setup_handler+0x18c>)
    a3ec:	6812      	ldr	r2, [r2, #0]
    a3ee:	4313      	orrs	r3, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    a3f0:	4a5d      	ldr	r2, [pc, #372]	; (a568 <ev_setup_handler+0x190>)
    a3f2:	7810      	ldrb	r0, [r2, #0]
    return NRFX_USBD_EP_BITPOS(ep);
    a3f4:	f992 2000 	ldrsb.w	r2, [r2]
    a3f8:	2a00      	cmp	r2, #0
    a3fa:	db2e      	blt.n	a45a <ev_setup_handler+0x82>
    a3fc:	2110      	movs	r1, #16
    a3fe:	f002 020f 	and.w	r2, r2, #15
    a402:	4411      	add	r1, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    a404:	2201      	movs	r2, #1
    a406:	408a      	lsls	r2, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    a408:	4213      	tst	r3, r2
    a40a:	d128      	bne.n	a45e <ev_setup_handler+0x86>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    a40c:	f014 0f80 	tst.w	r4, #128	; 0x80
    a410:	f040 80a2 	bne.w	a558 <ev_setup_handler+0x180>
    a414:	2200      	movs	r2, #0
    m_last_setup_dir =
    a416:	4b54      	ldr	r3, [pc, #336]	; (a568 <ev_setup_handler+0x190>)
    a418:	701a      	strb	r2, [r3, #0]
    a41a:	4b52      	ldr	r3, [pc, #328]	; (a564 <ev_setup_handler+0x18c>)
    a41c:	f3bf 8f5b 	dmb	ish
    a420:	e853 2f00 	ldrex	r2, [r3]
    a424:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
    a428:	e843 2100 	strex	r1, r2, [r3]
    a42c:	2900      	cmp	r1, #0
    a42e:	d1f7      	bne.n	a420 <ev_setup_handler+0x48>
    a430:	f3bf 8f5b 	dmb	ish
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    a434:	4a4a      	ldr	r2, [pc, #296]	; (a560 <ev_setup_handler+0x188>)
    a436:	6813      	ldr	r3, [r2, #0]
    a438:	f043 0301 	orr.w	r3, r3, #1
    a43c:	6013      	str	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
    a43e:	2300      	movs	r3, #0
    a440:	f8ad 3005 	strh.w	r3, [sp, #5]
    a444:	f88d 3007 	strb.w	r3, [sp, #7]
    a448:	2305      	movs	r3, #5
    a44a:	f88d 3004 	strb.w	r3, [sp, #4]
    m_event_handler(&evt);
    a44e:	4b47      	ldr	r3, [pc, #284]	; (a56c <ev_setup_handler+0x194>)
    a450:	681b      	ldr	r3, [r3, #0]
    a452:	a801      	add	r0, sp, #4
    a454:	4798      	blx	r3
}
    a456:	b003      	add	sp, #12
    a458:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NRFX_USBD_EP_BITPOS(ep);
    a45a:	2100      	movs	r1, #0
    a45c:	e7cf      	b.n	a3fe <ev_setup_handler+0x26>
	__asm__ volatile(
    a45e:	f04f 0320 	mov.w	r3, #32
    a462:	f3ef 8611 	mrs	r6, BASEPRI
    a466:	f383 8812 	msr	BASEPRI_MAX, r3
    a46a:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    a46e:	b243      	sxtb	r3, r0
    a470:	2b00      	cmp	r3, #0
    a472:	db26      	blt.n	a4c2 <ev_setup_handler+0xea>
    a474:	4d3e      	ldr	r5, [pc, #248]	; (a570 <ev_setup_handler+0x198>)
        NRF_USBD_EP_NR_GET(ep));
    a476:	f000 020f 	and.w	r2, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    a47a:	eb05 1502 	add.w	r5, r5, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
    a47e:	2b00      	cmp	r3, #0
    a480:	db24      	blt.n	a4cc <ev_setup_handler+0xf4>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    a482:	4a38      	ldr	r2, [pc, #224]	; (a564 <ev_setup_handler+0x18c>)
    a484:	6812      	ldr	r2, [r2, #0]
    a486:	43d2      	mvns	r2, r2
    return NRFX_USBD_EP_BITPOS(ep);
    a488:	f003 030f 	and.w	r3, r3, #15
    a48c:	3310      	adds	r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    a48e:	40da      	lsrs	r2, r3
    a490:	f012 0f01 	tst.w	r2, #1
    a494:	d117      	bne.n	a4c6 <ev_setup_handler+0xee>
            p_state->handler.consumer = NULL;
    a496:	2200      	movs	r2, #0
    a498:	602a      	str	r2, [r5, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    a49a:	2201      	movs	r2, #1
    a49c:	fa02 f303 	lsl.w	r3, r2, r3
    a4a0:	4930      	ldr	r1, [pc, #192]	; (a564 <ev_setup_handler+0x18c>)
    a4a2:	680a      	ldr	r2, [r1, #0]
    a4a4:	ea22 0203 	bic.w	r2, r2, r3
    a4a8:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    a4aa:	492d      	ldr	r1, [pc, #180]	; (a560 <ev_setup_handler+0x188>)
    a4ac:	680a      	ldr	r2, [r1, #0]
    a4ae:	ea22 0303 	bic.w	r3, r2, r3
    a4b2:	600b      	str	r3, [r1, #0]
        p_state->status = NRFX_USBD_EP_ABORTED;
    a4b4:	2303      	movs	r3, #3
    a4b6:	73ab      	strb	r3, [r5, #14]
	__asm__ volatile(
    a4b8:	f386 8811 	msr	BASEPRI, r6
    a4bc:	f3bf 8f6f 	isb	sy
}
    a4c0:	e7a4      	b.n	a40c <ev_setup_handler+0x34>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    a4c2:	4d2c      	ldr	r5, [pc, #176]	; (a574 <ev_setup_handler+0x19c>)
    a4c4:	e7d7      	b.n	a476 <ev_setup_handler+0x9e>
            nrfx_usbd_transfer_out_drop(ep);
    a4c6:	f7ff ff55 	bl	a374 <nrfx_usbd_transfer_out_drop>
    a4ca:	e7f3      	b.n	a4b4 <ev_setup_handler+0xdc>
        if(!NRF_USBD_EPISO_CHECK(ep))
    a4cc:	f010 0f08 	tst.w	r0, #8
    a4d0:	d10f      	bne.n	a4f2 <ev_setup_handler+0x11a>
            if(ep != NRFX_USBD_EPIN0)
    a4d2:	2880      	cmp	r0, #128	; 0x80
    a4d4:	d032      	beq.n	a53c <ev_setup_handler+0x164>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    a4d6:	f202 32da 	addw	r2, r2, #986	; 0x3da
    a4da:	0052      	lsls	r2, r2, #1
    a4dc:	4926      	ldr	r1, [pc, #152]	; (a578 <ev_setup_handler+0x1a0>)
    a4de:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    a4e0:	3104      	adds	r1, #4
    a4e2:	680a      	ldr	r2, [r1, #0]
    a4e4:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
    a4e6:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    a4ea:	680f      	ldr	r7, [r1, #0]
    a4ec:	433a      	orrs	r2, r7
    a4ee:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    a4f0:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    a4f2:	4a1b      	ldr	r2, [pc, #108]	; (a560 <ev_setup_handler+0x188>)
    a4f4:	6811      	ldr	r1, [r2, #0]
    a4f6:	4a1b      	ldr	r2, [pc, #108]	; (a564 <ev_setup_handler+0x18c>)
    a4f8:	6817      	ldr	r7, [r2, #0]
    a4fa:	ea67 0c01 	orn	ip, r7, r1
    return NRFX_USBD_EP_BITPOS(ep);
    a4fe:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    a502:	2201      	movs	r2, #1
    a504:	fa02 f303 	lsl.w	r3, r2, r3
    a508:	ea1c 0f03 	tst.w	ip, r3
    a50c:	d0d4      	beq.n	a4b8 <ev_setup_handler+0xe0>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    a50e:	ea27 0703 	bic.w	r7, r7, r3
    a512:	4a14      	ldr	r2, [pc, #80]	; (a564 <ev_setup_handler+0x18c>)
    a514:	6017      	str	r7, [r2, #0]
            m_ep_ready       |=   1U << ep2bit(ep) ;
    a516:	430b      	orrs	r3, r1
    a518:	4a11      	ldr	r2, [pc, #68]	; (a560 <ev_setup_handler+0x188>)
    a51a:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
    a51c:	2300      	movs	r3, #0
    a51e:	602b      	str	r3, [r5, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    a520:	2303      	movs	r3, #3
    a522:	73ab      	strb	r3, [r5, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    a524:	2206      	movs	r2, #6
    a526:	f88d 2000 	strb.w	r2, [sp]
    a52a:	f88d 0002 	strb.w	r0, [sp, #2]
    a52e:	f88d 3003 	strb.w	r3, [sp, #3]
            m_event_handler(&evt);
    a532:	4b0e      	ldr	r3, [pc, #56]	; (a56c <ev_setup_handler+0x194>)
    a534:	681b      	ldr	r3, [r3, #0]
    a536:	4668      	mov	r0, sp
    a538:	4798      	blx	r3
    a53a:	e7bd      	b.n	a4b8 <ev_setup_handler+0xe0>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    a53c:	4a0e      	ldr	r2, [pc, #56]	; (a578 <ev_setup_handler+0x1a0>)
    a53e:	f240 71b4 	movw	r1, #1972	; 0x7b4
    a542:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    a544:	490d      	ldr	r1, [pc, #52]	; (a57c <ev_setup_handler+0x1a4>)
    a546:	680a      	ldr	r2, [r1, #0]
    a548:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
    a54a:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    a54e:	680f      	ldr	r7, [r1, #0]
    a550:	433a      	orrs	r2, r7
    a552:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    a554:	680a      	ldr	r2, [r1, #0]
    a556:	e7cc      	b.n	a4f2 <ev_setup_handler+0x11a>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    a558:	2280      	movs	r2, #128	; 0x80
    a55a:	e75c      	b.n	a416 <ev_setup_handler+0x3e>
    a55c:	40027000 	.word	0x40027000
    a560:	200024cc 	.word	0x200024cc
    a564:	2000245c 	.word	0x2000245c
    a568:	20002b56 	.word	0x20002b56
    a56c:	200025f0 	.word	0x200025f0
    a570:	200024d0 	.word	0x200024d0
    a574:	20002560 	.word	0x20002560
    a578:	40027800 	.word	0x40027800
    a57c:	40027804 	.word	0x40027804

0000a580 <nrfx_usbd_irq_handler>:
{
    a580:	b570      	push	{r4, r5, r6, lr}
    return p_reg->INTENSET;
    a582:	4b22      	ldr	r3, [pc, #136]	; (a60c <nrfx_usbd_irq_handler+0x8c>)
    a584:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
    uint32_t active = 0;
    a588:	2500      	movs	r5, #0
    while (to_process)
    a58a:	e006      	b.n	a59a <nrfx_usbd_irq_handler+0x1a>
    return 32U;
    a58c:	2220      	movs	r2, #32
    a58e:	e00b      	b.n	a5a8 <nrfx_usbd_irq_handler+0x28>
        to_process &= ~(1UL << event_nr);
    a590:	2301      	movs	r3, #1
    a592:	fa03 f202 	lsl.w	r2, r3, r2
    a596:	ea21 0102 	bic.w	r1, r1, r2
    while (to_process)
    a59a:	b1c1      	cbz	r1, a5ce <nrfx_usbd_irq_handler+0x4e>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    a59c:	fa91 f2a1 	rbit	r2, r1
  if (value == 0U)
    a5a0:	2a00      	cmp	r2, #0
    a5a2:	d0f3      	beq.n	a58c <nrfx_usbd_irq_handler+0xc>
  return __builtin_clz(value);
    a5a4:	fab2 f282 	clz	r2, r2
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    a5a8:	f102 0340 	add.w	r3, r2, #64	; 0x40
    a5ac:	009b      	lsls	r3, r3, #2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    a5ae:	b29b      	uxth	r3, r3
    a5b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a5b4:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    a5b8:	6818      	ldr	r0, [r3, #0]
    if (ret)
    a5ba:	b110      	cbz	r0, a5c2 <nrfx_usbd_irq_handler+0x42>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    a5bc:	2400      	movs	r4, #0
    a5be:	601c      	str	r4, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    a5c0:	681b      	ldr	r3, [r3, #0]
        if (nrf_usbd_event_get_and_clear(NRF_USBD,
    a5c2:	2800      	cmp	r0, #0
    a5c4:	d0e4      	beq.n	a590 <nrfx_usbd_irq_handler+0x10>
            active |= 1UL << event_nr;
    a5c6:	2301      	movs	r3, #1
    a5c8:	4093      	lsls	r3, r2
    a5ca:	431d      	orrs	r5, r3
    a5cc:	e7e0      	b.n	a590 <nrfx_usbd_irq_handler+0x10>
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    a5ce:	f405 0600 	and.w	r6, r5, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    a5d2:	f425 0500 	bic.w	r5, r5, #8388608	; 0x800000
    while (active)
    a5d6:	e00a      	b.n	a5ee <nrfx_usbd_irq_handler+0x6e>
    a5d8:	fab4 f484 	clz	r4, r4
        m_isr[event_nr]();
    a5dc:	4b0c      	ldr	r3, [pc, #48]	; (a610 <nrfx_usbd_irq_handler+0x90>)
    a5de:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    a5e2:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    a5e4:	2301      	movs	r3, #1
    a5e6:	fa03 f404 	lsl.w	r4, r3, r4
    a5ea:	ea25 0504 	bic.w	r5, r5, r4
    while (active)
    a5ee:	b12d      	cbz	r5, a5fc <nrfx_usbd_irq_handler+0x7c>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    a5f0:	fa95 f4a5 	rbit	r4, r5
  if (value == 0U)
    a5f4:	2c00      	cmp	r4, #0
    a5f6:	d1ef      	bne.n	a5d8 <nrfx_usbd_irq_handler+0x58>
    return 32U;
    a5f8:	2420      	movs	r4, #32
    a5fa:	e7ef      	b.n	a5dc <nrfx_usbd_irq_handler+0x5c>
    usbd_dmareq_process();
    a5fc:	f7ff fad8 	bl	9bb0 <usbd_dmareq_process>
    if (setup_active)
    a600:	b906      	cbnz	r6, a604 <nrfx_usbd_irq_handler+0x84>
}
    a602:	bd70      	pop	{r4, r5, r6, pc}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    a604:	f7ff fee8 	bl	a3d8 <ev_setup_handler>
}
    a608:	e7fb      	b.n	a602 <nrfx_usbd_irq_handler+0x82>
    a60a:	bf00      	nop
    a60c:	40027000 	.word	0x40027000
    a610:	0001583c 	.word	0x0001583c

0000a614 <nrfx_usbd_ep_enable>:
{
    a614:	b538      	push	{r3, r4, r5, lr}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    a616:	b244      	sxtb	r4, r0
    a618:	2c00      	cmp	r4, #0
    a61a:	db22      	blt.n	a662 <nrfx_usbd_ep_enable+0x4e>
    a61c:	4b26      	ldr	r3, [pc, #152]	; (a6b8 <nrfx_usbd_ep_enable+0xa4>)
    a61e:	f000 010f 	and.w	r1, r0, #15
    a622:	5c5a      	ldrb	r2, [r3, r1]
    a624:	2301      	movs	r3, #1
    a626:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
    a628:	4a24      	ldr	r2, [pc, #144]	; (a6bc <nrfx_usbd_ep_enable+0xa8>)
    a62a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    if (NRF_USBD_EPIN_CHECK(ep))
    a62e:	2c00      	cmp	r4, #0
    a630:	db19      	blt.n	a666 <nrfx_usbd_ep_enable+0x52>
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
    a632:	4b22      	ldr	r3, [pc, #136]	; (a6bc <nrfx_usbd_ep_enable+0xa8>)
    a634:	f8d3 3514 	ldr.w	r3, [r3, #1300]	; 0x514
    a638:	40cb      	lsrs	r3, r1
    a63a:	f003 0301 	and.w	r3, r3, #1
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    a63e:	b97b      	cbnz	r3, a660 <nrfx_usbd_ep_enable+0x4c>
    if (NRF_USBD_EPIN_CHECK(ep))
    a640:	2c00      	cmp	r4, #0
    a642:	db16      	blt.n	a672 <nrfx_usbd_ep_enable+0x5e>
        p_reg->EPOUTEN |= 1UL << epnr;
    a644:	4d1d      	ldr	r5, [pc, #116]	; (a6bc <nrfx_usbd_ep_enable+0xa8>)
    a646:	f8d5 3514 	ldr.w	r3, [r5, #1300]	; 0x514
    a64a:	2201      	movs	r2, #1
    a64c:	408a      	lsls	r2, r1
    a64e:	4313      	orrs	r3, r2
    a650:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    a654:	b121      	cbz	r1, a660 <nrfx_usbd_ep_enable+0x4c>
    a656:	2c00      	cmp	r4, #0
    a658:	db02      	blt.n	a660 <nrfx_usbd_ep_enable+0x4c>
        NRF_USBD_EPOUT_CHECK(ep) &&
    a65a:	f010 0f08 	tst.w	r0, #8
    a65e:	d011      	beq.n	a684 <nrfx_usbd_ep_enable+0x70>
}
    a660:	bd38      	pop	{r3, r4, r5, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    a662:	4b17      	ldr	r3, [pc, #92]	; (a6c0 <nrfx_usbd_ep_enable+0xac>)
    a664:	e7db      	b.n	a61e <nrfx_usbd_ep_enable+0xa>
        return 0 != (p_reg->EPINEN & (1UL << epnr));
    a666:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    a66a:	40cb      	lsrs	r3, r1
    a66c:	f003 0301 	and.w	r3, r3, #1
    a670:	e7e5      	b.n	a63e <nrfx_usbd_ep_enable+0x2a>
        p_reg->EPINEN |= 1UL << epnr;
    a672:	4d12      	ldr	r5, [pc, #72]	; (a6bc <nrfx_usbd_ep_enable+0xa8>)
    a674:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510
    a678:	2201      	movs	r2, #1
    a67a:	408a      	lsls	r2, r1
    a67c:	4313      	orrs	r3, r2
    a67e:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
    a682:	e7e7      	b.n	a654 <nrfx_usbd_ep_enable+0x40>
	__asm__ volatile(
    a684:	f04f 0320 	mov.w	r3, #32
    a688:	f3ef 8511 	mrs	r5, BASEPRI
    a68c:	f383 8812 	msr	BASEPRI_MAX, r3
    a690:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    a694:	f7ff fe6e 	bl	a374 <nrfx_usbd_transfer_out_drop>
    return NRFX_USBD_EP_BITPOS(ep);
    a698:	f004 040f 	and.w	r4, r4, #15
    a69c:	3410      	adds	r4, #16
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    a69e:	2301      	movs	r3, #1
    a6a0:	fa03 f404 	lsl.w	r4, r3, r4
    a6a4:	4a07      	ldr	r2, [pc, #28]	; (a6c4 <nrfx_usbd_ep_enable+0xb0>)
    a6a6:	6813      	ldr	r3, [r2, #0]
    a6a8:	ea23 0304 	bic.w	r3, r3, r4
    a6ac:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    a6ae:	f385 8811 	msr	BASEPRI, r5
    a6b2:	f3bf 8f6f 	isb	sy
}
    a6b6:	e7d3      	b.n	a660 <nrfx_usbd_ep_enable+0x4c>
    a6b8:	0001581c 	.word	0x0001581c
    a6bc:	40027000 	.word	0x40027000
    a6c0:	000157fc 	.word	0x000157fc
    a6c4:	2000245c 	.word	0x2000245c

0000a6c8 <nrfx_usbd_ep_stall_clear>:
{
    a6c8:	b510      	push	{r4, lr}
    a6ca:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    a6cc:	f010 0f80 	tst.w	r0, #128	; 0x80
    a6d0:	d003      	beq.n	a6da <nrfx_usbd_ep_stall_clear+0x12>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    a6d2:	4b06      	ldr	r3, [pc, #24]	; (a6ec <nrfx_usbd_ep_stall_clear+0x24>)
    a6d4:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
    a6d8:	bd10      	pop	{r4, pc}
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    a6da:	f7ff fd8b 	bl	a1f4 <nrfx_usbd_ep_stall_check>
    a6de:	2800      	cmp	r0, #0
    a6e0:	d0f7      	beq.n	a6d2 <nrfx_usbd_ep_stall_clear+0xa>
        nrfx_usbd_transfer_out_drop(ep);
    a6e2:	4620      	mov	r0, r4
    a6e4:	f7ff fe46 	bl	a374 <nrfx_usbd_transfer_out_drop>
    a6e8:	e7f3      	b.n	a6d2 <nrfx_usbd_ep_stall_clear+0xa>
    a6ea:	bf00      	nop
    a6ec:	40027000 	.word	0x40027000

0000a6f0 <usbd_ep_abort_all>:
{
    a6f0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a6f2:	b083      	sub	sp, #12
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    a6f4:	4b59      	ldr	r3, [pc, #356]	; (a85c <usbd_ep_abort_all+0x16c>)
    a6f6:	885b      	ldrh	r3, [r3, #2]
    a6f8:	4a59      	ldr	r2, [pc, #356]	; (a860 <usbd_ep_abort_all+0x170>)
    a6fa:	6815      	ldr	r5, [r2, #0]
    a6fc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    while (0 != ep_waiting)
    a700:	e016      	b.n	a730 <usbd_ep_abort_all+0x40>
    a702:	2420      	movs	r4, #32
    a704:	e01f      	b.n	a746 <usbd_ep_abort_all+0x56>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    a706:	f044 0380 	orr.w	r3, r4, #128	; 0x80
    a70a:	e01f      	b.n	a74c <usbd_ep_abort_all+0x5c>
    a70c:	f044 0080 	orr.w	r0, r4, #128	; 0x80
    a710:	e024      	b.n	a75c <usbd_ep_abort_all+0x6c>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    a712:	4e54      	ldr	r6, [pc, #336]	; (a864 <usbd_ep_abort_all+0x174>)
    a714:	e02e      	b.n	a774 <usbd_ep_abort_all+0x84>
            nrfx_usbd_transfer_out_drop(ep);
    a716:	f7ff fe2d 	bl	a374 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
    a71a:	2303      	movs	r3, #3
    a71c:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
    a71e:	f387 8811 	msr	BASEPRI, r7
    a722:	f3bf 8f6f 	isb	sy
        ep_waiting &= ~(1U << bitpos);
    a726:	2301      	movs	r3, #1
    a728:	fa03 f404 	lsl.w	r4, r3, r4
    a72c:	ea25 0504 	bic.w	r5, r5, r4
    while (0 != ep_waiting)
    a730:	2d00      	cmp	r5, #0
    a732:	f000 808c 	beq.w	a84e <usbd_ep_abort_all+0x15e>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    a736:	fa95 f4a5 	rbit	r4, r5
  if (value == 0U)
    a73a:	2c00      	cmp	r4, #0
    a73c:	d0e1      	beq.n	a702 <usbd_ep_abort_all+0x12>
  return __builtin_clz(value);
    a73e:	fab4 f484 	clz	r4, r4
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    a742:	2c0f      	cmp	r4, #15
    a744:	d9df      	bls.n	a706 <usbd_ep_abort_all+0x16>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    a746:	f1a4 0310 	sub.w	r3, r4, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    a74a:	b2db      	uxtb	r3, r3
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    a74c:	f013 0f08 	tst.w	r3, #8
    a750:	d1e9      	bne.n	a726 <usbd_ep_abort_all+0x36>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    a752:	2c0f      	cmp	r4, #15
    a754:	d9da      	bls.n	a70c <usbd_ep_abort_all+0x1c>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    a756:	f1a4 0010 	sub.w	r0, r4, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    a75a:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
    a75c:	f04f 0320 	mov.w	r3, #32
    a760:	f3ef 8711 	mrs	r7, BASEPRI
    a764:	f383 8812 	msr	BASEPRI_MAX, r3
    a768:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    a76c:	b243      	sxtb	r3, r0
    a76e:	2b00      	cmp	r3, #0
    a770:	dbcf      	blt.n	a712 <usbd_ep_abort_all+0x22>
    a772:	4e3d      	ldr	r6, [pc, #244]	; (a868 <usbd_ep_abort_all+0x178>)
        NRF_USBD_EP_NR_GET(ep));
    a774:	f000 020f 	and.w	r2, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    a778:	eb06 1602 	add.w	r6, r6, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
    a77c:	2b00      	cmp	r3, #0
    a77e:	db19      	blt.n	a7b4 <usbd_ep_abort_all+0xc4>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    a780:	4a37      	ldr	r2, [pc, #220]	; (a860 <usbd_ep_abort_all+0x170>)
    a782:	6812      	ldr	r2, [r2, #0]
    a784:	43d2      	mvns	r2, r2
    return NRFX_USBD_EP_BITPOS(ep);
    a786:	f003 030f 	and.w	r3, r3, #15
    a78a:	3310      	adds	r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    a78c:	40da      	lsrs	r2, r3
    a78e:	f012 0f01 	tst.w	r2, #1
    a792:	d1c0      	bne.n	a716 <usbd_ep_abort_all+0x26>
            p_state->handler.consumer = NULL;
    a794:	2200      	movs	r2, #0
    a796:	6032      	str	r2, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    a798:	2201      	movs	r2, #1
    a79a:	fa02 f303 	lsl.w	r3, r2, r3
    a79e:	4930      	ldr	r1, [pc, #192]	; (a860 <usbd_ep_abort_all+0x170>)
    a7a0:	680a      	ldr	r2, [r1, #0]
    a7a2:	ea22 0203 	bic.w	r2, r2, r3
    a7a6:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    a7a8:	492c      	ldr	r1, [pc, #176]	; (a85c <usbd_ep_abort_all+0x16c>)
    a7aa:	680a      	ldr	r2, [r1, #0]
    a7ac:	ea22 0303 	bic.w	r3, r2, r3
    a7b0:	600b      	str	r3, [r1, #0]
    a7b2:	e7b2      	b.n	a71a <usbd_ep_abort_all+0x2a>
        if(!NRF_USBD_EPISO_CHECK(ep))
    a7b4:	f010 0f08 	tst.w	r0, #8
    a7b8:	d111      	bne.n	a7de <usbd_ep_abort_all+0xee>
            if(ep != NRFX_USBD_EPIN0)
    a7ba:	2880      	cmp	r0, #128	; 0x80
    a7bc:	d037      	beq.n	a82e <usbd_ep_abort_all+0x13e>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    a7be:	f202 32da 	addw	r2, r2, #986	; 0x3da
    a7c2:	0052      	lsls	r2, r2, #1
    a7c4:	4929      	ldr	r1, [pc, #164]	; (a86c <usbd_ep_abort_all+0x17c>)
    a7c6:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    a7c8:	3104      	adds	r1, #4
    a7ca:	680a      	ldr	r2, [r1, #0]
    a7cc:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
    a7ce:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    a7d2:	f8d1 c000 	ldr.w	ip, [r1]
    a7d6:	ea42 020c 	orr.w	r2, r2, ip
    a7da:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    a7dc:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    a7de:	4a1f      	ldr	r2, [pc, #124]	; (a85c <usbd_ep_abort_all+0x16c>)
    a7e0:	6811      	ldr	r1, [r2, #0]
    a7e2:	4a1f      	ldr	r2, [pc, #124]	; (a860 <usbd_ep_abort_all+0x170>)
    a7e4:	f8d2 c000 	ldr.w	ip, [r2]
    a7e8:	ea6c 0e01 	orn	lr, ip, r1
    return NRFX_USBD_EP_BITPOS(ep);
    a7ec:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    a7f0:	2201      	movs	r2, #1
    a7f2:	fa02 f303 	lsl.w	r3, r2, r3
    a7f6:	ea1e 0f03 	tst.w	lr, r3
    a7fa:	d090      	beq.n	a71e <usbd_ep_abort_all+0x2e>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    a7fc:	ea2c 0203 	bic.w	r2, ip, r3
    a800:	f8df c05c 	ldr.w	ip, [pc, #92]	; a860 <usbd_ep_abort_all+0x170>
    a804:	f8cc 2000 	str.w	r2, [ip]
            m_ep_ready       |=   1U << ep2bit(ep) ;
    a808:	430b      	orrs	r3, r1
    a80a:	4a14      	ldr	r2, [pc, #80]	; (a85c <usbd_ep_abort_all+0x16c>)
    a80c:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
    a80e:	2300      	movs	r3, #0
    a810:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    a812:	2303      	movs	r3, #3
    a814:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    a816:	2206      	movs	r2, #6
    a818:	f88d 2004 	strb.w	r2, [sp, #4]
    a81c:	f88d 0006 	strb.w	r0, [sp, #6]
    a820:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    a824:	4b12      	ldr	r3, [pc, #72]	; (a870 <usbd_ep_abort_all+0x180>)
    a826:	681b      	ldr	r3, [r3, #0]
    a828:	a801      	add	r0, sp, #4
    a82a:	4798      	blx	r3
    a82c:	e777      	b.n	a71e <usbd_ep_abort_all+0x2e>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    a82e:	4a0f      	ldr	r2, [pc, #60]	; (a86c <usbd_ep_abort_all+0x17c>)
    a830:	f240 71b4 	movw	r1, #1972	; 0x7b4
    a834:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    a836:	490f      	ldr	r1, [pc, #60]	; (a874 <usbd_ep_abort_all+0x184>)
    a838:	680a      	ldr	r2, [r1, #0]
    a83a:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
    a83c:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    a840:	f8d1 c000 	ldr.w	ip, [r1]
    a844:	ea42 020c 	orr.w	r2, r2, ip
    a848:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    a84a:	680a      	ldr	r2, [r1, #0]
    a84c:	e7c7      	b.n	a7de <usbd_ep_abort_all+0xee>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    a84e:	4b03      	ldr	r3, [pc, #12]	; (a85c <usbd_ep_abort_all+0x16c>)
    a850:	f240 12ff 	movw	r2, #511	; 0x1ff
    a854:	601a      	str	r2, [r3, #0]
}
    a856:	b003      	add	sp, #12
    a858:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a85a:	bf00      	nop
    a85c:	200024cc 	.word	0x200024cc
    a860:	2000245c 	.word	0x2000245c
    a864:	20002560 	.word	0x20002560
    a868:	200024d0 	.word	0x200024d0
    a86c:	40027800 	.word	0x40027800
    a870:	200025f0 	.word	0x200025f0
    a874:	40027804 	.word	0x40027804

0000a878 <nrfx_usbd_stop>:
{
    a878:	b510      	push	{r4, lr}
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a87a:	4b0c      	ldr	r3, [pc, #48]	; (a8ac <nrfx_usbd_stop+0x34>)
    a87c:	2280      	movs	r2, #128	; 0x80
    a87e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    a882:	2027      	movs	r0, #39	; 0x27
    a884:	f7f9 fba0 	bl	3fc8 <arch_irq_is_enabled>
    a888:	b900      	cbnz	r0, a88c <nrfx_usbd_stop+0x14>
}
    a88a:	bd10      	pop	{r4, pc}
        usbd_ep_abort_all();
    a88c:	f7ff ff30 	bl	a6f0 <usbd_ep_abort_all>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    a890:	4c07      	ldr	r4, [pc, #28]	; (a8b0 <nrfx_usbd_stop+0x38>)
    a892:	2300      	movs	r3, #0
    a894:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    a898:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
    a89c:	2027      	movs	r0, #39	; 0x27
    a89e:	f7f9 fb7f 	bl	3fa0 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    a8a2:	f04f 33ff 	mov.w	r3, #4294967295
    a8a6:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
    a8aa:	e7ee      	b.n	a88a <nrfx_usbd_stop+0x12>
    a8ac:	e000e100 	.word	0xe000e100
    a8b0:	40027000 	.word	0x40027000

0000a8b4 <nrfx_usbd_disable>:
{
    a8b4:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
    a8b6:	f7ff ffdf 	bl	a878 <nrfx_usbd_stop>
    return p_reg->INTENSET;
    a8ba:	4b0b      	ldr	r3, [pc, #44]	; (a8e8 <nrfx_usbd_disable+0x34>)
    a8bc:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
    a8c0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    a8c4:	2200      	movs	r2, #0
    a8c6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    a8ca:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    a8ce:	f7fe faff 	bl	8ed0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    a8d2:	b110      	cbz	r0, a8da <nrfx_usbd_disable+0x26>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    a8d4:	4b05      	ldr	r3, [pc, #20]	; (a8ec <nrfx_usbd_disable+0x38>)
    a8d6:	2200      	movs	r2, #0
    a8d8:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    a8da:	4b05      	ldr	r3, [pc, #20]	; (a8f0 <nrfx_usbd_disable+0x3c>)
    a8dc:	2200      	movs	r2, #0
    a8de:	701a      	strb	r2, [r3, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    a8e0:	4b04      	ldr	r3, [pc, #16]	; (a8f4 <nrfx_usbd_disable+0x40>)
    a8e2:	2201      	movs	r2, #1
    a8e4:	701a      	strb	r2, [r3, #0]
}
    a8e6:	bd08      	pop	{r3, pc}
    a8e8:	40027000 	.word	0x40027000
    a8ec:	40027c1c 	.word	0x40027c1c
    a8f0:	20002b54 	.word	0x20002b54
    a8f4:	20002b55 	.word	0x20002b55

0000a8f8 <nrfx_usbd_suspend>:
{
    a8f8:	b538      	push	{r3, r4, r5, lr}
    a8fa:	f04f 0320 	mov.w	r3, #32
    a8fe:	f3ef 8511 	mrs	r5, BASEPRI
    a902:	f383 8812 	msr	BASEPRI_MAX, r3
    a906:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
    a90a:	4b13      	ldr	r3, [pc, #76]	; (a958 <nrfx_usbd_suspend+0x60>)
    a90c:	781b      	ldrb	r3, [r3, #0]
    a90e:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    a912:	b92b      	cbnz	r3, a920 <nrfx_usbd_suspend+0x28>
	__asm__ volatile(
    a914:	f385 8811 	msr	BASEPRI, r5
    a918:	f3bf 8f6f 	isb	sy
}
    a91c:	4620      	mov	r0, r4
    a91e:	bd38      	pop	{r3, r4, r5, pc}
        usbd_ep_abort_all();
    a920:	f7ff fee6 	bl	a6f0 <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
    a924:	4b0d      	ldr	r3, [pc, #52]	; (a95c <nrfx_usbd_suspend+0x64>)
    a926:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    a92a:	f413 7f00 	tst.w	r3, #512	; 0x200
    a92e:	d111      	bne.n	a954 <nrfx_usbd_suspend+0x5c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    a930:	4b0a      	ldr	r3, [pc, #40]	; (a95c <nrfx_usbd_suspend+0x64>)
    a932:	2201      	movs	r2, #1
    a934:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    a938:	f8d3 252c 	ldr.w	r2, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
    a93c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    a940:	f413 7f00 	tst.w	r3, #512	; 0x200
    a944:	d0e6      	beq.n	a914 <nrfx_usbd_suspend+0x1c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    a946:	4b05      	ldr	r3, [pc, #20]	; (a95c <nrfx_usbd_suspend+0x64>)
    a948:	2400      	movs	r4, #0
    a94a:	f8c3 452c 	str.w	r4, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    a94e:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
}
    a952:	e7df      	b.n	a914 <nrfx_usbd_suspend+0x1c>
    bool suspended = false;
    a954:	2400      	movs	r4, #0
    a956:	e7dd      	b.n	a914 <nrfx_usbd_suspend+0x1c>
    a958:	20002b53 	.word	0x20002b53
    a95c:	40027000 	.word	0x40027000

0000a960 <nrfx_usbd_ep_abort>:
{
    a960:	b5f0      	push	{r4, r5, r6, r7, lr}
    a962:	b083      	sub	sp, #12
	__asm__ volatile(
    a964:	f04f 0320 	mov.w	r3, #32
    a968:	f3ef 8511 	mrs	r5, BASEPRI
    a96c:	f383 8812 	msr	BASEPRI_MAX, r3
    a970:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    a974:	b243      	sxtb	r3, r0
    a976:	2b00      	cmp	r3, #0
    a978:	db27      	blt.n	a9ca <nrfx_usbd_ep_abort+0x6a>
    a97a:	4c39      	ldr	r4, [pc, #228]	; (aa60 <nrfx_usbd_ep_abort+0x100>)
        NRF_USBD_EP_NR_GET(ep));
    a97c:	f000 020f 	and.w	r2, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    a980:	eb04 1402 	add.w	r4, r4, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
    a984:	2b00      	cmp	r3, #0
    a986:	db25      	blt.n	a9d4 <nrfx_usbd_ep_abort+0x74>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    a988:	4a36      	ldr	r2, [pc, #216]	; (aa64 <nrfx_usbd_ep_abort+0x104>)
    a98a:	6812      	ldr	r2, [r2, #0]
    a98c:	43d2      	mvns	r2, r2
    return NRFX_USBD_EP_BITPOS(ep);
    a98e:	f003 030f 	and.w	r3, r3, #15
    a992:	3310      	adds	r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    a994:	40da      	lsrs	r2, r3
    a996:	f012 0f01 	tst.w	r2, #1
    a99a:	d118      	bne.n	a9ce <nrfx_usbd_ep_abort+0x6e>
            p_state->handler.consumer = NULL;
    a99c:	2200      	movs	r2, #0
    a99e:	6022      	str	r2, [r4, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    a9a0:	2201      	movs	r2, #1
    a9a2:	fa02 f303 	lsl.w	r3, r2, r3
    a9a6:	492f      	ldr	r1, [pc, #188]	; (aa64 <nrfx_usbd_ep_abort+0x104>)
    a9a8:	680a      	ldr	r2, [r1, #0]
    a9aa:	ea22 0203 	bic.w	r2, r2, r3
    a9ae:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    a9b0:	492d      	ldr	r1, [pc, #180]	; (aa68 <nrfx_usbd_ep_abort+0x108>)
    a9b2:	680a      	ldr	r2, [r1, #0]
    a9b4:	ea22 0303 	bic.w	r3, r2, r3
    a9b8:	600b      	str	r3, [r1, #0]
        p_state->status = NRFX_USBD_EP_ABORTED;
    a9ba:	2303      	movs	r3, #3
    a9bc:	73a3      	strb	r3, [r4, #14]
	__asm__ volatile(
    a9be:	f385 8811 	msr	BASEPRI, r5
    a9c2:	f3bf 8f6f 	isb	sy
}
    a9c6:	b003      	add	sp, #12
    a9c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    a9ca:	4c28      	ldr	r4, [pc, #160]	; (aa6c <nrfx_usbd_ep_abort+0x10c>)
    a9cc:	e7d6      	b.n	a97c <nrfx_usbd_ep_abort+0x1c>
            nrfx_usbd_transfer_out_drop(ep);
    a9ce:	f7ff fcd1 	bl	a374 <nrfx_usbd_transfer_out_drop>
    a9d2:	e7f2      	b.n	a9ba <nrfx_usbd_ep_abort+0x5a>
        if(!NRF_USBD_EPISO_CHECK(ep))
    a9d4:	f010 0f08 	tst.w	r0, #8
    a9d8:	d10f      	bne.n	a9fa <nrfx_usbd_ep_abort+0x9a>
            if(ep != NRFX_USBD_EPIN0)
    a9da:	2880      	cmp	r0, #128	; 0x80
    a9dc:	d031      	beq.n	aa42 <nrfx_usbd_ep_abort+0xe2>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    a9de:	f202 32da 	addw	r2, r2, #986	; 0x3da
    a9e2:	0052      	lsls	r2, r2, #1
    a9e4:	4922      	ldr	r1, [pc, #136]	; (aa70 <nrfx_usbd_ep_abort+0x110>)
    a9e6:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    a9e8:	3104      	adds	r1, #4
    a9ea:	680a      	ldr	r2, [r1, #0]
    a9ec:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
    a9ee:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    a9f2:	680e      	ldr	r6, [r1, #0]
    a9f4:	4332      	orrs	r2, r6
    a9f6:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    a9f8:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    a9fa:	4a1b      	ldr	r2, [pc, #108]	; (aa68 <nrfx_usbd_ep_abort+0x108>)
    a9fc:	6811      	ldr	r1, [r2, #0]
    a9fe:	4a19      	ldr	r2, [pc, #100]	; (aa64 <nrfx_usbd_ep_abort+0x104>)
    aa00:	6816      	ldr	r6, [r2, #0]
    aa02:	ea66 0701 	orn	r7, r6, r1
    return NRFX_USBD_EP_BITPOS(ep);
    aa06:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    aa0a:	2201      	movs	r2, #1
    aa0c:	fa02 f303 	lsl.w	r3, r2, r3
    aa10:	421f      	tst	r7, r3
    aa12:	d0d4      	beq.n	a9be <nrfx_usbd_ep_abort+0x5e>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    aa14:	ea26 0603 	bic.w	r6, r6, r3
    aa18:	4a12      	ldr	r2, [pc, #72]	; (aa64 <nrfx_usbd_ep_abort+0x104>)
    aa1a:	6016      	str	r6, [r2, #0]
            m_ep_ready       |=   1U << ep2bit(ep) ;
    aa1c:	430b      	orrs	r3, r1
    aa1e:	4a12      	ldr	r2, [pc, #72]	; (aa68 <nrfx_usbd_ep_abort+0x108>)
    aa20:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
    aa22:	2300      	movs	r3, #0
    aa24:	6023      	str	r3, [r4, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    aa26:	2303      	movs	r3, #3
    aa28:	73a3      	strb	r3, [r4, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    aa2a:	2206      	movs	r2, #6
    aa2c:	f88d 2004 	strb.w	r2, [sp, #4]
    aa30:	f88d 0006 	strb.w	r0, [sp, #6]
    aa34:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    aa38:	4b0e      	ldr	r3, [pc, #56]	; (aa74 <nrfx_usbd_ep_abort+0x114>)
    aa3a:	681b      	ldr	r3, [r3, #0]
    aa3c:	a801      	add	r0, sp, #4
    aa3e:	4798      	blx	r3
    aa40:	e7bd      	b.n	a9be <nrfx_usbd_ep_abort+0x5e>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    aa42:	4a0b      	ldr	r2, [pc, #44]	; (aa70 <nrfx_usbd_ep_abort+0x110>)
    aa44:	f240 71b4 	movw	r1, #1972	; 0x7b4
    aa48:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    aa4a:	490b      	ldr	r1, [pc, #44]	; (aa78 <nrfx_usbd_ep_abort+0x118>)
    aa4c:	680a      	ldr	r2, [r1, #0]
    aa4e:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
    aa50:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    aa54:	680e      	ldr	r6, [r1, #0]
    aa56:	4332      	orrs	r2, r6
    aa58:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    aa5a:	680a      	ldr	r2, [r1, #0]
    aa5c:	e7cd      	b.n	a9fa <nrfx_usbd_ep_abort+0x9a>
    aa5e:	bf00      	nop
    aa60:	200024d0 	.word	0x200024d0
    aa64:	2000245c 	.word	0x2000245c
    aa68:	200024cc 	.word	0x200024cc
    aa6c:	20002560 	.word	0x20002560
    aa70:	40027800 	.word	0x40027800
    aa74:	200025f0 	.word	0x200025f0
    aa78:	40027804 	.word	0x40027804

0000aa7c <nrfx_usbd_ep_disable>:
{
    aa7c:	b5f0      	push	{r4, r5, r6, r7, lr}
    aa7e:	b083      	sub	sp, #12
    aa80:	4604      	mov	r4, r0
	__asm__ volatile(
    aa82:	f04f 0320 	mov.w	r3, #32
    aa86:	f3ef 8611 	mrs	r6, BASEPRI
    aa8a:	f383 8812 	msr	BASEPRI_MAX, r3
    aa8e:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    aa92:	b243      	sxtb	r3, r0
    aa94:	2b00      	cmp	r3, #0
    aa96:	db3e      	blt.n	ab16 <nrfx_usbd_ep_disable+0x9a>
    aa98:	4d4a      	ldr	r5, [pc, #296]	; (abc4 <nrfx_usbd_ep_disable+0x148>)
        NRF_USBD_EP_NR_GET(ep));
    aa9a:	f004 020f 	and.w	r2, r4, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    aa9e:	eb05 1502 	add.w	r5, r5, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
    aaa2:	2b00      	cmp	r3, #0
    aaa4:	db3d      	blt.n	ab22 <nrfx_usbd_ep_disable+0xa6>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    aaa6:	4a48      	ldr	r2, [pc, #288]	; (abc8 <nrfx_usbd_ep_disable+0x14c>)
    aaa8:	6812      	ldr	r2, [r2, #0]
    aaaa:	43d2      	mvns	r2, r2
    return NRFX_USBD_EP_BITPOS(ep);
    aaac:	f003 030f 	and.w	r3, r3, #15
    aab0:	3310      	adds	r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    aab2:	40da      	lsrs	r2, r3
    aab4:	f012 0f01 	tst.w	r2, #1
    aab8:	d12f      	bne.n	ab1a <nrfx_usbd_ep_disable+0x9e>
            p_state->handler.consumer = NULL;
    aaba:	2200      	movs	r2, #0
    aabc:	602a      	str	r2, [r5, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    aabe:	2201      	movs	r2, #1
    aac0:	fa02 f303 	lsl.w	r3, r2, r3
    aac4:	4940      	ldr	r1, [pc, #256]	; (abc8 <nrfx_usbd_ep_disable+0x14c>)
    aac6:	680a      	ldr	r2, [r1, #0]
    aac8:	ea22 0203 	bic.w	r2, r2, r3
    aacc:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    aace:	493f      	ldr	r1, [pc, #252]	; (abcc <nrfx_usbd_ep_disable+0x150>)
    aad0:	680a      	ldr	r2, [r1, #0]
    aad2:	ea22 0303 	bic.w	r3, r2, r3
    aad6:	600b      	str	r3, [r1, #0]
        p_state->status = NRFX_USBD_EP_ABORTED;
    aad8:	2303      	movs	r3, #3
    aada:	73ab      	strb	r3, [r5, #14]
	__asm__ volatile(
    aadc:	f386 8811 	msr	BASEPRI, r6
    aae0:	f3bf 8f6f 	isb	sy
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    aae4:	f004 030f 	and.w	r3, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    aae8:	b264      	sxtb	r4, r4
    aaea:	2c00      	cmp	r4, #0
    aaec:	db5e      	blt.n	abac <nrfx_usbd_ep_disable+0x130>
        p_reg->EPOUTEN &= ~(1UL << epnr);
    aaee:	4838      	ldr	r0, [pc, #224]	; (abd0 <nrfx_usbd_ep_disable+0x154>)
    aaf0:	f8d0 2514 	ldr.w	r2, [r0, #1300]	; 0x514
    aaf4:	2101      	movs	r1, #1
    aaf6:	4099      	lsls	r1, r3
    aaf8:	ea22 0201 	bic.w	r2, r2, r1
    aafc:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    ab00:	2c00      	cmp	r4, #0
    ab02:	db5d      	blt.n	abc0 <nrfx_usbd_ep_disable+0x144>
    ab04:	4a33      	ldr	r2, [pc, #204]	; (abd4 <nrfx_usbd_ep_disable+0x158>)
    ab06:	5cd2      	ldrb	r2, [r2, r3]
    ab08:	2301      	movs	r3, #1
    ab0a:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
    ab0c:	4a30      	ldr	r2, [pc, #192]	; (abd0 <nrfx_usbd_ep_disable+0x154>)
    ab0e:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    ab12:	b003      	add	sp, #12
    ab14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    ab16:	4d30      	ldr	r5, [pc, #192]	; (abd8 <nrfx_usbd_ep_disable+0x15c>)
    ab18:	e7bf      	b.n	aa9a <nrfx_usbd_ep_disable+0x1e>
            nrfx_usbd_transfer_out_drop(ep);
    ab1a:	4620      	mov	r0, r4
    ab1c:	f7ff fc2a 	bl	a374 <nrfx_usbd_transfer_out_drop>
    ab20:	e7da      	b.n	aad8 <nrfx_usbd_ep_disable+0x5c>
        if(!NRF_USBD_EPISO_CHECK(ep))
    ab22:	f014 0f08 	tst.w	r4, #8
    ab26:	d10f      	bne.n	ab48 <nrfx_usbd_ep_disable+0xcc>
            if(ep != NRFX_USBD_EPIN0)
    ab28:	2c80      	cmp	r4, #128	; 0x80
    ab2a:	d031      	beq.n	ab90 <nrfx_usbd_ep_disable+0x114>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    ab2c:	f202 32da 	addw	r2, r2, #986	; 0x3da
    ab30:	0052      	lsls	r2, r2, #1
    ab32:	492a      	ldr	r1, [pc, #168]	; (abdc <nrfx_usbd_ep_disable+0x160>)
    ab34:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    ab36:	3104      	adds	r1, #4
    ab38:	680a      	ldr	r2, [r1, #0]
    ab3a:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
    ab3c:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    ab40:	6808      	ldr	r0, [r1, #0]
    ab42:	4302      	orrs	r2, r0
    ab44:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    ab46:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    ab48:	4a20      	ldr	r2, [pc, #128]	; (abcc <nrfx_usbd_ep_disable+0x150>)
    ab4a:	6811      	ldr	r1, [r2, #0]
    ab4c:	4a1e      	ldr	r2, [pc, #120]	; (abc8 <nrfx_usbd_ep_disable+0x14c>)
    ab4e:	6810      	ldr	r0, [r2, #0]
    ab50:	ea60 0701 	orn	r7, r0, r1
    return NRFX_USBD_EP_BITPOS(ep);
    ab54:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    ab58:	2201      	movs	r2, #1
    ab5a:	fa02 f303 	lsl.w	r3, r2, r3
    ab5e:	421f      	tst	r7, r3
    ab60:	d0bc      	beq.n	aadc <nrfx_usbd_ep_disable+0x60>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    ab62:	ea20 0003 	bic.w	r0, r0, r3
    ab66:	4a18      	ldr	r2, [pc, #96]	; (abc8 <nrfx_usbd_ep_disable+0x14c>)
    ab68:	6010      	str	r0, [r2, #0]
            m_ep_ready       |=   1U << ep2bit(ep) ;
    ab6a:	430b      	orrs	r3, r1
    ab6c:	4a17      	ldr	r2, [pc, #92]	; (abcc <nrfx_usbd_ep_disable+0x150>)
    ab6e:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
    ab70:	2300      	movs	r3, #0
    ab72:	602b      	str	r3, [r5, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    ab74:	2303      	movs	r3, #3
    ab76:	73ab      	strb	r3, [r5, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    ab78:	2206      	movs	r2, #6
    ab7a:	f88d 2004 	strb.w	r2, [sp, #4]
    ab7e:	f88d 4006 	strb.w	r4, [sp, #6]
    ab82:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    ab86:	4b16      	ldr	r3, [pc, #88]	; (abe0 <nrfx_usbd_ep_disable+0x164>)
    ab88:	681b      	ldr	r3, [r3, #0]
    ab8a:	a801      	add	r0, sp, #4
    ab8c:	4798      	blx	r3
    ab8e:	e7a5      	b.n	aadc <nrfx_usbd_ep_disable+0x60>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    ab90:	4a12      	ldr	r2, [pc, #72]	; (abdc <nrfx_usbd_ep_disable+0x160>)
    ab92:	f240 71b4 	movw	r1, #1972	; 0x7b4
    ab96:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    ab98:	4912      	ldr	r1, [pc, #72]	; (abe4 <nrfx_usbd_ep_disable+0x168>)
    ab9a:	680a      	ldr	r2, [r1, #0]
    ab9c:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
    ab9e:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    aba2:	6808      	ldr	r0, [r1, #0]
    aba4:	4302      	orrs	r2, r0
    aba6:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    aba8:	680a      	ldr	r2, [r1, #0]
    abaa:	e7cd      	b.n	ab48 <nrfx_usbd_ep_disable+0xcc>
        p_reg->EPINEN &= ~(1UL << epnr);
    abac:	4808      	ldr	r0, [pc, #32]	; (abd0 <nrfx_usbd_ep_disable+0x154>)
    abae:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    abb2:	2101      	movs	r1, #1
    abb4:	4099      	lsls	r1, r3
    abb6:	ea22 0201 	bic.w	r2, r2, r1
    abba:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    abbe:	e79f      	b.n	ab00 <nrfx_usbd_ep_disable+0x84>
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    abc0:	4a09      	ldr	r2, [pc, #36]	; (abe8 <nrfx_usbd_ep_disable+0x16c>)
    abc2:	e7a0      	b.n	ab06 <nrfx_usbd_ep_disable+0x8a>
    abc4:	200024d0 	.word	0x200024d0
    abc8:	2000245c 	.word	0x2000245c
    abcc:	200024cc 	.word	0x200024cc
    abd0:	40027000 	.word	0x40027000
    abd4:	0001581c 	.word	0x0001581c
    abd8:	20002560 	.word	0x20002560
    abdc:	40027800 	.word	0x40027800
    abe0:	200025f0 	.word	0x200025f0
    abe4:	40027804 	.word	0x40027804
    abe8:	000157fc 	.word	0x000157fc

0000abec <lfs_dir_traverse_filter>:

    return 0;
}

static int lfs_dir_traverse_filter(void *p,
        lfs_tag_t tag, const void *buffer) {
    abec:	b410      	push	{r4}
    (void)buffer;

    // which mask depends on unique bit in tag structure
    uint32_t mask = (tag & LFS_MKTAG(0x100, 0, 0))
            ? LFS_MKTAG(0x7ff, 0x3ff, 0)
            : LFS_MKTAG(0x700, 0x3ff, 0);
    abee:	f011 5f80 	tst.w	r1, #268435456	; 0x10000000
    abf2:	d01c      	beq.n	ac2e <lfs_dir_traverse_filter+0x42>
    abf4:	4a19      	ldr	r2, [pc, #100]	; (ac5c <lfs_dir_traverse_filter+0x70>)

    // check for redundancy
    if ((mask & tag) == (mask & *filtertag) ||
    abf6:	6803      	ldr	r3, [r0, #0]
    abf8:	ea83 0401 	eor.w	r4, r3, r1
    abfc:	4214      	tst	r4, r2
    abfe:	d024      	beq.n	ac4a <lfs_dir_traverse_filter+0x5e>
    return ((int32_t)(tag << 22) >> 22) == -1;
    ac00:	f343 0209 	sbfx	r2, r3, #0, #10
    if ((mask & tag) == (mask & *filtertag) ||
    ac04:	f1b2 3fff 	cmp.w	r2, #4294967295
    ac08:	d022      	beq.n	ac50 <lfs_dir_traverse_filter+0x64>
            lfs_tag_isdelete(*filtertag) ||
            (LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) == (
    ac0a:	4c14      	ldr	r4, [pc, #80]	; (ac5c <lfs_dir_traverse_filter+0x70>)
    ac0c:	400c      	ands	r4, r1
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
                    (LFS_MKTAG(0, 0x3ff, 0) & *filtertag))) {
    ac0e:	4a14      	ldr	r2, [pc, #80]	; (ac60 <lfs_dir_traverse_filter+0x74>)
    ac10:	401a      	ands	r2, r3
                LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
    ac12:	f042 429f 	orr.w	r2, r2, #1333788672	; 0x4f800000
    ac16:	f442 02e0 	orr.w	r2, r2, #7340032	; 0x700000
            lfs_tag_isdelete(*filtertag) ||
    ac1a:	4294      	cmp	r4, r2
    ac1c:	d01a      	beq.n	ac54 <lfs_dir_traverse_filter+0x68>
    return (tag & 0x70000000) >> 20;
    ac1e:	0d0a      	lsrs	r2, r1, #20
    ac20:	f402 64e0 	and.w	r4, r2, #1792	; 0x700
        return true;
    }

    // check if we need to adjust for created/deleted tags
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
    ac24:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    ac28:	d003      	beq.n	ac32 <lfs_dir_traverse_filter+0x46>
            lfs_tag_id(tag) <= lfs_tag_id(*filtertag)) {
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    }

    return false;
    ac2a:	2000      	movs	r0, #0
    ac2c:	e00e      	b.n	ac4c <lfs_dir_traverse_filter+0x60>
            : LFS_MKTAG(0x700, 0x3ff, 0);
    ac2e:	4a0d      	ldr	r2, [pc, #52]	; (ac64 <lfs_dir_traverse_filter+0x78>)
    ac30:	e7e1      	b.n	abf6 <lfs_dir_traverse_filter+0xa>
    return (tag & 0x000ffc00) >> 10;
    ac32:	f3c1 2189 	ubfx	r1, r1, #10, #10
    ac36:	f3c3 2489 	ubfx	r4, r3, #10, #10
    if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
    ac3a:	428c      	cmp	r4, r1
    ac3c:	d30c      	bcc.n	ac58 <lfs_dir_traverse_filter+0x6c>
    return (int8_t)lfs_tag_chunk(tag);
    ac3e:	b252      	sxtb	r2, r2
        *filtertag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    ac40:	eb03 2382 	add.w	r3, r3, r2, lsl #10
    ac44:	6003      	str	r3, [r0, #0]
    return false;
    ac46:	2000      	movs	r0, #0
    ac48:	e000      	b.n	ac4c <lfs_dir_traverse_filter+0x60>
        return true;
    ac4a:	2001      	movs	r0, #1
}
    ac4c:	bc10      	pop	{r4}
    ac4e:	4770      	bx	lr
        return true;
    ac50:	2001      	movs	r0, #1
    ac52:	e7fb      	b.n	ac4c <lfs_dir_traverse_filter+0x60>
    ac54:	2001      	movs	r0, #1
    ac56:	e7f9      	b.n	ac4c <lfs_dir_traverse_filter+0x60>
    return false;
    ac58:	2000      	movs	r0, #0
    ac5a:	e7f7      	b.n	ac4c <lfs_dir_traverse_filter+0x60>
    ac5c:	7ffffc00 	.word	0x7ffffc00
    ac60:	000ffc00 	.word	0x000ffc00
    ac64:	700ffc00 	.word	0x700ffc00

0000ac68 <lfs_fs_prepmove>:
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
            ((uint32_t)lfs_gstate_hasorphans(&lfs->gstate) << 31));
}

static void lfs_fs_prepmove(lfs_t *lfs,
        uint16_t id, const lfs_block_t pair[2]) {
    ac68:	b410      	push	{r4}
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
    ac6a:	6b04      	ldr	r4, [r0, #48]	; 0x30
    ac6c:	4b10      	ldr	r3, [pc, #64]	; (acb0 <lfs_fs_prepmove+0x48>)
    ac6e:	4023      	ands	r3, r4
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
    ac70:	f240 34ff 	movw	r4, #1023	; 0x3ff
    ac74:	42a1      	cmp	r1, r4
    ac76:	d014      	beq.n	aca2 <lfs_fs_prepmove+0x3a>
    ac78:	028c      	lsls	r4, r1, #10
    ac7a:	f044 449f 	orr.w	r4, r4, #1333788672	; 0x4f800000
    ac7e:	f444 04e0 	orr.w	r4, r4, #7340032	; 0x700000
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x7ff, 0x3ff, 0)) |
    ac82:	4323      	orrs	r3, r4
    ac84:	6303      	str	r3, [r0, #48]	; 0x30
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
    ac86:	f240 33ff 	movw	r3, #1023	; 0x3ff
    ac8a:	4299      	cmp	r1, r3
    ac8c:	d00b      	beq.n	aca6 <lfs_fs_prepmove+0x3e>
    ac8e:	6813      	ldr	r3, [r2, #0]
    ac90:	6343      	str	r3, [r0, #52]	; 0x34
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
    ac92:	f240 33ff 	movw	r3, #1023	; 0x3ff
    ac96:	4299      	cmp	r1, r3
    ac98:	d007      	beq.n	acaa <lfs_fs_prepmove+0x42>
    ac9a:	6853      	ldr	r3, [r2, #4]
    ac9c:	6383      	str	r3, [r0, #56]	; 0x38
}
    ac9e:	bc10      	pop	{r4}
    aca0:	4770      	bx	lr
            ((id != 0x3ff) ? LFS_MKTAG(LFS_TYPE_DELETE, id, 0) : 0));
    aca2:	2400      	movs	r4, #0
    aca4:	e7ed      	b.n	ac82 <lfs_fs_prepmove+0x1a>
    lfs->gstate.pair[0] = (id != 0x3ff) ? pair[0] : 0;
    aca6:	2300      	movs	r3, #0
    aca8:	e7f2      	b.n	ac90 <lfs_fs_prepmove+0x28>
    lfs->gstate.pair[1] = (id != 0x3ff) ? pair[1] : 0;
    acaa:	2300      	movs	r3, #0
    acac:	e7f6      	b.n	ac9c <lfs_fs_prepmove+0x34>
    acae:	bf00      	nop
    acb0:	800003ff 	.word	0x800003ff

0000acb4 <lfs_dir_fetchmatch>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
    acb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    acb8:	b097      	sub	sp, #92	; 0x5c
    acba:	4615      	mov	r5, r2
    acbc:	9309      	str	r3, [sp, #36]	; 0x24
    if (pair[0] >= lfs->cfg->block_count || pair[1] >= lfs->cfg->block_count) {
    acbe:	6812      	ldr	r2, [r2, #0]
    acc0:	6e83      	ldr	r3, [r0, #104]	; 0x68
    acc2:	6a1b      	ldr	r3, [r3, #32]
    acc4:	429a      	cmp	r2, r3
    acc6:	f080 828e 	bcs.w	b1e6 <lfs_dir_fetchmatch+0x532>
    acca:	4683      	mov	fp, r0
    accc:	4689      	mov	r9, r1
    acce:	686a      	ldr	r2, [r5, #4]
    acd0:	4293      	cmp	r3, r2
    acd2:	f240 828c 	bls.w	b1ee <lfs_dir_fetchmatch+0x53a>
    uint32_t revs[2] = {0, 0};
    acd6:	2600      	movs	r6, #0
    acd8:	9612      	str	r6, [sp, #72]	; 0x48
    acda:	9613      	str	r6, [sp, #76]	; 0x4c
    for (int i = 0; i < 2; i++) {
    acdc:	4634      	mov	r4, r6
    acde:	e000      	b.n	ace2 <lfs_dir_fetchmatch+0x2e>
    ace0:	3401      	adds	r4, #1
    ace2:	2c01      	cmp	r4, #1
    ace4:	dc2b      	bgt.n	ad3e <lfs_dir_fetchmatch+0x8a>
                pair[i], 0, &revs[i], sizeof(revs[i]));
    ace6:	00a7      	lsls	r7, r4, #2
    ace8:	ab12      	add	r3, sp, #72	; 0x48
    acea:	eb03 0284 	add.w	r2, r3, r4, lsl #2
        int err = lfs_bd_read(lfs,
    acee:	2304      	movs	r3, #4
    acf0:	9303      	str	r3, [sp, #12]
    acf2:	9202      	str	r2, [sp, #8]
    acf4:	2100      	movs	r1, #0
    acf6:	9101      	str	r1, [sp, #4]
    acf8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
    acfc:	9200      	str	r2, [sp, #0]
    acfe:	465a      	mov	r2, fp
    ad00:	4658      	mov	r0, fp
    ad02:	f007 fbfd 	bl	12500 <lfs_bd_read>
        revs[i] = lfs_fromle32(revs[i]);
    ad06:	ab16      	add	r3, sp, #88	; 0x58
    ad08:	441f      	add	r7, r3
    ad0a:	f857 2c10 	ldr.w	r2, [r7, #-16]
        if (err && err != LFS_ERR_CORRUPT) {
    ad0e:	4603      	mov	r3, r0
    ad10:	b118      	cbz	r0, ad1a <lfs_dir_fetchmatch+0x66>
    ad12:	f110 0f54 	cmn.w	r0, #84	; 0x54
    ad16:	f040 826e 	bne.w	b1f6 <lfs_dir_fetchmatch+0x542>
        if (err != LFS_ERR_CORRUPT &&
    ad1a:	f113 0f54 	cmn.w	r3, #84	; 0x54
    ad1e:	d0df      	beq.n	ace0 <lfs_dir_fetchmatch+0x2c>
                lfs_scmp(revs[i], revs[(i+1)%2]) > 0) {
    ad20:	1c63      	adds	r3, r4, #1
    ad22:	f003 0301 	and.w	r3, r3, #1
    ad26:	bf48      	it	mi
    ad28:	425b      	negmi	r3, r3
    ad2a:	a916      	add	r1, sp, #88	; 0x58
    ad2c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
    ad30:	f853 3c10 	ldr.w	r3, [r3, #-16]
}

// Find the sequence comparison of a and b, this is the distance
// between a and b ignoring overflow
static inline int lfs_scmp(uint32_t a, uint32_t b) {
    return (int)(unsigned)(a - b);
    ad34:	1ad2      	subs	r2, r2, r3
        if (err != LFS_ERR_CORRUPT &&
    ad36:	2a00      	cmp	r2, #0
    ad38:	ddd2      	ble.n	ace0 <lfs_dir_fetchmatch+0x2c>
            r = i;
    ad3a:	4626      	mov	r6, r4
    ad3c:	e7d0      	b.n	ace0 <lfs_dir_fetchmatch+0x2c>
    dir->pair[0] = pair[(r+0)%2];
    ad3e:	2e00      	cmp	r6, #0
    ad40:	f006 0301 	and.w	r3, r6, #1
    ad44:	bfb8      	it	lt
    ad46:	425b      	neglt	r3, r3
    ad48:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
    ad4c:	f8c9 2000 	str.w	r2, [r9]
    dir->pair[1] = pair[(r+1)%2];
    ad50:	3601      	adds	r6, #1
    ad52:	f006 0601 	and.w	r6, r6, #1
    ad56:	bf48      	it	mi
    ad58:	4276      	negmi	r6, r6
    ad5a:	960a      	str	r6, [sp, #40]	; 0x28
    ad5c:	f855 2026 	ldr.w	r2, [r5, r6, lsl #2]
    ad60:	f8c9 2004 	str.w	r2, [r9, #4]
    dir->rev = revs[(r+0)%2];
    ad64:	aa16      	add	r2, sp, #88	; 0x58
    ad66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    ad6a:	f853 3c10 	ldr.w	r3, [r3, #-16]
    ad6e:	f8c9 3008 	str.w	r3, [r9, #8]
    dir->off = 0; // nonzero = found some commits
    ad72:	2300      	movs	r3, #0
    ad74:	f8c9 300c 	str.w	r3, [r9, #12]
    for (int i = 0; i < 2; i++) {
    ad78:	469a      	mov	sl, r3
    lfs_stag_t besttag = -1;
    ad7a:	f04f 33ff 	mov.w	r3, #4294967295
    ad7e:	9305      	str	r3, [sp, #20]
    for (int i = 0; i < 2; i++) {
    ad80:	e053      	b.n	ae2a <lfs_dir_fetchmatch+0x176>
                if (err == LFS_ERR_CORRUPT) {
    ad82:	f110 0f54 	cmn.w	r0, #84	; 0x54
    ad86:	f040 81b0 	bne.w	b0ea <lfs_dir_fetchmatch+0x436>
                    dir->erased = false;
    ad8a:	2300      	movs	r3, #0
    ad8c:	f889 3016 	strb.w	r3, [r9, #22]
                    break;
    ad90:	e034      	b.n	adfc <lfs_dir_fetchmatch+0x148>
    return (tag & 0x70000000) >> 20;
    ad92:	ea4f 5318 	mov.w	r3, r8, lsr #20
    ad96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
    ad9a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    ad9e:	d005      	beq.n	adac <lfs_dir_fetchmatch+0xf8>
    ada0:	9b07      	ldr	r3, [sp, #28]
    ada2:	f003 0301 	and.w	r3, r3, #1
    ada6:	f889 3016 	strb.w	r3, [r9, #22]
                break;
    adaa:	e027      	b.n	adfc <lfs_dir_fetchmatch+0x148>
                        dir->off % lfs->cfg->prog_size == 0);
    adac:	f8d9 100c 	ldr.w	r1, [r9, #12]
    adb0:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
    adb4:	699a      	ldr	r2, [r3, #24]
    adb6:	fbb1 f3f2 	udiv	r3, r1, r2
    adba:	fb02 1313 	mls	r3, r2, r3, r1
                dir->erased = (lfs_tag_type1(ptag) == LFS_TYPE_CRC &&
    adbe:	2b00      	cmp	r3, #0
    adc0:	d1ee      	bne.n	ada0 <lfs_dir_fetchmatch+0xec>
    adc2:	2301      	movs	r3, #1
    adc4:	9307      	str	r3, [sp, #28]
    adc6:	e7eb      	b.n	ada0 <lfs_dir_fetchmatch+0xec>
                dir->erased = false;
    adc8:	2300      	movs	r3, #0
    adca:	f889 3016 	strb.w	r3, [r9, #22]
                break;
    adce:	e015      	b.n	adfc <lfs_dir_fetchmatch+0x148>
                err = lfs_bd_read(lfs,
    add0:	2204      	movs	r2, #4
    add2:	9203      	str	r2, [sp, #12]
    add4:	aa0d      	add	r2, sp, #52	; 0x34
    add6:	9202      	str	r2, [sp, #8]
    add8:	1d32      	adds	r2, r6, #4
    adda:	9201      	str	r2, [sp, #4]
    addc:	f8d9 2000 	ldr.w	r2, [r9]
    ade0:	9200      	str	r2, [sp, #0]
    ade2:	465a      	mov	r2, fp
    ade4:	2100      	movs	r1, #0
    ade6:	4658      	mov	r0, fp
    ade8:	f007 fb8a 	bl	12500 <lfs_bd_read>
                if (err) {
    adec:	2800      	cmp	r0, #0
    adee:	d136      	bne.n	ae5e <lfs_dir_fetchmatch+0x1aa>
                dcrc = lfs_fromle32(dcrc);
    adf0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
                if (crc != dcrc) {
    adf2:	42a3      	cmp	r3, r4
    adf4:	d03c      	beq.n	ae70 <lfs_dir_fetchmatch+0x1bc>
                    dir->erased = false;
    adf6:	2300      	movs	r3, #0
    adf8:	f889 3016 	strb.w	r3, [r9, #22]
        if (dir->off > 0) {
    adfc:	f8d9 300c 	ldr.w	r3, [r9, #12]
    ae00:	2b00      	cmp	r3, #0
    ae02:	f040 8175 	bne.w	b0f0 <lfs_dir_fetchmatch+0x43c>
    lfs_block_t t = pair[0];
    ae06:	f8d9 3000 	ldr.w	r3, [r9]
    pair[0] = pair[1];
    ae0a:	f8d9 2004 	ldr.w	r2, [r9, #4]
    ae0e:	f8c9 2000 	str.w	r2, [r9]
    pair[1] = t;
    ae12:	f8c9 3004 	str.w	r3, [r9, #4]
        dir->rev = revs[(r+1)%2];
    ae16:	aa16      	add	r2, sp, #88	; 0x58
    ae18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ae1a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    ae1e:	f853 3c10 	ldr.w	r3, [r3, #-16]
    ae22:	f8c9 3008 	str.w	r3, [r9, #8]
    for (int i = 0; i < 2; i++) {
    ae26:	f10a 0a01 	add.w	sl, sl, #1
    ae2a:	f1ba 0f01 	cmp.w	sl, #1
    ae2e:	f300 81b6 	bgt.w	b19e <lfs_dir_fetchmatch+0x4ea>
        lfs_block_t temptail[2] = {LFS_BLOCK_NULL, LFS_BLOCK_NULL};
    ae32:	4abc      	ldr	r2, [pc, #752]	; (b124 <lfs_dir_fetchmatch+0x470>)
    ae34:	ab0e      	add	r3, sp, #56	; 0x38
    ae36:	e892 0003 	ldmia.w	r2, {r0, r1}
    ae3a:	e883 0003 	stmia.w	r3, {r0, r1}
        uint32_t crc = lfs_crc(0xffffffff, &dir->rev, sizeof(dir->rev));
    ae3e:	2204      	movs	r2, #4
    ae40:	f109 0108 	add.w	r1, r9, #8
    ae44:	f04f 30ff 	mov.w	r0, #4294967295
    ae48:	f002 fb8a 	bl	d560 <lfs_crc>
    ae4c:	4604      	mov	r4, r0
        lfs_stag_t tempbesttag = besttag;
    ae4e:	9b05      	ldr	r3, [sp, #20]
    ae50:	9308      	str	r3, [sp, #32]
        bool tempsplit = false;
    ae52:	2600      	movs	r6, #0
    ae54:	960b      	str	r6, [sp, #44]	; 0x2c
        uint16_t tempcount = 0;
    ae56:	9606      	str	r6, [sp, #24]
        lfs_tag_t ptag = 0xffffffff;
    ae58:	f04f 38ff 	mov.w	r8, #4294967295
    ae5c:	e066      	b.n	af2c <lfs_dir_fetchmatch+0x278>
                    if (err == LFS_ERR_CORRUPT) {
    ae5e:	f110 0f54 	cmn.w	r0, #84	; 0x54
    ae62:	d103      	bne.n	ae6c <lfs_dir_fetchmatch+0x1b8>
                        dir->erased = false;
    ae64:	2300      	movs	r3, #0
    ae66:	f889 3016 	strb.w	r3, [r9, #22]
                        break;
    ae6a:	e7c7      	b.n	adfc <lfs_dir_fetchmatch+0x148>
                    return err;
    ae6c:	9005      	str	r0, [sp, #20]
    ae6e:	e1b6      	b.n	b1de <lfs_dir_fetchmatch+0x52a>
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
    ae70:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return (tag & 0x0ff00000) >> 20;
    ae72:	ea4f 5813 	mov.w	r8, r3, lsr #20
                ptag ^= (lfs_tag_t)(lfs_tag_chunk(tag) & 1U) << 31;
    ae76:	ea85 78c8 	eor.w	r8, r5, r8, lsl #31
                lfs->seed ^= crc;
    ae7a:	f8db 202c 	ldr.w	r2, [fp, #44]	; 0x2c
    ae7e:	4062      	eors	r2, r4
    ae80:	f8cb 202c 	str.w	r2, [fp, #44]	; 0x2c
    return ((int32_t)(tag << 22) >> 22) == -1;
    ae84:	f343 0209 	sbfx	r2, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    ae88:	f1b2 3fff 	cmp.w	r2, #4294967295
    ae8c:	bf08      	it	eq
    ae8e:	3301      	addeq	r3, #1
    return tag & 0x000003ff;
    ae90:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    ae94:	3304      	adds	r3, #4
                dir->off = off + lfs_tag_dsize(tag);
    ae96:	4433      	add	r3, r6
    ae98:	f8c9 300c 	str.w	r3, [r9, #12]
                dir->etag = ptag;
    ae9c:	f8c9 8010 	str.w	r8, [r9, #16]
                dir->count = tempcount;
    aea0:	9b06      	ldr	r3, [sp, #24]
    aea2:	f8a9 3014 	strh.w	r3, [r9, #20]
                dir->tail[0] = temptail[0];
    aea6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    aea8:	f8c9 3018 	str.w	r3, [r9, #24]
                dir->tail[1] = temptail[1];
    aeac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    aeae:	f8c9 301c 	str.w	r3, [r9, #28]
                dir->split = tempsplit;
    aeb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    aeb4:	f889 3017 	strb.w	r3, [r9, #23]
                besttag = tempbesttag;
    aeb8:	9b08      	ldr	r3, [sp, #32]
    aeba:	9305      	str	r3, [sp, #20]
                crc = 0xffffffff;
    aebc:	f04f 34ff 	mov.w	r4, #4294967295
    aec0:	e034      	b.n	af2c <lfs_dir_fetchmatch+0x278>
                    if (err == LFS_ERR_CORRUPT) {
    aec2:	f110 0f54 	cmn.w	r0, #84	; 0x54
    aec6:	d10f      	bne.n	aee8 <lfs_dir_fetchmatch+0x234>
                        dir->erased = false;
    aec8:	2300      	movs	r3, #0
    aeca:	f889 3016 	strb.w	r3, [r9, #22]
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
    aece:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
    aed0:	0d1a      	lsrs	r2, r3, #20
            if (lfs_tag_type1(tag) == LFS_TYPE_NAME) {
    aed2:	f412 61e0 	ands.w	r1, r2, #1792	; 0x700
    aed6:	d109      	bne.n	aeec <lfs_dir_fetchmatch+0x238>
    return (tag & 0x000ffc00) >> 10;
    aed8:	f3c3 2389 	ubfx	r3, r3, #10, #10
                if (lfs_tag_id(tag) >= tempcount) {
    aedc:	9a06      	ldr	r2, [sp, #24]
    aede:	4293      	cmp	r3, r2
    aee0:	d30c      	bcc.n	aefc <lfs_dir_fetchmatch+0x248>
                    tempcount = lfs_tag_id(tag) + 1;
    aee2:	3301      	adds	r3, #1
    aee4:	9306      	str	r3, [sp, #24]
    aee6:	e009      	b.n	aefc <lfs_dir_fetchmatch+0x248>
                    return err;
    aee8:	9005      	str	r0, [sp, #20]
    aeea:	e178      	b.n	b1de <lfs_dir_fetchmatch+0x52a>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_SPLICE) {
    aeec:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
    aef0:	f000 8090 	beq.w	b014 <lfs_dir_fetchmatch+0x360>
            } else if (lfs_tag_type1(tag) == LFS_TYPE_TAIL) {
    aef4:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
    aef8:	f000 80b5 	beq.w	b066 <lfs_dir_fetchmatch+0x3b2>
            if ((fmask & tag) == (fmask & ftag)) {
    aefc:	990c      	ldr	r1, [sp, #48]	; 0x30
    aefe:	9b20      	ldr	r3, [sp, #128]	; 0x80
    af00:	404b      	eors	r3, r1
    af02:	9a09      	ldr	r2, [sp, #36]	; 0x24
    af04:	4213      	tst	r3, r2
    af06:	d110      	bne.n	af2a <lfs_dir_fetchmatch+0x276>
                        dir->pair[0], off+sizeof(tag)});
    af08:	f8d9 3000 	ldr.w	r3, [r9]
                int res = cb(data, tag, &(struct lfs_diskoff){
    af0c:	9314      	str	r3, [sp, #80]	; 0x50
                        dir->pair[0], off+sizeof(tag)});
    af0e:	1d33      	adds	r3, r6, #4
                int res = cb(data, tag, &(struct lfs_diskoff){
    af10:	9315      	str	r3, [sp, #84]	; 0x54
    af12:	aa14      	add	r2, sp, #80	; 0x50
    af14:	9823      	ldr	r0, [sp, #140]	; 0x8c
    af16:	9b22      	ldr	r3, [sp, #136]	; 0x88
    af18:	4798      	blx	r3
                if (res < 0) {
    af1a:	2800      	cmp	r0, #0
    af1c:	f2c0 80c2 	blt.w	b0a4 <lfs_dir_fetchmatch+0x3f0>
                if (res == LFS_CMP_EQ) {
    af20:	2800      	cmp	r0, #0
    af22:	f040 80c8 	bne.w	b0b6 <lfs_dir_fetchmatch+0x402>
                    tempbesttag = tag;
    af26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    af28:	9308      	str	r3, [sp, #32]
            ptag = tag;
    af2a:	46a8      	mov	r8, r5
    return ((int32_t)(tag << 22) >> 22) == -1;
    af2c:	f348 0309 	sbfx	r3, r8, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    af30:	f1b3 3fff 	cmp.w	r3, #4294967295
    af34:	bf14      	ite	ne
    af36:	4643      	movne	r3, r8
    af38:	f108 0301 	addeq.w	r3, r8, #1
    return tag & 0x000003ff;
    af3c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    af40:	3304      	adds	r3, #4
            off += lfs_tag_dsize(ptag);
    af42:	441e      	add	r6, r3
            int err = lfs_bd_read(lfs,
    af44:	465f      	mov	r7, fp
                    NULL, &lfs->rcache, lfs->cfg->block_size,
    af46:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
            int err = lfs_bd_read(lfs,
    af4a:	69db      	ldr	r3, [r3, #28]
    af4c:	2204      	movs	r2, #4
    af4e:	9203      	str	r2, [sp, #12]
    af50:	aa0c      	add	r2, sp, #48	; 0x30
    af52:	9202      	str	r2, [sp, #8]
    af54:	9601      	str	r6, [sp, #4]
    af56:	f8d9 2000 	ldr.w	r2, [r9]
    af5a:	9200      	str	r2, [sp, #0]
    af5c:	465a      	mov	r2, fp
    af5e:	2100      	movs	r1, #0
    af60:	4658      	mov	r0, fp
    af62:	f007 facd 	bl	12500 <lfs_bd_read>
            if (err) {
    af66:	9007      	str	r0, [sp, #28]
    af68:	2800      	cmp	r0, #0
    af6a:	f47f af0a 	bne.w	ad82 <lfs_dir_fetchmatch+0xce>
            crc = lfs_crc(crc, &tag, sizeof(tag));
    af6e:	2204      	movs	r2, #4
    af70:	a90c      	add	r1, sp, #48	; 0x30
    af72:	4620      	mov	r0, r4
    af74:	f002 faf4 	bl	d560 <lfs_crc>
    af78:	4604      	mov	r4, r0
            tag = lfs_frombe32(tag) ^ ptag;
    af7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
static inline uint32_t lfs_frombe32(uint32_t a) {
#if !defined(LFS_NO_INTRINSICS) && ( \
    (defined(  BYTE_ORDER  ) && defined(  ORDER_LITTLE_ENDIAN  ) &&   BYTE_ORDER   ==   ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER  ) && defined(__ORDER_LITTLE_ENDIAN  ) && __BYTE_ORDER   == __ORDER_LITTLE_ENDIAN  ) || \
    (defined(__BYTE_ORDER__) && defined(__ORDER_LITTLE_ENDIAN__) && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__))
    return __builtin_bswap32(a);
    af7c:	ba2d      	rev	r5, r5
    af7e:	ea85 0508 	eor.w	r5, r5, r8
    af82:	950c      	str	r5, [sp, #48]	; 0x30
            if (!lfs_tag_isvalid(tag)) {
    af84:	2d00      	cmp	r5, #0
    af86:	f6ff af04 	blt.w	ad92 <lfs_dir_fetchmatch+0xde>
    return ((int32_t)(tag << 22) >> 22) == -1;
    af8a:	f345 0209 	sbfx	r2, r5, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    af8e:	f1b2 3fff 	cmp.w	r2, #4294967295
    af92:	bf14      	ite	ne
    af94:	462a      	movne	r2, r5
    af96:	1c6a      	addeq	r2, r5, #1
    return tag & 0x000003ff;
    af98:	f3c2 0209 	ubfx	r2, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    af9c:	3204      	adds	r2, #4
            } else if (off + lfs_tag_dsize(tag) > lfs->cfg->block_size) {
    af9e:	4432      	add	r2, r6
    afa0:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
    afa4:	69db      	ldr	r3, [r3, #28]
    afa6:	429a      	cmp	r2, r3
    afa8:	f63f af0e 	bhi.w	adc8 <lfs_dir_fetchmatch+0x114>
    return (tag & 0x70000000) >> 20;
    afac:	0d2a      	lsrs	r2, r5, #20
    afae:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
            if (lfs_tag_type1(tag) == LFS_TYPE_CRC) {
    afb2:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
    afb6:	f43f af0b 	beq.w	add0 <lfs_dir_fetchmatch+0x11c>
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
    afba:	f04f 0804 	mov.w	r8, #4
    afbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    return ((int32_t)(tag << 22) >> 22) == -1;
    afc0:	f343 0209 	sbfx	r2, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    afc4:	f1b2 3fff 	cmp.w	r2, #4294967295
    afc8:	bf08      	it	eq
    afca:	3301      	addeq	r3, #1
    return tag & 0x000003ff;
    afcc:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    afd0:	3304      	adds	r3, #4
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
    afd2:	4543      	cmp	r3, r8
    afd4:	f67f af7b 	bls.w	aece <lfs_dir_fetchmatch+0x21a>
                        NULL, &lfs->rcache, lfs->cfg->block_size,
    afd8:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
                err = lfs_bd_read(lfs,
    afdc:	69db      	ldr	r3, [r3, #28]
    afde:	2201      	movs	r2, #1
    afe0:	9203      	str	r2, [sp, #12]
    afe2:	aa0d      	add	r2, sp, #52	; 0x34
    afe4:	9202      	str	r2, [sp, #8]
    afe6:	eb06 0208 	add.w	r2, r6, r8
    afea:	9201      	str	r2, [sp, #4]
    afec:	f8d9 2000 	ldr.w	r2, [r9]
    aff0:	9200      	str	r2, [sp, #0]
    aff2:	463a      	mov	r2, r7
    aff4:	2100      	movs	r1, #0
    aff6:	4658      	mov	r0, fp
    aff8:	f007 fa82 	bl	12500 <lfs_bd_read>
                if (err) {
    affc:	2800      	cmp	r0, #0
    affe:	f47f af60 	bne.w	aec2 <lfs_dir_fetchmatch+0x20e>
                crc = lfs_crc(crc, &dat, 1);
    b002:	2201      	movs	r2, #1
    b004:	a90d      	add	r1, sp, #52	; 0x34
    b006:	4620      	mov	r0, r4
    b008:	f002 faaa 	bl	d560 <lfs_crc>
    b00c:	4604      	mov	r4, r0
            for (lfs_off_t j = sizeof(tag); j < lfs_tag_dsize(tag); j++) {
    b00e:	f108 0801 	add.w	r8, r8, #1
    b012:	e7d4      	b.n	afbe <lfs_dir_fetchmatch+0x30a>
    return (int8_t)lfs_tag_chunk(tag);
    b014:	b252      	sxtb	r2, r2
                tempcount += lfs_tag_splice(tag);
    b016:	9906      	ldr	r1, [sp, #24]
    b018:	4411      	add	r1, r2
    b01a:	b289      	uxth	r1, r1
    b01c:	9106      	str	r1, [sp, #24]
                        (LFS_MKTAG(0, 0x3ff, 0) & tempbesttag))) {
    b01e:	9908      	ldr	r1, [sp, #32]
    b020:	4608      	mov	r0, r1
    b022:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    b026:	f421 0170 	bic.w	r1, r1, #15728640	; 0xf00000
    b02a:	f421 717f 	bic.w	r1, r1, #1020	; 0x3fc
    b02e:	f021 0103 	bic.w	r1, r1, #3
                if (tag == (LFS_MKTAG(LFS_TYPE_DELETE, 0, 0) |
    b032:	f041 419f 	orr.w	r1, r1, #1333788672	; 0x4f800000
    b036:	f441 01e0 	orr.w	r1, r1, #7340032	; 0x700000
    b03a:	428b      	cmp	r3, r1
    b03c:	d00f      	beq.n	b05e <lfs_dir_fetchmatch+0x3aa>
                } else if (tempbesttag != -1 &&
    b03e:	9908      	ldr	r1, [sp, #32]
    b040:	f1b1 3fff 	cmp.w	r1, #4294967295
    b044:	f43f af5a 	beq.w	aefc <lfs_dir_fetchmatch+0x248>
    return (tag & 0x000ffc00) >> 10;
    b048:	f3c3 2389 	ubfx	r3, r3, #10, #10
    b04c:	f3c0 2189 	ubfx	r1, r0, #10, #10
                } else if (tempbesttag != -1 &&
    b050:	428b      	cmp	r3, r1
    b052:	f63f af53 	bhi.w	aefc <lfs_dir_fetchmatch+0x248>
                    tempbesttag += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    b056:	eb00 2382 	add.w	r3, r0, r2, lsl #10
    b05a:	9308      	str	r3, [sp, #32]
    b05c:	e74e      	b.n	aefc <lfs_dir_fetchmatch+0x248>
                    tempbesttag |= 0x80000000;
    b05e:	f040 4300 	orr.w	r3, r0, #2147483648	; 0x80000000
    b062:	9308      	str	r3, [sp, #32]
    b064:	e74a      	b.n	aefc <lfs_dir_fetchmatch+0x248>
                tempsplit = (lfs_tag_chunk(tag) & 1);
    b066:	f002 0301 	and.w	r3, r2, #1
    b06a:	930b      	str	r3, [sp, #44]	; 0x2c
                        NULL, &lfs->rcache, lfs->cfg->block_size,
    b06c:	f8db 3068 	ldr.w	r3, [fp, #104]	; 0x68
                err = lfs_bd_read(lfs,
    b070:	69db      	ldr	r3, [r3, #28]
    b072:	2208      	movs	r2, #8
    b074:	9203      	str	r2, [sp, #12]
    b076:	aa0e      	add	r2, sp, #56	; 0x38
    b078:	9202      	str	r2, [sp, #8]
    b07a:	1d32      	adds	r2, r6, #4
    b07c:	9201      	str	r2, [sp, #4]
    b07e:	f8d9 2000 	ldr.w	r2, [r9]
    b082:	9200      	str	r2, [sp, #0]
    b084:	465a      	mov	r2, fp
    b086:	2100      	movs	r1, #0
    b088:	4658      	mov	r0, fp
    b08a:	f007 fa39 	bl	12500 <lfs_bd_read>
                if (err) {
    b08e:	2800      	cmp	r0, #0
    b090:	f43f af34 	beq.w	aefc <lfs_dir_fetchmatch+0x248>
                    if (err == LFS_ERR_CORRUPT) {
    b094:	f110 0f54 	cmn.w	r0, #84	; 0x54
    b098:	f47f af30 	bne.w	aefc <lfs_dir_fetchmatch+0x248>
                        dir->erased = false;
    b09c:	2300      	movs	r3, #0
    b09e:	f889 3016 	strb.w	r3, [r9, #22]
                        break;
    b0a2:	e6ab      	b.n	adfc <lfs_dir_fetchmatch+0x148>
                    if (res == LFS_ERR_CORRUPT) {
    b0a4:	f110 0f54 	cmn.w	r0, #84	; 0x54
    b0a8:	d103      	bne.n	b0b2 <lfs_dir_fetchmatch+0x3fe>
                        dir->erased = false;
    b0aa:	2300      	movs	r3, #0
    b0ac:	f889 3016 	strb.w	r3, [r9, #22]
                        break;
    b0b0:	e6a4      	b.n	adfc <lfs_dir_fetchmatch+0x148>
                    return res;
    b0b2:	9005      	str	r0, [sp, #20]
    b0b4:	e093      	b.n	b1de <lfs_dir_fetchmatch+0x52a>
                } else if ((LFS_MKTAG(0x7ff, 0x3ff, 0) & tag) ==
    b0b6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    b0b8:	9b08      	ldr	r3, [sp, #32]
    b0ba:	461f      	mov	r7, r3
    b0bc:	ea82 0103 	eor.w	r1, r2, r3
    b0c0:	4b19      	ldr	r3, [pc, #100]	; (b128 <lfs_dir_fetchmatch+0x474>)
    b0c2:	400b      	ands	r3, r1
    b0c4:	b16b      	cbz	r3, b0e2 <lfs_dir_fetchmatch+0x42e>
                } else if (res == LFS_CMP_GT &&
    b0c6:	2802      	cmp	r0, #2
    b0c8:	f47f af2f 	bne.w	af2a <lfs_dir_fetchmatch+0x276>
    return (tag & 0x000ffc00) >> 10;
    b0cc:	f3c2 2389 	ubfx	r3, r2, #10, #10
    b0d0:	f3c7 2789 	ubfx	r7, r7, #10, #10
                } else if (res == LFS_CMP_GT &&
    b0d4:	42bb      	cmp	r3, r7
    b0d6:	f63f af28 	bhi.w	af2a <lfs_dir_fetchmatch+0x276>
                    tempbesttag = tag | 0x80000000;
    b0da:	f042 4300 	orr.w	r3, r2, #2147483648	; 0x80000000
    b0de:	9308      	str	r3, [sp, #32]
    b0e0:	e723      	b.n	af2a <lfs_dir_fetchmatch+0x276>
                    tempbesttag = -1;
    b0e2:	f04f 33ff 	mov.w	r3, #4294967295
    b0e6:	9308      	str	r3, [sp, #32]
    b0e8:	e71f      	b.n	af2a <lfs_dir_fetchmatch+0x276>
                return err;
    b0ea:	9b07      	ldr	r3, [sp, #28]
    b0ec:	9305      	str	r3, [sp, #20]
    b0ee:	e076      	b.n	b1de <lfs_dir_fetchmatch+0x52a>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    b0f0:	f8db 203c 	ldr.w	r2, [fp, #60]	; 0x3c
    return (tag & 0x70000000) >> 20;
    b0f4:	0d13      	lsrs	r3, r2, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    b0f6:	f413 6fe0 	tst.w	r3, #1792	; 0x700
    b0fa:	d017      	beq.n	b12c <lfs_dir_fetchmatch+0x478>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    b0fc:	f8db 0040 	ldr.w	r0, [fp, #64]	; 0x40
    b100:	f8d9 1000 	ldr.w	r1, [r9]
    b104:	4281      	cmp	r1, r0
    b106:	d025      	beq.n	b154 <lfs_dir_fetchmatch+0x4a0>
    b108:	f8db 3044 	ldr.w	r3, [fp, #68]	; 0x44
    b10c:	f8d9 4004 	ldr.w	r4, [r9, #4]
    b110:	429c      	cmp	r4, r3
    b112:	d021      	beq.n	b158 <lfs_dir_fetchmatch+0x4a4>
    b114:	4284      	cmp	r4, r0
    b116:	d021      	beq.n	b15c <lfs_dir_fetchmatch+0x4a8>
    b118:	4299      	cmp	r1, r3
    b11a:	d001      	beq.n	b120 <lfs_dir_fetchmatch+0x46c>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    b11c:	2300      	movs	r3, #0
    b11e:	e006      	b.n	b12e <lfs_dir_fetchmatch+0x47a>
    b120:	2301      	movs	r3, #1
    b122:	e004      	b.n	b12e <lfs_dir_fetchmatch+0x47a>
    b124:	00014438 	.word	0x00014438
    b128:	7ffffc00 	.word	0x7ffffc00
    b12c:	2300      	movs	r3, #0
            if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair)) {
    b12e:	b1d3      	cbz	r3, b166 <lfs_dir_fetchmatch+0x4b2>
    return (tag & 0x000ffc00) >> 10;
    b130:	f3c2 2389 	ubfx	r3, r2, #10, #10
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
    b134:	9a05      	ldr	r2, [sp, #20]
    b136:	4611      	mov	r1, r2
    return (tag & 0x000ffc00) >> 10;
    b138:	f3c2 2289 	ubfx	r2, r2, #10, #10
                if (lfs_tag_id(lfs->gdisk.tag) == lfs_tag_id(besttag)) {
    b13c:	4293      	cmp	r3, r2
    b13e:	d00f      	beq.n	b160 <lfs_dir_fetchmatch+0x4ac>
                } else if (besttag != -1 &&
    b140:	9805      	ldr	r0, [sp, #20]
    b142:	f1b0 3fff 	cmp.w	r0, #4294967295
    b146:	d00e      	beq.n	b166 <lfs_dir_fetchmatch+0x4b2>
    b148:	4293      	cmp	r3, r2
    b14a:	d20c      	bcs.n	b166 <lfs_dir_fetchmatch+0x4b2>
                    besttag -= LFS_MKTAG(0, 1, 0);
    b14c:	f5a1 6380 	sub.w	r3, r1, #1024	; 0x400
    b150:	9305      	str	r3, [sp, #20]
    b152:	e008      	b.n	b166 <lfs_dir_fetchmatch+0x4b2>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    b154:	2301      	movs	r3, #1
    b156:	e7ea      	b.n	b12e <lfs_dir_fetchmatch+0x47a>
    b158:	2301      	movs	r3, #1
    b15a:	e7e8      	b.n	b12e <lfs_dir_fetchmatch+0x47a>
    b15c:	2301      	movs	r3, #1
    b15e:	e7e6      	b.n	b12e <lfs_dir_fetchmatch+0x47a>
                    besttag |= 0x80000000;
    b160:	f041 4300 	orr.w	r3, r1, #2147483648	; 0x80000000
    b164:	9305      	str	r3, [sp, #20]
            if (id) {
    b166:	9b21      	ldr	r3, [sp, #132]	; 0x84
    b168:	b14b      	cbz	r3, b17e <lfs_dir_fetchmatch+0x4ca>
    return (tag & 0x000ffc00) >> 10;
    b16a:	9b05      	ldr	r3, [sp, #20]
    b16c:	f3c3 2389 	ubfx	r3, r3, #10, #10
                *id = lfs_min(lfs_tag_id(besttag), dir->count);
    b170:	f8b9 2014 	ldrh.w	r2, [r9, #20]
    return (a < b) ? a : b;
    b174:	4293      	cmp	r3, r2
    b176:	bf28      	it	cs
    b178:	4613      	movcs	r3, r2
    b17a:	9a21      	ldr	r2, [sp, #132]	; 0x84
    b17c:	8013      	strh	r3, [r2, #0]
            if (lfs_tag_isvalid(besttag)) {
    b17e:	9b05      	ldr	r3, [sp, #20]
    b180:	2b00      	cmp	r3, #0
    b182:	da2c      	bge.n	b1de <lfs_dir_fetchmatch+0x52a>
    return (tag & 0x000ffc00) >> 10;
    b184:	f3c3 2389 	ubfx	r3, r3, #10, #10
            } else if (lfs_tag_id(besttag) < dir->count) {
    b188:	f8b9 2014 	ldrh.w	r2, [r9, #20]
    b18c:	429a      	cmp	r2, r3
    b18e:	d903      	bls.n	b198 <lfs_dir_fetchmatch+0x4e4>
                return LFS_ERR_NOENT;
    b190:	f06f 0301 	mvn.w	r3, #1
    b194:	9305      	str	r3, [sp, #20]
    b196:	e022      	b.n	b1de <lfs_dir_fetchmatch+0x52a>
                return 0;
    b198:	2300      	movs	r3, #0
    b19a:	9305      	str	r3, [sp, #20]
    b19c:	e01f      	b.n	b1de <lfs_dir_fetchmatch+0x52a>
    b19e:	4a17      	ldr	r2, [pc, #92]	; (b1fc <lfs_dir_fetchmatch+0x548>)
    b1a0:	4b17      	ldr	r3, [pc, #92]	; (b200 <lfs_dir_fetchmatch+0x54c>)
    b1a2:	1ad2      	subs	r2, r2, r3
    b1a4:	08d2      	lsrs	r2, r2, #3
    LFS_ERROR("Corrupted dir pair at {0x%"PRIx32", 0x%"PRIx32"}",
    b1a6:	f04f 0300 	mov.w	r3, #0
    b1aa:	2101      	movs	r1, #1
    b1ac:	f361 0302 	bfi	r3, r1, #0, #3
    b1b0:	f36f 03c5 	bfc	r3, #3, #3
    b1b4:	f362 138f 	bfi	r3, r2, #6, #10
    b1b8:	4a12      	ldr	r2, [pc, #72]	; (b204 <lfs_dir_fetchmatch+0x550>)
    b1ba:	920e      	str	r2, [sp, #56]	; 0x38
    b1bc:	f240 32e5 	movw	r2, #997	; 0x3e5
    b1c0:	920f      	str	r2, [sp, #60]	; 0x3c
    b1c2:	f8d9 2000 	ldr.w	r2, [r9]
    b1c6:	9210      	str	r2, [sp, #64]	; 0x40
    b1c8:	f8d9 2004 	ldr.w	r2, [r9, #4]
    b1cc:	9211      	str	r2, [sp, #68]	; 0x44
    b1ce:	2204      	movs	r2, #4
    b1d0:	a90e      	add	r1, sp, #56	; 0x38
    b1d2:	480d      	ldr	r0, [pc, #52]	; (b208 <lfs_dir_fetchmatch+0x554>)
    b1d4:	f7f6 fca6 	bl	1b24 <log_n>
    return LFS_ERR_CORRUPT;
    b1d8:	f06f 0353 	mvn.w	r3, #83	; 0x53
    b1dc:	9305      	str	r3, [sp, #20]
}
    b1de:	9805      	ldr	r0, [sp, #20]
    b1e0:	b017      	add	sp, #92	; 0x5c
    b1e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LFS_ERR_CORRUPT;
    b1e6:	f06f 0353 	mvn.w	r3, #83	; 0x53
    b1ea:	9305      	str	r3, [sp, #20]
    b1ec:	e7f7      	b.n	b1de <lfs_dir_fetchmatch+0x52a>
    b1ee:	f06f 0353 	mvn.w	r3, #83	; 0x53
    b1f2:	9305      	str	r3, [sp, #20]
    b1f4:	e7f3      	b.n	b1de <lfs_dir_fetchmatch+0x52a>
    b1f6:	9005      	str	r0, [sp, #20]
    b1f8:	e7f1      	b.n	b1de <lfs_dir_fetchmatch+0x52a>
    b1fa:	bf00      	nop
    b1fc:	00014330 	.word	0x00014330
    b200:	00014318 	.word	0x00014318
    b204:	000158a0 	.word	0x000158a0
    b208:	000158c8 	.word	0x000158c8

0000b20c <lfs_fs_parent>:
        lfs_mdir_t *parent) {
    b20c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b20e:	b089      	sub	sp, #36	; 0x24
    b210:	4606      	mov	r6, r0
    b212:	460f      	mov	r7, r1
    b214:	4614      	mov	r4, r2
    parent->tail[0] = 0;
    b216:	2500      	movs	r5, #0
    b218:	6195      	str	r5, [r2, #24]
    parent->tail[1] = 1;
    b21a:	2301      	movs	r3, #1
    b21c:	61d3      	str	r3, [r2, #28]
    while (!lfs_pair_isnull(parent->tail)) {
    b21e:	e025      	b.n	b26c <lfs_fs_parent+0x60>
            return LFS_ERR_CORRUPT;
    b220:	f06f 0353 	mvn.w	r3, #83	; 0x53
    b224:	e02e      	b.n	b284 <lfs_fs_parent+0x78>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    b226:	2301      	movs	r3, #1
    b228:	e000      	b.n	b22c <lfs_fs_parent+0x20>
    b22a:	2301      	movs	r3, #1
    while (!lfs_pair_isnull(parent->tail)) {
    b22c:	bb43      	cbnz	r3, b280 <lfs_fs_parent+0x74>
        if (cycle >= lfs->cfg->block_count/2) {
    b22e:	6eb3      	ldr	r3, [r6, #104]	; 0x68
    b230:	6a1b      	ldr	r3, [r3, #32]
    b232:	ebb5 0f53 	cmp.w	r5, r3, lsr #1
    b236:	d2f3      	bcs.n	b220 <lfs_fs_parent+0x14>
        cycle += 1;
    b238:	3501      	adds	r5, #1
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
    b23a:	9605      	str	r6, [sp, #20]
                    lfs, {pair[0], pair[1]}});
    b23c:	683b      	ldr	r3, [r7, #0]
                lfs_fs_parent_match, &(struct lfs_fs_parent_match){
    b23e:	9306      	str	r3, [sp, #24]
    b240:	687b      	ldr	r3, [r7, #4]
    b242:	9307      	str	r3, [sp, #28]
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, parent, parent->tail,
    b244:	ab05      	add	r3, sp, #20
    b246:	9303      	str	r3, [sp, #12]
    b248:	4b10      	ldr	r3, [pc, #64]	; (b28c <lfs_fs_parent+0x80>)
    b24a:	9302      	str	r3, [sp, #8]
    b24c:	2300      	movs	r3, #0
    b24e:	9301      	str	r3, [sp, #4]
    b250:	4b0f      	ldr	r3, [pc, #60]	; (b290 <lfs_fs_parent+0x84>)
    b252:	9300      	str	r3, [sp, #0]
    b254:	4b0f      	ldr	r3, [pc, #60]	; (b294 <lfs_fs_parent+0x88>)
    b256:	f104 0218 	add.w	r2, r4, #24
    b25a:	4621      	mov	r1, r4
    b25c:	4630      	mov	r0, r6
    b25e:	f7ff fd29 	bl	acb4 <lfs_dir_fetchmatch>
        if (tag && tag != LFS_ERR_NOENT) {
    b262:	4603      	mov	r3, r0
    b264:	b110      	cbz	r0, b26c <lfs_fs_parent+0x60>
    b266:	f110 0f02 	cmn.w	r0, #2
    b26a:	d10b      	bne.n	b284 <lfs_fs_parent+0x78>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    b26c:	69a3      	ldr	r3, [r4, #24]
    b26e:	f1b3 3fff 	cmp.w	r3, #4294967295
    b272:	d0da      	beq.n	b22a <lfs_fs_parent+0x1e>
    b274:	69e3      	ldr	r3, [r4, #28]
    b276:	f1b3 3fff 	cmp.w	r3, #4294967295
    b27a:	d0d4      	beq.n	b226 <lfs_fs_parent+0x1a>
    b27c:	2300      	movs	r3, #0
    b27e:	e7d5      	b.n	b22c <lfs_fs_parent+0x20>
    return LFS_ERR_NOENT;
    b280:	f06f 0301 	mvn.w	r3, #1
}
    b284:	4618      	mov	r0, r3
    b286:	b009      	add	sp, #36	; 0x24
    b288:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b28a:	bf00      	nop
    b28c:	00012699 	.word	0x00012699
    b290:	20000008 	.word	0x20000008
    b294:	7ff003ff 	.word	0x7ff003ff

0000b298 <lfs_dir_traverse>:
        int (*cb)(void *data, lfs_tag_t tag, const void *buffer), void *data) {
    b298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b29c:	b097      	sub	sp, #92	; 0x5c
    b29e:	900b      	str	r0, [sp, #44]	; 0x2c
    b2a0:	4688      	mov	r8, r1
    b2a2:	4692      	mov	sl, r2
    b2a4:	461d      	mov	r5, r3
    b2a6:	9e20      	ldr	r6, [sp, #128]	; 0x80
    b2a8:	9f21      	ldr	r7, [sp, #132]	; 0x84
    b2aa:	f8dd b088 	ldr.w	fp, [sp, #136]	; 0x88
    b2ae:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
    b2b2:	930d      	str	r3, [sp, #52]	; 0x34
    b2b4:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
    b2b8:	930e      	str	r3, [sp, #56]	; 0x38
    b2ba:	f9bd 3098 	ldrsh.w	r3, [sp, #152]	; 0x98
    b2be:	930c      	str	r3, [sp, #48]	; 0x30
    return ((int32_t)(tag << 22) >> 22) == -1;
    b2c0:	f345 0409 	sbfx	r4, r5, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    b2c4:	f1b4 3fff 	cmp.w	r4, #4294967295
    b2c8:	bf14      	ite	ne
    b2ca:	462c      	movne	r4, r5
    b2cc:	1c6c      	addeq	r4, r5, #1
    return tag & 0x000003ff;
    b2ce:	f3c4 0409 	ubfx	r4, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    b2d2:	3404      	adds	r4, #4
        if (off+lfs_tag_dsize(ptag) < dir->off) {
    b2d4:	4454      	add	r4, sl
    b2d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
    b2da:	429c      	cmp	r4, r3
    b2dc:	d32b      	bcc.n	b336 <lfs_dir_traverse+0x9e>
        } else if (attrcount > 0) {
    b2de:	2f00      	cmp	r7, #0
    b2e0:	f340 80ba 	ble.w	b458 <lfs_dir_traverse+0x1c0>
            tag = attrs[0].tag;
    b2e4:	6833      	ldr	r3, [r6, #0]
    b2e6:	9313      	str	r3, [sp, #76]	; 0x4c
            buffer = attrs[0].buffer;
    b2e8:	6874      	ldr	r4, [r6, #4]
            attrs += 1;
    b2ea:	3608      	adds	r6, #8
            attrcount -= 1;
    b2ec:	3f01      	subs	r7, #1
        if ((mask & tmask & tag) != (mask & tmask & ttag)) {
    b2ee:	4b5d      	ldr	r3, [pc, #372]	; (b464 <lfs_dir_traverse+0x1cc>)
    b2f0:	ea0b 0303 	and.w	r3, fp, r3
    b2f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    b2f6:	9923      	ldr	r1, [sp, #140]	; 0x8c
    b2f8:	404a      	eors	r2, r1
    b2fa:	ea12 0903 	ands.w	r9, r2, r3
    b2fe:	d1df      	bne.n	b2c0 <lfs_dir_traverse+0x28>
    return (tag & 0x000ffc00) >> 10;
    b300:	f3cb 2389 	ubfx	r3, fp, #10, #10
        if (lfs_tag_id(tmask) != 0) {
    b304:	2b00      	cmp	r3, #0
    b306:	d135      	bne.n	b374 <lfs_dir_traverse+0xdc>
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
    b308:	9913      	ldr	r1, [sp, #76]	; 0x4c
    return (tag & 0x7ff00000) >> 20;
    b30a:	f3c1 530a 	ubfx	r3, r1, #20, #11
        if (lfs_tag_type3(tag) == LFS_FROM_NOOP) {
    b30e:	2b00      	cmp	r3, #0
    b310:	d0d6      	beq.n	b2c0 <lfs_dir_traverse+0x28>
        } else if (lfs_tag_type3(tag) == LFS_FROM_MOVE) {
    b312:	f240 1201 	movw	r2, #257	; 0x101
    b316:	4293      	cmp	r3, r2
    b318:	d04c      	beq.n	b3b4 <lfs_dir_traverse+0x11c>
        } else if (lfs_tag_type3(tag) == LFS_FROM_USERATTRS) {
    b31a:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    b31e:	d06d      	beq.n	b3fc <lfs_dir_traverse+0x164>
            int err = cb(data, tag + LFS_MKTAG(0, diff, 0), buffer);
    b320:	4622      	mov	r2, r4
    b322:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    b324:	eb01 2183 	add.w	r1, r1, r3, lsl #10
    b328:	9828      	ldr	r0, [sp, #160]	; 0xa0
    b32a:	9b27      	ldr	r3, [sp, #156]	; 0x9c
    b32c:	4798      	blx	r3
            if (err) {
    b32e:	4603      	mov	r3, r0
    b330:	2800      	cmp	r0, #0
    b332:	d0c5      	beq.n	b2c0 <lfs_dir_traverse+0x28>
    b334:	e091      	b.n	b45a <lfs_dir_traverse+0x1c2>
            int err = lfs_bd_read(lfs,
    b336:	2304      	movs	r3, #4
    b338:	9303      	str	r3, [sp, #12]
    b33a:	aa13      	add	r2, sp, #76	; 0x4c
    b33c:	9202      	str	r2, [sp, #8]
    b33e:	9401      	str	r4, [sp, #4]
    b340:	f8d8 2000 	ldr.w	r2, [r8]
    b344:	9200      	str	r2, [sp, #0]
    b346:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b348:	2100      	movs	r1, #0
    b34a:	4610      	mov	r0, r2
    b34c:	f007 f8d8 	bl	12500 <lfs_bd_read>
            if (err) {
    b350:	4603      	mov	r3, r0
    b352:	2800      	cmp	r0, #0
    b354:	f040 8081 	bne.w	b45a <lfs_dir_traverse+0x1c2>
            tag = (lfs_frombe32(tag) ^ ptag) | 0x80000000;
    b358:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    return __builtin_bswap32(a);
    b35a:	ba1b      	rev	r3, r3
    b35c:	405d      	eors	r5, r3
    b35e:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
    b362:	9513      	str	r5, [sp, #76]	; 0x4c
            disk.block = dir->pair[0];
    b364:	f8d8 3000 	ldr.w	r3, [r8]
    b368:	9314      	str	r3, [sp, #80]	; 0x50
            disk.off = off+sizeof(lfs_tag_t);
    b36a:	1d23      	adds	r3, r4, #4
    b36c:	9315      	str	r3, [sp, #84]	; 0x54
            off += lfs_tag_dsize(ptag);
    b36e:	46a2      	mov	sl, r4
            buffer = &disk;
    b370:	ac14      	add	r4, sp, #80	; 0x50
    b372:	e7bc      	b.n	b2ee <lfs_dir_traverse+0x56>
            int filter = lfs_dir_traverse(lfs,
    b374:	ab13      	add	r3, sp, #76	; 0x4c
    b376:	9308      	str	r3, [sp, #32]
    b378:	4b3b      	ldr	r3, [pc, #236]	; (b468 <lfs_dir_traverse+0x1d0>)
    b37a:	9307      	str	r3, [sp, #28]
    b37c:	2300      	movs	r3, #0
    b37e:	9306      	str	r3, [sp, #24]
    b380:	9305      	str	r3, [sp, #20]
    b382:	9304      	str	r3, [sp, #16]
    b384:	9303      	str	r3, [sp, #12]
    b386:	9302      	str	r3, [sp, #8]
    b388:	9701      	str	r7, [sp, #4]
    b38a:	9600      	str	r6, [sp, #0]
    b38c:	462b      	mov	r3, r5
    b38e:	4652      	mov	r2, sl
    b390:	4641      	mov	r1, r8
    b392:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b394:	f7ff ff80 	bl	b298 <lfs_dir_traverse>
            if (filter < 0) {
    b398:	1e03      	subs	r3, r0, #0
    b39a:	db5e      	blt.n	b45a <lfs_dir_traverse+0x1c2>
            if (filter) {
    b39c:	2b00      	cmp	r3, #0
    b39e:	d18f      	bne.n	b2c0 <lfs_dir_traverse+0x28>
    return (tag & 0x000ffc00) >> 10;
    b3a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    b3a2:	f3c3 2389 	ubfx	r3, r3, #10, #10
            if (!(lfs_tag_id(tag) >= begin && lfs_tag_id(tag) < end)) {
    b3a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    b3a8:	429a      	cmp	r2, r3
    b3aa:	d889      	bhi.n	b2c0 <lfs_dir_traverse+0x28>
    b3ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    b3ae:	429a      	cmp	r2, r3
    b3b0:	d8aa      	bhi.n	b308 <lfs_dir_traverse+0x70>
    b3b2:	e785      	b.n	b2c0 <lfs_dir_traverse+0x28>
    return tag & 0x000003ff;
    b3b4:	f3c1 0209 	ubfx	r2, r1, #0, #10
            uint16_t fromid = lfs_tag_size(tag);
    b3b8:	4610      	mov	r0, r2
    return (tag & 0x000ffc00) >> 10;
    b3ba:	f3c1 2389 	ubfx	r3, r1, #10, #10
                    fromid, fromid+1, toid-fromid+diff,
    b3be:	1a9b      	subs	r3, r3, r2
            int err = lfs_dir_traverse(lfs,
    b3c0:	9928      	ldr	r1, [sp, #160]	; 0xa0
    b3c2:	9108      	str	r1, [sp, #32]
    b3c4:	9927      	ldr	r1, [sp, #156]	; 0x9c
    b3c6:	9107      	str	r1, [sp, #28]
    b3c8:	990c      	ldr	r1, [sp, #48]	; 0x30
    b3ca:	440b      	add	r3, r1
    b3cc:	b21b      	sxth	r3, r3
    b3ce:	9306      	str	r3, [sp, #24]
    b3d0:	3201      	adds	r2, #1
    b3d2:	9205      	str	r2, [sp, #20]
    b3d4:	9004      	str	r0, [sp, #16]
    b3d6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
    b3da:	9303      	str	r3, [sp, #12]
    b3dc:	4b23      	ldr	r3, [pc, #140]	; (b46c <lfs_dir_traverse+0x1d4>)
    b3de:	9302      	str	r3, [sp, #8]
    b3e0:	2200      	movs	r2, #0
    b3e2:	9201      	str	r2, [sp, #4]
    b3e4:	9200      	str	r2, [sp, #0]
    b3e6:	f04f 33ff 	mov.w	r3, #4294967295
    b3ea:	4621      	mov	r1, r4
    b3ec:	980b      	ldr	r0, [sp, #44]	; 0x2c
    b3ee:	f7ff ff53 	bl	b298 <lfs_dir_traverse>
            if (err) {
    b3f2:	4603      	mov	r3, r0
    b3f4:	2800      	cmp	r0, #0
    b3f6:	f43f af63 	beq.w	b2c0 <lfs_dir_traverse+0x28>
    b3fa:	e02e      	b.n	b45a <lfs_dir_traverse+0x1c2>
    b3fc:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
    b400:	f8cd a040 	str.w	sl, [sp, #64]	; 0x40
    b404:	9511      	str	r5, [sp, #68]	; 0x44
    b406:	46b2      	mov	sl, r6
    b408:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    b40a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
    b40c:	f8dd 80a0 	ldr.w	r8, [sp, #160]	; 0xa0
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
    b410:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    return tag & 0x000003ff;
    b412:	f3c3 0209 	ubfx	r2, r3, #0, #10
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
    b416:	4591      	cmp	r9, r2
    b418:	d217      	bcs.n	b44a <lfs_dir_traverse+0x1b2>
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
    b41a:	eb09 0149 	add.w	r1, r9, r9, lsl #1
    b41e:	eb04 0281 	add.w	r2, r4, r1, lsl #2
    b422:	f814 1021 	ldrb.w	r1, [r4, r1, lsl #2]
    b426:	f501 7140 	add.w	r1, r1, #768	; 0x300
    return (tag & 0x000ffc00) >> 10;
    b42a:	f3c3 2389 	ubfx	r3, r3, #10, #10
                int err = cb(data, LFS_MKTAG(LFS_TYPE_USERATTR + a[i].type,
    b42e:	442b      	add	r3, r5
    b430:	029b      	lsls	r3, r3, #10
    b432:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
    b436:	6891      	ldr	r1, [r2, #8]
    b438:	6852      	ldr	r2, [r2, #4]
    b43a:	4319      	orrs	r1, r3
    b43c:	4640      	mov	r0, r8
    b43e:	47b0      	blx	r6
                if (err) {
    b440:	4603      	mov	r3, r0
    b442:	b950      	cbnz	r0, b45a <lfs_dir_traverse+0x1c2>
            for (unsigned i = 0; i < lfs_tag_size(tag); i++) {
    b444:	f109 0901 	add.w	r9, r9, #1
    b448:	e7e2      	b.n	b410 <lfs_dir_traverse+0x178>
    b44a:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    b44e:	9d11      	ldr	r5, [sp, #68]	; 0x44
    b450:	4656      	mov	r6, sl
    b452:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
    b456:	e733      	b.n	b2c0 <lfs_dir_traverse+0x28>
            return 0;
    b458:	2300      	movs	r3, #0
}
    b45a:	4618      	mov	r0, r3
    b45c:	b017      	add	sp, #92	; 0x5c
    b45e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b462:	bf00      	nop
    b464:	7ff00000 	.word	0x7ff00000
    b468:	0000abed 	.word	0x0000abed
    b46c:	600ffc00 	.word	0x600ffc00

0000b470 <lfs_dir_getslice>:
        lfs_off_t goff, void *gbuffer, lfs_size_t gsize) {
    b470:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b474:	b089      	sub	sp, #36	; 0x24
    b476:	4607      	mov	r7, r0
    b478:	468a      	mov	sl, r1
    b47a:	4690      	mov	r8, r2
    b47c:	469b      	mov	fp, r3
    lfs_off_t off = dir->off;
    b47e:	68cd      	ldr	r5, [r1, #12]
    lfs_tag_t ntag = dir->etag;
    b480:	690b      	ldr	r3, [r1, #16]
    b482:	9307      	str	r3, [sp, #28]
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    b484:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    return (tag & 0x70000000) >> 20;
    b486:	0d1a      	lsrs	r2, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    b488:	f412 6fe0 	tst.w	r2, #1792	; 0x700
    b48c:	d010      	beq.n	b4b0 <lfs_dir_getslice+0x40>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    b48e:	6c02      	ldr	r2, [r0, #64]	; 0x40
    b490:	6809      	ldr	r1, [r1, #0]
    b492:	4291      	cmp	r1, r2
    b494:	d01e      	beq.n	b4d4 <lfs_dir_getslice+0x64>
    b496:	6c44      	ldr	r4, [r0, #68]	; 0x44
    b498:	f8da 0004 	ldr.w	r0, [sl, #4]
    b49c:	42a0      	cmp	r0, r4
    b49e:	d01b      	beq.n	b4d8 <lfs_dir_getslice+0x68>
    b4a0:	4290      	cmp	r0, r2
    b4a2:	d01b      	beq.n	b4dc <lfs_dir_getslice+0x6c>
    b4a4:	428c      	cmp	r4, r1
    b4a6:	d001      	beq.n	b4ac <lfs_dir_getslice+0x3c>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    b4a8:	2200      	movs	r2, #0
    b4aa:	e002      	b.n	b4b2 <lfs_dir_getslice+0x42>
    b4ac:	2201      	movs	r2, #1
    b4ae:	e000      	b.n	b4b2 <lfs_dir_getslice+0x42>
    b4b0:	2200      	movs	r2, #0
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
    b4b2:	2a00      	cmp	r2, #0
    b4b4:	f000 808b 	beq.w	b5ce <lfs_dir_getslice+0x15e>
    return (tag & 0x000ffc00) >> 10;
    b4b8:	f3c8 2289 	ubfx	r2, r8, #10, #10
    if (lfs_gstate_hasmovehere(&lfs->gdisk, dir->pair) &&
    b4bc:	2a00      	cmp	r2, #0
    b4be:	f000 8088 	beq.w	b5d2 <lfs_dir_getslice+0x162>
    return (tag & 0x000ffc00) >> 10;
    b4c2:	f3c3 2389 	ubfx	r3, r3, #10, #10
    b4c6:	f3cb 2289 	ubfx	r2, fp, #10, #10
            lfs_tag_id(gmask) != 0 &&
    b4ca:	429a      	cmp	r2, r3
    b4cc:	f080 8083 	bcs.w	b5d6 <lfs_dir_getslice+0x166>
    lfs_stag_t gdiff = 0;
    b4d0:	2600      	movs	r6, #0
    b4d2:	e00b      	b.n	b4ec <lfs_dir_getslice+0x7c>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    b4d4:	2201      	movs	r2, #1
    b4d6:	e7ec      	b.n	b4b2 <lfs_dir_getslice+0x42>
    b4d8:	2201      	movs	r2, #1
    b4da:	e7ea      	b.n	b4b2 <lfs_dir_getslice+0x42>
    b4dc:	2201      	movs	r2, #1
    b4de:	e7e8      	b.n	b4b2 <lfs_dir_getslice+0x42>
        if ((gmask & tag) == (gmask & (gtag - gdiff))) {
    b4e0:	ebab 0306 	sub.w	r3, fp, r6
    b4e4:	4063      	eors	r3, r4
    b4e6:	ea13 0f08 	tst.w	r3, r8
    b4ea:	d04a      	beq.n	b582 <lfs_dir_getslice+0x112>
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
    b4ec:	9c07      	ldr	r4, [sp, #28]
    return ((int32_t)(tag << 22) >> 22) == -1;
    b4ee:	f344 0909 	sbfx	r9, r4, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    b4f2:	f1b9 3fff 	cmp.w	r9, #4294967295
    b4f6:	bf14      	ite	ne
    b4f8:	4623      	movne	r3, r4
    b4fa:	1c63      	addeq	r3, r4, #1
    return tag & 0x000003ff;
    b4fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
    b500:	1d1a      	adds	r2, r3, #4
    while (off >= sizeof(lfs_tag_t) + lfs_tag_dsize(ntag)) {
    b502:	3308      	adds	r3, #8
    b504:	42ab      	cmp	r3, r5
    b506:	d868      	bhi.n	b5da <lfs_dir_getslice+0x16a>
        off -= lfs_tag_dsize(ntag);
    b508:	1aad      	subs	r5, r5, r2
        int err = lfs_bd_read(lfs,
    b50a:	9705      	str	r7, [sp, #20]
    b50c:	2304      	movs	r3, #4
    b50e:	9303      	str	r3, [sp, #12]
    b510:	aa07      	add	r2, sp, #28
    b512:	9202      	str	r2, [sp, #8]
    b514:	9501      	str	r5, [sp, #4]
    b516:	f8da 2000 	ldr.w	r2, [sl]
    b51a:	9200      	str	r2, [sp, #0]
    b51c:	463a      	mov	r2, r7
    b51e:	2100      	movs	r1, #0
    b520:	4638      	mov	r0, r7
    b522:	f006 ffed 	bl	12500 <lfs_bd_read>
        if (err) {
    b526:	4603      	mov	r3, r0
    b528:	2800      	cmp	r0, #0
    b52a:	d158      	bne.n	b5de <lfs_dir_getslice+0x16e>
        ntag = (lfs_frombe32(ntag) ^ tag) & 0x7fffffff;
    b52c:	9b07      	ldr	r3, [sp, #28]
    b52e:	ba1b      	rev	r3, r3
    b530:	4063      	eors	r3, r4
    b532:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    b536:	9307      	str	r3, [sp, #28]
    return (tag & 0x000ffc00) >> 10;
    b538:	f3c8 2389 	ubfx	r3, r8, #10, #10
        if (lfs_tag_id(gmask) != 0 &&
    b53c:	2b00      	cmp	r3, #0
    b53e:	d0cf      	beq.n	b4e0 <lfs_dir_getslice+0x70>
    return (tag & 0x70000000) >> 20;
    b540:	0d23      	lsrs	r3, r4, #20
    b542:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
        if (lfs_tag_id(gmask) != 0 &&
    b546:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    b54a:	d1c9      	bne.n	b4e0 <lfs_dir_getslice+0x70>
    return (tag & 0x000ffc00) >> 10;
    b54c:	f3c4 2089 	ubfx	r0, r4, #10, #10
                lfs_tag_id(tag) <= lfs_tag_id(gtag - gdiff)) {
    b550:	4631      	mov	r1, r6
    b552:	ebab 0206 	sub.w	r2, fp, r6
    return (tag & 0x000ffc00) >> 10;
    b556:	f3c2 2c89 	ubfx	ip, r2, #10, #10
                lfs_tag_type1(tag) == LFS_TYPE_SPLICE &&
    b55a:	4584      	cmp	ip, r0
    b55c:	d3c0      	bcc.n	b4e0 <lfs_dir_getslice+0x70>
                    (LFS_MKTAG(0, 0x3ff, 0) & (gtag - gdiff)))) {
    b55e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    b562:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    b566:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
    b56a:	f022 0203 	bic.w	r2, r2, #3
            if (tag == (LFS_MKTAG(LFS_TYPE_CREATE, 0, 0) |
    b56e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
    b572:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    b576:	42a2      	cmp	r2, r4
    b578:	d035      	beq.n	b5e6 <lfs_dir_getslice+0x176>
    return (int8_t)lfs_tag_chunk(tag);
    b57a:	b25e      	sxtb	r6, r3
            gdiff += LFS_MKTAG(0, lfs_tag_splice(tag), 0);
    b57c:	eb01 2686 	add.w	r6, r1, r6, lsl #10
    b580:	e7ae      	b.n	b4e0 <lfs_dir_getslice+0x70>
    b582:	46b0      	mov	r8, r6
            if (lfs_tag_isdelete(tag)) {
    b584:	f1b9 3fff 	cmp.w	r9, #4294967295
    b588:	d030      	beq.n	b5ec <lfs_dir_getslice+0x17c>
    return tag & 0x000003ff;
    b58a:	f3c4 0609 	ubfx	r6, r4, #0, #10
    return (a < b) ? a : b;
    b58e:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b590:	429e      	cmp	r6, r3
    b592:	bf28      	it	cs
    b594:	461e      	movcs	r6, r3
                    dir->pair[0], off+sizeof(tag)+goff, gbuffer, diff);
    b596:	9b12      	ldr	r3, [sp, #72]	; 0x48
    b598:	442b      	add	r3, r5
            err = lfs_bd_read(lfs,
    b59a:	9603      	str	r6, [sp, #12]
    b59c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    b59e:	9202      	str	r2, [sp, #8]
    b5a0:	3304      	adds	r3, #4
    b5a2:	9301      	str	r3, [sp, #4]
    b5a4:	f8da 3000 	ldr.w	r3, [sl]
    b5a8:	9300      	str	r3, [sp, #0]
    b5aa:	4633      	mov	r3, r6
    b5ac:	9a05      	ldr	r2, [sp, #20]
    b5ae:	2100      	movs	r1, #0
    b5b0:	4638      	mov	r0, r7
    b5b2:	f006 ffa5 	bl	12500 <lfs_bd_read>
            if (err) {
    b5b6:	4603      	mov	r3, r0
    b5b8:	b988      	cbnz	r0, b5de <lfs_dir_getslice+0x16e>
            memset((uint8_t*)gbuffer + diff, 0, gsize - diff);
    b5ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
    b5bc:	1b9a      	subs	r2, r3, r6
    b5be:	2100      	movs	r1, #0
    b5c0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    b5c2:	1998      	adds	r0, r3, r6
    b5c4:	f005 fe36 	bl	11234 <memset>
            return tag + gdiff;
    b5c8:	4643      	mov	r3, r8
    b5ca:	4423      	add	r3, r4
    b5cc:	e007      	b.n	b5de <lfs_dir_getslice+0x16e>
    lfs_stag_t gdiff = 0;
    b5ce:	2600      	movs	r6, #0
    b5d0:	e78c      	b.n	b4ec <lfs_dir_getslice+0x7c>
    b5d2:	2600      	movs	r6, #0
    b5d4:	e78a      	b.n	b4ec <lfs_dir_getslice+0x7c>
        gdiff -= LFS_MKTAG(0, 1, 0);
    b5d6:	4e07      	ldr	r6, [pc, #28]	; (b5f4 <lfs_dir_getslice+0x184>)
    b5d8:	e788      	b.n	b4ec <lfs_dir_getslice+0x7c>
    return LFS_ERR_NOENT;
    b5da:	f06f 0301 	mvn.w	r3, #1
}
    b5de:	4618      	mov	r0, r3
    b5e0:	b009      	add	sp, #36	; 0x24
    b5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                return LFS_ERR_NOENT;
    b5e6:	f06f 0301 	mvn.w	r3, #1
    b5ea:	e7f8      	b.n	b5de <lfs_dir_getslice+0x16e>
                return LFS_ERR_NOENT;
    b5ec:	f06f 0301 	mvn.w	r3, #1
    b5f0:	e7f5      	b.n	b5de <lfs_dir_getslice+0x16e>
    b5f2:	bf00      	nop
    b5f4:	fffffc00 	.word	0xfffffc00

0000b5f8 <lfs_dir_getgstate>:
        lfs_gstate_t *gstate) {
    b5f8:	b510      	push	{r4, lr}
    b5fa:	b086      	sub	sp, #24
    b5fc:	4614      	mov	r4, r2
    lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x7ff, 0, 0),
    b5fe:	ab03      	add	r3, sp, #12
    b600:	9300      	str	r3, [sp, #0]
    b602:	4b10      	ldr	r3, [pc, #64]	; (b644 <lfs_dir_getgstate+0x4c>)
    b604:	4a10      	ldr	r2, [pc, #64]	; (b648 <lfs_dir_getgstate+0x50>)
    b606:	f007 f90f 	bl	12828 <lfs_dir_get>
    if (res < 0 && res != LFS_ERR_NOENT) {
    b60a:	2800      	cmp	r0, #0
    b60c:	db04      	blt.n	b618 <lfs_dir_getgstate+0x20>
    if (res != LFS_ERR_NOENT) {
    b60e:	f110 0f02 	cmn.w	r0, #2
    b612:	d005      	beq.n	b620 <lfs_dir_getgstate+0x28>
    for (int i = 0; i < 3; i++) {
    b614:	2300      	movs	r3, #0
    b616:	e010      	b.n	b63a <lfs_dir_getgstate+0x42>
    if (res < 0 && res != LFS_ERR_NOENT) {
    b618:	f110 0f02 	cmn.w	r0, #2
    b61c:	d110      	bne.n	b640 <lfs_dir_getgstate+0x48>
    b61e:	e7f6      	b.n	b60e <lfs_dir_getgstate+0x16>
    return 0;
    b620:	2000      	movs	r0, #0
    b622:	e00d      	b.n	b640 <lfs_dir_getgstate+0x48>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
    b624:	aa06      	add	r2, sp, #24
    b626:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    b62a:	f852 2c0c 	ldr.w	r2, [r2, #-12]
    b62e:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    b632:	4051      	eors	r1, r2
    b634:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
    b638:	3301      	adds	r3, #1
    b63a:	2b02      	cmp	r3, #2
    b63c:	ddf2      	ble.n	b624 <lfs_dir_getgstate+0x2c>
    return 0;
    b63e:	2000      	movs	r0, #0
}
    b640:	b006      	add	sp, #24
    b642:	bd10      	pop	{r4, pc}
    b644:	7ff0000c 	.word	0x7ff0000c
    b648:	7ff00000 	.word	0x7ff00000

0000b64c <lfs_dir_find>:
        const char **path, uint16_t *id) {
    b64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b650:	b08d      	sub	sp, #52	; 0x34
    b652:	4683      	mov	fp, r0
    b654:	4688      	mov	r8, r1
    b656:	9207      	str	r2, [sp, #28]
    const char *name = *path;
    b658:	6812      	ldr	r2, [r2, #0]
    b65a:	9206      	str	r2, [sp, #24]
    if (id) {
    b65c:	9305      	str	r3, [sp, #20]
    b65e:	b11b      	cbz	r3, b668 <lfs_dir_find+0x1c>
    b660:	461a      	mov	r2, r3
        *id = 0x3ff;
    b662:	f240 33ff 	movw	r3, #1023	; 0x3ff
    b666:	8013      	strh	r3, [r2, #0]
    dir->tail[0] = lfs->root[0];
    b668:	f8db 3020 	ldr.w	r3, [fp, #32]
    b66c:	f8c8 3018 	str.w	r3, [r8, #24]
    dir->tail[1] = lfs->root[1];
    b670:	f8db 3024 	ldr.w	r3, [fp, #36]	; 0x24
    b674:	f8c8 301c 	str.w	r3, [r8, #28]
    lfs_stag_t tag = LFS_MKTAG(LFS_TYPE_DIR, 0x3ff, 0);
    b678:	4e50      	ldr	r6, [pc, #320]	; (b7bc <lfs_dir_find+0x170>)
        name += strspn(name, "/");
    b67a:	4c51      	ldr	r4, [pc, #324]	; (b7c0 <lfs_dir_find+0x174>)
    b67c:	4621      	mov	r1, r4
    b67e:	9d06      	ldr	r5, [sp, #24]
    b680:	4628      	mov	r0, r5
    b682:	f005 fdf4 	bl	1126e <strspn>
    b686:	462b      	mov	r3, r5
    b688:	4403      	add	r3, r0
    b68a:	4699      	mov	r9, r3
        lfs_size_t namelen = strcspn(name, "/");
    b68c:	4621      	mov	r1, r4
    b68e:	4618      	mov	r0, r3
    b690:	f005 fdfb 	bl	1128a <strcspn>
    b694:	4682      	mov	sl, r0
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
    b696:	2801      	cmp	r0, #1
    b698:	d00b      	beq.n	b6b2 <lfs_dir_find+0x66>
    b69a:	f1ba 0f02 	cmp.w	sl, #2
    b69e:	d013      	beq.n	b6c8 <lfs_dir_find+0x7c>
        const char *suffix = name + namelen;
    b6a0:	eb09 030a 	add.w	r3, r9, sl
    b6a4:	9306      	str	r3, [sp, #24]
    b6a6:	461c      	mov	r4, r3
        int depth = 1;
    b6a8:	2701      	movs	r7, #1
    b6aa:	e017      	b.n	b6dc <lfs_dir_find+0x90>
    b6ac:	46b3      	mov	fp, r6
    b6ae:	4606      	mov	r6, r0
    b6b0:	e7e3      	b.n	b67a <lfs_dir_find+0x2e>
        if ((namelen == 1 && memcmp(name, ".", 1) == 0) ||
    b6b2:	2201      	movs	r2, #1
    b6b4:	4943      	ldr	r1, [pc, #268]	; (b7c4 <lfs_dir_find+0x178>)
    b6b6:	4648      	mov	r0, r9
    b6b8:	f005 fd81 	bl	111be <memcmp>
    b6bc:	2800      	cmp	r0, #0
    b6be:	d1ec      	bne.n	b69a <lfs_dir_find+0x4e>
            name += namelen;
    b6c0:	eb09 030a 	add.w	r3, r9, sl
    b6c4:	9306      	str	r3, [sp, #24]
            goto nextname;
    b6c6:	e7d8      	b.n	b67a <lfs_dir_find+0x2e>
            (namelen == 2 && memcmp(name, "..", 2) == 0)) {
    b6c8:	2202      	movs	r2, #2
    b6ca:	493f      	ldr	r1, [pc, #252]	; (b7c8 <lfs_dir_find+0x17c>)
    b6cc:	4648      	mov	r0, r9
    b6ce:	f005 fd76 	bl	111be <memcmp>
    b6d2:	2800      	cmp	r0, #0
    b6d4:	d1e4      	bne.n	b6a0 <lfs_dir_find+0x54>
    b6d6:	e7f3      	b.n	b6c0 <lfs_dir_find+0x74>
                depth += 1;
    b6d8:	3701      	adds	r7, #1
            suffix += sufflen;
    b6da:	442c      	add	r4, r5
            suffix += strspn(suffix, "/");
    b6dc:	4d38      	ldr	r5, [pc, #224]	; (b7c0 <lfs_dir_find+0x174>)
    b6de:	4629      	mov	r1, r5
    b6e0:	4620      	mov	r0, r4
    b6e2:	f005 fdc4 	bl	1126e <strspn>
    b6e6:	4404      	add	r4, r0
            sufflen = strcspn(suffix, "/");
    b6e8:	4629      	mov	r1, r5
    b6ea:	4620      	mov	r0, r4
    b6ec:	f005 fdcd 	bl	1128a <strcspn>
            if (sufflen == 0) {
    b6f0:	4605      	mov	r5, r0
    b6f2:	b168      	cbz	r0, b710 <lfs_dir_find+0xc4>
            if (sufflen == 2 && memcmp(suffix, "..", 2) == 0) {
    b6f4:	2802      	cmp	r0, #2
    b6f6:	d1ef      	bne.n	b6d8 <lfs_dir_find+0x8c>
    b6f8:	2202      	movs	r2, #2
    b6fa:	4933      	ldr	r1, [pc, #204]	; (b7c8 <lfs_dir_find+0x17c>)
    b6fc:	4620      	mov	r0, r4
    b6fe:	f005 fd5e 	bl	111be <memcmp>
    b702:	2800      	cmp	r0, #0
    b704:	d1e8      	bne.n	b6d8 <lfs_dir_find+0x8c>
                if (depth == 0) {
    b706:	3f01      	subs	r7, #1
    b708:	d1e7      	bne.n	b6da <lfs_dir_find+0x8e>
                    name = suffix + sufflen;
    b70a:	1963      	adds	r3, r4, r5
    b70c:	9306      	str	r3, [sp, #24]
                    goto nextname;
    b70e:	e7b4      	b.n	b67a <lfs_dir_find+0x2e>
        if (name[0] == '\0') {
    b710:	f899 3000 	ldrb.w	r3, [r9]
    b714:	2b00      	cmp	r3, #0
    b716:	d04c      	beq.n	b7b2 <lfs_dir_find+0x166>
        *path = name;
    b718:	9b07      	ldr	r3, [sp, #28]
    b71a:	f8c3 9000 	str.w	r9, [r3]
    return (tag & 0x7ff00000) >> 20;
    b71e:	f3c6 530a 	ubfx	r3, r6, #20, #11
        if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
    b722:	2b02      	cmp	r3, #2
    b724:	d141      	bne.n	b7aa <lfs_dir_find+0x15e>
    return (tag & 0x000ffc00) >> 10;
    b726:	f3c6 2689 	ubfx	r6, r6, #10, #10
        if (lfs_tag_id(tag) != 0x3ff) {
    b72a:	f240 33ff 	movw	r3, #1023	; 0x3ff
    b72e:	429e      	cmp	r6, r3
    b730:	d103      	bne.n	b73a <lfs_dir_find+0xee>
    b732:	464c      	mov	r4, r9
    b734:	4655      	mov	r5, sl
    b736:	465e      	mov	r6, fp
    b738:	e02a      	b.n	b790 <lfs_dir_find+0x144>
                    LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), dir->tail);
    b73a:	02b6      	lsls	r6, r6, #10
    b73c:	f108 0318 	add.w	r3, r8, #24
            lfs_stag_t res = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
    b740:	9300      	str	r3, [sp, #0]
    b742:	f046 5300 	orr.w	r3, r6, #536870912	; 0x20000000
    b746:	f043 0308 	orr.w	r3, r3, #8
    b74a:	4a20      	ldr	r2, [pc, #128]	; (b7cc <lfs_dir_find+0x180>)
    b74c:	4641      	mov	r1, r8
    b74e:	4658      	mov	r0, fp
    b750:	f007 f86a 	bl	12828 <lfs_dir_get>
            if (res < 0) {
    b754:	1e06      	subs	r6, r0, #0
    b756:	db2c      	blt.n	b7b2 <lfs_dir_find+0x166>
    b758:	464c      	mov	r4, r9
    b75a:	4655      	mov	r5, sl
    b75c:	465e      	mov	r6, fp
    b75e:	e017      	b.n	b790 <lfs_dir_find+0x144>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
    b760:	9b05      	ldr	r3, [sp, #20]
                    lfs_dir_find_match, &(struct lfs_dir_find_match){
    b762:	9609      	str	r6, [sp, #36]	; 0x24
    b764:	940a      	str	r4, [sp, #40]	; 0x28
    b766:	950b      	str	r5, [sp, #44]	; 0x2c
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
    b768:	aa09      	add	r2, sp, #36	; 0x24
    b76a:	9203      	str	r2, [sp, #12]
    b76c:	4a18      	ldr	r2, [pc, #96]	; (b7d0 <lfs_dir_find+0x184>)
    b76e:	9202      	str	r2, [sp, #8]
    b770:	9301      	str	r3, [sp, #4]
    b772:	9500      	str	r5, [sp, #0]
    b774:	f04f 43f0 	mov.w	r3, #2013265920	; 0x78000000
    b778:	463a      	mov	r2, r7
    b77a:	4641      	mov	r1, r8
    b77c:	4630      	mov	r0, r6
    b77e:	f7ff fa99 	bl	acb4 <lfs_dir_fetchmatch>
            if (tag < 0) {
    b782:	2800      	cmp	r0, #0
    b784:	db14      	blt.n	b7b0 <lfs_dir_find+0x164>
            if (tag) {
    b786:	2800      	cmp	r0, #0
    b788:	d190      	bne.n	b6ac <lfs_dir_find+0x60>
            if (!dir->split) {
    b78a:	f898 3017 	ldrb.w	r3, [r8, #23]
    b78e:	b14b      	cbz	r3, b7a4 <lfs_dir_find+0x158>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
    b790:	f108 0718 	add.w	r7, r8, #24
                    (strchr(name, '/') == NULL) ? id : NULL,
    b794:	212f      	movs	r1, #47	; 0x2f
    b796:	4620      	mov	r0, r4
    b798:	f005 fcce 	bl	11138 <strchr>
            tag = lfs_dir_fetchmatch(lfs, dir, dir->tail,
    b79c:	2800      	cmp	r0, #0
    b79e:	d0df      	beq.n	b760 <lfs_dir_find+0x114>
    b7a0:	2300      	movs	r3, #0
    b7a2:	e7de      	b.n	b762 <lfs_dir_find+0x116>
                return LFS_ERR_NOENT;
    b7a4:	f06f 0601 	mvn.w	r6, #1
    b7a8:	e003      	b.n	b7b2 <lfs_dir_find+0x166>
            return LFS_ERR_NOTDIR;
    b7aa:	f06f 0613 	mvn.w	r6, #19
    b7ae:	e000      	b.n	b7b2 <lfs_dir_find+0x166>
    b7b0:	4606      	mov	r6, r0
}
    b7b2:	4630      	mov	r0, r6
    b7b4:	b00d      	add	sp, #52	; 0x34
    b7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b7ba:	bf00      	nop
    b7bc:	002ffc00 	.word	0x002ffc00
    b7c0:	00015230 	.word	0x00015230
    b7c4:	000158f4 	.word	0x000158f4
    b7c8:	000158f8 	.word	0x000158f8
    b7cc:	700ffc00 	.word	0x700ffc00
    b7d0:	00012751 	.word	0x00012751

0000b7d4 <lfs_dir_getinfo>:
        uint16_t id, struct lfs_info *info) {
    b7d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    b7d6:	b085      	sub	sp, #20
    b7d8:	461d      	mov	r5, r3
    if (id == 0x3ff) {
    b7da:	f240 33ff 	movw	r3, #1023	; 0x3ff
    b7de:	429a      	cmp	r2, r3
    b7e0:	d02c      	beq.n	b83c <lfs_dir_getinfo+0x68>
    b7e2:	4604      	mov	r4, r0
    b7e4:	460e      	mov	r6, r1
            LFS_MKTAG(LFS_TYPE_NAME, id, lfs->name_max+1), info->name);
    b7e6:	0297      	lsls	r7, r2, #10
    b7e8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    b7ea:	3301      	adds	r3, #1
    b7ec:	f105 0108 	add.w	r1, r5, #8
    lfs_stag_t tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x780, 0x3ff, 0),
    b7f0:	9100      	str	r1, [sp, #0]
    b7f2:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
    b7f6:	4a1b      	ldr	r2, [pc, #108]	; (b864 <lfs_dir_getinfo+0x90>)
    b7f8:	4631      	mov	r1, r6
    b7fa:	f007 f815 	bl	12828 <lfs_dir_get>
    if (tag < 0) {
    b7fe:	2800      	cmp	r0, #0
    b800:	db24      	blt.n	b84c <lfs_dir_getinfo+0x78>
    return (tag & 0x7ff00000) >> 20;
    b802:	f3c0 520a 	ubfx	r2, r0, #20, #11
    info->type = lfs_tag_type3(tag);
    b806:	702a      	strb	r2, [r5, #0]
    tag = lfs_dir_get(lfs, dir, LFS_MKTAG(0x700, 0x3ff, 0),
    b808:	ab02      	add	r3, sp, #8
    b80a:	9300      	str	r3, [sp, #0]
    b80c:	f047 5300 	orr.w	r3, r7, #536870912	; 0x20000000
    b810:	f043 0308 	orr.w	r3, r3, #8
    b814:	4a14      	ldr	r2, [pc, #80]	; (b868 <lfs_dir_getinfo+0x94>)
    b816:	4631      	mov	r1, r6
    b818:	4620      	mov	r0, r4
    b81a:	f007 f805 	bl	12828 <lfs_dir_get>
    if (tag < 0) {
    b81e:	2800      	cmp	r0, #0
    b820:	db14      	blt.n	b84c <lfs_dir_getinfo+0x78>
    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
    b822:	4602      	mov	r2, r0
    return (tag & 0x7ff00000) >> 20;
    b824:	f3c0 500a 	ubfx	r0, r0, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
    b828:	f240 2302 	movw	r3, #514	; 0x202
    b82c:	4298      	cmp	r0, r3
    b82e:	d00f      	beq.n	b850 <lfs_dir_getinfo+0x7c>
    } else if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
    b830:	f240 2301 	movw	r3, #513	; 0x201
    b834:	4298      	cmp	r0, r3
    b836:	d00f      	beq.n	b858 <lfs_dir_getinfo+0x84>
    return 0;
    b838:	2000      	movs	r0, #0
    b83a:	e007      	b.n	b84c <lfs_dir_getinfo+0x78>
        strcpy(info->name, "/");
    b83c:	490b      	ldr	r1, [pc, #44]	; (b86c <lfs_dir_getinfo+0x98>)
    b83e:	f105 0008 	add.w	r0, r5, #8
    b842:	f005 fc56 	bl	110f2 <strcpy>
        info->type = LFS_TYPE_DIR;
    b846:	2302      	movs	r3, #2
    b848:	702b      	strb	r3, [r5, #0]
        return 0;
    b84a:	2000      	movs	r0, #0
}
    b84c:	b005      	add	sp, #20
    b84e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        info->size = ctz.size;
    b850:	9b03      	ldr	r3, [sp, #12]
    b852:	606b      	str	r3, [r5, #4]
    return 0;
    b854:	2000      	movs	r0, #0
    b856:	e7f9      	b.n	b84c <lfs_dir_getinfo+0x78>
    return tag & 0x000003ff;
    b858:	f3c2 0209 	ubfx	r2, r2, #0, #10
        info->size = lfs_tag_size(tag);
    b85c:	606a      	str	r2, [r5, #4]
    return 0;
    b85e:	2000      	movs	r0, #0
    b860:	e7f4      	b.n	b84c <lfs_dir_getinfo+0x78>
    b862:	bf00      	nop
    b864:	780ffc00 	.word	0x780ffc00
    b868:	700ffc00 	.word	0x700ffc00
    b86c:	00015230 	.word	0x00015230

0000b870 <lfs_dir_open>:
int lfs_dir_open(lfs_t *lfs, lfs_dir_t *dir, const char *path) {
    b870:	b570      	push	{r4, r5, r6, lr}
    b872:	b086      	sub	sp, #24
    b874:	4605      	mov	r5, r0
    b876:	460c      	mov	r4, r1
    b878:	9203      	str	r2, [sp, #12]
    lfs_stag_t tag = lfs_dir_find(lfs, &dir->m, &path, NULL);
    b87a:	f101 0608 	add.w	r6, r1, #8
    b87e:	2300      	movs	r3, #0
    b880:	aa03      	add	r2, sp, #12
    b882:	4631      	mov	r1, r6
    b884:	f7ff fee2 	bl	b64c <lfs_dir_find>
    if (tag < 0) {
    b888:	2800      	cmp	r0, #0
    b88a:	db1f      	blt.n	b8cc <lfs_dir_open+0x5c>
    return (tag & 0x7ff00000) >> 20;
    b88c:	f3c0 530a 	ubfx	r3, r0, #20, #11
    if (lfs_tag_type3(tag) != LFS_TYPE_DIR) {
    b890:	2b02      	cmp	r3, #2
    b892:	d12c      	bne.n	b8ee <lfs_dir_open+0x7e>
    return (tag & 0x000ffc00) >> 10;
    b894:	f3c0 2089 	ubfx	r0, r0, #10, #10
    if (lfs_tag_id(tag) == 0x3ff) {
    b898:	f240 33ff 	movw	r3, #1023	; 0x3ff
    b89c:	4298      	cmp	r0, r3
    b89e:	d117      	bne.n	b8d0 <lfs_dir_open+0x60>
        pair[0] = lfs->root[0];
    b8a0:	6a2b      	ldr	r3, [r5, #32]
    b8a2:	9304      	str	r3, [sp, #16]
        pair[1] = lfs->root[1];
    b8a4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b8a6:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_fetch(lfs, &dir->m, pair);
    b8a8:	aa04      	add	r2, sp, #16
    b8aa:	4631      	mov	r1, r6
    b8ac:	4628      	mov	r0, r5
    b8ae:	f006 ff6f 	bl	12790 <lfs_dir_fetch>
    if (err) {
    b8b2:	b958      	cbnz	r0, b8cc <lfs_dir_open+0x5c>
    dir->head[0] = dir->m.pair[0];
    b8b4:	68a3      	ldr	r3, [r4, #8]
    b8b6:	62e3      	str	r3, [r4, #44]	; 0x2c
    dir->head[1] = dir->m.pair[1];
    b8b8:	68e3      	ldr	r3, [r4, #12]
    b8ba:	6323      	str	r3, [r4, #48]	; 0x30
    dir->id = 0;
    b8bc:	2300      	movs	r3, #0
    b8be:	80a3      	strh	r3, [r4, #4]
    dir->pos = 0;
    b8c0:	62a3      	str	r3, [r4, #40]	; 0x28
    dir->type = LFS_TYPE_DIR;
    b8c2:	2302      	movs	r3, #2
    b8c4:	71a3      	strb	r3, [r4, #6]
    dir->next = (lfs_dir_t*)lfs->mlist;
    b8c6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    b8c8:	6023      	str	r3, [r4, #0]
    lfs->mlist = (struct lfs_mlist*)dir;
    b8ca:	62ac      	str	r4, [r5, #40]	; 0x28
}
    b8cc:	b006      	add	sp, #24
    b8ce:	bd70      	pop	{r4, r5, r6, pc}
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
    b8d0:	0283      	lsls	r3, r0, #10
        lfs_stag_t res = lfs_dir_get(lfs, &dir->m, LFS_MKTAG(0x700, 0x3ff, 0),
    b8d2:	aa04      	add	r2, sp, #16
    b8d4:	9200      	str	r2, [sp, #0]
    b8d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    b8da:	f043 0308 	orr.w	r3, r3, #8
    b8de:	4a05      	ldr	r2, [pc, #20]	; (b8f4 <lfs_dir_open+0x84>)
    b8e0:	4631      	mov	r1, r6
    b8e2:	4628      	mov	r0, r5
    b8e4:	f006 ffa0 	bl	12828 <lfs_dir_get>
        if (res < 0) {
    b8e8:	2800      	cmp	r0, #0
    b8ea:	dadd      	bge.n	b8a8 <lfs_dir_open+0x38>
    b8ec:	e7ee      	b.n	b8cc <lfs_dir_open+0x5c>
        return LFS_ERR_NOTDIR;
    b8ee:	f06f 0013 	mvn.w	r0, #19
    b8f2:	e7eb      	b.n	b8cc <lfs_dir_open+0x5c>
    b8f4:	700ffc00 	.word	0x700ffc00

0000b8f8 <lfs_dir_read>:
int lfs_dir_read(lfs_t *lfs, lfs_dir_t *dir, struct lfs_info *info) {
    b8f8:	b570      	push	{r4, r5, r6, lr}
    b8fa:	4605      	mov	r5, r0
    b8fc:	460c      	mov	r4, r1
    b8fe:	4616      	mov	r6, r2
    memset(info, 0, sizeof(*info));
    b900:	f44f 7284 	mov.w	r2, #264	; 0x108
    b904:	2100      	movs	r1, #0
    b906:	4630      	mov	r0, r6
    b908:	f005 fc94 	bl	11234 <memset>
    if (dir->pos == 0) {
    b90c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    b90e:	b16b      	cbz	r3, b92c <lfs_dir_read+0x34>
    } else if (dir->pos == 1) {
    b910:	2b01      	cmp	r3, #1
    b912:	d11d      	bne.n	b950 <lfs_dir_read+0x58>
        info->type = LFS_TYPE_DIR;
    b914:	4630      	mov	r0, r6
    b916:	2302      	movs	r3, #2
    b918:	f800 3b08 	strb.w	r3, [r0], #8
        strcpy(info->name, "..");
    b91c:	4920      	ldr	r1, [pc, #128]	; (b9a0 <lfs_dir_read+0xa8>)
    b91e:	f005 fbe8 	bl	110f2 <strcpy>
        dir->pos += 1;
    b922:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    b924:	3301      	adds	r3, #1
    b926:	62a3      	str	r3, [r4, #40]	; 0x28
        return true;
    b928:	2101      	movs	r1, #1
    b92a:	e034      	b.n	b996 <lfs_dir_read+0x9e>
        info->type = LFS_TYPE_DIR;
    b92c:	4630      	mov	r0, r6
    b92e:	2302      	movs	r3, #2
    b930:	f800 3b08 	strb.w	r3, [r0], #8
        strcpy(info->name, ".");
    b934:	491b      	ldr	r1, [pc, #108]	; (b9a4 <lfs_dir_read+0xac>)
    b936:	f005 fbdc 	bl	110f2 <strcpy>
        dir->pos += 1;
    b93a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    b93c:	3301      	adds	r3, #1
    b93e:	62a3      	str	r3, [r4, #40]	; 0x28
        return true;
    b940:	2101      	movs	r1, #1
    b942:	e028      	b.n	b996 <lfs_dir_read+0x9e>
        dir->id += 1;
    b944:	88a3      	ldrh	r3, [r4, #4]
    b946:	3301      	adds	r3, #1
    b948:	80a3      	strh	r3, [r4, #4]
        if (err != LFS_ERR_NOENT) {
    b94a:	f111 0f02 	cmn.w	r1, #2
    b94e:	d11e      	bne.n	b98e <lfs_dir_read+0x96>
        if (dir->id == dir->m.count) {
    b950:	88a2      	ldrh	r2, [r4, #4]
    b952:	8ba3      	ldrh	r3, [r4, #28]
    b954:	429a      	cmp	r2, r3
    b956:	d10c      	bne.n	b972 <lfs_dir_read+0x7a>
            if (!dir->m.split) {
    b958:	7fe3      	ldrb	r3, [r4, #31]
    b95a:	b1f3      	cbz	r3, b99a <lfs_dir_read+0xa2>
            int err = lfs_dir_fetch(lfs, &dir->m, dir->m.tail);
    b95c:	f104 0220 	add.w	r2, r4, #32
    b960:	f104 0108 	add.w	r1, r4, #8
    b964:	4628      	mov	r0, r5
    b966:	f006 ff13 	bl	12790 <lfs_dir_fetch>
            if (err) {
    b96a:	4601      	mov	r1, r0
    b96c:	b998      	cbnz	r0, b996 <lfs_dir_read+0x9e>
            dir->id = 0;
    b96e:	2300      	movs	r3, #0
    b970:	80a3      	strh	r3, [r4, #4]
        int err = lfs_dir_getinfo(lfs, &dir->m, dir->id, info);
    b972:	4633      	mov	r3, r6
    b974:	88a2      	ldrh	r2, [r4, #4]
    b976:	f104 0108 	add.w	r1, r4, #8
    b97a:	4628      	mov	r0, r5
    b97c:	f7ff ff2a 	bl	b7d4 <lfs_dir_getinfo>
        if (err && err != LFS_ERR_NOENT) {
    b980:	4601      	mov	r1, r0
    b982:	2800      	cmp	r0, #0
    b984:	d0de      	beq.n	b944 <lfs_dir_read+0x4c>
    b986:	f110 0f02 	cmn.w	r0, #2
    b98a:	d0db      	beq.n	b944 <lfs_dir_read+0x4c>
    b98c:	e003      	b.n	b996 <lfs_dir_read+0x9e>
    dir->pos += 1;
    b98e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    b990:	3301      	adds	r3, #1
    b992:	62a3      	str	r3, [r4, #40]	; 0x28
    return true;
    b994:	2101      	movs	r1, #1
}
    b996:	4608      	mov	r0, r1
    b998:	bd70      	pop	{r4, r5, r6, pc}
                return false;
    b99a:	2100      	movs	r1, #0
    b99c:	e7fb      	b.n	b996 <lfs_dir_read+0x9e>
    b99e:	bf00      	nop
    b9a0:	000158f8 	.word	0x000158f8
    b9a4:	000158f4 	.word	0x000158f4

0000b9a8 <lfs_mount>:
int lfs_mount(lfs_t *lfs, const struct lfs_config *cfg) {
    b9a8:	b570      	push	{r4, r5, r6, lr}
    b9aa:	b09a      	sub	sp, #104	; 0x68
    b9ac:	4604      	mov	r4, r0
    int err = lfs_init(lfs, cfg);
    b9ae:	f007 f9f2 	bl	12d96 <lfs_init>
    if (err) {
    b9b2:	4606      	mov	r6, r0
    b9b4:	2800      	cmp	r0, #0
    b9b6:	f040 80e6 	bne.w	bb86 <lfs_mount+0x1de>
    lfs_mdir_t dir = {.tail = {0, 1}};
    b9ba:	2500      	movs	r5, #0
    b9bc:	950f      	str	r5, [sp, #60]	; 0x3c
    b9be:	9510      	str	r5, [sp, #64]	; 0x40
    b9c0:	9511      	str	r5, [sp, #68]	; 0x44
    b9c2:	9512      	str	r5, [sp, #72]	; 0x48
    b9c4:	9513      	str	r5, [sp, #76]	; 0x4c
    b9c6:	9514      	str	r5, [sp, #80]	; 0x50
    b9c8:	9515      	str	r5, [sp, #84]	; 0x54
    b9ca:	2301      	movs	r3, #1
    b9cc:	9316      	str	r3, [sp, #88]	; 0x58
    while (!lfs_pair_isnull(dir.tail)) {
    b9ce:	e07a      	b.n	bac6 <lfs_mount+0x11e>
    b9d0:	4988      	ldr	r1, [pc, #544]	; (bbf4 <lfs_mount+0x24c>)
    b9d2:	4b89      	ldr	r3, [pc, #548]	; (bbf8 <lfs_mount+0x250>)
    b9d4:	1ac9      	subs	r1, r1, r3
    b9d6:	08c9      	lsrs	r1, r1, #3
                LFS_ERROR("Invalid version v%"PRIu16".%"PRIu16,
    b9d8:	f04f 0300 	mov.w	r3, #0
    b9dc:	2501      	movs	r5, #1
    b9de:	f365 0302 	bfi	r3, r5, #0, #3
    b9e2:	f36f 03c5 	bfc	r3, #3, #3
    b9e6:	f361 138f 	bfi	r3, r1, #6, #10
    b9ea:	4984      	ldr	r1, [pc, #528]	; (bbfc <lfs_mount+0x254>)
    b9ec:	9105      	str	r1, [sp, #20]
    b9ee:	f640 6198 	movw	r1, #3736	; 0xe98
    b9f2:	9106      	str	r1, [sp, #24]
    b9f4:	9007      	str	r0, [sp, #28]
    b9f6:	b292      	uxth	r2, r2
    b9f8:	9208      	str	r2, [sp, #32]
    b9fa:	2204      	movs	r2, #4
    b9fc:	a905      	add	r1, sp, #20
    b9fe:	4880      	ldr	r0, [pc, #512]	; (bc00 <lfs_mount+0x258>)
    ba00:	f7f6 f890 	bl	1b24 <log_n>
                err = LFS_ERR_INVAL;
    ba04:	f06f 0615 	mvn.w	r6, #21
                goto cleanup;
    ba08:	e0ba      	b.n	bb80 <lfs_mount+0x1d8>
    ba0a:	487a      	ldr	r0, [pc, #488]	; (bbf4 <lfs_mount+0x24c>)
    ba0c:	4b7a      	ldr	r3, [pc, #488]	; (bbf8 <lfs_mount+0x250>)
    ba0e:	1ac0      	subs	r0, r0, r3
    ba10:	08c0      	lsrs	r0, r0, #3
                    LFS_ERROR("Unsupported name_max (%"PRIu32" > %"PRIu32")",
    ba12:	f04f 0300 	mov.w	r3, #0
    ba16:	2501      	movs	r5, #1
    ba18:	f365 0302 	bfi	r3, r5, #0, #3
    ba1c:	f36f 03c5 	bfc	r3, #3, #3
    ba20:	f360 138f 	bfi	r3, r0, #6, #10
    ba24:	4875      	ldr	r0, [pc, #468]	; (bbfc <lfs_mount+0x254>)
    ba26:	9005      	str	r0, [sp, #20]
    ba28:	f640 60a1 	movw	r0, #3745	; 0xea1
    ba2c:	9006      	str	r0, [sp, #24]
    ba2e:	9207      	str	r2, [sp, #28]
    ba30:	9108      	str	r1, [sp, #32]
    ba32:	2204      	movs	r2, #4
    ba34:	a905      	add	r1, sp, #20
    ba36:	4873      	ldr	r0, [pc, #460]	; (bc04 <lfs_mount+0x25c>)
    ba38:	f7f6 f874 	bl	1b24 <log_n>
                    err = LFS_ERR_INVAL;
    ba3c:	f06f 0615 	mvn.w	r6, #21
                    goto cleanup;
    ba40:	e09e      	b.n	bb80 <lfs_mount+0x1d8>
    ba42:	486c      	ldr	r0, [pc, #432]	; (bbf4 <lfs_mount+0x24c>)
    ba44:	4b6c      	ldr	r3, [pc, #432]	; (bbf8 <lfs_mount+0x250>)
    ba46:	1ac0      	subs	r0, r0, r3
    ba48:	08c0      	lsrs	r0, r0, #3
                    LFS_ERROR("Unsupported file_max (%"PRIu32" > %"PRIu32")",
    ba4a:	f04f 0300 	mov.w	r3, #0
    ba4e:	2501      	movs	r5, #1
    ba50:	f365 0302 	bfi	r3, r5, #0, #3
    ba54:	f36f 03c5 	bfc	r3, #3, #3
    ba58:	f360 138f 	bfi	r3, r0, #6, #10
    ba5c:	4867      	ldr	r0, [pc, #412]	; (bbfc <lfs_mount+0x254>)
    ba5e:	9005      	str	r0, [sp, #20]
    ba60:	f640 60ac 	movw	r0, #3756	; 0xeac
    ba64:	9006      	str	r0, [sp, #24]
    ba66:	9207      	str	r2, [sp, #28]
    ba68:	9108      	str	r1, [sp, #32]
    ba6a:	2204      	movs	r2, #4
    ba6c:	a905      	add	r1, sp, #20
    ba6e:	4866      	ldr	r0, [pc, #408]	; (bc08 <lfs_mount+0x260>)
    ba70:	f7f6 f858 	bl	1b24 <log_n>
                    err = LFS_ERR_INVAL;
    ba74:	f06f 0615 	mvn.w	r6, #21
                    goto cleanup;
    ba78:	e082      	b.n	bb80 <lfs_mount+0x1d8>
    ba7a:	485e      	ldr	r0, [pc, #376]	; (bbf4 <lfs_mount+0x24c>)
    ba7c:	4b5e      	ldr	r3, [pc, #376]	; (bbf8 <lfs_mount+0x250>)
    ba7e:	1ac0      	subs	r0, r0, r3
    ba80:	08c0      	lsrs	r0, r0, #3
                    LFS_ERROR("Unsupported attr_max (%"PRIu32" > %"PRIu32")",
    ba82:	f04f 0300 	mov.w	r3, #0
    ba86:	2501      	movs	r5, #1
    ba88:	f365 0302 	bfi	r3, r5, #0, #3
    ba8c:	f36f 03c5 	bfc	r3, #3, #3
    ba90:	f360 138f 	bfi	r3, r0, #6, #10
    ba94:	4859      	ldr	r0, [pc, #356]	; (bbfc <lfs_mount+0x254>)
    ba96:	9005      	str	r0, [sp, #20]
    ba98:	f640 60b7 	movw	r0, #3767	; 0xeb7
    ba9c:	9006      	str	r0, [sp, #24]
    ba9e:	9207      	str	r2, [sp, #28]
    baa0:	9108      	str	r1, [sp, #32]
    baa2:	2204      	movs	r2, #4
    baa4:	a905      	add	r1, sp, #20
    baa6:	4859      	ldr	r0, [pc, #356]	; (bc0c <lfs_mount+0x264>)
    baa8:	f7f6 f83c 	bl	1b24 <log_n>
                    err = LFS_ERR_INVAL;
    baac:	f06f 0615 	mvn.w	r6, #21
                    goto cleanup;
    bab0:	e066      	b.n	bb80 <lfs_mount+0x1d8>
                err = tag;
    bab2:	4606      	mov	r6, r0
    bab4:	e064      	b.n	bb80 <lfs_mount+0x1d8>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
    bab6:	f104 0230 	add.w	r2, r4, #48	; 0x30
    baba:	a90f      	add	r1, sp, #60	; 0x3c
    babc:	4620      	mov	r0, r4
    babe:	f7ff fd9b 	bl	b5f8 <lfs_dir_getgstate>
        if (err) {
    bac2:	2800      	cmp	r0, #0
    bac4:	d164      	bne.n	bb90 <lfs_mount+0x1e8>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    bac6:	9b15      	ldr	r3, [sp, #84]	; 0x54
    bac8:	f1b3 3fff 	cmp.w	r3, #4294967295
    bacc:	d064      	beq.n	bb98 <lfs_mount+0x1f0>
    bace:	9b16      	ldr	r3, [sp, #88]	; 0x58
    bad0:	f1b3 3fff 	cmp.w	r3, #4294967295
    bad4:	d05e      	beq.n	bb94 <lfs_mount+0x1ec>
    bad6:	4633      	mov	r3, r6
    while (!lfs_pair_isnull(dir.tail)) {
    bad8:	f013 0f01 	tst.w	r3, #1
    badc:	d15e      	bne.n	bb9c <lfs_mount+0x1f4>
        if (cycle >= lfs->cfg->block_count/2) {
    bade:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    bae0:	6a1b      	ldr	r3, [r3, #32]
    bae2:	ebb5 0f53 	cmp.w	r5, r3, lsr #1
    bae6:	d249      	bcs.n	bb7c <lfs_mount+0x1d4>
        cycle += 1;
    bae8:	3501      	adds	r5, #1
                lfs_dir_find_match, &(struct lfs_dir_find_match){
    baea:	9417      	str	r4, [sp, #92]	; 0x5c
    baec:	4b48      	ldr	r3, [pc, #288]	; (bc10 <lfs_mount+0x268>)
    baee:	9318      	str	r3, [sp, #96]	; 0x60
    baf0:	2308      	movs	r3, #8
    baf2:	9319      	str	r3, [sp, #100]	; 0x64
        lfs_stag_t tag = lfs_dir_fetchmatch(lfs, &dir, dir.tail,
    baf4:	ab17      	add	r3, sp, #92	; 0x5c
    baf6:	9303      	str	r3, [sp, #12]
    baf8:	4b46      	ldr	r3, [pc, #280]	; (bc14 <lfs_mount+0x26c>)
    bafa:	9302      	str	r3, [sp, #8]
    bafc:	2300      	movs	r3, #0
    bafe:	9301      	str	r3, [sp, #4]
    bb00:	4b45      	ldr	r3, [pc, #276]	; (bc18 <lfs_mount+0x270>)
    bb02:	9300      	str	r3, [sp, #0]
    bb04:	4b45      	ldr	r3, [pc, #276]	; (bc1c <lfs_mount+0x274>)
    bb06:	aa15      	add	r2, sp, #84	; 0x54
    bb08:	a90f      	add	r1, sp, #60	; 0x3c
    bb0a:	4620      	mov	r0, r4
    bb0c:	f7ff f8d2 	bl	acb4 <lfs_dir_fetchmatch>
        if (tag < 0) {
    bb10:	2800      	cmp	r0, #0
    bb12:	db3b      	blt.n	bb8c <lfs_mount+0x1e4>
        if (tag && !lfs_tag_isdelete(tag)) {
    bb14:	2800      	cmp	r0, #0
    bb16:	d0ce      	beq.n	bab6 <lfs_mount+0x10e>
    return ((int32_t)(tag << 22) >> 22) == -1;
    bb18:	f340 0009 	sbfx	r0, r0, #0, #10
        if (tag && !lfs_tag_isdelete(tag)) {
    bb1c:	f1b0 3fff 	cmp.w	r0, #4294967295
    bb20:	d0c9      	beq.n	bab6 <lfs_mount+0x10e>
            lfs->root[0] = dir.pair[0];
    bb22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    bb24:	6223      	str	r3, [r4, #32]
            lfs->root[1] = dir.pair[1];
    bb26:	9b10      	ldr	r3, [sp, #64]	; 0x40
    bb28:	6263      	str	r3, [r4, #36]	; 0x24
            tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x7ff, 0x3ff, 0),
    bb2a:	ab09      	add	r3, sp, #36	; 0x24
    bb2c:	9300      	str	r3, [sp, #0]
    bb2e:	4b3c      	ldr	r3, [pc, #240]	; (bc20 <lfs_mount+0x278>)
    bb30:	4a3a      	ldr	r2, [pc, #232]	; (bc1c <lfs_mount+0x274>)
    bb32:	a90f      	add	r1, sp, #60	; 0x3c
    bb34:	4620      	mov	r0, r4
    bb36:	f006 fe77 	bl	12828 <lfs_dir_get>
            if (tag < 0) {
    bb3a:	2800      	cmp	r0, #0
    bb3c:	dbb9      	blt.n	bab2 <lfs_mount+0x10a>
            uint16_t major_version = (0xffff & (superblock.version >> 16));
    bb3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bb40:	0c10      	lsrs	r0, r2, #16
            uint16_t minor_version = (0xffff & (superblock.version >>  0));
    bb42:	b291      	uxth	r1, r2
            if ((major_version != LFS_DISK_VERSION_MAJOR ||
    bb44:	2802      	cmp	r0, #2
    bb46:	f47f af43 	bne.w	b9d0 <lfs_mount+0x28>
    bb4a:	2900      	cmp	r1, #0
    bb4c:	f47f af40 	bne.w	b9d0 <lfs_mount+0x28>
            if (superblock.name_max) {
    bb50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    bb52:	b122      	cbz	r2, bb5e <lfs_mount+0x1b6>
                if (superblock.name_max > lfs->name_max) {
    bb54:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
    bb56:	428a      	cmp	r2, r1
    bb58:	f63f af57 	bhi.w	ba0a <lfs_mount+0x62>
                lfs->name_max = superblock.name_max;
    bb5c:	66e2      	str	r2, [r4, #108]	; 0x6c
            if (superblock.file_max) {
    bb5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    bb60:	b122      	cbz	r2, bb6c <lfs_mount+0x1c4>
                if (superblock.file_max > lfs->file_max) {
    bb62:	6f21      	ldr	r1, [r4, #112]	; 0x70
    bb64:	428a      	cmp	r2, r1
    bb66:	f63f af6c 	bhi.w	ba42 <lfs_mount+0x9a>
                lfs->file_max = superblock.file_max;
    bb6a:	6722      	str	r2, [r4, #112]	; 0x70
            if (superblock.attr_max) {
    bb6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    bb6e:	2a00      	cmp	r2, #0
    bb70:	d0a1      	beq.n	bab6 <lfs_mount+0x10e>
                if (superblock.attr_max > lfs->attr_max) {
    bb72:	6f61      	ldr	r1, [r4, #116]	; 0x74
    bb74:	428a      	cmp	r2, r1
    bb76:	d880      	bhi.n	ba7a <lfs_mount+0xd2>
                lfs->attr_max = superblock.attr_max;
    bb78:	6762      	str	r2, [r4, #116]	; 0x74
    bb7a:	e79c      	b.n	bab6 <lfs_mount+0x10e>
            err = LFS_ERR_CORRUPT;
    bb7c:	f06f 0653 	mvn.w	r6, #83	; 0x53
    lfs_unmount(lfs);
    bb80:	4620      	mov	r0, r4
    bb82:	f007 fa48 	bl	13016 <lfs_unmount>
}
    bb86:	4630      	mov	r0, r6
    bb88:	b01a      	add	sp, #104	; 0x68
    bb8a:	bd70      	pop	{r4, r5, r6, pc}
            err = tag;
    bb8c:	4606      	mov	r6, r0
    bb8e:	e7f7      	b.n	bb80 <lfs_mount+0x1d8>
        err = lfs_dir_getgstate(lfs, &dir, &lfs->gstate);
    bb90:	4606      	mov	r6, r0
    bb92:	e7f5      	b.n	bb80 <lfs_mount+0x1d8>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    bb94:	2301      	movs	r3, #1
    bb96:	e79f      	b.n	bad8 <lfs_mount+0x130>
    bb98:	2301      	movs	r3, #1
    bb9a:	e79d      	b.n	bad8 <lfs_mount+0x130>
    bb9c:	6a23      	ldr	r3, [r4, #32]
    bb9e:	f1b3 3fff 	cmp.w	r3, #4294967295
    bba2:	d013      	beq.n	bbcc <lfs_mount+0x224>
    bba4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    bba6:	f1b3 3fff 	cmp.w	r3, #4294967295
    bbaa:	d00d      	beq.n	bbc8 <lfs_mount+0x220>
    bbac:	4633      	mov	r3, r6
    if (lfs_pair_isnull(lfs->root)) {
    bbae:	f013 0f01 	tst.w	r3, #1
    bbb2:	d11c      	bne.n	bbee <lfs_mount+0x246>
    if (!lfs_gstate_iszero(&lfs->gstate)) {
    bbb4:	f104 0130 	add.w	r1, r4, #48	; 0x30
    for (int i = 0; i < 3; i++) {
    bbb8:	4633      	mov	r3, r6
    bbba:	2b02      	cmp	r3, #2
    bbbc:	dc08      	bgt.n	bbd0 <lfs_mount+0x228>
        if (((uint32_t*)a)[i] != 0) {
    bbbe:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    bbc2:	b92a      	cbnz	r2, bbd0 <lfs_mount+0x228>
    for (int i = 0; i < 3; i++) {
    bbc4:	3301      	adds	r3, #1
    bbc6:	e7f8      	b.n	bbba <lfs_mount+0x212>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    bbc8:	2301      	movs	r3, #1
    bbca:	e7f0      	b.n	bbae <lfs_mount+0x206>
    bbcc:	2301      	movs	r3, #1
    bbce:	e7ee      	b.n	bbae <lfs_mount+0x206>
    lfs->gstate.tag += !lfs_tag_isvalid(lfs->gstate.tag);
    bbd0:	6b23      	ldr	r3, [r4, #48]	; 0x30
    bbd2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    bbd6:	6323      	str	r3, [r4, #48]	; 0x30
    lfs->gdisk = lfs->gstate;
    bbd8:	f104 033c 	add.w	r3, r4, #60	; 0x3c
    bbdc:	f104 0230 	add.w	r2, r4, #48	; 0x30
    bbe0:	ca07      	ldmia	r2, {r0, r1, r2}
    bbe2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    lfs_alloc_reset(lfs);
    bbe6:	4620      	mov	r0, r4
    bbe8:	f006 fc5b 	bl	124a2 <lfs_alloc_reset>
    return 0;
    bbec:	e7cb      	b.n	bb86 <lfs_mount+0x1de>
        err = LFS_ERR_INVAL;
    bbee:	f06f 0615 	mvn.w	r6, #21
    bbf2:	e7c5      	b.n	bb80 <lfs_mount+0x1d8>
    bbf4:	00014330 	.word	0x00014330
    bbf8:	00014318 	.word	0x00014318
    bbfc:	000158a0 	.word	0x000158a0
    bc00:	000158fc 	.word	0x000158fc
    bc04:	0001591c 	.word	0x0001591c
    bc08:	00015944 	.word	0x00015944
    bc0c:	0001596c 	.word	0x0001596c
    bc10:	00015394 	.word	0x00015394
    bc14:	00012751 	.word	0x00012751
    bc18:	0ff00008 	.word	0x0ff00008
    bc1c:	7ffffc00 	.word	0x7ffffc00
    bc20:	20100018 	.word	0x20100018

0000bc24 <lfs_fs_traverseraw>:
        bool includeorphans) {
    bc24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bc28:	b08f      	sub	sp, #60	; 0x3c
    bc2a:	4606      	mov	r6, r0
    bc2c:	460f      	mov	r7, r1
    bc2e:	4690      	mov	r8, r2
    bc30:	4699      	mov	r9, r3
    lfs_mdir_t dir = {.tail = {0, 1}};
    bc32:	2500      	movs	r5, #0
    bc34:	9506      	str	r5, [sp, #24]
    bc36:	9507      	str	r5, [sp, #28]
    bc38:	9508      	str	r5, [sp, #32]
    bc3a:	9509      	str	r5, [sp, #36]	; 0x24
    bc3c:	950a      	str	r5, [sp, #40]	; 0x28
    bc3e:	950b      	str	r5, [sp, #44]	; 0x2c
    bc40:	950c      	str	r5, [sp, #48]	; 0x30
    bc42:	2301      	movs	r3, #1
    bc44:	930d      	str	r3, [sp, #52]	; 0x34
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    bc46:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    bc48:	f1b3 3fff 	cmp.w	r3, #4294967295
    bc4c:	d06d      	beq.n	bd2a <lfs_fs_traverseraw+0x106>
    bc4e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    bc50:	f1b3 3fff 	cmp.w	r3, #4294967295
    bc54:	d067      	beq.n	bd26 <lfs_fs_traverseraw+0x102>
    bc56:	2300      	movs	r3, #0
    while (!lfs_pair_isnull(dir.tail)) {
    bc58:	2b00      	cmp	r3, #0
    bc5a:	d168      	bne.n	bd2e <lfs_fs_traverseraw+0x10a>
        if (cycle >= lfs->cfg->block_count/2) {
    bc5c:	6eb3      	ldr	r3, [r6, #104]	; 0x68
    bc5e:	6a1b      	ldr	r3, [r3, #32]
    bc60:	ebb5 0f53 	cmp.w	r5, r3, lsr #1
    bc64:	f080 8097 	bcs.w	bd96 <lfs_fs_traverseraw+0x172>
        cycle += 1;
    bc68:	3501      	adds	r5, #1
        for (int i = 0; i < 2; i++) {
    bc6a:	2400      	movs	r4, #0
    bc6c:	2c01      	cmp	r4, #1
    bc6e:	dc0b      	bgt.n	bc88 <lfs_fs_traverseraw+0x64>
            int err = cb(data, dir.tail[i]);
    bc70:	1da3      	adds	r3, r4, #6
    bc72:	aa0e      	add	r2, sp, #56	; 0x38
    bc74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    bc78:	f853 1c20 	ldr.w	r1, [r3, #-32]
    bc7c:	4640      	mov	r0, r8
    bc7e:	47b8      	blx	r7
            if (err) {
    bc80:	4603      	mov	r3, r0
    bc82:	b978      	cbnz	r0, bca4 <lfs_fs_traverseraw+0x80>
        for (int i = 0; i < 2; i++) {
    bc84:	3401      	adds	r4, #1
    bc86:	e7f1      	b.n	bc6c <lfs_fs_traverseraw+0x48>
        int err = lfs_dir_fetch(lfs, &dir, dir.tail);
    bc88:	aa0c      	add	r2, sp, #48	; 0x30
    bc8a:	a906      	add	r1, sp, #24
    bc8c:	4630      	mov	r0, r6
    bc8e:	f006 fd7f 	bl	12790 <lfs_dir_fetch>
        if (err) {
    bc92:	4682      	mov	sl, r0
    bc94:	2800      	cmp	r0, #0
    bc96:	f040 8081 	bne.w	bd9c <lfs_fs_traverseraw+0x178>
        for (uint16_t id = 0; id < dir.count; id++) {
    bc9a:	2400      	movs	r4, #0
    bc9c:	e016      	b.n	bccc <lfs_fs_traverseraw+0xa8>
                if (tag == LFS_ERR_NOENT) {
    bc9e:	f113 0f02 	cmn.w	r3, #2
    bca2:	d011      	beq.n	bcc8 <lfs_fs_traverseraw+0xa4>
}
    bca4:	4618      	mov	r0, r3
    bca6:	b00f      	add	sp, #60	; 0x3c
    bca8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                err = lfs_ctz_traverse(lfs, NULL, &lfs->rcache,
    bcac:	f8cd 8008 	str.w	r8, [sp, #8]
    bcb0:	9701      	str	r7, [sp, #4]
    bcb2:	9b05      	ldr	r3, [sp, #20]
    bcb4:	9300      	str	r3, [sp, #0]
    bcb6:	9b04      	ldr	r3, [sp, #16]
    bcb8:	4632      	mov	r2, r6
    bcba:	2100      	movs	r1, #0
    bcbc:	4630      	mov	r0, r6
    bcbe:	f007 f8e6 	bl	12e8e <lfs_ctz_traverse>
                if (err) {
    bcc2:	4603      	mov	r3, r0
    bcc4:	2800      	cmp	r0, #0
    bcc6:	d1ed      	bne.n	bca4 <lfs_fs_traverseraw+0x80>
        for (uint16_t id = 0; id < dir.count; id++) {
    bcc8:	3401      	adds	r4, #1
    bcca:	b2a4      	uxth	r4, r4
    bccc:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    bcd0:	42a3      	cmp	r3, r4
    bcd2:	d9b8      	bls.n	bc46 <lfs_fs_traverseraw+0x22>
                    LFS_MKTAG(LFS_TYPE_STRUCT, id, sizeof(ctz)), &ctz);
    bcd4:	02a3      	lsls	r3, r4, #10
            lfs_stag_t tag = lfs_dir_get(lfs, &dir, LFS_MKTAG(0x700, 0x3ff, 0),
    bcd6:	aa04      	add	r2, sp, #16
    bcd8:	9200      	str	r2, [sp, #0]
    bcda:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    bcde:	f043 0308 	orr.w	r3, r3, #8
    bce2:	4a2f      	ldr	r2, [pc, #188]	; (bda0 <lfs_fs_traverseraw+0x17c>)
    bce4:	a906      	add	r1, sp, #24
    bce6:	4630      	mov	r0, r6
    bce8:	f006 fd9e 	bl	12828 <lfs_dir_get>
            if (tag < 0) {
    bcec:	1e03      	subs	r3, r0, #0
    bcee:	dbd6      	blt.n	bc9e <lfs_fs_traverseraw+0x7a>
    return (tag & 0x7ff00000) >> 20;
    bcf0:	f3c3 530a 	ubfx	r3, r3, #20, #11
            if (lfs_tag_type3(tag) == LFS_TYPE_CTZSTRUCT) {
    bcf4:	f240 2202 	movw	r2, #514	; 0x202
    bcf8:	4293      	cmp	r3, r2
    bcfa:	d0d7      	beq.n	bcac <lfs_fs_traverseraw+0x88>
            } else if (includeorphans && 
    bcfc:	f1b9 0f00 	cmp.w	r9, #0
    bd00:	d0e2      	beq.n	bcc8 <lfs_fs_traverseraw+0xa4>
    bd02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    bd06:	d1df      	bne.n	bcc8 <lfs_fs_traverseraw+0xa4>
                for (int i = 0; i < 2; i++) {
    bd08:	46d3      	mov	fp, sl
    bd0a:	f1bb 0f01 	cmp.w	fp, #1
    bd0e:	dcdb      	bgt.n	bcc8 <lfs_fs_traverseraw+0xa4>
                    err = cb(data, (&ctz.head)[i]);
    bd10:	ab04      	add	r3, sp, #16
    bd12:	f853 102b 	ldr.w	r1, [r3, fp, lsl #2]
    bd16:	4640      	mov	r0, r8
    bd18:	47b8      	blx	r7
                    if (err) {
    bd1a:	4603      	mov	r3, r0
    bd1c:	2800      	cmp	r0, #0
    bd1e:	d1c1      	bne.n	bca4 <lfs_fs_traverseraw+0x80>
                for (int i = 0; i < 2; i++) {
    bd20:	f10b 0b01 	add.w	fp, fp, #1
    bd24:	e7f1      	b.n	bd0a <lfs_fs_traverseraw+0xe6>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    bd26:	2301      	movs	r3, #1
    bd28:	e796      	b.n	bc58 <lfs_fs_traverseraw+0x34>
    bd2a:	2301      	movs	r3, #1
    bd2c:	e794      	b.n	bc58 <lfs_fs_traverseraw+0x34>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
    bd2e:	6ab4      	ldr	r4, [r6, #40]	; 0x28
    bd30:	e00f      	b.n	bd52 <lfs_fs_traverseraw+0x12e>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
    bd32:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    bd34:	f8cd 8008 	str.w	r8, [sp, #8]
    bd38:	9701      	str	r7, [sp, #4]
    bd3a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    bd3c:	9200      	str	r2, [sp, #0]
    bd3e:	4632      	mov	r2, r6
    bd40:	f104 0140 	add.w	r1, r4, #64	; 0x40
    bd44:	4630      	mov	r0, r6
    bd46:	f007 f8a2 	bl	12e8e <lfs_ctz_traverse>
            if (err) {
    bd4a:	4603      	mov	r3, r0
    bd4c:	b158      	cbz	r0, bd66 <lfs_fs_traverseraw+0x142>
    bd4e:	e7a9      	b.n	bca4 <lfs_fs_traverseraw+0x80>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
    bd50:	6824      	ldr	r4, [r4, #0]
    bd52:	b1f4      	cbz	r4, bd92 <lfs_fs_traverseraw+0x16e>
        if (f->type != LFS_TYPE_REG) {
    bd54:	79a3      	ldrb	r3, [r4, #6]
    bd56:	2b01      	cmp	r3, #1
    bd58:	d1fa      	bne.n	bd50 <lfs_fs_traverseraw+0x12c>
        if ((f->flags & LFS_F_DIRTY) && !(f->flags & LFS_F_INLINE)) {
    bd5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    bd5c:	f403 1388 	and.w	r3, r3, #1114112	; 0x110000
    bd60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    bd64:	d0e5      	beq.n	bd32 <lfs_fs_traverseraw+0x10e>
        if ((f->flags & LFS_F_WRITING) && !(f->flags & LFS_F_INLINE)) {
    bd66:	6b23      	ldr	r3, [r4, #48]	; 0x30
    bd68:	f403 1390 	and.w	r3, r3, #1179648	; 0x120000
    bd6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    bd70:	d1ee      	bne.n	bd50 <lfs_fs_traverseraw+0x12c>
            int err = lfs_ctz_traverse(lfs, &f->cache, &lfs->rcache,
    bd72:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    bd74:	f8cd 8008 	str.w	r8, [sp, #8]
    bd78:	9701      	str	r7, [sp, #4]
    bd7a:	6b62      	ldr	r2, [r4, #52]	; 0x34
    bd7c:	9200      	str	r2, [sp, #0]
    bd7e:	4632      	mov	r2, r6
    bd80:	f104 0140 	add.w	r1, r4, #64	; 0x40
    bd84:	4630      	mov	r0, r6
    bd86:	f007 f882 	bl	12e8e <lfs_ctz_traverse>
            if (err) {
    bd8a:	4603      	mov	r3, r0
    bd8c:	2800      	cmp	r0, #0
    bd8e:	d0df      	beq.n	bd50 <lfs_fs_traverseraw+0x12c>
    bd90:	e788      	b.n	bca4 <lfs_fs_traverseraw+0x80>
    return 0;
    bd92:	2300      	movs	r3, #0
    bd94:	e786      	b.n	bca4 <lfs_fs_traverseraw+0x80>
            return LFS_ERR_CORRUPT;
    bd96:	f06f 0353 	mvn.w	r3, #83	; 0x53
    bd9a:	e783      	b.n	bca4 <lfs_fs_traverseraw+0x80>
            return err;
    bd9c:	4603      	mov	r3, r0
    bd9e:	e781      	b.n	bca4 <lfs_fs_traverseraw+0x80>
    bda0:	700ffc00 	.word	0x700ffc00

0000bda4 <lfs_alloc>:
static int lfs_alloc(lfs_t *lfs, lfs_block_t *block) {
    bda4:	b570      	push	{r4, r5, r6, lr}
    bda6:	b082      	sub	sp, #8
    bda8:	4604      	mov	r4, r0
    bdaa:	460d      	mov	r5, r1
        while (lfs->free.i != lfs->free.size) {
    bdac:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    bdae:	6da2      	ldr	r2, [r4, #88]	; 0x58
    bdb0:	4293      	cmp	r3, r2
    bdb2:	d02d      	beq.n	be10 <lfs_alloc+0x6c>
            lfs->free.i += 1;
    bdb4:	1c5a      	adds	r2, r3, #1
    bdb6:	65e2      	str	r2, [r4, #92]	; 0x5c
            lfs->free.ack -= 1;
    bdb8:	6e22      	ldr	r2, [r4, #96]	; 0x60
    bdba:	3a01      	subs	r2, #1
    bdbc:	6622      	str	r2, [r4, #96]	; 0x60
            if (!(lfs->free.buffer[off / 32] & (1U << (off % 32)))) {
    bdbe:	6e62      	ldr	r2, [r4, #100]	; 0x64
    bdc0:	0959      	lsrs	r1, r3, #5
    bdc2:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
    bdc6:	f003 001f 	and.w	r0, r3, #31
    bdca:	2201      	movs	r2, #1
    bdcc:	4082      	lsls	r2, r0
    bdce:	4211      	tst	r1, r2
    bdd0:	d1ec      	bne.n	bdac <lfs_alloc+0x8>
                *block = (lfs->free.off + off) % lfs->cfg->block_count;
    bdd2:	6d62      	ldr	r2, [r4, #84]	; 0x54
    bdd4:	4413      	add	r3, r2
    bdd6:	6ea2      	ldr	r2, [r4, #104]	; 0x68
    bdd8:	6a11      	ldr	r1, [r2, #32]
    bdda:	fbb3 f2f1 	udiv	r2, r3, r1
    bdde:	fb01 3312 	mls	r3, r1, r2, r3
    bde2:	602b      	str	r3, [r5, #0]
                while (lfs->free.i != lfs->free.size &&
    bde4:	e004      	b.n	bdf0 <lfs_alloc+0x4c>
                    lfs->free.i += 1;
    bde6:	3301      	adds	r3, #1
    bde8:	65e3      	str	r3, [r4, #92]	; 0x5c
                    lfs->free.ack -= 1;
    bdea:	6e23      	ldr	r3, [r4, #96]	; 0x60
    bdec:	3b01      	subs	r3, #1
    bdee:	6623      	str	r3, [r4, #96]	; 0x60
                while (lfs->free.i != lfs->free.size &&
    bdf0:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    bdf2:	6da2      	ldr	r2, [r4, #88]	; 0x58
    bdf4:	4293      	cmp	r3, r2
    bdf6:	d049      	beq.n	be8c <lfs_alloc+0xe8>
                        (lfs->free.buffer[lfs->free.i / 32]
    bdf8:	6e62      	ldr	r2, [r4, #100]	; 0x64
    bdfa:	0959      	lsrs	r1, r3, #5
    bdfc:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
                            & (1U << (lfs->free.i % 32)))) {
    be00:	f003 001f 	and.w	r0, r3, #31
    be04:	2201      	movs	r2, #1
    be06:	4082      	lsls	r2, r0
                while (lfs->free.i != lfs->free.size &&
    be08:	4211      	tst	r1, r2
    be0a:	d1ec      	bne.n	bde6 <lfs_alloc+0x42>
                return 0;
    be0c:	2600      	movs	r6, #0
    be0e:	e03e      	b.n	be8e <lfs_alloc+0xea>
        if (lfs->free.ack == 0) {
    be10:	6e21      	ldr	r1, [r4, #96]	; 0x60
    be12:	b309      	cbz	r1, be58 <lfs_alloc+0xb4>
        lfs->free.off = (lfs->free.off + lfs->free.size)
    be14:	6d63      	ldr	r3, [r4, #84]	; 0x54
    be16:	441a      	add	r2, r3
                % lfs->cfg->block_count;
    be18:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    be1a:	6a1e      	ldr	r6, [r3, #32]
    be1c:	fbb2 f0f6 	udiv	r0, r2, r6
    be20:	fb06 2210 	mls	r2, r6, r0, r2
        lfs->free.off = (lfs->free.off + lfs->free.size)
    be24:	6562      	str	r2, [r4, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size, lfs->free.ack);
    be26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    be28:	00d2      	lsls	r2, r2, #3
    be2a:	4291      	cmp	r1, r2
    be2c:	bf28      	it	cs
    be2e:	4611      	movcs	r1, r2
    be30:	65a1      	str	r1, [r4, #88]	; 0x58
        lfs->free.i = 0;
    be32:	2100      	movs	r1, #0
    be34:	65e1      	str	r1, [r4, #92]	; 0x5c
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
    be36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    be38:	6e60      	ldr	r0, [r4, #100]	; 0x64
    be3a:	f005 f9fb 	bl	11234 <memset>
        int err = lfs_fs_traverseraw(lfs, lfs_alloc_lookahead, lfs, true);
    be3e:	2301      	movs	r3, #1
    be40:	4622      	mov	r2, r4
    be42:	4914      	ldr	r1, [pc, #80]	; (be94 <lfs_alloc+0xf0>)
    be44:	4620      	mov	r0, r4
    be46:	f7ff feed 	bl	bc24 <lfs_fs_traverseraw>
        if (err) {
    be4a:	4606      	mov	r6, r0
    be4c:	2800      	cmp	r0, #0
    be4e:	d0ad      	beq.n	bdac <lfs_alloc+0x8>
            lfs_alloc_reset(lfs);
    be50:	4620      	mov	r0, r4
    be52:	f006 fb26 	bl	124a2 <lfs_alloc_reset>
            return err;
    be56:	e01a      	b.n	be8e <lfs_alloc+0xea>
    be58:	4a0f      	ldr	r2, [pc, #60]	; (be98 <lfs_alloc+0xf4>)
    be5a:	4910      	ldr	r1, [pc, #64]	; (be9c <lfs_alloc+0xf8>)
    be5c:	1a52      	subs	r2, r2, r1
    be5e:	08d2      	lsrs	r2, r2, #3
            LFS_ERROR("No more free space %"PRIu32,
    be60:	f04f 0100 	mov.w	r1, #0
    be64:	2001      	movs	r0, #1
    be66:	f360 0102 	bfi	r1, r0, #0, #3
    be6a:	f36f 01c5 	bfc	r1, #3, #3
    be6e:	f362 118f 	bfi	r1, r2, #6, #10
    be72:	6d62      	ldr	r2, [r4, #84]	; 0x54
    be74:	f8ad 1000 	strh.w	r1, [sp]
    be78:	4413      	add	r3, r2
    be7a:	f44f 72f7 	mov.w	r2, #494	; 0x1ee
    be7e:	4908      	ldr	r1, [pc, #32]	; (bea0 <lfs_alloc+0xfc>)
    be80:	4808      	ldr	r0, [pc, #32]	; (bea4 <lfs_alloc+0x100>)
    be82:	f7f5 fd9f 	bl	19c4 <log_3>
            return LFS_ERR_NOSPC;
    be86:	f06f 061b 	mvn.w	r6, #27
    be8a:	e000      	b.n	be8e <lfs_alloc+0xea>
                return 0;
    be8c:	2600      	movs	r6, #0
}
    be8e:	4630      	mov	r0, r6
    be90:	b002      	add	sp, #8
    be92:	bd70      	pop	{r4, r5, r6, pc}
    be94:	00012467 	.word	0x00012467
    be98:	00014330 	.word	0x00014330
    be9c:	00014318 	.word	0x00014318
    bea0:	000158a0 	.word	0x000158a0
    bea4:	00015994 	.word	0x00015994

0000bea8 <lfs_file_relocate>:
static int lfs_file_relocate(lfs_t *lfs, lfs_file_t *file) {
    bea8:	b5f0      	push	{r4, r5, r6, r7, lr}
    beaa:	b089      	sub	sp, #36	; 0x24
    beac:	4605      	mov	r5, r0
    beae:	460e      	mov	r6, r1
    beb0:	e04a      	b.n	bf48 <lfs_file_relocate+0xa0>
                err = lfs_bd_read(lfs,
    beb2:	2201      	movs	r2, #1
    beb4:	9203      	str	r2, [sp, #12]
    beb6:	f10d 021b 	add.w	r2, sp, #27
    beba:	9202      	str	r2, [sp, #8]
    bebc:	9401      	str	r4, [sp, #4]
    bebe:	6bb2      	ldr	r2, [r6, #56]	; 0x38
    bec0:	9200      	str	r2, [sp, #0]
    bec2:	1b1b      	subs	r3, r3, r4
    bec4:	462a      	mov	r2, r5
    bec6:	f106 0140 	add.w	r1, r6, #64	; 0x40
    beca:	4628      	mov	r0, r5
    becc:	f006 fb18 	bl	12500 <lfs_bd_read>
                if (err) {
    bed0:	2800      	cmp	r0, #0
    bed2:	d149      	bne.n	bf68 <lfs_file_relocate+0xc0>
            err = lfs_bd_prog(lfs,
    bed4:	2301      	movs	r3, #1
    bed6:	9303      	str	r3, [sp, #12]
    bed8:	f10d 021b 	add.w	r2, sp, #27
    bedc:	9202      	str	r2, [sp, #8]
    bede:	9401      	str	r4, [sp, #4]
    bee0:	9a07      	ldr	r2, [sp, #28]
    bee2:	9200      	str	r2, [sp, #0]
    bee4:	462a      	mov	r2, r5
    bee6:	f105 0110 	add.w	r1, r5, #16
    beea:	4628      	mov	r0, r5
    beec:	f006 fd7f 	bl	129ee <lfs_bd_prog>
            if (err) {
    bef0:	bb20      	cbnz	r0, bf3c <lfs_file_relocate+0x94>
        for (lfs_off_t i = 0; i < file->off; i++) {
    bef2:	3401      	adds	r4, #1
    bef4:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
    bef6:	42a3      	cmp	r3, r4
    bef8:	d93c      	bls.n	bf74 <lfs_file_relocate+0xcc>
            if (file->flags & LFS_F_INLINE) {
    befa:	6b32      	ldr	r2, [r6, #48]	; 0x30
    befc:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
    bf00:	d0d7      	beq.n	beb2 <lfs_file_relocate+0xa>
                        LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
    bf02:	88b2      	ldrh	r2, [r6, #4]
    bf04:	0292      	lsls	r2, r2, #10
                err = lfs_dir_getread(lfs, &file->m,
    bf06:	2101      	movs	r1, #1
    bf08:	9105      	str	r1, [sp, #20]
    bf0a:	f10d 011b 	add.w	r1, sp, #27
    bf0e:	9104      	str	r1, [sp, #16]
    bf10:	9403      	str	r4, [sp, #12]
    bf12:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
    bf16:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    bf1a:	9202      	str	r2, [sp, #8]
    bf1c:	4a24      	ldr	r2, [pc, #144]	; (bfb0 <lfs_file_relocate+0x108>)
    bf1e:	9201      	str	r2, [sp, #4]
    bf20:	1b1b      	subs	r3, r3, r4
    bf22:	9300      	str	r3, [sp, #0]
    bf24:	f106 0340 	add.w	r3, r6, #64	; 0x40
    bf28:	2200      	movs	r2, #0
    bf2a:	f106 0108 	add.w	r1, r6, #8
    bf2e:	4628      	mov	r0, r5
    bf30:	f006 fc87 	bl	12842 <lfs_dir_getread>
                if (err) {
    bf34:	2800      	cmp	r0, #0
    bf36:	d0cd      	beq.n	bed4 <lfs_file_relocate+0x2c>
                    return err;
    bf38:	4607      	mov	r7, r0
    bf3a:	e036      	b.n	bfaa <lfs_file_relocate+0x102>
                if (err == LFS_ERR_CORRUPT) {
    bf3c:	f110 0f54 	cmn.w	r0, #84	; 0x54
    bf40:	d114      	bne.n	bf6c <lfs_file_relocate+0xc4>
    rcache->block = LFS_BLOCK_NULL;
    bf42:	f04f 33ff 	mov.w	r3, #4294967295
    bf46:	612b      	str	r3, [r5, #16]
        int err = lfs_alloc(lfs, &nblock);
    bf48:	a907      	add	r1, sp, #28
    bf4a:	4628      	mov	r0, r5
    bf4c:	f7ff ff2a 	bl	bda4 <lfs_alloc>
        if (err) {
    bf50:	4607      	mov	r7, r0
    bf52:	bb50      	cbnz	r0, bfaa <lfs_file_relocate+0x102>
        err = lfs_bd_erase(lfs, nblock);
    bf54:	9907      	ldr	r1, [sp, #28]
    bf56:	4628      	mov	r0, r5
    bf58:	f006 fa80 	bl	1245c <lfs_bd_erase>
        if (err) {
    bf5c:	4607      	mov	r7, r0
    bf5e:	b138      	cbz	r0, bf70 <lfs_file_relocate+0xc8>
            if (err == LFS_ERR_CORRUPT) {
    bf60:	f110 0f54 	cmn.w	r0, #84	; 0x54
    bf64:	d0ed      	beq.n	bf42 <lfs_file_relocate+0x9a>
    bf66:	e020      	b.n	bfaa <lfs_file_relocate+0x102>
                    return err;
    bf68:	4607      	mov	r7, r0
    bf6a:	e01e      	b.n	bfaa <lfs_file_relocate+0x102>
                return err;
    bf6c:	4607      	mov	r7, r0
    bf6e:	e01c      	b.n	bfaa <lfs_file_relocate+0x102>
        for (lfs_off_t i = 0; i < file->off; i++) {
    bf70:	2400      	movs	r4, #0
    bf72:	e7bf      	b.n	bef4 <lfs_file_relocate+0x4c>
        memcpy(file->cache.buffer, lfs->pcache.buffer, lfs->cfg->cache_size);
    bf74:	6eab      	ldr	r3, [r5, #104]	; 0x68
    bf76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    bf78:	69e9      	ldr	r1, [r5, #28]
    bf7a:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
    bf7c:	f005 f936 	bl	111ec <memcpy>
        file->cache.block = lfs->pcache.block;
    bf80:	692b      	ldr	r3, [r5, #16]
    bf82:	6433      	str	r3, [r6, #64]	; 0x40
        file->cache.off = lfs->pcache.off;
    bf84:	696b      	ldr	r3, [r5, #20]
    bf86:	6473      	str	r3, [r6, #68]	; 0x44
        file->cache.size = lfs->pcache.size;
    bf88:	69ab      	ldr	r3, [r5, #24]
    bf8a:	64b3      	str	r3, [r6, #72]	; 0x48
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
    bf8c:	6eab      	ldr	r3, [r5, #104]	; 0x68
    bf8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    bf90:	21ff      	movs	r1, #255	; 0xff
    bf92:	69e8      	ldr	r0, [r5, #28]
    bf94:	f005 f94e 	bl	11234 <memset>
    pcache->block = LFS_BLOCK_NULL;
    bf98:	f04f 33ff 	mov.w	r3, #4294967295
    bf9c:	612b      	str	r3, [r5, #16]
        file->block = nblock;
    bf9e:	9b07      	ldr	r3, [sp, #28]
    bfa0:	63b3      	str	r3, [r6, #56]	; 0x38
        file->flags |= LFS_F_WRITING;
    bfa2:	6b33      	ldr	r3, [r6, #48]	; 0x30
    bfa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    bfa8:	6333      	str	r3, [r6, #48]	; 0x30
}
    bfaa:	4638      	mov	r0, r7
    bfac:	b009      	add	sp, #36	; 0x24
    bfae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    bfb0:	fff7fc00 	.word	0xfff7fc00

0000bfb4 <lfs_file_flush>:
static int lfs_file_flush(lfs_t *lfs, lfs_file_t *file) {
    bfb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    bfb6:	b097      	sub	sp, #92	; 0x5c
    bfb8:	4605      	mov	r5, r0
    bfba:	460c      	mov	r4, r1
    if (file->flags & LFS_F_READING) {
    bfbc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    bfbe:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    bfc2:	d008      	beq.n	bfd6 <lfs_file_flush+0x22>
        if (!(file->flags & LFS_F_INLINE)) {
    bfc4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    bfc8:	d102      	bne.n	bfd0 <lfs_file_flush+0x1c>
    rcache->block = LFS_BLOCK_NULL;
    bfca:	f04f 32ff 	mov.w	r2, #4294967295
    bfce:	640a      	str	r2, [r1, #64]	; 0x40
        file->flags &= ~LFS_F_READING;
    bfd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
    bfd4:	6323      	str	r3, [r4, #48]	; 0x30
    if (file->flags & LFS_F_WRITING) {
    bfd6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    bfd8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    bfdc:	d05e      	beq.n	c09c <lfs_file_flush+0xe8>
        lfs_off_t pos = file->pos;
    bfde:	6b66      	ldr	r6, [r4, #52]	; 0x34
        if (!(file->flags & LFS_F_INLINE)) {
    bfe0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    bfe4:	d148      	bne.n	c078 <lfs_file_flush+0xc4>
            lfs_file_t orig = {
    bfe6:	2254      	movs	r2, #84	; 0x54
    bfe8:	2100      	movs	r1, #0
    bfea:	a801      	add	r0, sp, #4
    bfec:	f005 f922 	bl	11234 <memset>
                .ctz.head = file->ctz.head,
    bff0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
            lfs_file_t orig = {
    bff2:	930b      	str	r3, [sp, #44]	; 0x2c
                .ctz.size = file->ctz.size,
    bff4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
            lfs_file_t orig = {
    bff6:	930c      	str	r3, [sp, #48]	; 0x30
    bff8:	4b2a      	ldr	r3, [pc, #168]	; (c0a4 <lfs_file_flush+0xf0>)
    bffa:	930d      	str	r3, [sp, #52]	; 0x34
                .pos = file->pos,
    bffc:	6b63      	ldr	r3, [r4, #52]	; 0x34
            lfs_file_t orig = {
    bffe:	930e      	str	r3, [sp, #56]	; 0x38
    c000:	af11      	add	r7, sp, #68	; 0x44
    c002:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    c006:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    rcache->block = LFS_BLOCK_NULL;
    c00a:	f04f 33ff 	mov.w	r3, #4294967295
    c00e:	602b      	str	r3, [r5, #0]
}
    c010:	e003      	b.n	c01a <lfs_file_flush+0x66>
    rcache->block = LFS_BLOCK_NULL;
    c012:	f04f 33ff 	mov.w	r3, #4294967295
    c016:	9311      	str	r3, [sp, #68]	; 0x44
    c018:	602b      	str	r3, [r5, #0]
            while (file->pos < file->ctz.size) {
    c01a:	6b62      	ldr	r2, [r4, #52]	; 0x34
    c01c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    c01e:	429a      	cmp	r2, r3
    c020:	d216      	bcs.n	c050 <lfs_file_flush+0x9c>
                lfs_ssize_t res = lfs_file_read(lfs, &orig, &data, 1);
    c022:	2301      	movs	r3, #1
    c024:	f10d 0203 	add.w	r2, sp, #3
    c028:	a901      	add	r1, sp, #4
    c02a:	4628      	mov	r0, r5
    c02c:	f000 f83c 	bl	c0a8 <lfs_file_read>
                if (res < 0) {
    c030:	1e03      	subs	r3, r0, #0
    c032:	db34      	blt.n	c09e <lfs_file_flush+0xea>
                res = lfs_file_write(lfs, file, &data, 1);
    c034:	2301      	movs	r3, #1
    c036:	f10d 0203 	add.w	r2, sp, #3
    c03a:	4621      	mov	r1, r4
    c03c:	4628      	mov	r0, r5
    c03e:	f007 f8e2 	bl	13206 <lfs_file_write>
                if (res < 0) {
    c042:	1e03      	subs	r3, r0, #0
    c044:	db2b      	blt.n	c09e <lfs_file_flush+0xea>
                if (lfs->rcache.block != LFS_BLOCK_NULL) {
    c046:	682b      	ldr	r3, [r5, #0]
    c048:	f1b3 3fff 	cmp.w	r3, #4294967295
    c04c:	d1e1      	bne.n	c012 <lfs_file_flush+0x5e>
    c04e:	e7e4      	b.n	c01a <lfs_file_flush+0x66>
                int err = lfs_bd_flush(lfs, &file->cache, &lfs->rcache, true);
    c050:	2301      	movs	r3, #1
    c052:	462a      	mov	r2, r5
    c054:	f104 0140 	add.w	r1, r4, #64	; 0x40
    c058:	4628      	mov	r0, r5
    c05a:	f006 fc80 	bl	1295e <lfs_bd_flush>
                if (err) {
    c05e:	4603      	mov	r3, r0
    c060:	b178      	cbz	r0, c082 <lfs_file_flush+0xce>
                    if (err == LFS_ERR_CORRUPT) {
    c062:	f110 0f54 	cmn.w	r0, #84	; 0x54
    c066:	d11a      	bne.n	c09e <lfs_file_flush+0xea>
                err = lfs_file_relocate(lfs, file);
    c068:	4621      	mov	r1, r4
    c06a:	4628      	mov	r0, r5
    c06c:	f7ff ff1c 	bl	bea8 <lfs_file_relocate>
                if (err) {
    c070:	4603      	mov	r3, r0
    c072:	2800      	cmp	r0, #0
    c074:	d0ec      	beq.n	c050 <lfs_file_flush+0x9c>
    c076:	e012      	b.n	c09e <lfs_file_flush+0xea>
            file->pos = lfs_max(file->pos, file->ctz.size);
    c078:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (a > b) ? a : b;
    c07a:	42b3      	cmp	r3, r6
    c07c:	bf38      	it	cc
    c07e:	4633      	movcc	r3, r6
    c080:	6363      	str	r3, [r4, #52]	; 0x34
        file->ctz.head = file->block;
    c082:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    c084:	62a3      	str	r3, [r4, #40]	; 0x28
        file->ctz.size = file->pos;
    c086:	6b63      	ldr	r3, [r4, #52]	; 0x34
    c088:	62e3      	str	r3, [r4, #44]	; 0x2c
        file->flags &= ~LFS_F_WRITING;
    c08a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    c08c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
        file->flags |= LFS_F_DIRTY;
    c090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    c094:	6323      	str	r3, [r4, #48]	; 0x30
        file->pos = pos;
    c096:	6366      	str	r6, [r4, #52]	; 0x34
    return 0;
    c098:	2300      	movs	r3, #0
    c09a:	e000      	b.n	c09e <lfs_file_flush+0xea>
    c09c:	2300      	movs	r3, #0
}
    c09e:	4618      	mov	r0, r3
    c0a0:	b017      	add	sp, #92	; 0x5c
    c0a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c0a4:	00200001 	.word	0x00200001

0000c0a8 <lfs_file_read>:
        void *buffer, lfs_size_t size) {
    c0a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c0ac:	b087      	sub	sp, #28
    c0ae:	4680      	mov	r8, r0
    c0b0:	460c      	mov	r4, r1
    c0b2:	4617      	mov	r7, r2
    c0b4:	4699      	mov	r9, r3
    if (file->flags & LFS_F_WRITING) {
    c0b6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    c0b8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    c0bc:	d109      	bne.n	c0d2 <lfs_file_read+0x2a>
    if (file->pos >= file->ctz.size) {
    c0be:	6b62      	ldr	r2, [r4, #52]	; 0x34
    c0c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    c0c2:	429a      	cmp	r2, r3
    c0c4:	d276      	bcs.n	c1b4 <lfs_file_read+0x10c>
    size = lfs_min(size, file->ctz.size - file->pos);
    c0c6:	1a9b      	subs	r3, r3, r2
    return (a < b) ? a : b;
    c0c8:	4599      	cmp	r9, r3
    c0ca:	bf28      	it	cs
    c0cc:	4699      	movcs	r9, r3
    nsize = size;
    c0ce:	464e      	mov	r6, r9
    while (nsize > 0) {
    c0d0:	e03d      	b.n	c14e <lfs_file_read+0xa6>
        int err = lfs_file_flush(lfs, file);
    c0d2:	f7ff ff6f 	bl	bfb4 <lfs_file_flush>
        if (err) {
    c0d6:	4602      	mov	r2, r0
    c0d8:	2800      	cmp	r0, #0
    c0da:	d0f0      	beq.n	c0be <lfs_file_read+0x16>
    c0dc:	e06b      	b.n	c1b6 <lfs_file_read+0x10e>
            if (!(file->flags & LFS_F_INLINE)) {
    c0de:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    c0e2:	d041      	beq.n	c168 <lfs_file_read+0xc0>
                file->block = LFS_BLOCK_INLINE;
    c0e4:	f06f 0301 	mvn.w	r3, #1
    c0e8:	63a3      	str	r3, [r4, #56]	; 0x38
                file->off = file->pos;
    c0ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
    c0ec:	63e3      	str	r3, [r4, #60]	; 0x3c
            file->flags |= LFS_F_READING;
    c0ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
    c0f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
    c0f4:	6323      	str	r3, [r4, #48]	; 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
    c0f6:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
    c0fa:	69db      	ldr	r3, [r3, #28]
    c0fc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
    c0fe:	1a9d      	subs	r5, r3, r2
    c100:	42b5      	cmp	r5, r6
    c102:	bf28      	it	cs
    c104:	4635      	movcs	r5, r6
        if (file->flags & LFS_F_INLINE) {
    c106:	6b21      	ldr	r1, [r4, #48]	; 0x30
    c108:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
    c10c:	d041      	beq.n	c192 <lfs_file_read+0xea>
                    LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0),
    c10e:	88a1      	ldrh	r1, [r4, #4]
    c110:	0289      	lsls	r1, r1, #10
            int err = lfs_dir_getread(lfs, &file->m,
    c112:	9505      	str	r5, [sp, #20]
    c114:	9704      	str	r7, [sp, #16]
    c116:	9203      	str	r2, [sp, #12]
    c118:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
    c11c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    c120:	9102      	str	r1, [sp, #8]
    c122:	4a27      	ldr	r2, [pc, #156]	; (c1c0 <lfs_file_read+0x118>)
    c124:	9201      	str	r2, [sp, #4]
    c126:	9300      	str	r3, [sp, #0]
    c128:	f104 0340 	add.w	r3, r4, #64	; 0x40
    c12c:	2200      	movs	r2, #0
    c12e:	f104 0108 	add.w	r1, r4, #8
    c132:	4640      	mov	r0, r8
    c134:	f006 fb85 	bl	12842 <lfs_dir_getread>
            if (err) {
    c138:	4602      	mov	r2, r0
    c13a:	2800      	cmp	r0, #0
    c13c:	d13b      	bne.n	c1b6 <lfs_file_read+0x10e>
        file->pos += diff;
    c13e:	6b63      	ldr	r3, [r4, #52]	; 0x34
    c140:	442b      	add	r3, r5
    c142:	6363      	str	r3, [r4, #52]	; 0x34
        file->off += diff;
    c144:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    c146:	442b      	add	r3, r5
    c148:	63e3      	str	r3, [r4, #60]	; 0x3c
        data += diff;
    c14a:	442f      	add	r7, r5
        nsize -= diff;
    c14c:	1b76      	subs	r6, r6, r5
    while (nsize > 0) {
    c14e:	2e00      	cmp	r6, #0
    c150:	d02e      	beq.n	c1b0 <lfs_file_read+0x108>
        if (!(file->flags & LFS_F_READING) ||
    c152:	6b23      	ldr	r3, [r4, #48]	; 0x30
    c154:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    c158:	d0c1      	beq.n	c0de <lfs_file_read+0x36>
                file->off == lfs->cfg->block_size) {
    c15a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    c15c:	f8d8 2068 	ldr.w	r2, [r8, #104]	; 0x68
    c160:	69d2      	ldr	r2, [r2, #28]
        if (!(file->flags & LFS_F_READING) ||
    c162:	4291      	cmp	r1, r2
    c164:	d1c7      	bne.n	c0f6 <lfs_file_read+0x4e>
    c166:	e7ba      	b.n	c0de <lfs_file_read+0x36>
                int err = lfs_ctz_find(lfs, NULL, &file->cache,
    c168:	f104 033c 	add.w	r3, r4, #60	; 0x3c
    c16c:	9303      	str	r3, [sp, #12]
    c16e:	f104 0338 	add.w	r3, r4, #56	; 0x38
    c172:	9302      	str	r3, [sp, #8]
    c174:	6b63      	ldr	r3, [r4, #52]	; 0x34
    c176:	9301      	str	r3, [sp, #4]
    c178:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    c17a:	9300      	str	r3, [sp, #0]
    c17c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    c17e:	f104 0240 	add.w	r2, r4, #64	; 0x40
    c182:	2100      	movs	r1, #0
    c184:	4640      	mov	r0, r8
    c186:	f006 fecd 	bl	12f24 <lfs_ctz_find>
                if (err) {
    c18a:	4602      	mov	r2, r0
    c18c:	2800      	cmp	r0, #0
    c18e:	d0ae      	beq.n	c0ee <lfs_file_read+0x46>
    c190:	e011      	b.n	c1b6 <lfs_file_read+0x10e>
            int err = lfs_bd_read(lfs,
    c192:	9503      	str	r5, [sp, #12]
    c194:	9702      	str	r7, [sp, #8]
    c196:	9201      	str	r2, [sp, #4]
    c198:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    c19a:	9200      	str	r2, [sp, #0]
    c19c:	f104 0240 	add.w	r2, r4, #64	; 0x40
    c1a0:	2100      	movs	r1, #0
    c1a2:	4640      	mov	r0, r8
    c1a4:	f006 f9ac 	bl	12500 <lfs_bd_read>
            if (err) {
    c1a8:	4602      	mov	r2, r0
    c1aa:	2800      	cmp	r0, #0
    c1ac:	d0c7      	beq.n	c13e <lfs_file_read+0x96>
    c1ae:	e002      	b.n	c1b6 <lfs_file_read+0x10e>
    return size;
    c1b0:	464a      	mov	r2, r9
    c1b2:	e000      	b.n	c1b6 <lfs_file_read+0x10e>
        return 0;
    c1b4:	2200      	movs	r2, #0
}
    c1b6:	4610      	mov	r0, r2
    c1b8:	b007      	add	sp, #28
    c1ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    c1be:	bf00      	nop
    c1c0:	fff7fc00 	.word	0xfff7fc00

0000c1c4 <lfs_fs_size>:
    lfs_size_t *size = p;
    *size += 1;
    return 0;
}

lfs_ssize_t lfs_fs_size(lfs_t *lfs) {
    c1c4:	b500      	push	{lr}
    c1c6:	b083      	sub	sp, #12
    LFS_TRACE("lfs_fs_size(%p)", (void*)lfs);
    lfs_size_t size = 0;
    c1c8:	2300      	movs	r3, #0
    c1ca:	9301      	str	r3, [sp, #4]
    int err = lfs_fs_traverseraw(lfs, lfs_fs_size_count, &size, false);
    c1cc:	aa01      	add	r2, sp, #4
    c1ce:	4904      	ldr	r1, [pc, #16]	; (c1e0 <lfs_fs_size+0x1c>)
    c1d0:	f7ff fd28 	bl	bc24 <lfs_fs_traverseraw>
    if (err) {
    c1d4:	b900      	cbnz	r0, c1d8 <lfs_fs_size+0x14>
        LFS_TRACE("lfs_fs_size -> %d", err);
        return err;
    }

    LFS_TRACE("lfs_fs_size -> %d", err);
    return size;
    c1d6:	9801      	ldr	r0, [sp, #4]
}
    c1d8:	b003      	add	sp, #12
    c1da:	f85d fb04 	ldr.w	pc, [sp], #4
    c1de:	bf00      	nop
    c1e0:	000124f7 	.word	0x000124f7

0000c1e4 <lfs_dir_compact>:
        lfs_mdir_t *source, uint16_t begin, uint16_t end) {
    c1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c1e8:	b09b      	sub	sp, #108	; 0x6c
    c1ea:	4607      	mov	r7, r0
    c1ec:	468b      	mov	fp, r1
    c1ee:	4690      	mov	r8, r2
    c1f0:	4699      	mov	r9, r3
    c1f2:	f8dd a090 	ldr.w	sl, [sp, #144]	; 0x90
    c1f6:	f8bd 5094 	ldrh.w	r5, [sp, #148]	; 0x94
    c1fa:	f8bd 6098 	ldrh.w	r6, [sp, #152]	; 0x98
    const lfs_block_t oldpair[2] = {dir->pair[0], dir->pair[1]};
    c1fe:	680b      	ldr	r3, [r1, #0]
    c200:	9316      	str	r3, [sp, #88]	; 0x58
    c202:	684b      	ldr	r3, [r1, #4]
    c204:	9317      	str	r3, [sp, #92]	; 0x5c
    while (end - begin > 1) {
    c206:	e012      	b.n	c22e <lfs_dir_compact+0x4a>
        uint16_t split = (end - begin) / 2;
    c208:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
    c20c:	f3c4 044f 	ubfx	r4, r4, #1, #16
        err = lfs_dir_split(lfs, dir, attrs, attrcount,
    c210:	442c      	add	r4, r5
    c212:	b2a4      	uxth	r4, r4
    c214:	9602      	str	r6, [sp, #8]
    c216:	9401      	str	r4, [sp, #4]
    c218:	f8cd a000 	str.w	sl, [sp]
    c21c:	464b      	mov	r3, r9
    c21e:	4642      	mov	r2, r8
    c220:	4659      	mov	r1, fp
    c222:	4638      	mov	r0, r7
    c224:	f007 fa02 	bl	1362c <lfs_dir_split>
        if (err) {
    c228:	2800      	cmp	r0, #0
    c22a:	d151      	bne.n	c2d0 <lfs_dir_compact+0xec>
        end = begin + split;
    c22c:	4626      	mov	r6, r4
    while (end - begin > 1) {
    c22e:	1b74      	subs	r4, r6, r5
    c230:	2c01      	cmp	r4, #1
    c232:	dd2f      	ble.n	c294 <lfs_dir_compact+0xb0>
        lfs_size_t size = 0;
    c234:	2200      	movs	r2, #0
    c236:	9210      	str	r2, [sp, #64]	; 0x40
        int err = lfs_dir_traverse(lfs,
    c238:	ab10      	add	r3, sp, #64	; 0x40
    c23a:	9308      	str	r3, [sp, #32]
    c23c:	4bad      	ldr	r3, [pc, #692]	; (c4f4 <lfs_dir_compact+0x310>)
    c23e:	9307      	str	r3, [sp, #28]
    c240:	426b      	negs	r3, r5
    c242:	b21b      	sxth	r3, r3
    c244:	9306      	str	r3, [sp, #24]
    c246:	9605      	str	r6, [sp, #20]
    c248:	9504      	str	r5, [sp, #16]
    c24a:	9203      	str	r2, [sp, #12]
    c24c:	4baa      	ldr	r3, [pc, #680]	; (c4f8 <lfs_dir_compact+0x314>)
    c24e:	9302      	str	r3, [sp, #8]
    c250:	f8cd 9004 	str.w	r9, [sp, #4]
    c254:	f8cd 8000 	str.w	r8, [sp]
    c258:	f04f 33ff 	mov.w	r3, #4294967295
    c25c:	4651      	mov	r1, sl
    c25e:	4638      	mov	r0, r7
    c260:	f7ff f81a 	bl	b298 <lfs_dir_traverse>
        if (err) {
    c264:	2800      	cmp	r0, #0
    c266:	f040 81a7 	bne.w	c5b8 <lfs_dir_compact+0x3d4>
        if (end - begin < 0xff &&
    c26a:	2cfe      	cmp	r4, #254	; 0xfe
    c26c:	dccc      	bgt.n	c208 <lfs_dir_compact+0x24>
                size <= lfs_min(lfs->cfg->block_size - 36,
    c26e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c270:	69da      	ldr	r2, [r3, #28]
    c272:	f1a2 0124 	sub.w	r1, r2, #36	; 0x24
    c276:	6998      	ldr	r0, [r3, #24]
    return lfs_aligndown(a + alignment-1, alignment);
    c278:	eb00 0252 	add.w	r2, r0, r2, lsr #1
    c27c:	1e53      	subs	r3, r2, #1
    return a - (a % alignment);
    c27e:	fbb3 f2f0 	udiv	r2, r3, r0
    c282:	fb00 3212 	mls	r2, r0, r2, r3
    c286:	1a9b      	subs	r3, r3, r2
    return (a < b) ? a : b;
    c288:	428b      	cmp	r3, r1
    c28a:	bf28      	it	cs
    c28c:	460b      	movcs	r3, r1
    c28e:	9a10      	ldr	r2, [sp, #64]	; 0x40
        if (end - begin < 0xff &&
    c290:	429a      	cmp	r2, r3
    c292:	d8b9      	bhi.n	c208 <lfs_dir_compact+0x24>
    dir->rev += 1;
    c294:	f8db 2008 	ldr.w	r2, [fp, #8]
    c298:	3201      	adds	r2, #1
    c29a:	f8cb 2008 	str.w	r2, [fp, #8]
    if (lfs->cfg->block_cycles > 0 &&
    c29e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    c2a2:	2b00      	cmp	r3, #0
    c2a4:	dd43      	ble.n	c32e <lfs_dir_compact+0x14a>
            (dir->rev % ((lfs->cfg->block_cycles+1)|1) == 0)) {
    c2a6:	3301      	adds	r3, #1
    c2a8:	f043 0301 	orr.w	r3, r3, #1
    c2ac:	fbb2 f1f3 	udiv	r1, r2, r3
    c2b0:	fb03 2311 	mls	r3, r3, r1, r2
    if (lfs->cfg->block_cycles > 0 &&
    c2b4:	2b00      	cmp	r3, #0
    c2b6:	d13c      	bne.n	c332 <lfs_dir_compact+0x14e>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    c2b8:	f8db 3000 	ldr.w	r3, [fp]
    c2bc:	b1a3      	cbz	r3, c2e8 <lfs_dir_compact+0x104>
    c2be:	f8db 2004 	ldr.w	r2, [fp, #4]
    c2c2:	2a01      	cmp	r2, #1
    c2c4:	d010      	beq.n	c2e8 <lfs_dir_compact+0x104>
    c2c6:	2b01      	cmp	r3, #1
    c2c8:	d00e      	beq.n	c2e8 <lfs_dir_compact+0x104>
    c2ca:	b16a      	cbz	r2, c2e8 <lfs_dir_compact+0x104>
            tired = true;
    c2cc:	2401      	movs	r4, #1
    c2ce:	e049      	b.n	c364 <lfs_dir_compact+0x180>
    c2d0:	900b      	str	r0, [sp, #44]	; 0x2c
            if (err == LFS_ERR_NOSPC && size <= lfs->cfg->block_size - 36) {
    c2d2:	f110 0f1c 	cmn.w	r0, #28
    c2d6:	f040 8170 	bne.w	c5ba <lfs_dir_compact+0x3d6>
    c2da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c2dc:	69db      	ldr	r3, [r3, #28]
    c2de:	3b24      	subs	r3, #36	; 0x24
    c2e0:	9a10      	ldr	r2, [sp, #64]	; 0x40
    c2e2:	4293      	cmp	r3, r2
    c2e4:	d2d6      	bcs.n	c294 <lfs_dir_compact+0xb0>
    c2e6:	e168      	b.n	c5ba <lfs_dir_compact+0x3d6>
            lfs_ssize_t res = lfs_fs_size(lfs);
    c2e8:	4638      	mov	r0, r7
    c2ea:	f7ff ff6b 	bl	c1c4 <lfs_fs_size>
            if (res < 0) {
    c2ee:	1e02      	subs	r2, r0, #0
    c2f0:	920b      	str	r2, [sp, #44]	; 0x2c
    c2f2:	f2c0 8162 	blt.w	c5ba <lfs_dir_compact+0x3d6>
            if ((lfs_size_t)res < lfs->cfg->block_count/2) {
    c2f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c2f8:	6a1b      	ldr	r3, [r3, #32]
    c2fa:	ebb2 0f53 	cmp.w	r2, r3, lsr #1
    c2fe:	d301      	bcc.n	c304 <lfs_dir_compact+0x120>
    bool relocated = false;
    c300:	2400      	movs	r4, #0
    c302:	e017      	b.n	c334 <lfs_dir_compact+0x150>
                int err = lfs_dir_split(lfs, dir, attrs, attrcount,
    c304:	9602      	str	r6, [sp, #8]
    c306:	9501      	str	r5, [sp, #4]
    c308:	f8cd a000 	str.w	sl, [sp]
    c30c:	464b      	mov	r3, r9
    c30e:	4642      	mov	r2, r8
    c310:	4659      	mov	r1, fp
    c312:	4638      	mov	r0, r7
    c314:	f007 f98a 	bl	1362c <lfs_dir_split>
                if (err && err != LFS_ERR_NOSPC) {
    c318:	900b      	str	r0, [sp, #44]	; 0x2c
    c31a:	b118      	cbz	r0, c324 <lfs_dir_compact+0x140>
    c31c:	f110 0f1c 	cmn.w	r0, #28
    c320:	f040 814b 	bne.w	c5ba <lfs_dir_compact+0x3d6>
                if (!err) {
    c324:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c326:	2b00      	cmp	r3, #0
    c328:	d1ea      	bne.n	c300 <lfs_dir_compact+0x11c>
                    end = begin;
    c32a:	462e      	mov	r6, r5
    c32c:	e7e8      	b.n	c300 <lfs_dir_compact+0x11c>
    bool relocated = false;
    c32e:	2400      	movs	r4, #0
    c330:	e000      	b.n	c334 <lfs_dir_compact+0x150>
    c332:	2400      	movs	r4, #0
                .block = dir->pair[1],
    c334:	f8db 1004 	ldr.w	r1, [fp, #4]
            struct lfs_commit commit = {
    c338:	9110      	str	r1, [sp, #64]	; 0x40
    c33a:	2300      	movs	r3, #0
    c33c:	9311      	str	r3, [sp, #68]	; 0x44
    c33e:	f04f 32ff 	mov.w	r2, #4294967295
    c342:	9212      	str	r2, [sp, #72]	; 0x48
    c344:	9213      	str	r2, [sp, #76]	; 0x4c
    c346:	9314      	str	r3, [sp, #80]	; 0x50
                .end = lfs->cfg->block_size - 8,
    c348:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    c34a:	69db      	ldr	r3, [r3, #28]
    c34c:	3b08      	subs	r3, #8
            struct lfs_commit commit = {
    c34e:	9315      	str	r3, [sp, #84]	; 0x54
            int err = lfs_bd_erase(lfs, dir->pair[1]);
    c350:	4638      	mov	r0, r7
    c352:	f006 f883 	bl	1245c <lfs_bd_erase>
            if (err) {
    c356:	900b      	str	r0, [sp, #44]	; 0x2c
    c358:	b340      	cbz	r0, c3ac <lfs_dir_compact+0x1c8>
                if (err == LFS_ERR_CORRUPT) {
    c35a:	f110 0f54 	cmn.w	r0, #84	; 0x54
    c35e:	f040 812c 	bne.w	c5ba <lfs_dir_compact+0x3d6>
                    goto relocate;
    c362:	2400      	movs	r4, #0
    rcache->block = LFS_BLOCK_NULL;
    c364:	f04f 33ff 	mov.w	r3, #4294967295
    c368:	613b      	str	r3, [r7, #16]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    c36a:	f8db 3000 	ldr.w	r3, [fp]
    c36e:	2b00      	cmp	r3, #0
    c370:	f000 8107 	beq.w	c582 <lfs_dir_compact+0x39e>
    c374:	f8db 2004 	ldr.w	r2, [fp, #4]
    c378:	2a01      	cmp	r2, #1
    c37a:	f000 8102 	beq.w	c582 <lfs_dir_compact+0x39e>
    c37e:	2b01      	cmp	r3, #1
    c380:	f000 80ff 	beq.w	c582 <lfs_dir_compact+0x39e>
    c384:	2a00      	cmp	r2, #0
    c386:	f000 80fc 	beq.w	c582 <lfs_dir_compact+0x39e>
        int err = lfs_alloc(lfs, &dir->pair[1]);
    c38a:	f10b 0104 	add.w	r1, fp, #4
    c38e:	4638      	mov	r0, r7
    c390:	f7ff fd08 	bl	bda4 <lfs_alloc>
        if (err && (err != LFS_ERR_NOSPC || !tired)) {
    c394:	900b      	str	r0, [sp, #44]	; 0x2c
    c396:	b138      	cbz	r0, c3a8 <lfs_dir_compact+0x1c4>
    c398:	f110 0f1c 	cmn.w	r0, #28
    c39c:	f040 810d 	bne.w	c5ba <lfs_dir_compact+0x3d6>
    c3a0:	2c00      	cmp	r4, #0
    c3a2:	f000 810a 	beq.w	c5ba <lfs_dir_compact+0x3d6>
    c3a6:	e7c5      	b.n	c334 <lfs_dir_compact+0x150>
        relocated = true;
    c3a8:	2401      	movs	r4, #1
    c3aa:	e7c3      	b.n	c334 <lfs_dir_compact+0x150>
            err = lfs_dir_commitprog(lfs, &commit,
    c3ac:	2304      	movs	r3, #4
    c3ae:	f10b 0208 	add.w	r2, fp, #8
    c3b2:	a910      	add	r1, sp, #64	; 0x40
    c3b4:	4638      	mov	r0, r7
    c3b6:	f006 fb69 	bl	12a8c <lfs_dir_commitprog>
            if (err) {
    c3ba:	900b      	str	r0, [sp, #44]	; 0x2c
    c3bc:	b120      	cbz	r0, c3c8 <lfs_dir_compact+0x1e4>
                if (err == LFS_ERR_CORRUPT) {
    c3be:	f110 0f54 	cmn.w	r0, #84	; 0x54
    c3c2:	f040 80fa 	bne.w	c5ba <lfs_dir_compact+0x3d6>
    c3c6:	e7cc      	b.n	c362 <lfs_dir_compact+0x17e>
                    lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
    c3c8:	9718      	str	r7, [sp, #96]	; 0x60
    c3ca:	ab10      	add	r3, sp, #64	; 0x40
    c3cc:	9319      	str	r3, [sp, #100]	; 0x64
            err = lfs_dir_traverse(lfs,
    c3ce:	ab18      	add	r3, sp, #96	; 0x60
    c3d0:	9308      	str	r3, [sp, #32]
    c3d2:	4b4a      	ldr	r3, [pc, #296]	; (c4fc <lfs_dir_compact+0x318>)
    c3d4:	9307      	str	r3, [sp, #28]
    c3d6:	426b      	negs	r3, r5
    c3d8:	b21b      	sxth	r3, r3
    c3da:	9306      	str	r3, [sp, #24]
    c3dc:	9605      	str	r6, [sp, #20]
    c3de:	9504      	str	r5, [sp, #16]
    c3e0:	2200      	movs	r2, #0
    c3e2:	9203      	str	r2, [sp, #12]
    c3e4:	4b44      	ldr	r3, [pc, #272]	; (c4f8 <lfs_dir_compact+0x314>)
    c3e6:	9302      	str	r3, [sp, #8]
    c3e8:	f8cd 9004 	str.w	r9, [sp, #4]
    c3ec:	f8cd 8000 	str.w	r8, [sp]
    c3f0:	f04f 33ff 	mov.w	r3, #4294967295
    c3f4:	4651      	mov	r1, sl
    c3f6:	4638      	mov	r0, r7
    c3f8:	f7fe ff4e 	bl	b298 <lfs_dir_traverse>
            if (err) {
    c3fc:	900b      	str	r0, [sp, #44]	; 0x2c
    c3fe:	b120      	cbz	r0, c40a <lfs_dir_compact+0x226>
                if (err == LFS_ERR_CORRUPT) {
    c400:	f110 0f54 	cmn.w	r0, #84	; 0x54
    c404:	f040 80d9 	bne.w	c5ba <lfs_dir_compact+0x3d6>
    c408:	e7ab      	b.n	c362 <lfs_dir_compact+0x17e>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    c40a:	f8db 3018 	ldr.w	r3, [fp, #24]
    c40e:	f1b3 3fff 	cmp.w	r3, #4294967295
    c412:	d01e      	beq.n	c452 <lfs_dir_compact+0x26e>
    c414:	f8db 301c 	ldr.w	r3, [fp, #28]
    c418:	f1b3 3fff 	cmp.w	r3, #4294967295
    c41c:	d017      	beq.n	c44e <lfs_dir_compact+0x26a>
    c41e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
            if (!lfs_pair_isnull(dir->tail)) {
    c420:	f013 0f01 	tst.w	r3, #1
    c424:	d017      	beq.n	c456 <lfs_dir_compact+0x272>
            lfs_gstate_t delta = {0};
    c426:	2300      	movs	r3, #0
    c428:	930d      	str	r3, [sp, #52]	; 0x34
    c42a:	930e      	str	r3, [sp, #56]	; 0x38
    c42c:	930f      	str	r3, [sp, #60]	; 0x3c
            if (!relocated) {
    c42e:	bbb4      	cbnz	r4, c49e <lfs_dir_compact+0x2ba>
                lfs_gstate_xor(&delta, &lfs->gdisk);
    c430:	f107 0c3c 	add.w	ip, r7, #60	; 0x3c
    for (int i = 0; i < 3; i++) {
    c434:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c436:	2b02      	cmp	r3, #2
    c438:	dc22      	bgt.n	c480 <lfs_dir_compact+0x29c>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
    c43a:	a90d      	add	r1, sp, #52	; 0x34
    c43c:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
    c440:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    c444:	4042      	eors	r2, r0
    c446:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
    c44a:	3301      	adds	r3, #1
    c44c:	e7f3      	b.n	c436 <lfs_dir_compact+0x252>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    c44e:	2301      	movs	r3, #1
    c450:	e7e6      	b.n	c420 <lfs_dir_compact+0x23c>
    c452:	2301      	movs	r3, #1
    c454:	e7e4      	b.n	c420 <lfs_dir_compact+0x23c>
                        LFS_MKTAG(LFS_TYPE_TAIL + dir->split, 0x3ff, 8),
    c456:	f89b 2017 	ldrb.w	r2, [fp, #23]
    c45a:	f502 62c0 	add.w	r2, r2, #1536	; 0x600
                err = lfs_dir_commitattr(lfs, &commit,
    c45e:	f10b 0318 	add.w	r3, fp, #24
    c462:	4927      	ldr	r1, [pc, #156]	; (c500 <lfs_dir_compact+0x31c>)
    c464:	ea41 5202 	orr.w	r2, r1, r2, lsl #20
    c468:	a910      	add	r1, sp, #64	; 0x40
    c46a:	4638      	mov	r0, r7
    c46c:	f006 fb2e 	bl	12acc <lfs_dir_commitattr>
                if (err) {
    c470:	2800      	cmp	r0, #0
    c472:	d0d8      	beq.n	c426 <lfs_dir_compact+0x242>
                    if (err == LFS_ERR_CORRUPT) {
    c474:	f110 0f54 	cmn.w	r0, #84	; 0x54
    c478:	f43f af73 	beq.w	c362 <lfs_dir_compact+0x17e>
                    return err;
    c47c:	900b      	str	r0, [sp, #44]	; 0x2c
    c47e:	e09c      	b.n	c5ba <lfs_dir_compact+0x3d6>
                lfs_gstate_xor(&delta, &lfs->gstate);
    c480:	f107 0c30 	add.w	ip, r7, #48	; 0x30
    for (int i = 0; i < 3; i++) {
    c484:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c486:	2b02      	cmp	r3, #2
    c488:	dc09      	bgt.n	c49e <lfs_dir_compact+0x2ba>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
    c48a:	a90d      	add	r1, sp, #52	; 0x34
    c48c:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
    c490:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    c494:	4042      	eors	r2, r0
    c496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
    c49a:	3301      	adds	r3, #1
    c49c:	e7f3      	b.n	c486 <lfs_dir_compact+0x2a2>
            lfs_gstate_xor(&delta, &lfs->gdelta);
    c49e:	f107 0048 	add.w	r0, r7, #72	; 0x48
    for (int i = 0; i < 3; i++) {
    c4a2:	46a4      	mov	ip, r4
    c4a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c4a6:	e008      	b.n	c4ba <lfs_dir_compact+0x2d6>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
    c4a8:	a90d      	add	r1, sp, #52	; 0x34
    c4aa:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    c4ae:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
    c4b2:	4062      	eors	r2, r4
    c4b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
    c4b8:	3301      	adds	r3, #1
    c4ba:	2b02      	cmp	r3, #2
    c4bc:	ddf4      	ble.n	c4a8 <lfs_dir_compact+0x2c4>
    c4be:	4664      	mov	r4, ip
            delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
    c4c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c4c2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
    c4c6:	f023 0303 	bic.w	r3, r3, #3
    c4ca:	930d      	str	r3, [sp, #52]	; 0x34
            err = lfs_dir_getgstate(lfs, dir, &delta);
    c4cc:	aa0d      	add	r2, sp, #52	; 0x34
    c4ce:	4659      	mov	r1, fp
    c4d0:	4638      	mov	r0, r7
    c4d2:	f7ff f891 	bl	b5f8 <lfs_dir_getgstate>
            if (err) {
    c4d6:	900b      	str	r0, [sp, #44]	; 0x2c
    c4d8:	2800      	cmp	r0, #0
    c4da:	d16e      	bne.n	c5ba <lfs_dir_compact+0x3d6>
    c4dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    for (int i = 0; i < 3; i++) {
    c4de:	2b02      	cmp	r3, #2
    c4e0:	dc10      	bgt.n	c504 <lfs_dir_compact+0x320>
        if (((uint32_t*)a)[i] != 0) {
    c4e2:	aa1a      	add	r2, sp, #104	; 0x68
    c4e4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
    c4e8:	f852 2c34 	ldr.w	r2, [r2, #-52]
    c4ec:	b9c2      	cbnz	r2, c520 <lfs_dir_compact+0x33c>
    for (int i = 0; i < 3; i++) {
    c4ee:	3301      	adds	r3, #1
    c4f0:	e7f5      	b.n	c4de <lfs_dir_compact+0x2fa>
    c4f2:	bf00      	nop
    c4f4:	000124c1 	.word	0x000124c1
    c4f8:	400ffc00 	.word	0x400ffc00
    c4fc:	00012b89 	.word	0x00012b89
    c500:	000ffc08 	.word	0x000ffc08
    return true;
    c504:	2301      	movs	r3, #1
            if (!lfs_gstate_iszero(&delta)) {
    c506:	b96b      	cbnz	r3, c524 <lfs_dir_compact+0x340>
                err = lfs_dir_commitattr(lfs, &commit,
    c508:	ab0d      	add	r3, sp, #52	; 0x34
    c50a:	4a2e      	ldr	r2, [pc, #184]	; (c5c4 <lfs_dir_compact+0x3e0>)
    c50c:	a910      	add	r1, sp, #64	; 0x40
    c50e:	4638      	mov	r0, r7
    c510:	f006 fadc 	bl	12acc <lfs_dir_commitattr>
                if (err) {
    c514:	900b      	str	r0, [sp, #44]	; 0x2c
    c516:	b128      	cbz	r0, c524 <lfs_dir_compact+0x340>
                    if (err == LFS_ERR_CORRUPT) {
    c518:	f110 0f54 	cmn.w	r0, #84	; 0x54
    c51c:	d14d      	bne.n	c5ba <lfs_dir_compact+0x3d6>
    c51e:	e720      	b.n	c362 <lfs_dir_compact+0x17e>
            return false;
    c520:	2300      	movs	r3, #0
    c522:	e7f0      	b.n	c506 <lfs_dir_compact+0x322>
            err = lfs_dir_commitcrc(lfs, &commit);
    c524:	a910      	add	r1, sp, #64	; 0x40
    c526:	4638      	mov	r0, r7
    c528:	f006 fb42 	bl	12bb0 <lfs_dir_commitcrc>
            if (err) {
    c52c:	900b      	str	r0, [sp, #44]	; 0x2c
    c52e:	b118      	cbz	r0, c538 <lfs_dir_compact+0x354>
                if (err == LFS_ERR_CORRUPT) {
    c530:	f110 0f54 	cmn.w	r0, #84	; 0x54
    c534:	d141      	bne.n	c5ba <lfs_dir_compact+0x3d6>
    c536:	e714      	b.n	c362 <lfs_dir_compact+0x17e>
    lfs_block_t t = pair[0];
    c538:	f8db 3000 	ldr.w	r3, [fp]
    pair[0] = pair[1];
    c53c:	f8db 2004 	ldr.w	r2, [fp, #4]
    c540:	f8cb 2000 	str.w	r2, [fp]
    pair[1] = t;
    c544:	f8cb 3004 	str.w	r3, [fp, #4]
            dir->count = end - begin;
    c548:	1b75      	subs	r5, r6, r5
    c54a:	f8ab 5014 	strh.w	r5, [fp, #20]
            dir->off = commit.off;
    c54e:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c550:	f8cb 300c 	str.w	r3, [fp, #12]
            dir->etag = commit.ptag;
    c554:	9b12      	ldr	r3, [sp, #72]	; 0x48
    c556:	f8cb 3010 	str.w	r3, [fp, #16]
            lfs->gdelta = (lfs_gstate_t){0};
    c55a:	2200      	movs	r2, #0
    c55c:	64ba      	str	r2, [r7, #72]	; 0x48
    c55e:	64fa      	str	r2, [r7, #76]	; 0x4c
    c560:	653a      	str	r2, [r7, #80]	; 0x50
            if (!relocated) {
    c562:	b934      	cbnz	r4, c572 <lfs_dir_compact+0x38e>
                lfs->gdisk = lfs->gstate;
    c564:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    c568:	f107 0230 	add.w	r2, r7, #48	; 0x30
    c56c:	ca07      	ldmia	r2, {r0, r1, r2}
    c56e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (relocated) {
    c572:	b314      	cbz	r4, c5ba <lfs_dir_compact+0x3d6>
        int err = lfs_fs_relocate(lfs, oldpair, dir->pair);
    c574:	465a      	mov	r2, fp
    c576:	a916      	add	r1, sp, #88	; 0x58
    c578:	4638      	mov	r0, r7
    c57a:	f000 fba1 	bl	ccc0 <lfs_fs_relocate>
    c57e:	900b      	str	r0, [sp, #44]	; 0x2c
        if (err) {
    c580:	e01b      	b.n	c5ba <lfs_dir_compact+0x3d6>
    c582:	4b11      	ldr	r3, [pc, #68]	; (c5c8 <lfs_dir_compact+0x3e4>)
    c584:	4a11      	ldr	r2, [pc, #68]	; (c5cc <lfs_dir_compact+0x3e8>)
    c586:	1a9b      	subs	r3, r3, r2
    c588:	08db      	lsrs	r3, r3, #3
            LFS_WARN("Superblock 0x%"PRIx32" has become unwritable",
    c58a:	f04f 0200 	mov.w	r2, #0
    c58e:	2102      	movs	r1, #2
    c590:	f361 0202 	bfi	r2, r1, #0, #3
    c594:	f36f 02c5 	bfc	r2, #3, #3
    c598:	f363 128f 	bfi	r2, r3, #6, #10
    c59c:	f8ad 2000 	strh.w	r2, [sp]
    c5a0:	f8db 3004 	ldr.w	r3, [fp, #4]
    c5a4:	f240 629a 	movw	r2, #1690	; 0x69a
    c5a8:	4909      	ldr	r1, [pc, #36]	; (c5d0 <lfs_dir_compact+0x3ec>)
    c5aa:	480a      	ldr	r0, [pc, #40]	; (c5d4 <lfs_dir_compact+0x3f0>)
    c5ac:	f7f5 fa0a 	bl	19c4 <log_3>
            return LFS_ERR_NOSPC;
    c5b0:	f06f 031b 	mvn.w	r3, #27
    c5b4:	930b      	str	r3, [sp, #44]	; 0x2c
    c5b6:	e000      	b.n	c5ba <lfs_dir_compact+0x3d6>
    c5b8:	900b      	str	r0, [sp, #44]	; 0x2c
}
    c5ba:	980b      	ldr	r0, [sp, #44]	; 0x2c
    c5bc:	b01b      	add	sp, #108	; 0x6c
    c5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c5c2:	bf00      	nop
    c5c4:	7ffffc0c 	.word	0x7ffffc0c
    c5c8:	00014330 	.word	0x00014330
    c5cc:	00014318 	.word	0x00014318
    c5d0:	000158a0 	.word	0x000158a0
    c5d4:	000159b4 	.word	0x000159b4

0000c5d8 <lfs_dir_commit>:
        const struct lfs_mattr *attrs, int attrcount) {
    c5d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c5dc:	b0a1      	sub	sp, #132	; 0x84
    c5de:	4680      	mov	r8, r0
    c5e0:	460d      	mov	r5, r1
    c5e2:	4617      	mov	r7, r2
    c5e4:	4699      	mov	r9, r3
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
    c5e6:	6a84      	ldr	r4, [r0, #40]	; 0x28
    c5e8:	e003      	b.n	c5f2 <lfs_dir_commit+0x1a>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
    c5ea:	79a3      	ldrb	r3, [r4, #6]
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
    c5ec:	2b01      	cmp	r3, #1
    c5ee:	d012      	beq.n	c616 <lfs_dir_commit+0x3e>
    for (lfs_file_t *f = (lfs_file_t*)lfs->mlist; f; f = f->next) {
    c5f0:	6824      	ldr	r4, [r4, #0]
    c5f2:	b354      	cbz	r4, c64a <lfs_dir_commit+0x72>
        if (dir != &f->m && lfs_pair_cmp(f->m.pair, dir->pair) == 0 &&
    c5f4:	f104 0308 	add.w	r3, r4, #8
    c5f8:	42ab      	cmp	r3, r5
    c5fa:	d0f9      	beq.n	c5f0 <lfs_dir_commit+0x18>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    c5fc:	68a3      	ldr	r3, [r4, #8]
    c5fe:	682a      	ldr	r2, [r5, #0]
    c600:	4293      	cmp	r3, r2
    c602:	d0f2      	beq.n	c5ea <lfs_dir_commit+0x12>
    c604:	68e0      	ldr	r0, [r4, #12]
    c606:	6869      	ldr	r1, [r5, #4]
    c608:	4281      	cmp	r1, r0
    c60a:	d0ee      	beq.n	c5ea <lfs_dir_commit+0x12>
    c60c:	428b      	cmp	r3, r1
    c60e:	d0ec      	beq.n	c5ea <lfs_dir_commit+0x12>
    c610:	4290      	cmp	r0, r2
    c612:	d1ed      	bne.n	c5f0 <lfs_dir_commit+0x18>
    c614:	e7e9      	b.n	c5ea <lfs_dir_commit+0x12>
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
    c616:	6b23      	ldr	r3, [r4, #48]	; 0x30
    c618:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
    c61c:	d0e8      	beq.n	c5f0 <lfs_dir_commit+0x18>
                f->ctz.size > lfs->cfg->cache_size) {
    c61e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    c620:	f8d8 3068 	ldr.w	r3, [r8, #104]	; 0x68
    c624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                f->type == LFS_TYPE_REG && (f->flags & LFS_F_INLINE) &&
    c626:	429a      	cmp	r2, r3
    c628:	d9e2      	bls.n	c5f0 <lfs_dir_commit+0x18>
            int err = lfs_file_outline(lfs, f);
    c62a:	4621      	mov	r1, r4
    c62c:	4640      	mov	r0, r8
    c62e:	f006 fd31 	bl	13094 <lfs_file_outline>
            if (err) {
    c632:	4606      	mov	r6, r0
    c634:	2800      	cmp	r0, #0
    c636:	f040 81e6 	bne.w	ca06 <lfs_dir_commit+0x42e>
            err = lfs_file_flush(lfs, f);
    c63a:	4621      	mov	r1, r4
    c63c:	4640      	mov	r0, r8
    c63e:	f7ff fcb9 	bl	bfb4 <lfs_file_flush>
            if (err) {
    c642:	4606      	mov	r6, r0
    c644:	2800      	cmp	r0, #0
    c646:	d0d3      	beq.n	c5f0 <lfs_dir_commit+0x18>
    c648:	e1dd      	b.n	ca06 <lfs_dir_commit+0x42e>
    lfs_mdir_t olddir = *dir;
    c64a:	ac16      	add	r4, sp, #88	; 0x58
    c64c:	462e      	mov	r6, r5
    c64e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    c650:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c652:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    c656:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    for (int i = 0; i < attrcount; i++) {
    c65a:	2300      	movs	r3, #0
    bool hasdelete = false;
    c65c:	461e      	mov	r6, r3
    for (int i = 0; i < attrcount; i++) {
    c65e:	e003      	b.n	c668 <lfs_dir_commit+0x90>
            dir->count += 1;
    c660:	8aaa      	ldrh	r2, [r5, #20]
    c662:	3201      	adds	r2, #1
    c664:	82aa      	strh	r2, [r5, #20]
    for (int i = 0; i < attrcount; i++) {
    c666:	3301      	adds	r3, #1
    c668:	454b      	cmp	r3, r9
    c66a:	da26      	bge.n	c6ba <lfs_dir_commit+0xe2>
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
    c66c:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
    c670:	eb07 04c3 	add.w	r4, r7, r3, lsl #3
    c674:	f857 2033 	ldr.w	r2, [r7, r3, lsl #3]
    return (tag & 0x7ff00000) >> 20;
    c678:	0d11      	lsrs	r1, r2, #20
    c67a:	f3c2 520a 	ubfx	r2, r2, #20, #11
        if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE) {
    c67e:	f240 4001 	movw	r0, #1025	; 0x401
    c682:	4282      	cmp	r2, r0
    c684:	d0ec      	beq.n	c660 <lfs_dir_commit+0x88>
        } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE) {
    c686:	f240 40ff 	movw	r0, #1279	; 0x4ff
    c68a:	4282      	cmp	r2, r0
    c68c:	d010      	beq.n	c6b0 <lfs_dir_commit+0xd8>
    return (tag & 0x70000000) >> 20;
    c68e:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
        } else if (lfs_tag_type1(attrs[i].tag) == LFS_TYPE_TAIL) {
    c692:	f5b1 6fc0 	cmp.w	r1, #1536	; 0x600
    c696:	d1e6      	bne.n	c666 <lfs_dir_commit+0x8e>
            dir->tail[0] = ((lfs_block_t*)attrs[i].buffer)[0];
    c698:	6862      	ldr	r2, [r4, #4]
    c69a:	6812      	ldr	r2, [r2, #0]
    c69c:	61aa      	str	r2, [r5, #24]
            dir->tail[1] = ((lfs_block_t*)attrs[i].buffer)[1];
    c69e:	6862      	ldr	r2, [r4, #4]
    c6a0:	6852      	ldr	r2, [r2, #4]
    c6a2:	61ea      	str	r2, [r5, #28]
            dir->split = (lfs_tag_chunk(attrs[i].tag) & 1);
    c6a4:	f857 200c 	ldr.w	r2, [r7, ip]
    c6a8:	f3c2 5200 	ubfx	r2, r2, #20, #1
    c6ac:	75ea      	strb	r2, [r5, #23]
            lfs_pair_fromle32(dir->tail);
    c6ae:	e7da      	b.n	c666 <lfs_dir_commit+0x8e>
            dir->count -= 1;
    c6b0:	8aaa      	ldrh	r2, [r5, #20]
    c6b2:	3a01      	subs	r2, #1
    c6b4:	82aa      	strh	r2, [r5, #20]
            hasdelete = true;
    c6b6:	2601      	movs	r6, #1
    c6b8:	e7d5      	b.n	c666 <lfs_dir_commit+0x8e>
    if (hasdelete && dir->count == 0) {
    c6ba:	b116      	cbz	r6, c6c2 <lfs_dir_commit+0xea>
    c6bc:	8aab      	ldrh	r3, [r5, #20]
    c6be:	2b00      	cmp	r3, #0
    c6c0:	d03c      	beq.n	c73c <lfs_dir_commit+0x164>
    if (dir->erased || dir->count >= 0xff) {
    c6c2:	7dab      	ldrb	r3, [r5, #22]
    c6c4:	b91b      	cbnz	r3, c6ce <lfs_dir_commit+0xf6>
    c6c6:	8aab      	ldrh	r3, [r5, #20]
    c6c8:	2bfe      	cmp	r3, #254	; 0xfe
    c6ca:	f240 80f1 	bls.w	c8b0 <lfs_dir_commit+0x2d8>
            .block = dir->pair[0],
    c6ce:	682b      	ldr	r3, [r5, #0]
        struct lfs_commit commit = {
    c6d0:	930e      	str	r3, [sp, #56]	; 0x38
            .off = dir->off,
    c6d2:	68ea      	ldr	r2, [r5, #12]
        struct lfs_commit commit = {
    c6d4:	920f      	str	r2, [sp, #60]	; 0x3c
            .ptag = dir->etag,
    c6d6:	692b      	ldr	r3, [r5, #16]
        struct lfs_commit commit = {
    c6d8:	9310      	str	r3, [sp, #64]	; 0x40
    c6da:	f04f 31ff 	mov.w	r1, #4294967295
    c6de:	9111      	str	r1, [sp, #68]	; 0x44
    c6e0:	9212      	str	r2, [sp, #72]	; 0x48
            .end = lfs->cfg->block_size - 8,
    c6e2:	f8d8 1068 	ldr.w	r1, [r8, #104]	; 0x68
    c6e6:	69c9      	ldr	r1, [r1, #28]
    c6e8:	3908      	subs	r1, #8
        struct lfs_commit commit = {
    c6ea:	9113      	str	r1, [sp, #76]	; 0x4c
                lfs_dir_commit_commit, &(struct lfs_dir_commit_commit){
    c6ec:	f8cd 8078 	str.w	r8, [sp, #120]	; 0x78
    c6f0:	a90e      	add	r1, sp, #56	; 0x38
    c6f2:	911f      	str	r1, [sp, #124]	; 0x7c
        int err = lfs_dir_traverse(lfs,
    c6f4:	a91e      	add	r1, sp, #120	; 0x78
    c6f6:	9108      	str	r1, [sp, #32]
    c6f8:	49b0      	ldr	r1, [pc, #704]	; (c9bc <lfs_dir_commit+0x3e4>)
    c6fa:	9107      	str	r1, [sp, #28]
    c6fc:	2100      	movs	r1, #0
    c6fe:	9106      	str	r1, [sp, #24]
    c700:	9105      	str	r1, [sp, #20]
    c702:	9104      	str	r1, [sp, #16]
    c704:	9103      	str	r1, [sp, #12]
    c706:	9102      	str	r1, [sp, #8]
    c708:	f8cd 9004 	str.w	r9, [sp, #4]
    c70c:	9700      	str	r7, [sp, #0]
    c70e:	4629      	mov	r1, r5
    c710:	4640      	mov	r0, r8
    c712:	f7fe fdc1 	bl	b298 <lfs_dir_traverse>
        if (err) {
    c716:	4606      	mov	r6, r0
    c718:	2800      	cmp	r0, #0
    c71a:	d038      	beq.n	c78e <lfs_dir_commit+0x1b6>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
    c71c:	f110 0f1c 	cmn.w	r0, #28
    c720:	f000 80c6 	beq.w	c8b0 <lfs_dir_commit+0x2d8>
    c724:	f110 0f54 	cmn.w	r0, #84	; 0x54
    c728:	f000 80c2 	beq.w	c8b0 <lfs_dir_commit+0x2d8>
            *dir = olddir;
    c72c:	ac16      	add	r4, sp, #88	; 0x58
    c72e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    c730:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    c732:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    c736:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
    c73a:	e164      	b.n	ca06 <lfs_dir_commit+0x42e>
        int err = lfs_fs_pred(lfs, dir->pair, &pdir);
    c73c:	aa0e      	add	r2, sp, #56	; 0x38
    c73e:	4629      	mov	r1, r5
    c740:	4640      	mov	r0, r8
    c742:	f006 f833 	bl	127ac <lfs_fs_pred>
        if (err && err != LFS_ERR_NOENT) {
    c746:	4606      	mov	r6, r0
    c748:	b150      	cbz	r0, c760 <lfs_dir_commit+0x188>
    c74a:	f110 0f02 	cmn.w	r0, #2
    c74e:	d007      	beq.n	c760 <lfs_dir_commit+0x188>
            *dir = olddir;
    c750:	ac16      	add	r4, sp, #88	; 0x58
    c752:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    c754:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    c756:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    c75a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
    c75e:	e152      	b.n	ca06 <lfs_dir_commit+0x42e>
        if (err != LFS_ERR_NOENT && pdir.split) {
    c760:	f116 0f02 	cmn.w	r6, #2
    c764:	d0ad      	beq.n	c6c2 <lfs_dir_commit+0xea>
    c766:	f89d 304f 	ldrb.w	r3, [sp, #79]	; 0x4f
    c76a:	2b00      	cmp	r3, #0
    c76c:	d0a9      	beq.n	c6c2 <lfs_dir_commit+0xea>
            err = lfs_dir_drop(lfs, &pdir, dir);
    c76e:	462a      	mov	r2, r5
    c770:	a90e      	add	r1, sp, #56	; 0x38
    c772:	4640      	mov	r0, r8
    c774:	f000 f94e 	bl	ca14 <lfs_dir_drop>
            if (err) {
    c778:	4606      	mov	r6, r0
    c77a:	2800      	cmp	r0, #0
    c77c:	d0a1      	beq.n	c6c2 <lfs_dir_commit+0xea>
                *dir = olddir;
    c77e:	ac16      	add	r4, sp, #88	; 0x58
    c780:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    c782:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    c784:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    c788:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                return err;
    c78c:	e13b      	b.n	ca06 <lfs_dir_commit+0x42e>
        lfs_gstate_t delta = {0};
    c78e:	2300      	movs	r3, #0
    c790:	930b      	str	r3, [sp, #44]	; 0x2c
    c792:	930c      	str	r3, [sp, #48]	; 0x30
    c794:	930d      	str	r3, [sp, #52]	; 0x34
        lfs_gstate_xor(&delta, &lfs->gstate);
    c796:	f108 0430 	add.w	r4, r8, #48	; 0x30
    for (int i = 0; i < 3; i++) {
    c79a:	4603      	mov	r3, r0
    c79c:	e008      	b.n	c7b0 <lfs_dir_commit+0x1d8>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
    c79e:	a90b      	add	r1, sp, #44	; 0x2c
    c7a0:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
    c7a4:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    c7a8:	4042      	eors	r2, r0
    c7aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
    c7ae:	3301      	adds	r3, #1
    c7b0:	2b02      	cmp	r3, #2
    c7b2:	ddf4      	ble.n	c79e <lfs_dir_commit+0x1c6>
        lfs_gstate_xor(&delta, &lfs->gdisk);
    c7b4:	f108 043c 	add.w	r4, r8, #60	; 0x3c
    for (int i = 0; i < 3; i++) {
    c7b8:	4633      	mov	r3, r6
    c7ba:	e008      	b.n	c7ce <lfs_dir_commit+0x1f6>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
    c7bc:	a90b      	add	r1, sp, #44	; 0x2c
    c7be:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
    c7c2:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    c7c6:	4042      	eors	r2, r0
    c7c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
    c7cc:	3301      	adds	r3, #1
    c7ce:	2b02      	cmp	r3, #2
    c7d0:	ddf4      	ble.n	c7bc <lfs_dir_commit+0x1e4>
        lfs_gstate_xor(&delta, &lfs->gdelta);
    c7d2:	f108 0448 	add.w	r4, r8, #72	; 0x48
    for (int i = 0; i < 3; i++) {
    c7d6:	4633      	mov	r3, r6
    c7d8:	e008      	b.n	c7ec <lfs_dir_commit+0x214>
        ((uint32_t*)a)[i] ^= ((const uint32_t*)b)[i];
    c7da:	a90b      	add	r1, sp, #44	; 0x2c
    c7dc:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
    c7e0:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
    c7e4:	4042      	eors	r2, r0
    c7e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    for (int i = 0; i < 3; i++) {
    c7ea:	3301      	adds	r3, #1
    c7ec:	2b02      	cmp	r3, #2
    c7ee:	ddf4      	ble.n	c7da <lfs_dir_commit+0x202>
        delta.tag &= ~LFS_MKTAG(0, 0, 0x3ff);
    c7f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    c7f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
    c7f6:	f023 0303 	bic.w	r3, r3, #3
    c7fa:	930b      	str	r3, [sp, #44]	; 0x2c
    for (int i = 0; i < 3; i++) {
    c7fc:	2e02      	cmp	r6, #2
    c7fe:	dc07      	bgt.n	c810 <lfs_dir_commit+0x238>
        if (((uint32_t*)a)[i] != 0) {
    c800:	ab20      	add	r3, sp, #128	; 0x80
    c802:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    c806:	f853 3c54 	ldr.w	r3, [r3, #-84]
    c80a:	b993      	cbnz	r3, c832 <lfs_dir_commit+0x25a>
    for (int i = 0; i < 3; i++) {
    c80c:	3601      	adds	r6, #1
    c80e:	e7f5      	b.n	c7fc <lfs_dir_commit+0x224>
    return true;
    c810:	2301      	movs	r3, #1
        if (!lfs_gstate_iszero(&delta)) {
    c812:	bb33      	cbnz	r3, c862 <lfs_dir_commit+0x28a>
            err = lfs_dir_getgstate(lfs, dir, &delta);
    c814:	aa0b      	add	r2, sp, #44	; 0x2c
    c816:	4629      	mov	r1, r5
    c818:	4640      	mov	r0, r8
    c81a:	f7fe feed 	bl	b5f8 <lfs_dir_getgstate>
            if (err) {
    c81e:	4606      	mov	r6, r0
    c820:	b148      	cbz	r0, c836 <lfs_dir_commit+0x25e>
                *dir = olddir;
    c822:	ac16      	add	r4, sp, #88	; 0x58
    c824:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    c826:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    c828:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    c82c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                return err;
    c830:	e0e9      	b.n	ca06 <lfs_dir_commit+0x42e>
            return false;
    c832:	2300      	movs	r3, #0
    c834:	e7ed      	b.n	c812 <lfs_dir_commit+0x23a>
            err = lfs_dir_commitattr(lfs, &commit,
    c836:	ab0b      	add	r3, sp, #44	; 0x2c
    c838:	4a61      	ldr	r2, [pc, #388]	; (c9c0 <lfs_dir_commit+0x3e8>)
    c83a:	a90e      	add	r1, sp, #56	; 0x38
    c83c:	4640      	mov	r0, r8
    c83e:	f006 f945 	bl	12acc <lfs_dir_commitattr>
            if (err) {
    c842:	4606      	mov	r6, r0
    c844:	b168      	cbz	r0, c862 <lfs_dir_commit+0x28a>
                if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
    c846:	f110 0f1c 	cmn.w	r0, #28
    c84a:	d031      	beq.n	c8b0 <lfs_dir_commit+0x2d8>
    c84c:	f110 0f54 	cmn.w	r0, #84	; 0x54
    c850:	d02e      	beq.n	c8b0 <lfs_dir_commit+0x2d8>
                *dir = olddir;
    c852:	ac16      	add	r4, sp, #88	; 0x58
    c854:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    c856:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    c858:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    c85c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
                return err;
    c860:	e0d1      	b.n	ca06 <lfs_dir_commit+0x42e>
        err = lfs_dir_commitcrc(lfs, &commit);
    c862:	a90e      	add	r1, sp, #56	; 0x38
    c864:	4640      	mov	r0, r8
    c866:	f006 f9a3 	bl	12bb0 <lfs_dir_commitcrc>
        if (err) {
    c86a:	4606      	mov	r6, r0
    c86c:	b168      	cbz	r0, c88a <lfs_dir_commit+0x2b2>
            if (err == LFS_ERR_NOSPC || err == LFS_ERR_CORRUPT) {
    c86e:	f110 0f1c 	cmn.w	r0, #28
    c872:	d01d      	beq.n	c8b0 <lfs_dir_commit+0x2d8>
    c874:	f110 0f54 	cmn.w	r0, #84	; 0x54
    c878:	d01a      	beq.n	c8b0 <lfs_dir_commit+0x2d8>
            *dir = olddir;
    c87a:	ac16      	add	r4, sp, #88	; 0x58
    c87c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    c87e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    c880:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    c884:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
    c888:	e0bd      	b.n	ca06 <lfs_dir_commit+0x42e>
        dir->off = commit.off;
    c88a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c88c:	60eb      	str	r3, [r5, #12]
        dir->etag = commit.ptag;
    c88e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    c890:	612b      	str	r3, [r5, #16]
        lfs->gdisk = lfs->gstate;
    c892:	f108 033c 	add.w	r3, r8, #60	; 0x3c
    c896:	f108 0230 	add.w	r2, r8, #48	; 0x30
    c89a:	ca07      	ldmia	r2, {r0, r1, r2}
    c89c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        lfs->gdelta = (lfs_gstate_t){0};
    c8a0:	2200      	movs	r2, #0
    c8a2:	f8c8 2048 	str.w	r2, [r8, #72]	; 0x48
    c8a6:	f8c8 204c 	str.w	r2, [r8, #76]	; 0x4c
    c8aa:	f8c8 2050 	str.w	r2, [r8, #80]	; 0x50
    if (dir->erased || dir->count >= 0xff) {
    c8ae:	e010      	b.n	c8d2 <lfs_dir_commit+0x2fa>
    rcache->block = LFS_BLOCK_NULL;
    c8b0:	f04f 33ff 	mov.w	r3, #4294967295
    c8b4:	f8c8 3010 	str.w	r3, [r8, #16]
        int err = lfs_dir_compact(lfs, dir, attrs, attrcount,
    c8b8:	8aab      	ldrh	r3, [r5, #20]
    c8ba:	9302      	str	r3, [sp, #8]
    c8bc:	2300      	movs	r3, #0
    c8be:	9301      	str	r3, [sp, #4]
    c8c0:	9500      	str	r5, [sp, #0]
    c8c2:	464b      	mov	r3, r9
    c8c4:	463a      	mov	r2, r7
    c8c6:	4629      	mov	r1, r5
    c8c8:	4640      	mov	r0, r8
    c8ca:	f7ff fc8b 	bl	c1e4 <lfs_dir_compact>
        if (err) {
    c8ce:	4606      	mov	r6, r0
    c8d0:	b910      	cbnz	r0, c8d8 <lfs_dir_commit+0x300>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
    c8d2:	f8d8 c028 	ldr.w	ip, [r8, #40]	; 0x28
    c8d6:	e04e      	b.n	c976 <lfs_dir_commit+0x39e>
            *dir = olddir;
    c8d8:	ac16      	add	r4, sp, #88	; 0x58
    c8da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    c8dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    c8de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    c8e2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
            return err;
    c8e6:	e08e      	b.n	ca06 <lfs_dir_commit+0x42e>
                        d->id == lfs_tag_id(attrs[i].tag)) {
    c8e8:	f8bc 2004 	ldrh.w	r2, [ip, #4]
    return (tag & 0x000ffc00) >> 10;
    c8ec:	f3c6 2389 	ubfx	r3, r6, #10, #10
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
    c8f0:	429a      	cmp	r2, r3
    c8f2:	d110      	bne.n	c916 <lfs_dir_commit+0x33e>
                    d->m.pair[0] = LFS_BLOCK_NULL;
    c8f4:	f04f 33ff 	mov.w	r3, #4294967295
    c8f8:	f8cc 3008 	str.w	r3, [ip, #8]
                    d->m.pair[1] = LFS_BLOCK_NULL;
    c8fc:	f8cc 300c 	str.w	r3, [ip, #12]
            for (int i = 0; i < attrcount; i++) {
    c900:	3101      	adds	r1, #1
    c902:	4549      	cmp	r1, r9
    c904:	da35      	bge.n	c972 <lfs_dir_commit+0x39a>
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
    c906:	f857 6031 	ldr.w	r6, [r7, r1, lsl #3]
    return (tag & 0x7ff00000) >> 20;
    c90a:	f3c6 540a 	ubfx	r4, r6, #20, #11
                if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
    c90e:	f240 43ff 	movw	r3, #1279	; 0x4ff
    c912:	429c      	cmp	r4, r3
    c914:	d0e8      	beq.n	c8e8 <lfs_dir_commit+0x310>
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
    c916:	f240 43ff 	movw	r3, #1279	; 0x4ff
    c91a:	429c      	cmp	r4, r3
    c91c:	d016      	beq.n	c94c <lfs_dir_commit+0x374>
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
    c91e:	f240 4301 	movw	r3, #1025	; 0x401
    c922:	429c      	cmp	r4, r3
    c924:	d1ec      	bne.n	c900 <lfs_dir_commit+0x328>
                        d->id >= lfs_tag_id(attrs[i].tag)) {
    c926:	f8bc 3004 	ldrh.w	r3, [ip, #4]
    return (tag & 0x000ffc00) >> 10;
    c92a:	f3c6 2689 	ubfx	r6, r6, #10, #10
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_CREATE &&
    c92e:	42b3      	cmp	r3, r6
    c930:	d3e6      	bcc.n	c900 <lfs_dir_commit+0x328>
                    d->id += 1;
    c932:	3301      	adds	r3, #1
    c934:	f8ac 3004 	strh.w	r3, [ip, #4]
                    if (d->type == LFS_TYPE_DIR) {
    c938:	f89c 3006 	ldrb.w	r3, [ip, #6]
    c93c:	2b02      	cmp	r3, #2
    c93e:	d1df      	bne.n	c900 <lfs_dir_commit+0x328>
                        ((lfs_dir_t*)d)->pos += 1;
    c940:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
    c944:	3301      	adds	r3, #1
    c946:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28
    c94a:	e7d9      	b.n	c900 <lfs_dir_commit+0x328>
                        d->id > lfs_tag_id(attrs[i].tag)) {
    c94c:	f8bc 3004 	ldrh.w	r3, [ip, #4]
    return (tag & 0x000ffc00) >> 10;
    c950:	f3c6 2289 	ubfx	r2, r6, #10, #10
                } else if (lfs_tag_type3(attrs[i].tag) == LFS_TYPE_DELETE &&
    c954:	4293      	cmp	r3, r2
    c956:	d9e2      	bls.n	c91e <lfs_dir_commit+0x346>
                    d->id -= 1;
    c958:	3b01      	subs	r3, #1
    c95a:	f8ac 3004 	strh.w	r3, [ip, #4]
                    if (d->type == LFS_TYPE_DIR) {
    c95e:	f89c 3006 	ldrb.w	r3, [ip, #6]
    c962:	2b02      	cmp	r3, #2
    c964:	d1cc      	bne.n	c900 <lfs_dir_commit+0x328>
                        ((lfs_dir_t*)d)->pos -= 1;
    c966:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
    c96a:	3b01      	subs	r3, #1
    c96c:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28
    c970:	e7c6      	b.n	c900 <lfs_dir_commit+0x328>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
    c972:	f8dc c000 	ldr.w	ip, [ip]
    c976:	f1bc 0f00 	cmp.w	ip, #0
    c97a:	d01c      	beq.n	c9b6 <lfs_dir_commit+0x3de>
        if (&d->m != dir && lfs_pair_cmp(d->m.pair, olddir.pair) == 0) {
    c97c:	f10c 0308 	add.w	r3, ip, #8
    c980:	42ab      	cmp	r3, r5
    c982:	d0f6      	beq.n	c972 <lfs_dir_commit+0x39a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    c984:	f8dc 3008 	ldr.w	r3, [ip, #8]
    c988:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c98a:	4293      	cmp	r3, r2
    c98c:	d008      	beq.n	c9a0 <lfs_dir_commit+0x3c8>
    c98e:	f8dc 000c 	ldr.w	r0, [ip, #12]
    c992:	9917      	ldr	r1, [sp, #92]	; 0x5c
    c994:	4288      	cmp	r0, r1
    c996:	d003      	beq.n	c9a0 <lfs_dir_commit+0x3c8>
    c998:	428b      	cmp	r3, r1
    c99a:	d001      	beq.n	c9a0 <lfs_dir_commit+0x3c8>
    c99c:	4282      	cmp	r2, r0
    c99e:	d1e8      	bne.n	c972 <lfs_dir_commit+0x39a>
            d->m = *dir;
    c9a0:	f10c 0408 	add.w	r4, ip, #8
    c9a4:	462e      	mov	r6, r5
    c9a6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    c9a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    c9aa:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    c9ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            for (int i = 0; i < attrcount; i++) {
    c9b2:	2100      	movs	r1, #0
    c9b4:	e7a5      	b.n	c902 <lfs_dir_commit+0x32a>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
    c9b6:	f8d8 4028 	ldr.w	r4, [r8, #40]	; 0x28
    c9ba:	e004      	b.n	c9c6 <lfs_dir_commit+0x3ee>
    c9bc:	00012b89 	.word	0x00012b89
    c9c0:	7ffffc0c 	.word	0x7ffffc0c
    c9c4:	6824      	ldr	r4, [r4, #0]
    c9c6:	b314      	cbz	r4, ca0e <lfs_dir_commit+0x436>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    c9c8:	68a3      	ldr	r3, [r4, #8]
    c9ca:	9a16      	ldr	r2, [sp, #88]	; 0x58
    c9cc:	4293      	cmp	r3, r2
    c9ce:	d007      	beq.n	c9e0 <lfs_dir_commit+0x408>
    c9d0:	68e0      	ldr	r0, [r4, #12]
    c9d2:	9917      	ldr	r1, [sp, #92]	; 0x5c
    c9d4:	4288      	cmp	r0, r1
    c9d6:	d003      	beq.n	c9e0 <lfs_dir_commit+0x408>
    c9d8:	428b      	cmp	r3, r1
    c9da:	d001      	beq.n	c9e0 <lfs_dir_commit+0x408>
    c9dc:	4282      	cmp	r2, r0
    c9de:	d1f1      	bne.n	c9c4 <lfs_dir_commit+0x3ec>
            while (d->id >= d->m.count && d->m.split) {
    c9e0:	88a3      	ldrh	r3, [r4, #4]
    c9e2:	8ba2      	ldrh	r2, [r4, #28]
    c9e4:	4293      	cmp	r3, r2
    c9e6:	d3ed      	bcc.n	c9c4 <lfs_dir_commit+0x3ec>
    c9e8:	7fe1      	ldrb	r1, [r4, #31]
    c9ea:	2900      	cmp	r1, #0
    c9ec:	d0ea      	beq.n	c9c4 <lfs_dir_commit+0x3ec>
                d->id -= d->m.count;
    c9ee:	1a9b      	subs	r3, r3, r2
    c9f0:	80a3      	strh	r3, [r4, #4]
                int err = lfs_dir_fetch(lfs, &d->m, d->m.tail);
    c9f2:	f104 0220 	add.w	r2, r4, #32
    c9f6:	f104 0108 	add.w	r1, r4, #8
    c9fa:	4640      	mov	r0, r8
    c9fc:	f005 fec8 	bl	12790 <lfs_dir_fetch>
                if (err) {
    ca00:	4606      	mov	r6, r0
    ca02:	2800      	cmp	r0, #0
    ca04:	d0ec      	beq.n	c9e0 <lfs_dir_commit+0x408>
}
    ca06:	4630      	mov	r0, r6
    ca08:	b021      	add	sp, #132	; 0x84
    ca0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
    ca0e:	2600      	movs	r6, #0
    ca10:	e7f9      	b.n	ca06 <lfs_dir_commit+0x42e>
    ca12:	bf00      	nop

0000ca14 <lfs_dir_drop>:
static int lfs_dir_drop(lfs_t *lfs, lfs_mdir_t *dir, lfs_mdir_t *tail) {
    ca14:	b570      	push	{r4, r5, r6, lr}
    ca16:	b082      	sub	sp, #8
    ca18:	4605      	mov	r5, r0
    ca1a:	460e      	mov	r6, r1
    ca1c:	4614      	mov	r4, r2
    int err = lfs_dir_getgstate(lfs, tail, &lfs->gdelta);
    ca1e:	f100 0248 	add.w	r2, r0, #72	; 0x48
    ca22:	4621      	mov	r1, r4
    ca24:	f7fe fde8 	bl	b5f8 <lfs_dir_getgstate>
    if (err) {
    ca28:	b108      	cbz	r0, ca2e <lfs_dir_drop+0x1a>
}
    ca2a:	b002      	add	sp, #8
    ca2c:	bd70      	pop	{r4, r5, r6, pc}
    lfs_pair_tole32(tail->tail);
    ca2e:	f104 0118 	add.w	r1, r4, #24
    err = lfs_dir_commit(lfs, dir, LFS_MKATTRS(
    ca32:	7de3      	ldrb	r3, [r4, #23]
    ca34:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
    ca38:	4b05      	ldr	r3, [pc, #20]	; (ca50 <lfs_dir_drop+0x3c>)
    ca3a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    ca3e:	9300      	str	r3, [sp, #0]
    ca40:	9101      	str	r1, [sp, #4]
    ca42:	2301      	movs	r3, #1
    ca44:	466a      	mov	r2, sp
    ca46:	4631      	mov	r1, r6
    ca48:	4628      	mov	r0, r5
    ca4a:	f7ff fdc5 	bl	c5d8 <lfs_dir_commit>
    if (err) {
    ca4e:	e7ec      	b.n	ca2a <lfs_dir_drop+0x16>
    ca50:	000ffc08 	.word	0x000ffc08

0000ca54 <lfs_fs_deorphan>:
static int lfs_fs_deorphan(lfs_t *lfs) {
    ca54:	b570      	push	{r4, r5, r6, lr}
    ca56:	b09e      	sub	sp, #120	; 0x78
    return lfs_tag_size(a->tag);
    ca58:	6b03      	ldr	r3, [r0, #48]	; 0x30
    return tag & 0x000003ff;
    ca5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    if (!lfs_gstate_hasorphans(&lfs->gstate)) {
    ca5e:	2b00      	cmp	r3, #0
    ca60:	d07d      	beq.n	cb5e <lfs_fs_deorphan+0x10a>
    ca62:	4606      	mov	r6, r0
    lfs_mdir_t pdir = {.split = true, .tail = {0, 1}};
    ca64:	2300      	movs	r3, #0
    ca66:	9314      	str	r3, [sp, #80]	; 0x50
    ca68:	9315      	str	r3, [sp, #84]	; 0x54
    ca6a:	9316      	str	r3, [sp, #88]	; 0x58
    ca6c:	9317      	str	r3, [sp, #92]	; 0x5c
    ca6e:	9318      	str	r3, [sp, #96]	; 0x60
    ca70:	9319      	str	r3, [sp, #100]	; 0x64
    ca72:	931a      	str	r3, [sp, #104]	; 0x68
    ca74:	2301      	movs	r3, #1
    ca76:	f88d 3067 	strb.w	r3, [sp, #103]	; 0x67
    ca7a:	931b      	str	r3, [sp, #108]	; 0x6c
    while (!lfs_pair_isnull(pdir.tail)) {
    ca7c:	e05c      	b.n	cb38 <lfs_fs_deorphan+0xe4>
            lfs_stag_t tag = lfs_fs_parent(lfs, pdir.tail, &parent);
    ca7e:	aa04      	add	r2, sp, #16
    ca80:	a91a      	add	r1, sp, #104	; 0x68
    ca82:	4630      	mov	r0, r6
    ca84:	f7fe fbc2 	bl	b20c <lfs_fs_parent>
            if (tag < 0 && tag != LFS_ERR_NOENT) {
    ca88:	1e03      	subs	r3, r0, #0
    ca8a:	db23      	blt.n	cad4 <lfs_fs_deorphan+0x80>
            if (tag == LFS_ERR_NOENT) {
    ca8c:	f113 0f02 	cmn.w	r3, #2
    ca90:	d025      	beq.n	cade <lfs_fs_deorphan+0x8a>
            lfs_stag_t res = lfs_dir_get(lfs, &parent,
    ca92:	aa02      	add	r2, sp, #8
    ca94:	9200      	str	r2, [sp, #0]
    ca96:	4a34      	ldr	r2, [pc, #208]	; (cb68 <lfs_fs_deorphan+0x114>)
    ca98:	a904      	add	r1, sp, #16
    ca9a:	4630      	mov	r0, r6
    ca9c:	f005 fec4 	bl	12828 <lfs_dir_get>
            if (res < 0) {
    caa0:	2800      	cmp	r0, #0
    caa2:	db30      	blt.n	cb06 <lfs_fs_deorphan+0xb2>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
    caa4:	9b02      	ldr	r3, [sp, #8]
    caa6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    caa8:	4293      	cmp	r3, r2
    caaa:	d021      	beq.n	caf0 <lfs_fs_deorphan+0x9c>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
    caac:	991b      	ldr	r1, [sp, #108]	; 0x6c
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
    caae:	4299      	cmp	r1, r3
    cab0:	d024      	beq.n	cafc <lfs_fs_deorphan+0xa8>
            if (!lfs_pair_sync(pair, pdir.tail)) {
    cab2:	f014 0f01 	tst.w	r4, #1
    cab6:	d137      	bne.n	cb28 <lfs_fs_deorphan+0xd4>
                err = lfs_dir_commit(lfs, &pdir, LFS_MKATTRS(
    cab8:	4b2c      	ldr	r3, [pc, #176]	; (cb6c <lfs_fs_deorphan+0x118>)
    caba:	931c      	str	r3, [sp, #112]	; 0x70
    cabc:	ab02      	add	r3, sp, #8
    cabe:	931d      	str	r3, [sp, #116]	; 0x74
    cac0:	2301      	movs	r3, #1
    cac2:	aa1c      	add	r2, sp, #112	; 0x70
    cac4:	a914      	add	r1, sp, #80	; 0x50
    cac6:	4630      	mov	r0, r6
    cac8:	f7ff fd86 	bl	c5d8 <lfs_dir_commit>
                if (err) {
    cacc:	4604      	mov	r4, r0
    cace:	2800      	cmp	r0, #0
    cad0:	d146      	bne.n	cb60 <lfs_fs_deorphan+0x10c>
    cad2:	e031      	b.n	cb38 <lfs_fs_deorphan+0xe4>
            if (tag < 0 && tag != LFS_ERR_NOENT) {
    cad4:	f113 0f02 	cmn.w	r3, #2
    cad8:	d0d8      	beq.n	ca8c <lfs_fs_deorphan+0x38>
                return tag;
    cada:	461c      	mov	r4, r3
    cadc:	e040      	b.n	cb60 <lfs_fs_deorphan+0x10c>
                err = lfs_dir_drop(lfs, &pdir, &dir);
    cade:	aa0c      	add	r2, sp, #48	; 0x30
    cae0:	a914      	add	r1, sp, #80	; 0x50
    cae2:	4630      	mov	r0, r6
    cae4:	f7ff ff96 	bl	ca14 <lfs_dir_drop>
                if (err) {
    cae8:	4604      	mov	r4, r0
    caea:	2800      	cmp	r0, #0
    caec:	d138      	bne.n	cb60 <lfs_fs_deorphan+0x10c>
    caee:	e023      	b.n	cb38 <lfs_fs_deorphan+0xe4>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
    caf0:	9803      	ldr	r0, [sp, #12]
    caf2:	991b      	ldr	r1, [sp, #108]	; 0x6c
    caf4:	4288      	cmp	r0, r1
    caf6:	d1d9      	bne.n	caac <lfs_fs_deorphan+0x58>
    caf8:	2401      	movs	r4, #1
    cafa:	e7da      	b.n	cab2 <lfs_fs_deorphan+0x5e>
           (paira[0] == pairb[1] && paira[1] == pairb[0]);
    cafc:	9b03      	ldr	r3, [sp, #12]
    cafe:	4293      	cmp	r3, r2
    cb00:	d1d7      	bne.n	cab2 <lfs_fs_deorphan+0x5e>
    return (paira[0] == pairb[0] && paira[1] == pairb[1]) ||
    cb02:	2401      	movs	r4, #1
    cb04:	e7d5      	b.n	cab2 <lfs_fs_deorphan+0x5e>
                return res;
    cb06:	4604      	mov	r4, r0
    cb08:	e02a      	b.n	cb60 <lfs_fs_deorphan+0x10c>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    cb0a:	2301      	movs	r3, #1
    cb0c:	e000      	b.n	cb10 <lfs_fs_deorphan+0xbc>
    cb0e:	2301      	movs	r3, #1
    while (!lfs_pair_isnull(pdir.tail)) {
    cb10:	b9e3      	cbnz	r3, cb4c <lfs_fs_deorphan+0xf8>
        int err = lfs_dir_fetch(lfs, &dir, pdir.tail);
    cb12:	aa1a      	add	r2, sp, #104	; 0x68
    cb14:	a90c      	add	r1, sp, #48	; 0x30
    cb16:	4630      	mov	r0, r6
    cb18:	f005 fe3a 	bl	12790 <lfs_dir_fetch>
        if (err) {
    cb1c:	4604      	mov	r4, r0
    cb1e:	b9f8      	cbnz	r0, cb60 <lfs_fs_deorphan+0x10c>
        if (!pdir.split) {
    cb20:	f89d 3067 	ldrb.w	r3, [sp, #103]	; 0x67
    cb24:	2b00      	cmp	r3, #0
    cb26:	d0aa      	beq.n	ca7e <lfs_fs_deorphan+0x2a>
        pdir = dir;
    cb28:	ac14      	add	r4, sp, #80	; 0x50
    cb2a:	ad0c      	add	r5, sp, #48	; 0x30
    cb2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    cb2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    cb30:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    cb34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
    cb38:	9b1a      	ldr	r3, [sp, #104]	; 0x68
    cb3a:	f1b3 3fff 	cmp.w	r3, #4294967295
    cb3e:	d0e6      	beq.n	cb0e <lfs_fs_deorphan+0xba>
    cb40:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
    cb42:	f1b3 3fff 	cmp.w	r3, #4294967295
    cb46:	d0e0      	beq.n	cb0a <lfs_fs_deorphan+0xb6>
    cb48:	2300      	movs	r3, #0
    cb4a:	e7e1      	b.n	cb10 <lfs_fs_deorphan+0xbc>
    return lfs_tag_size(a->tag);
    cb4c:	f896 1030 	ldrb.w	r1, [r6, #48]	; 0x30
    lfs_fs_preporphans(lfs, -lfs_gstate_getorphans(&lfs->gstate));
    cb50:	4249      	negs	r1, r1
    cb52:	b249      	sxtb	r1, r1
    cb54:	4630      	mov	r0, r6
    cb56:	f005 fcc1 	bl	124dc <lfs_fs_preporphans>
    return 0;
    cb5a:	2400      	movs	r4, #0
    cb5c:	e000      	b.n	cb60 <lfs_fs_deorphan+0x10c>
        return 0;
    cb5e:	2400      	movs	r4, #0
}
    cb60:	4620      	mov	r0, r4
    cb62:	b01e      	add	sp, #120	; 0x78
    cb64:	bd70      	pop	{r4, r5, r6, pc}
    cb66:	bf00      	nop
    cb68:	7ffffc00 	.word	0x7ffffc00
    cb6c:	600ffc08 	.word	0x600ffc08

0000cb70 <lfs_mkdir>:
int lfs_mkdir(lfs_t *lfs, const char *path) {
    cb70:	b5f0      	push	{r4, r5, r6, r7, lr}
    cb72:	b0ab      	sub	sp, #172	; 0xac
    cb74:	4604      	mov	r4, r0
    cb76:	9101      	str	r1, [sp, #4]
    int err = lfs_fs_forceconsistency(lfs);
    cb78:	f006 fcd7 	bl	1352a <lfs_fs_forceconsistency>
    if (err) {
    cb7c:	4603      	mov	r3, r0
    cb7e:	b110      	cbz	r0, cb86 <lfs_mkdir+0x16>
}
    cb80:	4618      	mov	r0, r3
    cb82:	b02b      	add	sp, #172	; 0xac
    cb84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cwd.next = lfs->mlist;
    cb86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    cb88:	931c      	str	r3, [sp, #112]	; 0x70
    err = lfs_dir_find(lfs, &cwd.m, &path, &id);
    cb8a:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
    cb8e:	aa01      	add	r2, sp, #4
    cb90:	a91e      	add	r1, sp, #120	; 0x78
    cb92:	4620      	mov	r0, r4
    cb94:	f7fe fd5a 	bl	b64c <lfs_dir_find>
    cb98:	4603      	mov	r3, r0
    if (!(err == LFS_ERR_NOENT && id != 0x3ff)) {
    cb9a:	f110 0f02 	cmn.w	r0, #2
    cb9e:	d12a      	bne.n	cbf6 <lfs_mkdir+0x86>
    cba0:	f8bd 106e 	ldrh.w	r1, [sp, #110]	; 0x6e
    cba4:	f240 32ff 	movw	r2, #1023	; 0x3ff
    cba8:	4291      	cmp	r1, r2
    cbaa:	d024      	beq.n	cbf6 <lfs_mkdir+0x86>
    lfs_size_t nlen = strlen(path);
    cbac:	9801      	ldr	r0, [sp, #4]
    cbae:	f004 facf 	bl	11150 <strlen>
    cbb2:	4607      	mov	r7, r0
    if (nlen > lfs->name_max) {
    cbb4:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    cbb6:	4283      	cmp	r3, r0
    cbb8:	d37c      	bcc.n	ccb4 <lfs_mkdir+0x144>
    lfs_alloc_ack(lfs);
    cbba:	4620      	mov	r0, r4
    cbbc:	f005 fc6d 	bl	1249a <lfs_alloc_ack>
    err = lfs_dir_alloc(lfs, &dir);
    cbc0:	a913      	add	r1, sp, #76	; 0x4c
    cbc2:	4620      	mov	r0, r4
    cbc4:	f006 fa2b 	bl	1301e <lfs_dir_alloc>
    if (err) {
    cbc8:	4603      	mov	r3, r0
    cbca:	2800      	cmp	r0, #0
    cbcc:	d1d8      	bne.n	cb80 <lfs_mkdir+0x10>
    lfs_mdir_t pred = cwd.m;
    cbce:	ad0b      	add	r5, sp, #44	; 0x2c
    cbd0:	ae1e      	add	r6, sp, #120	; 0x78
    cbd2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    cbd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    cbd6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
    cbda:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    while (pred.split) {
    cbde:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
    cbe2:	b16b      	cbz	r3, cc00 <lfs_mkdir+0x90>
        err = lfs_dir_fetch(lfs, &pred, pred.tail);
    cbe4:	aa11      	add	r2, sp, #68	; 0x44
    cbe6:	a90b      	add	r1, sp, #44	; 0x2c
    cbe8:	4620      	mov	r0, r4
    cbea:	f005 fdd1 	bl	12790 <lfs_dir_fetch>
        if (err) {
    cbee:	4603      	mov	r3, r0
    cbf0:	2800      	cmp	r0, #0
    cbf2:	d0f4      	beq.n	cbde <lfs_mkdir+0x6e>
    cbf4:	e7c4      	b.n	cb80 <lfs_mkdir+0x10>
        return (err < 0) ? err : LFS_ERR_EXIST;
    cbf6:	2b00      	cmp	r3, #0
    cbf8:	dbc2      	blt.n	cb80 <lfs_mkdir+0x10>
    cbfa:	f06f 0310 	mvn.w	r3, #16
    cbfe:	e7bf      	b.n	cb80 <lfs_mkdir+0x10>
    err = lfs_dir_commit(lfs, &dir, LFS_MKATTRS(
    cc00:	4b2e      	ldr	r3, [pc, #184]	; (ccbc <lfs_mkdir+0x14c>)
    cc02:	9326      	str	r3, [sp, #152]	; 0x98
    cc04:	ab11      	add	r3, sp, #68	; 0x44
    cc06:	9327      	str	r3, [sp, #156]	; 0x9c
    cc08:	2301      	movs	r3, #1
    cc0a:	aa26      	add	r2, sp, #152	; 0x98
    cc0c:	a913      	add	r1, sp, #76	; 0x4c
    cc0e:	4620      	mov	r0, r4
    cc10:	f7ff fce2 	bl	c5d8 <lfs_dir_commit>
    if (err) {
    cc14:	4603      	mov	r3, r0
    cc16:	2800      	cmp	r0, #0
    cc18:	d1b2      	bne.n	cb80 <lfs_mkdir+0x10>
    if (cwd.m.split) {
    cc1a:	f89d 308f 	ldrb.w	r3, [sp, #143]	; 0x8f
    cc1e:	bb2b      	cbnz	r3, cc6c <lfs_mkdir+0xfc>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
    cc20:	f8bd 306e 	ldrh.w	r3, [sp, #110]	; 0x6e
    cc24:	029b      	lsls	r3, r3, #10
    cc26:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    cc2a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    cc2e:	9203      	str	r2, [sp, #12]
    cc30:	2200      	movs	r2, #0
    cc32:	9204      	str	r2, [sp, #16]
    cc34:	431f      	orrs	r7, r3
    cc36:	f447 1700 	orr.w	r7, r7, #2097152	; 0x200000
    cc3a:	9705      	str	r7, [sp, #20]
    cc3c:	9a01      	ldr	r2, [sp, #4]
    cc3e:	9206      	str	r2, [sp, #24]
    cc40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    cc44:	f043 0308 	orr.w	r3, r3, #8
    cc48:	9307      	str	r3, [sp, #28]
    cc4a:	ab13      	add	r3, sp, #76	; 0x4c
    cc4c:	9308      	str	r3, [sp, #32]
    cc4e:	f89d 308f 	ldrb.w	r3, [sp, #143]	; 0x8f
    cc52:	bb6b      	cbnz	r3, ccb0 <lfs_mkdir+0x140>
    cc54:	4b19      	ldr	r3, [pc, #100]	; (ccbc <lfs_mkdir+0x14c>)
    cc56:	9309      	str	r3, [sp, #36]	; 0x24
    cc58:	ab13      	add	r3, sp, #76	; 0x4c
    cc5a:	930a      	str	r3, [sp, #40]	; 0x28
    cc5c:	2304      	movs	r3, #4
    cc5e:	aa03      	add	r2, sp, #12
    cc60:	a91e      	add	r1, sp, #120	; 0x78
    cc62:	4620      	mov	r0, r4
    cc64:	f7ff fcb8 	bl	c5d8 <lfs_dir_commit>
    cc68:	4603      	mov	r3, r0
    if (err) {
    cc6a:	e789      	b.n	cb80 <lfs_mkdir+0x10>
        lfs_fs_preporphans(lfs, +1);
    cc6c:	2101      	movs	r1, #1
    cc6e:	4620      	mov	r0, r4
    cc70:	f005 fc34 	bl	124dc <lfs_fs_preporphans>
        cwd.type = 0;
    cc74:	2300      	movs	r3, #0
    cc76:	f88d 3076 	strb.w	r3, [sp, #118]	; 0x76
        cwd.id = 0;
    cc7a:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
        lfs->mlist = &cwd;
    cc7e:	ab1c      	add	r3, sp, #112	; 0x70
    cc80:	62a3      	str	r3, [r4, #40]	; 0x28
        err = lfs_dir_commit(lfs, &pred, LFS_MKATTRS(
    cc82:	4b0e      	ldr	r3, [pc, #56]	; (ccbc <lfs_mkdir+0x14c>)
    cc84:	9328      	str	r3, [sp, #160]	; 0xa0
    cc86:	ab13      	add	r3, sp, #76	; 0x4c
    cc88:	9329      	str	r3, [sp, #164]	; 0xa4
    cc8a:	2301      	movs	r3, #1
    cc8c:	aa28      	add	r2, sp, #160	; 0xa0
    cc8e:	a90b      	add	r1, sp, #44	; 0x2c
    cc90:	4620      	mov	r0, r4
    cc92:	f7ff fca1 	bl	c5d8 <lfs_dir_commit>
        if (err) {
    cc96:	4603      	mov	r3, r0
    cc98:	b110      	cbz	r0, cca0 <lfs_mkdir+0x130>
            lfs->mlist = cwd.next;
    cc9a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    cc9c:	62a2      	str	r2, [r4, #40]	; 0x28
            return err;
    cc9e:	e76f      	b.n	cb80 <lfs_mkdir+0x10>
        lfs->mlist = cwd.next;
    cca0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    cca2:	62a3      	str	r3, [r4, #40]	; 0x28
        lfs_fs_preporphans(lfs, -1);
    cca4:	f04f 31ff 	mov.w	r1, #4294967295
    cca8:	4620      	mov	r0, r4
    ccaa:	f005 fc17 	bl	124dc <lfs_fs_preporphans>
    ccae:	e7b7      	b.n	cc20 <lfs_mkdir+0xb0>
    err = lfs_dir_commit(lfs, &cwd.m, LFS_MKATTRS(
    ccb0:	2300      	movs	r3, #0
    ccb2:	e7d0      	b.n	cc56 <lfs_mkdir+0xe6>
        return LFS_ERR_NAMETOOLONG;
    ccb4:	f06f 0323 	mvn.w	r3, #35	; 0x23
    ccb8:	e762      	b.n	cb80 <lfs_mkdir+0x10>
    ccba:	bf00      	nop
    ccbc:	600ffc08 	.word	0x600ffc08

0000ccc0 <lfs_fs_relocate>:
        const lfs_block_t oldpair[2], lfs_block_t newpair[2]) {
    ccc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ccc4:	b090      	sub	sp, #64	; 0x40
    ccc6:	4607      	mov	r7, r0
    ccc8:	460c      	mov	r4, r1
    ccca:	4615      	mov	r5, r2
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    cccc:	680b      	ldr	r3, [r1, #0]
    ccce:	6a02      	ldr	r2, [r0, #32]
    ccd0:	4293      	cmp	r3, r2
    ccd2:	d007      	beq.n	cce4 <lfs_fs_relocate+0x24>
    ccd4:	6848      	ldr	r0, [r1, #4]
    ccd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
    ccd8:	4281      	cmp	r1, r0
    ccda:	d003      	beq.n	cce4 <lfs_fs_relocate+0x24>
    ccdc:	428b      	cmp	r3, r1
    ccde:	d001      	beq.n	cce4 <lfs_fs_relocate+0x24>
    cce0:	4282      	cmp	r2, r0
    cce2:	d103      	bne.n	ccec <lfs_fs_relocate+0x2c>
        lfs->root[0] = newpair[0];
    cce4:	682b      	ldr	r3, [r5, #0]
    cce6:	623b      	str	r3, [r7, #32]
        lfs->root[1] = newpair[1];
    cce8:	686b      	ldr	r3, [r5, #4]
    ccea:	627b      	str	r3, [r7, #36]	; 0x24
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
    ccec:	6abb      	ldr	r3, [r7, #40]	; 0x28
    ccee:	e007      	b.n	cd00 <lfs_fs_relocate+0x40>
            d->m.pair[0] = newpair[0];
    ccf0:	682a      	ldr	r2, [r5, #0]
    ccf2:	609a      	str	r2, [r3, #8]
            d->m.pair[1] = newpair[1];
    ccf4:	686a      	ldr	r2, [r5, #4]
    ccf6:	60da      	str	r2, [r3, #12]
        if (d->type == LFS_TYPE_DIR &&
    ccf8:	799a      	ldrb	r2, [r3, #6]
    ccfa:	2a02      	cmp	r2, #2
    ccfc:	d00e      	beq.n	cd1c <lfs_fs_relocate+0x5c>
    for (struct lfs_mlist *d = lfs->mlist; d; d = d->next) {
    ccfe:	681b      	ldr	r3, [r3, #0]
    cd00:	b1eb      	cbz	r3, cd3e <lfs_fs_relocate+0x7e>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    cd02:	6822      	ldr	r2, [r4, #0]
    cd04:	6899      	ldr	r1, [r3, #8]
    cd06:	4291      	cmp	r1, r2
    cd08:	d0f2      	beq.n	ccf0 <lfs_fs_relocate+0x30>
    cd0a:	6860      	ldr	r0, [r4, #4]
    cd0c:	68de      	ldr	r6, [r3, #12]
    cd0e:	42b0      	cmp	r0, r6
    cd10:	d0ee      	beq.n	ccf0 <lfs_fs_relocate+0x30>
    cd12:	42b2      	cmp	r2, r6
    cd14:	d0ec      	beq.n	ccf0 <lfs_fs_relocate+0x30>
    cd16:	4281      	cmp	r1, r0
    cd18:	d1ee      	bne.n	ccf8 <lfs_fs_relocate+0x38>
    cd1a:	e7e9      	b.n	ccf0 <lfs_fs_relocate+0x30>
    cd1c:	6822      	ldr	r2, [r4, #0]
    cd1e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    cd20:	428a      	cmp	r2, r1
    cd22:	d007      	beq.n	cd34 <lfs_fs_relocate+0x74>
    cd24:	6866      	ldr	r6, [r4, #4]
    cd26:	6b18      	ldr	r0, [r3, #48]	; 0x30
    cd28:	42b0      	cmp	r0, r6
    cd2a:	d003      	beq.n	cd34 <lfs_fs_relocate+0x74>
    cd2c:	4282      	cmp	r2, r0
    cd2e:	d001      	beq.n	cd34 <lfs_fs_relocate+0x74>
    cd30:	428e      	cmp	r6, r1
    cd32:	d1e4      	bne.n	ccfe <lfs_fs_relocate+0x3e>
            ((lfs_dir_t*)d)->head[0] = newpair[0];
    cd34:	682a      	ldr	r2, [r5, #0]
    cd36:	62da      	str	r2, [r3, #44]	; 0x2c
            ((lfs_dir_t*)d)->head[1] = newpair[1];
    cd38:	686a      	ldr	r2, [r5, #4]
    cd3a:	631a      	str	r2, [r3, #48]	; 0x30
    cd3c:	e7df      	b.n	ccfe <lfs_fs_relocate+0x3e>
    lfs_stag_t tag = lfs_fs_parent(lfs, oldpair, &parent);
    cd3e:	466a      	mov	r2, sp
    cd40:	4621      	mov	r1, r4
    cd42:	4638      	mov	r0, r7
    cd44:	f7fe fa62 	bl	b20c <lfs_fs_parent>
    if (tag < 0 && tag != LFS_ERR_NOENT) {
    cd48:	1e06      	subs	r6, r0, #0
    cd4a:	db1a      	blt.n	cd82 <lfs_fs_relocate+0xc2>
    if (tag != LFS_ERR_NOENT) {
    cd4c:	f116 0f02 	cmn.w	r6, #2
    cd50:	d058      	beq.n	ce04 <lfs_fs_relocate+0x144>
        lfs_fs_preporphans(lfs, +1);
    cd52:	2101      	movs	r1, #1
    cd54:	4638      	mov	r0, r7
    cd56:	f005 fbc1 	bl	124dc <lfs_fs_preporphans>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    cd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
    cd5c:	0d1a      	lsrs	r2, r3, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    cd5e:	f412 6fe0 	tst.w	r2, #1792	; 0x700
    cd62:	d014      	beq.n	cd8e <lfs_fs_relocate+0xce>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    cd64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    cd66:	9900      	ldr	r1, [sp, #0]
    cd68:	428a      	cmp	r2, r1
    cd6a:	d02f      	beq.n	cdcc <lfs_fs_relocate+0x10c>
    cd6c:	f8d7 c038 	ldr.w	ip, [r7, #56]	; 0x38
    cd70:	9801      	ldr	r0, [sp, #4]
    cd72:	4584      	cmp	ip, r0
    cd74:	d02c      	beq.n	cdd0 <lfs_fs_relocate+0x110>
    cd76:	4282      	cmp	r2, r0
    cd78:	d02c      	beq.n	cdd4 <lfs_fs_relocate+0x114>
    cd7a:	4561      	cmp	r1, ip
    cd7c:	d005      	beq.n	cd8a <lfs_fs_relocate+0xca>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    cd7e:	2200      	movs	r2, #0
    cd80:	e006      	b.n	cd90 <lfs_fs_relocate+0xd0>
    if (tag < 0 && tag != LFS_ERR_NOENT) {
    cd82:	f116 0f02 	cmn.w	r6, #2
    cd86:	d11d      	bne.n	cdc4 <lfs_fs_relocate+0x104>
    cd88:	e7e0      	b.n	cd4c <lfs_fs_relocate+0x8c>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    cd8a:	2201      	movs	r2, #1
    cd8c:	e000      	b.n	cd90 <lfs_fs_relocate+0xd0>
    cd8e:	2200      	movs	r2, #0
        if (lfs_gstate_hasmovehere(&lfs->gstate, parent.pair)) {
    cd90:	bb12      	cbnz	r2, cdd8 <lfs_fs_relocate+0x118>
        uint16_t moveid = 0x3ff;
    cd92:	f240 38ff 	movw	r8, #1023	; 0x3ff
        int err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
    cd96:	2300      	movs	r3, #0
    cd98:	9309      	str	r3, [sp, #36]	; 0x24
    cd9a:	f240 33ff 	movw	r3, #1023	; 0x3ff
    cd9e:	4598      	cmp	r8, r3
    cda0:	d029      	beq.n	cdf6 <lfs_fs_relocate+0x136>
    cda2:	ea4f 2388 	mov.w	r3, r8, lsl #10
    cda6:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
    cdaa:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    cdae:	9308      	str	r3, [sp, #32]
    cdb0:	960a      	str	r6, [sp, #40]	; 0x28
    cdb2:	950b      	str	r5, [sp, #44]	; 0x2c
    cdb4:	2302      	movs	r3, #2
    cdb6:	aa08      	add	r2, sp, #32
    cdb8:	4669      	mov	r1, sp
    cdba:	4638      	mov	r0, r7
    cdbc:	f7ff fc0c 	bl	c5d8 <lfs_dir_commit>
        if (err) {
    cdc0:	4606      	mov	r6, r0
    cdc2:	b1d0      	cbz	r0, cdfa <lfs_fs_relocate+0x13a>
}
    cdc4:	4630      	mov	r0, r6
    cdc6:	b010      	add	sp, #64	; 0x40
    cdc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    cdcc:	2201      	movs	r2, #1
    cdce:	e7df      	b.n	cd90 <lfs_fs_relocate+0xd0>
    cdd0:	2201      	movs	r2, #1
    cdd2:	e7dd      	b.n	cd90 <lfs_fs_relocate+0xd0>
    cdd4:	2201      	movs	r2, #1
    cdd6:	e7db      	b.n	cd90 <lfs_fs_relocate+0xd0>
    return (tag & 0x000ffc00) >> 10;
    cdd8:	f3c3 2889 	ubfx	r8, r3, #10, #10
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
    cddc:	2200      	movs	r2, #0
    cdde:	f240 31ff 	movw	r1, #1023	; 0x3ff
    cde2:	4638      	mov	r0, r7
    cde4:	f7fd ff40 	bl	ac68 <lfs_fs_prepmove>
    return (tag & 0x000ffc00) >> 10;
    cde8:	f3c6 2389 	ubfx	r3, r6, #10, #10
            if (moveid < lfs_tag_id(tag)) {
    cdec:	4598      	cmp	r8, r3
    cdee:	d2d2      	bcs.n	cd96 <lfs_fs_relocate+0xd6>
                tag -= LFS_MKTAG(0, 1, 0);
    cdf0:	f5a6 6680 	sub.w	r6, r6, #1024	; 0x400
    cdf4:	e7cf      	b.n	cd96 <lfs_fs_relocate+0xd6>
        int err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
    cdf6:	2300      	movs	r3, #0
    cdf8:	e7d9      	b.n	cdae <lfs_fs_relocate+0xee>
        lfs_fs_preporphans(lfs, -1);
    cdfa:	f04f 31ff 	mov.w	r1, #4294967295
    cdfe:	4638      	mov	r0, r7
    ce00:	f005 fb6c 	bl	124dc <lfs_fs_preporphans>
    int err = lfs_fs_pred(lfs, oldpair, &parent);
    ce04:	466a      	mov	r2, sp
    ce06:	4621      	mov	r1, r4
    ce08:	4638      	mov	r0, r7
    ce0a:	f005 fccf 	bl	127ac <lfs_fs_pred>
    if (err && err != LFS_ERR_NOENT) {
    ce0e:	4606      	mov	r6, r0
    ce10:	b110      	cbz	r0, ce18 <lfs_fs_relocate+0x158>
    ce12:	f110 0f02 	cmn.w	r0, #2
    ce16:	d1d5      	bne.n	cdc4 <lfs_fs_relocate+0x104>
    if (err != LFS_ERR_NOENT) {
    ce18:	f116 0f02 	cmn.w	r6, #2
    ce1c:	d046      	beq.n	ceac <lfs_fs_relocate+0x1ec>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    ce1e:	6b3c      	ldr	r4, [r7, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
    ce20:	0d23      	lsrs	r3, r4, #20
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    ce22:	f413 6fe0 	tst.w	r3, #1792	; 0x700
    ce26:	d00f      	beq.n	ce48 <lfs_fs_relocate+0x188>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    ce28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    ce2a:	9a00      	ldr	r2, [sp, #0]
    ce2c:	4293      	cmp	r3, r2
    ce2e:	d02c      	beq.n	ce8a <lfs_fs_relocate+0x1ca>
    ce30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    ce32:	9901      	ldr	r1, [sp, #4]
    ce34:	4281      	cmp	r1, r0
    ce36:	d02a      	beq.n	ce8e <lfs_fs_relocate+0x1ce>
    ce38:	4299      	cmp	r1, r3
    ce3a:	d02a      	beq.n	ce92 <lfs_fs_relocate+0x1d2>
    ce3c:	4290      	cmp	r0, r2
    ce3e:	d001      	beq.n	ce44 <lfs_fs_relocate+0x184>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    ce40:	2300      	movs	r3, #0
    ce42:	e002      	b.n	ce4a <lfs_fs_relocate+0x18a>
    ce44:	2301      	movs	r3, #1
    ce46:	e000      	b.n	ce4a <lfs_fs_relocate+0x18a>
    ce48:	2300      	movs	r3, #0
        if (lfs_gstate_hasmovehere(&lfs->gstate, parent.pair)) {
    ce4a:	bb23      	cbnz	r3, ce96 <lfs_fs_relocate+0x1d6>
        uint16_t moveid = 0x3ff;
    ce4c:	f240 34ff 	movw	r4, #1023	; 0x3ff
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
    ce50:	2300      	movs	r3, #0
    ce52:	930d      	str	r3, [sp, #52]	; 0x34
    ce54:	f240 33ff 	movw	r3, #1023	; 0x3ff
    ce58:	429c      	cmp	r4, r3
    ce5a:	d025      	beq.n	cea8 <lfs_fs_relocate+0x1e8>
    ce5c:	02a3      	lsls	r3, r4, #10
    ce5e:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
    ce62:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    ce66:	930c      	str	r3, [sp, #48]	; 0x30
    ce68:	f89d 3017 	ldrb.w	r3, [sp, #23]
    ce6c:	f503 62c0 	add.w	r2, r3, #1536	; 0x600
    ce70:	4b0f      	ldr	r3, [pc, #60]	; (ceb0 <lfs_fs_relocate+0x1f0>)
    ce72:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    ce76:	930e      	str	r3, [sp, #56]	; 0x38
    ce78:	950f      	str	r5, [sp, #60]	; 0x3c
    ce7a:	2302      	movs	r3, #2
    ce7c:	aa0c      	add	r2, sp, #48	; 0x30
    ce7e:	4669      	mov	r1, sp
    ce80:	4638      	mov	r0, r7
    ce82:	f7ff fba9 	bl	c5d8 <lfs_dir_commit>
    ce86:	4606      	mov	r6, r0
        if (err) {
    ce88:	e79c      	b.n	cdc4 <lfs_fs_relocate+0x104>
    return lfs_tag_type1(a->tag) && lfs_pair_cmp(a->pair, pair) == 0;
    ce8a:	2301      	movs	r3, #1
    ce8c:	e7dd      	b.n	ce4a <lfs_fs_relocate+0x18a>
    ce8e:	2301      	movs	r3, #1
    ce90:	e7db      	b.n	ce4a <lfs_fs_relocate+0x18a>
    ce92:	2301      	movs	r3, #1
    ce94:	e7d9      	b.n	ce4a <lfs_fs_relocate+0x18a>
    return (tag & 0x000ffc00) >> 10;
    ce96:	f3c4 2489 	ubfx	r4, r4, #10, #10
            lfs_fs_prepmove(lfs, 0x3ff, NULL);
    ce9a:	2200      	movs	r2, #0
    ce9c:	f240 31ff 	movw	r1, #1023	; 0x3ff
    cea0:	4638      	mov	r0, r7
    cea2:	f7fd fee1 	bl	ac68 <lfs_fs_prepmove>
    cea6:	e7d3      	b.n	ce50 <lfs_fs_relocate+0x190>
        err = lfs_dir_commit(lfs, &parent, LFS_MKATTRS(
    cea8:	2300      	movs	r3, #0
    ceaa:	e7dc      	b.n	ce66 <lfs_fs_relocate+0x1a6>
    return 0;
    ceac:	2600      	movs	r6, #0
    ceae:	e789      	b.n	cdc4 <lfs_fs_relocate+0x104>
    ceb0:	000ffc08 	.word	0x000ffc08

0000ceb4 <lfs_file_opencfg>:
        const struct lfs_file_config *cfg) {
    ceb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ceb8:	b08b      	sub	sp, #44	; 0x2c
    ceba:	4607      	mov	r7, r0
    cebc:	460c      	mov	r4, r1
    cebe:	9203      	str	r2, [sp, #12]
    cec0:	461e      	mov	r6, r3
    if ((flags & 3) != LFS_O_RDONLY) {
    cec2:	f003 0303 	and.w	r3, r3, #3
    cec6:	2b01      	cmp	r3, #1
    cec8:	d005      	beq.n	ced6 <lfs_file_opencfg+0x22>
        int err = lfs_fs_forceconsistency(lfs);
    ceca:	f006 fb2e 	bl	1352a <lfs_fs_forceconsistency>
        if (err) {
    cece:	4605      	mov	r5, r0
    ced0:	2800      	cmp	r0, #0
    ced2:	f040 8109 	bne.w	d0e8 <lfs_file_opencfg+0x234>
    file->cfg = cfg;
    ced6:	9b12      	ldr	r3, [sp, #72]	; 0x48
    ced8:	6523      	str	r3, [r4, #80]	; 0x50
    file->flags = flags | LFS_F_OPENED;
    ceda:	f446 1300 	orr.w	r3, r6, #2097152	; 0x200000
    cede:	6323      	str	r3, [r4, #48]	; 0x30
    file->pos = 0;
    cee0:	2300      	movs	r3, #0
    cee2:	6363      	str	r3, [r4, #52]	; 0x34
    file->off = 0;
    cee4:	63e3      	str	r3, [r4, #60]	; 0x3c
    file->cache.buffer = NULL;
    cee6:	64e3      	str	r3, [r4, #76]	; 0x4c
    lfs_stag_t tag = lfs_dir_find(lfs, &file->m, &path, &file->id);
    cee8:	f104 0808 	add.w	r8, r4, #8
    ceec:	1d23      	adds	r3, r4, #4
    ceee:	aa03      	add	r2, sp, #12
    cef0:	4641      	mov	r1, r8
    cef2:	4638      	mov	r0, r7
    cef4:	f7fe fbaa 	bl	b64c <lfs_dir_find>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
    cef8:	1e05      	subs	r5, r0, #0
    cefa:	db21      	blt.n	cf40 <lfs_file_opencfg+0x8c>
    file->type = LFS_TYPE_REG;
    cefc:	2301      	movs	r3, #1
    cefe:	71a3      	strb	r3, [r4, #6]
    file->next = (lfs_file_t*)lfs->mlist;
    cf00:	6abb      	ldr	r3, [r7, #40]	; 0x28
    cf02:	6023      	str	r3, [r4, #0]
    lfs->mlist = (struct lfs_mlist*)file;
    cf04:	62bc      	str	r4, [r7, #40]	; 0x28
    if (tag == LFS_ERR_NOENT) {
    cf06:	f115 0f02 	cmn.w	r5, #2
    cf0a:	d023      	beq.n	cf54 <lfs_file_opencfg+0xa0>
    } else if (flags & LFS_O_EXCL) {
    cf0c:	f416 7f00 	tst.w	r6, #512	; 0x200
    cf10:	f040 80e0 	bne.w	d0d4 <lfs_file_opencfg+0x220>
    return (tag & 0x7ff00000) >> 20;
    cf14:	f3c5 550a 	ubfx	r5, r5, #20, #11
    } else if (lfs_tag_type3(tag) != LFS_TYPE_REG) {
    cf18:	2d01      	cmp	r5, #1
    cf1a:	f040 80e9 	bne.w	d0f0 <lfs_file_opencfg+0x23c>
    } else if (flags & LFS_O_TRUNC) {
    cf1e:	f416 6f80 	tst.w	r6, #1024	; 0x400
    cf22:	d046      	beq.n	cfb2 <lfs_file_opencfg+0xfe>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, file->id, 0);
    cf24:	f8b4 9004 	ldrh.w	r9, [r4, #4]
    cf28:	ea4f 2989 	mov.w	r9, r9, lsl #10
    cf2c:	f049 5900 	orr.w	r9, r9, #536870912	; 0x20000000
    cf30:	f449 1980 	orr.w	r9, r9, #1048576	; 0x100000
        file->flags |= LFS_F_DIRTY;
    cf34:	6b23      	ldr	r3, [r4, #48]	; 0x30
    cf36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    cf3a:	6323      	str	r3, [r4, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
    cf3c:	2600      	movs	r6, #0
    cf3e:	e05e      	b.n	cffe <lfs_file_opencfg+0x14a>
    if (tag < 0 && !(tag == LFS_ERR_NOENT && file->id != 0x3ff)) {
    cf40:	f115 0f02 	cmn.w	r5, #2
    cf44:	f040 80c8 	bne.w	d0d8 <lfs_file_opencfg+0x224>
    cf48:	88a2      	ldrh	r2, [r4, #4]
    cf4a:	f240 33ff 	movw	r3, #1023	; 0x3ff
    cf4e:	429a      	cmp	r2, r3
    cf50:	d1d4      	bne.n	cefc <lfs_file_opencfg+0x48>
    cf52:	e0c1      	b.n	d0d8 <lfs_file_opencfg+0x224>
        if (!(flags & LFS_O_CREAT)) {
    cf54:	f416 7f80 	tst.w	r6, #256	; 0x100
    cf58:	f000 80be 	beq.w	d0d8 <lfs_file_opencfg+0x224>
        lfs_size_t nlen = strlen(path);
    cf5c:	9803      	ldr	r0, [sp, #12]
    cf5e:	f004 f8f7 	bl	11150 <strlen>
        if (nlen > lfs->name_max) {
    cf62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    cf64:	4283      	cmp	r3, r0
    cf66:	d202      	bcs.n	cf6e <lfs_file_opencfg+0xba>
            err = LFS_ERR_NAMETOOLONG;
    cf68:	f06f 0523 	mvn.w	r5, #35	; 0x23
    cf6c:	e0b4      	b.n	d0d8 <lfs_file_opencfg+0x224>
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
    cf6e:	2300      	movs	r3, #0
    cf70:	9305      	str	r3, [sp, #20]
    cf72:	9309      	str	r3, [sp, #36]	; 0x24
    cf74:	88a3      	ldrh	r3, [r4, #4]
    cf76:	029b      	lsls	r3, r3, #10
    cf78:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
    cf7c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
    cf80:	9204      	str	r2, [sp, #16]
    cf82:	4318      	orrs	r0, r3
    cf84:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    cf88:	9006      	str	r0, [sp, #24]
    cf8a:	9a03      	ldr	r2, [sp, #12]
    cf8c:	9207      	str	r2, [sp, #28]
    cf8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    cf92:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    cf96:	9308      	str	r3, [sp, #32]
    cf98:	2303      	movs	r3, #3
    cf9a:	aa04      	add	r2, sp, #16
    cf9c:	4641      	mov	r1, r8
    cf9e:	4638      	mov	r0, r7
    cfa0:	f7ff fb1a 	bl	c5d8 <lfs_dir_commit>
        if (err) {
    cfa4:	b910      	cbnz	r0, cfac <lfs_file_opencfg+0xf8>
        tag = LFS_MKTAG(LFS_TYPE_INLINESTRUCT, 0, 0);
    cfa6:	f8df 915c 	ldr.w	r9, [pc, #348]	; d104 <lfs_file_opencfg+0x250>
    cfaa:	e7c7      	b.n	cf3c <lfs_file_opencfg+0x88>
            err = LFS_ERR_NAMETOOLONG;
    cfac:	f06f 0523 	mvn.w	r5, #35	; 0x23
    cfb0:	e092      	b.n	d0d8 <lfs_file_opencfg+0x224>
                LFS_MKTAG(LFS_TYPE_STRUCT, file->id, 8), &file->ctz);
    cfb2:	88a3      	ldrh	r3, [r4, #4]
    cfb4:	029b      	lsls	r3, r3, #10
    cfb6:	f104 0228 	add.w	r2, r4, #40	; 0x28
        tag = lfs_dir_get(lfs, &file->m, LFS_MKTAG(0x700, 0x3ff, 0),
    cfba:	9200      	str	r2, [sp, #0]
    cfbc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    cfc0:	f043 0308 	orr.w	r3, r3, #8
    cfc4:	4a4d      	ldr	r2, [pc, #308]	; (d0fc <lfs_file_opencfg+0x248>)
    cfc6:	4641      	mov	r1, r8
    cfc8:	4638      	mov	r0, r7
    cfca:	f005 fc2d 	bl	12828 <lfs_dir_get>
        if (tag < 0) {
    cfce:	f1b0 0900 	subs.w	r9, r0, #0
    cfd2:	dab3      	bge.n	cf3c <lfs_file_opencfg+0x88>
            err = tag;
    cfd4:	464d      	mov	r5, r9
    cfd6:	e07f      	b.n	d0d8 <lfs_file_opencfg+0x224>
        if ((file->flags & 3) != LFS_O_RDONLY) {
    cfd8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    cfda:	f003 0203 	and.w	r2, r3, #3
    cfde:	2a01      	cmp	r2, #1
    cfe0:	d00c      	beq.n	cffc <lfs_file_opencfg+0x148>
            if (file->cfg->attrs[i].size > lfs->attr_max) {
    cfe2:	6d22      	ldr	r2, [r4, #80]	; 0x50
    cfe4:	6852      	ldr	r2, [r2, #4]
    cfe6:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    cfea:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    cfee:	6891      	ldr	r1, [r2, #8]
    cff0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
    cff2:	4291      	cmp	r1, r2
    cff4:	d87f      	bhi.n	d0f6 <lfs_file_opencfg+0x242>
            file->flags |= LFS_F_DIRTY;
    cff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    cffa:	6323      	str	r3, [r4, #48]	; 0x30
    for (unsigned i = 0; i < file->cfg->attr_count; i++) {
    cffc:	3601      	adds	r6, #1
    cffe:	6d22      	ldr	r2, [r4, #80]	; 0x50
    d000:	6893      	ldr	r3, [r2, #8]
    d002:	42b3      	cmp	r3, r6
    d004:	d920      	bls.n	d048 <lfs_file_opencfg+0x194>
        if ((file->flags & 3) != LFS_O_WRONLY) {
    d006:	6b23      	ldr	r3, [r4, #48]	; 0x30
    d008:	f003 0303 	and.w	r3, r3, #3
    d00c:	2b02      	cmp	r3, #2
    d00e:	d0e3      	beq.n	cfd8 <lfs_file_opencfg+0x124>
                    LFS_MKTAG(LFS_TYPE_USERATTR + file->cfg->attrs[i].type,
    d010:	6853      	ldr	r3, [r2, #4]
    d012:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    d016:	eb03 0182 	add.w	r1, r3, r2, lsl #2
    d01a:	f813 3022 	ldrb.w	r3, [r3, r2, lsl #2]
    d01e:	f503 7240 	add.w	r2, r3, #768	; 0x300
    d022:	88a3      	ldrh	r3, [r4, #4]
    d024:	029b      	lsls	r3, r3, #10
    d026:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
    d02a:	688a      	ldr	r2, [r1, #8]
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
    d02c:	6849      	ldr	r1, [r1, #4]
    d02e:	9100      	str	r1, [sp, #0]
    d030:	4313      	orrs	r3, r2
    d032:	4a33      	ldr	r2, [pc, #204]	; (d100 <lfs_file_opencfg+0x24c>)
    d034:	4641      	mov	r1, r8
    d036:	4638      	mov	r0, r7
    d038:	f005 fbf6 	bl	12828 <lfs_dir_get>
            if (res < 0 && res != LFS_ERR_NOENT) {
    d03c:	1e05      	subs	r5, r0, #0
    d03e:	dacb      	bge.n	cfd8 <lfs_file_opencfg+0x124>
    d040:	f115 0f02 	cmn.w	r5, #2
    d044:	d0c8      	beq.n	cfd8 <lfs_file_opencfg+0x124>
    d046:	e047      	b.n	d0d8 <lfs_file_opencfg+0x224>
    if (file->cfg->buffer) {
    d048:	6813      	ldr	r3, [r2, #0]
    d04a:	b18b      	cbz	r3, d070 <lfs_file_opencfg+0x1bc>
        file->cache.buffer = file->cfg->buffer;
    d04c:	64e3      	str	r3, [r4, #76]	; 0x4c
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
    d04e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    d050:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    d052:	21ff      	movs	r1, #255	; 0xff
    d054:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    d056:	f004 f8ed 	bl	11234 <memset>
    pcache->block = LFS_BLOCK_NULL;
    d05a:	f04f 33ff 	mov.w	r3, #4294967295
    d05e:	6423      	str	r3, [r4, #64]	; 0x40
    return (tag & 0x7ff00000) >> 20;
    d060:	f3c9 520a 	ubfx	r2, r9, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_INLINESTRUCT) {
    d064:	f240 2301 	movw	r3, #513	; 0x201
    d068:	429a      	cmp	r2, r3
    d06a:	d00b      	beq.n	d084 <lfs_file_opencfg+0x1d0>
    return 0;
    d06c:	2500      	movs	r5, #0
    d06e:	e03b      	b.n	d0e8 <lfs_file_opencfg+0x234>
        file->cache.buffer = lfs_malloc(lfs->cfg->cache_size);
    d070:	6ebb      	ldr	r3, [r7, #104]	; 0x68

// Allocate memory, only used if buffers are not provided to littlefs
// Note, memory must be 64-bit aligned
static inline void *lfs_malloc(size_t size) {
#ifndef LFS_NO_MALLOC
    return malloc(size);
    d072:	6a98      	ldr	r0, [r3, #40]	; 0x28
    d074:	f7f7 fe18 	bl	4ca8 <malloc>
    d078:	64e0      	str	r0, [r4, #76]	; 0x4c
        if (!file->cache.buffer) {
    d07a:	2800      	cmp	r0, #0
    d07c:	d1e7      	bne.n	d04e <lfs_file_opencfg+0x19a>
            err = LFS_ERR_NOMEM;
    d07e:	f06f 050b 	mvn.w	r5, #11
    d082:	e029      	b.n	d0d8 <lfs_file_opencfg+0x224>
        file->ctz.head = LFS_BLOCK_INLINE;
    d084:	f06f 0101 	mvn.w	r1, #1
    d088:	62a1      	str	r1, [r4, #40]	; 0x28
    return tag & 0x000003ff;
    d08a:	f3c9 0209 	ubfx	r2, r9, #0, #10
        file->ctz.size = lfs_tag_size(tag);
    d08e:	62e2      	str	r2, [r4, #44]	; 0x2c
        file->flags |= LFS_F_INLINE;
    d090:	6b23      	ldr	r3, [r4, #48]	; 0x30
    d092:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d096:	6323      	str	r3, [r4, #48]	; 0x30
        file->cache.block = file->ctz.head;
    d098:	6421      	str	r1, [r4, #64]	; 0x40
        file->cache.off = 0;
    d09a:	2300      	movs	r3, #0
    d09c:	6463      	str	r3, [r4, #68]	; 0x44
        file->cache.size = lfs->cfg->cache_size;
    d09e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    d0a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    d0a2:	64a3      	str	r3, [r4, #72]	; 0x48
        if (file->ctz.size > 0) {
    d0a4:	b90a      	cbnz	r2, d0aa <lfs_file_opencfg+0x1f6>
    return 0;
    d0a6:	2500      	movs	r5, #0
    d0a8:	e01e      	b.n	d0e8 <lfs_file_opencfg+0x234>
                    LFS_MKTAG(LFS_TYPE_STRUCT, file->id,
    d0aa:	88a2      	ldrh	r2, [r4, #4]
    return (a < b) ? a : b;
    d0ac:	f240 31fe 	movw	r1, #1022	; 0x3fe
    d0b0:	428b      	cmp	r3, r1
    d0b2:	bf28      	it	cs
    d0b4:	460b      	movcs	r3, r1
    d0b6:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
                    file->cache.buffer);
    d0ba:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
            lfs_stag_t res = lfs_dir_get(lfs, &file->m,
    d0bc:	9200      	str	r2, [sp, #0]
    d0be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    d0c2:	4a0e      	ldr	r2, [pc, #56]	; (d0fc <lfs_file_opencfg+0x248>)
    d0c4:	4641      	mov	r1, r8
    d0c6:	4638      	mov	r0, r7
    d0c8:	f005 fbae 	bl	12828 <lfs_dir_get>
            if (res < 0) {
    d0cc:	1e05      	subs	r5, r0, #0
    d0ce:	db03      	blt.n	d0d8 <lfs_file_opencfg+0x224>
    return 0;
    d0d0:	2500      	movs	r5, #0
    d0d2:	e009      	b.n	d0e8 <lfs_file_opencfg+0x234>
        err = LFS_ERR_EXIST;
    d0d4:	f06f 0510 	mvn.w	r5, #16
    file->flags |= LFS_F_ERRED;
    d0d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    d0da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
    d0de:	6323      	str	r3, [r4, #48]	; 0x30
    lfs_file_close(lfs, file);
    d0e0:	4621      	mov	r1, r4
    d0e2:	4638      	mov	r0, r7
    d0e4:	f006 fa85 	bl	135f2 <lfs_file_close>
}
    d0e8:	4628      	mov	r0, r5
    d0ea:	b00b      	add	sp, #44	; 0x2c
    d0ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        err = LFS_ERR_ISDIR;
    d0f0:	f06f 0514 	mvn.w	r5, #20
    d0f4:	e7f0      	b.n	d0d8 <lfs_file_opencfg+0x224>
                err = LFS_ERR_NOSPC;
    d0f6:	f06f 051b 	mvn.w	r5, #27
    d0fa:	e7ed      	b.n	d0d8 <lfs_file_opencfg+0x224>
    d0fc:	700ffc00 	.word	0x700ffc00
    d100:	7ffffc00 	.word	0x7ffffc00
    d104:	20100000 	.word	0x20100000

0000d108 <lfs_remove>:
int lfs_remove(lfs_t *lfs, const char *path) {
    d108:	b570      	push	{r4, r5, r6, lr}
    d10a:	b09a      	sub	sp, #104	; 0x68
    d10c:	4604      	mov	r4, r0
    d10e:	9103      	str	r1, [sp, #12]
    int err = lfs_fs_forceconsistency(lfs);
    d110:	f006 fa0b 	bl	1352a <lfs_fs_forceconsistency>
    if (err) {
    d114:	4603      	mov	r3, r0
    d116:	b110      	cbz	r0, d11e <lfs_remove+0x16>
}
    d118:	4618      	mov	r0, r3
    d11a:	b01a      	add	sp, #104	; 0x68
    d11c:	bd70      	pop	{r4, r5, r6, pc}
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
    d11e:	2300      	movs	r3, #0
    d120:	aa03      	add	r2, sp, #12
    d122:	a910      	add	r1, sp, #64	; 0x40
    d124:	4620      	mov	r0, r4
    d126:	f7fe fa91 	bl	b64c <lfs_dir_find>
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
    d12a:	1e03      	subs	r3, r0, #0
    d12c:	db34      	blt.n	d198 <lfs_remove+0x90>
    return (tag & 0x000ffc00) >> 10;
    d12e:	f3c3 2589 	ubfx	r5, r3, #10, #10
    if (tag < 0 || lfs_tag_id(tag) == 0x3ff) {
    d132:	f240 32ff 	movw	r2, #1023	; 0x3ff
    d136:	4295      	cmp	r5, r2
    d138:	d02e      	beq.n	d198 <lfs_remove+0x90>
    dir.next = lfs->mlist;
    d13a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    d13c:	9206      	str	r2, [sp, #24]
    return (tag & 0x7ff00000) >> 20;
    d13e:	f3c3 560a 	ubfx	r6, r3, #20, #11
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
    d142:	2e02      	cmp	r6, #2
    d144:	d02d      	beq.n	d1a2 <lfs_remove+0x9a>
    err = lfs_dir_commit(lfs, &cwd, LFS_MKATTRS(
    d146:	2300      	movs	r3, #0
    d148:	9319      	str	r3, [sp, #100]	; 0x64
    d14a:	02ad      	lsls	r5, r5, #10
    d14c:	f045 459f 	orr.w	r5, r5, #1333788672	; 0x4f800000
    d150:	f445 05e0 	orr.w	r5, r5, #7340032	; 0x700000
    d154:	9518      	str	r5, [sp, #96]	; 0x60
    d156:	2301      	movs	r3, #1
    d158:	aa18      	add	r2, sp, #96	; 0x60
    d15a:	a910      	add	r1, sp, #64	; 0x40
    d15c:	4620      	mov	r0, r4
    d15e:	f7ff fa3b 	bl	c5d8 <lfs_dir_commit>
    if (err) {
    d162:	4603      	mov	r3, r0
    d164:	2800      	cmp	r0, #0
    d166:	d145      	bne.n	d1f4 <lfs_remove+0xec>
    lfs->mlist = dir.next;
    d168:	9a06      	ldr	r2, [sp, #24]
    d16a:	62a2      	str	r2, [r4, #40]	; 0x28
    if (lfs_tag_type3(tag) == LFS_TYPE_DIR) {
    d16c:	2e02      	cmp	r6, #2
    d16e:	d1d3      	bne.n	d118 <lfs_remove+0x10>
        lfs_fs_preporphans(lfs, -1);
    d170:	f04f 31ff 	mov.w	r1, #4294967295
    d174:	4620      	mov	r0, r4
    d176:	f005 f9b1 	bl	124dc <lfs_fs_preporphans>
        err = lfs_fs_pred(lfs, dir.m.pair, &cwd);
    d17a:	aa10      	add	r2, sp, #64	; 0x40
    d17c:	a908      	add	r1, sp, #32
    d17e:	4620      	mov	r0, r4
    d180:	f005 fb14 	bl	127ac <lfs_fs_pred>
        if (err) {
    d184:	4603      	mov	r3, r0
    d186:	2800      	cmp	r0, #0
    d188:	d1c6      	bne.n	d118 <lfs_remove+0x10>
        err = lfs_dir_drop(lfs, &cwd, &dir.m);
    d18a:	aa08      	add	r2, sp, #32
    d18c:	a910      	add	r1, sp, #64	; 0x40
    d18e:	4620      	mov	r0, r4
    d190:	f7ff fc40 	bl	ca14 <lfs_dir_drop>
    d194:	4603      	mov	r3, r0
        if (err) {
    d196:	e7bf      	b.n	d118 <lfs_remove+0x10>
        return (tag < 0) ? (int)tag : LFS_ERR_INVAL;
    d198:	2b00      	cmp	r3, #0
    d19a:	dbbd      	blt.n	d118 <lfs_remove+0x10>
    d19c:	f06f 0315 	mvn.w	r3, #21
    d1a0:	e7ba      	b.n	d118 <lfs_remove+0x10>
                LFS_MKTAG(LFS_TYPE_STRUCT, lfs_tag_id(tag), 8), pair);
    d1a2:	02ab      	lsls	r3, r5, #10
        lfs_stag_t res = lfs_dir_get(lfs, &cwd, LFS_MKTAG(0x700, 0x3ff, 0),
    d1a4:	aa04      	add	r2, sp, #16
    d1a6:	9200      	str	r2, [sp, #0]
    d1a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    d1ac:	f043 0308 	orr.w	r3, r3, #8
    d1b0:	4a12      	ldr	r2, [pc, #72]	; (d1fc <lfs_remove+0xf4>)
    d1b2:	a910      	add	r1, sp, #64	; 0x40
    d1b4:	4620      	mov	r0, r4
    d1b6:	f005 fb37 	bl	12828 <lfs_dir_get>
        if (res < 0) {
    d1ba:	1e03      	subs	r3, r0, #0
    d1bc:	dbac      	blt.n	d118 <lfs_remove+0x10>
        err = lfs_dir_fetch(lfs, &dir.m, pair);
    d1be:	aa04      	add	r2, sp, #16
    d1c0:	a908      	add	r1, sp, #32
    d1c2:	4620      	mov	r0, r4
    d1c4:	f005 fae4 	bl	12790 <lfs_dir_fetch>
        if (err) {
    d1c8:	4603      	mov	r3, r0
    d1ca:	2800      	cmp	r0, #0
    d1cc:	d1a4      	bne.n	d118 <lfs_remove+0x10>
        if (dir.m.count > 0 || dir.m.split) {
    d1ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    d1d0:	f433 037f 	bics.w	r3, r3, #16711680	; 0xff0000
    d1d4:	d002      	beq.n	d1dc <lfs_remove+0xd4>
            return LFS_ERR_NOTEMPTY;
    d1d6:	f06f 0326 	mvn.w	r3, #38	; 0x26
    d1da:	e79d      	b.n	d118 <lfs_remove+0x10>
        lfs_fs_preporphans(lfs, +1);
    d1dc:	2101      	movs	r1, #1
    d1de:	4620      	mov	r0, r4
    d1e0:	f005 f97c 	bl	124dc <lfs_fs_preporphans>
        dir.type = 0;
    d1e4:	2300      	movs	r3, #0
    d1e6:	f88d 301e 	strb.w	r3, [sp, #30]
        dir.id = 0;
    d1ea:	f8ad 301c 	strh.w	r3, [sp, #28]
        lfs->mlist = &dir;
    d1ee:	ab06      	add	r3, sp, #24
    d1f0:	62a3      	str	r3, [r4, #40]	; 0x28
    d1f2:	e7a8      	b.n	d146 <lfs_remove+0x3e>
        lfs->mlist = dir.next;
    d1f4:	9a06      	ldr	r2, [sp, #24]
    d1f6:	62a2      	str	r2, [r4, #40]	; 0x28
        return err;
    d1f8:	e78e      	b.n	d118 <lfs_remove+0x10>
    d1fa:	bf00      	nop
    d1fc:	700ffc00 	.word	0x700ffc00

0000d200 <lfs_rename>:
int lfs_rename(lfs_t *lfs, const char *oldpath, const char *newpath) {
    d200:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d204:	b0ad      	sub	sp, #180	; 0xb4
    d206:	4604      	mov	r4, r0
    d208:	9103      	str	r1, [sp, #12]
    d20a:	9202      	str	r2, [sp, #8]
    int err = lfs_fs_forceconsistency(lfs);
    d20c:	f006 f98d 	bl	1352a <lfs_fs_forceconsistency>
    if (err) {
    d210:	4606      	mov	r6, r0
    d212:	b118      	cbz	r0, d21c <lfs_rename+0x1c>
}
    d214:	4630      	mov	r0, r6
    d216:	b02d      	add	sp, #180	; 0xb4
    d218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    lfs_stag_t oldtag = lfs_dir_find(lfs, &oldcwd, &oldpath, NULL);
    d21c:	2300      	movs	r3, #0
    d21e:	aa03      	add	r2, sp, #12
    d220:	a922      	add	r1, sp, #136	; 0x88
    d222:	4620      	mov	r0, r4
    d224:	f7fe fa12 	bl	b64c <lfs_dir_find>
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
    d228:	1e05      	subs	r5, r0, #0
    d22a:	f2c0 8090 	blt.w	d34e <lfs_rename+0x14e>
    return (tag & 0x000ffc00) >> 10;
    d22e:	f3c5 2889 	ubfx	r8, r5, #10, #10
    if (oldtag < 0 || lfs_tag_id(oldtag) == 0x3ff) {
    d232:	f240 33ff 	movw	r3, #1023	; 0x3ff
    d236:	4598      	cmp	r8, r3
    d238:	f000 8089 	beq.w	d34e <lfs_rename+0x14e>
    lfs_stag_t prevtag = lfs_dir_find(lfs, &newcwd, &newpath, &newid);
    d23c:	f10d 0366 	add.w	r3, sp, #102	; 0x66
    d240:	aa02      	add	r2, sp, #8
    d242:	a91a      	add	r1, sp, #104	; 0x68
    d244:	4620      	mov	r0, r4
    d246:	f7fe fa01 	bl	b64c <lfs_dir_find>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
    d24a:	1e07      	subs	r7, r0, #0
    d24c:	f2c0 8086 	blt.w	d35c <lfs_rename+0x15c>
    return (tag & 0x000ffc00) >> 10;
    d250:	f3c7 2289 	ubfx	r2, r7, #10, #10
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
    d254:	f240 33ff 	movw	r3, #1023	; 0x3ff
    d258:	429a      	cmp	r2, r3
    d25a:	d07f      	beq.n	d35c <lfs_rename+0x15c>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
    d25c:	9b22      	ldr	r3, [sp, #136]	; 0x88
    d25e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
    d260:	429a      	cmp	r2, r3
    d262:	d008      	beq.n	d276 <lfs_rename+0x76>
    d264:	9823      	ldr	r0, [sp, #140]	; 0x8c
    d266:	991b      	ldr	r1, [sp, #108]	; 0x6c
    d268:	4281      	cmp	r1, r0
    d26a:	d004      	beq.n	d276 <lfs_rename+0x76>
    d26c:	4299      	cmp	r1, r3
    d26e:	d002      	beq.n	d276 <lfs_rename+0x76>
    d270:	4290      	cmp	r0, r2
    d272:	d000      	beq.n	d276 <lfs_rename+0x76>
    d274:	2601      	movs	r6, #1
    prevdir.next = lfs->mlist;
    d276:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    d278:	930f      	str	r3, [sp, #60]	; 0x3c
    if (prevtag == LFS_ERR_NOENT) {
    d27a:	f117 0f02 	cmn.w	r7, #2
    d27e:	d07e      	beq.n	d37e <lfs_rename+0x17e>
    return (tag & 0x7ff00000) >> 20;
    d280:	f3c7 530a 	ubfx	r3, r7, #20, #11
    d284:	f3c5 520a 	ubfx	r2, r5, #20, #11
    } else if (lfs_tag_type3(prevtag) != lfs_tag_type3(oldtag)) {
    d288:	429a      	cmp	r2, r3
    d28a:	f040 80f8 	bne.w	d47e <lfs_rename+0x27e>
    } else if (samepair && newid == newoldid) {
    d28e:	b91e      	cbnz	r6, d298 <lfs_rename+0x98>
    d290:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
    d294:	4542      	cmp	r2, r8
    d296:	d0bd      	beq.n	d214 <lfs_rename+0x14>
    } else if (lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
    d298:	2b02      	cmp	r3, #2
    d29a:	d07e      	beq.n	d39a <lfs_rename+0x19a>
    uint16_t newoldid = lfs_tag_id(oldtag);
    d29c:	46c1      	mov	r9, r8
    if (!samepair) {
    d29e:	2e00      	cmp	r6, #0
    d2a0:	f040 80ab 	bne.w	d3fa <lfs_rename+0x1fa>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
    d2a4:	2224      	movs	r2, #36	; 0x24
    d2a6:	2100      	movs	r1, #0
    d2a8:	a806      	add	r0, sp, #24
    d2aa:	f003 ffc3 	bl	11234 <memset>
    d2ae:	f117 0f02 	cmn.w	r7, #2
    d2b2:	f000 80a8 	beq.w	d406 <lfs_rename+0x206>
    d2b6:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
    d2ba:	029b      	lsls	r3, r3, #10
    d2bc:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
    d2c0:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    d2c4:	9305      	str	r3, [sp, #20]
    d2c6:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
    d2ca:	0292      	lsls	r2, r2, #10
    d2cc:	f042 4380 	orr.w	r3, r2, #1073741824	; 0x40000000
    d2d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d2d4:	9307      	str	r3, [sp, #28]
    return (tag & 0x7ff00000) >> 20;
    d2d6:	f3c5 530a 	ubfx	r3, r5, #20, #11
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
    d2da:	ea42 5503 	orr.w	r5, r2, r3, lsl #20
    d2de:	9802      	ldr	r0, [sp, #8]
    d2e0:	f003 ff36 	bl	11150 <strlen>
    d2e4:	4328      	orrs	r0, r5
    d2e6:	9009      	str	r0, [sp, #36]	; 0x24
    d2e8:	9b02      	ldr	r3, [sp, #8]
    d2ea:	930a      	str	r3, [sp, #40]	; 0x28
    d2ec:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
    d2f0:	ea48 2383 	orr.w	r3, r8, r3, lsl #10
    d2f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    d2f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
    d2fc:	930b      	str	r3, [sp, #44]	; 0x2c
    d2fe:	ab22      	add	r3, sp, #136	; 0x88
    d300:	930c      	str	r3, [sp, #48]	; 0x30
    d302:	2e00      	cmp	r6, #0
    d304:	f040 8081 	bne.w	d40a <lfs_rename+0x20a>
    d308:	ea4f 2989 	mov.w	r9, r9, lsl #10
    d30c:	f049 439f 	orr.w	r3, r9, #1333788672	; 0x4f800000
    d310:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    d314:	930d      	str	r3, [sp, #52]	; 0x34
    d316:	2305      	movs	r3, #5
    d318:	aa05      	add	r2, sp, #20
    d31a:	a91a      	add	r1, sp, #104	; 0x68
    d31c:	4620      	mov	r0, r4
    d31e:	f7ff f95b 	bl	c5d8 <lfs_dir_commit>
    if (err) {
    d322:	4605      	mov	r5, r0
    d324:	2800      	cmp	r0, #0
    d326:	d172      	bne.n	d40e <lfs_rename+0x20e>
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
    d328:	b126      	cbz	r6, d334 <lfs_rename+0x134>
    return lfs_tag_type1(a->tag);
    d32a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    return (tag & 0x70000000) >> 20;
    d32c:	0d1b      	lsrs	r3, r3, #20
    if (!samepair && lfs_gstate_hasmove(&lfs->gstate)) {
    d32e:	f413 6fe0 	tst.w	r3, #1792	; 0x700
    d332:	d170      	bne.n	d416 <lfs_rename+0x216>
    lfs->mlist = prevdir.next;
    d334:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d336:	62a3      	str	r3, [r4, #40]	; 0x28
    if (prevtag != LFS_ERR_NOENT && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
    d338:	f117 0f02 	cmn.w	r7, #2
    d33c:	f000 80a2 	beq.w	d484 <lfs_rename+0x284>
    return (tag & 0x7ff00000) >> 20;
    d340:	f3c7 570a 	ubfx	r7, r7, #20, #11
    if (prevtag != LFS_ERR_NOENT && lfs_tag_type3(prevtag) == LFS_TYPE_DIR) {
    d344:	2f02      	cmp	r7, #2
    d346:	f000 8082 	beq.w	d44e <lfs_rename+0x24e>
    return 0;
    d34a:	462e      	mov	r6, r5
    d34c:	e762      	b.n	d214 <lfs_rename+0x14>
        return (oldtag < 0) ? (int)oldtag : LFS_ERR_INVAL;
    d34e:	2d00      	cmp	r5, #0
    d350:	db02      	blt.n	d358 <lfs_rename+0x158>
    d352:	f06f 0615 	mvn.w	r6, #21
    d356:	e75d      	b.n	d214 <lfs_rename+0x14>
    d358:	462e      	mov	r6, r5
    d35a:	e75b      	b.n	d214 <lfs_rename+0x14>
    if ((prevtag < 0 || lfs_tag_id(prevtag) == 0x3ff) &&
    d35c:	f117 0f02 	cmn.w	r7, #2
    d360:	d106      	bne.n	d370 <lfs_rename+0x170>
            !(prevtag == LFS_ERR_NOENT && newid != 0x3ff)) {
    d362:	f8bd 2066 	ldrh.w	r2, [sp, #102]	; 0x66
    d366:	f240 33ff 	movw	r3, #1023	; 0x3ff
    d36a:	429a      	cmp	r2, r3
    d36c:	f47f af76 	bne.w	d25c <lfs_rename+0x5c>
        return (prevtag < 0) ? (int)prevtag : LFS_ERR_INVAL;
    d370:	2f00      	cmp	r7, #0
    d372:	db02      	blt.n	d37a <lfs_rename+0x17a>
    d374:	f06f 0615 	mvn.w	r6, #21
    d378:	e74c      	b.n	d214 <lfs_rename+0x14>
    d37a:	463e      	mov	r6, r7
    d37c:	e74a      	b.n	d214 <lfs_rename+0x14>
        lfs_size_t nlen = strlen(newpath);
    d37e:	9802      	ldr	r0, [sp, #8]
    d380:	f003 fee6 	bl	11150 <strlen>
        if (nlen > lfs->name_max) {
    d384:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
    d386:	4283      	cmp	r3, r0
    d388:	d376      	bcc.n	d478 <lfs_rename+0x278>
        if (samepair && newid <= newoldid) {
    d38a:	bb96      	cbnz	r6, d3f2 <lfs_rename+0x1f2>
    d38c:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
    d390:	4543      	cmp	r3, r8
    d392:	d830      	bhi.n	d3f6 <lfs_rename+0x1f6>
            newoldid += 1;
    d394:	f108 0901 	add.w	r9, r8, #1
    d398:	e781      	b.n	d29e <lfs_rename+0x9e>
                LFS_MKTAG(LFS_TYPE_STRUCT, newid, 8), prevpair);
    d39a:	f8bd 3066 	ldrh.w	r3, [sp, #102]	; 0x66
    d39e:	029b      	lsls	r3, r3, #10
        lfs_stag_t res = lfs_dir_get(lfs, &newcwd, LFS_MKTAG(0x700, 0x3ff, 0),
    d3a0:	aa05      	add	r2, sp, #20
    d3a2:	9200      	str	r2, [sp, #0]
    d3a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    d3a8:	f043 0308 	orr.w	r3, r3, #8
    d3ac:	4a36      	ldr	r2, [pc, #216]	; (d488 <lfs_rename+0x288>)
    d3ae:	a91a      	add	r1, sp, #104	; 0x68
    d3b0:	4620      	mov	r0, r4
    d3b2:	f005 fa39 	bl	12828 <lfs_dir_get>
        if (res < 0) {
    d3b6:	1e03      	subs	r3, r0, #0
    d3b8:	db0c      	blt.n	d3d4 <lfs_rename+0x1d4>
        err = lfs_dir_fetch(lfs, &prevdir.m, prevpair);
    d3ba:	aa05      	add	r2, sp, #20
    d3bc:	a911      	add	r1, sp, #68	; 0x44
    d3be:	4620      	mov	r0, r4
    d3c0:	f005 f9e6 	bl	12790 <lfs_dir_fetch>
        if (err) {
    d3c4:	4603      	mov	r3, r0
    d3c6:	b928      	cbnz	r0, d3d4 <lfs_rename+0x1d4>
        if (prevdir.m.count > 0 || prevdir.m.split) {
    d3c8:	9b16      	ldr	r3, [sp, #88]	; 0x58
    d3ca:	f433 037f 	bics.w	r3, r3, #16711680	; 0xff0000
    d3ce:	d003      	beq.n	d3d8 <lfs_rename+0x1d8>
            return LFS_ERR_NOTEMPTY;
    d3d0:	f06f 0326 	mvn.w	r3, #38	; 0x26
            return (int)res;
    d3d4:	461e      	mov	r6, r3
    d3d6:	e71d      	b.n	d214 <lfs_rename+0x14>
        lfs_fs_preporphans(lfs, +1);
    d3d8:	2101      	movs	r1, #1
    d3da:	4620      	mov	r0, r4
    d3dc:	f005 f87e 	bl	124dc <lfs_fs_preporphans>
        prevdir.type = 0;
    d3e0:	2300      	movs	r3, #0
    d3e2:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
        prevdir.id = 0;
    d3e6:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
        lfs->mlist = &prevdir;
    d3ea:	ab0f      	add	r3, sp, #60	; 0x3c
    d3ec:	62a3      	str	r3, [r4, #40]	; 0x28
    uint16_t newoldid = lfs_tag_id(oldtag);
    d3ee:	46c1      	mov	r9, r8
    d3f0:	e755      	b.n	d29e <lfs_rename+0x9e>
    d3f2:	46c1      	mov	r9, r8
    d3f4:	e753      	b.n	d29e <lfs_rename+0x9e>
    d3f6:	46c1      	mov	r9, r8
    d3f8:	e751      	b.n	d29e <lfs_rename+0x9e>
        lfs_fs_prepmove(lfs, newoldid, oldcwd.pair);
    d3fa:	aa22      	add	r2, sp, #136	; 0x88
    d3fc:	4649      	mov	r1, r9
    d3fe:	4620      	mov	r0, r4
    d400:	f7fd fc32 	bl	ac68 <lfs_fs_prepmove>
    d404:	e74e      	b.n	d2a4 <lfs_rename+0xa4>
    err = lfs_dir_commit(lfs, &newcwd, LFS_MKATTRS(
    d406:	2300      	movs	r3, #0
    d408:	e75c      	b.n	d2c4 <lfs_rename+0xc4>
    d40a:	2300      	movs	r3, #0
    d40c:	e782      	b.n	d314 <lfs_rename+0x114>
        lfs->mlist = prevdir.next;
    d40e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d410:	62a3      	str	r3, [r4, #40]	; 0x28
        return err;
    d412:	4606      	mov	r6, r0
    d414:	e6fe      	b.n	d214 <lfs_rename+0x14>
        lfs_fs_prepmove(lfs, 0x3ff, NULL);
    d416:	2200      	movs	r2, #0
    d418:	f240 31ff 	movw	r1, #1023	; 0x3ff
    d41c:	4620      	mov	r0, r4
    d41e:	f7fd fc23 	bl	ac68 <lfs_fs_prepmove>
        err = lfs_dir_commit(lfs, &oldcwd, LFS_MKATTRS(
    d422:	2300      	movs	r3, #0
    d424:	932b      	str	r3, [sp, #172]	; 0xac
    d426:	ea4f 2388 	mov.w	r3, r8, lsl #10
    d42a:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
    d42e:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
    d432:	932a      	str	r3, [sp, #168]	; 0xa8
    d434:	2301      	movs	r3, #1
    d436:	aa2a      	add	r2, sp, #168	; 0xa8
    d438:	a922      	add	r1, sp, #136	; 0x88
    d43a:	4620      	mov	r0, r4
    d43c:	f7ff f8cc 	bl	c5d8 <lfs_dir_commit>
        if (err) {
    d440:	4606      	mov	r6, r0
    d442:	2800      	cmp	r0, #0
    d444:	f43f af76 	beq.w	d334 <lfs_rename+0x134>
            lfs->mlist = prevdir.next;
    d448:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d44a:	62a3      	str	r3, [r4, #40]	; 0x28
            return err;
    d44c:	e6e2      	b.n	d214 <lfs_rename+0x14>
        lfs_fs_preporphans(lfs, -1);
    d44e:	f04f 31ff 	mov.w	r1, #4294967295
    d452:	4620      	mov	r0, r4
    d454:	f005 f842 	bl	124dc <lfs_fs_preporphans>
        err = lfs_fs_pred(lfs, prevdir.m.pair, &newcwd);
    d458:	aa1a      	add	r2, sp, #104	; 0x68
    d45a:	a911      	add	r1, sp, #68	; 0x44
    d45c:	4620      	mov	r0, r4
    d45e:	f005 f9a5 	bl	127ac <lfs_fs_pred>
        if (err) {
    d462:	4606      	mov	r6, r0
    d464:	2800      	cmp	r0, #0
    d466:	f47f aed5 	bne.w	d214 <lfs_rename+0x14>
        err = lfs_dir_drop(lfs, &newcwd, &prevdir.m);
    d46a:	aa11      	add	r2, sp, #68	; 0x44
    d46c:	a91a      	add	r1, sp, #104	; 0x68
    d46e:	4620      	mov	r0, r4
    d470:	f7ff fad0 	bl	ca14 <lfs_dir_drop>
    d474:	4606      	mov	r6, r0
        if (err) {
    d476:	e6cd      	b.n	d214 <lfs_rename+0x14>
            return LFS_ERR_NAMETOOLONG;
    d478:	f06f 0623 	mvn.w	r6, #35	; 0x23
    d47c:	e6ca      	b.n	d214 <lfs_rename+0x14>
        return LFS_ERR_ISDIR;
    d47e:	f06f 0614 	mvn.w	r6, #20
    d482:	e6c7      	b.n	d214 <lfs_rename+0x14>
    return 0;
    d484:	462e      	mov	r6, r5
    d486:	e6c5      	b.n	d214 <lfs_rename+0x14>
    d488:	700ffc00 	.word	0x700ffc00

0000d48c <lfs_format>:
int lfs_format(lfs_t *lfs, const struct lfs_config *cfg) {
    d48c:	b530      	push	{r4, r5, lr}
    d48e:	b097      	sub	sp, #92	; 0x5c
    d490:	4604      	mov	r4, r0
        err = lfs_init(lfs, cfg);
    d492:	f005 fc80 	bl	12d96 <lfs_init>
        if (err) {
    d496:	4605      	mov	r5, r0
    d498:	b110      	cbz	r0, d4a0 <lfs_format+0x14>
}
    d49a:	4628      	mov	r0, r5
    d49c:	b017      	add	sp, #92	; 0x5c
    d49e:	bd30      	pop	{r4, r5, pc}
        memset(lfs->free.buffer, 0, lfs->cfg->lookahead_size);
    d4a0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    d4a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    d4a4:	2100      	movs	r1, #0
    d4a6:	6e60      	ldr	r0, [r4, #100]	; 0x64
    d4a8:	f003 fec4 	bl	11234 <memset>
        lfs->free.off = 0;
    d4ac:	2200      	movs	r2, #0
    d4ae:	6562      	str	r2, [r4, #84]	; 0x54
        lfs->free.size = lfs_min(8*lfs->cfg->lookahead_size,
    d4b0:	6ea1      	ldr	r1, [r4, #104]	; 0x68
    d4b2:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    d4b4:	00db      	lsls	r3, r3, #3
    d4b6:	6a09      	ldr	r1, [r1, #32]
    d4b8:	428b      	cmp	r3, r1
    d4ba:	bf28      	it	cs
    d4bc:	460b      	movcs	r3, r1
    d4be:	65a3      	str	r3, [r4, #88]	; 0x58
        lfs->free.i = 0;
    d4c0:	65e2      	str	r2, [r4, #92]	; 0x5c
        lfs_alloc_ack(lfs);
    d4c2:	4620      	mov	r0, r4
    d4c4:	f004 ffe9 	bl	1249a <lfs_alloc_ack>
        err = lfs_dir_alloc(lfs, &root);
    d4c8:	a906      	add	r1, sp, #24
    d4ca:	4620      	mov	r0, r4
    d4cc:	f005 fda7 	bl	1301e <lfs_dir_alloc>
        if (err) {
    d4d0:	4605      	mov	r5, r0
    d4d2:	b118      	cbz	r0, d4dc <lfs_format+0x50>
    lfs_deinit(lfs);
    d4d4:	4620      	mov	r0, r4
    d4d6:	f005 fc45 	bl	12d64 <lfs_deinit>
    return err;
    d4da:	e7de      	b.n	d49a <lfs_format+0xe>
        lfs_superblock_t superblock = {
    d4dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    d4e0:	9300      	str	r3, [sp, #0]
            .block_size  = lfs->cfg->block_size,
    d4e2:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    d4e4:	69da      	ldr	r2, [r3, #28]
        lfs_superblock_t superblock = {
    d4e6:	9201      	str	r2, [sp, #4]
            .block_count = lfs->cfg->block_count,
    d4e8:	6a1b      	ldr	r3, [r3, #32]
        lfs_superblock_t superblock = {
    d4ea:	9302      	str	r3, [sp, #8]
            .name_max    = lfs->name_max,
    d4ec:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
        lfs_superblock_t superblock = {
    d4ee:	9303      	str	r3, [sp, #12]
            .file_max    = lfs->file_max,
    d4f0:	6f23      	ldr	r3, [r4, #112]	; 0x70
        lfs_superblock_t superblock = {
    d4f2:	9304      	str	r3, [sp, #16]
            .attr_max    = lfs->attr_max,
    d4f4:	6f63      	ldr	r3, [r4, #116]	; 0x74
        lfs_superblock_t superblock = {
    d4f6:	9305      	str	r3, [sp, #20]
        err = lfs_dir_commit(lfs, &root, LFS_MKATTRS(
    d4f8:	2300      	movs	r3, #0
    d4fa:	930f      	str	r3, [sp, #60]	; 0x3c
    d4fc:	4b14      	ldr	r3, [pc, #80]	; (d550 <lfs_format+0xc4>)
    d4fe:	930e      	str	r3, [sp, #56]	; 0x38
    d500:	4b14      	ldr	r3, [pc, #80]	; (d554 <lfs_format+0xc8>)
    d502:	9310      	str	r3, [sp, #64]	; 0x40
    d504:	4b14      	ldr	r3, [pc, #80]	; (d558 <lfs_format+0xcc>)
    d506:	9311      	str	r3, [sp, #68]	; 0x44
    d508:	4b14      	ldr	r3, [pc, #80]	; (d55c <lfs_format+0xd0>)
    d50a:	9312      	str	r3, [sp, #72]	; 0x48
    d50c:	f8cd d04c 	str.w	sp, [sp, #76]	; 0x4c
    d510:	2303      	movs	r3, #3
    d512:	aa0e      	add	r2, sp, #56	; 0x38
    d514:	a906      	add	r1, sp, #24
    d516:	4620      	mov	r0, r4
    d518:	f7ff f85e 	bl	c5d8 <lfs_dir_commit>
        if (err) {
    d51c:	4605      	mov	r5, r0
    d51e:	2800      	cmp	r0, #0
    d520:	d1d8      	bne.n	d4d4 <lfs_format+0x48>
        err = lfs_dir_fetch(lfs, &root, (const lfs_block_t[2]){0, 1});
    d522:	2300      	movs	r3, #0
    d524:	9314      	str	r3, [sp, #80]	; 0x50
    d526:	2301      	movs	r3, #1
    d528:	9315      	str	r3, [sp, #84]	; 0x54
    d52a:	aa14      	add	r2, sp, #80	; 0x50
    d52c:	a906      	add	r1, sp, #24
    d52e:	4620      	mov	r0, r4
    d530:	f005 f92e 	bl	12790 <lfs_dir_fetch>
        if (err) {
    d534:	4605      	mov	r5, r0
    d536:	2800      	cmp	r0, #0
    d538:	d1cc      	bne.n	d4d4 <lfs_format+0x48>
        root.erased = false;
    d53a:	2200      	movs	r2, #0
    d53c:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
        err = lfs_dir_commit(lfs, &root, NULL, 0);
    d540:	4613      	mov	r3, r2
    d542:	a906      	add	r1, sp, #24
    d544:	4620      	mov	r0, r4
    d546:	f7ff f847 	bl	c5d8 <lfs_dir_commit>
    d54a:	4605      	mov	r5, r0
        if (err) {
    d54c:	e7c2      	b.n	d4d4 <lfs_format+0x48>
    d54e:	bf00      	nop
    d550:	40100000 	.word	0x40100000
    d554:	0ff00008 	.word	0x0ff00008
    d558:	00015394 	.word	0x00015394
    d55c:	20100018 	.word	0x20100018

0000d560 <lfs_crc>:
// Only compile if user does not provide custom config
#ifndef LFS_CONFIG


// Software CRC implementation with small lookup table
uint32_t lfs_crc(uint32_t crc, const void *buffer, size_t size) {
    d560:	b470      	push	{r4, r5, r6}
        0x9b64c2b0, 0x86d3d2d4, 0xa00ae278, 0xbdbdf21c,
    };

    const uint8_t *data = buffer;

    for (size_t i = 0; i < size; i++) {
    d562:	2400      	movs	r4, #0
    d564:	4294      	cmp	r4, r2
    d566:	d213      	bcs.n	d590 <lfs_crc+0x30>
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 0)) & 0xf];
    d568:	5d0b      	ldrb	r3, [r1, r4]
    d56a:	ea83 0500 	eor.w	r5, r3, r0
    d56e:	f005 050f 	and.w	r5, r5, #15
    d572:	4e08      	ldr	r6, [pc, #32]	; (d594 <lfs_crc+0x34>)
    d574:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
    d578:	ea85 1010 	eor.w	r0, r5, r0, lsr #4
        crc = (crc >> 4) ^ rtable[(crc ^ (data[i] >> 4)) & 0xf];
    d57c:	ea80 1313 	eor.w	r3, r0, r3, lsr #4
    d580:	f003 030f 	and.w	r3, r3, #15
    d584:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
    d588:	ea83 1010 	eor.w	r0, r3, r0, lsr #4
    for (size_t i = 0; i < size; i++) {
    d58c:	3401      	adds	r4, #1
    d58e:	e7e9      	b.n	d564 <lfs_crc+0x4>
    }

    return crc;
}
    d590:	bc70      	pop	{r4, r5, r6}
    d592:	4770      	bx	lr
    d594:	000159e4 	.word	0x000159e4

0000d598 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    d598:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    d59a:	4c11      	ldr	r4, [pc, #68]	; (d5e0 <_DoInit+0x48>)
    d59c:	2303      	movs	r3, #3
    d59e:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    d5a0:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    d5a2:	4a10      	ldr	r2, [pc, #64]	; (d5e4 <_DoInit+0x4c>)
    d5a4:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    d5a6:	4b10      	ldr	r3, [pc, #64]	; (d5e8 <_DoInit+0x50>)
    d5a8:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    d5aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
    d5ae:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    d5b0:	2300      	movs	r3, #0
    d5b2:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    d5b4:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    d5b6:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    d5b8:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    d5ba:	4a0c      	ldr	r2, [pc, #48]	; (d5ec <_DoInit+0x54>)
    d5bc:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    d5be:	2210      	movs	r2, #16
    d5c0:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    d5c2:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    d5c4:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    d5c6:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    d5c8:	4909      	ldr	r1, [pc, #36]	; (d5f0 <_DoInit+0x58>)
    d5ca:	1de0      	adds	r0, r4, #7
    d5cc:	f003 fd91 	bl	110f2 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    d5d0:	4908      	ldr	r1, [pc, #32]	; (d5f4 <_DoInit+0x5c>)
    d5d2:	4620      	mov	r0, r4
    d5d4:	f003 fd8d 	bl	110f2 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    d5d8:	2320      	movs	r3, #32
    d5da:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    d5dc:	bd10      	pop	{r4, pc}
    d5de:	bf00      	nop
    d5e0:	20002634 	.word	0x20002634
    d5e4:	00015a24 	.word	0x00015a24
    d5e8:	200026ec 	.word	0x200026ec
    d5ec:	200026dc 	.word	0x200026dc
    d5f0:	00015a30 	.word	0x00015a30
    d5f4:	00015a34 	.word	0x00015a34

0000d5f8 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    d5f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d5fc:	4604      	mov	r4, r0
    d5fe:	460e      	mov	r6, r1
    d600:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    d602:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    d606:	4a2d      	ldr	r2, [pc, #180]	; (d6bc <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    d608:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    d60c:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    d60e:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    d610:	42bb      	cmp	r3, r7
    d612:	d84b      	bhi.n	d6ac <SEGGER_RTT_WriteSkipNoLock+0xb4>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    d614:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    d618:	4928      	ldr	r1, [pc, #160]	; (d6bc <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    d61a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    d61e:	f8d2 8020 	ldr.w	r8, [r2, #32]
    d622:	eba8 0907 	sub.w	r9, r8, r7
    d626:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
    d62a:	4295      	cmp	r5, r2
    d62c:	d904      	bls.n	d638 <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
    d62e:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    d630:	429d      	cmp	r5, r3
    d632:	d916      	bls.n	d662 <SEGGER_RTT_WriteSkipNoLock+0x6a>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
    d634:	2000      	movs	r0, #0
    d636:	e03e      	b.n	d6b6 <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    d638:	f8df 8080 	ldr.w	r8, [pc, #128]	; d6bc <SEGGER_RTT_WriteSkipNoLock+0xc4>
    d63c:	1c63      	adds	r3, r4, #1
    d63e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    d642:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    d646:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    d648:	462a      	mov	r2, r5
    d64a:	4631      	mov	r1, r6
    d64c:	4438      	add	r0, r7
    d64e:	f003 fdcd 	bl	111ec <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    d652:	443d      	add	r5, r7
    d654:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    d658:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
    d65c:	6265      	str	r5, [r4, #36]	; 0x24
      return 1;
    d65e:	2001      	movs	r0, #1
    d660:	e029      	b.n	d6b6 <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    d662:	1c43      	adds	r3, r0, #1
    d664:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    d668:	4a14      	ldr	r2, [pc, #80]	; (d6bc <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    d66a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    d66e:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    d670:	464a      	mov	r2, r9
    d672:	4631      	mov	r1, r6
    d674:	4438      	add	r0, r7
    d676:	f003 fdb9 	bl	111ec <memcpy>
      NumBytes -= Rem;
    d67a:	eba7 0708 	sub.w	r7, r7, r8
      if (NumBytes) {
    d67e:	197f      	adds	r7, r7, r5
    d680:	d107      	bne.n	d692 <SEGGER_RTT_WriteSkipNoLock+0x9a>
      pRing->WrOff = NumBytes;
    d682:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    d686:	4b0d      	ldr	r3, [pc, #52]	; (d6bc <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    d688:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    d68c:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
    d68e:	2001      	movs	r0, #1
    d690:	e011      	b.n	d6b6 <SEGGER_RTT_WriteSkipNoLock+0xbe>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    d692:	1c63      	adds	r3, r4, #1
    d694:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    d698:	4a08      	ldr	r2, [pc, #32]	; (d6bc <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    d69a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
        memcpy((void*)pDst, pData + Rem, NumBytes);
    d69e:	463a      	mov	r2, r7
    d6a0:	eb06 0109 	add.w	r1, r6, r9
    d6a4:	6858      	ldr	r0, [r3, #4]
    d6a6:	f003 fda1 	bl	111ec <memcpy>
    d6aa:	e7ea      	b.n	d682 <SEGGER_RTT_WriteSkipNoLock+0x8a>
    Avail = RdOff - WrOff - 1u;
    d6ac:	1bdb      	subs	r3, r3, r7
    d6ae:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    d6b0:	42ab      	cmp	r3, r5
    d6b2:	d2c1      	bcs.n	d638 <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
    d6b4:	2000      	movs	r0, #0
}
    d6b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d6ba:	bf00      	nop
    d6bc:	20002634 	.word	0x20002634

0000d6c0 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    d6c0:	4b06      	ldr	r3, [pc, #24]	; (d6dc <SEGGER_RTT_HasDataUp+0x1c>)
    d6c2:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    d6c6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    d6ca:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
    d6cc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    d6d0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    d6d4:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    d6d6:	1a80      	subs	r0, r0, r2
    d6d8:	4770      	bx	lr
    d6da:	bf00      	nop
    d6dc:	20002634 	.word	0x20002634

0000d6e0 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    d6e0:	4b03      	ldr	r3, [pc, #12]	; (d6f0 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    d6e2:	4a04      	ldr	r2, [pc, #16]	; (d6f4 <z_device_state_init+0x14>)
    d6e4:	4293      	cmp	r3, r2
    d6e6:	d201      	bcs.n	d6ec <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
    d6e8:	3318      	adds	r3, #24
    d6ea:	e7fa      	b.n	d6e2 <z_device_state_init+0x2>
	}
}
    d6ec:	4770      	bx	lr
    d6ee:	bf00      	nop
    d6f0:	000140f0 	.word	0x000140f0
    d6f4:	00014198 	.word	0x00014198

0000d6f8 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    d6f8:	b570      	push	{r4, r5, r6, lr}
    d6fa:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    d6fc:	4b11      	ldr	r3, [pc, #68]	; (d744 <z_sys_init_run_level+0x4c>)
    d6fe:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    d702:	e009      	b.n	d718 <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    d704:	4240      	negs	r0, r0
    d706:	e017      	b.n	d738 <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    d708:	68eb      	ldr	r3, [r5, #12]
    d70a:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    d70c:	68ea      	ldr	r2, [r5, #12]
    d70e:	7853      	ldrb	r3, [r2, #1]
    d710:	f043 0301 	orr.w	r3, r3, #1
    d714:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    d716:	3408      	adds	r4, #8
    d718:	1c73      	adds	r3, r6, #1
    d71a:	4a0a      	ldr	r2, [pc, #40]	; (d744 <z_sys_init_run_level+0x4c>)
    d71c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    d720:	42a3      	cmp	r3, r4
    d722:	d90d      	bls.n	d740 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    d724:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    d726:	6823      	ldr	r3, [r4, #0]
    d728:	4628      	mov	r0, r5
    d72a:	4798      	blx	r3
		if (dev != NULL) {
    d72c:	2d00      	cmp	r5, #0
    d72e:	d0f2      	beq.n	d716 <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    d730:	2800      	cmp	r0, #0
    d732:	d0eb      	beq.n	d70c <z_sys_init_run_level+0x14>
				if (rc < 0) {
    d734:	2800      	cmp	r0, #0
    d736:	dbe5      	blt.n	d704 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    d738:	28ff      	cmp	r0, #255	; 0xff
    d73a:	dde5      	ble.n	d708 <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    d73c:	20ff      	movs	r0, #255	; 0xff
    d73e:	e7e3      	b.n	d708 <z_sys_init_run_level+0x10>
		}
	}
}
    d740:	bd70      	pop	{r4, r5, r6, pc}
    d742:	bf00      	nop
    d744:	00015a3c 	.word	0x00015a3c

0000d748 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    d748:	b538      	push	{r3, r4, r5, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    d74a:	4605      	mov	r5, r0
    d74c:	b328      	cbz	r0, d79a <z_impl_device_get_binding+0x52>
    d74e:	7803      	ldrb	r3, [r0, #0]
    d750:	b32b      	cbz	r3, d79e <z_impl_device_get_binding+0x56>
	/* Split the search into two loops: in the common scenario, where
	 * device names are stored in ROM (and are referenced by the user
	 * with CONFIG_* macros), only cheap pointer comparisons will be
	 * performed. Reserve string comparisons for a fallback.
	 */
	for (dev = __device_start; dev != __device_end; dev++) {
    d752:	4c14      	ldr	r4, [pc, #80]	; (d7a4 <z_impl_device_get_binding+0x5c>)
    d754:	e000      	b.n	d758 <z_impl_device_get_binding+0x10>
    d756:	3418      	adds	r4, #24
    d758:	4b13      	ldr	r3, [pc, #76]	; (d7a8 <z_impl_device_get_binding+0x60>)
    d75a:	429c      	cmp	r4, r3
    d75c:	d008      	beq.n	d770 <z_impl_device_get_binding+0x28>
		if (z_device_ready(dev) && (dev->name == name)) {
    d75e:	4620      	mov	r0, r4
    d760:	f005 ffae 	bl	136c0 <z_device_ready>
    d764:	2800      	cmp	r0, #0
    d766:	d0f6      	beq.n	d756 <z_impl_device_get_binding+0xe>
    d768:	6823      	ldr	r3, [r4, #0]
    d76a:	42ab      	cmp	r3, r5
    d76c:	d1f3      	bne.n	d756 <z_impl_device_get_binding+0xe>
    d76e:	e012      	b.n	d796 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	for (dev = __device_start; dev != __device_end; dev++) {
    d770:	4c0c      	ldr	r4, [pc, #48]	; (d7a4 <z_impl_device_get_binding+0x5c>)
    d772:	e000      	b.n	d776 <z_impl_device_get_binding+0x2e>
    d774:	3418      	adds	r4, #24
    d776:	4b0c      	ldr	r3, [pc, #48]	; (d7a8 <z_impl_device_get_binding+0x60>)
    d778:	429c      	cmp	r4, r3
    d77a:	d00b      	beq.n	d794 <z_impl_device_get_binding+0x4c>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    d77c:	4620      	mov	r0, r4
    d77e:	f005 ff9f 	bl	136c0 <z_device_ready>
    d782:	2800      	cmp	r0, #0
    d784:	d0f6      	beq.n	d774 <z_impl_device_get_binding+0x2c>
    d786:	6821      	ldr	r1, [r4, #0]
    d788:	4628      	mov	r0, r5
    d78a:	f003 fcf3 	bl	11174 <strcmp>
    d78e:	2800      	cmp	r0, #0
    d790:	d1f0      	bne.n	d774 <z_impl_device_get_binding+0x2c>
    d792:	e000      	b.n	d796 <z_impl_device_get_binding+0x4e>
			return dev;
		}
	}

	return NULL;
    d794:	2400      	movs	r4, #0
}
    d796:	4620      	mov	r0, r4
    d798:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    d79a:	4604      	mov	r4, r0
    d79c:	e7fb      	b.n	d796 <z_impl_device_get_binding+0x4e>
    d79e:	2400      	movs	r4, #0
    d7a0:	e7f9      	b.n	d796 <z_impl_device_get_binding+0x4e>
    d7a2:	bf00      	nop
    d7a4:	000140f0 	.word	0x000140f0
    d7a8:	00014198 	.word	0x00014198

0000d7ac <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
    d7ac:	4b01      	ldr	r3, [pc, #4]	; (d7b4 <z_impl_z_errno+0x8>)
    d7ae:	6898      	ldr	r0, [r3, #8]
}
    d7b0:	3094      	adds	r0, #148	; 0x94
    d7b2:	4770      	bx	lr
    d7b4:	20002aec 	.word	0x20002aec

0000d7b8 <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
    d7b8:	2804      	cmp	r0, #4
    d7ba:	d80c      	bhi.n	d7d6 <reason_to_str+0x1e>
    d7bc:	e8df f000 	tbb	[pc, r0]
    d7c0:	07050d03 	.word	0x07050d03
    d7c4:	09          	.byte	0x09
    d7c5:	00          	.byte	0x00
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
    d7c6:	4806      	ldr	r0, [pc, #24]	; (d7e0 <reason_to_str+0x28>)
    d7c8:	4770      	bx	lr
		return "Stack overflow";
    d7ca:	4806      	ldr	r0, [pc, #24]	; (d7e4 <reason_to_str+0x2c>)
    d7cc:	4770      	bx	lr
		return "Kernel oops";
    d7ce:	4806      	ldr	r0, [pc, #24]	; (d7e8 <reason_to_str+0x30>)
    d7d0:	4770      	bx	lr
		return "Kernel panic";
    d7d2:	4806      	ldr	r0, [pc, #24]	; (d7ec <reason_to_str+0x34>)
    d7d4:	4770      	bx	lr
	default:
		return "Unknown error";
    d7d6:	4806      	ldr	r0, [pc, #24]	; (d7f0 <reason_to_str+0x38>)
    d7d8:	4770      	bx	lr
		return "Unhandled interrupt";
    d7da:	4806      	ldr	r0, [pc, #24]	; (d7f4 <reason_to_str+0x3c>)
	}
}
    d7dc:	4770      	bx	lr
    d7de:	bf00      	nop
    d7e0:	00015aa4 	.word	0x00015aa4
    d7e4:	00015a78 	.word	0x00015a78
    d7e8:	00015a88 	.word	0x00015a88
    d7ec:	00015a94 	.word	0x00015a94
    d7f0:	00015a54 	.word	0x00015a54
    d7f4:	00015a64 	.word	0x00015a64

0000d7f8 <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    d7f8:	b130      	cbz	r0, d808 <thread_name_get+0x10>
{
    d7fa:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    d7fc:	f006 f85a 	bl	138b4 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    d800:	b120      	cbz	r0, d80c <thread_name_get+0x14>
    d802:	7803      	ldrb	r3, [r0, #0]
    d804:	b123      	cbz	r3, d810 <thread_name_get+0x18>
}
    d806:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
    d808:	4802      	ldr	r0, [pc, #8]	; (d814 <thread_name_get+0x1c>)
}
    d80a:	4770      	bx	lr
		thread_name = "unknown";
    d80c:	4801      	ldr	r0, [pc, #4]	; (d814 <thread_name_get+0x1c>)
    d80e:	e7fa      	b.n	d806 <thread_name_get+0xe>
    d810:	4800      	ldr	r0, [pc, #0]	; (d814 <thread_name_get+0x1c>)
	return thread_name;
    d812:	e7f8      	b.n	d806 <thread_name_get+0xe>
    d814:	00015ab4 	.word	0x00015ab4

0000d818 <k_sys_fatal_error_handler>:
{
    d818:	b510      	push	{r4, lr}
    d81a:	4604      	mov	r4, r0
	z_impl_log_panic();
    d81c:	f7f4 f9d4 	bl	1bc8 <z_impl_log_panic>
    d820:	4b09      	ldr	r3, [pc, #36]	; (d848 <k_sys_fatal_error_handler+0x30>)
    d822:	4a0a      	ldr	r2, [pc, #40]	; (d84c <k_sys_fatal_error_handler+0x34>)
    d824:	1a9b      	subs	r3, r3, r2
    d826:	08db      	lsrs	r3, r3, #3
	LOG_ERR("Halting system");
    d828:	f04f 0100 	mov.w	r1, #0
    d82c:	2201      	movs	r2, #1
    d82e:	f362 0102 	bfi	r1, r2, #0, #3
    d832:	f36f 01c5 	bfc	r1, #3, #3
    d836:	f363 118f 	bfi	r1, r3, #6, #10
    d83a:	4805      	ldr	r0, [pc, #20]	; (d850 <k_sys_fatal_error_handler+0x38>)
    d83c:	f7f4 f994 	bl	1b68 <log_0>
	arch_system_halt(reason);
    d840:	4620      	mov	r0, r4
    d842:	f005 ff4a 	bl	136da <arch_system_halt>
    d846:	bf00      	nop
    d848:	00014348 	.word	0x00014348
    d84c:	00014318 	.word	0x00014318
    d850:	00015abc 	.word	0x00015abc

0000d854 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    d854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d858:	b082      	sub	sp, #8
    d85a:	4605      	mov	r5, r0
    d85c:	460e      	mov	r6, r1
	__asm__ volatile(
    d85e:	f04f 0320 	mov.w	r3, #32
    d862:	f3ef 8711 	mrs	r7, BASEPRI
    d866:	f383 8812 	msr	BASEPRI_MAX, r3
    d86a:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    d86e:	f001 f927 	bl	eac0 <z_impl_z_current_get>
    d872:	4604      	mov	r4, r0
    d874:	4b29      	ldr	r3, [pc, #164]	; (d91c <z_fatal_error+0xc8>)
    d876:	4a2a      	ldr	r2, [pc, #168]	; (d920 <z_fatal_error+0xcc>)
    d878:	1a9b      	subs	r3, r3, r2
    d87a:	08db      	lsrs	r3, r3, #3
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    d87c:	f04f 0800 	mov.w	r8, #0
    d880:	2201      	movs	r2, #1
    d882:	f362 0802 	bfi	r8, r2, #0, #3
    d886:	f36f 08c5 	bfc	r8, #3, #3
    d88a:	f363 188f 	bfi	r8, r3, #6, #10
    d88e:	4628      	mov	r0, r5
    d890:	f7ff ff92 	bl	d7b8 <reason_to_str>
    d894:	4602      	mov	r2, r0
    d896:	f8ad 8000 	strh.w	r8, [sp]
    d89a:	2300      	movs	r3, #0
    d89c:	4629      	mov	r1, r5
    d89e:	4821      	ldr	r0, [pc, #132]	; (d924 <z_fatal_error+0xd0>)
    d8a0:	f7f4 f890 	bl	19c4 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    d8a4:	b11e      	cbz	r6, d8ae <z_fatal_error+0x5a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    d8a6:	69f3      	ldr	r3, [r6, #28]
    d8a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
    d8ac:	bb2b      	cbnz	r3, d8fa <z_fatal_error+0xa6>
    d8ae:	4b1b      	ldr	r3, [pc, #108]	; (d91c <z_fatal_error+0xc8>)
    d8b0:	4a1b      	ldr	r2, [pc, #108]	; (d920 <z_fatal_error+0xcc>)
    d8b2:	1a9b      	subs	r3, r3, r2
    d8b4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    d8b6:	f04f 0800 	mov.w	r8, #0
    d8ba:	2201      	movs	r2, #1
    d8bc:	f362 0802 	bfi	r8, r2, #0, #3
    d8c0:	f36f 08c5 	bfc	r8, #3, #3
    d8c4:	f363 188f 	bfi	r8, r3, #6, #10
    d8c8:	4620      	mov	r0, r4
    d8ca:	f7ff ff95 	bl	d7f8 <thread_name_get>
    d8ce:	f7f3 ff3d 	bl	174c <z_log_strdup>
    d8d2:	4602      	mov	r2, r0
    d8d4:	4643      	mov	r3, r8
    d8d6:	4621      	mov	r1, r4
    d8d8:	4813      	ldr	r0, [pc, #76]	; (d928 <z_fatal_error+0xd4>)
    d8da:	f7f4 f8e7 	bl	1aac <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    d8de:	4631      	mov	r1, r6
    d8e0:	4628      	mov	r0, r5
    d8e2:	f7ff ff99 	bl	d818 <k_sys_fatal_error_handler>
	__asm__ volatile(
    d8e6:	f387 8811 	msr	BASEPRI, r7
    d8ea:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    d8ee:	4620      	mov	r0, r4
    d8f0:	f7f7 f8dc 	bl	4aac <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    d8f4:	b002      	add	sp, #8
    d8f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d8fa:	4b08      	ldr	r3, [pc, #32]	; (d91c <z_fatal_error+0xc8>)
    d8fc:	4a08      	ldr	r2, [pc, #32]	; (d920 <z_fatal_error+0xcc>)
    d8fe:	1a9b      	subs	r3, r3, r2
    d900:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
    d902:	f04f 0100 	mov.w	r1, #0
    d906:	2201      	movs	r2, #1
    d908:	f362 0102 	bfi	r1, r2, #0, #3
    d90c:	f36f 01c5 	bfc	r1, #3, #3
    d910:	f363 118f 	bfi	r1, r3, #6, #10
    d914:	4805      	ldr	r0, [pc, #20]	; (d92c <z_fatal_error+0xd8>)
    d916:	f7f4 f927 	bl	1b68 <log_0>
    d91a:	e7c8      	b.n	d8ae <z_fatal_error+0x5a>
    d91c:	00014348 	.word	0x00014348
    d920:	00014318 	.word	0x00014318
    d924:	00015acc 	.word	0x00015acc
    d928:	00015b18 	.word	0x00015b18
    d92c:	00015af4 	.word	0x00015af4

0000d930 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    d930:	b5f0      	push	{r4, r5, r6, r7, lr}
    d932:	b089      	sub	sp, #36	; 0x24
    d934:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
    d936:	4b15      	ldr	r3, [pc, #84]	; (d98c <init_idle_thread+0x5c>)
    d938:	25b0      	movs	r5, #176	; 0xb0
    d93a:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
    d93e:	4b14      	ldr	r3, [pc, #80]	; (d990 <init_idle_thread+0x60>)
    d940:	f44f 76b0 	mov.w	r6, #352	; 0x160
    d944:	fb06 3600 	mla	r6, r6, r0, r3

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
    d948:	af06      	add	r7, sp, #24
    d94a:	4603      	mov	r3, r0
    d94c:	4a11      	ldr	r2, [pc, #68]	; (d994 <init_idle_thread+0x64>)
    d94e:	2108      	movs	r1, #8
    d950:	4638      	mov	r0, r7
    d952:	f001 fddf 	bl	f514 <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    d956:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    d95a:	480f      	ldr	r0, [pc, #60]	; (d998 <init_idle_thread+0x68>)
    d95c:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
    d960:	9705      	str	r7, [sp, #20]
    d962:	2301      	movs	r3, #1
    d964:	9304      	str	r3, [sp, #16]
    d966:	230f      	movs	r3, #15
    d968:	9303      	str	r3, [sp, #12]
    d96a:	2300      	movs	r3, #0
    d96c:	9302      	str	r3, [sp, #8]
    d96e:	9301      	str	r3, [sp, #4]
    d970:	9400      	str	r4, [sp, #0]
    d972:	4b0a      	ldr	r3, [pc, #40]	; (d99c <init_idle_thread+0x6c>)
    d974:	f44f 72a0 	mov.w	r2, #320	; 0x140
    d978:	4631      	mov	r1, r6
    d97a:	4628      	mov	r0, r5
    d97c:	f000 f96c 	bl	dc58 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    d980:	7b6b      	ldrb	r3, [r5, #13]
    d982:	f023 0304 	bic.w	r3, r3, #4
    d986:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    d988:	b009      	add	sp, #36	; 0x24
    d98a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d98c:	20000788 	.word	0x20000788
    d990:	200040a0 	.word	0x200040a0
    d994:	00015b30 	.word	0x00015b30
    d998:	20002aec 	.word	0x20002aec
    d99c:	00013927 	.word	0x00013927

0000d9a0 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
    d9a0:	b570      	push	{r4, r5, r6, lr}
    d9a2:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
    d9a4:	f000 ffbe 	bl	e924 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
    d9a8:	4d1b      	ldr	r5, [pc, #108]	; (da18 <prepare_multithreading+0x78>)
    d9aa:	4b1c      	ldr	r3, [pc, #112]	; (da1c <prepare_multithreading+0x7c>)
    d9ac:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    d9ae:	4b1c      	ldr	r3, [pc, #112]	; (da20 <prepare_multithreading+0x80>)
    d9b0:	9305      	str	r3, [sp, #20]
    d9b2:	2301      	movs	r3, #1
    d9b4:	9304      	str	r3, [sp, #16]
    d9b6:	2400      	movs	r4, #0
    d9b8:	9403      	str	r4, [sp, #12]
    d9ba:	9402      	str	r4, [sp, #8]
    d9bc:	9401      	str	r4, [sp, #4]
    d9be:	9400      	str	r4, [sp, #0]
    d9c0:	4b18      	ldr	r3, [pc, #96]	; (da24 <prepare_multithreading+0x84>)
    d9c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
    d9c6:	4918      	ldr	r1, [pc, #96]	; (da28 <prepare_multithreading+0x88>)
    d9c8:	4628      	mov	r0, r5
    d9ca:	f000 f945 	bl	dc58 <z_setup_new_thread>
    d9ce:	4606      	mov	r6, r0
    d9d0:	7b6b      	ldrb	r3, [r5, #13]
    d9d2:	f023 0304 	bic.w	r3, r3, #4
    d9d6:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
    d9d8:	4628      	mov	r0, r5
    d9da:	f006 f8ff 	bl	13bdc <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    d9de:	2c00      	cmp	r4, #0
    d9e0:	dd02      	ble.n	d9e8 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
    d9e2:	4630      	mov	r0, r6
    d9e4:	b006      	add	sp, #24
    d9e6:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
    d9e8:	4620      	mov	r0, r4
    d9ea:	f7ff ffa1 	bl	d930 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    d9ee:	4b0f      	ldr	r3, [pc, #60]	; (da2c <prepare_multithreading+0x8c>)
    d9f0:	22b0      	movs	r2, #176	; 0xb0
    d9f2:	fb02 3204 	mla	r2, r2, r4, r3
    d9f6:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    d9fa:	4b08      	ldr	r3, [pc, #32]	; (da1c <prepare_multithreading+0x7c>)
    d9fc:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    da00:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
    da02:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
    da04:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    da08:	4a09      	ldr	r2, [pc, #36]	; (da30 <prepare_multithreading+0x90>)
    da0a:	eb02 1241 	add.w	r2, r2, r1, lsl #5
    da0e:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
    da12:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    da14:	3401      	adds	r4, #1
    da16:	e7e2      	b.n	d9de <prepare_multithreading+0x3e>
    da18:	20000838 	.word	0x20000838
    da1c:	20002aec 	.word	0x20002aec
    da20:	00015b3c 	.word	0x00015b3c
    da24:	0000da35 	.word	0x0000da35
    da28:	20003880 	.word	0x20003880
    da2c:	20000788 	.word	0x20000788
    da30:	20004200 	.word	0x20004200

0000da34 <bg_thread_main>:
{
    da34:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    da36:	4b0a      	ldr	r3, [pc, #40]	; (da60 <bg_thread_main+0x2c>)
    da38:	2201      	movs	r2, #1
    da3a:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    da3c:	2002      	movs	r0, #2
    da3e:	f7ff fe5b 	bl	d6f8 <z_sys_init_run_level>
	boot_banner();
    da42:	f001 fadd 	bl	f000 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    da46:	2003      	movs	r0, #3
    da48:	f7ff fe56 	bl	d6f8 <z_sys_init_run_level>
	z_init_static_threads();
    da4c:	f000 f968 	bl	dd20 <z_init_static_threads>
	main();
    da50:	f7f2 fce4 	bl	41c <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    da54:	4a03      	ldr	r2, [pc, #12]	; (da64 <bg_thread_main+0x30>)
    da56:	7b13      	ldrb	r3, [r2, #12]
    da58:	f023 0301 	bic.w	r3, r3, #1
    da5c:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    da5e:	bd08      	pop	{r3, pc}
    da60:	20002b57 	.word	0x20002b57
    da64:	20000838 	.word	0x20000838

0000da68 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    da68:	b508      	push	{r3, lr}
    da6a:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    da6c:	4a01      	ldr	r2, [pc, #4]	; (da74 <switch_to_main_thread+0xc>)
    da6e:	4802      	ldr	r0, [pc, #8]	; (da78 <switch_to_main_thread+0x10>)
    da70:	f7f6 fb96 	bl	41a0 <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    da74:	0000da35 	.word	0x0000da35
    da78:	20000838 	.word	0x20000838

0000da7c <z_bss_zero>:
{
    da7c:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    da7e:	4803      	ldr	r0, [pc, #12]	; (da8c <z_bss_zero+0x10>)
    da80:	4a03      	ldr	r2, [pc, #12]	; (da90 <z_bss_zero+0x14>)
    da82:	1a12      	subs	r2, r2, r0
    da84:	2100      	movs	r1, #0
    da86:	f003 fbd5 	bl	11234 <memset>
}
    da8a:	bd08      	pop	{r3, pc}
    da8c:	200004e0 	.word	0x200004e0
    da90:	20002d14 	.word	0x20002d14

0000da94 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    da94:	b500      	push	{lr}
    da96:	b0ad      	sub	sp, #180	; 0xb4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    da98:	f7f3 fd7a 	bl	1590 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    da9c:	4b1c      	ldr	r3, [pc, #112]	; (db10 <z_cstart+0x7c>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    da9e:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    daa2:	4c1c      	ldr	r4, [pc, #112]	; (db14 <z_cstart+0x80>)
    daa4:	6963      	ldr	r3, [r4, #20]
    daa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    daaa:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    daac:	23e0      	movs	r3, #224	; 0xe0
    daae:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    dab2:	2500      	movs	r5, #0
    dab4:	77e5      	strb	r5, [r4, #31]
    dab6:	7625      	strb	r5, [r4, #24]
    dab8:	7665      	strb	r5, [r4, #25]
    daba:	76a5      	strb	r5, [r4, #26]
    dabc:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    dac0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    dac2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    dac6:	6263      	str	r3, [r4, #36]	; 0x24
    dac8:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    dacc:	f7f6 ff5e 	bl	498c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    dad0:	f7f6 f9ea 	bl	3ea8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    dad4:	f04f 33ff 	mov.w	r3, #4294967295
    dad8:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    dada:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    dadc:	f7f7 f8c2 	bl	4c64 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    dae0:	f7f6 fffa 	bl	4ad8 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    dae4:	2401      	movs	r4, #1
    dae6:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    daea:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    daee:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    daf0:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    daf2:	4b09      	ldr	r3, [pc, #36]	; (db18 <z_cstart+0x84>)
    daf4:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    daf8:	f7ff fdf2 	bl	d6e0 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    dafc:	4628      	mov	r0, r5
    dafe:	f7ff fdfb 	bl	d6f8 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    db02:	4620      	mov	r0, r4
    db04:	f7ff fdf8 	bl	d6f8 <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    db08:	f7ff ff4a 	bl	d9a0 <prepare_multithreading>
    db0c:	f7ff ffac 	bl	da68 <switch_to_main_thread>
    db10:	20004a20 	.word	0x20004a20
    db14:	e000ed00 	.word	0xe000ed00
    db18:	20002aec 	.word	0x20002aec

0000db1c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    db1c:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    db1e:	4c06      	ldr	r4, [pc, #24]	; (db38 <statics_init+0x1c>)
    db20:	4b06      	ldr	r3, [pc, #24]	; (db3c <statics_init+0x20>)
    db22:	429c      	cmp	r4, r3
    db24:	d206      	bcs.n	db34 <statics_init+0x18>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    db26:	68a2      	ldr	r2, [r4, #8]
    db28:	6861      	ldr	r1, [r4, #4]
    db2a:	4620      	mov	r0, r4
    db2c:	f005 fdde 	bl	136ec <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    db30:	3414      	adds	r4, #20
    db32:	e7f5      	b.n	db20 <statics_init+0x4>
		}
	}
	return 0;
}
    db34:	2000      	movs	r0, #0
    db36:	bd10      	pop	{r4, pc}
    db38:	2000033c 	.word	0x2000033c
    db3c:	20000364 	.word	0x20000364

0000db40 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    db40:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    db42:	4c06      	ldr	r4, [pc, #24]	; (db5c <init_mem_slab_module+0x1c>)
	int rc = 0;
    db44:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    db46:	4b06      	ldr	r3, [pc, #24]	; (db60 <init_mem_slab_module+0x20>)
    db48:	429c      	cmp	r4, r3
    db4a:	d206      	bcs.n	db5a <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    db4c:	4620      	mov	r0, r4
    db4e:	f005 fe48 	bl	137e2 <create_free_list>
		if (rc < 0) {
    db52:	2800      	cmp	r0, #0
    db54:	db01      	blt.n	db5a <init_mem_slab_module+0x1a>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    db56:	341c      	adds	r4, #28
    db58:	e7f5      	b.n	db46 <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
    db5a:	bd10      	pop	{r4, pc}
    db5c:	200002e8 	.word	0x200002e8
    db60:	2000033c 	.word	0x2000033c

0000db64 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    db64:	b5f0      	push	{r4, r5, r6, r7, lr}
    db66:	b083      	sub	sp, #12
    db68:	460c      	mov	r4, r1
    db6a:	461f      	mov	r7, r3
	__asm__ volatile(
    db6c:	f04f 0320 	mov.w	r3, #32
    db70:	f3ef 8111 	mrs	r1, BASEPRI
    db74:	f383 8812 	msr	BASEPRI_MAX, r3
    db78:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    db7c:	6943      	ldr	r3, [r0, #20]
    db7e:	b16b      	cbz	r3, db9c <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
    db80:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    db82:	6943      	ldr	r3, [r0, #20]
    db84:	681b      	ldr	r3, [r3, #0]
    db86:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    db88:	6983      	ldr	r3, [r0, #24]
    db8a:	3301      	adds	r3, #1
    db8c:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    db8e:	2000      	movs	r0, #0
	__asm__ volatile(
    db90:	f381 8811 	msr	BASEPRI, r1
    db94:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    db98:	b003      	add	sp, #12
    db9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    db9c:	4616      	mov	r6, r2
    db9e:	f100 0508 	add.w	r5, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    dba2:	ea56 0307 	orrs.w	r3, r6, r7
    dba6:	d104      	bne.n	dbb2 <k_mem_slab_alloc+0x4e>
		*mem = NULL;
    dba8:	2300      	movs	r3, #0
    dbaa:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    dbac:	f06f 000b 	mvn.w	r0, #11
    dbb0:	e7ee      	b.n	db90 <k_mem_slab_alloc+0x2c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    dbb2:	e9cd 6700 	strd	r6, r7, [sp]
    dbb6:	4602      	mov	r2, r0
    dbb8:	4628      	mov	r0, r5
    dbba:	f000 fd89 	bl	e6d0 <z_pend_curr>
		if (result == 0) {
    dbbe:	2800      	cmp	r0, #0
    dbc0:	d1ea      	bne.n	db98 <k_mem_slab_alloc+0x34>
			*mem = _current->base.swap_data;
    dbc2:	4b02      	ldr	r3, [pc, #8]	; (dbcc <k_mem_slab_alloc+0x68>)
    dbc4:	689b      	ldr	r3, [r3, #8]
    dbc6:	695b      	ldr	r3, [r3, #20]
    dbc8:	6023      	str	r3, [r4, #0]
		return result;
    dbca:	e7e5      	b.n	db98 <k_mem_slab_alloc+0x34>
    dbcc:	20002aec 	.word	0x20002aec

0000dbd0 <z_thread_monitor_exit>:
	__asm__ volatile(
    dbd0:	f04f 0320 	mov.w	r3, #32
    dbd4:	f3ef 8111 	mrs	r1, BASEPRI
    dbd8:	f383 8812 	msr	BASEPRI_MAX, r3
    dbdc:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    dbe0:	4b0a      	ldr	r3, [pc, #40]	; (dc0c <z_thread_monitor_exit+0x3c>)
    dbe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    dbe4:	4283      	cmp	r3, r0
    dbe6:	d104      	bne.n	dbf2 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    dbe8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    dbea:	4b08      	ldr	r3, [pc, #32]	; (dc0c <z_thread_monitor_exit+0x3c>)
    dbec:	629a      	str	r2, [r3, #40]	; 0x28
    dbee:	e007      	b.n	dc00 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    dbf0:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    dbf2:	b113      	cbz	r3, dbfa <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    dbf4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    dbf6:	4282      	cmp	r2, r0
    dbf8:	d1fa      	bne.n	dbf0 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    dbfa:	b10b      	cbz	r3, dc00 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    dbfc:	6f02      	ldr	r2, [r0, #112]	; 0x70
    dbfe:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    dc00:	f381 8811 	msr	BASEPRI, r1
    dc04:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    dc08:	4770      	bx	lr
    dc0a:	bf00      	nop
    dc0c:	20002aec 	.word	0x20002aec

0000dc10 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    dc10:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    dc12:	4604      	mov	r4, r0
    dc14:	b140      	cbz	r0, dc28 <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
    dc16:	2220      	movs	r2, #32
    dc18:	f104 0074 	add.w	r0, r4, #116	; 0x74
    dc1c:	f003 fa72 	bl	11104 <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    dc20:	2000      	movs	r0, #0
    dc22:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    dc26:	bd10      	pop	{r4, pc}
		thread = _current;
    dc28:	4b01      	ldr	r3, [pc, #4]	; (dc30 <z_impl_k_thread_name_set+0x20>)
    dc2a:	689c      	ldr	r4, [r3, #8]
    dc2c:	e7f3      	b.n	dc16 <z_impl_k_thread_name_set+0x6>
    dc2e:	bf00      	nop
    dc30:	20002aec 	.word	0x20002aec

0000dc34 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    dc34:	b538      	push	{r3, r4, r5, lr}
    dc36:	4614      	mov	r4, r2
    dc38:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    dc3a:	ea54 0305 	orrs.w	r3, r4, r5
    dc3e:	d102      	bne.n	dc46 <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
    dc40:	f005 fe3a 	bl	138b8 <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    dc44:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    dc46:	462b      	mov	r3, r5
    dc48:	4902      	ldr	r1, [pc, #8]	; (dc54 <schedule_new_thread+0x20>)
    dc4a:	3018      	adds	r0, #24
    dc4c:	f000 ffea 	bl	ec24 <z_add_timeout>
    dc50:	e7f8      	b.n	dc44 <schedule_new_thread+0x10>
    dc52:	bf00      	nop
    dc54:	00013c15 	.word	0x00013c15

0000dc58 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    dc58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dc5c:	b085      	sub	sp, #20
    dc5e:	4604      	mov	r4, r0
    dc60:	460f      	mov	r7, r1
    dc62:	4615      	mov	r5, r2
    dc64:	461e      	mov	r6, r3
    dc66:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    dc6a:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    dc6e:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    dc72:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    dc76:	f100 0358 	add.w	r3, r0, #88	; 0x58
	list->head = (sys_dnode_t *)list;
    dc7a:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    dc7c:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    dc7e:	9b12      	ldr	r3, [sp, #72]	; 0x48
    dc80:	2204      	movs	r2, #4
    dc82:	9911      	ldr	r1, [sp, #68]	; 0x44
    dc84:	f005 fe1c 	bl	138c0 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    dc88:	462a      	mov	r2, r5
    dc8a:	4639      	mov	r1, r7
    dc8c:	4620      	mov	r0, r4
    dc8e:	f005 fdf9 	bl	13884 <setup_thread_stack>
    dc92:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    dc94:	f8cd 8008 	str.w	r8, [sp, #8]
    dc98:	f8cd 9004 	str.w	r9, [sp, #4]
    dc9c:	f8cd a000 	str.w	sl, [sp]
    dca0:	4633      	mov	r3, r6
    dca2:	4602      	mov	r2, r0
    dca4:	4639      	mov	r1, r7
    dca6:	4620      	mov	r0, r4
    dca8:	f7f6 fa2a 	bl	4100 <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    dcac:	2300      	movs	r3, #0
    dcae:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    dcb0:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    dcb2:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    dcb6:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    dcba:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    dcbe:	f04f 0320 	mov.w	r3, #32
    dcc2:	f3ef 8211 	mrs	r2, BASEPRI
    dcc6:	f383 8812 	msr	BASEPRI_MAX, r3
    dcca:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    dcce:	4b13      	ldr	r3, [pc, #76]	; (dd1c <z_setup_new_thread+0xc4>)
    dcd0:	6a99      	ldr	r1, [r3, #40]	; 0x28
    dcd2:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    dcd4:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    dcd6:	f382 8811 	msr	BASEPRI, r2
    dcda:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    dcde:	f1bb 0f00 	cmp.w	fp, #0
    dce2:	d013      	beq.n	dd0c <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
    dce4:	221f      	movs	r2, #31
    dce6:	4659      	mov	r1, fp
    dce8:	f104 0074 	add.w	r0, r4, #116	; 0x74
    dcec:	f003 fa0a 	bl	11104 <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    dcf0:	2300      	movs	r3, #0
    dcf2:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    dcf6:	4b09      	ldr	r3, [pc, #36]	; (dd1c <z_setup_new_thread+0xc4>)
    dcf8:	689b      	ldr	r3, [r3, #8]
    dcfa:	b15b      	cbz	r3, dd14 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    dcfc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    dd00:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
#ifdef CONFIG_THREAD_RUNTIME_STATS
	memset(&new_thread->rt_stats, 0, sizeof(new_thread->rt_stats));
#endif

	return stack_ptr;
}
    dd04:	4628      	mov	r0, r5
    dd06:	b005      	add	sp, #20
    dd08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    dd0c:	2300      	movs	r3, #0
    dd0e:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    dd12:	e7f0      	b.n	dcf6 <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    dd14:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    dd18:	e7f4      	b.n	dd04 <z_setup_new_thread+0xac>
    dd1a:	bf00      	nop
    dd1c:	20002aec 	.word	0x20002aec

0000dd20 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    dd20:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    dd24:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    dd26:	4c23      	ldr	r4, [pc, #140]	; (ddb4 <z_init_static_threads+0x94>)
    dd28:	4b23      	ldr	r3, [pc, #140]	; (ddb8 <z_init_static_threads+0x98>)
    dd2a:	429c      	cmp	r4, r3
    dd2c:	d215      	bcs.n	dd5a <z_init_static_threads+0x3a>
		z_setup_new_thread(
    dd2e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    dd30:	9305      	str	r3, [sp, #20]
    dd32:	6a23      	ldr	r3, [r4, #32]
    dd34:	9304      	str	r3, [sp, #16]
    dd36:	69e3      	ldr	r3, [r4, #28]
    dd38:	9303      	str	r3, [sp, #12]
    dd3a:	69a3      	ldr	r3, [r4, #24]
    dd3c:	9302      	str	r3, [sp, #8]
    dd3e:	6963      	ldr	r3, [r4, #20]
    dd40:	9301      	str	r3, [sp, #4]
    dd42:	6923      	ldr	r3, [r4, #16]
    dd44:	9300      	str	r3, [sp, #0]
    dd46:	68e3      	ldr	r3, [r4, #12]
    dd48:	68a2      	ldr	r2, [r4, #8]
    dd4a:	6861      	ldr	r1, [r4, #4]
    dd4c:	6820      	ldr	r0, [r4, #0]
    dd4e:	f7ff ff83 	bl	dc58 <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    dd52:	6823      	ldr	r3, [r4, #0]
    dd54:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    dd56:	3430      	adds	r4, #48	; 0x30
    dd58:	e7e6      	b.n	dd28 <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    dd5a:	f000 fb71 	bl	e440 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    dd5e:	4c15      	ldr	r4, [pc, #84]	; (ddb4 <z_init_static_threads+0x94>)
    dd60:	e01b      	b.n	dd9a <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
    dd62:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    dd64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    dd68:	ea4f 79e3 	mov.w	r9, r3, asr #31
		} else {
			return (t * to_hz + off) / from_hz;
    dd6c:	ea4f 31c9 	mov.w	r1, r9, lsl #15
    dd70:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    dd74:	03d8      	lsls	r0, r3, #15
    dd76:	f240 35e7 	movw	r5, #999	; 0x3e7
    dd7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    dd7e:	2300      	movs	r3, #0
    dd80:	1940      	adds	r0, r0, r5
    dd82:	f04f 0500 	mov.w	r5, #0
    dd86:	eb45 0101 	adc.w	r1, r5, r1
    dd8a:	f7f2 f9b9 	bl	100 <__aeabi_uldivmod>
    dd8e:	4602      	mov	r2, r0
    dd90:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    dd92:	4630      	mov	r0, r6
    dd94:	f7ff ff4e 	bl	dc34 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
    dd98:	3430      	adds	r4, #48	; 0x30
    dd9a:	4b07      	ldr	r3, [pc, #28]	; (ddb8 <z_init_static_threads+0x98>)
    dd9c:	429c      	cmp	r4, r3
    dd9e:	d204      	bcs.n	ddaa <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    dda0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    dda2:	f1b3 3fff 	cmp.w	r3, #4294967295
    dda6:	d0f7      	beq.n	dd98 <z_init_static_threads+0x78>
    dda8:	e7db      	b.n	dd62 <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
    ddaa:	f000 fd47 	bl	e83c <k_sched_unlock>
}
    ddae:	b006      	add	sp, #24
    ddb0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    ddb4:	200002e8 	.word	0x200002e8
    ddb8:	200002e8 	.word	0x200002e8

0000ddbc <pm_save_idle>:
 *
 * Sets the kernel data structure idle field to either a positive value or
 * K_FOREVER.
 */
static void pm_save_idle(void)
{
    ddbc:	b508      	push	{r3, lr}
#ifdef CONFIG_PM
	int32_t ticks = z_get_next_timeout_expiry();
    ddbe:	f006 f877 	bl	13eb0 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
    ddc2:	4b04      	ldr	r3, [pc, #16]	; (ddd4 <pm_save_idle+0x18>)
    ddc4:	6198      	str	r0, [r3, #24]
	 * before exiting. This is because the kernel does not do its own idle
	 * processing in those cases i.e. skips k_cpu_idle(). The kernel's
	 * idle processing re-enables interrupts which is essential for
	 * the kernel's scheduling logic.
	 */
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
    ddc6:	f7f5 ff39 	bl	3c3c <pm_system_suspend>
    ddca:	b100      	cbz	r0, ddce <pm_save_idle+0x12>
		k_cpu_idle();
	}
#endif
}
    ddcc:	bd08      	pop	{r3, pc}
	arch_cpu_idle();
    ddce:	f7f6 f871 	bl	3eb4 <arch_cpu_idle>
    ddd2:	e7fb      	b.n	ddcc <pm_save_idle+0x10>
    ddd4:	20002aec 	.word	0x20002aec

0000ddd8 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    ddd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dddc:	b083      	sub	sp, #12
    ddde:	4604      	mov	r4, r0
    dde0:	461d      	mov	r5, r3
	__asm__ volatile(
    dde2:	f04f 0320 	mov.w	r3, #32
    dde6:	f3ef 8711 	mrs	r7, BASEPRI
    ddea:	f383 8812 	msr	BASEPRI_MAX, r3
    ddee:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    ddf2:	68c1      	ldr	r1, [r0, #12]
    ddf4:	b999      	cbnz	r1, de1e <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    ddf6:	2900      	cmp	r1, #0
    ddf8:	d14f      	bne.n	de9a <z_impl_k_mutex_lock+0xc2>
    ddfa:	4b3a      	ldr	r3, [pc, #232]	; (dee4 <z_impl_k_mutex_lock+0x10c>)
    ddfc:	689b      	ldr	r3, [r3, #8]
    ddfe:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    de02:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    de04:	3101      	adds	r1, #1
    de06:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    de08:	4b36      	ldr	r3, [pc, #216]	; (dee4 <z_impl_k_mutex_lock+0x10c>)
    de0a:	689b      	ldr	r3, [r3, #8]
    de0c:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    de0e:	f387 8811 	msr	BASEPRI, r7
    de12:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    de16:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    de18:	b003      	add	sp, #12
    de1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    de1e:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    de20:	6882      	ldr	r2, [r0, #8]
    de22:	4b30      	ldr	r3, [pc, #192]	; (dee4 <z_impl_k_mutex_lock+0x10c>)
    de24:	689b      	ldr	r3, [r3, #8]
    de26:	429a      	cmp	r2, r3
    de28:	d0e5      	beq.n	ddf6 <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    de2a:	ea55 0106 	orrs.w	r1, r5, r6
    de2e:	bf0c      	ite	eq
    de30:	f04f 0801 	moveq.w	r8, #1
    de34:	f04f 0800 	movne.w	r8, #0
    de38:	d031      	beq.n	de9e <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
    de3a:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    de3e:	4649      	mov	r1, r9
    de40:	f993 000e 	ldrsb.w	r0, [r3, #14]
    de44:	f005 fd7b 	bl	1393e <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    de48:	4581      	cmp	r9, r0
    de4a:	dc2f      	bgt.n	deac <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
    de4c:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    de50:	9600      	str	r6, [sp, #0]
    de52:	9501      	str	r5, [sp, #4]
    de54:	4622      	mov	r2, r4
    de56:	4639      	mov	r1, r7
    de58:	4823      	ldr	r0, [pc, #140]	; (dee8 <z_impl_k_mutex_lock+0x110>)
    de5a:	f000 fc39 	bl	e6d0 <z_pend_curr>
	if (got_mutex == 0) {
    de5e:	2800      	cmp	r0, #0
    de60:	d0da      	beq.n	de18 <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
    de62:	f04f 0320 	mov.w	r3, #32
    de66:	f3ef 8511 	mrs	r5, BASEPRI
    de6a:	f383 8812 	msr	BASEPRI_MAX, r3
    de6e:	f3bf 8f6f 	isb	sy
	return list->head == list;
    de72:	6823      	ldr	r3, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    de74:	42a3      	cmp	r3, r4
    de76:	d01f      	beq.n	deb8 <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    de78:	b1f3      	cbz	r3, deb8 <z_impl_k_mutex_lock+0xe0>
    de7a:	6921      	ldr	r1, [r4, #16]
    de7c:	f993 000e 	ldrsb.w	r0, [r3, #14]
    de80:	f005 fd5d 	bl	1393e <new_prio_for_inheritance>
    de84:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    de86:	4620      	mov	r0, r4
    de88:	f005 fd64 	bl	13954 <adjust_owner_prio>
    de8c:	b9b0      	cbnz	r0, debc <z_impl_k_mutex_lock+0xe4>
    de8e:	f1b9 0f00 	cmp.w	r9, #0
    de92:	d015      	beq.n	dec0 <z_impl_k_mutex_lock+0xe8>
    de94:	f04f 0801 	mov.w	r8, #1
    de98:	e012      	b.n	dec0 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    de9a:	6923      	ldr	r3, [r4, #16]
    de9c:	e7b1      	b.n	de02 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
    de9e:	f387 8811 	msr	BASEPRI, r7
    dea2:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    dea6:	f06f 000f 	mvn.w	r0, #15
    deaa:	e7b5      	b.n	de18 <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
    deac:	4601      	mov	r1, r0
    deae:	4620      	mov	r0, r4
    deb0:	f005 fd50 	bl	13954 <adjust_owner_prio>
    deb4:	4681      	mov	r9, r0
    deb6:	e7cb      	b.n	de50 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    deb8:	6921      	ldr	r1, [r4, #16]
    deba:	e7e4      	b.n	de86 <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    debc:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    dec0:	f1b8 0f00 	cmp.w	r8, #0
    dec4:	d106      	bne.n	ded4 <z_impl_k_mutex_lock+0xfc>
    dec6:	f385 8811 	msr	BASEPRI, r5
    deca:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    dece:	f06f 000a 	mvn.w	r0, #10
    ded2:	e7a1      	b.n	de18 <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
    ded4:	4629      	mov	r1, r5
    ded6:	4804      	ldr	r0, [pc, #16]	; (dee8 <z_impl_k_mutex_lock+0x110>)
    ded8:	f000 fa96 	bl	e408 <z_reschedule>
	return -EAGAIN;
    dedc:	f06f 000a 	mvn.w	r0, #10
    dee0:	e79a      	b.n	de18 <z_impl_k_mutex_lock+0x40>
    dee2:	bf00      	nop
    dee4:	20002aec 	.word	0x20002aec
    dee8:	20002b18 	.word	0x20002b18

0000deec <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    deec:	6882      	ldr	r2, [r0, #8]
    deee:	2a00      	cmp	r2, #0
    def0:	d035      	beq.n	df5e <z_impl_k_mutex_unlock+0x72>
{
    def2:	b538      	push	{r3, r4, r5, lr}
    def4:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    def6:	4b1d      	ldr	r3, [pc, #116]	; (df6c <z_impl_k_mutex_unlock+0x80>)
    def8:	689b      	ldr	r3, [r3, #8]
    defa:	429a      	cmp	r2, r3
    defc:	d132      	bne.n	df64 <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    defe:	7bda      	ldrb	r2, [r3, #15]
    df00:	3a01      	subs	r2, #1
    df02:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    df04:	68c3      	ldr	r3, [r0, #12]
    df06:	2b01      	cmp	r3, #1
    df08:	d905      	bls.n	df16 <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    df0a:	3b01      	subs	r3, #1
    df0c:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    df0e:	f000 fc95 	bl	e83c <k_sched_unlock>

	return 0;
    df12:	2000      	movs	r0, #0
}
    df14:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    df16:	f04f 0320 	mov.w	r3, #32
    df1a:	f3ef 8511 	mrs	r5, BASEPRI
    df1e:	f383 8812 	msr	BASEPRI_MAX, r3
    df22:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    df26:	6901      	ldr	r1, [r0, #16]
    df28:	f005 fd14 	bl	13954 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    df2c:	4620      	mov	r0, r4
    df2e:	f005 ff17 	bl	13d60 <z_unpend_first_thread>
	mutex->owner = new_owner;
    df32:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    df34:	b160      	cbz	r0, df50 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    df36:	f990 300e 	ldrsb.w	r3, [r0, #14]
    df3a:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    df3c:	2300      	movs	r3, #0
    df3e:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    df42:	f005 fe4b 	bl	13bdc <z_ready_thread>
		z_reschedule(&lock, key);
    df46:	4629      	mov	r1, r5
    df48:	4809      	ldr	r0, [pc, #36]	; (df70 <z_impl_k_mutex_unlock+0x84>)
    df4a:	f000 fa5d 	bl	e408 <z_reschedule>
    df4e:	e7de      	b.n	df0e <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    df50:	2300      	movs	r3, #0
    df52:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
    df54:	f385 8811 	msr	BASEPRI, r5
    df58:	f3bf 8f6f 	isb	sy
    df5c:	e7d7      	b.n	df0e <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    df5e:	f06f 0015 	mvn.w	r0, #21
}
    df62:	4770      	bx	lr
		return -EPERM;
    df64:	f04f 30ff 	mov.w	r0, #4294967295
    df68:	e7d4      	b.n	df14 <z_impl_k_mutex_unlock+0x28>
    df6a:	bf00      	nop
    df6c:	20002aec 	.word	0x20002aec
    df70:	20002b18 	.word	0x20002b18

0000df74 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    df74:	b5d0      	push	{r4, r6, r7, lr}
    df76:	b082      	sub	sp, #8
    df78:	4601      	mov	r1, r0
    df7a:	4616      	mov	r6, r2
    df7c:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    df7e:	4602      	mov	r2, r0
	__asm__ volatile(
    df80:	f04f 0320 	mov.w	r3, #32
    df84:	f3ef 8411 	mrs	r4, BASEPRI
    df88:	f383 8812 	msr	BASEPRI_MAX, r3
    df8c:	f3bf 8f6f 	isb	sy
    df90:	f852 0b08 	ldr.w	r0, [r2], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    df94:	b188      	cbz	r0, dfba <z_impl_k_queue_get+0x46>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    df96:	6803      	ldr	r3, [r0, #0]
    df98:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
    df9c:	600b      	str	r3, [r1, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
    df9e:	684a      	ldr	r2, [r1, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    dfa0:	4290      	cmp	r0, r2
    dfa2:	d008      	beq.n	dfb6 <z_impl_k_queue_get+0x42>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    dfa4:	2101      	movs	r1, #1
    dfa6:	f005 fd55 	bl	13a54 <z_queue_node_peek>
	__asm__ volatile(
    dfaa:	f384 8811 	msr	BASEPRI, r4
    dfae:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    dfb2:	b002      	add	sp, #8
    dfb4:	bdd0      	pop	{r4, r6, r7, pc}
	list->tail = node;
    dfb6:	604b      	str	r3, [r1, #4]
}
    dfb8:	e7f4      	b.n	dfa4 <z_impl_k_queue_get+0x30>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    dfba:	ea56 0307 	orrs.w	r3, r6, r7
    dfbe:	d00a      	beq.n	dfd6 <z_impl_k_queue_get+0x62>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    dfc0:	e9cd 6700 	strd	r6, r7, [sp]
    dfc4:	4621      	mov	r1, r4
    dfc6:	4610      	mov	r0, r2
    dfc8:	f000 fb82 	bl	e6d0 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    dfcc:	b948      	cbnz	r0, dfe2 <z_impl_k_queue_get+0x6e>
    dfce:	4b06      	ldr	r3, [pc, #24]	; (dfe8 <z_impl_k_queue_get+0x74>)
    dfd0:	689b      	ldr	r3, [r3, #8]
    dfd2:	6958      	ldr	r0, [r3, #20]
    dfd4:	e7ed      	b.n	dfb2 <z_impl_k_queue_get+0x3e>
    dfd6:	f384 8811 	msr	BASEPRI, r4
    dfda:	f3bf 8f6f 	isb	sy
		return NULL;
    dfde:	2000      	movs	r0, #0
    dfe0:	e7e7      	b.n	dfb2 <z_impl_k_queue_get+0x3e>
	return (ret != 0) ? NULL : _current->base.swap_data;
    dfe2:	2000      	movs	r0, #0
    dfe4:	e7e5      	b.n	dfb2 <z_impl_k_queue_get+0x3e>
    dfe6:	bf00      	nop
    dfe8:	20002aec 	.word	0x20002aec

0000dfec <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    dfec:	b538      	push	{r3, r4, r5, lr}
    dfee:	4604      	mov	r4, r0
	__asm__ volatile(
    dff0:	f04f 0320 	mov.w	r3, #32
    dff4:	f3ef 8511 	mrs	r5, BASEPRI
    dff8:	f383 8812 	msr	BASEPRI_MAX, r3
    dffc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    e000:	f005 feae 	bl	13d60 <z_unpend_first_thread>

	if (thread != NULL) {
    e004:	b148      	cbz	r0, e01a <z_impl_k_sem_give+0x2e>
    e006:	2200      	movs	r2, #0
    e008:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    e00c:	f005 fde6 	bl	13bdc <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    e010:	4629      	mov	r1, r5
    e012:	4807      	ldr	r0, [pc, #28]	; (e030 <z_impl_k_sem_give+0x44>)
    e014:	f000 f9f8 	bl	e408 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    e018:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    e01a:	68a3      	ldr	r3, [r4, #8]
    e01c:	68e2      	ldr	r2, [r4, #12]
    e01e:	4293      	cmp	r3, r2
    e020:	d003      	beq.n	e02a <z_impl_k_sem_give+0x3e>
    e022:	2201      	movs	r2, #1
    e024:	4413      	add	r3, r2
    e026:	60a3      	str	r3, [r4, #8]
}
    e028:	e7f2      	b.n	e010 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    e02a:	2200      	movs	r2, #0
    e02c:	e7fa      	b.n	e024 <z_impl_k_sem_give+0x38>
    e02e:	bf00      	nop
    e030:	20002b18 	.word	0x20002b18

0000e034 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    e034:	b530      	push	{r4, r5, lr}
    e036:	b083      	sub	sp, #12
    e038:	461d      	mov	r5, r3
    e03a:	f04f 0320 	mov.w	r3, #32
    e03e:	f3ef 8111 	mrs	r1, BASEPRI
    e042:	f383 8812 	msr	BASEPRI_MAX, r3
    e046:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    e04a:	6883      	ldr	r3, [r0, #8]
    e04c:	b143      	cbz	r3, e060 <z_impl_k_sem_take+0x2c>
		sem->count--;
    e04e:	3b01      	subs	r3, #1
    e050:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    e052:	f381 8811 	msr	BASEPRI, r1
    e056:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    e05a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    e05c:	b003      	add	sp, #12
    e05e:	bd30      	pop	{r4, r5, pc}
    e060:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    e062:	ea54 0305 	orrs.w	r3, r4, r5
    e066:	d006      	beq.n	e076 <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    e068:	e9cd 4500 	strd	r4, r5, [sp]
    e06c:	4602      	mov	r2, r0
    e06e:	4805      	ldr	r0, [pc, #20]	; (e084 <z_impl_k_sem_take+0x50>)
    e070:	f000 fb2e 	bl	e6d0 <z_pend_curr>
	return ret;
    e074:	e7f2      	b.n	e05c <z_impl_k_sem_take+0x28>
    e076:	f381 8811 	msr	BASEPRI, r1
    e07a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    e07e:	f06f 000f 	mvn.w	r0, #15
    e082:	e7eb      	b.n	e05c <z_impl_k_sem_take+0x28>
    e084:	20002b18 	.word	0x20002b18

0000e088 <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
    e088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e08a:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
    e08c:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    e08e:	f013 0f02 	tst.w	r3, #2
    e092:	d15b      	bne.n	e14c <submit_to_queue_locked+0xc4>
    e094:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    e096:	f013 0f04 	tst.w	r3, #4
    e09a:	d15c      	bne.n	e156 <submit_to_queue_locked+0xce>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
    e09c:	680b      	ldr	r3, [r1, #0]
    e09e:	2b00      	cmp	r3, #0
    e0a0:	d037      	beq.n	e112 <submit_to_queue_locked+0x8a>
	return (*flagp & BIT(bit)) != 0U;
    e0a2:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    e0a4:	f013 0f01 	tst.w	r3, #1
    e0a8:	d036      	beq.n	e118 <submit_to_queue_locked+0x90>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
    e0aa:	68a3      	ldr	r3, [r4, #8]
    e0ac:	602b      	str	r3, [r5, #0]
			ret = 2;
    e0ae:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
    e0b0:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
    e0b2:	2e00      	cmp	r6, #0
    e0b4:	d03e      	beq.n	e134 <submit_to_queue_locked+0xac>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    e0b6:	4b29      	ldr	r3, [pc, #164]	; (e15c <submit_to_queue_locked+0xd4>)
    e0b8:	689b      	ldr	r3, [r3, #8]
    e0ba:	42b3      	cmp	r3, r6
    e0bc:	d02e      	beq.n	e11c <submit_to_queue_locked+0x94>
    e0be:	2300      	movs	r3, #0
    e0c0:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
    e0c2:	f8d6 30c8 	ldr.w	r3, [r6, #200]	; 0xc8
    e0c6:	f3c3 0180 	ubfx	r1, r3, #2, #1
    e0ca:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    e0ce:	f013 0f01 	tst.w	r3, #1
    e0d2:	d032      	beq.n	e13a <submit_to_queue_locked+0xb2>
	} else if (draining && !chained) {
    e0d4:	b101      	cbz	r1, e0d8 <submit_to_queue_locked+0x50>
    e0d6:	b39a      	cbz	r2, e140 <submit_to_queue_locked+0xb8>
	} else if (plugged && !draining) {
    e0d8:	b100      	cbz	r0, e0dc <submit_to_queue_locked+0x54>
    e0da:	b3a1      	cbz	r1, e146 <submit_to_queue_locked+0xbe>
	parent->next = child;
    e0dc:	2300      	movs	r3, #0
    e0de:	6023      	str	r3, [r4, #0]
	return list->tail;
    e0e0:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
Z_GENLIST_APPEND(slist, snode)
    e0e4:	b30b      	cbz	r3, e12a <submit_to_queue_locked+0xa2>
	parent->next = child;
    e0e6:	601c      	str	r4, [r3, #0]
	list->tail = node;
    e0e8:	f8c6 40b4 	str.w	r4, [r6, #180]	; 0xb4
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    e0ec:	2200      	movs	r2, #0
    e0ee:	4611      	mov	r1, r2
    e0f0:	f106 00b8 	add.w	r0, r6, #184	; 0xb8
    e0f4:	f005 fe70 	bl	13dd8 <z_sched_wake>
		ret = 1;
    e0f8:	2001      	movs	r0, #1

		if (rc < 0) {
    e0fa:	2800      	cmp	r0, #0
    e0fc:	db06      	blt.n	e10c <submit_to_queue_locked+0x84>
	*flagp |= BIT(bit);
    e0fe:	68e3      	ldr	r3, [r4, #12]
    e100:	f043 0304 	orr.w	r3, r3, #4
    e104:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
    e106:	682b      	ldr	r3, [r5, #0]
    e108:	60a3      	str	r3, [r4, #8]
    e10a:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
    e10c:	2800      	cmp	r0, #0
    e10e:	dc21      	bgt.n	e154 <submit_to_queue_locked+0xcc>
    e110:	e01e      	b.n	e150 <submit_to_queue_locked+0xc8>
			*queuep = work->queue;
    e112:	6883      	ldr	r3, [r0, #8]
    e114:	600b      	str	r3, [r1, #0]
    e116:	e7c4      	b.n	e0a2 <submit_to_queue_locked+0x1a>
		ret = 1;
    e118:	2701      	movs	r7, #1
    e11a:	e7c9      	b.n	e0b0 <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    e11c:	f005 fbc4 	bl	138a8 <k_is_in_isr>
    e120:	b908      	cbnz	r0, e126 <submit_to_queue_locked+0x9e>
    e122:	2301      	movs	r3, #1
    e124:	e7cc      	b.n	e0c0 <submit_to_queue_locked+0x38>
    e126:	2300      	movs	r3, #0
    e128:	e7ca      	b.n	e0c0 <submit_to_queue_locked+0x38>
    e12a:	f8c6 40b4 	str.w	r4, [r6, #180]	; 0xb4
	list->head = node;
    e12e:	f8c6 40b0 	str.w	r4, [r6, #176]	; 0xb0
}
    e132:	e7db      	b.n	e0ec <submit_to_queue_locked+0x64>
		return -EINVAL;
    e134:	f06f 0015 	mvn.w	r0, #21
    e138:	e7df      	b.n	e0fa <submit_to_queue_locked+0x72>
		ret = -ENODEV;
    e13a:	f06f 0012 	mvn.w	r0, #18
    e13e:	e7dc      	b.n	e0fa <submit_to_queue_locked+0x72>
		ret = -EBUSY;
    e140:	f06f 000f 	mvn.w	r0, #15
    e144:	e7d9      	b.n	e0fa <submit_to_queue_locked+0x72>
		ret = -EBUSY;
    e146:	f06f 000f 	mvn.w	r0, #15
    e14a:	e7d6      	b.n	e0fa <submit_to_queue_locked+0x72>
		ret = -EBUSY;
    e14c:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
    e150:	2300      	movs	r3, #0
    e152:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
    e154:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
    e156:	2000      	movs	r0, #0
    e158:	e7fa      	b.n	e150 <submit_to_queue_locked+0xc8>
    e15a:	bf00      	nop
    e15c:	20002aec 	.word	0x20002aec

0000e160 <finalize_cancel_locked>:
{
    e160:	b570      	push	{r4, r5, r6, lr}
    e162:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
    e164:	68c3      	ldr	r3, [r0, #12]
    e166:	f023 0302 	bic.w	r3, r3, #2
    e16a:	60c3      	str	r3, [r0, #12]
	return list->head;
    e16c:	4b19      	ldr	r3, [pc, #100]	; (e1d4 <finalize_cancel_locked+0x74>)
    e16e:	6818      	ldr	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    e170:	b1e8      	cbz	r0, e1ae <finalize_cancel_locked+0x4e>
    e172:	4604      	mov	r4, r0
Z_GENLIST_PEEK_NEXT(slist, snode)
    e174:	b100      	cbz	r0, e178 <finalize_cancel_locked+0x18>
	return node->next;
    e176:	6804      	ldr	r4, [r0, #0]
    e178:	2600      	movs	r6, #0
    e17a:	e01d      	b.n	e1b8 <finalize_cancel_locked+0x58>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    e17c:	b15e      	cbz	r6, e196 <finalize_cancel_locked+0x36>
	return node->next;
    e17e:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
    e180:	6033      	str	r3, [r6, #0]
	return list->tail;
    e182:	4b14      	ldr	r3, [pc, #80]	; (e1d4 <finalize_cancel_locked+0x74>)
    e184:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    e186:	4298      	cmp	r0, r3
    e188:	d00e      	beq.n	e1a8 <finalize_cancel_locked+0x48>
	parent->next = child;
    e18a:	2300      	movs	r3, #0
    e18c:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    e190:	f7ff ff2c 	bl	dfec <z_impl_k_sem_give>
}
    e194:	e015      	b.n	e1c2 <finalize_cancel_locked+0x62>
	return node->next;
    e196:	6802      	ldr	r2, [r0, #0]
	list->head = node;
    e198:	4b0e      	ldr	r3, [pc, #56]	; (e1d4 <finalize_cancel_locked+0x74>)
    e19a:	601a      	str	r2, [r3, #0]
	return list->tail;
    e19c:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    e19e:	4298      	cmp	r0, r3
    e1a0:	d1f3      	bne.n	e18a <finalize_cancel_locked+0x2a>
	list->tail = node;
    e1a2:	4b0c      	ldr	r3, [pc, #48]	; (e1d4 <finalize_cancel_locked+0x74>)
    e1a4:	605a      	str	r2, [r3, #4]
}
    e1a6:	e7f0      	b.n	e18a <finalize_cancel_locked+0x2a>
	list->tail = node;
    e1a8:	4b0a      	ldr	r3, [pc, #40]	; (e1d4 <finalize_cancel_locked+0x74>)
    e1aa:	605e      	str	r6, [r3, #4]
}
    e1ac:	e7ed      	b.n	e18a <finalize_cancel_locked+0x2a>
    e1ae:	4604      	mov	r4, r0
    e1b0:	e7e2      	b.n	e178 <finalize_cancel_locked+0x18>
    e1b2:	4623      	mov	r3, r4
    e1b4:	4620      	mov	r0, r4
    e1b6:	461c      	mov	r4, r3
    e1b8:	b150      	cbz	r0, e1d0 <finalize_cancel_locked+0x70>
		if (wc->work == work) {
    e1ba:	6843      	ldr	r3, [r0, #4]
    e1bc:	42ab      	cmp	r3, r5
    e1be:	d0dd      	beq.n	e17c <finalize_cancel_locked+0x1c>
			prev = &wc->node;
    e1c0:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    e1c2:	2c00      	cmp	r4, #0
    e1c4:	d0f5      	beq.n	e1b2 <finalize_cancel_locked+0x52>
    e1c6:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    e1c8:	2c00      	cmp	r4, #0
    e1ca:	d0f3      	beq.n	e1b4 <finalize_cancel_locked+0x54>
	return node->next;
    e1cc:	6823      	ldr	r3, [r4, #0]
    e1ce:	e7f1      	b.n	e1b4 <finalize_cancel_locked+0x54>
}
    e1d0:	bd70      	pop	{r4, r5, r6, pc}
    e1d2:	bf00      	nop
    e1d4:	20002b18 	.word	0x20002b18

0000e1d8 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    e1d8:	b5f0      	push	{r4, r5, r6, r7, lr}
    e1da:	b085      	sub	sp, #20
    e1dc:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
    e1de:	e016      	b.n	e20e <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
    e1e0:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
	*flagp &= ~BIT(bit);
    e1e4:	f023 0204 	bic.w	r2, r3, #4
    e1e8:	f8c5 20c8 	str.w	r2, [r5, #200]	; 0xc8
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
    e1ec:	f013 0f04 	tst.w	r3, #4
    e1f0:	d158      	bne.n	e2a4 <work_queue_main+0xcc>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
    e1f2:	2300      	movs	r3, #0
    e1f4:	9302      	str	r3, [sp, #8]
    e1f6:	f04f 32ff 	mov.w	r2, #4294967295
    e1fa:	f04f 33ff 	mov.w	r3, #4294967295
    e1fe:	e9cd 2300 	strd	r2, r3, [sp]
    e202:	f105 02b8 	add.w	r2, r5, #184	; 0xb8
    e206:	4631      	mov	r1, r6
    e208:	482e      	ldr	r0, [pc, #184]	; (e2c4 <work_queue_main+0xec>)
    e20a:	f000 fc97 	bl	eb3c <z_sched_wait>
	__asm__ volatile(
    e20e:	f04f 0320 	mov.w	r3, #32
    e212:	f3ef 8611 	mrs	r6, BASEPRI
    e216:	f383 8812 	msr	BASEPRI_MAX, r3
    e21a:	f3bf 8f6f 	isb	sy
	return list->head;
    e21e:	f8d5 40b0 	ldr.w	r4, [r5, #176]	; 0xb0
Z_GENLIST_GET(slist, snode)
    e222:	2c00      	cmp	r4, #0
    e224:	d0dc      	beq.n	e1e0 <work_queue_main+0x8>
	return node->next;
    e226:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    e228:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
	return list->tail;
    e22c:	f8d5 20b4 	ldr.w	r2, [r5, #180]	; 0xb4
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    e230:	4294      	cmp	r4, r2
    e232:	d034      	beq.n	e29e <work_queue_main+0xc6>
	*flagp |= BIT(bit);
    e234:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    e238:	f043 0302 	orr.w	r3, r3, #2
    e23c:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
    e240:	68e3      	ldr	r3, [r4, #12]
    e242:	f043 0301 	orr.w	r3, r3, #1
	*flagp &= ~BIT(bit);
    e246:	f023 0304 	bic.w	r3, r3, #4
    e24a:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
    e24c:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
    e24e:	2c00      	cmp	r4, #0
    e250:	d0cf      	beq.n	e1f2 <work_queue_main+0x1a>
	__asm__ volatile(
    e252:	f386 8811 	msr	BASEPRI, r6
    e256:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
    e25a:	4620      	mov	r0, r4
    e25c:	4798      	blx	r3
	__asm__ volatile(
    e25e:	f04f 0320 	mov.w	r3, #32
    e262:	f3ef 8611 	mrs	r6, BASEPRI
    e266:	f383 8812 	msr	BASEPRI_MAX, r3
    e26a:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    e26e:	68e3      	ldr	r3, [r4, #12]
    e270:	f023 0301 	bic.w	r3, r3, #1
    e274:	60e3      	str	r3, [r4, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    e276:	f013 0f02 	tst.w	r3, #2
    e27a:	d11e      	bne.n	e2ba <work_queue_main+0xe2>
	*flagp &= ~BIT(bit);
    e27c:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    e280:	f023 0302 	bic.w	r3, r3, #2
    e284:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
	return (*flagp & BIT(bit)) != 0U;
    e288:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
    e28c:	f386 8811 	msr	BASEPRI, r6
    e290:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
    e294:	2b00      	cmp	r3, #0
    e296:	d1ba      	bne.n	e20e <work_queue_main+0x36>
	z_impl_k_yield();
    e298:	f000 fb52 	bl	e940 <z_impl_k_yield>
}
    e29c:	e7b7      	b.n	e20e <work_queue_main+0x36>
	list->tail = node;
    e29e:	f8c5 30b4 	str.w	r3, [r5, #180]	; 0xb4
}
    e2a2:	e7c7      	b.n	e234 <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    e2a4:	f105 07c0 	add.w	r7, r5, #192	; 0xc0
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    e2a8:	2200      	movs	r2, #0
    e2aa:	2101      	movs	r1, #1
    e2ac:	4638      	mov	r0, r7
    e2ae:	f005 fd93 	bl	13dd8 <z_sched_wake>
    e2b2:	2800      	cmp	r0, #0
    e2b4:	d1f8      	bne.n	e2a8 <work_queue_main+0xd0>
		k_work_handler_t handler = NULL;
    e2b6:	2300      	movs	r3, #0
    e2b8:	e7c9      	b.n	e24e <work_queue_main+0x76>
				finalize_cancel_locked(work);
    e2ba:	4620      	mov	r0, r4
    e2bc:	f7ff ff50 	bl	e160 <finalize_cancel_locked>
    e2c0:	e7dc      	b.n	e27c <work_queue_main+0xa4>
    e2c2:	bf00      	nop
    e2c4:	20002b18 	.word	0x20002b18

0000e2c8 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    e2c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    e2ca:	b089      	sub	sp, #36	; 0x24
    e2cc:	4604      	mov	r4, r0
    e2ce:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
    e2d0:	2000      	movs	r0, #0
    e2d2:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
	list->tail = NULL;
    e2d6:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    e2da:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
	list->head = (sys_dnode_t *)list;
    e2de:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = (sys_dnode_t *)list;
    e2e2:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    e2e6:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
    e2ea:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
    e2ee:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    e2f2:	b1fd      	cbz	r5, e334 <k_work_queue_start+0x6c>
    e2f4:	7928      	ldrb	r0, [r5, #4]
    e2f6:	b9f8      	cbnz	r0, e338 <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    e2f8:	2001      	movs	r0, #1
	*flagp = flags;
    e2fa:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    e2fe:	f04f 36ff 	mov.w	r6, #4294967295
    e302:	f04f 37ff 	mov.w	r7, #4294967295
    e306:	e9cd 6706 	strd	r6, r7, [sp, #24]
    e30a:	2000      	movs	r0, #0
    e30c:	9004      	str	r0, [sp, #16]
    e30e:	9303      	str	r3, [sp, #12]
    e310:	9002      	str	r0, [sp, #8]
    e312:	9001      	str	r0, [sp, #4]
    e314:	9400      	str	r4, [sp, #0]
    e316:	4b0a      	ldr	r3, [pc, #40]	; (e340 <k_work_queue_start+0x78>)
    e318:	4620      	mov	r0, r4
    e31a:	f005 fadc 	bl	138d6 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    e31e:	b125      	cbz	r5, e32a <k_work_queue_start+0x62>
    e320:	6829      	ldr	r1, [r5, #0]
    e322:	b111      	cbz	r1, e32a <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
    e324:	4620      	mov	r0, r4
    e326:	f7ff fc73 	bl	dc10 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    e32a:	4620      	mov	r0, r4
    e32c:	f005 fac4 	bl	138b8 <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    e330:	b009      	add	sp, #36	; 0x24
    e332:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
    e334:	2001      	movs	r0, #1
    e336:	e7e0      	b.n	e2fa <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
    e338:	f240 1001 	movw	r0, #257	; 0x101
    e33c:	e7dd      	b.n	e2fa <k_work_queue_start+0x32>
    e33e:	bf00      	nop
    e340:	0000e1d9 	.word	0x0000e1d9

0000e344 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
    e344:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    e346:	f1b3 3fff 	cmp.w	r3, #4294967295
    e34a:	bf08      	it	eq
    e34c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    e350:	d100      	bne.n	e354 <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
    e352:	bd38      	pop	{r3, r4, r5, pc}
    e354:	4902      	ldr	r1, [pc, #8]	; (e360 <add_thread_timeout+0x1c>)
    e356:	3018      	adds	r0, #24
    e358:	f000 fc64 	bl	ec24 <z_add_timeout>
    e35c:	e7f9      	b.n	e352 <add_thread_timeout+0xe>
    e35e:	bf00      	nop
    e360:	00013c15 	.word	0x00013c15

0000e364 <z_reset_time_slice>:
{
    e364:	b508      	push	{r3, lr}
	if (slice_time != 0) {
    e366:	4b08      	ldr	r3, [pc, #32]	; (e388 <z_reset_time_slice+0x24>)
    e368:	681b      	ldr	r3, [r3, #0]
    e36a:	b903      	cbnz	r3, e36e <z_reset_time_slice+0xa>
}
    e36c:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    e36e:	f7fa f915 	bl	859c <sys_clock_elapsed>
    e372:	4603      	mov	r3, r0
    e374:	4a04      	ldr	r2, [pc, #16]	; (e388 <z_reset_time_slice+0x24>)
    e376:	6810      	ldr	r0, [r2, #0]
    e378:	4403      	add	r3, r0
    e37a:	4a04      	ldr	r2, [pc, #16]	; (e38c <z_reset_time_slice+0x28>)
    e37c:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    e37e:	2100      	movs	r1, #0
    e380:	f005 fdac 	bl	13edc <z_set_timeout_expiry>
}
    e384:	e7f2      	b.n	e36c <z_reset_time_slice+0x8>
    e386:	bf00      	nop
    e388:	20002b28 	.word	0x20002b28
    e38c:	20002aec 	.word	0x20002aec

0000e390 <k_sched_time_slice_set>:
{
    e390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e394:	4606      	mov	r6, r0
    e396:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
    e398:	2300      	movs	r3, #0
	__asm__ volatile(
    e39a:	f04f 0220 	mov.w	r2, #32
    e39e:	f3ef 8711 	mrs	r7, BASEPRI
    e3a2:	f382 8812 	msr	BASEPRI_MAX, r2
    e3a6:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    e3aa:	e009      	b.n	e3c0 <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
    e3ac:	4b13      	ldr	r3, [pc, #76]	; (e3fc <k_sched_time_slice_set+0x6c>)
    e3ae:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
    e3b2:	f7ff ffd7 	bl	e364 <z_reset_time_slice>
	__asm__ volatile(
    e3b6:	f387 8811 	msr	BASEPRI, r7
    e3ba:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    e3be:	2301      	movs	r3, #1
    e3c0:	b9cb      	cbnz	r3, e3f6 <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
    e3c2:	2300      	movs	r3, #0
    e3c4:	4a0e      	ldr	r2, [pc, #56]	; (e400 <k_sched_time_slice_set+0x70>)
    e3c6:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    e3c8:	0c75      	lsrs	r5, r6, #17
    e3ca:	03f4      	lsls	r4, r6, #15
    e3cc:	f240 30e7 	movw	r0, #999	; 0x3e7
    e3d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    e3d4:	2300      	movs	r3, #0
    e3d6:	1820      	adds	r0, r4, r0
    e3d8:	f04f 0100 	mov.w	r1, #0
    e3dc:	eb45 0101 	adc.w	r1, r5, r1
    e3e0:	f7f1 fe8e 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    e3e4:	4b07      	ldr	r3, [pc, #28]	; (e404 <k_sched_time_slice_set+0x74>)
    e3e6:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    e3e8:	2e00      	cmp	r6, #0
    e3ea:	dddf      	ble.n	e3ac <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
    e3ec:	2802      	cmp	r0, #2
    e3ee:	bfb8      	it	lt
    e3f0:	2002      	movlt	r0, #2
    e3f2:	6018      	str	r0, [r3, #0]
    e3f4:	e7da      	b.n	e3ac <k_sched_time_slice_set+0x1c>
}
    e3f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e3fa:	bf00      	nop
    e3fc:	20002b24 	.word	0x20002b24
    e400:	20002aec 	.word	0x20002aec
    e404:	20002b28 	.word	0x20002b28

0000e408 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    e408:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    e40a:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    e40c:	b921      	cbnz	r1, e418 <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    e40e:	f3ef 8305 	mrs	r3, IPSR
    e412:	b913      	cbnz	r3, e41a <z_reschedule+0x12>
    e414:	2101      	movs	r1, #1
    e416:	e000      	b.n	e41a <z_reschedule+0x12>
    e418:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    e41a:	f011 0f01 	tst.w	r1, #1
    e41e:	d007      	beq.n	e430 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
    e420:	4b06      	ldr	r3, [pc, #24]	; (e43c <z_reschedule+0x34>)
    e422:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    e424:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    e426:	429a      	cmp	r2, r3
    e428:	d002      	beq.n	e430 <z_reschedule+0x28>
	ret = arch_swap(key);
    e42a:	f7f5 fe11 	bl	4050 <arch_swap>
		z_swap(lock, key);
    e42e:	e003      	b.n	e438 <z_reschedule+0x30>
    e430:	f380 8811 	msr	BASEPRI, r0
    e434:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    e438:	bd08      	pop	{r3, pc}
    e43a:	bf00      	nop
    e43c:	20002aec 	.word	0x20002aec

0000e440 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    e440:	2300      	movs	r3, #0
	__asm__ volatile(
    e442:	f04f 0220 	mov.w	r2, #32
    e446:	f3ef 8111 	mrs	r1, BASEPRI
    e44a:	f382 8812 	msr	BASEPRI_MAX, r2
    e44e:	f3bf 8f6f 	isb	sy
    e452:	b953      	cbnz	r3, e46a <k_sched_lock+0x2a>
	--_current->base.sched_locked;
    e454:	4b05      	ldr	r3, [pc, #20]	; (e46c <k_sched_lock+0x2c>)
    e456:	689a      	ldr	r2, [r3, #8]
    e458:	7bd3      	ldrb	r3, [r2, #15]
    e45a:	3b01      	subs	r3, #1
    e45c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    e45e:	f381 8811 	msr	BASEPRI, r1
    e462:	f3bf 8f6f 	isb	sy
    e466:	2301      	movs	r3, #1
    e468:	e7f3      	b.n	e452 <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    e46a:	4770      	bx	lr
    e46c:	20002aec 	.word	0x20002aec

0000e470 <update_cache>:
{
    e470:	b538      	push	{r3, r4, r5, lr}
    e472:	4604      	mov	r4, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
    e474:	480f      	ldr	r0, [pc, #60]	; (e4b4 <update_cache+0x44>)
    e476:	f005 fbaa 	bl	13bce <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    e47a:	4605      	mov	r5, r0
    e47c:	b170      	cbz	r0, e49c <update_cache+0x2c>
	if (preempt_ok != 0) {
    e47e:	b984      	cbnz	r4, e4a2 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    e480:	4b0d      	ldr	r3, [pc, #52]	; (e4b8 <update_cache+0x48>)
    e482:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    e484:	7b5a      	ldrb	r2, [r3, #13]
    e486:	f012 0f1f 	tst.w	r2, #31
    e48a:	d10a      	bne.n	e4a2 <update_cache+0x32>
	return node->next != NULL;
    e48c:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    e48e:	b942      	cbnz	r2, e4a2 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    e490:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    e492:	2a7f      	cmp	r2, #127	; 0x7f
    e494:	d905      	bls.n	e4a2 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    e496:	4a08      	ldr	r2, [pc, #32]	; (e4b8 <update_cache+0x48>)
    e498:	61d3      	str	r3, [r2, #28]
    e49a:	e00a      	b.n	e4b2 <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    e49c:	4b06      	ldr	r3, [pc, #24]	; (e4b8 <update_cache+0x48>)
    e49e:	68dd      	ldr	r5, [r3, #12]
    e4a0:	e7ed      	b.n	e47e <update_cache+0xe>
		if (thread != _current) {
    e4a2:	4b05      	ldr	r3, [pc, #20]	; (e4b8 <update_cache+0x48>)
    e4a4:	689b      	ldr	r3, [r3, #8]
    e4a6:	42ab      	cmp	r3, r5
    e4a8:	d001      	beq.n	e4ae <update_cache+0x3e>
			z_reset_time_slice();
    e4aa:	f7ff ff5b 	bl	e364 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    e4ae:	4b02      	ldr	r3, [pc, #8]	; (e4b8 <update_cache+0x48>)
    e4b0:	61dd      	str	r5, [r3, #28]
}
    e4b2:	bd38      	pop	{r3, r4, r5, pc}
    e4b4:	20002b0c 	.word	0x20002b0c
    e4b8:	20002aec 	.word	0x20002aec

0000e4bc <move_thread_to_end_of_prio_q>:
{
    e4bc:	b538      	push	{r3, r4, r5, lr}
    e4be:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    e4c0:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    e4c2:	f990 300d 	ldrsb.w	r3, [r0, #13]
    e4c6:	2b00      	cmp	r3, #0
    e4c8:	db28      	blt.n	e51c <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
    e4ca:	7b6b      	ldrb	r3, [r5, #13]
    e4cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    e4d0:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    e4d2:	4b1a      	ldr	r3, [pc, #104]	; (e53c <move_thread_to_end_of_prio_q+0x80>)
    e4d4:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e4d8:	429c      	cmp	r4, r3
    e4da:	d02d      	beq.n	e538 <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e4dc:	b16c      	cbz	r4, e4fa <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    e4de:	4621      	mov	r1, r4
    e4e0:	4628      	mov	r0, r5
    e4e2:	f005 fb0b 	bl	13afc <z_sched_prio_cmp>
    e4e6:	2800      	cmp	r0, #0
    e4e8:	dc20      	bgt.n	e52c <move_thread_to_end_of_prio_q+0x70>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    e4ea:	b134      	cbz	r4, e4fa <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    e4ec:	4b13      	ldr	r3, [pc, #76]	; (e53c <move_thread_to_end_of_prio_q+0x80>)
    e4ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e4f0:	429c      	cmp	r4, r3
    e4f2:	d002      	beq.n	e4fa <move_thread_to_end_of_prio_q+0x3e>
    e4f4:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e4f6:	2c00      	cmp	r4, #0
    e4f8:	d1f0      	bne.n	e4dc <move_thread_to_end_of_prio_q+0x20>
	sys_dnode_t *const tail = list->tail;
    e4fa:	4b10      	ldr	r3, [pc, #64]	; (e53c <move_thread_to_end_of_prio_q+0x80>)
    e4fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    e4fe:	f103 0120 	add.w	r1, r3, #32
    e502:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    e504:	606a      	str	r2, [r5, #4]
	tail->next = node;
    e506:	6015      	str	r5, [r2, #0]
	list->tail = node;
    e508:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    e50a:	4b0c      	ldr	r3, [pc, #48]	; (e53c <move_thread_to_end_of_prio_q+0x80>)
    e50c:	6898      	ldr	r0, [r3, #8]
    e50e:	42a8      	cmp	r0, r5
    e510:	bf14      	ite	ne
    e512:	2000      	movne	r0, #0
    e514:	2001      	moveq	r0, #1
    e516:	f7ff ffab 	bl	e470 <update_cache>
}
    e51a:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    e51c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    e520:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
    e522:	4601      	mov	r1, r0
    e524:	4806      	ldr	r0, [pc, #24]	; (e540 <move_thread_to_end_of_prio_q+0x84>)
    e526:	f005 fb27 	bl	13b78 <z_priq_dumb_remove>
}
    e52a:	e7ce      	b.n	e4ca <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    e52c:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    e52e:	606b      	str	r3, [r5, #4]
	node->next = successor;
    e530:	602c      	str	r4, [r5, #0]
	prev->next = node;
    e532:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    e534:	6065      	str	r5, [r4, #4]
}
    e536:	e7e8      	b.n	e50a <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e538:	2400      	movs	r4, #0
    e53a:	e7cf      	b.n	e4dc <move_thread_to_end_of_prio_q+0x20>
    e53c:	20002aec 	.word	0x20002aec
    e540:	20002b0c 	.word	0x20002b0c

0000e544 <z_time_slice>:
{
    e544:	b510      	push	{r4, lr}
	__asm__ volatile(
    e546:	f04f 0320 	mov.w	r3, #32
    e54a:	f3ef 8411 	mrs	r4, BASEPRI
    e54e:	f383 8812 	msr	BASEPRI_MAX, r3
    e552:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    e556:	4b1c      	ldr	r3, [pc, #112]	; (e5c8 <z_time_slice+0x84>)
    e558:	689b      	ldr	r3, [r3, #8]
    e55a:	4a1c      	ldr	r2, [pc, #112]	; (e5cc <z_time_slice+0x88>)
    e55c:	6812      	ldr	r2, [r2, #0]
    e55e:	4293      	cmp	r3, r2
    e560:	d01d      	beq.n	e59e <z_time_slice+0x5a>
	pending_current = NULL;
    e562:	4a1a      	ldr	r2, [pc, #104]	; (e5cc <z_time_slice+0x88>)
    e564:	2100      	movs	r1, #0
    e566:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
    e568:	4a19      	ldr	r2, [pc, #100]	; (e5d0 <z_time_slice+0x8c>)
    e56a:	6812      	ldr	r2, [r2, #0]
    e56c:	b322      	cbz	r2, e5b8 <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    e56e:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
    e570:	2a7f      	cmp	r2, #127	; 0x7f
    e572:	d821      	bhi.n	e5b8 <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
    e574:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
    e576:	f012 0f1f 	tst.w	r2, #31
    e57a:	d11d      	bne.n	e5b8 <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    e57c:	f993 100e 	ldrsb.w	r1, [r3, #14]
    e580:	4a14      	ldr	r2, [pc, #80]	; (e5d4 <z_time_slice+0x90>)
    e582:	6812      	ldr	r2, [r2, #0]
    e584:	4291      	cmp	r1, r2
    e586:	db17      	blt.n	e5b8 <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
    e588:	4a13      	ldr	r2, [pc, #76]	; (e5d8 <z_time_slice+0x94>)
    e58a:	4293      	cmp	r3, r2
    e58c:	d014      	beq.n	e5b8 <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
    e58e:	4a0e      	ldr	r2, [pc, #56]	; (e5c8 <z_time_slice+0x84>)
    e590:	6912      	ldr	r2, [r2, #16]
    e592:	4282      	cmp	r2, r0
    e594:	dd0a      	ble.n	e5ac <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
    e596:	1a10      	subs	r0, r2, r0
    e598:	4b0b      	ldr	r3, [pc, #44]	; (e5c8 <z_time_slice+0x84>)
    e59a:	6118      	str	r0, [r3, #16]
    e59c:	e00f      	b.n	e5be <z_time_slice+0x7a>
		z_reset_time_slice();
    e59e:	f7ff fee1 	bl	e364 <z_reset_time_slice>
	__asm__ volatile(
    e5a2:	f384 8811 	msr	BASEPRI, r4
    e5a6:	f3bf 8f6f 	isb	sy
		return;
    e5aa:	e00c      	b.n	e5c6 <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
    e5ac:	4618      	mov	r0, r3
    e5ae:	f7ff ff85 	bl	e4bc <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
    e5b2:	f7ff fed7 	bl	e364 <z_reset_time_slice>
    e5b6:	e002      	b.n	e5be <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
    e5b8:	4b03      	ldr	r3, [pc, #12]	; (e5c8 <z_time_slice+0x84>)
    e5ba:	2200      	movs	r2, #0
    e5bc:	611a      	str	r2, [r3, #16]
    e5be:	f384 8811 	msr	BASEPRI, r4
    e5c2:	f3bf 8f6f 	isb	sy
}
    e5c6:	bd10      	pop	{r4, pc}
    e5c8:	20002aec 	.word	0x20002aec
    e5cc:	20002b20 	.word	0x20002b20
    e5d0:	20002b28 	.word	0x20002b28
    e5d4:	20002b24 	.word	0x20002b24
    e5d8:	20000788 	.word	0x20000788

0000e5dc <ready_thread>:
{
    e5dc:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    e5de:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    e5e0:	f990 200d 	ldrsb.w	r2, [r0, #13]
    e5e4:	2a00      	cmp	r2, #0
    e5e6:	db2d      	blt.n	e644 <ready_thread+0x68>
    e5e8:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    e5ea:	f013 0f1f 	tst.w	r3, #31
    e5ee:	d105      	bne.n	e5fc <ready_thread+0x20>
	return node->next != NULL;
    e5f0:	6982      	ldr	r2, [r0, #24]
    e5f2:	b10a      	cbz	r2, e5f8 <ready_thread+0x1c>
    e5f4:	2200      	movs	r2, #0
    e5f6:	e002      	b.n	e5fe <ready_thread+0x22>
    e5f8:	2201      	movs	r2, #1
    e5fa:	e000      	b.n	e5fe <ready_thread+0x22>
    e5fc:	2200      	movs	r2, #0
    e5fe:	b30a      	cbz	r2, e644 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
    e600:	f063 037f 	orn	r3, r3, #127	; 0x7f
    e604:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    e606:	4b14      	ldr	r3, [pc, #80]	; (e658 <ready_thread+0x7c>)
    e608:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e60c:	429d      	cmp	r5, r3
    e60e:	d020      	beq.n	e652 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e610:	b16d      	cbz	r5, e62e <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
    e612:	4629      	mov	r1, r5
    e614:	4620      	mov	r0, r4
    e616:	f005 fa71 	bl	13afc <z_sched_prio_cmp>
    e61a:	2800      	cmp	r0, #0
    e61c:	dc13      	bgt.n	e646 <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    e61e:	b135      	cbz	r5, e62e <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
    e620:	4b0d      	ldr	r3, [pc, #52]	; (e658 <ready_thread+0x7c>)
    e622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e624:	429d      	cmp	r5, r3
    e626:	d002      	beq.n	e62e <ready_thread+0x52>
    e628:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e62a:	2d00      	cmp	r5, #0
    e62c:	d1f0      	bne.n	e610 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
    e62e:	4b0a      	ldr	r3, [pc, #40]	; (e658 <ready_thread+0x7c>)
    e630:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    e632:	f103 0120 	add.w	r1, r3, #32
    e636:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    e638:	6062      	str	r2, [r4, #4]
	tail->next = node;
    e63a:	6014      	str	r4, [r2, #0]
	list->tail = node;
    e63c:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    e63e:	2000      	movs	r0, #0
    e640:	f7ff ff16 	bl	e470 <update_cache>
}
    e644:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
    e646:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    e648:	6063      	str	r3, [r4, #4]
	node->next = successor;
    e64a:	6025      	str	r5, [r4, #0]
	prev->next = node;
    e64c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    e64e:	606c      	str	r4, [r5, #4]
}
    e650:	e7f5      	b.n	e63e <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e652:	2500      	movs	r5, #0
    e654:	e7dc      	b.n	e610 <ready_thread+0x34>
    e656:	bf00      	nop
    e658:	20002aec 	.word	0x20002aec

0000e65c <z_sched_start>:
{
    e65c:	b510      	push	{r4, lr}
	__asm__ volatile(
    e65e:	f04f 0320 	mov.w	r3, #32
    e662:	f3ef 8411 	mrs	r4, BASEPRI
    e666:	f383 8812 	msr	BASEPRI_MAX, r3
    e66a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    e66e:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    e670:	f013 0f04 	tst.w	r3, #4
    e674:	d104      	bne.n	e680 <z_sched_start+0x24>
	__asm__ volatile(
    e676:	f384 8811 	msr	BASEPRI, r4
    e67a:	f3bf 8f6f 	isb	sy
}
    e67e:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    e680:	f023 0304 	bic.w	r3, r3, #4
    e684:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    e686:	f7ff ffa9 	bl	e5dc <ready_thread>
	z_reschedule(&sched_spinlock, key);
    e68a:	4621      	mov	r1, r4
    e68c:	4801      	ldr	r0, [pc, #4]	; (e694 <z_sched_start+0x38>)
    e68e:	f7ff febb 	bl	e408 <z_reschedule>
    e692:	e7f4      	b.n	e67e <z_sched_start+0x22>
    e694:	20002b24 	.word	0x20002b24

0000e698 <unready_thread>:
{
    e698:	b510      	push	{r4, lr}
    e69a:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    e69c:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    e69e:	f990 300d 	ldrsb.w	r3, [r0, #13]
    e6a2:	2b00      	cmp	r3, #0
    e6a4:	db08      	blt.n	e6b8 <unready_thread+0x20>
	update_cache(thread == _current);
    e6a6:	4b08      	ldr	r3, [pc, #32]	; (e6c8 <unready_thread+0x30>)
    e6a8:	6898      	ldr	r0, [r3, #8]
    e6aa:	42a0      	cmp	r0, r4
    e6ac:	bf14      	ite	ne
    e6ae:	2000      	movne	r0, #0
    e6b0:	2001      	moveq	r0, #1
    e6b2:	f7ff fedd 	bl	e470 <update_cache>
}
    e6b6:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    e6b8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    e6bc:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
    e6be:	4601      	mov	r1, r0
    e6c0:	4802      	ldr	r0, [pc, #8]	; (e6cc <unready_thread+0x34>)
    e6c2:	f005 fa59 	bl	13b78 <z_priq_dumb_remove>
}
    e6c6:	e7ee      	b.n	e6a6 <unready_thread+0xe>
    e6c8:	20002aec 	.word	0x20002aec
    e6cc:	20002b0c 	.word	0x20002b0c

0000e6d0 <z_pend_curr>:
{
    e6d0:	b510      	push	{r4, lr}
    e6d2:	460c      	mov	r4, r1
    e6d4:	4611      	mov	r1, r2
	pending_current = _current;
    e6d6:	4b06      	ldr	r3, [pc, #24]	; (e6f0 <z_pend_curr+0x20>)
    e6d8:	6898      	ldr	r0, [r3, #8]
    e6da:	4b06      	ldr	r3, [pc, #24]	; (e6f4 <z_pend_curr+0x24>)
    e6dc:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    e6de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    e6e2:	f005 faf5 	bl	13cd0 <pend>
    e6e6:	4620      	mov	r0, r4
    e6e8:	f7f5 fcb2 	bl	4050 <arch_swap>
}
    e6ec:	bd10      	pop	{r4, pc}
    e6ee:	bf00      	nop
    e6f0:	20002aec 	.word	0x20002aec
    e6f4:	20002b20 	.word	0x20002b20

0000e6f8 <z_set_prio>:
{
    e6f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e6fc:	4604      	mov	r4, r0
    e6fe:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    e700:	2300      	movs	r3, #0
	__asm__ volatile(
    e702:	f04f 0220 	mov.w	r2, #32
    e706:	f3ef 8611 	mrs	r6, BASEPRI
    e70a:	f382 8812 	msr	BASEPRI_MAX, r2
    e70e:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    e712:	4698      	mov	r8, r3
    e714:	e008      	b.n	e728 <z_set_prio+0x30>
		if (need_sched) {
    e716:	f012 0801 	ands.w	r8, r2, #1
    e71a:	d111      	bne.n	e740 <z_set_prio+0x48>
			thread->base.prio = prio;
    e71c:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
    e71e:	f386 8811 	msr	BASEPRI, r6
    e722:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    e726:	2301      	movs	r3, #1
    e728:	461a      	mov	r2, r3
    e72a:	2b00      	cmp	r3, #0
    e72c:	d13d      	bne.n	e7aa <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
    e72e:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    e730:	f013 0f1f 	tst.w	r3, #31
    e734:	d1ef      	bne.n	e716 <z_set_prio+0x1e>
	return node->next != NULL;
    e736:	69a1      	ldr	r1, [r4, #24]
    e738:	2900      	cmp	r1, #0
    e73a:	d1ec      	bne.n	e716 <z_set_prio+0x1e>
    e73c:	2201      	movs	r2, #1
    e73e:	e7ea      	b.n	e716 <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    e740:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    e744:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
    e746:	f8df 906c 	ldr.w	r9, [pc, #108]	; e7b4 <z_set_prio+0xbc>
    e74a:	4621      	mov	r1, r4
    e74c:	4648      	mov	r0, r9
    e74e:	f005 fa13 	bl	13b78 <z_priq_dumb_remove>
				thread->base.prio = prio;
    e752:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    e754:	7b63      	ldrb	r3, [r4, #13]
    e756:	f063 037f 	orn	r3, r3, #127	; 0x7f
    e75a:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    e75c:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e760:	454d      	cmp	r5, r9
    e762:	d020      	beq.n	e7a6 <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e764:	b16d      	cbz	r5, e782 <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    e766:	4629      	mov	r1, r5
    e768:	4620      	mov	r0, r4
    e76a:	f005 f9c7 	bl	13afc <z_sched_prio_cmp>
    e76e:	2800      	cmp	r0, #0
    e770:	dc13      	bgt.n	e79a <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    e772:	b135      	cbz	r5, e782 <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
    e774:	4b0e      	ldr	r3, [pc, #56]	; (e7b0 <z_set_prio+0xb8>)
    e776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e778:	429d      	cmp	r5, r3
    e77a:	d002      	beq.n	e782 <z_set_prio+0x8a>
    e77c:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e77e:	2d00      	cmp	r5, #0
    e780:	d1f0      	bne.n	e764 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
    e782:	4b0b      	ldr	r3, [pc, #44]	; (e7b0 <z_set_prio+0xb8>)
    e784:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    e786:	f103 0120 	add.w	r1, r3, #32
    e78a:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    e78c:	6062      	str	r2, [r4, #4]
	tail->next = node;
    e78e:	6014      	str	r4, [r2, #0]
	list->tail = node;
    e790:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    e792:	2001      	movs	r0, #1
    e794:	f7ff fe6c 	bl	e470 <update_cache>
    e798:	e7c1      	b.n	e71e <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
    e79a:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    e79c:	6063      	str	r3, [r4, #4]
	node->next = successor;
    e79e:	6025      	str	r5, [r4, #0]
	prev->next = node;
    e7a0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    e7a2:	606c      	str	r4, [r5, #4]
}
    e7a4:	e7f5      	b.n	e792 <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e7a6:	2500      	movs	r5, #0
    e7a8:	e7dc      	b.n	e764 <z_set_prio+0x6c>
}
    e7aa:	4640      	mov	r0, r8
    e7ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e7b0:	20002aec 	.word	0x20002aec
    e7b4:	20002b0c 	.word	0x20002b0c

0000e7b8 <z_impl_k_thread_suspend>:
{
    e7b8:	b538      	push	{r3, r4, r5, lr}
    e7ba:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    e7bc:	3018      	adds	r0, #24
    e7be:	f005 fb59 	bl	13e74 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    e7c2:	2300      	movs	r3, #0
	__asm__ volatile(
    e7c4:	f04f 0220 	mov.w	r2, #32
    e7c8:	f3ef 8511 	mrs	r5, BASEPRI
    e7cc:	f382 8812 	msr	BASEPRI_MAX, r2
    e7d0:	f3bf 8f6f 	isb	sy
    e7d4:	e010      	b.n	e7f8 <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    e7d6:	7b63      	ldrb	r3, [r4, #13]
    e7d8:	f043 0310 	orr.w	r3, r3, #16
    e7dc:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    e7de:	4b15      	ldr	r3, [pc, #84]	; (e834 <z_impl_k_thread_suspend+0x7c>)
    e7e0:	6898      	ldr	r0, [r3, #8]
    e7e2:	42a0      	cmp	r0, r4
    e7e4:	bf14      	ite	ne
    e7e6:	2000      	movne	r0, #0
    e7e8:	2001      	moveq	r0, #1
    e7ea:	f7ff fe41 	bl	e470 <update_cache>
	__asm__ volatile(
    e7ee:	f385 8811 	msr	BASEPRI, r5
    e7f2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    e7f6:	2301      	movs	r3, #1
    e7f8:	b963      	cbnz	r3, e814 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    e7fa:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    e7fc:	f994 300d 	ldrsb.w	r3, [r4, #13]
    e800:	2b00      	cmp	r3, #0
    e802:	dae8      	bge.n	e7d6 <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    e804:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    e808:	7362      	strb	r2, [r4, #13]
		_priq_run_remove(pq, thread);
    e80a:	4621      	mov	r1, r4
    e80c:	480a      	ldr	r0, [pc, #40]	; (e838 <z_impl_k_thread_suspend+0x80>)
    e80e:	f005 f9b3 	bl	13b78 <z_priq_dumb_remove>
}
    e812:	e7e0      	b.n	e7d6 <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    e814:	4b07      	ldr	r3, [pc, #28]	; (e834 <z_impl_k_thread_suspend+0x7c>)
    e816:	689b      	ldr	r3, [r3, #8]
    e818:	42a3      	cmp	r3, r4
    e81a:	d000      	beq.n	e81e <z_impl_k_thread_suspend+0x66>
}
    e81c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    e81e:	f04f 0320 	mov.w	r3, #32
    e822:	f3ef 8011 	mrs	r0, BASEPRI
    e826:	f383 8812 	msr	BASEPRI_MAX, r3
    e82a:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    e82e:	f005 f98e 	bl	13b4e <z_reschedule_irqlock>
    e832:	e7f3      	b.n	e81c <z_impl_k_thread_suspend+0x64>
    e834:	20002aec 	.word	0x20002aec
    e838:	20002b0c 	.word	0x20002b0c

0000e83c <k_sched_unlock>:

void k_sched_unlock(void)
{
    e83c:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    e83e:	2300      	movs	r3, #0
    e840:	f04f 0220 	mov.w	r2, #32
    e844:	f3ef 8411 	mrs	r4, BASEPRI
    e848:	f382 8812 	msr	BASEPRI_MAX, r2
    e84c:	f3bf 8f6f 	isb	sy
    e850:	b96b      	cbnz	r3, e86e <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    e852:	4b0c      	ldr	r3, [pc, #48]	; (e884 <k_sched_unlock+0x48>)
    e854:	689a      	ldr	r2, [r3, #8]
    e856:	7bd3      	ldrb	r3, [r2, #15]
    e858:	3301      	adds	r3, #1
    e85a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    e85c:	2000      	movs	r0, #0
    e85e:	f7ff fe07 	bl	e470 <update_cache>
	__asm__ volatile(
    e862:	f384 8811 	msr	BASEPRI, r4
    e866:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    e86a:	2301      	movs	r3, #1
    e86c:	e7f0      	b.n	e850 <k_sched_unlock+0x14>
	__asm__ volatile(
    e86e:	f04f 0320 	mov.w	r3, #32
    e872:	f3ef 8011 	mrs	r0, BASEPRI
    e876:	f383 8812 	msr	BASEPRI_MAX, r3
    e87a:	f3bf 8f6f 	isb	sy
    e87e:	f005 f966 	bl	13b4e <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
    e882:	bd10      	pop	{r4, pc}
    e884:	20002aec 	.word	0x20002aec

0000e888 <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    e888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    e88a:	7b43      	ldrb	r3, [r0, #13]
    e88c:	f013 0f08 	tst.w	r3, #8
    e890:	d145      	bne.n	e91e <end_thread+0x96>
    e892:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    e894:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
    e898:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    e89c:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    e89e:	f013 0f80 	tst.w	r3, #128	; 0x80
    e8a2:	d114      	bne.n	e8ce <end_thread+0x46>
			dequeue_thread(&_kernel.ready_q.runq, thread);
		}
		if (thread->base.pended_on != NULL) {
    e8a4:	68ab      	ldr	r3, [r5, #8]
    e8a6:	b15b      	cbz	r3, e8c0 <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    e8a8:	4628      	mov	r0, r5
    e8aa:	f005 f925 	bl	13af8 <pended_on_thread>
    e8ae:	4629      	mov	r1, r5
    e8b0:	f005 f962 	bl	13b78 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    e8b4:	7b6b      	ldrb	r3, [r5, #13]
    e8b6:	f023 0302 	bic.w	r3, r3, #2
    e8ba:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    e8bc:	2300      	movs	r3, #0
    e8be:	60ab      	str	r3, [r5, #8]
    e8c0:	f105 0018 	add.w	r0, r5, #24
    e8c4:	f005 fad6 	bl	13e74 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    e8c8:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    e8cc:	e01c      	b.n	e908 <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    e8ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    e8d2:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
    e8d4:	4601      	mov	r1, r0
    e8d6:	4812      	ldr	r0, [pc, #72]	; (e920 <end_thread+0x98>)
    e8d8:	f005 f94e 	bl	13b78 <z_priq_dumb_remove>
}
    e8dc:	e7e2      	b.n	e8a4 <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    e8de:	4620      	mov	r0, r4
    e8e0:	f005 f90a 	bl	13af8 <pended_on_thread>
    e8e4:	4621      	mov	r1, r4
    e8e6:	f005 f947 	bl	13b78 <z_priq_dumb_remove>
    e8ea:	7b63      	ldrb	r3, [r4, #13]
    e8ec:	f023 0302 	bic.w	r3, r3, #2
    e8f0:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    e8f2:	2600      	movs	r6, #0
    e8f4:	60a6      	str	r6, [r4, #8]
    e8f6:	f104 0018 	add.w	r0, r4, #24
    e8fa:	f005 fabb 	bl	13e74 <z_abort_timeout>
    e8fe:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    e902:	4620      	mov	r0, r4
    e904:	f7ff fe6a 	bl	e5dc <ready_thread>
	return list->head == list;
    e908:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e90a:	42bc      	cmp	r4, r7
    e90c:	d001      	beq.n	e912 <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    e90e:	2c00      	cmp	r4, #0
    e910:	d1e5      	bne.n	e8de <end_thread+0x56>
		update_cache(1);
    e912:	2001      	movs	r0, #1
    e914:	f7ff fdac 	bl	e470 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    e918:	4628      	mov	r0, r5
    e91a:	f7ff f959 	bl	dbd0 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    e91e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e920:	20002b0c 	.word	0x20002b0c

0000e924 <z_sched_init>:
{
    e924:	b508      	push	{r3, lr}
	list->head = (sys_dnode_t *)list;
    e926:	4b05      	ldr	r3, [pc, #20]	; (e93c <z_sched_init+0x18>)
    e928:	f103 0220 	add.w	r2, r3, #32
    e92c:	621a      	str	r2, [r3, #32]
	list->tail = (sys_dnode_t *)list;
    e92e:	625a      	str	r2, [r3, #36]	; 0x24
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    e930:	2100      	movs	r1, #0
    e932:	4608      	mov	r0, r1
    e934:	f7ff fd2c 	bl	e390 <k_sched_time_slice_set>
}
    e938:	bd08      	pop	{r3, pc}
    e93a:	bf00      	nop
    e93c:	20002aec 	.word	0x20002aec

0000e940 <z_impl_k_yield>:
{
    e940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e942:	f04f 0320 	mov.w	r3, #32
    e946:	f3ef 8611 	mrs	r6, BASEPRI
    e94a:	f383 8812 	msr	BASEPRI_MAX, r3
    e94e:	f3bf 8f6f 	isb	sy
		dequeue_thread(&_kernel.ready_q.runq,
    e952:	4c1c      	ldr	r4, [pc, #112]	; (e9c4 <z_impl_k_yield+0x84>)
    e954:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    e956:	7b4b      	ldrb	r3, [r1, #13]
    e958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    e95c:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
    e95e:	f104 0720 	add.w	r7, r4, #32
    e962:	4638      	mov	r0, r7
    e964:	f005 f908 	bl	13b78 <z_priq_dumb_remove>
	queue_thread(&_kernel.ready_q.runq, _current);
    e968:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    e96a:	7b6b      	ldrb	r3, [r5, #13]
    e96c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    e970:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    e972:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e974:	42bc      	cmp	r4, r7
    e976:	d023      	beq.n	e9c0 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e978:	b16c      	cbz	r4, e996 <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
    e97a:	4621      	mov	r1, r4
    e97c:	4628      	mov	r0, r5
    e97e:	f005 f8bd 	bl	13afc <z_sched_prio_cmp>
    e982:	2800      	cmp	r0, #0
    e984:	dc16      	bgt.n	e9b4 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    e986:	b134      	cbz	r4, e996 <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
    e988:	4b0e      	ldr	r3, [pc, #56]	; (e9c4 <z_impl_k_yield+0x84>)
    e98a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    e98c:	429c      	cmp	r4, r3
    e98e:	d002      	beq.n	e996 <z_impl_k_yield+0x56>
    e990:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e992:	2c00      	cmp	r4, #0
    e994:	d1f0      	bne.n	e978 <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
    e996:	4b0b      	ldr	r3, [pc, #44]	; (e9c4 <z_impl_k_yield+0x84>)
    e998:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    e99a:	f103 0120 	add.w	r1, r3, #32
    e99e:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    e9a0:	606a      	str	r2, [r5, #4]
	tail->next = node;
    e9a2:	6015      	str	r5, [r2, #0]
	list->tail = node;
    e9a4:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    e9a6:	2001      	movs	r0, #1
    e9a8:	f7ff fd62 	bl	e470 <update_cache>
    e9ac:	4630      	mov	r0, r6
    e9ae:	f7f5 fb4f 	bl	4050 <arch_swap>
}
    e9b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
    e9b4:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    e9b6:	606b      	str	r3, [r5, #4]
	node->next = successor;
    e9b8:	602c      	str	r4, [r5, #0]
	prev->next = node;
    e9ba:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    e9bc:	6065      	str	r5, [r4, #4]
}
    e9be:	e7f2      	b.n	e9a6 <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e9c0:	2400      	movs	r4, #0
    e9c2:	e7d9      	b.n	e978 <z_impl_k_yield+0x38>
    e9c4:	20002aec 	.word	0x20002aec

0000e9c8 <z_tick_sleep>:
{
    e9c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e9cc:	4604      	mov	r4, r0
    e9ce:	460d      	mov	r5, r1
	if (ticks == 0) {
    e9d0:	ea54 0105 	orrs.w	r1, r4, r5
    e9d4:	d037      	beq.n	ea46 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    e9d6:	f06f 0101 	mvn.w	r1, #1
    e9da:	1a0a      	subs	r2, r1, r0
    e9dc:	f04f 31ff 	mov.w	r1, #4294967295
    e9e0:	eb61 0305 	sbc.w	r3, r1, r5
    e9e4:	2a01      	cmp	r2, #1
    e9e6:	f173 0300 	sbcs.w	r3, r3, #0
    e9ea:	db30      	blt.n	ea4e <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    e9ec:	f06f 0601 	mvn.w	r6, #1
    e9f0:	1a36      	subs	r6, r6, r0
    e9f2:	f04f 0320 	mov.w	r3, #32
    e9f6:	f3ef 8811 	mrs	r8, BASEPRI
    e9fa:	f383 8812 	msr	BASEPRI_MAX, r3
    e9fe:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    ea02:	4f16      	ldr	r7, [pc, #88]	; (ea5c <z_tick_sleep+0x94>)
    ea04:	68b8      	ldr	r0, [r7, #8]
    ea06:	4b16      	ldr	r3, [pc, #88]	; (ea60 <z_tick_sleep+0x98>)
    ea08:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    ea0a:	f7ff fe45 	bl	e698 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    ea0e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    ea10:	4622      	mov	r2, r4
    ea12:	462b      	mov	r3, r5
    ea14:	4913      	ldr	r1, [pc, #76]	; (ea64 <z_tick_sleep+0x9c>)
    ea16:	3018      	adds	r0, #24
    ea18:	f000 f904 	bl	ec24 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    ea1c:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    ea1e:	7b53      	ldrb	r3, [r2, #13]
    ea20:	f043 0310 	orr.w	r3, r3, #16
    ea24:	7353      	strb	r3, [r2, #13]
    ea26:	4640      	mov	r0, r8
    ea28:	f7f5 fb12 	bl	4050 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    ea2c:	2500      	movs	r5, #0
    ea2e:	f005 fa80 	bl	13f32 <sys_clock_tick_get_32>
    ea32:	1a34      	subs	r4, r6, r0
    ea34:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
    ea38:	2c01      	cmp	r4, #1
    ea3a:	f175 0300 	sbcs.w	r3, r5, #0
    ea3e:	da0a      	bge.n	ea56 <z_tick_sleep+0x8e>
	return 0;
    ea40:	2000      	movs	r0, #0
}
    ea42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    ea46:	f7ff ff7b 	bl	e940 <z_impl_k_yield>
		return 0;
    ea4a:	2000      	movs	r0, #0
    ea4c:	e7f9      	b.n	ea42 <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    ea4e:	f005 fa70 	bl	13f32 <sys_clock_tick_get_32>
    ea52:	1906      	adds	r6, r0, r4
    ea54:	e7cd      	b.n	e9f2 <z_tick_sleep+0x2a>
		return ticks;
    ea56:	4620      	mov	r0, r4
    ea58:	e7f3      	b.n	ea42 <z_tick_sleep+0x7a>
    ea5a:	bf00      	nop
    ea5c:	20002aec 	.word	0x20002aec
    ea60:	20002b20 	.word	0x20002b20
    ea64:	00013c15 	.word	0x00013c15

0000ea68 <z_impl_k_sleep>:
{
    ea68:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    ea6a:	f1b1 3fff 	cmp.w	r1, #4294967295
    ea6e:	bf08      	it	eq
    ea70:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    ea74:	d01a      	beq.n	eaac <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
    ea76:	f7ff ffa7 	bl	e9c8 <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    ea7a:	4604      	mov	r4, r0
    ea7c:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
    ea7e:	0169      	lsls	r1, r5, #5
    ea80:	0143      	lsls	r3, r0, #5
    ea82:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
    ea86:	1a18      	subs	r0, r3, r0
    ea88:	eb62 0305 	sbc.w	r3, r2, r5
    ea8c:	009a      	lsls	r2, r3, #2
    ea8e:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    ea92:	0081      	lsls	r1, r0, #2
    ea94:	4613      	mov	r3, r2
    ea96:	1908      	adds	r0, r1, r4
    ea98:	eb45 0303 	adc.w	r3, r5, r3
    ea9c:	00da      	lsls	r2, r3, #3
    ea9e:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
    eaa2:	00c1      	lsls	r1, r0, #3
    eaa4:	0bc8      	lsrs	r0, r1, #15
    eaa6:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
    eaaa:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
    eaac:	4b03      	ldr	r3, [pc, #12]	; (eabc <z_impl_k_sleep+0x54>)
    eaae:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    eab0:	f7ff fe82 	bl	e7b8 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    eab4:	f04f 30ff 	mov.w	r0, #4294967295
    eab8:	e7f7      	b.n	eaaa <z_impl_k_sleep+0x42>
    eaba:	bf00      	nop
    eabc:	20002aec 	.word	0x20002aec

0000eac0 <z_impl_z_current_get>:
}
    eac0:	4b01      	ldr	r3, [pc, #4]	; (eac8 <z_impl_z_current_get+0x8>)
    eac2:	6898      	ldr	r0, [r3, #8]
    eac4:	4770      	bx	lr
    eac6:	bf00      	nop
    eac8:	20002aec 	.word	0x20002aec

0000eacc <z_impl_k_is_preempt_thread>:
    eacc:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
    ead0:	b933      	cbnz	r3, eae0 <z_impl_k_is_preempt_thread+0x14>
    ead2:	4b05      	ldr	r3, [pc, #20]	; (eae8 <z_impl_k_is_preempt_thread+0x1c>)
    ead4:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    ead6:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
    ead8:	2b7f      	cmp	r3, #127	; 0x7f
    eada:	d803      	bhi.n	eae4 <z_impl_k_is_preempt_thread+0x18>
    eadc:	2001      	movs	r0, #1
    eade:	4770      	bx	lr
    eae0:	2000      	movs	r0, #0
    eae2:	4770      	bx	lr
    eae4:	2000      	movs	r0, #0
}
    eae6:	4770      	bx	lr
    eae8:	20002aec 	.word	0x20002aec

0000eaec <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    eaec:	b538      	push	{r3, r4, r5, lr}
    eaee:	f04f 0320 	mov.w	r3, #32
    eaf2:	f3ef 8511 	mrs	r5, BASEPRI
    eaf6:	f383 8812 	msr	BASEPRI_MAX, r3
    eafa:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    eafe:	7b43      	ldrb	r3, [r0, #13]
    eb00:	f013 0f08 	tst.w	r3, #8
    eb04:	d004      	beq.n	eb10 <z_thread_abort+0x24>
	__asm__ volatile(
    eb06:	f385 8811 	msr	BASEPRI, r5
    eb0a:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    eb0e:	bd38      	pop	{r3, r4, r5, pc}
    eb10:	4604      	mov	r4, r0
	end_thread(thread);
    eb12:	f7ff feb9 	bl	e888 <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    eb16:	4b08      	ldr	r3, [pc, #32]	; (eb38 <z_thread_abort+0x4c>)
    eb18:	689b      	ldr	r3, [r3, #8]
    eb1a:	42a3      	cmp	r3, r4
    eb1c:	d004      	beq.n	eb28 <z_thread_abort+0x3c>
    eb1e:	f385 8811 	msr	BASEPRI, r5
    eb22:	f3bf 8f6f 	isb	sy
    eb26:	e7f2      	b.n	eb0e <z_thread_abort+0x22>
    eb28:	f3ef 8305 	mrs	r3, IPSR
    eb2c:	2b00      	cmp	r3, #0
    eb2e:	d1f6      	bne.n	eb1e <z_thread_abort+0x32>
    eb30:	4628      	mov	r0, r5
    eb32:	f7f5 fa8d 	bl	4050 <arch_swap>
	return ret;
    eb36:	e7f2      	b.n	eb1e <z_thread_abort+0x32>
    eb38:	20002aec 	.word	0x20002aec

0000eb3c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    eb3c:	b5d0      	push	{r4, r6, r7, lr}
    eb3e:	b082      	sub	sp, #8
    eb40:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    eb42:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
    eb46:	e9cd 6700 	strd	r6, r7, [sp]
    eb4a:	f7ff fdc1 	bl	e6d0 <z_pend_curr>

	if (data != NULL) {
    eb4e:	b11c      	cbz	r4, eb58 <z_sched_wait+0x1c>
		*data = _current->base.swap_data;
    eb50:	4b02      	ldr	r3, [pc, #8]	; (eb5c <z_sched_wait+0x20>)
    eb52:	689b      	ldr	r3, [r3, #8]
    eb54:	695b      	ldr	r3, [r3, #20]
    eb56:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    eb58:	b002      	add	sp, #8
    eb5a:	bdd0      	pop	{r4, r6, r7, pc}
    eb5c:	20002aec 	.word	0x20002aec

0000eb60 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    eb60:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    eb62:	4806      	ldr	r0, [pc, #24]	; (eb7c <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    eb64:	4a06      	ldr	r2, [pc, #24]	; (eb80 <z_data_copy+0x20>)
    eb66:	1a12      	subs	r2, r2, r0
    eb68:	4906      	ldr	r1, [pc, #24]	; (eb84 <z_data_copy+0x24>)
    eb6a:	f002 fb3f 	bl	111ec <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    eb6e:	4a06      	ldr	r2, [pc, #24]	; (eb88 <z_data_copy+0x28>)
    eb70:	4906      	ldr	r1, [pc, #24]	; (eb8c <z_data_copy+0x2c>)
    eb72:	4807      	ldr	r0, [pc, #28]	; (eb90 <z_data_copy+0x30>)
    eb74:	f002 fb3a 	bl	111ec <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    eb78:	bd08      	pop	{r3, pc}
    eb7a:	bf00      	nop
    eb7c:	20000000 	.word	0x20000000
    eb80:	200004e0 	.word	0x200004e0
    eb84:	00015c10 	.word	0x00015c10
    eb88:	00000000 	.word	0x00000000
    eb8c:	00015c10 	.word	0x00015c10
    eb90:	20000000 	.word	0x20000000

0000eb94 <first>:
	return list->head == list;
    eb94:	4b03      	ldr	r3, [pc, #12]	; (eba4 <first+0x10>)
    eb96:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    eb98:	4298      	cmp	r0, r3
    eb9a:	d000      	beq.n	eb9e <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    eb9c:	4770      	bx	lr
    eb9e:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    eba0:	e7fc      	b.n	eb9c <first+0x8>
    eba2:	bf00      	nop
    eba4:	20000260 	.word	0x20000260

0000eba8 <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    eba8:	b130      	cbz	r0, ebb8 <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    ebaa:	4a04      	ldr	r2, [pc, #16]	; (ebbc <next+0x14>)
    ebac:	6852      	ldr	r2, [r2, #4]
    ebae:	4290      	cmp	r0, r2
    ebb0:	d001      	beq.n	ebb6 <next+0xe>
    ebb2:	6800      	ldr	r0, [r0, #0]
    ebb4:	4770      	bx	lr
    ebb6:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    ebb8:	4770      	bx	lr
    ebba:	bf00      	nop
    ebbc:	20000260 	.word	0x20000260

0000ebc0 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    ebc0:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    ebc2:	4b04      	ldr	r3, [pc, #16]	; (ebd4 <elapsed+0x14>)
    ebc4:	681b      	ldr	r3, [r3, #0]
    ebc6:	b10b      	cbz	r3, ebcc <elapsed+0xc>
    ebc8:	2000      	movs	r0, #0
}
    ebca:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    ebcc:	f7f9 fce6 	bl	859c <sys_clock_elapsed>
    ebd0:	e7fb      	b.n	ebca <elapsed+0xa>
    ebd2:	bf00      	nop
    ebd4:	20002b2c 	.word	0x20002b2c

0000ebd8 <next_timeout>:

static int32_t next_timeout(void)
{
    ebd8:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    ebda:	f7ff ffdb 	bl	eb94 <first>
    ebde:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    ebe0:	f7ff ffee 	bl	ebc0 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    ebe4:	b18c      	cbz	r4, ec0a <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    ebe6:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    ebea:	1a12      	subs	r2, r2, r0
    ebec:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    ebf0:	2a01      	cmp	r2, #1
    ebf2:	f173 0100 	sbcs.w	r1, r3, #0
    ebf6:	db11      	blt.n	ec1c <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    ebf8:	4610      	mov	r0, r2
    ebfa:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    ebfe:	f173 0300 	sbcs.w	r3, r3, #0
    ec02:	db04      	blt.n	ec0e <next_timeout+0x36>
    ec04:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    ec08:	e001      	b.n	ec0e <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
    ec0a:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    ec0e:	4b04      	ldr	r3, [pc, #16]	; (ec20 <next_timeout+0x48>)
    ec10:	691b      	ldr	r3, [r3, #16]
    ec12:	b113      	cbz	r3, ec1a <next_timeout+0x42>
    ec14:	4283      	cmp	r3, r0
    ec16:	da00      	bge.n	ec1a <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
    ec18:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    ec1a:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    ec1c:	2000      	movs	r0, #0
    ec1e:	e7f6      	b.n	ec0e <next_timeout+0x36>
    ec20:	20002aec 	.word	0x20002aec

0000ec24 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    ec24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ec28:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    ec2a:	f1b3 3fff 	cmp.w	r3, #4294967295
    ec2e:	bf08      	it	eq
    ec30:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    ec34:	f000 8096 	beq.w	ed64 <z_add_timeout+0x140>
    ec38:	4682      	mov	sl, r0
    ec3a:	4614      	mov	r4, r2
    ec3c:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    ec3e:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    ec40:	2300      	movs	r3, #0
	__asm__ volatile(
    ec42:	f04f 0220 	mov.w	r2, #32
    ec46:	f3ef 8b11 	mrs	fp, BASEPRI
    ec4a:	f382 8812 	msr	BASEPRI_MAX, r2
    ec4e:	f3bf 8f6f 	isb	sy
    ec52:	e02e      	b.n	ecb2 <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
    ec54:	2201      	movs	r2, #1
    ec56:	2300      	movs	r3, #0
    ec58:	e04b      	b.n	ecf2 <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    ec5a:	f7ff ffb1 	bl	ebc0 <elapsed>
    ec5e:	1822      	adds	r2, r4, r0
    ec60:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
    ec64:	3201      	adds	r2, #1
    ec66:	f143 0300 	adc.w	r3, r3, #0
    ec6a:	f8ca 2010 	str.w	r2, [sl, #16]
    ec6e:	f8ca 3014 	str.w	r3, [sl, #20]
    ec72:	e042      	b.n	ecfa <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    ec74:	9b00      	ldr	r3, [sp, #0]
    ec76:	1ac2      	subs	r2, r0, r3
    ec78:	9b01      	ldr	r3, [sp, #4]
    ec7a:	eb61 0303 	sbc.w	r3, r1, r3
    ec7e:	f8cc 2010 	str.w	r2, [ip, #16]
    ec82:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
    ec86:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
    ec8a:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
    ec8e:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
    ec92:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
    ec96:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    ec9a:	f1bc 0f00 	cmp.w	ip, #0
    ec9e:	d049      	beq.n	ed34 <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    eca0:	f7ff ff78 	bl	eb94 <first>
    eca4:	4582      	cmp	sl, r0
    eca6:	d050      	beq.n	ed4a <z_add_timeout+0x126>
	__asm__ volatile(
    eca8:	f38b 8811 	msr	BASEPRI, fp
    ecac:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    ecb0:	2301      	movs	r3, #1
    ecb2:	2b00      	cmp	r3, #0
    ecb4:	d156      	bne.n	ed64 <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    ecb6:	f06f 0301 	mvn.w	r3, #1
    ecba:	ebb3 0804 	subs.w	r8, r3, r4
    ecbe:	f04f 30ff 	mov.w	r0, #4294967295
    ecc2:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    ecc6:	f1b8 0f00 	cmp.w	r8, #0
    ecca:	f179 0300 	sbcs.w	r3, r9, #0
    ecce:	dbc4      	blt.n	ec5a <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    ecd0:	4a26      	ldr	r2, [pc, #152]	; (ed6c <z_add_timeout+0x148>)
    ecd2:	6813      	ldr	r3, [r2, #0]
    ecd4:	6852      	ldr	r2, [r2, #4]
    ecd6:	18e3      	adds	r3, r4, r3
    ecd8:	eb45 0202 	adc.w	r2, r5, r2
    ecdc:	f06f 0101 	mvn.w	r1, #1
    ece0:	1ace      	subs	r6, r1, r3
    ece2:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
    ece6:	4632      	mov	r2, r6
    ece8:	463b      	mov	r3, r7
    ecea:	2e01      	cmp	r6, #1
    ecec:	f177 0100 	sbcs.w	r1, r7, #0
    ecf0:	dbb0      	blt.n	ec54 <z_add_timeout+0x30>
    ecf2:	f8ca 2010 	str.w	r2, [sl, #16]
    ecf6:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
    ecfa:	f7ff ff4b 	bl	eb94 <first>
    ecfe:	4684      	mov	ip, r0
    ed00:	f1bc 0f00 	cmp.w	ip, #0
    ed04:	d0c9      	beq.n	ec9a <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
    ed06:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
    ed0a:	e9da 2304 	ldrd	r2, r3, [sl, #16]
    ed0e:	e9cd 2300 	strd	r2, r3, [sp]
    ed12:	4282      	cmp	r2, r0
    ed14:	418b      	sbcs	r3, r1
    ed16:	dbad      	blt.n	ec74 <z_add_timeout+0x50>
			to->dticks -= t->dticks;
    ed18:	9b00      	ldr	r3, [sp, #0]
    ed1a:	1a1a      	subs	r2, r3, r0
    ed1c:	9b01      	ldr	r3, [sp, #4]
    ed1e:	eb63 0301 	sbc.w	r3, r3, r1
    ed22:	f8ca 2010 	str.w	r2, [sl, #16]
    ed26:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
    ed2a:	4660      	mov	r0, ip
    ed2c:	f7ff ff3c 	bl	eba8 <next>
    ed30:	4684      	mov	ip, r0
    ed32:	e7e5      	b.n	ed00 <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
    ed34:	4b0e      	ldr	r3, [pc, #56]	; (ed70 <z_add_timeout+0x14c>)
    ed36:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    ed38:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
    ed3c:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
    ed40:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    ed44:	f8c3 a004 	str.w	sl, [r3, #4]
}
    ed48:	e7aa      	b.n	eca0 <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    ed4a:	f7ff ff45 	bl	ebd8 <next_timeout>

			if (next_time == 0 ||
    ed4e:	4603      	mov	r3, r0
    ed50:	b118      	cbz	r0, ed5a <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
    ed52:	4a08      	ldr	r2, [pc, #32]	; (ed74 <z_add_timeout+0x150>)
    ed54:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    ed56:	4282      	cmp	r2, r0
    ed58:	d0a6      	beq.n	eca8 <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
    ed5a:	2100      	movs	r1, #0
    ed5c:	4618      	mov	r0, r3
    ed5e:	f7f9 fbe9 	bl	8534 <sys_clock_set_timeout>
    ed62:	e7a1      	b.n	eca8 <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    ed64:	b003      	add	sp, #12
    ed66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ed6a:	bf00      	nop
    ed6c:	200008e8 	.word	0x200008e8
    ed70:	20000260 	.word	0x20000260
    ed74:	20002aec 	.word	0x20002aec

0000ed78 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    ed78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ed7a:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    ed7c:	f7ff fbe2 	bl	e544 <z_time_slice>
	__asm__ volatile(
    ed80:	f04f 0320 	mov.w	r3, #32
    ed84:	f3ef 8511 	mrs	r5, BASEPRI
    ed88:	f383 8812 	msr	BASEPRI_MAX, r3
    ed8c:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    ed90:	4b28      	ldr	r3, [pc, #160]	; (ee34 <sys_clock_announce+0xbc>)
    ed92:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    ed94:	f7ff fefe 	bl	eb94 <first>
    ed98:	4604      	mov	r4, r0
    ed9a:	b350      	cbz	r0, edf2 <sys_clock_announce+0x7a>
    ed9c:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    eda0:	4b24      	ldr	r3, [pc, #144]	; (ee34 <sys_clock_announce+0xbc>)
    eda2:	681b      	ldr	r3, [r3, #0]
    eda4:	17d9      	asrs	r1, r3, #31
    eda6:	42b3      	cmp	r3, r6
    eda8:	eb71 0207 	sbcs.w	r2, r1, r7
    edac:	db21      	blt.n	edf2 <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    edae:	4a22      	ldr	r2, [pc, #136]	; (ee38 <sys_clock_announce+0xc0>)
    edb0:	e9d2 0100 	ldrd	r0, r1, [r2]
    edb4:	1980      	adds	r0, r0, r6
    edb6:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
    edba:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
    edbe:	1b9b      	subs	r3, r3, r6
    edc0:	4a1c      	ldr	r2, [pc, #112]	; (ee34 <sys_clock_announce+0xbc>)
    edc2:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    edc4:	2200      	movs	r2, #0
    edc6:	2300      	movs	r3, #0
    edc8:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    edcc:	4620      	mov	r0, r4
    edce:	f005 f83a 	bl	13e46 <remove_timeout>
	__asm__ volatile(
    edd2:	f385 8811 	msr	BASEPRI, r5
    edd6:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    edda:	68a3      	ldr	r3, [r4, #8]
    eddc:	4620      	mov	r0, r4
    edde:	4798      	blx	r3
	__asm__ volatile(
    ede0:	f04f 0320 	mov.w	r3, #32
    ede4:	f3ef 8511 	mrs	r5, BASEPRI
    ede8:	f383 8812 	msr	BASEPRI_MAX, r3
    edec:	f3bf 8f6f 	isb	sy
    edf0:	e7d0      	b.n	ed94 <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    edf2:	b144      	cbz	r4, ee06 <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
    edf4:	4b0f      	ldr	r3, [pc, #60]	; (ee34 <sys_clock_announce+0xbc>)
    edf6:	6819      	ldr	r1, [r3, #0]
    edf8:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    edfc:	1a52      	subs	r2, r2, r1
    edfe:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
    ee02:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
    ee06:	480c      	ldr	r0, [pc, #48]	; (ee38 <sys_clock_announce+0xc0>)
    ee08:	490a      	ldr	r1, [pc, #40]	; (ee34 <sys_clock_announce+0xbc>)
    ee0a:	680c      	ldr	r4, [r1, #0]
    ee0c:	e9d0 2300 	ldrd	r2, r3, [r0]
    ee10:	1912      	adds	r2, r2, r4
    ee12:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
    ee16:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
    ee1a:	2400      	movs	r4, #0
    ee1c:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
    ee1e:	f7ff fedb 	bl	ebd8 <next_timeout>
    ee22:	4621      	mov	r1, r4
    ee24:	f7f9 fb86 	bl	8534 <sys_clock_set_timeout>
	__asm__ volatile(
    ee28:	f385 8811 	msr	BASEPRI, r5
    ee2c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    ee30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ee32:	bf00      	nop
    ee34:	20002b2c 	.word	0x20002b2c
    ee38:	200008e8 	.word	0x200008e8

0000ee3c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    ee3c:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    ee3e:	2100      	movs	r1, #0
	__asm__ volatile(
    ee40:	f04f 0320 	mov.w	r3, #32
    ee44:	f3ef 8411 	mrs	r4, BASEPRI
    ee48:	f383 8812 	msr	BASEPRI_MAX, r3
    ee4c:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    ee50:	2200      	movs	r2, #0
    ee52:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
    ee54:	b969      	cbnz	r1, ee72 <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
    ee56:	f7f9 fba1 	bl	859c <sys_clock_elapsed>
    ee5a:	4b07      	ldr	r3, [pc, #28]	; (ee78 <sys_clock_tick_get+0x3c>)
    ee5c:	e9d3 2300 	ldrd	r2, r3, [r3]
    ee60:	1812      	adds	r2, r2, r0
    ee62:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    ee66:	f384 8811 	msr	BASEPRI, r4
    ee6a:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    ee6e:	2101      	movs	r1, #1
    ee70:	e7f0      	b.n	ee54 <sys_clock_tick_get+0x18>
	}
	return t;
}
    ee72:	4610      	mov	r0, r2
    ee74:	4619      	mov	r1, r3
    ee76:	bd10      	pop	{r4, pc}
    ee78:	200008e8 	.word	0x200008e8

0000ee7c <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    ee7c:	b538      	push	{r3, r4, r5, lr}
    ee7e:	4604      	mov	r4, r0
	__asm__ volatile(
    ee80:	f04f 0320 	mov.w	r3, #32
    ee84:	f3ef 8511 	mrs	r5, BASEPRI
    ee88:	f383 8812 	msr	BASEPRI_MAX, r3
    ee8c:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    ee90:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    ee94:	ea52 0103 	orrs.w	r1, r2, r3
    ee98:	d005      	beq.n	eea6 <z_timer_expiration_handler+0x2a>
    ee9a:	f1b3 3fff 	cmp.w	r3, #4294967295
    ee9e:	bf08      	it	eq
    eea0:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    eea4:	d11a      	bne.n	eedc <z_timer_expiration_handler+0x60>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    eea6:	6b23      	ldr	r3, [r4, #48]	; 0x30
    eea8:	3301      	adds	r3, #1
    eeaa:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    eeac:	6a23      	ldr	r3, [r4, #32]
    eeae:	b10b      	cbz	r3, eeb4 <z_timer_expiration_handler+0x38>
		timer->expiry_fn(timer);
    eeb0:	4620      	mov	r0, r4
    eeb2:	4798      	blx	r3
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    eeb4:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
    eeb8:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    eeba:	42a3      	cmp	r3, r4
    eebc:	d012      	beq.n	eee4 <z_timer_expiration_handler+0x68>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    eebe:	b18c      	cbz	r4, eee4 <z_timer_expiration_handler+0x68>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
    eec0:	4620      	mov	r0, r4
    eec2:	f004 fe25 	bl	13b10 <z_unpend_thread_no_timeout>
    eec6:	2300      	movs	r3, #0
    eec8:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	__asm__ volatile(
    eecc:	f385 8811 	msr	BASEPRI, r5
    eed0:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
    eed4:	4620      	mov	r0, r4
    eed6:	f004 fe81 	bl	13bdc <z_ready_thread>
}
    eeda:	bd38      	pop	{r3, r4, r5, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    eedc:	4904      	ldr	r1, [pc, #16]	; (eef0 <z_timer_expiration_handler+0x74>)
    eede:	f7ff fea1 	bl	ec24 <z_add_timeout>
    eee2:	e7e0      	b.n	eea6 <z_timer_expiration_handler+0x2a>
    eee4:	f385 8811 	msr	BASEPRI, r5
    eee8:	f3bf 8f6f 	isb	sy
		return;
    eeec:	e7f5      	b.n	eeda <z_timer_expiration_handler+0x5e>
    eeee:	bf00      	nop
    eef0:	0000ee7d 	.word	0x0000ee7d

0000eef4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    eef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    eef8:	b087      	sub	sp, #28
    eefa:	4614      	mov	r4, r2
    eefc:	461d      	mov	r5, r3
    eefe:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    ef02:	f1b3 3fff 	cmp.w	r3, #4294967295
    ef06:	bf08      	it	eq
    ef08:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    ef0c:	d035      	beq.n	ef7a <z_impl_k_timer_start+0x86>
    ef0e:	4606      	mov	r6, r0
    ef10:	4613      	mov	r3, r2
    ef12:	462a      	mov	r2, r5
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    ef14:	f1b9 3fff 	cmp.w	r9, #4294967295
    ef18:	bf08      	it	eq
    ef1a:	f1b8 3fff 	cmpeq.w	r8, #4294967295
    ef1e:	d012      	beq.n	ef46 <z_impl_k_timer_start+0x52>
    ef20:	ea58 0109 	orrs.w	r1, r8, r9
    ef24:	d00f      	beq.n	ef46 <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
    ef26:	f06f 0701 	mvn.w	r7, #1
    ef2a:	ebb7 0708 	subs.w	r7, r7, r8
    ef2e:	9702      	str	r7, [sp, #8]
    ef30:	f04f 31ff 	mov.w	r1, #4294967295
    ef34:	eb61 0709 	sbc.w	r7, r1, r9
    ef38:	9703      	str	r7, [sp, #12]
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    ef3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    ef3e:	2800      	cmp	r0, #0
    ef40:	f171 0100 	sbcs.w	r1, r1, #0
    ef44:	db1c      	blt.n	ef80 <z_impl_k_timer_start+0x8c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    ef46:	f06f 0101 	mvn.w	r1, #1
    ef4a:	ebb1 0a03 	subs.w	sl, r1, r3
    ef4e:	f04f 31ff 	mov.w	r1, #4294967295
    ef52:	eb61 0b02 	sbc.w	fp, r1, r2
    ef56:	f1ba 0f00 	cmp.w	sl, #0
    ef5a:	f17b 0100 	sbcs.w	r1, fp, #0
    ef5e:	db23      	blt.n	efa8 <z_impl_k_timer_start+0xb4>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
    ef60:	4630      	mov	r0, r6
    ef62:	f004 ff87 	bl	13e74 <z_abort_timeout>
	timer->period = period;
    ef66:	e9c6 890a 	strd	r8, r9, [r6, #40]	; 0x28
	timer->status = 0U;
    ef6a:	2300      	movs	r3, #0
    ef6c:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    ef6e:	4622      	mov	r2, r4
    ef70:	462b      	mov	r3, r5
    ef72:	4917      	ldr	r1, [pc, #92]	; (efd0 <z_impl_k_timer_start+0xdc>)
    ef74:	4630      	mov	r0, r6
    ef76:	f7ff fe55 	bl	ec24 <z_add_timeout>
		     duration);
}
    ef7a:	b007      	add	sp, #28
    ef7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		period.ticks = MAX(period.ticks - 1, 1);
    ef80:	f118 31ff 	adds.w	r1, r8, #4294967295
    ef84:	9104      	str	r1, [sp, #16]
    ef86:	f149 31ff 	adc.w	r1, r9, #4294967295
    ef8a:	9105      	str	r1, [sp, #20]
    ef8c:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
    ef90:	4638      	mov	r0, r7
    ef92:	4641      	mov	r1, r8
    ef94:	2f01      	cmp	r7, #1
    ef96:	f178 0700 	sbcs.w	r7, r8, #0
    ef9a:	db02      	blt.n	efa2 <z_impl_k_timer_start+0xae>
    ef9c:	4680      	mov	r8, r0
    ef9e:	4689      	mov	r9, r1
    efa0:	e7d1      	b.n	ef46 <z_impl_k_timer_start+0x52>
    efa2:	2001      	movs	r0, #1
    efa4:	2100      	movs	r1, #0
    efa6:	e7f9      	b.n	ef9c <z_impl_k_timer_start+0xa8>
		duration.ticks = MAX(duration.ticks - 1, 0);
    efa8:	f113 33ff 	adds.w	r3, r3, #4294967295
    efac:	9300      	str	r3, [sp, #0]
    efae:	f142 33ff 	adc.w	r3, r2, #4294967295
    efb2:	9301      	str	r3, [sp, #4]
    efb4:	e9dd 0100 	ldrd	r0, r1, [sp]
    efb8:	4602      	mov	r2, r0
    efba:	460b      	mov	r3, r1
    efbc:	2800      	cmp	r0, #0
    efbe:	f171 0100 	sbcs.w	r1, r1, #0
    efc2:	db02      	blt.n	efca <z_impl_k_timer_start+0xd6>
    efc4:	4614      	mov	r4, r2
    efc6:	461d      	mov	r5, r3
    efc8:	e7ca      	b.n	ef60 <z_impl_k_timer_start+0x6c>
    efca:	2200      	movs	r2, #0
    efcc:	4613      	mov	r3, r2
    efce:	e7f9      	b.n	efc4 <z_impl_k_timer_start+0xd0>
    efd0:	0000ee7d 	.word	0x0000ee7d

0000efd4 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    efd4:	b538      	push	{r3, r4, r5, lr}
    efd6:	4604      	mov	r4, r0
    efd8:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    efda:	f004 fc65 	bl	138a8 <k_is_in_isr>
    efde:	b948      	cbnz	r0, eff4 <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    efe0:	4b05      	ldr	r3, [pc, #20]	; (eff8 <z_thread_aligned_alloc+0x24>)
    efe2:	689b      	ldr	r3, [r3, #8]
    efe4:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
	}

	if (heap != NULL) {
    efe8:	b118      	cbz	r0, eff2 <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
    efea:	462a      	mov	r2, r5
    efec:	4621      	mov	r1, r4
    efee:	f005 f801 	bl	13ff4 <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
    eff2:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
    eff4:	4801      	ldr	r0, [pc, #4]	; (effc <z_thread_aligned_alloc+0x28>)
    eff6:	e7f7      	b.n	efe8 <z_thread_aligned_alloc+0x14>
    eff8:	20002aec 	.word	0x20002aec
    effc:	2000033c 	.word	0x2000033c

0000f000 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    f000:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    f002:	4a03      	ldr	r2, [pc, #12]	; (f010 <boot_banner+0x10>)
    f004:	4903      	ldr	r1, [pc, #12]	; (f014 <boot_banner+0x14>)
    f006:	4804      	ldr	r0, [pc, #16]	; (f018 <boot_banner+0x18>)
    f008:	f000 fa76 	bl	f4f8 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    f00c:	bd08      	pop	{r3, pc}
    f00e:	bf00      	nop
    f010:	00015b14 	.word	0x00015b14
    f014:	00015b48 	.word	0x00015b48
    f018:	00015b54 	.word	0x00015b54

0000f01c <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    f01c:	b510      	push	{r4, lr}
    f01e:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    f020:	4b08      	ldr	r3, [pc, #32]	; (f044 <k_sys_work_q_init+0x28>)
    f022:	9302      	str	r3, [sp, #8]
    f024:	2400      	movs	r4, #0
    f026:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    f02a:	ab02      	add	r3, sp, #8
    f02c:	9300      	str	r3, [sp, #0]
    f02e:	f04f 33ff 	mov.w	r3, #4294967295
    f032:	f44f 6280 	mov.w	r2, #1024	; 0x400
    f036:	4904      	ldr	r1, [pc, #16]	; (f048 <k_sys_work_q_init+0x2c>)
    f038:	4804      	ldr	r0, [pc, #16]	; (f04c <k_sys_work_q_init+0x30>)
    f03a:	f7ff f945 	bl	e2c8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    f03e:	4620      	mov	r0, r4
    f040:	b004      	add	sp, #16
    f042:	bd10      	pop	{r4, pc}
    f044:	00015b7c 	.word	0x00015b7c
    f048:	20004a20 	.word	0x20004a20
    f04c:	200008f0 	.word	0x200008f0

0000f050 <nrf_cc3xx_platform_init_no_rng>:
    f050:	b510      	push	{r4, lr}
    f052:	4c0a      	ldr	r4, [pc, #40]	; (f07c <nrf_cc3xx_platform_init_no_rng+0x2c>)
    f054:	6823      	ldr	r3, [r4, #0]
    f056:	b11b      	cbz	r3, f060 <nrf_cc3xx_platform_init_no_rng+0x10>
    f058:	2301      	movs	r3, #1
    f05a:	6023      	str	r3, [r4, #0]
    f05c:	2000      	movs	r0, #0
    f05e:	bd10      	pop	{r4, pc}
    f060:	f000 f8d6 	bl	f210 <CC_LibInitNoRng>
    f064:	2800      	cmp	r0, #0
    f066:	d0f7      	beq.n	f058 <nrf_cc3xx_platform_init_no_rng+0x8>
    f068:	3801      	subs	r0, #1
    f06a:	2806      	cmp	r0, #6
    f06c:	d803      	bhi.n	f076 <nrf_cc3xx_platform_init_no_rng+0x26>
    f06e:	4b04      	ldr	r3, [pc, #16]	; (f080 <nrf_cc3xx_platform_init_no_rng+0x30>)
    f070:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    f074:	bd10      	pop	{r4, pc}
    f076:	4803      	ldr	r0, [pc, #12]	; (f084 <nrf_cc3xx_platform_init_no_rng+0x34>)
    f078:	bd10      	pop	{r4, pc}
    f07a:	bf00      	nop
    f07c:	20002b30 	.word	0x20002b30
    f080:	00015b88 	.word	0x00015b88
    f084:	ffff8ffe 	.word	0xffff8ffe

0000f088 <nrf_cc3xx_platform_abort>:
    f088:	f3bf 8f4f 	dsb	sy
    f08c:	4905      	ldr	r1, [pc, #20]	; (f0a4 <nrf_cc3xx_platform_abort+0x1c>)
    f08e:	4b06      	ldr	r3, [pc, #24]	; (f0a8 <nrf_cc3xx_platform_abort+0x20>)
    f090:	68ca      	ldr	r2, [r1, #12]
    f092:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    f096:	4313      	orrs	r3, r2
    f098:	60cb      	str	r3, [r1, #12]
    f09a:	f3bf 8f4f 	dsb	sy
    f09e:	bf00      	nop
    f0a0:	e7fd      	b.n	f09e <nrf_cc3xx_platform_abort+0x16>
    f0a2:	bf00      	nop
    f0a4:	e000ed00 	.word	0xe000ed00
    f0a8:	05fa0004 	.word	0x05fa0004

0000f0ac <CC_PalAbort>:
    f0ac:	b4f0      	push	{r4, r5, r6, r7}
    f0ae:	4f09      	ldr	r7, [pc, #36]	; (f0d4 <CC_PalAbort+0x28>)
    f0b0:	4e09      	ldr	r6, [pc, #36]	; (f0d8 <CC_PalAbort+0x2c>)
    f0b2:	4c0a      	ldr	r4, [pc, #40]	; (f0dc <CC_PalAbort+0x30>)
    f0b4:	4a0a      	ldr	r2, [pc, #40]	; (f0e0 <CC_PalAbort+0x34>)
    f0b6:	4d0b      	ldr	r5, [pc, #44]	; (f0e4 <CC_PalAbort+0x38>)
    f0b8:	490b      	ldr	r1, [pc, #44]	; (f0e8 <CC_PalAbort+0x3c>)
    f0ba:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    f0be:	603b      	str	r3, [r7, #0]
    f0c0:	6852      	ldr	r2, [r2, #4]
    f0c2:	6033      	str	r3, [r6, #0]
    f0c4:	6023      	str	r3, [r4, #0]
    f0c6:	2400      	movs	r4, #0
    f0c8:	602b      	str	r3, [r5, #0]
    f0ca:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    f0ce:	bcf0      	pop	{r4, r5, r6, r7}
    f0d0:	4710      	bx	r2
    f0d2:	bf00      	nop
    f0d4:	5002b400 	.word	0x5002b400
    f0d8:	5002b404 	.word	0x5002b404
    f0dc:	5002b408 	.word	0x5002b408
    f0e0:	20000268 	.word	0x20000268
    f0e4:	5002b40c 	.word	0x5002b40c
    f0e8:	5002a000 	.word	0x5002a000

0000f0ec <nrf_cc3xx_platform_set_abort>:
    f0ec:	e9d0 1200 	ldrd	r1, r2, [r0]
    f0f0:	4b01      	ldr	r3, [pc, #4]	; (f0f8 <nrf_cc3xx_platform_set_abort+0xc>)
    f0f2:	e9c3 1200 	strd	r1, r2, [r3]
    f0f6:	4770      	bx	lr
    f0f8:	20000268 	.word	0x20000268

0000f0fc <mutex_free>:
    f0fc:	b510      	push	{r4, lr}
    f0fe:	4604      	mov	r4, r0
    f100:	b130      	cbz	r0, f110 <mutex_free+0x14>
    f102:	6863      	ldr	r3, [r4, #4]
    f104:	06db      	lsls	r3, r3, #27
    f106:	d502      	bpl.n	f10e <mutex_free+0x12>
    f108:	2300      	movs	r3, #0
    f10a:	6023      	str	r3, [r4, #0]
    f10c:	6063      	str	r3, [r4, #4]
    f10e:	bd10      	pop	{r4, pc}
    f110:	4b02      	ldr	r3, [pc, #8]	; (f11c <mutex_free+0x20>)
    f112:	4803      	ldr	r0, [pc, #12]	; (f120 <mutex_free+0x24>)
    f114:	685b      	ldr	r3, [r3, #4]
    f116:	4798      	blx	r3
    f118:	e7f3      	b.n	f102 <mutex_free+0x6>
    f11a:	bf00      	nop
    f11c:	20000268 	.word	0x20000268
    f120:	00015ba4 	.word	0x00015ba4

0000f124 <mutex_unlock>:
    f124:	b168      	cbz	r0, f142 <mutex_unlock+0x1e>
    f126:	6843      	ldr	r3, [r0, #4]
    f128:	b13b      	cbz	r3, f13a <mutex_unlock+0x16>
    f12a:	06db      	lsls	r3, r3, #27
    f12c:	d507      	bpl.n	f13e <mutex_unlock+0x1a>
    f12e:	f3bf 8f5f 	dmb	sy
    f132:	2300      	movs	r3, #0
    f134:	6003      	str	r3, [r0, #0]
    f136:	4618      	mov	r0, r3
    f138:	4770      	bx	lr
    f13a:	4803      	ldr	r0, [pc, #12]	; (f148 <mutex_unlock+0x24>)
    f13c:	4770      	bx	lr
    f13e:	4803      	ldr	r0, [pc, #12]	; (f14c <mutex_unlock+0x28>)
    f140:	4770      	bx	lr
    f142:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    f146:	4770      	bx	lr
    f148:	ffff8fea 	.word	0xffff8fea
    f14c:	ffff8fe9 	.word	0xffff8fe9

0000f150 <mutex_init>:
    f150:	b510      	push	{r4, lr}
    f152:	4604      	mov	r4, r0
    f154:	b120      	cbz	r0, f160 <mutex_init+0x10>
    f156:	2200      	movs	r2, #0
    f158:	2311      	movs	r3, #17
    f15a:	6022      	str	r2, [r4, #0]
    f15c:	6063      	str	r3, [r4, #4]
    f15e:	bd10      	pop	{r4, pc}
    f160:	4801      	ldr	r0, [pc, #4]	; (f168 <mutex_init+0x18>)
    f162:	f7ff ffa3 	bl	f0ac <CC_PalAbort>
    f166:	e7f6      	b.n	f156 <mutex_init+0x6>
    f168:	00015bcc 	.word	0x00015bcc

0000f16c <mutex_lock>:
    f16c:	b1c0      	cbz	r0, f1a0 <mutex_lock+0x34>
    f16e:	6843      	ldr	r3, [r0, #4]
    f170:	b1a3      	cbz	r3, f19c <mutex_lock+0x30>
    f172:	06db      	lsls	r3, r3, #27
    f174:	d510      	bpl.n	f198 <mutex_lock+0x2c>
    f176:	2201      	movs	r2, #1
    f178:	f3bf 8f5b 	dmb	ish
    f17c:	e850 3f00 	ldrex	r3, [r0]
    f180:	e840 2100 	strex	r1, r2, [r0]
    f184:	2900      	cmp	r1, #0
    f186:	d1f9      	bne.n	f17c <mutex_lock+0x10>
    f188:	f3bf 8f5b 	dmb	ish
    f18c:	2b01      	cmp	r3, #1
    f18e:	d0f3      	beq.n	f178 <mutex_lock+0xc>
    f190:	f3bf 8f5f 	dmb	sy
    f194:	2000      	movs	r0, #0
    f196:	4770      	bx	lr
    f198:	4803      	ldr	r0, [pc, #12]	; (f1a8 <mutex_lock+0x3c>)
    f19a:	4770      	bx	lr
    f19c:	4803      	ldr	r0, [pc, #12]	; (f1ac <mutex_lock+0x40>)
    f19e:	4770      	bx	lr
    f1a0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    f1a4:	4770      	bx	lr
    f1a6:	bf00      	nop
    f1a8:	ffff8fe9 	.word	0xffff8fe9
    f1ac:	ffff8fea 	.word	0xffff8fea

0000f1b0 <nrf_cc3xx_platform_set_mutexes>:
    f1b0:	b570      	push	{r4, r5, r6, lr}
    f1b2:	e9d0 2300 	ldrd	r2, r3, [r0]
    f1b6:	4c13      	ldr	r4, [pc, #76]	; (f204 <nrf_cc3xx_platform_set_mutexes+0x54>)
    f1b8:	4d13      	ldr	r5, [pc, #76]	; (f208 <nrf_cc3xx_platform_set_mutexes+0x58>)
    f1ba:	e9c4 2300 	strd	r2, r3, [r4]
    f1be:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    f1c2:	e9c4 6302 	strd	r6, r3, [r4, #8]
    f1c6:	4b11      	ldr	r3, [pc, #68]	; (f20c <nrf_cc3xx_platform_set_mutexes+0x5c>)
    f1c8:	6808      	ldr	r0, [r1, #0]
    f1ca:	6018      	str	r0, [r3, #0]
    f1cc:	6848      	ldr	r0, [r1, #4]
    f1ce:	6058      	str	r0, [r3, #4]
    f1d0:	6888      	ldr	r0, [r1, #8]
    f1d2:	6098      	str	r0, [r3, #8]
    f1d4:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    f1d8:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    f1dc:	60de      	str	r6, [r3, #12]
    f1de:	6118      	str	r0, [r3, #16]
    f1e0:	06cb      	lsls	r3, r1, #27
    f1e2:	d50d      	bpl.n	f200 <nrf_cc3xx_platform_set_mutexes+0x50>
    f1e4:	2300      	movs	r3, #0
    f1e6:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    f1ea:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    f1ee:	f505 7088 	add.w	r0, r5, #272	; 0x110
    f1f2:	4790      	blx	r2
    f1f4:	6823      	ldr	r3, [r4, #0]
    f1f6:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    f1fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f1fe:	4718      	bx	r3
    f200:	bd70      	pop	{r4, r5, r6, pc}
    f202:	bf00      	nop
    f204:	20000278 	.word	0x20000278
    f208:	20002b58 	.word	0x20002b58
    f20c:	20000288 	.word	0x20000288

0000f210 <CC_LibInitNoRng>:
    f210:	b510      	push	{r4, lr}
    f212:	f000 f833 	bl	f27c <CC_HalInit>
    f216:	b120      	cbz	r0, f222 <CC_LibInitNoRng+0x12>
    f218:	2403      	movs	r4, #3
    f21a:	f000 f867 	bl	f2ec <CC_PalTerminate>
    f21e:	4620      	mov	r0, r4
    f220:	bd10      	pop	{r4, pc}
    f222:	f000 f835 	bl	f290 <CC_PalInit>
    f226:	b990      	cbnz	r0, f24e <CC_LibInitNoRng+0x3e>
    f228:	f000 f8b0 	bl	f38c <CC_PalPowerSaveModeSelect>
    f22c:	b990      	cbnz	r0, f254 <CC_LibInitNoRng+0x44>
    f22e:	4b0f      	ldr	r3, [pc, #60]	; (f26c <CC_LibInitNoRng+0x5c>)
    f230:	681b      	ldr	r3, [r3, #0]
    f232:	0e1b      	lsrs	r3, r3, #24
    f234:	2bf0      	cmp	r3, #240	; 0xf0
    f236:	d108      	bne.n	f24a <CC_LibInitNoRng+0x3a>
    f238:	4a0d      	ldr	r2, [pc, #52]	; (f270 <CC_LibInitNoRng+0x60>)
    f23a:	4b0e      	ldr	r3, [pc, #56]	; (f274 <CC_LibInitNoRng+0x64>)
    f23c:	6812      	ldr	r2, [r2, #0]
    f23e:	429a      	cmp	r2, r3
    f240:	d00a      	beq.n	f258 <CC_LibInitNoRng+0x48>
    f242:	2407      	movs	r4, #7
    f244:	f000 f81c 	bl	f280 <CC_HalTerminate>
    f248:	e7e7      	b.n	f21a <CC_LibInitNoRng+0xa>
    f24a:	2406      	movs	r4, #6
    f24c:	e7fa      	b.n	f244 <CC_LibInitNoRng+0x34>
    f24e:	2404      	movs	r4, #4
    f250:	4620      	mov	r0, r4
    f252:	bd10      	pop	{r4, pc}
    f254:	2400      	movs	r4, #0
    f256:	e7f5      	b.n	f244 <CC_LibInitNoRng+0x34>
    f258:	2001      	movs	r0, #1
    f25a:	f000 f897 	bl	f38c <CC_PalPowerSaveModeSelect>
    f25e:	4604      	mov	r4, r0
    f260:	2800      	cmp	r0, #0
    f262:	d1f7      	bne.n	f254 <CC_LibInitNoRng+0x44>
    f264:	4b04      	ldr	r3, [pc, #16]	; (f278 <CC_LibInitNoRng+0x68>)
    f266:	6018      	str	r0, [r3, #0]
    f268:	e7d9      	b.n	f21e <CC_LibInitNoRng+0xe>
    f26a:	bf00      	nop
    f26c:	5002b928 	.word	0x5002b928
    f270:	5002ba24 	.word	0x5002ba24
    f274:	20e00000 	.word	0x20e00000
    f278:	5002ba0c 	.word	0x5002ba0c

0000f27c <CC_HalInit>:
    f27c:	2000      	movs	r0, #0
    f27e:	4770      	bx	lr

0000f280 <CC_HalTerminate>:
    f280:	2000      	movs	r0, #0
    f282:	4770      	bx	lr

0000f284 <CC_HalMaskInterrupt>:
    f284:	4b01      	ldr	r3, [pc, #4]	; (f28c <CC_HalMaskInterrupt+0x8>)
    f286:	6018      	str	r0, [r3, #0]
    f288:	4770      	bx	lr
    f28a:	bf00      	nop
    f28c:	5002ba04 	.word	0x5002ba04

0000f290 <CC_PalInit>:
    f290:	b510      	push	{r4, lr}
    f292:	4811      	ldr	r0, [pc, #68]	; (f2d8 <CC_PalInit+0x48>)
    f294:	f000 f848 	bl	f328 <CC_PalMutexCreate>
    f298:	b100      	cbz	r0, f29c <CC_PalInit+0xc>
    f29a:	bd10      	pop	{r4, pc}
    f29c:	480f      	ldr	r0, [pc, #60]	; (f2dc <CC_PalInit+0x4c>)
    f29e:	f000 f843 	bl	f328 <CC_PalMutexCreate>
    f2a2:	2800      	cmp	r0, #0
    f2a4:	d1f9      	bne.n	f29a <CC_PalInit+0xa>
    f2a6:	4c0e      	ldr	r4, [pc, #56]	; (f2e0 <CC_PalInit+0x50>)
    f2a8:	4620      	mov	r0, r4
    f2aa:	f000 f83d 	bl	f328 <CC_PalMutexCreate>
    f2ae:	2800      	cmp	r0, #0
    f2b0:	d1f3      	bne.n	f29a <CC_PalInit+0xa>
    f2b2:	4b0c      	ldr	r3, [pc, #48]	; (f2e4 <CC_PalInit+0x54>)
    f2b4:	480c      	ldr	r0, [pc, #48]	; (f2e8 <CC_PalInit+0x58>)
    f2b6:	601c      	str	r4, [r3, #0]
    f2b8:	f000 f836 	bl	f328 <CC_PalMutexCreate>
    f2bc:	4601      	mov	r1, r0
    f2be:	2800      	cmp	r0, #0
    f2c0:	d1eb      	bne.n	f29a <CC_PalInit+0xa>
    f2c2:	f000 f82d 	bl	f320 <CC_PalDmaInit>
    f2c6:	4604      	mov	r4, r0
    f2c8:	b108      	cbz	r0, f2ce <CC_PalInit+0x3e>
    f2ca:	4620      	mov	r0, r4
    f2cc:	bd10      	pop	{r4, pc}
    f2ce:	f000 f83f 	bl	f350 <CC_PalPowerSaveModeInit>
    f2d2:	4620      	mov	r0, r4
    f2d4:	e7fa      	b.n	f2cc <CC_PalInit+0x3c>
    f2d6:	bf00      	nop
    f2d8:	200002c0 	.word	0x200002c0
    f2dc:	200002b4 	.word	0x200002b4
    f2e0:	200002bc 	.word	0x200002bc
    f2e4:	200002c4 	.word	0x200002c4
    f2e8:	200002b8 	.word	0x200002b8

0000f2ec <CC_PalTerminate>:
    f2ec:	b508      	push	{r3, lr}
    f2ee:	4808      	ldr	r0, [pc, #32]	; (f310 <CC_PalTerminate+0x24>)
    f2f0:	f000 f824 	bl	f33c <CC_PalMutexDestroy>
    f2f4:	4807      	ldr	r0, [pc, #28]	; (f314 <CC_PalTerminate+0x28>)
    f2f6:	f000 f821 	bl	f33c <CC_PalMutexDestroy>
    f2fa:	4807      	ldr	r0, [pc, #28]	; (f318 <CC_PalTerminate+0x2c>)
    f2fc:	f000 f81e 	bl	f33c <CC_PalMutexDestroy>
    f300:	4806      	ldr	r0, [pc, #24]	; (f31c <CC_PalTerminate+0x30>)
    f302:	f000 f81b 	bl	f33c <CC_PalMutexDestroy>
    f306:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    f30a:	f000 b80b 	b.w	f324 <CC_PalDmaTerminate>
    f30e:	bf00      	nop
    f310:	200002c0 	.word	0x200002c0
    f314:	200002b4 	.word	0x200002b4
    f318:	200002bc 	.word	0x200002bc
    f31c:	200002b8 	.word	0x200002b8

0000f320 <CC_PalDmaInit>:
    f320:	2000      	movs	r0, #0
    f322:	4770      	bx	lr

0000f324 <CC_PalDmaTerminate>:
    f324:	4770      	bx	lr
    f326:	bf00      	nop

0000f328 <CC_PalMutexCreate>:
    f328:	b508      	push	{r3, lr}
    f32a:	4b03      	ldr	r3, [pc, #12]	; (f338 <CC_PalMutexCreate+0x10>)
    f32c:	6802      	ldr	r2, [r0, #0]
    f32e:	681b      	ldr	r3, [r3, #0]
    f330:	6810      	ldr	r0, [r2, #0]
    f332:	4798      	blx	r3
    f334:	2000      	movs	r0, #0
    f336:	bd08      	pop	{r3, pc}
    f338:	20000278 	.word	0x20000278

0000f33c <CC_PalMutexDestroy>:
    f33c:	b508      	push	{r3, lr}
    f33e:	4b03      	ldr	r3, [pc, #12]	; (f34c <CC_PalMutexDestroy+0x10>)
    f340:	6802      	ldr	r2, [r0, #0]
    f342:	685b      	ldr	r3, [r3, #4]
    f344:	6810      	ldr	r0, [r2, #0]
    f346:	4798      	blx	r3
    f348:	2000      	movs	r0, #0
    f34a:	bd08      	pop	{r3, pc}
    f34c:	20000278 	.word	0x20000278

0000f350 <CC_PalPowerSaveModeInit>:
    f350:	b570      	push	{r4, r5, r6, lr}
    f352:	4c09      	ldr	r4, [pc, #36]	; (f378 <CC_PalPowerSaveModeInit+0x28>)
    f354:	4d09      	ldr	r5, [pc, #36]	; (f37c <CC_PalPowerSaveModeInit+0x2c>)
    f356:	6920      	ldr	r0, [r4, #16]
    f358:	68ab      	ldr	r3, [r5, #8]
    f35a:	4798      	blx	r3
    f35c:	b118      	cbz	r0, f366 <CC_PalPowerSaveModeInit+0x16>
    f35e:	4b08      	ldr	r3, [pc, #32]	; (f380 <CC_PalPowerSaveModeInit+0x30>)
    f360:	4808      	ldr	r0, [pc, #32]	; (f384 <CC_PalPowerSaveModeInit+0x34>)
    f362:	685b      	ldr	r3, [r3, #4]
    f364:	4798      	blx	r3
    f366:	4a08      	ldr	r2, [pc, #32]	; (f388 <CC_PalPowerSaveModeInit+0x38>)
    f368:	68eb      	ldr	r3, [r5, #12]
    f36a:	6920      	ldr	r0, [r4, #16]
    f36c:	2100      	movs	r1, #0
    f36e:	6011      	str	r1, [r2, #0]
    f370:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f374:	4718      	bx	r3
    f376:	bf00      	nop
    f378:	20000288 	.word	0x20000288
    f37c:	20000278 	.word	0x20000278
    f380:	20000268 	.word	0x20000268
    f384:	00015bf0 	.word	0x00015bf0
    f388:	20002b44 	.word	0x20002b44

0000f38c <CC_PalPowerSaveModeSelect>:
    f38c:	b570      	push	{r4, r5, r6, lr}
    f38e:	4d1a      	ldr	r5, [pc, #104]	; (f3f8 <CC_PalPowerSaveModeSelect+0x6c>)
    f390:	4e1a      	ldr	r6, [pc, #104]	; (f3fc <CC_PalPowerSaveModeSelect+0x70>)
    f392:	4604      	mov	r4, r0
    f394:	68b2      	ldr	r2, [r6, #8]
    f396:	6928      	ldr	r0, [r5, #16]
    f398:	4790      	blx	r2
    f39a:	b9f0      	cbnz	r0, f3da <CC_PalPowerSaveModeSelect+0x4e>
    f39c:	b15c      	cbz	r4, f3b6 <CC_PalPowerSaveModeSelect+0x2a>
    f39e:	4c18      	ldr	r4, [pc, #96]	; (f400 <CC_PalPowerSaveModeSelect+0x74>)
    f3a0:	6823      	ldr	r3, [r4, #0]
    f3a2:	b1ab      	cbz	r3, f3d0 <CC_PalPowerSaveModeSelect+0x44>
    f3a4:	2b01      	cmp	r3, #1
    f3a6:	d01a      	beq.n	f3de <CC_PalPowerSaveModeSelect+0x52>
    f3a8:	3b01      	subs	r3, #1
    f3aa:	6023      	str	r3, [r4, #0]
    f3ac:	6928      	ldr	r0, [r5, #16]
    f3ae:	68f3      	ldr	r3, [r6, #12]
    f3b0:	4798      	blx	r3
    f3b2:	2000      	movs	r0, #0
    f3b4:	bd70      	pop	{r4, r5, r6, pc}
    f3b6:	4c12      	ldr	r4, [pc, #72]	; (f400 <CC_PalPowerSaveModeSelect+0x74>)
    f3b8:	6821      	ldr	r1, [r4, #0]
    f3ba:	b939      	cbnz	r1, f3cc <CC_PalPowerSaveModeSelect+0x40>
    f3bc:	4b11      	ldr	r3, [pc, #68]	; (f404 <CC_PalPowerSaveModeSelect+0x78>)
    f3be:	4a12      	ldr	r2, [pc, #72]	; (f408 <CC_PalPowerSaveModeSelect+0x7c>)
    f3c0:	2001      	movs	r0, #1
    f3c2:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    f3c6:	6813      	ldr	r3, [r2, #0]
    f3c8:	2b00      	cmp	r3, #0
    f3ca:	d1fc      	bne.n	f3c6 <CC_PalPowerSaveModeSelect+0x3a>
    f3cc:	3101      	adds	r1, #1
    f3ce:	6021      	str	r1, [r4, #0]
    f3d0:	68f3      	ldr	r3, [r6, #12]
    f3d2:	6928      	ldr	r0, [r5, #16]
    f3d4:	4798      	blx	r3
    f3d6:	2000      	movs	r0, #0
    f3d8:	bd70      	pop	{r4, r5, r6, pc}
    f3da:	480c      	ldr	r0, [pc, #48]	; (f40c <CC_PalPowerSaveModeSelect+0x80>)
    f3dc:	bd70      	pop	{r4, r5, r6, pc}
    f3de:	4a0a      	ldr	r2, [pc, #40]	; (f408 <CC_PalPowerSaveModeSelect+0x7c>)
    f3e0:	6813      	ldr	r3, [r2, #0]
    f3e2:	2b00      	cmp	r3, #0
    f3e4:	d1fc      	bne.n	f3e0 <CC_PalPowerSaveModeSelect+0x54>
    f3e6:	4a07      	ldr	r2, [pc, #28]	; (f404 <CC_PalPowerSaveModeSelect+0x78>)
    f3e8:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    f3ec:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    f3f0:	f7ff ff48 	bl	f284 <CC_HalMaskInterrupt>
    f3f4:	6823      	ldr	r3, [r4, #0]
    f3f6:	e7d7      	b.n	f3a8 <CC_PalPowerSaveModeSelect+0x1c>
    f3f8:	20000288 	.word	0x20000288
    f3fc:	20000278 	.word	0x20000278
    f400:	20002b44 	.word	0x20002b44
    f404:	5002a000 	.word	0x5002a000
    f408:	5002b910 	.word	0x5002b910
    f40c:	ffff8fe9 	.word	0xffff8fe9

0000f410 <crc16calc>:
 uint16_t crc16calc(char* pData, int length){
    f410:	b410      	push	{r4}
    f412:	4604      	mov	r4, r0
     uint16_t wCrc = 0xffff;
    f414:	f64f 70ff 	movw	r0, #65535	; 0xffff
     while (length--) {
    f418:	460b      	mov	r3, r1
    f41a:	3901      	subs	r1, #1
    f41c:	b1a3      	cbz	r3, f448 <crc16calc+0x38>
         wCrc ^= *(unsigned char *)pData++ << 8;
    f41e:	f814 3b01 	ldrb.w	r3, [r4], #1
    f422:	ea80 2003 	eor.w	r0, r0, r3, lsl #8
         for (i=0; i < 8; i++)
    f426:	2300      	movs	r3, #0
    f428:	e006      	b.n	f438 <crc16calc+0x28>
             wCrc = wCrc & 0x8000 ? (wCrc << 1) ^ 0x1021 : wCrc << 1;
    f42a:	f241 0221 	movw	r2, #4129	; 0x1021
    f42e:	ea82 0040 	eor.w	r0, r2, r0, lsl #1
    f432:	b280      	uxth	r0, r0
         for (i=0; i < 8; i++)
    f434:	3301      	adds	r3, #1
    f436:	b2db      	uxtb	r3, r3
    f438:	2b07      	cmp	r3, #7
    f43a:	d8ed      	bhi.n	f418 <crc16calc+0x8>
             wCrc = wCrc & 0x8000 ? (wCrc << 1) ^ 0x1021 : wCrc << 1;
    f43c:	f410 4f00 	tst.w	r0, #32768	; 0x8000
    f440:	d1f3      	bne.n	f42a <crc16calc+0x1a>
    f442:	0040      	lsls	r0, r0, #1
    f444:	b280      	uxth	r0, r0
    f446:	e7f5      	b.n	f434 <crc16calc+0x24>
 }
    f448:	bc10      	pop	{r4}
    f44a:	4770      	bx	lr

0000f44c <EncapsulationMsgs>:
 void EncapsulationMsgs(char *data1,char *data2,int len){
    f44c:	b538      	push	{r3, r4, r5, lr}
    f44e:	460d      	mov	r5, r1
    f450:	4611      	mov	r1, r2
	 data2[0]=0x7E;
    f452:	237e      	movs	r3, #126	; 0x7e
    f454:	702b      	strb	r3, [r5, #0]
	 int i = 1;
    f456:	2401      	movs	r4, #1
	 for(;i<=len;i++)data2[i]=data1[i-1];
    f458:	428c      	cmp	r4, r1
    f45a:	dc05      	bgt.n	f468 <EncapsulationMsgs+0x1c>
    f45c:	1903      	adds	r3, r0, r4
    f45e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
    f462:	552b      	strb	r3, [r5, r4]
    f464:	3401      	adds	r4, #1
    f466:	e7f7      	b.n	f458 <EncapsulationMsgs+0xc>
	 aux=crc16calc(data1,len);
    f468:	f7ff ffd2 	bl	f410 <crc16calc>
	 data2[i+1] = aux;
    f46c:	1c63      	adds	r3, r4, #1
    f46e:	54e8      	strb	r0, [r5, r3]
	 data2[i]= aux>>8;
    f470:	0a00      	lsrs	r0, r0, #8
    f472:	5528      	strb	r0, [r5, r4]
	 data2[i+2] = 0xFF;
    f474:	3402      	adds	r4, #2
    f476:	23ff      	movs	r3, #255	; 0xff
    f478:	552b      	strb	r3, [r5, r4]
 }
    f47a:	bd38      	pop	{r3, r4, r5, pc}

0000f47c <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    f47c:	4602      	mov	r2, r0
    f47e:	b158      	cbz	r0, f498 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    f480:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    f482:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    f486:	2b01      	cmp	r3, #1
    f488:	d003      	beq.n	f492 <sys_notify_validate+0x16>
    f48a:	2b03      	cmp	r3, #3
    f48c:	d107      	bne.n	f49e <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    f48e:	6803      	ldr	r3, [r0, #0]
    f490:	b143      	cbz	r3, f4a4 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    f492:	2000      	movs	r0, #0
    f494:	6090      	str	r0, [r2, #8]
    f496:	4770      	bx	lr
		return -EINVAL;
    f498:	f06f 0015 	mvn.w	r0, #21
    f49c:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    f49e:	f06f 0015 	mvn.w	r0, #21
    f4a2:	4770      	bx	lr
			rv = -EINVAL;
    f4a4:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    f4a8:	4770      	bx	lr

0000f4aa <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    f4aa:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    f4ac:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    f4ae:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    f4b2:	6081      	str	r1, [r0, #8]
	switch (method) {
    f4b4:	2a03      	cmp	r2, #3
    f4b6:	d103      	bne.n	f4c0 <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    f4b8:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    f4ba:	2200      	movs	r2, #0
    f4bc:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    f4be:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
    f4c0:	2000      	movs	r0, #0
    f4c2:	e7fa      	b.n	f4ba <sys_notify_finalize+0x10>

0000f4c4 <arch_printk_char_out>:
}
    f4c4:	2000      	movs	r0, #0
    f4c6:	4770      	bx	lr

0000f4c8 <str_out>:
{
    f4c8:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    f4ca:	680c      	ldr	r4, [r1, #0]
    f4cc:	b154      	cbz	r4, f4e4 <str_out+0x1c>
    f4ce:	688a      	ldr	r2, [r1, #8]
    f4d0:	684b      	ldr	r3, [r1, #4]
    f4d2:	429a      	cmp	r2, r3
    f4d4:	da06      	bge.n	f4e4 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
    f4d6:	3b01      	subs	r3, #1
    f4d8:	429a      	cmp	r2, r3
    f4da:	d008      	beq.n	f4ee <str_out+0x26>
		ctx->str[ctx->count++] = c;
    f4dc:	1c53      	adds	r3, r2, #1
    f4de:	608b      	str	r3, [r1, #8]
    f4e0:	54a0      	strb	r0, [r4, r2]
    f4e2:	e002      	b.n	f4ea <str_out+0x22>
		ctx->count++;
    f4e4:	688b      	ldr	r3, [r1, #8]
    f4e6:	3301      	adds	r3, #1
    f4e8:	608b      	str	r3, [r1, #8]
}
    f4ea:	bc10      	pop	{r4}
    f4ec:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    f4ee:	1c53      	adds	r3, r2, #1
    f4f0:	608b      	str	r3, [r1, #8]
    f4f2:	2300      	movs	r3, #0
    f4f4:	54a3      	strb	r3, [r4, r2]
    f4f6:	e7f8      	b.n	f4ea <str_out+0x22>

0000f4f8 <printk>:
{
    f4f8:	b40f      	push	{r0, r1, r2, r3}
    f4fa:	b500      	push	{lr}
    f4fc:	b083      	sub	sp, #12
    f4fe:	a904      	add	r1, sp, #16
    f500:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    f504:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    f506:	f7f1 fa23 	bl	950 <vprintk>
}
    f50a:	b003      	add	sp, #12
    f50c:	f85d eb04 	ldr.w	lr, [sp], #4
    f510:	b004      	add	sp, #16
    f512:	4770      	bx	lr

0000f514 <snprintk>:
{
    f514:	b40c      	push	{r2, r3}
    f516:	b500      	push	{lr}
    f518:	b083      	sub	sp, #12
    f51a:	ab04      	add	r3, sp, #16
    f51c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    f520:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    f522:	f7f1 fa25 	bl	970 <vsnprintk>
}
    f526:	b003      	add	sp, #12
    f528:	f85d eb04 	ldr.w	lr, [sp], #4
    f52c:	b002      	add	sp, #8
    f52e:	4770      	bx	lr

0000f530 <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    f530:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    f534:	8b01      	ldrh	r1, [r0, #24]
    f536:	f021 0107 	bic.w	r1, r1, #7
    f53a:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    f53c:	8301      	strh	r1, [r0, #24]
}
    f53e:	4770      	bx	lr

0000f540 <notify_monitors>:
{
    f540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f544:	4606      	mov	r6, r0
    f546:	460f      	mov	r7, r1
    f548:	4690      	mov	r8, r2
	return list->head;
    f54a:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    f54c:	b119      	cbz	r1, f556 <notify_monitors+0x16>
    f54e:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    f550:	b131      	cbz	r1, f560 <notify_monitors+0x20>
	return node->next;
    f552:	680c      	ldr	r4, [r1, #0]
    f554:	e004      	b.n	f560 <notify_monitors+0x20>
    f556:	460c      	mov	r4, r1
    f558:	e002      	b.n	f560 <notify_monitors+0x20>
    f55a:	4623      	mov	r3, r4
    f55c:	4621      	mov	r1, r4
    f55e:	461c      	mov	r4, r3
    f560:	b159      	cbz	r1, f57a <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    f562:	684d      	ldr	r5, [r1, #4]
    f564:	4643      	mov	r3, r8
    f566:	463a      	mov	r2, r7
    f568:	4630      	mov	r0, r6
    f56a:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    f56c:	2c00      	cmp	r4, #0
    f56e:	d0f4      	beq.n	f55a <notify_monitors+0x1a>
    f570:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    f572:	2c00      	cmp	r4, #0
    f574:	d0f2      	beq.n	f55c <notify_monitors+0x1c>
	return node->next;
    f576:	6823      	ldr	r3, [r4, #0]
    f578:	e7f0      	b.n	f55c <notify_monitors+0x1c>
}
    f57a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f57e <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    f57e:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    f580:	f013 0307 	ands.w	r3, r3, #7
    f584:	d103      	bne.n	f58e <process_recheck+0x10>
	return list->head;
    f586:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    f588:	b10a      	cbz	r2, f58e <process_recheck+0x10>
		evt = EVT_START;
    f58a:	2003      	movs	r0, #3
    f58c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    f58e:	2b02      	cmp	r3, #2
    f590:	d003      	beq.n	f59a <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    f592:	2b01      	cmp	r3, #1
    f594:	d006      	beq.n	f5a4 <process_recheck+0x26>
	int evt = EVT_NOP;
    f596:	2000      	movs	r0, #0
    f598:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    f59a:	8b42      	ldrh	r2, [r0, #26]
    f59c:	2a00      	cmp	r2, #0
    f59e:	d1f8      	bne.n	f592 <process_recheck+0x14>
		evt = EVT_STOP;
    f5a0:	2004      	movs	r0, #4
    f5a2:	4770      	bx	lr
    f5a4:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    f5a6:	b10b      	cbz	r3, f5ac <process_recheck+0x2e>
		evt = EVT_RESET;
    f5a8:	2005      	movs	r0, #5
}
    f5aa:	4770      	bx	lr
	int evt = EVT_NOP;
    f5ac:	2000      	movs	r0, #0
    f5ae:	4770      	bx	lr

0000f5b0 <process_complete>:
{
    f5b0:	b538      	push	{r3, r4, r5, lr}
    f5b2:	4604      	mov	r4, r0
    f5b4:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    f5b6:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    f5b8:	2a00      	cmp	r2, #0
    f5ba:	db07      	blt.n	f5cc <process_complete+0x1c>
    f5bc:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    f5c0:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    f5c2:	2a01      	cmp	r2, #1
    f5c4:	d90e      	bls.n	f5e4 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    f5c6:	2b04      	cmp	r3, #4
    f5c8:	d032      	beq.n	f630 <process_complete+0x80>
}
    f5ca:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
    f5cc:	e9d0 0100 	ldrd	r0, r1, [r0]
    f5d0:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    f5d4:	2300      	movs	r3, #0
    f5d6:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    f5d8:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    f5da:	2101      	movs	r1, #1
    f5dc:	4620      	mov	r0, r4
    f5de:	f7ff ffa7 	bl	f530 <set_state>
    f5e2:	e7f2      	b.n	f5ca <process_complete+0x1a>
		*clients = mgr->clients;
    f5e4:	e9d0 0100 	ldrd	r0, r1, [r0]
    f5e8:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    f5ec:	2200      	movs	r2, #0
    f5ee:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    f5f0:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    f5f2:	2b06      	cmp	r3, #6
    f5f4:	d117      	bne.n	f626 <process_complete+0x76>
	return list->head;
    f5f6:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    f5f8:	b13b      	cbz	r3, f60a <process_complete+0x5a>
				mgr->refs += 1U;
    f5fa:	8b62      	ldrh	r2, [r4, #26]
    f5fc:	3201      	adds	r2, #1
    f5fe:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
    f600:	2b00      	cmp	r3, #0
    f602:	d0f9      	beq.n	f5f8 <process_complete+0x48>
	return node->next;
    f604:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    f606:	2b00      	cmp	r3, #0
    f608:	d1f6      	bne.n	f5f8 <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
    f60a:	2102      	movs	r1, #2
    f60c:	4620      	mov	r0, r4
    f60e:	f7ff ff8f 	bl	f530 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    f612:	4620      	mov	r0, r4
    f614:	f7ff ffb3 	bl	f57e <process_recheck>
    f618:	2800      	cmp	r0, #0
    f61a:	d0d6      	beq.n	f5ca <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    f61c:	8b23      	ldrh	r3, [r4, #24]
    f61e:	f043 0320 	orr.w	r3, r3, #32
    f622:	8323      	strh	r3, [r4, #24]
    f624:	e7d1      	b.n	f5ca <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    f626:	2100      	movs	r1, #0
    f628:	4620      	mov	r0, r4
    f62a:	f7ff ff81 	bl	f530 <set_state>
    f62e:	e7f0      	b.n	f612 <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
    f630:	2100      	movs	r1, #0
    f632:	f7ff ff7d 	bl	f530 <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    f636:	4620      	mov	r0, r4
    f638:	f7ff ffa1 	bl	f57e <process_recheck>
    f63c:	2800      	cmp	r0, #0
    f63e:	d0c4      	beq.n	f5ca <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    f640:	8b23      	ldrh	r3, [r4, #24]
    f642:	f043 0320 	orr.w	r3, r3, #32
    f646:	8323      	strh	r3, [r4, #24]
}
    f648:	e7bf      	b.n	f5ca <process_complete+0x1a>

0000f64a <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    f64a:	b158      	cbz	r0, f664 <validate_args+0x1a>
{
    f64c:	b510      	push	{r4, lr}
    f64e:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    f650:	b159      	cbz	r1, f66a <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    f652:	1d08      	adds	r0, r1, #4
    f654:	f7ff ff12 	bl	f47c <sys_notify_validate>
	if ((rv == 0)
    f658:	b918      	cbnz	r0, f662 <validate_args+0x18>
	    && ((cli->notify.flags
    f65a:	68a3      	ldr	r3, [r4, #8]
    f65c:	f033 0303 	bics.w	r3, r3, #3
    f660:	d106      	bne.n	f670 <validate_args+0x26>
}
    f662:	bd10      	pop	{r4, pc}
		return -EINVAL;
    f664:	f06f 0015 	mvn.w	r0, #21
}
    f668:	4770      	bx	lr
		return -EINVAL;
    f66a:	f06f 0015 	mvn.w	r0, #21
    f66e:	e7f8      	b.n	f662 <validate_args+0x18>
		rv = -EINVAL;
    f670:	f06f 0015 	mvn.w	r0, #21
    f674:	e7f5      	b.n	f662 <validate_args+0x18>

0000f676 <notify_one>:
{
    f676:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f67a:	4607      	mov	r7, r0
    f67c:	460c      	mov	r4, r1
    f67e:	4616      	mov	r6, r2
    f680:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    f682:	4619      	mov	r1, r3
    f684:	1d20      	adds	r0, r4, #4
    f686:	f7ff ff10 	bl	f4aa <sys_notify_finalize>
	if (cb) {
    f68a:	b128      	cbz	r0, f698 <notify_one+0x22>
    f68c:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    f68e:	462b      	mov	r3, r5
    f690:	4632      	mov	r2, r6
    f692:	4621      	mov	r1, r4
    f694:	4638      	mov	r0, r7
    f696:	47c0      	blx	r8
}
    f698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f69c <notify_all>:
{
    f69c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    f6a0:	4681      	mov	r9, r0
    f6a2:	460c      	mov	r4, r1
    f6a4:	4690      	mov	r8, r2
    f6a6:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
    f6a8:	e005      	b.n	f6b6 <notify_all+0x1a>
	list->tail = node;
    f6aa:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
    f6ac:	463b      	mov	r3, r7
    f6ae:	4642      	mov	r2, r8
    f6b0:	4648      	mov	r0, r9
    f6b2:	f7ff ffe0 	bl	f676 <notify_one>
	return list->head;
    f6b6:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    f6b8:	b129      	cbz	r1, f6c6 <notify_all+0x2a>
	return node->next;
    f6ba:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    f6bc:	6025      	str	r5, [r4, #0]
	return list->tail;
    f6be:	6866      	ldr	r6, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    f6c0:	428e      	cmp	r6, r1
    f6c2:	d1f3      	bne.n	f6ac <notify_all+0x10>
    f6c4:	e7f1      	b.n	f6aa <notify_all+0xe>
}
    f6c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000f6ca <transition_complete>:
{
    f6ca:	b510      	push	{r4, lr}
	__asm__ volatile(
    f6cc:	f04f 0420 	mov.w	r4, #32
    f6d0:	f3ef 8211 	mrs	r2, BASEPRI
    f6d4:	f384 8812 	msr	BASEPRI_MAX, r4
    f6d8:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    f6dc:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    f6de:	2101      	movs	r1, #1
    f6e0:	f7f1 f95c 	bl	99c <process_event>
}
    f6e4:	bd10      	pop	{r4, pc}

0000f6e6 <onoff_manager_init>:
	if ((mgr == NULL)
    f6e6:	4603      	mov	r3, r0
    f6e8:	b168      	cbz	r0, f706 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    f6ea:	b179      	cbz	r1, f70c <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    f6ec:	680a      	ldr	r2, [r1, #0]
    f6ee:	b182      	cbz	r2, f712 <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    f6f0:	684a      	ldr	r2, [r1, #4]
    f6f2:	b18a      	cbz	r2, f718 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    f6f4:	2000      	movs	r0, #0
    f6f6:	6018      	str	r0, [r3, #0]
    f6f8:	6058      	str	r0, [r3, #4]
    f6fa:	6098      	str	r0, [r3, #8]
    f6fc:	60d8      	str	r0, [r3, #12]
    f6fe:	6158      	str	r0, [r3, #20]
    f700:	6198      	str	r0, [r3, #24]
    f702:	6119      	str	r1, [r3, #16]
	return 0;
    f704:	4770      	bx	lr
		return -EINVAL;
    f706:	f06f 0015 	mvn.w	r0, #21
    f70a:	4770      	bx	lr
    f70c:	f06f 0015 	mvn.w	r0, #21
    f710:	4770      	bx	lr
    f712:	f06f 0015 	mvn.w	r0, #21
    f716:	4770      	bx	lr
    f718:	f06f 0015 	mvn.w	r0, #21
}
    f71c:	4770      	bx	lr

0000f71e <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    f71e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f720:	4604      	mov	r4, r0
    f722:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    f724:	f7ff ff91 	bl	f64a <validate_args>

	if (rv < 0) {
    f728:	1e06      	subs	r6, r0, #0
    f72a:	db37      	blt.n	f79c <onoff_request+0x7e>
    f72c:	f04f 0320 	mov.w	r3, #32
    f730:	f3ef 8211 	mrs	r2, BASEPRI
    f734:	f383 8812 	msr	BASEPRI_MAX, r3
    f738:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    f73c:	8b25      	ldrh	r5, [r4, #24]
    f73e:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    f742:	8b63      	ldrh	r3, [r4, #26]
    f744:	f64f 71ff 	movw	r1, #65535	; 0xffff
    f748:	428b      	cmp	r3, r1
    f74a:	d02f      	beq.n	f7ac <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    f74c:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    f74e:	2d02      	cmp	r5, #2
    f750:	d00c      	beq.n	f76c <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    f752:	b18d      	cbz	r5, f778 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
    f754:	2d04      	cmp	r5, #4
    f756:	d00f      	beq.n	f778 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
    f758:	2d06      	cmp	r5, #6
    f75a:	d00d      	beq.n	f778 <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    f75c:	2d05      	cmp	r5, #5
    f75e:	d01f      	beq.n	f7a0 <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
    f760:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    f764:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    f766:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    f768:	4608      	mov	r0, r1
    f76a:	e00a      	b.n	f782 <onoff_request+0x64>
		mgr->refs += 1U;
    f76c:	3301      	adds	r3, #1
    f76e:	8363      	strh	r3, [r4, #26]
		notify = true;
    f770:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
    f772:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    f774:	4618      	mov	r0, r3
    f776:	e004      	b.n	f782 <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
    f778:	fab5 f385 	clz	r3, r5
    f77c:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    f77e:	2100      	movs	r1, #0
		add_client = true;
    f780:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
    f782:	b128      	cbz	r0, f790 <onoff_request+0x72>
	parent->next = child;
    f784:	2000      	movs	r0, #0
    f786:	6038      	str	r0, [r7, #0]
	return list->tail;
    f788:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    f78a:	b1a8      	cbz	r0, f7b8 <onoff_request+0x9a>
	parent->next = child;
    f78c:	6007      	str	r7, [r0, #0]
	list->tail = node;
    f78e:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    f790:	b9ab      	cbnz	r3, f7be <onoff_request+0xa0>
	__asm__ volatile(
    f792:	f382 8811 	msr	BASEPRI, r2
    f796:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    f79a:	b9a9      	cbnz	r1, f7c8 <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    f79c:	4630      	mov	r0, r6
    f79e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
    f7a0:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    f7a4:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    f7a6:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    f7a8:	4608      	mov	r0, r1
    f7aa:	e7ea      	b.n	f782 <onoff_request+0x64>
		rv = -EAGAIN;
    f7ac:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    f7b0:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    f7b2:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    f7b4:	4608      	mov	r0, r1
    f7b6:	e7e4      	b.n	f782 <onoff_request+0x64>
    f7b8:	6067      	str	r7, [r4, #4]
	list->head = node;
    f7ba:	6027      	str	r7, [r4, #0]
}
    f7bc:	e7e8      	b.n	f790 <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
    f7be:	2102      	movs	r1, #2
    f7c0:	4620      	mov	r0, r4
    f7c2:	f7f1 f8eb 	bl	99c <process_event>
    f7c6:	e7e9      	b.n	f79c <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
    f7c8:	2300      	movs	r3, #0
    f7ca:	462a      	mov	r2, r5
    f7cc:	4639      	mov	r1, r7
    f7ce:	4620      	mov	r0, r4
    f7d0:	f7ff ff51 	bl	f676 <notify_one>
    f7d4:	e7e2      	b.n	f79c <onoff_request+0x7e>

0000f7d6 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    f7d6:	b510      	push	{r4, lr}
	__asm__ volatile(
    f7d8:	f04f 0320 	mov.w	r3, #32
    f7dc:	f3ef 8211 	mrs	r2, BASEPRI
    f7e0:	f383 8812 	msr	BASEPRI_MAX, r3
    f7e4:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    f7e8:	8b03      	ldrh	r3, [r0, #24]
    f7ea:	f003 0307 	and.w	r3, r3, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    f7ee:	2b02      	cmp	r3, #2
    f7f0:	d007      	beq.n	f802 <onoff_release+0x2c>
		if (state == ONOFF_STATE_ERROR) {
    f7f2:	2b01      	cmp	r3, #1
    f7f4:	d002      	beq.n	f7fc <onoff_release+0x26>
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    f7f6:	f06f 0485 	mvn.w	r4, #133	; 0x85
	__ASSERT_NO_MSG(mgr->refs > 0);
	mgr->refs -= 1U;
	stop = (mgr->refs == 0);

out:
	if (stop) {
    f7fa:	e008      	b.n	f80e <onoff_release+0x38>
			rv = -EIO;
    f7fc:	f06f 0404 	mvn.w	r4, #4
    f800:	e005      	b.n	f80e <onoff_release+0x38>
    f802:	461c      	mov	r4, r3
	mgr->refs -= 1U;
    f804:	8b43      	ldrh	r3, [r0, #26]
    f806:	3b01      	subs	r3, #1
    f808:	b29b      	uxth	r3, r3
    f80a:	8343      	strh	r3, [r0, #26]
	if (stop) {
    f80c:	b12b      	cbz	r3, f81a <onoff_release+0x44>
	__asm__ volatile(
    f80e:	f382 8811 	msr	BASEPRI, r2
    f812:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
}
    f816:	4620      	mov	r0, r4
    f818:	bd10      	pop	{r4, pc}
		process_event(mgr, EVT_RECHECK, key);
    f81a:	2102      	movs	r1, #2
    f81c:	f7f1 f8be 	bl	99c <process_event>
    f820:	e7f9      	b.n	f816 <onoff_release+0x40>

0000f822 <onoff_cancel>:
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
	if ((mgr == NULL) || (cli == NULL)) {
    f822:	2800      	cmp	r0, #0
    f824:	d031      	beq.n	f88a <onoff_cancel+0x68>
{
    f826:	b470      	push	{r4, r5, r6}
    f828:	4605      	mov	r5, r0
	if ((mgr == NULL) || (cli == NULL)) {
    f82a:	2900      	cmp	r1, #0
    f82c:	d030      	beq.n	f890 <onoff_cancel+0x6e>
	__asm__ volatile(
    f82e:	f04f 0320 	mov.w	r3, #32
    f832:	f3ef 8611 	mrs	r6, BASEPRI
    f836:	f383 8812 	msr	BASEPRI_MAX, r3
    f83a:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    f83e:	8b00      	ldrh	r0, [r0, #24]
    f840:	f000 0007 	and.w	r0, r0, #7

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
    f844:	460c      	mov	r4, r1
	return list->head;
    f846:	682b      	ldr	r3, [r5, #0]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    f848:	2200      	movs	r2, #0
    f84a:	b1b3      	cbz	r3, f87a <onoff_cancel+0x58>
    f84c:	429c      	cmp	r4, r3
    f84e:	d002      	beq.n	f856 <onoff_cancel+0x34>
    f850:	461a      	mov	r2, r3
    f852:	681b      	ldr	r3, [r3, #0]
    f854:	e7f9      	b.n	f84a <onoff_cancel+0x28>
Z_GENLIST_REMOVE(slist, snode)
    f856:	b13a      	cbz	r2, f868 <onoff_cancel+0x46>
	return node->next;
    f858:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
    f85a:	6013      	str	r3, [r2, #0]
	return list->tail;
    f85c:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    f85e:	4299      	cmp	r1, r3
    f860:	d009      	beq.n	f876 <onoff_cancel+0x54>
	parent->next = child;
    f862:	2300      	movs	r3, #0
    f864:	600b      	str	r3, [r1, #0]
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
    f866:	e00a      	b.n	f87e <onoff_cancel+0x5c>
	return node->next;
    f868:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    f86a:	602b      	str	r3, [r5, #0]
	return list->tail;
    f86c:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    f86e:	4291      	cmp	r1, r2
    f870:	d1f7      	bne.n	f862 <onoff_cancel+0x40>
	list->tail = node;
    f872:	606b      	str	r3, [r5, #4]
}
    f874:	e7f5      	b.n	f862 <onoff_cancel+0x40>
	list->tail = node;
    f876:	606a      	str	r2, [r5, #4]
}
    f878:	e7f3      	b.n	f862 <onoff_cancel+0x40>
	int rv = -EALREADY;
    f87a:	f06f 0077 	mvn.w	r0, #119	; 0x77
	__asm__ volatile(
    f87e:	f386 8811 	msr	BASEPRI, r6
    f882:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
    f886:	bc70      	pop	{r4, r5, r6}
    f888:	4770      	bx	lr
		return -EINVAL;
    f88a:	f06f 0015 	mvn.w	r0, #21
}
    f88e:	4770      	bx	lr
		return -EINVAL;
    f890:	f06f 0015 	mvn.w	r0, #21
    f894:	e7f7      	b.n	f886 <onoff_cancel+0x64>

0000f896 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    f896:	b508      	push	{r3, lr}
    f898:	4604      	mov	r4, r0
    f89a:	4608      	mov	r0, r1
    f89c:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    f89e:	461a      	mov	r2, r3
    f8a0:	47a0      	blx	r4
	return z_impl_z_current_get();
    f8a2:	f7ff f90d 	bl	eac0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    f8a6:	f7f5 f901 	bl	4aac <z_impl_k_thread_abort>

0000f8aa <chunk_mem>:
#include "heap.h"

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    f8aa:	00c9      	lsls	r1, r1, #3
	return big_heap_chunks(bytes / CHUNK_UNIT);
}

static inline bool big_heap(struct z_heap *h)
{
	return big_heap_chunks(h->end_chunk);
    f8ac:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    f8ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    f8b2:	d303      	bcc.n	f8bc <chunk_mem+0x12>
    f8b4:	2308      	movs	r3, #8
    f8b6:	4419      	add	r1, r3

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
    f8b8:	4408      	add	r0, r1
    f8ba:	4770      	bx	lr
    f8bc:	2304      	movs	r3, #4
    f8be:	e7fa      	b.n	f8b6 <chunk_mem+0xc>

0000f8c0 <free_list_remove_bidx>:

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
    f8c0:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
    f8c2:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
    f8c6:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    f8c8:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    f8cc:	d317      	bcc.n	f8fe <free_list_remove_bidx+0x3e>
		return ((uint32_t *)cmem)[f];
    f8ce:	68eb      	ldr	r3, [r5, #12]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & (1 << bidx));

	if (next_free_chunk(h, c) == c) {
    f8d0:	4299      	cmp	r1, r3
    f8d2:	d016      	beq.n	f902 <free_list_remove_bidx+0x42>
	if (big_heap(h)) {
    f8d4:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    f8d8:	d320      	bcc.n	f91c <free_list_remove_bidx+0x5c>
		return ((uint32_t *)cmem)[f];
    f8da:	68a9      	ldr	r1, [r5, #8]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
    f8dc:	3204      	adds	r2, #4
    f8de:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	void *cmem = &buf[c];
    f8e2:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
    f8e6:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    f8ea:	d319      	bcc.n	f920 <free_list_remove_bidx+0x60>
		((uint32_t *)cmem)[f] = val;
    f8ec:	60d3      	str	r3, [r2, #12]
	void *cmem = &buf[c];
    f8ee:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
    f8f2:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
    f8f4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    f8f8:	d314      	bcc.n	f924 <free_list_remove_bidx+0x64>
		((uint32_t *)cmem)[f] = val;
    f8fa:	6099      	str	r1, [r3, #8]
    f8fc:	e00c      	b.n	f918 <free_list_remove_bidx+0x58>
		return ((uint16_t *)cmem)[f];
    f8fe:	88eb      	ldrh	r3, [r5, #6]
    f900:	e7e6      	b.n	f8d0 <free_list_remove_bidx+0x10>
		h->avail_buckets &= ~(1 << bidx);
    f902:	2301      	movs	r3, #1
    f904:	fa03 f102 	lsl.w	r1, r3, r2
    f908:	68c3      	ldr	r3, [r0, #12]
    f90a:	ea23 0301 	bic.w	r3, r3, r1
    f90e:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    f910:	3204      	adds	r2, #4
    f912:	2300      	movs	r3, #0
    f914:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
		set_next_free_chunk(h, first, second);
		set_prev_free_chunk(h, second, first);
	}
}
    f918:	bc30      	pop	{r4, r5}
    f91a:	4770      	bx	lr
    f91c:	88a9      	ldrh	r1, [r5, #4]
    f91e:	e7dd      	b.n	f8dc <free_list_remove_bidx+0x1c>
		((uint16_t *)cmem)[f] = val;
    f920:	80d3      	strh	r3, [r2, #6]
    f922:	e7e4      	b.n	f8ee <free_list_remove_bidx+0x2e>
    f924:	8099      	strh	r1, [r3, #4]
    f926:	e7f7      	b.n	f918 <free_list_remove_bidx+0x58>

0000f928 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
    f928:	b470      	push	{r4, r5, r6}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
    f92a:	1d13      	adds	r3, r2, #4
    f92c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    f930:	b9d3      	cbnz	r3, f968 <free_list_add_bidx+0x40>
		CHECK((h->avail_buckets & (1 << bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << bidx);
    f932:	2301      	movs	r3, #1
    f934:	fa03 f402 	lsl.w	r4, r3, r2
    f938:	68c3      	ldr	r3, [r0, #12]
    f93a:	4323      	orrs	r3, r4
    f93c:	60c3      	str	r3, [r0, #12]
		b->next = c;
    f93e:	3204      	adds	r2, #4
    f940:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
    f944:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
    f948:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
    f94a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    f94e:	d307      	bcc.n	f960 <free_list_add_bidx+0x38>
		((uint32_t *)cmem)[f] = val;
    f950:	6099      	str	r1, [r3, #8]
	return big_heap_chunks(h->end_chunk);
    f952:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
    f954:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    f958:	d304      	bcc.n	f964 <free_list_add_bidx+0x3c>
		((uint32_t *)cmem)[f] = val;
    f95a:	60d9      	str	r1, [r3, #12]
		set_prev_free_chunk(h, c, first);
		set_next_free_chunk(h, c, second);
		set_next_free_chunk(h, first, c);
		set_prev_free_chunk(h, second, c);
	}
}
    f95c:	bc70      	pop	{r4, r5, r6}
    f95e:	4770      	bx	lr
		((uint16_t *)cmem)[f] = val;
    f960:	8099      	strh	r1, [r3, #4]
    f962:	e7f6      	b.n	f952 <free_list_add_bidx+0x2a>
    f964:	80d9      	strh	r1, [r3, #6]
    f966:	e7f9      	b.n	f95c <free_list_add_bidx+0x34>
	void *cmem = &buf[c];
    f968:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
    f96c:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
    f96e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    f972:	d318      	bcc.n	f9a6 <free_list_add_bidx+0x7e>
		return ((uint32_t *)cmem)[f];
    f974:	68a2      	ldr	r2, [r4, #8]
	void *cmem = &buf[c];
    f976:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	if (big_heap(h)) {
    f97a:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    f97e:	d314      	bcc.n	f9aa <free_list_add_bidx+0x82>
		((uint32_t *)cmem)[f] = val;
    f980:	60aa      	str	r2, [r5, #8]
	return big_heap_chunks(h->end_chunk);
    f982:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
    f984:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    f988:	d311      	bcc.n	f9ae <free_list_add_bidx+0x86>
		((uint32_t *)cmem)[f] = val;
    f98a:	60eb      	str	r3, [r5, #12]
	void *cmem = &buf[c];
    f98c:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
    f990:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    f992:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    f996:	d30c      	bcc.n	f9b2 <free_list_add_bidx+0x8a>
		((uint32_t *)cmem)[f] = val;
    f998:	60d1      	str	r1, [r2, #12]
	return big_heap_chunks(h->end_chunk);
    f99a:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    f99c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    f9a0:	d309      	bcc.n	f9b6 <free_list_add_bidx+0x8e>
		((uint32_t *)cmem)[f] = val;
    f9a2:	60a1      	str	r1, [r4, #8]
    f9a4:	e7da      	b.n	f95c <free_list_add_bidx+0x34>
		return ((uint16_t *)cmem)[f];
    f9a6:	88a2      	ldrh	r2, [r4, #4]
    f9a8:	e7e5      	b.n	f976 <free_list_add_bidx+0x4e>
		((uint16_t *)cmem)[f] = val;
    f9aa:	80aa      	strh	r2, [r5, #4]
    f9ac:	e7e9      	b.n	f982 <free_list_add_bidx+0x5a>
    f9ae:	80eb      	strh	r3, [r5, #6]
    f9b0:	e7ec      	b.n	f98c <free_list_add_bidx+0x64>
    f9b2:	80d1      	strh	r1, [r2, #6]
    f9b4:	e7f1      	b.n	f99a <free_list_add_bidx+0x72>
    f9b6:	80a1      	strh	r1, [r4, #4]
    f9b8:	e7d0      	b.n	f95c <free_list_add_bidx+0x34>

0000f9ba <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
    f9ba:	b470      	push	{r4, r5, r6}
	void *cmem = &buf[c];
    f9bc:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
    f9c0:	6885      	ldr	r5, [r0, #8]
	if (big_heap(h)) {
    f9c2:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    f9c6:	d325      	bcc.n	fa14 <split_chunks+0x5a>
		return ((uint32_t *)cmem)[f];
    f9c8:	6866      	ldr	r6, [r4, #4]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
    f9ca:	1a53      	subs	r3, r2, r1
	chunksz_t rsz = sz0 - lsz;
    f9cc:	1a89      	subs	r1, r1, r2
    f9ce:	eb01 0156 	add.w	r1, r1, r6, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    f9d2:	005e      	lsls	r6, r3, #1
	if (big_heap(h)) {
    f9d4:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    f9d8:	d31e      	bcc.n	fa18 <split_chunks+0x5e>
		((uint32_t *)cmem)[f] = val;
    f9da:	6066      	str	r6, [r4, #4]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    f9dc:	004d      	lsls	r5, r1, #1
	void *cmem = &buf[c];
    f9de:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
    f9e2:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
    f9e4:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    f9e8:	d318      	bcc.n	fa1c <split_chunks+0x62>
		((uint32_t *)cmem)[f] = val;
    f9ea:	6065      	str	r5, [r4, #4]
	return big_heap_chunks(h->end_chunk);
    f9ec:	6885      	ldr	r5, [r0, #8]
	if (big_heap(h)) {
    f9ee:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    f9f2:	d315      	bcc.n	fa20 <split_chunks+0x66>
		((uint32_t *)cmem)[f] = val;
    f9f4:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
	return big_heap_chunks(h->end_chunk);
    f9f8:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    f9fa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    f9fe:	d312      	bcc.n	fa26 <split_chunks+0x6c>
		return ((uint32_t *)cmem)[f];
    fa00:	6864      	ldr	r4, [r4, #4]
	return c + chunk_size(h, c);
    fa02:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
    fa06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    fa0a:	d30e      	bcc.n	fa2a <split_chunks+0x70>
		((uint32_t *)cmem)[f] = val;
    fa0c:	f840 1032 	str.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
    fa10:	bc70      	pop	{r4, r5, r6}
    fa12:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
    fa14:	8866      	ldrh	r6, [r4, #2]
    fa16:	e7d8      	b.n	f9ca <split_chunks+0x10>
		((uint16_t *)cmem)[f] = val;
    fa18:	8066      	strh	r6, [r4, #2]
    fa1a:	e7df      	b.n	f9dc <split_chunks+0x22>
    fa1c:	8065      	strh	r5, [r4, #2]
    fa1e:	e7e5      	b.n	f9ec <split_chunks+0x32>
    fa20:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
    fa24:	e7e8      	b.n	f9f8 <split_chunks+0x3e>
		return ((uint16_t *)cmem)[f];
    fa26:	8864      	ldrh	r4, [r4, #2]
    fa28:	e7eb      	b.n	fa02 <split_chunks+0x48>
		((uint16_t *)cmem)[f] = val;
    fa2a:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]
    fa2e:	e7ef      	b.n	fa10 <split_chunks+0x56>

0000fa30 <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
    fa30:	b470      	push	{r4, r5, r6}
	void *cmem = &buf[c];
    fa32:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
    fa36:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    fa38:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    fa3c:	d31c      	bcc.n	fa78 <merge_chunks+0x48>
		return ((uint32_t *)cmem)[f];
    fa3e:	684b      	ldr	r3, [r1, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    fa40:	085b      	lsrs	r3, r3, #1
	void *cmem = &buf[c];
    fa42:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
	if (big_heap(h)) {
    fa46:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    fa4a:	d317      	bcc.n	fa7c <merge_chunks+0x4c>
		return ((uint32_t *)cmem)[f];
    fa4c:	686e      	ldr	r6, [r5, #4]
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    fa4e:	eb03 0356 	add.w	r3, r3, r6, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    fa52:	005e      	lsls	r6, r3, #1
	if (big_heap(h)) {
    fa54:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    fa58:	d312      	bcc.n	fa80 <merge_chunks+0x50>
		((uint32_t *)cmem)[f] = val;
    fa5a:	604e      	str	r6, [r1, #4]
	return big_heap_chunks(h->end_chunk);
    fa5c:	6881      	ldr	r1, [r0, #8]
	if (big_heap(h)) {
    fa5e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
    fa62:	d30f      	bcc.n	fa84 <merge_chunks+0x54>
		return ((uint32_t *)cmem)[f];
    fa64:	686c      	ldr	r4, [r5, #4]
	return c + chunk_size(h, c);
    fa66:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
    fa6a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
    fa6e:	d30b      	bcc.n	fa88 <merge_chunks+0x58>
		((uint32_t *)cmem)[f] = val;
    fa70:	f840 3032 	str.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
    fa74:	bc70      	pop	{r4, r5, r6}
    fa76:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
    fa78:	884b      	ldrh	r3, [r1, #2]
    fa7a:	e7e1      	b.n	fa40 <merge_chunks+0x10>
    fa7c:	886e      	ldrh	r6, [r5, #2]
    fa7e:	e7e6      	b.n	fa4e <merge_chunks+0x1e>
		((uint16_t *)cmem)[f] = val;
    fa80:	804e      	strh	r6, [r1, #2]
    fa82:	e7eb      	b.n	fa5c <merge_chunks+0x2c>
		return ((uint16_t *)cmem)[f];
    fa84:	886c      	ldrh	r4, [r5, #2]
    fa86:	e7ee      	b.n	fa66 <merge_chunks+0x36>
		((uint16_t *)cmem)[f] = val;
    fa88:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
    fa8c:	e7f2      	b.n	fa74 <merge_chunks+0x44>

0000fa8e <mem_to_chunkid>:
	return big_heap_chunks(h->end_chunk);
    fa8e:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) ? 8 : 4;
    fa90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    fa94:	d304      	bcc.n	faa0 <mem_to_chunkid+0x12>
    fa96:	2308      	movs	r3, #8
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    fa98:	1ac9      	subs	r1, r1, r3
    fa9a:	1a08      	subs	r0, r1, r0
}
    fa9c:	08c0      	lsrs	r0, r0, #3
    fa9e:	4770      	bx	lr
    faa0:	2304      	movs	r3, #4
    faa2:	e7f9      	b.n	fa98 <mem_to_chunkid+0xa>

0000faa4 <free_list_remove>:
{
    faa4:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
    faa6:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
    faa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    faac:	d307      	bcc.n	fabe <free_list_remove+0x1a>
	void *cmem = &buf[c];
    faae:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
    fab2:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    fab4:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
    fab6:	2a01      	cmp	r2, #1
    fab8:	d002      	beq.n	fac0 <free_list_remove+0x1c>
    faba:	2200      	movs	r2, #0
    fabc:	e000      	b.n	fac0 <free_list_remove+0x1c>
    fabe:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
    fac0:	b9a2      	cbnz	r2, faec <free_list_remove+0x48>
	void *cmem = &buf[c];
    fac2:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
    fac6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    faca:	d310      	bcc.n	faee <free_list_remove+0x4a>
		return ((uint32_t *)cmem)[f];
    facc:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    face:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
    fad0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    fad4:	d30d      	bcc.n	faf2 <free_list_remove+0x4e>
    fad6:	2308      	movs	r3, #8
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    fad8:	3308      	adds	r3, #8
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    fada:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
    fade:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
    fae0:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
    fae4:	f1c2 021f 	rsb	r2, r2, #31
    fae8:	f7ff feea 	bl	f8c0 <free_list_remove_bidx>
}
    faec:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
    faee:	8852      	ldrh	r2, [r2, #2]
    faf0:	e7ed      	b.n	face <free_list_remove+0x2a>
	return big_heap(h) ? 8 : 4;
    faf2:	2304      	movs	r3, #4
    faf4:	e7f0      	b.n	fad8 <free_list_remove+0x34>

0000faf6 <free_list_add>:
{
    faf6:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
    faf8:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
    fafa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    fafe:	d307      	bcc.n	fb10 <free_list_add+0x1a>
	void *cmem = &buf[c];
    fb00:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
    fb04:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    fb06:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
    fb08:	2a01      	cmp	r2, #1
    fb0a:	d002      	beq.n	fb12 <free_list_add+0x1c>
    fb0c:	2200      	movs	r2, #0
    fb0e:	e000      	b.n	fb12 <free_list_add+0x1c>
    fb10:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
    fb12:	b9a2      	cbnz	r2, fb3e <free_list_add+0x48>
	void *cmem = &buf[c];
    fb14:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
    fb18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    fb1c:	d310      	bcc.n	fb40 <free_list_add+0x4a>
		return ((uint32_t *)cmem)[f];
    fb1e:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    fb20:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
    fb22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    fb26:	d30d      	bcc.n	fb44 <free_list_add+0x4e>
    fb28:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    fb2a:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    fb2c:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
    fb30:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
    fb32:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
    fb36:	f1c2 021f 	rsb	r2, r2, #31
    fb3a:	f7ff fef5 	bl	f928 <free_list_add_bidx>
}
    fb3e:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
    fb40:	8852      	ldrh	r2, [r2, #2]
    fb42:	e7ed      	b.n	fb20 <free_list_add+0x2a>
	return big_heap(h) ? 8 : 4;
    fb44:	2304      	movs	r3, #4
    fb46:	e7f0      	b.n	fb2a <free_list_add+0x34>

0000fb48 <free_chunk>:
{
    fb48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fb4a:	4604      	mov	r4, r0
    fb4c:	460d      	mov	r5, r1
	void *cmem = &buf[c];
    fb4e:	00ce      	lsls	r6, r1, #3
    fb50:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
    fb54:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    fb56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    fb5a:	d31f      	bcc.n	fb9c <free_chunk+0x54>
		return ((uint32_t *)cmem)[f];
    fb5c:	6879      	ldr	r1, [r7, #4]
	return c + chunk_size(h, c);
    fb5e:	eb05 0151 	add.w	r1, r5, r1, lsr #1
	void *cmem = &buf[c];
    fb62:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
	if (big_heap(h)) {
    fb66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    fb6a:	d319      	bcc.n	fba0 <free_chunk+0x58>
		return ((uint32_t *)cmem)[f];
    fb6c:	6853      	ldr	r3, [r2, #4]
	if (!chunk_used(h, right_chunk(h, c))) {
    fb6e:	f013 0f01 	tst.w	r3, #1
    fb72:	d017      	beq.n	fba4 <free_chunk+0x5c>
	return big_heap_chunks(h->end_chunk);
    fb74:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
    fb76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    fb7a:	d324      	bcc.n	fbc6 <free_chunk+0x7e>
		return ((uint32_t *)cmem)[f];
    fb7c:	59a1      	ldr	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
    fb7e:	1a69      	subs	r1, r5, r1
	void *cmem = &buf[c];
    fb80:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
	if (big_heap(h)) {
    fb84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    fb88:	d31f      	bcc.n	fbca <free_chunk+0x82>
		return ((uint32_t *)cmem)[f];
    fb8a:	6853      	ldr	r3, [r2, #4]
	if (!chunk_used(h, left_chunk(h, c))) {
    fb8c:	f013 0f01 	tst.w	r3, #1
    fb90:	d01d      	beq.n	fbce <free_chunk+0x86>
	free_list_add(h, c);
    fb92:	4629      	mov	r1, r5
    fb94:	4620      	mov	r0, r4
    fb96:	f7ff ffae 	bl	faf6 <free_list_add>
}
    fb9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ((uint16_t *)cmem)[f];
    fb9c:	8879      	ldrh	r1, [r7, #2]
    fb9e:	e7de      	b.n	fb5e <free_chunk+0x16>
    fba0:	8853      	ldrh	r3, [r2, #2]
    fba2:	e7e4      	b.n	fb6e <free_chunk+0x26>
		free_list_remove(h, right_chunk(h, c));
    fba4:	4620      	mov	r0, r4
    fba6:	f7ff ff7d 	bl	faa4 <free_list_remove>
	return big_heap_chunks(h->end_chunk);
    fbaa:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
    fbac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    fbb0:	d307      	bcc.n	fbc2 <free_chunk+0x7a>
		return ((uint32_t *)cmem)[f];
    fbb2:	687a      	ldr	r2, [r7, #4]
		merge_chunks(h, c, right_chunk(h, c));
    fbb4:	eb05 0252 	add.w	r2, r5, r2, lsr #1
    fbb8:	4629      	mov	r1, r5
    fbba:	4620      	mov	r0, r4
    fbbc:	f7ff ff38 	bl	fa30 <merge_chunks>
    fbc0:	e7d8      	b.n	fb74 <free_chunk+0x2c>
		return ((uint16_t *)cmem)[f];
    fbc2:	887a      	ldrh	r2, [r7, #2]
    fbc4:	e7f6      	b.n	fbb4 <free_chunk+0x6c>
    fbc6:	5ba1      	ldrh	r1, [r4, r6]
    fbc8:	e7d9      	b.n	fb7e <free_chunk+0x36>
    fbca:	8853      	ldrh	r3, [r2, #2]
    fbcc:	e7de      	b.n	fb8c <free_chunk+0x44>
		free_list_remove(h, left_chunk(h, c));
    fbce:	4620      	mov	r0, r4
    fbd0:	f7ff ff68 	bl	faa4 <free_list_remove>
	return big_heap_chunks(h->end_chunk);
    fbd4:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
    fbd6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    fbda:	d30c      	bcc.n	fbf6 <free_chunk+0xae>
		return ((uint32_t *)cmem)[f];
    fbdc:	59a1      	ldr	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
    fbde:	462a      	mov	r2, r5
    fbe0:	1a69      	subs	r1, r5, r1
    fbe2:	4620      	mov	r0, r4
    fbe4:	f7ff ff24 	bl	fa30 <merge_chunks>
	return big_heap_chunks(h->end_chunk);
    fbe8:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
    fbea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    fbee:	d304      	bcc.n	fbfa <free_chunk+0xb2>
		return ((uint32_t *)cmem)[f];
    fbf0:	59a3      	ldr	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
    fbf2:	1aed      	subs	r5, r5, r3
    fbf4:	e7cd      	b.n	fb92 <free_chunk+0x4a>
		return ((uint16_t *)cmem)[f];
    fbf6:	5ba1      	ldrh	r1, [r4, r6]
    fbf8:	e7f1      	b.n	fbde <free_chunk+0x96>
    fbfa:	5ba3      	ldrh	r3, [r4, r6]
    fbfc:	e7f9      	b.n	fbf2 <free_chunk+0xaa>

0000fbfe <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    fbfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return big_heap_chunks(h->end_chunk);
    fc00:	6885      	ldr	r5, [r0, #8]
	return big_heap(h) ? 8 : 4;
    fc02:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    fc06:	d311      	bcc.n	fc2c <alloc_chunk+0x2e>
    fc08:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    fc0a:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    fc0c:	eba1 03d3 	sub.w	r3, r1, r3, lsr #3
    fc10:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
    fc12:	fab3 f383 	clz	r3, r3
    fc16:	f1c3 021f 	rsb	r2, r3, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    fc1a:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
    fc1e:	f850 c024 	ldr.w	ip, [r0, r4, lsl #2]
    fc22:	f1bc 0f00 	cmp.w	ip, #0
    fc26:	d024      	beq.n	fc72 <alloc_chunk+0x74>
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
    fc28:	2603      	movs	r6, #3
    fc2a:	e010      	b.n	fc4e <alloc_chunk+0x50>
	return big_heap(h) ? 8 : 4;
    fc2c:	2304      	movs	r3, #4
    fc2e:	e7ec      	b.n	fc0a <alloc_chunk+0xc>
		return ((uint16_t *)cmem)[f];
    fc30:	f8b7 e002 	ldrh.w	lr, [r7, #2]
    fc34:	e015      	b.n	fc62 <alloc_chunk+0x64>
		do {
			chunkid_t c = b->next;
			if (chunk_size(h, c) >= sz) {
				free_list_remove_bidx(h, c, bi);
    fc36:	4621      	mov	r1, r4
    fc38:	f7ff fe42 	bl	f8c0 <free_list_remove_bidx>
				return c;
    fc3c:	e021      	b.n	fc82 <alloc_chunk+0x84>
    fc3e:	88fc      	ldrh	r4, [r7, #6]
			}
			b->next = next_free_chunk(h, c);
    fc40:	1d17      	adds	r7, r2, #4
    fc42:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
    fc46:	3e01      	subs	r6, #1
    fc48:	d013      	beq.n	fc72 <alloc_chunk+0x74>
    fc4a:	45a4      	cmp	ip, r4
    fc4c:	d011      	beq.n	fc72 <alloc_chunk+0x74>
			chunkid_t c = b->next;
    fc4e:	1d14      	adds	r4, r2, #4
    fc50:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
    fc54:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
	if (big_heap(h)) {
    fc58:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    fc5c:	d3e8      	bcc.n	fc30 <alloc_chunk+0x32>
		return ((uint32_t *)cmem)[f];
    fc5e:	f8d7 e004 	ldr.w	lr, [r7, #4]
			if (chunk_size(h, c) >= sz) {
    fc62:	ebb1 0f5e 	cmp.w	r1, lr, lsr #1
    fc66:	d9e6      	bls.n	fc36 <alloc_chunk+0x38>
	if (big_heap(h)) {
    fc68:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    fc6c:	d3e7      	bcc.n	fc3e <alloc_chunk+0x40>
		return ((uint32_t *)cmem)[f];
    fc6e:	68fc      	ldr	r4, [r7, #12]
    fc70:	e7e6      	b.n	fc40 <alloc_chunk+0x42>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
    fc72:	68c4      	ldr	r4, [r0, #12]
    fc74:	f1c3 0220 	rsb	r2, r3, #32
    fc78:	2301      	movs	r3, #1
    fc7a:	4093      	lsls	r3, r2
    fc7c:	425b      	negs	r3, r3

	if (bmask != 0U) {
    fc7e:	401c      	ands	r4, r3
    fc80:	d101      	bne.n	fc86 <alloc_chunk+0x88>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    fc82:	4620      	mov	r0, r4
    fc84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		int minbucket = __builtin_ctz(bmask);
    fc86:	fa94 f2a4 	rbit	r2, r4
    fc8a:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    fc8e:	1d13      	adds	r3, r2, #4
    fc90:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    fc94:	4621      	mov	r1, r4
    fc96:	f7ff fe13 	bl	f8c0 <free_list_remove_bidx>
		return c;
    fc9a:	e7f2      	b.n	fc82 <alloc_chunk+0x84>

0000fc9c <sys_heap_free>:
	if (mem == NULL) {
    fc9c:	b1c1      	cbz	r1, fcd0 <sys_heap_free+0x34>
{
    fc9e:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
    fca0:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
    fca2:	4620      	mov	r0, r4
    fca4:	f7ff fef3 	bl	fa8e <mem_to_chunkid>
    fca8:	4601      	mov	r1, r0
	void *cmem = &buf[c];
    fcaa:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
	return big_heap_chunks(h->end_chunk);
    fcae:	68a2      	ldr	r2, [r4, #8]
	if (big_heap(h)) {
    fcb0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    fcb4:	d307      	bcc.n	fcc6 <sys_heap_free+0x2a>
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
    fcb6:	685a      	ldr	r2, [r3, #4]
    fcb8:	f022 0201 	bic.w	r2, r2, #1
    fcbc:	605a      	str	r2, [r3, #4]
	free_chunk(h, c);
    fcbe:	4620      	mov	r0, r4
    fcc0:	f7ff ff42 	bl	fb48 <free_chunk>
}
    fcc4:	bd10      	pop	{r4, pc}
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    fcc6:	885a      	ldrh	r2, [r3, #2]
    fcc8:	f022 0201 	bic.w	r2, r2, #1
    fccc:	805a      	strh	r2, [r3, #2]
    fcce:	e7f6      	b.n	fcbe <sys_heap_free+0x22>
    fcd0:	4770      	bx	lr

0000fcd2 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    fcd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
    fcd4:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
    fcd6:	2900      	cmp	r1, #0
    fcd8:	d03c      	beq.n	fd54 <sys_heap_alloc+0x82>
    fcda:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
    fcdc:	68aa      	ldr	r2, [r5, #8]
    fcde:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
    fce2:	d939      	bls.n	fd58 <sys_heap_alloc+0x86>
	return big_heap(h) ? 8 : 4;
    fce4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    fce8:	d320      	bcc.n	fd2c <sys_heap_alloc+0x5a>
    fcea:	2408      	movs	r4, #8
	return chunksz(chunk_header_bytes(h) + bytes);
    fcec:	441c      	add	r4, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    fcee:	3407      	adds	r4, #7
    fcf0:	08e4      	lsrs	r4, r4, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
    fcf2:	4621      	mov	r1, r4
    fcf4:	4628      	mov	r0, r5
    fcf6:	f7ff ff82 	bl	fbfe <alloc_chunk>
	if (c == 0U) {
    fcfa:	4607      	mov	r7, r0
    fcfc:	b370      	cbz	r0, fd5c <sys_heap_alloc+0x8a>
	void *cmem = &buf[c];
    fcfe:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	return big_heap_chunks(h->end_chunk);
    fd02:	68ab      	ldr	r3, [r5, #8]
	if (big_heap(h)) {
    fd04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    fd08:	d312      	bcc.n	fd30 <sys_heap_alloc+0x5e>
		return ((uint32_t *)cmem)[f];
    fd0a:	6873      	ldr	r3, [r6, #4]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
    fd0c:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
    fd10:	d310      	bcc.n	fd34 <sys_heap_alloc+0x62>
	return big_heap_chunks(h->end_chunk);
    fd12:	68ab      	ldr	r3, [r5, #8]
	if (big_heap(h)) {
    fd14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    fd18:	d317      	bcc.n	fd4a <sys_heap_alloc+0x78>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    fd1a:	6873      	ldr	r3, [r6, #4]
    fd1c:	f043 0301 	orr.w	r3, r3, #1
    fd20:	6073      	str	r3, [r6, #4]
		split_chunks(h, c, c + chunk_sz);
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
    fd22:	4639      	mov	r1, r7
    fd24:	4628      	mov	r0, r5
    fd26:	f7ff fdc0 	bl	f8aa <chunk_mem>
}
    fd2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return big_heap(h) ? 8 : 4;
    fd2c:	2404      	movs	r4, #4
    fd2e:	e7dd      	b.n	fcec <sys_heap_alloc+0x1a>
		return ((uint16_t *)cmem)[f];
    fd30:	8873      	ldrh	r3, [r6, #2]
    fd32:	e7eb      	b.n	fd0c <sys_heap_alloc+0x3a>
		split_chunks(h, c, c + chunk_sz);
    fd34:	443c      	add	r4, r7
    fd36:	4622      	mov	r2, r4
    fd38:	4639      	mov	r1, r7
    fd3a:	4628      	mov	r0, r5
    fd3c:	f7ff fe3d 	bl	f9ba <split_chunks>
		free_list_add(h, c + chunk_sz);
    fd40:	4621      	mov	r1, r4
    fd42:	4628      	mov	r0, r5
    fd44:	f7ff fed7 	bl	faf6 <free_list_add>
    fd48:	e7e3      	b.n	fd12 <sys_heap_alloc+0x40>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    fd4a:	8873      	ldrh	r3, [r6, #2]
    fd4c:	f043 0301 	orr.w	r3, r3, #1
    fd50:	8073      	strh	r3, [r6, #2]
    fd52:	e7e6      	b.n	fd22 <sys_heap_alloc+0x50>
		return NULL;
    fd54:	2000      	movs	r0, #0
    fd56:	e7e8      	b.n	fd2a <sys_heap_alloc+0x58>
    fd58:	2000      	movs	r0, #0
    fd5a:	e7e6      	b.n	fd2a <sys_heap_alloc+0x58>
		return NULL;
    fd5c:	2000      	movs	r0, #0
    fd5e:	e7e4      	b.n	fd2a <sys_heap_alloc+0x58>

0000fd60 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    fd60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fd64:	460d      	mov	r5, r1
    fd66:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    fd68:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
    fd6a:	424b      	negs	r3, r1
    fd6c:	ea03 0801 	and.w	r8, r3, r1
	if (align != rew) {
    fd70:	ea31 0303 	bics.w	r3, r1, r3
    fd74:	d04e      	beq.n	fe14 <sys_heap_aligned_alloc+0xb4>
		align -= rew;
    fd76:	eba1 0508 	sub.w	r5, r1, r8
	return big_heap_chunks(h->end_chunk);
    fd7a:	68b3      	ldr	r3, [r6, #8]
	return big_heap(h) ? 8 : 4;
    fd7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    fd80:	d346      	bcc.n	fe10 <sys_heap_aligned_alloc+0xb0>
    fd82:	2308      	movs	r3, #8
		gap = MIN(rew, chunk_header_bytes(h));
    fd84:	4598      	cmp	r8, r3
    fd86:	d200      	bcs.n	fd8a <sys_heap_aligned_alloc+0x2a>
    fd88:	4643      	mov	r3, r8
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    fd8a:	2c00      	cmp	r4, #0
    fd8c:	d070      	beq.n	fe70 <sys_heap_aligned_alloc+0x110>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
    fd8e:	68b2      	ldr	r2, [r6, #8]
    fd90:	ebb2 0fd4 	cmp.w	r2, r4, lsr #3
    fd94:	d96e      	bls.n	fe74 <sys_heap_aligned_alloc+0x114>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
    fd96:	1929      	adds	r1, r5, r4
    fd98:	1ac9      	subs	r1, r1, r3
	return big_heap(h) ? 8 : 4;
    fd9a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    fd9e:	d34a      	bcc.n	fe36 <sys_heap_aligned_alloc+0xd6>
    fda0:	2308      	movs	r3, #8
	return chunksz(chunk_header_bytes(h) + bytes);
    fda2:	4419      	add	r1, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    fda4:	3107      	adds	r1, #7
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    fda6:	08c9      	lsrs	r1, r1, #3
    fda8:	4630      	mov	r0, r6
    fdaa:	f7ff ff28 	bl	fbfe <alloc_chunk>

	if (c0 == 0) {
    fdae:	4607      	mov	r7, r0
    fdb0:	2800      	cmp	r0, #0
    fdb2:	d061      	beq.n	fe78 <sys_heap_aligned_alloc+0x118>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
    fdb4:	4601      	mov	r1, r0
    fdb6:	4630      	mov	r0, r6
    fdb8:	f7ff fd77 	bl	f8aa <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    fdbc:	4440      	add	r0, r8
    fdbe:	4428      	add	r0, r5
    fdc0:	3801      	subs	r0, #1
    fdc2:	426d      	negs	r5, r5
    fdc4:	4005      	ands	r5, r0
    fdc6:	eba5 0508 	sub.w	r5, r5, r8
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    fdca:	442c      	add	r4, r5
    fdcc:	3407      	adds	r4, #7
    fdce:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
    fdd2:	4629      	mov	r1, r5
    fdd4:	4630      	mov	r0, r6
    fdd6:	f7ff fe5a 	bl	fa8e <mem_to_chunkid>
    fdda:	4680      	mov	r8, r0
	chunkid_t c_end = end - chunk_buf(h);
    fddc:	1ba4      	subs	r4, r4, r6
    fdde:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
    fde0:	4287      	cmp	r7, r0
    fde2:	d32a      	bcc.n	fe3a <sys_heap_aligned_alloc+0xda>
	void *cmem = &buf[c];
    fde4:	eb06 07c8 	add.w	r7, r6, r8, lsl #3
	return big_heap_chunks(h->end_chunk);
    fde8:	68b3      	ldr	r3, [r6, #8]
	if (big_heap(h)) {
    fdea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    fdee:	d32e      	bcc.n	fe4e <sys_heap_aligned_alloc+0xee>
		return ((uint32_t *)cmem)[f];
    fdf0:	687b      	ldr	r3, [r7, #4]
	return c + chunk_size(h, c);
    fdf2:	eb08 0353 	add.w	r3, r8, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
    fdf6:	429c      	cmp	r4, r3
    fdf8:	d32b      	bcc.n	fe52 <sys_heap_aligned_alloc+0xf2>
	return big_heap_chunks(h->end_chunk);
    fdfa:	68b3      	ldr	r3, [r6, #8]
	if (big_heap(h)) {
    fdfc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    fe00:	d331      	bcc.n	fe66 <sys_heap_aligned_alloc+0x106>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    fe02:	687b      	ldr	r3, [r7, #4]
    fe04:	f043 0301 	orr.w	r3, r3, #1
    fe08:	607b      	str	r3, [r7, #4]
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
    fe0a:	4628      	mov	r0, r5
    fe0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return big_heap(h) ? 8 : 4;
    fe10:	2304      	movs	r3, #4
    fe12:	e7b7      	b.n	fd84 <sys_heap_aligned_alloc+0x24>
	return big_heap_chunks(h->end_chunk);
    fe14:	68b3      	ldr	r3, [r6, #8]
	return big_heap(h) ? 8 : 4;
    fe16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    fe1a:	d305      	bcc.n	fe28 <sys_heap_aligned_alloc+0xc8>
    fe1c:	2308      	movs	r3, #8
		if (align <= chunk_header_bytes(h)) {
    fe1e:	429d      	cmp	r5, r3
    fe20:	d904      	bls.n	fe2c <sys_heap_aligned_alloc+0xcc>
		rew = 0;
    fe22:	f04f 0800 	mov.w	r8, #0
    fe26:	e7b0      	b.n	fd8a <sys_heap_aligned_alloc+0x2a>
    fe28:	2304      	movs	r3, #4
    fe2a:	e7f8      	b.n	fe1e <sys_heap_aligned_alloc+0xbe>
			return sys_heap_alloc(heap, bytes);
    fe2c:	4621      	mov	r1, r4
    fe2e:	f7ff ff50 	bl	fcd2 <sys_heap_alloc>
    fe32:	4605      	mov	r5, r0
    fe34:	e7e9      	b.n	fe0a <sys_heap_aligned_alloc+0xaa>
    fe36:	2304      	movs	r3, #4
    fe38:	e7b3      	b.n	fda2 <sys_heap_aligned_alloc+0x42>
		split_chunks(h, c0, c);
    fe3a:	4602      	mov	r2, r0
    fe3c:	4639      	mov	r1, r7
    fe3e:	4630      	mov	r0, r6
    fe40:	f7ff fdbb 	bl	f9ba <split_chunks>
		free_list_add(h, c0);
    fe44:	4639      	mov	r1, r7
    fe46:	4630      	mov	r0, r6
    fe48:	f7ff fe55 	bl	faf6 <free_list_add>
    fe4c:	e7ca      	b.n	fde4 <sys_heap_aligned_alloc+0x84>
		return ((uint16_t *)cmem)[f];
    fe4e:	887b      	ldrh	r3, [r7, #2]
    fe50:	e7cf      	b.n	fdf2 <sys_heap_aligned_alloc+0x92>
		split_chunks(h, c, c_end);
    fe52:	4622      	mov	r2, r4
    fe54:	4641      	mov	r1, r8
    fe56:	4630      	mov	r0, r6
    fe58:	f7ff fdaf 	bl	f9ba <split_chunks>
		free_list_add(h, c_end);
    fe5c:	4621      	mov	r1, r4
    fe5e:	4630      	mov	r0, r6
    fe60:	f7ff fe49 	bl	faf6 <free_list_add>
    fe64:	e7c9      	b.n	fdfa <sys_heap_aligned_alloc+0x9a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    fe66:	887b      	ldrh	r3, [r7, #2]
    fe68:	f043 0301 	orr.w	r3, r3, #1
    fe6c:	807b      	strh	r3, [r7, #2]
    fe6e:	e7cc      	b.n	fe0a <sys_heap_aligned_alloc+0xaa>
		return NULL;
    fe70:	2500      	movs	r5, #0
    fe72:	e7ca      	b.n	fe0a <sys_heap_aligned_alloc+0xaa>
    fe74:	2500      	movs	r5, #0
    fe76:	e7c8      	b.n	fe0a <sys_heap_aligned_alloc+0xaa>
		return NULL;
    fe78:	2500      	movs	r5, #0
    fe7a:	e7c6      	b.n	fe0a <sys_heap_aligned_alloc+0xaa>

0000fe7c <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    fe7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fe7e:	4603      	mov	r3, r0
	return big_heap_bytes(size) ? 8 : 4;
    fe80:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
    fe84:	d32a      	bcc.n	fedc <sys_heap_init+0x60>
    fe86:	2508      	movs	r5, #8
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    fe88:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    fe8a:	1dc8      	adds	r0, r1, #7
    fe8c:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    fe90:	440d      	add	r5, r1
    fe92:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    fe96:	1a2d      	subs	r5, r5, r0
    fe98:	08ef      	lsrs	r7, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
    fe9a:	4606      	mov	r6, r0
	heap->heap = h;
    fe9c:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
    fe9e:	6087      	str	r7, [r0, #8]
	h->avail_buckets = 0;
    fea0:	2300      	movs	r3, #0
    fea2:	60c3      	str	r3, [r0, #12]
	return big_heap(h) ? 8 : 4;
    fea4:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    fea8:	d31a      	bcc.n	fee0 <sys_heap_init+0x64>
    feaa:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    feac:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    feae:	eba7 03d3 	sub.w	r3, r7, r3, lsr #3
    feb2:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
    feb4:	fab3 f383 	clz	r3, r3

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    feb8:	f1c3 0c20 	rsb	ip, r3, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    febc:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
    fec0:	009b      	lsls	r3, r3, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    fec2:	f103 0e07 	add.w	lr, r3, #7
    fec6:	ea4f 01de 	mov.w	r1, lr, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    feca:	2300      	movs	r3, #0
    fecc:	4563      	cmp	r3, ip
    fece:	da09      	bge.n	fee4 <sys_heap_init+0x68>
		h->buckets[i].next = 0;
    fed0:	1d1a      	adds	r2, r3, #4
    fed2:	2400      	movs	r4, #0
    fed4:	f846 4022 	str.w	r4, [r6, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
    fed8:	3301      	adds	r3, #1
    feda:	e7f7      	b.n	fecc <sys_heap_init+0x50>
	return big_heap_bytes(size) ? 8 : 4;
    fedc:	2504      	movs	r5, #4
    fede:	e7d3      	b.n	fe88 <sys_heap_init+0xc>
	return big_heap(h) ? 8 : 4;
    fee0:	2304      	movs	r3, #4
    fee2:	e7e3      	b.n	feac <sys_heap_init+0x30>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    fee4:	004b      	lsls	r3, r1, #1
	if (big_heap(h)) {
    fee6:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    feea:	d333      	bcc.n	ff54 <sys_heap_init+0xd8>
		((uint32_t *)cmem)[f] = val;
    feec:	6043      	str	r3, [r0, #4]
	if (big_heap(h)) {
    feee:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    fef2:	d331      	bcc.n	ff58 <sys_heap_init+0xdc>
		((uint32_t *)cmem)[f] = val;
    fef4:	2300      	movs	r3, #0
    fef6:	6003      	str	r3, [r0, #0]
	if (big_heap(h)) {
    fef8:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    fefc:	d32f      	bcc.n	ff5e <sys_heap_init+0xe2>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    fefe:	6843      	ldr	r3, [r0, #4]
    ff00:	f043 0301 	orr.w	r3, r3, #1
    ff04:	6043      	str	r3, [r0, #4]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    ff06:	1a7a      	subs	r2, r7, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    ff08:	0056      	lsls	r6, r2, #1
	void *cmem = &buf[c];
    ff0a:	f02e 0307 	bic.w	r3, lr, #7
    ff0e:	18c4      	adds	r4, r0, r3
	if (big_heap(h)) {
    ff10:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    ff14:	d328      	bcc.n	ff68 <sys_heap_init+0xec>
		((uint32_t *)cmem)[f] = val;
    ff16:	6066      	str	r6, [r4, #4]
	return big_heap_chunks(h->end_chunk);
    ff18:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    ff1a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    ff1e:	d325      	bcc.n	ff6c <sys_heap_init+0xf0>
		((uint32_t *)cmem)[f] = val;
    ff20:	50c1      	str	r1, [r0, r3]
	void *cmem = &buf[c];
    ff22:	f025 0307 	bic.w	r3, r5, #7
    ff26:	4405      	add	r5, r0
	return big_heap_chunks(h->end_chunk);
    ff28:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    ff2a:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    ff2e:	d31f      	bcc.n	ff70 <sys_heap_init+0xf4>
		((uint32_t *)cmem)[f] = val;
    ff30:	2400      	movs	r4, #0
    ff32:	606c      	str	r4, [r5, #4]
	return big_heap_chunks(h->end_chunk);
    ff34:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    ff36:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    ff3a:	d31c      	bcc.n	ff76 <sys_heap_init+0xfa>
		((uint32_t *)cmem)[f] = val;
    ff3c:	50c2      	str	r2, [r0, r3]
	return big_heap_chunks(h->end_chunk);
    ff3e:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    ff40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    ff44:	d319      	bcc.n	ff7a <sys_heap_init+0xfe>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    ff46:	686b      	ldr	r3, [r5, #4]
    ff48:	f043 0301 	orr.w	r3, r3, #1
    ff4c:	606b      	str	r3, [r5, #4]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    ff4e:	f7ff fdd2 	bl	faf6 <free_list_add>
}
    ff52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		((uint16_t *)cmem)[f] = val;
    ff54:	8043      	strh	r3, [r0, #2]
    ff56:	e7ca      	b.n	feee <sys_heap_init+0x72>
    ff58:	2300      	movs	r3, #0
    ff5a:	8003      	strh	r3, [r0, #0]
    ff5c:	e7cc      	b.n	fef8 <sys_heap_init+0x7c>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    ff5e:	8843      	ldrh	r3, [r0, #2]
    ff60:	f043 0301 	orr.w	r3, r3, #1
    ff64:	8043      	strh	r3, [r0, #2]
    ff66:	e7ce      	b.n	ff06 <sys_heap_init+0x8a>
		((uint16_t *)cmem)[f] = val;
    ff68:	8066      	strh	r6, [r4, #2]
    ff6a:	e7d5      	b.n	ff18 <sys_heap_init+0x9c>
    ff6c:	52c1      	strh	r1, [r0, r3]
    ff6e:	e7d8      	b.n	ff22 <sys_heap_init+0xa6>
    ff70:	2400      	movs	r4, #0
    ff72:	806c      	strh	r4, [r5, #2]
    ff74:	e7de      	b.n	ff34 <sys_heap_init+0xb8>
    ff76:	52c2      	strh	r2, [r0, r3]
    ff78:	e7e1      	b.n	ff3e <sys_heap_init+0xc2>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    ff7a:	886b      	ldrh	r3, [r5, #2]
    ff7c:	f043 0301 	orr.w	r3, r3, #1
    ff80:	806b      	strh	r3, [r5, #2]
    ff82:	e7e4      	b.n	ff4e <sys_heap_init+0xd2>

0000ff84 <extract_decimal>:
{
    ff84:	b410      	push	{r4}
    ff86:	4604      	mov	r4, r0
	const char *sp = *str;
    ff88:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    ff8a:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    ff8c:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    ff8e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    ff92:	2909      	cmp	r1, #9
    ff94:	d806      	bhi.n	ffa4 <extract_decimal+0x20>
		val = 10U * val + *sp++ - '0';
    ff96:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    ff9a:	3201      	adds	r2, #1
    ff9c:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    ffa0:	3830      	subs	r0, #48	; 0x30
    ffa2:	e7f3      	b.n	ff8c <extract_decimal+0x8>
	*str = sp;
    ffa4:	6022      	str	r2, [r4, #0]
}
    ffa6:	bc10      	pop	{r4}
    ffa8:	4770      	bx	lr

0000ffaa <encode_uint>:
{
    ffaa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ffae:	b083      	sub	sp, #12
    ffb0:	4604      	mov	r4, r0
    ffb2:	460d      	mov	r5, r1
    ffb4:	9201      	str	r2, [sp, #4]
    ffb6:	469a      	mov	sl, r3
    ffb8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    ffbc:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    ffbe:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    ffc2:	2b6f      	cmp	r3, #111	; 0x6f
    ffc4:	d00f      	beq.n	ffe6 <encode_uint+0x3c>
    ffc6:	d906      	bls.n	ffd6 <encode_uint+0x2c>
    ffc8:	2b70      	cmp	r3, #112	; 0x70
    ffca:	d00f      	beq.n	ffec <encode_uint+0x42>
    ffcc:	2b78      	cmp	r3, #120	; 0x78
    ffce:	d110      	bne.n	fff2 <encode_uint+0x48>
		return 16;
    ffd0:	f04f 0910 	mov.w	r9, #16
    ffd4:	e026      	b.n	10024 <encode_uint+0x7a>
	switch (specifier) {
    ffd6:	2b58      	cmp	r3, #88	; 0x58
    ffd8:	d002      	beq.n	ffe0 <encode_uint+0x36>
    ffda:	f04f 090a 	mov.w	r9, #10
    ffde:	e021      	b.n	10024 <encode_uint+0x7a>
		return 16;
    ffe0:	f04f 0910 	mov.w	r9, #16
    ffe4:	e01e      	b.n	10024 <encode_uint+0x7a>
		return 8;
    ffe6:	f04f 0908 	mov.w	r9, #8
    ffea:	e01b      	b.n	10024 <encode_uint+0x7a>
		return 16;
    ffec:	f04f 0910 	mov.w	r9, #16
    fff0:	e018      	b.n	10024 <encode_uint+0x7a>
	switch (specifier) {
    fff2:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
    fff6:	e015      	b.n	10024 <encode_uint+0x7a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    fff8:	f1bb 0f19 	cmp.w	fp, #25
    fffc:	d820      	bhi.n	10040 <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    fffe:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   10000:	3237      	adds	r2, #55	; 0x37
   10002:	b2d2      	uxtb	r2, r2
   10004:	f808 2d01 	strb.w	r2, [r8, #-1]!
		value /= radix;
   10008:	4632      	mov	r2, r6
   1000a:	463b      	mov	r3, r7
   1000c:	4620      	mov	r0, r4
   1000e:	4629      	mov	r1, r5
   10010:	f7f0 f876 	bl	100 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
   10014:	42bd      	cmp	r5, r7
   10016:	bf08      	it	eq
   10018:	42b4      	cmpeq	r4, r6
   1001a:	d315      	bcc.n	10048 <encode_uint+0x9e>
   1001c:	45d0      	cmp	r8, sl
   1001e:	d913      	bls.n	10048 <encode_uint+0x9e>
		value /= radix;
   10020:	4604      	mov	r4, r0
   10022:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
   10024:	464e      	mov	r6, r9
   10026:	2700      	movs	r7, #0
   10028:	464a      	mov	r2, r9
   1002a:	463b      	mov	r3, r7
   1002c:	4620      	mov	r0, r4
   1002e:	4629      	mov	r1, r5
   10030:	f7f0 f866 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   10034:	2a09      	cmp	r2, #9
   10036:	d8df      	bhi.n	fff8 <encode_uint+0x4e>
   10038:	b2d2      	uxtb	r2, r2
   1003a:	3230      	adds	r2, #48	; 0x30
   1003c:	b2d2      	uxtb	r2, r2
   1003e:	e7e1      	b.n	10004 <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
   10040:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
   10042:	3257      	adds	r2, #87	; 0x57
   10044:	b2d2      	uxtb	r2, r2
   10046:	e7dd      	b.n	10004 <encode_uint+0x5a>
	if (conv->flag_hash) {
   10048:	9b01      	ldr	r3, [sp, #4]
   1004a:	781b      	ldrb	r3, [r3, #0]
   1004c:	f013 0f20 	tst.w	r3, #32
   10050:	d005      	beq.n	1005e <encode_uint+0xb4>
		if (radix == 8) {
   10052:	f1b9 0f08 	cmp.w	r9, #8
   10056:	d006      	beq.n	10066 <encode_uint+0xbc>
		} else if (radix == 16) {
   10058:	f1b9 0f10 	cmp.w	r9, #16
   1005c:	d009      	beq.n	10072 <encode_uint+0xc8>
}
   1005e:	4640      	mov	r0, r8
   10060:	b003      	add	sp, #12
   10062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
   10066:	9a01      	ldr	r2, [sp, #4]
   10068:	7893      	ldrb	r3, [r2, #2]
   1006a:	f043 0308 	orr.w	r3, r3, #8
   1006e:	7093      	strb	r3, [r2, #2]
   10070:	e7f5      	b.n	1005e <encode_uint+0xb4>
			conv->altform_0c = true;
   10072:	9a01      	ldr	r2, [sp, #4]
   10074:	7893      	ldrb	r3, [r2, #2]
   10076:	f043 0310 	orr.w	r3, r3, #16
   1007a:	7093      	strb	r3, [r2, #2]
   1007c:	e7ef      	b.n	1005e <encode_uint+0xb4>

0001007e <outs>:
{
   1007e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10082:	4607      	mov	r7, r0
   10084:	460e      	mov	r6, r1
   10086:	4614      	mov	r4, r2
   10088:	4698      	mov	r8, r3
	size_t count = 0;
   1008a:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1008c:	e006      	b.n	1009c <outs+0x1e>
		int rc = out((int)*sp++, ctx);
   1008e:	4631      	mov	r1, r6
   10090:	f814 0b01 	ldrb.w	r0, [r4], #1
   10094:	47b8      	blx	r7
		if (rc < 0) {
   10096:	2800      	cmp	r0, #0
   10098:	db09      	blt.n	100ae <outs+0x30>
		++count;
   1009a:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   1009c:	4544      	cmp	r4, r8
   1009e:	d3f6      	bcc.n	1008e <outs+0x10>
   100a0:	f1b8 0f00 	cmp.w	r8, #0
   100a4:	d102      	bne.n	100ac <outs+0x2e>
   100a6:	7823      	ldrb	r3, [r4, #0]
   100a8:	2b00      	cmp	r3, #0
   100aa:	d1f0      	bne.n	1008e <outs+0x10>
	return (int)count;
   100ac:	4628      	mov	r0, r5
}
   100ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000100b2 <get_rewind_value>:
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
}

static uint32_t get_rewind_value(uint32_t buf_size, uint32_t threshold)
{
	return buf_size * (threshold / buf_size);
   100b2:	fbb1 f1f0 	udiv	r1, r1, r0
}
   100b6:	fb00 f001 	mul.w	r0, r0, r1
   100ba:	4770      	bx	lr

000100bc <mod>:
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   100bc:	6983      	ldr	r3, [r0, #24]
   100be:	b113      	cbz	r3, 100c6 <mod+0xa>
   100c0:	ea03 0001 	and.w	r0, r3, r1
   100c4:	4770      	bx	lr
   100c6:	6900      	ldr	r0, [r0, #16]
   100c8:	fbb1 f3f0 	udiv	r3, r1, r0
   100cc:	fb00 1013 	mls	r0, r0, r3, r1
}
   100d0:	4770      	bx	lr

000100d2 <ring_buf_get_rewind_threshold>:
}
   100d2:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   100d6:	4770      	bx	lr

000100d8 <ring_buf_is_empty>:

int ring_buf_is_empty(struct ring_buf *buf)
{
   100d8:	b570      	push	{r4, r5, r6, lr}
	uint32_t tail = buf->tail;
   100da:	6844      	ldr	r4, [r0, #4]
	uint32_t head = buf->head;
   100dc:	6805      	ldr	r5, [r0, #0]

	if (tail < head) {
   100de:	42ac      	cmp	r4, r5
   100e0:	d304      	bcc.n	100ec <ring_buf_is_empty+0x14>
		tail += get_rewind_value(buf->size,
					 ring_buf_get_rewind_threshold());
	}

	return (head == tail);
}
   100e2:	42ac      	cmp	r4, r5
   100e4:	bf14      	ite	ne
   100e6:	2000      	movne	r0, #0
   100e8:	2001      	moveq	r0, #1
   100ea:	bd70      	pop	{r4, r5, r6, pc}
		tail += get_rewind_value(buf->size,
   100ec:	6906      	ldr	r6, [r0, #16]
   100ee:	f7ff fff0 	bl	100d2 <ring_buf_get_rewind_threshold>
   100f2:	4601      	mov	r1, r0
   100f4:	4630      	mov	r0, r6
   100f6:	f7ff ffdc 	bl	100b2 <get_rewind_value>
   100fa:	4404      	add	r4, r0
   100fc:	e7f1      	b.n	100e2 <ring_buf_is_empty+0xa>

000100fe <ring_buf_size_get>:

uint32_t ring_buf_size_get(struct ring_buf *buf)
{
   100fe:	b570      	push	{r4, r5, r6, lr}
	uint32_t tail = buf->tail;
   10100:	6844      	ldr	r4, [r0, #4]
	uint32_t head = buf->head;
   10102:	6805      	ldr	r5, [r0, #0]

	if (tail < head) {
   10104:	42ac      	cmp	r4, r5
   10106:	d301      	bcc.n	1010c <ring_buf_size_get+0xe>
		tail += get_rewind_value(buf->size,
					 ring_buf_get_rewind_threshold());
	}

	return tail - head;
}
   10108:	1b60      	subs	r0, r4, r5
   1010a:	bd70      	pop	{r4, r5, r6, pc}
		tail += get_rewind_value(buf->size,
   1010c:	6906      	ldr	r6, [r0, #16]
   1010e:	f7ff ffe0 	bl	100d2 <ring_buf_get_rewind_threshold>
   10112:	4601      	mov	r1, r0
   10114:	4630      	mov	r0, r6
   10116:	f7ff ffcc 	bl	100b2 <get_rewind_value>
   1011a:	4404      	add	r4, r0
   1011c:	e7f4      	b.n	10108 <ring_buf_size_get+0xa>

0001011e <ring_buf_space_get>:

uint32_t ring_buf_space_get(struct ring_buf *buf)
{
   1011e:	b510      	push	{r4, lr}
	return buf->size - ring_buf_size_get(buf);
   10120:	6904      	ldr	r4, [r0, #16]
   10122:	f7ff ffec 	bl	100fe <ring_buf_size_get>
}
   10126:	1a20      	subs	r0, r4, r0
   10128:	bd10      	pop	{r4, pc}

0001012a <ring_buf_put_claim>:
{
	return val >= max ? (val - max) : val;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   1012a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1012e:	4604      	mov	r4, r0
   10130:	460e      	mov	r6, r1
   10132:	4617      	mov	r7, r2
	uint32_t space, trail_size, allocated, tmp_trail_mod;

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
   10134:	f8d0 8008 	ldr.w	r8, [r0, #8]
   10138:	4641      	mov	r1, r8
   1013a:	f7ff ffbf 	bl	100bc <mod>
   1013e:	4601      	mov	r1, r0
	space = (buf->head + buf->size) - buf->misc.byte_mode.tmp_tail;
   10140:	6825      	ldr	r5, [r4, #0]
   10142:	6920      	ldr	r0, [r4, #16]
   10144:	4405      	add	r5, r0
   10146:	eba5 0208 	sub.w	r2, r5, r8
	trail_size = buf->size - tmp_trail_mod;
   1014a:	1a40      	subs	r0, r0, r1

	/* Limit requested size to available size. */
	size = MIN(size, space);
   1014c:	42ba      	cmp	r2, r7
   1014e:	bf28      	it	cs
   10150:	463a      	movcs	r2, r7

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
   10152:	4290      	cmp	r0, r2
   10154:	bf28      	it	cs
   10156:	4610      	movcs	r0, r2
	*data = &buf->buf.buf8[tmp_trail_mod];
   10158:	6963      	ldr	r3, [r4, #20]
   1015a:	4419      	add	r1, r3
   1015c:	6031      	str	r1, [r6, #0]

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
   1015e:	68a3      	ldr	r3, [r4, #8]
   10160:	4403      	add	r3, r0
	buf->misc.byte_mode.tmp_tail =
   10162:	60a3      	str	r3, [r4, #8]

	return allocated;
}
   10164:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00010168 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
   10168:	b570      	push	{r4, r5, r6, lr}
   1016a:	4604      	mov	r4, r0
   1016c:	460d      	mov	r5, r1
	uint32_t rew;
	uint32_t threshold = ring_buf_get_rewind_threshold();
   1016e:	f7ff ffb0 	bl	100d2 <ring_buf_get_rewind_threshold>
   10172:	4601      	mov	r1, r0

	if ((buf->tail + size) > (buf->head + buf->size)) {
   10174:	6866      	ldr	r6, [r4, #4]
   10176:	1972      	adds	r2, r6, r5
   10178:	6823      	ldr	r3, [r4, #0]
   1017a:	6920      	ldr	r0, [r4, #16]
   1017c:	4403      	add	r3, r0
   1017e:	429a      	cmp	r2, r3
   10180:	d80b      	bhi.n	1019a <ring_buf_put_finish+0x32>
		return -EINVAL;
	}

	/* Check if indexes shall be rewind. */
	if (buf->tail > threshold) {
   10182:	428e      	cmp	r6, r1
   10184:	d907      	bls.n	10196 <ring_buf_put_finish+0x2e>
		rew = get_rewind_value(buf->size, threshold);
   10186:	f7ff ff94 	bl	100b2 <get_rewind_value>
	} else {
		rew = 0;
	}

	buf->tail += (size - rew);
   1018a:	1a2d      	subs	r5, r5, r0
   1018c:	442e      	add	r6, r5
   1018e:	6066      	str	r6, [r4, #4]
	buf->misc.byte_mode.tmp_tail = buf->tail;
   10190:	60a6      	str	r6, [r4, #8]

	return 0;
   10192:	2000      	movs	r0, #0
}
   10194:	bd70      	pop	{r4, r5, r6, pc}
		rew = 0;
   10196:	2000      	movs	r0, #0
   10198:	e7f7      	b.n	1018a <ring_buf_put_finish+0x22>
		return -EINVAL;
   1019a:	f06f 0015 	mvn.w	r0, #21
   1019e:	e7f9      	b.n	10194 <ring_buf_put_finish+0x2c>

000101a0 <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
   101a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   101a4:	b082      	sub	sp, #8
   101a6:	4680      	mov	r8, r0
   101a8:	460e      	mov	r6, r1
   101aa:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   101ac:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
   101ae:	462a      	mov	r2, r5
   101b0:	a901      	add	r1, sp, #4
   101b2:	4640      	mov	r0, r8
   101b4:	f7ff ffb9 	bl	1012a <ring_buf_put_claim>
   101b8:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
   101ba:	4602      	mov	r2, r0
   101bc:	4631      	mov	r1, r6
   101be:	9801      	ldr	r0, [sp, #4]
   101c0:	f001 f814 	bl	111ec <memcpy>
		total_size += partial_size;
   101c4:	4427      	add	r7, r4
		size -= partial_size;
		data += partial_size;
   101c6:	4426      	add	r6, r4
	} while (size && partial_size);
   101c8:	1b2d      	subs	r5, r5, r4
   101ca:	d001      	beq.n	101d0 <ring_buf_put+0x30>
   101cc:	2c00      	cmp	r4, #0
   101ce:	d1ee      	bne.n	101ae <ring_buf_put+0xe>

	err = ring_buf_put_finish(buf, total_size);
   101d0:	4639      	mov	r1, r7
   101d2:	4640      	mov	r0, r8
   101d4:	f7ff ffc8 	bl	10168 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   101d8:	4638      	mov	r0, r7
   101da:	b002      	add	sp, #8
   101dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000101e0 <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
   101e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   101e4:	4604      	mov	r4, r0
   101e6:	460e      	mov	r6, r1
   101e8:	4617      	mov	r7, r2
	uint32_t space, granted_size, trail_size, tmp_head_mod;
	uint32_t tail = buf->tail;
   101ea:	6845      	ldr	r5, [r0, #4]

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
   101ec:	68c3      	ldr	r3, [r0, #12]
   101ee:	42ab      	cmp	r3, r5
   101f0:	d818      	bhi.n	10224 <ring_buf_get_claim+0x44>
		/* Locally, increment it to pre-rewind value */
		tail += get_rewind_value(buf->size,
					 ring_buf_get_rewind_threshold());
	}

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
   101f2:	f8d4 800c 	ldr.w	r8, [r4, #12]
   101f6:	4641      	mov	r1, r8
   101f8:	4620      	mov	r0, r4
   101fa:	f7ff ff5f 	bl	100bc <mod>
   101fe:	4601      	mov	r1, r0
	space = tail - buf->misc.byte_mode.tmp_head;
   10200:	eba5 0508 	sub.w	r5, r5, r8
	trail_size = buf->size - tmp_head_mod;
   10204:	6923      	ldr	r3, [r4, #16]
   10206:	1a18      	subs	r0, r3, r0

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
   10208:	42bd      	cmp	r5, r7
   1020a:	bf28      	it	cs
   1020c:	463d      	movcs	r5, r7

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
   1020e:	42a8      	cmp	r0, r5
   10210:	bf28      	it	cs
   10212:	4628      	movcs	r0, r5

	*data = &buf->buf.buf8[tmp_head_mod];
   10214:	6963      	ldr	r3, [r4, #20]
   10216:	4419      	add	r1, r3
   10218:	6031      	str	r1, [r6, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
   1021a:	68e3      	ldr	r3, [r4, #12]
   1021c:	4403      	add	r3, r0
   1021e:	60e3      	str	r3, [r4, #12]

	return granted_size;
}
   10220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tail += get_rewind_value(buf->size,
   10224:	f8d0 8010 	ldr.w	r8, [r0, #16]
   10228:	f7ff ff53 	bl	100d2 <ring_buf_get_rewind_threshold>
   1022c:	4601      	mov	r1, r0
   1022e:	4640      	mov	r0, r8
   10230:	f7ff ff3f 	bl	100b2 <get_rewind_value>
   10234:	4405      	add	r5, r0
   10236:	e7dc      	b.n	101f2 <ring_buf_get_claim+0x12>

00010238 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
   10238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1023a:	4604      	mov	r4, r0
   1023c:	460d      	mov	r5, r1
	uint32_t tail = buf->tail;
   1023e:	6846      	ldr	r6, [r0, #4]
	uint32_t rew;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
   10240:	68c3      	ldr	r3, [r0, #12]
   10242:	42b3      	cmp	r3, r6
   10244:	d80a      	bhi.n	1025c <ring_buf_get_finish+0x24>
		/* tail was rewinded. Locally, increment it to pre-rewind value */
		rew = get_rewind_value(buf->size,
				       ring_buf_get_rewind_threshold());
		tail += rew;
	} else {
		rew = 0;
   10246:	2000      	movs	r0, #0
	}

	if ((buf->head + size) > tail) {
   10248:	6823      	ldr	r3, [r4, #0]
   1024a:	195a      	adds	r2, r3, r5
   1024c:	42b2      	cmp	r2, r6
   1024e:	d80e      	bhi.n	1026e <ring_buf_get_finish+0x36>
		return -EINVAL;
	}

	/* Include potential rewinding. */
	buf->head += (size - rew);
   10250:	1a2d      	subs	r5, r5, r0
   10252:	442b      	add	r3, r5
   10254:	6023      	str	r3, [r4, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
   10256:	60e3      	str	r3, [r4, #12]

	return 0;
   10258:	2000      	movs	r0, #0
}
   1025a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rew = get_rewind_value(buf->size,
   1025c:	6907      	ldr	r7, [r0, #16]
   1025e:	f7ff ff38 	bl	100d2 <ring_buf_get_rewind_threshold>
   10262:	4601      	mov	r1, r0
   10264:	4638      	mov	r0, r7
   10266:	f7ff ff24 	bl	100b2 <get_rewind_value>
		tail += rew;
   1026a:	4406      	add	r6, r0
   1026c:	e7ec      	b.n	10248 <ring_buf_get_finish+0x10>
		return -EINVAL;
   1026e:	f06f 0015 	mvn.w	r0, #21
   10272:	e7f2      	b.n	1025a <ring_buf_get_finish+0x22>

00010274 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
   10274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10278:	b082      	sub	sp, #8
   1027a:	4680      	mov	r8, r0
   1027c:	460e      	mov	r6, r1
   1027e:	4615      	mov	r5, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   10280:	2700      	movs	r7, #0
   10282:	e009      	b.n	10298 <ring_buf_get+0x24>
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
		if (data) {
			memcpy(data, src, partial_size);
   10284:	4602      	mov	r2, r0
   10286:	9901      	ldr	r1, [sp, #4]
   10288:	4630      	mov	r0, r6
   1028a:	f000 ffaf 	bl	111ec <memcpy>
			data += partial_size;
   1028e:	4426      	add	r6, r4
		}
		total_size += partial_size;
   10290:	4427      	add	r7, r4
		size -= partial_size;
	} while (size && partial_size);
   10292:	1b2d      	subs	r5, r5, r4
   10294:	d009      	beq.n	102aa <ring_buf_get+0x36>
   10296:	b144      	cbz	r4, 102aa <ring_buf_get+0x36>
		partial_size = ring_buf_get_claim(buf, &src, size);
   10298:	462a      	mov	r2, r5
   1029a:	a901      	add	r1, sp, #4
   1029c:	4640      	mov	r0, r8
   1029e:	f7ff ff9f 	bl	101e0 <ring_buf_get_claim>
   102a2:	4604      	mov	r4, r0
		if (data) {
   102a4:	2e00      	cmp	r6, #0
   102a6:	d1ed      	bne.n	10284 <ring_buf_get+0x10>
   102a8:	e7f2      	b.n	10290 <ring_buf_get+0x1c>

	err = ring_buf_get_finish(buf, total_size);
   102aa:	4639      	mov	r1, r7
   102ac:	4640      	mov	r0, r8
   102ae:	f7ff ffc3 	bl	10238 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
   102b2:	4638      	mov	r0, r7
   102b4:	b002      	add	sp, #8
   102b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000102ba <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   102ba:	4770      	bx	lr

000102bc <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   102bc:	2300      	movs	r3, #0
   102be:	6043      	str	r3, [r0, #4]
	list->head = NULL;
   102c0:	6003      	str	r3, [r0, #0]
}
   102c2:	4770      	bx	lr

000102c4 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   102c4:	6803      	ldr	r3, [r0, #0]
   102c6:	b12b      	cbz	r3, 102d4 <log_list_add_tail+0x10>
		list->head = msg;
	} else {
		list->tail->next = msg;
   102c8:	6843      	ldr	r3, [r0, #4]
   102ca:	6019      	str	r1, [r3, #0]
	}

	list->tail = msg;
   102cc:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   102ce:	2300      	movs	r3, #0
   102d0:	600b      	str	r3, [r1, #0]
}
   102d2:	4770      	bx	lr
		list->head = msg;
   102d4:	6001      	str	r1, [r0, #0]
   102d6:	e7f9      	b.n	102cc <log_list_add_tail+0x8>

000102d8 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   102d8:	6800      	ldr	r0, [r0, #0]
   102da:	4770      	bx	lr

000102dc <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   102dc:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   102de:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   102e0:	b108      	cbz	r0, 102e6 <log_list_head_get+0xa>
		list->head = list->head->next;
   102e2:	6802      	ldr	r2, [r0, #0]
   102e4:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   102e6:	4770      	bx	lr

000102e8 <dummy_timestamp>:
}
   102e8:	2000      	movs	r0, #0
   102ea:	4770      	bx	lr

000102ec <msg_filter_check>:
}
   102ec:	2001      	movs	r0, #1
   102ee:	4770      	bx	lr

000102f0 <default_get_timestamp>:
{
   102f0:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   102f2:	f001 ffbc 	bl	1226e <sys_clock_cycle_get_32>
}
   102f6:	bd08      	pop	{r3, pc}

000102f8 <z_log_get_s_mask>:
{
   102f8:	b470      	push	{r4, r5, r6}
   102fa:	4603      	mov	r3, r0
	uint32_t mask = 0U;
   102fc:	2000      	movs	r0, #0
	uint32_t arg = 0U;
   102fe:	4605      	mov	r5, r0
	bool arm = false;
   10300:	4604      	mov	r4, r0
	while ((curr = *str++) && arg < nargs) {
   10302:	e001      	b.n	10308 <z_log_get_s_mask+0x10>
			arm = !arm;
   10304:	f084 0401 	eor.w	r4, r4, #1
	while ((curr = *str++) && arg < nargs) {
   10308:	f813 2b01 	ldrb.w	r2, [r3], #1
   1030c:	b19a      	cbz	r2, 10336 <z_log_get_s_mask+0x3e>
   1030e:	428d      	cmp	r5, r1
   10310:	d211      	bcs.n	10336 <z_log_get_s_mask+0x3e>
		if (curr == '%') {
   10312:	2a25      	cmp	r2, #37	; 0x25
   10314:	d0f6      	beq.n	10304 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   10316:	2c00      	cmp	r4, #0
   10318:	d0f6      	beq.n	10308 <z_log_get_s_mask+0x10>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1031a:	f042 0620 	orr.w	r6, r2, #32
   1031e:	3e61      	subs	r6, #97	; 0x61
   10320:	2e19      	cmp	r6, #25
   10322:	d8f1      	bhi.n	10308 <z_log_get_s_mask+0x10>
			if (curr == 's') {
   10324:	2a73      	cmp	r2, #115	; 0x73
   10326:	d002      	beq.n	1032e <z_log_get_s_mask+0x36>
			arg++;
   10328:	3501      	adds	r5, #1
			arm = false;
   1032a:	2400      	movs	r4, #0
   1032c:	e7ec      	b.n	10308 <z_log_get_s_mask+0x10>
				mask |= BIT(arg);
   1032e:	2201      	movs	r2, #1
   10330:	40aa      	lsls	r2, r5
   10332:	4310      	orrs	r0, r2
   10334:	e7f8      	b.n	10328 <z_log_get_s_mask+0x30>
}
   10336:	bc70      	pop	{r4, r5, r6}
   10338:	4770      	bx	lr

0001033a <block_on_alloc>:
}
   1033a:	2000      	movs	r0, #0
   1033c:	4770      	bx	lr

0001033e <cont_arg_get>:

static log_arg_t cont_arg_get(struct log_msg *msg, uint32_t arg_idx)
{
	struct log_msg_cont *cont;

	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   1033e:	2901      	cmp	r1, #1
   10340:	d906      	bls.n	10350 <cont_arg_get+0x12>
		return msg->payload.ext.data.args[arg_idx];
	}


	cont = msg->payload.ext.next;
   10342:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   10344:	3902      	subs	r1, #2

	while (arg_idx >= ARGS_CONT_MSG) {
   10346:	2906      	cmp	r1, #6
   10348:	d907      	bls.n	1035a <cont_arg_get+0x1c>
		arg_idx -= ARGS_CONT_MSG;
   1034a:	3907      	subs	r1, #7
		cont = cont->next;
   1034c:	681b      	ldr	r3, [r3, #0]
   1034e:	e7fa      	b.n	10346 <cont_arg_get+0x8>
		return msg->payload.ext.data.args[arg_idx];
   10350:	3104      	adds	r1, #4
   10352:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   10356:	6888      	ldr	r0, [r1, #8]
   10358:	4770      	bx	lr
	}

	return cont->payload.args[arg_idx];
   1035a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   1035e:	6848      	ldr	r0, [r1, #4]
}
   10360:	4770      	bx	lr

00010362 <copy_args_to_msg>:

	return msg;
}

static void copy_args_to_msg(struct  log_msg *msg, log_arg_t *args, uint32_t nargs)
{
   10362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10366:	460d      	mov	r5, r1
   10368:	4614      	mov	r4, r2
	struct log_msg_cont *cont = msg->payload.ext.next;
   1036a:	6946      	ldr	r6, [r0, #20]

	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   1036c:	2a03      	cmp	r2, #3
   1036e:	d917      	bls.n	103a0 <copy_args_to_msg+0x3e>
		(void)memcpy(msg->payload.ext.data.args, args,
   10370:	2208      	movs	r2, #8
   10372:	3018      	adds	r0, #24
   10374:	f000 ff3a 	bl	111ec <memcpy>
		       LOG_MSG_NARGS_HEAD_CHUNK * sizeof(log_arg_t));
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   10378:	3c02      	subs	r4, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   1037a:	3508      	adds	r5, #8
		(void)memcpy(msg->payload.single.args, args,
			     nargs * sizeof(log_arg_t));
		nargs  = 0U;
	}

	while (nargs != 0U) {
   1037c:	b1b4      	cbz	r4, 103ac <copy_args_to_msg+0x4a>
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   1037e:	46a0      	mov	r8, r4
   10380:	2c07      	cmp	r4, #7
   10382:	bf28      	it	cs
   10384:	f04f 0807 	movcs.w	r8, #7

		(void)memcpy(cont->payload.args, args,
   10388:	ea4f 0788 	mov.w	r7, r8, lsl #2
   1038c:	463a      	mov	r2, r7
   1038e:	4629      	mov	r1, r5
   10390:	1d30      	adds	r0, r6, #4
   10392:	f000 ff2b 	bl	111ec <memcpy>
			     cpy_args * sizeof(log_arg_t));
		nargs -= cpy_args;
   10396:	eba4 0408 	sub.w	r4, r4, r8
		args += cpy_args;
   1039a:	443d      	add	r5, r7
		cont = cont->next;
   1039c:	6836      	ldr	r6, [r6, #0]
   1039e:	e7ed      	b.n	1037c <copy_args_to_msg+0x1a>
		(void)memcpy(msg->payload.single.args, args,
   103a0:	0092      	lsls	r2, r2, #2
   103a2:	3014      	adds	r0, #20
   103a4:	f000 ff22 	bl	111ec <memcpy>
		nargs  = 0U;
   103a8:	2400      	movs	r4, #0
   103aa:	e7e7      	b.n	1037c <copy_args_to_msg+0x1a>
	}
}
   103ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000103b0 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   103b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   103b4:	461c      	mov	r4, r3
   103b6:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint32_t available_len = msg->hdr.params.hexdump.length;
   103ba:	8903      	ldrh	r3, [r0, #8]
   103bc:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   103c0:	42a3      	cmp	r3, r4
   103c2:	d91f      	bls.n	10404 <log_msg_hexdump_data_op+0x54>
   103c4:	4688      	mov	r8, r1
		*length = 0;
		return;
	}

	if ((offset + *length) > available_len) {
   103c6:	6811      	ldr	r1, [r2, #0]
   103c8:	4421      	add	r1, r4
   103ca:	4299      	cmp	r1, r3
   103cc:	d901      	bls.n	103d2 <log_msg_hexdump_data_op+0x22>
		*length = available_len - offset;
   103ce:	1b19      	subs	r1, r3, r4
   103d0:	6011      	str	r1, [r2, #0]
	}

	req_len = *length;
   103d2:	6817      	ldr	r7, [r2, #0]

	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   103d4:	2b0c      	cmp	r3, #12
   103d6:	d919      	bls.n	1040c <log_msg_hexdump_data_op+0x5c>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
		head_data = msg->payload.ext.data.bytes;
   103d8:	f100 0c18 	add.w	ip, r0, #24
		cont = msg->payload.ext.next;
   103dc:	6946      	ldr	r6, [r0, #20]
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   103de:	2308      	movs	r3, #8
		head_data = msg->payload.single.bytes;
		chunk_len = available_len;

	}

	if (offset < chunk_len) {
   103e0:	42a3      	cmp	r3, r4
   103e2:	d91e      	bls.n	10422 <log_msg_hexdump_data_op+0x72>
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   103e4:	42bb      	cmp	r3, r7
   103e6:	bf28      	it	cs
   103e8:	463b      	movcs	r3, r7
   103ea:	461d      	mov	r5, r3

		if (put_op) {
   103ec:	f1b9 0f00 	cmp.w	r9, #0
   103f0:	d010      	beq.n	10414 <log_msg_hexdump_data_op+0x64>
			(void)memcpy(&head_data[offset], data, cpy_len);
   103f2:	461a      	mov	r2, r3
   103f4:	4641      	mov	r1, r8
   103f6:	eb0c 0004 	add.w	r0, ip, r4
   103fa:	f000 fef7 	bl	111ec <memcpy>
		} else {
			(void)memcpy(data, &head_data[offset], cpy_len);
		}

		req_len -= cpy_len;
   103fe:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
   10400:	44a8      	add	r8, r5
   10402:	e021      	b.n	10448 <log_msg_hexdump_data_op+0x98>
		*length = 0;
   10404:	2300      	movs	r3, #0
   10406:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   10408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		head_data = msg->payload.single.bytes;
   1040c:	f100 0c14 	add.w	ip, r0, #20
	struct log_msg_cont *cont = NULL;
   10410:	2600      	movs	r6, #0
   10412:	e7e5      	b.n	103e0 <log_msg_hexdump_data_op+0x30>
			(void)memcpy(data, &head_data[offset], cpy_len);
   10414:	461a      	mov	r2, r3
   10416:	eb0c 0104 	add.w	r1, ip, r4
   1041a:	4640      	mov	r0, r8
   1041c:	f000 fee6 	bl	111ec <memcpy>
   10420:	e7ed      	b.n	103fe <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   10422:	1ae4      	subs	r4, r4, r3
		if (cont == NULL) {
   10424:	b91e      	cbnz	r6, 1042e <log_msg_hexdump_data_op+0x7e>
			cont = msg->payload.ext.next;
   10426:	6946      	ldr	r6, [r0, #20]
   10428:	e001      	b.n	1042e <log_msg_hexdump_data_op+0x7e>
			cont = cont->next;
   1042a:	6836      	ldr	r6, [r6, #0]
			offset -= chunk_len;
   1042c:	3c1c      	subs	r4, #28
		while (offset >= chunk_len) {
   1042e:	2c1b      	cmp	r4, #27
   10430:	d8fb      	bhi.n	1042a <log_msg_hexdump_data_op+0x7a>
   10432:	e009      	b.n	10448 <log_msg_hexdump_data_op+0x98>
			(void)memcpy(data, &cont->payload.bytes[offset],
   10434:	1931      	adds	r1, r6, r4
   10436:	462a      	mov	r2, r5
   10438:	3104      	adds	r1, #4
   1043a:	4640      	mov	r0, r8
   1043c:	f000 fed6 	bl	111ec <memcpy>
		cont = cont->next;
   10440:	6836      	ldr	r6, [r6, #0]
		req_len -= cpy_len;
   10442:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
   10444:	44a8      	add	r8, r5
		offset = 0;
   10446:	2400      	movs	r4, #0
	while ((req_len > 0) && (cont != NULL)) {
   10448:	2f00      	cmp	r7, #0
   1044a:	d0dd      	beq.n	10408 <log_msg_hexdump_data_op+0x58>
   1044c:	2e00      	cmp	r6, #0
   1044e:	d0db      	beq.n	10408 <log_msg_hexdump_data_op+0x58>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   10450:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   10454:	42bd      	cmp	r5, r7
   10456:	bf28      	it	cs
   10458:	463d      	movcs	r5, r7
		if (put_op) {
   1045a:	f1b9 0f00 	cmp.w	r9, #0
   1045e:	d0e9      	beq.n	10434 <log_msg_hexdump_data_op+0x84>
			(void)memcpy(&cont->payload.bytes[offset],
   10460:	1930      	adds	r0, r6, r4
   10462:	462a      	mov	r2, r5
   10464:	4641      	mov	r1, r8
   10466:	3004      	adds	r0, #4
   10468:	f000 fec0 	bl	111ec <memcpy>
   1046c:	e7e8      	b.n	10440 <log_msg_hexdump_data_op+0x90>

0001046e <log_msg_get>:
	atomic_inc(&msg->hdr.ref_cnt);
   1046e:	3004      	adds	r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   10470:	f3bf 8f5b 	dmb	ish
   10474:	e850 3f00 	ldrex	r3, [r0]
   10478:	3301      	adds	r3, #1
   1047a:	e840 3200 	strex	r2, r3, [r0]
   1047e:	2a00      	cmp	r2, #0
   10480:	d1f8      	bne.n	10474 <log_msg_get+0x6>
   10482:	f3bf 8f5b 	dmb	ish
}
   10486:	4770      	bx	lr

00010488 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   10488:	7a40      	ldrb	r0, [r0, #9]
}
   1048a:	0900      	lsrs	r0, r0, #4
   1048c:	4770      	bx	lr

0001048e <log_msg_arg_get>:
{
   1048e:	b508      	push	{r3, lr}
	if (arg_idx >= msg->hdr.params.std.nargs) {
   10490:	7a43      	ldrb	r3, [r0, #9]
   10492:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   10496:	d20a      	bcs.n	104ae <log_msg_arg_get+0x20>
   10498:	091a      	lsrs	r2, r3, #4
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   1049a:	2a03      	cmp	r2, #3
   1049c:	d804      	bhi.n	104a8 <log_msg_arg_get+0x1a>
		arg = msg->payload.single.args[arg_idx];
   1049e:	3104      	adds	r1, #4
   104a0:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   104a4:	6840      	ldr	r0, [r0, #4]
   104a6:	e003      	b.n	104b0 <log_msg_arg_get+0x22>
		arg = cont_arg_get(msg, arg_idx);
   104a8:	f7ff ff49 	bl	1033e <cont_arg_get>
   104ac:	e000      	b.n	104b0 <log_msg_arg_get+0x22>
		return 0;
   104ae:	2000      	movs	r0, #0
}
   104b0:	bd08      	pop	{r3, pc}

000104b2 <log_msg_str_get>:
}
   104b2:	6900      	ldr	r0, [r0, #16]
   104b4:	4770      	bx	lr

000104b6 <log_msg_put>:
{
   104b6:	b508      	push	{r3, lr}
	atomic_dec(&msg->hdr.ref_cnt);
   104b8:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   104ba:	f3bf 8f5b 	dmb	ish
   104be:	e853 2f00 	ldrex	r2, [r3]
   104c2:	3a01      	subs	r2, #1
   104c4:	e843 2100 	strex	r1, r2, [r3]
   104c8:	2900      	cmp	r1, #0
   104ca:	d1f8      	bne.n	104be <log_msg_put+0x8>
   104cc:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   104d0:	6843      	ldr	r3, [r0, #4]
   104d2:	b103      	cbz	r3, 104d6 <log_msg_put+0x20>
}
   104d4:	bd08      	pop	{r3, pc}
		msg_free(msg);
   104d6:	f7f1 fc49 	bl	1d6c <msg_free>
}
   104da:	e7fb      	b.n	104d4 <log_msg_put+0x1e>

000104dc <msg_alloc>:
{
   104dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   104de:	4605      	mov	r5, r0
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   104e0:	f7f1 fc28 	bl	1d34 <log_msg_chunk_alloc>
	if (msg != NULL) {
   104e4:	4607      	mov	r7, r0
   104e6:	b140      	cbz	r0, 104fa <msg_alloc+0x1e>
		msg->hdr.ref_cnt = 1;
   104e8:	2301      	movs	r3, #1
   104ea:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   104ec:	2200      	movs	r2, #0
   104ee:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
   104f0:	f04f 0300 	mov.w	r3, #0
   104f4:	f362 0300 	bfi	r3, r2, #0, #1
   104f8:	7203      	strb	r3, [r0, #8]
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   104fa:	b1f7      	cbz	r7, 1053a <msg_alloc+0x5e>
   104fc:	2d03      	cmp	r5, #3
   104fe:	d91c      	bls.n	1053a <msg_alloc+0x5e>
	msg->hdr.params.std.nargs = 0U;
   10500:	7a7b      	ldrb	r3, [r7, #9]
   10502:	f36f 1307 	bfc	r3, #4, #4
   10506:	727b      	strb	r3, [r7, #9]
	msg->hdr.params.generic.ext = 1;
   10508:	7a3b      	ldrb	r3, [r7, #8]
   1050a:	f043 0302 	orr.w	r3, r3, #2
   1050e:	723b      	strb	r3, [r7, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   10510:	3d02      	subs	r5, #2
	next = &msg->payload.ext.next;
   10512:	f107 0614 	add.w	r6, r7, #20
	*next = NULL;
   10516:	2300      	movs	r3, #0
   10518:	617b      	str	r3, [r7, #20]
	while (n > 0) {
   1051a:	2d00      	cmp	r5, #0
   1051c:	dd0d      	ble.n	1053a <msg_alloc+0x5e>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   1051e:	f7f1 fc09 	bl	1d34 <log_msg_chunk_alloc>
		if (cont == NULL) {
   10522:	4604      	mov	r4, r0
   10524:	b128      	cbz	r0, 10532 <msg_alloc+0x56>
		*next = cont;
   10526:	6030      	str	r0, [r6, #0]
		cont->next = NULL;
   10528:	2300      	movs	r3, #0
   1052a:	6003      	str	r3, [r0, #0]
		next = &cont->next;
   1052c:	4606      	mov	r6, r0
		n -= ARGS_CONT_MSG;
   1052e:	3d07      	subs	r5, #7
   10530:	e7f3      	b.n	1051a <msg_alloc+0x3e>
			msg_free(msg);
   10532:	4638      	mov	r0, r7
   10534:	f7f1 fc1a 	bl	1d6c <msg_free>
			return NULL;
   10538:	4627      	mov	r7, r4
}
   1053a:	4638      	mov	r0, r7
   1053c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001053e <log_msg_create_n>:
{
   1053e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10540:	4607      	mov	r7, r0
   10542:	460e      	mov	r6, r1
   10544:	4614      	mov	r4, r2
	msg = msg_alloc(nargs);
   10546:	4610      	mov	r0, r2
   10548:	f7ff ffc8 	bl	104dc <msg_alloc>
	if (msg != NULL) {
   1054c:	4605      	mov	r5, r0
   1054e:	b140      	cbz	r0, 10562 <log_msg_create_n+0x24>
		msg->str = str;
   10550:	6107      	str	r7, [r0, #16]
		msg->hdr.params.std.nargs = nargs;
   10552:	7a43      	ldrb	r3, [r0, #9]
   10554:	f364 1307 	bfi	r3, r4, #4, #4
   10558:	7243      	strb	r3, [r0, #9]
		copy_args_to_msg(msg, args, nargs);
   1055a:	4622      	mov	r2, r4
   1055c:	4631      	mov	r1, r6
   1055e:	f7ff ff00 	bl	10362 <copy_args_to_msg>
}
   10562:	4628      	mov	r0, r5
   10564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00010566 <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   10566:	b510      	push	{r4, lr}
   10568:	b082      	sub	sp, #8
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   1056a:	2400      	movs	r4, #0
   1056c:	9400      	str	r4, [sp, #0]
   1056e:	f7ff ff1f 	bl	103b0 <log_msg_hexdump_data_op>
}
   10572:	b002      	add	sp, #8
   10574:	bd10      	pop	{r4, pc}

00010576 <buffer_write>:
{
   10576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10578:	4607      	mov	r7, r0
   1057a:	460d      	mov	r5, r1
   1057c:	4614      	mov	r4, r2
   1057e:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
   10580:	4632      	mov	r2, r6
   10582:	4621      	mov	r1, r4
   10584:	4628      	mov	r0, r5
   10586:	47b8      	blx	r7
		buf += processed;
   10588:	4405      	add	r5, r0
	} while (len != 0);
   1058a:	1a24      	subs	r4, r4, r0
   1058c:	d1f8      	bne.n	10580 <buffer_write+0xa>
}
   1058e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00010590 <color_prefix>:
{
   10590:	b508      	push	{r3, lr}
   10592:	4613      	mov	r3, r2
	color_print(output, color, true, level);
   10594:	2201      	movs	r2, #1
   10596:	f7f1 fc81 	bl	1e9c <color_print>
}
   1059a:	bd08      	pop	{r3, pc}

0001059c <color_postfix>:
{
   1059c:	b508      	push	{r3, lr}
   1059e:	4613      	mov	r3, r2
	color_print(output, color, false, level);
   105a0:	2200      	movs	r2, #0
   105a2:	f7f1 fc7b 	bl	1e9c <color_print>
}
   105a6:	bd08      	pop	{r3, pc}

000105a8 <postfix_print>:
{
   105a8:	b538      	push	{r3, r4, r5, lr}
   105aa:	4605      	mov	r5, r0
   105ac:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
   105ae:	f001 0101 	and.w	r1, r1, #1
   105b2:	f7ff fff3 	bl	1059c <color_postfix>
	newline_print(output, flags);
   105b6:	4621      	mov	r1, r4
   105b8:	4628      	mov	r0, r5
   105ba:	f7f1 fc85 	bl	1ec8 <newline_print>
}
   105be:	bd38      	pop	{r3, r4, r5, pc}

000105c0 <prefix_print>:
{
   105c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   105c4:	b083      	sub	sp, #12
   105c6:	4604      	mov	r4, r0
   105c8:	4615      	mov	r5, r2
   105ca:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   105ce:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   105d2:	f3c1 08c0 	ubfx	r8, r1, #3, #1
	if (stamp) {
   105d6:	f011 0702 	ands.w	r7, r1, #2
   105da:	d113      	bne.n	10604 <prefix_print+0x44>
		color_prefix(output, colors_on, level);
   105dc:	4632      	mov	r2, r6
   105de:	4649      	mov	r1, r9
   105e0:	4620      	mov	r0, r4
   105e2:	f7ff ffd5 	bl	10590 <color_prefix>
	length += ids_print(output, level_on, func_on,
   105e6:	9601      	str	r6, [sp, #4]
   105e8:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
   105ec:	9300      	str	r3, [sp, #0]
   105ee:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   105f2:	462a      	mov	r2, r5
   105f4:	4641      	mov	r1, r8
   105f6:	4620      	mov	r0, r4
   105f8:	f7f1 fcd8 	bl	1fac <ids_print>
}
   105fc:	4438      	add	r0, r7
   105fe:	b003      	add	sp, #12
   10600:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		length += timestamp_print(output, flags, timestamp);
   10604:	461a      	mov	r2, r3
   10606:	f7f1 fc03 	bl	1e10 <timestamp_print>
   1060a:	4607      	mov	r7, r0
   1060c:	e7e6      	b.n	105dc <prefix_print+0x1c>

0001060e <std_print>:
{
   1060e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10612:	b08e      	sub	sp, #56	; 0x38
   10614:	af0e      	add	r7, sp, #56	; 0x38
   10616:	4606      	mov	r6, r0
   10618:	4689      	mov	r9, r1
	const char *str = log_msg_str_get(msg);
   1061a:	f7ff ff4a 	bl	104b2 <log_msg_str_get>
   1061e:	4682      	mov	sl, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   10620:	4630      	mov	r0, r6
   10622:	f7ff ff31 	bl	10488 <log_msg_nargs_get>
   10626:	4680      	mov	r8, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   10628:	0083      	lsls	r3, r0, #2
   1062a:	3307      	adds	r3, #7
   1062c:	f023 0307 	bic.w	r3, r3, #7
   10630:	ebad 0d03 	sub.w	sp, sp, r3
   10634:	ad0e      	add	r5, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   10636:	2400      	movs	r4, #0
   10638:	4544      	cmp	r4, r8
   1063a:	d207      	bcs.n	1064c <std_print+0x3e>
		args[i] = log_msg_arg_get(msg, i);
   1063c:	4621      	mov	r1, r4
   1063e:	4630      	mov	r0, r6
   10640:	f7ff ff25 	bl	1048e <log_msg_arg_get>
   10644:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	for (i = 0; i < nargs; i++) {
   10648:	3401      	adds	r4, #1
   1064a:	e7f5      	b.n	10638 <std_print+0x2a>
	switch (log_msg_nargs_get(msg)) {
   1064c:	4630      	mov	r0, r6
   1064e:	f7ff ff1b 	bl	10488 <log_msg_nargs_get>
   10652:	280f      	cmp	r0, #15
   10654:	d815      	bhi.n	10682 <std_print+0x74>
   10656:	e8df f010 	tbh	[pc, r0, lsl #1]
   1065a:	0010      	.short	0x0010
   1065c:	001d0017 	.word	0x001d0017
   10660:	002d0024 	.word	0x002d0024
   10664:	00450038 	.word	0x00450038
   10668:	00650054 	.word	0x00650054
   1066c:	008d0078 	.word	0x008d0078
   10670:	00bd00a4 	.word	0x00bd00a4
   10674:	00f500d8 	.word	0x00f500d8
   10678:	0114      	.short	0x0114
		print_formatted(output, str);
   1067a:	4651      	mov	r1, sl
   1067c:	4648      	mov	r0, r9
   1067e:	f7f1 fbb5 	bl	1dec <print_formatted>
}
   10682:	46bd      	mov	sp, r7
   10684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   10688:	682a      	ldr	r2, [r5, #0]
   1068a:	4651      	mov	r1, sl
   1068c:	4648      	mov	r0, r9
   1068e:	f7f1 fbad 	bl	1dec <print_formatted>
		break;
   10692:	e7f6      	b.n	10682 <std_print+0x74>
		print_formatted(output, str, args[0], args[1]);
   10694:	686b      	ldr	r3, [r5, #4]
   10696:	682a      	ldr	r2, [r5, #0]
   10698:	4651      	mov	r1, sl
   1069a:	4648      	mov	r0, r9
   1069c:	f7f1 fba6 	bl	1dec <print_formatted>
		break;
   106a0:	e7ef      	b.n	10682 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2]);
   106a2:	686b      	ldr	r3, [r5, #4]
   106a4:	682a      	ldr	r2, [r5, #0]
   106a6:	68a9      	ldr	r1, [r5, #8]
   106a8:	9100      	str	r1, [sp, #0]
   106aa:	4651      	mov	r1, sl
   106ac:	4648      	mov	r0, r9
   106ae:	f7f1 fb9d 	bl	1dec <print_formatted>
		break;
   106b2:	e7e6      	b.n	10682 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   106b4:	686b      	ldr	r3, [r5, #4]
   106b6:	682a      	ldr	r2, [r5, #0]
   106b8:	68e9      	ldr	r1, [r5, #12]
   106ba:	9101      	str	r1, [sp, #4]
   106bc:	68a9      	ldr	r1, [r5, #8]
   106be:	9100      	str	r1, [sp, #0]
   106c0:	4651      	mov	r1, sl
   106c2:	4648      	mov	r0, r9
   106c4:	f7f1 fb92 	bl	1dec <print_formatted>
		break;
   106c8:	e7db      	b.n	10682 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   106ca:	686b      	ldr	r3, [r5, #4]
   106cc:	682a      	ldr	r2, [r5, #0]
   106ce:	6929      	ldr	r1, [r5, #16]
   106d0:	9102      	str	r1, [sp, #8]
   106d2:	68e9      	ldr	r1, [r5, #12]
   106d4:	9101      	str	r1, [sp, #4]
   106d6:	68a9      	ldr	r1, [r5, #8]
   106d8:	9100      	str	r1, [sp, #0]
   106da:	4651      	mov	r1, sl
   106dc:	4648      	mov	r0, r9
   106de:	f7f1 fb85 	bl	1dec <print_formatted>
		break;
   106e2:	e7ce      	b.n	10682 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   106e4:	686b      	ldr	r3, [r5, #4]
   106e6:	682a      	ldr	r2, [r5, #0]
   106e8:	6969      	ldr	r1, [r5, #20]
   106ea:	9103      	str	r1, [sp, #12]
   106ec:	6929      	ldr	r1, [r5, #16]
   106ee:	9102      	str	r1, [sp, #8]
   106f0:	68e9      	ldr	r1, [r5, #12]
   106f2:	9101      	str	r1, [sp, #4]
   106f4:	68a9      	ldr	r1, [r5, #8]
   106f6:	9100      	str	r1, [sp, #0]
   106f8:	4651      	mov	r1, sl
   106fa:	4648      	mov	r0, r9
   106fc:	f7f1 fb76 	bl	1dec <print_formatted>
		break;
   10700:	e7bf      	b.n	10682 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   10702:	686b      	ldr	r3, [r5, #4]
   10704:	682a      	ldr	r2, [r5, #0]
   10706:	69a9      	ldr	r1, [r5, #24]
   10708:	9104      	str	r1, [sp, #16]
   1070a:	6969      	ldr	r1, [r5, #20]
   1070c:	9103      	str	r1, [sp, #12]
   1070e:	6929      	ldr	r1, [r5, #16]
   10710:	9102      	str	r1, [sp, #8]
   10712:	68e9      	ldr	r1, [r5, #12]
   10714:	9101      	str	r1, [sp, #4]
   10716:	68a9      	ldr	r1, [r5, #8]
   10718:	9100      	str	r1, [sp, #0]
   1071a:	4651      	mov	r1, sl
   1071c:	4648      	mov	r0, r9
   1071e:	f7f1 fb65 	bl	1dec <print_formatted>
		break;
   10722:	e7ae      	b.n	10682 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   10724:	686b      	ldr	r3, [r5, #4]
   10726:	682a      	ldr	r2, [r5, #0]
   10728:	69e9      	ldr	r1, [r5, #28]
   1072a:	9105      	str	r1, [sp, #20]
   1072c:	69a9      	ldr	r1, [r5, #24]
   1072e:	9104      	str	r1, [sp, #16]
   10730:	6969      	ldr	r1, [r5, #20]
   10732:	9103      	str	r1, [sp, #12]
   10734:	6929      	ldr	r1, [r5, #16]
   10736:	9102      	str	r1, [sp, #8]
   10738:	68e9      	ldr	r1, [r5, #12]
   1073a:	9101      	str	r1, [sp, #4]
   1073c:	68a9      	ldr	r1, [r5, #8]
   1073e:	9100      	str	r1, [sp, #0]
   10740:	4651      	mov	r1, sl
   10742:	4648      	mov	r0, r9
   10744:	f7f1 fb52 	bl	1dec <print_formatted>
		break;
   10748:	e79b      	b.n	10682 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   1074a:	686b      	ldr	r3, [r5, #4]
   1074c:	682a      	ldr	r2, [r5, #0]
   1074e:	6a29      	ldr	r1, [r5, #32]
   10750:	9106      	str	r1, [sp, #24]
   10752:	69e9      	ldr	r1, [r5, #28]
   10754:	9105      	str	r1, [sp, #20]
   10756:	69a9      	ldr	r1, [r5, #24]
   10758:	9104      	str	r1, [sp, #16]
   1075a:	6969      	ldr	r1, [r5, #20]
   1075c:	9103      	str	r1, [sp, #12]
   1075e:	6929      	ldr	r1, [r5, #16]
   10760:	9102      	str	r1, [sp, #8]
   10762:	68e9      	ldr	r1, [r5, #12]
   10764:	9101      	str	r1, [sp, #4]
   10766:	68a9      	ldr	r1, [r5, #8]
   10768:	9100      	str	r1, [sp, #0]
   1076a:	4651      	mov	r1, sl
   1076c:	4648      	mov	r0, r9
   1076e:	f7f1 fb3d 	bl	1dec <print_formatted>
		break;
   10772:	e786      	b.n	10682 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   10774:	686b      	ldr	r3, [r5, #4]
   10776:	682a      	ldr	r2, [r5, #0]
   10778:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1077a:	9107      	str	r1, [sp, #28]
   1077c:	6a29      	ldr	r1, [r5, #32]
   1077e:	9106      	str	r1, [sp, #24]
   10780:	69e9      	ldr	r1, [r5, #28]
   10782:	9105      	str	r1, [sp, #20]
   10784:	69a9      	ldr	r1, [r5, #24]
   10786:	9104      	str	r1, [sp, #16]
   10788:	6969      	ldr	r1, [r5, #20]
   1078a:	9103      	str	r1, [sp, #12]
   1078c:	6929      	ldr	r1, [r5, #16]
   1078e:	9102      	str	r1, [sp, #8]
   10790:	68e9      	ldr	r1, [r5, #12]
   10792:	9101      	str	r1, [sp, #4]
   10794:	68a9      	ldr	r1, [r5, #8]
   10796:	9100      	str	r1, [sp, #0]
   10798:	4651      	mov	r1, sl
   1079a:	4648      	mov	r0, r9
   1079c:	f7f1 fb26 	bl	1dec <print_formatted>
		break;
   107a0:	e76f      	b.n	10682 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   107a2:	686b      	ldr	r3, [r5, #4]
   107a4:	682a      	ldr	r2, [r5, #0]
   107a6:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   107a8:	9108      	str	r1, [sp, #32]
   107aa:	6a69      	ldr	r1, [r5, #36]	; 0x24
   107ac:	9107      	str	r1, [sp, #28]
   107ae:	6a29      	ldr	r1, [r5, #32]
   107b0:	9106      	str	r1, [sp, #24]
   107b2:	69e9      	ldr	r1, [r5, #28]
   107b4:	9105      	str	r1, [sp, #20]
   107b6:	69a9      	ldr	r1, [r5, #24]
   107b8:	9104      	str	r1, [sp, #16]
   107ba:	6969      	ldr	r1, [r5, #20]
   107bc:	9103      	str	r1, [sp, #12]
   107be:	6929      	ldr	r1, [r5, #16]
   107c0:	9102      	str	r1, [sp, #8]
   107c2:	68e9      	ldr	r1, [r5, #12]
   107c4:	9101      	str	r1, [sp, #4]
   107c6:	68a9      	ldr	r1, [r5, #8]
   107c8:	9100      	str	r1, [sp, #0]
   107ca:	4651      	mov	r1, sl
   107cc:	4648      	mov	r0, r9
   107ce:	f7f1 fb0d 	bl	1dec <print_formatted>
		break;
   107d2:	e756      	b.n	10682 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   107d4:	686b      	ldr	r3, [r5, #4]
   107d6:	682a      	ldr	r2, [r5, #0]
   107d8:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   107da:	9109      	str	r1, [sp, #36]	; 0x24
   107dc:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   107de:	9108      	str	r1, [sp, #32]
   107e0:	6a69      	ldr	r1, [r5, #36]	; 0x24
   107e2:	9107      	str	r1, [sp, #28]
   107e4:	6a29      	ldr	r1, [r5, #32]
   107e6:	9106      	str	r1, [sp, #24]
   107e8:	69e9      	ldr	r1, [r5, #28]
   107ea:	9105      	str	r1, [sp, #20]
   107ec:	69a9      	ldr	r1, [r5, #24]
   107ee:	9104      	str	r1, [sp, #16]
   107f0:	6969      	ldr	r1, [r5, #20]
   107f2:	9103      	str	r1, [sp, #12]
   107f4:	6929      	ldr	r1, [r5, #16]
   107f6:	9102      	str	r1, [sp, #8]
   107f8:	68e9      	ldr	r1, [r5, #12]
   107fa:	9101      	str	r1, [sp, #4]
   107fc:	68a9      	ldr	r1, [r5, #8]
   107fe:	9100      	str	r1, [sp, #0]
   10800:	4651      	mov	r1, sl
   10802:	4648      	mov	r0, r9
   10804:	f7f1 faf2 	bl	1dec <print_formatted>
		break;
   10808:	e73b      	b.n	10682 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   1080a:	686b      	ldr	r3, [r5, #4]
   1080c:	682a      	ldr	r2, [r5, #0]
   1080e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   10810:	910a      	str	r1, [sp, #40]	; 0x28
   10812:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   10814:	9109      	str	r1, [sp, #36]	; 0x24
   10816:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   10818:	9108      	str	r1, [sp, #32]
   1081a:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1081c:	9107      	str	r1, [sp, #28]
   1081e:	6a29      	ldr	r1, [r5, #32]
   10820:	9106      	str	r1, [sp, #24]
   10822:	69e9      	ldr	r1, [r5, #28]
   10824:	9105      	str	r1, [sp, #20]
   10826:	69a9      	ldr	r1, [r5, #24]
   10828:	9104      	str	r1, [sp, #16]
   1082a:	6969      	ldr	r1, [r5, #20]
   1082c:	9103      	str	r1, [sp, #12]
   1082e:	6929      	ldr	r1, [r5, #16]
   10830:	9102      	str	r1, [sp, #8]
   10832:	68e9      	ldr	r1, [r5, #12]
   10834:	9101      	str	r1, [sp, #4]
   10836:	68a9      	ldr	r1, [r5, #8]
   10838:	9100      	str	r1, [sp, #0]
   1083a:	4651      	mov	r1, sl
   1083c:	4648      	mov	r0, r9
   1083e:	f7f1 fad5 	bl	1dec <print_formatted>
		break;
   10842:	e71e      	b.n	10682 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   10844:	686b      	ldr	r3, [r5, #4]
   10846:	682a      	ldr	r2, [r5, #0]
   10848:	6b69      	ldr	r1, [r5, #52]	; 0x34
   1084a:	910b      	str	r1, [sp, #44]	; 0x2c
   1084c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   1084e:	910a      	str	r1, [sp, #40]	; 0x28
   10850:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   10852:	9109      	str	r1, [sp, #36]	; 0x24
   10854:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   10856:	9108      	str	r1, [sp, #32]
   10858:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1085a:	9107      	str	r1, [sp, #28]
   1085c:	6a29      	ldr	r1, [r5, #32]
   1085e:	9106      	str	r1, [sp, #24]
   10860:	69e9      	ldr	r1, [r5, #28]
   10862:	9105      	str	r1, [sp, #20]
   10864:	69a9      	ldr	r1, [r5, #24]
   10866:	9104      	str	r1, [sp, #16]
   10868:	6969      	ldr	r1, [r5, #20]
   1086a:	9103      	str	r1, [sp, #12]
   1086c:	6929      	ldr	r1, [r5, #16]
   1086e:	9102      	str	r1, [sp, #8]
   10870:	68e9      	ldr	r1, [r5, #12]
   10872:	9101      	str	r1, [sp, #4]
   10874:	68a9      	ldr	r1, [r5, #8]
   10876:	9100      	str	r1, [sp, #0]
   10878:	4651      	mov	r1, sl
   1087a:	4648      	mov	r0, r9
   1087c:	f7f1 fab6 	bl	1dec <print_formatted>
		break;
   10880:	e6ff      	b.n	10682 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
   10882:	686b      	ldr	r3, [r5, #4]
   10884:	682a      	ldr	r2, [r5, #0]
   10886:	6ba9      	ldr	r1, [r5, #56]	; 0x38
   10888:	910c      	str	r1, [sp, #48]	; 0x30
   1088a:	6b69      	ldr	r1, [r5, #52]	; 0x34
   1088c:	910b      	str	r1, [sp, #44]	; 0x2c
   1088e:	6b29      	ldr	r1, [r5, #48]	; 0x30
   10890:	910a      	str	r1, [sp, #40]	; 0x28
   10892:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
   10894:	9109      	str	r1, [sp, #36]	; 0x24
   10896:	6aa9      	ldr	r1, [r5, #40]	; 0x28
   10898:	9108      	str	r1, [sp, #32]
   1089a:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1089c:	9107      	str	r1, [sp, #28]
   1089e:	6a29      	ldr	r1, [r5, #32]
   108a0:	9106      	str	r1, [sp, #24]
   108a2:	69e9      	ldr	r1, [r5, #28]
   108a4:	9105      	str	r1, [sp, #20]
   108a6:	69a9      	ldr	r1, [r5, #24]
   108a8:	9104      	str	r1, [sp, #16]
   108aa:	6969      	ldr	r1, [r5, #20]
   108ac:	9103      	str	r1, [sp, #12]
   108ae:	6929      	ldr	r1, [r5, #16]
   108b0:	9102      	str	r1, [sp, #8]
   108b2:	68e9      	ldr	r1, [r5, #12]
   108b4:	9101      	str	r1, [sp, #4]
   108b6:	68a9      	ldr	r1, [r5, #8]
   108b8:	9100      	str	r1, [sp, #0]
   108ba:	4651      	mov	r1, sl
   108bc:	4648      	mov	r0, r9
   108be:	f7f1 fa95 	bl	1dec <print_formatted>
}
   108c2:	e6de      	b.n	10682 <std_print+0x74>

000108c4 <log_output_flush>:
{
   108c4:	b510      	push	{r4, lr}
   108c6:	4604      	mov	r4, r0
		     output->control_block->offset,
   108c8:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   108ca:	6853      	ldr	r3, [r2, #4]
   108cc:	6812      	ldr	r2, [r2, #0]
   108ce:	6881      	ldr	r1, [r0, #8]
   108d0:	6800      	ldr	r0, [r0, #0]
   108d2:	f7ff fe50 	bl	10576 <buffer_write>
	output->control_block->offset = 0;
   108d6:	6863      	ldr	r3, [r4, #4]
   108d8:	2200      	movs	r2, #0
   108da:	601a      	str	r2, [r3, #0]
}
   108dc:	bd10      	pop	{r4, pc}

000108de <out_func>:
{
   108de:	b538      	push	{r3, r4, r5, lr}
   108e0:	4605      	mov	r5, r0
   108e2:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   108e4:	684b      	ldr	r3, [r1, #4]
   108e6:	681a      	ldr	r2, [r3, #0]
   108e8:	68cb      	ldr	r3, [r1, #12]
   108ea:	429a      	cmp	r2, r3
   108ec:	d00f      	beq.n	1090e <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
   108ee:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   108f0:	f3bf 8f5b 	dmb	ish
   108f4:	e853 2f00 	ldrex	r2, [r3]
   108f8:	1c51      	adds	r1, r2, #1
   108fa:	e843 1000 	strex	r0, r1, [r3]
   108fe:	2800      	cmp	r0, #0
   10900:	d1f8      	bne.n	108f4 <out_func+0x16>
   10902:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   10906:	68a3      	ldr	r3, [r4, #8]
   10908:	549d      	strb	r5, [r3, r2]
}
   1090a:	2000      	movs	r0, #0
   1090c:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
   1090e:	4608      	mov	r0, r1
   10910:	f7ff ffd8 	bl	108c4 <log_output_flush>
   10914:	e7eb      	b.n	108ee <out_func+0x10>

00010916 <log_output_msg_process>:
{
   10916:	b5f0      	push	{r4, r5, r6, r7, lr}
   10918:	b085      	sub	sp, #20
   1091a:	4606      	mov	r6, r0
   1091c:	460c      	mov	r4, r1
   1091e:	4617      	mov	r7, r2
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   10920:	7a0b      	ldrb	r3, [r1, #8]
   10922:	f083 0301 	eor.w	r3, r3, #1
   10926:	f003 0201 	and.w	r2, r3, #1
	return msg->hdr.timestamp;
   1092a:	68cb      	ldr	r3, [r1, #12]
	return msg->hdr.ids.level;
   1092c:	7a89      	ldrb	r1, [r1, #10]
	return msg->hdr.ids.domain_id;
   1092e:	f3c1 0cc2 	ubfx	ip, r1, #3, #3
	return msg->hdr.ids.source_id;
   10932:	8960      	ldrh	r0, [r4, #10]
	int16_t source_id = (int16_t)log_msg_source_id_get(msg);
   10934:	f3c0 1089 	ubfx	r0, r0, #6, #10
			0 : prefix_print(output, flags, std_msg, timestamp,
   10938:	f011 0507 	ands.w	r5, r1, #7
   1093c:	d10f      	bne.n	1095e <log_output_msg_process+0x48>
   1093e:	2200      	movs	r2, #0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   10940:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg)) {
   10942:	f013 0f01 	tst.w	r3, #1
   10946:	d014      	beq.n	10972 <log_output_msg_process+0x5c>
	} else if (raw_string) {
   10948:	b9c5      	cbnz	r5, 1097c <log_output_msg_process+0x66>
		raw_string_print(msg, output);
   1094a:	4631      	mov	r1, r6
   1094c:	4620      	mov	r0, r4
   1094e:	f7f1 fb8d 	bl	206c <raw_string_print>
	if (!raw_string) {
   10952:	b9cd      	cbnz	r5, 10988 <log_output_msg_process+0x72>
	log_output_flush(output);
   10954:	4630      	mov	r0, r6
   10956:	f7ff ffb5 	bl	108c4 <log_output_flush>
}
   1095a:	b005      	add	sp, #20
   1095c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			0 : prefix_print(output, flags, std_msg, timestamp,
   1095e:	9002      	str	r0, [sp, #8]
   10960:	f8cd c004 	str.w	ip, [sp, #4]
   10964:	9500      	str	r5, [sp, #0]
   10966:	4639      	mov	r1, r7
   10968:	4630      	mov	r0, r6
   1096a:	f7ff fe29 	bl	105c0 <prefix_print>
   1096e:	4602      	mov	r2, r0
   10970:	e7e6      	b.n	10940 <log_output_msg_process+0x2a>
		std_print(msg, output);
   10972:	4631      	mov	r1, r6
   10974:	4620      	mov	r0, r4
   10976:	f7ff fe4a 	bl	1060e <std_print>
   1097a:	e7ea      	b.n	10952 <log_output_msg_process+0x3c>
		hexdump_print(msg, output, prefix_offset, flags);
   1097c:	463b      	mov	r3, r7
   1097e:	4631      	mov	r1, r6
   10980:	4620      	mov	r0, r4
   10982:	f7f1 fb49 	bl	2018 <hexdump_print>
   10986:	e7e4      	b.n	10952 <log_output_msg_process+0x3c>
		postfix_print(output, flags, level);
   10988:	462a      	mov	r2, r5
   1098a:	4639      	mov	r1, r7
   1098c:	4630      	mov	r0, r6
   1098e:	f7ff fe0b 	bl	105a8 <postfix_print>
   10992:	e7df      	b.n	10954 <log_output_msg_process+0x3e>

00010994 <usb_get_status>:
	uint8_t *data = *data_buf;
   10994:	6813      	ldr	r3, [r2, #0]
	data[1] = 0U;
   10996:	2200      	movs	r2, #0
   10998:	705a      	strb	r2, [r3, #1]
		data[0] |= USB_GET_STATUS_SELF_POWERED;
   1099a:	2001      	movs	r0, #1
   1099c:	7018      	strb	r0, [r3, #0]
	*len = 2;
   1099e:	2302      	movs	r3, #2
   109a0:	600b      	str	r3, [r1, #0]
}
   109a2:	4770      	bx	lr

000109a4 <usb_vbus_set>:
}
   109a4:	2000      	movs	r0, #0
   109a6:	4770      	bx	lr

000109a8 <usb_eps_reconfigure>:
{
   109a8:	b508      	push	{r3, lr}
	if (cur_alt_setting != alt_setting) {
   109aa:	4291      	cmp	r1, r2
   109ac:	d002      	beq.n	109b4 <usb_eps_reconfigure+0xc>
		ret = reset_endpoint(ep_desc);
   109ae:	f7f1 ff65 	bl	287c <reset_endpoint>
}
   109b2:	bd08      	pop	{r3, pc}
		ret = set_endpoint(ep_desc);
   109b4:	f7f1 fe86 	bl	26c4 <set_endpoint>
   109b8:	e7fb      	b.n	109b2 <usb_eps_reconfigure+0xa>

000109ba <usb_handle_std_interface_req>:
{
   109ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   109bc:	4604      	mov	r4, r0
   109be:	460e      	mov	r6, r1
   109c0:	4615      	mov	r5, r2
	uint8_t *data = *data_buf;
   109c2:	6817      	ldr	r7, [r2, #0]
	if (!is_device_configured() ||
   109c4:	f7f1 fd24 	bl	2410 <is_device_configured>
   109c8:	b900      	cbnz	r0, 109cc <usb_handle_std_interface_req+0x12>
}
   109ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
   109cc:	7920      	ldrb	r0, [r4, #4]
   109ce:	f7f1 fd29 	bl	2424 <is_interface_valid>
	if (!is_device_configured() ||
   109d2:	2800      	cmp	r0, #0
   109d4:	d0f9      	beq.n	109ca <usb_handle_std_interface_req+0x10>
	if (usb_reqtype_is_to_host(setup)) {
   109d6:	f994 3000 	ldrsb.w	r3, [r4]
   109da:	2b00      	cmp	r3, #0
   109dc:	db04      	blt.n	109e8 <usb_handle_std_interface_req+0x2e>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
   109de:	7863      	ldrb	r3, [r4, #1]
   109e0:	2b0b      	cmp	r3, #11
   109e2:	d013      	beq.n	10a0c <usb_handle_std_interface_req+0x52>
	return false;
   109e4:	2000      	movs	r0, #0
   109e6:	e7f0      	b.n	109ca <usb_handle_std_interface_req+0x10>
		switch (setup->bRequest) {
   109e8:	7863      	ldrb	r3, [r4, #1]
   109ea:	b11b      	cbz	r3, 109f4 <usb_handle_std_interface_req+0x3a>
   109ec:	2b0a      	cmp	r3, #10
   109ee:	d007      	beq.n	10a00 <usb_handle_std_interface_req+0x46>
   109f0:	2000      	movs	r0, #0
   109f2:	e7ea      	b.n	109ca <usb_handle_std_interface_req+0x10>
			data[0] = 0U;
   109f4:	2300      	movs	r3, #0
   109f6:	703b      	strb	r3, [r7, #0]
			data[1] = 0U;
   109f8:	707b      	strb	r3, [r7, #1]
			*len = 2;
   109fa:	2302      	movs	r3, #2
   109fc:	6033      	str	r3, [r6, #0]
			return true;
   109fe:	e7e4      	b.n	109ca <usb_handle_std_interface_req+0x10>
			return usb_get_interface(setup, len, data_buf);
   10a00:	462a      	mov	r2, r5
   10a02:	4631      	mov	r1, r6
   10a04:	4620      	mov	r0, r4
   10a06:	f7f1 fce5 	bl	23d4 <usb_get_interface>
   10a0a:	e7de      	b.n	109ca <usb_handle_std_interface_req+0x10>
			return usb_set_interface(setup);
   10a0c:	4620      	mov	r0, r4
   10a0e:	f7f1 ff5f 	bl	28d0 <usb_set_interface>
   10a12:	e7da      	b.n	109ca <usb_handle_std_interface_req+0x10>

00010a14 <disable_interface_ep>:
{
   10a14:	b508      	push	{r3, lr}
	return usb_dc_ep_disable(ep_data->ep_addr);
   10a16:	7900      	ldrb	r0, [r0, #4]
   10a18:	f7f6 f930 	bl	6c7c <usb_dc_ep_disable>
}
   10a1c:	bd08      	pop	{r3, pc}

00010a1e <usb_get_status_endpoint>:
{
   10a1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10a20:	460e      	mov	r6, r1
	uint8_t ep = setup->wIndex;
   10a22:	7904      	ldrb	r4, [r0, #4]
	uint8_t *data = *data_buf;
   10a24:	6817      	ldr	r7, [r2, #0]
	if (!is_ep_valid(ep)) {
   10a26:	4620      	mov	r0, r4
   10a28:	f7f1 fd0e 	bl	2448 <is_ep_valid>
   10a2c:	4605      	mov	r5, r0
   10a2e:	b130      	cbz	r0, 10a3e <usb_get_status_endpoint+0x20>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
   10a30:	f034 0380 	bics.w	r3, r4, #128	; 0x80
   10a34:	d005      	beq.n	10a42 <usb_get_status_endpoint+0x24>
   10a36:	f7f1 fceb 	bl	2410 <is_device_configured>
   10a3a:	b910      	cbnz	r0, 10a42 <usb_get_status_endpoint+0x24>
	return false;
   10a3c:	4605      	mov	r5, r0
}
   10a3e:	4628      	mov	r0, r5
   10a40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_dc_ep_is_stalled(ep, &data[0]);
   10a42:	4639      	mov	r1, r7
   10a44:	4620      	mov	r0, r4
   10a46:	f7f6 f8c7 	bl	6bd8 <usb_dc_ep_is_stalled>
		data[1] = 0U;
   10a4a:	2300      	movs	r3, #0
   10a4c:	707b      	strb	r3, [r7, #1]
		*len = 2;
   10a4e:	2302      	movs	r3, #2
   10a50:	6033      	str	r3, [r6, #0]
		return true;
   10a52:	e7f4      	b.n	10a3e <usb_get_status_endpoint+0x20>

00010a54 <usb_handle_std_endpoint_req>:
{
   10a54:	b508      	push	{r3, lr}
	if (usb_reqtype_is_to_host(setup)) {
   10a56:	f990 3000 	ldrsb.w	r3, [r0]
   10a5a:	2b00      	cmp	r3, #0
   10a5c:	db06      	blt.n	10a6c <usb_handle_std_endpoint_req+0x18>
		switch (setup->bRequest) {
   10a5e:	7843      	ldrb	r3, [r0, #1]
   10a60:	2b01      	cmp	r3, #1
   10a62:	d00a      	beq.n	10a7a <usb_handle_std_endpoint_req+0x26>
   10a64:	2b03      	cmp	r3, #3
   10a66:	d010      	beq.n	10a8a <usb_handle_std_endpoint_req+0x36>
   10a68:	2000      	movs	r0, #0
   10a6a:	e002      	b.n	10a72 <usb_handle_std_endpoint_req+0x1e>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
   10a6c:	7843      	ldrb	r3, [r0, #1]
   10a6e:	b10b      	cbz	r3, 10a74 <usb_handle_std_endpoint_req+0x20>
	return false;
   10a70:	2000      	movs	r0, #0
}
   10a72:	bd08      	pop	{r3, pc}
			return usb_get_status_endpoint(setup, len, data_buf);
   10a74:	f7ff ffd3 	bl	10a1e <usb_get_status_endpoint>
   10a78:	e7fb      	b.n	10a72 <usb_handle_std_endpoint_req+0x1e>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   10a7a:	8843      	ldrh	r3, [r0, #2]
   10a7c:	b10b      	cbz	r3, 10a82 <usb_handle_std_endpoint_req+0x2e>
	return false;
   10a7e:	2000      	movs	r0, #0
   10a80:	e7f7      	b.n	10a72 <usb_handle_std_endpoint_req+0x1e>
				return usb_halt_endpoint_req(setup, false);
   10a82:	2100      	movs	r1, #0
   10a84:	f7f1 fdee 	bl	2664 <usb_halt_endpoint_req>
   10a88:	e7f3      	b.n	10a72 <usb_handle_std_endpoint_req+0x1e>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
   10a8a:	8843      	ldrh	r3, [r0, #2]
   10a8c:	b10b      	cbz	r3, 10a92 <usb_handle_std_endpoint_req+0x3e>
	return false;
   10a8e:	2000      	movs	r0, #0
   10a90:	e7ef      	b.n	10a72 <usb_handle_std_endpoint_req+0x1e>
				return usb_halt_endpoint_req(setup, true);
   10a92:	2101      	movs	r1, #1
   10a94:	f7f1 fde6 	bl	2664 <usb_halt_endpoint_req>
   10a98:	e7eb      	b.n	10a72 <usb_handle_std_endpoint_req+0x1e>

00010a9a <usb_write>:
{
   10a9a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10a9e:	4681      	mov	r9, r0
   10aa0:	4688      	mov	r8, r1
   10aa2:	4617      	mov	r7, r2
   10aa4:	461e      	mov	r6, r3
	int tries = CONFIG_USB_NUMOF_EP_WRITE_RETRIES;
   10aa6:	2503      	movs	r5, #3
   10aa8:	e000      	b.n	10aac <usb_write+0x12>
	} while (ret == -EAGAIN && tries--);
   10aaa:	461d      	mov	r5, r3
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
   10aac:	4633      	mov	r3, r6
   10aae:	463a      	mov	r2, r7
   10ab0:	4641      	mov	r1, r8
   10ab2:	4648      	mov	r0, r9
   10ab4:	f7f6 f90c 	bl	6cd0 <usb_dc_ep_write>
   10ab8:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
   10aba:	f110 0f0b 	cmn.w	r0, #11
   10abe:	d008      	beq.n	10ad2 <usb_write+0x38>
	} while (ret == -EAGAIN && tries--);
   10ac0:	f114 0f0b 	cmn.w	r4, #11
   10ac4:	d102      	bne.n	10acc <usb_write+0x32>
   10ac6:	1e6b      	subs	r3, r5, #1
   10ac8:	2d00      	cmp	r5, #0
   10aca:	d1ee      	bne.n	10aaa <usb_write+0x10>
}
   10acc:	4620      	mov	r0, r4
   10ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_impl_k_yield();
   10ad2:	f7fd ff35 	bl	e940 <z_impl_k_yield>
}
   10ad6:	e7f3      	b.n	10ac0 <usb_write+0x26>

00010ad8 <ascii7_to_utf16le>:
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
   10ad8:	f810 2b02 	ldrb.w	r2, [r0], #2
   10adc:	1ed3      	subs	r3, r2, #3
	int ascii_idx_max = USB_BSTRING_ASCII_IDX_MAX(str_descr->bLength);
   10ade:	0852      	lsrs	r2, r2, #1
   10ae0:	3a02      	subs	r2, #2
	for (int i = idx_max; i >= 0; i -= 2) {
   10ae2:	2b00      	cmp	r3, #0
   10ae4:	db0b      	blt.n	10afe <ascii7_to_utf16le+0x26>
{
   10ae6:	b410      	push	{r4}
		buf[i] = 0U;
   10ae8:	2100      	movs	r1, #0
   10aea:	54c1      	strb	r1, [r0, r3]
		buf[i - 1] = buf[ascii_idx_max--];
   10aec:	1e59      	subs	r1, r3, #1
   10aee:	5c84      	ldrb	r4, [r0, r2]
   10af0:	5444      	strb	r4, [r0, r1]
	for (int i = idx_max; i >= 0; i -= 2) {
   10af2:	3b02      	subs	r3, #2
		buf[i - 1] = buf[ascii_idx_max--];
   10af4:	3a01      	subs	r2, #1
	for (int i = idx_max; i >= 0; i -= 2) {
   10af6:	2b00      	cmp	r3, #0
   10af8:	daf6      	bge.n	10ae8 <ascii7_to_utf16le+0x10>
}
   10afa:	bc10      	pop	{r4}
   10afc:	4770      	bx	lr
   10afe:	4770      	bx	lr

00010b00 <usb_validate_ep_cfg_data>:
{
   10b00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   10b04:	b083      	sub	sp, #12
   10b06:	4605      	mov	r5, r0
   10b08:	4689      	mov	r9, r1
   10b0a:	4690      	mov	r8, r2
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   10b0c:	2700      	movs	r7, #0
   10b0e:	e04a      	b.n	10ba6 <usb_validate_ep_cfg_data+0xa6>
				if ((*requested_ep & (1U << (idx + 16U)))) {
   10b10:	f8d8 2000 	ldr.w	r2, [r8]
   10b14:	f104 0110 	add.w	r1, r4, #16
   10b18:	2301      	movs	r3, #1
   10b1a:	408b      	lsls	r3, r1
   10b1c:	421a      	tst	r2, r3
   10b1e:	d108      	bne.n	10b32 <usb_validate_ep_cfg_data+0x32>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
   10b20:	f064 037f 	orn	r3, r4, #127	; 0x7f
   10b24:	f88d 3000 	strb.w	r3, [sp]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
   10b28:	4668      	mov	r0, sp
   10b2a:	f7f5 ff67 	bl	69fc <usb_dc_ep_check_cap>
   10b2e:	4603      	mov	r3, r0
   10b30:	b1d0      	cbz	r0, 10b68 <usb_validate_ep_cfg_data+0x68>
		for (uint8_t idx = 1; idx < 16U; idx++) {
   10b32:	3401      	adds	r4, #1
   10b34:	b2e4      	uxtb	r4, r4
   10b36:	2c0f      	cmp	r4, #15
   10b38:	d834      	bhi.n	10ba4 <usb_validate_ep_cfg_data+0xa4>
			ep_cfg.ep_type = (ep_descr->bmAttributes &
   10b3a:	78eb      	ldrb	r3, [r5, #3]
   10b3c:	f003 0303 	and.w	r3, r3, #3
   10b40:	f88d 3004 	strb.w	r3, [sp, #4]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
   10b44:	88ab      	ldrh	r3, [r5, #4]
   10b46:	f8ad 3002 	strh.w	r3, [sp, #2]
			ep_cfg.ep_addr = ep_descr->bEndpointAddress;
   10b4a:	78ab      	ldrb	r3, [r5, #2]
   10b4c:	f88d 3000 	strb.w	r3, [sp]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   10b50:	f013 0f80 	tst.w	r3, #128	; 0x80
   10b54:	d1dc      	bne.n	10b10 <usb_validate_ep_cfg_data+0x10>
				if ((*requested_ep & (1U << (idx)))) {
   10b56:	f8d8 2000 	ldr.w	r2, [r8]
   10b5a:	2301      	movs	r3, #1
   10b5c:	40a3      	lsls	r3, r4
   10b5e:	421a      	tst	r2, r3
   10b60:	d1e7      	bne.n	10b32 <usb_validate_ep_cfg_data+0x32>
				ep_cfg.ep_addr = idx;
   10b62:	f88d 4000 	strb.w	r4, [sp]
   10b66:	e7df      	b.n	10b28 <usb_validate_ep_cfg_data+0x28>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
   10b68:	f89d 2000 	ldrb.w	r2, [sp]
   10b6c:	70aa      	strb	r2, [r5, #2]
				ep_data[i].ep_addr = ep_cfg.ep_addr;
   10b6e:	7132      	strb	r2, [r6, #4]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
   10b70:	f012 0f80 	tst.w	r2, #128	; 0x80
   10b74:	d10b      	bne.n	10b8e <usb_validate_ep_cfg_data+0x8e>
					*requested_ep |= (1U << idx);
   10b76:	2201      	movs	r2, #1
   10b78:	fa02 f404 	lsl.w	r4, r2, r4
   10b7c:	f8d8 2000 	ldr.w	r2, [r8]
   10b80:	4322      	orrs	r2, r4
   10b82:	f8c8 2000 	str.w	r2, [r8]
}
   10b86:	4618      	mov	r0, r3
   10b88:	b003      	add	sp, #12
   10b8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					*requested_ep |= (1U << (idx + 16U));
   10b8e:	f104 0110 	add.w	r1, r4, #16
   10b92:	2201      	movs	r2, #1
   10b94:	fa02 f101 	lsl.w	r1, r2, r1
   10b98:	f8d8 2000 	ldr.w	r2, [r8]
   10b9c:	430a      	orrs	r2, r1
   10b9e:	f8c8 2000 	str.w	r2, [r8]
   10ba2:	e7f0      	b.n	10b86 <usb_validate_ep_cfg_data+0x86>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
   10ba4:	3701      	adds	r7, #1
   10ba6:	f899 301c 	ldrb.w	r3, [r9, #28]
   10baa:	429f      	cmp	r7, r3
   10bac:	d209      	bcs.n	10bc2 <usb_validate_ep_cfg_data+0xc2>
		struct usb_ep_cfg_data *ep_data = cfg_data->endpoint;
   10bae:	f8d9 6020 	ldr.w	r6, [r9, #32]
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
   10bb2:	78aa      	ldrb	r2, [r5, #2]
   10bb4:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
   10bb8:	7933      	ldrb	r3, [r6, #4]
   10bba:	429a      	cmp	r2, r3
   10bbc:	d1f2      	bne.n	10ba4 <usb_validate_ep_cfg_data+0xa4>
		for (uint8_t idx = 1; idx < 16U; idx++) {
   10bbe:	2401      	movs	r4, #1
   10bc0:	e7b9      	b.n	10b36 <usb_validate_ep_cfg_data+0x36>
	return -1;
   10bc2:	f04f 33ff 	mov.w	r3, #4294967295
   10bc6:	e7de      	b.n	10b86 <usb_validate_ep_cfg_data+0x86>

00010bc8 <usb_get_dev_data_by_cfg>:
	return list->head;
   10bc8:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   10bca:	b110      	cbz	r0, 10bd2 <usb_get_dev_data_by_cfg+0xa>
   10bcc:	3804      	subs	r0, #4
   10bce:	e000      	b.n	10bd2 <usb_get_dev_data_by_cfg+0xa>
   10bd0:	3804      	subs	r0, #4
   10bd2:	b140      	cbz	r0, 10be6 <usb_get_dev_data_by_cfg+0x1e>
		const struct device *dev = dev_data->dev;
   10bd4:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg_cur = dev->config;
   10bd6:	685b      	ldr	r3, [r3, #4]

		if (cfg_cur == cfg) {
   10bd8:	428b      	cmp	r3, r1
   10bda:	d004      	beq.n	10be6 <usb_get_dev_data_by_cfg+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   10bdc:	1d03      	adds	r3, r0, #4
   10bde:	d003      	beq.n	10be8 <usb_get_dev_data_by_cfg+0x20>
	return node->next;
   10be0:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   10be2:	2800      	cmp	r0, #0
   10be4:	d1f4      	bne.n	10bd0 <usb_get_dev_data_by_cfg+0x8>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
   10be6:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   10be8:	4618      	mov	r0, r3
   10bea:	e7f2      	b.n	10bd2 <usb_get_dev_data_by_cfg+0xa>

00010bec <usb_get_dev_data_by_iface>:
	return list->head;
   10bec:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   10bee:	b110      	cbz	r0, 10bf6 <usb_get_dev_data_by_iface+0xa>
   10bf0:	3804      	subs	r0, #4
   10bf2:	e000      	b.n	10bf6 <usb_get_dev_data_by_iface+0xa>
   10bf4:	3804      	subs	r0, #4
   10bf6:	b150      	cbz	r0, 10c0e <usb_get_dev_data_by_iface+0x22>
		const struct device *dev = dev_data->dev;
   10bf8:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg = dev->config;
   10bfa:	685b      	ldr	r3, [r3, #4]
		const struct usb_if_descriptor *if_desc =
   10bfc:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
   10bfe:	789b      	ldrb	r3, [r3, #2]
   10c00:	428b      	cmp	r3, r1
   10c02:	d004      	beq.n	10c0e <usb_get_dev_data_by_iface+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   10c04:	1d03      	adds	r3, r0, #4
   10c06:	d003      	beq.n	10c10 <usb_get_dev_data_by_iface+0x24>
	return node->next;
   10c08:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   10c0a:	2800      	cmp	r0, #0
   10c0c:	d1f2      	bne.n	10bf4 <usb_get_dev_data_by_iface+0x8>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
   10c0e:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   10c10:	4618      	mov	r0, r3
   10c12:	e7f0      	b.n	10bf6 <usb_get_dev_data_by_iface+0xa>

00010c14 <usb_get_dev_data_by_ep>:
	return list->head;
   10c14:	6800      	ldr	r0, [r0, #0]

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   10c16:	b100      	cbz	r0, 10c1a <usb_get_dev_data_by_ep+0x6>
   10c18:	3804      	subs	r0, #4
   10c1a:	b1d0      	cbz	r0, 10c52 <usb_get_dev_data_by_ep+0x3e>
{
   10c1c:	b430      	push	{r4, r5}
   10c1e:	e005      	b.n	10c2c <usb_get_dev_data_by_ep+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   10c20:	1d03      	adds	r3, r0, #4
   10c22:	d012      	beq.n	10c4a <usb_get_dev_data_by_ep+0x36>
	return node->next;
   10c24:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   10c26:	b190      	cbz	r0, 10c4e <usb_get_dev_data_by_ep+0x3a>
   10c28:	3804      	subs	r0, #4
   10c2a:	b180      	cbz	r0, 10c4e <usb_get_dev_data_by_ep+0x3a>
		const struct device *dev = dev_data->dev;
   10c2c:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg = dev->config;
   10c2e:	685c      	ldr	r4, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
   10c30:	6a25      	ldr	r5, [r4, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   10c32:	2300      	movs	r3, #0
   10c34:	7f22      	ldrb	r2, [r4, #28]
   10c36:	429a      	cmp	r2, r3
   10c38:	d9f2      	bls.n	10c20 <usb_get_dev_data_by_ep+0xc>
			if (ep_data[i].ep_addr == ep) {
   10c3a:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
   10c3e:	7912      	ldrb	r2, [r2, #4]
   10c40:	428a      	cmp	r2, r1
   10c42:	d004      	beq.n	10c4e <usb_get_dev_data_by_ep+0x3a>
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
   10c44:	3301      	adds	r3, #1
   10c46:	b2db      	uxtb	r3, r3
   10c48:	e7f4      	b.n	10c34 <usb_get_dev_data_by_ep+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
   10c4a:	4618      	mov	r0, r3
   10c4c:	e7ed      	b.n	10c2a <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
   10c4e:	bc30      	pop	{r4, r5}
   10c50:	4770      	bx	lr
   10c52:	4770      	bx	lr

00010c54 <usb_transfer_is_busy>:
{
   10c54:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
   10c56:	f7f2 fa25 	bl	30a4 <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
   10c5a:	b128      	cbz	r0, 10c68 <usb_transfer_is_busy+0x14>
   10c5c:	6843      	ldr	r3, [r0, #4]
   10c5e:	f113 0f10 	cmn.w	r3, #16
   10c62:	d003      	beq.n	10c6c <usb_transfer_is_busy+0x18>
	return false;
   10c64:	2000      	movs	r0, #0
}
   10c66:	bd08      	pop	{r3, pc}
	return false;
   10c68:	2000      	movs	r0, #0
   10c6a:	e7fc      	b.n	10c66 <usb_transfer_is_busy+0x12>
		return true;
   10c6c:	2001      	movs	r0, #1
   10c6e:	e7fa      	b.n	10c66 <usb_transfer_is_busy+0x12>

00010c70 <cdc_interface_config>:
	desc->if0.bInterfaceNumber = bInterfaceNumber;
   10c70:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
   10c72:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
   10c74:	1c4b      	adds	r3, r1, #1
   10c76:	b2db      	uxtb	r3, r3
   10c78:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
   10c7c:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
   10c7e:	f800 1c06 	strb.w	r1, [r0, #-6]
}
   10c82:	4770      	bx	lr

00010c84 <cdc_acm_irq_callback_work_handler>:
{
   10c84:	b508      	push	{r3, lr}
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
   10c86:	f850 3c08 	ldr.w	r3, [r0, #-8]
   10c8a:	f850 1c04 	ldr.w	r1, [r0, #-4]
   10c8e:	6f80      	ldr	r0, [r0, #120]	; 0x78
   10c90:	4798      	blx	r3
}
   10c92:	bd08      	pop	{r3, pc}

00010c94 <cdc_acm_irq_tx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   10c94:	6903      	ldr	r3, [r0, #16]
	dev_data->tx_irq_ena = false;
   10c96:	2200      	movs	r2, #0
   10c98:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
   10c9c:	4770      	bx	lr

00010c9e <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   10c9e:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
   10ca0:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
   10ca4:	b122      	cbz	r2, 10cb0 <cdc_acm_irq_tx_ready+0x12>
   10ca6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
   10caa:	b91b      	cbnz	r3, 10cb4 <cdc_acm_irq_tx_ready+0x16>
	return 0;
   10cac:	2000      	movs	r0, #0
   10cae:	4770      	bx	lr
   10cb0:	2000      	movs	r0, #0
   10cb2:	4770      	bx	lr
		return 1;
   10cb4:	2001      	movs	r0, #1
}
   10cb6:	4770      	bx	lr

00010cb8 <cdc_acm_irq_rx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   10cb8:	6903      	ldr	r3, [r0, #16]
	dev_data->rx_irq_ena = false;
   10cba:	2200      	movs	r2, #0
   10cbc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
   10cc0:	4770      	bx	lr

00010cc2 <cdc_acm_irq_rx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   10cc2:	6903      	ldr	r3, [r0, #16]
	if (dev_data->rx_ready) {
   10cc4:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
   10cc8:	b90b      	cbnz	r3, 10cce <cdc_acm_irq_rx_ready+0xc>
	return 0;
   10cca:	2000      	movs	r0, #0
   10ccc:	4770      	bx	lr
		return 1;
   10cce:	2001      	movs	r0, #1
}
   10cd0:	4770      	bx	lr

00010cd2 <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   10cd2:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
   10cd4:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
   10cd8:	b112      	cbz	r2, 10ce0 <cdc_acm_irq_is_pending+0xe>
   10cda:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
   10cde:	b93a      	cbnz	r2, 10cf0 <cdc_acm_irq_is_pending+0x1e>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
   10ce0:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
   10ce4:	b132      	cbz	r2, 10cf4 <cdc_acm_irq_is_pending+0x22>
   10ce6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
   10cea:	b92b      	cbnz	r3, 10cf8 <cdc_acm_irq_is_pending+0x26>
		return 0;
   10cec:	2000      	movs	r0, #0
   10cee:	4770      	bx	lr
		return 1;
   10cf0:	2001      	movs	r0, #1
   10cf2:	4770      	bx	lr
		return 0;
   10cf4:	2000      	movs	r0, #0
   10cf6:	4770      	bx	lr
		return 1;
   10cf8:	2001      	movs	r0, #1
}
   10cfa:	4770      	bx	lr

00010cfc <cdc_acm_irq_update>:
}
   10cfc:	2001      	movs	r0, #1
   10cfe:	4770      	bx	lr

00010d00 <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   10d00:	6903      	ldr	r3, [r0, #16]
	dev_data->cb = cb;
   10d02:	6019      	str	r1, [r3, #0]
	dev_data->cb_data = cb_data;
   10d04:	605a      	str	r2, [r3, #4]
}
   10d06:	4770      	bx	lr

00010d08 <cdc_acm_baudrate_set>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   10d08:	6903      	ldr	r3, [r0, #16]
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
   10d0a:	6759      	str	r1, [r3, #116]	; 0x74
}
   10d0c:	4770      	bx	lr

00010d0e <cdc_acm_line_ctrl_get>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   10d0e:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
   10d10:	2902      	cmp	r1, #2
   10d12:	d00a      	beq.n	10d2a <cdc_acm_line_ctrl_get+0x1c>
   10d14:	2904      	cmp	r1, #4
   10d16:	d00f      	beq.n	10d38 <cdc_acm_line_ctrl_get+0x2a>
   10d18:	2901      	cmp	r1, #1
   10d1a:	d002      	beq.n	10d22 <cdc_acm_line_ctrl_get+0x14>
   10d1c:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   10d20:	4770      	bx	lr
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
   10d22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
   10d24:	6013      	str	r3, [r2, #0]
		return 0;
   10d26:	2000      	movs	r0, #0
   10d28:	4770      	bx	lr
		*val = (dev_data->line_state &
   10d2a:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
   10d2e:	f3c3 0340 	ubfx	r3, r3, #1, #1
		*val = (dev_data->line_state &
   10d32:	6013      	str	r3, [r2, #0]
		return 0;
   10d34:	2000      	movs	r0, #0
   10d36:	4770      	bx	lr
		*val = (dev_data->line_state &
   10d38:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
   10d3c:	f003 0301 	and.w	r3, r3, #1
		*val = (dev_data->line_state &
   10d40:	6013      	str	r3, [r2, #0]
		return 0;
   10d42:	2000      	movs	r0, #0
   10d44:	4770      	bx	lr

00010d46 <cdc_acm_line_ctrl_set>:
{
   10d46:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   10d48:	6904      	ldr	r4, [r0, #16]
	switch (ctrl) {
   10d4a:	2940      	cmp	r1, #64	; 0x40
   10d4c:	f000 8081 	beq.w	10e52 <cdc_acm_line_ctrl_set+0x10c>
   10d50:	d81b      	bhi.n	10d8a <cdc_acm_line_ctrl_set+0x44>
   10d52:	2920      	cmp	r1, #32
   10d54:	f200 809f 	bhi.w	10e96 <cdc_acm_line_ctrl_set+0x150>
   10d58:	2900      	cmp	r1, #0
   10d5a:	f000 809f 	beq.w	10e9c <cdc_acm_line_ctrl_set+0x156>
   10d5e:	1e4b      	subs	r3, r1, #1
   10d60:	2b1f      	cmp	r3, #31
   10d62:	f200 809e 	bhi.w	10ea2 <cdc_acm_line_ctrl_set+0x15c>
   10d66:	e8df f003 	tbb	[pc, r3]
   10d6a:	9c3d      	.short	0x9c3d
   10d6c:	9c9c9c9c 	.word	0x9c9c9c9c
   10d70:	9c9c429c 	.word	0x9c9c429c
   10d74:	9c9c9c9c 	.word	0x9c9c9c9c
   10d78:	9c9c529c 	.word	0x9c9c529c
   10d7c:	9c9c9c9c 	.word	0x9c9c9c9c
   10d80:	9c9c9c9c 	.word	0x9c9c9c9c
   10d84:	9c9c9c9c 	.word	0x9c9c9c9c
   10d88:	639c      	.short	0x639c
   10d8a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
   10d8e:	d071      	beq.n	10e74 <cdc_acm_line_ctrl_set+0x12e>
   10d90:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   10d94:	d110      	bne.n	10db8 <cdc_acm_line_ctrl_set+0x72>
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
   10d96:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   10d9a:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
   10d9e:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   10da2:	b11a      	cbz	r2, 10dac <cdc_acm_line_ctrl_set+0x66>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
   10da4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10da8:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   10dac:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
   10db0:	f7f2 fdb6 	bl	3920 <cdc_acm_send_notification>
		return 0;
   10db4:	2000      	movs	r0, #0
   10db6:	e019      	b.n	10dec <cdc_acm_line_ctrl_set+0xa6>
	switch (ctrl) {
   10db8:	2980      	cmp	r1, #128	; 0x80
   10dba:	d110      	bne.n	10dde <cdc_acm_line_ctrl_set+0x98>
		dev_data->serial_state &= ~SERIAL_STATE_FRAMING;
   10dbc:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   10dc0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   10dc4:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   10dc8:	b11a      	cbz	r2, 10dd2 <cdc_acm_line_ctrl_set+0x8c>
			dev_data->serial_state |= SERIAL_STATE_FRAMING;
   10dca:	f043 0310 	orr.w	r3, r3, #16
   10dce:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   10dd2:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
   10dd6:	f7f2 fda3 	bl	3920 <cdc_acm_send_notification>
		return 0;
   10dda:	2000      	movs	r0, #0
   10ddc:	e006      	b.n	10dec <cdc_acm_line_ctrl_set+0xa6>
	switch (ctrl) {
   10dde:	f06f 0012 	mvn.w	r0, #18
   10de2:	e003      	b.n	10dec <cdc_acm_line_ctrl_set+0xa6>
		cdc_acm_baudrate_set(dev, val);
   10de4:	4611      	mov	r1, r2
   10de6:	f7ff ff8f 	bl	10d08 <cdc_acm_baudrate_set>
		return 0;
   10dea:	2000      	movs	r0, #0
}
   10dec:	bd10      	pop	{r4, pc}
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
   10dee:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   10df2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
   10df6:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   10dfa:	b11a      	cbz	r2, 10e04 <cdc_acm_line_ctrl_set+0xbe>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
   10dfc:	f043 0301 	orr.w	r3, r3, #1
   10e00:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
   10e04:	2101      	movs	r1, #1
   10e06:	f7f2 fd8b 	bl	3920 <cdc_acm_send_notification>
		return 0;
   10e0a:	2000      	movs	r0, #0
   10e0c:	e7ee      	b.n	10dec <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
   10e0e:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   10e12:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   10e16:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   10e1a:	b11a      	cbz	r2, 10e24 <cdc_acm_line_ctrl_set+0xde>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
   10e1c:	f043 0302 	orr.w	r3, r3, #2
   10e20:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   10e24:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
   10e28:	f7f2 fd7a 	bl	3920 <cdc_acm_send_notification>
		return 0;
   10e2c:	2000      	movs	r0, #0
   10e2e:	e7dd      	b.n	10dec <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_BREAK;
   10e30:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   10e34:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   10e38:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   10e3c:	b11a      	cbz	r2, 10e46 <cdc_acm_line_ctrl_set+0x100>
			dev_data->serial_state |= SERIAL_STATE_BREAK;
   10e3e:	f043 0304 	orr.w	r3, r3, #4
   10e42:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   10e46:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
   10e4a:	f7f2 fd69 	bl	3920 <cdc_acm_send_notification>
		return 0;
   10e4e:	2000      	movs	r0, #0
   10e50:	e7cc      	b.n	10dec <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_RING_SIGNAL;
   10e52:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   10e56:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   10e5a:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   10e5e:	b11a      	cbz	r2, 10e68 <cdc_acm_line_ctrl_set+0x122>
			dev_data->serial_state |= SERIAL_STATE_RING_SIGNAL;
   10e60:	f043 0308 	orr.w	r3, r3, #8
   10e64:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   10e68:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
   10e6c:	f7f2 fd58 	bl	3920 <cdc_acm_send_notification>
		return 0;
   10e70:	2000      	movs	r0, #0
   10e72:	e7bb      	b.n	10dec <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_PARITY;
   10e74:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
   10e78:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   10e7c:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
   10e80:	b11a      	cbz	r2, 10e8a <cdc_acm_line_ctrl_set+0x144>
			dev_data->serial_state |= SERIAL_STATE_PARITY;
   10e82:	f043 0320 	orr.w	r3, r3, #32
   10e86:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
   10e8a:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
   10e8e:	f7f2 fd47 	bl	3920 <cdc_acm_send_notification>
		return 0;
   10e92:	2000      	movs	r0, #0
   10e94:	e7aa      	b.n	10dec <cdc_acm_line_ctrl_set+0xa6>
	switch (ctrl) {
   10e96:	f06f 0012 	mvn.w	r0, #18
   10e9a:	e7a7      	b.n	10dec <cdc_acm_line_ctrl_set+0xa6>
   10e9c:	f06f 0012 	mvn.w	r0, #18
   10ea0:	e7a4      	b.n	10dec <cdc_acm_line_ctrl_set+0xa6>
   10ea2:	f06f 0012 	mvn.w	r0, #18
   10ea6:	e7a1      	b.n	10dec <cdc_acm_line_ctrl_set+0xa6>

00010ea8 <cdc_acm_fifo_read>:
{
   10ea8:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
   10eaa:	6905      	ldr	r5, [r0, #16]
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
   10eac:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
   10eae:	f7ff f9e1 	bl	10274 <ring_buf_get>
   10eb2:	4604      	mov	r4, r0
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
   10eb4:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
   10eb6:	f7ff f90f 	bl	100d8 <ring_buf_is_empty>
   10eba:	b110      	cbz	r0, 10ec2 <cdc_acm_fifo_read+0x1a>
		dev_data->rx_ready = false;
   10ebc:	2300      	movs	r3, #0
   10ebe:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
}
   10ec2:	4620      	mov	r0, r4
   10ec4:	bd38      	pop	{r3, r4, r5, pc}

00010ec6 <cdc_acm_poll_in>:
{
   10ec6:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
   10ec8:	2201      	movs	r2, #1
   10eca:	f7ff ffed 	bl	10ea8 <cdc_acm_fifo_read>
	return ret == 1 ? 0 : -1;
   10ece:	2801      	cmp	r0, #1
   10ed0:	d101      	bne.n	10ed6 <cdc_acm_poll_in+0x10>
   10ed2:	2000      	movs	r0, #0
}
   10ed4:	bd08      	pop	{r3, pc}
	return ret == 1 ? 0 : -1;
   10ed6:	f04f 30ff 	mov.w	r0, #4294967295
   10eda:	e7fb      	b.n	10ed4 <cdc_acm_poll_in+0xe>

00010edc <flash_area_close>:

void flash_area_close(const struct flash_area *fa)
{
	/* nothing to do for now */
}
   10edc:	4770      	bx	lr

00010ede <flash_area_read>:
}
#endif /* CONFIG_FLASH_PAGE_LAYOUT */

int flash_area_read(const struct flash_area *fa, off_t off, void *dst,
		    size_t len)
{
   10ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10ee2:	4680      	mov	r8, r0
   10ee4:	4617      	mov	r7, r2
   10ee6:	461e      	mov	r6, r3
	return (off >= 0) && ((off + len) <= fa->fa_size);
   10ee8:	1e0d      	subs	r5, r1, #0
   10eea:	db05      	blt.n	10ef8 <flash_area_read+0x1a>
   10eec:	18eb      	adds	r3, r5, r3
   10eee:	6882      	ldr	r2, [r0, #8]
   10ef0:	4293      	cmp	r3, r2
   10ef2:	d911      	bls.n	10f18 <flash_area_read+0x3a>
   10ef4:	2300      	movs	r3, #0
   10ef6:	e000      	b.n	10efa <flash_area_read+0x1c>
   10ef8:	2300      	movs	r3, #0
	const struct device *dev;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   10efa:	b17b      	cbz	r3, 10f1c <flash_area_read+0x3e>
		return -EINVAL;
	}

	dev = device_get_binding(fa->fa_dev_name);
   10efc:	f8d8 000c 	ldr.w	r0, [r8, #12]
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   10f00:	f7fc fc22 	bl	d748 <z_impl_device_get_binding>

	return flash_read(dev, fa->fa_off + off, dst, len);
   10f04:	f8d8 1004 	ldr.w	r1, [r8, #4]
   10f08:	4429      	add	r1, r5

static inline int z_impl_flash_read(const struct device *dev, off_t offset,
				    void *data,
				    size_t len)
{
	const struct flash_driver_api *api =
   10f0a:	6883      	ldr	r3, [r0, #8]
		(const struct flash_driver_api *)dev->api;

	return api->read(dev, offset, data, len);
   10f0c:	681c      	ldr	r4, [r3, #0]
   10f0e:	4633      	mov	r3, r6
   10f10:	463a      	mov	r2, r7
   10f12:	47a0      	blx	r4
}
   10f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (off >= 0) && ((off + len) <= fa->fa_size);
   10f18:	2301      	movs	r3, #1
   10f1a:	e7ee      	b.n	10efa <flash_area_read+0x1c>
		return -EINVAL;
   10f1c:	f06f 0015 	mvn.w	r0, #21
   10f20:	e7f8      	b.n	10f14 <flash_area_read+0x36>

00010f22 <flash_area_write>:

int flash_area_write(const struct flash_area *fa, off_t off, const void *src,
		     size_t len)
{
   10f22:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10f26:	4606      	mov	r6, r0
   10f28:	4690      	mov	r8, r2
   10f2a:	461f      	mov	r7, r3
	return (off >= 0) && ((off + len) <= fa->fa_size);
   10f2c:	f1b1 0900 	subs.w	r9, r1, #0
   10f30:	db05      	blt.n	10f3e <flash_area_write+0x1c>
   10f32:	444b      	add	r3, r9
   10f34:	6882      	ldr	r2, [r0, #8]
   10f36:	4293      	cmp	r3, r2
   10f38:	d91f      	bls.n	10f7a <flash_area_write+0x58>
   10f3a:	2300      	movs	r3, #0
   10f3c:	e000      	b.n	10f40 <flash_area_write+0x1e>
   10f3e:	2300      	movs	r3, #0
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   10f40:	b1eb      	cbz	r3, 10f7e <flash_area_write+0x5c>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   10f42:	68f0      	ldr	r0, [r6, #12]
   10f44:	f7fc fc00 	bl	d748 <z_impl_device_get_binding>
   10f48:	4604      	mov	r4, r0

	rc = flash_write(flash_dev, fa->fa_off + off, (void *)src, len);
   10f4a:	6871      	ldr	r1, [r6, #4]
   10f4c:	4489      	add	r9, r1
			  size_t len);

static inline int z_impl_flash_write(const struct device *dev, off_t offset,
				     const void *data, size_t len)
{
	const struct flash_driver_api *api =
   10f4e:	6886      	ldr	r6, [r0, #8]
	/* write protection management in this function exists for keeping
	 * compatibility with out-of-tree drivers which are not aligned jet
	 * with write-protection API depreciation.
	 * This will be removed with flash_api_write_protection handler type.
	 */
	if (api->write_protection != NULL) {
   10f50:	68f3      	ldr	r3, [r6, #12]
   10f52:	b11b      	cbz	r3, 10f5c <flash_area_write+0x3a>
		rc = api->write_protection(dev, false);
   10f54:	2100      	movs	r1, #0
   10f56:	4798      	blx	r3
		if (rc) {
   10f58:	4605      	mov	r5, r0
   10f5a:	b958      	cbnz	r0, 10f74 <flash_area_write+0x52>
			return rc;
		}
	}

	rc = api->write(dev, offset, data, len);
   10f5c:	6875      	ldr	r5, [r6, #4]
   10f5e:	463b      	mov	r3, r7
   10f60:	4642      	mov	r2, r8
   10f62:	4649      	mov	r1, r9
   10f64:	4620      	mov	r0, r4
   10f66:	47a8      	blx	r5
   10f68:	4605      	mov	r5, r0

	if (api->write_protection != NULL) {
   10f6a:	68f3      	ldr	r3, [r6, #12]
   10f6c:	b113      	cbz	r3, 10f74 <flash_area_write+0x52>
		(void) api->write_protection(dev, true);
   10f6e:	2101      	movs	r1, #1
   10f70:	4620      	mov	r0, r4
   10f72:	4798      	blx	r3

	return rc;
}
   10f74:	4628      	mov	r0, r5
   10f76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return (off >= 0) && ((off + len) <= fa->fa_size);
   10f7a:	2301      	movs	r3, #1
   10f7c:	e7e0      	b.n	10f40 <flash_area_write+0x1e>
		return -EINVAL;
   10f7e:	f06f 0515 	mvn.w	r5, #21
   10f82:	e7f7      	b.n	10f74 <flash_area_write+0x52>

00010f84 <flash_area_erase>:

int flash_area_erase(const struct flash_area *fa, off_t off, size_t len)
{
   10f84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10f88:	4605      	mov	r5, r0
   10f8a:	4690      	mov	r8, r2
	return (off >= 0) && ((off + len) <= fa->fa_size);
   10f8c:	1e0e      	subs	r6, r1, #0
   10f8e:	db05      	blt.n	10f9c <flash_area_erase+0x18>
   10f90:	18b3      	adds	r3, r6, r2
   10f92:	6882      	ldr	r2, [r0, #8]
   10f94:	4293      	cmp	r3, r2
   10f96:	d91e      	bls.n	10fd6 <flash_area_erase+0x52>
   10f98:	2300      	movs	r3, #0
   10f9a:	e000      	b.n	10f9e <flash_area_erase+0x1a>
   10f9c:	2300      	movs	r3, #0
	const struct device *flash_dev;
	int rc;

	if (!is_in_flash_area_bounds(fa, off, len)) {
   10f9e:	b1e3      	cbz	r3, 10fda <flash_area_erase+0x56>
		return -EINVAL;
	}

	flash_dev = device_get_binding(fa->fa_dev_name);
   10fa0:	68e8      	ldr	r0, [r5, #12]
   10fa2:	f7fc fbd1 	bl	d748 <z_impl_device_get_binding>
   10fa6:	4604      	mov	r4, r0

	rc = flash_erase(flash_dev, fa->fa_off + off, len);
   10fa8:	686b      	ldr	r3, [r5, #4]
   10faa:	441e      	add	r6, r3
__syscall int flash_erase(const struct device *dev, off_t offset, size_t size);

static inline int z_impl_flash_erase(const struct device *dev, off_t offset,
				     size_t size)
{
	const struct flash_driver_api *api =
   10fac:	6887      	ldr	r7, [r0, #8]
	/* write protection management in this function exists for keeping
	 * compatibility with out-of-tree drivers which are not aligned jet
	 * with write-protection API depreciation.
	 * This will be removed with flash_api_write_protection handler type.
	 */
	if (api->write_protection != NULL) {
   10fae:	68fb      	ldr	r3, [r7, #12]
   10fb0:	b11b      	cbz	r3, 10fba <flash_area_erase+0x36>
		rc = api->write_protection(dev, false);
   10fb2:	2100      	movs	r1, #0
   10fb4:	4798      	blx	r3
		if (rc) {
   10fb6:	4605      	mov	r5, r0
   10fb8:	b950      	cbnz	r0, 10fd0 <flash_area_erase+0x4c>
			return rc;
		}
	}

	rc = api->erase(dev, offset, size);
   10fba:	68bb      	ldr	r3, [r7, #8]
   10fbc:	4642      	mov	r2, r8
   10fbe:	4631      	mov	r1, r6
   10fc0:	4620      	mov	r0, r4
   10fc2:	4798      	blx	r3
   10fc4:	4605      	mov	r5, r0

	if (api->write_protection != NULL) {
   10fc6:	68fb      	ldr	r3, [r7, #12]
   10fc8:	b113      	cbz	r3, 10fd0 <flash_area_erase+0x4c>
		(void) api->write_protection(dev, true);
   10fca:	2101      	movs	r1, #1
   10fcc:	4620      	mov	r0, r4
   10fce:	4798      	blx	r3

	return rc;
}
   10fd0:	4628      	mov	r0, r5
   10fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return (off >= 0) && ((off + len) <= fa->fa_size);
   10fd6:	2301      	movs	r3, #1
   10fd8:	e7e1      	b.n	10f9e <flash_area_erase+0x1a>
		return -EINVAL;
   10fda:	f06f 0515 	mvn.w	r5, #21
   10fde:	e7f7      	b.n	10fd0 <flash_area_erase+0x4c>

00010fe0 <flash_area_get_device>:

	return 1;
}

const struct device *flash_area_get_device(const struct flash_area *fa)
{
   10fe0:	b508      	push	{r3, lr}
	return device_get_binding(fa->fa_dev_name);
   10fe2:	68c0      	ldr	r0, [r0, #12]
   10fe4:	f7fc fbb0 	bl	d748 <z_impl_device_get_binding>
}
   10fe8:	bd08      	pop	{r3, pc}

00010fea <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   10fea:	2200      	movs	r2, #0
   10fec:	6002      	str	r2, [r0, #0]
   10fee:	6042      	str	r2, [r0, #4]
   10ff0:	6082      	str	r2, [r0, #8]
}
   10ff2:	4770      	bx	lr

00010ff4 <abort_function>:
	while(1);
   10ff4:	e7fe      	b.n	10ff4 <abort_function>

00010ff6 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   10ff6:	b538      	push	{r3, r4, r5, lr}
   10ff8:	4604      	mov	r4, r0

	if (esf != NULL) {
   10ffa:	460d      	mov	r5, r1
   10ffc:	b111      	cbz	r1, 11004 <z_arm_fatal_error+0xe>
		esf_dump(esf);
   10ffe:	4608      	mov	r0, r1
   11000:	f7f2 ff70 	bl	3ee4 <esf_dump>
	}
	z_fatal_error(reason, esf);
   11004:	4629      	mov	r1, r5
   11006:	4620      	mov	r0, r4
   11008:	f7fc fc24 	bl	d854 <z_fatal_error>
}
   1100c:	bd38      	pop	{r3, r4, r5, pc}

0001100e <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1100e:	b508      	push	{r3, lr}
   11010:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   11012:	6800      	ldr	r0, [r0, #0]
   11014:	f7ff ffef 	bl	10ff6 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
   11018:	bd08      	pop	{r3, pc}

0001101a <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
   1101a:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1101c:	2100      	movs	r1, #0
   1101e:	2001      	movs	r0, #1
   11020:	f7ff ffe9 	bl	10ff6 <z_arm_fatal_error>
}
   11024:	bd08      	pop	{r3, pc}

00011026 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   11026:	b508      	push	{r3, lr}
	handler();
   11028:	f7f2 fff2 	bl	4010 <z_SysNmiOnReset>
	z_arm_int_exit();
   1102c:	f7f3 f8ee 	bl	420c <z_arm_exc_exit>
}
   11030:	bd08      	pop	{r3, pc}

00011032 <memory_fault_recoverable>:
}
   11032:	2000      	movs	r0, #0
   11034:	4770      	bx	lr

00011036 <fault_handle>:
{
   11036:	b508      	push	{r3, lr}
	*recoverable = false;
   11038:	2300      	movs	r3, #0
   1103a:	7013      	strb	r3, [r2, #0]
	switch (fault) {
   1103c:	1ecb      	subs	r3, r1, #3
   1103e:	2b09      	cmp	r3, #9
   11040:	d81a      	bhi.n	11078 <fault_handle+0x42>
   11042:	e8df f003 	tbb	[pc, r3]
   11046:	0905      	.short	0x0905
   11048:	1919110d 	.word	0x1919110d
   1104c:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
   11050:	4611      	mov	r1, r2
   11052:	f7f3 fb6f 	bl	4734 <hard_fault>
}
   11056:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
   11058:	2100      	movs	r1, #0
   1105a:	f7f3 fa89 	bl	4570 <mem_manage_fault>
		break;
   1105e:	e7fa      	b.n	11056 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
   11060:	2100      	movs	r1, #0
   11062:	f7f3 f9ad 	bl	43c0 <bus_fault>
		break;
   11066:	e7f6      	b.n	11056 <fault_handle+0x20>
		reason = usage_fault(esf);
   11068:	f7f3 f8de 	bl	4228 <usage_fault>
		break;
   1106c:	e7f3      	b.n	11056 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
   1106e:	4611      	mov	r1, r2
   11070:	f7f3 f98c 	bl	438c <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   11074:	2000      	movs	r0, #0
		break;
   11076:	e7ee      	b.n	11056 <fault_handle+0x20>
		reserved_exception(esf, fault);
   11078:	f7f3 fc02 	bl	4880 <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1107c:	2000      	movs	r0, #0
	return reason;
   1107e:	e7ea      	b.n	11056 <fault_handle+0x20>

00011080 <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
   11080:	6843      	ldr	r3, [r0, #4]
   11082:	1e5a      	subs	r2, r3, #1
		&&
   11084:	4213      	tst	r3, r2
   11086:	d106      	bne.n	11096 <mpu_partition_is_valid+0x16>
		&&
   11088:	2b1f      	cmp	r3, #31
   1108a:	d906      	bls.n	1109a <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
   1108c:	6803      	ldr	r3, [r0, #0]
		&&
   1108e:	421a      	tst	r2, r3
   11090:	d005      	beq.n	1109e <mpu_partition_is_valid+0x1e>
   11092:	2000      	movs	r0, #0
   11094:	4770      	bx	lr
   11096:	2000      	movs	r0, #0
   11098:	4770      	bx	lr
   1109a:	2000      	movs	r0, #0
   1109c:	4770      	bx	lr
   1109e:	2001      	movs	r0, #1
}
   110a0:	4770      	bx	lr

000110a2 <mpu_configure_region>:
{
   110a2:	b500      	push	{lr}
   110a4:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
   110a6:	680b      	ldr	r3, [r1, #0]
   110a8:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   110aa:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   110ac:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
   110ae:	2b20      	cmp	r3, #32
   110b0:	d912      	bls.n	110d8 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
   110b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
   110b6:	d811      	bhi.n	110dc <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   110b8:	3b01      	subs	r3, #1
   110ba:	fab3 f383 	clz	r3, r3
   110be:	f1c3 031f 	rsb	r3, r3, #31
   110c2:	005b      	lsls	r3, r3, #1
   110c4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   110c8:	4313      	orrs	r3, r2
   110ca:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
   110cc:	a901      	add	r1, sp, #4
   110ce:	f7f3 fd33 	bl	4b38 <region_allocate_and_init>
}
   110d2:	b005      	add	sp, #20
   110d4:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
   110d8:	2308      	movs	r3, #8
   110da:	e7f5      	b.n	110c8 <mpu_configure_region+0x26>
		return REGION_4G;
   110dc:	233e      	movs	r3, #62	; 0x3e
   110de:	e7f3      	b.n	110c8 <mpu_configure_region+0x26>

000110e0 <arm_core_mpu_configure_static_mpu_regions>:
{
   110e0:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   110e2:	f7f3 fd8b 	bl	4bfc <mpu_configure_static_mpu_regions>
}
   110e6:	bd08      	pop	{r3, pc}

000110e8 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
   110e8:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
   110ea:	f7f3 fd91 	bl	4c10 <mpu_configure_dynamic_mpu_regions>
}
   110ee:	bd08      	pop	{r3, pc}

000110f0 <free>:

void free(void *ptr)
{
	ARG_UNUSED(ptr);
}
   110f0:	4770      	bx	lr

000110f2 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   110f2:	4602      	mov	r2, r0
   110f4:	780b      	ldrb	r3, [r1, #0]
   110f6:	b11b      	cbz	r3, 11100 <strcpy+0xe>
		*d = *s;
   110f8:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
   110fc:	3101      	adds	r1, #1
   110fe:	e7f9      	b.n	110f4 <strcpy+0x2>
	}

	*d = '\0';
   11100:	7013      	strb	r3, [r2, #0]

	return dest;
}
   11102:	4770      	bx	lr

00011104 <strncpy>:

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   11104:	4603      	mov	r3, r0
   11106:	b1a2      	cbz	r2, 11132 <strncpy+0x2e>
{
   11108:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
   1110a:	780c      	ldrb	r4, [r1, #0]
   1110c:	b12c      	cbz	r4, 1111a <strncpy+0x16>
		*d = *s;
   1110e:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
   11112:	3101      	adds	r1, #1
		d++;
		n--;
   11114:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
   11116:	2a00      	cmp	r2, #0
   11118:	d1f7      	bne.n	1110a <strncpy+0x6>
	}

	while (n > 0) {
   1111a:	b122      	cbz	r2, 11126 <strncpy+0x22>
		*d = '\0';
   1111c:	2100      	movs	r1, #0
   1111e:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
   11122:	3a01      	subs	r2, #1
   11124:	e7f9      	b.n	1111a <strncpy+0x16>
	}

	return dest;
}
   11126:	bc10      	pop	{r4}
   11128:	4770      	bx	lr
		*d = '\0';
   1112a:	2100      	movs	r1, #0
   1112c:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   11130:	3a01      	subs	r2, #1
	while (n > 0) {
   11132:	2a00      	cmp	r2, #0
   11134:	d1f9      	bne.n	1112a <strncpy+0x26>
   11136:	4770      	bx	lr

00011138 <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   11138:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   1113a:	7803      	ldrb	r3, [r0, #0]
   1113c:	428b      	cmp	r3, r1
   1113e:	d002      	beq.n	11146 <strchr+0xe>
   11140:	b10b      	cbz	r3, 11146 <strchr+0xe>
		s++;
   11142:	3001      	adds	r0, #1
   11144:	e7f9      	b.n	1113a <strchr+0x2>
	}

	return (*s == tmp) ? (char *) s : NULL;
   11146:	428b      	cmp	r3, r1
   11148:	d100      	bne.n	1114c <strchr+0x14>
}
   1114a:	4770      	bx	lr
	return (*s == tmp) ? (char *) s : NULL;
   1114c:	2000      	movs	r0, #0
   1114e:	e7fc      	b.n	1114a <strchr+0x12>

00011150 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   11150:	4603      	mov	r3, r0
	size_t n = 0;
   11152:	2000      	movs	r0, #0

	while (*s != '\0') {
   11154:	781a      	ldrb	r2, [r3, #0]
   11156:	b112      	cbz	r2, 1115e <strlen+0xe>
		s++;
   11158:	3301      	adds	r3, #1
		n++;
   1115a:	3001      	adds	r0, #1
   1115c:	e7fa      	b.n	11154 <strlen+0x4>
	}

	return n;
}
   1115e:	4770      	bx	lr

00011160 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   11160:	4603      	mov	r3, r0
	size_t n = 0;
   11162:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   11164:	781a      	ldrb	r2, [r3, #0]
   11166:	b122      	cbz	r2, 11172 <strnlen+0x12>
   11168:	4288      	cmp	r0, r1
   1116a:	d202      	bcs.n	11172 <strnlen+0x12>
		s++;
   1116c:	3301      	adds	r3, #1
		n++;
   1116e:	3001      	adds	r0, #1
   11170:	e7f8      	b.n	11164 <strnlen+0x4>
	}

	return n;
}
   11172:	4770      	bx	lr

00011174 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   11174:	7803      	ldrb	r3, [r0, #0]
   11176:	780a      	ldrb	r2, [r1, #0]
   11178:	4293      	cmp	r3, r2
   1117a:	d103      	bne.n	11184 <strcmp+0x10>
   1117c:	b113      	cbz	r3, 11184 <strcmp+0x10>
		s1++;
   1117e:	3001      	adds	r0, #1
		s2++;
   11180:	3101      	adds	r1, #1
   11182:	e7f7      	b.n	11174 <strcmp>
	}

	return *s1 - *s2;
}
   11184:	1a98      	subs	r0, r3, r2
   11186:	4770      	bx	lr

00011188 <strncmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   11188:	b192      	cbz	r2, 111b0 <strncmp+0x28>
{
   1118a:	b410      	push	{r4}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1118c:	7803      	ldrb	r3, [r0, #0]
   1118e:	780c      	ldrb	r4, [r1, #0]
   11190:	42a3      	cmp	r3, r4
   11192:	d105      	bne.n	111a0 <strncmp+0x18>
   11194:	b123      	cbz	r3, 111a0 <strncmp+0x18>
		s1++;
   11196:	3001      	adds	r0, #1
		s2++;
   11198:	3101      	adds	r1, #1
		n--;
   1119a:	3a01      	subs	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1119c:	2a00      	cmp	r2, #0
   1119e:	d1f5      	bne.n	1118c <strncmp+0x4>
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   111a0:	b122      	cbz	r2, 111ac <strncmp+0x24>
   111a2:	7800      	ldrb	r0, [r0, #0]
   111a4:	780b      	ldrb	r3, [r1, #0]
   111a6:	1ac0      	subs	r0, r0, r3
}
   111a8:	bc10      	pop	{r4}
   111aa:	4770      	bx	lr
	return (n == 0) ? 0 : (*s1 - *s2);
   111ac:	2000      	movs	r0, #0
   111ae:	e7fb      	b.n	111a8 <strncmp+0x20>
   111b0:	b11a      	cbz	r2, 111ba <strncmp+0x32>
   111b2:	7800      	ldrb	r0, [r0, #0]
   111b4:	780b      	ldrb	r3, [r1, #0]
   111b6:	1ac0      	subs	r0, r0, r3
   111b8:	4770      	bx	lr
   111ba:	2000      	movs	r0, #0
}
   111bc:	4770      	bx	lr

000111be <memcmp>:
int memcmp(const void *m1, const void *m2, size_t n)
{
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   111be:	b17a      	cbz	r2, 111e0 <memcmp+0x22>
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   111c0:	1e53      	subs	r3, r2, #1
   111c2:	d00f      	beq.n	111e4 <memcmp+0x26>
{
   111c4:	b410      	push	{r4}
	while ((--n > 0) && (*c1 == *c2)) {
   111c6:	7804      	ldrb	r4, [r0, #0]
   111c8:	780a      	ldrb	r2, [r1, #0]
   111ca:	4294      	cmp	r4, r2
   111cc:	d103      	bne.n	111d6 <memcmp+0x18>
		c1++;
   111ce:	3001      	adds	r0, #1
		c2++;
   111d0:	3101      	adds	r1, #1
	while ((--n > 0) && (*c1 == *c2)) {
   111d2:	3b01      	subs	r3, #1
   111d4:	d1f7      	bne.n	111c6 <memcmp+0x8>
	}

	return *c1 - *c2;
   111d6:	7800      	ldrb	r0, [r0, #0]
   111d8:	780b      	ldrb	r3, [r1, #0]
   111da:	1ac0      	subs	r0, r0, r3
}
   111dc:	bc10      	pop	{r4}
   111de:	4770      	bx	lr
		return 0;
   111e0:	2000      	movs	r0, #0
   111e2:	4770      	bx	lr
	return *c1 - *c2;
   111e4:	7800      	ldrb	r0, [r0, #0]
   111e6:	780b      	ldrb	r3, [r1, #0]
   111e8:	1ac0      	subs	r0, r0, r3
}
   111ea:	4770      	bx	lr

000111ec <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   111ec:	b410      	push	{r4}
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   111ee:	ea80 0301 	eor.w	r3, r0, r1
   111f2:	f013 0f03 	tst.w	r3, #3
   111f6:	d001      	beq.n	111fc <memcpy+0x10>
	unsigned char *d_byte = (unsigned char *)d;
   111f8:	4603      	mov	r3, r0
   111fa:	e017      	b.n	1122c <memcpy+0x40>
   111fc:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
   111fe:	f013 0f03 	tst.w	r3, #3
   11202:	d00b      	beq.n	1121c <memcpy+0x30>
			if (n == 0) {
   11204:	b1a2      	cbz	r2, 11230 <memcpy+0x44>
				return d;
			}
			*(d_byte++) = *(s_byte++);
   11206:	f811 4b01 	ldrb.w	r4, [r1], #1
   1120a:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   1120e:	3a01      	subs	r2, #1
   11210:	e7f5      	b.n	111fe <memcpy+0x12>

		mem_word_t *d_word = (mem_word_t *)d_byte;
		const mem_word_t *s_word = (const mem_word_t *)s_byte;

		while (n >= sizeof(mem_word_t)) {
			*(d_word++) = *(s_word++);
   11212:	f851 4b04 	ldr.w	r4, [r1], #4
   11216:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
   1121a:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
   1121c:	2a03      	cmp	r2, #3
   1121e:	d8f8      	bhi.n	11212 <memcpy+0x26>
   11220:	e004      	b.n	1122c <memcpy+0x40>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
   11222:	f811 4b01 	ldrb.w	r4, [r1], #1
   11226:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   1122a:	3a01      	subs	r2, #1
	while (n > 0) {
   1122c:	2a00      	cmp	r2, #0
   1122e:	d1f8      	bne.n	11222 <memcpy+0x36>
	}

	return d;
}
   11230:	bc10      	pop	{r4}
   11232:	4770      	bx	lr

00011234 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   11234:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   11236:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
   11238:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1123a:	f013 0f03 	tst.w	r3, #3
   1123e:	d004      	beq.n	1124a <memset+0x16>
		if (n == 0) {
   11240:	b19a      	cbz	r2, 1126a <memset+0x36>
			return buf;
		}
		*(d_byte++) = c_byte;
   11242:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   11246:	3a01      	subs	r2, #1
   11248:	e7f7      	b.n	1123a <memset+0x6>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
   1124a:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
   1124c:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
   11250:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   11254:	2a03      	cmp	r2, #3
   11256:	d906      	bls.n	11266 <memset+0x32>
		*(d_word++) = c_word;
   11258:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
   1125c:	3a04      	subs	r2, #4
   1125e:	e7f9      	b.n	11254 <memset+0x20>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
   11260:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
   11264:	3a01      	subs	r2, #1
	while (n > 0) {
   11266:	2a00      	cmp	r2, #0
   11268:	d1fa      	bne.n	11260 <memset+0x2c>
	}

	return buf;
}
   1126a:	bc10      	pop	{r4}
   1126c:	4770      	bx	lr

0001126e <strspn>:
#include <string.h>
#include <string.h>

size_t strspn(const char *s,
	      const char *accept)
{
   1126e:	b570      	push	{r4, r5, r6, lr}
   11270:	4606      	mov	r6, r0
   11272:	460d      	mov	r5, r1
	const char *ins = s;

	while ((*s != '\0') && (strchr(accept, *s) != NULL)) {
   11274:	4604      	mov	r4, r0
   11276:	7821      	ldrb	r1, [r4, #0]
   11278:	b129      	cbz	r1, 11286 <strspn+0x18>
   1127a:	4628      	mov	r0, r5
   1127c:	f7ff ff5c 	bl	11138 <strchr>
   11280:	b108      	cbz	r0, 11286 <strspn+0x18>
		++s;
   11282:	3401      	adds	r4, #1
   11284:	e7f7      	b.n	11276 <strspn+0x8>
	}

	return s - ins;
}
   11286:	1ba0      	subs	r0, r4, r6
   11288:	bd70      	pop	{r4, r5, r6, pc}

0001128a <strcspn>:

size_t strcspn(const char *s,
	       const char *reject)
{
   1128a:	b570      	push	{r4, r5, r6, lr}
   1128c:	4606      	mov	r6, r0
   1128e:	460d      	mov	r5, r1
	const char *ins = s;

	while ((*s != '\0') && (strchr(reject, *s) == NULL)) {
   11290:	4604      	mov	r4, r0
   11292:	7821      	ldrb	r1, [r4, #0]
   11294:	b129      	cbz	r1, 112a2 <strcspn+0x18>
   11296:	4628      	mov	r0, r5
   11298:	f7ff ff4e 	bl	11138 <strchr>
   1129c:	b908      	cbnz	r0, 112a2 <strcspn+0x18>
		++s;
   1129e:	3401      	adds	r4, #1
   112a0:	e7f7      	b.n	11292 <strcspn+0x8>
	}

	return s - ins;
}
   112a2:	1ba0      	subs	r0, r4, r6
   112a4:	bd70      	pop	{r4, r5, r6, pc}

000112a6 <_stdout_hook_default>:
}
   112a6:	f04f 30ff 	mov.w	r0, #4294967295
   112aa:	4770      	bx	lr

000112ac <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   112ac:	684b      	ldr	r3, [r1, #4]
   112ae:	2b01      	cmp	r3, #1
   112b0:	dd07      	ble.n	112c2 <sprintf_out+0x16>
		*(p->ptr) = c;
   112b2:	680b      	ldr	r3, [r1, #0]
   112b4:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   112b6:	680b      	ldr	r3, [r1, #0]
   112b8:	3301      	adds	r3, #1
   112ba:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   112bc:	684b      	ldr	r3, [r1, #4]
   112be:	3b01      	subs	r3, #1
   112c0:	604b      	str	r3, [r1, #4]
}
   112c2:	2000      	movs	r0, #0
   112c4:	4770      	bx	lr

000112c6 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   112c6:	b084      	sub	sp, #16
   112c8:	ab04      	add	r3, sp, #16
   112ca:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   112ce:	f89d 3004 	ldrb.w	r3, [sp, #4]
   112d2:	2b06      	cmp	r3, #6
   112d4:	d001      	beq.n	112da <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   112d6:	b004      	add	sp, #16
   112d8:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   112da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   112de:	2201      	movs	r2, #1
   112e0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   112e4:	f3bf 8f4f 	dsb	sy
        __WFE();
   112e8:	bf20      	wfe
    while (true)
   112ea:	e7fd      	b.n	112e8 <pm_power_state_set+0x22>

000112ec <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   112ec:	b084      	sub	sp, #16
   112ee:	ab04      	add	r3, sp, #16
   112f0:	e903 0007 	stmdb	r3, {r0, r1, r2}
   112f4:	2300      	movs	r3, #0
   112f6:	f383 8811 	msr	BASEPRI, r3
   112fa:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   112fe:	b004      	add	sp, #16
   11300:	4770      	bx	lr

00011302 <fs_type_get>:
{
   11302:	b508      	push	{r3, lr}
	struct registry_entry *ep = registry_find(type);
   11304:	f7f3 fd4a 	bl	4d9c <registry_find>
	return (ep != NULL) ? ep->fstp : NULL;
   11308:	4603      	mov	r3, r0
   1130a:	b100      	cbz	r0, 1130e <fs_type_get+0xc>
   1130c:	6843      	ldr	r3, [r0, #4]
}
   1130e:	4618      	mov	r0, r3
   11310:	bd08      	pop	{r3, pc}

00011312 <lfs_to_errno>:
	if (error >= 0) {
   11312:	2800      	cmp	r0, #0
   11314:	da37      	bge.n	11386 <lfs_to_errno+0x74>
	switch (error) {
   11316:	f100 0354 	add.w	r3, r0, #84	; 0x54
   1131a:	2b52      	cmp	r3, #82	; 0x52
   1131c:	d82b      	bhi.n	11376 <lfs_to_errno+0x64>
   1131e:	e8df f003 	tbb	[pc, r3]
   11322:	2a30      	.short	0x2a30
   11324:	2a2a2a2a 	.word	0x2a2a2a2a
   11328:	2a2a2a2a 	.word	0x2a2a2a2a
   1132c:	2a2a2a2a 	.word	0x2a2a2a2a
   11330:	2a2a2a2a 	.word	0x2a2a2a2a
   11334:	2a2a2a2a 	.word	0x2a2a2a2a
   11338:	2a2a2a2a 	.word	0x2a2a2a2a
   1133c:	2a2a2a2a 	.word	0x2a2a2a2a
   11340:	2a2a2a2a 	.word	0x2a2a2a2a
   11344:	2a2a2a2a 	.word	0x2a2a2a2a
   11348:	2a2a2a2a 	.word	0x2a2a2a2a
   1134c:	2d2a2a2a 	.word	0x2d2a2a2a
   11350:	2a2a2a2a 	.word	0x2a2a2a2a
   11354:	2a2a2a2a 	.word	0x2a2a2a2a
   11358:	32322a2a 	.word	0x32322a2a
   1135c:	2a2a2a2a 	.word	0x2a2a2a2a
   11360:	2a323232 	.word	0x2a323232
   11364:	2a2a322a 	.word	0x2a2a322a
   11368:	2a322a2a 	.word	0x2a322a2a
   1136c:	2a2a322a 	.word	0x2a2a322a
   11370:	2a2a2a2a 	.word	0x2a2a2a2a
   11374:	32          	.byte	0x32
   11375:	00          	.byte	0x00
	if (error >= 0) {
   11376:	f06f 0004 	mvn.w	r0, #4
   1137a:	4770      	bx	lr
		return -ENOTEMPTY;
   1137c:	f06f 0059 	mvn.w	r0, #89	; 0x59
   11380:	4770      	bx	lr
		return -EFAULT;
   11382:	f06f 000d 	mvn.w	r0, #13
}
   11386:	4770      	bx	lr

00011388 <errno_to_lfs>:
	if (error >= 0) {
   11388:	2800      	cmp	r0, #0
   1138a:	da20      	bge.n	113ce <errno_to_lfs+0x46>
	switch (error) {
   1138c:	f110 0f5a 	cmn.w	r0, #90	; 0x5a
   11390:	d01f      	beq.n	113d2 <errno_to_lfs+0x4a>
   11392:	db21      	blt.n	113d8 <errno_to_lfs+0x50>
   11394:	f110 0f02 	cmn.w	r0, #2
   11398:	dc21      	bgt.n	113de <errno_to_lfs+0x56>
   1139a:	f110 0f1c 	cmn.w	r0, #28
   1139e:	db21      	blt.n	113e4 <errno_to_lfs+0x5c>
   113a0:	f100 031c 	add.w	r3, r0, #28
   113a4:	2b1a      	cmp	r3, #26
   113a6:	d80f      	bhi.n	113c8 <errno_to_lfs+0x40>
   113a8:	e8df f003 	tbb	[pc, r3]
   113ac:	0e0e2121 	.word	0x0e0e2121
   113b0:	21210e0e 	.word	0x21210e0e
   113b4:	210e0e21 	.word	0x210e0e21
   113b8:	0e1f0e0e 	.word	0x0e1f0e0e
   113bc:	210e0e21 	.word	0x210e0e21
   113c0:	0e0e0e0e 	.word	0x0e0e0e0e
   113c4:	0e0e      	.short	0x0e0e
   113c6:	21          	.byte	0x21
   113c7:	00          	.byte	0x00
   113c8:	f06f 0004 	mvn.w	r0, #4
   113cc:	4770      	bx	lr
		return LFS_ERR_OK;
   113ce:	2000      	movs	r0, #0
   113d0:	4770      	bx	lr
		return LFS_ERR_NOTEMPTY;
   113d2:	f06f 0026 	mvn.w	r0, #38	; 0x26
   113d6:	4770      	bx	lr
	switch (error) {
   113d8:	f06f 0004 	mvn.w	r0, #4
   113dc:	4770      	bx	lr
   113de:	f06f 0004 	mvn.w	r0, #4
   113e2:	4770      	bx	lr
   113e4:	f06f 0004 	mvn.w	r0, #4
   113e8:	4770      	bx	lr
		return LFS_ERR_CORRUPT;
   113ea:	f06f 0053 	mvn.w	r0, #83	; 0x53
}
   113ee:	4770      	bx	lr

000113f0 <lfs_api_sync>:
}
   113f0:	2000      	movs	r0, #0
   113f2:	4770      	bx	lr

000113f4 <lfs_flags_from_zephyr>:
	int flags = (zflags & FS_O_CREATE) ? LFS_O_CREAT : 0;
   113f4:	0102      	lsls	r2, r0, #4
   113f6:	f402 7280 	and.w	r2, r2, #256	; 0x100
	flags |= (zflags & FS_O_READ) ? LFS_O_RDONLY : 0;
   113fa:	f000 0301 	and.w	r3, r0, #1
   113fe:	431a      	orrs	r2, r3
	flags |= (zflags & FS_O_WRITE) ? LFS_O_WRONLY : 0;
   11400:	f000 0302 	and.w	r3, r0, #2
   11404:	4313      	orrs	r3, r2
	flags |= (zflags & FS_O_APPEND) ? LFS_O_APPEND : 0;
   11406:	0180      	lsls	r0, r0, #6
   11408:	f400 6000 	and.w	r0, r0, #2048	; 0x800
}
   1140c:	4318      	orrs	r0, r3
   1140e:	4770      	bx	lr

00011410 <get_page_cb>:
{
   11410:	b430      	push	{r4, r5}
	size_t info_start = info->start_offset;
   11412:	6804      	ldr	r4, [r0, #0]
	size_t info_end = info_start + info->size - 1U;
   11414:	6845      	ldr	r5, [r0, #4]
   11416:	192a      	adds	r2, r5, r4
   11418:	3a01      	subs	r2, #1
	size_t area_start = ctx->area->fa_off;
   1141a:	680b      	ldr	r3, [r1, #0]
   1141c:	6858      	ldr	r0, [r3, #4]
	size_t area_end = area_start + ctx->area->fa_size - 1U;
   1141e:	689b      	ldr	r3, [r3, #8]
   11420:	4403      	add	r3, r0
	if (info_end < area_start) {
   11422:	4282      	cmp	r2, r0
   11424:	d308      	bcc.n	11438 <get_page_cb+0x28>
   11426:	3b01      	subs	r3, #1
	if (info_start > area_end) {
   11428:	429c      	cmp	r4, r3
   1142a:	d808      	bhi.n	1143e <get_page_cb+0x2e>
	if (info->size > ctx->max_size) {
   1142c:	684b      	ldr	r3, [r1, #4]
   1142e:	429d      	cmp	r5, r3
   11430:	d907      	bls.n	11442 <get_page_cb+0x32>
		ctx->max_size = info->size;
   11432:	604d      	str	r5, [r1, #4]
	return true;
   11434:	2001      	movs	r0, #1
   11436:	e000      	b.n	1143a <get_page_cb+0x2a>
		return true;
   11438:	2001      	movs	r0, #1
}
   1143a:	bc30      	pop	{r4, r5}
   1143c:	4770      	bx	lr
		return false;
   1143e:	2000      	movs	r0, #0
   11440:	e7fb      	b.n	1143a <get_page_cb+0x2a>
	return true;
   11442:	2001      	movs	r0, #1
   11444:	e7f9      	b.n	1143a <get_page_cb+0x2a>

00011446 <info_to_dirent>:
{
   11446:	b510      	push	{r4, lr}
   11448:	460c      	mov	r4, r1
	entry->type = ((info->type == LFS_TYPE_DIR) ?
   1144a:	7803      	ldrb	r3, [r0, #0]
		       FS_DIR_ENTRY_DIR : FS_DIR_ENTRY_FILE);
   1144c:	2b02      	cmp	r3, #2
   1144e:	bf14      	ite	ne
   11450:	2300      	movne	r3, #0
   11452:	2301      	moveq	r3, #1
	entry->type = ((info->type == LFS_TYPE_DIR) ?
   11454:	700b      	strb	r3, [r1, #0]
	entry->size = info->size;
   11456:	6843      	ldr	r3, [r0, #4]
   11458:	f8c1 3104 	str.w	r3, [r1, #260]	; 0x104
	strncpy(entry->name, info->name, sizeof(entry->name));
   1145c:	f240 1201 	movw	r2, #257	; 0x101
   11460:	f100 0108 	add.w	r1, r0, #8
   11464:	1c60      	adds	r0, r4, #1
   11466:	f7ff fe4d 	bl	11104 <strncpy>
	entry->name[sizeof(entry->name) - 1] = '\0';
   1146a:	2300      	movs	r3, #0
   1146c:	f884 3101 	strb.w	r3, [r4, #257]	; 0x101
}
   11470:	bd10      	pop	{r4, pc}

00011472 <lfs_api_erase>:
{
   11472:	b508      	push	{r3, lr}
	size_t offset = block * c->block_size;
   11474:	69c2      	ldr	r2, [r0, #28]
	int rc = flash_area_erase(fa, offset, c->block_size);
   11476:	fb01 f102 	mul.w	r1, r1, r2
   1147a:	6800      	ldr	r0, [r0, #0]
   1147c:	f7ff fd82 	bl	10f84 <flash_area_erase>
	return errno_to_lfs(rc);
   11480:	f7ff ff82 	bl	11388 <errno_to_lfs>
}
   11484:	bd08      	pop	{r3, pc}

00011486 <lfs_api_prog>:
{
   11486:	b538      	push	{r3, r4, r5, lr}
   11488:	4614      	mov	r4, r2
   1148a:	461a      	mov	r2, r3
	size_t offset = block * c->block_size + off;
   1148c:	69c5      	ldr	r5, [r0, #28]
	int rc = flash_area_write(fa, offset, buffer, size);
   1148e:	9b04      	ldr	r3, [sp, #16]
   11490:	fb01 4105 	mla	r1, r1, r5, r4
   11494:	6800      	ldr	r0, [r0, #0]
   11496:	f7ff fd44 	bl	10f22 <flash_area_write>
	return errno_to_lfs(rc);
   1149a:	f7ff ff75 	bl	11388 <errno_to_lfs>
}
   1149e:	bd38      	pop	{r3, r4, r5, pc}

000114a0 <lfs_api_read>:
{
   114a0:	b538      	push	{r3, r4, r5, lr}
   114a2:	4614      	mov	r4, r2
   114a4:	461a      	mov	r2, r3
	size_t offset = block * c->block_size + off;
   114a6:	69c5      	ldr	r5, [r0, #28]
	int rc = flash_area_read(fa, offset, buffer, size);
   114a8:	9b04      	ldr	r3, [sp, #16]
   114aa:	fb01 4105 	mla	r1, r1, r5, r4
   114ae:	6800      	ldr	r0, [r0, #0]
   114b0:	f7ff fd15 	bl	10ede <flash_area_read>
	return errno_to_lfs(rc);
   114b4:	f7ff ff68 	bl	11388 <errno_to_lfs>
}
   114b8:	bd38      	pop	{r3, r4, r5, pc}

000114ba <littlefs_tell>:
{
   114ba:	b570      	push	{r4, r5, r6, lr}
   114bc:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   114be:	6843      	ldr	r3, [r0, #4]
   114c0:	691e      	ldr	r6, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   114c2:	f106 05ec 	add.w	r5, r6, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   114c6:	f04f 32ff 	mov.w	r2, #4294967295
   114ca:	f04f 33ff 	mov.w	r3, #4294967295
   114ce:	4628      	mov	r0, r5
   114d0:	f7fc fc82 	bl	ddd8 <z_impl_k_mutex_lock>
	off_t ret = lfs_file_tell(&fs->lfs, LFS_FILEP(fp));
   114d4:	6821      	ldr	r1, [r4, #0]
   114d6:	f106 0070 	add.w	r0, r6, #112	; 0x70
   114da:	f001 fd79 	bl	12fd0 <lfs_file_tell>
   114de:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   114e0:	4628      	mov	r0, r5
   114e2:	f7fc fd03 	bl	deec <z_impl_k_mutex_unlock>
}
   114e6:	4620      	mov	r0, r4
   114e8:	bd70      	pop	{r4, r5, r6, pc}

000114ea <littlefs_sync>:
{
   114ea:	b570      	push	{r4, r5, r6, lr}
   114ec:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   114ee:	6843      	ldr	r3, [r0, #4]
   114f0:	691e      	ldr	r6, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   114f2:	f106 05ec 	add.w	r5, r6, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   114f6:	f04f 32ff 	mov.w	r2, #4294967295
   114fa:	f04f 33ff 	mov.w	r3, #4294967295
   114fe:	4628      	mov	r0, r5
   11500:	f7fc fc6a 	bl	ddd8 <z_impl_k_mutex_lock>
	int ret = lfs_file_sync(&fs->lfs, LFS_FILEP(fp));
   11504:	6821      	ldr	r1, [r4, #0]
   11506:	f106 0070 	add.w	r0, r6, #112	; 0x70
   1150a:	f002 f818 	bl	1353e <lfs_file_sync>
   1150e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   11510:	4628      	mov	r0, r5
   11512:	f7fc fceb 	bl	deec <z_impl_k_mutex_unlock>
	return lfs_to_errno(ret);
   11516:	4620      	mov	r0, r4
   11518:	f7ff fefb 	bl	11312 <lfs_to_errno>
}
   1151c:	bd70      	pop	{r4, r5, r6, pc}

0001151e <littlefs_truncate>:
{
   1151e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11520:	4604      	mov	r4, r0
   11522:	460d      	mov	r5, r1
	struct fs_littlefs *fs = fp->mp->fs_data;
   11524:	6843      	ldr	r3, [r0, #4]
   11526:	691f      	ldr	r7, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   11528:	f107 06ec 	add.w	r6, r7, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   1152c:	f04f 32ff 	mov.w	r2, #4294967295
   11530:	f04f 33ff 	mov.w	r3, #4294967295
   11534:	4630      	mov	r0, r6
   11536:	f7fc fc4f 	bl	ddd8 <z_impl_k_mutex_lock>
	int ret = lfs_file_truncate(&fs->lfs, LFS_FILEP(fp), length);
   1153a:	462a      	mov	r2, r5
   1153c:	6821      	ldr	r1, [r4, #0]
   1153e:	f107 0070 	add.w	r0, r7, #112	; 0x70
   11542:	f001 ff75 	bl	13430 <lfs_file_truncate>
   11546:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   11548:	4630      	mov	r0, r6
   1154a:	f7fc fccf 	bl	deec <z_impl_k_mutex_unlock>
	return lfs_to_errno(ret);
   1154e:	4620      	mov	r0, r4
   11550:	f7ff fedf 	bl	11312 <lfs_to_errno>
}
   11554:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011556 <littlefs_mkdir>:
{
   11556:	b570      	push	{r4, r5, r6, lr}
   11558:	4603      	mov	r3, r0
   1155a:	4608      	mov	r0, r1
	struct fs_littlefs *fs = mountp->fs_data;
   1155c:	691e      	ldr	r6, [r3, #16]
	path = fs_impl_strip_prefix(path, mountp);
   1155e:	4619      	mov	r1, r3
   11560:	f7f3 ff86 	bl	5470 <fs_impl_strip_prefix>
   11564:	4604      	mov	r4, r0
	k_mutex_lock(&fs->mutex, K_FOREVER);
   11566:	f106 05ec 	add.w	r5, r6, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   1156a:	f04f 32ff 	mov.w	r2, #4294967295
   1156e:	f04f 33ff 	mov.w	r3, #4294967295
   11572:	4628      	mov	r0, r5
   11574:	f7fc fc30 	bl	ddd8 <z_impl_k_mutex_lock>
	int ret = lfs_mkdir(&fs->lfs, path);
   11578:	4621      	mov	r1, r4
   1157a:	f106 0070 	add.w	r0, r6, #112	; 0x70
   1157e:	f7fb faf7 	bl	cb70 <lfs_mkdir>
   11582:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   11584:	4628      	mov	r0, r5
   11586:	f7fc fcb1 	bl	deec <z_impl_k_mutex_unlock>
	return lfs_to_errno(ret);
   1158a:	4620      	mov	r0, r4
   1158c:	f7ff fec1 	bl	11312 <lfs_to_errno>
}
   11590:	bd70      	pop	{r4, r5, r6, pc}

00011592 <littlefs_close>:
{
   11592:	b570      	push	{r4, r5, r6, lr}
   11594:	4604      	mov	r4, r0
	struct fs_littlefs *fs = fp->mp->fs_data;
   11596:	6843      	ldr	r3, [r0, #4]
   11598:	691d      	ldr	r5, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   1159a:	f105 06ec 	add.w	r6, r5, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   1159e:	f04f 32ff 	mov.w	r2, #4294967295
   115a2:	f04f 33ff 	mov.w	r3, #4294967295
   115a6:	4630      	mov	r0, r6
   115a8:	f7fc fc16 	bl	ddd8 <z_impl_k_mutex_lock>
	int ret = lfs_file_close(&fs->lfs, LFS_FILEP(fp));
   115ac:	6821      	ldr	r1, [r4, #0]
   115ae:	f105 0070 	add.w	r0, r5, #112	; 0x70
   115b2:	f002 f81e 	bl	135f2 <lfs_file_close>
   115b6:	4605      	mov	r5, r0
	return z_impl_k_mutex_unlock(mutex);
   115b8:	4630      	mov	r0, r6
   115ba:	f7fc fc97 	bl	deec <z_impl_k_mutex_unlock>
	release_file_data(fp);
   115be:	4620      	mov	r0, r4
   115c0:	f7f4 f92e 	bl	5820 <release_file_data>
	return lfs_to_errno(ret);
   115c4:	4628      	mov	r0, r5
   115c6:	f7ff fea4 	bl	11312 <lfs_to_errno>
}
   115ca:	bd70      	pop	{r4, r5, r6, pc}

000115cc <littlefs_unlink>:
{
   115cc:	b570      	push	{r4, r5, r6, lr}
   115ce:	4603      	mov	r3, r0
   115d0:	4608      	mov	r0, r1
	struct fs_littlefs *fs = mountp->fs_data;
   115d2:	691e      	ldr	r6, [r3, #16]
	path = fs_impl_strip_prefix(path, mountp);
   115d4:	4619      	mov	r1, r3
   115d6:	f7f3 ff4b 	bl	5470 <fs_impl_strip_prefix>
   115da:	4604      	mov	r4, r0
	k_mutex_lock(&fs->mutex, K_FOREVER);
   115dc:	f106 05ec 	add.w	r5, r6, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   115e0:	f04f 32ff 	mov.w	r2, #4294967295
   115e4:	f04f 33ff 	mov.w	r3, #4294967295
   115e8:	4628      	mov	r0, r5
   115ea:	f7fc fbf5 	bl	ddd8 <z_impl_k_mutex_lock>
	int ret = lfs_remove(&fs->lfs, path);
   115ee:	4621      	mov	r1, r4
   115f0:	f106 0070 	add.w	r0, r6, #112	; 0x70
   115f4:	f7fb fd88 	bl	d108 <lfs_remove>
   115f8:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   115fa:	4628      	mov	r0, r5
   115fc:	f7fc fc76 	bl	deec <z_impl_k_mutex_unlock>
	return lfs_to_errno(ret);
   11600:	4620      	mov	r0, r4
   11602:	f7ff fe86 	bl	11312 <lfs_to_errno>
}
   11606:	bd70      	pop	{r4, r5, r6, pc}

00011608 <littlefs_read>:
{
   11608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1160c:	4604      	mov	r4, r0
   1160e:	460d      	mov	r5, r1
   11610:	4616      	mov	r6, r2
	struct fs_littlefs *fs = fp->mp->fs_data;
   11612:	6843      	ldr	r3, [r0, #4]
   11614:	f8d3 8010 	ldr.w	r8, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   11618:	f108 07ec 	add.w	r7, r8, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   1161c:	f04f 32ff 	mov.w	r2, #4294967295
   11620:	f04f 33ff 	mov.w	r3, #4294967295
   11624:	4638      	mov	r0, r7
   11626:	f7fc fbd7 	bl	ddd8 <z_impl_k_mutex_lock>
	ssize_t ret = lfs_file_read(&fs->lfs, LFS_FILEP(fp), ptr, len);
   1162a:	4633      	mov	r3, r6
   1162c:	462a      	mov	r2, r5
   1162e:	6821      	ldr	r1, [r4, #0]
   11630:	f108 0070 	add.w	r0, r8, #112	; 0x70
   11634:	f7fa fd38 	bl	c0a8 <lfs_file_read>
   11638:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   1163a:	4638      	mov	r0, r7
   1163c:	f7fc fc56 	bl	deec <z_impl_k_mutex_unlock>
	return lfs_to_errno(ret);
   11640:	4620      	mov	r0, r4
   11642:	f7ff fe66 	bl	11312 <lfs_to_errno>
}
   11646:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001164a <littlefs_write>:
{
   1164a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1164e:	4604      	mov	r4, r0
   11650:	460d      	mov	r5, r1
   11652:	4616      	mov	r6, r2
	struct fs_littlefs *fs = fp->mp->fs_data;
   11654:	6843      	ldr	r3, [r0, #4]
   11656:	f8d3 8010 	ldr.w	r8, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   1165a:	f108 07ec 	add.w	r7, r8, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   1165e:	f04f 32ff 	mov.w	r2, #4294967295
   11662:	f04f 33ff 	mov.w	r3, #4294967295
   11666:	4638      	mov	r0, r7
   11668:	f7fc fbb6 	bl	ddd8 <z_impl_k_mutex_lock>
	ssize_t ret = lfs_file_write(&fs->lfs, LFS_FILEP(fp), ptr, len);
   1166c:	4633      	mov	r3, r6
   1166e:	462a      	mov	r2, r5
   11670:	6821      	ldr	r1, [r4, #0]
   11672:	f108 0070 	add.w	r0, r8, #112	; 0x70
   11676:	f001 fdc6 	bl	13206 <lfs_file_write>
   1167a:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   1167c:	4638      	mov	r0, r7
   1167e:	f7fc fc35 	bl	deec <z_impl_k_mutex_unlock>
	return lfs_to_errno(ret);
   11682:	4620      	mov	r0, r4
   11684:	f7ff fe45 	bl	11312 <lfs_to_errno>
}
   11688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001168c <littlefs_seek>:
{
   1168c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11690:	4604      	mov	r4, r0
   11692:	460d      	mov	r5, r1
   11694:	4616      	mov	r6, r2
	struct fs_littlefs *fs = fp->mp->fs_data;
   11696:	6843      	ldr	r3, [r0, #4]
   11698:	f8d3 8010 	ldr.w	r8, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   1169c:	f108 07ec 	add.w	r7, r8, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   116a0:	f04f 32ff 	mov.w	r2, #4294967295
   116a4:	f04f 33ff 	mov.w	r3, #4294967295
   116a8:	4638      	mov	r0, r7
   116aa:	f7fc fb95 	bl	ddd8 <z_impl_k_mutex_lock>
	off_t ret = lfs_file_seek(&fs->lfs, LFS_FILEP(fp), off, whence);
   116ae:	4633      	mov	r3, r6
   116b0:	462a      	mov	r2, r5
   116b2:	6821      	ldr	r1, [r4, #0]
   116b4:	f108 0070 	add.w	r0, r8, #112	; 0x70
   116b8:	f001 fe9e 	bl	133f8 <lfs_file_seek>
   116bc:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   116be:	4638      	mov	r0, r7
   116c0:	f7fc fc14 	bl	deec <z_impl_k_mutex_unlock>
	if (ret >= 0) {
   116c4:	2c00      	cmp	r4, #0
   116c6:	db00      	blt.n	116ca <littlefs_seek+0x3e>
		ret = 0;
   116c8:	2400      	movs	r4, #0
	return lfs_to_errno(ret);
   116ca:	4620      	mov	r0, r4
   116cc:	f7ff fe21 	bl	11312 <lfs_to_errno>
}
   116d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000116d4 <littlefs_rename>:
{
   116d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   116d6:	4604      	mov	r4, r0
   116d8:	4608      	mov	r0, r1
   116da:	4616      	mov	r6, r2
	struct fs_littlefs *fs = mountp->fs_data;
   116dc:	6927      	ldr	r7, [r4, #16]
	from = fs_impl_strip_prefix(from, mountp);
   116de:	4621      	mov	r1, r4
   116e0:	f7f3 fec6 	bl	5470 <fs_impl_strip_prefix>
   116e4:	4605      	mov	r5, r0
	to = fs_impl_strip_prefix(to, mountp);
   116e6:	4621      	mov	r1, r4
   116e8:	4630      	mov	r0, r6
   116ea:	f7f3 fec1 	bl	5470 <fs_impl_strip_prefix>
   116ee:	4604      	mov	r4, r0
	k_mutex_lock(&fs->mutex, K_FOREVER);
   116f0:	f107 06ec 	add.w	r6, r7, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   116f4:	f04f 32ff 	mov.w	r2, #4294967295
   116f8:	f04f 33ff 	mov.w	r3, #4294967295
   116fc:	4630      	mov	r0, r6
   116fe:	f7fc fb6b 	bl	ddd8 <z_impl_k_mutex_lock>
	int ret = lfs_rename(&fs->lfs, from, to);
   11702:	4622      	mov	r2, r4
   11704:	4629      	mov	r1, r5
   11706:	f107 0070 	add.w	r0, r7, #112	; 0x70
   1170a:	f7fb fd79 	bl	d200 <lfs_rename>
   1170e:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   11710:	4630      	mov	r0, r6
   11712:	f7fc fbeb 	bl	deec <z_impl_k_mutex_unlock>
	return lfs_to_errno(ret);
   11716:	4620      	mov	r0, r4
   11718:	f7ff fdfb 	bl	11312 <lfs_to_errno>
}
   1171c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001171e <littlefs_stat>:
{
   1171e:	b5f0      	push	{r4, r5, r6, r7, lr}
   11720:	b0c3      	sub	sp, #268	; 0x10c
   11722:	4603      	mov	r3, r0
   11724:	4608      	mov	r0, r1
   11726:	4615      	mov	r5, r2
	struct fs_littlefs *fs = mountp->fs_data;
   11728:	691f      	ldr	r7, [r3, #16]
	path = fs_impl_strip_prefix(path, mountp);
   1172a:	4619      	mov	r1, r3
   1172c:	f7f3 fea0 	bl	5470 <fs_impl_strip_prefix>
   11730:	4604      	mov	r4, r0
	k_mutex_lock(&fs->mutex, K_FOREVER);
   11732:	f107 06ec 	add.w	r6, r7, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   11736:	f04f 32ff 	mov.w	r2, #4294967295
   1173a:	f04f 33ff 	mov.w	r3, #4294967295
   1173e:	4630      	mov	r0, r6
   11740:	f7fc fb4a 	bl	ddd8 <z_impl_k_mutex_lock>
	int ret = lfs_stat(&fs->lfs, path, &info);
   11744:	466a      	mov	r2, sp
   11746:	4621      	mov	r1, r4
   11748:	f107 0070 	add.w	r0, r7, #112	; 0x70
   1174c:	f001 fc4e 	bl	12fec <lfs_stat>
   11750:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   11752:	4630      	mov	r0, r6
   11754:	f7fc fbca 	bl	deec <z_impl_k_mutex_unlock>
	if (ret >= 0) {
   11758:	2c00      	cmp	r4, #0
   1175a:	da04      	bge.n	11766 <littlefs_stat+0x48>
	return lfs_to_errno(ret);
   1175c:	4620      	mov	r0, r4
   1175e:	f7ff fdd8 	bl	11312 <lfs_to_errno>
}
   11762:	b043      	add	sp, #268	; 0x10c
   11764:	bdf0      	pop	{r4, r5, r6, r7, pc}
		info_to_dirent(&info, entry);
   11766:	4629      	mov	r1, r5
   11768:	4668      	mov	r0, sp
   1176a:	f7ff fe6c 	bl	11446 <info_to_dirent>
		ret = 0;
   1176e:	2400      	movs	r4, #0
   11770:	e7f4      	b.n	1175c <littlefs_stat+0x3e>

00011772 <littlefs_readdir>:
{
   11772:	b5f0      	push	{r4, r5, r6, r7, lr}
   11774:	b0c3      	sub	sp, #268	; 0x10c
   11776:	4604      	mov	r4, r0
   11778:	460d      	mov	r5, r1
	struct fs_littlefs *fs = dp->mp->fs_data;
   1177a:	6843      	ldr	r3, [r0, #4]
   1177c:	691f      	ldr	r7, [r3, #16]
	k_mutex_lock(&fs->mutex, K_FOREVER);
   1177e:	f107 06ec 	add.w	r6, r7, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   11782:	f04f 32ff 	mov.w	r2, #4294967295
   11786:	f04f 33ff 	mov.w	r3, #4294967295
   1178a:	4630      	mov	r0, r6
   1178c:	f7fc fb24 	bl	ddd8 <z_impl_k_mutex_lock>
	int ret = lfs_dir_read(&fs->lfs, dp->dirp, &info);
   11790:	466a      	mov	r2, sp
   11792:	6821      	ldr	r1, [r4, #0]
   11794:	f107 0070 	add.w	r0, r7, #112	; 0x70
   11798:	f7fa f8ae 	bl	b8f8 <lfs_dir_read>
   1179c:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
   1179e:	4630      	mov	r0, r6
   117a0:	f7fc fba4 	bl	deec <z_impl_k_mutex_unlock>
	if (ret > 0) {
   117a4:	2c00      	cmp	r4, #0
   117a6:	dc03      	bgt.n	117b0 <littlefs_readdir+0x3e>
	} else if (ret == 0) {
   117a8:	b93c      	cbnz	r4, 117ba <littlefs_readdir+0x48>
		entry->name[0] = 0;
   117aa:	2300      	movs	r3, #0
   117ac:	706b      	strb	r3, [r5, #1]
   117ae:	e004      	b.n	117ba <littlefs_readdir+0x48>
		info_to_dirent(&info, entry);
   117b0:	4629      	mov	r1, r5
   117b2:	4668      	mov	r0, sp
   117b4:	f7ff fe47 	bl	11446 <info_to_dirent>
		ret = 0;
   117b8:	2400      	movs	r4, #0
	return lfs_to_errno(ret);
   117ba:	4620      	mov	r0, r4
   117bc:	f7ff fda9 	bl	11312 <lfs_to_errno>
}
   117c0:	b043      	add	sp, #268	; 0x10c
   117c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000117c4 <littlefs_statvfs>:
{
   117c4:	b570      	push	{r4, r5, r6, lr}
   117c6:	4603      	mov	r3, r0
   117c8:	4608      	mov	r0, r1
   117ca:	4615      	mov	r5, r2
	struct fs_littlefs *fs = mountp->fs_data;
   117cc:	691c      	ldr	r4, [r3, #16]
	struct lfs *lfs = &fs->lfs;
   117ce:	f104 0670 	add.w	r6, r4, #112	; 0x70
	stat->f_bsize = lfs->cfg->prog_size;
   117d2:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
   117d6:	6992      	ldr	r2, [r2, #24]
   117d8:	602a      	str	r2, [r5, #0]
	stat->f_frsize = lfs->cfg->block_size;
   117da:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
   117de:	69d2      	ldr	r2, [r2, #28]
   117e0:	606a      	str	r2, [r5, #4]
	stat->f_blocks = lfs->cfg->block_count;
   117e2:	f8d4 20d8 	ldr.w	r2, [r4, #216]	; 0xd8
   117e6:	6a12      	ldr	r2, [r2, #32]
   117e8:	60aa      	str	r2, [r5, #8]
	path = fs_impl_strip_prefix(path, mountp);
   117ea:	4619      	mov	r1, r3
   117ec:	f7f3 fe40 	bl	5470 <fs_impl_strip_prefix>
	k_mutex_lock(&fs->mutex, K_FOREVER);
   117f0:	34ec      	adds	r4, #236	; 0xec
	return z_impl_k_mutex_lock(mutex, timeout);
   117f2:	f04f 32ff 	mov.w	r2, #4294967295
   117f6:	f04f 33ff 	mov.w	r3, #4294967295
   117fa:	4620      	mov	r0, r4
   117fc:	f7fc faec 	bl	ddd8 <z_impl_k_mutex_lock>
	ssize_t ret = lfs_fs_size(lfs);
   11800:	4630      	mov	r0, r6
   11802:	f7fa fcdf 	bl	c1c4 <lfs_fs_size>
   11806:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
   11808:	4620      	mov	r0, r4
   1180a:	f7fc fb6f 	bl	deec <z_impl_k_mutex_unlock>
	if (ret >= 0) {
   1180e:	2e00      	cmp	r6, #0
   11810:	db03      	blt.n	1181a <littlefs_statvfs+0x56>
		stat->f_bfree = stat->f_blocks - ret;
   11812:	68a8      	ldr	r0, [r5, #8]
   11814:	1b80      	subs	r0, r0, r6
   11816:	60e8      	str	r0, [r5, #12]
		ret = 0;
   11818:	2600      	movs	r6, #0
	return lfs_to_errno(ret);
   1181a:	4630      	mov	r0, r6
   1181c:	f7ff fd79 	bl	11312 <lfs_to_errno>
}
   11820:	bd70      	pop	{r4, r5, r6, pc}

00011822 <in_endpoint_ctx>:
{
   11822:	b508      	push	{r3, lr}
	return endpoint_ctx(NRF_USBD_EPIN(ep));
   11824:	f040 0080 	orr.w	r0, r0, #128	; 0x80
   11828:	f7f4 f8f8 	bl	5a1c <endpoint_ctx>
}
   1182c:	bd08      	pop	{r3, pc}

0001182e <out_endpoint_ctx>:
{
   1182e:	b508      	push	{r3, lr}
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
   11830:	f7f4 f8f4 	bl	5a1c <endpoint_ctx>
}
   11834:	bd08      	pop	{r3, pc}

00011836 <ep_ctx_reset>:
{
   11836:	b510      	push	{r4, lr}
   11838:	4604      	mov	r4, r0
	ep_ctx->buf.data = ep_ctx->buf.block.data;
   1183a:	6903      	ldr	r3, [r0, #16]
   1183c:	6143      	str	r3, [r0, #20]
	ep_ctx->buf.curr = ep_ctx->buf.data;
   1183e:	6183      	str	r3, [r0, #24]
	ep_ctx->buf.len  = 0U;
   11840:	2300      	movs	r3, #0
   11842:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
   11844:	7f83      	ldrb	r3, [r0, #30]
   11846:	b933      	cbnz	r3, 11856 <ep_ctx_reset+0x20>
	ep_ctx->read_complete = true;
   11848:	2301      	movs	r3, #1
   1184a:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
   1184c:	2300      	movs	r3, #0
   1184e:	7763      	strb	r3, [r4, #29]
	ep_ctx->write_in_progress = false;
   11850:	77a3      	strb	r3, [r4, #30]
	ep_ctx->trans_zlp = false;
   11852:	77e3      	strb	r3, [r4, #31]
}
   11854:	bd10      	pop	{r4, pc}
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   11856:	7a40      	ldrb	r0, [r0, #9]
   11858:	f7f9 f882 	bl	a960 <nrfx_usbd_ep_abort>
   1185c:	e7f4      	b.n	11848 <ep_ctx_reset+0x12>

0001185e <hfxo_stop>:
{
   1185e:	b510      	push	{r4, lr}
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
   11860:	f100 0320 	add.w	r3, r0, #32
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   11864:	2200      	movs	r2, #0
   11866:	f3bf 8f5b 	dmb	ish
   1186a:	e853 1f00 	ldrex	r1, [r3]
   1186e:	2901      	cmp	r1, #1
   11870:	d103      	bne.n	1187a <hfxo_stop+0x1c>
   11872:	e843 2400 	strex	r4, r2, [r3]
   11876:	2c00      	cmp	r4, #0
   11878:	d1f7      	bne.n	1186a <hfxo_stop+0xc>
   1187a:	f3bf 8f5b 	dmb	ish
   1187e:	d10d      	bne.n	1189c <hfxo_stop+0x3e>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
   11880:	69c4      	ldr	r4, [r0, #28]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
   11882:	f100 010c 	add.w	r1, r0, #12
   11886:	4620      	mov	r0, r4
   11888:	f7fd ffcb 	bl	f822 <onoff_cancel>

	if (rv == -EALREADY) {
   1188c:	f110 0f78 	cmn.w	r0, #120	; 0x78
   11890:	d000      	beq.n	11894 <hfxo_stop+0x36>
}
   11892:	bd10      	pop	{r4, pc}
		rv = onoff_release(mgr);
   11894:	4620      	mov	r0, r4
   11896:	f7fd ff9e 	bl	f7d6 <onoff_release>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
   1189a:	e7fa      	b.n	11892 <hfxo_stop+0x34>
	return 0;
   1189c:	2000      	movs	r0, #0
   1189e:	e7f8      	b.n	11892 <hfxo_stop+0x34>

000118a0 <usbd_enable_endpoints>:
{
   118a0:	b510      	push	{r4, lr}
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   118a2:	2400      	movs	r4, #0
   118a4:	e003      	b.n	118ae <usbd_enable_endpoints+0xe>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   118a6:	7a40      	ldrb	r0, [r0, #9]
   118a8:	f7f8 feb4 	bl	a614 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   118ac:	3401      	adds	r4, #1
   118ae:	2c07      	cmp	r4, #7
   118b0:	dc06      	bgt.n	118c0 <usbd_enable_endpoints+0x20>
		ep_ctx = in_endpoint_ctx(i);
   118b2:	b2e0      	uxtb	r0, r4
   118b4:	f7ff ffb5 	bl	11822 <in_endpoint_ctx>
		if (ep_ctx->cfg.en) {
   118b8:	7a03      	ldrb	r3, [r0, #8]
   118ba:	2b00      	cmp	r3, #0
   118bc:	d0f6      	beq.n	118ac <usbd_enable_endpoints+0xc>
   118be:	e7f2      	b.n	118a6 <usbd_enable_endpoints+0x6>
		ep_ctx = in_endpoint_ctx(NRF_USBD_EPIN(8));
   118c0:	2088      	movs	r0, #136	; 0x88
   118c2:	f7ff ffae 	bl	11822 <in_endpoint_ctx>
		if (ep_ctx->cfg.en) {
   118c6:	7a03      	ldrb	r3, [r0, #8]
   118c8:	b90b      	cbnz	r3, 118ce <usbd_enable_endpoints+0x2e>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
   118ca:	2400      	movs	r4, #0
   118cc:	e007      	b.n	118de <usbd_enable_endpoints+0x3e>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   118ce:	7a40      	ldrb	r0, [r0, #9]
   118d0:	f7f8 fea0 	bl	a614 <nrfx_usbd_ep_enable>
   118d4:	e7f9      	b.n	118ca <usbd_enable_endpoints+0x2a>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   118d6:	7a40      	ldrb	r0, [r0, #9]
   118d8:	f7f8 fe9c 	bl	a614 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
   118dc:	3401      	adds	r4, #1
   118de:	2c07      	cmp	r4, #7
   118e0:	dc06      	bgt.n	118f0 <usbd_enable_endpoints+0x50>
		ep_ctx = out_endpoint_ctx(i);
   118e2:	b2e0      	uxtb	r0, r4
   118e4:	f7ff ffa3 	bl	1182e <out_endpoint_ctx>
		if (ep_ctx->cfg.en) {
   118e8:	7a03      	ldrb	r3, [r0, #8]
   118ea:	2b00      	cmp	r3, #0
   118ec:	d0f6      	beq.n	118dc <usbd_enable_endpoints+0x3c>
   118ee:	e7f2      	b.n	118d6 <usbd_enable_endpoints+0x36>
		ep_ctx = out_endpoint_ctx(NRF_USBD_EPOUT(8));
   118f0:	2008      	movs	r0, #8
   118f2:	f7ff ff9c 	bl	1182e <out_endpoint_ctx>
		if (ep_ctx->cfg.en) {
   118f6:	7a03      	ldrb	r3, [r0, #8]
   118f8:	b903      	cbnz	r3, 118fc <usbd_enable_endpoints+0x5c>
}
   118fa:	bd10      	pop	{r4, pc}
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
   118fc:	7a40      	ldrb	r0, [r0, #9]
   118fe:	f7f8 fe89 	bl	a614 <nrfx_usbd_ep_enable>
}
   11902:	e7fa      	b.n	118fa <usbd_enable_endpoints+0x5a>

00011904 <hfxo_start>:
{
   11904:	b508      	push	{r3, lr}
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
   11906:	f100 0320 	add.w	r3, r0, #32
   1190a:	2201      	movs	r2, #1
   1190c:	f3bf 8f5b 	dmb	ish
   11910:	e853 1f00 	ldrex	r1, [r3]
   11914:	2900      	cmp	r1, #0
   11916:	d104      	bne.n	11922 <hfxo_start+0x1e>
   11918:	e843 2c00 	strex	ip, r2, [r3]
   1191c:	f1bc 0f00 	cmp.w	ip, #0
   11920:	d1f6      	bne.n	11910 <hfxo_start+0xc>
   11922:	f3bf 8f5b 	dmb	ish
   11926:	d10a      	bne.n	1193e <hfxo_start+0x3a>
	*notify = (struct sys_notify){
   11928:	2300      	movs	r3, #0
   1192a:	6103      	str	r3, [r0, #16]
   1192c:	6183      	str	r3, [r0, #24]
   1192e:	2301      	movs	r3, #1
   11930:	6143      	str	r3, [r0, #20]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
   11932:	f100 010c 	add.w	r1, r0, #12
   11936:	69c0      	ldr	r0, [r0, #28]
   11938:	f7fd fef1 	bl	f71e <onoff_request>
}
   1193c:	bd08      	pop	{r3, pc}
	return 0;
   1193e:	2000      	movs	r0, #0
   11940:	e7fc      	b.n	1193c <hfxo_start+0x38>

00011942 <usb_dc_ep_read>:
{
   11942:	b570      	push	{r4, r5, r6, lr}
   11944:	4605      	mov	r5, r0
   11946:	460c      	mov	r4, r1
   11948:	4616      	mov	r6, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
   1194a:	f7f5 fa71 	bl	6e30 <usb_dc_ep_read_wait>
	if (ret) {
   1194e:	b918      	cbnz	r0, 11958 <usb_dc_ep_read+0x16>
	if (!data && !max_data_len) {
   11950:	b11c      	cbz	r4, 1195a <usb_dc_ep_read+0x18>
	ret = usb_dc_ep_read_continue(ep);
   11952:	4628      	mov	r0, r5
   11954:	f7f5 fae6 	bl	6f24 <usb_dc_ep_read_continue>
}
   11958:	bd70      	pop	{r4, r5, r6, pc}
	if (!data && !max_data_len) {
   1195a:	2e00      	cmp	r6, #0
   1195c:	d1f9      	bne.n	11952 <usb_dc_ep_read+0x10>
   1195e:	e7fb      	b.n	11958 <usb_dc_ep_read+0x16>

00011960 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
   11960:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
   11962:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   11966:	0089      	lsls	r1, r1, #2
   11968:	3138      	adds	r1, #56	; 0x38
}
   1196a:	4408      	add	r0, r1
   1196c:	4770      	bx	lr

0001196e <get_sub_config>:
	const struct nrf_clock_control_config *config =
   1196e:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
   11970:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
   11974:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   11978:	4770      	bx	lr

0001197a <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
   1197a:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
   1197c:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
   11980:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   11984:	4770      	bx	lr

00011986 <get_status>:
{
   11986:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
   11988:	b2c9      	uxtb	r1, r1
   1198a:	f7ff ffe9 	bl	11960 <get_sub_data>
   1198e:	6880      	ldr	r0, [r0, #8]
}
   11990:	f000 0007 	and.w	r0, r0, #7
   11994:	bd08      	pop	{r3, pc}

00011996 <set_off_state>:
	__asm__ volatile(
   11996:	f04f 0320 	mov.w	r3, #32
   1199a:	f3ef 8211 	mrs	r2, BASEPRI
   1199e:	f383 8812 	msr	BASEPRI_MAX, r3
   119a2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   119a6:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   119a8:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   119ac:	d001      	beq.n	119b2 <set_off_state+0x1c>
   119ae:	428b      	cmp	r3, r1
   119b0:	d107      	bne.n	119c2 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   119b2:	2301      	movs	r3, #1
   119b4:	6003      	str	r3, [r0, #0]
	int err = 0;
   119b6:	2000      	movs	r0, #0
	__asm__ volatile(
   119b8:	f382 8811 	msr	BASEPRI, r2
   119bc:	f3bf 8f6f 	isb	sy
}
   119c0:	4770      	bx	lr
		err = -EPERM;
   119c2:	f04f 30ff 	mov.w	r0, #4294967295
   119c6:	e7f7      	b.n	119b8 <set_off_state+0x22>

000119c8 <set_starting_state>:
{
   119c8:	b410      	push	{r4}
	__asm__ volatile(
   119ca:	f04f 0320 	mov.w	r3, #32
   119ce:	f3ef 8211 	mrs	r2, BASEPRI
   119d2:	f383 8812 	msr	BASEPRI_MAX, r3
   119d6:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   119da:	6803      	ldr	r3, [r0, #0]
   119dc:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   119e0:	f003 0307 	and.w	r3, r3, #7
   119e4:	2b01      	cmp	r3, #1
   119e6:	d009      	beq.n	119fc <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
   119e8:	428c      	cmp	r4, r1
   119ea:	d00a      	beq.n	11a02 <set_starting_state+0x3a>
		err = -EPERM;
   119ec:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
   119f0:	f382 8811 	msr	BASEPRI, r2
   119f4:	f3bf 8f6f 	isb	sy
}
   119f8:	bc10      	pop	{r4}
   119fa:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   119fc:	6001      	str	r1, [r0, #0]
	int err = 0;
   119fe:	2000      	movs	r0, #0
   11a00:	e7f6      	b.n	119f0 <set_starting_state+0x28>
		err = -EALREADY;
   11a02:	f06f 0077 	mvn.w	r0, #119	; 0x77
   11a06:	e7f3      	b.n	119f0 <set_starting_state+0x28>

00011a08 <set_on_state>:
	__asm__ volatile(
   11a08:	f04f 0320 	mov.w	r3, #32
   11a0c:	f3ef 8211 	mrs	r2, BASEPRI
   11a10:	f383 8812 	msr	BASEPRI_MAX, r3
   11a14:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   11a18:	6803      	ldr	r3, [r0, #0]
   11a1a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   11a1e:	f043 0302 	orr.w	r3, r3, #2
   11a22:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   11a24:	f382 8811 	msr	BASEPRI, r2
   11a28:	f3bf 8f6f 	isb	sy
}
   11a2c:	4770      	bx	lr

00011a2e <clkstarted_handle>:
{
   11a2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11a30:	4606      	mov	r6, r0
   11a32:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
   11a34:	f7ff ff94 	bl	11960 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
   11a38:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
   11a3a:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
   11a3c:	2300      	movs	r3, #0
   11a3e:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
   11a42:	f7ff ffe1 	bl	11a08 <set_on_state>
	if (callback) {
   11a46:	b11d      	cbz	r5, 11a50 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
   11a48:	463a      	mov	r2, r7
   11a4a:	4621      	mov	r1, r4
   11a4c:	4630      	mov	r0, r6
   11a4e:	47a8      	blx	r5
}
   11a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011a52 <stop>:
{
   11a52:	b570      	push	{r4, r5, r6, lr}
   11a54:	4606      	mov	r6, r0
   11a56:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   11a58:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   11a5a:	4621      	mov	r1, r4
   11a5c:	f7ff ff80 	bl	11960 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
   11a60:	4629      	mov	r1, r5
   11a62:	3008      	adds	r0, #8
   11a64:	f7ff ff97 	bl	11996 <set_off_state>
	if (err < 0) {
   11a68:	2800      	cmp	r0, #0
   11a6a:	db06      	blt.n	11a7a <stop+0x28>
	get_sub_config(dev, type)->stop();
   11a6c:	4621      	mov	r1, r4
   11a6e:	4630      	mov	r0, r6
   11a70:	f7ff ff7d 	bl	1196e <get_sub_config>
   11a74:	6843      	ldr	r3, [r0, #4]
   11a76:	4798      	blx	r3
	return 0;
   11a78:	2000      	movs	r0, #0
}
   11a7a:	bd70      	pop	{r4, r5, r6, pc}

00011a7c <api_stop>:
{
   11a7c:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
   11a7e:	2280      	movs	r2, #128	; 0x80
   11a80:	f7ff ffe7 	bl	11a52 <stop>
}
   11a84:	bd08      	pop	{r3, pc}

00011a86 <async_start>:
{
   11a86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11a8a:	4606      	mov	r6, r0
   11a8c:	4690      	mov	r8, r2
   11a8e:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
   11a90:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   11a92:	4629      	mov	r1, r5
   11a94:	f7ff ff64 	bl	11960 <get_sub_data>
   11a98:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
   11a9a:	9906      	ldr	r1, [sp, #24]
   11a9c:	3008      	adds	r0, #8
   11a9e:	f7ff ff93 	bl	119c8 <set_starting_state>
	if (err < 0) {
   11aa2:	2800      	cmp	r0, #0
   11aa4:	db09      	blt.n	11aba <async_start+0x34>
	subdata->cb = cb;
   11aa6:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
   11aaa:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
   11aac:	4629      	mov	r1, r5
   11aae:	4630      	mov	r0, r6
   11ab0:	f7ff ff5d 	bl	1196e <get_sub_config>
   11ab4:	6803      	ldr	r3, [r0, #0]
   11ab6:	4798      	blx	r3
	return 0;
   11ab8:	2000      	movs	r0, #0
}
   11aba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00011abe <api_start>:
{
   11abe:	b510      	push	{r4, lr}
   11ac0:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
   11ac2:	2480      	movs	r4, #128	; 0x80
   11ac4:	9400      	str	r4, [sp, #0]
   11ac6:	f7ff ffde 	bl	11a86 <async_start>
}
   11aca:	b002      	add	sp, #8
   11acc:	bd10      	pop	{r4, pc}

00011ace <onoff_started_callback>:
{
   11ace:	b510      	push	{r4, lr}
   11ad0:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
   11ad2:	b2c9      	uxtb	r1, r1
   11ad4:	f7ff ff51 	bl	1197a <get_onoff_manager>
	notify(mgr, 0);
   11ad8:	2100      	movs	r1, #0
   11ada:	47a0      	blx	r4
}
   11adc:	bd10      	pop	{r4, pc}

00011ade <hfclk_start>:
{
   11ade:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   11ae0:	2001      	movs	r0, #1
   11ae2:	f7f6 fef5 	bl	88d0 <nrfx_clock_start>
}
   11ae6:	bd08      	pop	{r3, pc}

00011ae8 <lfclk_start>:
{
   11ae8:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   11aea:	2000      	movs	r0, #0
   11aec:	f7f6 fef0 	bl	88d0 <nrfx_clock_start>
}
   11af0:	bd08      	pop	{r3, pc}

00011af2 <hfclk_stop>:
{
   11af2:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   11af4:	2001      	movs	r0, #1
   11af6:	f7f6 ff23 	bl	8940 <nrfx_clock_stop>
}
   11afa:	bd08      	pop	{r3, pc}

00011afc <lfclk_stop>:
{
   11afc:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   11afe:	2000      	movs	r0, #0
   11b00:	f7f6 ff1e 	bl	8940 <nrfx_clock_stop>
}
   11b04:	bd08      	pop	{r3, pc}

00011b06 <blocking_start_callback>:
{
   11b06:	b508      	push	{r3, lr}
   11b08:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   11b0a:	f7fc fa6f 	bl	dfec <z_impl_k_sem_give>
}
   11b0e:	bd08      	pop	{r3, pc}

00011b10 <gpio_nrfx_port_get_raw>:
	return port->config;
   11b10:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   11b12:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   11b14:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   11b18:	600b      	str	r3, [r1, #0]
}
   11b1a:	2000      	movs	r0, #0
   11b1c:	4770      	bx	lr

00011b1e <gpio_nrfx_port_set_masked_raw>:
	return port->config;
   11b1e:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   11b20:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   11b22:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   11b26:	4042      	eors	r2, r0
   11b28:	400a      	ands	r2, r1
   11b2a:	4042      	eors	r2, r0
    p_reg->OUT = value;
   11b2c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   11b30:	2000      	movs	r0, #0
   11b32:	4770      	bx	lr

00011b34 <gpio_nrfx_port_set_bits_raw>:
	return port->config;
   11b34:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   11b36:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
   11b38:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
   11b3c:	2000      	movs	r0, #0
   11b3e:	4770      	bx	lr

00011b40 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
   11b40:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   11b42:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
   11b44:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
   11b48:	2000      	movs	r0, #0
   11b4a:	4770      	bx	lr

00011b4c <gpio_nrfx_port_toggle_bits>:
	return port->config;
   11b4c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   11b4e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   11b50:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   11b54:	404b      	eors	r3, r1
    p_reg->OUT = value;
   11b56:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   11b5a:	2000      	movs	r0, #0
   11b5c:	4770      	bx	lr

00011b5e <gpio_nrfx_manage_callback>:
{
   11b5e:	b470      	push	{r4, r5, r6}
	return port->data;
   11b60:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   11b62:	1d05      	adds	r5, r0, #4
	return list->head;
   11b64:	6843      	ldr	r3, [r0, #4]
	if (!sys_slist_is_empty(callbacks)) {
   11b66:	b1db      	cbz	r3, 11ba0 <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
   11b68:	460e      	mov	r6, r1
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11b6a:	2400      	movs	r4, #0
   11b6c:	e00a      	b.n	11b84 <gpio_nrfx_manage_callback+0x26>
	return node->next;
   11b6e:	680b      	ldr	r3, [r1, #0]
	list->head = node;
   11b70:	6043      	str	r3, [r0, #4]
	return list->tail;
   11b72:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   11b74:	42a1      	cmp	r1, r4
   11b76:	d10f      	bne.n	11b98 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   11b78:	606b      	str	r3, [r5, #4]
}
   11b7a:	e00d      	b.n	11b98 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
   11b7c:	606c      	str	r4, [r5, #4]
}
   11b7e:	e00b      	b.n	11b98 <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11b80:	461c      	mov	r4, r3
   11b82:	681b      	ldr	r3, [r3, #0]
   11b84:	b15b      	cbz	r3, 11b9e <gpio_nrfx_manage_callback+0x40>
   11b86:	429e      	cmp	r6, r3
   11b88:	d1fa      	bne.n	11b80 <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
   11b8a:	2c00      	cmp	r4, #0
   11b8c:	d0ef      	beq.n	11b6e <gpio_nrfx_manage_callback+0x10>
	return node->next;
   11b8e:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
   11b90:	6023      	str	r3, [r4, #0]
	return list->tail;
   11b92:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   11b94:	4299      	cmp	r1, r3
   11b96:	d0f1      	beq.n	11b7c <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
   11b98:	2300      	movs	r3, #0
   11b9a:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   11b9c:	e000      	b.n	11ba0 <gpio_nrfx_manage_callback+0x42>
			if (!set) {
   11b9e:	b152      	cbz	r2, 11bb6 <gpio_nrfx_manage_callback+0x58>
	if (set) {
   11ba0:	b162      	cbz	r2, 11bbc <gpio_nrfx_manage_callback+0x5e>
	return list->head;
   11ba2:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
   11ba4:	600b      	str	r3, [r1, #0]
	list->head = node;
   11ba6:	6041      	str	r1, [r0, #4]
	return list->tail;
   11ba8:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   11baa:	b10b      	cbz	r3, 11bb0 <gpio_nrfx_manage_callback+0x52>
	return 0;
   11bac:	2000      	movs	r0, #0
   11bae:	e006      	b.n	11bbe <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   11bb0:	6069      	str	r1, [r5, #4]
   11bb2:	2000      	movs	r0, #0
}
   11bb4:	e003      	b.n	11bbe <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
   11bb6:	f06f 0015 	mvn.w	r0, #21
   11bba:	e000      	b.n	11bbe <gpio_nrfx_manage_callback+0x60>
	return 0;
   11bbc:	2000      	movs	r0, #0
}
   11bbe:	bc70      	pop	{r4, r5, r6}
   11bc0:	4770      	bx	lr

00011bc2 <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
   11bc2:	b510      	push	{r4, lr}
   11bc4:	b082      	sub	sp, #8
   11bc6:	460c      	mov	r4, r1
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
   11bc8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   11bcc:	6e51      	ldr	r1, [r2, #100]	; 0x64
   11bce:	6e53      	ldr	r3, [r2, #100]	; 0x64
	struct nrf_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
   11bd0:	0a1b      	lsrs	r3, r3, #8
   11bd2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   11bd6:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
   11bda:	6e51      	ldr	r1, [r2, #100]	; 0x64
   11bdc:	0209      	lsls	r1, r1, #8
   11bde:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   11be2:	430b      	orrs	r3, r1
   11be4:	6e51      	ldr	r1, [r2, #100]	; 0x64
   11be6:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   11bea:	9300      	str	r3, [sp, #0]
   11bec:	6e11      	ldr	r1, [r2, #96]	; 0x60
   11bee:	6e13      	ldr	r3, [r2, #96]	; 0x60
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
   11bf0:	0a1b      	lsrs	r3, r3, #8
   11bf2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   11bf6:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
   11bfa:	6e11      	ldr	r1, [r2, #96]	; 0x60
   11bfc:	0209      	lsls	r1, r1, #8
   11bfe:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   11c02:	430b      	orrs	r3, r1
   11c04:	6e12      	ldr	r2, [r2, #96]	; 0x60
   11c06:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   11c0a:	9301      	str	r3, [sp, #4]

	if (length > sizeof(dev_id.id)) {
   11c0c:	2c08      	cmp	r4, #8
   11c0e:	d900      	bls.n	11c12 <z_impl_hwinfo_get_device_id+0x50>
		length = sizeof(dev_id.id);
   11c10:	2408      	movs	r4, #8
	}

	memcpy(buffer, dev_id.id, length);
   11c12:	4622      	mov	r2, r4
   11c14:	4669      	mov	r1, sp
   11c16:	f7ff fae9 	bl	111ec <memcpy>

	return length;
}
   11c1a:	4620      	mov	r0, r4
   11c1c:	b002      	add	sp, #8
   11c1e:	bd10      	pop	{r4, pc}

00011c20 <shift_write_context>:
	w_ctx->flash_addr += shift;
   11c20:	684b      	ldr	r3, [r1, #4]
   11c22:	4403      	add	r3, r0
   11c24:	604b      	str	r3, [r1, #4]
	w_ctx->data_addr += shift;
   11c26:	680b      	ldr	r3, [r1, #0]
   11c28:	4403      	add	r3, r0
   11c2a:	600b      	str	r3, [r1, #0]
	w_ctx->len -= shift;
   11c2c:	688b      	ldr	r3, [r1, #8]
   11c2e:	1a18      	subs	r0, r3, r0
   11c30:	6088      	str	r0, [r1, #8]
}
   11c32:	4770      	bx	lr

00011c34 <erase_op>:
{
   11c34:	b570      	push	{r4, r5, r6, lr}
   11c36:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   11c38:	f000 fb67 	bl	1230a <nrfx_nvmc_flash_page_size_get>
   11c3c:	4605      	mov	r5, r0
		if (SUSPEND_POFWARN()) {
   11c3e:	f7f5 ff33 	bl	7aa8 <suspend_pofwarn>
   11c42:	4606      	mov	r6, r0
   11c44:	b970      	cbnz	r0, 11c64 <erase_op+0x30>
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   11c46:	6860      	ldr	r0, [r4, #4]
   11c48:	f7f6 ffde 	bl	8c08 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   11c4c:	68a3      	ldr	r3, [r4, #8]
   11c4e:	1b5b      	subs	r3, r3, r5
   11c50:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   11c52:	6863      	ldr	r3, [r4, #4]
   11c54:	442b      	add	r3, r5
   11c56:	6063      	str	r3, [r4, #4]
		RESUME_POFWARN();
   11c58:	f7f5 ff58 	bl	7b0c <restore_pofwarn>
	} while (e_ctx->len > 0);
   11c5c:	68a3      	ldr	r3, [r4, #8]
   11c5e:	2b00      	cmp	r3, #0
   11c60:	d1ed      	bne.n	11c3e <erase_op+0xa>
   11c62:	e001      	b.n	11c68 <erase_op+0x34>
			return -ECANCELED;
   11c64:	f06f 068b 	mvn.w	r6, #139	; 0x8b
}
   11c68:	4630      	mov	r0, r6
   11c6a:	bd70      	pop	{r4, r5, r6, pc}

00011c6c <erase>:
{
   11c6c:	b500      	push	{lr}
   11c6e:	b085      	sub	sp, #20
	struct flash_context context = {
   11c70:	2300      	movs	r3, #0
   11c72:	9301      	str	r3, [sp, #4]
   11c74:	9002      	str	r0, [sp, #8]
   11c76:	9103      	str	r1, [sp, #12]
	return	erase_op(&context);
   11c78:	a801      	add	r0, sp, #4
   11c7a:	f7ff ffdb 	bl	11c34 <erase_op>
}
   11c7e:	b005      	add	sp, #20
   11c80:	f85d fb04 	ldr.w	pc, [sp], #4

00011c84 <write_op>:
{
   11c84:	b510      	push	{r4, lr}
   11c86:	4604      	mov	r4, r0
	while (w_ctx->len >= sizeof(uint32_t)) {
   11c88:	68a3      	ldr	r3, [r4, #8]
   11c8a:	2b03      	cmp	r3, #3
   11c8c:	d90e      	bls.n	11cac <write_op+0x28>
		if (SUSPEND_POFWARN()) {
   11c8e:	f7f5 ff0b 	bl	7aa8 <suspend_pofwarn>
   11c92:	b978      	cbnz	r0, 11cb4 <write_op+0x30>
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   11c94:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   11c96:	6819      	ldr	r1, [r3, #0]
   11c98:	6860      	ldr	r0, [r4, #4]
   11c9a:	f000 fb26 	bl	122ea <nrfx_nvmc_word_write>
		RESUME_POFWARN();
   11c9e:	f7f5 ff35 	bl	7b0c <restore_pofwarn>
		shift_write_context(sizeof(uint32_t), w_ctx);
   11ca2:	4621      	mov	r1, r4
   11ca4:	2004      	movs	r0, #4
   11ca6:	f7ff ffbb 	bl	11c20 <shift_write_context>
   11caa:	e7ed      	b.n	11c88 <write_op+0x4>
	nvmc_wait_ready();
   11cac:	f7f5 fee6 	bl	7a7c <nvmc_wait_ready>
	return FLASH_OP_DONE;
   11cb0:	2000      	movs	r0, #0
}
   11cb2:	bd10      	pop	{r4, pc}
			return -ECANCELED;
   11cb4:	f06f 008b 	mvn.w	r0, #139	; 0x8b
   11cb8:	e7fb      	b.n	11cb2 <write_op+0x2e>

00011cba <write>:
{
   11cba:	b500      	push	{lr}
   11cbc:	b085      	sub	sp, #20
	struct flash_context context = {
   11cbe:	9101      	str	r1, [sp, #4]
   11cc0:	9002      	str	r0, [sp, #8]
   11cc2:	9203      	str	r2, [sp, #12]
	return write_op(&context);
   11cc4:	a801      	add	r0, sp, #4
   11cc6:	f7ff ffdd 	bl	11c84 <write_op>
}
   11cca:	b005      	add	sp, #20
   11ccc:	f85d fb04 	ldr.w	pc, [sp], #4

00011cd0 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   11cd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11cd4:	b086      	sub	sp, #24
   11cd6:	4689      	mov	r9, r1
   11cd8:	4690      	mov	r8, r2
	const struct flash_driver_api *api = dev->api;
   11cda:	6883      	ldr	r3, [r0, #8]
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   11cdc:	695b      	ldr	r3, [r3, #20]
   11cde:	aa01      	add	r2, sp, #4
   11ce0:	a905      	add	r1, sp, #20
   11ce2:	4798      	blx	r3
	off_t off = 0;
   11ce4:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   11ce6:	4626      	mov	r6, r4

	for (block = 0; block < num_blocks; block++) {
   11ce8:	46a2      	mov	sl, r4
   11cea:	9b01      	ldr	r3, [sp, #4]
   11cec:	4553      	cmp	r3, sl
   11cee:	d916      	bls.n	11d1e <flash_page_foreach+0x4e>
		const struct flash_pages_layout *l = &layout[block];
   11cf0:	9f05      	ldr	r7, [sp, #20]
   11cf2:	eb07 07ca 	add.w	r7, r7, sl, lsl #3
		page_info.size = l->pages_size;
   11cf6:	687b      	ldr	r3, [r7, #4]
   11cf8:	9303      	str	r3, [sp, #12]

		for (i = 0; i < l->pages_count; i++) {
   11cfa:	2500      	movs	r5, #0
   11cfc:	683b      	ldr	r3, [r7, #0]
   11cfe:	42ab      	cmp	r3, r5
   11d00:	d90a      	bls.n	11d18 <flash_page_foreach+0x48>
			page_info.start_offset = off;
   11d02:	9402      	str	r4, [sp, #8]
			page_info.index = page;
   11d04:	9604      	str	r6, [sp, #16]

			if (!cb(&page_info, data)) {
   11d06:	4641      	mov	r1, r8
   11d08:	a802      	add	r0, sp, #8
   11d0a:	47c8      	blx	r9
   11d0c:	b138      	cbz	r0, 11d1e <flash_page_foreach+0x4e>
				return;
			}

			off += page_info.size;
   11d0e:	9b03      	ldr	r3, [sp, #12]
   11d10:	441c      	add	r4, r3
			page++;
   11d12:	3601      	adds	r6, #1
		for (i = 0; i < l->pages_count; i++) {
   11d14:	3501      	adds	r5, #1
   11d16:	e7f1      	b.n	11cfc <flash_page_foreach+0x2c>
	for (block = 0; block < num_blocks; block++) {
   11d18:	f10a 0a01 	add.w	sl, sl, #1
   11d1c:	e7e5      	b.n	11cea <flash_page_foreach+0x1a>
		}
	}
}
   11d1e:	b006      	add	sp, #24
   11d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00011d24 <endtx_isr>:
	return dev->config;
   11d24:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   11d26:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
   11d28:	f04f 0120 	mov.w	r1, #32
   11d2c:	f3ef 8211 	mrs	r2, BASEPRI
   11d30:	f381 8812 	msr	BASEPRI_MAX, r1
   11d34:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11d38:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   11d3c:	b131      	cbz	r1, 11d4c <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11d3e:	2100      	movs	r1, #0
   11d40:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   11d44:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11d48:	2101      	movs	r1, #1
   11d4a:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   11d4c:	f382 8811 	msr	BASEPRI, r2
   11d50:	f3bf 8f6f 	isb	sy
}
   11d54:	4770      	bx	lr

00011d56 <uarte_nrfx_isr_int>:
{
   11d56:	b538      	push	{r3, r4, r5, lr}
   11d58:	4604      	mov	r4, r0
	return dev->config;
   11d5a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   11d5c:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   11d5e:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   11d62:	f413 7f80 	tst.w	r3, #256	; 0x100
   11d66:	d003      	beq.n	11d70 <uarte_nrfx_isr_int+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11d68:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
   11d6c:	2b00      	cmp	r3, #0
   11d6e:	d139      	bne.n	11de4 <uarte_nrfx_isr_int+0x8e>
	return dev->config;
   11d70:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   11d72:	685b      	ldr	r3, [r3, #4]
   11d74:	f013 0f10 	tst.w	r3, #16
   11d78:	d01a      	beq.n	11db0 <uarte_nrfx_isr_int+0x5a>
	__asm__ volatile(
   11d7a:	f04f 0320 	mov.w	r3, #32
   11d7e:	f3ef 8211 	mrs	r2, BASEPRI
   11d82:	f383 8812 	msr	BASEPRI_MAX, r3
   11d86:	f3bf 8f6f 	isb	sy
   11d8a:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   11d8e:	b113      	cbz	r3, 11d96 <uarte_nrfx_isr_int+0x40>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   11d90:	2300      	movs	r3, #0
   11d92:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	return dev->data;
   11d96:	6923      	ldr	r3, [r4, #16]
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   11d98:	68db      	ldr	r3, [r3, #12]
   11d9a:	b10b      	cbz	r3, 11da0 <uarte_nrfx_isr_int+0x4a>
   11d9c:	691b      	ldr	r3, [r3, #16]
   11d9e:	b91b      	cbnz	r3, 11da8 <uarte_nrfx_isr_int+0x52>
    p_reg->INTENCLR = mask;
   11da0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   11da4:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
	__asm__ volatile(
   11da8:	f382 8811 	msr	BASEPRI, r2
   11dac:	f3bf 8f6f 	isb	sy
	return dev->data;
   11db0:	6923      	ldr	r3, [r4, #16]
	if (!data->int_driven) {
   11db2:	68da      	ldr	r2, [r3, #12]
   11db4:	b1aa      	cbz	r2, 11de2 <uarte_nrfx_isr_int+0x8c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11db6:	f8d5 1158 	ldr.w	r1, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   11dba:	b121      	cbz	r1, 11dc6 <uarte_nrfx_isr_int+0x70>
		data->int_driven->fifo_fill_lock = 0;
   11dbc:	2100      	movs	r1, #0
   11dbe:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   11dc0:	68da      	ldr	r2, [r3, #12]
   11dc2:	7b92      	ldrb	r2, [r2, #14]
   11dc4:	b98a      	cbnz	r2, 11dea <uarte_nrfx_isr_int+0x94>
   11dc6:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   11dca:	b122      	cbz	r2, 11dd6 <uarte_nrfx_isr_int+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11dcc:	2200      	movs	r2, #0
   11dce:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
   11dd2:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (data->int_driven->cb) {
   11dd6:	68da      	ldr	r2, [r3, #12]
   11dd8:	6813      	ldr	r3, [r2, #0]
   11dda:	b113      	cbz	r3, 11de2 <uarte_nrfx_isr_int+0x8c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   11ddc:	6851      	ldr	r1, [r2, #4]
   11dde:	4620      	mov	r0, r4
   11de0:	4798      	blx	r3
}
   11de2:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
   11de4:	f7ff ff9e 	bl	11d24 <endtx_isr>
   11de8:	e7c2      	b.n	11d70 <uarte_nrfx_isr_int+0x1a>
    p_reg->INTENCLR = mask;
   11dea:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   11dee:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   11df2:	68db      	ldr	r3, [r3, #12]
   11df4:	7399      	strb	r1, [r3, #14]
			return;
   11df6:	e7f4      	b.n	11de2 <uarte_nrfx_isr_int+0x8c>

00011df8 <uarte_nrfx_configure>:
{
   11df8:	b570      	push	{r4, r5, r6, lr}
   11dfa:	b082      	sub	sp, #8
   11dfc:	4605      	mov	r5, r0
   11dfe:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
   11e00:	794b      	ldrb	r3, [r1, #5]
   11e02:	2b01      	cmp	r3, #1
   11e04:	d006      	beq.n	11e14 <uarte_nrfx_configure+0x1c>
   11e06:	2b03      	cmp	r3, #3
   11e08:	d011      	beq.n	11e2e <uarte_nrfx_configure+0x36>
   11e0a:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
   11e0e:	4618      	mov	r0, r3
   11e10:	b002      	add	sp, #8
   11e12:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
   11e14:	2300      	movs	r3, #0
   11e16:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   11e1a:	79a3      	ldrb	r3, [r4, #6]
   11e1c:	2b03      	cmp	r3, #3
   11e1e:	d140      	bne.n	11ea2 <uarte_nrfx_configure+0xaa>
	switch (cfg->flow_ctrl) {
   11e20:	79e3      	ldrb	r3, [r4, #7]
   11e22:	b143      	cbz	r3, 11e36 <uarte_nrfx_configure+0x3e>
   11e24:	2b01      	cmp	r3, #1
   11e26:	d010      	beq.n	11e4a <uarte_nrfx_configure+0x52>
   11e28:	f06f 0385 	mvn.w	r3, #133	; 0x85
   11e2c:	e7ef      	b.n	11e0e <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   11e2e:	2310      	movs	r3, #16
   11e30:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
   11e34:	e7f1      	b.n	11e1a <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
   11e36:	2300      	movs	r3, #0
   11e38:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
   11e3c:	7923      	ldrb	r3, [r4, #4]
   11e3e:	b183      	cbz	r3, 11e62 <uarte_nrfx_configure+0x6a>
   11e40:	2b02      	cmp	r3, #2
   11e42:	d02a      	beq.n	11e9a <uarte_nrfx_configure+0xa2>
   11e44:	f06f 0385 	mvn.w	r3, #133	; 0x85
   11e48:	e7e1      	b.n	11e0e <uarte_nrfx_configure+0x16>
	return dev->config;
   11e4a:	686b      	ldr	r3, [r5, #4]
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
   11e4c:	685b      	ldr	r3, [r3, #4]
   11e4e:	f003 0201 	and.w	r2, r3, #1
   11e52:	f003 0302 	and.w	r3, r3, #2
   11e56:	4313      	orrs	r3, r2
   11e58:	d026      	beq.n	11ea8 <uarte_nrfx_configure+0xb0>
			uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
   11e5a:	2301      	movs	r3, #1
   11e5c:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
   11e60:	e7ec      	b.n	11e3c <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
   11e62:	2300      	movs	r3, #0
   11e64:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
   11e68:	6821      	ldr	r1, [r4, #0]
   11e6a:	4628      	mov	r0, r5
   11e6c:	f7f5 ff74 	bl	7d58 <baudrate_set>
   11e70:	4603      	mov	r3, r0
   11e72:	b9e0      	cbnz	r0, 11eae <uarte_nrfx_configure+0xb6>
	return dev->config;
   11e74:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
   11e76:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   11e78:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
   11e7c:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
   11e80:	f89d 2004 	ldrb.w	r2, [sp, #4]
   11e84:	4331      	orrs	r1, r6
   11e86:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   11e88:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	return dev->data;
   11e8c:	692a      	ldr	r2, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
   11e8e:	3204      	adds	r2, #4
   11e90:	e894 0003 	ldmia.w	r4, {r0, r1}
   11e94:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
   11e98:	e7b9      	b.n	11e0e <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   11e9a:	230e      	movs	r3, #14
   11e9c:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
   11ea0:	e7e2      	b.n	11e68 <uarte_nrfx_configure+0x70>
		return -ENOTSUP;
   11ea2:	f06f 0385 	mvn.w	r3, #133	; 0x85
   11ea6:	e7b2      	b.n	11e0e <uarte_nrfx_configure+0x16>
			return -ENOTSUP;
   11ea8:	f06f 0385 	mvn.w	r3, #133	; 0x85
   11eac:	e7af      	b.n	11e0e <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
   11eae:	f06f 0385 	mvn.w	r3, #133	; 0x85
   11eb2:	e7ac      	b.n	11e0e <uarte_nrfx_configure+0x16>

00011eb4 <uarte_nrfx_config_get>:
{
   11eb4:	460b      	mov	r3, r1
	return dev->data;
   11eb6:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
   11eb8:	6891      	ldr	r1, [r2, #8]
   11eba:	6850      	ldr	r0, [r2, #4]
   11ebc:	e883 0003 	stmia.w	r3, {r0, r1}
}
   11ec0:	2000      	movs	r0, #0
   11ec2:	4770      	bx	lr

00011ec4 <uarte_nrfx_err_check>:
	return dev->config;
   11ec4:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   11ec6:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   11ec8:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   11ecc:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   11ed0:	4770      	bx	lr

00011ed2 <is_tx_ready>:
	return dev->config;
   11ed2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   11ed4:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   11ed6:	685b      	ldr	r3, [r3, #4]
   11ed8:	f003 0308 	and.w	r3, r3, #8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11edc:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   11ee0:	b929      	cbnz	r1, 11eee <is_tx_ready+0x1c>
   11ee2:	b933      	cbnz	r3, 11ef2 <is_tx_ready+0x20>
   11ee4:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
   11ee8:	b92b      	cbnz	r3, 11ef6 <is_tx_ready+0x24>
   11eea:	2000      	movs	r0, #0
   11eec:	4770      	bx	lr
   11eee:	2001      	movs	r0, #1
   11ef0:	4770      	bx	lr
   11ef2:	2000      	movs	r0, #0
   11ef4:	4770      	bx	lr
   11ef6:	2001      	movs	r0, #1
}
   11ef8:	4770      	bx	lr

00011efa <uarte_enable>:
	return dev->config;
   11efa:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   11efc:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   11efe:	2208      	movs	r2, #8
   11f00:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
   11f04:	4770      	bx	lr

00011f06 <tx_start>:
{
   11f06:	b510      	push	{r4, lr}
	return dev->config;
   11f08:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   11f0a:	681c      	ldr	r4, [r3, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   11f0c:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   11f10:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11f14:	2300      	movs	r3, #0
   11f16:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
   11f1a:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
   11f1e:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
   11f22:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
   11f26:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   11f28:	685b      	ldr	r3, [r3, #4]
   11f2a:	f013 0f10 	tst.w	r3, #16
   11f2e:	d102      	bne.n	11f36 <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11f30:	2301      	movs	r3, #1
   11f32:	60a3      	str	r3, [r4, #8]
}
   11f34:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
   11f36:	2101      	movs	r1, #1
   11f38:	f7ff ffdf 	bl	11efa <uarte_enable>
    p_reg->INTENSET = mask;
   11f3c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
   11f40:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   11f44:	e7f4      	b.n	11f30 <tx_start+0x2a>

00011f46 <uarte_nrfx_poll_in>:
{
   11f46:	b410      	push	{r4}
	return dev->data;
   11f48:	6904      	ldr	r4, [r0, #16]
	return dev->config;
   11f4a:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   11f4c:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11f4e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   11f52:	b152      	cbz	r2, 11f6a <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
   11f54:	7d62      	ldrb	r2, [r4, #21]
   11f56:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   11f58:	2000      	movs	r0, #0
   11f5a:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   11f5e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   11f62:	2201      	movs	r2, #1
   11f64:	601a      	str	r2, [r3, #0]
}
   11f66:	bc10      	pop	{r4}
   11f68:	4770      	bx	lr
		return -1;
   11f6a:	f04f 30ff 	mov.w	r0, #4294967295
   11f6e:	e7fa      	b.n	11f66 <uarte_nrfx_poll_in+0x20>

00011f70 <uarte_nrfx_fifo_fill>:
{
   11f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11f74:	4680      	mov	r8, r0
	return dev->data;
   11f76:	6907      	ldr	r7, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   11f78:	68fb      	ldr	r3, [r7, #12]
   11f7a:	899e      	ldrh	r6, [r3, #12]
   11f7c:	4296      	cmp	r6, r2
   11f7e:	bfa8      	it	ge
   11f80:	4616      	movge	r6, r2
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   11f82:	3310      	adds	r3, #16
   11f84:	2201      	movs	r2, #1
   11f86:	f3bf 8f5b 	dmb	ish
   11f8a:	e853 0f00 	ldrex	r0, [r3]
   11f8e:	2800      	cmp	r0, #0
   11f90:	d103      	bne.n	11f9a <uarte_nrfx_fifo_fill+0x2a>
   11f92:	e843 2400 	strex	r4, r2, [r3]
   11f96:	2c00      	cmp	r4, #0
   11f98:	d1f7      	bne.n	11f8a <uarte_nrfx_fifo_fill+0x1a>
   11f9a:	f3bf 8f5b 	dmb	ish
   11f9e:	d101      	bne.n	11fa4 <uarte_nrfx_fifo_fill+0x34>
	for (int i = 0; i < len; i++) {
   11fa0:	2300      	movs	r3, #0
   11fa2:	e006      	b.n	11fb2 <uarte_nrfx_fifo_fill+0x42>
		return 0;
   11fa4:	2600      	movs	r6, #0
   11fa6:	e019      	b.n	11fdc <uarte_nrfx_fifo_fill+0x6c>
		data->int_driven->tx_buffer[i] = tx_data[i];
   11fa8:	68fc      	ldr	r4, [r7, #12]
   11faa:	68a4      	ldr	r4, [r4, #8]
   11fac:	5ccd      	ldrb	r5, [r1, r3]
   11fae:	54e5      	strb	r5, [r4, r3]
	for (int i = 0; i < len; i++) {
   11fb0:	3301      	adds	r3, #1
   11fb2:	42b3      	cmp	r3, r6
   11fb4:	dbf8      	blt.n	11fa8 <uarte_nrfx_fifo_fill+0x38>
	__asm__ volatile(
   11fb6:	f04f 0320 	mov.w	r3, #32
   11fba:	f3ef 8411 	mrs	r4, BASEPRI
   11fbe:	f383 8812 	msr	BASEPRI_MAX, r3
   11fc2:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   11fc6:	4640      	mov	r0, r8
   11fc8:	f7ff ff83 	bl	11ed2 <is_tx_ready>
   11fcc:	b948      	cbnz	r0, 11fe2 <uarte_nrfx_fifo_fill+0x72>
		data->int_driven->fifo_fill_lock = 0;
   11fce:	68fb      	ldr	r3, [r7, #12]
   11fd0:	2600      	movs	r6, #0
   11fd2:	611e      	str	r6, [r3, #16]
	__asm__ volatile(
   11fd4:	f384 8811 	msr	BASEPRI, r4
   11fd8:	f3bf 8f6f 	isb	sy
}
   11fdc:	4630      	mov	r0, r6
   11fde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
   11fe2:	68fb      	ldr	r3, [r7, #12]
   11fe4:	4632      	mov	r2, r6
   11fe6:	6899      	ldr	r1, [r3, #8]
   11fe8:	4640      	mov	r0, r8
   11fea:	f7ff ff8c 	bl	11f06 <tx_start>
   11fee:	e7f1      	b.n	11fd4 <uarte_nrfx_fifo_fill+0x64>

00011ff0 <uarte_nrfx_fifo_read>:
	return dev->config;
   11ff0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   11ff2:	681b      	ldr	r3, [r3, #0]
	return dev->data;
   11ff4:	6900      	ldr	r0, [r0, #16]
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   11ff6:	2a00      	cmp	r2, #0
   11ff8:	dd0c      	ble.n	12014 <uarte_nrfx_fifo_read+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   11ffa:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   11ffe:	b15a      	cbz	r2, 12018 <uarte_nrfx_fifo_read+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   12000:	2200      	movs	r2, #0
   12002:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   12006:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   1200a:	7d42      	ldrb	r2, [r0, #21]
   1200c:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1200e:	2001      	movs	r0, #1
   12010:	6018      	str	r0, [r3, #0]
}
   12012:	4770      	bx	lr
	int num_rx = 0;
   12014:	2000      	movs	r0, #0
   12016:	4770      	bx	lr
   12018:	2000      	movs	r0, #0
}
   1201a:	4770      	bx	lr

0001201c <uarte_nrfx_irq_tx_enable>:
	return dev->config;
   1201c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   1201e:	681a      	ldr	r2, [r3, #0]
	return dev->data;
   12020:	6901      	ldr	r1, [r0, #16]
	__asm__ volatile(
   12022:	f04f 0020 	mov.w	r0, #32
   12026:	f3ef 8311 	mrs	r3, BASEPRI
   1202a:	f380 8812 	msr	BASEPRI_MAX, r0
   1202e:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   12032:	68c9      	ldr	r1, [r1, #12]
   12034:	2000      	movs	r0, #0
   12036:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   12038:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   1203c:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   12040:	f383 8811 	msr	BASEPRI, r3
   12044:	f3bf 8f6f 	isb	sy
}
   12048:	4770      	bx	lr

0001204a <uarte_nrfx_irq_tx_disable>:
	return dev->data;
   1204a:	6903      	ldr	r3, [r0, #16]
	data->int_driven->disable_tx_irq = true;
   1204c:	68db      	ldr	r3, [r3, #12]
   1204e:	2201      	movs	r2, #1
   12050:	739a      	strb	r2, [r3, #14]
}
   12052:	4770      	bx	lr

00012054 <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config;
   12054:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12056:	6819      	ldr	r1, [r3, #0]
	return dev->data;
   12058:	6903      	ldr	r3, [r0, #16]
	bool ready = !data->int_driven->disable_tx_irq &&
   1205a:	68db      	ldr	r3, [r3, #12]
   1205c:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1205e:	b94a      	cbnz	r2, 12074 <uarte_nrfx_irq_tx_ready_complete+0x20>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   12060:	f8d1 2158 	ldr.w	r2, [r1, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   12064:	b15a      	cbz	r2, 1207e <uarte_nrfx_irq_tx_ready_complete+0x2a>
    return p_reg->INTENSET & mask;
   12066:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1206a:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
   1206e:	d008      	beq.n	12082 <uarte_nrfx_irq_tx_ready_complete+0x2e>
   12070:	2001      	movs	r0, #1
   12072:	e000      	b.n	12076 <uarte_nrfx_irq_tx_ready_complete+0x22>
   12074:	2000      	movs	r0, #0
	if (ready) {
   12076:	b108      	cbz	r0, 1207c <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
   12078:	2200      	movs	r2, #0
   1207a:	611a      	str	r2, [r3, #16]
}
   1207c:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   1207e:	2000      	movs	r0, #0
   12080:	e7f9      	b.n	12076 <uarte_nrfx_irq_tx_ready_complete+0x22>
   12082:	2000      	movs	r0, #0
   12084:	e7f7      	b.n	12076 <uarte_nrfx_irq_tx_ready_complete+0x22>

00012086 <uarte_nrfx_irq_rx_ready>:
	return dev->config;
   12086:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12088:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1208a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   1208e:	3800      	subs	r0, #0
   12090:	bf18      	it	ne
   12092:	2001      	movne	r0, #1
   12094:	4770      	bx	lr

00012096 <uarte_nrfx_irq_rx_enable>:
	return dev->config;
   12096:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   12098:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1209a:	2210      	movs	r2, #16
   1209c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   120a0:	4770      	bx	lr

000120a2 <uarte_nrfx_irq_rx_disable>:
	return dev->config;
   120a2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   120a4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   120a6:	2210      	movs	r2, #16
   120a8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   120ac:	4770      	bx	lr

000120ae <uarte_nrfx_irq_err_enable>:
	return dev->config;
   120ae:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   120b0:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   120b2:	f44f 7200 	mov.w	r2, #512	; 0x200
   120b6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   120ba:	4770      	bx	lr

000120bc <uarte_nrfx_irq_err_disable>:
	return dev->config;
   120bc:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   120be:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   120c0:	f44f 7200 	mov.w	r2, #512	; 0x200
   120c4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   120c8:	4770      	bx	lr

000120ca <uarte_nrfx_irq_is_pending>:
{
   120ca:	b538      	push	{r3, r4, r5, lr}
   120cc:	4604      	mov	r4, r0
	return dev->config;
   120ce:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
   120d0:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   120d2:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   120d6:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
   120da:	d106      	bne.n	120ea <uarte_nrfx_irq_is_pending+0x20>
   120dc:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   120e0:	f013 0f10 	tst.w	r3, #16
   120e4:	d107      	bne.n	120f6 <uarte_nrfx_irq_is_pending+0x2c>
   120e6:	2000      	movs	r0, #0
}
   120e8:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   120ea:	f7ff ffb3 	bl	12054 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   120ee:	2800      	cmp	r0, #0
   120f0:	d0f4      	beq.n	120dc <uarte_nrfx_irq_is_pending+0x12>
		||
   120f2:	2001      	movs	r0, #1
   120f4:	e7f8      	b.n	120e8 <uarte_nrfx_irq_is_pending+0x1e>
		 uarte_nrfx_irq_rx_ready(dev)));
   120f6:	4620      	mov	r0, r4
   120f8:	f7ff ffc5 	bl	12086 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   120fc:	2800      	cmp	r0, #0
   120fe:	d0f3      	beq.n	120e8 <uarte_nrfx_irq_is_pending+0x1e>
		||
   12100:	2001      	movs	r0, #1
   12102:	e7f1      	b.n	120e8 <uarte_nrfx_irq_is_pending+0x1e>

00012104 <uarte_nrfx_irq_update>:
}
   12104:	2001      	movs	r0, #1
   12106:	4770      	bx	lr

00012108 <uarte_nrfx_irq_callback_set>:
	return dev->data;
   12108:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
   1210a:	68d8      	ldr	r0, [r3, #12]
   1210c:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
   1210e:	68db      	ldr	r3, [r3, #12]
   12110:	605a      	str	r2, [r3, #4]
}
   12112:	4770      	bx	lr

00012114 <wait_tx_ready>:
{
   12114:	b570      	push	{r4, r5, r6, lr}
   12116:	4606      	mov	r6, r0
   12118:	e014      	b.n	12144 <wait_tx_ready+0x30>
		if (res) {
   1211a:	b17d      	cbz	r5, 1213c <wait_tx_ready+0x28>
	__asm__ volatile(
   1211c:	f04f 0320 	mov.w	r3, #32
   12120:	f3ef 8411 	mrs	r4, BASEPRI
   12124:	f383 8812 	msr	BASEPRI_MAX, r3
   12128:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1212c:	4630      	mov	r0, r6
   1212e:	f7ff fed0 	bl	11ed2 <is_tx_ready>
   12132:	b9a0      	cbnz	r0, 1215e <wait_tx_ready+0x4a>
	__asm__ volatile(
   12134:	f384 8811 	msr	BASEPRI, r4
   12138:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
   1213c:	2021      	movs	r0, #33	; 0x21
   1213e:	2100      	movs	r1, #0
   12140:	f7fc fc92 	bl	ea68 <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   12144:	2464      	movs	r4, #100	; 0x64
   12146:	4630      	mov	r0, r6
   12148:	f7ff fec3 	bl	11ed2 <is_tx_ready>
   1214c:	4605      	mov	r5, r0
   1214e:	2800      	cmp	r0, #0
   12150:	d1e3      	bne.n	1211a <wait_tx_ready+0x6>
   12152:	2001      	movs	r0, #1
   12154:	f000 f8a0 	bl	12298 <nrfx_busy_wait>
   12158:	3c01      	subs	r4, #1
   1215a:	d1f4      	bne.n	12146 <wait_tx_ready+0x32>
   1215c:	e7dd      	b.n	1211a <wait_tx_ready+0x6>
}
   1215e:	4620      	mov	r0, r4
   12160:	bd70      	pop	{r4, r5, r6, pc}

00012162 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   12162:	b510      	push	{r4, lr}
   12164:	4604      	mov	r4, r0
   12166:	2200      	movs	r2, #0
   12168:	2101      	movs	r1, #1
   1216a:	2002      	movs	r0, #2
   1216c:	f7f1 ff3a 	bl	3fe4 <z_arm_irq_priority_set>
   12170:	2002      	movs	r0, #2
   12172:	f7f1 ff05 	bl	3f80 <arch_irq_enable>
   12176:	2101      	movs	r1, #1
   12178:	4620      	mov	r0, r4
   1217a:	f7f5 ff07 	bl	7f8c <uarte_instance_init>
   1217e:	bd10      	pop	{r4, pc}

00012180 <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   12180:	4770      	bx	lr

00012182 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   12182:	4770      	bx	lr

00012184 <counter_sub>:
	return (a - b) & COUNTER_MAX;
   12184:	1a40      	subs	r0, r0, r1
}
   12186:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1218a:	4770      	bx	lr

0001218c <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   1218c:	f100 0350 	add.w	r3, r0, #80	; 0x50
   12190:	009b      	lsls	r3, r3, #2
   12192:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   12194:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   12198:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   1219c:	2200      	movs	r2, #0
   1219e:	601a      	str	r2, [r3, #0]
   121a0:	681b      	ldr	r3, [r3, #0]
}
   121a2:	4770      	bx	lr

000121a4 <absolute_time_to_cc>:
}
   121a4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   121a8:	4770      	bx	lr

000121aa <full_int_lock>:
	__asm__ volatile(
   121aa:	f04f 0320 	mov.w	r3, #32
   121ae:	f3ef 8011 	mrs	r0, BASEPRI
   121b2:	f383 8812 	msr	BASEPRI_MAX, r3
   121b6:	f3bf 8f6f 	isb	sy
}
   121ba:	4770      	bx	lr

000121bc <full_int_unlock>:
	__asm__ volatile(
   121bc:	f380 8811 	msr	BASEPRI, r0
   121c0:	f3bf 8f6f 	isb	sy
}
   121c4:	4770      	bx	lr

000121c6 <set_absolute_alarm>:
{
   121c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   121c8:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
   121ca:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
   121ce:	f7f5 ffa3 	bl	8118 <get_comparator>
   121d2:	4607      	mov	r7, r0
   121d4:	e019      	b.n	1220a <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
   121d6:	2013      	movs	r0, #19
   121d8:	f001 feaf 	bl	13f3a <z_impl_k_busy_wait>
}
   121dc:	e022      	b.n	12224 <set_absolute_alarm+0x5e>
		event_clear(chan);
   121de:	4630      	mov	r0, r6
   121e0:	f7ff ffd4 	bl	1218c <event_clear>
		event_enable(chan);
   121e4:	4630      	mov	r0, r6
   121e6:	f7f5 ff9f 	bl	8128 <event_enable>
		set_comparator(chan, cc_val);
   121ea:	4629      	mov	r1, r5
   121ec:	4630      	mov	r0, r6
   121ee:	f7f5 ff89 	bl	8104 <set_comparator>
		now2 = counter();
   121f2:	f7f5 ffad 	bl	8150 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   121f6:	4284      	cmp	r4, r0
   121f8:	d01e      	beq.n	12238 <set_absolute_alarm+0x72>
   121fa:	1c81      	adds	r1, r0, #2
   121fc:	4628      	mov	r0, r5
   121fe:	f7ff ffc1 	bl	12184 <counter_sub>
	} while ((now2 != now) &&
   12202:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   12206:	d917      	bls.n	12238 <set_absolute_alarm+0x72>
		prev_cc = cc_val;
   12208:	462f      	mov	r7, r5
		now = counter();
   1220a:	f7f5 ffa1 	bl	8150 <counter>
   1220e:	4604      	mov	r4, r0
		set_comparator(chan, now);
   12210:	4601      	mov	r1, r0
   12212:	4630      	mov	r0, r6
   12214:	f7f5 ff76 	bl	8104 <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
   12218:	4621      	mov	r1, r4
   1221a:	4638      	mov	r0, r7
   1221c:	f7ff ffb2 	bl	12184 <counter_sub>
   12220:	2801      	cmp	r0, #1
   12222:	d0d8      	beq.n	121d6 <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   12224:	1ca7      	adds	r7, r4, #2
   12226:	4639      	mov	r1, r7
   12228:	4628      	mov	r0, r5
   1222a:	f7ff ffab 	bl	12184 <counter_sub>
   1222e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   12232:	d9d4      	bls.n	121de <set_absolute_alarm+0x18>
			cc_val = now + 2;
   12234:	463d      	mov	r5, r7
   12236:	e7d2      	b.n	121de <set_absolute_alarm+0x18>
}
   12238:	4628      	mov	r0, r5
   1223a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001223c <compare_set>:
{
   1223c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1223e:	b083      	sub	sp, #12
   12240:	4604      	mov	r4, r0
   12242:	4617      	mov	r7, r2
   12244:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
   12246:	f7f5 ff89 	bl	815c <compare_int_lock>
   1224a:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
   1224c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1224e:	9301      	str	r3, [sp, #4]
   12250:	9b08      	ldr	r3, [sp, #32]
   12252:	9300      	str	r3, [sp, #0]
   12254:	463a      	mov	r2, r7
   12256:	462b      	mov	r3, r5
   12258:	4620      	mov	r0, r4
   1225a:	f7f6 f86d 	bl	8338 <compare_set_nolocks>
   1225e:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
   12260:	4631      	mov	r1, r6
   12262:	4620      	mov	r0, r4
   12264:	f7f5 ffde 	bl	8224 <compare_int_unlock>
}
   12268:	4628      	mov	r0, r5
   1226a:	b003      	add	sp, #12
   1226c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001226e <sys_clock_cycle_get_32>:

uint32_t sys_clock_cycle_get_32(void)
{
   1226e:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   12270:	f7f6 f842 	bl	82f8 <z_nrf_rtc_timer_read>
}
   12274:	bd08      	pop	{r3, pc}

00012276 <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
   12276:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
   12278:	f7fc feea 	bl	f050 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
   1227c:	bd08      	pop	{r3, pc}

0001227e <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
   1227e:	b510      	push	{r4, lr}
   12280:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   12282:	f7f1 fd3f 	bl	3d04 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   12286:	f7f1 fdfb 	bl	3e80 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
   1228a:	4620      	mov	r0, r4
   1228c:	f7ff fff3 	bl	12276 <hw_cc3xx_init_internal>
	return res;
}
   12290:	bd10      	pop	{r4, pc}

00012292 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
   12292:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
   12294:	4780      	blx	r0
}
   12296:	bd08      	pop	{r3, pc}

00012298 <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
   12298:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
   1229a:	f001 fe4e 	bl	13f3a <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
   1229e:	bd08      	pop	{r3, pc}

000122a0 <is_app_channel>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   122a0:	2301      	movs	r3, #1
   122a2:	4083      	lsls	r3, r0
   122a4:	f013 0fff 	tst.w	r3, #255	; 0xff
}
   122a8:	bf14      	ite	ne
   122aa:	2001      	movne	r0, #1
   122ac:	2000      	moveq	r0, #0
   122ae:	4770      	bx	lr

000122b0 <flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   122b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   122b4:	6918      	ldr	r0, [r3, #16]
}
   122b6:	4770      	bx	lr

000122b8 <flash_page_count_get>:
    return p_reg->CODESIZE;
   122b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   122bc:	6958      	ldr	r0, [r3, #20]
}
   122be:	4770      	bx	lr

000122c0 <flash_total_size_get>:
{
   122c0:	b510      	push	{r4, lr}
    return flash_page_size_get() * flash_page_count_get();
   122c2:	f7ff fff5 	bl	122b0 <flash_page_size_get>
   122c6:	4604      	mov	r4, r0
   122c8:	f7ff fff6 	bl	122b8 <flash_page_count_get>
}
   122cc:	fb00 f004 	mul.w	r0, r0, r4
   122d0:	bd10      	pop	{r4, pc}

000122d2 <is_page_aligned_check>:
{
   122d2:	b510      	push	{r4, lr}
   122d4:	4604      	mov	r4, r0
    return !(addr % flash_page_size_get());
   122d6:	f7ff ffeb 	bl	122b0 <flash_page_size_get>
   122da:	fbb4 f3f0 	udiv	r3, r4, r0
   122de:	fb00 4013 	mls	r0, r0, r3, r4
}
   122e2:	fab0 f080 	clz	r0, r0
   122e6:	0940      	lsrs	r0, r0, #5
   122e8:	bd10      	pop	{r4, pc}

000122ea <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   122ea:	b538      	push	{r3, r4, r5, lr}
   122ec:	4604      	mov	r4, r0
   122ee:	460d      	mov	r5, r1
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();
   122f0:	f7f6 fc6e 	bl	8bd0 <nvmc_write_mode_set>

    nvmc_word_write(addr, value);
   122f4:	4629      	mov	r1, r5
   122f6:	4620      	mov	r0, r4
   122f8:	f7f6 fc7a 	bl	8bf0 <nvmc_word_write>

    nvmc_readonly_mode_set();
   122fc:	f7f6 fc60 	bl	8bc0 <nvmc_readonly_mode_set>
}
   12300:	bd38      	pop	{r3, r4, r5, pc}

00012302 <nrfx_nvmc_flash_size_get>:
    return (nrfx_is_word_aligned((void const *)addr) ? (uint16_t)(val32)
                                                     : (uint16_t)(val32 >> 16));
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
   12302:	b508      	push	{r3, lr}
    return flash_total_size_get();
   12304:	f7ff ffdc 	bl	122c0 <flash_total_size_get>
}
   12308:	bd08      	pop	{r3, pc}

0001230a <nrfx_nvmc_flash_page_size_get>:

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
   1230a:	b508      	push	{r3, lr}
    return flash_page_size_get();
   1230c:	f7ff ffd0 	bl	122b0 <flash_page_size_get>
}
   12310:	bd08      	pop	{r3, pc}

00012312 <nrfx_nvmc_flash_page_count_get>:

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
   12312:	b508      	push	{r3, lr}
    return flash_page_count_get();
   12314:	f7ff ffd0 	bl	122b8 <flash_page_count_get>
}
   12318:	bd08      	pop	{r3, pc}

0001231a <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
   1231a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1231e:	f44f 7260 	mov.w	r2, #896	; 0x380
   12322:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   12326:	4770      	bx	lr

00012328 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
   12328:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1232c:	f44f 7260 	mov.w	r2, #896	; 0x380
   12330:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   12334:	4770      	bx	lr

00012336 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
   12336:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
   12338:	f7f6 fce4 	bl	8d04 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
   1233c:	f7f6 fb8c 	bl	8a58 <nrfx_clock_irq_handler>
}
   12340:	bd08      	pop	{r3, pc}

00012342 <nrf52_errata_223>:
}
   12342:	2000      	movs	r0, #0
   12344:	4770      	bx	lr

00012346 <nrfx_usbd_consumer>:
{
   12346:	b430      	push	{r4, r5}
    size_t size = p_transfer->size;
   12348:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
   1234a:	42a3      	cmp	r3, r4
   1234c:	d908      	bls.n	12360 <nrfx_usbd_consumer+0x1a>
        p_next->size = 0;
   1234e:	2500      	movs	r5, #0
   12350:	6045      	str	r5, [r0, #4]
        p_next->p_data = p_transfer->p_data;
   12352:	6809      	ldr	r1, [r1, #0]
   12354:	6001      	str	r1, [r0, #0]
    return (ep_size == data_size) && (size != 0);
   12356:	429a      	cmp	r2, r3
   12358:	d00b      	beq.n	12372 <nrfx_usbd_consumer+0x2c>
   1235a:	2000      	movs	r0, #0
}
   1235c:	bc30      	pop	{r4, r5}
   1235e:	4770      	bx	lr
        p_next->size = data_size;
   12360:	6043      	str	r3, [r0, #4]
        p_next->p_data = p_transfer->p_data;
   12362:	680d      	ldr	r5, [r1, #0]
   12364:	6005      	str	r5, [r0, #0]
        size -= data_size;
   12366:	1ae4      	subs	r4, r4, r3
        p_transfer->size = size;
   12368:	604c      	str	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
   1236a:	6808      	ldr	r0, [r1, #0]
   1236c:	4418      	add	r0, r3
   1236e:	6008      	str	r0, [r1, #0]
   12370:	e7f1      	b.n	12356 <nrfx_usbd_consumer+0x10>
    return (ep_size == data_size) && (size != 0);
   12372:	b90c      	cbnz	r4, 12378 <nrfx_usbd_consumer+0x32>
   12374:	2000      	movs	r0, #0
   12376:	e7f1      	b.n	1235c <nrfx_usbd_consumer+0x16>
   12378:	2001      	movs	r0, #1
   1237a:	e7ef      	b.n	1235c <nrfx_usbd_consumer+0x16>

0001237c <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
   1237c:	684b      	ldr	r3, [r1, #4]
    if (tx_size > ep_size)
   1237e:	4293      	cmp	r3, r2
   12380:	d800      	bhi.n	12384 <nrfx_usbd_feeder_ram+0x8>
    size_t tx_size = p_transfer->size;
   12382:	461a      	mov	r2, r3
    p_next->p_data = p_transfer->p_data;
   12384:	680b      	ldr	r3, [r1, #0]
   12386:	6003      	str	r3, [r0, #0]
    p_next->size = tx_size;
   12388:	6042      	str	r2, [r0, #4]
    p_transfer->size -= tx_size;
   1238a:	6848      	ldr	r0, [r1, #4]
   1238c:	1a80      	subs	r0, r0, r2
   1238e:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   12390:	680b      	ldr	r3, [r1, #0]
   12392:	441a      	add	r2, r3
   12394:	600a      	str	r2, [r1, #0]
}
   12396:	3800      	subs	r0, #0
   12398:	bf18      	it	ne
   1239a:	2001      	movne	r0, #1
   1239c:	4770      	bx	lr

0001239e <nrfx_usbd_feeder_ram_zlp>:
    size_t tx_size = p_transfer->size;
   1239e:	684b      	ldr	r3, [r1, #4]
    if (tx_size > ep_size)
   123a0:	4293      	cmp	r3, r2
   123a2:	d800      	bhi.n	123a6 <nrfx_usbd_feeder_ram_zlp+0x8>
    size_t tx_size = p_transfer->size;
   123a4:	461a      	mov	r2, r3
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   123a6:	b162      	cbz	r2, 123c2 <nrfx_usbd_feeder_ram_zlp+0x24>
   123a8:	680b      	ldr	r3, [r1, #0]
   123aa:	6003      	str	r3, [r0, #0]
    p_next->size = tx_size;
   123ac:	6042      	str	r2, [r0, #4]
    p_transfer->size -= tx_size;
   123ae:	684b      	ldr	r3, [r1, #4]
   123b0:	1a9b      	subs	r3, r3, r2
   123b2:	604b      	str	r3, [r1, #4]
    p_transfer->p_data.addr += tx_size;
   123b4:	680b      	ldr	r3, [r1, #0]
   123b6:	4413      	add	r3, r2
   123b8:	600b      	str	r3, [r1, #0]
}
   123ba:	1e10      	subs	r0, r2, #0
   123bc:	bf18      	it	ne
   123be:	2001      	movne	r0, #1
   123c0:	4770      	bx	lr
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
   123c2:	2300      	movs	r3, #0
   123c4:	e7f1      	b.n	123aa <nrfx_usbd_feeder_ram_zlp+0xc>

000123c6 <ev_started_handler>:
}
   123c6:	4770      	bx	lr

000123c8 <usbd_dma_scheduler_algorithm>:
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
   123c8:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
   123cc:	b110      	cbz	r0, 123d4 <usbd_dma_scheduler_algorithm+0xc>
  return __builtin_clz(value);
   123ce:	fab0 f080 	clz	r0, r0
   123d2:	4770      	bx	lr
    return 32U;
   123d4:	2020      	movs	r0, #32
}
   123d6:	4770      	bx	lr

000123d8 <nrfx_usbd_feeder_flash>:
{
   123d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   123dc:	4606      	mov	r6, r0
   123de:	460c      	mov	r4, r1
   123e0:	4615      	mov	r5, r2
    size_t tx_size  = p_transfer->size;
   123e2:	f8d1 8004 	ldr.w	r8, [r1, #4]
    void * p_buffer = nrfx_usbd_feeder_buffer_get();
   123e6:	f7f7 fba3 	bl	9b30 <nrfx_usbd_feeder_buffer_get>
   123ea:	4607      	mov	r7, r0
    if (tx_size > ep_size)
   123ec:	45a8      	cmp	r8, r5
   123ee:	d800      	bhi.n	123f2 <nrfx_usbd_feeder_flash+0x1a>
    size_t tx_size  = p_transfer->size;
   123f0:	4645      	mov	r5, r8
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   123f2:	462a      	mov	r2, r5
   123f4:	6821      	ldr	r1, [r4, #0]
   123f6:	4638      	mov	r0, r7
   123f8:	f7fe fef8 	bl	111ec <memcpy>
    p_next->p_data.tx = p_buffer;
   123fc:	6037      	str	r7, [r6, #0]
    p_next->size = tx_size;
   123fe:	6075      	str	r5, [r6, #4]
    p_transfer->size -= tx_size;
   12400:	6860      	ldr	r0, [r4, #4]
   12402:	1b40      	subs	r0, r0, r5
   12404:	6060      	str	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
   12406:	6822      	ldr	r2, [r4, #0]
   12408:	442a      	add	r2, r5
   1240a:	6022      	str	r2, [r4, #0]
}
   1240c:	3800      	subs	r0, #0
   1240e:	bf18      	it	ne
   12410:	2001      	movne	r0, #1
   12412:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00012416 <nrfx_usbd_feeder_flash_zlp>:
{
   12416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1241a:	4606      	mov	r6, r0
   1241c:	460d      	mov	r5, r1
   1241e:	4614      	mov	r4, r2
    size_t tx_size  = p_transfer->size;
   12420:	f8d1 8004 	ldr.w	r8, [r1, #4]
    void * p_buffer = nrfx_usbd_feeder_buffer_get();
   12424:	f7f7 fb84 	bl	9b30 <nrfx_usbd_feeder_buffer_get>
   12428:	4607      	mov	r7, r0
    if (tx_size > ep_size)
   1242a:	45a0      	cmp	r8, r4
   1242c:	d800      	bhi.n	12430 <nrfx_usbd_feeder_flash_zlp+0x1a>
    size_t tx_size  = p_transfer->size;
   1242e:	4644      	mov	r4, r8
    if (tx_size != 0)
   12430:	b96c      	cbnz	r4, 1244e <nrfx_usbd_feeder_flash_zlp+0x38>
        p_next->p_data.tx = NULL;
   12432:	2300      	movs	r3, #0
   12434:	6033      	str	r3, [r6, #0]
    p_next->size = tx_size;
   12436:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
   12438:	686b      	ldr	r3, [r5, #4]
   1243a:	1b1b      	subs	r3, r3, r4
   1243c:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
   1243e:	682b      	ldr	r3, [r5, #0]
   12440:	4423      	add	r3, r4
   12442:	602b      	str	r3, [r5, #0]
}
   12444:	1e20      	subs	r0, r4, #0
   12446:	bf18      	it	ne
   12448:	2001      	movne	r0, #1
   1244a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
   1244e:	4622      	mov	r2, r4
   12450:	6829      	ldr	r1, [r5, #0]
   12452:	4638      	mov	r0, r7
   12454:	f7fe feca 	bl	111ec <memcpy>
        p_next->p_data.tx = p_buffer;
   12458:	6037      	str	r7, [r6, #0]
   1245a:	e7ec      	b.n	12436 <nrfx_usbd_feeder_flash_zlp+0x20>

0001245c <lfs_bd_erase>:
static int lfs_bd_erase(lfs_t *lfs, lfs_block_t block) {
   1245c:	b508      	push	{r3, lr}
    int err = lfs->cfg->erase(lfs->cfg, block);
   1245e:	6e80      	ldr	r0, [r0, #104]	; 0x68
   12460:	68c3      	ldr	r3, [r0, #12]
   12462:	4798      	blx	r3
}
   12464:	bd08      	pop	{r3, pc}

00012466 <lfs_alloc_lookahead>:
    lfs_block_t off = ((block - lfs->free.off)
   12466:	6d43      	ldr	r3, [r0, #84]	; 0x54
   12468:	1ac9      	subs	r1, r1, r3
            + lfs->cfg->block_count) % lfs->cfg->block_count;
   1246a:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1246c:	6a1a      	ldr	r2, [r3, #32]
   1246e:	4411      	add	r1, r2
    lfs_block_t off = ((block - lfs->free.off)
   12470:	fbb1 f3f2 	udiv	r3, r1, r2
   12474:	fb02 1113 	mls	r1, r2, r3, r1
    if (off < lfs->free.size) {
   12478:	6d83      	ldr	r3, [r0, #88]	; 0x58
   1247a:	428b      	cmp	r3, r1
   1247c:	d90b      	bls.n	12496 <lfs_alloc_lookahead+0x30>
        lfs->free.buffer[off / 32] |= 1U << (off % 32);
   1247e:	6e42      	ldr	r2, [r0, #100]	; 0x64
   12480:	0948      	lsrs	r0, r1, #5
   12482:	f001 011f 	and.w	r1, r1, #31
   12486:	2301      	movs	r3, #1
   12488:	fa03 f101 	lsl.w	r1, r3, r1
   1248c:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   12490:	430b      	orrs	r3, r1
   12492:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
}
   12496:	2000      	movs	r0, #0
   12498:	4770      	bx	lr

0001249a <lfs_alloc_ack>:
    lfs->free.ack = lfs->cfg->block_count;
   1249a:	6e83      	ldr	r3, [r0, #104]	; 0x68
   1249c:	6a1b      	ldr	r3, [r3, #32]
   1249e:	6603      	str	r3, [r0, #96]	; 0x60
}
   124a0:	4770      	bx	lr

000124a2 <lfs_alloc_reset>:
static void lfs_alloc_reset(lfs_t *lfs) {
   124a2:	b510      	push	{r4, lr}
    lfs->free.off = lfs->seed % lfs->cfg->block_size;
   124a4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
   124a6:	6e82      	ldr	r2, [r0, #104]	; 0x68
   124a8:	69d1      	ldr	r1, [r2, #28]
   124aa:	fbb4 f2f1 	udiv	r2, r4, r1
   124ae:	fb01 4212 	mls	r2, r1, r2, r4
   124b2:	6542      	str	r2, [r0, #84]	; 0x54
    lfs->free.size = 0;
   124b4:	2200      	movs	r2, #0
   124b6:	6582      	str	r2, [r0, #88]	; 0x58
    lfs->free.i = 0;
   124b8:	65c2      	str	r2, [r0, #92]	; 0x5c
    lfs_alloc_ack(lfs);
   124ba:	f7ff ffee 	bl	1249a <lfs_alloc_ack>
}
   124be:	bd10      	pop	{r4, pc}

000124c0 <lfs_dir_commit_size>:
    return ((int32_t)(tag << 22) >> 22) == -1;
   124c0:	f341 0309 	sbfx	r3, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
   124c4:	f1b3 3fff 	cmp.w	r3, #4294967295
   124c8:	bf08      	it	eq
   124ca:	3101      	addeq	r1, #1
    return tag & 0x000003ff;
   124cc:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
   124d0:	3104      	adds	r1, #4
    *size += lfs_tag_dsize(tag);
   124d2:	6803      	ldr	r3, [r0, #0]
   124d4:	4419      	add	r1, r3
   124d6:	6001      	str	r1, [r0, #0]
}
   124d8:	2000      	movs	r0, #0
   124da:	4770      	bx	lr

000124dc <lfs_fs_preporphans>:
    lfs->gstate.tag += orphans;
   124dc:	6b03      	ldr	r3, [r0, #48]	; 0x30
   124de:	4419      	add	r1, r3
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
   124e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
    return tag & 0x000003ff;
   124e4:	f3c1 0109 	ubfx	r1, r1, #0, #10
    return lfs_tag_size(a->tag);
   124e8:	3900      	subs	r1, #0
   124ea:	bf18      	it	ne
   124ec:	2101      	movne	r1, #1
    lfs->gstate.tag = ((lfs->gstate.tag & ~LFS_MKTAG(0x800, 0, 0)) |
   124ee:	ea43 71c1 	orr.w	r1, r3, r1, lsl #31
   124f2:	6301      	str	r1, [r0, #48]	; 0x30
}
   124f4:	4770      	bx	lr

000124f6 <lfs_fs_size_count>:
    *size += 1;
   124f6:	6803      	ldr	r3, [r0, #0]
   124f8:	3301      	adds	r3, #1
   124fa:	6003      	str	r3, [r0, #0]
}
   124fc:	2000      	movs	r0, #0
   124fe:	4770      	bx	lr

00012500 <lfs_bd_read>:
        void *buffer, lfs_size_t size) {
   12500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12504:	b087      	sub	sp, #28
   12506:	4615      	mov	r5, r2
   12508:	469a      	mov	sl, r3
   1250a:	9e10      	ldr	r6, [sp, #64]	; 0x40
   1250c:	9c11      	ldr	r4, [sp, #68]	; 0x44
   1250e:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
    if (block >= lfs->cfg->block_count ||
   12512:	6e82      	ldr	r2, [r0, #104]	; 0x68
   12514:	6a13      	ldr	r3, [r2, #32]
   12516:	42b3      	cmp	r3, r6
   12518:	f240 80b8 	bls.w	1268c <lfs_bd_read+0x18c>
   1251c:	4689      	mov	r9, r1
            off+size > lfs->cfg->block_size) {
   1251e:	eb04 030b 	add.w	r3, r4, fp
   12522:	69d2      	ldr	r2, [r2, #28]
    if (block >= lfs->cfg->block_count ||
   12524:	4293      	cmp	r3, r2
   12526:	f200 80b4 	bhi.w	12692 <lfs_bd_read+0x192>
   1252a:	9003      	str	r0, [sp, #12]
   1252c:	e07a      	b.n	12624 <lfs_bd_read+0x124>
                off < pcache->off + pcache->size) {
   1252e:	f8d9 3004 	ldr.w	r3, [r9, #4]
   12532:	f8d9 2008 	ldr.w	r2, [r9, #8]
   12536:	1899      	adds	r1, r3, r2
        if (pcache && block == pcache->block &&
   12538:	42a1      	cmp	r1, r4
   1253a:	d91e      	bls.n	1257a <lfs_bd_read+0x7a>
            if (off >= pcache->off) {
   1253c:	42a3      	cmp	r3, r4
   1253e:	d905      	bls.n	1254c <lfs_bd_read+0x4c>
            diff = lfs_min(diff, pcache->off-off);
   12540:	1b1b      	subs	r3, r3, r4
   12542:	455b      	cmp	r3, fp
   12544:	bf28      	it	cs
   12546:	465b      	movcs	r3, fp
   12548:	4698      	mov	r8, r3
   1254a:	e077      	b.n	1263c <lfs_bd_read+0x13c>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
   1254c:	eba3 0804 	sub.w	r8, r3, r4
   12550:	4490      	add	r8, r2
   12552:	45d8      	cmp	r8, fp
   12554:	bf28      	it	cs
   12556:	46d8      	movcs	r8, fp
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
   12558:	f8d9 100c 	ldr.w	r1, [r9, #12]
   1255c:	1ae3      	subs	r3, r4, r3
   1255e:	4642      	mov	r2, r8
   12560:	4419      	add	r1, r3
   12562:	9812      	ldr	r0, [sp, #72]	; 0x48
   12564:	f7fe fe42 	bl	111ec <memcpy>
                data += diff;
   12568:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1256a:	4443      	add	r3, r8
   1256c:	9312      	str	r3, [sp, #72]	; 0x48
                off += diff;
   1256e:	4444      	add	r4, r8
                size -= diff;
   12570:	ebab 0b08 	sub.w	fp, fp, r8
                continue;
   12574:	e056      	b.n	12624 <lfs_bd_read+0x124>
        lfs_size_t diff = size;
   12576:	46d8      	mov	r8, fp
   12578:	e060      	b.n	1263c <lfs_bd_read+0x13c>
   1257a:	46d8      	mov	r8, fp
   1257c:	e05e      	b.n	1263c <lfs_bd_read+0x13c>
                off < rcache->off + rcache->size) {
   1257e:	686b      	ldr	r3, [r5, #4]
   12580:	68aa      	ldr	r2, [r5, #8]
   12582:	1899      	adds	r1, r3, r2
        if (block == rcache->block &&
   12584:	42a1      	cmp	r1, r4
   12586:	d95c      	bls.n	12642 <lfs_bd_read+0x142>
            if (off >= rcache->off) {
   12588:	42a3      	cmp	r3, r4
   1258a:	d904      	bls.n	12596 <lfs_bd_read+0x96>
            diff = lfs_min(diff, rcache->off-off);
   1258c:	1b1b      	subs	r3, r3, r4
   1258e:	4598      	cmp	r8, r3
   12590:	bf28      	it	cs
   12592:	4698      	movcs	r8, r3
   12594:	e055      	b.n	12642 <lfs_bd_read+0x142>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
   12596:	1b19      	subs	r1, r3, r4
   12598:	440a      	add	r2, r1
   1259a:	4590      	cmp	r8, r2
   1259c:	bf28      	it	cs
   1259e:	4690      	movcs	r8, r2
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
   125a0:	68e9      	ldr	r1, [r5, #12]
   125a2:	1ae3      	subs	r3, r4, r3
   125a4:	4642      	mov	r2, r8
   125a6:	4419      	add	r1, r3
   125a8:	9812      	ldr	r0, [sp, #72]	; 0x48
   125aa:	f7fe fe1f 	bl	111ec <memcpy>
                data += diff;
   125ae:	9b12      	ldr	r3, [sp, #72]	; 0x48
   125b0:	4443      	add	r3, r8
   125b2:	9312      	str	r3, [sp, #72]	; 0x48
                off += diff;
   125b4:	4444      	add	r4, r8
                size -= diff;
   125b6:	ebab 0b08 	sub.w	fp, fp, r8
                continue;
   125ba:	e033      	b.n	12624 <lfs_bd_read+0x124>
            data += diff;
   125bc:	9912      	ldr	r1, [sp, #72]	; 0x48
   125be:	9b04      	ldr	r3, [sp, #16]
   125c0:	4419      	add	r1, r3
   125c2:	9112      	str	r1, [sp, #72]	; 0x48
            off += diff;
   125c4:	441c      	add	r4, r3
            size -= diff;
   125c6:	9a05      	ldr	r2, [sp, #20]
   125c8:	eba2 0308 	sub.w	r3, r2, r8
   125cc:	449b      	add	fp, r3
            continue;
   125ce:	e029      	b.n	12624 <lfs_bd_read+0x124>
        rcache->block = block;
   125d0:	602e      	str	r6, [r5, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
   125d2:	9f03      	ldr	r7, [sp, #12]
   125d4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   125d6:	695b      	ldr	r3, [r3, #20]
    return a - (a % alignment);
   125d8:	fbb4 f2f3 	udiv	r2, r4, r3
   125dc:	fb03 4212 	mls	r2, r3, r2, r4
   125e0:	1aa2      	subs	r2, r4, r2
   125e2:	606a      	str	r2, [r5, #4]
                lfs_min(
   125e4:	eb04 030a 	add.w	r3, r4, sl
                    lfs_alignup(off+hint, lfs->cfg->read_size),
   125e8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
                lfs_min(
   125ea:	6948      	ldr	r0, [r1, #20]
    return lfs_aligndown(a + alignment-1, alignment);
   125ec:	4403      	add	r3, r0
   125ee:	3b01      	subs	r3, #1
    return a - (a % alignment);
   125f0:	fbb3 fcf0 	udiv	ip, r3, r0
   125f4:	fb00 301c 	mls	r0, r0, ip, r3
   125f8:	1a1b      	subs	r3, r3, r0
   125fa:	69c8      	ldr	r0, [r1, #28]
        rcache->size = lfs_min(
   125fc:	4298      	cmp	r0, r3
   125fe:	bf94      	ite	ls
   12600:	ebc2 0300 	rsbls	r3, r2, r0
   12604:	ebc2 0303 	rsbhi	r3, r2, r3
   12608:	6a89      	ldr	r1, [r1, #40]	; 0x28
    return (a < b) ? a : b;
   1260a:	428b      	cmp	r3, r1
   1260c:	bf28      	it	cs
   1260e:	460b      	movcs	r3, r1
   12610:	60ab      	str	r3, [r5, #8]
        int err = lfs->cfg->read(lfs->cfg, rcache->block,
   12612:	6eb8      	ldr	r0, [r7, #104]	; 0x68
   12614:	f8d0 8004 	ldr.w	r8, [r0, #4]
   12618:	9300      	str	r3, [sp, #0]
   1261a:	68eb      	ldr	r3, [r5, #12]
   1261c:	4631      	mov	r1, r6
   1261e:	47c0      	blx	r8
        if (err) {
   12620:	4603      	mov	r3, r0
   12622:	bb68      	cbnz	r0, 12680 <lfs_bd_read+0x180>
    while (size > 0) {
   12624:	f1bb 0f00 	cmp.w	fp, #0
   12628:	d02e      	beq.n	12688 <lfs_bd_read+0x188>
        if (pcache && block == pcache->block &&
   1262a:	f1b9 0f00 	cmp.w	r9, #0
   1262e:	d0a2      	beq.n	12576 <lfs_bd_read+0x76>
   12630:	f8d9 3000 	ldr.w	r3, [r9]
   12634:	42b3      	cmp	r3, r6
   12636:	f43f af7a 	beq.w	1252e <lfs_bd_read+0x2e>
        lfs_size_t diff = size;
   1263a:	46d8      	mov	r8, fp
        if (block == rcache->block &&
   1263c:	682b      	ldr	r3, [r5, #0]
   1263e:	42b3      	cmp	r3, r6
   12640:	d09d      	beq.n	1257e <lfs_bd_read+0x7e>
        if (size >= hint && off % lfs->cfg->read_size == 0 &&
   12642:	45d3      	cmp	fp, sl
   12644:	d3c4      	bcc.n	125d0 <lfs_bd_read+0xd0>
   12646:	9b03      	ldr	r3, [sp, #12]
   12648:	6e98      	ldr	r0, [r3, #104]	; 0x68
   1264a:	6942      	ldr	r2, [r0, #20]
   1264c:	fbb4 f3f2 	udiv	r3, r4, r2
   12650:	fb02 4313 	mls	r3, r2, r3, r4
   12654:	2b00      	cmp	r3, #0
   12656:	d1bb      	bne.n	125d0 <lfs_bd_read+0xd0>
   12658:	455a      	cmp	r2, fp
   1265a:	d8b9      	bhi.n	125d0 <lfs_bd_read+0xd0>
    return a - (a % alignment);
   1265c:	fbb8 f3f2 	udiv	r3, r8, r2
   12660:	fb02 8313 	mls	r3, r2, r3, r8
   12664:	9305      	str	r3, [sp, #20]
   12666:	eba8 0303 	sub.w	r3, r8, r3
            int err = lfs->cfg->read(lfs->cfg, block, off, data, diff);
   1266a:	6841      	ldr	r1, [r0, #4]
   1266c:	460f      	mov	r7, r1
   1266e:	9304      	str	r3, [sp, #16]
   12670:	9300      	str	r3, [sp, #0]
   12672:	9b12      	ldr	r3, [sp, #72]	; 0x48
   12674:	4622      	mov	r2, r4
   12676:	4631      	mov	r1, r6
   12678:	47b8      	blx	r7
            if (err) {
   1267a:	4603      	mov	r3, r0
   1267c:	2800      	cmp	r0, #0
   1267e:	d09d      	beq.n	125bc <lfs_bd_read+0xbc>
}
   12680:	4618      	mov	r0, r3
   12682:	b007      	add	sp, #28
   12684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return 0;
   12688:	2300      	movs	r3, #0
   1268a:	e7f9      	b.n	12680 <lfs_bd_read+0x180>
        return LFS_ERR_CORRUPT;
   1268c:	f06f 0353 	mvn.w	r3, #83	; 0x53
   12690:	e7f6      	b.n	12680 <lfs_bd_read+0x180>
   12692:	f06f 0353 	mvn.w	r3, #83	; 0x53
   12696:	e7f3      	b.n	12680 <lfs_bd_read+0x180>

00012698 <lfs_fs_parent_match>:
        lfs_tag_t tag, const void *buffer) {
   12698:	b530      	push	{r4, r5, lr}
   1269a:	b087      	sub	sp, #28
   1269c:	4604      	mov	r4, r0
    lfs_t *lfs = find->lfs;
   1269e:	6800      	ldr	r0, [r0, #0]
            &lfs->pcache, &lfs->rcache, lfs->cfg->block_size,
   126a0:	6e83      	ldr	r3, [r0, #104]	; 0x68
    int err = lfs_bd_read(lfs,
   126a2:	69db      	ldr	r3, [r3, #28]
   126a4:	2108      	movs	r1, #8
   126a6:	9103      	str	r1, [sp, #12]
   126a8:	a904      	add	r1, sp, #16
   126aa:	9102      	str	r1, [sp, #8]
   126ac:	6851      	ldr	r1, [r2, #4]
   126ae:	9101      	str	r1, [sp, #4]
   126b0:	6812      	ldr	r2, [r2, #0]
   126b2:	9200      	str	r2, [sp, #0]
   126b4:	4602      	mov	r2, r0
   126b6:	f100 0110 	add.w	r1, r0, #16
   126ba:	f7ff ff21 	bl	12500 <lfs_bd_read>
    if (err) {
   126be:	4603      	mov	r3, r0
   126c0:	b978      	cbnz	r0, 126e2 <lfs_fs_parent_match+0x4a>
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   126c2:	9a04      	ldr	r2, [sp, #16]
   126c4:	6861      	ldr	r1, [r4, #4]
   126c6:	4291      	cmp	r1, r2
   126c8:	d008      	beq.n	126dc <lfs_fs_parent_match+0x44>
   126ca:	9d05      	ldr	r5, [sp, #20]
   126cc:	68a0      	ldr	r0, [r4, #8]
   126ce:	4285      	cmp	r5, r0
   126d0:	d004      	beq.n	126dc <lfs_fs_parent_match+0x44>
   126d2:	4282      	cmp	r2, r0
   126d4:	d002      	beq.n	126dc <lfs_fs_parent_match+0x44>
   126d6:	42a9      	cmp	r1, r5
   126d8:	d000      	beq.n	126dc <lfs_fs_parent_match+0x44>
   126da:	2301      	movs	r3, #1
    return (lfs_pair_cmp(child, find->pair) == 0) ? LFS_CMP_EQ : LFS_CMP_LT;
   126dc:	3b00      	subs	r3, #0
   126de:	bf18      	it	ne
   126e0:	2301      	movne	r3, #1
}
   126e2:	4618      	mov	r0, r3
   126e4:	b007      	add	sp, #28
   126e6:	bd30      	pop	{r4, r5, pc}

000126e8 <lfs_bd_cmp>:
        const void *buffer, lfs_size_t size) {
   126e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126ec:	b087      	sub	sp, #28
   126ee:	4607      	mov	r7, r0
   126f0:	460e      	mov	r6, r1
   126f2:	4692      	mov	sl, r2
   126f4:	461d      	mov	r5, r3
   126f6:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
   126fa:	f8dd b048 	ldr.w	fp, [sp, #72]	; 0x48
   126fe:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
    for (lfs_off_t i = 0; i < size; i++) {
   12702:	2400      	movs	r4, #0
   12704:	e002      	b.n	1270c <lfs_bd_cmp+0x24>
            return (dat < data[i]) ? LFS_CMP_LT : LFS_CMP_GT;
   12706:	2302      	movs	r3, #2
   12708:	e01e      	b.n	12748 <lfs_bd_cmp+0x60>
    for (lfs_off_t i = 0; i < size; i++) {
   1270a:	3401      	adds	r4, #1
   1270c:	4544      	cmp	r4, r8
   1270e:	d21a      	bcs.n	12746 <lfs_bd_cmp+0x5e>
        int err = lfs_bd_read(lfs,
   12710:	2301      	movs	r3, #1
   12712:	9303      	str	r3, [sp, #12]
   12714:	f10d 0317 	add.w	r3, sp, #23
   12718:	9302      	str	r3, [sp, #8]
   1271a:	eb04 0309 	add.w	r3, r4, r9
   1271e:	9301      	str	r3, [sp, #4]
   12720:	9b10      	ldr	r3, [sp, #64]	; 0x40
   12722:	9300      	str	r3, [sp, #0]
   12724:	1b2b      	subs	r3, r5, r4
   12726:	4652      	mov	r2, sl
   12728:	4631      	mov	r1, r6
   1272a:	4638      	mov	r0, r7
   1272c:	f7ff fee8 	bl	12500 <lfs_bd_read>
        if (err) {
   12730:	4603      	mov	r3, r0
   12732:	b948      	cbnz	r0, 12748 <lfs_bd_cmp+0x60>
        if (dat != data[i]) {
   12734:	f81b 2004 	ldrb.w	r2, [fp, r4]
   12738:	f89d 3017 	ldrb.w	r3, [sp, #23]
   1273c:	429a      	cmp	r2, r3
   1273e:	d0e4      	beq.n	1270a <lfs_bd_cmp+0x22>
            return (dat < data[i]) ? LFS_CMP_LT : LFS_CMP_GT;
   12740:	d9e1      	bls.n	12706 <lfs_bd_cmp+0x1e>
   12742:	2301      	movs	r3, #1
   12744:	e000      	b.n	12748 <lfs_bd_cmp+0x60>
    return LFS_CMP_EQ;
   12746:	2300      	movs	r3, #0
}
   12748:	4618      	mov	r0, r3
   1274a:	b007      	add	sp, #28
   1274c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012750 <lfs_dir_find_match>:
        lfs_tag_t tag, const void *buffer) {
   12750:	b570      	push	{r4, r5, r6, lr}
   12752:	b084      	sub	sp, #16
   12754:	4604      	mov	r4, r0
   12756:	4615      	mov	r5, r2
    lfs_t *lfs = name->lfs;
   12758:	6800      	ldr	r0, [r0, #0]
    lfs_size_t diff = lfs_min(name->size, lfs_tag_size(tag));
   1275a:	68a3      	ldr	r3, [r4, #8]
    return tag & 0x000003ff;
   1275c:	f3c1 0609 	ubfx	r6, r1, #0, #10
    return (a < b) ? a : b;
   12760:	42b3      	cmp	r3, r6
   12762:	bf28      	it	cs
   12764:	4633      	movcs	r3, r6
    int res = lfs_bd_cmp(lfs,
   12766:	9303      	str	r3, [sp, #12]
   12768:	6862      	ldr	r2, [r4, #4]
   1276a:	9202      	str	r2, [sp, #8]
   1276c:	686a      	ldr	r2, [r5, #4]
   1276e:	9201      	str	r2, [sp, #4]
   12770:	682a      	ldr	r2, [r5, #0]
   12772:	9200      	str	r2, [sp, #0]
   12774:	4602      	mov	r2, r0
   12776:	2100      	movs	r1, #0
   12778:	f7ff ffb6 	bl	126e8 <lfs_bd_cmp>
    if (res != LFS_CMP_EQ) {
   1277c:	b920      	cbnz	r0, 12788 <lfs_dir_find_match+0x38>
    if (name->size != lfs_tag_size(tag)) {
   1277e:	68a3      	ldr	r3, [r4, #8]
   12780:	42b3      	cmp	r3, r6
   12782:	d001      	beq.n	12788 <lfs_dir_find_match+0x38>
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
   12784:	d202      	bcs.n	1278c <lfs_dir_find_match+0x3c>
   12786:	2001      	movs	r0, #1
}
   12788:	b004      	add	sp, #16
   1278a:	bd70      	pop	{r4, r5, r6, pc}
        return (name->size < lfs_tag_size(tag)) ? LFS_CMP_LT : LFS_CMP_GT;
   1278c:	2002      	movs	r0, #2
   1278e:	e7fb      	b.n	12788 <lfs_dir_find_match+0x38>

00012790 <lfs_dir_fetch>:
        lfs_mdir_t *dir, const lfs_block_t pair[2]) {
   12790:	b500      	push	{lr}
   12792:	b085      	sub	sp, #20
    return (int)lfs_dir_fetchmatch(lfs, dir, pair,
   12794:	2300      	movs	r3, #0
   12796:	9303      	str	r3, [sp, #12]
   12798:	9302      	str	r3, [sp, #8]
   1279a:	9301      	str	r3, [sp, #4]
   1279c:	f04f 33ff 	mov.w	r3, #4294967295
   127a0:	9300      	str	r3, [sp, #0]
   127a2:	f7f8 fa87 	bl	acb4 <lfs_dir_fetchmatch>
}
   127a6:	b005      	add	sp, #20
   127a8:	f85d fb04 	ldr.w	pc, [sp], #4

000127ac <lfs_fs_pred>:
        const lfs_block_t pair[2], lfs_mdir_t *pdir) {
   127ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   127ae:	4607      	mov	r7, r0
   127b0:	460e      	mov	r6, r1
   127b2:	4614      	mov	r4, r2
    pdir->tail[0] = 0;
   127b4:	2500      	movs	r5, #0
   127b6:	6195      	str	r5, [r2, #24]
    pdir->tail[1] = 1;
   127b8:	2301      	movs	r3, #1
   127ba:	61d3      	str	r3, [r2, #28]
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
   127bc:	69a3      	ldr	r3, [r4, #24]
   127be:	f1b3 3fff 	cmp.w	r3, #4294967295
   127c2:	d021      	beq.n	12808 <lfs_fs_pred+0x5c>
   127c4:	69e2      	ldr	r2, [r4, #28]
   127c6:	f1b2 3fff 	cmp.w	r2, #4294967295
   127ca:	d01b      	beq.n	12804 <lfs_fs_pred+0x58>
   127cc:	2200      	movs	r2, #0
    while (!lfs_pair_isnull(pdir->tail)) {
   127ce:	b9ea      	cbnz	r2, 1280c <lfs_fs_pred+0x60>
        if (cycle >= lfs->cfg->block_count/2) {
   127d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
   127d2:	6a12      	ldr	r2, [r2, #32]
   127d4:	ebb5 0f52 	cmp.w	r5, r2, lsr #1
   127d8:	d21b      	bcs.n	12812 <lfs_fs_pred+0x66>
        cycle += 1;
   127da:	3501      	adds	r5, #1
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   127dc:	6832      	ldr	r2, [r6, #0]
   127de:	429a      	cmp	r2, r3
   127e0:	d01a      	beq.n	12818 <lfs_fs_pred+0x6c>
   127e2:	69e0      	ldr	r0, [r4, #28]
   127e4:	6871      	ldr	r1, [r6, #4]
   127e6:	4288      	cmp	r0, r1
   127e8:	d018      	beq.n	1281c <lfs_fs_pred+0x70>
   127ea:	4299      	cmp	r1, r3
   127ec:	d018      	beq.n	12820 <lfs_fs_pred+0x74>
   127ee:	4282      	cmp	r2, r0
   127f0:	d018      	beq.n	12824 <lfs_fs_pred+0x78>
        int err = lfs_dir_fetch(lfs, pdir, pdir->tail);
   127f2:	f104 0218 	add.w	r2, r4, #24
   127f6:	4621      	mov	r1, r4
   127f8:	4638      	mov	r0, r7
   127fa:	f7ff ffc9 	bl	12790 <lfs_dir_fetch>
        if (err) {
   127fe:	2800      	cmp	r0, #0
   12800:	d0dc      	beq.n	127bc <lfs_fs_pred+0x10>
   12802:	e00a      	b.n	1281a <lfs_fs_pred+0x6e>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
   12804:	2201      	movs	r2, #1
   12806:	e7e2      	b.n	127ce <lfs_fs_pred+0x22>
   12808:	2201      	movs	r2, #1
   1280a:	e7e0      	b.n	127ce <lfs_fs_pred+0x22>
    return LFS_ERR_NOENT;
   1280c:	f06f 0001 	mvn.w	r0, #1
   12810:	e003      	b.n	1281a <lfs_fs_pred+0x6e>
            return LFS_ERR_CORRUPT;
   12812:	f06f 0053 	mvn.w	r0, #83	; 0x53
   12816:	e000      	b.n	1281a <lfs_fs_pred+0x6e>
            return 0;
   12818:	2000      	movs	r0, #0
}
   1281a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return 0;
   1281c:	2000      	movs	r0, #0
   1281e:	e7fc      	b.n	1281a <lfs_fs_pred+0x6e>
   12820:	2000      	movs	r0, #0
   12822:	e7fa      	b.n	1281a <lfs_fs_pred+0x6e>
   12824:	2000      	movs	r0, #0
   12826:	e7f8      	b.n	1281a <lfs_fs_pred+0x6e>

00012828 <lfs_dir_get>:
        lfs_tag_t gmask, lfs_tag_t gtag, void *buffer) {
   12828:	b510      	push	{r4, lr}
   1282a:	b084      	sub	sp, #16
    return tag & 0x000003ff;
   1282c:	f3c3 0409 	ubfx	r4, r3, #0, #10
    return lfs_dir_getslice(lfs, dir,
   12830:	9402      	str	r4, [sp, #8]
   12832:	9c06      	ldr	r4, [sp, #24]
   12834:	9401      	str	r4, [sp, #4]
   12836:	2400      	movs	r4, #0
   12838:	9400      	str	r4, [sp, #0]
   1283a:	f7f8 fe19 	bl	b470 <lfs_dir_getslice>
}
   1283e:	b004      	add	sp, #16
   12840:	bd10      	pop	{r4, pc}

00012842 <lfs_dir_getread>:
        lfs_off_t off, void *buffer, lfs_size_t size) {
   12842:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12846:	b085      	sub	sp, #20
   12848:	4606      	mov	r6, r0
   1284a:	468a      	mov	sl, r1
   1284c:	4617      	mov	r7, r2
   1284e:	461c      	mov	r4, r3
   12850:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   12854:	9d11      	ldr	r5, [sp, #68]	; 0x44
   12856:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
    if (off+size > lfs->cfg->block_size) {
   1285a:	eb05 0208 	add.w	r2, r5, r8
   1285e:	6e83      	ldr	r3, [r0, #104]	; 0x68
   12860:	69db      	ldr	r3, [r3, #28]
   12862:	429a      	cmp	r2, r3
   12864:	d94e      	bls.n	12904 <lfs_dir_getread+0xc2>
        return LFS_ERR_CORRUPT;
   12866:	f06f 0053 	mvn.w	r0, #83	; 0x53
   1286a:	e075      	b.n	12958 <lfs_dir_getread+0x116>
                off < pcache->off + pcache->size) {
   1286c:	6879      	ldr	r1, [r7, #4]
   1286e:	68bb      	ldr	r3, [r7, #8]
   12870:	18ca      	adds	r2, r1, r3
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
   12872:	42aa      	cmp	r2, r5
   12874:	d91c      	bls.n	128b0 <lfs_dir_getread+0x6e>
            if (off >= pcache->off) {
   12876:	42a9      	cmp	r1, r5
   12878:	d904      	bls.n	12884 <lfs_dir_getread+0x42>
            diff = lfs_min(diff, pcache->off-off);
   1287a:	1b49      	subs	r1, r1, r5
   1287c:	4541      	cmp	r1, r8
   1287e:	bf28      	it	cs
   12880:	4641      	movcs	r1, r8
   12882:	e049      	b.n	12918 <lfs_dir_getread+0xd6>
                diff = lfs_min(diff, pcache->size - (off-pcache->off));
   12884:	eba1 0905 	sub.w	r9, r1, r5
   12888:	4499      	add	r9, r3
   1288a:	45c1      	cmp	r9, r8
   1288c:	bf28      	it	cs
   1288e:	46c1      	movcs	r9, r8
                memcpy(data, &pcache->buffer[off-pcache->off], diff);
   12890:	68fb      	ldr	r3, [r7, #12]
   12892:	1a69      	subs	r1, r5, r1
   12894:	464a      	mov	r2, r9
   12896:	4419      	add	r1, r3
   12898:	9812      	ldr	r0, [sp, #72]	; 0x48
   1289a:	f7fe fca7 	bl	111ec <memcpy>
                data += diff;
   1289e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   128a0:	444b      	add	r3, r9
   128a2:	9312      	str	r3, [sp, #72]	; 0x48
                off += diff;
   128a4:	444d      	add	r5, r9
                size -= diff;
   128a6:	eba8 0809 	sub.w	r8, r8, r9
                continue;
   128aa:	e02b      	b.n	12904 <lfs_dir_getread+0xc2>
        lfs_size_t diff = size;
   128ac:	4641      	mov	r1, r8
   128ae:	e033      	b.n	12918 <lfs_dir_getread+0xd6>
   128b0:	4641      	mov	r1, r8
   128b2:	e031      	b.n	12918 <lfs_dir_getread+0xd6>
        rcache->block = LFS_BLOCK_INLINE;
   128b4:	f06f 0301 	mvn.w	r3, #1
   128b8:	6023      	str	r3, [r4, #0]
        rcache->off = lfs_aligndown(off, lfs->cfg->read_size);
   128ba:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   128bc:	695b      	ldr	r3, [r3, #20]
    return a - (a % alignment);
   128be:	fbb5 f2f3 	udiv	r2, r5, r3
   128c2:	fb03 5212 	mls	r2, r3, r2, r5
   128c6:	1aaa      	subs	r2, r5, r2
   128c8:	6062      	str	r2, [r4, #4]
        rcache->size = lfs_min(lfs_alignup(off+hint, lfs->cfg->read_size),
   128ca:	eb05 030b 	add.w	r3, r5, fp
   128ce:	6eb0      	ldr	r0, [r6, #104]	; 0x68
   128d0:	f8d0 c014 	ldr.w	ip, [r0, #20]
    return lfs_aligndown(a + alignment-1, alignment);
   128d4:	4463      	add	r3, ip
   128d6:	3b01      	subs	r3, #1
    return a - (a % alignment);
   128d8:	fbb3 f1fc 	udiv	r1, r3, ip
   128dc:	fb0c 3111 	mls	r1, ip, r1, r3
   128e0:	1a5b      	subs	r3, r3, r1
   128e2:	6a81      	ldr	r1, [r0, #40]	; 0x28
    return (a < b) ? a : b;
   128e4:	428b      	cmp	r3, r1
   128e6:	bf28      	it	cs
   128e8:	460b      	movcs	r3, r1
   128ea:	60a3      	str	r3, [r4, #8]
                rcache->off, rcache->buffer, rcache->size);
   128ec:	68e1      	ldr	r1, [r4, #12]
        int err = lfs_dir_getslice(lfs, dir, gmask, gtag,
   128ee:	9302      	str	r3, [sp, #8]
   128f0:	9101      	str	r1, [sp, #4]
   128f2:	9200      	str	r2, [sp, #0]
   128f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   128f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   128f8:	4651      	mov	r1, sl
   128fa:	4630      	mov	r0, r6
   128fc:	f7f8 fdb8 	bl	b470 <lfs_dir_getslice>
        if (err < 0) {
   12900:	2800      	cmp	r0, #0
   12902:	db29      	blt.n	12958 <lfs_dir_getread+0x116>
    while (size > 0) {
   12904:	f1b8 0f00 	cmp.w	r8, #0
   12908:	d025      	beq.n	12956 <lfs_dir_getread+0x114>
        if (pcache && pcache->block == LFS_BLOCK_INLINE &&
   1290a:	2f00      	cmp	r7, #0
   1290c:	d0ce      	beq.n	128ac <lfs_dir_getread+0x6a>
   1290e:	683b      	ldr	r3, [r7, #0]
   12910:	f113 0f02 	cmn.w	r3, #2
   12914:	d0aa      	beq.n	1286c <lfs_dir_getread+0x2a>
        lfs_size_t diff = size;
   12916:	4641      	mov	r1, r8
        if (rcache->block == LFS_BLOCK_INLINE &&
   12918:	6823      	ldr	r3, [r4, #0]
   1291a:	f113 0f02 	cmn.w	r3, #2
   1291e:	d1c9      	bne.n	128b4 <lfs_dir_getread+0x72>
                off < rcache->off + rcache->size) {
   12920:	6863      	ldr	r3, [r4, #4]
   12922:	68a2      	ldr	r2, [r4, #8]
   12924:	1898      	adds	r0, r3, r2
        if (rcache->block == LFS_BLOCK_INLINE &&
   12926:	42a8      	cmp	r0, r5
   12928:	d9c4      	bls.n	128b4 <lfs_dir_getread+0x72>
            if (off >= rcache->off) {
   1292a:	42ab      	cmp	r3, r5
   1292c:	d8c2      	bhi.n	128b4 <lfs_dir_getread+0x72>
                diff = lfs_min(diff, rcache->size - (off-rcache->off));
   1292e:	eba3 0905 	sub.w	r9, r3, r5
   12932:	4491      	add	r9, r2
   12934:	4589      	cmp	r9, r1
   12936:	bf28      	it	cs
   12938:	4689      	movcs	r9, r1
                memcpy(data, &rcache->buffer[off-rcache->off], diff);
   1293a:	68e1      	ldr	r1, [r4, #12]
   1293c:	1aeb      	subs	r3, r5, r3
   1293e:	464a      	mov	r2, r9
   12940:	4419      	add	r1, r3
   12942:	9812      	ldr	r0, [sp, #72]	; 0x48
   12944:	f7fe fc52 	bl	111ec <memcpy>
                data += diff;
   12948:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1294a:	444b      	add	r3, r9
   1294c:	9312      	str	r3, [sp, #72]	; 0x48
                off += diff;
   1294e:	444d      	add	r5, r9
                size -= diff;
   12950:	eba8 0809 	sub.w	r8, r8, r9
                continue;
   12954:	e7d6      	b.n	12904 <lfs_dir_getread+0xc2>
    return 0;
   12956:	2000      	movs	r0, #0
}
   12958:	b005      	add	sp, #20
   1295a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0001295e <lfs_bd_flush>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
   1295e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12962:	b085      	sub	sp, #20
   12964:	460c      	mov	r4, r1
    if (pcache->block != LFS_BLOCK_NULL && pcache->block != LFS_BLOCK_INLINE) {
   12966:	6809      	ldr	r1, [r1, #0]
   12968:	f111 0f03 	cmn.w	r1, #3
   1296c:	d834      	bhi.n	129d8 <lfs_bd_flush+0x7a>
   1296e:	4606      	mov	r6, r0
   12970:	4617      	mov	r7, r2
   12972:	4698      	mov	r8, r3
        lfs_size_t diff = lfs_alignup(pcache->size, lfs->cfg->prog_size);
   12974:	68a5      	ldr	r5, [r4, #8]
   12976:	6e80      	ldr	r0, [r0, #104]	; 0x68
   12978:	6982      	ldr	r2, [r0, #24]
    return lfs_aligndown(a + alignment-1, alignment);
   1297a:	4415      	add	r5, r2
   1297c:	3d01      	subs	r5, #1
    return a - (a % alignment);
   1297e:	fbb5 f3f2 	udiv	r3, r5, r2
   12982:	fb02 5313 	mls	r3, r2, r3, r5
   12986:	1aed      	subs	r5, r5, r3
        int err = lfs->cfg->prog(lfs->cfg, pcache->block,
   12988:	f8d0 9008 	ldr.w	r9, [r0, #8]
   1298c:	9500      	str	r5, [sp, #0]
   1298e:	68e3      	ldr	r3, [r4, #12]
   12990:	6862      	ldr	r2, [r4, #4]
   12992:	47c8      	blx	r9
        if (err) {
   12994:	4681      	mov	r9, r0
   12996:	bb08      	cbnz	r0, 129dc <lfs_bd_flush+0x7e>
        if (validate) {
   12998:	f1b8 0f00 	cmp.w	r8, #0
   1299c:	d012      	beq.n	129c4 <lfs_bd_flush+0x66>
    rcache->block = LFS_BLOCK_NULL;
   1299e:	f04f 33ff 	mov.w	r3, #4294967295
   129a2:	603b      	str	r3, [r7, #0]
                    pcache->block, pcache->off, pcache->buffer, diff);
   129a4:	68e3      	ldr	r3, [r4, #12]
            int res = lfs_bd_cmp(lfs,
   129a6:	9503      	str	r5, [sp, #12]
   129a8:	9302      	str	r3, [sp, #8]
   129aa:	6863      	ldr	r3, [r4, #4]
   129ac:	9301      	str	r3, [sp, #4]
   129ae:	6823      	ldr	r3, [r4, #0]
   129b0:	9300      	str	r3, [sp, #0]
   129b2:	462b      	mov	r3, r5
   129b4:	463a      	mov	r2, r7
   129b6:	2100      	movs	r1, #0
   129b8:	4630      	mov	r0, r6
   129ba:	f7ff fe95 	bl	126e8 <lfs_bd_cmp>
            if (res < 0) {
   129be:	2800      	cmp	r0, #0
   129c0:	db10      	blt.n	129e4 <lfs_bd_flush+0x86>
            if (res != LFS_CMP_EQ) {
   129c2:	b988      	cbnz	r0, 129e8 <lfs_bd_flush+0x8a>
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
   129c4:	6eb3      	ldr	r3, [r6, #104]	; 0x68
   129c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   129c8:	21ff      	movs	r1, #255	; 0xff
   129ca:	68e0      	ldr	r0, [r4, #12]
   129cc:	f7fe fc32 	bl	11234 <memset>
    pcache->block = LFS_BLOCK_NULL;
   129d0:	f04f 33ff 	mov.w	r3, #4294967295
   129d4:	6023      	str	r3, [r4, #0]
}
   129d6:	e001      	b.n	129dc <lfs_bd_flush+0x7e>
    return 0;
   129d8:	f04f 0900 	mov.w	r9, #0
}
   129dc:	4648      	mov	r0, r9
   129de:	b005      	add	sp, #20
   129e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                return res;
   129e4:	4681      	mov	r9, r0
   129e6:	e7f9      	b.n	129dc <lfs_bd_flush+0x7e>
                return LFS_ERR_CORRUPT;
   129e8:	f06f 0953 	mvn.w	r9, #83	; 0x53
   129ec:	e7f6      	b.n	129dc <lfs_bd_flush+0x7e>

000129ee <lfs_bd_prog>:
        const void *buffer, lfs_size_t size) {
   129ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129f2:	b083      	sub	sp, #12
   129f4:	4607      	mov	r7, r0
   129f6:	460c      	mov	r4, r1
   129f8:	4693      	mov	fp, r2
   129fa:	9301      	str	r3, [sp, #4]
   129fc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   129fe:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   12a00:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
   12a04:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
    while (size > 0) {
   12a08:	e00a      	b.n	12a20 <lfs_bd_prog+0x32>
        pcache->block = block;
   12a0a:	6026      	str	r6, [r4, #0]
        pcache->off = lfs_aligndown(off, lfs->cfg->prog_size);
   12a0c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
   12a0e:	699a      	ldr	r2, [r3, #24]
   12a10:	fbb5 f3f2 	udiv	r3, r5, r2
   12a14:	fb02 5313 	mls	r3, r2, r3, r5
   12a18:	1aeb      	subs	r3, r5, r3
   12a1a:	6063      	str	r3, [r4, #4]
        pcache->size = 0;
   12a1c:	2300      	movs	r3, #0
   12a1e:	60a3      	str	r3, [r4, #8]
    while (size > 0) {
   12a20:	f1b8 0f00 	cmp.w	r8, #0
   12a24:	d02e      	beq.n	12a84 <lfs_bd_prog+0x96>
        if (block == pcache->block &&
   12a26:	6823      	ldr	r3, [r4, #0]
   12a28:	42b3      	cmp	r3, r6
   12a2a:	d1ee      	bne.n	12a0a <lfs_bd_prog+0x1c>
                off >= pcache->off &&
   12a2c:	6860      	ldr	r0, [r4, #4]
        if (block == pcache->block &&
   12a2e:	42a8      	cmp	r0, r5
   12a30:	d8eb      	bhi.n	12a0a <lfs_bd_prog+0x1c>
                off < pcache->off + lfs->cfg->cache_size) {
   12a32:	6eba      	ldr	r2, [r7, #104]	; 0x68
   12a34:	6a92      	ldr	r2, [r2, #40]	; 0x28
   12a36:	1881      	adds	r1, r0, r2
                off >= pcache->off &&
   12a38:	42a9      	cmp	r1, r5
   12a3a:	d9e6      	bls.n	12a0a <lfs_bd_prog+0x1c>
                    lfs->cfg->cache_size - (off-pcache->off));
   12a3c:	eba0 0905 	sub.w	r9, r0, r5
            lfs_size_t diff = lfs_min(size,
   12a40:	4491      	add	r9, r2
    return (a < b) ? a : b;
   12a42:	45c1      	cmp	r9, r8
   12a44:	bf28      	it	cs
   12a46:	46c1      	movcs	r9, r8
            memcpy(&pcache->buffer[off-pcache->off], data, diff);
   12a48:	1a28      	subs	r0, r5, r0
   12a4a:	464a      	mov	r2, r9
   12a4c:	4651      	mov	r1, sl
   12a4e:	68e3      	ldr	r3, [r4, #12]
   12a50:	4418      	add	r0, r3
   12a52:	f7fe fbcb 	bl	111ec <memcpy>
            data += diff;
   12a56:	44ca      	add	sl, r9
            off += diff;
   12a58:	444d      	add	r5, r9
            size -= diff;
   12a5a:	eba8 0809 	sub.w	r8, r8, r9
            pcache->size = lfs_max(pcache->size, off - pcache->off);
   12a5e:	68a3      	ldr	r3, [r4, #8]
   12a60:	6862      	ldr	r2, [r4, #4]
   12a62:	1aaa      	subs	r2, r5, r2
    return (a > b) ? a : b;
   12a64:	4293      	cmp	r3, r2
   12a66:	bf38      	it	cc
   12a68:	4613      	movcc	r3, r2
   12a6a:	60a3      	str	r3, [r4, #8]
            if (pcache->size == lfs->cfg->cache_size) {
   12a6c:	6eba      	ldr	r2, [r7, #104]	; 0x68
   12a6e:	6a92      	ldr	r2, [r2, #40]	; 0x28
   12a70:	429a      	cmp	r2, r3
   12a72:	d1d5      	bne.n	12a20 <lfs_bd_prog+0x32>
                int err = lfs_bd_flush(lfs, pcache, rcache, validate);
   12a74:	9b01      	ldr	r3, [sp, #4]
   12a76:	465a      	mov	r2, fp
   12a78:	4621      	mov	r1, r4
   12a7a:	4638      	mov	r0, r7
   12a7c:	f7ff ff6f 	bl	1295e <lfs_bd_flush>
                if (err) {
   12a80:	b908      	cbnz	r0, 12a86 <lfs_bd_prog+0x98>
   12a82:	e7cd      	b.n	12a20 <lfs_bd_prog+0x32>
    return 0;
   12a84:	2000      	movs	r0, #0
}
   12a86:	b003      	add	sp, #12
   12a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012a8c <lfs_dir_commitprog>:
        const void *buffer, lfs_size_t size) {
   12a8c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a8e:	b085      	sub	sp, #20
   12a90:	460c      	mov	r4, r1
   12a92:	4617      	mov	r7, r2
   12a94:	461e      	mov	r6, r3
    int err = lfs_bd_prog(lfs,
   12a96:	9303      	str	r3, [sp, #12]
   12a98:	9202      	str	r2, [sp, #8]
   12a9a:	684b      	ldr	r3, [r1, #4]
   12a9c:	9301      	str	r3, [sp, #4]
   12a9e:	680b      	ldr	r3, [r1, #0]
   12aa0:	9300      	str	r3, [sp, #0]
   12aa2:	2300      	movs	r3, #0
   12aa4:	4602      	mov	r2, r0
   12aa6:	f100 0110 	add.w	r1, r0, #16
   12aaa:	f7ff ffa0 	bl	129ee <lfs_bd_prog>
    if (err) {
   12aae:	4605      	mov	r5, r0
   12ab0:	b110      	cbz	r0, 12ab8 <lfs_dir_commitprog+0x2c>
}
   12ab2:	4628      	mov	r0, r5
   12ab4:	b005      	add	sp, #20
   12ab6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    commit->crc = lfs_crc(commit->crc, buffer, size);
   12ab8:	4632      	mov	r2, r6
   12aba:	4639      	mov	r1, r7
   12abc:	68e0      	ldr	r0, [r4, #12]
   12abe:	f7fa fd4f 	bl	d560 <lfs_crc>
   12ac2:	60e0      	str	r0, [r4, #12]
    commit->off += size;
   12ac4:	6863      	ldr	r3, [r4, #4]
   12ac6:	4433      	add	r3, r6
   12ac8:	6063      	str	r3, [r4, #4]
    return 0;
   12aca:	e7f2      	b.n	12ab2 <lfs_dir_commitprog+0x26>

00012acc <lfs_dir_commitattr>:
        lfs_tag_t tag, const void *buffer) {
   12acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ad0:	b087      	sub	sp, #28
   12ad2:	4614      	mov	r4, r2
   12ad4:	461f      	mov	r7, r3
    return ((int32_t)(tag << 22) >> 22) == -1;
   12ad6:	f342 0809 	sbfx	r8, r2, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
   12ada:	f1b8 3fff 	cmp.w	r8, #4294967295
   12ade:	bf14      	ite	ne
   12ae0:	4690      	movne	r8, r2
   12ae2:	f102 0801 	addeq.w	r8, r2, #1
    return tag & 0x000003ff;
   12ae6:	f3c8 0809 	ubfx	r8, r8, #0, #10
    return sizeof(tag) + lfs_tag_size(tag + lfs_tag_isdelete(tag));
   12aea:	f108 0904 	add.w	r9, r8, #4
    if (commit->off + dsize > commit->end) {
   12aee:	684b      	ldr	r3, [r1, #4]
   12af0:	444b      	add	r3, r9
   12af2:	694a      	ldr	r2, [r1, #20]
   12af4:	4293      	cmp	r3, r2
   12af6:	d842      	bhi.n	12b7e <lfs_dir_commitattr+0xb2>
   12af8:	4605      	mov	r5, r0
   12afa:	460e      	mov	r6, r1
    lfs_tag_t ntag = lfs_tobe32((tag & 0x7fffffff) ^ commit->ptag);
   12afc:	f024 4b00 	bic.w	fp, r4, #2147483648	; 0x80000000
   12b00:	688b      	ldr	r3, [r1, #8]
   12b02:	ea8b 0303 	eor.w	r3, fp, r3
    return __builtin_bswap32(a);
   12b06:	ba1b      	rev	r3, r3
   12b08:	9305      	str	r3, [sp, #20]
    int err = lfs_dir_commitprog(lfs, commit, &ntag, sizeof(ntag));
   12b0a:	2304      	movs	r3, #4
   12b0c:	aa05      	add	r2, sp, #20
   12b0e:	f7ff ffbd 	bl	12a8c <lfs_dir_commitprog>
    if (err) {
   12b12:	4682      	mov	sl, r0
   12b14:	b960      	cbnz	r0, 12b30 <lfs_dir_commitattr+0x64>
    if (!(tag & 0x80000000)) {
   12b16:	2c00      	cmp	r4, #0
   12b18:	da01      	bge.n	12b1e <lfs_dir_commitattr+0x52>
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
   12b1a:	2400      	movs	r4, #0
   12b1c:	e00d      	b.n	12b3a <lfs_dir_commitattr+0x6e>
        err = lfs_dir_commitprog(lfs, commit, buffer, dsize-sizeof(tag));
   12b1e:	4643      	mov	r3, r8
   12b20:	463a      	mov	r2, r7
   12b22:	4631      	mov	r1, r6
   12b24:	4628      	mov	r0, r5
   12b26:	f7ff ffb1 	bl	12a8c <lfs_dir_commitprog>
        if (err) {
   12b2a:	bb58      	cbnz	r0, 12b84 <lfs_dir_commitattr+0xb8>
    commit->ptag = tag & 0x7fffffff;
   12b2c:	f8c6 b008 	str.w	fp, [r6, #8]
}
   12b30:	4650      	mov	r0, sl
   12b32:	b007      	add	sp, #28
   12b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for (lfs_off_t i = 0; i < dsize-sizeof(tag); i++) {
   12b38:	3401      	adds	r4, #1
   12b3a:	4544      	cmp	r4, r8
   12b3c:	d2f6      	bcs.n	12b2c <lfs_dir_commitattr+0x60>
                    NULL, &lfs->rcache, dsize-sizeof(tag)-i,
   12b3e:	eba9 0304 	sub.w	r3, r9, r4
                    disk->block, disk->off+i, &dat, 1);
   12b42:	687a      	ldr	r2, [r7, #4]
            err = lfs_bd_read(lfs,
   12b44:	2101      	movs	r1, #1
   12b46:	9103      	str	r1, [sp, #12]
   12b48:	f10d 0113 	add.w	r1, sp, #19
   12b4c:	9102      	str	r1, [sp, #8]
   12b4e:	4422      	add	r2, r4
   12b50:	9201      	str	r2, [sp, #4]
   12b52:	683a      	ldr	r2, [r7, #0]
   12b54:	9200      	str	r2, [sp, #0]
   12b56:	3b04      	subs	r3, #4
   12b58:	462a      	mov	r2, r5
   12b5a:	2100      	movs	r1, #0
   12b5c:	4628      	mov	r0, r5
   12b5e:	f7ff fccf 	bl	12500 <lfs_bd_read>
            if (err) {
   12b62:	4603      	mov	r3, r0
   12b64:	b948      	cbnz	r0, 12b7a <lfs_dir_commitattr+0xae>
            err = lfs_dir_commitprog(lfs, commit, &dat, 1);
   12b66:	2301      	movs	r3, #1
   12b68:	f10d 0213 	add.w	r2, sp, #19
   12b6c:	4631      	mov	r1, r6
   12b6e:	4628      	mov	r0, r5
   12b70:	f7ff ff8c 	bl	12a8c <lfs_dir_commitprog>
            if (err) {
   12b74:	4603      	mov	r3, r0
   12b76:	2800      	cmp	r0, #0
   12b78:	d0de      	beq.n	12b38 <lfs_dir_commitattr+0x6c>
                return err;
   12b7a:	469a      	mov	sl, r3
   12b7c:	e7d8      	b.n	12b30 <lfs_dir_commitattr+0x64>
        return LFS_ERR_NOSPC;
   12b7e:	f06f 0a1b 	mvn.w	sl, #27
   12b82:	e7d5      	b.n	12b30 <lfs_dir_commitattr+0x64>
            return err;
   12b84:	4682      	mov	sl, r0
   12b86:	e7d3      	b.n	12b30 <lfs_dir_commitattr+0x64>

00012b88 <lfs_dir_commit_commit>:
static int lfs_dir_commit_commit(void *p, lfs_tag_t tag, const void *buffer) {
   12b88:	b508      	push	{r3, lr}
   12b8a:	4613      	mov	r3, r2
    return lfs_dir_commitattr(commit->lfs, commit->commit, tag, buffer);
   12b8c:	460a      	mov	r2, r1
   12b8e:	6841      	ldr	r1, [r0, #4]
   12b90:	6800      	ldr	r0, [r0, #0]
   12b92:	f7ff ff9b 	bl	12acc <lfs_dir_commitattr>
}
   12b96:	bd08      	pop	{r3, pc}

00012b98 <lfs_bd_sync>:
        lfs_cache_t *pcache, lfs_cache_t *rcache, bool validate) {
   12b98:	b538      	push	{r3, r4, r5, lr}
   12b9a:	4604      	mov	r4, r0
    rcache->block = LFS_BLOCK_NULL;
   12b9c:	f04f 35ff 	mov.w	r5, #4294967295
   12ba0:	6015      	str	r5, [r2, #0]
    int err = lfs_bd_flush(lfs, pcache, rcache, validate);
   12ba2:	f7ff fedc 	bl	1295e <lfs_bd_flush>
    if (err) {
   12ba6:	b910      	cbnz	r0, 12bae <lfs_bd_sync+0x16>
    err = lfs->cfg->sync(lfs->cfg);
   12ba8:	6ea0      	ldr	r0, [r4, #104]	; 0x68
   12baa:	6903      	ldr	r3, [r0, #16]
   12bac:	4798      	blx	r3
}
   12bae:	bd38      	pop	{r3, r4, r5, pc}

00012bb0 <lfs_dir_commitcrc>:
static int lfs_dir_commitcrc(lfs_t *lfs, struct lfs_commit *commit) {
   12bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12bb4:	b08b      	sub	sp, #44	; 0x2c
   12bb6:	4605      	mov	r5, r0
   12bb8:	460c      	mov	r4, r1
    const lfs_off_t off1 = commit->off;
   12bba:	f8d1 b004 	ldr.w	fp, [r1, #4]
    const uint32_t crc1 = commit->crc;
   12bbe:	68cb      	ldr	r3, [r1, #12]
   12bc0:	9304      	str	r3, [sp, #16]
    const lfs_off_t end = lfs_alignup(off1 + 2*sizeof(uint32_t),
   12bc2:	f10b 0608 	add.w	r6, fp, #8
            lfs->cfg->prog_size);
   12bc6:	6e83      	ldr	r3, [r0, #104]	; 0x68
    const lfs_off_t end = lfs_alignup(off1 + 2*sizeof(uint32_t),
   12bc8:	699a      	ldr	r2, [r3, #24]
    return lfs_aligndown(a + alignment-1, alignment);
   12bca:	4416      	add	r6, r2
   12bcc:	3e01      	subs	r6, #1
    return a - (a % alignment);
   12bce:	fbb6 f3f2 	udiv	r3, r6, r2
   12bd2:	fb02 6313 	mls	r3, r2, r3, r6
   12bd6:	1af6      	subs	r6, r6, r3
    while (commit->off < end) {
   12bd8:	e04d      	b.n	12c76 <lfs_dir_commitcrc+0xc6>
        lfs_tag_t tag = 0xffffffff;
   12bda:	f04f 33ff 	mov.w	r3, #4294967295
   12bde:	9307      	str	r3, [sp, #28]
        int err = lfs_bd_read(lfs,
   12be0:	2304      	movs	r3, #4
   12be2:	9303      	str	r3, [sp, #12]
   12be4:	aa07      	add	r2, sp, #28
   12be6:	9202      	str	r2, [sp, #8]
   12be8:	9701      	str	r7, [sp, #4]
   12bea:	6822      	ldr	r2, [r4, #0]
   12bec:	9200      	str	r2, [sp, #0]
   12bee:	462a      	mov	r2, r5
   12bf0:	2100      	movs	r1, #0
   12bf2:	4628      	mov	r0, r5
   12bf4:	f7ff fc84 	bl	12500 <lfs_bd_read>
        if (err && err != LFS_ERR_CORRUPT) {
   12bf8:	b118      	cbz	r0, 12c02 <lfs_dir_commitcrc+0x52>
   12bfa:	f110 0f54 	cmn.w	r0, #84	; 0x54
   12bfe:	f040 80aa 	bne.w	12d56 <lfs_dir_commitcrc+0x1a6>
        bool reset = ~lfs_frombe32(tag) >> 31;
   12c02:	9b07      	ldr	r3, [sp, #28]
    return __builtin_bswap32(a);
   12c04:	ba1b      	rev	r3, r3
   12c06:	ea6f 0803 	mvn.w	r8, r3
   12c0a:	ea4f 78d8 	mov.w	r8, r8, lsr #31
        tag = LFS_MKTAG(LFS_TYPE_CRC + reset, 0x3ff, noff - off);
   12c0e:	f508 63a0 	add.w	r3, r8, #1280	; 0x500
   12c12:	eba7 0709 	sub.w	r7, r7, r9
   12c16:	ea47 5703 	orr.w	r7, r7, r3, lsl #20
   12c1a:	f447 277f 	orr.w	r7, r7, #1044480	; 0xff000
   12c1e:	f447 6740 	orr.w	r7, r7, #3072	; 0xc00
   12c22:	9707      	str	r7, [sp, #28]
        footer[0] = lfs_tobe32(tag ^ commit->ptag);
   12c24:	68a3      	ldr	r3, [r4, #8]
   12c26:	405f      	eors	r7, r3
   12c28:	ba3f      	rev	r7, r7
   12c2a:	9708      	str	r7, [sp, #32]
        commit->crc = lfs_crc(commit->crc, &footer[0], sizeof(footer[0]));
   12c2c:	af08      	add	r7, sp, #32
   12c2e:	2204      	movs	r2, #4
   12c30:	4639      	mov	r1, r7
   12c32:	68e0      	ldr	r0, [r4, #12]
   12c34:	f7fa fc94 	bl	d560 <lfs_crc>
   12c38:	60e0      	str	r0, [r4, #12]
        footer[1] = lfs_tole32(commit->crc);
   12c3a:	9009      	str	r0, [sp, #36]	; 0x24
        err = lfs_bd_prog(lfs,
   12c3c:	2308      	movs	r3, #8
   12c3e:	9303      	str	r3, [sp, #12]
   12c40:	9702      	str	r7, [sp, #8]
   12c42:	6863      	ldr	r3, [r4, #4]
   12c44:	9301      	str	r3, [sp, #4]
   12c46:	6823      	ldr	r3, [r4, #0]
   12c48:	9300      	str	r3, [sp, #0]
   12c4a:	2300      	movs	r3, #0
   12c4c:	462a      	mov	r2, r5
   12c4e:	f105 0110 	add.w	r1, r5, #16
   12c52:	4628      	mov	r0, r5
   12c54:	f7ff fecb 	bl	129ee <lfs_bd_prog>
        if (err) {
   12c58:	2800      	cmp	r0, #0
   12c5a:	d17e      	bne.n	12d5a <lfs_dir_commitcrc+0x1aa>
        commit->off += sizeof(tag)+lfs_tag_size(tag);
   12c5c:	9b07      	ldr	r3, [sp, #28]
    return tag & 0x000003ff;
   12c5e:	f3c3 0209 	ubfx	r2, r3, #0, #10
        commit->off += sizeof(tag)+lfs_tag_size(tag);
   12c62:	1d11      	adds	r1, r2, #4
   12c64:	6862      	ldr	r2, [r4, #4]
   12c66:	440a      	add	r2, r1
   12c68:	6062      	str	r2, [r4, #4]
        commit->ptag = tag ^ ((lfs_tag_t)reset << 31);
   12c6a:	ea83 73c8 	eor.w	r3, r3, r8, lsl #31
   12c6e:	60a3      	str	r3, [r4, #8]
        commit->crc = 0xffffffff; // reset crc for next "commit"
   12c70:	f04f 33ff 	mov.w	r3, #4294967295
   12c74:	60e3      	str	r3, [r4, #12]
    while (commit->off < end) {
   12c76:	6867      	ldr	r7, [r4, #4]
   12c78:	42b7      	cmp	r7, r6
   12c7a:	d212      	bcs.n	12ca2 <lfs_dir_commitcrc+0xf2>
        lfs_off_t off = commit->off + sizeof(lfs_tag_t);
   12c7c:	f107 0904 	add.w	r9, r7, #4
        lfs_off_t noff = lfs_min(end - off, 0x3fe) + off;
   12c80:	eba6 0709 	sub.w	r7, r6, r9
   12c84:	f240 33fe 	movw	r3, #1022	; 0x3fe
   12c88:	429f      	cmp	r7, r3
   12c8a:	bf94      	ite	ls
   12c8c:	444f      	addls	r7, r9
   12c8e:	eb09 0703 	addhi.w	r7, r9, r3
        if (noff < end) {
   12c92:	42b7      	cmp	r7, r6
   12c94:	d2a1      	bcs.n	12bda <lfs_dir_commitcrc+0x2a>
            noff = lfs_min(noff, end - 2*sizeof(uint32_t));
   12c96:	f1a6 0308 	sub.w	r3, r6, #8
    return (a < b) ? a : b;
   12c9a:	429f      	cmp	r7, r3
   12c9c:	bf28      	it	cs
   12c9e:	461f      	movcs	r7, r3
   12ca0:	e79b      	b.n	12bda <lfs_dir_commitcrc+0x2a>
    int err = lfs_bd_sync(lfs, &lfs->pcache, &lfs->rcache, false);
   12ca2:	9505      	str	r5, [sp, #20]
   12ca4:	2300      	movs	r3, #0
   12ca6:	462a      	mov	r2, r5
   12ca8:	f105 0110 	add.w	r1, r5, #16
   12cac:	4628      	mov	r0, r5
   12cae:	f7ff ff73 	bl	12b98 <lfs_bd_sync>
    if (err) {
   12cb2:	4607      	mov	r7, r0
   12cb4:	2800      	cmp	r0, #0
   12cb6:	d151      	bne.n	12d5c <lfs_dir_commitcrc+0x1ac>
    lfs_off_t off = commit->begin;
   12cb8:	f8d4 8010 	ldr.w	r8, [r4, #16]
    lfs_off_t noff = off1 + sizeof(uint32_t);
   12cbc:	f10b 0a04 	add.w	sl, fp, #4
    while (off < end) {
   12cc0:	f8dd 9010 	ldr.w	r9, [sp, #16]
   12cc4:	9604      	str	r6, [sp, #16]
   12cc6:	4646      	mov	r6, r8
   12cc8:	f8dd 8014 	ldr.w	r8, [sp, #20]
   12ccc:	9005      	str	r0, [sp, #20]
   12cce:	9b04      	ldr	r3, [sp, #16]
   12cd0:	429e      	cmp	r6, r3
   12cd2:	d23b      	bcs.n	12d4c <lfs_dir_commitcrc+0x19c>
        uint32_t crc = 0xffffffff;
   12cd4:	f04f 37ff 	mov.w	r7, #4294967295
   12cd8:	e017      	b.n	12d0a <lfs_dir_commitcrc+0x15a>
                    NULL, &lfs->rcache, noff+sizeof(uint32_t)-i,
   12cda:	ebaa 0306 	sub.w	r3, sl, r6
            err = lfs_bd_read(lfs,
   12cde:	2201      	movs	r2, #1
   12ce0:	9203      	str	r2, [sp, #12]
   12ce2:	aa08      	add	r2, sp, #32
   12ce4:	9202      	str	r2, [sp, #8]
   12ce6:	9601      	str	r6, [sp, #4]
   12ce8:	6822      	ldr	r2, [r4, #0]
   12cea:	9200      	str	r2, [sp, #0]
   12cec:	3304      	adds	r3, #4
   12cee:	4642      	mov	r2, r8
   12cf0:	2100      	movs	r1, #0
   12cf2:	4628      	mov	r0, r5
   12cf4:	f7ff fc04 	bl	12500 <lfs_bd_read>
            if (err) {
   12cf8:	4603      	mov	r3, r0
   12cfa:	b980      	cbnz	r0, 12d1e <lfs_dir_commitcrc+0x16e>
            crc = lfs_crc(crc, &dat, 1);
   12cfc:	2201      	movs	r2, #1
   12cfe:	a908      	add	r1, sp, #32
   12d00:	4638      	mov	r0, r7
   12d02:	f7fa fc2d 	bl	d560 <lfs_crc>
   12d06:	4607      	mov	r7, r0
        for (lfs_off_t i = off; i < noff+sizeof(uint32_t); i++) {
   12d08:	3601      	adds	r6, #1
   12d0a:	f10a 0304 	add.w	r3, sl, #4
   12d0e:	42b3      	cmp	r3, r6
   12d10:	d907      	bls.n	12d22 <lfs_dir_commitcrc+0x172>
            if (i == off1 && crc != crc1) {
   12d12:	455e      	cmp	r6, fp
   12d14:	d1e1      	bne.n	12cda <lfs_dir_commitcrc+0x12a>
   12d16:	454f      	cmp	r7, r9
   12d18:	d0df      	beq.n	12cda <lfs_dir_commitcrc+0x12a>
                return LFS_ERR_CORRUPT;
   12d1a:	f06f 0353 	mvn.w	r3, #83	; 0x53
   12d1e:	461f      	mov	r7, r3
   12d20:	e01c      	b.n	12d5c <lfs_dir_commitcrc+0x1ac>
        if (crc != 0) {
   12d22:	b9af      	cbnz	r7, 12d50 <lfs_dir_commitcrc+0x1a0>
        off = lfs_min(end - noff, 0x3fe) + noff;
   12d24:	9a04      	ldr	r2, [sp, #16]
   12d26:	eba2 060a 	sub.w	r6, r2, sl
   12d2a:	f240 33fe 	movw	r3, #1022	; 0x3fe
   12d2e:	429e      	cmp	r6, r3
   12d30:	bf94      	ite	ls
   12d32:	4456      	addls	r6, sl
   12d34:	eb0a 0603 	addhi.w	r6, sl, r3
        if (off < end) {
   12d38:	4296      	cmp	r6, r2
   12d3a:	d204      	bcs.n	12d46 <lfs_dir_commitcrc+0x196>
            off = lfs_min(off, end - 2*sizeof(uint32_t));
   12d3c:	f1a2 0308 	sub.w	r3, r2, #8
   12d40:	429e      	cmp	r6, r3
   12d42:	bf28      	it	cs
   12d44:	461e      	movcs	r6, r3
        noff = off + sizeof(uint32_t);
   12d46:	f106 0a04 	add.w	sl, r6, #4
   12d4a:	e7c0      	b.n	12cce <lfs_dir_commitcrc+0x11e>
   12d4c:	9f05      	ldr	r7, [sp, #20]
   12d4e:	e005      	b.n	12d5c <lfs_dir_commitcrc+0x1ac>
            return LFS_ERR_CORRUPT;
   12d50:	f06f 0753 	mvn.w	r7, #83	; 0x53
   12d54:	e002      	b.n	12d5c <lfs_dir_commitcrc+0x1ac>
   12d56:	4607      	mov	r7, r0
   12d58:	e000      	b.n	12d5c <lfs_dir_commitcrc+0x1ac>
   12d5a:	4607      	mov	r7, r0
}
   12d5c:	4638      	mov	r0, r7
   12d5e:	b00b      	add	sp, #44	; 0x2c
   12d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00012d64 <lfs_deinit>:
static int lfs_deinit(lfs_t *lfs) {
   12d64:	b510      	push	{r4, lr}
   12d66:	4604      	mov	r4, r0
    if (!lfs->cfg->read_buffer) {
   12d68:	6e83      	ldr	r3, [r0, #104]	; 0x68
   12d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   12d6c:	b13b      	cbz	r3, 12d7e <lfs_deinit+0x1a>
    if (!lfs->cfg->prog_buffer) {
   12d6e:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   12d70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   12d72:	b143      	cbz	r3, 12d86 <lfs_deinit+0x22>
    if (!lfs->cfg->lookahead_buffer) {
   12d74:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   12d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   12d78:	b14b      	cbz	r3, 12d8e <lfs_deinit+0x2a>
}
   12d7a:	2000      	movs	r0, #0
   12d7c:	bd10      	pop	{r4, pc}
}

// Deallocate memory, only used if buffers are not provided to littlefs
static inline void lfs_free(void *p) {
#ifndef LFS_NO_MALLOC
    free(p);
   12d7e:	68c0      	ldr	r0, [r0, #12]
   12d80:	f7fe f9b6 	bl	110f0 <free>
#else
    (void)p;
#endif
}
   12d84:	e7f3      	b.n	12d6e <lfs_deinit+0xa>
    free(p);
   12d86:	69e0      	ldr	r0, [r4, #28]
   12d88:	f7fe f9b2 	bl	110f0 <free>
}
   12d8c:	e7f2      	b.n	12d74 <lfs_deinit+0x10>
    free(p);
   12d8e:	6e60      	ldr	r0, [r4, #100]	; 0x64
   12d90:	f7fe f9ae 	bl	110f0 <free>
}
   12d94:	e7f1      	b.n	12d7a <lfs_deinit+0x16>

00012d96 <lfs_init>:
static int lfs_init(lfs_t *lfs, const struct lfs_config *cfg) {
   12d96:	b538      	push	{r3, r4, r5, lr}
   12d98:	4604      	mov	r4, r0
    lfs->cfg = cfg;
   12d9a:	6681      	str	r1, [r0, #104]	; 0x68
    if (lfs->cfg->read_buffer) {
   12d9c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   12d9e:	2b00      	cmp	r3, #0
   12da0:	d03d      	beq.n	12e1e <lfs_init+0x88>
        lfs->rcache.buffer = lfs->cfg->read_buffer;
   12da2:	60c3      	str	r3, [r0, #12]
    if (lfs->cfg->prog_buffer) {
   12da4:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   12da6:	6b53      	ldr	r3, [r2, #52]	; 0x34
   12da8:	2b00      	cmp	r3, #0
   12daa:	d044      	beq.n	12e36 <lfs_init+0xa0>
        lfs->pcache.buffer = lfs->cfg->prog_buffer;
   12dac:	61e3      	str	r3, [r4, #28]
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
   12dae:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   12db0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12db2:	21ff      	movs	r1, #255	; 0xff
   12db4:	68e0      	ldr	r0, [r4, #12]
   12db6:	f7fe fa3d 	bl	11234 <memset>
    pcache->block = LFS_BLOCK_NULL;
   12dba:	f04f 35ff 	mov.w	r5, #4294967295
   12dbe:	6025      	str	r5, [r4, #0]
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
   12dc0:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   12dc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   12dc4:	21ff      	movs	r1, #255	; 0xff
   12dc6:	69e0      	ldr	r0, [r4, #28]
   12dc8:	f7fe fa34 	bl	11234 <memset>
    pcache->block = LFS_BLOCK_NULL;
   12dcc:	6125      	str	r5, [r4, #16]
    if (lfs->cfg->lookahead_buffer) {
   12dce:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   12dd0:	6b93      	ldr	r3, [r2, #56]	; 0x38
   12dd2:	2b00      	cmp	r3, #0
   12dd4:	d036      	beq.n	12e44 <lfs_init+0xae>
        lfs->free.buffer = lfs->cfg->lookahead_buffer;
   12dd6:	6663      	str	r3, [r4, #100]	; 0x64
    lfs->name_max = lfs->cfg->name_max;
   12dd8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   12dda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   12ddc:	66e2      	str	r2, [r4, #108]	; 0x6c
    if (!lfs->name_max) {
   12dde:	b90a      	cbnz	r2, 12de4 <lfs_init+0x4e>
        lfs->name_max = LFS_NAME_MAX;
   12de0:	22ff      	movs	r2, #255	; 0xff
   12de2:	66e2      	str	r2, [r4, #108]	; 0x6c
    lfs->file_max = lfs->cfg->file_max;
   12de4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
   12de6:	6722      	str	r2, [r4, #112]	; 0x70
    if (!lfs->file_max) {
   12de8:	b912      	cbnz	r2, 12df0 <lfs_init+0x5a>
        lfs->file_max = LFS_FILE_MAX;
   12dea:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   12dee:	6722      	str	r2, [r4, #112]	; 0x70
    lfs->attr_max = lfs->cfg->attr_max;
   12df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   12df2:	6763      	str	r3, [r4, #116]	; 0x74
    if (!lfs->attr_max) {
   12df4:	b913      	cbnz	r3, 12dfc <lfs_init+0x66>
        lfs->attr_max = LFS_ATTR_MAX;
   12df6:	f240 33fe 	movw	r3, #1022	; 0x3fe
   12dfa:	6763      	str	r3, [r4, #116]	; 0x74
    lfs->root[0] = LFS_BLOCK_NULL;
   12dfc:	f04f 33ff 	mov.w	r3, #4294967295
   12e00:	6223      	str	r3, [r4, #32]
    lfs->root[1] = LFS_BLOCK_NULL;
   12e02:	6263      	str	r3, [r4, #36]	; 0x24
    lfs->mlist = NULL;
   12e04:	2000      	movs	r0, #0
   12e06:	62a0      	str	r0, [r4, #40]	; 0x28
    lfs->seed = 0;
   12e08:	62e0      	str	r0, [r4, #44]	; 0x2c
    lfs->gdisk = (lfs_gstate_t){0};
   12e0a:	63e0      	str	r0, [r4, #60]	; 0x3c
   12e0c:	6420      	str	r0, [r4, #64]	; 0x40
   12e0e:	6460      	str	r0, [r4, #68]	; 0x44
    lfs->gstate = (lfs_gstate_t){0};
   12e10:	6320      	str	r0, [r4, #48]	; 0x30
   12e12:	6360      	str	r0, [r4, #52]	; 0x34
   12e14:	63a0      	str	r0, [r4, #56]	; 0x38
    lfs->gdelta = (lfs_gstate_t){0};
   12e16:	64a0      	str	r0, [r4, #72]	; 0x48
   12e18:	64e0      	str	r0, [r4, #76]	; 0x4c
   12e1a:	6520      	str	r0, [r4, #80]	; 0x50
}
   12e1c:	bd38      	pop	{r3, r4, r5, pc}
    return malloc(size);
   12e1e:	6a88      	ldr	r0, [r1, #40]	; 0x28
   12e20:	f7f1 ff42 	bl	4ca8 <malloc>
        lfs->rcache.buffer = lfs_malloc(lfs->cfg->cache_size);
   12e24:	60e0      	str	r0, [r4, #12]
        if (!lfs->rcache.buffer) {
   12e26:	2800      	cmp	r0, #0
   12e28:	d1bc      	bne.n	12da4 <lfs_init+0xe>
    lfs_deinit(lfs);
   12e2a:	4620      	mov	r0, r4
   12e2c:	f7ff ff9a 	bl	12d64 <lfs_deinit>
    return err;
   12e30:	f06f 000b 	mvn.w	r0, #11
   12e34:	e7f2      	b.n	12e1c <lfs_init+0x86>
   12e36:	6a90      	ldr	r0, [r2, #40]	; 0x28
   12e38:	f7f1 ff36 	bl	4ca8 <malloc>
        lfs->pcache.buffer = lfs_malloc(lfs->cfg->cache_size);
   12e3c:	61e0      	str	r0, [r4, #28]
        if (!lfs->pcache.buffer) {
   12e3e:	2800      	cmp	r0, #0
   12e40:	d1b5      	bne.n	12dae <lfs_init+0x18>
   12e42:	e7f2      	b.n	12e2a <lfs_init+0x94>
   12e44:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
   12e46:	f7f1 ff2f 	bl	4ca8 <malloc>
        lfs->free.buffer = lfs_malloc(lfs->cfg->lookahead_size);
   12e4a:	6660      	str	r0, [r4, #100]	; 0x64
        if (!lfs->free.buffer) {
   12e4c:	2800      	cmp	r0, #0
   12e4e:	d1c3      	bne.n	12dd8 <lfs_init+0x42>
   12e50:	e7eb      	b.n	12e2a <lfs_init+0x94>

00012e52 <lfs_ctz_index>:
static int lfs_ctz_index(lfs_t *lfs, lfs_off_t *off) {
   12e52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    lfs_off_t size = *off;
   12e54:	680f      	ldr	r7, [r1, #0]
    lfs_off_t b = lfs->cfg->block_size - 2*4;
   12e56:	6e83      	ldr	r3, [r0, #104]	; 0x68
   12e58:	69dc      	ldr	r4, [r3, #28]
   12e5a:	3c08      	subs	r4, #8
    lfs_off_t i = size / b;
   12e5c:	fbb7 f0f4 	udiv	r0, r7, r4
    if (i == 0) {
   12e60:	42a7      	cmp	r7, r4
   12e62:	d312      	bcc.n	12e8a <lfs_ctz_index+0x38>
   12e64:	460e      	mov	r6, r1
    return __builtin_popcount(a);
   12e66:	3801      	subs	r0, #1
   12e68:	f7ed f962 	bl	130 <__popcountsi2>
    i = (size - 4*(lfs_popc(i-1)+2)) / b;
   12e6c:	1c85      	adds	r5, r0, #2
   12e6e:	eba7 0585 	sub.w	r5, r7, r5, lsl #2
   12e72:	fbb5 f5f4 	udiv	r5, r5, r4
    *off = size - b*i - 4*lfs_popc(i);
   12e76:	fb05 7414 	mls	r4, r5, r4, r7
   12e7a:	4628      	mov	r0, r5
   12e7c:	f7ed f958 	bl	130 <__popcountsi2>
   12e80:	eba4 0480 	sub.w	r4, r4, r0, lsl #2
   12e84:	6034      	str	r4, [r6, #0]
    return i;
   12e86:	4628      	mov	r0, r5
}
   12e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
   12e8a:	2000      	movs	r0, #0
   12e8c:	e7fc      	b.n	12e88 <lfs_ctz_index+0x36>

00012e8e <lfs_ctz_traverse>:
        int (*cb)(void*, lfs_block_t), void *data) {
   12e8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e92:	b08b      	sub	sp, #44	; 0x2c
   12e94:	9105      	str	r1, [sp, #20]
   12e96:	461c      	mov	r4, r3
   12e98:	9b14      	ldr	r3, [sp, #80]	; 0x50
   12e9a:	9e15      	ldr	r6, [sp, #84]	; 0x54
   12e9c:	9f16      	ldr	r7, [sp, #88]	; 0x58
    if (size == 0) {
   12e9e:	b923      	cbnz	r3, 12eaa <lfs_ctz_traverse+0x1c>
        return 0;
   12ea0:	2300      	movs	r3, #0
}
   12ea2:	4618      	mov	r0, r3
   12ea4:	b00b      	add	sp, #44	; 0x2c
   12ea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12eaa:	4680      	mov	r8, r0
   12eac:	4692      	mov	sl, r2
    lfs_off_t index = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
   12eae:	3b01      	subs	r3, #1
   12eb0:	9309      	str	r3, [sp, #36]	; 0x24
   12eb2:	a909      	add	r1, sp, #36	; 0x24
   12eb4:	f7ff ffcd 	bl	12e52 <lfs_ctz_index>
   12eb8:	4681      	mov	r9, r0
        int err = cb(data, head);
   12eba:	4621      	mov	r1, r4
   12ebc:	4638      	mov	r0, r7
   12ebe:	47b0      	blx	r6
        if (err) {
   12ec0:	4603      	mov	r3, r0
   12ec2:	2800      	cmp	r0, #0
   12ec4:	d1ed      	bne.n	12ea2 <lfs_ctz_traverse+0x14>
        if (index == 0) {
   12ec6:	f1b9 0f00 	cmp.w	r9, #0
   12eca:	d0ea      	beq.n	12ea2 <lfs_ctz_traverse+0x14>
        int count = 2 - (index & 1);
   12ecc:	f009 0b01 	and.w	fp, r9, #1
   12ed0:	f1cb 0502 	rsb	r5, fp, #2
        err = lfs_bd_read(lfs,
   12ed4:	00ab      	lsls	r3, r5, #2
   12ed6:	9303      	str	r3, [sp, #12]
   12ed8:	aa07      	add	r2, sp, #28
   12eda:	9202      	str	r2, [sp, #8]
   12edc:	2200      	movs	r2, #0
   12ede:	9201      	str	r2, [sp, #4]
   12ee0:	9400      	str	r4, [sp, #0]
   12ee2:	4652      	mov	r2, sl
   12ee4:	9905      	ldr	r1, [sp, #20]
   12ee6:	4640      	mov	r0, r8
   12ee8:	f7ff fb0a 	bl	12500 <lfs_bd_read>
        if (err) {
   12eec:	4604      	mov	r4, r0
   12eee:	b110      	cbz	r0, 12ef6 <lfs_ctz_traverse+0x68>
            return err;
   12ef0:	4603      	mov	r3, r0
   12ef2:	e7d6      	b.n	12ea2 <lfs_ctz_traverse+0x14>
        for (int i = 0; i < count-1; i++) {
   12ef4:	3401      	adds	r4, #1
   12ef6:	1e6b      	subs	r3, r5, #1
   12ef8:	42a3      	cmp	r3, r4
   12efa:	dd0a      	ble.n	12f12 <lfs_ctz_traverse+0x84>
            err = cb(data, heads[i]);
   12efc:	ab0a      	add	r3, sp, #40	; 0x28
   12efe:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   12f02:	f853 1c0c 	ldr.w	r1, [r3, #-12]
   12f06:	4638      	mov	r0, r7
   12f08:	47b0      	blx	r6
            if (err) {
   12f0a:	4603      	mov	r3, r0
   12f0c:	2800      	cmp	r0, #0
   12f0e:	d0f1      	beq.n	12ef4 <lfs_ctz_traverse+0x66>
   12f10:	e7c7      	b.n	12ea2 <lfs_ctz_traverse+0x14>
        head = heads[count-1];
   12f12:	aa0a      	add	r2, sp, #40	; 0x28
   12f14:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   12f18:	f853 4c0c 	ldr.w	r4, [r3, #-12]
        index -= count;
   12f1c:	f1ab 0b02 	sub.w	fp, fp, #2
   12f20:	44d9      	add	r9, fp
    while (true) {
   12f22:	e7ca      	b.n	12eba <lfs_ctz_traverse+0x2c>

00012f24 <lfs_ctz_find>:
        lfs_size_t pos, lfs_block_t *block, lfs_off_t *off) {
   12f24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12f28:	b089      	sub	sp, #36	; 0x24
   12f2a:	9305      	str	r3, [sp, #20]
   12f2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    if (size == 0) {
   12f2e:	b953      	cbnz	r3, 12f46 <lfs_ctz_find+0x22>
        *block = LFS_BLOCK_NULL;
   12f30:	f04f 33ff 	mov.w	r3, #4294967295
   12f34:	9a12      	ldr	r2, [sp, #72]	; 0x48
   12f36:	6013      	str	r3, [r2, #0]
        *off = 0;
   12f38:	2300      	movs	r3, #0
   12f3a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   12f3c:	6013      	str	r3, [r2, #0]
}
   12f3e:	4618      	mov	r0, r3
   12f40:	b009      	add	sp, #36	; 0x24
   12f42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12f46:	4607      	mov	r7, r0
   12f48:	4688      	mov	r8, r1
   12f4a:	4691      	mov	r9, r2
    lfs_off_t current = lfs_ctz_index(lfs, &(lfs_off_t){size-1});
   12f4c:	3b01      	subs	r3, #1
   12f4e:	9307      	str	r3, [sp, #28]
   12f50:	a907      	add	r1, sp, #28
   12f52:	f7ff ff7e 	bl	12e52 <lfs_ctz_index>
   12f56:	4605      	mov	r5, r0
    lfs_off_t target = lfs_ctz_index(lfs, &pos);
   12f58:	a911      	add	r1, sp, #68	; 0x44
   12f5a:	4638      	mov	r0, r7
   12f5c:	f7ff ff79 	bl	12e52 <lfs_ctz_index>
   12f60:	4606      	mov	r6, r0
    while (current > target) {
   12f62:	e003      	b.n	12f6c <lfs_ctz_find+0x48>
        current -= 1 << skip;
   12f64:	2301      	movs	r3, #1
   12f66:	fa03 f404 	lsl.w	r4, r3, r4
   12f6a:	1b2d      	subs	r5, r5, r4
    while (current > target) {
   12f6c:	42b5      	cmp	r5, r6
   12f6e:	d91c      	bls.n	12faa <lfs_ctz_find+0x86>
                lfs_npw2(current-target+1) - 1,
   12f70:	1bac      	subs	r4, r5, r6
    return 32 - __builtin_clz(a-1);
   12f72:	fab4 f484 	clz	r4, r4
        lfs_size_t skip = lfs_min(
   12f76:	f1c4 041f 	rsb	r4, r4, #31
    return __builtin_ctz(a);
   12f7a:	fa95 f3a5 	rbit	r3, r5
   12f7e:	fab3 f383 	clz	r3, r3
    return (a < b) ? a : b;
   12f82:	429c      	cmp	r4, r3
   12f84:	bf28      	it	cs
   12f86:	461c      	movcs	r4, r3
        int err = lfs_bd_read(lfs,
   12f88:	2304      	movs	r3, #4
   12f8a:	9303      	str	r3, [sp, #12]
   12f8c:	aa05      	add	r2, sp, #20
   12f8e:	9202      	str	r2, [sp, #8]
   12f90:	00a2      	lsls	r2, r4, #2
   12f92:	9201      	str	r2, [sp, #4]
   12f94:	9a05      	ldr	r2, [sp, #20]
   12f96:	9200      	str	r2, [sp, #0]
   12f98:	464a      	mov	r2, r9
   12f9a:	4641      	mov	r1, r8
   12f9c:	4638      	mov	r0, r7
   12f9e:	f7ff faaf 	bl	12500 <lfs_bd_read>
        if (err) {
   12fa2:	4603      	mov	r3, r0
   12fa4:	2800      	cmp	r0, #0
   12fa6:	d0dd      	beq.n	12f64 <lfs_ctz_find+0x40>
   12fa8:	e7c9      	b.n	12f3e <lfs_ctz_find+0x1a>
    *block = head;
   12faa:	9b05      	ldr	r3, [sp, #20]
   12fac:	9a12      	ldr	r2, [sp, #72]	; 0x48
   12fae:	6013      	str	r3, [r2, #0]
    *off = pos;
   12fb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   12fb2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   12fb4:	6013      	str	r3, [r2, #0]
    return 0;
   12fb6:	2300      	movs	r3, #0
   12fb8:	e7c1      	b.n	12f3e <lfs_ctz_find+0x1a>

00012fba <lfs_dir_close>:
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   12fba:	3028      	adds	r0, #40	; 0x28
   12fbc:	6803      	ldr	r3, [r0, #0]
   12fbe:	b12b      	cbz	r3, 12fcc <lfs_dir_close+0x12>
        if (*p == (struct lfs_mlist*)dir) {
   12fc0:	428b      	cmp	r3, r1
   12fc2:	d001      	beq.n	12fc8 <lfs_dir_close+0xe>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   12fc4:	4618      	mov	r0, r3
   12fc6:	e7f9      	b.n	12fbc <lfs_dir_close+0x2>
            *p = (*p)->next;
   12fc8:	681b      	ldr	r3, [r3, #0]
   12fca:	6003      	str	r3, [r0, #0]
}
   12fcc:	2000      	movs	r0, #0
   12fce:	4770      	bx	lr

00012fd0 <lfs_file_tell>:
}
   12fd0:	6b48      	ldr	r0, [r1, #52]	; 0x34
   12fd2:	4770      	bx	lr

00012fd4 <lfs_file_size>:
    if (file->flags & LFS_F_WRITING) {
   12fd4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   12fd6:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   12fda:	d005      	beq.n	12fe8 <lfs_file_size+0x14>
        return lfs_max(file->pos, file->ctz.size);
   12fdc:	6b48      	ldr	r0, [r1, #52]	; 0x34
   12fde:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   12fe0:	4298      	cmp	r0, r3
   12fe2:	bf38      	it	cc
   12fe4:	4618      	movcc	r0, r3
   12fe6:	4770      	bx	lr
        return file->ctz.size;
   12fe8:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
}
   12fea:	4770      	bx	lr

00012fec <lfs_stat>:
int lfs_stat(lfs_t *lfs, const char *path, struct lfs_info *info) {
   12fec:	b530      	push	{r4, r5, lr}
   12fee:	b08b      	sub	sp, #44	; 0x2c
   12ff0:	4604      	mov	r4, r0
   12ff2:	9101      	str	r1, [sp, #4]
   12ff4:	4615      	mov	r5, r2
    lfs_stag_t tag = lfs_dir_find(lfs, &cwd, &path, NULL);
   12ff6:	2300      	movs	r3, #0
   12ff8:	aa01      	add	r2, sp, #4
   12ffa:	a902      	add	r1, sp, #8
   12ffc:	f7f8 fb26 	bl	b64c <lfs_dir_find>
    if (tag < 0) {
   13000:	2800      	cmp	r0, #0
   13002:	db06      	blt.n	13012 <lfs_stat+0x26>
    int err = lfs_dir_getinfo(lfs, &cwd, lfs_tag_id(tag), info);
   13004:	462b      	mov	r3, r5
   13006:	f3c0 2289 	ubfx	r2, r0, #10, #10
   1300a:	a902      	add	r1, sp, #8
   1300c:	4620      	mov	r0, r4
   1300e:	f7f8 fbe1 	bl	b7d4 <lfs_dir_getinfo>
}
   13012:	b00b      	add	sp, #44	; 0x2c
   13014:	bd30      	pop	{r4, r5, pc}

00013016 <lfs_unmount>:
int lfs_unmount(lfs_t *lfs) {
   13016:	b508      	push	{r3, lr}
    int err = lfs_deinit(lfs);
   13018:	f7ff fea4 	bl	12d64 <lfs_deinit>
}
   1301c:	bd08      	pop	{r3, pc}

0001301e <lfs_dir_alloc>:
static int lfs_dir_alloc(lfs_t *lfs, lfs_mdir_t *dir) {
   1301e:	b570      	push	{r4, r5, r6, lr}
   13020:	b084      	sub	sp, #16
   13022:	4606      	mov	r6, r0
   13024:	460c      	mov	r4, r1
    for (int i = 0; i < 2; i++) {
   13026:	2500      	movs	r5, #0
   13028:	2d01      	cmp	r5, #1
   1302a:	dc0d      	bgt.n	13048 <lfs_dir_alloc+0x2a>
        int err = lfs_alloc(lfs, &dir->pair[(i+1)%2]);
   1302c:	3501      	adds	r5, #1
   1302e:	f005 0101 	and.w	r1, r5, #1
   13032:	bf48      	it	mi
   13034:	4249      	negmi	r1, r1
   13036:	eb04 0181 	add.w	r1, r4, r1, lsl #2
   1303a:	4630      	mov	r0, r6
   1303c:	f7f8 feb2 	bl	bda4 <lfs_alloc>
        if (err) {
   13040:	4603      	mov	r3, r0
   13042:	2800      	cmp	r0, #0
   13044:	d0f0      	beq.n	13028 <lfs_dir_alloc+0xa>
   13046:	e022      	b.n	1308e <lfs_dir_alloc+0x70>
    dir->rev = 0;
   13048:	2100      	movs	r1, #0
   1304a:	4622      	mov	r2, r4
   1304c:	f842 1f08 	str.w	r1, [r2, #8]!
    int err = lfs_bd_read(lfs,
   13050:	2304      	movs	r3, #4
   13052:	9303      	str	r3, [sp, #12]
   13054:	9202      	str	r2, [sp, #8]
   13056:	9101      	str	r1, [sp, #4]
   13058:	6822      	ldr	r2, [r4, #0]
   1305a:	9200      	str	r2, [sp, #0]
   1305c:	4632      	mov	r2, r6
   1305e:	4630      	mov	r0, r6
   13060:	f7ff fa4e 	bl	12500 <lfs_bd_read>
    dir->rev = lfs_fromle32(dir->rev);
   13064:	68a2      	ldr	r2, [r4, #8]
    if (err && err != LFS_ERR_CORRUPT) {
   13066:	4603      	mov	r3, r0
   13068:	b110      	cbz	r0, 13070 <lfs_dir_alloc+0x52>
   1306a:	f110 0f54 	cmn.w	r0, #84	; 0x54
   1306e:	d10e      	bne.n	1308e <lfs_dir_alloc+0x70>
    dir->rev += dir->rev & 1;
   13070:	3201      	adds	r2, #1
   13072:	f022 0201 	bic.w	r2, r2, #1
   13076:	60a2      	str	r2, [r4, #8]
    dir->off = sizeof(dir->rev);
   13078:	2304      	movs	r3, #4
   1307a:	60e3      	str	r3, [r4, #12]
    dir->etag = 0xffffffff;
   1307c:	f04f 32ff 	mov.w	r2, #4294967295
   13080:	6122      	str	r2, [r4, #16]
    dir->count = 0;
   13082:	2300      	movs	r3, #0
   13084:	82a3      	strh	r3, [r4, #20]
    dir->tail[0] = LFS_BLOCK_NULL;
   13086:	61a2      	str	r2, [r4, #24]
    dir->tail[1] = LFS_BLOCK_NULL;
   13088:	61e2      	str	r2, [r4, #28]
    dir->erased = false;
   1308a:	75a3      	strb	r3, [r4, #22]
    dir->split = false;
   1308c:	75e3      	strb	r3, [r4, #23]
}
   1308e:	4618      	mov	r0, r3
   13090:	b004      	add	sp, #16
   13092:	bd70      	pop	{r4, r5, r6, pc}

00013094 <lfs_file_outline>:
static int lfs_file_outline(lfs_t *lfs, lfs_file_t *file) {
   13094:	b538      	push	{r3, r4, r5, lr}
   13096:	4605      	mov	r5, r0
   13098:	460c      	mov	r4, r1
    file->off = file->pos;
   1309a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   1309c:	63cb      	str	r3, [r1, #60]	; 0x3c
    lfs_alloc_ack(lfs);
   1309e:	f7ff f9fc 	bl	1249a <lfs_alloc_ack>
    int err = lfs_file_relocate(lfs, file);
   130a2:	4621      	mov	r1, r4
   130a4:	4628      	mov	r0, r5
   130a6:	f7f8 feff 	bl	bea8 <lfs_file_relocate>
    if (err) {
   130aa:	b918      	cbnz	r0, 130b4 <lfs_file_outline+0x20>
    file->flags &= ~LFS_F_INLINE;
   130ac:	6b23      	ldr	r3, [r4, #48]	; 0x30
   130ae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
   130b2:	6323      	str	r3, [r4, #48]	; 0x30
}
   130b4:	bd38      	pop	{r3, r4, r5, pc}

000130b6 <lfs_ctz_extend>:
        lfs_block_t *block, lfs_off_t *off) {
   130b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130ba:	b08b      	sub	sp, #44	; 0x2c
   130bc:	4604      	mov	r4, r0
   130be:	460f      	mov	r7, r1
   130c0:	4615      	mov	r5, r2
   130c2:	4699      	mov	r9, r3
   130c4:	e043      	b.n	1314e <lfs_ctz_extend+0x98>
            if (size == 0) {
   130c6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   130c8:	b18b      	cbz	r3, 130ee <lfs_ctz_extend+0x38>
            lfs_size_t noff = size - 1;
   130ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
   130cc:	3b01      	subs	r3, #1
   130ce:	9308      	str	r3, [sp, #32]
            lfs_off_t index = lfs_ctz_index(lfs, &noff);
   130d0:	a908      	add	r1, sp, #32
   130d2:	4620      	mov	r0, r4
   130d4:	f7ff febd 	bl	12e52 <lfs_ctz_index>
            noff = noff + 1;
   130d8:	9b08      	ldr	r3, [sp, #32]
   130da:	3301      	adds	r3, #1
   130dc:	9308      	str	r3, [sp, #32]
            if (noff != lfs->cfg->block_size) {
   130de:	6ea2      	ldr	r2, [r4, #104]	; 0x68
   130e0:	69d2      	ldr	r2, [r2, #28]
   130e2:	4293      	cmp	r3, r2
   130e4:	d050      	beq.n	13188 <lfs_ctz_extend+0xd2>
                for (lfs_off_t i = 0; i < noff; i++) {
   130e6:	2600      	movs	r6, #0
   130e8:	46b8      	mov	r8, r7
   130ea:	464f      	mov	r7, r9
   130ec:	e007      	b.n	130fe <lfs_ctz_extend+0x48>
                *block = nblock;
   130ee:	9b07      	ldr	r3, [sp, #28]
   130f0:	9a15      	ldr	r2, [sp, #84]	; 0x54
   130f2:	6013      	str	r3, [r2, #0]
                *off = 0;
   130f4:	2300      	movs	r3, #0
   130f6:	9a16      	ldr	r2, [sp, #88]	; 0x58
   130f8:	6013      	str	r3, [r2, #0]
                return 0;
   130fa:	e041      	b.n	13180 <lfs_ctz_extend+0xca>
                for (lfs_off_t i = 0; i < noff; i++) {
   130fc:	3601      	adds	r6, #1
   130fe:	9b08      	ldr	r3, [sp, #32]
   13100:	42b3      	cmp	r3, r6
   13102:	d937      	bls.n	13174 <lfs_ctz_extend+0xbe>
                    err = lfs_bd_read(lfs,
   13104:	2201      	movs	r2, #1
   13106:	9203      	str	r2, [sp, #12]
   13108:	aa09      	add	r2, sp, #36	; 0x24
   1310a:	9202      	str	r2, [sp, #8]
   1310c:	9601      	str	r6, [sp, #4]
   1310e:	9700      	str	r7, [sp, #0]
   13110:	1b9b      	subs	r3, r3, r6
   13112:	462a      	mov	r2, r5
   13114:	2100      	movs	r1, #0
   13116:	4620      	mov	r0, r4
   13118:	f7ff f9f2 	bl	12500 <lfs_bd_read>
                    if (err) {
   1311c:	4603      	mov	r3, r0
   1311e:	bb38      	cbnz	r0, 13170 <lfs_ctz_extend+0xba>
                    err = lfs_bd_prog(lfs,
   13120:	2301      	movs	r3, #1
   13122:	9303      	str	r3, [sp, #12]
   13124:	aa09      	add	r2, sp, #36	; 0x24
   13126:	9202      	str	r2, [sp, #8]
   13128:	9601      	str	r6, [sp, #4]
   1312a:	9a07      	ldr	r2, [sp, #28]
   1312c:	9200      	str	r2, [sp, #0]
   1312e:	462a      	mov	r2, r5
   13130:	4641      	mov	r1, r8
   13132:	4620      	mov	r0, r4
   13134:	f7ff fc5b 	bl	129ee <lfs_bd_prog>
                    if (err) {
   13138:	4603      	mov	r3, r0
   1313a:	2800      	cmp	r0, #0
   1313c:	d0de      	beq.n	130fc <lfs_ctz_extend+0x46>
   1313e:	46b9      	mov	r9, r7
   13140:	4647      	mov	r7, r8
                        if (err == LFS_ERR_CORRUPT) {
   13142:	f110 0f54 	cmn.w	r0, #84	; 0x54
   13146:	d113      	bne.n	13170 <lfs_ctz_extend+0xba>
    rcache->block = LFS_BLOCK_NULL;
   13148:	f04f 33ff 	mov.w	r3, #4294967295
   1314c:	603b      	str	r3, [r7, #0]
        int err = lfs_alloc(lfs, &nblock);
   1314e:	a907      	add	r1, sp, #28
   13150:	4620      	mov	r0, r4
   13152:	f7f8 fe27 	bl	bda4 <lfs_alloc>
        if (err) {
   13156:	9005      	str	r0, [sp, #20]
   13158:	b990      	cbnz	r0, 13180 <lfs_ctz_extend+0xca>
            err = lfs_bd_erase(lfs, nblock);
   1315a:	9907      	ldr	r1, [sp, #28]
   1315c:	4620      	mov	r0, r4
   1315e:	f7ff f97d 	bl	1245c <lfs_bd_erase>
            if (err) {
   13162:	9005      	str	r0, [sp, #20]
   13164:	2800      	cmp	r0, #0
   13166:	d0ae      	beq.n	130c6 <lfs_ctz_extend+0x10>
                if (err == LFS_ERR_CORRUPT) {
   13168:	f110 0f54 	cmn.w	r0, #84	; 0x54
   1316c:	d0ec      	beq.n	13148 <lfs_ctz_extend+0x92>
   1316e:	e007      	b.n	13180 <lfs_ctz_extend+0xca>
                        return err;
   13170:	9305      	str	r3, [sp, #20]
   13172:	e005      	b.n	13180 <lfs_ctz_extend+0xca>
                *block = nblock;
   13174:	9b07      	ldr	r3, [sp, #28]
   13176:	9a15      	ldr	r2, [sp, #84]	; 0x54
   13178:	6013      	str	r3, [r2, #0]
                *off = noff;
   1317a:	9b08      	ldr	r3, [sp, #32]
   1317c:	9a16      	ldr	r2, [sp, #88]	; 0x58
   1317e:	6013      	str	r3, [r2, #0]
}
   13180:	9805      	ldr	r0, [sp, #20]
   13182:	b00b      	add	sp, #44	; 0x2c
   13184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            index += 1;
   13188:	3001      	adds	r0, #1
    return __builtin_ctz(a);
   1318a:	fa90 faa0 	rbit	sl, r0
   1318e:	faba fa8a 	clz	sl, sl
            lfs_size_t skips = lfs_ctz(index) + 1;
   13192:	f10a 0b01 	add.w	fp, sl, #1
            lfs_block_t nhead = head;
   13196:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
            for (lfs_off_t i = 0; i < skips; i++) {
   1319a:	2600      	movs	r6, #0
   1319c:	46a0      	mov	r8, r4
   1319e:	e006      	b.n	131ae <lfs_ctz_extend+0xf8>
   131a0:	4644      	mov	r4, r8
                    if (err == LFS_ERR_CORRUPT) {
   131a2:	f110 0f54 	cmn.w	r0, #84	; 0x54
   131a6:	d0cf      	beq.n	13148 <lfs_ctz_extend+0x92>
                    return err;
   131a8:	9005      	str	r0, [sp, #20]
   131aa:	e7e9      	b.n	13180 <lfs_ctz_extend+0xca>
            for (lfs_off_t i = 0; i < skips; i++) {
   131ac:	3601      	adds	r6, #1
   131ae:	45b3      	cmp	fp, r6
   131b0:	d921      	bls.n	131f6 <lfs_ctz_extend+0x140>
                err = lfs_bd_prog(lfs, pcache, rcache, true,
   131b2:	00b4      	lsls	r4, r6, #2
   131b4:	2304      	movs	r3, #4
   131b6:	9303      	str	r3, [sp, #12]
   131b8:	ab09      	add	r3, sp, #36	; 0x24
   131ba:	9302      	str	r3, [sp, #8]
   131bc:	9401      	str	r4, [sp, #4]
   131be:	9b07      	ldr	r3, [sp, #28]
   131c0:	9300      	str	r3, [sp, #0]
   131c2:	2301      	movs	r3, #1
   131c4:	462a      	mov	r2, r5
   131c6:	4639      	mov	r1, r7
   131c8:	4640      	mov	r0, r8
   131ca:	f7ff fc10 	bl	129ee <lfs_bd_prog>
                nhead = lfs_fromle32(nhead);
   131ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
                if (err) {
   131d0:	2800      	cmp	r0, #0
   131d2:	d1e5      	bne.n	131a0 <lfs_ctz_extend+0xea>
                if (i != skips-1) {
   131d4:	45b2      	cmp	sl, r6
   131d6:	d0e9      	beq.n	131ac <lfs_ctz_extend+0xf6>
                    err = lfs_bd_read(lfs,
   131d8:	2304      	movs	r3, #4
   131da:	9303      	str	r3, [sp, #12]
   131dc:	a909      	add	r1, sp, #36	; 0x24
   131de:	9102      	str	r1, [sp, #8]
   131e0:	9401      	str	r4, [sp, #4]
   131e2:	9200      	str	r2, [sp, #0]
   131e4:	462a      	mov	r2, r5
   131e6:	2100      	movs	r1, #0
   131e8:	4640      	mov	r0, r8
   131ea:	f7ff f989 	bl	12500 <lfs_bd_read>
                    if (err) {
   131ee:	2800      	cmp	r0, #0
   131f0:	d0dc      	beq.n	131ac <lfs_ctz_extend+0xf6>
                        return err;
   131f2:	9005      	str	r0, [sp, #20]
   131f4:	e7c4      	b.n	13180 <lfs_ctz_extend+0xca>
            *block = nblock;
   131f6:	9b07      	ldr	r3, [sp, #28]
   131f8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   131fa:	6013      	str	r3, [r2, #0]
            *off = 4*skips;
   131fc:	ea4f 038b 	mov.w	r3, fp, lsl #2
   13200:	9a16      	ldr	r2, [sp, #88]	; 0x58
   13202:	6013      	str	r3, [r2, #0]
            return 0;
   13204:	e7bc      	b.n	13180 <lfs_ctz_extend+0xca>

00013206 <lfs_file_write>:
        const void *buffer, lfs_size_t size) {
   13206:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1320a:	b087      	sub	sp, #28
   1320c:	4605      	mov	r5, r0
   1320e:	460c      	mov	r4, r1
   13210:	4617      	mov	r7, r2
   13212:	4698      	mov	r8, r3
    if (file->flags & LFS_F_READING) {
   13214:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   13216:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   1321a:	d126      	bne.n	1326a <lfs_file_write+0x64>
    if ((file->flags & LFS_O_APPEND) && file->pos < file->ctz.size) {
   1321c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1321e:	f413 6f00 	tst.w	r3, #2048	; 0x800
   13222:	d004      	beq.n	1322e <lfs_file_write+0x28>
   13224:	6b61      	ldr	r1, [r4, #52]	; 0x34
   13226:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   13228:	4291      	cmp	r1, r2
   1322a:	d200      	bcs.n	1322e <lfs_file_write+0x28>
        file->pos = file->ctz.size;
   1322c:	6362      	str	r2, [r4, #52]	; 0x34
    if (file->pos + size > lfs->file_max) {
   1322e:	6b66      	ldr	r6, [r4, #52]	; 0x34
   13230:	eb06 0108 	add.w	r1, r6, r8
   13234:	6f2a      	ldr	r2, [r5, #112]	; 0x70
   13236:	4291      	cmp	r1, r2
   13238:	f200 80db 	bhi.w	133f2 <lfs_file_write+0x1ec>
    if (!(file->flags & LFS_F_WRITING) && file->pos > file->ctz.size) {
   1323c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   13240:	d119      	bne.n	13276 <lfs_file_write+0x70>
   13242:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   13244:	429e      	cmp	r6, r3
   13246:	d916      	bls.n	13276 <lfs_file_write+0x70>
        file->pos = file->ctz.size;
   13248:	6363      	str	r3, [r4, #52]	; 0x34
        while (file->pos < pos) {
   1324a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1324c:	429e      	cmp	r6, r3
   1324e:	d912      	bls.n	13276 <lfs_file_write+0x70>
            lfs_ssize_t res = lfs_file_write(lfs, file, &(uint8_t){0}, 1);
   13250:	2300      	movs	r3, #0
   13252:	f88d 3017 	strb.w	r3, [sp, #23]
   13256:	2301      	movs	r3, #1
   13258:	f10d 0217 	add.w	r2, sp, #23
   1325c:	4621      	mov	r1, r4
   1325e:	4628      	mov	r0, r5
   13260:	f7ff ffd1 	bl	13206 <lfs_file_write>
            if (res < 0) {
   13264:	1e01      	subs	r1, r0, #0
   13266:	daf0      	bge.n	1324a <lfs_file_write+0x44>
   13268:	e0ac      	b.n	133c4 <lfs_file_write+0x1be>
        int err = lfs_file_flush(lfs, file);
   1326a:	f7f8 fea3 	bl	bfb4 <lfs_file_flush>
        if (err) {
   1326e:	4601      	mov	r1, r0
   13270:	2800      	cmp	r0, #0
   13272:	d0d3      	beq.n	1321c <lfs_file_write+0x16>
   13274:	e0a6      	b.n	133c4 <lfs_file_write+0x1be>
    if ((file->flags & LFS_F_INLINE) &&
   13276:	6b23      	ldr	r3, [r4, #48]	; 0x30
   13278:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1327c:	d014      	beq.n	132a8 <lfs_file_write+0xa2>
            lfs_max(file->pos+nsize, file->ctz.size) >
   1327e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13280:	eb03 0208 	add.w	r2, r3, r8
   13284:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    return (a > b) ? a : b;
   13286:	429a      	cmp	r2, r3
   13288:	bf38      	it	cc
   1328a:	461a      	movcc	r2, r3
                lfs->cfg->cache_size, lfs->cfg->block_size/8))) {
   1328c:	6ea9      	ldr	r1, [r5, #104]	; 0x68
            lfs_min(0x3fe, lfs_min(
   1328e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
                lfs->cfg->cache_size, lfs->cfg->block_size/8))) {
   13290:	69c9      	ldr	r1, [r1, #28]
            lfs_min(0x3fe, lfs_min(
   13292:	08c9      	lsrs	r1, r1, #3
    return (a < b) ? a : b;
   13294:	428b      	cmp	r3, r1
   13296:	bf28      	it	cs
   13298:	460b      	movcs	r3, r1
   1329a:	f240 31fe 	movw	r1, #1022	; 0x3fe
   1329e:	428b      	cmp	r3, r1
   132a0:	bf28      	it	cs
   132a2:	460b      	movcs	r3, r1
    if ((file->flags & LFS_F_INLINE) &&
   132a4:	429a      	cmp	r2, r3
   132a6:	d82d      	bhi.n	13304 <lfs_file_write+0xfe>
        const void *buffer, lfs_size_t size) {
   132a8:	46c1      	mov	r9, r8
    while (nsize > 0) {
   132aa:	f1b9 0f00 	cmp.w	r9, #0
   132ae:	f000 809a 	beq.w	133e6 <lfs_file_write+0x1e0>
        if (!(file->flags & LFS_F_WRITING) ||
   132b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   132b4:	f413 3200 	ands.w	r2, r3, #131072	; 0x20000
   132b8:	d004      	beq.n	132c4 <lfs_file_write+0xbe>
                file->off == lfs->cfg->block_size) {
   132ba:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   132bc:	6ea9      	ldr	r1, [r5, #104]	; 0x68
   132be:	69c9      	ldr	r1, [r1, #28]
        if (!(file->flags & LFS_F_WRITING) ||
   132c0:	4288      	cmp	r0, r1
   132c2:	d156      	bne.n	13372 <lfs_file_write+0x16c>
            if (!(file->flags & LFS_F_INLINE)) {
   132c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   132c8:	d14a      	bne.n	13360 <lfs_file_write+0x15a>
                if (!(file->flags & LFS_F_WRITING) && file->pos > 0) {
   132ca:	b90a      	cbnz	r2, 132d0 <lfs_file_write+0xca>
   132cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   132ce:	bb2b      	cbnz	r3, 1331c <lfs_file_write+0x116>
                lfs_alloc_ack(lfs);
   132d0:	4628      	mov	r0, r5
   132d2:	f7ff f8e2 	bl	1249a <lfs_alloc_ack>
                int err = lfs_ctz_extend(lfs, &file->cache, &lfs->rcache,
   132d6:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   132da:	9302      	str	r3, [sp, #8]
   132dc:	f104 0338 	add.w	r3, r4, #56	; 0x38
   132e0:	9301      	str	r3, [sp, #4]
   132e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   132e4:	9300      	str	r3, [sp, #0]
   132e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   132e8:	462a      	mov	r2, r5
   132ea:	f104 0140 	add.w	r1, r4, #64	; 0x40
   132ee:	4628      	mov	r0, r5
   132f0:	f7ff fee1 	bl	130b6 <lfs_ctz_extend>
                if (err) {
   132f4:	4601      	mov	r1, r0
   132f6:	2800      	cmp	r0, #0
   132f8:	d037      	beq.n	1336a <lfs_file_write+0x164>
                    file->flags |= LFS_F_ERRED;
   132fa:	6b23      	ldr	r3, [r4, #48]	; 0x30
   132fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   13300:	6323      	str	r3, [r4, #48]	; 0x30
                    return err;
   13302:	e05f      	b.n	133c4 <lfs_file_write+0x1be>
        int err = lfs_file_outline(lfs, file);
   13304:	4621      	mov	r1, r4
   13306:	4628      	mov	r0, r5
   13308:	f7ff fec4 	bl	13094 <lfs_file_outline>
        if (err) {
   1330c:	4601      	mov	r1, r0
   1330e:	2800      	cmp	r0, #0
   13310:	d0ca      	beq.n	132a8 <lfs_file_write+0xa2>
            file->flags |= LFS_F_ERRED;
   13312:	6b23      	ldr	r3, [r4, #48]	; 0x30
   13314:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   13318:	6323      	str	r3, [r4, #48]	; 0x30
            return err;
   1331a:	e053      	b.n	133c4 <lfs_file_write+0x1be>
                    int err = lfs_ctz_find(lfs, NULL, &file->cache,
   1331c:	f104 023c 	add.w	r2, r4, #60	; 0x3c
   13320:	9203      	str	r2, [sp, #12]
   13322:	f104 0238 	add.w	r2, r4, #56	; 0x38
   13326:	9202      	str	r2, [sp, #8]
   13328:	3b01      	subs	r3, #1
   1332a:	9301      	str	r3, [sp, #4]
   1332c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   1332e:	9300      	str	r3, [sp, #0]
   13330:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   13332:	f104 0240 	add.w	r2, r4, #64	; 0x40
   13336:	2100      	movs	r1, #0
   13338:	4628      	mov	r0, r5
   1333a:	f7ff fdf3 	bl	12f24 <lfs_ctz_find>
                    if (err) {
   1333e:	4601      	mov	r1, r0
   13340:	b948      	cbnz	r0, 13356 <lfs_file_write+0x150>
    memset(pcache->buffer, 0xff, lfs->cfg->cache_size);
   13342:	6eab      	ldr	r3, [r5, #104]	; 0x68
   13344:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   13346:	21ff      	movs	r1, #255	; 0xff
   13348:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
   1334a:	f7fd ff73 	bl	11234 <memset>
    pcache->block = LFS_BLOCK_NULL;
   1334e:	f04f 33ff 	mov.w	r3, #4294967295
   13352:	6423      	str	r3, [r4, #64]	; 0x40
}
   13354:	e7bc      	b.n	132d0 <lfs_file_write+0xca>
                        file->flags |= LFS_F_ERRED;
   13356:	6b23      	ldr	r3, [r4, #48]	; 0x30
   13358:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   1335c:	6323      	str	r3, [r4, #48]	; 0x30
                        return err;
   1335e:	e031      	b.n	133c4 <lfs_file_write+0x1be>
                file->block = LFS_BLOCK_INLINE;
   13360:	f06f 0301 	mvn.w	r3, #1
   13364:	63a3      	str	r3, [r4, #56]	; 0x38
                file->off = file->pos;
   13366:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13368:	63e3      	str	r3, [r4, #60]	; 0x3c
            file->flags |= LFS_F_WRITING;
   1336a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1336c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
   13370:	6323      	str	r3, [r4, #48]	; 0x30
        lfs_size_t diff = lfs_min(nsize, lfs->cfg->block_size - file->off);
   13372:	6eab      	ldr	r3, [r5, #104]	; 0x68
   13374:	69de      	ldr	r6, [r3, #28]
   13376:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   13378:	1af6      	subs	r6, r6, r3
   1337a:	454e      	cmp	r6, r9
   1337c:	bf28      	it	cs
   1337e:	464e      	movcs	r6, r9
            int err = lfs_bd_prog(lfs, &file->cache, &lfs->rcache, true,
   13380:	9603      	str	r6, [sp, #12]
   13382:	9702      	str	r7, [sp, #8]
   13384:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   13386:	9301      	str	r3, [sp, #4]
   13388:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1338a:	9300      	str	r3, [sp, #0]
   1338c:	2301      	movs	r3, #1
   1338e:	462a      	mov	r2, r5
   13390:	f104 0140 	add.w	r1, r4, #64	; 0x40
   13394:	4628      	mov	r0, r5
   13396:	f7ff fb2a 	bl	129ee <lfs_bd_prog>
            if (err) {
   1339a:	4601      	mov	r1, r0
   1339c:	b1b0      	cbz	r0, 133cc <lfs_file_write+0x1c6>
                if (err == LFS_ERR_CORRUPT) {
   1339e:	f110 0f54 	cmn.w	r0, #84	; 0x54
   133a2:	d10b      	bne.n	133bc <lfs_file_write+0x1b6>
            err = lfs_file_relocate(lfs, file);
   133a4:	4621      	mov	r1, r4
   133a6:	4628      	mov	r0, r5
   133a8:	f7f8 fd7e 	bl	bea8 <lfs_file_relocate>
            if (err) {
   133ac:	4601      	mov	r1, r0
   133ae:	2800      	cmp	r0, #0
   133b0:	d0e6      	beq.n	13380 <lfs_file_write+0x17a>
                file->flags |= LFS_F_ERRED;
   133b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   133b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   133b8:	6323      	str	r3, [r4, #48]	; 0x30
                return err;
   133ba:	e003      	b.n	133c4 <lfs_file_write+0x1be>
                file->flags |= LFS_F_ERRED;
   133bc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   133be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   133c2:	6323      	str	r3, [r4, #48]	; 0x30
}
   133c4:	4608      	mov	r0, r1
   133c6:	b007      	add	sp, #28
   133c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        file->pos += diff;
   133cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   133ce:	4433      	add	r3, r6
   133d0:	6363      	str	r3, [r4, #52]	; 0x34
        file->off += diff;
   133d2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   133d4:	4433      	add	r3, r6
   133d6:	63e3      	str	r3, [r4, #60]	; 0x3c
        data += diff;
   133d8:	4437      	add	r7, r6
        nsize -= diff;
   133da:	eba9 0906 	sub.w	r9, r9, r6
        lfs_alloc_ack(lfs);
   133de:	4628      	mov	r0, r5
   133e0:	f7ff f85b 	bl	1249a <lfs_alloc_ack>
   133e4:	e761      	b.n	132aa <lfs_file_write+0xa4>
    file->flags &= ~LFS_F_ERRED;
   133e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   133e8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
   133ec:	6323      	str	r3, [r4, #48]	; 0x30
    return size;
   133ee:	4641      	mov	r1, r8
   133f0:	e7e8      	b.n	133c4 <lfs_file_write+0x1be>
        return LFS_ERR_FBIG;
   133f2:	f06f 011a 	mvn.w	r1, #26
   133f6:	e7e5      	b.n	133c4 <lfs_file_write+0x1be>

000133f8 <lfs_file_seek>:
        lfs_soff_t off, int whence) {
   133f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   133fa:	4606      	mov	r6, r0
   133fc:	460c      	mov	r4, r1
   133fe:	4617      	mov	r7, r2
   13400:	461d      	mov	r5, r3
    int err = lfs_file_flush(lfs, file);
   13402:	f7f8 fdd7 	bl	bfb4 <lfs_file_flush>
    if (err) {
   13406:	b930      	cbnz	r0, 13416 <lfs_file_seek+0x1e>
    lfs_off_t npos = file->pos;
   13408:	6b60      	ldr	r0, [r4, #52]	; 0x34
    if (whence == LFS_SEEK_SET) {
   1340a:	b92d      	cbnz	r5, 13418 <lfs_file_seek+0x20>
        npos = off;
   1340c:	4638      	mov	r0, r7
    if (npos > lfs->file_max) {
   1340e:	6f33      	ldr	r3, [r6, #112]	; 0x70
   13410:	4283      	cmp	r3, r0
   13412:	d30a      	bcc.n	1342a <lfs_file_seek+0x32>
    file->pos = npos;
   13414:	6360      	str	r0, [r4, #52]	; 0x34
}
   13416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    } else if (whence == LFS_SEEK_CUR) {
   13418:	2d01      	cmp	r5, #1
   1341a:	d004      	beq.n	13426 <lfs_file_seek+0x2e>
    } else if (whence == LFS_SEEK_END) {
   1341c:	2d02      	cmp	r5, #2
   1341e:	d1f6      	bne.n	1340e <lfs_file_seek+0x16>
        npos = file->ctz.size + off;
   13420:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   13422:	19d8      	adds	r0, r3, r7
   13424:	e7f3      	b.n	1340e <lfs_file_seek+0x16>
        npos = file->pos + off;
   13426:	4438      	add	r0, r7
   13428:	e7f1      	b.n	1340e <lfs_file_seek+0x16>
        return LFS_ERR_INVAL;
   1342a:	f06f 0015 	mvn.w	r0, #21
   1342e:	e7f2      	b.n	13416 <lfs_file_seek+0x1e>

00013430 <lfs_file_truncate>:
int lfs_file_truncate(lfs_t *lfs, lfs_file_t *file, lfs_off_t size) {
   13430:	b5f0      	push	{r4, r5, r6, r7, lr}
   13432:	b087      	sub	sp, #28
    if (size > LFS_FILE_MAX) {
   13434:	1e15      	subs	r5, r2, #0
   13436:	db4b      	blt.n	134d0 <lfs_file_truncate+0xa0>
   13438:	4606      	mov	r6, r0
   1343a:	460c      	mov	r4, r1
    lfs_off_t pos = file->pos;
   1343c:	6b4f      	ldr	r7, [r1, #52]	; 0x34
    lfs_off_t oldsize = lfs_file_size(lfs, file);
   1343e:	f7ff fdc9 	bl	12fd4 <lfs_file_size>
    if (size < oldsize) {
   13442:	4285      	cmp	r5, r0
   13444:	d313      	bcc.n	1346e <lfs_file_truncate+0x3e>
    } else if (size > oldsize) {
   13446:	4285      	cmp	r5, r0
   13448:	d92e      	bls.n	134a8 <lfs_file_truncate+0x78>
        if (file->pos != oldsize) {
   1344a:	4287      	cmp	r7, r0
   1344c:	d137      	bne.n	134be <lfs_file_truncate+0x8e>
        while (file->pos < size) {
   1344e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   13450:	42ab      	cmp	r3, r5
   13452:	d229      	bcs.n	134a8 <lfs_file_truncate+0x78>
            lfs_ssize_t res = lfs_file_write(lfs, file, &(uint8_t){0}, 1);
   13454:	2300      	movs	r3, #0
   13456:	f88d 3017 	strb.w	r3, [sp, #23]
   1345a:	2301      	movs	r3, #1
   1345c:	f10d 0217 	add.w	r2, sp, #23
   13460:	4621      	mov	r1, r4
   13462:	4630      	mov	r0, r6
   13464:	f7ff fecf 	bl	13206 <lfs_file_write>
            if (res < 0) {
   13468:	2800      	cmp	r0, #0
   1346a:	daf0      	bge.n	1344e <lfs_file_truncate+0x1e>
   1346c:	e025      	b.n	134ba <lfs_file_truncate+0x8a>
        int err = lfs_file_flush(lfs, file);
   1346e:	4621      	mov	r1, r4
   13470:	4630      	mov	r0, r6
   13472:	f7f8 fd9f 	bl	bfb4 <lfs_file_flush>
        if (err) {
   13476:	bb00      	cbnz	r0, 134ba <lfs_file_truncate+0x8a>
        err = lfs_ctz_find(lfs, NULL, &file->cache,
   13478:	f104 033c 	add.w	r3, r4, #60	; 0x3c
   1347c:	9303      	str	r3, [sp, #12]
   1347e:	f104 0338 	add.w	r3, r4, #56	; 0x38
   13482:	9302      	str	r3, [sp, #8]
   13484:	9501      	str	r5, [sp, #4]
   13486:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   13488:	9300      	str	r3, [sp, #0]
   1348a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1348c:	f104 0240 	add.w	r2, r4, #64	; 0x40
   13490:	2100      	movs	r1, #0
   13492:	4630      	mov	r0, r6
   13494:	f7ff fd46 	bl	12f24 <lfs_ctz_find>
        if (err) {
   13498:	b978      	cbnz	r0, 134ba <lfs_file_truncate+0x8a>
        file->ctz.head = file->block;
   1349a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   1349c:	62a3      	str	r3, [r4, #40]	; 0x28
        file->ctz.size = size;
   1349e:	62e5      	str	r5, [r4, #44]	; 0x2c
        file->flags |= LFS_F_DIRTY | LFS_F_READING;
   134a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   134a2:	f443 23a0 	orr.w	r3, r3, #327680	; 0x50000
   134a6:	6323      	str	r3, [r4, #48]	; 0x30
    lfs_soff_t res = lfs_file_seek(lfs, file, pos, LFS_SEEK_SET);
   134a8:	2300      	movs	r3, #0
   134aa:	463a      	mov	r2, r7
   134ac:	4621      	mov	r1, r4
   134ae:	4630      	mov	r0, r6
   134b0:	f7ff ffa2 	bl	133f8 <lfs_file_seek>
    if (res < 0) {
   134b4:	2800      	cmp	r0, #0
   134b6:	db00      	blt.n	134ba <lfs_file_truncate+0x8a>
    return 0;
   134b8:	2000      	movs	r0, #0
}
   134ba:	b007      	add	sp, #28
   134bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
            lfs_soff_t res = lfs_file_seek(lfs, file, 0, LFS_SEEK_END);
   134be:	2302      	movs	r3, #2
   134c0:	2200      	movs	r2, #0
   134c2:	4621      	mov	r1, r4
   134c4:	4630      	mov	r0, r6
   134c6:	f7ff ff97 	bl	133f8 <lfs_file_seek>
            if (res < 0) {
   134ca:	2800      	cmp	r0, #0
   134cc:	dabf      	bge.n	1344e <lfs_file_truncate+0x1e>
   134ce:	e7f4      	b.n	134ba <lfs_file_truncate+0x8a>
        return LFS_ERR_INVAL;
   134d0:	f06f 0015 	mvn.w	r0, #21
   134d4:	e7f1      	b.n	134ba <lfs_file_truncate+0x8a>

000134d6 <lfs_fs_demove>:
    return lfs_tag_type1(a->tag);
   134d6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    return (tag & 0x70000000) >> 20;
   134d8:	0d1b      	lsrs	r3, r3, #20
    if (!lfs_gstate_hasmove(&lfs->gdisk)) {
   134da:	f413 6fe0 	tst.w	r3, #1792	; 0x700
   134de:	d101      	bne.n	134e4 <lfs_fs_demove+0xe>
        return 0;
   134e0:	2000      	movs	r0, #0
}
   134e2:	4770      	bx	lr
static int lfs_fs_demove(lfs_t *lfs) {
   134e4:	b530      	push	{r4, r5, lr}
   134e6:	b08b      	sub	sp, #44	; 0x2c
   134e8:	4604      	mov	r4, r0
    int err = lfs_dir_fetch(lfs, &movedir, lfs->gdisk.pair);
   134ea:	f100 0240 	add.w	r2, r0, #64	; 0x40
   134ee:	4669      	mov	r1, sp
   134f0:	f7ff f94e 	bl	12790 <lfs_dir_fetch>
    if (err) {
   134f4:	b108      	cbz	r0, 134fa <lfs_fs_demove+0x24>
}
   134f6:	b00b      	add	sp, #44	; 0x2c
   134f8:	bd30      	pop	{r4, r5, pc}
    uint16_t moveid = lfs_tag_id(lfs->gdisk.tag);
   134fa:	6be5      	ldr	r5, [r4, #60]	; 0x3c
    return (tag & 0x000ffc00) >> 10;
   134fc:	f3c5 2589 	ubfx	r5, r5, #10, #10
    lfs_fs_prepmove(lfs, 0x3ff, NULL);
   13500:	2200      	movs	r2, #0
   13502:	f240 31ff 	movw	r1, #1023	; 0x3ff
   13506:	4620      	mov	r0, r4
   13508:	f7f7 fbae 	bl	ac68 <lfs_fs_prepmove>
    err = lfs_dir_commit(lfs, &movedir, LFS_MKATTRS(
   1350c:	2300      	movs	r3, #0
   1350e:	9309      	str	r3, [sp, #36]	; 0x24
   13510:	02ab      	lsls	r3, r5, #10
   13512:	f043 439f 	orr.w	r3, r3, #1333788672	; 0x4f800000
   13516:	f443 03e0 	orr.w	r3, r3, #7340032	; 0x700000
   1351a:	9308      	str	r3, [sp, #32]
   1351c:	2301      	movs	r3, #1
   1351e:	aa08      	add	r2, sp, #32
   13520:	4669      	mov	r1, sp
   13522:	4620      	mov	r0, r4
   13524:	f7f9 f858 	bl	c5d8 <lfs_dir_commit>
    if (err) {
   13528:	e7e5      	b.n	134f6 <lfs_fs_demove+0x20>

0001352a <lfs_fs_forceconsistency>:
static int lfs_fs_forceconsistency(lfs_t *lfs) {
   1352a:	b510      	push	{r4, lr}
   1352c:	4604      	mov	r4, r0
    int err = lfs_fs_demove(lfs);
   1352e:	f7ff ffd2 	bl	134d6 <lfs_fs_demove>
    if (err) {
   13532:	b100      	cbz	r0, 13536 <lfs_fs_forceconsistency+0xc>
}
   13534:	bd10      	pop	{r4, pc}
    err = lfs_fs_deorphan(lfs);
   13536:	4620      	mov	r0, r4
   13538:	f7f9 fa8c 	bl	ca54 <lfs_fs_deorphan>
    if (err) {
   1353c:	e7fa      	b.n	13534 <lfs_fs_forceconsistency+0xa>

0001353e <lfs_file_sync>:
    if (file->flags & LFS_F_ERRED) {
   1353e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   13540:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   13544:	d001      	beq.n	1354a <lfs_file_sync+0xc>
        return 0;
   13546:	2000      	movs	r0, #0
}
   13548:	4770      	bx	lr
int lfs_file_sync(lfs_t *lfs, lfs_file_t *file) {
   1354a:	b530      	push	{r4, r5, lr}
   1354c:	b087      	sub	sp, #28
   1354e:	4605      	mov	r5, r0
   13550:	460c      	mov	r4, r1
    int err = lfs_file_flush(lfs, file);
   13552:	f7f8 fd2f 	bl	bfb4 <lfs_file_flush>
    if (err) {
   13556:	2800      	cmp	r0, #0
   13558:	d132      	bne.n	135c0 <lfs_file_sync+0x82>
    if ((file->flags & LFS_F_DIRTY) &&
   1355a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1355c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   13560:	d032      	beq.n	135c8 <lfs_file_sync+0x8a>
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
   13562:	68a2      	ldr	r2, [r4, #8]
   13564:	f1b2 3fff 	cmp.w	r2, #4294967295
   13568:	d032      	beq.n	135d0 <lfs_file_sync+0x92>
   1356a:	68e2      	ldr	r2, [r4, #12]
   1356c:	f1b2 3fff 	cmp.w	r2, #4294967295
   13570:	d02c      	beq.n	135cc <lfs_file_sync+0x8e>
   13572:	4602      	mov	r2, r0
    if ((file->flags & LFS_F_DIRTY) &&
   13574:	f012 0f01 	tst.w	r2, #1
   13578:	d126      	bne.n	135c8 <lfs_file_sync+0x8a>
        if (file->flags & LFS_F_INLINE) {
   1357a:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   1357e:	d029      	beq.n	135d4 <lfs_file_sync+0x96>
            buffer = file->cache.buffer;
   13580:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
            size = file->ctz.size;
   13582:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
            type = LFS_TYPE_INLINESTRUCT;
   13584:	f240 2201 	movw	r2, #513	; 0x201
        err = lfs_dir_commit(lfs, &file->m, LFS_MKATTRS(
   13588:	88a3      	ldrh	r3, [r4, #4]
   1358a:	029b      	lsls	r3, r3, #10
   1358c:	ea43 5202 	orr.w	r2, r3, r2, lsl #20
   13590:	4302      	orrs	r2, r0
   13592:	9202      	str	r2, [sp, #8]
   13594:	9103      	str	r1, [sp, #12]
   13596:	6d22      	ldr	r2, [r4, #80]	; 0x50
   13598:	6891      	ldr	r1, [r2, #8]
   1359a:	430b      	orrs	r3, r1
   1359c:	f043 5381 	orr.w	r3, r3, #270532608	; 0x10200000
   135a0:	9304      	str	r3, [sp, #16]
   135a2:	6853      	ldr	r3, [r2, #4]
   135a4:	9305      	str	r3, [sp, #20]
   135a6:	2302      	movs	r3, #2
   135a8:	aa02      	add	r2, sp, #8
   135aa:	f104 0108 	add.w	r1, r4, #8
   135ae:	4628      	mov	r0, r5
   135b0:	f7f9 f812 	bl	c5d8 <lfs_dir_commit>
        if (err) {
   135b4:	b9c0      	cbnz	r0, 135e8 <lfs_file_sync+0xaa>
        file->flags &= ~LFS_F_DIRTY;
   135b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   135b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
   135bc:	6323      	str	r3, [r4, #48]	; 0x30
   135be:	e003      	b.n	135c8 <lfs_file_sync+0x8a>
        file->flags |= LFS_F_ERRED;
   135c0:	6b23      	ldr	r3, [r4, #48]	; 0x30
   135c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   135c6:	6323      	str	r3, [r4, #48]	; 0x30
}
   135c8:	b007      	add	sp, #28
   135ca:	bd30      	pop	{r4, r5, pc}
    return pair[0] == LFS_BLOCK_NULL || pair[1] == LFS_BLOCK_NULL;
   135cc:	2201      	movs	r2, #1
   135ce:	e7d1      	b.n	13574 <lfs_file_sync+0x36>
   135d0:	2201      	movs	r2, #1
   135d2:	e7cf      	b.n	13574 <lfs_file_sync+0x36>
            ctz = file->ctz;
   135d4:	466b      	mov	r3, sp
   135d6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
   135d8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   135da:	e883 0003 	stmia.w	r3, {r0, r1}
            size = sizeof(ctz);
   135de:	2008      	movs	r0, #8
            buffer = &ctz;
   135e0:	4619      	mov	r1, r3
            type = LFS_TYPE_CTZSTRUCT;
   135e2:	f240 2202 	movw	r2, #514	; 0x202
   135e6:	e7cf      	b.n	13588 <lfs_file_sync+0x4a>
            file->flags |= LFS_F_ERRED;
   135e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   135ea:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
   135ee:	6323      	str	r3, [r4, #48]	; 0x30
            return err;
   135f0:	e7ea      	b.n	135c8 <lfs_file_sync+0x8a>

000135f2 <lfs_file_close>:
int lfs_file_close(lfs_t *lfs, lfs_file_t *file) {
   135f2:	b570      	push	{r4, r5, r6, lr}
   135f4:	4604      	mov	r4, r0
   135f6:	460d      	mov	r5, r1
    int err = lfs_file_sync(lfs, file);
   135f8:	f7ff ffa1 	bl	1353e <lfs_file_sync>
   135fc:	4606      	mov	r6, r0
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   135fe:	f104 0228 	add.w	r2, r4, #40	; 0x28
   13602:	6813      	ldr	r3, [r2, #0]
   13604:	b12b      	cbz	r3, 13612 <lfs_file_close+0x20>
        if (*p == (struct lfs_mlist*)file) {
   13606:	42ab      	cmp	r3, r5
   13608:	d001      	beq.n	1360e <lfs_file_close+0x1c>
    for (struct lfs_mlist **p = &lfs->mlist; *p; p = &(*p)->next) {
   1360a:	461a      	mov	r2, r3
   1360c:	e7f9      	b.n	13602 <lfs_file_close+0x10>
            *p = (*p)->next;
   1360e:	681b      	ldr	r3, [r3, #0]
   13610:	6013      	str	r3, [r2, #0]
    if (!file->cfg->buffer) {
   13612:	6d2b      	ldr	r3, [r5, #80]	; 0x50
   13614:	681b      	ldr	r3, [r3, #0]
   13616:	b12b      	cbz	r3, 13624 <lfs_file_close+0x32>
    file->flags &= ~LFS_F_OPENED;
   13618:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   1361a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
   1361e:	632b      	str	r3, [r5, #48]	; 0x30
}
   13620:	4630      	mov	r0, r6
   13622:	bd70      	pop	{r4, r5, r6, pc}
    free(p);
   13624:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
   13626:	f7fd fd63 	bl	110f0 <free>
}
   1362a:	e7f5      	b.n	13618 <lfs_file_close+0x26>

0001362c <lfs_dir_split>:
        lfs_mdir_t *source, uint16_t split, uint16_t end) {
   1362c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13630:	b08c      	sub	sp, #48	; 0x30
   13632:	4605      	mov	r5, r0
   13634:	460c      	mov	r4, r1
   13636:	4617      	mov	r7, r2
   13638:	461e      	mov	r6, r3
   1363a:	f8bd 804c 	ldrh.w	r8, [sp, #76]	; 0x4c
    lfs_alloc_ack(lfs);
   1363e:	f7fe ff2c 	bl	1249a <lfs_alloc_ack>
    int err = lfs_dir_alloc(lfs, &tail);
   13642:	a904      	add	r1, sp, #16
   13644:	4628      	mov	r0, r5
   13646:	f7ff fcea 	bl	1301e <lfs_dir_alloc>
    if (err) {
   1364a:	b110      	cbz	r0, 13652 <lfs_dir_split+0x26>
}
   1364c:	b00c      	add	sp, #48	; 0x30
   1364e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tail.split = dir->split;
   13652:	7de3      	ldrb	r3, [r4, #23]
   13654:	f88d 3027 	strb.w	r3, [sp, #39]	; 0x27
    tail.tail[0] = dir->tail[0];
   13658:	69a3      	ldr	r3, [r4, #24]
   1365a:	930a      	str	r3, [sp, #40]	; 0x28
    tail.tail[1] = dir->tail[1];
   1365c:	69e3      	ldr	r3, [r4, #28]
   1365e:	930b      	str	r3, [sp, #44]	; 0x2c
    err = lfs_dir_compact(lfs, &tail, attrs, attrcount, source, split, end);
   13660:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
   13664:	9302      	str	r3, [sp, #8]
   13666:	f8cd 8004 	str.w	r8, [sp, #4]
   1366a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   1366c:	9300      	str	r3, [sp, #0]
   1366e:	4633      	mov	r3, r6
   13670:	463a      	mov	r2, r7
   13672:	a904      	add	r1, sp, #16
   13674:	4628      	mov	r0, r5
   13676:	f7f8 fdb5 	bl	c1e4 <lfs_dir_compact>
    if (err) {
   1367a:	2800      	cmp	r0, #0
   1367c:	d1e6      	bne.n	1364c <lfs_dir_split+0x20>
    dir->tail[0] = tail.pair[0];
   1367e:	9904      	ldr	r1, [sp, #16]
   13680:	61a1      	str	r1, [r4, #24]
    dir->tail[1] = tail.pair[1];
   13682:	9a05      	ldr	r2, [sp, #20]
   13684:	61e2      	str	r2, [r4, #28]
    dir->split = true;
   13686:	2301      	movs	r3, #1
   13688:	75e3      	strb	r3, [r4, #23]
    return !(paira[0] == pairb[0] || paira[1] == pairb[1] ||
   1368a:	6823      	ldr	r3, [r4, #0]
   1368c:	6a2e      	ldr	r6, [r5, #32]
   1368e:	42b3      	cmp	r3, r6
   13690:	d007      	beq.n	136a2 <lfs_dir_split+0x76>
   13692:	6867      	ldr	r7, [r4, #4]
   13694:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   13696:	42a7      	cmp	r7, r4
   13698:	d003      	beq.n	136a2 <lfs_dir_split+0x76>
   1369a:	42a3      	cmp	r3, r4
   1369c:	d001      	beq.n	136a2 <lfs_dir_split+0x76>
   1369e:	42be      	cmp	r6, r7
   136a0:	d1d4      	bne.n	1364c <lfs_dir_split+0x20>
    if (lfs_pair_cmp(dir->pair, lfs->root) == 0 && split == 0) {
   136a2:	f1b8 0f00 	cmp.w	r8, #0
   136a6:	d1d1      	bne.n	1364c <lfs_dir_split+0x20>
        lfs->root[0] = tail.pair[0];
   136a8:	6229      	str	r1, [r5, #32]
        lfs->root[1] = tail.pair[1];
   136aa:	626a      	str	r2, [r5, #36]	; 0x24
   136ac:	e7ce      	b.n	1364c <lfs_dir_split+0x20>

000136ae <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
   136ae:	b508      	push	{r3, lr}
  _DoInit();
   136b0:	f7f9 ff72 	bl	d598 <_DoInit>
}
   136b4:	bd08      	pop	{r3, pc}

000136b6 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   136b6:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   136b8:	f7ff fff9 	bl	136ae <SEGGER_RTT_Init>

	return 0;
}
   136bc:	2000      	movs	r0, #0
   136be:	bd08      	pop	{r3, pc}

000136c0 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
   136c0:	b148      	cbz	r0, 136d6 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
   136c2:	68c3      	ldr	r3, [r0, #12]
   136c4:	8818      	ldrh	r0, [r3, #0]
   136c6:	f3c0 0008 	ubfx	r0, r0, #0, #9
   136ca:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
   136ce:	bf14      	ite	ne
   136d0:	2000      	movne	r0, #0
   136d2:	2001      	moveq	r0, #1
   136d4:	4770      	bx	lr
		return false;
   136d6:	2000      	movs	r0, #0
}
   136d8:	4770      	bx	lr

000136da <arch_system_halt>:
	__asm__ volatile(
   136da:	f04f 0220 	mov.w	r2, #32
   136de:	f3ef 8311 	mrs	r3, BASEPRI
   136e2:	f382 8812 	msr	BASEPRI_MAX, r2
   136e6:	f3bf 8f6f 	isb	sy
	for (;;) {
   136ea:	e7fe      	b.n	136ea <arch_system_halt+0x10>

000136ec <k_heap_init>:
{
   136ec:	b510      	push	{r4, lr}
	sys_dlist_init(&w->waitq);
   136ee:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
   136f2:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
   136f4:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
   136f6:	f7fc fbc1 	bl	fe7c <sys_heap_init>
}
   136fa:	bd10      	pop	{r4, pc}

000136fc <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   136fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13700:	b087      	sub	sp, #28
   13702:	4680      	mov	r8, r0
   13704:	9103      	str	r1, [sp, #12]
   13706:	9204      	str	r2, [sp, #16]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   13708:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   1370c:	f000 fc1b 	bl	13f46 <sys_clock_timeout_end_calc>
   13710:	4681      	mov	r9, r0
   13712:	468b      	mov	fp, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   13714:	f108 0314 	add.w	r3, r8, #20
   13718:	9305      	str	r3, [sp, #20]
   1371a:	f04f 0320 	mov.w	r3, #32
   1371e:	f3ef 8511 	mrs	r5, BASEPRI
   13722:	f383 8812 	msr	BASEPRI_MAX, r3
   13726:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
   1372a:	f04f 0a00 	mov.w	sl, #0
	void *ret = NULL;
   1372e:	4654      	mov	r4, sl

	while (ret == NULL) {
   13730:	e00f      	b.n	13752 <k_heap_aligned_alloc+0x56>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   13732:	e9cd 6700 	strd	r6, r7, [sp]
   13736:	f108 020c 	add.w	r2, r8, #12
   1373a:	4629      	mov	r1, r5
   1373c:	9805      	ldr	r0, [sp, #20]
   1373e:	f7fa ffc7 	bl	e6d0 <z_pend_curr>
   13742:	f04f 0320 	mov.w	r3, #32
   13746:	f3ef 8511 	mrs	r5, BASEPRI
   1374a:	f383 8812 	msr	BASEPRI_MAX, r3
   1374e:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
   13752:	b9b4      	cbnz	r4, 13782 <k_heap_aligned_alloc+0x86>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   13754:	9a04      	ldr	r2, [sp, #16]
   13756:	9903      	ldr	r1, [sp, #12]
   13758:	4640      	mov	r0, r8
   1375a:	f7fc fb01 	bl	fd60 <sys_heap_aligned_alloc>
   1375e:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
   13760:	f7fb fb6c 	bl	ee3c <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   13764:	b96c      	cbnz	r4, 13782 <k_heap_aligned_alloc+0x86>
		    (ret != NULL) || ((end - now) <= 0)) {
   13766:	ebb9 0600 	subs.w	r6, r9, r0
   1376a:	eb6b 0701 	sbc.w	r7, fp, r1
   1376e:	2e01      	cmp	r6, #1
   13770:	f177 0300 	sbcs.w	r3, r7, #0
   13774:	db05      	blt.n	13782 <k_heap_aligned_alloc+0x86>
		if (!blocked_alloc) {
   13776:	f1ba 0f00 	cmp.w	sl, #0
   1377a:	d1da      	bne.n	13732 <k_heap_aligned_alloc+0x36>
			blocked_alloc = true;
   1377c:	f04f 0a01 	mov.w	sl, #1
   13780:	e7d7      	b.n	13732 <k_heap_aligned_alloc+0x36>
	__asm__ volatile(
   13782:	f385 8811 	msr	BASEPRI, r5
   13786:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1378a:	4620      	mov	r0, r4
   1378c:	b007      	add	sp, #28
   1378e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00013792 <k_heap_alloc>:

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   13792:	b500      	push	{lr}
   13794:	b083      	sub	sp, #12
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, alloc, h, timeout);

	void *ret = k_heap_aligned_alloc(h, sizeof(void *), bytes, timeout);
   13796:	e9cd 2300 	strd	r2, r3, [sp]
   1379a:	460a      	mov	r2, r1
   1379c:	2104      	movs	r1, #4
   1379e:	f7ff ffad 	bl	136fc <k_heap_aligned_alloc>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, alloc, h, timeout, ret);

	return ret;
}
   137a2:	b003      	add	sp, #12
   137a4:	f85d fb04 	ldr.w	pc, [sp], #4

000137a8 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   137a8:	b570      	push	{r4, r5, r6, lr}
   137aa:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   137ac:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
   137b0:	f04f 0320 	mov.w	r3, #32
   137b4:	f3ef 8511 	mrs	r5, BASEPRI
   137b8:	f383 8812 	msr	BASEPRI_MAX, r3
   137bc:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
   137c0:	f7fc fa6c 	bl	fc9c <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   137c4:	f104 000c 	add.w	r0, r4, #12
   137c8:	f000 faf5 	bl	13db6 <z_unpend_all>
   137cc:	b920      	cbnz	r0, 137d8 <k_heap_free+0x30>
	__asm__ volatile(
   137ce:	f385 8811 	msr	BASEPRI, r5
   137d2:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   137d6:	bd70      	pop	{r4, r5, r6, pc}
		z_reschedule(&h->lock, key);
   137d8:	4629      	mov	r1, r5
   137da:	4630      	mov	r0, r6
   137dc:	f7fa fe14 	bl	e408 <z_reschedule>
   137e0:	e7f9      	b.n	137d6 <k_heap_free+0x2e>

000137e2 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   137e2:	68c2      	ldr	r2, [r0, #12]
   137e4:	6903      	ldr	r3, [r0, #16]
   137e6:	431a      	orrs	r2, r3
   137e8:	f012 0203 	ands.w	r2, r2, #3
   137ec:	d10d      	bne.n	1380a <create_free_list+0x28>
	slab->free_list = NULL;
   137ee:	2100      	movs	r1, #0
   137f0:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   137f2:	e005      	b.n	13800 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
   137f4:	6941      	ldr	r1, [r0, #20]
   137f6:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   137f8:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   137fa:	68c1      	ldr	r1, [r0, #12]
   137fc:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
   137fe:	3201      	adds	r2, #1
   13800:	6881      	ldr	r1, [r0, #8]
   13802:	4291      	cmp	r1, r2
   13804:	d8f6      	bhi.n	137f4 <create_free_list+0x12>
	return 0;
   13806:	2000      	movs	r0, #0
   13808:	4770      	bx	lr
		return -EINVAL;
   1380a:	f06f 0015 	mvn.w	r0, #21
}
   1380e:	4770      	bx	lr

00013810 <k_mem_slab_init>:
{
   13810:	b510      	push	{r4, lr}
   13812:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
   13814:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
   13816:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
   13818:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
   1381a:	2300      	movs	r3, #0
   1381c:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
   1381e:	f7ff ffe0 	bl	137e2 <create_free_list>
	if (rc < 0) {
   13822:	2800      	cmp	r0, #0
   13824:	db01      	blt.n	1382a <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
   13826:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
   13828:	6064      	str	r4, [r4, #4]
}
   1382a:	bd10      	pop	{r4, pc}

0001382c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1382c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1382e:	4604      	mov	r4, r0
   13830:	460d      	mov	r5, r1
	__asm__ volatile(
   13832:	f04f 0320 	mov.w	r3, #32
   13836:	f3ef 8611 	mrs	r6, BASEPRI
   1383a:	f383 8812 	msr	BASEPRI_MAX, r3
   1383e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   13842:	6943      	ldr	r3, [r0, #20]
   13844:	b163      	cbz	r3, 13860 <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
   13846:	682b      	ldr	r3, [r5, #0]
   13848:	6962      	ldr	r2, [r4, #20]
   1384a:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1384c:	682b      	ldr	r3, [r5, #0]
   1384e:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   13850:	69a3      	ldr	r3, [r4, #24]
   13852:	3b01      	subs	r3, #1
   13854:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   13856:	f386 8811 	msr	BASEPRI, r6
   1385a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   1385e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   13860:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   13864:	f000 fa7c 	bl	13d60 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   13868:	2800      	cmp	r0, #0
   1386a:	d0ec      	beq.n	13846 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1386c:	682a      	ldr	r2, [r5, #0]
   1386e:	2100      	movs	r1, #0
   13870:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   13874:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
   13876:	f000 f9b1 	bl	13bdc <z_ready_thread>
			z_reschedule(&slab->lock, key);
   1387a:	4631      	mov	r1, r6
   1387c:	4638      	mov	r0, r7
   1387e:	f7fa fdc3 	bl	e408 <z_reschedule>
			return;
   13882:	e7ec      	b.n	1385e <k_mem_slab_free+0x32>

00013884 <setup_thread_stack>:
{
   13884:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   13886:	3207      	adds	r2, #7
   13888:	f022 0207 	bic.w	r2, r2, #7
   1388c:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   13890:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
   13894:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
   13898:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
   1389c:	2200      	movs	r2, #0
   1389e:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
   138a2:	18c8      	adds	r0, r1, r3
   138a4:	bc10      	pop	{r4}
   138a6:	4770      	bx	lr

000138a8 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   138a8:	f3ef 8005 	mrs	r0, IPSR
}
   138ac:	3800      	subs	r0, #0
   138ae:	bf18      	it	ne
   138b0:	2001      	movne	r0, #1
   138b2:	4770      	bx	lr

000138b4 <k_thread_name_get>:
}
   138b4:	3074      	adds	r0, #116	; 0x74
   138b6:	4770      	bx	lr

000138b8 <z_impl_k_thread_start>:
{
   138b8:	b508      	push	{r3, lr}
	z_sched_start(thread);
   138ba:	f7fa fecf 	bl	e65c <z_sched_start>
}
   138be:	bd08      	pop	{r3, pc}

000138c0 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
   138c0:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
   138c2:	2400      	movs	r4, #0
   138c4:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
   138c6:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   138c8:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
   138ca:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
   138cc:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
   138ce:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
   138d0:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
   138d2:	bc10      	pop	{r4}
   138d4:	4770      	bx	lr

000138d6 <z_impl_k_thread_create>:
{
   138d6:	b5f0      	push	{r4, r5, r6, r7, lr}
   138d8:	b087      	sub	sp, #28
   138da:	4604      	mov	r4, r0
   138dc:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   138e0:	2500      	movs	r5, #0
   138e2:	9505      	str	r5, [sp, #20]
   138e4:	9d10      	ldr	r5, [sp, #64]	; 0x40
   138e6:	9504      	str	r5, [sp, #16]
   138e8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   138ea:	9503      	str	r5, [sp, #12]
   138ec:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   138ee:	9502      	str	r5, [sp, #8]
   138f0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   138f2:	9501      	str	r5, [sp, #4]
   138f4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   138f6:	9500      	str	r5, [sp, #0]
   138f8:	f7fa f9ae 	bl	dc58 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   138fc:	f1b7 3fff 	cmp.w	r7, #4294967295
   13900:	bf08      	it	eq
   13902:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   13906:	d102      	bne.n	1390e <z_impl_k_thread_create+0x38>
}
   13908:	4620      	mov	r0, r4
   1390a:	b007      	add	sp, #28
   1390c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
   1390e:	4632      	mov	r2, r6
   13910:	463b      	mov	r3, r7
   13912:	4620      	mov	r0, r4
   13914:	f7fa f98e 	bl	dc34 <schedule_new_thread>
   13918:	e7f6      	b.n	13908 <z_impl_k_thread_create+0x32>

0001391a <z_pm_save_idle_exit>:

void z_pm_save_idle_exit(int32_t ticks)
{
   1391a:	b508      	push	{r3, lr}
	/* Some CPU low power states require notification at the ISR
	 * to allow any operations that needs to be done before kernel
	 * switches task or processes nested interrupts.
	 * This can be simply ignored if not required.
	 */
	pm_system_resume();
   1391c:	f7f0 f94e 	bl	3bbc <pm_system_resume>
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
   13920:	f7fe fc2f 	bl	12182 <sys_clock_idle_exit>
}
   13924:	bd08      	pop	{r3, pc}

00013926 <idle>:

void idle(void *unused1, void *unused2, void *unused3)
{
   13926:	b508      	push	{r3, lr}
	__asm__ volatile(
   13928:	f04f 0220 	mov.w	r2, #32
   1392c:	f3ef 8311 	mrs	r3, BASEPRI
   13930:	f382 8812 	msr	BASEPRI_MAX, r2
   13934:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

		if (IS_ENABLED(CONFIG_PM)) {
			pm_save_idle();
   13938:	f7fa fa40 	bl	ddbc <pm_save_idle>
   1393c:	e7f4      	b.n	13928 <idle+0x2>

0001393e <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
   1393e:	4288      	cmp	r0, r1
   13940:	da00      	bge.n	13944 <new_prio_for_inheritance+0x6>
   13942:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   13944:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
   13948:	db01      	blt.n	1394e <new_prio_for_inheritance+0x10>
   1394a:	4608      	mov	r0, r1
   1394c:	4770      	bx	lr
   1394e:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
   13952:	4770      	bx	lr

00013954 <adjust_owner_prio>:
{
   13954:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
   13956:	6880      	ldr	r0, [r0, #8]
   13958:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1395c:	428b      	cmp	r3, r1
   1395e:	d101      	bne.n	13964 <adjust_owner_prio+0x10>
	return false;
   13960:	2000      	movs	r0, #0
}
   13962:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
   13964:	f7fa fec8 	bl	e6f8 <z_set_prio>
   13968:	e7fb      	b.n	13962 <adjust_owner_prio+0xe>

0001396a <z_impl_k_mutex_init>:
{
   1396a:	4603      	mov	r3, r0
	mutex->owner = NULL;
   1396c:	2000      	movs	r0, #0
   1396e:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
   13970:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
   13972:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
   13974:	605b      	str	r3, [r3, #4]
}
   13976:	4770      	bx	lr

00013978 <prepare_thread_to_run>:
{
   13978:	b508      	push	{r3, lr}
   1397a:	2200      	movs	r2, #0
   1397c:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
   13980:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
   13982:	f000 f92b 	bl	13bdc <z_ready_thread>
}
   13986:	bd08      	pop	{r3, pc}

00013988 <queue_insert>:
{
   13988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1398c:	4605      	mov	r5, r0
   1398e:	460e      	mov	r6, r1
   13990:	4614      	mov	r4, r2
   13992:	461f      	mov	r7, r3
   13994:	f89d 2020 	ldrb.w	r2, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   13998:	f100 0808 	add.w	r8, r0, #8
   1399c:	f04f 0320 	mov.w	r3, #32
   139a0:	f3ef 8911 	mrs	r9, BASEPRI
   139a4:	f383 8812 	msr	BASEPRI_MAX, r3
   139a8:	f3bf 8f6f 	isb	sy
	if (is_append) {
   139ac:	b102      	cbz	r2, 139b0 <queue_insert+0x28>
	return list->tail;
   139ae:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   139b0:	4640      	mov	r0, r8
   139b2:	f000 f9d5 	bl	13d60 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   139b6:	b9a0      	cbnz	r0, 139e2 <queue_insert+0x5a>
	if (alloc) {
   139b8:	b9e7      	cbnz	r7, 139f4 <queue_insert+0x6c>
	node->next_and_flags = flags;
   139ba:	2300      	movs	r3, #0
   139bc:	6023      	str	r3, [r4, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   139be:	b356      	cbz	r6, 13a16 <queue_insert+0x8e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   139c0:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   139c2:	f033 0303 	bics.w	r3, r3, #3
   139c6:	d134      	bne.n	13a32 <queue_insert+0xaa>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   139c8:	6823      	ldr	r3, [r4, #0]
   139ca:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   139ce:	6023      	str	r3, [r4, #0]
	return list->tail;
   139d0:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   139d2:	b35a      	cbz	r2, 13a2c <queue_insert+0xa4>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   139d4:	6813      	ldr	r3, [r2, #0]
   139d6:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   139da:	4323      	orrs	r3, r4
   139dc:	6013      	str	r3, [r2, #0]
	list->tail = node;
   139de:	606c      	str	r4, [r5, #4]
}
   139e0:	e031      	b.n	13a46 <queue_insert+0xbe>
		prepare_thread_to_run(first_pending_thread, data);
   139e2:	4621      	mov	r1, r4
   139e4:	f7ff ffc8 	bl	13978 <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
   139e8:	4649      	mov	r1, r9
   139ea:	4640      	mov	r0, r8
   139ec:	f7fa fd0c 	bl	e408 <z_reschedule>
		return 0;
   139f0:	2000      	movs	r0, #0
   139f2:	e02d      	b.n	13a50 <queue_insert+0xc8>
	return z_thread_aligned_alloc(0, size);
   139f4:	2108      	movs	r1, #8
   139f6:	2000      	movs	r0, #0
   139f8:	f7fb faec 	bl	efd4 <z_thread_aligned_alloc>
		if (anode == NULL) {
   139fc:	b120      	cbz	r0, 13a08 <queue_insert+0x80>
		anode->data = data;
   139fe:	6044      	str	r4, [r0, #4]
	node->next_and_flags = flags;
   13a00:	2201      	movs	r2, #1
   13a02:	6002      	str	r2, [r0, #0]
		data = anode;
   13a04:	4604      	mov	r4, r0
   13a06:	e7da      	b.n	139be <queue_insert+0x36>
	__asm__ volatile(
   13a08:	f389 8811 	msr	BASEPRI, r9
   13a0c:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   13a10:	f06f 000b 	mvn.w	r0, #11
   13a14:	e01c      	b.n	13a50 <queue_insert+0xc8>
	return list->head;
   13a16:	682a      	ldr	r2, [r5, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   13a18:	6823      	ldr	r3, [r4, #0]
   13a1a:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   13a1e:	4313      	orrs	r3, r2
   13a20:	6023      	str	r3, [r4, #0]
	list->head = node;
   13a22:	602c      	str	r4, [r5, #0]
	return list->tail;
   13a24:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
   13a26:	b973      	cbnz	r3, 13a46 <queue_insert+0xbe>
	list->tail = node;
   13a28:	606c      	str	r4, [r5, #4]
}
   13a2a:	e00c      	b.n	13a46 <queue_insert+0xbe>
	list->tail = node;
   13a2c:	606c      	str	r4, [r5, #4]
	list->head = node;
   13a2e:	602c      	str	r4, [r5, #0]
}
   13a30:	e009      	b.n	13a46 <queue_insert+0xbe>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   13a32:	6822      	ldr	r2, [r4, #0]
   13a34:	f002 0203 	and.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   13a38:	4313      	orrs	r3, r2
   13a3a:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   13a3c:	6833      	ldr	r3, [r6, #0]
   13a3e:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
   13a42:	431c      	orrs	r4, r3
   13a44:	6034      	str	r4, [r6, #0]
	z_reschedule(&queue->lock, key);
   13a46:	4649      	mov	r1, r9
   13a48:	4640      	mov	r0, r8
   13a4a:	f7fa fcdd 	bl	e408 <z_reschedule>
	return 0;
   13a4e:	2000      	movs	r0, #0
}
   13a50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00013a54 <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   13a54:	b160      	cbz	r0, 13a70 <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   13a56:	6803      	ldr	r3, [r0, #0]
   13a58:	f013 0f03 	tst.w	r3, #3
   13a5c:	d008      	beq.n	13a70 <z_queue_node_peek+0x1c>
{
   13a5e:	b510      	push	{r4, lr}
		ret = anode->data;
   13a60:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   13a62:	b909      	cbnz	r1, 13a68 <z_queue_node_peek+0x14>
		ret = anode->data;
   13a64:	4620      	mov	r0, r4
}
   13a66:	bd10      	pop	{r4, pc}
			k_free(anode);
   13a68:	f000 fade 	bl	14028 <k_free>
		ret = anode->data;
   13a6c:	4620      	mov	r0, r4
   13a6e:	e7fa      	b.n	13a66 <z_queue_node_peek+0x12>
}
   13a70:	4770      	bx	lr

00013a72 <k_queue_append>:
{
   13a72:	b500      	push	{lr}
   13a74:	b083      	sub	sp, #12
   13a76:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   13a78:	2301      	movs	r3, #1
   13a7a:	9300      	str	r3, [sp, #0]
   13a7c:	2300      	movs	r3, #0
   13a7e:	4619      	mov	r1, r3
   13a80:	f7ff ff82 	bl	13988 <queue_insert>
}
   13a84:	b003      	add	sp, #12
   13a86:	f85d fb04 	ldr.w	pc, [sp], #4

00013a8a <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   13a8a:	b13a      	cbz	r2, 13a9c <z_impl_k_sem_init+0x12>
   13a8c:	428a      	cmp	r2, r1
   13a8e:	d308      	bcc.n	13aa2 <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
   13a90:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   13a92:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   13a94:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   13a96:	6040      	str	r0, [r0, #4]
	return 0;
   13a98:	2000      	movs	r0, #0
   13a9a:	4770      	bx	lr
		return -EINVAL;
   13a9c:	f06f 0015 	mvn.w	r0, #21
   13aa0:	4770      	bx	lr
   13aa2:	f06f 0015 	mvn.w	r0, #21
}
   13aa6:	4770      	bx	lr

00013aa8 <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   13aa8:	2300      	movs	r3, #0
   13aaa:	6003      	str	r3, [r0, #0]
   13aac:	6083      	str	r3, [r0, #8]
   13aae:	60c3      	str	r3, [r0, #12]
   13ab0:	6041      	str	r1, [r0, #4]
}
   13ab2:	4770      	bx	lr

00013ab4 <k_work_submit_to_queue>:
{
   13ab4:	b530      	push	{r4, r5, lr}
   13ab6:	b083      	sub	sp, #12
   13ab8:	9001      	str	r0, [sp, #4]
   13aba:	4608      	mov	r0, r1
	__asm__ volatile(
   13abc:	f04f 0320 	mov.w	r3, #32
   13ac0:	f3ef 8511 	mrs	r5, BASEPRI
   13ac4:	f383 8812 	msr	BASEPRI_MAX, r3
   13ac8:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
   13acc:	a901      	add	r1, sp, #4
   13ace:	f7fa fadb 	bl	e088 <submit_to_queue_locked>
   13ad2:	4604      	mov	r4, r0
	__asm__ volatile(
   13ad4:	f385 8811 	msr	BASEPRI, r5
   13ad8:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   13adc:	2800      	cmp	r0, #0
   13ade:	dc02      	bgt.n	13ae6 <k_work_submit_to_queue+0x32>
}
   13ae0:	4620      	mov	r0, r4
   13ae2:	b003      	add	sp, #12
   13ae4:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
   13ae6:	f7fa fff1 	bl	eacc <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   13aea:	2800      	cmp	r0, #0
   13aec:	d0f8      	beq.n	13ae0 <k_work_submit_to_queue+0x2c>
	z_impl_k_yield();
   13aee:	f7fa ff27 	bl	e940 <z_impl_k_yield>
	return ret;
   13af2:	e7f5      	b.n	13ae0 <k_work_submit_to_queue+0x2c>

00013af4 <thread_active_elsewhere>:
}
   13af4:	2000      	movs	r0, #0
   13af6:	4770      	bx	lr

00013af8 <pended_on_thread>:
}
   13af8:	6880      	ldr	r0, [r0, #8]
   13afa:	4770      	bx	lr

00013afc <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   13afc:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   13b00:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   13b04:	4283      	cmp	r3, r0
   13b06:	d001      	beq.n	13b0c <z_sched_prio_cmp+0x10>
		return b2 - b1;
   13b08:	1ac0      	subs	r0, r0, r3
   13b0a:	4770      	bx	lr
	return 0;
   13b0c:	2000      	movs	r0, #0
}
   13b0e:	4770      	bx	lr

00013b10 <z_unpend_thread_no_timeout>:
{
   13b10:	b538      	push	{r3, r4, r5, lr}
   13b12:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   13b14:	2300      	movs	r3, #0
	__asm__ volatile(
   13b16:	f04f 0220 	mov.w	r2, #32
   13b1a:	f3ef 8511 	mrs	r5, BASEPRI
   13b1e:	f382 8812 	msr	BASEPRI_MAX, r2
   13b22:	f3bf 8f6f 	isb	sy
   13b26:	b98b      	cbnz	r3, 13b4c <z_unpend_thread_no_timeout+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   13b28:	4620      	mov	r0, r4
   13b2a:	f7ff ffe5 	bl	13af8 <pended_on_thread>
   13b2e:	4621      	mov	r1, r4
   13b30:	f000 f822 	bl	13b78 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   13b34:	7b63      	ldrb	r3, [r4, #13]
   13b36:	f023 0302 	bic.w	r3, r3, #2
   13b3a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   13b3c:	2300      	movs	r3, #0
   13b3e:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   13b40:	f385 8811 	msr	BASEPRI, r5
   13b44:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   13b48:	2301      	movs	r3, #1
   13b4a:	e7ec      	b.n	13b26 <z_unpend_thread_no_timeout+0x16>
}
   13b4c:	bd38      	pop	{r3, r4, r5, pc}

00013b4e <z_reschedule_irqlock>:
{
   13b4e:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   13b50:	4603      	mov	r3, r0
   13b52:	b920      	cbnz	r0, 13b5e <z_reschedule_irqlock+0x10>
   13b54:	f3ef 8205 	mrs	r2, IPSR
   13b58:	b942      	cbnz	r2, 13b6c <z_reschedule_irqlock+0x1e>
   13b5a:	2201      	movs	r2, #1
   13b5c:	e000      	b.n	13b60 <z_reschedule_irqlock+0x12>
   13b5e:	2200      	movs	r2, #0
	if (resched(key)) {
   13b60:	b932      	cbnz	r2, 13b70 <z_reschedule_irqlock+0x22>
   13b62:	f383 8811 	msr	BASEPRI, r3
   13b66:	f3bf 8f6f 	isb	sy
}
   13b6a:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   13b6c:	2200      	movs	r2, #0
   13b6e:	e7f7      	b.n	13b60 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
   13b70:	4618      	mov	r0, r3
   13b72:	f7f0 fa6d 	bl	4050 <arch_swap>
	return ret;
   13b76:	e7f8      	b.n	13b6a <z_reschedule_irqlock+0x1c>

00013b78 <z_priq_dumb_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
   13b78:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
   13b7a:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
   13b7c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   13b7e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   13b80:	2300      	movs	r3, #0
   13b82:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
   13b84:	604b      	str	r3, [r1, #4]
}
   13b86:	4770      	bx	lr

00013b88 <z_unpend_thread>:
{
   13b88:	b538      	push	{r3, r4, r5, lr}
   13b8a:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   13b8c:	2300      	movs	r3, #0
	__asm__ volatile(
   13b8e:	f04f 0220 	mov.w	r2, #32
   13b92:	f3ef 8511 	mrs	r5, BASEPRI
   13b96:	f382 8812 	msr	BASEPRI_MAX, r2
   13b9a:	f3bf 8f6f 	isb	sy
   13b9e:	b98b      	cbnz	r3, 13bc4 <z_unpend_thread+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   13ba0:	4620      	mov	r0, r4
   13ba2:	f7ff ffa9 	bl	13af8 <pended_on_thread>
   13ba6:	4621      	mov	r1, r4
   13ba8:	f7ff ffe6 	bl	13b78 <z_priq_dumb_remove>
   13bac:	7b63      	ldrb	r3, [r4, #13]
   13bae:	f023 0302 	bic.w	r3, r3, #2
   13bb2:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   13bb4:	2300      	movs	r3, #0
   13bb6:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   13bb8:	f385 8811 	msr	BASEPRI, r5
   13bbc:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   13bc0:	2301      	movs	r3, #1
   13bc2:	e7ec      	b.n	13b9e <z_unpend_thread+0x16>
	return z_abort_timeout(&thread->base.timeout);
   13bc4:	f104 0018 	add.w	r0, r4, #24
   13bc8:	f000 f954 	bl	13e74 <z_abort_timeout>
}
   13bcc:	bd38      	pop	{r3, r4, r5, pc}

00013bce <z_priq_dumb_best>:
{
   13bce:	4603      	mov	r3, r0
	return list->head == list;
   13bd0:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13bd2:	4283      	cmp	r3, r0
   13bd4:	d000      	beq.n	13bd8 <z_priq_dumb_best+0xa>
}
   13bd6:	4770      	bx	lr
	struct k_thread *thread = NULL;
   13bd8:	2000      	movs	r0, #0
	return thread;
   13bda:	e7fc      	b.n	13bd6 <z_priq_dumb_best+0x8>

00013bdc <z_ready_thread>:
{
   13bdc:	b538      	push	{r3, r4, r5, lr}
   13bde:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
   13be0:	2300      	movs	r3, #0
	__asm__ volatile(
   13be2:	f04f 0220 	mov.w	r2, #32
   13be6:	f3ef 8511 	mrs	r5, BASEPRI
   13bea:	f382 8812 	msr	BASEPRI_MAX, r2
   13bee:	f3bf 8f6f 	isb	sy
   13bf2:	e007      	b.n	13c04 <z_ready_thread+0x28>
			ready_thread(thread);
   13bf4:	4620      	mov	r0, r4
   13bf6:	f7fa fcf1 	bl	e5dc <ready_thread>
	__asm__ volatile(
   13bfa:	f385 8811 	msr	BASEPRI, r5
   13bfe:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   13c02:	2301      	movs	r3, #1
   13c04:	b92b      	cbnz	r3, 13c12 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
   13c06:	4620      	mov	r0, r4
   13c08:	f7ff ff74 	bl	13af4 <thread_active_elsewhere>
   13c0c:	2800      	cmp	r0, #0
   13c0e:	d1f4      	bne.n	13bfa <z_ready_thread+0x1e>
   13c10:	e7f0      	b.n	13bf4 <z_ready_thread+0x18>
}
   13c12:	bd38      	pop	{r3, r4, r5, pc}

00013c14 <z_thread_timeout>:
{
   13c14:	b570      	push	{r4, r5, r6, lr}
   13c16:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
   13c18:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
   13c1c:	2300      	movs	r3, #0
	__asm__ volatile(
   13c1e:	f04f 0220 	mov.w	r2, #32
   13c22:	f3ef 8611 	mrs	r6, BASEPRI
   13c26:	f382 8812 	msr	BASEPRI_MAX, r2
   13c2a:	f3bf 8f6f 	isb	sy
   13c2e:	e019      	b.n	13c64 <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   13c30:	4628      	mov	r0, r5
   13c32:	f7ff ff61 	bl	13af8 <pended_on_thread>
   13c36:	4629      	mov	r1, r5
   13c38:	f7ff ff9e 	bl	13b78 <z_priq_dumb_remove>
   13c3c:	7b6b      	ldrb	r3, [r5, #13]
   13c3e:	f023 0302 	bic.w	r3, r3, #2
   13c42:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
   13c44:	2300      	movs	r3, #0
   13c46:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   13c48:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   13c4c:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
   13c50:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   13c54:	4628      	mov	r0, r5
   13c56:	f7fa fcc1 	bl	e5dc <ready_thread>
	__asm__ volatile(
   13c5a:	f386 8811 	msr	BASEPRI, r6
   13c5e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   13c62:	2301      	movs	r3, #1
   13c64:	b94b      	cbnz	r3, 13c7a <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
   13c66:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
   13c6a:	f013 0f28 	tst.w	r3, #40	; 0x28
   13c6e:	d1f4      	bne.n	13c5a <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
   13c70:	f854 3c10 	ldr.w	r3, [r4, #-16]
   13c74:	2b00      	cmp	r3, #0
   13c76:	d1db      	bne.n	13c30 <z_thread_timeout+0x1c>
   13c78:	e7e6      	b.n	13c48 <z_thread_timeout+0x34>
}
   13c7a:	bd70      	pop	{r4, r5, r6, pc}

00013c7c <add_to_waitq_locked>:
{
   13c7c:	b570      	push	{r4, r5, r6, lr}
   13c7e:	4605      	mov	r5, r0
   13c80:	460e      	mov	r6, r1
	unready_thread(thread);
   13c82:	f7fa fd09 	bl	e698 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   13c86:	7b6b      	ldrb	r3, [r5, #13]
   13c88:	f043 0302 	orr.w	r3, r3, #2
   13c8c:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
   13c8e:	b1b6      	cbz	r6, 13cbe <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
   13c90:	60ae      	str	r6, [r5, #8]
	return list->head == list;
   13c92:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13c94:	42a6      	cmp	r6, r4
   13c96:	d019      	beq.n	13ccc <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   13c98:	b164      	cbz	r4, 13cb4 <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
   13c9a:	4621      	mov	r1, r4
   13c9c:	4628      	mov	r0, r5
   13c9e:	f7ff ff2d 	bl	13afc <z_sched_prio_cmp>
   13ca2:	2800      	cmp	r0, #0
   13ca4:	dc0c      	bgt.n	13cc0 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   13ca6:	b12c      	cbz	r4, 13cb4 <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
   13ca8:	6873      	ldr	r3, [r6, #4]
   13caa:	429c      	cmp	r4, r3
   13cac:	d002      	beq.n	13cb4 <add_to_waitq_locked+0x38>
   13cae:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   13cb0:	2c00      	cmp	r4, #0
   13cb2:	d1f1      	bne.n	13c98 <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
   13cb4:	6873      	ldr	r3, [r6, #4]
	node->next = list;
   13cb6:	602e      	str	r6, [r5, #0]
	node->prev = tail;
   13cb8:	606b      	str	r3, [r5, #4]
	tail->next = node;
   13cba:	601d      	str	r5, [r3, #0]
	list->tail = node;
   13cbc:	6075      	str	r5, [r6, #4]
}
   13cbe:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
   13cc0:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
   13cc2:	606b      	str	r3, [r5, #4]
	node->next = successor;
   13cc4:	602c      	str	r4, [r5, #0]
	prev->next = node;
   13cc6:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   13cc8:	6065      	str	r5, [r4, #4]
}
   13cca:	e7f8      	b.n	13cbe <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   13ccc:	2400      	movs	r4, #0
   13cce:	e7e3      	b.n	13c98 <add_to_waitq_locked+0x1c>

00013cd0 <pend>:
{
   13cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13cd4:	4605      	mov	r5, r0
   13cd6:	460f      	mov	r7, r1
   13cd8:	4691      	mov	r9, r2
   13cda:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
   13cdc:	2400      	movs	r4, #0
	__asm__ volatile(
   13cde:	f04f 0320 	mov.w	r3, #32
   13ce2:	f3ef 8611 	mrs	r6, BASEPRI
   13ce6:	f383 8812 	msr	BASEPRI_MAX, r3
   13cea:	f3bf 8f6f 	isb	sy
   13cee:	b94c      	cbnz	r4, 13d04 <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
   13cf0:	4639      	mov	r1, r7
   13cf2:	4628      	mov	r0, r5
   13cf4:	f7ff ffc2 	bl	13c7c <add_to_waitq_locked>
	__asm__ volatile(
   13cf8:	f386 8811 	msr	BASEPRI, r6
   13cfc:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   13d00:	2401      	movs	r4, #1
   13d02:	e7f4      	b.n	13cee <pend+0x1e>
	add_thread_timeout(thread, timeout);
   13d04:	464a      	mov	r2, r9
   13d06:	4643      	mov	r3, r8
   13d08:	4628      	mov	r0, r5
   13d0a:	f7fa fb1b 	bl	e344 <add_thread_timeout>
}
   13d0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00013d12 <z_unpend1_no_timeout>:
{
   13d12:	b570      	push	{r4, r5, r6, lr}
   13d14:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   13d16:	2300      	movs	r3, #0
	__asm__ volatile(
   13d18:	f04f 0220 	mov.w	r2, #32
   13d1c:	f3ef 8511 	mrs	r5, BASEPRI
   13d20:	f382 8812 	msr	BASEPRI_MAX, r2
   13d24:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   13d28:	461c      	mov	r4, r3
   13d2a:	e00f      	b.n	13d4c <z_unpend1_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   13d2c:	f7ff fee4 	bl	13af8 <pended_on_thread>
   13d30:	4621      	mov	r1, r4
   13d32:	f7ff ff21 	bl	13b78 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   13d36:	7b63      	ldrb	r3, [r4, #13]
   13d38:	f023 0302 	bic.w	r3, r3, #2
   13d3c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   13d3e:	2300      	movs	r3, #0
   13d40:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
   13d42:	f385 8811 	msr	BASEPRI, r5
   13d46:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   13d4a:	2301      	movs	r3, #1
   13d4c:	b933      	cbnz	r3, 13d5c <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
   13d4e:	4630      	mov	r0, r6
   13d50:	f7ff ff3d 	bl	13bce <z_priq_dumb_best>
		if (thread != NULL) {
   13d54:	4604      	mov	r4, r0
   13d56:	2800      	cmp	r0, #0
   13d58:	d1e8      	bne.n	13d2c <z_unpend1_no_timeout+0x1a>
   13d5a:	e7f2      	b.n	13d42 <z_unpend1_no_timeout+0x30>
}
   13d5c:	4620      	mov	r0, r4
   13d5e:	bd70      	pop	{r4, r5, r6, pc}

00013d60 <z_unpend_first_thread>:
{
   13d60:	b570      	push	{r4, r5, r6, lr}
   13d62:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
   13d64:	2300      	movs	r3, #0
	__asm__ volatile(
   13d66:	f04f 0220 	mov.w	r2, #32
   13d6a:	f3ef 8511 	mrs	r5, BASEPRI
   13d6e:	f382 8812 	msr	BASEPRI_MAX, r2
   13d72:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
   13d76:	461c      	mov	r4, r3
   13d78:	e013      	b.n	13da2 <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   13d7a:	f7ff febd 	bl	13af8 <pended_on_thread>
   13d7e:	4621      	mov	r1, r4
   13d80:	f7ff fefa 	bl	13b78 <z_priq_dumb_remove>
   13d84:	7b63      	ldrb	r3, [r4, #13]
   13d86:	f023 0302 	bic.w	r3, r3, #2
   13d8a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   13d8c:	2300      	movs	r3, #0
   13d8e:	60a3      	str	r3, [r4, #8]
   13d90:	f104 0018 	add.w	r0, r4, #24
   13d94:	f000 f86e 	bl	13e74 <z_abort_timeout>
	__asm__ volatile(
   13d98:	f385 8811 	msr	BASEPRI, r5
   13d9c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   13da0:	2301      	movs	r3, #1
   13da2:	b933      	cbnz	r3, 13db2 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
   13da4:	4630      	mov	r0, r6
   13da6:	f7ff ff12 	bl	13bce <z_priq_dumb_best>
		if (thread != NULL) {
   13daa:	4604      	mov	r4, r0
   13dac:	2800      	cmp	r0, #0
   13dae:	d1e4      	bne.n	13d7a <z_unpend_first_thread+0x1a>
   13db0:	e7f2      	b.n	13d98 <z_unpend_first_thread+0x38>
}
   13db2:	4620      	mov	r0, r4
   13db4:	bd70      	pop	{r4, r5, r6, pc}

00013db6 <z_unpend_all>:
{
   13db6:	b538      	push	{r3, r4, r5, lr}
   13db8:	4605      	mov	r5, r0
	int need_sched = 0;
   13dba:	2000      	movs	r0, #0
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   13dbc:	e006      	b.n	13dcc <z_unpend_all+0x16>
		z_unpend_thread(thread);
   13dbe:	4620      	mov	r0, r4
   13dc0:	f7ff fee2 	bl	13b88 <z_unpend_thread>
		z_ready_thread(thread);
   13dc4:	4620      	mov	r0, r4
   13dc6:	f7ff ff09 	bl	13bdc <z_ready_thread>
		need_sched = 1;
   13dca:	2001      	movs	r0, #1
	return list->head == list;
   13dcc:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   13dce:	42a5      	cmp	r5, r4
   13dd0:	d001      	beq.n	13dd6 <z_unpend_all+0x20>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   13dd2:	2c00      	cmp	r4, #0
   13dd4:	d1f3      	bne.n	13dbe <z_unpend_all+0x8>
}
   13dd6:	bd38      	pop	{r3, r4, r5, pc}

00013dd8 <z_sched_wake>:
{
   13dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   13ddc:	4606      	mov	r6, r0
   13dde:	4688      	mov	r8, r1
   13de0:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
   13de2:	2300      	movs	r3, #0
	__asm__ volatile(
   13de4:	f04f 0220 	mov.w	r2, #32
   13de8:	f3ef 8511 	mrs	r5, BASEPRI
   13dec:	f382 8812 	msr	BASEPRI_MAX, r2
   13df0:	f3bf 8f6f 	isb	sy
	bool ret = false;
   13df4:	4699      	mov	r9, r3
   13df6:	e01b      	b.n	13e30 <z_sched_wake+0x58>
   13df8:	f8c0 80ac 	str.w	r8, [r0, #172]	; 0xac
	thread->base.swap_data = data;
   13dfc:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   13dfe:	f7ff fe7b 	bl	13af8 <pended_on_thread>
   13e02:	4621      	mov	r1, r4
   13e04:	f7ff feb8 	bl	13b78 <z_priq_dumb_remove>
   13e08:	7b63      	ldrb	r3, [r4, #13]
   13e0a:	f023 0302 	bic.w	r3, r3, #2
   13e0e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   13e10:	2300      	movs	r3, #0
   13e12:	60a3      	str	r3, [r4, #8]
   13e14:	f104 0018 	add.w	r0, r4, #24
   13e18:	f000 f82c 	bl	13e74 <z_abort_timeout>
			ready_thread(thread);
   13e1c:	4620      	mov	r0, r4
   13e1e:	f7fa fbdd 	bl	e5dc <ready_thread>
			ret = true;
   13e22:	f04f 0901 	mov.w	r9, #1
	__asm__ volatile(
   13e26:	f385 8811 	msr	BASEPRI, r5
   13e2a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
   13e2e:	2301      	movs	r3, #1
   13e30:	b933      	cbnz	r3, 13e40 <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
   13e32:	4630      	mov	r0, r6
   13e34:	f7ff fecb 	bl	13bce <z_priq_dumb_best>
		if (thread != NULL) {
   13e38:	4604      	mov	r4, r0
   13e3a:	2800      	cmp	r0, #0
   13e3c:	d1dc      	bne.n	13df8 <z_sched_wake+0x20>
   13e3e:	e7f2      	b.n	13e26 <z_sched_wake+0x4e>
}
   13e40:	4648      	mov	r0, r9
   13e42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00013e46 <remove_timeout>:
{
   13e46:	b538      	push	{r3, r4, r5, lr}
   13e48:	4604      	mov	r4, r0
	if (next(t) != NULL) {
   13e4a:	f7fa fead 	bl	eba8 <next>
   13e4e:	b148      	cbz	r0, 13e64 <remove_timeout+0x1e>
   13e50:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
   13e52:	6920      	ldr	r0, [r4, #16]
   13e54:	6965      	ldr	r5, [r4, #20]
   13e56:	6913      	ldr	r3, [r2, #16]
   13e58:	6951      	ldr	r1, [r2, #20]
   13e5a:	181b      	adds	r3, r3, r0
   13e5c:	eb45 0101 	adc.w	r1, r5, r1
   13e60:	6113      	str	r3, [r2, #16]
   13e62:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
   13e64:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
   13e66:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
   13e68:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   13e6a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   13e6c:	2300      	movs	r3, #0
   13e6e:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
   13e70:	6063      	str	r3, [r4, #4]
}
   13e72:	bd38      	pop	{r3, r4, r5, pc}

00013e74 <z_abort_timeout>:
{
   13e74:	b570      	push	{r4, r5, r6, lr}
   13e76:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
   13e78:	2300      	movs	r3, #0
	__asm__ volatile(
   13e7a:	f04f 0220 	mov.w	r2, #32
   13e7e:	f3ef 8611 	mrs	r6, BASEPRI
   13e82:	f382 8812 	msr	BASEPRI_MAX, r2
   13e86:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
   13e8a:	f06f 0015 	mvn.w	r0, #21
   13e8e:	e008      	b.n	13ea2 <z_abort_timeout+0x2e>
			remove_timeout(to);
   13e90:	4620      	mov	r0, r4
   13e92:	f7ff ffd8 	bl	13e46 <remove_timeout>
			ret = 0;
   13e96:	4628      	mov	r0, r5
	__asm__ volatile(
   13e98:	f386 8811 	msr	BASEPRI, r6
   13e9c:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   13ea0:	2301      	movs	r3, #1
   13ea2:	461d      	mov	r5, r3
   13ea4:	b91b      	cbnz	r3, 13eae <z_abort_timeout+0x3a>
	return node->next != NULL;
   13ea6:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
   13ea8:	2b00      	cmp	r3, #0
   13eaa:	d1f1      	bne.n	13e90 <z_abort_timeout+0x1c>
   13eac:	e7f4      	b.n	13e98 <z_abort_timeout+0x24>
}
   13eae:	bd70      	pop	{r4, r5, r6, pc}

00013eb0 <z_get_next_timeout_expiry>:
{
   13eb0:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
   13eb2:	2300      	movs	r3, #0
	__asm__ volatile(
   13eb4:	f04f 0220 	mov.w	r2, #32
   13eb8:	f3ef 8411 	mrs	r4, BASEPRI
   13ebc:	f382 8812 	msr	BASEPRI_MAX, r2
   13ec0:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
   13ec4:	f04f 30ff 	mov.w	r0, #4294967295
	LOCKED(&timeout_lock) {
   13ec8:	b93b      	cbnz	r3, 13eda <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
   13eca:	f7fa fe85 	bl	ebd8 <next_timeout>
	__asm__ volatile(
   13ece:	f384 8811 	msr	BASEPRI, r4
   13ed2:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   13ed6:	2301      	movs	r3, #1
   13ed8:	e7f6      	b.n	13ec8 <z_get_next_timeout_expiry+0x18>
}
   13eda:	bd10      	pop	{r4, pc}

00013edc <z_set_timeout_expiry>:
{
   13edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   13ede:	4606      	mov	r6, r0
   13ee0:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
   13ee2:	2300      	movs	r3, #0
	__asm__ volatile(
   13ee4:	f04f 0220 	mov.w	r2, #32
   13ee8:	f3ef 8511 	mrs	r5, BASEPRI
   13eec:	f382 8812 	msr	BASEPRI_MAX, r2
   13ef0:	f3bf 8f6f 	isb	sy
   13ef4:	e00a      	b.n	13f0c <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
   13ef6:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
   13ef8:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   13efc:	2801      	cmp	r0, #1
   13efe:	dd00      	ble.n	13f02 <z_set_timeout_expiry+0x26>
   13f00:	b97c      	cbnz	r4, 13f22 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
   13f02:	f385 8811 	msr	BASEPRI, r5
   13f06:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
   13f0a:	2301      	movs	r3, #1
   13f0c:	461c      	mov	r4, r3
   13f0e:	b97b      	cbnz	r3, 13f30 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
   13f10:	f7fa fe62 	bl	ebd8 <next_timeout>
			      || (ticks <= next_to);
   13f14:	f1b0 3fff 	cmp.w	r0, #4294967295
   13f18:	d0ed      	beq.n	13ef6 <z_set_timeout_expiry+0x1a>
   13f1a:	42b0      	cmp	r0, r6
   13f1c:	dbec      	blt.n	13ef8 <z_set_timeout_expiry+0x1c>
   13f1e:	2401      	movs	r4, #1
   13f20:	e7ea      	b.n	13ef8 <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   13f22:	4639      	mov	r1, r7
   13f24:	42b0      	cmp	r0, r6
   13f26:	bfa8      	it	ge
   13f28:	4630      	movge	r0, r6
   13f2a:	f7f4 fb03 	bl	8534 <sys_clock_set_timeout>
   13f2e:	e7e8      	b.n	13f02 <z_set_timeout_expiry+0x26>
}
   13f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00013f32 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   13f32:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   13f34:	f7fa ff82 	bl	ee3c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   13f38:	bd08      	pop	{r3, pc}

00013f3a <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   13f3a:	b900      	cbnz	r0, 13f3e <z_impl_k_busy_wait+0x4>
   13f3c:	4770      	bx	lr
{
   13f3e:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   13f40:	f7f0 ff08 	bl	4d54 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   13f44:	bd08      	pop	{r3, pc}

00013f46 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   13f46:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   13f48:	f1b1 3fff 	cmp.w	r1, #4294967295
   13f4c:	bf08      	it	eq
   13f4e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   13f52:	d024      	beq.n	13f9e <sys_clock_timeout_end_calc+0x58>
   13f54:	4604      	mov	r4, r0
   13f56:	460d      	mov	r5, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   13f58:	ea54 0105 	orrs.w	r1, r4, r5
   13f5c:	d00d      	beq.n	13f7a <sys_clock_timeout_end_calc+0x34>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   13f5e:	f06f 0101 	mvn.w	r1, #1
   13f62:	1a0a      	subs	r2, r1, r0
   13f64:	f04f 31ff 	mov.w	r1, #4294967295
   13f68:	eb61 0305 	sbc.w	r3, r1, r5
   13f6c:	2a00      	cmp	r2, #0
   13f6e:	f173 0100 	sbcs.w	r1, r3, #0
   13f72:	db05      	blt.n	13f80 <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   13f74:	4610      	mov	r0, r2
   13f76:	4619      	mov	r1, r3
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   13f78:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
   13f7a:	f7fa ff5f 	bl	ee3c <sys_clock_tick_get>
   13f7e:	e7fb      	b.n	13f78 <sys_clock_timeout_end_calc+0x32>
		return sys_clock_tick_get() + MAX(1, dt);
   13f80:	f7fa ff5c 	bl	ee3c <sys_clock_tick_get>
   13f84:	4623      	mov	r3, r4
   13f86:	462a      	mov	r2, r5
   13f88:	2c01      	cmp	r4, #1
   13f8a:	f175 0400 	sbcs.w	r4, r5, #0
   13f8e:	db03      	blt.n	13f98 <sys_clock_timeout_end_calc+0x52>
   13f90:	18c0      	adds	r0, r0, r3
   13f92:	eb42 0101 	adc.w	r1, r2, r1
   13f96:	e7ef      	b.n	13f78 <sys_clock_timeout_end_calc+0x32>
   13f98:	2301      	movs	r3, #1
   13f9a:	2200      	movs	r2, #0
   13f9c:	e7f8      	b.n	13f90 <sys_clock_timeout_end_calc+0x4a>
		return UINT64_MAX;
   13f9e:	f04f 30ff 	mov.w	r0, #4294967295
   13fa2:	4601      	mov	r1, r0
   13fa4:	e7e8      	b.n	13f78 <sys_clock_timeout_end_calc+0x32>

00013fa6 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
   13fa6:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   13fa8:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
   13faa:	2300      	movs	r3, #0
   13fac:	6303      	str	r3, [r0, #48]	; 0x30
   13fae:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   13fb2:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   13fb4:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
   13fb6:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
   13fb8:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
   13fba:	6343      	str	r3, [r0, #52]	; 0x34
}
   13fbc:	4770      	bx	lr

00013fbe <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   13fbe:	b510      	push	{r4, lr}
   13fc0:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   13fc2:	f7ff ff57 	bl	13e74 <z_abort_timeout>

	if (inactive) {
   13fc6:	b9a0      	cbnz	r0, 13ff2 <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
   13fc8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   13fca:	b10b      	cbz	r3, 13fd0 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   13fcc:	4620      	mov	r0, r4
   13fce:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   13fd0:	f104 0018 	add.w	r0, r4, #24
   13fd4:	f7ff fe9d 	bl	13d12 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   13fd8:	b158      	cbz	r0, 13ff2 <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
   13fda:	f7ff fdff 	bl	13bdc <z_ready_thread>
	__asm__ volatile(
   13fde:	f04f 0320 	mov.w	r3, #32
   13fe2:	f3ef 8011 	mrs	r0, BASEPRI
   13fe6:	f383 8812 	msr	BASEPRI_MAX, r3
   13fea:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   13fee:	f7ff fdae 	bl	13b4e <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
   13ff2:	bd10      	pop	{r4, pc}

00013ff4 <z_heap_aligned_alloc>:
{
   13ff4:	b5d0      	push	{r4, r6, r7, lr}
   13ff6:	b082      	sub	sp, #8
   13ff8:	4604      	mov	r4, r0
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   13ffa:	2000      	movs	r0, #0
   13ffc:	2304      	movs	r3, #4
   13ffe:	18d2      	adds	r2, r2, r3
   14000:	d20e      	bcs.n	14020 <z_heap_aligned_alloc+0x2c>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
   14002:	b978      	cbnz	r0, 14024 <z_heap_aligned_alloc+0x30>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   14004:	2600      	movs	r6, #0
   14006:	2700      	movs	r7, #0
   14008:	e9cd 6700 	strd	r6, r7, [sp]
   1400c:	f041 0104 	orr.w	r1, r1, #4
   14010:	4620      	mov	r0, r4
   14012:	f7ff fb73 	bl	136fc <k_heap_aligned_alloc>
	if (mem == NULL) {
   14016:	b108      	cbz	r0, 1401c <z_heap_aligned_alloc+0x28>
	*heap_ref = heap;
   14018:	f840 4b04 	str.w	r4, [r0], #4
}
   1401c:	b002      	add	sp, #8
   1401e:	bdd0      	pop	{r4, r6, r7, pc}
   14020:	2001      	movs	r0, #1
   14022:	e7ee      	b.n	14002 <z_heap_aligned_alloc+0xe>
		return NULL;
   14024:	2000      	movs	r0, #0
   14026:	e7f9      	b.n	1401c <z_heap_aligned_alloc+0x28>

00014028 <k_free>:
	if (ptr != NULL) {
   14028:	b130      	cbz	r0, 14038 <k_free+0x10>
{
   1402a:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
   1402c:	1f01      	subs	r1, r0, #4
   1402e:	f850 0c04 	ldr.w	r0, [r0, #-4]
   14032:	f7ff fbb9 	bl	137a8 <k_heap_free>
}
   14036:	bd08      	pop	{r3, pc}
   14038:	4770      	bx	lr

0001403a <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   1403a:	4770      	bx	lr

0001403c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   1403c:	f7f4 bb52 	b.w	86e4 <SystemInit>
