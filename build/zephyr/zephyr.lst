
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20003680 	.word	0x20003680
}
   4:	000045e1 	.word	0x000045e1
   8:	0000cf53 	.word	0x0000cf53
   c:	00004599 	.word	0x00004599
  10:	00004599 	.word	0x00004599
  14:	00004599 	.word	0x00004599
  18:	00004599 	.word	0x00004599
	...
  2c:	00003cdd 	.word	0x00003cdd
  30:	00004599 	.word	0x00004599
  34:	00000000 	.word	0x00000000
  38:	00003c85 	.word	0x00003c85
  3c:	0000d9a5 	.word	0x0000d9a5

00000040 <_irq_vector_table>:
  40:	00003dc9 00003dc9 00003dc9 00003dc9     .=...=...=...=..
  50:	00003dc9 00003dc9 00003dc9 00003dc9     .=...=...=...=..
  60:	00003dc9 00003dc9 00003dc9 00003dc9     .=...=...=...=..
  70:	00003dc9 00003dc9 00003dc9 00003dc9     .=...=...=...=..
  80:	00003dc9 00003dc9 00003dc9 00003dc9     .=...=...=...=..
  90:	00003dc9 00003dc9 00003dc9 00003dc9     .=...=...=...=..
  a0:	00003dc9 00003dc9 00003dc9 00003dc9     .=...=...=...=..
  b0:	00003dc9 00003dc9 00003dc9 00003dc9     .=...=...=...=..
  c0:	00003dc9 00003dc9 00003dc9 00003dc9     .=...=...=...=..
  d0:	00003dc9 00003dc9 00003dc9 00003dc9     .=...=...=...=..
  e0:	00003dc9 00003dc9 00003dc9 00003dc9     .=...=...=...=..
  f0:	00003dc9 00003dc9 00003dc9 00003dc9     .=...=...=...=..

Disassembly of section text:

00000100 <__aeabi_uldivmod>:
     100:	b953      	cbnz	r3, 118 <__aeabi_uldivmod+0x18>
     102:	b94a      	cbnz	r2, 118 <__aeabi_uldivmod+0x18>
     104:	2900      	cmp	r1, #0
     106:	bf08      	it	eq
     108:	2800      	cmpeq	r0, #0
     10a:	bf1c      	itt	ne
     10c:	f04f 31ff 	movne.w	r1, #4294967295
     110:	f04f 30ff 	movne.w	r0, #4294967295
     114:	f000 b96c 	b.w	3f0 <__aeabi_idiv0>
     118:	f1ad 0c08 	sub.w	ip, sp, #8
     11c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     120:	f000 f806 	bl	130 <__udivmoddi4>
     124:	f8dd e004 	ldr.w	lr, [sp, #4]
     128:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     12c:	b004      	add	sp, #16
     12e:	4770      	bx	lr

00000130 <__udivmoddi4>:
     130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     134:	9e08      	ldr	r6, [sp, #32]
     136:	460d      	mov	r5, r1
     138:	4604      	mov	r4, r0
     13a:	468e      	mov	lr, r1
     13c:	2b00      	cmp	r3, #0
     13e:	f040 8082 	bne.w	246 <__data_size+0xa5>
     142:	428a      	cmp	r2, r1
     144:	4617      	mov	r7, r2
     146:	d946      	bls.n	1d6 <__data_size+0x35>
     148:	fab2 f282 	clz	r2, r2
     14c:	b14a      	cbz	r2, 162 <CONFIG_IDLE_STACK_SIZE+0x22>
     14e:	f1c2 0120 	rsb	r1, r2, #32
     152:	fa05 f302 	lsl.w	r3, r5, r2
     156:	fa20 f101 	lsr.w	r1, r0, r1
     15a:	4097      	lsls	r7, r2
     15c:	ea41 0e03 	orr.w	lr, r1, r3
     160:	4094      	lsls	r4, r2
     162:	ea4f 4817 	mov.w	r8, r7, lsr #16
     166:	0c23      	lsrs	r3, r4, #16
     168:	fbbe fcf8 	udiv	ip, lr, r8
     16c:	b2b9      	uxth	r1, r7
     16e:	fb08 ee1c 	mls	lr, r8, ip, lr
     172:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     176:	fb0c f001 	mul.w	r0, ip, r1
     17a:	4298      	cmp	r0, r3
     17c:	d90a      	bls.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     17e:	18fb      	adds	r3, r7, r3
     180:	f10c 35ff 	add.w	r5, ip, #4294967295
     184:	f080 8116 	bcs.w	3b4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb4>
     188:	4298      	cmp	r0, r3
     18a:	f240 8113 	bls.w	3b4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb4>
     18e:	f1ac 0c02 	sub.w	ip, ip, #2
     192:	443b      	add	r3, r7
     194:	1a1b      	subs	r3, r3, r0
     196:	b2a4      	uxth	r4, r4
     198:	fbb3 f0f8 	udiv	r0, r3, r8
     19c:	fb08 3310 	mls	r3, r8, r0, r3
     1a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     1a4:	fb00 f101 	mul.w	r1, r0, r1
     1a8:	42a1      	cmp	r1, r4
     1aa:	d909      	bls.n	1c0 <__data_size+0x1f>
     1ac:	193c      	adds	r4, r7, r4
     1ae:	f100 33ff 	add.w	r3, r0, #4294967295
     1b2:	f080 8101 	bcs.w	3b8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb8>
     1b6:	42a1      	cmp	r1, r4
     1b8:	f240 80fe 	bls.w	3b8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb8>
     1bc:	3802      	subs	r0, #2
     1be:	443c      	add	r4, r7
     1c0:	1a64      	subs	r4, r4, r1
     1c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     1c6:	2100      	movs	r1, #0
     1c8:	b11e      	cbz	r6, 1d2 <__data_size+0x31>
     1ca:	40d4      	lsrs	r4, r2
     1cc:	2300      	movs	r3, #0
     1ce:	e9c6 4300 	strd	r4, r3, [r6]
     1d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     1d6:	b902      	cbnz	r2, 1da <__data_size+0x39>
     1d8:	deff      	udf	#255	; 0xff
     1da:	fab2 f282 	clz	r2, r2
     1de:	2a00      	cmp	r2, #0
     1e0:	d14f      	bne.n	282 <__data_size+0xe1>
     1e2:	1bcb      	subs	r3, r1, r7
     1e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     1e8:	fa1f f887 	uxth.w	r8, r7
     1ec:	2101      	movs	r1, #1
     1ee:	fbb3 fcfe 	udiv	ip, r3, lr
     1f2:	0c25      	lsrs	r5, r4, #16
     1f4:	fb0e 331c 	mls	r3, lr, ip, r3
     1f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     1fc:	fb08 f30c 	mul.w	r3, r8, ip
     200:	42ab      	cmp	r3, r5
     202:	d907      	bls.n	214 <__data_size+0x73>
     204:	197d      	adds	r5, r7, r5
     206:	f10c 30ff 	add.w	r0, ip, #4294967295
     20a:	d202      	bcs.n	212 <__data_size+0x71>
     20c:	42ab      	cmp	r3, r5
     20e:	f200 80e7 	bhi.w	3e0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xe0>
     212:	4684      	mov	ip, r0
     214:	1aed      	subs	r5, r5, r3
     216:	b2a3      	uxth	r3, r4
     218:	fbb5 f0fe 	udiv	r0, r5, lr
     21c:	fb0e 5510 	mls	r5, lr, r0, r5
     220:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     224:	fb08 f800 	mul.w	r8, r8, r0
     228:	45a0      	cmp	r8, r4
     22a:	d907      	bls.n	23c <__data_size+0x9b>
     22c:	193c      	adds	r4, r7, r4
     22e:	f100 33ff 	add.w	r3, r0, #4294967295
     232:	d202      	bcs.n	23a <__data_size+0x99>
     234:	45a0      	cmp	r8, r4
     236:	f200 80d7 	bhi.w	3e8 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS>
     23a:	4618      	mov	r0, r3
     23c:	eba4 0408 	sub.w	r4, r4, r8
     240:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     244:	e7c0      	b.n	1c8 <__data_size+0x27>
     246:	428b      	cmp	r3, r1
     248:	d908      	bls.n	25c <__data_size+0xbb>
     24a:	2e00      	cmp	r6, #0
     24c:	f000 80af 	beq.w	3ae <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xae>
     250:	2100      	movs	r1, #0
     252:	e9c6 0500 	strd	r0, r5, [r6]
     256:	4608      	mov	r0, r1
     258:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     25c:	fab3 f183 	clz	r1, r3
     260:	2900      	cmp	r1, #0
     262:	d14b      	bne.n	2fc <__data_size+0x15b>
     264:	42ab      	cmp	r3, r5
     266:	d302      	bcc.n	26e <__data_size+0xcd>
     268:	4282      	cmp	r2, r0
     26a:	f200 80b7 	bhi.w	3dc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xdc>
     26e:	1a84      	subs	r4, r0, r2
     270:	eb65 0303 	sbc.w	r3, r5, r3
     274:	2001      	movs	r0, #1
     276:	469e      	mov	lr, r3
     278:	2e00      	cmp	r6, #0
     27a:	d0aa      	beq.n	1d2 <__data_size+0x31>
     27c:	e9c6 4e00 	strd	r4, lr, [r6]
     280:	e7a7      	b.n	1d2 <__data_size+0x31>
     282:	f1c2 0c20 	rsb	ip, r2, #32
     286:	fa01 f302 	lsl.w	r3, r1, r2
     28a:	4097      	lsls	r7, r2
     28c:	fa20 f00c 	lsr.w	r0, r0, ip
     290:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     294:	fa21 fc0c 	lsr.w	ip, r1, ip
     298:	4318      	orrs	r0, r3
     29a:	fbbc f1fe 	udiv	r1, ip, lr
     29e:	0c05      	lsrs	r5, r0, #16
     2a0:	fb0e cc11 	mls	ip, lr, r1, ip
     2a4:	fa1f f887 	uxth.w	r8, r7
     2a8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     2ac:	fb01 f308 	mul.w	r3, r1, r8
     2b0:	42ab      	cmp	r3, r5
     2b2:	fa04 f402 	lsl.w	r4, r4, r2
     2b6:	d909      	bls.n	2cc <__data_size+0x12b>
     2b8:	197d      	adds	r5, r7, r5
     2ba:	f101 3cff 	add.w	ip, r1, #4294967295
     2be:	f080 808b 	bcs.w	3d8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd8>
     2c2:	42ab      	cmp	r3, r5
     2c4:	f240 8088 	bls.w	3d8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd8>
     2c8:	3902      	subs	r1, #2
     2ca:	443d      	add	r5, r7
     2cc:	1aeb      	subs	r3, r5, r3
     2ce:	b285      	uxth	r5, r0
     2d0:	fbb3 f0fe 	udiv	r0, r3, lr
     2d4:	fb0e 3310 	mls	r3, lr, r0, r3
     2d8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     2dc:	fb00 f308 	mul.w	r3, r0, r8
     2e0:	42ab      	cmp	r3, r5
     2e2:	d907      	bls.n	2f4 <__data_size+0x153>
     2e4:	197d      	adds	r5, r7, r5
     2e6:	f100 3cff 	add.w	ip, r0, #4294967295
     2ea:	d271      	bcs.n	3d0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd0>
     2ec:	42ab      	cmp	r3, r5
     2ee:	d96f      	bls.n	3d0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd0>
     2f0:	3802      	subs	r0, #2
     2f2:	443d      	add	r5, r7
     2f4:	1aeb      	subs	r3, r5, r3
     2f6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     2fa:	e778      	b.n	1ee <__data_size+0x4d>
     2fc:	f1c1 0c20 	rsb	ip, r1, #32
     300:	408b      	lsls	r3, r1
     302:	fa22 f70c 	lsr.w	r7, r2, ip
     306:	431f      	orrs	r7, r3
     308:	fa20 f40c 	lsr.w	r4, r0, ip
     30c:	fa05 f301 	lsl.w	r3, r5, r1
     310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     314:	fa25 f50c 	lsr.w	r5, r5, ip
     318:	431c      	orrs	r4, r3
     31a:	0c23      	lsrs	r3, r4, #16
     31c:	fbb5 f9fe 	udiv	r9, r5, lr
     320:	fa1f f887 	uxth.w	r8, r7
     324:	fb0e 5519 	mls	r5, lr, r9, r5
     328:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     32c:	fb09 fa08 	mul.w	sl, r9, r8
     330:	45aa      	cmp	sl, r5
     332:	fa02 f201 	lsl.w	r2, r2, r1
     336:	fa00 f301 	lsl.w	r3, r0, r1
     33a:	d908      	bls.n	34e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4e>
     33c:	197d      	adds	r5, r7, r5
     33e:	f109 30ff 	add.w	r0, r9, #4294967295
     342:	d247      	bcs.n	3d4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd4>
     344:	45aa      	cmp	sl, r5
     346:	d945      	bls.n	3d4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xd4>
     348:	f1a9 0902 	sub.w	r9, r9, #2
     34c:	443d      	add	r5, r7
     34e:	eba5 050a 	sub.w	r5, r5, sl
     352:	b2a4      	uxth	r4, r4
     354:	fbb5 f0fe 	udiv	r0, r5, lr
     358:	fb0e 5510 	mls	r5, lr, r0, r5
     35c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     360:	fb00 f808 	mul.w	r8, r0, r8
     364:	45a0      	cmp	r8, r4
     366:	d907      	bls.n	378 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x78>
     368:	193c      	adds	r4, r7, r4
     36a:	f100 35ff 	add.w	r5, r0, #4294967295
     36e:	d22d      	bcs.n	3cc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xcc>
     370:	45a0      	cmp	r8, r4
     372:	d92b      	bls.n	3cc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xcc>
     374:	3802      	subs	r0, #2
     376:	443c      	add	r4, r7
     378:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     37c:	eba4 0408 	sub.w	r4, r4, r8
     380:	fba0 8902 	umull	r8, r9, r0, r2
     384:	454c      	cmp	r4, r9
     386:	46c6      	mov	lr, r8
     388:	464d      	mov	r5, r9
     38a:	d319      	bcc.n	3c0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc0>
     38c:	d016      	beq.n	3bc <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xbc>
     38e:	b15e      	cbz	r6, 3a8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa8>
     390:	ebb3 020e 	subs.w	r2, r3, lr
     394:	eb64 0405 	sbc.w	r4, r4, r5
     398:	fa04 fc0c 	lsl.w	ip, r4, ip
     39c:	40ca      	lsrs	r2, r1
     39e:	ea4c 0202 	orr.w	r2, ip, r2
     3a2:	40cc      	lsrs	r4, r1
     3a4:	e9c6 2400 	strd	r2, r4, [r6]
     3a8:	2100      	movs	r1, #0
     3aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3ae:	4631      	mov	r1, r6
     3b0:	4630      	mov	r0, r6
     3b2:	e70e      	b.n	1d2 <__data_size+0x31>
     3b4:	46ac      	mov	ip, r5
     3b6:	e6ed      	b.n	194 <CONFIG_IDLE_STACK_SIZE+0x54>
     3b8:	4618      	mov	r0, r3
     3ba:	e701      	b.n	1c0 <__data_size+0x1f>
     3bc:	4543      	cmp	r3, r8
     3be:	d2e6      	bcs.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     3c0:	ebb8 0e02 	subs.w	lr, r8, r2
     3c4:	eb69 0507 	sbc.w	r5, r9, r7
     3c8:	3801      	subs	r0, #1
     3ca:	e7e0      	b.n	38e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8e>
     3cc:	4628      	mov	r0, r5
     3ce:	e7d3      	b.n	378 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x78>
     3d0:	4660      	mov	r0, ip
     3d2:	e78f      	b.n	2f4 <__data_size+0x153>
     3d4:	4681      	mov	r9, r0
     3d6:	e7ba      	b.n	34e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x4e>
     3d8:	4661      	mov	r1, ip
     3da:	e777      	b.n	2cc <__data_size+0x12b>
     3dc:	4608      	mov	r0, r1
     3de:	e74b      	b.n	278 <__data_size+0xd7>
     3e0:	f1ac 0c02 	sub.w	ip, ip, #2
     3e4:	443d      	add	r5, r7
     3e6:	e715      	b.n	214 <__data_size+0x73>
     3e8:	3802      	subs	r0, #2
     3ea:	443c      	add	r4, r7
     3ec:	e726      	b.n	23c <__data_size+0x9b>
     3ee:	bf00      	nop

000003f0 <__aeabi_idiv0>:
     3f0:	4770      	bx	lr
     3f2:	bf00      	nop

000003f4 <main>:

#include <zephyr.h>
#include  "protocol-usb.h"

void main(void)
{
     3f4:	b500      	push	{lr}
     3f6:	b083      	sub	sp, #12
	configureUSB();
     3f8:	f000 f86a 	bl	4d0 <configureUSB>
     3fc:	e002      	b.n	404 <CONFIG_FLASH_SIZE+0x4>
	while(1){
		if(flagMsgRx){
	// 		// ReadMsg();
			uint8_t buffer[3] = "OK\n";
			/*ECO PARA TESTES*/ uart_fifo_fill(uart_dev, buffer, 3);
			flagMsgRx = 0;
     3fe:	4b0c      	ldr	r3, [pc, #48]	; (430 <CONFIG_FLASH_SIZE+0x30>)
     400:	2200      	movs	r2, #0
     402:	701a      	strb	r2, [r3, #0]
		if(flagMsgRx){
     404:	4b0a      	ldr	r3, [pc, #40]	; (430 <CONFIG_FLASH_SIZE+0x30>)
     406:	781b      	ldrb	r3, [r3, #0]
     408:	2b00      	cmp	r3, #0
     40a:	d0fb      	beq.n	404 <CONFIG_FLASH_SIZE+0x4>
			uint8_t buffer[3] = "OK\n";
     40c:	4b09      	ldr	r3, [pc, #36]	; (434 <CONFIG_FLASH_SIZE+0x34>)
     40e:	681b      	ldr	r3, [r3, #0]
     410:	f8ad 3004 	strh.w	r3, [sp, #4]
     414:	0c1b      	lsrs	r3, r3, #16
     416:	f88d 3006 	strb.w	r3, [sp, #6]
			/*ECO PARA TESTES*/ uart_fifo_fill(uart_dev, buffer, 3);
     41a:	4b07      	ldr	r3, [pc, #28]	; (438 <CONFIG_FLASH_SIZE+0x38>)
     41c:	6818      	ldr	r0, [r3, #0]
static inline int uart_fifo_fill(const struct device *dev,
				 const uint8_t *tx_data,
				 int size)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
     41e:	6883      	ldr	r3, [r0, #8]
		(const struct uart_driver_api *)dev->api;

	if (api->fifo_fill == NULL) {
     420:	695b      	ldr	r3, [r3, #20]
     422:	2b00      	cmp	r3, #0
     424:	d0eb      	beq.n	3fe <main+0xa>
		return -ENOSYS;
	}

	return api->fifo_fill(dev, tx_data, size);
     426:	2203      	movs	r2, #3
     428:	a901      	add	r1, sp, #4
     42a:	4798      	blx	r3
     42c:	e7e7      	b.n	3fe <main+0xa>
     42e:	bf00      	nop
     430:	20002548 	.word	0x20002548
     434:	0000e938 	.word	0x0000e938
     438:	20000c64 	.word	0x20000c64

0000043c <interrupt_handler>:
     return wCrc & 0xffff;

 }

static void interrupt_handler(const struct device *dev, void *user_data)
{
     43c:	b510      	push	{r4, lr}
     43e:	b090      	sub	sp, #64	; 0x40
     440:	4604      	mov	r4, r0
	ARG_UNUSED(user_data);
	
	while (uart_irq_update(dev) && uart_irq_is_pending(dev)) {
     442:	e010      	b.n	466 <interrupt_handler+0x2a>
		if (uart_irq_rx_ready(dev)) {
			int recv_len, rb_len;
			uint8_t buffer[64];

			size_t len = MIN(ring_buf_space_get(&ringbuf),
     444:	4820      	ldr	r0, [pc, #128]	; (4c8 <interrupt_handler+0x8c>)
     446:	f00b fef0 	bl	c22a <ring_buf_space_get>
     44a:	4602      	mov	r2, r0
     44c:	e024      	b.n	498 <interrupt_handler+0x5c>
					 sizeof(buffer));

			recv_len = uart_fifo_read(dev, buffer, len);
			if (recv_len < 0/*Substituir pelo menor valor do protocolo*/) {
				recv_len = 0;
     44e:	2200      	movs	r2, #0
     450:	e02b      	b.n	4aa <interrupt_handler+0x6e>
     452:	2200      	movs	r2, #0
     454:	e029      	b.n	4aa <interrupt_handler+0x6e>
				uart_irq_tx_enable(dev);
			}

		}

		flagMsgRx = 1;
     456:	4b1d      	ldr	r3, [pc, #116]	; (4cc <interrupt_handler+0x90>)
     458:	2201      	movs	r2, #1
     45a:	701a      	strb	r2, [r3, #0]
		// if (uart_irq_tx_ready(dev)) {
			// flagMsgRx = 1;
			uint8_t buffer2[64];
			int rb_len;//, send_len;
			rb_len = ring_buf_get(&ringbuf, buffer2, sizeof(buffer2));
     45c:	2240      	movs	r2, #64	; 0x40
     45e:	4669      	mov	r1, sp
     460:	4819      	ldr	r0, [pc, #100]	; (4c8 <interrupt_handler+0x8c>)
     462:	f00b ff8d 	bl	c380 <ring_buf_get>
__syscall int uart_irq_update(const struct device *dev);

static inline int z_impl_uart_irq_update(const struct device *dev)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
     466:	68a3      	ldr	r3, [r4, #8]
		(const struct uart_driver_api *)dev->api;

	if (api->irq_update == NULL) {
     468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
     46a:	b113      	cbz	r3, 472 <interrupt_handler+0x36>
		return -ENOSYS;
	}
	return api->irq_update(dev);
     46c:	4620      	mov	r0, r4
     46e:	4798      	blx	r3
	while (uart_irq_update(dev) && uart_irq_is_pending(dev)) {
     470:	b340      	cbz	r0, 4c4 <interrupt_handler+0x88>
	const struct uart_driver_api *api =
     472:	68a3      	ldr	r3, [r4, #8]
	if (api->irq_is_pending == NULL) {
     474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
     476:	b113      	cbz	r3, 47e <interrupt_handler+0x42>
	return api->irq_is_pending(dev);
     478:	4620      	mov	r0, r4
     47a:	4798      	blx	r3
     47c:	b310      	cbz	r0, 4c4 <interrupt_handler+0x88>
	const struct uart_driver_api *api =
     47e:	68a3      	ldr	r3, [r4, #8]
	if (api->irq_rx_ready == NULL) {
     480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     482:	b11b      	cbz	r3, 48c <interrupt_handler+0x50>
	return api->irq_rx_ready(dev);
     484:	4620      	mov	r0, r4
     486:	4798      	blx	r3
		if (uart_irq_rx_ready(dev)) {
     488:	2800      	cmp	r0, #0
     48a:	d0e4      	beq.n	456 <interrupt_handler+0x1a>
			size_t len = MIN(ring_buf_space_get(&ringbuf),
     48c:	480e      	ldr	r0, [pc, #56]	; (4c8 <interrupt_handler+0x8c>)
     48e:	f00b fecc 	bl	c22a <ring_buf_space_get>
     492:	283f      	cmp	r0, #63	; 0x3f
     494:	d9d6      	bls.n	444 <interrupt_handler+0x8>
     496:	2240      	movs	r2, #64	; 0x40
	const struct uart_driver_api *api =
     498:	68a3      	ldr	r3, [r4, #8]
	if (api->fifo_read == NULL) {
     49a:	699b      	ldr	r3, [r3, #24]
     49c:	2b00      	cmp	r3, #0
     49e:	d0d6      	beq.n	44e <interrupt_handler+0x12>
	return api->fifo_read(dev, rx_data, size);
     4a0:	4669      	mov	r1, sp
     4a2:	4620      	mov	r0, r4
     4a4:	4798      	blx	r3
			if (recv_len < 0/*Substituir pelo menor valor do protocolo*/) {
     4a6:	1e02      	subs	r2, r0, #0
     4a8:	dbd3      	blt.n	452 <interrupt_handler+0x16>
			rb_len = ring_buf_put(&ringbuf, buffer, recv_len);
     4aa:	4669      	mov	r1, sp
     4ac:	4806      	ldr	r0, [pc, #24]	; (4c8 <interrupt_handler+0x8c>)
     4ae:	f00b fefd 	bl	c2ac <ring_buf_put>
			if (rb_len) {
     4b2:	2800      	cmp	r0, #0
     4b4:	d0cf      	beq.n	456 <interrupt_handler+0x1a>
	const struct uart_driver_api *api =
     4b6:	68a3      	ldr	r3, [r4, #8]
	if (api->irq_tx_enable != NULL) {
     4b8:	69db      	ldr	r3, [r3, #28]
     4ba:	2b00      	cmp	r3, #0
     4bc:	d0cb      	beq.n	456 <interrupt_handler+0x1a>
		api->irq_tx_enable(dev);
     4be:	4620      	mov	r0, r4
     4c0:	4798      	blx	r3
     4c2:	e7c8      	b.n	456 <interrupt_handler+0x1a>
			// SendMsg(buffer2, rb_len);
		// }
        // //  ReadMsg();   
		// }
	}
}
     4c4:	b010      	add	sp, #64	; 0x40
     4c6:	bd10      	pop	{r4, pc}
     4c8:	20000c48 	.word	0x20000c48
     4cc:	20002548 	.word	0x20002548

000004d0 <configureUSB>:
		}
    }
}


void configureUSB(){
     4d0:	b510      	push	{r4, lr}
     4d2:	b082      	sub	sp, #8
    const struct device *dev;
	dev = DEVICE_DT_GET_ONE(zephyr_cdc_acm_uart);
	uart_dev = dev;
     4d4:	482a      	ldr	r0, [pc, #168]	; (580 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x98>)
     4d6:	4b2b      	ldr	r3, [pc, #172]	; (584 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x9c>)
     4d8:	6018      	str	r0, [r3, #0]
	uint32_t baudrate, dtr = 0U;
     4da:	2300      	movs	r3, #0
     4dc:	9300      	str	r3, [sp, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
     4de:	f00d fba4 	bl	dc2a <z_device_ready>
     4e2:	b118      	cbz	r0, 4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>
	int ret;

	if (!device_is_ready(dev)) {
		return;
	}
	ret = usb_enable(NULL);
     4e4:	2000      	movs	r0, #0
     4e6:	f002 fa2f 	bl	2948 <usb_enable>
	if (ret != 0) {
     4ea:	b108      	cbz	r0, 4f0 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x8>

	ret = uart_line_ctrl_get(dev, UART_LINE_CTRL_BAUD_RATE, &baudrate);
	uart_irq_callback_set(dev, interrupt_handler);
	/* Enable rx interrupts */
	uart_irq_rx_enable(dev);
}
     4ec:	b002      	add	sp, #8
     4ee:	bd10      	pop	{r4, pc}
				 uint32_t size,
				 void *data)
{
	__ASSERT(size < RING_BUFFER_MAX_SIZE, RING_BUFFER_SIZE_ASSERT_MSG);

	memset(buf, 0, sizeof(struct ring_buf));
     4f0:	4c25      	ldr	r4, [pc, #148]	; (588 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa0>)
     4f2:	221c      	movs	r2, #28
     4f4:	2100      	movs	r1, #0
     4f6:	4620      	mov	r0, r4
     4f8:	f00c fde9 	bl	d0ce <memset>
	buf->size = size;
     4fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
     500:	6123      	str	r3, [r4, #16]
	buf->buf.buf32 = (uint32_t *)data;
     502:	4b22      	ldr	r3, [pc, #136]	; (58c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa4>)
     504:	6163      	str	r3, [r4, #20]
	if (is_power_of_two(size)) {
		buf->mask = size - 1U;
     506:	f240 33ff 	movw	r3, #1023	; 0x3ff
     50a:	61a3      	str	r3, [r4, #24]

static inline int z_impl_uart_line_ctrl_get(const struct device *dev,
					    uint32_t ctrl, uint32_t *val)
{
#ifdef CONFIG_UART_LINE_CTRL
	const struct uart_driver_api *api =
     50c:	4b1c      	ldr	r3, [pc, #112]	; (580 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x98>)
     50e:	689b      	ldr	r3, [r3, #8]
		(const struct uart_driver_api *)dev->api;

	if (api->line_ctrl_get == NULL) {
     510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
     512:	b11b      	cbz	r3, 51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>
		return -ENOSYS;
	}
	return api->line_ctrl_get(dev, ctrl, val);
     514:	466a      	mov	r2, sp
     516:	2104      	movs	r1, #4
     518:	4819      	ldr	r0, [pc, #100]	; (580 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x98>)
     51a:	4798      	blx	r3
		if (dtr) {
     51c:	9b00      	ldr	r3, [sp, #0]
     51e:	b92b      	cbnz	r3, 52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>
		/* coverity[OVERRUN] */
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     520:	f640 40cd 	movw	r0, #3277	; 0xccd
     524:	2100      	movs	r1, #0
     526:	f00a fb49 	bl	abbc <z_impl_k_sleep>
		uart_line_ctrl_get(dev, UART_LINE_CTRL_DTR, &dtr);
     52a:	e7ef      	b.n	50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>
	const struct uart_driver_api *api =
     52c:	4b14      	ldr	r3, [pc, #80]	; (580 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x98>)
     52e:	689b      	ldr	r3, [r3, #8]
	if (api->line_ctrl_set == NULL) {
     530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
     532:	b11b      	cbz	r3, 53c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x54>
	return api->line_ctrl_set(dev, ctrl, val);
     534:	2201      	movs	r2, #1
     536:	2108      	movs	r1, #8
     538:	4811      	ldr	r0, [pc, #68]	; (580 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x98>)
     53a:	4798      	blx	r3
	const struct uart_driver_api *api =
     53c:	4b10      	ldr	r3, [pc, #64]	; (580 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x98>)
     53e:	689b      	ldr	r3, [r3, #8]
	if (api->line_ctrl_set == NULL) {
     540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
     542:	b11b      	cbz	r3, 54c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x64>
	return api->line_ctrl_set(dev, ctrl, val);
     544:	2201      	movs	r2, #1
     546:	2110      	movs	r1, #16
     548:	480d      	ldr	r0, [pc, #52]	; (580 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x98>)
     54a:	4798      	blx	r3
		arch_syscall_invoke1(*(uintptr_t *)&usec_to_wait, K_SYSCALL_K_BUSY_WAIT);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_busy_wait(usec_to_wait);
     54c:	4810      	ldr	r0, [pc, #64]	; (590 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xa8>)
     54e:	f00d ff25 	bl	e39c <z_impl_k_busy_wait>
	const struct uart_driver_api *api =
     552:	4b0b      	ldr	r3, [pc, #44]	; (580 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x98>)
     554:	689c      	ldr	r4, [r3, #8]
	if (api->line_ctrl_get == NULL) {
     556:	6d23      	ldr	r3, [r4, #80]	; 0x50
     558:	b11b      	cbz	r3, 562 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x7a>
	return api->line_ctrl_get(dev, ctrl, val);
     55a:	aa01      	add	r2, sp, #4
     55c:	2101      	movs	r1, #1
     55e:	4808      	ldr	r0, [pc, #32]	; (580 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x98>)
     560:	4798      	blx	r3
	if ((api != NULL) && (api->irq_callback_set != NULL)) {
     562:	b12c      	cbz	r4, 570 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x88>
     564:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     566:	b11b      	cbz	r3, 570 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x88>
		api->irq_callback_set(dev, cb, user_data);
     568:	2200      	movs	r2, #0
     56a:	490a      	ldr	r1, [pc, #40]	; (594 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xac>)
     56c:	4804      	ldr	r0, [pc, #16]	; (580 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x98>)
     56e:	4798      	blx	r3
	const struct uart_driver_api *api =
     570:	4b03      	ldr	r3, [pc, #12]	; (580 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x98>)
     572:	689b      	ldr	r3, [r3, #8]
	if (api->irq_rx_enable != NULL) {
     574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     576:	2b00      	cmp	r3, #0
     578:	d0b8      	beq.n	4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>
		api->irq_rx_enable(dev);
     57a:	4801      	ldr	r0, [pc, #4]	; (580 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x98>)
     57c:	4798      	blx	r3
     57e:	e7b5      	b.n	4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>
     580:	0000e61c 	.word	0x0000e61c
     584:	20000c64 	.word	0x20000c64
     588:	20000c48 	.word	0x20000c48
     58c:	20000848 	.word	0x20000848
     590:	000f4240 	.word	0x000f4240
     594:	0000043d 	.word	0x0000043d

00000598 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
     598:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
     59a:	680b      	ldr	r3, [r1, #0]
     59c:	3301      	adds	r3, #1
     59e:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     5a0:	4b01      	ldr	r3, [pc, #4]	; (5a8 <char_out+0x10>)
     5a2:	681b      	ldr	r3, [r3, #0]
     5a4:	4798      	blx	r3
}
     5a6:	bd08      	pop	{r3, pc}
     5a8:	20000000 	.word	0x20000000

000005ac <__printk_hook_install>:
	_char_out = fn;
     5ac:	4b01      	ldr	r3, [pc, #4]	; (5b4 <__printk_hook_install+0x8>)
     5ae:	6018      	str	r0, [r3, #0]
}
     5b0:	4770      	bx	lr
     5b2:	bf00      	nop
     5b4:	20000000 	.word	0x20000000

000005b8 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
     5b8:	b500      	push	{lr}
     5ba:	b083      	sub	sp, #12
     5bc:	4602      	mov	r2, r0
     5be:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
     5c0:	2100      	movs	r1, #0
     5c2:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
     5c4:	a901      	add	r1, sp, #4
     5c6:	4803      	ldr	r0, [pc, #12]	; (5d4 <vprintk+0x1c>)
     5c8:	f000 f8c8 	bl	75c <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
     5cc:	b003      	add	sp, #12
     5ce:	f85d fb04 	ldr.w	pc, [sp], #4
     5d2:	bf00      	nop
     5d4:	00000599 	.word	0x00000599

000005d8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     5d8:	b510      	push	{r4, lr}
     5da:	b084      	sub	sp, #16
     5dc:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
     5de:	9001      	str	r0, [sp, #4]
     5e0:	9102      	str	r1, [sp, #8]
     5e2:	2100      	movs	r1, #0
     5e4:	9103      	str	r1, [sp, #12]

	cbvprintf(str_out, &ctx, fmt, ap);
     5e6:	a901      	add	r1, sp, #4
     5e8:	4805      	ldr	r0, [pc, #20]	; (600 <vsnprintk+0x28>)
     5ea:	f000 f8b7 	bl	75c <cbvprintf>

	if (ctx.count < ctx.max) {
     5ee:	9b03      	ldr	r3, [sp, #12]
     5f0:	9a02      	ldr	r2, [sp, #8]
     5f2:	4293      	cmp	r3, r2
     5f4:	da01      	bge.n	5fa <vsnprintk+0x22>
		str[ctx.count] = '\0';
     5f6:	2200      	movs	r2, #0
     5f8:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
     5fa:	9803      	ldr	r0, [sp, #12]
     5fc:	b004      	add	sp, #16
     5fe:	bd10      	pop	{r4, pc}
     600:	0000b5d5 	.word	0x0000b5d5

00000604 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     608:	b083      	sub	sp, #12
     60a:	4604      	mov	r4, r0
     60c:	4608      	mov	r0, r1
     60e:	4615      	mov	r5, r2
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     610:	8b23      	ldrh	r3, [r4, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     612:	f013 0f08 	tst.w	r3, #8
     616:	d105      	bne.n	624 <process_event+0x20>
     618:	f003 0607 	and.w	r6, r3, #7
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
     61c:	2300      	movs	r3, #0
     61e:	9300      	str	r3, [sp, #0]
	list->tail = NULL;
     620:	9301      	str	r3, [sp, #4]
}
     622:	e069      	b.n	6f8 <process_event+0xf4>
		if (evt == EVT_COMPLETE) {
     624:	2901      	cmp	r1, #1
     626:	d009      	beq.n	63c <process_event+0x38>
			mgr->flags |= ONOFF_FLAG_COMPLETE;
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     628:	f043 0320 	orr.w	r3, r3, #32
     62c:	8323      	strh	r3, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     62e:	f385 8811 	msr	BASEPRI, r5
     632:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     636:	b003      	add	sp, #12
     638:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     63c:	f043 0310 	orr.w	r3, r3, #16
     640:	8323      	strh	r3, [r4, #24]
     642:	e7f4      	b.n	62e <process_event+0x2a>
			evt = process_recheck(mgr);
     644:	4620      	mov	r0, r4
     646:	f00b f820 	bl	b68a <process_recheck>
     64a:	e057      	b.n	6fc <process_event+0xf8>
			res = mgr->last_res;
     64c:	f8d4 9014 	ldr.w	r9, [r4, #20]
			process_complete(mgr, &clients, res);
     650:	464a      	mov	r2, r9
     652:	4669      	mov	r1, sp
     654:	4620      	mov	r0, r4
     656:	f00b f831 	bl	b6bc <process_complete>
		onoff_transition_fn transit = NULL;
     65a:	2700      	movs	r7, #0
     65c:	e05a      	b.n	714 <process_event+0x110>
			transit = mgr->transitions->start;
     65e:	6923      	ldr	r3, [r4, #16]
     660:	681f      	ldr	r7, [r3, #0]
			set_state(mgr, ONOFF_STATE_TO_ON);
     662:	2106      	movs	r1, #6
     664:	4620      	mov	r0, r4
     666:	f00a ffe9 	bl	b63c <set_state>
		res = 0;
     66a:	f04f 0900 	mov.w	r9, #0
     66e:	e051      	b.n	714 <process_event+0x110>
			transit = mgr->transitions->stop;
     670:	6923      	ldr	r3, [r4, #16]
     672:	685f      	ldr	r7, [r3, #4]
			set_state(mgr, ONOFF_STATE_TO_OFF);
     674:	2104      	movs	r1, #4
     676:	4620      	mov	r0, r4
     678:	f00a ffe0 	bl	b63c <set_state>
		res = 0;
     67c:	f04f 0900 	mov.w	r9, #0
     680:	e048      	b.n	714 <process_event+0x110>
			transit = mgr->transitions->reset;
     682:	6923      	ldr	r3, [r4, #16]
     684:	689f      	ldr	r7, [r3, #8]
			set_state(mgr, ONOFF_STATE_RESETTING);
     686:	2105      	movs	r1, #5
     688:	4620      	mov	r0, r4
     68a:	f00a ffd7 	bl	b63c <set_state>
		res = 0;
     68e:	f04f 0900 	mov.w	r9, #0
     692:	e03f      	b.n	714 <process_event+0x110>
				   && !sys_slist_is_empty(&mgr->monitors);
     694:	2200      	movs	r2, #0
     696:	e046      	b.n	726 <process_event+0x122>
     698:	2200      	movs	r2, #0
     69a:	e044      	b.n	726 <process_event+0x122>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     69c:	f043 0308 	orr.w	r3, r3, #8
			mgr->flags = flags;
     6a0:	8323      	strh	r3, [r4, #24]
     6a2:	f385 8811 	msr	BASEPRI, r5
     6a6:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     6aa:	2900      	cmp	r1, #0
     6ac:	d144      	bne.n	738 <process_event+0x134>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     6ae:	9b00      	ldr	r3, [sp, #0]
			if (!sys_slist_is_empty(&clients)) {
     6b0:	b12b      	cbz	r3, 6be <process_event+0xba>
				notify_all(mgr, &clients, state, res);
     6b2:	464b      	mov	r3, r9
     6b4:	4642      	mov	r2, r8
     6b6:	4669      	mov	r1, sp
     6b8:	4620      	mov	r0, r4
     6ba:	f00b f875 	bl	b7a8 <notify_all>
			if (transit != NULL) {
     6be:	b117      	cbz	r7, 6c6 <process_event+0xc2>
				transit(mgr, transition_complete);
     6c0:	4925      	ldr	r1, [pc, #148]	; (758 <process_event+0x154>)
     6c2:	4620      	mov	r0, r4
     6c4:	47b8      	blx	r7
	__asm__ volatile(
     6c6:	f04f 0320 	mov.w	r3, #32
     6ca:	f3ef 8511 	mrs	r5, BASEPRI
     6ce:	f383 8812 	msr	BASEPRI_MAX, r3
     6d2:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     6d6:	8b23      	ldrh	r3, [r4, #24]
     6d8:	f023 0308 	bic.w	r3, r3, #8
     6dc:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     6de:	8b23      	ldrh	r3, [r4, #24]
     6e0:	f013 0f10 	tst.w	r3, #16
     6e4:	d02e      	beq.n	744 <process_event+0x140>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     6e6:	f023 0310 	bic.w	r3, r3, #16
     6ea:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     6ec:	2001      	movs	r0, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     6ee:	8b26      	ldrh	r6, [r4, #24]
     6f0:	f006 0607 	and.w	r6, r6, #7
	} while (evt != EVT_NOP);
     6f4:	2800      	cmp	r0, #0
     6f6:	d09a      	beq.n	62e <process_event+0x2a>
		if (evt == EVT_RECHECK) {
     6f8:	2802      	cmp	r0, #2
     6fa:	d0a3      	beq.n	644 <process_event+0x40>
		if (evt == EVT_NOP) {
     6fc:	2800      	cmp	r0, #0
     6fe:	d096      	beq.n	62e <process_event+0x2a>
		if (evt == EVT_COMPLETE) {
     700:	2801      	cmp	r0, #1
     702:	d0a3      	beq.n	64c <process_event+0x48>
		} else if (evt == EVT_START) {
     704:	2803      	cmp	r0, #3
     706:	d0aa      	beq.n	65e <process_event+0x5a>
		} else if (evt == EVT_STOP) {
     708:	2804      	cmp	r0, #4
     70a:	d0b1      	beq.n	670 <process_event+0x6c>
		} else if (evt == EVT_RESET) {
     70c:	2805      	cmp	r0, #5
     70e:	d0b8      	beq.n	682 <process_event+0x7e>
		onoff_transition_fn transit = NULL;
     710:	2700      	movs	r7, #0
		res = 0;
     712:	46b9      	mov	r9, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     714:	8b23      	ldrh	r3, [r4, #24]
     716:	f003 0807 	and.w	r8, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     71a:	45b0      	cmp	r8, r6
     71c:	d0ba      	beq.n	694 <process_event+0x90>
     71e:	68a2      	ldr	r2, [r4, #8]
     720:	2a00      	cmp	r2, #0
     722:	d0b9      	beq.n	698 <process_event+0x94>
     724:	2201      	movs	r2, #1
		if (do_monitors
     726:	4611      	mov	r1, r2
     728:	2a00      	cmp	r2, #0
     72a:	d1b7      	bne.n	69c <process_event+0x98>
     72c:	9a00      	ldr	r2, [sp, #0]
		    || !sys_slist_is_empty(&clients)
     72e:	2a00      	cmp	r2, #0
     730:	d1b4      	bne.n	69c <process_event+0x98>
		    || (transit != NULL)) {
     732:	2f00      	cmp	r7, #0
     734:	d1b2      	bne.n	69c <process_event+0x98>
     736:	e7d2      	b.n	6de <process_event+0xda>
				notify_monitors(mgr, state, res);
     738:	464a      	mov	r2, r9
     73a:	4641      	mov	r1, r8
     73c:	4620      	mov	r0, r4
     73e:	f00a ff85 	bl	b64c <notify_monitors>
     742:	e7b4      	b.n	6ae <process_event+0xaa>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     744:	f013 0f20 	tst.w	r3, #32
     748:	d004      	beq.n	754 <process_event+0x150>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     74a:	f023 0320 	bic.w	r3, r3, #32
     74e:	8323      	strh	r3, [r4, #24]
			evt = EVT_RECHECK;
     750:	2002      	movs	r0, #2
     752:	e7cc      	b.n	6ee <process_event+0xea>
		evt = EVT_NOP;
     754:	2000      	movs	r0, #0
     756:	e7ca      	b.n	6ee <process_event+0xea>
     758:	0000b7d7 	.word	0x0000b7d7

0000075c <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     75c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     760:	b093      	sub	sp, #76	; 0x4c
     762:	4606      	mov	r6, r0
     764:	460d      	mov	r5, r1
     766:	4692      	mov	sl, r2
     768:	9303      	str	r3, [sp, #12]
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     76a:	2400      	movs	r4, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     76c:	f89a 0000 	ldrb.w	r0, [sl]
     770:	2800      	cmp	r0, #0
     772:	f000 84d6 	beq.w	1122 <CONFIG_FPROTECT_BLOCK_SIZE+0x122>
		if (*fp != '%') {
     776:	2825      	cmp	r0, #37	; 0x25
     778:	d008      	beq.n	78c <cbvprintf+0x30>
			OUTC(*fp++);
     77a:	f10a 0a01 	add.w	sl, sl, #1
     77e:	4629      	mov	r1, r5
     780:	47b0      	blx	r6
     782:	2800      	cmp	r0, #0
     784:	f2c0 84ce 	blt.w	1124 <CONFIG_FPROTECT_BLOCK_SIZE+0x124>
     788:	3401      	adds	r4, #1
			continue;
     78a:	e7ef      	b.n	76c <cbvprintf+0x10>
		 * mitigate LLVM code generation bug.
		 */
		struct {
			union argument_value value;
			struct conversion conv;
		} state = {
     78c:	2300      	movs	r3, #0
     78e:	9306      	str	r3, [sp, #24]
     790:	9307      	str	r3, [sp, #28]
     792:	930b      	str	r3, [sp, #44]	; 0x2c
	*conv = (struct conversion) {
     794:	9308      	str	r3, [sp, #32]
     796:	9309      	str	r3, [sp, #36]	; 0x24
     798:	930a      	str	r3, [sp, #40]	; 0x28
	++sp;
     79a:	f10a 0801 	add.w	r8, sl, #1
	if (*sp == '%') {
     79e:	f89a 3001 	ldrb.w	r3, [sl, #1]
     7a2:	2b25      	cmp	r3, #37	; 0x25
     7a4:	d001      	beq.n	7aa <cbvprintf+0x4e>
	bool loop = true;
     7a6:	2701      	movs	r7, #1
     7a8:	e02c      	b.n	804 <CONFIG_ISR_STACK_SIZE+0x4>
		conv->specifier = *sp++;
     7aa:	f10a 0802 	add.w	r8, sl, #2
     7ae:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		return sp;
     7b2:	e1a8      	b.n	b06 <CONFIG_ISR_STACK_SIZE+0x306>
			conv->flag_dash = true;
     7b4:	f89d 3020 	ldrb.w	r3, [sp, #32]
     7b8:	f043 0304 	orr.w	r3, r3, #4
     7bc:	f88d 3020 	strb.w	r3, [sp, #32]
		if (loop) {
     7c0:	b1ff      	cbz	r7, 802 <CONFIG_ISR_STACK_SIZE+0x2>
			++sp;
     7c2:	f108 0801 	add.w	r8, r8, #1
     7c6:	e01c      	b.n	802 <CONFIG_ISR_STACK_SIZE+0x2>
			conv->flag_plus = true;
     7c8:	f89d 3020 	ldrb.w	r3, [sp, #32]
     7cc:	f043 0308 	orr.w	r3, r3, #8
     7d0:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     7d4:	e7f4      	b.n	7c0 <cbvprintf+0x64>
			conv->flag_space = true;
     7d6:	f89d 3020 	ldrb.w	r3, [sp, #32]
     7da:	f043 0310 	orr.w	r3, r3, #16
     7de:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     7e2:	e7ed      	b.n	7c0 <cbvprintf+0x64>
			conv->flag_hash = true;
     7e4:	f89d 3020 	ldrb.w	r3, [sp, #32]
     7e8:	f043 0320 	orr.w	r3, r3, #32
     7ec:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     7f0:	e7e6      	b.n	7c0 <cbvprintf+0x64>
			conv->flag_zero = true;
     7f2:	f89d 3020 	ldrb.w	r3, [sp, #32]
     7f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     7fa:	f88d 3020 	strb.w	r3, [sp, #32]
			break;
     7fe:	e7df      	b.n	7c0 <cbvprintf+0x64>
		switch (*sp) {
     800:	2700      	movs	r7, #0
	} while (loop);
     802:	b34f      	cbz	r7, 858 <CONFIG_ISR_STACK_SIZE+0x58>
		switch (*sp) {
     804:	f898 3000 	ldrb.w	r3, [r8]
     808:	3b20      	subs	r3, #32
     80a:	2b10      	cmp	r3, #16
     80c:	d8f8      	bhi.n	800 <CONFIG_ISR_STACK_SIZE>
     80e:	a201      	add	r2, pc, #4	; (adr r2, 814 <CONFIG_ISR_STACK_SIZE+0x14>)
     810:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     814:	000007d7 	.word	0x000007d7
     818:	00000801 	.word	0x00000801
     81c:	00000801 	.word	0x00000801
     820:	000007e5 	.word	0x000007e5
     824:	00000801 	.word	0x00000801
     828:	00000801 	.word	0x00000801
     82c:	00000801 	.word	0x00000801
     830:	00000801 	.word	0x00000801
     834:	00000801 	.word	0x00000801
     838:	00000801 	.word	0x00000801
     83c:	00000801 	.word	0x00000801
     840:	000007c9 	.word	0x000007c9
     844:	00000801 	.word	0x00000801
     848:	000007b5 	.word	0x000007b5
     84c:	00000801 	.word	0x00000801
     850:	00000801 	.word	0x00000801
     854:	000007f3 	.word	0x000007f3
	if (conv->flag_zero && conv->flag_dash) {
     858:	f89d 3020 	ldrb.w	r3, [sp, #32]
     85c:	f003 0344 	and.w	r3, r3, #68	; 0x44
     860:	2b44      	cmp	r3, #68	; 0x44
     862:	d06d      	beq.n	940 <CONFIG_ISR_STACK_SIZE+0x140>
	sp = extract_width(conv, sp);
     864:	f8cd 8014 	str.w	r8, [sp, #20]
	conv->width_present = true;
     868:	f89d 3020 	ldrb.w	r3, [sp, #32]
     86c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     870:	f88d 3020 	strb.w	r3, [sp, #32]
	if (*sp == '*') {
     874:	f898 3000 	ldrb.w	r3, [r8]
     878:	2b2a      	cmp	r3, #42	; 0x2a
     87a:	d068      	beq.n	94e <CONFIG_ISR_STACK_SIZE+0x14e>
	size_t width = extract_decimal(&sp);
     87c:	a805      	add	r0, sp, #20
     87e:	f00b fc07 	bl	c090 <extract_decimal>
	if (sp != wp) {
     882:	9b05      	ldr	r3, [sp, #20]
     884:	4598      	cmp	r8, r3
     886:	d012      	beq.n	8ae <CONFIG_ISR_STACK_SIZE+0xae>
		conv->width_present = true;
     888:	f89d 3020 	ldrb.w	r3, [sp, #32]
     88c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
     890:	f88d 3020 	strb.w	r3, [sp, #32]
		conv->width_value = width;
     894:	9009      	str	r0, [sp, #36]	; 0x24
		conv->unsupported |= ((conv->width_value < 0)
     896:	f3c3 0340 	ubfx	r3, r3, #1, #1
				      || (width != (size_t)conv->width_value));
     89a:	2800      	cmp	r0, #0
     89c:	db60      	blt.n	960 <CONFIG_ISR_STACK_SIZE+0x160>
     89e:	2200      	movs	r2, #0
		conv->unsupported |= ((conv->width_value < 0)
     8a0:	4313      	orrs	r3, r2
     8a2:	f89d 2020 	ldrb.w	r2, [sp, #32]
     8a6:	f363 0241 	bfi	r2, r3, #1, #1
     8aa:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
     8ae:	9b05      	ldr	r3, [sp, #20]
	sp = extract_prec(conv, sp);
     8b0:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
     8b2:	781b      	ldrb	r3, [r3, #0]
     8b4:	2b2e      	cmp	r3, #46	; 0x2e
     8b6:	bf14      	ite	ne
     8b8:	2300      	movne	r3, #0
     8ba:	2301      	moveq	r3, #1
     8bc:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     8c0:	f363 0241 	bfi	r2, r3, #1, #1
     8c4:	f88d 2021 	strb.w	r2, [sp, #33]	; 0x21
	if (!conv->prec_present) {
     8c8:	2b00      	cmp	r3, #0
     8ca:	d04b      	beq.n	964 <CONFIG_ISR_STACK_SIZE+0x164>
	++sp;
     8cc:	9b05      	ldr	r3, [sp, #20]
     8ce:	1c5a      	adds	r2, r3, #1
     8d0:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
     8d2:	785b      	ldrb	r3, [r3, #1]
     8d4:	2b2a      	cmp	r3, #42	; 0x2a
     8d6:	d048      	beq.n	96a <CONFIG_ISR_STACK_SIZE+0x16a>
	size_t prec = extract_decimal(&sp);
     8d8:	a805      	add	r0, sp, #20
     8da:	f00b fbd9 	bl	c090 <extract_decimal>
	conv->prec_value = prec;
     8de:	900a      	str	r0, [sp, #40]	; 0x28
	conv->unsupported |= ((conv->prec_value < 0)
     8e0:	f89d 3020 	ldrb.w	r3, [sp, #32]
     8e4:	f3c3 0340 	ubfx	r3, r3, #1, #1
			      || (prec != (size_t)conv->prec_value));
     8e8:	2800      	cmp	r0, #0
     8ea:	db47      	blt.n	97c <CONFIG_ISR_STACK_SIZE+0x17c>
     8ec:	2200      	movs	r2, #0
	conv->unsupported |= ((conv->prec_value < 0)
     8ee:	4313      	orrs	r3, r2
     8f0:	f89d 2020 	ldrb.w	r2, [sp, #32]
     8f4:	f363 0241 	bfi	r2, r3, #1, #1
     8f8:	f88d 2020 	strb.w	r2, [sp, #32]
	return sp;
     8fc:	f8dd 8014 	ldr.w	r8, [sp, #20]
	switch (*sp) {
     900:	f898 3000 	ldrb.w	r3, [r8]
     904:	3b4c      	subs	r3, #76	; 0x4c
     906:	2b2e      	cmp	r3, #46	; 0x2e
     908:	f200 80dc 	bhi.w	ac4 <CONFIG_ISR_STACK_SIZE+0x2c4>
     90c:	e8df f003 	tbb	[pc, r3]
     910:	dadadaca 	.word	0xdadadaca
     914:	dadadada 	.word	0xdadadada
     918:	dadadada 	.word	0xdadadada
     91c:	dadadada 	.word	0xdadadada
     920:	dadadada 	.word	0xdadadada
     924:	dadadada 	.word	0xdadadada
     928:	dadadada 	.word	0xdadadada
     92c:	da6ada38 	.word	0xda6ada38
     930:	dadada51 	.word	0xdadada51
     934:	dadadada 	.word	0xdadadada
     938:	dadadac0 	.word	0xdadadac0
     93c:	dada      	.short	0xdada
     93e:	b6          	.byte	0xb6
     93f:	00          	.byte	0x00
		conv->flag_zero = false;
     940:	f89d 3020 	ldrb.w	r3, [sp, #32]
     944:	f36f 1386 	bfc	r3, #6, #1
     948:	f88d 3020 	strb.w	r3, [sp, #32]
     94c:	e78a      	b.n	864 <CONFIG_ISR_STACK_SIZE+0x64>
		conv->width_star = true;
     94e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     952:	f043 0301 	orr.w	r3, r3, #1
     956:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
     95a:	4643      	mov	r3, r8
     95c:	3301      	adds	r3, #1
     95e:	e7a7      	b.n	8b0 <CONFIG_ISR_STACK_SIZE+0xb0>
				      || (width != (size_t)conv->width_value));
     960:	2201      	movs	r2, #1
     962:	e79d      	b.n	8a0 <CONFIG_ISR_STACK_SIZE+0xa0>
		return sp;
     964:	f8dd 8014 	ldr.w	r8, [sp, #20]
     968:	e7ca      	b.n	900 <CONFIG_ISR_STACK_SIZE+0x100>
		conv->prec_star = true;
     96a:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     96e:	f043 0304 	orr.w	r3, r3, #4
     972:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		return ++sp;
     976:	f102 0801 	add.w	r8, r2, #1
     97a:	e7c1      	b.n	900 <CONFIG_ISR_STACK_SIZE+0x100>
			      || (prec != (size_t)conv->prec_value));
     97c:	2201      	movs	r2, #1
     97e:	e7b6      	b.n	8ee <CONFIG_ISR_STACK_SIZE+0xee>
		if (*++sp == 'h') {
     980:	f108 0201 	add.w	r2, r8, #1
     984:	f898 3001 	ldrb.w	r3, [r8, #1]
     988:	2b68      	cmp	r3, #104	; 0x68
     98a:	d008      	beq.n	99e <CONFIG_ISR_STACK_SIZE+0x19e>
			conv->length_mod = LENGTH_H;
     98c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     990:	2102      	movs	r1, #2
     992:	f361 03c6 	bfi	r3, r1, #3, #4
     996:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'h') {
     99a:	4690      	mov	r8, r2
     99c:	e02b      	b.n	9f6 <CONFIG_ISR_STACK_SIZE+0x1f6>
			conv->length_mod = LENGTH_HH;
     99e:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     9a2:	2201      	movs	r2, #1
     9a4:	f362 03c6 	bfi	r3, r2, #3, #4
     9a8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
     9ac:	f108 0802 	add.w	r8, r8, #2
     9b0:	e021      	b.n	9f6 <CONFIG_ISR_STACK_SIZE+0x1f6>
		if (*++sp == 'l') {
     9b2:	f108 0201 	add.w	r2, r8, #1
     9b6:	f898 3001 	ldrb.w	r3, [r8, #1]
     9ba:	2b6c      	cmp	r3, #108	; 0x6c
     9bc:	d008      	beq.n	9d0 <CONFIG_ISR_STACK_SIZE+0x1d0>
			conv->length_mod = LENGTH_L;
     9be:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     9c2:	2103      	movs	r1, #3
     9c4:	f361 03c6 	bfi	r3, r1, #3, #4
     9c8:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		if (*++sp == 'l') {
     9cc:	4690      	mov	r8, r2
     9ce:	e012      	b.n	9f6 <CONFIG_ISR_STACK_SIZE+0x1f6>
			conv->length_mod = LENGTH_LL;
     9d0:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     9d4:	2204      	movs	r2, #4
     9d6:	f362 03c6 	bfi	r3, r2, #3, #4
     9da:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			++sp;
     9de:	f108 0802 	add.w	r8, r8, #2
     9e2:	e008      	b.n	9f6 <CONFIG_ISR_STACK_SIZE+0x1f6>
		conv->length_mod = LENGTH_J;
     9e4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     9e8:	2205      	movs	r2, #5
     9ea:	f362 03c6 	bfi	r3, r2, #3, #4
     9ee:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     9f2:	f108 0801 	add.w	r8, r8, #1
	conv->specifier = *sp++;
     9f6:	f818 3b01 	ldrb.w	r3, [r8], #1
     9fa:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	switch (conv->specifier) {
     9fe:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
     a02:	2a37      	cmp	r2, #55	; 0x37
     a04:	f200 8150 	bhi.w	ca8 <CONFIG_ISR_STACK_SIZE+0x4a8>
     a08:	e8df f012 	tbh	[pc, r2, lsl #1]
     a0c:	014e0126 	.word	0x014e0126
     a10:	014e014e 	.word	0x014e014e
     a14:	01260126 	.word	0x01260126
     a18:	014e0126 	.word	0x014e0126
     a1c:	014e014e 	.word	0x014e014e
     a20:	014e014e 	.word	0x014e014e
     a24:	014e014e 	.word	0x014e014e
     a28:	014e014e 	.word	0x014e014e
     a2c:	014e014e 	.word	0x014e014e
     a30:	014e014e 	.word	0x014e014e
     a34:	014e014e 	.word	0x014e014e
     a38:	0113014e 	.word	0x0113014e
     a3c:	014e014e 	.word	0x014e014e
     a40:	014e014e 	.word	0x014e014e
     a44:	014e014e 	.word	0x014e014e
     a48:	014e014e 	.word	0x014e014e
     a4c:	014e0126 	.word	0x014e0126
     a50:	00630113 	.word	0x00630113
     a54:	01260126 	.word	0x01260126
     a58:	014e0126 	.word	0x014e0126
     a5c:	014e0063 	.word	0x014e0063
     a60:	014e014e 	.word	0x014e014e
     a64:	012f014e 	.word	0x012f014e
     a68:	013f0113 	.word	0x013f0113
     a6c:	014e014e 	.word	0x014e014e
     a70:	014e013f 	.word	0x014e013f
     a74:	014e0113 	.word	0x014e0113
     a78:	0113014e 	.word	0x0113014e
		conv->length_mod = LENGTH_Z;
     a7c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     a80:	2206      	movs	r2, #6
     a82:	f362 03c6 	bfi	r3, r2, #3, #4
     a86:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     a8a:	f108 0801 	add.w	r8, r8, #1
		break;
     a8e:	e7b2      	b.n	9f6 <CONFIG_ISR_STACK_SIZE+0x1f6>
		conv->length_mod = LENGTH_T;
     a90:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     a94:	2207      	movs	r2, #7
     a96:	f362 03c6 	bfi	r3, r2, #3, #4
     a9a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     a9e:	f108 0801 	add.w	r8, r8, #1
		break;
     aa2:	e7a8      	b.n	9f6 <CONFIG_ISR_STACK_SIZE+0x1f6>
		conv->length_mod = LENGTH_UPPER_L;
     aa4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     aa8:	2208      	movs	r2, #8
     aaa:	f362 03c6 	bfi	r3, r2, #3, #4
     aae:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		++sp;
     ab2:	f108 0801 	add.w	r8, r8, #1
		conv->unsupported = true;
     ab6:	f89d 3020 	ldrb.w	r3, [sp, #32]
     aba:	f043 0302 	orr.w	r3, r3, #2
     abe:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
     ac2:	e798      	b.n	9f6 <CONFIG_ISR_STACK_SIZE+0x1f6>
		conv->length_mod = LENGTH_NONE;
     ac4:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     ac8:	f36f 03c6 	bfc	r3, #3, #4
     acc:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		break;
     ad0:	e791      	b.n	9f6 <CONFIG_ISR_STACK_SIZE+0x1f6>
		conv->specifier_cat = SPECIFIER_SINT;
     ad2:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
     ad6:	2101      	movs	r1, #1
     ad8:	f361 0202 	bfi	r2, r1, #0, #3
     adc:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
     ae0:	f89d 2021 	ldrb.w	r2, [sp, #33]	; 0x21
     ae4:	f002 0278 	and.w	r2, r2, #120	; 0x78
     ae8:	2a40      	cmp	r2, #64	; 0x40
     aea:	f000 80aa 	beq.w	c42 <CONFIG_ISR_STACK_SIZE+0x442>
		if (conv->specifier == 'c') {
     aee:	2b63      	cmp	r3, #99	; 0x63
     af0:	f000 80ae 	beq.w	c50 <CONFIG_ISR_STACK_SIZE+0x450>
	conv->unsupported |= unsupported;
     af4:	f89d 3020 	ldrb.w	r3, [sp, #32]
     af8:	f3c3 0240 	ubfx	r2, r3, #1, #1
     afc:	4317      	orrs	r7, r2
     afe:	f367 0341 	bfi	r3, r7, #1, #1
     b02:	f88d 3020 	strb.w	r3, [sp, #32]
		fp = extract_conversion(conv, sp);

		/* If dynamic width is specified, process it,
		 * otherwise set width if present.
		 */
		if (conv->width_star) {
     b06:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     b0a:	f013 0f01 	tst.w	r3, #1
     b0e:	f000 80da 	beq.w	cc6 <CONFIG_ISR_STACK_SIZE+0x4c6>
			width = va_arg(ap, int);
     b12:	9b03      	ldr	r3, [sp, #12]
     b14:	1d1a      	adds	r2, r3, #4
     b16:	9203      	str	r2, [sp, #12]
     b18:	681f      	ldr	r7, [r3, #0]

			if (width < 0) {
     b1a:	2f00      	cmp	r7, #0
     b1c:	f2c0 80cb 	blt.w	cb6 <CONFIG_ISR_STACK_SIZE+0x4b6>

		/* If dynamic precision is specified, process it, otherwise
		 * set precision if present.  For floating point where
		 * precision is not present use 6.
		 */
		if (conv->prec_star) {
     b20:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     b24:	f013 0f04 	tst.w	r3, #4
     b28:	f000 80df 	beq.w	cea <CONFIG_ISR_STACK_SIZE+0x4ea>
			int arg = va_arg(ap, int);
     b2c:	9b03      	ldr	r3, [sp, #12]
     b2e:	1d1a      	adds	r2, r3, #4
     b30:	9203      	str	r2, [sp, #12]
     b32:	f8d3 b000 	ldr.w	fp, [r3]

			if (arg < 0) {
     b36:	f1bb 0f00 	cmp.w	fp, #0
     b3a:	f2c0 80cd 	blt.w	cd8 <CONFIG_ISR_STACK_SIZE+0x4d8>
		}

		/* Reuse width and precision memory in conv for value
		 * padding counts.
		 */
		conv->pad0_value = 0;
     b3e:	2300      	movs	r3, #0
     b40:	9309      	str	r3, [sp, #36]	; 0x24
		conv->pad0_pre_exp = 0;
     b42:	930a      	str	r3, [sp, #40]	; 0x28
		 * This can't be extracted to a helper function because
		 * passing a pointer to va_list doesn't work on x86_64.  See
		 * https://stackoverflow.com/a/8048892.
		 */
		enum specifier_cat_enum specifier_cat
			= (enum specifier_cat_enum)conv->specifier_cat;
     b44:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     b48:	f003 0307 	and.w	r3, r3, #7
		enum length_mod_enum length_mod
			= (enum length_mod_enum)conv->length_mod;
     b4c:	f89d 1021 	ldrb.w	r1, [sp, #33]	; 0x21
     b50:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		/* Extract the value based on the argument category and length.
		 *
		 * Note that the length modifier doesn't affect the value of a
		 * pointer argument.
		 */
		if (specifier_cat == SPECIFIER_SINT) {
     b54:	2b01      	cmp	r3, #1
     b56:	f000 80d1 	beq.w	cfc <CONFIG_ISR_STACK_SIZE+0x4fc>
			if (length_mod == LENGTH_HH) {
				value->sint = (char)value->sint;
			} else if (length_mod == LENGTH_H) {
				value->sint = (short)value->sint;
			}
		} else if (specifier_cat == SPECIFIER_UINT) {
     b5a:	2b02      	cmp	r3, #2
     b5c:	f000 8116 	beq.w	d8c <CONFIG_ISR_STACK_SIZE+0x58c>
			if (length_mod == LENGTH_HH) {
				value->uint = (unsigned char)value->uint;
			} else if (length_mod == LENGTH_H) {
				value->uint = (unsigned short)value->uint;
			}
		} else if (specifier_cat == SPECIFIER_FP) {
     b60:	2b04      	cmp	r3, #4
     b62:	f000 8167 	beq.w	e34 <CONFIG_ISR_STACK_SIZE+0x634>
			if (length_mod == LENGTH_UPPER_L) {
				value->ldbl = va_arg(ap, long double);
			} else {
				value->dbl = va_arg(ap, double);
			}
		} else if (specifier_cat == SPECIFIER_PTR) {
     b66:	2b03      	cmp	r3, #3
     b68:	f000 817e 	beq.w	e68 <CONFIG_ISR_STACK_SIZE+0x668>
		/* We've now consumed all arguments related to this
		 * specification.  If the conversion is invalid, or is
		 * something we don't support, then output the original
		 * specification and move on.
		 */
		if (conv->invalid || conv->unsupported) {
     b6c:	f89d 9020 	ldrb.w	r9, [sp, #32]
     b70:	f019 0303 	ands.w	r3, r9, #3
     b74:	9302      	str	r3, [sp, #8]
     b76:	f040 817d 	bne.w	e74 <CONFIG_ISR_STACK_SIZE+0x674>
		}

		/* Do formatting, either into the buffer or
		 * referencing external data.
		 */
		switch (conv->specifier) {
     b7a:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
     b7e:	3b25      	subs	r3, #37	; 0x25
     b80:	2b53      	cmp	r3, #83	; 0x53
     b82:	f200 8233 	bhi.w	fec <CONFIG_ISR_STACK_SIZE+0x7ec>
     b86:	e8df f013 	tbh	[pc, r3, lsl #1]
     b8a:	0181      	.short	0x0181
     b8c:	02310231 	.word	0x02310231
     b90:	02310231 	.word	0x02310231
     b94:	02310231 	.word	0x02310231
     b98:	02310231 	.word	0x02310231
     b9c:	02310231 	.word	0x02310231
     ba0:	02310231 	.word	0x02310231
     ba4:	02310231 	.word	0x02310231
     ba8:	02310231 	.word	0x02310231
     bac:	02310231 	.word	0x02310231
     bb0:	02310231 	.word	0x02310231
     bb4:	02310231 	.word	0x02310231
     bb8:	02310231 	.word	0x02310231
     bbc:	02310231 	.word	0x02310231
     bc0:	02310231 	.word	0x02310231
     bc4:	02310231 	.word	0x02310231
     bc8:	02310231 	.word	0x02310231
     bcc:	02310231 	.word	0x02310231
     bd0:	02310231 	.word	0x02310231
     bd4:	02310231 	.word	0x02310231
     bd8:	02310231 	.word	0x02310231
     bdc:	02310231 	.word	0x02310231
     be0:	02310231 	.word	0x02310231
     be4:	02310231 	.word	0x02310231
     be8:	02310231 	.word	0x02310231
     bec:	02310231 	.word	0x02310231
     bf0:	023101c7 	.word	0x023101c7
     bf4:	02310231 	.word	0x02310231
     bf8:	02310231 	.word	0x02310231
     bfc:	02310231 	.word	0x02310231
     c00:	02310231 	.word	0x02310231
     c04:	01a10231 	.word	0x01a10231
     c08:	023101ab 	.word	0x023101ab
     c0c:	02310231 	.word	0x02310231
     c10:	01ab0231 	.word	0x01ab0231
     c14:	02310231 	.word	0x02310231
     c18:	02310231 	.word	0x02310231
     c1c:	01c70208 	.word	0x01c70208
     c20:	023101ea 	.word	0x023101ea
     c24:	018f0231 	.word	0x018f0231
     c28:	01c70231 	.word	0x01c70231
     c2c:	02310231 	.word	0x02310231
     c30:	01c7      	.short	0x01c7
		conv->specifier_cat = SPECIFIER_UINT;
     c32:	f89d 2022 	ldrb.w	r2, [sp, #34]	; 0x22
     c36:	2102      	movs	r1, #2
     c38:	f361 0202 	bfi	r2, r1, #0, #3
     c3c:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
     c40:	e74e      	b.n	ae0 <CONFIG_ISR_STACK_SIZE+0x2e0>
			conv->invalid = true;
     c42:	f89d 1020 	ldrb.w	r1, [sp, #32]
     c46:	f041 0101 	orr.w	r1, r1, #1
     c4a:	f88d 1020 	strb.w	r1, [sp, #32]
     c4e:	e74e      	b.n	aee <CONFIG_ISR_STACK_SIZE+0x2ee>
			unsupported = (conv->length_mod != LENGTH_NONE);
     c50:	1e17      	subs	r7, r2, #0
     c52:	bf18      	it	ne
     c54:	2701      	movne	r7, #1
     c56:	e74d      	b.n	af4 <CONFIG_ISR_STACK_SIZE+0x2f4>
		conv->specifier_cat = SPECIFIER_FP;
     c58:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     c5c:	2204      	movs	r2, #4
     c5e:	f362 0302 	bfi	r3, r2, #0, #3
     c62:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
			unsupported = true;
     c66:	2701      	movs	r7, #1
			break;
     c68:	e744      	b.n	af4 <CONFIG_ISR_STACK_SIZE+0x2f4>
		conv->specifier_cat = SPECIFIER_PTR;
     c6a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     c6e:	2203      	movs	r2, #3
     c70:	f362 0302 	bfi	r3, r2, #0, #3
     c74:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod == LENGTH_UPPER_L) {
     c78:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     c7c:	f003 0378 	and.w	r3, r3, #120	; 0x78
     c80:	2b40      	cmp	r3, #64	; 0x40
     c82:	f47f af37 	bne.w	af4 <CONFIG_ISR_STACK_SIZE+0x2f4>
			unsupported = true;
     c86:	2701      	movs	r7, #1
     c88:	e734      	b.n	af4 <CONFIG_ISR_STACK_SIZE+0x2f4>
		conv->specifier_cat = SPECIFIER_PTR;
     c8a:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     c8e:	2203      	movs	r2, #3
     c90:	f362 0302 	bfi	r3, r2, #0, #3
     c94:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
		if (conv->length_mod != LENGTH_NONE) {
     c98:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     c9c:	f013 0f78 	tst.w	r3, #120	; 0x78
     ca0:	f43f af28 	beq.w	af4 <CONFIG_ISR_STACK_SIZE+0x2f4>
			unsupported = true;
     ca4:	2701      	movs	r7, #1
     ca6:	e725      	b.n	af4 <CONFIG_ISR_STACK_SIZE+0x2f4>
		conv->invalid = true;
     ca8:	f89d 3020 	ldrb.w	r3, [sp, #32]
     cac:	f043 0301 	orr.w	r3, r3, #1
     cb0:	f88d 3020 	strb.w	r3, [sp, #32]
		break;
     cb4:	e71e      	b.n	af4 <CONFIG_ISR_STACK_SIZE+0x2f4>
				conv->flag_dash = true;
     cb6:	f89d 3020 	ldrb.w	r3, [sp, #32]
     cba:	f043 0304 	orr.w	r3, r3, #4
     cbe:	f88d 3020 	strb.w	r3, [sp, #32]
				width = -width;
     cc2:	427f      	negs	r7, r7
     cc4:	e72c      	b.n	b20 <CONFIG_ISR_STACK_SIZE+0x320>
		} else if (conv->width_present) {
     cc6:	f99d 3020 	ldrsb.w	r3, [sp, #32]
     cca:	2b00      	cmp	r3, #0
     ccc:	db02      	blt.n	cd4 <CONFIG_ISR_STACK_SIZE+0x4d4>
		int width = -1;
     cce:	f04f 37ff 	mov.w	r7, #4294967295
     cd2:	e725      	b.n	b20 <CONFIG_ISR_STACK_SIZE+0x320>
			width = conv->width_value;
     cd4:	9f09      	ldr	r7, [sp, #36]	; 0x24
     cd6:	e723      	b.n	b20 <CONFIG_ISR_STACK_SIZE+0x320>
				conv->prec_present = false;
     cd8:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     cdc:	f36f 0341 	bfc	r3, #1, #1
     ce0:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
		int precision = -1;
     ce4:	f04f 3bff 	mov.w	fp, #4294967295
     ce8:	e729      	b.n	b3e <CONFIG_ISR_STACK_SIZE+0x33e>
		} else if (conv->prec_present) {
     cea:	f013 0f02 	tst.w	r3, #2
     cee:	d002      	beq.n	cf6 <CONFIG_ISR_STACK_SIZE+0x4f6>
			precision = conv->prec_value;
     cf0:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
     cf4:	e723      	b.n	b3e <CONFIG_ISR_STACK_SIZE+0x33e>
		int precision = -1;
     cf6:	f04f 3bff 	mov.w	fp, #4294967295
     cfa:	e720      	b.n	b3e <CONFIG_ISR_STACK_SIZE+0x33e>
			switch (length_mod) {
     cfc:	1ecb      	subs	r3, r1, #3
     cfe:	2b04      	cmp	r3, #4
     d00:	d804      	bhi.n	d0c <CONFIG_ISR_STACK_SIZE+0x50c>
     d02:	e8df f003 	tbb	[pc, r3]
     d06:	1d0b      	.short	0x1d0b
     d08:	3529      	.short	0x3529
     d0a:	35          	.byte	0x35
     d0b:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
     d0c:	9b03      	ldr	r3, [sp, #12]
     d0e:	1d1a      	adds	r2, r3, #4
     d10:	9203      	str	r2, [sp, #12]
     d12:	681a      	ldr	r2, [r3, #0]
     d14:	17d3      	asrs	r3, r2, #31
     d16:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     d1a:	e006      	b.n	d2a <CONFIG_ISR_STACK_SIZE+0x52a>
					value->sint = va_arg(ap, long);
     d1c:	9b03      	ldr	r3, [sp, #12]
     d1e:	1d1a      	adds	r2, r3, #4
     d20:	9203      	str	r2, [sp, #12]
     d22:	681a      	ldr	r2, [r3, #0]
     d24:	17d3      	asrs	r3, r2, #31
     d26:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
     d2a:	2901      	cmp	r1, #1
     d2c:	d028      	beq.n	d80 <CONFIG_ISR_STACK_SIZE+0x580>
			} else if (length_mod == LENGTH_H) {
     d2e:	2902      	cmp	r1, #2
     d30:	f47f af1c 	bne.w	b6c <CONFIG_ISR_STACK_SIZE+0x36c>
				value->sint = (short)value->sint;
     d34:	f9bd 2018 	ldrsh.w	r2, [sp, #24]
     d38:	17d3      	asrs	r3, r2, #31
     d3a:	e9cd 2306 	strd	r2, r3, [sp, #24]
     d3e:	e715      	b.n	b6c <CONFIG_ISR_STACK_SIZE+0x36c>
					(sint_value_type)va_arg(ap, long long);
     d40:	9b03      	ldr	r3, [sp, #12]
     d42:	3307      	adds	r3, #7
     d44:	f023 0307 	bic.w	r3, r3, #7
     d48:	f103 0208 	add.w	r2, r3, #8
     d4c:	9203      	str	r2, [sp, #12]
     d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     d52:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     d56:	e7e8      	b.n	d2a <CONFIG_ISR_STACK_SIZE+0x52a>
					(sint_value_type)va_arg(ap, intmax_t);
     d58:	9b03      	ldr	r3, [sp, #12]
     d5a:	3307      	adds	r3, #7
     d5c:	f023 0307 	bic.w	r3, r3, #7
     d60:	f103 0208 	add.w	r2, r3, #8
     d64:	9203      	str	r2, [sp, #12]
     d66:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->sint =
     d6a:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     d6e:	e7dc      	b.n	d2a <CONFIG_ISR_STACK_SIZE+0x52a>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     d70:	9b03      	ldr	r3, [sp, #12]
     d72:	1d1a      	adds	r2, r3, #4
     d74:	9203      	str	r2, [sp, #12]
     d76:	681a      	ldr	r2, [r3, #0]
     d78:	17d3      	asrs	r3, r2, #31
				value->sint =
     d7a:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     d7e:	e7d4      	b.n	d2a <CONFIG_ISR_STACK_SIZE+0x52a>
				value->sint = (char)value->sint;
     d80:	f89d 3018 	ldrb.w	r3, [sp, #24]
     d84:	9306      	str	r3, [sp, #24]
     d86:	2300      	movs	r3, #0
     d88:	9307      	str	r3, [sp, #28]
     d8a:	e6ef      	b.n	b6c <CONFIG_ISR_STACK_SIZE+0x36c>
			switch (length_mod) {
     d8c:	1ecb      	subs	r3, r1, #3
     d8e:	2b04      	cmp	r3, #4
     d90:	d804      	bhi.n	d9c <CONFIG_ISR_STACK_SIZE+0x59c>
     d92:	e8df f003 	tbb	[pc, r3]
     d96:	1f0b      	.short	0x1f0b
     d98:	4135      	.short	0x4135
     d9a:	41          	.byte	0x41
     d9b:	00          	.byte	0x00
				value->uint = va_arg(ap, unsigned int);
     d9c:	9b03      	ldr	r3, [sp, #12]
     d9e:	1d1a      	adds	r2, r3, #4
     da0:	9203      	str	r2, [sp, #12]
     da2:	681b      	ldr	r3, [r3, #0]
     da4:	9306      	str	r3, [sp, #24]
     da6:	2300      	movs	r3, #0
     da8:	9307      	str	r3, [sp, #28]
				break;
     daa:	e01e      	b.n	dea <CONFIG_ISR_STACK_SIZE+0x5ea>
				    && (conv->specifier == 'c')) {
     dac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
				if ((!WCHAR_IS_SIGNED)
     db0:	2b63      	cmp	r3, #99	; 0x63
     db2:	d007      	beq.n	dc4 <CONFIG_ISR_STACK_SIZE+0x5c4>
					value->uint = va_arg(ap, unsigned long);
     db4:	9b03      	ldr	r3, [sp, #12]
     db6:	1d1a      	adds	r2, r3, #4
     db8:	9203      	str	r2, [sp, #12]
     dba:	681b      	ldr	r3, [r3, #0]
     dbc:	9306      	str	r3, [sp, #24]
     dbe:	2300      	movs	r3, #0
     dc0:	9307      	str	r3, [sp, #28]
     dc2:	e012      	b.n	dea <CONFIG_ISR_STACK_SIZE+0x5ea>
					value->uint = (wchar_t)va_arg(ap,
     dc4:	9b03      	ldr	r3, [sp, #12]
     dc6:	1d1a      	adds	r2, r3, #4
     dc8:	9203      	str	r2, [sp, #12]
     dca:	681b      	ldr	r3, [r3, #0]
     dcc:	9306      	str	r3, [sp, #24]
     dce:	2300      	movs	r3, #0
     dd0:	9307      	str	r3, [sp, #28]
     dd2:	e00a      	b.n	dea <CONFIG_ISR_STACK_SIZE+0x5ea>
					(uint_value_type)va_arg(ap,
     dd4:	9b03      	ldr	r3, [sp, #12]
     dd6:	3307      	adds	r3, #7
     dd8:	f023 0307 	bic.w	r3, r3, #7
     ddc:	f103 0208 	add.w	r2, r3, #8
     de0:	9203      	str	r2, [sp, #12]
     de2:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     de6:	e9cd 2306 	strd	r2, r3, [sp, #24]
			if (length_mod == LENGTH_HH) {
     dea:	2901      	cmp	r1, #1
     dec:	d01c      	beq.n	e28 <CONFIG_ISR_STACK_SIZE+0x628>
			} else if (length_mod == LENGTH_H) {
     dee:	2902      	cmp	r1, #2
     df0:	f47f aebc 	bne.w	b6c <CONFIG_ISR_STACK_SIZE+0x36c>
				value->uint = (unsigned short)value->uint;
     df4:	f8bd 3018 	ldrh.w	r3, [sp, #24]
     df8:	9306      	str	r3, [sp, #24]
     dfa:	2300      	movs	r3, #0
     dfc:	9307      	str	r3, [sp, #28]
     dfe:	e6b5      	b.n	b6c <CONFIG_ISR_STACK_SIZE+0x36c>
					(uint_value_type)va_arg(ap,
     e00:	9b03      	ldr	r3, [sp, #12]
     e02:	3307      	adds	r3, #7
     e04:	f023 0307 	bic.w	r3, r3, #7
     e08:	f103 0208 	add.w	r2, r3, #8
     e0c:	9203      	str	r2, [sp, #12]
     e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
				value->uint =
     e12:	e9cd 2306 	strd	r2, r3, [sp, #24]
				break;
     e16:	e7e8      	b.n	dea <CONFIG_ISR_STACK_SIZE+0x5ea>
					(uint_value_type)va_arg(ap, size_t);
     e18:	9b03      	ldr	r3, [sp, #12]
     e1a:	1d1a      	adds	r2, r3, #4
     e1c:	9203      	str	r2, [sp, #12]
     e1e:	681b      	ldr	r3, [r3, #0]
				value->uint =
     e20:	9306      	str	r3, [sp, #24]
     e22:	2300      	movs	r3, #0
     e24:	9307      	str	r3, [sp, #28]
				break;
     e26:	e7e0      	b.n	dea <CONFIG_ISR_STACK_SIZE+0x5ea>
				value->uint = (unsigned char)value->uint;
     e28:	f89d 3018 	ldrb.w	r3, [sp, #24]
     e2c:	9306      	str	r3, [sp, #24]
     e2e:	2300      	movs	r3, #0
     e30:	9307      	str	r3, [sp, #28]
     e32:	e69b      	b.n	b6c <CONFIG_ISR_STACK_SIZE+0x36c>
			if (length_mod == LENGTH_UPPER_L) {
     e34:	2908      	cmp	r1, #8
     e36:	d00b      	beq.n	e50 <CONFIG_ISR_STACK_SIZE+0x650>
				value->dbl = va_arg(ap, double);
     e38:	9b03      	ldr	r3, [sp, #12]
     e3a:	3307      	adds	r3, #7
     e3c:	f023 0307 	bic.w	r3, r3, #7
     e40:	f103 0208 	add.w	r2, r3, #8
     e44:	9203      	str	r2, [sp, #12]
     e46:	e9d3 2300 	ldrd	r2, r3, [r3]
     e4a:	e9cd 2306 	strd	r2, r3, [sp, #24]
     e4e:	e68d      	b.n	b6c <CONFIG_ISR_STACK_SIZE+0x36c>
				value->ldbl = va_arg(ap, long double);
     e50:	9b03      	ldr	r3, [sp, #12]
     e52:	3307      	adds	r3, #7
     e54:	f023 0307 	bic.w	r3, r3, #7
     e58:	f103 0208 	add.w	r2, r3, #8
     e5c:	9203      	str	r2, [sp, #12]
     e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
     e62:	e9cd 2306 	strd	r2, r3, [sp, #24]
     e66:	e681      	b.n	b6c <CONFIG_ISR_STACK_SIZE+0x36c>
			value->ptr = va_arg(ap, void *);
     e68:	9b03      	ldr	r3, [sp, #12]
     e6a:	1d1a      	adds	r2, r3, #4
     e6c:	9203      	str	r2, [sp, #12]
     e6e:	681b      	ldr	r3, [r3, #0]
     e70:	9306      	str	r3, [sp, #24]
     e72:	e67b      	b.n	b6c <CONFIG_ISR_STACK_SIZE+0x36c>
			OUTS(sp, fp);
     e74:	4643      	mov	r3, r8
     e76:	4652      	mov	r2, sl
     e78:	4629      	mov	r1, r5
     e7a:	4630      	mov	r0, r6
     e7c:	f00b f985 	bl	c18a <outs>
     e80:	2800      	cmp	r0, #0
     e82:	f2c0 814f 	blt.w	1124 <CONFIG_FPROTECT_BLOCK_SIZE+0x124>
     e86:	4404      	add	r4, r0
		fp = extract_conversion(conv, sp);
     e88:	46c2      	mov	sl, r8
			continue;
     e8a:	e46f      	b.n	76c <cbvprintf+0x10>
		case '%':
			OUTC('%');
     e8c:	4629      	mov	r1, r5
     e8e:	2025      	movs	r0, #37	; 0x25
     e90:	47b0      	blx	r6
     e92:	2800      	cmp	r0, #0
     e94:	f2c0 8146 	blt.w	1124 <CONFIG_FPROTECT_BLOCK_SIZE+0x124>
     e98:	3401      	adds	r4, #1
		char sign = 0;
     e9a:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
     e9e:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
     ea2:	f04f 0a00 	mov.w	sl, #0
			break;
     ea6:	e0a7      	b.n	ff8 <CONFIG_ISR_STACK_SIZE+0x7f8>
		case 's': {
			bps = (const char *)value->ptr;
     ea8:	f8dd a018 	ldr.w	sl, [sp, #24]

			size_t len;

			if (precision >= 0) {
     eac:	f1bb 0f00 	cmp.w	fp, #0
     eb0:	db08      	blt.n	ec4 <CONFIG_ISR_STACK_SIZE+0x6c4>
				len = strnlen(bps, precision);
     eb2:	4659      	mov	r1, fp
     eb4:	4650      	mov	r0, sl
     eb6:	f00c f8dc 	bl	d072 <strnlen>
			} else {
				len = strlen(bps);
			}

			bpe = bps + len;
     eba:	eb0a 0b00 	add.w	fp, sl, r0
		char sign = 0;
     ebe:	f8dd 9008 	ldr.w	r9, [sp, #8]
			precision = -1;

			break;
     ec2:	e099      	b.n	ff8 <CONFIG_ISR_STACK_SIZE+0x7f8>
				len = strlen(bps);
     ec4:	4650      	mov	r0, sl
     ec6:	f00c f8cc 	bl	d062 <strlen>
     eca:	e7f6      	b.n	eba <CONFIG_ISR_STACK_SIZE+0x6ba>
		}
		case 'c':
			bps = buf;
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     ecc:	9b06      	ldr	r3, [sp, #24]
     ece:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
		char sign = 0;
     ed2:	f8dd 9008 	ldr.w	r9, [sp, #8]
			bpe = buf + 1;
     ed6:	f10d 0b31 	add.w	fp, sp, #49	; 0x31
			bps = buf;
     eda:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
			break;
     ede:	e08b      	b.n	ff8 <CONFIG_ISR_STACK_SIZE+0x7f8>
		case 'd':
		case 'i':
			if (conv->flag_plus) {
     ee0:	f019 0f08 	tst.w	r9, #8
     ee4:	d105      	bne.n	ef2 <CONFIG_ISR_STACK_SIZE+0x6f2>
				sign = '+';
			} else if (conv->flag_space) {
     ee6:	f019 0910 	ands.w	r9, r9, #16
     eea:	d004      	beq.n	ef6 <CONFIG_ISR_STACK_SIZE+0x6f6>
				sign = ' ';
     eec:	f04f 0920 	mov.w	r9, #32
     ef0:	e001      	b.n	ef6 <CONFIG_ISR_STACK_SIZE+0x6f6>
				sign = '+';
     ef2:	f04f 092b 	mov.w	r9, #43	; 0x2b

			/* sint/uint overlay in the union, and so
			 * can't appear in read and write operations
			 * in the same statement.
			 */
			sint = value->sint;
     ef6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
			if (sint < 0) {
     efa:	2a00      	cmp	r2, #0
     efc:	f173 0100 	sbcs.w	r1, r3, #0
     f00:	db02      	blt.n	f08 <CONFIG_ISR_STACK_SIZE+0x708>
				sign = '-';
				value->uint = (uint_value_type)-sint;
			} else {
				value->uint = (uint_value_type)sint;
     f02:	e9cd 2306 	strd	r2, r3, [sp, #24]
     f06:	e009      	b.n	f1c <CONFIG_ISR_STACK_SIZE+0x71c>
				value->uint = (uint_value_type)-sint;
     f08:	4252      	negs	r2, r2
     f0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     f0e:	e9cd 2306 	strd	r2, r3, [sp, #24]
				sign = '-';
     f12:	f04f 092d 	mov.w	r9, #45	; 0x2d
     f16:	e001      	b.n	f1c <CONFIG_ISR_STACK_SIZE+0x71c>
		switch (conv->specifier) {
     f18:	f8dd 9008 	ldr.w	r9, [sp, #8]
			__fallthrough;
		case 'o':
		case 'u':
		case 'x':
		case 'X':
			bps = encode_uint(value->uint, conv, buf, bpe);
     f1c:	f10d 0346 	add.w	r3, sp, #70	; 0x46
     f20:	9300      	str	r3, [sp, #0]
     f22:	ab0c      	add	r3, sp, #48	; 0x30
     f24:	aa08      	add	r2, sp, #32
     f26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
     f2a:	f00b f8c4 	bl	c0b6 <encode_uint>
     f2e:	4682      	mov	sl, r0
			/* Update pad0 values based on precision and converted
			 * length.  Note that a non-empty sign is not in the
			 * converted sequence, but it does not affect the
			 * padding size.
			 */
			if (precision >= 0) {
     f30:	f1bb 0f00 	cmp.w	fp, #0
     f34:	f2c0 8090 	blt.w	1058 <CONFIG_FPROTECT_BLOCK_SIZE+0x58>
				size_t len = bpe - bps;
     f38:	f10d 0346 	add.w	r3, sp, #70	; 0x46
     f3c:	eba3 030a 	sub.w	r3, r3, sl

				/* Zero-padding flag is ignored for integer
				 * conversions with precision.
				 */
				conv->flag_zero = false;
     f40:	f89d 2020 	ldrb.w	r2, [sp, #32]
     f44:	f36f 1286 	bfc	r2, #6, #1
     f48:	f88d 2020 	strb.w	r2, [sp, #32]

				/* Set pad0_value to satisfy precision */
				if (len < (size_t)precision) {
     f4c:	459b      	cmp	fp, r3
     f4e:	f240 8086 	bls.w	105e <CONFIG_FPROTECT_BLOCK_SIZE+0x5e>
					conv->pad0_value = precision - (int)len;
     f52:	ebab 0303 	sub.w	r3, fp, r3
     f56:	9309      	str	r3, [sp, #36]	; 0x24
		const char *bpe = buf + sizeof(buf);
     f58:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
     f5c:	e04c      	b.n	ff8 <CONFIG_ISR_STACK_SIZE+0x7f8>
		case 'p':
			/* Implementation-defined: null is "(nil)", non-null
			 * has 0x prefix followed by significant address hex
			 * digits, no leading zeros.
			 */
			if (value->ptr != NULL) {
     f5e:	9806      	ldr	r0, [sp, #24]
     f60:	b930      	cbnz	r0, f70 <CONFIG_ISR_STACK_SIZE+0x770>
		char sign = 0;
     f62:	f8dd 9008 	ldr.w	r9, [sp, #8]

				goto prec_int_pad0;
			}

			bps = "(nil)";
			bpe = bps + 5;
     f66:	f8df b1c4 	ldr.w	fp, [pc, #452]	; 112c <CONFIG_FPROTECT_BLOCK_SIZE+0x12c>
			bps = "(nil)";
     f6a:	f1ab 0a05 	sub.w	sl, fp, #5
     f6e:	e043      	b.n	ff8 <CONFIG_ISR_STACK_SIZE+0x7f8>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     f70:	f10d 0346 	add.w	r3, sp, #70	; 0x46
     f74:	9300      	str	r3, [sp, #0]
     f76:	ab0c      	add	r3, sp, #48	; 0x30
     f78:	aa08      	add	r2, sp, #32
     f7a:	2100      	movs	r1, #0
     f7c:	f00b f89b 	bl	c0b6 <encode_uint>
     f80:	4682      	mov	sl, r0
				conv->altform_0c = true;
     f82:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
     f86:	f043 0310 	orr.w	r3, r3, #16
     f8a:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
				conv->specifier = 'x';
     f8e:	2378      	movs	r3, #120	; 0x78
     f90:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
		char sign = 0;
     f94:	f8dd 9008 	ldr.w	r9, [sp, #8]
				goto prec_int_pad0;
     f98:	e7ca      	b.n	f30 <CONFIG_ISR_STACK_SIZE+0x730>

			break;
		case 'n':
			if (IS_ENABLED(CONFIG_CBPRINTF_N_SPECIFIER)) {
				store_count(conv, value->ptr, count);
     f9a:	9a06      	ldr	r2, [sp, #24]
	switch ((enum length_mod_enum)conv->length_mod) {
     f9c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
     fa0:	f3c3 03c3 	ubfx	r3, r3, #3, #4
     fa4:	2b07      	cmp	r3, #7
     fa6:	d806      	bhi.n	fb6 <CONFIG_ISR_STACK_SIZE+0x7b6>
     fa8:	e8df f003 	tbb	[pc, r3]
     fac:	100e0c04 	.word	0x100e0c04
     fb0:	1e1c1712 	.word	0x1e1c1712
		*(int *)dp = count;
     fb4:	6014      	str	r4, [r2, #0]
		char sign = 0;
     fb6:	f8dd 9008 	ldr.w	r9, [sp, #8]
		const char *bpe = buf + sizeof(buf);
     fba:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
		const char *bps = NULL;
     fbe:	f04f 0a00 	mov.w	sl, #0
}
     fc2:	e019      	b.n	ff8 <CONFIG_ISR_STACK_SIZE+0x7f8>
		*(signed char *)dp = (signed char)count;
     fc4:	7014      	strb	r4, [r2, #0]
		break;
     fc6:	e7f6      	b.n	fb6 <CONFIG_ISR_STACK_SIZE+0x7b6>
		*(short *)dp = (short)count;
     fc8:	8014      	strh	r4, [r2, #0]
		break;
     fca:	e7f4      	b.n	fb6 <CONFIG_ISR_STACK_SIZE+0x7b6>
		*(long *)dp = (long)count;
     fcc:	6014      	str	r4, [r2, #0]
		break;
     fce:	e7f2      	b.n	fb6 <CONFIG_ISR_STACK_SIZE+0x7b6>
		*(long long *)dp = (long long)count;
     fd0:	4620      	mov	r0, r4
     fd2:	17e1      	asrs	r1, r4, #31
     fd4:	e9c2 0100 	strd	r0, r1, [r2]
		break;
     fd8:	e7ed      	b.n	fb6 <CONFIG_ISR_STACK_SIZE+0x7b6>
		*(intmax_t *)dp = (intmax_t)count;
     fda:	4620      	mov	r0, r4
     fdc:	17e1      	asrs	r1, r4, #31
     fde:	e9c2 0100 	strd	r0, r1, [r2]
		break;
     fe2:	e7e8      	b.n	fb6 <CONFIG_ISR_STACK_SIZE+0x7b6>
		*(size_t *)dp = (size_t)count;
     fe4:	6014      	str	r4, [r2, #0]
		break;
     fe6:	e7e6      	b.n	fb6 <CONFIG_ISR_STACK_SIZE+0x7b6>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     fe8:	6014      	str	r4, [r2, #0]
		break;
     fea:	e7e4      	b.n	fb6 <CONFIG_ISR_STACK_SIZE+0x7b6>
		switch (conv->specifier) {
     fec:	f8dd 9008 	ldr.w	r9, [sp, #8]
     ff0:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
     ff4:	f04f 0a00 	mov.w	sl, #0
		}

		/* If we don't have a converted value to emit, move
		 * on.
		 */
		if (bps == NULL) {
     ff8:	f1ba 0f00 	cmp.w	sl, #0
     ffc:	f000 808e 	beq.w	111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>
		 *   * any exponent content from the converted value
		 * * for non-FP:
		 *   * any pad0_prefix
		 *   * the converted value
		 */
		size_t nj_len = (bpe - bps);
    1000:	ebab 020a 	sub.w	r2, fp, sl
		int pad_len = 0;

		if (sign != 0) {
    1004:	f1b9 0f00 	cmp.w	r9, #0
    1008:	d000      	beq.n	100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>
			nj_len += 1U;
    100a:	3201      	adds	r2, #1
		}

		if (conv->altform_0c) {
    100c:	f89d 1022 	ldrb.w	r1, [sp, #34]	; 0x22
    1010:	f011 0f10 	tst.w	r1, #16
    1014:	d026      	beq.n	1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>
			nj_len += 2U;
    1016:	3202      	adds	r2, #2
		} else if (conv->altform_0) {
			nj_len += 1U;
		}

		nj_len += conv->pad0_value;
    1018:	9b09      	ldr	r3, [sp, #36]	; 0x24
    101a:	4413      	add	r3, r2
		if (conv->pad_fp) {
    101c:	f011 0f40 	tst.w	r1, #64	; 0x40
    1020:	d001      	beq.n	1026 <CONFIG_FPROTECT_BLOCK_SIZE+0x26>
			nj_len += conv->pad0_pre_exp;
    1022:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    1024:	4413      	add	r3, r2
		 * result in no padding.
		 *
		 * If a non-negative padding width is present and we're doing
		 * right-justification, emit the padding now.
		 */
		if (width > 0) {
    1026:	2f00      	cmp	r7, #0
    1028:	dd32      	ble.n	1090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>
			width -= (int)nj_len;
    102a:	1aff      	subs	r7, r7, r3

			if (!conv->flag_dash) {
    102c:	f89d 3020 	ldrb.w	r3, [sp, #32]
    1030:	f013 0f04 	tst.w	r3, #4
    1034:	d12c      	bne.n	1090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>
				char pad = ' ';

				/* If we're zero-padding we have to emit the
				 * sign first.
				 */
				if (conv->flag_zero) {
    1036:	f013 0f40 	tst.w	r3, #64	; 0x40
    103a:	d018      	beq.n	106e <CONFIG_FPROTECT_BLOCK_SIZE+0x6e>
					if (sign != 0) {
    103c:	f1b9 0f00 	cmp.w	r9, #0
    1040:	d018      	beq.n	1074 <CONFIG_FPROTECT_BLOCK_SIZE+0x74>
						OUTC(sign);
    1042:	4629      	mov	r1, r5
    1044:	4648      	mov	r0, r9
    1046:	47b0      	blx	r6
    1048:	2800      	cmp	r0, #0
    104a:	db6b      	blt.n	1124 <CONFIG_FPROTECT_BLOCK_SIZE+0x124>
    104c:	3401      	adds	r4, #1
						sign = 0;
    104e:	f8dd 9008 	ldr.w	r9, [sp, #8]
					}
					pad = '0';
    1052:	2330      	movs	r3, #48	; 0x30
    1054:	9302      	str	r3, [sp, #8]
    1056:	e00f      	b.n	1078 <CONFIG_FPROTECT_BLOCK_SIZE+0x78>
		const char *bpe = buf + sizeof(buf);
    1058:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    105c:	e7cc      	b.n	ff8 <CONFIG_ISR_STACK_SIZE+0x7f8>
    105e:	f10d 0b46 	add.w	fp, sp, #70	; 0x46
    1062:	e7c9      	b.n	ff8 <CONFIG_ISR_STACK_SIZE+0x7f8>
		} else if (conv->altform_0) {
    1064:	f011 0f08 	tst.w	r1, #8
    1068:	d0d6      	beq.n	1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
			nj_len += 1U;
    106a:	3201      	adds	r2, #1
    106c:	e7d4      	b.n	1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
				char pad = ' ';
    106e:	2320      	movs	r3, #32
    1070:	9302      	str	r3, [sp, #8]
    1072:	e001      	b.n	1078 <CONFIG_FPROTECT_BLOCK_SIZE+0x78>
					pad = '0';
    1074:	2330      	movs	r3, #48	; 0x30
    1076:	9302      	str	r3, [sp, #8]
    1078:	463b      	mov	r3, r7
				}

				while (width-- > 0) {
    107a:	1e5f      	subs	r7, r3, #1
    107c:	2b00      	cmp	r3, #0
    107e:	dd07      	ble.n	1090 <CONFIG_FPROTECT_BLOCK_SIZE+0x90>
					OUTC(pad);
    1080:	4629      	mov	r1, r5
    1082:	9802      	ldr	r0, [sp, #8]
    1084:	47b0      	blx	r6
    1086:	2800      	cmp	r0, #0
    1088:	db4c      	blt.n	1124 <CONFIG_FPROTECT_BLOCK_SIZE+0x124>
    108a:	3401      	adds	r4, #1
				while (width-- > 0) {
    108c:	463b      	mov	r3, r7
    108e:	e7f4      	b.n	107a <CONFIG_FPROTECT_BLOCK_SIZE+0x7a>
		}

		/* If we have a sign that hasn't been emitted, now's the
		 * time....
		 */
		if (sign != 0) {
    1090:	f1b9 0f00 	cmp.w	r9, #0
    1094:	d005      	beq.n	10a2 <CONFIG_FPROTECT_BLOCK_SIZE+0xa2>
			OUTC(sign);
    1096:	4629      	mov	r1, r5
    1098:	4648      	mov	r0, r9
    109a:	47b0      	blx	r6
    109c:	2800      	cmp	r0, #0
    109e:	db41      	blt.n	1124 <CONFIG_FPROTECT_BLOCK_SIZE+0x124>
    10a0:	3401      	adds	r4, #1
				OUTC('0');
			}

			OUTS(cp, bpe);
		} else {
			if (conv->altform_0c | conv->altform_0) {
    10a2:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    10a6:	f3c3 1200 	ubfx	r2, r3, #4, #1
    10aa:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    10ae:	4313      	orrs	r3, r2
    10b0:	d005      	beq.n	10be <CONFIG_FPROTECT_BLOCK_SIZE+0xbe>
				OUTC('0');
    10b2:	4629      	mov	r1, r5
    10b4:	2030      	movs	r0, #48	; 0x30
    10b6:	47b0      	blx	r6
    10b8:	2800      	cmp	r0, #0
    10ba:	db33      	blt.n	1124 <CONFIG_FPROTECT_BLOCK_SIZE+0x124>
    10bc:	3401      	adds	r4, #1
			}

			if (conv->altform_0c) {
    10be:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
    10c2:	f013 0f10 	tst.w	r3, #16
    10c6:	d006      	beq.n	10d6 <CONFIG_FPROTECT_BLOCK_SIZE+0xd6>
				OUTC(conv->specifier);
    10c8:	4629      	mov	r1, r5
    10ca:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
    10ce:	47b0      	blx	r6
    10d0:	2800      	cmp	r0, #0
    10d2:	db27      	blt.n	1124 <CONFIG_FPROTECT_BLOCK_SIZE+0x124>
    10d4:	3401      	adds	r4, #1
			}

			pad_len = conv->pad0_value;
    10d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
			while (pad_len-- > 0) {
    10d8:	f103 39ff 	add.w	r9, r3, #4294967295
    10dc:	2b00      	cmp	r3, #0
    10de:	dd07      	ble.n	10f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>
				OUTC('0');
    10e0:	4629      	mov	r1, r5
    10e2:	2030      	movs	r0, #48	; 0x30
    10e4:	47b0      	blx	r6
    10e6:	2800      	cmp	r0, #0
    10e8:	db1c      	blt.n	1124 <CONFIG_FPROTECT_BLOCK_SIZE+0x124>
    10ea:	3401      	adds	r4, #1
			while (pad_len-- > 0) {
    10ec:	464b      	mov	r3, r9
    10ee:	e7f3      	b.n	10d8 <CONFIG_FPROTECT_BLOCK_SIZE+0xd8>
			}

			OUTS(bps, bpe);
    10f0:	465b      	mov	r3, fp
    10f2:	4652      	mov	r2, sl
    10f4:	4629      	mov	r1, r5
    10f6:	4630      	mov	r0, r6
    10f8:	f00b f847 	bl	c18a <outs>
    10fc:	2800      	cmp	r0, #0
    10fe:	db11      	blt.n	1124 <CONFIG_FPROTECT_BLOCK_SIZE+0x124>
    1100:	4404      	add	r4, r0
		}

		/* Finish left justification */
		while (width > 0) {
    1102:	2f00      	cmp	r7, #0
    1104:	dd07      	ble.n	1116 <CONFIG_FPROTECT_BLOCK_SIZE+0x116>
			OUTC(' ');
    1106:	4629      	mov	r1, r5
    1108:	2020      	movs	r0, #32
    110a:	47b0      	blx	r6
    110c:	2800      	cmp	r0, #0
    110e:	db09      	blt.n	1124 <CONFIG_FPROTECT_BLOCK_SIZE+0x124>
    1110:	3401      	adds	r4, #1
			--width;
    1112:	3f01      	subs	r7, #1
    1114:	e7f5      	b.n	1102 <CONFIG_FPROTECT_BLOCK_SIZE+0x102>
		fp = extract_conversion(conv, sp);
    1116:	46c2      	mov	sl, r8
    1118:	f7ff bb28 	b.w	76c <cbvprintf+0x10>
    111c:	46c2      	mov	sl, r8
    111e:	f7ff bb25 	b.w	76c <cbvprintf+0x10>
		}
	}

	return count;
    1122:	4620      	mov	r0, r4
#undef OUTS
#undef OUTC
}
    1124:	b013      	add	sp, #76	; 0x4c
    1126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    112a:	bf00      	nop
    112c:	0000e941 	.word	0x0000e941

00001130 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

FUNC_NORETURN void sys_reboot(int type)
{
    1130:	b508      	push	{r3, lr}
    1132:	4604      	mov	r4, r0
    1134:	f04f 0220 	mov.w	r2, #32
    1138:	f3ef 8311 	mrs	r3, BASEPRI
    113c:	f382 8812 	msr	BASEPRI_MAX, r2
    1140:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
    1144:	f00c fc30 	bl	d9a8 <sys_clock_disable>
#endif

	sys_arch_reboot(type);
    1148:	4620      	mov	r0, r4
    114a:	f003 fbc9 	bl	48e0 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    114e:	4803      	ldr	r0, [pc, #12]	; (115c <sys_reboot+0x2c>)
    1150:	f00a fa58 	bl	b604 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    1154:	f002 fcac 	bl	3ab0 <arch_cpu_idle>
    1158:	e7fc      	b.n	1154 <sys_reboot+0x24>
    115a:	bf00      	nop
    115c:	0000e944 	.word	0x0000e944

00001160 <is_rodata>:
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    1160:	4b05      	ldr	r3, [pc, #20]	; (1178 <is_rodata+0x18>)
    1162:	4298      	cmp	r0, r3
    1164:	d304      	bcc.n	1170 <is_rodata+0x10>
    1166:	4b05      	ldr	r3, [pc, #20]	; (117c <is_rodata+0x1c>)
    1168:	4298      	cmp	r0, r3
    116a:	d303      	bcc.n	1174 <is_rodata+0x14>
    116c:	2000      	movs	r0, #0
    116e:	4770      	bx	lr
    1170:	2000      	movs	r0, #0
    1172:	4770      	bx	lr
    1174:	2001      	movs	r0, #1
		((const char *)addr < (const char *)RO_END));
}
    1176:	4770      	bx	lr
    1178:	0000e58c 	.word	0x0000e58c
    117c:	0000faf0 	.word	0x0000faf0

00001180 <thread_set>:
		}
	}
}

static void thread_set(k_tid_t process_tid)
{
    1180:	b508      	push	{r3, lr}
	proc_tid = process_tid;
    1182:	4b06      	ldr	r3, [pc, #24]	; (119c <thread_set+0x1c>)
    1184:	6018      	str	r0, [r3, #0]

	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE)) {
		return;
	}

	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    1186:	b118      	cbz	r0, 1190 <thread_set+0x10>
	    process_tid &&
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    1188:	4b05      	ldr	r3, [pc, #20]	; (11a0 <thread_set+0x20>)
    118a:	681b      	ldr	r3, [r3, #0]
	    process_tid &&
    118c:	2b09      	cmp	r3, #9
    118e:	dc00      	bgt.n	1192 <thread_set+0x12>
		k_sem_give(&log_process_thread_sem);
	}
}
    1190:	bd08      	pop	{r3, pc}
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1192:	4804      	ldr	r0, [pc, #16]	; (11a4 <thread_set+0x24>)
    1194:	f008 ffd4 	bl	a140 <z_impl_k_sem_give>
}
    1198:	e7fa      	b.n	1190 <thread_set+0x10>
    119a:	bf00      	nop
    119c:	20000c98 	.word	0x20000c98
    11a0:	20000c68 	.word	0x20000c68
    11a4:	20000264 	.word	0x20000264

000011a8 <log_process_thread_timer_expiry_fn>:
{
	return mpsc_pbuf_is_pending(&log_buffer);
}

static void log_process_thread_timer_expiry_fn(struct k_timer *timer)
{
    11a8:	b508      	push	{r3, lr}
	z_impl_k_sem_give(sem);
    11aa:	4802      	ldr	r0, [pc, #8]	; (11b4 <log_process_thread_timer_expiry_fn+0xc>)
    11ac:	f008 ffc8 	bl	a140 <z_impl_k_sem_give>
	k_sem_give(&log_process_thread_sem);
}
    11b0:	bd08      	pop	{r3, pc}
    11b2:	bf00      	nop
    11b4:	20000264 	.word	0x20000264

000011b8 <next_pending>:
{
    11b8:	b508      	push	{r3, lr}
	return (log_list_head_peek(&list) != NULL);
    11ba:	4803      	ldr	r0, [pc, #12]	; (11c8 <next_pending+0x10>)
    11bc:	f00b f912 	bl	c3e4 <log_list_head_peek>
}
    11c0:	3800      	subs	r0, #0
    11c2:	bf18      	it	ne
    11c4:	2001      	movne	r0, #1
    11c6:	bd08      	pop	{r3, pc}
    11c8:	20000c74 	.word	0x20000c74

000011cc <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    11cc:	b530      	push	{r4, r5, lr}
    11ce:	b089      	sub	sp, #36	; 0x24
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    11d0:	2200      	movs	r2, #0
    11d2:	490f      	ldr	r1, [pc, #60]	; (1210 <enable_logger+0x44>)
    11d4:	480f      	ldr	r0, [pc, #60]	; (1214 <enable_logger+0x48>)
    11d6:	f00d f917 	bl	e408 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    11da:	4d0f      	ldr	r5, [pc, #60]	; (1218 <enable_logger+0x4c>)
    11dc:	2200      	movs	r2, #0
    11de:	2300      	movs	r3, #0
    11e0:	e9cd 2306 	strd	r2, r3, [sp, #24]
    11e4:	2400      	movs	r4, #0
    11e6:	9404      	str	r4, [sp, #16]
    11e8:	230e      	movs	r3, #14
    11ea:	9303      	str	r3, [sp, #12]
    11ec:	9402      	str	r4, [sp, #8]
    11ee:	9401      	str	r4, [sp, #4]
    11f0:	9400      	str	r4, [sp, #0]
    11f2:	4b0a      	ldr	r3, [pc, #40]	; (121c <enable_logger+0x50>)
    11f4:	f44f 7240 	mov.w	r2, #768	; 0x300
    11f8:	4909      	ldr	r1, [pc, #36]	; (1220 <enable_logger+0x54>)
    11fa:	4628      	mov	r0, r5
    11fc:	f00c fd9c 	bl	dd38 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    1200:	4908      	ldr	r1, [pc, #32]	; (1224 <enable_logger+0x58>)
    1202:	4628      	mov	r0, r5
    1204:	f008 fdae 	bl	9d64 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    1208:	4620      	mov	r0, r4
    120a:	b009      	add	sp, #36	; 0x24
    120c:	bd30      	pop	{r4, r5, pc}
    120e:	bf00      	nop
    1210:	000011a9 	.word	0x000011a9
    1214:	20000368 	.word	0x20000368
    1218:	200003a0 	.word	0x200003a0
    121c:	00001875 	.word	0x00001875
    1220:	20002720 	.word	0x20002720
    1224:	0000e970 	.word	0x0000e970

00001228 <log_core_init>:
{
    1228:	b508      	push	{r3, lr}
	panic_mode = false;
    122a:	2300      	movs	r3, #0
    122c:	4a0b      	ldr	r2, [pc, #44]	; (125c <log_core_init+0x34>)
    122e:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    1230:	4a0b      	ldr	r2, [pc, #44]	; (1260 <log_core_init+0x38>)
    1232:	6013      	str	r3, [r2, #0]
		timestamp_func = default_get_timestamp;
    1234:	4b0b      	ldr	r3, [pc, #44]	; (1264 <log_core_init+0x3c>)
    1236:	4a0c      	ldr	r2, [pc, #48]	; (1268 <log_core_init+0x40>)
    1238:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    123a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    123e:	f000 fd99 	bl	1d74 <log_output_timestamp_freq_set>
		log_msg_pool_init();
    1242:	f000 fb7d 	bl	1940 <log_msg_pool_init>
		log_list_init(&list);
    1246:	4809      	ldr	r0, [pc, #36]	; (126c <log_core_init+0x44>)
    1248:	f00b f8be 	bl	c3c8 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    124c:	2304      	movs	r3, #4
    124e:	2228      	movs	r2, #40	; 0x28
    1250:	4907      	ldr	r1, [pc, #28]	; (1270 <log_core_init+0x48>)
    1252:	4808      	ldr	r0, [pc, #32]	; (1274 <log_core_init+0x4c>)
    1254:	f00c fd0d 	bl	dc72 <k_mem_slab_init>
}
    1258:	bd08      	pop	{r3, pc}
    125a:	bf00      	nop
    125c:	2000254a 	.word	0x2000254a
    1260:	20000c6c 	.word	0x20000c6c
    1264:	20000004 	.word	0x20000004
    1268:	0000c3fd 	.word	0x0000c3fd
    126c:	20000c74 	.word	0x20000c74
    1270:	20004840 	.word	0x20004840
    1274:	20000c7c 	.word	0x20000c7c

00001278 <log_init>:
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1278:	4b18      	ldr	r3, [pc, #96]	; (12dc <log_init+0x64>)
    127a:	f3bf 8f5b 	dmb	ish
    127e:	e853 2f00 	ldrex	r2, [r3]
    1282:	1c51      	adds	r1, r2, #1
    1284:	e843 1000 	strex	r0, r1, [r3]
    1288:	2800      	cmp	r0, #0
    128a:	d1f8      	bne.n	127e <log_init+0x6>
    128c:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    1290:	bb1a      	cbnz	r2, 12da <log_init+0x62>
{
    1292:	b570      	push	{r4, r5, r6, lr}
	for (i = 0; i < log_backend_count_get(); i++) {
    1294:	2400      	movs	r4, #0
    1296:	e009      	b.n	12ac <log_init+0x34>
					   backend->cb->ctx,
    1298:	4b11      	ldr	r3, [pc, #68]	; (12e0 <log_init+0x68>)
    129a:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    129e:	685b      	ldr	r3, [r3, #4]
			log_backend_enable(backend,
    12a0:	2204      	movs	r2, #4
    12a2:	6819      	ldr	r1, [r3, #0]
    12a4:	4628      	mov	r0, r5
    12a6:	f000 fb29 	bl	18fc <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    12aa:	3401      	adds	r4, #1
    12ac:	4b0d      	ldr	r3, [pc, #52]	; (12e4 <log_init+0x6c>)
    12ae:	4a0c      	ldr	r2, [pc, #48]	; (12e0 <log_init+0x68>)
    12b0:	1a9b      	subs	r3, r3, r2
    12b2:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    12b6:	da0f      	bge.n	12d8 <log_init+0x60>
		const struct log_backend *backend = log_backend_get(i);
    12b8:	4626      	mov	r6, r4
 *
 * @return    Pointer to the backend instance.
 */
static inline const struct log_backend *log_backend_get(uint32_t idx)
{
	return &__log_backends_start[idx];
    12ba:	4d09      	ldr	r5, [pc, #36]	; (12e0 <log_init+0x68>)
    12bc:	eb05 1504 	add.w	r5, r5, r4, lsl #4
		if (backend->autostart) {
    12c0:	7b2b      	ldrb	r3, [r5, #12]
    12c2:	2b00      	cmp	r3, #0
    12c4:	d0f1      	beq.n	12aa <log_init+0x32>
			if (backend->api->init != NULL) {
    12c6:	0123      	lsls	r3, r4, #4
    12c8:	4a05      	ldr	r2, [pc, #20]	; (12e0 <log_init+0x68>)
    12ca:	58d3      	ldr	r3, [r2, r3]
    12cc:	699b      	ldr	r3, [r3, #24]
    12ce:	2b00      	cmp	r3, #0
    12d0:	d0e2      	beq.n	1298 <log_init+0x20>
				backend->api->init(backend);
    12d2:	4628      	mov	r0, r5
    12d4:	4798      	blx	r3
    12d6:	e7df      	b.n	1298 <log_init+0x20>
}
    12d8:	bd70      	pop	{r4, r5, r6, pc}
    12da:	4770      	bx	lr
    12dc:	20000c70 	.word	0x20000c70
    12e0:	0000e894 	.word	0x0000e894
    12e4:	0000e8b4 	.word	0x0000e8b4

000012e8 <get_msg>:
{
    12e8:	b510      	push	{r4, lr}
    12ea:	f04f 0320 	mov.w	r3, #32
    12ee:	f3ef 8411 	mrs	r4, BASEPRI
    12f2:	f383 8812 	msr	BASEPRI_MAX, r3
    12f6:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
    12fa:	4804      	ldr	r0, [pc, #16]	; (130c <get_msg+0x24>)
    12fc:	f00b f874 	bl	c3e8 <log_list_head_get>
	__asm__ volatile(
    1300:	f384 8811 	msr	BASEPRI, r4
    1304:	f3bf 8f6f 	isb	sy
}
    1308:	bd10      	pop	{r4, pc}
    130a:	bf00      	nop
    130c:	20000c74 	.word	0x20000c74

00001310 <z_log_notify_backend_enabled>:
{
    1310:	b508      	push	{r3, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    1312:	4b05      	ldr	r3, [pc, #20]	; (1328 <z_log_notify_backend_enabled+0x18>)
    1314:	781b      	ldrb	r3, [r3, #0]
    1316:	b11b      	cbz	r3, 1320 <z_log_notify_backend_enabled+0x10>
	backend_attached = true;
    1318:	4b03      	ldr	r3, [pc, #12]	; (1328 <z_log_notify_backend_enabled+0x18>)
    131a:	2201      	movs	r2, #1
    131c:	701a      	strb	r2, [r3, #0]
}
    131e:	bd08      	pop	{r3, pc}
	z_impl_k_sem_give(sem);
    1320:	4802      	ldr	r0, [pc, #8]	; (132c <z_log_notify_backend_enabled+0x1c>)
    1322:	f008 ff0d 	bl	a140 <z_impl_k_sem_give>
}
    1326:	e7f7      	b.n	1318 <z_log_notify_backend_enabled+0x8>
    1328:	20002549 	.word	0x20002549
    132c:	20000264 	.word	0x20000264

00001330 <z_log_dropped>:
    1330:	4b0c      	ldr	r3, [pc, #48]	; (1364 <z_log_dropped+0x34>)
    1332:	f3bf 8f5b 	dmb	ish
    1336:	e853 2f00 	ldrex	r2, [r3]
    133a:	3201      	adds	r2, #1
    133c:	e843 2100 	strex	r1, r2, [r3]
    1340:	2900      	cmp	r1, #0
    1342:	d1f8      	bne.n	1336 <z_log_dropped+0x6>
    1344:	f3bf 8f5b 	dmb	ish
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1348:	4b07      	ldr	r3, [pc, #28]	; (1368 <z_log_dropped+0x38>)
    134a:	f3bf 8f5b 	dmb	ish
    134e:	e853 2f00 	ldrex	r2, [r3]
    1352:	3a01      	subs	r2, #1
    1354:	e843 2100 	strex	r1, r2, [r3]
    1358:	2900      	cmp	r1, #0
    135a:	d1f8      	bne.n	134e <z_log_dropped+0x1e>
    135c:	f3bf 8f5b 	dmb	ish
}
    1360:	4770      	bx	lr
    1362:	bf00      	nop
    1364:	20000c6c 	.word	0x20000c6c
    1368:	20000c68 	.word	0x20000c68

0000136c <z_log_dropped_read_and_clear>:
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    136c:	4b06      	ldr	r3, [pc, #24]	; (1388 <z_log_dropped_read_and_clear+0x1c>)
}
    136e:	2000      	movs	r0, #0
    1370:	4602      	mov	r2, r0
    1372:	f3bf 8f5b 	dmb	ish
    1376:	e853 0f00 	ldrex	r0, [r3]
    137a:	e843 2100 	strex	r1, r2, [r3]
    137e:	2900      	cmp	r1, #0
    1380:	d1f9      	bne.n	1376 <z_log_dropped_read_and_clear+0xa>
    1382:	f3bf 8f5b 	dmb	ish
    1386:	4770      	bx	lr
    1388:	20000c6c 	.word	0x20000c6c

0000138c <dropped_notify>:
{
    138c:	b538      	push	{r3, r4, r5, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    138e:	f7ff ffed 	bl	136c <z_log_dropped_read_and_clear>
    1392:	4605      	mov	r5, r0
	for (int i = 0; i < log_backend_count_get(); i++) {
    1394:	2400      	movs	r4, #0
    1396:	e000      	b.n	139a <dropped_notify+0xe>
    1398:	3401      	adds	r4, #1
    139a:	4b0b      	ldr	r3, [pc, #44]	; (13c8 <dropped_notify+0x3c>)
    139c:	4a0b      	ldr	r2, [pc, #44]	; (13cc <dropped_notify+0x40>)
    139e:	1a9b      	subs	r3, r3, r2
    13a0:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    13a4:	da0f      	bge.n	13c6 <dropped_notify+0x3a>
    13a6:	4809      	ldr	r0, [pc, #36]	; (13cc <dropped_notify+0x40>)
    13a8:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    13ac:	6843      	ldr	r3, [r0, #4]
    13ae:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    13b0:	2b00      	cmp	r3, #0
    13b2:	d0f1      	beq.n	1398 <dropped_notify+0xc>
	if (backend->api->dropped != NULL) {
    13b4:	0123      	lsls	r3, r4, #4
    13b6:	4a05      	ldr	r2, [pc, #20]	; (13cc <dropped_notify+0x40>)
    13b8:	58d3      	ldr	r3, [r2, r3]
    13ba:	691b      	ldr	r3, [r3, #16]
    13bc:	2b00      	cmp	r3, #0
    13be:	d0eb      	beq.n	1398 <dropped_notify+0xc>
		backend->api->dropped(backend, cnt);
    13c0:	4629      	mov	r1, r5
    13c2:	4798      	blx	r3
    13c4:	e7e8      	b.n	1398 <dropped_notify+0xc>
}
    13c6:	bd38      	pop	{r3, r4, r5, pc}
    13c8:	0000e8b4 	.word	0x0000e8b4
    13cc:	0000e894 	.word	0x0000e894

000013d0 <z_log_dropped_pending>:
	return dropped_cnt > 0;
    13d0:	4b03      	ldr	r3, [pc, #12]	; (13e0 <z_log_dropped_pending+0x10>)
    13d2:	6818      	ldr	r0, [r3, #0]
}
    13d4:	2800      	cmp	r0, #0
    13d6:	bfd4      	ite	le
    13d8:	2000      	movle	r0, #0
    13da:	2001      	movgt	r0, #1
    13dc:	4770      	bx	lr
    13de:	bf00      	nop
    13e0:	20000c6c 	.word	0x20000c6c

000013e4 <z_log_strdup>:
{
    13e4:	b510      	push	{r4, lr}
    13e6:	b082      	sub	sp, #8
    13e8:	4604      	mov	r4, r0
	    is_rodata(str) || k_is_user_context()) {
    13ea:	f7ff feb9 	bl	1160 <is_rodata>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    13ee:	bb10      	cbnz	r0, 1436 <z_log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    13f0:	2200      	movs	r2, #0
    13f2:	2300      	movs	r3, #0
    13f4:	a901      	add	r1, sp, #4
    13f6:	4811      	ldr	r0, [pc, #68]	; (143c <z_log_strdup+0x58>)
    13f8:	f008 fc5e 	bl	9cb8 <k_mem_slab_alloc>
	if (err != 0) {
    13fc:	b108      	cbz	r0, 1402 <z_log_strdup+0x1e>
		return (char *)log_strdup_fail_msg;
    13fe:	4c10      	ldr	r4, [pc, #64]	; (1440 <z_log_strdup+0x5c>)
    1400:	e019      	b.n	1436 <z_log_strdup+0x52>
	(void)atomic_set(&dup->refcount, 1);
    1402:	9b01      	ldr	r3, [sp, #4]
    1404:	2201      	movs	r2, #1
    1406:	f3bf 8f5b 	dmb	ish
    140a:	e853 1f00 	ldrex	r1, [r3]
    140e:	e843 2000 	strex	r0, r2, [r3]
    1412:	2800      	cmp	r0, #0
    1414:	d1f9      	bne.n	140a <z_log_strdup+0x26>
    1416:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    141a:	221f      	movs	r2, #31
    141c:	4621      	mov	r1, r4
    141e:	9801      	ldr	r0, [sp, #4]
    1420:	3004      	adds	r0, #4
    1422:	f00b fe04 	bl	d02e <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    1426:	9c01      	ldr	r4, [sp, #4]
    1428:	237e      	movs	r3, #126	; 0x7e
    142a:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    142e:	2300      	movs	r3, #0
    1430:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	return dup->buf;
    1434:	3404      	adds	r4, #4
}
    1436:	4620      	mov	r0, r4
    1438:	b002      	add	sp, #8
    143a:	bd10      	pop	{r4, pc}
    143c:	20000c7c 	.word	0x20000c7c
    1440:	0000e978 	.word	0x0000e978

00001444 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    1444:	b138      	cbz	r0, 1456 <log_is_strdup+0x12>
    1446:	4a07      	ldr	r2, [pc, #28]	; (1464 <log_is_strdup+0x20>)
    1448:	4290      	cmp	r0, r2
    144a:	d306      	bcc.n	145a <log_is_strdup+0x16>
    144c:	32a0      	adds	r2, #160	; 0xa0
    144e:	4290      	cmp	r0, r2
    1450:	d305      	bcc.n	145e <log_is_strdup+0x1a>
    1452:	2000      	movs	r0, #0
    1454:	4770      	bx	lr
    1456:	2000      	movs	r0, #0
    1458:	4770      	bx	lr
    145a:	2000      	movs	r0, #0
    145c:	4770      	bx	lr
    145e:	2001      	movs	r0, #1
}
    1460:	4770      	bx	lr
    1462:	bf00      	nop
    1464:	20004840 	.word	0x20004840

00001468 <detect_missed_strdup>:
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    1468:	7a03      	ldrb	r3, [r0, #8]
	if (!log_msg_is_std(msg)) {
    146a:	f013 0f01 	tst.w	r3, #1
    146e:	d000      	beq.n	1472 <detect_missed_strdup+0xa>
    1470:	4770      	bx	lr
{
    1472:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1476:	b083      	sub	sp, #12
    1478:	4606      	mov	r6, r0
	msg_str = log_msg_str_get(msg);
    147a:	f00b f879 	bl	c570 <log_msg_str_get>
    147e:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    1480:	4630      	mov	r0, r6
    1482:	f00b f860 	bl	c546 <log_msg_nargs_get>
    1486:	4601      	mov	r1, r0
    1488:	4638      	mov	r0, r7
    148a:	f00a ffbb 	bl	c404 <z_log_get_s_mask>
    148e:	4605      	mov	r5, r0
	while (mask) {
    1490:	e004      	b.n	149c <detect_missed_strdup+0x34>
		mask &= ~BIT(idx);
    1492:	2301      	movs	r3, #1
    1494:	fa03 f404 	lsl.w	r4, r3, r4
    1498:	ea25 0504 	bic.w	r5, r5, r4
	while (mask) {
    149c:	b36d      	cbz	r5, 14fa <detect_missed_strdup+0x92>
		idx = 31 - __builtin_clz(mask);
    149e:	fab5 f485 	clz	r4, r5
    14a2:	f1c4 041f 	rsb	r4, r4, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    14a6:	4621      	mov	r1, r4
    14a8:	4630      	mov	r0, r6
    14aa:	f00b f84f 	bl	c54c <log_msg_arg_get>
    14ae:	4681      	mov	r9, r0
		if (!is_rodata(str) && !log_is_strdup(str) &&
    14b0:	f7ff fe56 	bl	1160 <is_rodata>
    14b4:	2800      	cmp	r0, #0
    14b6:	d1ec      	bne.n	1492 <detect_missed_strdup+0x2a>
    14b8:	4648      	mov	r0, r9
    14ba:	f7ff ffc3 	bl	1444 <log_is_strdup>
    14be:	2800      	cmp	r0, #0
    14c0:	d1e7      	bne.n	1492 <detect_missed_strdup+0x2a>
    14c2:	4b0f      	ldr	r3, [pc, #60]	; (1500 <detect_missed_strdup+0x98>)
    14c4:	4599      	cmp	r9, r3
    14c6:	d0e4      	beq.n	1492 <detect_missed_strdup+0x2a>
	return msg->hdr.ids.source_id;
    14c8:	8971      	ldrh	r1, [r6, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
    14ca:	f3c1 1189 	ubfx	r1, r1, #6, #10
    14ce:	f000 fa05 	bl	18dc <log_source_name_get>
    14d2:	4602      	mov	r2, r0
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    14d4:	4b0b      	ldr	r3, [pc, #44]	; (1504 <detect_missed_strdup+0x9c>)
    14d6:	490c      	ldr	r1, [pc, #48]	; (1508 <detect_missed_strdup+0xa0>)
    14d8:	1a5b      	subs	r3, r3, r1
    14da:	08db      	lsrs	r3, r3, #3
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    14dc:	2101      	movs	r1, #1
    14de:	f361 0802 	bfi	r8, r1, #0, #3
    14e2:	f36f 08c5 	bfc	r8, #3, #3
    14e6:	f363 188f 	bfi	r8, r3, #6, #10
    14ea:	f8ad 8000 	strh.w	r8, [sp]
    14ee:	463b      	mov	r3, r7
    14f0:	4621      	mov	r1, r4
    14f2:	4806      	ldr	r0, [pc, #24]	; (150c <detect_missed_strdup+0xa4>)
    14f4:	f000 f8b2 	bl	165c <log_3>
    14f8:	e7cb      	b.n	1492 <detect_missed_strdup+0x2a>
}
    14fa:	b003      	add	sp, #12
    14fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1500:	0000e978 	.word	0x0000e978
    1504:	0000e83c 	.word	0x0000e83c
    1508:	0000e82c 	.word	0x0000e82c
    150c:	0000e994 	.word	0x0000e994

00001510 <msg_process>:
{
    1510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1512:	4606      	mov	r6, r0
	if (!bypass) {
    1514:	bb19      	cbnz	r1, 155e <msg_process+0x4e>
		    !panic_mode) {
    1516:	4b14      	ldr	r3, [pc, #80]	; (1568 <msg_process+0x58>)
    1518:	781b      	ldrb	r3, [r3, #0]
		if (!IS_ENABLED(CONFIG_LOG2) &&
    151a:	b10b      	cbz	r3, 1520 <msg_process+0x10>
{
    151c:	2400      	movs	r4, #0
    151e:	e003      	b.n	1528 <msg_process+0x18>
			detect_missed_strdup(msg.msg);
    1520:	f7ff ffa2 	bl	1468 <detect_missed_strdup>
    1524:	e7fa      	b.n	151c <msg_process+0xc>
		for (int i = 0; i < log_backend_count_get(); i++) {
    1526:	3401      	adds	r4, #1
    1528:	4b10      	ldr	r3, [pc, #64]	; (156c <msg_process+0x5c>)
    152a:	4a11      	ldr	r2, [pc, #68]	; (1570 <msg_process+0x60>)
    152c:	1a9b      	subs	r3, r3, r2
    152e:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    1532:	da14      	bge.n	155e <msg_process+0x4e>
	return &__log_backends_start[idx];
    1534:	4d0e      	ldr	r5, [pc, #56]	; (1570 <msg_process+0x60>)
    1536:	eb05 1504 	add.w	r5, r5, r4, lsl #4
	return backend->cb->active;
    153a:	686b      	ldr	r3, [r5, #4]
    153c:	795b      	ldrb	r3, [r3, #5]
			if (log_backend_is_active(backend) &&
    153e:	2b00      	cmp	r3, #0
    1540:	d0f1      	beq.n	1526 <msg_process+0x16>
			    msg_filter_check(backend, msg)) {
    1542:	4631      	mov	r1, r6
    1544:	4628      	mov	r0, r5
    1546:	f00a ff57 	bl	c3f8 <msg_filter_check>
			if (log_backend_is_active(backend) &&
    154a:	2800      	cmp	r0, #0
    154c:	d0eb      	beq.n	1526 <msg_process+0x16>
	backend->api->put(backend, msg);
    154e:	0127      	lsls	r7, r4, #4
    1550:	4b07      	ldr	r3, [pc, #28]	; (1570 <msg_process+0x60>)
    1552:	59db      	ldr	r3, [r3, r7]
    1554:	685b      	ldr	r3, [r3, #4]
    1556:	4631      	mov	r1, r6
    1558:	4628      	mov	r0, r5
    155a:	4798      	blx	r3
}
    155c:	e7e3      	b.n	1526 <msg_process+0x16>
			log_msg_put(msg.msg);
    155e:	4630      	mov	r0, r6
    1560:	f00b f808 	bl	c574 <log_msg_put>
}
    1564:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1566:	bf00      	nop
    1568:	2000254a 	.word	0x2000254a
    156c:	0000e8b4 	.word	0x0000e8b4
    1570:	0000e894 	.word	0x0000e894

00001574 <z_impl_log_process>:
{
    1574:	b510      	push	{r4, lr}
    1576:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    1578:	4b10      	ldr	r3, [pc, #64]	; (15bc <z_impl_log_process+0x48>)
    157a:	781b      	ldrb	r3, [r3, #0]
    157c:	b903      	cbnz	r3, 1580 <z_impl_log_process+0xc>
    157e:	b1c8      	cbz	r0, 15b4 <z_impl_log_process+0x40>
	msg = get_msg();
    1580:	f7ff feb2 	bl	12e8 <get_msg>
	if (msg.msg) {
    1584:	4602      	mov	r2, r0
    1586:	b178      	cbz	r0, 15a8 <z_impl_log_process+0x34>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1588:	4b0d      	ldr	r3, [pc, #52]	; (15c0 <z_impl_log_process+0x4c>)
    158a:	f3bf 8f5b 	dmb	ish
    158e:	e853 1f00 	ldrex	r1, [r3]
    1592:	3901      	subs	r1, #1
    1594:	e843 1000 	strex	r0, r1, [r3]
    1598:	2800      	cmp	r0, #0
    159a:	d1f8      	bne.n	158e <z_impl_log_process+0x1a>
    159c:	f3bf 8f5b 	dmb	ish
		msg_process(msg, bypass);
    15a0:	4621      	mov	r1, r4
    15a2:	4610      	mov	r0, r2
    15a4:	f7ff ffb4 	bl	1510 <msg_process>
	if (!bypass && z_log_dropped_pending()) {
    15a8:	b914      	cbnz	r4, 15b0 <z_impl_log_process+0x3c>
    15aa:	f7ff ff11 	bl	13d0 <z_log_dropped_pending>
    15ae:	b910      	cbnz	r0, 15b6 <z_impl_log_process+0x42>
	return next_pending();
    15b0:	f7ff fe02 	bl	11b8 <next_pending>
}
    15b4:	bd10      	pop	{r4, pc}
		dropped_notify();
    15b6:	f7ff fee9 	bl	138c <dropped_notify>
    15ba:	e7f9      	b.n	15b0 <z_impl_log_process+0x3c>
    15bc:	20002549 	.word	0x20002549
    15c0:	20000c68 	.word	0x20000c68

000015c4 <z_log_msg_post_finalize>:
{
    15c4:	b510      	push	{r4, lr}
    15c6:	b082      	sub	sp, #8
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    15c8:	4b1f      	ldr	r3, [pc, #124]	; (1648 <z_log_msg_post_finalize+0x84>)
    15ca:	f3bf 8f5b 	dmb	ish
    15ce:	e853 2f00 	ldrex	r2, [r3]
    15d2:	3201      	adds	r2, #1
    15d4:	e843 2100 	strex	r1, r2, [r3]
    15d8:	2900      	cmp	r1, #0
    15da:	d1f8      	bne.n	15ce <z_log_msg_post_finalize+0xa>
    15dc:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    15e0:	4b1a      	ldr	r3, [pc, #104]	; (164c <z_log_msg_post_finalize+0x88>)
    15e2:	781b      	ldrb	r3, [r3, #0]
    15e4:	b963      	cbnz	r3, 1600 <z_log_msg_post_finalize+0x3c>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    15e6:	4b1a      	ldr	r3, [pc, #104]	; (1650 <z_log_msg_post_finalize+0x8c>)
    15e8:	681b      	ldr	r3, [r3, #0]
    15ea:	b11b      	cbz	r3, 15f4 <z_log_msg_post_finalize+0x30>
    15ec:	4a16      	ldr	r2, [pc, #88]	; (1648 <z_log_msg_post_finalize+0x84>)
    15ee:	6812      	ldr	r2, [r2, #0]
    15f0:	2a01      	cmp	r2, #1
    15f2:	d015      	beq.n	1620 <z_log_msg_post_finalize+0x5c>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    15f4:	4a14      	ldr	r2, [pc, #80]	; (1648 <z_log_msg_post_finalize+0x84>)
    15f6:	6812      	ldr	r2, [r2, #0]
    15f8:	2a0a      	cmp	r2, #10
    15fa:	d01c      	beq.n	1636 <z_log_msg_post_finalize+0x72>
}
    15fc:	b002      	add	sp, #8
    15fe:	bd10      	pop	{r4, pc}
	__asm__ volatile(
    1600:	f04f 0320 	mov.w	r3, #32
    1604:	f3ef 8411 	mrs	r4, BASEPRI
    1608:	f383 8812 	msr	BASEPRI_MAX, r3
    160c:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    1610:	2000      	movs	r0, #0
    1612:	f7ff ffaf 	bl	1574 <z_impl_log_process>
	__asm__ volatile(
    1616:	f384 8811 	msr	BASEPRI, r4
    161a:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    161e:	e7ed      	b.n	15fc <z_log_msg_post_finalize+0x38>
	z_impl_k_timer_start(timer, duration, period);
    1620:	2200      	movs	r2, #0
    1622:	2300      	movs	r3, #0
    1624:	e9cd 2300 	strd	r2, r3, [sp]
    1628:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    162c:	2300      	movs	r3, #0
    162e:	4809      	ldr	r0, [pc, #36]	; (1654 <z_log_msg_post_finalize+0x90>)
    1630:	f009 fd0a 	bl	b048 <z_impl_k_timer_start>
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    1634:	e7e2      	b.n	15fc <z_log_msg_post_finalize+0x38>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    1636:	2b00      	cmp	r3, #0
    1638:	d0e0      	beq.n	15fc <z_log_msg_post_finalize+0x38>
	z_impl_k_timer_stop(timer);
    163a:	4806      	ldr	r0, [pc, #24]	; (1654 <z_log_msg_post_finalize+0x90>)
    163c:	f00c fef0 	bl	e420 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    1640:	4805      	ldr	r0, [pc, #20]	; (1658 <z_log_msg_post_finalize+0x94>)
    1642:	f008 fd7d 	bl	a140 <z_impl_k_sem_give>
}
    1646:	e7d9      	b.n	15fc <z_log_msg_post_finalize+0x38>
    1648:	20000c68 	.word	0x20000c68
    164c:	2000254a 	.word	0x2000254a
    1650:	20000c98 	.word	0x20000c98
    1654:	20000368 	.word	0x20000368
    1658:	20000264 	.word	0x20000264

0000165c <log_3>:
{
    165c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1660:	4680      	mov	r8, r0
    1662:	460f      	mov	r7, r1
    1664:	4616      	mov	r6, r2
    1666:	461d      	mov	r5, r3
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    1668:	f000 f98e 	bl	1988 <log_msg_chunk_alloc>

	if (msg != NULL) {
    166c:	4604      	mov	r4, r0
    166e:	b140      	cbz	r0, 1682 <log_3+0x26>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
    1670:	2301      	movs	r3, #1
    1672:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    1674:	2200      	movs	r2, #0
    1676:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    1678:	f04f 0300 	mov.w	r3, #0
    167c:	f362 0300 	bfi	r3, r2, #0, #1
    1680:	7203      	strb	r3, [r0, #8]
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();

	if (msg != NULL) {
    1682:	b14c      	cbz	r4, 1698 <log_3+0x3c>
		msg->str = str;
    1684:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = 3U;
    1688:	7a63      	ldrb	r3, [r4, #9]
    168a:	2203      	movs	r2, #3
    168c:	f362 1307 	bfi	r3, r2, #4, #4
    1690:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    1692:	6167      	str	r7, [r4, #20]
		msg->payload.single.args[1] = arg2;
    1694:	61a6      	str	r6, [r4, #24]
		msg->payload.single.args[2] = arg3;
    1696:	61e5      	str	r5, [r4, #28]
		if (msg == NULL) {
    1698:	b1c4      	cbz	r4, 16cc <log_3+0x70>
	msg->hdr.ids = src_level;
    169a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    169e:	8163      	strh	r3, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    16a0:	4b0b      	ldr	r3, [pc, #44]	; (16d0 <log_3+0x74>)
    16a2:	681b      	ldr	r3, [r3, #0]
    16a4:	4798      	blx	r3
    16a6:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    16a8:	f04f 0320 	mov.w	r3, #32
    16ac:	f3ef 8511 	mrs	r5, BASEPRI
    16b0:	f383 8812 	msr	BASEPRI_MAX, r3
    16b4:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    16b8:	4621      	mov	r1, r4
    16ba:	4806      	ldr	r0, [pc, #24]	; (16d4 <log_3+0x78>)
    16bc:	f00a fe88 	bl	c3d0 <log_list_add_tail>
	__asm__ volatile(
    16c0:	f385 8811 	msr	BASEPRI, r5
    16c4:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    16c8:	f7ff ff7c 	bl	15c4 <z_log_msg_post_finalize>
}
    16cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    16d0:	20000004 	.word	0x20000004
    16d4:	20000c74 	.word	0x20000c74

000016d8 <log_1>:
{
    16d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16da:	4606      	mov	r6, r0
    16dc:	460d      	mov	r5, r1
    16de:	4617      	mov	r7, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    16e0:	f000 f952 	bl	1988 <log_msg_chunk_alloc>
	if (msg != NULL) {
    16e4:	4604      	mov	r4, r0
    16e6:	b140      	cbz	r0, 16fa <log_1+0x22>
		msg->hdr.ref_cnt = 1;
    16e8:	2301      	movs	r3, #1
    16ea:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    16ec:	2100      	movs	r1, #0
    16ee:	8101      	strh	r1, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    16f0:	f04f 0300 	mov.w	r3, #0
    16f4:	f361 0300 	bfi	r3, r1, #0, #1
    16f8:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
    16fa:	b134      	cbz	r4, 170a <log_1+0x32>
		msg->str = str;
    16fc:	6126      	str	r6, [r4, #16]
		msg->hdr.params.std.nargs = 1U;
    16fe:	7a63      	ldrb	r3, [r4, #9]
    1700:	2201      	movs	r2, #1
    1702:	f362 1307 	bfi	r3, r2, #4, #4
    1706:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    1708:	6165      	str	r5, [r4, #20]
		if (msg == NULL) {
    170a:	b1b4      	cbz	r4, 173a <log_1+0x62>
	msg->hdr.ids = src_level;
    170c:	8167      	strh	r7, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    170e:	4b0b      	ldr	r3, [pc, #44]	; (173c <log_1+0x64>)
    1710:	681b      	ldr	r3, [r3, #0]
    1712:	4798      	blx	r3
    1714:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    1716:	f04f 0320 	mov.w	r3, #32
    171a:	f3ef 8511 	mrs	r5, BASEPRI
    171e:	f383 8812 	msr	BASEPRI_MAX, r3
    1722:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    1726:	4621      	mov	r1, r4
    1728:	4805      	ldr	r0, [pc, #20]	; (1740 <log_1+0x68>)
    172a:	f00a fe51 	bl	c3d0 <log_list_add_tail>
	__asm__ volatile(
    172e:	f385 8811 	msr	BASEPRI, r5
    1732:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    1736:	f7ff ff45 	bl	15c4 <z_log_msg_post_finalize>
}
    173a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    173c:	20000004 	.word	0x20000004
    1740:	20000c74 	.word	0x20000c74

00001744 <log_2>:
{
    1744:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1748:	4607      	mov	r7, r0
    174a:	460e      	mov	r6, r1
    174c:	4615      	mov	r5, r2
    174e:	4698      	mov	r8, r3
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    1750:	f000 f91a 	bl	1988 <log_msg_chunk_alloc>
	if (msg != NULL) {
    1754:	4604      	mov	r4, r0
    1756:	b140      	cbz	r0, 176a <log_2+0x26>
		msg->hdr.ref_cnt = 1;
    1758:	2301      	movs	r3, #1
    175a:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    175c:	2200      	movs	r2, #0
    175e:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    1760:	f04f 0300 	mov.w	r3, #0
    1764:	f362 0300 	bfi	r3, r2, #0, #1
    1768:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
    176a:	b13c      	cbz	r4, 177c <log_2+0x38>
		msg->str = str;
    176c:	6127      	str	r7, [r4, #16]
		msg->hdr.params.std.nargs = 2U;
    176e:	7a63      	ldrb	r3, [r4, #9]
    1770:	2202      	movs	r2, #2
    1772:	f362 1307 	bfi	r3, r2, #4, #4
    1776:	7263      	strb	r3, [r4, #9]
		msg->payload.single.args[0] = arg1;
    1778:	6166      	str	r6, [r4, #20]
		msg->payload.single.args[1] = arg2;
    177a:	61a5      	str	r5, [r4, #24]
		if (msg == NULL) {
    177c:	b1bc      	cbz	r4, 17ae <log_2+0x6a>
	msg->hdr.ids = src_level;
    177e:	f8a4 800a 	strh.w	r8, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    1782:	4b0c      	ldr	r3, [pc, #48]	; (17b4 <log_2+0x70>)
    1784:	681b      	ldr	r3, [r3, #0]
    1786:	4798      	blx	r3
    1788:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    178a:	f04f 0320 	mov.w	r3, #32
    178e:	f3ef 8511 	mrs	r5, BASEPRI
    1792:	f383 8812 	msr	BASEPRI_MAX, r3
    1796:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    179a:	4621      	mov	r1, r4
    179c:	4806      	ldr	r0, [pc, #24]	; (17b8 <log_2+0x74>)
    179e:	f00a fe17 	bl	c3d0 <log_list_add_tail>
	__asm__ volatile(
    17a2:	f385 8811 	msr	BASEPRI, r5
    17a6:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    17aa:	f7ff ff0b 	bl	15c4 <z_log_msg_post_finalize>
}
    17ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    17b2:	bf00      	nop
    17b4:	20000004 	.word	0x20000004
    17b8:	20000c74 	.word	0x20000c74

000017bc <log_0>:
{
    17bc:	b570      	push	{r4, r5, r6, lr}
    17be:	4605      	mov	r5, r0
    17c0:	460e      	mov	r6, r1
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
    17c2:	f000 f8e1 	bl	1988 <log_msg_chunk_alloc>
	if (msg != NULL) {
    17c6:	4604      	mov	r4, r0
    17c8:	b140      	cbz	r0, 17dc <log_0+0x20>
		msg->hdr.ref_cnt = 1;
    17ca:	2301      	movs	r3, #1
    17cc:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
    17ce:	2200      	movs	r2, #0
    17d0:	8102      	strh	r2, [r0, #8]
		msg->hdr.params.std.type = LOG_MSG_TYPE_STD;
    17d2:	f04f 0300 	mov.w	r3, #0
    17d6:	f362 0300 	bfi	r3, r2, #0, #1
    17da:	7203      	strb	r3, [r0, #8]
	if (msg != NULL) {
    17dc:	b104      	cbz	r4, 17e0 <log_0+0x24>
		msg->str = str;
    17de:	6125      	str	r5, [r4, #16]
		if (msg == NULL) {
    17e0:	b1b4      	cbz	r4, 1810 <log_0+0x54>
	msg->hdr.ids = src_level;
    17e2:	8166      	strh	r6, [r4, #10]
	msg->hdr.timestamp = timestamp_func();
    17e4:	4b0b      	ldr	r3, [pc, #44]	; (1814 <log_0+0x58>)
    17e6:	681b      	ldr	r3, [r3, #0]
    17e8:	4798      	blx	r3
    17ea:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    17ec:	f04f 0320 	mov.w	r3, #32
    17f0:	f3ef 8511 	mrs	r5, BASEPRI
    17f4:	f383 8812 	msr	BASEPRI_MAX, r3
    17f8:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    17fc:	4621      	mov	r1, r4
    17fe:	4806      	ldr	r0, [pc, #24]	; (1818 <log_0+0x5c>)
    1800:	f00a fde6 	bl	c3d0 <log_list_add_tail>
	__asm__ volatile(
    1804:	f385 8811 	msr	BASEPRI, r5
    1808:	f3bf 8f6f 	isb	sy
	z_log_msg_post_finalize();
    180c:	f7ff feda 	bl	15c4 <z_log_msg_post_finalize>
}
    1810:	bd70      	pop	{r4, r5, r6, pc}
    1812:	bf00      	nop
    1814:	20000004 	.word	0x20000004
    1818:	20000c74 	.word	0x20000c74

0000181c <z_impl_log_panic>:
	if (panic_mode) {
    181c:	4b12      	ldr	r3, [pc, #72]	; (1868 <z_impl_log_panic+0x4c>)
    181e:	781b      	ldrb	r3, [r3, #0]
    1820:	b103      	cbz	r3, 1824 <z_impl_log_panic+0x8>
    1822:	4770      	bx	lr
{
    1824:	b510      	push	{r4, lr}
	log_init();
    1826:	f7ff fd27 	bl	1278 <log_init>
	for (int i = 0; i < log_backend_count_get(); i++) {
    182a:	2400      	movs	r4, #0
    182c:	e000      	b.n	1830 <z_impl_log_panic+0x14>
    182e:	3401      	adds	r4, #1
    1830:	4b0e      	ldr	r3, [pc, #56]	; (186c <z_impl_log_panic+0x50>)
    1832:	4a0f      	ldr	r2, [pc, #60]	; (1870 <z_impl_log_panic+0x54>)
    1834:	1a9b      	subs	r3, r3, r2
    1836:	ebb4 1f23 	cmp.w	r4, r3, asr #4
    183a:	da0c      	bge.n	1856 <z_impl_log_panic+0x3a>
	return &__log_backends_start[idx];
    183c:	480c      	ldr	r0, [pc, #48]	; (1870 <z_impl_log_panic+0x54>)
    183e:	eb00 1004 	add.w	r0, r0, r4, lsl #4
	return backend->cb->active;
    1842:	6843      	ldr	r3, [r0, #4]
    1844:	795b      	ldrb	r3, [r3, #5]
		if (log_backend_is_active(backend)) {
    1846:	2b00      	cmp	r3, #0
    1848:	d0f1      	beq.n	182e <z_impl_log_panic+0x12>
	backend->api->panic(backend);
    184a:	0123      	lsls	r3, r4, #4
    184c:	4a08      	ldr	r2, [pc, #32]	; (1870 <z_impl_log_panic+0x54>)
    184e:	58d3      	ldr	r3, [r2, r3]
    1850:	695b      	ldr	r3, [r3, #20]
    1852:	4798      	blx	r3
}
    1854:	e7eb      	b.n	182e <z_impl_log_panic+0x12>
    1856:	2000      	movs	r0, #0
    1858:	f7ff fe8c 	bl	1574 <z_impl_log_process>
		while (log_process(false) == true) {
    185c:	2800      	cmp	r0, #0
    185e:	d1fa      	bne.n	1856 <z_impl_log_panic+0x3a>
	panic_mode = true;
    1860:	4b01      	ldr	r3, [pc, #4]	; (1868 <z_impl_log_panic+0x4c>)
    1862:	2201      	movs	r2, #1
    1864:	701a      	strb	r2, [r3, #0]
}
    1866:	bd10      	pop	{r4, pc}
    1868:	2000254a 	.word	0x2000254a
    186c:	0000e8b4 	.word	0x0000e8b4
    1870:	0000e894 	.word	0x0000e894

00001874 <log_process_thread_func>:
{
    1874:	b508      	push	{r3, lr}
	log_init();
    1876:	f7ff fcff 	bl	1278 <log_init>
	return z_impl_z_current_get();
    187a:	f009 f9cb 	bl	ac14 <z_impl_z_current_get>
	thread_set(k_current_get());
    187e:	f7ff fc7f 	bl	1180 <thread_set>
    1882:	e006      	b.n	1892 <log_process_thread_func+0x1e>
	return z_impl_k_sem_take(sem, timeout);
    1884:	f04f 32ff 	mov.w	r2, #4294967295
    1888:	f04f 33ff 	mov.w	r3, #4294967295
    188c:	4804      	ldr	r0, [pc, #16]	; (18a0 <log_process_thread_func+0x2c>)
    188e:	f008 fc7b 	bl	a188 <z_impl_k_sem_take>
    1892:	2000      	movs	r0, #0
    1894:	f7ff fe6e 	bl	1574 <z_impl_log_process>
		if (log_process(false) == false) {
    1898:	2800      	cmp	r0, #0
    189a:	d1fa      	bne.n	1892 <log_process_thread_func+0x1e>
    189c:	e7f2      	b.n	1884 <log_process_thread_func+0x10>
    189e:	bf00      	nop
    18a0:	20000264 	.word	0x20000264

000018a4 <log_free>:
{
    18a4:	b500      	push	{lr}
    18a6:	b083      	sub	sp, #12
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    18a8:	3804      	subs	r0, #4
    18aa:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    18ac:	f3bf 8f5b 	dmb	ish
    18b0:	e850 3f00 	ldrex	r3, [r0]
    18b4:	1e5a      	subs	r2, r3, #1
    18b6:	e840 2100 	strex	r1, r2, [r0]
    18ba:	2900      	cmp	r1, #0
    18bc:	d1f8      	bne.n	18b0 <log_free+0xc>
    18be:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    18c2:	2b01      	cmp	r3, #1
    18c4:	d002      	beq.n	18cc <log_free+0x28>
}
    18c6:	b003      	add	sp, #12
    18c8:	f85d fb04 	ldr.w	pc, [sp], #4
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    18cc:	a901      	add	r1, sp, #4
    18ce:	4802      	ldr	r0, [pc, #8]	; (18d8 <log_free+0x34>)
    18d0:	f00c f9dd 	bl	dc8e <k_mem_slab_free>
}
    18d4:	e7f7      	b.n	18c6 <log_free+0x22>
    18d6:	bf00      	nop
    18d8:	20000c7c 	.word	0x20000c7c

000018dc <log_source_name_get>:
	return log_sources_count();
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    18dc:	4b05      	ldr	r3, [pc, #20]	; (18f4 <log_source_name_get+0x18>)
    18de:	4a06      	ldr	r2, [pc, #24]	; (18f8 <log_source_name_get+0x1c>)
    18e0:	1a9b      	subs	r3, r3, r2
    18e2:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
    18e6:	d202      	bcs.n	18ee <log_source_name_get+0x12>
	return __log_const_start[source_id].name;
    18e8:	f852 0031 	ldr.w	r0, [r2, r1, lsl #3]
    18ec:	4770      	bx	lr
    18ee:	2000      	movs	r0, #0
}
    18f0:	4770      	bx	lr
    18f2:	bf00      	nop
    18f4:	0000e894 	.word	0x0000e894
    18f8:	0000e82c 	.word	0x0000e82c

000018fc <log_backend_enable>:
}

void log_backend_enable(struct log_backend const *const backend,
			void *ctx,
			uint32_t level)
{
    18fc:	b508      	push	{r3, lr}
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    18fe:	4b07      	ldr	r3, [pc, #28]	; (191c <log_backend_enable+0x20>)
    1900:	1ac3      	subs	r3, r0, r3
    1902:	111b      	asrs	r3, r3, #4
    1904:	3301      	adds	r3, #1
	backend->cb->id = id;
    1906:	6842      	ldr	r2, [r0, #4]
    1908:	7113      	strb	r3, [r2, #4]
	backend->cb->ctx = ctx;
    190a:	6843      	ldr	r3, [r0, #4]
    190c:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    190e:	6843      	ldr	r3, [r0, #4]
    1910:	2201      	movs	r2, #1
    1912:	715a      	strb	r2, [r3, #5]

	log_backend_id_set(backend, id);
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    1914:	f7ff fcfc 	bl	1310 <z_log_notify_backend_enabled>
}
    1918:	bd08      	pop	{r3, pc}
    191a:	bf00      	nop
    191c:	0000e894 	.word	0x0000e894

00001920 <cont_free>:
{
	atomic_inc(&msg->hdr.ref_cnt);
}

static void cont_free(struct log_msg_cont *cont)
{
    1920:	b510      	push	{r4, lr}
    1922:	b082      	sub	sp, #8
    1924:	9001      	str	r0, [sp, #4]
	struct log_msg_cont *next;

	while (cont != NULL) {
    1926:	9b01      	ldr	r3, [sp, #4]
    1928:	b133      	cbz	r3, 1938 <cont_free+0x18>
		next = cont->next;
    192a:	681c      	ldr	r4, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    192c:	a901      	add	r1, sp, #4
    192e:	4803      	ldr	r0, [pc, #12]	; (193c <cont_free+0x1c>)
    1930:	f00c f9ad 	bl	dc8e <k_mem_slab_free>
		cont = next;
    1934:	9401      	str	r4, [sp, #4]
    1936:	e7f6      	b.n	1926 <cont_free+0x6>
	}
}
    1938:	b002      	add	sp, #8
    193a:	bd10      	pop	{r4, pc}
    193c:	20000c9c 	.word	0x20000c9c

00001940 <log_msg_pool_init>:
{
    1940:	b508      	push	{r3, lr}
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    1942:	2320      	movs	r3, #32
    1944:	461a      	mov	r2, r3
    1946:	4902      	ldr	r1, [pc, #8]	; (1950 <log_msg_pool_init+0x10>)
    1948:	4802      	ldr	r0, [pc, #8]	; (1954 <log_msg_pool_init+0x14>)
    194a:	f00c f992 	bl	dc72 <k_mem_slab_init>
}
    194e:	bd08      	pop	{r3, pc}
    1950:	200048e0 	.word	0x200048e0
    1954:	20000c9c 	.word	0x20000c9c

00001958 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    1958:	b510      	push	{r4, lr}
    195a:	b082      	sub	sp, #8
	union log_msg_chunk *msg = NULL;
    195c:	2300      	movs	r3, #0
    195e:	9301      	str	r3, [sp, #4]
    1960:	2001      	movs	r0, #1
    1962:	f7ff fe07 	bl	1574 <z_impl_log_process>
    1966:	4604      	mov	r4, r0
	int err;

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
    1968:	f7ff fce2 	bl	1330 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    196c:	2200      	movs	r2, #0
    196e:	2300      	movs	r3, #0
    1970:	a901      	add	r1, sp, #4
    1972:	4804      	ldr	r0, [pc, #16]	; (1984 <log_msg_no_space_handle+0x2c>)
    1974:	f008 f9a0 	bl	9cb8 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    1978:	b108      	cbz	r0, 197e <log_msg_no_space_handle+0x26>
    197a:	2c00      	cmp	r4, #0
    197c:	d1f0      	bne.n	1960 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
    197e:	9801      	ldr	r0, [sp, #4]
    1980:	b002      	add	sp, #8
    1982:	bd10      	pop	{r4, pc}
    1984:	20000c9c 	.word	0x20000c9c

00001988 <log_msg_chunk_alloc>:
{
    1988:	b500      	push	{lr}
    198a:	b083      	sub	sp, #12
	union log_msg_chunk *msg = NULL;
    198c:	2300      	movs	r3, #0
    198e:	9301      	str	r3, [sp, #4]
		   block_on_alloc()
    1990:	f00a fd59 	bl	c446 <block_on_alloc>
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    1994:	b150      	cbz	r0, 19ac <log_msg_chunk_alloc+0x24>
    1996:	2200      	movs	r2, #0
    1998:	2300      	movs	r3, #0
    199a:	a901      	add	r1, sp, #4
    199c:	4807      	ldr	r0, [pc, #28]	; (19bc <log_msg_chunk_alloc+0x34>)
    199e:	f008 f98b 	bl	9cb8 <k_mem_slab_alloc>
	if (err != 0) {
    19a2:	b930      	cbnz	r0, 19b2 <log_msg_chunk_alloc+0x2a>
}
    19a4:	9801      	ldr	r0, [sp, #4]
    19a6:	b003      	add	sp, #12
    19a8:	f85d fb04 	ldr.w	pc, [sp], #4
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    19ac:	2200      	movs	r2, #0
    19ae:	2300      	movs	r3, #0
    19b0:	e7f3      	b.n	199a <log_msg_chunk_alloc+0x12>
		msg = log_msg_no_space_handle();
    19b2:	f7ff ffd1 	bl	1958 <log_msg_no_space_handle>
    19b6:	9001      	str	r0, [sp, #4]
    19b8:	e7f4      	b.n	19a4 <log_msg_chunk_alloc+0x1c>
    19ba:	bf00      	nop
    19bc:	20000c9c 	.word	0x20000c9c

000019c0 <msg_free>:
{
    19c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    19c2:	b083      	sub	sp, #12
    19c4:	9001      	str	r0, [sp, #4]
	uint32_t nargs = log_msg_nargs_get(msg);
    19c6:	4604      	mov	r4, r0
    19c8:	f00a fdbd 	bl	c546 <log_msg_nargs_get>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    19cc:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg) && nargs) {
    19ce:	f013 0f01 	tst.w	r3, #1
    19d2:	d101      	bne.n	19d8 <msg_free+0x18>
    19d4:	4606      	mov	r6, r0
    19d6:	bb50      	cbnz	r0, 1a2e <msg_free+0x6e>
	if (msg->hdr.params.generic.ext == 1) {
    19d8:	9b01      	ldr	r3, [sp, #4]
    19da:	7a1a      	ldrb	r2, [r3, #8]
    19dc:	f012 0f02 	tst.w	r2, #2
    19e0:	d128      	bne.n	1a34 <msg_free+0x74>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    19e2:	a901      	add	r1, sp, #4
    19e4:	4815      	ldr	r0, [pc, #84]	; (1a3c <msg_free+0x7c>)
    19e6:	f00c f952 	bl	dc8e <k_mem_slab_free>
}
    19ea:	b003      	add	sp, #12
    19ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
					smask = z_log_get_s_mask(
    19ee:	9801      	ldr	r0, [sp, #4]
    19f0:	f00a fdbe 	bl	c570 <log_msg_str_get>
    19f4:	4631      	mov	r1, r6
    19f6:	f00a fd05 	bl	c404 <z_log_get_s_mask>
					if (smask == 0U) {
    19fa:	4607      	mov	r7, r0
    19fc:	b988      	cbnz	r0, 1a22 <msg_free+0x62>
    19fe:	e7eb      	b.n	19d8 <msg_free+0x18>
					log_free(buf);
    1a00:	4628      	mov	r0, r5
    1a02:	f7ff ff4f 	bl	18a4 <log_free>
		for (i = 0U; i < nargs; i++) {
    1a06:	3401      	adds	r4, #1
    1a08:	42b4      	cmp	r4, r6
    1a0a:	d2e5      	bcs.n	19d8 <msg_free+0x18>
			void *buf = (void *)log_msg_arg_get(msg, i);
    1a0c:	4621      	mov	r1, r4
    1a0e:	9801      	ldr	r0, [sp, #4]
    1a10:	f00a fd9c 	bl	c54c <log_msg_arg_get>
    1a14:	4605      	mov	r5, r0
			if (log_is_strdup(buf)) {
    1a16:	f7ff fd15 	bl	1444 <log_is_strdup>
    1a1a:	2800      	cmp	r0, #0
    1a1c:	d0f3      	beq.n	1a06 <msg_free+0x46>
				if (smask == 0U) {
    1a1e:	2f00      	cmp	r7, #0
    1a20:	d0e5      	beq.n	19ee <msg_free+0x2e>
				if (smask & BIT(i)) {
    1a22:	fa27 f304 	lsr.w	r3, r7, r4
    1a26:	f013 0f01 	tst.w	r3, #1
    1a2a:	d0ec      	beq.n	1a06 <msg_free+0x46>
    1a2c:	e7e8      	b.n	1a00 <msg_free+0x40>
		uint32_t smask = 0U;
    1a2e:	2700      	movs	r7, #0
		for (i = 0U; i < nargs; i++) {
    1a30:	463c      	mov	r4, r7
    1a32:	e7e9      	b.n	1a08 <msg_free+0x48>
		cont_free(msg->payload.ext.next);
    1a34:	6958      	ldr	r0, [r3, #20]
    1a36:	f7ff ff73 	bl	1920 <cont_free>
    1a3a:	e7d2      	b.n	19e2 <msg_free+0x22>
    1a3c:	20000c9c 	.word	0x20000c9c

00001a40 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    1a40:	b40e      	push	{r1, r2, r3}
    1a42:	b500      	push	{lr}
    1a44:	b082      	sub	sp, #8
    1a46:	4601      	mov	r1, r0
    1a48:	ab03      	add	r3, sp, #12
    1a4a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
    1a4e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1a50:	4803      	ldr	r0, [pc, #12]	; (1a60 <print_formatted+0x20>)
    1a52:	f7fe fe83 	bl	75c <cbvprintf>
	va_end(args);

	return length;
}
    1a56:	b002      	add	sp, #8
    1a58:	f85d eb04 	ldr.w	lr, [sp], #4
    1a5c:	b003      	add	sp, #12
    1a5e:	4770      	bx	lr
    1a60:	0000c913 	.word	0x0000c913

00001a64 <timestamp_print>:
	output->control_block->offset = 0;
}

static int timestamp_print(const struct log_output *output,
			   uint32_t flags, uint32_t timestamp)
{
    1a64:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a66:	b085      	sub	sp, #20
	bool format =
		(flags & LOG_OUTPUT_FLAG_FORMAT_TIMESTAMP) |
		(flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG);


	if (!format) {
    1a68:	f011 0f44 	tst.w	r1, #68	; 0x44
    1a6c:	d005      	beq.n	1a7a <timestamp_print+0x16>
		length = print_formatted(output, "[%08lu] ", timestamp);
	} else if (freq != 0U) {
    1a6e:	4b1a      	ldr	r3, [pc, #104]	; (1ad8 <timestamp_print+0x74>)
    1a70:	681c      	ldr	r4, [r3, #0]
    1a72:	b934      	cbnz	r4, 1a82 <timestamp_print+0x1e>
			length = print_formatted(output,
						 "[%02u:%02u:%02u.%03u,%03u] ",
						 hours, mins, seconds, ms, us);
		}
	} else {
		length = 0;
    1a74:	2000      	movs	r0, #0
	}

	return length;
}
    1a76:	b005      	add	sp, #20
    1a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
		length = print_formatted(output, "[%08lu] ", timestamp);
    1a7a:	4918      	ldr	r1, [pc, #96]	; (1adc <timestamp_print+0x78>)
    1a7c:	f7ff ffe0 	bl	1a40 <print_formatted>
    1a80:	e7f9      	b.n	1a76 <timestamp_print+0x12>
		timestamp /= timestamp_div;
    1a82:	4b17      	ldr	r3, [pc, #92]	; (1ae0 <timestamp_print+0x7c>)
    1a84:	6819      	ldr	r1, [r3, #0]
    1a86:	fbb2 f1f1 	udiv	r1, r2, r1
		total_seconds = timestamp / freq;
    1a8a:	fbb1 f5f4 	udiv	r5, r1, r4
		hours = seconds / 3600U;
    1a8e:	4a15      	ldr	r2, [pc, #84]	; (1ae4 <timestamp_print+0x80>)
    1a90:	fba2 3205 	umull	r3, r2, r2, r5
    1a94:	0ad2      	lsrs	r2, r2, #11
		seconds -= hours * 3600U;
    1a96:	f44f 6661 	mov.w	r6, #3600	; 0xe10
    1a9a:	fb06 5612 	mls	r6, r6, r2, r5
		mins = seconds / 60U;
    1a9e:	4b12      	ldr	r3, [pc, #72]	; (1ae8 <timestamp_print+0x84>)
    1aa0:	fba3 7306 	umull	r7, r3, r3, r6
    1aa4:	095b      	lsrs	r3, r3, #5
		remainder = timestamp % freq;
    1aa6:	fb04 1115 	mls	r1, r4, r5, r1
		ms = (remainder * 1000U) / freq;
    1aaa:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
    1aae:	fb05 f101 	mul.w	r1, r5, r1
    1ab2:	fbb1 f7f4 	udiv	r7, r1, r4
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1ab6:	fb07 1114 	mls	r1, r7, r4, r1
    1aba:	fb05 f101 	mul.w	r1, r5, r1
    1abe:	fbb1 f4f4 	udiv	r4, r1, r4
			length = print_formatted(output,
    1ac2:	9402      	str	r4, [sp, #8]
    1ac4:	9701      	str	r7, [sp, #4]
    1ac6:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
    1aca:	eba6 0181 	sub.w	r1, r6, r1, lsl #2
    1ace:	9100      	str	r1, [sp, #0]
    1ad0:	4906      	ldr	r1, [pc, #24]	; (1aec <timestamp_print+0x88>)
    1ad2:	f7ff ffb5 	bl	1a40 <print_formatted>
    1ad6:	e7ce      	b.n	1a76 <timestamp_print+0x12>
    1ad8:	20000cb8 	.word	0x20000cb8
    1adc:	0000e9d8 	.word	0x0000e9d8
    1ae0:	20000cbc 	.word	0x20000cbc
    1ae4:	91a2b3c5 	.word	0x91a2b3c5
    1ae8:	88888889 	.word	0x88888889
    1aec:	0000e9e4 	.word	0x0000e9e4

00001af0 <color_print>:

static void color_print(const struct log_output *output,
			bool color, bool start, uint32_t level)
{
	if (color) {
    1af0:	b161      	cbz	r1, 1b0c <color_print+0x1c>
{
    1af2:	b508      	push	{r3, lr}
		const char *log_color = start && (colors[level] != NULL) ?
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    1af4:	b12a      	cbz	r2, 1b02 <color_print+0x12>
		const char *log_color = start && (colors[level] != NULL) ?
    1af6:	4a06      	ldr	r2, [pc, #24]	; (1b10 <color_print+0x20>)
    1af8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    1afc:	b912      	cbnz	r2, 1b04 <color_print+0x14>
				colors[level] : LOG_COLOR_CODE_DEFAULT;
    1afe:	4a05      	ldr	r2, [pc, #20]	; (1b14 <color_print+0x24>)
    1b00:	e000      	b.n	1b04 <color_print+0x14>
    1b02:	4a04      	ldr	r2, [pc, #16]	; (1b14 <color_print+0x24>)
		print_formatted(output, "%s", log_color);
    1b04:	4904      	ldr	r1, [pc, #16]	; (1b18 <color_print+0x28>)
    1b06:	f7ff ff9b 	bl	1a40 <print_formatted>
	}
}
    1b0a:	bd08      	pop	{r3, pc}
    1b0c:	4770      	bx	lr
    1b0e:	bf00      	nop
    1b10:	0000ea58 	.word	0x0000ea58
    1b14:	0000ea00 	.word	0x0000ea00
    1b18:	0000ea08 	.word	0x0000ea08

00001b1c <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1b1c:	f011 0f10 	tst.w	r1, #16
    1b20:	d10b      	bne.n	1b3a <newline_print+0x1e>
{
    1b22:	b508      	push	{r3, lr}
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1b24:	f011 0f20 	tst.w	r1, #32
    1b28:	d003      	beq.n	1b32 <newline_print+0x16>
		print_formatted(ctx, "\n");
    1b2a:	4904      	ldr	r1, [pc, #16]	; (1b3c <newline_print+0x20>)
    1b2c:	f7ff ff88 	bl	1a40 <print_formatted>
	} else {
		print_formatted(ctx, "\r\n");
	}
}
    1b30:	bd08      	pop	{r3, pc}
		print_formatted(ctx, "\r\n");
    1b32:	4903      	ldr	r1, [pc, #12]	; (1b40 <newline_print+0x24>)
    1b34:	f7ff ff84 	bl	1a40 <print_formatted>
    1b38:	e7fa      	b.n	1b30 <newline_print+0x14>
    1b3a:	4770      	bx	lr
    1b3c:	0000f46c 	.word	0x0000f46c
    1b40:	0000facc 	.word	0x0000facc

00001b44 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    1b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1b48:	4605      	mov	r5, r0
    1b4a:	460f      	mov	r7, r1
    1b4c:	4616      	mov	r6, r2
    1b4e:	4698      	mov	r8, r3
	newline_print(output, flags);
    1b50:	9906      	ldr	r1, [sp, #24]
    1b52:	f7ff ffe3 	bl	1b1c <newline_print>

	for (int i = 0; i < prefix_offset; i++) {
    1b56:	2400      	movs	r4, #0
    1b58:	4544      	cmp	r4, r8
    1b5a:	da05      	bge.n	1b68 <hexdump_line_print+0x24>
		print_formatted(output, " ");
    1b5c:	4923      	ldr	r1, [pc, #140]	; (1bec <hexdump_line_print+0xa8>)
    1b5e:	4628      	mov	r0, r5
    1b60:	f7ff ff6e 	bl	1a40 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    1b64:	3401      	adds	r4, #1
    1b66:	e7f7      	b.n	1b58 <hexdump_line_print+0x14>
	}

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1b68:	2400      	movs	r4, #0
    1b6a:	e009      	b.n	1b80 <hexdump_line_print+0x3c>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    1b6c:	491f      	ldr	r1, [pc, #124]	; (1bec <hexdump_line_print+0xa8>)
    1b6e:	4628      	mov	r0, r5
    1b70:	f7ff ff66 	bl	1a40 <print_formatted>
    1b74:	e00b      	b.n	1b8e <hexdump_line_print+0x4a>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    1b76:	491e      	ldr	r1, [pc, #120]	; (1bf0 <hexdump_line_print+0xac>)
    1b78:	4628      	mov	r0, r5
    1b7a:	f7ff ff61 	bl	1a40 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1b7e:	3401      	adds	r4, #1
    1b80:	2c0f      	cmp	r4, #15
    1b82:	dc0c      	bgt.n	1b9e <hexdump_line_print+0x5a>
		if (i > 0 && !(i % 8)) {
    1b84:	2c00      	cmp	r4, #0
    1b86:	dd02      	ble.n	1b8e <hexdump_line_print+0x4a>
    1b88:	f014 0f07 	tst.w	r4, #7
    1b8c:	d0ee      	beq.n	1b6c <hexdump_line_print+0x28>
		if (i < length) {
    1b8e:	42b4      	cmp	r4, r6
    1b90:	d2f1      	bcs.n	1b76 <hexdump_line_print+0x32>
			print_formatted(output, "%02x ", data[i]);
    1b92:	5d3a      	ldrb	r2, [r7, r4]
    1b94:	4917      	ldr	r1, [pc, #92]	; (1bf4 <hexdump_line_print+0xb0>)
    1b96:	4628      	mov	r0, r5
    1b98:	f7ff ff52 	bl	1a40 <print_formatted>
    1b9c:	e7ef      	b.n	1b7e <hexdump_line_print+0x3a>
		}
	}

	print_formatted(output, "|");
    1b9e:	4916      	ldr	r1, [pc, #88]	; (1bf8 <hexdump_line_print+0xb4>)
    1ba0:	4628      	mov	r0, r5
    1ba2:	f7ff ff4d 	bl	1a40 <print_formatted>

	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1ba6:	2400      	movs	r4, #0
    1ba8:	e009      	b.n	1bbe <hexdump_line_print+0x7a>
		if (i > 0 && !(i % 8)) {
			print_formatted(output, " ");
    1baa:	4910      	ldr	r1, [pc, #64]	; (1bec <hexdump_line_print+0xa8>)
    1bac:	4628      	mov	r0, r5
    1bae:	f7ff ff47 	bl	1a40 <print_formatted>
    1bb2:	e00b      	b.n	1bcc <hexdump_line_print+0x88>
		}

		if (i < length) {
			char c = (char)data[i];

			print_formatted(output, "%c",
    1bb4:	4911      	ldr	r1, [pc, #68]	; (1bfc <hexdump_line_print+0xb8>)
    1bb6:	4628      	mov	r0, r5
    1bb8:	f7ff ff42 	bl	1a40 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1bbc:	3401      	adds	r4, #1
    1bbe:	2c0f      	cmp	r4, #15
    1bc0:	dc12      	bgt.n	1be8 <hexdump_line_print+0xa4>
		if (i > 0 && !(i % 8)) {
    1bc2:	2c00      	cmp	r4, #0
    1bc4:	dd02      	ble.n	1bcc <hexdump_line_print+0x88>
    1bc6:	f014 0f07 	tst.w	r4, #7
    1bca:	d0ee      	beq.n	1baa <hexdump_line_print+0x66>
		if (i < length) {
    1bcc:	42b4      	cmp	r4, r6
    1bce:	d206      	bcs.n	1bde <hexdump_line_print+0x9a>
			char c = (char)data[i];
    1bd0:	5d3a      	ldrb	r2, [r7, r4]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isprint(int c)
{
	return (int)((((unsigned)c) >= ' ') &&
    1bd2:	f1a2 0320 	sub.w	r3, r2, #32
			print_formatted(output, "%c",
    1bd6:	2b5e      	cmp	r3, #94	; 0x5e
    1bd8:	d9ec      	bls.n	1bb4 <hexdump_line_print+0x70>
    1bda:	222e      	movs	r2, #46	; 0x2e
    1bdc:	e7ea      	b.n	1bb4 <hexdump_line_print+0x70>
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    1bde:	4903      	ldr	r1, [pc, #12]	; (1bec <hexdump_line_print+0xa8>)
    1be0:	4628      	mov	r0, r5
    1be2:	f7ff ff2d 	bl	1a40 <print_formatted>
    1be6:	e7e9      	b.n	1bbc <hexdump_line_print+0x78>
		}
	}
}
    1be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1bec:	0000ea30 	.word	0x0000ea30
    1bf0:	0000ea14 	.word	0x0000ea14
    1bf4:	0000ea0c 	.word	0x0000ea0c
    1bf8:	0000ea18 	.word	0x0000ea18
    1bfc:	0000ea1c 	.word	0x0000ea1c

00001c00 <ids_print>:
{
    1c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1c04:	4680      	mov	r8, r0
    1c06:	4616      	mov	r6, r2
    1c08:	461d      	mov	r5, r3
    1c0a:	f9bd 7018 	ldrsh.w	r7, [sp, #24]
	if (level_on) {
    1c0e:	b959      	cbnz	r1, 1c28 <ids_print+0x28>
	int total = 0;
    1c10:	2400      	movs	r4, #0
	if (source_id >= 0) {
    1c12:	2f00      	cmp	r7, #0
    1c14:	db1c      	blt.n	1c50 <ids_print+0x50>
		total += print_formatted(output,
    1c16:	b186      	cbz	r6, 1c3a <ids_print+0x3a>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    1c18:	2301      	movs	r3, #1
    1c1a:	9a07      	ldr	r2, [sp, #28]
    1c1c:	4093      	lsls	r3, r2
				(func_on &&
    1c1e:	f013 0f10 	tst.w	r3, #16
    1c22:	d118      	bne.n	1c56 <ids_print+0x56>
		total += print_formatted(output,
    1c24:	4e0d      	ldr	r6, [pc, #52]	; (1c5c <ids_print+0x5c>)
    1c26:	e009      	b.n	1c3c <ids_print+0x3c>
		total += print_formatted(output, "<%s> ", severity[level]);
    1c28:	4b0d      	ldr	r3, [pc, #52]	; (1c60 <ids_print+0x60>)
    1c2a:	9a07      	ldr	r2, [sp, #28]
    1c2c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    1c30:	490c      	ldr	r1, [pc, #48]	; (1c64 <ids_print+0x64>)
    1c32:	f7ff ff05 	bl	1a40 <print_formatted>
    1c36:	4604      	mov	r4, r0
    1c38:	e7eb      	b.n	1c12 <ids_print+0x12>
		total += print_formatted(output,
    1c3a:	4e08      	ldr	r6, [pc, #32]	; (1c5c <ids_print+0x5c>)
    1c3c:	4639      	mov	r1, r7
    1c3e:	4628      	mov	r0, r5
    1c40:	f7ff fe4c 	bl	18dc <log_source_name_get>
    1c44:	4602      	mov	r2, r0
    1c46:	4631      	mov	r1, r6
    1c48:	4640      	mov	r0, r8
    1c4a:	f7ff fef9 	bl	1a40 <print_formatted>
    1c4e:	4404      	add	r4, r0
}
    1c50:	4620      	mov	r0, r4
    1c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		total += print_formatted(output,
    1c56:	4e04      	ldr	r6, [pc, #16]	; (1c68 <ids_print+0x68>)
    1c58:	e7f0      	b.n	1c3c <ids_print+0x3c>
    1c5a:	bf00      	nop
    1c5c:	0000ea20 	.word	0x0000ea20
    1c60:	0000ea94 	.word	0x0000ea94
    1c64:	0000ea2c 	.word	0x0000ea2c
    1c68:	0000ea28 	.word	0x0000ea28

00001c6c <hexdump_print>:

static void hexdump_print(struct log_msg *msg,
			  const struct log_output *output,
			  int prefix_offset, uint32_t flags)
{
    1c6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1c70:	b089      	sub	sp, #36	; 0x24
    1c72:	4607      	mov	r7, r0
    1c74:	460e      	mov	r6, r1
    1c76:	4691      	mov	r9, r2
    1c78:	4698      	mov	r8, r3
	uint32_t offset = 0U;
	uint8_t buf[HEXDUMP_BYTES_IN_LINE];
	size_t length;

	print_formatted(output, "%s", log_msg_str_get(msg));
    1c7a:	f00a fc79 	bl	c570 <log_msg_str_get>
    1c7e:	4602      	mov	r2, r0
    1c80:	490e      	ldr	r1, [pc, #56]	; (1cbc <hexdump_print+0x50>)
    1c82:	4630      	mov	r0, r6
    1c84:	f7ff fedc 	bl	1a40 <print_formatted>
	uint32_t offset = 0U;
    1c88:	2400      	movs	r4, #0

	do {
		length = sizeof(buf);
    1c8a:	2510      	movs	r5, #16
    1c8c:	9503      	str	r5, [sp, #12]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    1c8e:	4623      	mov	r3, r4
    1c90:	aa03      	add	r2, sp, #12
    1c92:	eb0d 0105 	add.w	r1, sp, r5
    1c96:	4638      	mov	r0, r7
    1c98:	f00a fc7f 	bl	c59a <log_msg_hexdump_data_get>

		if (length) {
    1c9c:	9a03      	ldr	r2, [sp, #12]
    1c9e:	b152      	cbz	r2, 1cb6 <hexdump_print+0x4a>
			hexdump_line_print(output, buf, length,
    1ca0:	f8cd 8000 	str.w	r8, [sp]
    1ca4:	464b      	mov	r3, r9
    1ca6:	eb0d 0105 	add.w	r1, sp, r5
    1caa:	4630      	mov	r0, r6
    1cac:	f7ff ff4a 	bl	1b44 <hexdump_line_print>
					   prefix_offset, flags);
			offset += length;
    1cb0:	9d03      	ldr	r5, [sp, #12]
    1cb2:	442c      	add	r4, r5
		length = sizeof(buf);
    1cb4:	e7e9      	b.n	1c8a <hexdump_print+0x1e>
		} else {
			break;
		}
	} while (true);
}
    1cb6:	b009      	add	sp, #36	; 0x24
    1cb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1cbc:	0000ea08 	.word	0x0000ea08

00001cc0 <raw_string_print>:
}


static void raw_string_print(struct log_msg *msg,
			     const struct log_output *output)
{
    1cc0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1cc2:	b083      	sub	sp, #12
    1cc4:	4606      	mov	r6, r0
    1cc6:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(output->size);

	size_t offset = 0;
	size_t length;
	bool eol = false;
    1cc8:	2700      	movs	r7, #0
	size_t offset = 0;
    1cca:	463d      	mov	r5, r7
    1ccc:	e00d      	b.n	1cea <raw_string_print+0x2a>
		/* Sting is stored in a hexdump message. */
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
		output->control_block->offset = length;

		if (length != 0) {
			eol = (output->buf[length - 1] == '\n');
    1cce:	68a2      	ldr	r2, [r4, #8]
    1cd0:	4413      	add	r3, r2
    1cd2:	f813 7c01 	ldrb.w	r7, [r3, #-1]
    1cd6:	2f0a      	cmp	r7, #10
    1cd8:	bf14      	ite	ne
    1cda:	2700      	movne	r7, #0
    1cdc:	2701      	moveq	r7, #1
		}

		log_output_flush(output);
    1cde:	4620      	mov	r0, r4
    1ce0:	f00a fe0a 	bl	c8f8 <log_output_flush>
		offset += length;
    1ce4:	9b01      	ldr	r3, [sp, #4]
    1ce6:	441d      	add	r5, r3
	} while (length > 0);
    1ce8:	b173      	cbz	r3, 1d08 <raw_string_print+0x48>
		length = output->size;
    1cea:	68e3      	ldr	r3, [r4, #12]
    1cec:	9301      	str	r3, [sp, #4]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
    1cee:	462b      	mov	r3, r5
    1cf0:	aa01      	add	r2, sp, #4
    1cf2:	68a1      	ldr	r1, [r4, #8]
    1cf4:	4630      	mov	r0, r6
    1cf6:	f00a fc50 	bl	c59a <log_msg_hexdump_data_get>
		output->control_block->offset = length;
    1cfa:	6863      	ldr	r3, [r4, #4]
    1cfc:	9a01      	ldr	r2, [sp, #4]
    1cfe:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    1d00:	9b01      	ldr	r3, [sp, #4]
    1d02:	2b00      	cmp	r3, #0
    1d04:	d0eb      	beq.n	1cde <raw_string_print+0x1e>
    1d06:	e7e2      	b.n	1cce <raw_string_print+0xe>

	if (eol) {
    1d08:	b90f      	cbnz	r7, 1d0e <raw_string_print+0x4e>
		print_formatted(output, "\r");
	}
}
    1d0a:	b003      	add	sp, #12
    1d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		print_formatted(output, "\r");
    1d0e:	4902      	ldr	r1, [pc, #8]	; (1d18 <raw_string_print+0x58>)
    1d10:	4620      	mov	r0, r4
    1d12:	f7ff fe95 	bl	1a40 <print_formatted>
}
    1d16:	e7f8      	b.n	1d0a <raw_string_print+0x4a>
    1d18:	0000ea34 	.word	0x0000ea34

00001d1c <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    1d1c:	b570      	push	{r4, r5, r6, lr}
    1d1e:	b082      	sub	sp, #8
    1d20:	4604      	mov	r4, r0
	char buf[5];
	int len;
	static const char prefix[] = DROPPED_COLOR_PREFIX "--- ";
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;
    1d22:	6805      	ldr	r5, [r0, #0]

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1d24:	f242 730f 	movw	r3, #9999	; 0x270f
    1d28:	428b      	cmp	r3, r1
    1d2a:	bf28      	it	cs
    1d2c:	460b      	movcs	r3, r1
    1d2e:	4a0e      	ldr	r2, [pc, #56]	; (1d68 <log_output_dropped_process+0x4c>)
    1d30:	2105      	movs	r1, #5
    1d32:	4668      	mov	r0, sp
    1d34:	f009 fc74 	bl	b620 <snprintk>
    1d38:	4606      	mov	r6, r0

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
		     output->control_block->ctx);
    1d3a:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    1d3c:	685b      	ldr	r3, [r3, #4]
    1d3e:	220b      	movs	r2, #11
    1d40:	490a      	ldr	r1, [pc, #40]	; (1d6c <log_output_dropped_process+0x50>)
    1d42:	4628      	mov	r0, r5
    1d44:	f00a fc31 	bl	c5aa <buffer_write>
	buffer_write(outf, buf, len, output->control_block->ctx);
    1d48:	6863      	ldr	r3, [r4, #4]
    1d4a:	685b      	ldr	r3, [r3, #4]
    1d4c:	4632      	mov	r2, r6
    1d4e:	4669      	mov	r1, sp
    1d50:	4628      	mov	r0, r5
    1d52:	f00a fc2a 	bl	c5aa <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
		     output->control_block->ctx);
    1d56:	6863      	ldr	r3, [r4, #4]
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    1d58:	685b      	ldr	r3, [r3, #4]
    1d5a:	221b      	movs	r2, #27
    1d5c:	4904      	ldr	r1, [pc, #16]	; (1d70 <log_output_dropped_process+0x54>)
    1d5e:	4628      	mov	r0, r5
    1d60:	f00a fc23 	bl	c5aa <buffer_write>
}
    1d64:	b002      	add	sp, #8
    1d66:	bd70      	pop	{r4, r5, r6, pc}
    1d68:	0000f5c4 	.word	0x0000f5c4
    1d6c:	0000ea88 	.word	0x0000ea88
    1d70:	0000ea6c 	.word	0x0000ea6c

00001d74 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    1d74:	4b07      	ldr	r3, [pc, #28]	; (1d94 <log_output_timestamp_freq_set+0x20>)
    1d76:	2201      	movs	r2, #1
    1d78:	601a      	str	r2, [r3, #0]
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    1d7a:	4b07      	ldr	r3, [pc, #28]	; (1d98 <log_output_timestamp_freq_set+0x24>)
    1d7c:	4298      	cmp	r0, r3
    1d7e:	d905      	bls.n	1d8c <log_output_timestamp_freq_set+0x18>
		frequency /= 2U;
    1d80:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    1d82:	4a04      	ldr	r2, [pc, #16]	; (1d94 <log_output_timestamp_freq_set+0x20>)
    1d84:	6813      	ldr	r3, [r2, #0]
    1d86:	005b      	lsls	r3, r3, #1
    1d88:	6013      	str	r3, [r2, #0]
    1d8a:	e7f6      	b.n	1d7a <log_output_timestamp_freq_set+0x6>
	}

	freq = frequency;
    1d8c:	4b03      	ldr	r3, [pc, #12]	; (1d9c <log_output_timestamp_freq_set+0x28>)
    1d8e:	6018      	str	r0, [r3, #0]
}
    1d90:	4770      	bx	lr
    1d92:	bf00      	nop
    1d94:	20000cbc 	.word	0x20000cbc
    1d98:	000f4240 	.word	0x000f4240
    1d9c:	20000cb8 	.word	0x20000cb8

00001da0 <char_out>:
static const char LOG_HEX_SEP[10] = "##ZLOGV1##";

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    1da0:	b570      	push	{r4, r5, r6, lr}
    1da2:	4606      	mov	r6, r0
    1da4:	460d      	mov	r5, r1
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
    1da6:	2400      	movs	r4, #0
    1da8:	42ac      	cmp	r4, r5
    1daa:	d207      	bcs.n	1dbc <char_out+0x1c>
		/* lower 8-bit */
		x = data[i] & 0x0FU;
		(void)hex2char(x, &c);
		uart_poll_out(uart_dev, c);
#else
		uart_poll_out(uart_dev, data[i]);
    1dac:	4b04      	ldr	r3, [pc, #16]	; (1dc0 <char_out+0x20>)
    1dae:	6818      	ldr	r0, [r3, #0]
    1db0:	5d31      	ldrb	r1, [r6, r4]
	const struct uart_driver_api *api =
    1db2:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    1db4:	685b      	ldr	r3, [r3, #4]
    1db6:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
    1db8:	3401      	adds	r4, #1
    1dba:	e7f5      	b.n	1da8 <char_out+0x8>
#endif
	}

	return length;
}
    1dbc:	4628      	mov	r0, r5
    1dbe:	bd70      	pop	{r4, r5, r6, pc}
    1dc0:	20000cd4 	.word	0x20000cd4

00001dc4 <log_backend_uart_init>:
	}
}

static void log_backend_uart_init(struct log_backend const *const backend)
{
	uart_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    1dc4:	4b01      	ldr	r3, [pc, #4]	; (1dcc <log_backend_uart_init+0x8>)
    1dc6:	4a02      	ldr	r2, [pc, #8]	; (1dd0 <log_backend_uart_init+0xc>)
    1dc8:	601a      	str	r2, [r3, #0]
		 */
		for (int i = 0; i < sizeof(LOG_HEX_SEP); i++) {
			uart_poll_out(uart_dev, LOG_HEX_SEP[i]);
		}
	}
}
    1dca:	4770      	bx	lr
    1dcc:	20000cd4 	.word	0x20000cd4
    1dd0:	0000e64c 	.word	0x0000e64c

00001dd4 <panic>:

static void panic(struct log_backend const *const backend)
{
    1dd4:	b508      	push	{r3, lr}
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    1dd6:	4802      	ldr	r0, [pc, #8]	; (1de0 <panic+0xc>)
    1dd8:	f00a fd8e 	bl	c8f8 <log_output_flush>
	log_backend_std_panic(&log_output_uart);
}
    1ddc:	bd08      	pop	{r3, pc}
    1dde:	bf00      	nop
    1de0:	0000ead8 	.word	0x0000ead8

00001de4 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
    1de4:	b508      	push	{r3, lr}
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    1de6:	4802      	ldr	r0, [pc, #8]	; (1df0 <dropped+0xc>)
    1de8:	f7ff ff98 	bl	1d1c <log_output_dropped_process>
	if (IS_ENABLED(CONFIG_LOG_BACKEND_UART_OUTPUT_DICTIONARY)) {
		log_dict_output_dropped_process(&log_output_uart, cnt);
	} else {
		log_backend_std_dropped(&log_output_uart, cnt);
	}
}
    1dec:	bd08      	pop	{r3, pc}
    1dee:	bf00      	nop
    1df0:	0000ead8 	.word	0x0000ead8

00001df4 <put>:
{
    1df4:	b510      	push	{r4, lr}
    1df6:	460c      	mov	r4, r1
	log_msg_get(msg);
    1df8:	4608      	mov	r0, r1
    1dfa:	f00a fb97 	bl	c52c <log_msg_get>
	log_output_msg_process(output, msg, flags);
    1dfe:	220f      	movs	r2, #15
    1e00:	4621      	mov	r1, r4
    1e02:	4803      	ldr	r0, [pc, #12]	; (1e10 <put+0x1c>)
    1e04:	f00a fda1 	bl	c94a <log_output_msg_process>
	log_msg_put(msg);
    1e08:	4620      	mov	r0, r4
    1e0a:	f00a fbb3 	bl	c574 <log_msg_put>
}
    1e0e:	bd10      	pop	{r4, pc}
    1e10:	0000ead8 	.word	0x0000ead8

00001e14 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    1e14:	4b01      	ldr	r3, [pc, #4]	; (1e1c <log_backend_rtt_init+0x8>)
    1e16:	2201      	movs	r2, #1
    1e18:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    1e1a:	4770      	bx	lr
    1e1c:	2000254c 	.word	0x2000254c

00001e20 <on_failed_write>:
{
    1e20:	b508      	push	{r3, lr}
	if (retry_cnt == 0) {
    1e22:	b918      	cbnz	r0, 1e2c <on_failed_write+0xc>
		host_present = false;
    1e24:	4b08      	ldr	r3, [pc, #32]	; (1e48 <on_failed_write+0x28>)
    1e26:	2200      	movs	r2, #0
    1e28:	701a      	strb	r2, [r3, #0]
}
    1e2a:	bd08      	pop	{r3, pc}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    1e2c:	4b07      	ldr	r3, [pc, #28]	; (1e4c <on_failed_write+0x2c>)
    1e2e:	781b      	ldrb	r3, [r3, #0]
	} else if (is_sync_mode()) {
    1e30:	b123      	cbz	r3, 1e3c <on_failed_write+0x1c>
	z_impl_k_busy_wait(usec_to_wait);
    1e32:	f241 3088 	movw	r0, #5000	; 0x1388
    1e36:	f00c fab1 	bl	e39c <z_impl_k_busy_wait>
}
    1e3a:	e7f6      	b.n	1e2a <on_failed_write+0xa>
	return z_impl_k_sleep(timeout);
    1e3c:	20a4      	movs	r0, #164	; 0xa4
    1e3e:	2100      	movs	r1, #0
    1e40:	f008 febc 	bl	abbc <z_impl_k_sleep>
}
    1e44:	e7f1      	b.n	1e2a <on_failed_write+0xa>
    1e46:	bf00      	nop
    1e48:	2000254c 	.word	0x2000254c
    1e4c:	2000254d 	.word	0x2000254d

00001e50 <on_write>:
{
    1e50:	b538      	push	{r3, r4, r5, lr}
    1e52:	4604      	mov	r4, r0
	host_present = true;
    1e54:	4b0a      	ldr	r3, [pc, #40]	; (1e80 <on_write+0x30>)
    1e56:	2201      	movs	r2, #1
    1e58:	701a      	strb	r2, [r3, #0]
	return panic_mode;
    1e5a:	4b0a      	ldr	r3, [pc, #40]	; (1e84 <on_write+0x34>)
    1e5c:	781b      	ldrb	r3, [r3, #0]
	if (is_panic_mode()) {
    1e5e:	b903      	cbnz	r3, 1e62 <on_write+0x12>
}
    1e60:	bd38      	pop	{r3, r4, r5, pc}
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    1e62:	2000      	movs	r0, #0
    1e64:	f007 fd3e 	bl	98e4 <SEGGER_RTT_HasDataUp>
    1e68:	2800      	cmp	r0, #0
    1e6a:	d0f9      	beq.n	1e60 <on_write+0x10>
    1e6c:	4b04      	ldr	r3, [pc, #16]	; (1e80 <on_write+0x30>)
    1e6e:	781b      	ldrb	r3, [r3, #0]
    1e70:	2b00      	cmp	r3, #0
    1e72:	d0f5      	beq.n	1e60 <on_write+0x10>
			on_failed_write(retry_cnt--);
    1e74:	1e65      	subs	r5, r4, #1
    1e76:	4620      	mov	r0, r4
    1e78:	f7ff ffd2 	bl	1e20 <on_failed_write>
    1e7c:	462c      	mov	r4, r5
    1e7e:	e7f0      	b.n	1e62 <on_write+0x12>
    1e80:	2000254c 	.word	0x2000254c
    1e84:	2000254d 	.word	0x2000254d

00001e88 <data_out_block_mode>:
{
    1e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1e8c:	4606      	mov	r6, r0
    1e8e:	460d      	mov	r5, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    1e90:	2704      	movs	r7, #4
    1e92:	e00d      	b.n	1eb0 <data_out_block_mode+0x28>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    1e94:	462a      	mov	r2, r5
    1e96:	4631      	mov	r1, r6
    1e98:	2000      	movs	r0, #0
    1e9a:	f007 fcbf 	bl	981c <SEGGER_RTT_WriteSkipNoLock>
    1e9e:	4604      	mov	r4, r0
    1ea0:	e01c      	b.n	1edc <data_out_block_mode+0x54>
			on_write(retry_cnt);
    1ea2:	4638      	mov	r0, r7
    1ea4:	f7ff ffd4 	bl	1e50 <on_write>
	} while ((ret == 0) && host_present);
    1ea8:	bb1c      	cbnz	r4, 1ef2 <data_out_block_mode+0x6a>
    1eaa:	4b16      	ldr	r3, [pc, #88]	; (1f04 <data_out_block_mode+0x7c>)
    1eac:	781b      	ldrb	r3, [r3, #0]
    1eae:	b303      	cbz	r3, 1ef2 <data_out_block_mode+0x6a>
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    1eb0:	4b15      	ldr	r3, [pc, #84]	; (1f08 <data_out_block_mode+0x80>)
    1eb2:	781b      	ldrb	r3, [r3, #0]
		if (!is_sync_mode()) {
    1eb4:	2b00      	cmp	r3, #0
    1eb6:	d1ed      	bne.n	1e94 <data_out_block_mode+0xc>
	return z_impl_k_mutex_lock(mutex, timeout);
    1eb8:	f8df 8050 	ldr.w	r8, [pc, #80]	; 1f0c <data_out_block_mode+0x84>
    1ebc:	f04f 32ff 	mov.w	r2, #4294967295
    1ec0:	f04f 33ff 	mov.w	r3, #4294967295
    1ec4:	4640      	mov	r0, r8
    1ec6:	f008 f831 	bl	9f2c <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    1eca:	462a      	mov	r2, r5
    1ecc:	4631      	mov	r1, r6
    1ece:	2000      	movs	r0, #0
    1ed0:	f007 fca4 	bl	981c <SEGGER_RTT_WriteSkipNoLock>
    1ed4:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    1ed6:	4640      	mov	r0, r8
    1ed8:	f008 f8b2 	bl	a040 <z_impl_k_mutex_unlock>
		if (ret) {
    1edc:	2c00      	cmp	r4, #0
    1ede:	d1e0      	bne.n	1ea2 <data_out_block_mode+0x1a>
		} else if (host_present) {
    1ee0:	4b08      	ldr	r3, [pc, #32]	; (1f04 <data_out_block_mode+0x7c>)
    1ee2:	781b      	ldrb	r3, [r3, #0]
    1ee4:	2b00      	cmp	r3, #0
    1ee6:	d0df      	beq.n	1ea8 <data_out_block_mode+0x20>
			retry_cnt--;
    1ee8:	3f01      	subs	r7, #1
			on_failed_write(retry_cnt);
    1eea:	4638      	mov	r0, r7
    1eec:	f7ff ff98 	bl	1e20 <on_failed_write>
    1ef0:	e7da      	b.n	1ea8 <data_out_block_mode+0x20>
	return ((ret == 0) && host_present) ? 0 : length;
    1ef2:	b914      	cbnz	r4, 1efa <data_out_block_mode+0x72>
    1ef4:	4b03      	ldr	r3, [pc, #12]	; (1f04 <data_out_block_mode+0x7c>)
    1ef6:	781b      	ldrb	r3, [r3, #0]
    1ef8:	b903      	cbnz	r3, 1efc <data_out_block_mode+0x74>
    1efa:	462c      	mov	r4, r5
}
    1efc:	4620      	mov	r0, r4
    1efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1f02:	bf00      	nop
    1f04:	2000254c 	.word	0x2000254c
    1f08:	2000254d 	.word	0x2000254d
    1f0c:	20000228 	.word	0x20000228

00001f10 <panic>:

static void panic(struct log_backend const *const backend)
{
    1f10:	b508      	push	{r3, lr}
	panic_mode = true;
    1f12:	4b03      	ldr	r3, [pc, #12]	; (1f20 <panic+0x10>)
    1f14:	2201      	movs	r2, #1
    1f16:	701a      	strb	r2, [r3, #0]
	log_output_flush(output);
    1f18:	4802      	ldr	r0, [pc, #8]	; (1f24 <panic+0x14>)
    1f1a:	f00a fced 	bl	c8f8 <log_output_flush>
	log_backend_std_panic(&log_output_rtt);
}
    1f1e:	bd08      	pop	{r3, pc}
    1f20:	2000254d 	.word	0x2000254d
    1f24:	0000eb14 	.word	0x0000eb14

00001f28 <dropped>:

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
    1f28:	b508      	push	{r3, lr}
	log_output_dropped_process(output, cnt);
    1f2a:	4802      	ldr	r0, [pc, #8]	; (1f34 <dropped+0xc>)
    1f2c:	f7ff fef6 	bl	1d1c <log_output_dropped_process>
	ARG_UNUSED(backend);

	log_backend_std_dropped(&log_output_rtt, cnt);
}
    1f30:	bd08      	pop	{r3, pc}
    1f32:	bf00      	nop
    1f34:	0000eb14 	.word	0x0000eb14

00001f38 <put>:
{
    1f38:	b510      	push	{r4, lr}
    1f3a:	460c      	mov	r4, r1
	log_msg_get(msg);
    1f3c:	4608      	mov	r0, r1
    1f3e:	f00a faf5 	bl	c52c <log_msg_get>
	log_output_msg_process(output, msg, flags);
    1f42:	220f      	movs	r2, #15
    1f44:	4621      	mov	r1, r4
    1f46:	4803      	ldr	r0, [pc, #12]	; (1f54 <put+0x1c>)
    1f48:	f00a fcff 	bl	c94a <log_output_msg_process>
	log_msg_put(msg);
    1f4c:	4620      	mov	r0, r4
    1f4e:	f00a fb11 	bl	c574 <log_msg_put>
}
    1f52:	bd10      	pop	{r4, pc}
    1f54:	0000eb14 	.word	0x0000eb14

00001f58 <usb_set_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
}

static bool usb_set_alt_setting(uint8_t iface, uint8_t alt_setting)
{
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    1f58:	2807      	cmp	r0, #7
    1f5a:	d901      	bls.n	1f60 <usb_set_alt_setting+0x8>
		usb_dev.alt_setting[iface] = alt_setting;
		return true;
	}

	return false;
    1f5c:	2000      	movs	r0, #0
}
    1f5e:	4770      	bx	lr
		usb_dev.alt_setting[iface] = alt_setting;
    1f60:	4b02      	ldr	r3, [pc, #8]	; (1f6c <usb_set_alt_setting+0x14>)
    1f62:	4418      	add	r0, r3
    1f64:	f880 10bb 	strb.w	r1, [r0, #187]	; 0xbb
		return true;
    1f68:	2001      	movs	r0, #1
    1f6a:	4770      	bx	lr
    1f6c:	20000cfc 	.word	0x20000cfc

00001f70 <usb_get_alt_setting>:

static uint8_t usb_get_alt_setting(uint8_t iface)
{
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    1f70:	2807      	cmp	r0, #7
    1f72:	d901      	bls.n	1f78 <usb_get_alt_setting+0x8>
		return usb_dev.alt_setting[iface];
	}

	return 0;
    1f74:	2000      	movs	r0, #0
}
    1f76:	4770      	bx	lr
		return usb_dev.alt_setting[iface];
    1f78:	4b02      	ldr	r3, [pc, #8]	; (1f84 <usb_get_alt_setting+0x14>)
    1f7a:	4418      	add	r0, r3
    1f7c:	f890 00bb 	ldrb.w	r0, [r0, #187]	; 0xbb
    1f80:	4770      	bx	lr
    1f82:	bf00      	nop
    1f84:	20000cfc 	.word	0x20000cfc

00001f88 <usb_handle_request>:
 *
 * @return true if the request was handles successfully
 */
static bool usb_handle_request(struct usb_setup_packet *setup,
			       int32_t *len, uint8_t **data)
{
    1f88:	b510      	push	{r4, lr}
	uint32_t type = setup->RequestType.type;
    1f8a:	7803      	ldrb	r3, [r0, #0]
    1f8c:	f3c3 1341 	ubfx	r3, r3, #5, #2
	if (type >= MAX_NUM_REQ_HANDLERS) {
		LOG_DBG("Error Incorrect iType %d", type);
		return false;
	}

	handler = usb_dev.req_handlers[type];
    1f90:	330a      	adds	r3, #10
    1f92:	4c06      	ldr	r4, [pc, #24]	; (1fac <usb_handle_request+0x24>)
    1f94:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
	if (handler == NULL) {
    1f98:	b123      	cbz	r3, 1fa4 <usb_handle_request+0x1c>
		LOG_DBG("No handler for reqtype %d", type);
		return false;
	}

	if ((*handler)(setup, len, data) < 0) {
    1f9a:	4798      	blx	r3
    1f9c:	2800      	cmp	r0, #0
    1f9e:	db03      	blt.n	1fa8 <usb_handle_request+0x20>
		LOG_DBG("Handler Error %d", type);
		usb_print_setup(setup);
		return false;
	}

	return true;
    1fa0:	2001      	movs	r0, #1
}
    1fa2:	bd10      	pop	{r4, pc}
		return false;
    1fa4:	2000      	movs	r0, #0
    1fa6:	e7fc      	b.n	1fa2 <usb_handle_request+0x1a>
		return false;
    1fa8:	2000      	movs	r0, #0
    1faa:	e7fa      	b.n	1fa2 <usb_handle_request+0x1a>
    1fac:	20000cfc 	.word	0x20000cfc

00001fb0 <usb_register_request_handler>:
 * @return N/A
 */
static void usb_register_request_handler(int32_t type,
					 usb_request_handler handler)
{
	usb_dev.req_handlers[type] = handler;
    1fb0:	300a      	adds	r0, #10
    1fb2:	4b02      	ldr	r3, [pc, #8]	; (1fbc <usb_register_request_handler+0xc>)
    1fb4:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    1fb8:	4770      	bx	lr
    1fba:	bf00      	nop
    1fbc:	20000cfc 	.word	0x20000cfc

00001fc0 <usb_register_descriptors>:
 *
 * @param [in] usb_descriptors The descriptor byte array
 */
static void usb_register_descriptors(const uint8_t *usb_descriptors)
{
	usb_dev.descriptors = usb_descriptors;
    1fc0:	4b01      	ldr	r3, [pc, #4]	; (1fc8 <usb_register_descriptors+0x8>)
    1fc2:	6258      	str	r0, [r3, #36]	; 0x24
}
    1fc4:	4770      	bx	lr
    1fc6:	bf00      	nop
    1fc8:	20000cfc 	.word	0x20000cfc

00001fcc <usb_get_descriptor>:
 *
 * @return true if the descriptor was found, false otherwise
 */
static bool usb_get_descriptor(struct usb_setup_packet *setup,
			       int32_t *len, uint8_t **data)
{
    1fcc:	b4f0      	push	{r4, r5, r6, r7}
	uint8_t *p = NULL;
	uint32_t cur_index = 0U;
	bool found = false;

	LOG_DBG("Get Descriptor request");
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    1fce:	8847      	ldrh	r7, [r0, #2]
    1fd0:	0a3d      	lsrs	r5, r7, #8

	/*
	 * Invalid types of descriptors,
	 * see USB Spec. Revision 2.0, 9.4.3 Get Descriptor
	 */
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    1fd2:	1f2b      	subs	r3, r5, #4
    1fd4:	b2db      	uxtb	r3, r3
    1fd6:	2b01      	cmp	r3, #1
    1fd8:	d91e      	bls.n	2018 <usb_get_descriptor+0x4c>
    1fda:	b2ff      	uxtb	r7, r7
    1fdc:	2d07      	cmp	r5, #7
    1fde:	d81e      	bhi.n	201e <usb_get_descriptor+0x52>
	    (type > USB_DESC_OTHER_SPEED)) {
		return false;
	}

	p = (uint8_t *)usb_dev.descriptors;
    1fe0:	4b10      	ldr	r3, [pc, #64]	; (2024 <usb_get_descriptor+0x58>)
    1fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	cur_index = 0U;
    1fe4:	2600      	movs	r6, #0

	while (p[DESC_bLength] != 0U) {
    1fe6:	e000      	b.n	1fea <usb_get_descriptor+0x1e>
				break;
			}
			cur_index++;
		}
		/* skip to next descriptor */
		p += p[DESC_bLength];
    1fe8:	4403      	add	r3, r0
	while (p[DESC_bLength] != 0U) {
    1fea:	7818      	ldrb	r0, [r3, #0]
    1fec:	b138      	cbz	r0, 1ffe <usb_get_descriptor+0x32>
		if (p[DESC_bDescriptorType] == type) {
    1fee:	785c      	ldrb	r4, [r3, #1]
    1ff0:	42ac      	cmp	r4, r5
    1ff2:	d1f9      	bne.n	1fe8 <usb_get_descriptor+0x1c>
			if (cur_index == index) {
    1ff4:	42b7      	cmp	r7, r6
    1ff6:	d001      	beq.n	1ffc <usb_get_descriptor+0x30>
			cur_index++;
    1ff8:	3601      	adds	r6, #1
    1ffa:	e7f5      	b.n	1fe8 <usb_get_descriptor+0x1c>
				found = true;
    1ffc:	2001      	movs	r0, #1
	}

	if (found) {
    1ffe:	b160      	cbz	r0, 201a <usb_get_descriptor+0x4e>
		/* set data pointer */
		*data = p;
    2000:	6013      	str	r3, [r2, #0]
		/* get length from structure */
		if (type == USB_DESC_CONFIGURATION) {
    2002:	2d02      	cmp	r5, #2
    2004:	d002      	beq.n	200c <usb_get_descriptor+0x40>
			 */
			*len = (p[CONF_DESC_wTotalLength]) |
			    (p[CONF_DESC_wTotalLength + 1] << 8);
		} else {
			/* normally length is at offset 0 */
			*len = p[DESC_bLength];
    2006:	781b      	ldrb	r3, [r3, #0]
    2008:	600b      	str	r3, [r1, #0]
    200a:	e006      	b.n	201a <usb_get_descriptor+0x4e>
			*len = (p[CONF_DESC_wTotalLength]) |
    200c:	789a      	ldrb	r2, [r3, #2]
			    (p[CONF_DESC_wTotalLength + 1] << 8);
    200e:	78db      	ldrb	r3, [r3, #3]
			*len = (p[CONF_DESC_wTotalLength]) |
    2010:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    2014:	600b      	str	r3, [r1, #0]
    2016:	e000      	b.n	201a <usb_get_descriptor+0x4e>
		return false;
    2018:	2000      	movs	r0, #0
	} else {
		/* nothing found */
		LOG_DBG("Desc %x not found!", setup->wValue);
	}
	return found;
}
    201a:	bcf0      	pop	{r4, r5, r6, r7}
    201c:	4770      	bx	lr
		return false;
    201e:	2000      	movs	r0, #0
    2020:	e7fb      	b.n	201a <usb_get_descriptor+0x4e>
    2022:	bf00      	nop
    2024:	20000cfc 	.word	0x20000cfc

00002028 <usb_get_interface>:
	return ret;
}

static bool usb_get_interface(struct usb_setup_packet *setup,
			      int32_t *len, uint8_t **data_buf)
{
    2028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    202a:	4684      	mov	ip, r0
    202c:	460e      	mov	r6, r1
	const uint8_t *p = usb_dev.descriptors;
    202e:	4b0c      	ldr	r3, [pc, #48]	; (2060 <usb_get_interface+0x38>)
    2030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	uint8_t *data = *data_buf;
    2032:	6817      	ldr	r7, [r2, #0]
	uint8_t cur_iface;

	while (p[DESC_bLength] != 0U) {
    2034:	e000      	b.n	2038 <usb_get_interface+0x10>
				return true;
			}
		}

		/* skip to next descriptor */
		p += p[DESC_bLength];
    2036:	4413      	add	r3, r2
	while (p[DESC_bLength] != 0U) {
    2038:	781a      	ldrb	r2, [r3, #0]
    203a:	b172      	cbz	r2, 205a <usb_get_interface+0x32>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    203c:	785c      	ldrb	r4, [r3, #1]
    203e:	2c04      	cmp	r4, #4
    2040:	d1f9      	bne.n	2036 <usb_get_interface+0xe>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    2042:	7898      	ldrb	r0, [r3, #2]
			if (cur_iface == setup->wIndex) {
    2044:	b285      	uxth	r5, r0
    2046:	f8bc 4004 	ldrh.w	r4, [ip, #4]
    204a:	42a5      	cmp	r5, r4
    204c:	d1f3      	bne.n	2036 <usb_get_interface+0xe>
				data[0] = usb_get_alt_setting(cur_iface);
    204e:	f7ff ff8f 	bl	1f70 <usb_get_alt_setting>
    2052:	7038      	strb	r0, [r7, #0]
				*len = 1;
    2054:	2001      	movs	r0, #1
    2056:	6030      	str	r0, [r6, #0]
				return true;
    2058:	e000      	b.n	205c <usb_get_interface+0x34>
	}

	return false;
    205a:	2000      	movs	r0, #0
}
    205c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    205e:	bf00      	nop
    2060:	20000cfc 	.word	0x20000cfc

00002064 <is_device_configured>:
 *
 * @return true if Configured, false otherwise.
 */
static bool is_device_configured(void)
{
	return (usb_dev.configuration != 0);
    2064:	4b03      	ldr	r3, [pc, #12]	; (2074 <is_device_configured+0x10>)
    2066:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
}
    206a:	3800      	subs	r0, #0
    206c:	bf18      	it	ne
    206e:	2001      	movne	r0, #1
    2070:	4770      	bx	lr
    2072:	bf00      	nop
    2074:	20000cfc 	.word	0x20000cfc

00002078 <is_interface_valid>:
 *
 * @return true if interface exists - valid
 */
static bool is_interface_valid(uint8_t interface)
{
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    2078:	4b07      	ldr	r3, [pc, #28]	; (2098 <is_interface_valid+0x20>)
    207a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	const struct usb_cfg_descriptor *cfg_descr;

	/* Search through descriptor for matching interface */
	while (p[DESC_bLength] != 0U) {
    207c:	e000      	b.n	2080 <is_interface_valid+0x8>
			cfg_descr = (const struct usb_cfg_descriptor *)p;
			if (interface < cfg_descr->bNumInterfaces) {
				return true;
			}
		}
		p += p[DESC_bLength];
    207e:	4413      	add	r3, r2
	while (p[DESC_bLength] != 0U) {
    2080:	781a      	ldrb	r2, [r3, #0]
    2082:	b13a      	cbz	r2, 2094 <is_interface_valid+0x1c>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    2084:	7859      	ldrb	r1, [r3, #1]
    2086:	2902      	cmp	r1, #2
    2088:	d1f9      	bne.n	207e <is_interface_valid+0x6>
			if (interface < cfg_descr->bNumInterfaces) {
    208a:	7919      	ldrb	r1, [r3, #4]
    208c:	4281      	cmp	r1, r0
    208e:	d9f6      	bls.n	207e <is_interface_valid+0x6>
				return true;
    2090:	2001      	movs	r0, #1
	}

	return false;
}
    2092:	4770      	bx	lr
	return false;
    2094:	2000      	movs	r0, #0
    2096:	4770      	bx	lr
    2098:	20000cfc 	.word	0x20000cfc

0000209c <is_ep_valid>:
 * either Control Endpoint or one used by the device.
 *
 * @return true if endpoint exists - valid
 */
static bool is_ep_valid(uint8_t ep)
{
    209c:	b470      	push	{r4, r5, r6}
	size_t size = (__usb_data_end - __usb_data_start);
    209e:	4b16      	ldr	r3, [pc, #88]	; (20f8 <is_ep_valid+0x5c>)
    20a0:	4a16      	ldr	r2, [pc, #88]	; (20fc <is_ep_valid+0x60>)
    20a2:	1a9b      	subs	r3, r3, r2
    20a4:	109b      	asrs	r3, r3, #2
    20a6:	4e16      	ldr	r6, [pc, #88]	; (2100 <is_ep_valid+0x64>)
    20a8:	fb06 f603 	mul.w	r6, r6, r3
	const struct usb_ep_cfg_data *ep_data;
	const struct usb_cfg_data *cfg;

	/* Check if its Endpoint 0 */
	if (USB_EP_GET_IDX(ep) == 0) {
    20ac:	f030 0380 	bics.w	r3, r0, #128	; 0x80
    20b0:	d01d      	beq.n	20ee <is_ep_valid+0x52>
		return true;
	}

	for (size_t i = 0; i < size; i++) {
    20b2:	2400      	movs	r4, #0
    20b4:	42b4      	cmp	r4, r6
    20b6:	d218      	bcs.n	20ea <is_ep_valid+0x4e>
		cfg = &__usb_data_start[i];
		ep_data = cfg->endpoint;
    20b8:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    20bc:	4b0f      	ldr	r3, [pc, #60]	; (20fc <is_ep_valid+0x60>)
    20be:	eb03 0282 	add.w	r2, r3, r2, lsl #2
    20c2:	6a15      	ldr	r5, [r2, #32]

		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
    20c4:	2300      	movs	r3, #0
    20c6:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    20ca:	490c      	ldr	r1, [pc, #48]	; (20fc <is_ep_valid+0x60>)
    20cc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    20d0:	7f12      	ldrb	r2, [r2, #28]
    20d2:	429a      	cmp	r2, r3
    20d4:	d907      	bls.n	20e6 <is_ep_valid+0x4a>
			if (ep_data[n].ep_addr == ep) {
    20d6:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    20da:	7912      	ldrb	r2, [r2, #4]
    20dc:	4282      	cmp	r2, r0
    20de:	d008      	beq.n	20f2 <is_ep_valid+0x56>
		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
    20e0:	3301      	adds	r3, #1
    20e2:	b2db      	uxtb	r3, r3
    20e4:	e7ef      	b.n	20c6 <is_ep_valid+0x2a>
	for (size_t i = 0; i < size; i++) {
    20e6:	3401      	adds	r4, #1
    20e8:	e7e4      	b.n	20b4 <is_ep_valid+0x18>
				return true;
			}
		}
	}

	return false;
    20ea:	2000      	movs	r0, #0
    20ec:	e002      	b.n	20f4 <is_ep_valid+0x58>
		return true;
    20ee:	2001      	movs	r0, #1
    20f0:	e000      	b.n	20f4 <is_ep_valid+0x58>
				return true;
    20f2:	2001      	movs	r0, #1
}
    20f4:	bc70      	pop	{r4, r5, r6}
    20f6:	4770      	bx	lr
    20f8:	20000368 	.word	0x20000368
    20fc:	20000344 	.word	0x20000344
    2100:	38e38e39 	.word	0x38e38e39

00002104 <usb_register_custom_req_handler>:
 *
 * @param [in] handler Callback function pointer
 */
static void usb_register_custom_req_handler(usb_request_handler handler)
{
	usb_dev.custom_req_handler = handler;
    2104:	4b01      	ldr	r3, [pc, #4]	; (210c <usb_register_custom_req_handler+0x8>)
    2106:	6198      	str	r0, [r3, #24]
}
    2108:	4770      	bx	lr
    210a:	bf00      	nop
    210c:	20000cfc 	.word	0x20000cfc

00002110 <usb_register_status_callback>:
 *
 * @param [in] cb Callback function pointer
 */
static void usb_register_status_callback(usb_dc_status_callback cb)
{
	usb_dev.status_callback = cb;
    2110:	4b01      	ldr	r3, [pc, #4]	; (2118 <usb_register_status_callback+0x8>)
    2112:	61d8      	str	r0, [r3, #28]
}
    2114:	4770      	bx	lr
    2116:	bf00      	nop
    2118:	20000cfc 	.word	0x20000cfc

0000211c <foreach_ep>:

static int foreach_ep(int (* endpoint_callback)(const struct usb_ep_cfg_data *))
{
    211c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2120:	4606      	mov	r6, r0
	size_t size = (__usb_data_end - __usb_data_start);
    2122:	4b14      	ldr	r3, [pc, #80]	; (2174 <foreach_ep+0x58>)
    2124:	4a14      	ldr	r2, [pc, #80]	; (2178 <foreach_ep+0x5c>)
    2126:	eba3 0802 	sub.w	r8, r3, r2
    212a:	ea4f 03a8 	mov.w	r3, r8, asr #2
    212e:	4a13      	ldr	r2, [pc, #76]	; (217c <foreach_ep+0x60>)
    2130:	fb02 f803 	mul.w	r8, r2, r3

	for (size_t i = 0; i < size; i++) {
    2134:	2500      	movs	r5, #0
    2136:	4545      	cmp	r5, r8
    2138:	d218      	bcs.n	216c <foreach_ep+0x50>
		struct usb_cfg_data *cfg = &__usb_data_start[i];
		struct usb_ep_cfg_data *ep_data = cfg->endpoint;
    213a:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    213e:	4a0e      	ldr	r2, [pc, #56]	; (2178 <foreach_ep+0x5c>)
    2140:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2144:	6a1f      	ldr	r7, [r3, #32]

		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
    2146:	2400      	movs	r4, #0
    2148:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    214c:	4a0a      	ldr	r2, [pc, #40]	; (2178 <foreach_ep+0x5c>)
    214e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    2152:	7f1b      	ldrb	r3, [r3, #28]
    2154:	42a3      	cmp	r3, r4
    2156:	d907      	bls.n	2168 <foreach_ep+0x4c>
			int ret;

			ret = endpoint_callback(&ep_data[n]);
    2158:	eb07 00c4 	add.w	r0, r7, r4, lsl #3
    215c:	47b0      	blx	r6
			if (ret < 0) {
    215e:	2800      	cmp	r0, #0
    2160:	db05      	blt.n	216e <foreach_ep+0x52>
		for (uint8_t n = 0; n < cfg->num_endpoints; n++) {
    2162:	3401      	adds	r4, #1
    2164:	b2e4      	uxtb	r4, r4
    2166:	e7ef      	b.n	2148 <foreach_ep+0x2c>
	for (size_t i = 0; i < size; i++) {
    2168:	3501      	adds	r5, #1
    216a:	e7e4      	b.n	2136 <foreach_ep+0x1a>
				return ret;
			}
		}
	}

	return 0;
    216c:	2000      	movs	r0, #0
}
    216e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2172:	bf00      	nop
    2174:	20000368 	.word	0x20000368
    2178:	20000344 	.word	0x20000344
    217c:	38e38e39 	.word	0x38e38e39

00002180 <class_handler>:
 * usb_enable() is no longer needed.
 */

static int class_handler(struct usb_setup_packet *pSetup,
			 int32_t *len, uint8_t **data)
{
    2180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	size_t size = (__usb_data_end - __usb_data_start);
    2182:	4f13      	ldr	r7, [pc, #76]	; (21d0 <class_handler+0x50>)
    2184:	4b13      	ldr	r3, [pc, #76]	; (21d4 <class_handler+0x54>)
    2186:	1aff      	subs	r7, r7, r3
    2188:	10bb      	asrs	r3, r7, #2
    218a:	4f13      	ldr	r7, [pc, #76]	; (21d8 <class_handler+0x58>)
    218c:	fb07 f703 	mul.w	r7, r7, r3
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	for (size_t i = 0; i < size; i++) {
    2190:	2300      	movs	r3, #0
    2192:	e000      	b.n	2196 <class_handler+0x16>
    2194:	3301      	adds	r3, #1
    2196:	42bb      	cmp	r3, r7
    2198:	d216      	bcs.n	21c8 <class_handler+0x48>
		iface = &(__usb_data_start[i].interface);
		if_descr = __usb_data_start[i].interface_descriptor;
    219a:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
    219e:	4d0d      	ldr	r5, [pc, #52]	; (21d4 <class_handler+0x54>)
    21a0:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    21a4:	6866      	ldr	r6, [r4, #4]
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    21a6:	4c0d      	ldr	r4, [pc, #52]	; (21dc <class_handler+0x5c>)
    21a8:	6a64      	ldr	r4, [r4, #36]	; 0x24
    21aa:	42a6      	cmp	r6, r4
    21ac:	d3f2      	bcc.n	2194 <class_handler+0x14>
			continue;
		}

		if (iface->class_handler &&
    21ae:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
    21b2:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    21b6:	6924      	ldr	r4, [r4, #16]
    21b8:	2c00      	cmp	r4, #0
    21ba:	d0eb      	beq.n	2194 <class_handler+0x14>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    21bc:	78b6      	ldrb	r6, [r6, #2]
    21be:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
    21c0:	42ae      	cmp	r6, r5
    21c2:	d1e7      	bne.n	2194 <class_handler+0x14>
			return iface->class_handler(pSetup, len, data);
    21c4:	47a0      	blx	r4
    21c6:	e001      	b.n	21cc <class_handler+0x4c>
		}
	}

	return -ENOTSUP;
    21c8:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    21cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    21ce:	bf00      	nop
    21d0:	20000368 	.word	0x20000368
    21d4:	20000344 	.word	0x20000344
    21d8:	38e38e39 	.word	0x38e38e39
    21dc:	20000cfc 	.word	0x20000cfc

000021e0 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    21e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    21e4:	4607      	mov	r7, r0
    21e6:	4688      	mov	r8, r1
    21e8:	4691      	mov	r9, r2
	size_t size = (__usb_data_end - __usb_data_start);
    21ea:	4e19      	ldr	r6, [pc, #100]	; (2250 <custom_handler+0x70>)
    21ec:	4b19      	ldr	r3, [pc, #100]	; (2254 <custom_handler+0x74>)
    21ee:	1af6      	subs	r6, r6, r3
    21f0:	10b3      	asrs	r3, r6, #2
    21f2:	4e19      	ldr	r6, [pc, #100]	; (2258 <custom_handler+0x78>)
    21f4:	fb06 f603 	mul.w	r6, r6, r3
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	for (size_t i = 0; i < size; i++) {
    21f8:	2400      	movs	r4, #0
    21fa:	e005      	b.n	2208 <custom_handler+0x28>
		if (iface->custom_handler == NULL) {
			continue;
		}

		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
			return iface->custom_handler(pSetup, len, data);
    21fc:	464a      	mov	r2, r9
    21fe:	4641      	mov	r1, r8
    2200:	4638      	mov	r0, r7
    2202:	47a8      	blx	r5
    2204:	e021      	b.n	224a <custom_handler+0x6a>
	for (size_t i = 0; i < size; i++) {
    2206:	3401      	adds	r4, #1
    2208:	42a6      	cmp	r6, r4
    220a:	d91c      	bls.n	2246 <custom_handler+0x66>
		if_descr = __usb_data_start[i].interface_descriptor;
    220c:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    2210:	4d10      	ldr	r5, [pc, #64]	; (2254 <custom_handler+0x74>)
    2212:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    2216:	685b      	ldr	r3, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    2218:	4a10      	ldr	r2, [pc, #64]	; (225c <custom_handler+0x7c>)
    221a:	6a52      	ldr	r2, [r2, #36]	; 0x24
    221c:	4293      	cmp	r3, r2
    221e:	d3f2      	bcc.n	2206 <custom_handler+0x26>
		if (iface->custom_handler == NULL) {
    2220:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    2224:	eb05 0282 	add.w	r2, r5, r2, lsl #2
    2228:	6995      	ldr	r5, [r2, #24]
    222a:	2d00      	cmp	r5, #0
    222c:	d0eb      	beq.n	2206 <custom_handler+0x26>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    222e:	7899      	ldrb	r1, [r3, #2]
    2230:	793a      	ldrb	r2, [r7, #4]
    2232:	4291      	cmp	r1, r2
    2234:	d0e2      	beq.n	21fc <custom_handler+0x1c>
			 * the first interface, but the request may be for
			 * subsequent ones, so forward each request to audio.
			 * The class does not actively engage in request
			 * handling and therefore we can ignore return value.
			 */
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    2236:	795b      	ldrb	r3, [r3, #5]
    2238:	2b01      	cmp	r3, #1
    223a:	d1e4      	bne.n	2206 <custom_handler+0x26>
				(void)iface->custom_handler(pSetup, len, data);
    223c:	464a      	mov	r2, r9
    223e:	4641      	mov	r1, r8
    2240:	4638      	mov	r0, r7
    2242:	47a8      	blx	r5
    2244:	e7df      	b.n	2206 <custom_handler+0x26>
			}
		}
	}

	return -ENOTSUP;
    2246:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    224a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    224e:	bf00      	nop
    2250:	20000368 	.word	0x20000368
    2254:	20000344 	.word	0x20000344
    2258:	38e38e39 	.word	0x38e38e39
    225c:	20000cfc 	.word	0x20000cfc

00002260 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    2260:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2264:	4681      	mov	r9, r0
    2266:	4688      	mov	r8, r1
    2268:	4617      	mov	r7, r2
	size_t size = (__usb_data_end - __usb_data_start);
    226a:	4e10      	ldr	r6, [pc, #64]	; (22ac <vendor_handler+0x4c>)
    226c:	4b10      	ldr	r3, [pc, #64]	; (22b0 <vendor_handler+0x50>)
    226e:	1af6      	subs	r6, r6, r3
    2270:	10b3      	asrs	r3, r6, #2
    2272:	4e10      	ldr	r6, [pc, #64]	; (22b4 <vendor_handler+0x54>)
    2274:	fb06 f603 	mul.w	r6, r6, r3
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	for (size_t i = 0; i < size; i++) {
    2278:	2400      	movs	r4, #0
    227a:	e000      	b.n	227e <vendor_handler+0x1e>
    227c:	3401      	adds	r4, #1
    227e:	42a6      	cmp	r6, r4
    2280:	d90f      	bls.n	22a2 <vendor_handler+0x42>
		iface = &(__usb_data_start[i].interface);
		if (iface->vendor_handler) {
    2282:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    2286:	4d0a      	ldr	r5, [pc, #40]	; (22b0 <vendor_handler+0x50>)
    2288:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    228c:	695b      	ldr	r3, [r3, #20]
    228e:	2b00      	cmp	r3, #0
    2290:	d0f4      	beq.n	227c <vendor_handler+0x1c>
			if (!iface->vendor_handler(pSetup, len, data)) {
    2292:	463a      	mov	r2, r7
    2294:	4641      	mov	r1, r8
    2296:	4648      	mov	r0, r9
    2298:	4798      	blx	r3
    229a:	4603      	mov	r3, r0
    229c:	2800      	cmp	r0, #0
    229e:	d1ed      	bne.n	227c <vendor_handler+0x1c>
    22a0:	e001      	b.n	22a6 <vendor_handler+0x46>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    22a2:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    22a6:	4618      	mov	r0, r3
    22a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    22ac:	20000368 	.word	0x20000368
    22b0:	20000344 	.word	0x20000344
    22b4:	38e38e39 	.word	0x38e38e39

000022b8 <usb_halt_endpoint_req>:
{
    22b8:	b570      	push	{r4, r5, r6, lr}
    22ba:	b082      	sub	sp, #8
    22bc:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    22be:	7904      	ldrb	r4, [r0, #4]
    22c0:	f88d 4007 	strb.w	r4, [sp, #7]
	if (!is_ep_valid(ep)) {
    22c4:	4620      	mov	r0, r4
    22c6:	f7ff fee9 	bl	209c <is_ep_valid>
    22ca:	4606      	mov	r6, r0
    22cc:	b130      	cbz	r0, 22dc <usb_halt_endpoint_req+0x24>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    22ce:	f034 0380 	bics.w	r3, r4, #128	; 0x80
    22d2:	d006      	beq.n	22e2 <usb_halt_endpoint_req+0x2a>
    22d4:	f7ff fec6 	bl	2064 <is_device_configured>
    22d8:	b918      	cbnz	r0, 22e2 <usb_halt_endpoint_req+0x2a>
	return false;
    22da:	4606      	mov	r6, r0
}
    22dc:	4630      	mov	r0, r6
    22de:	b002      	add	sp, #8
    22e0:	bd70      	pop	{r4, r5, r6, pc}
		if (halt) {
    22e2:	b15d      	cbz	r5, 22fc <usb_halt_endpoint_req+0x44>
			usb_dc_ep_set_stall(ep);
    22e4:	4620      	mov	r0, r4
    22e6:	f003 fb8f 	bl	5a08 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    22ea:	4b0a      	ldr	r3, [pc, #40]	; (2314 <usb_halt_endpoint_req+0x5c>)
    22ec:	69db      	ldr	r3, [r3, #28]
    22ee:	2b00      	cmp	r3, #0
    22f0:	d0f4      	beq.n	22dc <usb_halt_endpoint_req+0x24>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    22f2:	f10d 0107 	add.w	r1, sp, #7
    22f6:	2008      	movs	r0, #8
    22f8:	4798      	blx	r3
    22fa:	e7ef      	b.n	22dc <usb_halt_endpoint_req+0x24>
			usb_dc_ep_clear_stall(ep);
    22fc:	4620      	mov	r0, r4
    22fe:	f003 fbc9 	bl	5a94 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    2302:	4b04      	ldr	r3, [pc, #16]	; (2314 <usb_halt_endpoint_req+0x5c>)
    2304:	69db      	ldr	r3, [r3, #28]
    2306:	2b00      	cmp	r3, #0
    2308:	d0e8      	beq.n	22dc <usb_halt_endpoint_req+0x24>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    230a:	f10d 0107 	add.w	r1, sp, #7
    230e:	2009      	movs	r0, #9
    2310:	4798      	blx	r3
		return true;
    2312:	e7e3      	b.n	22dc <usb_halt_endpoint_req+0x24>
    2314:	20000cfc 	.word	0x20000cfc

00002318 <set_endpoint>:
{
    2318:	b500      	push	{lr}
    231a:	b083      	sub	sp, #12
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    231c:	7883      	ldrb	r3, [r0, #2]
    231e:	f88d 3000 	strb.w	r3, [sp]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    2322:	8883      	ldrh	r3, [r0, #4]
    2324:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    2328:	78c3      	ldrb	r3, [r0, #3]
    232a:	f003 0303 	and.w	r3, r3, #3
    232e:	f88d 3004 	strb.w	r3, [sp, #4]
	ret = usb_dc_ep_configure(&ep_cfg);
    2332:	4668      	mov	r0, sp
    2334:	f003 fb2a 	bl	598c <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    2338:	f110 0f78 	cmn.w	r0, #120	; 0x78
    233c:	d000      	beq.n	2340 <set_endpoint+0x28>
	} else if (ret) {
    233e:	b970      	cbnz	r0, 235e <set_endpoint+0x46>
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    2340:	f89d 0000 	ldrb.w	r0, [sp]
    2344:	f003 fbf0 	bl	5b28 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    2348:	f110 0f78 	cmn.w	r0, #120	; 0x78
    234c:	d000      	beq.n	2350 <set_endpoint+0x38>
	} else if (ret) {
    234e:	b9d0      	cbnz	r0, 2386 <set_endpoint+0x6e>
	usb_dev.configured = true;
    2350:	2001      	movs	r0, #1
    2352:	4b17      	ldr	r3, [pc, #92]	; (23b0 <set_endpoint+0x98>)
    2354:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
}
    2358:	b003      	add	sp, #12
    235a:	f85d fb04 	ldr.w	pc, [sp], #4
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    235e:	4b15      	ldr	r3, [pc, #84]	; (23b4 <set_endpoint+0x9c>)
    2360:	4a15      	ldr	r2, [pc, #84]	; (23b8 <set_endpoint+0xa0>)
    2362:	1a9b      	subs	r3, r3, r2
    2364:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
    2366:	f04f 0200 	mov.w	r2, #0
    236a:	2101      	movs	r1, #1
    236c:	f361 0202 	bfi	r2, r1, #0, #3
    2370:	f36f 02c5 	bfc	r2, #3, #3
    2374:	f363 128f 	bfi	r2, r3, #6, #10
    2378:	f89d 1000 	ldrb.w	r1, [sp]
    237c:	480f      	ldr	r0, [pc, #60]	; (23bc <set_endpoint+0xa4>)
    237e:	f7ff f9ab 	bl	16d8 <log_1>
		return false;
    2382:	2000      	movs	r0, #0
    2384:	e7e8      	b.n	2358 <set_endpoint+0x40>
    2386:	4b0b      	ldr	r3, [pc, #44]	; (23b4 <set_endpoint+0x9c>)
    2388:	4a0b      	ldr	r2, [pc, #44]	; (23b8 <set_endpoint+0xa0>)
    238a:	1a9b      	subs	r3, r3, r2
    238c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    238e:	f04f 0200 	mov.w	r2, #0
    2392:	2101      	movs	r1, #1
    2394:	f361 0202 	bfi	r2, r1, #0, #3
    2398:	f36f 02c5 	bfc	r2, #3, #3
    239c:	f363 128f 	bfi	r2, r3, #6, #10
    23a0:	f89d 1000 	ldrb.w	r1, [sp]
    23a4:	4806      	ldr	r0, [pc, #24]	; (23c0 <set_endpoint+0xa8>)
    23a6:	f7ff f997 	bl	16d8 <log_1>
		return false;
    23aa:	2000      	movs	r0, #0
    23ac:	e7d4      	b.n	2358 <set_endpoint+0x40>
    23ae:	bf00      	nop
    23b0:	20000cfc 	.word	0x20000cfc
    23b4:	0000e87c 	.word	0x0000e87c
    23b8:	0000e82c 	.word	0x0000e82c
    23bc:	0000eb24 	.word	0x0000eb24
    23c0:	0000eb48 	.word	0x0000eb48

000023c4 <usb_reset_alt_setting>:
{
    23c4:	b508      	push	{r3, lr}
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    23c6:	2208      	movs	r2, #8
    23c8:	2100      	movs	r1, #0
    23ca:	4802      	ldr	r0, [pc, #8]	; (23d4 <usb_reset_alt_setting+0x10>)
    23cc:	f00a fe7f 	bl	d0ce <memset>
}
    23d0:	bd08      	pop	{r3, pc}
    23d2:	bf00      	nop
    23d4:	20000db7 	.word	0x20000db7

000023d8 <usb_set_configuration>:
{
    23d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    23dc:	4605      	mov	r5, r0
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    23de:	4b23      	ldr	r3, [pc, #140]	; (246c <usb_set_configuration+0x94>)
    23e0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	if (setup->wValue == 0U) {
    23e2:	8843      	ldrh	r3, [r0, #2]
    23e4:	b11b      	cbz	r3, 23ee <usb_set_configuration+0x16>
	bool found = false;
    23e6:	2700      	movs	r7, #0
	uint8_t cur_config = 0xFF;
    23e8:	26ff      	movs	r6, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    23ea:	46b0      	mov	r8, r6
    23ec:	e010      	b.n	2410 <usb_set_configuration+0x38>
		usb_reset_alt_setting();
    23ee:	f7ff ffe9 	bl	23c4 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    23f2:	886a      	ldrh	r2, [r5, #2]
    23f4:	4b1d      	ldr	r3, [pc, #116]	; (246c <usb_set_configuration+0x94>)
    23f6:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		if (usb_dev.status_callback) {
    23fa:	69db      	ldr	r3, [r3, #28]
    23fc:	b113      	cbz	r3, 2404 <usb_set_configuration+0x2c>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    23fe:	491c      	ldr	r1, [pc, #112]	; (2470 <usb_set_configuration+0x98>)
    2400:	2003      	movs	r0, #3
    2402:	4798      	blx	r3
		return true;
    2404:	2701      	movs	r7, #1
    2406:	e020      	b.n	244a <usb_set_configuration+0x72>
			cur_alt_setting =
    2408:	f894 8003 	ldrb.w	r8, [r4, #3]
		p += p[DESC_bLength];
    240c:	7823      	ldrb	r3, [r4, #0]
    240e:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
    2410:	7823      	ldrb	r3, [r4, #0]
    2412:	b1cb      	cbz	r3, 2448 <usb_set_configuration+0x70>
		switch (p[DESC_bDescriptorType]) {
    2414:	7863      	ldrb	r3, [r4, #1]
    2416:	2b04      	cmp	r3, #4
    2418:	d0f6      	beq.n	2408 <usb_set_configuration+0x30>
    241a:	2b05      	cmp	r3, #5
    241c:	d008      	beq.n	2430 <usb_set_configuration+0x58>
    241e:	2b02      	cmp	r3, #2
    2420:	d1f4      	bne.n	240c <usb_set_configuration+0x34>
			cur_config = p[CONF_DESC_bConfigurationValue];
    2422:	7966      	ldrb	r6, [r4, #5]
			if (cur_config == setup->wValue) {
    2424:	b2b2      	uxth	r2, r6
    2426:	886b      	ldrh	r3, [r5, #2]
    2428:	429a      	cmp	r2, r3
    242a:	d1ef      	bne.n	240c <usb_set_configuration+0x34>
				found = true;
    242c:	2701      	movs	r7, #1
    242e:	e7ed      	b.n	240c <usb_set_configuration+0x34>
			if ((cur_config != setup->wValue) ||
    2430:	b2b3      	uxth	r3, r6
    2432:	886a      	ldrh	r2, [r5, #2]
    2434:	4293      	cmp	r3, r2
    2436:	d1e9      	bne.n	240c <usb_set_configuration+0x34>
    2438:	f1b8 0f00 	cmp.w	r8, #0
    243c:	d1e6      	bne.n	240c <usb_set_configuration+0x34>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    243e:	4620      	mov	r0, r4
    2440:	f7ff ff6a 	bl	2318 <set_endpoint>
    2444:	4607      	mov	r7, r0
			break;
    2446:	e7e1      	b.n	240c <usb_set_configuration+0x34>
	if (found) {
    2448:	b917      	cbnz	r7, 2450 <usb_set_configuration+0x78>
}
    244a:	4638      	mov	r0, r7
    244c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		usb_reset_alt_setting();
    2450:	f7ff ffb8 	bl	23c4 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    2454:	886a      	ldrh	r2, [r5, #2]
    2456:	4b05      	ldr	r3, [pc, #20]	; (246c <usb_set_configuration+0x94>)
    2458:	f883 20ba 	strb.w	r2, [r3, #186]	; 0xba
		if (usb_dev.status_callback) {
    245c:	69db      	ldr	r3, [r3, #28]
    245e:	2b00      	cmp	r3, #0
    2460:	d0f3      	beq.n	244a <usb_set_configuration+0x72>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    2462:	4903      	ldr	r1, [pc, #12]	; (2470 <usb_set_configuration+0x98>)
    2464:	2003      	movs	r0, #3
    2466:	4798      	blx	r3
    2468:	e7ef      	b.n	244a <usb_set_configuration+0x72>
    246a:	bf00      	nop
    246c:	20000cfc 	.word	0x20000cfc
    2470:	20000db6 	.word	0x20000db6

00002474 <usb_handle_std_device_req>:
{
    2474:	b510      	push	{r4, lr}
	uint8_t *data = *data_buf;
    2476:	6814      	ldr	r4, [r2, #0]
	if (usb_reqtype_is_to_host(setup)) {
    2478:	f990 3000 	ldrsb.w	r3, [r0]
    247c:	2b00      	cmp	r3, #0
    247e:	db06      	blt.n	248e <usb_handle_std_device_req+0x1a>
		switch (setup->bRequest) {
    2480:	7843      	ldrb	r3, [r0, #1]
    2482:	2b05      	cmp	r3, #5
    2484:	d018      	beq.n	24b8 <usb_handle_std_device_req+0x44>
    2486:	2b09      	cmp	r3, #9
    2488:	d01d      	beq.n	24c6 <usb_handle_std_device_req+0x52>
    248a:	2000      	movs	r0, #0
}
    248c:	bd10      	pop	{r4, pc}
		switch (setup->bRequest) {
    248e:	7843      	ldrb	r3, [r0, #1]
    2490:	2b06      	cmp	r3, #6
    2492:	d007      	beq.n	24a4 <usb_handle_std_device_req+0x30>
    2494:	2b08      	cmp	r3, #8
    2496:	d008      	beq.n	24aa <usb_handle_std_device_req+0x36>
    2498:	b10b      	cbz	r3, 249e <usb_handle_std_device_req+0x2a>
    249a:	2000      	movs	r0, #0
    249c:	e7f6      	b.n	248c <usb_handle_std_device_req+0x18>
			return usb_get_status(setup, len, data_buf);
    249e:	f00a fa93 	bl	c9c8 <usb_get_status>
    24a2:	e7f3      	b.n	248c <usb_handle_std_device_req+0x18>
			return usb_get_descriptor(setup, len, data_buf);
    24a4:	f7ff fd92 	bl	1fcc <usb_get_descriptor>
    24a8:	e7f0      	b.n	248c <usb_handle_std_device_req+0x18>
			data[0] = usb_dev.configuration;
    24aa:	4b08      	ldr	r3, [pc, #32]	; (24cc <usb_handle_std_device_req+0x58>)
    24ac:	f893 30ba 	ldrb.w	r3, [r3, #186]	; 0xba
    24b0:	7023      	strb	r3, [r4, #0]
			*len = 1;
    24b2:	2001      	movs	r0, #1
    24b4:	6008      	str	r0, [r1, #0]
			return true;
    24b6:	e7e9      	b.n	248c <usb_handle_std_device_req+0x18>
			return !usb_dc_set_address(setup->wValue);
    24b8:	7880      	ldrb	r0, [r0, #2]
    24ba:	f003 fa11 	bl	58e0 <usb_dc_set_address>
    24be:	fab0 f080 	clz	r0, r0
    24c2:	0940      	lsrs	r0, r0, #5
    24c4:	e7e2      	b.n	248c <usb_handle_std_device_req+0x18>
			return usb_set_configuration(setup);
    24c6:	f7ff ff87 	bl	23d8 <usb_set_configuration>
    24ca:	e7df      	b.n	248c <usb_handle_std_device_req+0x18>
    24cc:	20000cfc 	.word	0x20000cfc

000024d0 <reset_endpoint>:
{
    24d0:	b510      	push	{r4, lr}
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    24d2:	7884      	ldrb	r4, [r0, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    24d4:	4620      	mov	r0, r4
    24d6:	f000 fdcb 	bl	3070 <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
    24da:	4620      	mov	r0, r4
    24dc:	f003 fb52 	bl	5b84 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    24e0:	f110 0f78 	cmn.w	r0, #120	; 0x78
    24e4:	d015      	beq.n	2512 <reset_endpoint+0x42>
	} else if (ret) {
    24e6:	b908      	cbnz	r0, 24ec <reset_endpoint+0x1c>
	return true;
    24e8:	2001      	movs	r0, #1
}
    24ea:	bd10      	pop	{r4, pc}
    24ec:	4b0a      	ldr	r3, [pc, #40]	; (2518 <reset_endpoint+0x48>)
    24ee:	4a0b      	ldr	r2, [pc, #44]	; (251c <reset_endpoint+0x4c>)
    24f0:	1a9b      	subs	r3, r3, r2
    24f2:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_cfg.ep_addr);
    24f4:	f04f 0200 	mov.w	r2, #0
    24f8:	2101      	movs	r1, #1
    24fa:	f361 0202 	bfi	r2, r1, #0, #3
    24fe:	f36f 02c5 	bfc	r2, #3, #3
    2502:	f363 128f 	bfi	r2, r3, #6, #10
    2506:	4621      	mov	r1, r4
    2508:	4805      	ldr	r0, [pc, #20]	; (2520 <reset_endpoint+0x50>)
    250a:	f7ff f8e5 	bl	16d8 <log_1>
		return false;
    250e:	2000      	movs	r0, #0
    2510:	e7eb      	b.n	24ea <reset_endpoint+0x1a>
	return true;
    2512:	2001      	movs	r0, #1
    2514:	e7e9      	b.n	24ea <reset_endpoint+0x1a>
    2516:	bf00      	nop
    2518:	0000e87c 	.word	0x0000e87c
    251c:	0000e82c 	.word	0x0000e82c
    2520:	0000eb6c 	.word	0x0000eb6c

00002524 <usb_set_interface>:
{
    2524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2528:	4606      	mov	r6, r0
	const uint8_t *p = usb_dev.descriptors;
    252a:	4b1b      	ldr	r3, [pc, #108]	; (2598 <usb_set_interface+0x74>)
    252c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	bool ret = false;
    252e:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
    2530:	25ff      	movs	r5, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    2532:	46a8      	mov	r8, r5
	const uint8_t *if_desc = NULL;
    2534:	46b9      	mov	r9, r7
    2536:	e008      	b.n	254a <usb_set_interface+0x26>
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    2538:	f894 8003 	ldrb.w	r8, [r4, #3]
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    253c:	78a5      	ldrb	r5, [r4, #2]
			if (cur_iface == setup->wIndex &&
    253e:	b2ab      	uxth	r3, r5
    2540:	88b0      	ldrh	r0, [r6, #4]
    2542:	4283      	cmp	r3, r0
    2544:	d013      	beq.n	256e <usb_set_interface+0x4a>
		p += p[DESC_bLength];
    2546:	7823      	ldrb	r3, [r4, #0]
    2548:	441c      	add	r4, r3
	while (p[DESC_bLength] != 0U) {
    254a:	7823      	ldrb	r3, [r4, #0]
    254c:	b1db      	cbz	r3, 2586 <usb_set_interface+0x62>
		switch (p[DESC_bDescriptorType]) {
    254e:	7863      	ldrb	r3, [r4, #1]
    2550:	2b04      	cmp	r3, #4
    2552:	d0f1      	beq.n	2538 <usb_set_interface+0x14>
    2554:	2b05      	cmp	r3, #5
    2556:	d1f6      	bne.n	2546 <usb_set_interface+0x22>
			if (cur_iface == setup->wIndex) {
    2558:	b2ab      	uxth	r3, r5
    255a:	88b2      	ldrh	r2, [r6, #4]
    255c:	4293      	cmp	r3, r2
    255e:	d1f2      	bne.n	2546 <usb_set_interface+0x22>
				ret = usb_eps_reconfigure(ep, cur_alt_setting,
    2560:	78b2      	ldrb	r2, [r6, #2]
    2562:	4641      	mov	r1, r8
    2564:	4620      	mov	r0, r4
    2566:	f00a fa39 	bl	c9dc <usb_eps_reconfigure>
    256a:	4607      	mov	r7, r0
    256c:	e7eb      	b.n	2546 <usb_set_interface+0x22>
			    cur_alt_setting == setup->wValue) {
    256e:	fa1f f388 	uxth.w	r3, r8
    2572:	8871      	ldrh	r1, [r6, #2]
			if (cur_iface == setup->wIndex &&
    2574:	428b      	cmp	r3, r1
    2576:	d1e6      	bne.n	2546 <usb_set_interface+0x22>
				ret = usb_set_alt_setting(setup->wIndex,
    2578:	b2c9      	uxtb	r1, r1
    257a:	b2c0      	uxtb	r0, r0
    257c:	f7ff fcec 	bl	1f58 <usb_set_alt_setting>
    2580:	4607      	mov	r7, r0
				if_desc = (void *)p;
    2582:	46a1      	mov	r9, r4
    2584:	e7df      	b.n	2546 <usb_set_interface+0x22>
	if (usb_dev.status_callback) {
    2586:	4b04      	ldr	r3, [pc, #16]	; (2598 <usb_set_interface+0x74>)
    2588:	69db      	ldr	r3, [r3, #28]
    258a:	b113      	cbz	r3, 2592 <usb_set_interface+0x6e>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    258c:	4649      	mov	r1, r9
    258e:	2007      	movs	r0, #7
    2590:	4798      	blx	r3
}
    2592:	4638      	mov	r0, r7
    2594:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2598:	20000cfc 	.word	0x20000cfc

0000259c <usb_handle_standard_request>:
{
    259c:	b570      	push	{r4, r5, r6, lr}
    259e:	4604      	mov	r4, r0
    25a0:	460d      	mov	r5, r1
    25a2:	4616      	mov	r6, r2
	if (usb_dev.custom_req_handler &&
    25a4:	4b18      	ldr	r3, [pc, #96]	; (2608 <usb_handle_standard_request+0x6c>)
    25a6:	699b      	ldr	r3, [r3, #24]
    25a8:	b10b      	cbz	r3, 25ae <usb_handle_standard_request+0x12>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    25aa:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    25ac:	b148      	cbz	r0, 25c2 <usb_handle_standard_request+0x26>
	switch (setup->RequestType.recipient) {
    25ae:	7823      	ldrb	r3, [r4, #0]
    25b0:	f003 031f 	and.w	r3, r3, #31
    25b4:	2b01      	cmp	r3, #1
    25b6:	d00d      	beq.n	25d4 <usb_handle_standard_request+0x38>
    25b8:	2b02      	cmp	r3, #2
    25ba:	d013      	beq.n	25e4 <usb_handle_standard_request+0x48>
    25bc:	b113      	cbz	r3, 25c4 <usb_handle_standard_request+0x28>
    25be:	f06f 0015 	mvn.w	r0, #21
}
    25c2:	bd70      	pop	{r4, r5, r6, pc}
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    25c4:	4632      	mov	r2, r6
    25c6:	4629      	mov	r1, r5
    25c8:	4620      	mov	r0, r4
    25ca:	f7ff ff53 	bl	2474 <usb_handle_std_device_req>
    25ce:	b188      	cbz	r0, 25f4 <usb_handle_standard_request+0x58>
	int rc = 0;
    25d0:	2000      	movs	r0, #0
    25d2:	e7f6      	b.n	25c2 <usb_handle_standard_request+0x26>
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    25d4:	4632      	mov	r2, r6
    25d6:	4629      	mov	r1, r5
    25d8:	4620      	mov	r0, r4
    25da:	f00a fa08 	bl	c9ee <usb_handle_std_interface_req>
    25de:	b160      	cbz	r0, 25fa <usb_handle_standard_request+0x5e>
	int rc = 0;
    25e0:	2000      	movs	r0, #0
    25e2:	e7ee      	b.n	25c2 <usb_handle_standard_request+0x26>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    25e4:	4632      	mov	r2, r6
    25e6:	4629      	mov	r1, r5
    25e8:	4620      	mov	r0, r4
    25ea:	f00a fa4d 	bl	ca88 <usb_handle_std_endpoint_req>
    25ee:	b138      	cbz	r0, 2600 <usb_handle_standard_request+0x64>
	int rc = 0;
    25f0:	2000      	movs	r0, #0
    25f2:	e7e6      	b.n	25c2 <usb_handle_standard_request+0x26>
			rc = -EINVAL;
    25f4:	f06f 0015 	mvn.w	r0, #21
    25f8:	e7e3      	b.n	25c2 <usb_handle_standard_request+0x26>
			rc = -EINVAL;
    25fa:	f06f 0015 	mvn.w	r0, #21
    25fe:	e7e0      	b.n	25c2 <usb_handle_standard_request+0x26>
			rc = -EINVAL;
    2600:	f06f 0015 	mvn.w	r0, #21
    2604:	e7dd      	b.n	25c2 <usb_handle_standard_request+0x26>
    2606:	bf00      	nop
    2608:	20000cfc 	.word	0x20000cfc

0000260c <composite_setup_ep_cb>:

static int composite_setup_ep_cb(void)
{
    260c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	size_t size = (__usb_data_end - __usb_data_start);
    260e:	4f15      	ldr	r7, [pc, #84]	; (2664 <composite_setup_ep_cb+0x58>)
    2610:	4b15      	ldr	r3, [pc, #84]	; (2668 <composite_setup_ep_cb+0x5c>)
    2612:	1aff      	subs	r7, r7, r3
    2614:	10bb      	asrs	r3, r7, #2
    2616:	4f15      	ldr	r7, [pc, #84]	; (266c <composite_setup_ep_cb+0x60>)
    2618:	fb07 f703 	mul.w	r7, r7, r3
	struct usb_ep_cfg_data *ep_data;

	for (size_t i = 0; i < size; i++) {
    261c:	2500      	movs	r5, #0
    261e:	42af      	cmp	r7, r5
    2620:	d91b      	bls.n	265a <composite_setup_ep_cb+0x4e>
		ep_data = __usb_data_start[i].endpoint;
    2622:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    2626:	4a10      	ldr	r2, [pc, #64]	; (2668 <composite_setup_ep_cb+0x5c>)
    2628:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    262c:	6a1e      	ldr	r6, [r3, #32]
		for (uint8_t n = 0; n < __usb_data_start[i].num_endpoints; n++) {
    262e:	2400      	movs	r4, #0
    2630:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
    2634:	4a0c      	ldr	r2, [pc, #48]	; (2668 <composite_setup_ep_cb+0x5c>)
    2636:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    263a:	7f1b      	ldrb	r3, [r3, #28]
    263c:	429c      	cmp	r4, r3
    263e:	d20a      	bcs.n	2656 <composite_setup_ep_cb+0x4a>
			LOG_DBG("set cb, ep: 0x%x", ep_data[n].ep_addr);
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    2640:	eb06 03c4 	add.w	r3, r6, r4, lsl #3
    2644:	f856 1034 	ldr.w	r1, [r6, r4, lsl #3]
    2648:	7918      	ldrb	r0, [r3, #4]
    264a:	f003 fcb7 	bl	5fbc <usb_dc_ep_set_callback>
    264e:	b930      	cbnz	r0, 265e <composite_setup_ep_cb+0x52>
		for (uint8_t n = 0; n < __usb_data_start[i].num_endpoints; n++) {
    2650:	3401      	adds	r4, #1
    2652:	b2e4      	uxtb	r4, r4
    2654:	e7ec      	b.n	2630 <composite_setup_ep_cb+0x24>
	for (size_t i = 0; i < size; i++) {
    2656:	3501      	adds	r5, #1
    2658:	e7e1      	b.n	261e <composite_setup_ep_cb+0x12>
				return -1;
			}
		}
	}

	return 0;
    265a:	2000      	movs	r0, #0
    265c:	e001      	b.n	2662 <composite_setup_ep_cb+0x56>
				return -1;
    265e:	f04f 30ff 	mov.w	r0, #4294967295
}
    2662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2664:	20000368 	.word	0x20000368
    2668:	20000344 	.word	0x20000344
    266c:	38e38e39 	.word	0x38e38e39

00002670 <forward_status_cb>:
{
    2670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2672:	4606      	mov	r6, r0
    2674:	460f      	mov	r7, r1
	size_t size = (__usb_data_end - __usb_data_start);
    2676:	4d1c      	ldr	r5, [pc, #112]	; (26e8 <forward_status_cb+0x78>)
    2678:	4b1c      	ldr	r3, [pc, #112]	; (26ec <forward_status_cb+0x7c>)
    267a:	1aed      	subs	r5, r5, r3
    267c:	10ab      	asrs	r3, r5, #2
    267e:	4d1c      	ldr	r5, [pc, #112]	; (26f0 <forward_status_cb+0x80>)
    2680:	fb05 f503 	mul.w	r5, r5, r3
	if (status == USB_DC_DISCONNECTED) {
    2684:	2804      	cmp	r0, #4
    2686:	d005      	beq.n	2694 <forward_status_cb+0x24>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_SUSPEND) {
    2688:	1f33      	subs	r3, r6, #4
    268a:	b2db      	uxtb	r3, r3
    268c:	2b01      	cmp	r3, #1
    268e:	d904      	bls.n	269a <forward_status_cb+0x2a>
{
    2690:	2400      	movs	r4, #0
    2692:	e014      	b.n	26be <forward_status_cb+0x4e>
		usb_reset_alt_setting();
    2694:	f7ff fe96 	bl	23c4 <usb_reset_alt_setting>
    2698:	e7f6      	b.n	2688 <forward_status_cb+0x18>
		if (usb_dev.configured) {
    269a:	4b16      	ldr	r3, [pc, #88]	; (26f4 <forward_status_cb+0x84>)
    269c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
    26a0:	2b00      	cmp	r3, #0
    26a2:	d0f5      	beq.n	2690 <forward_status_cb+0x20>
			usb_cancel_transfers();
    26a4:	f000 fd04 	bl	30b0 <usb_cancel_transfers>
			if (status == USB_DC_DISCONNECTED) {
    26a8:	2e04      	cmp	r6, #4
    26aa:	d1f1      	bne.n	2690 <forward_status_cb+0x20>
				foreach_ep(disable_interface_ep);
    26ac:	4812      	ldr	r0, [pc, #72]	; (26f8 <forward_status_cb+0x88>)
    26ae:	f7ff fd35 	bl	211c <foreach_ep>
				usb_dev.configured = false;
    26b2:	4b10      	ldr	r3, [pc, #64]	; (26f4 <forward_status_cb+0x84>)
    26b4:	2200      	movs	r2, #0
    26b6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
    26ba:	e7e9      	b.n	2690 <forward_status_cb+0x20>
	for (size_t i = 0; i < size; i++) {
    26bc:	3401      	adds	r4, #1
    26be:	42ac      	cmp	r4, r5
    26c0:	d20b      	bcs.n	26da <forward_status_cb+0x6a>
		struct usb_cfg_data *cfg = &__usb_data_start[i];
    26c2:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
    26c6:	4b09      	ldr	r3, [pc, #36]	; (26ec <forward_status_cb+0x7c>)
    26c8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
		if (cfg->cb_usb_status) {
    26cc:	68c3      	ldr	r3, [r0, #12]
    26ce:	2b00      	cmp	r3, #0
    26d0:	d0f4      	beq.n	26bc <forward_status_cb+0x4c>
			cfg->cb_usb_status(cfg, status, param);
    26d2:	463a      	mov	r2, r7
    26d4:	4631      	mov	r1, r6
    26d6:	4798      	blx	r3
    26d8:	e7f0      	b.n	26bc <forward_status_cb+0x4c>
	if (usb_dev.user_status_callback) {
    26da:	4b06      	ldr	r3, [pc, #24]	; (26f4 <forward_status_cb+0x84>)
    26dc:	6a1b      	ldr	r3, [r3, #32]
    26de:	b113      	cbz	r3, 26e6 <forward_status_cb+0x76>
		usb_dev.user_status_callback(status, param);
    26e0:	4639      	mov	r1, r7
    26e2:	4630      	mov	r0, r6
    26e4:	4798      	blx	r3
}
    26e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    26e8:	20000368 	.word	0x20000368
    26ec:	20000344 	.word	0x20000344
    26f0:	38e38e39 	.word	0x38e38e39
    26f4:	20000cfc 	.word	0x20000cfc
    26f8:	0000ca49 	.word	0x0000ca49

000026fc <usb_data_to_host>:
{
    26fc:	b510      	push	{r4, lr}
    26fe:	b082      	sub	sp, #8
	if (usb_dev.zlp_flag == false) {
    2700:	4b13      	ldr	r3, [pc, #76]	; (2750 <usb_data_to_host+0x54>)
    2702:	7d1b      	ldrb	r3, [r3, #20]
    2704:	b9cb      	cbnz	r3, 273a <usb_data_to_host+0x3e>
		uint32_t chunk = usb_dev.data_buf_residue;
    2706:	4c12      	ldr	r4, [pc, #72]	; (2750 <usb_data_to_host+0x54>)
    2708:	68e2      	ldr	r2, [r4, #12]
    270a:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    270c:	ab01      	add	r3, sp, #4
    270e:	68a1      	ldr	r1, [r4, #8]
    2710:	2080      	movs	r0, #128	; 0x80
    2712:	f00a f9dc 	bl	cace <usb_write>
		usb_dev.data_buf += chunk;
    2716:	9901      	ldr	r1, [sp, #4]
    2718:	68a2      	ldr	r2, [r4, #8]
    271a:	440a      	add	r2, r1
    271c:	60a2      	str	r2, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    271e:	68e3      	ldr	r3, [r4, #12]
    2720:	1a5b      	subs	r3, r3, r1
    2722:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue &&
    2724:	b98b      	cbnz	r3, 274a <usb_data_to_host+0x4e>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    2726:	88e2      	ldrh	r2, [r4, #6]
    2728:	6923      	ldr	r3, [r4, #16]
		if (!usb_dev.data_buf_residue &&
    272a:	429a      	cmp	r2, r3
    272c:	dd0d      	ble.n	274a <usb_data_to_host+0x4e>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
    272e:	f013 0f3f 	tst.w	r3, #63	; 0x3f
    2732:	d10a      	bne.n	274a <usb_data_to_host+0x4e>
				usb_dev.zlp_flag = true;
    2734:	2201      	movs	r2, #1
    2736:	7522      	strb	r2, [r4, #20]
    2738:	e007      	b.n	274a <usb_data_to_host+0x4e>
		usb_dev.zlp_flag = false;
    273a:	2100      	movs	r1, #0
    273c:	4b04      	ldr	r3, [pc, #16]	; (2750 <usb_data_to_host+0x54>)
    273e:	7519      	strb	r1, [r3, #20]
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    2740:	460b      	mov	r3, r1
    2742:	460a      	mov	r2, r1
    2744:	2080      	movs	r0, #128	; 0x80
    2746:	f003 fa47 	bl	5bd8 <usb_dc_ep_write>
}
    274a:	b002      	add	sp, #8
    274c:	bd10      	pop	{r4, pc}
    274e:	bf00      	nop
    2750:	20000cfc 	.word	0x20000cfc

00002754 <usb_handle_control_transfer>:
{
    2754:	b510      	push	{r4, lr}
    2756:	b084      	sub	sp, #16
	uint32_t chunk = 0U;
    2758:	2300      	movs	r3, #0
    275a:	9303      	str	r3, [sp, #12]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    275c:	4604      	mov	r4, r0
    275e:	b900      	cbnz	r0, 2762 <usb_handle_control_transfer+0xe>
    2760:	b331      	cbz	r1, 27b0 <usb_handle_control_transfer+0x5c>
	} else if (ep == USB_CONTROL_EP_OUT) {
    2762:	2c00      	cmp	r4, #0
    2764:	f040 8094 	bne.w	2890 <usb_handle_control_transfer+0x13c>
		if (usb_dev.data_buf_residue <= 0) {
    2768:	4b50      	ldr	r3, [pc, #320]	; (28ac <usb_handle_control_transfer+0x158>)
    276a:	68da      	ldr	r2, [r3, #12]
    276c:	2a00      	cmp	r2, #0
    276e:	dd77      	ble.n	2860 <usb_handle_control_transfer+0x10c>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    2770:	ab03      	add	r3, sp, #12
    2772:	494e      	ldr	r1, [pc, #312]	; (28ac <usb_handle_control_transfer+0x158>)
    2774:	6889      	ldr	r1, [r1, #8]
    2776:	2000      	movs	r0, #0
    2778:	f00a fd77 	bl	d26a <usb_dc_ep_read>
    277c:	2800      	cmp	r0, #0
    277e:	db7c      	blt.n	287a <usb_handle_control_transfer+0x126>
		usb_dev.data_buf += chunk;
    2780:	9803      	ldr	r0, [sp, #12]
    2782:	4a4a      	ldr	r2, [pc, #296]	; (28ac <usb_handle_control_transfer+0x158>)
    2784:	6891      	ldr	r1, [r2, #8]
    2786:	4401      	add	r1, r0
    2788:	6091      	str	r1, [r2, #8]
		usb_dev.data_buf_residue -= chunk;
    278a:	68d3      	ldr	r3, [r2, #12]
    278c:	1a1b      	subs	r3, r3, r0
    278e:	60d3      	str	r3, [r2, #12]
		if (usb_dev.data_buf_residue == 0) {
    2790:	2b00      	cmp	r3, #0
    2792:	d17f      	bne.n	2894 <usb_handle_control_transfer+0x140>
			usb_dev.data_buf = usb_dev.req_data;
    2794:	4610      	mov	r0, r2
    2796:	f102 0338 	add.w	r3, r2, #56	; 0x38
    279a:	f842 3f08 	str.w	r3, [r2, #8]!
			if (!usb_handle_request(setup,
    279e:	f100 0110 	add.w	r1, r0, #16
    27a2:	f7ff fbf1 	bl	1f88 <usb_handle_request>
    27a6:	2800      	cmp	r0, #0
    27a8:	d06e      	beq.n	2888 <usb_handle_control_transfer+0x134>
			usb_data_to_host();
    27aa:	f7ff ffa7 	bl	26fc <usb_data_to_host>
    27ae:	e071      	b.n	2894 <usb_handle_control_transfer+0x140>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    27b0:	2208      	movs	r2, #8
    27b2:	a901      	add	r1, sp, #4
    27b4:	f00a fd59 	bl	d26a <usb_dc_ep_read>
    27b8:	2800      	cmp	r0, #0
    27ba:	db2e      	blt.n	281a <usb_handle_control_transfer+0xc6>
		setup->bmRequestType = setup_raw.bmRequestType;
    27bc:	f89d 0004 	ldrb.w	r0, [sp, #4]
    27c0:	4b3a      	ldr	r3, [pc, #232]	; (28ac <usb_handle_control_transfer+0x158>)
    27c2:	7018      	strb	r0, [r3, #0]
		setup->bRequest = setup_raw.bRequest;
    27c4:	f89d 2005 	ldrb.w	r2, [sp, #5]
    27c8:	705a      	strb	r2, [r3, #1]
		setup->wValue = sys_le16_to_cpu(setup_raw.wValue);
    27ca:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    27ce:	805a      	strh	r2, [r3, #2]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    27d0:	f8bd 2008 	ldrh.w	r2, [sp, #8]
    27d4:	809a      	strh	r2, [r3, #4]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    27d6:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    27da:	80d9      	strh	r1, [r3, #6]
		usb_dev.data_buf = usb_dev.req_data;
    27dc:	f103 0238 	add.w	r2, r3, #56	; 0x38
    27e0:	609a      	str	r2, [r3, #8]
		usb_dev.zlp_flag = false;
    27e2:	2200      	movs	r2, #0
    27e4:	751a      	strb	r2, [r3, #20]
		usb_dev.data_buf_len = 0;
    27e6:	611a      	str	r2, [r3, #16]
		usb_dev.data_buf_residue = 0;
    27e8:	60da      	str	r2, [r3, #12]
		if (usb_reqtype_is_to_device(setup)) {
    27ea:	f010 0f80 	tst.w	r0, #128	; 0x80
    27ee:	d102      	bne.n	27f6 <usb_handle_control_transfer+0xa2>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    27f0:	2980      	cmp	r1, #128	; 0x80
    27f2:	d816      	bhi.n	2822 <usb_handle_control_transfer+0xce>
			if (setup->wLength) {
    27f4:	bb61      	cbnz	r1, 2850 <usb_handle_control_transfer+0xfc>
		if (!usb_handle_request(setup,
    27f6:	482d      	ldr	r0, [pc, #180]	; (28ac <usb_handle_control_transfer+0x158>)
    27f8:	f100 0208 	add.w	r2, r0, #8
    27fc:	f100 0110 	add.w	r1, r0, #16
    2800:	f7ff fbc2 	bl	1f88 <usb_handle_request>
    2804:	b340      	cbz	r0, 2858 <usb_handle_control_transfer+0x104>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    2806:	4b29      	ldr	r3, [pc, #164]	; (28ac <usb_handle_control_transfer+0x158>)
    2808:	88da      	ldrh	r2, [r3, #6]
    280a:	6919      	ldr	r1, [r3, #16]
    280c:	428a      	cmp	r2, r1
    280e:	bfa8      	it	ge
    2810:	460a      	movge	r2, r1
    2812:	60da      	str	r2, [r3, #12]
		usb_data_to_host();
    2814:	f7ff ff72 	bl	26fc <usb_data_to_host>
    2818:	e03c      	b.n	2894 <usb_handle_control_transfer+0x140>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    281a:	2080      	movs	r0, #128	; 0x80
    281c:	f003 f8f4 	bl	5a08 <usb_dc_ep_set_stall>
			return;
    2820:	e038      	b.n	2894 <usb_handle_control_transfer+0x140>
    2822:	4b23      	ldr	r3, [pc, #140]	; (28b0 <usb_handle_control_transfer+0x15c>)
    2824:	4a23      	ldr	r2, [pc, #140]	; (28b4 <usb_handle_control_transfer+0x160>)
    2826:	1a9b      	subs	r3, r3, r2
    2828:	08db      	lsrs	r3, r3, #3
				LOG_ERR("Request buffer too small");
    282a:	f04f 0100 	mov.w	r1, #0
    282e:	2201      	movs	r2, #1
    2830:	f362 0102 	bfi	r1, r2, #0, #3
    2834:	f36f 01c5 	bfc	r1, #3, #3
    2838:	f363 118f 	bfi	r1, r3, #6, #10
    283c:	481e      	ldr	r0, [pc, #120]	; (28b8 <usb_handle_control_transfer+0x164>)
    283e:	f7fe ffbd 	bl	17bc <log_0>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2842:	2080      	movs	r0, #128	; 0x80
    2844:	f003 f8e0 	bl	5a08 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    2848:	2000      	movs	r0, #0
    284a:	f003 f8dd 	bl	5a08 <usb_dc_ep_set_stall>
				return;
    284e:	e021      	b.n	2894 <usb_handle_control_transfer+0x140>
				usb_dev.data_buf_len = setup->wLength;
    2850:	4b16      	ldr	r3, [pc, #88]	; (28ac <usb_handle_control_transfer+0x158>)
    2852:	6119      	str	r1, [r3, #16]
				usb_dev.data_buf_residue = setup->wLength;
    2854:	60d9      	str	r1, [r3, #12]
				return;
    2856:	e01d      	b.n	2894 <usb_handle_control_transfer+0x140>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2858:	2080      	movs	r0, #128	; 0x80
    285a:	f003 f8d5 	bl	5a08 <usb_dc_ep_set_stall>
			return;
    285e:	e019      	b.n	2894 <usb_handle_control_transfer+0x140>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    2860:	ab03      	add	r3, sp, #12
    2862:	2200      	movs	r2, #0
    2864:	4911      	ldr	r1, [pc, #68]	; (28ac <usb_handle_control_transfer+0x158>)
    2866:	6889      	ldr	r1, [r1, #8]
    2868:	4610      	mov	r0, r2
    286a:	f00a fcfe 	bl	d26a <usb_dc_ep_read>
    286e:	2800      	cmp	r0, #0
    2870:	da10      	bge.n	2894 <usb_handle_control_transfer+0x140>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2872:	2080      	movs	r0, #128	; 0x80
    2874:	f003 f8c8 	bl	5a08 <usb_dc_ep_set_stall>
			return;
    2878:	e00c      	b.n	2894 <usb_handle_control_transfer+0x140>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    287a:	2080      	movs	r0, #128	; 0x80
    287c:	f003 f8c4 	bl	5a08 <usb_dc_ep_set_stall>
			usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    2880:	2000      	movs	r0, #0
    2882:	f003 f8c1 	bl	5a08 <usb_dc_ep_set_stall>
			return;
    2886:	e005      	b.n	2894 <usb_handle_control_transfer+0x140>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    2888:	2080      	movs	r0, #128	; 0x80
    288a:	f003 f8bd 	bl	5a08 <usb_dc_ep_set_stall>
				return;
    288e:	e001      	b.n	2894 <usb_handle_control_transfer+0x140>
	} else if (ep == USB_CONTROL_EP_IN) {
    2890:	2c80      	cmp	r4, #128	; 0x80
    2892:	d001      	beq.n	2898 <usb_handle_control_transfer+0x144>
}
    2894:	b004      	add	sp, #16
    2896:	bd10      	pop	{r4, pc}
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    2898:	4b04      	ldr	r3, [pc, #16]	; (28ac <usb_handle_control_transfer+0x158>)
    289a:	68db      	ldr	r3, [r3, #12]
    289c:	b91b      	cbnz	r3, 28a6 <usb_handle_control_transfer+0x152>
    289e:	4b03      	ldr	r3, [pc, #12]	; (28ac <usb_handle_control_transfer+0x158>)
    28a0:	7d1b      	ldrb	r3, [r3, #20]
    28a2:	2b00      	cmp	r3, #0
    28a4:	d0f6      	beq.n	2894 <usb_handle_control_transfer+0x140>
			usb_data_to_host();
    28a6:	f7ff ff29 	bl	26fc <usb_data_to_host>
		__ASSERT_NO_MSG(false);
    28aa:	e7f3      	b.n	2894 <usb_handle_control_transfer+0x140>
    28ac:	20000cfc 	.word	0x20000cfc
    28b0:	0000e87c 	.word	0x0000e87c
    28b4:	0000e82c 	.word	0x0000e82c
    28b8:	0000eb90 	.word	0x0000eb90

000028bc <usb_set_config>:

int usb_set_config(const uint8_t *device_descriptor)
{
    28bc:	b508      	push	{r3, lr}
	/* register descriptors */
	usb_register_descriptors(device_descriptor);
    28be:	f7ff fb7f 	bl	1fc0 <usb_register_descriptors>

	/* register standard request handler */
	usb_register_request_handler(USB_REQTYPE_TYPE_STANDARD,
    28c2:	4908      	ldr	r1, [pc, #32]	; (28e4 <usb_set_config+0x28>)
    28c4:	2000      	movs	r0, #0
    28c6:	f7ff fb73 	bl	1fb0 <usb_register_request_handler>
				     usb_handle_standard_request);

	/* register class request handlers for each interface*/
	usb_register_request_handler(USB_REQTYPE_TYPE_CLASS, class_handler);
    28ca:	4907      	ldr	r1, [pc, #28]	; (28e8 <usb_set_config+0x2c>)
    28cc:	2001      	movs	r0, #1
    28ce:	f7ff fb6f 	bl	1fb0 <usb_register_request_handler>

	/* register vendor request handler */
	usb_register_request_handler(USB_REQTYPE_TYPE_VENDOR, vendor_handler);
    28d2:	4906      	ldr	r1, [pc, #24]	; (28ec <usb_set_config+0x30>)
    28d4:	2002      	movs	r0, #2
    28d6:	f7ff fb6b 	bl	1fb0 <usb_register_request_handler>

	/* register class request handlers for each interface*/
	usb_register_custom_req_handler(custom_handler);
    28da:	4805      	ldr	r0, [pc, #20]	; (28f0 <usb_set_config+0x34>)
    28dc:	f7ff fc12 	bl	2104 <usb_register_custom_req_handler>

	return 0;
}
    28e0:	2000      	movs	r0, #0
    28e2:	bd08      	pop	{r3, pc}
    28e4:	0000259d 	.word	0x0000259d
    28e8:	00002181 	.word	0x00002181
    28ec:	00002261 	.word	0x00002261
    28f0:	000021e1 	.word	0x000021e1

000028f4 <usb_device_init>:
/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(const struct device *dev)
{
    28f4:	b508      	push	{r3, lr}
	uint8_t *device_descriptor;

	if (usb_dev.enabled == true) {
    28f6:	4b10      	ldr	r3, [pc, #64]	; (2938 <usb_device_init+0x44>)
    28f8:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
    28fc:	b10b      	cbz	r3, 2902 <usb_device_init+0xe>
		return 0;
    28fe:	2000      	movs	r0, #0
	}

	usb_set_config(device_descriptor);

	return 0;
}
    2900:	bd08      	pop	{r3, pc}
	device_descriptor = usb_get_device_descriptor();
    2902:	f000 f9d7 	bl	2cb4 <usb_get_device_descriptor>
	if (!device_descriptor) {
    2906:	b118      	cbz	r0, 2910 <usb_device_init+0x1c>
	usb_set_config(device_descriptor);
    2908:	f7ff ffd8 	bl	28bc <usb_set_config>
	return 0;
    290c:	2000      	movs	r0, #0
    290e:	e7f7      	b.n	2900 <usb_device_init+0xc>
    2910:	4b0a      	ldr	r3, [pc, #40]	; (293c <usb_device_init+0x48>)
    2912:	4a0b      	ldr	r2, [pc, #44]	; (2940 <usb_device_init+0x4c>)
    2914:	1a9b      	subs	r3, r3, r2
    2916:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to configure USB device stack");
    2918:	f04f 0100 	mov.w	r1, #0
    291c:	2201      	movs	r2, #1
    291e:	f362 0102 	bfi	r1, r2, #0, #3
    2922:	f36f 01c5 	bfc	r1, #3, #3
    2926:	f363 118f 	bfi	r1, r3, #6, #10
    292a:	4806      	ldr	r0, [pc, #24]	; (2944 <usb_device_init+0x50>)
    292c:	f7fe ff46 	bl	17bc <log_0>
		return -1;
    2930:	f04f 30ff 	mov.w	r0, #4294967295
    2934:	e7e4      	b.n	2900 <usb_device_init+0xc>
    2936:	bf00      	nop
    2938:	20000cfc 	.word	0x20000cfc
    293c:	0000e87c 	.word	0x0000e87c
    2940:	0000e82c 	.word	0x0000e82c
    2944:	0000ebac 	.word	0x0000ebac

00002948 <usb_enable>:
{
    2948:	b530      	push	{r4, r5, lr}
    294a:	b083      	sub	sp, #12
    294c:	4605      	mov	r5, r0
	return z_impl_k_mutex_lock(mutex, timeout);
    294e:	f04f 32ff 	mov.w	r2, #4294967295
    2952:	f04f 33ff 	mov.w	r3, #4294967295
    2956:	482d      	ldr	r0, [pc, #180]	; (2a0c <usb_enable+0xc4>)
    2958:	f007 fae8 	bl	9f2c <z_impl_k_mutex_lock>
	if (usb_dev.enabled == true) {
    295c:	4b2c      	ldr	r3, [pc, #176]	; (2a10 <usb_enable+0xc8>)
    295e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
    2962:	2b00      	cmp	r3, #0
    2964:	d14a      	bne.n	29fc <usb_enable+0xb4>
	ret = usb_vbus_set(true);
    2966:	2001      	movs	r0, #1
    2968:	f00a f836 	bl	c9d8 <usb_vbus_set>
	if (ret < 0) {
    296c:	1e04      	subs	r4, r0, #0
    296e:	db46      	blt.n	29fe <usb_enable+0xb6>
	usb_dev.user_status_callback = status_cb;
    2970:	4b27      	ldr	r3, [pc, #156]	; (2a10 <usb_enable+0xc8>)
    2972:	621d      	str	r5, [r3, #32]
	usb_register_status_callback(forward_status_cb);
    2974:	4c27      	ldr	r4, [pc, #156]	; (2a14 <usb_enable+0xcc>)
    2976:	4620      	mov	r0, r4
    2978:	f7ff fbca 	bl	2110 <usb_register_status_callback>
	usb_dc_set_status_callback(forward_status_cb);
    297c:	4620      	mov	r0, r4
    297e:	f003 fb31 	bl	5fe4 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    2982:	f002 ff65 	bl	5850 <usb_dc_attach>
	if (ret < 0) {
    2986:	1e04      	subs	r4, r0, #0
    2988:	db39      	blt.n	29fe <usb_enable+0xb6>
	ret = usb_transfer_init();
    298a:	f000 fbbd 	bl	3108 <usb_transfer_init>
	if (ret < 0) {
    298e:	1e04      	subs	r4, r0, #0
    2990:	db35      	blt.n	29fe <usb_enable+0xb6>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    2992:	2340      	movs	r3, #64	; 0x40
    2994:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    2998:	2300      	movs	r3, #0
    299a:	f88d 3004 	strb.w	r3, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    299e:	f88d 3000 	strb.w	r3, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    29a2:	4668      	mov	r0, sp
    29a4:	f002 fff2 	bl	598c <usb_dc_ep_configure>
	if (ret < 0) {
    29a8:	1e04      	subs	r4, r0, #0
    29aa:	db28      	blt.n	29fe <usb_enable+0xb6>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    29ac:	2380      	movs	r3, #128	; 0x80
    29ae:	f88d 3000 	strb.w	r3, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    29b2:	4668      	mov	r0, sp
    29b4:	f002 ffea 	bl	598c <usb_dc_ep_configure>
	if (ret < 0) {
    29b8:	1e04      	subs	r4, r0, #0
    29ba:	db20      	blt.n	29fe <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    29bc:	4916      	ldr	r1, [pc, #88]	; (2a18 <usb_enable+0xd0>)
    29be:	2000      	movs	r0, #0
    29c0:	f003 fafc 	bl	5fbc <usb_dc_ep_set_callback>
	if (ret < 0) {
    29c4:	1e04      	subs	r4, r0, #0
    29c6:	db1a      	blt.n	29fe <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    29c8:	4913      	ldr	r1, [pc, #76]	; (2a18 <usb_enable+0xd0>)
    29ca:	2080      	movs	r0, #128	; 0x80
    29cc:	f003 faf6 	bl	5fbc <usb_dc_ep_set_callback>
	if (ret < 0) {
    29d0:	1e04      	subs	r4, r0, #0
    29d2:	db14      	blt.n	29fe <usb_enable+0xb6>
	ret = composite_setup_ep_cb();
    29d4:	f7ff fe1a 	bl	260c <composite_setup_ep_cb>
	if (ret < 0) {
    29d8:	1e04      	subs	r4, r0, #0
    29da:	db10      	blt.n	29fe <usb_enable+0xb6>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    29dc:	2000      	movs	r0, #0
    29de:	f003 f8a3 	bl	5b28 <usb_dc_ep_enable>
	if (ret < 0) {
    29e2:	1e04      	subs	r4, r0, #0
    29e4:	db0b      	blt.n	29fe <usb_enable+0xb6>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    29e6:	2080      	movs	r0, #128	; 0x80
    29e8:	f003 f89e 	bl	5b28 <usb_dc_ep_enable>
	if (ret < 0) {
    29ec:	1e04      	subs	r4, r0, #0
    29ee:	db06      	blt.n	29fe <usb_enable+0xb6>
	usb_dev.enabled = true;
    29f0:	4b07      	ldr	r3, [pc, #28]	; (2a10 <usb_enable+0xc8>)
    29f2:	2201      	movs	r2, #1
    29f4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	ret = 0;
    29f8:	2400      	movs	r4, #0
    29fa:	e000      	b.n	29fe <usb_enable+0xb6>
		ret = 0;
    29fc:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
    29fe:	4803      	ldr	r0, [pc, #12]	; (2a0c <usb_enable+0xc4>)
    2a00:	f007 fb1e 	bl	a040 <z_impl_k_mutex_unlock>
}
    2a04:	4620      	mov	r0, r4
    2a06:	b003      	add	sp, #12
    2a08:	bd30      	pop	{r4, r5, pc}
    2a0a:	bf00      	nop
    2a0c:	20000250 	.word	0x20000250
    2a10:	20000cfc 	.word	0x20000cfc
    2a14:	00002671 	.word	0x00002671
    2a18:	00002755 	.word	0x00002755

00002a1c <usb_get_cfg_data>:
 * The interface descriptor of a USB function must be assigned to the
 * usb_cfg_data so that usb_ep_cfg_data and matching endpoint descriptor
 * can be found.
 */
static struct usb_cfg_data *usb_get_cfg_data(struct usb_if_descriptor *iface)
{
    2a1c:	b410      	push	{r4}
	size_t length = (__usb_data_end - __usb_data_start);
    2a1e:	4c0e      	ldr	r4, [pc, #56]	; (2a58 <usb_get_cfg_data+0x3c>)
    2a20:	4b0e      	ldr	r3, [pc, #56]	; (2a5c <usb_get_cfg_data+0x40>)
    2a22:	1ae4      	subs	r4, r4, r3
    2a24:	10a3      	asrs	r3, r4, #2
    2a26:	4c0e      	ldr	r4, [pc, #56]	; (2a60 <usb_get_cfg_data+0x44>)
    2a28:	fb04 f403 	mul.w	r4, r4, r3

	for (size_t i = 0; i < length; i++) {
    2a2c:	2300      	movs	r3, #0
    2a2e:	42a3      	cmp	r3, r4
    2a30:	d20e      	bcs.n	2a50 <usb_get_cfg_data+0x34>
		if (__usb_data_start[i].interface_descriptor == iface) {
    2a32:	eb03 02c3 	add.w	r2, r3, r3, lsl #3
    2a36:	4909      	ldr	r1, [pc, #36]	; (2a5c <usb_get_cfg_data+0x40>)
    2a38:	eb01 0282 	add.w	r2, r1, r2, lsl #2
    2a3c:	6852      	ldr	r2, [r2, #4]
    2a3e:	4282      	cmp	r2, r0
    2a40:	d001      	beq.n	2a46 <usb_get_cfg_data+0x2a>
	for (size_t i = 0; i < length; i++) {
    2a42:	3301      	adds	r3, #1
    2a44:	e7f3      	b.n	2a2e <usb_get_cfg_data+0x12>
			return &__usb_data_start[i];
    2a46:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    2a4a:	eb01 0083 	add.w	r0, r1, r3, lsl #2
    2a4e:	e000      	b.n	2a52 <usb_get_cfg_data+0x36>
		}
	}

	return NULL;
    2a50:	2000      	movs	r0, #0
}
    2a52:	bc10      	pop	{r4}
    2a54:	4770      	bx	lr
    2a56:	bf00      	nop
    2a58:	20000368 	.word	0x20000368
    2a5c:	20000344 	.word	0x20000344
    2a60:	38e38e39 	.word	0x38e38e39

00002a64 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    2a64:	b530      	push	{r4, r5, lr}
    2a66:	b08b      	sub	sp, #44	; 0x2c
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    2a68:	ac01      	add	r4, sp, #4
    2a6a:	4d1b      	ldr	r5, [pc, #108]	; (2ad8 <usb_update_sn_string_descriptor+0x74>)
    2a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2a6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2a70:	682b      	ldr	r3, [r5, #0]
    2a72:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    2a74:	2210      	movs	r2, #16
    2a76:	2100      	movs	r1, #0
    2a78:	a806      	add	r0, sp, #24
    2a7a:	f00a fb28 	bl	d0ce <memset>
	memset(sn, 0, sizeof(sn));
    2a7e:	2212      	movs	r2, #18
    2a80:	2100      	movs	r1, #0
    2a82:	4816      	ldr	r0, [pc, #88]	; (2adc <usb_update_sn_string_descriptor+0x78>)
    2a84:	f00a fb23 	bl	d0ce <memset>
		/* coverity[OVERRUN] */
		return (ssize_t) arch_syscall_invoke2(*(uintptr_t *)&buffer, *(uintptr_t *)&length, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    2a88:	2110      	movs	r1, #16
    2a8a:	a806      	add	r0, sp, #24
    2a8c:	f00a fd2d 	bl	d4ea <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    2a90:	2800      	cmp	r0, #0
    2a92:	dd1d      	ble.n	2ad0 <usb_update_sn_string_descriptor+0x6c>
		skip = MAX(0, hwlen - usblen);
    2a94:	3808      	subs	r0, #8
    2a96:	ea20 74e0 	bic.w	r4, r0, r0, asr #31
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    2a9a:	2200      	movs	r2, #0
    2a9c:	e016      	b.n	2acc <usb_update_sn_string_descriptor+0x68>
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    2a9e:	18a3      	adds	r3, r4, r2
    2aa0:	a90a      	add	r1, sp, #40	; 0x28
    2aa2:	440b      	add	r3, r1
    2aa4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
    2aa8:	0051      	lsls	r1, r2, #1
    2aaa:	a80a      	add	r0, sp, #40	; 0x28
    2aac:	eb00 1013 	add.w	r0, r0, r3, lsr #4
    2ab0:	f810 5c24 	ldrb.w	r5, [r0, #-36]
    2ab4:	4809      	ldr	r0, [pc, #36]	; (2adc <usb_update_sn_string_descriptor+0x78>)
    2ab6:	f800 5012 	strb.w	r5, [r0, r2, lsl #1]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    2aba:	f003 030f 	and.w	r3, r3, #15
    2abe:	3101      	adds	r1, #1
    2ac0:	ad0a      	add	r5, sp, #40	; 0x28
    2ac2:	442b      	add	r3, r5
    2ac4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
    2ac8:	5443      	strb	r3, [r0, r1]
		for (int i = 0; i < usblen; i++) {
    2aca:	3201      	adds	r2, #1
    2acc:	2a07      	cmp	r2, #7
    2ace:	dde6      	ble.n	2a9e <usb_update_sn_string_descriptor+0x3a>
		}
	}

	return sn;
}
    2ad0:	4802      	ldr	r0, [pc, #8]	; (2adc <usb_update_sn_string_descriptor+0x78>)
    2ad2:	b00b      	add	sp, #44	; 0x2c
    2ad4:	bd30      	pop	{r4, r5, pc}
    2ad6:	bf00      	nop
    2ad8:	0000ebe0 	.word	0x0000ebe0
    2adc:	20000dc0 	.word	0x20000dc0

00002ae0 <usb_fix_ascii_sn_string_descriptor>:

static void usb_fix_ascii_sn_string_descriptor(struct usb_sn_descriptor *sn)
{
    2ae0:	b570      	push	{r4, r5, r6, lr}
    2ae2:	4604      	mov	r4, r0
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    2ae4:	f7ff ffbe 	bl	2a64 <usb_update_sn_string_descriptor>
	int runtime_sn_len, default_sn_len;

	if (!runtime_sn) {
    2ae8:	b120      	cbz	r0, 2af4 <usb_fix_ascii_sn_string_descriptor+0x14>
    2aea:	4605      	mov	r5, r0
		return;
	}

	runtime_sn_len = strlen(runtime_sn);
    2aec:	f00a fab9 	bl	d062 <strlen>
	if (!runtime_sn_len) {
    2af0:	4606      	mov	r6, r0
    2af2:	b900      	cbnz	r0, 2af6 <usb_fix_ascii_sn_string_descriptor+0x16>
			"length as CONFIG_USB_DEVICE_SN");
		return;
	}

	memcpy(sn->bString, runtime_sn, runtime_sn_len);
}
    2af4:	bd70      	pop	{r4, r5, r6, pc}
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    2af6:	480e      	ldr	r0, [pc, #56]	; (2b30 <usb_fix_ascii_sn_string_descriptor+0x50>)
    2af8:	f00a fab3 	bl	d062 <strlen>
	if (runtime_sn_len != default_sn_len) {
    2afc:	4286      	cmp	r6, r0
    2afe:	d010      	beq.n	2b22 <usb_fix_ascii_sn_string_descriptor+0x42>
    2b00:	4b0c      	ldr	r3, [pc, #48]	; (2b34 <usb_fix_ascii_sn_string_descriptor+0x54>)
    2b02:	4a0d      	ldr	r2, [pc, #52]	; (2b38 <usb_fix_ascii_sn_string_descriptor+0x58>)
    2b04:	1a9b      	subs	r3, r3, r2
    2b06:	08db      	lsrs	r3, r3, #3
		LOG_ERR("the new SN descriptor doesn't have the same "
    2b08:	f04f 0100 	mov.w	r1, #0
    2b0c:	2201      	movs	r2, #1
    2b0e:	f362 0102 	bfi	r1, r2, #0, #3
    2b12:	f36f 01c5 	bfc	r1, #3, #3
    2b16:	f363 118f 	bfi	r1, r3, #6, #10
    2b1a:	4808      	ldr	r0, [pc, #32]	; (2b3c <usb_fix_ascii_sn_string_descriptor+0x5c>)
    2b1c:	f7fe fe4e 	bl	17bc <log_0>
		return;
    2b20:	e7e8      	b.n	2af4 <usb_fix_ascii_sn_string_descriptor+0x14>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    2b22:	4632      	mov	r2, r6
    2b24:	4629      	mov	r1, r5
    2b26:	1ca0      	adds	r0, r4, #2
    2b28:	f00a faad 	bl	d086 <memcpy>
    2b2c:	e7e2      	b.n	2af4 <usb_fix_ascii_sn_string_descriptor+0x14>
    2b2e:	bf00      	nop
    2b30:	0000ebe0 	.word	0x0000ebe0
    2b34:	0000e874 	.word	0x0000e874
    2b38:	0000e82c 	.word	0x0000e82c
    2b3c:	0000ebf4 	.word	0x0000ebf4

00002b40 <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
    2b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2b44:	b082      	sub	sp, #8
    2b46:	4604      	mov	r4, r0
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	uint8_t numof_ifaces = 0U;
	uint8_t str_descr_idx = 0U;
	uint32_t requested_ep = BIT(16) | BIT(0);
    2b48:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    2b4c:	9301      	str	r3, [sp, #4]
	uint8_t str_descr_idx = 0U;
    2b4e:	2500      	movs	r5, #0
	uint8_t numof_ifaces = 0U;
    2b50:	462f      	mov	r7, r5
	struct usb_cfg_data *cfg_data = NULL;
    2b52:	46a8      	mov	r8, r5
	struct usb_cfg_descriptor *cfg_descr = NULL;
    2b54:	462e      	mov	r6, r5

	while (head->bLength != 0U) {
    2b56:	e062      	b.n	2c1e <usb_fix_descriptor+0xde>
			LOG_DBG("Association descriptor %p", head);
			break;
		case USB_DESC_INTERFACE:
			if_descr = (struct usb_if_descriptor *)head;
			LOG_DBG("Interface descriptor %p", head);
			if (if_descr->bAlternateSetting) {
    2b58:	78e3      	ldrb	r3, [r4, #3]
    2b5a:	2b00      	cmp	r3, #0
    2b5c:	d15d      	bne.n	2c1a <usb_fix_descriptor+0xda>
				LOG_DBG("Skip alternate interface");
				break;
			}

			if (if_descr->bInterfaceNumber == 0U) {
    2b5e:	78a3      	ldrb	r3, [r4, #2]
    2b60:	b94b      	cbnz	r3, 2b76 <usb_fix_descriptor+0x36>
				cfg_data = usb_get_cfg_data(if_descr);
    2b62:	4620      	mov	r0, r4
    2b64:	f7ff ff5a 	bl	2a1c <usb_get_cfg_data>
				if (!cfg_data) {
    2b68:	4680      	mov	r8, r0
    2b6a:	b138      	cbz	r0, 2b7c <usb_fix_descriptor+0x3c>
					LOG_ERR("There is no usb_cfg_data "
						"for %p", head);
					return -1;
				}

				if (cfg_data->interface_config) {
    2b6c:	6883      	ldr	r3, [r0, #8]
    2b6e:	b113      	cbz	r3, 2b76 <usb_fix_descriptor+0x36>
					cfg_data->interface_config(head,
    2b70:	4639      	mov	r1, r7
    2b72:	4620      	mov	r0, r4
    2b74:	4798      	blx	r3
							numof_ifaces);
				}
			}

			numof_ifaces++;
    2b76:	3701      	adds	r7, #1
    2b78:	b2ff      	uxtb	r7, r7
			break;
    2b7a:	e04e      	b.n	2c1a <usb_fix_descriptor+0xda>
    2b7c:	4b46      	ldr	r3, [pc, #280]	; (2c98 <usb_fix_descriptor+0x158>)
    2b7e:	4a47      	ldr	r2, [pc, #284]	; (2c9c <usb_fix_descriptor+0x15c>)
    2b80:	1a9b      	subs	r3, r3, r2
    2b82:	08db      	lsrs	r3, r3, #3
					LOG_ERR("There is no usb_cfg_data "
    2b84:	f04f 0200 	mov.w	r2, #0
    2b88:	2101      	movs	r1, #1
    2b8a:	f361 0202 	bfi	r2, r1, #0, #3
    2b8e:	f36f 02c5 	bfc	r2, #3, #3
    2b92:	f363 128f 	bfi	r2, r3, #6, #10
    2b96:	4621      	mov	r1, r4
    2b98:	4841      	ldr	r0, [pc, #260]	; (2ca0 <usb_fix_descriptor+0x160>)
    2b9a:	f7fe fd9d 	bl	16d8 <log_1>
					return -1;
    2b9e:	f04f 30ff 	mov.w	r0, #4294967295
    2ba2:	e073      	b.n	2c8c <usb_fix_descriptor+0x14c>
		case USB_DESC_ENDPOINT:
			if (!cfg_data) {
    2ba4:	f1b8 0f00 	cmp.w	r8, #0
    2ba8:	d018      	beq.n	2bdc <usb_fix_descriptor+0x9c>
				return -1;
			}

			LOG_DBG("Endpoint descriptor %p", head);
			ep_descr = (struct usb_ep_descriptor *)head;
			if (usb_validate_ep_cfg_data(ep_descr,
    2baa:	aa01      	add	r2, sp, #4
    2bac:	4641      	mov	r1, r8
    2bae:	4620      	mov	r0, r4
    2bb0:	f009 ffc0 	bl	cb34 <usb_validate_ep_cfg_data>
    2bb4:	b388      	cbz	r0, 2c1a <usb_fix_descriptor+0xda>
    2bb6:	4b38      	ldr	r3, [pc, #224]	; (2c98 <usb_fix_descriptor+0x158>)
    2bb8:	4a38      	ldr	r2, [pc, #224]	; (2c9c <usb_fix_descriptor+0x15c>)
    2bba:	1a9b      	subs	r3, r3, r2
    2bbc:	08db      	lsrs	r3, r3, #3
						     cfg_data,
						     &requested_ep)) {
				LOG_ERR("Failed to validate endpoints");
    2bbe:	f04f 0100 	mov.w	r1, #0
    2bc2:	2201      	movs	r2, #1
    2bc4:	f362 0102 	bfi	r1, r2, #0, #3
    2bc8:	f36f 01c5 	bfc	r1, #3, #3
    2bcc:	f363 118f 	bfi	r1, r3, #6, #10
    2bd0:	4834      	ldr	r0, [pc, #208]	; (2ca4 <usb_fix_descriptor+0x164>)
    2bd2:	f7fe fdf3 	bl	17bc <log_0>
				return -1;
    2bd6:	f04f 30ff 	mov.w	r0, #4294967295
    2bda:	e057      	b.n	2c8c <usb_fix_descriptor+0x14c>
    2bdc:	4b2e      	ldr	r3, [pc, #184]	; (2c98 <usb_fix_descriptor+0x158>)
    2bde:	4a2f      	ldr	r2, [pc, #188]	; (2c9c <usb_fix_descriptor+0x15c>)
    2be0:	1a9b      	subs	r3, r3, r2
    2be2:	08db      	lsrs	r3, r3, #3
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
    2be4:	f04f 0100 	mov.w	r1, #0
    2be8:	2201      	movs	r2, #1
    2bea:	f362 0102 	bfi	r1, r2, #0, #3
    2bee:	f36f 01c5 	bfc	r1, #3, #3
    2bf2:	f363 118f 	bfi	r1, r3, #6, #10
    2bf6:	482c      	ldr	r0, [pc, #176]	; (2ca8 <usb_fix_descriptor+0x168>)
    2bf8:	f7fe fde0 	bl	17bc <log_0>
				return -1;
    2bfc:	f04f 30ff 	mov.w	r0, #4294967295
    2c00:	e044      	b.n	2c8c <usb_fix_descriptor+0x14c>
		case 0:
		case USB_DESC_STRING:
			/*
			 * Copy runtime SN string descriptor first, if has
			 */
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    2c02:	2d03      	cmp	r5, #3
    2c04:	d020      	beq.n	2c48 <usb_fix_descriptor+0x108>
			}
			/*
			 * Skip language descriptor but correct
			 * wTotalLength and bNumInterfaces once.
			 */
			if (str_descr_idx) {
    2c06:	bb1d      	cbnz	r5, 2c50 <usb_fix_descriptor+0x110>
				ascii7_to_utf16le(head);
			} else {
				if (!cfg_descr) {
    2c08:	b336      	cbz	r6, 2c58 <usb_fix_descriptor+0x118>
					return -1;
				}

				LOG_DBG("Now the wTotalLength is %zd",
					(uint8_t *)head - (uint8_t *)cfg_descr);
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    2c0a:	1ba3      	subs	r3, r4, r6
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    2c0c:	70b3      	strb	r3, [r6, #2]
	dst[1] = val >> 8;
    2c0e:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2c12:	70f3      	strb	r3, [r6, #3]
					     (uint8_t *)&cfg_descr->wTotalLength);
				cfg_descr->bNumInterfaces = numof_ifaces;
    2c14:	7137      	strb	r7, [r6, #4]
			}

			str_descr_idx += 1U;
    2c16:	3501      	adds	r5, #1
    2c18:	b2ed      	uxtb	r5, r5
		default:
			break;
		}

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    2c1a:	7823      	ldrb	r3, [r4, #0]
    2c1c:	441c      	add	r4, r3
	while (head->bLength != 0U) {
    2c1e:	7823      	ldrb	r3, [r4, #0]
    2c20:	b37b      	cbz	r3, 2c82 <usb_fix_descriptor+0x142>
		switch (head->bDescriptorType) {
    2c22:	7863      	ldrb	r3, [r4, #1]
    2c24:	2b05      	cmp	r3, #5
    2c26:	d8f8      	bhi.n	2c1a <usb_fix_descriptor+0xda>
    2c28:	a201      	add	r2, pc, #4	; (adr r2, 2c30 <usb_fix_descriptor+0xf0>)
    2c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2c2e:	bf00      	nop
    2c30:	00002c03 	.word	0x00002c03
    2c34:	00002c1b 	.word	0x00002c1b
    2c38:	00002c7f 	.word	0x00002c7f
    2c3c:	00002c03 	.word	0x00002c03
    2c40:	00002b59 	.word	0x00002b59
    2c44:	00002ba5 	.word	0x00002ba5
				usb_fix_ascii_sn_string_descriptor(sn);
    2c48:	4620      	mov	r0, r4
    2c4a:	f7ff ff49 	bl	2ae0 <usb_fix_ascii_sn_string_descriptor>
    2c4e:	e7da      	b.n	2c06 <usb_fix_descriptor+0xc6>
				ascii7_to_utf16le(head);
    2c50:	4620      	mov	r0, r4
    2c52:	f009 ff5b 	bl	cb0c <ascii7_to_utf16le>
    2c56:	e7de      	b.n	2c16 <usb_fix_descriptor+0xd6>
    2c58:	4b0f      	ldr	r3, [pc, #60]	; (2c98 <usb_fix_descriptor+0x158>)
    2c5a:	4a10      	ldr	r2, [pc, #64]	; (2c9c <usb_fix_descriptor+0x15c>)
    2c5c:	1a9b      	subs	r3, r3, r2
    2c5e:	08db      	lsrs	r3, r3, #3
					LOG_ERR("Incomplete device descriptor");
    2c60:	f04f 0100 	mov.w	r1, #0
    2c64:	2201      	movs	r2, #1
    2c66:	f362 0102 	bfi	r1, r2, #0, #3
    2c6a:	f36f 01c5 	bfc	r1, #3, #3
    2c6e:	f363 118f 	bfi	r1, r3, #6, #10
    2c72:	480e      	ldr	r0, [pc, #56]	; (2cac <usb_fix_descriptor+0x16c>)
    2c74:	f7fe fda2 	bl	17bc <log_0>
					return -1;
    2c78:	f04f 30ff 	mov.w	r0, #4294967295
    2c7c:	e006      	b.n	2c8c <usb_fix_descriptor+0x14c>
			cfg_descr = (struct usb_cfg_descriptor *)head;
    2c7e:	4626      	mov	r6, r4
    2c80:	e7cb      	b.n	2c1a <usb_fix_descriptor+0xda>
	}

	if ((head + 1) != __usb_descriptor_end) {
    2c82:	1ca0      	adds	r0, r4, #2
    2c84:	4b0a      	ldr	r3, [pc, #40]	; (2cb0 <usb_fix_descriptor+0x170>)
    2c86:	4298      	cmp	r0, r3
    2c88:	d103      	bne.n	2c92 <usb_fix_descriptor+0x152>
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
	}

	return 0;
    2c8a:	2000      	movs	r0, #0
}
    2c8c:	b002      	add	sp, #8
    2c8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return usb_fix_descriptor(head + 1);
    2c92:	f7ff ff55 	bl	2b40 <usb_fix_descriptor>
    2c96:	e7f9      	b.n	2c8c <usb_fix_descriptor+0x14c>
    2c98:	0000e874 	.word	0x0000e874
    2c9c:	0000e82c 	.word	0x0000e82c
    2ca0:	0000ec40 	.word	0x0000ec40
    2ca4:	0000eca4 	.word	0x0000eca4
    2ca8:	0000ec60 	.word	0x0000ec60
    2cac:	0000ecc4 	.word	0x0000ecc4
    2cb0:	20000343 	.word	0x20000343

00002cb4 <usb_get_device_descriptor>:


uint8_t *usb_get_device_descriptor(void)
{
    2cb4:	b508      	push	{r3, lr}
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
    2cb6:	480c      	ldr	r0, [pc, #48]	; (2ce8 <usb_get_device_descriptor+0x34>)
    2cb8:	f7ff ff42 	bl	2b40 <usb_fix_descriptor>
    2cbc:	b908      	cbnz	r0, 2cc2 <usb_get_device_descriptor+0xe>
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
    2cbe:	480a      	ldr	r0, [pc, #40]	; (2ce8 <usb_get_device_descriptor+0x34>)
}
    2cc0:	bd08      	pop	{r3, pc}
    2cc2:	4b0a      	ldr	r3, [pc, #40]	; (2cec <usb_get_device_descriptor+0x38>)
    2cc4:	4a0a      	ldr	r2, [pc, #40]	; (2cf0 <usb_get_device_descriptor+0x3c>)
    2cc6:	1a9b      	subs	r3, r3, r2
    2cc8:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to fixup USB descriptor");
    2cca:	f04f 0100 	mov.w	r1, #0
    2cce:	2201      	movs	r2, #1
    2cd0:	f362 0102 	bfi	r1, r2, #0, #3
    2cd4:	f36f 01c5 	bfc	r1, #3, #3
    2cd8:	f363 118f 	bfi	r1, r3, #6, #10
    2cdc:	4805      	ldr	r0, [pc, #20]	; (2cf4 <usb_get_device_descriptor+0x40>)
    2cde:	f7fe fd6d 	bl	17bc <log_0>
		return NULL;
    2ce2:	2000      	movs	r0, #0
    2ce4:	e7ec      	b.n	2cc0 <usb_get_device_descriptor+0xc>
    2ce6:	bf00      	nop
    2ce8:	20000284 	.word	0x20000284
    2cec:	0000e874 	.word	0x0000e874
    2cf0:	0000e82c 	.word	0x0000e82c
    2cf4:	0000ece4 	.word	0x0000ece4

00002cf8 <usb_ep_get_transfer>:
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2cf8:	2300      	movs	r3, #0
    2cfa:	e000      	b.n	2cfe <usb_ep_get_transfer+0x6>
    2cfc:	3301      	adds	r3, #1
    2cfe:	2b03      	cmp	r3, #3
    2d00:	dc0c      	bgt.n	2d1c <usb_ep_get_transfer+0x24>
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    2d02:	019a      	lsls	r2, r3, #6
    2d04:	4906      	ldr	r1, [pc, #24]	; (2d20 <usb_ep_get_transfer+0x28>)
    2d06:	5c8a      	ldrb	r2, [r1, r2]
    2d08:	4282      	cmp	r2, r0
    2d0a:	d1f7      	bne.n	2cfc <usb_ep_get_transfer+0x4>
    2d0c:	eb01 1283 	add.w	r2, r1, r3, lsl #6
    2d10:	6852      	ldr	r2, [r2, #4]
    2d12:	2a00      	cmp	r2, #0
    2d14:	d0f2      	beq.n	2cfc <usb_ep_get_transfer+0x4>
			return &ut_data[i];
    2d16:	eb01 1083 	add.w	r0, r1, r3, lsl #6
    2d1a:	4770      	bx	lr
		}
	}

	return NULL;
    2d1c:	2000      	movs	r0, #0
}
    2d1e:	4770      	bx	lr
    2d20:	20000dd4 	.word	0x20000dd4

00002d24 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    2d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2d28:	b082      	sub	sp, #8
    2d2a:	4604      	mov	r4, r0
	int ret = 0;
	uint32_t bytes;
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;
    2d2c:	f810 5c2c 	ldrb.w	r5, [r0, #-44]

	if (trans->status != -EBUSY) {
    2d30:	f850 3c28 	ldr.w	r3, [r0, #-40]
    2d34:	f113 0f10 	cmn.w	r3, #16
    2d38:	d10c      	bne.n	2d54 <usb_transfer_work+0x30>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    2d3a:	6903      	ldr	r3, [r0, #16]
    2d3c:	f013 0f02 	tst.w	r3, #2
    2d40:	d062      	beq.n	2e08 <usb_transfer_work+0xe4>
		if (!trans->bsize) {
    2d42:	f850 2c20 	ldr.w	r2, [r0, #-32]
    2d46:	bb82      	cbnz	r2, 2daa <usb_transfer_work+0x86>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    2d48:	f013 0f04 	tst.w	r3, #4
    2d4c:	d026      	beq.n	2d9c <usb_transfer_work+0x78>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
			}
			trans->status = 0;
    2d4e:	2300      	movs	r3, #0
    2d50:	f844 3c28 	str.w	r3, [r4, #-40]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    2d54:	f854 3c28 	ldr.w	r3, [r4, #-40]
    2d58:	f113 0f10 	cmn.w	r3, #16
    2d5c:	d01b      	beq.n	2d96 <usb_transfer_work+0x72>
    2d5e:	f854 6c18 	ldr.w	r6, [r4, #-24]
    2d62:	b1c6      	cbz	r6, 2d96 <usb_transfer_work+0x72>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    2d64:	f854 7c1c 	ldr.w	r7, [r4, #-28]
		void *priv = trans->priv;
    2d68:	f854 8c14 	ldr.w	r8, [r4, #-20]

		if (k_is_in_isr()) {
    2d6c:	f00a ffcd 	bl	dd0a <k_is_in_isr>
    2d70:	2800      	cmp	r0, #0
    2d72:	f040 808f 	bne.w	2e94 <usb_transfer_work+0x170>
		}

		LOG_DBG("Transfer done, ep 0x%02x, status %d, size %zu",
			trans->ep, trans->status, trans->tsize);

		trans->cb = NULL;
    2d76:	2300      	movs	r3, #0
    2d78:	f844 3c18 	str.w	r3, [r4, #-24]
		k_sem_give(&trans->sem);
    2d7c:	f1a4 0010 	sub.w	r0, r4, #16
	z_impl_k_sem_give(sem);
    2d80:	f007 f9de 	bl	a140 <z_impl_k_sem_give>

		/* Transfer completion callback */
		if (trans->status != -ECANCELED) {
    2d84:	f854 3c28 	ldr.w	r3, [r4, #-40]
    2d88:	f113 0f8c 	cmn.w	r3, #140	; 0x8c
    2d8c:	d003      	beq.n	2d96 <usb_transfer_work+0x72>
			cb(ep, tsize, priv);
    2d8e:	4642      	mov	r2, r8
    2d90:	4639      	mov	r1, r7
    2d92:	4628      	mov	r0, r5
    2d94:	47b0      	blx	r6
		}
	}
}
    2d96:	b002      	add	sp, #8
    2d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				usb_write(ep, NULL, 0, NULL);
    2d9c:	2300      	movs	r3, #0
    2d9e:	461a      	mov	r2, r3
    2da0:	4619      	mov	r1, r3
    2da2:	4628      	mov	r0, r5
    2da4:	f009 fe93 	bl	cace <usb_write>
    2da8:	e7d1      	b.n	2d4e <usb_transfer_work+0x2a>
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    2daa:	ab01      	add	r3, sp, #4
    2dac:	f850 1c24 	ldr.w	r1, [r0, #-36]
    2db0:	4628      	mov	r0, r5
    2db2:	f009 fe8c 	bl	cace <usb_write>
		if (ret) {
    2db6:	4601      	mov	r1, r0
    2db8:	b980      	cbnz	r0, 2ddc <usb_transfer_work+0xb8>
		trans->buffer += bytes;
    2dba:	f854 3c24 	ldr.w	r3, [r4, #-36]
    2dbe:	9a01      	ldr	r2, [sp, #4]
    2dc0:	4413      	add	r3, r2
    2dc2:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    2dc6:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2dca:	1a9b      	subs	r3, r3, r2
    2dcc:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    2dd0:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    2dd4:	4413      	add	r3, r2
    2dd6:	f844 3c1c 	str.w	r3, [r4, #-28]
    2dda:	e7bb      	b.n	2d54 <usb_transfer_work+0x30>
    2ddc:	4a30      	ldr	r2, [pc, #192]	; (2ea0 <usb_transfer_work+0x17c>)
    2dde:	4b31      	ldr	r3, [pc, #196]	; (2ea4 <usb_transfer_work+0x180>)
    2de0:	1ad2      	subs	r2, r2, r3
    2de2:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    2de4:	f04f 0300 	mov.w	r3, #0
    2de8:	2001      	movs	r0, #1
    2dea:	f360 0302 	bfi	r3, r0, #0, #3
    2dee:	f36f 03c5 	bfc	r3, #3, #3
    2df2:	f362 138f 	bfi	r3, r2, #6, #10
    2df6:	462a      	mov	r2, r5
    2df8:	482b      	ldr	r0, [pc, #172]	; (2ea8 <usb_transfer_work+0x184>)
    2dfa:	f7fe fca3 	bl	1744 <log_2>
			trans->status = -EINVAL;
    2dfe:	f06f 0315 	mvn.w	r3, #21
    2e02:	f844 3c28 	str.w	r3, [r4, #-40]
			goto done;
    2e06:	e7a5      	b.n	2d54 <usb_transfer_work+0x30>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    2e08:	ab01      	add	r3, sp, #4
    2e0a:	f850 2c20 	ldr.w	r2, [r0, #-32]
    2e0e:	f850 1c24 	ldr.w	r1, [r0, #-36]
    2e12:	4628      	mov	r0, r5
    2e14:	f002 ff90 	bl	5d38 <usb_dc_ep_read_wait>
		if (ret) {
    2e18:	4601      	mov	r1, r0
    2e1a:	b9a0      	cbnz	r0, 2e46 <usb_transfer_work+0x122>
		trans->buffer += bytes;
    2e1c:	f854 3c24 	ldr.w	r3, [r4, #-36]
    2e20:	9e01      	ldr	r6, [sp, #4]
    2e22:	4433      	add	r3, r6
    2e24:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    2e28:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2e2c:	1b9b      	subs	r3, r3, r6
    2e2e:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    2e32:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    2e36:	4433      	add	r3, r6
    2e38:	f844 3c1c 	str.w	r3, [r4, #-28]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    2e3c:	b9ce      	cbnz	r6, 2e72 <usb_transfer_work+0x14e>
			trans->status = 0;
    2e3e:	2300      	movs	r3, #0
    2e40:	f844 3c28 	str.w	r3, [r4, #-40]
			goto done;
    2e44:	e786      	b.n	2d54 <usb_transfer_work+0x30>
    2e46:	4a16      	ldr	r2, [pc, #88]	; (2ea0 <usb_transfer_work+0x17c>)
    2e48:	4b16      	ldr	r3, [pc, #88]	; (2ea4 <usb_transfer_work+0x180>)
    2e4a:	1ad2      	subs	r2, r2, r3
    2e4c:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    2e4e:	f04f 0300 	mov.w	r3, #0
    2e52:	2001      	movs	r0, #1
    2e54:	f360 0302 	bfi	r3, r0, #0, #3
    2e58:	f36f 03c5 	bfc	r3, #3, #3
    2e5c:	f362 138f 	bfi	r3, r2, #6, #10
    2e60:	462a      	mov	r2, r5
    2e62:	4811      	ldr	r0, [pc, #68]	; (2ea8 <usb_transfer_work+0x184>)
    2e64:	f7fe fc6e 	bl	1744 <log_2>
			trans->status = -EINVAL;
    2e68:	f06f 0315 	mvn.w	r3, #21
    2e6c:	f844 3c28 	str.w	r3, [r4, #-40]
			goto done;
    2e70:	e770      	b.n	2d54 <usb_transfer_work+0x30>
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    2e72:	4628      	mov	r0, r5
    2e74:	f003 f8bc 	bl	5ff0 <usb_dc_ep_mps>
    2e78:	fbb6 f3f0 	udiv	r3, r6, r0
    2e7c:	fb00 6013 	mls	r0, r0, r3, r6
    2e80:	2800      	cmp	r0, #0
    2e82:	d1dc      	bne.n	2e3e <usb_transfer_work+0x11a>
    2e84:	f854 3c20 	ldr.w	r3, [r4, #-32]
    2e88:	2b00      	cmp	r3, #0
    2e8a:	d0d8      	beq.n	2e3e <usb_transfer_work+0x11a>
		usb_dc_ep_read_continue(ep);
    2e8c:	4628      	mov	r0, r5
    2e8e:	f002 ffcd 	bl	5e2c <usb_dc_ep_read_continue>
    2e92:	e75f      	b.n	2d54 <usb_transfer_work+0x30>
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2e94:	4621      	mov	r1, r4
    2e96:	4805      	ldr	r0, [pc, #20]	; (2eac <usb_transfer_work+0x188>)
    2e98:	f00b f83d 	bl	df16 <k_work_submit_to_queue>
			return;
    2e9c:	e77b      	b.n	2d96 <usb_transfer_work+0x72>
    2e9e:	bf00      	nop
    2ea0:	0000e88c 	.word	0x0000e88c
    2ea4:	0000e82c 	.word	0x0000e82c
    2ea8:	0000ed14 	.word	0x0000ed14
    2eac:	20000450 	.word	0x20000450

00002eb0 <usb_transfer_ep_callback>:

void usb_transfer_ep_callback(uint8_t ep, enum usb_dc_ep_cb_status_code status)
{
    2eb0:	b570      	push	{r4, r5, r6, lr}
    2eb2:	b082      	sub	sp, #8
    2eb4:	4606      	mov	r6, r0
    2eb6:	460c      	mov	r4, r1
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    2eb8:	f7ff ff1e 	bl	2cf8 <usb_ep_get_transfer>

	if (status != USB_DC_EP_DATA_IN && status != USB_DC_EP_DATA_OUT) {
    2ebc:	1e63      	subs	r3, r4, #1
    2ebe:	b2db      	uxtb	r3, r3
    2ec0:	2b01      	cmp	r3, #1
    2ec2:	d80a      	bhi.n	2eda <usb_transfer_ep_callback+0x2a>
    2ec4:	4605      	mov	r5, r0
		return;
	}

	if (!trans) {
    2ec6:	b150      	cbz	r0, 2ede <usb_transfer_ep_callback+0x2e>
			LOG_ERR("RX data lost, no transfer");
		}
		return;
	}

	if (!k_is_in_isr() || (status == USB_DC_EP_DATA_OUT)) {
    2ec8:	f00a ff1f 	bl	dd0a <k_is_in_isr>
    2ecc:	b108      	cbz	r0, 2ed2 <usb_transfer_ep_callback+0x22>
    2ece:	2c01      	cmp	r4, #1
    2ed0:	d122      	bne.n	2f18 <usb_transfer_ep_callback+0x68>
		/* If we are not in IRQ context, no need to defer work */
		/* Read (out) needs to be done from ep_callback */
		usb_transfer_work(&trans->work);
    2ed2:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    2ed6:	f7ff ff25 	bl	2d24 <usb_transfer_work>
	} else {
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
	}
}
    2eda:	b002      	add	sp, #8
    2edc:	bd70      	pop	{r4, r5, r6, pc}
		if (status == USB_DC_EP_DATA_OUT) {
    2ede:	2c01      	cmp	r4, #1
    2ee0:	d1fb      	bne.n	2eda <usb_transfer_ep_callback+0x2a>
				usb_dc_ep_read_wait(ep, &data, 1, &bytes);
    2ee2:	ab01      	add	r3, sp, #4
    2ee4:	2201      	movs	r2, #1
    2ee6:	f10d 0103 	add.w	r1, sp, #3
    2eea:	4630      	mov	r0, r6
    2eec:	f002 ff24 	bl	5d38 <usb_dc_ep_read_wait>
			} while (bytes);
    2ef0:	9b01      	ldr	r3, [sp, #4]
    2ef2:	2b00      	cmp	r3, #0
    2ef4:	d1f5      	bne.n	2ee2 <usb_transfer_ep_callback+0x32>
    2ef6:	4b0b      	ldr	r3, [pc, #44]	; (2f24 <usb_transfer_ep_callback+0x74>)
    2ef8:	4a0b      	ldr	r2, [pc, #44]	; (2f28 <usb_transfer_ep_callback+0x78>)
    2efa:	1a9b      	subs	r3, r3, r2
    2efc:	08db      	lsrs	r3, r3, #3
			LOG_ERR("RX data lost, no transfer");
    2efe:	f04f 0100 	mov.w	r1, #0
    2f02:	2201      	movs	r2, #1
    2f04:	f362 0102 	bfi	r1, r2, #0, #3
    2f08:	f36f 01c5 	bfc	r1, #3, #3
    2f0c:	f363 118f 	bfi	r1, r3, #6, #10
    2f10:	4806      	ldr	r0, [pc, #24]	; (2f2c <usb_transfer_ep_callback+0x7c>)
    2f12:	f7fe fc53 	bl	17bc <log_0>
		return;
    2f16:	e7e0      	b.n	2eda <usb_transfer_ep_callback+0x2a>
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2f18:	f105 012c 	add.w	r1, r5, #44	; 0x2c
    2f1c:	4804      	ldr	r0, [pc, #16]	; (2f30 <usb_transfer_ep_callback+0x80>)
    2f1e:	f00a fffa 	bl	df16 <k_work_submit_to_queue>
    2f22:	e7da      	b.n	2eda <usb_transfer_ep_callback+0x2a>
    2f24:	0000e88c 	.word	0x0000e88c
    2f28:	0000e82c 	.word	0x0000e82c
    2f2c:	0000ed34 	.word	0x0000ed34
    2f30:	20000450 	.word	0x20000450

00002f34 <usb_transfer>:

int usb_transfer(uint8_t ep, uint8_t *data, size_t dlen, unsigned int flags,
		 usb_transfer_callback cb, void *cb_data)
{
    2f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2f38:	4605      	mov	r5, r0
    2f3a:	4688      	mov	r8, r1
    2f3c:	4617      	mov	r7, r2
    2f3e:	461e      	mov	r6, r3
	struct usb_transfer_data *trans = NULL;
	int i, key, ret = 0;

	/* Parallel transfer to same endpoint is not supported. */
	if (usb_transfer_is_busy(ep)) {
    2f40:	f009 fea2 	bl	cc88 <usb_transfer_is_busy>
    2f44:	2800      	cmp	r0, #0
    2f46:	f040 8083 	bne.w	3050 <CONFIG_USB_DEVICE_VID+0x6d>
	__asm__ volatile(
    2f4a:	f04f 0320 	mov.w	r3, #32
    2f4e:	f3ef 8911 	mrs	r9, BASEPRI
    2f52:	f383 8812 	msr	BASEPRI_MAX, r3
    2f56:	f3bf 8f6f 	isb	sy
	LOG_DBG("Transfer start, ep 0x%02x, data %p, dlen %zd",
		ep, data, dlen);

	key = irq_lock();

	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2f5a:	2400      	movs	r4, #0
    2f5c:	2c03      	cmp	r4, #3
    2f5e:	dc10      	bgt.n	2f82 <usb_transfer+0x4e>
		if (!k_sem_take(&ut_data[i].sem, K_NO_WAIT)) {
    2f60:	01a0      	lsls	r0, r4, #6
    2f62:	f100 0318 	add.w	r3, r0, #24
    2f66:	483c      	ldr	r0, [pc, #240]	; (3058 <CONFIG_USB_DEVICE_VID+0x75>)
    2f68:	4418      	add	r0, r3
    2f6a:	3004      	adds	r0, #4
	return z_impl_k_sem_take(sem, timeout);
    2f6c:	2200      	movs	r2, #0
    2f6e:	2300      	movs	r3, #0
    2f70:	f007 f90a 	bl	a188 <z_impl_k_sem_take>
    2f74:	b108      	cbz	r0, 2f7a <usb_transfer+0x46>
	for (i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2f76:	3401      	adds	r4, #1
    2f78:	e7f0      	b.n	2f5c <usb_transfer+0x28>
			trans = &ut_data[i];
    2f7a:	4837      	ldr	r0, [pc, #220]	; (3058 <CONFIG_USB_DEVICE_VID+0x75>)
    2f7c:	eb00 1484 	add.w	r4, r0, r4, lsl #6
			break;
    2f80:	e000      	b.n	2f84 <usb_transfer+0x50>
	struct usb_transfer_data *trans = NULL;
    2f82:	2400      	movs	r4, #0
		}
	}

	if (!trans) {
    2f84:	b344      	cbz	r4, 2fd8 <usb_transfer+0xa4>
		LOG_ERR("No transfer slot available");
		ret = -ENOMEM;
		goto done;
	}

	if (trans->status == -EBUSY) {
    2f86:	f8d4 a004 	ldr.w	sl, [r4, #4]
    2f8a:	f11a 0f10 	cmn.w	sl, #16
    2f8e:	d036      	beq.n	2ffe <CONFIG_USB_DEVICE_VID+0x1b>
		ret = -EBUSY;
		goto done;
	}

	/* Configure new transfer */
	trans->ep = ep;
    2f90:	7025      	strb	r5, [r4, #0]
	trans->buffer = data;
    2f92:	f8c4 8008 	str.w	r8, [r4, #8]
	trans->bsize = dlen;
    2f96:	60e7      	str	r7, [r4, #12]
	trans->tsize = 0;
    2f98:	2300      	movs	r3, #0
    2f9a:	6123      	str	r3, [r4, #16]
	trans->cb = cb;
    2f9c:	9b08      	ldr	r3, [sp, #32]
    2f9e:	6163      	str	r3, [r4, #20]
	trans->flags = flags;
    2fa0:	63e6      	str	r6, [r4, #60]	; 0x3c
	trans->priv = cb_data;
    2fa2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2fa4:	61a3      	str	r3, [r4, #24]
	trans->status = -EBUSY;
    2fa6:	f06f 030f 	mvn.w	r3, #15
    2faa:	6063      	str	r3, [r4, #4]

	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    2fac:	4628      	mov	r0, r5
    2fae:	f003 f81f 	bl	5ff0 <usb_dc_ep_mps>
    2fb2:	2800      	cmp	r0, #0
    2fb4:	d139      	bne.n	302a <CONFIG_USB_DEVICE_VID+0x47>
		/* no need to send ZLP since last packet will be a short one */
		trans->flags |= USB_TRANS_NO_ZLP;
	}

	if (flags & USB_TRANS_WRITE) {
    2fb6:	f016 0f02 	tst.w	r6, #2
    2fba:	d044      	beq.n	3046 <CONFIG_USB_DEVICE_VID+0x63>
		/* start writing first chunk */
		k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    2fbc:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    2fc0:	4826      	ldr	r0, [pc, #152]	; (305c <CONFIG_USB_DEVICE_VID+0x79>)
    2fc2:	f00a ffa8 	bl	df16 <k_work_submit_to_queue>
	int i, key, ret = 0;
    2fc6:	f04f 0a00 	mov.w	sl, #0
	__asm__ volatile(
    2fca:	f389 8811 	msr	BASEPRI, r9
    2fce:	f3bf 8f6f 	isb	sy
	}

done:
	irq_unlock(key);
	return ret;
}
    2fd2:	4650      	mov	r0, sl
    2fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2fd8:	4b21      	ldr	r3, [pc, #132]	; (3060 <CONFIG_USB_DEVICE_VID+0x7d>)
    2fda:	4a22      	ldr	r2, [pc, #136]	; (3064 <CONFIG_USB_DEVICE_VID+0x81>)
    2fdc:	1a9b      	subs	r3, r3, r2
    2fde:	08db      	lsrs	r3, r3, #3
		LOG_ERR("No transfer slot available");
    2fe0:	f04f 0100 	mov.w	r1, #0
    2fe4:	2201      	movs	r2, #1
    2fe6:	f362 0102 	bfi	r1, r2, #0, #3
    2fea:	f36f 01c5 	bfc	r1, #3, #3
    2fee:	f363 118f 	bfi	r1, r3, #6, #10
    2ff2:	481d      	ldr	r0, [pc, #116]	; (3068 <CONFIG_USB_DEVICE_VID+0x85>)
    2ff4:	f7fe fbe2 	bl	17bc <log_0>
		ret = -ENOMEM;
    2ff8:	f06f 0a0b 	mvn.w	sl, #11
		goto done;
    2ffc:	e7e5      	b.n	2fca <usb_transfer+0x96>
    2ffe:	4b18      	ldr	r3, [pc, #96]	; (3060 <CONFIG_USB_DEVICE_VID+0x7d>)
    3000:	4a18      	ldr	r2, [pc, #96]	; (3064 <CONFIG_USB_DEVICE_VID+0x81>)
    3002:	1a9b      	subs	r3, r3, r2
    3004:	08db      	lsrs	r3, r3, #3
		LOG_ERR("A transfer is already ongoing, ep 0x%02x", ep);
    3006:	f04f 0200 	mov.w	r2, #0
    300a:	2101      	movs	r1, #1
    300c:	f361 0202 	bfi	r2, r1, #0, #3
    3010:	f36f 02c5 	bfc	r2, #3, #3
    3014:	f363 128f 	bfi	r2, r3, #6, #10
    3018:	4629      	mov	r1, r5
    301a:	4814      	ldr	r0, [pc, #80]	; (306c <CONFIG_USB_DEVICE_VID+0x89>)
    301c:	f7fe fb5c 	bl	16d8 <log_1>
		k_sem_give(&trans->sem);
    3020:	f104 001c 	add.w	r0, r4, #28
	z_impl_k_sem_give(sem);
    3024:	f007 f88c 	bl	a140 <z_impl_k_sem_give>
		goto done;
    3028:	e7cf      	b.n	2fca <usb_transfer+0x96>
	if (usb_dc_ep_mps(ep) && (dlen % usb_dc_ep_mps(ep))) {
    302a:	4628      	mov	r0, r5
    302c:	f002 ffe0 	bl	5ff0 <usb_dc_ep_mps>
    3030:	fbb7 f3f0 	udiv	r3, r7, r0
    3034:	fb00 7013 	mls	r0, r0, r3, r7
    3038:	2800      	cmp	r0, #0
    303a:	d0bc      	beq.n	2fb6 <usb_transfer+0x82>
		trans->flags |= USB_TRANS_NO_ZLP;
    303c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    303e:	f043 0304 	orr.w	r3, r3, #4
    3042:	63e3      	str	r3, [r4, #60]	; 0x3c
    3044:	e7b7      	b.n	2fb6 <usb_transfer+0x82>
		ret = usb_dc_ep_read_continue(ep);
    3046:	4628      	mov	r0, r5
    3048:	f002 fef0 	bl	5e2c <usb_dc_ep_read_continue>
    304c:	4682      	mov	sl, r0
    304e:	e7bc      	b.n	2fca <usb_transfer+0x96>
		return -EBUSY;
    3050:	f06f 0a0f 	mvn.w	sl, #15
    3054:	e7bd      	b.n	2fd2 <usb_transfer+0x9e>
    3056:	bf00      	nop
    3058:	20000dd4 	.word	0x20000dd4
    305c:	20000450 	.word	0x20000450
    3060:	0000e88c 	.word	0x0000e88c
    3064:	0000e82c 	.word	0x0000e82c
    3068:	0000ed50 	.word	0x0000ed50
    306c:	0000ed6c 	.word	0x0000ed6c

00003070 <usb_cancel_transfer>:

void usb_cancel_transfer(uint8_t ep)
{
    3070:	b510      	push	{r4, lr}
	__asm__ volatile(
    3072:	f04f 0320 	mov.w	r3, #32
    3076:	f3ef 8411 	mrs	r4, BASEPRI
    307a:	f383 8812 	msr	BASEPRI_MAX, r3
    307e:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    3082:	f7ff fe39 	bl	2cf8 <usb_ep_get_transfer>
	if (!trans) {
    3086:	b120      	cbz	r0, 3092 <usb_cancel_transfer+0x22>
    3088:	4601      	mov	r1, r0
		goto done;
	}

	if (trans->status != -EBUSY) {
    308a:	6843      	ldr	r3, [r0, #4]
    308c:	f113 0f10 	cmn.w	r3, #16
    3090:	d004      	beq.n	309c <usb_cancel_transfer+0x2c>
	__asm__ volatile(
    3092:	f384 8811 	msr	BASEPRI, r4
    3096:	f3bf 8f6f 	isb	sy
	trans->status = -ECANCELED;
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);

done:
	irq_unlock(key);
}
    309a:	bd10      	pop	{r4, pc}
	trans->status = -ECANCELED;
    309c:	f06f 038b 	mvn.w	r3, #139	; 0x8b
    30a0:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    30a2:	312c      	adds	r1, #44	; 0x2c
    30a4:	4801      	ldr	r0, [pc, #4]	; (30ac <usb_cancel_transfer+0x3c>)
    30a6:	f00a ff36 	bl	df16 <k_work_submit_to_queue>
    30aa:	e7f2      	b.n	3092 <usb_cancel_transfer+0x22>
    30ac:	20000450 	.word	0x20000450

000030b0 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    30b0:	b538      	push	{r3, r4, r5, lr}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    30b2:	2400      	movs	r4, #0
    30b4:	e011      	b.n	30da <usb_cancel_transfers+0x2a>
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
			trans->status = -ECANCELED;
    30b6:	4b12      	ldr	r3, [pc, #72]	; (3100 <usb_cancel_transfers+0x50>)
    30b8:	01a1      	lsls	r1, r4, #6
    30ba:	eb03 1284 	add.w	r2, r3, r4, lsl #6
    30be:	f06f 008b 	mvn.w	r0, #139	; 0x8b
    30c2:	6050      	str	r0, [r2, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    30c4:	3128      	adds	r1, #40	; 0x28
    30c6:	4419      	add	r1, r3
    30c8:	3104      	adds	r1, #4
    30ca:	480e      	ldr	r0, [pc, #56]	; (3104 <usb_cancel_transfers+0x54>)
    30cc:	f00a ff23 	bl	df16 <k_work_submit_to_queue>
    30d0:	f385 8811 	msr	BASEPRI, r5
    30d4:	f3bf 8f6f 	isb	sy
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    30d8:	3401      	adds	r4, #1
    30da:	2c03      	cmp	r4, #3
    30dc:	dc0f      	bgt.n	30fe <usb_cancel_transfers+0x4e>
	__asm__ volatile(
    30de:	f04f 0320 	mov.w	r3, #32
    30e2:	f3ef 8511 	mrs	r5, BASEPRI
    30e6:	f383 8812 	msr	BASEPRI_MAX, r3
    30ea:	f3bf 8f6f 	isb	sy
		if (trans->status == -EBUSY) {
    30ee:	4b04      	ldr	r3, [pc, #16]	; (3100 <usb_cancel_transfers+0x50>)
    30f0:	eb03 1384 	add.w	r3, r3, r4, lsl #6
    30f4:	685b      	ldr	r3, [r3, #4]
    30f6:	f113 0f10 	cmn.w	r3, #16
    30fa:	d1e9      	bne.n	30d0 <usb_cancel_transfers+0x20>
    30fc:	e7db      	b.n	30b6 <usb_cancel_transfers+0x6>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    30fe:	bd38      	pop	{r3, r4, r5, pc}
    3100:	20000dd4 	.word	0x20000dd4
    3104:	20000450 	.word	0x20000450

00003108 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    3108:	b570      	push	{r4, r5, r6, lr}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    310a:	2600      	movs	r6, #0
    310c:	e011      	b.n	3132 <usb_transfer_init+0x2a>
		k_work_init(&ut_data[i].work, usb_transfer_work);
    310e:	4c0b      	ldr	r4, [pc, #44]	; (313c <usb_transfer_init+0x34>)
    3110:	01b5      	lsls	r5, r6, #6
    3112:	f105 0028 	add.w	r0, r5, #40	; 0x28
    3116:	4420      	add	r0, r4
    3118:	4909      	ldr	r1, [pc, #36]	; (3140 <usb_transfer_init+0x38>)
    311a:	3004      	adds	r0, #4
    311c:	f00a fef5 	bl	df0a <k_work_init>
		k_sem_init(&ut_data[i].sem, 1, 1);
    3120:	f105 0018 	add.w	r0, r5, #24
    3124:	4420      	add	r0, r4
    3126:	3004      	adds	r0, #4
	return z_impl_k_sem_init(sem, initial_count, limit);
    3128:	2201      	movs	r2, #1
    312a:	4611      	mov	r1, r2
    312c:	f00a fede 	bl	deec <z_impl_k_sem_init>
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    3130:	3601      	adds	r6, #1
    3132:	2e03      	cmp	r6, #3
    3134:	ddeb      	ble.n	310e <usb_transfer_init+0x6>
	}

	return 0;
}
    3136:	2000      	movs	r0, #0
    3138:	bd70      	pop	{r4, r5, r6, pc}
    313a:	bf00      	nop
    313c:	20000dd4 	.word	0x20000dd4
    3140:	00002d25 	.word	0x00002d25

00003144 <cdc_acm_class_handle_req>:
 *
 * @return  0 on success, negative errno code on fail.
 */
int cdc_acm_class_handle_req(struct usb_setup_packet *setup,
			     int32_t *len, uint8_t **data)
{
    3144:	b570      	push	{r4, r5, r6, lr}
    3146:	4604      	mov	r4, r0
    3148:	460e      	mov	r6, r1
    314a:	4615      	mov	r5, r2
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;
	uint32_t rate;
	uint32_t new_rate;

	common = usb_get_dev_data_by_iface(&cdc_acm_data_devlist,
    314c:	7901      	ldrb	r1, [r0, #4]
    314e:	481e      	ldr	r0, [pc, #120]	; (31c8 <cdc_acm_class_handle_req+0x84>)
    3150:	f009 fd66 	bl	cc20 <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
    3154:	b158      	cbz	r0, 316e <cdc_acm_class_handle_req+0x2a>
		return -ENODEV;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	if (usb_reqtype_is_to_device(setup)) {
    3156:	f994 2000 	ldrsb.w	r2, [r4]
    315a:	2a00      	cmp	r2, #0
    315c:	db27      	blt.n	31ae <cdc_acm_class_handle_req+0x6a>
		switch (setup->bRequest) {
    315e:	7862      	ldrb	r2, [r4, #1]
    3160:	2a20      	cmp	r2, #32
    3162:	d018      	beq.n	3196 <cdc_acm_class_handle_req+0x52>
    3164:	2a22      	cmp	r2, #34	; 0x22
    3166:	d01d      	beq.n	31a4 <cdc_acm_class_handle_req+0x60>
    3168:	f06f 0085 	mvn.w	r0, #133	; 0x85
    316c:	e028      	b.n	31c0 <cdc_acm_class_handle_req+0x7c>
    316e:	4b17      	ldr	r3, [pc, #92]	; (31cc <cdc_acm_class_handle_req+0x88>)
    3170:	4a17      	ldr	r2, [pc, #92]	; (31d0 <cdc_acm_class_handle_req+0x8c>)
    3172:	1a9b      	subs	r3, r3, r2
    3174:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Device data not found for interface %u",
    3176:	f04f 0200 	mov.w	r2, #0
    317a:	2102      	movs	r1, #2
    317c:	f361 0202 	bfi	r2, r1, #0, #3
    3180:	f36f 02c5 	bfc	r2, #3, #3
    3184:	f363 128f 	bfi	r2, r3, #6, #10
    3188:	88a1      	ldrh	r1, [r4, #4]
    318a:	4812      	ldr	r0, [pc, #72]	; (31d4 <cdc_acm_class_handle_req+0x90>)
    318c:	f7fe faa4 	bl	16d8 <log_1>
		return -ENODEV;
    3190:	f06f 0012 	mvn.w	r0, #18
    3194:	e014      	b.n	31c0 <cdc_acm_class_handle_req+0x7c>
		case SET_LINE_CODING:
			rate = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
			memcpy(&dev_data->line_coding, *data,
    3196:	2207      	movs	r2, #7
    3198:	6829      	ldr	r1, [r5, #0]
    319a:	380c      	subs	r0, #12
    319c:	f009 ff73 	bl	d086 <memcpy>
#if defined(CONFIG_CDC_ACM_DTE_RATE_CALLBACK_SUPPORT)
			if (rate != new_rate && dev_data->rate_cb != NULL) {
				dev_data->rate_cb(common->dev, new_rate);
			}
#endif
			return 0;
    31a0:	2000      	movs	r0, #0
    31a2:	e00d      	b.n	31c0 <cdc_acm_class_handle_req+0x7c>

		case SET_CONTROL_LINE_STATE:
			dev_data->line_state = (uint8_t)setup->wValue;
    31a4:	78a2      	ldrb	r2, [r4, #2]
    31a6:	f800 2c05 	strb.w	r2, [r0, #-5]
			LOG_DBG("CDC_SET_CONTROL_LINE_STATE 0x%x",
				dev_data->line_state);
			return 0;
    31aa:	2000      	movs	r0, #0
    31ac:	e008      	b.n	31c0 <cdc_acm_class_handle_req+0x7c>

		default:
			break;
		}
	} else {
		if (setup->bRequest == GET_LINE_CODING) {
    31ae:	7862      	ldrb	r2, [r4, #1]
    31b0:	2a21      	cmp	r2, #33	; 0x21
    31b2:	d106      	bne.n	31c2 <cdc_acm_class_handle_req+0x7e>
			*data = (uint8_t *)(&dev_data->line_coding);
    31b4:	f1a0 030c 	sub.w	r3, r0, #12
    31b8:	602b      	str	r3, [r5, #0]
			*len = sizeof(dev_data->line_coding);
    31ba:	2307      	movs	r3, #7
    31bc:	6033      	str	r3, [r6, #0]
			LOG_DBG("CDC_GET_LINE_CODING %d %d %d %d",
				sys_le32_to_cpu(dev_data->line_coding.dwDTERate),
				dev_data->line_coding.bCharFormat,
				dev_data->line_coding.bParityType,
				dev_data->line_coding.bDataBits);
			return 0;
    31be:	2000      	movs	r0, #0
	}

	LOG_DBG("CDC ACM bmRequestType 0x%02x bRequest 0x%02x unsupported",
		setup->bmRequestType, setup->bRequest);
	return -ENOTSUP;
}
    31c0:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOTSUP;
    31c2:	f06f 0085 	mvn.w	r0, #133	; 0x85
    31c6:	e7fb      	b.n	31c0 <cdc_acm_class_handle_req+0x7c>
    31c8:	20000ed4 	.word	0x20000ed4
    31cc:	0000e86c 	.word	0x0000e86c
    31d0:	0000e82c 	.word	0x0000e82c
    31d4:	0000eda8 	.word	0x0000eda8

000031d8 <cdc_acm_int_in>:
 * @param ep_status Endpoint status code.
 *
 * @return  N/A.
 */
static void cdc_acm_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
{
    31d8:	b510      	push	{r4, lr}
    31da:	4604      	mov	r4, r0
	struct cdc_acm_dev_data_t *dev_data;
	struct usb_dev_data *common;

	ARG_UNUSED(ep_status);

	common = usb_get_dev_data_by_ep(&cdc_acm_data_devlist, ep);
    31dc:	4601      	mov	r1, r0
    31de:	480d      	ldr	r0, [pc, #52]	; (3214 <cdc_acm_int_in+0x3c>)
    31e0:	f009 fd32 	bl	cc48 <usb_get_dev_data_by_ep>
	if (common == NULL) {
    31e4:	b118      	cbz	r0, 31ee <cdc_acm_int_in+0x16>
		return;
	}

	dev_data = CONTAINER_OF(common, struct cdc_acm_dev_data_t, common);

	dev_data->notification_sent = 1U;
    31e6:	2201      	movs	r2, #1
    31e8:	f800 2c03 	strb.w	r2, [r0, #-3]
	LOG_DBG("CDC_IntIN EP[%x]\r", ep);
}
    31ec:	bd10      	pop	{r4, pc}
    31ee:	4b0a      	ldr	r3, [pc, #40]	; (3218 <cdc_acm_int_in+0x40>)
    31f0:	4a0a      	ldr	r2, [pc, #40]	; (321c <cdc_acm_int_in+0x44>)
    31f2:	1a9b      	subs	r3, r3, r2
    31f4:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Device data not found for endpoint %u", ep);
    31f6:	f04f 0200 	mov.w	r2, #0
    31fa:	2102      	movs	r1, #2
    31fc:	f361 0202 	bfi	r2, r1, #0, #3
    3200:	f36f 02c5 	bfc	r2, #3, #3
    3204:	f363 128f 	bfi	r2, r3, #6, #10
    3208:	4621      	mov	r1, r4
    320a:	4805      	ldr	r0, [pc, #20]	; (3220 <cdc_acm_int_in+0x48>)
    320c:	f7fe fa64 	bl	16d8 <log_1>
		return;
    3210:	e7ec      	b.n	31ec <cdc_acm_int_in+0x14>
    3212:	bf00      	nop
    3214:	20000ed4 	.word	0x20000ed4
    3218:	0000e86c 	.word	0x0000e86c
    321c:	0000e82c 	.word	0x0000e82c
    3220:	0000edd0 	.word	0x0000edd0

00003224 <cdc_acm_irq_rx_enable>:
 * @param dev CDC ACM device struct.
 *
 * @return N/A
 */
static void cdc_acm_irq_rx_enable(const struct device *dev)
{
    3224:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    3226:	6901      	ldr	r1, [r0, #16]

	dev_data->rx_irq_ena = true;
    3228:	2301      	movs	r3, #1
    322a:	f881 302b 	strb.w	r3, [r1, #43]	; 0x2b

	if (dev_data->cb && dev_data->rx_ready) {
    322e:	680b      	ldr	r3, [r1, #0]
    3230:	b113      	cbz	r3, 3238 <cdc_acm_irq_rx_enable+0x14>
    3232:	f891 3029 	ldrb.w	r3, [r1, #41]	; 0x29
    3236:	b903      	cbnz	r3, 323a <cdc_acm_irq_rx_enable+0x16>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
	}
}
    3238:	bd08      	pop	{r3, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    323a:	3108      	adds	r1, #8
    323c:	4801      	ldr	r0, [pc, #4]	; (3244 <cdc_acm_irq_rx_enable+0x20>)
    323e:	f00a fe6a 	bl	df16 <k_work_submit_to_queue>
}
    3242:	e7f9      	b.n	3238 <cdc_acm_irq_rx_enable+0x14>
    3244:	20000450 	.word	0x20000450

00003248 <cdc_acm_irq_tx_enable>:
{
    3248:	b508      	push	{r3, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    324a:	6901      	ldr	r1, [r0, #16]
	dev_data->tx_irq_ena = true;
    324c:	2301      	movs	r3, #1
    324e:	f881 302a 	strb.w	r3, [r1, #42]	; 0x2a
	if (dev_data->cb && dev_data->tx_ready) {
    3252:	680b      	ldr	r3, [r1, #0]
    3254:	b113      	cbz	r3, 325c <cdc_acm_irq_tx_enable+0x14>
    3256:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
    325a:	b903      	cbnz	r3, 325e <cdc_acm_irq_tx_enable+0x16>
}
    325c:	bd08      	pop	{r3, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    325e:	3108      	adds	r1, #8
    3260:	4801      	ldr	r0, [pc, #4]	; (3268 <cdc_acm_irq_tx_enable+0x20>)
    3262:	f00a fe58 	bl	df16 <k_work_submit_to_queue>
}
    3266:	e7f9      	b.n	325c <cdc_acm_irq_tx_enable+0x14>
    3268:	20000450 	.word	0x20000450

0000326c <cdc_acm_reset_port>:
{
    326c:	b510      	push	{r4, lr}
    326e:	4603      	mov	r3, r0
	dev_data->configured = false;
    3270:	2400      	movs	r4, #0
    3272:	f880 407e 	strb.w	r4, [r0, #126]	; 0x7e
	dev_data->suspended = false;
    3276:	f880 407f 	strb.w	r4, [r0, #127]	; 0x7f
	dev_data->rx_ready = false;
    327a:	f880 4029 	strb.w	r4, [r0, #41]	; 0x29
	dev_data->tx_ready = false;
    327e:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
	dev_data->line_coding = (struct cdc_acm_line_coding)
    3282:	4a0a      	ldr	r2, [pc, #40]	; (32ac <cdc_acm_reset_port+0x40>)
    3284:	e892 0003 	ldmia.w	r2, {r0, r1}
    3288:	6758      	str	r0, [r3, #116]	; 0x74
    328a:	f8a3 1078 	strh.w	r1, [r3, #120]	; 0x78
    328e:	0c09      	lsrs	r1, r1, #16
    3290:	f883 107a 	strb.w	r1, [r3, #122]	; 0x7a
	dev_data->serial_state = 0;
    3294:	f883 407c 	strb.w	r4, [r3, #124]	; 0x7c
	dev_data->line_state = 0;
    3298:	f883 407b 	strb.w	r4, [r3, #123]	; 0x7b
	memset(&dev_data->rx_buf, 0, CDC_ACM_BUFFER_SIZE);
    329c:	2240      	movs	r2, #64	; 0x40
    329e:	4621      	mov	r1, r4
    32a0:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    32a4:	f009 ff13 	bl	d0ce <memset>
}
    32a8:	bd10      	pop	{r4, pc}
    32aa:	bf00      	nop
    32ac:	0000e920 	.word	0x0000e920

000032b0 <cdc_acm_fifo_fill>:
{
    32b0:	b570      	push	{r4, r5, r6, lr}
    32b2:	4614      	mov	r4, r2
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    32b4:	6906      	ldr	r6, [r0, #16]
	if (!dev_data->configured || dev_data->suspended) {
    32b6:	f896 307e 	ldrb.w	r3, [r6, #126]	; 0x7e
    32ba:	b113      	cbz	r3, 32c2 <cdc_acm_fifo_fill+0x12>
    32bc:	f896 307f 	ldrb.w	r3, [r6, #127]	; 0x7f
    32c0:	b193      	cbz	r3, 32e8 <cdc_acm_fifo_fill+0x38>
    32c2:	4b1a      	ldr	r3, [pc, #104]	; (332c <cdc_acm_fifo_fill+0x7c>)
    32c4:	4a1a      	ldr	r2, [pc, #104]	; (3330 <cdc_acm_fifo_fill+0x80>)
    32c6:	1a9b      	subs	r3, r3, r2
    32c8:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Device not configured or suspended, drop %d bytes",
    32ca:	f04f 0200 	mov.w	r2, #0
    32ce:	2102      	movs	r1, #2
    32d0:	f361 0202 	bfi	r2, r1, #0, #3
    32d4:	f36f 02c5 	bfc	r2, #3, #3
    32d8:	f363 128f 	bfi	r2, r3, #6, #10
    32dc:	4621      	mov	r1, r4
    32de:	4815      	ldr	r0, [pc, #84]	; (3334 <cdc_acm_fifo_fill+0x84>)
    32e0:	f7fe f9fa 	bl	16d8 <log_1>
		return 0;
    32e4:	2000      	movs	r0, #0
}
    32e6:	bd70      	pop	{r4, r5, r6, pc}
	dev_data->tx_ready = false;
    32e8:	2300      	movs	r3, #0
    32ea:	f886 3028 	strb.w	r3, [r6, #40]	; 0x28
	wrote = ring_buf_put(dev_data->tx_ringbuf, tx_data, len);
    32ee:	6f30      	ldr	r0, [r6, #112]	; 0x70
    32f0:	f008 ffdc 	bl	c2ac <ring_buf_put>
    32f4:	4605      	mov	r5, r0
	if (wrote < len) {
    32f6:	4284      	cmp	r4, r0
    32f8:	d806      	bhi.n	3308 <cdc_acm_fifo_fill+0x58>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    32fa:	f106 0118 	add.w	r1, r6, #24
    32fe:	480e      	ldr	r0, [pc, #56]	; (3338 <cdc_acm_fifo_fill+0x88>)
    3300:	f00a fe09 	bl	df16 <k_work_submit_to_queue>
	return wrote;
    3304:	4628      	mov	r0, r5
    3306:	e7ee      	b.n	32e6 <cdc_acm_fifo_fill+0x36>
    3308:	4b08      	ldr	r3, [pc, #32]	; (332c <cdc_acm_fifo_fill+0x7c>)
    330a:	4a09      	ldr	r2, [pc, #36]	; (3330 <cdc_acm_fifo_fill+0x80>)
    330c:	1a9b      	subs	r3, r3, r2
    330e:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Ring buffer full, drop %zd bytes", len - wrote);
    3310:	f04f 0200 	mov.w	r2, #0
    3314:	2102      	movs	r1, #2
    3316:	f361 0202 	bfi	r2, r1, #0, #3
    331a:	f36f 02c5 	bfc	r2, #3, #3
    331e:	f363 128f 	bfi	r2, r3, #6, #10
    3322:	1a21      	subs	r1, r4, r0
    3324:	4805      	ldr	r0, [pc, #20]	; (333c <cdc_acm_fifo_fill+0x8c>)
    3326:	f7fe f9d7 	bl	16d8 <log_1>
    332a:	e7e6      	b.n	32fa <cdc_acm_fifo_fill+0x4a>
    332c:	0000e86c 	.word	0x0000e86c
    3330:	0000e82c 	.word	0x0000e82c
    3334:	0000edf8 	.word	0x0000edf8
    3338:	20000450 	.word	0x20000450
    333c:	0000ee2c 	.word	0x0000ee2c

00003340 <cdc_acm_read_cb>:
{
    3340:	b570      	push	{r4, r5, r6, lr}
    3342:	b082      	sub	sp, #8
    3344:	4606      	mov	r6, r0
    3346:	4614      	mov	r4, r2
	if (size <= 0) {
    3348:	1e0d      	subs	r5, r1, #0
    334a:	dd0f      	ble.n	336c <cdc_acm_read_cb+0x2c>
	wrote = ring_buf_put(dev_data->rx_ringbuf, dev_data->rx_buf, size);
    334c:	462a      	mov	r2, r5
    334e:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    3352:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
    3354:	f008 ffaa 	bl	c2ac <ring_buf_put>
	if (wrote < size) {
    3358:	4285      	cmp	r5, r0
    335a:	d813      	bhi.n	3384 <cdc_acm_read_cb+0x44>
	dev_data->rx_ready = true;
    335c:	2301      	movs	r3, #1
    335e:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	if (dev_data->cb && dev_data->rx_irq_ena) {
    3362:	6823      	ldr	r3, [r4, #0]
    3364:	b113      	cbz	r3, 336c <cdc_acm_read_cb+0x2c>
    3366:	f894 302b 	ldrb.w	r3, [r4, #43]	; 0x2b
    336a:	b9eb      	cbnz	r3, 33a8 <cdc_acm_read_cb+0x68>
	usb_transfer(ep, dev_data->rx_buf, sizeof(dev_data->rx_buf),
    336c:	9401      	str	r4, [sp, #4]
    336e:	4b11      	ldr	r3, [pc, #68]	; (33b4 <cdc_acm_read_cb+0x74>)
    3370:	9300      	str	r3, [sp, #0]
    3372:	2301      	movs	r3, #1
    3374:	2240      	movs	r2, #64	; 0x40
    3376:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    337a:	4630      	mov	r0, r6
    337c:	f7ff fdda 	bl	2f34 <usb_transfer>
}
    3380:	b002      	add	sp, #8
    3382:	bd70      	pop	{r4, r5, r6, pc}
    3384:	4b0c      	ldr	r3, [pc, #48]	; (33b8 <cdc_acm_read_cb+0x78>)
    3386:	4a0d      	ldr	r2, [pc, #52]	; (33bc <cdc_acm_read_cb+0x7c>)
    3388:	1a9b      	subs	r3, r3, r2
    338a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Ring buffer full, drop %zd bytes", size - wrote);
    338c:	f04f 0200 	mov.w	r2, #0
    3390:	2101      	movs	r1, #1
    3392:	f361 0202 	bfi	r2, r1, #0, #3
    3396:	f36f 02c5 	bfc	r2, #3, #3
    339a:	f363 128f 	bfi	r2, r3, #6, #10
    339e:	1a29      	subs	r1, r5, r0
    33a0:	4807      	ldr	r0, [pc, #28]	; (33c0 <cdc_acm_read_cb+0x80>)
    33a2:	f7fe f999 	bl	16d8 <log_1>
    33a6:	e7d9      	b.n	335c <cdc_acm_read_cb+0x1c>
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    33a8:	f104 0108 	add.w	r1, r4, #8
    33ac:	4805      	ldr	r0, [pc, #20]	; (33c4 <cdc_acm_read_cb+0x84>)
    33ae:	f00a fdb2 	bl	df16 <k_work_submit_to_queue>
    33b2:	e7db      	b.n	336c <cdc_acm_read_cb+0x2c>
    33b4:	00003341 	.word	0x00003341
    33b8:	0000e86c 	.word	0x0000e86c
    33bc:	0000e82c 	.word	0x0000e82c
    33c0:	0000ee2c 	.word	0x0000ee2c
    33c4:	20000450 	.word	0x20000450

000033c8 <cdc_acm_do_cb>:
{
    33c8:	b538      	push	{r3, r4, r5, lr}
    33ca:	4604      	mov	r4, r0
	const struct device *dev = dev_data->common.dev;
    33cc:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
	struct usb_cfg_data *cfg = (void *)dev->config;
    33d0:	685d      	ldr	r5, [r3, #4]
	switch (status) {
    33d2:	3901      	subs	r1, #1
    33d4:	2905      	cmp	r1, #5
    33d6:	d806      	bhi.n	33e6 <cdc_acm_do_cb+0x1e>
    33d8:	e8df f001 	tbb	[pc, r1]
    33dc:	37060503 	.word	0x37060503
    33e0:	5f4b      	.short	0x5f4b
		cdc_acm_reset_port(dev_data);
    33e2:	f7ff ff43 	bl	326c <cdc_acm_reset_port>
}
    33e6:	bd38      	pop	{r3, r4, r5, pc}
    33e8:	4b45      	ldr	r3, [pc, #276]	; (3500 <cdc_acm_do_cb+0x138>)
    33ea:	4a46      	ldr	r2, [pc, #280]	; (3504 <cdc_acm_do_cb+0x13c>)
    33ec:	1a9b      	subs	r3, r3, r2
    33ee:	08db      	lsrs	r3, r3, #3
		LOG_INF("Device configured");
    33f0:	f04f 0100 	mov.w	r1, #0
    33f4:	2203      	movs	r2, #3
    33f6:	f362 0102 	bfi	r1, r2, #0, #3
    33fa:	f36f 01c5 	bfc	r1, #3, #3
    33fe:	f363 118f 	bfi	r1, r3, #6, #10
    3402:	4841      	ldr	r0, [pc, #260]	; (3508 <cdc_acm_do_cb+0x140>)
    3404:	f7fe f9da 	bl	17bc <log_0>
		if (!dev_data->configured) {
    3408:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    340c:	b19b      	cbz	r3, 3436 <cdc_acm_do_cb+0x6e>
		if (!dev_data->tx_ready) {
    340e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    3412:	2b00      	cmp	r3, #0
    3414:	d1e7      	bne.n	33e6 <cdc_acm_do_cb+0x1e>
			dev_data->tx_ready = true;
    3416:	2301      	movs	r3, #1
    3418:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
			if (dev_data->cb != NULL && dev_data->tx_irq_ena) {
    341c:	6823      	ldr	r3, [r4, #0]
    341e:	2b00      	cmp	r3, #0
    3420:	d0e1      	beq.n	33e6 <cdc_acm_do_cb+0x1e>
    3422:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
    3426:	2b00      	cmp	r3, #0
    3428:	d0dd      	beq.n	33e6 <cdc_acm_do_cb+0x1e>
				k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    342a:	f104 0108 	add.w	r1, r4, #8
    342e:	4837      	ldr	r0, [pc, #220]	; (350c <cdc_acm_do_cb+0x144>)
    3430:	f00a fd71 	bl	df16 <k_work_submit_to_queue>
    3434:	e7d7      	b.n	33e6 <cdc_acm_do_cb+0x1e>
			cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr, 0,
    3436:	6a2b      	ldr	r3, [r5, #32]
    3438:	4622      	mov	r2, r4
    343a:	2100      	movs	r1, #0
    343c:	7b18      	ldrb	r0, [r3, #12]
    343e:	f7ff ff7f 	bl	3340 <cdc_acm_read_cb>
			dev_data->configured = true;
    3442:	2301      	movs	r3, #1
    3444:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
    3448:	e7e1      	b.n	340e <cdc_acm_do_cb+0x46>
    344a:	4b2d      	ldr	r3, [pc, #180]	; (3500 <cdc_acm_do_cb+0x138>)
    344c:	4a2d      	ldr	r2, [pc, #180]	; (3504 <cdc_acm_do_cb+0x13c>)
    344e:	1a9b      	subs	r3, r3, r2
    3450:	08db      	lsrs	r3, r3, #3
		LOG_INF("Device disconnected");
    3452:	f04f 0100 	mov.w	r1, #0
    3456:	2203      	movs	r2, #3
    3458:	f362 0102 	bfi	r1, r2, #0, #3
    345c:	f36f 01c5 	bfc	r1, #3, #3
    3460:	f363 118f 	bfi	r1, r3, #6, #10
    3464:	482a      	ldr	r0, [pc, #168]	; (3510 <cdc_acm_do_cb+0x148>)
    3466:	f7fe f9a9 	bl	17bc <log_0>
		cdc_acm_reset_port(dev_data);
    346a:	4620      	mov	r0, r4
    346c:	f7ff fefe 	bl	326c <cdc_acm_reset_port>
		break;
    3470:	e7b9      	b.n	33e6 <cdc_acm_do_cb+0x1e>
    3472:	4b23      	ldr	r3, [pc, #140]	; (3500 <cdc_acm_do_cb+0x138>)
    3474:	4a23      	ldr	r2, [pc, #140]	; (3504 <cdc_acm_do_cb+0x13c>)
    3476:	1a9b      	subs	r3, r3, r2
    3478:	08db      	lsrs	r3, r3, #3
		LOG_INF("Device suspended");
    347a:	f04f 0100 	mov.w	r1, #0
    347e:	2203      	movs	r2, #3
    3480:	f362 0102 	bfi	r1, r2, #0, #3
    3484:	f36f 01c5 	bfc	r1, #3, #3
    3488:	f363 118f 	bfi	r1, r3, #6, #10
    348c:	4821      	ldr	r0, [pc, #132]	; (3514 <cdc_acm_do_cb+0x14c>)
    348e:	f7fe f995 	bl	17bc <log_0>
		dev_data->suspended = true;
    3492:	2301      	movs	r3, #1
    3494:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
		break;
    3498:	e7a5      	b.n	33e6 <cdc_acm_do_cb+0x1e>
    349a:	4b19      	ldr	r3, [pc, #100]	; (3500 <cdc_acm_do_cb+0x138>)
    349c:	4a19      	ldr	r2, [pc, #100]	; (3504 <cdc_acm_do_cb+0x13c>)
    349e:	1a9b      	subs	r3, r3, r2
    34a0:	08db      	lsrs	r3, r3, #3
		LOG_INF("Device resumed");
    34a2:	f04f 0100 	mov.w	r1, #0
    34a6:	2203      	movs	r2, #3
    34a8:	f362 0102 	bfi	r1, r2, #0, #3
    34ac:	f36f 01c5 	bfc	r1, #3, #3
    34b0:	f363 118f 	bfi	r1, r3, #6, #10
    34b4:	4818      	ldr	r0, [pc, #96]	; (3518 <cdc_acm_do_cb+0x150>)
    34b6:	f7fe f981 	bl	17bc <log_0>
		if (dev_data->suspended) {
    34ba:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
    34be:	2b00      	cmp	r3, #0
    34c0:	d091      	beq.n	33e6 <cdc_acm_do_cb+0x1e>
    34c2:	4b0f      	ldr	r3, [pc, #60]	; (3500 <cdc_acm_do_cb+0x138>)
    34c4:	4a0f      	ldr	r2, [pc, #60]	; (3504 <cdc_acm_do_cb+0x13c>)
    34c6:	1a9b      	subs	r3, r3, r2
    34c8:	08db      	lsrs	r3, r3, #3
			LOG_INF("from suspend");
    34ca:	f04f 0100 	mov.w	r1, #0
    34ce:	2203      	movs	r2, #3
    34d0:	f362 0102 	bfi	r1, r2, #0, #3
    34d4:	f36f 01c5 	bfc	r1, #3, #3
    34d8:	f363 118f 	bfi	r1, r3, #6, #10
    34dc:	480f      	ldr	r0, [pc, #60]	; (351c <cdc_acm_do_cb+0x154>)
    34de:	f7fe f96d 	bl	17bc <log_0>
			dev_data->suspended = false;
    34e2:	2300      	movs	r3, #0
    34e4:	f884 307f 	strb.w	r3, [r4, #127]	; 0x7f
			if (dev_data->configured) {
    34e8:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    34ec:	2b00      	cmp	r3, #0
    34ee:	f43f af7a 	beq.w	33e6 <cdc_acm_do_cb+0x1e>
				cdc_acm_read_cb(cfg->endpoint[ACM_OUT_EP_IDX].ep_addr,
    34f2:	6a2b      	ldr	r3, [r5, #32]
    34f4:	4622      	mov	r2, r4
    34f6:	2100      	movs	r1, #0
    34f8:	7b18      	ldrb	r0, [r3, #12]
    34fa:	f7ff ff21 	bl	3340 <cdc_acm_read_cb>
}
    34fe:	e772      	b.n	33e6 <cdc_acm_do_cb+0x1e>
    3500:	0000e86c 	.word	0x0000e86c
    3504:	0000e82c 	.word	0x0000e82c
    3508:	0000ee50 	.word	0x0000ee50
    350c:	20000450 	.word	0x20000450
    3510:	0000ee64 	.word	0x0000ee64
    3514:	0000ee78 	.word	0x0000ee78
    3518:	0000ee8c 	.word	0x0000ee8c
    351c:	0000ee9c 	.word	0x0000ee9c

00003520 <cdc_acm_dev_status_cb>:
{
    3520:	b570      	push	{r4, r5, r6, lr}
    3522:	4604      	mov	r4, r0
    3524:	460d      	mov	r5, r1
    3526:	4616      	mov	r6, r2
	common = usb_get_dev_data_by_cfg(&cdc_acm_data_devlist, cfg);
    3528:	4601      	mov	r1, r0
    352a:	480e      	ldr	r0, [pc, #56]	; (3564 <cdc_acm_dev_status_cb+0x44>)
    352c:	f009 fb66 	bl	cbfc <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    3530:	b128      	cbz	r0, 353e <cdc_acm_dev_status_cb+0x1e>
	cdc_acm_do_cb(dev_data, status, param);
    3532:	4632      	mov	r2, r6
    3534:	4629      	mov	r1, r5
    3536:	3880      	subs	r0, #128	; 0x80
    3538:	f7ff ff46 	bl	33c8 <cdc_acm_do_cb>
}
    353c:	bd70      	pop	{r4, r5, r6, pc}
    353e:	4b0a      	ldr	r3, [pc, #40]	; (3568 <cdc_acm_dev_status_cb+0x48>)
    3540:	4a0a      	ldr	r2, [pc, #40]	; (356c <cdc_acm_dev_status_cb+0x4c>)
    3542:	1a9b      	subs	r3, r3, r2
    3544:	08db      	lsrs	r3, r3, #3
		LOG_WRN("Device data not found for cfg %p", cfg);
    3546:	f04f 0200 	mov.w	r2, #0
    354a:	2102      	movs	r1, #2
    354c:	f361 0202 	bfi	r2, r1, #0, #3
    3550:	f36f 02c5 	bfc	r2, #3, #3
    3554:	f363 128f 	bfi	r2, r3, #6, #10
    3558:	4621      	mov	r1, r4
    355a:	4805      	ldr	r0, [pc, #20]	; (3570 <cdc_acm_dev_status_cb+0x50>)
    355c:	f7fe f8bc 	bl	16d8 <log_1>
		return;
    3560:	e7ec      	b.n	353c <cdc_acm_dev_status_cb+0x1c>
    3562:	bf00      	nop
    3564:	20000ed4 	.word	0x20000ed4
    3568:	0000e86c 	.word	0x0000e86c
    356c:	0000e82c 	.word	0x0000e82c
    3570:	0000eeac 	.word	0x0000eeac

00003574 <cdc_acm_send_notification>:
 *
 * @return  N/A.
 */
static int cdc_acm_send_notification(const struct device *dev,
				     uint16_t serial_state)
{
    3574:	b530      	push	{r4, r5, lr}
    3576:	b085      	sub	sp, #20
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    3578:	6905      	ldr	r5, [r0, #16]
	struct usb_cfg_data * const cfg = (void *)dev->config;
    357a:	6843      	ldr	r3, [r0, #4]
	struct cdc_acm_notification notification;
	uint32_t cnt = 0U;

	notification.bmRequestType = 0xA1;
    357c:	22a1      	movs	r2, #161	; 0xa1
    357e:	f88d 2004 	strb.w	r2, [sp, #4]
	notification.bNotificationType = 0x20;
    3582:	2220      	movs	r2, #32
    3584:	f88d 2005 	strb.w	r2, [sp, #5]
	notification.wValue = 0U;
    3588:	2400      	movs	r4, #0
    358a:	f8ad 4006 	strh.w	r4, [sp, #6]
	notification.wIndex = 0U;
    358e:	f8ad 4008 	strh.w	r4, [sp, #8]
	notification.wLength = sys_cpu_to_le16(sizeof(serial_state));
    3592:	2202      	movs	r2, #2
    3594:	f8ad 200a 	strh.w	r2, [sp, #10]
	notification.data = sys_cpu_to_le16(serial_state);
    3598:	f8ad 100c 	strh.w	r1, [sp, #12]

	dev_data->notification_sent = 0U;
    359c:	f885 407d 	strb.w	r4, [r5, #125]	; 0x7d

	usb_write(cfg->endpoint[ACM_INT_EP_IDX].ep_addr,
    35a0:	6a18      	ldr	r0, [r3, #32]
    35a2:	4623      	mov	r3, r4
    35a4:	220a      	movs	r2, #10
    35a6:	a901      	add	r1, sp, #4
    35a8:	7900      	ldrb	r0, [r0, #4]
    35aa:	f009 fa90 	bl	cace <usb_write>
		  (const uint8_t *)&notification, sizeof(notification), NULL);

	/* Wait for notification to be sent */
	while (!((volatile uint8_t)dev_data->notification_sent)) {
    35ae:	f895 307d 	ldrb.w	r3, [r5, #125]	; 0x7d
    35b2:	b94b      	cbnz	r3, 35c8 <cdc_acm_send_notification+0x54>
	z_impl_k_busy_wait(usec_to_wait);
    35b4:	2001      	movs	r0, #1
    35b6:	f00a fef1 	bl	e39c <z_impl_k_busy_wait>
		k_busy_wait(1);

		if (++cnt > CDC_CONTROL_SERIAL_STATE_TIMEOUT_US) {
    35ba:	3401      	adds	r4, #1
    35bc:	4b04      	ldr	r3, [pc, #16]	; (35d0 <cdc_acm_send_notification+0x5c>)
    35be:	429c      	cmp	r4, r3
    35c0:	d9f5      	bls.n	35ae <cdc_acm_send_notification+0x3a>
			LOG_DBG("CDC ACM notification timeout!");
			return -EIO;
    35c2:	f06f 0004 	mvn.w	r0, #4
    35c6:	e000      	b.n	35ca <cdc_acm_send_notification+0x56>
		}
	}

	return 0;
    35c8:	2000      	movs	r0, #0
}
    35ca:	b005      	add	sp, #20
    35cc:	bd30      	pop	{r4, r5, pc}
    35ce:	bf00      	nop
    35d0:	000186a0 	.word	0x000186a0

000035d4 <cdc_acm_poll_out>:
 * is not ready, no data is transferred to the buffer, that is, c is dropped.
 * If the USB subsystem is ready and the buffer is full, the first character
 * from the tx_ringbuf is removed to make room for the new character.
 */
static void cdc_acm_poll_out(const struct device *dev, unsigned char c)
{
    35d4:	b510      	push	{r4, lr}
    35d6:	b082      	sub	sp, #8
    35d8:	f88d 1007 	strb.w	r1, [sp, #7]
	struct cdc_acm_dev_data_t * const dev_data = dev->data;
    35dc:	6904      	ldr	r4, [r0, #16]

	if (!dev_data->configured || dev_data->suspended) {
    35de:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    35e2:	b113      	cbz	r3, 35ea <cdc_acm_poll_out+0x16>
    35e4:	f894 307f 	ldrb.w	r3, [r4, #127]	; 0x7f
    35e8:	b18b      	cbz	r3, 360e <cdc_acm_poll_out+0x3a>
    35ea:	4b28      	ldr	r3, [pc, #160]	; (368c <cdc_acm_poll_out+0xb8>)
    35ec:	4a28      	ldr	r2, [pc, #160]	; (3690 <cdc_acm_poll_out+0xbc>)
    35ee:	1a9b      	subs	r3, r3, r2
    35f0:	08db      	lsrs	r3, r3, #3
		LOG_INF("USB device not ready, drop data");
    35f2:	f04f 0100 	mov.w	r1, #0
    35f6:	2203      	movs	r2, #3
    35f8:	f362 0102 	bfi	r1, r2, #0, #3
    35fc:	f36f 01c5 	bfc	r1, #3, #3
    3600:	f363 118f 	bfi	r1, r3, #6, #10
    3604:	4823      	ldr	r0, [pc, #140]	; (3694 <cdc_acm_poll_out+0xc0>)
    3606:	f7fe f8d9 	bl	17bc <log_0>
			return;
		}
	}

	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
}
    360a:	b002      	add	sp, #8
    360c:	bd10      	pop	{r4, pc}
	dev_data->tx_ready = false;
    360e:	2300      	movs	r3, #0
    3610:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	if (!ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    3614:	2201      	movs	r2, #1
    3616:	f10d 0107 	add.w	r1, sp, #7
    361a:	6f20      	ldr	r0, [r4, #112]	; 0x70
    361c:	f008 fe46 	bl	c2ac <ring_buf_put>
    3620:	b9e0      	cbnz	r0, 365c <cdc_acm_poll_out+0x88>
    3622:	4b1a      	ldr	r3, [pc, #104]	; (368c <cdc_acm_poll_out+0xb8>)
    3624:	4a1a      	ldr	r2, [pc, #104]	; (3690 <cdc_acm_poll_out+0xbc>)
    3626:	1a9b      	subs	r3, r3, r2
    3628:	08db      	lsrs	r3, r3, #3
		LOG_INF("Ring buffer full, drain buffer");
    362a:	f04f 0100 	mov.w	r1, #0
    362e:	2203      	movs	r2, #3
    3630:	f362 0102 	bfi	r1, r2, #0, #3
    3634:	f36f 01c5 	bfc	r1, #3, #3
    3638:	f363 118f 	bfi	r1, r3, #6, #10
    363c:	4816      	ldr	r0, [pc, #88]	; (3698 <cdc_acm_poll_out+0xc4>)
    363e:	f7fe f8bd 	bl	17bc <log_0>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    3642:	2201      	movs	r2, #1
    3644:	2100      	movs	r1, #0
    3646:	6f20      	ldr	r0, [r4, #112]	; 0x70
    3648:	f008 fe9a 	bl	c380 <ring_buf_get>
    364c:	b160      	cbz	r0, 3668 <cdc_acm_poll_out+0x94>
		    !ring_buf_put(dev_data->tx_ringbuf, &c, 1)) {
    364e:	2201      	movs	r2, #1
    3650:	f10d 0107 	add.w	r1, sp, #7
    3654:	6f20      	ldr	r0, [r4, #112]	; 0x70
    3656:	f008 fe29 	bl	c2ac <ring_buf_put>
		if (!ring_buf_get(dev_data->tx_ringbuf, NULL, 1) ||
    365a:	b128      	cbz	r0, 3668 <cdc_acm_poll_out+0x94>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    365c:	f104 0118 	add.w	r1, r4, #24
    3660:	480e      	ldr	r0, [pc, #56]	; (369c <cdc_acm_poll_out+0xc8>)
    3662:	f00a fc58 	bl	df16 <k_work_submit_to_queue>
    3666:	e7d0      	b.n	360a <cdc_acm_poll_out+0x36>
    3668:	4b08      	ldr	r3, [pc, #32]	; (368c <cdc_acm_poll_out+0xb8>)
    366a:	4a09      	ldr	r2, [pc, #36]	; (3690 <cdc_acm_poll_out+0xbc>)
    366c:	1a9b      	subs	r3, r3, r2
    366e:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Failed to drain buffer");
    3670:	f04f 0100 	mov.w	r1, #0
    3674:	2201      	movs	r2, #1
    3676:	f362 0102 	bfi	r1, r2, #0, #3
    367a:	f36f 01c5 	bfc	r1, #3, #3
    367e:	f363 118f 	bfi	r1, r3, #6, #10
    3682:	4807      	ldr	r0, [pc, #28]	; (36a0 <cdc_acm_poll_out+0xcc>)
    3684:	f7fe f89a 	bl	17bc <log_0>
			return;
    3688:	e7bf      	b.n	360a <cdc_acm_poll_out+0x36>
    368a:	bf00      	nop
    368c:	0000e86c 	.word	0x0000e86c
    3690:	0000e82c 	.word	0x0000e82c
    3694:	0000eed0 	.word	0x0000eed0
    3698:	0000eef0 	.word	0x0000eef0
    369c:	20000450 	.word	0x20000450
    36a0:	0000ef10 	.word	0x0000ef10

000036a4 <cdc_acm_write_cb>:
{
    36a4:	b510      	push	{r4, lr}
    36a6:	4614      	mov	r4, r2
	dev_data->tx_ready = true;
    36a8:	2301      	movs	r3, #1
    36aa:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
	if (dev_data->cb && dev_data->tx_irq_ena) {
    36ae:	6813      	ldr	r3, [r2, #0]
    36b0:	b113      	cbz	r3, 36b8 <cdc_acm_write_cb+0x14>
    36b2:	f892 302a 	ldrb.w	r3, [r2, #42]	; 0x2a
    36b6:	b923      	cbnz	r3, 36c2 <cdc_acm_write_cb+0x1e>
	if (ring_buf_is_empty(dev_data->tx_ringbuf)) {
    36b8:	6f20      	ldr	r0, [r4, #112]	; 0x70
    36ba:	f008 fd93 	bl	c1e4 <ring_buf_is_empty>
    36be:	b130      	cbz	r0, 36ce <cdc_acm_write_cb+0x2a>
}
    36c0:	bd10      	pop	{r4, pc}
		k_work_submit_to_queue(&USB_WORK_Q, &dev_data->cb_work);
    36c2:	f102 0108 	add.w	r1, r2, #8
    36c6:	4805      	ldr	r0, [pc, #20]	; (36dc <cdc_acm_write_cb+0x38>)
    36c8:	f00a fc25 	bl	df16 <k_work_submit_to_queue>
    36cc:	e7f4      	b.n	36b8 <cdc_acm_write_cb+0x14>
	k_work_submit_to_queue(&USB_WORK_Q, &dev_data->tx_work);
    36ce:	f104 0118 	add.w	r1, r4, #24
    36d2:	4802      	ldr	r0, [pc, #8]	; (36dc <cdc_acm_write_cb+0x38>)
    36d4:	f00a fc1f 	bl	df16 <k_work_submit_to_queue>
    36d8:	e7f2      	b.n	36c0 <cdc_acm_write_cb+0x1c>
    36da:	bf00      	nop
    36dc:	20000450 	.word	0x20000450

000036e0 <cdc_acm_init>:
{
    36e0:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    36e2:	6904      	ldr	r4, [r0, #16]
	dev_data->common.dev = dev;
    36e4:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
	sys_slist_append(&cdc_acm_data_devlist, &dev_data->common.node);
    36e8:	f104 0384 	add.w	r3, r4, #132	; 0x84
	parent->next = child;
    36ec:	2200      	movs	r2, #0
    36ee:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    36f2:	4a0b      	ldr	r2, [pc, #44]	; (3720 <cdc_acm_init+0x40>)
    36f4:	6852      	ldr	r2, [r2, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    36f6:	b172      	cbz	r2, 3716 <cdc_acm_init+0x36>
	parent->next = child;
    36f8:	6013      	str	r3, [r2, #0]
	list->tail = node;
    36fa:	4a09      	ldr	r2, [pc, #36]	; (3720 <cdc_acm_init+0x40>)
    36fc:	6053      	str	r3, [r2, #4]
	k_work_init(&dev_data->cb_work, cdc_acm_irq_callback_work_handler);
    36fe:	4909      	ldr	r1, [pc, #36]	; (3724 <cdc_acm_init+0x44>)
    3700:	f104 0008 	add.w	r0, r4, #8
    3704:	f00a fc01 	bl	df0a <k_work_init>
	k_work_init(&dev_data->tx_work, tx_work_handler);
    3708:	4907      	ldr	r1, [pc, #28]	; (3728 <cdc_acm_init+0x48>)
    370a:	f104 0018 	add.w	r0, r4, #24
    370e:	f00a fbfc 	bl	df0a <k_work_init>
}
    3712:	2000      	movs	r0, #0
    3714:	bd10      	pop	{r4, pc}
    3716:	4a02      	ldr	r2, [pc, #8]	; (3720 <cdc_acm_init+0x40>)
    3718:	6053      	str	r3, [r2, #4]
	list->head = node;
    371a:	6013      	str	r3, [r2, #0]
}
    371c:	e7ef      	b.n	36fe <cdc_acm_init+0x1e>
    371e:	bf00      	nop
    3720:	20000ed4 	.word	0x20000ed4
    3724:	0000ccb9 	.word	0x0000ccb9
    3728:	0000372d 	.word	0x0000372d

0000372c <tx_work_handler>:
{
    372c:	b5f0      	push	{r4, r5, r6, r7, lr}
    372e:	b085      	sub	sp, #20
    3730:	4604      	mov	r4, r0
	struct cdc_acm_dev_data_t *dev_data =
    3732:	f1a0 0718 	sub.w	r7, r0, #24
	const struct device *dev = dev_data->common.dev;
    3736:	6e83      	ldr	r3, [r0, #104]	; 0x68
	struct usb_cfg_data *cfg = (void *)dev->config;
    3738:	685b      	ldr	r3, [r3, #4]
	uint8_t ep = cfg->endpoint[ACM_IN_EP_IDX].ep_addr;
    373a:	6a1b      	ldr	r3, [r3, #32]
    373c:	7d1d      	ldrb	r5, [r3, #20]
	if (usb_transfer_is_busy(ep)) {
    373e:	4628      	mov	r0, r5
    3740:	f009 faa2 	bl	cc88 <usb_transfer_is_busy>
    3744:	b108      	cbz	r0, 374a <tx_work_handler+0x1e>
}
    3746:	b005      	add	sp, #20
    3748:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = ring_buf_get_claim(dev_data->tx_ringbuf, &data,
    374a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    374e:	a903      	add	r1, sp, #12
    3750:	6da0      	ldr	r0, [r4, #88]	; 0x58
    3752:	f008 fdcb 	bl	c2ec <ring_buf_get_claim>
	if (!len) {
    3756:	4606      	mov	r6, r0
    3758:	2800      	cmp	r0, #0
    375a:	d0f4      	beq.n	3746 <tx_work_handler+0x1a>
	if (!(len % CONFIG_CDC_ACM_BULK_EP_MPS)) {
    375c:	f010 0f3f 	tst.w	r0, #63	; 0x3f
    3760:	d100      	bne.n	3764 <tx_work_handler+0x38>
		len -= 1;
    3762:	1e46      	subs	r6, r0, #1
	usb_transfer(ep, data, len, USB_TRANS_WRITE,
    3764:	9701      	str	r7, [sp, #4]
    3766:	4b06      	ldr	r3, [pc, #24]	; (3780 <tx_work_handler+0x54>)
    3768:	9300      	str	r3, [sp, #0]
    376a:	2302      	movs	r3, #2
    376c:	4632      	mov	r2, r6
    376e:	9903      	ldr	r1, [sp, #12]
    3770:	4628      	mov	r0, r5
    3772:	f7ff fbdf 	bl	2f34 <usb_transfer>
	ring_buf_get_finish(dev_data->tx_ringbuf, len);
    3776:	4631      	mov	r1, r6
    3778:	6da0      	ldr	r0, [r4, #88]	; 0x58
    377a:	f008 fde3 	bl	c344 <ring_buf_get_finish>
    377e:	e7e2      	b.n	3746 <tx_work_handler+0x1a>
    3780:	000036a5 	.word	0x000036a5

00003784 <z_usb_work_q_init>:
K_KERNEL_STACK_DEFINE(z_usb_work_q_stack, CONFIG_USB_WORKQUEUE_STACK_SIZE);

struct k_work_q z_usb_work_q;

static int z_usb_work_q_init(const struct device *dev)
{
    3784:	b530      	push	{r4, r5, lr}
    3786:	b083      	sub	sp, #12
	ARG_UNUSED(dev);

	k_work_queue_start(&z_usb_work_q,
    3788:	4d08      	ldr	r5, [pc, #32]	; (37ac <z_usb_work_q_init+0x28>)
    378a:	2400      	movs	r4, #0
    378c:	9400      	str	r4, [sp, #0]
    378e:	f04f 33ff 	mov.w	r3, #4294967295
    3792:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3796:	4906      	ldr	r1, [pc, #24]	; (37b0 <z_usb_work_q_init+0x2c>)
    3798:	4628      	mov	r0, r5
    379a:	f006 fe3f 	bl	a41c <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    379e:	4905      	ldr	r1, [pc, #20]	; (37b4 <z_usb_work_q_init+0x30>)
    37a0:	4628      	mov	r0, r5
    37a2:	f006 fadf 	bl	9d64 <z_impl_k_thread_name_set>
			   K_KERNEL_STACK_SIZEOF(z_usb_work_q_stack),
			   CONFIG_USB_WORKQUEUE_PRIORITY, NULL);
	k_thread_name_set(&z_usb_work_q.thread, "usbworkq");

	return 0;
}
    37a6:	4620      	mov	r0, r4
    37a8:	b003      	add	sp, #12
    37aa:	bd30      	pop	{r4, r5, pc}
    37ac:	20000450 	.word	0x20000450
    37b0:	20002a40 	.word	0x20002a40
    37b4:	0000ef94 	.word	0x0000ef94

000037b8 <pm_system_resume>:
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    37b8:	4b1b      	ldr	r3, [pc, #108]	; (3828 <pm_system_resume+0x70>)
    37ba:	681b      	ldr	r3, [r3, #0]
    37bc:	2b00      	cmp	r3, #0
    37be:	d132      	bne.n	3826 <pm_system_resume+0x6e>
{
    37c0:	b530      	push	{r4, r5, lr}
    37c2:	b085      	sub	sp, #20
		post_ops_done = 1;
    37c4:	4b18      	ldr	r3, [pc, #96]	; (3828 <pm_system_resume+0x70>)
    37c6:	2201      	movs	r2, #1
    37c8:	601a      	str	r2, [r3, #0]
		exit_pos_ops(z_power_state);
    37ca:	4b18      	ldr	r3, [pc, #96]	; (382c <pm_system_resume+0x74>)
    37cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    37d0:	ab04      	add	r3, sp, #16
    37d2:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    37d6:	4b16      	ldr	r3, [pc, #88]	; (3830 <pm_system_resume+0x78>)
    37d8:	b163      	cbz	r3, 37f4 <pm_system_resume+0x3c>
		pm_power_state_exit_post_ops(info);
    37da:	f009 fcab 	bl	d134 <pm_power_state_exit_post_ops>
    37de:	f04f 0320 	mov.w	r3, #32
    37e2:	f3ef 8511 	mrs	r5, BASEPRI
    37e6:	f383 8812 	msr	BASEPRI_MAX, r3
    37ea:	f3bf 8f6f 	isb	sy
	return list->head;
    37ee:	4b11      	ldr	r3, [pc, #68]	; (3834 <pm_system_resume+0x7c>)
    37f0:	681c      	ldr	r4, [r3, #0]
    37f2:	e00a      	b.n	380a <pm_system_resume+0x52>
	__asm__ volatile(
    37f4:	2300      	movs	r3, #0
    37f6:	f383 8811 	msr	BASEPRI, r3
    37fa:	f3bf 8f6f 	isb	sy
}
    37fe:	e7ee      	b.n	37de <pm_system_resume+0x26>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3800:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    3802:	b10c      	cbz	r4, 3808 <pm_system_resume+0x50>
	return node->next;
    3804:	6823      	ldr	r3, [r4, #0]
    3806:	b143      	cbz	r3, 381a <pm_system_resume+0x62>
{
    3808:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    380a:	b134      	cbz	r4, 381a <pm_system_resume+0x62>
			callback = notifier->state_exit;
    380c:	68a3      	ldr	r3, [r4, #8]
		if (callback) {
    380e:	2b00      	cmp	r3, #0
    3810:	d0f6      	beq.n	3800 <pm_system_resume+0x48>
			callback(z_power_state.state);
    3812:	4a06      	ldr	r2, [pc, #24]	; (382c <pm_system_resume+0x74>)
    3814:	7810      	ldrb	r0, [r2, #0]
    3816:	4798      	blx	r3
    3818:	e7f2      	b.n	3800 <pm_system_resume+0x48>
	__asm__ volatile(
    381a:	f385 8811 	msr	BASEPRI, r5
    381e:	f3bf 8f6f 	isb	sy
		pm_state_notify(false);
	}
}
    3822:	b005      	add	sp, #20
    3824:	bd30      	pop	{r4, r5, pc}
    3826:	4770      	bx	lr
    3828:	200000e0 	.word	0x200000e0
    382c:	20000ee4 	.word	0x20000ee4
    3830:	0000d135 	.word	0x0000d135
    3834:	20000edc 	.word	0x20000edc

00003838 <pm_system_suspend>:
	return PM_STATE_ACTIVE;
}
#endif

enum pm_state pm_system_suspend(int32_t ticks)
{
    3838:	b570      	push	{r4, r5, r6, lr}
    383a:	b088      	sub	sp, #32
    383c:	4606      	mov	r6, r0
	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);
	z_power_state = pm_policy_next_state(ticks);
    383e:	4c2a      	ldr	r4, [pc, #168]	; (38e8 <pm_system_suspend+0xb0>)
    3840:	466d      	mov	r5, sp
    3842:	4601      	mov	r1, r0
    3844:	4628      	mov	r0, r5
    3846:	f009 fb63 	bl	cf10 <pm_policy_next_state>
    384a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
    384e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    3852:	7820      	ldrb	r0, [r4, #0]
    3854:	2800      	cmp	r0, #0
    3856:	d045      	beq.n	38e4 <pm_system_suspend+0xac>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
		return z_power_state.state;
	}
	post_ops_done = 0;
    3858:	4b24      	ldr	r3, [pc, #144]	; (38ec <pm_system_suspend+0xb4>)
    385a:	2200      	movs	r2, #0
    385c:	601a      	str	r2, [r3, #0]

	if (ticks != K_TICKS_FOREVER) {
    385e:	f1b6 3fff 	cmp.w	r6, #4294967295
    3862:	d10c      	bne.n	387e <pm_system_suspend+0x46>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    3864:	f006 fe96 	bl	a594 <k_sched_lock>
	__asm__ volatile(
    3868:	f04f 0320 	mov.w	r3, #32
    386c:	f3ef 8511 	mrs	r5, BASEPRI
    3870:	f383 8812 	msr	BASEPRI_MAX, r3
    3874:	f3bf 8f6f 	isb	sy
	return list->head;
    3878:	4b1d      	ldr	r3, [pc, #116]	; (38f0 <pm_system_suspend+0xb8>)
    387a:	681c      	ldr	r4, [r3, #0]
    387c:	e016      	b.n	38ac <pm_system_suspend+0x74>
		     k_us_to_ticks_ceil32(z_power_state.exit_latency_us), true);
    387e:	68a3      	ldr	r3, [r4, #8]
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    3880:	0c59      	lsrs	r1, r3, #17
    3882:	03d8      	lsls	r0, r3, #15
    3884:	4c1b      	ldr	r4, [pc, #108]	; (38f4 <pm_system_suspend+0xbc>)
    3886:	4a1c      	ldr	r2, [pc, #112]	; (38f8 <pm_system_suspend+0xc0>)
    3888:	2300      	movs	r3, #0
    388a:	1900      	adds	r0, r0, r4
    388c:	f04f 0400 	mov.w	r4, #0
    3890:	eb44 0101 	adc.w	r1, r4, r1
    3894:	f7fc fc34 	bl	100 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    3898:	2101      	movs	r1, #1
    389a:	1a30      	subs	r0, r6, r0
    389c:	f00a fd4f 	bl	e33e <z_set_timeout_expiry>
    38a0:	e7e0      	b.n	3864 <pm_system_suspend+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    38a2:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    38a4:	b10c      	cbz	r4, 38aa <pm_system_suspend+0x72>
	return node->next;
    38a6:	6823      	ldr	r3, [r4, #0]
    38a8:	b143      	cbz	r3, 38bc <pm_system_suspend+0x84>
{
    38aa:	461c      	mov	r4, r3
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    38ac:	b134      	cbz	r4, 38bc <pm_system_suspend+0x84>
			callback = notifier->state_entry;
    38ae:	6863      	ldr	r3, [r4, #4]
		if (callback) {
    38b0:	2b00      	cmp	r3, #0
    38b2:	d0f6      	beq.n	38a2 <pm_system_suspend+0x6a>
			callback(z_power_state.state);
    38b4:	4a0c      	ldr	r2, [pc, #48]	; (38e8 <pm_system_suspend+0xb0>)
    38b6:	7810      	ldrb	r0, [r2, #0]
    38b8:	4798      	blx	r3
    38ba:	e7f2      	b.n	38a2 <pm_system_suspend+0x6a>
	__asm__ volatile(
    38bc:	f385 8811 	msr	BASEPRI, r5
    38c0:	f3bf 8f6f 	isb	sy
	pm_debug_start_timer();
	/* Enter power state */
	pm_state_notify(true);
	pm_state_set(z_power_state);
    38c4:	4b08      	ldr	r3, [pc, #32]	; (38e8 <pm_system_suspend+0xb0>)
    38c6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    38ca:	ab08      	add	r3, sp, #32
    38cc:	e903 0007 	stmdb	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    38d0:	4b0a      	ldr	r3, [pc, #40]	; (38fc <pm_system_suspend+0xc4>)
    38d2:	b10b      	cbz	r3, 38d8 <pm_system_suspend+0xa0>
		pm_power_state_set(info);
    38d4:	f009 fc1b 	bl	d10e <pm_power_state_set>
		/* Turn on peripherals and restore device states as necessary */
		pm_resume_devices();
	}
#endif
	pm_log_debug_info(z_power_state.state);
	pm_system_resume();
    38d8:	f7ff ff6e 	bl	37b8 <pm_system_resume>
	k_sched_unlock();
    38dc:	f007 f858 	bl	a990 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks, z_power_state.state);
	return z_power_state.state;
    38e0:	4b01      	ldr	r3, [pc, #4]	; (38e8 <pm_system_suspend+0xb0>)
    38e2:	7818      	ldrb	r0, [r3, #0]
}
    38e4:	b008      	add	sp, #32
    38e6:	bd70      	pop	{r4, r5, r6, pc}
    38e8:	20000ee4 	.word	0x20000ee4
    38ec:	200000e0 	.word	0x200000e0
    38f0:	20000edc 	.word	0x20000edc
    38f4:	000f423f 	.word	0x000f423f
    38f8:	000f4240 	.word	0x000f4240
    38fc:	0000d10f 	.word	0x0000d10f

00003900 <nrf_cc3xx_platform_abort_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
    3900:	b508      	push	{r3, lr}
	nrf_cc3xx_platform_set_abort(&apis);
    3902:	4802      	ldr	r0, [pc, #8]	; (390c <nrf_cc3xx_platform_abort_init+0xc>)
    3904:	f007 fcae 	bl	b264 <nrf_cc3xx_platform_set_abort>
}
    3908:	bd08      	pop	{r3, pc}
    390a:	bf00      	nop
    390c:	0000efa8 	.word	0x0000efa8

00003910 <mutex_unlock_platform>:
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    3910:	b1d0      	cbz	r0, 3948 <mutex_unlock_platform+0x38>
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3912:	b508      	push	{r3, lr}
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    3914:	6842      	ldr	r2, [r0, #4]
    3916:	2a04      	cmp	r2, #4
    3918:	d005      	beq.n	3926 <mutex_unlock_platform+0x16>

#endif /* defined(NRF5340_XXAA_APPLICATION) */

    default:
        /* Ensure that the mutex has been initialized */
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    391a:	b1d2      	cbz	r2, 3952 <mutex_unlock_platform+0x42>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
        }

        p_mutex = (struct k_mutex *)mutex->mutex;
    391c:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    391e:	f006 fb8f 	bl	a040 <z_impl_k_mutex_unlock>

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    3922:	2000      	movs	r0, #0
    }
}
    3924:	bd08      	pop	{r3, pc}
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
    3926:	6803      	ldr	r3, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3928:	2200      	movs	r2, #0
    392a:	f3bf 8f5b 	dmb	ish
    392e:	e853 1f00 	ldrex	r1, [r3]
    3932:	2901      	cmp	r1, #1
    3934:	d103      	bne.n	393e <mutex_unlock_platform+0x2e>
    3936:	e843 2000 	strex	r0, r2, [r3]
    393a:	2800      	cmp	r0, #0
    393c:	d1f7      	bne.n	392e <mutex_unlock_platform+0x1e>
    393e:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    3942:	d104      	bne.n	394e <mutex_unlock_platform+0x3e>
    3944:	4610      	mov	r0, r2
    3946:	e7ed      	b.n	3924 <mutex_unlock_platform+0x14>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    3948:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    394c:	4770      	bx	lr
                       NRF_CC3XX_PLATFORM_SUCCESS :
    394e:	4802      	ldr	r0, [pc, #8]	; (3958 <mutex_unlock_platform+0x48>)
    3950:	e7e8      	b.n	3924 <mutex_unlock_platform+0x14>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    3952:	4802      	ldr	r0, [pc, #8]	; (395c <mutex_unlock_platform+0x4c>)
    3954:	e7e6      	b.n	3924 <mutex_unlock_platform+0x14>
    3956:	bf00      	nop
    3958:	ffff8fe9 	.word	0xffff8fe9
    395c:	ffff8fea 	.word	0xffff8fea

00003960 <mutex_lock_platform>:
    if(mutex == NULL) {
    3960:	b320      	cbz	r0, 39ac <mutex_lock_platform+0x4c>
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3962:	b508      	push	{r3, lr}
    switch (mutex->flags) {
    3964:	6842      	ldr	r2, [r0, #4]
    3966:	2a04      	cmp	r2, #4
    3968:	d002      	beq.n	3970 <mutex_lock_platform+0x10>
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    396a:	b992      	cbnz	r2, 3992 <mutex_lock_platform+0x32>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    396c:	4811      	ldr	r0, [pc, #68]	; (39b4 <mutex_lock_platform+0x54>)
    396e:	e00f      	b.n	3990 <mutex_lock_platform+0x30>
        return atomic_cas((atomic_t *)mutex->mutex, 0, 1) ?
    3970:	6803      	ldr	r3, [r0, #0]
    3972:	2201      	movs	r2, #1
    3974:	f3bf 8f5b 	dmb	ish
    3978:	e853 1f00 	ldrex	r1, [r3]
    397c:	2900      	cmp	r1, #0
    397e:	d103      	bne.n	3988 <mutex_lock_platform+0x28>
    3980:	e843 2000 	strex	r0, r2, [r3]
    3984:	2800      	cmp	r0, #0
    3986:	d1f7      	bne.n	3978 <mutex_lock_platform+0x18>
    3988:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    398c:	d10c      	bne.n	39a8 <mutex_lock_platform+0x48>
    398e:	2000      	movs	r0, #0
}
    3990:	bd08      	pop	{r3, pc}
        p_mutex = (struct k_mutex *)mutex->mutex;
    3992:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    3994:	f04f 32ff 	mov.w	r2, #4294967295
    3998:	f04f 33ff 	mov.w	r3, #4294967295
    399c:	f006 fac6 	bl	9f2c <z_impl_k_mutex_lock>
        if (ret == 0) {
    39a0:	2800      	cmp	r0, #0
    39a2:	d0f5      	beq.n	3990 <mutex_lock_platform+0x30>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_FAILED;
    39a4:	4804      	ldr	r0, [pc, #16]	; (39b8 <mutex_lock_platform+0x58>)
    39a6:	e7f3      	b.n	3990 <mutex_lock_platform+0x30>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    39a8:	4803      	ldr	r0, [pc, #12]	; (39b8 <mutex_lock_platform+0x58>)
    39aa:	e7f1      	b.n	3990 <mutex_lock_platform+0x30>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    39ac:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
}
    39b0:	4770      	bx	lr
    39b2:	bf00      	nop
    39b4:	ffff8fea 	.word	0xffff8fea
    39b8:	ffff8fe9 	.word	0xffff8fe9

000039bc <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    39bc:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    39be:	4604      	mov	r4, r0
    39c0:	b188      	cbz	r0, 39e6 <mutex_free_platform+0x2a>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    39c2:	6863      	ldr	r3, [r4, #4]
    39c4:	2b04      	cmp	r3, #4
    39c6:	d00d      	beq.n	39e4 <mutex_free_platform+0x28>
    39c8:	2b08      	cmp	r3, #8
    39ca:	d00b      	beq.n	39e4 <mutex_free_platform+0x28>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    39cc:	b153      	cbz	r3, 39e4 <mutex_free_platform+0x28>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    39ce:	f013 0f02 	tst.w	r3, #2
    39d2:	d00d      	beq.n	39f0 <mutex_free_platform+0x34>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    39d4:	4621      	mov	r1, r4
    39d6:	4809      	ldr	r0, [pc, #36]	; (39fc <mutex_free_platform+0x40>)
    39d8:	f00a f959 	bl	dc8e <k_mem_slab_free>
        mutex->mutex = NULL;
    39dc:	2300      	movs	r3, #0
    39de:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    39e0:	2300      	movs	r3, #0
    39e2:	6063      	str	r3, [r4, #4]
}
    39e4:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    39e6:	4b06      	ldr	r3, [pc, #24]	; (3a00 <mutex_free_platform+0x44>)
    39e8:	685b      	ldr	r3, [r3, #4]
    39ea:	4806      	ldr	r0, [pc, #24]	; (3a04 <mutex_free_platform+0x48>)
    39ec:	4798      	blx	r3
    39ee:	e7e8      	b.n	39c2 <mutex_free_platform+0x6>
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    39f0:	2214      	movs	r2, #20
    39f2:	2100      	movs	r1, #0
    39f4:	6820      	ldr	r0, [r4, #0]
    39f6:	f009 fb6a 	bl	d0ce <memset>
    39fa:	e7f1      	b.n	39e0 <mutex_free_platform+0x24>
    39fc:	20000ef0 	.word	0x20000ef0
    3a00:	20000140 	.word	0x20000140
    3a04:	0000efb0 	.word	0x0000efb0

00003a08 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    3a08:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    3a0a:	4604      	mov	r4, r0
    3a0c:	b178      	cbz	r0, 3a2e <mutex_init_platform+0x26>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    3a0e:	6863      	ldr	r3, [r4, #4]
    3a10:	2b04      	cmp	r3, #4
    3a12:	d00b      	beq.n	3a2c <mutex_init_platform+0x24>
    3a14:	2b08      	cmp	r3, #8
    3a16:	d009      	beq.n	3a2c <mutex_init_platform+0x24>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    3a18:	b90b      	cbnz	r3, 3a1e <mutex_init_platform+0x16>
        mutex->mutex == NULL) {
    3a1a:	6823      	ldr	r3, [r4, #0]
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    3a1c:	b163      	cbz	r3, 3a38 <mutex_init_platform+0x30>
    p_mutex = (struct k_mutex *)mutex->mutex;
    3a1e:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    3a20:	f00a f9d4 	bl	ddcc <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    3a24:	6863      	ldr	r3, [r4, #4]
    3a26:	f043 0301 	orr.w	r3, r3, #1
    3a2a:	6063      	str	r3, [r4, #4]
}
    3a2c:	bd10      	pop	{r4, pc}
        platform_abort_apis.abort_fn(
    3a2e:	4b0f      	ldr	r3, [pc, #60]	; (3a6c <mutex_init_platform+0x64>)
    3a30:	685b      	ldr	r3, [r3, #4]
    3a32:	480f      	ldr	r0, [pc, #60]	; (3a70 <mutex_init_platform+0x68>)
    3a34:	4798      	blx	r3
    3a36:	e7ea      	b.n	3a0e <mutex_init_platform+0x6>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    3a38:	f04f 32ff 	mov.w	r2, #4294967295
    3a3c:	f04f 33ff 	mov.w	r3, #4294967295
    3a40:	4621      	mov	r1, r4
    3a42:	480c      	ldr	r0, [pc, #48]	; (3a74 <mutex_init_platform+0x6c>)
    3a44:	f006 f938 	bl	9cb8 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    3a48:	b908      	cbnz	r0, 3a4e <mutex_init_platform+0x46>
    3a4a:	6823      	ldr	r3, [r4, #0]
    3a4c:	b91b      	cbnz	r3, 3a56 <mutex_init_platform+0x4e>
            platform_abort_apis.abort_fn(
    3a4e:	4b07      	ldr	r3, [pc, #28]	; (3a6c <mutex_init_platform+0x64>)
    3a50:	685b      	ldr	r3, [r3, #4]
    3a52:	4809      	ldr	r0, [pc, #36]	; (3a78 <mutex_init_platform+0x70>)
    3a54:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    3a56:	2214      	movs	r2, #20
    3a58:	2100      	movs	r1, #0
    3a5a:	6820      	ldr	r0, [r4, #0]
    3a5c:	f009 fb37 	bl	d0ce <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    3a60:	6863      	ldr	r3, [r4, #4]
    3a62:	f043 0302 	orr.w	r3, r3, #2
    3a66:	6063      	str	r3, [r4, #4]
    3a68:	e7d9      	b.n	3a1e <mutex_init_platform+0x16>
    3a6a:	bf00      	nop
    3a6c:	20000140 	.word	0x20000140
    3a70:	0000efb0 	.word	0x0000efb0
    3a74:	20000ef0 	.word	0x20000ef0
    3a78:	0000efd8 	.word	0x0000efd8

00003a7c <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    3a7c:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    3a7e:	2340      	movs	r3, #64	; 0x40
    3a80:	2214      	movs	r2, #20
    3a82:	4904      	ldr	r1, [pc, #16]	; (3a94 <nrf_cc3xx_platform_mutex_init+0x18>)
    3a84:	4804      	ldr	r0, [pc, #16]	; (3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>)
    3a86:	f00a f8f4 	bl	dc72 <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    3a8a:	4904      	ldr	r1, [pc, #16]	; (3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>)
    3a8c:	4804      	ldr	r0, [pc, #16]	; (3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>)
    3a8e:	f007 fc4b 	bl	b328 <nrf_cc3xx_platform_set_mutexes>
}
    3a92:	bd08      	pop	{r3, pc}
    3a94:	20000f0c 	.word	0x20000f0c
    3a98:	20000ef0 	.word	0x20000ef0
    3a9c:	0000f018 	.word	0x0000f018
    3aa0:	0000f008 	.word	0x0000f008

00003aa4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    3aa4:	4901      	ldr	r1, [pc, #4]	; (3aac <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    3aa6:	2210      	movs	r2, #16
	str	r2, [r1]
    3aa8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    3aaa:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    3aac:	e000ed10 	.word	0xe000ed10

00003ab0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    3ab0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    3ab2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    3ab4:	f380 8811 	msr	BASEPRI, r0
	isb
    3ab8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    3abc:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    3ac0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    3ac2:	b662      	cpsie	i
	isb
    3ac4:	f3bf 8f6f 	isb	sy

	bx	lr
    3ac8:	4770      	bx	lr
    3aca:	bf00      	nop

00003acc <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    3acc:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    3ace:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    3ad0:	f381 8811 	msr	BASEPRI, r1

	wfe
    3ad4:	bf20      	wfe

	msr	BASEPRI, r0
    3ad6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    3ada:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    3adc:	4770      	bx	lr
    3ade:	bf00      	nop

00003ae0 <esf_dump>:
#include <kernel_arch_data.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

static void esf_dump(const z_arch_esf_t *esf)
{
    3ae0:	b570      	push	{r4, r5, r6, lr}
    3ae2:	b082      	sub	sp, #8
    3ae4:	4604      	mov	r4, r0
    3ae6:	4d1f      	ldr	r5, [pc, #124]	; (3b64 <esf_dump+0x84>)
    3ae8:	4b1f      	ldr	r3, [pc, #124]	; (3b68 <esf_dump+0x88>)
    3aea:	1aed      	subs	r5, r5, r3
    3aec:	08ed      	lsrs	r5, r5, #3
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    3aee:	2601      	movs	r6, #1
    3af0:	f04f 0300 	mov.w	r3, #0
    3af4:	f366 0302 	bfi	r3, r6, #0, #3
    3af8:	f36f 03c5 	bfc	r3, #3, #3
    3afc:	f365 138f 	bfi	r3, r5, #6, #10
    3b00:	f8ad 3000 	strh.w	r3, [sp]
    3b04:	6883      	ldr	r3, [r0, #8]
    3b06:	6842      	ldr	r2, [r0, #4]
    3b08:	6801      	ldr	r1, [r0, #0]
    3b0a:	4818      	ldr	r0, [pc, #96]	; (3b6c <esf_dump+0x8c>)
    3b0c:	f7fd fda6 	bl	165c <log_3>
		esf->basic.a1, esf->basic.a2, esf->basic.a3);
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    3b10:	f04f 0300 	mov.w	r3, #0
    3b14:	f366 0302 	bfi	r3, r6, #0, #3
    3b18:	f36f 03c5 	bfc	r3, #3, #3
    3b1c:	f365 138f 	bfi	r3, r5, #6, #10
    3b20:	f8ad 3000 	strh.w	r3, [sp]
    3b24:	6963      	ldr	r3, [r4, #20]
    3b26:	6922      	ldr	r2, [r4, #16]
    3b28:	68e1      	ldr	r1, [r4, #12]
    3b2a:	4811      	ldr	r0, [pc, #68]	; (3b70 <esf_dump+0x90>)
    3b2c:	f7fd fd96 	bl	165c <log_3>
		esf->basic.a4, esf->basic.ip, esf->basic.lr);
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    3b30:	f04f 0200 	mov.w	r2, #0
    3b34:	f366 0202 	bfi	r2, r6, #0, #3
    3b38:	f36f 02c5 	bfc	r2, #3, #3
    3b3c:	f365 128f 	bfi	r2, r5, #6, #10
    3b40:	69e1      	ldr	r1, [r4, #28]
    3b42:	480c      	ldr	r0, [pc, #48]	; (3b74 <esf_dump+0x94>)
    3b44:	f7fd fdc8 	bl	16d8 <log_1>
	}

	LOG_ERR("EXC_RETURN: 0x%0x", esf->extra_info.exc_return);

#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    3b48:	f04f 0200 	mov.w	r2, #0
    3b4c:	f366 0202 	bfi	r2, r6, #0, #3
    3b50:	f36f 02c5 	bfc	r2, #3, #3
    3b54:	f365 128f 	bfi	r2, r5, #6, #10
    3b58:	69a1      	ldr	r1, [r4, #24]
    3b5a:	4807      	ldr	r0, [pc, #28]	; (3b78 <esf_dump+0x98>)
    3b5c:	f7fd fdbc 	bl	16d8 <log_1>
		esf->basic.pc);
}
    3b60:	b002      	add	sp, #8
    3b62:	bd70      	pop	{r4, r5, r6, pc}
    3b64:	0000e84c 	.word	0x0000e84c
    3b68:	0000e82c 	.word	0x0000e82c
    3b6c:	0000f02c 	.word	0x0000f02c
    3b70:	0000f05c 	.word	0x0000f05c
    3b74:	0000f08c 	.word	0x0000f08c
    3b78:	0000f09c 	.word	0x0000f09c

00003b7c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    3b7c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3b7e:	2b00      	cmp	r3, #0
    3b80:	db08      	blt.n	3b94 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3b82:	f000 001f 	and.w	r0, r0, #31
    3b86:	095b      	lsrs	r3, r3, #5
    3b88:	2201      	movs	r2, #1
    3b8a:	fa02 f000 	lsl.w	r0, r2, r0
    3b8e:	4a02      	ldr	r2, [pc, #8]	; (3b98 <arch_irq_enable+0x1c>)
    3b90:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    3b94:	4770      	bx	lr
    3b96:	bf00      	nop
    3b98:	e000e100 	.word	0xe000e100

00003b9c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    3b9c:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3b9e:	2b00      	cmp	r3, #0
    3ba0:	db0d      	blt.n	3bbe <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3ba2:	f000 001f 	and.w	r0, r0, #31
    3ba6:	095b      	lsrs	r3, r3, #5
    3ba8:	2201      	movs	r2, #1
    3baa:	fa02 f000 	lsl.w	r0, r2, r0
    3bae:	3320      	adds	r3, #32
    3bb0:	4a03      	ldr	r2, [pc, #12]	; (3bc0 <arch_irq_disable+0x24>)
    3bb2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3bb6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3bba:	f3bf 8f6f 	isb	sy
}
    3bbe:	4770      	bx	lr
    3bc0:	e000e100 	.word	0xe000e100

00003bc4 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    3bc4:	0942      	lsrs	r2, r0, #5
    3bc6:	4b05      	ldr	r3, [pc, #20]	; (3bdc <arch_irq_is_enabled+0x18>)
    3bc8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3bcc:	f000 001f 	and.w	r0, r0, #31
    3bd0:	2301      	movs	r3, #1
    3bd2:	fa03 f000 	lsl.w	r0, r3, r0
}
    3bd6:	4010      	ands	r0, r2
    3bd8:	4770      	bx	lr
    3bda:	bf00      	nop
    3bdc:	e000e100 	.word	0xe000e100

00003be0 <z_arm_irq_priority_set>:
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    3be0:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    3be2:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    3be4:	2b00      	cmp	r3, #0
    3be6:	db08      	blt.n	3bfa <z_arm_irq_priority_set+0x1a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3be8:	0149      	lsls	r1, r1, #5
    3bea:	b2c9      	uxtb	r1, r1
    3bec:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    3bf0:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    3bf4:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    3bf8:	4770      	bx	lr
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3bfa:	f000 000f 	and.w	r0, r0, #15
    3bfe:	0149      	lsls	r1, r1, #5
    3c00:	b2c9      	uxtb	r1, r1
    3c02:	4b01      	ldr	r3, [pc, #4]	; (3c08 <z_arm_irq_priority_set+0x28>)
    3c04:	5419      	strb	r1, [r3, r0]
}
    3c06:	4770      	bx	lr
    3c08:	e000ed14 	.word	0xe000ed14

00003c0c <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    3c0c:	bf30      	wfi
    b z_SysNmiOnReset
    3c0e:	f7ff bffd 	b.w	3c0c <z_SysNmiOnReset>
    3c12:	bf00      	nop

00003c14 <z_arm_prep_c>:
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    3c14:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3c16:	4b0b      	ldr	r3, [pc, #44]	; (3c44 <z_arm_prep_c+0x30>)
    3c18:	4a0b      	ldr	r2, [pc, #44]	; (3c48 <z_arm_prep_c+0x34>)
    3c1a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    3c1e:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    3c20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3c24:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    3c28:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    3c2c:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    3c30:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    3c34:	f005 ffde 	bl	9bf4 <z_bss_zero>
	z_data_copy();
    3c38:	f007 f83c 	bl	acb4 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    3c3c:	f000 fcb6 	bl	45ac <z_arm_interrupt_init>
	z_cstart();
    3c40:	f005 ffe4 	bl	9c0c <z_cstart>
    3c44:	e000ed00 	.word	0xe000ed00
    3c48:	00000000 	.word	0x00000000

00003c4c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    3c4c:	4a0a      	ldr	r2, [pc, #40]	; (3c78 <arch_swap+0x2c>)
    3c4e:	6893      	ldr	r3, [r2, #8]
    3c50:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	_current->arch.swap_return_value = _k_neg_eagain;
    3c54:	4909      	ldr	r1, [pc, #36]	; (3c7c <arch_swap+0x30>)
    3c56:	6809      	ldr	r1, [r1, #0]
    3c58:	f8c3 10ac 	str.w	r1, [r3, #172]	; 0xac

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3c5c:	4908      	ldr	r1, [pc, #32]	; (3c80 <arch_swap+0x34>)
    3c5e:	684b      	ldr	r3, [r1, #4]
    3c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3c64:	604b      	str	r3, [r1, #4]
    3c66:	2300      	movs	r3, #0
    3c68:	f383 8811 	msr	BASEPRI, r3
    3c6c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3c70:	6893      	ldr	r3, [r2, #8]
}
    3c72:	f8d3 00ac 	ldr.w	r0, [r3, #172]	; 0xac
    3c76:	4770      	bx	lr
    3c78:	200024ec 	.word	0x200024ec
    3c7c:	0000f940 	.word	0x0000f940
    3c80:	e000ed00 	.word	0xe000ed00

00003c84 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3c84:	4913      	ldr	r1, [pc, #76]	; (3cd4 <z_arm_pendsv+0x50>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3c86:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3c88:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3c8c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    3c8e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    3c92:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3c96:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    3c98:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3c9c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    3ca0:	4f0d      	ldr	r7, [pc, #52]	; (3cd8 <z_arm_pendsv+0x54>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    3ca2:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3ca6:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    3ca8:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    3caa:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3cac:	f8d2 00a8 	ldr.w	r0, [r2, #168]	; 0xa8
    movs r3, #0
    3cb0:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    3cb2:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    3cb6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    3cba:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    3cbc:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    3cbe:	f000 fd17 	bl	46f0 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    3cc2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    3cc6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    3cca:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    3cce:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    3cd2:	4770      	bx	lr
    ldr r1, =_kernel
    3cd4:	200024ec 	.word	0x200024ec
    ldr v4, =_SCS_ICSR
    3cd8:	e000ed04 	.word	0xe000ed04

00003cdc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    3cdc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    3ce0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    3ce2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    3ce6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    3cea:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    3cec:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    3cf0:	2902      	cmp	r1, #2
    beq _oops
    3cf2:	d0ff      	beq.n	3cf4 <_oops>

00003cf4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    3cf4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    3cf6:	f009 f920 	bl	cf3a <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    3cfa:	bd01      	pop	{r0, pc}

00003cfc <arch_new_thread>:
 * of the ESF.
 */
void arch_new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		     char *stack_ptr, k_thread_entry_t entry,
		     void *p1, void *p2, void *p3)
{
    3cfc:	b410      	push	{r4}
		thread->stack_info.size -= FP_GUARD_EXTRA_SIZE;
	}
#endif /* FP_GUARD_EXTRA_SIZE */
#endif /* CONFIG_MPU_STACK_GUARD */

	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    3cfe:	f1a2 0420 	sub.w	r4, r2, #32
		iframe->pc = (uint32_t)arch_user_mode_enter;
	} else {
		iframe->pc = (uint32_t)z_thread_entry;
	}
#else
	iframe->pc = (uint32_t)z_thread_entry;
    3d02:	490d      	ldr	r1, [pc, #52]	; (3d38 <arch_new_thread+0x3c>)
#endif

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
    3d04:	f021 0101 	bic.w	r1, r1, #1
    3d08:	f842 1c08 	str.w	r1, [r2, #-8]
#endif
	iframe->a1 = (uint32_t)entry;
    3d0c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    3d10:	9b01      	ldr	r3, [sp, #4]
    3d12:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->a3 = (uint32_t)p2;
    3d16:	9b02      	ldr	r3, [sp, #8]
    3d18:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    3d1c:	9b03      	ldr	r3, [sp, #12]
    3d1e:	f842 3c14 	str.w	r3, [r2, #-20]

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    3d22:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3d26:	f842 3c04 	str.w	r3, [r2, #-4]
#if defined(CONFIG_COMPILER_ISA_THUMB2)
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
    3d2a:	6504      	str	r4, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    3d2c:	2300      	movs	r3, #0
    3d2e:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    3d32:	bc10      	pop	{r4}
    3d34:	4770      	bx	lr
    3d36:	bf00      	nop
    3d38:	0000b9a3 	.word	0x0000b9a3

00003d3c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    3d3c:	4b16      	ldr	r3, [pc, #88]	; (3d98 <z_check_thread_stack_fail+0x5c>)
    3d3e:	689a      	ldr	r2, [r3, #8]

	if (thread == NULL) {
    3d40:	b1da      	cbz	r2, 3d7a <z_check_thread_stack_fail+0x3e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    3d42:	f110 0f16 	cmn.w	r0, #22
    3d46:	d01a      	beq.n	3d7e <z_check_thread_stack_fail+0x42>
{
    3d48:	b410      	push	{r4}
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    3d4a:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    3d4e:	f1a3 0420 	sub.w	r4, r3, #32
    3d52:	4284      	cmp	r4, r0
    3d54:	d805      	bhi.n	3d62 <z_check_thread_stack_fail+0x26>
    3d56:	4283      	cmp	r3, r0
    3d58:	d908      	bls.n	3d6c <z_check_thread_stack_fail+0x30>
    3d5a:	428b      	cmp	r3, r1
    3d5c:	d808      	bhi.n	3d70 <z_check_thread_stack_fail+0x34>
    3d5e:	2100      	movs	r1, #0
    3d60:	e000      	b.n	3d64 <z_check_thread_stack_fail+0x28>
    3d62:	2100      	movs	r1, #0
    3d64:	b931      	cbnz	r1, 3d74 <z_check_thread_stack_fail+0x38>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    3d66:	2000      	movs	r0, #0
}
    3d68:	bc10      	pop	{r4}
    3d6a:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    3d6c:	2100      	movs	r1, #0
    3d6e:	e7f9      	b.n	3d64 <z_check_thread_stack_fail+0x28>
    3d70:	2101      	movs	r1, #1
    3d72:	e7f7      	b.n	3d64 <z_check_thread_stack_fail+0x28>
		return thread->stack_info.start;
    3d74:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    3d78:	e7f6      	b.n	3d68 <z_check_thread_stack_fail+0x2c>
		return 0;
    3d7a:	2000      	movs	r0, #0
    3d7c:	4770      	bx	lr
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    3d7e:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
    3d82:	428b      	cmp	r3, r1
    3d84:	bf94      	ite	ls
    3d86:	2100      	movls	r1, #0
    3d88:	2101      	movhi	r1, #1
    3d8a:	b909      	cbnz	r1, 3d90 <z_check_thread_stack_fail+0x54>
	return 0;
    3d8c:	2000      	movs	r0, #0
}
    3d8e:	4770      	bx	lr
		return thread->stack_info.start;
    3d90:	f8d2 0098 	ldr.w	r0, [r2, #152]	; 0x98
    3d94:	4770      	bx	lr
    3d96:	bf00      	nop
    3d98:	200024ec 	.word	0x200024ec

00003d9c <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    3d9c:	b508      	push	{r3, lr}
    3d9e:	460d      	mov	r5, r1
    3da0:	4614      	mov	r4, r2
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    3da2:	4b08      	ldr	r3, [pc, #32]	; (3dc4 <arch_switch_to_main_thread+0x28>)
    3da4:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    3da6:	f000 fca3 	bl	46f0 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3daa:	4620      	mov	r0, r4
    3dac:	f385 8809 	msr	PSP, r5
    3db0:	2100      	movs	r1, #0
    3db2:	b663      	cpsie	if
    3db4:	f381 8811 	msr	BASEPRI, r1
    3db8:	f3bf 8f6f 	isb	sy
    3dbc:	2200      	movs	r2, #0
    3dbe:	2300      	movs	r3, #0
    3dc0:	f007 fdef 	bl	b9a2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    3dc4:	200024ec 	.word	0x200024ec

00003dc8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3dc8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    3dca:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    3dcc:	4a0b      	ldr	r2, [pc, #44]	; (3dfc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    3dce:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    3dd0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    3dd2:	bf1e      	ittt	ne
	movne	r1, #0
    3dd4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    3dd6:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    3dd8:	f009 ffd0 	blne	dd7c <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    3ddc:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    3dde:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3de2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3de6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    3dea:	4905      	ldr	r1, [pc, #20]	; (3e00 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3dec:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    3dee:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3df0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3df2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3df6:	4903      	ldr	r1, [pc, #12]	; (3e04 <_isr_wrapper+0x3c>)
	bx r1
    3df8:	4708      	bx	r1
    3dfa:	0000      	.short	0x0000
	ldr r2, =_kernel
    3dfc:	200024ec 	.word	0x200024ec
	ldr r1, =_sw_isr_table
    3e00:	0000e6ac 	.word	0x0000e6ac
	ldr r1, =z_arm_int_exit
    3e04:	00003e09 	.word	0x00003e09

00003e08 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3e08:	4b04      	ldr	r3, [pc, #16]	; (3e1c <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    3e0a:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3e0c:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    3e0e:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3e10:	d003      	beq.n	3e1a <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    3e12:	4903      	ldr	r1, [pc, #12]	; (3e20 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3e18:	600a      	str	r2, [r1, #0]

00003e1a <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    3e1a:	4770      	bx	lr
	ldr r3, =_kernel
    3e1c:	200024ec 	.word	0x200024ec
	ldr r1, =_SCS_ICSR
    3e20:	e000ed04 	.word	0xe000ed04

00003e24 <usage_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
{
    3e24:	b508      	push	{r3, lr}
    3e26:	4b4e      	ldr	r3, [pc, #312]	; (3f60 <usage_fault+0x13c>)
    3e28:	4a4e      	ldr	r2, [pc, #312]	; (3f64 <usage_fault+0x140>)
    3e2a:	1a9b      	subs	r3, r3, r2
    3e2c:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    3e2e:	f04f 0100 	mov.w	r1, #0
    3e32:	2201      	movs	r2, #1
    3e34:	f362 0102 	bfi	r1, r2, #0, #3
    3e38:	f36f 01c5 	bfc	r1, #3, #3
    3e3c:	f363 118f 	bfi	r1, r3, #6, #10
    3e40:	4849      	ldr	r0, [pc, #292]	; (3f68 <usage_fault+0x144>)
    3e42:	f7fd fcbb 	bl	17bc <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3e46:	4b49      	ldr	r3, [pc, #292]	; (3f6c <usage_fault+0x148>)
    3e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3e4a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    3e4e:	d121      	bne.n	3e94 <usage_fault+0x70>
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3e50:	4b46      	ldr	r3, [pc, #280]	; (3f6c <usage_fault+0x148>)
    3e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3e54:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
    3e58:	d12d      	bne.n	3eb6 <usage_fault+0x92>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3e5a:	4b44      	ldr	r3, [pc, #272]	; (3f6c <usage_fault+0x148>)
    3e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3e5e:	f413 2f00 	tst.w	r3, #524288	; 0x80000
    3e62:	d139      	bne.n	3ed8 <usage_fault+0xb4>
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3e64:	4b41      	ldr	r3, [pc, #260]	; (3f6c <usage_fault+0x148>)
    3e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3e68:	f413 2f80 	tst.w	r3, #262144	; 0x40000
    3e6c:	d145      	bne.n	3efa <usage_fault+0xd6>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3e6e:	4b3f      	ldr	r3, [pc, #252]	; (3f6c <usage_fault+0x148>)
    3e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3e72:	f413 3f00 	tst.w	r3, #131072	; 0x20000
    3e76:	d151      	bne.n	3f1c <usage_fault+0xf8>
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3e78:	4b3c      	ldr	r3, [pc, #240]	; (3f6c <usage_fault+0x148>)
    3e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3e7c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    3e80:	d15d      	bne.n	3f3e <usage_fault+0x11a>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3e82:	4a3a      	ldr	r2, [pc, #232]	; (3f6c <usage_fault+0x148>)
    3e84:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3e86:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    3e8a:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    3e8e:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    3e90:	2000      	movs	r0, #0
    3e92:	bd08      	pop	{r3, pc}
    3e94:	4b32      	ldr	r3, [pc, #200]	; (3f60 <usage_fault+0x13c>)
    3e96:	4a33      	ldr	r2, [pc, #204]	; (3f64 <usage_fault+0x140>)
    3e98:	1a9b      	subs	r3, r3, r2
    3e9a:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Division by zero");
    3e9c:	f04f 0100 	mov.w	r1, #0
    3ea0:	2201      	movs	r2, #1
    3ea2:	f362 0102 	bfi	r1, r2, #0, #3
    3ea6:	f36f 01c5 	bfc	r1, #3, #3
    3eaa:	f363 118f 	bfi	r1, r3, #6, #10
    3eae:	4830      	ldr	r0, [pc, #192]	; (3f70 <usage_fault+0x14c>)
    3eb0:	f7fd fc84 	bl	17bc <log_0>
    3eb4:	e7cc      	b.n	3e50 <usage_fault+0x2c>
    3eb6:	4b2a      	ldr	r3, [pc, #168]	; (3f60 <usage_fault+0x13c>)
    3eb8:	4a2a      	ldr	r2, [pc, #168]	; (3f64 <usage_fault+0x140>)
    3eba:	1a9b      	subs	r3, r3, r2
    3ebc:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unaligned memory access");
    3ebe:	f04f 0100 	mov.w	r1, #0
    3ec2:	2201      	movs	r2, #1
    3ec4:	f362 0102 	bfi	r1, r2, #0, #3
    3ec8:	f36f 01c5 	bfc	r1, #3, #3
    3ecc:	f363 118f 	bfi	r1, r3, #6, #10
    3ed0:	4828      	ldr	r0, [pc, #160]	; (3f74 <usage_fault+0x150>)
    3ed2:	f7fd fc73 	bl	17bc <log_0>
    3ed6:	e7c0      	b.n	3e5a <usage_fault+0x36>
    3ed8:	4b21      	ldr	r3, [pc, #132]	; (3f60 <usage_fault+0x13c>)
    3eda:	4a22      	ldr	r2, [pc, #136]	; (3f64 <usage_fault+0x140>)
    3edc:	1a9b      	subs	r3, r3, r2
    3ede:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  No coprocessor instructions");
    3ee0:	f04f 0100 	mov.w	r1, #0
    3ee4:	2201      	movs	r2, #1
    3ee6:	f362 0102 	bfi	r1, r2, #0, #3
    3eea:	f36f 01c5 	bfc	r1, #3, #3
    3eee:	f363 118f 	bfi	r1, r3, #6, #10
    3ef2:	4821      	ldr	r0, [pc, #132]	; (3f78 <usage_fault+0x154>)
    3ef4:	f7fd fc62 	bl	17bc <log_0>
    3ef8:	e7b4      	b.n	3e64 <usage_fault+0x40>
    3efa:	4b19      	ldr	r3, [pc, #100]	; (3f60 <usage_fault+0x13c>)
    3efc:	4a19      	ldr	r2, [pc, #100]	; (3f64 <usage_fault+0x140>)
    3efe:	1a9b      	subs	r3, r3, r2
    3f00:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    3f02:	f04f 0100 	mov.w	r1, #0
    3f06:	2201      	movs	r2, #1
    3f08:	f362 0102 	bfi	r1, r2, #0, #3
    3f0c:	f36f 01c5 	bfc	r1, #3, #3
    3f10:	f363 118f 	bfi	r1, r3, #6, #10
    3f14:	4819      	ldr	r0, [pc, #100]	; (3f7c <usage_fault+0x158>)
    3f16:	f7fd fc51 	bl	17bc <log_0>
    3f1a:	e7a8      	b.n	3e6e <usage_fault+0x4a>
    3f1c:	4b10      	ldr	r3, [pc, #64]	; (3f60 <usage_fault+0x13c>)
    3f1e:	4a11      	ldr	r2, [pc, #68]	; (3f64 <usage_fault+0x140>)
    3f20:	1a9b      	subs	r3, r3, r2
    3f22:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Illegal use of the EPSR");
    3f24:	f04f 0100 	mov.w	r1, #0
    3f28:	2201      	movs	r2, #1
    3f2a:	f362 0102 	bfi	r1, r2, #0, #3
    3f2e:	f36f 01c5 	bfc	r1, #3, #3
    3f32:	f363 118f 	bfi	r1, r3, #6, #10
    3f36:	4812      	ldr	r0, [pc, #72]	; (3f80 <usage_fault+0x15c>)
    3f38:	f7fd fc40 	bl	17bc <log_0>
    3f3c:	e79c      	b.n	3e78 <usage_fault+0x54>
    3f3e:	4b08      	ldr	r3, [pc, #32]	; (3f60 <usage_fault+0x13c>)
    3f40:	4a08      	ldr	r2, [pc, #32]	; (3f64 <usage_fault+0x140>)
    3f42:	1a9b      	subs	r3, r3, r2
    3f44:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    3f46:	f04f 0100 	mov.w	r1, #0
    3f4a:	2201      	movs	r2, #1
    3f4c:	f362 0102 	bfi	r1, r2, #0, #3
    3f50:	f36f 01c5 	bfc	r1, #3, #3
    3f54:	f363 118f 	bfi	r1, r3, #6, #10
    3f58:	480a      	ldr	r0, [pc, #40]	; (3f84 <usage_fault+0x160>)
    3f5a:	f7fd fc2f 	bl	17bc <log_0>
    3f5e:	e790      	b.n	3e82 <usage_fault+0x5e>
    3f60:	0000e84c 	.word	0x0000e84c
    3f64:	0000e82c 	.word	0x0000e82c
    3f68:	0000f0cc 	.word	0x0000f0cc
    3f6c:	e000ed00 	.word	0xe000ed00
    3f70:	0000f0e4 	.word	0x0000f0e4
    3f74:	0000f0f8 	.word	0x0000f0f8
    3f78:	0000f114 	.word	0x0000f114
    3f7c:	0000f134 	.word	0x0000f134
    3f80:	0000f15c 	.word	0x0000f15c
    3f84:	0000f178 	.word	0x0000f178

00003f88 <debug_monitor>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void debug_monitor(z_arch_esf_t *esf, bool *recoverable)
{
    3f88:	b508      	push	{r3, lr}
	*recoverable = false;
    3f8a:	2200      	movs	r2, #0
    3f8c:	700a      	strb	r2, [r1, #0]
    3f8e:	4b08      	ldr	r3, [pc, #32]	; (3fb0 <debug_monitor+0x28>)
    3f90:	4908      	ldr	r1, [pc, #32]	; (3fb4 <debug_monitor+0x2c>)
    3f92:	1a5b      	subs	r3, r3, r1
    3f94:	08db      	lsrs	r3, r3, #3

	PR_FAULT_INFO(
    3f96:	f04f 0100 	mov.w	r1, #0
    3f9a:	2001      	movs	r0, #1
    3f9c:	f360 0102 	bfi	r1, r0, #0, #3
    3fa0:	f362 01c5 	bfi	r1, r2, #3, #3
    3fa4:	f363 118f 	bfi	r1, r3, #6, #10
    3fa8:	4803      	ldr	r0, [pc, #12]	; (3fb8 <debug_monitor+0x30>)
    3faa:	f7fd fc07 	bl	17bc <log_0>

		*recoverable = memory_fault_recoverable(esf, false);
	}

#endif
}
    3fae:	bd08      	pop	{r3, pc}
    3fb0:	0000e84c 	.word	0x0000e84c
    3fb4:	0000e82c 	.word	0x0000e82c
    3fb8:	0000f1a4 	.word	0x0000f1a4

00003fbc <bus_fault>:
{
    3fbc:	b570      	push	{r4, r5, r6, lr}
    3fbe:	4605      	mov	r5, r0
    3fc0:	460e      	mov	r6, r1
    3fc2:	4614      	mov	r4, r2
    3fc4:	4b5e      	ldr	r3, [pc, #376]	; (4140 <bus_fault+0x184>)
    3fc6:	4a5f      	ldr	r2, [pc, #380]	; (4144 <bus_fault+0x188>)
    3fc8:	1a9b      	subs	r3, r3, r2
    3fca:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    3fcc:	f04f 0100 	mov.w	r1, #0
    3fd0:	2201      	movs	r2, #1
    3fd2:	f362 0102 	bfi	r1, r2, #0, #3
    3fd6:	f36f 01c5 	bfc	r1, #3, #3
    3fda:	f363 118f 	bfi	r1, r3, #6, #10
    3fde:	485a      	ldr	r0, [pc, #360]	; (4148 <bus_fault+0x18c>)
    3fe0:	f7fd fbec 	bl	17bc <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3fe4:	4b59      	ldr	r3, [pc, #356]	; (414c <bus_fault+0x190>)
    3fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3fe8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    3fec:	d124      	bne.n	4038 <bus_fault+0x7c>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    3fee:	4b57      	ldr	r3, [pc, #348]	; (414c <bus_fault+0x190>)
    3ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3ff2:	f413 6f00 	tst.w	r3, #2048	; 0x800
    3ff6:	d130      	bne.n	405a <bus_fault+0x9e>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3ff8:	4b54      	ldr	r3, [pc, #336]	; (414c <bus_fault+0x190>)
    3ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3ffc:	f413 7f00 	tst.w	r3, #512	; 0x200
    4000:	d13c      	bne.n	407c <bus_fault+0xc0>
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    4002:	4b52      	ldr	r3, [pc, #328]	; (414c <bus_fault+0x190>)
    4004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4006:	f413 6f80 	tst.w	r3, #1024	; 0x400
    400a:	d165      	bne.n	40d8 <bus_fault+0x11c>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    400c:	4b4f      	ldr	r3, [pc, #316]	; (414c <bus_fault+0x190>)
    400e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4010:	f413 7f80 	tst.w	r3, #256	; 0x100
    4014:	d171      	bne.n	40fa <bus_fault+0x13e>
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    4016:	4b4d      	ldr	r3, [pc, #308]	; (414c <bus_fault+0x190>)
    4018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    401a:	f413 5f00 	tst.w	r3, #8192	; 0x2000
    401e:	d17d      	bne.n	411c <bus_fault+0x160>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    4020:	4a4a      	ldr	r2, [pc, #296]	; (414c <bus_fault+0x190>)
    4022:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4024:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    4028:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    402a:	2101      	movs	r1, #1
    402c:	4628      	mov	r0, r5
    402e:	f008 ff96 	bl	cf5e <memory_fault_recoverable>
    4032:	7020      	strb	r0, [r4, #0]
}
    4034:	2000      	movs	r0, #0
    4036:	bd70      	pop	{r4, r5, r6, pc}
    4038:	4b41      	ldr	r3, [pc, #260]	; (4140 <bus_fault+0x184>)
    403a:	4a42      	ldr	r2, [pc, #264]	; (4144 <bus_fault+0x188>)
    403c:	1a9b      	subs	r3, r3, r2
    403e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error");
    4040:	f04f 0100 	mov.w	r1, #0
    4044:	2201      	movs	r2, #1
    4046:	f362 0102 	bfi	r1, r2, #0, #3
    404a:	f36f 01c5 	bfc	r1, #3, #3
    404e:	f363 118f 	bfi	r1, r3, #6, #10
    4052:	483f      	ldr	r0, [pc, #252]	; (4150 <bus_fault+0x194>)
    4054:	f7fd fbb2 	bl	17bc <log_0>
    4058:	e7c9      	b.n	3fee <bus_fault+0x32>
    405a:	4b39      	ldr	r3, [pc, #228]	; (4140 <bus_fault+0x184>)
    405c:	4a39      	ldr	r2, [pc, #228]	; (4144 <bus_fault+0x188>)
    405e:	1a9b      	subs	r3, r3, r2
    4060:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
    4062:	f04f 0100 	mov.w	r1, #0
    4066:	2201      	movs	r2, #1
    4068:	f362 0102 	bfi	r1, r2, #0, #3
    406c:	f36f 01c5 	bfc	r1, #3, #3
    4070:	f363 118f 	bfi	r1, r3, #6, #10
    4074:	4837      	ldr	r0, [pc, #220]	; (4154 <bus_fault+0x198>)
    4076:	f7fd fba1 	bl	17bc <log_0>
    407a:	e7bd      	b.n	3ff8 <bus_fault+0x3c>
    407c:	4b30      	ldr	r3, [pc, #192]	; (4140 <bus_fault+0x184>)
    407e:	4a31      	ldr	r2, [pc, #196]	; (4144 <bus_fault+0x188>)
    4080:	1a9b      	subs	r3, r3, r2
    4082:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Precise data bus error");
    4084:	f04f 0100 	mov.w	r1, #0
    4088:	2201      	movs	r2, #1
    408a:	f362 0102 	bfi	r1, r2, #0, #3
    408e:	f36f 01c5 	bfc	r1, #3, #3
    4092:	f363 118f 	bfi	r1, r3, #6, #10
    4096:	4830      	ldr	r0, [pc, #192]	; (4158 <bus_fault+0x19c>)
    4098:	f7fd fb90 	bl	17bc <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    409c:	4b2b      	ldr	r3, [pc, #172]	; (414c <bus_fault+0x190>)
    409e:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    40a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    40a2:	f413 4f00 	tst.w	r3, #32768	; 0x8000
    40a6:	d0ac      	beq.n	4002 <bus_fault+0x46>
    40a8:	4b25      	ldr	r3, [pc, #148]	; (4140 <bus_fault+0x184>)
    40aa:	4a26      	ldr	r2, [pc, #152]	; (4144 <bus_fault+0x188>)
    40ac:	1a9b      	subs	r3, r3, r2
    40ae:	08db      	lsrs	r3, r3, #3
			PR_EXC("  BFAR Address: 0x%x", bfar);
    40b0:	f04f 0200 	mov.w	r2, #0
    40b4:	2001      	movs	r0, #1
    40b6:	f360 0202 	bfi	r2, r0, #0, #3
    40ba:	f36f 02c5 	bfc	r2, #3, #3
    40be:	f363 128f 	bfi	r2, r3, #6, #10
    40c2:	4826      	ldr	r0, [pc, #152]	; (415c <bus_fault+0x1a0>)
    40c4:	f7fd fb08 	bl	16d8 <log_1>
			if (from_hard_fault != 0) {
    40c8:	2e00      	cmp	r6, #0
    40ca:	d09a      	beq.n	4002 <bus_fault+0x46>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    40cc:	4a1f      	ldr	r2, [pc, #124]	; (414c <bus_fault+0x190>)
    40ce:	6a93      	ldr	r3, [r2, #40]	; 0x28
    40d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    40d4:	6293      	str	r3, [r2, #40]	; 0x28
    40d6:	e794      	b.n	4002 <bus_fault+0x46>
    40d8:	4b19      	ldr	r3, [pc, #100]	; (4140 <bus_fault+0x184>)
    40da:	4a1a      	ldr	r2, [pc, #104]	; (4144 <bus_fault+0x188>)
    40dc:	1a9b      	subs	r3, r3, r2
    40de:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Imprecise data bus error");
    40e0:	f04f 0100 	mov.w	r1, #0
    40e4:	2201      	movs	r2, #1
    40e6:	f362 0102 	bfi	r1, r2, #0, #3
    40ea:	f36f 01c5 	bfc	r1, #3, #3
    40ee:	f363 118f 	bfi	r1, r3, #6, #10
    40f2:	481b      	ldr	r0, [pc, #108]	; (4160 <bus_fault+0x1a4>)
    40f4:	f7fd fb62 	bl	17bc <log_0>
    40f8:	e788      	b.n	400c <bus_fault+0x50>
    40fa:	4b11      	ldr	r3, [pc, #68]	; (4140 <bus_fault+0x184>)
    40fc:	4a11      	ldr	r2, [pc, #68]	; (4144 <bus_fault+0x188>)
    40fe:	1a9b      	subs	r3, r3, r2
    4100:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction bus error");
    4102:	f04f 0100 	mov.w	r1, #0
    4106:	2201      	movs	r2, #1
    4108:	f362 0102 	bfi	r1, r2, #0, #3
    410c:	f36f 01c5 	bfc	r1, #3, #3
    4110:	f363 118f 	bfi	r1, r3, #6, #10
    4114:	4813      	ldr	r0, [pc, #76]	; (4164 <bus_fault+0x1a8>)
    4116:	f7fd fb51 	bl	17bc <log_0>
    411a:	e781      	b.n	4020 <bus_fault+0x64>
    411c:	4b08      	ldr	r3, [pc, #32]	; (4140 <bus_fault+0x184>)
    411e:	4a09      	ldr	r2, [pc, #36]	; (4144 <bus_fault+0x188>)
    4120:	1a9b      	subs	r3, r3, r2
    4122:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    4124:	f04f 0100 	mov.w	r1, #0
    4128:	2201      	movs	r2, #1
    412a:	f362 0102 	bfi	r1, r2, #0, #3
    412e:	f36f 01c5 	bfc	r1, #3, #3
    4132:	f363 118f 	bfi	r1, r3, #6, #10
    4136:	480c      	ldr	r0, [pc, #48]	; (4168 <bus_fault+0x1ac>)
    4138:	f7fd fb40 	bl	17bc <log_0>
    413c:	e770      	b.n	4020 <bus_fault+0x64>
    413e:	bf00      	nop
    4140:	0000e84c 	.word	0x0000e84c
    4144:	0000e82c 	.word	0x0000e82c
    4148:	0000f1c8 	.word	0x0000f1c8
    414c:	e000ed00 	.word	0xe000ed00
    4150:	0000f1e0 	.word	0x0000f1e0
    4154:	0000f1f4 	.word	0x0000f1f4
    4158:	0000f208 	.word	0x0000f208
    415c:	0000f224 	.word	0x0000f224
    4160:	0000f23c 	.word	0x0000f23c
    4164:	0000f258 	.word	0x0000f258
    4168:	0000f270 	.word	0x0000f270

0000416c <mem_manage_fault>:
{
    416c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    416e:	4605      	mov	r5, r0
    4170:	460c      	mov	r4, r1
    4172:	4616      	mov	r6, r2
    4174:	4b64      	ldr	r3, [pc, #400]	; (4308 <mem_manage_fault+0x19c>)
    4176:	4a65      	ldr	r2, [pc, #404]	; (430c <mem_manage_fault+0x1a0>)
    4178:	1a9b      	subs	r3, r3, r2
    417a:	08db      	lsrs	r3, r3, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    417c:	f04f 0100 	mov.w	r1, #0
    4180:	2201      	movs	r2, #1
    4182:	f362 0102 	bfi	r1, r2, #0, #3
    4186:	f36f 01c5 	bfc	r1, #3, #3
    418a:	f363 118f 	bfi	r1, r3, #6, #10
    418e:	4860      	ldr	r0, [pc, #384]	; (4310 <mem_manage_fault+0x1a4>)
    4190:	f7fd fb14 	bl	17bc <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    4194:	4b5f      	ldr	r3, [pc, #380]	; (4314 <mem_manage_fault+0x1a8>)
    4196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4198:	f013 0f10 	tst.w	r3, #16
    419c:	d132      	bne.n	4204 <mem_manage_fault+0x98>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    419e:	4b5d      	ldr	r3, [pc, #372]	; (4314 <mem_manage_fault+0x1a8>)
    41a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    41a2:	f013 0f08 	tst.w	r3, #8
    41a6:	d13e      	bne.n	4226 <mem_manage_fault+0xba>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    41a8:	4b5a      	ldr	r3, [pc, #360]	; (4314 <mem_manage_fault+0x1a8>)
    41aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    41ac:	f013 0f02 	tst.w	r3, #2
    41b0:	d14a      	bne.n	4248 <mem_manage_fault+0xdc>
	uint32_t mmfar = -EINVAL;
    41b2:	f06f 0715 	mvn.w	r7, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    41b6:	4b57      	ldr	r3, [pc, #348]	; (4314 <mem_manage_fault+0x1a8>)
    41b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    41ba:	f013 0f01 	tst.w	r3, #1
    41be:	d175      	bne.n	42ac <mem_manage_fault+0x140>
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    41c0:	4b54      	ldr	r3, [pc, #336]	; (4314 <mem_manage_fault+0x1a8>)
    41c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    41c4:	f013 0f20 	tst.w	r3, #32
    41c8:	f040 8081 	bne.w	42ce <mem_manage_fault+0x162>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    41cc:	4b51      	ldr	r3, [pc, #324]	; (4314 <mem_manage_fault+0x1a8>)
    41ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    41d0:	f013 0f10 	tst.w	r3, #16
    41d4:	d104      	bne.n	41e0 <mem_manage_fault+0x74>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    41d6:	4b4f      	ldr	r3, [pc, #316]	; (4314 <mem_manage_fault+0x1a8>)
    41d8:	6a9c      	ldr	r4, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    41da:	f014 0402 	ands.w	r4, r4, #2
    41de:	d005      	beq.n	41ec <mem_manage_fault+0x80>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    41e0:	4b4c      	ldr	r3, [pc, #304]	; (4314 <mem_manage_fault+0x1a8>)
    41e2:	685c      	ldr	r4, [r3, #4]
    41e4:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
    41e8:	f040 8082 	bne.w	42f0 <mem_manage_fault+0x184>
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    41ec:	4a49      	ldr	r2, [pc, #292]	; (4314 <mem_manage_fault+0x1a8>)
    41ee:	6a93      	ldr	r3, [r2, #40]	; 0x28
    41f0:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    41f4:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    41f6:	2101      	movs	r1, #1
    41f8:	4628      	mov	r0, r5
    41fa:	f008 feb0 	bl	cf5e <memory_fault_recoverable>
    41fe:	7030      	strb	r0, [r6, #0]
}
    4200:	4620      	mov	r0, r4
    4202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4204:	4b40      	ldr	r3, [pc, #256]	; (4308 <mem_manage_fault+0x19c>)
    4206:	4a41      	ldr	r2, [pc, #260]	; (430c <mem_manage_fault+0x1a0>)
    4208:	1a9b      	subs	r3, r3, r2
    420a:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Stacking error (context area might be"
    420c:	f04f 0100 	mov.w	r1, #0
    4210:	2201      	movs	r2, #1
    4212:	f362 0102 	bfi	r1, r2, #0, #3
    4216:	f36f 01c5 	bfc	r1, #3, #3
    421a:	f363 118f 	bfi	r1, r3, #6, #10
    421e:	483e      	ldr	r0, [pc, #248]	; (4318 <mem_manage_fault+0x1ac>)
    4220:	f7fd facc 	bl	17bc <log_0>
    4224:	e7bb      	b.n	419e <mem_manage_fault+0x32>
    4226:	4b38      	ldr	r3, [pc, #224]	; (4308 <mem_manage_fault+0x19c>)
    4228:	4a38      	ldr	r2, [pc, #224]	; (430c <mem_manage_fault+0x1a0>)
    422a:	1a9b      	subs	r3, r3, r2
    422c:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Unstacking error");
    422e:	f04f 0100 	mov.w	r1, #0
    4232:	2201      	movs	r2, #1
    4234:	f362 0102 	bfi	r1, r2, #0, #3
    4238:	f36f 01c5 	bfc	r1, #3, #3
    423c:	f363 118f 	bfi	r1, r3, #6, #10
    4240:	4836      	ldr	r0, [pc, #216]	; (431c <mem_manage_fault+0x1b0>)
    4242:	f7fd fabb 	bl	17bc <log_0>
    4246:	e7af      	b.n	41a8 <mem_manage_fault+0x3c>
    4248:	4b2f      	ldr	r3, [pc, #188]	; (4308 <mem_manage_fault+0x19c>)
    424a:	4a30      	ldr	r2, [pc, #192]	; (430c <mem_manage_fault+0x1a0>)
    424c:	1a9b      	subs	r3, r3, r2
    424e:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Data Access Violation");
    4250:	f04f 0100 	mov.w	r1, #0
    4254:	2201      	movs	r2, #1
    4256:	f362 0102 	bfi	r1, r2, #0, #3
    425a:	f36f 01c5 	bfc	r1, #3, #3
    425e:	f363 118f 	bfi	r1, r3, #6, #10
    4262:	482f      	ldr	r0, [pc, #188]	; (4320 <mem_manage_fault+0x1b4>)
    4264:	f7fd faaa 	bl	17bc <log_0>
		uint32_t temp = SCB->MMFAR;
    4268:	4b2a      	ldr	r3, [pc, #168]	; (4314 <mem_manage_fault+0x1a8>)
    426a:	6b5f      	ldr	r7, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    426c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    426e:	f013 0f80 	tst.w	r3, #128	; 0x80
    4272:	d102      	bne.n	427a <mem_manage_fault+0x10e>
	uint32_t mmfar = -EINVAL;
    4274:	f06f 0715 	mvn.w	r7, #21
    4278:	e79d      	b.n	41b6 <mem_manage_fault+0x4a>
    427a:	4b23      	ldr	r3, [pc, #140]	; (4308 <mem_manage_fault+0x19c>)
    427c:	4a23      	ldr	r2, [pc, #140]	; (430c <mem_manage_fault+0x1a0>)
    427e:	1a9b      	subs	r3, r3, r2
    4280:	08db      	lsrs	r3, r3, #3
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    4282:	f04f 0200 	mov.w	r2, #0
    4286:	2101      	movs	r1, #1
    4288:	f361 0202 	bfi	r2, r1, #0, #3
    428c:	f36f 02c5 	bfc	r2, #3, #3
    4290:	f363 128f 	bfi	r2, r3, #6, #10
    4294:	4639      	mov	r1, r7
    4296:	4823      	ldr	r0, [pc, #140]	; (4324 <mem_manage_fault+0x1b8>)
    4298:	f7fd fa1e 	bl	16d8 <log_1>
			if (from_hard_fault != 0) {
    429c:	2c00      	cmp	r4, #0
    429e:	d08a      	beq.n	41b6 <mem_manage_fault+0x4a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    42a0:	4a1c      	ldr	r2, [pc, #112]	; (4314 <mem_manage_fault+0x1a8>)
    42a2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    42a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    42a8:	6293      	str	r3, [r2, #40]	; 0x28
    42aa:	e784      	b.n	41b6 <mem_manage_fault+0x4a>
    42ac:	4b16      	ldr	r3, [pc, #88]	; (4308 <mem_manage_fault+0x19c>)
    42ae:	4a17      	ldr	r2, [pc, #92]	; (430c <mem_manage_fault+0x1a0>)
    42b0:	1a9b      	subs	r3, r3, r2
    42b2:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO("  Instruction Access Violation");
    42b4:	f04f 0100 	mov.w	r1, #0
    42b8:	2201      	movs	r2, #1
    42ba:	f362 0102 	bfi	r1, r2, #0, #3
    42be:	f36f 01c5 	bfc	r1, #3, #3
    42c2:	f363 118f 	bfi	r1, r3, #6, #10
    42c6:	4818      	ldr	r0, [pc, #96]	; (4328 <mem_manage_fault+0x1bc>)
    42c8:	f7fd fa78 	bl	17bc <log_0>
    42cc:	e778      	b.n	41c0 <mem_manage_fault+0x54>
    42ce:	4b0e      	ldr	r3, [pc, #56]	; (4308 <mem_manage_fault+0x19c>)
    42d0:	4a0e      	ldr	r2, [pc, #56]	; (430c <mem_manage_fault+0x1a0>)
    42d2:	1a9b      	subs	r3, r3, r2
    42d4:	08db      	lsrs	r3, r3, #3
		PR_FAULT_INFO(
    42d6:	f04f 0100 	mov.w	r1, #0
    42da:	2201      	movs	r2, #1
    42dc:	f362 0102 	bfi	r1, r2, #0, #3
    42e0:	f36f 01c5 	bfc	r1, #3, #3
    42e4:	f363 118f 	bfi	r1, r3, #6, #10
    42e8:	4810      	ldr	r0, [pc, #64]	; (432c <mem_manage_fault+0x1c0>)
    42ea:	f7fd fa67 	bl	17bc <log_0>
    42ee:	e76d      	b.n	41cc <mem_manage_fault+0x60>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    42f0:	4629      	mov	r1, r5
    42f2:	4638      	mov	r0, r7
    42f4:	f7ff fd22 	bl	3d3c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    42f8:	4604      	mov	r4, r0
    42fa:	2800      	cmp	r0, #0
    42fc:	f43f af76 	beq.w	41ec <mem_manage_fault+0x80>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    4300:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    4304:	2402      	movs	r4, #2
    4306:	e771      	b.n	41ec <mem_manage_fault+0x80>
    4308:	0000e84c 	.word	0x0000e84c
    430c:	0000e82c 	.word	0x0000e82c
    4310:	0000f2a0 	.word	0x0000f2a0
    4314:	e000ed00 	.word	0xe000ed00
    4318:	0000f2b8 	.word	0x0000f2b8
    431c:	0000f1f4 	.word	0x0000f1f4
    4320:	0000f2ec 	.word	0x0000f2ec
    4324:	0000f304 	.word	0x0000f304
    4328:	0000f31c 	.word	0x0000f31c
    432c:	0000f270 	.word	0x0000f270

00004330 <hard_fault>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t hard_fault(z_arch_esf_t *esf, bool *recoverable)
{
    4330:	b570      	push	{r4, r5, r6, lr}
    4332:	4605      	mov	r5, r0
    4334:	460c      	mov	r4, r1
    4336:	4b47      	ldr	r3, [pc, #284]	; (4454 <hard_fault+0x124>)
    4338:	4a47      	ldr	r2, [pc, #284]	; (4458 <hard_fault+0x128>)
    433a:	1a9b      	subs	r3, r3, r2
    433c:	08db      	lsrs	r3, r3, #3
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** HARD FAULT *****");
    433e:	f04f 0100 	mov.w	r1, #0
    4342:	2201      	movs	r2, #1
    4344:	f362 0102 	bfi	r1, r2, #0, #3
    4348:	f36f 01c5 	bfc	r1, #3, #3
    434c:	f363 118f 	bfi	r1, r3, #6, #10
    4350:	4842      	ldr	r0, [pc, #264]	; (445c <hard_fault+0x12c>)
    4352:	f7fd fa33 	bl	17bc <log_0>
		reason = esf->basic.r0;
	}

	*recoverable = memory_fault_recoverable(esf, true);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	*recoverable = false;
    4356:	2300      	movs	r3, #0
    4358:	7023      	strb	r3, [r4, #0]

	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    435a:	4b41      	ldr	r3, [pc, #260]	; (4460 <hard_fault+0x130>)
    435c:	6ade      	ldr	r6, [r3, #44]	; 0x2c
    435e:	f016 0602 	ands.w	r6, r6, #2
    4362:	d109      	bne.n	4378 <hard_fault+0x48>
		PR_EXC("  Bus fault on vector table read");
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    4364:	4b3e      	ldr	r3, [pc, #248]	; (4460 <hard_fault+0x130>)
    4366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    4368:	2b00      	cmp	r3, #0
    436a:	db17      	blt.n	439c <hard_fault+0x6c>
		PR_EXC("  Debug event");
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    436c:	4b3c      	ldr	r3, [pc, #240]	; (4460 <hard_fault+0x130>)
    436e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
    4370:	f010 4080 	ands.w	r0, r0, #1073741824	; 0x40000000
    4374:	d124      	bne.n	43c0 <hard_fault+0x90>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	return reason;
}
    4376:	bd70      	pop	{r4, r5, r6, pc}
    4378:	4b36      	ldr	r3, [pc, #216]	; (4454 <hard_fault+0x124>)
    437a:	4a37      	ldr	r2, [pc, #220]	; (4458 <hard_fault+0x128>)
    437c:	1a9b      	subs	r3, r3, r2
    437e:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Bus fault on vector table read");
    4380:	f04f 0100 	mov.w	r1, #0
    4384:	2201      	movs	r2, #1
    4386:	f362 0102 	bfi	r1, r2, #0, #3
    438a:	f36f 01c5 	bfc	r1, #3, #3
    438e:	f363 118f 	bfi	r1, r3, #6, #10
    4392:	4834      	ldr	r0, [pc, #208]	; (4464 <hard_fault+0x134>)
    4394:	f7fd fa12 	bl	17bc <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4398:	2000      	movs	r0, #0
    439a:	e7ec      	b.n	4376 <hard_fault+0x46>
    439c:	4b2d      	ldr	r3, [pc, #180]	; (4454 <hard_fault+0x124>)
    439e:	4a2e      	ldr	r2, [pc, #184]	; (4458 <hard_fault+0x128>)
    43a0:	1a9b      	subs	r3, r3, r2
    43a2:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Debug event");
    43a4:	f04f 0100 	mov.w	r1, #0
    43a8:	2201      	movs	r2, #1
    43aa:	f362 0102 	bfi	r1, r2, #0, #3
    43ae:	f36f 01c5 	bfc	r1, #3, #3
    43b2:	f363 118f 	bfi	r1, r3, #6, #10
    43b6:	482c      	ldr	r0, [pc, #176]	; (4468 <hard_fault+0x138>)
    43b8:	f7fd fa00 	bl	17bc <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    43bc:	4630      	mov	r0, r6
    43be:	e7da      	b.n	4376 <hard_fault+0x46>
    43c0:	4b24      	ldr	r3, [pc, #144]	; (4454 <hard_fault+0x124>)
    43c2:	4a25      	ldr	r2, [pc, #148]	; (4458 <hard_fault+0x128>)
    43c4:	1a9b      	subs	r3, r3, r2
    43c6:	08db      	lsrs	r3, r3, #3
		PR_EXC("  Fault escalation (see below)");
    43c8:	f04f 0100 	mov.w	r1, #0
    43cc:	2201      	movs	r2, #1
    43ce:	f362 0102 	bfi	r1, r2, #0, #3
    43d2:	f36f 01c5 	bfc	r1, #3, #3
    43d6:	f363 118f 	bfi	r1, r3, #6, #10
    43da:	4824      	ldr	r0, [pc, #144]	; (446c <hard_fault+0x13c>)
    43dc:	f7fd f9ee 	bl	17bc <log_0>
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    43e0:	69ab      	ldr	r3, [r5, #24]
	uint16_t fault_insn = *(ret_addr - 1);
    43e2:	f833 2c02 	ldrh.w	r2, [r3, #-2]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    43e6:	f64d 7302 	movw	r3, #57090	; 0xdf02
    43ea:	429a      	cmp	r2, r3
    43ec:	d00e      	beq.n	440c <hard_fault+0xdc>
		} else if (SCB_MMFSR != 0) {
    43ee:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    43f2:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    43f6:	781b      	ldrb	r3, [r3, #0]
    43f8:	b9db      	cbnz	r3, 4432 <hard_fault+0x102>
		} else if (SCB_BFSR != 0) {
    43fa:	4b1d      	ldr	r3, [pc, #116]	; (4470 <hard_fault+0x140>)
    43fc:	781b      	ldrb	r3, [r3, #0]
    43fe:	b9f3      	cbnz	r3, 443e <hard_fault+0x10e>
		} else if (SCB_UFSR != 0) {
    4400:	4b1c      	ldr	r3, [pc, #112]	; (4474 <hard_fault+0x144>)
    4402:	881b      	ldrh	r3, [r3, #0]
    4404:	b29b      	uxth	r3, r3
    4406:	bb03      	cbnz	r3, 444a <hard_fault+0x11a>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4408:	4630      	mov	r0, r6
	return reason;
    440a:	e7b4      	b.n	4376 <hard_fault+0x46>
    440c:	4b11      	ldr	r3, [pc, #68]	; (4454 <hard_fault+0x124>)
    440e:	4a12      	ldr	r2, [pc, #72]	; (4458 <hard_fault+0x128>)
    4410:	1a9b      	subs	r3, r3, r2
    4412:	08db      	lsrs	r3, r3, #3
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    4414:	f04f 0200 	mov.w	r2, #0
    4418:	2101      	movs	r1, #1
    441a:	f361 0202 	bfi	r2, r1, #0, #3
    441e:	f36f 02c5 	bfc	r2, #3, #3
    4422:	f363 128f 	bfi	r2, r3, #6, #10
    4426:	6829      	ldr	r1, [r5, #0]
    4428:	4813      	ldr	r0, [pc, #76]	; (4478 <hard_fault+0x148>)
    442a:	f7fd f955 	bl	16d8 <log_1>
			reason = esf->basic.r0;
    442e:	6828      	ldr	r0, [r5, #0]
    4430:	e7a1      	b.n	4376 <hard_fault+0x46>
			reason = mem_manage_fault(esf, 1, recoverable);
    4432:	4622      	mov	r2, r4
    4434:	2101      	movs	r1, #1
    4436:	4628      	mov	r0, r5
    4438:	f7ff fe98 	bl	416c <mem_manage_fault>
    443c:	e79b      	b.n	4376 <hard_fault+0x46>
			reason = bus_fault(esf, 1, recoverable);
    443e:	4622      	mov	r2, r4
    4440:	2101      	movs	r1, #1
    4442:	4628      	mov	r0, r5
    4444:	f7ff fdba 	bl	3fbc <bus_fault>
    4448:	e795      	b.n	4376 <hard_fault+0x46>
			reason = usage_fault(esf);
    444a:	4628      	mov	r0, r5
    444c:	f7ff fcea 	bl	3e24 <usage_fault>
    4450:	e791      	b.n	4376 <hard_fault+0x46>
    4452:	bf00      	nop
    4454:	0000e84c 	.word	0x0000e84c
    4458:	0000e82c 	.word	0x0000e82c
    445c:	0000f33c 	.word	0x0000f33c
    4460:	e000ed00 	.word	0xe000ed00
    4464:	0000f354 	.word	0x0000f354
    4468:	0000f378 	.word	0x0000f378
    446c:	0000f388 	.word	0x0000f388
    4470:	e000ed29 	.word	0xe000ed29
    4474:	e000ed2a 	.word	0xe000ed2a
    4478:	0000f3a8 	.word	0x0000f3a8

0000447c <reserved_exception>:
 * See z_arm_fault_dump() for example.
 *
 * @return N/A
 */
static void reserved_exception(const z_arch_esf_t *esf, int fault)
{
    447c:	b508      	push	{r3, lr}
    447e:	460a      	mov	r2, r1
    4480:	480b      	ldr	r0, [pc, #44]	; (44b0 <reserved_exception+0x34>)
    4482:	4b0c      	ldr	r3, [pc, #48]	; (44b4 <reserved_exception+0x38>)
    4484:	1ac0      	subs	r0, r0, r3
    4486:	08c0      	lsrs	r0, r0, #3
	ARG_UNUSED(esf);

	PR_FAULT_INFO("***** %s %d) *****",
    4488:	f04f 0300 	mov.w	r3, #0
    448c:	2101      	movs	r1, #1
    448e:	f361 0302 	bfi	r3, r1, #0, #3
    4492:	f36f 03c5 	bfc	r3, #3, #3
    4496:	f360 138f 	bfi	r3, r0, #6, #10
    449a:	2a0f      	cmp	r2, #15
    449c:	dc05      	bgt.n	44aa <reserved_exception+0x2e>
    449e:	4906      	ldr	r1, [pc, #24]	; (44b8 <reserved_exception+0x3c>)
    44a0:	3a10      	subs	r2, #16
    44a2:	4806      	ldr	r0, [pc, #24]	; (44bc <reserved_exception+0x40>)
    44a4:	f7fd f94e 	bl	1744 <log_2>
	       fault < 16 ? "Reserved Exception (" : "Spurious interrupt (IRQ ",
	       fault - 16);
}
    44a8:	bd08      	pop	{r3, pc}
	PR_FAULT_INFO("***** %s %d) *****",
    44aa:	4905      	ldr	r1, [pc, #20]	; (44c0 <reserved_exception+0x44>)
    44ac:	e7f8      	b.n	44a0 <reserved_exception+0x24>
    44ae:	bf00      	nop
    44b0:	0000e84c 	.word	0x0000e84c
    44b4:	0000e82c 	.word	0x0000e82c
    44b8:	0000f3c4 	.word	0x0000f3c4
    44bc:	0000f3f8 	.word	0x0000f3f8
    44c0:	0000f3dc 	.word	0x0000f3dc

000044c4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    44c4:	b570      	push	{r4, r5, r6, lr}
    44c6:	b08a      	sub	sp, #40	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    44c8:	4b2b      	ldr	r3, [pc, #172]	; (4578 <z_arm_fault+0xb4>)
    44ca:	685d      	ldr	r5, [r3, #4]
    44cc:	f3c5 0508 	ubfx	r5, r5, #0, #9
    44d0:	2300      	movs	r3, #0
    44d2:	f383 8811 	msr	BASEPRI, r3
    44d6:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    44da:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    44de:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    44e2:	d12a      	bne.n	453a <z_arm_fault+0x76>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    44e4:	f002 030c 	and.w	r3, r2, #12
    44e8:	2b08      	cmp	r3, #8
    44ea:	d010      	beq.n	450e <z_arm_fault+0x4a>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    44ec:	f012 0f08 	tst.w	r2, #8
    44f0:	d020      	beq.n	4534 <z_arm_fault+0x70>
			ptr_esf =  (z_arch_esf_t *)psp;
    44f2:	460c      	mov	r4, r1
	*nested_exc = false;
    44f4:	2600      	movs	r6, #0

#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
    44f6:	f10d 0227 	add.w	r2, sp, #39	; 0x27
    44fa:	4629      	mov	r1, r5
    44fc:	4620      	mov	r0, r4
    44fe:	f008 fd30 	bl	cf62 <fault_handle>
    4502:	4605      	mov	r5, r0
	if (recoverable) {
    4504:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    4508:	b1d3      	cbz	r3, 4540 <z_arm_fault+0x7c>
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
	}

	z_arm_fatal_error(reason, &esf_copy);
}
    450a:	b00a      	add	sp, #40	; 0x28
    450c:	bd70      	pop	{r4, r5, r6, pc}
    450e:	4b1b      	ldr	r3, [pc, #108]	; (457c <z_arm_fault+0xb8>)
    4510:	4a1b      	ldr	r2, [pc, #108]	; (4580 <z_arm_fault+0xbc>)
    4512:	1a9b      	subs	r3, r3, r2
    4514:	08db      	lsrs	r3, r3, #3
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    4516:	f04f 0100 	mov.w	r1, #0
    451a:	2201      	movs	r2, #1
    451c:	f362 0102 	bfi	r1, r2, #0, #3
    4520:	f36f 01c5 	bfc	r1, #3, #3
    4524:	f363 118f 	bfi	r1, r3, #6, #10
    4528:	4816      	ldr	r0, [pc, #88]	; (4584 <z_arm_fault+0xc0>)
    452a:	f7fd f947 	bl	17bc <log_0>
	*nested_exc = false;
    452e:	2600      	movs	r6, #0
		return NULL;
    4530:	4634      	mov	r4, r6
    4532:	e7e0      	b.n	44f6 <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    4534:	4604      	mov	r4, r0
			*nested_exc = true;
    4536:	2601      	movs	r6, #1
    4538:	e7dd      	b.n	44f6 <z_arm_fault+0x32>
	*nested_exc = false;
    453a:	2600      	movs	r6, #0
		return NULL;
    453c:	4634      	mov	r4, r6
    453e:	e7da      	b.n	44f6 <z_arm_fault+0x32>
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    4540:	2220      	movs	r2, #32
    4542:	4621      	mov	r1, r4
    4544:	a801      	add	r0, sp, #4
    4546:	f008 fd9e 	bl	d086 <memcpy>
	if (nested_exc) {
    454a:	b14e      	cbz	r6, 4560 <z_arm_fault+0x9c>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    454c:	9b08      	ldr	r3, [sp, #32]
    454e:	f3c3 0208 	ubfx	r2, r3, #0, #9
    4552:	b95a      	cbnz	r2, 456c <z_arm_fault+0xa8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    4554:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    4558:	ea6f 2343 	mvn.w	r3, r3, lsl #9
    455c:	9308      	str	r3, [sp, #32]
    455e:	e005      	b.n	456c <z_arm_fault+0xa8>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4560:	9b08      	ldr	r3, [sp, #32]
    4562:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    4566:	f023 0301 	bic.w	r3, r3, #1
    456a:	9308      	str	r3, [sp, #32]
	z_arm_fatal_error(reason, &esf_copy);
    456c:	a901      	add	r1, sp, #4
    456e:	4628      	mov	r0, r5
    4570:	f008 fcd7 	bl	cf22 <z_arm_fatal_error>
    4574:	e7c9      	b.n	450a <z_arm_fault+0x46>
    4576:	bf00      	nop
    4578:	e000ed00 	.word	0xe000ed00
    457c:	0000e84c 	.word	0x0000e84c
    4580:	0000e82c 	.word	0x0000e82c
    4584:	0000f40c 	.word	0x0000f40c

00004588 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    4588:	4a02      	ldr	r2, [pc, #8]	; (4594 <z_arm_fault_init+0xc>)
    458a:	6953      	ldr	r3, [r2, #20]
    458c:	f043 0310 	orr.w	r3, r3, #16
    4590:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    4592:	4770      	bx	lr
    4594:	e000ed00 	.word	0xe000ed00

00004598 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    4598:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    459c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    45a0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    45a2:	4672      	mov	r2, lr
	bl z_arm_fault
    45a4:	f7ff ff8e 	bl	44c4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    45a8:	bd01      	pop	{r0, pc}
    45aa:	bf00      	nop

000045ac <z_arm_interrupt_init>:
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    45ac:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    45ae:	e006      	b.n	45be <z_arm_interrupt_init+0x12>
    45b0:	f002 010f 	and.w	r1, r2, #15
    45b4:	4b09      	ldr	r3, [pc, #36]	; (45dc <z_arm_interrupt_init+0x30>)
    45b6:	440b      	add	r3, r1
    45b8:	2120      	movs	r1, #32
    45ba:	7619      	strb	r1, [r3, #24]
    45bc:	3201      	adds	r2, #1
    45be:	2a2f      	cmp	r2, #47	; 0x2f
    45c0:	dc0a      	bgt.n	45d8 <z_arm_interrupt_init+0x2c>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
    45c2:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
    45c4:	2b00      	cmp	r3, #0
    45c6:	dbf3      	blt.n	45b0 <z_arm_interrupt_init+0x4>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    45c8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    45cc:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    45d0:	2120      	movs	r1, #32
    45d2:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
    45d6:	e7f1      	b.n	45bc <z_arm_interrupt_init+0x10>
	}
}
    45d8:	4770      	bx	lr
    45da:	bf00      	nop
    45dc:	e000ecfc 	.word	0xe000ecfc

000045e0 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    45e0:	2000      	movs	r0, #0
    msr CONTROL, r0
    45e2:	f380 8814 	msr	CONTROL, r0
    isb
    45e6:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    45ea:	f009 ffc9 	bl	e580 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    45ee:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    45f0:	490d      	ldr	r1, [pc, #52]	; (4628 <__start+0x48>)
    str r0, [r1]
    45f2:	6008      	str	r0, [r1, #0]
    dsb
    45f4:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    45f8:	480c      	ldr	r0, [pc, #48]	; (462c <__start+0x4c>)
    msr msp, r0
    45fa:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    45fe:	f000 f829 	bl	4654 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4602:	2020      	movs	r0, #32
    msr BASEPRI, r0
    4604:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    4608:	4809      	ldr	r0, [pc, #36]	; (4630 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    460a:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    460e:	1840      	adds	r0, r0, r1
    msr PSP, r0
    4610:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    4614:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    4618:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    461a:	4308      	orrs	r0, r1
    msr CONTROL, r0
    461c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    4620:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    4624:	f7ff faf6 	bl	3c14 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    4628:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    462c:	20003680 	.word	0x20003680
    ldr r0, =z_interrupt_stacks
    4630:	20003800 	.word	0x20003800

00004634 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    4634:	4b06      	ldr	r3, [pc, #24]	; (4650 <z_arm_clear_arm_mpu_config+0x1c>)
    4636:	6818      	ldr	r0, [r3, #0]
	int num_regions =
    4638:	f3c0 2007 	ubfx	r0, r0, #8, #8

	for (i = 0; i < num_regions; i++) {
    463c:	2300      	movs	r3, #0
    463e:	4283      	cmp	r3, r0
    4640:	da05      	bge.n	464e <z_arm_clear_arm_mpu_config+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    4642:	4a03      	ldr	r2, [pc, #12]	; (4650 <z_arm_clear_arm_mpu_config+0x1c>)
    4644:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    4646:	2100      	movs	r1, #0
    4648:	6111      	str	r1, [r2, #16]
    464a:	3301      	adds	r3, #1
    464c:	e7f7      	b.n	463e <z_arm_clear_arm_mpu_config+0xa>
		ARM_MPU_ClrRegion(i);
	}
}
    464e:	4770      	bx	lr
    4650:	e000ed90 	.word	0xe000ed90

00004654 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    4654:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    4656:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    4658:	2400      	movs	r4, #0
    465a:	f384 8813 	msr	FAULTMASK, r4

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    465e:	f7ff ffe9 	bl	4634 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    4662:	4623      	mov	r3, r4
    4664:	e008      	b.n	4678 <z_arm_init_arch_hw_at_boot+0x24>
		NVIC->ICER[i] = 0xFFFFFFFF;
    4666:	f103 0120 	add.w	r1, r3, #32
    466a:	4a0e      	ldr	r2, [pc, #56]	; (46a4 <z_arm_init_arch_hw_at_boot+0x50>)
    466c:	f04f 30ff 	mov.w	r0, #4294967295
    4670:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
    4674:	3301      	adds	r3, #1
    4676:	b2db      	uxtb	r3, r3
    4678:	2b07      	cmp	r3, #7
    467a:	d9f4      	bls.n	4666 <z_arm_init_arch_hw_at_boot+0x12>
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    467c:	2300      	movs	r3, #0
    467e:	e008      	b.n	4692 <z_arm_init_arch_hw_at_boot+0x3e>
		NVIC->ICPR[i] = 0xFFFFFFFF;
    4680:	f103 0160 	add.w	r1, r3, #96	; 0x60
    4684:	4a07      	ldr	r2, [pc, #28]	; (46a4 <z_arm_init_arch_hw_at_boot+0x50>)
    4686:	f04f 30ff 	mov.w	r0, #4294967295
    468a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
    468e:	3301      	adds	r3, #1
    4690:	b2db      	uxtb	r3, r3
    4692:	2b07      	cmp	r3, #7
    4694:	d9f4      	bls.n	4680 <z_arm_init_arch_hw_at_boot+0x2c>
  __ASM volatile ("cpsie i" : : : "memory");
    4696:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    4698:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    469c:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    46a0:	bd10      	pop	{r4, pc}
    46a2:	bf00      	nop
    46a4:	e000e100 	.word	0xe000e100

000046a8 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    46a8:	b508      	push	{r3, lr}
	if (_current == thread) {
    46aa:	4b08      	ldr	r3, [pc, #32]	; (46cc <z_impl_k_thread_abort+0x24>)
    46ac:	689b      	ldr	r3, [r3, #8]
    46ae:	4283      	cmp	r3, r0
    46b0:	d002      	beq.n	46b8 <z_impl_k_thread_abort+0x10>
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	z_thread_abort(thread);
    46b2:	f006 fac5 	bl	ac40 <z_thread_abort>
}
    46b6:	bd08      	pop	{r3, pc}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    46b8:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    46bc:	2b00      	cmp	r3, #0
    46be:	d0f8      	beq.n	46b2 <z_impl_k_thread_abort+0xa>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    46c0:	4a03      	ldr	r2, [pc, #12]	; (46d0 <z_impl_k_thread_abort+0x28>)
    46c2:	6853      	ldr	r3, [r2, #4]
    46c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    46c8:	6053      	str	r3, [r2, #4]
    46ca:	e7f2      	b.n	46b2 <z_impl_k_thread_abort+0xa>
    46cc:	200024ec 	.word	0x200024ec
    46d0:	e000ed00 	.word	0xe000ed00

000046d4 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    46d4:	b508      	push	{r3, lr}
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    46d6:	4b03      	ldr	r3, [pc, #12]	; (46e4 <z_arm_configure_static_mpu_regions+0x10>)
    46d8:	4a03      	ldr	r2, [pc, #12]	; (46e8 <z_arm_configure_static_mpu_regions+0x14>)
    46da:	2101      	movs	r1, #1
    46dc:	4803      	ldr	r0, [pc, #12]	; (46ec <z_arm_configure_static_mpu_regions+0x18>)
    46de:	f008 fc95 	bl	d00c <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    46e2:	bd08      	pop	{r3, pc}
    46e4:	20040000 	.word	0x20040000
    46e8:	20000000 	.word	0x20000000
    46ec:	0000f43c 	.word	0x0000f43c

000046f0 <z_arm_configure_dynamic_mpu_regions>:
 *
 * This function is not inherently thread-safe, but the memory domain
 * spinlock needs to be held anyway.
 */
void z_arm_configure_dynamic_mpu_regions(struct k_thread *thread)
{
    46f0:	b508      	push	{r3, lr}
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    46f2:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
    46f6:	3b20      	subs	r3, #32
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    46f8:	4804      	ldr	r0, [pc, #16]	; (470c <z_arm_configure_dynamic_mpu_regions+0x1c>)
    46fa:	6003      	str	r3, [r0, #0]
	dynamic_regions[region_num].size = guard_size;
    46fc:	2320      	movs	r3, #32
    46fe:	6043      	str	r3, [r0, #4]
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    4700:	4b03      	ldr	r3, [pc, #12]	; (4710 <z_arm_configure_dynamic_mpu_regions+0x20>)
    4702:	6083      	str	r3, [r0, #8]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    4704:	2101      	movs	r1, #1
    4706:	f008 fc85 	bl	d014 <arm_core_mpu_configure_dynamic_mpu_regions>
						   region_num);
}
    470a:	bd08      	pop	{r3, pc}
    470c:	2000140c 	.word	0x2000140c
    4710:	150b0000 	.word	0x150b0000

00004714 <region_init>:
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    4714:	4a06      	ldr	r2, [pc, #24]	; (4730 <region_init+0x1c>)
    4716:	6090      	str	r0, [r2, #8]

	set_region_base_address(region_conf->base & MPU_RBAR_ADDR_Msk);
	set_region_attributes(region_conf->attr.rasr);
	set_region_size(region_conf->size | MPU_RASR_ENABLE_Msk);
#else
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4718:	680b      	ldr	r3, [r1, #0]
    471a:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    471e:	4303      	orrs	r3, r0
    4720:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4724:	60d3      	str	r3, [r2, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4726:	688b      	ldr	r3, [r1, #8]
    4728:	f043 0301 	orr.w	r3, r3, #1
    472c:	6113      	str	r3, [r2, #16]
	LOG_DBG("[%d] 0x%08x 0x%08x",
		index, region_conf->base, region_conf->attr.rasr);
#endif
}
    472e:	4770      	bx	lr
    4730:	e000ed90 	.word	0xe000ed90

00004734 <region_allocate_and_init>:
#error "Unsupported ARM CPU"
#endif

static int region_allocate_and_init(const uint8_t index,
	const struct arm_mpu_region *region_conf)
{
    4734:	b510      	push	{r4, lr}
    4736:	4604      	mov	r4, r0
	/* Attempt to allocate new region index. */
	if (index > (get_num_regions() - 1U)) {
    4738:	2807      	cmp	r0, #7
    473a:	d803      	bhi.n	4744 <region_allocate_and_init+0x10>
	}

	LOG_DBG("Program MPU region at index 0x%x", index);

	/* Program region */
	region_init(index, region_conf);
    473c:	f7ff ffea 	bl	4714 <region_init>

	return index;
    4740:	4620      	mov	r0, r4
}
    4742:	bd10      	pop	{r4, pc}
    4744:	4b09      	ldr	r3, [pc, #36]	; (476c <region_allocate_and_init+0x38>)
    4746:	4a0a      	ldr	r2, [pc, #40]	; (4770 <region_allocate_and_init+0x3c>)
    4748:	1a9b      	subs	r3, r3, r2
    474a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    474c:	f04f 0200 	mov.w	r2, #0
    4750:	2101      	movs	r1, #1
    4752:	f361 0202 	bfi	r2, r1, #0, #3
    4756:	f36f 02c5 	bfc	r2, #3, #3
    475a:	f363 128f 	bfi	r2, r3, #6, #10
    475e:	4601      	mov	r1, r0
    4760:	4804      	ldr	r0, [pc, #16]	; (4774 <region_allocate_and_init+0x40>)
    4762:	f7fc ffb9 	bl	16d8 <log_1>
		return -EINVAL;
    4766:	f06f 0015 	mvn.w	r0, #21
    476a:	e7ea      	b.n	4742 <region_allocate_and_init+0xe>
    476c:	0000e844 	.word	0x0000e844
    4770:	0000e82c 	.word	0x0000e82c
    4774:	0000f448 	.word	0x0000f448

00004778 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    4778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    477c:	4680      	mov	r8, r0
    477e:	460f      	mov	r7, r1
    4780:	469a      	mov	sl, r3
	int i;
	int reg_index = start_reg_index;
    4782:	4616      	mov	r6, r2

	for (i = 0; i < regions_num; i++) {
    4784:	2400      	movs	r4, #0
    4786:	e009      	b.n	479c <mpu_configure_regions+0x24>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    4788:	4629      	mov	r1, r5
    478a:	b2f0      	uxtb	r0, r6
    478c:	f008 fc1f 	bl	cfce <mpu_configure_region>
    4790:	4606      	mov	r6, r0

		if (reg_index == -EINVAL) {
    4792:	f110 0f16 	cmn.w	r0, #22
    4796:	d025      	beq.n	47e4 <mpu_configure_regions+0x6c>
			return reg_index;
		}

		/* Increment number of programmed MPU indices. */
		reg_index++;
    4798:	3601      	adds	r6, #1
	for (i = 0; i < regions_num; i++) {
    479a:	3401      	adds	r4, #1
    479c:	42bc      	cmp	r4, r7
    479e:	da21      	bge.n	47e4 <mpu_configure_regions+0x6c>
		if (regions[i].size == 0U) {
    47a0:	eb04 0544 	add.w	r5, r4, r4, lsl #1
    47a4:	eb08 0585 	add.w	r5, r8, r5, lsl #2
    47a8:	686a      	ldr	r2, [r5, #4]
    47aa:	2a00      	cmp	r2, #0
    47ac:	d0f5      	beq.n	479a <mpu_configure_regions+0x22>
		if (do_sanity_check &&
    47ae:	f1ba 0f00 	cmp.w	sl, #0
    47b2:	d0e9      	beq.n	4788 <mpu_configure_regions+0x10>
				(!mpu_partition_is_valid(&regions[i]))) {
    47b4:	4628      	mov	r0, r5
    47b6:	f008 fbf9 	bl	cfac <mpu_partition_is_valid>
		if (do_sanity_check &&
    47ba:	2800      	cmp	r0, #0
    47bc:	d1e4      	bne.n	4788 <mpu_configure_regions+0x10>
    47be:	4b0b      	ldr	r3, [pc, #44]	; (47ec <mpu_configure_regions+0x74>)
    47c0:	4a0b      	ldr	r2, [pc, #44]	; (47f0 <mpu_configure_regions+0x78>)
    47c2:	1a9b      	subs	r3, r3, r2
    47c4:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Partition %u: sanity check failed.", i);
    47c6:	f04f 0200 	mov.w	r2, #0
    47ca:	2101      	movs	r1, #1
    47cc:	f361 0202 	bfi	r2, r1, #0, #3
    47d0:	f36f 02c5 	bfc	r2, #3, #3
    47d4:	f363 128f 	bfi	r2, r3, #6, #10
    47d8:	4621      	mov	r1, r4
    47da:	4806      	ldr	r0, [pc, #24]	; (47f4 <mpu_configure_regions+0x7c>)
    47dc:	f7fc ff7c 	bl	16d8 <log_1>
			return -EINVAL;
    47e0:	f06f 0615 	mvn.w	r6, #21
	}

	return reg_index;
}
    47e4:	4630      	mov	r0, r6
    47e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    47ea:	bf00      	nop
    47ec:	0000e844 	.word	0x0000e844
    47f0:	0000e82c 	.word	0x0000e82c
    47f4:	0000f470 	.word	0x0000f470

000047f8 <mpu_configure_static_mpu_regions>:
 */
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
    47f8:	b510      	push	{r4, lr}
	int mpu_reg_index = static_regions_num;
    47fa:	4c03      	ldr	r4, [pc, #12]	; (4808 <mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    47fc:	2301      	movs	r3, #1
    47fe:	7822      	ldrb	r2, [r4, #0]
    4800:	f7ff ffba 	bl	4778 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    4804:	7020      	strb	r0, [r4, #0]

	return mpu_reg_index;
}
    4806:	bd10      	pop	{r4, pc}
    4808:	2000254e 	.word	0x2000254e

0000480c <mpu_configure_dynamic_mpu_regions>:
 * If the dynamic MPU regions configuration has not been successfully
 * performed, the error signal is propagated to the caller of the function.
 */
static int mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    480c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    480e:	2300      	movs	r3, #0
    4810:	4a08      	ldr	r2, [pc, #32]	; (4834 <mpu_configure_dynamic_mpu_regions+0x28>)
    4812:	7812      	ldrb	r2, [r2, #0]
    4814:	f7ff ffb0 	bl	4778 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    4818:	f110 0f16 	cmn.w	r0, #22
    481c:	d008      	beq.n	4830 <mpu_configure_dynamic_mpu_regions+0x24>

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    481e:	4603      	mov	r3, r0
    4820:	2b07      	cmp	r3, #7
    4822:	dc05      	bgt.n	4830 <mpu_configure_dynamic_mpu_regions+0x24>
  MPU->RNR = rnr;
    4824:	4a04      	ldr	r2, [pc, #16]	; (4838 <mpu_configure_dynamic_mpu_regions+0x2c>)
    4826:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    4828:	2100      	movs	r1, #0
    482a:	6111      	str	r1, [r2, #16]
    482c:	3301      	adds	r3, #1
    482e:	e7f7      	b.n	4820 <mpu_configure_dynamic_mpu_regions+0x14>
			ARM_MPU_ClrRegion(i);
		}
	}

	return mpu_reg_index;
}
    4830:	bd08      	pop	{r3, pc}
    4832:	bf00      	nop
    4834:	2000254e 	.word	0x2000254e
    4838:	e000ed90 	.word	0xe000ed90

0000483c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    483c:	4b03      	ldr	r3, [pc, #12]	; (484c <arm_core_mpu_enable+0x10>)
    483e:	2205      	movs	r2, #5
    4840:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    4842:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4846:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    484a:	4770      	bx	lr
    484c:	e000ed90 	.word	0xe000ed90

00004850 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    4850:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    4854:	4b01      	ldr	r3, [pc, #4]	; (485c <arm_core_mpu_disable+0xc>)
    4856:	2200      	movs	r2, #0
    4858:	605a      	str	r2, [r3, #4]
}
    485a:	4770      	bx	lr
    485c:	e000ed90 	.word	0xe000ed90

00004860 <z_arm_mpu_init>:
 *
 * This function provides the default configuration mechanism for the Memory
 * Protection Unit (MPU).
 */
int z_arm_mpu_init(void)
{
    4860:	b538      	push	{r3, r4, r5, lr}
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    4862:	4b0e      	ldr	r3, [pc, #56]	; (489c <z_arm_mpu_init+0x3c>)
    4864:	681d      	ldr	r5, [r3, #0]
    4866:	2d08      	cmp	r5, #8
    4868:	d815      	bhi.n	4896 <z_arm_mpu_init+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    486a:	f7ff fff1 	bl	4850 <arm_core_mpu_disable>

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    486e:	2400      	movs	r4, #0
    4870:	42a5      	cmp	r5, r4
    4872:	d90a      	bls.n	488a <z_arm_mpu_init+0x2a>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
    4874:	4b09      	ldr	r3, [pc, #36]	; (489c <z_arm_mpu_init+0x3c>)
    4876:	6859      	ldr	r1, [r3, #4]
    4878:	eb04 0244 	add.w	r2, r4, r4, lsl #1
    487c:	0093      	lsls	r3, r2, #2
    487e:	4419      	add	r1, r3
    4880:	4620      	mov	r0, r4
    4882:	f7ff ff47 	bl	4714 <region_init>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4886:	3401      	adds	r4, #1
    4888:	e7f2      	b.n	4870 <z_arm_mpu_init+0x10>
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    488a:	4b05      	ldr	r3, [pc, #20]	; (48a0 <z_arm_mpu_init+0x40>)
    488c:	701d      	strb	r5, [r3, #0]


	arm_core_mpu_enable();
    488e:	f7ff ffd5 	bl	483c <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    4892:	2000      	movs	r0, #0
}
    4894:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
    4896:	f04f 30ff 	mov.w	r0, #4294967295
    489a:	e7fb      	b.n	4894 <z_arm_mpu_init+0x34>
    489c:	0000f4a4 	.word	0x0000f4a4
    48a0:	2000254e 	.word	0x2000254e

000048a4 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    48a4:	4b01      	ldr	r3, [pc, #4]	; (48ac <__stdout_hook_install+0x8>)
    48a6:	6018      	str	r0, [r3, #0]
}
    48a8:	4770      	bx	lr
    48aa:	bf00      	nop
    48ac:	20000104 	.word	0x20000104

000048b0 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    48b0:	f04f 0320 	mov.w	r3, #32
    48b4:	f3ef 8211 	mrs	r2, BASEPRI
    48b8:	f383 8812 	msr	BASEPRI_MAX, r3
    48bc:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    48c0:	2301      	movs	r3, #1
    48c2:	4906      	ldr	r1, [pc, #24]	; (48dc <nordicsemi_nrf52_init+0x2c>)
    48c4:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    48c8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    48cc:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    48d0:	f382 8811 	msr	BASEPRI, r2
    48d4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    48d8:	2000      	movs	r0, #0
    48da:	4770      	bx	lr
    48dc:	4001e000 	.word	0x4001e000

000048e0 <sys_arch_reboot>:
    *p_gpregret = val;
    48e0:	b2c0      	uxtb	r0, r0
    48e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    48e6:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    48ea:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    48ee:	4905      	ldr	r1, [pc, #20]	; (4904 <sys_arch_reboot+0x24>)
    48f0:	68ca      	ldr	r2, [r1, #12]
    48f2:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    48f6:	4b04      	ldr	r3, [pc, #16]	; (4908 <sys_arch_reboot+0x28>)
    48f8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    48fa:	60cb      	str	r3, [r1, #12]
    48fc:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    4900:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4902:	e7fd      	b.n	4900 <sys_arch_reboot+0x20>
    4904:	e000ed00 	.word	0xe000ed00
    4908:	05fa0004 	.word	0x05fa0004

0000490c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    490c:	b130      	cbz	r0, 491c <arch_busy_wait+0x10>

void arch_busy_wait(uint32_t time_us)
{
    490e:	b508      	push	{r3, lr}
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    4910:	0180      	lsls	r0, r0, #6
    4912:	4b03      	ldr	r3, [pc, #12]	; (4920 <arch_busy_wait+0x14>)
    4914:	f043 0301 	orr.w	r3, r3, #1
    4918:	4798      	blx	r3
	nrfx_coredep_delay_us(time_us);
}
    491a:	bd08      	pop	{r3, pc}
    491c:	4770      	bx	lr
    491e:	bf00      	nop
    4920:	0000e930 	.word	0x0000e930

00004924 <endpoint_ctx>:
	return (uint8_t)ep;
}

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);
    4924:	f000 037f 	and.w	r3, r0, #127	; 0x7f

	if (NRF_USBD_EPIN_CHECK(ep)) {
    4928:	b242      	sxtb	r2, r0
    492a:	2a00      	cmp	r2, #0
    492c:	db12      	blt.n	4954 <endpoint_ctx+0x30>
			if (ep_num >= CFG_EPIN_CNT) {
				return false;
			}
		}
	} else {
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    492e:	2b08      	cmp	r3, #8
    4930:	d002      	beq.n	4938 <endpoint_ctx+0x14>
			if (CFG_EP_ISOOUT_CNT == 0) {
				return false;
			}
		} else {
			if (ep_num >= CFG_EPOUT_CNT) {
    4932:	f010 0f78 	tst.w	r0, #120	; 0x78
    4936:	d11d      	bne.n	4974 <endpoint_ctx+0x50>
	if (!ep_is_valid(ep)) {
		return NULL;
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);
    4938:	f000 030f 	and.w	r3, r0, #15

	if (NRF_USBD_EPIN_CHECK(ep)) {
    493c:	2a00      	cmp	r2, #0
    493e:	db10      	blt.n	4962 <endpoint_ctx+0x3e>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    4940:	f010 0f08 	tst.w	r0, #8
    4944:	d11a      	bne.n	497c <endpoint_ctx+0x58>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
					    CFG_EP_ISOIN_CNT +
    4946:	3309      	adds	r3, #9
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    4948:	015b      	lsls	r3, r3, #5
    494a:	3348      	adds	r3, #72	; 0x48
    494c:	480c      	ldr	r0, [pc, #48]	; (4980 <endpoint_ctx+0x5c>)
    494e:	4403      	add	r3, r0
    4950:	1d18      	adds	r0, r3, #4
    4952:	4770      	bx	lr
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    4954:	2b08      	cmp	r3, #8
    4956:	d0ef      	beq.n	4938 <endpoint_ctx+0x14>
			if (ep_num >= CFG_EPIN_CNT) {
    4958:	f010 0f78 	tst.w	r0, #120	; 0x78
    495c:	d0ec      	beq.n	4938 <endpoint_ctx+0x14>
		return NULL;
    495e:	2000      	movs	r0, #0
    4960:	4770      	bx	lr
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    4962:	f010 0f08 	tst.w	r0, #8
    4966:	d107      	bne.n	4978 <endpoint_ctx+0x54>
			return &ctx->ep_ctx[ep_num];
    4968:	015b      	lsls	r3, r3, #5
    496a:	3348      	adds	r3, #72	; 0x48
    496c:	4804      	ldr	r0, [pc, #16]	; (4980 <endpoint_ctx+0x5c>)
    496e:	4403      	add	r3, r0
    4970:	1d18      	adds	r0, r3, #4
    4972:	4770      	bx	lr
		return NULL;
    4974:	2000      	movs	r0, #0
    4976:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    4978:	4802      	ldr	r0, [pc, #8]	; (4984 <endpoint_ctx+0x60>)
    497a:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    497c:	4802      	ldr	r0, [pc, #8]	; (4988 <endpoint_ctx+0x64>)
					    ep_num];
		}
	}

	return NULL;
}
    497e:	4770      	bx	lr
    4980:	20001a18 	.word	0x20001a18
    4984:	20001b64 	.word	0x20001b64
    4988:	20001c84 	.word	0x20001c84

0000498c <eps_ctx_init>:
 * Endpoint buffers are allocated during the first call of this function.
 * This function may also be called again on every USB reset event
 * to reinitialize the state of all endpoints.
 */
static int eps_ctx_init(void)
{
    498c:	b510      	push	{r4, lr}
	struct nrf_usbd_ep_ctx *ep_ctx;
	uint32_t i;

	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    498e:	2400      	movs	r4, #0
    4990:	e005      	b.n	499e <eps_ctx_init+0x12>
		ep_ctx = in_endpoint_ctx(i);
    4992:	b2e0      	uxtb	r0, r4
    4994:	f008 fbd9 	bl	d14a <in_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);
		ep_ctx_reset(ep_ctx);
    4998:	f008 fbe1 	bl	d15e <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    499c:	3401      	adds	r4, #1
    499e:	2c07      	cmp	r4, #7
    49a0:	d9f7      	bls.n	4992 <eps_ctx_init+0x6>
	}

	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    49a2:	2400      	movs	r4, #0
    49a4:	e006      	b.n	49b4 <eps_ctx_init+0x28>
		ep_ctx = out_endpoint_ctx(i);
		__ASSERT_NO_MSG(ep_ctx);

		if (!ep_ctx->buf.block.data) {
			ep_ctx->buf.block.data = ep_out_bufs[i];
    49a6:	4b10      	ldr	r3, [pc, #64]	; (49e8 <eps_ctx_init+0x5c>)
    49a8:	eb03 1384 	add.w	r3, r3, r4, lsl #6
    49ac:	6103      	str	r3, [r0, #16]
		}

		ep_ctx_reset(ep_ctx);
    49ae:	f008 fbd6 	bl	d15e <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    49b2:	3401      	adds	r4, #1
    49b4:	2c07      	cmp	r4, #7
    49b6:	d806      	bhi.n	49c6 <eps_ctx_init+0x3a>
		ep_ctx = out_endpoint_ctx(i);
    49b8:	b2e0      	uxtb	r0, r4
    49ba:	f008 fbcc 	bl	d156 <out_endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    49be:	6903      	ldr	r3, [r0, #16]
    49c0:	2b00      	cmp	r3, #0
    49c2:	d1f4      	bne.n	49ae <eps_ctx_init+0x22>
    49c4:	e7ef      	b.n	49a6 <eps_ctx_init+0x1a>
	}

	if (CFG_EP_ISOIN_CNT) {
		ep_ctx = in_endpoint_ctx(NRF_USBD_EPIN(8));
    49c6:	2088      	movs	r0, #136	; 0x88
    49c8:	f008 fbbf 	bl	d14a <in_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);
		ep_ctx_reset(ep_ctx);
    49cc:	f008 fbc7 	bl	d15e <ep_ctx_reset>
	}

	if (CFG_EP_ISOOUT_CNT) {
		BUILD_ASSERT(CFG_EP_ISOOUT_CNT <= 1);

		ep_ctx = out_endpoint_ctx(NRF_USBD_EPOUT(8));
    49d0:	2008      	movs	r0, #8
    49d2:	f008 fbc0 	bl	d156 <out_endpoint_ctx>
		__ASSERT_NO_MSG(ep_ctx);

		if (!ep_ctx->buf.block.data) {
    49d6:	6903      	ldr	r3, [r0, #16]
    49d8:	b11b      	cbz	r3, 49e2 <eps_ctx_init+0x56>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
		}

		ep_ctx_reset(ep_ctx);
    49da:	f008 fbc0 	bl	d15e <ep_ctx_reset>
	}

	return 0;
}
    49de:	2000      	movs	r0, #0
    49e0:	bd10      	pop	{r4, pc}
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
    49e2:	4b02      	ldr	r3, [pc, #8]	; (49ec <eps_ctx_init+0x60>)
    49e4:	6103      	str	r3, [r0, #16]
    49e6:	e7f8      	b.n	49da <eps_ctx_init+0x4e>
    49e8:	20001818 	.word	0x20001818
    49ec:	20001418 	.word	0x20001418

000049f0 <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
    49f0:	b510      	push	{r4, lr}
    49f2:	b082      	sub	sp, #8
	};

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
    49f4:	480b      	ldr	r0, [pc, #44]	; (4a24 <usb_init+0x34>)
    49f6:	f002 ff1d 	bl	7834 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);
    49fa:	480b      	ldr	r0, [pc, #44]	; (4a28 <usb_init+0x38>)
    49fc:	f002 ff5e 	bl	78bc <nrfx_power_usbevt_init>

	k_work_queue_start(&usbd_work_queue,
    4a00:	2400      	movs	r4, #0
    4a02:	9400      	str	r4, [sp, #0]
    4a04:	f04f 33ff 	mov.w	r3, #4294967295
    4a08:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4a0c:	4907      	ldr	r1, [pc, #28]	; (4a2c <usb_init+0x3c>)
    4a0e:	4808      	ldr	r0, [pc, #32]	; (4a30 <usb_init+0x40>)
    4a10:	f005 fd04 	bl	a41c <k_work_queue_start>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_work_init(&ctx->usb_work, usbd_work_handler);
    4a14:	4907      	ldr	r1, [pc, #28]	; (4a34 <usb_init+0x44>)
    4a16:	4808      	ldr	r0, [pc, #32]	; (4a38 <usb_init+0x48>)
    4a18:	f009 fa77 	bl	df0a <k_work_init>

	return 0;
}
    4a1c:	4620      	mov	r0, r4
    4a1e:	b002      	add	sp, #8
    4a20:	bd10      	pop	{r4, pc}
    4a22:	bf00      	nop
    4a24:	0000f6e8 	.word	0x0000f6e8
    4a28:	0000f6ec 	.word	0x0000f6ec
    4a2c:	20002e60 	.word	0x20002e60
    4a30:	20000520 	.word	0x20000520
    4a34:	00004cb1 	.word	0x00004cb1
    4a38:	20001a40 	.word	0x20001a40

00004a3c <submit_dc_power_event>:
{
    4a3c:	b530      	push	{r4, r5, lr}
    4a3e:	b083      	sub	sp, #12
    4a40:	4605      	mov	r5, r0
	if (k_mem_slab_alloc(&fifo_elem_slab,
    4a42:	2200      	movs	r2, #0
    4a44:	2300      	movs	r3, #0
    4a46:	a901      	add	r1, sp, #4
    4a48:	482e      	ldr	r0, [pc, #184]	; (4b04 <submit_dc_power_event+0xc8>)
    4a4a:	f005 f935 	bl	9cb8 <k_mem_slab_alloc>
    4a4e:	b980      	cbnz	r0, 4a72 <submit_dc_power_event+0x36>
	ev = (struct usbd_event *)block.data;
    4a50:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    4a52:	6064      	str	r4, [r4, #4]
	if (!ev) {
    4a54:	b15c      	cbz	r4, 4a6e <submit_dc_power_event+0x32>
	ev->evt_type = USBD_EVT_POWER;
    4a56:	2300      	movs	r3, #0
    4a58:	7423      	strb	r3, [r4, #16]
	ev->evt.pwr_evt.state = state;
    4a5a:	7225      	strb	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    4a5c:	4621      	mov	r1, r4
    4a5e:	482a      	ldr	r0, [pc, #168]	; (4b08 <submit_dc_power_event+0xcc>)
    4a60:	f009 fa38 	bl	ded4 <k_queue_append>
	if (usbd_ctx.attached) {
    4a64:	4b29      	ldr	r3, [pc, #164]	; (4b0c <submit_dc_power_event+0xd0>)
    4a66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    4a6a:	2b00      	cmp	r3, #0
    4a6c:	d144      	bne.n	4af8 <submit_dc_power_event+0xbc>
}
    4a6e:	b003      	add	sp, #12
    4a70:	bd30      	pop	{r4, r5, pc}
    4a72:	4b27      	ldr	r3, [pc, #156]	; (4b10 <submit_dc_power_event+0xd4>)
    4a74:	4a27      	ldr	r2, [pc, #156]	; (4b14 <submit_dc_power_event+0xd8>)
    4a76:	1a9b      	subs	r3, r3, r2
    4a78:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    4a7a:	f04f 0100 	mov.w	r1, #0
    4a7e:	2201      	movs	r2, #1
    4a80:	f362 0102 	bfi	r1, r2, #0, #3
    4a84:	f36f 01c5 	bfc	r1, #3, #3
    4a88:	f363 118f 	bfi	r1, r3, #6, #10
    4a8c:	4822      	ldr	r0, [pc, #136]	; (4b18 <submit_dc_power_event+0xdc>)
    4a8e:	f7fc fe95 	bl	17bc <log_0>
static inline void usbd_evt_flush(void)
    4a92:	e004      	b.n	4a9e <submit_dc_power_event+0x62>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4a94:	1d01      	adds	r1, r0, #4
    4a96:	481b      	ldr	r0, [pc, #108]	; (4b04 <submit_dc_power_event+0xc8>)
    4a98:	f009 f8f9 	bl	dc8e <k_mem_slab_free>
	} while (ev != NULL);
    4a9c:	b144      	cbz	r4, 4ab0 <submit_dc_power_event+0x74>
	return z_impl_k_queue_get(queue, timeout);
    4a9e:	2200      	movs	r2, #0
    4aa0:	2300      	movs	r3, #0
    4aa2:	4819      	ldr	r0, [pc, #100]	; (4b08 <submit_dc_power_event+0xcc>)
    4aa4:	f005 fb10 	bl	a0c8 <z_impl_k_queue_get>
		if (ev) {
    4aa8:	4604      	mov	r4, r0
    4aaa:	2800      	cmp	r0, #0
    4aac:	d1f2      	bne.n	4a94 <submit_dc_power_event+0x58>
    4aae:	e7f5      	b.n	4a9c <submit_dc_power_event+0x60>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    4ab0:	2200      	movs	r2, #0
    4ab2:	2300      	movs	r3, #0
    4ab4:	a901      	add	r1, sp, #4
    4ab6:	4813      	ldr	r0, [pc, #76]	; (4b04 <submit_dc_power_event+0xc8>)
    4ab8:	f005 f8fe 	bl	9cb8 <k_mem_slab_alloc>
    4abc:	b180      	cbz	r0, 4ae0 <submit_dc_power_event+0xa4>
    4abe:	4b14      	ldr	r3, [pc, #80]	; (4b10 <submit_dc_power_event+0xd4>)
    4ac0:	4a14      	ldr	r2, [pc, #80]	; (4b14 <submit_dc_power_event+0xd8>)
    4ac2:	1a9b      	subs	r3, r3, r2
    4ac4:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    4ac6:	f04f 0100 	mov.w	r1, #0
    4aca:	2201      	movs	r2, #1
    4acc:	f362 0102 	bfi	r1, r2, #0, #3
    4ad0:	f36f 01c5 	bfc	r1, #3, #3
    4ad4:	f363 118f 	bfi	r1, r3, #6, #10
    4ad8:	4810      	ldr	r0, [pc, #64]	; (4b1c <submit_dc_power_event+0xe0>)
    4ada:	f7fc fe6f 	bl	17bc <log_0>
			return NULL;
    4ade:	e7b9      	b.n	4a54 <submit_dc_power_event+0x18>
		ev = (struct usbd_event *)block.data;
    4ae0:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    4ae2:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    4ae4:	2304      	movs	r3, #4
    4ae6:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    4ae8:	4807      	ldr	r0, [pc, #28]	; (4b08 <submit_dc_power_event+0xcc>)
    4aea:	f009 f9f3 	bl	ded4 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    4aee:	490c      	ldr	r1, [pc, #48]	; (4b20 <submit_dc_power_event+0xe4>)
    4af0:	480c      	ldr	r0, [pc, #48]	; (4b24 <submit_dc_power_event+0xe8>)
    4af2:	f009 fa10 	bl	df16 <k_work_submit_to_queue>
		return NULL;
    4af6:	e7ad      	b.n	4a54 <submit_dc_power_event+0x18>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    4af8:	4909      	ldr	r1, [pc, #36]	; (4b20 <submit_dc_power_event+0xe4>)
    4afa:	480a      	ldr	r0, [pc, #40]	; (4b24 <submit_dc_power_event+0xe8>)
    4afc:	f009 fa0b 	bl	df16 <k_work_submit_to_queue>
}
    4b00:	e7b5      	b.n	4a6e <submit_dc_power_event+0x32>
    4b02:	bf00      	nop
    4b04:	200001bc 	.word	0x200001bc
    4b08:	20000274 	.word	0x20000274
    4b0c:	20001a18 	.word	0x20001a18
    4b10:	0000e884 	.word	0x0000e884
    4b14:	0000e82c 	.word	0x0000e82c
    4b18:	0000f4c8 	.word	0x0000f4c8
    4b1c:	0000f4e8 	.word	0x0000f4e8
    4b20:	20001a40 	.word	0x20001a40
    4b24:	20000520 	.word	0x20000520

00004b28 <usb_dc_power_event_handler>:
{
    4b28:	b508      	push	{r3, lr}
	switch (event) {
    4b2a:	2801      	cmp	r0, #1
    4b2c:	d014      	beq.n	4b58 <usb_dc_power_event_handler+0x30>
    4b2e:	2802      	cmp	r0, #2
    4b30:	d015      	beq.n	4b5e <usb_dc_power_event_handler+0x36>
    4b32:	b198      	cbz	r0, 4b5c <usb_dc_power_event_handler+0x34>
    4b34:	4b0b      	ldr	r3, [pc, #44]	; (4b64 <usb_dc_power_event_handler+0x3c>)
    4b36:	4a0c      	ldr	r2, [pc, #48]	; (4b68 <usb_dc_power_event_handler+0x40>)
    4b38:	1a9b      	subs	r3, r3, r2
    4b3a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Unknown USB power event %d", event);
    4b3c:	f04f 0200 	mov.w	r2, #0
    4b40:	2101      	movs	r1, #1
    4b42:	f361 0202 	bfi	r2, r1, #0, #3
    4b46:	f36f 02c5 	bfc	r2, #3, #3
    4b4a:	f363 128f 	bfi	r2, r3, #6, #10
    4b4e:	4601      	mov	r1, r0
    4b50:	4806      	ldr	r0, [pc, #24]	; (4b6c <usb_dc_power_event_handler+0x44>)
    4b52:	f7fc fdc1 	bl	16d8 <log_1>
    4b56:	e004      	b.n	4b62 <usb_dc_power_event_handler+0x3a>
		new_state = USBD_DETACHED;
    4b58:	2000      	movs	r0, #0
    4b5a:	e000      	b.n	4b5e <usb_dc_power_event_handler+0x36>
	switch (event) {
    4b5c:	2001      	movs	r0, #1
	submit_dc_power_event(new_state);
    4b5e:	f7ff ff6d 	bl	4a3c <submit_dc_power_event>
}
    4b62:	bd08      	pop	{r3, pc}
    4b64:	0000e884 	.word	0x0000e884
    4b68:	0000e82c 	.word	0x0000e82c
    4b6c:	0000f504 	.word	0x0000f504

00004b70 <usbd_sof_trigger_iso_read>:
{
    4b70:	b530      	push	{r4, r5, lr}
    4b72:	b083      	sub	sp, #12
	ep_ctx = endpoint_ctx(NRFX_USBD_EPOUT8);
    4b74:	2008      	movs	r0, #8
    4b76:	f7ff fed5 	bl	4924 <endpoint_ctx>
	if (!ep_ctx) {
    4b7a:	b120      	cbz	r0, 4b86 <usbd_sof_trigger_iso_read+0x16>
    4b7c:	4605      	mov	r5, r0
	if (ep_ctx->cfg.en) {
    4b7e:	7a03      	ldrb	r3, [r0, #8]
    4b80:	b993      	cbnz	r3, 4ba8 <usbd_sof_trigger_iso_read+0x38>
}
    4b82:	b003      	add	sp, #12
    4b84:	bd30      	pop	{r4, r5, pc}
    4b86:	4b40      	ldr	r3, [pc, #256]	; (4c88 <usbd_sof_trigger_iso_read+0x118>)
    4b88:	4a40      	ldr	r2, [pc, #256]	; (4c8c <usbd_sof_trigger_iso_read+0x11c>)
    4b8a:	1a9b      	subs	r3, r3, r2
    4b8c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("There is no ISO ep");
    4b8e:	f04f 0100 	mov.w	r1, #0
    4b92:	2201      	movs	r2, #1
    4b94:	f362 0102 	bfi	r1, r2, #0, #3
    4b98:	f36f 01c5 	bfc	r1, #3, #3
    4b9c:	f363 118f 	bfi	r1, r3, #6, #10
    4ba0:	483b      	ldr	r0, [pc, #236]	; (4c90 <usbd_sof_trigger_iso_read+0x120>)
    4ba2:	f7fc fe0b 	bl	17bc <log_0>
		return;
    4ba6:	e7ec      	b.n	4b82 <usbd_sof_trigger_iso_read+0x12>
		ep_ctx->read_pending = true;
    4ba8:	2301      	movs	r3, #1
    4baa:	7743      	strb	r3, [r0, #29]
		ep_ctx->read_complete = true;
    4bac:	7703      	strb	r3, [r0, #28]
	if (k_mem_slab_alloc(&fifo_elem_slab,
    4bae:	2200      	movs	r2, #0
    4bb0:	2300      	movs	r3, #0
    4bb2:	a901      	add	r1, sp, #4
    4bb4:	4837      	ldr	r0, [pc, #220]	; (4c94 <usbd_sof_trigger_iso_read+0x124>)
    4bb6:	f005 f87f 	bl	9cb8 <k_mem_slab_alloc>
    4bba:	b980      	cbnz	r0, 4bde <usbd_sof_trigger_iso_read+0x6e>
	ev = (struct usbd_event *)block.data;
    4bbc:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    4bbe:	6064      	str	r4, [r4, #4]
		if (!ev) {
    4bc0:	2c00      	cmp	r4, #0
    4bc2:	d04f      	beq.n	4c64 <usbd_sof_trigger_iso_read+0xf4>
		ev->evt_type = USBD_EVT_EP;
    4bc4:	2301      	movs	r3, #1
    4bc6:	7423      	strb	r3, [r4, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    4bc8:	7323      	strb	r3, [r4, #12]
		ev->evt.ep_evt.ep = ep_ctx;
    4bca:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    4bcc:	4621      	mov	r1, r4
    4bce:	4832      	ldr	r0, [pc, #200]	; (4c98 <usbd_sof_trigger_iso_read+0x128>)
    4bd0:	f009 f980 	bl	ded4 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    4bd4:	4931      	ldr	r1, [pc, #196]	; (4c9c <usbd_sof_trigger_iso_read+0x12c>)
    4bd6:	4832      	ldr	r0, [pc, #200]	; (4ca0 <usbd_sof_trigger_iso_read+0x130>)
    4bd8:	f009 f99d 	bl	df16 <k_work_submit_to_queue>
}
    4bdc:	e7d1      	b.n	4b82 <usbd_sof_trigger_iso_read+0x12>
    4bde:	4b2a      	ldr	r3, [pc, #168]	; (4c88 <usbd_sof_trigger_iso_read+0x118>)
    4be0:	4a2a      	ldr	r2, [pc, #168]	; (4c8c <usbd_sof_trigger_iso_read+0x11c>)
    4be2:	1a9b      	subs	r3, r3, r2
    4be4:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    4be6:	f04f 0100 	mov.w	r1, #0
    4bea:	2201      	movs	r2, #1
    4bec:	f362 0102 	bfi	r1, r2, #0, #3
    4bf0:	f36f 01c5 	bfc	r1, #3, #3
    4bf4:	f363 118f 	bfi	r1, r3, #6, #10
    4bf8:	482a      	ldr	r0, [pc, #168]	; (4ca4 <usbd_sof_trigger_iso_read+0x134>)
    4bfa:	f7fc fddf 	bl	17bc <log_0>
static inline void usbd_evt_flush(void)
    4bfe:	e000      	b.n	4c02 <usbd_sof_trigger_iso_read+0x92>
	} while (ev != NULL);
    4c00:	b164      	cbz	r4, 4c1c <usbd_sof_trigger_iso_read+0xac>
    4c02:	2200      	movs	r2, #0
    4c04:	2300      	movs	r3, #0
    4c06:	4824      	ldr	r0, [pc, #144]	; (4c98 <usbd_sof_trigger_iso_read+0x128>)
    4c08:	f005 fa5e 	bl	a0c8 <z_impl_k_queue_get>
		if (ev) {
    4c0c:	4604      	mov	r4, r0
    4c0e:	2800      	cmp	r0, #0
    4c10:	d0f6      	beq.n	4c00 <usbd_sof_trigger_iso_read+0x90>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4c12:	1d01      	adds	r1, r0, #4
    4c14:	481f      	ldr	r0, [pc, #124]	; (4c94 <usbd_sof_trigger_iso_read+0x124>)
    4c16:	f009 f83a 	bl	dc8e <k_mem_slab_free>
}
    4c1a:	e7f1      	b.n	4c00 <usbd_sof_trigger_iso_read+0x90>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    4c1c:	2200      	movs	r2, #0
    4c1e:	2300      	movs	r3, #0
    4c20:	a901      	add	r1, sp, #4
    4c22:	481c      	ldr	r0, [pc, #112]	; (4c94 <usbd_sof_trigger_iso_read+0x124>)
    4c24:	f005 f848 	bl	9cb8 <k_mem_slab_alloc>
    4c28:	b180      	cbz	r0, 4c4c <usbd_sof_trigger_iso_read+0xdc>
    4c2a:	4b17      	ldr	r3, [pc, #92]	; (4c88 <usbd_sof_trigger_iso_read+0x118>)
    4c2c:	4a17      	ldr	r2, [pc, #92]	; (4c8c <usbd_sof_trigger_iso_read+0x11c>)
    4c2e:	1a9b      	subs	r3, r3, r2
    4c30:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    4c32:	f04f 0100 	mov.w	r1, #0
    4c36:	2201      	movs	r2, #1
    4c38:	f362 0102 	bfi	r1, r2, #0, #3
    4c3c:	f36f 01c5 	bfc	r1, #3, #3
    4c40:	f363 118f 	bfi	r1, r3, #6, #10
    4c44:	4818      	ldr	r0, [pc, #96]	; (4ca8 <usbd_sof_trigger_iso_read+0x138>)
    4c46:	f7fc fdb9 	bl	17bc <log_0>
			return NULL;
    4c4a:	e7b9      	b.n	4bc0 <usbd_sof_trigger_iso_read+0x50>
		ev = (struct usbd_event *)block.data;
    4c4c:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    4c4e:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    4c50:	2304      	movs	r3, #4
    4c52:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    4c54:	4810      	ldr	r0, [pc, #64]	; (4c98 <usbd_sof_trigger_iso_read+0x128>)
    4c56:	f009 f93d 	bl	ded4 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    4c5a:	4910      	ldr	r1, [pc, #64]	; (4c9c <usbd_sof_trigger_iso_read+0x12c>)
    4c5c:	4810      	ldr	r0, [pc, #64]	; (4ca0 <usbd_sof_trigger_iso_read+0x130>)
    4c5e:	f009 f95a 	bl	df16 <k_work_submit_to_queue>
		return NULL;
    4c62:	e7ad      	b.n	4bc0 <usbd_sof_trigger_iso_read+0x50>
    4c64:	4b08      	ldr	r3, [pc, #32]	; (4c88 <usbd_sof_trigger_iso_read+0x118>)
    4c66:	4a09      	ldr	r2, [pc, #36]	; (4c8c <usbd_sof_trigger_iso_read+0x11c>)
    4c68:	1a9b      	subs	r3, r3, r2
    4c6a:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Failed to alloc evt");
    4c6c:	f04f 0100 	mov.w	r1, #0
    4c70:	2201      	movs	r2, #1
    4c72:	f362 0102 	bfi	r1, r2, #0, #3
    4c76:	f36f 01c5 	bfc	r1, #3, #3
    4c7a:	f363 118f 	bfi	r1, r3, #6, #10
    4c7e:	480b      	ldr	r0, [pc, #44]	; (4cac <usbd_sof_trigger_iso_read+0x13c>)
    4c80:	f7fc fd9c 	bl	17bc <log_0>
			return;
    4c84:	e77d      	b.n	4b82 <usbd_sof_trigger_iso_read+0x12>
    4c86:	bf00      	nop
    4c88:	0000e884 	.word	0x0000e884
    4c8c:	0000e82c 	.word	0x0000e82c
    4c90:	0000f520 	.word	0x0000f520
    4c94:	200001bc 	.word	0x200001bc
    4c98:	20000274 	.word	0x20000274
    4c9c:	20001a40 	.word	0x20001a40
    4ca0:	20000520 	.word	0x20000520
    4ca4:	0000f4c8 	.word	0x0000f4c8
    4ca8:	0000f4e8 	.word	0x0000f4e8
    4cac:	0000f534 	.word	0x0000f534

00004cb0 <usbd_work_handler>:
{
    4cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4cb4:	b085      	sub	sp, #20
    4cb6:	4605      	mov	r5, r0
	while ((ev = usbd_evt_get()) != NULL) {
    4cb8:	e18f      	b.n	4fda <usbd_work_handler+0x32a>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4cba:	1d21      	adds	r1, r4, #4
    4cbc:	48b5      	ldr	r0, [pc, #724]	; (4f94 <usbd_work_handler+0x2e4>)
    4cbe:	f008 ffe6 	bl	dc8e <k_mem_slab_free>
			continue;
    4cc2:	e18a      	b.n	4fda <usbd_work_handler+0x32a>
			if (!ctx->attached) {
    4cc4:	f815 3c04 	ldrb.w	r3, [r5, #-4]
    4cc8:	b14b      	cbz	r3, 4cde <usbd_work_handler+0x2e>
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    4cca:	f8d4 a008 	ldr.w	sl, [r4, #8]
	switch (ep_evt->evt_type) {
    4cce:	7b23      	ldrb	r3, [r4, #12]
    4cd0:	2b03      	cmp	r3, #3
    4cd2:	f200 817e 	bhi.w	4fd2 <usbd_work_handler+0x322>
    4cd6:	e8df f003 	tbb	[pc, r3]
    4cda:	6114      	.short	0x6114
    4cdc:	a49d      	.short	0xa49d
    4cde:	4bae      	ldr	r3, [pc, #696]	; (4f98 <usbd_work_handler+0x2e8>)
    4ce0:	4aae      	ldr	r2, [pc, #696]	; (4f9c <usbd_work_handler+0x2ec>)
    4ce2:	1a9b      	subs	r3, r3, r2
    4ce4:	08db      	lsrs	r3, r3, #3
				LOG_ERR("not attached, EP 0x%02x event dropped",
    4ce6:	2201      	movs	r2, #1
    4ce8:	f362 0702 	bfi	r7, r2, #0, #3
    4cec:	f36f 07c5 	bfc	r7, #3, #3
    4cf0:	f363 178f 	bfi	r7, r3, #6, #10
    4cf4:	68a3      	ldr	r3, [r4, #8]
    4cf6:	463a      	mov	r2, r7
    4cf8:	7a59      	ldrb	r1, [r3, #9]
    4cfa:	48a9      	ldr	r0, [pc, #676]	; (4fa0 <usbd_work_handler+0x2f0>)
    4cfc:	f7fc fcec 	bl	16d8 <log_1>
    4d00:	e7e3      	b.n	4cca <usbd_work_handler+0x1a>
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    4d02:	f8da b014 	ldr.w	fp, [sl, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
    4d06:	2208      	movs	r2, #8
    4d08:	2100      	movs	r1, #0
    4d0a:	4658      	mov	r0, fp
    4d0c:	f008 f9df 	bl	d0ce <memset>
    return ret;
}

NRF_STATIC_INLINE uint8_t nrf_usbd_setup_bmrequesttype_get(NRF_USBD_Type const * p_reg)
{
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    4d10:	4ba4      	ldr	r3, [pc, #656]	; (4fa4 <usbd_work_handler+0x2f4>)
    4d12:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
	usbd_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    4d16:	f88b 2000 	strb.w	r2, [fp]
}

NRF_STATIC_INLINE uint8_t nrf_usbd_setup_brequest_get(NRF_USBD_Type const * p_reg)
{
    return (uint8_t)(p_reg->BREQUEST);
    4d1a:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
	usbd_setup->bRequest = nrf_usbd_setup_brequest_get(NRF_USBD);
    4d1e:	f88b 2001 	strb.w	r2, [fp, #1]
}

NRF_STATIC_INLINE uint16_t nrf_usbd_setup_wvalue_get(NRF_USBD_Type const * p_reg)
{
    const uint16_t val = p_reg->WVALUEL;
    4d22:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    4d26:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    4d28:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    4d2c:	0209      	lsls	r1, r1, #8
    4d2e:	b289      	uxth	r1, r1
    4d30:	430a      	orrs	r2, r1
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
    4d32:	f8ab 2002 	strh.w	r2, [fp, #2]
}

NRF_STATIC_INLINE uint16_t nrf_usbd_setup_windex_get(NRF_USBD_Type const * p_reg)
{
    const uint16_t val = p_reg->WINDEXL;
    4d36:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    4d3a:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    4d3c:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    4d40:	0209      	lsls	r1, r1, #8
    4d42:	b289      	uxth	r1, r1
    4d44:	430a      	orrs	r2, r1
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
    4d46:	f8ab 2004 	strh.w	r2, [fp, #4]
}

NRF_STATIC_INLINE uint16_t nrf_usbd_setup_wlength_get(NRF_USBD_Type const * p_reg)
{
    const uint16_t val = p_reg->WLENGTHL;
    4d4a:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    4d4e:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    4d50:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    4d54:	021b      	lsls	r3, r3, #8
    4d56:	b29b      	uxth	r3, r3
    4d58:	4313      	orrs	r3, r2
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
    4d5a:	f8ab 3006 	strh.w	r3, [fp, #6]
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    4d5e:	2208      	movs	r2, #8
    4d60:	f8ca 200c 	str.w	r2, [sl, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    4d64:	4659      	mov	r1, fp
    4d66:	4890      	ldr	r0, [pc, #576]	; (4fa8 <usbd_work_handler+0x2f8>)
    4d68:	f008 f98d 	bl	d086 <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    4d6c:	f8da 3000 	ldr.w	r3, [sl]
    4d70:	2100      	movs	r1, #0
    4d72:	f89a 0009 	ldrb.w	r0, [sl, #9]
    4d76:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
    4d78:	f99b 3000 	ldrsb.w	r3, [fp]
    4d7c:	2b00      	cmp	r3, #0
    4d7e:	db02      	blt.n	4d86 <usbd_work_handler+0xd6>
    4d80:	f8bb 3006 	ldrh.w	r3, [fp, #6]
    4d84:	b923      	cbnz	r3, 4d90 <usbd_work_handler+0xe0>
		ctx->ctrl_read_len = 0U;
    4d86:	4b89      	ldr	r3, [pc, #548]	; (4fac <usbd_work_handler+0x2fc>)
    4d88:	2200      	movs	r2, #0
    4d8a:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
}
    4d8e:	e120      	b.n	4fd2 <usbd_work_handler+0x322>
		ctx->ctrl_read_len = usbd_setup->wLength;
    4d90:	4a86      	ldr	r2, [pc, #536]	; (4fac <usbd_work_handler+0x2fc>)
    4d92:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
    4d96:	f004 f86d 	bl	8e74 <nrfx_usbd_setup_data_clear>
    4d9a:	e11a      	b.n	4fd2 <usbd_work_handler+0x322>
	if (!ep_ctx->read_pending) {
    4d9c:	f89a 301d 	ldrb.w	r3, [sl, #29]
    4da0:	2b00      	cmp	r3, #0
    4da2:	f000 8116 	beq.w	4fd2 <usbd_work_handler+0x322>
	if (!ep_ctx->read_complete) {
    4da6:	f89a 301c 	ldrb.w	r3, [sl, #28]
    4daa:	2b00      	cmp	r3, #0
    4dac:	f000 8111 	beq.w	4fd2 <usbd_work_handler+0x322>
	ep_ctx->read_pending = false;
    4db0:	f04f 0b00 	mov.w	fp, #0
    4db4:	f88a b01d 	strb.w	fp, [sl, #29]
	ep_ctx->read_complete = false;
    4db8:	f88a b01c 	strb.w	fp, [sl, #28]
	return z_impl_k_mutex_lock(mutex, timeout);
    4dbc:	f04f 32ff 	mov.w	r2, #4294967295
    4dc0:	f04f 33ff 	mov.w	r3, #4294967295
    4dc4:	487a      	ldr	r0, [pc, #488]	; (4fb0 <usbd_work_handler+0x300>)
    4dc6:	f005 f8b1 	bl	9f2c <z_impl_k_mutex_lock>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    4dca:	f8da 3014 	ldr.w	r3, [sl, #20]
    4dce:	9301      	str	r3, [sp, #4]
    4dd0:	f8da 3004 	ldr.w	r3, [sl, #4]
    4dd4:	9302      	str	r3, [sp, #8]
    4dd6:	f8cd b00c 	str.w	fp, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    4dda:	a901      	add	r1, sp, #4
    4ddc:	f89a 0009 	ldrb.w	r0, [sl, #9]
    4de0:	f003 fbfc 	bl	85dc <nrfx_usbd_ep_transfer>
    4de4:	4601      	mov	r1, r0
	if (err != NRFX_SUCCESS) {
    4de6:	4b73      	ldr	r3, [pc, #460]	; (4fb4 <usbd_work_handler+0x304>)
    4de8:	4298      	cmp	r0, r3
    4dea:	d103      	bne.n	4df4 <usbd_work_handler+0x144>
	return z_impl_k_mutex_unlock(mutex);
    4dec:	4870      	ldr	r0, [pc, #448]	; (4fb0 <usbd_work_handler+0x300>)
    4dee:	f005 f927 	bl	a040 <z_impl_k_mutex_unlock>
    4df2:	e0ee      	b.n	4fd2 <usbd_work_handler+0x322>
    4df4:	4b68      	ldr	r3, [pc, #416]	; (4f98 <usbd_work_handler+0x2e8>)
    4df6:	4a69      	ldr	r2, [pc, #420]	; (4f9c <usbd_work_handler+0x2ec>)
    4df8:	1a9b      	subs	r3, r3, r2
    4dfa:	08db      	lsrs	r3, r3, #3
		LOG_ERR("nRF USBD transfer error (OUT): 0x%02x", err);
    4dfc:	2201      	movs	r2, #1
    4dfe:	f362 0802 	bfi	r8, r2, #0, #3
    4e02:	f36f 08c5 	bfc	r8, #3, #3
    4e06:	f363 188f 	bfi	r8, r3, #6, #10
    4e0a:	4642      	mov	r2, r8
    4e0c:	486a      	ldr	r0, [pc, #424]	; (4fb8 <usbd_work_handler+0x308>)
    4e0e:	f7fc fc63 	bl	16d8 <log_1>
    4e12:	e7eb      	b.n	4dec <usbd_work_handler+0x13c>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    4e14:	f8da 3000 	ldr.w	r3, [sl]
    4e18:	2101      	movs	r1, #1
    4e1a:	f89a 0009 	ldrb.w	r0, [sl, #9]
    4e1e:	4798      	blx	r3
		break;
    4e20:	e0d7      	b.n	4fd2 <usbd_work_handler+0x322>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    4e22:	f89a 300a 	ldrb.w	r3, [sl, #10]
    4e26:	b913      	cbnz	r3, 4e2e <usbd_work_handler+0x17e>
		    !ep_ctx->trans_zlp) {
    4e28:	f89a 301f 	ldrb.w	r3, [sl, #31]
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    4e2c:	b133      	cbz	r3, 4e3c <usbd_work_handler+0x18c>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    4e2e:	f8da 3000 	ldr.w	r3, [sl]
    4e32:	2102      	movs	r1, #2
    4e34:	f89a 0009 	ldrb.w	r0, [sl, #9]
    4e38:	4798      	blx	r3
}
    4e3a:	e0ca      	b.n	4fd2 <usbd_work_handler+0x322>
	return z_impl_k_mutex_lock(mutex, timeout);
    4e3c:	f8df b170 	ldr.w	fp, [pc, #368]	; 4fb0 <usbd_work_handler+0x300>
    4e40:	f04f 32ff 	mov.w	r2, #4294967295
    4e44:	f04f 33ff 	mov.w	r3, #4294967295
    4e48:	4658      	mov	r0, fp
    4e4a:	f005 f86f 	bl	9f2c <z_impl_k_mutex_lock>
			nrfx_usbd_setup_clear();
    4e4e:	f004 f863 	bl	8f18 <nrfx_usbd_setup_clear>
	return z_impl_k_mutex_unlock(mutex);
    4e52:	4658      	mov	r0, fp
    4e54:	f005 f8f4 	bl	a040 <z_impl_k_mutex_unlock>
    4e58:	e7e9      	b.n	4e2e <usbd_work_handler+0x17e>
	switch (pwr_evt->state) {
    4e5a:	7a23      	ldrb	r3, [r4, #8]
    4e5c:	2b04      	cmp	r3, #4
    4e5e:	f200 80b8 	bhi.w	4fd2 <usbd_work_handler+0x322>
    4e62:	e8df f003 	tbb	[pc, r3]
    4e66:	0322      	.short	0x0322
    4e68:	350e      	.short	0x350e
    4e6a:	44          	.byte	0x44
    4e6b:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
    4e6c:	f003 fb44 	bl	84f8 <nrfx_usbd_is_enabled>
    4e70:	2800      	cmp	r0, #0
    4e72:	f040 80ae 	bne.w	4fd2 <usbd_work_handler+0x322>
			nrfx_usbd_enable();
    4e76:	f003 fa89 	bl	838c <nrfx_usbd_enable>
			err = hfxo_start(ctx);
    4e7a:	484c      	ldr	r0, [pc, #304]	; (4fac <usbd_work_handler+0x2fc>)
    4e7c:	f008 f9d6 	bl	d22c <hfxo_start>
    4e80:	e0a7      	b.n	4fd2 <usbd_work_handler+0x322>
		usbd_enable_endpoints(ctx);
    4e82:	f8df a128 	ldr.w	sl, [pc, #296]	; 4fac <usbd_work_handler+0x2fc>
    4e86:	4650      	mov	r0, sl
    4e88:	f008 f99e 	bl	d1c8 <usbd_enable_endpoints>
		nrfx_usbd_start(true);
    4e8c:	2001      	movs	r0, #1
    4e8e:	f003 fb17 	bl	84c0 <nrfx_usbd_start>
		ctx->ready = true;
    4e92:	2301      	movs	r3, #1
    4e94:	f88a 3025 	strb.w	r3, [sl, #37]	; 0x25
		if (ctx->status_cb) {
    4e98:	f8da 3000 	ldr.w	r3, [sl]
    4e9c:	2b00      	cmp	r3, #0
    4e9e:	f000 8098 	beq.w	4fd2 <usbd_work_handler+0x322>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    4ea2:	2100      	movs	r1, #0
    4ea4:	2002      	movs	r0, #2
    4ea6:	4798      	blx	r3
    4ea8:	e093      	b.n	4fd2 <usbd_work_handler+0x322>
		ctx->ready = false;
    4eaa:	f8df a100 	ldr.w	sl, [pc, #256]	; 4fac <usbd_work_handler+0x2fc>
    4eae:	2300      	movs	r3, #0
    4eb0:	f88a 3025 	strb.w	r3, [sl, #37]	; 0x25
		nrfx_usbd_disable();
    4eb4:	f004 fae6 	bl	9484 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
    4eb8:	4650      	mov	r0, sl
    4eba:	f008 f964 	bl	d186 <hfxo_stop>
		if (ctx->status_cb) {
    4ebe:	f8da 3000 	ldr.w	r3, [sl]
    4ec2:	2b00      	cmp	r3, #0
    4ec4:	f000 8085 	beq.w	4fd2 <usbd_work_handler+0x322>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    4ec8:	2100      	movs	r1, #0
    4eca:	2004      	movs	r0, #4
    4ecc:	4798      	blx	r3
    4ece:	e080      	b.n	4fd2 <usbd_work_handler+0x322>
	return get_usbd_ctx()->ready;
    4ed0:	4b36      	ldr	r3, [pc, #216]	; (4fac <usbd_work_handler+0x2fc>)
    4ed2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		if (dev_ready()) {
    4ed6:	2b00      	cmp	r3, #0
    4ed8:	d07b      	beq.n	4fd2 <usbd_work_handler+0x322>
			nrfx_usbd_suspend();
    4eda:	f004 faf5 	bl	94c8 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    4ede:	4b33      	ldr	r3, [pc, #204]	; (4fac <usbd_work_handler+0x2fc>)
    4ee0:	681b      	ldr	r3, [r3, #0]
    4ee2:	2b00      	cmp	r3, #0
    4ee4:	d075      	beq.n	4fd2 <usbd_work_handler+0x322>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    4ee6:	2100      	movs	r1, #0
    4ee8:	2005      	movs	r0, #5
    4eea:	4798      	blx	r3
    4eec:	e071      	b.n	4fd2 <usbd_work_handler+0x322>
		if (ctx->status_cb && dev_ready()) {
    4eee:	4b2f      	ldr	r3, [pc, #188]	; (4fac <usbd_work_handler+0x2fc>)
    4ef0:	681b      	ldr	r3, [r3, #0]
    4ef2:	2b00      	cmp	r3, #0
    4ef4:	d06d      	beq.n	4fd2 <usbd_work_handler+0x322>
	return get_usbd_ctx()->ready;
    4ef6:	4a2d      	ldr	r2, [pc, #180]	; (4fac <usbd_work_handler+0x2fc>)
    4ef8:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
		if (ctx->status_cb && dev_ready()) {
    4efc:	2a00      	cmp	r2, #0
    4efe:	d068      	beq.n	4fd2 <usbd_work_handler+0x322>
			ctx->status_cb(USB_DC_RESUME, NULL);
    4f00:	2100      	movs	r1, #0
    4f02:	2006      	movs	r0, #6
    4f04:	4798      	blx	r3
}
    4f06:	e064      	b.n	4fd2 <usbd_work_handler+0x322>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4f08:	f105 0a10 	add.w	sl, r5, #16
	return z_impl_k_mutex_lock(mutex, timeout);
    4f0c:	f04f 32ff 	mov.w	r2, #4294967295
    4f10:	f04f 33ff 	mov.w	r3, #4294967295
    4f14:	4650      	mov	r0, sl
    4f16:	f005 f809 	bl	9f2c <z_impl_k_mutex_lock>
			eps_ctx_init();
    4f1a:	f7ff fd37 	bl	498c <eps_ctx_init>
	return z_impl_k_mutex_unlock(mutex);
    4f1e:	4650      	mov	r0, sl
    4f20:	f005 f88e 	bl	a040 <z_impl_k_mutex_unlock>
			if (ctx->status_cb) {
    4f24:	f855 3c28 	ldr.w	r3, [r5, #-40]
    4f28:	2b00      	cmp	r3, #0
    4f2a:	d052      	beq.n	4fd2 <usbd_work_handler+0x322>
				ctx->status_cb(USB_DC_RESET, NULL);
    4f2c:	2100      	movs	r1, #0
    4f2e:	2001      	movs	r0, #1
    4f30:	4798      	blx	r3
    4f32:	e04e      	b.n	4fd2 <usbd_work_handler+0x322>
			usbd_sof_trigger_iso_read();
    4f34:	f7ff fe1c 	bl	4b70 <usbd_sof_trigger_iso_read>
			if (ctx->status_cb) {
    4f38:	f855 3c28 	ldr.w	r3, [r5, #-40]
    4f3c:	2b00      	cmp	r3, #0
    4f3e:	d048      	beq.n	4fd2 <usbd_work_handler+0x322>
				ctx->status_cb(USB_DC_SOF, NULL);
    4f40:	2100      	movs	r1, #0
    4f42:	200a      	movs	r0, #10
    4f44:	4798      	blx	r3
    4f46:	e044      	b.n	4fd2 <usbd_work_handler+0x322>
    4f48:	4b13      	ldr	r3, [pc, #76]	; (4f98 <usbd_work_handler+0x2e8>)
    4f4a:	4a14      	ldr	r2, [pc, #80]	; (4f9c <usbd_work_handler+0x2ec>)
    4f4c:	1a9b      	subs	r3, r3, r2
    4f4e:	08db      	lsrs	r3, r3, #3
				LOG_ERR("USBD event queue full!");
    4f50:	2201      	movs	r2, #1
    4f52:	f362 0602 	bfi	r6, r2, #0, #3
    4f56:	f36f 06c5 	bfc	r6, #3, #3
    4f5a:	f363 168f 	bfi	r6, r3, #6, #10
    4f5e:	4631      	mov	r1, r6
    4f60:	4816      	ldr	r0, [pc, #88]	; (4fbc <usbd_work_handler+0x30c>)
    4f62:	f7fc fc2b 	bl	17bc <log_0>
	nrfx_power_usbevt_disable();
    4f66:	f008 fdbd 	bl	dae4 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
    4f6a:	f004 fa8b 	bl	9484 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    4f6e:	f003 fa03 	bl	8378 <nrfx_usbd_uninit>
static inline void usbd_evt_flush(void)
    4f72:	e006      	b.n	4f82 <usbd_work_handler+0x2d2>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4f74:	1d01      	adds	r1, r0, #4
    4f76:	4807      	ldr	r0, [pc, #28]	; (4f94 <usbd_work_handler+0x2e4>)
    4f78:	f008 fe89 	bl	dc8e <k_mem_slab_free>
	} while (ev != NULL);
    4f7c:	f1ba 0f00 	cmp.w	sl, #0
    4f80:	d020      	beq.n	4fc4 <usbd_work_handler+0x314>
	return z_impl_k_queue_get(queue, timeout);
    4f82:	2200      	movs	r2, #0
    4f84:	2300      	movs	r3, #0
    4f86:	480e      	ldr	r0, [pc, #56]	; (4fc0 <usbd_work_handler+0x310>)
    4f88:	f005 f89e 	bl	a0c8 <z_impl_k_queue_get>
		if (ev) {
    4f8c:	4682      	mov	sl, r0
    4f8e:	2800      	cmp	r0, #0
    4f90:	d1f0      	bne.n	4f74 <usbd_work_handler+0x2c4>
    4f92:	e7f3      	b.n	4f7c <usbd_work_handler+0x2cc>
    4f94:	200001bc 	.word	0x200001bc
    4f98:	0000e884 	.word	0x0000e884
    4f9c:	0000e82c 	.word	0x0000e82c
    4fa0:	0000f548 	.word	0x0000f548
    4fa4:	40027000 	.word	0x40027000
    4fa8:	20001a1c 	.word	0x20001a1c
    4fac:	20001a18 	.word	0x20001a18
    4fb0:	20001a50 	.word	0x20001a50
    4fb4:	0bad0000 	.word	0x0bad0000
    4fb8:	0000f570 	.word	0x0000f570
    4fbc:	0000f598 	.word	0x0000f598
    4fc0:	20000274 	.word	0x20000274
	ret = eps_ctx_init();
    4fc4:	f7ff fce2 	bl	498c <eps_ctx_init>
	nrfx_power_usbevt_enable();
    4fc8:	f008 fd85 	bl	dad6 <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    4fcc:	481c      	ldr	r0, [pc, #112]	; (5040 <usbd_work_handler+0x390>)
    4fce:	f003 faad 	bl	852c <nrfx_usbd_init>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4fd2:	1d21      	adds	r1, r4, #4
    4fd4:	481b      	ldr	r0, [pc, #108]	; (5044 <usbd_work_handler+0x394>)
    4fd6:	f008 fe5a 	bl	dc8e <k_mem_slab_free>
    4fda:	2200      	movs	r2, #0
    4fdc:	2300      	movs	r3, #0
    4fde:	481a      	ldr	r0, [pc, #104]	; (5048 <usbd_work_handler+0x398>)
    4fe0:	f005 f872 	bl	a0c8 <z_impl_k_queue_get>
	while ((ev = usbd_evt_get()) != NULL) {
    4fe4:	4604      	mov	r4, r0
    4fe6:	b338      	cbz	r0, 5038 <usbd_work_handler+0x388>
	return get_usbd_ctx()->ready;
    4fe8:	4b18      	ldr	r3, [pc, #96]	; (504c <usbd_work_handler+0x39c>)
    4fea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    4fee:	b91b      	cbnz	r3, 4ff8 <usbd_work_handler+0x348>
    4ff0:	7c23      	ldrb	r3, [r4, #16]
    4ff2:	2b00      	cmp	r3, #0
    4ff4:	f47f ae61 	bne.w	4cba <usbd_work_handler+0xa>
		switch (ev->evt_type) {
    4ff8:	7c21      	ldrb	r1, [r4, #16]
    4ffa:	2904      	cmp	r1, #4
    4ffc:	d80c      	bhi.n	5018 <usbd_work_handler+0x368>
    4ffe:	a301      	add	r3, pc, #4	; (adr r3, 5004 <usbd_work_handler+0x354>)
    5000:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    5004:	00004e5b 	.word	0x00004e5b
    5008:	00004cc5 	.word	0x00004cc5
    500c:	00004f09 	.word	0x00004f09
    5010:	00004f35 	.word	0x00004f35
    5014:	00004f49 	.word	0x00004f49
    5018:	4b0d      	ldr	r3, [pc, #52]	; (5050 <usbd_work_handler+0x3a0>)
    501a:	4a0e      	ldr	r2, [pc, #56]	; (5054 <usbd_work_handler+0x3a4>)
    501c:	1a9b      	subs	r3, r3, r2
    501e:	08db      	lsrs	r3, r3, #3
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    5020:	2201      	movs	r2, #1
    5022:	f362 0902 	bfi	r9, r2, #0, #3
    5026:	f36f 09c5 	bfc	r9, #3, #3
    502a:	f363 198f 	bfi	r9, r3, #6, #10
    502e:	464a      	mov	r2, r9
    5030:	4809      	ldr	r0, [pc, #36]	; (5058 <usbd_work_handler+0x3a8>)
    5032:	f7fc fb51 	bl	16d8 <log_1>
    5036:	e7cc      	b.n	4fd2 <usbd_work_handler+0x322>
}
    5038:	b005      	add	sp, #20
    503a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    503e:	bf00      	nop
    5040:	000056b9 	.word	0x000056b9
    5044:	200001bc 	.word	0x200001bc
    5048:	20000274 	.word	0x20000274
    504c:	20001a18 	.word	0x20001a18
    5050:	0000e884 	.word	0x0000e884
    5054:	0000e82c 	.word	0x0000e82c
    5058:	0000f5b0 	.word	0x0000f5b0

0000505c <usbd_event_transfer_ctrl>:
{
    505c:	b570      	push	{r4, r5, r6, lr}
    505e:	b082      	sub	sp, #8
    5060:	4604      	mov	r4, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
    5062:	7886      	ldrb	r6, [r0, #2]
    5064:	4630      	mov	r0, r6
    5066:	f7ff fc5d 	bl	4924 <endpoint_ctx>
    506a:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    506c:	f016 0f80 	tst.w	r6, #128	; 0x80
    5070:	d122      	bne.n	50b8 <usbd_event_transfer_ctrl+0x5c>
		switch (p_event->data.eptransfer.status) {
    5072:	78e1      	ldrb	r1, [r4, #3]
    5074:	2900      	cmp	r1, #0
    5076:	f000 80d8 	beq.w	522a <usbd_event_transfer_ctrl+0x1ce>
    507a:	2901      	cmp	r1, #1
    507c:	f040 815c 	bne.w	5338 <usbd_event_transfer_ctrl+0x2dc>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    5080:	2200      	movs	r2, #0
    5082:	2300      	movs	r3, #0
    5084:	a901      	add	r1, sp, #4
    5086:	48b6      	ldr	r0, [pc, #728]	; (5360 <usbd_event_transfer_ctrl+0x304>)
    5088:	f004 fe16 	bl	9cb8 <k_mem_slab_alloc>
    508c:	2800      	cmp	r0, #0
    508e:	f040 8089 	bne.w	51a4 <usbd_event_transfer_ctrl+0x148>
	ev = (struct usbd_event *)block.data;
    5092:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    5094:	6064      	str	r4, [r4, #4]
			if (!ev) {
    5096:	2c00      	cmp	r4, #0
    5098:	f000 815f 	beq.w	535a <usbd_event_transfer_ctrl+0x2fe>
			ep_ctx->read_pending = true;
    509c:	2301      	movs	r3, #1
    509e:	776b      	strb	r3, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    50a0:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    50a2:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    50a4:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    50a6:	4621      	mov	r1, r4
    50a8:	48ae      	ldr	r0, [pc, #696]	; (5364 <usbd_event_transfer_ctrl+0x308>)
    50aa:	f008 ff13 	bl	ded4 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    50ae:	49ae      	ldr	r1, [pc, #696]	; (5368 <usbd_event_transfer_ctrl+0x30c>)
    50b0:	48ae      	ldr	r0, [pc, #696]	; (536c <usbd_event_transfer_ctrl+0x310>)
    50b2:	f008 ff30 	bl	df16 <k_work_submit_to_queue>
}
    50b6:	e150      	b.n	535a <usbd_event_transfer_ctrl+0x2fe>
		switch (p_event->data.eptransfer.status) {
    50b8:	78e1      	ldrb	r1, [r4, #3]
    50ba:	b1a1      	cbz	r1, 50e6 <usbd_event_transfer_ctrl+0x8a>
    50bc:	2903      	cmp	r1, #3
    50be:	f000 814c 	beq.w	535a <usbd_event_transfer_ctrl+0x2fe>
    50c2:	4aab      	ldr	r2, [pc, #684]	; (5370 <usbd_event_transfer_ctrl+0x314>)
    50c4:	4bab      	ldr	r3, [pc, #684]	; (5374 <usbd_event_transfer_ctrl+0x318>)
    50c6:	1ad2      	subs	r2, r2, r3
    50c8:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    50ca:	f04f 0300 	mov.w	r3, #0
    50ce:	2001      	movs	r0, #1
    50d0:	f360 0302 	bfi	r3, r0, #0, #3
    50d4:	f36f 03c5 	bfc	r3, #3, #3
    50d8:	f362 138f 	bfi	r3, r2, #6, #10
    50dc:	4632      	mov	r2, r6
    50de:	48a6      	ldr	r0, [pc, #664]	; (5378 <usbd_event_transfer_ctrl+0x31c>)
    50e0:	f7fc fb30 	bl	1744 <log_2>
    50e4:	e139      	b.n	535a <usbd_event_transfer_ctrl+0x2fe>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    50e6:	2200      	movs	r2, #0
    50e8:	2300      	movs	r3, #0
    50ea:	a901      	add	r1, sp, #4
    50ec:	489c      	ldr	r0, [pc, #624]	; (5360 <usbd_event_transfer_ctrl+0x304>)
    50ee:	f004 fde3 	bl	9cb8 <k_mem_slab_alloc>
    50f2:	b9a0      	cbnz	r0, 511e <usbd_event_transfer_ctrl+0xc2>
	ev = (struct usbd_event *)block.data;
    50f4:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    50f6:	6064      	str	r4, [r4, #4]
			if (!ev) {
    50f8:	2c00      	cmp	r4, #0
    50fa:	f000 812e 	beq.w	535a <usbd_event_transfer_ctrl+0x2fe>
			ep_ctx->write_in_progress = false;
    50fe:	2300      	movs	r3, #0
    5100:	77ab      	strb	r3, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    5102:	2301      	movs	r3, #1
    5104:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    5106:	2303      	movs	r3, #3
    5108:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    510a:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    510c:	4621      	mov	r1, r4
    510e:	4895      	ldr	r0, [pc, #596]	; (5364 <usbd_event_transfer_ctrl+0x308>)
    5110:	f008 fee0 	bl	ded4 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    5114:	4994      	ldr	r1, [pc, #592]	; (5368 <usbd_event_transfer_ctrl+0x30c>)
    5116:	4895      	ldr	r0, [pc, #596]	; (536c <usbd_event_transfer_ctrl+0x310>)
    5118:	f008 fefd 	bl	df16 <k_work_submit_to_queue>
}
    511c:	e11d      	b.n	535a <usbd_event_transfer_ctrl+0x2fe>
    511e:	4b94      	ldr	r3, [pc, #592]	; (5370 <usbd_event_transfer_ctrl+0x314>)
    5120:	4a94      	ldr	r2, [pc, #592]	; (5374 <usbd_event_transfer_ctrl+0x318>)
    5122:	1a9b      	subs	r3, r3, r2
    5124:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    5126:	f04f 0100 	mov.w	r1, #0
    512a:	2201      	movs	r2, #1
    512c:	f362 0102 	bfi	r1, r2, #0, #3
    5130:	f36f 01c5 	bfc	r1, #3, #3
    5134:	f363 118f 	bfi	r1, r3, #6, #10
    5138:	4890      	ldr	r0, [pc, #576]	; (537c <usbd_event_transfer_ctrl+0x320>)
    513a:	f7fc fb3f 	bl	17bc <log_0>
static inline void usbd_evt_flush(void)
    513e:	e000      	b.n	5142 <usbd_event_transfer_ctrl+0xe6>
	} while (ev != NULL);
    5140:	b164      	cbz	r4, 515c <usbd_event_transfer_ctrl+0x100>
    5142:	2200      	movs	r2, #0
    5144:	2300      	movs	r3, #0
    5146:	4887      	ldr	r0, [pc, #540]	; (5364 <usbd_event_transfer_ctrl+0x308>)
    5148:	f004 ffbe 	bl	a0c8 <z_impl_k_queue_get>
		if (ev) {
    514c:	4604      	mov	r4, r0
    514e:	2800      	cmp	r0, #0
    5150:	d0f6      	beq.n	5140 <usbd_event_transfer_ctrl+0xe4>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    5152:	1d01      	adds	r1, r0, #4
    5154:	4882      	ldr	r0, [pc, #520]	; (5360 <usbd_event_transfer_ctrl+0x304>)
    5156:	f008 fd9a 	bl	dc8e <k_mem_slab_free>
}
    515a:	e7f1      	b.n	5140 <usbd_event_transfer_ctrl+0xe4>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    515c:	2200      	movs	r2, #0
    515e:	2300      	movs	r3, #0
    5160:	a901      	add	r1, sp, #4
    5162:	487f      	ldr	r0, [pc, #508]	; (5360 <usbd_event_transfer_ctrl+0x304>)
    5164:	f004 fda8 	bl	9cb8 <k_mem_slab_alloc>
    5168:	b180      	cbz	r0, 518c <usbd_event_transfer_ctrl+0x130>
    516a:	4b81      	ldr	r3, [pc, #516]	; (5370 <usbd_event_transfer_ctrl+0x314>)
    516c:	4a81      	ldr	r2, [pc, #516]	; (5374 <usbd_event_transfer_ctrl+0x318>)
    516e:	1a9b      	subs	r3, r3, r2
    5170:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    5172:	f04f 0100 	mov.w	r1, #0
    5176:	2201      	movs	r2, #1
    5178:	f362 0102 	bfi	r1, r2, #0, #3
    517c:	f36f 01c5 	bfc	r1, #3, #3
    5180:	f363 118f 	bfi	r1, r3, #6, #10
    5184:	487e      	ldr	r0, [pc, #504]	; (5380 <usbd_event_transfer_ctrl+0x324>)
    5186:	f7fc fb19 	bl	17bc <log_0>
			return NULL;
    518a:	e7b5      	b.n	50f8 <usbd_event_transfer_ctrl+0x9c>
		ev = (struct usbd_event *)block.data;
    518c:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    518e:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    5190:	2304      	movs	r3, #4
    5192:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    5194:	4873      	ldr	r0, [pc, #460]	; (5364 <usbd_event_transfer_ctrl+0x308>)
    5196:	f008 fe9d 	bl	ded4 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    519a:	4973      	ldr	r1, [pc, #460]	; (5368 <usbd_event_transfer_ctrl+0x30c>)
    519c:	4873      	ldr	r0, [pc, #460]	; (536c <usbd_event_transfer_ctrl+0x310>)
    519e:	f008 feba 	bl	df16 <k_work_submit_to_queue>
		return NULL;
    51a2:	e7a9      	b.n	50f8 <usbd_event_transfer_ctrl+0x9c>
    51a4:	4b72      	ldr	r3, [pc, #456]	; (5370 <usbd_event_transfer_ctrl+0x314>)
    51a6:	4a73      	ldr	r2, [pc, #460]	; (5374 <usbd_event_transfer_ctrl+0x318>)
    51a8:	1a9b      	subs	r3, r3, r2
    51aa:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    51ac:	f04f 0100 	mov.w	r1, #0
    51b0:	2201      	movs	r2, #1
    51b2:	f362 0102 	bfi	r1, r2, #0, #3
    51b6:	f36f 01c5 	bfc	r1, #3, #3
    51ba:	f363 118f 	bfi	r1, r3, #6, #10
    51be:	486f      	ldr	r0, [pc, #444]	; (537c <usbd_event_transfer_ctrl+0x320>)
    51c0:	f7fc fafc 	bl	17bc <log_0>
static inline void usbd_evt_flush(void)
    51c4:	e004      	b.n	51d0 <usbd_event_transfer_ctrl+0x174>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    51c6:	1d01      	adds	r1, r0, #4
    51c8:	4865      	ldr	r0, [pc, #404]	; (5360 <usbd_event_transfer_ctrl+0x304>)
    51ca:	f008 fd60 	bl	dc8e <k_mem_slab_free>
	} while (ev != NULL);
    51ce:	b144      	cbz	r4, 51e2 <usbd_event_transfer_ctrl+0x186>
    51d0:	2200      	movs	r2, #0
    51d2:	2300      	movs	r3, #0
    51d4:	4863      	ldr	r0, [pc, #396]	; (5364 <usbd_event_transfer_ctrl+0x308>)
    51d6:	f004 ff77 	bl	a0c8 <z_impl_k_queue_get>
		if (ev) {
    51da:	4604      	mov	r4, r0
    51dc:	2800      	cmp	r0, #0
    51de:	d1f2      	bne.n	51c6 <usbd_event_transfer_ctrl+0x16a>
    51e0:	e7f5      	b.n	51ce <usbd_event_transfer_ctrl+0x172>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    51e2:	2200      	movs	r2, #0
    51e4:	2300      	movs	r3, #0
    51e6:	a901      	add	r1, sp, #4
    51e8:	485d      	ldr	r0, [pc, #372]	; (5360 <usbd_event_transfer_ctrl+0x304>)
    51ea:	f004 fd65 	bl	9cb8 <k_mem_slab_alloc>
    51ee:	b180      	cbz	r0, 5212 <usbd_event_transfer_ctrl+0x1b6>
    51f0:	4b5f      	ldr	r3, [pc, #380]	; (5370 <usbd_event_transfer_ctrl+0x314>)
    51f2:	4a60      	ldr	r2, [pc, #384]	; (5374 <usbd_event_transfer_ctrl+0x318>)
    51f4:	1a9b      	subs	r3, r3, r2
    51f6:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    51f8:	f04f 0100 	mov.w	r1, #0
    51fc:	2201      	movs	r2, #1
    51fe:	f362 0102 	bfi	r1, r2, #0, #3
    5202:	f36f 01c5 	bfc	r1, #3, #3
    5206:	f363 118f 	bfi	r1, r3, #6, #10
    520a:	485d      	ldr	r0, [pc, #372]	; (5380 <usbd_event_transfer_ctrl+0x324>)
    520c:	f7fc fad6 	bl	17bc <log_0>
			return NULL;
    5210:	e741      	b.n	5096 <usbd_event_transfer_ctrl+0x3a>
		ev = (struct usbd_event *)block.data;
    5212:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    5214:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    5216:	2304      	movs	r3, #4
    5218:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    521a:	4852      	ldr	r0, [pc, #328]	; (5364 <usbd_event_transfer_ctrl+0x308>)
    521c:	f008 fe5a 	bl	ded4 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    5220:	4951      	ldr	r1, [pc, #324]	; (5368 <usbd_event_transfer_ctrl+0x30c>)
    5222:	4852      	ldr	r0, [pc, #328]	; (536c <usbd_event_transfer_ctrl+0x310>)
    5224:	f008 fe77 	bl	df16 <k_work_submit_to_queue>
		return NULL;
    5228:	e735      	b.n	5096 <usbd_event_transfer_ctrl+0x3a>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    522a:	2200      	movs	r2, #0
    522c:	2300      	movs	r3, #0
    522e:	a901      	add	r1, sp, #4
    5230:	484b      	ldr	r0, [pc, #300]	; (5360 <usbd_event_transfer_ctrl+0x304>)
    5232:	f004 fd41 	bl	9cb8 <k_mem_slab_alloc>
    5236:	bb20      	cbnz	r0, 5282 <usbd_event_transfer_ctrl+0x226>
	ev = (struct usbd_event *)block.data;
    5238:	9e01      	ldr	r6, [sp, #4]
	ev->block = block;
    523a:	6076      	str	r6, [r6, #4]
			if (!ev) {
    523c:	2e00      	cmp	r6, #0
    523e:	f000 808c 	beq.w	535a <usbd_event_transfer_ctrl+0x2fe>
			ev->evt_type = USBD_EVT_EP;
    5242:	2301      	movs	r3, #1
    5244:	7433      	strb	r3, [r6, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    5246:	2302      	movs	r3, #2
    5248:	7333      	strb	r3, [r6, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    524a:	60b5      	str	r5, [r6, #8]
			err_code = nrfx_usbd_ep_status_get(
    524c:	f105 010c 	add.w	r1, r5, #12
    5250:	78a0      	ldrb	r0, [r4, #2]
    5252:	f003 fa59 	bl	8708 <nrfx_usbd_ep_status_get>
			if (err_code != NRFX_USBD_EP_OK) {
    5256:	4601      	mov	r1, r0
    5258:	2800      	cmp	r0, #0
    525a:	d155      	bne.n	5308 <usbd_event_transfer_ctrl+0x2ac>
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    525c:	4b49      	ldr	r3, [pc, #292]	; (5384 <usbd_event_transfer_ctrl+0x328>)
    525e:	f8b3 328c 	ldrh.w	r3, [r3, #652]	; 0x28c
    5262:	68ea      	ldr	r2, [r5, #12]
    5264:	4293      	cmp	r3, r2
    5266:	d860      	bhi.n	532a <usbd_event_transfer_ctrl+0x2ce>
				ctx->ctrl_read_len = 0U;
    5268:	4b46      	ldr	r3, [pc, #280]	; (5384 <usbd_event_transfer_ctrl+0x328>)
    526a:	2200      	movs	r2, #0
    526c:	f8a3 228c 	strh.w	r2, [r3, #652]	; 0x28c
	k_fifo_put(&usbd_evt_fifo, ev);
    5270:	4631      	mov	r1, r6
    5272:	483c      	ldr	r0, [pc, #240]	; (5364 <usbd_event_transfer_ctrl+0x308>)
    5274:	f008 fe2e 	bl	ded4 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    5278:	493b      	ldr	r1, [pc, #236]	; (5368 <usbd_event_transfer_ctrl+0x30c>)
    527a:	483c      	ldr	r0, [pc, #240]	; (536c <usbd_event_transfer_ctrl+0x310>)
    527c:	f008 fe4b 	bl	df16 <k_work_submit_to_queue>
}
    5280:	e06b      	b.n	535a <usbd_event_transfer_ctrl+0x2fe>
    5282:	4b3b      	ldr	r3, [pc, #236]	; (5370 <usbd_event_transfer_ctrl+0x314>)
    5284:	4a3b      	ldr	r2, [pc, #236]	; (5374 <usbd_event_transfer_ctrl+0x318>)
    5286:	1a9b      	subs	r3, r3, r2
    5288:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    528a:	f04f 0100 	mov.w	r1, #0
    528e:	2201      	movs	r2, #1
    5290:	f362 0102 	bfi	r1, r2, #0, #3
    5294:	f36f 01c5 	bfc	r1, #3, #3
    5298:	f363 118f 	bfi	r1, r3, #6, #10
    529c:	4837      	ldr	r0, [pc, #220]	; (537c <usbd_event_transfer_ctrl+0x320>)
    529e:	f7fc fa8d 	bl	17bc <log_0>
static inline void usbd_evt_flush(void)
    52a2:	e004      	b.n	52ae <usbd_event_transfer_ctrl+0x252>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    52a4:	1d01      	adds	r1, r0, #4
    52a6:	482e      	ldr	r0, [pc, #184]	; (5360 <usbd_event_transfer_ctrl+0x304>)
    52a8:	f008 fcf1 	bl	dc8e <k_mem_slab_free>
	} while (ev != NULL);
    52ac:	b146      	cbz	r6, 52c0 <usbd_event_transfer_ctrl+0x264>
    52ae:	2200      	movs	r2, #0
    52b0:	2300      	movs	r3, #0
    52b2:	482c      	ldr	r0, [pc, #176]	; (5364 <usbd_event_transfer_ctrl+0x308>)
    52b4:	f004 ff08 	bl	a0c8 <z_impl_k_queue_get>
		if (ev) {
    52b8:	4606      	mov	r6, r0
    52ba:	2800      	cmp	r0, #0
    52bc:	d1f2      	bne.n	52a4 <usbd_event_transfer_ctrl+0x248>
    52be:	e7f5      	b.n	52ac <usbd_event_transfer_ctrl+0x250>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    52c0:	2200      	movs	r2, #0
    52c2:	2300      	movs	r3, #0
    52c4:	a901      	add	r1, sp, #4
    52c6:	4826      	ldr	r0, [pc, #152]	; (5360 <usbd_event_transfer_ctrl+0x304>)
    52c8:	f004 fcf6 	bl	9cb8 <k_mem_slab_alloc>
    52cc:	b180      	cbz	r0, 52f0 <usbd_event_transfer_ctrl+0x294>
    52ce:	4b28      	ldr	r3, [pc, #160]	; (5370 <usbd_event_transfer_ctrl+0x314>)
    52d0:	4a28      	ldr	r2, [pc, #160]	; (5374 <usbd_event_transfer_ctrl+0x318>)
    52d2:	1a9b      	subs	r3, r3, r2
    52d4:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    52d6:	f04f 0100 	mov.w	r1, #0
    52da:	2201      	movs	r2, #1
    52dc:	f362 0102 	bfi	r1, r2, #0, #3
    52e0:	f36f 01c5 	bfc	r1, #3, #3
    52e4:	f363 118f 	bfi	r1, r3, #6, #10
    52e8:	4825      	ldr	r0, [pc, #148]	; (5380 <usbd_event_transfer_ctrl+0x324>)
    52ea:	f7fc fa67 	bl	17bc <log_0>
			return NULL;
    52ee:	e7a5      	b.n	523c <usbd_event_transfer_ctrl+0x1e0>
		ev = (struct usbd_event *)block.data;
    52f0:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    52f2:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    52f4:	2304      	movs	r3, #4
    52f6:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    52f8:	481a      	ldr	r0, [pc, #104]	; (5364 <usbd_event_transfer_ctrl+0x308>)
    52fa:	f008 fdeb 	bl	ded4 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    52fe:	491a      	ldr	r1, [pc, #104]	; (5368 <usbd_event_transfer_ctrl+0x30c>)
    5300:	481a      	ldr	r0, [pc, #104]	; (536c <usbd_event_transfer_ctrl+0x310>)
    5302:	f008 fe08 	bl	df16 <k_work_submit_to_queue>
		return NULL;
    5306:	e799      	b.n	523c <usbd_event_transfer_ctrl+0x1e0>
    5308:	4b19      	ldr	r3, [pc, #100]	; (5370 <usbd_event_transfer_ctrl+0x314>)
    530a:	4a1a      	ldr	r2, [pc, #104]	; (5374 <usbd_event_transfer_ctrl+0x318>)
    530c:	1a9b      	subs	r3, r3, r2
    530e:	08db      	lsrs	r3, r3, #3
				LOG_ERR("_ep_status_get failed! Code: %d",
    5310:	f04f 0200 	mov.w	r2, #0
    5314:	2001      	movs	r0, #1
    5316:	f360 0202 	bfi	r2, r0, #0, #3
    531a:	f36f 02c5 	bfc	r2, #3, #3
    531e:	f363 128f 	bfi	r2, r3, #6, #10
    5322:	4819      	ldr	r0, [pc, #100]	; (5388 <usbd_event_transfer_ctrl+0x32c>)
    5324:	f7fc f9d8 	bl	16d8 <log_1>
    5328:	e798      	b.n	525c <usbd_event_transfer_ctrl+0x200>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    532a:	1a9b      	subs	r3, r3, r2
    532c:	4a15      	ldr	r2, [pc, #84]	; (5384 <usbd_event_transfer_ctrl+0x328>)
    532e:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
    5332:	f003 fd9f 	bl	8e74 <nrfx_usbd_setup_data_clear>
    5336:	e79b      	b.n	5270 <usbd_event_transfer_ctrl+0x214>
    5338:	4a0d      	ldr	r2, [pc, #52]	; (5370 <usbd_event_transfer_ctrl+0x314>)
    533a:	4b0e      	ldr	r3, [pc, #56]	; (5374 <usbd_event_transfer_ctrl+0x318>)
    533c:	1ad2      	subs	r2, r2, r3
    533e:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    5340:	f04f 0300 	mov.w	r3, #0
    5344:	2001      	movs	r0, #1
    5346:	f360 0302 	bfi	r3, r0, #0, #3
    534a:	f36f 03c5 	bfc	r3, #3, #3
    534e:	f362 138f 	bfi	r3, r2, #6, #10
    5352:	4632      	mov	r2, r6
    5354:	4808      	ldr	r0, [pc, #32]	; (5378 <usbd_event_transfer_ctrl+0x31c>)
    5356:	f7fc f9f5 	bl	1744 <log_2>
}
    535a:	b002      	add	sp, #8
    535c:	bd70      	pop	{r4, r5, r6, pc}
    535e:	bf00      	nop
    5360:	200001bc 	.word	0x200001bc
    5364:	20000274 	.word	0x20000274
    5368:	20001a40 	.word	0x20001a40
    536c:	20000520 	.word	0x20000520
    5370:	0000e884 	.word	0x0000e884
    5374:	0000e82c 	.word	0x0000e82c
    5378:	0000f5c8 	.word	0x0000f5c8
    537c:	0000f4c8 	.word	0x0000f4c8
    5380:	0000f4e8 	.word	0x0000f4e8
    5384:	20001a18 	.word	0x20001a18
    5388:	0000f5f4 	.word	0x0000f5f4

0000538c <usbd_event_transfer_data>:
{
    538c:	b570      	push	{r4, r5, r6, lr}
    538e:	b082      	sub	sp, #8
    5390:	4604      	mov	r4, r0
		endpoint_ctx(p_event->data.eptransfer.ep);
    5392:	7886      	ldrb	r6, [r0, #2]
    5394:	4630      	mov	r0, r6
    5396:	f7ff fac5 	bl	4924 <endpoint_ctx>
    539a:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    539c:	f016 0f80 	tst.w	r6, #128	; 0x80
    53a0:	d122      	bne.n	53e8 <usbd_event_transfer_data+0x5c>
		switch (p_event->data.eptransfer.status) {
    53a2:	78e1      	ldrb	r1, [r4, #3]
    53a4:	2900      	cmp	r1, #0
    53a6:	f000 80d8 	beq.w	555a <usbd_event_transfer_data+0x1ce>
    53aa:	2901      	cmp	r1, #1
    53ac:	f040 815d 	bne.w	566a <usbd_event_transfer_data+0x2de>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    53b0:	2200      	movs	r2, #0
    53b2:	2300      	movs	r3, #0
    53b4:	a901      	add	r1, sp, #4
    53b6:	48b6      	ldr	r0, [pc, #728]	; (5690 <usbd_event_transfer_data+0x304>)
    53b8:	f004 fc7e 	bl	9cb8 <k_mem_slab_alloc>
    53bc:	2800      	cmp	r0, #0
    53be:	f040 8089 	bne.w	54d4 <usbd_event_transfer_data+0x148>
	ev = (struct usbd_event *)block.data;
    53c2:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    53c4:	6064      	str	r4, [r4, #4]
			if (!ev) {
    53c6:	2c00      	cmp	r4, #0
    53c8:	f000 8160 	beq.w	568c <usbd_event_transfer_data+0x300>
			ep_ctx->read_pending = true;
    53cc:	2301      	movs	r3, #1
    53ce:	776b      	strb	r3, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    53d0:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    53d2:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    53d4:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    53d6:	4621      	mov	r1, r4
    53d8:	48ae      	ldr	r0, [pc, #696]	; (5694 <usbd_event_transfer_data+0x308>)
    53da:	f008 fd7b 	bl	ded4 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    53de:	49ae      	ldr	r1, [pc, #696]	; (5698 <usbd_event_transfer_data+0x30c>)
    53e0:	48ae      	ldr	r0, [pc, #696]	; (569c <usbd_event_transfer_data+0x310>)
    53e2:	f008 fd98 	bl	df16 <k_work_submit_to_queue>
}
    53e6:	e151      	b.n	568c <usbd_event_transfer_data+0x300>
		switch (p_event->data.eptransfer.status) {
    53e8:	78e1      	ldrb	r1, [r4, #3]
    53ea:	b1a1      	cbz	r1, 5416 <usbd_event_transfer_data+0x8a>
    53ec:	2903      	cmp	r1, #3
    53ee:	f000 814d 	beq.w	568c <usbd_event_transfer_data+0x300>
    53f2:	4aab      	ldr	r2, [pc, #684]	; (56a0 <usbd_event_transfer_data+0x314>)
    53f4:	4bab      	ldr	r3, [pc, #684]	; (56a4 <usbd_event_transfer_data+0x318>)
    53f6:	1ad2      	subs	r2, r2, r3
    53f8:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    53fa:	f04f 0300 	mov.w	r3, #0
    53fe:	2001      	movs	r0, #1
    5400:	f360 0302 	bfi	r3, r0, #0, #3
    5404:	f36f 03c5 	bfc	r3, #3, #3
    5408:	f362 138f 	bfi	r3, r2, #6, #10
    540c:	4632      	mov	r2, r6
    540e:	48a6      	ldr	r0, [pc, #664]	; (56a8 <usbd_event_transfer_data+0x31c>)
    5410:	f7fc f998 	bl	1744 <log_2>
    5414:	e13a      	b.n	568c <usbd_event_transfer_data+0x300>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    5416:	2200      	movs	r2, #0
    5418:	2300      	movs	r3, #0
    541a:	a901      	add	r1, sp, #4
    541c:	489c      	ldr	r0, [pc, #624]	; (5690 <usbd_event_transfer_data+0x304>)
    541e:	f004 fc4b 	bl	9cb8 <k_mem_slab_alloc>
    5422:	b9a0      	cbnz	r0, 544e <usbd_event_transfer_data+0xc2>
	ev = (struct usbd_event *)block.data;
    5424:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    5426:	6064      	str	r4, [r4, #4]
			if (!ev) {
    5428:	2c00      	cmp	r4, #0
    542a:	f000 812f 	beq.w	568c <usbd_event_transfer_data+0x300>
			ep_ctx->write_in_progress = false;
    542e:	2300      	movs	r3, #0
    5430:	77ab      	strb	r3, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    5432:	2301      	movs	r3, #1
    5434:	7423      	strb	r3, [r4, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    5436:	2303      	movs	r3, #3
    5438:	7323      	strb	r3, [r4, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    543a:	60a5      	str	r5, [r4, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    543c:	4621      	mov	r1, r4
    543e:	4895      	ldr	r0, [pc, #596]	; (5694 <usbd_event_transfer_data+0x308>)
    5440:	f008 fd48 	bl	ded4 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    5444:	4994      	ldr	r1, [pc, #592]	; (5698 <usbd_event_transfer_data+0x30c>)
    5446:	4895      	ldr	r0, [pc, #596]	; (569c <usbd_event_transfer_data+0x310>)
    5448:	f008 fd65 	bl	df16 <k_work_submit_to_queue>
}
    544c:	e11e      	b.n	568c <usbd_event_transfer_data+0x300>
    544e:	4b94      	ldr	r3, [pc, #592]	; (56a0 <usbd_event_transfer_data+0x314>)
    5450:	4a94      	ldr	r2, [pc, #592]	; (56a4 <usbd_event_transfer_data+0x318>)
    5452:	1a9b      	subs	r3, r3, r2
    5454:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    5456:	f04f 0100 	mov.w	r1, #0
    545a:	2201      	movs	r2, #1
    545c:	f362 0102 	bfi	r1, r2, #0, #3
    5460:	f36f 01c5 	bfc	r1, #3, #3
    5464:	f363 118f 	bfi	r1, r3, #6, #10
    5468:	4890      	ldr	r0, [pc, #576]	; (56ac <usbd_event_transfer_data+0x320>)
    546a:	f7fc f9a7 	bl	17bc <log_0>
static inline void usbd_evt_flush(void)
    546e:	e000      	b.n	5472 <usbd_event_transfer_data+0xe6>
	} while (ev != NULL);
    5470:	b164      	cbz	r4, 548c <usbd_event_transfer_data+0x100>
    5472:	2200      	movs	r2, #0
    5474:	2300      	movs	r3, #0
    5476:	4887      	ldr	r0, [pc, #540]	; (5694 <usbd_event_transfer_data+0x308>)
    5478:	f004 fe26 	bl	a0c8 <z_impl_k_queue_get>
		if (ev) {
    547c:	4604      	mov	r4, r0
    547e:	2800      	cmp	r0, #0
    5480:	d0f6      	beq.n	5470 <usbd_event_transfer_data+0xe4>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    5482:	1d01      	adds	r1, r0, #4
    5484:	4882      	ldr	r0, [pc, #520]	; (5690 <usbd_event_transfer_data+0x304>)
    5486:	f008 fc02 	bl	dc8e <k_mem_slab_free>
}
    548a:	e7f1      	b.n	5470 <usbd_event_transfer_data+0xe4>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    548c:	2200      	movs	r2, #0
    548e:	2300      	movs	r3, #0
    5490:	a901      	add	r1, sp, #4
    5492:	487f      	ldr	r0, [pc, #508]	; (5690 <usbd_event_transfer_data+0x304>)
    5494:	f004 fc10 	bl	9cb8 <k_mem_slab_alloc>
    5498:	b180      	cbz	r0, 54bc <usbd_event_transfer_data+0x130>
    549a:	4b81      	ldr	r3, [pc, #516]	; (56a0 <usbd_event_transfer_data+0x314>)
    549c:	4a81      	ldr	r2, [pc, #516]	; (56a4 <usbd_event_transfer_data+0x318>)
    549e:	1a9b      	subs	r3, r3, r2
    54a0:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    54a2:	f04f 0100 	mov.w	r1, #0
    54a6:	2201      	movs	r2, #1
    54a8:	f362 0102 	bfi	r1, r2, #0, #3
    54ac:	f36f 01c5 	bfc	r1, #3, #3
    54b0:	f363 118f 	bfi	r1, r3, #6, #10
    54b4:	487e      	ldr	r0, [pc, #504]	; (56b0 <usbd_event_transfer_data+0x324>)
    54b6:	f7fc f981 	bl	17bc <log_0>
			return NULL;
    54ba:	e7b5      	b.n	5428 <usbd_event_transfer_data+0x9c>
		ev = (struct usbd_event *)block.data;
    54bc:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    54be:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    54c0:	2304      	movs	r3, #4
    54c2:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    54c4:	4873      	ldr	r0, [pc, #460]	; (5694 <usbd_event_transfer_data+0x308>)
    54c6:	f008 fd05 	bl	ded4 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    54ca:	4973      	ldr	r1, [pc, #460]	; (5698 <usbd_event_transfer_data+0x30c>)
    54cc:	4873      	ldr	r0, [pc, #460]	; (569c <usbd_event_transfer_data+0x310>)
    54ce:	f008 fd22 	bl	df16 <k_work_submit_to_queue>
		return NULL;
    54d2:	e7a9      	b.n	5428 <usbd_event_transfer_data+0x9c>
    54d4:	4b72      	ldr	r3, [pc, #456]	; (56a0 <usbd_event_transfer_data+0x314>)
    54d6:	4a73      	ldr	r2, [pc, #460]	; (56a4 <usbd_event_transfer_data+0x318>)
    54d8:	1a9b      	subs	r3, r3, r2
    54da:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    54dc:	f04f 0100 	mov.w	r1, #0
    54e0:	2201      	movs	r2, #1
    54e2:	f362 0102 	bfi	r1, r2, #0, #3
    54e6:	f36f 01c5 	bfc	r1, #3, #3
    54ea:	f363 118f 	bfi	r1, r3, #6, #10
    54ee:	486f      	ldr	r0, [pc, #444]	; (56ac <usbd_event_transfer_data+0x320>)
    54f0:	f7fc f964 	bl	17bc <log_0>
static inline void usbd_evt_flush(void)
    54f4:	e004      	b.n	5500 <usbd_event_transfer_data+0x174>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    54f6:	1d01      	adds	r1, r0, #4
    54f8:	4865      	ldr	r0, [pc, #404]	; (5690 <usbd_event_transfer_data+0x304>)
    54fa:	f008 fbc8 	bl	dc8e <k_mem_slab_free>
	} while (ev != NULL);
    54fe:	b144      	cbz	r4, 5512 <usbd_event_transfer_data+0x186>
    5500:	2200      	movs	r2, #0
    5502:	2300      	movs	r3, #0
    5504:	4863      	ldr	r0, [pc, #396]	; (5694 <usbd_event_transfer_data+0x308>)
    5506:	f004 fddf 	bl	a0c8 <z_impl_k_queue_get>
		if (ev) {
    550a:	4604      	mov	r4, r0
    550c:	2800      	cmp	r0, #0
    550e:	d1f2      	bne.n	54f6 <usbd_event_transfer_data+0x16a>
    5510:	e7f5      	b.n	54fe <usbd_event_transfer_data+0x172>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    5512:	2200      	movs	r2, #0
    5514:	2300      	movs	r3, #0
    5516:	a901      	add	r1, sp, #4
    5518:	485d      	ldr	r0, [pc, #372]	; (5690 <usbd_event_transfer_data+0x304>)
    551a:	f004 fbcd 	bl	9cb8 <k_mem_slab_alloc>
    551e:	b180      	cbz	r0, 5542 <usbd_event_transfer_data+0x1b6>
    5520:	4b5f      	ldr	r3, [pc, #380]	; (56a0 <usbd_event_transfer_data+0x314>)
    5522:	4a60      	ldr	r2, [pc, #384]	; (56a4 <usbd_event_transfer_data+0x318>)
    5524:	1a9b      	subs	r3, r3, r2
    5526:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    5528:	f04f 0100 	mov.w	r1, #0
    552c:	2201      	movs	r2, #1
    552e:	f362 0102 	bfi	r1, r2, #0, #3
    5532:	f36f 01c5 	bfc	r1, #3, #3
    5536:	f363 118f 	bfi	r1, r3, #6, #10
    553a:	485d      	ldr	r0, [pc, #372]	; (56b0 <usbd_event_transfer_data+0x324>)
    553c:	f7fc f93e 	bl	17bc <log_0>
			return NULL;
    5540:	e741      	b.n	53c6 <usbd_event_transfer_data+0x3a>
		ev = (struct usbd_event *)block.data;
    5542:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    5544:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    5546:	2304      	movs	r3, #4
    5548:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    554a:	4852      	ldr	r0, [pc, #328]	; (5694 <usbd_event_transfer_data+0x308>)
    554c:	f008 fcc2 	bl	ded4 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    5550:	4951      	ldr	r1, [pc, #324]	; (5698 <usbd_event_transfer_data+0x30c>)
    5552:	4852      	ldr	r0, [pc, #328]	; (569c <usbd_event_transfer_data+0x310>)
    5554:	f008 fcdf 	bl	df16 <k_work_submit_to_queue>
		return NULL;
    5558:	e735      	b.n	53c6 <usbd_event_transfer_data+0x3a>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    555a:	2200      	movs	r2, #0
    555c:	2300      	movs	r3, #0
    555e:	a901      	add	r1, sp, #4
    5560:	484b      	ldr	r0, [pc, #300]	; (5690 <usbd_event_transfer_data+0x304>)
    5562:	f004 fba9 	bl	9cb8 <k_mem_slab_alloc>
    5566:	b9f0      	cbnz	r0, 55a6 <usbd_event_transfer_data+0x21a>
	ev = (struct usbd_event *)block.data;
    5568:	9e01      	ldr	r6, [sp, #4]
	ev->block = block;
    556a:	6076      	str	r6, [r6, #4]
			if (!ev) {
    556c:	2e00      	cmp	r6, #0
    556e:	f000 808d 	beq.w	568c <usbd_event_transfer_data+0x300>
				p_event->data.eptransfer.ep);
    5572:	78a3      	ldrb	r3, [r4, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    5574:	f994 2002 	ldrsb.w	r2, [r4, #2]
    5578:	2a00      	cmp	r2, #0
    557a:	db57      	blt.n	562c <usbd_event_transfer_data+0x2a0>
            ret = p_reg->EPIN[epnr].AMOUNT;
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    557c:	f013 0f08 	tst.w	r3, #8
    5580:	d067      	beq.n	5652 <usbd_event_transfer_data+0x2c6>
        {
            ret = p_reg->ISOOUT.AMOUNT;
    5582:	4b4c      	ldr	r3, [pc, #304]	; (56b4 <usbd_event_transfer_data+0x328>)
    5584:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
    5588:	60eb      	str	r3, [r5, #12]
			ev->evt_type = USBD_EVT_EP;
    558a:	2301      	movs	r3, #1
    558c:	7433      	strb	r3, [r6, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    558e:	2302      	movs	r3, #2
    5590:	7333      	strb	r3, [r6, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    5592:	60b5      	str	r5, [r6, #8]
	k_fifo_put(&usbd_evt_fifo, ev);
    5594:	4631      	mov	r1, r6
    5596:	483f      	ldr	r0, [pc, #252]	; (5694 <usbd_event_transfer_data+0x308>)
    5598:	f008 fc9c 	bl	ded4 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    559c:	493e      	ldr	r1, [pc, #248]	; (5698 <usbd_event_transfer_data+0x30c>)
    559e:	483f      	ldr	r0, [pc, #252]	; (569c <usbd_event_transfer_data+0x310>)
    55a0:	f008 fcb9 	bl	df16 <k_work_submit_to_queue>
}
    55a4:	e072      	b.n	568c <usbd_event_transfer_data+0x300>
    55a6:	4b3e      	ldr	r3, [pc, #248]	; (56a0 <usbd_event_transfer_data+0x314>)
    55a8:	4a3e      	ldr	r2, [pc, #248]	; (56a4 <usbd_event_transfer_data+0x318>)
    55aa:	1a9b      	subs	r3, r3, r2
    55ac:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    55ae:	f04f 0100 	mov.w	r1, #0
    55b2:	2201      	movs	r2, #1
    55b4:	f362 0102 	bfi	r1, r2, #0, #3
    55b8:	f36f 01c5 	bfc	r1, #3, #3
    55bc:	f363 118f 	bfi	r1, r3, #6, #10
    55c0:	483a      	ldr	r0, [pc, #232]	; (56ac <usbd_event_transfer_data+0x320>)
    55c2:	f7fc f8fb 	bl	17bc <log_0>
static inline void usbd_evt_flush(void)
    55c6:	e004      	b.n	55d2 <usbd_event_transfer_data+0x246>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    55c8:	1d01      	adds	r1, r0, #4
    55ca:	4831      	ldr	r0, [pc, #196]	; (5690 <usbd_event_transfer_data+0x304>)
    55cc:	f008 fb5f 	bl	dc8e <k_mem_slab_free>
	} while (ev != NULL);
    55d0:	b146      	cbz	r6, 55e4 <usbd_event_transfer_data+0x258>
    55d2:	2200      	movs	r2, #0
    55d4:	2300      	movs	r3, #0
    55d6:	482f      	ldr	r0, [pc, #188]	; (5694 <usbd_event_transfer_data+0x308>)
    55d8:	f004 fd76 	bl	a0c8 <z_impl_k_queue_get>
		if (ev) {
    55dc:	4606      	mov	r6, r0
    55de:	2800      	cmp	r0, #0
    55e0:	d1f2      	bne.n	55c8 <usbd_event_transfer_data+0x23c>
    55e2:	e7f5      	b.n	55d0 <usbd_event_transfer_data+0x244>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    55e4:	2200      	movs	r2, #0
    55e6:	2300      	movs	r3, #0
    55e8:	a901      	add	r1, sp, #4
    55ea:	4829      	ldr	r0, [pc, #164]	; (5690 <usbd_event_transfer_data+0x304>)
    55ec:	f004 fb64 	bl	9cb8 <k_mem_slab_alloc>
    55f0:	b180      	cbz	r0, 5614 <usbd_event_transfer_data+0x288>
    55f2:	4b2b      	ldr	r3, [pc, #172]	; (56a0 <usbd_event_transfer_data+0x314>)
    55f4:	4a2b      	ldr	r2, [pc, #172]	; (56a4 <usbd_event_transfer_data+0x318>)
    55f6:	1a9b      	subs	r3, r3, r2
    55f8:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    55fa:	f04f 0100 	mov.w	r1, #0
    55fe:	2201      	movs	r2, #1
    5600:	f362 0102 	bfi	r1, r2, #0, #3
    5604:	f36f 01c5 	bfc	r1, #3, #3
    5608:	f363 118f 	bfi	r1, r3, #6, #10
    560c:	4828      	ldr	r0, [pc, #160]	; (56b0 <usbd_event_transfer_data+0x324>)
    560e:	f7fc f8d5 	bl	17bc <log_0>
			return NULL;
    5612:	e7ab      	b.n	556c <usbd_event_transfer_data+0x1e0>
		ev = (struct usbd_event *)block.data;
    5614:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    5616:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    5618:	2304      	movs	r3, #4
    561a:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    561c:	481d      	ldr	r0, [pc, #116]	; (5694 <usbd_event_transfer_data+0x308>)
    561e:	f008 fc59 	bl	ded4 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    5622:	491d      	ldr	r1, [pc, #116]	; (5698 <usbd_event_transfer_data+0x30c>)
    5624:	481d      	ldr	r0, [pc, #116]	; (569c <usbd_event_transfer_data+0x310>)
    5626:	f008 fc76 	bl	df16 <k_work_submit_to_queue>
		return NULL;
    562a:	e79f      	b.n	556c <usbd_event_transfer_data+0x1e0>
        if (NRF_USBD_EPISO_CHECK(ep))
    562c:	f013 0f08 	tst.w	r3, #8
    5630:	d003      	beq.n	563a <usbd_event_transfer_data+0x2ae>
            ret = p_reg->ISOIN.AMOUNT;
    5632:	4b20      	ldr	r3, [pc, #128]	; (56b4 <usbd_event_transfer_data+0x328>)
    5634:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
    5638:	e7a6      	b.n	5588 <usbd_event_transfer_data+0x1fc>
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    563a:	f003 030f 	and.w	r3, r3, #15
            ret = p_reg->EPIN[epnr].AMOUNT;
    563e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    5642:	009b      	lsls	r3, r3, #2
    5644:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5648:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    564c:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    5650:	e79a      	b.n	5588 <usbd_event_transfer_data+0x1fc>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    5652:	f003 030f 	and.w	r3, r3, #15
            ret = p_reg->EPOUT[epnr].AMOUNT;
    5656:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    565a:	009b      	lsls	r3, r3, #2
    565c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5660:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    5664:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    5668:	e78e      	b.n	5588 <usbd_event_transfer_data+0x1fc>
    566a:	4a0d      	ldr	r2, [pc, #52]	; (56a0 <usbd_event_transfer_data+0x314>)
    566c:	4b0d      	ldr	r3, [pc, #52]	; (56a4 <usbd_event_transfer_data+0x318>)
    566e:	1ad2      	subs	r2, r2, r3
    5670:	08d2      	lsrs	r2, r2, #3
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    5672:	f04f 0300 	mov.w	r3, #0
    5676:	2001      	movs	r0, #1
    5678:	f360 0302 	bfi	r3, r0, #0, #3
    567c:	f36f 03c5 	bfc	r3, #3, #3
    5680:	f362 138f 	bfi	r3, r2, #6, #10
    5684:	4632      	mov	r2, r6
    5686:	4808      	ldr	r0, [pc, #32]	; (56a8 <usbd_event_transfer_data+0x31c>)
    5688:	f7fc f85c 	bl	1744 <log_2>
}
    568c:	b002      	add	sp, #8
    568e:	bd70      	pop	{r4, r5, r6, pc}
    5690:	200001bc 	.word	0x200001bc
    5694:	20000274 	.word	0x20000274
    5698:	20001a40 	.word	0x20001a40
    569c:	20000520 	.word	0x20000520
    56a0:	0000e884 	.word	0x0000e884
    56a4:	0000e82c 	.word	0x0000e82c
    56a8:	0000f5c8 	.word	0x0000f5c8
    56ac:	0000f4c8 	.word	0x0000f4c8
    56b0:	0000f4e8 	.word	0x0000f4e8
    56b4:	40027000 	.word	0x40027000

000056b8 <usbd_event_handler>:
{
    56b8:	b510      	push	{r4, lr}
    56ba:	b088      	sub	sp, #32
	struct usbd_event evt = {0};
    56bc:	2300      	movs	r3, #0
    56be:	9303      	str	r3, [sp, #12]
    56c0:	9304      	str	r3, [sp, #16]
    56c2:	9305      	str	r3, [sp, #20]
    56c4:	9306      	str	r3, [sp, #24]
    56c6:	9307      	str	r3, [sp, #28]
	switch (p_event->type) {
    56c8:	7803      	ldrb	r3, [r0, #0]
    56ca:	3b01      	subs	r3, #1
    56cc:	2b05      	cmp	r3, #5
    56ce:	d826      	bhi.n	571e <usbd_event_handler+0x66>
    56d0:	e8df f003 	tbb	[pc, r3]
    56d4:	2e270335 	.word	0x2e270335
    56d8:	3953      	.short	0x3953
		evt.evt_type = USBD_EVT_POWER;
    56da:	2300      	movs	r3, #0
    56dc:	f88d 301c 	strb.w	r3, [sp, #28]
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    56e0:	2303      	movs	r3, #3
    56e2:	f88d 3014 	strb.w	r3, [sp, #20]
	if (k_mem_slab_alloc(&fifo_elem_slab,
    56e6:	2200      	movs	r2, #0
    56e8:	2300      	movs	r3, #0
    56ea:	a901      	add	r1, sp, #4
    56ec:	4850      	ldr	r0, [pc, #320]	; (5830 <usbd_event_handler+0x178>)
    56ee:	f004 fae3 	bl	9cb8 <k_mem_slab_alloc>
    56f2:	2800      	cmp	r0, #0
    56f4:	d159      	bne.n	57aa <usbd_event_handler+0xf2>
	ev = (struct usbd_event *)block.data;
    56f6:	9c01      	ldr	r4, [sp, #4]
	ev->block = block;
    56f8:	6064      	str	r4, [r4, #4]
		if (!ev) {
    56fa:	b184      	cbz	r4, 571e <usbd_event_handler+0x66>
		ev->evt_type = evt.evt_type;
    56fc:	f89d 301c 	ldrb.w	r3, [sp, #28]
    5700:	7423      	strb	r3, [r4, #16]
		ev->evt = evt.evt;
    5702:	f104 0308 	add.w	r3, r4, #8
    5706:	9906      	ldr	r1, [sp, #24]
    5708:	9805      	ldr	r0, [sp, #20]
    570a:	e883 0003 	stmia.w	r3, {r0, r1}
	k_fifo_put(&usbd_evt_fifo, ev);
    570e:	4621      	mov	r1, r4
    5710:	4848      	ldr	r0, [pc, #288]	; (5834 <usbd_event_handler+0x17c>)
    5712:	f008 fbdf 	bl	ded4 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    5716:	4948      	ldr	r1, [pc, #288]	; (5838 <usbd_event_handler+0x180>)
    5718:	4848      	ldr	r0, [pc, #288]	; (583c <usbd_event_handler+0x184>)
    571a:	f008 fbfc 	bl	df16 <k_work_submit_to_queue>
}
    571e:	b008      	add	sp, #32
    5720:	bd10      	pop	{r4, pc}
		evt.evt_type = USBD_EVT_POWER;
    5722:	2300      	movs	r3, #0
    5724:	f88d 301c 	strb.w	r3, [sp, #28]
		evt.evt.pwr_evt.state = USBD_RESUMED;
    5728:	2304      	movs	r3, #4
    572a:	f88d 3014 	strb.w	r3, [sp, #20]
	if (put_evt) {
    572e:	e7da      	b.n	56e6 <usbd_event_handler+0x2e>
		evt.evt_type = USBD_EVT_POWER;
    5730:	2300      	movs	r3, #0
    5732:	f88d 301c 	strb.w	r3, [sp, #28]
		evt.evt.pwr_evt.state = USBD_RESUMED;
    5736:	2304      	movs	r3, #4
    5738:	f88d 3014 	strb.w	r3, [sp, #20]
	if (put_evt) {
    573c:	e7d3      	b.n	56e6 <usbd_event_handler+0x2e>
		evt.evt_type = USBD_EVT_RESET;
    573e:	2302      	movs	r3, #2
    5740:	f88d 301c 	strb.w	r3, [sp, #28]
	if (put_evt) {
    5744:	e7cf      	b.n	56e6 <usbd_event_handler+0x2e>
    5746:	4604      	mov	r4, r0
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    5748:	7880      	ldrb	r0, [r0, #2]
    574a:	f7ff f8eb 	bl	4924 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    574e:	7a83      	ldrb	r3, [r0, #10]
    5750:	2b01      	cmp	r3, #1
    5752:	d00e      	beq.n	5772 <usbd_event_handler+0xba>
    5754:	d805      	bhi.n	5762 <usbd_event_handler+0xaa>
    5756:	2b00      	cmp	r3, #0
    5758:	d1e1      	bne.n	571e <usbd_event_handler+0x66>
			usbd_event_transfer_ctrl(p_event);
    575a:	4620      	mov	r0, r4
    575c:	f7ff fc7e 	bl	505c <usbd_event_transfer_ctrl>
	if (put_evt) {
    5760:	e7dd      	b.n	571e <usbd_event_handler+0x66>
    5762:	3b02      	subs	r3, #2
    5764:	b2db      	uxtb	r3, r3
    5766:	2b01      	cmp	r3, #1
    5768:	d8d9      	bhi.n	571e <usbd_event_handler+0x66>
			usbd_event_transfer_data(p_event);
    576a:	4620      	mov	r0, r4
    576c:	f7ff fe0e 	bl	538c <usbd_event_transfer_data>
	if (put_evt) {
    5770:	e7d5      	b.n	571e <usbd_event_handler+0x66>
			usbd_event_transfer_data(p_event);
    5772:	4620      	mov	r0, r4
    5774:	f7ff fe0a 	bl	538c <usbd_event_transfer_data>
	if (put_evt) {
    5778:	e7d1      	b.n	571e <usbd_event_handler+0x66>
		nrfx_usbd_setup_get(&drv_setup);
    577a:	a801      	add	r0, sp, #4
    577c:	f003 fb4e 	bl	8e1c <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
    5780:	f89d 3005 	ldrb.w	r3, [sp, #5]
    5784:	2b05      	cmp	r3, #5
    5786:	d00a      	beq.n	579e <usbd_event_handler+0xe6>
				endpoint_ctx(NRF_USBD_EPOUT(0));
    5788:	2000      	movs	r0, #0
    578a:	f7ff f8cb 	bl	4924 <endpoint_ctx>
			evt.evt_type = USBD_EVT_EP;
    578e:	2301      	movs	r3, #1
    5790:	f88d 301c 	strb.w	r3, [sp, #28]
			evt.evt.ep_evt.ep = ep_ctx;
    5794:	9005      	str	r0, [sp, #20]
			evt.evt.ep_evt.evt_type = EP_EVT_SETUP_RECV;
    5796:	2300      	movs	r3, #0
    5798:	f88d 3018 	strb.w	r3, [sp, #24]
	if (put_evt) {
    579c:	e7a3      	b.n	56e6 <usbd_event_handler+0x2e>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
    579e:	f89d 3004 	ldrb.w	r3, [sp, #4]
    57a2:	f013 0f60 	tst.w	r3, #96	; 0x60
    57a6:	d0ba      	beq.n	571e <usbd_event_handler+0x66>
    57a8:	e7ee      	b.n	5788 <usbd_event_handler+0xd0>
    57aa:	4b25      	ldr	r3, [pc, #148]	; (5840 <usbd_event_handler+0x188>)
    57ac:	4a25      	ldr	r2, [pc, #148]	; (5844 <usbd_event_handler+0x18c>)
    57ae:	1a9b      	subs	r3, r3, r2
    57b0:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    57b2:	f04f 0100 	mov.w	r1, #0
    57b6:	2201      	movs	r2, #1
    57b8:	f362 0102 	bfi	r1, r2, #0, #3
    57bc:	f36f 01c5 	bfc	r1, #3, #3
    57c0:	f363 118f 	bfi	r1, r3, #6, #10
    57c4:	4820      	ldr	r0, [pc, #128]	; (5848 <usbd_event_handler+0x190>)
    57c6:	f7fb fff9 	bl	17bc <log_0>
static inline void usbd_evt_flush(void)
    57ca:	e004      	b.n	57d6 <usbd_event_handler+0x11e>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    57cc:	1d01      	adds	r1, r0, #4
    57ce:	4818      	ldr	r0, [pc, #96]	; (5830 <usbd_event_handler+0x178>)
    57d0:	f008 fa5d 	bl	dc8e <k_mem_slab_free>
	} while (ev != NULL);
    57d4:	b144      	cbz	r4, 57e8 <usbd_event_handler+0x130>
    57d6:	2200      	movs	r2, #0
    57d8:	2300      	movs	r3, #0
    57da:	4816      	ldr	r0, [pc, #88]	; (5834 <usbd_event_handler+0x17c>)
    57dc:	f004 fc74 	bl	a0c8 <z_impl_k_queue_get>
		if (ev) {
    57e0:	4604      	mov	r4, r0
    57e2:	2800      	cmp	r0, #0
    57e4:	d1f2      	bne.n	57cc <usbd_event_handler+0x114>
    57e6:	e7f5      	b.n	57d4 <usbd_event_handler+0x11c>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    57e8:	2200      	movs	r2, #0
    57ea:	2300      	movs	r3, #0
    57ec:	a901      	add	r1, sp, #4
    57ee:	4810      	ldr	r0, [pc, #64]	; (5830 <usbd_event_handler+0x178>)
    57f0:	f004 fa62 	bl	9cb8 <k_mem_slab_alloc>
    57f4:	b180      	cbz	r0, 5818 <usbd_event_handler+0x160>
    57f6:	4b12      	ldr	r3, [pc, #72]	; (5840 <usbd_event_handler+0x188>)
    57f8:	4a12      	ldr	r2, [pc, #72]	; (5844 <usbd_event_handler+0x18c>)
    57fa:	1a9b      	subs	r3, r3, r2
    57fc:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    57fe:	f04f 0100 	mov.w	r1, #0
    5802:	2201      	movs	r2, #1
    5804:	f362 0102 	bfi	r1, r2, #0, #3
    5808:	f36f 01c5 	bfc	r1, #3, #3
    580c:	f363 118f 	bfi	r1, r3, #6, #10
    5810:	480e      	ldr	r0, [pc, #56]	; (584c <usbd_event_handler+0x194>)
    5812:	f7fb ffd3 	bl	17bc <log_0>
			return NULL;
    5816:	e770      	b.n	56fa <usbd_event_handler+0x42>
		ev = (struct usbd_event *)block.data;
    5818:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    581a:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    581c:	2304      	movs	r3, #4
    581e:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    5820:	4804      	ldr	r0, [pc, #16]	; (5834 <usbd_event_handler+0x17c>)
    5822:	f008 fb57 	bl	ded4 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    5826:	4904      	ldr	r1, [pc, #16]	; (5838 <usbd_event_handler+0x180>)
    5828:	4804      	ldr	r0, [pc, #16]	; (583c <usbd_event_handler+0x184>)
    582a:	f008 fb74 	bl	df16 <k_work_submit_to_queue>
		return NULL;
    582e:	e764      	b.n	56fa <usbd_event_handler+0x42>
    5830:	200001bc 	.word	0x200001bc
    5834:	20000274 	.word	0x20000274
    5838:	20001a40 	.word	0x20001a40
    583c:	20000520 	.word	0x20000520
    5840:	0000e884 	.word	0x0000e884
    5844:	0000e82c 	.word	0x0000e82c
    5848:	0000f4c8 	.word	0x0000f4c8
    584c:	0000f4e8 	.word	0x0000f4e8

00005850 <usb_dc_attach>:
{
    5850:	b510      	push	{r4, lr}
	if (ctx->attached) {
    5852:	4b1d      	ldr	r3, [pc, #116]	; (58c8 <usb_dc_attach+0x78>)
    5854:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    5858:	b113      	cbz	r3, 5860 <usb_dc_attach+0x10>
		return 0;
    585a:	2400      	movs	r4, #0
}
    585c:	4620      	mov	r0, r4
    585e:	bd10      	pop	{r4, pc}
	return z_impl_k_mutex_init(mutex);
    5860:	4c19      	ldr	r4, [pc, #100]	; (58c8 <usb_dc_attach+0x78>)
    5862:	f104 0038 	add.w	r0, r4, #56	; 0x38
    5866:	f008 fab1 	bl	ddcc <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
    586a:	2000      	movs	r0, #0
    586c:	f000 fd36 	bl	62dc <z_nrf_clock_control_get_onoff>
	ctx->hfxo_mgr =
    5870:	61e0      	str	r0, [r4, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5872:	2200      	movs	r2, #0
    5874:	2101      	movs	r1, #1
    5876:	2027      	movs	r0, #39	; 0x27
    5878:	f7fe f9b2 	bl	3be0 <z_arm_irq_priority_set>
	err = nrfx_usbd_init(usbd_event_handler);
    587c:	4813      	ldr	r0, [pc, #76]	; (58cc <usb_dc_attach+0x7c>)
    587e:	f002 fe55 	bl	852c <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
    5882:	4b13      	ldr	r3, [pc, #76]	; (58d0 <usb_dc_attach+0x80>)
    5884:	4298      	cmp	r0, r3
    5886:	d11b      	bne.n	58c0 <usb_dc_attach+0x70>
	nrfx_power_usbevt_enable();
    5888:	f008 f925 	bl	dad6 <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
    588c:	f7ff f87e 	bl	498c <eps_ctx_init>
	if (ret == 0) {
    5890:	4604      	mov	r4, r0
    5892:	b918      	cbnz	r0, 589c <usb_dc_attach+0x4c>
		ctx->attached = true;
    5894:	4b0c      	ldr	r3, [pc, #48]	; (58c8 <usb_dc_attach+0x78>)
    5896:	2201      	movs	r2, #1
    5898:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
    589c:	4b0d      	ldr	r3, [pc, #52]	; (58d4 <usb_dc_attach+0x84>)
    589e:	681b      	ldr	r3, [r3, #0]
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
    58a0:	b11b      	cbz	r3, 58aa <usb_dc_attach+0x5a>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    58a2:	490d      	ldr	r1, [pc, #52]	; (58d8 <usb_dc_attach+0x88>)
    58a4:	480d      	ldr	r0, [pc, #52]	; (58dc <usb_dc_attach+0x8c>)
    58a6:	f008 fb36 	bl	df16 <k_work_submit_to_queue>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
    58aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    58ae:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
    58b2:	f013 0f01 	tst.w	r3, #1
    58b6:	d0d1      	beq.n	585c <usb_dc_attach+0xc>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
    58b8:	2000      	movs	r0, #0
    58ba:	f7ff f935 	bl	4b28 <usb_dc_power_event_handler>
    58be:	e7cd      	b.n	585c <usb_dc_attach+0xc>
		return -EIO;
    58c0:	f06f 0404 	mvn.w	r4, #4
    58c4:	e7ca      	b.n	585c <usb_dc_attach+0xc>
    58c6:	bf00      	nop
    58c8:	20001a18 	.word	0x20001a18
    58cc:	000056b9 	.word	0x000056b9
    58d0:	0bad0000 	.word	0x0bad0000
    58d4:	20000274 	.word	0x20000274
    58d8:	20001a40 	.word	0x20001a40
    58dc:	20000520 	.word	0x20000520

000058e0 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
    58e0:	4b07      	ldr	r3, [pc, #28]	; (5900 <usb_dc_set_address+0x20>)
    58e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    58e6:	b12b      	cbz	r3, 58f4 <usb_dc_set_address+0x14>
	return get_usbd_ctx()->ready;
    58e8:	4b05      	ldr	r3, [pc, #20]	; (5900 <usb_dc_set_address+0x20>)
    58ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    58ee:	b123      	cbz	r3, 58fa <usb_dc_set_address+0x1a>
	return 0;
    58f0:	2000      	movs	r0, #0
    58f2:	4770      	bx	lr
		return -ENODEV;
    58f4:	f06f 0012 	mvn.w	r0, #18
    58f8:	4770      	bx	lr
    58fa:	f06f 0012 	mvn.w	r0, #18
}
    58fe:	4770      	bx	lr
    5900:	20001a18 	.word	0x20001a18

00005904 <usb_dc_ep_check_cap>:
{
    5904:	b508      	push	{r3, lr}
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    5906:	7801      	ldrb	r1, [r0, #0]
    5908:	f001 020f 	and.w	r2, r1, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    590c:	7903      	ldrb	r3, [r0, #4]
    590e:	b903      	cbnz	r3, 5912 <usb_dc_ep_check_cap+0xe>
    5910:	b92a      	cbnz	r2, 591e <usb_dc_ep_check_cap+0x1a>
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    5912:	2a08      	cmp	r2, #8
    5914:	d816      	bhi.n	5944 <usb_dc_ep_check_cap+0x40>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    5916:	2b01      	cmp	r3, #1
    5918:	d027      	beq.n	596a <usb_dc_ep_check_cap+0x66>
	return 0;
    591a:	2000      	movs	r0, #0
}
    591c:	bd08      	pop	{r3, pc}
    591e:	4b17      	ldr	r3, [pc, #92]	; (597c <usb_dc_ep_check_cap+0x78>)
    5920:	4a17      	ldr	r2, [pc, #92]	; (5980 <usb_dc_ep_check_cap+0x7c>)
    5922:	1a9b      	subs	r3, r3, r2
    5924:	08db      	lsrs	r3, r3, #3
		LOG_ERR("invalid endpoint configuration");
    5926:	f04f 0100 	mov.w	r1, #0
    592a:	2201      	movs	r2, #1
    592c:	f362 0102 	bfi	r1, r2, #0, #3
    5930:	f36f 01c5 	bfc	r1, #3, #3
    5934:	f363 118f 	bfi	r1, r3, #6, #10
    5938:	4812      	ldr	r0, [pc, #72]	; (5984 <usb_dc_ep_check_cap+0x80>)
    593a:	f7fb ff3f 	bl	17bc <log_0>
		return -1;
    593e:	f04f 30ff 	mov.w	r0, #4294967295
    5942:	e7eb      	b.n	591c <usb_dc_ep_check_cap+0x18>
    5944:	4b0d      	ldr	r3, [pc, #52]	; (597c <usb_dc_ep_check_cap+0x78>)
    5946:	4a0e      	ldr	r2, [pc, #56]	; (5980 <usb_dc_ep_check_cap+0x7c>)
    5948:	1a9b      	subs	r3, r3, r2
    594a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("invalid endpoint index/address");
    594c:	f04f 0100 	mov.w	r1, #0
    5950:	2201      	movs	r2, #1
    5952:	f362 0102 	bfi	r1, r2, #0, #3
    5956:	f36f 01c5 	bfc	r1, #3, #3
    595a:	f363 118f 	bfi	r1, r3, #6, #10
    595e:	480a      	ldr	r0, [pc, #40]	; (5988 <usb_dc_ep_check_cap+0x84>)
    5960:	f7fb ff2c 	bl	17bc <log_0>
		return -1;
    5964:	f04f 30ff 	mov.w	r0, #4294967295
    5968:	e7d8      	b.n	591c <usb_dc_ep_check_cap+0x18>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    596a:	f011 0f08 	tst.w	r1, #8
    596e:	d001      	beq.n	5974 <usb_dc_ep_check_cap+0x70>
	return 0;
    5970:	2000      	movs	r0, #0
    5972:	e7d3      	b.n	591c <usb_dc_ep_check_cap+0x18>
		return -1;
    5974:	f04f 30ff 	mov.w	r0, #4294967295
    5978:	e7d0      	b.n	591c <usb_dc_ep_check_cap+0x18>
    597a:	bf00      	nop
    597c:	0000e884 	.word	0x0000e884
    5980:	0000e82c 	.word	0x0000e82c
    5984:	0000f614 	.word	0x0000f614
    5988:	0000f634 	.word	0x0000f634

0000598c <usb_dc_ep_configure>:
{
    598c:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    598e:	4b1a      	ldr	r3, [pc, #104]	; (59f8 <usb_dc_ep_configure+0x6c>)
    5990:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
    5994:	b353      	cbz	r3, 59ec <usb_dc_ep_configure+0x60>
    5996:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    5998:	7805      	ldrb	r5, [r0, #0]
    599a:	4628      	mov	r0, r5
    599c:	f7fe ffc2 	bl	4924 <endpoint_ctx>
	if (!ep_ctx) {
    59a0:	b338      	cbz	r0, 59f2 <usb_dc_ep_configure+0x66>
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    59a2:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    59a4:	7922      	ldrb	r2, [r4, #4]
    59a6:	7282      	strb	r2, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    59a8:	8862      	ldrh	r2, [r4, #2]
    59aa:	6042      	str	r2, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    59ac:	7820      	ldrb	r0, [r4, #0]
    59ae:	f010 0f08 	tst.w	r0, #8
    59b2:	d103      	bne.n	59bc <usb_dc_ep_configure+0x30>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    59b4:	8863      	ldrh	r3, [r4, #2]
    59b6:	1e5a      	subs	r2, r3, #1
    59b8:	4213      	tst	r3, r2
    59ba:	d104      	bne.n	59c6 <usb_dc_ep_configure+0x3a>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    59bc:	8861      	ldrh	r1, [r4, #2]
    59be:	f002 fda5 	bl	850c <nrfx_usbd_ep_max_packet_size_set>
	return 0;
    59c2:	2000      	movs	r0, #0
}
    59c4:	bd38      	pop	{r3, r4, r5, pc}
    59c6:	4b0d      	ldr	r3, [pc, #52]	; (59fc <usb_dc_ep_configure+0x70>)
    59c8:	4a0d      	ldr	r2, [pc, #52]	; (5a00 <usb_dc_ep_configure+0x74>)
    59ca:	1a9b      	subs	r3, r3, r2
    59cc:	08db      	lsrs	r3, r3, #3
			LOG_ERR("EP max packet size must be a power of 2");
    59ce:	f04f 0100 	mov.w	r1, #0
    59d2:	2201      	movs	r2, #1
    59d4:	f362 0102 	bfi	r1, r2, #0, #3
    59d8:	f36f 01c5 	bfc	r1, #3, #3
    59dc:	f363 118f 	bfi	r1, r3, #6, #10
    59e0:	4808      	ldr	r0, [pc, #32]	; (5a04 <usb_dc_ep_configure+0x78>)
    59e2:	f7fb feeb 	bl	17bc <log_0>
			return -EINVAL;
    59e6:	f06f 0015 	mvn.w	r0, #21
    59ea:	e7eb      	b.n	59c4 <usb_dc_ep_configure+0x38>
		return -ENODEV;
    59ec:	f06f 0012 	mvn.w	r0, #18
    59f0:	e7e8      	b.n	59c4 <usb_dc_ep_configure+0x38>
		return -EINVAL;
    59f2:	f06f 0015 	mvn.w	r0, #21
    59f6:	e7e5      	b.n	59c4 <usb_dc_ep_configure+0x38>
    59f8:	20001a18 	.word	0x20001a18
    59fc:	0000e884 	.word	0x0000e884
    5a00:	0000e82c 	.word	0x0000e82c
    5a04:	0000f654 	.word	0x0000f654

00005a08 <usb_dc_ep_set_stall>:
{
    5a08:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    5a0a:	4b1e      	ldr	r3, [pc, #120]	; (5a84 <usb_dc_ep_set_stall+0x7c>)
    5a0c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    5a10:	b37b      	cbz	r3, 5a72 <usb_dc_ep_set_stall+0x6a>
    5a12:	4604      	mov	r4, r0
	return get_usbd_ctx()->ready;
    5a14:	4b1b      	ldr	r3, [pc, #108]	; (5a84 <usb_dc_ep_set_stall+0x7c>)
    5a16:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    5a1a:	b36b      	cbz	r3, 5a78 <usb_dc_ep_set_stall+0x70>
	ep_ctx = endpoint_ctx(ep);
    5a1c:	f7fe ff82 	bl	4924 <endpoint_ctx>
	if (!ep_ctx) {
    5a20:	4605      	mov	r5, r0
    5a22:	b360      	cbz	r0, 5a7e <usb_dc_ep_set_stall+0x76>
	switch (ep_ctx->cfg.type) {
    5a24:	7a83      	ldrb	r3, [r0, #10]
    5a26:	2b01      	cmp	r3, #1
    5a28:	d010      	beq.n	5a4c <usb_dc_ep_set_stall+0x44>
    5a2a:	d807      	bhi.n	5a3c <usb_dc_ep_set_stall+0x34>
    5a2c:	b90b      	cbnz	r3, 5a32 <usb_dc_ep_set_stall+0x2a>
		nrfx_usbd_setup_stall();
    5a2e:	f003 fa7b 	bl	8f28 <nrfx_usbd_setup_stall>
	ep_ctx->buf.len = 0U;
    5a32:	2000      	movs	r0, #0
    5a34:	60e8      	str	r0, [r5, #12]
	ep_ctx->buf.curr = ep_ctx->buf.data;
    5a36:	696b      	ldr	r3, [r5, #20]
    5a38:	61ab      	str	r3, [r5, #24]
}
    5a3a:	bd38      	pop	{r3, r4, r5, pc}
	switch (ep_ctx->cfg.type) {
    5a3c:	3b02      	subs	r3, #2
    5a3e:	b2db      	uxtb	r3, r3
    5a40:	2b01      	cmp	r3, #1
    5a42:	d8f6      	bhi.n	5a32 <usb_dc_ep_set_stall+0x2a>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    5a44:	4620      	mov	r0, r4
    5a46:	f003 f9b5 	bl	8db4 <nrfx_usbd_ep_stall>
		break;
    5a4a:	e7f2      	b.n	5a32 <usb_dc_ep_set_stall+0x2a>
    5a4c:	4b0e      	ldr	r3, [pc, #56]	; (5a88 <usb_dc_ep_set_stall+0x80>)
    5a4e:	4a0f      	ldr	r2, [pc, #60]	; (5a8c <usb_dc_ep_set_stall+0x84>)
    5a50:	1a9b      	subs	r3, r3, r2
    5a52:	08db      	lsrs	r3, r3, #3
		LOG_ERR("STALL unsupported on ISO endpoint");
    5a54:	f04f 0100 	mov.w	r1, #0
    5a58:	2201      	movs	r2, #1
    5a5a:	f362 0102 	bfi	r1, r2, #0, #3
    5a5e:	f36f 01c5 	bfc	r1, #3, #3
    5a62:	f363 118f 	bfi	r1, r3, #6, #10
    5a66:	480a      	ldr	r0, [pc, #40]	; (5a90 <usb_dc_ep_set_stall+0x88>)
    5a68:	f7fb fea8 	bl	17bc <log_0>
		return -EINVAL;
    5a6c:	f06f 0015 	mvn.w	r0, #21
    5a70:	e7e3      	b.n	5a3a <usb_dc_ep_set_stall+0x32>
		return -ENODEV;
    5a72:	f06f 0012 	mvn.w	r0, #18
    5a76:	e7e0      	b.n	5a3a <usb_dc_ep_set_stall+0x32>
    5a78:	f06f 0012 	mvn.w	r0, #18
    5a7c:	e7dd      	b.n	5a3a <usb_dc_ep_set_stall+0x32>
		return -EINVAL;
    5a7e:	f06f 0015 	mvn.w	r0, #21
    5a82:	e7da      	b.n	5a3a <usb_dc_ep_set_stall+0x32>
    5a84:	20001a18 	.word	0x20001a18
    5a88:	0000e884 	.word	0x0000e884
    5a8c:	0000e82c 	.word	0x0000e82c
    5a90:	0000f67c 	.word	0x0000f67c

00005a94 <usb_dc_ep_clear_stall>:
	return get_usbd_ctx()->attached;
    5a94:	4b11      	ldr	r3, [pc, #68]	; (5adc <usb_dc_ep_clear_stall+0x48>)
    5a96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    5a9a:	b19b      	cbz	r3, 5ac4 <usb_dc_ep_clear_stall+0x30>
{
    5a9c:	b510      	push	{r4, lr}
    5a9e:	4604      	mov	r4, r0
	return get_usbd_ctx()->ready;
    5aa0:	4b0e      	ldr	r3, [pc, #56]	; (5adc <usb_dc_ep_clear_stall+0x48>)
    5aa2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    5aa6:	b183      	cbz	r3, 5aca <usb_dc_ep_clear_stall+0x36>
	ep_ctx = endpoint_ctx(ep);
    5aa8:	f7fe ff3c 	bl	4924 <endpoint_ctx>
	if (!ep_ctx) {
    5aac:	b180      	cbz	r0, 5ad0 <usb_dc_ep_clear_stall+0x3c>
	if (NRF_USBD_EPISO_CHECK(ep)) {
    5aae:	f014 0f08 	tst.w	r4, #8
    5ab2:	d110      	bne.n	5ad6 <usb_dc_ep_clear_stall+0x42>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    5ab4:	4620      	mov	r0, r4
    5ab6:	f003 f9a5 	bl	8e04 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    5aba:	4620      	mov	r0, r4
    5abc:	f003 fbec 	bl	9298 <nrfx_usbd_ep_stall_clear>
	return 0;
    5ac0:	2000      	movs	r0, #0
}
    5ac2:	bd10      	pop	{r4, pc}
		return -ENODEV;
    5ac4:	f06f 0012 	mvn.w	r0, #18
}
    5ac8:	4770      	bx	lr
		return -ENODEV;
    5aca:	f06f 0012 	mvn.w	r0, #18
    5ace:	e7f8      	b.n	5ac2 <usb_dc_ep_clear_stall+0x2e>
		return -EINVAL;
    5ad0:	f06f 0015 	mvn.w	r0, #21
    5ad4:	e7f5      	b.n	5ac2 <usb_dc_ep_clear_stall+0x2e>
		return -EINVAL;
    5ad6:	f06f 0015 	mvn.w	r0, #21
    5ada:	e7f2      	b.n	5ac2 <usb_dc_ep_clear_stall+0x2e>
    5adc:	20001a18 	.word	0x20001a18

00005ae0 <usb_dc_ep_is_stalled>:
{
    5ae0:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    5ae2:	4b10      	ldr	r3, [pc, #64]	; (5b24 <usb_dc_ep_is_stalled+0x44>)
    5ae4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    5ae8:	b17b      	cbz	r3, 5b0a <usb_dc_ep_is_stalled+0x2a>
    5aea:	4604      	mov	r4, r0
    5aec:	460d      	mov	r5, r1
	return get_usbd_ctx()->ready;
    5aee:	4b0d      	ldr	r3, [pc, #52]	; (5b24 <usb_dc_ep_is_stalled+0x44>)
    5af0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    5af4:	b163      	cbz	r3, 5b10 <usb_dc_ep_is_stalled+0x30>
	ep_ctx = endpoint_ctx(ep);
    5af6:	f7fe ff15 	bl	4924 <endpoint_ctx>
	if (!ep_ctx) {
    5afa:	b160      	cbz	r0, 5b16 <usb_dc_ep_is_stalled+0x36>
	if (!stalled) {
    5afc:	b175      	cbz	r5, 5b1c <usb_dc_ep_is_stalled+0x3c>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    5afe:	4620      	mov	r0, r4
    5b00:	f003 f960 	bl	8dc4 <nrfx_usbd_ep_stall_check>
    5b04:	7028      	strb	r0, [r5, #0]
	return 0;
    5b06:	2000      	movs	r0, #0
}
    5b08:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    5b0a:	f06f 0012 	mvn.w	r0, #18
    5b0e:	e7fb      	b.n	5b08 <usb_dc_ep_is_stalled+0x28>
    5b10:	f06f 0012 	mvn.w	r0, #18
    5b14:	e7f8      	b.n	5b08 <usb_dc_ep_is_stalled+0x28>
		return -EINVAL;
    5b16:	f06f 0015 	mvn.w	r0, #21
    5b1a:	e7f5      	b.n	5b08 <usb_dc_ep_is_stalled+0x28>
		return -EINVAL;
    5b1c:	f06f 0015 	mvn.w	r0, #21
    5b20:	e7f2      	b.n	5b08 <usb_dc_ep_is_stalled+0x28>
    5b22:	bf00      	nop
    5b24:	20001a18 	.word	0x20001a18

00005b28 <usb_dc_ep_enable>:
{
    5b28:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    5b2a:	4b15      	ldr	r3, [pc, #84]	; (5b80 <usb_dc_ep_enable+0x58>)
    5b2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
    5b30:	b1eb      	cbz	r3, 5b6e <usb_dc_ep_enable+0x46>
    5b32:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep);
    5b34:	f7fe fef6 	bl	4924 <endpoint_ctx>
	if (!ep_ctx) {
    5b38:	4605      	mov	r5, r0
    5b3a:	b1d8      	cbz	r0, 5b74 <usb_dc_ep_enable+0x4c>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
    5b3c:	f014 0f08 	tst.w	r4, #8
    5b40:	d009      	beq.n	5b56 <usb_dc_ep_enable+0x2e>
	if (ep_ctx->cfg.en) {
    5b42:	7a2b      	ldrb	r3, [r5, #8]
    5b44:	b9cb      	cbnz	r3, 5b7a <usb_dc_ep_enable+0x52>
	ep_ctx->cfg.en = true;
    5b46:	2301      	movs	r3, #1
    5b48:	722b      	strb	r3, [r5, #8]
	return get_usbd_ctx()->ready;
    5b4a:	4b0d      	ldr	r3, [pc, #52]	; (5b80 <usb_dc_ep_enable+0x58>)
    5b4c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (dev_ready()) {
    5b50:	b943      	cbnz	r3, 5b64 <usb_dc_ep_enable+0x3c>
	return 0;
    5b52:	2000      	movs	r0, #0
}
    5b54:	bd38      	pop	{r3, r4, r5, pc}
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    5b56:	4620      	mov	r0, r4
    5b58:	f003 f954 	bl	8e04 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    5b5c:	4620      	mov	r0, r4
    5b5e:	f003 fb9b 	bl	9298 <nrfx_usbd_ep_stall_clear>
    5b62:	e7ee      	b.n	5b42 <usb_dc_ep_enable+0x1a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    5b64:	4620      	mov	r0, r4
    5b66:	f003 fb3d 	bl	91e4 <nrfx_usbd_ep_enable>
	return 0;
    5b6a:	2000      	movs	r0, #0
    5b6c:	e7f2      	b.n	5b54 <usb_dc_ep_enable+0x2c>
		return -ENODEV;
    5b6e:	f06f 0012 	mvn.w	r0, #18
    5b72:	e7ef      	b.n	5b54 <usb_dc_ep_enable+0x2c>
		return -EINVAL;
    5b74:	f06f 0015 	mvn.w	r0, #21
    5b78:	e7ec      	b.n	5b54 <usb_dc_ep_enable+0x2c>
		return -EALREADY;
    5b7a:	f06f 0077 	mvn.w	r0, #119	; 0x77
    5b7e:	e7e9      	b.n	5b54 <usb_dc_ep_enable+0x2c>
    5b80:	20001a18 	.word	0x20001a18

00005b84 <usb_dc_ep_disable>:
{
    5b84:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    5b86:	4b13      	ldr	r3, [pc, #76]	; (5bd4 <usb_dc_ep_disable+0x50>)
    5b88:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    5b8c:	b1ab      	cbz	r3, 5bba <usb_dc_ep_disable+0x36>
    5b8e:	4604      	mov	r4, r0
	return get_usbd_ctx()->ready;
    5b90:	4b10      	ldr	r3, [pc, #64]	; (5bd4 <usb_dc_ep_disable+0x50>)
    5b92:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    5b96:	b19b      	cbz	r3, 5bc0 <usb_dc_ep_disable+0x3c>
	ep_ctx = endpoint_ctx(ep);
    5b98:	f7fe fec4 	bl	4924 <endpoint_ctx>
	if (!ep_ctx) {
    5b9c:	4605      	mov	r5, r0
    5b9e:	b190      	cbz	r0, 5bc6 <usb_dc_ep_disable+0x42>
	if (!ep_ctx->cfg.en) {
    5ba0:	7a03      	ldrb	r3, [r0, #8]
    5ba2:	b19b      	cbz	r3, 5bcc <usb_dc_ep_disable+0x48>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    5ba4:	4620      	mov	r0, r4
    5ba6:	f003 fd51 	bl	964c <nrfx_usbd_ep_disable>
	ep_ctx->write_in_progress = false;
    5baa:	2400      	movs	r4, #0
    5bac:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
    5bae:	4628      	mov	r0, r5
    5bb0:	f007 fad5 	bl	d15e <ep_ctx_reset>
	ep_ctx->cfg.en = false;
    5bb4:	722c      	strb	r4, [r5, #8]
	return 0;
    5bb6:	4620      	mov	r0, r4
}
    5bb8:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    5bba:	f06f 0012 	mvn.w	r0, #18
    5bbe:	e7fb      	b.n	5bb8 <usb_dc_ep_disable+0x34>
    5bc0:	f06f 0012 	mvn.w	r0, #18
    5bc4:	e7f8      	b.n	5bb8 <usb_dc_ep_disable+0x34>
		return -EINVAL;
    5bc6:	f06f 0015 	mvn.w	r0, #21
    5bca:	e7f5      	b.n	5bb8 <usb_dc_ep_disable+0x34>
		return -EALREADY;
    5bcc:	f06f 0077 	mvn.w	r0, #119	; 0x77
    5bd0:	e7f2      	b.n	5bb8 <usb_dc_ep_disable+0x34>
    5bd2:	bf00      	nop
    5bd4:	20001a18 	.word	0x20001a18

00005bd8 <usb_dc_ep_write>:
{
    5bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5bdc:	b084      	sub	sp, #16
    5bde:	461f      	mov	r7, r3
	return get_usbd_ctx()->attached;
    5be0:	4b4e      	ldr	r3, [pc, #312]	; (5d1c <usb_dc_ep_write+0x144>)
    5be2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    5be6:	2b00      	cmp	r3, #0
    5be8:	f000 808c 	beq.w	5d04 <usb_dc_ep_write+0x12c>
    5bec:	4604      	mov	r4, r0
    5bee:	4688      	mov	r8, r1
    5bf0:	4616      	mov	r6, r2
	return get_usbd_ctx()->ready;
    5bf2:	4b4a      	ldr	r3, [pc, #296]	; (5d1c <usb_dc_ep_write+0x144>)
    5bf4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    5bf8:	2b00      	cmp	r3, #0
    5bfa:	f000 8086 	beq.w	5d0a <usb_dc_ep_write+0x132>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
    5bfe:	f010 0f80 	tst.w	r0, #128	; 0x80
    5c02:	f000 8085 	beq.w	5d10 <usb_dc_ep_write+0x138>
	ep_ctx = endpoint_ctx(ep);
    5c06:	f7fe fe8d 	bl	4924 <endpoint_ctx>
	if (!ep_ctx) {
    5c0a:	4605      	mov	r5, r0
    5c0c:	2800      	cmp	r0, #0
    5c0e:	f000 8082 	beq.w	5d16 <usb_dc_ep_write+0x13e>
	if (!ep_ctx->cfg.en) {
    5c12:	7a03      	ldrb	r3, [r0, #8]
    5c14:	2b00      	cmp	r3, #0
    5c16:	d04e      	beq.n	5cb6 <usb_dc_ep_write+0xde>
	return z_impl_k_mutex_lock(mutex, timeout);
    5c18:	f04f 32ff 	mov.w	r2, #4294967295
    5c1c:	f04f 33ff 	mov.w	r3, #4294967295
    5c20:	483f      	ldr	r0, [pc, #252]	; (5d20 <usb_dc_ep_write+0x148>)
    5c22:	f004 f983 	bl	9f2c <z_impl_k_mutex_lock>
	if (ep_ctx->write_in_progress) {
    5c26:	7fab      	ldrb	r3, [r5, #30]
    5c28:	2b00      	cmp	r3, #0
    5c2a:	d158      	bne.n	5cde <usb_dc_ep_write+0x106>
	if (!data_len && ep_ctx->trans_zlp) {
    5c2c:	b91e      	cbnz	r6, 5c36 <usb_dc_ep_write+0x5e>
    5c2e:	7feb      	ldrb	r3, [r5, #31]
    5c30:	b10b      	cbz	r3, 5c36 <usb_dc_ep_write+0x5e>
		ep_ctx->trans_zlp = false;
    5c32:	2300      	movs	r3, #0
    5c34:	77eb      	strb	r3, [r5, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    5c36:	7aab      	ldrb	r3, [r5, #10]
    5c38:	b963      	cbnz	r3, 5c54 <usb_dc_ep_write+0x7c>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    5c3a:	b15e      	cbz	r6, 5c54 <usb_dc_ep_write+0x7c>
    5c3c:	4a37      	ldr	r2, [pc, #220]	; (5d1c <usb_dc_ep_write+0x144>)
    5c3e:	8952      	ldrh	r2, [r2, #10]
    5c40:	42b2      	cmp	r2, r6
    5c42:	d907      	bls.n	5c54 <usb_dc_ep_write+0x7c>
		    !(data_len % ep_ctx->cfg.max_sz)) {
    5c44:	6869      	ldr	r1, [r5, #4]
    5c46:	fbb6 f2f1 	udiv	r2, r6, r1
    5c4a:	fb01 6212 	mls	r2, r1, r2, r6
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    5c4e:	b90a      	cbnz	r2, 5c54 <usb_dc_ep_write+0x7c>
			ep_ctx->trans_zlp = true;
    5c50:	2201      	movs	r2, #1
    5c52:	77ea      	strb	r2, [r5, #31]
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
    5c54:	b91b      	cbnz	r3, 5c5e <usb_dc_ep_write+0x86>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    5c56:	f003 f96f 	bl	8f38 <nrfx_usbd_last_setup_dir_get>
    5c5a:	42a0      	cmp	r0, r4
    5c5c:	d145      	bne.n	5cea <usb_dc_ep_write+0x112>
	ep_ctx->write_in_progress = true;
    5c5e:	2301      	movs	r3, #1
    5c60:	77ab      	strb	r3, [r5, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    5c62:	f8cd 8004 	str.w	r8, [sp, #4]
    5c66:	9602      	str	r6, [sp, #8]
    5c68:	2300      	movs	r3, #0
    5c6a:	9303      	str	r3, [sp, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    5c6c:	a901      	add	r1, sp, #4
    5c6e:	4620      	mov	r0, r4
    5c70:	f002 fcb4 	bl	85dc <nrfx_usbd_ep_transfer>
    5c74:	4601      	mov	r1, r0
	if (err != NRFX_SUCCESS) {
    5c76:	4b2b      	ldr	r3, [pc, #172]	; (5d24 <usb_dc_ep_write+0x14c>)
    5c78:	4298      	cmp	r0, r3
    5c7a:	d03d      	beq.n	5cf8 <usb_dc_ep_write+0x120>
		ep_ctx->write_in_progress = false;
    5c7c:	2300      	movs	r3, #0
    5c7e:	77ab      	strb	r3, [r5, #30]
		if (ret_bytes) {
    5c80:	b107      	cbz	r7, 5c84 <usb_dc_ep_write+0xac>
			*ret_bytes = 0;
    5c82:	603b      	str	r3, [r7, #0]
    5c84:	4b28      	ldr	r3, [pc, #160]	; (5d28 <usb_dc_ep_write+0x150>)
    5c86:	4a29      	ldr	r2, [pc, #164]	; (5d2c <usb_dc_ep_write+0x154>)
    5c88:	1a9b      	subs	r3, r3, r2
    5c8a:	08db      	lsrs	r3, r3, #3
		LOG_ERR("nRF USBD write error: %d", (uint32_t)err);
    5c8c:	f04f 0200 	mov.w	r2, #0
    5c90:	2001      	movs	r0, #1
    5c92:	f360 0202 	bfi	r2, r0, #0, #3
    5c96:	f36f 02c5 	bfc	r2, #3, #3
    5c9a:	f363 128f 	bfi	r2, r3, #6, #10
    5c9e:	4824      	ldr	r0, [pc, #144]	; (5d30 <usb_dc_ep_write+0x158>)
    5ca0:	f7fb fd1a 	bl	16d8 <log_1>
		result = -EIO;
    5ca4:	f06f 0404 	mvn.w	r4, #4
	return z_impl_k_mutex_unlock(mutex);
    5ca8:	481d      	ldr	r0, [pc, #116]	; (5d20 <usb_dc_ep_write+0x148>)
    5caa:	f004 f9c9 	bl	a040 <z_impl_k_mutex_unlock>
}
    5cae:	4620      	mov	r0, r4
    5cb0:	b004      	add	sp, #16
    5cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5cb6:	4b1c      	ldr	r3, [pc, #112]	; (5d28 <usb_dc_ep_write+0x150>)
    5cb8:	4a1c      	ldr	r2, [pc, #112]	; (5d2c <usb_dc_ep_write+0x154>)
    5cba:	1a9b      	subs	r3, r3, r2
    5cbc:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    5cbe:	f04f 0200 	mov.w	r2, #0
    5cc2:	2101      	movs	r1, #1
    5cc4:	f361 0202 	bfi	r2, r1, #0, #3
    5cc8:	f36f 02c5 	bfc	r2, #3, #3
    5ccc:	f363 128f 	bfi	r2, r3, #6, #10
    5cd0:	4621      	mov	r1, r4
    5cd2:	4818      	ldr	r0, [pc, #96]	; (5d34 <usb_dc_ep_write+0x15c>)
    5cd4:	f7fb fd00 	bl	16d8 <log_1>
		return -EINVAL;
    5cd8:	f06f 0415 	mvn.w	r4, #21
    5cdc:	e7e7      	b.n	5cae <usb_dc_ep_write+0xd6>
    5cde:	4810      	ldr	r0, [pc, #64]	; (5d20 <usb_dc_ep_write+0x148>)
    5ce0:	f004 f9ae 	bl	a040 <z_impl_k_mutex_unlock>
		return -EAGAIN;
    5ce4:	f06f 040a 	mvn.w	r4, #10
    5ce8:	e7e1      	b.n	5cae <usb_dc_ep_write+0xd6>
		nrfx_usbd_setup_clear();
    5cea:	f003 f915 	bl	8f18 <nrfx_usbd_setup_clear>
    5cee:	480c      	ldr	r0, [pc, #48]	; (5d20 <usb_dc_ep_write+0x148>)
    5cf0:	f004 f9a6 	bl	a040 <z_impl_k_mutex_unlock>
		return 0;
    5cf4:	2400      	movs	r4, #0
    5cf6:	e7da      	b.n	5cae <usb_dc_ep_write+0xd6>
		if (ret_bytes) {
    5cf8:	b117      	cbz	r7, 5d00 <usb_dc_ep_write+0x128>
			*ret_bytes = data_len;
    5cfa:	603e      	str	r6, [r7, #0]
	int result = 0;
    5cfc:	2400      	movs	r4, #0
    5cfe:	e7d3      	b.n	5ca8 <usb_dc_ep_write+0xd0>
    5d00:	2400      	movs	r4, #0
    5d02:	e7d1      	b.n	5ca8 <usb_dc_ep_write+0xd0>
		return -ENODEV;
    5d04:	f06f 0412 	mvn.w	r4, #18
    5d08:	e7d1      	b.n	5cae <usb_dc_ep_write+0xd6>
    5d0a:	f06f 0412 	mvn.w	r4, #18
    5d0e:	e7ce      	b.n	5cae <usb_dc_ep_write+0xd6>
		return -EINVAL;
    5d10:	f06f 0415 	mvn.w	r4, #21
    5d14:	e7cb      	b.n	5cae <usb_dc_ep_write+0xd6>
		return -EINVAL;
    5d16:	f06f 0415 	mvn.w	r4, #21
    5d1a:	e7c8      	b.n	5cae <usb_dc_ep_write+0xd6>
    5d1c:	20001a18 	.word	0x20001a18
    5d20:	20001a50 	.word	0x20001a50
    5d24:	0bad0000 	.word	0x0bad0000
    5d28:	0000e884 	.word	0x0000e884
    5d2c:	0000e82c 	.word	0x0000e82c
    5d30:	0000f6c0 	.word	0x0000f6c0
    5d34:	0000f6a0 	.word	0x0000f6a0

00005d38 <usb_dc_ep_read_wait>:
{
    5d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d3c:	4698      	mov	r8, r3
	return get_usbd_ctx()->attached;
    5d3e:	4b36      	ldr	r3, [pc, #216]	; (5e18 <usb_dc_ep_read_wait+0xe0>)
    5d40:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    5d44:	2b00      	cmp	r3, #0
    5d46:	d05b      	beq.n	5e00 <usb_dc_ep_read_wait+0xc8>
    5d48:	4606      	mov	r6, r0
    5d4a:	460d      	mov	r5, r1
    5d4c:	4617      	mov	r7, r2
	return get_usbd_ctx()->ready;
    5d4e:	4b32      	ldr	r3, [pc, #200]	; (5e18 <usb_dc_ep_read_wait+0xe0>)
    5d50:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    5d54:	2b00      	cmp	r3, #0
    5d56:	d056      	beq.n	5e06 <usb_dc_ep_read_wait+0xce>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    5d58:	f010 0f80 	tst.w	r0, #128	; 0x80
    5d5c:	d156      	bne.n	5e0c <usb_dc_ep_read_wait+0xd4>
	if (!data && max_data_len) {
    5d5e:	b351      	cbz	r1, 5db6 <usb_dc_ep_read_wait+0x7e>
	ep_ctx = endpoint_ctx(ep);
    5d60:	4630      	mov	r0, r6
    5d62:	f7fe fddf 	bl	4924 <endpoint_ctx>
	if (!ep_ctx) {
    5d66:	4604      	mov	r4, r0
    5d68:	2800      	cmp	r0, #0
    5d6a:	d052      	beq.n	5e12 <usb_dc_ep_read_wait+0xda>
	if (!ep_ctx->cfg.en) {
    5d6c:	7a03      	ldrb	r3, [r0, #8]
    5d6e:	b33b      	cbz	r3, 5dc0 <usb_dc_ep_read_wait+0x88>
	return z_impl_k_mutex_lock(mutex, timeout);
    5d70:	f04f 32ff 	mov.w	r2, #4294967295
    5d74:	f04f 33ff 	mov.w	r3, #4294967295
    5d78:	4828      	ldr	r0, [pc, #160]	; (5e1c <usb_dc_ep_read_wait+0xe4>)
    5d7a:	f004 f8d7 	bl	9f2c <z_impl_k_mutex_lock>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
    5d7e:	68e3      	ldr	r3, [r4, #12]
    5d80:	463e      	mov	r6, r7
    5d82:	429f      	cmp	r7, r3
    5d84:	bf28      	it	cs
    5d86:	461e      	movcs	r6, r3
	if (!data && !max_data_len) {
    5d88:	b375      	cbz	r5, 5de8 <usb_dc_ep_read_wait+0xb0>
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
    5d8a:	4632      	mov	r2, r6
    5d8c:	69a1      	ldr	r1, [r4, #24]
    5d8e:	4628      	mov	r0, r5
    5d90:	f007 f979 	bl	d086 <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
    5d94:	69a3      	ldr	r3, [r4, #24]
    5d96:	4433      	add	r3, r6
    5d98:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
    5d9a:	68e3      	ldr	r3, [r4, #12]
    5d9c:	1b9b      	subs	r3, r3, r6
    5d9e:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
    5da0:	f1b8 0f00 	cmp.w	r8, #0
    5da4:	d001      	beq.n	5daa <usb_dc_ep_read_wait+0x72>
		*read_bytes = bytes_to_copy;
    5da6:	f8c8 6000 	str.w	r6, [r8]
	return z_impl_k_mutex_unlock(mutex);
    5daa:	481c      	ldr	r0, [pc, #112]	; (5e1c <usb_dc_ep_read_wait+0xe4>)
    5dac:	f004 f948 	bl	a040 <z_impl_k_mutex_unlock>
	return 0;
    5db0:	2000      	movs	r0, #0
}
    5db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!data && max_data_len) {
    5db6:	2a00      	cmp	r2, #0
    5db8:	d0d2      	beq.n	5d60 <usb_dc_ep_read_wait+0x28>
		return -EINVAL;
    5dba:	f06f 0015 	mvn.w	r0, #21
    5dbe:	e7f8      	b.n	5db2 <usb_dc_ep_read_wait+0x7a>
    5dc0:	4b17      	ldr	r3, [pc, #92]	; (5e20 <usb_dc_ep_read_wait+0xe8>)
    5dc2:	4a18      	ldr	r2, [pc, #96]	; (5e24 <usb_dc_ep_read_wait+0xec>)
    5dc4:	1a9b      	subs	r3, r3, r2
    5dc6:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    5dc8:	f04f 0200 	mov.w	r2, #0
    5dcc:	2101      	movs	r1, #1
    5dce:	f361 0202 	bfi	r2, r1, #0, #3
    5dd2:	f36f 02c5 	bfc	r2, #3, #3
    5dd6:	f363 128f 	bfi	r2, r3, #6, #10
    5dda:	4631      	mov	r1, r6
    5ddc:	4812      	ldr	r0, [pc, #72]	; (5e28 <usb_dc_ep_read_wait+0xf0>)
    5dde:	f7fb fc7b 	bl	16d8 <log_1>
		return -EINVAL;
    5de2:	f06f 0015 	mvn.w	r0, #21
    5de6:	e7e4      	b.n	5db2 <usb_dc_ep_read_wait+0x7a>
	if (!data && !max_data_len) {
    5de8:	2f00      	cmp	r7, #0
    5dea:	d1ce      	bne.n	5d8a <usb_dc_ep_read_wait+0x52>
		if (read_bytes) {
    5dec:	f1b8 0f00 	cmp.w	r8, #0
    5df0:	d001      	beq.n	5df6 <usb_dc_ep_read_wait+0xbe>
			*read_bytes = ep_ctx->buf.len;
    5df2:	f8c8 3000 	str.w	r3, [r8]
    5df6:	4809      	ldr	r0, [pc, #36]	; (5e1c <usb_dc_ep_read_wait+0xe4>)
    5df8:	f004 f922 	bl	a040 <z_impl_k_mutex_unlock>
		return 0;
    5dfc:	2000      	movs	r0, #0
    5dfe:	e7d8      	b.n	5db2 <usb_dc_ep_read_wait+0x7a>
		return -ENODEV;
    5e00:	f06f 0012 	mvn.w	r0, #18
    5e04:	e7d5      	b.n	5db2 <usb_dc_ep_read_wait+0x7a>
    5e06:	f06f 0012 	mvn.w	r0, #18
    5e0a:	e7d2      	b.n	5db2 <usb_dc_ep_read_wait+0x7a>
		return -EINVAL;
    5e0c:	f06f 0015 	mvn.w	r0, #21
    5e10:	e7cf      	b.n	5db2 <usb_dc_ep_read_wait+0x7a>
		return -EINVAL;
    5e12:	f06f 0015 	mvn.w	r0, #21
    5e16:	e7cc      	b.n	5db2 <usb_dc_ep_read_wait+0x7a>
    5e18:	20001a18 	.word	0x20001a18
    5e1c:	20001a50 	.word	0x20001a50
    5e20:	0000e884 	.word	0x0000e884
    5e24:	0000e82c 	.word	0x0000e82c
    5e28:	0000f6a0 	.word	0x0000f6a0

00005e2c <usb_dc_ep_read_continue>:
	return get_usbd_ctx()->attached;
    5e2c:	4b58      	ldr	r3, [pc, #352]	; (5f90 <usb_dc_ep_read_continue+0x164>)
    5e2e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached() || !dev_ready()) {
    5e32:	2b00      	cmp	r3, #0
    5e34:	f000 809f 	beq.w	5f76 <usb_dc_ep_read_continue+0x14a>
{
    5e38:	b530      	push	{r4, r5, lr}
    5e3a:	b083      	sub	sp, #12
    5e3c:	4605      	mov	r5, r0
	return get_usbd_ctx()->ready;
    5e3e:	4b54      	ldr	r3, [pc, #336]	; (5f90 <usb_dc_ep_read_continue+0x164>)
    5e40:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	if (!dev_attached() || !dev_ready()) {
    5e44:	2b00      	cmp	r3, #0
    5e46:	f000 8099 	beq.w	5f7c <usb_dc_ep_read_continue+0x150>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    5e4a:	f010 0f80 	tst.w	r0, #128	; 0x80
    5e4e:	f040 8098 	bne.w	5f82 <usb_dc_ep_read_continue+0x156>
	ep_ctx = endpoint_ctx(ep);
    5e52:	f7fe fd67 	bl	4924 <endpoint_ctx>
	if (!ep_ctx) {
    5e56:	4604      	mov	r4, r0
    5e58:	2800      	cmp	r0, #0
    5e5a:	f000 8095 	beq.w	5f88 <usb_dc_ep_read_continue+0x15c>
	if (!ep_ctx->cfg.en) {
    5e5e:	7a03      	ldrb	r3, [r0, #8]
    5e60:	b1a3      	cbz	r3, 5e8c <usb_dc_ep_read_continue+0x60>
	return z_impl_k_mutex_lock(mutex, timeout);
    5e62:	f04f 32ff 	mov.w	r2, #4294967295
    5e66:	f04f 33ff 	mov.w	r3, #4294967295
    5e6a:	484a      	ldr	r0, [pc, #296]	; (5f94 <usb_dc_ep_read_continue+0x168>)
    5e6c:	f004 f85e 	bl	9f2c <z_impl_k_mutex_lock>
	if (!ep_ctx->buf.len) {
    5e70:	68e3      	ldr	r3, [r4, #12]
    5e72:	b92b      	cbnz	r3, 5e80 <usb_dc_ep_read_continue+0x54>
		ep_ctx->buf.curr = ep_ctx->buf.data;
    5e74:	6963      	ldr	r3, [r4, #20]
    5e76:	61a3      	str	r3, [r4, #24]
		ep_ctx->read_complete = true;
    5e78:	2301      	movs	r3, #1
    5e7a:	7723      	strb	r3, [r4, #28]
		if (ep_ctx->read_pending) {
    5e7c:	7f63      	ldrb	r3, [r4, #29]
    5e7e:	b9cb      	cbnz	r3, 5eb4 <usb_dc_ep_read_continue+0x88>
	return z_impl_k_mutex_unlock(mutex);
    5e80:	4844      	ldr	r0, [pc, #272]	; (5f94 <usb_dc_ep_read_continue+0x168>)
    5e82:	f004 f8dd 	bl	a040 <z_impl_k_mutex_unlock>
	return 0;
    5e86:	2000      	movs	r0, #0
}
    5e88:	b003      	add	sp, #12
    5e8a:	bd30      	pop	{r4, r5, pc}
    5e8c:	4b42      	ldr	r3, [pc, #264]	; (5f98 <usb_dc_ep_read_continue+0x16c>)
    5e8e:	4a43      	ldr	r2, [pc, #268]	; (5f9c <usb_dc_ep_read_continue+0x170>)
    5e90:	1a9b      	subs	r3, r3, r2
    5e92:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    5e94:	f04f 0200 	mov.w	r2, #0
    5e98:	2101      	movs	r1, #1
    5e9a:	f361 0202 	bfi	r2, r1, #0, #3
    5e9e:	f36f 02c5 	bfc	r2, #3, #3
    5ea2:	f363 128f 	bfi	r2, r3, #6, #10
    5ea6:	4629      	mov	r1, r5
    5ea8:	483d      	ldr	r0, [pc, #244]	; (5fa0 <usb_dc_ep_read_continue+0x174>)
    5eaa:	f7fb fc15 	bl	16d8 <log_1>
		return -EINVAL;
    5eae:	f06f 0015 	mvn.w	r0, #21
    5eb2:	e7e9      	b.n	5e88 <usb_dc_ep_read_continue+0x5c>
	if (k_mem_slab_alloc(&fifo_elem_slab,
    5eb4:	2200      	movs	r2, #0
    5eb6:	2300      	movs	r3, #0
    5eb8:	a901      	add	r1, sp, #4
    5eba:	483a      	ldr	r0, [pc, #232]	; (5fa4 <usb_dc_ep_read_continue+0x178>)
    5ebc:	f003 fefc 	bl	9cb8 <k_mem_slab_alloc>
    5ec0:	b980      	cbnz	r0, 5ee4 <usb_dc_ep_read_continue+0xb8>
	ev = (struct usbd_event *)block.data;
    5ec2:	9d01      	ldr	r5, [sp, #4]
	ev->block = block;
    5ec4:	606d      	str	r5, [r5, #4]
			if (!ev) {
    5ec6:	2d00      	cmp	r5, #0
    5ec8:	d04f      	beq.n	5f6a <usb_dc_ep_read_continue+0x13e>
			ev->evt_type = USBD_EVT_EP;
    5eca:	2301      	movs	r3, #1
    5ecc:	742b      	strb	r3, [r5, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    5ece:	60ac      	str	r4, [r5, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    5ed0:	732b      	strb	r3, [r5, #12]
	k_fifo_put(&usbd_evt_fifo, ev);
    5ed2:	4629      	mov	r1, r5
    5ed4:	4834      	ldr	r0, [pc, #208]	; (5fa8 <usb_dc_ep_read_continue+0x17c>)
    5ed6:	f007 fffd 	bl	ded4 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    5eda:	4934      	ldr	r1, [pc, #208]	; (5fac <usb_dc_ep_read_continue+0x180>)
    5edc:	4834      	ldr	r0, [pc, #208]	; (5fb0 <usb_dc_ep_read_continue+0x184>)
    5ede:	f008 f81a 	bl	df16 <k_work_submit_to_queue>
}
    5ee2:	e7cd      	b.n	5e80 <usb_dc_ep_read_continue+0x54>
    5ee4:	4b2c      	ldr	r3, [pc, #176]	; (5f98 <usb_dc_ep_read_continue+0x16c>)
    5ee6:	4a2d      	ldr	r2, [pc, #180]	; (5f9c <usb_dc_ep_read_continue+0x170>)
    5ee8:	1a9b      	subs	r3, r3, r2
    5eea:	08db      	lsrs	r3, r3, #3
		LOG_ERR("USBD event allocation failed!");
    5eec:	f04f 0100 	mov.w	r1, #0
    5ef0:	2201      	movs	r2, #1
    5ef2:	f362 0102 	bfi	r1, r2, #0, #3
    5ef6:	f36f 01c5 	bfc	r1, #3, #3
    5efa:	f363 118f 	bfi	r1, r3, #6, #10
    5efe:	482d      	ldr	r0, [pc, #180]	; (5fb4 <usb_dc_ep_read_continue+0x188>)
    5f00:	f7fb fc5c 	bl	17bc <log_0>
static inline void usbd_evt_flush(void)
    5f04:	e004      	b.n	5f10 <usb_dc_ep_read_continue+0xe4>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    5f06:	1d01      	adds	r1, r0, #4
    5f08:	4826      	ldr	r0, [pc, #152]	; (5fa4 <usb_dc_ep_read_continue+0x178>)
    5f0a:	f007 fec0 	bl	dc8e <k_mem_slab_free>
	} while (ev != NULL);
    5f0e:	b145      	cbz	r5, 5f22 <usb_dc_ep_read_continue+0xf6>
	return z_impl_k_queue_get(queue, timeout);
    5f10:	2200      	movs	r2, #0
    5f12:	2300      	movs	r3, #0
    5f14:	4824      	ldr	r0, [pc, #144]	; (5fa8 <usb_dc_ep_read_continue+0x17c>)
    5f16:	f004 f8d7 	bl	a0c8 <z_impl_k_queue_get>
		if (ev) {
    5f1a:	4605      	mov	r5, r0
    5f1c:	2800      	cmp	r0, #0
    5f1e:	d1f2      	bne.n	5f06 <usb_dc_ep_read_continue+0xda>
    5f20:	e7f5      	b.n	5f0e <usb_dc_ep_read_continue+0xe2>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    5f22:	2200      	movs	r2, #0
    5f24:	2300      	movs	r3, #0
    5f26:	a901      	add	r1, sp, #4
    5f28:	481e      	ldr	r0, [pc, #120]	; (5fa4 <usb_dc_ep_read_continue+0x178>)
    5f2a:	f003 fec5 	bl	9cb8 <k_mem_slab_alloc>
    5f2e:	b180      	cbz	r0, 5f52 <usb_dc_ep_read_continue+0x126>
    5f30:	4b19      	ldr	r3, [pc, #100]	; (5f98 <usb_dc_ep_read_continue+0x16c>)
    5f32:	4a1a      	ldr	r2, [pc, #104]	; (5f9c <usb_dc_ep_read_continue+0x170>)
    5f34:	1a9b      	subs	r3, r3, r2
    5f36:	08db      	lsrs	r3, r3, #3
			LOG_ERR("USBD event memory corrupted");
    5f38:	f04f 0100 	mov.w	r1, #0
    5f3c:	2201      	movs	r2, #1
    5f3e:	f362 0102 	bfi	r1, r2, #0, #3
    5f42:	f36f 01c5 	bfc	r1, #3, #3
    5f46:	f363 118f 	bfi	r1, r3, #6, #10
    5f4a:	481b      	ldr	r0, [pc, #108]	; (5fb8 <usb_dc_ep_read_continue+0x18c>)
    5f4c:	f7fb fc36 	bl	17bc <log_0>
			return NULL;
    5f50:	e7b9      	b.n	5ec6 <usb_dc_ep_read_continue+0x9a>
		ev = (struct usbd_event *)block.data;
    5f52:	9901      	ldr	r1, [sp, #4]
		ev->block = block;
    5f54:	6049      	str	r1, [r1, #4]
		ev->evt_type = USBD_EVT_REINIT;
    5f56:	2304      	movs	r3, #4
    5f58:	740b      	strb	r3, [r1, #16]
	k_fifo_put(&usbd_evt_fifo, ev);
    5f5a:	4813      	ldr	r0, [pc, #76]	; (5fa8 <usb_dc_ep_read_continue+0x17c>)
    5f5c:	f007 ffba 	bl	ded4 <k_queue_append>
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    5f60:	4912      	ldr	r1, [pc, #72]	; (5fac <usb_dc_ep_read_continue+0x180>)
    5f62:	4813      	ldr	r0, [pc, #76]	; (5fb0 <usb_dc_ep_read_continue+0x184>)
    5f64:	f007 ffd7 	bl	df16 <k_work_submit_to_queue>
		return NULL;
    5f68:	e7ad      	b.n	5ec6 <usb_dc_ep_read_continue+0x9a>
	return z_impl_k_mutex_unlock(mutex);
    5f6a:	480a      	ldr	r0, [pc, #40]	; (5f94 <usb_dc_ep_read_continue+0x168>)
    5f6c:	f004 f868 	bl	a040 <z_impl_k_mutex_unlock>
				return -ENOMEM;
    5f70:	f06f 000b 	mvn.w	r0, #11
    5f74:	e788      	b.n	5e88 <usb_dc_ep_read_continue+0x5c>
		return -ENODEV;
    5f76:	f06f 0012 	mvn.w	r0, #18
}
    5f7a:	4770      	bx	lr
		return -ENODEV;
    5f7c:	f06f 0012 	mvn.w	r0, #18
    5f80:	e782      	b.n	5e88 <usb_dc_ep_read_continue+0x5c>
		return -EINVAL;
    5f82:	f06f 0015 	mvn.w	r0, #21
    5f86:	e77f      	b.n	5e88 <usb_dc_ep_read_continue+0x5c>
		return -EINVAL;
    5f88:	f06f 0015 	mvn.w	r0, #21
    5f8c:	e77c      	b.n	5e88 <usb_dc_ep_read_continue+0x5c>
    5f8e:	bf00      	nop
    5f90:	20001a18 	.word	0x20001a18
    5f94:	20001a50 	.word	0x20001a50
    5f98:	0000e884 	.word	0x0000e884
    5f9c:	0000e82c 	.word	0x0000e82c
    5fa0:	0000f6a0 	.word	0x0000f6a0
    5fa4:	200001bc 	.word	0x200001bc
    5fa8:	20000274 	.word	0x20000274
    5fac:	20001a40 	.word	0x20001a40
    5fb0:	20000520 	.word	0x20000520
    5fb4:	0000f4c8 	.word	0x0000f4c8
    5fb8:	0000f4e8 	.word	0x0000f4e8

00005fbc <usb_dc_ep_set_callback>:
	return get_usbd_ctx()->attached;
    5fbc:	4b08      	ldr	r3, [pc, #32]	; (5fe0 <usb_dc_ep_set_callback+0x24>)
    5fbe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
    5fc2:	b13b      	cbz	r3, 5fd4 <usb_dc_ep_set_callback+0x18>
{
    5fc4:	b510      	push	{r4, lr}
    5fc6:	460c      	mov	r4, r1
	ep_ctx = endpoint_ctx(ep);
    5fc8:	f7fe fcac 	bl	4924 <endpoint_ctx>
	if (!ep_ctx) {
    5fcc:	b128      	cbz	r0, 5fda <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
    5fce:	6004      	str	r4, [r0, #0]
	return 0;
    5fd0:	2000      	movs	r0, #0
}
    5fd2:	bd10      	pop	{r4, pc}
		return -ENODEV;
    5fd4:	f06f 0012 	mvn.w	r0, #18
}
    5fd8:	4770      	bx	lr
		return -EINVAL;
    5fda:	f06f 0015 	mvn.w	r0, #21
    5fde:	e7f8      	b.n	5fd2 <usb_dc_ep_set_callback+0x16>
    5fe0:	20001a18 	.word	0x20001a18

00005fe4 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
    5fe4:	4b01      	ldr	r3, [pc, #4]	; (5fec <usb_dc_set_status_callback+0x8>)
    5fe6:	6018      	str	r0, [r3, #0]
}
    5fe8:	4770      	bx	lr
    5fea:	bf00      	nop
    5fec:	20001a18 	.word	0x20001a18

00005ff0 <usb_dc_ep_mps>:
{
    5ff0:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    5ff2:	4b07      	ldr	r3, [pc, #28]	; (6010 <usb_dc_ep_mps+0x20>)
    5ff4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if (!dev_attached()) {
    5ff8:	b123      	cbz	r3, 6004 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
    5ffa:	f7fe fc93 	bl	4924 <endpoint_ctx>
	if (!ep_ctx) {
    5ffe:	b120      	cbz	r0, 600a <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
    6000:	6840      	ldr	r0, [r0, #4]
}
    6002:	bd08      	pop	{r3, pc}
		return -ENODEV;
    6004:	f06f 0012 	mvn.w	r0, #18
    6008:	e7fb      	b.n	6002 <usb_dc_ep_mps+0x12>
		return -EINVAL;
    600a:	f06f 0015 	mvn.w	r0, #21
    600e:	e7f8      	b.n	6002 <usb_dc_ep_mps+0x12>
    6010:	20001a18 	.word	0x20001a18

00006014 <get_hf_flags>:
static uint32_t *get_hf_flags(void)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;

	return &data->subsys[CLOCK_CONTROL_NRF_TYPE_HFCLK].flags;
}
    6014:	4800      	ldr	r0, [pc, #0]	; (6018 <get_hf_flags+0x4>)
    6016:	4770      	bx	lr
    6018:	20001cf8 	.word	0x20001cf8

0000601c <get_subsys>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    601c:	4b03      	ldr	r3, [pc, #12]	; (602c <get_subsys+0x10>)
    601e:	1ac0      	subs	r0, r0, r3
    6020:	1080      	asrs	r0, r0, #2

	return (clock_control_subsys_t)offset;
}
    6022:	4b03      	ldr	r3, [pc, #12]	; (6030 <get_subsys+0x14>)
    6024:	fb03 f000 	mul.w	r0, r3, r0
    6028:	4770      	bx	lr
    602a:	bf00      	nop
    602c:	20001cb8 	.word	0x20001cb8
    6030:	b6db6db7 	.word	0xb6db6db7

00006034 <onoff_stop>:

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    6034:	b538      	push	{r3, r4, r5, lr}
    6036:	4605      	mov	r5, r0
    6038:	460c      	mov	r4, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    603a:	f7ff ffef 	bl	601c <get_subsys>
    603e:	4601      	mov	r1, r0
    6040:	2240      	movs	r2, #64	; 0x40
    6042:	4803      	ldr	r0, [pc, #12]	; (6050 <onoff_stop+0x1c>)
    6044:	f007 f999 	bl	d37a <stop>
    6048:	4601      	mov	r1, r0
	notify(mgr, res);
    604a:	4628      	mov	r0, r5
    604c:	47a0      	blx	r4
}
    604e:	bd38      	pop	{r3, r4, r5, pc}
    6050:	0000e634 	.word	0x0000e634

00006054 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    6054:	b530      	push	{r4, r5, lr}
    6056:	b083      	sub	sp, #12
    6058:	4605      	mov	r5, r0
    605a:	460c      	mov	r4, r1
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    605c:	f7ff ffde 	bl	601c <get_subsys>
    6060:	4601      	mov	r1, r0
    6062:	2340      	movs	r3, #64	; 0x40
    6064:	9300      	str	r3, [sp, #0]
    6066:	4623      	mov	r3, r4
    6068:	4a05      	ldr	r2, [pc, #20]	; (6080 <onoff_start+0x2c>)
    606a:	4806      	ldr	r0, [pc, #24]	; (6084 <onoff_start+0x30>)
    606c:	f007 f99f 	bl	d3ae <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    6070:	1e01      	subs	r1, r0, #0
    6072:	db01      	blt.n	6078 <onoff_start+0x24>
		notify(mgr, err);
	}
}
    6074:	b003      	add	sp, #12
    6076:	bd30      	pop	{r4, r5, pc}
		notify(mgr, err);
    6078:	4628      	mov	r0, r5
    607a:	47a0      	blx	r4
}
    607c:	e7fa      	b.n	6074 <onoff_start+0x20>
    607e:	bf00      	nop
    6080:	0000d3f7 	.word	0x0000d3f7
    6084:	0000e634 	.word	0x0000e634

00006088 <clock_event_handler>:
		__ASSERT_NO_MSG(false);
	}
}

static void clock_event_handler(nrfx_clock_evt_type_t event)
{
    6088:	b508      	push	{r3, lr}
	const struct device *dev = CLOCK_DEVICE;

	switch (event) {
    608a:	b110      	cbz	r0, 6092 <clock_event_handler+0xa>
    608c:	2801      	cmp	r0, #1
    608e:	d00d      	beq.n	60ac <clock_event_handler+0x24>
		break;
	default:
		__ASSERT_NO_MSG(0);
		break;
	}
}
    6090:	bd08      	pop	{r3, pc}
				get_sub_data(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    6092:	2100      	movs	r1, #0
    6094:	4808      	ldr	r0, [pc, #32]	; (60b8 <clock_event_handler+0x30>)
    6096:	f007 f8f7 	bl	d288 <get_sub_data>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    609a:	6883      	ldr	r3, [r0, #8]
    609c:	f013 0f07 	tst.w	r3, #7
    60a0:	d1f6      	bne.n	6090 <clock_event_handler+0x8>
			clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_HFCLK);
    60a2:	2100      	movs	r1, #0
    60a4:	4804      	ldr	r0, [pc, #16]	; (60b8 <clock_event_handler+0x30>)
    60a6:	f007 f956 	bl	d356 <clkstarted_handle>
    60aa:	e7f1      	b.n	6090 <clock_event_handler+0x8>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    60ac:	2101      	movs	r1, #1
    60ae:	4802      	ldr	r0, [pc, #8]	; (60b8 <clock_event_handler+0x30>)
    60b0:	f007 f951 	bl	d356 <clkstarted_handle>
}
    60b4:	e7ec      	b.n	6090 <clock_event_handler+0x8>
    60b6:	bf00      	nop
    60b8:	0000e634 	.word	0x0000e634

000060bc <generic_hfclk_start>:
{
    60bc:	b510      	push	{r4, lr}
	__asm__ volatile(
    60be:	f04f 0320 	mov.w	r3, #32
    60c2:	f3ef 8411 	mrs	r4, BASEPRI
    60c6:	f383 8812 	msr	BASEPRI_MAX, r3
    60ca:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    60ce:	4a13      	ldr	r2, [pc, #76]	; (611c <generic_hfclk_start+0x60>)
    60d0:	6813      	ldr	r3, [r2, #0]
    60d2:	f043 0302 	orr.w	r3, r3, #2
    60d6:	6013      	str	r3, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    60d8:	f013 0f01 	tst.w	r3, #1
    60dc:	d108      	bne.n	60f0 <generic_hfclk_start+0x34>
	bool already_started = false;
    60de:	2300      	movs	r3, #0
	__asm__ volatile(
    60e0:	f384 8811 	msr	BASEPRI, r4
    60e4:	f3bf 8f6f 	isb	sy
	if (already_started) {
    60e8:	b99b      	cbnz	r3, 6112 <generic_hfclk_start+0x56>
	hfclk_start();
    60ea:	f007 f98c 	bl	d406 <hfclk_start>
}
    60ee:	bd10      	pop	{r4, pc}
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    60f0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    60f4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    60f8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    60fc:	f012 0f01 	tst.w	r2, #1
    6100:	d101      	bne.n	6106 <generic_hfclk_start+0x4a>
	bool already_started = false;
    6102:	2300      	movs	r3, #0
    6104:	e7ec      	b.n	60e0 <generic_hfclk_start+0x24>
			set_on_state(get_hf_flags());
    6106:	f7ff ff85 	bl	6014 <get_hf_flags>
    610a:	f007 f911 	bl	d330 <set_on_state>
			already_started = true;
    610e:	2301      	movs	r3, #1
    6110:	e7e6      	b.n	60e0 <generic_hfclk_start+0x24>
		clkstarted_handle(CLOCK_DEVICE,
    6112:	2100      	movs	r1, #0
    6114:	4802      	ldr	r0, [pc, #8]	; (6120 <generic_hfclk_start+0x64>)
    6116:	f007 f91e 	bl	d356 <clkstarted_handle>
		return;
    611a:	e7e8      	b.n	60ee <generic_hfclk_start+0x32>
    611c:	20001d08 	.word	0x20001d08
    6120:	0000e634 	.word	0x0000e634

00006124 <generic_hfclk_stop>:
{
    6124:	b508      	push	{r3, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6126:	4b0a      	ldr	r3, [pc, #40]	; (6150 <generic_hfclk_stop+0x2c>)
    6128:	f3bf 8f5b 	dmb	ish
    612c:	e853 2f00 	ldrex	r2, [r3]
    6130:	f022 0102 	bic.w	r1, r2, #2
    6134:	e843 1000 	strex	r0, r1, [r3]
    6138:	2800      	cmp	r0, #0
    613a:	d1f7      	bne.n	612c <generic_hfclk_stop+0x8>
    613c:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    6140:	f012 0f01 	tst.w	r2, #1
    6144:	d000      	beq.n	6148 <generic_hfclk_stop+0x24>
}
    6146:	bd08      	pop	{r3, pc}
	hfclk_stop();
    6148:	f007 f967 	bl	d41a <hfclk_stop>
    614c:	e7fb      	b.n	6146 <generic_hfclk_stop+0x22>
    614e:	bf00      	nop
    6150:	20001d08 	.word	0x20001d08

00006154 <api_blocking_start>:
{
    6154:	b500      	push	{lr}
    6156:	b085      	sub	sp, #20
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    6158:	f8cd d000 	str.w	sp, [sp]
    615c:	f8cd d004 	str.w	sp, [sp, #4]
    6160:	2300      	movs	r3, #0
    6162:	9302      	str	r3, [sp, #8]
    6164:	2301      	movs	r3, #1
    6166:	9303      	str	r3, [sp, #12]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    6168:	466b      	mov	r3, sp
    616a:	4a07      	ldr	r2, [pc, #28]	; (6188 <api_blocking_start+0x34>)
    616c:	f007 f93b 	bl	d3e6 <api_start>
	if (err < 0) {
    6170:	2800      	cmp	r0, #0
    6172:	db05      	blt.n	6180 <api_blocking_start+0x2c>
	return z_impl_k_sem_take(sem, timeout);
    6174:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    6178:	2300      	movs	r3, #0
    617a:	4668      	mov	r0, sp
    617c:	f004 f804 	bl	a188 <z_impl_k_sem_take>
}
    6180:	b005      	add	sp, #20
    6182:	f85d fb04 	ldr.w	pc, [sp], #4
    6186:	bf00      	nop
    6188:	0000d42f 	.word	0x0000d42f

0000618c <clk_init>:
#endif /* NRF_CLOCK_HAS_HFCLKAUDIO */
#endif
}

static int clk_init(const struct device *dev)
{
    618c:	b570      	push	{r4, r5, r6, lr}
    618e:	4606      	mov	r6, r0
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6190:	2200      	movs	r2, #0
    6192:	2101      	movs	r1, #1
    6194:	4610      	mov	r0, r2
    6196:	f7fd fd23 	bl	3be0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    619a:	2000      	movs	r0, #0
    619c:	f7fd fcee 	bl	3b7c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    61a0:	4811      	ldr	r0, [pc, #68]	; (61e8 <clk_init+0x5c>)
    61a2:	f001 f99b 	bl	74dc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    61a6:	4b11      	ldr	r3, [pc, #68]	; (61ec <clk_init+0x60>)
    61a8:	4298      	cmp	r0, r3
    61aa:	d11a      	bne.n	61e2 <clk_init+0x56>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    61ac:	f001 f9aa 	bl	7504 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
    61b0:	2400      	movs	r4, #0
    61b2:	e003      	b.n	61bc <clk_init+0x30>
					 &transitions);
		if (err < 0) {
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    61b4:	2301      	movs	r3, #1
    61b6:	60ab      	str	r3, [r5, #8]
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
    61b8:	441c      	add	r4, r3
    61ba:	b2e4      	uxtb	r4, r4
	for (enum clock_control_nrf_type i = 0;
    61bc:	2c01      	cmp	r4, #1
    61be:	d80e      	bhi.n	61de <clk_init+0x52>
						get_sub_data(dev, i);
    61c0:	4621      	mov	r1, r4
    61c2:	4630      	mov	r0, r6
    61c4:	f007 f860 	bl	d288 <get_sub_data>
    61c8:	4605      	mov	r5, r0
		err = onoff_manager_init(get_onoff_manager(dev, i),
    61ca:	4621      	mov	r1, r4
    61cc:	4630      	mov	r0, r6
    61ce:	f007 f868 	bl	d2a2 <get_onoff_manager>
    61d2:	4907      	ldr	r1, [pc, #28]	; (61f0 <clk_init+0x64>)
    61d4:	f005 fb0d 	bl	b7f2 <onoff_manager_init>
		if (err < 0) {
    61d8:	2800      	cmp	r0, #0
    61da:	daeb      	bge.n	61b4 <clk_init+0x28>
    61dc:	e000      	b.n	61e0 <clk_init+0x54>
	}

	return 0;
    61de:	2000      	movs	r0, #0
}
    61e0:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    61e2:	f06f 0004 	mvn.w	r0, #4
    61e6:	e7fb      	b.n	61e0 <clk_init+0x54>
    61e8:	00006089 	.word	0x00006089
    61ec:	0bad0000 	.word	0x0bad0000
    61f0:	0000f744 	.word	0x0000f744

000061f4 <lfclk_spinwait>:
{
    61f4:	b570      	push	{r4, r5, r6, lr}
    61f6:	4605      	mov	r5, r0
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    61f8:	2801      	cmp	r0, #1
    61fa:	d107      	bne.n	620c <lfclk_spinwait+0x18>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    61fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6200:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    6204:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    6208:	2b01      	cmp	r3, #1
    620a:	d058      	beq.n	62be <lfclk_spinwait+0xca>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    620c:	f007 fd7d 	bl	dd0a <k_is_in_isr>
    6210:	b928      	cbnz	r0, 621e <lfclk_spinwait+0x2a>
	return !z_sys_post_kernel;
    6212:	4b2e      	ldr	r3, [pc, #184]	; (62cc <lfclk_spinwait+0xd8>)
    6214:	781b      	ldrb	r3, [r3, #0]
    6216:	2b00      	cmp	r3, #0
    6218:	d041      	beq.n	629e <lfclk_spinwait+0xaa>
    621a:	2300      	movs	r3, #0
    621c:	e000      	b.n	6220 <lfclk_spinwait+0x2c>
    621e:	2301      	movs	r3, #1
	int key = isr_mode ? irq_lock() : 0;
    6220:	461c      	mov	r4, r3
    6222:	2b00      	cmp	r3, #0
    6224:	d03d      	beq.n	62a2 <lfclk_spinwait+0xae>
	__asm__ volatile(
    6226:	f04f 0320 	mov.w	r3, #32
    622a:	f3ef 8611 	mrs	r6, BASEPRI
    622e:	f383 8812 	msr	BASEPRI_MAX, r3
    6232:	f3bf 8f6f 	isb	sy
	if (!isr_mode) {
    6236:	b924      	cbnz	r4, 6242 <lfclk_spinwait+0x4e>
    p_reg->INTENCLR = mask;
    6238:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    623c:	2202      	movs	r2, #2
    623e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6242:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6246:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    624a:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    624e:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    6252:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    6256:	d12b      	bne.n	62b0 <lfclk_spinwait+0xbc>
    return false;
    6258:	2200      	movs	r2, #0
	while (!(nrfx_clock_is_running(d, (void *)&type)
    625a:	b11a      	cbz	r2, 6264 <lfclk_spinwait+0x70>
    625c:	2b01      	cmp	r3, #1
    625e:	d029      	beq.n	62b4 <lfclk_spinwait+0xc0>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    6260:	2d01      	cmp	r5, #1
    6262:	d027      	beq.n	62b4 <lfclk_spinwait+0xc0>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    6264:	b1fc      	cbz	r4, 62a6 <lfclk_spinwait+0xb2>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    6266:	4630      	mov	r0, r6
    6268:	f7fd fc30 	bl	3acc <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    626c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6270:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    6274:	2b00      	cmp	r3, #0
    6276:	d1e4      	bne.n	6242 <lfclk_spinwait+0x4e>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6278:	4b15      	ldr	r3, [pc, #84]	; (62d0 <lfclk_spinwait+0xdc>)
    627a:	681b      	ldr	r3, [r3, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    627c:	2b00      	cmp	r3, #0
    627e:	d0e0      	beq.n	6242 <lfclk_spinwait+0x4e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6280:	4b13      	ldr	r3, [pc, #76]	; (62d0 <lfclk_spinwait+0xdc>)
    6282:	2200      	movs	r2, #0
    6284:	601a      	str	r2, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    6286:	681b      	ldr	r3, [r3, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    6288:	2301      	movs	r3, #1
    628a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    628e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6292:	4a10      	ldr	r2, [pc, #64]	; (62d4 <lfclk_spinwait+0xe0>)
    6294:	f8c2 3180 	str.w	r3, [r2, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6298:	4a0f      	ldr	r2, [pc, #60]	; (62d8 <lfclk_spinwait+0xe4>)
    629a:	6013      	str	r3, [r2, #0]
}
    629c:	e7d1      	b.n	6242 <lfclk_spinwait+0x4e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    629e:	2301      	movs	r3, #1
    62a0:	e7be      	b.n	6220 <lfclk_spinwait+0x2c>
	int key = isr_mode ? irq_lock() : 0;
    62a2:	2600      	movs	r6, #0
    62a4:	e7c7      	b.n	6236 <lfclk_spinwait+0x42>
	return z_impl_k_sleep(timeout);
    62a6:	2021      	movs	r0, #33	; 0x21
    62a8:	2100      	movs	r1, #0
    62aa:	f004 fc87 	bl	abbc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    62ae:	e7dd      	b.n	626c <lfclk_spinwait+0x78>
                return true;
    62b0:	2201      	movs	r2, #1
    62b2:	e7d2      	b.n	625a <lfclk_spinwait+0x66>
	if (isr_mode) {
    62b4:	b124      	cbz	r4, 62c0 <lfclk_spinwait+0xcc>
	__asm__ volatile(
    62b6:	f386 8811 	msr	BASEPRI, r6
    62ba:	f3bf 8f6f 	isb	sy
}
    62be:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENSET = mask;
    62c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    62c4:	2202      	movs	r2, #2
    62c6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    62ca:	e7f8      	b.n	62be <lfclk_spinwait+0xca>
    62cc:	20002556 	.word	0x20002556
    62d0:	40000104 	.word	0x40000104
    62d4:	e000e100 	.word	0xe000e100
    62d8:	40000008 	.word	0x40000008

000062dc <z_nrf_clock_control_get_onoff>:
{
    62dc:	b508      	push	{r3, lr}
	return get_onoff_manager(CLOCK_DEVICE,
    62de:	b2c1      	uxtb	r1, r0
    62e0:	4801      	ldr	r0, [pc, #4]	; (62e8 <z_nrf_clock_control_get_onoff+0xc>)
    62e2:	f006 ffde 	bl	d2a2 <get_onoff_manager>
}
    62e6:	bd08      	pop	{r3, pc}
    62e8:	0000e634 	.word	0x0000e634

000062ec <z_nrf_clock_control_lf_on>:
{
    62ec:	b510      	push	{r4, lr}
    62ee:	4604      	mov	r4, r0
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    62f0:	4b10      	ldr	r3, [pc, #64]	; (6334 <z_nrf_clock_control_lf_on+0x48>)
    62f2:	2101      	movs	r1, #1
    62f4:	f3bf 8f5b 	dmb	ish
    62f8:	e853 2f00 	ldrex	r2, [r3]
    62fc:	e843 1000 	strex	r0, r1, [r3]
    6300:	2800      	cmp	r0, #0
    6302:	d1f9      	bne.n	62f8 <z_nrf_clock_control_lf_on+0xc>
    6304:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    6308:	b11a      	cbz	r2, 6312 <z_nrf_clock_control_lf_on+0x26>
	switch (start_mode) {
    630a:	1e63      	subs	r3, r4, #1
    630c:	2b01      	cmp	r3, #1
    630e:	d90c      	bls.n	632a <z_nrf_clock_control_lf_on+0x3e>
}
    6310:	bd10      	pop	{r4, pc}
				get_onoff_manager(CLOCK_DEVICE,
    6312:	4809      	ldr	r0, [pc, #36]	; (6338 <z_nrf_clock_control_lf_on+0x4c>)
    6314:	f006 ffc5 	bl	d2a2 <get_onoff_manager>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    6318:	4908      	ldr	r1, [pc, #32]	; (633c <z_nrf_clock_control_lf_on+0x50>)
    631a:	2300      	movs	r3, #0
    631c:	604b      	str	r3, [r1, #4]
    631e:	60cb      	str	r3, [r1, #12]
    6320:	2301      	movs	r3, #1
    6322:	608b      	str	r3, [r1, #8]
		err = onoff_request(mgr, &cli);
    6324:	f005 fa81 	bl	b82a <onoff_request>
    6328:	e7ef      	b.n	630a <z_nrf_clock_control_lf_on+0x1e>
		lfclk_spinwait(start_mode);
    632a:	4620      	mov	r0, r4
    632c:	f7ff ff62 	bl	61f4 <lfclk_spinwait>
		break;
    6330:	e7ee      	b.n	6310 <z_nrf_clock_control_lf_on+0x24>
    6332:	bf00      	nop
    6334:	20001d0c 	.word	0x20001d0c
    6338:	0000e634 	.word	0x0000e634
    633c:	20001ca8 	.word	0x20001ca8

00006340 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    6340:	b510      	push	{r4, lr}
    6342:	4604      	mov	r4, r0
		return c;
	}

#endif  /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    6344:	280a      	cmp	r0, #10
    6346:	d007      	beq.n	6358 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    6348:	4b07      	ldr	r3, [pc, #28]	; (6368 <console_out+0x28>)
    634a:	6818      	ldr	r0, [r3, #0]
    634c:	b2e1      	uxtb	r1, r4
	const struct uart_driver_api *api =
    634e:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    6350:	685b      	ldr	r3, [r3, #4]
    6352:	4798      	blx	r3

	return c;
}
    6354:	4620      	mov	r0, r4
    6356:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    6358:	4b03      	ldr	r3, [pc, #12]	; (6368 <console_out+0x28>)
    635a:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api =
    635c:	6883      	ldr	r3, [r0, #8]
	api->poll_out(dev, out_char);
    635e:	685b      	ldr	r3, [r3, #4]
    6360:	210d      	movs	r1, #13
    6362:	4798      	blx	r3
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_poll_out(dev, out_char);
}
    6364:	e7f0      	b.n	6348 <console_out+0x8>
    6366:	bf00      	nop
    6368:	20001d10 	.word	0x20001d10

0000636c <uart_console_hook_install>:
 *
 * @return N/A
 */

static void uart_console_hook_install(void)
{
    636c:	b510      	push	{r4, lr}
	__stdout_hook_install(console_out);
    636e:	4c04      	ldr	r4, [pc, #16]	; (6380 <uart_console_hook_install+0x14>)
    6370:	4620      	mov	r0, r4
    6372:	f7fe fa97 	bl	48a4 <__stdout_hook_install>
	__printk_hook_install(console_out);
    6376:	4620      	mov	r0, r4
    6378:	f7fa f918 	bl	5ac <__printk_hook_install>
}
    637c:	bd10      	pop	{r4, pc}
    637e:	bf00      	nop
    6380:	00006341 	.word	0x00006341

00006384 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    6384:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    6386:	4806      	ldr	r0, [pc, #24]	; (63a0 <uart_console_init+0x1c>)
    6388:	4b06      	ldr	r3, [pc, #24]	; (63a4 <uart_console_init+0x20>)
    638a:	6018      	str	r0, [r3, #0]
    638c:	f007 fc4d 	bl	dc2a <z_device_ready>
    6390:	b118      	cbz	r0, 639a <uart_console_init+0x16>
	if (!device_is_ready(uart_console_dev)) {
		return -ENODEV;
	}

	uart_console_hook_install();
    6392:	f7ff ffeb 	bl	636c <uart_console_hook_install>

	return 0;
    6396:	2000      	movs	r0, #0
}
    6398:	bd08      	pop	{r3, pc}
		return -ENODEV;
    639a:	f06f 0012 	mvn.w	r0, #18
    639e:	e7fb      	b.n	6398 <uart_console_init+0x14>
    63a0:	0000e64c 	.word	0x0000e64c
    63a4:	20001d10 	.word	0x20001d10

000063a8 <gpio_nrfx_config>:
	return res;
}

static int gpio_nrfx_config(const struct device *port,
			    gpio_pin_t pin, gpio_flags_t flags)
{
    63a8:	b4f0      	push	{r4, r5, r6, r7}
	return port->config;
    63aa:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    63ac:	685f      	ldr	r7, [r3, #4]
	nrf_gpio_pin_pull_t pull;
	nrf_gpio_pin_drive_t drive;
	nrf_gpio_pin_dir_t dir;
	nrf_gpio_pin_input_t input;

	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    63ae:	4b37      	ldr	r3, [pc, #220]	; (648c <gpio_nrfx_config+0xe4>)
    63b0:	4013      	ands	r3, r2
    63b2:	4c37      	ldr	r4, [pc, #220]	; (6490 <gpio_nrfx_config+0xe8>)
    63b4:	42a3      	cmp	r3, r4
    63b6:	d027      	beq.n	6408 <gpio_nrfx_config+0x60>
    63b8:	d812      	bhi.n	63e0 <gpio_nrfx_config+0x38>
    63ba:	2b06      	cmp	r3, #6
    63bc:	d026      	beq.n	640c <gpio_nrfx_config+0x64>
    63be:	d904      	bls.n	63ca <gpio_nrfx_config+0x22>
    63c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    63c4:	d109      	bne.n	63da <gpio_nrfx_config+0x32>
	case GPIO_DS_DFLT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_S0D1;
		break;

	case GPIO_DS_ALT_LOW | GPIO_DS_DFLT_HIGH:
		drive = NRF_GPIO_PIN_H0S1;
    63c6:	2401      	movs	r4, #1
    63c8:	e016      	b.n	63f8 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    63ca:	b30b      	cbz	r3, 6410 <gpio_nrfx_config+0x68>
    63cc:	2b02      	cmp	r3, #2
    63ce:	d101      	bne.n	63d4 <gpio_nrfx_config+0x2c>
	case GPIO_DS_ALT_LOW | GPIO_OPEN_DRAIN:
		drive = NRF_GPIO_PIN_H0D1;
		break;

	case GPIO_DS_DFLT_HIGH | GPIO_OPEN_SOURCE:
		drive = NRF_GPIO_PIN_D0S1;
    63d0:	2404      	movs	r4, #4
    63d2:	e011      	b.n	63f8 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    63d4:	f06f 0015 	mvn.w	r0, #21
    63d8:	e046      	b.n	6468 <gpio_nrfx_config+0xc0>
    63da:	f06f 0015 	mvn.w	r0, #21
    63de:	e043      	b.n	6468 <gpio_nrfx_config+0xc0>
    63e0:	4c2c      	ldr	r4, [pc, #176]	; (6494 <gpio_nrfx_config+0xec>)
    63e2:	42a3      	cmp	r3, r4
    63e4:	d016      	beq.n	6414 <gpio_nrfx_config+0x6c>
    63e6:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    63ea:	d101      	bne.n	63f0 <gpio_nrfx_config+0x48>
		drive = NRF_GPIO_PIN_H0H1;
    63ec:	2403      	movs	r4, #3
    63ee:	e003      	b.n	63f8 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    63f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    63f4:	d146      	bne.n	6484 <gpio_nrfx_config+0xdc>
		drive = NRF_GPIO_PIN_S0H1;
    63f6:	2402      	movs	r4, #2

	default:
		return -EINVAL;
	}

	if ((flags & GPIO_PULL_UP) != 0) {
    63f8:	f012 0f10 	tst.w	r2, #16
    63fc:	d10c      	bne.n	6418 <gpio_nrfx_config+0x70>
		pull = NRF_GPIO_PIN_PULLUP;
	} else if ((flags & GPIO_PULL_DOWN) != 0) {
    63fe:	f012 0f20 	tst.w	r2, #32
    6402:	d033      	beq.n	646c <gpio_nrfx_config+0xc4>
		pull = NRF_GPIO_PIN_PULLDOWN;
    6404:	2501      	movs	r5, #1
    6406:	e008      	b.n	641a <gpio_nrfx_config+0x72>
		drive = NRF_GPIO_PIN_H0D1;
    6408:	2407      	movs	r4, #7
    640a:	e7f5      	b.n	63f8 <gpio_nrfx_config+0x50>
		drive = NRF_GPIO_PIN_S0D1;
    640c:	2406      	movs	r4, #6
    640e:	e7f3      	b.n	63f8 <gpio_nrfx_config+0x50>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    6410:	2400      	movs	r4, #0
    6412:	e7f1      	b.n	63f8 <gpio_nrfx_config+0x50>
		drive = NRF_GPIO_PIN_D0H1;
    6414:	2405      	movs	r4, #5
    6416:	e7ef      	b.n	63f8 <gpio_nrfx_config+0x50>
		pull = NRF_GPIO_PIN_PULLUP;
    6418:	2503      	movs	r5, #3
	} else {
		pull = NRF_GPIO_PIN_NOPULL;
	}

	dir = ((flags & GPIO_OUTPUT) != 0)
    641a:	f3c2 2340 	ubfx	r3, r2, #9, #1
	      ? NRF_GPIO_PIN_DIR_OUTPUT
	      : NRF_GPIO_PIN_DIR_INPUT;

	input = ((flags & GPIO_INPUT) != 0)
		? NRF_GPIO_PIN_INPUT_CONNECT
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
    641e:	f412 7f80 	tst.w	r2, #256	; 0x100
    6422:	bf0c      	ite	eq
    6424:	2601      	moveq	r6, #1
    6426:	2600      	movne	r6, #0

	if ((flags & GPIO_OUTPUT) != 0) {
    6428:	f412 7f00 	tst.w	r2, #512	; 0x200
    642c:	d006      	beq.n	643c <gpio_nrfx_config+0x94>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
    642e:	f412 6f00 	tst.w	r2, #2048	; 0x800
    6432:	d01d      	beq.n	6470 <gpio_nrfx_config+0xc8>
			nrf_gpio_port_out_set(reg, BIT(pin));
    6434:	2201      	movs	r2, #1
    6436:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
    6438:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
	return port->config;
    643c:	6842      	ldr	r2, [r0, #4]
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
			nrf_gpio_port_out_clear(reg, BIT(pin));
		}
	}

	nrf_gpio_cfg(NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin),
    643e:	7a12      	ldrb	r2, [r2, #8]
    6440:	f001 011f 	and.w	r1, r1, #31
    6444:	ea41 1242 	orr.w	r2, r1, r2, lsl #5
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
    6448:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    644a:	2a01      	cmp	r2, #1
    644c:	d018      	beq.n	6480 <gpio_nrfx_config+0xd8>
        case 0: return NRF_P0;
    644e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    cnf |= ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)     |
    6452:	ea43 0346 	orr.w	r3, r3, r6, lsl #1
           ((uint32_t)input << GPIO_PIN_CNF_INPUT_Pos) |
    6456:	ea43 0385 	orr.w	r3, r3, r5, lsl #2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    645a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    645e:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
    6462:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		     dir, input, pull, drive, NRF_GPIO_PIN_NOSENSE);

	return 0;
    6466:	2000      	movs	r0, #0
}
    6468:	bcf0      	pop	{r4, r5, r6, r7}
    646a:	4770      	bx	lr
		pull = NRF_GPIO_PIN_NOPULL;
    646c:	2500      	movs	r5, #0
    646e:	e7d4      	b.n	641a <gpio_nrfx_config+0x72>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
    6470:	f412 6f80 	tst.w	r2, #1024	; 0x400
    6474:	d0e2      	beq.n	643c <gpio_nrfx_config+0x94>
			nrf_gpio_port_out_clear(reg, BIT(pin));
    6476:	2201      	movs	r2, #1
    6478:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    647a:	f8c7 250c 	str.w	r2, [r7, #1292]	; 0x50c
}
    647e:	e7dd      	b.n	643c <gpio_nrfx_config+0x94>
        case 1: return NRF_P1;
    6480:	4a05      	ldr	r2, [pc, #20]	; (6498 <gpio_nrfx_config+0xf0>)
    6482:	e7e6      	b.n	6452 <gpio_nrfx_config+0xaa>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    6484:	f06f 0015 	mvn.w	r0, #21
    6488:	e7ee      	b.n	6468 <gpio_nrfx_config+0xc0>
    648a:	bf00      	nop
    648c:	00f00006 	.word	0x00f00006
    6490:	00100006 	.word	0x00100006
    6494:	00400002 	.word	0x00400002
    6498:	50000300 	.word	0x50000300

0000649c <cfg_level_pins>:
	 */
	return out;
}

static void cfg_level_pins(const struct device *port)
{
    649c:	b4f0      	push	{r4, r5, r6, r7}
	return port->data;
    649e:	6905      	ldr	r5, [r0, #16]
	return port->config;
    64a0:	6846      	ldr	r6, [r0, #4]
	uint32_t out = data->pin_int_en;
    64a2:	68e9      	ldr	r1, [r5, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    64a4:	696a      	ldr	r2, [r5, #20]
    64a6:	69ab      	ldr	r3, [r5, #24]
    64a8:	4313      	orrs	r3, r2
    64aa:	ea21 0103 	bic.w	r1, r1, r3
	const struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;
    64ae:	2301      	movs	r3, #1
	uint32_t pin = 0U;
    64b0:	2000      	movs	r0, #0
	uint32_t level_pins = get_level_pins(port);

	/* Configure sense detection on all pins that use it. */
	while (level_pins) {
    64b2:	e011      	b.n	64d8 <cfg_level_pins+0x3c>
		return NRF_GPIO_PIN_SENSE_HIGH;
    64b4:	f04f 0c02 	mov.w	ip, #2
    64b8:	e01d      	b.n	64f6 <cfg_level_pins+0x5a>
    64ba:	4f14      	ldr	r7, [pc, #80]	; (650c <cfg_level_pins+0x70>)
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    64bc:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    64c0:	f857 2024 	ldr.w	r2, [r7, r4, lsl #2]
    64c4:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    64c8:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
    64cc:	f847 2024 	str.w	r2, [r7, r4, lsl #2]
		if (level_pins & bit) {
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
			uint32_t sense = sense_for_pin(data, pin);

			nrf_gpio_cfg_sense_set(abs_pin, sense);
			level_pins &= ~bit;
    64d0:	ea21 0103 	bic.w	r1, r1, r3
		}
		++pin;
    64d4:	3001      	adds	r0, #1
		bit <<= 1;
    64d6:	005b      	lsls	r3, r3, #1
	while (level_pins) {
    64d8:	b1a9      	cbz	r1, 6506 <cfg_level_pins+0x6a>
		if (level_pins & bit) {
    64da:	420b      	tst	r3, r1
    64dc:	d0fa      	beq.n	64d4 <cfg_level_pins+0x38>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    64de:	7a34      	ldrb	r4, [r6, #8]
    64e0:	f000 021f 	and.w	r2, r0, #31
    64e4:	ea42 1244 	orr.w	r2, r2, r4, lsl #5
	if ((BIT(pin) & data->int_active_level) != 0U) {
    64e8:	692c      	ldr	r4, [r5, #16]
    64ea:	40c4      	lsrs	r4, r0
    64ec:	f014 0f01 	tst.w	r4, #1
    64f0:	d1e0      	bne.n	64b4 <cfg_level_pins+0x18>
	return NRF_GPIO_PIN_SENSE_LOW;
    64f2:	f04f 0c03 	mov.w	ip, #3
    *p_pin = pin_number & 0x1F;
    64f6:	f002 041f 	and.w	r4, r2, #31
    return pin_number >> 5;
    64fa:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    64fc:	2a01      	cmp	r2, #1
    64fe:	d0dc      	beq.n	64ba <cfg_level_pins+0x1e>
        case 0: return NRF_P0;
    6500:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    6504:	e7da      	b.n	64bc <cfg_level_pins+0x20>
	}
}
    6506:	bcf0      	pop	{r4, r5, r6, r7}
    6508:	4770      	bx	lr
    650a:	bf00      	nop
    650c:	50000300 	.word	0x50000300

00006510 <check_level_trigger_pins>:
 *
 * @return Bitmask where 1 marks pin as trigger source.
 */
static uint32_t check_level_trigger_pins(const struct device *port,
					 uint32_t *sense_levels)
{
    6510:	b5f0      	push	{r4, r5, r6, r7, lr}
    6512:	468c      	mov	ip, r1
	return port->data;
    6514:	6903      	ldr	r3, [r0, #16]
	return port->config;
    6516:	6841      	ldr	r1, [r0, #4]
	uint32_t out = data->pin_int_en;
    6518:	68df      	ldr	r7, [r3, #12]
	out &= ~data->trig_edge & ~data->double_edge;
    651a:	695a      	ldr	r2, [r3, #20]
    651c:	6998      	ldr	r0, [r3, #24]
    651e:	4302      	orrs	r2, r0
    6520:	ea27 0702 	bic.w	r7, r7, r2
	struct gpio_nrfx_data *data = get_port_data(port);
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
	uint32_t level_pins = get_level_pins(port);
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
    6524:	684a      	ldr	r2, [r1, #4]
    return p_reg->IN;
    6526:	f8d2 2510 	ldr.w	r2, [r2, #1296]	; 0x510

	/* Extract which pins have logic level same as interrupt trigger level.
	 */
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
    652a:	6918      	ldr	r0, [r3, #16]
    652c:	4050      	eors	r0, r2

	/* Discard pins that aren't configured for level. */
	uint32_t out = pin_states & level_pins;
    652e:	ea27 0000 	bic.w	r0, r7, r0
	uint32_t pin = 0U;
	uint32_t bit = 1U << pin;

	uint32_t port_latch = 0;

	uint32_t check_pins = level_pins;
    6532:	463c      	mov	r4, r7
	uint32_t bit = 1U << pin;
    6534:	2301      	movs	r3, #1
	uint32_t pin = 0U;
    6536:	2500      	movs	r5, #0
#if IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE)
	/* Read LATCH, which will tell us which pin has changed its state. */
	port_latch = cfg->port->LATCH;
#endif

	while (check_pins) {
    6538:	e015      	b.n	6566 <check_level_trigger_pins+0x56>
        case 1: return NRF_P1;
    653a:	f8df e074 	ldr.w	lr, [pc, #116]	; 65b0 <check_level_trigger_pins+0xa0>
    653e:	e025      	b.n	658c <check_level_trigger_pins+0x7c>
    *p_pin = pin_number & 0x1F;
    6540:	f002 061f 	and.w	r6, r2, #31
    return pin_number >> 5;
    6544:	0952      	lsrs	r2, r2, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6546:	2a01      	cmp	r2, #1
    6548:	d02e      	beq.n	65a8 <check_level_trigger_pins+0x98>
        case 0: return NRF_P0;
    654a:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    654e:	f506 72e0 	add.w	r2, r6, #448	; 0x1c0
    6552:	f85e 6022 	ldr.w	r6, [lr, r2, lsl #2]
    6556:	f426 3640 	bic.w	r6, r6, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    655a:	f84e 6022 	str.w	r6, [lr, r2, lsl #2]
					*sense_levels |= bit;
				}
			}

			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
			check_pins &= ~bit;
    655e:	ea24 0403 	bic.w	r4, r4, r3
		}
		++pin;
    6562:	3501      	adds	r5, #1
		bit <<= 1;
    6564:	005b      	lsls	r3, r3, #1
	while (check_pins) {
    6566:	b314      	cbz	r4, 65ae <check_level_trigger_pins+0x9e>
		if (check_pins & bit) {
    6568:	4223      	tst	r3, r4
    656a:	d0fa      	beq.n	6562 <check_level_trigger_pins+0x52>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    656c:	7a0e      	ldrb	r6, [r1, #8]
    656e:	f005 021f 	and.w	r2, r5, #31
    6572:	ea42 1246 	orr.w	r2, r2, r6, lsl #5
			if (!(level_pins & bit)) {
    6576:	423b      	tst	r3, r7
    6578:	d1e2      	bne.n	6540 <check_level_trigger_pins+0x30>
    *p_pin = pin_number & 0x1F;
    657a:	f002 061f 	and.w	r6, r2, #31
    return pin_number >> 5;
    657e:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6582:	f1be 0f01 	cmp.w	lr, #1
    6586:	d0d8      	beq.n	653a <check_level_trigger_pins+0x2a>
        case 0: return NRF_P0;
    6588:	f04f 4ea0 	mov.w	lr, #1342177280	; 0x50000000
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    658c:	f506 76e0 	add.w	r6, r6, #448	; 0x1c0
    6590:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    6594:	f3c6 4601 	ubfx	r6, r6, #16, #2
				if (high) {
    6598:	2e02      	cmp	r6, #2
    659a:	d1d1      	bne.n	6540 <check_level_trigger_pins+0x30>
					*sense_levels |= bit;
    659c:	f8dc 6000 	ldr.w	r6, [ip]
    65a0:	431e      	orrs	r6, r3
    65a2:	f8cc 6000 	str.w	r6, [ip]
    65a6:	e7cb      	b.n	6540 <check_level_trigger_pins+0x30>
        case 1: return NRF_P1;
    65a8:	f8df e004 	ldr.w	lr, [pc, #4]	; 65b0 <check_level_trigger_pins+0xa0>
    65ac:	e7cf      	b.n	654e <check_level_trigger_pins+0x3e>
	 */
	cfg->port->LATCH = port_latch;
#endif

	return out;
}
    65ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    65b0:	50000300 	.word	0x50000300

000065b4 <gpiote_pin_cleanup>:
{
    65b4:	b510      	push	{r4, lr}
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    65b6:	4b14      	ldr	r3, [pc, #80]	; (6608 <gpiote_pin_cleanup+0x54>)
    65b8:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    65bc:	b2e4      	uxtb	r4, r4
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    65be:	2300      	movs	r3, #0
    65c0:	e000      	b.n	65c4 <gpiote_pin_cleanup+0x10>
    65c2:	3301      	adds	r3, #1
    65c4:	2b07      	cmp	r3, #7
    65c6:	d81d      	bhi.n	6604 <gpiote_pin_cleanup+0x50>
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    65c8:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    65cc:	490e      	ldr	r1, [pc, #56]	; (6608 <gpiote_pin_cleanup+0x54>)
    65ce:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    65d2:	f3c2 2205 	ubfx	r2, r2, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
    65d6:	4290      	cmp	r0, r2
    65d8:	d1f3      	bne.n	65c2 <gpiote_pin_cleanup+0xe>
		    && (intenset & BIT(i))) {
    65da:	fa24 f203 	lsr.w	r2, r4, r3
    65de:	f012 0f01 	tst.w	r2, #1
    65e2:	d0ee      	beq.n	65c2 <gpiote_pin_cleanup+0xe>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
    65e4:	460a      	mov	r2, r1
    65e6:	f503 70a2 	add.w	r0, r3, #324	; 0x144
    65ea:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    65ee:	f021 0101 	bic.w	r1, r1, #1
    65f2:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
    65f6:	2101      	movs	r1, #1
    65f8:	4099      	lsls	r1, r3
    p_reg->INTENCLR = mask;
    65fa:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
    65fe:	b2d8      	uxtb	r0, r3
    6600:	f001 f8b2 	bl	7768 <nrfx_gpiote_channel_free>
}
    6604:	bd10      	pop	{r4, pc}
    6606:	bf00      	nop
    6608:	40006000 	.word	0x40006000

0000660c <gpiote_channel_alloc>:
{
    660c:	b570      	push	{r4, r5, r6, lr}
    660e:	b082      	sub	sp, #8
    6610:	4604      	mov	r4, r0
    6612:	460d      	mov	r5, r1
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
    6614:	f10d 0007 	add.w	r0, sp, #7
    6618:	f001 f8c2 	bl	77a0 <nrfx_gpiote_channel_alloc>
    661c:	4b1c      	ldr	r3, [pc, #112]	; (6690 <gpiote_channel_alloc+0x84>)
    661e:	4298      	cmp	r0, r3
    6620:	d132      	bne.n	6688 <gpiote_channel_alloc+0x7c>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
    6622:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6626:	f103 0240 	add.w	r2, r3, #64	; 0x40
    662a:	0092      	lsls	r2, r2, #2
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    662c:	4e19      	ldr	r6, [pc, #100]	; (6694 <gpiote_channel_alloc+0x88>)
    662e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    6632:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    6636:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
    663a:	f421 7140 	bic.w	r1, r1, #768	; 0x300
    663e:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6642:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
    6646:	0224      	lsls	r4, r4, #8
    6648:	f404 547c 	and.w	r4, r4, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
    664c:	042d      	lsls	r5, r5, #16
    664e:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6652:	432c      	orrs	r4, r5
    6654:	430c      	orrs	r4, r1
    6656:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
    return ((uint32_t)p_reg + event);
    665a:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    665e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6662:	2000      	movs	r0, #0
    6664:	6018      	str	r0, [r3, #0]
    6666:	681b      	ldr	r3, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
    6668:	f89d 1007 	ldrb.w	r1, [sp, #7]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    666c:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    6670:	f856 2023 	ldr.w	r2, [r6, r3, lsl #2]
    6674:	f042 0201 	orr.w	r2, r2, #1
    6678:	f846 2023 	str.w	r2, [r6, r3, lsl #2]
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
    667c:	2301      	movs	r3, #1
    667e:	408b      	lsls	r3, r1
    p_reg->INTENSET = mask;
    6680:	f8c6 3304 	str.w	r3, [r6, #772]	; 0x304
}
    6684:	b002      	add	sp, #8
    6686:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    6688:	f06f 0012 	mvn.w	r0, #18
    668c:	e7fa      	b.n	6684 <gpiote_channel_alloc+0x78>
    668e:	bf00      	nop
    6690:	0bad0000 	.word	0x0bad0000
    6694:	40006000 	.word	0x40006000

00006698 <gpiote_pin_int_cfg>:
{
    6698:	b570      	push	{r4, r5, r6, lr}
    669a:	460d      	mov	r5, r1
	return port->data;
    669c:	6906      	ldr	r6, [r0, #16]
	return port->config;
    669e:	6843      	ldr	r3, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    66a0:	7a1b      	ldrb	r3, [r3, #8]
    66a2:	f001 041f 	and.w	r4, r1, #31
    66a6:	ea44 1443 	orr.w	r4, r4, r3, lsl #5
	gpiote_pin_cleanup(abs_pin);
    66aa:	4620      	mov	r0, r4
    66ac:	f7ff ff82 	bl	65b4 <gpiote_pin_cleanup>
    *p_pin = pin_number & 0x1F;
    66b0:	f004 001f 	and.w	r0, r4, #31
    return pin_number >> 5;
    66b4:	0963      	lsrs	r3, r4, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    66b6:	2b01      	cmp	r3, #1
    66b8:	d020      	beq.n	66fc <gpiote_pin_int_cfg+0x64>
        case 0: return NRF_P0;
    66ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    66be:	f500 71e0 	add.w	r1, r0, #448	; 0x1c0
    66c2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    66c6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    66ca:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	if (data->pin_int_en & BIT(pin)) {
    66ce:	68f3      	ldr	r3, [r6, #12]
    66d0:	40eb      	lsrs	r3, r5
    66d2:	f013 0f01 	tst.w	r3, #1
    66d6:	d02f      	beq.n	6738 <gpiote_pin_int_cfg+0xa0>
		if (data->trig_edge & BIT(pin)) {
    66d8:	6973      	ldr	r3, [r6, #20]
    66da:	40eb      	lsrs	r3, r5
    66dc:	f013 0f01 	tst.w	r3, #1
    66e0:	d015      	beq.n	670e <gpiote_pin_int_cfg+0x76>
				if (data->double_edge & BIT(pin)) {
    66e2:	69b3      	ldr	r3, [r6, #24]
    66e4:	40eb      	lsrs	r3, r5
    66e6:	f013 0f01 	tst.w	r3, #1
    66ea:	d109      	bne.n	6700 <gpiote_pin_int_cfg+0x68>
				} else if ((data->int_active_level & BIT(pin)) != 0U) {
    66ec:	6931      	ldr	r1, [r6, #16]
    66ee:	fa21 f505 	lsr.w	r5, r1, r5
    66f2:	f015 0f01 	tst.w	r5, #1
    66f6:	d008      	beq.n	670a <gpiote_pin_int_cfg+0x72>
					pol = NRF_GPIOTE_POLARITY_LOTOHI;
    66f8:	2101      	movs	r1, #1
    66fa:	e002      	b.n	6702 <gpiote_pin_int_cfg+0x6a>
        case 1: return NRF_P1;
    66fc:	4a0f      	ldr	r2, [pc, #60]	; (673c <gpiote_pin_int_cfg+0xa4>)
    66fe:	e7de      	b.n	66be <gpiote_pin_int_cfg+0x26>
					pol = NRF_GPIOTE_POLARITY_TOGGLE;
    6700:	2103      	movs	r1, #3
				res = gpiote_channel_alloc(abs_pin, pol);
    6702:	4620      	mov	r0, r4
    6704:	f7ff ff82 	bl	660c <gpiote_channel_alloc>
    6708:	e017      	b.n	673a <gpiote_pin_int_cfg+0xa2>
					pol = NRF_GPIOTE_POLARITY_HITOLO;
    670a:	2102      	movs	r1, #2
    670c:	e7f9      	b.n	6702 <gpiote_pin_int_cfg+0x6a>
	if ((BIT(pin) & data->int_active_level) != 0U) {
    670e:	6931      	ldr	r1, [r6, #16]
    6710:	fa21 f505 	lsr.w	r5, r1, r5
    6714:	f015 0f01 	tst.w	r5, #1
    6718:	d10c      	bne.n	6734 <gpiote_pin_int_cfg+0x9c>
	return NRF_GPIO_PIN_SENSE_LOW;
    671a:	2103      	movs	r1, #3
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
    671c:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    6720:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
    6724:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
    6728:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    672c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
	int res = 0;
    6730:	2000      	movs	r0, #0
}
    6732:	e002      	b.n	673a <gpiote_pin_int_cfg+0xa2>
		return NRF_GPIO_PIN_SENSE_HIGH;
    6734:	2102      	movs	r1, #2
    6736:	e7f1      	b.n	671c <gpiote_pin_int_cfg+0x84>
	int res = 0;
    6738:	2000      	movs	r0, #0
}
    673a:	bd70      	pop	{r4, r5, r6, pc}
    673c:	50000300 	.word	0x50000300

00006740 <gpio_nrfx_pin_interrupt_configure>:
{
    6740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return port->data;
    6742:	6904      	ldr	r4, [r0, #16]
	return port->config;
    6744:	6845      	ldr	r5, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    6746:	7a2e      	ldrb	r6, [r5, #8]
    6748:	f001 051f 	and.w	r5, r1, #31
    674c:	ea45 1546 	orr.w	r5, r5, r6, lsl #5
	if (!IS_ENABLED(CONFIG_GPIO_NRF_INT_EDGE_USING_SENSE) &&
    6750:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    6754:	d025      	beq.n	67a2 <gpio_nrfx_pin_interrupt_configure+0x62>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    6756:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
    675a:	d035      	beq.n	67c8 <gpio_nrfx_pin_interrupt_configure+0x88>
    675c:	68e5      	ldr	r5, [r4, #12]
    675e:	2601      	movs	r6, #1
    6760:	408e      	lsls	r6, r1
    6762:	4335      	orrs	r5, r6
    6764:	60e5      	str	r5, [r4, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    6766:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    676a:	d033      	beq.n	67d4 <gpio_nrfx_pin_interrupt_configure+0x94>
    676c:	6962      	ldr	r2, [r4, #20]
    676e:	2501      	movs	r5, #1
    6770:	408d      	lsls	r5, r1
    6772:	ea22 0205 	bic.w	r2, r2, r5
    6776:	6162      	str	r2, [r4, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    6778:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    677c:	d02f      	beq.n	67de <gpio_nrfx_pin_interrupt_configure+0x9e>
    677e:	69a2      	ldr	r2, [r4, #24]
    6780:	2501      	movs	r5, #1
    6782:	408d      	lsls	r5, r1
    6784:	ea22 0205 	bic.w	r2, r2, r5
    6788:	61a2      	str	r2, [r4, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    678a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
    678e:	d02b      	beq.n	67e8 <gpio_nrfx_pin_interrupt_configure+0xa8>
    6790:	6923      	ldr	r3, [r4, #16]
    6792:	2201      	movs	r2, #1
    6794:	408a      	lsls	r2, r1
    6796:	ea23 0302 	bic.w	r3, r3, r2
    679a:	6123      	str	r3, [r4, #16]
	return gpiote_pin_int_cfg(port, pin);
    679c:	f7ff ff7c 	bl	6698 <gpiote_pin_int_cfg>
}
    67a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    *p_pin = pin_number & 0x1F;
    67a2:	f005 061f 	and.w	r6, r5, #31
    return pin_number >> 5;
    67a6:	096d      	lsrs	r5, r5, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    67a8:	2d01      	cmp	r5, #1
    67aa:	d00b      	beq.n	67c4 <gpio_nrfx_pin_interrupt_configure+0x84>
        case 0: return NRF_P0;
    67ac:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    67b0:	f506 75e0 	add.w	r5, r6, #448	; 0x1c0
    67b4:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    67b8:	f015 0f01 	tst.w	r5, #1
    67bc:	d0cb      	beq.n	6756 <gpio_nrfx_pin_interrupt_configure+0x16>
		return -ENOTSUP;
    67be:	f06f 0085 	mvn.w	r0, #133	; 0x85
    67c2:	e7ed      	b.n	67a0 <gpio_nrfx_pin_interrupt_configure+0x60>
        case 1: return NRF_P1;
    67c4:	4f0b      	ldr	r7, [pc, #44]	; (67f4 <gpio_nrfx_pin_interrupt_configure+0xb4>)
    67c6:	e7f3      	b.n	67b0 <gpio_nrfx_pin_interrupt_configure+0x70>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
    67c8:	68e5      	ldr	r5, [r4, #12]
    67ca:	2601      	movs	r6, #1
    67cc:	408e      	lsls	r6, r1
    67ce:	ea25 0506 	bic.w	r5, r5, r6
    67d2:	e7c7      	b.n	6764 <gpio_nrfx_pin_interrupt_configure+0x24>
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
    67d4:	6962      	ldr	r2, [r4, #20]
    67d6:	2501      	movs	r5, #1
    67d8:	408d      	lsls	r5, r1
    67da:	432a      	orrs	r2, r5
    67dc:	e7cb      	b.n	6776 <gpio_nrfx_pin_interrupt_configure+0x36>
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
    67de:	69a2      	ldr	r2, [r4, #24]
    67e0:	2501      	movs	r5, #1
    67e2:	408d      	lsls	r5, r1
    67e4:	432a      	orrs	r2, r5
    67e6:	e7cf      	b.n	6788 <gpio_nrfx_pin_interrupt_configure+0x48>
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
    67e8:	6923      	ldr	r3, [r4, #16]
    67ea:	2201      	movs	r2, #1
    67ec:	408a      	lsls	r2, r1
    67ee:	4313      	orrs	r3, r2
    67f0:	e7d3      	b.n	679a <gpio_nrfx_pin_interrupt_configure+0x5a>
    67f2:	bf00      	nop
    67f4:	50000300 	.word	0x50000300

000067f8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    67f8:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
    67fa:	4b0b      	ldr	r3, [pc, #44]	; (6828 <gpio_nrfx_init+0x30>)
    67fc:	781b      	ldrb	r3, [r3, #0]
    67fe:	b10b      	cbz	r3, 6804 <gpio_nrfx_init+0xc>
		irq_enable(DT_IRQN(GPIOTE_NODE));
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
    6800:	2000      	movs	r0, #0
    6802:	bd08      	pop	{r3, pc}
		gpio_initialized = true;
    6804:	4b08      	ldr	r3, [pc, #32]	; (6828 <gpio_nrfx_init+0x30>)
    6806:	2201      	movs	r2, #1
    6808:	701a      	strb	r2, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    680a:	2200      	movs	r2, #0
    680c:	2105      	movs	r1, #5
    680e:	2006      	movs	r0, #6
    6810:	f7fd f9e6 	bl	3be0 <z_arm_irq_priority_set>
		irq_enable(DT_IRQN(GPIOTE_NODE));
    6814:	2006      	movs	r0, #6
    6816:	f7fd f9b1 	bl	3b7c <arch_irq_enable>
    681a:	4b04      	ldr	r3, [pc, #16]	; (682c <gpio_nrfx_init+0x34>)
    681c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6820:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    6824:	e7ec      	b.n	6800 <gpio_nrfx_init+0x8>
    6826:	bf00      	nop
    6828:	2000254f 	.word	0x2000254f
    682c:	40006000 	.word	0x40006000

00006830 <gpiote_event_handler>:
{
    6830:	b570      	push	{r4, r5, r6, lr}
    6832:	b084      	sub	sp, #16
	uint32_t fired_triggers[GPIO_COUNT] = {0};
    6834:	2300      	movs	r3, #0
    6836:	9302      	str	r3, [sp, #8]
    6838:	9303      	str	r3, [sp, #12]
	uint32_t sense_levels[GPIO_COUNT] = {0};
    683a:	9300      	str	r3, [sp, #0]
    683c:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    683e:	4b46      	ldr	r3, [pc, #280]	; (6958 <gpiote_event_handler+0x128>)
    6840:	681c      	ldr	r4, [r3, #0]
	if (port_event) {
    6842:	b90c      	cbnz	r4, 6848 <gpiote_event_handler+0x18>
{
    6844:	2100      	movs	r1, #0
    6846:	e011      	b.n	686c <gpiote_event_handler+0x3c>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)),
    6848:	4d44      	ldr	r5, [pc, #272]	; (695c <gpiote_event_handler+0x12c>)
    684a:	4669      	mov	r1, sp
    684c:	4628      	mov	r0, r5
    684e:	f7ff fe5f 	bl	6510 <check_level_trigger_pins>
		fired_triggers[0] =
    6852:	9002      	str	r0, [sp, #8]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)),
    6854:	a901      	add	r1, sp, #4
    6856:	f105 0018 	add.w	r0, r5, #24
    685a:	f7ff fe59 	bl	6510 <check_level_trigger_pins>
		fired_triggers[1] =
    685e:	9003      	str	r0, [sp, #12]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6860:	4b3d      	ldr	r3, [pc, #244]	; (6958 <gpiote_event_handler+0x128>)
    6862:	2200      	movs	r2, #0
    6864:	601a      	str	r2, [r3, #0]
    6866:	681b      	ldr	r3, [r3, #0]
}
    6868:	e7ec      	b.n	6844 <gpiote_event_handler+0x14>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
    686a:	3101      	adds	r1, #1
    686c:	2907      	cmp	r1, #7
    686e:	d82d      	bhi.n	68cc <gpiote_event_handler+0x9c>
		nrf_gpiote_event_t evt =
    6870:	f101 0340 	add.w	r3, r1, #64	; 0x40
    6874:	009b      	lsls	r3, r3, #2
    6876:	b29a      	uxth	r2, r3
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
    6878:	2301      	movs	r3, #1
    687a:	408b      	lsls	r3, r1
    return p_reg->INTENSET & mask;
    687c:	4838      	ldr	r0, [pc, #224]	; (6960 <gpiote_event_handler+0x130>)
    687e:	f8d0 0304 	ldr.w	r0, [r0, #772]	; 0x304
    6882:	4203      	tst	r3, r0
    6884:	d0f1      	beq.n	686a <gpiote_event_handler+0x3a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6886:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    688a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    688e:	681b      	ldr	r3, [r3, #0]
    6890:	2b00      	cmp	r3, #0
    6892:	d0ea      	beq.n	686a <gpiote_event_handler+0x3a>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    6894:	f501 73a2 	add.w	r3, r1, #324	; 0x144
    6898:	4831      	ldr	r0, [pc, #196]	; (6960 <gpiote_event_handler+0x130>)
    689a:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
    689e:	f3c0 3340 	ubfx	r3, r0, #13, #1
    68a2:	f3c0 2004 	ubfx	r0, r0, #8, #5
    68a6:	2501      	movs	r5, #1
    68a8:	fa05 f000 	lsl.w	r0, r5, r0
    68ac:	ad04      	add	r5, sp, #16
    68ae:	eb05 0383 	add.w	r3, r5, r3, lsl #2
    68b2:	f853 5c08 	ldr.w	r5, [r3, #-8]
    68b6:	4305      	orrs	r5, r0
    68b8:	f843 5c08 	str.w	r5, [r3, #-8]
    return ((uint32_t)p_reg + event);
    68bc:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
    68c0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    68c4:	2200      	movs	r2, #0
    68c6:	601a      	str	r2, [r3, #0]
    68c8:	681b      	ldr	r3, [r3, #0]
}
    68ca:	e7ce      	b.n	686a <gpiote_event_handler+0x3a>
	if (fired_triggers[0]) {
    68cc:	9e02      	ldr	r6, [sp, #8]
    68ce:	b92e      	cbnz	r6, 68dc <gpiote_event_handler+0xac>
	if (fired_triggers[1]) {
    68d0:	9e03      	ldr	r6, [sp, #12]
    68d2:	b9ee      	cbnz	r6, 6910 <gpiote_event_handler+0xe0>
	if (port_event) {
    68d4:	2c00      	cmp	r4, #0
    68d6:	d135      	bne.n	6944 <gpiote_event_handler+0x114>
}
    68d8:	b004      	add	sp, #16
    68da:	bd70      	pop	{r4, r5, r6, pc}
	return list->head;
    68dc:	4b21      	ldr	r3, [pc, #132]	; (6964 <gpiote_event_handler+0x134>)
    68de:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    68e0:	b119      	cbz	r1, 68ea <gpiote_event_handler+0xba>
    68e2:	460d      	mov	r5, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    68e4:	b149      	cbz	r1, 68fa <gpiote_event_handler+0xca>
	return node->next;
    68e6:	680d      	ldr	r5, [r1, #0]
    68e8:	e007      	b.n	68fa <gpiote_event_handler+0xca>
    68ea:	460d      	mov	r5, r1
    68ec:	e005      	b.n	68fa <gpiote_event_handler+0xca>
    68ee:	b16d      	cbz	r5, 690c <gpiote_event_handler+0xdc>
    68f0:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    68f2:	b105      	cbz	r5, 68f6 <gpiote_event_handler+0xc6>
	return node->next;
    68f4:	682b      	ldr	r3, [r5, #0]
    68f6:	4629      	mov	r1, r5
    68f8:	461d      	mov	r5, r3
    68fa:	2900      	cmp	r1, #0
    68fc:	d0e8      	beq.n	68d0 <gpiote_event_handler+0xa0>
		if (cb->pin_mask & pins) {
    68fe:	688a      	ldr	r2, [r1, #8]
    6900:	4032      	ands	r2, r6
    6902:	d0f4      	beq.n	68ee <gpiote_event_handler+0xbe>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    6904:	684b      	ldr	r3, [r1, #4]
    6906:	4815      	ldr	r0, [pc, #84]	; (695c <gpiote_event_handler+0x12c>)
    6908:	4798      	blx	r3
    690a:	e7f0      	b.n	68ee <gpiote_event_handler+0xbe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    690c:	462b      	mov	r3, r5
    690e:	e7f2      	b.n	68f6 <gpiote_event_handler+0xc6>
	return list->head;
    6910:	4b15      	ldr	r3, [pc, #84]	; (6968 <gpiote_event_handler+0x138>)
    6912:	6859      	ldr	r1, [r3, #4]
    6914:	b119      	cbz	r1, 691e <gpiote_event_handler+0xee>
    6916:	460d      	mov	r5, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    6918:	b149      	cbz	r1, 692e <gpiote_event_handler+0xfe>
	return node->next;
    691a:	680d      	ldr	r5, [r1, #0]
    691c:	e007      	b.n	692e <gpiote_event_handler+0xfe>
    691e:	460d      	mov	r5, r1
    6920:	e005      	b.n	692e <gpiote_event_handler+0xfe>
    6922:	b16d      	cbz	r5, 6940 <gpiote_event_handler+0x110>
    6924:	462b      	mov	r3, r5
Z_GENLIST_PEEK_NEXT(slist, snode)
    6926:	b105      	cbz	r5, 692a <gpiote_event_handler+0xfa>
	return node->next;
    6928:	682b      	ldr	r3, [r5, #0]
    692a:	4629      	mov	r1, r5
    692c:	461d      	mov	r5, r3
    692e:	2900      	cmp	r1, #0
    6930:	d0d0      	beq.n	68d4 <gpiote_event_handler+0xa4>
		if (cb->pin_mask & pins) {
    6932:	688a      	ldr	r2, [r1, #8]
    6934:	4032      	ands	r2, r6
    6936:	d0f4      	beq.n	6922 <gpiote_event_handler+0xf2>
			cb->handler(port, cb, cb->pin_mask & pins);
    6938:	684b      	ldr	r3, [r1, #4]
    693a:	480c      	ldr	r0, [pc, #48]	; (696c <gpiote_event_handler+0x13c>)
    693c:	4798      	blx	r3
    693e:	e7f0      	b.n	6922 <gpiote_event_handler+0xf2>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    6940:	462b      	mov	r3, r5
    6942:	e7f2      	b.n	692a <gpiote_event_handler+0xfa>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
    6944:	4c05      	ldr	r4, [pc, #20]	; (695c <gpiote_event_handler+0x12c>)
    6946:	4620      	mov	r0, r4
    6948:	f7ff fda8 	bl	649c <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
    694c:	f104 0018 	add.w	r0, r4, #24
    6950:	f7ff fda4 	bl	649c <cfg_level_pins>
}
    6954:	e7c0      	b.n	68d8 <gpiote_event_handler+0xa8>
    6956:	bf00      	nop
    6958:	4000617c 	.word	0x4000617c
    695c:	0000e67c 	.word	0x0000e67c
    6960:	40006000 	.word	0x40006000
    6964:	20001d14 	.word	0x20001d14
    6968:	20001d30 	.word	0x20001d30
    696c:	0000e694 	.word	0x0000e694

00006970 <baudrate_set>:
	return dev->data;
}

static inline const struct uarte_nrfx_config *get_dev_config(const struct device *dev)
{
	return dev->config;
    6970:	6843      	ldr	r3, [r0, #4]

static inline NRF_UARTE_Type *get_uarte_instance(const struct device *dev)
{
	const struct uarte_nrfx_config *config = get_dev_config(dev);

	return config->uarte_regs;
    6972:	681a      	ldr	r2, [r3, #0]
static int baudrate_set(const struct device *dev, uint32_t baudrate)
{
	nrf_uarte_baudrate_t nrf_baudrate; /* calculated baudrate divisor */
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	switch (baudrate) {
    6974:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    6978:	d06f      	beq.n	6a5a <baudrate_set+0xea>
    697a:	d83a      	bhi.n	69f2 <baudrate_set+0x82>
    697c:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    6980:	d06e      	beq.n	6a60 <baudrate_set+0xf0>
    6982:	d90a      	bls.n	699a <baudrate_set+0x2a>
    6984:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    6988:	d075      	beq.n	6a76 <baudrate_set+0x106>
    698a:	d924      	bls.n	69d6 <baudrate_set+0x66>
    698c:	f647 2312 	movw	r3, #31250	; 0x7a12
    6990:	4299      	cmp	r1, r3
    6992:	d12b      	bne.n	69ec <baudrate_set+0x7c>
		break;
	case 28800:
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
		break;
	case 31250:
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    6994:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    6998:	e013      	b.n	69c2 <baudrate_set+0x52>
	switch (baudrate) {
    699a:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    699e:	d061      	beq.n	6a64 <baudrate_set+0xf4>
    69a0:	d907      	bls.n	69b2 <baudrate_set+0x42>
    69a2:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    69a6:	d063      	beq.n	6a70 <baudrate_set+0x100>
    69a8:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    69ac:	d110      	bne.n	69d0 <baudrate_set+0x60>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    69ae:	4b3c      	ldr	r3, [pc, #240]	; (6aa0 <baudrate_set+0x130>)
    69b0:	e007      	b.n	69c2 <baudrate_set+0x52>
	switch (baudrate) {
    69b2:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    69b6:	d058      	beq.n	6a6a <baudrate_set+0xfa>
    69b8:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    69bc:	d105      	bne.n	69ca <baudrate_set+0x5a>
		nrf_baudrate = 0x00027000;
    69be:	f44f 331c 	mov.w	r3, #159744	; 0x27000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    69c2:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
		return -EINVAL;
	}

	nrf_uarte_baudrate_set(uarte, nrf_baudrate);

	return 0;
    69c6:	2000      	movs	r0, #0
    69c8:	4770      	bx	lr
	switch (baudrate) {
    69ca:	f06f 0015 	mvn.w	r0, #21
    69ce:	4770      	bx	lr
    69d0:	f06f 0015 	mvn.w	r0, #21
    69d4:	4770      	bx	lr
    69d6:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    69da:	d04e      	beq.n	6a7a <baudrate_set+0x10a>
    69dc:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    69e0:	d101      	bne.n	69e6 <baudrate_set+0x76>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    69e2:	4b30      	ldr	r3, [pc, #192]	; (6aa4 <baudrate_set+0x134>)
    69e4:	e7ed      	b.n	69c2 <baudrate_set+0x52>
	switch (baudrate) {
    69e6:	f06f 0015 	mvn.w	r0, #21
    69ea:	4770      	bx	lr
    69ec:	f06f 0015 	mvn.w	r0, #21
    69f0:	4770      	bx	lr
    69f2:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    69f6:	d042      	beq.n	6a7e <baudrate_set+0x10e>
    69f8:	d909      	bls.n	6a0e <baudrate_set+0x9e>
    69fa:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    69fe:	d046      	beq.n	6a8e <baudrate_set+0x11e>
    6a00:	d91f      	bls.n	6a42 <baudrate_set+0xd2>
    6a02:	4b29      	ldr	r3, [pc, #164]	; (6aa8 <baudrate_set+0x138>)
    6a04:	4299      	cmp	r1, r3
    6a06:	d148      	bne.n	6a9a <baudrate_set+0x12a>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    6a08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    6a0c:	e7d9      	b.n	69c2 <baudrate_set+0x52>
	switch (baudrate) {
    6a0e:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    6a12:	d037      	beq.n	6a84 <baudrate_set+0x114>
    6a14:	d905      	bls.n	6a22 <baudrate_set+0xb2>
    6a16:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    6a1a:	d10f      	bne.n	6a3c <baudrate_set+0xcc>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    6a1c:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    6a20:	e7cf      	b.n	69c2 <baudrate_set+0x52>
	switch (baudrate) {
    6a22:	f64d 23c0 	movw	r3, #56000	; 0xdac0
    6a26:	4299      	cmp	r1, r3
    6a28:	d02e      	beq.n	6a88 <baudrate_set+0x118>
    6a2a:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    6a2e:	d102      	bne.n	6a36 <baudrate_set+0xc6>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    6a30:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    6a34:	e7c5      	b.n	69c2 <baudrate_set+0x52>
	switch (baudrate) {
    6a36:	f06f 0015 	mvn.w	r0, #21
    6a3a:	4770      	bx	lr
    6a3c:	f06f 0015 	mvn.w	r0, #21
    6a40:	4770      	bx	lr
    6a42:	4b1a      	ldr	r3, [pc, #104]	; (6aac <baudrate_set+0x13c>)
    6a44:	4299      	cmp	r1, r3
    6a46:	d025      	beq.n	6a94 <baudrate_set+0x124>
    6a48:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    6a4c:	d102      	bne.n	6a54 <baudrate_set+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    6a4e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    6a52:	e7b6      	b.n	69c2 <baudrate_set+0x52>
	switch (baudrate) {
    6a54:	f06f 0015 	mvn.w	r0, #21
    6a58:	4770      	bx	lr
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    6a5a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    6a5e:	e7b0      	b.n	69c2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    6a60:	4b13      	ldr	r3, [pc, #76]	; (6ab0 <baudrate_set+0x140>)
    6a62:	e7ae      	b.n	69c2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    6a64:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    6a68:	e7ab      	b.n	69c2 <baudrate_set+0x52>
	switch (baudrate) {
    6a6a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    6a6e:	e7a8      	b.n	69c2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    6a70:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    6a74:	e7a5      	b.n	69c2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    6a76:	4b0f      	ldr	r3, [pc, #60]	; (6ab4 <baudrate_set+0x144>)
    6a78:	e7a3      	b.n	69c2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    6a7a:	4b0f      	ldr	r3, [pc, #60]	; (6ab8 <baudrate_set+0x148>)
    6a7c:	e7a1      	b.n	69c2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    6a7e:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    6a82:	e79e      	b.n	69c2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    6a84:	4b0d      	ldr	r3, [pc, #52]	; (6abc <baudrate_set+0x14c>)
    6a86:	e79c      	b.n	69c2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    6a88:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    6a8c:	e799      	b.n	69c2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    6a8e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    6a92:	e796      	b.n	69c2 <baudrate_set+0x52>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    6a94:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    6a98:	e793      	b.n	69c2 <baudrate_set+0x52>
	switch (baudrate) {
    6a9a:	f06f 0015 	mvn.w	r0, #21
}
    6a9e:	4770      	bx	lr
    6aa0:	0013b000 	.word	0x0013b000
    6aa4:	004ea000 	.word	0x004ea000
    6aa8:	000f4240 	.word	0x000f4240
    6aac:	0003d090 	.word	0x0003d090
    6ab0:	00275000 	.word	0x00275000
    6ab4:	0075c000 	.word	0x0075c000
    6ab8:	003af000 	.word	0x003af000
    6abc:	013a9000 	.word	0x013a9000

00006ac0 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    6ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6ac4:	4605      	mov	r5, r0
    6ac6:	460f      	mov	r7, r1
	return dev->data;
    6ac8:	f8d0 8010 	ldr.w	r8, [r0, #16]
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    6acc:	f007 f91d 	bl	dd0a <k_is_in_isr>
    6ad0:	b920      	cbnz	r0, 6adc <uarte_nrfx_poll_out+0x1c>
	return !z_sys_post_kernel;
    6ad2:	4b16      	ldr	r3, [pc, #88]	; (6b2c <uarte_nrfx_poll_out+0x6c>)
    6ad4:	781b      	ldrb	r3, [r3, #0]
    6ad6:	b1ab      	cbz	r3, 6b04 <uarte_nrfx_poll_out+0x44>
    6ad8:	2300      	movs	r3, #0
    6ada:	e000      	b.n	6ade <uarte_nrfx_poll_out+0x1e>
    6adc:	2301      	movs	r3, #1
	int key;

	if (isr_mode) {
    6ade:	b19b      	cbz	r3, 6b08 <uarte_nrfx_poll_out+0x48>
	__asm__ volatile(
    6ae0:	f04f 0320 	mov.w	r3, #32
    6ae4:	f3ef 8411 	mrs	r4, BASEPRI
    6ae8:	f383 8812 	msr	BASEPRI_MAX, r3
    6aec:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
    6af0:	4626      	mov	r6, r4
			if (is_tx_ready(dev)) {
    6af2:	4628      	mov	r0, r5
    6af4:	f006 fdff 	bl	d6f6 <is_tx_ready>
    6af8:	b950      	cbnz	r0, 6b10 <uarte_nrfx_poll_out+0x50>
	__asm__ volatile(
    6afa:	f384 8811 	msr	BASEPRI, r4
    6afe:	f3bf 8f6f 	isb	sy
}
    6b02:	e7ed      	b.n	6ae0 <uarte_nrfx_poll_out+0x20>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    6b04:	2301      	movs	r3, #1
    6b06:	e7ea      	b.n	6ade <uarte_nrfx_poll_out+0x1e>
			}

			irq_unlock(key);
		}
	} else {
		key = wait_tx_ready(dev);
    6b08:	4628      	mov	r0, r5
    6b0a:	f006 ff15 	bl	d938 <wait_tx_ready>
    6b0e:	4606      	mov	r6, r0
	}

	data->char_out = c;
    6b10:	4641      	mov	r1, r8
    6b12:	f801 7f14 	strb.w	r7, [r1, #20]!
	tx_start(dev, &data->char_out, 1);
    6b16:	2201      	movs	r2, #1
    6b18:	4628      	mov	r0, r5
    6b1a:	f006 fe06 	bl	d72a <tx_start>
	__asm__ volatile(
    6b1e:	f386 8811 	msr	BASEPRI, r6
    6b22:	f3bf 8f6f 	isb	sy

	irq_unlock(key);
}
    6b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6b2a:	bf00      	nop
    6b2c:	20002556 	.word	0x20002556

00006b30 <endtx_stoptx_ppi_init>:
#endif /* UARTE_INTERRUPT_DRIVEN */
};

static int endtx_stoptx_ppi_init(NRF_UARTE_Type *uarte,
				 struct uarte_nrfx_data *data)
{
    6b30:	b538      	push	{r3, r4, r5, lr}
    6b32:	4604      	mov	r4, r0
    6b34:	460d      	mov	r5, r1
	nrfx_err_t ret;

	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    6b36:	f101 0016 	add.w	r0, r1, #22
    6b3a:	f000 ff53 	bl	79e4 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    6b3e:	4b14      	ldr	r3, [pc, #80]	; (6b90 <endtx_stoptx_ppi_init+0x60>)
    6b40:	4298      	cmp	r0, r3
    6b42:	d111      	bne.n	6b68 <endtx_stoptx_ppi_init+0x38>
		LOG_ERR("Failed to allocate PPI Channel");
		return -EIO;
	}

	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    6b44:	7dab      	ldrb	r3, [r5, #22]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    6b46:	f504 7190 	add.w	r1, r4, #288	; 0x120
    return (uint32_t)p_reg + (uint32_t)task;
    6b4a:	340c      	adds	r4, #12
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    6b4c:	4a11      	ldr	r2, [pc, #68]	; (6b94 <endtx_stoptx_ppi_init+0x64>)
    6b4e:	33a2      	adds	r3, #162	; 0xa2
    6b50:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
    p_reg->CH[(uint32_t) channel].TEP = tep;
    6b54:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    6b58:	605c      	str	r4, [r3, #4]
		nrf_uarte_event_address_get(uarte, NRF_UARTE_EVENT_ENDTX),
		nrf_uarte_task_address_get(uarte, NRF_UARTE_TASK_STOPTX));
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    6b5a:	7da9      	ldrb	r1, [r5, #22]
    6b5c:	2301      	movs	r3, #1
    6b5e:	408b      	lsls	r3, r1
    p_reg->CHENSET = mask;
    6b60:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	return 0;
    6b64:	2000      	movs	r0, #0
}
    6b66:	bd38      	pop	{r3, r4, r5, pc}
    6b68:	4b0b      	ldr	r3, [pc, #44]	; (6b98 <endtx_stoptx_ppi_init+0x68>)
    6b6a:	4a0c      	ldr	r2, [pc, #48]	; (6b9c <endtx_stoptx_ppi_init+0x6c>)
    6b6c:	1a9b      	subs	r3, r3, r2
    6b6e:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Failed to allocate PPI Channel");
    6b70:	f04f 0100 	mov.w	r1, #0
    6b74:	2201      	movs	r2, #1
    6b76:	f362 0102 	bfi	r1, r2, #0, #3
    6b7a:	f36f 01c5 	bfc	r1, #3, #3
    6b7e:	f363 118f 	bfi	r1, r3, #6, #10
    6b82:	4807      	ldr	r0, [pc, #28]	; (6ba0 <endtx_stoptx_ppi_init+0x70>)
    6b84:	f7fa fe1a 	bl	17bc <log_0>
		return -EIO;
    6b88:	f06f 0004 	mvn.w	r0, #4
    6b8c:	e7eb      	b.n	6b66 <endtx_stoptx_ppi_init+0x36>
    6b8e:	bf00      	nop
    6b90:	0bad0000 	.word	0x0bad0000
    6b94:	4001f000 	.word	0x4001f000
    6b98:	0000e864 	.word	0x0000e864
    6b9c:	0000e82c 	.word	0x0000e82c
    6ba0:	0000f79c 	.word	0x0000f79c

00006ba4 <uarte_instance_init>:

static int uarte_instance_init(const struct device *dev,
			       uint8_t interrupts_active)
{
    6ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return dev->config;
    6ba6:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
    6ba8:	6825      	ldr	r5, [r4, #0]
	return dev->data;
    6baa:	6906      	ldr	r6, [r0, #16]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    6bac:	2300      	movs	r3, #0
    6bae:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    6bb2:	6030      	str	r0, [r6, #0]

	nrf_gpio_pin_write(cfg->pseltxd, 1);
    6bb4:	68a3      	ldr	r3, [r4, #8]
    *p_pin = pin_number & 0x1F;
    6bb6:	f003 011f 	and.w	r1, r3, #31
    return pin_number >> 5;
    6bba:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6bbc:	2b01      	cmp	r3, #1
    6bbe:	f000 8097 	beq.w	6cf0 <uarte_instance_init+0x14c>
        case 0: return NRF_P0;
    6bc2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6bc6:	2301      	movs	r3, #1
    6bc8:	408b      	lsls	r3, r1
    p_reg->OUTSET = set_mask;
    6bca:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_gpio_cfg_output(cfg->pseltxd);
    6bce:	68a3      	ldr	r3, [r4, #8]
    *p_pin = pin_number & 0x1F;
    6bd0:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    6bd4:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6bd6:	2b01      	cmp	r3, #1
    6bd8:	f000 808c 	beq.w	6cf4 <uarte_instance_init+0x150>
        case 0: return NRF_P0;
    6bdc:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    6be0:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    6be4:	2203      	movs	r2, #3
    6be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (cfg->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
    6bea:	68e3      	ldr	r3, [r4, #12]
    6bec:	f1b3 3fff 	cmp.w	r3, #4294967295
    6bf0:	d00c      	beq.n	6c0c <uarte_instance_init+0x68>
		nrf_gpio_cfg_input(cfg->pselrxd, cfg->rxd_pull);
    6bf2:	7e21      	ldrb	r1, [r4, #24]
    *p_pin = pin_number & 0x1F;
    6bf4:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    6bf8:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6bfa:	2b01      	cmp	r3, #1
    6bfc:	d07c      	beq.n	6cf8 <uarte_instance_init+0x154>
        case 0: return NRF_P0;
    6bfe:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    6c02:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    6c04:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    6c08:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
	}

	nrf_uarte_txrx_pins_set(uarte, cfg->pseltxd, cfg->pselrxd);
    6c0c:	68a2      	ldr	r2, [r4, #8]
    6c0e:	68e3      	ldr	r3, [r4, #12]
    p_reg->PSEL.TXD = pseltxd;
    6c10:	f8c5 250c 	str.w	r2, [r5, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    6c14:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514

	if (cfg->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
    6c18:	6923      	ldr	r3, [r4, #16]
    6c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
    6c1e:	d00c      	beq.n	6c3a <uarte_instance_init+0x96>
		nrf_gpio_cfg_input(cfg->pselcts, cfg->cts_pull);
    6c20:	7e61      	ldrb	r1, [r4, #25]
    *p_pin = pin_number & 0x1F;
    6c22:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    6c26:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6c28:	2b01      	cmp	r3, #1
    6c2a:	d067      	beq.n	6cfc <uarte_instance_init+0x158>
        case 0: return NRF_P0;
    6c2c:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    6c30:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    6c32:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    6c36:	f847 1023 	str.w	r1, [r7, r3, lsl #2]
	}

	if (cfg->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
    6c3a:	6963      	ldr	r3, [r4, #20]
    6c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
    6c40:	d017      	beq.n	6c72 <uarte_instance_init+0xce>
    *p_pin = pin_number & 0x1F;
    6c42:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    6c46:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6c48:	2b01      	cmp	r3, #1
    6c4a:	d059      	beq.n	6d00 <uarte_instance_init+0x15c>
        case 0: return NRF_P0;
    6c4c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    6c50:	2301      	movs	r3, #1
    6c52:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    6c54:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
		nrf_gpio_pin_write(cfg->pselrts, 1);
		nrf_gpio_cfg_output(cfg->pselrts);
    6c58:	6963      	ldr	r3, [r4, #20]
    *p_pin = pin_number & 0x1F;
    6c5a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
    6c5e:	095b      	lsrs	r3, r3, #5
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    6c60:	2b01      	cmp	r3, #1
    6c62:	d04f      	beq.n	6d04 <uarte_instance_init+0x160>
        case 0: return NRF_P0;
    6c64:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = cnf;
    6c68:	f502 73e0 	add.w	r3, r2, #448	; 0x1c0
    6c6c:	2203      	movs	r2, #3
    6c6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	nrf_uarte_hwfc_pins_set(uarte, cfg->pselrts, cfg->pselcts);
    6c72:	6962      	ldr	r2, [r4, #20]
    6c74:	6923      	ldr	r3, [r4, #16]
    p_reg->PSEL.RTS = pselrts;
    6c76:	f8c5 2508 	str.w	r2, [r5, #1288]	; 0x508
    p_reg->PSEL.CTS = pselcts;
    6c7a:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
	return dev->data;
    6c7e:	6901      	ldr	r1, [r0, #16]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    6c80:	3104      	adds	r1, #4
    6c82:	f006 fccb 	bl	d61c <uarte_nrfx_configure>
	if (err) {
    6c86:	4607      	mov	r7, r0
    6c88:	bb80      	cbnz	r0, 6cec <uarte_instance_init+0x148>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    6c8a:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    6c8c:	f013 0f08 	tst.w	r3, #8
    6c90:	d13a      	bne.n	6d08 <uarte_instance_init+0x164>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    6c92:	2308      	movs	r3, #8
    6c94:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (cfg->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
    6c98:	68e3      	ldr	r3, [r4, #12]
    6c9a:	f1b3 3fff 	cmp.w	r3, #4294967295
    6c9e:	d00c      	beq.n	6cba <uarte_instance_init+0x116>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6ca0:	2300      	movs	r3, #0
    6ca2:	f8c5 3110 	str.w	r3, [r5, #272]	; 0x110
    6ca6:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    6caa:	f106 0315 	add.w	r3, r6, #21

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    6cae:	f8c5 3534 	str.w	r3, [r5, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    6cb2:	2301      	movs	r3, #1
    6cb4:	f8c5 3538 	str.w	r3, [r5, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6cb8:	602b      	str	r3, [r5, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    6cba:	6863      	ldr	r3, [r4, #4]
    6cbc:	f013 0f08 	tst.w	r3, #8
    6cc0:	d103      	bne.n	6cca <uarte_instance_init+0x126>
    p_reg->INTENSET = mask;
    6cc2:	f44f 7380 	mov.w	r3, #256	; 0x100
    6cc6:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    6cca:	6863      	ldr	r3, [r4, #4]
    6ccc:	f013 0f10 	tst.w	r3, #16
    6cd0:	d003      	beq.n	6cda <uarte_instance_init+0x136>
    6cd2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    6cd6:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    6cda:	3614      	adds	r6, #20
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    6cdc:	f8c5 6544 	str.w	r6, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    6ce0:	2300      	movs	r3, #0
    6ce2:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6ce6:	2301      	movs	r3, #1
    6ce8:	60ab      	str	r3, [r5, #8]
    6cea:	60eb      	str	r3, [r5, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    6cec:	4638      	mov	r0, r7
    6cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        case 1: return NRF_P1;
    6cf0:	4a09      	ldr	r2, [pc, #36]	; (6d18 <uarte_instance_init+0x174>)
    6cf2:	e768      	b.n	6bc6 <uarte_instance_init+0x22>
    6cf4:	4908      	ldr	r1, [pc, #32]	; (6d18 <uarte_instance_init+0x174>)
    6cf6:	e773      	b.n	6be0 <uarte_instance_init+0x3c>
    6cf8:	4f07      	ldr	r7, [pc, #28]	; (6d18 <uarte_instance_init+0x174>)
    6cfa:	e782      	b.n	6c02 <uarte_instance_init+0x5e>
    6cfc:	4f06      	ldr	r7, [pc, #24]	; (6d18 <uarte_instance_init+0x174>)
    6cfe:	e797      	b.n	6c30 <uarte_instance_init+0x8c>
    6d00:	4905      	ldr	r1, [pc, #20]	; (6d18 <uarte_instance_init+0x174>)
    6d02:	e7a5      	b.n	6c50 <uarte_instance_init+0xac>
    6d04:	4904      	ldr	r1, [pc, #16]	; (6d18 <uarte_instance_init+0x174>)
    6d06:	e7af      	b.n	6c68 <uarte_instance_init+0xc4>
		err = endtx_stoptx_ppi_init(uarte, data);
    6d08:	4631      	mov	r1, r6
    6d0a:	4628      	mov	r0, r5
    6d0c:	f7ff ff10 	bl	6b30 <endtx_stoptx_ppi_init>
		if (err < 0) {
    6d10:	2800      	cmp	r0, #0
    6d12:	dabe      	bge.n	6c92 <uarte_instance_init+0xee>
			return err;
    6d14:	4607      	mov	r7, r0
    6d16:	e7e9      	b.n	6cec <uarte_instance_init+0x148>
    6d18:	50000300 	.word	0x50000300

00006d1c <set_comparator>:
	return (a - b) & COUNTER_MAX;
}

static void set_comparator(int32_t chan, uint32_t cyc)
{
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    6d1c:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    6d20:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    6d24:	4b01      	ldr	r3, [pc, #4]	; (6d2c <set_comparator+0x10>)
    6d26:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
    6d2a:	4770      	bx	lr
    6d2c:	40011000 	.word	0x40011000

00006d30 <get_comparator>:
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    6d30:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    6d34:	4b01      	ldr	r3, [pc, #4]	; (6d3c <get_comparator+0xc>)
    6d36:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

static uint32_t get_comparator(int32_t chan)
{
	return nrf_rtc_cc_get(RTC, chan);
}
    6d3a:	4770      	bx	lr
    6d3c:	40011000 	.word	0x40011000

00006d40 <event_enable>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
}

static void event_enable(int32_t chan)
{
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6d40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6d44:	4083      	lsls	r3, r0
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    6d46:	4a02      	ldr	r2, [pc, #8]	; (6d50 <event_enable+0x10>)
    6d48:	f8c2 3344 	str.w	r3, [r2, #836]	; 0x344
}
    6d4c:	4770      	bx	lr
    6d4e:	bf00      	nop
    6d50:	40011000 	.word	0x40011000

00006d54 <event_disable>:

static void event_disable(int32_t chan)
{
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6d54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6d58:	4083      	lsls	r3, r0
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    6d5a:	4a02      	ldr	r2, [pc, #8]	; (6d64 <event_disable+0x10>)
    6d5c:	f8c2 3348 	str.w	r3, [r2, #840]	; 0x348
}
    6d60:	4770      	bx	lr
    6d62:	bf00      	nop
    6d64:	40011000 	.word	0x40011000

00006d68 <counter>:
     return p_reg->COUNTER;
    6d68:	4b01      	ldr	r3, [pc, #4]	; (6d70 <counter+0x8>)
    6d6a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

static uint32_t counter(void)
{
	return nrf_rtc_counter_get(RTC);
}
    6d6e:	4770      	bx	lr
    6d70:	40011000 	.word	0x40011000

00006d74 <compare_int_lock>:
	__ASSERT_NO_MSG(chan < CHAN_COUNT);
	return nrf_rtc_event_address_get(RTC, nrf_rtc_compare_event_get(chan));
}

static bool compare_int_lock(int32_t chan)
{
    6d74:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    6d76:	2301      	movs	r3, #1
    6d78:	4083      	lsls	r3, r0
    6d7a:	43dc      	mvns	r4, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6d7c:	4a10      	ldr	r2, [pc, #64]	; (6dc0 <compare_int_lock+0x4c>)
    6d7e:	f3bf 8f5b 	dmb	ish
    6d82:	e852 1f00 	ldrex	r1, [r2]
    6d86:	ea01 0c04 	and.w	ip, r1, r4
    6d8a:	e842 ce00 	strex	lr, ip, [r2]
    6d8e:	f1be 0f00 	cmp.w	lr, #0
    6d92:	d1f6      	bne.n	6d82 <compare_int_lock+0xe>
    6d94:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6d98:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    6d9c:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    6da0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    6da4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    6da8:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    6dac:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6db0:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    6db4:	420b      	tst	r3, r1
}
    6db6:	bf14      	ite	ne
    6db8:	2001      	movne	r0, #1
    6dba:	2000      	moveq	r0, #0
    6dbc:	bd10      	pop	{r4, pc}
    6dbe:	bf00      	nop
    6dc0:	20001d70 	.word	0x20001d70

00006dc4 <channel_processing_check_and_clear>:
		event_enable(chan);
	}
}

static bool channel_processing_check_and_clear(int32_t chan)
{
    6dc4:	b570      	push	{r4, r5, r6, lr}
    6dc6:	4604      	mov	r4, r0
	bool result = false;

	uint32_t mcu_critical_state = full_int_lock();
    6dc8:	f006 fe02 	bl	d9d0 <full_int_lock>
    6dcc:	4605      	mov	r5, r0

	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    6dce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6dd2:	40a3      	lsls	r3, r4
    return p_reg->INTENSET & mask;
    6dd4:	4a17      	ldr	r2, [pc, #92]	; (6e34 <channel_processing_check_and_clear+0x70>)
    6dd6:	f8d2 2304 	ldr.w	r2, [r2, #772]	; 0x304
    6dda:	4213      	tst	r3, r2
    6ddc:	d105      	bne.n	6dea <channel_processing_check_and_clear+0x26>
	bool result = false;
    6dde:	2600      	movs	r6, #0
		if (result) {
			event_clear(chan);
		}
	}

	full_int_unlock(mcu_critical_state);
    6de0:	4628      	mov	r0, r5
    6de2:	f006 fdfe 	bl	d9e2 <full_int_unlock>

	return result;
}
    6de6:	4630      	mov	r0, r6
    6de8:	bd70      	pop	{r4, r5, r6, pc}
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    6dea:	2301      	movs	r3, #1
    6dec:	40a3      	lsls	r3, r4
    6dee:	43db      	mvns	r3, r3
    6df0:	4a11      	ldr	r2, [pc, #68]	; (6e38 <channel_processing_check_and_clear+0x74>)
    6df2:	f3bf 8f5b 	dmb	ish
    6df6:	e852 1f00 	ldrex	r1, [r2]
    6dfa:	ea01 0003 	and.w	r0, r1, r3
    6dfe:	e842 0600 	strex	r6, r0, [r2]
    6e02:	2e00      	cmp	r6, #0
    6e04:	d1f7      	bne.n	6df6 <channel_processing_check_and_clear+0x32>
    6e06:	f3bf 8f5b 	dmb	ish
    6e0a:	b959      	cbnz	r1, 6e24 <channel_processing_check_and_clear+0x60>
			 nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    6e0c:	f104 0350 	add.w	r3, r4, #80	; 0x50
    6e10:	009b      	lsls	r3, r3, #2
    6e12:	b29b      	uxth	r3, r3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6e14:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6e18:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    6e1c:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    6e1e:	b113      	cbz	r3, 6e26 <channel_processing_check_and_clear+0x62>
    6e20:	2301      	movs	r3, #1
    6e22:	e000      	b.n	6e26 <channel_processing_check_and_clear+0x62>
    6e24:	2301      	movs	r3, #1
		if (result) {
    6e26:	461e      	mov	r6, r3
    6e28:	2b00      	cmp	r3, #0
    6e2a:	d0d9      	beq.n	6de0 <channel_processing_check_and_clear+0x1c>
			event_clear(chan);
    6e2c:	4620      	mov	r0, r4
    6e2e:	f006 fdc0 	bl	d9b2 <event_clear>
    6e32:	e7d5      	b.n	6de0 <channel_processing_check_and_clear+0x1c>
    6e34:	40011000 	.word	0x40011000
    6e38:	20001d6c 	.word	0x20001d6c

00006e3c <compare_int_unlock>:
	if (key) {
    6e3c:	b901      	cbnz	r1, 6e40 <compare_int_unlock+0x4>
}
    6e3e:	4770      	bx	lr
		atomic_or(&int_mask, BIT(chan));
    6e40:	2301      	movs	r3, #1
    6e42:	4083      	lsls	r3, r0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6e44:	4a11      	ldr	r2, [pc, #68]	; (6e8c <compare_int_unlock+0x50>)
    6e46:	f3bf 8f5b 	dmb	ish
    6e4a:	e852 1f00 	ldrex	r1, [r2]
    6e4e:	4319      	orrs	r1, r3
    6e50:	e842 1c00 	strex	ip, r1, [r2]
    6e54:	f1bc 0f00 	cmp.w	ip, #0
    6e58:	d1f7      	bne.n	6e4a <compare_int_unlock+0xe>
    6e5a:	f3bf 8f5b 	dmb	ish
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6e5e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6e62:	4083      	lsls	r3, r0
    p_reg->INTENSET = mask;
    6e64:	4a0a      	ldr	r2, [pc, #40]	; (6e90 <compare_int_unlock+0x54>)
    6e66:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6e6a:	f3bf 8f5b 	dmb	ish
    6e6e:	4b09      	ldr	r3, [pc, #36]	; (6e94 <compare_int_unlock+0x58>)
    6e70:	681b      	ldr	r3, [r3, #0]
    6e72:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    6e76:	fa23 f000 	lsr.w	r0, r3, r0
    6e7a:	f010 0f01 	tst.w	r0, #1
    6e7e:	d0de      	beq.n	6e3e <compare_int_unlock+0x2>
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6e80:	4b05      	ldr	r3, [pc, #20]	; (6e98 <compare_int_unlock+0x5c>)
    6e82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    6e86:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    6e8a:	e7d8      	b.n	6e3e <compare_int_unlock+0x2>
    6e8c:	20001d70 	.word	0x20001d70
    6e90:	40011000 	.word	0x40011000
    6e94:	20001d6c 	.word	0x20001d6c
    6e98:	e000e100 	.word	0xe000e100

00006e9c <sys_clock_timeout_handler>:
{
    6e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e9e:	4607      	mov	r7, r0
    6ea0:	4614      	mov	r4, r2
    6ea2:	461e      	mov	r6, r3
	uint32_t cc_value = absolute_time_to_cc(expire_time);
    6ea4:	4610      	mov	r0, r2
    6ea6:	4619      	mov	r1, r3
    6ea8:	f006 fd8f 	bl	d9ca <absolute_time_to_cc>
    6eac:	4605      	mov	r5, r0
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    6eae:	4b15      	ldr	r3, [pc, #84]	; (6f04 <sys_clock_timeout_handler+0x68>)
    6eb0:	681a      	ldr	r2, [r3, #0]
    6eb2:	1aa0      	subs	r0, r4, r2
	last_count += dticks * CYC_PER_TICK;
    6eb4:	601c      	str	r4, [r3, #0]
    6eb6:	605e      	str	r6, [r3, #4]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    6eb8:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    6ebc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    6ec0:	d308      	bcc.n	6ed4 <sys_clock_timeout_handler+0x38>
	return false;
    6ec2:	2400      	movs	r4, #0
	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    6ec4:	f004 f802 	bl	aecc <sys_clock_announce>
	if (cc_value == get_comparator(chan)) {
    6ec8:	4638      	mov	r0, r7
    6eca:	f7ff ff31 	bl	6d30 <get_comparator>
    6ece:	42a8      	cmp	r0, r5
    6ed0:	d00c      	beq.n	6eec <sys_clock_timeout_handler+0x50>
}
    6ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    6ed4:	4b0c      	ldr	r3, [pc, #48]	; (6f08 <sys_clock_timeout_handler+0x6c>)
    6ed6:	6819      	ldr	r1, [r3, #0]
    6ed8:	0a0b      	lsrs	r3, r1, #8
    6eda:	060a      	lsls	r2, r1, #24
    6edc:	1952      	adds	r2, r2, r5
    6ede:	f143 0300 	adc.w	r3, r3, #0
    6ee2:	490a      	ldr	r1, [pc, #40]	; (6f0c <sys_clock_timeout_handler+0x70>)
    6ee4:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    6ee8:	2401      	movs	r4, #1
    6eea:	e7eb      	b.n	6ec4 <sys_clock_timeout_handler+0x28>
		if (!anchor_updated) {
    6eec:	b11c      	cbz	r4, 6ef6 <sys_clock_timeout_handler+0x5a>
		event_enable(chan);
    6eee:	4638      	mov	r0, r7
    6ef0:	f7ff ff26 	bl	6d40 <event_enable>
}
    6ef4:	e7ed      	b.n	6ed2 <sys_clock_timeout_handler+0x36>
			set_comparator(chan, COUNTER_HALF_SPAN);
    6ef6:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
    6efa:	4638      	mov	r0, r7
    6efc:	f7ff ff0e 	bl	6d1c <set_comparator>
    6f00:	e7f5      	b.n	6eee <sys_clock_timeout_handler+0x52>
    6f02:	bf00      	nop
    6f04:	20000608 	.word	0x20000608
    6f08:	20001d74 	.word	0x20001d74
    6f0c:	200005f0 	.word	0x200005f0

00006f10 <z_nrf_rtc_timer_read>:
{
    6f10:	b538      	push	{r3, r4, r5, lr}
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    6f12:	4b0d      	ldr	r3, [pc, #52]	; (6f48 <z_nrf_rtc_timer_read+0x38>)
    6f14:	681b      	ldr	r3, [r3, #0]
    6f16:	0a1d      	lsrs	r5, r3, #8
    6f18:	061c      	lsls	r4, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    6f1a:	f3bf 8f5f 	dmb	sy
	uint32_t cntr = counter();
    6f1e:	f7ff ff23 	bl	6d68 <counter>
    6f22:	4603      	mov	r3, r0
	val += cntr;
    6f24:	1820      	adds	r0, r4, r0
    6f26:	f145 0100 	adc.w	r1, r5, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    6f2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    6f2e:	d20a      	bcs.n	6f46 <z_nrf_rtc_timer_read+0x36>
		if (val < anchor) {
    6f30:	4b06      	ldr	r3, [pc, #24]	; (6f4c <z_nrf_rtc_timer_read+0x3c>)
    6f32:	e9d3 2300 	ldrd	r2, r3, [r3]
    6f36:	4299      	cmp	r1, r3
    6f38:	bf08      	it	eq
    6f3a:	4290      	cmpeq	r0, r2
    6f3c:	d203      	bcs.n	6f46 <z_nrf_rtc_timer_read+0x36>
			val += COUNTER_SPAN;
    6f3e:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    6f42:	f141 0100 	adc.w	r1, r1, #0
}
    6f46:	bd38      	pop	{r3, r4, r5, pc}
    6f48:	20001d74 	.word	0x20001d74
    6f4c:	200005f0 	.word	0x200005f0

00006f50 <compare_set_nolocks>:
{
    6f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6f54:	4606      	mov	r6, r0
    6f56:	4614      	mov	r4, r2
    6f58:	461d      	mov	r5, r3
	uint32_t cc_value = absolute_time_to_cc(target_time);
    6f5a:	4610      	mov	r0, r2
    6f5c:	4619      	mov	r1, r3
    6f5e:	f006 fd34 	bl	d9ca <absolute_time_to_cc>
    6f62:	4607      	mov	r7, r0
	uint64_t curr_time = z_nrf_rtc_timer_read();
    6f64:	f7ff ffd4 	bl	6f10 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    6f68:	42a9      	cmp	r1, r5
    6f6a:	bf08      	it	eq
    6f6c:	42a0      	cmpeq	r0, r4
    6f6e:	d21e      	bcs.n	6fae <compare_set_nolocks+0x5e>
		if (target_time - curr_time > COUNTER_SPAN) {
    6f70:	ebb4 0800 	subs.w	r8, r4, r0
    6f74:	eb65 0901 	sbc.w	r9, r5, r1
    6f78:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    6f7c:	2300      	movs	r3, #0
    6f7e:	454b      	cmp	r3, r9
    6f80:	bf08      	it	eq
    6f82:	4542      	cmpeq	r2, r8
    6f84:	d32e      	bcc.n	6fe4 <compare_set_nolocks+0x94>
		if (target_time != cc_data[chan].target_time) {
    6f86:	4b19      	ldr	r3, [pc, #100]	; (6fec <compare_set_nolocks+0x9c>)
    6f88:	eb03 1306 	add.w	r3, r3, r6, lsl #4
    6f8c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    6f90:	42ab      	cmp	r3, r5
    6f92:	bf08      	it	eq
    6f94:	42a2      	cmpeq	r2, r4
    6f96:	d018      	beq.n	6fca <compare_set_nolocks+0x7a>
			uint32_t cc_set = set_absolute_alarm(chan, cc_value);
    6f98:	4639      	mov	r1, r7
    6f9a:	4630      	mov	r0, r6
    6f9c:	f006 fd26 	bl	d9ec <set_absolute_alarm>
			target_time += counter_sub(cc_set, cc_value);
    6fa0:	4639      	mov	r1, r7
    6fa2:	f006 fd02 	bl	d9aa <counter_sub>
    6fa6:	1824      	adds	r4, r4, r0
    6fa8:	f145 0500 	adc.w	r5, r5, #0
    6fac:	e00d      	b.n	6fca <compare_set_nolocks+0x7a>
		atomic_or(&force_isr_mask, BIT(chan));
    6fae:	2301      	movs	r3, #1
    6fb0:	40b3      	lsls	r3, r6
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6fb2:	4a0f      	ldr	r2, [pc, #60]	; (6ff0 <compare_set_nolocks+0xa0>)
    6fb4:	f3bf 8f5b 	dmb	ish
    6fb8:	e852 1f00 	ldrex	r1, [r2]
    6fbc:	4319      	orrs	r1, r3
    6fbe:	e842 1000 	strex	r0, r1, [r2]
    6fc2:	2800      	cmp	r0, #0
    6fc4:	d1f8      	bne.n	6fb8 <compare_set_nolocks+0x68>
    6fc6:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    6fca:	4b08      	ldr	r3, [pc, #32]	; (6fec <compare_set_nolocks+0x9c>)
    6fcc:	0132      	lsls	r2, r6, #4
    6fce:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    6fd2:	e9c6 4502 	strd	r4, r5, [r6, #8]
	cc_data[chan].callback = handler;
    6fd6:	9908      	ldr	r1, [sp, #32]
    6fd8:	5099      	str	r1, [r3, r2]
	cc_data[chan].user_context = user_data;
    6fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
    6fdc:	6073      	str	r3, [r6, #4]
	return ret;
    6fde:	2000      	movs	r0, #0
}
    6fe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return -EINVAL;
    6fe4:	f06f 0015 	mvn.w	r0, #21
    6fe8:	e7fa      	b.n	6fe0 <compare_set_nolocks+0x90>
    6fea:	bf00      	nop
    6fec:	200005f8 	.word	0x200005f8
    6ff0:	20001d6c 	.word	0x20001d6c

00006ff4 <process_channel>:

static void process_channel(int32_t chan)
{
    6ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6ff8:	b082      	sub	sp, #8
    6ffa:	4604      	mov	r4, r0
	if (channel_processing_check_and_clear(chan)) {
    6ffc:	f7ff fee2 	bl	6dc4 <channel_processing_check_and_clear>
    7000:	b910      	cbnz	r0, 7008 <process_channel+0x14>

		if (handler) {
			handler(chan, expire_time, user_context);
		}
	}
}
    7002:	b002      	add	sp, #8
    7004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		curr_time = z_nrf_rtc_timer_read();
    7008:	f7ff ff82 	bl	6f10 <z_nrf_rtc_timer_read>
    700c:	4606      	mov	r6, r0
    700e:	460f      	mov	r7, r1
		mcu_critical_state = full_int_lock();
    7010:	f006 fcde 	bl	d9d0 <full_int_lock>
    7014:	4682      	mov	sl, r0
		expire_time = cc_data[chan].target_time;
    7016:	4b13      	ldr	r3, [pc, #76]	; (7064 <process_channel+0x70>)
    7018:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    701c:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    7020:	454f      	cmp	r7, r9
    7022:	bf08      	it	eq
    7024:	4546      	cmpeq	r6, r8
    7026:	d20b      	bcs.n	7040 <process_channel+0x4c>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    7028:	2600      	movs	r6, #0
		full_int_unlock(mcu_critical_state);
    702a:	4650      	mov	r0, sl
    702c:	f006 fcd9 	bl	d9e2 <full_int_unlock>
		if (handler) {
    7030:	2e00      	cmp	r6, #0
    7032:	d0e6      	beq.n	7002 <process_channel+0xe>
			handler(chan, expire_time, user_context);
    7034:	9500      	str	r5, [sp, #0]
    7036:	4642      	mov	r2, r8
    7038:	464b      	mov	r3, r9
    703a:	4620      	mov	r0, r4
    703c:	47b0      	blx	r6
}
    703e:	e7e0      	b.n	7002 <process_channel+0xe>
			handler = cc_data[chan].callback;
    7040:	4a08      	ldr	r2, [pc, #32]	; (7064 <process_channel+0x70>)
    7042:	0123      	lsls	r3, r4, #4
    7044:	eb02 1104 	add.w	r1, r2, r4, lsl #4
    7048:	58d6      	ldr	r6, [r2, r3]
			user_context = cc_data[chan].user_context;
    704a:	684d      	ldr	r5, [r1, #4]
			cc_data[chan].callback = NULL;
    704c:	2000      	movs	r0, #0
    704e:	50d0      	str	r0, [r2, r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    7050:	f04f 32ff 	mov.w	r2, #4294967295
    7054:	f04f 33ff 	mov.w	r3, #4294967295
    7058:	e9c1 2302 	strd	r2, r3, [r1, #8]
			event_disable(chan);
    705c:	4620      	mov	r0, r4
    705e:	f7ff fe79 	bl	6d54 <event_disable>
    7062:	e7e2      	b.n	702a <process_channel+0x36>
    7064:	200005f8 	.word	0x200005f8

00007068 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    7068:	b510      	push	{r4, lr}
    return p_reg->INTENSET & mask;
    706a:	4b0d      	ldr	r3, [pc, #52]	; (70a0 <rtc_nrf_isr+0x38>)
    706c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
	ARG_UNUSED(arg);

	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    7070:	f013 0f02 	tst.w	r3, #2
    7074:	d00a      	beq.n	708c <rtc_nrf_isr+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7076:	4b0b      	ldr	r3, [pc, #44]	; (70a4 <rtc_nrf_isr+0x3c>)
    7078:	681b      	ldr	r3, [r3, #0]
    707a:	b13b      	cbz	r3, 708c <rtc_nrf_isr+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    707c:	4b09      	ldr	r3, [pc, #36]	; (70a4 <rtc_nrf_isr+0x3c>)
    707e:	2200      	movs	r2, #0
    7080:	601a      	str	r2, [r3, #0]
    7082:	681b      	ldr	r3, [r3, #0]
	    nrf_rtc_event_check(RTC, NRF_RTC_EVENT_OVERFLOW)) {
		nrf_rtc_event_clear(RTC, NRF_RTC_EVENT_OVERFLOW);
		overflow_cnt++;
    7084:	4a08      	ldr	r2, [pc, #32]	; (70a8 <rtc_nrf_isr+0x40>)
    7086:	6813      	ldr	r3, [r2, #0]
    7088:	3301      	adds	r3, #1
    708a:	6013      	str	r3, [r2, #0]
{
    708c:	2400      	movs	r4, #0
	}

	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    708e:	2c00      	cmp	r4, #0
    7090:	dd00      	ble.n	7094 <rtc_nrf_isr+0x2c>
		process_channel(chan);
	}
}
    7092:	bd10      	pop	{r4, pc}
		process_channel(chan);
    7094:	4620      	mov	r0, r4
    7096:	f7ff ffad 	bl	6ff4 <process_channel>
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    709a:	3401      	adds	r4, #1
    709c:	e7f7      	b.n	708e <rtc_nrf_isr+0x26>
    709e:	bf00      	nop
    70a0:	40011000 	.word	0x40011000
    70a4:	40011104 	.word	0x40011104
    70a8:	20001d74 	.word	0x20001d74

000070ac <sys_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int sys_clock_driver_init(const struct device *dev)
{
    70ac:	b530      	push	{r4, r5, lr}
    70ae:	b083      	sub	sp, #12
    p_reg->PRESCALER = val;
    70b0:	2300      	movs	r3, #0
    70b2:	4a1f      	ldr	r2, [pc, #124]	; (7130 <sys_clock_driver_init+0x84>)
    70b4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			CLOCK_CONTROL_NRF_LF_START_AVAILABLE :
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    70b8:	2b00      	cmp	r3, #0
    70ba:	dd27      	ble.n	710c <sys_clock_driver_init+0x60>
    p_reg->INTENSET = mask;
    70bc:	4c1c      	ldr	r4, [pc, #112]	; (7130 <sys_clock_driver_init+0x84>)
    70be:	2502      	movs	r5, #2
    70c0:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    70c4:	4b1b      	ldr	r3, [pc, #108]	; (7134 <sys_clock_driver_init+0x88>)
    70c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    70ca:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    70ce:	2200      	movs	r2, #0
    70d0:	2101      	movs	r1, #1
    70d2:	2011      	movs	r0, #17
    70d4:	f7fc fd84 	bl	3be0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    70d8:	2011      	movs	r0, #17
    70da:	f7fc fd4f 	bl	3b7c <arch_irq_enable>
    70de:	f8c4 5304 	str.w	r5, [r4, #772]	; 0x304
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    70e2:	2301      	movs	r3, #1
    70e4:	4a14      	ldr	r2, [pc, #80]	; (7138 <sys_clock_driver_init+0x8c>)
    70e6:	6013      	str	r3, [r2, #0]
    70e8:	6023      	str	r3, [r4, #0]

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    70ea:	4a14      	ldr	r2, [pc, #80]	; (713c <sys_clock_driver_init+0x90>)
    70ec:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
				(COUNTER_HALF_SPAN - 1) :
				(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    70ee:	2400      	movs	r4, #0
    70f0:	9401      	str	r4, [sp, #4]
    70f2:	4b13      	ldr	r3, [pc, #76]	; (7140 <sys_clock_driver_init+0x94>)
    70f4:	9300      	str	r3, [sp, #0]
    70f6:	4a13      	ldr	r2, [pc, #76]	; (7144 <sys_clock_driver_init+0x98>)
    70f8:	2300      	movs	r3, #0
    70fa:	4620      	mov	r0, r4
    70fc:	f006 fcb1 	bl	da62 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    7100:	4628      	mov	r0, r5
    7102:	f7ff f8f3 	bl	62ec <z_nrf_clock_control_lf_on>

	return 0;
}
    7106:	4620      	mov	r0, r4
    7108:	b003      	add	sp, #12
    710a:	bd30      	pop	{r4, r5, pc}
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    710c:	4a0e      	ldr	r2, [pc, #56]	; (7148 <sys_clock_driver_init+0x9c>)
    710e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    7112:	f04f 30ff 	mov.w	r0, #4294967295
    7116:	f04f 31ff 	mov.w	r1, #4294967295
    711a:	e9c2 0102 	strd	r0, r1, [r2, #8]
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    711e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    7122:	409a      	lsls	r2, r3
    p_reg->INTENSET = mask;
    7124:	4902      	ldr	r1, [pc, #8]	; (7130 <sys_clock_driver_init+0x84>)
    7126:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
    712a:	3301      	adds	r3, #1
    712c:	e7c4      	b.n	70b8 <sys_clock_driver_init+0xc>
    712e:	bf00      	nop
    7130:	40011000 	.word	0x40011000
    7134:	e000e100 	.word	0xe000e100
    7138:	40011008 	.word	0x40011008
    713c:	20001d70 	.word	0x20001d70
    7140:	00006e9d 	.word	0x00006e9d
    7144:	007fffff 	.word	0x007fffff
    7148:	200005f8 	.word	0x200005f8

0000714c <sys_clock_set_timeout>:

void sys_clock_set_timeout(int32_t ticks, bool idle)
{
    714c:	b510      	push	{r4, lr}
    714e:	b082      	sub	sp, #8

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    7150:	f1b0 3fff 	cmp.w	r0, #4294967295
    7154:	d007      	beq.n	7166 <sys_clock_set_timeout+0x1a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    7156:	1e44      	subs	r4, r0, #1
    7158:	2c00      	cmp	r4, #0
    715a:	dd07      	ble.n	716c <sys_clock_set_timeout+0x20>
    715c:	4b11      	ldr	r3, [pc, #68]	; (71a4 <sys_clock_set_timeout+0x58>)
    715e:	429c      	cmp	r4, r3
    7160:	dd05      	ble.n	716e <sys_clock_set_timeout+0x22>
    7162:	4c11      	ldr	r4, [pc, #68]	; (71a8 <sys_clock_set_timeout+0x5c>)
    7164:	e003      	b.n	716e <sys_clock_set_timeout+0x22>
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    7166:	f500 0000 	add.w	r0, r0, #8388608	; 0x800000
    716a:	e7f4      	b.n	7156 <sys_clock_set_timeout+0xa>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    716c:	2400      	movs	r4, #0

	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    716e:	f7ff fecf 	bl	6f10 <z_nrf_rtc_timer_read>
    7172:	4b0e      	ldr	r3, [pc, #56]	; (71ac <sys_clock_set_timeout+0x60>)
    7174:	e9d3 2300 	ldrd	r2, r3, [r3]
    7178:	1a80      	subs	r0, r0, r2
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    717a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    717e:	d300      	bcc.n	7182 <sys_clock_set_timeout+0x36>
		ticks = 0;
    7180:	2400      	movs	r4, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    7182:	4404      	add	r4, r0
    7184:	3401      	adds	r4, #1
	cyc = (cyc / CYC_PER_TICK) * CYC_PER_TICK;

	/* Due to elapsed time the calculation above might produce a
	 * duration that laps the counter.  Don't let it.
	 */
	if (cyc > MAX_CYCLES) {
    7186:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
    718a:	d300      	bcc.n	718e <sys_clock_set_timeout+0x42>
		cyc = MAX_CYCLES;
    718c:	4c06      	ldr	r4, [pc, #24]	; (71a8 <sys_clock_set_timeout+0x5c>)
	}

	uint64_t target_time = cyc + last_count;

	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    718e:	2000      	movs	r0, #0
    7190:	9001      	str	r0, [sp, #4]
    7192:	4907      	ldr	r1, [pc, #28]	; (71b0 <sys_clock_set_timeout+0x64>)
    7194:	9100      	str	r1, [sp, #0]
    7196:	1912      	adds	r2, r2, r4
    7198:	f143 0300 	adc.w	r3, r3, #0
    719c:	f006 fc61 	bl	da62 <compare_set>
}
    71a0:	b002      	add	sp, #8
    71a2:	bd10      	pop	{r4, pc}
    71a4:	007ffffe 	.word	0x007ffffe
    71a8:	007fffff 	.word	0x007fffff
    71ac:	20000608 	.word	0x20000608
    71b0:	00006e9d 	.word	0x00006e9d

000071b4 <sys_clock_elapsed>:

uint32_t sys_clock_elapsed(void)
{
    71b4:	b508      	push	{r3, lr}
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    71b6:	f7ff feab 	bl	6f10 <z_nrf_rtc_timer_read>
    71ba:	4b02      	ldr	r3, [pc, #8]	; (71c4 <sys_clock_elapsed+0x10>)
    71bc:	681b      	ldr	r3, [r3, #0]
}
    71be:	1ac0      	subs	r0, r0, r3
    71c0:	bd08      	pop	{r3, pc}
    71c2:	bf00      	nop
    71c4:	20000608 	.word	0x20000608

000071c8 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    71c8:	b508      	push	{r3, lr}
	z_impl_log_panic();
    71ca:	f7fa fb27 	bl	181c <z_impl_log_panic>
    71ce:	4b09      	ldr	r3, [pc, #36]	; (71f4 <k_sys_fatal_error_handler+0x2c>)
    71d0:	4a09      	ldr	r2, [pc, #36]	; (71f8 <k_sys_fatal_error_handler+0x30>)
    71d2:	1a9b      	subs	r3, r3, r2
    71d4:	08db      	lsrs	r3, r3, #3
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    71d6:	f04f 0100 	mov.w	r1, #0
    71da:	2201      	movs	r2, #1
    71dc:	f362 0102 	bfi	r1, r2, #0, #3
    71e0:	f36f 01c5 	bfc	r1, #3, #3
    71e4:	f363 118f 	bfi	r1, r3, #6, #10
    71e8:	4804      	ldr	r0, [pc, #16]	; (71fc <k_sys_fatal_error_handler+0x34>)
    71ea:	f7fa fae7 	bl	17bc <log_0>
		sys_arch_reboot(0);
    71ee:	2000      	movs	r0, #0
    71f0:	f7fd fb76 	bl	48e0 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    71f4:	0000e834 	.word	0x0000e834
    71f8:	0000e82c 	.word	0x0000e82c
    71fc:	0000f850 	.word	0x0000f850

00007200 <nrf52_errata_36>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7200:	4b03      	ldr	r3, [pc, #12]	; (7210 <nrf52_errata_36+0x10>)
    7202:	681b      	ldr	r3, [r3, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    7204:	2b08      	cmp	r3, #8
    7206:	d001      	beq.n	720c <nrf52_errata_36+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    7208:	2000      	movs	r0, #0
    720a:	4770      	bx	lr
                        return true;
    720c:	2001      	movs	r0, #1
    #endif
}
    720e:	4770      	bx	lr
    7210:	10000130 	.word	0x10000130

00007214 <nrf52_errata_66>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7214:	4b03      	ldr	r3, [pc, #12]	; (7224 <nrf52_errata_66+0x10>)
    7216:	681b      	ldr	r3, [r3, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    7218:	2b08      	cmp	r3, #8
    721a:	d001      	beq.n	7220 <nrf52_errata_66+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    721c:	2000      	movs	r0, #0
    721e:	4770      	bx	lr
                        return true;
    7220:	2001      	movs	r0, #1
    #endif
}
    7222:	4770      	bx	lr
    7224:	10000130 	.word	0x10000130

00007228 <nrf52_errata_98>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7228:	4b08      	ldr	r3, [pc, #32]	; (724c <nrf52_errata_98+0x24>)
    722a:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    722c:	3304      	adds	r3, #4
    722e:	681b      	ldr	r3, [r3, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    7230:	2a08      	cmp	r2, #8
    7232:	d001      	beq.n	7238 <nrf52_errata_98+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    7234:	2000      	movs	r0, #0
    7236:	4770      	bx	lr
                switch(var2)
    7238:	2b00      	cmp	r3, #0
    723a:	d804      	bhi.n	7246 <nrf52_errata_98+0x1e>
    723c:	e8df f003 	tbb	[pc, r3]
    7240:	01          	.byte	0x01
    7241:	00          	.byte	0x00
            if (var1 == 0x08)
    7242:	2001      	movs	r0, #1
    7244:	4770      	bx	lr
                        return false;
    7246:	2000      	movs	r0, #0
    #endif
}
    7248:	4770      	bx	lr
    724a:	bf00      	nop
    724c:	10000130 	.word	0x10000130

00007250 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7250:	4b08      	ldr	r3, [pc, #32]	; (7274 <nrf52_errata_103+0x24>)
    7252:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    7254:	3304      	adds	r3, #4
    7256:	681b      	ldr	r3, [r3, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    7258:	2a08      	cmp	r2, #8
    725a:	d001      	beq.n	7260 <nrf52_errata_103+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    725c:	2000      	movs	r0, #0
    725e:	4770      	bx	lr
                switch(var2)
    7260:	2b00      	cmp	r3, #0
    7262:	d804      	bhi.n	726e <nrf52_errata_103+0x1e>
    7264:	e8df f003 	tbb	[pc, r3]
    7268:	01          	.byte	0x01
    7269:	00          	.byte	0x00
            if (var1 == 0x08)
    726a:	2001      	movs	r0, #1
    726c:	4770      	bx	lr
                        return false;
    726e:	2000      	movs	r0, #0
    #endif
}
    7270:	4770      	bx	lr
    7272:	bf00      	nop
    7274:	10000130 	.word	0x10000130

00007278 <nrf52_errata_115>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7278:	4b08      	ldr	r3, [pc, #32]	; (729c <nrf52_errata_115+0x24>)
    727a:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    727c:	3304      	adds	r3, #4
    727e:	681b      	ldr	r3, [r3, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    7280:	2a08      	cmp	r2, #8
    7282:	d001      	beq.n	7288 <nrf52_errata_115+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    7284:	2000      	movs	r0, #0
    7286:	4770      	bx	lr
                switch(var2)
    7288:	2b00      	cmp	r3, #0
    728a:	d804      	bhi.n	7296 <nrf52_errata_115+0x1e>
    728c:	e8df f003 	tbb	[pc, r3]
    7290:	01          	.byte	0x01
    7291:	00          	.byte	0x00
            if (var1 == 0x08)
    7292:	2001      	movs	r0, #1
    7294:	4770      	bx	lr
                        return false;
    7296:	2000      	movs	r0, #0
    #endif
}
    7298:	4770      	bx	lr
    729a:	bf00      	nop
    729c:	10000130 	.word	0x10000130

000072a0 <nrf52_errata_120>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    72a0:	4b08      	ldr	r3, [pc, #32]	; (72c4 <nrf52_errata_120+0x24>)
    72a2:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    72a4:	3304      	adds	r3, #4
    72a6:	681b      	ldr	r3, [r3, #0]
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    72a8:	2a08      	cmp	r2, #8
    72aa:	d001      	beq.n	72b0 <nrf52_errata_120+0x10>
                    default:
                        return false;
                }
            }
        #endif
        return false;
    72ac:	2000      	movs	r0, #0
    72ae:	4770      	bx	lr
                switch(var2)
    72b0:	2b00      	cmp	r3, #0
    72b2:	d804      	bhi.n	72be <nrf52_errata_120+0x1e>
    72b4:	e8df f003 	tbb	[pc, r3]
    72b8:	01          	.byte	0x01
    72b9:	00          	.byte	0x00
            if (var1 == 0x08)
    72ba:	2001      	movs	r0, #1
    72bc:	4770      	bx	lr
                        return false;
    72be:	2000      	movs	r0, #0
    #endif
}
    72c0:	4770      	bx	lr
    72c2:	bf00      	nop
    72c4:	10000130 	.word	0x10000130

000072c8 <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    72c8:	4b03      	ldr	r3, [pc, #12]	; (72d8 <nrf52_errata_136+0x10>)
    72ca:	681b      	ldr	r3, [r3, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    72cc:	2b08      	cmp	r3, #8
    72ce:	d001      	beq.n	72d4 <nrf52_errata_136+0xc>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    72d0:	2000      	movs	r0, #0
    72d2:	4770      	bx	lr
                        return true;
    72d4:	2001      	movs	r0, #1
    #endif
}
    72d6:	4770      	bx	lr
    72d8:	10000130 	.word	0x10000130

000072dc <nrf52_errata_249>:
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    72dc:	4b06      	ldr	r3, [pc, #24]	; (72f8 <nrf52_errata_249+0x1c>)
    72de:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    72e0:	4a06      	ldr	r2, [pc, #24]	; (72fc <nrf52_errata_249+0x20>)
    72e2:	6812      	ldr	r2, [r2, #0]
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    72e4:	2b08      	cmp	r3, #8
    72e6:	d001      	beq.n	72ec <nrf52_errata_249+0x10>
                    default:
                        return true;
                }
            }
        #endif
        return false;
    72e8:	2000      	movs	r0, #0
    72ea:	4770      	bx	lr
                switch(var2)
    72ec:	2a03      	cmp	r2, #3
    72ee:	d801      	bhi.n	72f4 <nrf52_errata_249+0x18>
    72f0:	2000      	movs	r0, #0
    72f2:	4770      	bx	lr
                        return true;
    72f4:	2001      	movs	r0, #1
    #endif
}
    72f6:	4770      	bx	lr
    72f8:	10000130 	.word	0x10000130
    72fc:	10000134 	.word	0x10000134

00007300 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    7300:	4b02      	ldr	r3, [pc, #8]	; (730c <nvmc_wait+0xc>)
    7302:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    7306:	2b00      	cmp	r3, #0
    7308:	d0fa      	beq.n	7300 <nvmc_wait>
}
    730a:	4770      	bx	lr
    730c:	4001e000 	.word	0x4001e000

00007310 <nvmc_config>:

/*  Configure the NVMC to "mode".
    Mode must be an enumerator of field NVMC_CONFIG_WEN */
void nvmc_config(uint32_t mode)
{
    7310:	b508      	push	{r3, lr}
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    7312:	4b03      	ldr	r3, [pc, #12]	; (7320 <nvmc_config+0x10>)
    7314:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    nvmc_wait();
    7318:	f7ff fff2 	bl	7300 <nvmc_wait>
}
    731c:	bd08      	pop	{r3, pc}
    731e:	bf00      	nop
    7320:	4001e000 	.word	0x4001e000

00007324 <SystemCoreClockUpdate>:

void SystemCoreClockUpdate(void)
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    7324:	4b01      	ldr	r3, [pc, #4]	; (732c <SystemCoreClockUpdate+0x8>)
    7326:	4a02      	ldr	r2, [pc, #8]	; (7330 <SystemCoreClockUpdate+0xc>)
    7328:	601a      	str	r2, [r3, #0]
}
    732a:	4770      	bx	lr
    732c:	20000134 	.word	0x20000134
    7330:	03d09000 	.word	0x03d09000

00007334 <SystemInit>:

void SystemInit(void)
{
    7334:	b538      	push	{r3, r4, r5, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    7336:	f7ff ff63 	bl	7200 <nrf52_errata_36>
    733a:	b140      	cbz	r0, 734e <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    733c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7340:	2200      	movs	r2, #0
    7342:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    7346:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    734a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    734e:	f7ff ff61 	bl	7214 <nrf52_errata_66>
    7352:	2800      	cmp	r0, #0
    7354:	d046      	beq.n	73e4 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    7356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    735a:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    735e:	4b56      	ldr	r3, [pc, #344]	; (74b8 <SystemInit+0x184>)
    7360:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    7364:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    7368:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    736c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    7370:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    7374:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    7378:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    737c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    7380:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    7384:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    7388:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    738c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    7390:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    7394:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    7398:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    739c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    73a0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    73a4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    73a8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    73ac:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    73b0:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    73b4:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    73b8:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    73bc:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    73c0:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    73c4:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    73c8:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    73cc:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    73d0:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    73d4:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    73d8:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    73dc:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    73e0:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    73e4:	f7ff ff20 	bl	7228 <nrf52_errata_98>
    73e8:	b110      	cbz	r0, 73f0 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    73ea:	4b34      	ldr	r3, [pc, #208]	; (74bc <SystemInit+0x188>)
    73ec:	4a34      	ldr	r2, [pc, #208]	; (74c0 <SystemInit+0x18c>)
    73ee:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    73f0:	f7ff ff2e 	bl	7250 <nrf52_errata_103>
    73f4:	b118      	cbz	r0, 73fe <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    73f6:	4b33      	ldr	r3, [pc, #204]	; (74c4 <SystemInit+0x190>)
    73f8:	22fb      	movs	r2, #251	; 0xfb
    73fa:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    73fe:	f7ff ff3b 	bl	7278 <nrf52_errata_115>
    7402:	b148      	cbz	r0, 7418 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    7404:	4930      	ldr	r1, [pc, #192]	; (74c8 <SystemInit+0x194>)
    7406:	680b      	ldr	r3, [r1, #0]
    7408:	f023 030f 	bic.w	r3, r3, #15
    740c:	4a2f      	ldr	r2, [pc, #188]	; (74cc <SystemInit+0x198>)
    740e:	6812      	ldr	r2, [r2, #0]
    7410:	f002 020f 	and.w	r2, r2, #15
    7414:	4313      	orrs	r3, r2
    7416:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    7418:	f7ff ff42 	bl	72a0 <nrf52_errata_120>
    741c:	b118      	cbz	r0, 7426 <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    741e:	4b2c      	ldr	r3, [pc, #176]	; (74d0 <SystemInit+0x19c>)
    7420:	f44f 7200 	mov.w	r2, #512	; 0x200
    7424:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    7426:	f7ff ff4f 	bl	72c8 <nrf52_errata_136>
    742a:	b160      	cbz	r0, 7446 <SystemInit+0x112>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    742c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7430:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    7434:	f013 0f01 	tst.w	r3, #1
    7438:	d005      	beq.n	7446 <SystemInit+0x112>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    743a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    743e:	f06f 0201 	mvn.w	r2, #1
    7442:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_errata_249())
    7446:	f7ff ff49 	bl	72dc <nrf52_errata_249>
    744a:	b138      	cbz	r0, 745c <SystemInit+0x128>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    744c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    7450:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    7454:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7458:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    745c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    7460:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
    7464:	2b00      	cmp	r3, #0
    7466:	db08      	blt.n	747a <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    7468:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    746c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    7470:	2b00      	cmp	r3, #0
    7472:	db02      	blt.n	747a <SystemInit+0x146>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
    7474:	f7ff ff56 	bl	7324 <SystemCoreClockUpdate>
}
    7478:	bd38      	pop	{r3, r4, r5, pc}
            nvmc_config(NVMC_CONFIG_WEN_Wen);
    747a:	2001      	movs	r0, #1
    747c:	f7ff ff48 	bl	7310 <nvmc_config>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    7480:	f04f 2410 	mov.w	r4, #268439552	; 0x10001000
    7484:	2512      	movs	r5, #18
    7486:	f8c4 5200 	str.w	r5, [r4, #512]	; 0x200
            nvmc_wait();
    748a:	f7ff ff39 	bl	7300 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    748e:	f8c4 5204 	str.w	r5, [r4, #516]	; 0x204
            nvmc_wait();
    7492:	f7ff ff35 	bl	7300 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Ren);
    7496:	2000      	movs	r0, #0
    7498:	f7ff ff3a 	bl	7310 <nvmc_config>
  __ASM volatile ("dsb 0xF":::"memory");
    749c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    74a0:	490c      	ldr	r1, [pc, #48]	; (74d4 <SystemInit+0x1a0>)
    74a2:	68ca      	ldr	r2, [r1, #12]
    74a4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    74a8:	4b0b      	ldr	r3, [pc, #44]	; (74d8 <SystemInit+0x1a4>)
    74aa:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    74ac:	60cb      	str	r3, [r1, #12]
    74ae:	f3bf 8f4f 	dsb	sy
    __NOP();
    74b2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    74b4:	e7fd      	b.n	74b2 <SystemInit+0x17e>
    74b6:	bf00      	nop
    74b8:	4000c000 	.word	0x4000c000
    74bc:	4000568c 	.word	0x4000568c
    74c0:	00038148 	.word	0x00038148
    74c4:	4000f000 	.word	0x4000f000
    74c8:	40000ee4 	.word	0x40000ee4
    74cc:	10000258 	.word	0x10000258
    74d0:	40029640 	.word	0x40029640
    74d4:	e000ed00 	.word	0xe000ed00
    74d8:	05fa0004 	.word	0x05fa0004

000074dc <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    74dc:	4b06      	ldr	r3, [pc, #24]	; (74f8 <nrfx_clock_init+0x1c>)
    74de:	791b      	ldrb	r3, [r3, #4]
    74e0:	b93b      	cbnz	r3, 74f2 <nrfx_clock_init+0x16>
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
    74e2:	4b05      	ldr	r3, [pc, #20]	; (74f8 <nrfx_clock_init+0x1c>)
    74e4:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    74e6:	2201      	movs	r2, #1
    74e8:	711a      	strb	r2, [r3, #4]
#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        m_clock_cb.hfclk_started = false;
    74ea:	2200      	movs	r2, #0
    74ec:	715a      	strb	r2, [r3, #5]
    nrfx_err_t err_code = NRFX_SUCCESS;
    74ee:	4803      	ldr	r0, [pc, #12]	; (74fc <nrfx_clock_init+0x20>)
    74f0:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    74f2:	4803      	ldr	r0, [pc, #12]	; (7500 <nrfx_clock_init+0x24>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    74f4:	4770      	bx	lr
    74f6:	bf00      	nop
    74f8:	20001d78 	.word	0x20001d78
    74fc:	0bad0000 	.word	0x0bad0000
    7500:	0bad000c 	.word	0x0bad000c

00007504 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    7504:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    7506:	2000      	movs	r0, #0
    7508:	f7fc fb5c 	bl	3bc4 <arch_irq_is_enabled>
    750c:	b118      	cbz	r0, 7516 <nrfx_clock_enable+0x12>
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
    750e:	4b03      	ldr	r3, [pc, #12]	; (751c <nrfx_clock_enable+0x18>)
    7510:	2201      	movs	r2, #1
    7512:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    7514:	bd08      	pop	{r3, pc}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    7516:	f7fc fb31 	bl	3b7c <arch_irq_enable>
    751a:	e7f8      	b.n	750e <nrfx_clock_enable+0xa>
    751c:	20002550 	.word	0x20002550

00007520 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    7520:	b110      	cbz	r0, 7528 <nrfx_clock_start+0x8>
    7522:	2801      	cmp	r0, #1
    7524:	d025      	beq.n	7572 <nrfx_clock_start+0x52>
    7526:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    7528:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    752c:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    7530:	f003 0303 	and.w	r3, r3, #3
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    7534:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    7538:	f412 3f80 	tst.w	r2, #65536	; 0x10000
    753c:	d111      	bne.n	7562 <nrfx_clock_start+0x42>
    p_reg->LFCLKSRC = (uint32_t)(source);
    753e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7542:	2200      	movs	r2, #0
    7544:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7548:	4b0f      	ldr	r3, [pc, #60]	; (7588 <nrfx_clock_start+0x68>)
    754a:	2200      	movs	r2, #0
    754c:	601a      	str	r2, [r3, #0]
    754e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    7550:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7554:	2202      	movs	r2, #2
    7556:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    755a:	3308      	adds	r3, #8
    755c:	2201      	movs	r2, #1
    755e:	601a      	str	r2, [r3, #0]
}
    7560:	4770      	bx	lr
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    7562:	2b01      	cmp	r3, #1
    7564:	d1eb      	bne.n	753e <nrfx_clock_start+0x1e>
    p_reg->LFCLKSRC = (uint32_t)(source);
    7566:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    756a:	2201      	movs	r2, #1
    756c:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    7570:	e7ea      	b.n	7548 <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7572:	4b06      	ldr	r3, [pc, #24]	; (758c <nrfx_clock_start+0x6c>)
    7574:	2200      	movs	r2, #0
    7576:	601a      	str	r2, [r3, #0]
    7578:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    757a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    757e:	2201      	movs	r2, #1
    7580:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7584:	601a      	str	r2, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
    7586:	4770      	bx	lr
    7588:	40000104 	.word	0x40000104
    758c:	40000100 	.word	0x40000100

00007590 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    7590:	b530      	push	{r4, r5, lr}
    7592:	b083      	sub	sp, #12
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
    7594:	4604      	mov	r4, r0
    7596:	b118      	cbz	r0, 75a0 <nrfx_clock_stop+0x10>
    7598:	2801      	cmp	r0, #1
    759a:	d013      	beq.n	75c4 <nrfx_clock_stop+0x34>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    759c:	b003      	add	sp, #12
    759e:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
    75a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    75a4:	2202      	movs	r2, #2
    75a6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    75aa:	f503 7382 	add.w	r3, r3, #260	; 0x104
    75ae:	2200      	movs	r2, #0
    75b0:	601a      	str	r2, [r3, #0]
    75b2:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    75b4:	4b39      	ldr	r3, [pc, #228]	; (769c <nrfx_clock_stop+0x10c>)
    75b6:	2201      	movs	r2, #1
    75b8:	601a      	str	r2, [r3, #0]
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    75ba:	2c01      	cmp	r4, #1
    75bc:	d00f      	beq.n	75de <nrfx_clock_stop+0x4e>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    75be:	f242 7510 	movw	r5, #10000	; 0x2710
    75c2:	e052      	b.n	766a <nrfx_clock_stop+0xda>
    p_reg->INTENCLR = mask;
    75c4:	2301      	movs	r3, #1
    75c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    75ca:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    75ce:	f502 7280 	add.w	r2, r2, #256	; 0x100
    75d2:	2100      	movs	r1, #0
    75d4:	6011      	str	r1, [r2, #0]
    75d6:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    75d8:	4a31      	ldr	r2, [pc, #196]	; (76a0 <nrfx_clock_stop+0x110>)
    75da:	6013      	str	r3, [r2, #0]
}
    75dc:	e7ed      	b.n	75ba <nrfx_clock_stop+0x2a>
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    75de:	2301      	movs	r3, #1
    75e0:	f88d 3007 	strb.w	r3, [sp, #7]
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    75e4:	f242 7510 	movw	r5, #10000	; 0x2710
    75e8:	e018      	b.n	761c <nrfx_clock_stop+0x8c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    75ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    75ee:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    75f2:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    75f6:	f8cd 3007 	str.w	r3, [sp, #7]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    75fa:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    75fe:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7602:	d120      	bne.n	7646 <nrfx_clock_stop+0xb6>
    return false;
    7604:	2300      	movs	r3, #0
    7606:	2b00      	cmp	r3, #0
    7608:	d042      	beq.n	7690 <nrfx_clock_stop+0x100>
    760a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    760e:	2b01      	cmp	r3, #1
    7610:	d13e      	bne.n	7690 <nrfx_clock_stop+0x100>
    7612:	2001      	movs	r0, #1
    7614:	f006 fa53 	bl	dabe <nrfx_busy_wait>
    7618:	3d01      	subs	r5, #1
    761a:	d039      	beq.n	7690 <nrfx_clock_stop+0x100>
    switch (domain)
    761c:	2c00      	cmp	r4, #0
    761e:	d0e4      	beq.n	75ea <nrfx_clock_stop+0x5a>
    7620:	2c01      	cmp	r4, #1
    7622:	d001      	beq.n	7628 <nrfx_clock_stop+0x98>
    7624:	2300      	movs	r3, #0
    7626:	e7ee      	b.n	7606 <nrfx_clock_stop+0x76>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    7628:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    762c:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    7630:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    7634:	f88d 3007 	strb.w	r3, [sp, #7]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    7638:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
    763c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7640:	d103      	bne.n	764a <nrfx_clock_stop+0xba>
    return false;
    7642:	2300      	movs	r3, #0
    7644:	e7df      	b.n	7606 <nrfx_clock_stop+0x76>
                return true;
    7646:	2301      	movs	r3, #1
    7648:	e7dd      	b.n	7606 <nrfx_clock_stop+0x76>
                return true;
    764a:	2301      	movs	r3, #1
    764c:	e7db      	b.n	7606 <nrfx_clock_stop+0x76>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    764e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7652:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    7656:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    765a:	d115      	bne.n	7688 <nrfx_clock_stop+0xf8>
    return false;
    765c:	2300      	movs	r3, #0
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    765e:	b1bb      	cbz	r3, 7690 <nrfx_clock_stop+0x100>
    7660:	2001      	movs	r0, #1
    7662:	f006 fa2c 	bl	dabe <nrfx_busy_wait>
    7666:	3d01      	subs	r5, #1
    7668:	d012      	beq.n	7690 <nrfx_clock_stop+0x100>
    switch (domain)
    766a:	2c00      	cmp	r4, #0
    766c:	d0ef      	beq.n	764e <nrfx_clock_stop+0xbe>
    766e:	2c01      	cmp	r4, #1
    7670:	d001      	beq.n	7676 <nrfx_clock_stop+0xe6>
    7672:	2300      	movs	r3, #0
    7674:	e7f3      	b.n	765e <nrfx_clock_stop+0xce>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    7676:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    767a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    767e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7682:	d103      	bne.n	768c <nrfx_clock_stop+0xfc>
    return false;
    7684:	2300      	movs	r3, #0
    7686:	e7ea      	b.n	765e <nrfx_clock_stop+0xce>
                return true;
    7688:	2301      	movs	r3, #1
    768a:	e7e8      	b.n	765e <nrfx_clock_stop+0xce>
                return true;
    768c:	2301      	movs	r3, #1
    768e:	e7e6      	b.n	765e <nrfx_clock_stop+0xce>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    7690:	2c01      	cmp	r4, #1
    7692:	d183      	bne.n	759c <nrfx_clock_stop+0xc>
            m_clock_cb.hfclk_started = false;
    7694:	4b03      	ldr	r3, [pc, #12]	; (76a4 <nrfx_clock_stop+0x114>)
    7696:	2200      	movs	r2, #0
    7698:	715a      	strb	r2, [r3, #5]
    769a:	e77f      	b.n	759c <nrfx_clock_stop+0xc>
    769c:	4000000c 	.word	0x4000000c
    76a0:	40000004 	.word	0x40000004
    76a4:	20001d78 	.word	0x20001d78

000076a8 <nrfx_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    76a8:	b508      	push	{r3, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    76aa:	4b1b      	ldr	r3, [pc, #108]	; (7718 <nrfx_clock_irq_handler+0x70>)
    76ac:	681b      	ldr	r3, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    76ae:	b183      	cbz	r3, 76d2 <nrfx_clock_irq_handler+0x2a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    76b0:	4b19      	ldr	r3, [pc, #100]	; (7718 <nrfx_clock_irq_handler+0x70>)
    76b2:	2200      	movs	r2, #0
    76b4:	601a      	str	r2, [r3, #0]
    76b6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    76b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    76bc:	2201      	movs	r2, #1
    76be:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    76c2:	4b16      	ldr	r3, [pc, #88]	; (771c <nrfx_clock_irq_handler+0x74>)
    76c4:	795b      	ldrb	r3, [r3, #5]
    76c6:	b923      	cbnz	r3, 76d2 <nrfx_clock_irq_handler+0x2a>
        {
            m_clock_cb.hfclk_started = true;
    76c8:	4b14      	ldr	r3, [pc, #80]	; (771c <nrfx_clock_irq_handler+0x74>)
    76ca:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    76cc:	681b      	ldr	r3, [r3, #0]
    76ce:	2000      	movs	r0, #0
    76d0:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    76d2:	4b13      	ldr	r3, [pc, #76]	; (7720 <nrfx_clock_irq_handler+0x78>)
    76d4:	681b      	ldr	r3, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    76d6:	b19b      	cbz	r3, 7700 <nrfx_clock_irq_handler+0x58>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    76d8:	4b11      	ldr	r3, [pc, #68]	; (7720 <nrfx_clock_irq_handler+0x78>)
    76da:	2200      	movs	r2, #0
    76dc:	601a      	str	r2, [r3, #0]
    76de:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    76e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    76e4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    76e8:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    76ec:	f012 0f03 	tst.w	r2, #3
    76f0:	d107      	bne.n	7702 <nrfx_clock_irq_handler+0x5a>
    p_reg->LFCLKSRC = (uint32_t)(source);
    76f2:	2301      	movs	r3, #1
    76f4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    76f8:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    76fc:	3208      	adds	r2, #8
    76fe:	6013      	str	r3, [r2, #0]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    7700:	bd08      	pop	{r3, pc}
    p_reg->INTENCLR = mask;
    7702:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7706:	2202      	movs	r2, #2
    7708:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    770c:	4b03      	ldr	r3, [pc, #12]	; (771c <nrfx_clock_irq_handler+0x74>)
    770e:	681b      	ldr	r3, [r3, #0]
    7710:	2001      	movs	r0, #1
    7712:	4798      	blx	r3
}
    7714:	e7f4      	b.n	7700 <nrfx_clock_irq_handler+0x58>
    7716:	bf00      	nop
    7718:	40000100 	.word	0x40000100
    771c:	20001d78 	.word	0x20001d78
    7720:	40000104 	.word	0x40000104

00007724 <is_allocated_channel>:
    NRFX_LOG_INFO("Uninitialized.");
}

static bool is_allocated_channel(uint8_t index)
{
    return m_cb.allocated_channels_mask & (1UL << index);
    7724:	4b04      	ldr	r3, [pc, #16]	; (7738 <is_allocated_channel+0x14>)
    7726:	6dda      	ldr	r2, [r3, #92]	; 0x5c
    7728:	2301      	movs	r3, #1
    772a:	4083      	lsls	r3, r0
    772c:	421a      	tst	r2, r3
}
    772e:	bf14      	ite	ne
    7730:	2001      	movne	r0, #1
    7732:	2000      	moveq	r0, #0
    7734:	4770      	bx	lr
    7736:	bf00      	nop
    7738:	20001d80 	.word	0x20001d80

0000773c <channel_allocated_set>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
}

static void channel_allocated_set(uint8_t index)
{
    m_cb.allocated_channels_mask |= (1UL << index);
    773c:	2301      	movs	r3, #1
    773e:	fa03 f000 	lsl.w	r0, r3, r0
    7742:	4a02      	ldr	r2, [pc, #8]	; (774c <channel_allocated_set+0x10>)
    7744:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    7746:	4303      	orrs	r3, r0
    7748:	65d3      	str	r3, [r2, #92]	; 0x5c
}
    774a:	4770      	bx	lr
    774c:	20001d80 	.word	0x20001d80

00007750 <channel_allocated_clr>:

static void channel_allocated_clr(uint8_t index)
{
    m_cb.allocated_channels_mask &= ~(1UL << index);
    7750:	2301      	movs	r3, #1
    7752:	fa03 f000 	lsl.w	r0, r3, r0
    7756:	4a03      	ldr	r2, [pc, #12]	; (7764 <channel_allocated_clr+0x14>)
    7758:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
    775a:	ea23 0300 	bic.w	r3, r3, r0
    775e:	65d3      	str	r3, [r2, #92]	; 0x5c
}
    7760:	4770      	bx	lr
    7762:	bf00      	nop
    7764:	20001d80 	.word	0x20001d80

00007768 <nrfx_gpiote_channel_free>:

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    7768:	b538      	push	{r3, r4, r5, lr}
    776a:	4604      	mov	r4, r0
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
    776c:	f006 f9ab 	bl	dac6 <is_app_channel>
    7770:	b908      	cbnz	r0, 7776 <nrfx_gpiote_channel_free+0xe>
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    7772:	4809      	ldr	r0, [pc, #36]	; (7798 <nrfx_gpiote_channel_free+0x30>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    7774:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    7776:	f04f 0320 	mov.w	r3, #32
    777a:	f3ef 8511 	mrs	r5, BASEPRI
    777e:	f383 8812 	msr	BASEPRI_MAX, r3
    7782:	f3bf 8f6f 	isb	sy
        channel_allocated_clr(channel);
    7786:	4620      	mov	r0, r4
    7788:	f7ff ffe2 	bl	7750 <channel_allocated_clr>
	__asm__ volatile(
    778c:	f385 8811 	msr	BASEPRI, r5
    7790:	f3bf 8f6f 	isb	sy
    nrfx_err_t err_code = NRFX_SUCCESS;
    7794:	4801      	ldr	r0, [pc, #4]	; (779c <nrfx_gpiote_channel_free+0x34>)
}
    7796:	e7ed      	b.n	7774 <nrfx_gpiote_channel_free+0xc>
    7798:	0bad0004 	.word	0x0bad0004
    779c:	0bad0000 	.word	0x0bad0000

000077a0 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
    77a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    77a4:	4680      	mov	r8, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;

    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    77a6:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
    77a8:	25ff      	movs	r5, #255	; 0xff
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    77aa:	4f17      	ldr	r7, [pc, #92]	; (7808 <nrfx_gpiote_channel_alloc+0x68>)
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    77ac:	e013      	b.n	77d6 <nrfx_gpiote_channel_alloc+0x36>
    {
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
    77ae:	4620      	mov	r0, r4
    77b0:	f7ff ffc4 	bl	773c <channel_allocated_set>
            *p_channel = ch_idx;
    77b4:	f888 4000 	strb.w	r4, [r8]
            err_code = NRFX_SUCCESS;
    77b8:	4f14      	ldr	r7, [pc, #80]	; (780c <nrfx_gpiote_channel_alloc+0x6c>)
	__asm__ volatile(
    77ba:	f386 8811 	msr	BASEPRI, r6
    77be:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
    77c2:	4b12      	ldr	r3, [pc, #72]	; (780c <nrfx_gpiote_channel_alloc+0x6c>)
    77c4:	429f      	cmp	r7, r3
    77c6:	d01b      	beq.n	7800 <nrfx_gpiote_channel_alloc+0x60>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
    77c8:	2301      	movs	r3, #1
    77ca:	fa03 f309 	lsl.w	r3, r3, r9
    77ce:	ea25 0503 	bic.w	r5, r5, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
    77d2:	3401      	adds	r4, #1
    77d4:	b2e4      	uxtb	r4, r4
    77d6:	b19d      	cbz	r5, 7800 <nrfx_gpiote_channel_alloc+0x60>
	__asm__ volatile(
    77d8:	f04f 0320 	mov.w	r3, #32
    77dc:	f3ef 8611 	mrs	r6, BASEPRI
    77e0:	f383 8812 	msr	BASEPRI_MAX, r3
    77e4:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
    77e8:	46a1      	mov	r9, r4
    77ea:	fa25 f304 	lsr.w	r3, r5, r4
    77ee:	f013 0f01 	tst.w	r3, #1
    77f2:	d0e2      	beq.n	77ba <nrfx_gpiote_channel_alloc+0x1a>
    77f4:	4620      	mov	r0, r4
    77f6:	f7ff ff95 	bl	7724 <is_allocated_channel>
    77fa:	2800      	cmp	r0, #0
    77fc:	d1dd      	bne.n	77ba <nrfx_gpiote_channel_alloc+0x1a>
    77fe:	e7d6      	b.n	77ae <nrfx_gpiote_channel_alloc+0xe>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    7800:	4638      	mov	r0, r7
    7802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7806:	bf00      	nop
    7808:	0bad0002 	.word	0x0bad0002
    780c:	0bad0000 	.word	0x0bad0000

00007810 <nrf52_errata_197>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7810:	4b06      	ldr	r3, [pc, #24]	; (782c <nrf52_errata_197+0x1c>)
    7812:	681b      	ldr	r3, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    7814:	4a06      	ldr	r2, [pc, #24]	; (7830 <nrf52_errata_197+0x20>)
    7816:	6812      	ldr	r2, [r2, #0]
            if (var1 == 0x08)
    7818:	2b08      	cmp	r3, #8
    781a:	d001      	beq.n	7820 <nrf52_errata_197+0x10>
        return false;
    781c:	2000      	movs	r0, #0
    781e:	4770      	bx	lr
                switch(var2)
    7820:	2a02      	cmp	r2, #2
    7822:	d001      	beq.n	7828 <nrf52_errata_197+0x18>
                        return false;
    7824:	2000      	movs	r0, #0
    7826:	4770      	bx	lr
                        return true;
    7828:	2001      	movs	r0, #1
}
    782a:	4770      	bx	lr
    782c:	10000130 	.word	0x10000130
    7830:	10000134 	.word	0x10000134

00007834 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
    7834:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
    7836:	4b18      	ldr	r3, [pc, #96]	; (7898 <nrfx_power_init+0x64>)
    7838:	781b      	ldrb	r3, [r3, #0]
    783a:	bb5b      	cbnz	r3, 7894 <nrfx_power_init+0x60>
    783c:	4604      	mov	r4, r0
    {
        return NRFX_ERROR_ALREADY_INITIALIZED;
    }

#if NRF_POWER_HAS_DCDCEN_VDDH
    nrf_power_dcdcen_vddh_set(NRF_POWER, p_config->dcdcenhv);
    783e:	7803      	ldrb	r3, [r0, #0]
    7840:	f3c3 0540 	ubfx	r5, r3, #1, #1
    if (enable && nrf52_errata_197())
    7844:	f013 0f02 	tst.w	r3, #2
    7848:	d005      	beq.n	7856 <nrfx_power_init+0x22>
    784a:	f7ff ffe1 	bl	7810 <nrf52_errata_197>
    784e:	b110      	cbz	r0, 7856 <nrfx_power_init+0x22>
        *(volatile uint32_t *)0x40000638ul = 1ul;
    7850:	4b12      	ldr	r3, [pc, #72]	; (789c <nrfx_power_init+0x68>)
    7852:	2201      	movs	r2, #1
    7854:	601a      	str	r2, [r3, #0]
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    7856:	b1b5      	cbz	r5, 7886 <nrfx_power_init+0x52>
    7858:	2201      	movs	r2, #1
    785a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    785e:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
#elif NRF_REGULATORS_HAS_DCDCEN_VDDH
    nrf_regulators_dcdcen_vddh_set(NRF_REGULATORS, p_config->dcdcenhv);
#endif

#if NRF_POWER_HAS_DCDCEN
    nrf_power_dcdcen_set(NRF_POWER, p_config->dcdcen);
    7862:	7823      	ldrb	r3, [r4, #0]
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    7864:	f013 0f01 	tst.w	r3, #1
    7868:	d00f      	beq.n	788a <nrfx_power_init+0x56>
    786a:	2201      	movs	r2, #1
    786c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7870:	f8c3 2578 	str.w	r2, [r3, #1400]	; 0x578
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    7874:	2000      	movs	r0, #0
    7876:	f7fc f9a5 	bl	3bc4 <arch_irq_is_enabled>
    787a:	b140      	cbz	r0, 788e <nrfx_power_init+0x5a>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
    787c:	4b06      	ldr	r3, [pc, #24]	; (7898 <nrfx_power_init+0x64>)
    787e:	2201      	movs	r2, #1
    7880:	701a      	strb	r2, [r3, #0]
    return NRFX_SUCCESS;
    7882:	4807      	ldr	r0, [pc, #28]	; (78a0 <nrfx_power_init+0x6c>)
}
    7884:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    7886:	2200      	movs	r2, #0
    7888:	e7e7      	b.n	785a <nrfx_power_init+0x26>
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    788a:	2200      	movs	r2, #0
    788c:	e7ee      	b.n	786c <nrfx_power_init+0x38>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    788e:	f7fc f975 	bl	3b7c <arch_irq_enable>
    7892:	e7f3      	b.n	787c <nrfx_power_init+0x48>
        return NRFX_ERROR_ALREADY_INITIALIZED;
    7894:	4803      	ldr	r0, [pc, #12]	; (78a4 <nrfx_power_init+0x70>)
    7896:	e7f5      	b.n	7884 <nrfx_power_init+0x50>
    7898:	20002551 	.word	0x20002551
    789c:	40000638 	.word	0x40000638
    78a0:	0bad0000 	.word	0x0bad0000
    78a4:	0bad000c 	.word	0x0bad000c

000078a8 <nrfx_power_usbevt_uninit>:
                                     NRF_POWER_INT_USBREMOVED_MASK  |
                                     NRF_POWER_INT_USBPWRRDY_MASK);
}

void nrfx_power_usbevt_uninit(void)
{
    78a8:	b508      	push	{r3, lr}
    nrfx_power_usbevt_disable();
    78aa:	f006 f91b 	bl	dae4 <nrfx_power_usbevt_disable>
    m_usbevt_handler = NULL;
    78ae:	4b02      	ldr	r3, [pc, #8]	; (78b8 <nrfx_power_usbevt_uninit+0x10>)
    78b0:	2200      	movs	r2, #0
    78b2:	601a      	str	r2, [r3, #0]
}
    78b4:	bd08      	pop	{r3, pc}
    78b6:	bf00      	nop
    78b8:	20001de8 	.word	0x20001de8

000078bc <nrfx_power_usbevt_init>:
{
    78bc:	b510      	push	{r4, lr}
    78be:	4604      	mov	r4, r0
    nrfx_power_usbevt_uninit();
    78c0:	f7ff fff2 	bl	78a8 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
    78c4:	6823      	ldr	r3, [r4, #0]
    78c6:	b10b      	cbz	r3, 78cc <nrfx_power_usbevt_init+0x10>
        m_usbevt_handler = p_config->handler;
    78c8:	4a01      	ldr	r2, [pc, #4]	; (78d0 <nrfx_power_usbevt_init+0x14>)
    78ca:	6013      	str	r3, [r2, #0]
}
    78cc:	bd10      	pop	{r4, pc}
    78ce:	bf00      	nop
    78d0:	20001de8 	.word	0x20001de8

000078d4 <nrfx_power_irq_handler>:

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    78d4:	b510      	push	{r4, lr}
    return p_reg->INTENSET;
    78d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    78da:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    78de:	f014 0f04 	tst.w	r4, #4
    78e2:	d00b      	beq.n	78fc <nrfx_power_irq_handler+0x28>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    78e4:	f503 7384 	add.w	r3, r3, #264	; 0x108
    78e8:	681b      	ldr	r3, [r3, #0]
    if (ret)
    78ea:	b11b      	cbz	r3, 78f4 <nrfx_power_irq_handler+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    78ec:	4a29      	ldr	r2, [pc, #164]	; (7994 <nrfx_power_irq_handler+0xc0>)
    78ee:	2100      	movs	r1, #0
    78f0:	6011      	str	r1, [r2, #0]
    78f2:	6812      	ldr	r2, [r2, #0]
    78f4:	b113      	cbz	r3, 78fc <nrfx_power_irq_handler+0x28>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    78f6:	4b28      	ldr	r3, [pc, #160]	; (7998 <nrfx_power_irq_handler+0xc4>)
    78f8:	681b      	ldr	r3, [r3, #0]
    78fa:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    78fc:	f014 0f20 	tst.w	r4, #32
    7900:	d00b      	beq.n	791a <nrfx_power_irq_handler+0x46>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7902:	4b26      	ldr	r3, [pc, #152]	; (799c <nrfx_power_irq_handler+0xc8>)
    7904:	681b      	ldr	r3, [r3, #0]
    if (ret)
    7906:	b11b      	cbz	r3, 7910 <nrfx_power_irq_handler+0x3c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7908:	4a24      	ldr	r2, [pc, #144]	; (799c <nrfx_power_irq_handler+0xc8>)
    790a:	2100      	movs	r1, #0
    790c:	6011      	str	r1, [r2, #0]
    790e:	6812      	ldr	r2, [r2, #0]
    7910:	b11b      	cbz	r3, 791a <nrfx_power_irq_handler+0x46>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    7912:	4b23      	ldr	r3, [pc, #140]	; (79a0 <nrfx_power_irq_handler+0xcc>)
    7914:	681b      	ldr	r3, [r3, #0]
    7916:	2000      	movs	r0, #0
    7918:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    791a:	f014 0f40 	tst.w	r4, #64	; 0x40
    791e:	d00b      	beq.n	7938 <nrfx_power_irq_handler+0x64>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7920:	4b20      	ldr	r3, [pc, #128]	; (79a4 <nrfx_power_irq_handler+0xd0>)
    7922:	681b      	ldr	r3, [r3, #0]
    if (ret)
    7924:	b11b      	cbz	r3, 792e <nrfx_power_irq_handler+0x5a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7926:	4a1f      	ldr	r2, [pc, #124]	; (79a4 <nrfx_power_irq_handler+0xd0>)
    7928:	2100      	movs	r1, #0
    792a:	6011      	str	r1, [r2, #0]
    792c:	6812      	ldr	r2, [r2, #0]
    792e:	b11b      	cbz	r3, 7938 <nrfx_power_irq_handler+0x64>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    7930:	4b1b      	ldr	r3, [pc, #108]	; (79a0 <nrfx_power_irq_handler+0xcc>)
    7932:	681b      	ldr	r3, [r3, #0]
    7934:	2001      	movs	r0, #1
    7936:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    7938:	f014 0f80 	tst.w	r4, #128	; 0x80
    793c:	d00b      	beq.n	7956 <nrfx_power_irq_handler+0x82>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    793e:	4b1a      	ldr	r3, [pc, #104]	; (79a8 <nrfx_power_irq_handler+0xd4>)
    7940:	681b      	ldr	r3, [r3, #0]
    if (ret)
    7942:	b11b      	cbz	r3, 794c <nrfx_power_irq_handler+0x78>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7944:	4a18      	ldr	r2, [pc, #96]	; (79a8 <nrfx_power_irq_handler+0xd4>)
    7946:	2100      	movs	r1, #0
    7948:	6011      	str	r1, [r2, #0]
    794a:	6812      	ldr	r2, [r2, #0]
    794c:	b11b      	cbz	r3, 7956 <nrfx_power_irq_handler+0x82>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
    794e:	4b17      	ldr	r3, [pc, #92]	; (79ac <nrfx_power_irq_handler+0xd8>)
    7950:	681b      	ldr	r3, [r3, #0]
    7952:	2000      	movs	r0, #0
    7954:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    7956:	f414 7f80 	tst.w	r4, #256	; 0x100
    795a:	d00b      	beq.n	7974 <nrfx_power_irq_handler+0xa0>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    795c:	4b14      	ldr	r3, [pc, #80]	; (79b0 <nrfx_power_irq_handler+0xdc>)
    795e:	681b      	ldr	r3, [r3, #0]
    if (ret)
    7960:	b11b      	cbz	r3, 796a <nrfx_power_irq_handler+0x96>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7962:	4a13      	ldr	r2, [pc, #76]	; (79b0 <nrfx_power_irq_handler+0xdc>)
    7964:	2100      	movs	r1, #0
    7966:	6011      	str	r1, [r2, #0]
    7968:	6812      	ldr	r2, [r2, #0]
    796a:	b11b      	cbz	r3, 7974 <nrfx_power_irq_handler+0xa0>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
    796c:	4b0f      	ldr	r3, [pc, #60]	; (79ac <nrfx_power_irq_handler+0xd8>)
    796e:	681b      	ldr	r3, [r3, #0]
    7970:	2001      	movs	r0, #1
    7972:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    7974:	f414 7f00 	tst.w	r4, #512	; 0x200
    7978:	d00b      	beq.n	7992 <nrfx_power_irq_handler+0xbe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    797a:	4b0e      	ldr	r3, [pc, #56]	; (79b4 <nrfx_power_irq_handler+0xe0>)
    797c:	681b      	ldr	r3, [r3, #0]
    if (ret)
    797e:	b11b      	cbz	r3, 7988 <nrfx_power_irq_handler+0xb4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7980:	4a0c      	ldr	r2, [pc, #48]	; (79b4 <nrfx_power_irq_handler+0xe0>)
    7982:	2100      	movs	r1, #0
    7984:	6011      	str	r1, [r2, #0]
    7986:	6812      	ldr	r2, [r2, #0]
    7988:	b11b      	cbz	r3, 7992 <nrfx_power_irq_handler+0xbe>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    798a:	4b08      	ldr	r3, [pc, #32]	; (79ac <nrfx_power_irq_handler+0xd8>)
    798c:	681b      	ldr	r3, [r3, #0]
    798e:	2002      	movs	r0, #2
    7990:	4798      	blx	r3
    }
#endif
}
    7992:	bd10      	pop	{r4, pc}
    7994:	40000108 	.word	0x40000108
    7998:	20001de0 	.word	0x20001de0
    799c:	40000114 	.word	0x40000114
    79a0:	20001de4 	.word	0x20001de4
    79a4:	40000118 	.word	0x40000118
    79a8:	4000011c 	.word	0x4000011c
    79ac:	20001de8 	.word	0x20001de8
    79b0:	40000120 	.word	0x40000120
    79b4:	40000124 	.word	0x40000124

000079b8 <is_allocated_channel>:
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
    79b8:	2301      	movs	r3, #1
    79ba:	4083      	lsls	r3, r0
 * @retval true  The channel is allocated.
 * @retval false The channel is not allocated.
 */
static bool is_allocated_channel(nrf_ppi_channel_t channel)
{
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
    79bc:	4a03      	ldr	r2, [pc, #12]	; (79cc <is_allocated_channel+0x14>)
    79be:	6812      	ldr	r2, [r2, #0]
    79c0:	4213      	tst	r3, r2
}
    79c2:	bf14      	ite	ne
    79c4:	2001      	movne	r0, #1
    79c6:	2000      	moveq	r0, #0
    79c8:	4770      	bx	lr
    79ca:	bf00      	nop
    79cc:	20001dec 	.word	0x20001dec

000079d0 <channel_allocated_set>:
    79d0:	2301      	movs	r3, #1
    79d2:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @param[in] channel_num Specifies the channel to set the "allocated" indication.
 */
static void channel_allocated_set(nrf_ppi_channel_t channel)
{
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
    79d6:	4a02      	ldr	r2, [pc, #8]	; (79e0 <channel_allocated_set+0x10>)
    79d8:	6813      	ldr	r3, [r2, #0]
    79da:	4303      	orrs	r3, r0
    79dc:	6013      	str	r3, [r2, #0]
}
    79de:	4770      	bx	lr
    79e0:	20001dec 	.word	0x20001dec

000079e4 <nrfx_ppi_channel_alloc>:
    group_allocated_clr_all();
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    79e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    79e8:	4681      	mov	r9, r0
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;

    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    79ea:	2400      	movs	r4, #0
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
    79ec:	4e15      	ldr	r6, [pc, #84]	; (7a44 <nrfx_ppi_channel_alloc+0x60>)
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    79ee:	f8df 805c 	ldr.w	r8, [pc, #92]	; 7a4c <nrfx_ppi_channel_alloc+0x68>
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    79f2:	e011      	b.n	7a18 <nrfx_ppi_channel_alloc+0x34>
    {
        nrf_ppi_channel_t channel = (nrf_ppi_channel_t)ch_idx;
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
    79f4:	4620      	mov	r0, r4
    79f6:	f7ff ffeb 	bl	79d0 <channel_allocated_set>
            *p_channel = channel;
    79fa:	f889 4000 	strb.w	r4, [r9]
            err_code   = NRFX_SUCCESS;
    79fe:	f8df 8048 	ldr.w	r8, [pc, #72]	; 7a48 <nrfx_ppi_channel_alloc+0x64>
	__asm__ volatile(
    7a02:	f387 8811 	msr	BASEPRI, r7
    7a06:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();
        if (err_code == NRFX_SUCCESS)
    7a0a:	4b0f      	ldr	r3, [pc, #60]	; (7a48 <nrfx_ppi_channel_alloc+0x64>)
    7a0c:	4598      	cmp	r8, r3
    7a0e:	d016      	beq.n	7a3e <nrfx_ppi_channel_alloc+0x5a>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", channel);
            break;
        }
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    7a10:	ea26 0605 	bic.w	r6, r6, r5
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
    7a14:	3401      	adds	r4, #1
    7a16:	b2e4      	uxtb	r4, r4
    7a18:	b18e      	cbz	r6, 7a3e <nrfx_ppi_channel_alloc+0x5a>
	__asm__ volatile(
    7a1a:	f04f 0320 	mov.w	r3, #32
    7a1e:	f3ef 8711 	mrs	r7, BASEPRI
    7a22:	f383 8812 	msr	BASEPRI_MAX, r3
    7a26:	f3bf 8f6f 	isb	sy
    7a2a:	2501      	movs	r5, #1
    7a2c:	40a5      	lsls	r5, r4
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
    7a2e:	4235      	tst	r5, r6
    7a30:	d0e7      	beq.n	7a02 <nrfx_ppi_channel_alloc+0x1e>
    7a32:	4620      	mov	r0, r4
    7a34:	f7ff ffc0 	bl	79b8 <is_allocated_channel>
    7a38:	2800      	cmp	r0, #0
    7a3a:	d1e2      	bne.n	7a02 <nrfx_ppi_channel_alloc+0x1e>
    7a3c:	e7da      	b.n	79f4 <nrfx_ppi_channel_alloc+0x10>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    7a3e:	4640      	mov	r0, r8
    7a40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7a44:	000fffff 	.word	0x000fffff
    7a48:	0bad0000 	.word	0x0bad0000
    7a4c:	0bad0002 	.word	0x0bad0002

00007a50 <nrf52_errata_166>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7a50:	4b03      	ldr	r3, [pc, #12]	; (7a60 <nrf52_errata_166+0x10>)
    7a52:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    7a54:	2b08      	cmp	r3, #8
    7a56:	d001      	beq.n	7a5c <nrf52_errata_166+0xc>
        return false;
    7a58:	2000      	movs	r0, #0
    7a5a:	4770      	bx	lr
                        return true;
    7a5c:	2001      	movs	r0, #1
}
    7a5e:	4770      	bx	lr
    7a60:	10000130 	.word	0x10000130

00007a64 <nrf52_errata_171>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7a64:	4b03      	ldr	r3, [pc, #12]	; (7a74 <nrf52_errata_171+0x10>)
    7a66:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    7a68:	2b08      	cmp	r3, #8
    7a6a:	d001      	beq.n	7a70 <nrf52_errata_171+0xc>
        return false;
    7a6c:	2000      	movs	r0, #0
    7a6e:	4770      	bx	lr
                        return true;
    7a70:	2001      	movs	r0, #1
}
    7a72:	4770      	bx	lr
    7a74:	10000130 	.word	0x10000130

00007a78 <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7a78:	4b08      	ldr	r3, [pc, #32]	; (7a9c <nrf52_errata_187+0x24>)
    7a7a:	681a      	ldr	r2, [r3, #0]
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    7a7c:	3304      	adds	r3, #4
    7a7e:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    7a80:	2a08      	cmp	r2, #8
    7a82:	d001      	beq.n	7a88 <nrf52_errata_187+0x10>
        return false;
    7a84:	2000      	movs	r0, #0
    7a86:	4770      	bx	lr
                switch(var2)
    7a88:	2b00      	cmp	r3, #0
    7a8a:	d804      	bhi.n	7a96 <nrf52_errata_187+0x1e>
    7a8c:	e8df f003 	tbb	[pc, r3]
    7a90:	01          	.byte	0x01
    7a91:	00          	.byte	0x00
            if (var1 == 0x08)
    7a92:	2000      	movs	r0, #0
    7a94:	4770      	bx	lr
                        return true;
    7a96:	2001      	movs	r0, #1
}
    7a98:	4770      	bx	lr
    7a9a:	bf00      	nop
    7a9c:	10000130 	.word	0x10000130

00007aa0 <nrf52_errata_199>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    7aa0:	4b03      	ldr	r3, [pc, #12]	; (7ab0 <nrf52_errata_199+0x10>)
    7aa2:	681b      	ldr	r3, [r3, #0]
            if (var1 == 0x08)
    7aa4:	2b08      	cmp	r3, #8
    7aa6:	d001      	beq.n	7aac <nrf52_errata_199+0xc>
        return false;
    7aa8:	2000      	movs	r0, #0
    7aaa:	4770      	bx	lr
                        return true;
    7aac:	2001      	movs	r0, #1
}
    7aae:	4770      	bx	lr
    7ab0:	10000130 	.word	0x10000130

00007ab4 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
    7ab4:	b500      	push	{lr}
    7ab6:	b083      	sub	sp, #12
    m_bus_suspend = false;
    7ab8:	2300      	movs	r3, #0
    7aba:	4a09      	ldr	r2, [pc, #36]	; (7ae0 <ev_usbreset_handler+0x2c>)
    7abc:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    7abe:	4a09      	ldr	r2, [pc, #36]	; (7ae4 <ev_usbreset_handler+0x30>)
    7ac0:	7013      	strb	r3, [r2, #0]

    const nrfx_usbd_evt_t evt = {
    7ac2:	f8ad 3005 	strh.w	r3, [sp, #5]
    7ac6:	f88d 3007 	strb.w	r3, [sp, #7]
    7aca:	2301      	movs	r3, #1
    7acc:	f88d 3004 	strb.w	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    7ad0:	4b05      	ldr	r3, [pc, #20]	; (7ae8 <ev_usbreset_handler+0x34>)
    7ad2:	681b      	ldr	r3, [r3, #0]
    7ad4:	a801      	add	r0, sp, #4
    7ad6:	4798      	blx	r3
}
    7ad8:	b003      	add	sp, #12
    7ada:	f85d fb04 	ldr.w	pc, [sp], #4
    7ade:	bf00      	nop
    7ae0:	20002552 	.word	0x20002552
    7ae4:	20002555 	.word	0x20002555
    7ae8:	20001ff0 	.word	0x20001ff0

00007aec <ev_sof_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }

static void ev_sof_handler(void)
{
    7aec:	b500      	push	{lr}
    7aee:	b083      	sub	sp, #12
    nrfx_usbd_evt_t evt =  {
    7af0:	2300      	movs	r3, #0
    7af2:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
    7af6:	4b12      	ldr	r3, [pc, #72]	; (7b40 <ev_sof_handler+0x54>)
    7af8:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    7afc:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
    7b00:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    if (size_isoout == 0)
    7b04:	b15b      	cbz	r3, 7b1e <ev_sof_handler+0x32>
    else if ((size_isoout & USBD_SIZE_ISOOUT_ZERO_Msk) ==
    7b06:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    7b0a:	d115      	bne.n	7b38 <ev_sof_handler+0x4c>
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
    };

    /* Process isochronous endpoints */
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    if (nrf_usbd_episoout_size_get(NRF_USBD, NRFX_USBD_EPOUT8) != NRF_USBD_EPISOOUT_NO_DATA)
    7b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
    7b10:	d002      	beq.n	7b18 <ev_sof_handler+0x2c>
    {
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    7b12:	f04f 2101 	mov.w	r1, #16777472	; 0x1000100
    7b16:	e004      	b.n	7b22 <ev_sof_handler+0x36>
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    7b18:	f44f 7180 	mov.w	r1, #256	; 0x100
    7b1c:	e001      	b.n	7b22 <ev_sof_handler+0x36>
    7b1e:	f44f 7180 	mov.w	r1, #256	; 0x100
    }
    m_ep_ready |= iso_ready_mask;
    7b22:	4a08      	ldr	r2, [pc, #32]	; (7b44 <ev_sof_handler+0x58>)
    7b24:	6813      	ldr	r3, [r2, #0]
    7b26:	430b      	orrs	r3, r1
    7b28:	6013      	str	r3, [r2, #0]

    m_event_handler(&evt);
    7b2a:	4b07      	ldr	r3, [pc, #28]	; (7b48 <ev_sof_handler+0x5c>)
    7b2c:	681b      	ldr	r3, [r3, #0]
    7b2e:	a801      	add	r0, sp, #4
    7b30:	4798      	blx	r3
}
    7b32:	b003      	add	sp, #12
    7b34:	f85d fb04 	ldr.w	pc, [sp], #4
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    7b38:	f04f 2101 	mov.w	r1, #16777472	; 0x1000100
    7b3c:	e7f1      	b.n	7b22 <ev_sof_handler+0x36>
    7b3e:	bf00      	nop
    7b40:	40027000 	.word	0x40027000
    7b44:	20001ecc 	.word	0x20001ecc
    7b48:	20001ff0 	.word	0x20001ff0

00007b4c <ev_usbevent_handler>:
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
    7b4c:	b510      	push	{r4, lr}
    7b4e:	b082      	sub	sp, #8
    return p_reg->EVENTCAUSE;
    7b50:	4b23      	ldr	r3, [pc, #140]	; (7be0 <ev_usbevent_handler+0x94>)
    7b52:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
    7b56:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    7b5a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    7b5e:	f414 7f80 	tst.w	r4, #256	; 0x100
    7b62:	d00e      	beq.n	7b82 <ev_usbevent_handler+0x36>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
    7b64:	4b1f      	ldr	r3, [pc, #124]	; (7be4 <ev_usbevent_handler+0x98>)
    7b66:	2201      	movs	r2, #1
    7b68:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    7b6a:	2300      	movs	r3, #0
    7b6c:	f8ad 3005 	strh.w	r3, [sp, #5]
    7b70:	f88d 3007 	strb.w	r3, [sp, #7]
    7b74:	2302      	movs	r3, #2
    7b76:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
    7b7a:	4b1b      	ldr	r3, [pc, #108]	; (7be8 <ev_usbevent_handler+0x9c>)
    7b7c:	681b      	ldr	r3, [r3, #0]
    7b7e:	a801      	add	r0, sp, #4
    7b80:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    7b82:	f414 7f00 	tst.w	r4, #512	; 0x200
    7b86:	d00d      	beq.n	7ba4 <ev_usbevent_handler+0x58>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
    7b88:	2300      	movs	r3, #0
    7b8a:	4a16      	ldr	r2, [pc, #88]	; (7be4 <ev_usbevent_handler+0x98>)
    7b8c:	7013      	strb	r3, [r2, #0]
        const nrfx_usbd_evt_t evt = {
    7b8e:	f8ad 3005 	strh.w	r3, [sp, #5]
    7b92:	f88d 3007 	strb.w	r3, [sp, #7]
    7b96:	2303      	movs	r3, #3
    7b98:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
    7b9c:	4b12      	ldr	r3, [pc, #72]	; (7be8 <ev_usbevent_handler+0x9c>)
    7b9e:	681b      	ldr	r3, [r3, #0]
    7ba0:	a801      	add	r0, sp, #4
    7ba2:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    7ba4:	f414 6f80 	tst.w	r4, #1024	; 0x400
    7ba8:	d017      	beq.n	7bda <ev_usbevent_handler+0x8e>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
    7baa:	4b0e      	ldr	r3, [pc, #56]	; (7be4 <ev_usbevent_handler+0x98>)
    7bac:	781b      	ldrb	r3, [r3, #0]
    7bae:	b1a3      	cbz	r3, 7bda <ev_usbevent_handler+0x8e>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
    7bb0:	2300      	movs	r3, #0
    7bb2:	4a0c      	ldr	r2, [pc, #48]	; (7be4 <ev_usbevent_handler+0x98>)
    7bb4:	7013      	strb	r3, [r2, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    7bb6:	2101      	movs	r1, #1
    7bb8:	4a09      	ldr	r2, [pc, #36]	; (7be0 <ev_usbevent_handler+0x94>)
    7bba:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    7bbe:	3258      	adds	r2, #88	; 0x58
    7bc0:	6011      	str	r1, [r2, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    7bc2:	6812      	ldr	r2, [r2, #0]

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
    7bc4:	f8ad 3005 	strh.w	r3, [sp, #5]
    7bc8:	f88d 3007 	strb.w	r3, [sp, #7]
    7bcc:	2304      	movs	r3, #4
    7bce:	f88d 3004 	strb.w	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
    7bd2:	4b05      	ldr	r3, [pc, #20]	; (7be8 <ev_usbevent_handler+0x9c>)
    7bd4:	681b      	ldr	r3, [r3, #0]
    7bd6:	a801      	add	r0, sp, #4
    7bd8:	4798      	blx	r3
        }
    }
}
    7bda:	b002      	add	sp, #8
    7bdc:	bd10      	pop	{r4, pc}
    7bde:	bf00      	nop
    7be0:	40027000 	.word	0x40027000
    7be4:	20002552 	.word	0x20002552
    7be8:	20001ff0 	.word	0x20001ff0

00007bec <usbd_enable>:

/**
 * @brief Enable USBD peripheral.
 */
static void usbd_enable(void)
{
    7bec:	b510      	push	{r4, lr}
}

/* Errata: USB cannot be enabled. **/
static inline bool nrfx_usbd_errata_187(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    7bee:	f7ff ff43 	bl	7a78 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    7bf2:	b1b8      	cbz	r0, 7c24 <usbd_enable+0x38>
    7bf4:	f04f 0220 	mov.w	r2, #32
    7bf8:	f3ef 8311 	mrs	r3, BASEPRI
    7bfc:	f382 8812 	msr	BASEPRI_MAX, r2
    7c00:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    7c04:	4a41      	ldr	r2, [pc, #260]	; (7d0c <usbd_enable+0x120>)
    7c06:	6812      	ldr	r2, [r2, #0]
    7c08:	2a00      	cmp	r2, #0
    7c0a:	d16f      	bne.n	7cec <usbd_enable+0x100>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    7c0c:	4a3f      	ldr	r2, [pc, #252]	; (7d0c <usbd_enable+0x120>)
    7c0e:	f249 3175 	movw	r1, #37749	; 0x9375
    7c12:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    7c14:	483e      	ldr	r0, [pc, #248]	; (7d10 <usbd_enable+0x124>)
    7c16:	2403      	movs	r4, #3
    7c18:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    7c1a:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    7c1c:	f383 8811 	msr	BASEPRI, r3
    7c20:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_171();
    7c24:	f7ff ff1e 	bl	7a64 <nrf52_errata_171>
    {
        usbd_errata_187_211_begin();
    }

    if (nrfx_usbd_errata_171())
    7c28:	b1b8      	cbz	r0, 7c5a <usbd_enable+0x6e>
	__asm__ volatile(
    7c2a:	f04f 0220 	mov.w	r2, #32
    7c2e:	f3ef 8311 	mrs	r3, BASEPRI
    7c32:	f382 8812 	msr	BASEPRI_MAX, r2
    7c36:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    7c3a:	4a34      	ldr	r2, [pc, #208]	; (7d0c <usbd_enable+0x120>)
    7c3c:	6812      	ldr	r2, [r2, #0]
    7c3e:	2a00      	cmp	r2, #0
    7c40:	d158      	bne.n	7cf4 <usbd_enable+0x108>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    7c42:	4a32      	ldr	r2, [pc, #200]	; (7d0c <usbd_enable+0x120>)
    7c44:	f249 3175 	movw	r1, #37749	; 0x9375
    7c48:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    7c4a:	4832      	ldr	r0, [pc, #200]	; (7d14 <usbd_enable+0x128>)
    7c4c:	24c0      	movs	r4, #192	; 0xc0
    7c4e:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    7c50:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    7c52:	f383 8811 	msr	BASEPRI, r3
    7c56:	f3bf 8f6f 	isb	sy
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    7c5a:	4b2f      	ldr	r3, [pc, #188]	; (7d18 <usbd_enable+0x12c>)
    7c5c:	2201      	movs	r2, #1
    7c5e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    7c62:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
    7c66:	4b2c      	ldr	r3, [pc, #176]	; (7d18 <usbd_enable+0x12c>)
    7c68:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
    7c6c:	f413 6f00 	tst.w	r3, #2048	; 0x800
    7c70:	d0f9      	beq.n	7c66 <usbd_enable+0x7a>
    p_reg->EVENTCAUSE = flags;
    7c72:	4b29      	ldr	r3, [pc, #164]	; (7d18 <usbd_enable+0x12c>)
    7c74:	f44f 6200 	mov.w	r2, #2048	; 0x800
    7c78:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    7c7c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    7c80:	f7ff fef0 	bl	7a64 <nrf52_errata_171>
    nrf_usbd_enable(NRF_USBD);

    /* Waiting for peripheral to enable, this should take a few us */
    usbd_eventcause_wait_and_clear(NRF_USBD_EVENTCAUSE_READY_MASK);

    if (nrfx_usbd_errata_171())
    7c84:	b1b8      	cbz	r0, 7cb6 <usbd_enable+0xca>
	__asm__ volatile(
    7c86:	f04f 0220 	mov.w	r2, #32
    7c8a:	f3ef 8311 	mrs	r3, BASEPRI
    7c8e:	f382 8812 	msr	BASEPRI_MAX, r2
    7c92:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    7c96:	4a1d      	ldr	r2, [pc, #116]	; (7d0c <usbd_enable+0x120>)
    7c98:	6812      	ldr	r2, [r2, #0]
    7c9a:	2a00      	cmp	r2, #0
    7c9c:	d12e      	bne.n	7cfc <usbd_enable+0x110>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    7c9e:	4a1b      	ldr	r2, [pc, #108]	; (7d0c <usbd_enable+0x120>)
    7ca0:	f249 3175 	movw	r1, #37749	; 0x9375
    7ca4:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    7ca6:	481b      	ldr	r0, [pc, #108]	; (7d14 <usbd_enable+0x128>)
    7ca8:	2400      	movs	r4, #0
    7caa:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    7cac:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    7cae:	f383 8811 	msr	BASEPRI, r3
    7cb2:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    7cb6:	f7ff fedf 	bl	7a78 <nrf52_errata_187>
    {
        usbd_errata_171_end();
    }

    if (nrfx_usbd_errata_187())
    7cba:	b1b0      	cbz	r0, 7cea <usbd_enable+0xfe>
	__asm__ volatile(
    7cbc:	f04f 0220 	mov.w	r2, #32
    7cc0:	f3ef 8311 	mrs	r3, BASEPRI
    7cc4:	f382 8812 	msr	BASEPRI_MAX, r2
    7cc8:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    7ccc:	4a0f      	ldr	r2, [pc, #60]	; (7d0c <usbd_enable+0x120>)
    7cce:	6812      	ldr	r2, [r2, #0]
    7cd0:	b9c2      	cbnz	r2, 7d04 <usbd_enable+0x118>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    7cd2:	4a0e      	ldr	r2, [pc, #56]	; (7d0c <usbd_enable+0x120>)
    7cd4:	f249 3175 	movw	r1, #37749	; 0x9375
    7cd8:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    7cda:	480d      	ldr	r0, [pc, #52]	; (7d10 <usbd_enable+0x124>)
    7cdc:	2400      	movs	r4, #0
    7cde:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    7ce0:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    7ce2:	f383 8811 	msr	BASEPRI, r3
    7ce6:	f3bf 8f6f 	isb	sy
    {
        usbd_errata_187_211_end();
    }
}
    7cea:	bd10      	pop	{r4, pc}
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    7cec:	4a08      	ldr	r2, [pc, #32]	; (7d10 <usbd_enable+0x124>)
    7cee:	2103      	movs	r1, #3
    7cf0:	6011      	str	r1, [r2, #0]
    7cf2:	e793      	b.n	7c1c <usbd_enable+0x30>
        *((volatile uint32_t *)(0x4006EC14)) = 0x000000C0;
    7cf4:	4a07      	ldr	r2, [pc, #28]	; (7d14 <usbd_enable+0x128>)
    7cf6:	21c0      	movs	r1, #192	; 0xc0
    7cf8:	6011      	str	r1, [r2, #0]
    7cfa:	e7aa      	b.n	7c52 <usbd_enable+0x66>
        *((volatile uint32_t *)(0x4006EC14)) = 0x00000000;
    7cfc:	4a05      	ldr	r2, [pc, #20]	; (7d14 <usbd_enable+0x128>)
    7cfe:	2100      	movs	r1, #0
    7d00:	6011      	str	r1, [r2, #0]
    7d02:	e7d4      	b.n	7cae <usbd_enable+0xc2>
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    7d04:	4a02      	ldr	r2, [pc, #8]	; (7d10 <usbd_enable+0x124>)
    7d06:	2100      	movs	r1, #0
    7d08:	6011      	str	r1, [r2, #0]
    7d0a:	e7ea      	b.n	7ce2 <usbd_enable+0xf6>
    7d0c:	4006ec00 	.word	0x4006ec00
    7d10:	4006ed14 	.word	0x4006ed14
    7d14:	4006ec14 	.word	0x4006ec14
    7d18:	40027000 	.word	0x40027000

00007d1c <usbd_ep_data_handler>:
{
    7d1c:	b530      	push	{r4, r5, lr}
    7d1e:	b083      	sub	sp, #12
    7d20:	4604      	mov	r4, r0
    7d22:	460d      	mov	r5, r1
    m_ep_ready |= (1U << bitpos);
    7d24:	2301      	movs	r3, #1
    7d26:	fa03 f201 	lsl.w	r2, r3, r1
    7d2a:	495c      	ldr	r1, [pc, #368]	; (7e9c <usbd_ep_data_handler+0x180>)
    7d2c:	680b      	ldr	r3, [r1, #0]
    7d2e:	4313      	orrs	r3, r2
    7d30:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    7d32:	f010 0f80 	tst.w	r0, #128	; 0x80
    7d36:	d114      	bne.n	7d62 <usbd_ep_data_handler+0x46>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    7d38:	4b59      	ldr	r3, [pc, #356]	; (7ea0 <usbd_ep_data_handler+0x184>)
    7d3a:	6819      	ldr	r1, [r3, #0]
    7d3c:	fa21 f505 	lsr.w	r5, r1, r5
    7d40:	f015 0f01 	tst.w	r5, #1
    7d44:	d10b      	bne.n	7d5e <usbd_ep_data_handler+0x42>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    7d46:	2306      	movs	r3, #6
    7d48:	f88d 3004 	strb.w	r3, [sp, #4]
    7d4c:	f88d 0006 	strb.w	r0, [sp, #6]
    7d50:	2301      	movs	r3, #1
    7d52:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    7d56:	4b53      	ldr	r3, [pc, #332]	; (7ea4 <usbd_ep_data_handler+0x188>)
    7d58:	681b      	ldr	r3, [r3, #0]
    7d5a:	a801      	add	r0, sp, #4
    7d5c:	4798      	blx	r3
}
    7d5e:	b003      	add	sp, #12
    7d60:	bd30      	pop	{r4, r5, pc}
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    7d62:	f000 030f 	and.w	r3, r0, #15
    7d66:	4a50      	ldr	r2, [pc, #320]	; (7ea8 <usbd_ep_data_handler+0x18c>)
    7d68:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    7d6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7d70:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    7d74:	681a      	ldr	r2, [r3, #0]
    if (ret)
    7d76:	b112      	cbz	r2, 7d7e <usbd_ep_data_handler+0x62>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    7d78:	2100      	movs	r1, #0
    7d7a:	6019      	str	r1, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    7d7c:	681b      	ldr	r3, [r3, #0]
        if (nrf_usbd_event_get_and_clear(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)))
    7d7e:	2a00      	cmp	r2, #0
    7d80:	d047      	beq.n	7e12 <usbd_ep_data_handler+0xf6>
            if (ep != NRFX_USBD_EPIN0)
    7d82:	2c80      	cmp	r4, #128	; 0x80
    7d84:	d05b      	beq.n	7e3e <usbd_ep_data_handler+0x122>
}

/* Errata: USBD cannot receive tasks during DMA. **/
static inline bool nrfx_usbd_errata_199(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
    7d86:	f7ff fe8b 	bl	7aa0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    7d8a:	b110      	cbz	r0, 7d92 <usbd_ep_data_handler+0x76>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    7d8c:	4b47      	ldr	r3, [pc, #284]	; (7eac <usbd_ep_data_handler+0x190>)
    7d8e:	2200      	movs	r2, #0
    7d90:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    7d92:	4b47      	ldr	r3, [pc, #284]	; (7eb0 <usbd_ep_data_handler+0x194>)
    7d94:	2200      	movs	r2, #0
    7d96:	701a      	strb	r2, [r3, #0]
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    7d98:	b263      	sxtb	r3, r4
    7d9a:	4293      	cmp	r3, r2
    7d9c:	db21      	blt.n	7de2 <usbd_ep_data_handler+0xc6>
    7d9e:	4945      	ldr	r1, [pc, #276]	; (7eb4 <usbd_ep_data_handler+0x198>)
        NRF_USBD_EP_NR_GET(ep));
    7da0:	f004 020f 	and.w	r2, r4, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    7da4:	0110      	lsls	r0, r2, #4
    7da6:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    7daa:	7b92      	ldrb	r2, [r2, #14]
    7dac:	2a03      	cmp	r2, #3
    7dae:	d01a      	beq.n	7de6 <usbd_ep_data_handler+0xca>
    else if (p_state->handler.feeder == NULL)
    7db0:	580a      	ldr	r2, [r1, r0]
    7db2:	bb72      	cbnz	r2, 7e12 <usbd_ep_data_handler+0xf6>
    return NRFX_USBD_EP_BITPOS(ep);
    7db4:	2b00      	cmp	r3, #0
    7db6:	db00      	blt.n	7dba <usbd_ep_data_handler+0x9e>
    7db8:	2210      	movs	r2, #16
    7dba:	f003 030f 	and.w	r3, r3, #15
    7dbe:	4413      	add	r3, r2
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7dc0:	2201      	movs	r2, #1
    7dc2:	fa02 f303 	lsl.w	r3, r2, r3
    7dc6:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7dc8:	4a35      	ldr	r2, [pc, #212]	; (7ea0 <usbd_ep_data_handler+0x184>)
    7dca:	f3bf 8f5b 	dmb	ish
    7dce:	e852 1f00 	ldrex	r1, [r2]
    7dd2:	4019      	ands	r1, r3
    7dd4:	e842 1000 	strex	r0, r1, [r2]
    7dd8:	2800      	cmp	r0, #0
    7dda:	d1f8      	bne.n	7dce <usbd_ep_data_handler+0xb2>
    7ddc:	f3bf 8f5b 	dmb	ish
}
    7de0:	e017      	b.n	7e12 <usbd_ep_data_handler+0xf6>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    7de2:	4935      	ldr	r1, [pc, #212]	; (7eb8 <usbd_ep_data_handler+0x19c>)
    7de4:	e7dc      	b.n	7da0 <usbd_ep_data_handler+0x84>
    return NRFX_USBD_EP_BITPOS(ep);
    7de6:	2b00      	cmp	r3, #0
    7de8:	db27      	blt.n	7e3a <usbd_ep_data_handler+0x11e>
    7dea:	2210      	movs	r2, #16
    7dec:	f003 030f 	and.w	r3, r3, #15
    7df0:	4413      	add	r3, r2
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7df2:	2201      	movs	r2, #1
    7df4:	fa02 f303 	lsl.w	r3, r2, r3
    7df8:	43db      	mvns	r3, r3
    7dfa:	4a29      	ldr	r2, [pc, #164]	; (7ea0 <usbd_ep_data_handler+0x184>)
    7dfc:	f3bf 8f5b 	dmb	ish
    7e00:	e852 1f00 	ldrex	r1, [r2]
    7e04:	4019      	ands	r1, r3
    7e06:	e842 1000 	strex	r0, r1, [r2]
    7e0a:	2800      	cmp	r0, #0
    7e0c:	d1f8      	bne.n	7e00 <usbd_ep_data_handler+0xe4>
    7e0e:	f3bf 8f5b 	dmb	ish
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    7e12:	4b23      	ldr	r3, [pc, #140]	; (7ea0 <usbd_ep_data_handler+0x184>)
    7e14:	6819      	ldr	r1, [r3, #0]
    7e16:	fa21 f505 	lsr.w	r5, r1, r5
    7e1a:	f015 0f01 	tst.w	r5, #1
    7e1e:	d19e      	bne.n	7d5e <usbd_ep_data_handler+0x42>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    7e20:	2306      	movs	r3, #6
    7e22:	f88d 3004 	strb.w	r3, [sp, #4]
    7e26:	f88d 4006 	strb.w	r4, [sp, #6]
    7e2a:	2300      	movs	r3, #0
    7e2c:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    7e30:	4b1c      	ldr	r3, [pc, #112]	; (7ea4 <usbd_ep_data_handler+0x188>)
    7e32:	681b      	ldr	r3, [r3, #0]
    7e34:	a801      	add	r0, sp, #4
    7e36:	4798      	blx	r3
    7e38:	e791      	b.n	7d5e <usbd_ep_data_handler+0x42>
    return NRFX_USBD_EP_BITPOS(ep);
    7e3a:	2200      	movs	r2, #0
    7e3c:	e7d6      	b.n	7dec <usbd_ep_data_handler+0xd0>
    7e3e:	f7ff fe2f 	bl	7aa0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    7e42:	b110      	cbz	r0, 7e4a <usbd_ep_data_handler+0x12e>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    7e44:	4b19      	ldr	r3, [pc, #100]	; (7eac <usbd_ep_data_handler+0x190>)
    7e46:	2200      	movs	r2, #0
    7e48:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    7e4a:	4b19      	ldr	r3, [pc, #100]	; (7eb0 <usbd_ep_data_handler+0x194>)
    7e4c:	2200      	movs	r2, #0
    7e4e:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    7e50:	4b18      	ldr	r3, [pc, #96]	; (7eb4 <usbd_ep_data_handler+0x198>)
    7e52:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
    7e56:	2b03      	cmp	r3, #3
    7e58:	d012      	beq.n	7e80 <usbd_ep_data_handler+0x164>
    else if (p_state->handler.feeder == NULL)
    7e5a:	4b16      	ldr	r3, [pc, #88]	; (7eb4 <usbd_ep_data_handler+0x198>)
    7e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7e60:	2b00      	cmp	r3, #0
    7e62:	d1d6      	bne.n	7e12 <usbd_ep_data_handler+0xf6>
    7e64:	4b0e      	ldr	r3, [pc, #56]	; (7ea0 <usbd_ep_data_handler+0x184>)
    7e66:	f3bf 8f5b 	dmb	ish
    7e6a:	e853 2f00 	ldrex	r2, [r3]
    7e6e:	f022 0201 	bic.w	r2, r2, #1
    7e72:	e843 2100 	strex	r1, r2, [r3]
    7e76:	2900      	cmp	r1, #0
    7e78:	d1f7      	bne.n	7e6a <usbd_ep_data_handler+0x14e>
    7e7a:	f3bf 8f5b 	dmb	ish
}
    7e7e:	e7c8      	b.n	7e12 <usbd_ep_data_handler+0xf6>
    7e80:	4b07      	ldr	r3, [pc, #28]	; (7ea0 <usbd_ep_data_handler+0x184>)
    7e82:	f3bf 8f5b 	dmb	ish
    7e86:	e853 2f00 	ldrex	r2, [r3]
    7e8a:	f022 0201 	bic.w	r2, r2, #1
    7e8e:	e843 2100 	strex	r1, r2, [r3]
    7e92:	2900      	cmp	r1, #0
    7e94:	d1f7      	bne.n	7e86 <usbd_ep_data_handler+0x16a>
    7e96:	f3bf 8f5b 	dmb	ish
    7e9a:	e7ba      	b.n	7e12 <usbd_ep_data_handler+0xf6>
    7e9c:	20001ecc 	.word	0x20001ecc
    7ea0:	20001e5c 	.word	0x20001e5c
    7ea4:	20001ff0 	.word	0x20001ff0
    7ea8:	0000f87c 	.word	0x0000f87c
    7eac:	40027c1c 	.word	0x40027c1c
    7eb0:	20002553 	.word	0x20002553
    7eb4:	20001ed0 	.word	0x20001ed0
    7eb8:	20001f60 	.word	0x20001f60

00007ebc <ev_setup_data_handler>:
{
    7ebc:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    7ebe:	4b07      	ldr	r3, [pc, #28]	; (7edc <ev_setup_data_handler+0x20>)
    7ec0:	7818      	ldrb	r0, [r3, #0]
    return NRFX_USBD_EP_BITPOS(ep);
    7ec2:	f993 3000 	ldrsb.w	r3, [r3]
    7ec6:	2b00      	cmp	r3, #0
    7ec8:	db06      	blt.n	7ed8 <ev_setup_data_handler+0x1c>
    7eca:	2110      	movs	r1, #16
    7ecc:	f003 030f 	and.w	r3, r3, #15
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    7ed0:	4419      	add	r1, r3
    7ed2:	f7ff ff23 	bl	7d1c <usbd_ep_data_handler>
}
    7ed6:	bd08      	pop	{r3, pc}
    return NRFX_USBD_EP_BITPOS(ep);
    7ed8:	2100      	movs	r1, #0
    7eda:	e7f7      	b.n	7ecc <ev_setup_data_handler+0x10>
    7edc:	20002555 	.word	0x20002555

00007ee0 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    7ee0:	b500      	push	{lr}
    7ee2:	b083      	sub	sp, #12
    7ee4:	f7ff fddc 	bl	7aa0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    7ee8:	b110      	cbz	r0, 7ef0 <ev_dma_epout8_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    7eea:	4b16      	ldr	r3, [pc, #88]	; (7f44 <ev_dma_epout8_handler+0x64>)
    7eec:	2200      	movs	r2, #0
    7eee:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    7ef0:	4b15      	ldr	r3, [pc, #84]	; (7f48 <ev_dma_epout8_handler+0x68>)
    7ef2:	2200      	movs	r2, #0
    7ef4:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    7ef6:	4b15      	ldr	r3, [pc, #84]	; (7f4c <ev_dma_epout8_handler+0x6c>)
    7ef8:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
    7efc:	2b03      	cmp	r3, #3
    7efe:	d01d      	beq.n	7f3c <ev_dma_epout8_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
    7f00:	4b12      	ldr	r3, [pc, #72]	; (7f4c <ev_dma_epout8_handler+0x6c>)
    7f02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    7f06:	b9cb      	cbnz	r3, 7f3c <ev_dma_epout8_handler+0x5c>
    7f08:	4b11      	ldr	r3, [pc, #68]	; (7f50 <ev_dma_epout8_handler+0x70>)
    7f0a:	f3bf 8f5b 	dmb	ish
    7f0e:	e853 2f00 	ldrex	r2, [r3]
    7f12:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
    7f16:	e843 2100 	strex	r1, r2, [r3]
    7f1a:	2900      	cmp	r1, #0
    7f1c:	d1f7      	bne.n	7f0e <ev_dma_epout8_handler+0x2e>
    7f1e:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    7f22:	2306      	movs	r3, #6
    7f24:	f88d 3004 	strb.w	r3, [sp, #4]
    7f28:	2308      	movs	r3, #8
    7f2a:	f88d 3006 	strb.w	r3, [sp, #6]
    7f2e:	2300      	movs	r3, #0
    7f30:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    7f34:	4b07      	ldr	r3, [pc, #28]	; (7f54 <ev_dma_epout8_handler+0x74>)
    7f36:	681b      	ldr	r3, [r3, #0]
    7f38:	a801      	add	r0, sp, #4
    7f3a:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    7f3c:	b003      	add	sp, #12
    7f3e:	f85d fb04 	ldr.w	pc, [sp], #4
    7f42:	bf00      	nop
    7f44:	40027c1c 	.word	0x40027c1c
    7f48:	20002553 	.word	0x20002553
    7f4c:	20001ed0 	.word	0x20001ed0
    7f50:	20001e5c 	.word	0x20001e5c
    7f54:	20001ff0 	.word	0x20001ff0

00007f58 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    7f58:	b500      	push	{lr}
    7f5a:	b083      	sub	sp, #12
    7f5c:	f7ff fda0 	bl	7aa0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    7f60:	b110      	cbz	r0, 7f68 <ev_dma_epin8_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    7f62:	4b1d      	ldr	r3, [pc, #116]	; (7fd8 <ev_dma_epin8_handler+0x80>)
    7f64:	2200      	movs	r2, #0
    7f66:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    7f68:	4b1c      	ldr	r3, [pc, #112]	; (7fdc <ev_dma_epin8_handler+0x84>)
    7f6a:	2200      	movs	r2, #0
    7f6c:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    7f6e:	4b1c      	ldr	r3, [pc, #112]	; (7fe0 <ev_dma_epin8_handler+0x88>)
    7f70:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
    7f74:	2b03      	cmp	r3, #3
    7f76:	d01e      	beq.n	7fb6 <ev_dma_epin8_handler+0x5e>
    else if (p_state->handler.feeder == NULL)
    7f78:	4b19      	ldr	r3, [pc, #100]	; (7fe0 <ev_dma_epin8_handler+0x88>)
    7f7a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    7f7e:	bb3b      	cbnz	r3, 7fd0 <ev_dma_epin8_handler+0x78>
    7f80:	4b18      	ldr	r3, [pc, #96]	; (7fe4 <ev_dma_epin8_handler+0x8c>)
    7f82:	f3bf 8f5b 	dmb	ish
    7f86:	e853 2f00 	ldrex	r2, [r3]
    7f8a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    7f8e:	e843 2100 	strex	r1, r2, [r3]
    7f92:	2900      	cmp	r1, #0
    7f94:	d1f7      	bne.n	7f86 <ev_dma_epin8_handler+0x2e>
    7f96:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    7f9a:	2306      	movs	r3, #6
    7f9c:	f88d 3004 	strb.w	r3, [sp, #4]
    7fa0:	2388      	movs	r3, #136	; 0x88
    7fa2:	f88d 3006 	strb.w	r3, [sp, #6]
    7fa6:	2300      	movs	r3, #0
    7fa8:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    7fac:	4b0e      	ldr	r3, [pc, #56]	; (7fe8 <ev_dma_epin8_handler+0x90>)
    7fae:	681b      	ldr	r3, [r3, #0]
    7fb0:	a801      	add	r0, sp, #4
    7fb2:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    7fb4:	e00c      	b.n	7fd0 <ev_dma_epin8_handler+0x78>
    7fb6:	4b0b      	ldr	r3, [pc, #44]	; (7fe4 <ev_dma_epin8_handler+0x8c>)
    7fb8:	f3bf 8f5b 	dmb	ish
    7fbc:	e853 2f00 	ldrex	r2, [r3]
    7fc0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
    7fc4:	e843 2100 	strex	r1, r2, [r3]
    7fc8:	2900      	cmp	r1, #0
    7fca:	d1f7      	bne.n	7fbc <ev_dma_epin8_handler+0x64>
    7fcc:	f3bf 8f5b 	dmb	ish
    7fd0:	b003      	add	sp, #12
    7fd2:	f85d fb04 	ldr.w	pc, [sp], #4
    7fd6:	bf00      	nop
    7fd8:	40027c1c 	.word	0x40027c1c
    7fdc:	20002553 	.word	0x20002553
    7fe0:	20001ed0 	.word	0x20001ed0
    7fe4:	20001e5c 	.word	0x20001e5c
    7fe8:	20001ff0 	.word	0x20001ff0

00007fec <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    7fec:	b508      	push	{r3, lr}
    7fee:	f7ff fd57 	bl	7aa0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    7ff2:	b110      	cbz	r0, 7ffa <ev_dma_epin0_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    7ff4:	4b15      	ldr	r3, [pc, #84]	; (804c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c>)
    7ff6:	2200      	movs	r2, #0
    7ff8:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    7ffa:	4b15      	ldr	r3, [pc, #84]	; (8050 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50>)
    7ffc:	2200      	movs	r2, #0
    7ffe:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8000:	4b14      	ldr	r3, [pc, #80]	; (8054 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54>)
    8002:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
    8006:	2b03      	cmp	r3, #3
    8008:	d004      	beq.n	8014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>
    else if (p_state->handler.feeder == NULL)
    800a:	4b12      	ldr	r3, [pc, #72]	; (8054 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54>)
    800c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    8010:	b173      	cbz	r3, 8030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    8012:	bd08      	pop	{r3, pc}
    8014:	4b10      	ldr	r3, [pc, #64]	; (8058 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58>)
    8016:	f3bf 8f5b 	dmb	ish
    801a:	e853 2f00 	ldrex	r2, [r3]
    801e:	f022 0201 	bic.w	r2, r2, #1
    8022:	e843 2100 	strex	r1, r2, [r3]
    8026:	2900      	cmp	r1, #0
    8028:	d1f7      	bne.n	801a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1a>
    802a:	f3bf 8f5b 	dmb	ish
    802e:	e7f0      	b.n	8012 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12>
    8030:	4b09      	ldr	r3, [pc, #36]	; (8058 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58>)
    8032:	f3bf 8f5b 	dmb	ish
    8036:	e853 2f00 	ldrex	r2, [r3]
    803a:	f022 0201 	bic.w	r2, r2, #1
    803e:	e843 2100 	strex	r1, r2, [r3]
    8042:	2900      	cmp	r1, #0
    8044:	d1f7      	bne.n	8036 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x36>
    8046:	f3bf 8f5b 	dmb	ish
    804a:	e7e2      	b.n	8012 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12>
    804c:	40027c1c 	.word	0x40027c1c
    8050:	20002553 	.word	0x20002553
    8054:	20001ed0 	.word	0x20001ed0
    8058:	20001e5c 	.word	0x20001e5c

0000805c <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    805c:	b508      	push	{r3, lr}
    805e:	f7ff fd1f 	bl	7aa0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    8062:	b110      	cbz	r0, 806a <ev_dma_epin7_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    8064:	4b15      	ldr	r3, [pc, #84]	; (80bc <ev_dma_epin7_handler+0x60>)
    8066:	2200      	movs	r2, #0
    8068:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    806a:	4b15      	ldr	r3, [pc, #84]	; (80c0 <ev_dma_epin7_handler+0x64>)
    806c:	2200      	movs	r2, #0
    806e:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8070:	4b14      	ldr	r3, [pc, #80]	; (80c4 <ev_dma_epin7_handler+0x68>)
    8072:	f893 310e 	ldrb.w	r3, [r3, #270]	; 0x10e
    8076:	2b03      	cmp	r3, #3
    8078:	d011      	beq.n	809e <ev_dma_epin7_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    807a:	4b12      	ldr	r3, [pc, #72]	; (80c4 <ev_dma_epin7_handler+0x68>)
    807c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    8080:	b9d3      	cbnz	r3, 80b8 <ev_dma_epin7_handler+0x5c>
    8082:	4b11      	ldr	r3, [pc, #68]	; (80c8 <ev_dma_epin7_handler+0x6c>)
    8084:	f3bf 8f5b 	dmb	ish
    8088:	e853 2f00 	ldrex	r2, [r3]
    808c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    8090:	e843 2100 	strex	r1, r2, [r3]
    8094:	2900      	cmp	r1, #0
    8096:	d1f7      	bne.n	8088 <ev_dma_epin7_handler+0x2c>
    8098:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    809c:	e00c      	b.n	80b8 <ev_dma_epin7_handler+0x5c>
    809e:	4b0a      	ldr	r3, [pc, #40]	; (80c8 <ev_dma_epin7_handler+0x6c>)
    80a0:	f3bf 8f5b 	dmb	ish
    80a4:	e853 2f00 	ldrex	r2, [r3]
    80a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    80ac:	e843 2100 	strex	r1, r2, [r3]
    80b0:	2900      	cmp	r1, #0
    80b2:	d1f7      	bne.n	80a4 <ev_dma_epin7_handler+0x48>
    80b4:	f3bf 8f5b 	dmb	ish
    80b8:	bd08      	pop	{r3, pc}
    80ba:	bf00      	nop
    80bc:	40027c1c 	.word	0x40027c1c
    80c0:	20002553 	.word	0x20002553
    80c4:	20001ed0 	.word	0x20001ed0
    80c8:	20001e5c 	.word	0x20001e5c

000080cc <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    80cc:	b508      	push	{r3, lr}
    80ce:	f7ff fce7 	bl	7aa0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    80d2:	b110      	cbz	r0, 80da <ev_dma_epin5_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    80d4:	4b15      	ldr	r3, [pc, #84]	; (812c <ev_dma_epin5_handler+0x60>)
    80d6:	2200      	movs	r2, #0
    80d8:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    80da:	4b15      	ldr	r3, [pc, #84]	; (8130 <ev_dma_epin5_handler+0x64>)
    80dc:	2200      	movs	r2, #0
    80de:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    80e0:	4b14      	ldr	r3, [pc, #80]	; (8134 <ev_dma_epin5_handler+0x68>)
    80e2:	f893 30ee 	ldrb.w	r3, [r3, #238]	; 0xee
    80e6:	2b03      	cmp	r3, #3
    80e8:	d011      	beq.n	810e <ev_dma_epin5_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    80ea:	4b12      	ldr	r3, [pc, #72]	; (8134 <ev_dma_epin5_handler+0x68>)
    80ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    80f0:	b9d3      	cbnz	r3, 8128 <ev_dma_epin5_handler+0x5c>
    80f2:	4b11      	ldr	r3, [pc, #68]	; (8138 <ev_dma_epin5_handler+0x6c>)
    80f4:	f3bf 8f5b 	dmb	ish
    80f8:	e853 2f00 	ldrex	r2, [r3]
    80fc:	f022 0220 	bic.w	r2, r2, #32
    8100:	e843 2100 	strex	r1, r2, [r3]
    8104:	2900      	cmp	r1, #0
    8106:	d1f7      	bne.n	80f8 <ev_dma_epin5_handler+0x2c>
    8108:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    810c:	e00c      	b.n	8128 <ev_dma_epin5_handler+0x5c>
    810e:	4b0a      	ldr	r3, [pc, #40]	; (8138 <ev_dma_epin5_handler+0x6c>)
    8110:	f3bf 8f5b 	dmb	ish
    8114:	e853 2f00 	ldrex	r2, [r3]
    8118:	f022 0220 	bic.w	r2, r2, #32
    811c:	e843 2100 	strex	r1, r2, [r3]
    8120:	2900      	cmp	r1, #0
    8122:	d1f7      	bne.n	8114 <ev_dma_epin5_handler+0x48>
    8124:	f3bf 8f5b 	dmb	ish
    8128:	bd08      	pop	{r3, pc}
    812a:	bf00      	nop
    812c:	40027c1c 	.word	0x40027c1c
    8130:	20002553 	.word	0x20002553
    8134:	20001ed0 	.word	0x20001ed0
    8138:	20001e5c 	.word	0x20001e5c

0000813c <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    813c:	b508      	push	{r3, lr}
    813e:	f7ff fcaf 	bl	7aa0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    8142:	b110      	cbz	r0, 814a <ev_dma_epin6_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    8144:	4b15      	ldr	r3, [pc, #84]	; (819c <ev_dma_epin6_handler+0x60>)
    8146:	2200      	movs	r2, #0
    8148:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    814a:	4b15      	ldr	r3, [pc, #84]	; (81a0 <ev_dma_epin6_handler+0x64>)
    814c:	2200      	movs	r2, #0
    814e:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8150:	4b14      	ldr	r3, [pc, #80]	; (81a4 <ev_dma_epin6_handler+0x68>)
    8152:	f893 30fe 	ldrb.w	r3, [r3, #254]	; 0xfe
    8156:	2b03      	cmp	r3, #3
    8158:	d011      	beq.n	817e <ev_dma_epin6_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    815a:	4b12      	ldr	r3, [pc, #72]	; (81a4 <ev_dma_epin6_handler+0x68>)
    815c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
    8160:	b9d3      	cbnz	r3, 8198 <ev_dma_epin6_handler+0x5c>
    8162:	4b11      	ldr	r3, [pc, #68]	; (81a8 <ev_dma_epin6_handler+0x6c>)
    8164:	f3bf 8f5b 	dmb	ish
    8168:	e853 2f00 	ldrex	r2, [r3]
    816c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    8170:	e843 2100 	strex	r1, r2, [r3]
    8174:	2900      	cmp	r1, #0
    8176:	d1f7      	bne.n	8168 <ev_dma_epin6_handler+0x2c>
    8178:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    817c:	e00c      	b.n	8198 <ev_dma_epin6_handler+0x5c>
    817e:	4b0a      	ldr	r3, [pc, #40]	; (81a8 <ev_dma_epin6_handler+0x6c>)
    8180:	f3bf 8f5b 	dmb	ish
    8184:	e853 2f00 	ldrex	r2, [r3]
    8188:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    818c:	e843 2100 	strex	r1, r2, [r3]
    8190:	2900      	cmp	r1, #0
    8192:	d1f7      	bne.n	8184 <ev_dma_epin6_handler+0x48>
    8194:	f3bf 8f5b 	dmb	ish
    8198:	bd08      	pop	{r3, pc}
    819a:	bf00      	nop
    819c:	40027c1c 	.word	0x40027c1c
    81a0:	20002553 	.word	0x20002553
    81a4:	20001ed0 	.word	0x20001ed0
    81a8:	20001e5c 	.word	0x20001e5c

000081ac <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    81ac:	b508      	push	{r3, lr}
    81ae:	f7ff fc77 	bl	7aa0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    81b2:	b110      	cbz	r0, 81ba <ev_dma_epin1_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    81b4:	4b15      	ldr	r3, [pc, #84]	; (820c <ev_dma_epin1_handler+0x60>)
    81b6:	2200      	movs	r2, #0
    81b8:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    81ba:	4b15      	ldr	r3, [pc, #84]	; (8210 <ev_dma_epin1_handler+0x64>)
    81bc:	2200      	movs	r2, #0
    81be:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    81c0:	4b14      	ldr	r3, [pc, #80]	; (8214 <ev_dma_epin1_handler+0x68>)
    81c2:	f893 30ae 	ldrb.w	r3, [r3, #174]	; 0xae
    81c6:	2b03      	cmp	r3, #3
    81c8:	d011      	beq.n	81ee <ev_dma_epin1_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    81ca:	4b12      	ldr	r3, [pc, #72]	; (8214 <ev_dma_epin1_handler+0x68>)
    81cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
    81d0:	b9d3      	cbnz	r3, 8208 <ev_dma_epin1_handler+0x5c>
    81d2:	4b11      	ldr	r3, [pc, #68]	; (8218 <ev_dma_epin1_handler+0x6c>)
    81d4:	f3bf 8f5b 	dmb	ish
    81d8:	e853 2f00 	ldrex	r2, [r3]
    81dc:	f022 0202 	bic.w	r2, r2, #2
    81e0:	e843 2100 	strex	r1, r2, [r3]
    81e4:	2900      	cmp	r1, #0
    81e6:	d1f7      	bne.n	81d8 <ev_dma_epin1_handler+0x2c>
    81e8:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    81ec:	e00c      	b.n	8208 <ev_dma_epin1_handler+0x5c>
    81ee:	4b0a      	ldr	r3, [pc, #40]	; (8218 <ev_dma_epin1_handler+0x6c>)
    81f0:	f3bf 8f5b 	dmb	ish
    81f4:	e853 2f00 	ldrex	r2, [r3]
    81f8:	f022 0202 	bic.w	r2, r2, #2
    81fc:	e843 2100 	strex	r1, r2, [r3]
    8200:	2900      	cmp	r1, #0
    8202:	d1f7      	bne.n	81f4 <ev_dma_epin1_handler+0x48>
    8204:	f3bf 8f5b 	dmb	ish
    8208:	bd08      	pop	{r3, pc}
    820a:	bf00      	nop
    820c:	40027c1c 	.word	0x40027c1c
    8210:	20002553 	.word	0x20002553
    8214:	20001ed0 	.word	0x20001ed0
    8218:	20001e5c 	.word	0x20001e5c

0000821c <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    821c:	b508      	push	{r3, lr}
    821e:	f7ff fc3f 	bl	7aa0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    8222:	b110      	cbz	r0, 822a <ev_dma_epin2_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    8224:	4b15      	ldr	r3, [pc, #84]	; (827c <ev_dma_epin2_handler+0x60>)
    8226:	2200      	movs	r2, #0
    8228:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    822a:	4b15      	ldr	r3, [pc, #84]	; (8280 <ev_dma_epin2_handler+0x64>)
    822c:	2200      	movs	r2, #0
    822e:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8230:	4b14      	ldr	r3, [pc, #80]	; (8284 <ev_dma_epin2_handler+0x68>)
    8232:	f893 30be 	ldrb.w	r3, [r3, #190]	; 0xbe
    8236:	2b03      	cmp	r3, #3
    8238:	d011      	beq.n	825e <ev_dma_epin2_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    823a:	4b12      	ldr	r3, [pc, #72]	; (8284 <ev_dma_epin2_handler+0x68>)
    823c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
    8240:	b9d3      	cbnz	r3, 8278 <ev_dma_epin2_handler+0x5c>
    8242:	4b11      	ldr	r3, [pc, #68]	; (8288 <ev_dma_epin2_handler+0x6c>)
    8244:	f3bf 8f5b 	dmb	ish
    8248:	e853 2f00 	ldrex	r2, [r3]
    824c:	f022 0204 	bic.w	r2, r2, #4
    8250:	e843 2100 	strex	r1, r2, [r3]
    8254:	2900      	cmp	r1, #0
    8256:	d1f7      	bne.n	8248 <ev_dma_epin2_handler+0x2c>
    8258:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    825c:	e00c      	b.n	8278 <ev_dma_epin2_handler+0x5c>
    825e:	4b0a      	ldr	r3, [pc, #40]	; (8288 <ev_dma_epin2_handler+0x6c>)
    8260:	f3bf 8f5b 	dmb	ish
    8264:	e853 2f00 	ldrex	r2, [r3]
    8268:	f022 0204 	bic.w	r2, r2, #4
    826c:	e843 2100 	strex	r1, r2, [r3]
    8270:	2900      	cmp	r1, #0
    8272:	d1f7      	bne.n	8264 <ev_dma_epin2_handler+0x48>
    8274:	f3bf 8f5b 	dmb	ish
    8278:	bd08      	pop	{r3, pc}
    827a:	bf00      	nop
    827c:	40027c1c 	.word	0x40027c1c
    8280:	20002553 	.word	0x20002553
    8284:	20001ed0 	.word	0x20001ed0
    8288:	20001e5c 	.word	0x20001e5c

0000828c <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    828c:	b508      	push	{r3, lr}
    828e:	f7ff fc07 	bl	7aa0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    8292:	b110      	cbz	r0, 829a <ev_dma_epin3_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    8294:	4b15      	ldr	r3, [pc, #84]	; (82ec <ev_dma_epin3_handler+0x60>)
    8296:	2200      	movs	r2, #0
    8298:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    829a:	4b15      	ldr	r3, [pc, #84]	; (82f0 <ev_dma_epin3_handler+0x64>)
    829c:	2200      	movs	r2, #0
    829e:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    82a0:	4b14      	ldr	r3, [pc, #80]	; (82f4 <ev_dma_epin3_handler+0x68>)
    82a2:	f893 30ce 	ldrb.w	r3, [r3, #206]	; 0xce
    82a6:	2b03      	cmp	r3, #3
    82a8:	d011      	beq.n	82ce <ev_dma_epin3_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    82aa:	4b12      	ldr	r3, [pc, #72]	; (82f4 <ev_dma_epin3_handler+0x68>)
    82ac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
    82b0:	b9d3      	cbnz	r3, 82e8 <ev_dma_epin3_handler+0x5c>
    82b2:	4b11      	ldr	r3, [pc, #68]	; (82f8 <ev_dma_epin3_handler+0x6c>)
    82b4:	f3bf 8f5b 	dmb	ish
    82b8:	e853 2f00 	ldrex	r2, [r3]
    82bc:	f022 0208 	bic.w	r2, r2, #8
    82c0:	e843 2100 	strex	r1, r2, [r3]
    82c4:	2900      	cmp	r1, #0
    82c6:	d1f7      	bne.n	82b8 <ev_dma_epin3_handler+0x2c>
    82c8:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    82cc:	e00c      	b.n	82e8 <ev_dma_epin3_handler+0x5c>
    82ce:	4b0a      	ldr	r3, [pc, #40]	; (82f8 <ev_dma_epin3_handler+0x6c>)
    82d0:	f3bf 8f5b 	dmb	ish
    82d4:	e853 2f00 	ldrex	r2, [r3]
    82d8:	f022 0208 	bic.w	r2, r2, #8
    82dc:	e843 2100 	strex	r1, r2, [r3]
    82e0:	2900      	cmp	r1, #0
    82e2:	d1f7      	bne.n	82d4 <ev_dma_epin3_handler+0x48>
    82e4:	f3bf 8f5b 	dmb	ish
    82e8:	bd08      	pop	{r3, pc}
    82ea:	bf00      	nop
    82ec:	40027c1c 	.word	0x40027c1c
    82f0:	20002553 	.word	0x20002553
    82f4:	20001ed0 	.word	0x20001ed0
    82f8:	20001e5c 	.word	0x20001e5c

000082fc <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    82fc:	b508      	push	{r3, lr}
    82fe:	f7ff fbcf 	bl	7aa0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    8302:	b110      	cbz	r0, 830a <ev_dma_epin4_handler+0xe>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    8304:	4b15      	ldr	r3, [pc, #84]	; (835c <ev_dma_epin4_handler+0x60>)
    8306:	2200      	movs	r2, #0
    8308:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    830a:	4b15      	ldr	r3, [pc, #84]	; (8360 <ev_dma_epin4_handler+0x64>)
    830c:	2200      	movs	r2, #0
    830e:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8310:	4b14      	ldr	r3, [pc, #80]	; (8364 <ev_dma_epin4_handler+0x68>)
    8312:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
    8316:	2b03      	cmp	r3, #3
    8318:	d011      	beq.n	833e <ev_dma_epin4_handler+0x42>
    else if (p_state->handler.feeder == NULL)
    831a:	4b12      	ldr	r3, [pc, #72]	; (8364 <ev_dma_epin4_handler+0x68>)
    831c:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
    8320:	b9d3      	cbnz	r3, 8358 <ev_dma_epin4_handler+0x5c>
    8322:	4b11      	ldr	r3, [pc, #68]	; (8368 <ev_dma_epin4_handler+0x6c>)
    8324:	f3bf 8f5b 	dmb	ish
    8328:	e853 2f00 	ldrex	r2, [r3]
    832c:	f022 0210 	bic.w	r2, r2, #16
    8330:	e843 2100 	strex	r1, r2, [r3]
    8334:	2900      	cmp	r1, #0
    8336:	d1f7      	bne.n	8328 <ev_dma_epin4_handler+0x2c>
    8338:	f3bf 8f5b 	dmb	ish
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    833c:	e00c      	b.n	8358 <ev_dma_epin4_handler+0x5c>
    833e:	4b0a      	ldr	r3, [pc, #40]	; (8368 <ev_dma_epin4_handler+0x6c>)
    8340:	f3bf 8f5b 	dmb	ish
    8344:	e853 2f00 	ldrex	r2, [r3]
    8348:	f022 0210 	bic.w	r2, r2, #16
    834c:	e843 2100 	strex	r1, r2, [r3]
    8350:	2900      	cmp	r1, #0
    8352:	d1f7      	bne.n	8344 <ev_dma_epin4_handler+0x48>
    8354:	f3bf 8f5b 	dmb	ish
    8358:	bd08      	pop	{r3, pc}
    835a:	bf00      	nop
    835c:	40027c1c 	.word	0x40027c1c
    8360:	20002553 	.word	0x20002553
    8364:	20001ed0 	.word	0x20001ed0
    8368:	20001e5c 	.word	0x20001e5c

0000836c <nrfx_usbd_isoinconfig_set>:
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    836c:	4b01      	ldr	r3, [pc, #4]	; (8374 <nrfx_usbd_isoinconfig_set+0x8>)
    836e:	f8c3 0530 	str.w	r0, [r3, #1328]	; 0x530
}
    8372:	4770      	bx	lr
    8374:	40027000 	.word	0x40027000

00008378 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
    8378:	2300      	movs	r3, #0
    837a:	4a02      	ldr	r2, [pc, #8]	; (8384 <nrfx_usbd_uninit+0xc>)
    837c:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    837e:	4a02      	ldr	r2, [pc, #8]	; (8388 <nrfx_usbd_uninit+0x10>)
    8380:	7013      	strb	r3, [r2, #0]
    return;
}
    8382:	4770      	bx	lr
    8384:	20001ff0 	.word	0x20001ff0
    8388:	20002554 	.word	0x20002554

0000838c <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
    838c:	b510      	push	{r4, lr}
    p_reg->EVENTCAUSE = flags;
    838e:	4b41      	ldr	r3, [pc, #260]	; (8494 <nrfx_usbd_enable+0x108>)
    8390:	f44f 6200 	mov.w	r2, #2048	; 0x800
    8394:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    8398:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    /* Prepare for READY event receiving */
    nrf_usbd_eventcause_clear(NRF_USBD, NRF_USBD_EVENTCAUSE_READY_MASK);

    usbd_enable();
    839c:	f7ff fc26 	bl	7bec <usbd_enable>
}

/* Errata: Unexpected behavior after reset. **/
static inline bool nrfx_usbd_errata_223(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_223();
    83a0:	f005 fbad 	bl	dafe <nrf52_errata_223>

    if (nrfx_usbd_errata_223() && m_first_enable)
    83a4:	b118      	cbz	r0, 83ae <nrfx_usbd_enable+0x22>
    83a6:	4b3c      	ldr	r3, [pc, #240]	; (8498 <nrfx_usbd_enable+0x10c>)
    83a8:	781b      	ldrb	r3, [r3, #0]
    83aa:	2b00      	cmp	r3, #0
    83ac:	d15f      	bne.n	846e <nrfx_usbd_enable+0xe2>
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    83ae:	f7ff fb63 	bl	7a78 <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    83b2:	b1b8      	cbz	r0, 83e4 <nrfx_usbd_enable+0x58>
	__asm__ volatile(
    83b4:	f04f 0220 	mov.w	r2, #32
    83b8:	f3ef 8311 	mrs	r3, BASEPRI
    83bc:	f382 8812 	msr	BASEPRI_MAX, r2
    83c0:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    83c4:	4a35      	ldr	r2, [pc, #212]	; (849c <nrfx_usbd_enable+0x110>)
    83c6:	6812      	ldr	r2, [r2, #0]
    83c8:	2a00      	cmp	r2, #0
    83ca:	d15b      	bne.n	8484 <nrfx_usbd_enable+0xf8>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    83cc:	4a33      	ldr	r2, [pc, #204]	; (849c <nrfx_usbd_enable+0x110>)
    83ce:	f249 3175 	movw	r1, #37749	; 0x9375
    83d2:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    83d4:	4832      	ldr	r0, [pc, #200]	; (84a0 <nrfx_usbd_enable+0x114>)
    83d6:	2403      	movs	r4, #3
    83d8:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    83da:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    83dc:	f383 8811 	msr	BASEPRI, r3
    83e0:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_166();
    83e4:	f7ff fb34 	bl	7a50 <nrf52_errata_166>
#endif
    {
        usbd_errata_187_211_begin();
    }

    if (nrfx_usbd_errata_166())
    83e8:	b150      	cbz	r0, 8400 <nrfx_usbd_enable+0x74>
    {
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7E3;
    83ea:	4b2e      	ldr	r3, [pc, #184]	; (84a4 <nrfx_usbd_enable+0x118>)
    83ec:	f240 72e3 	movw	r2, #2019	; 0x7e3
    83f0:	601a      	str	r2, [r3, #0]
        *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) = 0x40;
    83f2:	3304      	adds	r3, #4
    83f4:	2240      	movs	r2, #64	; 0x40
    83f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
    83f8:	f3bf 8f6f 	isb	sy
  __ASM volatile ("dsb 0xF":::"memory");
    83fc:	f3bf 8f4f 	dsb	sy
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    8400:	4b24      	ldr	r3, [pc, #144]	; (8494 <nrfx_usbd_enable+0x108>)
    8402:	2280      	movs	r2, #128	; 0x80
    8404:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_ZERODATA);
    }
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    8408:	2000      	movs	r0, #0
    840a:	f7ff ffaf 	bl	836c <nrfx_usbd_isoinconfig_set>
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    840e:	4b26      	ldr	r3, [pc, #152]	; (84a8 <nrfx_usbd_enable+0x11c>)
    8410:	f240 12ff 	movw	r2, #511	; 0x1ff
    8414:	601a      	str	r2, [r3, #0]
    m_ep_dma_waiting = 0;
    8416:	4b25      	ldr	r3, [pc, #148]	; (84ac <nrfx_usbd_enable+0x120>)
    8418:	2200      	movs	r2, #0
    841a:	601a      	str	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
    841c:	f7ff fb40 	bl	7aa0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    8420:	b110      	cbz	r0, 8428 <nrfx_usbd_enable+0x9c>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    8422:	4b23      	ldr	r3, [pc, #140]	; (84b0 <nrfx_usbd_enable+0x124>)
    8424:	2200      	movs	r2, #0
    8426:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    8428:	2300      	movs	r3, #0
    842a:	4a22      	ldr	r2, [pc, #136]	; (84b4 <nrfx_usbd_enable+0x128>)
    842c:	7013      	strb	r3, [r2, #0]
    usbd_dma_pending_clear();
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    842e:	4a22      	ldr	r2, [pc, #136]	; (84b8 <nrfx_usbd_enable+0x12c>)
    8430:	7013      	strb	r3, [r2, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    8432:	4b22      	ldr	r3, [pc, #136]	; (84bc <nrfx_usbd_enable+0x130>)
    8434:	2202      	movs	r2, #2
    8436:	701a      	strb	r2, [r3, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    8438:	f7ff fb1e 	bl	7a78 <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    843c:	b1b0      	cbz	r0, 846c <nrfx_usbd_enable+0xe0>
	__asm__ volatile(
    843e:	f04f 0220 	mov.w	r2, #32
    8442:	f3ef 8311 	mrs	r3, BASEPRI
    8446:	f382 8812 	msr	BASEPRI_MAX, r2
    844a:	f3bf 8f6f 	isb	sy
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    844e:	4a13      	ldr	r2, [pc, #76]	; (849c <nrfx_usbd_enable+0x110>)
    8450:	6812      	ldr	r2, [r2, #0]
    8452:	b9da      	cbnz	r2, 848c <nrfx_usbd_enable+0x100>
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    8454:	4a11      	ldr	r2, [pc, #68]	; (849c <nrfx_usbd_enable+0x110>)
    8456:	f249 3175 	movw	r1, #37749	; 0x9375
    845a:	6011      	str	r1, [r2, #0]
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    845c:	4810      	ldr	r0, [pc, #64]	; (84a0 <nrfx_usbd_enable+0x114>)
    845e:	2400      	movs	r4, #0
    8460:	6004      	str	r4, [r0, #0]
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    8462:	6011      	str	r1, [r2, #0]
	__asm__ volatile(
    8464:	f383 8811 	msr	BASEPRI, r3
    8468:	f3bf 8f6f 	isb	sy
#endif
    {
        usbd_errata_187_211_end();
    }
}
    846c:	bd10      	pop	{r4, pc}
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    846e:	4b09      	ldr	r3, [pc, #36]	; (8494 <nrfx_usbd_enable+0x108>)
    8470:	2400      	movs	r4, #0
    8472:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    8476:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
         usbd_enable();
    847a:	f7ff fbb7 	bl	7bec <usbd_enable>
         m_first_enable = false;
    847e:	4b06      	ldr	r3, [pc, #24]	; (8498 <nrfx_usbd_enable+0x10c>)
    8480:	701c      	strb	r4, [r3, #0]
    8482:	e794      	b.n	83ae <nrfx_usbd_enable+0x22>
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    8484:	4a06      	ldr	r2, [pc, #24]	; (84a0 <nrfx_usbd_enable+0x114>)
    8486:	2103      	movs	r1, #3
    8488:	6011      	str	r1, [r2, #0]
    848a:	e7a7      	b.n	83dc <nrfx_usbd_enable+0x50>
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    848c:	4a04      	ldr	r2, [pc, #16]	; (84a0 <nrfx_usbd_enable+0x114>)
    848e:	2100      	movs	r1, #0
    8490:	6011      	str	r1, [r2, #0]
    8492:	e7e7      	b.n	8464 <nrfx_usbd_enable+0xd8>
    8494:	40027000 	.word	0x40027000
    8498:	200001a0 	.word	0x200001a0
    849c:	4006ec00 	.word	0x4006ec00
    84a0:	4006ed14 	.word	0x4006ed14
    84a4:	40027800 	.word	0x40027800
    84a8:	20001ecc 	.word	0x20001ecc
    84ac:	20001e5c 	.word	0x20001e5c
    84b0:	40027c1c 	.word	0x40027c1c
    84b4:	20002553 	.word	0x20002553
    84b8:	20002555 	.word	0x20002555
    84bc:	20002554 	.word	0x20002554

000084c0 <nrfx_usbd_start>:
    }
#endif
}

void nrfx_usbd_start(bool enable_sof)
{
    84c0:	b510      	push	{r4, lr}
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
    84c2:	4b09      	ldr	r3, [pc, #36]	; (84e8 <nrfx_usbd_start+0x28>)
    84c4:	2200      	movs	r2, #0
    84c6:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_ENDEPOUT0_MASK    |
       NRF_USBD_INT_USBEVENT_MASK     |
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof)
    84c8:	b960      	cbnz	r0, 84e4 <nrfx_usbd_start+0x24>
    uint32_t ints_to_enable =
    84ca:	4b08      	ldr	r3, [pc, #32]	; (84ec <nrfx_usbd_start+0x2c>)
    p_reg->INTENSET = mask;
    84cc:	4c08      	ldr	r4, [pc, #32]	; (84f0 <nrfx_usbd_start+0x30>)
    84ce:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    84d2:	2027      	movs	r0, #39	; 0x27
    84d4:	f7fb fb52 	bl	3b7c <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    84d8:	2301      	movs	r3, #1
    84da:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    84de:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
    84e2:	bd10      	pop	{r4, pc}
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
    84e4:	4b03      	ldr	r3, [pc, #12]	; (84f4 <nrfx_usbd_start+0x34>)
    84e6:	e7f1      	b.n	84cc <nrfx_usbd_start+0xc>
    84e8:	20002552 	.word	0x20002552
    84ec:	01c01407 	.word	0x01c01407
    84f0:	40027000 	.word	0x40027000
    84f4:	01e01407 	.word	0x01e01407

000084f8 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    84f8:	4b03      	ldr	r3, [pc, #12]	; (8508 <nrfx_usbd_is_enabled+0x10>)
    84fa:	7818      	ldrb	r0, [r3, #0]
}
    84fc:	2801      	cmp	r0, #1
    84fe:	bf94      	ite	ls
    8500:	2000      	movls	r0, #0
    8502:	2001      	movhi	r0, #1
    8504:	4770      	bx	lr
    8506:	bf00      	nop
    8508:	20002554 	.word	0x20002554

0000850c <nrfx_usbd_ep_max_packet_size_set>:
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    850c:	f010 0f80 	tst.w	r0, #128	; 0x80
    8510:	d106      	bne.n	8520 <nrfx_usbd_ep_max_packet_size_set+0x14>
    8512:	4b04      	ldr	r3, [pc, #16]	; (8524 <nrfx_usbd_ep_max_packet_size_set+0x18>)
        NRF_USBD_EP_NR_GET(ep));
    8514:	f000 000f 	and.w	r0, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8518:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    /* Packet size cannot be higher than maximum buffer size */
    NRFX_ASSERT((NRF_USBD_EPISO_CHECK(ep) && (size <= usbd_ep_iso_capacity(ep))) ||
                (!NRF_USBD_EPISO_CHECK(ep) && (size <= NRFX_USBD_EPSIZE)));

    usbd_ep_state_t * p_state = ep_state_access(ep);
    p_state->max_packet_size = size;
    851c:	8181      	strh	r1, [r0, #12]
}
    851e:	4770      	bx	lr
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8520:	4b01      	ldr	r3, [pc, #4]	; (8528 <nrfx_usbd_ep_max_packet_size_set+0x1c>)
    8522:	e7f7      	b.n	8514 <nrfx_usbd_ep_max_packet_size_set+0x8>
    8524:	20001ed0 	.word	0x20001ed0
    8528:	20001f60 	.word	0x20001f60

0000852c <nrfx_usbd_init>:
{
    852c:	b570      	push	{r4, r5, r6, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    852e:	4b25      	ldr	r3, [pc, #148]	; (85c4 <nrfx_usbd_init+0x98>)
    8530:	781c      	ldrb	r4, [r3, #0]
    8532:	2c00      	cmp	r4, #0
    8534:	d144      	bne.n	85c0 <nrfx_usbd_init+0x94>
    m_event_handler = event_handler;
    8536:	4b24      	ldr	r3, [pc, #144]	; (85c8 <nrfx_usbd_init+0x9c>)
    8538:	6018      	str	r0, [r3, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    853a:	4b22      	ldr	r3, [pc, #136]	; (85c4 <nrfx_usbd_init+0x98>)
    853c:	2201      	movs	r2, #1
    853e:	701a      	strb	r2, [r3, #0]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    8540:	4625      	mov	r5, r4
    8542:	e012      	b.n	856a <nrfx_usbd_init+0x3e>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    8544:	2140      	movs	r1, #64	; 0x40
    8546:	4630      	mov	r0, r6
    8548:	f7ff ffe0 	bl	850c <nrfx_usbd_ep_max_packet_size_set>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    854c:	f016 0f80 	tst.w	r6, #128	; 0x80
    8550:	d115      	bne.n	857e <nrfx_usbd_init+0x52>
    8552:	491e      	ldr	r1, [pc, #120]	; (85cc <nrfx_usbd_init+0xa0>)
        NRF_USBD_EP_NR_GET(ep));
    8554:	f005 030f 	and.w	r3, r5, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8558:	0118      	lsls	r0, r3, #4
    855a:	eb01 1303 	add.w	r3, r1, r3, lsl #4
        p_state->status = NRFX_USBD_EP_OK;
    855e:	2200      	movs	r2, #0
    8560:	739a      	strb	r2, [r3, #14]
        p_state->handler.feeder = NULL;
    8562:	500a      	str	r2, [r1, r0]
        p_state->transfer_cnt = 0;
    8564:	609a      	str	r2, [r3, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    8566:	3501      	adds	r5, #1
    8568:	b2ed      	uxtb	r5, r5
    856a:	2d08      	cmp	r5, #8
    856c:	d81c      	bhi.n	85a8 <nrfx_usbd_init+0x7c>
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    856e:	f045 0680 	orr.w	r6, r5, #128	; 0x80
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    8572:	f015 0f08 	tst.w	r5, #8
    8576:	d0e5      	beq.n	8544 <nrfx_usbd_init+0x18>
    8578:	f240 11ff 	movw	r1, #511	; 0x1ff
    857c:	e7e3      	b.n	8546 <nrfx_usbd_init+0x1a>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    857e:	4914      	ldr	r1, [pc, #80]	; (85d0 <nrfx_usbd_init+0xa4>)
    8580:	e7e8      	b.n	8554 <nrfx_usbd_init+0x28>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    8582:	2140      	movs	r1, #64	; 0x40
    8584:	4620      	mov	r0, r4
    8586:	f7ff ffc1 	bl	850c <nrfx_usbd_ep_max_packet_size_set>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    858a:	f014 0f80 	tst.w	r4, #128	; 0x80
    858e:	d113      	bne.n	85b8 <nrfx_usbd_init+0x8c>
    8590:	490e      	ldr	r1, [pc, #56]	; (85cc <nrfx_usbd_init+0xa0>)
        NRF_USBD_EP_NR_GET(ep));
    8592:	f004 030f 	and.w	r3, r4, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8596:	0118      	lsls	r0, r3, #4
    8598:	eb01 1303 	add.w	r3, r1, r3, lsl #4
        p_state->status = NRFX_USBD_EP_OK;
    859c:	2200      	movs	r2, #0
    859e:	739a      	strb	r2, [r3, #14]
        p_state->handler.consumer = NULL;
    85a0:	500a      	str	r2, [r1, r0]
        p_state->transfer_cnt = 0;
    85a2:	609a      	str	r2, [r3, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    85a4:	3401      	adds	r4, #1
    85a6:	b2e4      	uxtb	r4, r4
    85a8:	2c08      	cmp	r4, #8
    85aa:	d807      	bhi.n	85bc <nrfx_usbd_init+0x90>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    85ac:	f014 0f08 	tst.w	r4, #8
    85b0:	d0e7      	beq.n	8582 <nrfx_usbd_init+0x56>
    85b2:	f240 11ff 	movw	r1, #511	; 0x1ff
    85b6:	e7e5      	b.n	8584 <nrfx_usbd_init+0x58>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    85b8:	4905      	ldr	r1, [pc, #20]	; (85d0 <nrfx_usbd_init+0xa4>)
    85ba:	e7ea      	b.n	8592 <nrfx_usbd_init+0x66>
    return NRFX_SUCCESS;
    85bc:	4805      	ldr	r0, [pc, #20]	; (85d4 <nrfx_usbd_init+0xa8>)
}
    85be:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_INVALID_STATE;
    85c0:	4805      	ldr	r0, [pc, #20]	; (85d8 <nrfx_usbd_init+0xac>)
    85c2:	e7fc      	b.n	85be <nrfx_usbd_init+0x92>
    85c4:	20002554 	.word	0x20002554
    85c8:	20001ff0 	.word	0x20001ff0
    85cc:	20001ed0 	.word	0x20001ed0
    85d0:	20001f60 	.word	0x20001f60
    85d4:	0bad0000 	.word	0x0bad0000
    85d8:	0bad0005 	.word	0x0bad0005

000085dc <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    85dc:	b4f0      	push	{r4, r5, r6, r7}
    return NRFX_USBD_EP_BITPOS(ep);
    85de:	b242      	sxtb	r2, r0
    85e0:	2a00      	cmp	r2, #0
    85e2:	db14      	blt.n	860e <nrfx_usbd_ep_transfer+0x32>
    85e4:	2410      	movs	r4, #16
    85e6:	f002 030f 	and.w	r3, r2, #15
    85ea:	441c      	add	r4, r3
	__asm__ volatile(
    85ec:	f04f 0320 	mov.w	r3, #32
    85f0:	f3ef 8511 	mrs	r5, BASEPRI
    85f4:	f383 8812 	msr	BASEPRI_MAX, r3
    85f8:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    85fc:	f010 070f 	ands.w	r7, r0, #15
    8600:	d107      	bne.n	8612 <nrfx_usbd_ep_transfer+0x36>
    8602:	4b2f      	ldr	r3, [pc, #188]	; (86c0 <nrfx_usbd_ep_transfer+0xe4>)
    8604:	781b      	ldrb	r3, [r3, #0]
    8606:	4283      	cmp	r3, r0
    8608:	d003      	beq.n	8612 <nrfx_usbd_ep_transfer+0x36>
    {
        ret = NRFX_ERROR_INVALID_ADDR;
    860a:	482e      	ldr	r0, [pc, #184]	; (86c4 <nrfx_usbd_ep_transfer+0xe8>)
    860c:	e051      	b.n	86b2 <nrfx_usbd_ep_transfer+0xd6>
    return NRFX_USBD_EP_BITPOS(ep);
    860e:	2400      	movs	r4, #0
    8610:	e7e9      	b.n	85e6 <nrfx_usbd_ep_transfer+0xa>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    8612:	4b2d      	ldr	r3, [pc, #180]	; (86c8 <nrfx_usbd_ep_transfer+0xec>)
    8614:	681b      	ldr	r3, [r3, #0]
    8616:	43db      	mvns	r3, r3
    8618:	b29b      	uxth	r3, r3
    861a:	482c      	ldr	r0, [pc, #176]	; (86cc <nrfx_usbd_ep_transfer+0xf0>)
    861c:	6800      	ldr	r0, [r0, #0]
    861e:	4303      	orrs	r3, r0
    8620:	2001      	movs	r0, #1
    8622:	fa00 f404 	lsl.w	r4, r0, r4
    8626:	4223      	tst	r3, r4
    8628:	d142      	bne.n	86b0 <nrfx_usbd_ep_transfer+0xd4>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    862a:	2a00      	cmp	r2, #0
    862c:	db1f      	blt.n	866e <nrfx_usbd_ep_transfer+0x92>
    862e:	4828      	ldr	r0, [pc, #160]	; (86d0 <nrfx_usbd_ep_transfer+0xf4>)
    8630:	ea4f 1c07 	mov.w	ip, r7, lsl #4
    8634:	eb00 1607 	add.w	r6, r0, r7, lsl #4
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
    8638:	2a00      	cmp	r2, #0
    863a:	db1a      	blt.n	8672 <nrfx_usbd_ep_transfer+0x96>
                }
            }
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    863c:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    8640:	4a24      	ldr	r2, [pc, #144]	; (86d4 <nrfx_usbd_ep_transfer+0xf8>)
    8642:	eb02 0383 	add.w	r3, r2, r3, lsl #2
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
    8646:	4a24      	ldr	r2, [pc, #144]	; (86d8 <nrfx_usbd_ep_transfer+0xfc>)
    8648:	f840 200c 	str.w	r2, [r0, ip]
        }
        *p_context = *p_transfer;
    864c:	c907      	ldmia	r1, {r0, r1, r2}
    864e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
    8652:	6073      	str	r3, [r6, #4]

        p_state->transfer_cnt = 0;
    8654:	2300      	movs	r3, #0
    8656:	60b3      	str	r3, [r6, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    8658:	73b3      	strb	r3, [r6, #14]
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    865a:	4a1c      	ldr	r2, [pc, #112]	; (86cc <nrfx_usbd_ep_transfer+0xf0>)
    865c:	6813      	ldr	r3, [r2, #0]
    865e:	431c      	orrs	r4, r3
    8660:	6014      	str	r4, [r2, #0]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8662:	4b1e      	ldr	r3, [pc, #120]	; (86dc <nrfx_usbd_ep_transfer+0x100>)
    8664:	2280      	movs	r2, #128	; 0x80
    8666:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
        ret = NRFX_SUCCESS;
    866a:	481d      	ldr	r0, [pc, #116]	; (86e0 <nrfx_usbd_ep_transfer+0x104>)
}
    866c:	e021      	b.n	86b2 <nrfx_usbd_ep_transfer+0xd6>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    866e:	481d      	ldr	r0, [pc, #116]	; (86e4 <nrfx_usbd_ep_transfer+0x108>)
    8670:	e7de      	b.n	8630 <nrfx_usbd_ep_transfer+0x54>
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    8672:	eb07 0347 	add.w	r3, r7, r7, lsl #1
    8676:	4a1c      	ldr	r2, [pc, #112]	; (86e8 <nrfx_usbd_ep_transfer+0x10c>)
    8678:	eb02 0383 	add.w	r3, r2, r3, lsl #2
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    867c:	680a      	ldr	r2, [r1, #0]

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    867e:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
    8682:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    8686:	d006      	beq.n	8696 <nrfx_usbd_ep_transfer+0xba>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    8688:	688a      	ldr	r2, [r1, #8]
    868a:	f012 0f01 	tst.w	r2, #1
    868e:	d10c      	bne.n	86aa <nrfx_usbd_ep_transfer+0xce>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
    8690:	4a16      	ldr	r2, [pc, #88]	; (86ec <nrfx_usbd_ep_transfer+0x110>)
    8692:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
    8694:	e7da      	b.n	864c <nrfx_usbd_ep_transfer+0x70>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    8696:	688a      	ldr	r2, [r1, #8]
    8698:	f012 0f01 	tst.w	r2, #1
    869c:	d102      	bne.n	86a4 <nrfx_usbd_ep_transfer+0xc8>
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
    869e:	4a14      	ldr	r2, [pc, #80]	; (86f0 <nrfx_usbd_ep_transfer+0x114>)
    86a0:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
    86a2:	e7d3      	b.n	864c <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
    86a4:	4a13      	ldr	r2, [pc, #76]	; (86f4 <nrfx_usbd_ep_transfer+0x118>)
    86a6:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
    86a8:	e7d0      	b.n	864c <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
    86aa:	4a13      	ldr	r2, [pc, #76]	; (86f8 <nrfx_usbd_ep_transfer+0x11c>)
    86ac:	6032      	str	r2, [r6, #0]
                        NRFX_LOG_DEBUG(
    86ae:	e7cd      	b.n	864c <nrfx_usbd_ep_transfer+0x70>
        ret = NRFX_ERROR_BUSY;
    86b0:	4812      	ldr	r0, [pc, #72]	; (86fc <nrfx_usbd_ep_transfer+0x120>)
	__asm__ volatile(
    86b2:	f385 8811 	msr	BASEPRI, r5
    86b6:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    86ba:	bcf0      	pop	{r4, r5, r6, r7}
    86bc:	4770      	bx	lr
    86be:	bf00      	nop
    86c0:	20002555 	.word	0x20002555
    86c4:	0bad000a 	.word	0x0bad000a
    86c8:	20001ecc 	.word	0x20001ecc
    86cc:	20001e5c 	.word	0x20001e5c
    86d0:	20001ed0 	.word	0x20001ed0
    86d4:	20001df0 	.word	0x20001df0
    86d8:	0000db03 	.word	0x0000db03
    86dc:	e000e100 	.word	0xe000e100
    86e0:	0bad0000 	.word	0x0bad0000
    86e4:	20001f60 	.word	0x20001f60
    86e8:	20001e60 	.word	0x20001e60
    86ec:	0000db95 	.word	0x0000db95
    86f0:	0000db39 	.word	0x0000db39
    86f4:	0000db5b 	.word	0x0000db5b
    86f8:	0000dbd3 	.word	0x0000dbd3
    86fc:	0bad000b 	.word	0x0bad000b

00008700 <nrfx_usbd_feeder_buffer_get>:
}

void * nrfx_usbd_feeder_buffer_get(void)
{
    return m_tx_buffer;
}
    8700:	4800      	ldr	r0, [pc, #0]	; (8704 <nrfx_usbd_feeder_buffer_get+0x4>)
    8702:	4770      	bx	lr
    8704:	20001ff4 	.word	0x20001ff4

00008708 <nrfx_usbd_ep_status_get>:

nrfx_usbd_ep_status_t nrfx_usbd_ep_status_get(nrfx_usbd_ep_t ep, size_t * p_size)
{
    8708:	b430      	push	{r4, r5}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    870a:	f010 0f80 	tst.w	r0, #128	; 0x80
    870e:	d118      	bne.n	8742 <nrfx_usbd_ep_status_get+0x3a>
    8710:	4b0e      	ldr	r3, [pc, #56]	; (874c <nrfx_usbd_ep_status_get+0x44>)
        NRF_USBD_EP_NR_GET(ep));
    8712:	f000 000f 	and.w	r0, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8716:	0104      	lsls	r4, r0, #4
    8718:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	__asm__ volatile(
    871c:	f04f 0520 	mov.w	r5, #32
    8720:	f3ef 8211 	mrs	r2, BASEPRI
    8724:	f385 8812 	msr	BASEPRI_MAX, r5
    8728:	f3bf 8f6f 	isb	sy
    nrfx_usbd_ep_status_t ret;

    usbd_ep_state_t const * p_state = ep_state_access(ep);
    NRFX_CRITICAL_SECTION_ENTER();
    *p_size = p_state->transfer_cnt;
    872c:	6885      	ldr	r5, [r0, #8]
    872e:	600d      	str	r5, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    8730:	591b      	ldr	r3, [r3, r4]
    8732:	b143      	cbz	r3, 8746 <nrfx_usbd_ep_status_get+0x3e>
    8734:	2004      	movs	r0, #4
	__asm__ volatile(
    8736:	f382 8811 	msr	BASEPRI, r2
    873a:	f3bf 8f6f 	isb	sy
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    873e:	bc30      	pop	{r4, r5}
    8740:	4770      	bx	lr
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    8742:	4b03      	ldr	r3, [pc, #12]	; (8750 <nrfx_usbd_ep_status_get+0x48>)
    8744:	e7e5      	b.n	8712 <nrfx_usbd_ep_status_get+0xa>
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    8746:	7b80      	ldrb	r0, [r0, #14]
    8748:	e7f5      	b.n	8736 <nrfx_usbd_ep_status_get+0x2e>
    874a:	bf00      	nop
    874c:	20001ed0 	.word	0x20001ed0
    8750:	20001f60 	.word	0x20001f60

00008754 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
    8754:	f010 0f08 	tst.w	r0, #8
    8758:	d107      	bne.n	876a <nrfx_usbd_epout_size_get+0x16>
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    875a:	f000 000f 	and.w	r0, r0, #15
    875e:	f500 7094 	add.w	r0, r0, #296	; 0x128
    8762:	4b06      	ldr	r3, [pc, #24]	; (877c <nrfx_usbd_epout_size_get+0x28>)
    8764:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    8768:	4770      	bx	lr
        size_t size_isoout = p_reg->SIZE.ISOOUT;
    876a:	4b04      	ldr	r3, [pc, #16]	; (877c <nrfx_usbd_epout_size_get+0x28>)
    876c:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
        if ((size_isoout & USBD_SIZE_ISOOUT_ZERO_Msk) ==
    8770:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    8774:	d100      	bne.n	8778 <nrfx_usbd_epout_size_get+0x24>
    8776:	4770      	bx	lr
            size_isoout = 0;
    8778:	2000      	movs	r0, #0

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
    877a:	4770      	bx	lr
    877c:	40027000 	.word	0x40027000

00008780 <usbd_dmareq_process>:
    if (!m_dma_pending)
    8780:	4b6d      	ldr	r3, [pc, #436]	; (8938 <usbd_dmareq_process+0x1b8>)
    8782:	781b      	ldrb	r3, [r3, #0]
    8784:	2b00      	cmp	r3, #0
    8786:	f040 80d5 	bne.w	8934 <usbd_dmareq_process+0x1b4>
{
    878a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    878e:	b085      	sub	sp, #20
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    8790:	4b6a      	ldr	r3, [pc, #424]	; (893c <usbd_dmareq_process+0x1bc>)
    8792:	681b      	ldr	r3, [r3, #0]
    8794:	4a6a      	ldr	r2, [pc, #424]	; (8940 <usbd_dmareq_process+0x1c0>)
    8796:	6810      	ldr	r0, [r2, #0]
    8798:	4003      	ands	r3, r0
    879a:	f000 80c8 	beq.w	892e <usbd_dmareq_process+0x1ae>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    879e:	f013 2001 	ands.w	r0, r3, #16777472	; 0x1000100
    87a2:	d05a      	beq.n	885a <usbd_dmareq_process+0xda>
                pos = usbd_dma_scheduler_algorithm(req & USBD_EPISO_BIT_MASK);
    87a4:	f005 f9ee 	bl	db84 <usbd_dma_scheduler_algorithm>
    87a8:	4680      	mov	r8, r0
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    87aa:	f1b8 0f0f 	cmp.w	r8, #15
    87ae:	d959      	bls.n	8864 <usbd_dmareq_process+0xe4>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    87b0:	f1a8 0610 	sub.w	r6, r8, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    87b4:	b2f6      	uxtb	r6, r6
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    87b6:	b274      	sxtb	r4, r6
    87b8:	2c00      	cmp	r4, #0
    87ba:	db57      	blt.n	886c <usbd_dmareq_process+0xec>
    87bc:	f8df a19c 	ldr.w	sl, [pc, #412]	; 895c <usbd_dmareq_process+0x1dc>
    87c0:	f006 070f 	and.w	r7, r6, #15
        NRF_USBD_EP_NR_GET(ep));
    87c4:	463d      	mov	r5, r7
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    87c6:	ea4f 1b07 	mov.w	fp, r7, lsl #4
    87ca:	eb0a 1907 	add.w	r9, sl, r7, lsl #4
            if (NRF_USBD_EPIN_CHECK(ep))
    87ce:	2c00      	cmp	r4, #0
    87d0:	db4f      	blt.n	8872 <usbd_dmareq_process+0xf2>
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    87d2:	4630      	mov	r0, r6
    87d4:	f7ff ffbe 	bl	8754 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
    87d8:	f85a a00b 	ldr.w	sl, [sl, fp]
    87dc:	4683      	mov	fp, r0
    87de:	4603      	mov	r3, r0
    87e0:	f8b9 200c 	ldrh.w	r2, [r9, #12]
    87e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
    87e8:	a802      	add	r0, sp, #8
    87ea:	47d0      	blx	sl
                if (transfer.p_data.rx == NULL)
    87ec:	9b02      	ldr	r3, [sp, #8]
    87ee:	b113      	cbz	r3, 87f6 <usbd_dmareq_process+0x76>
                else if (transfer.size < rx_size)
    87f0:	9b03      	ldr	r3, [sp, #12]
    87f2:	455b      	cmp	r3, fp
    87f4:	d34b      	bcc.n	888e <usbd_dmareq_process+0x10e>
                if (!continue_transfer)
    87f6:	b910      	cbnz	r0, 87fe <usbd_dmareq_process+0x7e>
                    p_state->handler.consumer = NULL;
    87f8:	2300      	movs	r3, #0
    87fa:	f8c9 3000 	str.w	r3, [r9]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_199();
    87fe:	f7ff f94f 	bl	7aa0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    8802:	b110      	cbz	r0, 880a <usbd_dmareq_process+0x8a>
        *((volatile uint32_t *)0x40027C1C) = 0x00000082;
    8804:	4b4f      	ldr	r3, [pc, #316]	; (8944 <usbd_dmareq_process+0x1c4>)
    8806:	2282      	movs	r2, #130	; 0x82
    8808:	601a      	str	r2, [r3, #0]
    m_dma_pending = true;
    880a:	2001      	movs	r0, #1
    880c:	4b4a      	ldr	r3, [pc, #296]	; (8938 <usbd_dmareq_process+0x1b8>)
    880e:	7018      	strb	r0, [r3, #0]
            m_ep_ready &= ~(1U << pos);
    8810:	fa00 f008 	lsl.w	r0, r0, r8
    8814:	4a4a      	ldr	r2, [pc, #296]	; (8940 <usbd_dmareq_process+0x1c0>)
    8816:	6813      	ldr	r3, [r2, #0]
    8818:	ea23 0000 	bic.w	r0, r3, r0
    881c:	6010      	str	r0, [r2, #0]
            p_state->transfer_cnt += transfer.size;
    881e:	9a03      	ldr	r2, [sp, #12]
    8820:	f8d9 3008 	ldr.w	r3, [r9, #8]
    8824:	4413      	add	r3, r2
    8826:	f8c9 3008 	str.w	r3, [r9, #8]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
    882a:	9b02      	ldr	r3, [sp, #8]
    if (NRF_USBD_EPIN_CHECK(ep))
    882c:	2c00      	cmp	r4, #0
    882e:	db4f      	blt.n	88d0 <usbd_dmareq_process+0x150>
        if (NRF_USBD_EPISO_CHECK(ep))
    8830:	f016 0f08 	tst.w	r6, #8
    8834:	d05f      	beq.n	88f6 <usbd_dmareq_process+0x176>
            p_reg->ISOOUT.PTR    = ptr;
    8836:	4944      	ldr	r1, [pc, #272]	; (8948 <usbd_dmareq_process+0x1c8>)
    8838:	f8c1 37a0 	str.w	r3, [r1, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
    883c:	f8c1 27a4 	str.w	r2, [r1, #1956]	; 0x7a4
    return (nrf_usbd_task_t)(
    8840:	2c00      	cmp	r4, #0
    8842:	db62      	blt.n	890a <usbd_dmareq_process+0x18a>
    8844:	2328      	movs	r3, #40	; 0x28
    8846:	eb03 0787 	add.w	r7, r3, r7, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    884a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
    884e:	f507 371c 	add.w	r7, r7, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    8852:	2301      	movs	r3, #1
    8854:	603b      	str	r3, [r7, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    8856:	683b      	ldr	r3, [r7, #0]
}
    8858:	e065      	b.n	8926 <usbd_dmareq_process+0x1a6>
                pos = usbd_dma_scheduler_algorithm(req);
    885a:	4618      	mov	r0, r3
    885c:	f005 f992 	bl	db84 <usbd_dma_scheduler_algorithm>
    8860:	4680      	mov	r8, r0
    8862:	e7a2      	b.n	87aa <usbd_dmareq_process+0x2a>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    8864:	f068 067f 	orn	r6, r8, #127	; 0x7f
    8868:	b2f6      	uxtb	r6, r6
    886a:	e7a4      	b.n	87b6 <usbd_dmareq_process+0x36>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    886c:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 8960 <usbd_dmareq_process+0x1e0>
    8870:	e7a6      	b.n	87c0 <usbd_dmareq_process+0x40>
                continue_transfer = p_state->handler.feeder(
    8872:	f8d9 3000 	ldr.w	r3, [r9]
    8876:	f8b9 200c 	ldrh.w	r2, [r9, #12]
    887a:	f8d9 1004 	ldr.w	r1, [r9, #4]
    887e:	a802      	add	r0, sp, #8
    8880:	4798      	blx	r3
                if (!continue_transfer)
    8882:	2800      	cmp	r0, #0
    8884:	d1bb      	bne.n	87fe <usbd_dmareq_process+0x7e>
                    p_state->handler.feeder = NULL;
    8886:	2300      	movs	r3, #0
    8888:	f8c9 3000 	str.w	r3, [r9]
    888c:	e7b7      	b.n	87fe <usbd_dmareq_process+0x7e>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    888e:	2202      	movs	r2, #2
    8890:	f889 200e 	strb.w	r2, [r9, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    8894:	2301      	movs	r3, #1
    8896:	fa03 f808 	lsl.w	r8, r3, r8
    889a:	ea6f 0808 	mvn.w	r8, r8
    889e:	4b27      	ldr	r3, [pc, #156]	; (893c <usbd_dmareq_process+0x1bc>)
    88a0:	f3bf 8f5b 	dmb	ish
    88a4:	e853 1f00 	ldrex	r1, [r3]
    88a8:	ea01 0108 	and.w	r1, r1, r8
    88ac:	e843 1000 	strex	r0, r1, [r3]
    88b0:	2800      	cmp	r0, #0
    88b2:	d1f7      	bne.n	88a4 <usbd_dmareq_process+0x124>
    88b4:	f3bf 8f5b 	dmb	ish
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    88b8:	2306      	movs	r3, #6
    88ba:	f88d 3004 	strb.w	r3, [sp, #4]
    88be:	f88d 6006 	strb.w	r6, [sp, #6]
    88c2:	f88d 2007 	strb.w	r2, [sp, #7]
                    m_event_handler(&evt);
    88c6:	4b21      	ldr	r3, [pc, #132]	; (894c <usbd_dmareq_process+0x1cc>)
    88c8:	681b      	ldr	r3, [r3, #0]
    88ca:	a801      	add	r0, sp, #4
    88cc:	4798      	blx	r3
                    continue;
    88ce:	e75f      	b.n	8790 <usbd_dmareq_process+0x10>
        if (NRF_USBD_EPISO_CHECK(ep))
    88d0:	f016 0f08 	tst.w	r6, #8
    88d4:	d005      	beq.n	88e2 <usbd_dmareq_process+0x162>
            p_reg->ISOIN.PTR    = ptr;
    88d6:	491c      	ldr	r1, [pc, #112]	; (8948 <usbd_dmareq_process+0x1c8>)
    88d8:	f8c1 36a0 	str.w	r3, [r1, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
    88dc:	f8c1 26a4 	str.w	r2, [r1, #1700]	; 0x6a4
    88e0:	e7ae      	b.n	8840 <usbd_dmareq_process+0xc0>
            p_reg->EPIN[epnr].PTR    = ptr;
    88e2:	4919      	ldr	r1, [pc, #100]	; (8948 <usbd_dmareq_process+0x1c8>)
    88e4:	eb07 0087 	add.w	r0, r7, r7, lsl #2
    88e8:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    88ec:	f8c0 3600 	str.w	r3, [r0, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
    88f0:	f8c0 2604 	str.w	r2, [r0, #1540]	; 0x604
    88f4:	e7a4      	b.n	8840 <usbd_dmareq_process+0xc0>
            p_reg->EPOUT[epnr].PTR    = ptr;
    88f6:	4914      	ldr	r1, [pc, #80]	; (8948 <usbd_dmareq_process+0x1c8>)
    88f8:	eb07 0087 	add.w	r0, r7, r7, lsl #2
    88fc:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    8900:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
    8904:	f8c0 2704 	str.w	r2, [r0, #1796]	; 0x704
    8908:	e79a      	b.n	8840 <usbd_dmareq_process+0xc0>
    return (nrf_usbd_task_t)(
    890a:	2304      	movs	r3, #4
    890c:	e79b      	b.n	8846 <usbd_dmareq_process+0xc6>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    890e:	4b10      	ldr	r3, [pc, #64]	; (8950 <usbd_dmareq_process+0x1d0>)
    8910:	f833 3015 	ldrh.w	r3, [r3, r5, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    8914:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8918:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    891c:	681b      	ldr	r3, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
    891e:	b933      	cbnz	r3, 892e <usbd_dmareq_process+0x1ae>
    8920:	4b0c      	ldr	r3, [pc, #48]	; (8954 <usbd_dmareq_process+0x1d4>)
    8922:	681b      	ldr	r3, [r3, #0]
    8924:	b91b      	cbnz	r3, 892e <usbd_dmareq_process+0x1ae>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    8926:	2c00      	cmp	r4, #0
    8928:	dbf1      	blt.n	890e <usbd_dmareq_process+0x18e>
    892a:	4b0b      	ldr	r3, [pc, #44]	; (8958 <usbd_dmareq_process+0x1d8>)
    892c:	e7f0      	b.n	8910 <usbd_dmareq_process+0x190>
}
    892e:	b005      	add	sp, #20
    8930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8934:	4770      	bx	lr
    8936:	bf00      	nop
    8938:	20002553 	.word	0x20002553
    893c:	20001e5c 	.word	0x20001e5c
    8940:	20001ecc 	.word	0x20001ecc
    8944:	40027c1c 	.word	0x40027c1c
    8948:	40027000 	.word	0x40027000
    894c:	20001ff0 	.word	0x20001ff0
    8950:	0000f87c 	.word	0x0000f87c
    8954:	40027100 	.word	0x40027100
    8958:	0000f89c 	.word	0x0000f89c
    895c:	20001ed0 	.word	0x20001ed0
    8960:	20001f60 	.word	0x20001f60

00008964 <ev_epdata_handler>:
{
    8964:	b510      	push	{r4, lr}
    return p_reg->EPDATASTATUS;
    8966:	4b0f      	ldr	r3, [pc, #60]	; (89a4 <ev_epdata_handler+0x40>)
    8968:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
    896c:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
    NRFX_LOG_DEBUG("USBD event: EndpointEPStatus: %x", dataepstatus);
    8970:	e009      	b.n	8986 <ev_epdata_handler+0x22>
    return 32U;
    8972:	2120      	movs	r1, #32
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    8974:	f1a1 0010 	sub.w	r0, r1, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    8978:	b2c0      	uxtb	r0, r0
        dataepstatus &= ~(1UL << bitpos);
    897a:	2301      	movs	r3, #1
    897c:	408b      	lsls	r3, r1
    897e:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    8982:	f7ff f9cb 	bl	7d1c <usbd_ep_data_handler>
    while (dataepstatus)
    8986:	b154      	cbz	r4, 899e <ev_epdata_handler+0x3a>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    8988:	fa94 f1a4 	rbit	r1, r4
  if (value == 0U)
    898c:	2900      	cmp	r1, #0
    898e:	d0f0      	beq.n	8972 <ev_epdata_handler+0xe>
  return __builtin_clz(value);
    8990:	fab1 f181 	clz	r1, r1
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    8994:	290f      	cmp	r1, #15
    8996:	d8ed      	bhi.n	8974 <ev_epdata_handler+0x10>
    8998:	f041 0080 	orr.w	r0, r1, #128	; 0x80
    899c:	e7ed      	b.n	897a <ev_epdata_handler+0x16>
        usbd_dmareq_process();
    899e:	f7ff feef 	bl	8780 <usbd_dmareq_process>
}
    89a2:	bd10      	pop	{r4, pc}
    89a4:	40027000 	.word	0x40027000

000089a8 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    89a8:	b500      	push	{lr}
    89aa:	b083      	sub	sp, #12
    89ac:	f7ff f878 	bl	7aa0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    89b0:	b110      	cbz	r0, 89b8 <ev_dma_epout7_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    89b2:	4b1d      	ldr	r3, [pc, #116]	; (8a28 <ev_dma_epout7_handler+0x80>)
    89b4:	2200      	movs	r2, #0
    89b6:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    89b8:	4b1c      	ldr	r3, [pc, #112]	; (8a2c <ev_dma_epout7_handler+0x84>)
    89ba:	2200      	movs	r2, #0
    89bc:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    89be:	4b1c      	ldr	r3, [pc, #112]	; (8a30 <ev_dma_epout7_handler+0x88>)
    89c0:	f893 307e 	ldrb.w	r3, [r3, #126]	; 0x7e
    89c4:	2b03      	cmp	r3, #3
    89c6:	d01d      	beq.n	8a04 <ev_dma_epout7_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
    89c8:	4b19      	ldr	r3, [pc, #100]	; (8a30 <ev_dma_epout7_handler+0x88>)
    89ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    89cc:	bb3b      	cbnz	r3, 8a1e <ev_dma_epout7_handler+0x76>
    89ce:	4b19      	ldr	r3, [pc, #100]	; (8a34 <ev_dma_epout7_handler+0x8c>)
    89d0:	f3bf 8f5b 	dmb	ish
    89d4:	e853 2f00 	ldrex	r2, [r3]
    89d8:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
    89dc:	e843 2100 	strex	r1, r2, [r3]
    89e0:	2900      	cmp	r1, #0
    89e2:	d1f7      	bne.n	89d4 <ev_dma_epout7_handler+0x2c>
    89e4:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    89e8:	2306      	movs	r3, #6
    89ea:	f88d 3004 	strb.w	r3, [sp, #4]
    89ee:	2307      	movs	r3, #7
    89f0:	f88d 3006 	strb.w	r3, [sp, #6]
    89f4:	2300      	movs	r3, #0
    89f6:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    89fa:	4b0f      	ldr	r3, [pc, #60]	; (8a38 <ev_dma_epout7_handler+0x90>)
    89fc:	681b      	ldr	r3, [r3, #0]
    89fe:	a801      	add	r0, sp, #4
    8a00:	4798      	blx	r3
    8a02:	e00c      	b.n	8a1e <ev_dma_epout7_handler+0x76>
    8a04:	4b0b      	ldr	r3, [pc, #44]	; (8a34 <ev_dma_epout7_handler+0x8c>)
    8a06:	f3bf 8f5b 	dmb	ish
    8a0a:	e853 2f00 	ldrex	r2, [r3]
    8a0e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
    8a12:	e843 2100 	strex	r1, r2, [r3]
    8a16:	2900      	cmp	r1, #0
    8a18:	d1f7      	bne.n	8a0a <ev_dma_epout7_handler+0x62>
    8a1a:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    8a1e:	f7ff feaf 	bl	8780 <usbd_dmareq_process>
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    8a22:	b003      	add	sp, #12
    8a24:	f85d fb04 	ldr.w	pc, [sp], #4
    8a28:	40027c1c 	.word	0x40027c1c
    8a2c:	20002553 	.word	0x20002553
    8a30:	20001ed0 	.word	0x20001ed0
    8a34:	20001e5c 	.word	0x20001e5c
    8a38:	20001ff0 	.word	0x20001ff0

00008a3c <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    8a3c:	b500      	push	{lr}
    8a3e:	b083      	sub	sp, #12
    8a40:	f7ff f82e 	bl	7aa0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    8a44:	b110      	cbz	r0, 8a4c <ev_dma_epout1_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    8a46:	4b1d      	ldr	r3, [pc, #116]	; (8abc <ev_dma_epout1_handler+0x80>)
    8a48:	2200      	movs	r2, #0
    8a4a:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    8a4c:	4b1c      	ldr	r3, [pc, #112]	; (8ac0 <ev_dma_epout1_handler+0x84>)
    8a4e:	2200      	movs	r2, #0
    8a50:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8a52:	4b1c      	ldr	r3, [pc, #112]	; (8ac4 <ev_dma_epout1_handler+0x88>)
    8a54:	7f9b      	ldrb	r3, [r3, #30]
    8a56:	2b03      	cmp	r3, #3
    8a58:	d01d      	beq.n	8a96 <ev_dma_epout1_handler+0x5a>
    else if (p_state->handler.consumer == NULL)
    8a5a:	4b1a      	ldr	r3, [pc, #104]	; (8ac4 <ev_dma_epout1_handler+0x88>)
    8a5c:	691b      	ldr	r3, [r3, #16]
    8a5e:	bb3b      	cbnz	r3, 8ab0 <ev_dma_epout1_handler+0x74>
    8a60:	4b19      	ldr	r3, [pc, #100]	; (8ac8 <ev_dma_epout1_handler+0x8c>)
    8a62:	f3bf 8f5b 	dmb	ish
    8a66:	e853 2f00 	ldrex	r2, [r3]
    8a6a:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
    8a6e:	e843 2100 	strex	r1, r2, [r3]
    8a72:	2900      	cmp	r1, #0
    8a74:	d1f7      	bne.n	8a66 <ev_dma_epout1_handler+0x2a>
    8a76:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8a7a:	2306      	movs	r3, #6
    8a7c:	f88d 3004 	strb.w	r3, [sp, #4]
    8a80:	2301      	movs	r3, #1
    8a82:	f88d 3006 	strb.w	r3, [sp, #6]
    8a86:	2300      	movs	r3, #0
    8a88:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    8a8c:	4b0f      	ldr	r3, [pc, #60]	; (8acc <ev_dma_epout1_handler+0x90>)
    8a8e:	681b      	ldr	r3, [r3, #0]
    8a90:	a801      	add	r0, sp, #4
    8a92:	4798      	blx	r3
    8a94:	e00c      	b.n	8ab0 <ev_dma_epout1_handler+0x74>
    8a96:	4b0c      	ldr	r3, [pc, #48]	; (8ac8 <ev_dma_epout1_handler+0x8c>)
    8a98:	f3bf 8f5b 	dmb	ish
    8a9c:	e853 2f00 	ldrex	r2, [r3]
    8aa0:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
    8aa4:	e843 2100 	strex	r1, r2, [r3]
    8aa8:	2900      	cmp	r1, #0
    8aaa:	d1f7      	bne.n	8a9c <ev_dma_epout1_handler+0x60>
    8aac:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    8ab0:	f7ff fe66 	bl	8780 <usbd_dmareq_process>
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    8ab4:	b003      	add	sp, #12
    8ab6:	f85d fb04 	ldr.w	pc, [sp], #4
    8aba:	bf00      	nop
    8abc:	40027c1c 	.word	0x40027c1c
    8ac0:	20002553 	.word	0x20002553
    8ac4:	20001ed0 	.word	0x20001ed0
    8ac8:	20001e5c 	.word	0x20001e5c
    8acc:	20001ff0 	.word	0x20001ff0

00008ad0 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    8ad0:	b500      	push	{lr}
    8ad2:	b083      	sub	sp, #12
    8ad4:	f7fe ffe4 	bl	7aa0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    8ad8:	b110      	cbz	r0, 8ae0 <ev_dma_epout2_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    8ada:	4b1d      	ldr	r3, [pc, #116]	; (8b50 <ev_dma_epout2_handler+0x80>)
    8adc:	2200      	movs	r2, #0
    8ade:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    8ae0:	4b1c      	ldr	r3, [pc, #112]	; (8b54 <ev_dma_epout2_handler+0x84>)
    8ae2:	2200      	movs	r2, #0
    8ae4:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8ae6:	4b1c      	ldr	r3, [pc, #112]	; (8b58 <ev_dma_epout2_handler+0x88>)
    8ae8:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
    8aec:	2b03      	cmp	r3, #3
    8aee:	d01d      	beq.n	8b2c <ev_dma_epout2_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
    8af0:	4b19      	ldr	r3, [pc, #100]	; (8b58 <ev_dma_epout2_handler+0x88>)
    8af2:	6a1b      	ldr	r3, [r3, #32]
    8af4:	bb3b      	cbnz	r3, 8b46 <ev_dma_epout2_handler+0x76>
    8af6:	4b19      	ldr	r3, [pc, #100]	; (8b5c <ev_dma_epout2_handler+0x8c>)
    8af8:	f3bf 8f5b 	dmb	ish
    8afc:	e853 2f00 	ldrex	r2, [r3]
    8b00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
    8b04:	e843 2100 	strex	r1, r2, [r3]
    8b08:	2900      	cmp	r1, #0
    8b0a:	d1f7      	bne.n	8afc <ev_dma_epout2_handler+0x2c>
    8b0c:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8b10:	2306      	movs	r3, #6
    8b12:	f88d 3004 	strb.w	r3, [sp, #4]
    8b16:	2302      	movs	r3, #2
    8b18:	f88d 3006 	strb.w	r3, [sp, #6]
    8b1c:	2300      	movs	r3, #0
    8b1e:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    8b22:	4b0f      	ldr	r3, [pc, #60]	; (8b60 <ev_dma_epout2_handler+0x90>)
    8b24:	681b      	ldr	r3, [r3, #0]
    8b26:	a801      	add	r0, sp, #4
    8b28:	4798      	blx	r3
    8b2a:	e00c      	b.n	8b46 <ev_dma_epout2_handler+0x76>
    8b2c:	4b0b      	ldr	r3, [pc, #44]	; (8b5c <ev_dma_epout2_handler+0x8c>)
    8b2e:	f3bf 8f5b 	dmb	ish
    8b32:	e853 2f00 	ldrex	r2, [r3]
    8b36:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
    8b3a:	e843 2100 	strex	r1, r2, [r3]
    8b3e:	2900      	cmp	r1, #0
    8b40:	d1f7      	bne.n	8b32 <ev_dma_epout2_handler+0x62>
    8b42:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    8b46:	f7ff fe1b 	bl	8780 <usbd_dmareq_process>
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    8b4a:	b003      	add	sp, #12
    8b4c:	f85d fb04 	ldr.w	pc, [sp], #4
    8b50:	40027c1c 	.word	0x40027c1c
    8b54:	20002553 	.word	0x20002553
    8b58:	20001ed0 	.word	0x20001ed0
    8b5c:	20001e5c 	.word	0x20001e5c
    8b60:	20001ff0 	.word	0x20001ff0

00008b64 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    8b64:	b500      	push	{lr}
    8b66:	b083      	sub	sp, #12
    8b68:	f7fe ff9a 	bl	7aa0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    8b6c:	b110      	cbz	r0, 8b74 <ev_dma_epout3_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    8b6e:	4b1d      	ldr	r3, [pc, #116]	; (8be4 <ev_dma_epout3_handler+0x80>)
    8b70:	2200      	movs	r2, #0
    8b72:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    8b74:	4b1c      	ldr	r3, [pc, #112]	; (8be8 <ev_dma_epout3_handler+0x84>)
    8b76:	2200      	movs	r2, #0
    8b78:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8b7a:	4b1c      	ldr	r3, [pc, #112]	; (8bec <ev_dma_epout3_handler+0x88>)
    8b7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
    8b80:	2b03      	cmp	r3, #3
    8b82:	d01d      	beq.n	8bc0 <ev_dma_epout3_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
    8b84:	4b19      	ldr	r3, [pc, #100]	; (8bec <ev_dma_epout3_handler+0x88>)
    8b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    8b88:	bb3b      	cbnz	r3, 8bda <ev_dma_epout3_handler+0x76>
    8b8a:	4b19      	ldr	r3, [pc, #100]	; (8bf0 <ev_dma_epout3_handler+0x8c>)
    8b8c:	f3bf 8f5b 	dmb	ish
    8b90:	e853 2f00 	ldrex	r2, [r3]
    8b94:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
    8b98:	e843 2100 	strex	r1, r2, [r3]
    8b9c:	2900      	cmp	r1, #0
    8b9e:	d1f7      	bne.n	8b90 <ev_dma_epout3_handler+0x2c>
    8ba0:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8ba4:	2306      	movs	r3, #6
    8ba6:	f88d 3004 	strb.w	r3, [sp, #4]
    8baa:	2303      	movs	r3, #3
    8bac:	f88d 3006 	strb.w	r3, [sp, #6]
    8bb0:	2300      	movs	r3, #0
    8bb2:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    8bb6:	4b0f      	ldr	r3, [pc, #60]	; (8bf4 <ev_dma_epout3_handler+0x90>)
    8bb8:	681b      	ldr	r3, [r3, #0]
    8bba:	a801      	add	r0, sp, #4
    8bbc:	4798      	blx	r3
    8bbe:	e00c      	b.n	8bda <ev_dma_epout3_handler+0x76>
    8bc0:	4b0b      	ldr	r3, [pc, #44]	; (8bf0 <ev_dma_epout3_handler+0x8c>)
    8bc2:	f3bf 8f5b 	dmb	ish
    8bc6:	e853 2f00 	ldrex	r2, [r3]
    8bca:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
    8bce:	e843 2100 	strex	r1, r2, [r3]
    8bd2:	2900      	cmp	r1, #0
    8bd4:	d1f7      	bne.n	8bc6 <ev_dma_epout3_handler+0x62>
    8bd6:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    8bda:	f7ff fdd1 	bl	8780 <usbd_dmareq_process>
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    8bde:	b003      	add	sp, #12
    8be0:	f85d fb04 	ldr.w	pc, [sp], #4
    8be4:	40027c1c 	.word	0x40027c1c
    8be8:	20002553 	.word	0x20002553
    8bec:	20001ed0 	.word	0x20001ed0
    8bf0:	20001e5c 	.word	0x20001e5c
    8bf4:	20001ff0 	.word	0x20001ff0

00008bf8 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    8bf8:	b500      	push	{lr}
    8bfa:	b083      	sub	sp, #12
    8bfc:	f7fe ff50 	bl	7aa0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    8c00:	b110      	cbz	r0, 8c08 <ev_dma_epout4_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    8c02:	4b1d      	ldr	r3, [pc, #116]	; (8c78 <ev_dma_epout4_handler+0x80>)
    8c04:	2200      	movs	r2, #0
    8c06:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    8c08:	4b1c      	ldr	r3, [pc, #112]	; (8c7c <ev_dma_epout4_handler+0x84>)
    8c0a:	2200      	movs	r2, #0
    8c0c:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8c0e:	4b1c      	ldr	r3, [pc, #112]	; (8c80 <ev_dma_epout4_handler+0x88>)
    8c10:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
    8c14:	2b03      	cmp	r3, #3
    8c16:	d01d      	beq.n	8c54 <ev_dma_epout4_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
    8c18:	4b19      	ldr	r3, [pc, #100]	; (8c80 <ev_dma_epout4_handler+0x88>)
    8c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    8c1c:	bb3b      	cbnz	r3, 8c6e <ev_dma_epout4_handler+0x76>
    8c1e:	4b19      	ldr	r3, [pc, #100]	; (8c84 <ev_dma_epout4_handler+0x8c>)
    8c20:	f3bf 8f5b 	dmb	ish
    8c24:	e853 2f00 	ldrex	r2, [r3]
    8c28:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    8c2c:	e843 2100 	strex	r1, r2, [r3]
    8c30:	2900      	cmp	r1, #0
    8c32:	d1f7      	bne.n	8c24 <ev_dma_epout4_handler+0x2c>
    8c34:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8c38:	2306      	movs	r3, #6
    8c3a:	f88d 3004 	strb.w	r3, [sp, #4]
    8c3e:	2304      	movs	r3, #4
    8c40:	f88d 3006 	strb.w	r3, [sp, #6]
    8c44:	2300      	movs	r3, #0
    8c46:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    8c4a:	4b0f      	ldr	r3, [pc, #60]	; (8c88 <ev_dma_epout4_handler+0x90>)
    8c4c:	681b      	ldr	r3, [r3, #0]
    8c4e:	a801      	add	r0, sp, #4
    8c50:	4798      	blx	r3
    8c52:	e00c      	b.n	8c6e <ev_dma_epout4_handler+0x76>
    8c54:	4b0b      	ldr	r3, [pc, #44]	; (8c84 <ev_dma_epout4_handler+0x8c>)
    8c56:	f3bf 8f5b 	dmb	ish
    8c5a:	e853 2f00 	ldrex	r2, [r3]
    8c5e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
    8c62:	e843 2100 	strex	r1, r2, [r3]
    8c66:	2900      	cmp	r1, #0
    8c68:	d1f7      	bne.n	8c5a <ev_dma_epout4_handler+0x62>
    8c6a:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    8c6e:	f7ff fd87 	bl	8780 <usbd_dmareq_process>
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    8c72:	b003      	add	sp, #12
    8c74:	f85d fb04 	ldr.w	pc, [sp], #4
    8c78:	40027c1c 	.word	0x40027c1c
    8c7c:	20002553 	.word	0x20002553
    8c80:	20001ed0 	.word	0x20001ed0
    8c84:	20001e5c 	.word	0x20001e5c
    8c88:	20001ff0 	.word	0x20001ff0

00008c8c <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    8c8c:	b500      	push	{lr}
    8c8e:	b083      	sub	sp, #12
    8c90:	f7fe ff06 	bl	7aa0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    8c94:	b110      	cbz	r0, 8c9c <ev_dma_epout5_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    8c96:	4b1d      	ldr	r3, [pc, #116]	; (8d0c <ev_dma_epout5_handler+0x80>)
    8c98:	2200      	movs	r2, #0
    8c9a:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    8c9c:	4b1c      	ldr	r3, [pc, #112]	; (8d10 <ev_dma_epout5_handler+0x84>)
    8c9e:	2200      	movs	r2, #0
    8ca0:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8ca2:	4b1c      	ldr	r3, [pc, #112]	; (8d14 <ev_dma_epout5_handler+0x88>)
    8ca4:	f893 305e 	ldrb.w	r3, [r3, #94]	; 0x5e
    8ca8:	2b03      	cmp	r3, #3
    8caa:	d01d      	beq.n	8ce8 <ev_dma_epout5_handler+0x5c>
    else if (p_state->handler.consumer == NULL)
    8cac:	4b19      	ldr	r3, [pc, #100]	; (8d14 <ev_dma_epout5_handler+0x88>)
    8cae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    8cb0:	bb3b      	cbnz	r3, 8d02 <ev_dma_epout5_handler+0x76>
    8cb2:	4b19      	ldr	r3, [pc, #100]	; (8d18 <ev_dma_epout5_handler+0x8c>)
    8cb4:	f3bf 8f5b 	dmb	ish
    8cb8:	e853 2f00 	ldrex	r2, [r3]
    8cbc:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
    8cc0:	e843 2100 	strex	r1, r2, [r3]
    8cc4:	2900      	cmp	r1, #0
    8cc6:	d1f7      	bne.n	8cb8 <ev_dma_epout5_handler+0x2c>
    8cc8:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8ccc:	2306      	movs	r3, #6
    8cce:	f88d 3004 	strb.w	r3, [sp, #4]
    8cd2:	2305      	movs	r3, #5
    8cd4:	f88d 3006 	strb.w	r3, [sp, #6]
    8cd8:	2300      	movs	r3, #0
    8cda:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    8cde:	4b0f      	ldr	r3, [pc, #60]	; (8d1c <ev_dma_epout5_handler+0x90>)
    8ce0:	681b      	ldr	r3, [r3, #0]
    8ce2:	a801      	add	r0, sp, #4
    8ce4:	4798      	blx	r3
    8ce6:	e00c      	b.n	8d02 <ev_dma_epout5_handler+0x76>
    8ce8:	4b0b      	ldr	r3, [pc, #44]	; (8d18 <ev_dma_epout5_handler+0x8c>)
    8cea:	f3bf 8f5b 	dmb	ish
    8cee:	e853 2f00 	ldrex	r2, [r3]
    8cf2:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
    8cf6:	e843 2100 	strex	r1, r2, [r3]
    8cfa:	2900      	cmp	r1, #0
    8cfc:	d1f7      	bne.n	8cee <ev_dma_epout5_handler+0x62>
    8cfe:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    8d02:	f7ff fd3d 	bl	8780 <usbd_dmareq_process>
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    8d06:	b003      	add	sp, #12
    8d08:	f85d fb04 	ldr.w	pc, [sp], #4
    8d0c:	40027c1c 	.word	0x40027c1c
    8d10:	20002553 	.word	0x20002553
    8d14:	20001ed0 	.word	0x20001ed0
    8d18:	20001e5c 	.word	0x20001e5c
    8d1c:	20001ff0 	.word	0x20001ff0

00008d20 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    8d20:	b500      	push	{lr}
    8d22:	b083      	sub	sp, #12
    8d24:	f7fe febc 	bl	7aa0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    8d28:	b110      	cbz	r0, 8d30 <ev_dma_epout6_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    8d2a:	4b1d      	ldr	r3, [pc, #116]	; (8da0 <ev_dma_epout6_handler+0x80>)
    8d2c:	2200      	movs	r2, #0
    8d2e:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    8d30:	4b1c      	ldr	r3, [pc, #112]	; (8da4 <ev_dma_epout6_handler+0x84>)
    8d32:	2200      	movs	r2, #0
    8d34:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8d36:	4b1c      	ldr	r3, [pc, #112]	; (8da8 <ev_dma_epout6_handler+0x88>)
    8d38:	f893 306e 	ldrb.w	r3, [r3, #110]	; 0x6e
    8d3c:	2b03      	cmp	r3, #3
    8d3e:	d01c      	beq.n	8d7a <ev_dma_epout6_handler+0x5a>
    else if (p_state->handler.consumer == NULL)
    8d40:	4b19      	ldr	r3, [pc, #100]	; (8da8 <ev_dma_epout6_handler+0x88>)
    8d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    8d44:	bb33      	cbnz	r3, 8d94 <ev_dma_epout6_handler+0x74>
    8d46:	4b19      	ldr	r3, [pc, #100]	; (8dac <ev_dma_epout6_handler+0x8c>)
    8d48:	f3bf 8f5b 	dmb	ish
    8d4c:	e853 2f00 	ldrex	r2, [r3]
    8d50:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
    8d54:	e843 2100 	strex	r1, r2, [r3]
    8d58:	2900      	cmp	r1, #0
    8d5a:	d1f7      	bne.n	8d4c <ev_dma_epout6_handler+0x2c>
    8d5c:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8d60:	2306      	movs	r3, #6
    8d62:	f88d 3004 	strb.w	r3, [sp, #4]
    8d66:	f88d 3006 	strb.w	r3, [sp, #6]
    8d6a:	2300      	movs	r3, #0
    8d6c:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    8d70:	4b0f      	ldr	r3, [pc, #60]	; (8db0 <ev_dma_epout6_handler+0x90>)
    8d72:	681b      	ldr	r3, [r3, #0]
    8d74:	a801      	add	r0, sp, #4
    8d76:	4798      	blx	r3
    8d78:	e00c      	b.n	8d94 <ev_dma_epout6_handler+0x74>
    8d7a:	4b0c      	ldr	r3, [pc, #48]	; (8dac <ev_dma_epout6_handler+0x8c>)
    8d7c:	f3bf 8f5b 	dmb	ish
    8d80:	e853 2f00 	ldrex	r2, [r3]
    8d84:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
    8d88:	e843 2100 	strex	r1, r2, [r3]
    8d8c:	2900      	cmp	r1, #0
    8d8e:	d1f7      	bne.n	8d80 <ev_dma_epout6_handler+0x60>
    8d90:	f3bf 8f5b 	dmb	ish
    usbd_dmareq_process();
    8d94:	f7ff fcf4 	bl	8780 <usbd_dmareq_process>
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    8d98:	b003      	add	sp, #12
    8d9a:	f85d fb04 	ldr.w	pc, [sp], #4
    8d9e:	bf00      	nop
    8da0:	40027c1c 	.word	0x40027c1c
    8da4:	20002553 	.word	0x20002553
    8da8:	20001ed0 	.word	0x20001ed0
    8dac:	20001e5c 	.word	0x20001e5c
    8db0:	20001ff0 	.word	0x20001ff0

00008db4 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    8db4:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    8db8:	4b01      	ldr	r3, [pc, #4]	; (8dc0 <nrfx_usbd_ep_stall+0xc>)
    8dba:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
    8dbe:	4770      	bx	lr
    8dc0:	40027000 	.word	0x40027000

00008dc4 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
    8dc4:	f010 0f08 	tst.w	r0, #8
    8dc8:	d117      	bne.n	8dfa <nrfx_usbd_ep_stall_check+0x36>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    8dca:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    8dce:	f010 0f80 	tst.w	r0, #128	; 0x80
    8dd2:	d10c      	bne.n	8dee <nrfx_usbd_ep_stall_check+0x2a>
        return p_reg->HALTED.EPOUT[epnr];
    8dd4:	f503 7388 	add.w	r3, r3, #272	; 0x110
    8dd8:	009b      	lsls	r3, r3, #2
    8dda:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8dde:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    8de2:	6858      	ldr	r0, [r3, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
    8de4:	2801      	cmp	r0, #1
    8de6:	bf14      	ite	ne
    8de8:	2000      	movne	r0, #0
    8dea:	2001      	moveq	r0, #1
    8dec:	4770      	bx	lr
        return p_reg->HALTED.EPIN[epnr];
    8dee:	f503 7384 	add.w	r3, r3, #264	; 0x108
    8df2:	4a03      	ldr	r2, [pc, #12]	; (8e00 <nrfx_usbd_ep_stall_check+0x3c>)
    8df4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    8df8:	e7f4      	b.n	8de4 <nrfx_usbd_ep_stall_check+0x20>
        return false;
    8dfa:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
    8dfc:	4770      	bx	lr
    8dfe:	bf00      	nop
    8e00:	40027000 	.word	0x40027000

00008e04 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
    8e04:	4b04      	ldr	r3, [pc, #16]	; (8e18 <nrfx_usbd_ep_dtoggle_clear+0x14>)
    8e06:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
    8e0a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    8e0e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
    8e12:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
    8e16:	4770      	bx	lr
    8e18:	40027000 	.word	0x40027000

00008e1c <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    8e1c:	b510      	push	{r4, lr}
    8e1e:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    8e20:	2208      	movs	r2, #8
    8e22:	2100      	movs	r1, #0
    8e24:	f004 f953 	bl	d0ce <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    8e28:	4b11      	ldr	r3, [pc, #68]	; (8e70 <nrfx_usbd_setup_get+0x54>)
    8e2a:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    8e2e:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
    8e30:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    8e34:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
    8e36:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    8e3a:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    8e3c:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    8e40:	0209      	lsls	r1, r1, #8
    8e42:	b289      	uxth	r1, r1
    8e44:	430a      	orrs	r2, r1
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
    8e46:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
    8e48:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    8e4c:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    8e4e:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    8e52:	0209      	lsls	r1, r1, #8
    8e54:	b289      	uxth	r1, r1
    8e56:	430a      	orrs	r2, r1
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
    8e58:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
    8e5a:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    8e5e:	b292      	uxth	r2, r2
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    8e60:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    8e64:	021b      	lsls	r3, r3, #8
    8e66:	b29b      	uxth	r3, r3
    8e68:	4313      	orrs	r3, r2
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
    8e6a:	80e3      	strh	r3, [r4, #6]
}
    8e6c:	bd10      	pop	{r4, pc}
    8e6e:	bf00      	nop
    8e70:	40027000 	.word	0x40027000

00008e74 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    8e74:	4b02      	ldr	r3, [pc, #8]	; (8e80 <nrfx_usbd_setup_data_clear+0xc>)
    8e76:	2201      	movs	r2, #1
    8e78:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    8e7a:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
    8e7c:	4770      	bx	lr
    8e7e:	bf00      	nop
    8e80:	4002704c 	.word	0x4002704c

00008e84 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    8e84:	b500      	push	{lr}
    8e86:	b083      	sub	sp, #12
    8e88:	f7fe fe0a 	bl	7aa0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    8e8c:	b110      	cbz	r0, 8e94 <ev_dma_epout0_handler+0x10>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    8e8e:	4b1d      	ldr	r3, [pc, #116]	; (8f04 <ev_dma_epout0_handler+0x80>)
    8e90:	2200      	movs	r2, #0
    8e92:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    8e94:	4b1c      	ldr	r3, [pc, #112]	; (8f08 <ev_dma_epout0_handler+0x84>)
    8e96:	2200      	movs	r2, #0
    8e98:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8e9a:	4b1c      	ldr	r3, [pc, #112]	; (8f0c <ev_dma_epout0_handler+0x88>)
    8e9c:	7b9b      	ldrb	r3, [r3, #14]
    8e9e:	2b03      	cmp	r3, #3
    8ea0:	d005      	beq.n	8eae <ev_dma_epout0_handler+0x2a>
    else if (p_state->handler.consumer == NULL)
    8ea2:	4b1a      	ldr	r3, [pc, #104]	; (8f0c <ev_dma_epout0_handler+0x88>)
    8ea4:	681b      	ldr	r3, [r3, #0]
    8ea6:	b183      	cbz	r3, 8eca <ev_dma_epout0_handler+0x46>
        nrfx_usbd_setup_data_clear();
    8ea8:	f7ff ffe4 	bl	8e74 <nrfx_usbd_setup_data_clear>
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    8eac:	e026      	b.n	8efc <ev_dma_epout0_handler+0x78>
    8eae:	4b18      	ldr	r3, [pc, #96]	; (8f10 <ev_dma_epout0_handler+0x8c>)
    8eb0:	f3bf 8f5b 	dmb	ish
    8eb4:	e853 2f00 	ldrex	r2, [r3]
    8eb8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    8ebc:	e843 2100 	strex	r1, r2, [r3]
    8ec0:	2900      	cmp	r1, #0
    8ec2:	d1f7      	bne.n	8eb4 <ev_dma_epout0_handler+0x30>
    8ec4:	f3bf 8f5b 	dmb	ish
    8ec8:	e018      	b.n	8efc <ev_dma_epout0_handler+0x78>
    8eca:	4b11      	ldr	r3, [pc, #68]	; (8f10 <ev_dma_epout0_handler+0x8c>)
    8ecc:	f3bf 8f5b 	dmb	ish
    8ed0:	e853 2f00 	ldrex	r2, [r3]
    8ed4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    8ed8:	e843 2100 	strex	r1, r2, [r3]
    8edc:	2900      	cmp	r1, #0
    8ede:	d1f7      	bne.n	8ed0 <ev_dma_epout0_handler+0x4c>
    8ee0:	f3bf 8f5b 	dmb	ish
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8ee4:	2306      	movs	r3, #6
    8ee6:	f88d 3004 	strb.w	r3, [sp, #4]
    8eea:	2300      	movs	r3, #0
    8eec:	f88d 3006 	strb.w	r3, [sp, #6]
    8ef0:	f88d 3007 	strb.w	r3, [sp, #7]
        m_event_handler(&evt);
    8ef4:	4b07      	ldr	r3, [pc, #28]	; (8f14 <ev_dma_epout0_handler+0x90>)
    8ef6:	681b      	ldr	r3, [r3, #0]
    8ef8:	a801      	add	r0, sp, #4
    8efa:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    8efc:	b003      	add	sp, #12
    8efe:	f85d fb04 	ldr.w	pc, [sp], #4
    8f02:	bf00      	nop
    8f04:	40027c1c 	.word	0x40027c1c
    8f08:	20002553 	.word	0x20002553
    8f0c:	20001ed0 	.word	0x20001ed0
    8f10:	20001e5c 	.word	0x20001e5c
    8f14:	20001ff0 	.word	0x20001ff0

00008f18 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    8f18:	4b02      	ldr	r3, [pc, #8]	; (8f24 <nrfx_usbd_setup_clear+0xc>)
    8f1a:	2201      	movs	r2, #1
    8f1c:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    8f1e:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
    8f20:	4770      	bx	lr
    8f22:	bf00      	nop
    8f24:	40027050 	.word	0x40027050

00008f28 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    8f28:	4b02      	ldr	r3, [pc, #8]	; (8f34 <nrfx_usbd_setup_stall+0xc>)
    8f2a:	2201      	movs	r2, #1
    8f2c:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    8f2e:	681b      	ldr	r3, [r3, #0]

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
    8f30:	4770      	bx	lr
    8f32:	bf00      	nop
    8f34:	40027054 	.word	0x40027054

00008f38 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
    8f38:	4b01      	ldr	r3, [pc, #4]	; (8f40 <nrfx_usbd_last_setup_dir_get+0x8>)
    8f3a:	7818      	ldrb	r0, [r3, #0]
    8f3c:	4770      	bx	lr
    8f3e:	bf00      	nop
    8f40:	20002555 	.word	0x20002555

00008f44 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    8f44:	b410      	push	{r4}
	__asm__ volatile(
    8f46:	f04f 0320 	mov.w	r3, #32
    8f4a:	f3ef 8411 	mrs	r4, BASEPRI
    8f4e:	f383 8812 	msr	BASEPRI_MAX, r3
    8f52:	f3bf 8f6f 	isb	sy
    return NRFX_USBD_EP_BITPOS(ep);
    8f56:	b243      	sxtb	r3, r0
    8f58:	2b00      	cmp	r3, #0
    8f5a:	db1e      	blt.n	8f9a <nrfx_usbd_transfer_out_drop+0x56>
    8f5c:	2210      	movs	r2, #16
    8f5e:	f003 030f 	and.w	r3, r3, #15
    8f62:	4413      	add	r3, r2
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
    8f64:	2201      	movs	r2, #1
    8f66:	fa02 f303 	lsl.w	r3, r2, r3
    8f6a:	490d      	ldr	r1, [pc, #52]	; (8fa0 <nrfx_usbd_transfer_out_drop+0x5c>)
    8f6c:	680a      	ldr	r2, [r1, #0]
    8f6e:	ea22 0203 	bic.w	r2, r2, r3
    8f72:	600a      	str	r2, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
    8f74:	f010 0f08 	tst.w	r0, #8
    8f78:	d109      	bne.n	8f8e <nrfx_usbd_transfer_out_drop+0x4a>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    8f7a:	f000 000f 	and.w	r0, r0, #15
    8f7e:	4b09      	ldr	r3, [pc, #36]	; (8fa4 <nrfx_usbd_transfer_out_drop+0x60>)
    8f80:	f500 7094 	add.w	r0, r0, #296	; 0x128
    8f84:	2200      	movs	r2, #0
    8f86:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    8f8a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	__asm__ volatile(
    8f8e:	f384 8811 	msr	BASEPRI, r4
    8f92:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    8f96:	bc10      	pop	{r4}
    8f98:	4770      	bx	lr
    return NRFX_USBD_EP_BITPOS(ep);
    8f9a:	2200      	movs	r2, #0
    8f9c:	e7df      	b.n	8f5e <nrfx_usbd_transfer_out_drop+0x1a>
    8f9e:	bf00      	nop
    8fa0:	20001ecc 	.word	0x20001ecc
    8fa4:	40027000 	.word	0x40027000

00008fa8 <ev_setup_handler>:
{
    8fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    8faa:	b083      	sub	sp, #12
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    8fac:	4b5f      	ldr	r3, [pc, #380]	; (912c <ev_setup_handler+0x184>)
    8fae:	f8d3 4480 	ldr.w	r4, [r3, #1152]	; 0x480
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    8fb2:	4b5f      	ldr	r3, [pc, #380]	; (9130 <ev_setup_handler+0x188>)
    8fb4:	681b      	ldr	r3, [r3, #0]
    8fb6:	43db      	mvns	r3, r3
    8fb8:	b29b      	uxth	r3, r3
    8fba:	4a5e      	ldr	r2, [pc, #376]	; (9134 <ev_setup_handler+0x18c>)
    8fbc:	6812      	ldr	r2, [r2, #0]
    8fbe:	4313      	orrs	r3, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    8fc0:	4a5d      	ldr	r2, [pc, #372]	; (9138 <ev_setup_handler+0x190>)
    8fc2:	7810      	ldrb	r0, [r2, #0]
    return NRFX_USBD_EP_BITPOS(ep);
    8fc4:	f992 2000 	ldrsb.w	r2, [r2]
    8fc8:	2a00      	cmp	r2, #0
    8fca:	db2e      	blt.n	902a <ev_setup_handler+0x82>
    8fcc:	2110      	movs	r1, #16
    8fce:	f002 020f 	and.w	r2, r2, #15
    8fd2:	4411      	add	r1, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    8fd4:	2201      	movs	r2, #1
    8fd6:	408a      	lsls	r2, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    8fd8:	4213      	tst	r3, r2
    8fda:	d128      	bne.n	902e <ev_setup_handler+0x86>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    8fdc:	f014 0f80 	tst.w	r4, #128	; 0x80
    8fe0:	f040 80a2 	bne.w	9128 <ev_setup_handler+0x180>
    8fe4:	2200      	movs	r2, #0
    m_last_setup_dir =
    8fe6:	4b54      	ldr	r3, [pc, #336]	; (9138 <ev_setup_handler+0x190>)
    8fe8:	701a      	strb	r2, [r3, #0]
    8fea:	4b52      	ldr	r3, [pc, #328]	; (9134 <ev_setup_handler+0x18c>)
    8fec:	f3bf 8f5b 	dmb	ish
    8ff0:	e853 2f00 	ldrex	r2, [r3]
    8ff4:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
    8ff8:	e843 2100 	strex	r1, r2, [r3]
    8ffc:	2900      	cmp	r1, #0
    8ffe:	d1f7      	bne.n	8ff0 <ev_setup_handler+0x48>
    9000:	f3bf 8f5b 	dmb	ish
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    9004:	4a4a      	ldr	r2, [pc, #296]	; (9130 <ev_setup_handler+0x188>)
    9006:	6813      	ldr	r3, [r2, #0]
    9008:	f043 0301 	orr.w	r3, r3, #1
    900c:	6013      	str	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
    900e:	2300      	movs	r3, #0
    9010:	f8ad 3005 	strh.w	r3, [sp, #5]
    9014:	f88d 3007 	strb.w	r3, [sp, #7]
    9018:	2305      	movs	r3, #5
    901a:	f88d 3004 	strb.w	r3, [sp, #4]
    m_event_handler(&evt);
    901e:	4b47      	ldr	r3, [pc, #284]	; (913c <ev_setup_handler+0x194>)
    9020:	681b      	ldr	r3, [r3, #0]
    9022:	a801      	add	r0, sp, #4
    9024:	4798      	blx	r3
}
    9026:	b003      	add	sp, #12
    9028:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return NRFX_USBD_EP_BITPOS(ep);
    902a:	2100      	movs	r1, #0
    902c:	e7cf      	b.n	8fce <ev_setup_handler+0x26>
	__asm__ volatile(
    902e:	f04f 0320 	mov.w	r3, #32
    9032:	f3ef 8611 	mrs	r6, BASEPRI
    9036:	f383 8812 	msr	BASEPRI_MAX, r3
    903a:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    903e:	b243      	sxtb	r3, r0
    9040:	2b00      	cmp	r3, #0
    9042:	db26      	blt.n	9092 <ev_setup_handler+0xea>
    9044:	4d3e      	ldr	r5, [pc, #248]	; (9140 <ev_setup_handler+0x198>)
        NRF_USBD_EP_NR_GET(ep));
    9046:	f000 020f 	and.w	r2, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    904a:	eb05 1502 	add.w	r5, r5, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
    904e:	2b00      	cmp	r3, #0
    9050:	db24      	blt.n	909c <ev_setup_handler+0xf4>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    9052:	4a38      	ldr	r2, [pc, #224]	; (9134 <ev_setup_handler+0x18c>)
    9054:	6812      	ldr	r2, [r2, #0]
    9056:	43d2      	mvns	r2, r2
    return NRFX_USBD_EP_BITPOS(ep);
    9058:	f003 030f 	and.w	r3, r3, #15
    905c:	3310      	adds	r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    905e:	40da      	lsrs	r2, r3
    9060:	f012 0f01 	tst.w	r2, #1
    9064:	d117      	bne.n	9096 <ev_setup_handler+0xee>
            p_state->handler.consumer = NULL;
    9066:	2200      	movs	r2, #0
    9068:	602a      	str	r2, [r5, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    906a:	2201      	movs	r2, #1
    906c:	fa02 f303 	lsl.w	r3, r2, r3
    9070:	4930      	ldr	r1, [pc, #192]	; (9134 <ev_setup_handler+0x18c>)
    9072:	680a      	ldr	r2, [r1, #0]
    9074:	ea22 0203 	bic.w	r2, r2, r3
    9078:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    907a:	492d      	ldr	r1, [pc, #180]	; (9130 <ev_setup_handler+0x188>)
    907c:	680a      	ldr	r2, [r1, #0]
    907e:	ea22 0303 	bic.w	r3, r2, r3
    9082:	600b      	str	r3, [r1, #0]
        p_state->status = NRFX_USBD_EP_ABORTED;
    9084:	2303      	movs	r3, #3
    9086:	73ab      	strb	r3, [r5, #14]
	__asm__ volatile(
    9088:	f386 8811 	msr	BASEPRI, r6
    908c:	f3bf 8f6f 	isb	sy
}
    9090:	e7a4      	b.n	8fdc <ev_setup_handler+0x34>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9092:	4d2c      	ldr	r5, [pc, #176]	; (9144 <ev_setup_handler+0x19c>)
    9094:	e7d7      	b.n	9046 <ev_setup_handler+0x9e>
            nrfx_usbd_transfer_out_drop(ep);
    9096:	f7ff ff55 	bl	8f44 <nrfx_usbd_transfer_out_drop>
    909a:	e7f3      	b.n	9084 <ev_setup_handler+0xdc>
        if(!NRF_USBD_EPISO_CHECK(ep))
    909c:	f010 0f08 	tst.w	r0, #8
    90a0:	d10f      	bne.n	90c2 <ev_setup_handler+0x11a>
            if(ep != NRFX_USBD_EPIN0)
    90a2:	2880      	cmp	r0, #128	; 0x80
    90a4:	d032      	beq.n	910c <ev_setup_handler+0x164>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    90a6:	f202 32da 	addw	r2, r2, #986	; 0x3da
    90aa:	0052      	lsls	r2, r2, #1
    90ac:	4926      	ldr	r1, [pc, #152]	; (9148 <ev_setup_handler+0x1a0>)
    90ae:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    90b0:	3104      	adds	r1, #4
    90b2:	680a      	ldr	r2, [r1, #0]
    90b4:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
    90b6:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    90ba:	680f      	ldr	r7, [r1, #0]
    90bc:	433a      	orrs	r2, r7
    90be:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    90c0:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    90c2:	4a1b      	ldr	r2, [pc, #108]	; (9130 <ev_setup_handler+0x188>)
    90c4:	6811      	ldr	r1, [r2, #0]
    90c6:	4a1b      	ldr	r2, [pc, #108]	; (9134 <ev_setup_handler+0x18c>)
    90c8:	6817      	ldr	r7, [r2, #0]
    90ca:	ea67 0c01 	orn	ip, r7, r1
    return NRFX_USBD_EP_BITPOS(ep);
    90ce:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    90d2:	2201      	movs	r2, #1
    90d4:	fa02 f303 	lsl.w	r3, r2, r3
    90d8:	ea1c 0f03 	tst.w	ip, r3
    90dc:	d0d4      	beq.n	9088 <ev_setup_handler+0xe0>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    90de:	ea27 0703 	bic.w	r7, r7, r3
    90e2:	4a14      	ldr	r2, [pc, #80]	; (9134 <ev_setup_handler+0x18c>)
    90e4:	6017      	str	r7, [r2, #0]
            m_ep_ready       |=   1U << ep2bit(ep) ;
    90e6:	430b      	orrs	r3, r1
    90e8:	4a11      	ldr	r2, [pc, #68]	; (9130 <ev_setup_handler+0x188>)
    90ea:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
    90ec:	2300      	movs	r3, #0
    90ee:	602b      	str	r3, [r5, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    90f0:	2303      	movs	r3, #3
    90f2:	73ab      	strb	r3, [r5, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    90f4:	2206      	movs	r2, #6
    90f6:	f88d 2000 	strb.w	r2, [sp]
    90fa:	f88d 0002 	strb.w	r0, [sp, #2]
    90fe:	f88d 3003 	strb.w	r3, [sp, #3]
            m_event_handler(&evt);
    9102:	4b0e      	ldr	r3, [pc, #56]	; (913c <ev_setup_handler+0x194>)
    9104:	681b      	ldr	r3, [r3, #0]
    9106:	4668      	mov	r0, sp
    9108:	4798      	blx	r3
    910a:	e7bd      	b.n	9088 <ev_setup_handler+0xe0>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    910c:	4a0e      	ldr	r2, [pc, #56]	; (9148 <ev_setup_handler+0x1a0>)
    910e:	f240 71b4 	movw	r1, #1972	; 0x7b4
    9112:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    9114:	490d      	ldr	r1, [pc, #52]	; (914c <ev_setup_handler+0x1a4>)
    9116:	680a      	ldr	r2, [r1, #0]
    9118:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
    911a:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    911e:	680f      	ldr	r7, [r1, #0]
    9120:	433a      	orrs	r2, r7
    9122:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    9124:	680a      	ldr	r2, [r1, #0]
    9126:	e7cc      	b.n	90c2 <ev_setup_handler+0x11a>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    9128:	2280      	movs	r2, #128	; 0x80
    912a:	e75c      	b.n	8fe6 <ev_setup_handler+0x3e>
    912c:	40027000 	.word	0x40027000
    9130:	20001ecc 	.word	0x20001ecc
    9134:	20001e5c 	.word	0x20001e5c
    9138:	20002555 	.word	0x20002555
    913c:	20001ff0 	.word	0x20001ff0
    9140:	20001ed0 	.word	0x20001ed0
    9144:	20001f60 	.word	0x20001f60
    9148:	40027800 	.word	0x40027800
    914c:	40027804 	.word	0x40027804

00009150 <nrfx_usbd_irq_handler>:
{
    9150:	b570      	push	{r4, r5, r6, lr}
    return p_reg->INTENSET;
    9152:	4b22      	ldr	r3, [pc, #136]	; (91dc <nrfx_usbd_irq_handler+0x8c>)
    9154:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
    uint32_t active = 0;
    9158:	2500      	movs	r5, #0
    while (to_process)
    915a:	e006      	b.n	916a <nrfx_usbd_irq_handler+0x1a>
    return 32U;
    915c:	2220      	movs	r2, #32
    915e:	e00b      	b.n	9178 <nrfx_usbd_irq_handler+0x28>
        to_process &= ~(1UL << event_nr);
    9160:	2301      	movs	r3, #1
    9162:	fa03 f202 	lsl.w	r2, r3, r2
    9166:	ea21 0102 	bic.w	r1, r1, r2
    while (to_process)
    916a:	b1c1      	cbz	r1, 919e <nrfx_usbd_irq_handler+0x4e>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    916c:	fa91 f2a1 	rbit	r2, r1
  if (value == 0U)
    9170:	2a00      	cmp	r2, #0
    9172:	d0f3      	beq.n	915c <nrfx_usbd_irq_handler+0xc>
  return __builtin_clz(value);
    9174:	fab2 f282 	clz	r2, r2
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    9178:	f102 0340 	add.w	r3, r2, #64	; 0x40
    917c:	009b      	lsls	r3, r3, #2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    917e:	b29b      	uxth	r3, r3
    9180:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9184:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    9188:	6818      	ldr	r0, [r3, #0]
    if (ret)
    918a:	b110      	cbz	r0, 9192 <nrfx_usbd_irq_handler+0x42>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    918c:	2400      	movs	r4, #0
    918e:	601c      	str	r4, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    9190:	681b      	ldr	r3, [r3, #0]
        if (nrf_usbd_event_get_and_clear(NRF_USBD,
    9192:	2800      	cmp	r0, #0
    9194:	d0e4      	beq.n	9160 <nrfx_usbd_irq_handler+0x10>
            active |= 1UL << event_nr;
    9196:	2301      	movs	r3, #1
    9198:	4093      	lsls	r3, r2
    919a:	431d      	orrs	r5, r3
    919c:	e7e0      	b.n	9160 <nrfx_usbd_irq_handler+0x10>
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    919e:	f405 0600 	and.w	r6, r5, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    91a2:	f425 0500 	bic.w	r5, r5, #8388608	; 0x800000
    while (active)
    91a6:	e00a      	b.n	91be <nrfx_usbd_irq_handler+0x6e>
    91a8:	fab4 f484 	clz	r4, r4
        m_isr[event_nr]();
    91ac:	4b0c      	ldr	r3, [pc, #48]	; (91e0 <nrfx_usbd_irq_handler+0x90>)
    91ae:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
    91b2:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    91b4:	2301      	movs	r3, #1
    91b6:	fa03 f404 	lsl.w	r4, r3, r4
    91ba:	ea25 0504 	bic.w	r5, r5, r4
    while (active)
    91be:	b12d      	cbz	r5, 91cc <nrfx_usbd_irq_handler+0x7c>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    91c0:	fa95 f4a5 	rbit	r4, r5
  if (value == 0U)
    91c4:	2c00      	cmp	r4, #0
    91c6:	d1ef      	bne.n	91a8 <nrfx_usbd_irq_handler+0x58>
    return 32U;
    91c8:	2420      	movs	r4, #32
    91ca:	e7ef      	b.n	91ac <nrfx_usbd_irq_handler+0x5c>
    usbd_dmareq_process();
    91cc:	f7ff fad8 	bl	8780 <usbd_dmareq_process>
    if (setup_active)
    91d0:	b906      	cbnz	r6, 91d4 <nrfx_usbd_irq_handler+0x84>
}
    91d2:	bd70      	pop	{r4, r5, r6, pc}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    91d4:	f7ff fee8 	bl	8fa8 <ev_setup_handler>
}
    91d8:	e7fb      	b.n	91d2 <nrfx_usbd_irq_handler+0x82>
    91da:	bf00      	nop
    91dc:	40027000 	.word	0x40027000
    91e0:	0000f8b0 	.word	0x0000f8b0

000091e4 <nrfx_usbd_ep_enable>:
{
    91e4:	b538      	push	{r3, r4, r5, lr}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    91e6:	b244      	sxtb	r4, r0
    91e8:	2c00      	cmp	r4, #0
    91ea:	db22      	blt.n	9232 <nrfx_usbd_ep_enable+0x4e>
    91ec:	4b26      	ldr	r3, [pc, #152]	; (9288 <nrfx_usbd_ep_enable+0xa4>)
    91ee:	f000 010f 	and.w	r1, r0, #15
    91f2:	5c5a      	ldrb	r2, [r3, r1]
    91f4:	2301      	movs	r3, #1
    91f6:	4093      	lsls	r3, r2
    p_reg->INTENSET = mask;
    91f8:	4a24      	ldr	r2, [pc, #144]	; (928c <nrfx_usbd_ep_enable+0xa8>)
    91fa:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    if (NRF_USBD_EPIN_CHECK(ep))
    91fe:	2c00      	cmp	r4, #0
    9200:	db19      	blt.n	9236 <nrfx_usbd_ep_enable+0x52>
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
    9202:	4b22      	ldr	r3, [pc, #136]	; (928c <nrfx_usbd_ep_enable+0xa8>)
    9204:	f8d3 3514 	ldr.w	r3, [r3, #1300]	; 0x514
    9208:	40cb      	lsrs	r3, r1
    920a:	f003 0301 	and.w	r3, r3, #1
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    920e:	b97b      	cbnz	r3, 9230 <nrfx_usbd_ep_enable+0x4c>
    if (NRF_USBD_EPIN_CHECK(ep))
    9210:	2c00      	cmp	r4, #0
    9212:	db16      	blt.n	9242 <nrfx_usbd_ep_enable+0x5e>
        p_reg->EPOUTEN |= 1UL << epnr;
    9214:	4d1d      	ldr	r5, [pc, #116]	; (928c <nrfx_usbd_ep_enable+0xa8>)
    9216:	f8d5 3514 	ldr.w	r3, [r5, #1300]	; 0x514
    921a:	2201      	movs	r2, #1
    921c:	408a      	lsls	r2, r1
    921e:	4313      	orrs	r3, r2
    9220:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    9224:	b121      	cbz	r1, 9230 <nrfx_usbd_ep_enable+0x4c>
    9226:	2c00      	cmp	r4, #0
    9228:	db02      	blt.n	9230 <nrfx_usbd_ep_enable+0x4c>
        NRF_USBD_EPOUT_CHECK(ep) &&
    922a:	f010 0f08 	tst.w	r0, #8
    922e:	d011      	beq.n	9254 <nrfx_usbd_ep_enable+0x70>
}
    9230:	bd38      	pop	{r3, r4, r5, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    9232:	4b17      	ldr	r3, [pc, #92]	; (9290 <nrfx_usbd_ep_enable+0xac>)
    9234:	e7db      	b.n	91ee <nrfx_usbd_ep_enable+0xa>
        return 0 != (p_reg->EPINEN & (1UL << epnr));
    9236:	f8d2 3510 	ldr.w	r3, [r2, #1296]	; 0x510
    923a:	40cb      	lsrs	r3, r1
    923c:	f003 0301 	and.w	r3, r3, #1
    9240:	e7e5      	b.n	920e <nrfx_usbd_ep_enable+0x2a>
        p_reg->EPINEN |= 1UL << epnr;
    9242:	4d12      	ldr	r5, [pc, #72]	; (928c <nrfx_usbd_ep_enable+0xa8>)
    9244:	f8d5 3510 	ldr.w	r3, [r5, #1296]	; 0x510
    9248:	2201      	movs	r2, #1
    924a:	408a      	lsls	r2, r1
    924c:	4313      	orrs	r3, r2
    924e:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
    9252:	e7e7      	b.n	9224 <nrfx_usbd_ep_enable+0x40>
	__asm__ volatile(
    9254:	f04f 0320 	mov.w	r3, #32
    9258:	f3ef 8511 	mrs	r5, BASEPRI
    925c:	f383 8812 	msr	BASEPRI_MAX, r3
    9260:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    9264:	f7ff fe6e 	bl	8f44 <nrfx_usbd_transfer_out_drop>
    return NRFX_USBD_EP_BITPOS(ep);
    9268:	f004 040f 	and.w	r4, r4, #15
    926c:	3410      	adds	r4, #16
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    926e:	2301      	movs	r3, #1
    9270:	fa03 f404 	lsl.w	r4, r3, r4
    9274:	4a07      	ldr	r2, [pc, #28]	; (9294 <nrfx_usbd_ep_enable+0xb0>)
    9276:	6813      	ldr	r3, [r2, #0]
    9278:	ea23 0304 	bic.w	r3, r3, r4
    927c:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    927e:	f385 8811 	msr	BASEPRI, r5
    9282:	f3bf 8f6f 	isb	sy
}
    9286:	e7d3      	b.n	9230 <nrfx_usbd_ep_enable+0x4c>
    9288:	0000f890 	.word	0x0000f890
    928c:	40027000 	.word	0x40027000
    9290:	0000f870 	.word	0x0000f870
    9294:	20001e5c 	.word	0x20001e5c

00009298 <nrfx_usbd_ep_stall_clear>:
{
    9298:	b510      	push	{r4, lr}
    929a:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    929c:	f010 0f80 	tst.w	r0, #128	; 0x80
    92a0:	d003      	beq.n	92aa <nrfx_usbd_ep_stall_clear+0x12>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    92a2:	4b06      	ldr	r3, [pc, #24]	; (92bc <nrfx_usbd_ep_stall_clear+0x24>)
    92a4:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
    92a8:	bd10      	pop	{r4, pc}
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    92aa:	f7ff fd8b 	bl	8dc4 <nrfx_usbd_ep_stall_check>
    92ae:	2800      	cmp	r0, #0
    92b0:	d0f7      	beq.n	92a2 <nrfx_usbd_ep_stall_clear+0xa>
        nrfx_usbd_transfer_out_drop(ep);
    92b2:	4620      	mov	r0, r4
    92b4:	f7ff fe46 	bl	8f44 <nrfx_usbd_transfer_out_drop>
    92b8:	e7f3      	b.n	92a2 <nrfx_usbd_ep_stall_clear+0xa>
    92ba:	bf00      	nop
    92bc:	40027000 	.word	0x40027000

000092c0 <usbd_ep_abort_all>:
{
    92c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    92c2:	b083      	sub	sp, #12
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    92c4:	4b59      	ldr	r3, [pc, #356]	; (942c <usbd_ep_abort_all+0x16c>)
    92c6:	885b      	ldrh	r3, [r3, #2]
    92c8:	4a59      	ldr	r2, [pc, #356]	; (9430 <usbd_ep_abort_all+0x170>)
    92ca:	6815      	ldr	r5, [r2, #0]
    92cc:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    while (0 != ep_waiting)
    92d0:	e016      	b.n	9300 <usbd_ep_abort_all+0x40>
    92d2:	2420      	movs	r4, #32
    92d4:	e01f      	b.n	9316 <usbd_ep_abort_all+0x56>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    92d6:	f044 0380 	orr.w	r3, r4, #128	; 0x80
    92da:	e01f      	b.n	931c <usbd_ep_abort_all+0x5c>
    92dc:	f044 0080 	orr.w	r0, r4, #128	; 0x80
    92e0:	e024      	b.n	932c <usbd_ep_abort_all+0x6c>
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    92e2:	4e54      	ldr	r6, [pc, #336]	; (9434 <usbd_ep_abort_all+0x174>)
    92e4:	e02e      	b.n	9344 <usbd_ep_abort_all+0x84>
            nrfx_usbd_transfer_out_drop(ep);
    92e6:	f7ff fe2d 	bl	8f44 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
    92ea:	2303      	movs	r3, #3
    92ec:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
    92ee:	f387 8811 	msr	BASEPRI, r7
    92f2:	f3bf 8f6f 	isb	sy
        ep_waiting &= ~(1U << bitpos);
    92f6:	2301      	movs	r3, #1
    92f8:	fa03 f404 	lsl.w	r4, r3, r4
    92fc:	ea25 0504 	bic.w	r5, r5, r4
    while (0 != ep_waiting)
    9300:	2d00      	cmp	r5, #0
    9302:	f000 808c 	beq.w	941e <usbd_ep_abort_all+0x15e>
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    9306:	fa95 f4a5 	rbit	r4, r5
  if (value == 0U)
    930a:	2c00      	cmp	r4, #0
    930c:	d0e1      	beq.n	92d2 <usbd_ep_abort_all+0x12>
  return __builtin_clz(value);
    930e:	fab4 f484 	clz	r4, r4
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9312:	2c0f      	cmp	r4, #15
    9314:	d9df      	bls.n	92d6 <usbd_ep_abort_all+0x16>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    9316:	f1a4 0310 	sub.w	r3, r4, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    931a:	b2db      	uxtb	r3, r3
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    931c:	f013 0f08 	tst.w	r3, #8
    9320:	d1e9      	bne.n	92f6 <usbd_ep_abort_all+0x36>
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9322:	2c0f      	cmp	r4, #15
    9324:	d9da      	bls.n	92dc <usbd_ep_abort_all+0x1c>
        NRF_USBD_EPOUT(bitpos - NRFX_USBD_EPOUT_BITPOS_0) : NRF_USBD_EPIN(bitpos));
    9326:	f1a4 0010 	sub.w	r0, r4, #16
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    932a:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
    932c:	f04f 0320 	mov.w	r3, #32
    9330:	f3ef 8711 	mrs	r7, BASEPRI
    9334:	f383 8812 	msr	BASEPRI_MAX, r3
    9338:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    933c:	b243      	sxtb	r3, r0
    933e:	2b00      	cmp	r3, #0
    9340:	dbcf      	blt.n	92e2 <usbd_ep_abort_all+0x22>
    9342:	4e3d      	ldr	r6, [pc, #244]	; (9438 <usbd_ep_abort_all+0x178>)
        NRF_USBD_EP_NR_GET(ep));
    9344:	f000 020f 	and.w	r2, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9348:	eb06 1602 	add.w	r6, r6, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
    934c:	2b00      	cmp	r3, #0
    934e:	db19      	blt.n	9384 <usbd_ep_abort_all+0xc4>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    9350:	4a37      	ldr	r2, [pc, #220]	; (9430 <usbd_ep_abort_all+0x170>)
    9352:	6812      	ldr	r2, [r2, #0]
    9354:	43d2      	mvns	r2, r2
    return NRFX_USBD_EP_BITPOS(ep);
    9356:	f003 030f 	and.w	r3, r3, #15
    935a:	3310      	adds	r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    935c:	40da      	lsrs	r2, r3
    935e:	f012 0f01 	tst.w	r2, #1
    9362:	d1c0      	bne.n	92e6 <usbd_ep_abort_all+0x26>
            p_state->handler.consumer = NULL;
    9364:	2200      	movs	r2, #0
    9366:	6032      	str	r2, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    9368:	2201      	movs	r2, #1
    936a:	fa02 f303 	lsl.w	r3, r2, r3
    936e:	4930      	ldr	r1, [pc, #192]	; (9430 <usbd_ep_abort_all+0x170>)
    9370:	680a      	ldr	r2, [r1, #0]
    9372:	ea22 0203 	bic.w	r2, r2, r3
    9376:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    9378:	492c      	ldr	r1, [pc, #176]	; (942c <usbd_ep_abort_all+0x16c>)
    937a:	680a      	ldr	r2, [r1, #0]
    937c:	ea22 0303 	bic.w	r3, r2, r3
    9380:	600b      	str	r3, [r1, #0]
    9382:	e7b2      	b.n	92ea <usbd_ep_abort_all+0x2a>
        if(!NRF_USBD_EPISO_CHECK(ep))
    9384:	f010 0f08 	tst.w	r0, #8
    9388:	d111      	bne.n	93ae <usbd_ep_abort_all+0xee>
            if(ep != NRFX_USBD_EPIN0)
    938a:	2880      	cmp	r0, #128	; 0x80
    938c:	d037      	beq.n	93fe <usbd_ep_abort_all+0x13e>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    938e:	f202 32da 	addw	r2, r2, #986	; 0x3da
    9392:	0052      	lsls	r2, r2, #1
    9394:	4929      	ldr	r1, [pc, #164]	; (943c <usbd_ep_abort_all+0x17c>)
    9396:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    9398:	3104      	adds	r1, #4
    939a:	680a      	ldr	r2, [r1, #0]
    939c:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
    939e:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    93a2:	f8d1 c000 	ldr.w	ip, [r1]
    93a6:	ea42 020c 	orr.w	r2, r2, ip
    93aa:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    93ac:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    93ae:	4a1f      	ldr	r2, [pc, #124]	; (942c <usbd_ep_abort_all+0x16c>)
    93b0:	6811      	ldr	r1, [r2, #0]
    93b2:	4a1f      	ldr	r2, [pc, #124]	; (9430 <usbd_ep_abort_all+0x170>)
    93b4:	f8d2 c000 	ldr.w	ip, [r2]
    93b8:	ea6c 0e01 	orn	lr, ip, r1
    return NRFX_USBD_EP_BITPOS(ep);
    93bc:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    93c0:	2201      	movs	r2, #1
    93c2:	fa02 f303 	lsl.w	r3, r2, r3
    93c6:	ea1e 0f03 	tst.w	lr, r3
    93ca:	d090      	beq.n	92ee <usbd_ep_abort_all+0x2e>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    93cc:	ea2c 0203 	bic.w	r2, ip, r3
    93d0:	f8df c05c 	ldr.w	ip, [pc, #92]	; 9430 <usbd_ep_abort_all+0x170>
    93d4:	f8cc 2000 	str.w	r2, [ip]
            m_ep_ready       |=   1U << ep2bit(ep) ;
    93d8:	430b      	orrs	r3, r1
    93da:	4a14      	ldr	r2, [pc, #80]	; (942c <usbd_ep_abort_all+0x16c>)
    93dc:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
    93de:	2300      	movs	r3, #0
    93e0:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    93e2:	2303      	movs	r3, #3
    93e4:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    93e6:	2206      	movs	r2, #6
    93e8:	f88d 2004 	strb.w	r2, [sp, #4]
    93ec:	f88d 0006 	strb.w	r0, [sp, #6]
    93f0:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    93f4:	4b12      	ldr	r3, [pc, #72]	; (9440 <usbd_ep_abort_all+0x180>)
    93f6:	681b      	ldr	r3, [r3, #0]
    93f8:	a801      	add	r0, sp, #4
    93fa:	4798      	blx	r3
    93fc:	e777      	b.n	92ee <usbd_ep_abort_all+0x2e>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    93fe:	4a0f      	ldr	r2, [pc, #60]	; (943c <usbd_ep_abort_all+0x17c>)
    9400:	f240 71b4 	movw	r1, #1972	; 0x7b4
    9404:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    9406:	490f      	ldr	r1, [pc, #60]	; (9444 <usbd_ep_abort_all+0x184>)
    9408:	680a      	ldr	r2, [r1, #0]
    940a:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
    940c:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    9410:	f8d1 c000 	ldr.w	ip, [r1]
    9414:	ea42 020c 	orr.w	r2, r2, ip
    9418:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    941a:	680a      	ldr	r2, [r1, #0]
    941c:	e7c7      	b.n	93ae <usbd_ep_abort_all+0xee>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    941e:	4b03      	ldr	r3, [pc, #12]	; (942c <usbd_ep_abort_all+0x16c>)
    9420:	f240 12ff 	movw	r2, #511	; 0x1ff
    9424:	601a      	str	r2, [r3, #0]
}
    9426:	b003      	add	sp, #12
    9428:	bdf0      	pop	{r4, r5, r6, r7, pc}
    942a:	bf00      	nop
    942c:	20001ecc 	.word	0x20001ecc
    9430:	20001e5c 	.word	0x20001e5c
    9434:	20001f60 	.word	0x20001f60
    9438:	20001ed0 	.word	0x20001ed0
    943c:	40027800 	.word	0x40027800
    9440:	20001ff0 	.word	0x20001ff0
    9444:	40027804 	.word	0x40027804

00009448 <nrfx_usbd_stop>:
{
    9448:	b510      	push	{r4, lr}
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    944a:	4b0c      	ldr	r3, [pc, #48]	; (947c <nrfx_usbd_stop+0x34>)
    944c:	2280      	movs	r2, #128	; 0x80
    944e:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    9452:	2027      	movs	r0, #39	; 0x27
    9454:	f7fa fbb6 	bl	3bc4 <arch_irq_is_enabled>
    9458:	b900      	cbnz	r0, 945c <nrfx_usbd_stop+0x14>
}
    945a:	bd10      	pop	{r4, pc}
        usbd_ep_abort_all();
    945c:	f7ff ff30 	bl	92c0 <usbd_ep_abort_all>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    9460:	4c07      	ldr	r4, [pc, #28]	; (9480 <nrfx_usbd_stop+0x38>)
    9462:	2300      	movs	r3, #0
    9464:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    9468:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
    946c:	2027      	movs	r0, #39	; 0x27
    946e:	f7fa fb95 	bl	3b9c <arch_irq_disable>
    p_reg->INTENCLR = mask;
    9472:	f04f 33ff 	mov.w	r3, #4294967295
    9476:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
    947a:	e7ee      	b.n	945a <nrfx_usbd_stop+0x12>
    947c:	e000e100 	.word	0xe000e100
    9480:	40027000 	.word	0x40027000

00009484 <nrfx_usbd_disable>:
{
    9484:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
    9486:	f7ff ffdf 	bl	9448 <nrfx_usbd_stop>
    return p_reg->INTENSET;
    948a:	4b0b      	ldr	r3, [pc, #44]	; (94b8 <nrfx_usbd_disable+0x34>)
    948c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
    9490:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    9494:	2200      	movs	r2, #0
    9496:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    949a:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    949e:	f7fe faff 	bl	7aa0 <nrf52_errata_199>
    if (nrfx_usbd_errata_199())
    94a2:	b110      	cbz	r0, 94aa <nrfx_usbd_disable+0x26>
        *((volatile uint32_t *)0x40027C1C) = 0x00000000;
    94a4:	4b05      	ldr	r3, [pc, #20]	; (94bc <nrfx_usbd_disable+0x38>)
    94a6:	2200      	movs	r2, #0
    94a8:	601a      	str	r2, [r3, #0]
    m_dma_pending = false;
    94aa:	4b05      	ldr	r3, [pc, #20]	; (94c0 <nrfx_usbd_disable+0x3c>)
    94ac:	2200      	movs	r2, #0
    94ae:	701a      	strb	r2, [r3, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    94b0:	4b04      	ldr	r3, [pc, #16]	; (94c4 <nrfx_usbd_disable+0x40>)
    94b2:	2201      	movs	r2, #1
    94b4:	701a      	strb	r2, [r3, #0]
}
    94b6:	bd08      	pop	{r3, pc}
    94b8:	40027000 	.word	0x40027000
    94bc:	40027c1c 	.word	0x40027c1c
    94c0:	20002553 	.word	0x20002553
    94c4:	20002554 	.word	0x20002554

000094c8 <nrfx_usbd_suspend>:
{
    94c8:	b538      	push	{r3, r4, r5, lr}
    94ca:	f04f 0320 	mov.w	r3, #32
    94ce:	f3ef 8511 	mrs	r5, BASEPRI
    94d2:	f383 8812 	msr	BASEPRI_MAX, r3
    94d6:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
    94da:	4b13      	ldr	r3, [pc, #76]	; (9528 <nrfx_usbd_suspend+0x60>)
    94dc:	781b      	ldrb	r3, [r3, #0]
    94de:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    94e2:	b92b      	cbnz	r3, 94f0 <nrfx_usbd_suspend+0x28>
	__asm__ volatile(
    94e4:	f385 8811 	msr	BASEPRI, r5
    94e8:	f3bf 8f6f 	isb	sy
}
    94ec:	4620      	mov	r0, r4
    94ee:	bd38      	pop	{r3, r4, r5, pc}
        usbd_ep_abort_all();
    94f0:	f7ff fee6 	bl	92c0 <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
    94f4:	4b0d      	ldr	r3, [pc, #52]	; (952c <nrfx_usbd_suspend+0x64>)
    94f6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    94fa:	f413 7f00 	tst.w	r3, #512	; 0x200
    94fe:	d111      	bne.n	9524 <nrfx_usbd_suspend+0x5c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    9500:	4b0a      	ldr	r3, [pc, #40]	; (952c <nrfx_usbd_suspend+0x64>)
    9502:	2201      	movs	r2, #1
    9504:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    9508:	f8d3 252c 	ldr.w	r2, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
    950c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    9510:	f413 7f00 	tst.w	r3, #512	; 0x200
    9514:	d0e6      	beq.n	94e4 <nrfx_usbd_suspend+0x1c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    9516:	4b05      	ldr	r3, [pc, #20]	; (952c <nrfx_usbd_suspend+0x64>)
    9518:	2400      	movs	r4, #0
    951a:	f8c3 452c 	str.w	r4, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    951e:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
}
    9522:	e7df      	b.n	94e4 <nrfx_usbd_suspend+0x1c>
    bool suspended = false;
    9524:	2400      	movs	r4, #0
    9526:	e7dd      	b.n	94e4 <nrfx_usbd_suspend+0x1c>
    9528:	20002552 	.word	0x20002552
    952c:	40027000 	.word	0x40027000

00009530 <nrfx_usbd_ep_abort>:
{
    9530:	b5f0      	push	{r4, r5, r6, r7, lr}
    9532:	b083      	sub	sp, #12
	__asm__ volatile(
    9534:	f04f 0320 	mov.w	r3, #32
    9538:	f3ef 8511 	mrs	r5, BASEPRI
    953c:	f383 8812 	msr	BASEPRI_MAX, r3
    9540:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9544:	b243      	sxtb	r3, r0
    9546:	2b00      	cmp	r3, #0
    9548:	db27      	blt.n	959a <nrfx_usbd_ep_abort+0x6a>
    954a:	4c39      	ldr	r4, [pc, #228]	; (9630 <nrfx_usbd_ep_abort+0x100>)
        NRF_USBD_EP_NR_GET(ep));
    954c:	f000 020f 	and.w	r2, r0, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9550:	eb04 1402 	add.w	r4, r4, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
    9554:	2b00      	cmp	r3, #0
    9556:	db25      	blt.n	95a4 <nrfx_usbd_ep_abort+0x74>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    9558:	4a36      	ldr	r2, [pc, #216]	; (9634 <nrfx_usbd_ep_abort+0x104>)
    955a:	6812      	ldr	r2, [r2, #0]
    955c:	43d2      	mvns	r2, r2
    return NRFX_USBD_EP_BITPOS(ep);
    955e:	f003 030f 	and.w	r3, r3, #15
    9562:	3310      	adds	r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    9564:	40da      	lsrs	r2, r3
    9566:	f012 0f01 	tst.w	r2, #1
    956a:	d118      	bne.n	959e <nrfx_usbd_ep_abort+0x6e>
            p_state->handler.consumer = NULL;
    956c:	2200      	movs	r2, #0
    956e:	6022      	str	r2, [r4, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    9570:	2201      	movs	r2, #1
    9572:	fa02 f303 	lsl.w	r3, r2, r3
    9576:	492f      	ldr	r1, [pc, #188]	; (9634 <nrfx_usbd_ep_abort+0x104>)
    9578:	680a      	ldr	r2, [r1, #0]
    957a:	ea22 0203 	bic.w	r2, r2, r3
    957e:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    9580:	492d      	ldr	r1, [pc, #180]	; (9638 <nrfx_usbd_ep_abort+0x108>)
    9582:	680a      	ldr	r2, [r1, #0]
    9584:	ea22 0303 	bic.w	r3, r2, r3
    9588:	600b      	str	r3, [r1, #0]
        p_state->status = NRFX_USBD_EP_ABORTED;
    958a:	2303      	movs	r3, #3
    958c:	73a3      	strb	r3, [r4, #14]
	__asm__ volatile(
    958e:	f385 8811 	msr	BASEPRI, r5
    9592:	f3bf 8f6f 	isb	sy
}
    9596:	b003      	add	sp, #12
    9598:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    959a:	4c28      	ldr	r4, [pc, #160]	; (963c <nrfx_usbd_ep_abort+0x10c>)
    959c:	e7d6      	b.n	954c <nrfx_usbd_ep_abort+0x1c>
            nrfx_usbd_transfer_out_drop(ep);
    959e:	f7ff fcd1 	bl	8f44 <nrfx_usbd_transfer_out_drop>
    95a2:	e7f2      	b.n	958a <nrfx_usbd_ep_abort+0x5a>
        if(!NRF_USBD_EPISO_CHECK(ep))
    95a4:	f010 0f08 	tst.w	r0, #8
    95a8:	d10f      	bne.n	95ca <nrfx_usbd_ep_abort+0x9a>
            if(ep != NRFX_USBD_EPIN0)
    95aa:	2880      	cmp	r0, #128	; 0x80
    95ac:	d031      	beq.n	9612 <nrfx_usbd_ep_abort+0xe2>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    95ae:	f202 32da 	addw	r2, r2, #986	; 0x3da
    95b2:	0052      	lsls	r2, r2, #1
    95b4:	4922      	ldr	r1, [pc, #136]	; (9640 <nrfx_usbd_ep_abort+0x110>)
    95b6:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    95b8:	3104      	adds	r1, #4
    95ba:	680a      	ldr	r2, [r1, #0]
    95bc:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
    95be:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    95c2:	680e      	ldr	r6, [r1, #0]
    95c4:	4332      	orrs	r2, r6
    95c6:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    95c8:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    95ca:	4a1b      	ldr	r2, [pc, #108]	; (9638 <nrfx_usbd_ep_abort+0x108>)
    95cc:	6811      	ldr	r1, [r2, #0]
    95ce:	4a19      	ldr	r2, [pc, #100]	; (9634 <nrfx_usbd_ep_abort+0x104>)
    95d0:	6816      	ldr	r6, [r2, #0]
    95d2:	ea66 0701 	orn	r7, r6, r1
    return NRFX_USBD_EP_BITPOS(ep);
    95d6:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    95da:	2201      	movs	r2, #1
    95dc:	fa02 f303 	lsl.w	r3, r2, r3
    95e0:	421f      	tst	r7, r3
    95e2:	d0d4      	beq.n	958e <nrfx_usbd_ep_abort+0x5e>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    95e4:	ea26 0603 	bic.w	r6, r6, r3
    95e8:	4a12      	ldr	r2, [pc, #72]	; (9634 <nrfx_usbd_ep_abort+0x104>)
    95ea:	6016      	str	r6, [r2, #0]
            m_ep_ready       |=   1U << ep2bit(ep) ;
    95ec:	430b      	orrs	r3, r1
    95ee:	4a12      	ldr	r2, [pc, #72]	; (9638 <nrfx_usbd_ep_abort+0x108>)
    95f0:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
    95f2:	2300      	movs	r3, #0
    95f4:	6023      	str	r3, [r4, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    95f6:	2303      	movs	r3, #3
    95f8:	73a3      	strb	r3, [r4, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    95fa:	2206      	movs	r2, #6
    95fc:	f88d 2004 	strb.w	r2, [sp, #4]
    9600:	f88d 0006 	strb.w	r0, [sp, #6]
    9604:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    9608:	4b0e      	ldr	r3, [pc, #56]	; (9644 <nrfx_usbd_ep_abort+0x114>)
    960a:	681b      	ldr	r3, [r3, #0]
    960c:	a801      	add	r0, sp, #4
    960e:	4798      	blx	r3
    9610:	e7bd      	b.n	958e <nrfx_usbd_ep_abort+0x5e>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    9612:	4a0b      	ldr	r2, [pc, #44]	; (9640 <nrfx_usbd_ep_abort+0x110>)
    9614:	f240 71b4 	movw	r1, #1972	; 0x7b4
    9618:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    961a:	490b      	ldr	r1, [pc, #44]	; (9648 <nrfx_usbd_ep_abort+0x118>)
    961c:	680a      	ldr	r2, [r1, #0]
    961e:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
    9620:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    9624:	680e      	ldr	r6, [r1, #0]
    9626:	4332      	orrs	r2, r6
    9628:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    962a:	680a      	ldr	r2, [r1, #0]
    962c:	e7cd      	b.n	95ca <nrfx_usbd_ep_abort+0x9a>
    962e:	bf00      	nop
    9630:	20001ed0 	.word	0x20001ed0
    9634:	20001e5c 	.word	0x20001e5c
    9638:	20001ecc 	.word	0x20001ecc
    963c:	20001f60 	.word	0x20001f60
    9640:	40027800 	.word	0x40027800
    9644:	20001ff0 	.word	0x20001ff0
    9648:	40027804 	.word	0x40027804

0000964c <nrfx_usbd_ep_disable>:
{
    964c:	b5f0      	push	{r4, r5, r6, r7, lr}
    964e:	b083      	sub	sp, #12
    9650:	4604      	mov	r4, r0
	__asm__ volatile(
    9652:	f04f 0320 	mov.w	r3, #32
    9656:	f3ef 8611 	mrs	r6, BASEPRI
    965a:	f383 8812 	msr	BASEPRI_MAX, r3
    965e:	f3bf 8f6f 	isb	sy
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    9662:	b243      	sxtb	r3, r0
    9664:	2b00      	cmp	r3, #0
    9666:	db3e      	blt.n	96e6 <nrfx_usbd_ep_disable+0x9a>
    9668:	4d4a      	ldr	r5, [pc, #296]	; (9794 <nrfx_usbd_ep_disable+0x148>)
        NRF_USBD_EP_NR_GET(ep));
    966a:	f004 020f 	and.w	r2, r4, #15
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    966e:	eb05 1502 	add.w	r5, r5, r2, lsl #4
    if (NRF_USBD_EPOUT_CHECK(ep))
    9672:	2b00      	cmp	r3, #0
    9674:	db3d      	blt.n	96f2 <nrfx_usbd_ep_disable+0xa6>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    9676:	4a48      	ldr	r2, [pc, #288]	; (9798 <nrfx_usbd_ep_disable+0x14c>)
    9678:	6812      	ldr	r2, [r2, #0]
    967a:	43d2      	mvns	r2, r2
    return NRFX_USBD_EP_BITPOS(ep);
    967c:	f003 030f 	and.w	r3, r3, #15
    9680:	3310      	adds	r3, #16
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    9682:	40da      	lsrs	r2, r3
    9684:	f012 0f01 	tst.w	r2, #1
    9688:	d12f      	bne.n	96ea <nrfx_usbd_ep_disable+0x9e>
            p_state->handler.consumer = NULL;
    968a:	2200      	movs	r2, #0
    968c:	602a      	str	r2, [r5, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    968e:	2201      	movs	r2, #1
    9690:	fa02 f303 	lsl.w	r3, r2, r3
    9694:	4940      	ldr	r1, [pc, #256]	; (9798 <nrfx_usbd_ep_disable+0x14c>)
    9696:	680a      	ldr	r2, [r1, #0]
    9698:	ea22 0203 	bic.w	r2, r2, r3
    969c:	600a      	str	r2, [r1, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    969e:	493f      	ldr	r1, [pc, #252]	; (979c <nrfx_usbd_ep_disable+0x150>)
    96a0:	680a      	ldr	r2, [r1, #0]
    96a2:	ea22 0303 	bic.w	r3, r2, r3
    96a6:	600b      	str	r3, [r1, #0]
        p_state->status = NRFX_USBD_EP_ABORTED;
    96a8:	2303      	movs	r3, #3
    96aa:	73ab      	strb	r3, [r5, #14]
	__asm__ volatile(
    96ac:	f386 8811 	msr	BASEPRI, r6
    96b0:	f3bf 8f6f 	isb	sy
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    96b4:	f004 030f 	and.w	r3, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    96b8:	b264      	sxtb	r4, r4
    96ba:	2c00      	cmp	r4, #0
    96bc:	db5e      	blt.n	977c <nrfx_usbd_ep_disable+0x130>
        p_reg->EPOUTEN &= ~(1UL << epnr);
    96be:	4838      	ldr	r0, [pc, #224]	; (97a0 <nrfx_usbd_ep_disable+0x154>)
    96c0:	f8d0 2514 	ldr.w	r2, [r0, #1300]	; 0x514
    96c4:	2101      	movs	r1, #1
    96c6:	4099      	lsls	r1, r3
    96c8:	ea22 0201 	bic.w	r2, r2, r1
    96cc:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    96d0:	2c00      	cmp	r4, #0
    96d2:	db5d      	blt.n	9790 <nrfx_usbd_ep_disable+0x144>
    96d4:	4a33      	ldr	r2, [pc, #204]	; (97a4 <nrfx_usbd_ep_disable+0x158>)
    96d6:	5cd2      	ldrb	r2, [r2, r3]
    96d8:	2301      	movs	r3, #1
    96da:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
    96dc:	4a30      	ldr	r2, [pc, #192]	; (97a0 <nrfx_usbd_ep_disable+0x154>)
    96de:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    96e2:	b003      	add	sp, #12
    96e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    96e6:	4d30      	ldr	r5, [pc, #192]	; (97a8 <nrfx_usbd_ep_disable+0x15c>)
    96e8:	e7bf      	b.n	966a <nrfx_usbd_ep_disable+0x1e>
            nrfx_usbd_transfer_out_drop(ep);
    96ea:	4620      	mov	r0, r4
    96ec:	f7ff fc2a 	bl	8f44 <nrfx_usbd_transfer_out_drop>
    96f0:	e7da      	b.n	96a8 <nrfx_usbd_ep_disable+0x5c>
        if(!NRF_USBD_EPISO_CHECK(ep))
    96f2:	f014 0f08 	tst.w	r4, #8
    96f6:	d10f      	bne.n	9718 <nrfx_usbd_ep_disable+0xcc>
            if(ep != NRFX_USBD_EPIN0)
    96f8:	2c80      	cmp	r4, #128	; 0x80
    96fa:	d031      	beq.n	9760 <nrfx_usbd_ep_disable+0x114>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    96fc:	f202 32da 	addw	r2, r2, #986	; 0x3da
    9700:	0052      	lsls	r2, r2, #1
    9702:	492a      	ldr	r1, [pc, #168]	; (97ac <nrfx_usbd_ep_disable+0x160>)
    9704:	600a      	str	r2, [r1, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    9706:	3104      	adds	r1, #4
    9708:	680a      	ldr	r2, [r1, #0]
    970a:	b2d2      	uxtb	r2, r2
                temp |= (1U << 1);
    970c:	f042 0202 	orr.w	r2, r2, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    9710:	6808      	ldr	r0, [r1, #0]
    9712:	4302      	orrs	r2, r0
    9714:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    9716:	680a      	ldr	r2, [r1, #0]
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    9718:	4a20      	ldr	r2, [pc, #128]	; (979c <nrfx_usbd_ep_disable+0x150>)
    971a:	6811      	ldr	r1, [r2, #0]
    971c:	4a1e      	ldr	r2, [pc, #120]	; (9798 <nrfx_usbd_ep_disable+0x14c>)
    971e:	6810      	ldr	r0, [r2, #0]
    9720:	ea60 0701 	orn	r7, r0, r1
    return NRFX_USBD_EP_BITPOS(ep);
    9724:	f003 030f 	and.w	r3, r3, #15
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    9728:	2201      	movs	r2, #1
    972a:	fa02 f303 	lsl.w	r3, r2, r3
    972e:	421f      	tst	r7, r3
    9730:	d0bc      	beq.n	96ac <nrfx_usbd_ep_disable+0x60>
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    9732:	ea20 0003 	bic.w	r0, r0, r3
    9736:	4a18      	ldr	r2, [pc, #96]	; (9798 <nrfx_usbd_ep_disable+0x14c>)
    9738:	6010      	str	r0, [r2, #0]
            m_ep_ready       |=   1U << ep2bit(ep) ;
    973a:	430b      	orrs	r3, r1
    973c:	4a17      	ldr	r2, [pc, #92]	; (979c <nrfx_usbd_ep_disable+0x150>)
    973e:	6013      	str	r3, [r2, #0]
            p_state->handler.feeder = NULL;
    9740:	2300      	movs	r3, #0
    9742:	602b      	str	r3, [r5, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    9744:	2303      	movs	r3, #3
    9746:	73ab      	strb	r3, [r5, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    9748:	2206      	movs	r2, #6
    974a:	f88d 2004 	strb.w	r2, [sp, #4]
    974e:	f88d 4006 	strb.w	r4, [sp, #6]
    9752:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    9756:	4b16      	ldr	r3, [pc, #88]	; (97b0 <nrfx_usbd_ep_disable+0x164>)
    9758:	681b      	ldr	r3, [r3, #0]
    975a:	a801      	add	r0, sp, #4
    975c:	4798      	blx	r3
    975e:	e7a5      	b.n	96ac <nrfx_usbd_ep_disable+0x60>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    9760:	4a12      	ldr	r2, [pc, #72]	; (97ac <nrfx_usbd_ep_disable+0x160>)
    9762:	f240 71b4 	movw	r1, #1972	; 0x7b4
    9766:	6011      	str	r1, [r2, #0]
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    9768:	4912      	ldr	r1, [pc, #72]	; (97b4 <nrfx_usbd_ep_disable+0x168>)
    976a:	680a      	ldr	r2, [r1, #0]
    976c:	b2d2      	uxtb	r2, r2
                temp |= (1U << 2);
    976e:	f042 0204 	orr.w	r2, r2, #4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    9772:	6808      	ldr	r0, [r1, #0]
    9774:	4302      	orrs	r2, r0
    9776:	600a      	str	r2, [r1, #0]
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    9778:	680a      	ldr	r2, [r1, #0]
    977a:	e7cd      	b.n	9718 <nrfx_usbd_ep_disable+0xcc>
        p_reg->EPINEN &= ~(1UL << epnr);
    977c:	4808      	ldr	r0, [pc, #32]	; (97a0 <nrfx_usbd_ep_disable+0x154>)
    977e:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    9782:	2101      	movs	r1, #1
    9784:	4099      	lsls	r1, r3
    9786:	ea22 0201 	bic.w	r2, r2, r1
    978a:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    978e:	e79f      	b.n	96d0 <nrfx_usbd_ep_disable+0x84>
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    9790:	4a09      	ldr	r2, [pc, #36]	; (97b8 <nrfx_usbd_ep_disable+0x16c>)
    9792:	e7a0      	b.n	96d6 <nrfx_usbd_ep_disable+0x8a>
    9794:	20001ed0 	.word	0x20001ed0
    9798:	20001e5c 	.word	0x20001e5c
    979c:	20001ecc 	.word	0x20001ecc
    97a0:	40027000 	.word	0x40027000
    97a4:	0000f890 	.word	0x0000f890
    97a8:	20001f60 	.word	0x20001f60
    97ac:	40027800 	.word	0x40027800
    97b0:	20001ff0 	.word	0x20001ff0
    97b4:	40027804 	.word	0x40027804
    97b8:	0000f870 	.word	0x0000f870

000097bc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    97bc:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    97be:	4c11      	ldr	r4, [pc, #68]	; (9804 <_DoInit+0x48>)
    97c0:	2303      	movs	r3, #3
    97c2:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    97c4:	6163      	str	r3, [r4, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    97c6:	4a10      	ldr	r2, [pc, #64]	; (9808 <_DoInit+0x4c>)
    97c8:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    97ca:	4b10      	ldr	r3, [pc, #64]	; (980c <_DoInit+0x50>)
    97cc:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    97ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
    97d2:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    97d4:	2300      	movs	r3, #0
    97d6:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    97d8:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    97da:	62e3      	str	r3, [r4, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    97dc:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    97de:	4a0c      	ldr	r2, [pc, #48]	; (9810 <_DoInit+0x54>)
    97e0:	6662      	str	r2, [r4, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    97e2:	2210      	movs	r2, #16
    97e4:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    97e6:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    97e8:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    97ea:	6763      	str	r3, [r4, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    97ec:	4909      	ldr	r1, [pc, #36]	; (9814 <_DoInit+0x58>)
    97ee:	1de0      	adds	r0, r4, #7
    97f0:	f003 fc14 	bl	d01c <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    97f4:	4908      	ldr	r1, [pc, #32]	; (9818 <_DoInit+0x5c>)
    97f6:	4620      	mov	r0, r4
    97f8:	f003 fc10 	bl	d01c <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    97fc:	2320      	movs	r3, #32
    97fe:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    9800:	bd10      	pop	{r4, pc}
    9802:	bf00      	nop
    9804:	20002034 	.word	0x20002034
    9808:	0000f914 	.word	0x0000f914
    980c:	200020ec 	.word	0x200020ec
    9810:	200020dc 	.word	0x200020dc
    9814:	0000f920 	.word	0x0000f920
    9818:	0000f924 	.word	0x0000f924

0000981c <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    981c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9820:	4604      	mov	r4, r0
    9822:	460e      	mov	r6, r1
    9824:	4615      	mov	r5, r2
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    9826:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    982a:	4a2d      	ldr	r2, [pc, #180]	; (98e0 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    982c:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
    9830:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    9832:	6a57      	ldr	r7, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    9834:	42bb      	cmp	r3, r7
    9836:	d84b      	bhi.n	98d0 <SEGGER_RTT_WriteSkipNoLock+0xb4>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    9838:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    983c:	4928      	ldr	r1, [pc, #160]	; (98e0 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    983e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
    9842:	f8d2 8020 	ldr.w	r8, [r2, #32]
    9846:	eba8 0907 	sub.w	r9, r8, r7
    984a:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
    984e:	4295      	cmp	r5, r2
    9850:	d904      	bls.n	985c <SEGGER_RTT_WriteSkipNoLock+0x40>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
      return 1;
    }
    Avail += RdOff;                                     // Space incl. wrap-around
    9852:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    9854:	429d      	cmp	r5, r3
    9856:	d916      	bls.n	9886 <SEGGER_RTT_WriteSkipNoLock+0x6a>
    Avail = RdOff - WrOff - 1u;
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
    9858:	2000      	movs	r0, #0
    985a:	e03e      	b.n	98da <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    985c:	f8df 8080 	ldr.w	r8, [pc, #128]	; 98e0 <SEGGER_RTT_WriteSkipNoLock+0xc4>
    9860:	1c63      	adds	r3, r4, #1
    9862:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    9866:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
    986a:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    986c:	462a      	mov	r2, r5
    986e:	4631      	mov	r1, r6
    9870:	4438      	add	r0, r7
    9872:	f003 fc08 	bl	d086 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    9876:	443d      	add	r5, r7
    9878:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    987c:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
    9880:	6265      	str	r5, [r4, #36]	; 0x24
      return 1;
    9882:	2001      	movs	r0, #1
    9884:	e029      	b.n	98da <SEGGER_RTT_WriteSkipNoLock+0xbe>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    9886:	1c43      	adds	r3, r0, #1
    9888:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    988c:	4a14      	ldr	r2, [pc, #80]	; (98e0 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    988e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    9892:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    9894:	464a      	mov	r2, r9
    9896:	4631      	mov	r1, r6
    9898:	4438      	add	r0, r7
    989a:	f003 fbf4 	bl	d086 <memcpy>
      NumBytes -= Rem;
    989e:	eba7 0708 	sub.w	r7, r7, r8
      if (NumBytes) {
    98a2:	197f      	adds	r7, r7, r5
    98a4:	d107      	bne.n	98b6 <SEGGER_RTT_WriteSkipNoLock+0x9a>
      pRing->WrOff = NumBytes;
    98a6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    98aa:	4b0d      	ldr	r3, [pc, #52]	; (98e0 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    98ac:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    98b0:	6267      	str	r7, [r4, #36]	; 0x24
      return 1;
    98b2:	2001      	movs	r0, #1
    98b4:	e011      	b.n	98da <SEGGER_RTT_WriteSkipNoLock+0xbe>
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
    98b6:	1c63      	adds	r3, r4, #1
    98b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    98bc:	4a08      	ldr	r2, [pc, #32]	; (98e0 <SEGGER_RTT_WriteSkipNoLock+0xc4>)
    98be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
        memcpy((void*)pDst, pData + Rem, NumBytes);
    98c2:	463a      	mov	r2, r7
    98c4:	eb06 0109 	add.w	r1, r6, r9
    98c8:	6858      	ldr	r0, [r3, #4]
    98ca:	f003 fbdc 	bl	d086 <memcpy>
    98ce:	e7ea      	b.n	98a6 <SEGGER_RTT_WriteSkipNoLock+0x8a>
    Avail = RdOff - WrOff - 1u;
    98d0:	1bdb      	subs	r3, r3, r7
    98d2:	3b01      	subs	r3, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    98d4:	42ab      	cmp	r3, r5
    98d6:	d2c1      	bcs.n	985c <SEGGER_RTT_WriteSkipNoLock+0x40>
  return 0;     // No space in buffer
    98d8:	2000      	movs	r0, #0
}
    98da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    98de:	bf00      	nop
    98e0:	20002034 	.word	0x20002034

000098e4 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    98e4:	4b06      	ldr	r3, [pc, #24]	; (9900 <SEGGER_RTT_HasDataUp+0x1c>)
    98e6:	eb00 0240 	add.w	r2, r0, r0, lsl #1
    98ea:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    98ee:	6a92      	ldr	r2, [r2, #40]	; 0x28
  return pRing->WrOff - v;
    98f0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    98f4:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    98f8:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
    98fa:	1a80      	subs	r0, r0, r2
    98fc:	4770      	bx	lr
    98fe:	bf00      	nop
    9900:	20002034 	.word	0x20002034

00009904 <z_device_state_init>:
 * The state object is always zero-initialized, but this may not be
 * sufficient.
 */
void z_device_state_init(void)
{
	const struct device *dev = __device_start;
    9904:	4b03      	ldr	r3, [pc, #12]	; (9914 <z_device_state_init+0x10>)

	while (dev < __device_end) {
    9906:	4a04      	ldr	r2, [pc, #16]	; (9918 <z_device_state_init+0x14>)
    9908:	4293      	cmp	r3, r2
    990a:	d201      	bcs.n	9910 <z_device_state_init+0xc>
		z_object_init(dev);
		++dev;
    990c:	3318      	adds	r3, #24
    990e:	e7fa      	b.n	9906 <z_device_state_init+0x2>
	}
}
    9910:	4770      	bx	lr
    9912:	bf00      	nop
    9914:	0000e61c 	.word	0x0000e61c
    9918:	0000e6ac 	.word	0x0000e6ac

0000991c <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
    991c:	b570      	push	{r4, r5, r6, lr}
    991e:	4606      	mov	r6, r0
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    9920:	4b11      	ldr	r3, [pc, #68]	; (9968 <z_sys_init_run_level+0x4c>)
    9922:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    9926:	e009      	b.n	993c <z_sys_init_run_level+0x20>
			/* Mark device initialized.  If initialization
			 * failed, record the error condition.
			 */
			if (rc != 0) {
				if (rc < 0) {
					rc = -rc;
    9928:	4240      	negs	r0, r0
    992a:	e017      	b.n	995c <z_sys_init_run_level+0x40>
				}
				if (rc > UINT8_MAX) {
					rc = UINT8_MAX;
				}
				dev->state->init_res = rc;
    992c:	68eb      	ldr	r3, [r5, #12]
    992e:	7018      	strb	r0, [r3, #0]
			}
			dev->state->initialized = true;
    9930:	68ea      	ldr	r2, [r5, #12]
    9932:	7853      	ldrb	r3, [r2, #1]
    9934:	f043 0301 	orr.w	r3, r3, #1
    9938:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    993a:	3408      	adds	r4, #8
    993c:	1c73      	adds	r3, r6, #1
    993e:	4a0a      	ldr	r2, [pc, #40]	; (9968 <z_sys_init_run_level+0x4c>)
    9940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    9944:	42a3      	cmp	r3, r4
    9946:	d90d      	bls.n	9964 <z_sys_init_run_level+0x48>
		const struct device *dev = entry->dev;
    9948:	6865      	ldr	r5, [r4, #4]
		int rc = entry->init(dev);
    994a:	6823      	ldr	r3, [r4, #0]
    994c:	4628      	mov	r0, r5
    994e:	4798      	blx	r3
		if (dev != NULL) {
    9950:	2d00      	cmp	r5, #0
    9952:	d0f2      	beq.n	993a <z_sys_init_run_level+0x1e>
			if (rc != 0) {
    9954:	2800      	cmp	r0, #0
    9956:	d0eb      	beq.n	9930 <z_sys_init_run_level+0x14>
				if (rc < 0) {
    9958:	2800      	cmp	r0, #0
    995a:	dbe5      	blt.n	9928 <z_sys_init_run_level+0xc>
				if (rc > UINT8_MAX) {
    995c:	28ff      	cmp	r0, #255	; 0xff
    995e:	dde5      	ble.n	992c <z_sys_init_run_level+0x10>
					rc = UINT8_MAX;
    9960:	20ff      	movs	r0, #255	; 0xff
    9962:	e7e3      	b.n	992c <z_sys_init_run_level+0x10>
		}
	}
}
    9964:	bd70      	pop	{r4, r5, r6, pc}
    9966:	bf00      	nop
    9968:	0000f92c 	.word	0x0000f92c

0000996c <reason_to_str>:
	return thread_name;
}

static const char *reason_to_str(unsigned int reason)
{
	switch (reason) {
    996c:	2804      	cmp	r0, #4
    996e:	d80c      	bhi.n	998a <reason_to_str+0x1e>
    9970:	e8df f000 	tbb	[pc, r0]
    9974:	07050d03 	.word	0x07050d03
    9978:	09          	.byte	0x09
    9979:	00          	.byte	0x00
	case K_ERR_STACK_CHK_FAIL:
		return "Stack overflow";
	case K_ERR_KERNEL_OOPS:
		return "Kernel oops";
	case K_ERR_KERNEL_PANIC:
		return "Kernel panic";
    997a:	4806      	ldr	r0, [pc, #24]	; (9994 <reason_to_str+0x28>)
    997c:	4770      	bx	lr
		return "Stack overflow";
    997e:	4806      	ldr	r0, [pc, #24]	; (9998 <reason_to_str+0x2c>)
    9980:	4770      	bx	lr
		return "Kernel oops";
    9982:	4806      	ldr	r0, [pc, #24]	; (999c <reason_to_str+0x30>)
    9984:	4770      	bx	lr
		return "Kernel panic";
    9986:	4806      	ldr	r0, [pc, #24]	; (99a0 <reason_to_str+0x34>)
    9988:	4770      	bx	lr
	default:
		return "Unknown error";
    998a:	4806      	ldr	r0, [pc, #24]	; (99a4 <reason_to_str+0x38>)
    998c:	4770      	bx	lr
		return "Unhandled interrupt";
    998e:	4806      	ldr	r0, [pc, #24]	; (99a8 <reason_to_str+0x3c>)
	}
}
    9990:	4770      	bx	lr
    9992:	bf00      	nop
    9994:	0000f994 	.word	0x0000f994
    9998:	0000f968 	.word	0x0000f968
    999c:	0000f978 	.word	0x0000f978
    99a0:	0000f984 	.word	0x0000f984
    99a4:	0000f944 	.word	0x0000f944
    99a8:	0000f954 	.word	0x0000f954

000099ac <thread_name_get>:
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    99ac:	b130      	cbz	r0, 99bc <thread_name_get+0x10>
{
    99ae:	b508      	push	{r3, lr}
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    99b0:	f004 f9b1 	bl	dd16 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    99b4:	b120      	cbz	r0, 99c0 <thread_name_get+0x14>
    99b6:	7803      	ldrb	r3, [r0, #0]
    99b8:	b123      	cbz	r3, 99c4 <thread_name_get+0x18>
}
    99ba:	bd08      	pop	{r3, pc}
		thread_name = "unknown";
    99bc:	4802      	ldr	r0, [pc, #8]	; (99c8 <thread_name_get+0x1c>)
}
    99be:	4770      	bx	lr
		thread_name = "unknown";
    99c0:	4801      	ldr	r0, [pc, #4]	; (99c8 <thread_name_get+0x1c>)
    99c2:	e7fa      	b.n	99ba <thread_name_get+0xe>
    99c4:	4800      	ldr	r0, [pc, #0]	; (99c8 <thread_name_get+0x1c>)
	return thread_name;
    99c6:	e7f8      	b.n	99ba <thread_name_get+0xe>
    99c8:	0000f9a4 	.word	0x0000f9a4

000099cc <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    99cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    99d0:	b082      	sub	sp, #8
    99d2:	4605      	mov	r5, r0
    99d4:	460e      	mov	r6, r1
	__asm__ volatile(
    99d6:	f04f 0320 	mov.w	r3, #32
    99da:	f3ef 8711 	mrs	r7, BASEPRI
    99de:	f383 8812 	msr	BASEPRI_MAX, r3
    99e2:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    99e6:	f001 f915 	bl	ac14 <z_impl_z_current_get>
    99ea:	4604      	mov	r4, r0
    99ec:	4b29      	ldr	r3, [pc, #164]	; (9a94 <z_fatal_error+0xc8>)
    99ee:	4a2a      	ldr	r2, [pc, #168]	; (9a98 <z_fatal_error+0xcc>)
    99f0:	1a9b      	subs	r3, r3, r2
    99f2:	08db      	lsrs	r3, r3, #3
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    99f4:	f04f 0800 	mov.w	r8, #0
    99f8:	2201      	movs	r2, #1
    99fa:	f362 0802 	bfi	r8, r2, #0, #3
    99fe:	f36f 08c5 	bfc	r8, #3, #3
    9a02:	f363 188f 	bfi	r8, r3, #6, #10
    9a06:	4628      	mov	r0, r5
    9a08:	f7ff ffb0 	bl	996c <reason_to_str>
    9a0c:	4602      	mov	r2, r0
    9a0e:	f8ad 8000 	strh.w	r8, [sp]
    9a12:	2300      	movs	r3, #0
    9a14:	4629      	mov	r1, r5
    9a16:	4821      	ldr	r0, [pc, #132]	; (9a9c <z_fatal_error+0xd0>)
    9a18:	f7f7 fe20 	bl	165c <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    9a1c:	b11e      	cbz	r6, 9a26 <z_fatal_error+0x5a>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    9a1e:	69f3      	ldr	r3, [r6, #28]
    9a20:	f3c3 0308 	ubfx	r3, r3, #0, #9
    9a24:	bb2b      	cbnz	r3, 9a72 <z_fatal_error+0xa6>
    9a26:	4b1b      	ldr	r3, [pc, #108]	; (9a94 <z_fatal_error+0xc8>)
    9a28:	4a1b      	ldr	r2, [pc, #108]	; (9a98 <z_fatal_error+0xcc>)
    9a2a:	1a9b      	subs	r3, r3, r2
    9a2c:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    9a2e:	f04f 0800 	mov.w	r8, #0
    9a32:	2201      	movs	r2, #1
    9a34:	f362 0802 	bfi	r8, r2, #0, #3
    9a38:	f36f 08c5 	bfc	r8, #3, #3
    9a3c:	f363 188f 	bfi	r8, r3, #6, #10
    9a40:	4620      	mov	r0, r4
    9a42:	f7ff ffb3 	bl	99ac <thread_name_get>
{
	if (IS_ENABLED(CONFIG_LOG_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
    9a46:	f7f7 fccd 	bl	13e4 <z_log_strdup>
    9a4a:	4602      	mov	r2, r0
    9a4c:	4643      	mov	r3, r8
    9a4e:	4621      	mov	r1, r4
    9a50:	4813      	ldr	r0, [pc, #76]	; (9aa0 <z_fatal_error+0xd4>)
    9a52:	f7f7 fe77 	bl	1744 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    9a56:	4631      	mov	r1, r6
    9a58:	4628      	mov	r0, r5
    9a5a:	f7fd fbb5 	bl	71c8 <k_sys_fatal_error_handler>
	__asm__ volatile(
    9a5e:	f387 8811 	msr	BASEPRI, r7
    9a62:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    9a66:	4620      	mov	r0, r4
    9a68:	f7fa fe1e 	bl	46a8 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    9a6c:	b002      	add	sp, #8
    9a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9a72:	4b08      	ldr	r3, [pc, #32]	; (9a94 <z_fatal_error+0xc8>)
    9a74:	4a08      	ldr	r2, [pc, #32]	; (9a98 <z_fatal_error+0xcc>)
    9a76:	1a9b      	subs	r3, r3, r2
    9a78:	08db      	lsrs	r3, r3, #3
		LOG_ERR("Fault during interrupt handling\n");
    9a7a:	f04f 0100 	mov.w	r1, #0
    9a7e:	2201      	movs	r2, #1
    9a80:	f362 0102 	bfi	r1, r2, #0, #3
    9a84:	f36f 01c5 	bfc	r1, #3, #3
    9a88:	f363 118f 	bfi	r1, r3, #6, #10
    9a8c:	4805      	ldr	r0, [pc, #20]	; (9aa4 <z_fatal_error+0xd8>)
    9a8e:	f7f7 fe95 	bl	17bc <log_0>
    9a92:	e7c8      	b.n	9a26 <z_fatal_error+0x5a>
    9a94:	0000e84c 	.word	0x0000e84c
    9a98:	0000e82c 	.word	0x0000e82c
    9a9c:	0000f9ac 	.word	0x0000f9ac
    9aa0:	0000f9f8 	.word	0x0000f9f8
    9aa4:	0000f9d4 	.word	0x0000f9d4

00009aa8 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    9aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
    9aaa:	b089      	sub	sp, #36	; 0x24
    9aac:	4604      	mov	r4, r0
	struct k_thread *thread = &z_idle_threads[i];
    9aae:	4b15      	ldr	r3, [pc, #84]	; (9b04 <init_idle_thread+0x5c>)
    9ab0:	25b0      	movs	r5, #176	; 0xb0
    9ab2:	fb05 3500 	mla	r5, r5, r0, r3
	k_thread_stack_t *stack = z_idle_stacks[i];
    9ab6:	4b14      	ldr	r3, [pc, #80]	; (9b08 <init_idle_thread+0x60>)
    9ab8:	f44f 76b0 	mov.w	r6, #352	; 0x160
    9abc:	fb06 3600 	mla	r6, r6, r0, r3

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
    9ac0:	af06      	add	r7, sp, #24
    9ac2:	4603      	mov	r3, r0
    9ac4:	4a11      	ldr	r2, [pc, #68]	; (9b0c <init_idle_thread+0x64>)
    9ac6:	2108      	movs	r1, #8
    9ac8:	4638      	mov	r0, r7
    9aca:	f001 fda9 	bl	b620 <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    9ace:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    9ad2:	480f      	ldr	r0, [pc, #60]	; (9b10 <init_idle_thread+0x68>)
    9ad4:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
	z_setup_new_thread(thread, stack,
    9ad8:	9705      	str	r7, [sp, #20]
    9ada:	2301      	movs	r3, #1
    9adc:	9304      	str	r3, [sp, #16]
    9ade:	230f      	movs	r3, #15
    9ae0:	9303      	str	r3, [sp, #12]
    9ae2:	2300      	movs	r3, #0
    9ae4:	9302      	str	r3, [sp, #8]
    9ae6:	9301      	str	r3, [sp, #4]
    9ae8:	9400      	str	r4, [sp, #0]
    9aea:	4b0a      	ldr	r3, [pc, #40]	; (9b14 <init_idle_thread+0x6c>)
    9aec:	f44f 72a0 	mov.w	r2, #320	; 0x140
    9af0:	4631      	mov	r1, r6
    9af2:	4628      	mov	r0, r5
    9af4:	f000 f95a 	bl	9dac <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9af8:	7b6b      	ldrb	r3, [r5, #13]
    9afa:	f023 0304 	bic.w	r3, r3, #4
    9afe:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    9b00:	b009      	add	sp, #36	; 0x24
    9b02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9b04:	20000610 	.word	0x20000610
    9b08:	200036a0 	.word	0x200036a0
    9b0c:	0000fa10 	.word	0x0000fa10
    9b10:	200024ec 	.word	0x200024ec
    9b14:	0000dd89 	.word	0x0000dd89

00009b18 <prepare_multithreading>:
 *
 * @return initial stack pointer for the main thread
 */
__boot_func
static char *prepare_multithreading(void)
{
    9b18:	b570      	push	{r4, r5, r6, lr}
    9b1a:	b086      	sub	sp, #24
	char *stack_ptr;

	/* _kernel.ready_q is all zeroes */
	z_sched_init();
    9b1c:	f000 ffac 	bl	aa78 <z_sched_init>
	 * - the main thread will be the one to run first
	 * - no other thread is initialized yet and thus their priority fields
	 *   contain garbage, which would prevent the cache loading algorithm
	 *   to work as intended
	 */
	_kernel.ready_q.cache = &z_main_thread;
    9b20:	4d1b      	ldr	r5, [pc, #108]	; (9b90 <prepare_multithreading+0x78>)
    9b22:	4b1c      	ldr	r3, [pc, #112]	; (9b94 <prepare_multithreading+0x7c>)
    9b24:	61dd      	str	r5, [r3, #28]
#endif
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    9b26:	4b1c      	ldr	r3, [pc, #112]	; (9b98 <prepare_multithreading+0x80>)
    9b28:	9305      	str	r3, [sp, #20]
    9b2a:	2301      	movs	r3, #1
    9b2c:	9304      	str	r3, [sp, #16]
    9b2e:	2400      	movs	r4, #0
    9b30:	9403      	str	r4, [sp, #12]
    9b32:	9402      	str	r4, [sp, #8]
    9b34:	9401      	str	r4, [sp, #4]
    9b36:	9400      	str	r4, [sp, #0]
    9b38:	4b18      	ldr	r3, [pc, #96]	; (9b9c <prepare_multithreading+0x84>)
    9b3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
    9b3e:	4918      	ldr	r1, [pc, #96]	; (9ba0 <prepare_multithreading+0x88>)
    9b40:	4628      	mov	r0, r5
    9b42:	f000 f933 	bl	9dac <z_setup_new_thread>
    9b46:	4606      	mov	r6, r0
    9b48:	7b6b      	ldrb	r3, [r5, #13]
    9b4a:	f023 0304 	bic.w	r3, r3, #4
    9b4e:	736b      	strb	r3, [r5, #13]
				       CONFIG_MAIN_STACK_SIZE, bg_thread_main,
				       NULL, NULL, NULL,
				       CONFIG_MAIN_THREAD_PRIORITY,
				       K_ESSENTIAL, "main");
	z_mark_thread_as_started(&z_main_thread);
	z_ready_thread(&z_main_thread);
    9b50:	4628      	mov	r0, r5
    9b52:	f004 fa74 	bl	e03e <z_ready_thread>

	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    9b56:	2c00      	cmp	r4, #0
    9b58:	dd02      	ble.n	9b60 <prepare_multithreading+0x48>
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
			 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]));
	}

	return stack_ptr;
}
    9b5a:	4630      	mov	r0, r6
    9b5c:	b006      	add	sp, #24
    9b5e:	bd70      	pop	{r4, r5, r6, pc}
		init_idle_thread(i);
    9b60:	4620      	mov	r0, r4
    9b62:	f7ff ffa1 	bl	9aa8 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    9b66:	4b0f      	ldr	r3, [pc, #60]	; (9ba4 <prepare_multithreading+0x8c>)
    9b68:	22b0      	movs	r2, #176	; 0xb0
    9b6a:	fb02 3204 	mla	r2, r2, r4, r3
    9b6e:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    9b72:	4b08      	ldr	r3, [pc, #32]	; (9b94 <prepare_multithreading+0x7c>)
    9b74:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
    9b78:	60da      	str	r2, [r3, #12]
		_kernel.cpus[i].id = i;
    9b7a:	751c      	strb	r4, [r3, #20]
			(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]) +
    9b7c:	eb04 1184 	add.w	r1, r4, r4, lsl #6
    9b80:	4a09      	ldr	r2, [pc, #36]	; (9ba8 <prepare_multithreading+0x90>)
    9b82:	eb02 1241 	add.w	r2, r2, r1, lsl #5
    9b86:	f502 6202 	add.w	r2, r2, #2080	; 0x820
		_kernel.cpus[i].irq_stack =
    9b8a:	605a      	str	r2, [r3, #4]
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
    9b8c:	3401      	adds	r4, #1
    9b8e:	e7e2      	b.n	9b56 <prepare_multithreading+0x3e>
    9b90:	200006c0 	.word	0x200006c0
    9b94:	200024ec 	.word	0x200024ec
    9b98:	0000fa1c 	.word	0x0000fa1c
    9b9c:	00009bad 	.word	0x00009bad
    9ba0:	20003280 	.word	0x20003280
    9ba4:	20000610 	.word	0x20000610
    9ba8:	20003800 	.word	0x20003800

00009bac <bg_thread_main>:
{
    9bac:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    9bae:	4b0a      	ldr	r3, [pc, #40]	; (9bd8 <bg_thread_main+0x2c>)
    9bb0:	2201      	movs	r2, #1
    9bb2:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    9bb4:	2002      	movs	r0, #2
    9bb6:	f7ff feb1 	bl	991c <z_sys_init_run_level>
	boot_banner();
    9bba:	f001 facb 	bl	b154 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    9bbe:	2003      	movs	r0, #3
    9bc0:	f7ff feac 	bl	991c <z_sys_init_run_level>
	z_init_static_threads();
    9bc4:	f000 f956 	bl	9e74 <z_init_static_threads>
	main();
    9bc8:	f7f6 fc14 	bl	3f4 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    9bcc:	4a03      	ldr	r2, [pc, #12]	; (9bdc <bg_thread_main+0x30>)
    9bce:	7b13      	ldrb	r3, [r2, #12]
    9bd0:	f023 0301 	bic.w	r3, r3, #1
    9bd4:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    9bd6:	bd08      	pop	{r3, pc}
    9bd8:	20002556 	.word	0x20002556
    9bdc:	200006c0 	.word	0x200006c0

00009be0 <switch_to_main_thread>:

__boot_func
static FUNC_NORETURN void switch_to_main_thread(char *stack_ptr)
{
    9be0:	b508      	push	{r3, lr}
    9be2:	4601      	mov	r1, r0
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    9be4:	4a01      	ldr	r2, [pc, #4]	; (9bec <switch_to_main_thread+0xc>)
    9be6:	4802      	ldr	r0, [pc, #8]	; (9bf0 <switch_to_main_thread+0x10>)
    9be8:	f7fa f8d8 	bl	3d9c <arch_switch_to_main_thread>
	 * current fake thread is not on a wait queue or ready queue, so it
	 * will never be rescheduled in.
	 */
	z_swap_unlocked();
#endif
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    9bec:	00009bad 	.word	0x00009bad
    9bf0:	200006c0 	.word	0x200006c0

00009bf4 <z_bss_zero>:
{
    9bf4:	b508      	push	{r3, lr}
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    9bf6:	4803      	ldr	r0, [pc, #12]	; (9c04 <z_bss_zero+0x10>)
    9bf8:	4a03      	ldr	r2, [pc, #12]	; (9c08 <z_bss_zero+0x14>)
    9bfa:	1a12      	subs	r2, r2, r0
    9bfc:	2100      	movs	r1, #0
    9bfe:	f003 fa66 	bl	d0ce <memset>
}
    9c02:	bd08      	pop	{r3, pc}
    9c04:	20000368 	.word	0x20000368
    9c08:	20002714 	.word	0x20002714

00009c0c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    9c0c:	b500      	push	{lr}
    9c0e:	b0ad      	sub	sp, #180	; 0xb4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
    9c10:	f7f7 fb0a 	bl	1228 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    9c14:	4b1c      	ldr	r3, [pc, #112]	; (9c88 <z_cstart+0x7c>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    9c16:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    9c1a:	4c1c      	ldr	r4, [pc, #112]	; (9c8c <z_cstart+0x80>)
    9c1c:	6963      	ldr	r3, [r4, #20]
    9c1e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    9c22:	6163      	str	r3, [r4, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    9c24:	23e0      	movs	r3, #224	; 0xe0
    9c26:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    9c2a:	2500      	movs	r5, #0
    9c2c:	77e5      	strb	r5, [r4, #31]
    9c2e:	7625      	strb	r5, [r4, #24]
    9c30:	7665      	strb	r5, [r4, #25]
    9c32:	76a5      	strb	r5, [r4, #26]
    9c34:	f884 5020 	strb.w	r5, [r4, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    9c38:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9c3a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    9c3e:	6263      	str	r3, [r4, #36]	; 0x24
    9c40:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    9c44:	f7fa fca0 	bl	4588 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    9c48:	f7f9 ff2c 	bl	3aa4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    9c4c:	f04f 33ff 	mov.w	r3, #4294967295
    9c50:	62a3      	str	r3, [r4, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    9c52:	62e3      	str	r3, [r4, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    9c54:	f7fa fe04 	bl	4860 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    9c58:	f7fa fd3c 	bl	46d4 <z_arm_configure_static_mpu_regions>
 *
 * The memory of the dummy thread can be completely uninitialized.
 */
static inline void z_dummy_thread_init(struct k_thread *dummy_thread)
{
	dummy_thread->base.thread_state = _THREAD_DUMMY;
    9c5c:	2401      	movs	r4, #1
    9c5e:	f88d 400d 	strb.w	r4, [sp, #13]
#ifdef CONFIG_SCHED_CPU_MASK
	dummy_thread->base.cpu_mask = -1;
#endif
	dummy_thread->base.user_options = K_ESSENTIAL;
    9c62:	f88d 400c 	strb.w	r4, [sp, #12]
#ifdef CONFIG_THREAD_STACK_INFO
	dummy_thread->stack_info.start = 0U;
    9c66:	9526      	str	r5, [sp, #152]	; 0x98
	dummy_thread->stack_info.size = 0U;
    9c68:	9527      	str	r5, [sp, #156]	; 0x9c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    9c6a:	4b09      	ldr	r3, [pc, #36]	; (9c90 <z_cstart+0x84>)
    9c6c:	f8c3 d008 	str.w	sp, [r3, #8]
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    9c70:	f7ff fe48 	bl	9904 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    9c74:	4628      	mov	r0, r5
    9c76:	f7ff fe51 	bl	991c <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    9c7a:	4620      	mov	r0, r4
    9c7c:	f7ff fe4e 	bl	991c <z_sys_init_run_level>
	timing_init();
	timing_start();
#endif

#ifdef CONFIG_MULTITHREADING
	switch_to_main_thread(prepare_multithreading());
    9c80:	f7ff ff4a 	bl	9b18 <prepare_multithreading>
    9c84:	f7ff ffac 	bl	9be0 <switch_to_main_thread>
    9c88:	20004020 	.word	0x20004020
    9c8c:	e000ed00 	.word	0xe000ed00
    9c90:	200024ec 	.word	0x200024ec

00009c94 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    9c94:	b510      	push	{r4, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    9c96:	4c06      	ldr	r4, [pc, #24]	; (9cb0 <init_mem_slab_module+0x1c>)
	int rc = 0;
    9c98:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    9c9a:	4b06      	ldr	r3, [pc, #24]	; (9cb4 <init_mem_slab_module+0x20>)
    9c9c:	429c      	cmp	r4, r3
    9c9e:	d206      	bcs.n	9cae <init_mem_slab_module+0x1a>
		rc = create_free_list(slab);
    9ca0:	4620      	mov	r0, r4
    9ca2:	f003 ffcf 	bl	dc44 <create_free_list>
		if (rc < 0) {
    9ca6:	2800      	cmp	r0, #0
    9ca8:	db01      	blt.n	9cae <init_mem_slab_module+0x1a>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    9caa:	341c      	adds	r4, #28
    9cac:	e7f5      	b.n	9c9a <init_mem_slab_module+0x6>
		z_object_init(slab);
	}

out:
	return rc;
}
    9cae:	bd10      	pop	{r4, pc}
    9cb0:	200001bc 	.word	0x200001bc
    9cb4:	200001d8 	.word	0x200001d8

00009cb8 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    9cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
    9cba:	b083      	sub	sp, #12
    9cbc:	460c      	mov	r4, r1
    9cbe:	461f      	mov	r7, r3
	__asm__ volatile(
    9cc0:	f04f 0320 	mov.w	r3, #32
    9cc4:	f3ef 8111 	mrs	r1, BASEPRI
    9cc8:	f383 8812 	msr	BASEPRI_MAX, r3
    9ccc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    9cd0:	6943      	ldr	r3, [r0, #20]
    9cd2:	b16b      	cbz	r3, 9cf0 <k_mem_slab_alloc+0x38>
		/* take a free block */
		*mem = slab->free_list;
    9cd4:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    9cd6:	6943      	ldr	r3, [r0, #20]
    9cd8:	681b      	ldr	r3, [r3, #0]
    9cda:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    9cdc:	6983      	ldr	r3, [r0, #24]
    9cde:	3301      	adds	r3, #1
    9ce0:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    9ce2:	2000      	movs	r0, #0
	__asm__ volatile(
    9ce4:	f381 8811 	msr	BASEPRI, r1
    9ce8:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
}
    9cec:	b003      	add	sp, #12
    9cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9cf0:	4616      	mov	r6, r2
    9cf2:	f100 0508 	add.w	r5, r0, #8
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    9cf6:	ea56 0307 	orrs.w	r3, r6, r7
    9cfa:	d104      	bne.n	9d06 <k_mem_slab_alloc+0x4e>
		*mem = NULL;
    9cfc:	2300      	movs	r3, #0
    9cfe:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
    9d00:	f06f 000b 	mvn.w	r0, #11
    9d04:	e7ee      	b.n	9ce4 <k_mem_slab_alloc+0x2c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    9d06:	e9cd 6700 	strd	r6, r7, [sp]
    9d0a:	4602      	mov	r2, r0
    9d0c:	4628      	mov	r0, r5
    9d0e:	f000 fd89 	bl	a824 <z_pend_curr>
		if (result == 0) {
    9d12:	2800      	cmp	r0, #0
    9d14:	d1ea      	bne.n	9cec <k_mem_slab_alloc+0x34>
			*mem = _current->base.swap_data;
    9d16:	4b02      	ldr	r3, [pc, #8]	; (9d20 <k_mem_slab_alloc+0x68>)
    9d18:	689b      	ldr	r3, [r3, #8]
    9d1a:	695b      	ldr	r3, [r3, #20]
    9d1c:	6023      	str	r3, [r4, #0]
		return result;
    9d1e:	e7e5      	b.n	9cec <k_mem_slab_alloc+0x34>
    9d20:	200024ec 	.word	0x200024ec

00009d24 <z_thread_monitor_exit>:
	__asm__ volatile(
    9d24:	f04f 0320 	mov.w	r3, #32
    9d28:	f3ef 8111 	mrs	r1, BASEPRI
    9d2c:	f383 8812 	msr	BASEPRI_MAX, r3
    9d30:	f3bf 8f6f 	isb	sy
 */
void z_thread_monitor_exit(struct k_thread *thread)
{
	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	if (thread == _kernel.threads) {
    9d34:	4b0a      	ldr	r3, [pc, #40]	; (9d60 <z_thread_monitor_exit+0x3c>)
    9d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    9d38:	4283      	cmp	r3, r0
    9d3a:	d104      	bne.n	9d46 <z_thread_monitor_exit+0x22>
		_kernel.threads = _kernel.threads->next_thread;
    9d3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    9d3e:	4b08      	ldr	r3, [pc, #32]	; (9d60 <z_thread_monitor_exit+0x3c>)
    9d40:	629a      	str	r2, [r3, #40]	; 0x28
    9d42:	e007      	b.n	9d54 <z_thread_monitor_exit+0x30>
		struct k_thread *prev_thread;

		prev_thread = _kernel.threads;
		while ((prev_thread != NULL) &&
			(thread != prev_thread->next_thread)) {
			prev_thread = prev_thread->next_thread;
    9d44:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
    9d46:	b113      	cbz	r3, 9d4e <z_thread_monitor_exit+0x2a>
			(thread != prev_thread->next_thread)) {
    9d48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
		while ((prev_thread != NULL) &&
    9d4a:	4282      	cmp	r2, r0
    9d4c:	d1fa      	bne.n	9d44 <z_thread_monitor_exit+0x20>
		}
		if (prev_thread != NULL) {
    9d4e:	b10b      	cbz	r3, 9d54 <z_thread_monitor_exit+0x30>
			prev_thread->next_thread = thread->next_thread;
    9d50:	6f02      	ldr	r2, [r0, #112]	; 0x70
    9d52:	671a      	str	r2, [r3, #112]	; 0x70
	__asm__ volatile(
    9d54:	f381 8811 	msr	BASEPRI, r1
    9d58:	f3bf 8f6f 	isb	sy
		}
	}

	k_spin_unlock(&z_thread_monitor_lock, key);
}
    9d5c:	4770      	bx	lr
    9d5e:	bf00      	nop
    9d60:	200024ec 	.word	0x200024ec

00009d64 <z_impl_k_thread_name_set>:
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
    9d64:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
    9d66:	4604      	mov	r4, r0
    9d68:	b140      	cbz	r0, 9d7c <z_impl_k_thread_name_set+0x18>
		thread = _current;
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
    9d6a:	2220      	movs	r2, #32
    9d6c:	f104 0074 	add.w	r0, r4, #116	; 0x74
    9d70:	f003 f95d 	bl	d02e <strncpy>
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    9d74:	2000      	movs	r0, #0
    9d76:	f884 0093 	strb.w	r0, [r4, #147]	; 0x93

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
    9d7a:	bd10      	pop	{r4, pc}
		thread = _current;
    9d7c:	4b01      	ldr	r3, [pc, #4]	; (9d84 <z_impl_k_thread_name_set+0x20>)
    9d7e:	689c      	ldr	r4, [r3, #8]
    9d80:	e7f3      	b.n	9d6a <z_impl_k_thread_name_set+0x6>
    9d82:	bf00      	nop
    9d84:	200024ec 	.word	0x200024ec

00009d88 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, k_timeout_t delay)
{
    9d88:	b538      	push	{r3, r4, r5, lr}
    9d8a:	4614      	mov	r4, r2
    9d8c:	461d      	mov	r5, r3
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    9d8e:	ea54 0305 	orrs.w	r3, r4, r5
    9d92:	d102      	bne.n	9d9a <schedule_new_thread+0x12>
	z_impl_k_thread_start(thread);
    9d94:	f003 ffc1 	bl	dd1a <z_impl_k_thread_start>
	}
#else
	ARG_UNUSED(delay);
	k_thread_start(thread);
#endif
}
    9d98:	bd38      	pop	{r3, r4, r5, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    9d9a:	462b      	mov	r3, r5
    9d9c:	4902      	ldr	r1, [pc, #8]	; (9da8 <schedule_new_thread+0x20>)
    9d9e:	3018      	adds	r0, #24
    9da0:	f000 ffea 	bl	ad78 <z_add_timeout>
    9da4:	e7f8      	b.n	9d98 <schedule_new_thread+0x10>
    9da6:	bf00      	nop
    9da8:	0000e077 	.word	0x0000e077

00009dac <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    9dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9db0:	b085      	sub	sp, #20
    9db2:	4604      	mov	r4, r0
    9db4:	460f      	mov	r7, r1
    9db6:	4615      	mov	r5, r2
    9db8:	461e      	mov	r6, r3
    9dba:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
    9dbe:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
    9dc2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
    9dc6:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    9dca:	f100 0358 	add.w	r3, r0, #88	; 0x58
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
    9dce:	6583      	str	r3, [r0, #88]	; 0x58
	list->tail = (sys_dnode_t *)list;
    9dd0:	65c3      	str	r3, [r0, #92]	; 0x5c
	k_object_access_grant(new_thread, new_thread);
#endif
	z_waitq_init(&new_thread->join_queue);

	/* Initialize various struct k_thread members */
	z_init_thread_base(&new_thread->base, prio, _THREAD_PRESTART, options);
    9dd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
    9dd4:	2204      	movs	r2, #4
    9dd6:	9911      	ldr	r1, [sp, #68]	; 0x44
    9dd8:	f003 ffa3 	bl	dd22 <z_init_thread_base>
	stack_ptr = setup_thread_stack(new_thread, stack, stack_size);
    9ddc:	462a      	mov	r2, r5
    9dde:	4639      	mov	r1, r7
    9de0:	4620      	mov	r0, r4
    9de2:	f003 ff80 	bl	dce6 <setup_thread_stack>
    9de6:	4605      	mov	r5, r0
	 */
	__ASSERT_NO_MSG(arch_mem_coherent(new_thread));
	__ASSERT_NO_MSG(!arch_mem_coherent(stack));
#endif

	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    9de8:	f8cd 8008 	str.w	r8, [sp, #8]
    9dec:	f8cd 9004 	str.w	r9, [sp, #4]
    9df0:	f8cd a000 	str.w	sl, [sp]
    9df4:	4633      	mov	r3, r6
    9df6:	4602      	mov	r2, r0
    9df8:	4639      	mov	r1, r7
    9dfa:	4620      	mov	r0, r4
    9dfc:	f7f9 ff7e 	bl	3cfc <arch_new_thread>

	/* static threads overwrite it afterwards with real value */
	new_thread->init_data = NULL;
    9e00:	2300      	movs	r3, #0
    9e02:	6563      	str	r3, [r4, #84]	; 0x54
#ifdef CONFIG_THREAD_CUSTOM_DATA
	/* Initialize custom data field (value is opaque to kernel) */
	new_thread->custom_data = NULL;
#endif
#ifdef CONFIG_THREAD_MONITOR
	new_thread->entry.pEntry = entry;
    9e04:	6626      	str	r6, [r4, #96]	; 0x60
	new_thread->entry.parameter1 = p1;
    9e06:	f8c4 a064 	str.w	sl, [r4, #100]	; 0x64
	new_thread->entry.parameter2 = p2;
    9e0a:	f8c4 9068 	str.w	r9, [r4, #104]	; 0x68
	new_thread->entry.parameter3 = p3;
    9e0e:	f8c4 806c 	str.w	r8, [r4, #108]	; 0x6c
	__asm__ volatile(
    9e12:	f04f 0320 	mov.w	r3, #32
    9e16:	f3ef 8211 	mrs	r2, BASEPRI
    9e1a:	f383 8812 	msr	BASEPRI_MAX, r3
    9e1e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&z_thread_monitor_lock);

	new_thread->next_thread = _kernel.threads;
    9e22:	4b13      	ldr	r3, [pc, #76]	; (9e70 <z_setup_new_thread+0xc4>)
    9e24:	6a99      	ldr	r1, [r3, #40]	; 0x28
    9e26:	6721      	str	r1, [r4, #112]	; 0x70
	_kernel.threads = new_thread;
    9e28:	629c      	str	r4, [r3, #40]	; 0x28
	__asm__ volatile(
    9e2a:	f382 8811 	msr	BASEPRI, r2
    9e2e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&z_thread_monitor_lock, key);
#endif
#ifdef CONFIG_THREAD_NAME
	if (name != NULL) {
    9e32:	f1bb 0f00 	cmp.w	fp, #0
    9e36:	d013      	beq.n	9e60 <z_setup_new_thread+0xb4>
		strncpy(new_thread->name, name,
    9e38:	221f      	movs	r2, #31
    9e3a:	4659      	mov	r1, fp
    9e3c:	f104 0074 	add.w	r0, r4, #116	; 0x74
    9e40:	f003 f8f5 	bl	d02e <strncpy>
			CONFIG_THREAD_MAX_NAME_LEN - 1);
		/* Ensure NULL termination, truncate if longer */
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
    9e44:	2300      	movs	r3, #0
    9e46:	f884 3093 	strb.w	r3, [r4, #147]	; 0x93
#ifdef CONFIG_SCHED_CPU_MASK
	new_thread->base.cpu_mask = -1;
#endif
#ifdef CONFIG_ARCH_HAS_CUSTOM_SWAP_TO_MAIN
	/* _current may be null if the dummy thread is not used */
	if (!_current) {
    9e4a:	4b09      	ldr	r3, [pc, #36]	; (9e70 <z_setup_new_thread+0xc4>)
    9e4c:	689b      	ldr	r3, [r3, #8]
    9e4e:	b15b      	cbz	r3, 9e68 <z_setup_new_thread+0xbc>
	}
#endif
#ifdef CONFIG_SCHED_DEADLINE
	new_thread->base.prio_deadline = 0;
#endif
	new_thread->resource_pool = _current->resource_pool;
    9e50:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    9e54:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
#ifdef CONFIG_THREAD_RUNTIME_STATS
	memset(&new_thread->rt_stats, 0, sizeof(new_thread->rt_stats));
#endif

	return stack_ptr;
}
    9e58:	4628      	mov	r0, r5
    9e5a:	b005      	add	sp, #20
    9e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		new_thread->name[0] = '\0';
    9e60:	2300      	movs	r3, #0
    9e62:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
    9e66:	e7f0      	b.n	9e4a <z_setup_new_thread+0x9e>
		new_thread->resource_pool = NULL;
    9e68:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		return stack_ptr;
    9e6c:	e7f4      	b.n	9e58 <z_setup_new_thread+0xac>
    9e6e:	bf00      	nop
    9e70:	200024ec 	.word	0x200024ec

00009e74 <z_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void z_init_static_threads(void)
{
    9e74:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    9e78:	b086      	sub	sp, #24
	_FOREACH_STATIC_THREAD(thread_data) {
    9e7a:	4c23      	ldr	r4, [pc, #140]	; (9f08 <z_init_static_threads+0x94>)
    9e7c:	4b23      	ldr	r3, [pc, #140]	; (9f0c <z_init_static_threads+0x98>)
    9e7e:	429c      	cmp	r4, r3
    9e80:	d215      	bcs.n	9eae <z_init_static_threads+0x3a>
		z_setup_new_thread(
    9e82:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    9e84:	9305      	str	r3, [sp, #20]
    9e86:	6a23      	ldr	r3, [r4, #32]
    9e88:	9304      	str	r3, [sp, #16]
    9e8a:	69e3      	ldr	r3, [r4, #28]
    9e8c:	9303      	str	r3, [sp, #12]
    9e8e:	69a3      	ldr	r3, [r4, #24]
    9e90:	9302      	str	r3, [sp, #8]
    9e92:	6963      	ldr	r3, [r4, #20]
    9e94:	9301      	str	r3, [sp, #4]
    9e96:	6923      	ldr	r3, [r4, #16]
    9e98:	9300      	str	r3, [sp, #0]
    9e9a:	68e3      	ldr	r3, [r4, #12]
    9e9c:	68a2      	ldr	r2, [r4, #8]
    9e9e:	6861      	ldr	r1, [r4, #4]
    9ea0:	6820      	ldr	r0, [r4, #0]
    9ea2:	f7ff ff83 	bl	9dac <z_setup_new_thread>
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options,
			thread_data->init_name);

		thread_data->init_thread->init_data = thread_data;
    9ea6:	6823      	ldr	r3, [r4, #0]
    9ea8:	655c      	str	r4, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    9eaa:	3430      	adds	r4, #48	; 0x30
    9eac:	e7e6      	b.n	9e7c <z_init_static_threads+0x8>
	 * until they are all started.
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	k_sched_lock();
    9eae:	f000 fb71 	bl	a594 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    9eb2:	4c15      	ldr	r4, [pc, #84]	; (9f08 <z_init_static_threads+0x94>)
    9eb4:	e01b      	b.n	9eee <z_init_static_threads+0x7a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
			schedule_new_thread(thread_data->init_thread,
    9eb6:	6826      	ldr	r6, [r4, #0]
					    K_MSEC(thread_data->init_delay));
    9eb8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    9ebc:	ea4f 79e3 	mov.w	r9, r3, asr #31
		} else {
			return (t * to_hz + off) / from_hz;
    9ec0:	ea4f 31c9 	mov.w	r1, r9, lsl #15
    9ec4:	ea41 4153 	orr.w	r1, r1, r3, lsr #17
    9ec8:	03d8      	lsls	r0, r3, #15
    9eca:	f240 35e7 	movw	r5, #999	; 0x3e7
    9ece:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9ed2:	2300      	movs	r3, #0
    9ed4:	1940      	adds	r0, r0, r5
    9ed6:	f04f 0500 	mov.w	r5, #0
    9eda:	eb45 0101 	adc.w	r1, r5, r1
    9ede:	f7f6 f90f 	bl	100 <__aeabi_uldivmod>
    9ee2:	4602      	mov	r2, r0
    9ee4:	460b      	mov	r3, r1
			schedule_new_thread(thread_data->init_thread,
    9ee6:	4630      	mov	r0, r6
    9ee8:	f7ff ff4e 	bl	9d88 <schedule_new_thread>
	_FOREACH_STATIC_THREAD(thread_data) {
    9eec:	3430      	adds	r4, #48	; 0x30
    9eee:	4b07      	ldr	r3, [pc, #28]	; (9f0c <z_init_static_threads+0x98>)
    9ef0:	429c      	cmp	r4, r3
    9ef2:	d204      	bcs.n	9efe <z_init_static_threads+0x8a>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    9ef4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
    9efa:	d0f7      	beq.n	9eec <z_init_static_threads+0x78>
    9efc:	e7db      	b.n	9eb6 <z_init_static_threads+0x42>
		}
	}
	k_sched_unlock();
    9efe:	f000 fd47 	bl	a990 <k_sched_unlock>
}
    9f02:	b006      	add	sp, #24
    9f04:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    9f08:	200001bc 	.word	0x200001bc
    9f0c:	200001bc 	.word	0x200001bc

00009f10 <pm_save_idle>:
 *
 * Sets the kernel data structure idle field to either a positive value or
 * K_FOREVER.
 */
static void pm_save_idle(void)
{
    9f10:	b508      	push	{r3, lr}
#ifdef CONFIG_PM
	int32_t ticks = z_get_next_timeout_expiry();
    9f12:	f004 f9fe 	bl	e312 <z_get_next_timeout_expiry>
	_kernel.idle = ticks;
    9f16:	4b04      	ldr	r3, [pc, #16]	; (9f28 <pm_save_idle+0x18>)
    9f18:	6198      	str	r0, [r3, #24]
	 * before exiting. This is because the kernel does not do its own idle
	 * processing in those cases i.e. skips k_cpu_idle(). The kernel's
	 * idle processing re-enables interrupts which is essential for
	 * the kernel's scheduling logic.
	 */
	if (pm_system_suspend(ticks) == PM_STATE_ACTIVE) {
    9f1a:	f7f9 fc8d 	bl	3838 <pm_system_suspend>
    9f1e:	b100      	cbz	r0, 9f22 <pm_save_idle+0x12>
		k_cpu_idle();
	}
#endif
}
    9f20:	bd08      	pop	{r3, pc}
	arch_cpu_idle();
    9f22:	f7f9 fdc5 	bl	3ab0 <arch_cpu_idle>
    9f26:	e7fb      	b.n	9f20 <pm_save_idle+0x10>
    9f28:	200024ec 	.word	0x200024ec

00009f2c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    9f2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9f30:	b083      	sub	sp, #12
    9f32:	4604      	mov	r4, r0
    9f34:	461d      	mov	r5, r3
	__asm__ volatile(
    9f36:	f04f 0320 	mov.w	r3, #32
    9f3a:	f3ef 8711 	mrs	r7, BASEPRI
    9f3e:	f383 8812 	msr	BASEPRI_MAX, r3
    9f42:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    9f46:	68c1      	ldr	r1, [r0, #12]
    9f48:	b999      	cbnz	r1, 9f72 <z_impl_k_mutex_lock+0x46>

		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
					_current->base.prio :
    9f4a:	2900      	cmp	r1, #0
    9f4c:	d14f      	bne.n	9fee <z_impl_k_mutex_lock+0xc2>
    9f4e:	4b3a      	ldr	r3, [pc, #232]	; (a038 <z_impl_k_mutex_lock+0x10c>)
    9f50:	689b      	ldr	r3, [r3, #8]
    9f52:	f993 300e 	ldrsb.w	r3, [r3, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    9f56:	6123      	str	r3, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
    9f58:	3101      	adds	r1, #1
    9f5a:	60e1      	str	r1, [r4, #12]
		mutex->owner = _current;
    9f5c:	4b36      	ldr	r3, [pc, #216]	; (a038 <z_impl_k_mutex_lock+0x10c>)
    9f5e:	689b      	ldr	r3, [r3, #8]
    9f60:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    9f62:	f387 8811 	msr	BASEPRI, r7
    9f66:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
    9f6a:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    9f6c:	b003      	add	sp, #12
    9f6e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9f72:	4616      	mov	r6, r2
	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    9f74:	6882      	ldr	r2, [r0, #8]
    9f76:	4b30      	ldr	r3, [pc, #192]	; (a038 <z_impl_k_mutex_lock+0x10c>)
    9f78:	689b      	ldr	r3, [r3, #8]
    9f7a:	429a      	cmp	r2, r3
    9f7c:	d0e5      	beq.n	9f4a <z_impl_k_mutex_lock+0x1e>
	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    9f7e:	ea55 0106 	orrs.w	r1, r5, r6
    9f82:	bf0c      	ite	eq
    9f84:	f04f 0801 	moveq.w	r8, #1
    9f88:	f04f 0800 	movne.w	r8, #0
    9f8c:	d031      	beq.n	9ff2 <z_impl_k_mutex_lock+0xc6>
					    mutex->owner->base.prio);
    9f8e:	f992 900e 	ldrsb.w	r9, [r2, #14]
	new_prio = new_prio_for_inheritance(_current->base.prio,
    9f92:	4649      	mov	r1, r9
    9f94:	f993 000e 	ldrsb.w	r0, [r3, #14]
    9f98:	f003 ff02 	bl	dda0 <new_prio_for_inheritance>
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    9f9c:	4581      	cmp	r9, r0
    9f9e:	dc2f      	bgt.n	a000 <z_impl_k_mutex_lock+0xd4>
	bool resched = false;
    9fa0:	f04f 0900 	mov.w	r9, #0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    9fa4:	9600      	str	r6, [sp, #0]
    9fa6:	9501      	str	r5, [sp, #4]
    9fa8:	4622      	mov	r2, r4
    9faa:	4639      	mov	r1, r7
    9fac:	4823      	ldr	r0, [pc, #140]	; (a03c <z_impl_k_mutex_lock+0x110>)
    9fae:	f000 fc39 	bl	a824 <z_pend_curr>
	if (got_mutex == 0) {
    9fb2:	2800      	cmp	r0, #0
    9fb4:	d0da      	beq.n	9f6c <z_impl_k_mutex_lock+0x40>
	__asm__ volatile(
    9fb6:	f04f 0320 	mov.w	r3, #32
    9fba:	f3ef 8511 	mrs	r5, BASEPRI
    9fbe:	f383 8812 	msr	BASEPRI_MAX, r3
    9fc2:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    9fc6:	6823      	ldr	r3, [r4, #0]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9fc8:	42a3      	cmp	r3, r4
    9fca:	d01f      	beq.n	a00c <z_impl_k_mutex_lock+0xe0>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    9fcc:	b1f3      	cbz	r3, a00c <z_impl_k_mutex_lock+0xe0>
    9fce:	6921      	ldr	r1, [r4, #16]
    9fd0:	f993 000e 	ldrsb.w	r0, [r3, #14]
    9fd4:	f003 fee4 	bl	dda0 <new_prio_for_inheritance>
    9fd8:	4601      	mov	r1, r0
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    9fda:	4620      	mov	r0, r4
    9fdc:	f003 feeb 	bl	ddb6 <adjust_owner_prio>
    9fe0:	b9b0      	cbnz	r0, a010 <z_impl_k_mutex_lock+0xe4>
    9fe2:	f1b9 0f00 	cmp.w	r9, #0
    9fe6:	d015      	beq.n	a014 <z_impl_k_mutex_lock+0xe8>
    9fe8:	f04f 0801 	mov.w	r8, #1
    9fec:	e012      	b.n	a014 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    9fee:	6923      	ldr	r3, [r4, #16]
    9ff0:	e7b1      	b.n	9f56 <z_impl_k_mutex_lock+0x2a>
	__asm__ volatile(
    9ff2:	f387 8811 	msr	BASEPRI, r7
    9ff6:	f3bf 8f6f 	isb	sy
		return -EBUSY;
    9ffa:	f06f 000f 	mvn.w	r0, #15
    9ffe:	e7b5      	b.n	9f6c <z_impl_k_mutex_lock+0x40>
		resched = adjust_owner_prio(mutex, new_prio);
    a000:	4601      	mov	r1, r0
    a002:	4620      	mov	r0, r4
    a004:	f003 fed7 	bl	ddb6 <adjust_owner_prio>
    a008:	4681      	mov	r9, r0
    a00a:	e7cb      	b.n	9fa4 <z_impl_k_mutex_lock+0x78>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    a00c:	6921      	ldr	r1, [r4, #16]
    a00e:	e7e4      	b.n	9fda <z_impl_k_mutex_lock+0xae>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    a010:	f04f 0801 	mov.w	r8, #1
	if (resched) {
    a014:	f1b8 0f00 	cmp.w	r8, #0
    a018:	d106      	bne.n	a028 <z_impl_k_mutex_lock+0xfc>
    a01a:	f385 8811 	msr	BASEPRI, r5
    a01e:	f3bf 8f6f 	isb	sy
	return -EAGAIN;
    a022:	f06f 000a 	mvn.w	r0, #10
    a026:	e7a1      	b.n	9f6c <z_impl_k_mutex_lock+0x40>
		z_reschedule(&lock, key);
    a028:	4629      	mov	r1, r5
    a02a:	4804      	ldr	r0, [pc, #16]	; (a03c <z_impl_k_mutex_lock+0x110>)
    a02c:	f000 fa96 	bl	a55c <z_reschedule>
	return -EAGAIN;
    a030:	f06f 000a 	mvn.w	r0, #10
    a034:	e79a      	b.n	9f6c <z_impl_k_mutex_lock+0x40>
    a036:	bf00      	nop
    a038:	200024ec 	.word	0x200024ec
    a03c:	20002518 	.word	0x20002518

0000a040 <z_impl_k_mutex_unlock>:

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    a040:	6882      	ldr	r2, [r0, #8]
    a042:	2a00      	cmp	r2, #0
    a044:	d035      	beq.n	a0b2 <z_impl_k_mutex_unlock+0x72>
{
    a046:	b538      	push	{r3, r4, r5, lr}
    a048:	4604      	mov	r4, r0
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    a04a:	4b1d      	ldr	r3, [pc, #116]	; (a0c0 <z_impl_k_mutex_unlock+0x80>)
    a04c:	689b      	ldr	r3, [r3, #8]
    a04e:	429a      	cmp	r2, r3
    a050:	d132      	bne.n	a0b8 <z_impl_k_mutex_unlock+0x78>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    a052:	7bda      	ldrb	r2, [r3, #15]
    a054:	3a01      	subs	r2, #1
    a056:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    a058:	68c3      	ldr	r3, [r0, #12]
    a05a:	2b01      	cmp	r3, #1
    a05c:	d905      	bls.n	a06a <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    a05e:	3b01      	subs	r3, #1
    a060:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    a062:	f000 fc95 	bl	a990 <k_sched_unlock>

	return 0;
    a066:	2000      	movs	r0, #0
}
    a068:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    a06a:	f04f 0320 	mov.w	r3, #32
    a06e:	f3ef 8511 	mrs	r5, BASEPRI
    a072:	f383 8812 	msr	BASEPRI_MAX, r3
    a076:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    a07a:	6901      	ldr	r1, [r0, #16]
    a07c:	f003 fe9b 	bl	ddb6 <adjust_owner_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    a080:	4620      	mov	r0, r4
    a082:	f004 f89e 	bl	e1c2 <z_unpend_first_thread>
	mutex->owner = new_owner;
    a086:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    a088:	b160      	cbz	r0, a0a4 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    a08a:	f990 300e 	ldrsb.w	r3, [r0, #14]
    a08e:	6123      	str	r3, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    a090:	2300      	movs	r3, #0
    a092:	f8c0 30ac 	str.w	r3, [r0, #172]	; 0xac
		z_ready_thread(new_owner);
    a096:	f003 ffd2 	bl	e03e <z_ready_thread>
		z_reschedule(&lock, key);
    a09a:	4629      	mov	r1, r5
    a09c:	4809      	ldr	r0, [pc, #36]	; (a0c4 <z_impl_k_mutex_unlock+0x84>)
    a09e:	f000 fa5d 	bl	a55c <z_reschedule>
    a0a2:	e7de      	b.n	a062 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    a0a4:	2300      	movs	r3, #0
    a0a6:	60e3      	str	r3, [r4, #12]
	__asm__ volatile(
    a0a8:	f385 8811 	msr	BASEPRI, r5
    a0ac:	f3bf 8f6f 	isb	sy
    a0b0:	e7d7      	b.n	a062 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    a0b2:	f06f 0015 	mvn.w	r0, #21
}
    a0b6:	4770      	bx	lr
		return -EPERM;
    a0b8:	f04f 30ff 	mov.w	r0, #4294967295
    a0bc:	e7d4      	b.n	a068 <z_impl_k_mutex_unlock+0x28>
    a0be:	bf00      	nop
    a0c0:	200024ec 	.word	0x200024ec
    a0c4:	20002518 	.word	0x20002518

0000a0c8 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    a0c8:	b5d0      	push	{r4, r6, r7, lr}
    a0ca:	b082      	sub	sp, #8
    a0cc:	4601      	mov	r1, r0
    a0ce:	4616      	mov	r6, r2
    a0d0:	461f      	mov	r7, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    a0d2:	4602      	mov	r2, r0
	__asm__ volatile(
    a0d4:	f04f 0320 	mov.w	r3, #32
    a0d8:	f3ef 8411 	mrs	r4, BASEPRI
    a0dc:	f383 8812 	msr	BASEPRI_MAX, r3
    a0e0:	f3bf 8f6f 	isb	sy
    a0e4:	f852 0b08 	ldr.w	r0, [r2], #8
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    a0e8:	b188      	cbz	r0, a10e <z_impl_k_queue_get+0x46>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    a0ea:	6803      	ldr	r3, [r0, #0]
    a0ec:	f023 0303 	bic.w	r3, r3, #3
	list->head = node;
    a0f0:	600b      	str	r3, [r1, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_tail(sys_sflist_t *list)
{
	return list->tail;
    a0f2:	684a      	ldr	r2, [r1, #4]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    a0f4:	4290      	cmp	r0, r2
    a0f6:	d008      	beq.n	a10a <z_impl_k_queue_get+0x42>
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    a0f8:	2101      	movs	r1, #1
    a0fa:	f003 fedc 	bl	deb6 <z_queue_node_peek>
	__asm__ volatile(
    a0fe:	f384 8811 	msr	BASEPRI, r4
    a102:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    a106:	b002      	add	sp, #8
    a108:	bdd0      	pop	{r4, r6, r7, pc}
	list->tail = node;
    a10a:	604b      	str	r3, [r1, #4]
}
    a10c:	e7f4      	b.n	a0f8 <z_impl_k_queue_get+0x30>
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    a10e:	ea56 0307 	orrs.w	r3, r6, r7
    a112:	d00a      	beq.n	a12a <z_impl_k_queue_get+0x62>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    a114:	e9cd 6700 	strd	r6, r7, [sp]
    a118:	4621      	mov	r1, r4
    a11a:	4610      	mov	r0, r2
    a11c:	f000 fb82 	bl	a824 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    a120:	b948      	cbnz	r0, a136 <z_impl_k_queue_get+0x6e>
    a122:	4b06      	ldr	r3, [pc, #24]	; (a13c <z_impl_k_queue_get+0x74>)
    a124:	689b      	ldr	r3, [r3, #8]
    a126:	6958      	ldr	r0, [r3, #20]
    a128:	e7ed      	b.n	a106 <z_impl_k_queue_get+0x3e>
    a12a:	f384 8811 	msr	BASEPRI, r4
    a12e:	f3bf 8f6f 	isb	sy
		return NULL;
    a132:	2000      	movs	r0, #0
    a134:	e7e7      	b.n	a106 <z_impl_k_queue_get+0x3e>
	return (ret != 0) ? NULL : _current->base.swap_data;
    a136:	2000      	movs	r0, #0
    a138:	e7e5      	b.n	a106 <z_impl_k_queue_get+0x3e>
    a13a:	bf00      	nop
    a13c:	200024ec 	.word	0x200024ec

0000a140 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    a140:	b538      	push	{r3, r4, r5, lr}
    a142:	4604      	mov	r4, r0
	__asm__ volatile(
    a144:	f04f 0320 	mov.w	r3, #32
    a148:	f3ef 8511 	mrs	r5, BASEPRI
    a14c:	f383 8812 	msr	BASEPRI_MAX, r3
    a150:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    a154:	f004 f835 	bl	e1c2 <z_unpend_first_thread>

	if (thread != NULL) {
    a158:	b148      	cbz	r0, a16e <z_impl_k_sem_give+0x2e>
    a15a:	2200      	movs	r2, #0
    a15c:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    a160:	f003 ff6d 	bl	e03e <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    a164:	4629      	mov	r1, r5
    a166:	4807      	ldr	r0, [pc, #28]	; (a184 <z_impl_k_sem_give+0x44>)
    a168:	f000 f9f8 	bl	a55c <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    a16c:	bd38      	pop	{r3, r4, r5, pc}
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    a16e:	68a3      	ldr	r3, [r4, #8]
    a170:	68e2      	ldr	r2, [r4, #12]
    a172:	4293      	cmp	r3, r2
    a174:	d003      	beq.n	a17e <z_impl_k_sem_give+0x3e>
    a176:	2201      	movs	r2, #1
    a178:	4413      	add	r3, r2
    a17a:	60a3      	str	r3, [r4, #8]
}
    a17c:	e7f2      	b.n	a164 <z_impl_k_sem_give+0x24>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    a17e:	2200      	movs	r2, #0
    a180:	e7fa      	b.n	a178 <z_impl_k_sem_give+0x38>
    a182:	bf00      	nop
    a184:	20002518 	.word	0x20002518

0000a188 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    a188:	b530      	push	{r4, r5, lr}
    a18a:	b083      	sub	sp, #12
    a18c:	461d      	mov	r5, r3
    a18e:	f04f 0320 	mov.w	r3, #32
    a192:	f3ef 8111 	mrs	r1, BASEPRI
    a196:	f383 8812 	msr	BASEPRI_MAX, r3
    a19a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    a19e:	6883      	ldr	r3, [r0, #8]
    a1a0:	b143      	cbz	r3, a1b4 <z_impl_k_sem_take+0x2c>
		sem->count--;
    a1a2:	3b01      	subs	r3, #1
    a1a4:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
    a1a6:	f381 8811 	msr	BASEPRI, r1
    a1aa:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    a1ae:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    a1b0:	b003      	add	sp, #12
    a1b2:	bd30      	pop	{r4, r5, pc}
    a1b4:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    a1b6:	ea54 0305 	orrs.w	r3, r4, r5
    a1ba:	d006      	beq.n	a1ca <z_impl_k_sem_take+0x42>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    a1bc:	e9cd 4500 	strd	r4, r5, [sp]
    a1c0:	4602      	mov	r2, r0
    a1c2:	4805      	ldr	r0, [pc, #20]	; (a1d8 <z_impl_k_sem_take+0x50>)
    a1c4:	f000 fb2e 	bl	a824 <z_pend_curr>
	return ret;
    a1c8:	e7f2      	b.n	a1b0 <z_impl_k_sem_take+0x28>
    a1ca:	f381 8811 	msr	BASEPRI, r1
    a1ce:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    a1d2:	f06f 000f 	mvn.w	r0, #15
    a1d6:	e7eb      	b.n	a1b0 <z_impl_k_sem_take+0x28>
    a1d8:	20002518 	.word	0x20002518

0000a1dc <submit_to_queue_locked>:
 * @retval -EINVAL if no queue is provided
 * @retval -ENODEV if the queue is not started
 */
static int submit_to_queue_locked(struct k_work *work,
				  struct k_work_q **queuep)
{
    a1dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a1de:	460d      	mov	r5, r1
	return (*flagp & BIT(bit)) != 0U;
    a1e0:	68c3      	ldr	r3, [r0, #12]
	int ret = 0;

	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    a1e2:	f013 0f02 	tst.w	r3, #2
    a1e6:	d15b      	bne.n	a2a0 <submit_to_queue_locked+0xc4>
    a1e8:	4604      	mov	r4, r0
		/* Disallowed */
		ret = -EBUSY;
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    a1ea:	f013 0f04 	tst.w	r3, #4
    a1ee:	d15c      	bne.n	a2aa <submit_to_queue_locked+0xce>
		/* Not currently queued */
		ret = 1;

		/* If no queue specified resubmit to last queue.
		 */
		if (*queuep == NULL) {
    a1f0:	680b      	ldr	r3, [r1, #0]
    a1f2:	2b00      	cmp	r3, #0
    a1f4:	d037      	beq.n	a266 <submit_to_queue_locked+0x8a>
	return (*flagp & BIT(bit)) != 0U;
    a1f6:	68e3      	ldr	r3, [r4, #12]

		/* If the work is currently running we have to use the
		 * queue it's running on to prevent handler
		 * re-entrancy.
		 */
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    a1f8:	f013 0f01 	tst.w	r3, #1
    a1fc:	d036      	beq.n	a26c <submit_to_queue_locked+0x90>
			__ASSERT_NO_MSG(work->queue != NULL);
			*queuep = work->queue;
    a1fe:	68a3      	ldr	r3, [r4, #8]
    a200:	602b      	str	r3, [r5, #0]
			ret = 2;
    a202:	2702      	movs	r7, #2
		}

		int rc = queue_submit_locked(*queuep, work);
    a204:	682e      	ldr	r6, [r5, #0]
	if (queue == NULL) {
    a206:	2e00      	cmp	r6, #0
    a208:	d03e      	beq.n	a288 <submit_to_queue_locked+0xac>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    a20a:	4b29      	ldr	r3, [pc, #164]	; (a2b0 <submit_to_queue_locked+0xd4>)
    a20c:	689b      	ldr	r3, [r3, #8]
    a20e:	42b3      	cmp	r3, r6
    a210:	d02e      	beq.n	a270 <submit_to_queue_locked+0x94>
    a212:	2300      	movs	r3, #0
    a214:	461a      	mov	r2, r3
	return (*flagp & BIT(bit)) != 0U;
    a216:	f8d6 30c8 	ldr.w	r3, [r6, #200]	; 0xc8
    a21a:	f3c3 0180 	ubfx	r1, r3, #2, #1
    a21e:	f3c3 00c0 	ubfx	r0, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    a222:	f013 0f01 	tst.w	r3, #1
    a226:	d032      	beq.n	a28e <submit_to_queue_locked+0xb2>
	} else if (draining && !chained) {
    a228:	b101      	cbz	r1, a22c <submit_to_queue_locked+0x50>
    a22a:	b39a      	cbz	r2, a294 <submit_to_queue_locked+0xb8>
	} else if (plugged && !draining) {
    a22c:	b100      	cbz	r0, a230 <submit_to_queue_locked+0x54>
    a22e:	b3a1      	cbz	r1, a29a <submit_to_queue_locked+0xbe>
	parent->next = child;
    a230:	2300      	movs	r3, #0
    a232:	6023      	str	r3, [r4, #0]
	return list->tail;
    a234:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
Z_GENLIST_APPEND(slist, snode)
    a238:	b30b      	cbz	r3, a27e <submit_to_queue_locked+0xa2>
	parent->next = child;
    a23a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    a23c:	f8c6 40b4 	str.w	r4, [r6, #180]	; 0xb4
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    a240:	2200      	movs	r2, #0
    a242:	4611      	mov	r1, r2
    a244:	f106 00b8 	add.w	r0, r6, #184	; 0xb8
    a248:	f003 fff7 	bl	e23a <z_sched_wake>
		ret = 1;
    a24c:	2001      	movs	r0, #1

		if (rc < 0) {
    a24e:	2800      	cmp	r0, #0
    a250:	db06      	blt.n	a260 <submit_to_queue_locked+0x84>
	*flagp |= BIT(bit);
    a252:	68e3      	ldr	r3, [r4, #12]
    a254:	f043 0304 	orr.w	r3, r3, #4
    a258:	60e3      	str	r3, [r4, #12]
			ret = rc;
		} else {
			flag_set(&work->flags, K_WORK_QUEUED_BIT);
			work->queue = *queuep;
    a25a:	682b      	ldr	r3, [r5, #0]
    a25c:	60a3      	str	r3, [r4, #8]
    a25e:	4638      	mov	r0, r7
		}
	} else {
		/* Already queued, do nothing. */
	}

	if (ret <= 0) {
    a260:	2800      	cmp	r0, #0
    a262:	dc21      	bgt.n	a2a8 <submit_to_queue_locked+0xcc>
    a264:	e01e      	b.n	a2a4 <submit_to_queue_locked+0xc8>
			*queuep = work->queue;
    a266:	6883      	ldr	r3, [r0, #8]
    a268:	600b      	str	r3, [r1, #0]
    a26a:	e7c4      	b.n	a1f6 <submit_to_queue_locked+0x1a>
		ret = 1;
    a26c:	2701      	movs	r7, #1
    a26e:	e7c9      	b.n	a204 <submit_to_queue_locked+0x28>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    a270:	f003 fd4b 	bl	dd0a <k_is_in_isr>
    a274:	b908      	cbnz	r0, a27a <submit_to_queue_locked+0x9e>
    a276:	2301      	movs	r3, #1
    a278:	e7cc      	b.n	a214 <submit_to_queue_locked+0x38>
    a27a:	2300      	movs	r3, #0
    a27c:	e7ca      	b.n	a214 <submit_to_queue_locked+0x38>
    a27e:	f8c6 40b4 	str.w	r4, [r6, #180]	; 0xb4
	list->head = node;
    a282:	f8c6 40b0 	str.w	r4, [r6, #176]	; 0xb0
}
    a286:	e7db      	b.n	a240 <submit_to_queue_locked+0x64>
		return -EINVAL;
    a288:	f06f 0015 	mvn.w	r0, #21
    a28c:	e7df      	b.n	a24e <submit_to_queue_locked+0x72>
		ret = -ENODEV;
    a28e:	f06f 0012 	mvn.w	r0, #18
    a292:	e7dc      	b.n	a24e <submit_to_queue_locked+0x72>
		ret = -EBUSY;
    a294:	f06f 000f 	mvn.w	r0, #15
    a298:	e7d9      	b.n	a24e <submit_to_queue_locked+0x72>
		ret = -EBUSY;
    a29a:	f06f 000f 	mvn.w	r0, #15
    a29e:	e7d6      	b.n	a24e <submit_to_queue_locked+0x72>
		ret = -EBUSY;
    a2a0:	f06f 000f 	mvn.w	r0, #15
		*queuep = NULL;
    a2a4:	2300      	movs	r3, #0
    a2a6:	602b      	str	r3, [r5, #0]
	}

	return ret;
}
    a2a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int ret = 0;
    a2aa:	2000      	movs	r0, #0
    a2ac:	e7fa      	b.n	a2a4 <submit_to_queue_locked+0xc8>
    a2ae:	bf00      	nop
    a2b0:	200024ec 	.word	0x200024ec

0000a2b4 <finalize_cancel_locked>:
{
    a2b4:	b570      	push	{r4, r5, r6, lr}
    a2b6:	4605      	mov	r5, r0
	*flagp &= ~BIT(bit);
    a2b8:	68c3      	ldr	r3, [r0, #12]
    a2ba:	f023 0302 	bic.w	r3, r3, #2
    a2be:	60c3      	str	r3, [r0, #12]
	return list->head;
    a2c0:	4b19      	ldr	r3, [pc, #100]	; (a328 <finalize_cancel_locked+0x74>)
    a2c2:	6818      	ldr	r0, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    a2c4:	b1e8      	cbz	r0, a302 <finalize_cancel_locked+0x4e>
    a2c6:	4604      	mov	r4, r0
Z_GENLIST_PEEK_NEXT(slist, snode)
    a2c8:	b100      	cbz	r0, a2cc <finalize_cancel_locked+0x18>
	return node->next;
    a2ca:	6804      	ldr	r4, [r0, #0]
    a2cc:	2600      	movs	r6, #0
    a2ce:	e01d      	b.n	a30c <finalize_cancel_locked+0x58>
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    a2d0:	b15e      	cbz	r6, a2ea <finalize_cancel_locked+0x36>
	return node->next;
    a2d2:	6803      	ldr	r3, [r0, #0]
	parent->next = child;
    a2d4:	6033      	str	r3, [r6, #0]
	return list->tail;
    a2d6:	4b14      	ldr	r3, [pc, #80]	; (a328 <finalize_cancel_locked+0x74>)
    a2d8:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    a2da:	4298      	cmp	r0, r3
    a2dc:	d00e      	beq.n	a2fc <finalize_cancel_locked+0x48>
	parent->next = child;
    a2de:	2300      	movs	r3, #0
    a2e0:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    a2e4:	f7ff ff2c 	bl	a140 <z_impl_k_sem_give>
}
    a2e8:	e015      	b.n	a316 <finalize_cancel_locked+0x62>
	return node->next;
    a2ea:	6802      	ldr	r2, [r0, #0]
	list->head = node;
    a2ec:	4b0e      	ldr	r3, [pc, #56]	; (a328 <finalize_cancel_locked+0x74>)
    a2ee:	601a      	str	r2, [r3, #0]
	return list->tail;
    a2f0:	685b      	ldr	r3, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    a2f2:	4298      	cmp	r0, r3
    a2f4:	d1f3      	bne.n	a2de <finalize_cancel_locked+0x2a>
	list->tail = node;
    a2f6:	4b0c      	ldr	r3, [pc, #48]	; (a328 <finalize_cancel_locked+0x74>)
    a2f8:	605a      	str	r2, [r3, #4]
}
    a2fa:	e7f0      	b.n	a2de <finalize_cancel_locked+0x2a>
	list->tail = node;
    a2fc:	4b0a      	ldr	r3, [pc, #40]	; (a328 <finalize_cancel_locked+0x74>)
    a2fe:	605e      	str	r6, [r3, #4]
}
    a300:	e7ed      	b.n	a2de <finalize_cancel_locked+0x2a>
    a302:	4604      	mov	r4, r0
    a304:	e7e2      	b.n	a2cc <finalize_cancel_locked+0x18>
    a306:	4623      	mov	r3, r4
    a308:	4620      	mov	r0, r4
    a30a:	461c      	mov	r4, r3
    a30c:	b150      	cbz	r0, a324 <finalize_cancel_locked+0x70>
		if (wc->work == work) {
    a30e:	6843      	ldr	r3, [r0, #4]
    a310:	42ab      	cmp	r3, r5
    a312:	d0dd      	beq.n	a2d0 <finalize_cancel_locked+0x1c>
			prev = &wc->node;
    a314:	4606      	mov	r6, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    a316:	2c00      	cmp	r4, #0
    a318:	d0f5      	beq.n	a306 <finalize_cancel_locked+0x52>
    a31a:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    a31c:	2c00      	cmp	r4, #0
    a31e:	d0f3      	beq.n	a308 <finalize_cancel_locked+0x54>
	return node->next;
    a320:	6823      	ldr	r3, [r4, #0]
    a322:	e7f1      	b.n	a308 <finalize_cancel_locked+0x54>
}
    a324:	bd70      	pop	{r4, r5, r6, pc}
    a326:	bf00      	nop
    a328:	20002518 	.word	0x20002518

0000a32c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    a32c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a32e:	b085      	sub	sp, #20
    a330:	4605      	mov	r5, r0
	struct k_work_q *queue = (struct k_work_q *)workq_ptr;
    a332:	e016      	b.n	a362 <work_queue_main+0x36>
	return (*flagp & BIT(bit)) != 0U;
    a334:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
	*flagp &= ~BIT(bit);
    a338:	f023 0204 	bic.w	r2, r3, #4
    a33c:	f8c5 20c8 	str.w	r2, [r5, #200]	; 0xc8
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
    a340:	f013 0f04 	tst.w	r3, #4
    a344:	d158      	bne.n	a3f8 <work_queue_main+0xcc>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
    a346:	2300      	movs	r3, #0
    a348:	9302      	str	r3, [sp, #8]
    a34a:	f04f 32ff 	mov.w	r2, #4294967295
    a34e:	f04f 33ff 	mov.w	r3, #4294967295
    a352:	e9cd 2300 	strd	r2, r3, [sp]
    a356:	f105 02b8 	add.w	r2, r5, #184	; 0xb8
    a35a:	4631      	mov	r1, r6
    a35c:	482e      	ldr	r0, [pc, #184]	; (a418 <work_queue_main+0xec>)
    a35e:	f000 fc97 	bl	ac90 <z_sched_wait>
	__asm__ volatile(
    a362:	f04f 0320 	mov.w	r3, #32
    a366:	f3ef 8611 	mrs	r6, BASEPRI
    a36a:	f383 8812 	msr	BASEPRI_MAX, r3
    a36e:	f3bf 8f6f 	isb	sy
	return list->head;
    a372:	f8d5 40b0 	ldr.w	r4, [r5, #176]	; 0xb0
Z_GENLIST_GET(slist, snode)
    a376:	2c00      	cmp	r4, #0
    a378:	d0dc      	beq.n	a334 <work_queue_main+0x8>
	return node->next;
    a37a:	6823      	ldr	r3, [r4, #0]
	list->head = node;
    a37c:	f8c5 30b0 	str.w	r3, [r5, #176]	; 0xb0
	return list->tail;
    a380:	f8d5 20b4 	ldr.w	r2, [r5, #180]	; 0xb4
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    a384:	4294      	cmp	r4, r2
    a386:	d034      	beq.n	a3f2 <work_queue_main+0xc6>
	*flagp |= BIT(bit);
    a388:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    a38c:	f043 0302 	orr.w	r3, r3, #2
    a390:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
    a394:	68e3      	ldr	r3, [r4, #12]
    a396:	f043 0301 	orr.w	r3, r3, #1
	*flagp &= ~BIT(bit);
    a39a:	f023 0304 	bic.w	r3, r3, #4
    a39e:	60e3      	str	r3, [r4, #12]
			handler = work->handler;
    a3a0:	6863      	ldr	r3, [r4, #4]
		if (work == NULL) {
    a3a2:	2c00      	cmp	r4, #0
    a3a4:	d0cf      	beq.n	a346 <work_queue_main+0x1a>
	__asm__ volatile(
    a3a6:	f386 8811 	msr	BASEPRI, r6
    a3aa:	f3bf 8f6f 	isb	sy

		if (work != NULL) {
			bool yield;

			__ASSERT_NO_MSG(handler != NULL);
			handler(work);
    a3ae:	4620      	mov	r0, r4
    a3b0:	4798      	blx	r3
	__asm__ volatile(
    a3b2:	f04f 0320 	mov.w	r3, #32
    a3b6:	f3ef 8611 	mrs	r6, BASEPRI
    a3ba:	f383 8812 	msr	BASEPRI_MAX, r3
    a3be:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    a3c2:	68e3      	ldr	r3, [r4, #12]
    a3c4:	f023 0301 	bic.w	r3, r3, #1
    a3c8:	60e3      	str	r3, [r4, #12]
			 * starving other threads.
			 */
			key = k_spin_lock(&lock);

			flag_clear(&work->flags, K_WORK_RUNNING_BIT);
			if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    a3ca:	f013 0f02 	tst.w	r3, #2
    a3ce:	d11e      	bne.n	a40e <work_queue_main+0xe2>
	*flagp &= ~BIT(bit);
    a3d0:	f8d5 30c8 	ldr.w	r3, [r5, #200]	; 0xc8
    a3d4:	f023 0302 	bic.w	r3, r3, #2
    a3d8:	f8c5 30c8 	str.w	r3, [r5, #200]	; 0xc8
	return (*flagp & BIT(bit)) != 0U;
    a3dc:	f3c3 2300 	ubfx	r3, r3, #8, #1
	__asm__ volatile(
    a3e0:	f386 8811 	msr	BASEPRI, r6
    a3e4:	f3bf 8f6f 	isb	sy
			k_spin_unlock(&lock, key);

			/* Optionally yield to prevent the work queue from
			 * starving other threads.
			 */
			if (yield) {
    a3e8:	2b00      	cmp	r3, #0
    a3ea:	d1ba      	bne.n	a362 <work_queue_main+0x36>
	z_impl_k_yield();
    a3ec:	f000 fb52 	bl	aa94 <z_impl_k_yield>
}
    a3f0:	e7b7      	b.n	a362 <work_queue_main+0x36>
	list->tail = node;
    a3f2:	f8c5 30b4 	str.w	r3, [r5, #180]	; 0xb4
}
    a3f6:	e7c7      	b.n	a388 <work_queue_main+0x5c>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    a3f8:	f105 07c0 	add.w	r7, r5, #192	; 0xc0
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    a3fc:	2200      	movs	r2, #0
    a3fe:	2101      	movs	r1, #1
    a400:	4638      	mov	r0, r7
    a402:	f003 ff1a 	bl	e23a <z_sched_wake>
    a406:	2800      	cmp	r0, #0
    a408:	d1f8      	bne.n	a3fc <work_queue_main+0xd0>
		k_work_handler_t handler = NULL;
    a40a:	2300      	movs	r3, #0
    a40c:	e7c9      	b.n	a3a2 <work_queue_main+0x76>
				finalize_cancel_locked(work);
    a40e:	4620      	mov	r0, r4
    a410:	f7ff ff50 	bl	a2b4 <finalize_cancel_locked>
    a414:	e7dc      	b.n	a3d0 <work_queue_main+0xa4>
    a416:	bf00      	nop
    a418:	20002518 	.word	0x20002518

0000a41c <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    a41c:	b5f0      	push	{r4, r5, r6, r7, lr}
    a41e:	b089      	sub	sp, #36	; 0x24
    a420:	4604      	mov	r4, r0
    a422:	9d0e      	ldr	r5, [sp, #56]	; 0x38
	list->head = NULL;
    a424:	2000      	movs	r0, #0
    a426:	f8c4 00b0 	str.w	r0, [r4, #176]	; 0xb0
	list->tail = NULL;
    a42a:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    a42e:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
	list->head = (sys_dnode_t *)list;
    a432:	f8c4 00b8 	str.w	r0, [r4, #184]	; 0xb8
	list->tail = (sys_dnode_t *)list;
    a436:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc
    a43a:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
	list->head = (sys_dnode_t *)list;
    a43e:	f8c4 00c0 	str.w	r0, [r4, #192]	; 0xc0
	list->tail = (sys_dnode_t *)list;
    a442:	f8c4 00c4 	str.w	r0, [r4, #196]	; 0xc4

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    a446:	b1fd      	cbz	r5, a488 <k_work_queue_start+0x6c>
    a448:	7928      	ldrb	r0, [r5, #4]
    a44a:	b9f8      	cbnz	r0, a48c <k_work_queue_start+0x70>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    a44c:	2001      	movs	r0, #1
	*flagp = flags;
    a44e:	f8c4 00c8 	str.w	r0, [r4, #200]	; 0xc8
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    a452:	f04f 36ff 	mov.w	r6, #4294967295
    a456:	f04f 37ff 	mov.w	r7, #4294967295
    a45a:	e9cd 6706 	strd	r6, r7, [sp, #24]
    a45e:	2000      	movs	r0, #0
    a460:	9004      	str	r0, [sp, #16]
    a462:	9303      	str	r3, [sp, #12]
    a464:	9002      	str	r0, [sp, #8]
    a466:	9001      	str	r0, [sp, #4]
    a468:	9400      	str	r4, [sp, #0]
    a46a:	4b0a      	ldr	r3, [pc, #40]	; (a494 <k_work_queue_start+0x78>)
    a46c:	4620      	mov	r0, r4
    a46e:	f003 fc63 	bl	dd38 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    a472:	b125      	cbz	r5, a47e <k_work_queue_start+0x62>
    a474:	6829      	ldr	r1, [r5, #0]
    a476:	b111      	cbz	r1, a47e <k_work_queue_start+0x62>
	return z_impl_k_thread_name_set(thread, str);
    a478:	4620      	mov	r0, r4
    a47a:	f7ff fc73 	bl	9d64 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    a47e:	4620      	mov	r0, r4
    a480:	f003 fc4b 	bl	dd1a <z_impl_k_thread_start>
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    a484:	b009      	add	sp, #36	; 0x24
    a486:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint32_t flags = K_WORK_QUEUE_STARTED;
    a488:	2001      	movs	r0, #1
    a48a:	e7e0      	b.n	a44e <k_work_queue_start+0x32>
		flags |= K_WORK_QUEUE_NO_YIELD;
    a48c:	f240 1001 	movw	r0, #257	; 0x101
    a490:	e7dd      	b.n	a44e <k_work_queue_start+0x32>
    a492:	bf00      	nop
    a494:	0000a32d 	.word	0x0000a32d

0000a498 <add_thread_timeout>:
		z_priq_wait_add(&wait_q->waitq, thread);
	}
}

static void add_thread_timeout(struct k_thread *thread, k_timeout_t timeout)
{
    a498:	b538      	push	{r3, r4, r5, lr}
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    a49a:	f1b3 3fff 	cmp.w	r3, #4294967295
    a49e:	bf08      	it	eq
    a4a0:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    a4a4:	d100      	bne.n	a4a8 <add_thread_timeout+0x10>
		z_add_thread_timeout(thread, timeout);
	}
}
    a4a6:	bd38      	pop	{r3, r4, r5, pc}
    a4a8:	4902      	ldr	r1, [pc, #8]	; (a4b4 <add_thread_timeout+0x1c>)
    a4aa:	3018      	adds	r0, #24
    a4ac:	f000 fc64 	bl	ad78 <z_add_timeout>
    a4b0:	e7f9      	b.n	a4a6 <add_thread_timeout+0xe>
    a4b2:	bf00      	nop
    a4b4:	0000e077 	.word	0x0000e077

0000a4b8 <z_reset_time_slice>:
{
    a4b8:	b508      	push	{r3, lr}
	if (slice_time != 0) {
    a4ba:	4b08      	ldr	r3, [pc, #32]	; (a4dc <z_reset_time_slice+0x24>)
    a4bc:	681b      	ldr	r3, [r3, #0]
    a4be:	b903      	cbnz	r3, a4c2 <z_reset_time_slice+0xa>
}
    a4c0:	bd08      	pop	{r3, pc}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    a4c2:	f7fc fe77 	bl	71b4 <sys_clock_elapsed>
    a4c6:	4603      	mov	r3, r0
    a4c8:	4a04      	ldr	r2, [pc, #16]	; (a4dc <z_reset_time_slice+0x24>)
    a4ca:	6810      	ldr	r0, [r2, #0]
    a4cc:	4403      	add	r3, r0
    a4ce:	4a04      	ldr	r2, [pc, #16]	; (a4e0 <z_reset_time_slice+0x28>)
    a4d0:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    a4d2:	2100      	movs	r1, #0
    a4d4:	f003 ff33 	bl	e33e <z_set_timeout_expiry>
}
    a4d8:	e7f2      	b.n	a4c0 <z_reset_time_slice+0x8>
    a4da:	bf00      	nop
    a4dc:	20002528 	.word	0x20002528
    a4e0:	200024ec 	.word	0x200024ec

0000a4e4 <k_sched_time_slice_set>:
{
    a4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a4e8:	4606      	mov	r6, r0
    a4ea:	4688      	mov	r8, r1
	LOCKED(&sched_spinlock) {
    a4ec:	2300      	movs	r3, #0
	__asm__ volatile(
    a4ee:	f04f 0220 	mov.w	r2, #32
    a4f2:	f3ef 8711 	mrs	r7, BASEPRI
    a4f6:	f382 8812 	msr	BASEPRI_MAX, r2
    a4fa:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    a4fe:	e009      	b.n	a514 <k_sched_time_slice_set+0x30>
		slice_max_prio = prio;
    a500:	4b13      	ldr	r3, [pc, #76]	; (a550 <k_sched_time_slice_set+0x6c>)
    a502:	f8c3 8000 	str.w	r8, [r3]
		z_reset_time_slice();
    a506:	f7ff ffd7 	bl	a4b8 <z_reset_time_slice>
	__asm__ volatile(
    a50a:	f387 8811 	msr	BASEPRI, r7
    a50e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    a512:	2301      	movs	r3, #1
    a514:	b9cb      	cbnz	r3, a54a <k_sched_time_slice_set+0x66>
		_current_cpu->slice_ticks = 0;
    a516:	2300      	movs	r3, #0
    a518:	4a0e      	ldr	r2, [pc, #56]	; (a554 <k_sched_time_slice_set+0x70>)
    a51a:	6113      	str	r3, [r2, #16]
			return (uint32_t)((t * to_hz + off) / from_hz);
    a51c:	0c75      	lsrs	r5, r6, #17
    a51e:	03f4      	lsls	r4, r6, #15
    a520:	f240 30e7 	movw	r0, #999	; 0x3e7
    a524:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    a528:	2300      	movs	r3, #0
    a52a:	1820      	adds	r0, r4, r0
    a52c:	f04f 0100 	mov.w	r1, #0
    a530:	eb45 0101 	adc.w	r1, r5, r1
    a534:	f7f5 fde4 	bl	100 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
    a538:	4b07      	ldr	r3, [pc, #28]	; (a558 <k_sched_time_slice_set+0x74>)
    a53a:	6018      	str	r0, [r3, #0]
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    a53c:	2e00      	cmp	r6, #0
    a53e:	dddf      	ble.n	a500 <k_sched_time_slice_set+0x1c>
			slice_time = MAX(2, slice_time);
    a540:	2802      	cmp	r0, #2
    a542:	bfb8      	it	lt
    a544:	2002      	movlt	r0, #2
    a546:	6018      	str	r0, [r3, #0]
    a548:	e7da      	b.n	a500 <k_sched_time_slice_set+0x1c>
}
    a54a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a54e:	bf00      	nop
    a550:	20002524 	.word	0x20002524
    a554:	200024ec 	.word	0x200024ec
    a558:	20002528 	.word	0x20002528

0000a55c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    a55c:	b508      	push	{r3, lr}
	if (resched(key.key) && need_swap()) {
    a55e:	4608      	mov	r0, r1
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    a560:	b921      	cbnz	r1, a56c <z_reschedule+0x10>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a562:	f3ef 8305 	mrs	r3, IPSR
    a566:	b913      	cbnz	r3, a56e <z_reschedule+0x12>
    a568:	2101      	movs	r1, #1
    a56a:	e000      	b.n	a56e <z_reschedule+0x12>
    a56c:	2100      	movs	r1, #0
	if (resched(key.key) && need_swap()) {
    a56e:	f011 0f01 	tst.w	r1, #1
    a572:	d007      	beq.n	a584 <z_reschedule+0x28>
	new_thread = _kernel.ready_q.cache;
    a574:	4b06      	ldr	r3, [pc, #24]	; (a590 <z_reschedule+0x34>)
    a576:	69da      	ldr	r2, [r3, #28]
	return new_thread != _current;
    a578:	689b      	ldr	r3, [r3, #8]
	if (resched(key.key) && need_swap()) {
    a57a:	429a      	cmp	r2, r3
    a57c:	d002      	beq.n	a584 <z_reschedule+0x28>
	ret = arch_swap(key);
    a57e:	f7f9 fb65 	bl	3c4c <arch_swap>
		z_swap(lock, key);
    a582:	e003      	b.n	a58c <z_reschedule+0x30>
    a584:	f380 8811 	msr	BASEPRI, r0
    a588:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(lock, key);
	}
}
    a58c:	bd08      	pop	{r3, pc}
    a58e:	bf00      	nop
    a590:	200024ec 	.word	0x200024ec

0000a594 <k_sched_lock>:
	}
}

void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
    a594:	2300      	movs	r3, #0
	__asm__ volatile(
    a596:	f04f 0220 	mov.w	r2, #32
    a59a:	f3ef 8111 	mrs	r1, BASEPRI
    a59e:	f382 8812 	msr	BASEPRI_MAX, r2
    a5a2:	f3bf 8f6f 	isb	sy
    a5a6:	b953      	cbnz	r3, a5be <k_sched_lock+0x2a>
	--_current->base.sched_locked;
    a5a8:	4b05      	ldr	r3, [pc, #20]	; (a5c0 <k_sched_lock+0x2c>)
    a5aa:	689a      	ldr	r2, [r3, #8]
    a5ac:	7bd3      	ldrb	r3, [r2, #15]
    a5ae:	3b01      	subs	r3, #1
    a5b0:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    a5b2:	f381 8811 	msr	BASEPRI, r1
    a5b6:	f3bf 8f6f 	isb	sy
    a5ba:	2301      	movs	r3, #1
    a5bc:	e7f3      	b.n	a5a6 <k_sched_lock+0x12>
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    a5be:	4770      	bx	lr
    a5c0:	200024ec 	.word	0x200024ec

0000a5c4 <update_cache>:
{
    a5c4:	b538      	push	{r3, r4, r5, lr}
    a5c6:	4604      	mov	r4, r0
	thread = _priq_run_best(&_kernel.ready_q.runq);
    a5c8:	480f      	ldr	r0, [pc, #60]	; (a608 <update_cache+0x44>)
    a5ca:	f003 fd31 	bl	e030 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    a5ce:	4605      	mov	r5, r0
    a5d0:	b170      	cbz	r0, a5f0 <update_cache+0x2c>
	if (preempt_ok != 0) {
    a5d2:	b984      	cbnz	r4, a5f6 <update_cache+0x32>
	if (z_is_thread_prevented_from_running(_current)) {
    a5d4:	4b0d      	ldr	r3, [pc, #52]	; (a60c <update_cache+0x48>)
    a5d6:	689b      	ldr	r3, [r3, #8]
	uint8_t state = thread->base.thread_state;
    a5d8:	7b5a      	ldrb	r2, [r3, #13]
    a5da:	f012 0f1f 	tst.w	r2, #31
    a5de:	d10a      	bne.n	a5f6 <update_cache+0x32>
	return node->next != NULL;
    a5e0:	69aa      	ldr	r2, [r5, #24]
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    a5e2:	b942      	cbnz	r2, a5f6 <update_cache+0x32>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    a5e4:	89da      	ldrh	r2, [r3, #14]
	if (is_preempt(_current) || is_metairq(thread)) {
    a5e6:	2a7f      	cmp	r2, #127	; 0x7f
    a5e8:	d905      	bls.n	a5f6 <update_cache+0x32>
		_kernel.ready_q.cache = _current;
    a5ea:	4a08      	ldr	r2, [pc, #32]	; (a60c <update_cache+0x48>)
    a5ec:	61d3      	str	r3, [r2, #28]
    a5ee:	e00a      	b.n	a606 <update_cache+0x42>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    a5f0:	4b06      	ldr	r3, [pc, #24]	; (a60c <update_cache+0x48>)
    a5f2:	68dd      	ldr	r5, [r3, #12]
    a5f4:	e7ed      	b.n	a5d2 <update_cache+0xe>
		if (thread != _current) {
    a5f6:	4b05      	ldr	r3, [pc, #20]	; (a60c <update_cache+0x48>)
    a5f8:	689b      	ldr	r3, [r3, #8]
    a5fa:	42ab      	cmp	r3, r5
    a5fc:	d001      	beq.n	a602 <update_cache+0x3e>
			z_reset_time_slice();
    a5fe:	f7ff ff5b 	bl	a4b8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    a602:	4b02      	ldr	r3, [pc, #8]	; (a60c <update_cache+0x48>)
    a604:	61dd      	str	r5, [r3, #28]
}
    a606:	bd38      	pop	{r3, r4, r5, pc}
    a608:	2000250c 	.word	0x2000250c
    a60c:	200024ec 	.word	0x200024ec

0000a610 <move_thread_to_end_of_prio_q>:
{
    a610:	b538      	push	{r3, r4, r5, lr}
    a612:	4605      	mov	r5, r0
	return (thread->base.thread_state & state) != 0U;
    a614:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    a616:	f990 300d 	ldrsb.w	r3, [r0, #13]
    a61a:	2b00      	cmp	r3, #0
    a61c:	db28      	blt.n	a670 <move_thread_to_end_of_prio_q+0x60>
	thread->base.thread_state |= _THREAD_QUEUED;
    a61e:	7b6b      	ldrb	r3, [r5, #13]
    a620:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a624:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    a626:	4b1a      	ldr	r3, [pc, #104]	; (a690 <move_thread_to_end_of_prio_q+0x80>)
    a628:	f853 4f20 	ldr.w	r4, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a62c:	429c      	cmp	r4, r3
    a62e:	d02d      	beq.n	a68c <move_thread_to_end_of_prio_q+0x7c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a630:	b16c      	cbz	r4, a64e <move_thread_to_end_of_prio_q+0x3e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    a632:	4621      	mov	r1, r4
    a634:	4628      	mov	r0, r5
    a636:	f003 fc92 	bl	df5e <z_sched_prio_cmp>
    a63a:	2800      	cmp	r0, #0
    a63c:	dc20      	bgt.n	a680 <move_thread_to_end_of_prio_q+0x70>
 */

static inline sys_dnode_t *sys_dlist_peek_next(sys_dlist_t *list,
					       sys_dnode_t *node)
{
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    a63e:	b134      	cbz	r4, a64e <move_thread_to_end_of_prio_q+0x3e>
	return (node == list->tail) ? NULL : node->next;
    a640:	4b13      	ldr	r3, [pc, #76]	; (a690 <move_thread_to_end_of_prio_q+0x80>)
    a642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a644:	429c      	cmp	r4, r3
    a646:	d002      	beq.n	a64e <move_thread_to_end_of_prio_q+0x3e>
    a648:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a64a:	2c00      	cmp	r4, #0
    a64c:	d1f0      	bne.n	a630 <move_thread_to_end_of_prio_q+0x20>
 * @return N/A
 */

static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;
    a64e:	4b10      	ldr	r3, [pc, #64]	; (a690 <move_thread_to_end_of_prio_q+0x80>)
    a650:	6a5a      	ldr	r2, [r3, #36]	; 0x24

	node->next = list;
    a652:	f103 0120 	add.w	r1, r3, #32
    a656:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    a658:	606a      	str	r2, [r5, #4]

	tail->next = node;
    a65a:	6015      	str	r5, [r2, #0]
	list->tail = node;
    a65c:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(thread == _current);
    a65e:	4b0c      	ldr	r3, [pc, #48]	; (a690 <move_thread_to_end_of_prio_q+0x80>)
    a660:	6898      	ldr	r0, [r3, #8]
    a662:	42a8      	cmp	r0, r5
    a664:	bf14      	ite	ne
    a666:	2000      	movne	r0, #0
    a668:	2001      	moveq	r0, #1
    a66a:	f7ff ffab 	bl	a5c4 <update_cache>
}
    a66e:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a670:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    a674:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
    a676:	4601      	mov	r1, r0
    a678:	4806      	ldr	r0, [pc, #24]	; (a694 <move_thread_to_end_of_prio_q+0x84>)
    a67a:	f003 fcae 	bl	dfda <z_priq_dumb_remove>
}
    a67e:	e7ce      	b.n	a61e <move_thread_to_end_of_prio_q+0xe>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    a680:	6863      	ldr	r3, [r4, #4]

	node->prev = prev;
    a682:	606b      	str	r3, [r5, #4]
	node->next = successor;
    a684:	602c      	str	r4, [r5, #0]
	prev->next = node;
    a686:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    a688:	6065      	str	r5, [r4, #4]
}
    a68a:	e7e8      	b.n	a65e <move_thread_to_end_of_prio_q+0x4e>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a68c:	2400      	movs	r4, #0
    a68e:	e7cf      	b.n	a630 <move_thread_to_end_of_prio_q+0x20>
    a690:	200024ec 	.word	0x200024ec
    a694:	2000250c 	.word	0x2000250c

0000a698 <z_time_slice>:
{
    a698:	b510      	push	{r4, lr}
	__asm__ volatile(
    a69a:	f04f 0320 	mov.w	r3, #32
    a69e:	f3ef 8411 	mrs	r4, BASEPRI
    a6a2:	f383 8812 	msr	BASEPRI_MAX, r3
    a6a6:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    a6aa:	4b1c      	ldr	r3, [pc, #112]	; (a71c <z_time_slice+0x84>)
    a6ac:	689b      	ldr	r3, [r3, #8]
    a6ae:	4a1c      	ldr	r2, [pc, #112]	; (a720 <z_time_slice+0x88>)
    a6b0:	6812      	ldr	r2, [r2, #0]
    a6b2:	4293      	cmp	r3, r2
    a6b4:	d01d      	beq.n	a6f2 <z_time_slice+0x5a>
	pending_current = NULL;
    a6b6:	4a1a      	ldr	r2, [pc, #104]	; (a720 <z_time_slice+0x88>)
    a6b8:	2100      	movs	r1, #0
    a6ba:	6011      	str	r1, [r2, #0]
	if (slice_time && sliceable(_current)) {
    a6bc:	4a19      	ldr	r2, [pc, #100]	; (a724 <z_time_slice+0x8c>)
    a6be:	6812      	ldr	r2, [r2, #0]
    a6c0:	b322      	cbz	r2, a70c <z_time_slice+0x74>
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    a6c2:	89da      	ldrh	r2, [r3, #14]
		&& !z_is_idle_thread_object(thread);
    a6c4:	2a7f      	cmp	r2, #127	; 0x7f
    a6c6:	d821      	bhi.n	a70c <z_time_slice+0x74>
	uint8_t state = thread->base.thread_state;
    a6c8:	7b5a      	ldrb	r2, [r3, #13]
		&& !z_is_thread_prevented_from_running(thread)
    a6ca:	f012 0f1f 	tst.w	r2, #31
    a6ce:	d11d      	bne.n	a70c <z_time_slice+0x74>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    a6d0:	f993 100e 	ldrsb.w	r1, [r3, #14]
    a6d4:	4a14      	ldr	r2, [pc, #80]	; (a728 <z_time_slice+0x90>)
    a6d6:	6812      	ldr	r2, [r2, #0]
    a6d8:	4291      	cmp	r1, r2
    a6da:	db17      	blt.n	a70c <z_time_slice+0x74>
		&& !z_is_idle_thread_object(thread);
    a6dc:	4a13      	ldr	r2, [pc, #76]	; (a72c <z_time_slice+0x94>)
    a6de:	4293      	cmp	r3, r2
    a6e0:	d014      	beq.n	a70c <z_time_slice+0x74>
		if (ticks >= _current_cpu->slice_ticks) {
    a6e2:	4a0e      	ldr	r2, [pc, #56]	; (a71c <z_time_slice+0x84>)
    a6e4:	6912      	ldr	r2, [r2, #16]
    a6e6:	4282      	cmp	r2, r0
    a6e8:	dd0a      	ble.n	a700 <z_time_slice+0x68>
			_current_cpu->slice_ticks -= ticks;
    a6ea:	1a10      	subs	r0, r2, r0
    a6ec:	4b0b      	ldr	r3, [pc, #44]	; (a71c <z_time_slice+0x84>)
    a6ee:	6118      	str	r0, [r3, #16]
    a6f0:	e00f      	b.n	a712 <z_time_slice+0x7a>
		z_reset_time_slice();
    a6f2:	f7ff fee1 	bl	a4b8 <z_reset_time_slice>
	__asm__ volatile(
    a6f6:	f384 8811 	msr	BASEPRI, r4
    a6fa:	f3bf 8f6f 	isb	sy
		return;
    a6fe:	e00c      	b.n	a71a <z_time_slice+0x82>
			move_thread_to_end_of_prio_q(_current);
    a700:	4618      	mov	r0, r3
    a702:	f7ff ff85 	bl	a610 <move_thread_to_end_of_prio_q>
			z_reset_time_slice();
    a706:	f7ff fed7 	bl	a4b8 <z_reset_time_slice>
    a70a:	e002      	b.n	a712 <z_time_slice+0x7a>
		_current_cpu->slice_ticks = 0;
    a70c:	4b03      	ldr	r3, [pc, #12]	; (a71c <z_time_slice+0x84>)
    a70e:	2200      	movs	r2, #0
    a710:	611a      	str	r2, [r3, #16]
    a712:	f384 8811 	msr	BASEPRI, r4
    a716:	f3bf 8f6f 	isb	sy
}
    a71a:	bd10      	pop	{r4, pc}
    a71c:	200024ec 	.word	0x200024ec
    a720:	20002520 	.word	0x20002520
    a724:	20002528 	.word	0x20002528
    a728:	20002524 	.word	0x20002524
    a72c:	20000610 	.word	0x20000610

0000a730 <ready_thread>:
{
    a730:	b538      	push	{r3, r4, r5, lr}
	return (thread->base.thread_state & state) != 0U;
    a732:	7b43      	ldrb	r3, [r0, #13]
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    a734:	f990 200d 	ldrsb.w	r2, [r0, #13]
    a738:	2a00      	cmp	r2, #0
    a73a:	db2d      	blt.n	a798 <ready_thread+0x68>
    a73c:	4604      	mov	r4, r0
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    a73e:	f013 0f1f 	tst.w	r3, #31
    a742:	d105      	bne.n	a750 <ready_thread+0x20>
	return node->next != NULL;
    a744:	6982      	ldr	r2, [r0, #24]
    a746:	b10a      	cbz	r2, a74c <ready_thread+0x1c>
    a748:	2200      	movs	r2, #0
    a74a:	e002      	b.n	a752 <ready_thread+0x22>
    a74c:	2201      	movs	r2, #1
    a74e:	e000      	b.n	a752 <ready_thread+0x22>
    a750:	2200      	movs	r2, #0
    a752:	b30a      	cbz	r2, a798 <ready_thread+0x68>
	thread->base.thread_state |= _THREAD_QUEUED;
    a754:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a758:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    a75a:	4b14      	ldr	r3, [pc, #80]	; (a7ac <ready_thread+0x7c>)
    a75c:	f853 5f20 	ldr.w	r5, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a760:	429d      	cmp	r5, r3
    a762:	d020      	beq.n	a7a6 <ready_thread+0x76>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a764:	b16d      	cbz	r5, a782 <ready_thread+0x52>
		if (z_sched_prio_cmp(thread, t) > 0) {
    a766:	4629      	mov	r1, r5
    a768:	4620      	mov	r0, r4
    a76a:	f003 fbf8 	bl	df5e <z_sched_prio_cmp>
    a76e:	2800      	cmp	r0, #0
    a770:	dc13      	bgt.n	a79a <ready_thread+0x6a>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    a772:	b135      	cbz	r5, a782 <ready_thread+0x52>
	return (node == list->tail) ? NULL : node->next;
    a774:	4b0d      	ldr	r3, [pc, #52]	; (a7ac <ready_thread+0x7c>)
    a776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a778:	429d      	cmp	r5, r3
    a77a:	d002      	beq.n	a782 <ready_thread+0x52>
    a77c:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a77e:	2d00      	cmp	r5, #0
    a780:	d1f0      	bne.n	a764 <ready_thread+0x34>
	sys_dnode_t *const tail = list->tail;
    a782:	4b0a      	ldr	r3, [pc, #40]	; (a7ac <ready_thread+0x7c>)
    a784:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    a786:	f103 0120 	add.w	r1, r3, #32
    a78a:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    a78c:	6062      	str	r2, [r4, #4]
	tail->next = node;
    a78e:	6014      	str	r4, [r2, #0]
	list->tail = node;
    a790:	625c      	str	r4, [r3, #36]	; 0x24
		update_cache(0);
    a792:	2000      	movs	r0, #0
    a794:	f7ff ff16 	bl	a5c4 <update_cache>
}
    a798:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const prev = successor->prev;
    a79a:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    a79c:	6063      	str	r3, [r4, #4]
	node->next = successor;
    a79e:	6025      	str	r5, [r4, #0]
	prev->next = node;
    a7a0:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    a7a2:	606c      	str	r4, [r5, #4]
}
    a7a4:	e7f5      	b.n	a792 <ready_thread+0x62>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a7a6:	2500      	movs	r5, #0
    a7a8:	e7dc      	b.n	a764 <ready_thread+0x34>
    a7aa:	bf00      	nop
    a7ac:	200024ec 	.word	0x200024ec

0000a7b0 <z_sched_start>:
{
    a7b0:	b510      	push	{r4, lr}
	__asm__ volatile(
    a7b2:	f04f 0320 	mov.w	r3, #32
    a7b6:	f3ef 8411 	mrs	r4, BASEPRI
    a7ba:	f383 8812 	msr	BASEPRI_MAX, r3
    a7be:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    a7c2:	7b43      	ldrb	r3, [r0, #13]
	if (z_has_thread_started(thread)) {
    a7c4:	f013 0f04 	tst.w	r3, #4
    a7c8:	d104      	bne.n	a7d4 <z_sched_start+0x24>
	__asm__ volatile(
    a7ca:	f384 8811 	msr	BASEPRI, r4
    a7ce:	f3bf 8f6f 	isb	sy
}
    a7d2:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a7d4:	f023 0304 	bic.w	r3, r3, #4
    a7d8:	7343      	strb	r3, [r0, #13]
	ready_thread(thread);
    a7da:	f7ff ffa9 	bl	a730 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    a7de:	4621      	mov	r1, r4
    a7e0:	4801      	ldr	r0, [pc, #4]	; (a7e8 <z_sched_start+0x38>)
    a7e2:	f7ff febb 	bl	a55c <z_reschedule>
    a7e6:	e7f4      	b.n	a7d2 <z_sched_start+0x22>
    a7e8:	20002524 	.word	0x20002524

0000a7ec <unready_thread>:
{
    a7ec:	b510      	push	{r4, lr}
    a7ee:	4604      	mov	r4, r0
	return (thread->base.thread_state & state) != 0U;
    a7f0:	7b42      	ldrb	r2, [r0, #13]
	if (z_is_thread_queued(thread)) {
    a7f2:	f990 300d 	ldrsb.w	r3, [r0, #13]
    a7f6:	2b00      	cmp	r3, #0
    a7f8:	db08      	blt.n	a80c <unready_thread+0x20>
	update_cache(thread == _current);
    a7fa:	4b08      	ldr	r3, [pc, #32]	; (a81c <unready_thread+0x30>)
    a7fc:	6898      	ldr	r0, [r3, #8]
    a7fe:	42a0      	cmp	r0, r4
    a800:	bf14      	ite	ne
    a802:	2000      	movne	r0, #0
    a804:	2001      	moveq	r0, #1
    a806:	f7ff fedd 	bl	a5c4 <update_cache>
}
    a80a:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a80c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    a810:	7342      	strb	r2, [r0, #13]
		_priq_run_remove(pq, thread);
    a812:	4601      	mov	r1, r0
    a814:	4802      	ldr	r0, [pc, #8]	; (a820 <unready_thread+0x34>)
    a816:	f003 fbe0 	bl	dfda <z_priq_dumb_remove>
}
    a81a:	e7ee      	b.n	a7fa <unready_thread+0xe>
    a81c:	200024ec 	.word	0x200024ec
    a820:	2000250c 	.word	0x2000250c

0000a824 <z_pend_curr>:
{
    a824:	b510      	push	{r4, lr}
    a826:	460c      	mov	r4, r1
    a828:	4611      	mov	r1, r2
	pending_current = _current;
    a82a:	4b06      	ldr	r3, [pc, #24]	; (a844 <z_pend_curr+0x20>)
    a82c:	6898      	ldr	r0, [r3, #8]
    a82e:	4b06      	ldr	r3, [pc, #24]	; (a848 <z_pend_curr+0x24>)
    a830:	6018      	str	r0, [r3, #0]
	pend(_current, wait_q, timeout);
    a832:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    a836:	f003 fc7c 	bl	e132 <pend>
    a83a:	4620      	mov	r0, r4
    a83c:	f7f9 fa06 	bl	3c4c <arch_swap>
}
    a840:	bd10      	pop	{r4, pc}
    a842:	bf00      	nop
    a844:	200024ec 	.word	0x200024ec
    a848:	20002520 	.word	0x20002520

0000a84c <z_set_prio>:
{
    a84c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a850:	4604      	mov	r4, r0
    a852:	460f      	mov	r7, r1
	LOCKED(&sched_spinlock) {
    a854:	2300      	movs	r3, #0
	__asm__ volatile(
    a856:	f04f 0220 	mov.w	r2, #32
    a85a:	f3ef 8611 	mrs	r6, BASEPRI
    a85e:	f382 8812 	msr	BASEPRI_MAX, r2
    a862:	f3bf 8f6f 	isb	sy
	bool need_sched = 0;
    a866:	4698      	mov	r8, r3
    a868:	e008      	b.n	a87c <z_set_prio+0x30>
		if (need_sched) {
    a86a:	f012 0801 	ands.w	r8, r2, #1
    a86e:	d111      	bne.n	a894 <z_set_prio+0x48>
			thread->base.prio = prio;
    a870:	73a7      	strb	r7, [r4, #14]
	__asm__ volatile(
    a872:	f386 8811 	msr	BASEPRI, r6
    a876:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    a87a:	2301      	movs	r3, #1
    a87c:	461a      	mov	r2, r3
    a87e:	2b00      	cmp	r3, #0
    a880:	d13d      	bne.n	a8fe <z_set_prio+0xb2>
	uint8_t state = thread->base.thread_state;
    a882:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    a884:	f013 0f1f 	tst.w	r3, #31
    a888:	d1ef      	bne.n	a86a <z_set_prio+0x1e>
	return node->next != NULL;
    a88a:	69a1      	ldr	r1, [r4, #24]
    a88c:	2900      	cmp	r1, #0
    a88e:	d1ec      	bne.n	a86a <z_set_prio+0x1e>
    a890:	2201      	movs	r2, #1
    a892:	e7ea      	b.n	a86a <z_set_prio+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a894:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a898:	7363      	strb	r3, [r4, #13]
		_priq_run_remove(pq, thread);
    a89a:	f8df 906c 	ldr.w	r9, [pc, #108]	; a908 <z_set_prio+0xbc>
    a89e:	4621      	mov	r1, r4
    a8a0:	4648      	mov	r0, r9
    a8a2:	f003 fb9a 	bl	dfda <z_priq_dumb_remove>
				thread->base.prio = prio;
    a8a6:	73a7      	strb	r7, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    a8a8:	7b63      	ldrb	r3, [r4, #13]
    a8aa:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a8ae:	7363      	strb	r3, [r4, #13]
	return list->head == list;
    a8b0:	f8d9 5000 	ldr.w	r5, [r9]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a8b4:	454d      	cmp	r5, r9
    a8b6:	d020      	beq.n	a8fa <z_set_prio+0xae>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a8b8:	b16d      	cbz	r5, a8d6 <z_set_prio+0x8a>
		if (z_sched_prio_cmp(thread, t) > 0) {
    a8ba:	4629      	mov	r1, r5
    a8bc:	4620      	mov	r0, r4
    a8be:	f003 fb4e 	bl	df5e <z_sched_prio_cmp>
    a8c2:	2800      	cmp	r0, #0
    a8c4:	dc13      	bgt.n	a8ee <z_set_prio+0xa2>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    a8c6:	b135      	cbz	r5, a8d6 <z_set_prio+0x8a>
	return (node == list->tail) ? NULL : node->next;
    a8c8:	4b0e      	ldr	r3, [pc, #56]	; (a904 <z_set_prio+0xb8>)
    a8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    a8cc:	429d      	cmp	r5, r3
    a8ce:	d002      	beq.n	a8d6 <z_set_prio+0x8a>
    a8d0:	682d      	ldr	r5, [r5, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a8d2:	2d00      	cmp	r5, #0
    a8d4:	d1f0      	bne.n	a8b8 <z_set_prio+0x6c>
	sys_dnode_t *const tail = list->tail;
    a8d6:	4b0b      	ldr	r3, [pc, #44]	; (a904 <z_set_prio+0xb8>)
    a8d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    a8da:	f103 0120 	add.w	r1, r3, #32
    a8de:	6021      	str	r1, [r4, #0]
	node->prev = tail;
    a8e0:	6062      	str	r2, [r4, #4]
	tail->next = node;
    a8e2:	6014      	str	r4, [r2, #0]
	list->tail = node;
    a8e4:	625c      	str	r4, [r3, #36]	; 0x24
			update_cache(1);
    a8e6:	2001      	movs	r0, #1
    a8e8:	f7ff fe6c 	bl	a5c4 <update_cache>
    a8ec:	e7c1      	b.n	a872 <z_set_prio+0x26>
	sys_dnode_t *const prev = successor->prev;
    a8ee:	686b      	ldr	r3, [r5, #4]
	node->prev = prev;
    a8f0:	6063      	str	r3, [r4, #4]
	node->next = successor;
    a8f2:	6025      	str	r5, [r4, #0]
	prev->next = node;
    a8f4:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    a8f6:	606c      	str	r4, [r5, #4]
}
    a8f8:	e7f5      	b.n	a8e6 <z_set_prio+0x9a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a8fa:	2500      	movs	r5, #0
    a8fc:	e7dc      	b.n	a8b8 <z_set_prio+0x6c>
}
    a8fe:	4640      	mov	r0, r8
    a900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a904:	200024ec 	.word	0x200024ec
    a908:	2000250c 	.word	0x2000250c

0000a90c <z_impl_k_thread_suspend>:
{
    a90c:	b538      	push	{r3, r4, r5, lr}
    a90e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    a910:	3018      	adds	r0, #24
    a912:	f003 fce0 	bl	e2d6 <z_abort_timeout>
	LOCKED(&sched_spinlock) {
    a916:	2300      	movs	r3, #0
	__asm__ volatile(
    a918:	f04f 0220 	mov.w	r2, #32
    a91c:	f3ef 8511 	mrs	r5, BASEPRI
    a920:	f382 8812 	msr	BASEPRI_MAX, r2
    a924:	f3bf 8f6f 	isb	sy
    a928:	e010      	b.n	a94c <z_impl_k_thread_suspend+0x40>
	thread->base.thread_state |= _THREAD_SUSPENDED;
    a92a:	7b63      	ldrb	r3, [r4, #13]
    a92c:	f043 0310 	orr.w	r3, r3, #16
    a930:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
    a932:	4b15      	ldr	r3, [pc, #84]	; (a988 <z_impl_k_thread_suspend+0x7c>)
    a934:	6898      	ldr	r0, [r3, #8]
    a936:	42a0      	cmp	r0, r4
    a938:	bf14      	ite	ne
    a93a:	2000      	movne	r0, #0
    a93c:	2001      	moveq	r0, #1
    a93e:	f7ff fe41 	bl	a5c4 <update_cache>
	__asm__ volatile(
    a942:	f385 8811 	msr	BASEPRI, r5
    a946:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    a94a:	2301      	movs	r3, #1
    a94c:	b963      	cbnz	r3, a968 <z_impl_k_thread_suspend+0x5c>
	return (thread->base.thread_state & state) != 0U;
    a94e:	7b62      	ldrb	r2, [r4, #13]
		if (z_is_thread_queued(thread)) {
    a950:	f994 300d 	ldrsb.w	r3, [r4, #13]
    a954:	2b00      	cmp	r3, #0
    a956:	dae8      	bge.n	a92a <z_impl_k_thread_suspend+0x1e>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a958:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    a95c:	7362      	strb	r2, [r4, #13]
		_priq_run_remove(pq, thread);
    a95e:	4621      	mov	r1, r4
    a960:	480a      	ldr	r0, [pc, #40]	; (a98c <z_impl_k_thread_suspend+0x80>)
    a962:	f003 fb3a 	bl	dfda <z_priq_dumb_remove>
}
    a966:	e7e0      	b.n	a92a <z_impl_k_thread_suspend+0x1e>
	if (thread == _current) {
    a968:	4b07      	ldr	r3, [pc, #28]	; (a988 <z_impl_k_thread_suspend+0x7c>)
    a96a:	689b      	ldr	r3, [r3, #8]
    a96c:	42a3      	cmp	r3, r4
    a96e:	d000      	beq.n	a972 <z_impl_k_thread_suspend+0x66>
}
    a970:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    a972:	f04f 0320 	mov.w	r3, #32
    a976:	f3ef 8011 	mrs	r0, BASEPRI
    a97a:	f383 8812 	msr	BASEPRI_MAX, r3
    a97e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    a982:	f003 fb15 	bl	dfb0 <z_reschedule_irqlock>
    a986:	e7f3      	b.n	a970 <z_impl_k_thread_suspend+0x64>
    a988:	200024ec 	.word	0x200024ec
    a98c:	2000250c 	.word	0x2000250c

0000a990 <k_sched_unlock>:

void k_sched_unlock(void)
{
    a990:	b510      	push	{r4, lr}
	LOCKED(&sched_spinlock) {
    a992:	2300      	movs	r3, #0
    a994:	f04f 0220 	mov.w	r2, #32
    a998:	f3ef 8411 	mrs	r4, BASEPRI
    a99c:	f382 8812 	msr	BASEPRI_MAX, r2
    a9a0:	f3bf 8f6f 	isb	sy
    a9a4:	b96b      	cbnz	r3, a9c2 <k_sched_unlock+0x32>
		__ASSERT(_current->base.sched_locked != 0U, "");
		__ASSERT(!arch_is_in_isr(), "");

		++_current->base.sched_locked;
    a9a6:	4b0c      	ldr	r3, [pc, #48]	; (a9d8 <k_sched_unlock+0x48>)
    a9a8:	689a      	ldr	r2, [r3, #8]
    a9aa:	7bd3      	ldrb	r3, [r2, #15]
    a9ac:	3301      	adds	r3, #1
    a9ae:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    a9b0:	2000      	movs	r0, #0
    a9b2:	f7ff fe07 	bl	a5c4 <update_cache>
	__asm__ volatile(
    a9b6:	f384 8811 	msr	BASEPRI, r4
    a9ba:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    a9be:	2301      	movs	r3, #1
    a9c0:	e7f0      	b.n	a9a4 <k_sched_unlock+0x14>
	__asm__ volatile(
    a9c2:	f04f 0320 	mov.w	r3, #32
    a9c6:	f3ef 8011 	mrs	r0, BASEPRI
    a9ca:	f383 8812 	msr	BASEPRI_MAX, r3
    a9ce:	f3bf 8f6f 	isb	sy
    a9d2:	f003 faed 	bl	dfb0 <z_reschedule_irqlock>
		_current, _current->base.sched_locked);

	SYS_PORT_TRACING_FUNC(k_thread, sched_unlock);

	z_reschedule_unlocked();
}
    a9d6:	bd10      	pop	{r4, pc}
    a9d8:	200024ec 	.word	0x200024ec

0000a9dc <end_thread>:
#ifdef CONFIG_CMSIS_RTOS_V1
extern void z_thread_cmsis_status_mask_clear(struct k_thread *thread);
#endif

static void end_thread(struct k_thread *thread)
{
    a9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* We hold the lock, and the thread is known not to be running
	 * anywhere.
	 */
	if ((thread->base.thread_state & _THREAD_DEAD) == 0U) {
    a9de:	7b43      	ldrb	r3, [r0, #13]
    a9e0:	f013 0f08 	tst.w	r3, #8
    a9e4:	d145      	bne.n	aa72 <end_thread+0x96>
    a9e6:	4605      	mov	r5, r0
		thread->base.thread_state |= _THREAD_DEAD;
    a9e8:	f043 0308 	orr.w	r3, r3, #8
		thread->base.thread_state &= ~_THREAD_ABORTING;
    a9ec:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    a9f0:	7343      	strb	r3, [r0, #13]
		if (z_is_thread_queued(thread)) {
    a9f2:	f013 0f80 	tst.w	r3, #128	; 0x80
    a9f6:	d114      	bne.n	aa22 <end_thread+0x46>
			dequeue_thread(&_kernel.ready_q.runq, thread);
		}
		if (thread->base.pended_on != NULL) {
    a9f8:	68ab      	ldr	r3, [r5, #8]
    a9fa:	b15b      	cbz	r3, aa14 <end_thread+0x38>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    a9fc:	4628      	mov	r0, r5
    a9fe:	f003 faac 	bl	df5a <pended_on_thread>
    aa02:	4629      	mov	r1, r5
    aa04:	f003 fae9 	bl	dfda <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    aa08:	7b6b      	ldrb	r3, [r5, #13]
    aa0a:	f023 0302 	bic.w	r3, r3, #2
    aa0e:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    aa10:	2300      	movs	r3, #0
    aa12:	60ab      	str	r3, [r5, #8]
    aa14:	f105 0018 	add.w	r0, r5, #24
    aa18:	f003 fc5d 	bl	e2d6 <z_abort_timeout>
			unpend_thread_no_timeout(thread);
		}
		(void)z_abort_thread_timeout(thread);
		unpend_all(&thread->join_queue);
    aa1c:	f105 0758 	add.w	r7, r5, #88	; 0x58
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    aa20:	e01c      	b.n	aa5c <end_thread+0x80>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    aa22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    aa26:	7343      	strb	r3, [r0, #13]
		_priq_run_remove(pq, thread);
    aa28:	4601      	mov	r1, r0
    aa2a:	4812      	ldr	r0, [pc, #72]	; (aa74 <end_thread+0x98>)
    aa2c:	f003 fad5 	bl	dfda <z_priq_dumb_remove>
}
    aa30:	e7e2      	b.n	a9f8 <end_thread+0x1c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    aa32:	4620      	mov	r0, r4
    aa34:	f003 fa91 	bl	df5a <pended_on_thread>
    aa38:	4621      	mov	r1, r4
    aa3a:	f003 face 	bl	dfda <z_priq_dumb_remove>
    aa3e:	7b63      	ldrb	r3, [r4, #13]
    aa40:	f023 0302 	bic.w	r3, r3, #2
    aa44:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    aa46:	2600      	movs	r6, #0
    aa48:	60a6      	str	r6, [r4, #8]
    aa4a:	f104 0018 	add.w	r0, r4, #24
    aa4e:	f003 fc42 	bl	e2d6 <z_abort_timeout>
    aa52:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
		ready_thread(thread);
    aa56:	4620      	mov	r0, r4
    aa58:	f7ff fe6a 	bl	a730 <ready_thread>
	return list->head == list;
    aa5c:	683c      	ldr	r4, [r7, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    aa5e:	42bc      	cmp	r4, r7
    aa60:	d001      	beq.n	aa66 <end_thread+0x8a>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    aa62:	2c00      	cmp	r4, #0
    aa64:	d1e5      	bne.n	aa32 <end_thread+0x56>
		update_cache(1);
    aa66:	2001      	movs	r0, #1
    aa68:	f7ff fdac 	bl	a5c4 <update_cache>

		SYS_PORT_TRACING_FUNC(k_thread, sched_abort, thread);

		z_thread_monitor_exit(thread);
    aa6c:	4628      	mov	r0, r5
    aa6e:	f7ff f959 	bl	9d24 <z_thread_monitor_exit>
		z_thread_perms_all_clear(thread);
		z_object_uninit(thread->stack_obj);
		z_object_uninit(thread);
#endif
	}
}
    aa72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    aa74:	2000250c 	.word	0x2000250c

0000aa78 <z_sched_init>:
{
    aa78:	b508      	push	{r3, lr}
	list->head = (sys_dnode_t *)list;
    aa7a:	4b05      	ldr	r3, [pc, #20]	; (aa90 <z_sched_init+0x18>)
    aa7c:	f103 0220 	add.w	r2, r3, #32
    aa80:	621a      	str	r2, [r3, #32]
	list->tail = (sys_dnode_t *)list;
    aa82:	625a      	str	r2, [r3, #36]	; 0x24
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    aa84:	2100      	movs	r1, #0
    aa86:	4608      	mov	r0, r1
    aa88:	f7ff fd2c 	bl	a4e4 <k_sched_time_slice_set>
}
    aa8c:	bd08      	pop	{r3, pc}
    aa8e:	bf00      	nop
    aa90:	200024ec 	.word	0x200024ec

0000aa94 <z_impl_k_yield>:
{
    aa94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aa96:	f04f 0320 	mov.w	r3, #32
    aa9a:	f3ef 8611 	mrs	r6, BASEPRI
    aa9e:	f383 8812 	msr	BASEPRI_MAX, r3
    aaa2:	f3bf 8f6f 	isb	sy
		dequeue_thread(&_kernel.ready_q.runq,
    aaa6:	4c1c      	ldr	r4, [pc, #112]	; (ab18 <z_impl_k_yield+0x84>)
    aaa8:	68a1      	ldr	r1, [r4, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    aaaa:	7b4b      	ldrb	r3, [r1, #13]
    aaac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    aab0:	734b      	strb	r3, [r1, #13]
		_priq_run_remove(pq, thread);
    aab2:	f104 0720 	add.w	r7, r4, #32
    aab6:	4638      	mov	r0, r7
    aab8:	f003 fa8f 	bl	dfda <z_priq_dumb_remove>
	queue_thread(&_kernel.ready_q.runq, _current);
    aabc:	68a5      	ldr	r5, [r4, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    aabe:	7b6b      	ldrb	r3, [r5, #13]
    aac0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    aac4:	736b      	strb	r3, [r5, #13]
	return list->head == list;
    aac6:	6a24      	ldr	r4, [r4, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    aac8:	42bc      	cmp	r4, r7
    aaca:	d023      	beq.n	ab14 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    aacc:	b16c      	cbz	r4, aaea <z_impl_k_yield+0x56>
		if (z_sched_prio_cmp(thread, t) > 0) {
    aace:	4621      	mov	r1, r4
    aad0:	4628      	mov	r0, r5
    aad2:	f003 fa44 	bl	df5e <z_sched_prio_cmp>
    aad6:	2800      	cmp	r0, #0
    aad8:	dc16      	bgt.n	ab08 <z_impl_k_yield+0x74>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    aada:	b134      	cbz	r4, aaea <z_impl_k_yield+0x56>
	return (node == list->tail) ? NULL : node->next;
    aadc:	4b0e      	ldr	r3, [pc, #56]	; (ab18 <z_impl_k_yield+0x84>)
    aade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    aae0:	429c      	cmp	r4, r3
    aae2:	d002      	beq.n	aaea <z_impl_k_yield+0x56>
    aae4:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    aae6:	2c00      	cmp	r4, #0
    aae8:	d1f0      	bne.n	aacc <z_impl_k_yield+0x38>
	sys_dnode_t *const tail = list->tail;
    aaea:	4b0b      	ldr	r3, [pc, #44]	; (ab18 <z_impl_k_yield+0x84>)
    aaec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
	node->next = list;
    aaee:	f103 0120 	add.w	r1, r3, #32
    aaf2:	6029      	str	r1, [r5, #0]
	node->prev = tail;
    aaf4:	606a      	str	r2, [r5, #4]
	tail->next = node;
    aaf6:	6015      	str	r5, [r2, #0]
	list->tail = node;
    aaf8:	625d      	str	r5, [r3, #36]	; 0x24
	update_cache(1);
    aafa:	2001      	movs	r0, #1
    aafc:	f7ff fd62 	bl	a5c4 <update_cache>
    ab00:	4630      	mov	r0, r6
    ab02:	f7f9 f8a3 	bl	3c4c <arch_swap>
}
    ab06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	sys_dnode_t *const prev = successor->prev;
    ab08:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    ab0a:	606b      	str	r3, [r5, #4]
	node->next = successor;
    ab0c:	602c      	str	r4, [r5, #0]
	prev->next = node;
    ab0e:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    ab10:	6065      	str	r5, [r4, #4]
}
    ab12:	e7f2      	b.n	aafa <z_impl_k_yield+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ab14:	2400      	movs	r4, #0
    ab16:	e7d9      	b.n	aacc <z_impl_k_yield+0x38>
    ab18:	200024ec 	.word	0x200024ec

0000ab1c <z_tick_sleep>:
{
    ab1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ab20:	4604      	mov	r4, r0
    ab22:	460d      	mov	r5, r1
	if (ticks == 0) {
    ab24:	ea54 0105 	orrs.w	r1, r4, r5
    ab28:	d037      	beq.n	ab9a <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    ab2a:	f06f 0101 	mvn.w	r1, #1
    ab2e:	1a0a      	subs	r2, r1, r0
    ab30:	f04f 31ff 	mov.w	r1, #4294967295
    ab34:	eb61 0305 	sbc.w	r3, r1, r5
    ab38:	2a01      	cmp	r2, #1
    ab3a:	f173 0300 	sbcs.w	r3, r3, #0
    ab3e:	db30      	blt.n	aba2 <z_tick_sleep+0x86>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    ab40:	f06f 0601 	mvn.w	r6, #1
    ab44:	1a36      	subs	r6, r6, r0
    ab46:	f04f 0320 	mov.w	r3, #32
    ab4a:	f3ef 8811 	mrs	r8, BASEPRI
    ab4e:	f383 8812 	msr	BASEPRI_MAX, r3
    ab52:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    ab56:	4f16      	ldr	r7, [pc, #88]	; (abb0 <z_tick_sleep+0x94>)
    ab58:	68b8      	ldr	r0, [r7, #8]
    ab5a:	4b16      	ldr	r3, [pc, #88]	; (abb4 <z_tick_sleep+0x98>)
    ab5c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    ab5e:	f7ff fe45 	bl	a7ec <unready_thread>
	z_add_thread_timeout(_current, timeout);
    ab62:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    ab64:	4622      	mov	r2, r4
    ab66:	462b      	mov	r3, r5
    ab68:	4913      	ldr	r1, [pc, #76]	; (abb8 <z_tick_sleep+0x9c>)
    ab6a:	3018      	adds	r0, #24
    ab6c:	f000 f904 	bl	ad78 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    ab70:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    ab72:	7b53      	ldrb	r3, [r2, #13]
    ab74:	f043 0310 	orr.w	r3, r3, #16
    ab78:	7353      	strb	r3, [r2, #13]
    ab7a:	4640      	mov	r0, r8
    ab7c:	f7f9 f866 	bl	3c4c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    ab80:	2500      	movs	r5, #0
    ab82:	f003 fc07 	bl	e394 <sys_clock_tick_get_32>
    ab86:	1a34      	subs	r4, r6, r0
    ab88:	f165 0500 	sbc.w	r5, r5, #0
	if (ticks > 0) {
    ab8c:	2c01      	cmp	r4, #1
    ab8e:	f175 0300 	sbcs.w	r3, r5, #0
    ab92:	da0a      	bge.n	abaa <z_tick_sleep+0x8e>
	return 0;
    ab94:	2000      	movs	r0, #0
}
    ab96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	z_impl_k_yield();
    ab9a:	f7ff ff7b 	bl	aa94 <z_impl_k_yield>
		return 0;
    ab9e:	2000      	movs	r0, #0
    aba0:	e7f9      	b.n	ab96 <z_tick_sleep+0x7a>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    aba2:	f003 fbf7 	bl	e394 <sys_clock_tick_get_32>
    aba6:	1906      	adds	r6, r0, r4
    aba8:	e7cd      	b.n	ab46 <z_tick_sleep+0x2a>
		return ticks;
    abaa:	4620      	mov	r0, r4
    abac:	e7f3      	b.n	ab96 <z_tick_sleep+0x7a>
    abae:	bf00      	nop
    abb0:	200024ec 	.word	0x200024ec
    abb4:	20002520 	.word	0x20002520
    abb8:	0000e077 	.word	0x0000e077

0000abbc <z_impl_k_sleep>:
{
    abbc:	b538      	push	{r3, r4, r5, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    abbe:	f1b1 3fff 	cmp.w	r1, #4294967295
    abc2:	bf08      	it	eq
    abc4:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    abc8:	d01a      	beq.n	ac00 <z_impl_k_sleep+0x44>
	ticks = z_tick_sleep(ticks);
    abca:	f7ff ffa7 	bl	ab1c <z_tick_sleep>
	int32_t ret = k_ticks_to_ms_floor64(ticks);
    abce:	4604      	mov	r4, r0
    abd0:	17c5      	asrs	r5, r0, #31
			return (t * to_hz + off) / from_hz;
    abd2:	0169      	lsls	r1, r5, #5
    abd4:	0143      	lsls	r3, r0, #5
    abd6:	ea41 62d0 	orr.w	r2, r1, r0, lsr #27
    abda:	1a18      	subs	r0, r3, r0
    abdc:	eb62 0305 	sbc.w	r3, r2, r5
    abe0:	009a      	lsls	r2, r3, #2
    abe2:	ea42 7290 	orr.w	r2, r2, r0, lsr #30
    abe6:	0081      	lsls	r1, r0, #2
    abe8:	4613      	mov	r3, r2
    abea:	1908      	adds	r0, r1, r4
    abec:	eb45 0303 	adc.w	r3, r5, r3
    abf0:	00da      	lsls	r2, r3, #3
    abf2:	ea42 7250 	orr.w	r2, r2, r0, lsr #29
    abf6:	00c1      	lsls	r1, r0, #3
    abf8:	0bc8      	lsrs	r0, r1, #15
    abfa:	ea40 4042 	orr.w	r0, r0, r2, lsl #17
}
    abfe:	bd38      	pop	{r3, r4, r5, pc}
		k_thread_suspend(_current);
    ac00:	4b03      	ldr	r3, [pc, #12]	; (ac10 <z_impl_k_sleep+0x54>)
    ac02:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    ac04:	f7ff fe82 	bl	a90c <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
    ac08:	f04f 30ff 	mov.w	r0, #4294967295
    ac0c:	e7f7      	b.n	abfe <z_impl_k_sleep+0x42>
    ac0e:	bf00      	nop
    ac10:	200024ec 	.word	0x200024ec

0000ac14 <z_impl_z_current_get>:
}
    ac14:	4b01      	ldr	r3, [pc, #4]	; (ac1c <z_impl_z_current_get+0x8>)
    ac16:	6898      	ldr	r0, [r3, #8]
    ac18:	4770      	bx	lr
    ac1a:	bf00      	nop
    ac1c:	200024ec 	.word	0x200024ec

0000ac20 <z_impl_k_is_preempt_thread>:
    ac20:	f3ef 8305 	mrs	r3, IPSR
	return !arch_is_in_isr() && is_preempt(_current);
    ac24:	b933      	cbnz	r3, ac34 <z_impl_k_is_preempt_thread+0x14>
    ac26:	4b05      	ldr	r3, [pc, #20]	; (ac3c <z_impl_k_is_preempt_thread+0x1c>)
    ac28:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
    ac2a:	89db      	ldrh	r3, [r3, #14]
	return !arch_is_in_isr() && is_preempt(_current);
    ac2c:	2b7f      	cmp	r3, #127	; 0x7f
    ac2e:	d803      	bhi.n	ac38 <z_impl_k_is_preempt_thread+0x18>
    ac30:	2001      	movs	r0, #1
    ac32:	4770      	bx	lr
    ac34:	2000      	movs	r0, #0
    ac36:	4770      	bx	lr
    ac38:	2000      	movs	r0, #0
}
    ac3a:	4770      	bx	lr
    ac3c:	200024ec 	.word	0x200024ec

0000ac40 <z_thread_abort>:

void z_thread_abort(struct k_thread *thread)
{
    ac40:	b538      	push	{r3, r4, r5, lr}
    ac42:	f04f 0320 	mov.w	r3, #32
    ac46:	f3ef 8511 	mrs	r5, BASEPRI
    ac4a:	f383 8812 	msr	BASEPRI_MAX, r3
    ac4e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    ac52:	7b43      	ldrb	r3, [r0, #13]
    ac54:	f013 0f08 	tst.w	r3, #8
    ac58:	d004      	beq.n	ac64 <z_thread_abort+0x24>
	__asm__ volatile(
    ac5a:	f385 8811 	msr	BASEPRI, r5
    ac5e:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    ac62:	bd38      	pop	{r3, r4, r5, pc}
    ac64:	4604      	mov	r4, r0
	end_thread(thread);
    ac66:	f7ff feb9 	bl	a9dc <end_thread>
	if (thread == _current && !arch_is_in_isr()) {
    ac6a:	4b08      	ldr	r3, [pc, #32]	; (ac8c <z_thread_abort+0x4c>)
    ac6c:	689b      	ldr	r3, [r3, #8]
    ac6e:	42a3      	cmp	r3, r4
    ac70:	d004      	beq.n	ac7c <z_thread_abort+0x3c>
    ac72:	f385 8811 	msr	BASEPRI, r5
    ac76:	f3bf 8f6f 	isb	sy
    ac7a:	e7f2      	b.n	ac62 <z_thread_abort+0x22>
    ac7c:	f3ef 8305 	mrs	r3, IPSR
    ac80:	2b00      	cmp	r3, #0
    ac82:	d1f6      	bne.n	ac72 <z_thread_abort+0x32>
    ac84:	4628      	mov	r0, r5
    ac86:	f7f8 ffe1 	bl	3c4c <arch_swap>
	return ret;
    ac8a:	e7f2      	b.n	ac72 <z_thread_abort+0x32>
    ac8c:	200024ec 	.word	0x200024ec

0000ac90 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    ac90:	b5d0      	push	{r4, r6, r7, lr}
    ac92:	b082      	sub	sp, #8
    ac94:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    ac96:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
    ac9a:	e9cd 6700 	strd	r6, r7, [sp]
    ac9e:	f7ff fdc1 	bl	a824 <z_pend_curr>

	if (data != NULL) {
    aca2:	b11c      	cbz	r4, acac <z_sched_wait+0x1c>
		*data = _current->base.swap_data;
    aca4:	4b02      	ldr	r3, [pc, #8]	; (acb0 <z_sched_wait+0x20>)
    aca6:	689b      	ldr	r3, [r3, #8]
    aca8:	695b      	ldr	r3, [r3, #20]
    acaa:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    acac:	b002      	add	sp, #8
    acae:	bdd0      	pop	{r4, r6, r7, pc}
    acb0:	200024ec 	.word	0x200024ec

0000acb4 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    acb4:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    acb6:	4806      	ldr	r0, [pc, #24]	; (acd0 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    acb8:	4a06      	ldr	r2, [pc, #24]	; (acd4 <z_data_copy+0x20>)
    acba:	1a12      	subs	r2, r2, r0
    acbc:	4906      	ldr	r1, [pc, #24]	; (acd8 <z_data_copy+0x24>)
    acbe:	f002 f9e2 	bl	d086 <memcpy>
#ifdef CONFIG_ARCH_HAS_RAMFUNC_SUPPORT
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    acc2:	4a06      	ldr	r2, [pc, #24]	; (acdc <z_data_copy+0x28>)
    acc4:	4906      	ldr	r1, [pc, #24]	; (ace0 <z_data_copy+0x2c>)
    acc6:	4807      	ldr	r0, [pc, #28]	; (ace4 <z_data_copy+0x30>)
    acc8:	f002 f9dd 	bl	d086 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    accc:	bd08      	pop	{r3, pc}
    acce:	bf00      	nop
    acd0:	20000000 	.word	0x20000000
    acd4:	20000368 	.word	0x20000368
    acd8:	0000faf0 	.word	0x0000faf0
    acdc:	00000000 	.word	0x00000000
    ace0:	0000faf0 	.word	0x0000faf0
    ace4:	20000000 	.word	0x20000000

0000ace8 <first>:
	return list->head == list;
    ace8:	4b03      	ldr	r3, [pc, #12]	; (acf8 <first+0x10>)
    acea:	6818      	ldr	r0, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    acec:	4298      	cmp	r0, r3
    acee:	d000      	beq.n	acf2 <first+0xa>
static struct _timeout *first(void)
{
	sys_dnode_t *t = sys_dlist_peek_head(&timeout_list);

	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
}
    acf0:	4770      	bx	lr
    acf2:	2000      	movs	r0, #0
	return t == NULL ? NULL : CONTAINER_OF(t, struct _timeout, node);
    acf4:	e7fc      	b.n	acf0 <first+0x8>
    acf6:	bf00      	nop
    acf8:	20000138 	.word	0x20000138

0000acfc <next>:
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    acfc:	b130      	cbz	r0, ad0c <next+0x10>
	return (node == list->tail) ? NULL : node->next;
    acfe:	4a04      	ldr	r2, [pc, #16]	; (ad10 <next+0x14>)
    ad00:	6852      	ldr	r2, [r2, #4]
    ad02:	4290      	cmp	r0, r2
    ad04:	d001      	beq.n	ad0a <next+0xe>
    ad06:	6800      	ldr	r0, [r0, #0]
    ad08:	4770      	bx	lr
    ad0a:	2000      	movs	r0, #0
static struct _timeout *next(struct _timeout *t)
{
	sys_dnode_t *n = sys_dlist_peek_next(&timeout_list, &t->node);

	return n == NULL ? NULL : CONTAINER_OF(n, struct _timeout, node);
}
    ad0c:	4770      	bx	lr
    ad0e:	bf00      	nop
    ad10:	20000138 	.word	0x20000138

0000ad14 <elapsed>:

	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
    ad14:	b508      	push	{r3, lr}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    ad16:	4b04      	ldr	r3, [pc, #16]	; (ad28 <elapsed+0x14>)
    ad18:	681b      	ldr	r3, [r3, #0]
    ad1a:	b10b      	cbz	r3, ad20 <elapsed+0xc>
    ad1c:	2000      	movs	r0, #0
}
    ad1e:	bd08      	pop	{r3, pc}
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    ad20:	f7fc fa48 	bl	71b4 <sys_clock_elapsed>
    ad24:	e7fb      	b.n	ad1e <elapsed+0xa>
    ad26:	bf00      	nop
    ad28:	2000252c 	.word	0x2000252c

0000ad2c <next_timeout>:

static int32_t next_timeout(void)
{
    ad2c:	b510      	push	{r4, lr}
	struct _timeout *to = first();
    ad2e:	f7ff ffdb 	bl	ace8 <first>
    ad32:	4604      	mov	r4, r0
	int32_t ticks_elapsed = elapsed();
    ad34:	f7ff ffee 	bl	ad14 <elapsed>
	int32_t ret = to == NULL ? MAX_WAIT
    ad38:	b18c      	cbz	r4, ad5e <next_timeout+0x32>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    ad3a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    ad3e:	1a12      	subs	r2, r2, r0
    ad40:	eb63 73e0 	sbc.w	r3, r3, r0, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    ad44:	2a01      	cmp	r2, #1
    ad46:	f173 0100 	sbcs.w	r1, r3, #0
    ad4a:	db11      	blt.n	ad70 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    ad4c:	4610      	mov	r0, r2
    ad4e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    ad52:	f173 0300 	sbcs.w	r3, r3, #0
    ad56:	db04      	blt.n	ad62 <next_timeout+0x36>
    ad58:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    ad5c:	e001      	b.n	ad62 <next_timeout+0x36>
	int32_t ret = to == NULL ? MAX_WAIT
    ad5e:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    ad62:	4b04      	ldr	r3, [pc, #16]	; (ad74 <next_timeout+0x48>)
    ad64:	691b      	ldr	r3, [r3, #16]
    ad66:	b113      	cbz	r3, ad6e <next_timeout+0x42>
    ad68:	4283      	cmp	r3, r0
    ad6a:	da00      	bge.n	ad6e <next_timeout+0x42>
		ret = _current_cpu->slice_ticks;
    ad6c:	4618      	mov	r0, r3
	}
#endif
	return ret;
}
    ad6e:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    ad70:	2000      	movs	r0, #0
    ad72:	e7f6      	b.n	ad62 <next_timeout+0x36>
    ad74:	200024ec 	.word	0x200024ec

0000ad78 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    ad78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ad7c:	b083      	sub	sp, #12
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    ad7e:	f1b3 3fff 	cmp.w	r3, #4294967295
    ad82:	bf08      	it	eq
    ad84:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    ad88:	f000 8096 	beq.w	aeb8 <z_add_timeout+0x140>
    ad8c:	4682      	mov	sl, r0
    ad8e:	4614      	mov	r4, r2
    ad90:	461d      	mov	r5, r3
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    ad92:	6081      	str	r1, [r0, #8]

	LOCKED(&timeout_lock) {
    ad94:	2300      	movs	r3, #0
	__asm__ volatile(
    ad96:	f04f 0220 	mov.w	r2, #32
    ad9a:	f3ef 8b11 	mrs	fp, BASEPRI
    ad9e:	f382 8812 	msr	BASEPRI_MAX, r2
    ada2:	f3bf 8f6f 	isb	sy
    ada6:	e02e      	b.n	ae06 <z_add_timeout+0x8e>

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;

			to->dticks = MAX(1, ticks);
    ada8:	2201      	movs	r2, #1
    adaa:	2300      	movs	r3, #0
    adac:	e04b      	b.n	ae46 <z_add_timeout+0xce>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    adae:	f7ff ffb1 	bl	ad14 <elapsed>
    adb2:	1822      	adds	r2, r4, r0
    adb4:	eb45 73e0 	adc.w	r3, r5, r0, asr #31
    adb8:	3201      	adds	r2, #1
    adba:	f143 0300 	adc.w	r3, r3, #0
    adbe:	f8ca 2010 	str.w	r2, [sl, #16]
    adc2:	f8ca 3014 	str.w	r3, [sl, #20]
    adc6:	e042      	b.n	ae4e <z_add_timeout+0xd6>
		}

		for (t = first(); t != NULL; t = next(t)) {
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
    adc8:	9b00      	ldr	r3, [sp, #0]
    adca:	1ac2      	subs	r2, r0, r3
    adcc:	9b01      	ldr	r3, [sp, #4]
    adce:	eb61 0303 	sbc.w	r3, r1, r3
    add2:	f8cc 2010 	str.w	r2, [ip, #16]
    add6:	f8cc 3014 	str.w	r3, [ip, #20]
	sys_dnode_t *const prev = successor->prev;
    adda:	f8dc 3004 	ldr.w	r3, [ip, #4]
	node->prev = prev;
    adde:	f8ca 3004 	str.w	r3, [sl, #4]
	node->next = successor;
    ade2:	f8ca c000 	str.w	ip, [sl]
	prev->next = node;
    ade6:	f8c3 a000 	str.w	sl, [r3]
	successor->prev = node;
    adea:	f8cc a004 	str.w	sl, [ip, #4]
				break;
			}
			to->dticks -= t->dticks;
		}

		if (t == NULL) {
    adee:	f1bc 0f00 	cmp.w	ip, #0
    adf2:	d049      	beq.n	ae88 <z_add_timeout+0x110>
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    adf4:	f7ff ff78 	bl	ace8 <first>
    adf8:	4582      	cmp	sl, r0
    adfa:	d050      	beq.n	ae9e <z_add_timeout+0x126>
	__asm__ volatile(
    adfc:	f38b 8811 	msr	BASEPRI, fp
    ae00:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    ae04:	2301      	movs	r3, #1
    ae06:	2b00      	cmp	r3, #0
    ae08:	d156      	bne.n	aeb8 <z_add_timeout+0x140>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    ae0a:	f06f 0301 	mvn.w	r3, #1
    ae0e:	ebb3 0804 	subs.w	r8, r3, r4
    ae12:	f04f 30ff 	mov.w	r0, #4294967295
    ae16:	eb60 0905 	sbc.w	r9, r0, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    ae1a:	f1b8 0f00 	cmp.w	r8, #0
    ae1e:	f179 0300 	sbcs.w	r3, r9, #0
    ae22:	dbc4      	blt.n	adae <z_add_timeout+0x36>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    ae24:	4a26      	ldr	r2, [pc, #152]	; (aec0 <z_add_timeout+0x148>)
    ae26:	6813      	ldr	r3, [r2, #0]
    ae28:	6852      	ldr	r2, [r2, #4]
    ae2a:	18e3      	adds	r3, r4, r3
    ae2c:	eb45 0202 	adc.w	r2, r5, r2
    ae30:	f06f 0101 	mvn.w	r1, #1
    ae34:	1ace      	subs	r6, r1, r3
    ae36:	eb60 0702 	sbc.w	r7, r0, r2
			to->dticks = MAX(1, ticks);
    ae3a:	4632      	mov	r2, r6
    ae3c:	463b      	mov	r3, r7
    ae3e:	2e01      	cmp	r6, #1
    ae40:	f177 0100 	sbcs.w	r1, r7, #0
    ae44:	dbb0      	blt.n	ada8 <z_add_timeout+0x30>
    ae46:	f8ca 2010 	str.w	r2, [sl, #16]
    ae4a:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
    ae4e:	f7ff ff4b 	bl	ace8 <first>
    ae52:	4684      	mov	ip, r0
    ae54:	f1bc 0f00 	cmp.w	ip, #0
    ae58:	d0c9      	beq.n	adee <z_add_timeout+0x76>
			if (t->dticks > to->dticks) {
    ae5a:	e9dc 0104 	ldrd	r0, r1, [ip, #16]
    ae5e:	e9da 2304 	ldrd	r2, r3, [sl, #16]
    ae62:	e9cd 2300 	strd	r2, r3, [sp]
    ae66:	4282      	cmp	r2, r0
    ae68:	418b      	sbcs	r3, r1
    ae6a:	dbad      	blt.n	adc8 <z_add_timeout+0x50>
			to->dticks -= t->dticks;
    ae6c:	9b00      	ldr	r3, [sp, #0]
    ae6e:	1a1a      	subs	r2, r3, r0
    ae70:	9b01      	ldr	r3, [sp, #4]
    ae72:	eb63 0301 	sbc.w	r3, r3, r1
    ae76:	f8ca 2010 	str.w	r2, [sl, #16]
    ae7a:	f8ca 3014 	str.w	r3, [sl, #20]
		for (t = first(); t != NULL; t = next(t)) {
    ae7e:	4660      	mov	r0, ip
    ae80:	f7ff ff3c 	bl	acfc <next>
    ae84:	4684      	mov	ip, r0
    ae86:	e7e5      	b.n	ae54 <z_add_timeout+0xdc>
	sys_dnode_t *const tail = list->tail;
    ae88:	4b0e      	ldr	r3, [pc, #56]	; (aec4 <z_add_timeout+0x14c>)
    ae8a:	685a      	ldr	r2, [r3, #4]
	node->next = list;
    ae8c:	f8ca 3000 	str.w	r3, [sl]
	node->prev = tail;
    ae90:	f8ca 2004 	str.w	r2, [sl, #4]
	tail->next = node;
    ae94:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
    ae98:	f8c3 a004 	str.w	sl, [r3, #4]
}
    ae9c:	e7aa      	b.n	adf4 <z_add_timeout+0x7c>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    ae9e:	f7ff ff45 	bl	ad2c <next_timeout>

			if (next_time == 0 ||
    aea2:	4603      	mov	r3, r0
    aea4:	b118      	cbz	r0, aeae <z_add_timeout+0x136>
			    _current_cpu->slice_ticks != next_time) {
    aea6:	4a08      	ldr	r2, [pc, #32]	; (aec8 <z_add_timeout+0x150>)
    aea8:	6912      	ldr	r2, [r2, #16]
			if (next_time == 0 ||
    aeaa:	4282      	cmp	r2, r0
    aeac:	d0a6      	beq.n	adfc <z_add_timeout+0x84>
				sys_clock_set_timeout(next_time, false);
    aeae:	2100      	movs	r1, #0
    aeb0:	4618      	mov	r0, r3
    aeb2:	f7fc f94b 	bl	714c <sys_clock_set_timeout>
    aeb6:	e7a1      	b.n	adfc <z_add_timeout+0x84>
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    aeb8:	b003      	add	sp, #12
    aeba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aebe:	bf00      	nop
    aec0:	20000770 	.word	0x20000770
    aec4:	20000138 	.word	0x20000138
    aec8:	200024ec 	.word	0x200024ec

0000aecc <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    aecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    aece:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    aed0:	f7ff fbe2 	bl	a698 <z_time_slice>
	__asm__ volatile(
    aed4:	f04f 0320 	mov.w	r3, #32
    aed8:	f3ef 8511 	mrs	r5, BASEPRI
    aedc:	f383 8812 	msr	BASEPRI_MAX, r3
    aee0:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    aee4:	4b28      	ldr	r3, [pc, #160]	; (af88 <sys_clock_announce+0xbc>)
    aee6:	601c      	str	r4, [r3, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
    aee8:	f7ff fefe 	bl	ace8 <first>
    aeec:	4604      	mov	r4, r0
    aeee:	b350      	cbz	r0, af46 <sys_clock_announce+0x7a>
    aef0:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
    aef4:	4b24      	ldr	r3, [pc, #144]	; (af88 <sys_clock_announce+0xbc>)
    aef6:	681b      	ldr	r3, [r3, #0]
    aef8:	17d9      	asrs	r1, r3, #31
    aefa:	42b3      	cmp	r3, r6
    aefc:	eb71 0207 	sbcs.w	r2, r1, r7
    af00:	db21      	blt.n	af46 <sys_clock_announce+0x7a>
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    af02:	4a22      	ldr	r2, [pc, #136]	; (af8c <sys_clock_announce+0xc0>)
    af04:	e9d2 0100 	ldrd	r0, r1, [r2]
    af08:	1980      	adds	r0, r0, r6
    af0a:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
    af0e:	e9c2 0100 	strd	r0, r1, [r2]
		announce_remaining -= dt;
    af12:	1b9b      	subs	r3, r3, r6
    af14:	4a1c      	ldr	r2, [pc, #112]	; (af88 <sys_clock_announce+0xbc>)
    af16:	6013      	str	r3, [r2, #0]
		t->dticks = 0;
    af18:	2200      	movs	r2, #0
    af1a:	2300      	movs	r3, #0
    af1c:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    af20:	4620      	mov	r0, r4
    af22:	f003 f9c1 	bl	e2a8 <remove_timeout>
	__asm__ volatile(
    af26:	f385 8811 	msr	BASEPRI, r5
    af2a:	f3bf 8f6f 	isb	sy

		k_spin_unlock(&timeout_lock, key);
		t->fn(t);
    af2e:	68a3      	ldr	r3, [r4, #8]
    af30:	4620      	mov	r0, r4
    af32:	4798      	blx	r3
	__asm__ volatile(
    af34:	f04f 0320 	mov.w	r3, #32
    af38:	f3ef 8511 	mrs	r5, BASEPRI
    af3c:	f383 8812 	msr	BASEPRI_MAX, r3
    af40:	f3bf 8f6f 	isb	sy
    af44:	e7d0      	b.n	aee8 <sys_clock_announce+0x1c>
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
    af46:	b144      	cbz	r4, af5a <sys_clock_announce+0x8e>
		first()->dticks -= announce_remaining;
    af48:	4b0f      	ldr	r3, [pc, #60]	; (af88 <sys_clock_announce+0xbc>)
    af4a:	6819      	ldr	r1, [r3, #0]
    af4c:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    af50:	1a52      	subs	r2, r2, r1
    af52:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
    af56:	e9c4 2304 	strd	r2, r3, [r4, #16]
	}

	curr_tick += announce_remaining;
    af5a:	480c      	ldr	r0, [pc, #48]	; (af8c <sys_clock_announce+0xc0>)
    af5c:	490a      	ldr	r1, [pc, #40]	; (af88 <sys_clock_announce+0xbc>)
    af5e:	680c      	ldr	r4, [r1, #0]
    af60:	e9d0 2300 	ldrd	r2, r3, [r0]
    af64:	1912      	adds	r2, r2, r4
    af66:	eb43 73e4 	adc.w	r3, r3, r4, asr #31
    af6a:	e9c0 2300 	strd	r2, r3, [r0]
	announce_remaining = 0;
    af6e:	2400      	movs	r4, #0
    af70:	600c      	str	r4, [r1, #0]

	sys_clock_set_timeout(next_timeout(), false);
    af72:	f7ff fedb 	bl	ad2c <next_timeout>
    af76:	4621      	mov	r1, r4
    af78:	f7fc f8e8 	bl	714c <sys_clock_set_timeout>
	__asm__ volatile(
    af7c:	f385 8811 	msr	BASEPRI, r5
    af80:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    af84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    af86:	bf00      	nop
    af88:	2000252c 	.word	0x2000252c
    af8c:	20000770 	.word	0x20000770

0000af90 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    af90:	b510      	push	{r4, lr}
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
    af92:	2100      	movs	r1, #0
	__asm__ volatile(
    af94:	f04f 0320 	mov.w	r3, #32
    af98:	f3ef 8411 	mrs	r4, BASEPRI
    af9c:	f383 8812 	msr	BASEPRI_MAX, r3
    afa0:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;
    afa4:	2200      	movs	r2, #0
    afa6:	2300      	movs	r3, #0
	LOCKED(&timeout_lock) {
    afa8:	b969      	cbnz	r1, afc6 <sys_clock_tick_get+0x36>
		t = curr_tick + sys_clock_elapsed();
    afaa:	f7fc f903 	bl	71b4 <sys_clock_elapsed>
    afae:	4b07      	ldr	r3, [pc, #28]	; (afcc <sys_clock_tick_get+0x3c>)
    afb0:	e9d3 2300 	ldrd	r2, r3, [r3]
    afb4:	1812      	adds	r2, r2, r0
    afb6:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
    afba:	f384 8811 	msr	BASEPRI, r4
    afbe:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    afc2:	2101      	movs	r1, #1
    afc4:	e7f0      	b.n	afa8 <sys_clock_tick_get+0x18>
	}
	return t;
}
    afc6:	4610      	mov	r0, r2
    afc8:	4619      	mov	r1, r3
    afca:	bd10      	pop	{r4, pc}
    afcc:	20000770 	.word	0x20000770

0000afd0 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    afd0:	b538      	push	{r3, r4, r5, lr}
    afd2:	4604      	mov	r4, r0
	__asm__ volatile(
    afd4:	f04f 0320 	mov.w	r3, #32
    afd8:	f3ef 8511 	mrs	r5, BASEPRI
    afdc:	f383 8812 	msr	BASEPRI_MAX, r3
    afe0:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    afe4:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    afe8:	ea52 0103 	orrs.w	r1, r2, r3
    afec:	d005      	beq.n	affa <z_timer_expiration_handler+0x2a>
    afee:	f1b3 3fff 	cmp.w	r3, #4294967295
    aff2:	bf08      	it	eq
    aff4:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    aff8:	d11a      	bne.n	b030 <z_timer_expiration_handler+0x60>
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    affa:	6b23      	ldr	r3, [r4, #48]	; 0x30
    affc:	3301      	adds	r3, #1
    affe:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    b000:	6a23      	ldr	r3, [r4, #32]
    b002:	b10b      	cbz	r3, b008 <z_timer_expiration_handler+0x38>
		timer->expiry_fn(timer);
    b004:	4620      	mov	r0, r4
    b006:	4798      	blx	r3
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    b008:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
    b00c:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b00e:	42a3      	cmp	r3, r4
    b010:	d012      	beq.n	b038 <z_timer_expiration_handler+0x68>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    b012:	b18c      	cbz	r4, b038 <z_timer_expiration_handler+0x68>
		k_spin_unlock(&lock, key);
		return;
	}

	z_unpend_thread_no_timeout(thread);
    b014:	4620      	mov	r0, r4
    b016:	f002 ffac 	bl	df72 <z_unpend_thread_no_timeout>
    b01a:	2300      	movs	r3, #0
    b01c:	f8c4 30ac 	str.w	r3, [r4, #172]	; 0xac
	__asm__ volatile(
    b020:	f385 8811 	msr	BASEPRI, r5
    b024:	f3bf 8f6f 	isb	sy

	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
    b028:	4620      	mov	r0, r4
    b02a:	f003 f808 	bl	e03e <z_ready_thread>
}
    b02e:	bd38      	pop	{r3, r4, r5, pc}
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    b030:	4904      	ldr	r1, [pc, #16]	; (b044 <z_timer_expiration_handler+0x74>)
    b032:	f7ff fea1 	bl	ad78 <z_add_timeout>
    b036:	e7e0      	b.n	affa <z_timer_expiration_handler+0x2a>
    b038:	f385 8811 	msr	BASEPRI, r5
    b03c:	f3bf 8f6f 	isb	sy
		return;
    b040:	e7f5      	b.n	b02e <z_timer_expiration_handler+0x5e>
    b042:	bf00      	nop
    b044:	0000afd1 	.word	0x0000afd1

0000b048 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    b048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b04c:	b087      	sub	sp, #28
    b04e:	4614      	mov	r4, r2
    b050:	461d      	mov	r5, r3
    b052:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    b056:	f1b3 3fff 	cmp.w	r3, #4294967295
    b05a:	bf08      	it	eq
    b05c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    b060:	d035      	beq.n	b0ce <z_impl_k_timer_start+0x86>
    b062:	4606      	mov	r6, r0
    b064:	4613      	mov	r3, r2
    b066:	462a      	mov	r2, r5
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    b068:	f1b9 3fff 	cmp.w	r9, #4294967295
    b06c:	bf08      	it	eq
    b06e:	f1b8 3fff 	cmpeq.w	r8, #4294967295
    b072:	d012      	beq.n	b09a <z_impl_k_timer_start+0x52>
    b074:	ea58 0109 	orrs.w	r1, r8, r9
    b078:	d00f      	beq.n	b09a <z_impl_k_timer_start+0x52>
	    Z_TICK_ABS(period.ticks) < 0) {
    b07a:	f06f 0701 	mvn.w	r7, #1
    b07e:	ebb7 0708 	subs.w	r7, r7, r8
    b082:	9702      	str	r7, [sp, #8]
    b084:	f04f 31ff 	mov.w	r1, #4294967295
    b088:	eb61 0709 	sbc.w	r7, r1, r9
    b08c:	9703      	str	r7, [sp, #12]
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    b08e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    b092:	2800      	cmp	r0, #0
    b094:	f171 0100 	sbcs.w	r1, r1, #0
    b098:	db1c      	blt.n	b0d4 <z_impl_k_timer_start+0x8c>
		period.ticks = MAX(period.ticks - 1, 1);
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    b09a:	f06f 0101 	mvn.w	r1, #1
    b09e:	ebb1 0a03 	subs.w	sl, r1, r3
    b0a2:	f04f 31ff 	mov.w	r1, #4294967295
    b0a6:	eb61 0b02 	sbc.w	fp, r1, r2
    b0aa:	f1ba 0f00 	cmp.w	sl, #0
    b0ae:	f17b 0100 	sbcs.w	r1, fp, #0
    b0b2:	db23      	blt.n	b0fc <z_impl_k_timer_start+0xb4>
		duration.ticks = MAX(duration.ticks - 1, 0);
	}

	(void)z_abort_timeout(&timer->timeout);
    b0b4:	4630      	mov	r0, r6
    b0b6:	f003 f90e 	bl	e2d6 <z_abort_timeout>
	timer->period = period;
    b0ba:	e9c6 890a 	strd	r8, r9, [r6, #40]	; 0x28
	timer->status = 0U;
    b0be:	2300      	movs	r3, #0
    b0c0:	6333      	str	r3, [r6, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    b0c2:	4622      	mov	r2, r4
    b0c4:	462b      	mov	r3, r5
    b0c6:	4917      	ldr	r1, [pc, #92]	; (b124 <z_impl_k_timer_start+0xdc>)
    b0c8:	4630      	mov	r0, r6
    b0ca:	f7ff fe55 	bl	ad78 <z_add_timeout>
		     duration);
}
    b0ce:	b007      	add	sp, #28
    b0d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		period.ticks = MAX(period.ticks - 1, 1);
    b0d4:	f118 31ff 	adds.w	r1, r8, #4294967295
    b0d8:	9104      	str	r1, [sp, #16]
    b0da:	f149 31ff 	adc.w	r1, r9, #4294967295
    b0de:	9105      	str	r1, [sp, #20]
    b0e0:	e9dd 7804 	ldrd	r7, r8, [sp, #16]
    b0e4:	4638      	mov	r0, r7
    b0e6:	4641      	mov	r1, r8
    b0e8:	2f01      	cmp	r7, #1
    b0ea:	f178 0700 	sbcs.w	r7, r8, #0
    b0ee:	db02      	blt.n	b0f6 <z_impl_k_timer_start+0xae>
    b0f0:	4680      	mov	r8, r0
    b0f2:	4689      	mov	r9, r1
    b0f4:	e7d1      	b.n	b09a <z_impl_k_timer_start+0x52>
    b0f6:	2001      	movs	r0, #1
    b0f8:	2100      	movs	r1, #0
    b0fa:	e7f9      	b.n	b0f0 <z_impl_k_timer_start+0xa8>
		duration.ticks = MAX(duration.ticks - 1, 0);
    b0fc:	f113 33ff 	adds.w	r3, r3, #4294967295
    b100:	9300      	str	r3, [sp, #0]
    b102:	f142 33ff 	adc.w	r3, r2, #4294967295
    b106:	9301      	str	r3, [sp, #4]
    b108:	e9dd 0100 	ldrd	r0, r1, [sp]
    b10c:	4602      	mov	r2, r0
    b10e:	460b      	mov	r3, r1
    b110:	2800      	cmp	r0, #0
    b112:	f171 0100 	sbcs.w	r1, r1, #0
    b116:	db02      	blt.n	b11e <z_impl_k_timer_start+0xd6>
    b118:	4614      	mov	r4, r2
    b11a:	461d      	mov	r5, r3
    b11c:	e7ca      	b.n	b0b4 <z_impl_k_timer_start+0x6c>
    b11e:	2200      	movs	r2, #0
    b120:	4613      	mov	r3, r2
    b122:	e7f9      	b.n	b118 <z_impl_k_timer_start+0xd0>
    b124:	0000afd1 	.word	0x0000afd1

0000b128 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    b128:	b538      	push	{r3, r4, r5, lr}
    b12a:	4604      	mov	r4, r0
    b12c:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    b12e:	f002 fdec 	bl	dd0a <k_is_in_isr>
    b132:	b948      	cbnz	r0, b148 <z_thread_aligned_alloc+0x20>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    b134:	4b05      	ldr	r3, [pc, #20]	; (b14c <z_thread_aligned_alloc+0x24>)
    b136:	689b      	ldr	r3, [r3, #8]
    b138:	f8d3 00a4 	ldr.w	r0, [r3, #164]	; 0xa4
	}

	if (heap != NULL) {
    b13c:	b118      	cbz	r0, b146 <z_thread_aligned_alloc+0x1e>
		ret = z_heap_aligned_alloc(heap, align, size);
    b13e:	462a      	mov	r2, r5
    b140:	4621      	mov	r1, r4
    b142:	f003 f988 	bl	e456 <z_heap_aligned_alloc>
	} else {
		ret = NULL;
	}

	return ret;
}
    b146:	bd38      	pop	{r3, r4, r5, pc}
		heap = _SYSTEM_HEAP;
    b148:	4801      	ldr	r0, [pc, #4]	; (b150 <z_thread_aligned_alloc+0x28>)
    b14a:	e7f7      	b.n	b13c <z_thread_aligned_alloc+0x14>
    b14c:	200024ec 	.word	0x200024ec
    b150:	200001d8 	.word	0x200001d8

0000b154 <boot_banner>:
#define BOOT_DELAY_BANNER ""
#endif

#if defined(CONFIG_BOOT_DELAY) || CONFIG_BOOT_DELAY > 0
void boot_banner(void)
{
    b154:	b508      	push	{r3, lr}
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    b156:	4a03      	ldr	r2, [pc, #12]	; (b164 <boot_banner+0x10>)
    b158:	4903      	ldr	r1, [pc, #12]	; (b168 <boot_banner+0x14>)
    b15a:	4804      	ldr	r0, [pc, #16]	; (b16c <boot_banner+0x18>)
    b15c:	f000 fa52 	bl	b604 <printk>
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
    b160:	bd08      	pop	{r3, pc}
    b162:	bf00      	nop
    b164:	0000e96c 	.word	0x0000e96c
    b168:	0000fa28 	.word	0x0000fa28
    b16c:	0000fa34 	.word	0x0000fa34

0000b170 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    b170:	b510      	push	{r4, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    b172:	4c06      	ldr	r4, [pc, #24]	; (b18c <statics_init+0x1c>)
    b174:	4b06      	ldr	r3, [pc, #24]	; (b190 <statics_init+0x20>)
    b176:	429c      	cmp	r4, r3
    b178:	d206      	bcs.n	b188 <statics_init+0x18>
		}

		if (do_clear)
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    b17a:	68a2      	ldr	r2, [r4, #8]
    b17c:	6861      	ldr	r1, [r4, #4]
    b17e:	4620      	mov	r0, r4
    b180:	f003 f98c 	bl	e49c <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    b184:	3414      	adds	r4, #20
    b186:	e7f5      	b.n	b174 <statics_init+0x4>
		}
	}
	return 0;
}
    b188:	2000      	movs	r0, #0
    b18a:	bd10      	pop	{r4, pc}
    b18c:	200001d8 	.word	0x200001d8
    b190:	200001ec 	.word	0x200001ec

0000b194 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    b194:	b510      	push	{r4, lr}
    b196:	b084      	sub	sp, #16
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    b198:	4b08      	ldr	r3, [pc, #32]	; (b1bc <k_sys_work_q_init+0x28>)
    b19a:	9302      	str	r3, [sp, #8]
    b19c:	2400      	movs	r4, #0
    b19e:	f88d 400c 	strb.w	r4, [sp, #12]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    b1a2:	ab02      	add	r3, sp, #8
    b1a4:	9300      	str	r3, [sp, #0]
    b1a6:	f04f 33ff 	mov.w	r3, #4294967295
    b1aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
    b1ae:	4904      	ldr	r1, [pc, #16]	; (b1c0 <k_sys_work_q_init+0x2c>)
    b1b0:	4804      	ldr	r0, [pc, #16]	; (b1c4 <k_sys_work_q_init+0x30>)
    b1b2:	f7ff f933 	bl	a41c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    b1b6:	4620      	mov	r0, r4
    b1b8:	b004      	add	sp, #16
    b1ba:	bd10      	pop	{r4, pc}
    b1bc:	0000fa5c 	.word	0x0000fa5c
    b1c0:	20004020 	.word	0x20004020
    b1c4:	20000778 	.word	0x20000778

0000b1c8 <nrf_cc3xx_platform_init_no_rng>:
    b1c8:	b510      	push	{r4, lr}
    b1ca:	4c0a      	ldr	r4, [pc, #40]	; (b1f4 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    b1cc:	6823      	ldr	r3, [r4, #0]
    b1ce:	b11b      	cbz	r3, b1d8 <nrf_cc3xx_platform_init_no_rng+0x10>
    b1d0:	2301      	movs	r3, #1
    b1d2:	6023      	str	r3, [r4, #0]
    b1d4:	2000      	movs	r0, #0
    b1d6:	bd10      	pop	{r4, pc}
    b1d8:	f000 f8d6 	bl	b388 <CC_LibInitNoRng>
    b1dc:	2800      	cmp	r0, #0
    b1de:	d0f7      	beq.n	b1d0 <nrf_cc3xx_platform_init_no_rng+0x8>
    b1e0:	3801      	subs	r0, #1
    b1e2:	2806      	cmp	r0, #6
    b1e4:	d803      	bhi.n	b1ee <nrf_cc3xx_platform_init_no_rng+0x26>
    b1e6:	4b04      	ldr	r3, [pc, #16]	; (b1f8 <nrf_cc3xx_platform_init_no_rng+0x30>)
    b1e8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    b1ec:	bd10      	pop	{r4, pc}
    b1ee:	4803      	ldr	r0, [pc, #12]	; (b1fc <nrf_cc3xx_platform_init_no_rng+0x34>)
    b1f0:	bd10      	pop	{r4, pc}
    b1f2:	bf00      	nop
    b1f4:	20002530 	.word	0x20002530
    b1f8:	0000fa68 	.word	0x0000fa68
    b1fc:	ffff8ffe 	.word	0xffff8ffe

0000b200 <nrf_cc3xx_platform_abort>:
    b200:	f3bf 8f4f 	dsb	sy
    b204:	4905      	ldr	r1, [pc, #20]	; (b21c <nrf_cc3xx_platform_abort+0x1c>)
    b206:	4b06      	ldr	r3, [pc, #24]	; (b220 <nrf_cc3xx_platform_abort+0x20>)
    b208:	68ca      	ldr	r2, [r1, #12]
    b20a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    b20e:	4313      	orrs	r3, r2
    b210:	60cb      	str	r3, [r1, #12]
    b212:	f3bf 8f4f 	dsb	sy
    b216:	bf00      	nop
    b218:	e7fd      	b.n	b216 <nrf_cc3xx_platform_abort+0x16>
    b21a:	bf00      	nop
    b21c:	e000ed00 	.word	0xe000ed00
    b220:	05fa0004 	.word	0x05fa0004

0000b224 <CC_PalAbort>:
    b224:	b4f0      	push	{r4, r5, r6, r7}
    b226:	4f09      	ldr	r7, [pc, #36]	; (b24c <CC_PalAbort+0x28>)
    b228:	4e09      	ldr	r6, [pc, #36]	; (b250 <CC_PalAbort+0x2c>)
    b22a:	4c0a      	ldr	r4, [pc, #40]	; (b254 <CC_PalAbort+0x30>)
    b22c:	4a0a      	ldr	r2, [pc, #40]	; (b258 <CC_PalAbort+0x34>)
    b22e:	4d0b      	ldr	r5, [pc, #44]	; (b25c <CC_PalAbort+0x38>)
    b230:	490b      	ldr	r1, [pc, #44]	; (b260 <CC_PalAbort+0x3c>)
    b232:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    b236:	603b      	str	r3, [r7, #0]
    b238:	6852      	ldr	r2, [r2, #4]
    b23a:	6033      	str	r3, [r6, #0]
    b23c:	6023      	str	r3, [r4, #0]
    b23e:	2400      	movs	r4, #0
    b240:	602b      	str	r3, [r5, #0]
    b242:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    b246:	bcf0      	pop	{r4, r5, r6, r7}
    b248:	4710      	bx	r2
    b24a:	bf00      	nop
    b24c:	5002b400 	.word	0x5002b400
    b250:	5002b404 	.word	0x5002b404
    b254:	5002b408 	.word	0x5002b408
    b258:	20000140 	.word	0x20000140
    b25c:	5002b40c 	.word	0x5002b40c
    b260:	5002a000 	.word	0x5002a000

0000b264 <nrf_cc3xx_platform_set_abort>:
    b264:	e9d0 1200 	ldrd	r1, r2, [r0]
    b268:	4b01      	ldr	r3, [pc, #4]	; (b270 <nrf_cc3xx_platform_set_abort+0xc>)
    b26a:	e9c3 1200 	strd	r1, r2, [r3]
    b26e:	4770      	bx	lr
    b270:	20000140 	.word	0x20000140

0000b274 <mutex_free>:
    b274:	b510      	push	{r4, lr}
    b276:	4604      	mov	r4, r0
    b278:	b130      	cbz	r0, b288 <mutex_free+0x14>
    b27a:	6863      	ldr	r3, [r4, #4]
    b27c:	06db      	lsls	r3, r3, #27
    b27e:	d502      	bpl.n	b286 <mutex_free+0x12>
    b280:	2300      	movs	r3, #0
    b282:	6023      	str	r3, [r4, #0]
    b284:	6063      	str	r3, [r4, #4]
    b286:	bd10      	pop	{r4, pc}
    b288:	4b02      	ldr	r3, [pc, #8]	; (b294 <mutex_free+0x20>)
    b28a:	4803      	ldr	r0, [pc, #12]	; (b298 <mutex_free+0x24>)
    b28c:	685b      	ldr	r3, [r3, #4]
    b28e:	4798      	blx	r3
    b290:	e7f3      	b.n	b27a <mutex_free+0x6>
    b292:	bf00      	nop
    b294:	20000140 	.word	0x20000140
    b298:	0000fa84 	.word	0x0000fa84

0000b29c <mutex_unlock>:
    b29c:	b168      	cbz	r0, b2ba <mutex_unlock+0x1e>
    b29e:	6843      	ldr	r3, [r0, #4]
    b2a0:	b13b      	cbz	r3, b2b2 <mutex_unlock+0x16>
    b2a2:	06db      	lsls	r3, r3, #27
    b2a4:	d507      	bpl.n	b2b6 <mutex_unlock+0x1a>
    b2a6:	f3bf 8f5f 	dmb	sy
    b2aa:	2300      	movs	r3, #0
    b2ac:	6003      	str	r3, [r0, #0]
    b2ae:	4618      	mov	r0, r3
    b2b0:	4770      	bx	lr
    b2b2:	4803      	ldr	r0, [pc, #12]	; (b2c0 <mutex_unlock+0x24>)
    b2b4:	4770      	bx	lr
    b2b6:	4803      	ldr	r0, [pc, #12]	; (b2c4 <mutex_unlock+0x28>)
    b2b8:	4770      	bx	lr
    b2ba:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    b2be:	4770      	bx	lr
    b2c0:	ffff8fea 	.word	0xffff8fea
    b2c4:	ffff8fe9 	.word	0xffff8fe9

0000b2c8 <mutex_init>:
    b2c8:	b510      	push	{r4, lr}
    b2ca:	4604      	mov	r4, r0
    b2cc:	b120      	cbz	r0, b2d8 <mutex_init+0x10>
    b2ce:	2200      	movs	r2, #0
    b2d0:	2311      	movs	r3, #17
    b2d2:	6022      	str	r2, [r4, #0]
    b2d4:	6063      	str	r3, [r4, #4]
    b2d6:	bd10      	pop	{r4, pc}
    b2d8:	4801      	ldr	r0, [pc, #4]	; (b2e0 <mutex_init+0x18>)
    b2da:	f7ff ffa3 	bl	b224 <CC_PalAbort>
    b2de:	e7f6      	b.n	b2ce <mutex_init+0x6>
    b2e0:	0000faac 	.word	0x0000faac

0000b2e4 <mutex_lock>:
    b2e4:	b1c0      	cbz	r0, b318 <mutex_lock+0x34>
    b2e6:	6843      	ldr	r3, [r0, #4]
    b2e8:	b1a3      	cbz	r3, b314 <mutex_lock+0x30>
    b2ea:	06db      	lsls	r3, r3, #27
    b2ec:	d510      	bpl.n	b310 <mutex_lock+0x2c>
    b2ee:	2201      	movs	r2, #1
    b2f0:	f3bf 8f5b 	dmb	ish
    b2f4:	e850 3f00 	ldrex	r3, [r0]
    b2f8:	e840 2100 	strex	r1, r2, [r0]
    b2fc:	2900      	cmp	r1, #0
    b2fe:	d1f9      	bne.n	b2f4 <mutex_lock+0x10>
    b300:	f3bf 8f5b 	dmb	ish
    b304:	2b01      	cmp	r3, #1
    b306:	d0f3      	beq.n	b2f0 <mutex_lock+0xc>
    b308:	f3bf 8f5f 	dmb	sy
    b30c:	2000      	movs	r0, #0
    b30e:	4770      	bx	lr
    b310:	4803      	ldr	r0, [pc, #12]	; (b320 <mutex_lock+0x3c>)
    b312:	4770      	bx	lr
    b314:	4803      	ldr	r0, [pc, #12]	; (b324 <mutex_lock+0x40>)
    b316:	4770      	bx	lr
    b318:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    b31c:	4770      	bx	lr
    b31e:	bf00      	nop
    b320:	ffff8fe9 	.word	0xffff8fe9
    b324:	ffff8fea 	.word	0xffff8fea

0000b328 <nrf_cc3xx_platform_set_mutexes>:
    b328:	b570      	push	{r4, r5, r6, lr}
    b32a:	e9d0 2300 	ldrd	r2, r3, [r0]
    b32e:	4c13      	ldr	r4, [pc, #76]	; (b37c <nrf_cc3xx_platform_set_mutexes+0x54>)
    b330:	4d13      	ldr	r5, [pc, #76]	; (b380 <nrf_cc3xx_platform_set_mutexes+0x58>)
    b332:	e9c4 2300 	strd	r2, r3, [r4]
    b336:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    b33a:	e9c4 6302 	strd	r6, r3, [r4, #8]
    b33e:	4b11      	ldr	r3, [pc, #68]	; (b384 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    b340:	6808      	ldr	r0, [r1, #0]
    b342:	6018      	str	r0, [r3, #0]
    b344:	6848      	ldr	r0, [r1, #4]
    b346:	6058      	str	r0, [r3, #4]
    b348:	6888      	ldr	r0, [r1, #8]
    b34a:	6098      	str	r0, [r3, #8]
    b34c:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    b350:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    b354:	60de      	str	r6, [r3, #12]
    b356:	6118      	str	r0, [r3, #16]
    b358:	06cb      	lsls	r3, r1, #27
    b35a:	d50d      	bpl.n	b378 <nrf_cc3xx_platform_set_mutexes+0x50>
    b35c:	2300      	movs	r3, #0
    b35e:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    b362:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    b366:	f505 7088 	add.w	r0, r5, #272	; 0x110
    b36a:	4790      	blx	r2
    b36c:	6823      	ldr	r3, [r4, #0]
    b36e:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    b372:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b376:	4718      	bx	r3
    b378:	bd70      	pop	{r4, r5, r6, pc}
    b37a:	bf00      	nop
    b37c:	20000150 	.word	0x20000150
    b380:	20002558 	.word	0x20002558
    b384:	20000160 	.word	0x20000160

0000b388 <CC_LibInitNoRng>:
    b388:	b510      	push	{r4, lr}
    b38a:	f000 f833 	bl	b3f4 <CC_HalInit>
    b38e:	b120      	cbz	r0, b39a <CC_LibInitNoRng+0x12>
    b390:	2403      	movs	r4, #3
    b392:	f000 f867 	bl	b464 <CC_PalTerminate>
    b396:	4620      	mov	r0, r4
    b398:	bd10      	pop	{r4, pc}
    b39a:	f000 f835 	bl	b408 <CC_PalInit>
    b39e:	b990      	cbnz	r0, b3c6 <CC_LibInitNoRng+0x3e>
    b3a0:	f000 f8b0 	bl	b504 <CC_PalPowerSaveModeSelect>
    b3a4:	b990      	cbnz	r0, b3cc <CC_LibInitNoRng+0x44>
    b3a6:	4b0f      	ldr	r3, [pc, #60]	; (b3e4 <CC_LibInitNoRng+0x5c>)
    b3a8:	681b      	ldr	r3, [r3, #0]
    b3aa:	0e1b      	lsrs	r3, r3, #24
    b3ac:	2bf0      	cmp	r3, #240	; 0xf0
    b3ae:	d108      	bne.n	b3c2 <CC_LibInitNoRng+0x3a>
    b3b0:	4a0d      	ldr	r2, [pc, #52]	; (b3e8 <CC_LibInitNoRng+0x60>)
    b3b2:	4b0e      	ldr	r3, [pc, #56]	; (b3ec <CC_LibInitNoRng+0x64>)
    b3b4:	6812      	ldr	r2, [r2, #0]
    b3b6:	429a      	cmp	r2, r3
    b3b8:	d00a      	beq.n	b3d0 <CC_LibInitNoRng+0x48>
    b3ba:	2407      	movs	r4, #7
    b3bc:	f000 f81c 	bl	b3f8 <CC_HalTerminate>
    b3c0:	e7e7      	b.n	b392 <CC_LibInitNoRng+0xa>
    b3c2:	2406      	movs	r4, #6
    b3c4:	e7fa      	b.n	b3bc <CC_LibInitNoRng+0x34>
    b3c6:	2404      	movs	r4, #4
    b3c8:	4620      	mov	r0, r4
    b3ca:	bd10      	pop	{r4, pc}
    b3cc:	2400      	movs	r4, #0
    b3ce:	e7f5      	b.n	b3bc <CC_LibInitNoRng+0x34>
    b3d0:	2001      	movs	r0, #1
    b3d2:	f000 f897 	bl	b504 <CC_PalPowerSaveModeSelect>
    b3d6:	4604      	mov	r4, r0
    b3d8:	2800      	cmp	r0, #0
    b3da:	d1f7      	bne.n	b3cc <CC_LibInitNoRng+0x44>
    b3dc:	4b04      	ldr	r3, [pc, #16]	; (b3f0 <CC_LibInitNoRng+0x68>)
    b3de:	6018      	str	r0, [r3, #0]
    b3e0:	e7d9      	b.n	b396 <CC_LibInitNoRng+0xe>
    b3e2:	bf00      	nop
    b3e4:	5002b928 	.word	0x5002b928
    b3e8:	5002ba24 	.word	0x5002ba24
    b3ec:	20e00000 	.word	0x20e00000
    b3f0:	5002ba0c 	.word	0x5002ba0c

0000b3f4 <CC_HalInit>:
    b3f4:	2000      	movs	r0, #0
    b3f6:	4770      	bx	lr

0000b3f8 <CC_HalTerminate>:
    b3f8:	2000      	movs	r0, #0
    b3fa:	4770      	bx	lr

0000b3fc <CC_HalMaskInterrupt>:
    b3fc:	4b01      	ldr	r3, [pc, #4]	; (b404 <CC_HalMaskInterrupt+0x8>)
    b3fe:	6018      	str	r0, [r3, #0]
    b400:	4770      	bx	lr
    b402:	bf00      	nop
    b404:	5002ba04 	.word	0x5002ba04

0000b408 <CC_PalInit>:
    b408:	b510      	push	{r4, lr}
    b40a:	4811      	ldr	r0, [pc, #68]	; (b450 <CC_PalInit+0x48>)
    b40c:	f000 f848 	bl	b4a0 <CC_PalMutexCreate>
    b410:	b100      	cbz	r0, b414 <CC_PalInit+0xc>
    b412:	bd10      	pop	{r4, pc}
    b414:	480f      	ldr	r0, [pc, #60]	; (b454 <CC_PalInit+0x4c>)
    b416:	f000 f843 	bl	b4a0 <CC_PalMutexCreate>
    b41a:	2800      	cmp	r0, #0
    b41c:	d1f9      	bne.n	b412 <CC_PalInit+0xa>
    b41e:	4c0e      	ldr	r4, [pc, #56]	; (b458 <CC_PalInit+0x50>)
    b420:	4620      	mov	r0, r4
    b422:	f000 f83d 	bl	b4a0 <CC_PalMutexCreate>
    b426:	2800      	cmp	r0, #0
    b428:	d1f3      	bne.n	b412 <CC_PalInit+0xa>
    b42a:	4b0c      	ldr	r3, [pc, #48]	; (b45c <CC_PalInit+0x54>)
    b42c:	480c      	ldr	r0, [pc, #48]	; (b460 <CC_PalInit+0x58>)
    b42e:	601c      	str	r4, [r3, #0]
    b430:	f000 f836 	bl	b4a0 <CC_PalMutexCreate>
    b434:	4601      	mov	r1, r0
    b436:	2800      	cmp	r0, #0
    b438:	d1eb      	bne.n	b412 <CC_PalInit+0xa>
    b43a:	f000 f82d 	bl	b498 <CC_PalDmaInit>
    b43e:	4604      	mov	r4, r0
    b440:	b108      	cbz	r0, b446 <CC_PalInit+0x3e>
    b442:	4620      	mov	r0, r4
    b444:	bd10      	pop	{r4, pc}
    b446:	f000 f83f 	bl	b4c8 <CC_PalPowerSaveModeInit>
    b44a:	4620      	mov	r0, r4
    b44c:	e7fa      	b.n	b444 <CC_PalInit+0x3c>
    b44e:	bf00      	nop
    b450:	20000198 	.word	0x20000198
    b454:	2000018c 	.word	0x2000018c
    b458:	20000194 	.word	0x20000194
    b45c:	2000019c 	.word	0x2000019c
    b460:	20000190 	.word	0x20000190

0000b464 <CC_PalTerminate>:
    b464:	b508      	push	{r3, lr}
    b466:	4808      	ldr	r0, [pc, #32]	; (b488 <CC_PalTerminate+0x24>)
    b468:	f000 f824 	bl	b4b4 <CC_PalMutexDestroy>
    b46c:	4807      	ldr	r0, [pc, #28]	; (b48c <CC_PalTerminate+0x28>)
    b46e:	f000 f821 	bl	b4b4 <CC_PalMutexDestroy>
    b472:	4807      	ldr	r0, [pc, #28]	; (b490 <CC_PalTerminate+0x2c>)
    b474:	f000 f81e 	bl	b4b4 <CC_PalMutexDestroy>
    b478:	4806      	ldr	r0, [pc, #24]	; (b494 <CC_PalTerminate+0x30>)
    b47a:	f000 f81b 	bl	b4b4 <CC_PalMutexDestroy>
    b47e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    b482:	f000 b80b 	b.w	b49c <CC_PalDmaTerminate>
    b486:	bf00      	nop
    b488:	20000198 	.word	0x20000198
    b48c:	2000018c 	.word	0x2000018c
    b490:	20000194 	.word	0x20000194
    b494:	20000190 	.word	0x20000190

0000b498 <CC_PalDmaInit>:
    b498:	2000      	movs	r0, #0
    b49a:	4770      	bx	lr

0000b49c <CC_PalDmaTerminate>:
    b49c:	4770      	bx	lr
    b49e:	bf00      	nop

0000b4a0 <CC_PalMutexCreate>:
    b4a0:	b508      	push	{r3, lr}
    b4a2:	4b03      	ldr	r3, [pc, #12]	; (b4b0 <CC_PalMutexCreate+0x10>)
    b4a4:	6802      	ldr	r2, [r0, #0]
    b4a6:	681b      	ldr	r3, [r3, #0]
    b4a8:	6810      	ldr	r0, [r2, #0]
    b4aa:	4798      	blx	r3
    b4ac:	2000      	movs	r0, #0
    b4ae:	bd08      	pop	{r3, pc}
    b4b0:	20000150 	.word	0x20000150

0000b4b4 <CC_PalMutexDestroy>:
    b4b4:	b508      	push	{r3, lr}
    b4b6:	4b03      	ldr	r3, [pc, #12]	; (b4c4 <CC_PalMutexDestroy+0x10>)
    b4b8:	6802      	ldr	r2, [r0, #0]
    b4ba:	685b      	ldr	r3, [r3, #4]
    b4bc:	6810      	ldr	r0, [r2, #0]
    b4be:	4798      	blx	r3
    b4c0:	2000      	movs	r0, #0
    b4c2:	bd08      	pop	{r3, pc}
    b4c4:	20000150 	.word	0x20000150

0000b4c8 <CC_PalPowerSaveModeInit>:
    b4c8:	b570      	push	{r4, r5, r6, lr}
    b4ca:	4c09      	ldr	r4, [pc, #36]	; (b4f0 <CC_PalPowerSaveModeInit+0x28>)
    b4cc:	4d09      	ldr	r5, [pc, #36]	; (b4f4 <CC_PalPowerSaveModeInit+0x2c>)
    b4ce:	6920      	ldr	r0, [r4, #16]
    b4d0:	68ab      	ldr	r3, [r5, #8]
    b4d2:	4798      	blx	r3
    b4d4:	b118      	cbz	r0, b4de <CC_PalPowerSaveModeInit+0x16>
    b4d6:	4b08      	ldr	r3, [pc, #32]	; (b4f8 <CC_PalPowerSaveModeInit+0x30>)
    b4d8:	4808      	ldr	r0, [pc, #32]	; (b4fc <CC_PalPowerSaveModeInit+0x34>)
    b4da:	685b      	ldr	r3, [r3, #4]
    b4dc:	4798      	blx	r3
    b4de:	4a08      	ldr	r2, [pc, #32]	; (b500 <CC_PalPowerSaveModeInit+0x38>)
    b4e0:	68eb      	ldr	r3, [r5, #12]
    b4e2:	6920      	ldr	r0, [r4, #16]
    b4e4:	2100      	movs	r1, #0
    b4e6:	6011      	str	r1, [r2, #0]
    b4e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b4ec:	4718      	bx	r3
    b4ee:	bf00      	nop
    b4f0:	20000160 	.word	0x20000160
    b4f4:	20000150 	.word	0x20000150
    b4f8:	20000140 	.word	0x20000140
    b4fc:	0000fad0 	.word	0x0000fad0
    b500:	20002544 	.word	0x20002544

0000b504 <CC_PalPowerSaveModeSelect>:
    b504:	b570      	push	{r4, r5, r6, lr}
    b506:	4d1a      	ldr	r5, [pc, #104]	; (b570 <CC_PalPowerSaveModeSelect+0x6c>)
    b508:	4e1a      	ldr	r6, [pc, #104]	; (b574 <CC_PalPowerSaveModeSelect+0x70>)
    b50a:	4604      	mov	r4, r0
    b50c:	68b2      	ldr	r2, [r6, #8]
    b50e:	6928      	ldr	r0, [r5, #16]
    b510:	4790      	blx	r2
    b512:	b9f0      	cbnz	r0, b552 <CC_PalPowerSaveModeSelect+0x4e>
    b514:	b15c      	cbz	r4, b52e <CC_PalPowerSaveModeSelect+0x2a>
    b516:	4c18      	ldr	r4, [pc, #96]	; (b578 <CC_PalPowerSaveModeSelect+0x74>)
    b518:	6823      	ldr	r3, [r4, #0]
    b51a:	b1ab      	cbz	r3, b548 <CC_PalPowerSaveModeSelect+0x44>
    b51c:	2b01      	cmp	r3, #1
    b51e:	d01a      	beq.n	b556 <CC_PalPowerSaveModeSelect+0x52>
    b520:	3b01      	subs	r3, #1
    b522:	6023      	str	r3, [r4, #0]
    b524:	6928      	ldr	r0, [r5, #16]
    b526:	68f3      	ldr	r3, [r6, #12]
    b528:	4798      	blx	r3
    b52a:	2000      	movs	r0, #0
    b52c:	bd70      	pop	{r4, r5, r6, pc}
    b52e:	4c12      	ldr	r4, [pc, #72]	; (b578 <CC_PalPowerSaveModeSelect+0x74>)
    b530:	6821      	ldr	r1, [r4, #0]
    b532:	b939      	cbnz	r1, b544 <CC_PalPowerSaveModeSelect+0x40>
    b534:	4b11      	ldr	r3, [pc, #68]	; (b57c <CC_PalPowerSaveModeSelect+0x78>)
    b536:	4a12      	ldr	r2, [pc, #72]	; (b580 <CC_PalPowerSaveModeSelect+0x7c>)
    b538:	2001      	movs	r0, #1
    b53a:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    b53e:	6813      	ldr	r3, [r2, #0]
    b540:	2b00      	cmp	r3, #0
    b542:	d1fc      	bne.n	b53e <CC_PalPowerSaveModeSelect+0x3a>
    b544:	3101      	adds	r1, #1
    b546:	6021      	str	r1, [r4, #0]
    b548:	68f3      	ldr	r3, [r6, #12]
    b54a:	6928      	ldr	r0, [r5, #16]
    b54c:	4798      	blx	r3
    b54e:	2000      	movs	r0, #0
    b550:	bd70      	pop	{r4, r5, r6, pc}
    b552:	480c      	ldr	r0, [pc, #48]	; (b584 <CC_PalPowerSaveModeSelect+0x80>)
    b554:	bd70      	pop	{r4, r5, r6, pc}
    b556:	4a0a      	ldr	r2, [pc, #40]	; (b580 <CC_PalPowerSaveModeSelect+0x7c>)
    b558:	6813      	ldr	r3, [r2, #0]
    b55a:	2b00      	cmp	r3, #0
    b55c:	d1fc      	bne.n	b558 <CC_PalPowerSaveModeSelect+0x54>
    b55e:	4a07      	ldr	r2, [pc, #28]	; (b57c <CC_PalPowerSaveModeSelect+0x78>)
    b560:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    b564:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    b568:	f7ff ff48 	bl	b3fc <CC_HalMaskInterrupt>
    b56c:	6823      	ldr	r3, [r4, #0]
    b56e:	e7d7      	b.n	b520 <CC_PalPowerSaveModeSelect+0x1c>
    b570:	20000160 	.word	0x20000160
    b574:	20000150 	.word	0x20000150
    b578:	20002544 	.word	0x20002544
    b57c:	5002a000 	.word	0x5002a000
    b580:	5002b910 	.word	0x5002b910
    b584:	ffff8fe9 	.word	0xffff8fe9

0000b588 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    b588:	4602      	mov	r2, r0
    b58a:	b158      	cbz	r0, b5a4 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    b58c:	6843      	ldr	r3, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    b58e:	f003 0303 	and.w	r3, r3, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    b592:	2b01      	cmp	r3, #1
    b594:	d003      	beq.n	b59e <sys_notify_validate+0x16>
    b596:	2b03      	cmp	r3, #3
    b598:	d107      	bne.n	b5aa <sys_notify_validate+0x22>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    b59a:	6803      	ldr	r3, [r0, #0]
    b59c:	b143      	cbz	r3, b5b0 <sys_notify_validate+0x28>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    b59e:	2000      	movs	r0, #0
    b5a0:	6090      	str	r0, [r2, #8]
    b5a2:	4770      	bx	lr
		return -EINVAL;
    b5a4:	f06f 0015 	mvn.w	r0, #21
    b5a8:	4770      	bx	lr
	switch (sys_notify_get_method(notify)) {
    b5aa:	f06f 0015 	mvn.w	r0, #21
    b5ae:	4770      	bx	lr
			rv = -EINVAL;
    b5b0:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    b5b4:	4770      	bx	lr

0000b5b6 <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    b5b6:	4603      	mov	r3, r0
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    b5b8:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    b5ba:	f002 0203 	and.w	r2, r2, #3
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    b5be:	6081      	str	r1, [r0, #8]
	switch (method) {
    b5c0:	2a03      	cmp	r2, #3
    b5c2:	d103      	bne.n	b5cc <sys_notify_finalize+0x16>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    b5c4:	6800      	ldr	r0, [r0, #0]
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    b5c6:	2200      	movs	r2, #0
    b5c8:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    b5ca:	4770      	bx	lr
	sys_notify_generic_callback rv = NULL;
    b5cc:	2000      	movs	r0, #0
    b5ce:	e7fa      	b.n	b5c6 <sys_notify_finalize+0x10>

0000b5d0 <arch_printk_char_out>:
}
    b5d0:	2000      	movs	r0, #0
    b5d2:	4770      	bx	lr

0000b5d4 <str_out>:
{
    b5d4:	b410      	push	{r4}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    b5d6:	680c      	ldr	r4, [r1, #0]
    b5d8:	b154      	cbz	r4, b5f0 <str_out+0x1c>
    b5da:	688a      	ldr	r2, [r1, #8]
    b5dc:	684b      	ldr	r3, [r1, #4]
    b5de:	429a      	cmp	r2, r3
    b5e0:	da06      	bge.n	b5f0 <str_out+0x1c>
	if (ctx->count == ctx->max - 1) {
    b5e2:	3b01      	subs	r3, #1
    b5e4:	429a      	cmp	r2, r3
    b5e6:	d008      	beq.n	b5fa <str_out+0x26>
		ctx->str[ctx->count++] = c;
    b5e8:	1c53      	adds	r3, r2, #1
    b5ea:	608b      	str	r3, [r1, #8]
    b5ec:	54a0      	strb	r0, [r4, r2]
    b5ee:	e002      	b.n	b5f6 <str_out+0x22>
		ctx->count++;
    b5f0:	688b      	ldr	r3, [r1, #8]
    b5f2:	3301      	adds	r3, #1
    b5f4:	608b      	str	r3, [r1, #8]
}
    b5f6:	bc10      	pop	{r4}
    b5f8:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    b5fa:	1c53      	adds	r3, r2, #1
    b5fc:	608b      	str	r3, [r1, #8]
    b5fe:	2300      	movs	r3, #0
    b600:	54a3      	strb	r3, [r4, r2]
    b602:	e7f8      	b.n	b5f6 <str_out+0x22>

0000b604 <printk>:
{
    b604:	b40f      	push	{r0, r1, r2, r3}
    b606:	b500      	push	{lr}
    b608:	b083      	sub	sp, #12
    b60a:	a904      	add	r1, sp, #16
    b60c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    b610:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
    b612:	f7f4 ffd1 	bl	5b8 <vprintk>
}
    b616:	b003      	add	sp, #12
    b618:	f85d eb04 	ldr.w	lr, [sp], #4
    b61c:	b004      	add	sp, #16
    b61e:	4770      	bx	lr

0000b620 <snprintk>:
{
    b620:	b40c      	push	{r2, r3}
    b622:	b500      	push	{lr}
    b624:	b083      	sub	sp, #12
    b626:	ab04      	add	r3, sp, #16
    b628:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    b62c:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    b62e:	f7f4 ffd3 	bl	5d8 <vsnprintk>
}
    b632:	b003      	add	sp, #12
    b634:	f85d eb04 	ldr.w	lr, [sp], #4
    b638:	b002      	add	sp, #8
    b63a:	4770      	bx	lr

0000b63c <set_state>:
	mgr->flags = (state & ONOFF_STATE_MASK)
    b63c:	f001 0307 	and.w	r3, r1, #7
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    b640:	8b01      	ldrh	r1, [r0, #24]
    b642:	f021 0107 	bic.w	r1, r1, #7
    b646:	4319      	orrs	r1, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    b648:	8301      	strh	r1, [r0, #24]
}
    b64a:	4770      	bx	lr

0000b64c <notify_monitors>:
{
    b64c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b650:	4606      	mov	r6, r0
    b652:	460f      	mov	r7, r1
    b654:	4690      	mov	r8, r2
	return list->head;
    b656:	6881      	ldr	r1, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    b658:	b119      	cbz	r1, b662 <notify_monitors+0x16>
    b65a:	460c      	mov	r4, r1
Z_GENLIST_PEEK_NEXT(slist, snode)
    b65c:	b131      	cbz	r1, b66c <notify_monitors+0x20>
	return node->next;
    b65e:	680c      	ldr	r4, [r1, #0]
    b660:	e004      	b.n	b66c <notify_monitors+0x20>
    b662:	460c      	mov	r4, r1
    b664:	e002      	b.n	b66c <notify_monitors+0x20>
    b666:	4623      	mov	r3, r4
    b668:	4621      	mov	r1, r4
    b66a:	461c      	mov	r4, r3
    b66c:	b159      	cbz	r1, b686 <notify_monitors+0x3a>
		mon->callback(mgr, mon, state, res);
    b66e:	684d      	ldr	r5, [r1, #4]
    b670:	4643      	mov	r3, r8
    b672:	463a      	mov	r2, r7
    b674:	4630      	mov	r0, r6
    b676:	47a8      	blx	r5
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    b678:	2c00      	cmp	r4, #0
    b67a:	d0f4      	beq.n	b666 <notify_monitors+0x1a>
    b67c:	4623      	mov	r3, r4
Z_GENLIST_PEEK_NEXT(slist, snode)
    b67e:	2c00      	cmp	r4, #0
    b680:	d0f2      	beq.n	b668 <notify_monitors+0x1c>
	return node->next;
    b682:	6823      	ldr	r3, [r4, #0]
    b684:	e7f0      	b.n	b668 <notify_monitors+0x1c>
}
    b686:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000b68a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    b68a:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    b68c:	f013 0307 	ands.w	r3, r3, #7
    b690:	d103      	bne.n	b69a <process_recheck+0x10>
	return list->head;
    b692:	6802      	ldr	r2, [r0, #0]
	    && !sys_slist_is_empty(&mgr->clients)) {
    b694:	b10a      	cbz	r2, b69a <process_recheck+0x10>
		evt = EVT_START;
    b696:	2003      	movs	r0, #3
    b698:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    b69a:	2b02      	cmp	r3, #2
    b69c:	d003      	beq.n	b6a6 <process_recheck+0x1c>
	} else if ((state == ONOFF_STATE_ERROR)
    b69e:	2b01      	cmp	r3, #1
    b6a0:	d006      	beq.n	b6b0 <process_recheck+0x26>
	int evt = EVT_NOP;
    b6a2:	2000      	movs	r0, #0
    b6a4:	4770      	bx	lr
		   && (mgr->refs == 0U)) {
    b6a6:	8b42      	ldrh	r2, [r0, #26]
    b6a8:	2a00      	cmp	r2, #0
    b6aa:	d1f8      	bne.n	b69e <process_recheck+0x14>
		evt = EVT_STOP;
    b6ac:	2004      	movs	r0, #4
    b6ae:	4770      	bx	lr
    b6b0:	6803      	ldr	r3, [r0, #0]
		   && !sys_slist_is_empty(&mgr->clients)) {
    b6b2:	b10b      	cbz	r3, b6b8 <process_recheck+0x2e>
		evt = EVT_RESET;
    b6b4:	2005      	movs	r0, #5
}
    b6b6:	4770      	bx	lr
	int evt = EVT_NOP;
    b6b8:	2000      	movs	r0, #0
    b6ba:	4770      	bx	lr

0000b6bc <process_complete>:
{
    b6bc:	b538      	push	{r3, r4, r5, lr}
    b6be:	4604      	mov	r4, r0
    b6c0:	460d      	mov	r5, r1
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    b6c2:	8b03      	ldrh	r3, [r0, #24]
	if (res < 0) {
    b6c4:	2a00      	cmp	r2, #0
    b6c6:	db07      	blt.n	b6d8 <process_complete+0x1c>
    b6c8:	f003 0307 	and.w	r3, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    b6cc:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    b6ce:	2a01      	cmp	r2, #1
    b6d0:	d90e      	bls.n	b6f0 <process_complete+0x34>
	} else if (state == ONOFF_STATE_TO_OFF) {
    b6d2:	2b04      	cmp	r3, #4
    b6d4:	d032      	beq.n	b73c <process_complete+0x80>
}
    b6d6:	bd38      	pop	{r3, r4, r5, pc}
		*clients = mgr->clients;
    b6d8:	e9d0 0100 	ldrd	r0, r1, [r0]
    b6dc:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    b6e0:	2300      	movs	r3, #0
    b6e2:	6023      	str	r3, [r4, #0]
	list->tail = NULL;
    b6e4:	6063      	str	r3, [r4, #4]
		set_state(mgr, ONOFF_STATE_ERROR);
    b6e6:	2101      	movs	r1, #1
    b6e8:	4620      	mov	r0, r4
    b6ea:	f7ff ffa7 	bl	b63c <set_state>
    b6ee:	e7f2      	b.n	b6d6 <process_complete+0x1a>
		*clients = mgr->clients;
    b6f0:	e9d0 0100 	ldrd	r0, r1, [r0]
    b6f4:	e885 0003 	stmia.w	r5, {r0, r1}
	list->head = NULL;
    b6f8:	2200      	movs	r2, #0
    b6fa:	6022      	str	r2, [r4, #0]
	list->tail = NULL;
    b6fc:	6062      	str	r2, [r4, #4]
		if (state == ONOFF_STATE_TO_ON) {
    b6fe:	2b06      	cmp	r3, #6
    b700:	d117      	bne.n	b732 <process_complete+0x76>
	return list->head;
    b702:	682b      	ldr	r3, [r5, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    b704:	b13b      	cbz	r3, b716 <process_complete+0x5a>
				mgr->refs += 1U;
    b706:	8b62      	ldrh	r2, [r4, #26]
    b708:	3201      	adds	r2, #1
    b70a:	8362      	strh	r2, [r4, #26]
Z_GENLIST_PEEK_NEXT(slist, snode)
    b70c:	2b00      	cmp	r3, #0
    b70e:	d0f9      	beq.n	b704 <process_complete+0x48>
	return node->next;
    b710:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    b712:	2b00      	cmp	r3, #0
    b714:	d1f6      	bne.n	b704 <process_complete+0x48>
			set_state(mgr, ONOFF_STATE_ON);
    b716:	2102      	movs	r1, #2
    b718:	4620      	mov	r0, r4
    b71a:	f7ff ff8f 	bl	b63c <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    b71e:	4620      	mov	r0, r4
    b720:	f7ff ffb3 	bl	b68a <process_recheck>
    b724:	2800      	cmp	r0, #0
    b726:	d0d6      	beq.n	b6d6 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    b728:	8b23      	ldrh	r3, [r4, #24]
    b72a:	f043 0320 	orr.w	r3, r3, #32
    b72e:	8323      	strh	r3, [r4, #24]
    b730:	e7d1      	b.n	b6d6 <process_complete+0x1a>
			set_state(mgr, ONOFF_STATE_OFF);
    b732:	2100      	movs	r1, #0
    b734:	4620      	mov	r0, r4
    b736:	f7ff ff81 	bl	b63c <set_state>
    b73a:	e7f0      	b.n	b71e <process_complete+0x62>
		set_state(mgr, ONOFF_STATE_OFF);
    b73c:	2100      	movs	r1, #0
    b73e:	f7ff ff7d 	bl	b63c <set_state>
		if (process_recheck(mgr) != EVT_NOP) {
    b742:	4620      	mov	r0, r4
    b744:	f7ff ffa1 	bl	b68a <process_recheck>
    b748:	2800      	cmp	r0, #0
    b74a:	d0c4      	beq.n	b6d6 <process_complete+0x1a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    b74c:	8b23      	ldrh	r3, [r4, #24]
    b74e:	f043 0320 	orr.w	r3, r3, #32
    b752:	8323      	strh	r3, [r4, #24]
}
    b754:	e7bf      	b.n	b6d6 <process_complete+0x1a>

0000b756 <validate_args>:
	if ((mgr == NULL) || (cli == NULL)) {
    b756:	b158      	cbz	r0, b770 <validate_args+0x1a>
{
    b758:	b510      	push	{r4, lr}
    b75a:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    b75c:	b159      	cbz	r1, b776 <validate_args+0x20>
	int rv = sys_notify_validate(&cli->notify);
    b75e:	1d08      	adds	r0, r1, #4
    b760:	f7ff ff12 	bl	b588 <sys_notify_validate>
	if ((rv == 0)
    b764:	b918      	cbnz	r0, b76e <validate_args+0x18>
	    && ((cli->notify.flags
    b766:	68a3      	ldr	r3, [r4, #8]
    b768:	f033 0303 	bics.w	r3, r3, #3
    b76c:	d106      	bne.n	b77c <validate_args+0x26>
}
    b76e:	bd10      	pop	{r4, pc}
		return -EINVAL;
    b770:	f06f 0015 	mvn.w	r0, #21
}
    b774:	4770      	bx	lr
		return -EINVAL;
    b776:	f06f 0015 	mvn.w	r0, #21
    b77a:	e7f8      	b.n	b76e <validate_args+0x18>
		rv = -EINVAL;
    b77c:	f06f 0015 	mvn.w	r0, #21
    b780:	e7f5      	b.n	b76e <validate_args+0x18>

0000b782 <notify_one>:
{
    b782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b786:	4607      	mov	r7, r0
    b788:	460c      	mov	r4, r1
    b78a:	4616      	mov	r6, r2
    b78c:	461d      	mov	r5, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    b78e:	4619      	mov	r1, r3
    b790:	1d20      	adds	r0, r4, #4
    b792:	f7ff ff10 	bl	b5b6 <sys_notify_finalize>
	if (cb) {
    b796:	b128      	cbz	r0, b7a4 <notify_one+0x22>
    b798:	4680      	mov	r8, r0
		cb(mgr, cli, state, res);
    b79a:	462b      	mov	r3, r5
    b79c:	4632      	mov	r2, r6
    b79e:	4621      	mov	r1, r4
    b7a0:	4638      	mov	r0, r7
    b7a2:	47c0      	blx	r8
}
    b7a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000b7a8 <notify_all>:
{
    b7a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b7ac:	4681      	mov	r9, r0
    b7ae:	460c      	mov	r4, r1
    b7b0:	4690      	mov	r8, r2
    b7b2:	461f      	mov	r7, r3
	while (!sys_slist_is_empty(list)) {
    b7b4:	e005      	b.n	b7c2 <notify_all+0x1a>
	list->tail = node;
    b7b6:	6065      	str	r5, [r4, #4]
		notify_one(mgr, cli, state, res);
    b7b8:	463b      	mov	r3, r7
    b7ba:	4642      	mov	r2, r8
    b7bc:	4648      	mov	r0, r9
    b7be:	f7ff ffe0 	bl	b782 <notify_one>
	return list->head;
    b7c2:	6821      	ldr	r1, [r4, #0]
	while (!sys_slist_is_empty(list)) {
    b7c4:	b129      	cbz	r1, b7d2 <notify_all+0x2a>
	return node->next;
    b7c6:	680d      	ldr	r5, [r1, #0]
	list->head = node;
    b7c8:	6025      	str	r5, [r4, #0]
	return list->tail;
    b7ca:	6866      	ldr	r6, [r4, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    b7cc:	428e      	cmp	r6, r1
    b7ce:	d1f3      	bne.n	b7b8 <notify_all+0x10>
    b7d0:	e7f1      	b.n	b7b6 <notify_all+0xe>
}
    b7d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000b7d6 <transition_complete>:
{
    b7d6:	b510      	push	{r4, lr}
	__asm__ volatile(
    b7d8:	f04f 0420 	mov.w	r4, #32
    b7dc:	f3ef 8211 	mrs	r2, BASEPRI
    b7e0:	f384 8812 	msr	BASEPRI_MAX, r4
    b7e4:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    b7e8:	6141      	str	r1, [r0, #20]
	process_event(mgr, EVT_COMPLETE, key);
    b7ea:	2101      	movs	r1, #1
    b7ec:	f7f4 ff0a 	bl	604 <process_event>
}
    b7f0:	bd10      	pop	{r4, pc}

0000b7f2 <onoff_manager_init>:
	if ((mgr == NULL)
    b7f2:	4603      	mov	r3, r0
    b7f4:	b168      	cbz	r0, b812 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    b7f6:	b179      	cbz	r1, b818 <onoff_manager_init+0x26>
	    || (transitions->start == NULL)
    b7f8:	680a      	ldr	r2, [r1, #0]
    b7fa:	b182      	cbz	r2, b81e <onoff_manager_init+0x2c>
	    || (transitions->stop == NULL)) {
    b7fc:	684a      	ldr	r2, [r1, #4]
    b7fe:	b18a      	cbz	r2, b824 <onoff_manager_init+0x32>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    b800:	2000      	movs	r0, #0
    b802:	6018      	str	r0, [r3, #0]
    b804:	6058      	str	r0, [r3, #4]
    b806:	6098      	str	r0, [r3, #8]
    b808:	60d8      	str	r0, [r3, #12]
    b80a:	6158      	str	r0, [r3, #20]
    b80c:	6198      	str	r0, [r3, #24]
    b80e:	6119      	str	r1, [r3, #16]
	return 0;
    b810:	4770      	bx	lr
		return -EINVAL;
    b812:	f06f 0015 	mvn.w	r0, #21
    b816:	4770      	bx	lr
    b818:	f06f 0015 	mvn.w	r0, #21
    b81c:	4770      	bx	lr
    b81e:	f06f 0015 	mvn.w	r0, #21
    b822:	4770      	bx	lr
    b824:	f06f 0015 	mvn.w	r0, #21
}
    b828:	4770      	bx	lr

0000b82a <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    b82a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b82c:	4604      	mov	r4, r0
    b82e:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    b830:	f7ff ff91 	bl	b756 <validate_args>

	if (rv < 0) {
    b834:	1e06      	subs	r6, r0, #0
    b836:	db37      	blt.n	b8a8 <onoff_request+0x7e>
    b838:	f04f 0320 	mov.w	r3, #32
    b83c:	f3ef 8211 	mrs	r2, BASEPRI
    b840:	f383 8812 	msr	BASEPRI_MAX, r3
    b844:	f3bf 8f6f 	isb	sy
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    b848:	8b25      	ldrh	r5, [r4, #24]
    b84a:	f005 0507 	and.w	r5, r5, #7

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    b84e:	8b63      	ldrh	r3, [r4, #26]
    b850:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b854:	428b      	cmp	r3, r1
    b856:	d02f      	beq.n	b8b8 <onoff_request+0x8e>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
    b858:	462e      	mov	r6, r5
	if (state == ONOFF_STATE_ON) {
    b85a:	2d02      	cmp	r5, #2
    b85c:	d00c      	beq.n	b878 <onoff_request+0x4e>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
	} else if ((state == ONOFF_STATE_OFF)
    b85e:	b18d      	cbz	r5, b884 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_OFF)
    b860:	2d04      	cmp	r5, #4
    b862:	d00f      	beq.n	b884 <onoff_request+0x5a>
		   || (state == ONOFF_STATE_TO_ON)) {
    b864:	2d06      	cmp	r5, #6
    b866:	d00d      	beq.n	b884 <onoff_request+0x5a>
		/* Start if OFF, queue client */
		start = (state == ONOFF_STATE_OFF);
		add_client = true;
	} else if (state == ONOFF_STATE_RESETTING) {
    b868:	2d05      	cmp	r5, #5
    b86a:	d01f      	beq.n	b8ac <onoff_request+0x82>
		rv = -ENOTSUP;
	} else {
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
		rv = -EIO;
    b86c:	f06f 0604 	mvn.w	r6, #4
	bool notify = false;            /* do client notification */
    b870:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    b872:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    b874:	4608      	mov	r0, r1
    b876:	e00a      	b.n	b88e <onoff_request+0x64>
		mgr->refs += 1U;
    b878:	3301      	adds	r3, #1
    b87a:	8363      	strh	r3, [r4, #26]
		notify = true;
    b87c:	2101      	movs	r1, #1
	bool start = false;             /* trigger a start transition */
    b87e:	2300      	movs	r3, #0
	bool add_client = false;        /* add client to pending list */
    b880:	4618      	mov	r0, r3
    b882:	e004      	b.n	b88e <onoff_request+0x64>
		start = (state == ONOFF_STATE_OFF);
    b884:	fab5 f385 	clz	r3, r5
    b888:	095b      	lsrs	r3, r3, #5
	bool notify = false;            /* do client notification */
    b88a:	2100      	movs	r1, #0
		add_client = true;
    b88c:	2001      	movs	r0, #1
	}

out:
	if (add_client) {
    b88e:	b128      	cbz	r0, b89c <onoff_request+0x72>
	parent->next = child;
    b890:	2000      	movs	r0, #0
    b892:	6038      	str	r0, [r7, #0]
	return list->tail;
    b894:	6860      	ldr	r0, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    b896:	b1a8      	cbz	r0, b8c4 <onoff_request+0x9a>
	parent->next = child;
    b898:	6007      	str	r7, [r0, #0]
	list->tail = node;
    b89a:	6067      	str	r7, [r4, #4]
		sys_slist_append(&mgr->clients, &cli->node);
	}

	if (start) {
    b89c:	b9ab      	cbnz	r3, b8ca <onoff_request+0xa0>
	__asm__ volatile(
    b89e:	f382 8811 	msr	BASEPRI, r2
    b8a2:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    b8a6:	b9a9      	cbnz	r1, b8d4 <onoff_request+0xaa>
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    b8a8:	4630      	mov	r0, r6
    b8aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rv = -ENOTSUP;
    b8ac:	f06f 0685 	mvn.w	r6, #133	; 0x85
	bool notify = false;            /* do client notification */
    b8b0:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    b8b2:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    b8b4:	4608      	mov	r0, r1
    b8b6:	e7ea      	b.n	b88e <onoff_request+0x64>
		rv = -EAGAIN;
    b8b8:	f06f 060a 	mvn.w	r6, #10
	bool notify = false;            /* do client notification */
    b8bc:	2100      	movs	r1, #0
	bool start = false;             /* trigger a start transition */
    b8be:	460b      	mov	r3, r1
	bool add_client = false;        /* add client to pending list */
    b8c0:	4608      	mov	r0, r1
    b8c2:	e7e4      	b.n	b88e <onoff_request+0x64>
    b8c4:	6067      	str	r7, [r4, #4]
	list->head = node;
    b8c6:	6027      	str	r7, [r4, #0]
}
    b8c8:	e7e8      	b.n	b89c <onoff_request+0x72>
		process_event(mgr, EVT_RECHECK, key);
    b8ca:	2102      	movs	r1, #2
    b8cc:	4620      	mov	r0, r4
    b8ce:	f7f4 fe99 	bl	604 <process_event>
    b8d2:	e7e9      	b.n	b8a8 <onoff_request+0x7e>
			notify_one(mgr, cli, state, 0);
    b8d4:	2300      	movs	r3, #0
    b8d6:	462a      	mov	r2, r5
    b8d8:	4639      	mov	r1, r7
    b8da:	4620      	mov	r0, r4
    b8dc:	f7ff ff51 	bl	b782 <notify_one>
    b8e0:	e7e2      	b.n	b8a8 <onoff_request+0x7e>

0000b8e2 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    b8e2:	b510      	push	{r4, lr}
	__asm__ volatile(
    b8e4:	f04f 0320 	mov.w	r3, #32
    b8e8:	f3ef 8211 	mrs	r2, BASEPRI
    b8ec:	f383 8812 	msr	BASEPRI_MAX, r3
    b8f0:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    b8f4:	8b03      	ldrh	r3, [r0, #24]
    b8f6:	f003 0307 	and.w	r3, r3, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    b8fa:	2b02      	cmp	r3, #2
    b8fc:	d007      	beq.n	b90e <onoff_release+0x2c>
		if (state == ONOFF_STATE_ERROR) {
    b8fe:	2b01      	cmp	r3, #1
    b900:	d002      	beq.n	b908 <onoff_release+0x26>
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    b902:	f06f 0485 	mvn.w	r4, #133	; 0x85
	__ASSERT_NO_MSG(mgr->refs > 0);
	mgr->refs -= 1U;
	stop = (mgr->refs == 0);

out:
	if (stop) {
    b906:	e008      	b.n	b91a <onoff_release+0x38>
			rv = -EIO;
    b908:	f06f 0404 	mvn.w	r4, #4
    b90c:	e005      	b.n	b91a <onoff_release+0x38>
    b90e:	461c      	mov	r4, r3
	mgr->refs -= 1U;
    b910:	8b43      	ldrh	r3, [r0, #26]
    b912:	3b01      	subs	r3, #1
    b914:	b29b      	uxth	r3, r3
    b916:	8343      	strh	r3, [r0, #26]
	if (stop) {
    b918:	b12b      	cbz	r3, b926 <onoff_release+0x44>
	__asm__ volatile(
    b91a:	f382 8811 	msr	BASEPRI, r2
    b91e:	f3bf 8f6f 	isb	sy
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
}
    b922:	4620      	mov	r0, r4
    b924:	bd10      	pop	{r4, pc}
		process_event(mgr, EVT_RECHECK, key);
    b926:	2102      	movs	r1, #2
    b928:	f7f4 fe6c 	bl	604 <process_event>
    b92c:	e7f9      	b.n	b922 <onoff_release+0x40>

0000b92e <onoff_cancel>:
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
	if ((mgr == NULL) || (cli == NULL)) {
    b92e:	2800      	cmp	r0, #0
    b930:	d031      	beq.n	b996 <onoff_cancel+0x68>
{
    b932:	b470      	push	{r4, r5, r6}
    b934:	4605      	mov	r5, r0
	if ((mgr == NULL) || (cli == NULL)) {
    b936:	2900      	cmp	r1, #0
    b938:	d030      	beq.n	b99c <onoff_cancel+0x6e>
	__asm__ volatile(
    b93a:	f04f 0320 	mov.w	r3, #32
    b93e:	f3ef 8611 	mrs	r6, BASEPRI
    b942:	f383 8812 	msr	BASEPRI_MAX, r3
    b946:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    b94a:	8b00      	ldrh	r0, [r0, #24]
    b94c:	f000 0007 	and.w	r0, r0, #7

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
    b950:	460c      	mov	r4, r1
	return list->head;
    b952:	682b      	ldr	r3, [r5, #0]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    b954:	2200      	movs	r2, #0
    b956:	b1b3      	cbz	r3, b986 <onoff_cancel+0x58>
    b958:	429c      	cmp	r4, r3
    b95a:	d002      	beq.n	b962 <onoff_cancel+0x34>
    b95c:	461a      	mov	r2, r3
    b95e:	681b      	ldr	r3, [r3, #0]
    b960:	e7f9      	b.n	b956 <onoff_cancel+0x28>
Z_GENLIST_REMOVE(slist, snode)
    b962:	b13a      	cbz	r2, b974 <onoff_cancel+0x46>
	return node->next;
    b964:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
    b966:	6013      	str	r3, [r2, #0]
	return list->tail;
    b968:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    b96a:	4299      	cmp	r1, r3
    b96c:	d009      	beq.n	b982 <onoff_cancel+0x54>
	parent->next = child;
    b96e:	2300      	movs	r3, #0
    b970:	600b      	str	r3, [r1, #0]
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
    b972:	e00a      	b.n	b98a <onoff_cancel+0x5c>
	return node->next;
    b974:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    b976:	602b      	str	r3, [r5, #0]
	return list->tail;
    b978:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    b97a:	4291      	cmp	r1, r2
    b97c:	d1f7      	bne.n	b96e <onoff_cancel+0x40>
	list->tail = node;
    b97e:	606b      	str	r3, [r5, #4]
}
    b980:	e7f5      	b.n	b96e <onoff_cancel+0x40>
	list->tail = node;
    b982:	606a      	str	r2, [r5, #4]
}
    b984:	e7f3      	b.n	b96e <onoff_cancel+0x40>
	int rv = -EALREADY;
    b986:	f06f 0077 	mvn.w	r0, #119	; 0x77
	__asm__ volatile(
    b98a:	f386 8811 	msr	BASEPRI, r6
    b98e:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
    b992:	bc70      	pop	{r4, r5, r6}
    b994:	4770      	bx	lr
		return -EINVAL;
    b996:	f06f 0015 	mvn.w	r0, #21
}
    b99a:	4770      	bx	lr
		return -EINVAL;
    b99c:	f06f 0015 	mvn.w	r0, #21
    b9a0:	e7f7      	b.n	b992 <onoff_cancel+0x64>

0000b9a2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    b9a2:	b508      	push	{r3, lr}
    b9a4:	4604      	mov	r4, r0
    b9a6:	4608      	mov	r0, r1
    b9a8:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    b9aa:	461a      	mov	r2, r3
    b9ac:	47a0      	blx	r4
	return z_impl_z_current_get();
    b9ae:	f7ff f931 	bl	ac14 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    b9b2:	f7f8 fe79 	bl	46a8 <z_impl_k_thread_abort>

0000b9b6 <chunk_mem>:
#include "heap.h"

static void *chunk_mem(struct z_heap *h, chunkid_t c)
{
	chunk_unit_t *buf = chunk_buf(h);
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    b9b6:	00c9      	lsls	r1, r1, #3
	return big_heap_chunks(bytes / CHUNK_UNIT);
}

static inline bool big_heap(struct z_heap *h)
{
	return big_heap_chunks(h->end_chunk);
    b9b8:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
    b9ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    b9be:	d303      	bcc.n	b9c8 <chunk_mem+0x12>
    b9c0:	2308      	movs	r3, #8
    b9c2:	4419      	add	r1, r3

	CHECK(!(((uintptr_t)ret) & (big_heap(h) ? 7 : 3)));

	return ret;
}
    b9c4:	4408      	add	r0, r1
    b9c6:	4770      	bx	lr
    b9c8:	2304      	movs	r3, #4
    b9ca:	e7fa      	b.n	b9c2 <chunk_mem+0xc>

0000b9cc <free_list_remove_bidx>:

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
    b9cc:	b430      	push	{r4, r5}
	void *cmem = &buf[c];
    b9ce:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
    b9d2:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    b9d4:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    b9d8:	d317      	bcc.n	ba0a <free_list_remove_bidx+0x3e>
		return ((uint32_t *)cmem)[f];
    b9da:	68eb      	ldr	r3, [r5, #12]

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & (1 << bidx));

	if (next_free_chunk(h, c) == c) {
    b9dc:	4299      	cmp	r1, r3
    b9de:	d016      	beq.n	ba0e <free_list_remove_bidx+0x42>
	if (big_heap(h)) {
    b9e0:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    b9e4:	d320      	bcc.n	ba28 <free_list_remove_bidx+0x5c>
		return ((uint32_t *)cmem)[f];
    b9e6:	68a9      	ldr	r1, [r5, #8]
		b->next = 0;
	} else {
		chunkid_t first = prev_free_chunk(h, c),
			  second = next_free_chunk(h, c);

		b->next = second;
    b9e8:	3204      	adds	r2, #4
    b9ea:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
	void *cmem = &buf[c];
    b9ee:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
    b9f2:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    b9f6:	d319      	bcc.n	ba2c <free_list_remove_bidx+0x60>
		((uint32_t *)cmem)[f] = val;
    b9f8:	60d3      	str	r3, [r2, #12]
	void *cmem = &buf[c];
    b9fa:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
    b9fe:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
    ba00:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    ba04:	d314      	bcc.n	ba30 <free_list_remove_bidx+0x64>
		((uint32_t *)cmem)[f] = val;
    ba06:	6099      	str	r1, [r3, #8]
    ba08:	e00c      	b.n	ba24 <free_list_remove_bidx+0x58>
		return ((uint16_t *)cmem)[f];
    ba0a:	88eb      	ldrh	r3, [r5, #6]
    ba0c:	e7e6      	b.n	b9dc <free_list_remove_bidx+0x10>
		h->avail_buckets &= ~(1 << bidx);
    ba0e:	2301      	movs	r3, #1
    ba10:	fa03 f102 	lsl.w	r1, r3, r2
    ba14:	68c3      	ldr	r3, [r0, #12]
    ba16:	ea23 0301 	bic.w	r3, r3, r1
    ba1a:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    ba1c:	3204      	adds	r2, #4
    ba1e:	2300      	movs	r3, #0
    ba20:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
		set_next_free_chunk(h, first, second);
		set_prev_free_chunk(h, second, first);
	}
}
    ba24:	bc30      	pop	{r4, r5}
    ba26:	4770      	bx	lr
    ba28:	88a9      	ldrh	r1, [r5, #4]
    ba2a:	e7dd      	b.n	b9e8 <free_list_remove_bidx+0x1c>
		((uint16_t *)cmem)[f] = val;
    ba2c:	80d3      	strh	r3, [r2, #6]
    ba2e:	e7e4      	b.n	b9fa <free_list_remove_bidx+0x2e>
    ba30:	8099      	strh	r1, [r3, #4]
    ba32:	e7f7      	b.n	ba24 <free_list_remove_bidx+0x58>

0000ba34 <free_list_add_bidx>:
		free_list_remove_bidx(h, c, bidx);
	}
}

static void free_list_add_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
    ba34:	b470      	push	{r4, r5, r6}
	struct z_heap_bucket *b = &h->buckets[bidx];

	if (b->next == 0U) {
    ba36:	1d13      	adds	r3, r2, #4
    ba38:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    ba3c:	b9d3      	cbnz	r3, ba74 <free_list_add_bidx+0x40>
		CHECK((h->avail_buckets & (1 << bidx)) == 0);

		/* Empty list, first item */
		h->avail_buckets |= (1 << bidx);
    ba3e:	2301      	movs	r3, #1
    ba40:	fa03 f402 	lsl.w	r4, r3, r2
    ba44:	68c3      	ldr	r3, [r0, #12]
    ba46:	4323      	orrs	r3, r4
    ba48:	60c3      	str	r3, [r0, #12]
		b->next = c;
    ba4a:	3204      	adds	r2, #4
    ba4c:	f840 1022 	str.w	r1, [r0, r2, lsl #2]
	void *cmem = &buf[c];
    ba50:	eb00 03c1 	add.w	r3, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
    ba54:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
    ba56:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    ba5a:	d307      	bcc.n	ba6c <free_list_add_bidx+0x38>
		((uint32_t *)cmem)[f] = val;
    ba5c:	6099      	str	r1, [r3, #8]
	return big_heap_chunks(h->end_chunk);
    ba5e:	6882      	ldr	r2, [r0, #8]
	if (big_heap(h)) {
    ba60:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    ba64:	d304      	bcc.n	ba70 <free_list_add_bidx+0x3c>
		((uint32_t *)cmem)[f] = val;
    ba66:	60d9      	str	r1, [r3, #12]
		set_prev_free_chunk(h, c, first);
		set_next_free_chunk(h, c, second);
		set_next_free_chunk(h, first, c);
		set_prev_free_chunk(h, second, c);
	}
}
    ba68:	bc70      	pop	{r4, r5, r6}
    ba6a:	4770      	bx	lr
		((uint16_t *)cmem)[f] = val;
    ba6c:	8099      	strh	r1, [r3, #4]
    ba6e:	e7f6      	b.n	ba5e <free_list_add_bidx+0x2a>
    ba70:	80d9      	strh	r1, [r3, #6]
    ba72:	e7f9      	b.n	ba68 <free_list_add_bidx+0x34>
	void *cmem = &buf[c];
    ba74:	eb00 04c3 	add.w	r4, r0, r3, lsl #3
	return big_heap_chunks(h->end_chunk);
    ba78:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
    ba7a:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    ba7e:	d318      	bcc.n	bab2 <free_list_add_bidx+0x7e>
		return ((uint32_t *)cmem)[f];
    ba80:	68a2      	ldr	r2, [r4, #8]
	void *cmem = &buf[c];
    ba82:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
	if (big_heap(h)) {
    ba86:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    ba8a:	d314      	bcc.n	bab6 <free_list_add_bidx+0x82>
		((uint32_t *)cmem)[f] = val;
    ba8c:	60aa      	str	r2, [r5, #8]
	return big_heap_chunks(h->end_chunk);
    ba8e:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
    ba90:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    ba94:	d311      	bcc.n	baba <free_list_add_bidx+0x86>
		((uint32_t *)cmem)[f] = val;
    ba96:	60eb      	str	r3, [r5, #12]
	void *cmem = &buf[c];
    ba98:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
    ba9c:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    ba9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    baa2:	d30c      	bcc.n	babe <free_list_add_bidx+0x8a>
		((uint32_t *)cmem)[f] = val;
    baa4:	60d1      	str	r1, [r2, #12]
	return big_heap_chunks(h->end_chunk);
    baa6:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    baa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    baac:	d309      	bcc.n	bac2 <free_list_add_bidx+0x8e>
		((uint32_t *)cmem)[f] = val;
    baae:	60a1      	str	r1, [r4, #8]
    bab0:	e7da      	b.n	ba68 <free_list_add_bidx+0x34>
		return ((uint16_t *)cmem)[f];
    bab2:	88a2      	ldrh	r2, [r4, #4]
    bab4:	e7e5      	b.n	ba82 <free_list_add_bidx+0x4e>
		((uint16_t *)cmem)[f] = val;
    bab6:	80aa      	strh	r2, [r5, #4]
    bab8:	e7e9      	b.n	ba8e <free_list_add_bidx+0x5a>
    baba:	80eb      	strh	r3, [r5, #6]
    babc:	e7ec      	b.n	ba98 <free_list_add_bidx+0x64>
    babe:	80d1      	strh	r1, [r2, #6]
    bac0:	e7f1      	b.n	baa6 <free_list_add_bidx+0x72>
    bac2:	80a1      	strh	r1, [r4, #4]
    bac4:	e7d0      	b.n	ba68 <free_list_add_bidx+0x34>

0000bac6 <split_chunks>:

/* Splits a chunk "lc" into a left chunk and a right chunk at "rc".
 * Leaves both chunks marked "free"
 */
static void split_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
    bac6:	b470      	push	{r4, r5, r6}
	void *cmem = &buf[c];
    bac8:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
    bacc:	6885      	ldr	r5, [r0, #8]
	if (big_heap(h)) {
    bace:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    bad2:	d325      	bcc.n	bb20 <split_chunks+0x5a>
		return ((uint32_t *)cmem)[f];
    bad4:	6866      	ldr	r6, [r4, #4]
	CHECK(rc > lc);
	CHECK(rc - lc < chunk_size(h, lc));

	chunksz_t sz0 = chunk_size(h, lc);
	chunksz_t lsz = rc - lc;
    bad6:	1a53      	subs	r3, r2, r1
	chunksz_t rsz = sz0 - lsz;
    bad8:	1a89      	subs	r1, r1, r2
    bada:	eb01 0156 	add.w	r1, r1, r6, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    bade:	005e      	lsls	r6, r3, #1
	if (big_heap(h)) {
    bae0:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    bae4:	d31e      	bcc.n	bb24 <split_chunks+0x5e>
		((uint32_t *)cmem)[f] = val;
    bae6:	6066      	str	r6, [r4, #4]
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    bae8:	004d      	lsls	r5, r1, #1
	void *cmem = &buf[c];
    baea:	eb00 04c2 	add.w	r4, r0, r2, lsl #3
	return big_heap_chunks(h->end_chunk);
    baee:	6886      	ldr	r6, [r0, #8]
	if (big_heap(h)) {
    baf0:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
    baf4:	d318      	bcc.n	bb28 <split_chunks+0x62>
		((uint32_t *)cmem)[f] = val;
    baf6:	6065      	str	r5, [r4, #4]
	return big_heap_chunks(h->end_chunk);
    baf8:	6885      	ldr	r5, [r0, #8]
	if (big_heap(h)) {
    bafa:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    bafe:	d315      	bcc.n	bb2c <split_chunks+0x66>
		((uint32_t *)cmem)[f] = val;
    bb00:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
	return big_heap_chunks(h->end_chunk);
    bb04:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    bb06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    bb0a:	d312      	bcc.n	bb32 <split_chunks+0x6c>
		return ((uint32_t *)cmem)[f];
    bb0c:	6864      	ldr	r4, [r4, #4]
	return c + chunk_size(h, c);
    bb0e:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
    bb12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    bb16:	d30e      	bcc.n	bb36 <split_chunks+0x70>
		((uint32_t *)cmem)[f] = val;
    bb18:	f840 1032 	str.w	r1, [r0, r2, lsl #3]

	set_chunk_size(h, lc, lsz);
	set_chunk_size(h, rc, rsz);
	set_left_chunk_size(h, rc, lsz);
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}
    bb1c:	bc70      	pop	{r4, r5, r6}
    bb1e:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
    bb20:	8866      	ldrh	r6, [r4, #2]
    bb22:	e7d8      	b.n	bad6 <split_chunks+0x10>
		((uint16_t *)cmem)[f] = val;
    bb24:	8066      	strh	r6, [r4, #2]
    bb26:	e7df      	b.n	bae8 <split_chunks+0x22>
    bb28:	8065      	strh	r5, [r4, #2]
    bb2a:	e7e5      	b.n	baf8 <split_chunks+0x32>
    bb2c:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
    bb30:	e7e8      	b.n	bb04 <split_chunks+0x3e>
		return ((uint16_t *)cmem)[f];
    bb32:	8864      	ldrh	r4, [r4, #2]
    bb34:	e7eb      	b.n	bb0e <split_chunks+0x48>
		((uint16_t *)cmem)[f] = val;
    bb36:	f820 1032 	strh.w	r1, [r0, r2, lsl #3]
    bb3a:	e7ef      	b.n	bb1c <split_chunks+0x56>

0000bb3c <merge_chunks>:

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
    bb3c:	b470      	push	{r4, r5, r6}
	void *cmem = &buf[c];
    bb3e:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
    bb42:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    bb44:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    bb48:	d31c      	bcc.n	bb84 <merge_chunks+0x48>
		return ((uint32_t *)cmem)[f];
    bb4a:	684b      	ldr	r3, [r1, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    bb4c:	085b      	lsrs	r3, r3, #1
	void *cmem = &buf[c];
    bb4e:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
	if (big_heap(h)) {
    bb52:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    bb56:	d317      	bcc.n	bb88 <merge_chunks+0x4c>
		return ((uint32_t *)cmem)[f];
    bb58:	686e      	ldr	r6, [r5, #4]
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    bb5a:	eb03 0356 	add.w	r3, r3, r6, lsr #1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    bb5e:	005e      	lsls	r6, r3, #1
	if (big_heap(h)) {
    bb60:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    bb64:	d312      	bcc.n	bb8c <merge_chunks+0x50>
		((uint32_t *)cmem)[f] = val;
    bb66:	604e      	str	r6, [r1, #4]
	return big_heap_chunks(h->end_chunk);
    bb68:	6881      	ldr	r1, [r0, #8]
	if (big_heap(h)) {
    bb6a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
    bb6e:	d30f      	bcc.n	bb90 <merge_chunks+0x54>
		return ((uint32_t *)cmem)[f];
    bb70:	686c      	ldr	r4, [r5, #4]
	return c + chunk_size(h, c);
    bb72:	eb02 0254 	add.w	r2, r2, r4, lsr #1
	if (big_heap(h)) {
    bb76:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
    bb7a:	d30b      	bcc.n	bb94 <merge_chunks+0x58>
		((uint32_t *)cmem)[f] = val;
    bb7c:	f840 3032 	str.w	r3, [r0, r2, lsl #3]

	set_chunk_size(h, lc, newsz);
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
    bb80:	bc70      	pop	{r4, r5, r6}
    bb82:	4770      	bx	lr
		return ((uint16_t *)cmem)[f];
    bb84:	884b      	ldrh	r3, [r1, #2]
    bb86:	e7e1      	b.n	bb4c <merge_chunks+0x10>
    bb88:	886e      	ldrh	r6, [r5, #2]
    bb8a:	e7e6      	b.n	bb5a <merge_chunks+0x1e>
		((uint16_t *)cmem)[f] = val;
    bb8c:	804e      	strh	r6, [r1, #2]
    bb8e:	e7eb      	b.n	bb68 <merge_chunks+0x2c>
		return ((uint16_t *)cmem)[f];
    bb90:	886c      	ldrh	r4, [r5, #2]
    bb92:	e7ee      	b.n	bb72 <merge_chunks+0x36>
		((uint16_t *)cmem)[f] = val;
    bb94:	f820 3032 	strh.w	r3, [r0, r2, lsl #3]
    bb98:	e7f2      	b.n	bb80 <merge_chunks+0x44>

0000bb9a <mem_to_chunkid>:
	return big_heap_chunks(h->end_chunk);
    bb9a:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) ? 8 : 4;
    bb9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    bba0:	d304      	bcc.n	bbac <mem_to_chunkid+0x12>
    bba2:	2308      	movs	r3, #8
 * boundary.
 */
static chunkid_t mem_to_chunkid(struct z_heap *h, void *p)
{
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    bba4:	1ac9      	subs	r1, r1, r3
    bba6:	1a08      	subs	r0, r1, r0
}
    bba8:	08c0      	lsrs	r0, r0, #3
    bbaa:	4770      	bx	lr
    bbac:	2304      	movs	r3, #4
    bbae:	e7f9      	b.n	bba4 <mem_to_chunkid+0xa>

0000bbb0 <free_list_remove>:
{
    bbb0:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
    bbb2:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
    bbb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    bbb8:	d307      	bcc.n	bbca <free_list_remove+0x1a>
	void *cmem = &buf[c];
    bbba:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
    bbbe:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    bbc0:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
    bbc2:	2a01      	cmp	r2, #1
    bbc4:	d002      	beq.n	bbcc <free_list_remove+0x1c>
    bbc6:	2200      	movs	r2, #0
    bbc8:	e000      	b.n	bbcc <free_list_remove+0x1c>
    bbca:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
    bbcc:	b9a2      	cbnz	r2, bbf8 <free_list_remove+0x48>
	void *cmem = &buf[c];
    bbce:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
    bbd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    bbd6:	d310      	bcc.n	bbfa <free_list_remove+0x4a>
		return ((uint32_t *)cmem)[f];
    bbd8:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    bbda:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
    bbdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    bbe0:	d30d      	bcc.n	bbfe <free_list_remove+0x4e>
    bbe2:	2308      	movs	r3, #8
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    bbe4:	3308      	adds	r3, #8
	return chunksz_in * CHUNK_UNIT - chunk_header_bytes(h);
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    bbe6:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
    bbea:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
    bbec:	fab2 f282 	clz	r2, r2
		free_list_remove_bidx(h, c, bidx);
    bbf0:	f1c2 021f 	rsb	r2, r2, #31
    bbf4:	f7ff feea 	bl	b9cc <free_list_remove_bidx>
}
    bbf8:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
    bbfa:	8852      	ldrh	r2, [r2, #2]
    bbfc:	e7ed      	b.n	bbda <free_list_remove+0x2a>
	return big_heap(h) ? 8 : 4;
    bbfe:	2304      	movs	r3, #4
    bc00:	e7f0      	b.n	bbe4 <free_list_remove+0x34>

0000bc02 <free_list_add>:
{
    bc02:	b508      	push	{r3, lr}
	return big_heap_chunks(h->end_chunk);
    bc04:	6883      	ldr	r3, [r0, #8]
	return big_heap(h) && chunk_size(h, c) == 1U;
    bc06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    bc0a:	d307      	bcc.n	bc1c <free_list_add+0x1a>
	void *cmem = &buf[c];
    bc0c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
		return ((uint32_t *)cmem)[f];
    bc10:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    bc12:	0852      	lsrs	r2, r2, #1
	return big_heap(h) && chunk_size(h, c) == 1U;
    bc14:	2a01      	cmp	r2, #1
    bc16:	d002      	beq.n	bc1e <free_list_add+0x1c>
    bc18:	2200      	movs	r2, #0
    bc1a:	e000      	b.n	bc1e <free_list_add+0x1c>
    bc1c:	2200      	movs	r2, #0
	if (!solo_free_header(h, c)) {
    bc1e:	b9a2      	cbnz	r2, bc4a <free_list_add+0x48>
	void *cmem = &buf[c];
    bc20:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
	if (big_heap(h)) {
    bc24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    bc28:	d310      	bcc.n	bc4c <free_list_add+0x4a>
		return ((uint32_t *)cmem)[f];
    bc2a:	6852      	ldr	r2, [r2, #4]
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
    bc2c:	0852      	lsrs	r2, r2, #1
	return big_heap(h) ? 8 : 4;
    bc2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    bc32:	d30d      	bcc.n	bc50 <free_list_add+0x4e>
    bc34:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    bc36:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    bc38:	eba2 02d3 	sub.w	r2, r2, r3, lsr #3
    bc3c:	3201      	adds	r2, #1
	return 31 - __builtin_clz(usable_sz);
    bc3e:	fab2 f282 	clz	r2, r2
		free_list_add_bidx(h, c, bidx);
    bc42:	f1c2 021f 	rsb	r2, r2, #31
    bc46:	f7ff fef5 	bl	ba34 <free_list_add_bidx>
}
    bc4a:	bd08      	pop	{r3, pc}
		return ((uint16_t *)cmem)[f];
    bc4c:	8852      	ldrh	r2, [r2, #2]
    bc4e:	e7ed      	b.n	bc2c <free_list_add+0x2a>
	return big_heap(h) ? 8 : 4;
    bc50:	2304      	movs	r3, #4
    bc52:	e7f0      	b.n	bc36 <free_list_add+0x34>

0000bc54 <free_chunk>:
{
    bc54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bc56:	4604      	mov	r4, r0
    bc58:	460d      	mov	r5, r1
	void *cmem = &buf[c];
    bc5a:	00ce      	lsls	r6, r1, #3
    bc5c:	eb00 07c1 	add.w	r7, r0, r1, lsl #3
	return big_heap_chunks(h->end_chunk);
    bc60:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    bc62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    bc66:	d31f      	bcc.n	bca8 <free_chunk+0x54>
		return ((uint32_t *)cmem)[f];
    bc68:	6879      	ldr	r1, [r7, #4]
	return c + chunk_size(h, c);
    bc6a:	eb05 0151 	add.w	r1, r5, r1, lsr #1
	void *cmem = &buf[c];
    bc6e:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
	if (big_heap(h)) {
    bc72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    bc76:	d319      	bcc.n	bcac <free_chunk+0x58>
		return ((uint32_t *)cmem)[f];
    bc78:	6853      	ldr	r3, [r2, #4]
	if (!chunk_used(h, right_chunk(h, c))) {
    bc7a:	f013 0f01 	tst.w	r3, #1
    bc7e:	d017      	beq.n	bcb0 <free_chunk+0x5c>
	return big_heap_chunks(h->end_chunk);
    bc80:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
    bc82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    bc86:	d324      	bcc.n	bcd2 <free_chunk+0x7e>
		return ((uint32_t *)cmem)[f];
    bc88:	59a1      	ldr	r1, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
    bc8a:	1a69      	subs	r1, r5, r1
	void *cmem = &buf[c];
    bc8c:	eb04 02c1 	add.w	r2, r4, r1, lsl #3
	if (big_heap(h)) {
    bc90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    bc94:	d31f      	bcc.n	bcd6 <free_chunk+0x82>
		return ((uint32_t *)cmem)[f];
    bc96:	6853      	ldr	r3, [r2, #4]
	if (!chunk_used(h, left_chunk(h, c))) {
    bc98:	f013 0f01 	tst.w	r3, #1
    bc9c:	d01d      	beq.n	bcda <free_chunk+0x86>
	free_list_add(h, c);
    bc9e:	4629      	mov	r1, r5
    bca0:	4620      	mov	r0, r4
    bca2:	f7ff ffae 	bl	bc02 <free_list_add>
}
    bca6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return ((uint16_t *)cmem)[f];
    bca8:	8879      	ldrh	r1, [r7, #2]
    bcaa:	e7de      	b.n	bc6a <free_chunk+0x16>
    bcac:	8853      	ldrh	r3, [r2, #2]
    bcae:	e7e4      	b.n	bc7a <free_chunk+0x26>
		free_list_remove(h, right_chunk(h, c));
    bcb0:	4620      	mov	r0, r4
    bcb2:	f7ff ff7d 	bl	bbb0 <free_list_remove>
	return big_heap_chunks(h->end_chunk);
    bcb6:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
    bcb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    bcbc:	d307      	bcc.n	bcce <free_chunk+0x7a>
		return ((uint32_t *)cmem)[f];
    bcbe:	687a      	ldr	r2, [r7, #4]
		merge_chunks(h, c, right_chunk(h, c));
    bcc0:	eb05 0252 	add.w	r2, r5, r2, lsr #1
    bcc4:	4629      	mov	r1, r5
    bcc6:	4620      	mov	r0, r4
    bcc8:	f7ff ff38 	bl	bb3c <merge_chunks>
    bccc:	e7d8      	b.n	bc80 <free_chunk+0x2c>
		return ((uint16_t *)cmem)[f];
    bcce:	887a      	ldrh	r2, [r7, #2]
    bcd0:	e7f6      	b.n	bcc0 <free_chunk+0x6c>
    bcd2:	5ba1      	ldrh	r1, [r4, r6]
    bcd4:	e7d9      	b.n	bc8a <free_chunk+0x36>
    bcd6:	8853      	ldrh	r3, [r2, #2]
    bcd8:	e7de      	b.n	bc98 <free_chunk+0x44>
		free_list_remove(h, left_chunk(h, c));
    bcda:	4620      	mov	r0, r4
    bcdc:	f7ff ff68 	bl	bbb0 <free_list_remove>
	return big_heap_chunks(h->end_chunk);
    bce0:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
    bce2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    bce6:	d30c      	bcc.n	bd02 <free_chunk+0xae>
		return ((uint32_t *)cmem)[f];
    bce8:	59a1      	ldr	r1, [r4, r6]
		merge_chunks(h, left_chunk(h, c), c);
    bcea:	462a      	mov	r2, r5
    bcec:	1a69      	subs	r1, r5, r1
    bcee:	4620      	mov	r0, r4
    bcf0:	f7ff ff24 	bl	bb3c <merge_chunks>
	return big_heap_chunks(h->end_chunk);
    bcf4:	68a3      	ldr	r3, [r4, #8]
	if (big_heap(h)) {
    bcf6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    bcfa:	d304      	bcc.n	bd06 <free_chunk+0xb2>
		return ((uint32_t *)cmem)[f];
    bcfc:	59a3      	ldr	r3, [r4, r6]
	return c - chunk_field(h, c, LEFT_SIZE);
    bcfe:	1aed      	subs	r5, r5, r3
    bd00:	e7cd      	b.n	bc9e <free_chunk+0x4a>
		return ((uint16_t *)cmem)[f];
    bd02:	5ba1      	ldrh	r1, [r4, r6]
    bd04:	e7f1      	b.n	bcea <free_chunk+0x96>
    bd06:	5ba3      	ldrh	r3, [r4, r6]
    bd08:	e7f9      	b.n	bcfe <free_chunk+0xaa>

0000bd0a <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    bd0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return big_heap_chunks(h->end_chunk);
    bd0c:	6885      	ldr	r5, [r0, #8]
	return big_heap(h) ? 8 : 4;
    bd0e:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    bd12:	d311      	bcc.n	bd38 <alloc_chunk+0x2e>
    bd14:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    bd16:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    bd18:	eba1 03d3 	sub.w	r3, r1, r3, lsr #3
    bd1c:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
    bd1e:	fab3 f383 	clz	r3, r3
    bd22:	f1c3 021f 	rsb	r2, r3, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    bd26:	f1c3 0423 	rsb	r4, r3, #35	; 0x23
    bd2a:	f850 c024 	ldr.w	ip, [r0, r4, lsl #2]
    bd2e:	f1bc 0f00 	cmp.w	ip, #0
    bd32:	d024      	beq.n	bd7e <alloc_chunk+0x74>
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
    bd34:	2603      	movs	r6, #3
    bd36:	e010      	b.n	bd5a <alloc_chunk+0x50>
	return big_heap(h) ? 8 : 4;
    bd38:	2304      	movs	r3, #4
    bd3a:	e7ec      	b.n	bd16 <alloc_chunk+0xc>
		return ((uint16_t *)cmem)[f];
    bd3c:	f8b7 e002 	ldrh.w	lr, [r7, #2]
    bd40:	e015      	b.n	bd6e <alloc_chunk+0x64>
		do {
			chunkid_t c = b->next;
			if (chunk_size(h, c) >= sz) {
				free_list_remove_bidx(h, c, bi);
    bd42:	4621      	mov	r1, r4
    bd44:	f7ff fe42 	bl	b9cc <free_list_remove_bidx>
				return c;
    bd48:	e021      	b.n	bd8e <alloc_chunk+0x84>
    bd4a:	88fc      	ldrh	r4, [r7, #6]
			}
			b->next = next_free_chunk(h, c);
    bd4c:	1d17      	adds	r7, r2, #4
    bd4e:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
			CHECK(b->next != 0);
		} while (--i && b->next != first);
    bd52:	3e01      	subs	r6, #1
    bd54:	d013      	beq.n	bd7e <alloc_chunk+0x74>
    bd56:	45a4      	cmp	ip, r4
    bd58:	d011      	beq.n	bd7e <alloc_chunk+0x74>
			chunkid_t c = b->next;
    bd5a:	1d14      	adds	r4, r2, #4
    bd5c:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
	void *cmem = &buf[c];
    bd60:	eb00 07c4 	add.w	r7, r0, r4, lsl #3
	if (big_heap(h)) {
    bd64:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    bd68:	d3e8      	bcc.n	bd3c <alloc_chunk+0x32>
		return ((uint32_t *)cmem)[f];
    bd6a:	f8d7 e004 	ldr.w	lr, [r7, #4]
			if (chunk_size(h, c) >= sz) {
    bd6e:	ebb1 0f5e 	cmp.w	r1, lr, lsr #1
    bd72:	d9e6      	bls.n	bd42 <alloc_chunk+0x38>
	if (big_heap(h)) {
    bd74:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    bd78:	d3e7      	bcc.n	bd4a <alloc_chunk+0x40>
		return ((uint32_t *)cmem)[f];
    bd7a:	68fc      	ldr	r4, [r7, #12]
    bd7c:	e7e6      	b.n	bd4c <alloc_chunk+0x42>
	}

	/* Otherwise pick the smallest non-empty bucket guaranteed to
	 * fit and use that unconditionally.
	 */
	uint32_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
    bd7e:	68c4      	ldr	r4, [r0, #12]
    bd80:	f1c3 0220 	rsb	r2, r3, #32
    bd84:	2301      	movs	r3, #1
    bd86:	4093      	lsls	r3, r2
    bd88:	425b      	negs	r3, r3

	if (bmask != 0U) {
    bd8a:	401c      	ands	r4, r3
    bd8c:	d101      	bne.n	bd92 <alloc_chunk+0x88>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    bd8e:	4620      	mov	r0, r4
    bd90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		int minbucket = __builtin_ctz(bmask);
    bd92:	fa94 f2a4 	rbit	r2, r4
    bd96:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    bd9a:	1d13      	adds	r3, r2, #4
    bd9c:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    bda0:	4621      	mov	r1, r4
    bda2:	f7ff fe13 	bl	b9cc <free_list_remove_bidx>
		return c;
    bda6:	e7f2      	b.n	bd8e <alloc_chunk+0x84>

0000bda8 <sys_heap_free>:
	if (mem == NULL) {
    bda8:	b1c1      	cbz	r1, bddc <sys_heap_free+0x34>
{
    bdaa:	b510      	push	{r4, lr}
	struct z_heap *h = heap->heap;
    bdac:	6804      	ldr	r4, [r0, #0]
	chunkid_t c = mem_to_chunkid(h, mem);
    bdae:	4620      	mov	r0, r4
    bdb0:	f7ff fef3 	bl	bb9a <mem_to_chunkid>
    bdb4:	4601      	mov	r1, r0
	void *cmem = &buf[c];
    bdb6:	eb04 03c0 	add.w	r3, r4, r0, lsl #3
	return big_heap_chunks(h->end_chunk);
    bdba:	68a2      	ldr	r2, [r4, #8]
	if (big_heap(h)) {
    bdbc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    bdc0:	d307      	bcc.n	bdd2 <sys_heap_free+0x2a>
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
    bdc2:	685a      	ldr	r2, [r3, #4]
    bdc4:	f022 0201 	bic.w	r2, r2, #1
    bdc8:	605a      	str	r2, [r3, #4]
	free_chunk(h, c);
    bdca:	4620      	mov	r0, r4
    bdcc:	f7ff ff42 	bl	bc54 <free_chunk>
}
    bdd0:	bd10      	pop	{r4, pc}
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    bdd2:	885a      	ldrh	r2, [r3, #2]
    bdd4:	f022 0201 	bic.w	r2, r2, #1
    bdd8:	805a      	strh	r2, [r3, #2]
    bdda:	e7f6      	b.n	bdca <sys_heap_free+0x22>
    bddc:	4770      	bx	lr

0000bdde <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    bdde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct z_heap *h = heap->heap;
    bde0:	6805      	ldr	r5, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
    bde2:	2900      	cmp	r1, #0
    bde4:	d03c      	beq.n	be60 <sys_heap_alloc+0x82>
    bde6:	460b      	mov	r3, r1
{
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 */
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
    bde8:	68aa      	ldr	r2, [r5, #8]
    bdea:	ebb2 0fd1 	cmp.w	r2, r1, lsr #3
    bdee:	d939      	bls.n	be64 <sys_heap_alloc+0x86>
	return big_heap(h) ? 8 : 4;
    bdf0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    bdf4:	d320      	bcc.n	be38 <sys_heap_alloc+0x5a>
    bdf6:	2408      	movs	r4, #8
	return chunksz(chunk_header_bytes(h) + bytes);
    bdf8:	441c      	add	r4, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    bdfa:	3407      	adds	r4, #7
    bdfc:	08e4      	lsrs	r4, r4, #3
		return NULL;
	}

	chunksz_t chunk_sz = bytes_to_chunksz(h, bytes);
	chunkid_t c = alloc_chunk(h, chunk_sz);
    bdfe:	4621      	mov	r1, r4
    be00:	4628      	mov	r0, r5
    be02:	f7ff ff82 	bl	bd0a <alloc_chunk>
	if (c == 0U) {
    be06:	4607      	mov	r7, r0
    be08:	b370      	cbz	r0, be68 <sys_heap_alloc+0x8a>
	void *cmem = &buf[c];
    be0a:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	return big_heap_chunks(h->end_chunk);
    be0e:	68ab      	ldr	r3, [r5, #8]
	if (big_heap(h)) {
    be10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    be14:	d312      	bcc.n	be3c <sys_heap_alloc+0x5e>
		return ((uint32_t *)cmem)[f];
    be16:	6873      	ldr	r3, [r6, #4]
		return NULL;
	}

	/* Split off remainder if any */
	if (chunk_size(h, c) > chunk_sz) {
    be18:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
    be1c:	d310      	bcc.n	be40 <sys_heap_alloc+0x62>
	return big_heap_chunks(h->end_chunk);
    be1e:	68ab      	ldr	r3, [r5, #8]
	if (big_heap(h)) {
    be20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    be24:	d317      	bcc.n	be56 <sys_heap_alloc+0x78>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    be26:	6873      	ldr	r3, [r6, #4]
    be28:	f043 0301 	orr.w	r3, r3, #1
    be2c:	6073      	str	r3, [r6, #4]
		split_chunks(h, c, c + chunk_sz);
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
    be2e:	4639      	mov	r1, r7
    be30:	4628      	mov	r0, r5
    be32:	f7ff fdc0 	bl	b9b6 <chunk_mem>
}
    be36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return big_heap(h) ? 8 : 4;
    be38:	2404      	movs	r4, #4
    be3a:	e7dd      	b.n	bdf8 <sys_heap_alloc+0x1a>
		return ((uint16_t *)cmem)[f];
    be3c:	8873      	ldrh	r3, [r6, #2]
    be3e:	e7eb      	b.n	be18 <sys_heap_alloc+0x3a>
		split_chunks(h, c, c + chunk_sz);
    be40:	443c      	add	r4, r7
    be42:	4622      	mov	r2, r4
    be44:	4639      	mov	r1, r7
    be46:	4628      	mov	r0, r5
    be48:	f7ff fe3d 	bl	bac6 <split_chunks>
		free_list_add(h, c + chunk_sz);
    be4c:	4621      	mov	r1, r4
    be4e:	4628      	mov	r0, r5
    be50:	f7ff fed7 	bl	bc02 <free_list_add>
    be54:	e7e3      	b.n	be1e <sys_heap_alloc+0x40>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    be56:	8873      	ldrh	r3, [r6, #2]
    be58:	f043 0301 	orr.w	r3, r3, #1
    be5c:	8073      	strh	r3, [r6, #2]
    be5e:	e7e6      	b.n	be2e <sys_heap_alloc+0x50>
		return NULL;
    be60:	2000      	movs	r0, #0
    be62:	e7e8      	b.n	be36 <sys_heap_alloc+0x58>
    be64:	2000      	movs	r0, #0
    be66:	e7e6      	b.n	be36 <sys_heap_alloc+0x58>
		return NULL;
    be68:	2000      	movs	r0, #0
    be6a:	e7e4      	b.n	be36 <sys_heap_alloc+0x58>

0000be6c <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    be6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be70:	460d      	mov	r5, r1
    be72:	4614      	mov	r4, r2
	struct z_heap *h = heap->heap;
    be74:	6806      	ldr	r6, [r0, #0]
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
    be76:	424b      	negs	r3, r1
    be78:	ea03 0801 	and.w	r8, r3, r1
	if (align != rew) {
    be7c:	ea31 0303 	bics.w	r3, r1, r3
    be80:	d04e      	beq.n	bf20 <sys_heap_aligned_alloc+0xb4>
		align -= rew;
    be82:	eba1 0508 	sub.w	r5, r1, r8
	return big_heap_chunks(h->end_chunk);
    be86:	68b3      	ldr	r3, [r6, #8]
	return big_heap(h) ? 8 : 4;
    be88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    be8c:	d346      	bcc.n	bf1c <sys_heap_aligned_alloc+0xb0>
    be8e:	2308      	movs	r3, #8
		gap = MIN(rew, chunk_header_bytes(h));
    be90:	4598      	cmp	r8, r3
    be92:	d200      	bcs.n	be96 <sys_heap_aligned_alloc+0x2a>
    be94:	4643      	mov	r3, r8
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    be96:	2c00      	cmp	r4, #0
    be98:	d070      	beq.n	bf7c <sys_heap_aligned_alloc+0x110>
	return (bytes / CHUNK_UNIT) >= h->end_chunk;
    be9a:	68b2      	ldr	r2, [r6, #8]
    be9c:	ebb2 0fd4 	cmp.w	r2, r4, lsr #3
    bea0:	d96e      	bls.n	bf80 <sys_heap_aligned_alloc+0x114>
	/*
	 * Find a free block that is guaranteed to fit.
	 * We over-allocate to account for alignment and then free
	 * the extra allocations afterwards.
	 */
	chunksz_t padded_sz = bytes_to_chunksz(h, bytes + align - gap);
    bea2:	1929      	adds	r1, r5, r4
    bea4:	1ac9      	subs	r1, r1, r3
	return big_heap(h) ? 8 : 4;
    bea6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    beaa:	d34a      	bcc.n	bf42 <sys_heap_aligned_alloc+0xd6>
    beac:	2308      	movs	r3, #8
	return chunksz(chunk_header_bytes(h) + bytes);
    beae:	4419      	add	r1, r3
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    beb0:	3107      	adds	r1, #7
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    beb2:	08c9      	lsrs	r1, r1, #3
    beb4:	4630      	mov	r0, r6
    beb6:	f7ff ff28 	bl	bd0a <alloc_chunk>

	if (c0 == 0) {
    beba:	4607      	mov	r7, r0
    bebc:	2800      	cmp	r0, #0
    bebe:	d061      	beq.n	bf84 <sys_heap_aligned_alloc+0x118>
		return NULL;
	}
	uint8_t *mem = chunk_mem(h, c0);
    bec0:	4601      	mov	r1, r0
    bec2:	4630      	mov	r0, r6
    bec4:	f7ff fd77 	bl	b9b6 <chunk_mem>

	/* Align allocated memory */
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    bec8:	4440      	add	r0, r8
    beca:	4428      	add	r0, r5
    becc:	3801      	subs	r0, #1
    bece:	426d      	negs	r5, r5
    bed0:	4005      	ands	r5, r0
    bed2:	eba5 0508 	sub.w	r5, r5, r8
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    bed6:	442c      	add	r4, r5
    bed8:	3407      	adds	r4, #7
    beda:	f024 0407 	bic.w	r4, r4, #7

	/* Get corresponding chunks */
	chunkid_t c = mem_to_chunkid(h, mem);
    bede:	4629      	mov	r1, r5
    bee0:	4630      	mov	r0, r6
    bee2:	f7ff fe5a 	bl	bb9a <mem_to_chunkid>
    bee6:	4680      	mov	r8, r0
	chunkid_t c_end = end - chunk_buf(h);
    bee8:	1ba4      	subs	r4, r4, r6
    beea:	10e4      	asrs	r4, r4, #3
	CHECK(c >= c0 && c  < c_end && c_end <= c0 + padded_sz);

	/* Split and free unused prefix */
	if (c > c0) {
    beec:	4287      	cmp	r7, r0
    beee:	d32a      	bcc.n	bf46 <sys_heap_aligned_alloc+0xda>
	void *cmem = &buf[c];
    bef0:	eb06 07c8 	add.w	r7, r6, r8, lsl #3
	return big_heap_chunks(h->end_chunk);
    bef4:	68b3      	ldr	r3, [r6, #8]
	if (big_heap(h)) {
    bef6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    befa:	d32e      	bcc.n	bf5a <sys_heap_aligned_alloc+0xee>
		return ((uint32_t *)cmem)[f];
    befc:	687b      	ldr	r3, [r7, #4]
	return c + chunk_size(h, c);
    befe:	eb08 0353 	add.w	r3, r8, r3, lsr #1
		split_chunks(h, c0, c);
		free_list_add(h, c0);
	}

	/* Split and free unused suffix */
	if (right_chunk(h, c) > c_end) {
    bf02:	429c      	cmp	r4, r3
    bf04:	d32b      	bcc.n	bf5e <sys_heap_aligned_alloc+0xf2>
	return big_heap_chunks(h->end_chunk);
    bf06:	68b3      	ldr	r3, [r6, #8]
	if (big_heap(h)) {
    bf08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    bf0c:	d331      	bcc.n	bf72 <sys_heap_aligned_alloc+0x106>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    bf0e:	687b      	ldr	r3, [r7, #4]
    bf10:	f043 0301 	orr.w	r3, r3, #1
    bf14:	607b      	str	r3, [r7, #4]
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
    bf16:	4628      	mov	r0, r5
    bf18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return big_heap(h) ? 8 : 4;
    bf1c:	2304      	movs	r3, #4
    bf1e:	e7b7      	b.n	be90 <sys_heap_aligned_alloc+0x24>
	return big_heap_chunks(h->end_chunk);
    bf20:	68b3      	ldr	r3, [r6, #8]
	return big_heap(h) ? 8 : 4;
    bf22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    bf26:	d305      	bcc.n	bf34 <sys_heap_aligned_alloc+0xc8>
    bf28:	2308      	movs	r3, #8
		if (align <= chunk_header_bytes(h)) {
    bf2a:	429d      	cmp	r5, r3
    bf2c:	d904      	bls.n	bf38 <sys_heap_aligned_alloc+0xcc>
		rew = 0;
    bf2e:	f04f 0800 	mov.w	r8, #0
    bf32:	e7b0      	b.n	be96 <sys_heap_aligned_alloc+0x2a>
    bf34:	2304      	movs	r3, #4
    bf36:	e7f8      	b.n	bf2a <sys_heap_aligned_alloc+0xbe>
			return sys_heap_alloc(heap, bytes);
    bf38:	4621      	mov	r1, r4
    bf3a:	f7ff ff50 	bl	bdde <sys_heap_alloc>
    bf3e:	4605      	mov	r5, r0
    bf40:	e7e9      	b.n	bf16 <sys_heap_aligned_alloc+0xaa>
    bf42:	2304      	movs	r3, #4
    bf44:	e7b3      	b.n	beae <sys_heap_aligned_alloc+0x42>
		split_chunks(h, c0, c);
    bf46:	4602      	mov	r2, r0
    bf48:	4639      	mov	r1, r7
    bf4a:	4630      	mov	r0, r6
    bf4c:	f7ff fdbb 	bl	bac6 <split_chunks>
		free_list_add(h, c0);
    bf50:	4639      	mov	r1, r7
    bf52:	4630      	mov	r0, r6
    bf54:	f7ff fe55 	bl	bc02 <free_list_add>
    bf58:	e7ca      	b.n	bef0 <sys_heap_aligned_alloc+0x84>
		return ((uint16_t *)cmem)[f];
    bf5a:	887b      	ldrh	r3, [r7, #2]
    bf5c:	e7cf      	b.n	befe <sys_heap_aligned_alloc+0x92>
		split_chunks(h, c, c_end);
    bf5e:	4622      	mov	r2, r4
    bf60:	4641      	mov	r1, r8
    bf62:	4630      	mov	r0, r6
    bf64:	f7ff fdaf 	bl	bac6 <split_chunks>
		free_list_add(h, c_end);
    bf68:	4621      	mov	r1, r4
    bf6a:	4630      	mov	r0, r6
    bf6c:	f7ff fe49 	bl	bc02 <free_list_add>
    bf70:	e7c9      	b.n	bf06 <sys_heap_aligned_alloc+0x9a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    bf72:	887b      	ldrh	r3, [r7, #2]
    bf74:	f043 0301 	orr.w	r3, r3, #1
    bf78:	807b      	strh	r3, [r7, #2]
    bf7a:	e7cc      	b.n	bf16 <sys_heap_aligned_alloc+0xaa>
		return NULL;
    bf7c:	2500      	movs	r5, #0
    bf7e:	e7ca      	b.n	bf16 <sys_heap_aligned_alloc+0xaa>
    bf80:	2500      	movs	r5, #0
    bf82:	e7c8      	b.n	bf16 <sys_heap_aligned_alloc+0xaa>
		return NULL;
    bf84:	2500      	movs	r5, #0
    bf86:	e7c6      	b.n	bf16 <sys_heap_aligned_alloc+0xaa>

0000bf88 <sys_heap_init>:
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
    bf88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bf8a:	4603      	mov	r3, r0
	return big_heap_bytes(size) ? 8 : 4;
    bf8c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
    bf90:	d32a      	bcc.n	bfe8 <sys_heap_init+0x60>
    bf92:	2508      	movs	r5, #8
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    bf94:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    bf96:	1dc8      	adds	r0, r1, #7
    bf98:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    bf9c:	440d      	add	r5, r1
    bf9e:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    bfa2:	1a2d      	subs	r5, r5, r0
    bfa4:	08ef      	lsrs	r7, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
    bfa6:	4606      	mov	r6, r0
	heap->heap = h;
    bfa8:	6018      	str	r0, [r3, #0]
	h->end_chunk = heap_sz;
    bfaa:	6087      	str	r7, [r0, #8]
	h->avail_buckets = 0;
    bfac:	2300      	movs	r3, #0
    bfae:	60c3      	str	r3, [r0, #12]
	return big_heap(h) ? 8 : 4;
    bfb0:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    bfb4:	d31a      	bcc.n	bfec <sys_heap_init+0x64>
    bfb6:	2308      	movs	r3, #8
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    bfb8:	3308      	adds	r3, #8
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
    bfba:	eba7 03d3 	sub.w	r3, r7, r3, lsr #3
    bfbe:	3301      	adds	r3, #1
	return 31 - __builtin_clz(usable_sz);
    bfc0:	fab3 f383 	clz	r3, r3

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    bfc4:	f1c3 0c20 	rsb	ip, r3, #32
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    bfc8:	f1c3 0324 	rsb	r3, r3, #36	; 0x24
    bfcc:	009b      	lsls	r3, r3, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    bfce:	f103 0e07 	add.w	lr, r3, #7
    bfd2:	ea4f 01de 	mov.w	r1, lr, lsr #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    bfd6:	2300      	movs	r3, #0
    bfd8:	4563      	cmp	r3, ip
    bfda:	da09      	bge.n	bff0 <sys_heap_init+0x68>
		h->buckets[i].next = 0;
    bfdc:	1d1a      	adds	r2, r3, #4
    bfde:	2400      	movs	r4, #0
    bfe0:	f846 4022 	str.w	r4, [r6, r2, lsl #2]
	for (int i = 0; i < nb_buckets; i++) {
    bfe4:	3301      	adds	r3, #1
    bfe6:	e7f7      	b.n	bfd8 <sys_heap_init+0x50>
	return big_heap_bytes(size) ? 8 : 4;
    bfe8:	2504      	movs	r5, #4
    bfea:	e7d3      	b.n	bf94 <sys_heap_init+0xc>
	return big_heap(h) ? 8 : 4;
    bfec:	2304      	movs	r3, #4
    bfee:	e7e3      	b.n	bfb8 <sys_heap_init+0x30>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    bff0:	004b      	lsls	r3, r1, #1
	if (big_heap(h)) {
    bff2:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    bff6:	d333      	bcc.n	c060 <sys_heap_init+0xd8>
		((uint32_t *)cmem)[f] = val;
    bff8:	6043      	str	r3, [r0, #4]
	if (big_heap(h)) {
    bffa:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    bffe:	d331      	bcc.n	c064 <sys_heap_init+0xdc>
		((uint32_t *)cmem)[f] = val;
    c000:	2300      	movs	r3, #0
    c002:	6003      	str	r3, [r0, #0]
	if (big_heap(h)) {
    c004:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    c008:	d32f      	bcc.n	c06a <sys_heap_init+0xe2>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    c00a:	6843      	ldr	r3, [r0, #4]
    c00c:	f043 0301 	orr.w	r3, r3, #1
    c010:	6043      	str	r3, [r0, #4]
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    c012:	1a7a      	subs	r2, r7, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    c014:	0056      	lsls	r6, r2, #1
	void *cmem = &buf[c];
    c016:	f02e 0307 	bic.w	r3, lr, #7
    c01a:	18c4      	adds	r4, r0, r3
	if (big_heap(h)) {
    c01c:	f5b7 4f00 	cmp.w	r7, #32768	; 0x8000
    c020:	d328      	bcc.n	c074 <sys_heap_init+0xec>
		((uint32_t *)cmem)[f] = val;
    c022:	6066      	str	r6, [r4, #4]
	return big_heap_chunks(h->end_chunk);
    c024:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    c026:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    c02a:	d325      	bcc.n	c078 <sys_heap_init+0xf0>
		((uint32_t *)cmem)[f] = val;
    c02c:	50c1      	str	r1, [r0, r3]
	void *cmem = &buf[c];
    c02e:	f025 0307 	bic.w	r3, r5, #7
    c032:	4405      	add	r5, r0
	return big_heap_chunks(h->end_chunk);
    c034:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    c036:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    c03a:	d31f      	bcc.n	c07c <sys_heap_init+0xf4>
		((uint32_t *)cmem)[f] = val;
    c03c:	2400      	movs	r4, #0
    c03e:	606c      	str	r4, [r5, #4]
	return big_heap_chunks(h->end_chunk);
    c040:	6884      	ldr	r4, [r0, #8]
	if (big_heap(h)) {
    c042:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    c046:	d31c      	bcc.n	c082 <sys_heap_init+0xfa>
		((uint32_t *)cmem)[f] = val;
    c048:	50c2      	str	r2, [r0, r3]
	return big_heap_chunks(h->end_chunk);
    c04a:	6883      	ldr	r3, [r0, #8]
	if (big_heap(h)) {
    c04c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    c050:	d319      	bcc.n	c086 <sys_heap_init+0xfe>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
    c052:	686b      	ldr	r3, [r5, #4]
    c054:	f043 0301 	orr.w	r3, r3, #1
    c058:	606b      	str	r3, [r5, #4]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
    c05a:	f7ff fdd2 	bl	bc02 <free_list_add>
}
    c05e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		((uint16_t *)cmem)[f] = val;
    c060:	8043      	strh	r3, [r0, #2]
    c062:	e7ca      	b.n	bffa <sys_heap_init+0x72>
    c064:	2300      	movs	r3, #0
    c066:	8003      	strh	r3, [r0, #0]
    c068:	e7cc      	b.n	c004 <sys_heap_init+0x7c>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    c06a:	8843      	ldrh	r3, [r0, #2]
    c06c:	f043 0301 	orr.w	r3, r3, #1
    c070:	8043      	strh	r3, [r0, #2]
    c072:	e7ce      	b.n	c012 <sys_heap_init+0x8a>
		((uint16_t *)cmem)[f] = val;
    c074:	8066      	strh	r6, [r4, #2]
    c076:	e7d5      	b.n	c024 <sys_heap_init+0x9c>
    c078:	52c1      	strh	r1, [r0, r3]
    c07a:	e7d8      	b.n	c02e <sys_heap_init+0xa6>
    c07c:	2400      	movs	r4, #0
    c07e:	806c      	strh	r4, [r5, #2]
    c080:	e7de      	b.n	c040 <sys_heap_init+0xb8>
    c082:	52c2      	strh	r2, [r0, r3]
    c084:	e7e1      	b.n	c04a <sys_heap_init+0xc2>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    c086:	886b      	ldrh	r3, [r5, #2]
    c088:	f043 0301 	orr.w	r3, r3, #1
    c08c:	806b      	strh	r3, [r5, #2]
    c08e:	e7e4      	b.n	c05a <sys_heap_init+0xd2>

0000c090 <extract_decimal>:
{
    c090:	b410      	push	{r4}
    c092:	4604      	mov	r4, r0
	const char *sp = *str;
    c094:	6802      	ldr	r2, [r0, #0]
	size_t val = 0;
    c096:	2000      	movs	r0, #0
	while (isdigit((int)(unsigned char)*sp)) {
    c098:	7813      	ldrb	r3, [r2, #0]
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    c09a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
    c09e:	2909      	cmp	r1, #9
    c0a0:	d806      	bhi.n	c0b0 <extract_decimal+0x20>
		val = 10U * val + *sp++ - '0';
    c0a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    c0a6:	3201      	adds	r2, #1
    c0a8:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    c0ac:	3830      	subs	r0, #48	; 0x30
    c0ae:	e7f3      	b.n	c098 <extract_decimal+0x8>
	*str = sp;
    c0b0:	6022      	str	r2, [r4, #0]
}
    c0b2:	bc10      	pop	{r4}
    c0b4:	4770      	bx	lr

0000c0b6 <encode_uint>:
{
    c0b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c0ba:	b083      	sub	sp, #12
    c0bc:	4604      	mov	r4, r0
    c0be:	460d      	mov	r5, r1
    c0c0:	9201      	str	r2, [sp, #4]
    c0c2:	469a      	mov	sl, r3
    c0c4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	bool upcase = isupper((int)conv->specifier);
    c0c8:	78d3      	ldrb	r3, [r2, #3]
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    c0ca:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    c0ce:	2b6f      	cmp	r3, #111	; 0x6f
    c0d0:	d00f      	beq.n	c0f2 <encode_uint+0x3c>
    c0d2:	d906      	bls.n	c0e2 <encode_uint+0x2c>
    c0d4:	2b70      	cmp	r3, #112	; 0x70
    c0d6:	d00f      	beq.n	c0f8 <encode_uint+0x42>
    c0d8:	2b78      	cmp	r3, #120	; 0x78
    c0da:	d110      	bne.n	c0fe <encode_uint+0x48>
		return 16;
    c0dc:	f04f 0910 	mov.w	r9, #16
    c0e0:	e026      	b.n	c130 <encode_uint+0x7a>
	switch (specifier) {
    c0e2:	2b58      	cmp	r3, #88	; 0x58
    c0e4:	d002      	beq.n	c0ec <encode_uint+0x36>
    c0e6:	f04f 090a 	mov.w	r9, #10
    c0ea:	e021      	b.n	c130 <encode_uint+0x7a>
		return 16;
    c0ec:	f04f 0910 	mov.w	r9, #16
    c0f0:	e01e      	b.n	c130 <encode_uint+0x7a>
		return 8;
    c0f2:	f04f 0908 	mov.w	r9, #8
    c0f6:	e01b      	b.n	c130 <encode_uint+0x7a>
		return 16;
    c0f8:	f04f 0910 	mov.w	r9, #16
    c0fc:	e018      	b.n	c130 <encode_uint+0x7a>
	switch (specifier) {
    c0fe:	f04f 090a 	mov.w	r9, #10
	char *bp = bps + (bpe - bps);
    c102:	e015      	b.n	c130 <encode_uint+0x7a>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c104:	f1bb 0f19 	cmp.w	fp, #25
    c108:	d820      	bhi.n	c14c <encode_uint+0x96>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    c10a:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c10c:	3237      	adds	r2, #55	; 0x37
    c10e:	b2d2      	uxtb	r2, r2
    c110:	f808 2d01 	strb.w	r2, [r8, #-1]!
		value /= radix;
    c114:	4632      	mov	r2, r6
    c116:	463b      	mov	r3, r7
    c118:	4620      	mov	r0, r4
    c11a:	4629      	mov	r1, r5
    c11c:	f7f3 fff0 	bl	100 <__aeabi_uldivmod>
	} while ((value != 0) && (bps < bp));
    c120:	42bd      	cmp	r5, r7
    c122:	bf08      	it	eq
    c124:	42b4      	cmpeq	r4, r6
    c126:	d315      	bcc.n	c154 <encode_uint+0x9e>
    c128:	45d0      	cmp	r8, sl
    c12a:	d913      	bls.n	c154 <encode_uint+0x9e>
		value /= radix;
    c12c:	4604      	mov	r4, r0
    c12e:	460d      	mov	r5, r1
		unsigned int lsv = (unsigned int)(value % radix);
    c130:	464e      	mov	r6, r9
    c132:	2700      	movs	r7, #0
    c134:	464a      	mov	r2, r9
    c136:	463b      	mov	r3, r7
    c138:	4620      	mov	r0, r4
    c13a:	4629      	mov	r1, r5
    c13c:	f7f3 ffe0 	bl	100 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c140:	2a09      	cmp	r2, #9
    c142:	d8df      	bhi.n	c104 <encode_uint+0x4e>
    c144:	b2d2      	uxtb	r2, r2
    c146:	3230      	adds	r2, #48	; 0x30
    c148:	b2d2      	uxtb	r2, r2
    c14a:	e7e1      	b.n	c110 <encode_uint+0x5a>
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
    c14c:	b2d2      	uxtb	r2, r2
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c14e:	3257      	adds	r2, #87	; 0x57
    c150:	b2d2      	uxtb	r2, r2
    c152:	e7dd      	b.n	c110 <encode_uint+0x5a>
	if (conv->flag_hash) {
    c154:	9b01      	ldr	r3, [sp, #4]
    c156:	781b      	ldrb	r3, [r3, #0]
    c158:	f013 0f20 	tst.w	r3, #32
    c15c:	d005      	beq.n	c16a <encode_uint+0xb4>
		if (radix == 8) {
    c15e:	f1b9 0f08 	cmp.w	r9, #8
    c162:	d006      	beq.n	c172 <encode_uint+0xbc>
		} else if (radix == 16) {
    c164:	f1b9 0f10 	cmp.w	r9, #16
    c168:	d009      	beq.n	c17e <encode_uint+0xc8>
}
    c16a:	4640      	mov	r0, r8
    c16c:	b003      	add	sp, #12
    c16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conv->altform_0 = true;
    c172:	9a01      	ldr	r2, [sp, #4]
    c174:	7893      	ldrb	r3, [r2, #2]
    c176:	f043 0308 	orr.w	r3, r3, #8
    c17a:	7093      	strb	r3, [r2, #2]
    c17c:	e7f5      	b.n	c16a <encode_uint+0xb4>
			conv->altform_0c = true;
    c17e:	9a01      	ldr	r2, [sp, #4]
    c180:	7893      	ldrb	r3, [r2, #2]
    c182:	f043 0310 	orr.w	r3, r3, #16
    c186:	7093      	strb	r3, [r2, #2]
    c188:	e7ef      	b.n	c16a <encode_uint+0xb4>

0000c18a <outs>:
{
    c18a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c18e:	4607      	mov	r7, r0
    c190:	460e      	mov	r6, r1
    c192:	4614      	mov	r4, r2
    c194:	4698      	mov	r8, r3
	size_t count = 0;
    c196:	2500      	movs	r5, #0
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    c198:	e006      	b.n	c1a8 <outs+0x1e>
		int rc = out((int)*sp++, ctx);
    c19a:	4631      	mov	r1, r6
    c19c:	f814 0b01 	ldrb.w	r0, [r4], #1
    c1a0:	47b8      	blx	r7
		if (rc < 0) {
    c1a2:	2800      	cmp	r0, #0
    c1a4:	db09      	blt.n	c1ba <outs+0x30>
		++count;
    c1a6:	3501      	adds	r5, #1
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    c1a8:	4544      	cmp	r4, r8
    c1aa:	d3f6      	bcc.n	c19a <outs+0x10>
    c1ac:	f1b8 0f00 	cmp.w	r8, #0
    c1b0:	d102      	bne.n	c1b8 <outs+0x2e>
    c1b2:	7823      	ldrb	r3, [r4, #0]
    c1b4:	2b00      	cmp	r3, #0
    c1b6:	d1f0      	bne.n	c19a <outs+0x10>
	return (int)count;
    c1b8:	4628      	mov	r0, r5
}
    c1ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c1be <get_rewind_value>:
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
}

static uint32_t get_rewind_value(uint32_t buf_size, uint32_t threshold)
{
	return buf_size * (threshold / buf_size);
    c1be:	fbb1 f1f0 	udiv	r1, r1, r0
}
    c1c2:	fb00 f001 	mul.w	r0, r0, r1
    c1c6:	4770      	bx	lr

0000c1c8 <mod>:
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
    c1c8:	6983      	ldr	r3, [r0, #24]
    c1ca:	b113      	cbz	r3, c1d2 <mod+0xa>
    c1cc:	ea03 0001 	and.w	r0, r3, r1
    c1d0:	4770      	bx	lr
    c1d2:	6900      	ldr	r0, [r0, #16]
    c1d4:	fbb1 f3f0 	udiv	r3, r1, r0
    c1d8:	fb00 1013 	mls	r0, r0, r3, r1
}
    c1dc:	4770      	bx	lr

0000c1de <ring_buf_get_rewind_threshold>:
}
    c1de:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
    c1e2:	4770      	bx	lr

0000c1e4 <ring_buf_is_empty>:

int ring_buf_is_empty(struct ring_buf *buf)
{
    c1e4:	b570      	push	{r4, r5, r6, lr}
	uint32_t tail = buf->tail;
    c1e6:	6844      	ldr	r4, [r0, #4]
	uint32_t head = buf->head;
    c1e8:	6805      	ldr	r5, [r0, #0]

	if (tail < head) {
    c1ea:	42ac      	cmp	r4, r5
    c1ec:	d304      	bcc.n	c1f8 <ring_buf_is_empty+0x14>
		tail += get_rewind_value(buf->size,
					 ring_buf_get_rewind_threshold());
	}

	return (head == tail);
}
    c1ee:	42ac      	cmp	r4, r5
    c1f0:	bf14      	ite	ne
    c1f2:	2000      	movne	r0, #0
    c1f4:	2001      	moveq	r0, #1
    c1f6:	bd70      	pop	{r4, r5, r6, pc}
		tail += get_rewind_value(buf->size,
    c1f8:	6906      	ldr	r6, [r0, #16]
    c1fa:	f7ff fff0 	bl	c1de <ring_buf_get_rewind_threshold>
    c1fe:	4601      	mov	r1, r0
    c200:	4630      	mov	r0, r6
    c202:	f7ff ffdc 	bl	c1be <get_rewind_value>
    c206:	4404      	add	r4, r0
    c208:	e7f1      	b.n	c1ee <ring_buf_is_empty+0xa>

0000c20a <ring_buf_size_get>:

uint32_t ring_buf_size_get(struct ring_buf *buf)
{
    c20a:	b570      	push	{r4, r5, r6, lr}
	uint32_t tail = buf->tail;
    c20c:	6844      	ldr	r4, [r0, #4]
	uint32_t head = buf->head;
    c20e:	6805      	ldr	r5, [r0, #0]

	if (tail < head) {
    c210:	42ac      	cmp	r4, r5
    c212:	d301      	bcc.n	c218 <ring_buf_size_get+0xe>
		tail += get_rewind_value(buf->size,
					 ring_buf_get_rewind_threshold());
	}

	return tail - head;
}
    c214:	1b60      	subs	r0, r4, r5
    c216:	bd70      	pop	{r4, r5, r6, pc}
		tail += get_rewind_value(buf->size,
    c218:	6906      	ldr	r6, [r0, #16]
    c21a:	f7ff ffe0 	bl	c1de <ring_buf_get_rewind_threshold>
    c21e:	4601      	mov	r1, r0
    c220:	4630      	mov	r0, r6
    c222:	f7ff ffcc 	bl	c1be <get_rewind_value>
    c226:	4404      	add	r4, r0
    c228:	e7f4      	b.n	c214 <ring_buf_size_get+0xa>

0000c22a <ring_buf_space_get>:

uint32_t ring_buf_space_get(struct ring_buf *buf)
{
    c22a:	b510      	push	{r4, lr}
	return buf->size - ring_buf_size_get(buf);
    c22c:	6904      	ldr	r4, [r0, #16]
    c22e:	f7ff ffec 	bl	c20a <ring_buf_size_get>
}
    c232:	1a20      	subs	r0, r4, r0
    c234:	bd10      	pop	{r4, pc}

0000c236 <ring_buf_put_claim>:
{
	return val >= max ? (val - max) : val;
}

uint32_t ring_buf_put_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    c236:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c23a:	4604      	mov	r4, r0
    c23c:	460e      	mov	r6, r1
    c23e:	4617      	mov	r7, r2
	uint32_t space, trail_size, allocated, tmp_trail_mod;

	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
    c240:	f8d0 8008 	ldr.w	r8, [r0, #8]
    c244:	4641      	mov	r1, r8
    c246:	f7ff ffbf 	bl	c1c8 <mod>
    c24a:	4601      	mov	r1, r0
	space = (buf->head + buf->size) - buf->misc.byte_mode.tmp_tail;
    c24c:	6825      	ldr	r5, [r4, #0]
    c24e:	6920      	ldr	r0, [r4, #16]
    c250:	4405      	add	r5, r0
    c252:	eba5 0208 	sub.w	r2, r5, r8
	trail_size = buf->size - tmp_trail_mod;
    c256:	1a40      	subs	r0, r0, r1

	/* Limit requested size to available size. */
	size = MIN(size, space);
    c258:	42ba      	cmp	r2, r7
    c25a:	bf28      	it	cs
    c25c:	463a      	movcs	r2, r7

	trail_size = buf->size - (tmp_trail_mod);

	/* Limit allocated size to trail size. */
	allocated = MIN(trail_size, size);
    c25e:	4290      	cmp	r0, r2
    c260:	bf28      	it	cs
    c262:	4610      	movcs	r0, r2
	*data = &buf->buf.buf8[tmp_trail_mod];
    c264:	6963      	ldr	r3, [r4, #20]
    c266:	4419      	add	r1, r3
    c268:	6031      	str	r1, [r6, #0]

	buf->misc.byte_mode.tmp_tail =
		buf->misc.byte_mode.tmp_tail + allocated;
    c26a:	68a3      	ldr	r3, [r4, #8]
    c26c:	4403      	add	r3, r0
	buf->misc.byte_mode.tmp_tail =
    c26e:	60a3      	str	r3, [r4, #8]

	return allocated;
}
    c270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c274 <ring_buf_put_finish>:

int ring_buf_put_finish(struct ring_buf *buf, uint32_t size)
{
    c274:	b570      	push	{r4, r5, r6, lr}
    c276:	4604      	mov	r4, r0
    c278:	460d      	mov	r5, r1
	uint32_t rew;
	uint32_t threshold = ring_buf_get_rewind_threshold();
    c27a:	f7ff ffb0 	bl	c1de <ring_buf_get_rewind_threshold>
    c27e:	4601      	mov	r1, r0

	if ((buf->tail + size) > (buf->head + buf->size)) {
    c280:	6866      	ldr	r6, [r4, #4]
    c282:	1972      	adds	r2, r6, r5
    c284:	6823      	ldr	r3, [r4, #0]
    c286:	6920      	ldr	r0, [r4, #16]
    c288:	4403      	add	r3, r0
    c28a:	429a      	cmp	r2, r3
    c28c:	d80b      	bhi.n	c2a6 <ring_buf_put_finish+0x32>
		return -EINVAL;
	}

	/* Check if indexes shall be rewind. */
	if (buf->tail > threshold) {
    c28e:	428e      	cmp	r6, r1
    c290:	d907      	bls.n	c2a2 <ring_buf_put_finish+0x2e>
		rew = get_rewind_value(buf->size, threshold);
    c292:	f7ff ff94 	bl	c1be <get_rewind_value>
	} else {
		rew = 0;
	}

	buf->tail += (size - rew);
    c296:	1a2d      	subs	r5, r5, r0
    c298:	442e      	add	r6, r5
    c29a:	6066      	str	r6, [r4, #4]
	buf->misc.byte_mode.tmp_tail = buf->tail;
    c29c:	60a6      	str	r6, [r4, #8]

	return 0;
    c29e:	2000      	movs	r0, #0
}
    c2a0:	bd70      	pop	{r4, r5, r6, pc}
		rew = 0;
    c2a2:	2000      	movs	r0, #0
    c2a4:	e7f7      	b.n	c296 <ring_buf_put_finish+0x22>
		return -EINVAL;
    c2a6:	f06f 0015 	mvn.w	r0, #21
    c2aa:	e7f9      	b.n	c2a0 <ring_buf_put_finish+0x2c>

0000c2ac <ring_buf_put>:

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
    c2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c2b0:	b082      	sub	sp, #8
    c2b2:	4680      	mov	r8, r0
    c2b4:	460e      	mov	r6, r1
    c2b6:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    c2b8:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
    c2ba:	462a      	mov	r2, r5
    c2bc:	a901      	add	r1, sp, #4
    c2be:	4640      	mov	r0, r8
    c2c0:	f7ff ffb9 	bl	c236 <ring_buf_put_claim>
    c2c4:	4604      	mov	r4, r0
		memcpy(dst, data, partial_size);
    c2c6:	4602      	mov	r2, r0
    c2c8:	4631      	mov	r1, r6
    c2ca:	9801      	ldr	r0, [sp, #4]
    c2cc:	f000 fedb 	bl	d086 <memcpy>
		total_size += partial_size;
    c2d0:	4427      	add	r7, r4
		size -= partial_size;
		data += partial_size;
    c2d2:	4426      	add	r6, r4
	} while (size && partial_size);
    c2d4:	1b2d      	subs	r5, r5, r4
    c2d6:	d001      	beq.n	c2dc <ring_buf_put+0x30>
    c2d8:	2c00      	cmp	r4, #0
    c2da:	d1ee      	bne.n	c2ba <ring_buf_put+0xe>

	err = ring_buf_put_finish(buf, total_size);
    c2dc:	4639      	mov	r1, r7
    c2de:	4640      	mov	r0, r8
    c2e0:	f7ff ffc8 	bl	c274 <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
    c2e4:	4638      	mov	r0, r7
    c2e6:	b002      	add	sp, #8
    c2e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c2ec <ring_buf_get_claim>:

uint32_t ring_buf_get_claim(struct ring_buf *buf, uint8_t **data, uint32_t size)
{
    c2ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c2f0:	4604      	mov	r4, r0
    c2f2:	460e      	mov	r6, r1
    c2f4:	4617      	mov	r7, r2
	uint32_t space, granted_size, trail_size, tmp_head_mod;
	uint32_t tail = buf->tail;
    c2f6:	6845      	ldr	r5, [r0, #4]

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
    c2f8:	68c3      	ldr	r3, [r0, #12]
    c2fa:	42ab      	cmp	r3, r5
    c2fc:	d818      	bhi.n	c330 <ring_buf_get_claim+0x44>
		/* Locally, increment it to pre-rewind value */
		tail += get_rewind_value(buf->size,
					 ring_buf_get_rewind_threshold());
	}

	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
    c2fe:	f8d4 800c 	ldr.w	r8, [r4, #12]
    c302:	4641      	mov	r1, r8
    c304:	4620      	mov	r0, r4
    c306:	f7ff ff5f 	bl	c1c8 <mod>
    c30a:	4601      	mov	r1, r0
	space = tail - buf->misc.byte_mode.tmp_head;
    c30c:	eba5 0508 	sub.w	r5, r5, r8
	trail_size = buf->size - tmp_head_mod;
    c310:	6923      	ldr	r3, [r4, #16]
    c312:	1a18      	subs	r0, r3, r0

	/* Limit requested size to available size. */
	granted_size = MIN(size, space);
    c314:	42bd      	cmp	r5, r7
    c316:	bf28      	it	cs
    c318:	463d      	movcs	r5, r7

	/* Limit allocated size to trail size. */
	granted_size = MIN(trail_size, granted_size);
    c31a:	42a8      	cmp	r0, r5
    c31c:	bf28      	it	cs
    c31e:	4628      	movcs	r0, r5

	*data = &buf->buf.buf8[tmp_head_mod];
    c320:	6963      	ldr	r3, [r4, #20]
    c322:	4419      	add	r1, r3
    c324:	6031      	str	r1, [r6, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
    c326:	68e3      	ldr	r3, [r4, #12]
    c328:	4403      	add	r3, r0
    c32a:	60e3      	str	r3, [r4, #12]

	return granted_size;
}
    c32c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tail += get_rewind_value(buf->size,
    c330:	f8d0 8010 	ldr.w	r8, [r0, #16]
    c334:	f7ff ff53 	bl	c1de <ring_buf_get_rewind_threshold>
    c338:	4601      	mov	r1, r0
    c33a:	4640      	mov	r0, r8
    c33c:	f7ff ff3f 	bl	c1be <get_rewind_value>
    c340:	4405      	add	r5, r0
    c342:	e7dc      	b.n	c2fe <ring_buf_get_claim+0x12>

0000c344 <ring_buf_get_finish>:

int ring_buf_get_finish(struct ring_buf *buf, uint32_t size)
{
    c344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c346:	4604      	mov	r4, r0
    c348:	460d      	mov	r5, r1
	uint32_t tail = buf->tail;
    c34a:	6846      	ldr	r6, [r0, #4]
	uint32_t rew;

	/* Tail is always ahead, if it is not, it's only because it got rewinded. */
	if (tail < buf->misc.byte_mode.tmp_head) {
    c34c:	68c3      	ldr	r3, [r0, #12]
    c34e:	42b3      	cmp	r3, r6
    c350:	d80a      	bhi.n	c368 <ring_buf_get_finish+0x24>
		/* tail was rewinded. Locally, increment it to pre-rewind value */
		rew = get_rewind_value(buf->size,
				       ring_buf_get_rewind_threshold());
		tail += rew;
	} else {
		rew = 0;
    c352:	2000      	movs	r0, #0
	}

	if ((buf->head + size) > tail) {
    c354:	6823      	ldr	r3, [r4, #0]
    c356:	195a      	adds	r2, r3, r5
    c358:	42b2      	cmp	r2, r6
    c35a:	d80e      	bhi.n	c37a <ring_buf_get_finish+0x36>
		return -EINVAL;
	}

	/* Include potential rewinding. */
	buf->head += (size - rew);
    c35c:	1a2d      	subs	r5, r5, r0
    c35e:	442b      	add	r3, r5
    c360:	6023      	str	r3, [r4, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
    c362:	60e3      	str	r3, [r4, #12]

	return 0;
    c364:	2000      	movs	r0, #0
}
    c366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rew = get_rewind_value(buf->size,
    c368:	6907      	ldr	r7, [r0, #16]
    c36a:	f7ff ff38 	bl	c1de <ring_buf_get_rewind_threshold>
    c36e:	4601      	mov	r1, r0
    c370:	4638      	mov	r0, r7
    c372:	f7ff ff24 	bl	c1be <get_rewind_value>
		tail += rew;
    c376:	4406      	add	r6, r0
    c378:	e7ec      	b.n	c354 <ring_buf_get_finish+0x10>
		return -EINVAL;
    c37a:	f06f 0015 	mvn.w	r0, #21
    c37e:	e7f2      	b.n	c366 <ring_buf_get_finish+0x22>

0000c380 <ring_buf_get>:

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
    c380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c384:	b082      	sub	sp, #8
    c386:	4680      	mov	r8, r0
    c388:	460e      	mov	r6, r1
    c38a:	4615      	mov	r5, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
    c38c:	2700      	movs	r7, #0
    c38e:	e009      	b.n	c3a4 <ring_buf_get+0x24>
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
		if (data) {
			memcpy(data, src, partial_size);
    c390:	4602      	mov	r2, r0
    c392:	9901      	ldr	r1, [sp, #4]
    c394:	4630      	mov	r0, r6
    c396:	f000 fe76 	bl	d086 <memcpy>
			data += partial_size;
    c39a:	4426      	add	r6, r4
		}
		total_size += partial_size;
    c39c:	4427      	add	r7, r4
		size -= partial_size;
	} while (size && partial_size);
    c39e:	1b2d      	subs	r5, r5, r4
    c3a0:	d009      	beq.n	c3b6 <ring_buf_get+0x36>
    c3a2:	b144      	cbz	r4, c3b6 <ring_buf_get+0x36>
		partial_size = ring_buf_get_claim(buf, &src, size);
    c3a4:	462a      	mov	r2, r5
    c3a6:	a901      	add	r1, sp, #4
    c3a8:	4640      	mov	r0, r8
    c3aa:	f7ff ff9f 	bl	c2ec <ring_buf_get_claim>
    c3ae:	4604      	mov	r4, r0
		if (data) {
    c3b0:	2e00      	cmp	r6, #0
    c3b2:	d1ed      	bne.n	c390 <ring_buf_get+0x10>
    c3b4:	e7f2      	b.n	c39c <ring_buf_get+0x1c>

	err = ring_buf_get_finish(buf, total_size);
    c3b6:	4639      	mov	r1, r7
    c3b8:	4640      	mov	r0, r8
    c3ba:	f7ff ffc3 	bl	c344 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);

	return total_size;
}
    c3be:	4638      	mov	r0, r7
    c3c0:	b002      	add	sp, #8
    c3c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c3c6 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    c3c6:	4770      	bx	lr

0000c3c8 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
    c3c8:	2300      	movs	r3, #0
    c3ca:	6043      	str	r3, [r0, #4]
	list->head = NULL;
    c3cc:	6003      	str	r3, [r0, #0]
}
    c3ce:	4770      	bx	lr

0000c3d0 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
    c3d0:	6803      	ldr	r3, [r0, #0]
    c3d2:	b12b      	cbz	r3, c3e0 <log_list_add_tail+0x10>
		list->head = msg;
	} else {
		list->tail->next = msg;
    c3d4:	6843      	ldr	r3, [r0, #4]
    c3d6:	6019      	str	r1, [r3, #0]
	}

	list->tail = msg;
    c3d8:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
    c3da:	2300      	movs	r3, #0
    c3dc:	600b      	str	r3, [r1, #0]
}
    c3de:	4770      	bx	lr
		list->head = msg;
    c3e0:	6001      	str	r1, [r0, #0]
    c3e2:	e7f9      	b.n	c3d8 <log_list_add_tail+0x8>

0000c3e4 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
    c3e4:	6800      	ldr	r0, [r0, #0]
    c3e6:	4770      	bx	lr

0000c3e8 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
    c3e8:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
    c3ea:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
    c3ec:	b108      	cbz	r0, c3f2 <log_list_head_get+0xa>
		list->head = list->head->next;
    c3ee:	6802      	ldr	r2, [r0, #0]
    c3f0:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
    c3f2:	4770      	bx	lr

0000c3f4 <dummy_timestamp>:
}
    c3f4:	2000      	movs	r0, #0
    c3f6:	4770      	bx	lr

0000c3f8 <msg_filter_check>:
}
    c3f8:	2001      	movs	r0, #1
    c3fa:	4770      	bx	lr

0000c3fc <default_get_timestamp>:
{
    c3fc:	b508      	push	{r3, lr}
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    c3fe:	f001 fb49 	bl	da94 <sys_clock_cycle_get_32>
}
    c402:	bd08      	pop	{r3, pc}

0000c404 <z_log_get_s_mask>:
{
    c404:	b470      	push	{r4, r5, r6}
    c406:	4603      	mov	r3, r0
	uint32_t mask = 0U;
    c408:	2000      	movs	r0, #0
	uint32_t arg = 0U;
    c40a:	4605      	mov	r5, r0
	bool arm = false;
    c40c:	4604      	mov	r4, r0
	while ((curr = *str++) && arg < nargs) {
    c40e:	e001      	b.n	c414 <z_log_get_s_mask+0x10>
			arm = !arm;
    c410:	f084 0401 	eor.w	r4, r4, #1
	while ((curr = *str++) && arg < nargs) {
    c414:	f813 2b01 	ldrb.w	r2, [r3], #1
    c418:	b19a      	cbz	r2, c442 <z_log_get_s_mask+0x3e>
    c41a:	428d      	cmp	r5, r1
    c41c:	d211      	bcs.n	c442 <z_log_get_s_mask+0x3e>
		if (curr == '%') {
    c41e:	2a25      	cmp	r2, #37	; 0x25
    c420:	d0f6      	beq.n	c410 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
    c422:	2c00      	cmp	r4, #0
    c424:	d0f6      	beq.n	c414 <z_log_get_s_mask+0x10>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
    c426:	f042 0620 	orr.w	r6, r2, #32
    c42a:	3e61      	subs	r6, #97	; 0x61
    c42c:	2e19      	cmp	r6, #25
    c42e:	d8f1      	bhi.n	c414 <z_log_get_s_mask+0x10>
			if (curr == 's') {
    c430:	2a73      	cmp	r2, #115	; 0x73
    c432:	d002      	beq.n	c43a <z_log_get_s_mask+0x36>
			arg++;
    c434:	3501      	adds	r5, #1
			arm = false;
    c436:	2400      	movs	r4, #0
    c438:	e7ec      	b.n	c414 <z_log_get_s_mask+0x10>
				mask |= BIT(arg);
    c43a:	2201      	movs	r2, #1
    c43c:	40aa      	lsls	r2, r5
    c43e:	4310      	orrs	r0, r2
    c440:	e7f8      	b.n	c434 <z_log_get_s_mask+0x30>
}
    c442:	bc70      	pop	{r4, r5, r6}
    c444:	4770      	bx	lr

0000c446 <block_on_alloc>:
}
    c446:	2000      	movs	r0, #0
    c448:	4770      	bx	lr

0000c44a <cont_arg_get>:

static log_arg_t cont_arg_get(struct log_msg *msg, uint32_t arg_idx)
{
	struct log_msg_cont *cont;

	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
    c44a:	2901      	cmp	r1, #1
    c44c:	d906      	bls.n	c45c <cont_arg_get+0x12>
		return msg->payload.ext.data.args[arg_idx];
	}


	cont = msg->payload.ext.next;
    c44e:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
    c450:	3902      	subs	r1, #2

	while (arg_idx >= ARGS_CONT_MSG) {
    c452:	2906      	cmp	r1, #6
    c454:	d907      	bls.n	c466 <cont_arg_get+0x1c>
		arg_idx -= ARGS_CONT_MSG;
    c456:	3907      	subs	r1, #7
		cont = cont->next;
    c458:	681b      	ldr	r3, [r3, #0]
    c45a:	e7fa      	b.n	c452 <cont_arg_get+0x8>
		return msg->payload.ext.data.args[arg_idx];
    c45c:	3104      	adds	r1, #4
    c45e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    c462:	6888      	ldr	r0, [r1, #8]
    c464:	4770      	bx	lr
	}

	return cont->payload.args[arg_idx];
    c466:	eb03 0181 	add.w	r1, r3, r1, lsl #2
    c46a:	6848      	ldr	r0, [r1, #4]
}
    c46c:	4770      	bx	lr

0000c46e <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
    c46e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c472:	461c      	mov	r4, r3
    c474:	f89d 9020 	ldrb.w	r9, [sp, #32]
	uint32_t available_len = msg->hdr.params.hexdump.length;
    c478:	8903      	ldrh	r3, [r0, #8]
    c47a:	f3c3 038d 	ubfx	r3, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
    c47e:	42a3      	cmp	r3, r4
    c480:	d91f      	bls.n	c4c2 <log_msg_hexdump_data_op+0x54>
    c482:	4688      	mov	r8, r1
		*length = 0;
		return;
	}

	if ((offset + *length) > available_len) {
    c484:	6811      	ldr	r1, [r2, #0]
    c486:	4421      	add	r1, r4
    c488:	4299      	cmp	r1, r3
    c48a:	d901      	bls.n	c490 <log_msg_hexdump_data_op+0x22>
		*length = available_len - offset;
    c48c:	1b19      	subs	r1, r3, r4
    c48e:	6011      	str	r1, [r2, #0]
	}

	req_len = *length;
    c490:	6817      	ldr	r7, [r2, #0]

	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
    c492:	2b0c      	cmp	r3, #12
    c494:	d919      	bls.n	c4ca <log_msg_hexdump_data_op+0x5c>
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
		head_data = msg->payload.ext.data.bytes;
    c496:	f100 0c18 	add.w	ip, r0, #24
		cont = msg->payload.ext.next;
    c49a:	6946      	ldr	r6, [r0, #20]
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
    c49c:	2308      	movs	r3, #8
		head_data = msg->payload.single.bytes;
		chunk_len = available_len;

	}

	if (offset < chunk_len) {
    c49e:	42a3      	cmp	r3, r4
    c4a0:	d91e      	bls.n	c4e0 <log_msg_hexdump_data_op+0x72>
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    c4a2:	42bb      	cmp	r3, r7
    c4a4:	bf28      	it	cs
    c4a6:	463b      	movcs	r3, r7
    c4a8:	461d      	mov	r5, r3

		if (put_op) {
    c4aa:	f1b9 0f00 	cmp.w	r9, #0
    c4ae:	d010      	beq.n	c4d2 <log_msg_hexdump_data_op+0x64>
			(void)memcpy(&head_data[offset], data, cpy_len);
    c4b0:	461a      	mov	r2, r3
    c4b2:	4641      	mov	r1, r8
    c4b4:	eb0c 0004 	add.w	r0, ip, r4
    c4b8:	f000 fde5 	bl	d086 <memcpy>
		} else {
			(void)memcpy(data, &head_data[offset], cpy_len);
		}

		req_len -= cpy_len;
    c4bc:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
    c4be:	44a8      	add	r8, r5
    c4c0:	e021      	b.n	c506 <log_msg_hexdump_data_op+0x98>
		*length = 0;
    c4c2:	2300      	movs	r3, #0
    c4c4:	6013      	str	r3, [r2, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
    c4c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		head_data = msg->payload.single.bytes;
    c4ca:	f100 0c14 	add.w	ip, r0, #20
	struct log_msg_cont *cont = NULL;
    c4ce:	2600      	movs	r6, #0
    c4d0:	e7e5      	b.n	c49e <log_msg_hexdump_data_op+0x30>
			(void)memcpy(data, &head_data[offset], cpy_len);
    c4d2:	461a      	mov	r2, r3
    c4d4:	eb0c 0104 	add.w	r1, ip, r4
    c4d8:	4640      	mov	r0, r8
    c4da:	f000 fdd4 	bl	d086 <memcpy>
    c4de:	e7ed      	b.n	c4bc <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
    c4e0:	1ae4      	subs	r4, r4, r3
		if (cont == NULL) {
    c4e2:	b91e      	cbnz	r6, c4ec <log_msg_hexdump_data_op+0x7e>
			cont = msg->payload.ext.next;
    c4e4:	6946      	ldr	r6, [r0, #20]
    c4e6:	e001      	b.n	c4ec <log_msg_hexdump_data_op+0x7e>
			cont = cont->next;
    c4e8:	6836      	ldr	r6, [r6, #0]
			offset -= chunk_len;
    c4ea:	3c1c      	subs	r4, #28
		while (offset >= chunk_len) {
    c4ec:	2c1b      	cmp	r4, #27
    c4ee:	d8fb      	bhi.n	c4e8 <log_msg_hexdump_data_op+0x7a>
    c4f0:	e009      	b.n	c506 <log_msg_hexdump_data_op+0x98>
			(void)memcpy(data, &cont->payload.bytes[offset],
    c4f2:	1931      	adds	r1, r6, r4
    c4f4:	462a      	mov	r2, r5
    c4f6:	3104      	adds	r1, #4
    c4f8:	4640      	mov	r0, r8
    c4fa:	f000 fdc4 	bl	d086 <memcpy>
		cont = cont->next;
    c4fe:	6836      	ldr	r6, [r6, #0]
		req_len -= cpy_len;
    c500:	1b7f      	subs	r7, r7, r5
		data += cpy_len;
    c502:	44a8      	add	r8, r5
		offset = 0;
    c504:	2400      	movs	r4, #0
	while ((req_len > 0) && (cont != NULL)) {
    c506:	2f00      	cmp	r7, #0
    c508:	d0dd      	beq.n	c4c6 <log_msg_hexdump_data_op+0x58>
    c50a:	2e00      	cmp	r6, #0
    c50c:	d0db      	beq.n	c4c6 <log_msg_hexdump_data_op+0x58>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
    c50e:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
    c512:	42bd      	cmp	r5, r7
    c514:	bf28      	it	cs
    c516:	463d      	movcs	r5, r7
		if (put_op) {
    c518:	f1b9 0f00 	cmp.w	r9, #0
    c51c:	d0e9      	beq.n	c4f2 <log_msg_hexdump_data_op+0x84>
			(void)memcpy(&cont->payload.bytes[offset],
    c51e:	1930      	adds	r0, r6, r4
    c520:	462a      	mov	r2, r5
    c522:	4641      	mov	r1, r8
    c524:	3004      	adds	r0, #4
    c526:	f000 fdae 	bl	d086 <memcpy>
    c52a:	e7e8      	b.n	c4fe <log_msg_hexdump_data_op+0x90>

0000c52c <log_msg_get>:
	atomic_inc(&msg->hdr.ref_cnt);
    c52c:	3004      	adds	r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    c52e:	f3bf 8f5b 	dmb	ish
    c532:	e850 3f00 	ldrex	r3, [r0]
    c536:	3301      	adds	r3, #1
    c538:	e840 3200 	strex	r2, r3, [r0]
    c53c:	2a00      	cmp	r2, #0
    c53e:	d1f8      	bne.n	c532 <log_msg_get+0x6>
    c540:	f3bf 8f5b 	dmb	ish
}
    c544:	4770      	bx	lr

0000c546 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
    c546:	7a40      	ldrb	r0, [r0, #9]
}
    c548:	0900      	lsrs	r0, r0, #4
    c54a:	4770      	bx	lr

0000c54c <log_msg_arg_get>:
{
    c54c:	b508      	push	{r3, lr}
	if (arg_idx >= msg->hdr.params.std.nargs) {
    c54e:	7a43      	ldrb	r3, [r0, #9]
    c550:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
    c554:	d20a      	bcs.n	c56c <log_msg_arg_get+0x20>
    c556:	091a      	lsrs	r2, r3, #4
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
    c558:	2a03      	cmp	r2, #3
    c55a:	d804      	bhi.n	c566 <log_msg_arg_get+0x1a>
		arg = msg->payload.single.args[arg_idx];
    c55c:	3104      	adds	r1, #4
    c55e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    c562:	6840      	ldr	r0, [r0, #4]
    c564:	e003      	b.n	c56e <log_msg_arg_get+0x22>
		arg = cont_arg_get(msg, arg_idx);
    c566:	f7ff ff70 	bl	c44a <cont_arg_get>
    c56a:	e000      	b.n	c56e <log_msg_arg_get+0x22>
		return 0;
    c56c:	2000      	movs	r0, #0
}
    c56e:	bd08      	pop	{r3, pc}

0000c570 <log_msg_str_get>:
}
    c570:	6900      	ldr	r0, [r0, #16]
    c572:	4770      	bx	lr

0000c574 <log_msg_put>:
{
    c574:	b508      	push	{r3, lr}
	atomic_dec(&msg->hdr.ref_cnt);
    c576:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    c578:	f3bf 8f5b 	dmb	ish
    c57c:	e853 2f00 	ldrex	r2, [r3]
    c580:	3a01      	subs	r2, #1
    c582:	e843 2100 	strex	r1, r2, [r3]
    c586:	2900      	cmp	r1, #0
    c588:	d1f8      	bne.n	c57c <log_msg_put+0x8>
    c58a:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
    c58e:	6843      	ldr	r3, [r0, #4]
    c590:	b103      	cbz	r3, c594 <log_msg_put+0x20>
}
    c592:	bd08      	pop	{r3, pc}
		msg_free(msg);
    c594:	f7f5 fa14 	bl	19c0 <msg_free>
}
    c598:	e7fb      	b.n	c592 <log_msg_put+0x1e>

0000c59a <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
    c59a:	b510      	push	{r4, lr}
    c59c:	b082      	sub	sp, #8
	log_msg_hexdump_data_op(msg, data, length, offset, false);
    c59e:	2400      	movs	r4, #0
    c5a0:	9400      	str	r4, [sp, #0]
    c5a2:	f7ff ff64 	bl	c46e <log_msg_hexdump_data_op>
}
    c5a6:	b002      	add	sp, #8
    c5a8:	bd10      	pop	{r4, pc}

0000c5aa <buffer_write>:
{
    c5aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c5ac:	4607      	mov	r7, r0
    c5ae:	460d      	mov	r5, r1
    c5b0:	4614      	mov	r4, r2
    c5b2:	461e      	mov	r6, r3
		processed = outf(buf, len, ctx);
    c5b4:	4632      	mov	r2, r6
    c5b6:	4621      	mov	r1, r4
    c5b8:	4628      	mov	r0, r5
    c5ba:	47b8      	blx	r7
		buf += processed;
    c5bc:	4405      	add	r5, r0
	} while (len != 0);
    c5be:	1a24      	subs	r4, r4, r0
    c5c0:	d1f8      	bne.n	c5b4 <buffer_write+0xa>
}
    c5c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000c5c4 <color_prefix>:
{
    c5c4:	b508      	push	{r3, lr}
    c5c6:	4613      	mov	r3, r2
	color_print(output, color, true, level);
    c5c8:	2201      	movs	r2, #1
    c5ca:	f7f5 fa91 	bl	1af0 <color_print>
}
    c5ce:	bd08      	pop	{r3, pc}

0000c5d0 <color_postfix>:
{
    c5d0:	b508      	push	{r3, lr}
    c5d2:	4613      	mov	r3, r2
	color_print(output, color, false, level);
    c5d4:	2200      	movs	r2, #0
    c5d6:	f7f5 fa8b 	bl	1af0 <color_print>
}
    c5da:	bd08      	pop	{r3, pc}

0000c5dc <postfix_print>:
{
    c5dc:	b538      	push	{r3, r4, r5, lr}
    c5de:	4605      	mov	r5, r0
    c5e0:	460c      	mov	r4, r1
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
    c5e2:	f001 0101 	and.w	r1, r1, #1
    c5e6:	f7ff fff3 	bl	c5d0 <color_postfix>
	newline_print(output, flags);
    c5ea:	4621      	mov	r1, r4
    c5ec:	4628      	mov	r0, r5
    c5ee:	f7f5 fa95 	bl	1b1c <newline_print>
}
    c5f2:	bd38      	pop	{r3, r4, r5, pc}

0000c5f4 <prefix_print>:
{
    c5f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c5f8:	b083      	sub	sp, #12
    c5fa:	4604      	mov	r4, r0
    c5fc:	4615      	mov	r5, r2
    c5fe:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    c602:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    c606:	f3c1 08c0 	ubfx	r8, r1, #3, #1
	if (stamp) {
    c60a:	f011 0702 	ands.w	r7, r1, #2
    c60e:	d113      	bne.n	c638 <prefix_print+0x44>
		color_prefix(output, colors_on, level);
    c610:	4632      	mov	r2, r6
    c612:	4649      	mov	r1, r9
    c614:	4620      	mov	r0, r4
    c616:	f7ff ffd5 	bl	c5c4 <color_prefix>
	length += ids_print(output, level_on, func_on,
    c61a:	9601      	str	r6, [sp, #4]
    c61c:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    c620:	9300      	str	r3, [sp, #0]
    c622:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    c626:	462a      	mov	r2, r5
    c628:	4641      	mov	r1, r8
    c62a:	4620      	mov	r0, r4
    c62c:	f7f5 fae8 	bl	1c00 <ids_print>
}
    c630:	4438      	add	r0, r7
    c632:	b003      	add	sp, #12
    c634:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		length += timestamp_print(output, flags, timestamp);
    c638:	461a      	mov	r2, r3
    c63a:	f7f5 fa13 	bl	1a64 <timestamp_print>
    c63e:	4607      	mov	r7, r0
    c640:	e7e6      	b.n	c610 <prefix_print+0x1c>

0000c642 <std_print>:
{
    c642:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c646:	b08e      	sub	sp, #56	; 0x38
    c648:	af0e      	add	r7, sp, #56	; 0x38
    c64a:	4606      	mov	r6, r0
    c64c:	4689      	mov	r9, r1
	const char *str = log_msg_str_get(msg);
    c64e:	f7ff ff8f 	bl	c570 <log_msg_str_get>
    c652:	4682      	mov	sl, r0
	uint32_t nargs = log_msg_nargs_get(msg);
    c654:	4630      	mov	r0, r6
    c656:	f7ff ff76 	bl	c546 <log_msg_nargs_get>
    c65a:	4680      	mov	r8, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
    c65c:	0083      	lsls	r3, r0, #2
    c65e:	3307      	adds	r3, #7
    c660:	f023 0307 	bic.w	r3, r3, #7
    c664:	ebad 0d03 	sub.w	sp, sp, r3
    c668:	ad0e      	add	r5, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
    c66a:	2400      	movs	r4, #0
    c66c:	4544      	cmp	r4, r8
    c66e:	d207      	bcs.n	c680 <std_print+0x3e>
		args[i] = log_msg_arg_get(msg, i);
    c670:	4621      	mov	r1, r4
    c672:	4630      	mov	r0, r6
    c674:	f7ff ff6a 	bl	c54c <log_msg_arg_get>
    c678:	f845 0024 	str.w	r0, [r5, r4, lsl #2]
	for (i = 0; i < nargs; i++) {
    c67c:	3401      	adds	r4, #1
    c67e:	e7f5      	b.n	c66c <std_print+0x2a>
	switch (log_msg_nargs_get(msg)) {
    c680:	4630      	mov	r0, r6
    c682:	f7ff ff60 	bl	c546 <log_msg_nargs_get>
    c686:	280f      	cmp	r0, #15
    c688:	d815      	bhi.n	c6b6 <std_print+0x74>
    c68a:	e8df f010 	tbh	[pc, r0, lsl #1]
    c68e:	0010      	.short	0x0010
    c690:	001d0017 	.word	0x001d0017
    c694:	002d0024 	.word	0x002d0024
    c698:	00450038 	.word	0x00450038
    c69c:	00650054 	.word	0x00650054
    c6a0:	008d0078 	.word	0x008d0078
    c6a4:	00bd00a4 	.word	0x00bd00a4
    c6a8:	00f500d8 	.word	0x00f500d8
    c6ac:	0114      	.short	0x0114
		print_formatted(output, str);
    c6ae:	4651      	mov	r1, sl
    c6b0:	4648      	mov	r0, r9
    c6b2:	f7f5 f9c5 	bl	1a40 <print_formatted>
}
    c6b6:	46bd      	mov	sp, r7
    c6b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
    c6bc:	682a      	ldr	r2, [r5, #0]
    c6be:	4651      	mov	r1, sl
    c6c0:	4648      	mov	r0, r9
    c6c2:	f7f5 f9bd 	bl	1a40 <print_formatted>
		break;
    c6c6:	e7f6      	b.n	c6b6 <std_print+0x74>
		print_formatted(output, str, args[0], args[1]);
    c6c8:	686b      	ldr	r3, [r5, #4]
    c6ca:	682a      	ldr	r2, [r5, #0]
    c6cc:	4651      	mov	r1, sl
    c6ce:	4648      	mov	r0, r9
    c6d0:	f7f5 f9b6 	bl	1a40 <print_formatted>
		break;
    c6d4:	e7ef      	b.n	c6b6 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2]);
    c6d6:	686b      	ldr	r3, [r5, #4]
    c6d8:	682a      	ldr	r2, [r5, #0]
    c6da:	68a9      	ldr	r1, [r5, #8]
    c6dc:	9100      	str	r1, [sp, #0]
    c6de:	4651      	mov	r1, sl
    c6e0:	4648      	mov	r0, r9
    c6e2:	f7f5 f9ad 	bl	1a40 <print_formatted>
		break;
    c6e6:	e7e6      	b.n	c6b6 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    c6e8:	686b      	ldr	r3, [r5, #4]
    c6ea:	682a      	ldr	r2, [r5, #0]
    c6ec:	68e9      	ldr	r1, [r5, #12]
    c6ee:	9101      	str	r1, [sp, #4]
    c6f0:	68a9      	ldr	r1, [r5, #8]
    c6f2:	9100      	str	r1, [sp, #0]
    c6f4:	4651      	mov	r1, sl
    c6f6:	4648      	mov	r0, r9
    c6f8:	f7f5 f9a2 	bl	1a40 <print_formatted>
		break;
    c6fc:	e7db      	b.n	c6b6 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    c6fe:	686b      	ldr	r3, [r5, #4]
    c700:	682a      	ldr	r2, [r5, #0]
    c702:	6929      	ldr	r1, [r5, #16]
    c704:	9102      	str	r1, [sp, #8]
    c706:	68e9      	ldr	r1, [r5, #12]
    c708:	9101      	str	r1, [sp, #4]
    c70a:	68a9      	ldr	r1, [r5, #8]
    c70c:	9100      	str	r1, [sp, #0]
    c70e:	4651      	mov	r1, sl
    c710:	4648      	mov	r0, r9
    c712:	f7f5 f995 	bl	1a40 <print_formatted>
		break;
    c716:	e7ce      	b.n	c6b6 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    c718:	686b      	ldr	r3, [r5, #4]
    c71a:	682a      	ldr	r2, [r5, #0]
    c71c:	6969      	ldr	r1, [r5, #20]
    c71e:	9103      	str	r1, [sp, #12]
    c720:	6929      	ldr	r1, [r5, #16]
    c722:	9102      	str	r1, [sp, #8]
    c724:	68e9      	ldr	r1, [r5, #12]
    c726:	9101      	str	r1, [sp, #4]
    c728:	68a9      	ldr	r1, [r5, #8]
    c72a:	9100      	str	r1, [sp, #0]
    c72c:	4651      	mov	r1, sl
    c72e:	4648      	mov	r0, r9
    c730:	f7f5 f986 	bl	1a40 <print_formatted>
		break;
    c734:	e7bf      	b.n	c6b6 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    c736:	686b      	ldr	r3, [r5, #4]
    c738:	682a      	ldr	r2, [r5, #0]
    c73a:	69a9      	ldr	r1, [r5, #24]
    c73c:	9104      	str	r1, [sp, #16]
    c73e:	6969      	ldr	r1, [r5, #20]
    c740:	9103      	str	r1, [sp, #12]
    c742:	6929      	ldr	r1, [r5, #16]
    c744:	9102      	str	r1, [sp, #8]
    c746:	68e9      	ldr	r1, [r5, #12]
    c748:	9101      	str	r1, [sp, #4]
    c74a:	68a9      	ldr	r1, [r5, #8]
    c74c:	9100      	str	r1, [sp, #0]
    c74e:	4651      	mov	r1, sl
    c750:	4648      	mov	r0, r9
    c752:	f7f5 f975 	bl	1a40 <print_formatted>
		break;
    c756:	e7ae      	b.n	c6b6 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    c758:	686b      	ldr	r3, [r5, #4]
    c75a:	682a      	ldr	r2, [r5, #0]
    c75c:	69e9      	ldr	r1, [r5, #28]
    c75e:	9105      	str	r1, [sp, #20]
    c760:	69a9      	ldr	r1, [r5, #24]
    c762:	9104      	str	r1, [sp, #16]
    c764:	6969      	ldr	r1, [r5, #20]
    c766:	9103      	str	r1, [sp, #12]
    c768:	6929      	ldr	r1, [r5, #16]
    c76a:	9102      	str	r1, [sp, #8]
    c76c:	68e9      	ldr	r1, [r5, #12]
    c76e:	9101      	str	r1, [sp, #4]
    c770:	68a9      	ldr	r1, [r5, #8]
    c772:	9100      	str	r1, [sp, #0]
    c774:	4651      	mov	r1, sl
    c776:	4648      	mov	r0, r9
    c778:	f7f5 f962 	bl	1a40 <print_formatted>
		break;
    c77c:	e79b      	b.n	c6b6 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    c77e:	686b      	ldr	r3, [r5, #4]
    c780:	682a      	ldr	r2, [r5, #0]
    c782:	6a29      	ldr	r1, [r5, #32]
    c784:	9106      	str	r1, [sp, #24]
    c786:	69e9      	ldr	r1, [r5, #28]
    c788:	9105      	str	r1, [sp, #20]
    c78a:	69a9      	ldr	r1, [r5, #24]
    c78c:	9104      	str	r1, [sp, #16]
    c78e:	6969      	ldr	r1, [r5, #20]
    c790:	9103      	str	r1, [sp, #12]
    c792:	6929      	ldr	r1, [r5, #16]
    c794:	9102      	str	r1, [sp, #8]
    c796:	68e9      	ldr	r1, [r5, #12]
    c798:	9101      	str	r1, [sp, #4]
    c79a:	68a9      	ldr	r1, [r5, #8]
    c79c:	9100      	str	r1, [sp, #0]
    c79e:	4651      	mov	r1, sl
    c7a0:	4648      	mov	r0, r9
    c7a2:	f7f5 f94d 	bl	1a40 <print_formatted>
		break;
    c7a6:	e786      	b.n	c6b6 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    c7a8:	686b      	ldr	r3, [r5, #4]
    c7aa:	682a      	ldr	r2, [r5, #0]
    c7ac:	6a69      	ldr	r1, [r5, #36]	; 0x24
    c7ae:	9107      	str	r1, [sp, #28]
    c7b0:	6a29      	ldr	r1, [r5, #32]
    c7b2:	9106      	str	r1, [sp, #24]
    c7b4:	69e9      	ldr	r1, [r5, #28]
    c7b6:	9105      	str	r1, [sp, #20]
    c7b8:	69a9      	ldr	r1, [r5, #24]
    c7ba:	9104      	str	r1, [sp, #16]
    c7bc:	6969      	ldr	r1, [r5, #20]
    c7be:	9103      	str	r1, [sp, #12]
    c7c0:	6929      	ldr	r1, [r5, #16]
    c7c2:	9102      	str	r1, [sp, #8]
    c7c4:	68e9      	ldr	r1, [r5, #12]
    c7c6:	9101      	str	r1, [sp, #4]
    c7c8:	68a9      	ldr	r1, [r5, #8]
    c7ca:	9100      	str	r1, [sp, #0]
    c7cc:	4651      	mov	r1, sl
    c7ce:	4648      	mov	r0, r9
    c7d0:	f7f5 f936 	bl	1a40 <print_formatted>
		break;
    c7d4:	e76f      	b.n	c6b6 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    c7d6:	686b      	ldr	r3, [r5, #4]
    c7d8:	682a      	ldr	r2, [r5, #0]
    c7da:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    c7dc:	9108      	str	r1, [sp, #32]
    c7de:	6a69      	ldr	r1, [r5, #36]	; 0x24
    c7e0:	9107      	str	r1, [sp, #28]
    c7e2:	6a29      	ldr	r1, [r5, #32]
    c7e4:	9106      	str	r1, [sp, #24]
    c7e6:	69e9      	ldr	r1, [r5, #28]
    c7e8:	9105      	str	r1, [sp, #20]
    c7ea:	69a9      	ldr	r1, [r5, #24]
    c7ec:	9104      	str	r1, [sp, #16]
    c7ee:	6969      	ldr	r1, [r5, #20]
    c7f0:	9103      	str	r1, [sp, #12]
    c7f2:	6929      	ldr	r1, [r5, #16]
    c7f4:	9102      	str	r1, [sp, #8]
    c7f6:	68e9      	ldr	r1, [r5, #12]
    c7f8:	9101      	str	r1, [sp, #4]
    c7fa:	68a9      	ldr	r1, [r5, #8]
    c7fc:	9100      	str	r1, [sp, #0]
    c7fe:	4651      	mov	r1, sl
    c800:	4648      	mov	r0, r9
    c802:	f7f5 f91d 	bl	1a40 <print_formatted>
		break;
    c806:	e756      	b.n	c6b6 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    c808:	686b      	ldr	r3, [r5, #4]
    c80a:	682a      	ldr	r2, [r5, #0]
    c80c:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    c80e:	9109      	str	r1, [sp, #36]	; 0x24
    c810:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    c812:	9108      	str	r1, [sp, #32]
    c814:	6a69      	ldr	r1, [r5, #36]	; 0x24
    c816:	9107      	str	r1, [sp, #28]
    c818:	6a29      	ldr	r1, [r5, #32]
    c81a:	9106      	str	r1, [sp, #24]
    c81c:	69e9      	ldr	r1, [r5, #28]
    c81e:	9105      	str	r1, [sp, #20]
    c820:	69a9      	ldr	r1, [r5, #24]
    c822:	9104      	str	r1, [sp, #16]
    c824:	6969      	ldr	r1, [r5, #20]
    c826:	9103      	str	r1, [sp, #12]
    c828:	6929      	ldr	r1, [r5, #16]
    c82a:	9102      	str	r1, [sp, #8]
    c82c:	68e9      	ldr	r1, [r5, #12]
    c82e:	9101      	str	r1, [sp, #4]
    c830:	68a9      	ldr	r1, [r5, #8]
    c832:	9100      	str	r1, [sp, #0]
    c834:	4651      	mov	r1, sl
    c836:	4648      	mov	r0, r9
    c838:	f7f5 f902 	bl	1a40 <print_formatted>
		break;
    c83c:	e73b      	b.n	c6b6 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    c83e:	686b      	ldr	r3, [r5, #4]
    c840:	682a      	ldr	r2, [r5, #0]
    c842:	6b29      	ldr	r1, [r5, #48]	; 0x30
    c844:	910a      	str	r1, [sp, #40]	; 0x28
    c846:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    c848:	9109      	str	r1, [sp, #36]	; 0x24
    c84a:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    c84c:	9108      	str	r1, [sp, #32]
    c84e:	6a69      	ldr	r1, [r5, #36]	; 0x24
    c850:	9107      	str	r1, [sp, #28]
    c852:	6a29      	ldr	r1, [r5, #32]
    c854:	9106      	str	r1, [sp, #24]
    c856:	69e9      	ldr	r1, [r5, #28]
    c858:	9105      	str	r1, [sp, #20]
    c85a:	69a9      	ldr	r1, [r5, #24]
    c85c:	9104      	str	r1, [sp, #16]
    c85e:	6969      	ldr	r1, [r5, #20]
    c860:	9103      	str	r1, [sp, #12]
    c862:	6929      	ldr	r1, [r5, #16]
    c864:	9102      	str	r1, [sp, #8]
    c866:	68e9      	ldr	r1, [r5, #12]
    c868:	9101      	str	r1, [sp, #4]
    c86a:	68a9      	ldr	r1, [r5, #8]
    c86c:	9100      	str	r1, [sp, #0]
    c86e:	4651      	mov	r1, sl
    c870:	4648      	mov	r0, r9
    c872:	f7f5 f8e5 	bl	1a40 <print_formatted>
		break;
    c876:	e71e      	b.n	c6b6 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    c878:	686b      	ldr	r3, [r5, #4]
    c87a:	682a      	ldr	r2, [r5, #0]
    c87c:	6b69      	ldr	r1, [r5, #52]	; 0x34
    c87e:	910b      	str	r1, [sp, #44]	; 0x2c
    c880:	6b29      	ldr	r1, [r5, #48]	; 0x30
    c882:	910a      	str	r1, [sp, #40]	; 0x28
    c884:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    c886:	9109      	str	r1, [sp, #36]	; 0x24
    c888:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    c88a:	9108      	str	r1, [sp, #32]
    c88c:	6a69      	ldr	r1, [r5, #36]	; 0x24
    c88e:	9107      	str	r1, [sp, #28]
    c890:	6a29      	ldr	r1, [r5, #32]
    c892:	9106      	str	r1, [sp, #24]
    c894:	69e9      	ldr	r1, [r5, #28]
    c896:	9105      	str	r1, [sp, #20]
    c898:	69a9      	ldr	r1, [r5, #24]
    c89a:	9104      	str	r1, [sp, #16]
    c89c:	6969      	ldr	r1, [r5, #20]
    c89e:	9103      	str	r1, [sp, #12]
    c8a0:	6929      	ldr	r1, [r5, #16]
    c8a2:	9102      	str	r1, [sp, #8]
    c8a4:	68e9      	ldr	r1, [r5, #12]
    c8a6:	9101      	str	r1, [sp, #4]
    c8a8:	68a9      	ldr	r1, [r5, #8]
    c8aa:	9100      	str	r1, [sp, #0]
    c8ac:	4651      	mov	r1, sl
    c8ae:	4648      	mov	r0, r9
    c8b0:	f7f5 f8c6 	bl	1a40 <print_formatted>
		break;
    c8b4:	e6ff      	b.n	c6b6 <std_print+0x74>
		print_formatted(output, str, args[0], args[1], args[2],
    c8b6:	686b      	ldr	r3, [r5, #4]
    c8b8:	682a      	ldr	r2, [r5, #0]
    c8ba:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    c8bc:	910c      	str	r1, [sp, #48]	; 0x30
    c8be:	6b69      	ldr	r1, [r5, #52]	; 0x34
    c8c0:	910b      	str	r1, [sp, #44]	; 0x2c
    c8c2:	6b29      	ldr	r1, [r5, #48]	; 0x30
    c8c4:	910a      	str	r1, [sp, #40]	; 0x28
    c8c6:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
    c8c8:	9109      	str	r1, [sp, #36]	; 0x24
    c8ca:	6aa9      	ldr	r1, [r5, #40]	; 0x28
    c8cc:	9108      	str	r1, [sp, #32]
    c8ce:	6a69      	ldr	r1, [r5, #36]	; 0x24
    c8d0:	9107      	str	r1, [sp, #28]
    c8d2:	6a29      	ldr	r1, [r5, #32]
    c8d4:	9106      	str	r1, [sp, #24]
    c8d6:	69e9      	ldr	r1, [r5, #28]
    c8d8:	9105      	str	r1, [sp, #20]
    c8da:	69a9      	ldr	r1, [r5, #24]
    c8dc:	9104      	str	r1, [sp, #16]
    c8de:	6969      	ldr	r1, [r5, #20]
    c8e0:	9103      	str	r1, [sp, #12]
    c8e2:	6929      	ldr	r1, [r5, #16]
    c8e4:	9102      	str	r1, [sp, #8]
    c8e6:	68e9      	ldr	r1, [r5, #12]
    c8e8:	9101      	str	r1, [sp, #4]
    c8ea:	68a9      	ldr	r1, [r5, #8]
    c8ec:	9100      	str	r1, [sp, #0]
    c8ee:	4651      	mov	r1, sl
    c8f0:	4648      	mov	r0, r9
    c8f2:	f7f5 f8a5 	bl	1a40 <print_formatted>
}
    c8f6:	e6de      	b.n	c6b6 <std_print+0x74>

0000c8f8 <log_output_flush>:
{
    c8f8:	b510      	push	{r4, lr}
    c8fa:	4604      	mov	r4, r0
		     output->control_block->offset,
    c8fc:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    c8fe:	6853      	ldr	r3, [r2, #4]
    c900:	6812      	ldr	r2, [r2, #0]
    c902:	6881      	ldr	r1, [r0, #8]
    c904:	6800      	ldr	r0, [r0, #0]
    c906:	f7ff fe50 	bl	c5aa <buffer_write>
	output->control_block->offset = 0;
    c90a:	6863      	ldr	r3, [r4, #4]
    c90c:	2200      	movs	r2, #0
    c90e:	601a      	str	r2, [r3, #0]
}
    c910:	bd10      	pop	{r4, pc}

0000c912 <out_func>:
{
    c912:	b538      	push	{r3, r4, r5, lr}
    c914:	4605      	mov	r5, r0
    c916:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    c918:	684b      	ldr	r3, [r1, #4]
    c91a:	681a      	ldr	r2, [r3, #0]
    c91c:	68cb      	ldr	r3, [r1, #12]
    c91e:	429a      	cmp	r2, r3
    c920:	d00f      	beq.n	c942 <out_func+0x30>
	idx = atomic_inc(&out_ctx->control_block->offset);
    c922:	6863      	ldr	r3, [r4, #4]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    c924:	f3bf 8f5b 	dmb	ish
    c928:	e853 2f00 	ldrex	r2, [r3]
    c92c:	1c51      	adds	r1, r2, #1
    c92e:	e843 1000 	strex	r0, r1, [r3]
    c932:	2800      	cmp	r0, #0
    c934:	d1f8      	bne.n	c928 <out_func+0x16>
    c936:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    c93a:	68a3      	ldr	r3, [r4, #8]
    c93c:	549d      	strb	r5, [r3, r2]
}
    c93e:	2000      	movs	r0, #0
    c940:	bd38      	pop	{r3, r4, r5, pc}
		log_output_flush(out_ctx);
    c942:	4608      	mov	r0, r1
    c944:	f7ff ffd8 	bl	c8f8 <log_output_flush>
    c948:	e7eb      	b.n	c922 <out_func+0x10>

0000c94a <log_output_msg_process>:
{
    c94a:	b5f0      	push	{r4, r5, r6, r7, lr}
    c94c:	b085      	sub	sp, #20
    c94e:	4606      	mov	r6, r0
    c950:	460c      	mov	r4, r1
    c952:	4617      	mov	r7, r2
    c954:	7a0b      	ldrb	r3, [r1, #8]
    c956:	f083 0301 	eor.w	r3, r3, #1
    c95a:	f003 0201 	and.w	r2, r3, #1
	return msg->hdr.timestamp;
    c95e:	68cb      	ldr	r3, [r1, #12]
	return msg->hdr.ids.level;
    c960:	7a89      	ldrb	r1, [r1, #10]
	return msg->hdr.ids.domain_id;
    c962:	f3c1 0cc2 	ubfx	ip, r1, #3, #3
	return msg->hdr.ids.source_id;
    c966:	8960      	ldrh	r0, [r4, #10]
	int16_t source_id = (int16_t)log_msg_source_id_get(msg);
    c968:	f3c0 1089 	ubfx	r0, r0, #6, #10
			0 : prefix_print(output, flags, std_msg, timestamp,
    c96c:	f011 0507 	ands.w	r5, r1, #7
    c970:	d10f      	bne.n	c992 <log_output_msg_process+0x48>
    c972:	2200      	movs	r2, #0
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    c974:	7a23      	ldrb	r3, [r4, #8]
	if (log_msg_is_std(msg)) {
    c976:	f013 0f01 	tst.w	r3, #1
    c97a:	d014      	beq.n	c9a6 <log_output_msg_process+0x5c>
	} else if (raw_string) {
    c97c:	b9c5      	cbnz	r5, c9b0 <log_output_msg_process+0x66>
		raw_string_print(msg, output);
    c97e:	4631      	mov	r1, r6
    c980:	4620      	mov	r0, r4
    c982:	f7f5 f99d 	bl	1cc0 <raw_string_print>
	if (!raw_string) {
    c986:	b9cd      	cbnz	r5, c9bc <log_output_msg_process+0x72>
	log_output_flush(output);
    c988:	4630      	mov	r0, r6
    c98a:	f7ff ffb5 	bl	c8f8 <log_output_flush>
}
    c98e:	b005      	add	sp, #20
    c990:	bdf0      	pop	{r4, r5, r6, r7, pc}
			0 : prefix_print(output, flags, std_msg, timestamp,
    c992:	9002      	str	r0, [sp, #8]
    c994:	f8cd c004 	str.w	ip, [sp, #4]
    c998:	9500      	str	r5, [sp, #0]
    c99a:	4639      	mov	r1, r7
    c99c:	4630      	mov	r0, r6
    c99e:	f7ff fe29 	bl	c5f4 <prefix_print>
    c9a2:	4602      	mov	r2, r0
    c9a4:	e7e6      	b.n	c974 <log_output_msg_process+0x2a>
		std_print(msg, output);
    c9a6:	4631      	mov	r1, r6
    c9a8:	4620      	mov	r0, r4
    c9aa:	f7ff fe4a 	bl	c642 <std_print>
    c9ae:	e7ea      	b.n	c986 <log_output_msg_process+0x3c>
		hexdump_print(msg, output, prefix_offset, flags);
    c9b0:	463b      	mov	r3, r7
    c9b2:	4631      	mov	r1, r6
    c9b4:	4620      	mov	r0, r4
    c9b6:	f7f5 f959 	bl	1c6c <hexdump_print>
    c9ba:	e7e4      	b.n	c986 <log_output_msg_process+0x3c>
		postfix_print(output, flags, level);
    c9bc:	462a      	mov	r2, r5
    c9be:	4639      	mov	r1, r7
    c9c0:	4630      	mov	r0, r6
    c9c2:	f7ff fe0b 	bl	c5dc <postfix_print>
    c9c6:	e7df      	b.n	c988 <log_output_msg_process+0x3e>

0000c9c8 <usb_get_status>:
	uint8_t *data = *data_buf;
    c9c8:	6813      	ldr	r3, [r2, #0]
	data[1] = 0U;
    c9ca:	2200      	movs	r2, #0
    c9cc:	705a      	strb	r2, [r3, #1]
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    c9ce:	2001      	movs	r0, #1
    c9d0:	7018      	strb	r0, [r3, #0]
	*len = 2;
    c9d2:	2302      	movs	r3, #2
    c9d4:	600b      	str	r3, [r1, #0]
}
    c9d6:	4770      	bx	lr

0000c9d8 <usb_vbus_set>:
}
    c9d8:	2000      	movs	r0, #0
    c9da:	4770      	bx	lr

0000c9dc <usb_eps_reconfigure>:
{
    c9dc:	b508      	push	{r3, lr}
	if (cur_alt_setting != alt_setting) {
    c9de:	4291      	cmp	r1, r2
    c9e0:	d002      	beq.n	c9e8 <usb_eps_reconfigure+0xc>
		ret = reset_endpoint(ep_desc);
    c9e2:	f7f5 fd75 	bl	24d0 <reset_endpoint>
}
    c9e6:	bd08      	pop	{r3, pc}
		ret = set_endpoint(ep_desc);
    c9e8:	f7f5 fc96 	bl	2318 <set_endpoint>
    c9ec:	e7fb      	b.n	c9e6 <usb_eps_reconfigure+0xa>

0000c9ee <usb_handle_std_interface_req>:
{
    c9ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c9f0:	4604      	mov	r4, r0
    c9f2:	460e      	mov	r6, r1
    c9f4:	4615      	mov	r5, r2
	uint8_t *data = *data_buf;
    c9f6:	6817      	ldr	r7, [r2, #0]
	if (!is_device_configured() ||
    c9f8:	f7f5 fb34 	bl	2064 <is_device_configured>
    c9fc:	b900      	cbnz	r0, ca00 <usb_handle_std_interface_req+0x12>
}
    c9fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    ca00:	7920      	ldrb	r0, [r4, #4]
    ca02:	f7f5 fb39 	bl	2078 <is_interface_valid>
	if (!is_device_configured() ||
    ca06:	2800      	cmp	r0, #0
    ca08:	d0f9      	beq.n	c9fe <usb_handle_std_interface_req+0x10>
	if (usb_reqtype_is_to_host(setup)) {
    ca0a:	f994 3000 	ldrsb.w	r3, [r4]
    ca0e:	2b00      	cmp	r3, #0
    ca10:	db04      	blt.n	ca1c <usb_handle_std_interface_req+0x2e>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
    ca12:	7863      	ldrb	r3, [r4, #1]
    ca14:	2b0b      	cmp	r3, #11
    ca16:	d013      	beq.n	ca40 <usb_handle_std_interface_req+0x52>
	return false;
    ca18:	2000      	movs	r0, #0
    ca1a:	e7f0      	b.n	c9fe <usb_handle_std_interface_req+0x10>
		switch (setup->bRequest) {
    ca1c:	7863      	ldrb	r3, [r4, #1]
    ca1e:	b11b      	cbz	r3, ca28 <usb_handle_std_interface_req+0x3a>
    ca20:	2b0a      	cmp	r3, #10
    ca22:	d007      	beq.n	ca34 <usb_handle_std_interface_req+0x46>
    ca24:	2000      	movs	r0, #0
    ca26:	e7ea      	b.n	c9fe <usb_handle_std_interface_req+0x10>
			data[0] = 0U;
    ca28:	2300      	movs	r3, #0
    ca2a:	703b      	strb	r3, [r7, #0]
			data[1] = 0U;
    ca2c:	707b      	strb	r3, [r7, #1]
			*len = 2;
    ca2e:	2302      	movs	r3, #2
    ca30:	6033      	str	r3, [r6, #0]
			return true;
    ca32:	e7e4      	b.n	c9fe <usb_handle_std_interface_req+0x10>
			return usb_get_interface(setup, len, data_buf);
    ca34:	462a      	mov	r2, r5
    ca36:	4631      	mov	r1, r6
    ca38:	4620      	mov	r0, r4
    ca3a:	f7f5 faf5 	bl	2028 <usb_get_interface>
    ca3e:	e7de      	b.n	c9fe <usb_handle_std_interface_req+0x10>
			return usb_set_interface(setup);
    ca40:	4620      	mov	r0, r4
    ca42:	f7f5 fd6f 	bl	2524 <usb_set_interface>
    ca46:	e7da      	b.n	c9fe <usb_handle_std_interface_req+0x10>

0000ca48 <disable_interface_ep>:
{
    ca48:	b508      	push	{r3, lr}
	return usb_dc_ep_disable(ep_data->ep_addr);
    ca4a:	7900      	ldrb	r0, [r0, #4]
    ca4c:	f7f9 f89a 	bl	5b84 <usb_dc_ep_disable>
}
    ca50:	bd08      	pop	{r3, pc}

0000ca52 <usb_get_status_endpoint>:
{
    ca52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ca54:	460e      	mov	r6, r1
	uint8_t ep = setup->wIndex;
    ca56:	7904      	ldrb	r4, [r0, #4]
	uint8_t *data = *data_buf;
    ca58:	6817      	ldr	r7, [r2, #0]
	if (!is_ep_valid(ep)) {
    ca5a:	4620      	mov	r0, r4
    ca5c:	f7f5 fb1e 	bl	209c <is_ep_valid>
    ca60:	4605      	mov	r5, r0
    ca62:	b130      	cbz	r0, ca72 <usb_get_status_endpoint+0x20>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    ca64:	f034 0380 	bics.w	r3, r4, #128	; 0x80
    ca68:	d005      	beq.n	ca76 <usb_get_status_endpoint+0x24>
    ca6a:	f7f5 fafb 	bl	2064 <is_device_configured>
    ca6e:	b910      	cbnz	r0, ca76 <usb_get_status_endpoint+0x24>
	return false;
    ca70:	4605      	mov	r5, r0
}
    ca72:	4628      	mov	r0, r5
    ca74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		usb_dc_ep_is_stalled(ep, &data[0]);
    ca76:	4639      	mov	r1, r7
    ca78:	4620      	mov	r0, r4
    ca7a:	f7f9 f831 	bl	5ae0 <usb_dc_ep_is_stalled>
		data[1] = 0U;
    ca7e:	2300      	movs	r3, #0
    ca80:	707b      	strb	r3, [r7, #1]
		*len = 2;
    ca82:	2302      	movs	r3, #2
    ca84:	6033      	str	r3, [r6, #0]
		return true;
    ca86:	e7f4      	b.n	ca72 <usb_get_status_endpoint+0x20>

0000ca88 <usb_handle_std_endpoint_req>:
{
    ca88:	b508      	push	{r3, lr}
	if (usb_reqtype_is_to_host(setup)) {
    ca8a:	f990 3000 	ldrsb.w	r3, [r0]
    ca8e:	2b00      	cmp	r3, #0
    ca90:	db06      	blt.n	caa0 <usb_handle_std_endpoint_req+0x18>
		switch (setup->bRequest) {
    ca92:	7843      	ldrb	r3, [r0, #1]
    ca94:	2b01      	cmp	r3, #1
    ca96:	d00a      	beq.n	caae <usb_handle_std_endpoint_req+0x26>
    ca98:	2b03      	cmp	r3, #3
    ca9a:	d010      	beq.n	cabe <usb_handle_std_endpoint_req+0x36>
    ca9c:	2000      	movs	r0, #0
    ca9e:	e002      	b.n	caa6 <usb_handle_std_endpoint_req+0x1e>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
    caa0:	7843      	ldrb	r3, [r0, #1]
    caa2:	b10b      	cbz	r3, caa8 <usb_handle_std_endpoint_req+0x20>
	return false;
    caa4:	2000      	movs	r0, #0
}
    caa6:	bd08      	pop	{r3, pc}
			return usb_get_status_endpoint(setup, len, data_buf);
    caa8:	f7ff ffd3 	bl	ca52 <usb_get_status_endpoint>
    caac:	e7fb      	b.n	caa6 <usb_handle_std_endpoint_req+0x1e>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    caae:	8843      	ldrh	r3, [r0, #2]
    cab0:	b10b      	cbz	r3, cab6 <usb_handle_std_endpoint_req+0x2e>
	return false;
    cab2:	2000      	movs	r0, #0
    cab4:	e7f7      	b.n	caa6 <usb_handle_std_endpoint_req+0x1e>
				return usb_halt_endpoint_req(setup, false);
    cab6:	2100      	movs	r1, #0
    cab8:	f7f5 fbfe 	bl	22b8 <usb_halt_endpoint_req>
    cabc:	e7f3      	b.n	caa6 <usb_handle_std_endpoint_req+0x1e>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    cabe:	8843      	ldrh	r3, [r0, #2]
    cac0:	b10b      	cbz	r3, cac6 <usb_handle_std_endpoint_req+0x3e>
	return false;
    cac2:	2000      	movs	r0, #0
    cac4:	e7ef      	b.n	caa6 <usb_handle_std_endpoint_req+0x1e>
				return usb_halt_endpoint_req(setup, true);
    cac6:	2101      	movs	r1, #1
    cac8:	f7f5 fbf6 	bl	22b8 <usb_halt_endpoint_req>
    cacc:	e7eb      	b.n	caa6 <usb_handle_std_endpoint_req+0x1e>

0000cace <usb_write>:
{
    cace:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cad2:	4681      	mov	r9, r0
    cad4:	4688      	mov	r8, r1
    cad6:	4617      	mov	r7, r2
    cad8:	461e      	mov	r6, r3
	int tries = CONFIG_USB_NUMOF_EP_WRITE_RETRIES;
    cada:	2503      	movs	r5, #3
    cadc:	e000      	b.n	cae0 <usb_write+0x12>
	} while (ret == -EAGAIN && tries--);
    cade:	461d      	mov	r5, r3
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    cae0:	4633      	mov	r3, r6
    cae2:	463a      	mov	r2, r7
    cae4:	4641      	mov	r1, r8
    cae6:	4648      	mov	r0, r9
    cae8:	f7f9 f876 	bl	5bd8 <usb_dc_ep_write>
    caec:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
    caee:	f110 0f0b 	cmn.w	r0, #11
    caf2:	d008      	beq.n	cb06 <usb_write+0x38>
	} while (ret == -EAGAIN && tries--);
    caf4:	f114 0f0b 	cmn.w	r4, #11
    caf8:	d102      	bne.n	cb00 <usb_write+0x32>
    cafa:	1e6b      	subs	r3, r5, #1
    cafc:	2d00      	cmp	r5, #0
    cafe:	d1ee      	bne.n	cade <usb_write+0x10>
}
    cb00:	4620      	mov	r0, r4
    cb02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_impl_k_yield();
    cb06:	f7fd ffc5 	bl	aa94 <z_impl_k_yield>
}
    cb0a:	e7f3      	b.n	caf4 <usb_write+0x26>

0000cb0c <ascii7_to_utf16le>:
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    cb0c:	f810 2b02 	ldrb.w	r2, [r0], #2
    cb10:	1ed3      	subs	r3, r2, #3
	int ascii_idx_max = USB_BSTRING_ASCII_IDX_MAX(str_descr->bLength);
    cb12:	0852      	lsrs	r2, r2, #1
    cb14:	3a02      	subs	r2, #2
	for (int i = idx_max; i >= 0; i -= 2) {
    cb16:	2b00      	cmp	r3, #0
    cb18:	db0b      	blt.n	cb32 <ascii7_to_utf16le+0x26>
{
    cb1a:	b410      	push	{r4}
		buf[i] = 0U;
    cb1c:	2100      	movs	r1, #0
    cb1e:	54c1      	strb	r1, [r0, r3]
		buf[i - 1] = buf[ascii_idx_max--];
    cb20:	1e59      	subs	r1, r3, #1
    cb22:	5c84      	ldrb	r4, [r0, r2]
    cb24:	5444      	strb	r4, [r0, r1]
	for (int i = idx_max; i >= 0; i -= 2) {
    cb26:	3b02      	subs	r3, #2
		buf[i - 1] = buf[ascii_idx_max--];
    cb28:	3a01      	subs	r2, #1
	for (int i = idx_max; i >= 0; i -= 2) {
    cb2a:	2b00      	cmp	r3, #0
    cb2c:	daf6      	bge.n	cb1c <ascii7_to_utf16le+0x10>
}
    cb2e:	bc10      	pop	{r4}
    cb30:	4770      	bx	lr
    cb32:	4770      	bx	lr

0000cb34 <usb_validate_ep_cfg_data>:
{
    cb34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    cb38:	b083      	sub	sp, #12
    cb3a:	4605      	mov	r5, r0
    cb3c:	4689      	mov	r9, r1
    cb3e:	4690      	mov	r8, r2
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    cb40:	2700      	movs	r7, #0
    cb42:	e04a      	b.n	cbda <usb_validate_ep_cfg_data+0xa6>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    cb44:	f8d8 2000 	ldr.w	r2, [r8]
    cb48:	f104 0110 	add.w	r1, r4, #16
    cb4c:	2301      	movs	r3, #1
    cb4e:	408b      	lsls	r3, r1
    cb50:	421a      	tst	r2, r3
    cb52:	d108      	bne.n	cb66 <usb_validate_ep_cfg_data+0x32>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    cb54:	f064 037f 	orn	r3, r4, #127	; 0x7f
    cb58:	f88d 3000 	strb.w	r3, [sp]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    cb5c:	4668      	mov	r0, sp
    cb5e:	f7f8 fed1 	bl	5904 <usb_dc_ep_check_cap>
    cb62:	4603      	mov	r3, r0
    cb64:	b1d0      	cbz	r0, cb9c <usb_validate_ep_cfg_data+0x68>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    cb66:	3401      	adds	r4, #1
    cb68:	b2e4      	uxtb	r4, r4
    cb6a:	2c0f      	cmp	r4, #15
    cb6c:	d834      	bhi.n	cbd8 <usb_validate_ep_cfg_data+0xa4>
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    cb6e:	78eb      	ldrb	r3, [r5, #3]
    cb70:	f003 0303 	and.w	r3, r3, #3
    cb74:	f88d 3004 	strb.w	r3, [sp, #4]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    cb78:	88ab      	ldrh	r3, [r5, #4]
    cb7a:	f8ad 3002 	strh.w	r3, [sp, #2]
			ep_cfg.ep_addr = ep_descr->bEndpointAddress;
    cb7e:	78ab      	ldrb	r3, [r5, #2]
    cb80:	f88d 3000 	strb.w	r3, [sp]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    cb84:	f013 0f80 	tst.w	r3, #128	; 0x80
    cb88:	d1dc      	bne.n	cb44 <usb_validate_ep_cfg_data+0x10>
				if ((*requested_ep & (1U << (idx)))) {
    cb8a:	f8d8 2000 	ldr.w	r2, [r8]
    cb8e:	2301      	movs	r3, #1
    cb90:	40a3      	lsls	r3, r4
    cb92:	421a      	tst	r2, r3
    cb94:	d1e7      	bne.n	cb66 <usb_validate_ep_cfg_data+0x32>
				ep_cfg.ep_addr = idx;
    cb96:	f88d 4000 	strb.w	r4, [sp]
    cb9a:	e7df      	b.n	cb5c <usb_validate_ep_cfg_data+0x28>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    cb9c:	f89d 2000 	ldrb.w	r2, [sp]
    cba0:	70aa      	strb	r2, [r5, #2]
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    cba2:	7132      	strb	r2, [r6, #4]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    cba4:	f012 0f80 	tst.w	r2, #128	; 0x80
    cba8:	d10b      	bne.n	cbc2 <usb_validate_ep_cfg_data+0x8e>
					*requested_ep |= (1U << idx);
    cbaa:	2201      	movs	r2, #1
    cbac:	fa02 f404 	lsl.w	r4, r2, r4
    cbb0:	f8d8 2000 	ldr.w	r2, [r8]
    cbb4:	4322      	orrs	r2, r4
    cbb6:	f8c8 2000 	str.w	r2, [r8]
}
    cbba:	4618      	mov	r0, r3
    cbbc:	b003      	add	sp, #12
    cbbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					*requested_ep |= (1U << (idx + 16U));
    cbc2:	f104 0110 	add.w	r1, r4, #16
    cbc6:	2201      	movs	r2, #1
    cbc8:	fa02 f101 	lsl.w	r1, r2, r1
    cbcc:	f8d8 2000 	ldr.w	r2, [r8]
    cbd0:	430a      	orrs	r2, r1
    cbd2:	f8c8 2000 	str.w	r2, [r8]
    cbd6:	e7f0      	b.n	cbba <usb_validate_ep_cfg_data+0x86>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    cbd8:	3701      	adds	r7, #1
    cbda:	f899 301c 	ldrb.w	r3, [r9, #28]
    cbde:	429f      	cmp	r7, r3
    cbe0:	d209      	bcs.n	cbf6 <usb_validate_ep_cfg_data+0xc2>
		struct usb_ep_cfg_data *ep_data = cfg_data->endpoint;
    cbe2:	f8d9 6020 	ldr.w	r6, [r9, #32]
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    cbe6:	78aa      	ldrb	r2, [r5, #2]
    cbe8:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
    cbec:	7933      	ldrb	r3, [r6, #4]
    cbee:	429a      	cmp	r2, r3
    cbf0:	d1f2      	bne.n	cbd8 <usb_validate_ep_cfg_data+0xa4>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    cbf2:	2401      	movs	r4, #1
    cbf4:	e7b9      	b.n	cb6a <usb_validate_ep_cfg_data+0x36>
	return -1;
    cbf6:	f04f 33ff 	mov.w	r3, #4294967295
    cbfa:	e7de      	b.n	cbba <usb_validate_ep_cfg_data+0x86>

0000cbfc <usb_get_dev_data_by_cfg>:
	return list->head;
    cbfc:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    cbfe:	b110      	cbz	r0, cc06 <usb_get_dev_data_by_cfg+0xa>
    cc00:	3804      	subs	r0, #4
    cc02:	e000      	b.n	cc06 <usb_get_dev_data_by_cfg+0xa>
    cc04:	3804      	subs	r0, #4
    cc06:	b140      	cbz	r0, cc1a <usb_get_dev_data_by_cfg+0x1e>
		const struct device *dev = dev_data->dev;
    cc08:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg_cur = dev->config;
    cc0a:	685b      	ldr	r3, [r3, #4]

		if (cfg_cur == cfg) {
    cc0c:	428b      	cmp	r3, r1
    cc0e:	d004      	beq.n	cc1a <usb_get_dev_data_by_cfg+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
    cc10:	1d03      	adds	r3, r0, #4
    cc12:	d003      	beq.n	cc1c <usb_get_dev_data_by_cfg+0x20>
	return node->next;
    cc14:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    cc16:	2800      	cmp	r0, #0
    cc18:	d1f4      	bne.n	cc04 <usb_get_dev_data_by_cfg+0x8>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
    cc1a:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    cc1c:	4618      	mov	r0, r3
    cc1e:	e7f2      	b.n	cc06 <usb_get_dev_data_by_cfg+0xa>

0000cc20 <usb_get_dev_data_by_iface>:
	return list->head;
    cc20:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    cc22:	b110      	cbz	r0, cc2a <usb_get_dev_data_by_iface+0xa>
    cc24:	3804      	subs	r0, #4
    cc26:	e000      	b.n	cc2a <usb_get_dev_data_by_iface+0xa>
    cc28:	3804      	subs	r0, #4
    cc2a:	b150      	cbz	r0, cc42 <usb_get_dev_data_by_iface+0x22>
		const struct device *dev = dev_data->dev;
    cc2c:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg = dev->config;
    cc2e:	685b      	ldr	r3, [r3, #4]
		const struct usb_if_descriptor *if_desc =
    cc30:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
    cc32:	789b      	ldrb	r3, [r3, #2]
    cc34:	428b      	cmp	r3, r1
    cc36:	d004      	beq.n	cc42 <usb_get_dev_data_by_iface+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
    cc38:	1d03      	adds	r3, r0, #4
    cc3a:	d003      	beq.n	cc44 <usb_get_dev_data_by_iface+0x24>
	return node->next;
    cc3c:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    cc3e:	2800      	cmp	r0, #0
    cc40:	d1f2      	bne.n	cc28 <usb_get_dev_data_by_iface+0x8>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
    cc42:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    cc44:	4618      	mov	r0, r3
    cc46:	e7f0      	b.n	cc2a <usb_get_dev_data_by_iface+0xa>

0000cc48 <usb_get_dev_data_by_ep>:
	return list->head;
    cc48:	6800      	ldr	r0, [r0, #0]

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    cc4a:	b100      	cbz	r0, cc4e <usb_get_dev_data_by_ep+0x6>
    cc4c:	3804      	subs	r0, #4
    cc4e:	b1d0      	cbz	r0, cc86 <usb_get_dev_data_by_ep+0x3e>
{
    cc50:	b430      	push	{r4, r5}
    cc52:	e005      	b.n	cc60 <usb_get_dev_data_by_ep+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
    cc54:	1d03      	adds	r3, r0, #4
    cc56:	d012      	beq.n	cc7e <usb_get_dev_data_by_ep+0x36>
	return node->next;
    cc58:	6840      	ldr	r0, [r0, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    cc5a:	b190      	cbz	r0, cc82 <usb_get_dev_data_by_ep+0x3a>
    cc5c:	3804      	subs	r0, #4
    cc5e:	b180      	cbz	r0, cc82 <usb_get_dev_data_by_ep+0x3a>
		const struct device *dev = dev_data->dev;
    cc60:	6803      	ldr	r3, [r0, #0]
		const struct usb_cfg_data *cfg = dev->config;
    cc62:	685c      	ldr	r4, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
    cc64:	6a25      	ldr	r5, [r4, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    cc66:	2300      	movs	r3, #0
    cc68:	7f22      	ldrb	r2, [r4, #28]
    cc6a:	429a      	cmp	r2, r3
    cc6c:	d9f2      	bls.n	cc54 <usb_get_dev_data_by_ep+0xc>
			if (ep_data[i].ep_addr == ep) {
    cc6e:	eb05 02c3 	add.w	r2, r5, r3, lsl #3
    cc72:	7912      	ldrb	r2, [r2, #4]
    cc74:	428a      	cmp	r2, r1
    cc76:	d004      	beq.n	cc82 <usb_get_dev_data_by_ep+0x3a>
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    cc78:	3301      	adds	r3, #1
    cc7a:	b2db      	uxtb	r3, r3
    cc7c:	e7f4      	b.n	cc68 <usb_get_dev_data_by_ep+0x20>
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    cc7e:	4618      	mov	r0, r3
    cc80:	e7ed      	b.n	cc5e <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
    cc82:	bc30      	pop	{r4, r5}
    cc84:	4770      	bx	lr
    cc86:	4770      	bx	lr

0000cc88 <usb_transfer_is_busy>:
{
    cc88:	b508      	push	{r3, lr}
	struct usb_transfer_data *trans = usb_ep_get_transfer(ep);
    cc8a:	f7f6 f835 	bl	2cf8 <usb_ep_get_transfer>
	if (trans && trans->status == -EBUSY) {
    cc8e:	b128      	cbz	r0, cc9c <usb_transfer_is_busy+0x14>
    cc90:	6843      	ldr	r3, [r0, #4]
    cc92:	f113 0f10 	cmn.w	r3, #16
    cc96:	d003      	beq.n	cca0 <usb_transfer_is_busy+0x18>
	return false;
    cc98:	2000      	movs	r0, #0
}
    cc9a:	bd08      	pop	{r3, pc}
	return false;
    cc9c:	2000      	movs	r0, #0
    cc9e:	e7fc      	b.n	cc9a <usb_transfer_is_busy+0x12>
		return true;
    cca0:	2001      	movs	r0, #1
    cca2:	e7fa      	b.n	cc9a <usb_transfer_is_busy+0x12>

0000cca4 <cdc_interface_config>:
	desc->if0.bInterfaceNumber = bInterfaceNumber;
    cca4:	7081      	strb	r1, [r0, #2]
	desc->if0_union.bControlInterface = bInterfaceNumber;
    cca6:	7681      	strb	r1, [r0, #26]
	desc->if1.bInterfaceNumber = bInterfaceNumber + 1;
    cca8:	1c4b      	adds	r3, r1, #1
    ccaa:	b2db      	uxtb	r3, r3
    ccac:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	desc->if0_union.bSubordinateInterface0 = bInterfaceNumber + 1;
    ccb0:	76c3      	strb	r3, [r0, #27]
	desc->iad_cdc.bFirstInterface = bInterfaceNumber;
    ccb2:	f800 1c06 	strb.w	r1, [r0, #-6]
}
    ccb6:	4770      	bx	lr

0000ccb8 <cdc_acm_irq_callback_work_handler>:
{
    ccb8:	b508      	push	{r3, lr}
	dev_data->cb(dev_data->common.dev, dev_data->cb_data);
    ccba:	f850 3c08 	ldr.w	r3, [r0, #-8]
    ccbe:	f850 1c04 	ldr.w	r1, [r0, #-4]
    ccc2:	6f80      	ldr	r0, [r0, #120]	; 0x78
    ccc4:	4798      	blx	r3
}
    ccc6:	bd08      	pop	{r3, pc}

0000ccc8 <cdc_acm_irq_tx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    ccc8:	6903      	ldr	r3, [r0, #16]
	dev_data->tx_irq_ena = false;
    ccca:	2200      	movs	r2, #0
    cccc:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
}
    ccd0:	4770      	bx	lr

0000ccd2 <cdc_acm_irq_tx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    ccd2:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_irq_ena && dev_data->tx_ready) {
    ccd4:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    ccd8:	b122      	cbz	r2, cce4 <cdc_acm_irq_tx_ready+0x12>
    ccda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    ccde:	b91b      	cbnz	r3, cce8 <cdc_acm_irq_tx_ready+0x16>
	return 0;
    cce0:	2000      	movs	r0, #0
    cce2:	4770      	bx	lr
    cce4:	2000      	movs	r0, #0
    cce6:	4770      	bx	lr
		return 1;
    cce8:	2001      	movs	r0, #1
}
    ccea:	4770      	bx	lr

0000ccec <cdc_acm_irq_rx_disable>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    ccec:	6903      	ldr	r3, [r0, #16]
	dev_data->rx_irq_ena = false;
    ccee:	2200      	movs	r2, #0
    ccf0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
}
    ccf4:	4770      	bx	lr

0000ccf6 <cdc_acm_irq_rx_ready>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    ccf6:	6903      	ldr	r3, [r0, #16]
	if (dev_data->rx_ready) {
    ccf8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
    ccfc:	b90b      	cbnz	r3, cd02 <cdc_acm_irq_rx_ready+0xc>
	return 0;
    ccfe:	2000      	movs	r0, #0
    cd00:	4770      	bx	lr
		return 1;
    cd02:	2001      	movs	r0, #1
}
    cd04:	4770      	bx	lr

0000cd06 <cdc_acm_irq_is_pending>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    cd06:	6903      	ldr	r3, [r0, #16]
	if (dev_data->tx_ready && dev_data->tx_irq_ena) {
    cd08:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    cd0c:	b112      	cbz	r2, cd14 <cdc_acm_irq_is_pending+0xe>
    cd0e:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
    cd12:	b93a      	cbnz	r2, cd24 <cdc_acm_irq_is_pending+0x1e>
	} else if (dev_data->rx_ready && dev_data->rx_irq_ena) {
    cd14:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    cd18:	b132      	cbz	r2, cd28 <cdc_acm_irq_is_pending+0x22>
    cd1a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
    cd1e:	b92b      	cbnz	r3, cd2c <cdc_acm_irq_is_pending+0x26>
		return 0;
    cd20:	2000      	movs	r0, #0
    cd22:	4770      	bx	lr
		return 1;
    cd24:	2001      	movs	r0, #1
    cd26:	4770      	bx	lr
		return 0;
    cd28:	2000      	movs	r0, #0
    cd2a:	4770      	bx	lr
		return 1;
    cd2c:	2001      	movs	r0, #1
}
    cd2e:	4770      	bx	lr

0000cd30 <cdc_acm_irq_update>:
}
    cd30:	2001      	movs	r0, #1
    cd32:	4770      	bx	lr

0000cd34 <cdc_acm_irq_callback_set>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    cd34:	6903      	ldr	r3, [r0, #16]
	dev_data->cb = cb;
    cd36:	6019      	str	r1, [r3, #0]
	dev_data->cb_data = cb_data;
    cd38:	605a      	str	r2, [r3, #4]
}
    cd3a:	4770      	bx	lr

0000cd3c <cdc_acm_baudrate_set>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    cd3c:	6903      	ldr	r3, [r0, #16]
	dev_data->line_coding.dwDTERate = sys_cpu_to_le32(baudrate);
    cd3e:	6759      	str	r1, [r3, #116]	; 0x74
}
    cd40:	4770      	bx	lr

0000cd42 <cdc_acm_line_ctrl_get>:
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    cd42:	6903      	ldr	r3, [r0, #16]
	switch (ctrl) {
    cd44:	2902      	cmp	r1, #2
    cd46:	d00a      	beq.n	cd5e <cdc_acm_line_ctrl_get+0x1c>
    cd48:	2904      	cmp	r1, #4
    cd4a:	d00f      	beq.n	cd6c <cdc_acm_line_ctrl_get+0x2a>
    cd4c:	2901      	cmp	r1, #1
    cd4e:	d002      	beq.n	cd56 <cdc_acm_line_ctrl_get+0x14>
    cd50:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    cd54:	4770      	bx	lr
		*val = sys_le32_to_cpu(dev_data->line_coding.dwDTERate);
    cd56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
    cd58:	6013      	str	r3, [r2, #0]
		return 0;
    cd5a:	2000      	movs	r0, #0
    cd5c:	4770      	bx	lr
		*val = (dev_data->line_state &
    cd5e:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
			SET_CONTROL_LINE_STATE_RTS) ? 1 : 0;
    cd62:	f3c3 0340 	ubfx	r3, r3, #1, #1
		*val = (dev_data->line_state &
    cd66:	6013      	str	r3, [r2, #0]
		return 0;
    cd68:	2000      	movs	r0, #0
    cd6a:	4770      	bx	lr
		*val = (dev_data->line_state &
    cd6c:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
			SET_CONTROL_LINE_STATE_DTR) ? 1 : 0;
    cd70:	f003 0301 	and.w	r3, r3, #1
		*val = (dev_data->line_state &
    cd74:	6013      	str	r3, [r2, #0]
		return 0;
    cd76:	2000      	movs	r0, #0
    cd78:	4770      	bx	lr

0000cd7a <cdc_acm_line_ctrl_set>:
{
    cd7a:	b510      	push	{r4, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    cd7c:	6904      	ldr	r4, [r0, #16]
	switch (ctrl) {
    cd7e:	2940      	cmp	r1, #64	; 0x40
    cd80:	f000 8081 	beq.w	ce86 <cdc_acm_line_ctrl_set+0x10c>
    cd84:	d81b      	bhi.n	cdbe <cdc_acm_line_ctrl_set+0x44>
    cd86:	2920      	cmp	r1, #32
    cd88:	f200 809f 	bhi.w	ceca <cdc_acm_line_ctrl_set+0x150>
    cd8c:	2900      	cmp	r1, #0
    cd8e:	f000 809f 	beq.w	ced0 <cdc_acm_line_ctrl_set+0x156>
    cd92:	1e4b      	subs	r3, r1, #1
    cd94:	2b1f      	cmp	r3, #31
    cd96:	f200 809e 	bhi.w	ced6 <cdc_acm_line_ctrl_set+0x15c>
    cd9a:	e8df f003 	tbb	[pc, r3]
    cd9e:	9c3d      	.short	0x9c3d
    cda0:	9c9c9c9c 	.word	0x9c9c9c9c
    cda4:	9c9c429c 	.word	0x9c9c429c
    cda8:	9c9c9c9c 	.word	0x9c9c9c9c
    cdac:	9c9c529c 	.word	0x9c9c529c
    cdb0:	9c9c9c9c 	.word	0x9c9c9c9c
    cdb4:	9c9c9c9c 	.word	0x9c9c9c9c
    cdb8:	9c9c9c9c 	.word	0x9c9c9c9c
    cdbc:	639c      	.short	0x639c
    cdbe:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
    cdc2:	d071      	beq.n	cea8 <cdc_acm_line_ctrl_set+0x12e>
    cdc4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    cdc8:	d110      	bne.n	cdec <cdc_acm_line_ctrl_set+0x72>
		dev_data->serial_state &= ~SERIAL_STATE_OVER_RUN;
    cdca:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    cdce:	f003 03bf 	and.w	r3, r3, #191	; 0xbf
    cdd2:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
    cdd6:	b11a      	cbz	r2, cde0 <cdc_acm_line_ctrl_set+0x66>
			dev_data->serial_state |= SERIAL_STATE_OVER_RUN;
    cdd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    cddc:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    cde0:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
    cde4:	f7f6 fbc6 	bl	3574 <cdc_acm_send_notification>
		return 0;
    cde8:	2000      	movs	r0, #0
    cdea:	e019      	b.n	ce20 <cdc_acm_line_ctrl_set+0xa6>
	switch (ctrl) {
    cdec:	2980      	cmp	r1, #128	; 0x80
    cdee:	d110      	bne.n	ce12 <cdc_acm_line_ctrl_set+0x98>
		dev_data->serial_state &= ~SERIAL_STATE_FRAMING;
    cdf0:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    cdf4:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    cdf8:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
    cdfc:	b11a      	cbz	r2, ce06 <cdc_acm_line_ctrl_set+0x8c>
			dev_data->serial_state |= SERIAL_STATE_FRAMING;
    cdfe:	f043 0310 	orr.w	r3, r3, #16
    ce02:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    ce06:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
    ce0a:	f7f6 fbb3 	bl	3574 <cdc_acm_send_notification>
		return 0;
    ce0e:	2000      	movs	r0, #0
    ce10:	e006      	b.n	ce20 <cdc_acm_line_ctrl_set+0xa6>
	switch (ctrl) {
    ce12:	f06f 0012 	mvn.w	r0, #18
    ce16:	e003      	b.n	ce20 <cdc_acm_line_ctrl_set+0xa6>
		cdc_acm_baudrate_set(dev, val);
    ce18:	4611      	mov	r1, r2
    ce1a:	f7ff ff8f 	bl	cd3c <cdc_acm_baudrate_set>
		return 0;
    ce1e:	2000      	movs	r0, #0
}
    ce20:	bd10      	pop	{r4, pc}
		dev_data->serial_state &= ~SERIAL_STATE_RX_CARRIER;
    ce22:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    ce26:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    ce2a:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
    ce2e:	b11a      	cbz	r2, ce38 <cdc_acm_line_ctrl_set+0xbe>
			dev_data->serial_state |= SERIAL_STATE_RX_CARRIER;
    ce30:	f043 0301 	orr.w	r3, r3, #1
    ce34:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, SERIAL_STATE_RX_CARRIER);
    ce38:	2101      	movs	r1, #1
    ce3a:	f7f6 fb9b 	bl	3574 <cdc_acm_send_notification>
		return 0;
    ce3e:	2000      	movs	r0, #0
    ce40:	e7ee      	b.n	ce20 <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_TX_CARRIER;
    ce42:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    ce46:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    ce4a:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
    ce4e:	b11a      	cbz	r2, ce58 <cdc_acm_line_ctrl_set+0xde>
			dev_data->serial_state |= SERIAL_STATE_TX_CARRIER;
    ce50:	f043 0302 	orr.w	r3, r3, #2
    ce54:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    ce58:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
    ce5c:	f7f6 fb8a 	bl	3574 <cdc_acm_send_notification>
		return 0;
    ce60:	2000      	movs	r0, #0
    ce62:	e7dd      	b.n	ce20 <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_BREAK;
    ce64:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    ce68:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    ce6c:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
    ce70:	b11a      	cbz	r2, ce7a <cdc_acm_line_ctrl_set+0x100>
			dev_data->serial_state |= SERIAL_STATE_BREAK;
    ce72:	f043 0304 	orr.w	r3, r3, #4
    ce76:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    ce7a:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
    ce7e:	f7f6 fb79 	bl	3574 <cdc_acm_send_notification>
		return 0;
    ce82:	2000      	movs	r0, #0
    ce84:	e7cc      	b.n	ce20 <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_RING_SIGNAL;
    ce86:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    ce8a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
    ce8e:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
    ce92:	b11a      	cbz	r2, ce9c <cdc_acm_line_ctrl_set+0x122>
			dev_data->serial_state |= SERIAL_STATE_RING_SIGNAL;
    ce94:	f043 0308 	orr.w	r3, r3, #8
    ce98:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    ce9c:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
    cea0:	f7f6 fb68 	bl	3574 <cdc_acm_send_notification>
		return 0;
    cea4:	2000      	movs	r0, #0
    cea6:	e7bb      	b.n	ce20 <cdc_acm_line_ctrl_set+0xa6>
		dev_data->serial_state &= ~SERIAL_STATE_PARITY;
    cea8:	f894 307c 	ldrb.w	r3, [r4, #124]	; 0x7c
    ceac:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    ceb0:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		if (val) {
    ceb4:	b11a      	cbz	r2, cebe <cdc_acm_line_ctrl_set+0x144>
			dev_data->serial_state |= SERIAL_STATE_PARITY;
    ceb6:	f043 0320 	orr.w	r3, r3, #32
    ceba:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
		cdc_acm_send_notification(dev, dev_data->serial_state);
    cebe:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
    cec2:	f7f6 fb57 	bl	3574 <cdc_acm_send_notification>
		return 0;
    cec6:	2000      	movs	r0, #0
    cec8:	e7aa      	b.n	ce20 <cdc_acm_line_ctrl_set+0xa6>
	switch (ctrl) {
    ceca:	f06f 0012 	mvn.w	r0, #18
    cece:	e7a7      	b.n	ce20 <cdc_acm_line_ctrl_set+0xa6>
    ced0:	f06f 0012 	mvn.w	r0, #18
    ced4:	e7a4      	b.n	ce20 <cdc_acm_line_ctrl_set+0xa6>
    ced6:	f06f 0012 	mvn.w	r0, #18
    ceda:	e7a1      	b.n	ce20 <cdc_acm_line_ctrl_set+0xa6>

0000cedc <cdc_acm_fifo_read>:
{
    cedc:	b538      	push	{r3, r4, r5, lr}
	struct cdc_acm_dev_data_t * const dev_data = DEV_DATA(dev);
    cede:	6905      	ldr	r5, [r0, #16]
	len = ring_buf_get(dev_data->rx_ringbuf, rx_data, size);
    cee0:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    cee2:	f7ff fa4d 	bl	c380 <ring_buf_get>
    cee6:	4604      	mov	r4, r0
	if (ring_buf_is_empty(dev_data->rx_ringbuf)) {
    cee8:	6ee8      	ldr	r0, [r5, #108]	; 0x6c
    ceea:	f7ff f97b 	bl	c1e4 <ring_buf_is_empty>
    ceee:	b110      	cbz	r0, cef6 <cdc_acm_fifo_read+0x1a>
		dev_data->rx_ready = false;
    cef0:	2300      	movs	r3, #0
    cef2:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
}
    cef6:	4620      	mov	r0, r4
    cef8:	bd38      	pop	{r3, r4, r5, pc}

0000cefa <cdc_acm_poll_in>:
{
    cefa:	b508      	push	{r3, lr}
	int ret = cdc_acm_fifo_read(dev, c, 1);
    cefc:	2201      	movs	r2, #1
    cefe:	f7ff ffed 	bl	cedc <cdc_acm_fifo_read>
	return ret == 1 ? 0 : -1;
    cf02:	2801      	cmp	r0, #1
    cf04:	d101      	bne.n	cf0a <cdc_acm_poll_in+0x10>
    cf06:	2000      	movs	r0, #0
}
    cf08:	bd08      	pop	{r3, pc}
	return ret == 1 ? 0 : -1;
    cf0a:	f04f 30ff 	mov.w	r0, #4294967295
    cf0e:	e7fb      	b.n	cf08 <cdc_acm_poll_in+0xe>

0000cf10 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    cf10:	2200      	movs	r2, #0
    cf12:	6002      	str	r2, [r0, #0]
    cf14:	6042      	str	r2, [r0, #4]
    cf16:	6082      	str	r2, [r0, #8]
}
    cf18:	4770      	bx	lr

0000cf1a <abort_function>:
{
    cf1a:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    cf1c:	2000      	movs	r0, #0
    cf1e:	f7f4 f907 	bl	1130 <sys_reboot>

0000cf22 <z_arm_fatal_error>:

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    cf22:	b538      	push	{r3, r4, r5, lr}
    cf24:	4604      	mov	r4, r0

	if (esf != NULL) {
    cf26:	460d      	mov	r5, r1
    cf28:	b111      	cbz	r1, cf30 <z_arm_fatal_error+0xe>
		esf_dump(esf);
    cf2a:	4608      	mov	r0, r1
    cf2c:	f7f6 fdd8 	bl	3ae0 <esf_dump>
	}
	z_fatal_error(reason, esf);
    cf30:	4629      	mov	r1, r5
    cf32:	4620      	mov	r0, r4
    cf34:	f7fc fd4a 	bl	99cc <z_fatal_error>
}
    cf38:	bd38      	pop	{r3, r4, r5, pc}

0000cf3a <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    cf3a:	b508      	push	{r3, lr}
    cf3c:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    cf3e:	6800      	ldr	r0, [r0, #0]
    cf40:	f7ff ffef 	bl	cf22 <z_arm_fatal_error>

	memcpy(&esf_copy, esf, offsetof(z_arch_esf_t, extra_info));
	esf_copy.extra_info = (struct __extra_esf_info) { 0 };
	z_arm_fatal_error(reason, &esf_copy);
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
}
    cf44:	bd08      	pop	{r3, pc}

0000cf46 <z_irq_spurious>:
 * called.
 *
 * @return N/A
 */
void z_irq_spurious(const void *unused)
{
    cf46:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    cf48:	2100      	movs	r1, #0
    cf4a:	2001      	movs	r0, #1
    cf4c:	f7ff ffe9 	bl	cf22 <z_arm_fatal_error>
}
    cf50:	bd08      	pop	{r3, pc}

0000cf52 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    cf52:	b508      	push	{r3, lr}
	handler();
    cf54:	f7f6 fe5a 	bl	3c0c <z_SysNmiOnReset>
	z_arm_int_exit();
    cf58:	f7f6 ff56 	bl	3e08 <z_arm_exc_exit>
}
    cf5c:	bd08      	pop	{r3, pc}

0000cf5e <memory_fault_recoverable>:
}
    cf5e:	2000      	movs	r0, #0
    cf60:	4770      	bx	lr

0000cf62 <fault_handle>:
{
    cf62:	b508      	push	{r3, lr}
	*recoverable = false;
    cf64:	2300      	movs	r3, #0
    cf66:	7013      	strb	r3, [r2, #0]
	switch (fault) {
    cf68:	1ecb      	subs	r3, r1, #3
    cf6a:	2b09      	cmp	r3, #9
    cf6c:	d81a      	bhi.n	cfa4 <fault_handle+0x42>
    cf6e:	e8df f003 	tbb	[pc, r3]
    cf72:	0905      	.short	0x0905
    cf74:	1919110d 	.word	0x1919110d
    cf78:	14191919 	.word	0x14191919
		reason = hard_fault(esf, recoverable);
    cf7c:	4611      	mov	r1, r2
    cf7e:	f7f7 f9d7 	bl	4330 <hard_fault>
}
    cf82:	bd08      	pop	{r3, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    cf84:	2100      	movs	r1, #0
    cf86:	f7f7 f8f1 	bl	416c <mem_manage_fault>
		break;
    cf8a:	e7fa      	b.n	cf82 <fault_handle+0x20>
		reason = bus_fault(esf, 0, recoverable);
    cf8c:	2100      	movs	r1, #0
    cf8e:	f7f7 f815 	bl	3fbc <bus_fault>
		break;
    cf92:	e7f6      	b.n	cf82 <fault_handle+0x20>
		reason = usage_fault(esf);
    cf94:	f7f6 ff46 	bl	3e24 <usage_fault>
		break;
    cf98:	e7f3      	b.n	cf82 <fault_handle+0x20>
		debug_monitor(esf, recoverable);
    cf9a:	4611      	mov	r1, r2
    cf9c:	f7f6 fff4 	bl	3f88 <debug_monitor>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    cfa0:	2000      	movs	r0, #0
		break;
    cfa2:	e7ee      	b.n	cf82 <fault_handle+0x20>
		reserved_exception(esf, fault);
    cfa4:	f7f7 fa6a 	bl	447c <reserved_exception>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    cfa8:	2000      	movs	r0, #0
	return reason;
    cfaa:	e7ea      	b.n	cf82 <fault_handle+0x20>

0000cfac <mpu_partition_is_valid>:
		((part->size & (part->size - 1U)) == 0U)
    cfac:	6843      	ldr	r3, [r0, #4]
    cfae:	1e5a      	subs	r2, r3, #1
		&&
    cfb0:	4213      	tst	r3, r2
    cfb2:	d106      	bne.n	cfc2 <mpu_partition_is_valid+0x16>
		&&
    cfb4:	2b1f      	cmp	r3, #31
    cfb6:	d906      	bls.n	cfc6 <mpu_partition_is_valid+0x1a>
		((part->start & (part->size - 1U)) == 0U);
    cfb8:	6803      	ldr	r3, [r0, #0]
		&&
    cfba:	421a      	tst	r2, r3
    cfbc:	d005      	beq.n	cfca <mpu_partition_is_valid+0x1e>
    cfbe:	2000      	movs	r0, #0
    cfc0:	4770      	bx	lr
    cfc2:	2000      	movs	r0, #0
    cfc4:	4770      	bx	lr
    cfc6:	2000      	movs	r0, #0
    cfc8:	4770      	bx	lr
    cfca:	2001      	movs	r0, #1
}
    cfcc:	4770      	bx	lr

0000cfce <mpu_configure_region>:
{
    cfce:	b500      	push	{lr}
    cfd0:	b085      	sub	sp, #20
	region_conf.base = new_region->start;
    cfd2:	680b      	ldr	r3, [r1, #0]
    cfd4:	9301      	str	r3, [sp, #4]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    cfd6:	684b      	ldr	r3, [r1, #4]
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    cfd8:	688a      	ldr	r2, [r1, #8]
	if (size <= 32U) {
    cfda:	2b20      	cmp	r3, #32
    cfdc:	d912      	bls.n	d004 <mpu_configure_region+0x36>
	if (size > (1UL << 31)) {
    cfde:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    cfe2:	d811      	bhi.n	d008 <mpu_configure_region+0x3a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    cfe4:	3b01      	subs	r3, #1
    cfe6:	fab3 f383 	clz	r3, r3
    cfea:	f1c3 031f 	rsb	r3, r3, #31
    cfee:	005b      	lsls	r3, r3, #1
    cff0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    cff4:	4313      	orrs	r3, r2
    cff6:	9303      	str	r3, [sp, #12]
	return region_allocate_and_init(index,
    cff8:	a901      	add	r1, sp, #4
    cffa:	f7f7 fb9b 	bl	4734 <region_allocate_and_init>
}
    cffe:	b005      	add	sp, #20
    d000:	f85d fb04 	ldr.w	pc, [sp], #4
		return REGION_32B;
    d004:	2308      	movs	r3, #8
    d006:	e7f5      	b.n	cff4 <mpu_configure_region+0x26>
		return REGION_4G;
    d008:	233e      	movs	r3, #62	; 0x3e
    d00a:	e7f3      	b.n	cff4 <mpu_configure_region+0x26>

0000d00c <arm_core_mpu_configure_static_mpu_regions>:
{
    d00c:	b508      	push	{r3, lr}
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    d00e:	f7f7 fbf3 	bl	47f8 <mpu_configure_static_mpu_regions>
}
    d012:	bd08      	pop	{r3, pc}

0000d014 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    d014:	b508      	push	{r3, lr}
	if (mpu_configure_dynamic_mpu_regions(dynamic_regions, regions_num)
    d016:	f7f7 fbf9 	bl	480c <mpu_configure_dynamic_mpu_regions>
}
    d01a:	bd08      	pop	{r3, pc}

0000d01c <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    d01c:	4602      	mov	r2, r0
    d01e:	780b      	ldrb	r3, [r1, #0]
    d020:	b11b      	cbz	r3, d02a <strcpy+0xe>
		*d = *s;
    d022:	f802 3b01 	strb.w	r3, [r2], #1
		d++;
		s++;
    d026:	3101      	adds	r1, #1
    d028:	e7f9      	b.n	d01e <strcpy+0x2>
	}

	*d = '\0';
    d02a:	7013      	strb	r3, [r2, #0]

	return dest;
}
    d02c:	4770      	bx	lr

0000d02e <strncpy>:

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
	char *dest = d;

	while ((n > 0) && *s != '\0') {
    d02e:	4603      	mov	r3, r0
    d030:	b1a2      	cbz	r2, d05c <strncpy+0x2e>
{
    d032:	b410      	push	{r4}
	while ((n > 0) && *s != '\0') {
    d034:	780c      	ldrb	r4, [r1, #0]
    d036:	b12c      	cbz	r4, d044 <strncpy+0x16>
		*d = *s;
    d038:	f803 4b01 	strb.w	r4, [r3], #1
		s++;
    d03c:	3101      	adds	r1, #1
		d++;
		n--;
    d03e:	3a01      	subs	r2, #1
	while ((n > 0) && *s != '\0') {
    d040:	2a00      	cmp	r2, #0
    d042:	d1f7      	bne.n	d034 <strncpy+0x6>
	}

	while (n > 0) {
    d044:	b122      	cbz	r2, d050 <strncpy+0x22>
		*d = '\0';
    d046:	2100      	movs	r1, #0
    d048:	f803 1b01 	strb.w	r1, [r3], #1
		d++;
		n--;
    d04c:	3a01      	subs	r2, #1
    d04e:	e7f9      	b.n	d044 <strncpy+0x16>
	}

	return dest;
}
    d050:	bc10      	pop	{r4}
    d052:	4770      	bx	lr
		*d = '\0';
    d054:	2100      	movs	r1, #0
    d056:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    d05a:	3a01      	subs	r2, #1
	while (n > 0) {
    d05c:	2a00      	cmp	r2, #0
    d05e:	d1f9      	bne.n	d054 <strncpy+0x26>
    d060:	4770      	bx	lr

0000d062 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    d062:	4603      	mov	r3, r0
	size_t n = 0;
    d064:	2000      	movs	r0, #0

	while (*s != '\0') {
    d066:	781a      	ldrb	r2, [r3, #0]
    d068:	b112      	cbz	r2, d070 <strlen+0xe>
		s++;
    d06a:	3301      	adds	r3, #1
		n++;
    d06c:	3001      	adds	r0, #1
    d06e:	e7fa      	b.n	d066 <strlen+0x4>
	}

	return n;
}
    d070:	4770      	bx	lr

0000d072 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    d072:	4603      	mov	r3, r0
	size_t n = 0;
    d074:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    d076:	781a      	ldrb	r2, [r3, #0]
    d078:	b122      	cbz	r2, d084 <strnlen+0x12>
    d07a:	4288      	cmp	r0, r1
    d07c:	d202      	bcs.n	d084 <strnlen+0x12>
		s++;
    d07e:	3301      	adds	r3, #1
		n++;
    d080:	3001      	adds	r0, #1
    d082:	e7f8      	b.n	d076 <strnlen+0x4>
	}

	return n;
}
    d084:	4770      	bx	lr

0000d086 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
    d086:	b410      	push	{r4}
	const unsigned char *s_byte = (const unsigned char *)s;

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
    d088:	ea80 0301 	eor.w	r3, r0, r1
    d08c:	f013 0f03 	tst.w	r3, #3
    d090:	d001      	beq.n	d096 <memcpy+0x10>
	unsigned char *d_byte = (unsigned char *)d;
    d092:	4603      	mov	r3, r0
    d094:	e017      	b.n	d0c6 <memcpy+0x40>
    d096:	4603      	mov	r3, r0

		/* do byte-sized copying until word-aligned or finished */

		while (((uintptr_t)d_byte) & mask) {
    d098:	f013 0f03 	tst.w	r3, #3
    d09c:	d00b      	beq.n	d0b6 <memcpy+0x30>
			if (n == 0) {
    d09e:	b1a2      	cbz	r2, d0ca <memcpy+0x44>
				return d;
			}
			*(d_byte++) = *(s_byte++);
    d0a0:	f811 4b01 	ldrb.w	r4, [r1], #1
    d0a4:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
    d0a8:	3a01      	subs	r2, #1
    d0aa:	e7f5      	b.n	d098 <memcpy+0x12>

		mem_word_t *d_word = (mem_word_t *)d_byte;
		const mem_word_t *s_word = (const mem_word_t *)s_byte;

		while (n >= sizeof(mem_word_t)) {
			*(d_word++) = *(s_word++);
    d0ac:	f851 4b04 	ldr.w	r4, [r1], #4
    d0b0:	f843 4b04 	str.w	r4, [r3], #4
			n -= sizeof(mem_word_t);
    d0b4:	3a04      	subs	r2, #4
		while (n >= sizeof(mem_word_t)) {
    d0b6:	2a03      	cmp	r2, #3
    d0b8:	d8f8      	bhi.n	d0ac <memcpy+0x26>
    d0ba:	e004      	b.n	d0c6 <memcpy+0x40>
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
		*(d_byte++) = *(s_byte++);
    d0bc:	f811 4b01 	ldrb.w	r4, [r1], #1
    d0c0:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    d0c4:	3a01      	subs	r2, #1
	while (n > 0) {
    d0c6:	2a00      	cmp	r2, #0
    d0c8:	d1f8      	bne.n	d0bc <memcpy+0x36>
	}

	return d;
}
    d0ca:	bc10      	pop	{r4}
    d0cc:	4770      	bx	lr

0000d0ce <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
    d0ce:	b410      	push	{r4}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    d0d0:	b2cc      	uxtb	r4, r1
	unsigned char *d_byte = (unsigned char *)buf;
    d0d2:	4603      	mov	r3, r0

#if !defined(CONFIG_MINIMAL_LIBC_OPTIMIZE_STRING_FOR_SIZE)
	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
    d0d4:	f013 0f03 	tst.w	r3, #3
    d0d8:	d004      	beq.n	d0e4 <memset+0x16>
		if (n == 0) {
    d0da:	b19a      	cbz	r2, d104 <memset+0x36>
			return buf;
		}
		*(d_byte++) = c_byte;
    d0dc:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    d0e0:	3a01      	subs	r2, #1
    d0e2:	e7f7      	b.n	d0d4 <memset+0x6>
	}

	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;
    d0e4:	b2c9      	uxtb	r1, r1

	c_word |= c_word << 8;
    d0e6:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
	c_word |= c_word << 16;
    d0ea:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
    d0ee:	2a03      	cmp	r2, #3
    d0f0:	d906      	bls.n	d100 <memset+0x32>
		*(d_word++) = c_word;
    d0f2:	f843 1b04 	str.w	r1, [r3], #4
		n -= sizeof(mem_word_t);
    d0f6:	3a04      	subs	r2, #4
    d0f8:	e7f9      	b.n	d0ee <memset+0x20>

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
		*(d_byte++) = c_byte;
    d0fa:	f803 4b01 	strb.w	r4, [r3], #1
		n--;
    d0fe:	3a01      	subs	r2, #1
	while (n > 0) {
    d100:	2a00      	cmp	r2, #0
    d102:	d1fa      	bne.n	d0fa <memset+0x2c>
	}

	return buf;
}
    d104:	bc10      	pop	{r4}
    d106:	4770      	bx	lr

0000d108 <_stdout_hook_default>:
}
    d108:	f04f 30ff 	mov.w	r0, #4294967295
    d10c:	4770      	bx	lr

0000d10e <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    d10e:	b084      	sub	sp, #16
    d110:	ab04      	add	r3, sp, #16
    d112:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    d116:	f89d 3004 	ldrb.w	r3, [sp, #4]
    d11a:	2b06      	cmp	r3, #6
    d11c:	d001      	beq.n	d122 <pm_power_state_set+0x14>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    d11e:	b004      	add	sp, #16
    d120:	4770      	bx	lr
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    d122:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d126:	2201      	movs	r2, #1
    d128:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    d12c:	f3bf 8f4f 	dsb	sy
        __WFE();
    d130:	bf20      	wfe
    while (true)
    d132:	e7fd      	b.n	d130 <pm_power_state_set+0x22>

0000d134 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    d134:	b084      	sub	sp, #16
    d136:	ab04      	add	r3, sp, #16
    d138:	e903 0007 	stmdb	r3, {r0, r1, r2}
    d13c:	2300      	movs	r3, #0
    d13e:	f383 8811 	msr	BASEPRI, r3
    d142:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    d146:	b004      	add	sp, #16
    d148:	4770      	bx	lr

0000d14a <in_endpoint_ctx>:
{
    d14a:	b508      	push	{r3, lr}
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    d14c:	f040 0080 	orr.w	r0, r0, #128	; 0x80
    d150:	f7f7 fbe8 	bl	4924 <endpoint_ctx>
}
    d154:	bd08      	pop	{r3, pc}

0000d156 <out_endpoint_ctx>:
{
    d156:	b508      	push	{r3, lr}
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    d158:	f7f7 fbe4 	bl	4924 <endpoint_ctx>
}
    d15c:	bd08      	pop	{r3, pc}

0000d15e <ep_ctx_reset>:
{
    d15e:	b510      	push	{r4, lr}
    d160:	4604      	mov	r4, r0
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    d162:	6903      	ldr	r3, [r0, #16]
    d164:	6143      	str	r3, [r0, #20]
	ep_ctx->buf.curr = ep_ctx->buf.data;
    d166:	6183      	str	r3, [r0, #24]
	ep_ctx->buf.len  = 0U;
    d168:	2300      	movs	r3, #0
    d16a:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
    d16c:	7f83      	ldrb	r3, [r0, #30]
    d16e:	b933      	cbnz	r3, d17e <ep_ctx_reset+0x20>
	ep_ctx->read_complete = true;
    d170:	2301      	movs	r3, #1
    d172:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
    d174:	2300      	movs	r3, #0
    d176:	7763      	strb	r3, [r4, #29]
	ep_ctx->write_in_progress = false;
    d178:	77a3      	strb	r3, [r4, #30]
	ep_ctx->trans_zlp = false;
    d17a:	77e3      	strb	r3, [r4, #31]
}
    d17c:	bd10      	pop	{r4, pc}
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    d17e:	7a40      	ldrb	r0, [r0, #9]
    d180:	f7fc f9d6 	bl	9530 <nrfx_usbd_ep_abort>
    d184:	e7f4      	b.n	d170 <ep_ctx_reset+0x12>

0000d186 <hfxo_stop>:
{
    d186:	b510      	push	{r4, lr}
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
    d188:	f100 0320 	add.w	r3, r0, #32
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    d18c:	2200      	movs	r2, #0
    d18e:	f3bf 8f5b 	dmb	ish
    d192:	e853 1f00 	ldrex	r1, [r3]
    d196:	2901      	cmp	r1, #1
    d198:	d103      	bne.n	d1a2 <hfxo_stop+0x1c>
    d19a:	e843 2400 	strex	r4, r2, [r3]
    d19e:	2c00      	cmp	r4, #0
    d1a0:	d1f7      	bne.n	d192 <hfxo_stop+0xc>
    d1a2:	f3bf 8f5b 	dmb	ish
    d1a6:	d10d      	bne.n	d1c4 <hfxo_stop+0x3e>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
    d1a8:	69c4      	ldr	r4, [r0, #28]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
    d1aa:	f100 010c 	add.w	r1, r0, #12
    d1ae:	4620      	mov	r0, r4
    d1b0:	f7fe fbbd 	bl	b92e <onoff_cancel>

	if (rv == -EALREADY) {
    d1b4:	f110 0f78 	cmn.w	r0, #120	; 0x78
    d1b8:	d000      	beq.n	d1bc <hfxo_stop+0x36>
}
    d1ba:	bd10      	pop	{r4, pc}
		rv = onoff_release(mgr);
    d1bc:	4620      	mov	r0, r4
    d1be:	f7fe fb90 	bl	b8e2 <onoff_release>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
    d1c2:	e7fa      	b.n	d1ba <hfxo_stop+0x34>
	return 0;
    d1c4:	2000      	movs	r0, #0
    d1c6:	e7f8      	b.n	d1ba <hfxo_stop+0x34>

0000d1c8 <usbd_enable_endpoints>:
{
    d1c8:	b510      	push	{r4, lr}
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    d1ca:	2400      	movs	r4, #0
    d1cc:	e003      	b.n	d1d6 <usbd_enable_endpoints+0xe>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    d1ce:	7a40      	ldrb	r0, [r0, #9]
    d1d0:	f7fc f808 	bl	91e4 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    d1d4:	3401      	adds	r4, #1
    d1d6:	2c07      	cmp	r4, #7
    d1d8:	dc06      	bgt.n	d1e8 <usbd_enable_endpoints+0x20>
		ep_ctx = in_endpoint_ctx(i);
    d1da:	b2e0      	uxtb	r0, r4
    d1dc:	f7ff ffb5 	bl	d14a <in_endpoint_ctx>
		if (ep_ctx->cfg.en) {
    d1e0:	7a03      	ldrb	r3, [r0, #8]
    d1e2:	2b00      	cmp	r3, #0
    d1e4:	d0f6      	beq.n	d1d4 <usbd_enable_endpoints+0xc>
    d1e6:	e7f2      	b.n	d1ce <usbd_enable_endpoints+0x6>
		ep_ctx = in_endpoint_ctx(NRF_USBD_EPIN(8));
    d1e8:	2088      	movs	r0, #136	; 0x88
    d1ea:	f7ff ffae 	bl	d14a <in_endpoint_ctx>
		if (ep_ctx->cfg.en) {
    d1ee:	7a03      	ldrb	r3, [r0, #8]
    d1f0:	b90b      	cbnz	r3, d1f6 <usbd_enable_endpoints+0x2e>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    d1f2:	2400      	movs	r4, #0
    d1f4:	e007      	b.n	d206 <usbd_enable_endpoints+0x3e>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    d1f6:	7a40      	ldrb	r0, [r0, #9]
    d1f8:	f7fb fff4 	bl	91e4 <nrfx_usbd_ep_enable>
    d1fc:	e7f9      	b.n	d1f2 <usbd_enable_endpoints+0x2a>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    d1fe:	7a40      	ldrb	r0, [r0, #9]
    d200:	f7fb fff0 	bl	91e4 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
    d204:	3401      	adds	r4, #1
    d206:	2c07      	cmp	r4, #7
    d208:	dc06      	bgt.n	d218 <usbd_enable_endpoints+0x50>
		ep_ctx = out_endpoint_ctx(i);
    d20a:	b2e0      	uxtb	r0, r4
    d20c:	f7ff ffa3 	bl	d156 <out_endpoint_ctx>
		if (ep_ctx->cfg.en) {
    d210:	7a03      	ldrb	r3, [r0, #8]
    d212:	2b00      	cmp	r3, #0
    d214:	d0f6      	beq.n	d204 <usbd_enable_endpoints+0x3c>
    d216:	e7f2      	b.n	d1fe <usbd_enable_endpoints+0x36>
		ep_ctx = out_endpoint_ctx(NRF_USBD_EPOUT(8));
    d218:	2008      	movs	r0, #8
    d21a:	f7ff ff9c 	bl	d156 <out_endpoint_ctx>
		if (ep_ctx->cfg.en) {
    d21e:	7a03      	ldrb	r3, [r0, #8]
    d220:	b903      	cbnz	r3, d224 <usbd_enable_endpoints+0x5c>
}
    d222:	bd10      	pop	{r4, pc}
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    d224:	7a40      	ldrb	r0, [r0, #9]
    d226:	f7fb ffdd 	bl	91e4 <nrfx_usbd_ep_enable>
}
    d22a:	e7fa      	b.n	d222 <usbd_enable_endpoints+0x5a>

0000d22c <hfxo_start>:
{
    d22c:	b508      	push	{r3, lr}
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
    d22e:	f100 0320 	add.w	r3, r0, #32
    d232:	2201      	movs	r2, #1
    d234:	f3bf 8f5b 	dmb	ish
    d238:	e853 1f00 	ldrex	r1, [r3]
    d23c:	2900      	cmp	r1, #0
    d23e:	d104      	bne.n	d24a <hfxo_start+0x1e>
    d240:	e843 2c00 	strex	ip, r2, [r3]
    d244:	f1bc 0f00 	cmp.w	ip, #0
    d248:	d1f6      	bne.n	d238 <hfxo_start+0xc>
    d24a:	f3bf 8f5b 	dmb	ish
    d24e:	d10a      	bne.n	d266 <hfxo_start+0x3a>
	*notify = (struct sys_notify){
    d250:	2300      	movs	r3, #0
    d252:	6103      	str	r3, [r0, #16]
    d254:	6183      	str	r3, [r0, #24]
    d256:	2301      	movs	r3, #1
    d258:	6143      	str	r3, [r0, #20]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
    d25a:	f100 010c 	add.w	r1, r0, #12
    d25e:	69c0      	ldr	r0, [r0, #28]
    d260:	f7fe fae3 	bl	b82a <onoff_request>
}
    d264:	bd08      	pop	{r3, pc}
	return 0;
    d266:	2000      	movs	r0, #0
    d268:	e7fc      	b.n	d264 <hfxo_start+0x38>

0000d26a <usb_dc_ep_read>:
{
    d26a:	b570      	push	{r4, r5, r6, lr}
    d26c:	4605      	mov	r5, r0
    d26e:	460c      	mov	r4, r1
    d270:	4616      	mov	r6, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
    d272:	f7f8 fd61 	bl	5d38 <usb_dc_ep_read_wait>
	if (ret) {
    d276:	b918      	cbnz	r0, d280 <usb_dc_ep_read+0x16>
	if (!data && !max_data_len) {
    d278:	b11c      	cbz	r4, d282 <usb_dc_ep_read+0x18>
	ret = usb_dc_ep_read_continue(ep);
    d27a:	4628      	mov	r0, r5
    d27c:	f7f8 fdd6 	bl	5e2c <usb_dc_ep_read_continue>
}
    d280:	bd70      	pop	{r4, r5, r6, pc}
	if (!data && !max_data_len) {
    d282:	2e00      	cmp	r6, #0
    d284:	d1f9      	bne.n	d27a <usb_dc_ep_read+0x10>
    d286:	e7fb      	b.n	d280 <usb_dc_ep_read+0x16>

0000d288 <get_sub_data>:
	struct nrf_clock_control_data *data = dev->data;
    d288:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    d28a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    d28e:	0089      	lsls	r1, r1, #2
    d290:	3138      	adds	r1, #56	; 0x38
}
    d292:	4408      	add	r0, r1
    d294:	4770      	bx	lr

0000d296 <get_sub_config>:
	const struct nrf_clock_control_config *config =
    d296:	6840      	ldr	r0, [r0, #4]
	return &config->subsys[type];
    d298:	eb01 0141 	add.w	r1, r1, r1, lsl #1
}
    d29c:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    d2a0:	4770      	bx	lr

0000d2a2 <get_onoff_manager>:
	struct nrf_clock_control_data *data = dev->data;
    d2a2:	6900      	ldr	r0, [r0, #16]
	return &data->mgr[type];
    d2a4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
}
    d2a8:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    d2ac:	4770      	bx	lr

0000d2ae <get_status>:
{
    d2ae:	b508      	push	{r3, lr}
	return GET_STATUS(get_sub_data(dev, type)->flags);
    d2b0:	b2c9      	uxtb	r1, r1
    d2b2:	f7ff ffe9 	bl	d288 <get_sub_data>
    d2b6:	6880      	ldr	r0, [r0, #8]
}
    d2b8:	f000 0007 	and.w	r0, r0, #7
    d2bc:	bd08      	pop	{r3, pc}

0000d2be <set_off_state>:
	__asm__ volatile(
    d2be:	f04f 0320 	mov.w	r3, #32
    d2c2:	f3ef 8211 	mrs	r2, BASEPRI
    d2c6:	f383 8812 	msr	BASEPRI_MAX, r3
    d2ca:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    d2ce:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    d2d0:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    d2d4:	d001      	beq.n	d2da <set_off_state+0x1c>
    d2d6:	428b      	cmp	r3, r1
    d2d8:	d107      	bne.n	d2ea <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    d2da:	2301      	movs	r3, #1
    d2dc:	6003      	str	r3, [r0, #0]
	int err = 0;
    d2de:	2000      	movs	r0, #0
	__asm__ volatile(
    d2e0:	f382 8811 	msr	BASEPRI, r2
    d2e4:	f3bf 8f6f 	isb	sy
}
    d2e8:	4770      	bx	lr
		err = -EPERM;
    d2ea:	f04f 30ff 	mov.w	r0, #4294967295
    d2ee:	e7f7      	b.n	d2e0 <set_off_state+0x22>

0000d2f0 <set_starting_state>:
{
    d2f0:	b410      	push	{r4}
	__asm__ volatile(
    d2f2:	f04f 0320 	mov.w	r3, #32
    d2f6:	f3ef 8211 	mrs	r2, BASEPRI
    d2fa:	f383 8812 	msr	BASEPRI_MAX, r3
    d2fe:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    d302:	6803      	ldr	r3, [r0, #0]
    d304:	f003 04c0 	and.w	r4, r3, #192	; 0xc0
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    d308:	f003 0307 	and.w	r3, r3, #7
    d30c:	2b01      	cmp	r3, #1
    d30e:	d009      	beq.n	d324 <set_starting_state+0x34>
	} else if (current_ctx != ctx) {
    d310:	428c      	cmp	r4, r1
    d312:	d00a      	beq.n	d32a <set_starting_state+0x3a>
		err = -EPERM;
    d314:	f04f 30ff 	mov.w	r0, #4294967295
	__asm__ volatile(
    d318:	f382 8811 	msr	BASEPRI, r2
    d31c:	f3bf 8f6f 	isb	sy
}
    d320:	bc10      	pop	{r4}
    d322:	4770      	bx	lr
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    d324:	6001      	str	r1, [r0, #0]
	int err = 0;
    d326:	2000      	movs	r0, #0
    d328:	e7f6      	b.n	d318 <set_starting_state+0x28>
		err = -EALREADY;
    d32a:	f06f 0077 	mvn.w	r0, #119	; 0x77
    d32e:	e7f3      	b.n	d318 <set_starting_state+0x28>

0000d330 <set_on_state>:
	__asm__ volatile(
    d330:	f04f 0320 	mov.w	r3, #32
    d334:	f3ef 8211 	mrs	r2, BASEPRI
    d338:	f383 8812 	msr	BASEPRI_MAX, r3
    d33c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    d340:	6803      	ldr	r3, [r0, #0]
    d342:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    d346:	f043 0302 	orr.w	r3, r3, #2
    d34a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    d34c:	f382 8811 	msr	BASEPRI, r2
    d350:	f3bf 8f6f 	isb	sy
}
    d354:	4770      	bx	lr

0000d356 <clkstarted_handle>:
{
    d356:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d358:	4606      	mov	r6, r0
    d35a:	460c      	mov	r4, r1
	struct nrf_clock_control_sub_data *sub_data = get_sub_data(dev, type);
    d35c:	f7ff ff94 	bl	d288 <get_sub_data>
	clock_control_cb_t callback = sub_data->cb;
    d360:	6805      	ldr	r5, [r0, #0]
	void *user_data = sub_data->user_data;
    d362:	6847      	ldr	r7, [r0, #4]
	sub_data->cb = NULL;
    d364:	2300      	movs	r3, #0
    d366:	f840 3b08 	str.w	r3, [r0], #8
	set_on_state(&sub_data->flags);
    d36a:	f7ff ffe1 	bl	d330 <set_on_state>
	if (callback) {
    d36e:	b11d      	cbz	r5, d378 <clkstarted_handle+0x22>
		callback(dev, (clock_control_subsys_t)type, user_data);
    d370:	463a      	mov	r2, r7
    d372:	4621      	mov	r1, r4
    d374:	4630      	mov	r0, r6
    d376:	47a8      	blx	r5
}
    d378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d37a <stop>:
{
    d37a:	b570      	push	{r4, r5, r6, lr}
    d37c:	4606      	mov	r6, r0
    d37e:	4615      	mov	r5, r2
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    d380:	b2cc      	uxtb	r4, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    d382:	4621      	mov	r1, r4
    d384:	f7ff ff80 	bl	d288 <get_sub_data>
	err = set_off_state(&subdata->flags, ctx);
    d388:	4629      	mov	r1, r5
    d38a:	3008      	adds	r0, #8
    d38c:	f7ff ff97 	bl	d2be <set_off_state>
	if (err < 0) {
    d390:	2800      	cmp	r0, #0
    d392:	db06      	blt.n	d3a2 <stop+0x28>
	get_sub_config(dev, type)->stop();
    d394:	4621      	mov	r1, r4
    d396:	4630      	mov	r0, r6
    d398:	f7ff ff7d 	bl	d296 <get_sub_config>
    d39c:	6843      	ldr	r3, [r0, #4]
    d39e:	4798      	blx	r3
	return 0;
    d3a0:	2000      	movs	r0, #0
}
    d3a2:	bd70      	pop	{r4, r5, r6, pc}

0000d3a4 <api_stop>:
{
    d3a4:	b508      	push	{r3, lr}
	return stop(dev, subsys, CTX_API);
    d3a6:	2280      	movs	r2, #128	; 0x80
    d3a8:	f7ff ffe7 	bl	d37a <stop>
}
    d3ac:	bd08      	pop	{r3, pc}

0000d3ae <async_start>:
{
    d3ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d3b2:	4606      	mov	r6, r0
    d3b4:	4690      	mov	r8, r2
    d3b6:	461f      	mov	r7, r3
	enum clock_control_nrf_type type = (enum clock_control_nrf_type)subsys;
    d3b8:	b2cd      	uxtb	r5, r1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    d3ba:	4629      	mov	r1, r5
    d3bc:	f7ff ff64 	bl	d288 <get_sub_data>
    d3c0:	4604      	mov	r4, r0
	err = set_starting_state(&subdata->flags, ctx);
    d3c2:	9906      	ldr	r1, [sp, #24]
    d3c4:	3008      	adds	r0, #8
    d3c6:	f7ff ff93 	bl	d2f0 <set_starting_state>
	if (err < 0) {
    d3ca:	2800      	cmp	r0, #0
    d3cc:	db09      	blt.n	d3e2 <async_start+0x34>
	subdata->cb = cb;
    d3ce:	f8c4 8000 	str.w	r8, [r4]
	subdata->user_data = user_data;
    d3d2:	6067      	str	r7, [r4, #4]
	 get_sub_config(dev, type)->start();
    d3d4:	4629      	mov	r1, r5
    d3d6:	4630      	mov	r0, r6
    d3d8:	f7ff ff5d 	bl	d296 <get_sub_config>
    d3dc:	6803      	ldr	r3, [r0, #0]
    d3de:	4798      	blx	r3
	return 0;
    d3e0:	2000      	movs	r0, #0
}
    d3e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d3e6 <api_start>:
{
    d3e6:	b510      	push	{r4, lr}
    d3e8:	b082      	sub	sp, #8
	return async_start(dev, subsys, cb, user_data, CTX_API);
    d3ea:	2480      	movs	r4, #128	; 0x80
    d3ec:	9400      	str	r4, [sp, #0]
    d3ee:	f7ff ffde 	bl	d3ae <async_start>
}
    d3f2:	b002      	add	sp, #8
    d3f4:	bd10      	pop	{r4, pc}

0000d3f6 <onoff_started_callback>:
{
    d3f6:	b510      	push	{r4, lr}
    d3f8:	4614      	mov	r4, r2
	struct onoff_manager *mgr = get_onoff_manager(dev, type);
    d3fa:	b2c9      	uxtb	r1, r1
    d3fc:	f7ff ff51 	bl	d2a2 <get_onoff_manager>
	notify(mgr, 0);
    d400:	2100      	movs	r1, #0
    d402:	47a0      	blx	r4
}
    d404:	bd10      	pop	{r4, pc}

0000d406 <hfclk_start>:
{
    d406:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    d408:	2001      	movs	r0, #1
    d40a:	f7fa f889 	bl	7520 <nrfx_clock_start>
}
    d40e:	bd08      	pop	{r3, pc}

0000d410 <lfclk_start>:
{
    d410:	b508      	push	{r3, lr}
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    d412:	2000      	movs	r0, #0
    d414:	f7fa f884 	bl	7520 <nrfx_clock_start>
}
    d418:	bd08      	pop	{r3, pc}

0000d41a <hfclk_stop>:
{
    d41a:	b508      	push	{r3, lr}
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    d41c:	2001      	movs	r0, #1
    d41e:	f7fa f8b7 	bl	7590 <nrfx_clock_stop>
}
    d422:	bd08      	pop	{r3, pc}

0000d424 <lfclk_stop>:
{
    d424:	b508      	push	{r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    d426:	2000      	movs	r0, #0
    d428:	f7fa f8b2 	bl	7590 <nrfx_clock_stop>
}
    d42c:	bd08      	pop	{r3, pc}

0000d42e <blocking_start_callback>:
{
    d42e:	b508      	push	{r3, lr}
    d430:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    d432:	f7fc fe85 	bl	a140 <z_impl_k_sem_give>
}
    d436:	bd08      	pop	{r3, pc}

0000d438 <gpio_nrfx_port_get_raw>:
	return port->config;
    d438:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d43a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    d43c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    d440:	600b      	str	r3, [r1, #0]
}
    d442:	2000      	movs	r0, #0
    d444:	4770      	bx	lr

0000d446 <gpio_nrfx_port_set_masked_raw>:
	return port->config;
    d446:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d448:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    d44a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    d44e:	4042      	eors	r2, r0
    d450:	400a      	ands	r2, r1
    d452:	4042      	eors	r2, r0
    p_reg->OUT = value;
    d454:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    d458:	2000      	movs	r0, #0
    d45a:	4770      	bx	lr

0000d45c <gpio_nrfx_port_set_bits_raw>:
	return port->config;
    d45c:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d45e:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTSET = set_mask;
    d460:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
}
    d464:	2000      	movs	r0, #0
    d466:	4770      	bx	lr

0000d468 <gpio_nrfx_port_clear_bits_raw>:
	return port->config;
    d468:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d46a:	685b      	ldr	r3, [r3, #4]
    p_reg->OUTCLR = clr_mask;
    d46c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    d470:	2000      	movs	r0, #0
    d472:	4770      	bx	lr

0000d474 <gpio_nrfx_port_toggle_bits>:
	return port->config;
    d474:	6843      	ldr	r3, [r0, #4]
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d476:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    d478:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    d47c:	404b      	eors	r3, r1
    p_reg->OUT = value;
    d47e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    d482:	2000      	movs	r0, #0
    d484:	4770      	bx	lr

0000d486 <gpio_nrfx_manage_callback>:
{
    d486:	b470      	push	{r4, r5, r6}
	return port->data;
    d488:	6900      	ldr	r0, [r0, #16]
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    d48a:	1d05      	adds	r5, r0, #4
	return list->head;
    d48c:	6843      	ldr	r3, [r0, #4]
	if (!sys_slist_is_empty(callbacks)) {
    d48e:	b1db      	cbz	r3, d4c8 <gpio_nrfx_manage_callback+0x42>
		if (!sys_slist_find_and_remove(callbacks, &callback->node)) {
    d490:	460e      	mov	r6, r1
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    d492:	2400      	movs	r4, #0
    d494:	e00a      	b.n	d4ac <gpio_nrfx_manage_callback+0x26>
	return node->next;
    d496:	680b      	ldr	r3, [r1, #0]
	list->head = node;
    d498:	6043      	str	r3, [r0, #4]
	return list->tail;
    d49a:	686c      	ldr	r4, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    d49c:	42a1      	cmp	r1, r4
    d49e:	d10f      	bne.n	d4c0 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
    d4a0:	606b      	str	r3, [r5, #4]
}
    d4a2:	e00d      	b.n	d4c0 <gpio_nrfx_manage_callback+0x3a>
	list->tail = node;
    d4a4:	606c      	str	r4, [r5, #4]
}
    d4a6:	e00b      	b.n	d4c0 <gpio_nrfx_manage_callback+0x3a>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    d4a8:	461c      	mov	r4, r3
    d4aa:	681b      	ldr	r3, [r3, #0]
    d4ac:	b15b      	cbz	r3, d4c6 <gpio_nrfx_manage_callback+0x40>
    d4ae:	429e      	cmp	r6, r3
    d4b0:	d1fa      	bne.n	d4a8 <gpio_nrfx_manage_callback+0x22>
Z_GENLIST_REMOVE(slist, snode)
    d4b2:	2c00      	cmp	r4, #0
    d4b4:	d0ef      	beq.n	d496 <gpio_nrfx_manage_callback+0x10>
	return node->next;
    d4b6:	680b      	ldr	r3, [r1, #0]
	parent->next = child;
    d4b8:	6023      	str	r3, [r4, #0]
	return list->tail;
    d4ba:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    d4bc:	4299      	cmp	r1, r3
    d4be:	d0f1      	beq.n	d4a4 <gpio_nrfx_manage_callback+0x1e>
	parent->next = child;
    d4c0:	2300      	movs	r3, #0
    d4c2:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    d4c4:	e000      	b.n	d4c8 <gpio_nrfx_manage_callback+0x42>
			if (!set) {
    d4c6:	b152      	cbz	r2, d4de <gpio_nrfx_manage_callback+0x58>
	if (set) {
    d4c8:	b162      	cbz	r2, d4e4 <gpio_nrfx_manage_callback+0x5e>
	return list->head;
    d4ca:	6843      	ldr	r3, [r0, #4]
	parent->next = child;
    d4cc:	600b      	str	r3, [r1, #0]
	list->head = node;
    d4ce:	6041      	str	r1, [r0, #4]
	return list->tail;
    d4d0:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    d4d2:	b10b      	cbz	r3, d4d8 <gpio_nrfx_manage_callback+0x52>
	return 0;
    d4d4:	2000      	movs	r0, #0
    d4d6:	e006      	b.n	d4e6 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    d4d8:	6069      	str	r1, [r5, #4]
    d4da:	2000      	movs	r0, #0
}
    d4dc:	e003      	b.n	d4e6 <gpio_nrfx_manage_callback+0x60>
				return -EINVAL;
    d4de:	f06f 0015 	mvn.w	r0, #21
    d4e2:	e000      	b.n	d4e6 <gpio_nrfx_manage_callback+0x60>
	return 0;
    d4e4:	2000      	movs	r0, #0
}
    d4e6:	bc70      	pop	{r4, r5, r6}
    d4e8:	4770      	bx	lr

0000d4ea <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
    d4ea:	b510      	push	{r4, lr}
    d4ec:	b082      	sub	sp, #8
    d4ee:	460c      	mov	r4, r1
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
    d4f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    d4f4:	6e51      	ldr	r1, [r2, #100]	; 0x64
    d4f6:	6e53      	ldr	r3, [r2, #100]	; 0x64
	struct nrf_uid dev_id;

	dev_id.id[0] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 1));
    d4f8:	0a1b      	lsrs	r3, r3, #8
    d4fa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    d4fe:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
    d502:	6e51      	ldr	r1, [r2, #100]	; 0x64
    d504:	0209      	lsls	r1, r1, #8
    d506:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    d50a:	430b      	orrs	r3, r1
    d50c:	6e51      	ldr	r1, [r2, #100]	; 0x64
    d50e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    d512:	9300      	str	r3, [sp, #0]
    d514:	6e11      	ldr	r1, [r2, #96]	; 0x60
    d516:	6e13      	ldr	r3, [r2, #96]	; 0x60
	dev_id.id[1] = sys_cpu_to_be32(nrf_ficr_deviceid_get(NRF_FICR, 0));
    d518:	0a1b      	lsrs	r3, r3, #8
    d51a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    d51e:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
    d522:	6e11      	ldr	r1, [r2, #96]	; 0x60
    d524:	0209      	lsls	r1, r1, #8
    d526:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    d52a:	430b      	orrs	r3, r1
    d52c:	6e12      	ldr	r2, [r2, #96]	; 0x60
    d52e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    d532:	9301      	str	r3, [sp, #4]

	if (length > sizeof(dev_id.id)) {
    d534:	2c08      	cmp	r4, #8
    d536:	d900      	bls.n	d53a <z_impl_hwinfo_get_device_id+0x50>
		length = sizeof(dev_id.id);
    d538:	2408      	movs	r4, #8
	}

	memcpy(buffer, dev_id.id, length);
    d53a:	4622      	mov	r2, r4
    d53c:	4669      	mov	r1, sp
    d53e:	f7ff fda2 	bl	d086 <memcpy>

	return length;
}
    d542:	4620      	mov	r0, r4
    d544:	b002      	add	sp, #8
    d546:	bd10      	pop	{r4, pc}

0000d548 <endtx_isr>:
	return dev->config;
    d548:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    d54a:	681b      	ldr	r3, [r3, #0]
	__asm__ volatile(
    d54c:	f04f 0120 	mov.w	r1, #32
    d550:	f3ef 8211 	mrs	r2, BASEPRI
    d554:	f381 8812 	msr	BASEPRI_MAX, r1
    d558:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d55c:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    d560:	b131      	cbz	r1, d570 <endtx_isr+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d562:	2100      	movs	r1, #0
    d564:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    d568:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d56c:	2101      	movs	r1, #1
    d56e:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    d570:	f382 8811 	msr	BASEPRI, r2
    d574:	f3bf 8f6f 	isb	sy
}
    d578:	4770      	bx	lr

0000d57a <uarte_nrfx_isr_int>:
{
    d57a:	b538      	push	{r3, r4, r5, lr}
    d57c:	4604      	mov	r4, r0
	return dev->config;
    d57e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    d580:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    d582:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    d586:	f413 7f80 	tst.w	r3, #256	; 0x100
    d58a:	d003      	beq.n	d594 <uarte_nrfx_isr_int+0x1a>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d58c:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
    d590:	2b00      	cmp	r3, #0
    d592:	d139      	bne.n	d608 <uarte_nrfx_isr_int+0x8e>
	return dev->config;
    d594:	6863      	ldr	r3, [r4, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    d596:	685b      	ldr	r3, [r3, #4]
    d598:	f013 0f10 	tst.w	r3, #16
    d59c:	d01a      	beq.n	d5d4 <uarte_nrfx_isr_int+0x5a>
	__asm__ volatile(
    d59e:	f04f 0320 	mov.w	r3, #32
    d5a2:	f3ef 8211 	mrs	r2, BASEPRI
    d5a6:	f383 8812 	msr	BASEPRI_MAX, r3
    d5aa:	f3bf 8f6f 	isb	sy
    d5ae:	f8d5 3158 	ldr.w	r3, [r5, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    d5b2:	b113      	cbz	r3, d5ba <uarte_nrfx_isr_int+0x40>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    d5b4:	2300      	movs	r3, #0
    d5b6:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	return dev->data;
    d5ba:	6923      	ldr	r3, [r4, #16]
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
    d5bc:	68db      	ldr	r3, [r3, #12]
    d5be:	b10b      	cbz	r3, d5c4 <uarte_nrfx_isr_int+0x4a>
    d5c0:	691b      	ldr	r3, [r3, #16]
    d5c2:	b91b      	cbnz	r3, d5cc <uarte_nrfx_isr_int+0x52>
    p_reg->INTENCLR = mask;
    d5c4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    d5c8:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
	__asm__ volatile(
    d5cc:	f382 8811 	msr	BASEPRI, r2
    d5d0:	f3bf 8f6f 	isb	sy
	return dev->data;
    d5d4:	6923      	ldr	r3, [r4, #16]
	if (!data->int_driven) {
    d5d6:	68da      	ldr	r2, [r3, #12]
    d5d8:	b1aa      	cbz	r2, d606 <uarte_nrfx_isr_int+0x8c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d5da:	f8d5 1158 	ldr.w	r1, [r5, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    d5de:	b121      	cbz	r1, d5ea <uarte_nrfx_isr_int+0x70>
		data->int_driven->fifo_fill_lock = 0;
    d5e0:	2100      	movs	r1, #0
    d5e2:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
    d5e4:	68da      	ldr	r2, [r3, #12]
    d5e6:	7b92      	ldrb	r2, [r2, #14]
    d5e8:	b98a      	cbnz	r2, d60e <uarte_nrfx_isr_int+0x94>
    d5ea:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
    d5ee:	b122      	cbz	r2, d5fa <uarte_nrfx_isr_int+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d5f0:	2200      	movs	r2, #0
    d5f2:	f8c5 2124 	str.w	r2, [r5, #292]	; 0x124
    d5f6:	f8d5 2124 	ldr.w	r2, [r5, #292]	; 0x124
	if (data->int_driven->cb) {
    d5fa:	68da      	ldr	r2, [r3, #12]
    d5fc:	6813      	ldr	r3, [r2, #0]
    d5fe:	b113      	cbz	r3, d606 <uarte_nrfx_isr_int+0x8c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
    d600:	6851      	ldr	r1, [r2, #4]
    d602:	4620      	mov	r0, r4
    d604:	4798      	blx	r3
}
    d606:	bd38      	pop	{r3, r4, r5, pc}
		endtx_isr(dev);
    d608:	f7ff ff9e 	bl	d548 <endtx_isr>
    d60c:	e7c2      	b.n	d594 <uarte_nrfx_isr_int+0x1a>
    p_reg->INTENCLR = mask;
    d60e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
    d612:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
    d616:	68db      	ldr	r3, [r3, #12]
    d618:	7399      	strb	r1, [r3, #14]
			return;
    d61a:	e7f4      	b.n	d606 <uarte_nrfx_isr_int+0x8c>

0000d61c <uarte_nrfx_configure>:
{
    d61c:	b570      	push	{r4, r5, r6, lr}
    d61e:	b082      	sub	sp, #8
    d620:	4605      	mov	r5, r0
    d622:	460c      	mov	r4, r1
	switch (cfg->stop_bits) {
    d624:	794b      	ldrb	r3, [r1, #5]
    d626:	2b01      	cmp	r3, #1
    d628:	d006      	beq.n	d638 <uarte_nrfx_configure+0x1c>
    d62a:	2b03      	cmp	r3, #3
    d62c:	d011      	beq.n	d652 <uarte_nrfx_configure+0x36>
    d62e:	f06f 0385 	mvn.w	r3, #133	; 0x85
}
    d632:	4618      	mov	r0, r3
    d634:	b002      	add	sp, #8
    d636:	bd70      	pop	{r4, r5, r6, pc}
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
    d638:	2300      	movs	r3, #0
    d63a:	f88d 3006 	strb.w	r3, [sp, #6]
	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    d63e:	79a3      	ldrb	r3, [r4, #6]
    d640:	2b03      	cmp	r3, #3
    d642:	d140      	bne.n	d6c6 <uarte_nrfx_configure+0xaa>
	switch (cfg->flow_ctrl) {
    d644:	79e3      	ldrb	r3, [r4, #7]
    d646:	b143      	cbz	r3, d65a <uarte_nrfx_configure+0x3e>
    d648:	2b01      	cmp	r3, #1
    d64a:	d010      	beq.n	d66e <uarte_nrfx_configure+0x52>
    d64c:	f06f 0385 	mvn.w	r3, #133	; 0x85
    d650:	e7ef      	b.n	d632 <uarte_nrfx_configure+0x16>
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    d652:	2310      	movs	r3, #16
    d654:	f88d 3006 	strb.w	r3, [sp, #6]
		break;
    d658:	e7f1      	b.n	d63e <uarte_nrfx_configure+0x22>
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
    d65a:	2300      	movs	r3, #0
    d65c:	f88d 3004 	strb.w	r3, [sp, #4]
	switch (cfg->parity) {
    d660:	7923      	ldrb	r3, [r4, #4]
    d662:	b183      	cbz	r3, d686 <uarte_nrfx_configure+0x6a>
    d664:	2b02      	cmp	r3, #2
    d666:	d02a      	beq.n	d6be <uarte_nrfx_configure+0xa2>
    d668:	f06f 0385 	mvn.w	r3, #133	; 0x85
    d66c:	e7e1      	b.n	d632 <uarte_nrfx_configure+0x16>
	return dev->config;
    d66e:	686b      	ldr	r3, [r5, #4]
		if (IS_HWFC_PINS_USED(get_dev_config(dev)->flags)) {
    d670:	685b      	ldr	r3, [r3, #4]
    d672:	f003 0201 	and.w	r2, r3, #1
    d676:	f003 0302 	and.w	r3, r3, #2
    d67a:	4313      	orrs	r3, r2
    d67c:	d026      	beq.n	d6cc <uarte_nrfx_configure+0xb0>
			uarte_cfg.hwfc = NRF_UARTE_HWFC_ENABLED;
    d67e:	2301      	movs	r3, #1
    d680:	f88d 3004 	strb.w	r3, [sp, #4]
		break;
    d684:	e7ec      	b.n	d660 <uarte_nrfx_configure+0x44>
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
    d686:	2300      	movs	r3, #0
    d688:	f88d 3005 	strb.w	r3, [sp, #5]
	if (baudrate_set(dev, cfg->baudrate) != 0) {
    d68c:	6821      	ldr	r1, [r4, #0]
    d68e:	4628      	mov	r0, r5
    d690:	f7f9 f96e 	bl	6970 <baudrate_set>
    d694:	4603      	mov	r3, r0
    d696:	b9e0      	cbnz	r0, d6d2 <uarte_nrfx_configure+0xb6>
	return dev->config;
    d698:	686a      	ldr	r2, [r5, #4]
	return config->uarte_regs;
    d69a:	6810      	ldr	r0, [r2, #0]
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    d69c:	f89d 1005 	ldrb.w	r1, [sp, #5]
                    | (uint32_t)p_cfg->stop
    d6a0:	f89d 6006 	ldrb.w	r6, [sp, #6]
                    | (uint32_t)p_cfg->hwfc;
    d6a4:	f89d 2004 	ldrb.w	r2, [sp, #4]
    d6a8:	4331      	orrs	r1, r6
    d6aa:	430a      	orrs	r2, r1
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    d6ac:	f8c0 256c 	str.w	r2, [r0, #1388]	; 0x56c
	return dev->data;
    d6b0:	692a      	ldr	r2, [r5, #16]
	get_dev_data(dev)->uart_config = *cfg;
    d6b2:	3204      	adds	r2, #4
    d6b4:	e894 0003 	ldmia.w	r4, {r0, r1}
    d6b8:	e882 0003 	stmia.w	r2, {r0, r1}
	return 0;
    d6bc:	e7b9      	b.n	d632 <uarte_nrfx_configure+0x16>
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    d6be:	230e      	movs	r3, #14
    d6c0:	f88d 3005 	strb.w	r3, [sp, #5]
		break;
    d6c4:	e7e2      	b.n	d68c <uarte_nrfx_configure+0x70>
		return -ENOTSUP;
    d6c6:	f06f 0385 	mvn.w	r3, #133	; 0x85
    d6ca:	e7b2      	b.n	d632 <uarte_nrfx_configure+0x16>
			return -ENOTSUP;
    d6cc:	f06f 0385 	mvn.w	r3, #133	; 0x85
    d6d0:	e7af      	b.n	d632 <uarte_nrfx_configure+0x16>
		return -ENOTSUP;
    d6d2:	f06f 0385 	mvn.w	r3, #133	; 0x85
    d6d6:	e7ac      	b.n	d632 <uarte_nrfx_configure+0x16>

0000d6d8 <uarte_nrfx_config_get>:
{
    d6d8:	460b      	mov	r3, r1
	return dev->data;
    d6da:	6902      	ldr	r2, [r0, #16]
	*cfg = get_dev_data(dev)->uart_config;
    d6dc:	6891      	ldr	r1, [r2, #8]
    d6de:	6850      	ldr	r0, [r2, #4]
    d6e0:	e883 0003 	stmia.w	r3, {r0, r1}
}
    d6e4:	2000      	movs	r0, #0
    d6e6:	4770      	bx	lr

0000d6e8 <uarte_nrfx_err_check>:
	return dev->config;
    d6e8:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    d6ea:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    d6ec:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    d6f0:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    d6f4:	4770      	bx	lr

0000d6f6 <is_tx_ready>:
	return dev->config;
    d6f6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    d6f8:	681a      	ldr	r2, [r3, #0]
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    d6fa:	685b      	ldr	r3, [r3, #4]
    d6fc:	f003 0308 	and.w	r3, r3, #8
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d700:	f8d2 1158 	ldr.w	r1, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    d704:	b929      	cbnz	r1, d712 <is_tx_ready+0x1c>
    d706:	b933      	cbnz	r3, d716 <is_tx_ready+0x20>
    d708:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
    d70c:	b92b      	cbnz	r3, d71a <is_tx_ready+0x24>
    d70e:	2000      	movs	r0, #0
    d710:	4770      	bx	lr
    d712:	2001      	movs	r0, #1
    d714:	4770      	bx	lr
    d716:	2000      	movs	r0, #0
    d718:	4770      	bx	lr
    d71a:	2001      	movs	r0, #1
}
    d71c:	4770      	bx	lr

0000d71e <uarte_enable>:
	return dev->config;
    d71e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    d720:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    d722:	2208      	movs	r2, #8
    d724:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
}
    d728:	4770      	bx	lr

0000d72a <tx_start>:
{
    d72a:	b510      	push	{r4, lr}
	return dev->config;
    d72c:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    d72e:	681c      	ldr	r4, [r3, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    d730:	f8c4 1544 	str.w	r1, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    d734:	f8c4 2548 	str.w	r2, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d738:	2300      	movs	r3, #0
    d73a:	f8c4 3120 	str.w	r3, [r4, #288]	; 0x120
    d73e:	f8d4 2120 	ldr.w	r2, [r4, #288]	; 0x120
    d742:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
    d746:	f8d4 3158 	ldr.w	r3, [r4, #344]	; 0x158
	return dev->config;
    d74a:	6843      	ldr	r3, [r0, #4]
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    d74c:	685b      	ldr	r3, [r3, #4]
    d74e:	f013 0f10 	tst.w	r3, #16
    d752:	d102      	bne.n	d75a <tx_start+0x30>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d754:	2301      	movs	r3, #1
    d756:	60a3      	str	r3, [r4, #8]
}
    d758:	bd10      	pop	{r4, pc}
		uarte_enable(dev, UARTE_LOW_POWER_TX);
    d75a:	2101      	movs	r1, #1
    d75c:	f7ff ffdf 	bl	d71e <uarte_enable>
    p_reg->INTENSET = mask;
    d760:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
    d764:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
    d768:	e7f4      	b.n	d754 <tx_start+0x2a>

0000d76a <uarte_nrfx_poll_in>:
{
    d76a:	b410      	push	{r4}
	return dev->data;
    d76c:	6904      	ldr	r4, [r0, #16]
	return dev->config;
    d76e:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    d770:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d772:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    d776:	b152      	cbz	r2, d78e <uarte_nrfx_poll_in+0x24>
	*c = data->rx_data;
    d778:	7d62      	ldrb	r2, [r4, #21]
    d77a:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d77c:	2000      	movs	r0, #0
    d77e:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    d782:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d786:	2201      	movs	r2, #1
    d788:	601a      	str	r2, [r3, #0]
}
    d78a:	bc10      	pop	{r4}
    d78c:	4770      	bx	lr
		return -1;
    d78e:	f04f 30ff 	mov.w	r0, #4294967295
    d792:	e7fa      	b.n	d78a <uarte_nrfx_poll_in+0x20>

0000d794 <uarte_nrfx_fifo_fill>:
{
    d794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d798:	4680      	mov	r8, r0
	return dev->data;
    d79a:	6907      	ldr	r7, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
    d79c:	68fb      	ldr	r3, [r7, #12]
    d79e:	899e      	ldrh	r6, [r3, #12]
    d7a0:	4296      	cmp	r6, r2
    d7a2:	bfa8      	it	ge
    d7a4:	4616      	movge	r6, r2
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
    d7a6:	3310      	adds	r3, #16
    d7a8:	2201      	movs	r2, #1
    d7aa:	f3bf 8f5b 	dmb	ish
    d7ae:	e853 0f00 	ldrex	r0, [r3]
    d7b2:	2800      	cmp	r0, #0
    d7b4:	d103      	bne.n	d7be <uarte_nrfx_fifo_fill+0x2a>
    d7b6:	e843 2400 	strex	r4, r2, [r3]
    d7ba:	2c00      	cmp	r4, #0
    d7bc:	d1f7      	bne.n	d7ae <uarte_nrfx_fifo_fill+0x1a>
    d7be:	f3bf 8f5b 	dmb	ish
    d7c2:	d101      	bne.n	d7c8 <uarte_nrfx_fifo_fill+0x34>
	for (int i = 0; i < len; i++) {
    d7c4:	2300      	movs	r3, #0
    d7c6:	e006      	b.n	d7d6 <uarte_nrfx_fifo_fill+0x42>
		return 0;
    d7c8:	2600      	movs	r6, #0
    d7ca:	e019      	b.n	d800 <uarte_nrfx_fifo_fill+0x6c>
		data->int_driven->tx_buffer[i] = tx_data[i];
    d7cc:	68fc      	ldr	r4, [r7, #12]
    d7ce:	68a4      	ldr	r4, [r4, #8]
    d7d0:	5ccd      	ldrb	r5, [r1, r3]
    d7d2:	54e5      	strb	r5, [r4, r3]
	for (int i = 0; i < len; i++) {
    d7d4:	3301      	adds	r3, #1
    d7d6:	42b3      	cmp	r3, r6
    d7d8:	dbf8      	blt.n	d7cc <uarte_nrfx_fifo_fill+0x38>
	__asm__ volatile(
    d7da:	f04f 0320 	mov.w	r3, #32
    d7de:	f3ef 8411 	mrs	r4, BASEPRI
    d7e2:	f383 8812 	msr	BASEPRI_MAX, r3
    d7e6:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
    d7ea:	4640      	mov	r0, r8
    d7ec:	f7ff ff83 	bl	d6f6 <is_tx_ready>
    d7f0:	b948      	cbnz	r0, d806 <uarte_nrfx_fifo_fill+0x72>
		data->int_driven->fifo_fill_lock = 0;
    d7f2:	68fb      	ldr	r3, [r7, #12]
    d7f4:	2600      	movs	r6, #0
    d7f6:	611e      	str	r6, [r3, #16]
	__asm__ volatile(
    d7f8:	f384 8811 	msr	BASEPRI, r4
    d7fc:	f3bf 8f6f 	isb	sy
}
    d800:	4630      	mov	r0, r6
    d802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		tx_start(dev, data->int_driven->tx_buffer, len);
    d806:	68fb      	ldr	r3, [r7, #12]
    d808:	4632      	mov	r2, r6
    d80a:	6899      	ldr	r1, [r3, #8]
    d80c:	4640      	mov	r0, r8
    d80e:	f7ff ff8c 	bl	d72a <tx_start>
    d812:	e7f1      	b.n	d7f8 <uarte_nrfx_fifo_fill+0x64>

0000d814 <uarte_nrfx_fifo_read>:
	return dev->config;
    d814:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    d816:	681b      	ldr	r3, [r3, #0]
	return dev->data;
    d818:	6900      	ldr	r0, [r0, #16]
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    d81a:	2a00      	cmp	r2, #0
    d81c:	dd0c      	ble.n	d838 <uarte_nrfx_fifo_read+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d81e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    d822:	b15a      	cbz	r2, d83c <uarte_nrfx_fifo_read+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d824:	2200      	movs	r2, #0
    d826:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    d82a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
    d82e:	7d42      	ldrb	r2, [r0, #21]
    d830:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d832:	2001      	movs	r0, #1
    d834:	6018      	str	r0, [r3, #0]
}
    d836:	4770      	bx	lr
	int num_rx = 0;
    d838:	2000      	movs	r0, #0
    d83a:	4770      	bx	lr
    d83c:	2000      	movs	r0, #0
}
    d83e:	4770      	bx	lr

0000d840 <uarte_nrfx_irq_tx_enable>:
	return dev->config;
    d840:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    d842:	681a      	ldr	r2, [r3, #0]
	return dev->data;
    d844:	6901      	ldr	r1, [r0, #16]
	__asm__ volatile(
    d846:	f04f 0020 	mov.w	r0, #32
    d84a:	f3ef 8311 	mrs	r3, BASEPRI
    d84e:	f380 8812 	msr	BASEPRI_MAX, r0
    d852:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
    d856:	68c9      	ldr	r1, [r1, #12]
    d858:	2000      	movs	r0, #0
    d85a:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
    d85c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    d860:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
    d864:	f383 8811 	msr	BASEPRI, r3
    d868:	f3bf 8f6f 	isb	sy
}
    d86c:	4770      	bx	lr

0000d86e <uarte_nrfx_irq_tx_disable>:
	return dev->data;
    d86e:	6903      	ldr	r3, [r0, #16]
	data->int_driven->disable_tx_irq = true;
    d870:	68db      	ldr	r3, [r3, #12]
    d872:	2201      	movs	r2, #1
    d874:	739a      	strb	r2, [r3, #14]
}
    d876:	4770      	bx	lr

0000d878 <uarte_nrfx_irq_tx_ready_complete>:
	return dev->config;
    d878:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    d87a:	6819      	ldr	r1, [r3, #0]
	return dev->data;
    d87c:	6903      	ldr	r3, [r0, #16]
	bool ready = !data->int_driven->disable_tx_irq &&
    d87e:	68db      	ldr	r3, [r3, #12]
    d880:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    d882:	b94a      	cbnz	r2, d898 <uarte_nrfx_irq_tx_ready_complete+0x20>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d884:	f8d1 2158 	ldr.w	r2, [r1, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
    d888:	b15a      	cbz	r2, d8a2 <uarte_nrfx_irq_tx_ready_complete+0x2a>
    return p_reg->INTENSET & mask;
    d88a:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    d88e:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
    d892:	d008      	beq.n	d8a6 <uarte_nrfx_irq_tx_ready_complete+0x2e>
    d894:	2001      	movs	r0, #1
    d896:	e000      	b.n	d89a <uarte_nrfx_irq_tx_ready_complete+0x22>
    d898:	2000      	movs	r0, #0
	if (ready) {
    d89a:	b108      	cbz	r0, d8a0 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
    d89c:	2200      	movs	r2, #0
    d89e:	611a      	str	r2, [r3, #16]
}
    d8a0:	4770      	bx	lr
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
    d8a2:	2000      	movs	r0, #0
    d8a4:	e7f9      	b.n	d89a <uarte_nrfx_irq_tx_ready_complete+0x22>
    d8a6:	2000      	movs	r0, #0
    d8a8:	e7f7      	b.n	d89a <uarte_nrfx_irq_tx_ready_complete+0x22>

0000d8aa <uarte_nrfx_irq_rx_ready>:
	return dev->config;
    d8aa:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    d8ac:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d8ae:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
    d8b2:	3800      	subs	r0, #0
    d8b4:	bf18      	it	ne
    d8b6:	2001      	movne	r0, #1
    d8b8:	4770      	bx	lr

0000d8ba <uarte_nrfx_irq_rx_enable>:
	return dev->config;
    d8ba:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    d8bc:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    d8be:	2210      	movs	r2, #16
    d8c0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    d8c4:	4770      	bx	lr

0000d8c6 <uarte_nrfx_irq_rx_disable>:
	return dev->config;
    d8c6:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    d8c8:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    d8ca:	2210      	movs	r2, #16
    d8cc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    d8d0:	4770      	bx	lr

0000d8d2 <uarte_nrfx_irq_err_enable>:
	return dev->config;
    d8d2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    d8d4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    d8d6:	f44f 7200 	mov.w	r2, #512	; 0x200
    d8da:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    d8de:	4770      	bx	lr

0000d8e0 <uarte_nrfx_irq_err_disable>:
	return dev->config;
    d8e0:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    d8e2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    d8e4:	f44f 7200 	mov.w	r2, #512	; 0x200
    d8e8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    d8ec:	4770      	bx	lr

0000d8ee <uarte_nrfx_irq_is_pending>:
{
    d8ee:	b538      	push	{r3, r4, r5, lr}
    d8f0:	4604      	mov	r4, r0
	return dev->config;
    d8f2:	6843      	ldr	r3, [r0, #4]
	return config->uarte_regs;
    d8f4:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
    d8f6:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
    d8fa:	f413 0f80 	tst.w	r3, #4194304	; 0x400000
    d8fe:	d106      	bne.n	d90e <uarte_nrfx_irq_is_pending+0x20>
    d900:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
    d904:	f013 0f10 	tst.w	r3, #16
    d908:	d107      	bne.n	d91a <uarte_nrfx_irq_is_pending+0x2c>
    d90a:	2000      	movs	r0, #0
}
    d90c:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
    d90e:	f7ff ffb3 	bl	d878 <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
    d912:	2800      	cmp	r0, #0
    d914:	d0f4      	beq.n	d900 <uarte_nrfx_irq_is_pending+0x12>
		||
    d916:	2001      	movs	r0, #1
    d918:	e7f8      	b.n	d90c <uarte_nrfx_irq_is_pending+0x1e>
		 uarte_nrfx_irq_rx_ready(dev)));
    d91a:	4620      	mov	r0, r4
    d91c:	f7ff ffc5 	bl	d8aa <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
    d920:	2800      	cmp	r0, #0
    d922:	d0f3      	beq.n	d90c <uarte_nrfx_irq_is_pending+0x1e>
		||
    d924:	2001      	movs	r0, #1
    d926:	e7f1      	b.n	d90c <uarte_nrfx_irq_is_pending+0x1e>

0000d928 <uarte_nrfx_irq_update>:
}
    d928:	2001      	movs	r0, #1
    d92a:	4770      	bx	lr

0000d92c <uarte_nrfx_irq_callback_set>:
	return dev->data;
    d92c:	6903      	ldr	r3, [r0, #16]
	data->int_driven->cb = cb;
    d92e:	68d8      	ldr	r0, [r3, #12]
    d930:	6001      	str	r1, [r0, #0]
	data->int_driven->cb_data = cb_data;
    d932:	68db      	ldr	r3, [r3, #12]
    d934:	605a      	str	r2, [r3, #4]
}
    d936:	4770      	bx	lr

0000d938 <wait_tx_ready>:
{
    d938:	b570      	push	{r4, r5, r6, lr}
    d93a:	4606      	mov	r6, r0
    d93c:	e014      	b.n	d968 <wait_tx_ready+0x30>
		if (res) {
    d93e:	b17d      	cbz	r5, d960 <wait_tx_ready+0x28>
	__asm__ volatile(
    d940:	f04f 0320 	mov.w	r3, #32
    d944:	f3ef 8411 	mrs	r4, BASEPRI
    d948:	f383 8812 	msr	BASEPRI_MAX, r3
    d94c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    d950:	4630      	mov	r0, r6
    d952:	f7ff fed0 	bl	d6f6 <is_tx_ready>
    d956:	b9a0      	cbnz	r0, d982 <wait_tx_ready+0x4a>
	__asm__ volatile(
    d958:	f384 8811 	msr	BASEPRI, r4
    d95c:	f3bf 8f6f 	isb	sy
	return z_impl_k_sleep(timeout);
    d960:	2021      	movs	r0, #33	; 0x21
    d962:	2100      	movs	r1, #0
    d964:	f7fd f92a 	bl	abbc <z_impl_k_sleep>
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    d968:	2464      	movs	r4, #100	; 0x64
    d96a:	4630      	mov	r0, r6
    d96c:	f7ff fec3 	bl	d6f6 <is_tx_ready>
    d970:	4605      	mov	r5, r0
    d972:	2800      	cmp	r0, #0
    d974:	d1e3      	bne.n	d93e <wait_tx_ready+0x6>
    d976:	2001      	movs	r0, #1
    d978:	f000 f8a1 	bl	dabe <nrfx_busy_wait>
    d97c:	3c01      	subs	r4, #1
    d97e:	d1f4      	bne.n	d96a <wait_tx_ready+0x32>
    d980:	e7dd      	b.n	d93e <wait_tx_ready+0x6>
}
    d982:	4620      	mov	r0, r4
    d984:	bd70      	pop	{r4, r5, r6, pc}

0000d986 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    d986:	b510      	push	{r4, lr}
    d988:	4604      	mov	r4, r0
    d98a:	2200      	movs	r2, #0
    d98c:	2101      	movs	r1, #1
    d98e:	2002      	movs	r0, #2
    d990:	f7f6 f926 	bl	3be0 <z_arm_irq_priority_set>
    d994:	2002      	movs	r0, #2
    d996:	f7f6 f8f1 	bl	3b7c <arch_irq_enable>
    d99a:	2101      	movs	r1, #1
    d99c:	4620      	mov	r0, r4
    d99e:	f7f9 f901 	bl	6ba4 <uarte_instance_init>
    d9a2:	bd10      	pop	{r4, pc}

0000d9a4 <sys_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces*/

void __weak sys_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
    d9a4:	4770      	bx	lr

0000d9a6 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    d9a6:	4770      	bx	lr

0000d9a8 <sys_clock_disable>:

void __weak sys_clock_disable(void)
{
}
    d9a8:	4770      	bx	lr

0000d9aa <counter_sub>:
	return (a - b) & COUNTER_MAX;
    d9aa:	1a40      	subs	r0, r0, r1
}
    d9ac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    d9b0:	4770      	bx	lr

0000d9b2 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    d9b2:	f100 0350 	add.w	r3, r0, #80	; 0x50
    d9b6:	009b      	lsls	r3, r3, #2
    d9b8:	b29b      	uxth	r3, r3
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    d9ba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    d9be:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    d9c2:	2200      	movs	r2, #0
    d9c4:	601a      	str	r2, [r3, #0]
    d9c6:	681b      	ldr	r3, [r3, #0]
}
    d9c8:	4770      	bx	lr

0000d9ca <absolute_time_to_cc>:
}
    d9ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    d9ce:	4770      	bx	lr

0000d9d0 <full_int_lock>:
	__asm__ volatile(
    d9d0:	f04f 0320 	mov.w	r3, #32
    d9d4:	f3ef 8011 	mrs	r0, BASEPRI
    d9d8:	f383 8812 	msr	BASEPRI_MAX, r3
    d9dc:	f3bf 8f6f 	isb	sy
}
    d9e0:	4770      	bx	lr

0000d9e2 <full_int_unlock>:
	__asm__ volatile(
    d9e2:	f380 8811 	msr	BASEPRI, r0
    d9e6:	f3bf 8f6f 	isb	sy
}
    d9ea:	4770      	bx	lr

0000d9ec <set_absolute_alarm>:
{
    d9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d9ee:	4606      	mov	r6, r0
	uint32_t cc_val = abs_val & COUNTER_MAX;
    d9f0:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
	uint32_t prev_cc = get_comparator(chan);
    d9f4:	f7f9 f99c 	bl	6d30 <get_comparator>
    d9f8:	4607      	mov	r7, r0
    d9fa:	e019      	b.n	da30 <set_absolute_alarm+0x44>
	z_impl_k_busy_wait(usec_to_wait);
    d9fc:	2013      	movs	r0, #19
    d9fe:	f000 fccd 	bl	e39c <z_impl_k_busy_wait>
}
    da02:	e022      	b.n	da4a <set_absolute_alarm+0x5e>
		event_clear(chan);
    da04:	4630      	mov	r0, r6
    da06:	f7ff ffd4 	bl	d9b2 <event_clear>
		event_enable(chan);
    da0a:	4630      	mov	r0, r6
    da0c:	f7f9 f998 	bl	6d40 <event_enable>
		set_comparator(chan, cc_val);
    da10:	4629      	mov	r1, r5
    da12:	4630      	mov	r0, r6
    da14:	f7f9 f982 	bl	6d1c <set_comparator>
		now2 = counter();
    da18:	f7f9 f9a6 	bl	6d68 <counter>
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    da1c:	4284      	cmp	r4, r0
    da1e:	d01e      	beq.n	da5e <set_absolute_alarm+0x72>
    da20:	1c81      	adds	r1, r0, #2
    da22:	4628      	mov	r0, r5
    da24:	f7ff ffc1 	bl	d9aa <counter_sub>
	} while ((now2 != now) &&
    da28:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    da2c:	d917      	bls.n	da5e <set_absolute_alarm+0x72>
		prev_cc = cc_val;
    da2e:	462f      	mov	r7, r5
		now = counter();
    da30:	f7f9 f99a 	bl	6d68 <counter>
    da34:	4604      	mov	r4, r0
		set_comparator(chan, now);
    da36:	4601      	mov	r1, r0
    da38:	4630      	mov	r0, r6
    da3a:	f7f9 f96f 	bl	6d1c <set_comparator>
		if (counter_sub(prev_cc, now) == 1) {
    da3e:	4621      	mov	r1, r4
    da40:	4638      	mov	r0, r7
    da42:	f7ff ffb2 	bl	d9aa <counter_sub>
    da46:	2801      	cmp	r0, #1
    da48:	d0d8      	beq.n	d9fc <set_absolute_alarm+0x10>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    da4a:	1ca7      	adds	r7, r4, #2
    da4c:	4639      	mov	r1, r7
    da4e:	4628      	mov	r0, r5
    da50:	f7ff ffab 	bl	d9aa <counter_sub>
    da54:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    da58:	d9d4      	bls.n	da04 <set_absolute_alarm+0x18>
			cc_val = now + 2;
    da5a:	463d      	mov	r5, r7
    da5c:	e7d2      	b.n	da04 <set_absolute_alarm+0x18>
}
    da5e:	4628      	mov	r0, r5
    da60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000da62 <compare_set>:
{
    da62:	b5f0      	push	{r4, r5, r6, r7, lr}
    da64:	b083      	sub	sp, #12
    da66:	4604      	mov	r4, r0
    da68:	4617      	mov	r7, r2
    da6a:	461d      	mov	r5, r3
	key = compare_int_lock(chan);
    da6c:	f7f9 f982 	bl	6d74 <compare_int_lock>
    da70:	4606      	mov	r6, r0
	int ret = compare_set_nolocks(chan, target_time, handler, user_data);
    da72:	9b09      	ldr	r3, [sp, #36]	; 0x24
    da74:	9301      	str	r3, [sp, #4]
    da76:	9b08      	ldr	r3, [sp, #32]
    da78:	9300      	str	r3, [sp, #0]
    da7a:	463a      	mov	r2, r7
    da7c:	462b      	mov	r3, r5
    da7e:	4620      	mov	r0, r4
    da80:	f7f9 fa66 	bl	6f50 <compare_set_nolocks>
    da84:	4605      	mov	r5, r0
	compare_int_unlock(chan, key);
    da86:	4631      	mov	r1, r6
    da88:	4620      	mov	r0, r4
    da8a:	f7f9 f9d7 	bl	6e3c <compare_int_unlock>
}
    da8e:	4628      	mov	r0, r5
    da90:	b003      	add	sp, #12
    da92:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000da94 <sys_clock_cycle_get_32>:

uint32_t sys_clock_cycle_get_32(void)
{
    da94:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    da96:	f7f9 fa3b 	bl	6f10 <z_nrf_rtc_timer_read>
}
    da9a:	bd08      	pop	{r3, pc}

0000da9c <hw_cc3xx_init_internal>:
#include <nrf_cc3xx_platform.h>

#if CONFIG_HW_CC3XX

static int hw_cc3xx_init_internal(const struct device *dev)
{
    da9c:	b508      	push	{r3, lr}

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    da9e:	f7fd fb93 	bl	b1c8 <nrf_cc3xx_platform_init_no_rng>
#endif

	return res;
}
    daa2:	bd08      	pop	{r3, pc}

0000daa4 <hw_cc3xx_init>:

static int hw_cc3xx_init(const struct device *dev)
{
    daa4:	b510      	push	{r4, lr}
    daa6:	4604      	mov	r4, r0
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    daa8:	f7f5 ff2a 	bl	3900 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    daac:	f7f5 ffe6 	bl	3a7c <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
    dab0:	4620      	mov	r0, r4
    dab2:	f7ff fff3 	bl	da9c <hw_cc3xx_init_internal>
	return res;
}
    dab6:	bd10      	pop	{r4, pc}

0000dab8 <nrfx_isr>:

#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
    dab8:	b508      	push	{r3, lr}
	((nrfx_irq_handler_t)irq_handler)();
    daba:	4780      	blx	r0
}
    dabc:	bd08      	pop	{r3, pc}

0000dabe <nrfx_busy_wait>:

void nrfx_busy_wait(uint32_t usec_to_wait)
{
    dabe:	b508      	push	{r3, lr}
	z_impl_k_busy_wait(usec_to_wait);
    dac0:	f000 fc6c 	bl	e39c <z_impl_k_busy_wait>
	k_busy_wait(usec_to_wait);
}
    dac4:	bd08      	pop	{r3, pc}

0000dac6 <is_app_channel>:
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
    dac6:	2301      	movs	r3, #1
    dac8:	4083      	lsls	r3, r0
    daca:	f013 0fff 	tst.w	r3, #255	; 0xff
}
    dace:	bf14      	ite	ne
    dad0:	2001      	movne	r0, #1
    dad2:	2000      	moveq	r0, #0
    dad4:	4770      	bx	lr

0000dad6 <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
    dad6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    dada:	f44f 7260 	mov.w	r2, #896	; 0x380
    dade:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    dae2:	4770      	bx	lr

0000dae4 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
    dae4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    dae8:	f44f 7260 	mov.w	r2, #896	; 0x380
    daec:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    daf0:	4770      	bx	lr

0000daf2 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
    daf2:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
    daf4:	f7f9 feee 	bl	78d4 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
    daf8:	f7f9 fdd6 	bl	76a8 <nrfx_clock_irq_handler>
}
    dafc:	bd08      	pop	{r3, pc}

0000dafe <nrf52_errata_223>:
}
    dafe:	2000      	movs	r0, #0
    db00:	4770      	bx	lr

0000db02 <nrfx_usbd_consumer>:
{
    db02:	b430      	push	{r4, r5}
    size_t size = p_transfer->size;
    db04:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
    db06:	42a3      	cmp	r3, r4
    db08:	d908      	bls.n	db1c <nrfx_usbd_consumer+0x1a>
        p_next->size = 0;
    db0a:	2500      	movs	r5, #0
    db0c:	6045      	str	r5, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    db0e:	6809      	ldr	r1, [r1, #0]
    db10:	6001      	str	r1, [r0, #0]
    return (ep_size == data_size) && (size != 0);
    db12:	429a      	cmp	r2, r3
    db14:	d00b      	beq.n	db2e <nrfx_usbd_consumer+0x2c>
    db16:	2000      	movs	r0, #0
}
    db18:	bc30      	pop	{r4, r5}
    db1a:	4770      	bx	lr
        p_next->size = data_size;
    db1c:	6043      	str	r3, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    db1e:	680d      	ldr	r5, [r1, #0]
    db20:	6005      	str	r5, [r0, #0]
        size -= data_size;
    db22:	1ae4      	subs	r4, r4, r3
        p_transfer->size = size;
    db24:	604c      	str	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
    db26:	6808      	ldr	r0, [r1, #0]
    db28:	4418      	add	r0, r3
    db2a:	6008      	str	r0, [r1, #0]
    db2c:	e7f1      	b.n	db12 <nrfx_usbd_consumer+0x10>
    return (ep_size == data_size) && (size != 0);
    db2e:	b90c      	cbnz	r4, db34 <nrfx_usbd_consumer+0x32>
    db30:	2000      	movs	r0, #0
    db32:	e7f1      	b.n	db18 <nrfx_usbd_consumer+0x16>
    db34:	2001      	movs	r0, #1
    db36:	e7ef      	b.n	db18 <nrfx_usbd_consumer+0x16>

0000db38 <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
    db38:	684b      	ldr	r3, [r1, #4]
    if (tx_size > ep_size)
    db3a:	4293      	cmp	r3, r2
    db3c:	d800      	bhi.n	db40 <nrfx_usbd_feeder_ram+0x8>
    size_t tx_size = p_transfer->size;
    db3e:	461a      	mov	r2, r3
    p_next->p_data = p_transfer->p_data;
    db40:	680b      	ldr	r3, [r1, #0]
    db42:	6003      	str	r3, [r0, #0]
    p_next->size = tx_size;
    db44:	6042      	str	r2, [r0, #4]
    p_transfer->size -= tx_size;
    db46:	6848      	ldr	r0, [r1, #4]
    db48:	1a80      	subs	r0, r0, r2
    db4a:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    db4c:	680b      	ldr	r3, [r1, #0]
    db4e:	441a      	add	r2, r3
    db50:	600a      	str	r2, [r1, #0]
}
    db52:	3800      	subs	r0, #0
    db54:	bf18      	it	ne
    db56:	2001      	movne	r0, #1
    db58:	4770      	bx	lr

0000db5a <nrfx_usbd_feeder_ram_zlp>:
    size_t tx_size = p_transfer->size;
    db5a:	684b      	ldr	r3, [r1, #4]
    if (tx_size > ep_size)
    db5c:	4293      	cmp	r3, r2
    db5e:	d800      	bhi.n	db62 <nrfx_usbd_feeder_ram_zlp+0x8>
    size_t tx_size = p_transfer->size;
    db60:	461a      	mov	r2, r3
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    db62:	b162      	cbz	r2, db7e <nrfx_usbd_feeder_ram_zlp+0x24>
    db64:	680b      	ldr	r3, [r1, #0]
    db66:	6003      	str	r3, [r0, #0]
    p_next->size = tx_size;
    db68:	6042      	str	r2, [r0, #4]
    p_transfer->size -= tx_size;
    db6a:	684b      	ldr	r3, [r1, #4]
    db6c:	1a9b      	subs	r3, r3, r2
    db6e:	604b      	str	r3, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    db70:	680b      	ldr	r3, [r1, #0]
    db72:	4413      	add	r3, r2
    db74:	600b      	str	r3, [r1, #0]
}
    db76:	1e10      	subs	r0, r2, #0
    db78:	bf18      	it	ne
    db7a:	2001      	movne	r0, #1
    db7c:	4770      	bx	lr
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    db7e:	2300      	movs	r3, #0
    db80:	e7f1      	b.n	db66 <nrfx_usbd_feeder_ram_zlp+0xc>

0000db82 <ev_started_handler>:
}
    db82:	4770      	bx	lr

0000db84 <usbd_dma_scheduler_algorithm>:
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    db84:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
    db88:	b110      	cbz	r0, db90 <usbd_dma_scheduler_algorithm+0xc>
  return __builtin_clz(value);
    db8a:	fab0 f080 	clz	r0, r0
    db8e:	4770      	bx	lr
    return 32U;
    db90:	2020      	movs	r0, #32
}
    db92:	4770      	bx	lr

0000db94 <nrfx_usbd_feeder_flash>:
{
    db94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    db98:	4606      	mov	r6, r0
    db9a:	460c      	mov	r4, r1
    db9c:	4615      	mov	r5, r2
    size_t tx_size  = p_transfer->size;
    db9e:	f8d1 8004 	ldr.w	r8, [r1, #4]
    void * p_buffer = nrfx_usbd_feeder_buffer_get();
    dba2:	f7fa fdad 	bl	8700 <nrfx_usbd_feeder_buffer_get>
    dba6:	4607      	mov	r7, r0
    if (tx_size > ep_size)
    dba8:	45a8      	cmp	r8, r5
    dbaa:	d800      	bhi.n	dbae <nrfx_usbd_feeder_flash+0x1a>
    size_t tx_size  = p_transfer->size;
    dbac:	4645      	mov	r5, r8
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    dbae:	462a      	mov	r2, r5
    dbb0:	6821      	ldr	r1, [r4, #0]
    dbb2:	4638      	mov	r0, r7
    dbb4:	f7ff fa67 	bl	d086 <memcpy>
    p_next->p_data.tx = p_buffer;
    dbb8:	6037      	str	r7, [r6, #0]
    p_next->size = tx_size;
    dbba:	6075      	str	r5, [r6, #4]
    p_transfer->size -= tx_size;
    dbbc:	6860      	ldr	r0, [r4, #4]
    dbbe:	1b40      	subs	r0, r0, r5
    dbc0:	6060      	str	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    dbc2:	6822      	ldr	r2, [r4, #0]
    dbc4:	442a      	add	r2, r5
    dbc6:	6022      	str	r2, [r4, #0]
}
    dbc8:	3800      	subs	r0, #0
    dbca:	bf18      	it	ne
    dbcc:	2001      	movne	r0, #1
    dbce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000dbd2 <nrfx_usbd_feeder_flash_zlp>:
{
    dbd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dbd6:	4606      	mov	r6, r0
    dbd8:	460d      	mov	r5, r1
    dbda:	4614      	mov	r4, r2
    size_t tx_size  = p_transfer->size;
    dbdc:	f8d1 8004 	ldr.w	r8, [r1, #4]
    void * p_buffer = nrfx_usbd_feeder_buffer_get();
    dbe0:	f7fa fd8e 	bl	8700 <nrfx_usbd_feeder_buffer_get>
    dbe4:	4607      	mov	r7, r0
    if (tx_size > ep_size)
    dbe6:	45a0      	cmp	r8, r4
    dbe8:	d800      	bhi.n	dbec <nrfx_usbd_feeder_flash_zlp+0x1a>
    size_t tx_size  = p_transfer->size;
    dbea:	4644      	mov	r4, r8
    if (tx_size != 0)
    dbec:	b96c      	cbnz	r4, dc0a <nrfx_usbd_feeder_flash_zlp+0x38>
        p_next->p_data.tx = NULL;
    dbee:	2300      	movs	r3, #0
    dbf0:	6033      	str	r3, [r6, #0]
    p_next->size = tx_size;
    dbf2:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
    dbf4:	686b      	ldr	r3, [r5, #4]
    dbf6:	1b1b      	subs	r3, r3, r4
    dbf8:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
    dbfa:	682b      	ldr	r3, [r5, #0]
    dbfc:	4423      	add	r3, r4
    dbfe:	602b      	str	r3, [r5, #0]
}
    dc00:	1e20      	subs	r0, r4, #0
    dc02:	bf18      	it	ne
    dc04:	2001      	movne	r0, #1
    dc06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    dc0a:	4622      	mov	r2, r4
    dc0c:	6829      	ldr	r1, [r5, #0]
    dc0e:	4638      	mov	r0, r7
    dc10:	f7ff fa39 	bl	d086 <memcpy>
        p_next->p_data.tx = p_buffer;
    dc14:	6037      	str	r7, [r6, #0]
    dc16:	e7ec      	b.n	dbf2 <nrfx_usbd_feeder_flash_zlp+0x20>

0000dc18 <SEGGER_RTT_Init>:
*  Function description
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
    dc18:	b508      	push	{r3, lr}
  _DoInit();
    dc1a:	f7fb fdcf 	bl	97bc <_DoInit>
}
    dc1e:	bd08      	pop	{r3, pc}

0000dc20 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    dc20:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    dc22:	f7ff fff9 	bl	dc18 <SEGGER_RTT_Init>

	return 0;
}
    dc26:	2000      	movs	r0, #0
    dc28:	bd08      	pop	{r3, pc}

0000dc2a <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    dc2a:	b148      	cbz	r0, dc40 <z_device_ready+0x16>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    dc2c:	68c3      	ldr	r3, [r0, #12]
    dc2e:	8818      	ldrh	r0, [r3, #0]
    dc30:	f3c0 0008 	ubfx	r0, r0, #0, #9
    dc34:	f5b0 7f80 	cmp.w	r0, #256	; 0x100
    dc38:	bf14      	ite	ne
    dc3a:	2000      	movne	r0, #0
    dc3c:	2001      	moveq	r0, #1
    dc3e:	4770      	bx	lr
		return false;
    dc40:	2000      	movs	r0, #0
}
    dc42:	4770      	bx	lr

0000dc44 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    dc44:	68c2      	ldr	r2, [r0, #12]
    dc46:	6903      	ldr	r3, [r0, #16]
    dc48:	431a      	orrs	r2, r3
    dc4a:	f012 0203 	ands.w	r2, r2, #3
    dc4e:	d10d      	bne.n	dc6c <create_free_list+0x28>
	slab->free_list = NULL;
    dc50:	2100      	movs	r1, #0
    dc52:	6141      	str	r1, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    dc54:	e005      	b.n	dc62 <create_free_list+0x1e>
		*(char **)p = slab->free_list;
    dc56:	6941      	ldr	r1, [r0, #20]
    dc58:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
    dc5a:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
    dc5c:	68c1      	ldr	r1, [r0, #12]
    dc5e:	440b      	add	r3, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    dc60:	3201      	adds	r2, #1
    dc62:	6881      	ldr	r1, [r0, #8]
    dc64:	4291      	cmp	r1, r2
    dc66:	d8f6      	bhi.n	dc56 <create_free_list+0x12>
	return 0;
    dc68:	2000      	movs	r0, #0
    dc6a:	4770      	bx	lr
		return -EINVAL;
    dc6c:	f06f 0015 	mvn.w	r0, #21
}
    dc70:	4770      	bx	lr

0000dc72 <k_mem_slab_init>:
{
    dc72:	b510      	push	{r4, lr}
    dc74:	4604      	mov	r4, r0
	slab->num_blocks = num_blocks;
    dc76:	6083      	str	r3, [r0, #8]
	slab->block_size = block_size;
    dc78:	60c2      	str	r2, [r0, #12]
	slab->buffer = buffer;
    dc7a:	6101      	str	r1, [r0, #16]
	slab->num_used = 0U;
    dc7c:	2300      	movs	r3, #0
    dc7e:	6183      	str	r3, [r0, #24]
	rc = create_free_list(slab);
    dc80:	f7ff ffe0 	bl	dc44 <create_free_list>
	if (rc < 0) {
    dc84:	2800      	cmp	r0, #0
    dc86:	db01      	blt.n	dc8c <k_mem_slab_init+0x1a>
	list->head = (sys_dnode_t *)list;
    dc88:	6024      	str	r4, [r4, #0]
	list->tail = (sys_dnode_t *)list;
    dc8a:	6064      	str	r4, [r4, #4]
}
    dc8c:	bd10      	pop	{r4, pc}

0000dc8e <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    dc8e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dc90:	4604      	mov	r4, r0
    dc92:	460d      	mov	r5, r1
	__asm__ volatile(
    dc94:	f04f 0320 	mov.w	r3, #32
    dc98:	f3ef 8611 	mrs	r6, BASEPRI
    dc9c:	f383 8812 	msr	BASEPRI_MAX, r3
    dca0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    dca4:	6943      	ldr	r3, [r0, #20]
    dca6:	b163      	cbz	r3, dcc2 <k_mem_slab_free+0x34>
			z_ready_thread(pending_thread);
			z_reschedule(&slab->lock, key);
			return;
		}
	}
	**(char ***) mem = slab->free_list;
    dca8:	682b      	ldr	r3, [r5, #0]
    dcaa:	6962      	ldr	r2, [r4, #20]
    dcac:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    dcae:	682b      	ldr	r3, [r5, #0]
    dcb0:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    dcb2:	69a3      	ldr	r3, [r4, #24]
    dcb4:	3b01      	subs	r3, #1
    dcb6:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    dcb8:	f386 8811 	msr	BASEPRI, r6
    dcbc:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    dcc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    dcc2:	f100 0708 	add.w	r7, r0, #8
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    dcc6:	f000 fa7c 	bl	e1c2 <z_unpend_first_thread>
		if (pending_thread != NULL) {
    dcca:	2800      	cmp	r0, #0
    dccc:	d0ec      	beq.n	dca8 <k_mem_slab_free+0x1a>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    dcce:	682a      	ldr	r2, [r5, #0]
    dcd0:	2100      	movs	r1, #0
    dcd2:	f8c0 10ac 	str.w	r1, [r0, #172]	; 0xac
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    dcd6:	6142      	str	r2, [r0, #20]
			z_ready_thread(pending_thread);
    dcd8:	f000 f9b1 	bl	e03e <z_ready_thread>
			z_reschedule(&slab->lock, key);
    dcdc:	4631      	mov	r1, r6
    dcde:	4638      	mov	r0, r7
    dce0:	f7fc fc3c 	bl	a55c <z_reschedule>
			return;
    dce4:	e7ec      	b.n	dcc0 <k_mem_slab_free+0x32>

0000dce6 <setup_thread_stack>:
{
    dce6:	b410      	push	{r4}
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    dce8:	3207      	adds	r2, #7
    dcea:	f022 0207 	bic.w	r2, r2, #7
    dcee:	f102 0320 	add.w	r3, r2, #32

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    dcf2:	f101 0420 	add.w	r4, r1, #32
	new_thread->stack_info.start = (uintptr_t)stack_buf_start;
    dcf6:	f8c0 4098 	str.w	r4, [r0, #152]	; 0x98
	new_thread->stack_info.size = stack_buf_size;
    dcfa:	f8c0 209c 	str.w	r2, [r0, #156]	; 0x9c
	new_thread->stack_info.delta = delta;
    dcfe:	2200      	movs	r2, #0
    dd00:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
}
    dd04:	18c8      	adds	r0, r1, r3
    dd06:	bc10      	pop	{r4}
    dd08:	4770      	bx	lr

0000dd0a <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    dd0a:	f3ef 8005 	mrs	r0, IPSR
}
    dd0e:	3800      	subs	r0, #0
    dd10:	bf18      	it	ne
    dd12:	2001      	movne	r0, #1
    dd14:	4770      	bx	lr

0000dd16 <k_thread_name_get>:
}
    dd16:	3074      	adds	r0, #116	; 0x74
    dd18:	4770      	bx	lr

0000dd1a <z_impl_k_thread_start>:
{
    dd1a:	b508      	push	{r3, lr}
	z_sched_start(thread);
    dd1c:	f7fc fd48 	bl	a7b0 <z_sched_start>
}
    dd20:	bd08      	pop	{r3, pc}

0000dd22 <z_init_thread_base>:
#endif

void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
    dd22:	b410      	push	{r4}
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
    dd24:	2400      	movs	r4, #0
    dd26:	6084      	str	r4, [r0, #8]
	thread_base->user_options = (uint8_t)options;
    dd28:	7303      	strb	r3, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    dd2a:	7342      	strb	r2, [r0, #13]

	thread_base->prio = priority;
    dd2c:	7381      	strb	r1, [r0, #14]

	thread_base->sched_locked = 0U;
    dd2e:	73c4      	strb	r4, [r0, #15]
	node->next = NULL;
    dd30:	6184      	str	r4, [r0, #24]
	node->prev = NULL;
    dd32:	61c4      	str	r4, [r0, #28]
#endif

	/* swap_data does not need to be initialized */

	z_init_thread_timeout(thread_base);
}
    dd34:	bc10      	pop	{r4}
    dd36:	4770      	bx	lr

0000dd38 <z_impl_k_thread_create>:
{
    dd38:	b5f0      	push	{r4, r5, r6, r7, lr}
    dd3a:	b087      	sub	sp, #28
    dd3c:	4604      	mov	r4, r0
    dd3e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    dd42:	2500      	movs	r5, #0
    dd44:	9505      	str	r5, [sp, #20]
    dd46:	9d10      	ldr	r5, [sp, #64]	; 0x40
    dd48:	9504      	str	r5, [sp, #16]
    dd4a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    dd4c:	9503      	str	r5, [sp, #12]
    dd4e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    dd50:	9502      	str	r5, [sp, #8]
    dd52:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    dd54:	9501      	str	r5, [sp, #4]
    dd56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    dd58:	9500      	str	r5, [sp, #0]
    dd5a:	f7fc f827 	bl	9dac <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    dd5e:	f1b7 3fff 	cmp.w	r7, #4294967295
    dd62:	bf08      	it	eq
    dd64:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    dd68:	d102      	bne.n	dd70 <z_impl_k_thread_create+0x38>
}
    dd6a:	4620      	mov	r0, r4
    dd6c:	b007      	add	sp, #28
    dd6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		schedule_new_thread(new_thread, delay);
    dd70:	4632      	mov	r2, r6
    dd72:	463b      	mov	r3, r7
    dd74:	4620      	mov	r0, r4
    dd76:	f7fc f807 	bl	9d88 <schedule_new_thread>
    dd7a:	e7f6      	b.n	dd6a <z_impl_k_thread_create+0x32>

0000dd7c <z_pm_save_idle_exit>:

void z_pm_save_idle_exit(int32_t ticks)
{
    dd7c:	b508      	push	{r3, lr}
	/* Some CPU low power states require notification at the ISR
	 * to allow any operations that needs to be done before kernel
	 * switches task or processes nested interrupts.
	 * This can be simply ignored if not required.
	 */
	pm_system_resume();
    dd7e:	f7f5 fd1b 	bl	37b8 <pm_system_resume>
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
    dd82:	f7ff fe10 	bl	d9a6 <sys_clock_idle_exit>
}
    dd86:	bd08      	pop	{r3, pc}

0000dd88 <idle>:

void idle(void *unused1, void *unused2, void *unused3)
{
    dd88:	b508      	push	{r3, lr}
	__asm__ volatile(
    dd8a:	f04f 0220 	mov.w	r2, #32
    dd8e:	f3ef 8311 	mrs	r3, BASEPRI
    dd92:	f382 8812 	msr	BASEPRI_MAX, r2
    dd96:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

		if (IS_ENABLED(CONFIG_PM)) {
			pm_save_idle();
    dd9a:	f7fc f8b9 	bl	9f10 <pm_save_idle>
    dd9e:	e7f4      	b.n	dd8a <idle+0x2>

0000dda0 <new_prio_for_inheritance>:
	int new_prio = z_is_prio_higher(target, limit) ? target : limit;
    dda0:	4288      	cmp	r0, r1
    dda2:	da00      	bge.n	dda6 <new_prio_for_inheritance+0x6>
    dda4:	4601      	mov	r1, r0
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    dda6:	f111 0f7f 	cmn.w	r1, #127	; 0x7f
    ddaa:	db01      	blt.n	ddb0 <new_prio_for_inheritance+0x10>
    ddac:	4608      	mov	r0, r1
    ddae:	4770      	bx	lr
    ddb0:	f06f 007e 	mvn.w	r0, #126	; 0x7e
}
    ddb4:	4770      	bx	lr

0000ddb6 <adjust_owner_prio>:
{
    ddb6:	b508      	push	{r3, lr}
	if (mutex->owner->base.prio != new_prio) {
    ddb8:	6880      	ldr	r0, [r0, #8]
    ddba:	f990 300e 	ldrsb.w	r3, [r0, #14]
    ddbe:	428b      	cmp	r3, r1
    ddc0:	d101      	bne.n	ddc6 <adjust_owner_prio+0x10>
	return false;
    ddc2:	2000      	movs	r0, #0
}
    ddc4:	bd08      	pop	{r3, pc}
		return z_set_prio(mutex->owner, new_prio);
    ddc6:	f7fc fd41 	bl	a84c <z_set_prio>
    ddca:	e7fb      	b.n	ddc4 <adjust_owner_prio+0xe>

0000ddcc <z_impl_k_mutex_init>:
{
    ddcc:	4603      	mov	r3, r0
	mutex->owner = NULL;
    ddce:	2000      	movs	r0, #0
    ddd0:	6098      	str	r0, [r3, #8]
	mutex->lock_count = 0U;
    ddd2:	60d8      	str	r0, [r3, #12]
	list->head = (sys_dnode_t *)list;
    ddd4:	601b      	str	r3, [r3, #0]
	list->tail = (sys_dnode_t *)list;
    ddd6:	605b      	str	r3, [r3, #4]
}
    ddd8:	4770      	bx	lr

0000ddda <prepare_thread_to_run>:
{
    ddda:	b508      	push	{r3, lr}
    dddc:	2200      	movs	r2, #0
    ddde:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
    dde2:	6141      	str	r1, [r0, #20]
	z_ready_thread(thread);
    dde4:	f000 f92b 	bl	e03e <z_ready_thread>
}
    dde8:	bd08      	pop	{r3, pc}

0000ddea <queue_insert>:
{
    ddea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ddee:	4605      	mov	r5, r0
    ddf0:	460e      	mov	r6, r1
    ddf2:	4614      	mov	r4, r2
    ddf4:	461f      	mov	r7, r3
    ddf6:	f89d 2020 	ldrb.w	r2, [sp, #32]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    ddfa:	f100 0808 	add.w	r8, r0, #8
    ddfe:	f04f 0320 	mov.w	r3, #32
    de02:	f3ef 8911 	mrs	r9, BASEPRI
    de06:	f383 8812 	msr	BASEPRI_MAX, r3
    de0a:	f3bf 8f6f 	isb	sy
	if (is_append) {
    de0e:	b102      	cbz	r2, de12 <queue_insert+0x28>
	return list->tail;
    de10:	6846      	ldr	r6, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    de12:	4640      	mov	r0, r8
    de14:	f000 f9d5 	bl	e1c2 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
    de18:	b9a0      	cbnz	r0, de44 <queue_insert+0x5a>
	if (alloc) {
    de1a:	b9e7      	cbnz	r7, de56 <queue_insert+0x6c>
	node->next_and_flags = flags;
    de1c:	2300      	movs	r3, #0
    de1e:	6023      	str	r3, [r4, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    de20:	b356      	cbz	r6, de78 <queue_insert+0x8e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    de22:	6833      	ldr	r3, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    de24:	f033 0303 	bics.w	r3, r3, #3
    de28:	d134      	bne.n	de94 <queue_insert+0xaa>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    de2a:	6823      	ldr	r3, [r4, #0]
    de2c:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    de30:	6023      	str	r3, [r4, #0]
	return list->tail;
    de32:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND(sflist, sfnode)
    de34:	b35a      	cbz	r2, de8e <queue_insert+0xa4>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    de36:	6813      	ldr	r3, [r2, #0]
    de38:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    de3c:	4323      	orrs	r3, r4
    de3e:	6013      	str	r3, [r2, #0]
	list->tail = node;
    de40:	606c      	str	r4, [r5, #4]
}
    de42:	e031      	b.n	dea8 <queue_insert+0xbe>
		prepare_thread_to_run(first_pending_thread, data);
    de44:	4621      	mov	r1, r4
    de46:	f7ff ffc8 	bl	ddda <prepare_thread_to_run>
		z_reschedule(&queue->lock, key);
    de4a:	4649      	mov	r1, r9
    de4c:	4640      	mov	r0, r8
    de4e:	f7fc fb85 	bl	a55c <z_reschedule>
		return 0;
    de52:	2000      	movs	r0, #0
    de54:	e02d      	b.n	deb2 <queue_insert+0xc8>
	return z_thread_aligned_alloc(0, size);
    de56:	2108      	movs	r1, #8
    de58:	2000      	movs	r0, #0
    de5a:	f7fd f965 	bl	b128 <z_thread_aligned_alloc>
		if (anode == NULL) {
    de5e:	b120      	cbz	r0, de6a <queue_insert+0x80>
		anode->data = data;
    de60:	6044      	str	r4, [r0, #4]
	node->next_and_flags = flags;
    de62:	2201      	movs	r2, #1
    de64:	6002      	str	r2, [r0, #0]
		data = anode;
    de66:	4604      	mov	r4, r0
    de68:	e7da      	b.n	de20 <queue_insert+0x36>
	__asm__ volatile(
    de6a:	f389 8811 	msr	BASEPRI, r9
    de6e:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    de72:	f06f 000b 	mvn.w	r0, #11
    de76:	e01c      	b.n	deb2 <queue_insert+0xc8>
	return list->head;
    de78:	682a      	ldr	r2, [r5, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    de7a:	6823      	ldr	r3, [r4, #0]
    de7c:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    de80:	4313      	orrs	r3, r2
    de82:	6023      	str	r3, [r4, #0]
	list->head = node;
    de84:	602c      	str	r4, [r5, #0]
	return list->tail;
    de86:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_PREPEND(sflist, sfnode)
    de88:	b973      	cbnz	r3, dea8 <queue_insert+0xbe>
	list->tail = node;
    de8a:	606c      	str	r4, [r5, #4]
}
    de8c:	e00c      	b.n	dea8 <queue_insert+0xbe>
	list->tail = node;
    de8e:	606c      	str	r4, [r5, #4]
	list->head = node;
    de90:	602c      	str	r4, [r5, #0]
}
    de92:	e009      	b.n	dea8 <queue_insert+0xbe>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    de94:	6822      	ldr	r2, [r4, #0]
    de96:	f002 0203 	and.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    de9a:	4313      	orrs	r3, r2
    de9c:	6023      	str	r3, [r4, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    de9e:	6833      	ldr	r3, [r6, #0]
    dea0:	f003 0303 	and.w	r3, r3, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    dea4:	431c      	orrs	r4, r3
    dea6:	6034      	str	r4, [r6, #0]
	z_reschedule(&queue->lock, key);
    dea8:	4649      	mov	r1, r9
    deaa:	4640      	mov	r0, r8
    deac:	f7fc fb56 	bl	a55c <z_reschedule>
	return 0;
    deb0:	2000      	movs	r0, #0
}
    deb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000deb6 <z_queue_node_peek>:
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
    deb6:	b160      	cbz	r0, ded2 <z_queue_node_peek+0x1c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    deb8:	6803      	ldr	r3, [r0, #0]
    deba:	f013 0f03 	tst.w	r3, #3
    debe:	d008      	beq.n	ded2 <z_queue_node_peek+0x1c>
{
    dec0:	b510      	push	{r4, lr}
		ret = anode->data;
    dec2:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    dec4:	b909      	cbnz	r1, deca <z_queue_node_peek+0x14>
		ret = anode->data;
    dec6:	4620      	mov	r0, r4
}
    dec8:	bd10      	pop	{r4, pc}
			k_free(anode);
    deca:	f000 fade 	bl	e48a <k_free>
		ret = anode->data;
    dece:	4620      	mov	r0, r4
    ded0:	e7fa      	b.n	dec8 <z_queue_node_peek+0x12>
}
    ded2:	4770      	bx	lr

0000ded4 <k_queue_append>:
{
    ded4:	b500      	push	{lr}
    ded6:	b083      	sub	sp, #12
    ded8:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
    deda:	2301      	movs	r3, #1
    dedc:	9300      	str	r3, [sp, #0]
    dede:	2300      	movs	r3, #0
    dee0:	4619      	mov	r1, r3
    dee2:	f7ff ff82 	bl	ddea <queue_insert>
}
    dee6:	b003      	add	sp, #12
    dee8:	f85d fb04 	ldr.w	pc, [sp], #4

0000deec <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    deec:	b13a      	cbz	r2, defe <z_impl_k_sem_init+0x12>
    deee:	428a      	cmp	r2, r1
    def0:	d308      	bcc.n	df04 <z_impl_k_sem_init+0x18>
	sem->count = initial_count;
    def2:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
    def4:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
    def6:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
    def8:	6040      	str	r0, [r0, #4]
	return 0;
    defa:	2000      	movs	r0, #0
    defc:	4770      	bx	lr
		return -EINVAL;
    defe:	f06f 0015 	mvn.w	r0, #21
    df02:	4770      	bx	lr
    df04:	f06f 0015 	mvn.w	r0, #21
}
    df08:	4770      	bx	lr

0000df0a <k_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    df0a:	2300      	movs	r3, #0
    df0c:	6003      	str	r3, [r0, #0]
    df0e:	6083      	str	r3, [r0, #8]
    df10:	60c3      	str	r3, [r0, #12]
    df12:	6041      	str	r1, [r0, #4]
}
    df14:	4770      	bx	lr

0000df16 <k_work_submit_to_queue>:
{
    df16:	b530      	push	{r4, r5, lr}
    df18:	b083      	sub	sp, #12
    df1a:	9001      	str	r0, [sp, #4]
    df1c:	4608      	mov	r0, r1
	__asm__ volatile(
    df1e:	f04f 0320 	mov.w	r3, #32
    df22:	f3ef 8511 	mrs	r5, BASEPRI
    df26:	f383 8812 	msr	BASEPRI_MAX, r3
    df2a:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    df2e:	a901      	add	r1, sp, #4
    df30:	f7fc f954 	bl	a1dc <submit_to_queue_locked>
    df34:	4604      	mov	r4, r0
	__asm__ volatile(
    df36:	f385 8811 	msr	BASEPRI, r5
    df3a:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
    df3e:	2800      	cmp	r0, #0
    df40:	dc02      	bgt.n	df48 <k_work_submit_to_queue+0x32>
}
    df42:	4620      	mov	r0, r4
    df44:	b003      	add	sp, #12
    df46:	bd30      	pop	{r4, r5, pc}
	return z_impl_k_is_preempt_thread();
    df48:	f7fc fe6a 	bl	ac20 <z_impl_k_is_preempt_thread>
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
    df4c:	2800      	cmp	r0, #0
    df4e:	d0f8      	beq.n	df42 <k_work_submit_to_queue+0x2c>
	z_impl_k_yield();
    df50:	f7fc fda0 	bl	aa94 <z_impl_k_yield>
	return ret;
    df54:	e7f5      	b.n	df42 <k_work_submit_to_queue+0x2c>

0000df56 <thread_active_elsewhere>:
}
    df56:	2000      	movs	r0, #0
    df58:	4770      	bx	lr

0000df5a <pended_on_thread>:
}
    df5a:	6880      	ldr	r0, [r0, #8]
    df5c:	4770      	bx	lr

0000df5e <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
    df5e:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    df62:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
    df66:	4283      	cmp	r3, r0
    df68:	d001      	beq.n	df6e <z_sched_prio_cmp+0x10>
		return b2 - b1;
    df6a:	1ac0      	subs	r0, r0, r3
    df6c:	4770      	bx	lr
	return 0;
    df6e:	2000      	movs	r0, #0
}
    df70:	4770      	bx	lr

0000df72 <z_unpend_thread_no_timeout>:
{
    df72:	b538      	push	{r3, r4, r5, lr}
    df74:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    df76:	2300      	movs	r3, #0
	__asm__ volatile(
    df78:	f04f 0220 	mov.w	r2, #32
    df7c:	f3ef 8511 	mrs	r5, BASEPRI
    df80:	f382 8812 	msr	BASEPRI_MAX, r2
    df84:	f3bf 8f6f 	isb	sy
    df88:	b98b      	cbnz	r3, dfae <z_unpend_thread_no_timeout+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    df8a:	4620      	mov	r0, r4
    df8c:	f7ff ffe5 	bl	df5a <pended_on_thread>
    df90:	4621      	mov	r1, r4
    df92:	f000 f822 	bl	dfda <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    df96:	7b63      	ldrb	r3, [r4, #13]
    df98:	f023 0302 	bic.w	r3, r3, #2
    df9c:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    df9e:	2300      	movs	r3, #0
    dfa0:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    dfa2:	f385 8811 	msr	BASEPRI, r5
    dfa6:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    dfaa:	2301      	movs	r3, #1
    dfac:	e7ec      	b.n	df88 <z_unpend_thread_no_timeout+0x16>
}
    dfae:	bd38      	pop	{r3, r4, r5, pc}

0000dfb0 <z_reschedule_irqlock>:
{
    dfb0:	b508      	push	{r3, lr}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    dfb2:	4603      	mov	r3, r0
    dfb4:	b920      	cbnz	r0, dfc0 <z_reschedule_irqlock+0x10>
    dfb6:	f3ef 8205 	mrs	r2, IPSR
    dfba:	b942      	cbnz	r2, dfce <z_reschedule_irqlock+0x1e>
    dfbc:	2201      	movs	r2, #1
    dfbe:	e000      	b.n	dfc2 <z_reschedule_irqlock+0x12>
    dfc0:	2200      	movs	r2, #0
	if (resched(key)) {
    dfc2:	b932      	cbnz	r2, dfd2 <z_reschedule_irqlock+0x22>
    dfc4:	f383 8811 	msr	BASEPRI, r3
    dfc8:	f3bf 8f6f 	isb	sy
}
    dfcc:	bd08      	pop	{r3, pc}
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    dfce:	2200      	movs	r2, #0
    dfd0:	e7f7      	b.n	dfc2 <z_reschedule_irqlock+0x12>
	ret = arch_swap(key);
    dfd2:	4618      	mov	r0, r3
    dfd4:	f7f5 fe3a 	bl	3c4c <arch_swap>
	return ret;
    dfd8:	e7f8      	b.n	dfcc <z_reschedule_irqlock+0x1c>

0000dfda <z_priq_dumb_remove>:
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    dfda:	684a      	ldr	r2, [r1, #4]
	sys_dnode_t *const next = node->next;
    dfdc:	680b      	ldr	r3, [r1, #0]

	prev->next = next;
    dfde:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    dfe0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    dfe2:	2300      	movs	r3, #0
    dfe4:	600b      	str	r3, [r1, #0]
	node->prev = NULL;
    dfe6:	604b      	str	r3, [r1, #4]
}
    dfe8:	4770      	bx	lr

0000dfea <z_unpend_thread>:
{
    dfea:	b538      	push	{r3, r4, r5, lr}
    dfec:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    dfee:	2300      	movs	r3, #0
	__asm__ volatile(
    dff0:	f04f 0220 	mov.w	r2, #32
    dff4:	f3ef 8511 	mrs	r5, BASEPRI
    dff8:	f382 8812 	msr	BASEPRI_MAX, r2
    dffc:	f3bf 8f6f 	isb	sy
    e000:	b98b      	cbnz	r3, e026 <z_unpend_thread+0x3c>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    e002:	4620      	mov	r0, r4
    e004:	f7ff ffa9 	bl	df5a <pended_on_thread>
    e008:	4621      	mov	r1, r4
    e00a:	f7ff ffe6 	bl	dfda <z_priq_dumb_remove>
    e00e:	7b63      	ldrb	r3, [r4, #13]
    e010:	f023 0302 	bic.w	r3, r3, #2
    e014:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    e016:	2300      	movs	r3, #0
    e018:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    e01a:	f385 8811 	msr	BASEPRI, r5
    e01e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    e022:	2301      	movs	r3, #1
    e024:	e7ec      	b.n	e000 <z_unpend_thread+0x16>
	return z_abort_timeout(&thread->base.timeout);
    e026:	f104 0018 	add.w	r0, r4, #24
    e02a:	f000 f954 	bl	e2d6 <z_abort_timeout>
}
    e02e:	bd38      	pop	{r3, r4, r5, pc}

0000e030 <z_priq_dumb_best>:
{
    e030:	4603      	mov	r3, r0
	return list->head == list;
    e032:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e034:	4283      	cmp	r3, r0
    e036:	d000      	beq.n	e03a <z_priq_dumb_best+0xa>
}
    e038:	4770      	bx	lr
	struct k_thread *thread = NULL;
    e03a:	2000      	movs	r0, #0
	return thread;
    e03c:	e7fc      	b.n	e038 <z_priq_dumb_best+0x8>

0000e03e <z_ready_thread>:
{
    e03e:	b538      	push	{r3, r4, r5, lr}
    e040:	4604      	mov	r4, r0
	LOCKED(&sched_spinlock) {
    e042:	2300      	movs	r3, #0
	__asm__ volatile(
    e044:	f04f 0220 	mov.w	r2, #32
    e048:	f3ef 8511 	mrs	r5, BASEPRI
    e04c:	f382 8812 	msr	BASEPRI_MAX, r2
    e050:	f3bf 8f6f 	isb	sy
    e054:	e007      	b.n	e066 <z_ready_thread+0x28>
			ready_thread(thread);
    e056:	4620      	mov	r0, r4
    e058:	f7fc fb6a 	bl	a730 <ready_thread>
	__asm__ volatile(
    e05c:	f385 8811 	msr	BASEPRI, r5
    e060:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    e064:	2301      	movs	r3, #1
    e066:	b92b      	cbnz	r3, e074 <z_ready_thread+0x36>
		if (!thread_active_elsewhere(thread)) {
    e068:	4620      	mov	r0, r4
    e06a:	f7ff ff74 	bl	df56 <thread_active_elsewhere>
    e06e:	2800      	cmp	r0, #0
    e070:	d1f4      	bne.n	e05c <z_ready_thread+0x1e>
    e072:	e7f0      	b.n	e056 <z_ready_thread+0x18>
}
    e074:	bd38      	pop	{r3, r4, r5, pc}

0000e076 <z_thread_timeout>:
{
    e076:	b570      	push	{r4, r5, r6, lr}
    e078:	4604      	mov	r4, r0
	struct k_thread *thread = CONTAINER_OF(timeout,
    e07a:	f1a0 0518 	sub.w	r5, r0, #24
	LOCKED(&sched_spinlock) {
    e07e:	2300      	movs	r3, #0
	__asm__ volatile(
    e080:	f04f 0220 	mov.w	r2, #32
    e084:	f3ef 8611 	mrs	r6, BASEPRI
    e088:	f382 8812 	msr	BASEPRI_MAX, r2
    e08c:	f3bf 8f6f 	isb	sy
    e090:	e019      	b.n	e0c6 <z_thread_timeout+0x50>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    e092:	4628      	mov	r0, r5
    e094:	f7ff ff61 	bl	df5a <pended_on_thread>
    e098:	4629      	mov	r1, r5
    e09a:	f7ff ff9e 	bl	dfda <z_priq_dumb_remove>
    e09e:	7b6b      	ldrb	r3, [r5, #13]
    e0a0:	f023 0302 	bic.w	r3, r3, #2
    e0a4:	736b      	strb	r3, [r5, #13]
	thread->base.pended_on = NULL;
    e0a6:	2300      	movs	r3, #0
    e0a8:	60ab      	str	r3, [r5, #8]
	thread->base.thread_state &= ~_THREAD_PRESTART;
    e0aa:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    e0ae:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
    e0b2:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    e0b6:	4628      	mov	r0, r5
    e0b8:	f7fc fb3a 	bl	a730 <ready_thread>
	__asm__ volatile(
    e0bc:	f386 8811 	msr	BASEPRI, r6
    e0c0:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    e0c4:	2301      	movs	r3, #1
    e0c6:	b94b      	cbnz	r3, e0dc <z_thread_timeout+0x66>
		bool killed = ((thread->base.thread_state & _THREAD_DEAD) ||
    e0c8:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
		if (!killed) {
    e0cc:	f013 0f28 	tst.w	r3, #40	; 0x28
    e0d0:	d1f4      	bne.n	e0bc <z_thread_timeout+0x46>
			if (thread->base.pended_on != NULL) {
    e0d2:	f854 3c10 	ldr.w	r3, [r4, #-16]
    e0d6:	2b00      	cmp	r3, #0
    e0d8:	d1db      	bne.n	e092 <z_thread_timeout+0x1c>
    e0da:	e7e6      	b.n	e0aa <z_thread_timeout+0x34>
}
    e0dc:	bd70      	pop	{r4, r5, r6, pc}

0000e0de <add_to_waitq_locked>:
{
    e0de:	b570      	push	{r4, r5, r6, lr}
    e0e0:	4605      	mov	r5, r0
    e0e2:	460e      	mov	r6, r1
	unready_thread(thread);
    e0e4:	f7fc fb82 	bl	a7ec <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    e0e8:	7b6b      	ldrb	r3, [r5, #13]
    e0ea:	f043 0302 	orr.w	r3, r3, #2
    e0ee:	736b      	strb	r3, [r5, #13]
	if (wait_q != NULL) {
    e0f0:	b1b6      	cbz	r6, e120 <add_to_waitq_locked+0x42>
		thread->base.pended_on = wait_q;
    e0f2:	60ae      	str	r6, [r5, #8]
	return list->head == list;
    e0f4:	6834      	ldr	r4, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e0f6:	42a6      	cmp	r6, r4
    e0f8:	d019      	beq.n	e12e <add_to_waitq_locked+0x50>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e0fa:	b164      	cbz	r4, e116 <add_to_waitq_locked+0x38>
		if (z_sched_prio_cmp(thread, t) > 0) {
    e0fc:	4621      	mov	r1, r4
    e0fe:	4628      	mov	r0, r5
    e100:	f7ff ff2d 	bl	df5e <z_sched_prio_cmp>
    e104:	2800      	cmp	r0, #0
    e106:	dc0c      	bgt.n	e122 <add_to_waitq_locked+0x44>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    e108:	b12c      	cbz	r4, e116 <add_to_waitq_locked+0x38>
	return (node == list->tail) ? NULL : node->next;
    e10a:	6873      	ldr	r3, [r6, #4]
    e10c:	429c      	cmp	r4, r3
    e10e:	d002      	beq.n	e116 <add_to_waitq_locked+0x38>
    e110:	6824      	ldr	r4, [r4, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e112:	2c00      	cmp	r4, #0
    e114:	d1f1      	bne.n	e0fa <add_to_waitq_locked+0x1c>
	sys_dnode_t *const tail = list->tail;
    e116:	6873      	ldr	r3, [r6, #4]
	node->next = list;
    e118:	602e      	str	r6, [r5, #0]
	node->prev = tail;
    e11a:	606b      	str	r3, [r5, #4]
	tail->next = node;
    e11c:	601d      	str	r5, [r3, #0]
	list->tail = node;
    e11e:	6075      	str	r5, [r6, #4]
}
    e120:	bd70      	pop	{r4, r5, r6, pc}
	sys_dnode_t *const prev = successor->prev;
    e122:	6863      	ldr	r3, [r4, #4]
	node->prev = prev;
    e124:	606b      	str	r3, [r5, #4]
	node->next = successor;
    e126:	602c      	str	r4, [r5, #0]
	prev->next = node;
    e128:	601d      	str	r5, [r3, #0]
	successor->prev = node;
    e12a:	6065      	str	r5, [r4, #4]
}
    e12c:	e7f8      	b.n	e120 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e12e:	2400      	movs	r4, #0
    e130:	e7e3      	b.n	e0fa <add_to_waitq_locked+0x1c>

0000e132 <pend>:
{
    e132:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e136:	4605      	mov	r5, r0
    e138:	460f      	mov	r7, r1
    e13a:	4691      	mov	r9, r2
    e13c:	4698      	mov	r8, r3
	LOCKED(&sched_spinlock) {
    e13e:	2400      	movs	r4, #0
	__asm__ volatile(
    e140:	f04f 0320 	mov.w	r3, #32
    e144:	f3ef 8611 	mrs	r6, BASEPRI
    e148:	f383 8812 	msr	BASEPRI_MAX, r3
    e14c:	f3bf 8f6f 	isb	sy
    e150:	b94c      	cbnz	r4, e166 <pend+0x34>
		add_to_waitq_locked(thread, wait_q);
    e152:	4639      	mov	r1, r7
    e154:	4628      	mov	r0, r5
    e156:	f7ff ffc2 	bl	e0de <add_to_waitq_locked>
	__asm__ volatile(
    e15a:	f386 8811 	msr	BASEPRI, r6
    e15e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    e162:	2401      	movs	r4, #1
    e164:	e7f4      	b.n	e150 <pend+0x1e>
	add_thread_timeout(thread, timeout);
    e166:	464a      	mov	r2, r9
    e168:	4643      	mov	r3, r8
    e16a:	4628      	mov	r0, r5
    e16c:	f7fc f994 	bl	a498 <add_thread_timeout>
}
    e170:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000e174 <z_unpend1_no_timeout>:
{
    e174:	b570      	push	{r4, r5, r6, lr}
    e176:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    e178:	2300      	movs	r3, #0
	__asm__ volatile(
    e17a:	f04f 0220 	mov.w	r2, #32
    e17e:	f3ef 8511 	mrs	r5, BASEPRI
    e182:	f382 8812 	msr	BASEPRI_MAX, r2
    e186:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    e18a:	461c      	mov	r4, r3
    e18c:	e00f      	b.n	e1ae <z_unpend1_no_timeout+0x3a>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    e18e:	f7ff fee4 	bl	df5a <pended_on_thread>
    e192:	4621      	mov	r1, r4
    e194:	f7ff ff21 	bl	dfda <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    e198:	7b63      	ldrb	r3, [r4, #13]
    e19a:	f023 0302 	bic.w	r3, r3, #2
    e19e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    e1a0:	2300      	movs	r3, #0
    e1a2:	60a3      	str	r3, [r4, #8]
	__asm__ volatile(
    e1a4:	f385 8811 	msr	BASEPRI, r5
    e1a8:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    e1ac:	2301      	movs	r3, #1
    e1ae:	b933      	cbnz	r3, e1be <z_unpend1_no_timeout+0x4a>
		thread = _priq_wait_best(&wait_q->waitq);
    e1b0:	4630      	mov	r0, r6
    e1b2:	f7ff ff3d 	bl	e030 <z_priq_dumb_best>
		if (thread != NULL) {
    e1b6:	4604      	mov	r4, r0
    e1b8:	2800      	cmp	r0, #0
    e1ba:	d1e8      	bne.n	e18e <z_unpend1_no_timeout+0x1a>
    e1bc:	e7f2      	b.n	e1a4 <z_unpend1_no_timeout+0x30>
}
    e1be:	4620      	mov	r0, r4
    e1c0:	bd70      	pop	{r4, r5, r6, pc}

0000e1c2 <z_unpend_first_thread>:
{
    e1c2:	b570      	push	{r4, r5, r6, lr}
    e1c4:	4606      	mov	r6, r0
	LOCKED(&sched_spinlock) {
    e1c6:	2300      	movs	r3, #0
	__asm__ volatile(
    e1c8:	f04f 0220 	mov.w	r2, #32
    e1cc:	f3ef 8511 	mrs	r5, BASEPRI
    e1d0:	f382 8812 	msr	BASEPRI_MAX, r2
    e1d4:	f3bf 8f6f 	isb	sy
	struct k_thread *thread = NULL;
    e1d8:	461c      	mov	r4, r3
    e1da:	e013      	b.n	e204 <z_unpend_first_thread+0x42>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    e1dc:	f7ff febd 	bl	df5a <pended_on_thread>
    e1e0:	4621      	mov	r1, r4
    e1e2:	f7ff fefa 	bl	dfda <z_priq_dumb_remove>
    e1e6:	7b63      	ldrb	r3, [r4, #13]
    e1e8:	f023 0302 	bic.w	r3, r3, #2
    e1ec:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    e1ee:	2300      	movs	r3, #0
    e1f0:	60a3      	str	r3, [r4, #8]
    e1f2:	f104 0018 	add.w	r0, r4, #24
    e1f6:	f000 f86e 	bl	e2d6 <z_abort_timeout>
	__asm__ volatile(
    e1fa:	f385 8811 	msr	BASEPRI, r5
    e1fe:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    e202:	2301      	movs	r3, #1
    e204:	b933      	cbnz	r3, e214 <z_unpend_first_thread+0x52>
		thread = _priq_wait_best(&wait_q->waitq);
    e206:	4630      	mov	r0, r6
    e208:	f7ff ff12 	bl	e030 <z_priq_dumb_best>
		if (thread != NULL) {
    e20c:	4604      	mov	r4, r0
    e20e:	2800      	cmp	r0, #0
    e210:	d1e4      	bne.n	e1dc <z_unpend_first_thread+0x1a>
    e212:	e7f2      	b.n	e1fa <z_unpend_first_thread+0x38>
}
    e214:	4620      	mov	r0, r4
    e216:	bd70      	pop	{r4, r5, r6, pc}

0000e218 <z_unpend_all>:
{
    e218:	b538      	push	{r3, r4, r5, lr}
    e21a:	4605      	mov	r5, r0
	int need_sched = 0;
    e21c:	2000      	movs	r0, #0
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    e21e:	e006      	b.n	e22e <z_unpend_all+0x16>
		z_unpend_thread(thread);
    e220:	4620      	mov	r0, r4
    e222:	f7ff fee2 	bl	dfea <z_unpend_thread>
		z_ready_thread(thread);
    e226:	4620      	mov	r0, r4
    e228:	f7ff ff09 	bl	e03e <z_ready_thread>
		need_sched = 1;
    e22c:	2001      	movs	r0, #1
	return list->head == list;
    e22e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e230:	42a5      	cmp	r5, r4
    e232:	d001      	beq.n	e238 <z_unpend_all+0x20>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    e234:	2c00      	cmp	r4, #0
    e236:	d1f3      	bne.n	e220 <z_unpend_all+0x8>
}
    e238:	bd38      	pop	{r3, r4, r5, pc}

0000e23a <z_sched_wake>:
{
    e23a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e23e:	4606      	mov	r6, r0
    e240:	4688      	mov	r8, r1
    e242:	4617      	mov	r7, r2
	LOCKED(&sched_spinlock) {
    e244:	2300      	movs	r3, #0
	__asm__ volatile(
    e246:	f04f 0220 	mov.w	r2, #32
    e24a:	f3ef 8511 	mrs	r5, BASEPRI
    e24e:	f382 8812 	msr	BASEPRI_MAX, r2
    e252:	f3bf 8f6f 	isb	sy
	bool ret = false;
    e256:	4699      	mov	r9, r3
    e258:	e01b      	b.n	e292 <z_sched_wake+0x58>
    e25a:	f8c0 80ac 	str.w	r8, [r0, #172]	; 0xac
	thread->base.swap_data = data;
    e25e:	6147      	str	r7, [r0, #20]
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    e260:	f7ff fe7b 	bl	df5a <pended_on_thread>
    e264:	4621      	mov	r1, r4
    e266:	f7ff feb8 	bl	dfda <z_priq_dumb_remove>
    e26a:	7b63      	ldrb	r3, [r4, #13]
    e26c:	f023 0302 	bic.w	r3, r3, #2
    e270:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    e272:	2300      	movs	r3, #0
    e274:	60a3      	str	r3, [r4, #8]
    e276:	f104 0018 	add.w	r0, r4, #24
    e27a:	f000 f82c 	bl	e2d6 <z_abort_timeout>
			ready_thread(thread);
    e27e:	4620      	mov	r0, r4
    e280:	f7fc fa56 	bl	a730 <ready_thread>
			ret = true;
    e284:	f04f 0901 	mov.w	r9, #1
	__asm__ volatile(
    e288:	f385 8811 	msr	BASEPRI, r5
    e28c:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
    e290:	2301      	movs	r3, #1
    e292:	b933      	cbnz	r3, e2a2 <z_sched_wake+0x68>
		thread = _priq_wait_best(&wait_q->waitq);
    e294:	4630      	mov	r0, r6
    e296:	f7ff fecb 	bl	e030 <z_priq_dumb_best>
		if (thread != NULL) {
    e29a:	4604      	mov	r4, r0
    e29c:	2800      	cmp	r0, #0
    e29e:	d1dc      	bne.n	e25a <z_sched_wake+0x20>
    e2a0:	e7f2      	b.n	e288 <z_sched_wake+0x4e>
}
    e2a2:	4648      	mov	r0, r9
    e2a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000e2a8 <remove_timeout>:
{
    e2a8:	b538      	push	{r3, r4, r5, lr}
    e2aa:	4604      	mov	r4, r0
	if (next(t) != NULL) {
    e2ac:	f7fc fd26 	bl	acfc <next>
    e2b0:	b148      	cbz	r0, e2c6 <remove_timeout+0x1e>
    e2b2:	4602      	mov	r2, r0
		next(t)->dticks += t->dticks;
    e2b4:	6920      	ldr	r0, [r4, #16]
    e2b6:	6965      	ldr	r5, [r4, #20]
    e2b8:	6913      	ldr	r3, [r2, #16]
    e2ba:	6951      	ldr	r1, [r2, #20]
    e2bc:	181b      	adds	r3, r3, r0
    e2be:	eb45 0101 	adc.w	r1, r5, r1
    e2c2:	6113      	str	r3, [r2, #16]
    e2c4:	6151      	str	r1, [r2, #20]
	sys_dnode_t *const prev = node->prev;
    e2c6:	6862      	ldr	r2, [r4, #4]
	sys_dnode_t *const next = node->next;
    e2c8:	6823      	ldr	r3, [r4, #0]
	prev->next = next;
    e2ca:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    e2cc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    e2ce:	2300      	movs	r3, #0
    e2d0:	6023      	str	r3, [r4, #0]
	node->prev = NULL;
    e2d2:	6063      	str	r3, [r4, #4]
}
    e2d4:	bd38      	pop	{r3, r4, r5, pc}

0000e2d6 <z_abort_timeout>:
{
    e2d6:	b570      	push	{r4, r5, r6, lr}
    e2d8:	4604      	mov	r4, r0
	LOCKED(&timeout_lock) {
    e2da:	2300      	movs	r3, #0
	__asm__ volatile(
    e2dc:	f04f 0220 	mov.w	r2, #32
    e2e0:	f3ef 8611 	mrs	r6, BASEPRI
    e2e4:	f382 8812 	msr	BASEPRI_MAX, r2
    e2e8:	f3bf 8f6f 	isb	sy
	int ret = -EINVAL;
    e2ec:	f06f 0015 	mvn.w	r0, #21
    e2f0:	e008      	b.n	e304 <z_abort_timeout+0x2e>
			remove_timeout(to);
    e2f2:	4620      	mov	r0, r4
    e2f4:	f7ff ffd8 	bl	e2a8 <remove_timeout>
			ret = 0;
    e2f8:	4628      	mov	r0, r5
	__asm__ volatile(
    e2fa:	f386 8811 	msr	BASEPRI, r6
    e2fe:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    e302:	2301      	movs	r3, #1
    e304:	461d      	mov	r5, r3
    e306:	b91b      	cbnz	r3, e310 <z_abort_timeout+0x3a>
	return node->next != NULL;
    e308:	6823      	ldr	r3, [r4, #0]
		if (sys_dnode_is_linked(&to->node)) {
    e30a:	2b00      	cmp	r3, #0
    e30c:	d1f1      	bne.n	e2f2 <z_abort_timeout+0x1c>
    e30e:	e7f4      	b.n	e2fa <z_abort_timeout+0x24>
}
    e310:	bd70      	pop	{r4, r5, r6, pc}

0000e312 <z_get_next_timeout_expiry>:
{
    e312:	b510      	push	{r4, lr}
	LOCKED(&timeout_lock) {
    e314:	2300      	movs	r3, #0
	__asm__ volatile(
    e316:	f04f 0220 	mov.w	r2, #32
    e31a:	f3ef 8411 	mrs	r4, BASEPRI
    e31e:	f382 8812 	msr	BASEPRI_MAX, r2
    e322:	f3bf 8f6f 	isb	sy
	int32_t ret = (int32_t) K_TICKS_FOREVER;
    e326:	f04f 30ff 	mov.w	r0, #4294967295
	LOCKED(&timeout_lock) {
    e32a:	b93b      	cbnz	r3, e33c <z_get_next_timeout_expiry+0x2a>
		ret = next_timeout();
    e32c:	f7fc fcfe 	bl	ad2c <next_timeout>
	__asm__ volatile(
    e330:	f384 8811 	msr	BASEPRI, r4
    e334:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    e338:	2301      	movs	r3, #1
    e33a:	e7f6      	b.n	e32a <z_get_next_timeout_expiry+0x18>
}
    e33c:	bd10      	pop	{r4, pc}

0000e33e <z_set_timeout_expiry>:
{
    e33e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e340:	4606      	mov	r6, r0
    e342:	460f      	mov	r7, r1
	LOCKED(&timeout_lock) {
    e344:	2300      	movs	r3, #0
	__asm__ volatile(
    e346:	f04f 0220 	mov.w	r2, #32
    e34a:	f3ef 8511 	mrs	r5, BASEPRI
    e34e:	f382 8812 	msr	BASEPRI_MAX, r2
    e352:	f3bf 8f6f 	isb	sy
    e356:	e00a      	b.n	e36e <z_set_timeout_expiry+0x30>
			      || (ticks <= next_to);
    e358:	2401      	movs	r4, #1
		bool sooner = (next_to == K_TICKS_FOREVER)
    e35a:	f004 0401 	and.w	r4, r4, #1
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    e35e:	2801      	cmp	r0, #1
    e360:	dd00      	ble.n	e364 <z_set_timeout_expiry+0x26>
    e362:	b97c      	cbnz	r4, e384 <z_set_timeout_expiry+0x46>
	__asm__ volatile(
    e364:	f385 8811 	msr	BASEPRI, r5
    e368:	f3bf 8f6f 	isb	sy
	LOCKED(&timeout_lock) {
    e36c:	2301      	movs	r3, #1
    e36e:	461c      	mov	r4, r3
    e370:	b97b      	cbnz	r3, e392 <z_set_timeout_expiry+0x54>
		int next_to = next_timeout();
    e372:	f7fc fcdb 	bl	ad2c <next_timeout>
			      || (ticks <= next_to);
    e376:	f1b0 3fff 	cmp.w	r0, #4294967295
    e37a:	d0ed      	beq.n	e358 <z_set_timeout_expiry+0x1a>
    e37c:	42b0      	cmp	r0, r6
    e37e:	dbec      	blt.n	e35a <z_set_timeout_expiry+0x1c>
    e380:	2401      	movs	r4, #1
    e382:	e7ea      	b.n	e35a <z_set_timeout_expiry+0x1c>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    e384:	4639      	mov	r1, r7
    e386:	42b0      	cmp	r0, r6
    e388:	bfa8      	it	ge
    e38a:	4630      	movge	r0, r6
    e38c:	f7f8 fede 	bl	714c <sys_clock_set_timeout>
    e390:	e7e8      	b.n	e364 <z_set_timeout_expiry+0x26>
}
    e392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e394 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    e394:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    e396:	f7fc fdfb 	bl	af90 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    e39a:	bd08      	pop	{r3, pc}

0000e39c <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    e39c:	b900      	cbnz	r0, e3a0 <z_impl_k_busy_wait+0x4>
    e39e:	4770      	bx	lr
{
    e3a0:	b508      	push	{r3, lr}
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    e3a2:	f7f6 fab3 	bl	490c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    e3a6:	bd08      	pop	{r3, pc}

0000e3a8 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
    e3a8:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    e3aa:	f1b1 3fff 	cmp.w	r1, #4294967295
    e3ae:	bf08      	it	eq
    e3b0:	f1b0 3fff 	cmpeq.w	r0, #4294967295
    e3b4:	d024      	beq.n	e400 <sys_clock_timeout_end_calc+0x58>
    e3b6:	4604      	mov	r4, r0
    e3b8:	460d      	mov	r5, r1
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    e3ba:	ea54 0105 	orrs.w	r1, r4, r5
    e3be:	d00d      	beq.n	e3dc <sys_clock_timeout_end_calc+0x34>
		return sys_clock_tick_get();
	} else {

		dt = timeout.ticks;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    e3c0:	f06f 0101 	mvn.w	r1, #1
    e3c4:	1a0a      	subs	r2, r1, r0
    e3c6:	f04f 31ff 	mov.w	r1, #4294967295
    e3ca:	eb61 0305 	sbc.w	r3, r1, r5
    e3ce:	2a00      	cmp	r2, #0
    e3d0:	f173 0100 	sbcs.w	r1, r3, #0
    e3d4:	db05      	blt.n	e3e2 <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
    e3d6:	4610      	mov	r0, r2
    e3d8:	4619      	mov	r1, r3
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    e3da:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get();
    e3dc:	f7fc fdd8 	bl	af90 <sys_clock_tick_get>
    e3e0:	e7fb      	b.n	e3da <sys_clock_timeout_end_calc+0x32>
		return sys_clock_tick_get() + MAX(1, dt);
    e3e2:	f7fc fdd5 	bl	af90 <sys_clock_tick_get>
    e3e6:	4623      	mov	r3, r4
    e3e8:	462a      	mov	r2, r5
    e3ea:	2c01      	cmp	r4, #1
    e3ec:	f175 0400 	sbcs.w	r4, r5, #0
    e3f0:	db03      	blt.n	e3fa <sys_clock_timeout_end_calc+0x52>
    e3f2:	18c0      	adds	r0, r0, r3
    e3f4:	eb42 0101 	adc.w	r1, r2, r1
    e3f8:	e7ef      	b.n	e3da <sys_clock_timeout_end_calc+0x32>
    e3fa:	2301      	movs	r3, #1
    e3fc:	2200      	movs	r2, #0
    e3fe:	e7f8      	b.n	e3f2 <sys_clock_timeout_end_calc+0x4a>
		return UINT64_MAX;
    e400:	f04f 30ff 	mov.w	r0, #4294967295
    e404:	4601      	mov	r1, r0
    e406:	e7e8      	b.n	e3da <sys_clock_timeout_end_calc+0x32>

0000e408 <k_timer_init>:
	timer->expiry_fn = expiry_fn;
    e408:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
    e40a:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0U;
    e40c:	2300      	movs	r3, #0
    e40e:	6303      	str	r3, [r0, #48]	; 0x30
	sys_dlist_init(&w->waitq);
    e410:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
    e414:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
    e416:	61c2      	str	r2, [r0, #28]
	node->next = NULL;
    e418:	6003      	str	r3, [r0, #0]
	node->prev = NULL;
    e41a:	6043      	str	r3, [r0, #4]
	timer->user_data = NULL;
    e41c:	6343      	str	r3, [r0, #52]	; 0x34
}
    e41e:	4770      	bx	lr

0000e420 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    e420:	b510      	push	{r4, lr}
    e422:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    e424:	f7ff ff57 	bl	e2d6 <z_abort_timeout>

	if (inactive) {
    e428:	b9a0      	cbnz	r0, e454 <z_impl_k_timer_stop+0x34>
		return;
	}

	if (timer->stop_fn != NULL) {
    e42a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e42c:	b10b      	cbz	r3, e432 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    e42e:	4620      	mov	r0, r4
    e430:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    e432:	f104 0018 	add.w	r0, r4, #24
    e436:	f7ff fe9d 	bl	e174 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    e43a:	b158      	cbz	r0, e454 <z_impl_k_timer_stop+0x34>
			z_ready_thread(pending_thread);
    e43c:	f7ff fdff 	bl	e03e <z_ready_thread>
	__asm__ volatile(
    e440:	f04f 0320 	mov.w	r3, #32
    e444:	f3ef 8011 	mrs	r0, BASEPRI
    e448:	f383 8812 	msr	BASEPRI_MAX, r3
    e44c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    e450:	f7ff fdae 	bl	dfb0 <z_reschedule_irqlock>
			z_reschedule_unlocked();
		}
	}
}
    e454:	bd10      	pop	{r4, pc}

0000e456 <z_heap_aligned_alloc>:
{
    e456:	b5d0      	push	{r4, r6, r7, lr}
    e458:	b082      	sub	sp, #8
    e45a:	4604      	mov	r4, r0
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    e45c:	2000      	movs	r0, #0
    e45e:	2304      	movs	r3, #4
    e460:	18d2      	adds	r2, r2, r3
    e462:	d20e      	bcs.n	e482 <z_heap_aligned_alloc+0x2c>
	if (size_add_overflow(size, sizeof(heap_ref), &size)) {
    e464:	b978      	cbnz	r0, e486 <z_heap_aligned_alloc+0x30>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    e466:	2600      	movs	r6, #0
    e468:	2700      	movs	r7, #0
    e46a:	e9cd 6700 	strd	r6, r7, [sp]
    e46e:	f041 0104 	orr.w	r1, r1, #4
    e472:	4620      	mov	r0, r4
    e474:	f000 f81a 	bl	e4ac <k_heap_aligned_alloc>
	if (mem == NULL) {
    e478:	b108      	cbz	r0, e47e <z_heap_aligned_alloc+0x28>
	*heap_ref = heap;
    e47a:	f840 4b04 	str.w	r4, [r0], #4
}
    e47e:	b002      	add	sp, #8
    e480:	bdd0      	pop	{r4, r6, r7, pc}
    e482:	2001      	movs	r0, #1
    e484:	e7ee      	b.n	e464 <z_heap_aligned_alloc+0xe>
		return NULL;
    e486:	2000      	movs	r0, #0
    e488:	e7f9      	b.n	e47e <z_heap_aligned_alloc+0x28>

0000e48a <k_free>:
	if (ptr != NULL) {
    e48a:	b130      	cbz	r0, e49a <k_free+0x10>
{
    e48c:	b508      	push	{r3, lr}
		k_heap_free(*heap_ref, ptr);
    e48e:	1f01      	subs	r1, r0, #4
    e490:	f850 0c04 	ldr.w	r0, [r0, #-4]
    e494:	f000 f855 	bl	e542 <k_heap_free>
}
    e498:	bd08      	pop	{r3, pc}
    e49a:	4770      	bx	lr

0000e49c <k_heap_init>:
{
    e49c:	b510      	push	{r4, lr}
    e49e:	f100 040c 	add.w	r4, r0, #12
	list->head = (sys_dnode_t *)list;
    e4a2:	60c4      	str	r4, [r0, #12]
	list->tail = (sys_dnode_t *)list;
    e4a4:	6104      	str	r4, [r0, #16]
	sys_heap_init(&h->heap, mem, bytes);
    e4a6:	f7fd fd6f 	bl	bf88 <sys_heap_init>
}
    e4aa:	bd10      	pop	{r4, pc}

0000e4ac <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    e4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e4b0:	b087      	sub	sp, #28
    e4b2:	4680      	mov	r8, r0
    e4b4:	9103      	str	r1, [sp, #12]
    e4b6:	9204      	str	r2, [sp, #16]
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    e4b8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
    e4bc:	f7ff ff74 	bl	e3a8 <sys_clock_timeout_end_calc>
    e4c0:	4681      	mov	r9, r0
    e4c2:	468b      	mov	fp, r1
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    e4c4:	f108 0314 	add.w	r3, r8, #20
    e4c8:	9305      	str	r3, [sp, #20]
    e4ca:	f04f 0320 	mov.w	r3, #32
    e4ce:	f3ef 8511 	mrs	r5, BASEPRI
    e4d2:	f383 8812 	msr	BASEPRI_MAX, r3
    e4d6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");

	bool blocked_alloc = false;
    e4da:	f04f 0a00 	mov.w	sl, #0
	void *ret = NULL;
    e4de:	4654      	mov	r4, sl

	while (ret == NULL) {
    e4e0:	e00f      	b.n	e502 <k_heap_aligned_alloc+0x56>
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    e4e2:	e9cd 6700 	strd	r6, r7, [sp]
    e4e6:	f108 020c 	add.w	r2, r8, #12
    e4ea:	4629      	mov	r1, r5
    e4ec:	9805      	ldr	r0, [sp, #20]
    e4ee:	f7fc f999 	bl	a824 <z_pend_curr>
    e4f2:	f04f 0320 	mov.w	r3, #32
    e4f6:	f3ef 8511 	mrs	r5, BASEPRI
    e4fa:	f383 8812 	msr	BASEPRI_MAX, r3
    e4fe:	f3bf 8f6f 	isb	sy
	while (ret == NULL) {
    e502:	b9b4      	cbnz	r4, e532 <k_heap_aligned_alloc+0x86>
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    e504:	9a04      	ldr	r2, [sp, #16]
    e506:	9903      	ldr	r1, [sp, #12]
    e508:	4640      	mov	r0, r8
    e50a:	f7fd fcaf 	bl	be6c <sys_heap_aligned_alloc>
    e50e:	4604      	mov	r4, r0
		now = sys_clock_tick_get();
    e510:	f7fc fd3e 	bl	af90 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    e514:	b96c      	cbnz	r4, e532 <k_heap_aligned_alloc+0x86>
		    (ret != NULL) || ((end - now) <= 0)) {
    e516:	ebb9 0600 	subs.w	r6, r9, r0
    e51a:	eb6b 0701 	sbc.w	r7, fp, r1
    e51e:	2e01      	cmp	r6, #1
    e520:	f177 0300 	sbcs.w	r3, r7, #0
    e524:	db05      	blt.n	e532 <k_heap_aligned_alloc+0x86>
		if (!blocked_alloc) {
    e526:	f1ba 0f00 	cmp.w	sl, #0
    e52a:	d1da      	bne.n	e4e2 <k_heap_aligned_alloc+0x36>
			blocked_alloc = true;
    e52c:	f04f 0a01 	mov.w	sl, #1
    e530:	e7d7      	b.n	e4e2 <k_heap_aligned_alloc+0x36>
	__asm__ volatile(
    e532:	f385 8811 	msr	BASEPRI, r5
    e536:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    e53a:	4620      	mov	r0, r4
    e53c:	b007      	add	sp, #28
    e53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000e542 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
    e542:	b570      	push	{r4, r5, r6, lr}
    e544:	4604      	mov	r4, r0
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    e546:	f100 0614 	add.w	r6, r0, #20
	__asm__ volatile(
    e54a:	f04f 0320 	mov.w	r3, #32
    e54e:	f3ef 8511 	mrs	r5, BASEPRI
    e552:	f383 8812 	msr	BASEPRI_MAX, r3
    e556:	f3bf 8f6f 	isb	sy

	sys_heap_free(&h->heap, mem);
    e55a:	f7fd fc25 	bl	bda8 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    e55e:	f104 000c 	add.w	r0, r4, #12
    e562:	f7ff fe59 	bl	e218 <z_unpend_all>
    e566:	b920      	cbnz	r0, e572 <k_heap_free+0x30>
	__asm__ volatile(
    e568:	f385 8811 	msr	BASEPRI, r5
    e56c:	f3bf 8f6f 	isb	sy
		z_reschedule(&h->lock, key);
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    e570:	bd70      	pop	{r4, r5, r6, pc}
		z_reschedule(&h->lock, key);
    e572:	4629      	mov	r1, r5
    e574:	4630      	mov	r0, r6
    e576:	f7fb fff1 	bl	a55c <z_reschedule>
    e57a:	e7f9      	b.n	e570 <k_heap_free+0x2e>

0000e57c <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    e57c:	4770      	bx	lr
	...

0000e580 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    e580:	f7f8 bed8 	b.w	7334 <SystemInit>
